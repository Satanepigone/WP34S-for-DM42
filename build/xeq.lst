ARM GAS  /tmp/ccBFDvgN.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xeq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.find_section_bounds,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	find_section_bounds:
  27              	.LVL0:
  28              	.LFB19:
  29              		.file 1 "src/xeq.c"
   1:src/xeq.c     **** /* This file is part of 34S.
   2:src/xeq.c     ****  * 
   3:src/xeq.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/xeq.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/xeq.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/xeq.c     ****  * (at your option) any later version.
   7:src/xeq.c     ****  * 
   8:src/xeq.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/xeq.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/xeq.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/xeq.c     ****  * GNU General Public License for more details.
  12:src/xeq.c     ****  * 
  13:src/xeq.c     ****  * You should have received a copy of the GNU General Public License
  14:src/xeq.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/xeq.c     ****  */
  16:src/xeq.c     **** 
  17:src/xeq.c     **** #ifndef REALBUILD
  18:src/xeq.c     **** 
  19:src/xeq.c     **** #if defined(WIN32) && !defined(QTGUI) && !defined(IOS) && !defined(__GNUC__) && !defined(DM42)
  20:src/xeq.c     **** 
  21:src/xeq.c     **** #include <stdlib.h>  // sleep
  22:src/xeq.c     **** #include "win32.h"
  23:src/xeq.c     **** #define sleep _sleep
  24:src/xeq.c     **** #define strtoull _strtoui64
  25:src/xeq.c     **** 
  26:src/xeq.c     **** #else
  27:src/xeq.c     **** 
  28:src/xeq.c     **** #ifdef DM42
  29:src/xeq.c     **** #include "dmcp.h"
ARM GAS  /tmp/ccBFDvgN.s 			page 2


  30:src/xeq.c     **** #else
  31:src/xeq.c     **** #include <unistd.h>
  32:src/xeq.c     **** #include <sys/time.h>
  33:src/xeq.c     **** extern unsigned long long strtoull(const char *, char **, int);
  34:src/xeq.c     **** #endif
  35:src/xeq.c     **** 
  36:src/xeq.c     **** #endif
  37:src/xeq.c     **** 
  38:src/xeq.c     **** #include <stdio.h>   // (s)printf
  39:src/xeq.c     **** #include <string.h>
  40:src/xeq.c     **** #include <stdlib.h>
  41:src/xeq.c     **** 
  42:src/xeq.c     **** #endif // not REALBUILD
  43:src/xeq.c     **** 
  44:src/xeq.c     **** #ifdef IOS
  45:src/xeq.c     **** #include <stdarg.h>
  46:src/xeq.c     **** #endif
  47:src/xeq.c     **** 
  48:src/xeq.c     **** #if __GNUC__ >= 4 && __GNUC_MINOR__ >= 6
  49:src/xeq.c     **** #define GNUC_POP_ERROR
  50:src/xeq.c     **** #pragma GCC diagnostic push
  51:src/xeq.c     **** #pragma GCC diagnostic ignored "-Warray-bounds"
  52:src/xeq.c     **** #endif
  53:src/xeq.c     **** 
  54:src/xeq.c     **** #define XEQ_INTERNAL 1
  55:src/xeq.c     **** #define DM42SAFE
  56:src/xeq.c     **** #include "xeq.h"
  57:src/xeq.c     **** #ifdef DM42
  58:src/xeq.c     **** #include "keys.h"
  59:src/xeq.c     **** #endif
  60:src/xeq.c     **** #include "storage.h"
  61:src/xeq.c     **** #include "decn.h"
  62:src/xeq.c     **** #include "complex.h"
  63:src/xeq.c     **** #include "stats.h"
  64:src/xeq.c     **** #include "display.h"
  65:src/xeq.c     **** #include "consts.h"
  66:src/xeq.c     **** #include "int.h"
  67:src/xeq.c     **** #include "date.h"
  68:src/xeq.c     **** #include "lcd.h"
  69:src/xeq.c     **** #include "xrom.h"
  70:src/xeq.c     **** #include "alpha.h"
  71:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
  72:src/xeq.c     **** #include "stopwatch.h"
  73:src/xeq.c     **** #endif
  74:src/xeq.c     **** #ifndef DM42
  75:src/xeq.c     **** #include "printer.h"
  76:src/xeq.c     **** #endif
  77:src/xeq.c     **** #undef DM42SAFE
  78:src/xeq.c     **** 
  79:src/xeq.c     **** #include "pretty.h"
  80:src/xeq.c     **** 
  81:src/xeq.c     **** 
  82:src/xeq.c     **** #include "xrom_targets.c"	// Generated by PP
  83:src/xeq.c     **** 
  84:src/xeq.c     **** /* Define the number of program Ticks that must elapse between flashing the
  85:src/xeq.c     ****  * RCL annunciator.
  86:src/xeq.c     ****  */
ARM GAS  /tmp/ccBFDvgN.s 			page 3


  87:src/xeq.c     **** #define TICKS_PER_FLASH	(5)
  88:src/xeq.c     **** 
  89:src/xeq.c     **** /*
  90:src/xeq.c     ****  *  A program is running
  91:src/xeq.c     ****  */
  92:src/xeq.c     **** FLAG Running;
  93:src/xeq.c     **** FLAG XromRunning;
  94:src/xeq.c     **** 
  95:src/xeq.c     **** #ifndef CONSOLE
  96:src/xeq.c     **** /*
  97:src/xeq.c     ****  *  A program has just stopped
  98:src/xeq.c     ****  */
  99:src/xeq.c     **** FLAG JustStopped;
 100:src/xeq.c     **** #endif
 101:src/xeq.c     **** 
 102:src/xeq.c     **** /*
 103:src/xeq.c     ****  *  Count down counter for a programmed pause
 104:src/xeq.c     ****  */
 105:src/xeq.c     **** volatile unsigned char Pause;
 106:src/xeq.c     **** 
 107:src/xeq.c     **** /*
 108:src/xeq.c     ****  *  Some long running function has called busy();
 109:src/xeq.c     ****  */
 110:src/xeq.c     **** FLAG Busy;
 111:src/xeq.c     **** 
 112:src/xeq.c     **** /*
 113:src/xeq.c     ****  *  Error code
 114:src/xeq.c     ****  */
 115:src/xeq.c     **** SMALL_INT Error;
 116:src/xeq.c     **** 
 117:src/xeq.c     **** /*
 118:src/xeq.c     ****  *  Indication of PC wrap around
 119:src/xeq.c     ****  */
 120:src/xeq.c     **** FLAG PcWrapped;
 121:src/xeq.c     **** 
 122:src/xeq.c     **** /*
 123:src/xeq.c     ****  *  Currently executed function
 124:src/xeq.c     ****  */
 125:src/xeq.c     **** s_opcode XeqOpCode;
 126:src/xeq.c     **** 
 127:src/xeq.c     **** /*
 128:src/xeq.c     ****  *  Temporary display (not X)
 129:src/xeq.c     ****  */
 130:src/xeq.c     **** SMALL_INT ShowRegister;
 131:src/xeq.c     **** 
 132:src/xeq.c     **** /*
 133:src/xeq.c     ****  *  User code being called from XROM
 134:src/xeq.c     ****  */
 135:src/xeq.c     **** SMALL_INT XromUserPc;
 136:src/xeq.c     **** SMALL_INT UserLocalRegs;
 137:src/xeq.c     **** 
 138:src/xeq.c     **** /* We need various different math contexts.
 139:src/xeq.c     ****  * More efficient to define these globally and reuse them as needed.
 140:src/xeq.c     ****  */
 141:src/xeq.c     **** decContext Ctx;
 142:src/xeq.c     **** 
 143:src/xeq.c     **** /*
ARM GAS  /tmp/ccBFDvgN.s 			page 4


 144:src/xeq.c     ****  * A buffer for instruction display
 145:src/xeq.c     ****  */
 146:src/xeq.c     **** char TraceBuffer[25];
 147:src/xeq.c     **** 
 148:src/xeq.c     **** /*
 149:src/xeq.c     ****  *  Total Size of the return stack
 150:src/xeq.c     ****  */
 151:src/xeq.c     **** SMALL_INT RetStkSize;
 152:src/xeq.c     **** 
 153:src/xeq.c     **** /*
 154:src/xeq.c     ****  *  Number of remaining program steps
 155:src/xeq.c     ****  */
 156:src/xeq.c     **** SMALL_INT ProgFree;
 157:src/xeq.c     **** 
 158:src/xeq.c     **** /*
 159:src/xeq.c     ****  * The actual top of the return stack
 160:src/xeq.c     ****  */
 161:src/xeq.c     **** unsigned short *RetStk;
 162:src/xeq.c     **** 
 163:src/xeq.c     **** /*
 164:src/xeq.c     ****  *  The location of the RPN stack
 165:src/xeq.c     ****  */
 166:src/xeq.c     **** REGISTER *StackBase;
 167:src/xeq.c     **** 
 168:src/xeq.c     **** #ifdef INFRARED
 169:src/xeq.c     **** /*
 170:src/xeq.c     ****  *  Is tracing active?
 171:src/xeq.c     ****  */
 172:src/xeq.c     **** FLAG Tracing;
 173:src/xeq.c     **** #endif
 174:src/xeq.c     **** 
 175:src/xeq.c     **** /*
 176:src/xeq.c     **** *	Indicates that a coordinate converstion has just happened
 177:src/xeq.c     **** */
 178:src/xeq.c     **** #ifdef RP_PREFIX
 179:src/xeq.c     **** SMALL_INT RectPolConv; // 1 - R->P just done; 2 - P->R just done
 180:src/xeq.c     **** #endif
 181:src/xeq.c     **** 
 182:src/xeq.c     **** /*
 183:src/xeq.c     ****  *  Check if the current PC is in XROM
 184:src/xeq.c     ****  */
 185:src/xeq.c     **** int is_xrom(void) {
 186:src/xeq.c     **** 	return isXROM(state_pc());
 187:src/xeq.c     **** }
 188:src/xeq.c     **** 
 189:src/xeq.c     **** /*
 190:src/xeq.c     ****  *  Shift the return stack.
 191:src/xeq.c     ****  *  The distance is in levels.
 192:src/xeq.c     ****  *  If argument is negative, return stack will shrink.
 193:src/xeq.c     ****  *  Returns 1 if unsuccessful (error is set)
 194:src/xeq.c     ****  */
 195:src/xeq.c     **** int move_retstk(int distance)
 196:src/xeq.c     **** {
 197:src/xeq.c     **** #ifndef REALBUILD
 198:src/xeq.c     **** 	// Sanity check
 199:src/xeq.c     **** 	if (XromFlags.xIN) {
 200:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
ARM GAS  /tmp/ccBFDvgN.s 			page 5


 201:src/xeq.c     **** 		return 1;
 202:src/xeq.c     **** 	}
 203:src/xeq.c     **** #endif
 204:src/xeq.c     **** 	if (RetStkSize + RetStkPtr + distance < 0) {
 205:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 206:src/xeq.c     **** 		return 1;
 207:src/xeq.c     **** 	}
 208:src/xeq.c     **** 	xcopy(RetStk + RetStkPtr + distance, RetStk + RetStkPtr, (-RetStkPtr) << 1);
 209:src/xeq.c     **** 	RetStk += distance;
 210:src/xeq.c     **** 	RetStkSize += distance;
 211:src/xeq.c     **** 	return 0;
 212:src/xeq.c     **** }
 213:src/xeq.c     **** 
 214:src/xeq.c     **** /*
 215:src/xeq.c     ****  *  How many stack levels with local data have we?
 216:src/xeq.c     ****  */
 217:src/xeq.c     **** int local_levels(void) {
 218:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 219:src/xeq.c     **** }
 220:src/xeq.c     **** 
 221:src/xeq.c     **** /*
 222:src/xeq.c     ****  *  How many local registers have we?
 223:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 224:src/xeq.c     ****  */
 225:src/xeq.c     **** int local_regs_rarg(enum rarg op) {
 226:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 227:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 228:src/xeq.c     **** }
 229:src/xeq.c     **** 
 230:src/xeq.c     **** /*
 231:src/xeq.c     ****  *  How many local registers have we?
 232:src/xeq.c     ****  */
 233:src/xeq.c     **** int local_regs(void) {
 234:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 235:src/xeq.c     **** }
 236:src/xeq.c     **** 
 237:src/xeq.c     **** /*
 238:src/xeq.c     ****  *  How many global registers have we?
 239:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 240:src/xeq.c     ****  */
 241:src/xeq.c     **** unsigned int global_regs_rarg(enum rarg op) {
 242:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 243:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 244:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 245:src/xeq.c     **** 	}
 246:src/xeq.c     **** 	else
 247:src/xeq.c     **** 		return NumRegs;
 248:src/xeq.c     **** }
 249:src/xeq.c     **** 
 250:src/xeq.c     **** /*
 251:src/xeq.c     ****  *  How many global registers have we?
 252:src/xeq.c     ****  */
 253:src/xeq.c     **** unsigned int global_regs(void) {
 254:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 255:src/xeq.c     **** }
 256:src/xeq.c     **** 
 257:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 6


 258:src/xeq.c     **** #if defined(CONSOLE)
 259:src/xeq.c     **** // Console screen only
 260:src/xeq.c     **** unsigned int get_local_flags(void) {
 261:src/xeq.c     **** 	if (LocalRegs == 0)
 262:src/xeq.c     **** 		return 0;
 263:src/xeq.c     **** 	return RetStk[LocalRegs + 1];
 264:src/xeq.c     **** }
 265:src/xeq.c     **** #endif
 266:src/xeq.c     **** 
 267:src/xeq.c     **** void version(enum nilop op) {
 268:src/xeq.c     **** 	State2.version = 1;
 269:src/xeq.c     **** 	if (!State2.runmode)
 270:src/xeq.c     **** 		display();
 271:src/xeq.c     **** }
 272:src/xeq.c     **** 
 273:src/xeq.c     **** void cmd_off(enum nilop op) {
 274:src/xeq.c     **** 	shutdown();
 275:src/xeq.c     **** }
 276:src/xeq.c     **** 
 277:src/xeq.c     **** #ifndef state_pc
 278:src/xeq.c     **** unsigned int state_pc(void) {
 279:src/xeq.c     **** 	return State.pc;	
 280:src/xeq.c     **** }
 281:src/xeq.c     **** #endif
 282:src/xeq.c     **** static void raw_set_pc(unsigned int pc) {
 283:src/xeq.c     **** 	State.pc = pc;
 284:src/xeq.c     **** 	update_program_bounds(0);
 285:src/xeq.c     **** }
 286:src/xeq.c     **** 
 287:src/xeq.c     **** /*
 288:src/xeq.c     ****  *  Where do the program regions start?
 289:src/xeq.c     ****  */
 290:src/xeq.c     **** #ifdef DM42
 291:src/xeq.c     **** 
 292:src/xeq.c     **** #pragma GCC diagnostic push
 293:src/xeq.c     **** #pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
 294:src/xeq.c     **** static s_opcode * RegionTab[] = {
 295:src/xeq.c     **** 	NULL,
 296:src/xeq.c     **** 	NULL,
 297:src/xeq.c     **** 	NULL,
 298:src/xeq.c     **** 	xrom
 299:src/xeq.c     **** };
 300:src/xeq.c     **** #pragma GCC diagnostic pop
 301:src/xeq.c     **** 
 302:src/xeq.c     **** void init_RegionTab (void) {
 303:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 304:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 305:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 306:src/xeq.c     **** }
 307:src/xeq.c     **** 
 308:src/xeq.c     **** #else
 309:src/xeq.c     **** static const s_opcode *const RegionTab[] = {
 310:src/xeq.c     **** 	Prog,
 311:src/xeq.c     **** 	UserFlash.prog,
 312:src/xeq.c     **** 	BackupFlash._prog,
 313:src/xeq.c     **** 	xrom
 314:src/xeq.c     **** };
ARM GAS  /tmp/ccBFDvgN.s 			page 7


 315:src/xeq.c     **** #endif
 316:src/xeq.c     **** /*
 317:src/xeq.c     ****  *  Size of a program segment
 318:src/xeq.c     ****  */
 319:src/xeq.c     **** int sizeLIB(int region) {
 320:src/xeq.c     **** 	if (region == REGION_XROM)
 321:src/xeq.c     **** 		return xrom_size;
 322:src/xeq.c     **** 	else
 323:src/xeq.c     **** 		return (int)RegionTab[region][-1];
 324:src/xeq.c     **** }
 325:src/xeq.c     **** 
 326:src/xeq.c     **** 
 327:src/xeq.c     **** /*
 328:src/xeq.c     ****  *  Get an opcode, check for double length codes
 329:src/xeq.c     ****  */
 330:src/xeq.c     **** static opcode get_opcode( const s_opcode *loc )
 331:src/xeq.c     **** {
 332:src/xeq.c     **** 	opcode r = *loc;
 333:src/xeq.c     **** 	if ( isDBL(r) ) {
 334:src/xeq.c     **** 		r |= loc[1] << 16;
 335:src/xeq.c     **** 	}
 336:src/xeq.c     **** 	return r;
 337:src/xeq.c     **** }
 338:src/xeq.c     **** 
 339:src/xeq.c     **** 
 340:src/xeq.c     **** /* 
 341:src/xeq.c     ****  * Return the program memory location specified.
 342:src/xeq.c     ****  */
 343:src/xeq.c     **** opcode getprog(unsigned int pc) {
 344:src/xeq.c     **** 
 345:src/xeq.c     **** 	const int region = nLIB(pc);
 346:src/xeq.c     **** 	int offset = offsetLIB(pc);
 347:src/xeq.c     **** 
 348:src/xeq.c     **** 	if (offset < 0 || offset >= sizeLIB(region))
 349:src/xeq.c     **** 		return OP_NIL | OP_END;
 350:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 351:src/xeq.c     **** }
 352:src/xeq.c     **** 
 353:src/xeq.c     **** 
 354:src/xeq.c     **** /* 
 355:src/xeq.c     ****  * Return the physical start-address of the current program
 356:src/xeq.c     ****  */
 357:src/xeq.c     **** const s_opcode *get_current_prog(void) {
 358:src/xeq.c     **** 
 359:src/xeq.c     **** 	const int region = nLIB(ProgBegin);
 360:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 361:src/xeq.c     **** }
 362:src/xeq.c     **** 
 363:src/xeq.c     **** 
 364:src/xeq.c     **** /*
 365:src/xeq.c     ****  *  Set PC with sanity check
 366:src/xeq.c     ****  */
 367:src/xeq.c     **** void set_pc(unsigned int pc) {
 368:src/xeq.c     **** 	if (isRAM(pc)) {
 369:src/xeq.c     **** 		if (pc > ProgSize)
 370:src/xeq.c     **** 			pc = ProgSize;
 371:src/xeq.c     **** 		if (pc > 1 && isDBL(Prog_1[pc - 1]))
ARM GAS  /tmp/ccBFDvgN.s 			page 8


 372:src/xeq.c     **** 			pc--;
 373:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 374:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 375:src/xeq.c     **** 		if (pc > n - 1)
 376:src/xeq.c     **** 			pc = n - 1;
 377:src/xeq.c     **** 		if (pc > startLIB(pc) && isDBL(getprog(pc - 1)))
 378:src/xeq.c     **** 			--pc;
 379:src/xeq.c     **** 	}
 380:src/xeq.c     **** 	raw_set_pc(pc);
 381:src/xeq.c     **** }
 382:src/xeq.c     **** 
 383:src/xeq.c     **** 
 384:src/xeq.c     **** 
 385:src/xeq.c     **** /* Locate the beginning and end of a section from a PC that points anywhere within
 386:src/xeq.c     ****  */
 387:src/xeq.c     **** static unsigned short int find_section_bounds(const unsigned int pc, const int endp, unsigned short
  30              		.loc 1 387 119 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 388:src/xeq.c     **** 	unsigned short int top, bottom;
  35              		.loc 1 388 2 view .LVU1
 389:src/xeq.c     **** 
 390:src/xeq.c     **** 	if (endp && State2.runmode) { 
  36              		.loc 1 390 2 view .LVU2
  37              		.loc 1 390 5 is_stmt 0 view .LVU3
  38 0000 71B1     		cbz	r1, .L2
  39              		.loc 1 390 11 discriminator 1 view .LVU4
  40 0002 194B     		ldr	r3, .L14
  41 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
  42 0006 5B06     		lsls	r3, r3, #25
  43 0008 0AD5     		bpl	.L2
 391:src/xeq.c     **** 		// Use the current program as bounds
 392:src/xeq.c     **** 		top = ProgBegin;
  44              		.loc 1 392 3 is_stmt 1 view .LVU5
  45              		.loc 1 392 9 is_stmt 0 view .LVU6
  46 000a 184B     		ldr	r3, .L14+4
  47 000c 1968     		ldr	r1, [r3]
  48              	.LVL1:
 393:src/xeq.c     **** 		bottom = ProgEnd;
  49              		.loc 1 393 3 is_stmt 1 view .LVU7
  50 000e B1F8EC37 		ldrh	r3, [r1, #2028]
  51              		.loc 1 393 10 is_stmt 0 view .LVU8
  52 0012 B1F8EE07 		ldrh	r0, [r1, #2030]
  53              	.LVL2:
 394:src/xeq.c     **** 		if (top == 0)
  54              		.loc 1 394 3 is_stmt 1 view .LVU9
  55 0016 012B     		cmp	r3, #1
  56 0018 38BF     		it	cc
  57 001a 0123     		movcc	r3, #1
  58              	.LVL3:
 395:src/xeq.c     **** 			top = 1;
 396:src/xeq.c     **** 	}
 397:src/xeq.c     **** 	else if (isXROM(pc)) {
 398:src/xeq.c     **** 		top = addrXROM(1);
 399:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
ARM GAS  /tmp/ccBFDvgN.s 			page 9


 400:src/xeq.c     **** 	} 
 401:src/xeq.c     **** 	else if (isLIB(pc)) {
 402:src/xeq.c     **** 		top = startLIB(pc);
 403:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
 404:src/xeq.c     **** 	}
 405:src/xeq.c     **** 	else {
 406:src/xeq.c     **** 		top = State2.runmode;  // step 001 if not entering a program
 407:src/xeq.c     **** 		bottom = ProgSize;
 408:src/xeq.c     **** 	}
 409:src/xeq.c     **** 	*p_top = top;
  59              		.loc 1 409 2 view .LVU10
  60              		.loc 1 409 9 is_stmt 0 view .LVU11
  61 001c 1380     		strh	r3, [r2]	@ movhi
 410:src/xeq.c     **** 	return bottom;
  62              		.loc 1 410 2 is_stmt 1 view .LVU12
 411:src/xeq.c     **** }
  63              		.loc 1 411 1 is_stmt 0 view .LVU13
  64 001e 7047     		bx	lr
  65              	.LVL4:
  66              	.L2:
 397:src/xeq.c     **** 		top = addrXROM(1);
  67              		.loc 1 397 7 is_stmt 1 view .LVU14
 397:src/xeq.c     **** 		top = addrXROM(1);
  68              		.loc 1 397 11 is_stmt 0 view .LVU15
  69 0020 830B     		lsrs	r3, r0, #14
 397:src/xeq.c     **** 		top = addrXROM(1);
  70              		.loc 1 397 10 view .LVU16
  71 0022 032B     		cmp	r3, #3
  72 0024 0FD0     		beq	.L13
 401:src/xeq.c     **** 		top = startLIB(pc);
  73              		.loc 1 401 7 is_stmt 1 view .LVU17
 401:src/xeq.c     **** 		top = startLIB(pc);
  74              		.loc 1 401 10 is_stmt 0 view .LVU18
  75 0026 10F4404F 		tst	r0, #49152
  76 002a 14D0     		beq	.L5
 402:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  77              		.loc 1 402 3 is_stmt 1 view .LVU19
  78              	.LBB1321:
  79              	.LBB1322:
 323:src/xeq.c     **** }
  80              		.loc 1 323 24 is_stmt 0 view .LVU20
  81 002c 1049     		ldr	r1, .L14+8
  82              	.LVL5:
 323:src/xeq.c     **** }
  83              		.loc 1 323 32 view .LVU21
  84 002e 51F82330 		ldr	r3, [r1, r3, lsl #2]
  85              	.LBE1322:
  86              	.LBE1321:
 403:src/xeq.c     **** 	}
  87              		.loc 1 403 10 view .LVU22
  88 0032 33F8021C 		ldrh	r1, [r3, #-2]
 402:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  89              		.loc 1 402 9 view .LVU23
  90 0036 00F44043 		and	r3, r0, #49152
 403:src/xeq.c     **** 	}
  91              		.loc 1 403 10 view .LVU24
  92 003a 5818     		adds	r0, r3, r1
ARM GAS  /tmp/ccBFDvgN.s 			page 10


  93              	.LVL6:
 402:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  94              		.loc 1 402 7 view .LVU25
  95 003c 0133     		adds	r3, r3, #1
  96 003e 9BB2     		uxth	r3, r3
  97              	.LVL7:
 403:src/xeq.c     **** 	}
  98              		.loc 1 403 3 is_stmt 1 view .LVU26
  99              	.LBB1324:
 100              	.LBI1321:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 101              		.loc 1 319 5 view .LVU27
 102              	.LBB1323:
 320:src/xeq.c     **** 		return xrom_size;
 103              		.loc 1 320 2 view .LVU28
 323:src/xeq.c     **** }
 104              		.loc 1 323 3 view .LVU29
 323:src/xeq.c     **** }
 105              		.loc 1 323 3 is_stmt 0 view .LVU30
 106              	.LBE1323:
 107              	.LBE1324:
 403:src/xeq.c     **** 	}
 108              		.loc 1 403 10 view .LVU31
 109 0040 80B2     		uxth	r0, r0
 110              	.LVL8:
 409:src/xeq.c     **** 	return bottom;
 111              		.loc 1 409 2 is_stmt 1 view .LVU32
 409:src/xeq.c     **** 	return bottom;
 112              		.loc 1 409 9 is_stmt 0 view .LVU33
 113 0042 1380     		strh	r3, [r2]	@ movhi
 410:src/xeq.c     **** }
 114              		.loc 1 410 2 is_stmt 1 view .LVU34
 115              		.loc 1 411 1 is_stmt 0 view .LVU35
 116 0044 7047     		bx	lr
 117              	.LVL9:
 118              	.L13:
 398:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 119              		.loc 1 398 3 is_stmt 1 view .LVU36
 399:src/xeq.c     **** 	} 
 120              		.loc 1 399 3 view .LVU37
 399:src/xeq.c     **** 	} 
 121              		.loc 1 399 10 is_stmt 0 view .LVU38
 122 0046 0B4B     		ldr	r3, .L14+12
 123 0048 1888     		ldrh	r0, [r3]
 124              	.LVL10:
 398:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 125              		.loc 1 398 7 view .LVU39
 126 004a 4CF20103 		movw	r3, #49153
 399:src/xeq.c     **** 	} 
 127              		.loc 1 399 10 view .LVU40
 128 004e 40F44040 		orr	r0, r0, #49152
 129              	.LVL11:
 409:src/xeq.c     **** 	return bottom;
 130              		.loc 1 409 2 is_stmt 1 view .LVU41
 409:src/xeq.c     **** 	return bottom;
 131              		.loc 1 409 9 is_stmt 0 view .LVU42
 132 0052 1380     		strh	r3, [r2]	@ movhi
ARM GAS  /tmp/ccBFDvgN.s 			page 11


 410:src/xeq.c     **** }
 133              		.loc 1 410 2 is_stmt 1 view .LVU43
 134              		.loc 1 411 1 is_stmt 0 view .LVU44
 135 0054 7047     		bx	lr
 136              	.LVL12:
 137              	.L5:
 406:src/xeq.c     **** 		bottom = ProgSize;
 138              		.loc 1 406 3 is_stmt 1 view .LVU45
 406:src/xeq.c     **** 		bottom = ProgSize;
 139              		.loc 1 406 15 is_stmt 0 view .LVU46
 140 0056 044B     		ldr	r3, .L14
 407:src/xeq.c     **** 	}
 141              		.loc 1 407 10 view .LVU47
 142 0058 0449     		ldr	r1, .L14+4
 143              	.LVL13:
 406:src/xeq.c     **** 		bottom = ProgSize;
 144              		.loc 1 406 15 view .LVU48
 145 005a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 407:src/xeq.c     **** 	}
 146              		.loc 1 407 10 view .LVU49
 147 005c 0968     		ldr	r1, [r1]
 406:src/xeq.c     **** 		bottom = ProgSize;
 148              		.loc 1 406 7 view .LVU50
 149 005e C3F38013 		ubfx	r3, r3, #6, #1
 150              	.LVL14:
 407:src/xeq.c     **** 	}
 151              		.loc 1 407 3 is_stmt 1 view .LVU51
 407:src/xeq.c     **** 	}
 152              		.loc 1 407 10 is_stmt 0 view .LVU52
 153 0062 4888     		ldrh	r0, [r1, #2]
 154              	.LVL15:
 409:src/xeq.c     **** 	return bottom;
 155              		.loc 1 409 2 is_stmt 1 view .LVU53
 409:src/xeq.c     **** 	return bottom;
 156              		.loc 1 409 9 is_stmt 0 view .LVU54
 157 0064 1380     		strh	r3, [r2]	@ movhi
 410:src/xeq.c     **** }
 158              		.loc 1 410 2 is_stmt 1 view .LVU55
 159              		.loc 1 411 1 is_stmt 0 view .LVU56
 160 0066 7047     		bx	lr
 161              	.L15:
 162              		.align	2
 163              	.L14:
 164 0068 00000000 		.word	StateWhileOn
 165 006c 00000000 		.word	main_ram
 166 0070 00000000 		.word	.LANCHOR0
 167 0074 00000000 		.word	xrom_size
 168              		.cfi_endproc
 169              	.LFE19:
 171              		.section	.text.reg_address,"ax",%progbits
 172              		.align	1
 173              		.p2align 2,,3
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	reg_address:
ARM GAS  /tmp/ccBFDvgN.s 			page 12


 180              	.LVL16:
 181              	.LFB90:
 412:src/xeq.c     **** 
 413:src/xeq.c     **** 
 414:src/xeq.c     **** /* Increment the passed PC.  Account for wrap around but nothing else.
 415:src/xeq.c     ****  * Return the updated PC.
 416:src/xeq.c     ****  * Set PcWrapped on wrap around
 417:src/xeq.c     ****  */
 418:src/xeq.c     **** unsigned int do_inc(const unsigned int pc, int endp) {
 419:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 420:src/xeq.c     **** 	unsigned short int top = 0;
 421:src/xeq.c     **** 	unsigned short int bottom = 0;
 422:src/xeq.c     **** 
 423:src/xeq.c     **** 	PcWrapped = 0;
 424:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 425:src/xeq.c     **** 
 426:src/xeq.c     **** 	if (npc > bottom) {
 427:src/xeq.c     **** 		PcWrapped = 1;
 428:src/xeq.c     **** 		return top;
 429:src/xeq.c     **** 	}
 430:src/xeq.c     **** 	return npc;
 431:src/xeq.c     **** }
 432:src/xeq.c     **** 
 433:src/xeq.c     **** /* Decrement the passed PC.  Account for wrap around but nothing else.
 434:src/xeq.c     ****  * Return the updated PC.
 435:src/xeq.c     ****  * Set PcWrapped on wrap around
 436:src/xeq.c     ****  */
 437:src/xeq.c     **** unsigned int do_dec(unsigned int pc, int endp) {
 438:src/xeq.c     **** 	unsigned short int top = 0;
 439:src/xeq.c     **** 	unsigned short int bottom = 0;
 440:src/xeq.c     **** 
 441:src/xeq.c     **** 	PcWrapped = 0;
 442:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 443:src/xeq.c     **** 
 444:src/xeq.c     **** 	if (pc <= top) {
 445:src/xeq.c     **** 		PcWrapped = 1;
 446:src/xeq.c     **** 		pc = bottom;
 447:src/xeq.c     **** 	}
 448:src/xeq.c     **** 	else
 449:src/xeq.c     **** 		--pc;
 450:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 451:src/xeq.c     **** 		--pc;
 452:src/xeq.c     **** 	return pc;
 453:src/xeq.c     **** }
 454:src/xeq.c     **** 
 455:src/xeq.c     **** /* Increment the PC keeping account of wrapping around and stopping
 456:src/xeq.c     ****  * programs on such.  Return non-zero if we wrapped.
 457:src/xeq.c     ****  */
 458:src/xeq.c     **** int incpc(void) {
 459:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 460:src/xeq.c     **** 	return PcWrapped;
 461:src/xeq.c     **** }
 462:src/xeq.c     **** 
 463:src/xeq.c     **** void decpc(void) {
 464:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 465:src/xeq.c     **** }
 466:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 13


 467:src/xeq.c     **** /*
 468:src/xeq.c     ****  * Update the pointers to the current program delimited by END statements
 469:src/xeq.c     ****  */
 470:src/xeq.c     **** void update_program_bounds(const int force) {
 471:src/xeq.c     **** 	unsigned int pc = state_pc();
 472:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 473:src/xeq.c     **** 		State.pc = pc = 1;
 474:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 475:src/xeq.c     **** 		return;
 476:src/xeq.c     **** 	for (PcWrapped = 0; !PcWrapped; pc = do_inc(pc, 0)) {
 477:src/xeq.c     **** 		ProgEnd = pc;
 478:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 479:src/xeq.c     **** 			break;
 480:src/xeq.c     **** 		}
 481:src/xeq.c     **** 	}
 482:src/xeq.c     **** 	for (pc = state_pc();;) {
 483:src/xeq.c     **** 		const unsigned int opc = pc;
 484:src/xeq.c     **** 		pc = do_dec(opc, 0);
 485:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 486:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 487:src/xeq.c     **** 			break;
 488:src/xeq.c     **** 		}
 489:src/xeq.c     **** 	}
 490:src/xeq.c     **** }
 491:src/xeq.c     **** 
 492:src/xeq.c     **** /* Determine where in program space the PC really is
 493:src/xeq.c     ****  */
 494:src/xeq.c     **** unsigned int user_pc(unsigned int pc) {
 495:src/xeq.c     **** 	unsigned int n = 1;
 496:src/xeq.c     **** 	unsigned int base;
 497:src/xeq.c     **** 
 498:src/xeq.c     **** #ifndef REALBUILD
 499:src/xeq.c     **** 	if (pc == 0 || isXROM(pc))
 500:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 501:src/xeq.c     **** #else
 502:src/xeq.c     **** 	if (pc == 0)
 503:src/xeq.c     **** 		return 0;
 504:src/xeq.c     **** #endif
 505:src/xeq.c     **** 	base = startLIB(pc);
 506:src/xeq.c     **** 	while (base < pc) {
 507:src/xeq.c     **** 		base = do_inc(base, 0);
 508:src/xeq.c     **** 		if (PcWrapped)
 509:src/xeq.c     **** 			return n;
 510:src/xeq.c     **** 		++n;
 511:src/xeq.c     **** 	}
 512:src/xeq.c     **** 	return n;
 513:src/xeq.c     **** }
 514:src/xeq.c     **** 
 515:src/xeq.c     **** /* Given a target user PC, figure out the real matching PC
 516:src/xeq.c     ****  */
 517:src/xeq.c     **** unsigned int find_user_pc(unsigned int target) {
 518:src/xeq.c     **** 	unsigned int upc = state_pc();
 519:src/xeq.c     **** 	const int libp = isLIB(upc);
 520:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 521:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 522:src/xeq.c     **** #ifndef REALBUILD
 523:src/xeq.c     **** 	if (isXROM(upc))
ARM GAS  /tmp/ccBFDvgN.s 			page 14


 524:src/xeq.c     **** 		return addrXROM(target);
 525:src/xeq.c     **** #endif
 526:src/xeq.c     **** 	while (n++ < target) {
 527:src/xeq.c     **** 		const unsigned int oldbase = base;
 528:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 529:src/xeq.c     **** 		if (PcWrapped)
 530:src/xeq.c     **** 			return oldbase;
 531:src/xeq.c     **** 	}
 532:src/xeq.c     **** 	return base;
 533:src/xeq.c     **** }
 534:src/xeq.c     **** 
 535:src/xeq.c     **** 
 536:src/xeq.c     **** /* Set a flag to indicate that a complex operation has taken place
 537:src/xeq.c     ****  * The flag disappears with the next command executed.
 538:src/xeq.c     ****  */
 539:src/xeq.c     **** static void set_was_complex(void) {
 540:src/xeq.c     **** 	State2.wascomplex = 1;
 541:src/xeq.c     **** }
 542:src/xeq.c     **** 
 543:src/xeq.c     **** 
 544:src/xeq.c     **** /* Produce an error and stop
 545:src/xeq.c     ****  */
 546:src/xeq.c     **** int report_err(const unsigned int e) {
 547:src/xeq.c     **** 	if (Error == ERR_NONE) {
 548:src/xeq.c     **** 		Error = e;
 549:src/xeq.c     **** 		if (e == ERR_NONE) {
 550:src/xeq.c     **** 			error_message(e); // "Running Program"
 551:src/xeq.c     **** 			return 0;
 552:src/xeq.c     **** 		}
 553:src/xeq.c     **** 	}
 554:src/xeq.c     **** 	return 1;
 555:src/xeq.c     **** }
 556:src/xeq.c     **** 
 557:src/xeq.c     **** 
 558:src/xeq.c     **** /* Display a warning
 559:src/xeq.c     ****  */
 560:src/xeq.c     **** int report_warn(const unsigned int e) {
 561:src/xeq.c     **** 	if (Running) {
 562:src/xeq.c     **** 		return report_err(e);
 563:src/xeq.c     **** 	}
 564:src/xeq.c     **** 	error_message(e);
 565:src/xeq.c     **** #ifndef CONSOLE
 566:src/xeq.c     **** 	State2.disp_freeze = 0;
 567:src/xeq.c     **** 	JustDisplayed = 1;
 568:src/xeq.c     **** 	ShowRPN = 1;
 569:src/xeq.c     **** #endif
 570:src/xeq.c     **** 	return e != ERR_NONE;
 571:src/xeq.c     **** }
 572:src/xeq.c     **** 
 573:src/xeq.c     **** 
 574:src/xeq.c     **** /* Doing something in the wrong mode */
 575:src/xeq.c     **** void bad_mode_error(void) {
 576:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 577:src/xeq.c     **** }
 578:src/xeq.c     **** 
 579:src/xeq.c     **** 
 580:src/xeq.c     **** /* User command to produce an error */
ARM GAS  /tmp/ccBFDvgN.s 			page 15


 581:src/xeq.c     **** void cmderr(unsigned int arg, enum rarg op) {
 582:src/xeq.c     **** 	report_err(arg);
 583:src/xeq.c     **** }
 584:src/xeq.c     **** 
 585:src/xeq.c     **** 
 586:src/xeq.c     **** /* User command to display a warning */
 587:src/xeq.c     **** void cmdmsg(unsigned int arg, enum rarg op) {
 588:src/xeq.c     **** 	error_message(arg);
 589:src/xeq.c     **** }
 590:src/xeq.c     **** 
 591:src/xeq.c     **** 
 592:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE)
 593:src/xeq.c     **** #include <stdlib.h>
 594:src/xeq.c     **** static void error(const char *fmt, ...) {
 595:src/xeq.c     **** 	va_list ap;
 596:src/xeq.c     **** 	va_start(ap, fmt);
 597:src/xeq.c     **** 	vprintf(fmt, ap);
 598:src/xeq.c     **** 	va_end(ap);
 599:src/xeq.c     **** 	putchar('\n');
 600:src/xeq.c     **** 	exit(1);
 601:src/xeq.c     **** }
 602:src/xeq.c     **** 
 603:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); printf("illegal opcode 0x%08x\n", op); } while (
 604:src/xeq.c     **** #else
 605:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); } while (0)
 606:src/xeq.c     **** #endif
 607:src/xeq.c     **** 
 608:src/xeq.c     **** /* Real rounding mode access routine
 609:src/xeq.c     ****  */
 610:src/xeq.c     **** static enum rounding get_rounding_mode() {
 611:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 612:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 613:src/xeq.c     **** 		DEC_ROUND_UP, DEC_ROUND_DOWN,
 614:src/xeq.c     **** 		DEC_ROUND_CEILING, DEC_ROUND_FLOOR
 615:src/xeq.c     **** 	};
 616:src/xeq.c     **** 	return (enum rounding) modes[UState.rounding_mode];
 617:src/xeq.c     **** }
 618:src/xeq.c     **** 
 619:src/xeq.c     **** void op_roundingmode(enum nilop op) {
 620:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 621:src/xeq.c     **** }
 622:src/xeq.c     **** 
 623:src/xeq.c     **** void rarg_roundingmode(unsigned int arg, enum rarg op) {
 624:src/xeq.c     **** 	UState.rounding_mode = arg;
 625:src/xeq.c     **** }
 626:src/xeq.c     **** 
 627:src/xeq.c     **** 
 628:src/xeq.c     **** /* Pack a number into our DPD register format
 629:src/xeq.c     ****  */
 630:src/xeq.c     **** 
 631:src/xeq.c     **** void packed_from_number(decimal64 *r, const decNumber *x) {
 632:src/xeq.c     **** 	decContext ctx64;
 633:src/xeq.c     **** 
 634:src/xeq.c     **** 	decContextDefault(&ctx64, DEC_INIT_DECIMAL64);
 635:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 636:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 637:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 16


 638:src/xeq.c     **** 
 639:src/xeq.c     **** void packed128_from_number(decimal128 *r, const decNumber *x) {
 640:src/xeq.c     **** 	decContext ctx128;
 641:src/xeq.c     **** 
 642:src/xeq.c     **** 	decContextDefault(&ctx128, DEC_INIT_DECIMAL128);
 643:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 644:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 645:src/xeq.c     **** }
 646:src/xeq.c     **** 
 647:src/xeq.c     **** // Repack a decimal128 to decimal64
 648:src/xeq.c     **** void packed_from_packed128(decimal64 *r, const decimal128 *s) {
 649:src/xeq.c     **** 	decNumber temp;
 650:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 651:src/xeq.c     **** }
 652:src/xeq.c     **** 
 653:src/xeq.c     **** // Repack a decimal64 to decimal128
 654:src/xeq.c     **** void packed128_from_packed(decimal128 *r, const decimal64 *s) {
 655:src/xeq.c     **** 	decNumber temp;
 656:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 657:src/xeq.c     **** }
 658:src/xeq.c     **** 
 659:src/xeq.c     **** /*
 660:src/xeq.c     ****  *  User command to round to a specific number of digits
 661:src/xeq.c     ****  */
 662:src/xeq.c     **** void rarg_round(unsigned int arg, enum rarg op) {
 663:src/xeq.c     **** 	decNumber res, x;
 664:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 665:src/xeq.c     **** 
 666:src/xeq.c     **** 	if (is_intmode()) {
 667:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 668:src/xeq.c     **** 		return;
 669:src/xeq.c     **** 	}
 670:src/xeq.c     **** 
 671:src/xeq.c     **** 	setlastX();
 672:src/xeq.c     **** 	getX(&x);
 673:src/xeq.c     **** 	if (op == RARG_ROUND)
 674:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 675:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 676:src/xeq.c     **** 		decNumberRoundDecimals(&res, &x, arg, rm);
 677:src/xeq.c     **** 	setX(&res);
 678:src/xeq.c     **** }
 679:src/xeq.c     **** 
 680:src/xeq.c     **** /* Check if a value is bogus and error out if so.
 681:src/xeq.c     ****  * A value is bogus if it is infinite, NaN *and* flag D is not set.
 682:src/xeq.c     ****  * If flag D is set, these values are allowed through just fine.
 683:src/xeq.c     ****  */
 684:src/xeq.c     **** static int check_special(const decNumber *x) {
 685:src/xeq.c     **** 	decNumber y;
 686:src/xeq.c     **** 	decimal64 z;
 687:src/xeq.c     **** 	decimal128 d;
 688:src/xeq.c     **** 	if (is_dblmode()) {
 689:src/xeq.c     **** 		packed128_from_number(&d, x);
 690:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 691:src/xeq.c     **** 	}
 692:src/xeq.c     **** 	else 
 693:src/xeq.c     **** 	{
 694:src/xeq.c     **** 		packed_from_number(&z, x);
ARM GAS  /tmp/ccBFDvgN.s 			page 17


 695:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 696:src/xeq.c     **** 	}
 697:src/xeq.c     **** 	if (decNumberIsSpecial(&y)) {
 698:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 699:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 700:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 701:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 702:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 703:src/xeq.c     **** 			else
 704:src/xeq.c     **** 				report_err(ERR_INFINITY);
 705:src/xeq.c     **** 			return 1;
 706:src/xeq.c     **** 		}
 707:src/xeq.c     **** 	}
 708:src/xeq.c     **** 	return 0;
 709:src/xeq.c     **** }
 710:src/xeq.c     **** 
 711:src/xeq.c     **** 
 712:src/xeq.c     **** int stack_size(void) {
 713:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 714:src/xeq.c     **** 		return 4;
 715:src/xeq.c     **** 	return 8;
 716:src/xeq.c     **** }
 717:src/xeq.c     **** 
 718:src/xeq.c     **** REGISTER *get_stack(int pos) {
 719:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 720:src/xeq.c     **** }
 721:src/xeq.c     **** 
 722:src/xeq.c     **** static REGISTER *get_stack_top(void) {
 723:src/xeq.c     **** 	return get_stack(stack_size()-1);
 724:src/xeq.c     **** }
 725:src/xeq.c     **** 
 726:src/xeq.c     **** void copyreg(REGISTER *d, const REGISTER *s) {
 727:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 728:src/xeq.c     **** }
 729:src/xeq.c     **** 
 730:src/xeq.c     **** void copyreg_n(int d, int s) {
 731:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 732:src/xeq.c     **** }
 733:src/xeq.c     **** 
 734:src/xeq.c     **** /* Lift the stack one level.
 735:src/xeq.c     ****  */
 736:src/xeq.c     **** void lift(void) {
 737:src/xeq.c     **** 	const int n = stack_size();
 738:src/xeq.c     **** 	int i;
 739:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 740:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 741:src/xeq.c     **** }
 742:src/xeq.c     **** 
 743:src/xeq.c     **** static int get_lift(void) {
 744:src/xeq.c     **** 	return State2.state_lift;
 745:src/xeq.c     **** }
 746:src/xeq.c     **** 
 747:src/xeq.c     **** void lift_if_enabled(void) {
 748:src/xeq.c     **** 	if (get_lift())
 749:src/xeq.c     **** 		lift();
 750:src/xeq.c     **** }
 751:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 18


 752:src/xeq.c     **** static void lift2_if_enabled(void) {
 753:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 754:src/xeq.c     **** 	lift_if_enabled();
 755:src/xeq.c     **** 	if (C_LOCKED) {
 756:src/xeq.c     **** 		lift_if_enabled();
 757:src/xeq.c     **** 	}
 758:src/xeq.c     **** 	else {
 759:src/xeq.c     **** 		lift();
 760:src/xeq.c     **** 	}
 761:src/xeq.c     **** #else
 762:src/xeq.c     **** 	lift_if_enabled();
 763:src/xeq.c     **** 	lift();
 764:src/xeq.c     **** #endif
 765:src/xeq.c     **** }
 766:src/xeq.c     **** 
 767:src/xeq.c     **** void set_lift(void) {
 768:src/xeq.c     ****     State2.state_lift = 1;
 769:src/xeq.c     **** }
 770:src/xeq.c     **** 
 771:src/xeq.c     **** static void clr_lift(void) {
 772:src/xeq.c     ****     State2.state_lift = 0;
 773:src/xeq.c     **** }
 774:src/xeq.c     **** 
 775:src/xeq.c     **** static void lower(void) {
 776:src/xeq.c     **** 	const int n = stack_size();
 777:src/xeq.c     **** 	int i;
 778:src/xeq.c     **** 
 779:src/xeq.c     **** 	for (i=1; i<n; i++)
 780:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 781:src/xeq.c     **** }
 782:src/xeq.c     **** 
 783:src/xeq.c     **** static void lower2(void) {
 784:src/xeq.c     **** 	const int n = stack_size();
 785:src/xeq.c     **** 	int i;
 786:src/xeq.c     **** 
 787:src/xeq.c     **** 	for (i=2; i<n; i++)
 788:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 789:src/xeq.c     **** }
 790:src/xeq.c     **** 
 791:src/xeq.c     **** 
 792:src/xeq.c     **** void setlastX(void) {
 793:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 794:src/xeq.c     **** }
 795:src/xeq.c     **** 
 796:src/xeq.c     **** static void setlastXY(void) {
 797:src/xeq.c     **** 	setlastX();
 798:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 799:src/xeq.c     **** }
 800:src/xeq.c     **** 
 801:src/xeq.c     **** 
 802:src/xeq.c     **** decNumber *getRegister(decNumber *r, int index) {
 803:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 804:src/xeq.c     **** 	if (is_dblmode())
 805:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 806:src/xeq.c     **** 	else
 807:src/xeq.c     **** 		decimal64ToNumber(&(reg->s), r);
 808:src/xeq.c     **** 	return r;
ARM GAS  /tmp/ccBFDvgN.s 			page 19


 809:src/xeq.c     **** }
 810:src/xeq.c     **** 
 811:src/xeq.c     **** void setRegister(int index, const decNumber *x) {
 812:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 813:src/xeq.c     **** 	decNumber dn;
 814:src/xeq.c     **** 
 815:src/xeq.c     **** 	if (! check_special(x)) {	/* This correctly deals with infinities and NaN based on flag D */
 816:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 817:src/xeq.c     **** 		if (is_dblmode())
 818:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 819:src/xeq.c     **** 		else
 820:src/xeq.c     **** 			packed_from_number(&(reg->s), &dn);
 821:src/xeq.c     **** 	}
 822:src/xeq.c     **** }
 823:src/xeq.c     **** 
 824:src/xeq.c     **** decNumber *getX(decNumber *x) {
 825:src/xeq.c     **** 	return getRegister(x, regX_idx);
 826:src/xeq.c     **** }
 827:src/xeq.c     **** 
 828:src/xeq.c     **** void setX(const decNumber *x) {
 829:src/xeq.c     **** 	setRegister(regX_idx, x);
 830:src/xeq.c     **** }
 831:src/xeq.c     **** 
 832:src/xeq.c     **** void getY(decNumber *y) {
 833:src/xeq.c     **** 	getRegister(y, regY_idx);
 834:src/xeq.c     **** }
 835:src/xeq.c     **** 
 836:src/xeq.c     **** void setY(const decNumber *y) {
 837:src/xeq.c     **** 	setRegister(regY_idx, y);
 838:src/xeq.c     **** }
 839:src/xeq.c     **** 
 840:src/xeq.c     **** static void getZ(decNumber *z) {
 841:src/xeq.c     **** 	getRegister(z, regZ_idx);
 842:src/xeq.c     **** }
 843:src/xeq.c     **** 
 844:src/xeq.c     **** #if 0
 845:src/xeq.c     **** static void setZ(const decNumber *z) {
 846:src/xeq.c     **** 	setRegister(regZ_idx, z);
 847:src/xeq.c     **** }
 848:src/xeq.c     **** #endif
 849:src/xeq.c     **** 
 850:src/xeq.c     **** static void getT(decNumber *t) {
 851:src/xeq.c     **** 	getRegister(t, regT_idx);
 852:src/xeq.c     **** }
 853:src/xeq.c     **** 
 854:src/xeq.c     **** void getXY(decNumber *x, decNumber *y) {
 855:src/xeq.c     **** 	getX(x);
 856:src/xeq.c     **** 	getY(y);
 857:src/xeq.c     **** }
 858:src/xeq.c     **** 
 859:src/xeq.c     **** void setXY(const decNumber *x, const decNumber *y) {
 860:src/xeq.c     **** 	setX(x);
 861:src/xeq.c     **** 	setY(y);
 862:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 863:src/xeq.c     **** 	CLEAR_POLAR_READY;
 864:src/xeq.c     **** #endif
 865:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 20


 866:src/xeq.c     **** 
 867:src/xeq.c     **** void getXYZ(decNumber *x, decNumber *y, decNumber *z) {
 868:src/xeq.c     **** 	getXY(x, y);
 869:src/xeq.c     **** 	getZ(z);
 870:src/xeq.c     **** }
 871:src/xeq.c     **** 
 872:src/xeq.c     **** #if 0
 873:src/xeq.c     **** void setXYZ(const decNumber *x, const decNumber *y, const decNumber *z) {
 874:src/xeq.c     **** 	setXY(x, y);
 875:src/xeq.c     **** 	setZ(z);
 876:src/xeq.c     **** }
 877:src/xeq.c     **** #endif
 878:src/xeq.c     **** 
 879:src/xeq.c     **** void getXYZT(decNumber *x, decNumber *y, decNumber *z, decNumber *t) {
 880:src/xeq.c     **** 	getXYZ(x, y, z);
 881:src/xeq.c     **** 	getT(t);
 882:src/xeq.c     **** }
 883:src/xeq.c     **** 
 884:src/xeq.c     **** void getYZ(decNumber *y, decNumber *z) {
 885:src/xeq.c     **** 	getY(y);
 886:src/xeq.c     **** 	getZ(z);
 887:src/xeq.c     **** }
 888:src/xeq.c     **** 
 889:src/xeq.c     **** void roll_down(enum nilop op) {
 890:src/xeq.c     **** 	REGISTER r;
 891:src/xeq.c     **** 	copyreg(&r, StackBase);
 892:src/xeq.c     **** 	lower();
 893:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 894:src/xeq.c     **** }
 895:src/xeq.c     **** 
 896:src/xeq.c     **** void roll_up(enum nilop op) {
 897:src/xeq.c     **** 	REGISTER r;
 898:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 899:src/xeq.c     **** 	lift();
 900:src/xeq.c     **** 	copyreg(StackBase, &r);
 901:src/xeq.c     **** }
 902:src/xeq.c     **** 
 903:src/xeq.c     **** void cpx_roll_down(enum nilop op) {
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 905:src/xeq.c     **** 	roll_down(OP_RDOWN);
 906:src/xeq.c     **** 	set_was_complex();
 907:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 908:src/xeq.c     **** 	CLEAR_POLAR_READY;
 909:src/xeq.c     **** #endif
 910:src/xeq.c     **** }
 911:src/xeq.c     **** 
 912:src/xeq.c     **** void cpx_roll_up(enum nilop op) {
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 914:src/xeq.c     **** 	roll_up(OP_RUP);
 915:src/xeq.c     **** 	set_was_complex();
 916:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 917:src/xeq.c     **** 	CLEAR_POLAR_READY;
 918:src/xeq.c     **** #endif
 919:src/xeq.c     **** }
 920:src/xeq.c     **** 
 921:src/xeq.c     **** void cpx_enter(enum nilop op) {
 922:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
ARM GAS  /tmp/ccBFDvgN.s 			page 21


 923:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 924:src/xeq.c     ****     lift();
 925:src/xeq.c     ****     lift();
 926:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 927:src/xeq.c     ****     set_was_complex();
 928:src/xeq.c     ****   }
 929:src/xeq.c     ****   else {
 930:src/xeq.c     ****     lift();
 931:src/xeq.c     ****     lift();
 932:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 933:src/xeq.c     ****     set_was_complex();
 934:src/xeq.c     ****   }
 935:src/xeq.c     **** }
 936:src/xeq.c     **** 
 937:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 938:src/xeq.c     **** 
 939:src/xeq.c     **** void convert_regK ( enum trig_modes i ) { // needed to change the displayed angular part in polar m
 940:src/xeq.c     **** 	decNumber k;
 941:src/xeq.c     **** 
 942:src/xeq.c     **** 	enum trig_modes j = get_trig_mode();
 943:src/xeq.c     **** 	if (i==j) return; // no mode change
 944:src/xeq.c     **** 	getRegister(&k, regK_idx);
 945:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 946:src/xeq.c     **** 		case TRIG_DEG:
 947:src/xeq.c     **** 			dn_divide(&k, &k, &const_360);
 948:src/xeq.c     **** 			break;
 949:src/xeq.c     **** 		case TRIG_RAD:
 950:src/xeq.c     **** 			dn_divide(&k, &k, &const_2PI);
 951:src/xeq.c     **** 			break;
 952:src/xeq.c     **** 		case TRIG_GRAD:
 953:src/xeq.c     **** 			dn_divide(&k, &k, &const_400);
 954:src/xeq.c     **** 		default:;
 955:src/xeq.c     **** 	}
 956:src/xeq.c     **** 	switch (i) { // convert to new angular units
 957:src/xeq.c     **** 		case TRIG_DEG:
 958:src/xeq.c     **** 			dn_multiply(&k, &k, &const_360);
 959:src/xeq.c     **** 			break;
 960:src/xeq.c     **** 		case TRIG_RAD:
 961:src/xeq.c     **** 			dn_multiply(&k, &k, &const_2PI);
 962:src/xeq.c     **** 			break;
 963:src/xeq.c     **** 		case TRIG_GRAD:
 964:src/xeq.c     **** 			dn_multiply(&k, &k, &const_400);
 965:src/xeq.c     **** 		default:;
 966:src/xeq.c     **** 	}
 967:src/xeq.c     **** 	setRegister(regK_idx, &k);
 968:src/xeq.c     **** }
 969:src/xeq.c     **** 
 970:src/xeq.c     **** void finish_cpx_entry ( int lift );
 971:src/xeq.c     **** void stack_begin ( int zero_y ); // defined in keys.c - needed so it can be called here
 972:src/xeq.c     **** 
 973:src/xeq.c     **** void cpx_pi (enum nilop op) {
 974:src/xeq.c     **** 	switch (op) {
 975:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 976:src/xeq.c     **** 		if (!REAL_FLAG && !IMAG_FLAG) {
 977:src/xeq.c     **** 			stack_begin( 1 );
 978:src/xeq.c     **** 			SET_REAL;
 979:src/xeq.c     **** 		}
ARM GAS  /tmp/ccBFDvgN.s 			page 22


 980:src/xeq.c     **** 		copyreg(StackBase, get_const(OP_PI, is_dblmode()));
 981:src/xeq.c     **** 		break;
 982:src/xeq.c     **** 	case OP_PIB: // command line present - multiplies contents by pi
 983:src/xeq.c     **** 		State2.state_lift = 0;
 984:src/xeq.c     **** 		process_cmdline();
 985:src/xeq.c     **** 		State2.state_lift = 0;
 986:src/xeq.c     **** 		{
 987:src/xeq.c     **** 			decNumber r;
 988:src/xeq.c     **** 			getX(&r);
 989:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 990:src/xeq.c     **** 			setX(&r);
 991:src/xeq.c     **** 		}
 992:src/xeq.c     **** 	default:;
 993:src/xeq.c     **** 	}
 994:src/xeq.c     **** 	CLEAR_POLAR_READY;
 995:src/xeq.c     **** }
 996:src/xeq.c     **** 
 997:src/xeq.c     **** #ifdef ENTRY_RPN
 998:src/xeq.c     **** void entry_rpn_on_off(enum nilop op) { // turn entry_rpn on/off
 999:src/xeq.c     ****   switch (op) {
1000:src/xeq.c     ****   case OP_ENTRY_ON:
1001:src/xeq.c     ****     ENTRY_RPN_ON;
1002:src/xeq.c     ****     return;
1003:src/xeq.c     ****   case OP_ENTRY_OFF:
1004:src/xeq.c     ****     ENTRY_RPN_OFF;
1005:src/xeq.c     ****     return;
1006:src/xeq.c     ****   default:;
1007:src/xeq.c     ****   }
1008:src/xeq.c     **** }
1009:src/xeq.c     **** #endif
1010:src/xeq.c     **** 
1011:src/xeq.c     **** void cpx_nop(enum nilop op) { // miscellaneous complex operations
1012:src/xeq.c     ****   reset_shift();
1013:src/xeq.c     **** 	switch (op) {
1014:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
1015:src/xeq.c     **** 	        SET_CPX_YES;
1016:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
1017:src/xeq.c     **** 		CLEAR_IMAG;
1018:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
1019:src/xeq.c     **** 		return;
1020:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
1021:src/xeq.c     **** 		if (UState.stack_depth) { // save prior stack size 
1022:src/xeq.c     **** 			INIT_8;
1023:src/xeq.c     **** 		}
1024:src/xeq.c     **** 		else {
1025:src/xeq.c     **** 			INIT_4;
1026:src/xeq.c     **** 		}
1027:src/xeq.c     **** 		LOCK_C;
1028:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
1029:src/xeq.c     **** #ifdef DM42
1030:src/xeq.c     **** 		set_menu(M_C_Lock);
1031:src/xeq.c     **** 		display_current_menu();
1032:src/xeq.c     **** #endif
1033:src/xeq.c     **** 		break;
1034:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
1035:src/xeq.c     **** 		if (!C_LOCKED) { 
1036:src/xeq.c     **** 			SET_CPX_NO;
ARM GAS  /tmp/ccBFDvgN.s 			page 23


1037:src/xeq.c     **** 			UNLOCK_C; //just in case
1038:src/xeq.c     **** 			return;
1039:src/xeq.c     **** 		}
1040:src/xeq.c     **** 		SET_CPX_NO;
1041:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
1042:src/xeq.c     **** 		finish_cpx_entry(1);
1043:src/xeq.c     **** 		UNLOCK_C;
1044:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
1045:src/xeq.c     **** 		State2.wascomplex = 0;
1046:src/xeq.c     **** #ifdef DM42
1047:src/xeq.c     **** 		set_default_menu();
1048:src/xeq.c     **** 		display_current_menu();
1049:src/xeq.c     **** #endif
1050:src/xeq.c     **** 		return;
1051:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
1052:src/xeq.c     **** 		{
1053:src/xeq.c     **** 		decNumber y;
1054:src/xeq.c     **** 		getY(&y);
1055:src/xeq.c     **** 		dn_minus(&y, &y);
1056:src/xeq.c     **** 		setY(&y);
1057:src/xeq.c     **** 		}
1058:src/xeq.c     **** 		break;
1059:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
1060:src/xeq.c     **** 		{
1061:src/xeq.c     **** 		decNumber x;
1062:src/xeq.c     **** 		getX(&x);
1063:src/xeq.c     **** 		dn_minus(&x, &x);
1064:src/xeq.c     **** 		setX(&x);
1065:src/xeq.c     **** 		}
1066:src/xeq.c     **** 		break;
1067:src/xeq.c     **** 	case OP_C_IM: // zero real part
1068:src/xeq.c     **** 		zero_X();
1069:src/xeq.c     **** 		break;
1070:src/xeq.c     **** 	case OP_C_RE: // zero imag part
1071:src/xeq.c     **** 		zero_Y();
1072:src/xeq.c     **** 		break;
1073:src/xeq.c     **** 	case OP_CPXI: // use i to display complex numbers
1074:src/xeq.c     **** 		SET_CPX_I;
1075:src/xeq.c     **** 		break;
1076:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
1077:src/xeq.c     **** 		SET_CPX_J;
1078:src/xeq.c     **** 		break;
1079:src/xeq.c     **** 	default:;
1080:src/xeq.c     **** 	}
1081:src/xeq.c     **** 	set_was_complex();
1082:src/xeq.c     **** 	CLEAR_POLAR_READY;
1083:src/xeq.c     **** }
1084:src/xeq.c     **** #endif
1085:src/xeq.c     **** 
1086:src/xeq.c     **** void cpx_fill(enum nilop op) {
1087:src/xeq.c     **** 	const int n = stack_size();
1088:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
1089:src/xeq.c     **** 	int i;
1090:src/xeq.c     **** 
1091:src/xeq.c     **** 	for (i=2; i<n; i++)
1092:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
1093:src/xeq.c     **** 	set_was_complex();
ARM GAS  /tmp/ccBFDvgN.s 			page 24


1094:src/xeq.c     **** }
1095:src/xeq.c     **** 
1096:src/xeq.c     **** void fill(enum nilop op) {
1097:src/xeq.c     **** 	const int n = stack_size();
1098:src/xeq.c     **** 	int i;
1099:src/xeq.c     **** 
1100:src/xeq.c     **** 	for (i=1; i<n; i++)
1101:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
1102:src/xeq.c     **** }
1103:src/xeq.c     **** 
1104:src/xeq.c     **** void drop(enum nilop op) {
1105:src/xeq.c     **** 	if (op == OP_DROPXY) {
1106:src/xeq.c     **** 		lower2();
1107:src/xeq.c     **** 		set_was_complex();
1108:src/xeq.c     **** 	} else
1109:src/xeq.c     **** 		lower();
1110:src/xeq.c     **** }
1111:src/xeq.c     **** 
1112:src/xeq.c     **** #ifndef is_intmode
1113:src/xeq.c     **** int is_intmode(void) {
1114:src/xeq.c     **** 	return UState.intm;
1115:src/xeq.c     **** }
1116:src/xeq.c     **** #endif
1117:src/xeq.c     **** 
1118:src/xeq.c     **** int is_dblmode(void) {
1119:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
1120:src/xeq.c     **** }
1121:src/xeq.c     **** 
1122:src/xeq.c     **** int is_usrdblmode(void) {
1123:src/xeq.c     **** 	if (XromFlags.xIN)
1124:src/xeq.c     **** 		return XromFlags.mode_double;
1125:src/xeq.c     **** 	return is_dblmode();
1126:src/xeq.c     **** }
1127:src/xeq.c     **** 
1128:src/xeq.c     **** /* Convert a possibly signed string to an integer
1129:src/xeq.c     ****  */
1130:src/xeq.c     **** int s_to_i(const char *s) {
1131:src/xeq.c     **** 	int x = 0;
1132:src/xeq.c     **** 	int neg;
1133:src/xeq.c     **** 
1134:src/xeq.c     **** 	if (*s == '-') {
1135:src/xeq.c     **** 		s++;
1136:src/xeq.c     **** 		neg = 1;
1137:src/xeq.c     **** 	} else {
1138:src/xeq.c     **** 		if (*s == '+')
1139:src/xeq.c     **** 			s++;
1140:src/xeq.c     **** 		neg = 0;
1141:src/xeq.c     **** 	}
1142:src/xeq.c     **** 
1143:src/xeq.c     **** 	for (;;) {
1144:src/xeq.c     **** 		const char c = *s++;
1145:src/xeq.c     **** 
1146:src/xeq.c     **** 		if (c < '0' || c > '9')
1147:src/xeq.c     **** 			break;
1148:src/xeq.c     **** 		x = 10 * x + (c - '0');
1149:src/xeq.c     **** 	}
1150:src/xeq.c     **** 	if (neg)
ARM GAS  /tmp/ccBFDvgN.s 			page 25


1151:src/xeq.c     **** 		return -x;
1152:src/xeq.c     **** 	return x;
1153:src/xeq.c     **** }
1154:src/xeq.c     **** 
1155:src/xeq.c     **** /* Convert a string in the given base to an unsigned integer
1156:src/xeq.c     ****  */
1157:src/xeq.c     **** unsigned long long int s_to_ull(const char *s, unsigned int base) {
1158:src/xeq.c     **** 	unsigned long long int x = 0;
1159:src/xeq.c     **** 
1160:src/xeq.c     **** 	for (;;) {
1161:src/xeq.c     **** 		unsigned int n;
1162:src/xeq.c     **** 		const char c = *s++;
1163:src/xeq.c     **** 
1164:src/xeq.c     **** 		if (c >= '0' && c <= '9')
1165:src/xeq.c     **** 			n = c - '0';
1166:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
1167:src/xeq.c     **** 			n = c - 'A' + 10;
1168:src/xeq.c     **** 		else
1169:src/xeq.c     **** 			break;
1170:src/xeq.c     **** 		if (n >= base)
1171:src/xeq.c     **** 			break;
1172:src/xeq.c     **** 		x = x * base + n;
1173:src/xeq.c     **** 	}
1174:src/xeq.c     **** 	return x;
1175:src/xeq.c     **** }
1176:src/xeq.c     **** 
1177:src/xeq.c     **** const char *get_cmdline(void) {
1178:src/xeq.c     **** 	if (CmdLineLength) {
1179:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
1180:src/xeq.c     **** 		return Cmdline;
1181:src/xeq.c     **** 	}
1182:src/xeq.c     **** 	return NULL;
1183:src/xeq.c     **** }
1184:src/xeq.c     **** 
1185:src/xeq.c     **** #if 0
1186:src/xeq.c     **** static int fract_convert_number(decNumber *x, const char *s) {
1187:src/xeq.c     **** 	if (*s == '\0') {
1188:src/xeq.c     **** 		report_err(ERR_DOMAIN);
1189:src/xeq.c     **** 		return 1;
1190:src/xeq.c     **** 	}
1191:src/xeq.c     **** 	decNumberFromString(x, s, &Ctx);
1192:src/xeq.c     **** 	return check_special(x);
1193:src/xeq.c     **** }
1194:src/xeq.c     **** #endif
1195:src/xeq.c     **** 
1196:src/xeq.c     **** /* Return 1 if the command line contains an error and also set an appropriate
1197:src/xeq.c     ****  * error message.
1198:src/xeq.c     ****  */
1199:src/xeq.c     **** int is_bad_cmdline(void)
1200:src/xeq.c     **** {
1201:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
1202:src/xeq.c     **** 	if (CmdLineDot == 2) {
1203:src/xeq.c     **** 		char *p;
1204:src/xeq.c     **** 
1205:src/xeq.c     **** 		// Check if there's a non-zero digit after the last decimal mark
1206:src/xeq.c     **** 		p = Cmdline + CmdLineLength;
1207:src/xeq.c     **** 		for (;;) {
ARM GAS  /tmp/ccBFDvgN.s 			page 26


1208:src/xeq.c     **** 			p--;
1209:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
1210:src/xeq.c     **** 				return 0;
1211:src/xeq.c     **** 			if (*p == '.')
1212:src/xeq.c     **** 				break;
1213:src/xeq.c     **** 		}
1214:src/xeq.c     **** 
1215:src/xeq.c     **** 		reset_shift();
1216:src/xeq.c     **** 		error_message(ERR_DOMAIN);
1217:src/xeq.c     **** 		State2.invalid_disp = 1;
1218:src/xeq.c     **** 		return 1;
1219:src/xeq.c     **** 	}
1220:src/xeq.c     **** #endif
1221:src/xeq.c     **** 	return 0;
1222:src/xeq.c     **** }
1223:src/xeq.c     **** 
1224:src/xeq.c     **** /* Process the command line if any
1225:src/xeq.c     ****  */
1226:src/xeq.c     **** void process_cmdline(void) {
1227:src/xeq.c     **** 	decNumber a, b, x, t;
1228:src/xeq.c     **** 
1229:src/xeq.c     **** 	if (CmdLineLength) {
1230:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
1231:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
1232:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1233:src/xeq.c     **** 		char cmdline[CMDLINELEN + 2];
1234:src/xeq.c     **** #else
1235:src/xeq.c     **** 		char cmdline[CMDLINELEN + 1];
1236:src/xeq.c     **** #endif
1237:src/xeq.c     **** 
1238:src/xeq.c     **** 		xcopy(cmdline, Cmdline, CMDLINELEN + 1);
1239:src/xeq.c     **** 
1240:src/xeq.c     **** 		cmdline[CmdLineLength] = '\0';
1241:src/xeq.c     **** 		if (!is_intmode()) {
1242:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1243:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E' || cmdline[CmdLineLength-1] == 'D')
1244:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1245:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
1246:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
1247:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
1248:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
1249:src/xeq.c     **** 			}
1250:src/xeq.c     **** #else
1251:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E')
1252:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1253:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
1254:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
1255:src/xeq.c     **** #endif
1256:src/xeq.c     **** 			if (0
1257:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
1258:src/xeq.c     **** 			    || CmdLineEex
1259:src/xeq.c     **** #endif
1260:src/xeq.c     **** #if FRACTION_MODE_INPUT & 4
1261:src/xeq.c     **** 			    || cmdlinedot == 1
1262:src/xeq.c     **** #endif
1263:src/xeq.c     **** 			   )
1264:src/xeq.c     **** 				UState.fract = 0;
ARM GAS  /tmp/ccBFDvgN.s 			page 27


1265:src/xeq.c     **** 		}
1266:src/xeq.c     **** 		CmdLineLength = 0;
1267:src/xeq.c     **** 		lift_if_enabled();
1268:src/xeq.c     **** 		set_lift();
1269:src/xeq.c     **** 		CmdLineDot = 0;
1270:src/xeq.c     **** 		CmdLineEex = 0;
1271:src/xeq.c     **** 		if (is_intmode()) {
1272:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
1273:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
1274:src/xeq.c     **** 			setX_int_sgn(x, sgn);
1275:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
1276:src/xeq.c     **** 			char *d0, *d1, *d2;
1277:src/xeq.c     **** 			int neg;
1278:src/xeq.c     **** 
1279:src/xeq.c     **** 			if (bad_cmdline)
1280:src/xeq.c     **** 				return;
1281:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 8)
1282:src/xeq.c     **** 			UState.fract = 1;
1283:src/xeq.c     **** #endif
1284:src/xeq.c     **** 			if (cmdline[0] == '-') {
1285:src/xeq.c     **** 				neg = 1;
1286:src/xeq.c     **** 				d0 = cmdline+1;
1287:src/xeq.c     **** 			} else {
1288:src/xeq.c     **** 				neg = 0;
1289:src/xeq.c     **** 				d0 = cmdline;
1290:src/xeq.c     **** 			}
1291:src/xeq.c     **** 			d1 = find_char(d0, '.');
1292:src/xeq.c     **** 			*d1++ = '\0';
1293:src/xeq.c     **** 			d2 = find_char(d1, '.');
1294:src/xeq.c     **** 			*d2++ = '\0';
1295:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
1296:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
1297:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1298:src/xeq.c     **** 			if (d2 == d1+1) { // ND change starts here; if dots are adjacent...
1299:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
1300:src/xeq.c     **** 				decNumberZero(&x); // and zero x
1301:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
1302:src/xeq.c     **** 				UState.improperfrac = 1;
1303:src/xeq.c     **** #endif
1304:src/xeq.c     **** 			}
1305:src/xeq.c     **** 			else
1306:src/xeq.c     **** #endif
1307:src/xeq.c     **** 			{
1308:src/xeq.c     **** 				decNumberFromString(&a, d1, &Ctx);
1309:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1310:src/xeq.c     **** 				UState.improperfrac = 0;
1311:src/xeq.c     **** #endif
1312:src/xeq.c     **** 			}
1313:src/xeq.c     **** 			dn_divide(&t, &a, &b);
1314:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
1315:src/xeq.c     **** 			if (!decNumberIsSpecial(&t))
1316:src/xeq.c     **** #endif
1317:src/xeq.c     **** 				dn_add(&x, &x, &t);
1318:src/xeq.c     **** 			if (neg)
1319:src/xeq.c     **** 				dn_minus(&x, &x);
1320:src/xeq.c     **** 			setX(&x);
1321:src/xeq.c     **** 		} else {
ARM GAS  /tmp/ccBFDvgN.s 			page 28


1322:src/xeq.c     **** 			decNumberFromString(&x, cmdline, &Ctx);
1323:src/xeq.c     **** 			setX(&x);
1324:src/xeq.c     **** 		}
1325:src/xeq.c     **** 		set_entry();
1326:src/xeq.c     **** #ifndef DM42
1327:src/xeq.c     **** 		print_trace( TRACE_DATA_ENTRY, 1 );
1328:src/xeq.c     **** #endif
1329:src/xeq.c     **** 	}
1330:src/xeq.c     **** }
1331:src/xeq.c     **** 
1332:src/xeq.c     **** void process_cmdline_set_lift(void) {
1333:src/xeq.c     **** 	process_cmdline();
1334:src/xeq.c     **** 	set_lift();
1335:src/xeq.c     **** }
1336:src/xeq.c     **** 
1337:src/xeq.c     **** 
1338:src/xeq.c     **** /*
1339:src/xeq.c     ****  *  Return a pointer to a numbered register.
1340:src/xeq.c     ****  *  If locals are enabled and a non existent local register
1341:src/xeq.c     ****  *  is accessed, the respective global register is returned.
1342:src/xeq.c     ****  *  Error checking must be done outside this routine.
1343:src/xeq.c     ****  *  We force the beginning of the local registers on an even stack position.
1344:src/xeq.c     ****  *  This ensures 32 bit alignment of the decima64 object.
1345:src/xeq.c     ****  */
1346:src/xeq.c     **** /*
1347:src/xeq.c     ****  *  If working in double precision, register numbers must be remapped
1348:src/xeq.c     ****  */
1349:src/xeq.c     **** static decimal64 *reg_address(int n, decimal64 *const regs, decimal64 *const named_regs) {
 182              		.loc 1 1349 90 is_stmt 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
1350:src/xeq.c     **** 	const int dbl = is_dblmode();
 187              		.loc 1 1350 2 view .LVU58
 188              	.LBB1325:
 189              	.LBI1325:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 190              		.loc 1 1118 5 view .LVU59
 191              	.LBB1326:
1119:src/xeq.c     **** }
 192              		.loc 1 1119 2 view .LVU60
1119:src/xeq.c     **** }
 193              		.loc 1 1119 24 is_stmt 0 view .LVU61
 194 0000 154B     		ldr	r3, .L25
 195 0002 1B68     		ldr	r3, [r3]
 196              	.LBE1326:
 197              	.LBE1325:
1349:src/xeq.c     **** 	const int dbl = is_dblmode();
 198              		.loc 1 1349 90 view .LVU62
 199 0004 10B4     		push	{r4}
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 4, -4
 202              	.LBB1329:
 203              	.LBB1327:
1119:src/xeq.c     **** }
 204              		.loc 1 1119 24 view .LVU63
ARM GAS  /tmp/ccBFDvgN.s 			page 29


 205 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 206              	.LBE1327:
 207              	.LBE1329:
1351:src/xeq.c     **** 
1352:src/xeq.c     **** 	if (n < regX_idx)
 208              		.loc 1 1352 5 view .LVU64
 209 000a 6328     		cmp	r0, #99
 210              	.LBB1330:
 211              	.LBB1328:
1119:src/xeq.c     **** }
 212              		.loc 1 1119 24 view .LVU65
 213 000c 44F20103 		movw	r3, #16385
 214 0010 03EA0403 		and	r3, r3, r4
 215              	.LVL17:
1119:src/xeq.c     **** }
 216              		.loc 1 1119 24 view .LVU66
 217              	.LBE1328:
 218              	.LBE1330:
 219              		.loc 1 1352 2 is_stmt 1 view .LVU67
 220              		.loc 1 1352 5 is_stmt 0 view .LVU68
 221 0014 10DD     		ble	.L23
1353:src/xeq.c     **** 		return regs + n + (dbl ? n : 0);
1354:src/xeq.c     **** 
1355:src/xeq.c     **** 	n -= regX_idx;
 222              		.loc 1 1355 2 is_stmt 1 view .LVU69
1356:src/xeq.c     **** 	// Lettered register
1357:src/xeq.c     **** 	if (XromFlags.xIN)
 223              		.loc 1 1357 6 is_stmt 0 view .LVU70
 224 0016 1149     		ldr	r1, .L25+4
 225              	.LVL18:
 226              		.loc 1 1357 5 view .LVU71
 227 0018 91F90140 		ldrsb	r4, [r1, #1]
 228 001c 002C     		cmp	r4, #0
1355:src/xeq.c     **** 	// Lettered register
 229              		.loc 1 1355 4 view .LVU72
 230 001e A0F16401 		sub	r1, r0, #100
 231              	.LVL19:
 232              		.loc 1 1357 2 is_stmt 1 view .LVU73
 233              		.loc 1 1357 5 is_stmt 0 view .LVU74
 234 0022 13DB     		blt	.L24
1358:src/xeq.c     **** 		return (decimal64 *) (XromStack + n);
1359:src/xeq.c     **** 	if (dbl)
 235              		.loc 1 1359 2 is_stmt 1 view .LVU75
 236              		.loc 1 1359 5 is_stmt 0 view .LVU76
 237 0024 B3F5804F 		cmp	r3, #16384
1360:src/xeq.c     **** 		n = (n << 1) - STACK_SIZE - EXTRA_REG;
 238              		.loc 1 1360 3 is_stmt 1 view .LVU77
 239              		.loc 1 1360 10 is_stmt 0 view .LVU78
 240 0028 04BF     		itt	eq
 241 002a 4900     		lsleq	r1, r1, #1
 242              	.LVL20:
 243              		.loc 1 1360 5 view .LVU79
 244 002c 0C39     		subeq	r1, r1, #12
 245              	.LVL21:
1361:src/xeq.c     **** 	return named_regs + n;
 246              		.loc 1 1361 2 is_stmt 1 view .LVU80
 247              		.loc 1 1361 20 is_stmt 0 view .LVU81
ARM GAS  /tmp/ccBFDvgN.s 			page 30


 248 002e 02EBC100 		add	r0, r2, r1, lsl #3
1362:src/xeq.c     **** }
 249              		.loc 1 1362 1 view .LVU82
 250 0032 5DF8044B 		ldr	r4, [sp], #4
 251              		.cfi_remember_state
 252              		.cfi_restore 4
 253              		.cfi_def_cfa_offset 0
 254 0036 7047     		bx	lr
 255              	.LVL22:
 256              	.L23:
 257              		.cfi_restore_state
1353:src/xeq.c     **** 
 258              		.loc 1 1353 3 is_stmt 1 view .LVU83
1353:src/xeq.c     **** 
 259              		.loc 1 1353 19 is_stmt 0 view .LVU84
 260 0038 B3F5804F 		cmp	r3, #16384
1353:src/xeq.c     **** 
 261              		.loc 1 1353 15 view .LVU85
 262 003c 4FEAC002 		lsl	r2, r0, #3
 263              	.LVL23:
1353:src/xeq.c     **** 
 264              		.loc 1 1353 15 view .LVU86
 265 0040 08BF     		it	eq
 266 0042 0201     		lsleq	r2, r0, #4
1353:src/xeq.c     **** 
 267              		.loc 1 1353 19 view .LVU87
 268 0044 8818     		adds	r0, r1, r2
 269              	.LVL24:
 270              		.loc 1 1362 1 view .LVU88
 271 0046 5DF8044B 		ldr	r4, [sp], #4
 272              		.cfi_remember_state
 273              		.cfi_restore 4
 274              		.cfi_def_cfa_offset 0
 275 004a 7047     		bx	lr
 276              	.LVL25:
 277              	.L24:
 278              		.cfi_restore_state
1358:src/xeq.c     **** 	if (dbl)
 279              		.loc 1 1358 3 is_stmt 1 view .LVU89
1358:src/xeq.c     **** 	if (dbl)
 280              		.loc 1 1358 10 is_stmt 0 view .LVU90
 281 004c 0448     		ldr	r0, .L25+8
 282              		.loc 1 1362 1 view .LVU91
 283 004e 5DF8044B 		ldr	r4, [sp], #4
 284              		.cfi_restore 4
 285              		.cfi_def_cfa_offset 0
1358:src/xeq.c     **** 	if (dbl)
 286              		.loc 1 1358 10 view .LVU92
 287 0052 00EB0110 		add	r0, r0, r1, lsl #4
 288              		.loc 1 1362 1 view .LVU93
 289 0056 7047     		bx	lr
 290              	.L26:
 291              		.align	2
 292              	.L25:
 293 0058 00000000 		.word	main_ram
 294 005c 00000000 		.word	XromParams
 295 0060 00000000 		.word	XromLocal
ARM GAS  /tmp/ccBFDvgN.s 			page 31


 296              		.cfi_endproc
 297              	.LFE90:
 299              		.section	.text.retstk_up,"ax",%progbits
 300              		.align	1
 301              		.p2align 2,,3
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	retstk_up:
 308              	.LFB150:
1363:src/xeq.c     **** 
1364:src/xeq.c     **** REGISTER *get_reg_n(int n) {
1365:src/xeq.c     **** 	const int dbl = is_dblmode();
1366:src/xeq.c     **** 
1367:src/xeq.c     **** 	if (n >= CONST_REG_BASE) {
1368:src/xeq.c     **** 		n -= CONST_REG_BASE;
1369:src/xeq.c     **** 		return get_const(n, dbl);
1370:src/xeq.c     **** 	}
1371:src/xeq.c     **** 	if (n >= FLASH_REG_BASE)
1372:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
1373:src/xeq.c     **** 
1374:src/xeq.c     **** 	if (n >= LOCAL_REG_BASE && local_regs() > 0) {
1375:src/xeq.c     **** 		// local register on the return stack
1376:src/xeq.c     **** 		n -= LOCAL_REG_BASE;
1377:src/xeq.c     **** 		if (dbl)
1378:src/xeq.c     **** 			n <<= 1;
1379:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
1380:src/xeq.c     **** 	}
1381:src/xeq.c     **** 	return (REGISTER *) reg_address(n, Regs + TOPREALREG - NumRegs, Regs + regX_idx);
1382:src/xeq.c     **** }
1383:src/xeq.c     **** 
1384:src/xeq.c     **** 
1385:src/xeq.c     **** REGISTER *get_flash_reg_n(int n) {
1386:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
1387:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
1388:src/xeq.c     **** }
1389:src/xeq.c     **** 
1390:src/xeq.c     **** 
1391:src/xeq.c     **** /*
1392:src/xeq.c     ****  *  Get a constatnt by index and mode
1393:src/xeq.c     ****  *  In case of a conversion, a private copy is returned
1394:src/xeq.c     ****  */
1395:src/xeq.c     **** REGISTER *get_const(int index, int dbl)
1396:src/xeq.c     **** {
1397:src/xeq.c     **** 	static REGISTER result;
1398:src/xeq.c     **** 	const int i = cnsts[index].index;
1399:src/xeq.c     **** 	if (dbl) {
1400:src/xeq.c     **** 		if (i <= 1 || i >= 128)
1401:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
1402:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
1403:src/xeq.c     **** 	}
1404:src/xeq.c     **** 	else {
1405:src/xeq.c     **** 		if (i < 128)
1406:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
1407:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
1408:src/xeq.c     **** 	}
ARM GAS  /tmp/ccBFDvgN.s 			page 32


1409:src/xeq.c     **** 	return &result;
1410:src/xeq.c     **** }
1411:src/xeq.c     **** 
1412:src/xeq.c     **** 
1413:src/xeq.c     **** /*  Some conversion routines to take decimals and produce integers
1414:src/xeq.c     ****  *  This is for opaque storage, no conversion takes place.
1415:src/xeq.c     ****  */
1416:src/xeq.c     **** long long int get_reg_n_int(int index) {
1417:src/xeq.c     **** 	long long int ll;
1418:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
1419:src/xeq.c     **** 	return ll;
1420:src/xeq.c     **** }
1421:src/xeq.c     **** 
1422:src/xeq.c     **** void set_reg_n_int(int index, long long int ll) {
1423:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
1424:src/xeq.c     **** }
1425:src/xeq.c     **** 
1426:src/xeq.c     **** /* Get an integer from a register
1427:src/xeq.c     ****  */
1428:src/xeq.c     **** unsigned long long int get_reg_n_int_sgn(int index, int *sgn) {
1429:src/xeq.c     **** 	if (is_intmode()) {
1430:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
1431:src/xeq.c     **** 	} else {
1432:src/xeq.c     **** 		decNumber n;
1433:src/xeq.c     **** 
1434:src/xeq.c     **** 		getRegister(&n, index);
1435:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
1436:src/xeq.c     **** 	}
1437:src/xeq.c     **** }
1438:src/xeq.c     **** 
1439:src/xeq.c     **** 
1440:src/xeq.c     **** /* Get an integer from X
1441:src/xeq.c     ****  */
1442:src/xeq.c     **** long long int getX_int(void) {
1443:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
1444:src/xeq.c     **** }
1445:src/xeq.c     **** 
1446:src/xeq.c     **** unsigned long long int getX_int_sgn(int *sgn) {
1447:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
1448:src/xeq.c     **** }
1449:src/xeq.c     **** 
1450:src/xeq.c     **** /*
1451:src/xeq.c     ****  *  Forced conversion from real to intger
1452:src/xeq.c     ****  *  Leaves integer mode active on return!
1453:src/xeq.c     ****  */
1454:src/xeq.c     **** static void int_from_register(int out, int in) {
1455:src/xeq.c     **** 	int sgn;
1456:src/xeq.c     **** 	unsigned long long int val;
1457:src/xeq.c     **** 	
1458:src/xeq.c     **** 	UState.intm = 0;	// Force real mode access
1459:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1460:src/xeq.c     **** 
1461:src/xeq.c     **** 	UState.intm = 1;	// Force integer access
1462:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1463:src/xeq.c     **** }
1464:src/xeq.c     **** 
1465:src/xeq.c     **** /* Put an integer into a register
ARM GAS  /tmp/ccBFDvgN.s 			page 33


1466:src/xeq.c     ****  */
1467:src/xeq.c     **** void set_reg_n_int_sgn(int index, unsigned long long int val, int sgn) {
1468:src/xeq.c     **** 	if (is_intmode()) {
1469:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
1470:src/xeq.c     **** 	} else {
1471:src/xeq.c     **** 		decNumber t;
1472:src/xeq.c     **** 
1473:src/xeq.c     **** 		ullint_to_dn(&t, val);
1474:src/xeq.c     **** 		if (sgn)
1475:src/xeq.c     **** 			dn_minus(&t, &t);
1476:src/xeq.c     **** 		setRegister(index, &t);
1477:src/xeq.c     **** 	}
1478:src/xeq.c     **** }
1479:src/xeq.c     **** 
1480:src/xeq.c     **** /* 
1481:src/xeq.c     ****  *  Forced conversion from integer to register format.
1482:src/xeq.c     ****  *  Leaves integer mode off after conversion.
1483:src/xeq.c     ****  *  Destination may be in XROM register space
1484:src/xeq.c     ****  */
1485:src/xeq.c     **** static void register_from_int(int out, int in, int called_from_xin) {
1486:src/xeq.c     **** 	int sgn;
1487:src/xeq.c     **** 	unsigned long long int val;
1488:src/xeq.c     **** 	const int xin = XromFlags.xIN;
1489:src/xeq.c     **** 	
1490:src/xeq.c     **** 	if (called_from_xin)
1491:src/xeq.c     **** 		XromFlags.xIN = 0;
1492:src/xeq.c     **** 	UState.intm = 1;
1493:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1494:src/xeq.c     **** 
1495:src/xeq.c     **** 	XromFlags.xIN = xin;
1496:src/xeq.c     **** 	UState.intm = 0;
1497:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1498:src/xeq.c     **** }
1499:src/xeq.c     **** 
1500:src/xeq.c     **** 
1501:src/xeq.c     **** /* Put an integer into X
1502:src/xeq.c     ****  * Integer registers are always single precision!
1503:src/xeq.c     ****  */
1504:src/xeq.c     **** void setX_int(long long int val) {
1505:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
1506:src/xeq.c     **** }
1507:src/xeq.c     **** 
1508:src/xeq.c     **** 
1509:src/xeq.c     **** void setX_int_sgn(unsigned long long int val, int sgn) {
1510:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
1511:src/xeq.c     **** }
1512:src/xeq.c     **** 
1513:src/xeq.c     **** 
1514:src/xeq.c     **** 
1515:src/xeq.c     **** /*
1516:src/xeq.c     ****  *  Set the register value explicitely
1517:src/xeq.c     ****  */
1518:src/xeq.c     **** void zero_regs(REGISTER *dest, int n) {
1519:src/xeq.c     **** #if 0
1520:src/xeq.c     **** 	if (is_intmode())
1521:src/xeq.c     **** 		xset(dest, 0, n << 3);
1522:src/xeq.c     **** 	else {
ARM GAS  /tmp/ccBFDvgN.s 			page 34


1523:src/xeq.c     **** 		REGISTER *const zero = get_reg_n(CONST_REG_BASE + OP_ZERO);
1524:src/xeq.c     **** 		const int reg_size = is_dblmode() ? sizeof(decimal128) : sizeof(decimal64);
1525:src/xeq.c     **** 		char *d = (char *) dest;
1526:src/xeq.c     **** 		int i;
1527:src/xeq.c     **** 		for (i = 0; i < n; ++i, d += reg_size)
1528:src/xeq.c     **** 			copyreg((REGISTER *) d, zero);
1529:src/xeq.c     **** 	}
1530:src/xeq.c     **** #else
1531:src/xeq.c     **** 	// This works for all modes
1532:src/xeq.c     **** 	// no it doesn't -- it leaves varying values of zero around
1533:src/xeq.c     **** 	xset(dest, 0, n << (3 + is_dblmode()));
1534:src/xeq.c     **** #endif
1535:src/xeq.c     **** }
1536:src/xeq.c     **** 
1537:src/xeq.c     **** void move_regs(REGISTER *dest, REGISTER *src, int n) {
1538:src/xeq.c     **** 	if (is_dblmode())
1539:src/xeq.c     **** 		n <<= 1;
1540:src/xeq.c     **** 	xcopy(dest, src, n << 3);
1541:src/xeq.c     **** }
1542:src/xeq.c     **** 
1543:src/xeq.c     **** 
1544:src/xeq.c     **** /* Zero a register
1545:src/xeq.c     ****  */
1546:src/xeq.c     **** static void set_zero(REGISTER *x) {
1547:src/xeq.c     **** 	zero_regs(x, 1);
1548:src/xeq.c     **** }
1549:src/xeq.c     **** 
1550:src/xeq.c     **** void zero_X(void) {
1551:src/xeq.c     **** 	set_zero(StackBase);
1552:src/xeq.c     **** }
1553:src/xeq.c     **** 
1554:src/xeq.c     **** void zero_Y(void) {
1555:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
1556:src/xeq.c     **** }
1557:src/xeq.c     **** 
1558:src/xeq.c     **** void clrx(enum nilop op) {
1559:src/xeq.c     **** 	zero_X();
1560:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1561:src/xeq.c     **** 	if (C_LOCKED) {
1562:src/xeq.c     **** 		zero_Y();
1563:src/xeq.c     **** 		if (POLAR_DISPLAY) {
1564:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
1565:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
1566:src/xeq.c     **** 		}
1567:src/xeq.c     **** 		CLEAR_REAL;
1568:src/xeq.c     **** 		CLEAR_IMAG;
1569:src/xeq.c     **** 	}
1570:src/xeq.c     **** #endif
1571:src/xeq.c     **** 	clr_lift();
1572:src/xeq.c     **** }
1573:src/xeq.c     **** 
1574:src/xeq.c     **** /* Zero out the stack
1575:src/xeq.c     ****  */
1576:src/xeq.c     **** void clrstk(enum nilop op) {
1577:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
1578:src/xeq.c     **** 	set_lift();
1579:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 35


1580:src/xeq.c     **** 
1581:src/xeq.c     **** 
1582:src/xeq.c     **** /* Zero out all registers excluding the stack and lastx
1583:src/xeq.c     ****  */	
1584:src/xeq.c     **** void clrreg(enum nilop op) {
1585:src/xeq.c     **** 	const int local = local_regs();
1586:src/xeq.c     **** 	process_cmdline_set_lift();
1587:src/xeq.c     **** 
1588:src/xeq.c     **** 	// erase register memory
1589:src/xeq.c     **** 	zero_regs(get_reg_n(0), global_regs());
1590:src/xeq.c     **** 
1591:src/xeq.c     **** 	// Clear A, B, C & D if they aren't part of the stack
1592:src/xeq.c     **** 	if (stack_size() != 8)
1593:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
1594:src/xeq.c     **** 
1595:src/xeq.c     **** 	// Clear J & K but not I and L since they are last X.
1596:src/xeq.c     **** 	zero_regs(get_reg_n(regJ_idx), 2);
1597:src/xeq.c     **** 
1598:src/xeq.c     **** 	// erase local registers but keep them allocated
1599:src/xeq.c     **** 	if (local)
1600:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
1601:src/xeq.c     **** }
1602:src/xeq.c     **** 
1603:src/xeq.c     **** 
1604:src/xeq.c     **** /* Clear the subroutine return stack
1605:src/xeq.c     ****  */
1606:src/xeq.c     **** void clrretstk(void) {
1607:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
1608:src/xeq.c     **** }
1609:src/xeq.c     **** 
1610:src/xeq.c     **** void clrretstk_pc(void) {
1611:src/xeq.c     **** 	clrretstk();
1612:src/xeq.c     **** 	raw_set_pc(0);
1613:src/xeq.c     **** 	update_program_bounds(1);
1614:src/xeq.c     **** }
1615:src/xeq.c     **** 
1616:src/xeq.c     **** 
1617:src/xeq.c     **** /*
1618:src/xeq.c     ****  *  Command to allow access to constants and small integers
1619:src/xeq.c     ****  */
1620:src/xeq.c     **** void cmdconst(unsigned int arg, enum rarg op) {
1621:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
1622:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX || op == RARG_IND_CONST_CMPLX) {
1623:src/xeq.c     **** #else
1624:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX) {
1625:src/xeq.c     **** #endif
1626:src/xeq.c     **** 		lift2_if_enabled();
1627:src/xeq.c     **** 		zero_Y();
1628:src/xeq.c     **** 		set_was_complex();
1629:src/xeq.c     **** 	} else
1630:src/xeq.c     **** 		lift_if_enabled();
1631:src/xeq.c     **** 
1632:src/xeq.c     **** 	if (op == RARG_INTNUM || op == RARG_INTNUM_CMPLX)
1633:src/xeq.c     **** 		setX_int_sgn(arg, 0);
1634:src/xeq.c     **** 	else if (is_intmode())
1635:src/xeq.c     **** 		bad_mode_error();
1636:src/xeq.c     **** 	else 
ARM GAS  /tmp/ccBFDvgN.s 			page 36


1637:src/xeq.c     **** 		copyreg(StackBase, get_const(arg, is_dblmode()));
1638:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1639:src/xeq.c     **** 	CLEAR_POLAR_READY;
1640:src/xeq.c     **** #endif
1641:src/xeq.c     **** }
1642:src/xeq.c     **** 
1643:src/xeq.c     **** 
1644:src/xeq.c     **** /* Store/recall code here.
1645:src/xeq.c     ****  * These two are pretty much the same so we define some utility routines first.
1646:src/xeq.c     ****  */
1647:src/xeq.c     **** 
1648:src/xeq.c     **** /* Do a basic STO/RCL arithmetic operation.
1649:src/xeq.c     ****  */
1650:src/xeq.c     **** static int storcl_op(unsigned short opr, int index, decNumber *r, int rev) {
1651:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
1652:src/xeq.c     **** 
1653:src/xeq.c     **** 	getX(x);
1654:src/xeq.c     **** 	getRegister(y, index);
1655:src/xeq.c     **** 	if (rev) {
1656:src/xeq.c     **** 		x = y;
1657:src/xeq.c     **** 		y = &a;
1658:src/xeq.c     **** 	}
1659:src/xeq.c     **** 
1660:src/xeq.c     **** 	switch (opr) {
1661:src/xeq.c     **** 	case 1:
1662:src/xeq.c     **** 		dn_add(r, y, x);
1663:src/xeq.c     **** 		break;
1664:src/xeq.c     **** 	case 2:
1665:src/xeq.c     **** 		dn_subtract(r, y, x);
1666:src/xeq.c     **** 		break;
1667:src/xeq.c     **** 	case 3:
1668:src/xeq.c     **** 		dn_multiply(r, y, x);
1669:src/xeq.c     **** 		break;
1670:src/xeq.c     **** 	case 4:
1671:src/xeq.c     **** 		dn_divide(r, y, x);
1672:src/xeq.c     **** 		break;
1673:src/xeq.c     **** 	case 5:
1674:src/xeq.c     **** 		dn_min(r, y, x);
1675:src/xeq.c     **** 		break;
1676:src/xeq.c     **** 	case 6:
1677:src/xeq.c     **** 		dn_max(r, y, x);
1678:src/xeq.c     **** 		break;
1679:src/xeq.c     **** 	default:
1680:src/xeq.c     **** 		return 1;
1681:src/xeq.c     **** 	}
1682:src/xeq.c     **** 	return 0;
1683:src/xeq.c     **** }
1684:src/xeq.c     **** 
1685:src/xeq.c     **** static int storcl_intop(unsigned short opr, int index, long long int *r, int rev) {
1686:src/xeq.c     **** 	long long int x, y;
1687:src/xeq.c     **** 
1688:src/xeq.c     **** 	x = getX_int();
1689:src/xeq.c     **** 	y = get_reg_n_int(index);
1690:src/xeq.c     **** 
1691:src/xeq.c     **** 	if (rev) {
1692:src/xeq.c     **** 		const long long int t = x;
1693:src/xeq.c     **** 		x = y;
ARM GAS  /tmp/ccBFDvgN.s 			page 37


1694:src/xeq.c     **** 		y = t;
1695:src/xeq.c     **** 	}
1696:src/xeq.c     **** 
1697:src/xeq.c     **** 	switch (opr) {
1698:src/xeq.c     **** 	case 1:
1699:src/xeq.c     **** 		*r = intAdd(y, x);
1700:src/xeq.c     **** 		break;
1701:src/xeq.c     **** 	case 2:
1702:src/xeq.c     **** 		*r = intSubtract(y, x);
1703:src/xeq.c     **** 		break;
1704:src/xeq.c     **** 	case 3:
1705:src/xeq.c     **** 		*r = intMultiply(y, x);
1706:src/xeq.c     **** 		break;
1707:src/xeq.c     **** 	case 4:
1708:src/xeq.c     **** 		*r = intDivide(y, x);
1709:src/xeq.c     **** 		break;
1710:src/xeq.c     **** 	case 5:
1711:src/xeq.c     **** 		*r = intMin(y, x);
1712:src/xeq.c     **** 		break;
1713:src/xeq.c     **** 	case 6:
1714:src/xeq.c     **** 		*r = intMax(y, x);
1715:src/xeq.c     **** 		break;
1716:src/xeq.c     **** 	default:
1717:src/xeq.c     **** 		return 1;
1718:src/xeq.c     **** 	}
1719:src/xeq.c     **** 	return 0;
1720:src/xeq.c     **** }
1721:src/xeq.c     **** 
1722:src/xeq.c     **** /* We've got a STO operation to do.
1723:src/xeq.c     ****  */
1724:src/xeq.c     **** void cmdsto(unsigned int arg, enum rarg op) {
1725:src/xeq.c     **** 	if (op == RARG_STO) {
1726:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
1727:src/xeq.c     **** 	} else {
1728:src/xeq.c     **** 		if (is_intmode()) {
1729:src/xeq.c     **** 			long long int r;
1730:src/xeq.c     **** 
1731:src/xeq.c     **** 			if (storcl_intop(op - RARG_STO, arg, &r, 0))
1732:src/xeq.c     **** 				illegal(op);
1733:src/xeq.c     **** 			set_reg_n_int(arg, r);
1734:src/xeq.c     **** 		} else {
1735:src/xeq.c     **** 			decNumber r;
1736:src/xeq.c     **** 
1737:src/xeq.c     **** 			if (storcl_op(op - RARG_STO, arg, &r, 0))
1738:src/xeq.c     **** 				illegal(op);
1739:src/xeq.c     **** 			setRegister(arg, &r);
1740:src/xeq.c     **** 		}
1741:src/xeq.c     **** 	}
1742:src/xeq.c     **** }
1743:src/xeq.c     **** 
1744:src/xeq.c     **** /* We've got a RCL operation to do.
1745:src/xeq.c     ****  */
1746:src/xeq.c     **** static void do_rcl(int index, enum rarg op) {
1747:src/xeq.c     **** 	if (op == RARG_RCL) {
1748:src/xeq.c     **** 		REGISTER temp;
1749:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
1750:src/xeq.c     **** 		lift_if_enabled();
ARM GAS  /tmp/ccBFDvgN.s 			page 38


1751:src/xeq.c     **** 		copyreg(StackBase, &temp);
1752:src/xeq.c     **** 	} else {
1753:src/xeq.c     **** 		if (is_intmode()) {
1754:src/xeq.c     **** 			long long int r;
1755:src/xeq.c     **** 
1756:src/xeq.c     **** 			if (storcl_intop(op - RARG_RCL, index, &r, 1))
1757:src/xeq.c     **** 				illegal(op);
1758:src/xeq.c     **** 			setlastX();
1759:src/xeq.c     **** 			setX_int(r);
1760:src/xeq.c     **** 		} else {
1761:src/xeq.c     **** 			decNumber r;
1762:src/xeq.c     **** 
1763:src/xeq.c     **** 			if (storcl_op(op - RARG_RCL, index, &r, 1))
1764:src/xeq.c     **** 				illegal(op);
1765:src/xeq.c     **** 			setlastX();
1766:src/xeq.c     **** 			setX(&r);
1767:src/xeq.c     **** 		}
1768:src/xeq.c     **** 	}
1769:src/xeq.c     **** }
1770:src/xeq.c     **** 
1771:src/xeq.c     **** void cmdrcl(unsigned int arg, enum rarg op) {
1772:src/xeq.c     **** 	do_rcl(arg, op);
1773:src/xeq.c     **** }
1774:src/xeq.c     **** 
1775:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1776:src/xeq.c     **** void cmdflashrcl(unsigned int arg, enum rarg op) {
1777:src/xeq.c     **** 	do_rcl(FLASH_REG_BASE + arg, op - RARG_FLRCL + RARG_RCL);
1778:src/xeq.c     **** }
1779:src/xeq.c     **** #endif
1780:src/xeq.c     **** 
1781:src/xeq.c     **** /* And the complex equivalents for the above.
1782:src/xeq.c     ****  * We pair registers arg & arg+1 to provide a complex number
1783:src/xeq.c     ****  */
1784:src/xeq.c     **** static int storcl_cop(unsigned short opr, int index, decNumber *r1, decNumber *r2, int rev) {
1785:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
1786:src/xeq.c     **** 
1787:src/xeq.c     **** 	getXY(x + 0, x + 1);
1788:src/xeq.c     **** 	getRegister(y + 0, index);
1789:src/xeq.c     **** 	getRegister(y + 1, index + 1);
1790:src/xeq.c     **** 
1791:src/xeq.c     **** 	if (rev) {
1792:src/xeq.c     **** 		x = y;
1793:src/xeq.c     **** 		y = a;
1794:src/xeq.c     **** 	}
1795:src/xeq.c     **** 
1796:src/xeq.c     **** 	switch (opr) {
1797:src/xeq.c     **** 	case 1:
1798:src/xeq.c     **** 		cmplxAdd(r1, r2, y + 0, y + 1, x + 0, x + 1);
1799:src/xeq.c     **** 		break;
1800:src/xeq.c     **** 	case 2:
1801:src/xeq.c     **** 		cmplxSubtract(r1, r2, y + 0, y + 1, x + 0, x + 1);
1802:src/xeq.c     **** 		break;
1803:src/xeq.c     **** 	case 3:
1804:src/xeq.c     **** 		cmplxMultiply(r1, r2, y + 0, y + 1, x + 0, x + 1);
1805:src/xeq.c     **** 		break;
1806:src/xeq.c     **** 	case 4:
1807:src/xeq.c     **** 		cmplxDivide(r1, r2, y + 0, y + 1, x + 0, x + 1);
ARM GAS  /tmp/ccBFDvgN.s 			page 39


1808:src/xeq.c     **** 		break;
1809:src/xeq.c     **** 	default:
1810:src/xeq.c     **** 		return 1;
1811:src/xeq.c     **** 	}
1812:src/xeq.c     **** 	return 0;
1813:src/xeq.c     **** }
1814:src/xeq.c     **** 
1815:src/xeq.c     **** 
1816:src/xeq.c     **** void cmdcsto(unsigned int arg, enum rarg op) {
1817:src/xeq.c     **** 	decNumber r1, r2;
1818:src/xeq.c     **** 	REGISTER *t1, *t2;
1819:src/xeq.c     **** 
1820:src/xeq.c     **** 	t1 = get_reg_n(arg);
1821:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
1822:src/xeq.c     **** 
1823:src/xeq.c     **** 	if (op == RARG_CSTO) {
1824:src/xeq.c     **** 		copyreg(t1, StackBase);
1825:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
1826:src/xeq.c     **** 	} else {
1827:src/xeq.c     **** 		if (is_intmode())
1828:src/xeq.c     **** 			bad_mode_error();
1829:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
1830:src/xeq.c     **** 			illegal(op);
1831:src/xeq.c     **** 		else {
1832:src/xeq.c     **** 			setRegister(arg, &r1);
1833:src/xeq.c     **** 			setRegister(arg + 1, &r2);
1834:src/xeq.c     **** 		}
1835:src/xeq.c     **** 	}
1836:src/xeq.c     **** 	set_was_complex();
1837:src/xeq.c     **** }
1838:src/xeq.c     **** 
1839:src/xeq.c     **** static void do_crcl(int index, enum rarg op) {
1840:src/xeq.c     **** 	decNumber r1, r2;
1841:src/xeq.c     **** 
1842:src/xeq.c     **** 	if (op == RARG_CRCL) {
1843:src/xeq.c     **** 		REGISTER x, y;
1844:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
1845:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
1846:src/xeq.c     **** 		lift2_if_enabled();
1847:src/xeq.c     **** 		copyreg(StackBase, &x);
1848:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
1849:src/xeq.c     **** 	} else {
1850:src/xeq.c     **** 		if (is_intmode())
1851:src/xeq.c     **** 			bad_mode_error();
1852:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
1853:src/xeq.c     **** 			illegal(op);
1854:src/xeq.c     **** 		else {
1855:src/xeq.c     **** 			setlastXY();
1856:src/xeq.c     **** 			setXY(&r1, &r2);
1857:src/xeq.c     **** 		}
1858:src/xeq.c     **** 	}
1859:src/xeq.c     **** 	set_was_complex();
1860:src/xeq.c     **** }
1861:src/xeq.c     **** 
1862:src/xeq.c     **** void cmdcrcl(unsigned int arg, enum rarg op) {
1863:src/xeq.c     **** 	do_crcl(arg, op);
1864:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
ARM GAS  /tmp/ccBFDvgN.s 			page 40


1865:src/xeq.c     **** 	CLEAR_POLAR_READY;
1866:src/xeq.c     **** #endif
1867:src/xeq.c     **** }
1868:src/xeq.c     **** 
1869:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1870:src/xeq.c     **** void cmdflashcrcl(unsigned int arg, enum rarg op) {
1871:src/xeq.c     **** 	do_crcl(FLASH_REG_BASE + arg, op - RARG_FLCRCL + RARG_CRCL);
1872:src/xeq.c     **** }
1873:src/xeq.c     **** #endif
1874:src/xeq.c     **** 
1875:src/xeq.c     **** /*
1876:src/xeq.c     ****  *  "Alien" RCL commands to convert registers originally stored in a different format
1877:src/xeq.c     ****  */
1878:src/xeq.c     **** // RCL of an integer value
1879:src/xeq.c     **** void cmdircl(unsigned int arg, enum rarg op) {
1880:src/xeq.c     **** 	if (is_intmode())
1881:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
1882:src/xeq.c     **** 	else
1883:src/xeq.c     **** 		register_from_int(regX_idx, arg, 0);
1884:src/xeq.c     **** }
1885:src/xeq.c     **** 
1886:src/xeq.c     **** // RCL of a single or double precision real value
1887:src/xeq.c     **** void cmdrrcl(unsigned int arg, enum rarg op) {
1888:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
1889:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
1890:src/xeq.c     **** 
1891:src/xeq.c     **** 	if (rcl_dbl && arg >= regX_idx && arg <= regK_idx) {
1892:src/xeq.c     **** 		// dRCL is not valid for lettered registers
1893:src/xeq.c     **** 		report_err(ERR_RANGE);
1894:src/xeq.c     **** 		return;
1895:src/xeq.c     **** 	}
1896:src/xeq.c     **** 
1897:src/xeq.c     **** 	UState.mode_double = rcl_dbl; // Force reading in requested format
1898:src/xeq.c     **** 	if (is_intmode()) {
1899:src/xeq.c     **** 		int_from_register(regX_idx, arg);
1900:src/xeq.c     **** 		UState.mode_double = was_dbl;
1901:src/xeq.c     **** 	}
1902:src/xeq.c     **** 	else {
1903:src/xeq.c     **** 		decNumber x;
1904:src/xeq.c     **** 		getRegister(&x, arg);
1905:src/xeq.c     **** 
1906:src/xeq.c     **** 		UState.mode_double = was_dbl; // Force access in original mode
1907:src/xeq.c     **** 		setX(&x);
1908:src/xeq.c     **** 	}
1909:src/xeq.c     **** }
1910:src/xeq.c     **** 
1911:src/xeq.c     **** 
1912:src/xeq.c     **** /* SWAP x with the specified register
1913:src/xeq.c     ****  */
1914:src/xeq.c     **** void swap_reg(REGISTER *a, REGISTER *b) {
1915:src/xeq.c     **** 	REGISTER t;
1916:src/xeq.c     **** 
1917:src/xeq.c     **** 	copyreg(&t, a);
1918:src/xeq.c     **** 	copyreg(a, b);
1919:src/xeq.c     **** 	copyreg(b, &t);
1920:src/xeq.c     **** }
1921:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 41


1922:src/xeq.c     **** void cmdswap(unsigned int arg, enum rarg op) {
1923:src/xeq.c     **** 	int idx;
1924:src/xeq.c     **** 
1925:src/xeq.c     **** 	if (op == RARG_CSWAPX)
1926:src/xeq.c     **** 		idx = regX_idx;
1927:src/xeq.c     **** 	else if (op == RARG_CSWAPZ)
1928:src/xeq.c     **** 		idx = regZ_idx;
1929:src/xeq.c     **** 	else
1930:src/xeq.c     **** 		idx = regX_idx + (int)(op - RARG_SWAPX);
1931:src/xeq.c     **** 
1932:src/xeq.c     **** 	swap_reg(get_reg_n(idx), get_reg_n(arg));
1933:src/xeq.c     **** 
1934:src/xeq.c     **** 	if (op >= RARG_CSWAPX) {
1935:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
1936:src/xeq.c     **** 		set_was_complex();
1937:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1938:src/xeq.c     **** 	CLEAR_POLAR_READY;
1939:src/xeq.c     **** #endif
1940:src/xeq.c     **** 	}
1941:src/xeq.c     **** }
1942:src/xeq.c     **** 
1943:src/xeq.c     **** 
1944:src/xeq.c     **** /* View a specified register
1945:src/xeq.c     ****  */
1946:src/xeq.c     **** void cmdview(unsigned int arg, enum rarg op) {
1947:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
1948:src/xeq.c     **** 
1949:src/xeq.c     **** 	State2.wascomplex = cmplx;
1950:src/xeq.c     **** 	ShowRegister = arg;
1951:src/xeq.c     **** 	State2.disp_freeze = 0;
1952:src/xeq.c     **** 	display();
1953:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
1954:src/xeq.c     **** }
1955:src/xeq.c     **** 
1956:src/xeq.c     **** 
1957:src/xeq.c     **** /* Get the stack size */
1958:src/xeq.c     **** void get_stack_size(enum nilop op) {
1959:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
1960:src/xeq.c     **** }
1961:src/xeq.c     **** 
1962:src/xeq.c     **** void get_word_size(enum nilop op) {
1963:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
1964:src/xeq.c     **** }
1965:src/xeq.c     **** 
1966:src/xeq.c     **** void get_sign_mode(enum nilop op) {
1967:src/xeq.c     **** 	static const unsigned char modes[4] = {
1968:src/xeq.c     **** 		0x02,		// 2's complement
1969:src/xeq.c     **** 		0x01,		// 1's complement
1970:src/xeq.c     **** 		0x00,		// unsigned
1971:src/xeq.c     **** 		0x81		// sign and mantissa
1972:src/xeq.c     **** 	};
1973:src/xeq.c     **** 	const unsigned char v = modes[(int)int_mode()];
1974:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
1975:src/xeq.c     **** }
1976:src/xeq.c     **** 
1977:src/xeq.c     **** void get_base(enum nilop op) {
1978:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
ARM GAS  /tmp/ccBFDvgN.s 			page 42


1979:src/xeq.c     **** }
1980:src/xeq.c     **** 
1981:src/xeq.c     **** #ifdef DM42
1982:src/xeq.c     ****  long int DM42_Ticker () {
1983:src/xeq.c     ****     long int f, t;
1984:src/xeq.c     ****     t = get_rtc_ticks();
1985:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
1986:src/xeq.c     ****     return f;
1987:src/xeq.c     ****  }
1988:src/xeq.c     **** #endif
1989:src/xeq.c     **** /* Get the current ticker value */
1990:src/xeq.c     **** void op_ticks(enum nilop op) {
1991:src/xeq.c     **** #if !defined(CONSOLE)
1992:src/xeq.c     ****     setX_int_sgn(Ticker, 0);
1993:src/xeq.c     **** #else 
1994:src/xeq.c     ****     struct timeval tv;
1995:src/xeq.c     ****     long long int t;
1996:src/xeq.c     ****     gettimeofday(&tv, NULL);
1997:src/xeq.c     ****     t = tv.tv_sec * 10 + tv.tv_usec / 100000;
1998:src/xeq.c     ****     setX_int_sgn(t, 0);
1999:src/xeq.c     **** #endif
2000:src/xeq.c     **** }
2001:src/xeq.c     **** 
2002:src/xeq.c     **** /* Display the battery voltage */
2003:src/xeq.c     **** void op_voltage(enum nilop op) {
2004:src/xeq.c     **** 	decNumber t, u;
2005:src/xeq.c     **** #ifdef REALBUILD
2006:src/xeq.c     **** 	unsigned long long int v = 19 + Voltage;
2007:src/xeq.c     **** #elif defined(DM42)
2008:src/xeq.c     **** 	int v = get_vbat();
2009:src/xeq.c     **** 	v = v / 100;
2010:src/xeq.c     **** #else
2011:src/xeq.c     **** 	unsigned long long int v = 32;
2012:src/xeq.c     **** #endif
2013:src/xeq.c     **** 
2014:src/xeq.c     **** 	if (is_intmode()) {
2015:src/xeq.c     **** 		setX_int_sgn(v, 0);
2016:src/xeq.c     **** 	} else {
2017:src/xeq.c     **** 		ullint_to_dn(&t, v);
2018:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
2019:src/xeq.c     **** 		setX(&u);
2020:src/xeq.c     **** 	}
2021:src/xeq.c     **** }
2022:src/xeq.c     **** 
2023:src/xeq.c     **** /*
2024:src/xeq.c     ****  *  Commands to determine free memory
2025:src/xeq.c     ****  */
2026:src/xeq.c     **** int free_mem(void) {
2027:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
2028:src/xeq.c     **** }
2029:src/xeq.c     **** 
2030:src/xeq.c     **** int free_flash(void) {
2031:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
2032:src/xeq.c     **** }
2033:src/xeq.c     **** 
2034:src/xeq.c     **** void get_mem(enum nilop op) {
2035:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
ARM GAS  /tmp/ccBFDvgN.s 			page 43


2036:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
2037:src/xeq.c     **** 		 op == OP_FLASHQ ? free_flash() :
2038:src/xeq.c     **** 		 global_regs(),
2039:src/xeq.c     **** 		 0);
2040:src/xeq.c     **** }
2041:src/xeq.c     **** 
2042:src/xeq.c     **** 
2043:src/xeq.c     **** /* Check if a keystroke is pending in the buffer, if so return it to the specified
2044:src/xeq.c     ****  * register, if not skip the next step.
2045:src/xeq.c     ****  */
2046:src/xeq.c     **** void cmdkeyp(unsigned int arg, enum rarg op) {
2047:src/xeq.c     **** 	int cond = LastKey == 0;
2048:src/xeq.c     **** 	if (!cond) {
2049:src/xeq.c     **** 		int k = LastKey - 1;
2050:src/xeq.c     **** 		LastKey = 0;
2051:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
2052:src/xeq.c     **** 	}
2053:src/xeq.c     **** 	fin_tst(cond);
2054:src/xeq.c     **** }
2055:src/xeq.c     **** 
2056:src/xeq.c     **** /*
2057:src/xeq.c     ****  *  Get a key code from a register and translate it from row/colum to internal
2058:src/xeq.c     ****  *  Check for valid arguments
2059:src/xeq.c     ****  */
2060:src/xeq.c     **** static int get_keycode_from_reg(unsigned int n)
2061:src/xeq.c     **** {
2062:src/xeq.c     **** 	int sgn;
2063:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
2064:src/xeq.c     **** 	if ( c < 0 )
2065:src/xeq.c     **** 		report_err(ERR_RANGE);
2066:src/xeq.c     **** 	return c;
2067:src/xeq.c     **** }
2068:src/xeq.c     **** 
2069:src/xeq.c     **** /*
2070:src/xeq.c     ****  *  Take a row/column key code and feed it to the keyboard buffer
2071:src/xeq.c     ****  *  This stops program execution first to make sure, the key is not
2072:src/xeq.c     ****  *  read in by KEY? again.
2073:src/xeq.c     ****  */
2074:src/xeq.c     **** void cmdputkey(unsigned int arg, enum rarg op)
2075:src/xeq.c     **** {
2076:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2077:src/xeq.c     **** 
2078:src/xeq.c     **** 	if (c >= 0) {
2079:src/xeq.c     **** 		set_running_off();
2080:src/xeq.c     **** 		put_key(c);
2081:src/xeq.c     **** 	}
2082:src/xeq.c     **** }
2083:src/xeq.c     **** 
2084:src/xeq.c     **** /*
2085:src/xeq.c     ****  *  Return the type of the keycode in register n
2086:src/xeq.c     ****  *  returns 0-9 for digits, 10 for ., +/-, EEX, 11 for f,g,h, 12 for all other keys.
2087:src/xeq.c     ****  *  Invalid codes produce an error.
2088:src/xeq.c     ****  */
2089:src/xeq.c     **** void cmdkeytype(unsigned int arg, enum rarg op)
2090:src/xeq.c     **** {
2091:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2092:src/xeq.c     **** 	if ( c >= 0 ) {
ARM GAS  /tmp/ccBFDvgN.s 			page 44


2093:src/xeq.c     **** 		const char types[] = {
2094:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
2095:src/xeq.c     **** 			12, 12, 12, 11, 11, 11,
2096:src/xeq.c     **** 			12, 12, 10, 10, 12, 12,
2097:src/xeq.c     **** 			12,  7,  8,  9, 12, 12,
2098:src/xeq.c     **** 			12,  4,  5,  6, 12, 12,
2099:src/xeq.c     **** 			12,  1,  2,  3, 12, 12,
2100:src/xeq.c     **** 			12,  0, 10, 12, 12 };
2101:src/xeq.c     **** 		lift_if_enabled();
2102:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
2103:src/xeq.c     **** 	}
2104:src/xeq.c     **** }
2105:src/xeq.c     **** 
2106:src/xeq.c     **** 
2107:src/xeq.c     **** /* Check which operating mode we're in -- integer or real -- they both
2108:src/xeq.c     ****  * vector through this routine.
2109:src/xeq.c     ****  */
2110:src/xeq.c     **** void check_mode(enum nilop op) {
2111:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
2112:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
2113:src/xeq.c     **** 
2114:src/xeq.c     **** 	fin_tst(intmode == desired);
2115:src/xeq.c     **** }
2116:src/xeq.c     **** 
2117:src/xeq.c     **** 
2118:src/xeq.c     **** /* Check if DBLON is active
2119:src/xeq.c     ****  */
2120:src/xeq.c     **** void check_dblmode(enum nilop op) {
2121:src/xeq.c     **** 	fin_tst(is_dblmode());
2122:src/xeq.c     **** }
2123:src/xeq.c     **** 
2124:src/xeq.c     **** void op_query_xtal(enum nilop op) {
2125:src/xeq.c     **** 	fin_tst(Xtal);
2126:src/xeq.c     **** }
2127:src/xeq.c     **** 
2128:src/xeq.c     **** void op_query_print(enum nilop op) {
2129:src/xeq.c     **** #ifdef INFRARED
2130:src/xeq.c     **** 	fin_tst(1);
2131:src/xeq.c     **** #else
2132:src/xeq.c     **** 	fin_tst(0);
2133:src/xeq.c     **** #endif
2134:src/xeq.c     **** }
2135:src/xeq.c     **** 
2136:src/xeq.c     **** /* Save and restore the entire stack to sequential registers */
2137:src/xeq.c     **** static int check_stack_overlap(unsigned int arg) {
2138:src/xeq.c     **** 	const int n = stack_size();
2139:src/xeq.c     **** 
2140:src/xeq.c     **** 	if (arg + n <= global_regs() || arg >= NUMREG) {
2141:src/xeq.c     **** 		return n;
2142:src/xeq.c     **** 	}
2143:src/xeq.c     **** 	report_err(ERR_STK_CLASH);
2144:src/xeq.c     **** 	return 0;
2145:src/xeq.c     **** }
2146:src/xeq.c     **** 
2147:src/xeq.c     **** void cmdstostk(unsigned int arg, enum rarg op) {
2148:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2149:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 45


2150:src/xeq.c     **** 	for (i=0; i<n; i++)
2151:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
2152:src/xeq.c     **** }
2153:src/xeq.c     **** 
2154:src/xeq.c     **** void cmdrclstk(unsigned int arg, enum rarg op) {
2155:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2156:src/xeq.c     **** 
2157:src/xeq.c     **** 	for (i=0; i<n; i++)
2158:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
2159:src/xeq.c     **** }
2160:src/xeq.c     **** 
2161:src/xeq.c     **** 
2162:src/xeq.c     **** /*
2163:src/xeq.c     ****  *  Move up the return stack, skipping any local variables
2164:src/xeq.c     ****  */
2165:src/xeq.c     **** static void retstk_up(void)
2166:src/xeq.c     **** {
 309              		.loc 1 2166 1 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
2167:src/xeq.c     **** 	if (RetStkPtr < 0) {
 314              		.loc 1 2167 2 view .LVU95
 315              		.loc 1 2167 6 is_stmt 0 view .LVU96
 316 0000 1A4B     		ldr	r3, .L39
2166:src/xeq.c     **** 	if (RetStkPtr < 0) {
 317              		.loc 1 2166 1 view .LVU97
 318 0002 70B4     		push	{r4, r5, r6}
 319              		.cfi_def_cfa_offset 12
 320              		.cfi_offset 4, -12
 321              		.cfi_offset 5, -8
 322              		.cfi_offset 6, -4
 323              		.loc 1 2167 6 view .LVU98
 324 0004 1C68     		ldr	r4, [r3]
 325 0006 B4F9E227 		ldrsh	r2, [r4, #2018]
 326              		.loc 1 2167 5 view .LVU99
 327 000a 002A     		cmp	r2, #0
 328 000c 01DB     		blt	.L37
 329              	.L27:
2168:src/xeq.c     **** 		int sp = RetStkPtr++;
2169:src/xeq.c     **** 		unsigned int s = RetStk[sp++];
2170:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
2171:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
2172:src/xeq.c     **** 			RetStkPtr = sp;
2173:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
2174:src/xeq.c     **** 			LocalRegs = 0;
2175:src/xeq.c     **** 			while (sp < 0) {
2176:src/xeq.c     **** 				s = RetStk[sp];
2177:src/xeq.c     **** 				if (isLOCAL(s)) {
2178:src/xeq.c     **** 					LocalRegs = sp;
2179:src/xeq.c     **** 					break;
2180:src/xeq.c     **** 				}
2181:src/xeq.c     **** 				++sp;
2182:src/xeq.c     **** 				if (isHIDDEN(s))
2183:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
2184:src/xeq.c     **** 			}
ARM GAS  /tmp/ccBFDvgN.s 			page 46


2185:src/xeq.c     **** 		}
2186:src/xeq.c     **** 	}
2187:src/xeq.c     **** }
 330              		.loc 1 2187 1 view .LVU100
 331 000e 70BC     		pop	{r4, r5, r6}
 332              		.cfi_remember_state
 333              		.cfi_restore 6
 334              		.cfi_restore 5
 335              		.cfi_restore 4
 336              		.cfi_def_cfa_offset 0
 337 0010 7047     		bx	lr
 338              	.L37:
 339              		.cfi_restore_state
 340              	.LBB1331:
2168:src/xeq.c     **** 		int sp = RetStkPtr++;
 341              		.loc 1 2168 3 is_stmt 1 view .LVU101
2169:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 342              		.loc 1 2169 26 is_stmt 0 view .LVU102
 343 0012 174B     		ldr	r3, .L39+4
2168:src/xeq.c     **** 		int sp = RetStkPtr++;
 344              		.loc 1 2168 21 view .LVU103
 345 0014 511C     		adds	r1, r2, #1
2169:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 346              		.loc 1 2169 26 view .LVU104
 347 0016 1D68     		ldr	r5, [r3]
2168:src/xeq.c     **** 		int sp = RetStkPtr++;
 348              		.loc 1 2168 21 view .LVU105
 349 0018 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
 350              	.LVL26:
2169:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 351              		.loc 1 2169 3 is_stmt 1 view .LVU106
2169:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 352              		.loc 1 2169 26 is_stmt 0 view .LVU107
 353 001c 35F81230 		ldrh	r3, [r5, r2, lsl #1]
 354              	.LVL27:
2170:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 355              		.loc 1 2170 3 is_stmt 1 view .LVU108
2170:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 356              		.loc 1 2170 7 is_stmt 0 view .LVU109
 357 0020 1A0B     		lsrs	r2, r3, #12
 358              	.LVL28:
2170:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 359              		.loc 1 2170 6 view .LVU110
 360 0022 22F00202 		bic	r2, r2, #2
 361 0026 012A     		cmp	r2, #1
 362 0028 F1D1     		bne	.L27
2171:src/xeq.c     **** 			RetStkPtr = sp;
 363              		.loc 1 2171 4 is_stmt 1 view .LVU111
2171:src/xeq.c     **** 			RetStkPtr = sp;
 364              		.loc 1 2171 10 is_stmt 0 view .LVU112
 365 002a C3F30B03 		ubfx	r3, r3, #0, #12
 366              	.LVL29:
2171:src/xeq.c     **** 			RetStkPtr = sp;
 367              		.loc 1 2171 7 view .LVU113
 368 002e 0B44     		add	r3, r3, r1
 369              	.LVL30:
2172:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
ARM GAS  /tmp/ccBFDvgN.s 			page 47


 370              		.loc 1 2172 4 is_stmt 1 view .LVU114
2174:src/xeq.c     **** 			while (sp < 0) {
 371              		.loc 1 2174 14 is_stmt 0 view .LVU115
 372 0030 0022     		movs	r2, #0
2172:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 373              		.loc 1 2172 14 view .LVU116
 374 0032 A4F8E237 		strh	r3, [r4, #2018]	@ movhi
 375              	.LVL31:
2174:src/xeq.c     **** 			while (sp < 0) {
 376              		.loc 1 2174 4 is_stmt 1 view .LVU117
2174:src/xeq.c     **** 			while (sp < 0) {
 377              		.loc 1 2174 14 is_stmt 0 view .LVU118
 378 0036 A4F8DE27 		strh	r2, [r4, #2014]	@ movhi
2175:src/xeq.c     **** 				s = RetStk[sp];
 379              		.loc 1 2175 4 is_stmt 1 view .LVU119
 380 003a 6FF00046 		mvn	r6, #-2147483648
 381              	.L31:
2175:src/xeq.c     **** 				s = RetStk[sp];
 382              		.loc 1 2175 4 is_stmt 0 view .LVU120
 383 003e 9919     		adds	r1, r3, r6
 384 0040 05EB4101 		add	r1, r5, r1, lsl #1
 385 0044 03E0     		b	.L33
 386              	.LVL32:
 387              	.L32:
2182:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 388              		.loc 1 2182 8 view .LVU121
 389 0046 032A     		cmp	r2, #3
2181:src/xeq.c     **** 				if (isHIDDEN(s))
 390              		.loc 1 2181 5 view .LVU122
 391 0048 03F10103 		add	r3, r3, #1
 392              	.LVL33:
2182:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 393              		.loc 1 2182 5 is_stmt 1 view .LVU123
2182:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 394              		.loc 1 2182 8 is_stmt 0 view .LVU124
 395 004c 0AD0     		beq	.L38
 396              	.LVL34:
 397              	.L33:
2176:src/xeq.c     **** 				if (isLOCAL(s)) {
 398              		.loc 1 2176 5 is_stmt 1 view .LVU125
2181:src/xeq.c     **** 				if (isHIDDEN(s))
 399              		.loc 1 2181 5 view .LVU126
2175:src/xeq.c     **** 				s = RetStk[sp];
 400              		.loc 1 2175 10 view .LVU127
 401 004e 002B     		cmp	r3, #0
 402 0050 DDDA     		bge	.L27
2176:src/xeq.c     **** 				if (isLOCAL(s)) {
 403              		.loc 1 2176 15 is_stmt 0 view .LVU128
 404 0052 31F8020F 		ldrh	r0, [r1, #2]!
 405              	.LVL35:
2177:src/xeq.c     **** 					LocalRegs = sp;
 406              		.loc 1 2177 5 is_stmt 1 view .LVU129
2177:src/xeq.c     **** 					LocalRegs = sp;
 407              		.loc 1 2177 9 is_stmt 0 view .LVU130
 408 0056 020B     		lsrs	r2, r0, #12
2177:src/xeq.c     **** 					LocalRegs = sp;
 409              		.loc 1 2177 8 view .LVU131
ARM GAS  /tmp/ccBFDvgN.s 			page 48


 410 0058 012A     		cmp	r2, #1
 411 005a F4D1     		bne	.L32
2178:src/xeq.c     **** 					break;
 412              		.loc 1 2178 6 is_stmt 1 view .LVU132
2178:src/xeq.c     **** 					break;
 413              		.loc 1 2178 16 is_stmt 0 view .LVU133
 414 005c A4F8DE37 		strh	r3, [r4, #2014]	@ movhi
2179:src/xeq.c     **** 				}
 415              		.loc 1 2179 6 is_stmt 1 view .LVU134
 416              	.LBE1331:
 417              		.loc 1 2187 1 is_stmt 0 view .LVU135
 418 0060 70BC     		pop	{r4, r5, r6}
 419              		.cfi_remember_state
 420              		.cfi_restore 6
 421              		.cfi_restore 5
 422              		.cfi_restore 4
 423              		.cfi_def_cfa_offset 0
 424 0062 7047     		bx	lr
 425              	.L38:
 426              		.cfi_restore_state
 427              	.LBB1332:
2183:src/xeq.c     **** 			}
 428              		.loc 1 2183 6 is_stmt 1 view .LVU136
2183:src/xeq.c     **** 			}
 429              		.loc 1 2183 12 is_stmt 0 view .LVU137
 430 0064 C0F30B00 		ubfx	r0, r0, #0, #12
 431              	.LVL36:
2183:src/xeq.c     **** 			}
 432              		.loc 1 2183 9 view .LVU138
 433 0068 0344     		add	r3, r3, r0
 434              	.LVL37:
2183:src/xeq.c     **** 			}
 435              		.loc 1 2183 9 view .LVU139
 436 006a E8E7     		b	.L31
 437              	.L40:
 438              		.align	2
 439              	.L39:
 440 006c 00000000 		.word	main_ram
 441 0070 00000000 		.word	RetStk
 442              	.LBE1332:
 443              		.cfi_endproc
 444              	.LFE150:
 446              		.section	.text.flag_word,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu fpv4-sp-d16
 454              	flag_word:
 455              	.LVL38:
 456              	.LFB198:
2188:src/xeq.c     **** 
2189:src/xeq.c     **** 
2190:src/xeq.c     **** /* Search from the given position for the specified numeric label.
2191:src/xeq.c     ****  */
2192:src/xeq.c     **** unsigned int find_opcode_from(unsigned int pc, const opcode l, const int flags) {
ARM GAS  /tmp/ccBFDvgN.s 			page 49


2193:src/xeq.c     **** 	unsigned short int top;
2194:src/xeq.c     **** 	int count;
2195:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
2196:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
2197:src/xeq.c     **** 
2198:src/xeq.c     **** 	count = 1 + find_section_bounds(pc, endp, &top);
2199:src/xeq.c     **** 	count -= top;
2200:src/xeq.c     **** 	while (count--) {
2201:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
2202:src/xeq.c     **** 		// If we don't find the label, we may search a little too far if many double word
2203:src/xeq.c     **** 		// instructions are in the code, but this doesn't do any harm.
2204:src/xeq.c     **** 		if (getprog(pc) == l)
2205:src/xeq.c     **** 			return pc;
2206:src/xeq.c     **** 		pc = do_inc(pc, endp);
2207:src/xeq.c     **** 	}
2208:src/xeq.c     **** 	if (errp)
2209:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2210:src/xeq.c     **** 	return 0;
2211:src/xeq.c     **** }
2212:src/xeq.c     **** 
2213:src/xeq.c     **** 
2214:src/xeq.c     **** unsigned int find_label_from(unsigned int pc, unsigned int arg, int flags) {
2215:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
2216:src/xeq.c     **** }
2217:src/xeq.c     **** 
2218:src/xeq.c     **** 
2219:src/xeq.c     **** 
2220:src/xeq.c     **** /* Handle a GTO/GSB instruction
2221:src/xeq.c     ****  */
2222:src/xeq.c     **** static void gsbgto(unsigned int pc, int gsb, unsigned int oldpc) {
2223:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
2224:src/xeq.c     **** 	raw_set_pc(pc);
2225:src/xeq.c     **** 	if (gsb) {
2226:src/xeq.c     **** 		if (!Running && !XromRunning) {
2227:src/xeq.c     **** 			// XEQ or hot key from keyboard
2228:src/xeq.c     **** 			clrretstk();
2229:src/xeq.c     **** 			set_running_on();
2230:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
2231:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
2232:src/xeq.c     **** 				oldpc = pc;
2233:src/xeq.c     **** 		}
2234:src/xeq.c     **** 		if (-RetStkPtr >= (XromFlags.xIN ? XROM_RET_STACK_SIZE : RetStkSize)) {
2235:src/xeq.c     **** 			// Stack is full
2236:src/xeq.c     **** 			report_err(ERR_RAM_FULL);
2237:src/xeq.c     **** 			// clrretstk();
2238:src/xeq.c     **** 		}
2239:src/xeq.c     **** 		else {
2240:src/xeq.c     **** 			// Push PC on return stack
2241:src/xeq.c     **** 			RetStk[--RetStkPtr] = oldpc;
2242:src/xeq.c     **** 		}
2243:src/xeq.c     **** 	}
2244:src/xeq.c     **** }
2245:src/xeq.c     **** 
2246:src/xeq.c     **** // Handle a RTN
2247:src/xeq.c     **** static void do_rtn(int plus1) {
2248:src/xeq.c     **** 	unsigned short pc;
2249:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 50


2250:src/xeq.c     **** 	if (RetStkPtr >= 0) {
2251:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
2252:src/xeq.c     **** 		clrretstk();
2253:src/xeq.c     **** 		raw_set_pc(ProgBegin);
2254:src/xeq.c     **** 	}
2255:src/xeq.c     **** 	else {
2256:src/xeq.c     **** 		// Normal RTN within program
2257:src/xeq.c     **** 		// Pop any LOCALS off the stack, increment sp
2258:src/xeq.c     **** 		retstk_up();
2259:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
2260:src/xeq.c     **** 		raw_set_pc(pc);
2261:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
2262:src/xeq.c     **** 		if (plus1 && getprog(pc) != (OP_NIL | OP_POPUSR))
2263:src/xeq.c     **** 			if (incpc())
2264:src/xeq.c     **** 				decpc();
2265:src/xeq.c     **** 	}
2266:src/xeq.c     **** 	if (RetStkPtr == 0) {
2267:src/xeq.c     **** 		// RTN with empty stack stops
2268:src/xeq.c     **** 		set_running_off();
2269:src/xeq.c     **** 	}
2270:src/xeq.c     **** }
2271:src/xeq.c     **** 
2272:src/xeq.c     **** // RTN and RTN+1
2273:src/xeq.c     **** void op_rtn(enum nilop op) {
2274:src/xeq.c     **** 	if (! Running && ! XromRunning) {
2275:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
2276:src/xeq.c     **** 		clrretstk_pc();
2277:src/xeq.c     **** 	}
2278:src/xeq.c     **** 	else
2279:src/xeq.c     **** 		do_rtn(op == OP_RTNp1 ? 1 : 0);
2280:src/xeq.c     **** }
2281:src/xeq.c     **** 
2282:src/xeq.c     **** 
2283:src/xeq.c     **** // Called by XEQ, GTO and CAT browser
2284:src/xeq.c     **** void cmdgtocommon(int gsb, unsigned int pc) {
2285:src/xeq.c     **** 	if (pc == 0)
2286:src/xeq.c     **** 		set_running_off();
2287:src/xeq.c     **** 	else
2288:src/xeq.c     **** 		gsbgto(pc, gsb, state_pc());
2289:src/xeq.c     **** }
2290:src/xeq.c     **** 
2291:src/xeq.c     **** 
2292:src/xeq.c     **** // Common part of XEQUSR and XEQ'...' from XROM
2293:src/xeq.c     **** // Command pushes 4 values on stack, needs to be followed by POPUSR
2294:src/xeq.c     **** static void usergsb_common(unsigned short int target) {
2295:src/xeq.c     **** 	const unsigned int pc = state_pc();
2296:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
2297:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
2298:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
2299:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
2300:src/xeq.c     **** 
2301:src/xeq.c     **** 	XromUserPc = 0;			     // Hide information irrelevant to user code
2302:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
2303:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
2304:src/xeq.c     **** 	if (! Running)
2305:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
2306:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
ARM GAS  /tmp/ccBFDvgN.s 			page 51


2307:src/xeq.c     **** }
2308:src/xeq.c     **** 
2309:src/xeq.c     **** 
2310:src/xeq.c     **** // XEQUSR
2311:src/xeq.c     **** // Command fills the stack and calls the user's code.
2312:src/xeq.c     **** // Needs to be followed by POPUSR
2313:src/xeq.c     **** void do_usergsb(enum nilop op) {
2314:src/xeq.c     **** 	usergsb_common(XromUserPc);
2315:src/xeq.c     ****         fill(OP_FILL);
2316:src/xeq.c     **** }
2317:src/xeq.c     **** 
2318:src/xeq.c     **** 
2319:src/xeq.c     **** // POPUSR
2320:src/xeq.c     **** void op_popusr(enum nilop op) {
2321:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
2322:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
2323:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
2324:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
2325:src/xeq.c     **** }
2326:src/xeq.c     **** 
2327:src/xeq.c     **** /* Tests if the user program is at the top level */
2328:src/xeq.c     **** void isTop(enum nilop op) {
2329:src/xeq.c     **** 	int top = 0;
2330:src/xeq.c     **** 
2331:src/xeq.c     **** 	if (Running) {
2332:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
2333:src/xeq.c     **** 	}
2334:src/xeq.c     **** 	fin_tst(top);
2335:src/xeq.c     **** }
2336:src/xeq.c     **** 
2337:src/xeq.c     **** 
2338:src/xeq.c     **** // LBL?
2339:src/xeq.c     **** void cmdlblp(unsigned int arg, enum rarg op) {
2340:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
2341:src/xeq.c     **** }
2342:src/xeq.c     **** 
2343:src/xeq.c     **** 
2344:src/xeq.c     **** void cmdgto(unsigned int arg, enum rarg op) {
2345:src/xeq.c     **** 	unsigned int lbl;
2346:src/xeq.c     **** 	if (is_xrom())
2347:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
2348:src/xeq.c     **** 	else
2349:src/xeq.c     **** 		lbl = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
2350:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
2351:src/xeq.c     **** }
2352:src/xeq.c     **** 
2353:src/xeq.c     **** unsigned int findmultilbl(const opcode o, int flags) {
2354:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
2355:src/xeq.c     **** 	unsigned int lbl;
2356:src/xeq.c     **** 
2357:src/xeq.c     **** 	lbl = find_opcode_from(0, dest, 0);					// RAM
2358:src/xeq.c     **** 	if (lbl == 0)
2359:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
2360:src/xeq.c     **** 	if (lbl == 0)
2361:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
2362:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
2363:src/xeq.c     **** 		report_err(ERR_NO_LBL);
ARM GAS  /tmp/ccBFDvgN.s 			page 52


2364:src/xeq.c     **** 	return lbl;
2365:src/xeq.c     **** }
2366:src/xeq.c     **** 
2367:src/xeq.c     **** // LBL?'...'
2368:src/xeq.c     **** void cmdmultilblp(const opcode o, enum multiops mopr) {
2369:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
2370:src/xeq.c     **** }
2371:src/xeq.c     **** 
2372:src/xeq.c     **** void cmdmultigto(const opcode o, enum multiops mopr) {
2373:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
2374:src/xeq.c     **** 		// In XROM the command behaves differently!
2375:src/xeq.c     **** 		unsigned short int target = findmultilbl(o, 0);
2376:src/xeq.c     **** 		if (target != 0)
2377:src/xeq.c     **** 			usergsb_common(target); 
2378:src/xeq.c     **** 		else
2379:src/xeq.c     **** 			incpc();
2380:src/xeq.c     **** 	}
2381:src/xeq.c     **** 	else {
2382:src/xeq.c     **** 		cmdgtocommon(mopr != DBL_GTO, findmultilbl(o, FIND_OP_ERROR));
2383:src/xeq.c     **** 	}
2384:src/xeq.c     **** }
2385:src/xeq.c     **** 
2386:src/xeq.c     **** void multiumenu(const opcode o, enum multiops mopr) {
2387:src/xeq.c     ****   opcode op = (o & 0xFFFFF0FF) + ((DBL_LBL) << DBL_SHIFT); // change opcode to LBL
2388:src/xeq.c     ****   build_user_menu_from_program(op);
2389:src/xeq.c     ****   set_menu (M_User);
2390:src/xeq.c     ****   display_current_menu ();
2391:src/xeq.c     **** }
2392:src/xeq.c     **** 
2393:src/xeq.c     **** static void branchtoalpha(int is_gsb, char buf[]) {
2394:src/xeq.c     **** 	unsigned int op;
2395:src/xeq.c     **** 
2396:src/xeq.c     **** 	op = OP_DBL + (DBL_LBL << DBL_SHIFT);
2397:src/xeq.c     **** 	op |= buf[0] & 0xff;
2398:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
2399:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
2400:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
2401:src/xeq.c     **** }
2402:src/xeq.c     **** 
2403:src/xeq.c     **** void cmdalphagto(unsigned int arg, enum rarg op) {
2404:src/xeq.c     **** 	char buf[14];
2405:src/xeq.c     **** 
2406:src/xeq.c     **** 	xset(buf, '\0', sizeof(buf));
2407:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
2408:src/xeq.c     **** }
2409:src/xeq.c     **** 
2410:src/xeq.c     **** static void do_branchalpha(int is_gsb) {
2411:src/xeq.c     **** 	char buf[4];
2412:src/xeq.c     **** 
2413:src/xeq.c     **** 	xcopy(buf, Alpha, 3);
2414:src/xeq.c     **** 	buf[3] = '\0';
2415:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
2416:src/xeq.c     **** }
2417:src/xeq.c     **** 
2418:src/xeq.c     **** void op_gtoalpha(enum nilop op) {
2419:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
2420:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 53


2421:src/xeq.c     **** 
2422:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2423:src/xeq.c     **** int get_dispmode_digs(int *pdigs)
2424:src/xeq.c     **** {
2425:src/xeq.c     **** 	int dispmode = UState.dispmode;
2426:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
2427:src/xeq.c     **** 
2428:src/xeq.c     **** 	if (dispdigs >= 12) {
2429:src/xeq.c     **** 		dispdigs -= 12;
2430:src/xeq.c     **** 		dispmode += 4;
2431:src/xeq.c     **** 		if (dispmode >= 6) {
2432:src/xeq.c     **** 			dispmode -= 2;
2433:src/xeq.c     **** 			dispdigs += 4;
2434:src/xeq.c     **** 		}
2435:src/xeq.c     **** 	}
2436:src/xeq.c     **** 	*pdigs = dispdigs;
2437:src/xeq.c     **** 	return dispmode;
2438:src/xeq.c     **** }
2439:src/xeq.c     **** 
2440:src/xeq.c     **** void set_dispmode_digs(int dispmode, int dispdigs)
2441:src/xeq.c     **** {
2442:src/xeq.c     **** 	if (dispmode >= 4) {
2443:src/xeq.c     **** 		dispmode -= 4;
2444:src/xeq.c     **** 		dispdigs += 12;
2445:src/xeq.c     **** 		if (dispdigs >= 16) {
2446:src/xeq.c     **** 			dispdigs -= 4;
2447:src/xeq.c     **** 			dispmode += 2;
2448:src/xeq.c     **** 		}
2449:src/xeq.c     **** 	}
2450:src/xeq.c     **** 	UState.dispmode = dispmode;
2451:src/xeq.c     **** 	UState.dispdigs = dispdigs;
2452:src/xeq.c     **** }
2453:src/xeq.c     **** #endif
2454:src/xeq.c     **** 
2455:src/xeq.c     **** void cmddisp(unsigned int arg, enum rarg op) {
2456:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2457:src/xeq.c     **** 	int dispdigs;
2458:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
2459:src/xeq.c     **** #ifdef DM42
2460:src/xeq.c     **** 	switch (op) {
2461:src/xeq.c     **** 	case RARG_STD:
2462:src/xeq.c     **** 	  dispmode = MODE_STD;
2463:src/xeq.c     **** 	  break;
2464:src/xeq.c     **** 	case RARG_FIX:
2465:src/xeq.c     **** 	  dispmode = MODE_FIX;
2466:src/xeq.c     **** 	  break;
2467:src/xeq.c     **** 	case RARG_SCI:
2468:src/xeq.c     **** 	  dispmode = MODE_SCI;
2469:src/xeq.c     **** 	  break;
2470:src/xeq.c     **** 	case RARG_ENG:
2471:src/xeq.c     **** 	  dispmode = MODE_ENG;
2472:src/xeq.c     **** 	  break;
2473:src/xeq.c     **** 	case RARG_SIG:
2474:src/xeq.c     **** 	  dispmode = MODE_SIG;
2475:src/xeq.c     **** 	  break;
2476:src/xeq.c     **** 	case RARG_SIG0:
2477:src/xeq.c     **** 	  dispmode = MODE_SIG0;
ARM GAS  /tmp/ccBFDvgN.s 			page 54


2478:src/xeq.c     **** 	  break;
2479:src/xeq.c     **** 	default:;
2480:src/xeq.c     **** 	}
2481:src/xeq.c     **** 	if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2482:src/xeq.c     **** 	  report_err(ERR_RANGE);
2483:src/xeq.c     **** 	  return;
2484:src/xeq.c     **** 	}
2485:src/xeq.c     **** #else	
2486:src/xeq.c     **** 	if (op != RARG_DISP)
2487:src/xeq.c     **** 		dispmode = (op - RARG_STD) + MODE_STD;
2488:src/xeq.c     **** 	else if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2489:src/xeq.c     **** 		report_err(ERR_RANGE);
2490:src/xeq.c     **** 		return;
2491:src/xeq.c     **** 	}
2492:src/xeq.c     **** #endif
2493:src/xeq.c     **** 	set_dispmode_digs(dispmode, arg);
2494:src/xeq.c     **** #else
2495:src/xeq.c     **** 	UState.dispdigs = arg;
2496:src/xeq.c     **** 	if (op != RARG_DISP)
2497:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
2498:src/xeq.c     **** #endif
2499:src/xeq.c     **** 	op_float(OP_FLOAT);
2500:src/xeq.c     **** }
2501:src/xeq.c     **** 
2502:src/xeq.c     **** 
2503:src/xeq.c     **** /* Metric / Imperial conversion code */
2504:src/xeq.c     **** decNumber *convC2F(decNumber *r, const decNumber *x) {
2505:src/xeq.c     **** 	decNumber s;
2506:src/xeq.c     **** 
2507:src/xeq.c     **** 	dn_multiply(&s, x, &const_9on5);
2508:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
2509:src/xeq.c     **** }
2510:src/xeq.c     **** 
2511:src/xeq.c     **** decNumber *convF2C(decNumber *r, const decNumber *x) {
2512:src/xeq.c     **** 	decNumber s;
2513:src/xeq.c     **** 
2514:src/xeq.c     **** 	dn_subtract(&s, x, &const_32);
2515:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
2516:src/xeq.c     **** }
2517:src/xeq.c     **** 
2518:src/xeq.c     **** decNumber *convDB2AR(decNumber *r, const decNumber *x) {
2519:src/xeq.c     **** 	decNumber t;
2520:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
2521:src/xeq.c     **** 	return decNumberPow10(r, &t);
2522:src/xeq.c     **** }
2523:src/xeq.c     **** 
2524:src/xeq.c     **** decNumber *convAR2DB(decNumber *r, const decNumber *x) {
2525:src/xeq.c     **** 	decNumber t;
2526:src/xeq.c     **** 	dn_log10(&t, x);
2527:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
2528:src/xeq.c     **** }
2529:src/xeq.c     **** 
2530:src/xeq.c     **** decNumber *convDB2PR(decNumber *r, const decNumber *x) {
2531:src/xeq.c     **** 	decNumber t;
2532:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
2533:src/xeq.c     **** 	return decNumberPow10(r, &t);
2534:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 55


2535:src/xeq.c     **** 
2536:src/xeq.c     **** decNumber *convPR2DB(decNumber *r, const decNumber *x) {
2537:src/xeq.c     **** 	decNumber t;
2538:src/xeq.c     **** 	dn_log10(&t, x);
2539:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
2540:src/xeq.c     **** }
2541:src/xeq.c     **** 
2542:src/xeq.c     **** /* Scale conversions */
2543:src/xeq.c     **** void do_conv(decNumber *r, unsigned int arg, const decNumber *x) {
2544:src/xeq.c     **** 	decNumber m;
2545:src/xeq.c     **** 	const unsigned int conv = arg / 2;
2546:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
2547:src/xeq.c     **** 
2548:src/xeq.c     **** 	if (conv > NUM_CONSTS_CONV) {
2549:src/xeq.c     **** 		decNumberCopy(r, x);
2550:src/xeq.c     **** 		return;
2551:src/xeq.c     **** 	}
2552:src/xeq.c     **** 
2553:src/xeq.c     **** 	decimal64ToNumber(&CONSTANT_CONV(conv), &m);
2554:src/xeq.c     **** 
2555:src/xeq.c     **** 	if (dirn == 0)		// metric to imperial
2556:src/xeq.c     **** 		dn_divide(r, x, &m);
2557:src/xeq.c     **** 	else			// imperial to metric
2558:src/xeq.c     **** 		dn_multiply(r, x, &m);
2559:src/xeq.c     **** }
2560:src/xeq.c     **** 
2561:src/xeq.c     **** void cmdconv(unsigned int arg, enum rarg op) {
2562:src/xeq.c     **** 	decNumber x, r;
2563:src/xeq.c     **** 
2564:src/xeq.c     **** 	if (is_intmode())
2565:src/xeq.c     **** 		return;
2566:src/xeq.c     **** 
2567:src/xeq.c     **** 	getX(&x);
2568:src/xeq.c     **** 	do_conv(&r, arg, &x);
2569:src/xeq.c     **** 	setlastX();
2570:src/xeq.c     **** 	setX(&r);
2571:src/xeq.c     **** }
2572:src/xeq.c     **** 
2573:src/xeq.c     **** /*  Finish up a test -- if the value is non-zero, the test passes.
2574:src/xeq.c     ****  *  If it is zero, the test fails.
2575:src/xeq.c     ****  */
2576:src/xeq.c     **** void fin_tst(const int a) {
2577:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
2578:src/xeq.c     **** 	if (Running || XromRunning) {
2579:src/xeq.c     **** 		if (! a && incpc())
2580:src/xeq.c     **** 			decpc();
2581:src/xeq.c     **** 	}
2582:src/xeq.c     **** 	else
2583:src/xeq.c     **** 		DispMsg = msg;
2584:src/xeq.c     **** #ifdef INFRARED
2585:src/xeq.c     **** 	if (Tracing) {
2586:src/xeq.c     **** 		print_justified( msg );
2587:src/xeq.c     **** 		Tracing = 0;
2588:src/xeq.c     **** 	}
2589:src/xeq.c     **** #endif
2590:src/xeq.c     **** }
2591:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 56


2592:src/xeq.c     **** 
2593:src/xeq.c     **** /* Skip a number of instructions forwards */
2594:src/xeq.c     **** void cmdskip(unsigned int arg, enum rarg op) {
2595:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2596:src/xeq.c     **** 	unsigned int pc;
2597:src/xeq.c     **** 
2598:src/xeq.c     **** 	if (op == RARG_CASE) {
2599:src/xeq.c     **** 		int sgn;
2600:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
2601:src/xeq.c     **** 		if (sgn || arg >= 100) {
2602:src/xeq.c     **** 			report_err(ERR_RANGE);
2603:src/xeq.c     **** 			return;
2604:src/xeq.c     **** 		}
2605:src/xeq.c     **** 	}
2606:src/xeq.c     **** 
2607:src/xeq.c     **** 	if (isXROM(origpc))
2608:src/xeq.c     **** 		pc = origpc + arg;
2609:src/xeq.c     **** 	else {
2610:src/xeq.c     **** 		while (arg-- && !incpc());
2611:src/xeq.c     **** 		if (PcWrapped) {
2612:src/xeq.c     **** 			report_err(ERR_RANGE);
2613:src/xeq.c     **** 		}
2614:src/xeq.c     **** 		pc = state_pc();
2615:src/xeq.c     **** 	}
2616:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSF, origpc);
2617:src/xeq.c     **** }
2618:src/xeq.c     **** 
2619:src/xeq.c     **** /* Skip backwards */
2620:src/xeq.c     **** void cmdback(unsigned int arg, enum rarg op) {
2621:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2622:src/xeq.c     **** 	unsigned int pc = origpc;
2623:src/xeq.c     **** 
2624:src/xeq.c     **** 	if (isXROM(origpc))
2625:src/xeq.c     **** 		pc -= arg + 1;
2626:src/xeq.c     ****         else if (arg) {
2627:src/xeq.c     **** 		if ( Running ) {
2628:src/xeq.c     **** 			// Handles the case properly that we are on last step
2629:src/xeq.c     **** 			pc = do_dec(pc, 1);
2630:src/xeq.c     **** 		}
2631:src/xeq.c     **** 		do {
2632:src/xeq.c     **** 			pc = do_dec(pc, 1);
2633:src/xeq.c     **** 		} while (--arg && !PcWrapped);
2634:src/xeq.c     **** 		if (PcWrapped) {
2635:src/xeq.c     **** 			report_err(ERR_RANGE);
2636:src/xeq.c     **** 			return;
2637:src/xeq.c     **** 		}
2638:src/xeq.c     **** 	}
2639:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSB, origpc);
2640:src/xeq.c     **** }
2641:src/xeq.c     **** 
2642:src/xeq.c     **** 
2643:src/xeq.c     **** /* Append a character to the command line
2644:src/xeq.c     ****  */
2645:src/xeq.c     **** static void append_cmdline(char c) {
2646:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
2647:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
2648:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 57


2649:src/xeq.c     **** 
2650:src/xeq.c     **** /* Make sure exponent stays within allowed limits.
2651:src/xeq.c     ****  * was_digit_entered: 0: sign was changed
2652:src/xeq.c     ****  *                    1: new digit was entered
2653:src/xeq.c     ****  */
2654:src/xeq.c     **** static void exponent_adjusted(int was_digit_entered)
2655:src/xeq.c     **** {
2656:src/xeq.c     **** 	const int dbl = is_dblmode();
2657:src/xeq.c     **** 	int i;
2658:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
2659:src/xeq.c     **** 	const int neg_type_dc = get_reg_n_int_sgn(0, &i);
2660:src/xeq.c     **** #else
2661:src/xeq.c     **** 	const int neg_type_dc = SP_NEG_EXP_ENTRY_TYPE_DC;
2662:src/xeq.c     **** #endif
2663:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DC == -1
2664:src/xeq.c     **** 	const int neg_lim_dc = get_reg_n_int_sgn(1, &i);
2665:src/xeq.c     **** #else
2666:src/xeq.c     **** 	const int neg_lim_dc = SP_NEG_EXP_ENTRY_LIMIT_DC;
2667:src/xeq.c     **** #endif
2668:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DS == -1
2669:src/xeq.c     **** 	const int neg_type_ds = get_reg_n_int_sgn(2, &i);
2670:src/xeq.c     **** #else
2671:src/xeq.c     **** 	const int neg_type_ds = SP_NEG_EXP_ENTRY_TYPE_DS;
2672:src/xeq.c     **** #endif
2673:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DS == -1
2674:src/xeq.c     **** 	const int neg_lim_ds = get_reg_n_int_sgn(3, &i);
2675:src/xeq.c     **** #else
2676:src/xeq.c     **** 	const int neg_lim_ds = SP_NEG_EXP_ENTRY_LIMIT_DS;
2677:src/xeq.c     **** #endif
2678:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DC == -1
2679:src/xeq.c     **** 	const int pos_type_dc = get_reg_n_int_sgn(4, &i);
2680:src/xeq.c     **** #else
2681:src/xeq.c     **** 	const int pos_type_dc = SP_POS_EXP_ENTRY_TYPE_DC;
2682:src/xeq.c     **** #endif
2683:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DC == -1
2684:src/xeq.c     **** 	const int pos_lim_dc = get_reg_n_int_sgn(5, &i);
2685:src/xeq.c     **** #else
2686:src/xeq.c     **** 	const int pos_lim_dc = SP_POS_EXP_ENTRY_LIMIT_DC;
2687:src/xeq.c     **** #endif
2688:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DS == -1
2689:src/xeq.c     **** 	const int pos_type_ds = get_reg_n_int_sgn(6, &i);
2690:src/xeq.c     **** #else
2691:src/xeq.c     **** 	const int pos_type_ds = SP_POS_EXP_ENTRY_TYPE_DS;
2692:src/xeq.c     **** #endif
2693:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DS == -1
2694:src/xeq.c     **** 	const int pos_lim_ds = get_reg_n_int_sgn(7, &i);
2695:src/xeq.c     **** #else
2696:src/xeq.c     **** 	const int pos_lim_ds = SP_POS_EXP_ENTRY_LIMIT_DS;
2697:src/xeq.c     **** #endif
2698:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1
2699:src/xeq.c     **** 	const int exp_chs_dc = get_reg_n_int_sgn(8, &i);
2700:src/xeq.c     **** #else
2701:src/xeq.c     **** 	const int exp_chs_dc = SP_EXP_ENTRY_CHS_DC;
2702:src/xeq.c     **** #endif
2703:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DS == -1
2704:src/xeq.c     **** 	const int exp_chs_ds = get_reg_n_int_sgn(9, &i);
2705:src/xeq.c     **** #else
ARM GAS  /tmp/ccBFDvgN.s 			page 58


2706:src/xeq.c     **** 	const int exp_chs_ds = SP_EXP_ENTRY_CHS_DS;
2707:src/xeq.c     **** #endif
2708:src/xeq.c     **** 	const int dp_neg_type_dc = DP_NEG_EXP_ENTRY_TYPE_DC;
2709:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
2710:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
2711:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
2712:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
2713:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
2714:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
2715:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
2716:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
2717:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
2718:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2719:src/xeq.c     **** 	const int large_exp_entry = 1;
2720:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
2721:src/xeq.c     **** #else
2722:src/xeq.c     **** 	const int large_exp_entry = 0;
2723:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
2724:src/xeq.c     **** #endif
2725:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1 || SP_NEG_EXP_ENTRY_TYPE_DC != SP_NEG_EXP_ENTRY_TYPE_DS \
2726:src/xeq.c     ****     || SP_NEG_EXP_ENTRY_LIMIT_DC == -1 || SP_NEG_EXP_ENTRY_LIMIT_DC != SP_NEG_EXP_ENTRY_LIMIT_DS \
2727:src/xeq.c     ****     || SP_POS_EXP_ENTRY_TYPE_DC == -1 || SP_POS_EXP_ENTRY_TYPE_DC != SP_POS_EXP_ENTRY_TYPE_DS \
2728:src/xeq.c     ****     || SP_POS_EXP_ENTRY_LIMIT_DC == -1 || SP_POS_EXP_ENTRY_LIMIT_DC != SP_POS_EXP_ENTRY_LIMIT_DS \
2729:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC != SP_EXP_ENTRY_CHS_DS \
2730:src/xeq.c     ****     || SP_EXP_ENTRY_ZERO_DC == -1 || SP_EXP_ENTRY_ZERO_DC != SP_EXP_ENTRY_ZERO_DS \
2731:src/xeq.c     ****     || ((DP_NEG_EXP_ENTRY_TYPE_DC != DP_NEG_EXP_ENTRY_TYPE_DS \
2732:src/xeq.c     ****          || DP_NEG_EXP_ENTRY_LIMIT_DC != DP_NEG_EXP_ENTRY_LIMIT_DS \
2733:src/xeq.c     ****          || DP_POS_EXP_ENTRY_TYPE_DC != DP_POS_EXP_ENTRY_TYPE_DS \
2734:src/xeq.c     ****          || DP_POS_EXP_ENTRY_LIMIT_DC != DP_POS_EXP_ENTRY_LIMIT_DS \
2735:src/xeq.c     ****          || DP_EXP_ENTRY_CHS_DC != DP_EXP_ENTRY_CHS_DS \
2736:src/xeq.c     ****          || DP_EXP_ENTRY_ZERO_DC != DP_EXP_ENTRY_ZERO_DS) && defined(LARGE_EXPONENT_ENTRY))
2737:src/xeq.c     **** 	const int flag_D = get_user_flag(NAN_FLAG);
2738:src/xeq.c     **** #else
2739:src/xeq.c     **** 	const int flag_D = 0;
2740:src/xeq.c     **** #endif
2741:src/xeq.c     **** #ifndef SHIFT_EXPONENT
2742:src/xeq.c     **** 	int negative;
2743:src/xeq.c     **** #endif
2744:src/xeq.c     **** 	int emax;
2745:src/xeq.c     **** 
2746:src/xeq.c     **** 	/* Figure out the range limit for the exponent */
2747:src/xeq.c     **** 	if (!large_exp_entry && dbl) {
2748:src/xeq.c     **** 		emax = 999;
2749:src/xeq.c     **** 	}
2750:src/xeq.c     **** 	else {
2751:src/xeq.c     **** 		int emax_plus, emax_minus;
2752:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
2753:src/xeq.c     **** 
2754:src/xeq.c     **** 		if ((neg_type_dc >= 1 && neg_type_dc <= 9)
2755:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
2756:src/xeq.c     **** 		    || (pos_type_dc >= 1 && pos_type_dc <= 3)
2757:src/xeq.c     **** 		    || (pos_type_ds >= 1 && pos_type_ds <= 3)
2758:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2759:src/xeq.c     **** 		    || (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9)
2760:src/xeq.c     **** 		    || (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9)
2761:src/xeq.c     **** 		    || (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2762:src/xeq.c     **** 		    || (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
ARM GAS  /tmp/ccBFDvgN.s 			page 59


2763:src/xeq.c     **** #endif
2764:src/xeq.c     **** 		   ) {
2765:src/xeq.c     **** 			// Exponent limits have to be calculated at run-time
2766:src/xeq.c     **** 
2767:src/xeq.c     **** 			for (i = 0; i < CmdLineLength; ++i) {
2768:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2769:src/xeq.c     **** 				if (Cmdline[i] == 'E' || Cmdline[i] == 'D')
2770:src/xeq.c     **** #else
2771:src/xeq.c     **** 				if (Cmdline[i] == 'E')
2772:src/xeq.c     **** #endif
2773:src/xeq.c     **** 					break;
2774:src/xeq.c     **** 				else if (Cmdline[i] == '.')
2775:src/xeq.c     **** 					dot = i;
2776:src/xeq.c     **** 				else if (Cmdline[i] != '0') {
2777:src/xeq.c     **** 					last_nonzero = i - (dot != 0);
2778:src/xeq.c     **** 					if (first_nonzero < 0)
2779:src/xeq.c     **** 						first_nonzero = i - (dot != 0);
2780:src/xeq.c     **** 				}
2781:src/xeq.c     **** 			}
2782:src/xeq.c     **** 			if (first_nonzero < 0) { // Mantissa is zero.
2783:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DC == -1
2784:src/xeq.c     **** 				const int zero_dc = (get_user_flag(1) << 1) | get_user_flag(0);
2785:src/xeq.c     **** #else
2786:src/xeq.c     **** 				const int zero_dc = SP_EXP_ENTRY_ZERO_DC;
2787:src/xeq.c     **** #endif
2788:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DS == -1
2789:src/xeq.c     **** 				const int zero_ds = (get_user_flag(3) << 1) | get_user_flag(2);
2790:src/xeq.c     **** #else
2791:src/xeq.c     **** 				const int zero_ds = SP_EXP_ENTRY_ZERO_DS;
2792:src/xeq.c     **** #endif
2793:src/xeq.c     **** 				const int dp_zero_dc = DP_EXP_ENTRY_ZERO_DC;
2794:src/xeq.c     **** 				const int dp_zero_ds = DP_EXP_ENTRY_ZERO_DS;
2795:src/xeq.c     **** 
2796:src/xeq.c     **** 				if (large_exp_entry && dbl) {
2797:src/xeq.c     **** 					if ((dp_zero_dc == 1 && dp_zero_ds == 1)
2798:src/xeq.c     **** 					    || (dp_zero_dc == 1 && !flag_D)
2799:src/xeq.c     **** 					    || (dp_zero_ds == 1 && flag_D)) {
2800:src/xeq.c     **** 						// Double precision: Allow any exponent
2801:src/xeq.c     **** 						// within configured limits if any.
2802:src/xeq.c     **** 						emax_plus = emax_minus = 9999;
2803:src/xeq.c     **** 						goto check_limits;
2804:src/xeq.c     **** 					}
2805:src/xeq.c     **** 					else if ((dp_zero_dc == 2 && dp_zero_ds == 2)
2806:src/xeq.c     **** 					         || (dp_zero_dc == 2 && !flag_D)
2807:src/xeq.c     **** 					         || (dp_zero_ds == 2 && flag_D)) {
2808:src/xeq.c     **** 						// Double precision: Allow any exponent
2809:src/xeq.c     **** 						// even outside of configured limits.
2810:src/xeq.c     **** 						emax = 9999;
2811:src/xeq.c     **** 						goto do_not_check_limits;
2812:src/xeq.c     **** 					}
2813:src/xeq.c     **** 					goto zero_has_one_significant_digit;
2814:src/xeq.c     **** 				}
2815:src/xeq.c     **** 				if ((zero_dc == 1 && zero_ds == 1)
2816:src/xeq.c     **** 				    || (zero_dc == 1 && !flag_D)
2817:src/xeq.c     **** 				    || (zero_ds == 1 && flag_D)) {
2818:src/xeq.c     **** 					// Allow any exponent within configured limits if any.
2819:src/xeq.c     **** 					emax_plus = emax_minus = 999;
ARM GAS  /tmp/ccBFDvgN.s 			page 60


2820:src/xeq.c     **** 					goto check_limits;
2821:src/xeq.c     **** 				}
2822:src/xeq.c     **** 				else if ((zero_dc == 2 && zero_ds == 2)
2823:src/xeq.c     **** 				         || (zero_dc == 2 && !flag_D)
2824:src/xeq.c     **** 				         || (zero_ds == 2 && flag_D)) {
2825:src/xeq.c     **** 					// Allow any exponent even outside of configured limits.
2826:src/xeq.c     **** 					emax = 999;
2827:src/xeq.c     **** 					goto do_not_check_limits;
2828:src/xeq.c     **** 				}
2829:src/xeq.c     **** 				else {
2830:src/xeq.c     **** zero_has_one_significant_digit:
2831:src/xeq.c     **** 					// Treat zero as if it had one significant digit.
2832:src/xeq.c     **** 					first_nonzero = 0;
2833:src/xeq.c     **** 					dot = 1;
2834:src/xeq.c     **** 				}
2835:src/xeq.c     **** 			}
2836:src/xeq.c     **** 			else if (dot == 0)
2837:src/xeq.c     **** 				dot = i;
2838:src/xeq.c     **** 		}
2839:src/xeq.c     **** 
2840:src/xeq.c     **** 		if (large_exp_entry && dbl) {
2841:src/xeq.c     **** 			// Double precision mode
2842:src/xeq.c     **** 			if (flag_D && dp_neg_type_dc != dp_neg_type_ds) {
2843:src/xeq.c     **** 				if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 3) {
2844:src/xeq.c     **** 					// Don't allow denormal numbers
2845:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2846:src/xeq.c     **** 				}
2847:src/xeq.c     **** 				else if (dp_neg_type_ds >= 4 && dp_neg_type_ds <= 6) {
2848:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2849:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2850:src/xeq.c     **** 				}
2851:src/xeq.c     **** 				else if (dp_neg_type_ds >= 7 && dp_neg_type_ds <= 9) {
2852:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2853:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2854:src/xeq.c     **** 				}
2855:src/xeq.c     **** 				else {
2856:src/xeq.c     **** 					// Fixed limit
2857:src/xeq.c     **** 					emax_minus = dp_neg_lim_ds;
2858:src/xeq.c     **** 				}
2859:src/xeq.c     **** 			}
2860:src/xeq.c     **** 			else {
2861:src/xeq.c     **** 				if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 3) {
2862:src/xeq.c     **** 					// Don't allow denormal numbers
2863:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2864:src/xeq.c     **** 				}
2865:src/xeq.c     **** 				else if (dp_neg_type_dc >= 4 && dp_neg_type_dc <= 6) {
2866:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2867:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2868:src/xeq.c     **** 				}
2869:src/xeq.c     **** 				else if (dp_neg_type_dc >= 7 && dp_neg_type_dc <= 9) {
2870:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2871:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2872:src/xeq.c     **** 				}
2873:src/xeq.c     **** 				else {
2874:src/xeq.c     **** 					// Fixed limit
2875:src/xeq.c     **** 					emax_minus = dp_neg_lim_dc;
2876:src/xeq.c     **** 				}
ARM GAS  /tmp/ccBFDvgN.s 			page 61


2877:src/xeq.c     **** 			}
2878:src/xeq.c     **** 
2879:src/xeq.c     **** 			if (flag_D && dp_pos_type_dc != dp_pos_type_ds) {
2880:src/xeq.c     **** 				if (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2881:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2882:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2883:src/xeq.c     **** 				else
2884:src/xeq.c     **** 					// Fixed limit
2885:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2886:src/xeq.c     **** 			}
2887:src/xeq.c     **** 			else {
2888:src/xeq.c     **** 				if (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2889:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2890:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2891:src/xeq.c     **** 				else
2892:src/xeq.c     **** 					// Fixed limit
2893:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2894:src/xeq.c     **** 			}
2895:src/xeq.c     **** 
2896:src/xeq.c     **** 			goto check_limits;
2897:src/xeq.c     **** 		}
2898:src/xeq.c     **** 
2899:src/xeq.c     **** 		if (flag_D && neg_type_dc != neg_type_ds) {
2900:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
2901:src/xeq.c     **** 				// Don't allow denormal numbers
2902:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2903:src/xeq.c     **** 			}
2904:src/xeq.c     **** 			else if (neg_type_ds >= 4 && neg_type_ds <= 6) {
2905:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2906:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2907:src/xeq.c     **** 			}
2908:src/xeq.c     **** 			else if (neg_type_ds >= 7 && neg_type_ds <= 9) {
2909:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2910:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2911:src/xeq.c     **** 			}
2912:src/xeq.c     **** 			else {
2913:src/xeq.c     **** 				// Fixed limit
2914:src/xeq.c     **** 				emax_minus = neg_lim_ds;
2915:src/xeq.c     **** 			}
2916:src/xeq.c     **** 		}
2917:src/xeq.c     **** 		else {
2918:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 3) {
2919:src/xeq.c     **** 				// Don't allow denormal numbers
2920:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2921:src/xeq.c     **** 			}
2922:src/xeq.c     **** 			else if (neg_type_dc >= 4 && neg_type_dc <= 6) {
2923:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2924:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2925:src/xeq.c     **** 			}
2926:src/xeq.c     **** 			else if (neg_type_dc >= 7 && neg_type_dc <= 9) {
2927:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2928:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2929:src/xeq.c     **** 			}
2930:src/xeq.c     **** 			else {
2931:src/xeq.c     **** 				// Fixed limit
2932:src/xeq.c     **** 				emax_minus = neg_lim_dc;
2933:src/xeq.c     **** 			}
ARM GAS  /tmp/ccBFDvgN.s 			page 62


2934:src/xeq.c     **** 		}
2935:src/xeq.c     **** 
2936:src/xeq.c     **** 		if (flag_D && pos_type_dc != pos_type_ds) {
2937:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
2938:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2939:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2940:src/xeq.c     **** 			else
2941:src/xeq.c     **** 				// Fixed limit
2942:src/xeq.c     **** 				emax_plus = pos_lim_ds;
2943:src/xeq.c     **** 		}
2944:src/xeq.c     **** 		else {
2945:src/xeq.c     **** 			if (pos_type_dc >= 1 && pos_type_dc <= 3)
2946:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2947:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2948:src/xeq.c     **** 			else
2949:src/xeq.c     **** 				// Fixed limit
2950:src/xeq.c     **** 				emax_plus = pos_lim_dc;
2951:src/xeq.c     **** 		}
2952:src/xeq.c     **** 
2953:src/xeq.c     **** check_limits:
2954:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2955:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
2956:src/xeq.c     **** 		    && (dp_neg_type_ds != neg_type_ds || dp_neg_lim_ds != neg_lim_ds)) {
2957:src/xeq.c     **** 			if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9) {
2958:src/xeq.c     **** 				if (dp_neg_type_ds % 3 == 2) { // low limit
2959:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_ds)
2960:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2961:src/xeq.c     **** 				}
2962:src/xeq.c     **** 				else if (dp_neg_type_ds % 3 == 0) { // high limit
2963:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_ds)
2964:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2965:src/xeq.c     **** 				}
2966:src/xeq.c     **** 			}
2967:src/xeq.c     **** 			if (dp_neg_lim_ds < 0 && emax_minus < 0)
2968:src/xeq.c     **** 				emax_minus = 0;
2969:src/xeq.c     **** 		}
2970:src/xeq.c     **** 		else if (large_exp_entry && dbl
2971:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
2972:src/xeq.c     **** 		                         && dp_neg_lim_dc == dp_neg_lim_ds))
2973:src/xeq.c     **** 		         && (dp_neg_type_dc != neg_type_dc || dp_neg_lim_dc != neg_lim_dc)) {
2974:src/xeq.c     **** 			if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9) {
2975:src/xeq.c     **** 				if (dp_neg_type_dc % 3 == 2) { // low limit
2976:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_dc)
2977:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2978:src/xeq.c     **** 				}
2979:src/xeq.c     **** 				else if (dp_neg_type_dc % 3 == 0) { // high limit
2980:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_dc)
2981:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2982:src/xeq.c     **** 				}
2983:src/xeq.c     **** 			}
2984:src/xeq.c     **** 			if (dp_neg_lim_dc < 0 && emax_minus < 0)
2985:src/xeq.c     **** 				emax_minus = 0;
2986:src/xeq.c     **** 		}
2987:src/xeq.c     **** 		else if (flag_D && (neg_type_dc != neg_type_ds || neg_lim_dc != neg_lim_ds)) {
2988:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
2989:src/xeq.c     **** 				if (neg_type_ds % 3 == 2) { // low limit
2990:src/xeq.c     **** 					if (emax_minus > neg_lim_ds)
ARM GAS  /tmp/ccBFDvgN.s 			page 63


2991:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2992:src/xeq.c     **** 				}
2993:src/xeq.c     **** 				else if (neg_type_ds % 3 == 0) { // high limit
2994:src/xeq.c     **** 					if (emax_minus < neg_lim_ds)
2995:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2996:src/xeq.c     **** 				}
2997:src/xeq.c     **** 			}
2998:src/xeq.c     **** 			if (neg_lim_ds < 0 && emax_minus < 0)
2999:src/xeq.c     **** 				emax_minus = 0;
3000:src/xeq.c     **** 		}
3001:src/xeq.c     **** 		else {
3002:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 9) {
3003:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
3004:src/xeq.c     **** 					if (emax_minus > neg_lim_dc)
3005:src/xeq.c     **** 						emax_minus = neg_lim_dc;
3006:src/xeq.c     **** 				}
3007:src/xeq.c     **** 				else if (neg_type_dc % 3 == 0) { // high limit
3008:src/xeq.c     **** 					if (emax_minus < neg_lim_dc)
3009:src/xeq.c     **** 						emax_minus = neg_lim_dc;
3010:src/xeq.c     **** 				}
3011:src/xeq.c     **** 			}
3012:src/xeq.c     **** 			if (neg_lim_dc < 0 && emax_minus < 0)
3013:src/xeq.c     **** 				emax_minus = 0;
3014:src/xeq.c     **** 		}
3015:src/xeq.c     **** 
3016:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
3017:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
3018:src/xeq.c     **** 		    && (dp_pos_type_ds != pos_type_ds || dp_pos_lim_ds != pos_lim_ds)) {
3019:src/xeq.c     **** 			if (dp_pos_type_ds == 2) { // low limit
3020:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_ds)
3021:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
3022:src/xeq.c     **** 			}
3023:src/xeq.c     **** 			else if (dp_pos_type_ds == 3) { // high limit
3024:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_ds)
3025:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
3026:src/xeq.c     **** 			}
3027:src/xeq.c     **** 			if (dp_pos_lim_ds < 0 && emax_plus < 0)
3028:src/xeq.c     **** 				emax_plus = 0;
3029:src/xeq.c     **** 		}
3030:src/xeq.c     **** 		else if (large_exp_entry && dbl
3031:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
3032:src/xeq.c     **** 		                         && dp_pos_lim_dc == dp_pos_lim_ds))
3033:src/xeq.c     **** 		         && (dp_pos_type_dc != pos_type_dc || dp_pos_lim_dc != pos_lim_dc)) {
3034:src/xeq.c     **** 			if (dp_pos_type_dc == 2) { // low limit
3035:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_dc)
3036:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3037:src/xeq.c     **** 			}
3038:src/xeq.c     **** 			else if (dp_pos_type_dc == 3) { // high limit
3039:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_dc)
3040:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3041:src/xeq.c     **** 			}
3042:src/xeq.c     **** 			if (dp_pos_lim_dc < 0 && emax_plus < 0)
3043:src/xeq.c     **** 				emax_plus = 0;
3044:src/xeq.c     **** 		}
3045:src/xeq.c     **** 		else if (flag_D && (pos_type_dc != pos_type_ds || pos_lim_dc != pos_lim_ds)) {
3046:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
3047:src/xeq.c     **** 				if (emax_plus < pos_lim_ds)
ARM GAS  /tmp/ccBFDvgN.s 			page 64


3048:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3049:src/xeq.c     **** 			}
3050:src/xeq.c     **** 			else if (pos_type_ds == 3) { // high limit
3051:src/xeq.c     **** 				if (emax_plus > pos_lim_ds)
3052:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3053:src/xeq.c     **** 			}
3054:src/xeq.c     **** 			if (pos_lim_ds < 0 && emax_plus < 0)
3055:src/xeq.c     **** 				emax_plus = 0;
3056:src/xeq.c     **** 		}
3057:src/xeq.c     **** 		else {
3058:src/xeq.c     **** 			if (pos_type_dc == 2) { // low limit
3059:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
3060:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3061:src/xeq.c     **** 			}
3062:src/xeq.c     **** 			else if (pos_type_dc == 3) { // high limit
3063:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
3064:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3065:src/xeq.c     **** 			}
3066:src/xeq.c     **** 			if (pos_lim_dc < 0 && emax_plus < 0)
3067:src/xeq.c     **** 				emax_plus = 0;
3068:src/xeq.c     **** 		}
3069:src/xeq.c     **** 
3070:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
3071:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
3072:src/xeq.c     **** 		    && (dp_exp_chs_ds != exp_chs_ds)) {
3073:src/xeq.c     **** 			if (dp_exp_chs_ds == 0) {
3074:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3075:src/xeq.c     **** 				if (emax_minus < emax_plus)
3076:src/xeq.c     **** 					emax = emax_minus;
3077:src/xeq.c     **** 				else
3078:src/xeq.c     **** 					emax = emax_plus;
3079:src/xeq.c     **** 			}
3080:src/xeq.c     **** 			else if (dp_exp_chs_ds == 3) {
3081:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3082:src/xeq.c     **** 				if (emax_minus > emax_plus)
3083:src/xeq.c     **** 					emax = emax_minus;
3084:src/xeq.c     **** 				else
3085:src/xeq.c     **** 					emax = emax_plus;
3086:src/xeq.c     **** 			}
3087:src/xeq.c     **** 			else {
3088:src/xeq.c     **** 				if (dp_exp_chs_ds == 2 && !was_digit_entered)
3089:src/xeq.c     **** 					return;
3090:src/xeq.c     **** 				if (*p == 'D')
3091:src/xeq.c     **** 					emax = emax_minus;
3092:src/xeq.c     **** 				else
3093:src/xeq.c     **** 					emax = emax_plus;
3094:src/xeq.c     **** 			}
3095:src/xeq.c     **** 		}
3096:src/xeq.c     **** 		else if (large_exp_entry && dbl
3097:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
3098:src/xeq.c     **** 		         && (dp_exp_chs_dc != exp_chs_dc)) {
3099:src/xeq.c     **** 			if (dp_exp_chs_dc == 0) {
3100:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3101:src/xeq.c     **** 				if (emax_minus < emax_plus)
3102:src/xeq.c     **** 					emax = emax_minus;
3103:src/xeq.c     **** 				else
3104:src/xeq.c     **** 					emax = emax_plus;
ARM GAS  /tmp/ccBFDvgN.s 			page 65


3105:src/xeq.c     **** 			}
3106:src/xeq.c     **** 			else if (dp_exp_chs_dc == 3) {
3107:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3108:src/xeq.c     **** 				if (emax_minus > emax_plus)
3109:src/xeq.c     **** 					emax = emax_minus;
3110:src/xeq.c     **** 				else
3111:src/xeq.c     **** 					emax = emax_plus;
3112:src/xeq.c     **** 			}
3113:src/xeq.c     **** 			else {
3114:src/xeq.c     **** 				if (dp_exp_chs_dc == 2 && !was_digit_entered)
3115:src/xeq.c     **** 					return;
3116:src/xeq.c     **** 				if (*p == 'D')
3117:src/xeq.c     **** 					emax = emax_minus;
3118:src/xeq.c     **** 				else
3119:src/xeq.c     **** 					emax = emax_plus;
3120:src/xeq.c     **** 			}
3121:src/xeq.c     **** 		}
3122:src/xeq.c     **** 		else if (flag_D && exp_chs_dc != exp_chs_ds) {
3123:src/xeq.c     **** 			if (exp_chs_ds == 0) {
3124:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3125:src/xeq.c     **** 				if (emax_minus < emax_plus)
3126:src/xeq.c     **** 					emax = emax_minus;
3127:src/xeq.c     **** 				else
3128:src/xeq.c     **** 					emax = emax_plus;
3129:src/xeq.c     **** 			}
3130:src/xeq.c     **** 			else if (exp_chs_ds == 3) {
3131:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3132:src/xeq.c     **** 				if (emax_minus > emax_plus)
3133:src/xeq.c     **** 					emax = emax_minus;
3134:src/xeq.c     **** 				else
3135:src/xeq.c     **** 					emax = emax_plus;
3136:src/xeq.c     **** 			}
3137:src/xeq.c     **** 			else {
3138:src/xeq.c     **** 				if (exp_chs_ds == 2 && !was_digit_entered)
3139:src/xeq.c     **** 					return;
3140:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3141:src/xeq.c     **** 				if (*p == 'D')
3142:src/xeq.c     **** #else
3143:src/xeq.c     **** 				if (*p == '-')
3144:src/xeq.c     **** #endif
3145:src/xeq.c     **** 					emax = emax_minus;
3146:src/xeq.c     **** 				else
3147:src/xeq.c     **** 					emax = emax_plus;
3148:src/xeq.c     **** 			}
3149:src/xeq.c     **** 		}
3150:src/xeq.c     **** 		else {
3151:src/xeq.c     **** 			if (exp_chs_dc == 0) {
3152:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3153:src/xeq.c     **** 				if (emax_minus < emax_plus)
3154:src/xeq.c     **** 					emax = emax_minus;
3155:src/xeq.c     **** 				else
3156:src/xeq.c     **** 					emax = emax_plus;
3157:src/xeq.c     **** 			}
3158:src/xeq.c     **** 			else if (exp_chs_dc == 3) {
3159:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3160:src/xeq.c     **** 				if (emax_minus > emax_plus)
3161:src/xeq.c     **** 					emax = emax_minus;
ARM GAS  /tmp/ccBFDvgN.s 			page 66


3162:src/xeq.c     **** 				else
3163:src/xeq.c     **** 					emax = emax_plus;
3164:src/xeq.c     **** 			}
3165:src/xeq.c     **** 			else {
3166:src/xeq.c     **** 				if (exp_chs_dc == 2 && !was_digit_entered)
3167:src/xeq.c     **** 					return;
3168:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3169:src/xeq.c     **** 				if (*p == 'D')
3170:src/xeq.c     **** #else
3171:src/xeq.c     **** 				if (*p == '-')
3172:src/xeq.c     **** #endif
3173:src/xeq.c     **** 					emax = emax_minus;
3174:src/xeq.c     **** 				else
3175:src/xeq.c     **** 					emax = emax_plus;
3176:src/xeq.c     **** 			}
3177:src/xeq.c     **** 		}
3178:src/xeq.c     **** 	}
3179:src/xeq.c     **** 
3180:src/xeq.c     **** do_not_check_limits:
3181:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3182:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3183:src/xeq.c     **** 	p++;
3184:src/xeq.c     **** #  else
3185:src/xeq.c     **** 	if (*p == '-')
3186:src/xeq.c     **** 		p++;
3187:src/xeq.c     **** #  endif
3188:src/xeq.c     **** 	/* Check if the current exponent exceeds the range.
3189:src/xeq.c     **** 	 * If so, shift it back until it doesn't.
3190:src/xeq.c     **** 	 * Also remove leading zeros.
3191:src/xeq.c     **** 	 */
3192:src/xeq.c     **** 	while (s_to_i(p) > emax || *p == '0') {
3193:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
3194:src/xeq.c     **** 			p[i] = p[i + 1];
3195:src/xeq.c     **** 		CmdLineLength--;
3196:src/xeq.c     **** 	}
3197:src/xeq.c     **** #else
3198:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3199:src/xeq.c     **** 	negative = (*p == 'D');
3200:src/xeq.c     **** 	p++;
3201:src/xeq.c     **** #  else
3202:src/xeq.c     **** 	if (*p == '-') {
3203:src/xeq.c     **** 		p++;
3204:src/xeq.c     **** 		negative = 1;
3205:src/xeq.c     **** 	}
3206:src/xeq.c     **** 	else negative = 0;
3207:src/xeq.c     **** #  endif
3208:src/xeq.c     **** 	// Display a warning if the exponent is out of range.
3209:src/xeq.c     **** 	if ((i = s_to_i(p)) > emax) {
3210:src/xeq.c     **** 		if (was_digit_entered) {
3211:src/xeq.c     **** 			CmdLineLength--;
3212:src/xeq.c     **** 			if (large_exp_entry && dbl ? i > 9999 : i > 999) {
3213:src/xeq.c     **** 				report_warn(ERR_TOO_LONG);
3214:src/xeq.c     **** 				return;
3215:src/xeq.c     **** 			}
3216:src/xeq.c     **** 		}
3217:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3218:src/xeq.c     **** 		else if (('D' | 1) == 'E')
ARM GAS  /tmp/ccBFDvgN.s 			page 67


3219:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3220:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3221:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3222:src/xeq.c     **** 		else
3223:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3224:src/xeq.c     **** #  else
3225:src/xeq.c     **** 		else if (negative) {
3226:src/xeq.c     **** 			scopy(p - 1, p);
3227:src/xeq.c     **** 			CmdLineLength--;
3228:src/xeq.c     **** 		}
3229:src/xeq.c     **** 		else {
3230:src/xeq.c     **** 			xcopy(p + 1, p, CMDLINELEN - 1 - CmdLineEex);
3231:src/xeq.c     **** 			*p = '-';
3232:src/xeq.c     **** 			CmdLineLength++;
3233:src/xeq.c     **** 		}
3234:src/xeq.c     **** #  endif
3235:src/xeq.c     **** 		if (negative)
3236:src/xeq.c     **** 			report_warn(ERR_TOO_SMALL);
3237:src/xeq.c     **** 		else
3238:src/xeq.c     **** 			report_warn(ERR_TOO_BIG);
3239:src/xeq.c     **** 	}
3240:src/xeq.c     **** #endif
3241:src/xeq.c     **** }
3242:src/xeq.c     **** 
3243:src/xeq.c     **** /* We've encountered a CHS while entering the command line.
3244:src/xeq.c     ****  */
3245:src/xeq.c     **** static void cmdlinechs(void) {
3246:src/xeq.c     **** 	if (CmdLineEex) {
3247:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3248:src/xeq.c     **** 		// 'D' instead of 'E' indicates a negative exponent.
3249:src/xeq.c     **** 		// Four-digit exponents wouldn't fit into Cmdline if we used 'E-'.
3250:src/xeq.c     **** 		if (('D' | 1) == 'E')
3251:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3252:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3253:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3254:src/xeq.c     **** 		else
3255:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3256:src/xeq.c     **** #else
3257:src/xeq.c     **** 		const unsigned int pos = CmdLineEex + 1;
3258:src/xeq.c     **** 		if (CmdLineLength <= pos) {
3259:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
3260:src/xeq.c     **** 				append_cmdline('-');
3261:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
3262:src/xeq.c     **** 			if (CmdLineLength != pos)
3263:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
3264:src/xeq.c     **** 			CmdLineLength--;
3265:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3266:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
3267:src/xeq.c     **** 			Cmdline[pos] = '-';
3268:src/xeq.c     **** 			CmdLineLength++;
3269:src/xeq.c     **** 		}
3270:src/xeq.c     **** #endif
3271:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC == 1 \
3272:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DS == -1 || SP_EXP_ENTRY_CHS_DS == 1 \
3273:src/xeq.c     ****     || ((DP_EXP_ENTRY_CHS_DC == 1 || DP_EXP_ENTRY_CHS_DS == 1) && defined(LARGE_EXPONENT_ENTRY))
3274:src/xeq.c     **** 		exponent_adjusted(0);
3275:src/xeq.c     **** #endif
ARM GAS  /tmp/ccBFDvgN.s 			page 68


3276:src/xeq.c     **** 	} else {
3277:src/xeq.c     **** 		if (Cmdline[0] == '-') {
3278:src/xeq.c     **** 			if (CmdLineLength > 1)
3279:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
3280:src/xeq.c     **** 			CmdLineLength--;
3281:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3282:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
3283:src/xeq.c     **** 			Cmdline[0] = '-';
3284:src/xeq.c     **** 			CmdLineLength++;
3285:src/xeq.c     **** 		}
3286:src/xeq.c     **** 	}
3287:src/xeq.c     **** }
3288:src/xeq.c     **** 
3289:src/xeq.c     **** /* Execute a tests command
3290:src/xeq.c     ****  */
3291:src/xeq.c     **** static void do_tst(int cmp, const enum tst_op op) {
3292:src/xeq.c     **** 	int a = 0;
3293:src/xeq.c     **** 	int iszero, isneg;
3294:src/xeq.c     **** 
3295:src/xeq.c     **** 	process_cmdline_set_lift();
3296:src/xeq.c     **** 
3297:src/xeq.c     **** 	if (is_intmode()) {
3298:src/xeq.c     **** 		unsigned long long int xv, yv;
3299:src/xeq.c     **** 		int xs, ys;
3300:src/xeq.c     **** 
3301:src/xeq.c     **** 		xv = extract_value(getX_int(), &xs);
3302:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
3303:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
3304:src/xeq.c     **** 			ys = 0;
3305:src/xeq.c     **** 		} else
3306:src/xeq.c     **** 			yv = extract_value(get_reg_n_int(cmp), &ys);
3307:src/xeq.c     **** 
3308:src/xeq.c     **** 		if (xv == 0 && yv == 0)
3309:src/xeq.c     **** 			iszero = 1;
3310:src/xeq.c     **** 		else
3311:src/xeq.c     **** 			iszero = (xv == yv) && (xs == ys);
3312:src/xeq.c     **** 
3313:src/xeq.c     **** 		if (xs == ys) {		// same sign
3314:src/xeq.c     **** 			if (xs)		// both negative
3315:src/xeq.c     **** 				isneg = xv > yv;
3316:src/xeq.c     **** 			else		// both positive
3317:src/xeq.c     **** 				isneg = xv < yv;
3318:src/xeq.c     **** 		} else
3319:src/xeq.c     **** 			isneg = xs;	// opposite signs
3320:src/xeq.c     **** 	} else {
3321:src/xeq.c     **** 		decNumber t, x, r;
3322:src/xeq.c     **** 
3323:src/xeq.c     **** 		getX(&x);
3324:src/xeq.c     **** 		if (decNumberIsNaN(&x))
3325:src/xeq.c     **** 			goto flse;
3326:src/xeq.c     **** 
3327:src/xeq.c     **** 		getRegister(&t, cmp);
3328:src/xeq.c     **** 		if (decNumberIsNaN(&t))
3329:src/xeq.c     **** 			goto flse;
3330:src/xeq.c     **** 
3331:src/xeq.c     **** 		if (op == TST_APX) {
3332:src/xeq.c     **** 			decNumberRnd(&x, &x);
ARM GAS  /tmp/ccBFDvgN.s 			page 69


3333:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
3334:src/xeq.c     **** 				decNumberRnd(&t, &t);
3335:src/xeq.c     **** 		}
3336:src/xeq.c     **** 		dn_compare(&r, &x, &t);
3337:src/xeq.c     **** 		iszero = dn_eq0(&r);
3338:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
3339:src/xeq.c     **** 	}
3340:src/xeq.c     **** 
3341:src/xeq.c     **** 	switch (op) {
3342:src/xeq.c     **** 	case TST_APX:
3343:src/xeq.c     **** 	case TST_EQ:	a = iszero;		break;
3344:src/xeq.c     **** 	case TST_NE:	a = !iszero;		break;
3345:src/xeq.c     **** 	case TST_LT:	a = isneg && !iszero;	break;
3346:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
3347:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
3348:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
3349:src/xeq.c     **** 	default:	a = 0;			break;
3350:src/xeq.c     **** 	}
3351:src/xeq.c     **** 
3352:src/xeq.c     **** flse:	fin_tst(a);
3353:src/xeq.c     **** }
3354:src/xeq.c     **** 
3355:src/xeq.c     **** void check_zero(enum nilop op) {
3356:src/xeq.c     **** 	int neg;
3357:src/xeq.c     **** 	int zero;
3358:src/xeq.c     **** 
3359:src/xeq.c     **** 	if (is_intmode()) {
3360:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
3361:src/xeq.c     **** 		zero = (xv == 0);
3362:src/xeq.c     **** 	} else {
3363:src/xeq.c     **** 		decNumber x;
3364:src/xeq.c     **** 		getX(&x);
3365:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
3366:src/xeq.c     **** 		zero = dn_eq0(&x);
3367:src/xeq.c     **** 	}
3368:src/xeq.c     **** 	if (op == OP_Xeq_pos0)
3369:src/xeq.c     **** 		fin_tst(zero && !neg);
3370:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
3371:src/xeq.c     **** 		fin_tst(zero && neg);
3372:src/xeq.c     **** }
3373:src/xeq.c     **** 
3374:src/xeq.c     **** void cmdtest(unsigned int arg, enum rarg op) {
3375:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
3376:src/xeq.c     **** }
3377:src/xeq.c     **** 
3378:src/xeq.c     **** static void do_ztst(const decNumber *re, const decNumber *im, enum tst_op op) {
3379:src/xeq.c     **** 	decNumber x, y;
3380:src/xeq.c     **** 
3381:src/xeq.c     **** 	process_cmdline_set_lift();
3382:src/xeq.c     **** 	if (is_intmode()) {
3383:src/xeq.c     **** 		bad_mode_error();
3384:src/xeq.c     **** 		return;
3385:src/xeq.c     **** 	}
3386:src/xeq.c     **** 	getXY(&x, &y);
3387:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
3388:src/xeq.c     **** 		fin_tst(0);
3389:src/xeq.c     **** 		return;
ARM GAS  /tmp/ccBFDvgN.s 			page 70


3390:src/xeq.c     **** 	}
3391:src/xeq.c     **** 	fin_tst((op == TST_EQ) == (dn_eq(&x, re) && dn_eq(&y, im)));
3392:src/xeq.c     **** }
3393:src/xeq.c     **** 
3394:src/xeq.c     **** void cmdztest(unsigned int arg, enum rarg op) {
3395:src/xeq.c     **** 	decNumber re, im;
3396:src/xeq.c     **** 	getRegister(&re, arg);
3397:src/xeq.c     **** 	getRegister(&im, arg + 1);
3398:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
3399:src/xeq.c     **** }
3400:src/xeq.c     **** 
3401:src/xeq.c     **** static int incdec(unsigned int arg, int inc) {
3402:src/xeq.c     **** 	if (is_intmode()) {
3403:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3404:src/xeq.c     **** 		int xs;
3405:src/xeq.c     **** 		unsigned long long int xv;
3406:src/xeq.c     **** 
3407:src/xeq.c     **** 		if (inc)
3408:src/xeq.c     **** 			x = intAdd(x, 1LL);
3409:src/xeq.c     **** 		else
3410:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3411:src/xeq.c     **** 		set_reg_n_int(arg, x);
3412:src/xeq.c     **** 
3413:src/xeq.c     **** 		xv = extract_value(x, &xs);
3414:src/xeq.c     **** 		return xv != 0;
3415:src/xeq.c     **** 	} else {
3416:src/xeq.c     **** 		decNumber x, y;
3417:src/xeq.c     **** 
3418:src/xeq.c     **** 		getRegister(&x, arg);
3419:src/xeq.c     **** 		if (inc)
3420:src/xeq.c     **** 			dn_inc(&x);
3421:src/xeq.c     **** 		else
3422:src/xeq.c     **** 			dn_dec(&x);
3423:src/xeq.c     **** 		setRegister(arg, &x);
3424:src/xeq.c     **** 		decNumberTrunc(&y, &x);
3425:src/xeq.c     **** 		return ! dn_eq0(&y);
3426:src/xeq.c     **** 	}
3427:src/xeq.c     **** }
3428:src/xeq.c     **** 
3429:src/xeq.c     **** void cmdlincdec(unsigned int arg, enum rarg op) {
3430:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
3431:src/xeq.c     **** }
3432:src/xeq.c     **** 
3433:src/xeq.c     **** void cmdloopz(unsigned int arg, enum rarg op) {
3434:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
3435:src/xeq.c     **** }
3436:src/xeq.c     **** 
3437:src/xeq.c     **** void cmdloop(unsigned int arg, enum rarg op) {
3438:src/xeq.c     **** 	if (is_intmode()) {
3439:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3440:src/xeq.c     **** 		int xs;
3441:src/xeq.c     **** 		unsigned long long int xv;
3442:src/xeq.c     **** 
3443:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE)
3444:src/xeq.c     **** 			x = intAdd(x, 1LL);
3445:src/xeq.c     **** 		else
3446:src/xeq.c     **** 			x = intSubtract(x, 1LL);
ARM GAS  /tmp/ccBFDvgN.s 			page 71


3447:src/xeq.c     **** 		set_reg_n_int(arg, x);
3448:src/xeq.c     **** 
3449:src/xeq.c     **** 		xv = extract_value(x, &xs);
3450:src/xeq.c     **** 		if (op == RARG_ISG)
3451:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
3452:src/xeq.c     **** 		else if (op == RARG_DSE)
3453:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
3454:src/xeq.c     **** 		else if (op == RARG_ISE)
3455:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
3456:src/xeq.c     **** 		else // if (op == RARG_DSL)
3457:src/xeq.c     **** 			fin_tst(! (xs != 0 && xv > 0));		// < 0
3458:src/xeq.c     **** 		return;
3459:src/xeq.c     **** 	} else {
3460:src/xeq.c     **** 		decNumber x, i, f, n, u;
3461:src/xeq.c     **** 
3462:src/xeq.c     **** 		getRegister(&x, arg);
3463:src/xeq.c     **** 
3464:src/xeq.c     **** 		// Break the number into the important bits
3465:src/xeq.c     **** 		// nnnnn.fffii
3466:src/xeq.c     **** 		dn_abs(&f, &x);
3467:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
3468:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
3469:src/xeq.c     **** 		if (decNumberIsNegative(&x))
3470:src/xeq.c     **** 			dn_minus(&n, &n);
3471:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
3472:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
3473:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
3474:src/xeq.c     **** 		dn_mul100(&x, &i);
3475:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
3476:src/xeq.c     **** 		if (dn_eq0(&i))
3477:src/xeq.c     **** 			dn_1(&i);
3478:src/xeq.c     **** 
3479:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE) {
3480:src/xeq.c     **** 			dn_add(&n, &n, &i);
3481:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3482:src/xeq.c     **** 			if (op == RARG_ISE)
3483:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
3484:src/xeq.c     **** 			else
3485:src/xeq.c     **** 				fin_tst(dn_ge0(&x));
3486:src/xeq.c     **** 		} else {
3487:src/xeq.c     **** 			dn_subtract(&n, &n, &i);
3488:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3489:src/xeq.c     **** 			if (op == RARG_DSL)
3490:src/xeq.c     **** 				fin_tst(dn_le0(&x));
3491:src/xeq.c     **** 			else
3492:src/xeq.c     **** 				fin_tst(dn_lt0(&x));
3493:src/xeq.c     **** 		}
3494:src/xeq.c     **** 
3495:src/xeq.c     **** 		// Finally rebuild the result
3496:src/xeq.c     **** 		if (decNumberIsNegative(&n)) {
3497:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
3498:src/xeq.c     **** 		} else
3499:src/xeq.c     **** 			dn_add(&x, &n, &u);
3500:src/xeq.c     **** 		setRegister(arg, &x);
3501:src/xeq.c     **** 	}
3502:src/xeq.c     **** }
3503:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 72


3504:src/xeq.c     **** 
3505:src/xeq.c     **** /* Shift a real number by 10 to the specified power
3506:src/xeq.c     ****  */
3507:src/xeq.c     **** void op_shift_digit(unsigned int n, enum rarg op) {
3508:src/xeq.c     **** 	decNumber x;
3509:src/xeq.c     **** 	int adjust = n;
3510:src/xeq.c     **** 
3511:src/xeq.c     **** 	if (is_intmode()) {
3512:src/xeq.c     **** 		bad_mode_error();
3513:src/xeq.c     **** 		return;
3514:src/xeq.c     **** 	}
3515:src/xeq.c     **** 	getX(&x);
3516:src/xeq.c     **** 	setlastX();
3517:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
3518:src/xeq.c     **** 		return;
3519:src/xeq.c     **** 	if (op == RARG_SRD)
3520:src/xeq.c     **** 		adjust = -adjust;
3521:src/xeq.c     **** 	x.exponent += adjust;
3522:src/xeq.c     **** 	setX(&x);
3523:src/xeq.c     **** }
3524:src/xeq.c     **** 
3525:src/xeq.c     **** 
3526:src/xeq.c     **** /* Return a pointer to the byte with the indicated flag in it.
3527:src/xeq.c     ****  * also return a byte with the relevant bit mask set up.
3528:src/xeq.c     ****  * Also, handle local flags.
3529:src/xeq.c     ****  */
3530:src/xeq.c     **** static unsigned short int *flag_word(int n, unsigned short int *mask) {
 457              		.loc 1 3530 71 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
3531:src/xeq.c     **** 	unsigned short int *p;
 462              		.loc 1 3531 2 view .LVU141
3532:src/xeq.c     **** 
3533:src/xeq.c     **** 	if (n >= LOCAL_FLAG_BASE) {
 463              		.loc 1 3533 2 view .LVU142
 464              		.loc 1 3533 5 is_stmt 0 view .LVU143
 465 0000 6F28     		cmp	r0, #111
3530:src/xeq.c     **** 	unsigned short int *p;
 466              		.loc 1 3530 71 view .LVU144
 467 0002 10B4     		push	{r4}
 468              		.cfi_def_cfa_offset 4
 469              		.cfi_offset 4, -4
 470              		.loc 1 3533 5 view .LVU145
 471 0004 29DD     		ble	.L42
3534:src/xeq.c     **** 		n -= LOCAL_FLAG_BASE;
 472              		.loc 1 3534 3 is_stmt 1 view .LVU146
 473              		.loc 1 3534 5 is_stmt 0 view .LVU147
 474 0006 7038     		subs	r0, r0, #112
 475              	.LVL39:
3535:src/xeq.c     **** 		if (n > XROM_SYSTEM_FLAG_BASE && XromFlags.xIN) {
 476              		.loc 1 3535 3 is_stmt 1 view .LVU148
 477              		.loc 1 3535 6 is_stmt 0 view .LVU149
 478 0008 0828     		cmp	r0, #8
 479 000a 04DD     		ble	.L43
 480              		.loc 1 3535 33 discriminator 1 view .LVU150
ARM GAS  /tmp/ccBFDvgN.s 			page 73


 481 000c 174B     		ldr	r3, .L54
 482 000e 93F90120 		ldrsb	r2, [r3, #1]
 483 0012 002A     		cmp	r2, #0
 484 0014 15DB     		blt	.L44
 485              	.L43:
3536:src/xeq.c     **** 			// XROM special
3537:src/xeq.c     **** 			p = &XromFlagWord;
3538:src/xeq.c     **** 		}
3539:src/xeq.c     **** 		else if (LocalRegs & 1) {
 486              		.loc 1 3539 8 is_stmt 1 view .LVU151
 487              		.loc 1 3539 12 is_stmt 0 view .LVU152
 488 0016 164B     		ldr	r3, .L54+4
 489 0018 1B68     		ldr	r3, [r3]
 490 001a B3F9DE27 		ldrsh	r2, [r3, #2014]
3540:src/xeq.c     **** 			// Odd frame: flags are at end of frame
3541:src/xeq.c     **** 			p = RetStk + LocalRegs + local_levels() - 1;
 491              		.loc 1 3541 44 view .LVU153
 492 001e 154B     		ldr	r3, .L54+8
3539:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 493              		.loc 1 3539 11 view .LVU154
 494 0020 D407     		lsls	r4, r2, #31
 495              		.loc 1 3541 44 view .LVU155
 496 0022 1B68     		ldr	r3, [r3]
3539:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 497              		.loc 1 3539 11 view .LVU156
 498 0024 1ED5     		bpl	.L45
 499              		.loc 1 3541 4 is_stmt 1 view .LVU157
 500              	.LBB1333:
 501              	.LBI1333:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 502              		.loc 1 217 5 view .LVU158
 503              	.LBB1334:
 218:src/xeq.c     **** }
 504              		.loc 1 218 2 view .LVU159
 218:src/xeq.c     **** }
 505              		.loc 1 218 57 is_stmt 0 view .LVU160
 506 0026 002A     		cmp	r2, #0
 507 0028 B8BF     		it	lt
 508 002a 33F81240 		ldrhlt	r4, [r3, r2, lsl #1]
 509              	.LBE1334:
 510              	.LBE1333:
 511              		.loc 1 3541 44 view .LVU161
 512 002e 02F10042 		add	r2, r2, #-2147483648
 513 0032 B4BF     		ite	lt
 514 0034 C4F30B04 		ubfxlt	r4, r4, #0, #12
 515              	.LBB1336:
 516              	.LBB1335:
 517 0038 0024     		movge	r4, #0
 518              	.LBE1335:
 519              	.LBE1336:
 520 003a 013A     		subs	r2, r2, #1
 521 003c 2244     		add	r2, r2, r4
 522              		.loc 1 3541 6 view .LVU162
 523 003e 03EB4203 		add	r3, r3, r2, lsl #1
 524              	.LVL40:
 525              	.L44:
3542:src/xeq.c     **** 		}
ARM GAS  /tmp/ccBFDvgN.s 			page 74


3543:src/xeq.c     **** 		else {
3544:src/xeq.c     **** 			// Even frame: Flags are at beginning of frame
3545:src/xeq.c     **** 			p = RetStk + LocalRegs + 1;
3546:src/xeq.c     **** 		}
3547:src/xeq.c     **** 	}
3548:src/xeq.c     **** 	else
3549:src/xeq.c     **** 		p = UserFlags;
3550:src/xeq.c     **** 
3551:src/xeq.c     **** 	if (mask != NULL)
 526              		.loc 1 3551 2 is_stmt 1 view .LVU163
 527              		.loc 1 3551 5 is_stmt 0 view .LVU164
 528 0042 21B1     		cbz	r1, .L47
3552:src/xeq.c     **** 		*mask = 1 << (n & 15);
 529              		.loc 1 3552 3 is_stmt 1 view .LVU165
 530              		.loc 1 3552 19 is_stmt 0 view .LVU166
 531 0044 00F00F04 		and	r4, r0, #15
 532              		.loc 1 3552 13 view .LVU167
 533 0048 0122     		movs	r2, #1
 534 004a A240     		lsls	r2, r2, r4
 535              		.loc 1 3552 9 view .LVU168
 536 004c 0A80     		strh	r2, [r1]	@ movhi
 537              	.L47:
3553:src/xeq.c     **** 	return p + (n >> 4);
 538              		.loc 1 3553 2 is_stmt 1 view .LVU169
 539              		.loc 1 3553 16 is_stmt 0 view .LVU170
 540 004e 0011     		asrs	r0, r0, #4
 541              	.LVL41:
3554:src/xeq.c     **** }
 542              		.loc 1 3554 1 view .LVU171
 543 0050 03EB4000 		add	r0, r3, r0, lsl #1
 544 0054 5DF8044B 		ldr	r4, [sp], #4
 545              		.cfi_remember_state
 546              		.cfi_restore 4
 547              		.cfi_def_cfa_offset 0
 548 0058 7047     		bx	lr
 549              	.LVL42:
 550              	.L42:
 551              		.cfi_restore_state
3549:src/xeq.c     **** 
 552              		.loc 1 3549 3 is_stmt 1 view .LVU172
3549:src/xeq.c     **** 
 553              		.loc 1 3549 7 is_stmt 0 view .LVU173
 554 005a 054B     		ldr	r3, .L54+4
3549:src/xeq.c     **** 
 555              		.loc 1 3549 5 view .LVU174
 556 005c 1B68     		ldr	r3, [r3]
 557 005e 03F5FE63 		add	r3, r3, #2032
 558              	.LVL43:
3549:src/xeq.c     **** 
 559              		.loc 1 3549 5 view .LVU175
 560 0062 EEE7     		b	.L44
 561              	.LVL44:
 562              	.L45:
3545:src/xeq.c     **** 		}
 563              		.loc 1 3545 4 is_stmt 1 view .LVU176
3545:src/xeq.c     **** 		}
 564              		.loc 1 3545 27 is_stmt 0 view .LVU177
ARM GAS  /tmp/ccBFDvgN.s 			page 75


 565 0064 0132     		adds	r2, r2, #1
3545:src/xeq.c     **** 		}
 566              		.loc 1 3545 6 view .LVU178
 567 0066 03EB4203 		add	r3, r3, r2, lsl #1
 568              	.LVL45:
3545:src/xeq.c     **** 		}
 569              		.loc 1 3545 6 view .LVU179
 570 006a EAE7     		b	.L44
 571              	.L55:
 572              		.align	2
 573              	.L54:
 574 006c 00000000 		.word	XromParams
 575 0070 00000000 		.word	main_ram
 576 0074 00000000 		.word	RetStk
 577              		.cfi_endproc
 578              	.LFE198:
 580              		.section	.text.set_zero,"ax",%progbits
 581              		.align	1
 582              		.p2align 2,,3
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu fpv4-sp-d16
 588              	set_zero:
 589              	.LVL46:
 590              	.LFB106:
1546:src/xeq.c     **** 	zero_regs(x, 1);
 591              		.loc 1 1546 35 is_stmt 1 view -0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              		@ link register save eliminated.
1547:src/xeq.c     **** }
 596              		.loc 1 1547 2 view .LVU181
 597              	.LBB1337:
 598              	.LBI1337:
1518:src/xeq.c     **** #if 0
 599              		.loc 1 1518 6 view .LVU182
 600              	.LBB1338:
1533:src/xeq.c     **** #endif
 601              		.loc 1 1533 2 view .LVU183
 602              	.LBB1339:
 603              	.LBI1339:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 604              		.loc 1 1118 5 view .LVU184
 605              	.LBB1340:
1119:src/xeq.c     **** }
 606              		.loc 1 1119 2 view .LVU185
1119:src/xeq.c     **** }
 607              		.loc 1 1119 24 is_stmt 0 view .LVU186
 608 0000 074B     		ldr	r3, .L57
 609 0002 1B68     		ldr	r3, [r3]
 610 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 611 0008 44F20102 		movw	r2, #16385
 612 000c 1A40     		ands	r2, r2, r3
 613              	.LBE1340:
 614              	.LBE1339:
ARM GAS  /tmp/ccBFDvgN.s 			page 76


1533:src/xeq.c     **** #endif
 615              		.loc 1 1533 2 view .LVU187
 616 000e B2F5804F 		cmp	r2, #16384
 617 0012 0CBF     		ite	eq
 618 0014 1022     		moveq	r2, #16
 619 0016 0822     		movne	r2, #8
 620 0018 0021     		movs	r1, #0
 621 001a FFF7FEBF 		b	xset
 622              	.LVL47:
 623              	.L58:
1533:src/xeq.c     **** #endif
 624              		.loc 1 1533 2 view .LVU188
 625 001e 00BF     		.align	2
 626              	.L57:
 627 0020 00000000 		.word	main_ram
 628              	.LBE1338:
 629              	.LBE1337:
 630              		.cfi_endproc
 631              	.LFE106:
 633              		.section	.text.intResult,"ax",%progbits
 634              		.align	1
 635              		.p2align 2,,3
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu fpv4-sp-d16
 641              	intResult:
 642              	.LVL48:
 643              	.LFB239:
3555:src/xeq.c     **** 
3556:src/xeq.c     **** int get_user_flag(int n) {
3557:src/xeq.c     **** 	unsigned short mask;
3558:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
3559:src/xeq.c     **** 
3560:src/xeq.c     **** 	return (*f & mask)? 1 : 0;
3561:src/xeq.c     **** }
3562:src/xeq.c     **** 
3563:src/xeq.c     **** void put_user_flag(int n, int f) {
3564:src/xeq.c     **** 	if (f)	set_user_flag(n);
3565:src/xeq.c     **** 	else	clr_user_flag(n);
3566:src/xeq.c     **** }
3567:src/xeq.c     **** 
3568:src/xeq.c     **** #ifndef set_user_flag
3569:src/xeq.c     **** void set_user_flag(int n) {
3570:src/xeq.c     **** 	unsigned short mask;
3571:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3572:src/xeq.c     **** 
3573:src/xeq.c     **** 	*f |= mask;
3574:src/xeq.c     **** }
3575:src/xeq.c     **** 
3576:src/xeq.c     **** void clr_user_flag(int n) {
3577:src/xeq.c     **** 	unsigned short mask;
3578:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3579:src/xeq.c     **** 
3580:src/xeq.c     **** 	*f &= ~mask;
3581:src/xeq.c     **** }
3582:src/xeq.c     **** #endif
ARM GAS  /tmp/ccBFDvgN.s 			page 77


3583:src/xeq.c     **** 
3584:src/xeq.c     **** void cmdflag(unsigned int arg, enum rarg op) {
3585:src/xeq.c     **** 	unsigned short mask;
3586:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
3587:src/xeq.c     **** 	int flg = *f & mask;
3588:src/xeq.c     **** 
3589:src/xeq.c     **** 	switch (op) {
3590:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
3591:src/xeq.c     **** 	case RARG_CF:	flg = 0;			   break;
3592:src/xeq.c     **** 	case RARG_FF:	flg = flg? 0 : 1;		   break;
3593:src/xeq.c     **** 
3594:src/xeq.c     **** 	case RARG_FS:	fin_tst(flg);			   return;
3595:src/xeq.c     **** 	case RARG_FC:	fin_tst(! flg);			   return;
3596:src/xeq.c     **** 
3597:src/xeq.c     **** 	case RARG_FSC:	fin_tst(flg); flg = 0;		   break;
3598:src/xeq.c     **** 	case RARG_FSS:	fin_tst(flg); flg = 1;		   break;
3599:src/xeq.c     **** 	case RARG_FSF:	fin_tst(flg); flg = flg ? 0 : 1;   break;
3600:src/xeq.c     **** 
3601:src/xeq.c     **** 	case RARG_FCC:	fin_tst(! flg);	flg = 0;	   break;
3602:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
3603:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
3604:src/xeq.c     **** 
3605:src/xeq.c     **** 	default:
3606:src/xeq.c     **** 		return;
3607:src/xeq.c     **** 	}
3608:src/xeq.c     **** 
3609:src/xeq.c     **** 	// And write the value back
3610:src/xeq.c     **** 	if (flg)
3611:src/xeq.c     **** 		*f |= mask;
3612:src/xeq.c     **** 	else
3613:src/xeq.c     **** 		*f &= ~mask;
3614:src/xeq.c     **** 
3615:src/xeq.c     **** 	if ( arg == A_FLAG ) {
3616:src/xeq.c     **** 		dot( BIG_EQ, flg );
3617:src/xeq.c     **** 		finish_display(); // BIG_EQ
3618:src/xeq.c     **** 	}
3619:src/xeq.c     **** }
3620:src/xeq.c     **** 
3621:src/xeq.c     **** /* Reset all flags to off/false
3622:src/xeq.c     ****  */
3623:src/xeq.c     **** void clrflags(enum nilop op) {
3624:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
3625:src/xeq.c     **** 	if (LocalRegs < 0) {
3626:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
3627:src/xeq.c     **** 	}
3628:src/xeq.c     **** }
3629:src/xeq.c     **** 
3630:src/xeq.c     **** 
3631:src/xeq.c     **** /* Integer word size
3632:src/xeq.c     ****  */
3633:src/xeq.c     **** void intws(unsigned int arg, enum rarg op) {
3634:src/xeq.c     **** 	if (is_intmode()) {
3635:src/xeq.c     **** 		int i, ss = stack_size();
3636:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
3637:src/xeq.c     **** 		long long int v;
3638:src/xeq.c     **** 
3639:src/xeq.c     **** 		for (i=0; i<ss; i++) {
ARM GAS  /tmp/ccBFDvgN.s 			page 78


3640:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
3641:src/xeq.c     **** 			UState.int_len = arg;
3642:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
3643:src/xeq.c     **** 			UState.int_len = oldlen;
3644:src/xeq.c     **** 		}
3645:src/xeq.c     **** 		v = mask_value(get_reg_n_int(regL_idx));
3646:src/xeq.c     **** 		UState.int_len = arg;
3647:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
3648:src/xeq.c     **** 	} else
3649:src/xeq.c     **** 	    UState.int_len = arg;
3650:src/xeq.c     **** }
3651:src/xeq.c     **** 
3652:src/xeq.c     **** 
3653:src/xeq.c     **** /* Convert from a real to a fraction
3654:src/xeq.c     ****  */
3655:src/xeq.c     **** 
3656:src/xeq.c     **** void get_maxdenom(decNumber *d) {
3657:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
3658:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
3659:src/xeq.c     **** }
3660:src/xeq.c     **** 
3661:src/xeq.c     **** void op_2frac(enum nilop op) {
3662:src/xeq.c     **** 	decNumber z, n, d, t;
3663:src/xeq.c     **** 
3664:src/xeq.c     **** 	if (UState.intm) {
3665:src/xeq.c     **** 		setX_int(1);
3666:src/xeq.c     **** 		return;
3667:src/xeq.c     **** 	}
3668:src/xeq.c     **** 
3669:src/xeq.c     **** 	getY(&z);			// Stack has been lifted already
3670:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
3671:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
3672:src/xeq.c     **** 	if (State2.runmode) {
3673:src/xeq.c     **** 		dn_divide(&t, &n, &d);
3674:src/xeq.c     **** 		dn_compare(&n, &t, &z);
3675:src/xeq.c     **** 		if (dn_eq0(&n))
3676:src/xeq.c     **** 			DispMsg = "y/x =";
3677:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
3678:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
3679:src/xeq.c     **** 			DispMsg = "y/x \007\344<";
3680:src/xeq.c     **** 		else
3681:src/xeq.c     **** 			DispMsg = "y/x \007\344>";
3682:src/xeq.c     **** #else
3683:src/xeq.c     **** 			DispMsg = "y/x <";
3684:src/xeq.c     **** 		else
3685:src/xeq.c     **** 			DispMsg = "y/x >";
3686:src/xeq.c     **** #endif
3687:src/xeq.c     **** 	}
3688:src/xeq.c     **** }
3689:src/xeq.c     **** 
3690:src/xeq.c     **** void op_fracdenom(enum nilop op) {
3691:src/xeq.c     **** 	int s;
3692:src/xeq.c     **** 	unsigned long long int i;
3693:src/xeq.c     **** 
3694:src/xeq.c     **** 	i = getX_int_sgn(&s);
3695:src/xeq.c     **** 	if (i > 9999)
3696:src/xeq.c     **** 		UState.denom_max = 0;
ARM GAS  /tmp/ccBFDvgN.s 			page 79


3697:src/xeq.c     **** 	else if (i != 1)
3698:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
3699:src/xeq.c     **** 	else {
3700:src/xeq.c     **** 		setlastX();
3701:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
3702:src/xeq.c     **** 	}
3703:src/xeq.c     **** }
3704:src/xeq.c     **** 
3705:src/xeq.c     **** 
3706:src/xeq.c     **** /*  Switching from an integer mode to real mode
3707:src/xeq.c     ****  *  We convert the stack and LastX 
3708:src/xeq.c     ****  */
3709:src/xeq.c     **** static const unsigned short int StackRegMask[] = { 0x10f, 0x1ff };
3710:src/xeq.c     **** 
3711:src/xeq.c     **** void op_float(enum nilop op) {
3712:src/xeq.c     **** 
3713:src/xeq.c     **** 	if (is_intmode()) {
3714:src/xeq.c     **** 		int i;
3715:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
3716:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
3717:src/xeq.c     **** 			if (mask & 1) {
3718:src/xeq.c     **** 				// register belongs to stack
3719:src/xeq.c     **** 				register_from_int(i, i, op == OP_FLOAT_XIN);
3720:src/xeq.c     **** 			}
3721:src/xeq.c     **** 			else if (is_dblmode()) {
3722:src/xeq.c     **** 				// expand the other registers which have been left
3723:src/xeq.c     **** 				// in decimal64 format by the integer mode switch
3724:src/xeq.c     **** 				packed128_from_packed(&(get_reg_n(i)->d), Regs + i);
3725:src/xeq.c     **** 			}
3726:src/xeq.c     **** 		}
3727:src/xeq.c     **** 	}
3728:src/xeq.c     **** 	if (op != OP_FLOAT_XIN && op != OP_FLOAT_RCLM) {
3729:src/xeq.c     **** 		UState.fract = 0;
3730:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
3731:src/xeq.c     **** 	}
3732:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3733:src/xeq.c     **** }
3734:src/xeq.c     **** 
3735:src/xeq.c     **** /*  Switch to integer mode.
3736:src/xeq.c     ****  *  We convert the stack and LastX
3737:src/xeq.c     ****  */
3738:src/xeq.c     **** static void switch_to_int(void) {
3739:src/xeq.c     **** 	int i;
3740:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
3741:src/xeq.c     **** 	const int dbl = is_dblmode();
3742:src/xeq.c     **** 
3743:src/xeq.c     **** 	for (i = regK_idx; i >= regX_idx; --i, mask <<= 1) {
3744:src/xeq.c     **** 		if (mask & 0x800) {
3745:src/xeq.c     **** 			// register belongs to stack
3746:src/xeq.c     **** 			int_from_register(i, i);
3747:src/xeq.c     **** 		}
3748:src/xeq.c     **** 		else if (dbl) {
3749:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
3750:src/xeq.c     **** 			packed_from_packed128(Regs + i, &(get_reg_n(i)->d));
3751:src/xeq.c     **** 		}
3752:src/xeq.c     **** 	}
3753:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 80


3754:src/xeq.c     **** 
3755:src/xeq.c     **** static void set_base(unsigned int b) {
3756:src/xeq.c     **** 	UState.int_base = b - 1;
3757:src/xeq.c     **** 	if (!is_intmode())
3758:src/xeq.c     **** 		switch_to_int();
3759:src/xeq.c     **** }
3760:src/xeq.c     **** 
3761:src/xeq.c     **** void set_int_base(unsigned int arg, enum rarg op) {
3762:src/xeq.c     **** 	if (arg < 2) {
3763:src/xeq.c     **** 		if (arg == 0)
3764:src/xeq.c     **** 			op_float(OP_FLOAT);
3765:src/xeq.c     **** 		else
3766:src/xeq.c     **** 			op_fract(OP_FRACT);
3767:src/xeq.c     **** 	} else
3768:src/xeq.c     **** 		set_base(arg);
3769:src/xeq.c     **** }
3770:src/xeq.c     **** 
3771:src/xeq.c     **** 
3772:src/xeq.c     **** void op_fract(enum nilop op) {
3773:src/xeq.c     **** 	op_float(OP_FLOAT);
3774:src/xeq.c     **** 	UState.fract = 1;
3775:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
3776:src/xeq.c     **** 		UState.improperfrac = 1;
3777:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
3778:src/xeq.c     **** 		UState.improperfrac = 0;
3779:src/xeq.c     **** }
3780:src/xeq.c     **** 
3781:src/xeq.c     **** #ifdef INCLUDE_USER_MODE
3782:src/xeq.c     **** /* Save and restore user state.
3783:src/xeq.c     ****  */
3784:src/xeq.c     **** void cmdsavem(unsigned int arg, enum rarg op) {
3785:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
3786:src/xeq.c     **** }
3787:src/xeq.c     **** 
3788:src/xeq.c     **** void cmdrestm(unsigned int arg, enum rarg op) {
3789:src/xeq.c     **** 	const int dbl = is_dblmode();
3790:src/xeq.c     **** 	const int intm = is_intmode();
3791:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
3792:src/xeq.c     **** 
3793:src/xeq.c     **** 	// Fix things
3794:src/xeq.c     **** #ifndef DM42
3795:src/xeq.c     **** 	if ( UState.contrast == 0 )
3796:src/xeq.c     **** 		UState.contrast = 6;
3797:src/xeq.c     **** #endif
3798:src/xeq.c     **** 	if (intm != is_intmode()) {
3799:src/xeq.c     **** 		// Switch back to decimal or integer mode
3800:src/xeq.c     **** 		UState.intm = intm;
3801:src/xeq.c     **** 		if (intm)
3802:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
3803:src/xeq.c     **** 		else
3804:src/xeq.c     **** 			switch_to_int();
3805:src/xeq.c     **** 	}
3806:src/xeq.c     **** 	if (! is_intmode() && dbl != is_dblmode()) {
3807:src/xeq.c     **** 		// Switch back to double/single precision
3808:src/xeq.c     **** 		UState.mode_double = dbl;
3809:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
3810:src/xeq.c     **** 	}
ARM GAS  /tmp/ccBFDvgN.s 			page 81


3811:src/xeq.c     **** }
3812:src/xeq.c     **** #endif
3813:src/xeq.c     **** 
3814:src/xeq.c     **** /* Process a single digit.
3815:src/xeq.c     ****  */
3816:src/xeq.c     **** #if 0 // unused
3817:src/xeq.c     **** static int is_digit(const char c) {
3818:src/xeq.c     **** 	if (c >= '0' && c <= '9')
3819:src/xeq.c     **** 		return 1;
3820:src/xeq.c     **** 	return 0;
3821:src/xeq.c     **** }
3822:src/xeq.c     **** 
3823:src/xeq.c     **** static int is_xdigit(const char c) {
3824:src/xeq.c     **** 	if (is_digit(c) || (c >= 'A' && c <= 'F'))
3825:src/xeq.c     **** 		return 1;
3826:src/xeq.c     **** 	return 0;
3827:src/xeq.c     **** }
3828:src/xeq.c     **** #endif
3829:src/xeq.c     **** 
3830:src/xeq.c     **** static void digit(unsigned int c) {
3831:src/xeq.c     **** 	const int intm = is_intmode();
3832:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
3833:src/xeq.c     **** 
3834:src/xeq.c     **** 	if (Cmdline[0] == '-')
3835:src/xeq.c     **** 		lim++;
3836:src/xeq.c     **** 	if (intm) {
3837:src/xeq.c     **** 		if (c >= int_base()) {
3838:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3839:src/xeq.c     **** 			return;
3840:src/xeq.c     **** 		}
3841:src/xeq.c     **** 	} else {
3842:src/xeq.c     **** 		if (c >= 10) {
3843:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3844:src/xeq.c     **** 			return;
3845:src/xeq.c     **** 		}
3846:src/xeq.c     **** 
3847:src/xeq.c     **** 		if (CmdLineEex) {
3848:src/xeq.c     **** 			lim = CMDLINELEN;
3849:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3850:src/xeq.c     **** 			if (CmdLineLength >= lim) {
3851:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
3852:src/xeq.c     **** 
3853:src/xeq.c     **** 				if (*p == '-')
3854:src/xeq.c     **** 					p++;
3855:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
3856:src/xeq.c     **** 					p[0] = p[1];
3857:src/xeq.c     **** 					p++;
3858:src/xeq.c     **** 				}
3859:src/xeq.c     **** 				CmdLineLength--;
3860:src/xeq.c     **** 			}
3861:src/xeq.c     **** #endif
3862:src/xeq.c     **** 		}
3863:src/xeq.c     **** 		else {
3864:src/xeq.c     **** 			lim += CmdLineDot;
3865:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
3866:src/xeq.c     **** 			if (CmdLineDot >= 2) {
3867:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
ARM GAS  /tmp/ccBFDvgN.s 			page 82


3868:src/xeq.c     **** 				// Make space for the minus sign
3869:src/xeq.c     **** 				lim = CMDLINELEN - (Cmdline[0] != '-');
3870:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3871:src/xeq.c     **** 				lim += 1 + (find_char(Cmdline, '.')[1] == '.');
3872:src/xeq.c     **** #  else
3873:src/xeq.c     **** 				lim++;
3874:src/xeq.c     **** #  endif
3875:src/xeq.c     **** 			}
3876:src/xeq.c     **** #endif
3877:src/xeq.c     **** 		}
3878:src/xeq.c     **** 	}
3879:src/xeq.c     **** 	if (CmdLineLength >= lim
3880:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
3881:src/xeq.c     **** 		report_warn(ERR_TOO_LONG);
3882:src/xeq.c     **** 		return;
3883:src/xeq.c     **** 	}
3884:src/xeq.c     **** 
3885:src/xeq.c     **** 	if (c >= 10)
3886:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
3887:src/xeq.c     **** 	else {
3888:src/xeq.c     **** 		// Leading zeros in the exponent aren't visible to the user,
3889:src/xeq.c     **** 		// and they're removed automatically if digits are shifted,
3890:src/xeq.c     **** 		// so it's more consistent if they can't be entered, either.
3891:src/xeq.c     **** 		if (c == 0 && CmdLineEex) {
3892:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
3893:src/xeq.c     **** 				return;
3894:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3895:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'D')
3896:src/xeq.c     **** 				return;
3897:src/xeq.c     **** #else
3898:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == '-')
3899:src/xeq.c     **** 				return;
3900:src/xeq.c     **** #endif
3901:src/xeq.c     **** 		}
3902:src/xeq.c     **** 
3903:src/xeq.c     **** 		append_cmdline(c + '0');
3904:src/xeq.c     **** 
3905:src/xeq.c     **** 		if (CmdLineEex)
3906:src/xeq.c     **** 			exponent_adjusted(1);
3907:src/xeq.c     **** 	}
3908:src/xeq.c     **** }
3909:src/xeq.c     **** 
3910:src/xeq.c     **** 
3911:src/xeq.c     **** void set_entry() {
3912:src/xeq.c     **** 	if (!Running && !XromRunning)
3913:src/xeq.c     **** 		State.entryp = 1;
3914:src/xeq.c     **** }
3915:src/xeq.c     **** 
3916:src/xeq.c     **** 
3917:src/xeq.c     **** /* Decode and process the specials.  These are niladic functions and
3918:src/xeq.c     ****  * commands with non-standard stack operation.
3919:src/xeq.c     ****  */
3920:src/xeq.c     **** static void specials(const opcode op) {
3921:src/xeq.c     **** 	int opm = argKIND(op);
3922:src/xeq.c     **** 
3923:src/xeq.c     **** 	switch (opm) {
3924:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
ARM GAS  /tmp/ccBFDvgN.s 			page 83


3925:src/xeq.c     **** 	case OP_3:	case OP_4:	case OP_5:
3926:src/xeq.c     **** 	case OP_6:	case OP_7:	case OP_8:
3927:src/xeq.c     **** 	case OP_9:	case OP_A:	case OP_B:
3928:src/xeq.c     **** 	case OP_C:	case OP_D:	case OP_E:
3929:src/xeq.c     **** 	case OP_F:
3930:src/xeq.c     **** 		digit(opm - OP_0);
3931:src/xeq.c     **** 		break;
3932:src/xeq.c     **** 
3933:src/xeq.c     **** 	case OP_DOT:
3934:src/xeq.c     **** 		if (is_intmode())
3935:src/xeq.c     **** 			break;
3936:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3937:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 13 + CmdLineDot) {
3938:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
3939:src/xeq.c     **** #else
3940:src/xeq.c     **** #  if defined(PRETTY_FRACTION_ENTRY)
3941:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + 2*CmdLineDot) {
3942:src/xeq.c     **** #  else
3943:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + CmdLineDot) {
3944:src/xeq.c     **** #  endif
3945:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '.'
3946:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
3947:src/xeq.c     **** #endif
3948:src/xeq.c     **** 				digit(0);
3949:src/xeq.c     **** 			CmdLineDot++;
3950:src/xeq.c     **** 			append_cmdline('.');
3951:src/xeq.c     **** 		}
3952:src/xeq.c     **** 		break;
3953:src/xeq.c     **** 
3954:src/xeq.c     **** 	case OP_EEX:
3955:src/xeq.c     **** 		if (is_intmode())
3956:src/xeq.c     **** 			break;
3957:src/xeq.c     **** 		else {
3958:src/xeq.c     **** #if INCLUDE_EEX_PI == 2
3959:src/xeq.c     **** 			const int eex_pi = 1;
3960:src/xeq.c     **** #elif INCLUDE_EEX_PI == 1
3961:src/xeq.c     **** 			const int eex_pi = get_user_flag(regL_idx);
3962:src/xeq.c     **** #else
3963:src/xeq.c     **** 			const int eex_pi = 0;
3964:src/xeq.c     **** #endif
3965:src/xeq.c     **** 
3966:src/xeq.c     **** 			if (CmdLineDot == 2) {
3967:src/xeq.c     **** 				if (eex_pi) {
3968:src/xeq.c     **** 					// fraction entered (two dots); execute ENTER and enter pi
3969:src/xeq.c     **** 					if (is_bad_cmdline()) {
3970:src/xeq.c     **** 						if (Running || XromRunning)
3971:src/xeq.c     **** 							report_err(ERR_DOMAIN);
3972:src/xeq.c     **** 						break;
3973:src/xeq.c     **** 					}
3974:src/xeq.c     **** 					process_cmdline();
3975:src/xeq.c     **** 					lift();
3976:src/xeq.c     **** 					copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3977:src/xeq.c     **** 					set_lift();
3978:src/xeq.c     **** 				}
3979:src/xeq.c     **** 				break;
3980:src/xeq.c     **** 			}
3981:src/xeq.c     **** 			if (CmdLineEex || CmdLineLength >= CMDLINELEN)
ARM GAS  /tmp/ccBFDvgN.s 			page 84


3982:src/xeq.c     **** 				break;
3983:src/xeq.c     **** 			if (eex_pi && CmdLineLength == 0) {
3984:src/xeq.c     **** 				// empty command line: enter pi
3985:src/xeq.c     **** 				lift_if_enabled();
3986:src/xeq.c     **** 				copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3987:src/xeq.c     **** 				set_lift();
3988:src/xeq.c     **** 				break;
3989:src/xeq.c     **** 			}
3990:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 1)
3991:src/xeq.c     **** 			if (UState.fract)
3992:src/xeq.c     **** 				break;
3993:src/xeq.c     **** #endif
3994:src/xeq.c     **** 			if (CmdLineLength == 0)
3995:src/xeq.c     **** 				digit(1);
3996:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
3997:src/xeq.c     **** 			append_cmdline('E');
3998:src/xeq.c     **** 		}
3999:src/xeq.c     **** 		break;
4000:src/xeq.c     **** 
4001:src/xeq.c     **** 	case OP_CHS:
4002:src/xeq.c     **** 		if (CmdLineLength)
4003:src/xeq.c     **** 			cmdlinechs();
4004:src/xeq.c     **** 		else if (is_intmode()) {
4005:src/xeq.c     **** 			setX_int(intChs(getX_int()));
4006:src/xeq.c     **** 			set_lift();
4007:src/xeq.c     **** 		} else {
4008:src/xeq.c     **** 			decNumber x, r;
4009:src/xeq.c     **** 
4010:src/xeq.c     **** 			getX(&x);
4011:src/xeq.c     **** 			dn_minus(&r, &x);
4012:src/xeq.c     **** 			setX(&r);
4013:src/xeq.c     **** 			set_lift();
4014:src/xeq.c     **** 		}
4015:src/xeq.c     **** 		break;
4016:src/xeq.c     **** 
4017:src/xeq.c     **** 	case OP_CLX:
4018:src/xeq.c     **** 		if (Running)
4019:src/xeq.c     **** 			illegal(op);
4020:src/xeq.c     **** 		else if (CmdLineLength) {
4021:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
4022:src/xeq.c     **** 			if (CmdLineEex != 0 && Cmdline[CmdLineLength-1] == 'D') {
4023:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
4024:src/xeq.c     **** 				break;
4025:src/xeq.c     **** 			}
4026:src/xeq.c     **** #endif
4027:src/xeq.c     **** 			CmdLineLength--;
4028:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
4029:src/xeq.c     **** 				CmdLineEex = 0;
4030:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
4031:src/xeq.c     **** 				CmdLineDot--;
4032:src/xeq.c     **** 		} else
4033:src/xeq.c     **** 			clrx(OP_rCLX);
4034:src/xeq.c     **** 		break;
4035:src/xeq.c     **** 
4036:src/xeq.c     **** 		case OP_ENTER:
4037:src/xeq.c     **** 		  if (ENTRY_RPN_ENABLED) {  
4038:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
ARM GAS  /tmp/ccBFDvgN.s 			page 85


4039:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
4040:src/xeq.c     **** 		      process_cmdline();     //JM
4041:src/xeq.c     **** 		    } else {                       //JM
4042:src/xeq.c     **** 		      process_cmdline();
4043:src/xeq.c     **** 		      lift();
4044:src/xeq.c     **** 		      if ( (XromRunning || Running) ) {//JMTEST Explicitly including standard functionality if co
4045:src/xeq.c     **** 			clr_lift();
4046:src/xeq.c     **** 		      }   
4047:src/xeq.c     **** 		    }                              //JM
4048:src/xeq.c     **** 		  }
4049:src/xeq.c     **** 		  else {
4050:src/xeq.c     **** 		    process_cmdline();
4051:src/xeq.c     **** 		    lift();
4052:src/xeq.c     **** 		    clr_lift();
4053:src/xeq.c     **** 		  }
4054:src/xeq.c     **** 		  break;
4055:src/xeq.c     **** 		  
4056:src/xeq.c     **** 	case OP_SIGMAPLUS:
4057:src/xeq.c     **** 	case OP_SIGMAMINUS:
4058:src/xeq.c     **** 		if (is_intmode()) {
4059:src/xeq.c     **** 			bad_mode_error();
4060:src/xeq.c     **** 			break;
4061:src/xeq.c     **** 		}
4062:src/xeq.c     **** 		process_cmdline();
4063:src/xeq.c     **** 		clr_lift();
4064:src/xeq.c     **** 		setlastX();
4065:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
4066:src/xeq.c     **** 			sigma_plus();
4067:src/xeq.c     **** 		else
4068:src/xeq.c     **** 			sigma_minus();
4069:src/xeq.c     **** 		sigma_val(OP_sigmaN);
4070:src/xeq.c     **** 		break;
4071:src/xeq.c     **** 
4072:src/xeq.c     **** 	// Conditional tests vs registers....
4073:src/xeq.c     **** 	case OP_Xeq0:	case OP_Xlt0:	case OP_Xgt0:
4074:src/xeq.c     **** 	case OP_Xne0:	case OP_Xle0:	case OP_Xge0:
4075:src/xeq.c     **** 	case OP_Xapx0:
4076:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ZERO, (enum tst_op)(opm - OP_Xeq0));
4077:src/xeq.c     **** 		break;
4078:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
4079:src/xeq.c     **** 		do_ztst(&const_0, &const_0, (enum tst_op)(opm - OP_Zeq0));
4080:src/xeq.c     **** 		break;
4081:src/xeq.c     **** 
4082:src/xeq.c     **** 	case OP_Xeq1:	case OP_Xlt1:	case OP_Xgt1:
4083:src/xeq.c     **** 	case OP_Xne1:	case OP_Xle1:	case OP_Xge1:
4084:src/xeq.c     **** 	case OP_Xapx1:
4085:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ONE, (enum tst_op)(opm - OP_Xeq1));
4086:src/xeq.c     **** 		break;
4087:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
4088:src/xeq.c     **** 		do_ztst(&const_1, &const_0, (enum tst_op)(opm - OP_Zeq1));
4089:src/xeq.c     **** 		break;
4090:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
4091:src/xeq.c     **** 		do_ztst(&const_0, &const_1, (enum tst_op)(opm - OP_Zeqi));
4092:src/xeq.c     **** 		break;
4093:src/xeq.c     **** 
4094:src/xeq.c     **** 	default:
4095:src/xeq.c     **** 		illegal(op);
ARM GAS  /tmp/ccBFDvgN.s 			page 86


4096:src/xeq.c     **** 	}
4097:src/xeq.c     **** }
4098:src/xeq.c     **** 
4099:src/xeq.c     **** enum trig_modes get_trig_mode(void) {
4100:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
4101:src/xeq.c     **** 		return TRIG_RAD;
4102:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
4103:src/xeq.c     **** 	return (enum trig_modes) UState.trigmode;
4104:src/xeq.c     **** }
4105:src/xeq.c     **** 
4106:src/xeq.c     **** void op_double(enum nilop op) {
4107:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
4108:src/xeq.c     **** 	const int intm = is_intmode();
4109:src/xeq.c     **** 	int i;
4110:src/xeq.c     **** 
4111:src/xeq.c     **** 	if (dbl != UState.mode_double) {
4112:src/xeq.c     **** 		// Mode switch
4113:src/xeq.c     **** 		if (dbl) {
4114:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
4115:src/xeq.c     **** 				// Need space for double precision stack
4116:src/xeq.c     **** 				cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
4117:src/xeq.c     **** 				if (Error) {
4118:src/xeq.c     **** 					return;
4119:src/xeq.c     **** 				}
4120:src/xeq.c     **** 			}
4121:src/xeq.c     **** 
4122:src/xeq.c     **** 			UState.mode_double = 1;
4123:src/xeq.c     **** 			if (! intm) {
4124:src/xeq.c     **** 				// Convert X to K to double precision
4125:src/xeq.c     **** 				// Avoid this in integer mode
4126:src/xeq.c     **** 				for (i = 0; i < STACK_SIZE + EXTRA_REG; ++i)
4127:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
4128:src/xeq.c     **** 			}
4129:src/xeq.c     **** 		}
4130:src/xeq.c     **** 		else {
4131:src/xeq.c     **** 			if (! intm) {
4132:src/xeq.c     **** 				// Convert X to K to single precision
4133:src/xeq.c     **** 				// Avoid this in integer mode
4134:src/xeq.c     **** 				for (i = STACK_SIZE + EXTRA_REG - 1; i >= 0; --i)
4135:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
4136:src/xeq.c     **** 			}
4137:src/xeq.c     **** 			UState.mode_double = 0;
4138:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
4139:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
4140:src/xeq.c     **** 		}
4141:src/xeq.c     **** 	}
4142:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
4143:src/xeq.c     **** 	if (intm) {
4144:src/xeq.c     **** 		// Do the necessary conversions from integer mode
4145:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
4146:src/xeq.c     **** 	}
4147:src/xeq.c     **** }
4148:src/xeq.c     **** 
4149:src/xeq.c     **** void cmdpause(unsigned int arg, enum rarg op) {
4150:src/xeq.c     **** 	display();
4151:src/xeq.c     **** #ifndef CONSOLE
4152:src/xeq.c     **** 	// decremented in the low level heartbeat
ARM GAS  /tmp/ccBFDvgN.s 			page 87


4153:src/xeq.c     **** 	Pause = arg;
4154:src/xeq.c     **** 	GoFast = (arg == 0);
4155:src/xeq.c     **** #elif 0
4156:src/xeq.c     **** 	start_pause(arg);
4157:src/xeq.c     **** #else	
4158:src/xeq.c     **** #if defined(WIN32) && !defined(__GNUC__)
4159:src/xeq.c     **** #pragma warning(disable:4996)
4160:src/xeq.c     **** 	sleep(arg/10);
4161:src/xeq.c     **** #else
4162:src/xeq.c     **** 	usleep(arg * 100000);
4163:src/xeq.c     **** #endif
4164:src/xeq.c     **** #endif
4165:src/xeq.c     **** }
4166:src/xeq.c     **** 
4167:src/xeq.c     **** 
4168:src/xeq.c     **** 
4169:src/xeq.c     **** void op_setspeed(enum nilop op) {
4170:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
4171:src/xeq.c     **** 	update_speed(1);
4172:src/xeq.c     **** }
4173:src/xeq.c     **** 
4174:src/xeq.c     **** 
4175:src/xeq.c     **** void op_prompt(enum nilop op) {
4176:src/xeq.c     **** 	set_running_off();
4177:src/xeq.c     **** 	alpha_view_common(regX_idx);
4178:src/xeq.c     **** }
4179:src/xeq.c     **** 
4180:src/xeq.c     **** /* Test if a number is an integer or fractional */
4181:src/xeq.c     **** /* Special numbers are neither */
4182:src/xeq.c     **** void XisInt(enum nilop op) {
4183:src/xeq.c     **** 	decNumber x;
4184:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
4185:src/xeq.c     **** 	if ( is_intmode() )
4186:src/xeq.c     **** 		result = op_int;
4187:src/xeq.c     **** 	else if (decNumberIsSpecial(getX(&x)))
4188:src/xeq.c     **** 		result = 0;
4189:src/xeq.c     **** 	else
4190:src/xeq.c     **** 	        result = (is_int(&x) == op_int);
4191:src/xeq.c     **** 	fin_tst(result);
4192:src/xeq.c     **** }
4193:src/xeq.c     **** 
4194:src/xeq.c     **** /* Test if a number is an even or odd integer */
4195:src/xeq.c     **** /* fractional or special values are neither even nor odd */
4196:src/xeq.c     **** void XisEvenOrOdd(enum nilop op) {
4197:src/xeq.c     **** 	decNumber x;
4198:src/xeq.c     **** 	int odd = (op == OP_XisODD);
4199:src/xeq.c     **** 
4200:src/xeq.c     **** 	if (is_intmode()) {
4201:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
4202:src/xeq.c     **** 	} else {
4203:src/xeq.c     **** 		fin_tst(is_even(getX(&x)) == !odd);
4204:src/xeq.c     **** 	}
4205:src/xeq.c     **** }
4206:src/xeq.c     **** 
4207:src/xeq.c     **** 
4208:src/xeq.c     **** /* Test if a number is prime */
4209:src/xeq.c     **** void XisPrime(enum nilop op) {
ARM GAS  /tmp/ccBFDvgN.s 			page 88


4210:src/xeq.c     **** 	unsigned long long int i;
4211:src/xeq.c     **** 	int sgn;
4212:src/xeq.c     **** 
4213:src/xeq.c     **** 	i = getX_int_sgn(&sgn);
4214:src/xeq.c     **** 	if (!is_intmode()) {
4215:src/xeq.c     **** 		decNumber x;
4216:src/xeq.c     **** 
4217:src/xeq.c     **** 		getX(&x);
4218:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
4219:src/xeq.c     **** 			sgn = 1; // not prime
4220:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
4221:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
4222:src/xeq.c     **** 			i = 0xFFFFFFFFFFFFFFFFull;
4223:src/xeq.c     **** 	}
4224:src/xeq.c     **** 	fin_tst(sgn == 0 && isPrime(i));
4225:src/xeq.c     **** }
4226:src/xeq.c     **** 
4227:src/xeq.c     **** /* Test is a number is infinite.
4228:src/xeq.c     ****  */
4229:src/xeq.c     **** void isInfinite(enum nilop op) {
4230:src/xeq.c     **** 	decNumber x;
4231:src/xeq.c     **** 
4232:src/xeq.c     **** 	getX(&x);
4233:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
4234:src/xeq.c     **** }
4235:src/xeq.c     **** 
4236:src/xeq.c     **** /* Test for NaN.
4237:src/xeq.c     ****  * this could be done by testing x != x, but having a special command
4238:src/xeq.c     ****  * for it reads easier.
4239:src/xeq.c     ****  */
4240:src/xeq.c     **** void isNan(enum nilop op) {
4241:src/xeq.c     **** 	decNumber x;
4242:src/xeq.c     **** 
4243:src/xeq.c     **** 	getX(&x);
4244:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
4245:src/xeq.c     **** }
4246:src/xeq.c     **** 
4247:src/xeq.c     **** void isSpecial(enum nilop op) {
4248:src/xeq.c     **** 	decNumber x;
4249:src/xeq.c     **** 
4250:src/xeq.c     **** 	getX(&x);
4251:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
4252:src/xeq.c     **** }
4253:src/xeq.c     **** 
4254:src/xeq.c     **** void op_entryp(enum nilop op) {
4255:src/xeq.c     **** 	fin_tst(State.entryp);
4256:src/xeq.c     **** }
4257:src/xeq.c     **** 
4258:src/xeq.c     **** /* Bulk register operations */
4259:src/xeq.c     **** int reg_decode(int *s, int *n, int *d, int flash) {
4260:src/xeq.c     **** 	decNumber x, y;
4261:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
4262:src/xeq.c     **** 
4263:src/xeq.c     **** 	if (is_intmode()) {
4264:src/xeq.c     **** 		bad_mode_error();
4265:src/xeq.c     **** 		return 1;
4266:src/xeq.c     **** 	}
ARM GAS  /tmp/ccBFDvgN.s 			page 89


4267:src/xeq.c     **** 	getX(&x);			// sss.nnddd~
4268:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
4269:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
4270:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
4271:src/xeq.c     **** 
4272:src/xeq.c     **** 	if (rsrc < 0) {
4273:src/xeq.c     **** 		if (!flash)
4274:src/xeq.c     **** 			goto range_error;
4275:src/xeq.c     **** 		rsrc = -rsrc;
4276:src/xeq.c     **** 	}
4277:src/xeq.c     **** 	else
4278:src/xeq.c     **** 		flash = 0;
4279:src/xeq.c     **** 
4280:src/xeq.c     **** 	rdest = rsrc % 1000;		// ddd
4281:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
4282:src/xeq.c     **** 	num = rsrc % 100;		// nn
4283:src/xeq.c     **** 	rsrc /= 100;			// sss
4284:src/xeq.c     **** 
4285:src/xeq.c     **** 	mx_src = flash ? BackupFlash._numregs
4286:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
4287:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
4288:src/xeq.c     **** 	       : global_regs();
4289:src/xeq.c     **** 	if (rsrc >= mx_src)
4290:src/xeq.c     **** 		goto range_error;
4291:src/xeq.c     **** 
4292:src/xeq.c     **** 	if (d != NULL) {
4293:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
4294:src/xeq.c     **** 
4295:src/xeq.c     **** 		if (num == 0) {
4296:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
4297:src/xeq.c     **** 			if (flash || (rsrc >= LOCAL_REG_BASE) != (rdest >= LOCAL_REG_BASE))
4298:src/xeq.c     **** 				// source & destination in different memory areas
4299:src/xeq.c     **** 				num = mx_dest < mx_src ? mx_dest : mx_src;
4300:src/xeq.c     **** 			else {
4301:src/xeq.c     **** 				if (rsrc > rdest) {
4302:src/xeq.c     **** 					num = mx_src - rsrc;
4303:src/xeq.c     **** 					q = rsrc - rdest;
4304:src/xeq.c     **** 				}
4305:src/xeq.c     **** 				else {
4306:src/xeq.c     **** 					num = mx_dest - rdest;
4307:src/xeq.c     **** 					q = rdest - rsrc;
4308:src/xeq.c     **** 				}
4309:src/xeq.c     **** 				if (num > q)
4310:src/xeq.c     **** 					num = q;
4311:src/xeq.c     **** 			}
4312:src/xeq.c     **** 		}
4313:src/xeq.c     **** 		if (rdest >= LOCAL_REG_BASE)
4314:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
4315:src/xeq.c     **** 		if (rdest + num > mx_dest)
4316:src/xeq.c     **** 			goto range_error;
4317:src/xeq.c     **** 		// Set pointer
4318:src/xeq.c     **** 		*d = rdest;
4319:src/xeq.c     **** 	}
4320:src/xeq.c     **** 	else {
4321:src/xeq.c     **** 		if (num == 0) {
4322:src/xeq.c     **** 			num = mx_src - rsrc;
4323:src/xeq.c     **** 		}
ARM GAS  /tmp/ccBFDvgN.s 			page 90


4324:src/xeq.c     **** 	}
4325:src/xeq.c     **** 	if (rsrc + num > mx_src)
4326:src/xeq.c     **** 		goto range_error;
4327:src/xeq.c     **** 
4328:src/xeq.c     **** 	// Now point to the correct source register
4329:src/xeq.c     **** 	*s = flash ? FLASH_REG_BASE + rsrc : rsrc;
4330:src/xeq.c     **** 	*n = num;
4331:src/xeq.c     **** 
4332:src/xeq.c     **** 	return 0;
4333:src/xeq.c     **** 
4334:src/xeq.c     **** range_error:
4335:src/xeq.c     **** 	report_err(ERR_RANGE);
4336:src/xeq.c     **** 	return 1;
4337:src/xeq.c     **** }
4338:src/xeq.c     **** 
4339:src/xeq.c     **** void op_regcopy(enum nilop op) {
4340:src/xeq.c     **** 	int s, n, d;
4341:src/xeq.c     **** 
4342:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 1))
4343:src/xeq.c     **** 		return;
4344:src/xeq.c     **** 	move_regs(get_reg_n(d), get_reg_n(s), n);
4345:src/xeq.c     **** }
4346:src/xeq.c     **** 
4347:src/xeq.c     **** void op_regswap(enum nilop op) {
4348:src/xeq.c     **** 	int s, n, d, i;
4349:src/xeq.c     **** 
4350:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 0) || s == d)
4351:src/xeq.c     **** 		return;
4352:src/xeq.c     **** 	else {
4353:src/xeq.c     **** 		if ((s > d && d + n > s) || (d > s && s + n > d))
4354:src/xeq.c     **** 			report_err(ERR_RANGE);
4355:src/xeq.c     **** 		else {
4356:src/xeq.c     **** 			for (i = 0; i < n; i++)
4357:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
4358:src/xeq.c     **** 		}
4359:src/xeq.c     **** 	}
4360:src/xeq.c     **** }
4361:src/xeq.c     **** 
4362:src/xeq.c     **** void op_regclr(enum nilop op) {
4363:src/xeq.c     **** 	int s, n;
4364:src/xeq.c     **** 
4365:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0))
4366:src/xeq.c     **** 		return;
4367:src/xeq.c     **** 	zero_regs(get_reg_n(s), n);
4368:src/xeq.c     **** }
4369:src/xeq.c     **** 
4370:src/xeq.c     **** void op_regsort(enum nilop op) {
4371:src/xeq.c     **** 	int s, n;
4372:src/xeq.c     **** 	decNumber pivot, a;
4373:src/xeq.c     **** 	int beg[10], end[10], i;
4374:src/xeq.c     **** 
4375:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0) || n == 1)
4376:src/xeq.c     **** 		return;
4377:src/xeq.c     **** 
4378:src/xeq.c     **** 	/* Non-recursive quicksort */
4379:src/xeq.c     **** 	beg[0] = 0;
4380:src/xeq.c     **** 	end[0] = n;
ARM GAS  /tmp/ccBFDvgN.s 			page 91


4381:src/xeq.c     **** 	i = 0;
4382:src/xeq.c     **** 	while (i>=0) {
4383:src/xeq.c     **** 		int L = beg[i];
4384:src/xeq.c     **** 		int R = end[i] - 1;
4385:src/xeq.c     **** 		if (L<R) {
4386:src/xeq.c     **** 			const int pvt = s + L;
4387:src/xeq.c     **** 			getRegister(&pivot, pvt);
4388:src/xeq.c     **** 			while (L<R) {
4389:src/xeq.c     **** 				while (L<R) {
4390:src/xeq.c     **** 					getRegister(&a, s + R);
4391:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
4392:src/xeq.c     **** 						break;
4393:src/xeq.c     **** 					R--;
4394:src/xeq.c     **** 				}
4395:src/xeq.c     **** 				if (L<R)
4396:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
4397:src/xeq.c     **** 				while (L<R) {
4398:src/xeq.c     **** 					getRegister(&a, s + L);
4399:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
4400:src/xeq.c     **** 						break;
4401:src/xeq.c     **** 					L++;
4402:src/xeq.c     **** 				}
4403:src/xeq.c     **** 				if (L<R)
4404:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
4405:src/xeq.c     **** 			}
4406:src/xeq.c     **** 			setRegister(s + L, &pivot);
4407:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
4408:src/xeq.c     **** 				beg[i+1] = beg[i];
4409:src/xeq.c     **** 				end[i+1] = L;
4410:src/xeq.c     **** 				beg[i] = L+1;
4411:src/xeq.c     **** 			} else {
4412:src/xeq.c     **** 				beg[i+1] = L+1;
4413:src/xeq.c     **** 				end[i+1] = end[i];
4414:src/xeq.c     **** 				end[i] = L;
4415:src/xeq.c     **** 			}
4416:src/xeq.c     **** 			i++;
4417:src/xeq.c     **** 		} else
4418:src/xeq.c     **** 			i--;
4419:src/xeq.c     **** 	}
4420:src/xeq.c     **** }
4421:src/xeq.c     **** 
4422:src/xeq.c     **** 
4423:src/xeq.c     **** 
4424:src/xeq.c     **** /* Print a single program step nicely.
4425:src/xeq.c     ****  */
4426:src/xeq.c     **** static void print_step(const opcode op) {
4427:src/xeq.c     **** 	char buf[16];
4428:src/xeq.c     **** 	const unsigned int pc = state_pc();
4429:src/xeq.c     **** 	char *p = TraceBuffer;
4430:src/xeq.c     **** 
4431:src/xeq.c     **** 	if (isXROM(pc)) {
4432:src/xeq.c     **** 		*p++ = 'x';
4433:src/xeq.c     **** 	} else if (isLIB(pc)) {
4434:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
4435:src/xeq.c     **** 		*p++ = ' ';
4436:src/xeq.c     **** 	}
4437:src/xeq.c     **** 	if (pc == 0)
ARM GAS  /tmp/ccBFDvgN.s 			page 92


4438:src/xeq.c     **** 		scopy(p, "000:");
4439:src/xeq.c     **** 	else {
4440:src/xeq.c     **** 		p = num_arg_0(p, user_pc(pc), 3);
4441:src/xeq.c     **** 		*p++ = ':';
4442:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
4443:src/xeq.c     **** 		if (*p == '?')
4444:src/xeq.c     **** 			*p = '\0';
4445:src/xeq.c     **** 	}
4446:src/xeq.c     **** 	State2.disp_small = 1;
4447:src/xeq.c     **** 	DispMsg = TraceBuffer;
4448:src/xeq.c     **** }
4449:src/xeq.c     **** 
4450:src/xeq.c     **** 
4451:src/xeq.c     **** /* When stuff gets done, there are some bits of state that need
4452:src/xeq.c     ****  * to be reset -- SHOW, ->base change the display mode until something
4453:src/xeq.c     ****  * happens.  This should be called on that something.
4454:src/xeq.c     ****  */
4455:src/xeq.c     **** void reset_volatile_state(void) {
4456:src/xeq.c     **** 	// extern int IntMaxWindow;
4457:src/xeq.c     **** 	// IntMaxWindow = 0;
4458:src/xeq.c     **** 	State2.window = 0;
4459:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
4460:src/xeq.c     **** }
4461:src/xeq.c     **** 
4462:src/xeq.c     **** 
4463:src/xeq.c     **** /*
4464:src/xeq.c     ****  *  Called by any long running function
4465:src/xeq.c     ****  */
4466:src/xeq.c     **** void busy(void)
4467:src/xeq.c     **** {
4468:src/xeq.c     **** 	/*
4469:src/xeq.c     **** 	 *  Serve the hardware watch dog
4470:src/xeq.c     **** 	 */
4471:src/xeq.c     **** 	watchdog();
4472:src/xeq.c     **** 
4473:src/xeq.c     **** 	/*
4474:src/xeq.c     **** 	 *  Increase the speed
4475:src/xeq.c     **** 	 */
4476:src/xeq.c     **** 	update_speed(1);
4477:src/xeq.c     **** 
4478:src/xeq.c     **** 	/*
4479:src/xeq.c     **** 	 *  Indicate busy state to the user
4480:src/xeq.c     **** 	 */
4481:src/xeq.c     **** 	if (!Busy && !Running) {
4482:src/xeq.c     **** 		Busy = 1;
4483:src/xeq.c     **** 		message("Wait...", NULL);
4484:src/xeq.c     **** 	}
4485:src/xeq.c     **** }
4486:src/xeq.c     **** 
4487:src/xeq.c     **** /***************************************************************************
4488:src/xeq.c     ****  * Function dispatchers.
4489:src/xeq.c     ****  */
4490:src/xeq.c     **** 
4491:src/xeq.c     **** /*
4492:src/xeq.c     ****  *  Check for a call into XROM space.
4493:src/xeq.c     ****  *  Fix the pointer alignment on the go.
4494:src/xeq.c     ****  */
ARM GAS  /tmp/ccBFDvgN.s 			page 93


4495:src/xeq.c     **** #ifdef REALBUILD
4496:src/xeq.c     **** typedef unsigned long uintptr_t;
4497:src/xeq.c     **** #else
4498:src/xeq.c     **** #include <stdint.h>
4499:src/xeq.c     **** #endif
4500:src/xeq.c     **** 
4501:src/xeq.c     **** static const s_opcode *check_for_xrom_address(void *fp)
4502:src/xeq.c     **** {
4503:src/xeq.c     **** 	const s_opcode *xp = (const s_opcode *) ((uintptr_t ) fp & ~1);
4504:src/xeq.c     **** 	if (xp < xrom)
4505:src/xeq.c     **** 		return NULL;
4506:src/xeq.c     **** #ifndef REALBUILD
4507:src/xeq.c     **** 	// On the device, XROM is at the end so this is not needed
4508:src/xeq.c     **** 	if (xp >= xrom + xrom_size)
4509:src/xeq.c     **** 		return NULL;
4510:src/xeq.c     **** #endif
4511:src/xeq.c     **** 	return xp;
4512:src/xeq.c     **** }
4513:src/xeq.c     **** 
4514:src/xeq.c     **** /*
4515:src/xeq.c     ****  *  Check for a call into XROM space and dispatch it.
4516:src/xeq.c     ****  */
4517:src/xeq.c     **** static int dispatch_xrom(void *fp)
4518:src/xeq.c     **** {
4519:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
4520:src/xeq.c     **** 	if (xp == NULL)
4521:src/xeq.c     **** 		return 0;
4522:src/xeq.c     **** 	// set_lift();
4523:src/xeq.c     **** 	UserLocalRegs = LocalRegs;
4524:src/xeq.c     **** 	XromRunning = 1;
4525:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
4526:src/xeq.c     **** 	xeq_xrom();
4527:src/xeq.c     **** 	return 1;
4528:src/xeq.c     **** }
4529:src/xeq.c     **** 
4530:src/xeq.c     **** /*
4531:src/xeq.c     ****  *  Return an integer result from a decimal value, setting flags properly
4532:src/xeq.c     ****  */
4533:src/xeq.c     **** static long long int intResult(decNumber *r) {
 644              		.loc 1 4533 46 is_stmt 1 view -0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 80
 647              		@ frame_needed = 0, uses_anonymous_args = 0
4534:src/xeq.c     **** 	unsigned long long int i;
 648              		.loc 1 4534 2 view .LVU190
4535:src/xeq.c     **** 	int s;
 649              		.loc 1 4535 2 view .LVU191
4536:src/xeq.c     **** 	decNumber ri, t;
 650              		.loc 1 4536 2 view .LVU192
4537:src/xeq.c     **** 
4538:src/xeq.c     **** 	decNumberRoundDigits(&t, r, 25, DEC_ROUND_HALF_EVEN);
 651              		.loc 1 4538 2 view .LVU193
4533:src/xeq.c     **** 	unsigned long long int i;
 652              		.loc 1 4533 46 is_stmt 0 view .LVU194
 653 0000 30B5     		push	{r4, r5, lr}
 654              		.cfi_def_cfa_offset 12
 655              		.cfi_offset 4, -12
ARM GAS  /tmp/ccBFDvgN.s 			page 94


 656              		.cfi_offset 5, -8
 657              		.cfi_offset 14, -4
 658 0002 95B0     		sub	sp, sp, #84
 659              		.cfi_def_cfa_offset 96
 660              		.loc 1 4538 2 view .LVU195
 661 0004 0323     		movs	r3, #3
 662 0006 1922     		movs	r2, #25
4533:src/xeq.c     **** 	unsigned long long int i;
 663              		.loc 1 4533 46 view .LVU196
 664 0008 0146     		mov	r1, r0
 665              		.loc 1 4538 2 view .LVU197
 666 000a 0BA8     		add	r0, sp, #44
 667              	.LVL49:
 668              		.loc 1 4538 2 view .LVU198
 669 000c FFF7FEFF 		bl	decNumberRoundDigits
 670              	.LVL50:
4539:src/xeq.c     **** 	decNumberTrunc(&ri, &t);
 671              		.loc 1 4539 2 is_stmt 1 view .LVU199
 672 0010 0BA9     		add	r1, sp, #44
 673 0012 02A8     		add	r0, sp, #8
 674 0014 FFF7FEFF 		bl	decNumberTrunc
 675              	.LVL51:
4540:src/xeq.c     **** 	set_carry(dn_eq(&ri, &t) ? 0 : 1);
 676              		.loc 1 4540 2 view .LVU200
 677              		.loc 1 4540 12 is_stmt 0 view .LVU201
 678 0018 0BA9     		add	r1, sp, #44
 679 001a 02A8     		add	r0, sp, #8
 680 001c FFF7FEFF 		bl	dn_eq
 681              	.LVL52:
 682              		.loc 1 4540 2 view .LVU202
 683 0020 B0FA80F0 		clz	r0, r0
 684 0024 4009     		lsrs	r0, r0, #5
 685 0026 FFF7FEFF 		bl	set_carry
 686              	.LVL53:
4541:src/xeq.c     **** 
4542:src/xeq.c     **** 	if (decNumberIsNaN(&t)) {
 687              		.loc 1 4542 2 is_stmt 1 view .LVU203
 688              		.loc 1 4542 6 is_stmt 0 view .LVU204
 689 002a 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 690              		.loc 1 4542 5 view .LVU205
 691 002e 13F0300F 		tst	r3, #48
 692 0032 22D1     		bne	.L67
4543:src/xeq.c     **** 		report_err(ERR_DOMAIN);
4544:src/xeq.c     **** 		return 0;
4545:src/xeq.c     **** 	}
4546:src/xeq.c     **** 	if (decNumberIsSpecial(&t)) {
 693              		.loc 1 4546 2 is_stmt 1 view .LVU206
 694              		.loc 1 4546 5 is_stmt 0 view .LVU207
 695 0034 13F0700F 		tst	r3, #112
 696 0038 18D1     		bne	.L68
4547:src/xeq.c     **** 		set_overflow(1);
4548:src/xeq.c     **** 		return 0;
4549:src/xeq.c     **** 	}
4550:src/xeq.c     **** 	i = dn_to_ull(&ri, &s);
 697              		.loc 1 4550 2 is_stmt 1 view .LVU208
 698              		.loc 1 4550 6 is_stmt 0 view .LVU209
 699 003a 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccBFDvgN.s 			page 95


 700 003c 01A9     		add	r1, sp, #4
 701 003e FFF7FEFF 		bl	dn_to_ull
 702              	.LVL54:
 703 0042 0C46     		mov	r4, r1
4551:src/xeq.c     **** 	dn_abs(&t, &t);
 704              		.loc 1 4551 2 view .LVU210
 705 0044 0BA9     		add	r1, sp, #44
4550:src/xeq.c     **** 	dn_abs(&t, &t);
 706              		.loc 1 4550 6 view .LVU211
 707 0046 0546     		mov	r5, r0
 708              	.LVL55:
 709              		.loc 1 4551 2 is_stmt 1 view .LVU212
 710 0048 0846     		mov	r0, r1
 711              	.LVL56:
 712              		.loc 1 4551 2 is_stmt 0 view .LVU213
 713 004a FFF7FEFF 		bl	dn_abs
 714              	.LVL57:
4552:src/xeq.c     **** 	set_overflow(check_overflow(i) || dn_ge(&t, &const_2pow64));
 715              		.loc 1 4552 2 is_stmt 1 view .LVU214
 716              		.loc 1 4552 15 is_stmt 0 view .LVU215
 717 004e 2846     		mov	r0, r5
 718 0050 2146     		mov	r1, r4
 719 0052 FFF7FEFF 		bl	check_overflow
 720              	.LVL58:
 721              		.loc 1 4552 2 view .LVU216
 722 0056 E8B1     		cbz	r0, .L69
 723 0058 0120     		movs	r0, #1
 724              	.L63:
 725              		.loc 1 4552 2 discriminator 6 view .LVU217
 726 005a FFF7FEFF 		bl	set_overflow
 727              	.LVL59:
4553:src/xeq.c     **** 	return build_value(i, s);
 728              		.loc 1 4553 2 is_stmt 1 discriminator 6 view .LVU218
 729              		.loc 1 4553 9 is_stmt 0 discriminator 6 view .LVU219
 730 005e 019A     		ldr	r2, [sp, #4]
 731 0060 2846     		mov	r0, r5
 732 0062 2146     		mov	r1, r4
 733 0064 FFF7FEFF 		bl	build_value
 734              	.LVL60:
4554:src/xeq.c     **** }
 735              		.loc 1 4554 1 discriminator 6 view .LVU220
 736 0068 15B0     		add	sp, sp, #84
 737              		.cfi_remember_state
 738              		.cfi_def_cfa_offset 12
 739              		@ sp needed
 740 006a 30BD     		pop	{r4, r5, pc}
 741              	.LVL61:
 742              	.L68:
 743              		.cfi_restore_state
4547:src/xeq.c     **** 		return 0;
 744              		.loc 1 4547 3 is_stmt 1 view .LVU221
 745 006c 0120     		movs	r0, #1
 746 006e FFF7FEFF 		bl	set_overflow
 747              	.LVL62:
4548:src/xeq.c     **** 	}
 748              		.loc 1 4548 3 view .LVU222
4548:src/xeq.c     **** 	}
ARM GAS  /tmp/ccBFDvgN.s 			page 96


 749              		.loc 1 4548 10 is_stmt 0 view .LVU223
 750 0072 0020     		movs	r0, #0
 751 0074 0146     		mov	r1, r0
 752              		.loc 1 4554 1 view .LVU224
 753 0076 15B0     		add	sp, sp, #84
 754              		.cfi_remember_state
 755              		.cfi_def_cfa_offset 12
 756              		@ sp needed
 757 0078 30BD     		pop	{r4, r5, pc}
 758              	.L67:
 759              		.cfi_restore_state
4543:src/xeq.c     **** 		return 0;
 760              		.loc 1 4543 3 is_stmt 1 view .LVU225
 761              	.LVL63:
 762              	.LBB1345:
 763              	.LBI1345:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 764              		.loc 1 546 5 view .LVU226
 765              	.LBB1346:
 547:src/xeq.c     **** 		Error = e;
 766              		.loc 1 547 2 view .LVU227
 547:src/xeq.c     **** 		Error = e;
 767              		.loc 1 547 12 is_stmt 0 view .LVU228
 768 007a 0A4B     		ldr	r3, .L70
 547:src/xeq.c     **** 		Error = e;
 769              		.loc 1 547 5 view .LVU229
 770 007c 1A68     		ldr	r2, [r3]
 771 007e 2AB9     		cbnz	r2, .L64
 772              	.LVL64:
 773              	.LBB1347:
 774              	.LBI1347:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 775              		.loc 1 546 5 is_stmt 1 view .LVU230
 776              	.LBB1348:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 777              		.loc 1 548 3 view .LVU231
 778              	.LBE1348:
 779              	.LBE1347:
 780              	.LBE1346:
 781              	.LBE1345:
4544:src/xeq.c     **** 	}
 782              		.loc 1 4544 10 is_stmt 0 view .LVU232
 783 0080 0020     		movs	r0, #0
 784              	.LBB1355:
 785              	.LBB1353:
 786              	.LBB1351:
 787              	.LBB1349:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 788              		.loc 1 548 9 view .LVU233
 789 0082 0122     		movs	r2, #1
 790              	.LBE1349:
 791              	.LBE1351:
 792              	.LBE1353:
 793              	.LBE1355:
4544:src/xeq.c     **** 	}
 794              		.loc 1 4544 10 view .LVU234
 795 0084 0146     		mov	r1, r0
ARM GAS  /tmp/ccBFDvgN.s 			page 97


 796              	.LBB1356:
 797              	.LBB1354:
 798              	.LBB1352:
 799              	.LBB1350:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 800              		.loc 1 548 9 view .LVU235
 801 0086 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 802              		.loc 1 549 3 is_stmt 1 view .LVU236
 803              	.LBE1350:
 804              	.LBE1352:
 805              	.LBE1354:
 806              	.LBE1356:
 807              		.loc 1 4554 1 is_stmt 0 view .LVU237
 808 0088 15B0     		add	sp, sp, #84
 809              		.cfi_remember_state
 810              		.cfi_def_cfa_offset 12
 811              		@ sp needed
 812 008a 30BD     		pop	{r4, r5, pc}
 813              	.LVL65:
 814              	.L64:
 815              		.cfi_restore_state
4544:src/xeq.c     **** 	}
 816              		.loc 1 4544 10 view .LVU238
 817 008c 0020     		movs	r0, #0
 818 008e 0146     		mov	r1, r0
 819              	.LVL66:
 820              		.loc 1 4554 1 view .LVU239
 821 0090 15B0     		add	sp, sp, #84
 822              		.cfi_remember_state
 823              		.cfi_def_cfa_offset 12
 824              		@ sp needed
 825 0092 30BD     		pop	{r4, r5, pc}
 826              	.LVL67:
 827              	.L69:
 828              		.cfi_restore_state
4552:src/xeq.c     **** 	return build_value(i, s);
 829              		.loc 1 4552 36 discriminator 2 view .LVU240
 830 0094 0449     		ldr	r1, .L70+4
 831 0096 0BA8     		add	r0, sp, #44
 832 0098 FFF7FEFF 		bl	dn_lt
 833              	.LVL68:
4552:src/xeq.c     **** 	return build_value(i, s);
 834              		.loc 1 4552 2 discriminator 2 view .LVU241
 835 009c B0FA80F0 		clz	r0, r0
 836 00a0 4009     		lsrs	r0, r0, #5
 837 00a2 DAE7     		b	.L63
 838              	.L71:
 839              		.align	2
 840              	.L70:
 841 00a4 00000000 		.word	Error
 842 00a8 00000000 		.word	const_2pow64
 843              		.cfi_endproc
 844              	.LFE239:
 846              		.section	.text.check_stack_overlap,"ax",%progbits
 847              		.align	1
 848              		.p2align 2,,3
ARM GAS  /tmp/ccBFDvgN.s 			page 98


 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 852              		.fpu fpv4-sp-d16
 854              	check_stack_overlap:
 855              	.LVL69:
 856              	.LFB147:
2137:src/xeq.c     **** 	const int n = stack_size();
 857              		.loc 1 2137 50 is_stmt 1 view -0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861              		@ link register save eliminated.
2138:src/xeq.c     **** 
 862              		.loc 1 2138 2 view .LVU243
 863              	.LBB1383:
 864              	.LBI1383:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 865              		.loc 1 712 5 view .LVU244
 866              	.LBB1384:
 713:src/xeq.c     **** 		return 4;
 867              		.loc 1 713 2 view .LVU245
 713:src/xeq.c     **** 		return 4;
 868              		.loc 1 713 8 is_stmt 0 view .LVU246
 869 0000 194B     		ldr	r3, .L83
 870 0002 1A68     		ldr	r2, [r3]
 713:src/xeq.c     **** 		return 4;
 871              		.loc 1 713 6 view .LVU247
 872 0004 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 873              		.loc 1 713 5 view .LVU248
 874 0008 1B07     		lsls	r3, r3, #28
 875              	.LBE1384:
 876              	.LBE1383:
2137:src/xeq.c     **** 	const int n = stack_size();
 877              		.loc 1 2137 50 view .LVU249
 878 000a 30B4     		push	{r4, r5}
 879              		.cfi_def_cfa_offset 8
 880              		.cfi_offset 4, -8
 881              		.cfi_offset 5, -4
 882              	.LBB1389:
 883              	.LBB1387:
 713:src/xeq.c     **** 		return 4;
 884              		.loc 1 713 5 view .LVU250
 885 000c 25D5     		bpl	.L77
 886              	.LBB1385:
 887              	.LBI1385:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 888              		.loc 1 185 5 is_stmt 1 view .LVU251
 889              	.LBB1386:
 186:src/xeq.c     **** }
 890              		.loc 1 186 2 view .LVU252
 186:src/xeq.c     **** }
 891              		.loc 1 186 9 is_stmt 0 view .LVU253
 892 000e B2F8E037 		ldrh	r3, [r2, #2016]
 893              	.LBE1386:
 894              	.LBE1385:
ARM GAS  /tmp/ccBFDvgN.s 			page 99


 713:src/xeq.c     **** 		return 4;
 895              		.loc 1 713 27 view .LVU254
 896 0012 9B0B     		lsrs	r3, r3, #14
 897 0014 032B     		cmp	r3, #3
 898 0016 1BD0     		beq	.L82
 899              	.L79:
 900 0018 0823     		movs	r3, #8
 715:src/xeq.c     **** }
 901              		.loc 1 715 9 view .LVU255
 902 001a 1C46     		mov	r4, r3
 903              	.L73:
 904              	.LVL70:
 715:src/xeq.c     **** }
 905              		.loc 1 715 9 view .LVU256
 906              	.LBE1387:
 907              	.LBE1389:
2140:src/xeq.c     **** 		return n;
 908              		.loc 1 2140 2 is_stmt 1 view .LVU257
 909              	.LBB1390:
 910              	.LBB1391:
 911              	.LBB1392:
 912              	.LBB1393:
 913              	.LBB1394:
1119:src/xeq.c     **** }
 914              		.loc 1 1119 24 is_stmt 0 view .LVU258
 915 001c B2F8E857 		ldrh	r5, [r2, #2024]
 916              	.LBE1394:
 917              	.LBE1393:
 918              	.LBB1397:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 919              		.loc 1 243 24 view .LVU259
 920 0020 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 921              	.LBE1397:
 922              	.LBB1398:
 923              	.LBB1395:
1119:src/xeq.c     **** }
 924              		.loc 1 1119 24 view .LVU260
 925 0024 44F20101 		movw	r1, #16385
 926              	.LBE1395:
 927              	.LBE1398:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 928              		.loc 1 242 5 view .LVU261
 929 0028 2940     		ands	r1, r1, r5
 930 002a B1F5804F 		cmp	r1, #16384
 931              	.LBB1399:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 932              		.loc 1 243 13 view .LVU262
 933 002e 08BF     		it	eq
 934 0030 0C3A     		subeq	r2, r2, #12
 935              	.LBE1399:
 936              	.LBE1392:
 937              	.LBE1391:
 938              	.LBE1390:
2140:src/xeq.c     **** 		return n;
 939              		.loc 1 2140 10 view .LVU263
 940 0032 0344     		add	r3, r3, r0
 941              	.LBB1404:
ARM GAS  /tmp/ccBFDvgN.s 			page 100


 942              	.LBI1390:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 943              		.loc 1 253 14 is_stmt 1 view .LVU264
 944              	.LBE1404:
 254:src/xeq.c     **** }
 945              		.loc 1 254 2 view .LVU265
 946              	.LVL71:
 947              	.LBB1405:
 948              	.LBB1403:
 949              	.LBI1391:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 950              		.loc 1 241 14 view .LVU266
 951              	.LBB1402:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 952              		.loc 1 242 2 view .LVU267
 953              	.LBB1400:
 954              	.LBI1393:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 955              		.loc 1 1118 5 view .LVU268
 956              	.LBB1396:
1119:src/xeq.c     **** }
 957              		.loc 1 1119 2 view .LVU269
 958              	.LBE1396:
 959              	.LBE1400:
 960              	.LBB1401:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 961              		.loc 1 243 3 view .LVU270
 244:src/xeq.c     **** 	}
 962              		.loc 1 244 3 view .LVU271
 244:src/xeq.c     **** 	}
 963              		.loc 1 244 67 is_stmt 0 view .LVU272
 964 0034 08BF     		it	eq
 965 0036 5210     		asreq	r2, r2, #1
 966              	.LVL72:
 244:src/xeq.c     **** 	}
 967              		.loc 1 244 67 view .LVU273
 968              	.LBE1401:
 969              	.LBE1402:
 970              	.LBE1403:
 971              	.LBE1405:
2140:src/xeq.c     **** 		return n;
 972              		.loc 1 2140 5 view .LVU274
 973 0038 9342     		cmp	r3, r2
 974 003a 06D9     		bls	.L72
2140:src/xeq.c     **** 		return n;
 975              		.loc 1 2140 31 discriminator 1 view .LVU275
 976 003c 6F28     		cmp	r0, #111
 977 003e 04D8     		bhi	.L72
 978              	.LBB1406:
 979              	.LBI1406:
2137:src/xeq.c     **** 	const int n = stack_size();
 980              		.loc 1 2137 12 is_stmt 1 view .LVU276
 981              	.LVL73:
 982              	.LBB1407:
2143:src/xeq.c     **** 	return 0;
 983              		.loc 1 2143 2 view .LVU277
 984              	.LBB1408:
ARM GAS  /tmp/ccBFDvgN.s 			page 101


 985              	.LBI1408:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 986              		.loc 1 546 5 view .LVU278
 987              	.LBB1409:
 547:src/xeq.c     **** 		Error = e;
 988              		.loc 1 547 2 view .LVU279
 547:src/xeq.c     **** 		Error = e;
 989              		.loc 1 547 12 is_stmt 0 view .LVU280
 990 0040 0A4B     		ldr	r3, .L83+4
 991 0042 1C68     		ldr	r4, [r3]
 992              	.LVL74:
 547:src/xeq.c     **** 		Error = e;
 993              		.loc 1 547 5 view .LVU281
 994 0044 64B9     		cbnz	r4, .L80
 995              	.LVL75:
 996              	.LBB1410:
 997              	.LBI1410:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 998              		.loc 1 546 5 is_stmt 1 view .LVU282
 999              	.LBB1411:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1000              		.loc 1 548 3 view .LVU283
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1001              		.loc 1 548 9 is_stmt 0 view .LVU284
 1002 0046 0C22     		movs	r2, #12
 1003 0048 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1004              		.loc 1 549 3 is_stmt 1 view .LVU285
 1005              	.LVL76:
 1006              	.L72:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1007              		.loc 1 549 3 is_stmt 0 view .LVU286
 1008              	.LBE1411:
 1009              	.LBE1410:
 1010              	.LBE1409:
 1011              	.LBE1408:
 1012              	.LBE1407:
 1013              	.LBE1406:
2145:src/xeq.c     **** 
 1014              		.loc 1 2145 1 view .LVU287
 1015 004a 2046     		mov	r0, r4
 1016              	.LVL77:
2145:src/xeq.c     **** 
 1017              		.loc 1 2145 1 view .LVU288
 1018 004c 30BC     		pop	{r4, r5}
 1019              		.cfi_remember_state
 1020              		.cfi_restore 5
 1021              		.cfi_restore 4
 1022              		.cfi_def_cfa_offset 0
 1023 004e 7047     		bx	lr
 1024              	.LVL78:
 1025              	.L82:
 1026              		.cfi_restore_state
 1027              	.LBB1415:
 1028              	.LBB1388:
 713:src/xeq.c     **** 		return 4;
 1029              		.loc 1 713 44 view .LVU289
ARM GAS  /tmp/ccBFDvgN.s 			page 102


 1030 0050 074B     		ldr	r3, .L83+8
 713:src/xeq.c     **** 		return 4;
 1031              		.loc 1 713 41 view .LVU290
 1032 0052 93F90130 		ldrsb	r3, [r3, #1]
 1033 0056 002B     		cmp	r3, #0
 1034 0058 DEDB     		blt	.L79
 1035              	.L77:
 1036 005a 0423     		movs	r3, #4
 714:src/xeq.c     **** 	return 8;
 1037              		.loc 1 714 10 view .LVU291
 1038 005c 1C46     		mov	r4, r3
 1039 005e DDE7     		b	.L73
 1040              	.LVL79:
 1041              	.L80:
 714:src/xeq.c     **** 	return 8;
 1042              		.loc 1 714 10 view .LVU292
 1043              	.LBE1388:
 1044              	.LBE1415:
 1045              	.LBB1416:
 1046              	.LBB1414:
 1047              	.LBB1413:
 1048              	.LBB1412:
 1049 0060 0024     		movs	r4, #0
 1050              	.LVL80:
 714:src/xeq.c     **** 	return 8;
 1051              		.loc 1 714 10 view .LVU293
 1052              	.LBE1412:
 1053              	.LBE1413:
 1054              	.LBE1414:
 1055              	.LBE1416:
2145:src/xeq.c     **** 
 1056              		.loc 1 2145 1 view .LVU294
 1057 0062 2046     		mov	r0, r4
 1058              	.LVL81:
2145:src/xeq.c     **** 
 1059              		.loc 1 2145 1 view .LVU295
 1060 0064 30BC     		pop	{r4, r5}
 1061              		.cfi_restore 5
 1062              		.cfi_restore 4
 1063              		.cfi_def_cfa_offset 0
 1064 0066 7047     		bx	lr
 1065              	.L84:
 1066              		.align	2
 1067              	.L83:
 1068 0068 00000000 		.word	main_ram
 1069 006c 00000000 		.word	Error
 1070 0070 00000000 		.word	XromParams
 1071              		.cfi_endproc
 1072              	.LFE147:
 1074              		.section	.text.is_xrom,"ax",%progbits
 1075              		.align	1
 1076              		.p2align 2,,3
 1077              		.global	is_xrom
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccBFDvgN.s 			page 103


 1083              	is_xrom:
 1084              	.LFB3:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 1085              		.loc 1 185 19 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 186:src/xeq.c     **** }
 1090              		.loc 1 186 2 view .LVU297
 186:src/xeq.c     **** }
 1091              		.loc 1 186 9 is_stmt 0 view .LVU298
 1092 0000 054B     		ldr	r3, .L86
 1093 0002 1B68     		ldr	r3, [r3]
 1094 0004 B3F8E007 		ldrh	r0, [r3, #2016]
 1095 0008 800B     		lsrs	r0, r0, #14
 187:src/xeq.c     **** 
 1096              		.loc 1 187 1 view .LVU299
 1097 000a A0F10300 		sub	r0, #3
 1098 000e B0FA80F0 		clz	r0, r0
 1099 0012 4009     		lsrs	r0, r0, #5
 1100 0014 7047     		bx	lr
 1101              	.L87:
 1102 0016 00BF     		.align	2
 1103              	.L86:
 1104 0018 00000000 		.word	main_ram
 1105              		.cfi_endproc
 1106              	.LFE3:
 1108              		.section	.text.move_retstk,"ax",%progbits
 1109              		.align	1
 1110              		.p2align 2,,3
 1111              		.global	move_retstk
 1112              		.syntax unified
 1113              		.thumb
 1114              		.thumb_func
 1115              		.fpu fpv4-sp-d16
 1117              	move_retstk:
 1118              	.LVL82:
 1119              	.LFB4:
 196:src/xeq.c     **** #ifndef REALBUILD
 1120              		.loc 1 196 1 is_stmt 1 view -0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1124              		.loc 1 199 2 view .LVU301
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1125              		.loc 1 199 6 is_stmt 0 view .LVU302
 1126 0000 1A4B     		ldr	r3, .L99
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1127              		.loc 1 199 5 view .LVU303
 1128 0002 93F90130 		ldrsb	r3, [r3, #1]
 1129 0006 002B     		cmp	r3, #0
 1130 0008 25DB     		blt	.L97
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1131              		.loc 1 204 2 is_stmt 1 view .LVU304
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
ARM GAS  /tmp/ccBFDvgN.s 			page 104


 1132              		.loc 1 204 19 is_stmt 0 view .LVU305
 1133 000a 194B     		ldr	r3, .L99+4
 196:src/xeq.c     **** #ifndef REALBUILD
 1134              		.loc 1 196 1 view .LVU306
 1135 000c 70B5     		push	{r4, r5, r6, lr}
 1136              		.cfi_def_cfa_offset 16
 1137              		.cfi_offset 4, -16
 1138              		.cfi_offset 5, -12
 1139              		.cfi_offset 6, -8
 1140              		.cfi_offset 14, -4
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1141              		.loc 1 204 19 view .LVU307
 1142 000e 1A68     		ldr	r2, [r3]
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1143              		.loc 1 204 17 view .LVU308
 1144 0010 184D     		ldr	r5, .L99+8
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1145              		.loc 1 204 19 view .LVU309
 1146 0012 B2F9E217 		ldrsh	r1, [r2, #2018]
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1147              		.loc 1 204 17 view .LVU310
 1148 0016 2B68     		ldr	r3, [r5]
 1149 0018 0B44     		add	r3, r3, r1
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1150              		.loc 1 204 5 view .LVU311
 1151 001a C342     		cmn	r3, r0
 1152 001c 0446     		mov	r4, r0
 1153 001e 13D4     		bmi	.L98
 208:src/xeq.c     **** 	RetStk += distance;
 1154              		.loc 1 208 2 is_stmt 1 view .LVU312
 1155 0020 154E     		ldr	r6, .L99+12
 1156 0022 3368     		ldr	r3, [r6]
 208:src/xeq.c     **** 	RetStk += distance;
 1157              		.loc 1 208 27 is_stmt 0 view .LVU313
 1158 0024 0818     		adds	r0, r1, r0
 1159              	.LVL83:
 208:src/xeq.c     **** 	RetStk += distance;
 1160              		.loc 1 208 60 view .LVU314
 1161 0026 4A42     		rsbs	r2, r1, #0
 208:src/xeq.c     **** 	RetStk += distance;
 1162              		.loc 1 208 2 view .LVU315
 1163 0028 03EB4000 		add	r0, r3, r0, lsl #1
 1164 002c 03EB4101 		add	r1, r3, r1, lsl #1
 1165 0030 5200     		lsls	r2, r2, #1
 1166 0032 FFF7FEFF 		bl	xcopy
 1167              	.LVL84:
 209:src/xeq.c     **** 	RetStkSize += distance;
 1168              		.loc 1 209 2 is_stmt 1 view .LVU316
 209:src/xeq.c     **** 	RetStkSize += distance;
 1169              		.loc 1 209 9 is_stmt 0 view .LVU317
 1170 0036 3368     		ldr	r3, [r6]
 210:src/xeq.c     **** 	return 0;
 1171              		.loc 1 210 13 view .LVU318
 1172 0038 2868     		ldr	r0, [r5]
 209:src/xeq.c     **** 	RetStkSize += distance;
 1173              		.loc 1 209 9 view .LVU319
 1174 003a 03EB4403 		add	r3, r3, r4, lsl #1
ARM GAS  /tmp/ccBFDvgN.s 			page 105


 210:src/xeq.c     **** 	return 0;
 1175              		.loc 1 210 13 view .LVU320
 1176 003e 2044     		add	r0, r0, r4
 1177 0040 2860     		str	r0, [r5]
 209:src/xeq.c     **** 	RetStkSize += distance;
 1178              		.loc 1 209 9 view .LVU321
 1179 0042 3360     		str	r3, [r6]
 210:src/xeq.c     **** 	return 0;
 1180              		.loc 1 210 2 is_stmt 1 view .LVU322
 211:src/xeq.c     **** }
 1181              		.loc 1 211 2 view .LVU323
 211:src/xeq.c     **** }
 1182              		.loc 1 211 9 is_stmt 0 view .LVU324
 1183 0044 0020     		movs	r0, #0
 212:src/xeq.c     **** 
 1184              		.loc 1 212 1 view .LVU325
 1185 0046 70BD     		pop	{r4, r5, r6, pc}
 1186              	.LVL85:
 1187              	.L98:
 205:src/xeq.c     **** 		return 1;
 1188              		.loc 1 205 3 is_stmt 1 view .LVU326
 1189              	.LBB1429:
 1190              	.LBI1429:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1191              		.loc 1 546 5 view .LVU327
 1192              	.LBB1430:
 547:src/xeq.c     **** 		Error = e;
 1193              		.loc 1 547 2 view .LVU328
 547:src/xeq.c     **** 		Error = e;
 1194              		.loc 1 547 12 is_stmt 0 view .LVU329
 1195 0048 0C4B     		ldr	r3, .L99+16
 547:src/xeq.c     **** 		Error = e;
 1196              		.loc 1 547 5 view .LVU330
 1197 004a 1A68     		ldr	r2, [r3]
 1198 004c 52B9     		cbnz	r2, .L93
 1199              	.LVL86:
 1200              	.LBB1431:
 1201              	.LBI1431:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1202              		.loc 1 546 5 is_stmt 1 view .LVU331
 1203              	.LBB1432:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1204              		.loc 1 548 3 view .LVU332
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1205              		.loc 1 548 9 is_stmt 0 view .LVU333
 1206 004e 0B22     		movs	r2, #11
 1207 0050 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1208              		.loc 1 549 3 is_stmt 1 view .LVU334
 1209              	.LBE1432:
 1210              	.LBE1431:
 1211              	.LBE1430:
 1212              	.LBE1429:
 206:src/xeq.c     **** 	}
 1213              		.loc 1 206 10 is_stmt 0 view .LVU335
 1214 0052 0120     		movs	r0, #1
 1215              	.LVL87:
ARM GAS  /tmp/ccBFDvgN.s 			page 106


 212:src/xeq.c     **** 
 1216              		.loc 1 212 1 view .LVU336
 1217 0054 70BD     		pop	{r4, r5, r6, pc}
 1218              	.LVL88:
 1219              	.L97:
 1220              		.cfi_def_cfa_offset 0
 1221              		.cfi_restore 4
 1222              		.cfi_restore 5
 1223              		.cfi_restore 6
 1224              		.cfi_restore 14
 1225              	.LBB1434:
 1226              	.LBI1434:
 195:src/xeq.c     **** {
 1227              		.loc 1 195 5 is_stmt 1 view .LVU337
 195:src/xeq.c     **** {
 1228              		.loc 1 195 5 is_stmt 0 view .LVU338
 1229              	.LBE1434:
 200:src/xeq.c     **** 		return 1;
 1230              		.loc 1 200 3 is_stmt 1 view .LVU339
 1231              	.LBB1441:
 1232              	.LBB1435:
 1233              	.LBI1435:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1234              		.loc 1 546 5 view .LVU340
 1235              	.LBB1436:
 547:src/xeq.c     **** 		Error = e;
 1236              		.loc 1 547 2 view .LVU341
 547:src/xeq.c     **** 		Error = e;
 1237              		.loc 1 547 12 is_stmt 0 view .LVU342
 1238 0056 094B     		ldr	r3, .L99+16
 547:src/xeq.c     **** 		Error = e;
 1239              		.loc 1 547 5 view .LVU343
 1240 0058 1A68     		ldr	r2, [r3]
 1241 005a 2AB9     		cbnz	r2, .L92
 1242              	.LVL89:
 1243              	.LBB1437:
 1244              	.LBI1437:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1245              		.loc 1 546 5 is_stmt 1 view .LVU344
 1246              	.LBB1438:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1247              		.loc 1 548 3 view .LVU345
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1248              		.loc 1 548 9 is_stmt 0 view .LVU346
 1249 005c 0722     		movs	r2, #7
 1250 005e 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1251              		.loc 1 549 3 is_stmt 1 view .LVU347
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1252              		.loc 1 548 9 is_stmt 0 view .LVU348
 1253 0060 0120     		movs	r0, #1
 1254              	.LVL90:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1255              		.loc 1 548 9 view .LVU349
 1256 0062 7047     		bx	lr
 1257              	.LVL91:
 1258              	.L93:
ARM GAS  /tmp/ccBFDvgN.s 			page 107


 1259              		.cfi_def_cfa_offset 16
 1260              		.cfi_offset 4, -16
 1261              		.cfi_offset 5, -12
 1262              		.cfi_offset 6, -8
 1263              		.cfi_offset 14, -4
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1264              		.loc 1 548 9 view .LVU350
 1265              	.LBE1438:
 1266              	.LBE1437:
 1267              	.LBE1436:
 1268              	.LBE1435:
 1269              	.LBE1441:
 1270              	.LBB1442:
 1271              	.LBB1433:
 1272 0064 0120     		movs	r0, #1
 1273              	.LVL92:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1274              		.loc 1 548 9 view .LVU351
 1275              	.LBE1433:
 1276              	.LBE1442:
 212:src/xeq.c     **** 
 1277              		.loc 1 212 1 view .LVU352
 1278 0066 70BD     		pop	{r4, r5, r6, pc}
 1279              	.LVL93:
 1280              	.L92:
 1281              		.cfi_def_cfa_offset 0
 1282              		.cfi_restore 4
 1283              		.cfi_restore 5
 1284              		.cfi_restore 6
 1285              		.cfi_restore 14
 1286              	.LBB1443:
 1287              	.LBB1440:
 1288              	.LBB1439:
 212:src/xeq.c     **** 
 1289              		.loc 1 212 1 view .LVU353
 1290 0068 0120     		movs	r0, #1
 1291              	.LVL94:
 212:src/xeq.c     **** 
 1292              		.loc 1 212 1 view .LVU354
 1293              	.LBE1439:
 1294              	.LBE1440:
 1295              	.LBE1443:
 1296 006a 7047     		bx	lr
 1297              	.L100:
 1298              		.align	2
 1299              	.L99:
 1300 006c 00000000 		.word	XromParams
 1301 0070 00000000 		.word	main_ram
 1302 0074 00000000 		.word	RetStkSize
 1303 0078 00000000 		.word	RetStk
 1304 007c 00000000 		.word	Error
 1305              		.cfi_endproc
 1306              	.LFE4:
 1308              		.section	.text.local_levels,"ax",%progbits
 1309              		.align	1
 1310              		.p2align 2,,3
 1311              		.global	local_levels
ARM GAS  /tmp/ccBFDvgN.s 			page 108


 1312              		.syntax unified
 1313              		.thumb
 1314              		.thumb_func
 1315              		.fpu fpv4-sp-d16
 1317              	local_levels:
 1318              	.LFB5:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1319              		.loc 1 217 24 is_stmt 1 view -0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 0
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323              		@ link register save eliminated.
 218:src/xeq.c     **** }
 1324              		.loc 1 218 2 view .LVU356
 218:src/xeq.c     **** }
 1325              		.loc 1 218 9 is_stmt 0 view .LVU357
 1326 0000 074B     		ldr	r3, .L105
 1327 0002 1B68     		ldr	r3, [r3]
 1328 0004 B3F9DE37 		ldrsh	r3, [r3, #2014]
 218:src/xeq.c     **** }
 1329              		.loc 1 218 57 view .LVU358
 1330 0008 002B     		cmp	r3, #0
 1331 000a 01DB     		blt	.L104
 1332 000c 0020     		movs	r0, #0
 219:src/xeq.c     **** 
 1333              		.loc 1 219 1 view .LVU359
 1334 000e 7047     		bx	lr
 1335              	.L104:
 218:src/xeq.c     **** }
 1336              		.loc 1 218 25 discriminator 1 view .LVU360
 1337 0010 044A     		ldr	r2, .L105+4
 1338 0012 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 1339              		.loc 1 218 57 discriminator 1 view .LVU361
 1340 0014 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 1341 0018 C0F30B00 		ubfx	r0, r0, #0, #12
 1342 001c 7047     		bx	lr
 1343              	.L106:
 1344 001e 00BF     		.align	2
 1345              	.L105:
 1346 0020 00000000 		.word	main_ram
 1347 0024 00000000 		.word	RetStk
 1348              		.cfi_endproc
 1349              	.LFE5:
 1351              		.section	.text.local_regs_rarg,"ax",%progbits
 1352              		.align	1
 1353              		.p2align 2,,3
 1354              		.global	local_regs_rarg
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1358              		.fpu fpv4-sp-d16
 1360              	local_regs_rarg:
 1361              	.LVL95:
 1362              	.LFB6:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1363              		.loc 1 225 35 is_stmt 1 view -0
ARM GAS  /tmp/ccBFDvgN.s 			page 109


 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1368              		.loc 1 226 2 view .LVU363
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1369              		.loc 1 226 53 is_stmt 0 view .LVU364
 1370 0000 A0F17E03 		sub	r3, r0, #126
 1371 0004 012B     		cmp	r3, #1
 1372 0006 144B     		ldr	r3, .L116
 1373 0008 23D9     		bls	.L113
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1374              		.loc 1 226 53 discriminator 1 view .LVU365
 1375 000a 8028     		cmp	r0, #128
 1376 000c 11D0     		beq	.L114
 1377              	.LBB1444:
 1378              	.LBI1444:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1379              		.loc 1 1118 5 is_stmt 1 view .LVU366
 1380              	.LBB1445:
1119:src/xeq.c     **** }
 1381              		.loc 1 1119 2 view .LVU367
1119:src/xeq.c     **** }
 1382              		.loc 1 1119 12 is_stmt 0 view .LVU368
 1383 000e 1B68     		ldr	r3, [r3]
1119:src/xeq.c     **** }
 1384              		.loc 1 1119 24 view .LVU369
 1385 0010 B3F8E827 		ldrh	r2, [r3, #2024]
 1386 0014 44F20100 		movw	r0, #16385
 1387              	.LVL96:
1119:src/xeq.c     **** }
 1388              		.loc 1 1119 24 view .LVU370
 1389              	.LBE1445:
 1390              	.LBE1444:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1391              		.loc 1 226 73 view .LVU371
 1392 0018 1040     		ands	r0, r0, r2
 1393 001a A0F58040 		sub	r0, r0, #16384
 1394 001e B0FA80F0 		clz	r0, r0
 1395 0022 4009     		lsrs	r0, r0, #5
 1396 0024 0230     		adds	r0, r0, #2
 1397              	.L109:
 227:src/xeq.c     **** }
 1398              		.loc 1 227 2 is_stmt 1 discriminator 8 view .LVU372
 1399              	.LBB1446:
 1400              	.LBI1446:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1401              		.loc 1 217 5 discriminator 8 view .LVU373
 1402              	.LBB1447:
 218:src/xeq.c     **** }
 1403              		.loc 1 218 2 discriminator 8 view .LVU374
 218:src/xeq.c     **** }
 1404              		.loc 1 218 9 is_stmt 0 discriminator 8 view .LVU375
 1405 0026 B3F9DE37 		ldrsh	r3, [r3, #2014]
 218:src/xeq.c     **** }
 1406              		.loc 1 218 57 discriminator 8 view .LVU376
ARM GAS  /tmp/ccBFDvgN.s 			page 110


 1407 002a 002B     		cmp	r3, #0
 1408 002c 08DB     		blt	.L115
 1409              	.L112:
 1410 002e 0020     		movs	r0, #0
 1411              	.LBE1447:
 1412              	.LBE1446:
 228:src/xeq.c     **** 
 1413              		.loc 1 228 1 view .LVU377
 1414 0030 7047     		bx	lr
 1415              	.LVL97:
 1416              	.L114:
 228:src/xeq.c     **** 
 1417              		.loc 1 228 1 view .LVU378
 1418 0032 1B68     		ldr	r3, [r3]
 227:src/xeq.c     **** }
 1419              		.loc 1 227 2 is_stmt 1 view .LVU379
 1420              	.LBB1450:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1421              		.loc 1 217 5 view .LVU380
 1422              	.LBB1448:
 218:src/xeq.c     **** }
 1423              		.loc 1 218 2 view .LVU381
 218:src/xeq.c     **** }
 1424              		.loc 1 218 9 is_stmt 0 view .LVU382
 1425 0034 B3F9DE37 		ldrsh	r3, [r3, #2014]
 218:src/xeq.c     **** }
 1426              		.loc 1 218 57 view .LVU383
 1427 0038 002B     		cmp	r3, #0
 1428              	.LBE1448:
 1429              	.LBE1450:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1430              		.loc 1 226 53 view .LVU384
 1431 003a 4FF00300 		mov	r0, #3
 1432              	.LVL98:
 1433              	.LBB1451:
 1434              	.LBB1449:
 218:src/xeq.c     **** }
 1435              		.loc 1 218 57 view .LVU385
 1436 003e F6DA     		bge	.L112
 1437              	.L115:
 218:src/xeq.c     **** }
 1438              		.loc 1 218 25 view .LVU386
 1439 0040 064A     		ldr	r2, .L116+4
 1440 0042 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 1441              		.loc 1 218 57 view .LVU387
 1442 0044 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1443 0048 C3F30B03 		ubfx	r3, r3, #0, #12
 1444 004c 43FA00F0 		asr	r0, r3, r0
 1445 0050 7047     		bx	lr
 1446              	.LVL99:
 1447              	.L113:
 218:src/xeq.c     **** }
 1448              		.loc 1 218 57 view .LVU388
 1449 0052 1B68     		ldr	r3, [r3]
 1450              	.LBE1449:
 1451              	.LBE1451:
ARM GAS  /tmp/ccBFDvgN.s 			page 111


 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1452              		.loc 1 226 53 view .LVU389
 1453 0054 0220     		movs	r0, #2
 1454              	.LVL100:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1455              		.loc 1 226 53 view .LVU390
 1456 0056 E6E7     		b	.L109
 1457              	.L117:
 1458              		.align	2
 1459              	.L116:
 1460 0058 00000000 		.word	main_ram
 1461 005c 00000000 		.word	RetStk
 1462              		.cfi_endproc
 1463              	.LFE6:
 1465              		.section	.text.get_reg_limit,"ax",%progbits
 1466              		.align	1
 1467              		.p2align 2,,3
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1471              		.fpu fpv4-sp-d16
 1473              	get_reg_limit:
 1474              	.LVL101:
 1475              	.LFB248:
4555:src/xeq.c     **** 
4556:src/xeq.c     **** 
4557:src/xeq.c     **** #ifndef UNIVERSAL_DISPATCH
4558:src/xeq.c     **** 
4559:src/xeq.c     **** 
4560:src/xeq.c     **** /*
4561:src/xeq.c     ****  *  Call a monadic function by reusing the decimal code for integer mode
4562:src/xeq.c     ****  */
4563:src/xeq.c     **** long long int intMonadic(long long int x) {
4564:src/xeq.c     **** 	int s;
4565:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
4566:src/xeq.c     **** 	decNumber rx, r;
4567:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4568:src/xeq.c     **** 
4569:src/xeq.c     **** 	if (isNULL(monfuncs[f].mondreal))
4570:src/xeq.c     **** 		bad_mode_error();
4571:src/xeq.c     **** 	else {
4572:src/xeq.c     **** 		FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4573:src/xeq.c     **** #ifndef REALBUILD
4574:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4575:src/xeq.c     **** 			bad_mode_error();
4576:src/xeq.c     **** 		else 
4577:src/xeq.c     **** #endif
4578:src/xeq.c     **** 		{
4579:src/xeq.c     **** 			ullint_to_dn(&rx, vx);
4580:src/xeq.c     **** 			if (s)
4581:src/xeq.c     **** 				dn_minus(&rx, &rx);
4582:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
4583:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4584:src/xeq.c     **** 			else
4585:src/xeq.c     **** 				return intResult(&r);
4586:src/xeq.c     **** 		}
4587:src/xeq.c     **** 	}
ARM GAS  /tmp/ccBFDvgN.s 			page 112


4588:src/xeq.c     **** 	return 0;
4589:src/xeq.c     **** }
4590:src/xeq.c     **** 
4591:src/xeq.c     **** /*
4592:src/xeq.c     ****  *  Call a dyadic function by reusing the decimal code for integer mode
4593:src/xeq.c     ****  */
4594:src/xeq.c     **** long long int intDyadic(long long int y, long long int x) {
4595:src/xeq.c     **** 	int sx, sy;
4596:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4597:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
4598:src/xeq.c     **** 	decNumber rx, ry, r;
4599:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4600:src/xeq.c     **** 
4601:src/xeq.c     **** 	if (isNULL(dyfuncs[f].dydreal))
4602:src/xeq.c     **** 		bad_mode_error();
4603:src/xeq.c     **** 	else {
4604:src/xeq.c     **** 		FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4605:src/xeq.c     **** 
4606:src/xeq.c     **** #ifndef REALBUILD
4607:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4608:src/xeq.c     **** 			bad_mode_error();
4609:src/xeq.c     **** 		else 
4610:src/xeq.c     **** #endif
4611:src/xeq.c     **** 		{
4612:src/xeq.c     **** 			ullint_to_dn(&rx, vx);	if (sx) dn_minus(&rx, &rx);
4613:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
4614:src/xeq.c     **** 
4615:src/xeq.c     **** 			if (NULL == fp(&r, &ry, &rx))
4616:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4617:src/xeq.c     **** 			else
4618:src/xeq.c     **** 				return intResult(&r);
4619:src/xeq.c     **** 		}
4620:src/xeq.c     **** 	}
4621:src/xeq.c     **** 	return 0;
4622:src/xeq.c     **** }
4623:src/xeq.c     **** 
4624:src/xeq.c     **** 
4625:src/xeq.c     **** /* Dispatch routine for niladic functions.
4626:src/xeq.c     ****  */
4627:src/xeq.c     **** static void niladic(const opcode op) {
4628:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
4629:src/xeq.c     **** 
4630:src/xeq.c     **** 	process_cmdline();
4631:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
4632:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
4633:src/xeq.c     **** 			bad_mode_error();
4634:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
4635:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
4636:src/xeq.c     **** 			if (dispatch_xrom(fp))
4637:src/xeq.c     **** 				return;
4638:src/xeq.c     **** 			else {
4639:src/xeq.c     **** 				switch (NILADIC_NUMRESULTS(niladics[idx])) {
4640:src/xeq.c     **** 				case 2:	lift_if_enabled();
4641:src/xeq.c     **** 				case 1:	lift_if_enabled();
4642:src/xeq.c     **** 				default:
4643:src/xeq.c     **** 					fp((enum nilop)idx);
4644:src/xeq.c     **** 					break;
ARM GAS  /tmp/ccBFDvgN.s 			page 113


4645:src/xeq.c     **** 				}
4646:src/xeq.c     **** 			}
4647:src/xeq.c     **** 		}
4648:src/xeq.c     **** 	} else
4649:src/xeq.c     **** 		illegal(op);
4650:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
4651:src/xeq.c     **** 	if (ENTRY_RPN_ENABLED && (idx != OP_rCLX)) {
4652:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
4653:src/xeq.c     **** 	}
4654:src/xeq.c     **** 	else if ( (idx != OP_rCLX) && ( ((idx != OP_CENTER) ) && (C_LOCKED) ) ) {
4655:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
4656:src/xeq.c     **** 	}
4657:src/xeq.c     **** #else
4658:src/xeq.c     **** 	if (idx != OP_rCLX) set_lift();// normally, just don't turn on lift after CLX
4659:src/xeq.c     **** #endif
4660:src/xeq.c     **** }
4661:src/xeq.c     **** 
4662:src/xeq.c     **** 
4663:src/xeq.c     **** /* Dispatch routine for monadic operations.
4664:src/xeq.c     ****  * Since these functions take an argument from the X register, save it in
4665:src/xeq.c     ****  * lastx and then replace it with their result, we can factor out the common
4666:src/xeq.c     ****  * stack manipulatin code.
4667:src/xeq.c     ****  */
4668:src/xeq.c     **** static void monadic(const opcode op)
4669:src/xeq.c     **** {
4670:src/xeq.c     **** 	unsigned int f;
4671:src/xeq.c     **** 	process_cmdline_set_lift();
4672:src/xeq.c     **** 
4673:src/xeq.c     **** 	f = argKIND(op);
4674:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4675:src/xeq.c     **** 		if (is_intmode()) {
4676:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
4677:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
4678:src/xeq.c     **** 				if (dispatch_xrom(fp))
4679:src/xeq.c     **** 					return;
4680:src/xeq.c     **** 				else {
4681:src/xeq.c     **** 					long long int x = getX_int();
4682:src/xeq.c     **** 					x = fp(x);
4683:src/xeq.c     **** 					setlastX();
4684:src/xeq.c     **** 					setX_int(x);
4685:src/xeq.c     **** 				}
4686:src/xeq.c     **** 			} else
4687:src/xeq.c     **** 				bad_mode_error();
4688:src/xeq.c     **** 		} else {
4689:src/xeq.c     **** 			if (! isNULL(monfuncs[f].mondreal)) {
4690:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4691:src/xeq.c     **** 				if (dispatch_xrom(fp))
4692:src/xeq.c     **** 					return;
4693:src/xeq.c     **** 				else {
4694:src/xeq.c     **** 					decNumber x, r;
4695:src/xeq.c     **** 					getX(&x);
4696:src/xeq.c     **** 					if (NULL == fp(&r, &x))
4697:src/xeq.c     **** 						set_NaN(&r);
4698:src/xeq.c     **** 					setlastX();
4699:src/xeq.c     **** 					setX(&r);
4700:src/xeq.c     **** 				}
4701:src/xeq.c     **** 			} else
ARM GAS  /tmp/ccBFDvgN.s 			page 114


4702:src/xeq.c     **** 				bad_mode_error();
4703:src/xeq.c     **** 		}
4704:src/xeq.c     **** 	} else
4705:src/xeq.c     **** 		illegal(op);
4706:src/xeq.c     **** }
4707:src/xeq.c     **** 
4708:src/xeq.c     **** static void monadic_cmplex(const opcode op) {
4709:src/xeq.c     **** 	decNumber x, y, rx, ry;
4710:src/xeq.c     **** 	unsigned int f;
4711:src/xeq.c     **** 
4712:src/xeq.c     **** 	process_cmdline_set_lift();
4713:src/xeq.c     **** 
4714:src/xeq.c     **** 	f = argKIND(op);
4715:src/xeq.c     **** 
4716:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4717:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
4718:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
4719:src/xeq.c     **** 			if (dispatch_xrom(fp))
4720:src/xeq.c     **** 				return;
4721:src/xeq.c     **** 			else {
4722:src/xeq.c     **** 				getXY(&x, &y);
4723:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
4724:src/xeq.c     **** 				setlastXY();
4725:src/xeq.c     **** 				setXY(&rx, &ry);
4726:src/xeq.c     **** 				set_was_complex();
4727:src/xeq.c     **** 			}
4728:src/xeq.c     **** 		} else
4729:src/xeq.c     **** 			bad_mode_error();
4730:src/xeq.c     **** 	} else
4731:src/xeq.c     **** 		illegal(op);
4732:src/xeq.c     **** }
4733:src/xeq.c     **** 
4734:src/xeq.c     **** /***************************************************************************
4735:src/xeq.c     ****  * Dyadic function handling.
4736:src/xeq.c     ****  */
4737:src/xeq.c     **** 
4738:src/xeq.c     **** /* Dispatch routine for dyadic operations.
4739:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4740:src/xeq.c     ****  * common stack manipulation.
4741:src/xeq.c     ****  */
4742:src/xeq.c     **** static void dyadic(const opcode op) {
4743:src/xeq.c     **** 
4744:src/xeq.c     **** 	unsigned int f;
4745:src/xeq.c     **** 	process_cmdline_set_lift();
4746:src/xeq.c     **** 
4747:src/xeq.c     **** 	f = argKIND(op);
4748:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4749:src/xeq.c     **** 		if (is_intmode()) {
4750:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
4751:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
4752:src/xeq.c     **** 				if (dispatch_xrom(fp))
4753:src/xeq.c     **** 					return;
4754:src/xeq.c     **** 				else {
4755:src/xeq.c     **** 					long long int x = getX_int();
4756:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4757:src/xeq.c     **** 					x = fp(y, x);
4758:src/xeq.c     **** 					setlastX();
ARM GAS  /tmp/ccBFDvgN.s 			page 115


4759:src/xeq.c     **** 					lower();
4760:src/xeq.c     **** 					setX_int(x);
4761:src/xeq.c     **** 				}
4762:src/xeq.c     **** 			} else
4763:src/xeq.c     **** 				bad_mode_error();
4764:src/xeq.c     **** 		} else {
4765:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydreal)) {
4766:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4767:src/xeq.c     **** 				if (dispatch_xrom(fp))
4768:src/xeq.c     **** 					return;
4769:src/xeq.c     **** 				else {
4770:src/xeq.c     **** 					decNumber x, y, r;
4771:src/xeq.c     **** 					getXY(&x, &y);
4772:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
4773:src/xeq.c     **** 						set_NaN(&r);
4774:src/xeq.c     **** 					setlastX();
4775:src/xeq.c     **** 					lower();
4776:src/xeq.c     **** 					setX(&r);
4777:src/xeq.c     **** 				}
4778:src/xeq.c     **** 			} else
4779:src/xeq.c     **** 				bad_mode_error();
4780:src/xeq.c     **** 		}
4781:src/xeq.c     **** 	} else
4782:src/xeq.c     **** 		illegal(op);
4783:src/xeq.c     **** }
4784:src/xeq.c     **** 
4785:src/xeq.c     **** static void dyadic_cmplex(const opcode op) {
4786:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
4787:src/xeq.c     **** 	unsigned int f;
4788:src/xeq.c     **** 
4789:src/xeq.c     **** 	process_cmdline_set_lift();
4790:src/xeq.c     **** 
4791:src/xeq.c     **** 	f = argKIND(op);
4792:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4793:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
4794:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
4795:src/xeq.c     **** 			if (dispatch_xrom(fp))
4796:src/xeq.c     **** 				return;
4797:src/xeq.c     **** 			else {
4798:src/xeq.c     **** 				getXYZT(&x1, &y1, &x2, &y2);
4799:src/xeq.c     **** 
4800:src/xeq.c     **** 				fp(&xr, &yr, &x2, &y2, &x1, &y1);
4801:src/xeq.c     **** 
4802:src/xeq.c     **** 				setlastXY();
4803:src/xeq.c     **** 				lower2();
4804:src/xeq.c     **** 				setXY(&xr, &yr);
4805:src/xeq.c     **** 				set_was_complex();
4806:src/xeq.c     **** 			}
4807:src/xeq.c     **** 		} else
4808:src/xeq.c     **** 			bad_mode_error();
4809:src/xeq.c     **** 	} else
4810:src/xeq.c     **** 		illegal(op);
4811:src/xeq.c     **** }
4812:src/xeq.c     **** 
4813:src/xeq.c     **** /* Dispatch routine for triadic operations.
4814:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4815:src/xeq.c     ****  * common stack manipulation.
ARM GAS  /tmp/ccBFDvgN.s 			page 116


4816:src/xeq.c     ****  */
4817:src/xeq.c     **** static void triadic(const opcode op) {
4818:src/xeq.c     **** 	unsigned int f;
4819:src/xeq.c     **** 	process_cmdline_set_lift();
4820:src/xeq.c     **** 
4821:src/xeq.c     **** 	f = argKIND(op);
4822:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
4823:src/xeq.c     **** 		if (is_intmode()) {
4824:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
4825:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
4826:src/xeq.c     **** 				if (dispatch_xrom(fp))
4827:src/xeq.c     **** 					return;
4828:src/xeq.c     **** 				else {
4829:src/xeq.c     **** 					long long int x = getX_int();
4830:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4831:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
4832:src/xeq.c     **** 					x = fp(z, y, x);
4833:src/xeq.c     **** 					setlastX();
4834:src/xeq.c     **** 					lower();
4835:src/xeq.c     **** 					lower();
4836:src/xeq.c     **** 					setX_int(x);
4837:src/xeq.c     **** 				}
4838:src/xeq.c     **** 			} else
4839:src/xeq.c     **** 				bad_mode_error();
4840:src/xeq.c     **** 		} else {
4841:src/xeq.c     **** 			if (! isNULL(trifuncs[f].trireal)) {
4842:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
4843:src/xeq.c     **** 				if (dispatch_xrom(fp))
4844:src/xeq.c     **** 					return;
4845:src/xeq.c     **** 				else {
4846:src/xeq.c     **** 					decNumber x, y, z, r;
4847:src/xeq.c     **** 					getXYZ(&x, &y, &z);
4848:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
4849:src/xeq.c     **** 						set_NaN(&r);
4850:src/xeq.c     **** 					setlastX();
4851:src/xeq.c     **** 					lower();
4852:src/xeq.c     **** 					lower();
4853:src/xeq.c     **** 					setX(&r);
4854:src/xeq.c     **** 				}
4855:src/xeq.c     **** 			} else
4856:src/xeq.c     **** 				bad_mode_error();
4857:src/xeq.c     **** 		}
4858:src/xeq.c     **** 	} else
4859:src/xeq.c     **** 		illegal(op);
4860:src/xeq.c     **** }
4861:src/xeq.c     **** 
4862:src/xeq.c     **** 
4863:src/xeq.c     **** #else // UNIVERSAL_DISPATCH
4864:src/xeq.c     **** 
4865:src/xeq.c     **** 
4866:src/xeq.c     **** /*
4867:src/xeq.c     ****  *  Call functions by reusing the decimal code for integer mode
4868:src/xeq.c     ****  */
4869:src/xeq.c     **** static long long int universal_dispatch_int(long long int y, long long int x, unsigned int dyadic)
4870:src/xeq.c     **** {
4871:src/xeq.c     **** 	int sx, sy;
4872:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
ARM GAS  /tmp/ccBFDvgN.s 			page 117


4873:src/xeq.c     **** 	unsigned long long int vy;
4874:src/xeq.c     **** 	decNumber rx, ry, r;
4875:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4876:src/xeq.c     **** 	void (*function_pointer)(void);
4877:src/xeq.c     **** 
4878:src/xeq.c     **** #ifdef SHORT_POINTERS
4879:src/xeq.c     **** 	unsigned short compact_pointer;
4880:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4881:src/xeq.c     **** #else
4882:src/xeq.c     **** 	void (*compact_pointer)(void);
4883:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4884:src/xeq.c     **** #endif
4885:src/xeq.c     **** 
4886:src/xeq.c     **** 	if (dyadic) {
4887:src/xeq.c     **** 		vy = extract_value(y, &sy);
4888:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4889:src/xeq.c     **** 	}
4890:src/xeq.c     **** 	else {
4891:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4892:src/xeq.c     **** 	}
4893:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4894:src/xeq.c     **** 		bad_mode_error();
4895:src/xeq.c     **** 	}
4896:src/xeq.c     **** 	else {
4897:src/xeq.c     **** 		function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4898:src/xeq.c     **** #ifndef REALBUILD
4899:src/xeq.c     **** 		if (check_for_xrom_address(function_pointer) != NULL) {
4900:src/xeq.c     **** 			bad_mode_error();
4901:src/xeq.c     **** 		}
4902:src/xeq.c     **** 		else
4903:src/xeq.c     **** #endif
4904:src/xeq.c     **** 		{
4905:src/xeq.c     **** 			void *result;
4906:src/xeq.c     **** 
4907:src/xeq.c     **** 			ullint_to_dn(&rx, vx);		if (sx) dn_minus(&rx, &rx);
4908:src/xeq.c     **** 			if (dyadic) {
4909:src/xeq.c     **** 				ullint_to_dn(&ry, vy);		if (sy) dn_minus(&ry, &ry);
4910:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r, &ry, &rx);
4911:src/xeq.c     **** 			}
4912:src/xeq.c     **** 			else {
4913:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r, &rx);
4914:src/xeq.c     **** 			}
4915:src/xeq.c     **** 			if (NULL == result) {
4916:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4917:src/xeq.c     **** 			}
4918:src/xeq.c     **** 			else {
4919:src/xeq.c     **** 				return intResult(&r);
4920:src/xeq.c     **** 			}
4921:src/xeq.c     **** 		}
4922:src/xeq.c     **** 	}
4923:src/xeq.c     **** 	return 0;
4924:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4925:src/xeq.c     **** }
4926:src/xeq.c     **** 
4927:src/xeq.c     **** 
4928:src/xeq.c     **** long long int intMonadic(long long int x)
4929:src/xeq.c     **** {
ARM GAS  /tmp/ccBFDvgN.s 			page 118


4930:src/xeq.c     **** 	return universal_dispatch_int(0, x, 0);
4931:src/xeq.c     **** }
4932:src/xeq.c     **** 
4933:src/xeq.c     **** long long int intDyadic(long long int y, long long int x)
4934:src/xeq.c     **** {
4935:src/xeq.c     **** 	return universal_dispatch_int(y, x, 1);
4936:src/xeq.c     **** }
4937:src/xeq.c     **** 
4938:src/xeq.c     **** 
4939:src/xeq.c     **** /*
4940:src/xeq.c     ****  *  Universal dispatch function for niladic, monadic, dyadic and triadic functions, both real and c
4941:src/xeq.c     ****  */
4942:src/xeq.c     **** static void universal_dispatch(const opcode op, const unsigned int operands, const unsigned int com
4943:src/xeq.c     **** {
4944:src/xeq.c     **** 	const int intmode = is_intmode();
4945:src/xeq.c     **** 	volatile long long int ix; // declared volatile to avoid bogus warning about variable possibly bei
4946:src/xeq.c     **** 	const unsigned int f = argKIND(op);
4947:src/xeq.c     **** 	void (*function_pointer)(void);
4948:src/xeq.c     **** 
4949:src/xeq.c     **** #ifdef SHORT_POINTERS
4950:src/xeq.c     **** 	unsigned short compact_pointer;
4951:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4952:src/xeq.c     **** #else
4953:src/xeq.c     **** 	void (*compact_pointer)(void);
4954:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4955:src/xeq.c     **** #endif
4956:src/xeq.c     **** 
4957:src/xeq.c     **** 	process_cmdline();
4958:src/xeq.c     **** 	if (operands != 0) {
4959:src/xeq.c     **** 		set_lift();
4960:src/xeq.c     **** 	}
4961:src/xeq.c     **** 	switch (operands) {
4962:src/xeq.c     **** 	default:
4963:src/xeq.c     **** 	case 0:
4964:src/xeq.c     **** 		if (f >= NUM_NILADIC) {
4965:src/xeq.c     **** illegal:
4966:src/xeq.c     **** 			illegal(op);
4967:src/xeq.c     **** 			goto finish_niladic;
4968:src/xeq.c     **** 		}
4969:src/xeq.c     **** 		if (intmode && NILADIC_NOTINT(niladics[f])) {
4970:src/xeq.c     **** 			goto bad_mode;
4971:src/xeq.c     **** 		}
4972:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)niladics[f].niladicf;
4973:src/xeq.c     **** 		break;
4974:src/xeq.c     **** 
4975:src/xeq.c     **** 	case 1:
4976:src/xeq.c     **** 		if (f >= NUM_MONADIC)
4977:src/xeq.c     **** 			goto illegal;
4978:src/xeq.c     **** 		if (intmode)
4979:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].monint;
4980:src/xeq.c     **** 		else if (complex)
4981:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondcmplx;
4982:src/xeq.c     **** 		else
4983:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4984:src/xeq.c     **** 		break;
4985:src/xeq.c     **** 
4986:src/xeq.c     **** 	case 2:
ARM GAS  /tmp/ccBFDvgN.s 			page 119


4987:src/xeq.c     **** 		if (f >= NUM_DYADIC)
4988:src/xeq.c     **** 			goto illegal;
4989:src/xeq.c     **** 		if (intmode)
4990:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydint;
4991:src/xeq.c     **** 		else if (complex)
4992:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydcmplx;
4993:src/xeq.c     **** 		else
4994:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4995:src/xeq.c     **** 		break;
4996:src/xeq.c     **** 
4997:src/xeq.c     **** 	case 3:
4998:src/xeq.c     **** 		if (f >= NUM_TRIADIC)
4999:src/xeq.c     **** 			goto illegal;
5000:src/xeq.c     **** 		if (intmode)
5001:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].triint;
5002:src/xeq.c     **** 		else
5003:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].trireal;
5004:src/xeq.c     **** 		break;
5005:src/xeq.c     **** 	}
5006:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
5007:src/xeq.c     **** 		if (operands != 0) {
5008:src/xeq.c     **** 			// The original niladic() function doesn't invoke
5009:src/xeq.c     **** 			// bad_mode_error() if the function pointer is null.
5010:src/xeq.c     **** 			// TODO:  Verify that this behavior is really needed.
5011:src/xeq.c     **** bad_mode:
5012:src/xeq.c     **** 			bad_mode_error();
5013:src/xeq.c     **** 		}
5014:src/xeq.c     **** 		goto finish_niladic;
5015:src/xeq.c     **** 	}
5016:src/xeq.c     **** 	function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
5017:src/xeq.c     **** 	if (dispatch_xrom(function_pointer)) {
5018:src/xeq.c     **** 		return;
5019:src/xeq.c     **** 	}
5020:src/xeq.c     **** 	if (operands == 0) {
5021:src/xeq.c     **** 		switch (NILADIC_NUMRESULTS(niladics[f])) {
5022:src/xeq.c     **** 		case 2:		lift_if_enabled(); // fall through
5023:src/xeq.c     **** 		case 1:		lift_if_enabled(); break;
5024:src/xeq.c     **** 		}
5025:src/xeq.c     **** 		((FP_NILADIC)function_pointer)((enum nilop)f);
5026:src/xeq.c     **** finish_niladic:
5027:src/xeq.c     **** 		// If an error occurred, we end up here even if a non-niladic function was called.
5028:src/xeq.c     **** 		// set_lift() is always called for non-niladic functions so calling it again does no harm.
5029:src/xeq.c     **** 		if (f != OP_rCLX) {
5030:src/xeq.c     **** 			set_lift();
5031:src/xeq.c     **** 		}
5032:src/xeq.c     **** 	}
5033:src/xeq.c     **** 	else if (intmode) {
5034:src/xeq.c     **** 		long long int iy;
5035:src/xeq.c     **** 		long long int iz;
5036:src/xeq.c     **** 
5037:src/xeq.c     **** 		ix = getX_int();
5038:src/xeq.c     **** 		iy = get_reg_n_int(regY_idx);
5039:src/xeq.c     **** 		switch (operands) {
5040:src/xeq.c     **** 		default:
5041:src/xeq.c     **** 		case 1:
5042:src/xeq.c     **** 			ix = ((FP_MONADIC_INT)function_pointer)(ix);
5043:src/xeq.c     **** 			break;
ARM GAS  /tmp/ccBFDvgN.s 			page 120


5044:src/xeq.c     **** 
5045:src/xeq.c     **** 		case 2:
5046:src/xeq.c     **** 			ix = ((FP_DYADIC_INT)function_pointer)(iy, ix);
5047:src/xeq.c     **** 			break;
5048:src/xeq.c     **** 
5049:src/xeq.c     **** 		case 3:
5050:src/xeq.c     **** 			iz = get_reg_n_int(regZ_idx);
5051:src/xeq.c     **** 			ix = ((FP_TRIADIC_INT)function_pointer)(iz, iy, ix);
5052:src/xeq.c     **** 			break;
5053:src/xeq.c     **** 		}
5054:src/xeq.c     **** 		goto finish_x;
5055:src/xeq.c     **** 	}
5056:src/xeq.c     **** 	else {
5057:src/xeq.c     **** 		decNumber x, y, z, t, r1;
5058:src/xeq.c     **** 
5059:src/xeq.c     **** 		if (operands + complex <= 2) {
5060:src/xeq.c     **** 			getXY(&x, &y);
5061:src/xeq.c     **** 		}
5062:src/xeq.c     **** 		else {
5063:src/xeq.c     **** 			getXYZT(&x, &y, &z, &t);
5064:src/xeq.c     **** 		}
5065:src/xeq.c     **** 
5066:src/xeq.c     **** 		if (complex) {
5067:src/xeq.c     **** 			decNumber r2;
5068:src/xeq.c     **** 
5069:src/xeq.c     **** 			if (operands == 1) {
5070:src/xeq.c     **** 				((FP_MONADIC_CMPLX)function_pointer)(&r1, &r2, &x, &y);
5071:src/xeq.c     **** 			}
5072:src/xeq.c     **** 			else {
5073:src/xeq.c     **** 				((FP_DYADIC_CMPLX)function_pointer)(&r1, &r2, &z, &t, &x, &y);
5074:src/xeq.c     **** 			}
5075:src/xeq.c     **** 			setlastXY();
5076:src/xeq.c     **** 			if (operands != 1) {
5077:src/xeq.c     **** 				lower2();
5078:src/xeq.c     **** 			}
5079:src/xeq.c     **** 			setXY(&r1, &r2);
5080:src/xeq.c     **** 			set_was_complex();
5081:src/xeq.c     **** 		}
5082:src/xeq.c     **** 		else { // real
5083:src/xeq.c     **** 			void *result;
5084:src/xeq.c     **** 
5085:src/xeq.c     **** 			switch (operands) {
5086:src/xeq.c     **** 			default:
5087:src/xeq.c     **** 			case 1:
5088:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r1, &x);
5089:src/xeq.c     **** 				break;
5090:src/xeq.c     **** 
5091:src/xeq.c     **** 			case 2:
5092:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r1, &y, &x);
5093:src/xeq.c     **** 				break;
5094:src/xeq.c     **** 
5095:src/xeq.c     **** 			case 3:
5096:src/xeq.c     **** 				result = ((FP_TRIADIC_REAL)function_pointer)(&r1, &z, &y, &x);
5097:src/xeq.c     **** 				break;
5098:src/xeq.c     **** 			}
5099:src/xeq.c     **** 			if (NULL == result) {
5100:src/xeq.c     **** 				set_NaN(&r1);
ARM GAS  /tmp/ccBFDvgN.s 			page 121


5101:src/xeq.c     **** 			}
5102:src/xeq.c     **** finish_x:
5103:src/xeq.c     **** 			setlastX();
5104:src/xeq.c     **** 			switch (operands) {
5105:src/xeq.c     **** 			case 3:		lower(); // fall through
5106:src/xeq.c     **** 			case 2:		lower(); break;
5107:src/xeq.c     **** 			}
5108:src/xeq.c     **** 			if (!intmode) {
5109:src/xeq.c     **** 				setX(&r1);
5110:src/xeq.c     **** 			}
5111:src/xeq.c     **** 			else {
5112:src/xeq.c     **** 				setX_int(ix);
5113:src/xeq.c     **** 			}
5114:src/xeq.c     **** 		}
5115:src/xeq.c     **** 	}
5116:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
5117:src/xeq.c     **** }
5118:src/xeq.c     **** 
5119:src/xeq.c     **** 
5120:src/xeq.c     **** static void niladic(const opcode op)
5121:src/xeq.c     **** {
5122:src/xeq.c     **** 	universal_dispatch(op, 0, 0);
5123:src/xeq.c     **** }
5124:src/xeq.c     **** 
5125:src/xeq.c     **** static void monadic(const opcode op)
5126:src/xeq.c     **** {
5127:src/xeq.c     **** 	universal_dispatch(op, 1, 0);
5128:src/xeq.c     **** }
5129:src/xeq.c     **** 
5130:src/xeq.c     **** static void monadic_cmplex(const opcode op)
5131:src/xeq.c     **** {
5132:src/xeq.c     **** 	universal_dispatch(op, 1, 1);
5133:src/xeq.c     **** }
5134:src/xeq.c     **** 
5135:src/xeq.c     **** static void dyadic(const opcode op)
5136:src/xeq.c     **** {
5137:src/xeq.c     **** 	universal_dispatch(op, 2, 0);
5138:src/xeq.c     **** }
5139:src/xeq.c     **** 
5140:src/xeq.c     **** static void dyadic_cmplex(const opcode op)
5141:src/xeq.c     **** {
5142:src/xeq.c     **** 	universal_dispatch(op, 2, 1);
5143:src/xeq.c     **** }
5144:src/xeq.c     **** 
5145:src/xeq.c     **** static void triadic(const opcode op)
5146:src/xeq.c     **** {
5147:src/xeq.c     **** 	universal_dispatch(op, 3, 0);
5148:src/xeq.c     **** }
5149:src/xeq.c     **** 
5150:src/xeq.c     **** 
5151:src/xeq.c     **** #endif // UNIVERSAL_DISPATCH
5152:src/xeq.c     **** 
5153:src/xeq.c     **** 
5154:src/xeq.c     **** /*
5155:src/xeq.c     ****  *  Helper to check the maximum allowed register number, 
5156:src/xeq.c     ****  *  depending on command flags and current allocation.
5157:src/xeq.c     ****  *  This needs to be seperate because its called twice for indirect arguments
ARM GAS  /tmp/ccBFDvgN.s 			page 122


5158:src/xeq.c     ****  */
5159:src/xeq.c     **** static unsigned int get_reg_limit(unsigned int cmd, unsigned int arg)
5160:src/xeq.c     **** {
 1476              		.loc 1 5160 1 is_stmt 1 view -0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 0
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
5161:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1480              		.loc 1 5161 2 view .LVU392
5162:src/xeq.c     **** 
5163:src/xeq.c     **** 	if (arg < TOPREALREG) {
 1481              		.loc 1 5163 2 view .LVU393
 1482              		.loc 1 5163 5 is_stmt 0 view .LVU394
 1483 0000 6329     		cmp	r1, #99
5160:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1484              		.loc 1 5160 1 view .LVU395
 1485 0002 38B5     		push	{r3, r4, r5, lr}
 1486              		.cfi_def_cfa_offset 16
 1487              		.cfi_offset 3, -16
 1488              		.cfi_offset 4, -12
 1489              		.cfi_offset 5, -8
 1490              		.cfi_offset 14, -4
5160:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1491              		.loc 1 5160 1 view .LVU396
 1492 0004 0446     		mov	r4, r0
 1493              		.loc 1 5163 5 view .LVU397
 1494 0006 16D8     		bhi	.L119
5164:src/xeq.c     **** 		// Range checking for registers against variable boundary
5165:src/xeq.c     **** 		lim = global_regs_rarg((enum rarg) cmd) - 1;
 1495              		.loc 1 5165 3 is_stmt 1 view .LVU398
 1496              	.LVL102:
 1497              	.LBB1452:
 1498              	.LBI1452:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1499              		.loc 1 241 14 view .LVU399
 1500              	.LBB1453:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1501              		.loc 1 242 2 view .LVU400
 1502              	.LBB1454:
 1503              	.LBI1454:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1504              		.loc 1 1118 5 view .LVU401
 1505              	.LBB1455:
1119:src/xeq.c     **** }
 1506              		.loc 1 1119 2 view .LVU402
1119:src/xeq.c     **** }
 1507              		.loc 1 1119 12 is_stmt 0 view .LVU403
 1508 0008 294B     		ldr	r3, .L139
 1509 000a 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 1510              		.loc 1 1119 24 view .LVU404
 1511 000c B2F8E817 		ldrh	r1, [r2, #2024]
 1512              	.LVL103:
1119:src/xeq.c     **** }
 1513              		.loc 1 1119 24 view .LVU405
 1514 0010 44F20103 		movw	r3, #16385
 1515              	.LBE1455:
ARM GAS  /tmp/ccBFDvgN.s 			page 123


 1516              	.LBE1454:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1517              		.loc 1 242 5 view .LVU406
 1518 0014 0B40     		ands	r3, r3, r1
 1519 0016 B3F5804F 		cmp	r3, #16384
 1520 001a 2ED0     		beq	.L120
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1521              		.loc 1 242 19 view .LVU407
 1522 001c 8028     		cmp	r0, #128
 1523 001e 39D0     		beq	.L136
 247:src/xeq.c     **** }
 1524              		.loc 1 247 3 is_stmt 1 view .LVU408
 247:src/xeq.c     **** }
 1525              		.loc 1 247 10 is_stmt 0 view .LVU409
 1526 0020 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1527              	.LVL104:
 1528              	.L124:
 247:src/xeq.c     **** }
 1529              		.loc 1 247 10 view .LVU410
 1530 0024 2349     		ldr	r1, .L139+4
 1531              	.LBE1453:
 1532              	.LBE1452:
 1533              		.loc 1 5165 7 view .LVU411
 1534 0026 0138     		subs	r0, r0, #1
 1535              	.LVL105:
 1536              		.loc 1 5165 7 view .LVU412
 1537 0028 2501     		lsls	r5, r4, #4
 1538              	.LVL106:
 1539              	.L125:
5166:src/xeq.c     **** 	}
5167:src/xeq.c     **** 	else if (argcmds[cmd].local) {
5168:src/xeq.c     **** 		// Range checking for local registers
5169:src/xeq.c     **** 		lim = NUMREG - 1 + local_regs_rarg((enum rarg) cmd);
5170:src/xeq.c     **** 	}
5171:src/xeq.c     **** 	if (argcmds[cmd].cmplx) {
 1540              		.loc 1 5171 2 is_stmt 1 view .LVU413
 1541              		.loc 1 5171 18 is_stmt 0 view .LVU414
 1542 002a 2944     		add	r1, r1, r5
 1543 002c 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 1544              		.loc 1 5171 5 view .LVU415
 1545 002e D906     		lsls	r1, r3, #27
 1546 0030 10D5     		bpl	.L126
 1547              	.L137:
5172:src/xeq.c     **** 		// one short of the last avialable register for complex access
5173:src/xeq.c     **** 		--lim;
 1548              		.loc 1 5173 3 is_stmt 1 view .LVU416
 1549 0032 0138     		subs	r0, r0, #1
 1550              	.LVL107:
 1551              	.L118:
5174:src/xeq.c     **** 	}
5175:src/xeq.c     **** 	else if (cmd == RARG_STOSTK || cmd == RARG_RCLSTK) {
5176:src/xeq.c     **** 		// avoid stack clash error in these commands
5177:src/xeq.c     **** 		lim -= stack_size() - 1;
5178:src/xeq.c     **** 	}
5179:src/xeq.c     **** 	return lim;
5180:src/xeq.c     **** }
 1552              		.loc 1 5180 1 is_stmt 0 view .LVU417
ARM GAS  /tmp/ccBFDvgN.s 			page 124


 1553 0034 38BD     		pop	{r3, r4, r5, pc}
 1554              	.LVL108:
 1555              	.L119:
5167:src/xeq.c     **** 		// Range checking for local registers
 1556              		.loc 1 5167 7 is_stmt 1 view .LVU418
5167:src/xeq.c     **** 		// Range checking for local registers
 1557              		.loc 1 5167 23 is_stmt 0 view .LVU419
 1558 0036 1F49     		ldr	r1, .L139+4
 1559              	.LVL109:
5167:src/xeq.c     **** 		// Range checking for local registers
 1560              		.loc 1 5167 23 view .LVU420
 1561 0038 01EB0013 		add	r3, r1, r0, lsl #4
 1562 003c 0501     		lsls	r5, r0, #4
 1563 003e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
5167:src/xeq.c     **** 		// Range checking for local registers
 1564              		.loc 1 5167 10 view .LVU421
 1565 0040 1807     		lsls	r0, r3, #28
 1566              	.LVL110:
5167:src/xeq.c     **** 		// Range checking for local registers
 1567              		.loc 1 5167 10 view .LVU422
 1568 0042 18D5     		bpl	.L130
5169:src/xeq.c     **** 	}
 1569              		.loc 1 5169 3 is_stmt 1 view .LVU423
5169:src/xeq.c     **** 	}
 1570              		.loc 1 5169 22 is_stmt 0 view .LVU424
 1571 0044 E0B2     		uxtb	r0, r4
 1572 0046 FFF7FEFF 		bl	local_regs_rarg
 1573              	.LVL111:
5171:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1574              		.loc 1 5171 18 view .LVU425
 1575 004a 2944     		add	r1, r1, r5
5169:src/xeq.c     **** 	}
 1576              		.loc 1 5169 20 view .LVU426
 1577 004c 6F30     		adds	r0, r0, #111
 1578              	.LVL112:
5171:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1579              		.loc 1 5171 2 is_stmt 1 view .LVU427
5171:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1580              		.loc 1 5171 18 is_stmt 0 view .LVU428
 1581 004e 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
5171:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1582              		.loc 1 5171 5 view .LVU429
 1583 0050 D906     		lsls	r1, r3, #27
 1584 0052 EED4     		bmi	.L137
 1585              	.L126:
5175:src/xeq.c     **** 		// avoid stack clash error in these commands
 1586              		.loc 1 5175 7 is_stmt 1 view .LVU430
5175:src/xeq.c     **** 		// avoid stack clash error in these commands
 1587              		.loc 1 5175 30 is_stmt 0 view .LVU431
 1588 0054 223C     		subs	r4, r4, #34
 1589              	.LVL113:
5175:src/xeq.c     **** 		// avoid stack clash error in these commands
 1590              		.loc 1 5175 10 view .LVU432
 1591 0056 012C     		cmp	r4, #1
 1592 0058 ECD8     		bhi	.L118
5177:src/xeq.c     **** 	}
 1593              		.loc 1 5177 3 is_stmt 1 view .LVU433
ARM GAS  /tmp/ccBFDvgN.s 			page 125


 1594              	.LBB1460:
 1595              	.LBI1460:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 1596              		.loc 1 712 5 view .LVU434
 1597              	.LBB1461:
 713:src/xeq.c     **** 		return 4;
 1598              		.loc 1 713 2 view .LVU435
 713:src/xeq.c     **** 		return 4;
 1599              		.loc 1 713 8 is_stmt 0 view .LVU436
 1600 005a 154B     		ldr	r3, .L139
 1601 005c 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 1602              		.loc 1 713 6 view .LVU437
 1603 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 1604              		.loc 1 713 5 view .LVU438
 1605 0062 1207     		lsls	r2, r2, #28
 1606 0064 14D5     		bpl	.L131
 1607              	.LBB1462:
 1608              	.LBI1462:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 1609              		.loc 1 185 5 is_stmt 1 view .LVU439
 1610              	.LBB1463:
 186:src/xeq.c     **** }
 1611              		.loc 1 186 2 view .LVU440
 186:src/xeq.c     **** }
 1612              		.loc 1 186 9 is_stmt 0 view .LVU441
 1613 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 1614              	.LBE1463:
 1615              	.LBE1462:
 713:src/xeq.c     **** 		return 4;
 1616              		.loc 1 713 27 view .LVU442
 1617 006a 9B0B     		lsrs	r3, r3, #14
 1618 006c 032B     		cmp	r3, #3
 1619 006e 16D0     		beq	.L138
 1620 0070 0723     		movs	r3, #7
 1621              	.L128:
 1622              	.LBE1461:
 1623              	.LBE1460:
5177:src/xeq.c     **** 	}
 1624              		.loc 1 5177 7 view .LVU443
 1625 0072 C01A     		subs	r0, r0, r3
 1626              	.LVL114:
5179:src/xeq.c     **** }
 1627              		.loc 1 5179 2 is_stmt 1 view .LVU444
 1628              		.loc 1 5180 1 is_stmt 0 view .LVU445
 1629 0074 38BD     		pop	{r3, r4, r5, pc}
 1630              	.LVL115:
 1631              	.L130:
5161:src/xeq.c     **** 
 1632              		.loc 1 5161 15 view .LVU446
 1633 0076 7020     		movs	r0, #112
 1634 0078 D7E7     		b	.L125
 1635              	.LVL116:
 1636              	.L120:
 1637              	.LBB1466:
 1638              	.LBB1458:
ARM GAS  /tmp/ccBFDvgN.s 			page 126


 1639              	.LBB1456:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1640              		.loc 1 243 3 is_stmt 1 view .LVU447
 244:src/xeq.c     **** 	}
 1641              		.loc 1 244 26 is_stmt 0 view .LVU448
 1642 007a A4F17E03 		sub	r3, r4, #126
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1643              		.loc 1 243 24 view .LVU449
 1644 007e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1645              	.LVL117:
 244:src/xeq.c     **** 	}
 1646              		.loc 1 244 56 view .LVU450
 1647 0082 DBB2     		uxtb	r3, r3
 1648 0084 012B     		cmp	r3, #1
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1649              		.loc 1 243 13 view .LVU451
 1650 0086 A0F10C00 		sub	r0, r0, #12
 1651              	.LVL118:
 244:src/xeq.c     **** 	}
 1652              		.loc 1 244 3 is_stmt 1 view .LVU452
 244:src/xeq.c     **** 	}
 1653              		.loc 1 244 56 is_stmt 0 view .LVU453
 1654 008a CBD9     		bls	.L124
 244:src/xeq.c     **** 	}
 1655              		.loc 1 244 67 view .LVU454
 1656 008c 4010     		asrs	r0, r0, #1
 1657              	.LVL119:
 244:src/xeq.c     **** 	}
 1658              		.loc 1 244 67 view .LVU455
 1659 008e C9E7     		b	.L124
 1660              	.LVL120:
 1661              	.L131:
 244:src/xeq.c     **** 	}
 1662              		.loc 1 244 67 view .LVU456
 1663              	.LBE1456:
 1664              	.LBE1458:
 1665              	.LBE1466:
 1666              	.LBB1467:
 1667              	.LBB1464:
 1668 0090 0323     		movs	r3, #3
 1669 0092 EEE7     		b	.L128
 1670              	.LVL121:
 1671              	.L136:
 244:src/xeq.c     **** 	}
 1672              		.loc 1 244 67 view .LVU457
 1673              	.LBE1464:
 1674              	.LBE1467:
 1675              	.LBB1468:
 1676              	.LBB1459:
 1677              	.LBB1457:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1678              		.loc 1 243 3 is_stmt 1 view .LVU458
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1679              		.loc 1 243 24 is_stmt 0 view .LVU459
 1680 0094 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1681              	.LVL122:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
ARM GAS  /tmp/ccBFDvgN.s 			page 127


 1682              		.loc 1 243 13 view .LVU460
 1683 0098 0C38     		subs	r0, r0, #12
 1684              	.LVL123:
 244:src/xeq.c     **** 	}
 1685              		.loc 1 244 3 is_stmt 1 view .LVU461
 244:src/xeq.c     **** 	}
 1686              		.loc 1 244 67 is_stmt 0 view .LVU462
 1687 009a 4010     		asrs	r0, r0, #1
 1688              	.LVL124:
 244:src/xeq.c     **** 	}
 1689              		.loc 1 244 67 view .LVU463
 1690 009c C2E7     		b	.L124
 1691              	.LVL125:
 1692              	.L138:
 244:src/xeq.c     **** 	}
 1693              		.loc 1 244 67 view .LVU464
 1694              	.LBE1457:
 1695              	.LBE1459:
 1696              	.LBE1468:
 1697              	.LBB1469:
 1698              	.LBB1465:
 713:src/xeq.c     **** 		return 4;
 1699              		.loc 1 713 44 view .LVU465
 1700 009e 064B     		ldr	r3, .L139+8
 713:src/xeq.c     **** 		return 4;
 1701              		.loc 1 713 41 view .LVU466
 1702 00a0 93F90130 		ldrsb	r3, [r3, #1]
 1703 00a4 002B     		cmp	r3, #0
 1704 00a6 B4BF     		ite	lt
 1705 00a8 0723     		movlt	r3, #7
 1706 00aa 0323     		movge	r3, #3
 1707 00ac E1E7     		b	.L128
 1708              	.L140:
 1709 00ae 00BF     		.align	2
 1710              	.L139:
 1711 00b0 00000000 		.word	main_ram
 1712 00b4 00000000 		.word	argcmds
 1713 00b8 00000000 		.word	XromParams
 1714              	.LBE1465:
 1715              	.LBE1469:
 1716              		.cfi_endproc
 1717              	.LFE248:
 1719              		.section	.text.local_regs,"ax",%progbits
 1720              		.align	1
 1721              		.p2align 2,,3
 1722              		.global	local_regs
 1723              		.syntax unified
 1724              		.thumb
 1725              		.thumb_func
 1726              		.fpu fpv4-sp-d16
 1728              	local_regs:
 1729              	.LFB7:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 1730              		.loc 1 233 22 is_stmt 1 view -0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 0
 1733              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBFDvgN.s 			page 128


 1734              		@ link register save eliminated.
 234:src/xeq.c     **** }
 1735              		.loc 1 234 2 view .LVU468
 1736              	.LVL126:
 1737              	.LBB1470:
 1738              	.LBI1470:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1739              		.loc 1 225 5 view .LVU469
 1740              	.LBB1471:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1741              		.loc 1 226 2 view .LVU470
 1742              	.LBB1472:
 1743              	.LBI1472:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1744              		.loc 1 1118 5 view .LVU471
 1745              	.LBB1473:
1119:src/xeq.c     **** }
 1746              		.loc 1 1119 2 view .LVU472
1119:src/xeq.c     **** }
 1747              		.loc 1 1119 12 is_stmt 0 view .LVU473
 1748 0000 0D4B     		ldr	r3, .L145
 1749 0002 1B68     		ldr	r3, [r3]
 1750              	.LVL127:
1119:src/xeq.c     **** }
 1751              		.loc 1 1119 12 view .LVU474
 1752              	.LBE1473:
 1753              	.LBE1472:
 227:src/xeq.c     **** }
 1754              		.loc 1 227 2 is_stmt 1 view .LVU475
 1755              	.LBB1476:
 1756              	.LBI1476:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1757              		.loc 1 217 5 view .LVU476
 1758              	.LBB1477:
 218:src/xeq.c     **** }
 1759              		.loc 1 218 2 view .LVU477
 218:src/xeq.c     **** }
 1760              		.loc 1 218 9 is_stmt 0 view .LVU478
 1761 0004 B3F9DE27 		ldrsh	r2, [r3, #2014]
 218:src/xeq.c     **** }
 1762              		.loc 1 218 57 view .LVU479
 1763 0008 002A     		cmp	r2, #0
 1764 000a 01DB     		blt	.L144
 1765 000c 0020     		movs	r0, #0
 1766              	.LVL128:
 218:src/xeq.c     **** }
 1767              		.loc 1 218 57 view .LVU480
 1768              	.LBE1477:
 1769              	.LBE1476:
 1770              	.LBE1471:
 1771              	.LBE1470:
 235:src/xeq.c     **** 
 1772              		.loc 1 235 1 view .LVU481
 1773 000e 7047     		bx	lr
 1774              	.LVL129:
 1775              	.L144:
 1776              	.LBB1489:
ARM GAS  /tmp/ccBFDvgN.s 			page 129


 1777              	.LBB1488:
 1778              	.LBB1482:
 1779              	.LBB1474:
1119:src/xeq.c     **** }
 1780              		.loc 1 1119 24 view .LVU482
 1781 0010 B3F8E807 		ldrh	r0, [r3, #2024]
 1782              	.LBE1474:
 1783              	.LBE1482:
 1784              	.LBB1483:
 1785              	.LBB1478:
 218:src/xeq.c     **** }
 1786              		.loc 1 218 25 view .LVU483
 1787 0014 0949     		ldr	r1, .L145+4
 1788              	.LBE1478:
 1789              	.LBE1483:
 1790              	.LBB1484:
 1791              	.LBB1475:
1119:src/xeq.c     **** }
 1792              		.loc 1 1119 24 view .LVU484
 1793 0016 44F20103 		movw	r3, #16385
 1794              	.LVL130:
1119:src/xeq.c     **** }
 1795              		.loc 1 1119 24 view .LVU485
 1796              	.LBE1475:
 1797              	.LBE1484:
 1798              	.LBB1485:
 1799              	.LBB1479:
 218:src/xeq.c     **** }
 1800              		.loc 1 218 25 view .LVU486
 1801 001a 0968     		ldr	r1, [r1]
 1802              	.LBE1479:
 1803              	.LBE1485:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1804              		.loc 1 226 73 view .LVU487
 1805 001c 0340     		ands	r3, r3, r0
 1806 001e A3F58043 		sub	r3, r3, #16384
 1807              	.LBB1486:
 1808              	.LBB1480:
 218:src/xeq.c     **** }
 1809              		.loc 1 218 57 view .LVU488
 1810 0022 31F81200 		ldrh	r0, [r1, r2, lsl #1]
 1811              	.LBE1480:
 1812              	.LBE1486:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1813              		.loc 1 226 73 view .LVU489
 1814 0026 B3FA83F3 		clz	r3, r3
 1815 002a 5B09     		lsrs	r3, r3, #5
 1816 002c 0233     		adds	r3, r3, #2
 1817              	.LBB1487:
 1818              	.LBB1481:
 218:src/xeq.c     **** }
 1819              		.loc 1 218 57 view .LVU490
 1820 002e C0F30B00 		ubfx	r0, r0, #0, #12
 1821 0032 1841     		asrs	r0, r0, r3
 1822 0034 7047     		bx	lr
 1823              	.L146:
 1824 0036 00BF     		.align	2
ARM GAS  /tmp/ccBFDvgN.s 			page 130


 1825              	.L145:
 1826 0038 00000000 		.word	main_ram
 1827 003c 00000000 		.word	RetStk
 1828              	.LBE1481:
 1829              	.LBE1487:
 1830              	.LBE1488:
 1831              	.LBE1489:
 1832              		.cfi_endproc
 1833              	.LFE7:
 1835              		.section	.text.global_regs_rarg,"ax",%progbits
 1836              		.align	1
 1837              		.p2align 2,,3
 1838              		.global	global_regs_rarg
 1839              		.syntax unified
 1840              		.thumb
 1841              		.thumb_func
 1842              		.fpu fpv4-sp-d16
 1844              	global_regs_rarg:
 1845              	.LVL131:
 1846              	.LFB8:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1847              		.loc 1 241 45 is_stmt 1 view -0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 1851              		@ link register save eliminated.
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1852              		.loc 1 242 2 view .LVU492
 1853              	.LBB1490:
 1854              	.LBI1490:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1855              		.loc 1 1118 5 view .LVU493
 1856              	.LBB1491:
1119:src/xeq.c     **** }
 1857              		.loc 1 1119 2 view .LVU494
1119:src/xeq.c     **** }
 1858              		.loc 1 1119 12 is_stmt 0 view .LVU495
 1859 0000 0E4B     		ldr	r3, .L156
 1860 0002 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 1861              		.loc 1 1119 24 view .LVU496
 1862 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1863 0008 44F20103 		movw	r3, #16385
 1864              	.LBE1491:
 1865              	.LBE1490:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1866              		.loc 1 242 5 view .LVU497
 1867 000c 0B40     		ands	r3, r3, r1
 1868 000e B3F5804F 		cmp	r3, #16384
 1869 0012 09D0     		beq	.L148
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1870              		.loc 1 242 19 discriminator 1 view .LVU498
 1871 0014 8028     		cmp	r0, #128
 1872 0016 02D0     		beq	.L155
 247:src/xeq.c     **** }
 1873              		.loc 1 247 3 is_stmt 1 view .LVU499
 247:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 131


 1874              		.loc 1 247 10 is_stmt 0 view .LVU500
 1875 0018 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1876              	.LVL132:
 247:src/xeq.c     **** }
 1877              		.loc 1 247 10 view .LVU501
 1878 001c 7047     		bx	lr
 1879              	.LVL133:
 1880              	.L155:
 1881              	.LBB1492:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1882              		.loc 1 243 3 is_stmt 1 view .LVU502
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1883              		.loc 1 243 24 is_stmt 0 view .LVU503
 1884 001e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1885              	.LVL134:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1886              		.loc 1 243 13 view .LVU504
 1887 0022 0C38     		subs	r0, r0, #12
 1888              	.LVL135:
 244:src/xeq.c     **** 	}
 1889              		.loc 1 244 3 is_stmt 1 view .LVU505
 1890              	.L153:
 244:src/xeq.c     **** 	}
 1891              		.loc 1 244 67 is_stmt 0 discriminator 1 view .LVU506
 1892 0024 4010     		asrs	r0, r0, #1
 1893              	.LVL136:
 244:src/xeq.c     **** 	}
 1894              		.loc 1 244 67 discriminator 1 view .LVU507
 1895 0026 7047     		bx	lr
 1896              	.LVL137:
 1897              	.L148:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1898              		.loc 1 243 3 is_stmt 1 view .LVU508
 244:src/xeq.c     **** 	}
 1899              		.loc 1 244 56 is_stmt 0 view .LVU509
 1900 0028 A0F17E03 		sub	r3, r0, #126
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1901              		.loc 1 243 24 view .LVU510
 1902 002c 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 244:src/xeq.c     **** 	}
 1903              		.loc 1 244 56 view .LVU511
 1904 0030 012B     		cmp	r3, #1
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1905              		.loc 1 243 13 view .LVU512
 1906 0032 A2F10C00 		sub	r0, r2, #12
 1907              	.LVL138:
 244:src/xeq.c     **** 	}
 1908              		.loc 1 244 3 is_stmt 1 view .LVU513
 244:src/xeq.c     **** 	}
 1909              		.loc 1 244 56 is_stmt 0 view .LVU514
 1910 0036 F5D8     		bhi	.L153
 1911              	.LBE1492:
 248:src/xeq.c     **** 
 1912              		.loc 1 248 1 view .LVU515
 1913 0038 7047     		bx	lr
 1914              	.L157:
 1915 003a 00BF     		.align	2
ARM GAS  /tmp/ccBFDvgN.s 			page 132


 1916              	.L156:
 1917 003c 00000000 		.word	main_ram
 1918              		.cfi_endproc
 1919              	.LFE8:
 1921              		.section	.text.global_regs,"ax",%progbits
 1922              		.align	1
 1923              		.p2align 2,,3
 1924              		.global	global_regs
 1925              		.syntax unified
 1926              		.thumb
 1927              		.thumb_func
 1928              		.fpu fpv4-sp-d16
 1930              	global_regs:
 1931              	.LFB9:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 1932              		.loc 1 253 32 is_stmt 1 view -0
 1933              		.cfi_startproc
 1934              		@ args = 0, pretend = 0, frame = 0
 1935              		@ frame_needed = 0, uses_anonymous_args = 0
 1936              		@ link register save eliminated.
 254:src/xeq.c     **** }
 1937              		.loc 1 254 2 view .LVU517
 1938              	.LVL139:
 1939              	.LBB1493:
 1940              	.LBI1493:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1941              		.loc 1 241 14 view .LVU518
 1942              	.LBB1494:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1943              		.loc 1 242 2 view .LVU519
 1944              	.LBB1495:
 1945              	.LBI1495:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1946              		.loc 1 1118 5 view .LVU520
 1947              	.LBB1496:
1119:src/xeq.c     **** }
 1948              		.loc 1 1119 2 view .LVU521
1119:src/xeq.c     **** }
 1949              		.loc 1 1119 12 is_stmt 0 view .LVU522
 1950 0000 074B     		ldr	r3, .L161
 1951 0002 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 1952              		.loc 1 1119 24 view .LVU523
 1953 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1954              	.LBE1496:
 1955              	.LBE1495:
 1956              	.LBB1498:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1957              		.loc 1 243 24 view .LVU524
 1958 0008 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1959              	.LBE1498:
 1960              	.LBB1499:
 1961              	.LBB1497:
1119:src/xeq.c     **** }
 1962              		.loc 1 1119 24 view .LVU525
 1963 000c 44F20103 		movw	r3, #16385
 1964              	.LBE1497:
ARM GAS  /tmp/ccBFDvgN.s 			page 133


 1965              	.LBE1499:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1966              		.loc 1 242 5 view .LVU526
 1967 0010 0B40     		ands	r3, r3, r1
 1968 0012 B3F5804F 		cmp	r3, #16384
 1969              	.LBB1500:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1970              		.loc 1 243 3 is_stmt 1 view .LVU527
 244:src/xeq.c     **** 	}
 1971              		.loc 1 244 3 view .LVU528
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1972              		.loc 1 243 13 is_stmt 0 view .LVU529
 1973 0016 04BF     		itt	eq
 1974 0018 0C38     		subeq	r0, r0, #12
 244:src/xeq.c     **** 	}
 1975              		.loc 1 244 67 view .LVU530
 1976 001a 4010     		asreq	r0, r0, #1
 1977              	.LBE1500:
 247:src/xeq.c     **** }
 1978              		.loc 1 247 3 is_stmt 1 view .LVU531
 1979              	.LVL140:
 247:src/xeq.c     **** }
 1980              		.loc 1 247 3 is_stmt 0 view .LVU532
 1981              	.LBE1494:
 1982              	.LBE1493:
 255:src/xeq.c     **** 
 1983              		.loc 1 255 1 view .LVU533
 1984 001c 7047     		bx	lr
 1985              	.L162:
 1986 001e 00BF     		.align	2
 1987              	.L161:
 1988 0020 00000000 		.word	main_ram
 1989              		.cfi_endproc
 1990              	.LFE9:
 1992              		.section	.text.version,"ax",%progbits
 1993              		.align	1
 1994              		.p2align 2,,3
 1995              		.global	version
 1996              		.syntax unified
 1997              		.thumb
 1998              		.thumb_func
 1999              		.fpu fpv4-sp-d16
 2001              	version:
 2002              	.LVL141:
 2003              	.LFB10:
 267:src/xeq.c     **** 	State2.version = 1;
 2004              		.loc 1 267 29 is_stmt 1 view -0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 0
 2007              		@ frame_needed = 0, uses_anonymous_args = 0
 2008              		@ link register save eliminated.
 268:src/xeq.c     **** 	if (!State2.runmode)
 2009              		.loc 1 268 2 view .LVU535
 268:src/xeq.c     **** 	if (!State2.runmode)
 2010              		.loc 1 268 17 is_stmt 0 view .LVU536
 2011 0000 054B     		ldr	r3, .L166
 2012 0002 5A7D     		ldrb	r2, [r3, #21]	@ zero_extendqisi2
ARM GAS  /tmp/ccBFDvgN.s 			page 134


 269:src/xeq.c     **** 		display();
 2013              		.loc 1 269 6 view .LVU537
 2014 0004 997D     		ldrb	r1, [r3, #22]	@ zero_extendqisi2
 268:src/xeq.c     **** 	if (!State2.runmode)
 2015              		.loc 1 268 17 view .LVU538
 2016 0006 42F01002 		orr	r2, r2, #16
 2017 000a 5A75     		strb	r2, [r3, #21]
 269:src/xeq.c     **** 		display();
 2018              		.loc 1 269 2 is_stmt 1 view .LVU539
 269:src/xeq.c     **** 		display();
 2019              		.loc 1 269 5 is_stmt 0 view .LVU540
 2020 000c 4B06     		lsls	r3, r1, #25
 2021 000e 00D5     		bpl	.L165
 271:src/xeq.c     **** 
 2022              		.loc 1 271 1 view .LVU541
 2023 0010 7047     		bx	lr
 2024              	.L165:
 270:src/xeq.c     **** }
 2025              		.loc 1 270 3 is_stmt 1 view .LVU542
 2026 0012 FFF7FEBF 		b	display
 2027              	.LVL142:
 2028              	.L167:
 270:src/xeq.c     **** }
 2029              		.loc 1 270 3 is_stmt 0 view .LVU543
 2030 0016 00BF     		.align	2
 2031              	.L166:
 2032 0018 00000000 		.word	StateWhileOn
 2033              		.cfi_endproc
 2034              	.LFE10:
 2036              		.section	.text.cmd_off,"ax",%progbits
 2037              		.align	1
 2038              		.p2align 2,,3
 2039              		.global	cmd_off
 2040              		.syntax unified
 2041              		.thumb
 2042              		.thumb_func
 2043              		.fpu fpv4-sp-d16
 2045              	cmd_off:
 2046              	.LVL143:
 2047              	.LFB11:
 273:src/xeq.c     **** 	shutdown();
 2048              		.loc 1 273 29 is_stmt 1 view -0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
 2052              		@ link register save eliminated.
 274:src/xeq.c     **** }
 2053              		.loc 1 274 2 view .LVU545
 2054 0000 FFF7FEBF 		b	shutdown
 2055              	.LVL144:
 274:src/xeq.c     **** }
 2056              		.loc 1 274 2 is_stmt 0 view .LVU546
 2057              		.cfi_endproc
 2058              	.LFE11:
 2060              		.section	.text.init_RegionTab,"ax",%progbits
 2061              		.align	1
 2062              		.p2align 2,,3
ARM GAS  /tmp/ccBFDvgN.s 			page 135


 2063              		.global	init_RegionTab
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2067              		.fpu fpv4-sp-d16
 2069              	init_RegionTab:
 2070              	.LFB13:
 302:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 2071              		.loc 1 302 28 is_stmt 1 view -0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2076              		.loc 1 303 3 view .LVU548
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2077              		.loc 1 303 30 is_stmt 0 view .LVU549
 2078 0000 0649     		ldr	r1, .L170
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2079              		.loc 1 304 30 view .LVU550
 2080 0002 074A     		ldr	r2, .L170+4
 305:src/xeq.c     **** }
 2081              		.loc 1 305 30 view .LVU551
 2082 0004 074B     		ldr	r3, .L170+8
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2083              		.loc 1 303 30 view .LVU552
 2084 0006 0868     		ldr	r0, [r1]
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2085              		.loc 1 304 30 view .LVU553
 2086 0008 1168     		ldr	r1, [r2]
 305:src/xeq.c     **** }
 2087              		.loc 1 305 30 view .LVU554
 2088 000a 1A68     		ldr	r2, [r3]
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2089              		.loc 1 303 16 view .LVU555
 2090 000c 064B     		ldr	r3, .L170+12
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2091              		.loc 1 303 30 view .LVU556
 2092 000e 0430     		adds	r0, r0, #4
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2093              		.loc 1 304 30 view .LVU557
 2094 0010 0431     		adds	r1, r1, #4
 305:src/xeq.c     **** }
 2095              		.loc 1 305 30 view .LVU558
 2096 0012 0432     		adds	r2, r2, #4
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2097              		.loc 1 304 16 view .LVU559
 2098 0014 C3E90001 		strd	r0, r1, [r3]
 305:src/xeq.c     **** }
 2099              		.loc 1 305 3 is_stmt 1 view .LVU560
 305:src/xeq.c     **** }
 2100              		.loc 1 305 16 is_stmt 0 view .LVU561
 2101 0018 9A60     		str	r2, [r3, #8]
 306:src/xeq.c     **** 
 2102              		.loc 1 306 1 view .LVU562
 2103 001a 7047     		bx	lr
 2104              	.L171:
ARM GAS  /tmp/ccBFDvgN.s 			page 136


 2105              		.align	2
 2106              	.L170:
 2107 001c 00000000 		.word	main_ram
 2108 0020 00000000 		.word	library_ram
 2109 0024 00000000 		.word	backup_ram
 2110 0028 00000000 		.word	.LANCHOR0
 2111              		.cfi_endproc
 2112              	.LFE13:
 2114              		.section	.text.sizeLIB,"ax",%progbits
 2115              		.align	1
 2116              		.p2align 2,,3
 2117              		.global	sizeLIB
 2118              		.syntax unified
 2119              		.thumb
 2120              		.thumb_func
 2121              		.fpu fpv4-sp-d16
 2123              	sizeLIB:
 2124              	.LVL145:
 2125              	.LFB14:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 2126              		.loc 1 319 25 is_stmt 1 view -0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 0
 2129              		@ frame_needed = 0, uses_anonymous_args = 0
 2130              		@ link register save eliminated.
 320:src/xeq.c     **** 		return xrom_size;
 2131              		.loc 1 320 2 view .LVU564
 320:src/xeq.c     **** 		return xrom_size;
 2132              		.loc 1 320 5 is_stmt 0 view .LVU565
 2133 0000 0328     		cmp	r0, #3
 2134 0002 05D0     		beq	.L175
 323:src/xeq.c     **** }
 2135              		.loc 1 323 3 is_stmt 1 view .LVU566
 323:src/xeq.c     **** }
 2136              		.loc 1 323 24 is_stmt 0 view .LVU567
 2137 0004 044B     		ldr	r3, .L176
 323:src/xeq.c     **** }
 2138              		.loc 1 323 32 view .LVU568
 2139 0006 53F82030 		ldr	r3, [r3, r0, lsl #2]
 323:src/xeq.c     **** }
 2140              		.loc 1 323 10 view .LVU569
 2141 000a 33F8020C 		ldrh	r0, [r3, #-2]
 2142              	.LVL146:
 324:src/xeq.c     **** 
 2143              		.loc 1 324 1 view .LVU570
 2144 000e 7047     		bx	lr
 2145              	.LVL147:
 2146              	.L175:
 321:src/xeq.c     **** 	else
 2147              		.loc 1 321 3 is_stmt 1 view .LVU571
 321:src/xeq.c     **** 	else
 2148              		.loc 1 321 10 is_stmt 0 view .LVU572
 2149 0010 024B     		ldr	r3, .L176+4
 2150 0012 1888     		ldrh	r0, [r3]
 2151              	.LVL148:
 321:src/xeq.c     **** 	else
 2152              		.loc 1 321 10 view .LVU573
ARM GAS  /tmp/ccBFDvgN.s 			page 137


 2153 0014 7047     		bx	lr
 2154              	.L177:
 2155 0016 00BF     		.align	2
 2156              	.L176:
 2157 0018 00000000 		.word	.LANCHOR0
 2158 001c 00000000 		.word	xrom_size
 2159              		.cfi_endproc
 2160              	.LFE14:
 2162              		.section	.text.getprog,"ax",%progbits
 2163              		.align	1
 2164              		.p2align 2,,3
 2165              		.global	getprog
 2166              		.syntax unified
 2167              		.thumb
 2168              		.thumb_func
 2169              		.fpu fpv4-sp-d16
 2171              	getprog:
 2172              	.LVL149:
 2173              	.LFB16:
 343:src/xeq.c     **** 
 2174              		.loc 1 343 33 is_stmt 1 view -0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178              		@ link register save eliminated.
 345:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2179              		.loc 1 345 2 view .LVU575
 346:src/xeq.c     **** 
 2180              		.loc 1 346 15 is_stmt 0 view .LVU576
 2181 0000 C0F30D02 		ubfx	r2, r0, #0, #14
 2182 0004 531E     		subs	r3, r2, #1
 345:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2183              		.loc 1 345 21 view .LVU577
 2184 0006 800B     		lsrs	r0, r0, #14
 2185              	.LVL150:
 346:src/xeq.c     **** 
 2186              		.loc 1 346 2 is_stmt 1 view .LVU578
 348:src/xeq.c     **** 		return OP_NIL | OP_END;
 2187              		.loc 1 348 2 view .LVU579
 348:src/xeq.c     **** 		return OP_NIL | OP_END;
 2188              		.loc 1 348 5 is_stmt 0 view .LVU580
 2189 0008 BAB1     		cbz	r2, .L184
 2190              	.LVL151:
 2191              	.LBB1501:
 2192              	.LBI1501:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 2193              		.loc 1 319 5 is_stmt 1 view .LVU581
 2194              	.LBB1502:
 320:src/xeq.c     **** 		return xrom_size;
 2195              		.loc 1 320 2 view .LVU582
 320:src/xeq.c     **** 		return xrom_size;
 2196              		.loc 1 320 5 is_stmt 0 view .LVU583
 2197 000a 0328     		cmp	r0, #3
 2198 000c 18D0     		beq	.L185
 323:src/xeq.c     **** }
 2199              		.loc 1 323 3 is_stmt 1 view .LVU584
 323:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 138


 2200              		.loc 1 323 24 is_stmt 0 view .LVU585
 2201 000e 0E4A     		ldr	r2, .L187
 323:src/xeq.c     **** }
 2202              		.loc 1 323 32 view .LVU586
 2203 0010 52F82020 		ldr	r2, [r2, r0, lsl #2]
 323:src/xeq.c     **** }
 2204              		.loc 1 323 10 view .LVU587
 2205 0014 32F8022C 		ldrh	r2, [r2, #-2]
 2206              	.L181:
 2207              	.LVL152:
 323:src/xeq.c     **** }
 2208              		.loc 1 323 10 view .LVU588
 2209              	.LBE1502:
 2210              	.LBE1501:
 348:src/xeq.c     **** 		return OP_NIL | OP_END;
 2211              		.loc 1 348 17 view .LVU589
 2212 0018 9342     		cmp	r3, r2
 2213 001a 0EDA     		bge	.L184
 350:src/xeq.c     **** }
 2214              		.loc 1 350 2 is_stmt 1 view .LVU590
 350:src/xeq.c     **** }
 2215              		.loc 1 350 29 is_stmt 0 view .LVU591
 2216 001c 0A4A     		ldr	r2, .L187
 350:src/xeq.c     **** }
 2217              		.loc 1 350 38 view .LVU592
 2218 001e 52F82020 		ldr	r2, [r2, r0, lsl #2]
 2219              	.LBB1504:
 2220              	.LBB1505:
 332:src/xeq.c     **** 	if ( isDBL(r) ) {
 2221              		.loc 1 332 13 view .LVU593
 2222 0022 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 2223              	.LVL153:
 333:src/xeq.c     **** 		r |= loc[1] << 16;
 2224              		.loc 1 333 5 view .LVU594
 2225 0026 00F47041 		and	r1, r0, #61440
 2226 002a B1F5704F 		cmp	r1, #61440
 2227              	.LBE1505:
 2228              	.LBE1504:
 350:src/xeq.c     **** }
 2229              		.loc 1 350 38 view .LVU595
 2230 002e 02EB4303 		add	r3, r2, r3, lsl #1
 2231              	.LVL154:
 2232              	.LBB1508:
 2233              	.LBI1504:
 330:src/xeq.c     **** {
 2234              		.loc 1 330 15 is_stmt 1 view .LVU596
 2235              	.LBB1506:
 332:src/xeq.c     **** 	if ( isDBL(r) ) {
 2236              		.loc 1 332 2 view .LVU597
 333:src/xeq.c     **** 		r |= loc[1] << 16;
 2237              		.loc 1 333 2 view .LVU598
 333:src/xeq.c     **** 		r |= loc[1] << 16;
 2238              		.loc 1 333 5 is_stmt 0 view .LVU599
 2239 0032 00D0     		beq	.L186
 2240              	.LBE1506:
 2241              	.LBE1508:
 351:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 139


 2242              		.loc 1 351 1 view .LVU600
 2243 0034 7047     		bx	lr
 2244              	.L186:
 2245              	.LBB1509:
 2246              	.LBB1507:
 334:src/xeq.c     **** 	}
 2247              		.loc 1 334 3 is_stmt 1 view .LVU601
 334:src/xeq.c     **** 	}
 2248              		.loc 1 334 5 is_stmt 0 view .LVU602
 2249 0036 1868     		ldr	r0, [r3]	@ unaligned
 2250              	.LVL155:
 334:src/xeq.c     **** 	}
 2251              		.loc 1 334 5 view .LVU603
 2252 0038 7047     		bx	lr
 2253              	.LVL156:
 2254              	.L184:
 334:src/xeq.c     **** 	}
 2255              		.loc 1 334 5 view .LVU604
 2256              	.LBE1507:
 2257              	.LBE1509:
 349:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 2258              		.loc 1 349 10 view .LVU605
 2259 003a 4FF49D70 		mov	r0, #314
 2260              	.LVL157:
 351:src/xeq.c     **** 
 2261              		.loc 1 351 1 view .LVU606
 2262 003e 7047     		bx	lr
 2263              	.LVL158:
 2264              	.L185:
 2265              	.LBB1510:
 2266              	.LBB1503:
 321:src/xeq.c     **** 	else
 2267              		.loc 1 321 3 is_stmt 1 view .LVU607
 321:src/xeq.c     **** 	else
 2268              		.loc 1 321 10 is_stmt 0 view .LVU608
 2269 0040 024A     		ldr	r2, .L187+4
 2270 0042 1288     		ldrh	r2, [r2]
 2271 0044 E8E7     		b	.L181
 2272              	.L188:
 2273 0046 00BF     		.align	2
 2274              	.L187:
 2275 0048 00000000 		.word	.LANCHOR0
 2276 004c 00000000 		.word	xrom_size
 2277              	.LBE1503:
 2278              	.LBE1510:
 2279              		.cfi_endproc
 2280              	.LFE16:
 2282              		.section	.text.get_current_prog,"ax",%progbits
 2283              		.align	1
 2284              		.p2align 2,,3
 2285              		.global	get_current_prog
 2286              		.syntax unified
 2287              		.thumb
 2288              		.thumb_func
 2289              		.fpu fpv4-sp-d16
 2291              	get_current_prog:
 2292              	.LFB17:
ARM GAS  /tmp/ccBFDvgN.s 			page 140


 357:src/xeq.c     **** 
 2293              		.loc 1 357 40 is_stmt 1 view -0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
 2297              		@ link register save eliminated.
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2298              		.loc 1 359 2 view .LVU610
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2299              		.loc 1 359 21 is_stmt 0 view .LVU611
 2300 0000 074B     		ldr	r3, .L190
 360:src/xeq.c     **** }
 2301              		.loc 1 360 18 view .LVU612
 2302 0002 084A     		ldr	r2, .L190+4
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2303              		.loc 1 359 21 view .LVU613
 2304 0004 1B68     		ldr	r3, [r3]
 2305 0006 B3F8EC37 		ldrh	r3, [r3, #2028]
 2306              	.LVL159:
 360:src/xeq.c     **** }
 2307              		.loc 1 360 2 is_stmt 1 view .LVU614
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2308              		.loc 1 359 12 is_stmt 0 view .LVU615
 2309 000a 990B     		lsrs	r1, r3, #14
 360:src/xeq.c     **** }
 2310              		.loc 1 360 27 view .LVU616
 2311 000c C3F30D03 		ubfx	r3, r3, #0, #14
 2312              	.LVL160:
 360:src/xeq.c     **** }
 2313              		.loc 1 360 27 view .LVU617
 2314 0010 52F82100 		ldr	r0, [r2, r1, lsl #2]
 2315 0014 03F10043 		add	r3, r3, #-2147483648
 2316 0018 013B     		subs	r3, r3, #1
 361:src/xeq.c     **** 
 2317              		.loc 1 361 1 view .LVU618
 2318 001a 00EB4300 		add	r0, r0, r3, lsl #1
 2319 001e 7047     		bx	lr
 2320              	.L191:
 2321              		.align	2
 2322              	.L190:
 2323 0020 00000000 		.word	main_ram
 2324 0024 00000000 		.word	.LANCHOR0
 2325              		.cfi_endproc
 2326              	.LFE17:
 2328              		.section	.text.do_inc,"ax",%progbits
 2329              		.align	1
 2330              		.p2align 2,,3
 2331              		.global	do_inc
 2332              		.syntax unified
 2333              		.thumb
 2334              		.thumb_func
 2335              		.fpu fpv4-sp-d16
 2337              	do_inc:
 2338              	.LVL161:
 2339              	.LFB20:
 418:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2340              		.loc 1 418 54 is_stmt 1 view -0
ARM GAS  /tmp/ccBFDvgN.s 			page 141


 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 16
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2344              		.loc 1 419 2 view .LVU620
 418:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2345              		.loc 1 418 54 is_stmt 0 view .LVU621
 2346 0000 70B5     		push	{r4, r5, r6, lr}
 2347              		.cfi_def_cfa_offset 16
 2348              		.cfi_offset 4, -16
 2349              		.cfi_offset 5, -12
 2350              		.cfi_offset 6, -8
 2351              		.cfi_offset 14, -4
 2352 0002 84B0     		sub	sp, sp, #16
 2353              		.cfi_def_cfa_offset 32
 418:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2354              		.loc 1 418 54 view .LVU622
 2355 0004 0546     		mov	r5, r0
 2356 0006 0191     		str	r1, [sp, #4]
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2357              		.loc 1 419 42 view .LVU623
 2358 0008 FFF7FEFF 		bl	getprog
 2359              	.LVL162:
 423:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2360              		.loc 1 423 12 view .LVU624
 2361 000c 0D4E     		ldr	r6, .L196
 424:src/xeq.c     **** 
 2362              		.loc 1 424 11 view .LVU625
 2363 000e 0199     		ldr	r1, [sp, #4]
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2364              		.loc 1 419 42 view .LVU626
 2365 0010 00F47040 		and	r0, r0, #61440
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2366              		.loc 1 419 27 view .LVU627
 2367 0014 6C1C     		adds	r4, r5, #1
 420:src/xeq.c     **** 	unsigned short int bottom = 0;
 2368              		.loc 1 420 21 view .LVU628
 2369 0016 0023     		movs	r3, #0
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2370              		.loc 1 419 27 view .LVU629
 2371 0018 B0F5704F 		cmp	r0, #61440
 2372 001c 08BF     		it	eq
 2373 001e 0134     		addeq	r4, r4, #1
 424:src/xeq.c     **** 
 2374              		.loc 1 424 11 view .LVU630
 2375 0020 0DF10E02 		add	r2, sp, #14
 2376 0024 2846     		mov	r0, r5
 423:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2377              		.loc 1 423 12 view .LVU631
 2378 0026 3360     		str	r3, [r6]
 420:src/xeq.c     **** 	unsigned short int bottom = 0;
 2379              		.loc 1 420 21 view .LVU632
 2380 0028 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 424:src/xeq.c     **** 
 2381              		.loc 1 424 11 view .LVU633
 2382 002c FFF7FEFF 		bl	find_section_bounds
 2383              	.LVL163:
ARM GAS  /tmp/ccBFDvgN.s 			page 142


 419:src/xeq.c     **** 	unsigned short int top = 0;
 2384              		.loc 1 419 27 view .LVU634
 2385 0030 A4B2     		uxth	r4, r4
 2386              	.LVL164:
 420:src/xeq.c     **** 	unsigned short int bottom = 0;
 2387              		.loc 1 420 2 is_stmt 1 view .LVU635
 421:src/xeq.c     **** 
 2388              		.loc 1 421 2 view .LVU636
 423:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2389              		.loc 1 423 2 view .LVU637
 424:src/xeq.c     **** 
 2390              		.loc 1 424 2 view .LVU638
 426:src/xeq.c     **** 		PcWrapped = 1;
 2391              		.loc 1 426 2 view .LVU639
 426:src/xeq.c     **** 		PcWrapped = 1;
 2392              		.loc 1 426 5 is_stmt 0 view .LVU640
 2393 0032 8442     		cmp	r4, r0
 427:src/xeq.c     **** 		return top;
 2394              		.loc 1 427 3 is_stmt 1 view .LVU641
 428:src/xeq.c     **** 	}
 2395              		.loc 1 428 10 is_stmt 0 view .LVU642
 2396 0034 85BF     		ittet	hi
 2397 0036 BDF80E00 		ldrhhi	r0, [sp, #14]
 2398              	.LVL165:
 427:src/xeq.c     **** 		return top;
 2399              		.loc 1 427 13 view .LVU643
 2400 003a 0123     		movhi	r3, #1
 430:src/xeq.c     **** }
 2401              		.loc 1 430 9 view .LVU644
 2402 003c 2046     		movls	r0, r4
 427:src/xeq.c     **** 		return top;
 2403              		.loc 1 427 13 view .LVU645
 2404 003e 3360     		strhi	r3, [r6]
 428:src/xeq.c     **** 	}
 2405              		.loc 1 428 3 is_stmt 1 view .LVU646
 430:src/xeq.c     **** }
 2406              		.loc 1 430 2 view .LVU647
 431:src/xeq.c     **** 
 2407              		.loc 1 431 1 is_stmt 0 view .LVU648
 2408 0040 04B0     		add	sp, sp, #16
 2409              		.cfi_def_cfa_offset 16
 2410              		@ sp needed
 2411 0042 70BD     		pop	{r4, r5, r6, pc}
 2412              	.LVL166:
 2413              	.L197:
 431:src/xeq.c     **** 
 2414              		.loc 1 431 1 view .LVU649
 2415              		.align	2
 2416              	.L196:
 2417 0044 00000000 		.word	PcWrapped
 2418              		.cfi_endproc
 2419              	.LFE20:
 2421              		.section	.text.user_pc.part.0,"ax",%progbits
 2422              		.align	1
 2423              		.p2align 2,,3
 2424              		.syntax unified
 2425              		.thumb
ARM GAS  /tmp/ccBFDvgN.s 			page 143


 2426              		.thumb_func
 2427              		.fpu fpv4-sp-d16
 2429              	user_pc.part.0:
 2430              	.LVL167:
 2431              	.LFB276:
 494:src/xeq.c     **** 	unsigned int n = 1;
 2432              		.loc 1 494 14 is_stmt 1 view -0
 2433              		.cfi_startproc
 2434              		@ args = 0, pretend = 0, frame = 0
 2435              		@ frame_needed = 0, uses_anonymous_args = 0
 505:src/xeq.c     **** 	while (base < pc) {
 2436              		.loc 1 505 2 view .LVU651
 505:src/xeq.c     **** 	while (base < pc) {
 2437              		.loc 1 505 9 is_stmt 0 view .LVU652
 2438 0000 20F47F53 		bic	r3, r0, #16320
 2439 0004 23F03F03 		bic	r3, r3, #63
 494:src/xeq.c     **** 	unsigned int n = 1;
 2440              		.loc 1 494 14 view .LVU653
 2441 0008 70B5     		push	{r4, r5, r6, lr}
 2442              		.cfi_def_cfa_offset 16
 2443              		.cfi_offset 4, -16
 2444              		.cfi_offset 5, -12
 2445              		.cfi_offset 6, -8
 2446              		.cfi_offset 14, -4
 494:src/xeq.c     **** 	unsigned int n = 1;
 2447              		.loc 1 494 14 view .LVU654
 2448 000a 0546     		mov	r5, r0
 505:src/xeq.c     **** 	while (base < pc) {
 2449              		.loc 1 505 7 view .LVU655
 2450 000c 581C     		adds	r0, r3, #1
 2451              	.LVL168:
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2452              		.loc 1 506 2 is_stmt 1 view .LVU656
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2453              		.loc 1 506 8 view .LVU657
 2454 000e 8542     		cmp	r5, r0
 2455 0010 0ED9     		bls	.L201
 2456 0012 084E     		ldr	r6, .L205
 495:src/xeq.c     **** 	unsigned int base;
 2457              		.loc 1 495 15 is_stmt 0 view .LVU658
 2458 0014 0124     		movs	r4, #1
 2459 0016 03E0     		b	.L200
 2460              	.LVL169:
 2461              	.L204:
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2462              		.loc 1 506 8 view .LVU659
 2463 0018 8542     		cmp	r5, r0
 510:src/xeq.c     **** 	}
 2464              		.loc 1 510 3 view .LVU660
 2465 001a 04F10104 		add	r4, r4, #1
 2466              	.LVL170:
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2467              		.loc 1 506 8 is_stmt 1 view .LVU661
 2468 001e 05D9     		bls	.L198
 2469              	.LVL171:
 2470              	.L200:
 507:src/xeq.c     **** 		if (PcWrapped)
ARM GAS  /tmp/ccBFDvgN.s 			page 144


 2471              		.loc 1 507 3 view .LVU662
 507:src/xeq.c     **** 		if (PcWrapped)
 2472              		.loc 1 507 10 is_stmt 0 view .LVU663
 2473 0020 0021     		movs	r1, #0
 2474 0022 FFF7FEFF 		bl	do_inc
 2475              	.LVL172:
 510:src/xeq.c     **** 	}
 2476              		.loc 1 510 3 is_stmt 1 view .LVU664
 508:src/xeq.c     **** 			return n;
 2477              		.loc 1 508 6 is_stmt 0 view .LVU665
 2478 0026 3368     		ldr	r3, [r6]
 2479              	.LVL173:
 508:src/xeq.c     **** 			return n;
 2480              		.loc 1 508 3 is_stmt 1 view .LVU666
 508:src/xeq.c     **** 			return n;
 2481              		.loc 1 508 6 is_stmt 0 view .LVU667
 2482 0028 002B     		cmp	r3, #0
 2483 002a F5D0     		beq	.L204
 2484              	.LVL174:
 2485              	.L198:
 513:src/xeq.c     **** 
 2486              		.loc 1 513 1 view .LVU668
 2487 002c 2046     		mov	r0, r4
 2488              	.LVL175:
 513:src/xeq.c     **** 
 2489              		.loc 1 513 1 view .LVU669
 2490 002e 70BD     		pop	{r4, r5, r6, pc}
 2491              	.LVL176:
 2492              	.L201:
 495:src/xeq.c     **** 	unsigned int base;
 2493              		.loc 1 495 15 view .LVU670
 2494 0030 0124     		movs	r4, #1
 2495 0032 FBE7     		b	.L198
 2496              	.L206:
 2497              		.align	2
 2498              	.L205:
 2499 0034 00000000 		.word	PcWrapped
 2500              		.cfi_endproc
 2501              	.LFE276:
 2503              		.section	.rodata.print_step.str1.4,"aMS",%progbits,1
 2504              		.align	2
 2505              	.LC0:
 2506 0000 3030303A 		.ascii	"000:\000"
 2506      00
 2507              		.section	.text.print_step,"ax",%progbits
 2508              		.align	1
 2509              		.p2align 2,,3
 2510              		.syntax unified
 2511              		.thumb
 2512              		.thumb_func
 2513              		.fpu fpv4-sp-d16
 2515              	print_step:
 2516              	.LVL177:
 2517              	.LFB234:
4426:src/xeq.c     **** 	char buf[16];
 2518              		.loc 1 4426 41 is_stmt 1 view -0
 2519              		.cfi_startproc
ARM GAS  /tmp/ccBFDvgN.s 			page 145


 2520              		@ args = 0, pretend = 0, frame = 16
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
4427:src/xeq.c     **** 	const unsigned int pc = state_pc();
 2522              		.loc 1 4427 2 view .LVU672
4428:src/xeq.c     **** 	char *p = TraceBuffer;
 2523              		.loc 1 4428 2 view .LVU673
4428:src/xeq.c     **** 	char *p = TraceBuffer;
 2524              		.loc 1 4428 26 is_stmt 0 view .LVU674
 2525 0000 254B     		ldr	r3, .L221
 2526 0002 1B68     		ldr	r3, [r3]
4426:src/xeq.c     **** 	char buf[16];
 2527              		.loc 1 4426 41 view .LVU675
 2528 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 2529              		.cfi_def_cfa_offset 20
 2530              		.cfi_offset 4, -20
 2531              		.cfi_offset 5, -16
 2532              		.cfi_offset 6, -12
 2533              		.cfi_offset 7, -8
 2534              		.cfi_offset 14, -4
4428:src/xeq.c     **** 	char *p = TraceBuffer;
 2535              		.loc 1 4428 26 view .LVU676
 2536 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 2537              	.LVL178:
4429:src/xeq.c     **** 
 2538              		.loc 1 4429 2 is_stmt 1 view .LVU677
4431:src/xeq.c     **** 		*p++ = 'x';
 2539              		.loc 1 4431 2 view .LVU678
4431:src/xeq.c     **** 		*p++ = 'x';
 2540              		.loc 1 4431 6 is_stmt 0 view .LVU679
 2541 000a A10B     		lsrs	r1, r4, #14
4431:src/xeq.c     **** 		*p++ = 'x';
 2542              		.loc 1 4431 5 view .LVU680
 2543 000c 0329     		cmp	r1, #3
4426:src/xeq.c     **** 	char buf[16];
 2544              		.loc 1 4426 41 view .LVU681
 2545 000e 85B0     		sub	sp, sp, #20
 2546              		.cfi_def_cfa_offset 40
4426:src/xeq.c     **** 	char buf[16];
 2547              		.loc 1 4426 41 view .LVU682
 2548 0010 0546     		mov	r5, r0
4431:src/xeq.c     **** 		*p++ = 'x';
 2549              		.loc 1 4431 5 view .LVU683
 2550 0012 39D0     		beq	.L218
4433:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2551              		.loc 1 4433 9 is_stmt 1 view .LVU684
4433:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2552              		.loc 1 4433 12 is_stmt 0 view .LVU685
 2553 0014 14F4404F 		tst	r4, #49152
 2554 0018 0FD1     		bne	.L219
4429:src/xeq.c     **** 
 2555              		.loc 1 4429 8 view .LVU686
 2556 001a 204E     		ldr	r6, .L221+4
 2557 001c 3746     		mov	r7, r6
 2558              	.LVL179:
4437:src/xeq.c     **** 		scopy(p, "000:");
 2559              		.loc 1 4437 2 is_stmt 1 view .LVU687
4437:src/xeq.c     **** 		scopy(p, "000:");
ARM GAS  /tmp/ccBFDvgN.s 			page 146


 2560              		.loc 1 4437 5 is_stmt 0 view .LVU688
 2561 001e BCB9     		cbnz	r4, .L220
 2562              	.LVL180:
 2563              	.L212:
4438:src/xeq.c     **** 	else {
 2564              		.loc 1 4438 3 is_stmt 1 view .LVU689
 2565 0020 1F49     		ldr	r1, .L221+8
 2566 0022 3846     		mov	r0, r7
 2567 0024 FFF7FEFF 		bl	scopy
 2568              	.LVL181:
 2569              	.L211:
4446:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2570              		.loc 1 4446 2 view .LVU690
4446:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2571              		.loc 1 4446 20 is_stmt 0 view .LVU691
 2572 0028 1E4A     		ldr	r2, .L221+12
4447:src/xeq.c     **** }
 2573              		.loc 1 4447 10 view .LVU692
 2574 002a 1F49     		ldr	r1, .L221+16
4446:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2575              		.loc 1 4446 20 view .LVU693
 2576 002c 937D     		ldrb	r3, [r2, #22]	@ zero_extendqisi2
4447:src/xeq.c     **** }
 2577              		.loc 1 4447 10 view .LVU694
 2578 002e 0E60     		str	r6, [r1]
4446:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2579              		.loc 1 4446 20 view .LVU695
 2580 0030 43F08003 		orr	r3, r3, #128
 2581 0034 9375     		strb	r3, [r2, #22]
4447:src/xeq.c     **** }
 2582              		.loc 1 4447 2 is_stmt 1 view .LVU696
4448:src/xeq.c     **** 
 2583              		.loc 1 4448 1 is_stmt 0 view .LVU697
 2584 0036 05B0     		add	sp, sp, #20
 2585              		.cfi_remember_state
 2586              		.cfi_def_cfa_offset 20
 2587              		@ sp needed
 2588 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 2589              	.LVL182:
 2590              	.L219:
 2591              		.cfi_restore_state
4434:src/xeq.c     **** 		*p++ = ' ';
 2592              		.loc 1 4434 3 is_stmt 1 view .LVU698
4434:src/xeq.c     **** 		*p++ = ' ';
 2593              		.loc 1 4434 7 is_stmt 0 view .LVU699
 2594 003a 1848     		ldr	r0, .L221+4
 2595              	.LVL183:
4434:src/xeq.c     **** 		*p++ = ' ';
 2596              		.loc 1 4434 7 view .LVU700
 2597 003c 0122     		movs	r2, #1
 2598 003e 0646     		mov	r6, r0
 2599 0040 FFF7FEFF 		bl	num_arg_0
 2600              	.LVL184:
4435:src/xeq.c     **** 	}
 2601              		.loc 1 4435 3 is_stmt 1 view .LVU701
4435:src/xeq.c     **** 	}
 2602              		.loc 1 4435 5 is_stmt 0 view .LVU702
ARM GAS  /tmp/ccBFDvgN.s 			page 147


 2603 0044 0746     		mov	r7, r0
 2604              	.LVL185:
4435:src/xeq.c     **** 	}
 2605              		.loc 1 4435 8 view .LVU703
 2606 0046 2023     		movs	r3, #32
 2607 0048 07F8013B 		strb	r3, [r7], #1
 2608              	.LVL186:
4437:src/xeq.c     **** 		scopy(p, "000:");
 2609              		.loc 1 4437 2 is_stmt 1 view .LVU704
4437:src/xeq.c     **** 		scopy(p, "000:");
 2610              		.loc 1 4437 5 is_stmt 0 view .LVU705
 2611 004c 002C     		cmp	r4, #0
 2612 004e E7D0     		beq	.L212
 2613              	.L220:
 2614              	.LVL187:
 2615              	.LBB1511:
 2616              	.LBB1512:
4437:src/xeq.c     **** 		scopy(p, "000:");
 2617              		.loc 1 4437 5 view .LVU706
 2618 0050 2046     		mov	r0, r4
 2619 0052 FFF7FEFF 		bl	user_pc.part.0
 2620              	.LVL188:
 2621 0056 0146     		mov	r1, r0
 2622              	.L209:
4437:src/xeq.c     **** 		scopy(p, "000:");
 2623              		.loc 1 4437 5 view .LVU707
 2624              	.LBE1512:
 2625              	.LBE1511:
4440:src/xeq.c     **** 		*p++ = ':';
 2626              		.loc 1 4440 7 view .LVU708
 2627 0058 0322     		movs	r2, #3
 2628 005a 3846     		mov	r0, r7
 2629 005c FFF7FEFF 		bl	num_arg_0
 2630              	.LVL189:
4441:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2631              		.loc 1 4441 8 view .LVU709
 2632 0060 0746     		mov	r7, r0
 2633 0062 3A23     		movs	r3, #58
 2634 0064 07F8013B 		strb	r3, [r7], #1
4440:src/xeq.c     **** 		*p++ = ':';
 2635              		.loc 1 4440 7 view .LVU710
 2636 0068 0446     		mov	r4, r0
 2637              	.LVL190:
4441:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2638              		.loc 1 4441 3 is_stmt 1 view .LVU711
4442:src/xeq.c     **** 		if (*p == '?')
 2639              		.loc 1 4442 3 view .LVU712
 2640 006a 6946     		mov	r1, sp
 2641 006c 2846     		mov	r0, r5
 2642 006e FFF7FEFF 		bl	prt
 2643              	.LVL191:
 2644 0072 0022     		movs	r2, #0
 2645 0074 0146     		mov	r1, r0
 2646 0076 3846     		mov	r0, r7
 2647 0078 FFF7FEFF 		bl	scopy_char
 2648              	.LVL192:
4443:src/xeq.c     **** 			*p = '\0';
ARM GAS  /tmp/ccBFDvgN.s 			page 148


 2649              		.loc 1 4443 3 view .LVU713
4443:src/xeq.c     **** 			*p = '\0';
 2650              		.loc 1 4443 6 is_stmt 0 view .LVU714
 2651 007c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2652 007e 3F2B     		cmp	r3, #63
4444:src/xeq.c     **** 	}
 2653              		.loc 1 4444 4 is_stmt 1 view .LVU715
4444:src/xeq.c     **** 	}
 2654              		.loc 1 4444 7 is_stmt 0 view .LVU716
 2655 0080 04BF     		itt	eq
 2656 0082 0023     		moveq	r3, #0
 2657 0084 6370     		strbeq	r3, [r4, #1]
 2658 0086 CFE7     		b	.L211
 2659              	.LVL193:
 2660              	.L218:
4432:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2661              		.loc 1 4432 3 is_stmt 1 view .LVU717
4432:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2662              		.loc 1 4432 8 is_stmt 0 view .LVU718
 2663 0088 044E     		ldr	r6, .L221+4
 2664 008a 3746     		mov	r7, r6
 2665 008c 7823     		movs	r3, #120
 2666 008e 07F8013B 		strb	r3, [r7], #1
4437:src/xeq.c     **** 		scopy(p, "000:");
 2667              		.loc 1 4437 2 is_stmt 1 view .LVU719
4440:src/xeq.c     **** 		*p++ = ':';
 2668              		.loc 1 4440 3 view .LVU720
 2669              	.LBB1514:
 2670              	.LBI1511:
 494:src/xeq.c     **** 	unsigned int n = 1;
 2671              		.loc 1 494 14 view .LVU721
 2672              	.LBB1513:
 495:src/xeq.c     **** 	unsigned int base;
 2673              		.loc 1 495 2 view .LVU722
 2674              	.LVL194:
 496:src/xeq.c     **** 
 2675              		.loc 1 496 2 view .LVU723
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 2676              		.loc 1 499 2 view .LVU724
 500:src/xeq.c     **** #else
 2677              		.loc 1 500 3 view .LVU725
 500:src/xeq.c     **** #else
 2678              		.loc 1 500 24 is_stmt 0 view .LVU726
 2679 0092 C4F30D01 		ubfx	r1, r4, #0, #14
 2680 0096 DFE7     		b	.L209
 2681              	.L222:
 2682              		.align	2
 2683              	.L221:
 2684 0098 00000000 		.word	main_ram
 2685 009c 00000000 		.word	TraceBuffer
 2686 00a0 00000000 		.word	.LC0
 2687 00a4 00000000 		.word	StateWhileOn
 2688 00a8 00000000 		.word	DispMsg
 2689              	.LBE1513:
 2690              	.LBE1514:
 2691              		.cfi_endproc
 2692              	.LFE234:
ARM GAS  /tmp/ccBFDvgN.s 			page 149


 2694              		.section	.text.do_dec,"ax",%progbits
 2695              		.align	1
 2696              		.p2align 2,,3
 2697              		.global	do_dec
 2698              		.syntax unified
 2699              		.thumb
 2700              		.thumb_func
 2701              		.fpu fpv4-sp-d16
 2703              	do_dec:
 2704              	.LVL195:
 2705              	.LFB21:
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2706              		.loc 1 437 48 is_stmt 1 view -0
 2707              		.cfi_startproc
 2708              		@ args = 0, pretend = 0, frame = 8
 2709              		@ frame_needed = 0, uses_anonymous_args = 0
 438:src/xeq.c     **** 	unsigned short int bottom = 0;
 2710              		.loc 1 438 2 view .LVU728
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2711              		.loc 1 437 48 is_stmt 0 view .LVU729
 2712 0000 70B5     		push	{r4, r5, r6, lr}
 2713              		.cfi_def_cfa_offset 16
 2714              		.cfi_offset 4, -16
 2715              		.cfi_offset 5, -12
 2716              		.cfi_offset 6, -8
 2717              		.cfi_offset 14, -4
 441:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2718              		.loc 1 441 12 view .LVU730
 2719 0002 114E     		ldr	r6, .L228
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2720              		.loc 1 437 48 view .LVU731
 2721 0004 82B0     		sub	sp, sp, #8
 2722              		.cfi_def_cfa_offset 24
 438:src/xeq.c     **** 	unsigned short int bottom = 0;
 2723              		.loc 1 438 21 view .LVU732
 2724 0006 0023     		movs	r3, #0
 442:src/xeq.c     **** 
 2725              		.loc 1 442 11 view .LVU733
 2726 0008 0DF10602 		add	r2, sp, #6
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2727              		.loc 1 437 48 view .LVU734
 2728 000c 0546     		mov	r5, r0
 441:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2729              		.loc 1 441 12 view .LVU735
 2730 000e 3360     		str	r3, [r6]
 438:src/xeq.c     **** 	unsigned short int bottom = 0;
 2731              		.loc 1 438 21 view .LVU736
 2732 0010 ADF80630 		strh	r3, [sp, #6]	@ movhi
 439:src/xeq.c     **** 
 2733              		.loc 1 439 2 is_stmt 1 view .LVU737
 2734              	.LVL196:
 441:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2735              		.loc 1 441 2 view .LVU738
 442:src/xeq.c     **** 
 2736              		.loc 1 442 2 view .LVU739
 442:src/xeq.c     **** 
 2737              		.loc 1 442 11 is_stmt 0 view .LVU740
ARM GAS  /tmp/ccBFDvgN.s 			page 150


 2738 0014 FFF7FEFF 		bl	find_section_bounds
 2739              	.LVL197:
 444:src/xeq.c     **** 		PcWrapped = 1;
 2740              		.loc 1 444 9 view .LVU741
 2741 0018 BDF80630 		ldrh	r3, [sp, #6]
 2742              	.LVL198:
 444:src/xeq.c     **** 		PcWrapped = 1;
 2743              		.loc 1 444 2 is_stmt 1 view .LVU742
 444:src/xeq.c     **** 		PcWrapped = 1;
 2744              		.loc 1 444 5 is_stmt 0 view .LVU743
 2745 001c AB42     		cmp	r3, r5
 445:src/xeq.c     **** 		pc = bottom;
 2746              		.loc 1 445 13 view .LVU744
 2747 001e 25BF     		ittet	cs
 2748 0020 0122     		movcs	r2, #1
 2749 0022 0446     		movcs	r4, r0
 445:src/xeq.c     **** 		pc = bottom;
 2750              		.loc 1 445 3 is_stmt 1 view .LVU745
 449:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2751              		.loc 1 449 3 is_stmt 0 view .LVU746
 2752 0024 05F1FF34 		addcc	r4, r5, #-1
 445:src/xeq.c     **** 		pc = bottom;
 2753              		.loc 1 445 13 view .LVU747
 2754 0028 3260     		strcs	r2, [r6]
 446:src/xeq.c     **** 	}
 2755              		.loc 1 446 3 is_stmt 1 view .LVU748
 2756              	.LVL199:
 449:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2757              		.loc 1 449 3 view .LVU749
 450:src/xeq.c     **** 		--pc;
 2758              		.loc 1 450 2 view .LVU750
 450:src/xeq.c     **** 		--pc;
 2759              		.loc 1 450 5 is_stmt 0 view .LVU751
 2760 002a A342     		cmp	r3, r4
 2761 002c 09D2     		bcs	.L223
 450:src/xeq.c     **** 		--pc;
 2762              		.loc 1 450 18 discriminator 1 view .LVU752
 2763 002e 651E     		subs	r5, r4, #1
 2764 0030 2846     		mov	r0, r5
 2765              	.LVL200:
 450:src/xeq.c     **** 		--pc;
 2766              		.loc 1 450 18 discriminator 1 view .LVU753
 2767 0032 FFF7FEFF 		bl	getprog
 2768              	.LVL201:
 2769 0036 00F47040 		and	r0, r0, #61440
 451:src/xeq.c     **** 	return pc;
 2770              		.loc 1 451 3 discriminator 1 view .LVU754
 2771 003a B0F5704F 		cmp	r0, #61440
 2772 003e 08BF     		it	eq
 2773 0040 2C46     		moveq	r4, r5
 2774              	.LVL202:
 2775              	.L223:
 453:src/xeq.c     **** 
 2776              		.loc 1 453 1 view .LVU755
 2777 0042 2046     		mov	r0, r4
 2778 0044 02B0     		add	sp, sp, #8
 2779              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccBFDvgN.s 			page 151


 2780              		@ sp needed
 2781 0046 70BD     		pop	{r4, r5, r6, pc}
 2782              	.L229:
 2783              		.align	2
 2784              	.L228:
 2785 0048 00000000 		.word	PcWrapped
 2786              		.cfi_endproc
 2787              	.LFE21:
 2789              		.section	.text.update_program_bounds,"ax",%progbits
 2790              		.align	1
 2791              		.p2align 2,,3
 2792              		.global	update_program_bounds
 2793              		.syntax unified
 2794              		.thumb
 2795              		.thumb_func
 2796              		.fpu fpv4-sp-d16
 2798              	update_program_bounds:
 2799              	.LVL203:
 2800              	.LFB24:
 470:src/xeq.c     **** 	unsigned int pc = state_pc();
 2801              		.loc 1 470 45 is_stmt 1 view -0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 0
 2804              		@ frame_needed = 0, uses_anonymous_args = 0
 471:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2805              		.loc 1 471 2 view .LVU757
 470:src/xeq.c     **** 	unsigned int pc = state_pc();
 2806              		.loc 1 470 45 is_stmt 0 view .LVU758
 2807 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2808              		.cfi_def_cfa_offset 24
 2809              		.cfi_offset 3, -24
 2810              		.cfi_offset 4, -20
 2811              		.cfi_offset 5, -16
 2812              		.cfi_offset 6, -12
 2813              		.cfi_offset 7, -8
 2814              		.cfi_offset 14, -4
 471:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2815              		.loc 1 471 20 view .LVU759
 2816 0002 224F     		ldr	r7, .L251
 2817 0004 3D68     		ldr	r5, [r7]
 471:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2818              		.loc 1 471 15 view .LVU760
 2819 0006 B5F8E047 		ldrh	r4, [r5, #2016]
 2820              	.LVL204:
 472:src/xeq.c     **** 		State.pc = pc = 1;
 2821              		.loc 1 472 2 is_stmt 1 view .LVU761
 472:src/xeq.c     **** 		State.pc = pc = 1;
 2822              		.loc 1 472 5 is_stmt 0 view .LVU762
 2823 000a 34B9     		cbnz	r4, .L231
 472:src/xeq.c     **** 		State.pc = pc = 1;
 2824              		.loc 1 472 14 discriminator 1 view .LVU763
 2825 000c 204B     		ldr	r3, .L251+4
 2826 000e 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2827 0010 5B06     		lsls	r3, r3, #25
 473:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2828              		.loc 1 473 3 is_stmt 1 discriminator 1 view .LVU764
 2829              	.LVL205:
ARM GAS  /tmp/ccBFDvgN.s 			page 152


 473:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2830              		.loc 1 473 12 is_stmt 0 discriminator 1 view .LVU765
 2831 0012 44BF     		itt	mi
 2832 0014 0124     		movmi	r4, #1
 2833 0016 A5F8E047 		strhmi	r4, [r5, #2016]	@ movhi
 2834              	.LVL206:
 2835              	.L231:
 474:src/xeq.c     **** 		return;
 2836              		.loc 1 474 2 is_stmt 1 view .LVU766
 474:src/xeq.c     **** 		return;
 2837              		.loc 1 474 5 is_stmt 0 view .LVU767
 2838 001a 18B9     		cbnz	r0, .L232
 474:src/xeq.c     **** 		return;
 2839              		.loc 1 474 23 discriminator 1 view .LVU768
 2840 001c B5F8EC37 		ldrh	r3, [r5, #2028]
 474:src/xeq.c     **** 		return;
 2841              		.loc 1 474 14 discriminator 1 view .LVU769
 2842 0020 A342     		cmp	r3, r4
 2843 0022 2DD9     		bls	.L248
 2844              	.L232:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2845              		.loc 1 476 2 is_stmt 1 view .LVU770
 476:src/xeq.c     **** 		ProgEnd = pc;
 2846              		.loc 1 476 17 is_stmt 0 view .LVU771
 2847 0024 1B4E     		ldr	r6, .L251+8
 2848 0026 0023     		movs	r3, #0
 2849 0028 3360     		str	r3, [r6]
 476:src/xeq.c     **** 		ProgEnd = pc;
 2850              		.loc 1 476 22 is_stmt 1 view .LVU772
 2851 002a 05E0     		b	.L236
 2852              	.LVL207:
 2853              	.L249:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2854              		.loc 1 476 39 is_stmt 0 discriminator 2 view .LVU773
 2855 002c FFF7FEFF 		bl	do_inc
 2856              	.LVL208:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2857              		.loc 1 476 2 discriminator 2 view .LVU774
 2858 0030 3368     		ldr	r3, [r6]
 2859 0032 3D68     		ldr	r5, [r7]
 476:src/xeq.c     **** 		ProgEnd = pc;
 2860              		.loc 1 476 39 discriminator 2 view .LVU775
 2861 0034 0446     		mov	r4, r0
 2862              	.LVL209:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2863              		.loc 1 476 22 is_stmt 1 discriminator 2 view .LVU776
 476:src/xeq.c     **** 		ProgEnd = pc;
 2864              		.loc 1 476 2 is_stmt 0 discriminator 2 view .LVU777
 2865 0036 5BB9     		cbnz	r3, .L234
 2866              	.LVL210:
 2867              	.L236:
 477:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2868              		.loc 1 477 3 is_stmt 1 view .LVU778
 477:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2869              		.loc 1 477 11 is_stmt 0 view .LVU779
 2870 0038 A5F8EE47 		strh	r4, [r5, #2030]	@ movhi
 478:src/xeq.c     **** 			break;
ARM GAS  /tmp/ccBFDvgN.s 			page 153


 2871              		.loc 1 478 3 is_stmt 1 view .LVU780
 478:src/xeq.c     **** 			break;
 2872              		.loc 1 478 7 is_stmt 0 view .LVU781
 2873 003c 2046     		mov	r0, r4
 2874 003e FFF7FEFF 		bl	getprog
 2875              	.LVL211:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2876              		.loc 1 476 34 is_stmt 1 view .LVU782
 478:src/xeq.c     **** 			break;
 2877              		.loc 1 478 7 is_stmt 0 view .LVU783
 2878 0042 0346     		mov	r3, r0
 478:src/xeq.c     **** 			break;
 2879              		.loc 1 478 6 view .LVU784
 2880 0044 B3F59D7F 		cmp	r3, #314
 476:src/xeq.c     **** 		ProgEnd = pc;
 2881              		.loc 1 476 39 view .LVU785
 2882 0048 4FF00001 		mov	r1, #0
 2883 004c 2046     		mov	r0, r4
 478:src/xeq.c     **** 			break;
 2884              		.loc 1 478 6 view .LVU786
 2885 004e EDD1     		bne	.L249
 2886              	.LVL212:
 2887              	.L234:
 482:src/xeq.c     **** 		const unsigned int opc = pc;
 2888              		.loc 1 482 2 is_stmt 1 view .LVU787
 482:src/xeq.c     **** 		const unsigned int opc = pc;
 2889              		.loc 1 482 10 is_stmt 0 view .LVU788
 2890 0050 B5F8E047 		ldrh	r4, [r5, #2016]
 2891              	.LVL213:
 482:src/xeq.c     **** 		const unsigned int opc = pc;
 2892              		.loc 1 482 10 view .LVU789
 2893 0054 04E0     		b	.L238
 2894              	.LVL214:
 2895              	.L250:
 2896              	.LBB1515:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2897              		.loc 1 485 20 discriminator 1 view .LVU790
 2898 0056 FFF7FEFF 		bl	getprog
 2899              	.LVL215:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2900              		.loc 1 485 17 discriminator 1 view .LVU791
 2901 005a B0F59D7F 		cmp	r0, #314
 2902 005e 08D0     		beq	.L237
 2903              	.LVL216:
 2904              	.L238:
 483:src/xeq.c     **** 		pc = do_dec(opc, 0);
 2905              		.loc 1 483 3 is_stmt 1 view .LVU792
 484:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2906              		.loc 1 484 3 view .LVU793
 484:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2907              		.loc 1 484 8 is_stmt 0 view .LVU794
 2908 0060 2046     		mov	r0, r4
 2909 0062 0021     		movs	r1, #0
 2910 0064 FFF7FEFF 		bl	do_dec
 2911              	.LVL217:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2912              		.loc 1 485 6 view .LVU795
ARM GAS  /tmp/ccBFDvgN.s 			page 154


 2913 0068 3368     		ldr	r3, [r6]
 2914 006a 2546     		mov	r5, r4
 484:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2915              		.loc 1 484 8 view .LVU796
 2916 006c 0446     		mov	r4, r0
 2917              	.LVL218:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2918              		.loc 1 485 3 is_stmt 1 view .LVU797
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2919              		.loc 1 485 6 is_stmt 0 view .LVU798
 2920 006e 002B     		cmp	r3, #0
 2921 0070 F1D0     		beq	.L250
 2922              	.LVL219:
 2923              	.L237:
 486:src/xeq.c     **** 			break;
 2924              		.loc 1 486 4 is_stmt 1 view .LVU799
 486:src/xeq.c     **** 			break;
 2925              		.loc 1 486 14 is_stmt 0 view .LVU800
 2926 0072 3B68     		ldr	r3, [r7]
 2927 0074 012D     		cmp	r5, #1
 2928 0076 38BF     		it	cc
 2929 0078 0125     		movcc	r5, #1
 2930              	.LVL220:
 486:src/xeq.c     **** 			break;
 2931              		.loc 1 486 14 view .LVU801
 2932 007a A3F8EC57 		strh	r5, [r3, #2028]	@ movhi
 487:src/xeq.c     **** 		}
 2933              		.loc 1 487 4 is_stmt 1 view .LVU802
 2934              	.LBE1515:
 490:src/xeq.c     **** 
 2935              		.loc 1 490 1 is_stmt 0 view .LVU803
 2936 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2937              	.LVL221:
 2938              	.L248:
 474:src/xeq.c     **** 		return;
 2939              		.loc 1 474 42 discriminator 2 view .LVU804
 2940 0080 B5F8EE37 		ldrh	r3, [r5, #2030]
 474:src/xeq.c     **** 		return;
 2941              		.loc 1 474 33 discriminator 2 view .LVU805
 2942 0084 A342     		cmp	r3, r4
 2943 0086 CDD3     		bcc	.L232
 490:src/xeq.c     **** 
 2944              		.loc 1 490 1 view .LVU806
 2945 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2946              	.LVL222:
 2947              	.L252:
 490:src/xeq.c     **** 
 2948              		.loc 1 490 1 view .LVU807
 2949 008a 00BF     		.align	2
 2950              	.L251:
 2951 008c 00000000 		.word	main_ram
 2952 0090 00000000 		.word	StateWhileOn
 2953 0094 00000000 		.word	PcWrapped
 2954              		.cfi_endproc
 2955              	.LFE24:
 2957              		.section	.text.set_pc,"ax",%progbits
 2958              		.align	1
ARM GAS  /tmp/ccBFDvgN.s 			page 155


 2959              		.p2align 2,,3
 2960              		.global	set_pc
 2961              		.syntax unified
 2962              		.thumb
 2963              		.thumb_func
 2964              		.fpu fpv4-sp-d16
 2966              	set_pc:
 2967              	.LVL223:
 2968              	.LFB18:
 367:src/xeq.c     **** 	if (isRAM(pc)) {
 2969              		.loc 1 367 30 is_stmt 1 view -0
 2970              		.cfi_startproc
 2971              		@ args = 0, pretend = 0, frame = 0
 2972              		@ frame_needed = 0, uses_anonymous_args = 0
 368:src/xeq.c     **** 		if (pc > ProgSize)
 2973              		.loc 1 368 2 view .LVU809
 368:src/xeq.c     **** 		if (pc > ProgSize)
 2974              		.loc 1 368 5 is_stmt 0 view .LVU810
 2975 0000 10F4704F 		tst	r0, #61440
 367:src/xeq.c     **** 	if (isRAM(pc)) {
 2976              		.loc 1 367 30 view .LVU811
 2977 0004 38B5     		push	{r3, r4, r5, lr}
 2978              		.cfi_def_cfa_offset 16
 2979              		.cfi_offset 3, -16
 2980              		.cfi_offset 4, -12
 2981              		.cfi_offset 5, -8
 2982              		.cfi_offset 14, -4
 367:src/xeq.c     **** 	if (isRAM(pc)) {
 2983              		.loc 1 367 30 view .LVU812
 2984 0006 0446     		mov	r4, r0
 368:src/xeq.c     **** 		if (pc > ProgSize)
 2985              		.loc 1 368 5 view .LVU813
 2986 0008 15D1     		bne	.L254
 369:src/xeq.c     **** 			pc = ProgSize;
 2987              		.loc 1 369 3 is_stmt 1 view .LVU814
 369:src/xeq.c     **** 			pc = ProgSize;
 2988              		.loc 1 369 12 is_stmt 0 view .LVU815
 2989 000a 264B     		ldr	r3, .L262
 2990 000c 1B68     		ldr	r3, [r3]
 2991 000e 5A88     		ldrh	r2, [r3, #2]
 2992 0010 9042     		cmp	r0, r2
 2993 0012 28BF     		it	cs
 2994 0014 1446     		movcs	r4, r2
 2995              	.LVL224:
 371:src/xeq.c     **** 			pc--;
 2996              		.loc 1 371 3 is_stmt 1 view .LVU816
 371:src/xeq.c     **** 			pc--;
 2997              		.loc 1 371 6 is_stmt 0 view .LVU817
 2998 0016 012C     		cmp	r4, #1
 2999 0018 06D9     		bls	.L255
 371:src/xeq.c     **** 			pc--;
 3000              		.loc 1 371 14 discriminator 1 view .LVU818
 3001 001a 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 3002 001e 02F47042 		and	r2, r2, #61440
 3003 0022 B2F5704F 		cmp	r2, #61440
 3004 0026 35D0     		beq	.L261
 3005              	.L255:
ARM GAS  /tmp/ccBFDvgN.s 			page 156


 380:src/xeq.c     **** }
 3006              		.loc 1 380 2 is_stmt 1 view .LVU819
 3007              	.LVL225:
 3008              	.LBB1516:
 3009              	.LBI1516:
 282:src/xeq.c     **** 	State.pc = pc;
 3010              		.loc 1 282 13 view .LVU820
 3011              	.LBB1517:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3012              		.loc 1 283 2 view .LVU821
 283:src/xeq.c     **** 	update_program_bounds(0);
 3013              		.loc 1 283 11 is_stmt 0 view .LVU822
 3014 0028 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3015              		.loc 1 284 2 is_stmt 1 view .LVU823
 3016 002c 0020     		movs	r0, #0
 3017              	.LBE1517:
 3018              	.LBE1516:
 381:src/xeq.c     **** 
 3019              		.loc 1 381 1 is_stmt 0 view .LVU824
 3020 002e BDE83840 		pop	{r3, r4, r5, lr}
 3021              		.cfi_remember_state
 3022              		.cfi_restore 14
 3023              		.cfi_restore 5
 3024              		.cfi_restore 4
 3025              		.cfi_restore 3
 3026              		.cfi_def_cfa_offset 0
 3027              	.LVL226:
 3028              	.LBB1525:
 3029              	.LBB1518:
 284:src/xeq.c     **** }
 3030              		.loc 1 284 2 view .LVU825
 3031 0032 FFF7FEBF 		b	update_program_bounds
 3032              	.LVL227:
 3033              	.L254:
 3034              		.cfi_restore_state
 284:src/xeq.c     **** }
 3035              		.loc 1 284 2 view .LVU826
 3036              	.LBE1518:
 3037              	.LBE1525:
 373:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3038              		.loc 1 373 9 is_stmt 1 view .LVU827
 373:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3039              		.loc 1 373 14 is_stmt 0 view .LVU828
 3040 0036 820B     		lsrs	r2, r0, #14
 373:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3041              		.loc 1 373 12 view .LVU829
 3042 0038 032A     		cmp	r2, #3
 3043 003a 22D0     		beq	.L260
 3044              	.LBB1526:
 374:src/xeq.c     **** 		if (pc > n - 1)
 3045              		.loc 1 374 3 is_stmt 1 view .LVU830
 3046              	.LVL228:
 3047              	.LBB1527:
 3048              	.LBI1527:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 3049              		.loc 1 319 5 view .LVU831
ARM GAS  /tmp/ccBFDvgN.s 			page 157


 3050              	.LBB1528:
 320:src/xeq.c     **** 		return xrom_size;
 3051              		.loc 1 320 2 view .LVU832
 323:src/xeq.c     **** }
 3052              		.loc 1 323 3 view .LVU833
 323:src/xeq.c     **** }
 3053              		.loc 1 323 24 is_stmt 0 view .LVU834
 3054 003c 1A49     		ldr	r1, .L262+4
 3055              	.LBE1528:
 3056              	.LBE1527:
 374:src/xeq.c     **** 		if (pc > n - 1)
 3057              		.loc 1 374 26 view .LVU835
 3058 003e 1B4B     		ldr	r3, .L262+8
 3059              	.LBB1530:
 3060              	.LBB1529:
 323:src/xeq.c     **** }
 3061              		.loc 1 323 32 view .LVU836
 3062 0040 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3063              	.LBE1529:
 3064              	.LBE1530:
 374:src/xeq.c     **** 		if (pc > n - 1)
 3065              		.loc 1 374 39 view .LVU837
 3066 0044 32F8022C 		ldrh	r2, [r2, #-2]
 374:src/xeq.c     **** 		if (pc > n - 1)
 3067              		.loc 1 374 26 view .LVU838
 3068 0048 00EA0301 		and	r1, r0, r3
 374:src/xeq.c     **** 		if (pc > n - 1)
 3069              		.loc 1 374 39 view .LVU839
 3070 004c 0A44     		add	r2, r2, r1
 3071              	.LVL229:
 375:src/xeq.c     **** 			pc = n - 1;
 3072              		.loc 1 375 3 is_stmt 1 view .LVU840
 3073 004e 9042     		cmp	r0, r2
 3074 0050 28BF     		it	cs
 3075 0052 1446     		movcs	r4, r2
 3076              	.LVL230:
 377:src/xeq.c     **** 			--pc;
 3077              		.loc 1 377 3 view .LVU841
 377:src/xeq.c     **** 			--pc;
 3078              		.loc 1 377 12 is_stmt 0 view .LVU842
 3079 0054 2340     		ands	r3, r3, r4
 3080 0056 0133     		adds	r3, r3, #1
 377:src/xeq.c     **** 			--pc;
 3081              		.loc 1 377 6 view .LVU843
 3082 0058 A342     		cmp	r3, r4
 3083 005a 12D2     		bcs	.L260
 377:src/xeq.c     **** 			--pc;
 3084              		.loc 1 377 28 discriminator 1 view .LVU844
 3085 005c 651E     		subs	r5, r4, #1
 3086 005e 2846     		mov	r0, r5
 3087 0060 FFF7FEFF 		bl	getprog
 3088              	.LVL231:
 377:src/xeq.c     **** 			--pc;
 3089              		.loc 1 377 28 discriminator 1 view .LVU845
 3090 0064 0F4B     		ldr	r3, .L262
 3091 0066 00F47040 		and	r0, r0, #61440
 3092 006a 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccBFDvgN.s 			page 158


 377:src/xeq.c     **** 			--pc;
 3093              		.loc 1 377 25 discriminator 1 view .LVU846
 3094 006c B0F5704F 		cmp	r0, #61440
 378:src/xeq.c     **** 	}
 3095              		.loc 1 378 4 is_stmt 1 discriminator 1 view .LVU847
 3096              	.LVL232:
 378:src/xeq.c     **** 	}
 3097              		.loc 1 378 4 is_stmt 0 discriminator 1 view .LVU848
 3098 0070 08BF     		it	eq
 3099 0072 2C46     		moveq	r4, r5
 3100              	.LVL233:
 378:src/xeq.c     **** 	}
 3101              		.loc 1 378 4 discriminator 1 view .LVU849
 3102              	.LBE1526:
 380:src/xeq.c     **** }
 3103              		.loc 1 380 2 is_stmt 1 discriminator 1 view .LVU850
 3104              	.LBB1531:
 282:src/xeq.c     **** 	State.pc = pc;
 3105              		.loc 1 282 13 discriminator 1 view .LVU851
 3106              	.LBB1519:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3107              		.loc 1 283 2 discriminator 1 view .LVU852
 283:src/xeq.c     **** 	update_program_bounds(0);
 3108              		.loc 1 283 11 is_stmt 0 discriminator 1 view .LVU853
 3109 0074 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3110              		.loc 1 284 2 is_stmt 1 discriminator 1 view .LVU854
 3111 0078 0020     		movs	r0, #0
 3112              	.LBE1519:
 3113              	.LBE1531:
 381:src/xeq.c     **** 
 3114              		.loc 1 381 1 is_stmt 0 discriminator 1 view .LVU855
 3115 007a BDE83840 		pop	{r3, r4, r5, lr}
 3116              		.cfi_remember_state
 3117              		.cfi_restore 14
 3118              		.cfi_restore 5
 3119              		.cfi_restore 4
 3120              		.cfi_restore 3
 3121              		.cfi_def_cfa_offset 0
 3122              	.LVL234:
 3123              	.LBB1532:
 3124              	.LBB1520:
 284:src/xeq.c     **** }
 3125              		.loc 1 284 2 discriminator 1 view .LVU856
 3126 007e FFF7FEBF 		b	update_program_bounds
 3127              	.LVL235:
 3128              	.L260:
 3129              		.cfi_restore_state
 284:src/xeq.c     **** }
 3130              		.loc 1 284 2 discriminator 1 view .LVU857
 3131 0082 084B     		ldr	r3, .L262
 3132 0084 1B68     		ldr	r3, [r3]
 284:src/xeq.c     **** }
 3133              		.loc 1 284 2 discriminator 1 view .LVU858
 3134              	.LBE1520:
 3135              	.LBE1532:
 380:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 159


 3136              		.loc 1 380 2 is_stmt 1 view .LVU859
 3137              	.LVL236:
 3138              	.LBB1533:
 282:src/xeq.c     **** 	State.pc = pc;
 3139              		.loc 1 282 13 view .LVU860
 3140              	.LBB1521:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3141              		.loc 1 283 2 view .LVU861
 284:src/xeq.c     **** }
 3142              		.loc 1 284 2 is_stmt 0 view .LVU862
 3143 0086 0020     		movs	r0, #0
 283:src/xeq.c     **** 	update_program_bounds(0);
 3144              		.loc 1 283 11 view .LVU863
 3145 0088 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3146              		.loc 1 284 2 is_stmt 1 view .LVU864
 3147              	.LBE1521:
 3148              	.LBE1533:
 381:src/xeq.c     **** 
 3149              		.loc 1 381 1 is_stmt 0 view .LVU865
 3150 008c BDE83840 		pop	{r3, r4, r5, lr}
 3151              		.cfi_remember_state
 3152              		.cfi_restore 14
 3153              		.cfi_restore 5
 3154              		.cfi_restore 4
 3155              		.cfi_restore 3
 3156              		.cfi_def_cfa_offset 0
 3157              	.LVL237:
 3158              	.LBB1534:
 3159              	.LBB1522:
 284:src/xeq.c     **** }
 3160              		.loc 1 284 2 view .LVU866
 3161 0090 FFF7FEBF 		b	update_program_bounds
 3162              	.LVL238:
 3163              	.L261:
 3164              		.cfi_restore_state
 284:src/xeq.c     **** }
 3165              		.loc 1 284 2 view .LVU867
 3166              	.LBE1522:
 3167              	.LBE1534:
 372:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3168              		.loc 1 372 4 is_stmt 1 view .LVU868
 372:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3169              		.loc 1 372 6 is_stmt 0 view .LVU869
 3170 0094 013C     		subs	r4, r4, #1
 3171              	.LVL239:
 380:src/xeq.c     **** }
 3172              		.loc 1 380 2 is_stmt 1 view .LVU870
 3173              	.LBB1535:
 282:src/xeq.c     **** 	State.pc = pc;
 3174              		.loc 1 282 13 view .LVU871
 3175              	.LBB1523:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3176              		.loc 1 283 2 view .LVU872
 283:src/xeq.c     **** 	update_program_bounds(0);
 3177              		.loc 1 283 11 is_stmt 0 view .LVU873
 3178 0096 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
ARM GAS  /tmp/ccBFDvgN.s 			page 160


 284:src/xeq.c     **** }
 3179              		.loc 1 284 2 is_stmt 1 view .LVU874
 3180 009a 0020     		movs	r0, #0
 3181              	.LBE1523:
 3182              	.LBE1535:
 381:src/xeq.c     **** 
 3183              		.loc 1 381 1 is_stmt 0 view .LVU875
 3184 009c BDE83840 		pop	{r3, r4, r5, lr}
 3185              		.cfi_restore 14
 3186              		.cfi_restore 5
 3187              		.cfi_restore 4
 3188              		.cfi_restore 3
 3189              		.cfi_def_cfa_offset 0
 3190              	.LVL240:
 3191              	.LBB1536:
 3192              	.LBB1524:
 284:src/xeq.c     **** }
 3193              		.loc 1 284 2 view .LVU876
 3194 00a0 FFF7FEBF 		b	update_program_bounds
 3195              	.LVL241:
 3196              	.L263:
 284:src/xeq.c     **** }
 3197              		.loc 1 284 2 view .LVU877
 3198              		.align	2
 3199              	.L262:
 3200 00a4 00000000 		.word	main_ram
 3201 00a8 00000000 		.word	.LANCHOR0
 3202 00ac 00C0FFFF 		.word	-16384
 3203              	.LBE1524:
 3204              	.LBE1536:
 3205              		.cfi_endproc
 3206              	.LFE18:
 3208              		.section	.text.incpc,"ax",%progbits
 3209              		.align	1
 3210              		.p2align 2,,3
 3211              		.global	incpc
 3212              		.syntax unified
 3213              		.thumb
 3214              		.thumb_func
 3215              		.fpu fpv4-sp-d16
 3217              	incpc:
 3218              	.LFB22:
 458:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3219              		.loc 1 458 17 is_stmt 1 view -0
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 0
 3222              		@ frame_needed = 0, uses_anonymous_args = 0
 459:src/xeq.c     **** 	return PcWrapped;
 3223              		.loc 1 459 2 view .LVU879
 458:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3224              		.loc 1 458 17 is_stmt 0 view .LVU880
 3225 0000 10B5     		push	{r4, lr}
 3226              		.cfi_def_cfa_offset 8
 3227              		.cfi_offset 4, -8
 3228              		.cfi_offset 14, -4
 459:src/xeq.c     **** 	return PcWrapped;
 3229              		.loc 1 459 20 view .LVU881
ARM GAS  /tmp/ccBFDvgN.s 			page 161


 3230 0002 084C     		ldr	r4, .L266
 3231 0004 2368     		ldr	r3, [r4]
 459:src/xeq.c     **** 	return PcWrapped;
 3232              		.loc 1 459 2 view .LVU882
 3233 0006 0121     		movs	r1, #1
 3234 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3235 000c FFF7FEFF 		bl	do_inc
 3236              	.LVL242:
 3237              	.LBB1537:
 3238              	.LBB1538:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3239              		.loc 1 283 11 view .LVU883
 3240 0010 2368     		ldr	r3, [r4]
 3241              	.LBE1538:
 3242              	.LBE1537:
 459:src/xeq.c     **** 	return PcWrapped;
 3243              		.loc 1 459 2 view .LVU884
 3244 0012 0246     		mov	r2, r0
 3245              	.LVL243:
 3246              	.LBB1540:
 3247              	.LBI1537:
 282:src/xeq.c     **** 	State.pc = pc;
 3248              		.loc 1 282 13 is_stmt 1 view .LVU885
 3249              	.LBB1539:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3250              		.loc 1 283 2 view .LVU886
 283:src/xeq.c     **** 	update_program_bounds(0);
 3251              		.loc 1 283 11 is_stmt 0 view .LVU887
 3252 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3253              		.loc 1 284 2 is_stmt 1 view .LVU888
 3254 0018 0020     		movs	r0, #0
 3255              	.LVL244:
 284:src/xeq.c     **** }
 3256              		.loc 1 284 2 is_stmt 0 view .LVU889
 3257 001a FFF7FEFF 		bl	update_program_bounds
 3258              	.LVL245:
 284:src/xeq.c     **** }
 3259              		.loc 1 284 2 view .LVU890
 3260              	.LBE1539:
 3261              	.LBE1540:
 460:src/xeq.c     **** }
 3262              		.loc 1 460 2 is_stmt 1 view .LVU891
 460:src/xeq.c     **** }
 3263              		.loc 1 460 9 is_stmt 0 view .LVU892
 3264 001e 024B     		ldr	r3, .L266+4
 461:src/xeq.c     **** 
 3265              		.loc 1 461 1 view .LVU893
 3266 0020 1868     		ldr	r0, [r3]
 3267 0022 10BD     		pop	{r4, pc}
 3268              	.L267:
 3269              		.align	2
 3270              	.L266:
 3271 0024 00000000 		.word	main_ram
 3272 0028 00000000 		.word	PcWrapped
 3273              		.cfi_endproc
 3274              	.LFE22:
ARM GAS  /tmp/ccBFDvgN.s 			page 162


 3276              		.section	.text.decpc,"ax",%progbits
 3277              		.align	1
 3278              		.p2align 2,,3
 3279              		.global	decpc
 3280              		.syntax unified
 3281              		.thumb
 3282              		.thumb_func
 3283              		.fpu fpv4-sp-d16
 3285              	decpc:
 3286              	.LFB23:
 463:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3287              		.loc 1 463 18 is_stmt 1 view -0
 3288              		.cfi_startproc
 3289              		@ args = 0, pretend = 0, frame = 0
 3290              		@ frame_needed = 0, uses_anonymous_args = 0
 464:src/xeq.c     **** }
 3291              		.loc 1 464 2 view .LVU895
 463:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3292              		.loc 1 463 18 is_stmt 0 view .LVU896
 3293 0000 10B5     		push	{r4, lr}
 3294              		.cfi_def_cfa_offset 8
 3295              		.cfi_offset 4, -8
 3296              		.cfi_offset 14, -4
 464:src/xeq.c     **** }
 3297              		.loc 1 464 20 view .LVU897
 3298 0002 084C     		ldr	r4, .L270
 3299 0004 2368     		ldr	r3, [r4]
 464:src/xeq.c     **** }
 3300              		.loc 1 464 2 view .LVU898
 3301 0006 0121     		movs	r1, #1
 3302 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3303 000c FFF7FEFF 		bl	do_dec
 3304              	.LVL246:
 3305              	.LBB1541:
 3306              	.LBB1542:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3307              		.loc 1 283 11 view .LVU899
 3308 0010 2368     		ldr	r3, [r4]
 3309              	.LBE1542:
 3310              	.LBE1541:
 464:src/xeq.c     **** }
 3311              		.loc 1 464 2 view .LVU900
 3312 0012 0246     		mov	r2, r0
 3313              	.LVL247:
 3314              	.LBB1545:
 3315              	.LBI1541:
 282:src/xeq.c     **** 	State.pc = pc;
 3316              		.loc 1 282 13 is_stmt 1 view .LVU901
 3317              	.LBB1543:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3318              		.loc 1 283 2 view .LVU902
 3319              	.LBE1543:
 3320              	.LBE1545:
 465:src/xeq.c     **** 
 3321              		.loc 1 465 1 is_stmt 0 view .LVU903
 3322 0014 BDE81040 		pop	{r4, lr}
 3323              		.cfi_restore 14
ARM GAS  /tmp/ccBFDvgN.s 			page 163


 3324              		.cfi_restore 4
 3325              		.cfi_def_cfa_offset 0
 3326              	.LBB1546:
 3327              	.LBB1544:
 284:src/xeq.c     **** }
 3328              		.loc 1 284 2 view .LVU904
 3329 0018 0020     		movs	r0, #0
 3330              	.LVL248:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3331              		.loc 1 283 11 view .LVU905
 3332 001a A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3333              		.loc 1 284 2 is_stmt 1 view .LVU906
 3334 001e FFF7FEBF 		b	update_program_bounds
 3335              	.LVL249:
 3336              	.L271:
 284:src/xeq.c     **** }
 3337              		.loc 1 284 2 is_stmt 0 view .LVU907
 3338 0022 00BF     		.align	2
 3339              	.L270:
 3340 0024 00000000 		.word	main_ram
 3341              	.LBE1544:
 3342              	.LBE1546:
 3343              		.cfi_endproc
 3344              	.LFE23:
 3346              		.section	.text.fin_tst.part.0,"ax",%progbits
 3347              		.align	1
 3348              		.p2align 2,,3
 3349              		.syntax unified
 3350              		.thumb
 3351              		.thumb_func
 3352              		.fpu fpv4-sp-d16
 3354              	fin_tst.part.0:
 3355              	.LFB286:
2576:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3356              		.loc 1 2576 6 is_stmt 1 view -0
 3357              		.cfi_startproc
 3358              		@ args = 0, pretend = 0, frame = 0
 3359              		@ frame_needed = 0, uses_anonymous_args = 0
 3360              	.LVL250:
2576:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3361              		.loc 1 2576 6 is_stmt 0 view .LVU909
 3362 0000 08B5     		push	{r3, lr}
 3363              		.cfi_def_cfa_offset 8
 3364              		.cfi_offset 3, -8
 3365              		.cfi_offset 14, -4
2579:src/xeq.c     **** 			decpc();
 3366              		.loc 1 2579 14 view .LVU910
 3367 0002 FFF7FEFF 		bl	incpc
 3368              	.LVL251:
2579:src/xeq.c     **** 			decpc();
 3369              		.loc 1 2579 11 view .LVU911
 3370 0006 00B9     		cbnz	r0, .L275
2590:src/xeq.c     **** 
 3371              		.loc 1 2590 1 view .LVU912
 3372 0008 08BD     		pop	{r3, pc}
 3373              	.L275:
ARM GAS  /tmp/ccBFDvgN.s 			page 164


2580:src/xeq.c     **** 	}
 3374              		.loc 1 2580 4 is_stmt 1 view .LVU913
2590:src/xeq.c     **** 
 3375              		.loc 1 2590 1 is_stmt 0 view .LVU914
 3376 000a BDE80840 		pop	{r3, lr}
 3377              		.cfi_restore 14
 3378              		.cfi_restore 3
 3379              		.cfi_def_cfa_offset 0
2580:src/xeq.c     **** 	}
 3380              		.loc 1 2580 4 view .LVU915
 3381 000e FFF7FEBF 		b	decpc
 3382              	.LVL252:
 3383              		.cfi_endproc
 3384              	.LFE286:
 3386 0012 00BF     		.section	.text.do_rtn,"ax",%progbits
 3387              		.align	1
 3388              		.p2align 2,,3
 3389              		.syntax unified
 3390              		.thumb
 3391              		.thumb_func
 3392              		.fpu fpv4-sp-d16
 3394              	do_rtn:
 3395              	.LVL253:
 3396              	.LFB154:
2247:src/xeq.c     **** 	unsigned short pc;
 3397              		.loc 1 2247 31 is_stmt 1 view -0
 3398              		.cfi_startproc
 3399              		@ args = 0, pretend = 0, frame = 0
 3400              		@ frame_needed = 0, uses_anonymous_args = 0
2248:src/xeq.c     **** 
 3401              		.loc 1 2248 2 view .LVU917
2250:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3402              		.loc 1 2250 2 view .LVU918
2247:src/xeq.c     **** 	unsigned short pc;
 3403              		.loc 1 2247 31 is_stmt 0 view .LVU919
 3404 0000 70B5     		push	{r4, r5, r6, lr}
 3405              		.cfi_def_cfa_offset 16
 3406              		.cfi_offset 4, -16
 3407              		.cfi_offset 5, -12
 3408              		.cfi_offset 6, -8
 3409              		.cfi_offset 14, -4
2250:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3410              		.loc 1 2250 6 view .LVU920
 3411 0002 224C     		ldr	r4, .L290
 3412 0004 2368     		ldr	r3, [r4]
2250:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3413              		.loc 1 2250 5 view .LVU921
 3414 0006 B3F9E227 		ldrsh	r2, [r3, #2018]
 3415 000a 002A     		cmp	r2, #0
 3416 000c 0FDB     		blt	.L277
2252:src/xeq.c     **** 		raw_set_pc(ProgBegin);
 3417              		.loc 1 2252 3 is_stmt 1 view .LVU922
 3418              	.LBB1547:
 3419              	.LBI1547:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 3420              		.loc 1 1606 6 view .LVU923
 3421              	.LBB1548:
ARM GAS  /tmp/ccBFDvgN.s 			page 165


1607:src/xeq.c     **** }
 3422              		.loc 1 1607 2 view .LVU924
1607:src/xeq.c     **** }
 3423              		.loc 1 1607 24 is_stmt 0 view .LVU925
 3424 000e 0020     		movs	r0, #0
 3425              	.LVL254:
1607:src/xeq.c     **** }
 3426              		.loc 1 1607 24 view .LVU926
 3427              	.LBE1548:
 3428              	.LBE1547:
 3429              	.LBB1550:
 3430              	.LBB1551:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3431              		.loc 1 283 11 view .LVU927
 3432 0010 B3F8EC27 		ldrh	r2, [r3, #2028]
 3433              	.LBE1551:
 3434              	.LBE1550:
 3435              	.LBB1553:
 3436              	.LBB1549:
1607:src/xeq.c     **** }
 3437              		.loc 1 1607 24 view .LVU928
 3438 0014 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
1607:src/xeq.c     **** }
 3439              		.loc 1 1607 12 view .LVU929
 3440 0018 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 3441              	.LBE1549:
 3442              	.LBE1553:
2253:src/xeq.c     **** 	}
 3443              		.loc 1 2253 3 is_stmt 1 view .LVU930
 3444              	.LVL255:
 3445              	.LBB1554:
 3446              	.LBI1550:
 282:src/xeq.c     **** 	State.pc = pc;
 3447              		.loc 1 282 13 view .LVU931
 3448              	.LBB1552:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3449              		.loc 1 283 2 view .LVU932
 283:src/xeq.c     **** 	update_program_bounds(0);
 3450              		.loc 1 283 11 is_stmt 0 view .LVU933
 3451 001c A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3452              		.loc 1 284 2 is_stmt 1 view .LVU934
 3453 0020 FFF7FEFF 		bl	update_program_bounds
 3454              	.LVL256:
 3455              	.L278:
 284:src/xeq.c     **** }
 3456              		.loc 1 284 2 is_stmt 0 view .LVU935
 3457              	.LBE1552:
 3458              	.LBE1554:
2266:src/xeq.c     **** 		// RTN with empty stack stops
 3459              		.loc 1 2266 2 is_stmt 1 view .LVU936
2266:src/xeq.c     **** 		// RTN with empty stack stops
 3460              		.loc 1 2266 6 is_stmt 0 view .LVU937
 3461 0024 2368     		ldr	r3, [r4]
2266:src/xeq.c     **** 		// RTN with empty stack stops
 3462              		.loc 1 2266 5 view .LVU938
 3463 0026 B3F9E217 		ldrsh	r1, [r3, #2018]
ARM GAS  /tmp/ccBFDvgN.s 			page 166


 3464 002a 09B3     		cbz	r1, .L289
2270:src/xeq.c     **** 
 3465              		.loc 1 2270 1 view .LVU939
 3466 002c 70BD     		pop	{r4, r5, r6, pc}
 3467              	.LVL257:
 3468              	.L277:
2258:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
 3469              		.loc 1 2258 3 is_stmt 1 view .LVU940
 3470 002e 0546     		mov	r5, r0
 3471 0030 FFF7FEFF 		bl	retstk_up
 3472              	.LVL258:
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3473              		.loc 1 2259 3 view .LVU941
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3474              		.loc 1 2259 15 is_stmt 0 view .LVU942
 3475 0034 2268     		ldr	r2, [r4]
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3476              		.loc 1 2259 6 view .LVU943
 3477 0036 1649     		ldr	r1, .L290+4
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3478              		.loc 1 2259 14 view .LVU944
 3479 0038 B2F9E237 		ldrsh	r3, [r2, #2018]
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3480              		.loc 1 2259 6 view .LVU945
 3481 003c 0968     		ldr	r1, [r1]
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3482              		.loc 1 2259 14 view .LVU946
 3483 003e 03F10043 		add	r3, r3, #-2147483648
 3484 0042 013B     		subs	r3, r3, #1
 3485              	.LBB1555:
 3486              	.LBB1556:
 284:src/xeq.c     **** }
 3487              		.loc 1 284 2 view .LVU947
 3488 0044 0020     		movs	r0, #0
 3489              	.LBE1556:
 3490              	.LBE1555:
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3491              		.loc 1 2259 6 view .LVU948
 3492 0046 31F81360 		ldrh	r6, [r1, r3, lsl #1]
 3493              	.LVL259:
2260:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
 3494              		.loc 1 2260 3 is_stmt 1 view .LVU949
 3495              	.LBB1558:
 3496              	.LBI1555:
 282:src/xeq.c     **** 	State.pc = pc;
 3497              		.loc 1 282 13 view .LVU950
 3498              	.LBB1557:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3499              		.loc 1 283 2 view .LVU951
 283:src/xeq.c     **** 	update_program_bounds(0);
 3500              		.loc 1 283 11 is_stmt 0 view .LVU952
 3501 004a A2F8E067 		strh	r6, [r2, #2016]	@ movhi
 284:src/xeq.c     **** }
 3502              		.loc 1 284 2 is_stmt 1 view .LVU953
 3503 004e FFF7FEFF 		bl	update_program_bounds
 3504              	.LVL260:
 284:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 167


 3505              		.loc 1 284 2 is_stmt 0 view .LVU954
 3506              	.LBE1557:
 3507              	.LBE1558:
2262:src/xeq.c     **** 			if (incpc())
 3508              		.loc 1 2262 3 is_stmt 1 view .LVU955
2262:src/xeq.c     **** 			if (incpc())
 3509              		.loc 1 2262 6 is_stmt 0 view .LVU956
 3510 0052 002D     		cmp	r5, #0
 3511 0054 E6D0     		beq	.L278
2262:src/xeq.c     **** 			if (incpc())
 3512              		.loc 1 2262 16 discriminator 1 view .LVU957
 3513 0056 3046     		mov	r0, r6
 3514 0058 FFF7FEFF 		bl	getprog
 3515              	.LVL261:
2262:src/xeq.c     **** 			if (incpc())
 3516              		.loc 1 2262 13 discriminator 1 view .LVU958
 3517 005c B0F5C17F 		cmp	r0, #386
 3518 0060 E0D0     		beq	.L278
2263:src/xeq.c     **** 				decpc();
 3519              		.loc 1 2263 4 is_stmt 1 view .LVU959
2263:src/xeq.c     **** 				decpc();
 3520              		.loc 1 2263 8 is_stmt 0 view .LVU960
 3521 0062 FFF7FEFF 		bl	incpc
 3522              	.LVL262:
2263:src/xeq.c     **** 				decpc();
 3523              		.loc 1 2263 7 view .LVU961
 3524 0066 0028     		cmp	r0, #0
 3525 0068 DCD0     		beq	.L278
2264:src/xeq.c     **** 	}
 3526              		.loc 1 2264 5 is_stmt 1 view .LVU962
 3527 006a FFF7FEFF 		bl	decpc
 3528              	.LVL263:
 3529 006e D9E7     		b	.L278
 3530              	.LVL264:
 3531              	.L289:
2268:src/xeq.c     **** 	}
 3532              		.loc 1 2268 3 view .LVU963
 3533              	.LBB1559:
 3534              	.LBI1559:
5181:src/xeq.c     **** 
5182:src/xeq.c     **** 
5183:src/xeq.c     **** /* Handle a command that takes an argument.  The argument is encoded
5184:src/xeq.c     ****  * in the low order bits of the opcode.  We also have to take
5185:src/xeq.c     ****  * account of the indirection flag and various limits.
5186:src/xeq.c     ****  */
5187:src/xeq.c     **** static void rargs(const opcode op) {
5188:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
5189:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
5190:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
5191:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
5192:src/xeq.c     **** 
5193:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5194:src/xeq.c     **** 
5195:src/xeq.c     **** 	process_cmdline();
5196:src/xeq.c     **** 
5197:src/xeq.c     **** 	if (cmd >= NUM_RARG) {
5198:src/xeq.c     **** 		illegal(op);
ARM GAS  /tmp/ccBFDvgN.s 			page 168


5199:src/xeq.c     **** 		return;
5200:src/xeq.c     **** 	}
5201:src/xeq.c     **** 	if (isNULL(argcmds[cmd].f)) {
5202:src/xeq.c     **** 		set_lift();
5203:src/xeq.c     **** 		return;
5204:src/xeq.c     **** 	}
5205:src/xeq.c     **** 
5206:src/xeq.c     **** 	if (ind) {
5207:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
5208:src/xeq.c     **** 			// Get the argument by reading a register
5209:src/xeq.c     **** 			int sgn;
5210:src/xeq.c     **** 			unsigned long long int regval;
5211:src/xeq.c     **** 
5212:src/xeq.c     **** 			if (arg > get_reg_limit(RARG_RCL, arg)) {
5213:src/xeq.c     **** 				// Invalid register specified for indirect access
5214:src/xeq.c     **** 				report_err(ERR_RANGE);
5215:src/xeq.c     **** 				return;
5216:src/xeq.c     **** 			}
5217:src/xeq.c     **** 			regval = get_reg_n_int_sgn(arg, &sgn);
5218:src/xeq.c     **** 			if ((regval >> 32) != 0)
5219:src/xeq.c     **** 				goto range;
5220:src/xeq.c     **** 			arg = (unsigned int) regval;
5221:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
5222:src/xeq.c     **** 				// negative arguments address local registers or flags
5223:src/xeq.c     **** 				arg = LOCAL_REG_BASE + arg;
5224:src/xeq.c     **** 			}
5225:src/xeq.c     **** 		} 
5226:src/xeq.c     **** 		else {
5227:src/xeq.c     **** 			// put the top bit back in
5228:src/xeq.c     **** 			arg |= RARG_IND;
5229:src/xeq.c     **** 		}
5230:src/xeq.c     **** 	}
5231:src/xeq.c     **** 	if (argcmds[cmd].reg) {
5232:src/xeq.c     **** 		// Range checking for registers against variable boundary
5233:src/xeq.c     **** 		lim = get_reg_limit(cmd, arg);
5234:src/xeq.c     **** 	}
5235:src/xeq.c     **** 	else if (argcmds[cmd].flag) {
5236:src/xeq.c     **** 		if (LocalRegs == 0)
5237:src/xeq.c     **** 			lim = NUMFLG - 1;
5238:src/xeq.c     **** 		else 
5239:src/xeq.c     **** 			lim = LOCAL_FLAG_BASE + MAX_LOCAL_DIRECT - 1;
5240:src/xeq.c     **** 	}
5241:src/xeq.c     **** 	if (arg > lim) {
5242:src/xeq.c     **** 		// Argument is too large
5243:src/xeq.c     **** range:		report_err(ERR_RANGE);
5244:src/xeq.c     **** 	}
5245:src/xeq.c     **** 	else if (argcmds[cmd].cmplx && arg >= TOPREALREG-1 && arg < NUMREG && (arg & 1)) {
5246:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
5247:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5248:src/xeq.c     **** 	}
5249:src/xeq.c     **** 	else {
5250:src/xeq.c     **** 		// Dispatch the command
5251:src/xeq.c     **** 		FP_RARG fp = (FP_RARG) EXPAND_ADDRESS(argcmds[cmd].f);
5252:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5253:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5254:src/xeq.c     **** 			if (argcmds[cmd].label) {
5255:src/xeq.c     **** 				XromUserPc = find_label_from(state_pc(), arg, 0);
ARM GAS  /tmp/ccBFDvgN.s 			page 169


5256:src/xeq.c     **** 				if (XromUserPc == 0)
5257:src/xeq.c     **** 					return;
5258:src/xeq.c     **** 				if (! Running)
5259:src/xeq.c     **** 					clrretstk();
5260:src/xeq.c     **** 			}
5261:src/xeq.c     **** 			else
5262:src/xeq.c     **** 				XromArg = (unsigned char) arg;
5263:src/xeq.c     **** #else
5264:src/xeq.c     **** 			XromUserPc = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
5265:src/xeq.c     **** 			if (XromUserPc == 0)
5266:src/xeq.c     **** 				return;
5267:src/xeq.c     **** 			if (! Running)
5268:src/xeq.c     **** 				clrretstk();
5269:src/xeq.c     **** #endif
5270:src/xeq.c     **** 			dispatch_xrom(fp);
5271:src/xeq.c     **** 			return;
5272:src/xeq.c     **** 		}
5273:src/xeq.c     **** 		else {
5274:src/xeq.c     **** 			fp(arg, (enum rarg)cmd);
5275:src/xeq.c     **** 		}
5276:src/xeq.c     **** 		if (cmd != RARG_XROM_OUT) {
5277:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
5278:src/xeq.c     **** 			set_lift();
5279:src/xeq.c     **** 		}
5280:src/xeq.c     **** 	}
5281:src/xeq.c     **** }
5282:src/xeq.c     **** 
5283:src/xeq.c     **** static void multi(const opcode op) {
5284:src/xeq.c     **** 	const int cmd = opDBL(op);
5285:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5286:src/xeq.c     **** 
5287:src/xeq.c     **** 	process_cmdline_set_lift();
5288:src/xeq.c     **** 
5289:src/xeq.c     **** 	if (cmd >= NUM_MULTI) {
5290:src/xeq.c     **** 		illegal(op);
5291:src/xeq.c     **** 		return;
5292:src/xeq.c     **** 	}
5293:src/xeq.c     **** 	if (isNULL(multicmds[cmd].f))	// LBL does nothing
5294:src/xeq.c     **** 		return;
5295:src/xeq.c     **** 	else {
5296:src/xeq.c     **** 		FP_MULTI fp = (FP_MULTI) EXPAND_ADDRESS(multicmds[cmd].f);
5297:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5298:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
5299:src/xeq.c     **** 			if (XromUserPc != 0) {
5300:src/xeq.c     **** 				if (! Running)
5301:src/xeq.c     **** 					clrretstk();
5302:src/xeq.c     **** 				dispatch_xrom(fp);
5303:src/xeq.c     **** 			}
5304:src/xeq.c     **** 			return;
5305:src/xeq.c     **** 		}
5306:src/xeq.c     **** 		else {
5307:src/xeq.c     **** 			fp(op, (enum multiops)cmd);
5308:src/xeq.c     **** 			set_lift();
5309:src/xeq.c     **** 		}
5310:src/xeq.c     **** 	}
5311:src/xeq.c     **** }
5312:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 170


5313:src/xeq.c     **** 
5314:src/xeq.c     **** 
5315:src/xeq.c     **** /* Main dispatch routine that decodes the top level of the opcode and
5316:src/xeq.c     ****  * goes to the appropriate lower level dispatch routine.
5317:src/xeq.c     ****  */
5318:src/xeq.c     **** void xeq(opcode op) 
5319:src/xeq.c     **** {
5320:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
5321:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
5322:src/xeq.c     **** 	const struct _ustate old = UState;
5323:src/xeq.c     **** 	const unsigned char lift = get_lift();
5324:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
5325:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
5326:src/xeq.c     **** #ifdef INFRARED
5327:src/xeq.c     **** 	int tracing;
5328:src/xeq.c     **** #endif
5329:src/xeq.c     **** 
5330:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
5331:src/xeq.c     **** 	if (op == (OP_NIL | OP_rCLX) || op == (OP_NIL | OP_CLSTK)) {
5332:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
5333:src/xeq.c     **** 		// valid input so no error message will be generated.
5334:src/xeq.c     **** 		CmdLineDot = 0;
5335:src/xeq.c     **** 		Cmdline[0] = '0';
5336:src/xeq.c     **** 		Cmdline[1] = '\0';
5337:src/xeq.c     **** 	}
5338:src/xeq.c     **** #endif
5339:src/xeq.c     **** 
5340:src/xeq.c     **** 	xcopy(save, StackBase, sizeof(save));
5341:src/xeq.c     **** #if defined(CONSOLE)
5342:src/xeq.c     **** 	instruction_count++;
5343:src/xeq.c     **** #endif
5344:src/xeq.c     **** #ifndef REALBUILD
5345:src/xeq.c     **** 	if (State2.trace && ! State2.sst) {
5346:src/xeq.c     **** 		char buf[16];
5347:src/xeq.c     **** 		if (Running)
5348:src/xeq.c     **** 			print_step(op);
5349:src/xeq.c     **** 		else
5350:src/xeq.c     **** 			sprintf(TraceBuffer, "%04X:%s", op, prt(op, buf));
5351:src/xeq.c     **** 		DispMsg = TraceBuffer;
5352:src/xeq.c     **** 	}
5353:src/xeq.c     **** #endif
5354:src/xeq.c     **** #ifdef INFRARED
5355:src/xeq.c     **** #ifdef REALBUILD
5356:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && ! is_xrom() && State2.runmode;
5357:src/xeq.c     **** #else
5358:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && (! is_xrom() || State2.trace) && State2.runmode;
5359:src/xeq.c     **** #endif
5360:src/xeq.c     **** 	Tracing = tracing;
5361:src/xeq.c     **** 	print_trace( op, 0 );
5362:src/xeq.c     **** #endif
5363:src/xeq.c     **** 	Busy = 0;
5364:src/xeq.c     **** 	State2.wascomplex = 0;
5365:src/xeq.c     **** 	if (isDBL(op))
5366:src/xeq.c     **** 		multi(op);
5367:src/xeq.c     **** 	else if (isRARG(op))
5368:src/xeq.c     **** 		rargs(op);
5369:src/xeq.c     **** 	else {
ARM GAS  /tmp/ccBFDvgN.s 			page 171


5370:src/xeq.c     **** 		XeqOpCode = (s_opcode) op;
5371:src/xeq.c     **** 		switch (opKIND(op)) {
5372:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
5373:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
5374:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
5375:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
5376:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
5377:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
5378:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
5379:src/xeq.c     **** 		default:	illegal(op);
5380:src/xeq.c     **** 		}
5381:src/xeq.c     **** 	}
5382:src/xeq.c     **** #if INTERRUPT_XROM_TICKS > 0
5383:src/xeq.c     **** 	if (OnKeyTicks >= INTERRUPT_XROM_TICKS) {
5384:src/xeq.c     **** 		report_err(ERR_INTERRUPTED);
5385:src/xeq.c     **** 		while (get_key() >= 0) { } // Empty keyboard buffer
5386:src/xeq.c     **** 	}
5387:src/xeq.c     **** #endif
5388:src/xeq.c     **** 
5389:src/xeq.c     **** 	if (Error != ERR_NONE) {
5390:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
5391:src/xeq.c     **** 		error_message( Error );
5392:src/xeq.c     **** 		// Repair stack and state
5393:src/xeq.c     **** 		// Clear return stack
5394:src/xeq.c     **** 		xcopy(StackBase, save, sizeof(save));
5395:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
5396:src/xeq.c     **** 		UState = old;
5397:src/xeq.c     **** 		State2.state_lift = lift;
5398:src/xeq.c     **** 		raw_set_pc(old_pc);
5399:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
5400:src/xeq.c     **** 		process_cmdline_set_lift();
5401:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
5402:src/xeq.c     **** 		// wrong with the command line, e.g. it had a partially entered fraction
5403:src/xeq.c     **** 		Error = ERR_NONE;
5404:src/xeq.c     **** 		if (Running || XromRunning) {
5405:src/xeq.c     **** #ifndef REALBUILD
5406:src/xeq.c     **** 			if (State2.trace ) {
5407:src/xeq.c     **** 				// Special handling for debug environment
5408:src/xeq.c     **** 				if (XromFlags.xIN) {
5409:src/xeq.c     **** 					// Restore the global return stack
5410:src/xeq.c     **** 					RetStk = XromUserRetStk;
5411:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5412:src/xeq.c     **** 					// Restore private stack to normal stack
5413:src/xeq.c     **** 					if (! XromFlags.mode_double && NumRegs < STACK_SIZE + EXTRA_REG) {
5414:src/xeq.c     **** 						// Need space for double precision stack
5415:src/xeq.c     **** 						cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
5416:src/xeq.c     **** 					}
5417:src/xeq.c     **** 					XromFlags.xIN = 0;		// Clear flag before get_reg_n!
5418:src/xeq.c     **** 					if (Error == ERR_NONE) {
5419:src/xeq.c     **** 						UState.mode_double = 1;
5420:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
5421:src/xeq.c     **** 					}
5422:src/xeq.c     **** 					else
5423:src/xeq.c     **** 						Error = ERR_NONE;	// Not enough RAM, can't restore
5424:src/xeq.c     **** 				}
5425:src/xeq.c     **** 			}
5426:src/xeq.c     **** 			else {
ARM GAS  /tmp/ccBFDvgN.s 			page 172


5427:src/xeq.c     **** #endif
5428:src/xeq.c     **** 				unsigned short int pc = state_pc();
5429:src/xeq.c     **** 				if (XromFlags.xIN) {
5430:src/xeq.c     **** 					// Restore state to before xIN
5431:src/xeq.c     **** 					XromFlags.xIN = 0;
5432:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
5433:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
5434:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
5435:src/xeq.c     **** 					// Restore the global return stack
5436:src/xeq.c     **** 					RetStk = XromUserRetStk;
5437:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5438:src/xeq.c     **** 				}
5439:src/xeq.c     **** 				while (isXROM(pc)) {
5440:src/xeq.c     **** 					// Leave XROM
5441:src/xeq.c     **** 					if (RetStkPtr != 0) {
5442:src/xeq.c     **** 						retstk_up();
5443:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
5444:src/xeq.c     **** 					}
5445:src/xeq.c     **** 					if (RetStkPtr == 0)
5446:src/xeq.c     **** 						++pc; // compensate for decpc below
5447:src/xeq.c     **** 				}
5448:src/xeq.c     **** 				raw_set_pc(pc);
5449:src/xeq.c     **** #ifndef REALBUILD
5450:src/xeq.c     **** 			}
5451:src/xeq.c     **** #endif
5452:src/xeq.c     **** 			decpc();		// Back to error instruction
5453:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
5454:src/xeq.c     **** 
5455:src/xeq.c     **** 			set_running_off();
5456:src/xeq.c     **** 		}
5457:src/xeq.c     **** 	} 
5458:src/xeq.c     **** 	reset_volatile_state();
5459:src/xeq.c     **** #ifdef INFRARED
5460:src/xeq.c     **** 	Tracing = tracing;
5461:src/xeq.c     **** 	print_trace( op, 1 );
5462:src/xeq.c     **** #endif
5463:src/xeq.c     **** }
5464:src/xeq.c     **** 
5465:src/xeq.c     **** /* Execute a single step and return.
5466:src/xeq.c     ****  */
5467:src/xeq.c     **** static void xeq_single(void) {
5468:src/xeq.c     **** 	const opcode op = getprog(state_pc());
5469:src/xeq.c     **** 
5470:src/xeq.c     **** 	incpc();
5471:src/xeq.c     **** 	xeq(op);
5472:src/xeq.c     **** }
5473:src/xeq.c     **** 
5474:src/xeq.c     **** /* Continue execution trough xrom code
5475:src/xeq.c     ****  */
5476:src/xeq.c     **** #ifdef REALBUILD
5477:src/xeq.c     **** void xeq_xrom(void) {
5478:src/xeq.c     **** #else
5479:src/xeq.c     **** static void xeq_xrom2(void) {
5480:src/xeq.c     **** #endif
5481:src/xeq.c     **** 	int count = 0;
5482:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
5483:src/xeq.c     **** 	 * we break free.
ARM GAS  /tmp/ccBFDvgN.s 			page 173


5484:src/xeq.c     **** 	 */
5485:src/xeq.c     **** 	  while (!Pause && is_xrom() && RetStkPtr != 0) {
5486:src/xeq.c     **** 		XromRunning = 1;
5487:src/xeq.c     **** 		xeq_single();
5488:src/xeq.c     **** 		XromRunning = 0;
5489:src/xeq.c     **** 		if ((++count & 31) == 0)
5490:src/xeq.c     **** 			busy();
5491:src/xeq.c     **** 		  if (Pause)
5492:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
5493:src/xeq.c     **** 			// Switch to Running mode to force continued execution.
5494:src/xeq.c     **** 			Running = 1;
5495:src/xeq.c     **** 		
5496:src/xeq.c     **** 	}
5497:src/xeq.c     **** }
5498:src/xeq.c     **** 
5499:src/xeq.c     **** #ifndef REALBUILD
5500:src/xeq.c     **** void xeq_xrom(void) {
5501:src/xeq.c     **** 	// We split the routine in two parts for debugging only
5502:src/xeq.c     **** 	if (! State2.trace)
5503:src/xeq.c     **** 		xeq_xrom2();
5504:src/xeq.c     **** }
5505:src/xeq.c     **** #endif
5506:src/xeq.c     **** 
5507:src/xeq.c     **** /* Check to see if we're running a program and if so execute it
5508:src/xeq.c     ****  * for a while.
5509:src/xeq.c     ****  *
5510:src/xeq.c     ****  */
5511:src/xeq.c     **** 
5512:src/xeq.c     **** /*
5513:src/xeq.c     **** 'Pause' is true if Pause is non-zero, i.e., if the pause is still running.
5514:src/xeq.c     **** */
5515:src/xeq.c     ****  void xeqprog(void) 
5516:src/xeq.c     ****  {
5517:src/xeq.c     ****    int state = 0;
5518:src/xeq.c     ****    if (Running || Pause) {
5519:src/xeq.c     **** 
5520:src/xeq.c     **** #if !(defined(CONSOLE)) && !(defined(DM42))
5521:src/xeq.c     ****      long long last_ticker = Ticker;
5522:src/xeq.c     ****      state = ((int) last_ticker % (2*TICKS_PER_FLASH) < TICKS_PER_FLASH);
5523:src/xeq.c     **** #else
5524:src/xeq.c     ****      state = 1;
5525:src/xeq.c     **** #endif
5526:src/xeq.c     ****      
5527:src/xeq.c     ****      //     print_debug(100,state);
5528:src/xeq.c     ****      dot(RCL_annun, state);
5529:src/xeq.c     ****      finish_RPN(); // RPN
5530:src/xeq.c     **** 
5531:src/xeq.c     ****      while (! Pause && Running) {
5532:src/xeq.c     ****        xeq_single();
5533:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
5534:src/xeq.c     ****        if (is_key_pressed())
5535:src/xeq.c     **** 	 {
5536:src/xeq.c     **** 	 // Key press or heart beat
5537:src/xeq.c     **** 	 // Note: DM42 doesn't have real heart beat so no flash
5538:src/xeq.c     **** 	 // xeq_xrom(); // Already done by dispatch_xrom()
5539:src/xeq.c     **** 	 break;
5540:src/xeq.c     ****        }
ARM GAS  /tmp/ccBFDvgN.s 			page 174


5541:src/xeq.c     ****      }
5542:src/xeq.c     ****    }
5543:src/xeq.c     ****    if (! Running && ! Pause) {	  
5544:src/xeq.c     ****      // Program has terminated
5545:src/xeq.c     ****      clr_dot(RCL_annun);
5546:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
5547:src/xeq.c     ****      display();
5548:src/xeq.c     ****      if (ShowRPN) {
5549:src/xeq.c     ****        set_dot(RPN);
5550:src/xeq.c     ****        finish_RPN(); // RPN
5551:src/xeq.c     ****      }
5552:src/xeq.c     **** #ifndef CONSOLE
5553:src/xeq.c     ****      // Avoid accidental restart with R/S or APD after program ends
5554:src/xeq.c     ****      JustStopped = 1;
5555:src/xeq.c     **** #endif
5556:src/xeq.c     ****    }
5557:src/xeq.c     ****  }
5558:src/xeq.c     **** 
5559:src/xeq.c     **** /* Single step and back step routine
5560:src/xeq.c     ****  */
5561:src/xeq.c     **** void xeq_sst_bst(int kind) 
5562:src/xeq.c     **** {
5563:src/xeq.c     **** 	opcode op;
5564:src/xeq.c     **** 
5565:src/xeq.c     **** 	reset_volatile_state();
5566:src/xeq.c     **** 	if (kind == -1)
5567:src/xeq.c     **** 		decpc();
5568:src/xeq.c     **** 
5569:src/xeq.c     **** 	if (State2.runmode) {
5570:src/xeq.c     **** 		// Display the step
5571:src/xeq.c     **** 		op = getprog(state_pc());
5572:src/xeq.c     **** 		print_step(op);
5573:src/xeq.c     **** 		if (kind == 1) {
5574:src/xeq.c     **** 			// Execute the step on key up
5575:src/xeq.c     **** #ifndef REALBUILD
5576:src/xeq.c     **** 			State2.sst = 1;
5577:src/xeq.c     **** #endif
5578:src/xeq.c     **** 			set_running_on_sst();
5579:src/xeq.c     **** 			incpc();
5580:src/xeq.c     **** 			xeq(op);
5581:src/xeq.c     **** #ifndef REALBUILD
5582:src/xeq.c     **** 			State2.sst = 0;
5583:src/xeq.c     **** #endif
5584:src/xeq.c     **** 			xeq_xrom();  // necessary for code called from XROM
5585:src/xeq.c     **** 			set_running_off_sst();
5586:src/xeq.c     **** 		}
5587:src/xeq.c     **** 	}
5588:src/xeq.c     **** 	else if (kind == 0) {
5589:src/xeq.c     **** 		// Key down in program mode
5590:src/xeq.c     **** 		incpc();
5591:src/xeq.c     **** 		OpCode = 0;
5592:src/xeq.c     **** 	}
5593:src/xeq.c     **** }
5594:src/xeq.c     **** 
5595:src/xeq.c     **** 
5596:src/xeq.c     **** /*
5597:src/xeq.c     ****  *  User command to start or stop execution
ARM GAS  /tmp/ccBFDvgN.s 			page 175


5598:src/xeq.c     ****  */
5599:src/xeq.c     **** void op_rs(enum nilop op) {
5600:src/xeq.c     **** #ifndef REALBUILD
5601:src/xeq.c     **** 	// This is for debugging purposes only
5602:src/xeq.c     **** 	// STOP does not appear in XROM normally
5603:src/xeq.c     **** 	if (is_xrom()) {
5604:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
5605:src/xeq.c     **** 			Running = XromRunning = 0;
5606:src/xeq.c     **** 		}
5607:src/xeq.c     **** 		else {
5608:src/xeq.c     **** 			xeq_xrom2();
5609:src/xeq.c     **** 		}
5610:src/xeq.c     **** 		return;
5611:src/xeq.c     **** 	}
5612:src/xeq.c     **** #endif
5613:src/xeq.c     **** 	if (Running)
5614:src/xeq.c     **** 		set_running_off();
5615:src/xeq.c     **** 	else {
5616:src/xeq.c     **** 		set_running_on();
5617:src/xeq.c     **** 		if (RetStkPtr == 0)
5618:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
5619:src/xeq.c     **** 	}
5620:src/xeq.c     **** }
5621:src/xeq.c     **** 
5622:src/xeq.c     **** 
5623:src/xeq.c     **** /* 
5624:src/xeq.c     ****  *  The following needs to be done each time before any user input is processed.
5625:src/xeq.c     ****  *  On the hardware, RAM is volatile and these pointers and structures need valid values!
5626:src/xeq.c     ****  */
5627:src/xeq.c     **** void xeq_init_contexts(void) {
5628:src/xeq.c     **** 	/*
5629:src/xeq.c     **** 	 *  Compute the sizes of the various memory portions
5630:src/xeq.c     **** 	 */
5631:src/xeq.c     **** 	short int s;
5632:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
5633:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
5634:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
5635:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
5636:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
5637:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
5638:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5639:src/xeq.c     **** 
5640:src/xeq.c     **** 	/*
5641:src/xeq.c     **** 	 *  Initialise our standard contexts.
5642:src/xeq.c     **** 	 *  We bump the digits for internal calculations.
5643:src/xeq.c     **** 	 */
5644:src/xeq.c     **** 	decContextDefault(&Ctx, DEC_INIT_BASE);
5645:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
5646:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
5647:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
5648:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
5649:src/xeq.c     **** }
5650:src/xeq.c     **** 
5651:src/xeq.c     **** 
5652:src/xeq.c     **** 
5653:src/xeq.c     **** #ifdef INCLUDE_PLOTTING
5654:src/xeq.c     **** /*
ARM GAS  /tmp/ccBFDvgN.s 			page 176


5655:src/xeq.c     ****  *  Plotting commands
5656:src/xeq.c     ****  *
5657:src/xeq.c     ****  *  The plot buffer is a range of registers that is treated as pixel data
5658:src/xeq.c     ****  *  The first byte contains the length of the buffer in columns (bytes)
5659:src/xeq.c     ****  */
5660:src/xeq.c     **** 
5661:src/xeq.c     **** /*
5662:src/xeq.c     ****  *  Check register range and return a pointer to the plot data.
5663:src/xeq.c     ****  */
5664:src/xeq.c     **** unsigned char *plot_check_range( int arg, int width, int height )
5665:src/xeq.c     **** {
5666:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
5667:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
5668:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
5669:src/xeq.c     **** 	int bytes;
5670:src/xeq.c     **** 
5671:src/xeq.c     **** 	if ( width == 0 ) {
5672:src/xeq.c     **** 		width = (int) *p;
5673:src/xeq.c     **** 		height = (int) p[ 1 ];
5674:src/xeq.c     **** 	}
5675:src/xeq.c     **** 
5676:src/xeq.c     **** 	/*
5677:src/xeq.c     **** 	 *  Compute total number of bytes
5678:src/xeq.c     **** 	 */
5679:src/xeq.c     **** 	bytes = 2 + width * height;
5680:src/xeq.c     **** 
5681:src/xeq.c     **** 	/*
5682:src/xeq.c     **** 	 *  Check if we have enough room
5683:src/xeq.c     **** 	 */
5684:src/xeq.c     **** 	if ( width > PAPER_WIDTH || arg + ( bytes + n - 1 ) / n > lim ) {
5685:src/xeq.c     **** 		report_err( ERR_RANGE );
5686:src/xeq.c     **** 		return (unsigned char *) NULL;
5687:src/xeq.c     **** 	}
5688:src/xeq.c     **** 	return p;
5689:src/xeq.c     **** }
5690:src/xeq.c     **** 
5691:src/xeq.c     **** /*
5692:src/xeq.c     ****  * Set up for graphical object display.
5693:src/xeq.c     ****  */
5694:src/xeq.c     **** void cmdplotdisplay( unsigned int arg, enum rarg op )
5695:src/xeq.c     **** {
5696:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
5697:src/xeq.c     **** 		DispPlot = arg + 1;
5698:src/xeq.c     **** 		frozen_display();
5699:src/xeq.c     **** 	}
5700:src/xeq.c     **** }
5701:src/xeq.c     **** 
5702:src/xeq.c     **** /*
5703:src/xeq.c     ****  *  Initialize a block of registers to act as a buffer for plotting
5704:src/xeq.c     ****  *  X contains the maximum width (<= 0 is default: 166)
5705:src/xeq.c     ****  */
5706:src/xeq.c     **** void cmdplotinit( unsigned int arg, enum rarg op )
5707:src/xeq.c     **** {
5708:src/xeq.c     **** 	int sgnx, sgny;
5709:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
5710:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
5711:src/xeq.c     **** 	unsigned char *p;
ARM GAS  /tmp/ccBFDvgN.s 			page 177


5712:src/xeq.c     **** 	
5713:src/xeq.c     **** 	if ( sgnx || width == 0 ) {
5714:src/xeq.c     **** 		width = PAPER_WIDTH;
5715:src/xeq.c     **** 	}
5716:src/xeq.c     **** 	if ( sgny || height == 0 ) {
5717:src/xeq.c     **** 		height = 1;
5718:src/xeq.c     **** 	}
5719:src/xeq.c     **** 	else {
5720:src/xeq.c     **** 		/*
5721:src/xeq.c     **** 		 *  Make height count the byte rows
5722:src/xeq.c     **** 		 */
5723:src/xeq.c     **** 		height = ( height + 7 ) >> 3;
5724:src/xeq.c     **** 	}
5725:src/xeq.c     **** 
5726:src/xeq.c     **** 	p = plot_check_range( arg, width, height );
5727:src/xeq.c     **** 	if ( p != NULL ) {
5728:src/xeq.c     **** 		*p++ = (unsigned char) width;
5729:src/xeq.c     **** 		*p++ = (unsigned char) height;
5730:src/xeq.c     **** 		xset( p, 0, width * height );
5731:src/xeq.c     **** 	}
5732:src/xeq.c     **** }
5733:src/xeq.c     **** 
5734:src/xeq.c     **** /*
5735:src/xeq.c     ****  *  Return the width and height of the plotting block
5736:src/xeq.c     ****  */
5737:src/xeq.c     **** void cmdplotdim( unsigned int arg, enum rarg op )
5738:src/xeq.c     **** {
5739:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5740:src/xeq.c     **** 	if ( p != NULL ) {
5741:src/xeq.c     **** 		lift2_if_enabled();
5742:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
5743:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
5744:src/xeq.c     **** 	}
5745:src/xeq.c     **** }
5746:src/xeq.c     **** 
5747:src/xeq.c     **** /*
5748:src/xeq.c     ****  *  All pixel related commands
5749:src/xeq.c     ****  *  X is the horizontal position 0..width
5750:src/xeq.c     ****  *  Y is the vertical position 0..7
5751:src/xeq.c     ****  */
5752:src/xeq.c     **** void cmdplotpixel( unsigned int arg, enum rarg op )
5753:src/xeq.c     **** {
5754:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5755:src/xeq.c     **** 	if ( p != NULL ) {
5756:src/xeq.c     **** 		/*
5757:src/xeq.c     **** 		 *  Get row from Y
5758:src/xeq.c     **** 		 */
5759:src/xeq.c     **** 		int sgn;
5760:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
5761:src/xeq.c     **** 		int pix = 0;
5762:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
5763:src/xeq.c     **** 			/*
5764:src/xeq.c     **** 			 *  Row is OK, get column from X
5765:src/xeq.c     **** 			 */
5766:src/xeq.c     **** 			unsigned int width = (unsigned int) *p;
5767:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
5768:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
ARM GAS  /tmp/ccBFDvgN.s 			page 178


5769:src/xeq.c     **** 				/*
5770:src/xeq.c     **** 				 *  Modify the bit in the correct byte
5771:src/xeq.c     **** 				 */
5772:src/xeq.c     **** 				pix = 1 << ( row & 7 );
5773:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
5774:src/xeq.c     **** 
5775:src/xeq.c     **** 				if ( op == RARG_PLOT_SETPIX ) {
5776:src/xeq.c     **** 					*p |= pix;
5777:src/xeq.c     **** 				}
5778:src/xeq.c     **** 				else if ( op == RARG_PLOT_CLRPIX ) {
5779:src/xeq.c     **** 					*p &= ~pix;
5780:src/xeq.c     **** 				}
5781:src/xeq.c     **** 				else if ( op == RARG_PLOT_FLIPPIX ) {
5782:src/xeq.c     **** 					*p ^= pix;
5783:src/xeq.c     **** 				}
5784:src/xeq.c     **** 			}
5785:src/xeq.c     **** 		}
5786:src/xeq.c     **** 		if ( op == RARG_PLOT_ISSET ) {
5787:src/xeq.c     **** 			fin_tst( *p & pix );
5788:src/xeq.c     **** 		}
5789:src/xeq.c     **** 	}
5790:src/xeq.c     **** }
5791:src/xeq.c     **** #endif
5792:src/xeq.c     **** 
5793:src/xeq.c     **** 
5794:src/xeq.c     **** /*
5795:src/xeq.c     ****  *  We don't allow some commands from a running program
5796:src/xeq.c     ****  */
5797:src/xeq.c     **** int not_running(void) {
5798:src/xeq.c     **** 	if ( Running ) {
5799:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5800:src/xeq.c     **** 		return 0;
5801:src/xeq.c     **** 	}
5802:src/xeq.c     **** 	return 1;
5803:src/xeq.c     **** }
5804:src/xeq.c     **** 
5805:src/xeq.c     **** /*
5806:src/xeq.c     ****  *  Handle the Running Flag
5807:src/xeq.c     ****  */
5808:src/xeq.c     **** void set_running_off_sst() {
5809:src/xeq.c     **** 	Running = 0;
5810:src/xeq.c     **** }
5811:src/xeq.c     **** 
5812:src/xeq.c     **** void set_running_on_sst() {
5813:src/xeq.c     **** 	Running = 1;
5814:src/xeq.c     **** }
5815:src/xeq.c     **** 
5816:src/xeq.c     **** void set_running_off() {
 3535              		.loc 1 5816 6 view .LVU964
 3536              	.LBB1560:
5817:src/xeq.c     **** 	set_running_off_sst();
 3537              		.loc 1 5817 2 view .LVU965
 3538              	.LBB1561:
 3539              	.LBI1561:
5808:src/xeq.c     **** 	Running = 0;
 3540              		.loc 1 5808 6 view .LVU966
 3541              	.LBB1562:
ARM GAS  /tmp/ccBFDvgN.s 			page 179


5809:src/xeq.c     **** }
 3542              		.loc 1 5809 2 view .LVU967
5809:src/xeq.c     **** }
 3543              		.loc 1 5809 10 is_stmt 0 view .LVU968
 3544 0070 084A     		ldr	r2, .L290+8
 3545 0072 1160     		str	r1, [r2]
 3546              	.LBE1562:
 3547              	.LBE1561:
5818:src/xeq.c     **** 	State.entryp = 0;
 3548              		.loc 1 5818 2 is_stmt 1 view .LVU969
 3549              		.loc 1 5818 15 is_stmt 0 view .LVU970
 3550 0074 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 3551 0078 61F30412 		bfi	r2, r1, #4, #1
 3552 007c 83F8DD27 		strb	r2, [r3, #2013]
5819:src/xeq.c     **** 	dot( RCL_annun, 0);
 3553              		.loc 1 5819 2 is_stmt 1 view .LVU971
 3554              	.LBE1560:
 3555              	.LBE1559:
2270:src/xeq.c     **** 
 3556              		.loc 1 2270 1 is_stmt 0 view .LVU972
 3557 0080 BDE87040 		pop	{r4, r5, r6, lr}
 3558              		.cfi_restore 14
 3559              		.cfi_restore 6
 3560              		.cfi_restore 5
 3561              		.cfi_restore 4
 3562              		.cfi_def_cfa_offset 0
 3563              	.LBB1564:
 3564              	.LBB1563:
 3565              		.loc 1 5819 2 view .LVU973
 3566 0084 8A20     		movs	r0, #138
 3567 0086 FFF7FEBF 		b	dot
 3568              	.LVL265:
 3569              	.L291:
 3570 008a 00BF     		.align	2
 3571              	.L290:
 3572 008c 00000000 		.word	main_ram
 3573 0090 00000000 		.word	RetStk
 3574 0094 00000000 		.word	Running
 3575              	.LBE1563:
 3576              	.LBE1564:
 3577              		.cfi_endproc
 3578              	.LFE154:
 3580              		.section	.text.user_pc,"ax",%progbits
 3581              		.align	1
 3582              		.p2align 2,,3
 3583              		.global	user_pc
 3584              		.syntax unified
 3585              		.thumb
 3586              		.thumb_func
 3587              		.fpu fpv4-sp-d16
 3589              	user_pc:
 3590              	.LVL266:
 3591              	.LFB25:
 494:src/xeq.c     **** 	unsigned int n = 1;
 3592              		.loc 1 494 39 is_stmt 1 view -0
 3593              		.cfi_startproc
 3594              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccBFDvgN.s 			page 180


 3595              		@ frame_needed = 0, uses_anonymous_args = 0
 3596              		@ link register save eliminated.
 495:src/xeq.c     **** 	unsigned int base;
 3597              		.loc 1 495 2 view .LVU975
 496:src/xeq.c     **** 
 3598              		.loc 1 496 2 view .LVU976
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3599              		.loc 1 499 2 view .LVU977
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3600              		.loc 1 499 5 is_stmt 0 view .LVU978
 3601 0000 0346     		mov	r3, r0
 3602 0002 20B1     		cbz	r0, .L293
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3603              		.loc 1 499 17 discriminator 1 view .LVU979
 3604 0004 820B     		lsrs	r2, r0, #14
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3605              		.loc 1 499 14 discriminator 1 view .LVU980
 3606 0006 032A     		cmp	r2, #3
 3607 0008 01D0     		beq	.L293
 3608 000a FFF7FEBF 		b	user_pc.part.0
 3609              	.LVL267:
 3610              	.L293:
 500:src/xeq.c     **** #else
 3611              		.loc 1 500 3 is_stmt 1 view .LVU981
 500:src/xeq.c     **** #else
 3612              		.loc 1 500 24 is_stmt 0 view .LVU982
 3613 000e C3F30D00 		ubfx	r0, r3, #0, #14
 3614              	.LVL268:
 513:src/xeq.c     **** 
 3615              		.loc 1 513 1 view .LVU983
 3616 0012 7047     		bx	lr
 3617              		.cfi_endproc
 3618              	.LFE25:
 3620              		.section	.text.find_user_pc,"ax",%progbits
 3621              		.align	1
 3622              		.p2align 2,,3
 3623              		.global	find_user_pc
 3624              		.syntax unified
 3625              		.thumb
 3626              		.thumb_func
 3627              		.fpu fpv4-sp-d16
 3629              	find_user_pc:
 3630              	.LVL269:
 3631              	.LFB26:
 517:src/xeq.c     **** 	unsigned int upc = state_pc();
 3632              		.loc 1 517 48 is_stmt 1 view -0
 3633              		.cfi_startproc
 3634              		@ args = 0, pretend = 0, frame = 0
 3635              		@ frame_needed = 0, uses_anonymous_args = 0
 518:src/xeq.c     **** 	const int libp = isLIB(upc);
 3636              		.loc 1 518 2 view .LVU985
 517:src/xeq.c     **** 	unsigned int upc = state_pc();
 3637              		.loc 1 517 48 is_stmt 0 view .LVU986
 3638 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3639              		.cfi_def_cfa_offset 24
 3640              		.cfi_offset 3, -24
 3641              		.cfi_offset 4, -20
ARM GAS  /tmp/ccBFDvgN.s 			page 181


 3642              		.cfi_offset 5, -16
 3643              		.cfi_offset 6, -12
 3644              		.cfi_offset 7, -8
 3645              		.cfi_offset 14, -4
 518:src/xeq.c     **** 	const int libp = isLIB(upc);
 3646              		.loc 1 518 21 view .LVU987
 3647 0002 124B     		ldr	r3, .L309
 3648 0004 1B68     		ldr	r3, [r3]
 3649 0006 B3F8E037 		ldrh	r3, [r3, #2016]
 3650              	.LVL270:
 519:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 3651              		.loc 1 519 2 is_stmt 1 view .LVU988
 520:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3652              		.loc 1 520 2 view .LVU989
 520:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3653              		.loc 1 520 43 is_stmt 0 view .LVU990
 3654 000a 13F44044 		ands	r4, r3, #49152
 3655              	.LVL271:
 520:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3656              		.loc 1 520 43 view .LVU991
 3657 000e 1ABF     		itte	ne
 3658 0010 03F44045 		andne	r5, r3, #49152
 3659 0014 0135     		addne	r5, r5, #1
 3660 0016 2546     		moveq	r5, r4
 3661              	.LVL272:
 521:src/xeq.c     **** #ifndef REALBUILD
 3662              		.loc 1 521 2 is_stmt 1 view .LVU992
 523:src/xeq.c     **** 		return addrXROM(target);
 3663              		.loc 1 523 6 is_stmt 0 view .LVU993
 3664 0018 9B0B     		lsrs	r3, r3, #14
 3665              	.LVL273:
 521:src/xeq.c     **** #ifndef REALBUILD
 3666              		.loc 1 521 28 view .LVU994
 3667 001a 003C     		subs	r4, r4, #0
 521:src/xeq.c     **** #ifndef REALBUILD
 3668              		.loc 1 521 28 view .LVU995
 3669 001c 18BF     		it	ne
 3670 001e 0124     		movne	r4, #1
 3671              	.LVL274:
 523:src/xeq.c     **** 		return addrXROM(target);
 3672              		.loc 1 523 2 is_stmt 1 view .LVU996
 523:src/xeq.c     **** 		return addrXROM(target);
 3673              		.loc 1 523 5 is_stmt 0 view .LVU997
 3674 0020 032B     		cmp	r3, #3
 517:src/xeq.c     **** 	unsigned int upc = state_pc();
 3675              		.loc 1 517 48 view .LVU998
 3676 0022 0646     		mov	r6, r0
 523:src/xeq.c     **** 		return addrXROM(target);
 3677              		.loc 1 523 5 view .LVU999
 3678 0024 0ED0     		beq	.L307
 3679              	.LBB1565:
 529:src/xeq.c     **** 			return oldbase;
 3680              		.loc 1 529 7 view .LVU1000
 3681 0026 0A4F     		ldr	r7, .L309+4
 3682 0028 05E0     		b	.L302
 3683              	.LVL275:
 3684              	.L304:
ARM GAS  /tmp/ccBFDvgN.s 			page 182


 528:src/xeq.c     **** 		if (PcWrapped)
 3685              		.loc 1 528 10 view .LVU1001
 3686 002a FFF7FEFF 		bl	do_inc
 3687              	.LVL276:
 529:src/xeq.c     **** 			return oldbase;
 3688              		.loc 1 529 6 view .LVU1002
 3689 002e 3B68     		ldr	r3, [r7]
 3690              	.LVL277:
 529:src/xeq.c     **** 			return oldbase;
 3691              		.loc 1 529 3 is_stmt 1 view .LVU1003
 3692 0030 0134     		adds	r4, r4, #1
 3693              	.LVL278:
 529:src/xeq.c     **** 			return oldbase;
 3694              		.loc 1 529 6 is_stmt 0 view .LVU1004
 3695 0032 2BB9     		cbnz	r3, .L300
 528:src/xeq.c     **** 		if (PcWrapped)
 3696              		.loc 1 528 10 view .LVU1005
 3697 0034 0546     		mov	r5, r0
 3698              	.LVL279:
 3699              	.L302:
 527:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 3700              		.loc 1 527 3 is_stmt 1 view .LVU1006
 528:src/xeq.c     **** 		if (PcWrapped)
 3701              		.loc 1 528 3 view .LVU1007
 528:src/xeq.c     **** 		if (PcWrapped)
 3702              		.loc 1 528 3 is_stmt 0 view .LVU1008
 3703              	.LBE1565:
 526:src/xeq.c     **** 		const unsigned int oldbase = base;
 3704              		.loc 1 526 8 is_stmt 1 view .LVU1009
 526:src/xeq.c     **** 		const unsigned int oldbase = base;
 3705              		.loc 1 526 8 is_stmt 0 view .LVU1010
 3706 0036 A642     		cmp	r6, r4
 3707              	.LBB1566:
 528:src/xeq.c     **** 		if (PcWrapped)
 3708              		.loc 1 528 10 view .LVU1011
 3709 0038 2846     		mov	r0, r5
 3710 003a 4FF00001 		mov	r1, #0
 3711              	.LBE1566:
 526:src/xeq.c     **** 		const unsigned int oldbase = base;
 3712              		.loc 1 526 8 view .LVU1012
 3713 003e F4D8     		bhi	.L304
 3714              	.LVL280:
 3715              	.L300:
 533:src/xeq.c     **** 
 3716              		.loc 1 533 1 view .LVU1013
 3717 0040 2846     		mov	r0, r5
 3718              	.LVL281:
 533:src/xeq.c     **** 
 3719              		.loc 1 533 1 view .LVU1014
 3720 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3721              	.LVL282:
 3722              	.L307:
 524:src/xeq.c     **** #endif
 3723              		.loc 1 524 3 is_stmt 1 view .LVU1015
 524:src/xeq.c     **** #endif
 3724              		.loc 1 524 10 is_stmt 0 view .LVU1016
 3725 0044 40F44045 		orr	r5, r0, #49152
ARM GAS  /tmp/ccBFDvgN.s 			page 183


 3726              	.LVL283:
 533:src/xeq.c     **** 
 3727              		.loc 1 533 1 view .LVU1017
 3728 0048 2846     		mov	r0, r5
 3729              	.LVL284:
 533:src/xeq.c     **** 
 3730              		.loc 1 533 1 view .LVU1018
 3731 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3732              	.LVL285:
 3733              	.L310:
 533:src/xeq.c     **** 
 3734              		.loc 1 533 1 view .LVU1019
 3735              		.align	2
 3736              	.L309:
 3737 004c 00000000 		.word	main_ram
 3738 0050 00000000 		.word	PcWrapped
 3739              		.cfi_endproc
 3740              	.LFE26:
 3742              		.section	.text.report_err,"ax",%progbits
 3743              		.align	1
 3744              		.p2align 2,,3
 3745              		.global	report_err
 3746              		.syntax unified
 3747              		.thumb
 3748              		.thumb_func
 3749              		.fpu fpv4-sp-d16
 3751              	report_err:
 3752              	.LVL286:
 3753              	.LFB28:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3754              		.loc 1 546 38 is_stmt 1 view -0
 3755              		.cfi_startproc
 3756              		@ args = 0, pretend = 0, frame = 0
 3757              		@ frame_needed = 0, uses_anonymous_args = 0
 547:src/xeq.c     **** 		Error = e;
 3758              		.loc 1 547 2 view .LVU1021
 547:src/xeq.c     **** 		Error = e;
 3759              		.loc 1 547 12 is_stmt 0 view .LVU1022
 3760 0000 064A     		ldr	r2, .L317
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3761              		.loc 1 546 38 view .LVU1023
 3762 0002 10B5     		push	{r4, lr}
 3763              		.cfi_def_cfa_offset 8
 3764              		.cfi_offset 4, -8
 3765              		.cfi_offset 14, -4
 547:src/xeq.c     **** 		Error = e;
 3766              		.loc 1 547 12 view .LVU1024
 3767 0004 1468     		ldr	r4, [r2]
 547:src/xeq.c     **** 		Error = e;
 3768              		.loc 1 547 5 view .LVU1025
 3769 0006 0CB9     		cbnz	r4, .L314
 3770              	.LVL287:
 3771              	.LBB1569:
 3772              	.LBI1569:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3773              		.loc 1 546 5 is_stmt 1 view .LVU1026
 3774              	.LBB1570:
ARM GAS  /tmp/ccBFDvgN.s 			page 184


 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3775              		.loc 1 548 3 view .LVU1027
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3776              		.loc 1 548 9 is_stmt 0 view .LVU1028
 3777 0008 1060     		str	r0, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3778              		.loc 1 549 3 is_stmt 1 view .LVU1029
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3779              		.loc 1 549 6 is_stmt 0 view .LVU1030
 3780 000a 10B1     		cbz	r0, .L316
 3781              	.LVL288:
 3782              	.L314:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3783              		.loc 1 549 6 view .LVU1031
 3784              	.LBE1570:
 3785              	.LBE1569:
 554:src/xeq.c     **** }
 3786              		.loc 1 554 9 view .LVU1032
 3787 000c 0124     		movs	r4, #1
 555:src/xeq.c     **** 
 3788              		.loc 1 555 1 view .LVU1033
 3789 000e 2046     		mov	r0, r4
 3790              	.LVL289:
 555:src/xeq.c     **** 
 3791              		.loc 1 555 1 view .LVU1034
 3792 0010 10BD     		pop	{r4, pc}
 3793              	.LVL290:
 3794              	.L316:
 3795              	.LBB1572:
 3796              	.LBB1571:
 550:src/xeq.c     **** 			return 0;
 3797              		.loc 1 550 4 is_stmt 1 view .LVU1035
 3798 0012 FFF7FEFF 		bl	error_message
 3799              	.LVL291:
 551:src/xeq.c     **** 		}
 3800              		.loc 1 551 4 view .LVU1036
 551:src/xeq.c     **** 		}
 3801              		.loc 1 551 4 is_stmt 0 view .LVU1037
 3802              	.LBE1571:
 3803              	.LBE1572:
 555:src/xeq.c     **** 
 3804              		.loc 1 555 1 view .LVU1038
 3805 0016 2046     		mov	r0, r4
 3806 0018 10BD     		pop	{r4, pc}
 3807              	.L318:
 3808 001a 00BF     		.align	2
 3809              	.L317:
 3810 001c 00000000 		.word	Error
 3811              		.cfi_endproc
 3812              	.LFE28:
 3814              		.section	.text.report_warn,"ax",%progbits
 3815              		.align	1
 3816              		.p2align 2,,3
 3817              		.global	report_warn
 3818              		.syntax unified
 3819              		.thumb
 3820              		.thumb_func
ARM GAS  /tmp/ccBFDvgN.s 			page 185


 3821              		.fpu fpv4-sp-d16
 3823              	report_warn:
 3824              	.LVL292:
 3825              	.LFB29:
 560:src/xeq.c     **** 	if (Running) {
 3826              		.loc 1 560 39 is_stmt 1 view -0
 3827              		.cfi_startproc
 3828              		@ args = 0, pretend = 0, frame = 0
 3829              		@ frame_needed = 0, uses_anonymous_args = 0
 561:src/xeq.c     **** 		return report_err(e);
 3830              		.loc 1 561 2 view .LVU1040
 561:src/xeq.c     **** 		return report_err(e);
 3831              		.loc 1 561 6 is_stmt 0 view .LVU1041
 3832 0000 114B     		ldr	r3, .L325
 560:src/xeq.c     **** 	if (Running) {
 3833              		.loc 1 560 39 view .LVU1042
 3834 0002 70B5     		push	{r4, r5, r6, lr}
 3835              		.cfi_def_cfa_offset 16
 3836              		.cfi_offset 4, -16
 3837              		.cfi_offset 5, -12
 3838              		.cfi_offset 6, -8
 3839              		.cfi_offset 14, -4
 561:src/xeq.c     **** 		return report_err(e);
 3840              		.loc 1 561 5 view .LVU1043
 3841 0004 1D68     		ldr	r5, [r3]
 560:src/xeq.c     **** 	if (Running) {
 3842              		.loc 1 560 39 view .LVU1044
 3843 0006 0446     		mov	r4, r0
 561:src/xeq.c     **** 		return report_err(e);
 3844              		.loc 1 561 5 view .LVU1045
 3845 0008 5DB1     		cbz	r5, .L320
 562:src/xeq.c     **** 	}
 3846              		.loc 1 562 3 is_stmt 1 view .LVU1046
 3847              	.LVL293:
 3848              	.LBB1581:
 3849              	.LBI1581:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3850              		.loc 1 546 5 view .LVU1047
 3851              	.LBB1582:
 547:src/xeq.c     **** 		Error = e;
 3852              		.loc 1 547 2 view .LVU1048
 547:src/xeq.c     **** 		Error = e;
 3853              		.loc 1 547 12 is_stmt 0 view .LVU1049
 3854 000a 104B     		ldr	r3, .L325+4
 3855 000c 1D68     		ldr	r5, [r3]
 547:src/xeq.c     **** 		Error = e;
 3856              		.loc 1 547 5 view .LVU1050
 3857 000e 15B1     		cbz	r5, .L321
 3858              	.L323:
 554:src/xeq.c     **** }
 3859              		.loc 1 554 9 view .LVU1051
 3860 0010 0125     		movs	r5, #1
 3861              	.LVL294:
 3862              	.L319:
 554:src/xeq.c     **** }
 3863              		.loc 1 554 9 view .LVU1052
 3864              	.LBE1582:
ARM GAS  /tmp/ccBFDvgN.s 			page 186


 3865              	.LBE1581:
 571:src/xeq.c     **** 
 3866              		.loc 1 571 1 view .LVU1053
 3867 0012 2846     		mov	r0, r5
 3868 0014 70BD     		pop	{r4, r5, r6, pc}
 3869              	.LVL295:
 3870              	.L321:
 3871              	.LBB1586:
 3872              	.LBB1585:
 3873              	.LBB1583:
 3874              	.LBI1583:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3875              		.loc 1 546 5 is_stmt 1 view .LVU1054
 3876              	.LBB1584:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3877              		.loc 1 548 3 view .LVU1055
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3878              		.loc 1 548 9 is_stmt 0 view .LVU1056
 3879 0016 1860     		str	r0, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3880              		.loc 1 549 3 is_stmt 1 view .LVU1057
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3881              		.loc 1 549 6 is_stmt 0 view .LVU1058
 3882 0018 0028     		cmp	r0, #0
 3883 001a F9D1     		bne	.L323
 550:src/xeq.c     **** 			return 0;
 3884              		.loc 1 550 4 is_stmt 1 view .LVU1059
 3885 001c FFF7FEFF 		bl	error_message
 3886              	.LVL296:
 551:src/xeq.c     **** 		}
 3887              		.loc 1 551 4 view .LVU1060
 551:src/xeq.c     **** 		}
 3888              		.loc 1 551 11 is_stmt 0 view .LVU1061
 3889 0020 F7E7     		b	.L319
 3890              	.LVL297:
 3891              	.L320:
 551:src/xeq.c     **** 		}
 3892              		.loc 1 551 11 view .LVU1062
 3893              	.LBE1584:
 3894              	.LBE1583:
 3895              	.LBE1585:
 3896              	.LBE1586:
 3897              	.LBB1587:
 3898              	.LBI1587:
 560:src/xeq.c     **** 	if (Running) {
 3899              		.loc 1 560 5 is_stmt 1 view .LVU1063
 3900              	.LBB1588:
 564:src/xeq.c     **** #ifndef CONSOLE
 3901              		.loc 1 564 2 view .LVU1064
 3902 0022 FFF7FEFF 		bl	error_message
 3903              	.LVL298:
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3904              		.loc 1 566 2 view .LVU1065
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3905              		.loc 1 566 21 is_stmt 0 view .LVU1066
 3906 0026 0A4A     		ldr	r2, .L325+8
 567:src/xeq.c     **** 	ShowRPN = 1;
ARM GAS  /tmp/ccBFDvgN.s 			page 187


 3907              		.loc 1 567 16 view .LVU1067
 3908 0028 0A4E     		ldr	r6, .L325+12
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3909              		.loc 1 566 21 view .LVU1068
 3910 002a D17D     		ldrb	r1, [r2, #23]	@ zero_extendqisi2
 568:src/xeq.c     **** #endif
 3911              		.loc 1 568 10 view .LVU1069
 3912 002c 0A48     		ldr	r0, .L325+16
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3913              		.loc 1 566 21 view .LVU1070
 3914 002e 65F30411 		bfi	r1, r5, #4, #1
 570:src/xeq.c     **** }
 3915              		.loc 1 570 11 view .LVU1071
 3916 0032 251E     		subs	r5, r4, #0
 567:src/xeq.c     **** 	ShowRPN = 1;
 3917              		.loc 1 567 16 view .LVU1072
 3918 0034 4FF00103 		mov	r3, #1
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3919              		.loc 1 566 21 view .LVU1073
 3920 0038 D175     		strb	r1, [r2, #23]
 567:src/xeq.c     **** 	ShowRPN = 1;
 3921              		.loc 1 567 2 is_stmt 1 view .LVU1074
 570:src/xeq.c     **** }
 3922              		.loc 1 570 11 is_stmt 0 view .LVU1075
 3923 003a 18BF     		it	ne
 3924 003c 0125     		movne	r5, #1
 568:src/xeq.c     **** #endif
 3925              		.loc 1 568 10 view .LVU1076
 3926 003e 0360     		str	r3, [r0]
 567:src/xeq.c     **** 	ShowRPN = 1;
 3927              		.loc 1 567 16 view .LVU1077
 3928 0040 3360     		str	r3, [r6]
 568:src/xeq.c     **** #endif
 3929              		.loc 1 568 2 is_stmt 1 view .LVU1078
 570:src/xeq.c     **** }
 3930              		.loc 1 570 2 view .LVU1079
 3931              	.LVL299:
 570:src/xeq.c     **** }
 3932              		.loc 1 570 2 is_stmt 0 view .LVU1080
 3933              	.LBE1588:
 3934              	.LBE1587:
 571:src/xeq.c     **** 
 3935              		.loc 1 571 1 view .LVU1081
 3936 0042 2846     		mov	r0, r5
 3937 0044 70BD     		pop	{r4, r5, r6, pc}
 3938              	.LVL300:
 3939              	.L326:
 571:src/xeq.c     **** 
 3940              		.loc 1 571 1 view .LVU1082
 3941 0046 00BF     		.align	2
 3942              	.L325:
 3943 0048 00000000 		.word	Running
 3944 004c 00000000 		.word	Error
 3945 0050 00000000 		.word	StateWhileOn
 3946 0054 00000000 		.word	JustDisplayed
 3947 0058 00000000 		.word	ShowRPN
 3948              		.cfi_endproc
ARM GAS  /tmp/ccBFDvgN.s 			page 188


 3949              	.LFE29:
 3951              		.section	.text.bad_mode_error,"ax",%progbits
 3952              		.align	1
 3953              		.p2align 2,,3
 3954              		.global	bad_mode_error
 3955              		.syntax unified
 3956              		.thumb
 3957              		.thumb_func
 3958              		.fpu fpv4-sp-d16
 3960              	bad_mode_error:
 3961              	.LFB30:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 3962              		.loc 1 575 27 is_stmt 1 view -0
 3963              		.cfi_startproc
 3964              		@ args = 0, pretend = 0, frame = 0
 3965              		@ frame_needed = 0, uses_anonymous_args = 0
 3966              		@ link register save eliminated.
 576:src/xeq.c     **** }
 3967              		.loc 1 576 2 view .LVU1084
 3968              	.LVL301:
 3969              	.LBB1593:
 3970              	.LBI1593:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3971              		.loc 1 546 5 view .LVU1085
 3972              	.LBB1594:
 547:src/xeq.c     **** 		Error = e;
 3973              		.loc 1 547 2 view .LVU1086
 547:src/xeq.c     **** 		Error = e;
 3974              		.loc 1 547 12 is_stmt 0 view .LVU1087
 3975 0000 024B     		ldr	r3, .L329
 547:src/xeq.c     **** 		Error = e;
 3976              		.loc 1 547 5 view .LVU1088
 3977 0002 1A68     		ldr	r2, [r3]
 3978 0004 0AB9     		cbnz	r2, .L327
 3979              	.LVL302:
 3980              	.LBB1595:
 3981              	.LBI1595:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3982              		.loc 1 546 5 is_stmt 1 view .LVU1089
 3983              	.LBB1596:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3984              		.loc 1 548 3 view .LVU1090
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3985              		.loc 1 548 9 is_stmt 0 view .LVU1091
 3986 0006 0D22     		movs	r2, #13
 3987 0008 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3988              		.loc 1 549 3 is_stmt 1 view .LVU1092
 3989              	.LVL303:
 3990              	.L327:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3991              		.loc 1 549 3 is_stmt 0 view .LVU1093
 3992              	.LBE1596:
 3993              	.LBE1595:
 3994              	.LBE1594:
 3995              	.LBE1593:
 577:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 189


 3996              		.loc 1 577 1 view .LVU1094
 3997 000a 7047     		bx	lr
 3998              	.L330:
 3999              		.align	2
 4000              	.L329:
 4001 000c 00000000 		.word	Error
 4002              		.cfi_endproc
 4003              	.LFE30:
 4005              		.section	.text.cmderr,"ax",%progbits
 4006              		.align	1
 4007              		.p2align 2,,3
 4008              		.global	cmderr
 4009              		.syntax unified
 4010              		.thumb
 4011              		.thumb_func
 4012              		.fpu fpv4-sp-d16
 4014              	cmderr:
 4015              	.LVL304:
 4016              	.LFB31:
 581:src/xeq.c     **** 	report_err(arg);
 4017              		.loc 1 581 45 is_stmt 1 view -0
 4018              		.cfi_startproc
 4019              		@ args = 0, pretend = 0, frame = 0
 4020              		@ frame_needed = 0, uses_anonymous_args = 0
 4021              		@ link register save eliminated.
 582:src/xeq.c     **** }
 4022              		.loc 1 582 2 view .LVU1096
 4023              	.LBB1601:
 4024              	.LBB1602:
 547:src/xeq.c     **** 		Error = e;
 4025              		.loc 1 547 12 is_stmt 0 view .LVU1097
 4026 0000 034A     		ldr	r2, .L336
 547:src/xeq.c     **** 		Error = e;
 4027              		.loc 1 547 5 view .LVU1098
 4028 0002 1168     		ldr	r1, [r2]
 4029              	.LVL305:
 547:src/xeq.c     **** 		Error = e;
 4030              		.loc 1 547 5 view .LVU1099
 4031              	.LBE1602:
 4032              	.LBI1601:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4033              		.loc 1 546 5 is_stmt 1 view .LVU1100
 4034              	.LBB1607:
 547:src/xeq.c     **** 		Error = e;
 4035              		.loc 1 547 2 view .LVU1101
 547:src/xeq.c     **** 		Error = e;
 4036              		.loc 1 547 5 is_stmt 0 view .LVU1102
 4037 0004 09B9     		cbnz	r1, .L331
 4038              	.LVL306:
 4039              	.LBB1603:
 4040              	.LBI1603:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4041              		.loc 1 546 5 is_stmt 1 view .LVU1103
 4042              	.LBB1604:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4043              		.loc 1 548 3 view .LVU1104
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/ccBFDvgN.s 			page 190


 4044              		.loc 1 548 9 is_stmt 0 view .LVU1105
 4045 0006 1060     		str	r0, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4046              		.loc 1 549 3 is_stmt 1 view .LVU1106
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4047              		.loc 1 549 6 is_stmt 0 view .LVU1107
 4048 0008 00B1     		cbz	r0, .L335
 4049              	.LVL307:
 4050              	.L331:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4051              		.loc 1 549 6 view .LVU1108
 4052              	.LBE1604:
 4053              	.LBE1603:
 4054              	.LBE1607:
 4055              	.LBE1601:
 583:src/xeq.c     **** 
 4056              		.loc 1 583 1 view .LVU1109
 4057 000a 7047     		bx	lr
 4058              	.LVL308:
 4059              	.L335:
 4060              	.LBB1609:
 4061              	.LBB1608:
 4062              	.LBB1606:
 4063              	.LBB1605:
 550:src/xeq.c     **** 			return 0;
 4064              		.loc 1 550 4 is_stmt 1 view .LVU1110
 4065 000c FFF7FEBF 		b	error_message
 4066              	.LVL309:
 4067              	.L337:
 550:src/xeq.c     **** 			return 0;
 4068              		.loc 1 550 4 is_stmt 0 view .LVU1111
 4069              		.align	2
 4070              	.L336:
 4071 0010 00000000 		.word	Error
 4072              	.LBE1605:
 4073              	.LBE1606:
 4074              	.LBE1608:
 4075              	.LBE1609:
 4076              		.cfi_endproc
 4077              	.LFE31:
 4079              		.section	.text.cmdmsg,"ax",%progbits
 4080              		.align	1
 4081              		.p2align 2,,3
 4082              		.global	cmdmsg
 4083              		.syntax unified
 4084              		.thumb
 4085              		.thumb_func
 4086              		.fpu fpv4-sp-d16
 4088              	cmdmsg:
 4089              	.LVL310:
 4090              	.LFB32:
 587:src/xeq.c     **** 	error_message(arg);
 4091              		.loc 1 587 45 is_stmt 1 view -0
 4092              		.cfi_startproc
 4093              		@ args = 0, pretend = 0, frame = 0
 4094              		@ frame_needed = 0, uses_anonymous_args = 0
 4095              		@ link register save eliminated.
ARM GAS  /tmp/ccBFDvgN.s 			page 191


 588:src/xeq.c     **** }
 4096              		.loc 1 588 2 view .LVU1113
 4097 0000 FFF7FEBF 		b	error_message
 4098              	.LVL311:
 588:src/xeq.c     **** }
 4099              		.loc 1 588 2 is_stmt 0 view .LVU1114
 4100              		.cfi_endproc
 4101              	.LFE32:
 4103              		.section	.text.rarg_roundingmode,"ax",%progbits
 4104              		.align	1
 4105              		.p2align 2,,3
 4106              		.global	rarg_roundingmode
 4107              		.syntax unified
 4108              		.thumb
 4109              		.thumb_func
 4110              		.fpu fpv4-sp-d16
 4112              	rarg_roundingmode:
 4113              	.LVL312:
 4114              	.LFB35:
 623:src/xeq.c     **** 	UState.rounding_mode = arg;
 4115              		.loc 1 623 56 is_stmt 1 view -0
 4116              		.cfi_startproc
 4117              		@ args = 0, pretend = 0, frame = 0
 4118              		@ frame_needed = 0, uses_anonymous_args = 0
 4119              		@ link register save eliminated.
 624:src/xeq.c     **** }
 4120              		.loc 1 624 2 view .LVU1116
 624:src/xeq.c     **** }
 4121              		.loc 1 624 23 is_stmt 0 view .LVU1117
 4122 0000 044B     		ldr	r3, .L340
 4123 0002 1B68     		ldr	r3, [r3]
 4124 0004 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 4125 0008 60F30612 		bfi	r2, r0, #4, #3
 4126              	.LVL313:
 624:src/xeq.c     **** }
 4127              		.loc 1 624 23 view .LVU1118
 4128 000c 83F8EB27 		strb	r2, [r3, #2027]
 625:src/xeq.c     **** 
 4129              		.loc 1 625 1 view .LVU1119
 4130 0010 7047     		bx	lr
 4131              	.L341:
 4132 0012 00BF     		.align	2
 4133              	.L340:
 4134 0014 00000000 		.word	main_ram
 4135              		.cfi_endproc
 4136              	.LFE35:
 4138              		.section	.text.packed_from_number,"ax",%progbits
 4139              		.align	1
 4140              		.p2align 2,,3
 4141              		.global	packed_from_number
 4142              		.syntax unified
 4143              		.thumb
 4144              		.thumb_func
 4145              		.fpu fpv4-sp-d16
 4147              	packed_from_number:
 4148              	.LVL314:
 4149              	.LFB36:
ARM GAS  /tmp/ccBFDvgN.s 			page 192


 631:src/xeq.c     **** 	decContext ctx64;
 4150              		.loc 1 631 59 is_stmt 1 view -0
 4151              		.cfi_startproc
 4152              		@ args = 0, pretend = 0, frame = 24
 4153              		@ frame_needed = 0, uses_anonymous_args = 0
 632:src/xeq.c     **** 
 4154              		.loc 1 632 2 view .LVU1121
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4155              		.loc 1 634 2 view .LVU1122
 631:src/xeq.c     **** 	decContext ctx64;
 4156              		.loc 1 631 59 is_stmt 0 view .LVU1123
 4157 0000 70B5     		push	{r4, r5, r6, lr}
 4158              		.cfi_def_cfa_offset 16
 4159              		.cfi_offset 4, -16
 4160              		.cfi_offset 5, -12
 4161              		.cfi_offset 6, -8
 4162              		.cfi_offset 14, -4
 4163 0002 86B0     		sub	sp, sp, #24
 4164              		.cfi_def_cfa_offset 40
 631:src/xeq.c     **** 	decContext ctx64;
 4165              		.loc 1 631 59 view .LVU1124
 4166 0004 0446     		mov	r4, r0
 4167 0006 0D46     		mov	r5, r1
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4168              		.loc 1 634 2 view .LVU1125
 4169 0008 6846     		mov	r0, sp
 4170              	.LVL315:
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4171              		.loc 1 634 2 view .LVU1126
 4172 000a 4021     		movs	r1, #64
 4173              	.LVL316:
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4174              		.loc 1 634 2 view .LVU1127
 4175 000c FFF7FEFF 		bl	decContextDefault
 4176              	.LVL317:
 635:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4177              		.loc 1 635 2 is_stmt 1 view .LVU1128
 4178              	.LBB1610:
 4179              	.LBI1610:
 610:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4180              		.loc 1 610 22 view .LVU1129
 4181              	.LBB1611:
 611:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4182              		.loc 1 611 2 view .LVU1130
 616:src/xeq.c     **** }
 4183              		.loc 1 616 2 view .LVU1131
 616:src/xeq.c     **** }
 4184              		.loc 1 616 37 is_stmt 0 view .LVU1132
 4185 0010 084B     		ldr	r3, .L344
 616:src/xeq.c     **** }
 4186              		.loc 1 616 9 view .LVU1133
 4187 0012 094E     		ldr	r6, .L344+4
 616:src/xeq.c     **** }
 4188              		.loc 1 616 37 view .LVU1134
 4189 0014 1B68     		ldr	r3, [r3]
 4190 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4191 001a C3F30213 		ubfx	r3, r3, #4, #3
ARM GAS  /tmp/ccBFDvgN.s 			page 193


 4192              	.LBE1611:
 4193              	.LBE1610:
 636:src/xeq.c     **** }
 4194              		.loc 1 636 2 view .LVU1135
 4195 001e 2946     		mov	r1, r5
 635:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4196              		.loc 1 635 14 view .LVU1136
 4197 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4198 0022 8DF80C30 		strb	r3, [sp, #12]
 636:src/xeq.c     **** }
 4199              		.loc 1 636 2 is_stmt 1 view .LVU1137
 4200 0026 2046     		mov	r0, r4
 4201 0028 6A46     		mov	r2, sp
 4202 002a FFF7FEFF 		bl	decimal64FromNumber
 4203              	.LVL318:
 637:src/xeq.c     **** 
 4204              		.loc 1 637 1 is_stmt 0 view .LVU1138
 4205 002e 06B0     		add	sp, sp, #24
 4206              		.cfi_def_cfa_offset 16
 4207              		@ sp needed
 4208 0030 70BD     		pop	{r4, r5, r6, pc}
 4209              	.LVL319:
 4210              	.L345:
 637:src/xeq.c     **** 
 4211              		.loc 1 637 1 view .LVU1139
 4212 0032 00BF     		.align	2
 4213              	.L344:
 4214 0034 00000000 		.word	main_ram
 4215 0038 00000000 		.word	.LANCHOR1
 4216              		.cfi_endproc
 4217              	.LFE36:
 4219              		.section	.text.packed128_from_number,"ax",%progbits
 4220              		.align	1
 4221              		.p2align 2,,3
 4222              		.global	packed128_from_number
 4223              		.syntax unified
 4224              		.thumb
 4225              		.thumb_func
 4226              		.fpu fpv4-sp-d16
 4228              	packed128_from_number:
 4229              	.LVL320:
 4230              	.LFB37:
 639:src/xeq.c     **** 	decContext ctx128;
 4231              		.loc 1 639 63 is_stmt 1 view -0
 4232              		.cfi_startproc
 4233              		@ args = 0, pretend = 0, frame = 24
 4234              		@ frame_needed = 0, uses_anonymous_args = 0
 640:src/xeq.c     **** 
 4235              		.loc 1 640 2 view .LVU1141
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4236              		.loc 1 642 2 view .LVU1142
 639:src/xeq.c     **** 	decContext ctx128;
 4237              		.loc 1 639 63 is_stmt 0 view .LVU1143
 4238 0000 70B5     		push	{r4, r5, r6, lr}
 4239              		.cfi_def_cfa_offset 16
 4240              		.cfi_offset 4, -16
 4241              		.cfi_offset 5, -12
ARM GAS  /tmp/ccBFDvgN.s 			page 194


 4242              		.cfi_offset 6, -8
 4243              		.cfi_offset 14, -4
 4244 0002 86B0     		sub	sp, sp, #24
 4245              		.cfi_def_cfa_offset 40
 639:src/xeq.c     **** 	decContext ctx128;
 4246              		.loc 1 639 63 view .LVU1144
 4247 0004 0446     		mov	r4, r0
 4248 0006 0D46     		mov	r5, r1
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4249              		.loc 1 642 2 view .LVU1145
 4250 0008 6846     		mov	r0, sp
 4251              	.LVL321:
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4252              		.loc 1 642 2 view .LVU1146
 4253 000a 8021     		movs	r1, #128
 4254              	.LVL322:
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4255              		.loc 1 642 2 view .LVU1147
 4256 000c FFF7FEFF 		bl	decContextDefault
 4257              	.LVL323:
 643:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4258              		.loc 1 643 2 is_stmt 1 view .LVU1148
 4259              	.LBB1612:
 4260              	.LBI1612:
 610:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4261              		.loc 1 610 22 view .LVU1149
 4262              	.LBB1613:
 611:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4263              		.loc 1 611 2 view .LVU1150
 616:src/xeq.c     **** }
 4264              		.loc 1 616 2 view .LVU1151
 616:src/xeq.c     **** }
 4265              		.loc 1 616 37 is_stmt 0 view .LVU1152
 4266 0010 084B     		ldr	r3, .L348
 616:src/xeq.c     **** }
 4267              		.loc 1 616 9 view .LVU1153
 4268 0012 094E     		ldr	r6, .L348+4
 616:src/xeq.c     **** }
 4269              		.loc 1 616 37 view .LVU1154
 4270 0014 1B68     		ldr	r3, [r3]
 4271 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4272 001a C3F30213 		ubfx	r3, r3, #4, #3
 4273              	.LBE1613:
 4274              	.LBE1612:
 644:src/xeq.c     **** }
 4275              		.loc 1 644 2 view .LVU1155
 4276 001e 2946     		mov	r1, r5
 643:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4277              		.loc 1 643 15 view .LVU1156
 4278 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4279 0022 8DF80C30 		strb	r3, [sp, #12]
 644:src/xeq.c     **** }
 4280              		.loc 1 644 2 is_stmt 1 view .LVU1157
 4281 0026 2046     		mov	r0, r4
 4282 0028 6A46     		mov	r2, sp
 4283 002a FFF7FEFF 		bl	decimal128FromNumber
 4284              	.LVL324:
ARM GAS  /tmp/ccBFDvgN.s 			page 195


 645:src/xeq.c     **** 
 4285              		.loc 1 645 1 is_stmt 0 view .LVU1158
 4286 002e 06B0     		add	sp, sp, #24
 4287              		.cfi_def_cfa_offset 16
 4288              		@ sp needed
 4289 0030 70BD     		pop	{r4, r5, r6, pc}
 4290              	.LVL325:
 4291              	.L349:
 645:src/xeq.c     **** 
 4292              		.loc 1 645 1 view .LVU1159
 4293 0032 00BF     		.align	2
 4294              	.L348:
 4295 0034 00000000 		.word	main_ram
 4296 0038 00000000 		.word	.LANCHOR1
 4297              		.cfi_endproc
 4298              	.LFE37:
 4300              		.section	.text.check_special,"ax",%progbits
 4301              		.align	1
 4302              		.p2align 2,,3
 4303              		.syntax unified
 4304              		.thumb
 4305              		.thumb_func
 4306              		.fpu fpv4-sp-d16
 4308              	check_special:
 4309              	.LVL326:
 4310              	.LFB41:
 684:src/xeq.c     **** 	decNumber y;
 4311              		.loc 1 684 46 is_stmt 1 view -0
 4312              		.cfi_startproc
 4313              		@ args = 0, pretend = 0, frame = 64
 4314              		@ frame_needed = 0, uses_anonymous_args = 0
 685:src/xeq.c     **** 	decimal64 z;
 4315              		.loc 1 685 2 view .LVU1161
 686:src/xeq.c     **** 	decimal128 d;
 4316              		.loc 1 686 2 view .LVU1162
 687:src/xeq.c     **** 	if (is_dblmode()) {
 4317              		.loc 1 687 2 view .LVU1163
 688:src/xeq.c     **** 		packed128_from_number(&d, x);
 4318              		.loc 1 688 2 view .LVU1164
 4319              	.LBB1630:
 4320              	.LBI1630:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4321              		.loc 1 1118 5 view .LVU1165
 4322              	.LBB1631:
1119:src/xeq.c     **** }
 4323              		.loc 1 1119 2 view .LVU1166
1119:src/xeq.c     **** }
 4324              		.loc 1 1119 24 is_stmt 0 view .LVU1167
 4325 0000 274B     		ldr	r3, .L364
 4326 0002 1B68     		ldr	r3, [r3]
 4327              	.LBE1631:
 4328              	.LBE1630:
 684:src/xeq.c     **** 	decNumber y;
 4329              		.loc 1 684 46 view .LVU1168
 4330 0004 00B5     		push	{lr}
 4331              		.cfi_def_cfa_offset 4
 4332              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBFDvgN.s 			page 196


 4333              	.LBB1633:
 4334              	.LBB1632:
1119:src/xeq.c     **** }
 4335              		.loc 1 1119 24 view .LVU1169
 4336 0006 B3F8E827 		ldrh	r2, [r3, #2024]
 4337 000a 44F20103 		movw	r3, #16385
 4338              	.LBE1632:
 4339              	.LBE1633:
 688:src/xeq.c     **** 		packed128_from_number(&d, x);
 4340              		.loc 1 688 5 view .LVU1170
 4341 000e 1340     		ands	r3, r3, r2
 4342 0010 B3F5804F 		cmp	r3, #16384
 684:src/xeq.c     **** 	decNumber y;
 4343              		.loc 1 684 46 view .LVU1171
 4344 0014 91B0     		sub	sp, sp, #68
 4345              		.cfi_def_cfa_offset 72
 684:src/xeq.c     **** 	decNumber y;
 4346              		.loc 1 684 46 view .LVU1172
 4347 0016 0146     		mov	r1, r0
 688:src/xeq.c     **** 		packed128_from_number(&d, x);
 4348              		.loc 1 688 5 view .LVU1173
 4349 0018 0FD0     		beq	.L362
 694:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4350              		.loc 1 694 3 is_stmt 1 view .LVU1174
 4351 001a 01A8     		add	r0, sp, #4
 4352              	.LVL327:
 694:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4353              		.loc 1 694 3 is_stmt 0 view .LVU1175
 4354 001c FFF7FEFF 		bl	packed_from_number
 4355              	.LVL328:
 695:src/xeq.c     **** 	}
 4356              		.loc 1 695 3 is_stmt 1 view .LVU1176
 4357 0020 01A8     		add	r0, sp, #4
 4358 0022 07A9     		add	r1, sp, #28
 4359 0024 FFF7FEFF 		bl	decimal64ToNumber
 4360              	.LVL329:
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4361              		.loc 1 697 2 view .LVU1177
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4362              		.loc 1 697 5 is_stmt 0 view .LVU1178
 4363 0028 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4364 002c 13F0700F 		tst	r3, #112
 4365 0030 0FD1     		bne	.L353
 4366              	.L355:
 708:src/xeq.c     **** }
 4367              		.loc 1 708 9 view .LVU1179
 4368 0032 0020     		movs	r0, #0
 4369              	.L350:
 709:src/xeq.c     **** 
 4370              		.loc 1 709 1 view .LVU1180
 4371 0034 11B0     		add	sp, sp, #68
 4372              		.cfi_remember_state
 4373              		.cfi_def_cfa_offset 4
 4374              		@ sp needed
 4375 0036 5DF804FB 		ldr	pc, [sp], #4
 4376              	.LVL330:
 4377              	.L362:
ARM GAS  /tmp/ccBFDvgN.s 			page 197


 4378              		.cfi_restore_state
 689:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4379              		.loc 1 689 3 is_stmt 1 view .LVU1181
 4380 003a 03A8     		add	r0, sp, #12
 4381              	.LVL331:
 689:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4382              		.loc 1 689 3 is_stmt 0 view .LVU1182
 4383 003c FFF7FEFF 		bl	packed128_from_number
 4384              	.LVL332:
 690:src/xeq.c     **** 	}
 4385              		.loc 1 690 3 is_stmt 1 view .LVU1183
 4386 0040 03A8     		add	r0, sp, #12
 4387 0042 07A9     		add	r1, sp, #28
 4388 0044 FFF7FEFF 		bl	decimal128ToNumber
 4389              	.LVL333:
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4390              		.loc 1 697 2 view .LVU1184
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4391              		.loc 1 697 5 is_stmt 0 view .LVU1185
 4392 0048 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4393 004c 13F0700F 		tst	r3, #112
 4394 0050 EFD0     		beq	.L355
 4395              	.L353:
 698:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4396              		.loc 1 698 3 is_stmt 1 view .LVU1186
 4397              	.LVL334:
 4398              	.LBB1634:
 4399              	.LBI1634:
3556:src/xeq.c     **** 	unsigned short mask;
 4400              		.loc 1 3556 5 view .LVU1187
 4401              	.LBB1635:
3557:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 4402              		.loc 1 3557 2 view .LVU1188
3558:src/xeq.c     **** 
 4403              		.loc 1 3558 2 view .LVU1189
3558:src/xeq.c     **** 
 4404              		.loc 1 3558 34 is_stmt 0 view .LVU1190
 4405 0052 0DF10201 		add	r1, sp, #2
 4406 0056 6B20     		movs	r0, #107
 4407 0058 FFF7FEFF 		bl	flag_word
 4408              	.LVL335:
3560:src/xeq.c     **** }
 4409              		.loc 1 3560 2 is_stmt 1 view .LVU1191
3560:src/xeq.c     **** }
 4410              		.loc 1 3560 24 is_stmt 0 view .LVU1192
 4411 005c BDF80230 		ldrh	r3, [sp, #2]
 4412 0060 0288     		ldrh	r2, [r0]
 4413              	.LBE1635:
 4414              	.LBE1634:
 698:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4415              		.loc 1 698 6 view .LVU1193
 4416 0062 1A42     		tst	r2, r3
 4417 0064 E5D1     		bne	.L355
 699:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4418              		.loc 1 699 4 is_stmt 1 view .LVU1194
 699:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4419              		.loc 1 699 8 is_stmt 0 view .LVU1195
ARM GAS  /tmp/ccBFDvgN.s 			page 198


 4420 0066 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 699:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4421              		.loc 1 699 7 view .LVU1196
 4422 006a 13F0300F 		tst	r3, #48
 4423 006e 06D0     		beq	.L356
 700:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 4424              		.loc 1 700 5 is_stmt 1 view .LVU1197
 4425              	.LVL336:
 4426              	.LBB1636:
 4427              	.LBI1636:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4428              		.loc 1 546 5 view .LVU1198
 4429              	.LBB1637:
 547:src/xeq.c     **** 		Error = e;
 4430              		.loc 1 547 2 view .LVU1199
 547:src/xeq.c     **** 		Error = e;
 4431              		.loc 1 547 12 is_stmt 0 view .LVU1200
 4432 0070 0C4B     		ldr	r3, .L364+4
 547:src/xeq.c     **** 		Error = e;
 4433              		.loc 1 547 5 view .LVU1201
 4434 0072 1A68     		ldr	r2, [r3]
 4435              	.LBB1638:
 4436              	.LBB1639:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4437              		.loc 1 548 9 view .LVU1202
 4438 0074 0120     		movs	r0, #1
 4439              	.LBE1639:
 4440              	.LBE1638:
 547:src/xeq.c     **** 		Error = e;
 4441              		.loc 1 547 5 view .LVU1203
 4442 0076 002A     		cmp	r2, #0
 4443 0078 DCD1     		bne	.L350
 4444              	.LVL337:
 4445              	.LBB1641:
 4446              	.LBI1638:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4447              		.loc 1 546 5 is_stmt 1 view .LVU1204
 4448              	.LBB1640:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4449              		.loc 1 548 3 view .LVU1205
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4450              		.loc 1 548 9 is_stmt 0 view .LVU1206
 4451 007a 1860     		str	r0, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4452              		.loc 1 549 3 is_stmt 1 view .LVU1207
 4453 007c DAE7     		b	.L350
 4454              	.LVL338:
 4455              	.L356:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4456              		.loc 1 549 3 is_stmt 0 view .LVU1208
 4457              	.LBE1640:
 4458              	.LBE1641:
 4459              	.LBE1637:
 4460              	.LBE1636:
 701:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4461              		.loc 1 701 9 is_stmt 1 view .LVU1209
 701:src/xeq.c     **** 				report_err(ERR_MINFINITY);
ARM GAS  /tmp/ccBFDvgN.s 			page 199


 4462              		.loc 1 701 12 is_stmt 0 view .LVU1210
 4463 007e 13F0800F 		tst	r3, #128
 4464              	.LBB1642:
 4465              	.LBB1643:
 547:src/xeq.c     **** 		Error = e;
 4466              		.loc 1 547 12 view .LVU1211
 4467 0082 084B     		ldr	r3, .L364+4
 547:src/xeq.c     **** 		Error = e;
 4468              		.loc 1 547 5 view .LVU1212
 4469 0084 1A68     		ldr	r2, [r3]
 4470              	.LBE1643:
 4471              	.LBE1642:
 701:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4472              		.loc 1 701 12 view .LVU1213
 4473 0086 04D1     		bne	.L363
 704:src/xeq.c     **** 			return 1;
 4474              		.loc 1 704 5 is_stmt 1 view .LVU1214
 4475              	.LVL339:
 4476              	.LBB1647:
 4477              	.LBI1647:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4478              		.loc 1 546 5 view .LVU1215
 4479              	.LBB1648:
 547:src/xeq.c     **** 		Error = e;
 4480              		.loc 1 547 2 view .LVU1216
 547:src/xeq.c     **** 		Error = e;
 4481              		.loc 1 547 5 is_stmt 0 view .LVU1217
 4482 0088 42B9     		cbnz	r2, .L360
 4483              	.LVL340:
 4484              	.LBB1649:
 4485              	.LBI1649:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4486              		.loc 1 546 5 is_stmt 1 view .LVU1218
 4487              	.LBB1650:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4488              		.loc 1 548 3 view .LVU1219
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4489              		.loc 1 548 9 is_stmt 0 view .LVU1220
 4490 008a 0422     		movs	r2, #4
 4491 008c 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4492              		.loc 1 549 3 is_stmt 1 view .LVU1221
 4493              	.LBE1650:
 4494              	.LBE1649:
 4495              	.LBE1648:
 4496              	.LBE1647:
 705:src/xeq.c     **** 		}
 4497              		.loc 1 705 11 is_stmt 0 view .LVU1222
 4498 008e 0120     		movs	r0, #1
 4499 0090 D0E7     		b	.L350
 4500              	.LVL341:
 4501              	.L363:
 702:src/xeq.c     **** 			else
 4502              		.loc 1 702 5 is_stmt 1 view .LVU1223
 4503              	.LBB1651:
 4504              	.LBI1642:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/ccBFDvgN.s 			page 200


 4505              		.loc 1 546 5 view .LVU1224
 4506              	.LBB1646:
 547:src/xeq.c     **** 		Error = e;
 4507              		.loc 1 547 2 view .LVU1225
 547:src/xeq.c     **** 		Error = e;
 4508              		.loc 1 547 5 is_stmt 0 view .LVU1226
 4509 0092 1AB9     		cbnz	r2, .L360
 4510              	.LVL342:
 4511              	.LBB1644:
 4512              	.LBI1644:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4513              		.loc 1 546 5 is_stmt 1 view .LVU1227
 4514              	.LBB1645:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4515              		.loc 1 548 3 view .LVU1228
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4516              		.loc 1 548 9 is_stmt 0 view .LVU1229
 4517 0094 0522     		movs	r2, #5
 4518 0096 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4519              		.loc 1 549 3 is_stmt 1 view .LVU1230
 4520              	.LBE1645:
 4521              	.LBE1644:
 4522              	.LBE1646:
 4523              	.LBE1651:
 705:src/xeq.c     **** 		}
 4524              		.loc 1 705 11 is_stmt 0 view .LVU1231
 4525 0098 0120     		movs	r0, #1
 4526 009a CBE7     		b	.L350
 4527              	.LVL343:
 4528              	.L360:
 705:src/xeq.c     **** 		}
 4529              		.loc 1 705 11 view .LVU1232
 4530 009c 0120     		movs	r0, #1
 4531 009e C9E7     		b	.L350
 4532              	.L365:
 4533              		.align	2
 4534              	.L364:
 4535 00a0 00000000 		.word	main_ram
 4536 00a4 00000000 		.word	Error
 4537              		.cfi_endproc
 4538              	.LFE41:
 4540              		.section	.text.packed_from_packed128,"ax",%progbits
 4541              		.align	1
 4542              		.p2align 2,,3
 4543              		.global	packed_from_packed128
 4544              		.syntax unified
 4545              		.thumb
 4546              		.thumb_func
 4547              		.fpu fpv4-sp-d16
 4549              	packed_from_packed128:
 4550              	.LVL344:
 4551              	.LFB38:
 648:src/xeq.c     **** 	decNumber temp;
 4552              		.loc 1 648 63 is_stmt 1 view -0
 4553              		.cfi_startproc
 4554              		@ args = 0, pretend = 0, frame = 40
ARM GAS  /tmp/ccBFDvgN.s 			page 201


 4555              		@ frame_needed = 0, uses_anonymous_args = 0
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 4556              		.loc 1 649 2 view .LVU1234
 650:src/xeq.c     **** }
 4557              		.loc 1 650 2 view .LVU1235
 648:src/xeq.c     **** 	decNumber temp;
 4558              		.loc 1 648 63 is_stmt 0 view .LVU1236
 4559 0000 10B5     		push	{r4, lr}
 4560              		.cfi_def_cfa_offset 8
 4561              		.cfi_offset 4, -8
 4562              		.cfi_offset 14, -4
 4563 0002 8AB0     		sub	sp, sp, #40
 4564              		.cfi_def_cfa_offset 48
 648:src/xeq.c     **** 	decNumber temp;
 4565              		.loc 1 648 63 view .LVU1237
 4566 0004 0446     		mov	r4, r0
 650:src/xeq.c     **** }
 4567              		.loc 1 650 24 view .LVU1238
 4568 0006 0846     		mov	r0, r1
 4569              	.LVL345:
 650:src/xeq.c     **** }
 4570              		.loc 1 650 24 view .LVU1239
 4571 0008 01A9     		add	r1, sp, #4
 4572              	.LVL346:
 650:src/xeq.c     **** }
 4573              		.loc 1 650 24 view .LVU1240
 4574 000a FFF7FEFF 		bl	decimal128ToNumber
 4575              	.LVL347:
 650:src/xeq.c     **** }
 4576              		.loc 1 650 24 view .LVU1241
 4577 000e 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 4578              		.loc 1 650 2 view .LVU1242
 4579 0010 2046     		mov	r0, r4
 4580 0012 FFF7FEFF 		bl	packed_from_number
 4581              	.LVL348:
 651:src/xeq.c     **** 
 4582              		.loc 1 651 1 view .LVU1243
 4583 0016 0AB0     		add	sp, sp, #40
 4584              		.cfi_def_cfa_offset 8
 4585              		@ sp needed
 4586 0018 10BD     		pop	{r4, pc}
 651:src/xeq.c     **** 
 4587              		.loc 1 651 1 view .LVU1244
 4588              		.cfi_endproc
 4589              	.LFE38:
 4591 001a 00BF     		.section	.text.packed128_from_packed,"ax",%progbits
 4592              		.align	1
 4593              		.p2align 2,,3
 4594              		.global	packed128_from_packed
 4595              		.syntax unified
 4596              		.thumb
 4597              		.thumb_func
 4598              		.fpu fpv4-sp-d16
 4600              	packed128_from_packed:
 4601              	.LVL349:
 4602              	.LFB39:
ARM GAS  /tmp/ccBFDvgN.s 			page 202


 654:src/xeq.c     **** 	decNumber temp;
 4603              		.loc 1 654 63 is_stmt 1 view -0
 4604              		.cfi_startproc
 4605              		@ args = 0, pretend = 0, frame = 40
 4606              		@ frame_needed = 0, uses_anonymous_args = 0
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 4607              		.loc 1 655 2 view .LVU1246
 656:src/xeq.c     **** }
 4608              		.loc 1 656 2 view .LVU1247
 654:src/xeq.c     **** 	decNumber temp;
 4609              		.loc 1 654 63 is_stmt 0 view .LVU1248
 4610 0000 10B5     		push	{r4, lr}
 4611              		.cfi_def_cfa_offset 8
 4612              		.cfi_offset 4, -8
 4613              		.cfi_offset 14, -4
 4614 0002 8AB0     		sub	sp, sp, #40
 4615              		.cfi_def_cfa_offset 48
 654:src/xeq.c     **** 	decNumber temp;
 4616              		.loc 1 654 63 view .LVU1249
 4617 0004 0446     		mov	r4, r0
 656:src/xeq.c     **** }
 4618              		.loc 1 656 27 view .LVU1250
 4619 0006 0846     		mov	r0, r1
 4620              	.LVL350:
 656:src/xeq.c     **** }
 4621              		.loc 1 656 27 view .LVU1251
 4622 0008 01A9     		add	r1, sp, #4
 4623              	.LVL351:
 656:src/xeq.c     **** }
 4624              		.loc 1 656 27 view .LVU1252
 4625 000a FFF7FEFF 		bl	decimal64ToNumber
 4626              	.LVL352:
 656:src/xeq.c     **** }
 4627              		.loc 1 656 27 view .LVU1253
 4628 000e 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 4629              		.loc 1 656 2 view .LVU1254
 4630 0010 2046     		mov	r0, r4
 4631 0012 FFF7FEFF 		bl	packed128_from_number
 4632              	.LVL353:
 657:src/xeq.c     **** 
 4633              		.loc 1 657 1 view .LVU1255
 4634 0016 0AB0     		add	sp, sp, #40
 4635              		.cfi_def_cfa_offset 8
 4636              		@ sp needed
 4637 0018 10BD     		pop	{r4, pc}
 657:src/xeq.c     **** 
 4638              		.loc 1 657 1 view .LVU1256
 4639              		.cfi_endproc
 4640              	.LFE39:
 4642 001a 00BF     		.section	.text.stack_size,"ax",%progbits
 4643              		.align	1
 4644              		.p2align 2,,3
 4645              		.global	stack_size
 4646              		.syntax unified
 4647              		.thumb
 4648              		.thumb_func
ARM GAS  /tmp/ccBFDvgN.s 			page 203


 4649              		.fpu fpv4-sp-d16
 4651              	stack_size:
 4652              	.LFB42:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 4653              		.loc 1 712 22 is_stmt 1 view -0
 4654              		.cfi_startproc
 4655              		@ args = 0, pretend = 0, frame = 0
 4656              		@ frame_needed = 0, uses_anonymous_args = 0
 4657              		@ link register save eliminated.
 713:src/xeq.c     **** 		return 4;
 4658              		.loc 1 713 2 view .LVU1258
 713:src/xeq.c     **** 		return 4;
 4659              		.loc 1 713 8 is_stmt 0 view .LVU1259
 4660 0000 0B4B     		ldr	r3, .L376
 4661 0002 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 4662              		.loc 1 713 6 view .LVU1260
 4663 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 4664              		.loc 1 713 5 view .LVU1261
 4665 0008 1207     		lsls	r2, r2, #28
 4666 000a 0ED5     		bpl	.L372
 4667              	.LBB1652:
 4668              	.LBI1652:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 4669              		.loc 1 185 5 is_stmt 1 view .LVU1262
 4670              	.LBB1653:
 186:src/xeq.c     **** }
 4671              		.loc 1 186 2 view .LVU1263
 186:src/xeq.c     **** }
 4672              		.loc 1 186 9 is_stmt 0 view .LVU1264
 4673 000c B3F8E037 		ldrh	r3, [r3, #2016]
 4674              	.LBE1653:
 4675              	.LBE1652:
 713:src/xeq.c     **** 		return 4;
 4676              		.loc 1 713 27 view .LVU1265
 4677 0010 9B0B     		lsrs	r3, r3, #14
 4678 0012 032B     		cmp	r3, #3
 4679 0014 01D0     		beq	.L375
 715:src/xeq.c     **** }
 4680              		.loc 1 715 9 view .LVU1266
 4681 0016 0820     		movs	r0, #8
 716:src/xeq.c     **** 
 4682              		.loc 1 716 1 view .LVU1267
 4683 0018 7047     		bx	lr
 4684              	.L375:
 713:src/xeq.c     **** 		return 4;
 4685              		.loc 1 713 44 discriminator 2 view .LVU1268
 4686 001a 064B     		ldr	r3, .L376+4
 713:src/xeq.c     **** 		return 4;
 4687              		.loc 1 713 41 discriminator 2 view .LVU1269
 4688 001c 93F90130 		ldrsb	r3, [r3, #1]
 4689 0020 002B     		cmp	r3, #0
 714:src/xeq.c     **** 	return 8;
 4690              		.loc 1 714 10 discriminator 2 view .LVU1270
 4691 0022 B4BF     		ite	lt
 4692 0024 0820     		movlt	r0, #8
ARM GAS  /tmp/ccBFDvgN.s 			page 204


 4693 0026 0420     		movge	r0, #4
 4694 0028 7047     		bx	lr
 4695              	.L372:
 714:src/xeq.c     **** 	return 8;
 4696              		.loc 1 714 10 view .LVU1271
 4697 002a 0420     		movs	r0, #4
 4698 002c 7047     		bx	lr
 4699              	.L377:
 4700 002e 00BF     		.align	2
 4701              	.L376:
 4702 0030 00000000 		.word	main_ram
 4703 0034 00000000 		.word	XromParams
 4704              		.cfi_endproc
 4705              	.LFE42:
 4707              		.section	.text.copyreg,"ax",%progbits
 4708              		.align	1
 4709              		.p2align 2,,3
 4710              		.global	copyreg
 4711              		.syntax unified
 4712              		.thumb
 4713              		.thumb_func
 4714              		.fpu fpv4-sp-d16
 4716              	copyreg:
 4717              	.LVL354:
 4718              	.LFB45:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 4719              		.loc 1 726 46 is_stmt 1 view -0
 4720              		.cfi_startproc
 4721              		@ args = 0, pretend = 0, frame = 0
 4722              		@ frame_needed = 0, uses_anonymous_args = 0
 4723              		@ link register save eliminated.
 727:src/xeq.c     **** }
 4724              		.loc 1 727 2 view .LVU1273
 4725              	.LBB1654:
 4726              	.LBI1654:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4727              		.loc 1 1118 5 view .LVU1274
 4728              	.LBB1655:
1119:src/xeq.c     **** }
 4729              		.loc 1 1119 2 view .LVU1275
1119:src/xeq.c     **** }
 4730              		.loc 1 1119 24 is_stmt 0 view .LVU1276
 4731 0000 064B     		ldr	r3, .L381
 4732 0002 1B68     		ldr	r3, [r3]
 4733 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 4734 0008 44F20103 		movw	r3, #16385
 4735              	.LBE1655:
 4736              	.LBE1654:
 727:src/xeq.c     **** }
 4737              		.loc 1 727 2 view .LVU1277
 4738 000c 1340     		ands	r3, r3, r2
 4739 000e B3F5804F 		cmp	r3, #16384
 4740 0012 0CBF     		ite	eq
 4741 0014 1022     		moveq	r2, #16
 4742 0016 0822     		movne	r2, #8
 4743 0018 FFF7FEBF 		b	xcopy
 4744              	.LVL355:
ARM GAS  /tmp/ccBFDvgN.s 			page 205


 4745              	.L382:
 727:src/xeq.c     **** }
 4746              		.loc 1 727 2 view .LVU1278
 4747              		.align	2
 4748              	.L381:
 4749 001c 00000000 		.word	main_ram
 4750              		.cfi_endproc
 4751              	.LFE45:
 4753              		.section	.text.set_lift,"ax",%progbits
 4754              		.align	1
 4755              		.p2align 2,,3
 4756              		.global	set_lift
 4757              		.syntax unified
 4758              		.thumb
 4759              		.thumb_func
 4760              		.fpu fpv4-sp-d16
 4762              	set_lift:
 4763              	.LFB51:
 767:src/xeq.c     ****     State2.state_lift = 1;
 4764              		.loc 1 767 21 is_stmt 1 view -0
 4765              		.cfi_startproc
 4766              		@ args = 0, pretend = 0, frame = 0
 4767              		@ frame_needed = 0, uses_anonymous_args = 0
 4768              		@ link register save eliminated.
 768:src/xeq.c     **** }
 4769              		.loc 1 768 5 view .LVU1280
 768:src/xeq.c     **** }
 4770              		.loc 1 768 23 is_stmt 0 view .LVU1281
 4771 0000 024A     		ldr	r2, .L384
 4772 0002 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 4773 0004 43F04003 		orr	r3, r3, #64
 4774 0008 D375     		strb	r3, [r2, #23]
 769:src/xeq.c     **** 
 4775              		.loc 1 769 1 view .LVU1282
 4776 000a 7047     		bx	lr
 4777              	.L385:
 4778              		.align	2
 4779              	.L384:
 4780 000c 00000000 		.word	StateWhileOn
 4781              		.cfi_endproc
 4782              	.LFE51:
 4784              		.section	.text.entry_rpn_on_off,"ax",%progbits
 4785              		.align	1
 4786              		.p2align 2,,3
 4787              		.global	entry_rpn_on_off
 4788              		.syntax unified
 4789              		.thumb
 4790              		.thumb_func
 4791              		.fpu fpv4-sp-d16
 4793              	entry_rpn_on_off:
 4794              	.LVL356:
 4795              	.LFB77:
 998:src/xeq.c     ****   switch (op) {
 4796              		.loc 1 998 38 is_stmt 1 view -0
 4797              		.cfi_startproc
 4798              		@ args = 0, pretend = 0, frame = 0
 4799              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBFDvgN.s 			page 206


 4800              		@ link register save eliminated.
 999:src/xeq.c     ****   case OP_ENTRY_ON:
 4801              		.loc 1 999 3 view .LVU1284
 4802 0000 CD28     		cmp	r0, #205
 4803 0002 0BD0     		beq	.L387
 4804 0004 CE28     		cmp	r0, #206
 4805 0006 08D1     		bne	.L390
1004:src/xeq.c     ****     return;
 4806              		.loc 1 1004 5 view .LVU1285
 4807 0008 094B     		ldr	r3, .L391
 4808 000a 1B68     		ldr	r3, [r3]
 4809 000c 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 4810 0010 6FF34102 		bfc	r2, #1, #1
 4811 0014 83F8AD27 		strb	r2, [r3, #1965]
1005:src/xeq.c     ****   default:;
 4812              		.loc 1 1005 5 view .LVU1286
1006:src/xeq.c     ****   }
 4813              		.loc 1 1006 11 view .LVU1287
1008:src/xeq.c     **** #endif
 4814              		.loc 1 1008 1 is_stmt 0 view .LVU1288
 4815 0018 7047     		bx	lr
 4816              	.L390:
 4817 001a 7047     		bx	lr
 4818              	.L387:
1001:src/xeq.c     ****     return;
 4819              		.loc 1 1001 5 is_stmt 1 view .LVU1289
 4820 001c 044B     		ldr	r3, .L391
 4821 001e 1A68     		ldr	r2, [r3]
 4822 0020 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 4823 0024 43F00203 		orr	r3, r3, #2
 4824 0028 82F8AD37 		strb	r3, [r2, #1965]
1002:src/xeq.c     ****   case OP_ENTRY_OFF:
 4825              		.loc 1 1002 5 view .LVU1290
 4826 002c 7047     		bx	lr
 4827              	.L392:
 4828 002e 00BF     		.align	2
 4829              	.L391:
 4830 0030 00000000 		.word	main_ram
 4831              		.cfi_endproc
 4832              	.LFE77:
 4834              		.section	.text.is_dblmode,"ax",%progbits
 4835              		.align	1
 4836              		.p2align 2,,3
 4837              		.global	is_dblmode
 4838              		.syntax unified
 4839              		.thumb
 4840              		.thumb_func
 4841              		.fpu fpv4-sp-d16
 4843              	is_dblmode:
 4844              	.LFB82:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4845              		.loc 1 1118 22 view -0
 4846              		.cfi_startproc
 4847              		@ args = 0, pretend = 0, frame = 0
 4848              		@ frame_needed = 0, uses_anonymous_args = 0
 4849              		@ link register save eliminated.
1119:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 207


 4850              		.loc 1 1119 2 view .LVU1292
1119:src/xeq.c     **** }
 4851              		.loc 1 1119 24 is_stmt 0 view .LVU1293
 4852 0000 064B     		ldr	r3, .L394
 4853 0002 1B68     		ldr	r3, [r3]
 4854 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 4855 0008 44F20100 		movw	r0, #16385
 4856 000c 1840     		ands	r0, r0, r3
1120:src/xeq.c     **** 
 4857              		.loc 1 1120 1 view .LVU1294
 4858 000e A0F58040 		sub	r0, r0, #16384
 4859 0012 B0FA80F0 		clz	r0, r0
 4860 0016 4009     		lsrs	r0, r0, #5
 4861 0018 7047     		bx	lr
 4862              	.L395:
 4863 001a 00BF     		.align	2
 4864              	.L394:
 4865 001c 00000000 		.word	main_ram
 4866              		.cfi_endproc
 4867              	.LFE82:
 4869              		.section	.text.is_usrdblmode,"ax",%progbits
 4870              		.align	1
 4871              		.p2align 2,,3
 4872              		.global	is_usrdblmode
 4873              		.syntax unified
 4874              		.thumb
 4875              		.thumb_func
 4876              		.fpu fpv4-sp-d16
 4878              	is_usrdblmode:
 4879              	.LFB83:
1122:src/xeq.c     **** 	if (XromFlags.xIN)
 4880              		.loc 1 1122 25 is_stmt 1 view -0
 4881              		.cfi_startproc
 4882              		@ args = 0, pretend = 0, frame = 0
 4883              		@ frame_needed = 0, uses_anonymous_args = 0
 4884              		@ link register save eliminated.
1123:src/xeq.c     **** 		return XromFlags.mode_double;
 4885              		.loc 1 1123 2 view .LVU1296
1123:src/xeq.c     **** 		return XromFlags.mode_double;
 4886              		.loc 1 1123 6 is_stmt 0 view .LVU1297
 4887 0000 0A4B     		ldr	r3, .L400
1123:src/xeq.c     **** 		return XromFlags.mode_double;
 4888              		.loc 1 1123 5 view .LVU1298
 4889 0002 93F90120 		ldrsb	r2, [r3, #1]
 4890 0006 002A     		cmp	r2, #0
 4891 0008 0CDB     		blt	.L399
1125:src/xeq.c     **** }
 4892              		.loc 1 1125 2 is_stmt 1 view .LVU1299
 4893              	.LBB1656:
 4894              	.LBI1656:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4895              		.loc 1 1118 5 view .LVU1300
 4896              	.LBB1657:
1119:src/xeq.c     **** }
 4897              		.loc 1 1119 2 view .LVU1301
1119:src/xeq.c     **** }
 4898              		.loc 1 1119 24 is_stmt 0 view .LVU1302
ARM GAS  /tmp/ccBFDvgN.s 			page 208


 4899 000a 094B     		ldr	r3, .L400+4
 4900 000c 1B68     		ldr	r3, [r3]
 4901 000e B3F8E837 		ldrh	r3, [r3, #2024]
 4902 0012 44F20100 		movw	r0, #16385
 4903 0016 1840     		ands	r0, r0, r3
 4904 0018 A0F58040 		sub	r0, r0, #16384
 4905 001c B0FA80F0 		clz	r0, r0
 4906 0020 4009     		lsrs	r0, r0, #5
 4907              	.LBE1657:
 4908              	.LBE1656:
1126:src/xeq.c     **** 
 4909              		.loc 1 1126 1 view .LVU1303
 4910 0022 7047     		bx	lr
 4911              	.L399:
1124:src/xeq.c     **** 	return is_dblmode();
 4912              		.loc 1 1124 3 is_stmt 1 view .LVU1304
1124:src/xeq.c     **** 	return is_dblmode();
 4913              		.loc 1 1124 19 is_stmt 0 view .LVU1305
 4914 0024 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4915 0026 C0F3C000 		ubfx	r0, r0, #3, #1
 4916 002a 7047     		bx	lr
 4917              	.L401:
 4918              		.align	2
 4919              	.L400:
 4920 002c 00000000 		.word	XromParams
 4921 0030 00000000 		.word	main_ram
 4922              		.cfi_endproc
 4923              	.LFE83:
 4925              		.section	.text.s_to_i,"ax",%progbits
 4926              		.align	1
 4927              		.p2align 2,,3
 4928              		.global	s_to_i
 4929              		.syntax unified
 4930              		.thumb
 4931              		.thumb_func
 4932              		.fpu fpv4-sp-d16
 4934              	s_to_i:
 4935              	.LVL357:
 4936              	.LFB84:
1130:src/xeq.c     **** 	int x = 0;
 4937              		.loc 1 1130 27 is_stmt 1 view -0
 4938              		.cfi_startproc
 4939              		@ args = 0, pretend = 0, frame = 0
 4940              		@ frame_needed = 0, uses_anonymous_args = 0
 4941              		@ link register save eliminated.
1131:src/xeq.c     **** 	int neg;
 4942              		.loc 1 1131 2 view .LVU1307
1132:src/xeq.c     **** 
 4943              		.loc 1 1132 2 view .LVU1308
1134:src/xeq.c     **** 		s++;
 4944              		.loc 1 1134 2 view .LVU1309
1130:src/xeq.c     **** 	int x = 0;
 4945              		.loc 1 1130 27 is_stmt 0 view .LVU1310
 4946 0000 10B4     		push	{r4}
 4947              		.cfi_def_cfa_offset 4
 4948              		.cfi_offset 4, -4
1134:src/xeq.c     **** 		s++;
ARM GAS  /tmp/ccBFDvgN.s 			page 209


 4949              		.loc 1 1134 6 view .LVU1311
 4950 0002 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
1134:src/xeq.c     **** 		s++;
 4951              		.loc 1 1134 5 view .LVU1312
 4952 0004 2D29     		cmp	r1, #45
 4953 0006 26D0     		beq	.L418
1138:src/xeq.c     **** 			s++;
 4954              		.loc 1 1138 3 is_stmt 1 view .LVU1313
1138:src/xeq.c     **** 			s++;
 4955              		.loc 1 1138 6 is_stmt 0 view .LVU1314
 4956 0008 2B29     		cmp	r1, #43
 4957 000a 18D0     		beq	.L406
 4958              	.LVL358:
1143:src/xeq.c     **** 		const char c = *s++;
 4959              		.loc 1 1143 2 is_stmt 1 view .LVU1315
 4960              	.LBB1658:
1144:src/xeq.c     **** 
 4961              		.loc 1 1144 3 view .LVU1316
1146:src/xeq.c     **** 			break;
 4962              		.loc 1 1146 15 is_stmt 0 view .LVU1317
 4963 000c A1F13003 		sub	r3, r1, #48
1146:src/xeq.c     **** 			break;
 4964              		.loc 1 1146 6 view .LVU1318
 4965 0010 D9B2     		uxtb	r1, r3
 4966 0012 0929     		cmp	r1, #9
1144:src/xeq.c     **** 
 4967              		.loc 1 1144 20 view .LVU1319
 4968 0014 00F10102 		add	r2, r0, #1
 4969              	.LVL359:
1146:src/xeq.c     **** 			break;
 4970              		.loc 1 1146 3 is_stmt 1 view .LVU1320
1146:src/xeq.c     **** 			break;
 4971              		.loc 1 1146 6 is_stmt 0 view .LVU1321
 4972 0018 19D8     		bhi	.L411
 4973              	.LVL360:
 4974              	.L417:
1146:src/xeq.c     **** 			break;
 4975              		.loc 1 1146 6 view .LVU1322
 4976              	.LBE1658:
1140:src/xeq.c     **** 	}
 4977              		.loc 1 1140 7 view .LVU1323
 4978 001a 0024     		movs	r4, #0
 4979              	.LVL361:
 4980              	.L405:
1140:src/xeq.c     **** 	}
 4981              		.loc 1 1140 7 view .LVU1324
 4982 001c 0020     		movs	r0, #0
 4983              	.LVL362:
 4984              	.L408:
 4985              	.LBB1659:
1148:src/xeq.c     **** 	}
 4986              		.loc 1 1148 3 is_stmt 1 view .LVU1325
1144:src/xeq.c     **** 
 4987              		.loc 1 1144 14 is_stmt 0 view .LVU1326
 4988 001e 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 4989              	.LVL363:
1148:src/xeq.c     **** 	}
ARM GAS  /tmp/ccBFDvgN.s 			page 210


 4990              		.loc 1 1148 10 view .LVU1327
 4991 0022 00EB8000 		add	r0, r0, r0, lsl #2
 4992              	.LVL364:
1148:src/xeq.c     **** 	}
 4993              		.loc 1 1148 5 view .LVU1328
 4994 0026 03EB4000 		add	r0, r3, r0, lsl #1
 4995              	.LVL365:
1148:src/xeq.c     **** 	}
 4996              		.loc 1 1148 5 view .LVU1329
 4997              	.LBE1659:
1143:src/xeq.c     **** 		const char c = *s++;
 4998              		.loc 1 1143 8 is_stmt 1 view .LVU1330
1143:src/xeq.c     **** 		const char c = *s++;
 4999              		.loc 1 1143 2 view .LVU1331
 5000              	.LBB1660:
1144:src/xeq.c     **** 
 5001              		.loc 1 1144 3 view .LVU1332
1146:src/xeq.c     **** 			break;
 5002              		.loc 1 1146 3 view .LVU1333
1146:src/xeq.c     **** 			break;
 5003              		.loc 1 1146 15 is_stmt 0 view .LVU1334
 5004 002a A1F13003 		sub	r3, r1, #48
1146:src/xeq.c     **** 			break;
 5005              		.loc 1 1146 6 view .LVU1335
 5006 002e D9B2     		uxtb	r1, r3
 5007 0030 0929     		cmp	r1, #9
 5008 0032 F4D9     		bls	.L408
 5009              	.LBE1660:
1150:src/xeq.c     **** 		return -x;
 5010              		.loc 1 1150 2 is_stmt 1 view .LVU1336
1150:src/xeq.c     **** 		return -x;
 5011              		.loc 1 1150 5 is_stmt 0 view .LVU1337
 5012 0034 04B1     		cbz	r4, .L402
 5013 0036 4042     		rsbs	r0, r0, #0
 5014              	.LVL366:
 5015              	.L402:
1153:src/xeq.c     **** 
 5016              		.loc 1 1153 1 view .LVU1338
 5017 0038 5DF8044B 		ldr	r4, [sp], #4
 5018              		.cfi_remember_state
 5019              		.cfi_restore 4
 5020              		.cfi_def_cfa_offset 0
 5021 003c 7047     		bx	lr
 5022              	.LVL367:
 5023              	.L406:
 5024              		.cfi_restore_state
1139:src/xeq.c     **** 		neg = 0;
 5025              		.loc 1 1139 4 is_stmt 1 view .LVU1339
1143:src/xeq.c     **** 		const char c = *s++;
 5026              		.loc 1 1143 2 view .LVU1340
 5027              	.LBB1661:
1144:src/xeq.c     **** 
 5028              		.loc 1 1144 3 view .LVU1341
1144:src/xeq.c     **** 
 5029              		.loc 1 1144 14 is_stmt 0 view .LVU1342
 5030 003e 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1146:src/xeq.c     **** 			break;
ARM GAS  /tmp/ccBFDvgN.s 			page 211


 5031              		.loc 1 1146 15 view .LVU1343
 5032 0040 A1F13003 		sub	r3, r1, #48
1146:src/xeq.c     **** 			break;
 5033              		.loc 1 1146 6 view .LVU1344
 5034 0044 D9B2     		uxtb	r1, r3
 5035 0046 0929     		cmp	r1, #9
1144:src/xeq.c     **** 
 5036              		.loc 1 1144 20 view .LVU1345
 5037 0048 00F10202 		add	r2, r0, #2
 5038              	.LVL368:
1146:src/xeq.c     **** 			break;
 5039              		.loc 1 1146 3 is_stmt 1 view .LVU1346
1146:src/xeq.c     **** 			break;
 5040              		.loc 1 1146 6 is_stmt 0 view .LVU1347
 5041 004c E5D9     		bls	.L417
 5042              	.LVL369:
 5043              	.L411:
1146:src/xeq.c     **** 			break;
 5044              		.loc 1 1146 6 view .LVU1348
 5045 004e 0020     		movs	r0, #0
 5046              	.LBE1661:
1153:src/xeq.c     **** 
 5047              		.loc 1 1153 1 view .LVU1349
 5048 0050 5DF8044B 		ldr	r4, [sp], #4
 5049              		.cfi_remember_state
 5050              		.cfi_restore 4
 5051              		.cfi_def_cfa_offset 0
 5052 0054 7047     		bx	lr
 5053              	.LVL370:
 5054              	.L418:
 5055              		.cfi_restore_state
1135:src/xeq.c     **** 		neg = 1;
 5056              		.loc 1 1135 3 is_stmt 1 view .LVU1350
1136:src/xeq.c     **** 	} else {
 5057              		.loc 1 1136 3 view .LVU1351
1143:src/xeq.c     **** 		const char c = *s++;
 5058              		.loc 1 1143 2 view .LVU1352
 5059              	.LBB1662:
1144:src/xeq.c     **** 
 5060              		.loc 1 1144 3 view .LVU1353
1144:src/xeq.c     **** 
 5061              		.loc 1 1144 14 is_stmt 0 view .LVU1354
 5062 0056 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1146:src/xeq.c     **** 			break;
 5063              		.loc 1 1146 15 view .LVU1355
 5064 0058 A1F13003 		sub	r3, r1, #48
1146:src/xeq.c     **** 			break;
 5065              		.loc 1 1146 6 view .LVU1356
 5066 005c D9B2     		uxtb	r1, r3
 5067 005e 0929     		cmp	r1, #9
1144:src/xeq.c     **** 
 5068              		.loc 1 1144 20 view .LVU1357
 5069 0060 00F10202 		add	r2, r0, #2
 5070              	.LVL371:
1146:src/xeq.c     **** 			break;
 5071              		.loc 1 1146 3 is_stmt 1 view .LVU1358
1146:src/xeq.c     **** 			break;
ARM GAS  /tmp/ccBFDvgN.s 			page 212


 5072              		.loc 1 1146 6 is_stmt 0 view .LVU1359
 5073 0064 F3D8     		bhi	.L411
 5074              	.LBE1662:
1136:src/xeq.c     **** 	} else {
 5075              		.loc 1 1136 7 view .LVU1360
 5076 0066 0124     		movs	r4, #1
 5077 0068 D8E7     		b	.L405
 5078              		.cfi_endproc
 5079              	.LFE84:
 5081 006a 00BF     		.section	.text.digit,"ax",%progbits
 5082              		.align	1
 5083              		.p2align 2,,3
 5084              		.syntax unified
 5085              		.thumb
 5086              		.thumb_func
 5087              		.fpu fpv4-sp-d16
 5089              	digit:
 5090              	.LVL372:
 5091              	.LFB214:
3830:src/xeq.c     **** 	const int intm = is_intmode();
 5092              		.loc 1 3830 35 is_stmt 1 view -0
 5093              		.cfi_startproc
 5094              		@ args = 0, pretend = 0, frame = 0
 5095              		@ frame_needed = 0, uses_anonymous_args = 0
3831:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5096              		.loc 1 3831 2 view .LVU1362
3830:src/xeq.c     **** 	const int intm = is_intmode();
 5097              		.loc 1 3830 35 is_stmt 0 view .LVU1363
 5098 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5099              		.cfi_def_cfa_offset 24
 5100              		.cfi_offset 3, -24
 5101              		.cfi_offset 4, -20
 5102              		.cfi_offset 5, -16
 5103              		.cfi_offset 6, -12
 5104              		.cfi_offset 7, -8
 5105              		.cfi_offset 14, -4
3831:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5106              		.loc 1 3831 19 view .LVU1364
 5107 0002 604E     		ldr	r6, .L465
3834:src/xeq.c     **** 		lim++;
 5108              		.loc 1 3834 13 view .LVU1365
 5109 0004 604C     		ldr	r4, .L465+4
3831:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5110              		.loc 1 3831 19 view .LVU1366
 5111 0006 3368     		ldr	r3, [r6]
3834:src/xeq.c     **** 		lim++;
 5112              		.loc 1 3834 13 view .LVU1367
 5113 0008 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
3831:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5114              		.loc 1 3831 19 view .LVU1368
 5115 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 5116              	.LVL373:
3832:src/xeq.c     **** 
 5117              		.loc 1 3832 2 is_stmt 1 view .LVU1369
3834:src/xeq.c     **** 		lim++;
 5118              		.loc 1 3834 2 view .LVU1370
3835:src/xeq.c     **** 	if (intm) {
ARM GAS  /tmp/ccBFDvgN.s 			page 213


 5119              		.loc 1 3835 6 is_stmt 0 view .LVU1371
 5120 0010 2D2A     		cmp	r2, #45
 5121 0012 14BF     		ite	ne
 5122 0014 0C27     		movne	r7, #12
 5123 0016 0D27     		moveq	r7, #13
 5124              	.LVL374:
3836:src/xeq.c     **** 		if (c >= int_base()) {
 5125              		.loc 1 3836 2 is_stmt 1 view .LVU1372
3836:src/xeq.c     **** 		if (c >= int_base()) {
 5126              		.loc 1 3836 5 is_stmt 0 view .LVU1373
 5127 0018 DB07     		lsls	r3, r3, #31
 5128              	.LVL375:
3830:src/xeq.c     **** 	const int intm = is_intmode();
 5129              		.loc 1 3830 35 view .LVU1374
 5130 001a 0546     		mov	r5, r0
3836:src/xeq.c     **** 		if (c >= int_base()) {
 5131              		.loc 1 3836 5 view .LVU1375
 5132 001c 79D4     		bmi	.L462
3842:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5133              		.loc 1 3842 3 is_stmt 1 view .LVU1376
3842:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5134              		.loc 1 3842 6 is_stmt 0 view .LVU1377
 5135 001e 0928     		cmp	r0, #9
 5136 0020 00F28C80 		bhi	.L423
3847:src/xeq.c     **** 			lim = CMDLINELEN;
 5137              		.loc 1 3847 3 is_stmt 1 view .LVU1378
3847:src/xeq.c     **** 			lim = CMDLINELEN;
 5138              		.loc 1 3847 7 is_stmt 0 view .LVU1379
 5139 0024 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3847:src/xeq.c     **** 			lim = CMDLINELEN;
 5140              		.loc 1 3847 6 view .LVU1380
 5141 0026 002B     		cmp	r3, #0
 5142 0028 65D0     		beq	.L424
3848:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5143              		.loc 1 3848 4 is_stmt 1 view .LVU1381
 5144              	.LVL376:
3850:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5145              		.loc 1 3850 4 view .LVU1382
3850:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5146              		.loc 1 3850 8 is_stmt 0 view .LVU1383
 5147 002a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3850:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5148              		.loc 1 3850 7 view .LVU1384
 5149 002c 122A     		cmp	r2, #18
 5150 002e 40F29980 		bls	.L448
 5151              	.LBB1673:
3851:src/xeq.c     **** 
 5152              		.loc 1 3851 5 is_stmt 1 view .LVU1385
3853:src/xeq.c     **** 					p++;
 5153              		.loc 1 3853 9 is_stmt 0 view .LVU1386
 5154 0032 E118     		adds	r1, r4, r3
3851:src/xeq.c     **** 
 5155              		.loc 1 3851 11 view .LVU1387
 5156 0034 2133     		adds	r3, r3, #33
3853:src/xeq.c     **** 					p++;
 5157              		.loc 1 3853 8 view .LVU1388
 5158 0036 91F82110 		ldrb	r1, [r1, #33]	@ zero_extendqisi2
ARM GAS  /tmp/ccBFDvgN.s 			page 214


3851:src/xeq.c     **** 
 5159              		.loc 1 3851 11 view .LVU1389
 5160 003a 2344     		add	r3, r3, r4
 5161              	.LVL377:
3853:src/xeq.c     **** 					p++;
 5162              		.loc 1 3853 5 is_stmt 1 view .LVU1390
3853:src/xeq.c     **** 					p++;
 5163              		.loc 1 3853 8 is_stmt 0 view .LVU1391
 5164 003c 2D29     		cmp	r1, #45
3854:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5165              		.loc 1 3854 6 is_stmt 1 view .LVU1392
3855:src/xeq.c     **** 					p[0] = p[1];
 5166              		.loc 1 3855 11 is_stmt 0 view .LVU1393
 5167 003e 5349     		ldr	r1, .L465+8
3854:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5168              		.loc 1 3854 7 view .LVU1394
 5169 0040 08BF     		it	eq
 5170 0042 0133     		addeq	r3, r3, #1
 5171              	.LVL378:
3855:src/xeq.c     **** 					p[0] = p[1];
 5172              		.loc 1 3855 11 is_stmt 1 view .LVU1395
 5173 0044 8B42     		cmp	r3, r1
 5174 0046 05D2     		bcs	.L427
 5175              	.LVL379:
 5176              	.L428:
3856:src/xeq.c     **** 					p++;
 5177              		.loc 1 3856 6 view .LVU1396
3856:src/xeq.c     **** 					p++;
 5178              		.loc 1 3856 11 is_stmt 0 view .LVU1397
 5179 0048 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5180 004a 03F8012B 		strb	r2, [r3], #1
 5181              	.LVL380:
3857:src/xeq.c     **** 				}
 5182              		.loc 1 3857 6 is_stmt 1 view .LVU1398
3855:src/xeq.c     **** 					p[0] = p[1];
 5183              		.loc 1 3855 11 view .LVU1399
 5184 004e 8B42     		cmp	r3, r1
 5185 0050 FAD1     		bne	.L428
 5186 0052 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5187              	.L427:
3859:src/xeq.c     **** 			}
 5188              		.loc 1 3859 5 view .LVU1400
3859:src/xeq.c     **** 			}
 5189              		.loc 1 3859 18 is_stmt 0 view .LVU1401
 5190 0054 013A     		subs	r2, r2, #1
 5191 0056 D2B2     		uxtb	r2, r2
 5192              	.LBE1673:
3848:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5193              		.loc 1 3848 8 view .LVU1402
 5194 0058 1323     		movs	r3, #19
 5195              	.LVL381:
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5196              		.loc 1 3879 2 is_stmt 1 view .LVU1403
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5197              		.loc 1 3879 5 is_stmt 0 view .LVU1404
 5198 005a 9342     		cmp	r3, r2
 5199              	.LBB1674:
ARM GAS  /tmp/ccBFDvgN.s 			page 215


3859:src/xeq.c     **** 			}
 5200              		.loc 1 3859 18 view .LVU1405
 5201 005c 2277     		strb	r2, [r4, #28]
 5202              	.LBE1674:
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5203              		.loc 1 3879 5 view .LVU1406
 5204 005e 53DD     		ble	.L445
 5205              	.LVL382:
 5206              	.L432:
3891:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5207              		.loc 1 3891 3 is_stmt 1 view .LVU1407
3891:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5208              		.loc 1 3891 6 is_stmt 0 view .LVU1408
 5209 0060 002D     		cmp	r5, #0
 5210 0062 70D1     		bne	.L434
3891:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5211              		.loc 1 3891 17 discriminator 1 view .LVU1409
 5212 0064 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3891:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5213              		.loc 1 3891 14 discriminator 1 view .LVU1410
 5214 0066 002B     		cmp	r3, #0
 5215 0068 00F08180 		beq	.L435
3892:src/xeq.c     **** 				return;
 5216              		.loc 1 3892 4 is_stmt 1 view .LVU1411
3895:src/xeq.c     **** 				return;
 5217              		.loc 1 3895 4 view .LVU1412
3892:src/xeq.c     **** 				return;
 5218              		.loc 1 3892 15 is_stmt 0 view .LVU1413
 5219 006c A018     		adds	r0, r4, r2
3895:src/xeq.c     **** 				return;
 5220              		.loc 1 3895 7 view .LVU1414
 5221 006e C17F     		ldrb	r1, [r0, #31]	@ zero_extendqisi2
 5222 0070 4439     		subs	r1, r1, #68
 5223 0072 0129     		cmp	r1, #1
 5224 0074 3ED9     		bls	.L419
3903:src/xeq.c     **** 
 5225              		.loc 1 3903 3 is_stmt 1 view .LVU1415
 5226              	.LVL383:
 5227              	.LBB1675:
 5228              	.LBI1675:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5229              		.loc 1 2645 13 view .LVU1416
 5230              	.LBB1676:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5231              		.loc 1 2646 2 view .LVU1417
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5232              		.loc 1 2646 23 is_stmt 0 view .LVU1418
 5233 0076 0132     		adds	r2, r2, #1
 5234 0078 D2B2     		uxtb	r2, r2
2647:src/xeq.c     **** }
 5235              		.loc 1 2647 25 view .LVU1419
 5236 007a A118     		adds	r1, r4, r2
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5237              		.loc 1 2646 27 view .LVU1420
 5238 007c 3027     		movs	r7, #48
 5239 007e 80F82070 		strb	r7, [r0, #32]
2647:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 216


 5240              		.loc 1 2647 2 is_stmt 1 view .LVU1421
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5241              		.loc 1 2646 23 is_stmt 0 view .LVU1422
 5242 0082 2277     		strb	r2, [r4, #28]
2647:src/xeq.c     **** }
 5243              		.loc 1 2647 25 view .LVU1423
 5244 0084 81F82050 		strb	r5, [r1, #32]
 5245              	.LVL384:
2647:src/xeq.c     **** }
 5246              		.loc 1 2647 25 view .LVU1424
 5247              	.LBE1676:
 5248              	.LBE1675:
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5249              		.loc 1 3905 3 is_stmt 1 view .LVU1425
 5250              	.L446:
 5251              	.L438:
 5252              	.L439:
3906:src/xeq.c     **** 	}
 5253              		.loc 1 3906 4 view .LVU1426
 5254              	.LBB1681:
 5255              	.LBI1681:
2654:src/xeq.c     **** {
 5256              		.loc 1 2654 13 view .LVU1427
 5257              	.LBB1682:
2656:src/xeq.c     **** 	int i;
 5258              		.loc 1 2656 2 view .LVU1428
 5259              	.LBB1683:
 5260              	.LBI1683:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5261              		.loc 1 1118 5 view .LVU1429
 5262              	.LBB1684:
1119:src/xeq.c     **** }
 5263              		.loc 1 1119 2 view .LVU1430
1119:src/xeq.c     **** }
 5264              		.loc 1 1119 2 is_stmt 0 view .LVU1431
 5265              	.LBE1684:
 5266              	.LBE1683:
2657:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
 5267              		.loc 1 2657 2 is_stmt 1 view .LVU1432
2661:src/xeq.c     **** #endif
 5268              		.loc 1 2661 2 view .LVU1433
2666:src/xeq.c     **** #endif
 5269              		.loc 1 2666 2 view .LVU1434
2671:src/xeq.c     **** #endif
 5270              		.loc 1 2671 2 view .LVU1435
2676:src/xeq.c     **** #endif
 5271              		.loc 1 2676 2 view .LVU1436
2681:src/xeq.c     **** #endif
 5272              		.loc 1 2681 2 view .LVU1437
2686:src/xeq.c     **** #endif
 5273              		.loc 1 2686 2 view .LVU1438
2691:src/xeq.c     **** #endif
 5274              		.loc 1 2691 2 view .LVU1439
2696:src/xeq.c     **** #endif
 5275              		.loc 1 2696 2 view .LVU1440
2701:src/xeq.c     **** #endif
 5276              		.loc 1 2701 2 view .LVU1441
ARM GAS  /tmp/ccBFDvgN.s 			page 217


2706:src/xeq.c     **** #endif
 5277              		.loc 1 2706 2 view .LVU1442
2708:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
 5278              		.loc 1 2708 2 view .LVU1443
2709:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
 5279              		.loc 1 2709 2 view .LVU1444
2710:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
 5280              		.loc 1 2710 2 view .LVU1445
2711:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
 5281              		.loc 1 2711 2 view .LVU1446
2712:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
 5282              		.loc 1 2712 2 view .LVU1447
2713:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
 5283              		.loc 1 2713 2 view .LVU1448
2714:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
 5284              		.loc 1 2714 2 view .LVU1449
2715:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
 5285              		.loc 1 2715 2 view .LVU1450
2716:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
 5286              		.loc 1 2716 2 view .LVU1451
2717:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 5287              		.loc 1 2717 2 view .LVU1452
2719:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
 5288              		.loc 1 2719 2 view .LVU1453
2720:src/xeq.c     **** #else
 5289              		.loc 1 2720 2 view .LVU1454
 5290              	.LBB1687:
 5291              	.LBB1685:
1119:src/xeq.c     **** }
 5292              		.loc 1 1119 24 is_stmt 0 view .LVU1455
 5293 0088 3268     		ldr	r2, [r6]
 5294 008a B2F8E807 		ldrh	r0, [r2, #2024]
 5295              	.LBE1685:
 5296              	.LBE1687:
 5297              	.LBB1688:
3169:src/xeq.c     **** #else
 5298              		.loc 1 3169 9 view .LVU1456
 5299 008e E118     		adds	r1, r4, r3
 5300              	.LBE1688:
2720:src/xeq.c     **** #else
 5301              		.loc 1 2720 8 view .LVU1457
 5302 0090 03F12005 		add	r5, r3, #32
 5303              	.LBB1689:
 5304              	.LBB1686:
1119:src/xeq.c     **** }
 5305              		.loc 1 1119 24 view .LVU1458
 5306 0094 44F20102 		movw	r2, #16385
 5307              	.LBE1686:
 5308              	.LBE1689:
 5309              	.LBB1690:
2840:src/xeq.c     **** 			// Double precision mode
 5310              		.loc 1 2840 6 view .LVU1459
 5311 0098 0240     		ands	r2, r2, r0
 5312              	.LBE1690:
2720:src/xeq.c     **** #else
 5313              		.loc 1 2720 8 view .LVU1460
 5314 009a 2544     		add	r5, r5, r4
ARM GAS  /tmp/ccBFDvgN.s 			page 218


 5315              	.LVL385:
2739:src/xeq.c     **** #endif
 5316              		.loc 1 2739 2 is_stmt 1 view .LVU1461
2744:src/xeq.c     **** 
 5317              		.loc 1 2744 2 view .LVU1462
2747:src/xeq.c     **** 		emax = 999;
 5318              		.loc 1 2747 2 view .LVU1463
 5319              	.LBB1691:
2751:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
 5320              		.loc 1 2751 3 view .LVU1464
2752:src/xeq.c     **** 
 5321              		.loc 1 2752 3 view .LVU1465
2754:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
 5322              		.loc 1 2754 3 view .LVU1466
2840:src/xeq.c     **** 			// Double precision mode
 5323              		.loc 1 2840 3 view .LVU1467
2875:src/xeq.c     **** 				}
 5324              		.loc 1 2875 17 is_stmt 0 view .LVU1468
 5325 009c B2F5804F 		cmp	r2, #16384
3169:src/xeq.c     **** #else
 5326              		.loc 1 3169 8 view .LVU1469
 5327 00a0 91F82010 		ldrb	r1, [r1, #32]	@ zero_extendqisi2
2875:src/xeq.c     **** 				}
 5328              		.loc 1 2875 17 view .LVU1470
 5329 00a4 41F2FF72 		movw	r2, #6143
 5330              	.LBE1691:
3183:src/xeq.c     **** #  else
 5331              		.loc 1 3183 3 view .LVU1471
 5332 00a8 05F10107 		add	r7, r5, #1
 5333              	.LBB1692:
2875:src/xeq.c     **** 				}
 5334              		.loc 1 2875 17 view .LVU1472
 5335 00ac 18BF     		it	ne
 5336 00ae 4FF4C072 		movne	r2, #384
 5337 00b2 40F27F16 		movw	r6, #383
 5338              	.LVL386:
2875:src/xeq.c     **** 				}
 5339              		.loc 1 2875 17 view .LVU1473
 5340              	.LBE1692:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5341              		.loc 1 3192 9 view .LVU1474
 5342 00b6 3846     		mov	r0, r7
 5343              	.LBB1693:
2875:src/xeq.c     **** 				}
 5344              		.loc 1 2875 17 view .LVU1475
 5345 00b8 04BF     		itt	eq
 5346 00ba 1646     		moveq	r6, r2
 5347              	.LVL387:
2875:src/xeq.c     **** 				}
 5348              		.loc 1 2875 17 view .LVU1476
 5349 00bc 4FF4C052 		moveq	r2, #6144
 5350              	.LVL388:
2954:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
 5351              		.loc 1 2954 3 is_stmt 1 view .LVU1477
2970:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
 5352              		.loc 1 2970 8 view .LVU1478
3016:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
ARM GAS  /tmp/ccBFDvgN.s 			page 219


 5353              		.loc 1 3016 3 view .LVU1479
3030:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
 5354              		.loc 1 3030 8 view .LVU1480
3070:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
 5355              		.loc 1 3070 3 view .LVU1481
3096:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
 5356              		.loc 1 3096 8 view .LVU1482
3122:src/xeq.c     **** 			if (exp_chs_ds == 0) {
 5357              		.loc 1 3122 8 view .LVU1483
3151:src/xeq.c     **** 				// Limit exponents so sign change is always legal
 5358              		.loc 1 3151 4 view .LVU1484
3158:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
 5359              		.loc 1 3158 9 view .LVU1485
3166:src/xeq.c     **** 					return;
 5360              		.loc 1 3166 5 view .LVU1486
3169:src/xeq.c     **** #else
 5361              		.loc 1 3169 5 view .LVU1487
3175:src/xeq.c     **** 			}
 5362              		.loc 1 3175 11 is_stmt 0 view .LVU1488
 5363 00c0 4429     		cmp	r1, #68
 5364 00c2 18BF     		it	ne
 5365 00c4 1646     		movne	r6, r2
 5366              	.LVL389:
3175:src/xeq.c     **** 			}
 5367              		.loc 1 3175 11 view .LVU1489
 5368              	.LBE1693:
3183:src/xeq.c     **** #  else
 5369              		.loc 1 3183 2 is_stmt 1 view .LVU1490
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5370              		.loc 1 3192 2 view .LVU1491
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5371              		.loc 1 3192 8 view .LVU1492
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5372              		.loc 1 3192 9 is_stmt 0 view .LVU1493
 5373 00c6 FFF7FEFF 		bl	s_to_i
 5374              	.LVL390:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5375              		.loc 1 3192 8 view .LVU1494
 5376 00ca B042     		cmp	r0, r6
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5377              		.loc 1 3193 3 view .LVU1495
 5378 00cc 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5379              		.loc 1 3192 8 view .LVU1496
 5380 00ce 0FDD     		ble	.L442
 5381              	.L463:
 5382              	.LVL391:
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5383              		.loc 1 3193 15 is_stmt 1 view .LVU1497
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5384              		.loc 1 3193 3 is_stmt 0 view .LVU1498
 5385 00d0 2BB1     		cbz	r3, .L444
 5386              	.LVL392:
 5387              	.L451:
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5388              		.loc 1 3193 3 view .LVU1499
 5389 00d2 3B46     		mov	r3, r7
ARM GAS  /tmp/ccBFDvgN.s 			page 220


 5390              	.L441:
3194:src/xeq.c     **** 		CmdLineLength--;
 5391              		.loc 1 3194 4 is_stmt 1 view .LVU1500
3194:src/xeq.c     **** 		CmdLineLength--;
 5392              		.loc 1 3194 9 is_stmt 0 view .LVU1501
 5393 00d4 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5394 00d6 1A70     		strb	r2, [r3]
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5395              		.loc 1 3193 29 is_stmt 1 view .LVU1502
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5396              		.loc 1 3193 15 view .LVU1503
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5397              		.loc 1 3193 3 is_stmt 0 view .LVU1504
 5398 00d8 0133     		adds	r3, r3, #1
 5399 00da 002A     		cmp	r2, #0
 5400 00dc FAD1     		bne	.L441
 5401              	.L444:
3195:src/xeq.c     **** 	}
 5402              		.loc 1 3195 3 is_stmt 1 view .LVU1505
3195:src/xeq.c     **** 	}
 5403              		.loc 1 3195 16 is_stmt 0 view .LVU1506
 5404 00de 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5405              		.loc 1 3192 9 view .LVU1507
 5406 00e0 3846     		mov	r0, r7
3195:src/xeq.c     **** 	}
 5407              		.loc 1 3195 16 view .LVU1508
 5408 00e2 013B     		subs	r3, r3, #1
 5409 00e4 2377     		strb	r3, [r4, #28]
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5410              		.loc 1 3192 8 is_stmt 1 view .LVU1509
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5411              		.loc 1 3192 9 is_stmt 0 view .LVU1510
 5412 00e6 FFF7FEFF 		bl	s_to_i
 5413              	.LVL393:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5414              		.loc 1 3192 8 view .LVU1511
 5415 00ea B042     		cmp	r0, r6
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5416              		.loc 1 3193 3 view .LVU1512
 5417 00ec 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5418              		.loc 1 3192 8 view .LVU1513
 5419 00ee EFDC     		bgt	.L463
 5420              	.L442:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5421              		.loc 1 3192 26 view .LVU1514
 5422 00f0 302B     		cmp	r3, #48
 5423 00f2 EED0     		beq	.L451
 5424              	.LVL394:
 5425              	.L419:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5426              		.loc 1 3192 26 view .LVU1515
 5427              	.LBE1682:
 5428              	.LBE1681:
3908:src/xeq.c     **** 
 5429              		.loc 1 3908 1 view .LVU1516
ARM GAS  /tmp/ccBFDvgN.s 			page 221


 5430 00f4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5431              	.LVL395:
 5432              	.L424:
3864:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5433              		.loc 1 3864 4 is_stmt 1 view .LVU1517
3864:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5434              		.loc 1 3864 11 is_stmt 0 view .LVU1518
 5435 00f6 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5436              	.LVL396:
3866:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5437              		.loc 1 3866 4 is_stmt 1 view .LVU1519
3866:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5438              		.loc 1 3866 7 is_stmt 0 view .LVU1520
 5439 00f8 012B     		cmp	r3, #1
 5440 00fa 35D9     		bls	.L464
3869:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5441              		.loc 1 3869 5 is_stmt 1 view .LVU1521
3869:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5442              		.loc 1 3869 22 is_stmt 0 view .LVU1522
 5443 00fc 2D2A     		cmp	r2, #45
 5444 00fe 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5445 0100 30D0     		beq	.L448
 5446 0102 1223     		movs	r3, #18
 5447              	.LVL397:
 5448              	.L425:
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5449              		.loc 1 3879 2 is_stmt 1 view .LVU1523
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5450              		.loc 1 3879 5 is_stmt 0 view .LVU1524
 5451 0104 9342     		cmp	r3, r2
 5452 0106 ABDC     		bgt	.L432
 5453              	.LVL398:
 5454              	.L445:
3881:src/xeq.c     **** 		return;
 5455              		.loc 1 3881 3 is_stmt 1 view .LVU1525
3908:src/xeq.c     **** 
 5456              		.loc 1 3908 1 is_stmt 0 view .LVU1526
 5457 0108 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5458              		.cfi_remember_state
 5459              		.cfi_restore 14
 5460              		.cfi_restore 7
 5461              		.cfi_restore 6
 5462              		.cfi_restore 5
 5463              		.cfi_restore 4
 5464              		.cfi_restore 3
 5465              		.cfi_def_cfa_offset 0
 5466              	.LVL399:
3881:src/xeq.c     **** 		return;
 5467              		.loc 1 3881 3 view .LVU1527
 5468 010c 0A20     		movs	r0, #10
 5469 010e FFF7FEBF 		b	report_warn
 5470              	.LVL400:
 5471              	.L462:
 5472              		.cfi_restore_state
3837:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5473              		.loc 1 3837 3 is_stmt 1 view .LVU1528
3837:src/xeq.c     **** 			report_warn(ERR_DIGIT);
ARM GAS  /tmp/ccBFDvgN.s 			page 222


 5474              		.loc 1 3837 12 is_stmt 0 view .LVU1529
 5475 0112 FFF7FEFF 		bl	int_base
 5476              	.LVL401:
3837:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5477              		.loc 1 3837 6 view .LVU1530
 5478 0116 A842     		cmp	r0, r5
 5479 0118 10D9     		bls	.L423
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5480              		.loc 1 3879 2 is_stmt 1 view .LVU1531
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5481              		.loc 1 3879 6 is_stmt 0 view .LVU1532
 5482 011a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5483              		.loc 1 3879 5 view .LVU1533
 5484 011c BA42     		cmp	r2, r7
 5485 011e F3DA     		bge	.L445
3885:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5486              		.loc 1 3885 2 is_stmt 1 view .LVU1534
3885:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5487              		.loc 1 3885 5 is_stmt 0 view .LVU1535
 5488 0120 092D     		cmp	r5, #9
 5489 0122 9DD9     		bls	.L432
3886:src/xeq.c     **** 	else {
 5490              		.loc 1 3886 3 is_stmt 1 view .LVU1536
 5491              	.LVL402:
 5492              	.LBB1694:
 5493              	.LBI1694:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5494              		.loc 1 2645 13 view .LVU1537
 5495              	.LBB1695:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5496              		.loc 1 2646 2 view .LVU1538
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5497              		.loc 1 2646 23 is_stmt 0 view .LVU1539
 5498 0124 531C     		adds	r3, r2, #1
 5499 0126 DBB2     		uxtb	r3, r3
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5500              		.loc 1 2646 27 view .LVU1540
 5501 0128 2244     		add	r2, r2, r4
2647:src/xeq.c     **** }
 5502              		.loc 1 2647 25 view .LVU1541
 5503 012a E118     		adds	r1, r4, r3
 5504              	.LBE1695:
 5505              	.LBE1694:
3886:src/xeq.c     **** 	else {
 5506              		.loc 1 3886 3 view .LVU1542
 5507 012c 3735     		adds	r5, r5, #55
 5508              	.LVL403:
 5509              	.LBB1697:
 5510              	.LBB1696:
2647:src/xeq.c     **** }
 5511              		.loc 1 2647 25 view .LVU1543
 5512 012e 0026     		movs	r6, #0
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5513              		.loc 1 2646 27 view .LVU1544
 5514 0130 82F82050 		strb	r5, [r2, #32]
2647:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 223


 5515              		.loc 1 2647 2 is_stmt 1 view .LVU1545
2647:src/xeq.c     **** }
 5516              		.loc 1 2647 25 is_stmt 0 view .LVU1546
 5517 0134 81F82060 		strb	r6, [r1, #32]
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5518              		.loc 1 2646 23 view .LVU1547
 5519 0138 2377     		strb	r3, [r4, #28]
 5520              	.LBE1696:
 5521              	.LBE1697:
3908:src/xeq.c     **** 
 5522              		.loc 1 3908 1 view .LVU1548
 5523 013a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5524              	.LVL404:
 5525              	.L423:
3838:src/xeq.c     **** 			return;
 5526              		.loc 1 3838 4 is_stmt 1 view .LVU1549
3908:src/xeq.c     **** 
 5527              		.loc 1 3908 1 is_stmt 0 view .LVU1550
 5528 013c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5529              		.cfi_remember_state
 5530              		.cfi_restore 14
 5531              		.cfi_restore 7
 5532              		.cfi_restore 6
 5533              		.cfi_restore 5
 5534              		.cfi_restore 4
 5535              		.cfi_restore 3
 5536              		.cfi_def_cfa_offset 0
 5537              	.LVL405:
3838:src/xeq.c     **** 			return;
 5538              		.loc 1 3838 4 view .LVU1551
 5539 0140 0920     		movs	r0, #9
 5540 0142 FFF7FEBF 		b	report_warn
 5541              	.LVL406:
 5542              	.L434:
 5543              		.cfi_restore_state
3903:src/xeq.c     **** 
 5544              		.loc 1 3903 3 is_stmt 1 view .LVU1552
 5545              	.LBB1698:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5546              		.loc 1 2645 13 view .LVU1553
 5547              	.LBB1677:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5548              		.loc 1 2646 2 view .LVU1554
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5549              		.loc 1 2646 23 is_stmt 0 view .LVU1555
 5550 0146 511C     		adds	r1, r2, #1
 5551 0148 C9B2     		uxtb	r1, r1
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5552              		.loc 1 2646 27 view .LVU1556
 5553 014a 2244     		add	r2, r2, r4
2647:src/xeq.c     **** }
 5554              		.loc 1 2647 25 view .LVU1557
 5555 014c 6718     		adds	r7, r4, r1
 5556              	.LBE1677:
 5557              	.LBE1698:
3903:src/xeq.c     **** 
 5558              		.loc 1 3903 3 view .LVU1558
ARM GAS  /tmp/ccBFDvgN.s 			page 224


 5559 014e 3035     		adds	r5, r5, #48
 5560              	.LVL407:
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5561              		.loc 1 3905 7 view .LVU1559
 5562 0150 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 5563              	.LBB1699:
 5564              	.LBB1678:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5565              		.loc 1 2646 27 view .LVU1560
 5566 0152 82F82050 		strb	r5, [r2, #32]
2647:src/xeq.c     **** }
 5567              		.loc 1 2647 2 is_stmt 1 view .LVU1561
2647:src/xeq.c     **** }
 5568              		.loc 1 2647 25 is_stmt 0 view .LVU1562
 5569 0156 0022     		movs	r2, #0
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5570              		.loc 1 2646 23 view .LVU1563
 5571 0158 2177     		strb	r1, [r4, #28]
2647:src/xeq.c     **** }
 5572              		.loc 1 2647 25 view .LVU1564
 5573 015a 87F82020 		strb	r2, [r7, #32]
2647:src/xeq.c     **** }
 5574              		.loc 1 2647 25 view .LVU1565
 5575              	.LBE1678:
 5576              	.LBE1699:
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5577              		.loc 1 3905 3 is_stmt 1 view .LVU1566
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5578              		.loc 1 3905 6 is_stmt 0 view .LVU1567
 5579 015e 002B     		cmp	r3, #0
 5580 0160 92D1     		bne	.L446
3908:src/xeq.c     **** 
 5581              		.loc 1 3908 1 view .LVU1568
 5582 0162 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5583              	.LVL408:
 5584              	.L448:
3848:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5585              		.loc 1 3848 8 view .LVU1569
 5586 0164 1323     		movs	r3, #19
 5587 0166 CDE7     		b	.L425
 5588              	.LVL409:
 5589              	.L464:
3848:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5590              		.loc 1 3848 8 view .LVU1570
 5591 0168 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3864:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5592              		.loc 1 3864 8 view .LVU1571
 5593 016a 3B44     		add	r3, r3, r7
 5594              	.LVL410:
3864:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5595              		.loc 1 3864 8 view .LVU1572
 5596 016c CAE7     		b	.L425
 5597              	.LVL411:
 5598              	.L435:
3903:src/xeq.c     **** 
 5599              		.loc 1 3903 3 is_stmt 1 view .LVU1573
 5600              	.LBB1700:
ARM GAS  /tmp/ccBFDvgN.s 			page 225


2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5601              		.loc 1 2645 13 view .LVU1574
 5602              	.LBB1679:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5603              		.loc 1 2646 2 view .LVU1575
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5604              		.loc 1 2646 23 is_stmt 0 view .LVU1576
 5605 016e 531C     		adds	r3, r2, #1
 5606 0170 DBB2     		uxtb	r3, r3
2647:src/xeq.c     **** }
 5607              		.loc 1 2647 25 view .LVU1577
 5608 0172 E118     		adds	r1, r4, r3
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5609              		.loc 1 2646 27 view .LVU1578
 5610 0174 2244     		add	r2, r2, r4
 5611 0176 3020     		movs	r0, #48
 5612 0178 82F82000 		strb	r0, [r2, #32]
2647:src/xeq.c     **** }
 5613              		.loc 1 2647 2 is_stmt 1 view .LVU1579
2647:src/xeq.c     **** }
 5614              		.loc 1 2647 25 is_stmt 0 view .LVU1580
 5615 017c 81F82050 		strb	r5, [r1, #32]
 5616              	.LVL412:
2647:src/xeq.c     **** }
 5617              		.loc 1 2647 25 view .LVU1581
 5618              	.LBE1679:
 5619              	.LBE1700:
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5620              		.loc 1 3905 3 is_stmt 1 view .LVU1582
 5621              	.LBB1701:
 5622              	.LBB1680:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5623              		.loc 1 2646 23 is_stmt 0 view .LVU1583
 5624 0180 2377     		strb	r3, [r4, #28]
 5625              	.LBE1680:
 5626              	.LBE1701:
3908:src/xeq.c     **** 
 5627              		.loc 1 3908 1 view .LVU1584
 5628 0182 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5629              	.LVL413:
 5630              	.L466:
3908:src/xeq.c     **** 
 5631              		.loc 1 3908 1 view .LVU1585
 5632              		.align	2
 5633              	.L465:
 5634 0184 00000000 		.word	main_ram
 5635 0188 00000000 		.word	StateWhileOn
 5636 018c 33000000 		.word	StateWhileOn+51
 5637              		.cfi_endproc
 5638              	.LFE214:
 5640              		.section	.text.s_to_ull,"ax",%progbits
 5641              		.align	1
 5642              		.p2align 2,,3
 5643              		.global	s_to_ull
 5644              		.syntax unified
 5645              		.thumb
 5646              		.thumb_func
ARM GAS  /tmp/ccBFDvgN.s 			page 226


 5647              		.fpu fpv4-sp-d16
 5649              	s_to_ull:
 5650              	.LVL414:
 5651              	.LFB85:
1157:src/xeq.c     **** 	unsigned long long int x = 0;
 5652              		.loc 1 1157 67 is_stmt 1 view -0
 5653              		.cfi_startproc
 5654              		@ args = 0, pretend = 0, frame = 0
 5655              		@ frame_needed = 0, uses_anonymous_args = 0
 5656              		@ link register save eliminated.
1158:src/xeq.c     **** 
 5657              		.loc 1 1158 2 view .LVU1587
1157:src/xeq.c     **** 	unsigned long long int x = 0;
 5658              		.loc 1 1157 67 is_stmt 0 view .LVU1588
 5659 0000 F0B4     		push	{r4, r5, r6, r7}
 5660              		.cfi_def_cfa_offset 16
 5661              		.cfi_offset 4, -16
 5662              		.cfi_offset 5, -12
 5663              		.cfi_offset 6, -8
 5664              		.cfi_offset 7, -4
1158:src/xeq.c     **** 
 5665              		.loc 1 1158 25 view .LVU1589
 5666 0002 0026     		movs	r6, #0
 5667 0004 0027     		movs	r7, #0
 5668 0006 02E0     		b	.L471
 5669              	.LVL415:
 5670              	.L473:
 5671              	.LBB1702:
1172:src/xeq.c     **** 	}
 5672              		.loc 1 1172 5 view .LVU1590
 5673 0008 E618     		adds	r6, r4, r3
 5674              	.LVL416:
1172:src/xeq.c     **** 	}
 5675              		.loc 1 1172 5 view .LVU1591
 5676 000a 45F10007 		adc	r7, r5, #0
 5677              	.LVL417:
1172:src/xeq.c     **** 	}
 5678              		.loc 1 1172 5 view .LVU1592
 5679              	.LBE1702:
1160:src/xeq.c     **** 		unsigned int n;
 5680              		.loc 1 1160 8 is_stmt 1 view .LVU1593
 5681              	.L471:
1160:src/xeq.c     **** 		unsigned int n;
 5682              		.loc 1 1160 2 view .LVU1594
 5683              	.LBB1703:
1161:src/xeq.c     **** 		const char c = *s++;
 5684              		.loc 1 1161 3 view .LVU1595
1162:src/xeq.c     **** 
 5685              		.loc 1 1162 3 view .LVU1596
1165:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 5686              		.loc 1 1165 4 view .LVU1597
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 5687              		.loc 1 1166 8 view .LVU1598
1167:src/xeq.c     **** 		else
 5688              		.loc 1 1167 4 view .LVU1599
1162:src/xeq.c     **** 
 5689              		.loc 1 1162 14 is_stmt 0 view .LVU1600
ARM GAS  /tmp/ccBFDvgN.s 			page 227


 5690 000e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5691              	.LVL418:
1164:src/xeq.c     **** 			n = c - '0';
 5692              		.loc 1 1164 3 is_stmt 1 view .LVU1601
1164:src/xeq.c     **** 			n = c - '0';
 5693              		.loc 1 1164 16 is_stmt 0 view .LVU1602
 5694 0012 A2F13003 		sub	r3, r2, #48
1164:src/xeq.c     **** 			n = c - '0';
 5695              		.loc 1 1164 6 view .LVU1603
 5696 0016 DCB2     		uxtb	r4, r3
 5697 0018 092C     		cmp	r4, #9
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 5698              		.loc 1 1166 11 view .LVU1604
 5699 001a A2F14105 		sub	r5, r2, #65
1164:src/xeq.c     **** 			n = c - '0';
 5700              		.loc 1 1164 6 view .LVU1605
 5701 001e 03D9     		bls	.L469
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 5702              		.loc 1 1166 11 view .LVU1606
 5703 0020 052D     		cmp	r5, #5
 5704 0022 07D8     		bhi	.L467
1167:src/xeq.c     **** 		else
 5705              		.loc 1 1167 16 view .LVU1607
 5706 0024 A2F13703 		sub	r3, r2, #55
 5707              	.LVL419:
 5708              	.L469:
1170:src/xeq.c     **** 			break;
 5709              		.loc 1 1170 3 is_stmt 1 view .LVU1608
1172:src/xeq.c     **** 	}
 5710              		.loc 1 1172 3 view .LVU1609
1172:src/xeq.c     **** 	}
 5711              		.loc 1 1172 9 is_stmt 0 view .LVU1610
 5712 0028 A1FB0645 		umull	r4, r5, r1, r6
1170:src/xeq.c     **** 			break;
 5713              		.loc 1 1170 6 view .LVU1611
 5714 002c 8B42     		cmp	r3, r1
1172:src/xeq.c     **** 	}
 5715              		.loc 1 1172 9 view .LVU1612
 5716 002e 01FB0755 		mla	r5, r1, r7, r5
1170:src/xeq.c     **** 			break;
 5717              		.loc 1 1170 6 view .LVU1613
 5718 0032 E9D3     		bcc	.L473
 5719              	.LVL420:
 5720              	.L467:
1170:src/xeq.c     **** 			break;
 5721              		.loc 1 1170 6 view .LVU1614
 5722              	.LBE1703:
1175:src/xeq.c     **** 
 5723              		.loc 1 1175 1 view .LVU1615
 5724 0034 3046     		mov	r0, r6
 5725              	.LVL421:
1175:src/xeq.c     **** 
 5726              		.loc 1 1175 1 view .LVU1616
 5727 0036 3946     		mov	r1, r7
 5728              	.LVL422:
1175:src/xeq.c     **** 
 5729              		.loc 1 1175 1 view .LVU1617
ARM GAS  /tmp/ccBFDvgN.s 			page 228


 5730 0038 F0BC     		pop	{r4, r5, r6, r7}
 5731              		.cfi_restore 7
 5732              		.cfi_restore 6
 5733              		.cfi_restore 5
 5734              		.cfi_restore 4
 5735              		.cfi_def_cfa_offset 0
 5736              	.LVL423:
1175:src/xeq.c     **** 
 5737              		.loc 1 1175 1 view .LVU1618
 5738 003a 7047     		bx	lr
 5739              		.cfi_endproc
 5740              	.LFE85:
 5742              		.section	.text.get_cmdline,"ax",%progbits
 5743              		.align	1
 5744              		.p2align 2,,3
 5745              		.global	get_cmdline
 5746              		.syntax unified
 5747              		.thumb
 5748              		.thumb_func
 5749              		.fpu fpv4-sp-d16
 5751              	get_cmdline:
 5752              	.LFB86:
1177:src/xeq.c     **** 	if (CmdLineLength) {
 5753              		.loc 1 1177 31 is_stmt 1 view -0
 5754              		.cfi_startproc
 5755              		@ args = 0, pretend = 0, frame = 0
 5756              		@ frame_needed = 0, uses_anonymous_args = 0
 5757              		@ link register save eliminated.
1178:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5758              		.loc 1 1178 2 view .LVU1620
1178:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5759              		.loc 1 1178 6 is_stmt 0 view .LVU1621
 5760 0000 044B     		ldr	r3, .L477
 5761 0002 187F     		ldrb	r0, [r3, #28]	@ zero_extendqisi2
1178:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5762              		.loc 1 1178 5 view .LVU1622
 5763 0004 28B1     		cbz	r0, .L474
1179:src/xeq.c     **** 		return Cmdline;
 5764              		.loc 1 1179 3 is_stmt 1 view .LVU1623
1179:src/xeq.c     **** 		return Cmdline;
 5765              		.loc 1 1179 26 is_stmt 0 view .LVU1624
 5766 0006 1A18     		adds	r2, r3, r0
 5767 0008 0021     		movs	r1, #0
1180:src/xeq.c     **** 	}
 5768              		.loc 1 1180 10 view .LVU1625
 5769 000a 03F12000 		add	r0, r3, #32
1179:src/xeq.c     **** 		return Cmdline;
 5770              		.loc 1 1179 26 view .LVU1626
 5771 000e 82F82010 		strb	r1, [r2, #32]
1180:src/xeq.c     **** 	}
 5772              		.loc 1 1180 3 is_stmt 1 view .LVU1627
 5773              	.L474:
1183:src/xeq.c     **** 
 5774              		.loc 1 1183 1 is_stmt 0 view .LVU1628
 5775 0012 7047     		bx	lr
 5776              	.L478:
 5777              		.align	2
ARM GAS  /tmp/ccBFDvgN.s 			page 229


 5778              	.L477:
 5779 0014 00000000 		.word	StateWhileOn
 5780              		.cfi_endproc
 5781              	.LFE86:
 5783              		.section	.text.is_bad_cmdline,"ax",%progbits
 5784              		.align	1
 5785              		.p2align 2,,3
 5786              		.global	is_bad_cmdline
 5787              		.syntax unified
 5788              		.thumb
 5789              		.thumb_func
 5790              		.fpu fpv4-sp-d16
 5792              	is_bad_cmdline:
 5793              	.LFB87:
1200:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5794              		.loc 1 1200 1 is_stmt 1 view -0
 5795              		.cfi_startproc
 5796              		@ args = 0, pretend = 0, frame = 0
 5797              		@ frame_needed = 0, uses_anonymous_args = 0
 5798              		@ link register save eliminated.
1221:src/xeq.c     **** }
 5799              		.loc 1 1221 2 view .LVU1630
1222:src/xeq.c     **** 
 5800              		.loc 1 1222 1 is_stmt 0 view .LVU1631
 5801 0000 0020     		movs	r0, #0
 5802 0002 7047     		bx	lr
 5803              		.cfi_endproc
 5804              	.LFE87:
 5806              		.section	.text.get_flash_reg_n,"ax",%progbits
 5807              		.align	1
 5808              		.p2align 2,,3
 5809              		.global	get_flash_reg_n
 5810              		.syntax unified
 5811              		.thumb
 5812              		.thumb_func
 5813              		.fpu fpv4-sp-d16
 5815              	get_flash_reg_n:
 5816              	.LVL424:
 5817              	.LFB92:
1385:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 5818              		.loc 1 1385 34 is_stmt 1 view -0
 5819              		.cfi_startproc
 5820              		@ args = 0, pretend = 0, frame = 0
 5821              		@ frame_needed = 0, uses_anonymous_args = 0
 5822              		@ link register save eliminated.
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5823              		.loc 1 1386 2 view .LVU1633
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5824              		.loc 1 1386 37 is_stmt 0 view .LVU1634
 5825 0000 064B     		ldr	r3, .L481
 5826 0002 1A68     		ldr	r2, [r3]
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5827              		.loc 1 1386 68 view .LVU1635
 5828 0004 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5829              		.loc 1 1386 37 view .LVU1636
 5830 0008 02F22C41 		addw	r1, r2, #1068
ARM GAS  /tmp/ccBFDvgN.s 			page 230


1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5831              		.loc 1 1386 68 view .LVU1637
 5832 000c C3F16403 		rsb	r3, r3, #100
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5833              		.loc 1 1386 22 view .LVU1638
 5834 0010 01EBC301 		add	r1, r1, r3, lsl #3
 5835 0014 02F24C72 		addw	r2, r2, #1868
 5836 0018 FFF7FEBF 		b	reg_address
 5837              	.LVL425:
 5838              	.L482:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5839              		.loc 1 1386 22 view .LVU1639
 5840              		.align	2
 5841              	.L481:
 5842 001c 00000000 		.word	backup_ram
 5843              		.cfi_endproc
 5844              	.LFE92:
 5846              		.section	.text.get_const,"ax",%progbits
 5847              		.align	1
 5848              		.p2align 2,,3
 5849              		.global	get_const
 5850              		.syntax unified
 5851              		.thumb
 5852              		.thumb_func
 5853              		.fpu fpv4-sp-d16
 5855              	get_const:
 5856              	.LVL426:
 5857              	.LFB93:
1396:src/xeq.c     **** 	static REGISTER result;
 5858              		.loc 1 1396 1 is_stmt 1 view -0
 5859              		.cfi_startproc
 5860              		@ args = 0, pretend = 0, frame = 40
 5861              		@ frame_needed = 0, uses_anonymous_args = 0
1397:src/xeq.c     **** 	const int i = cnsts[index].index;
 5862              		.loc 1 1397 2 view .LVU1641
1398:src/xeq.c     **** 	if (dbl) {
 5863              		.loc 1 1398 2 view .LVU1642
1396:src/xeq.c     **** 	static REGISTER result;
 5864              		.loc 1 1396 1 is_stmt 0 view .LVU1643
 5865 0000 00B5     		push	{lr}
 5866              		.cfi_def_cfa_offset 4
 5867              		.cfi_offset 14, -4
1398:src/xeq.c     **** 	if (dbl) {
 5868              		.loc 1 1398 28 view .LVU1644
 5869 0002 1C4B     		ldr	r3, .L489
 5870 0004 00EB4000 		add	r0, r0, r0, lsl #1
 5871              	.LVL427:
1396:src/xeq.c     **** 	static REGISTER result;
 5872              		.loc 1 1396 1 view .LVU1645
 5873 0008 8BB0     		sub	sp, sp, #44
 5874              		.cfi_def_cfa_offset 48
1398:src/xeq.c     **** 	if (dbl) {
 5875              		.loc 1 1398 28 view .LVU1646
 5876 000a 13F82030 		ldrb	r3, [r3, r0, lsl #2]	@ zero_extendqisi2
 5877              	.LVL428:
1399:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5878              		.loc 1 1399 2 is_stmt 1 view .LVU1647
ARM GAS  /tmp/ccBFDvgN.s 			page 231


1399:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5879              		.loc 1 1399 5 is_stmt 0 view .LVU1648
 5880 000e 51B1     		cbz	r1, .L484
1400:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5881              		.loc 1 1400 3 is_stmt 1 view .LVU1649
1400:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5882              		.loc 1 1400 14 is_stmt 0 view .LVU1650
 5883 0010 9A1E     		subs	r2, r3, #2
1400:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5884              		.loc 1 1400 6 view .LVU1651
 5885 0012 7D2A     		cmp	r2, #125
 5886 0014 0FD9     		bls	.L485
1401:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5887              		.loc 1 1401 4 is_stmt 1 view .LVU1652
1401:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5888              		.loc 1 1401 11 is_stmt 0 view .LVU1653
 5889 0016 184A     		ldr	r2, .L489+4
1401:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5890              		.loc 1 1401 36 view .LVU1654
 5891 0018 03F07F00 		and	r0, r3, #127
1401:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5892              		.loc 1 1401 11 view .LVU1655
 5893 001c 02EB0010 		add	r0, r2, r0, lsl #4
1410:src/xeq.c     **** 
 5894              		.loc 1 1410 1 view .LVU1656
 5895 0020 0BB0     		add	sp, sp, #44
 5896              		.cfi_remember_state
 5897              		.cfi_def_cfa_offset 4
 5898              		@ sp needed
 5899 0022 5DF804FB 		ldr	pc, [sp], #4
 5900              	.L484:
 5901              		.cfi_restore_state
1405:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5902              		.loc 1 1405 3 is_stmt 1 view .LVU1657
1405:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5903              		.loc 1 1405 6 is_stmt 0 view .LVU1658
 5904 0026 1A06     		lsls	r2, r3, #24
 5905 0028 13D4     		bmi	.L487
1406:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5906              		.loc 1 1406 4 is_stmt 1 view .LVU1659
1406:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5907              		.loc 1 1406 11 is_stmt 0 view .LVU1660
 5908 002a 1448     		ldr	r0, .L489+8
 5909 002c 00EBC300 		add	r0, r0, r3, lsl #3
1410:src/xeq.c     **** 
 5910              		.loc 1 1410 1 view .LVU1661
 5911 0030 0BB0     		add	sp, sp, #44
 5912              		.cfi_remember_state
 5913              		.cfi_def_cfa_offset 4
 5914              		@ sp needed
 5915 0032 5DF804FB 		ldr	pc, [sp], #4
 5916              	.L485:
 5917              		.cfi_restore_state
1402:src/xeq.c     **** 	}
 5918              		.loc 1 1402 3 is_stmt 1 view .LVU1662
 5919              	.LVL429:
 5920              	.LBB1704:
ARM GAS  /tmp/ccBFDvgN.s 			page 232


 5921              	.LBI1704:
 654:src/xeq.c     **** 	decNumber temp;
 5922              		.loc 1 654 6 view .LVU1663
 5923              	.LBB1705:
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 5924              		.loc 1 655 2 view .LVU1664
 656:src/xeq.c     **** }
 5925              		.loc 1 656 2 view .LVU1665
 5926              	.LBE1705:
 5927              	.LBE1704:
1402:src/xeq.c     **** 	}
 5928              		.loc 1 1402 3 is_stmt 0 view .LVU1666
 5929 0036 1148     		ldr	r0, .L489+8
 5930              	.LBB1707:
 5931              	.LBB1706:
 656:src/xeq.c     **** }
 5932              		.loc 1 656 27 view .LVU1667
 5933 0038 01A9     		add	r1, sp, #4
 5934              	.LVL430:
 656:src/xeq.c     **** }
 5935              		.loc 1 656 27 view .LVU1668
 5936 003a 00EBC300 		add	r0, r0, r3, lsl #3
 5937 003e FFF7FEFF 		bl	decimal64ToNumber
 5938              	.LVL431:
 656:src/xeq.c     **** }
 5939              		.loc 1 656 27 view .LVU1669
 5940 0042 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 5941              		.loc 1 656 2 view .LVU1670
 5942 0044 0E48     		ldr	r0, .L489+12
 5943 0046 FFF7FEFF 		bl	packed128_from_number
 5944              	.LVL432:
 5945              	.LBE1706:
 5946              	.LBE1707:
1409:src/xeq.c     **** }
 5947              		.loc 1 1409 9 view .LVU1671
 5948 004a 0D48     		ldr	r0, .L489+12
1410:src/xeq.c     **** 
 5949              		.loc 1 1410 1 view .LVU1672
 5950 004c 0BB0     		add	sp, sp, #44
 5951              		.cfi_remember_state
 5952              		.cfi_def_cfa_offset 4
 5953              		@ sp needed
 5954 004e 5DF804FB 		ldr	pc, [sp], #4
 5955              	.LVL433:
 5956              	.L487:
 5957              		.cfi_restore_state
1407:src/xeq.c     **** 	}
 5958              		.loc 1 1407 3 is_stmt 1 view .LVU1673
 5959              	.LBB1708:
 5960              	.LBI1708:
 648:src/xeq.c     **** 	decNumber temp;
 5961              		.loc 1 648 6 view .LVU1674
 5962              	.LBB1709:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 5963              		.loc 1 649 2 view .LVU1675
 650:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 233


 5964              		.loc 1 650 2 view .LVU1676
 5965              	.LBE1709:
 5966              	.LBE1708:
1407:src/xeq.c     **** 	}
 5967              		.loc 1 1407 3 is_stmt 0 view .LVU1677
 5968 0052 0948     		ldr	r0, .L489+4
1407:src/xeq.c     **** 	}
 5969              		.loc 1 1407 55 view .LVU1678
 5970 0054 03F18053 		add	r3, r3, #268435456
 5971              	.LVL434:
1407:src/xeq.c     **** 	}
 5972              		.loc 1 1407 55 view .LVU1679
 5973 0058 803B     		subs	r3, r3, #128
 5974              	.LVL435:
 5975              	.LBB1711:
 5976              	.LBB1710:
 650:src/xeq.c     **** }
 5977              		.loc 1 650 24 view .LVU1680
 5978 005a 00EB0310 		add	r0, r0, r3, lsl #4
 5979 005e 01A9     		add	r1, sp, #4
 5980              	.LVL436:
 650:src/xeq.c     **** }
 5981              		.loc 1 650 24 view .LVU1681
 5982 0060 FFF7FEFF 		bl	decimal128ToNumber
 5983              	.LVL437:
 650:src/xeq.c     **** }
 5984              		.loc 1 650 24 view .LVU1682
 5985 0064 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 5986              		.loc 1 650 2 view .LVU1683
 5987 0066 0648     		ldr	r0, .L489+12
 5988 0068 FFF7FEFF 		bl	packed_from_number
 5989              	.LVL438:
 5990              	.LBE1710:
 5991              	.LBE1711:
1409:src/xeq.c     **** }
 5992              		.loc 1 1409 9 view .LVU1684
 5993 006c 0448     		ldr	r0, .L489+12
 5994              	.LVL439:
1410:src/xeq.c     **** 
 5995              		.loc 1 1410 1 view .LVU1685
 5996 006e 0BB0     		add	sp, sp, #44
 5997              		.cfi_def_cfa_offset 4
 5998              		@ sp needed
 5999 0070 5DF804FB 		ldr	pc, [sp], #4
 6000              	.L490:
 6001              		.align	2
 6002              	.L489:
 6003 0074 00000000 		.word	cnsts
 6004 0078 00000000 		.word	cnsts_d128
 6005 007c 00000000 		.word	cnsts_d64
 6006 0080 00000000 		.word	.LANCHOR2
 6007              		.cfi_endproc
 6008              	.LFE93:
 6010              		.section	.text.get_reg_n,"ax",%progbits
 6011              		.align	1
 6012              		.p2align 2,,3
ARM GAS  /tmp/ccBFDvgN.s 			page 234


 6013              		.global	get_reg_n
 6014              		.syntax unified
 6015              		.thumb
 6016              		.thumb_func
 6017              		.fpu fpv4-sp-d16
 6019              	get_reg_n:
 6020              	.LVL440:
 6021              	.LFB91:
1364:src/xeq.c     **** 	const int dbl = is_dblmode();
 6022              		.loc 1 1364 28 is_stmt 1 view -0
 6023              		.cfi_startproc
 6024              		@ args = 0, pretend = 0, frame = 0
 6025              		@ frame_needed = 0, uses_anonymous_args = 0
 6026              		@ link register save eliminated.
1365:src/xeq.c     **** 
 6027              		.loc 1 1365 2 view .LVU1687
 6028              	.LBB1712:
 6029              	.LBI1712:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6030              		.loc 1 1118 5 view .LVU1688
 6031              	.LBB1713:
1119:src/xeq.c     **** }
 6032              		.loc 1 1119 2 view .LVU1689
1119:src/xeq.c     **** }
 6033              		.loc 1 1119 12 is_stmt 0 view .LVU1690
 6034 0000 294B     		ldr	r3, .L506
 6035 0002 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 6036              		.loc 1 1119 24 view .LVU1691
 6037 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 6038 0008 44F20103 		movw	r3, #16385
 6039 000c 0B40     		ands	r3, r3, r1
 6040 000e A3F58041 		sub	r1, r3, #16384
 6041 0012 B1FA81F1 		clz	r1, r1
 6042              	.LBE1713:
 6043              	.LBE1712:
1367:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6044              		.loc 1 1367 5 view .LVU1692
 6045 0016 B0F5FA6F 		cmp	r0, #2000
 6046              	.LBB1715:
 6047              	.LBB1714:
1119:src/xeq.c     **** }
 6048              		.loc 1 1119 24 view .LVU1693
 6049 001a 4FEA5111 		lsr	r1, r1, #5
 6050              	.LVL441:
1119:src/xeq.c     **** }
 6051              		.loc 1 1119 24 view .LVU1694
 6052              	.LBE1714:
 6053              	.LBE1715:
1367:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6054              		.loc 1 1367 2 is_stmt 1 view .LVU1695
1367:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6055              		.loc 1 1367 5 is_stmt 0 view .LVU1696
 6056 001e 26DA     		bge	.L503
1371:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6057              		.loc 1 1371 2 is_stmt 1 view .LVU1697
1371:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
ARM GAS  /tmp/ccBFDvgN.s 			page 235


 6058              		.loc 1 1371 5 is_stmt 0 view .LVU1698
 6059 0020 B0F57A7F 		cmp	r0, #1000
 6060 0024 13DA     		bge	.L504
1374:src/xeq.c     **** 		// local register on the return stack
 6061              		.loc 1 1374 2 is_stmt 1 view .LVU1699
1374:src/xeq.c     **** 		// local register on the return stack
 6062              		.loc 1 1374 5 is_stmt 0 view .LVU1700
 6063 0026 6F28     		cmp	r0, #111
1364:src/xeq.c     **** 	const int dbl = is_dblmode();
 6064              		.loc 1 1364 28 view .LVU1701
 6065 0028 70B4     		push	{r4, r5, r6}
 6066              		.cfi_def_cfa_offset 12
 6067              		.cfi_offset 4, -12
 6068              		.cfi_offset 5, -8
 6069              		.cfi_offset 6, -4
1374:src/xeq.c     **** 		// local register on the return stack
 6070              		.loc 1 1374 5 view .LVU1702
 6071 002a 03DD     		ble	.L494
 6072              	.LBB1716:
 6073              	.LBI1716:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 6074              		.loc 1 233 5 is_stmt 1 view .LVU1703
 6075              	.LBE1716:
 234:src/xeq.c     **** }
 6076              		.loc 1 234 2 view .LVU1704
 6077              	.LVL442:
 6078              	.LBB1729:
 6079              	.LBB1717:
 6080              	.LBI1717:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 6081              		.loc 1 225 5 view .LVU1705
 6082              	.LBB1718:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 6083              		.loc 1 226 2 view .LVU1706
 6084              	.LBE1718:
 6085              	.LBE1717:
 6086              	.LBE1729:
1119:src/xeq.c     **** }
 6087              		.loc 1 1119 2 view .LVU1707
 6088              	.LBB1730:
 6089              	.LBB1727:
 6090              	.LBB1725:
 227:src/xeq.c     **** }
 6091              		.loc 1 227 2 view .LVU1708
 6092              	.LBB1719:
 6093              	.LBI1719:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 6094              		.loc 1 217 5 view .LVU1709
 6095              	.LBB1720:
 218:src/xeq.c     **** }
 6096              		.loc 1 218 2 view .LVU1710
 218:src/xeq.c     **** }
 6097              		.loc 1 218 9 is_stmt 0 view .LVU1711
 6098 002c B2F9DE47 		ldrsh	r4, [r2, #2014]
 218:src/xeq.c     **** }
 6099              		.loc 1 218 57 view .LVU1712
 6100 0030 002C     		cmp	r4, #0
ARM GAS  /tmp/ccBFDvgN.s 			page 236


 6101 0032 20DB     		blt	.L505
 6102              	.LVL443:
 6103              	.L494:
 218:src/xeq.c     **** }
 6104              		.loc 1 218 57 view .LVU1713
 6105              	.LBE1720:
 6106              	.LBE1719:
 6107              	.LBE1725:
 6108              	.LBE1727:
 6109              	.LBE1730:
1381:src/xeq.c     **** }
 6110              		.loc 1 1381 2 is_stmt 1 view .LVU1714
1381:src/xeq.c     **** }
 6111              		.loc 1 1381 55 is_stmt 0 view .LVU1715
 6112 0034 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
 6113              	.LVL444:
1381:src/xeq.c     **** }
 6114              		.loc 1 1381 37 view .LVU1716
 6115 0038 02F22C41 		addw	r1, r2, #1068
1381:src/xeq.c     **** }
 6116              		.loc 1 1381 55 view .LVU1717
 6117 003c C3F16403 		rsb	r3, r3, #100
1382:src/xeq.c     **** 
 6118              		.loc 1 1382 1 view .LVU1718
 6119 0040 70BC     		pop	{r4, r5, r6}
 6120              		.cfi_restore 6
 6121              		.cfi_restore 5
 6122              		.cfi_restore 4
 6123              		.cfi_def_cfa_offset 0
1381:src/xeq.c     **** }
 6124              		.loc 1 1381 22 view .LVU1719
 6125 0042 01EBC301 		add	r1, r1, r3, lsl #3
 6126 0046 02F24C72 		addw	r2, r2, #1868
 6127              	.LVL445:
1381:src/xeq.c     **** }
 6128              		.loc 1 1381 22 view .LVU1720
 6129 004a FFF7FEBF 		b	reg_address
 6130              	.LVL446:
 6131              	.L504:
1372:src/xeq.c     **** 
 6132              		.loc 1 1372 3 is_stmt 1 view .LVU1721
 6133              	.LBB1731:
 6134              	.LBI1731:
1385:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 6135              		.loc 1 1385 11 view .LVU1722
 6136              	.LBB1732:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6137              		.loc 1 1386 2 view .LVU1723
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6138              		.loc 1 1386 37 is_stmt 0 view .LVU1724
 6139 004e 174B     		ldr	r3, .L506+4
 6140 0050 1A68     		ldr	r2, [r3]
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6141              		.loc 1 1386 68 view .LVU1725
 6142 0052 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6143              		.loc 1 1386 37 view .LVU1726
ARM GAS  /tmp/ccBFDvgN.s 			page 237


 6144 0056 02F22C41 		addw	r1, r2, #1068
 6145              	.LVL447:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6146              		.loc 1 1386 68 view .LVU1727
 6147 005a C3F16403 		rsb	r3, r3, #100
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6148              		.loc 1 1386 22 view .LVU1728
 6149 005e A0F57A70 		sub	r0, r0, #1000
 6150              	.LVL448:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6151              		.loc 1 1386 22 view .LVU1729
 6152 0062 01EBC301 		add	r1, r1, r3, lsl #3
 6153 0066 02F24C72 		addw	r2, r2, #1868
 6154 006a FFF7FEBF 		b	reg_address
 6155              	.LVL449:
 6156              	.L503:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6157              		.loc 1 1386 22 view .LVU1730
 6158              	.LBE1732:
 6159              	.LBE1731:
1368:src/xeq.c     **** 		return get_const(n, dbl);
 6160              		.loc 1 1368 3 is_stmt 1 view .LVU1731
1369:src/xeq.c     **** 	}
 6161              		.loc 1 1369 3 view .LVU1732
1369:src/xeq.c     **** 	}
 6162              		.loc 1 1369 10 is_stmt 0 view .LVU1733
 6163 006e A0F5FA60 		sub	r0, r0, #2000
 6164              	.LVL450:
1369:src/xeq.c     **** 	}
 6165              		.loc 1 1369 10 view .LVU1734
 6166 0072 FFF7FEBF 		b	get_const
 6167              	.LVL451:
 6168              	.L505:
 6169              		.cfi_def_cfa_offset 12
 6170              		.cfi_offset 4, -12
 6171              		.cfi_offset 5, -8
 6172              		.cfi_offset 6, -4
 6173              	.LBB1733:
 6174              	.LBB1728:
 6175              	.LBB1726:
 6176              	.LBB1723:
 6177              	.LBB1721:
 218:src/xeq.c     **** }
 6178              		.loc 1 218 25 view .LVU1735
 6179 0076 0E4D     		ldr	r5, .L506+8
 6180 0078 2D68     		ldr	r5, [r5]
 6181              	.LVL452:
 218:src/xeq.c     **** }
 6182              		.loc 1 218 57 view .LVU1736
 6183 007a 35F81460 		ldrh	r6, [r5, r4, lsl #1]
 6184              	.LBE1721:
 6185              	.LBE1723:
 227:src/xeq.c     **** }
 6186              		.loc 1 227 30 view .LVU1737
 6187 007e 0231     		adds	r1, r1, #2
 6188              	.LVL453:
 6189              	.LBB1724:
ARM GAS  /tmp/ccBFDvgN.s 			page 238


 6190              	.LBB1722:
 218:src/xeq.c     **** }
 6191              		.loc 1 218 57 view .LVU1738
 6192 0080 C6F30B06 		ubfx	r6, r6, #0, #12
 6193              	.LBE1722:
 6194              	.LBE1724:
 6195              	.LBE1726:
 6196              	.LBE1728:
 6197              	.LBE1733:
1374:src/xeq.c     **** 		// local register on the return stack
 6198              		.loc 1 1374 26 view .LVU1739
 6199 0084 56FA01F1 		asrs	r1, r6, r1
 6200              	.LVL454:
1374:src/xeq.c     **** 		// local register on the return stack
 6201              		.loc 1 1374 26 view .LVU1740
 6202 0088 D4D0     		beq	.L494
1376:src/xeq.c     **** 		if (dbl)
 6203              		.loc 1 1376 3 is_stmt 1 view .LVU1741
1376:src/xeq.c     **** 		if (dbl)
 6204              		.loc 1 1376 5 is_stmt 0 view .LVU1742
 6205 008a 7038     		subs	r0, r0, #112
 6206              	.LVL455:
1377:src/xeq.c     **** 			n <<= 1;
 6207              		.loc 1 1377 3 is_stmt 1 view .LVU1743
1377:src/xeq.c     **** 			n <<= 1;
 6208              		.loc 1 1377 6 is_stmt 0 view .LVU1744
 6209 008c B3F5804F 		cmp	r3, #16384
1378:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6210              		.loc 1 1378 4 is_stmt 1 view .LVU1745
1378:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6211              		.loc 1 1378 6 is_stmt 0 view .LVU1746
 6212 0090 08BF     		it	eq
 6213 0092 4000     		lsleq	r0, r0, #1
 6214              	.LVL456:
1379:src/xeq.c     **** 	}
 6215              		.loc 1 1379 3 is_stmt 1 view .LVU1747
1379:src/xeq.c     **** 	}
 6216              		.loc 1 1379 67 is_stmt 0 view .LVU1748
 6217 0094 0234     		adds	r4, r4, #2
1379:src/xeq.c     **** 	}
 6218              		.loc 1 1379 48 view .LVU1749
 6219 0096 24F00104 		bic	r4, r4, #1
1379:src/xeq.c     **** 	}
 6220              		.loc 1 1379 83 view .LVU1750
 6221 009a C000     		lsls	r0, r0, #3
 6222              	.LVL457:
1379:src/xeq.c     **** 	}
 6223              		.loc 1 1379 10 view .LVU1751
 6224 009c 0223     		movs	r3, #2
 6225              	.LVL458:
1379:src/xeq.c     **** 	}
 6226              		.loc 1 1379 10 view .LVU1752
 6227 009e 14FB0300 		smlabb	r0, r4, r3, r0
 6228 00a2 2844     		add	r0, r0, r5
1382:src/xeq.c     **** 
 6229              		.loc 1 1382 1 view .LVU1753
 6230 00a4 70BC     		pop	{r4, r5, r6}
ARM GAS  /tmp/ccBFDvgN.s 			page 239


 6231              		.cfi_restore 6
 6232              		.cfi_restore 5
 6233              		.cfi_restore 4
 6234              		.cfi_def_cfa_offset 0
 6235 00a6 7047     		bx	lr
 6236              	.L507:
 6237              		.align	2
 6238              	.L506:
 6239 00a8 00000000 		.word	main_ram
 6240 00ac 00000000 		.word	backup_ram
 6241 00b0 00000000 		.word	RetStk
 6242              		.cfi_endproc
 6243              	.LFE91:
 6245              		.section	.text.get_stack,"ax",%progbits
 6246              		.align	1
 6247              		.p2align 2,,3
 6248              		.global	get_stack
 6249              		.syntax unified
 6250              		.thumb
 6251              		.thumb_func
 6252              		.fpu fpv4-sp-d16
 6254              	get_stack:
 6255              	.LVL459:
 6256              	.LFB43:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6257              		.loc 1 718 30 is_stmt 1 view -0
 6258              		.cfi_startproc
 6259              		@ args = 0, pretend = 0, frame = 0
 6260              		@ frame_needed = 0, uses_anonymous_args = 0
 6261              		@ link register save eliminated.
 719:src/xeq.c     **** }
 6262              		.loc 1 719 2 view .LVU1755
 719:src/xeq.c     **** }
 6263              		.loc 1 719 9 is_stmt 0 view .LVU1756
 6264 0000 6430     		adds	r0, r0, #100
 6265              	.LVL460:
 719:src/xeq.c     **** }
 6266              		.loc 1 719 9 view .LVU1757
 6267 0002 FFF7FEBF 		b	get_reg_n
 6268              	.LVL461:
 719:src/xeq.c     **** }
 6269              		.loc 1 719 9 view .LVU1758
 6270              		.cfi_endproc
 6271              	.LFE43:
 6273 0006 00BF     		.section	.text.lift,"ax",%progbits
 6274              		.align	1
 6275              		.p2align 2,,3
 6276              		.global	lift
 6277              		.syntax unified
 6278              		.thumb
 6279              		.thumb_func
 6280              		.fpu fpv4-sp-d16
 6282              	lift:
 6283              	.LFB47:
 736:src/xeq.c     **** 	const int n = stack_size();
 6284              		.loc 1 736 17 is_stmt 1 view -0
 6285              		.cfi_startproc
ARM GAS  /tmp/ccBFDvgN.s 			page 240


 6286              		@ args = 0, pretend = 0, frame = 0
 6287              		@ frame_needed = 0, uses_anonymous_args = 0
 737:src/xeq.c     **** 	int i;
 6288              		.loc 1 737 2 view .LVU1760
 6289              	.LBB1734:
 6290              	.LBI1734:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6291              		.loc 1 712 5 view .LVU1761
 6292              	.LBB1735:
 713:src/xeq.c     **** 		return 4;
 6293              		.loc 1 713 2 view .LVU1762
 6294              	.LBE1735:
 6295              	.LBE1734:
 736:src/xeq.c     **** 	const int n = stack_size();
 6296              		.loc 1 736 17 is_stmt 0 view .LVU1763
 6297 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6298              		.cfi_def_cfa_offset 24
 6299              		.cfi_offset 3, -24
 6300              		.cfi_offset 4, -20
 6301              		.cfi_offset 5, -16
 6302              		.cfi_offset 6, -12
 6303              		.cfi_offset 7, -8
 6304              		.cfi_offset 14, -4
 6305              	.LBB1740:
 6306              	.LBB1738:
 713:src/xeq.c     **** 		return 4;
 6307              		.loc 1 713 8 view .LVU1764
 6308 0002 184E     		ldr	r6, .L520
 6309 0004 3368     		ldr	r3, [r6]
 713:src/xeq.c     **** 		return 4;
 6310              		.loc 1 713 6 view .LVU1765
 6311 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 6312              		.loc 1 713 5 view .LVU1766
 6313 000a 1207     		lsls	r2, r2, #28
 6314 000c 28D5     		bpl	.L513
 6315              	.LBB1736:
 6316              	.LBI1736:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6317              		.loc 1 185 5 is_stmt 1 view .LVU1767
 6318              	.LBB1737:
 186:src/xeq.c     **** }
 6319              		.loc 1 186 2 view .LVU1768
 186:src/xeq.c     **** }
 6320              		.loc 1 186 9 is_stmt 0 view .LVU1769
 6321 000e B3F8E037 		ldrh	r3, [r3, #2016]
 6322              	.LBE1737:
 6323              	.LBE1736:
 713:src/xeq.c     **** 		return 4;
 6324              		.loc 1 713 27 view .LVU1770
 6325 0012 9B0B     		lsrs	r3, r3, #14
 6326 0014 032B     		cmp	r3, #3
 6327 0016 1BD0     		beq	.L519
 6328 0018 0724     		movs	r4, #7
 6329              	.L510:
 6330              	.LBE1738:
 6331              	.LBE1740:
ARM GAS  /tmp/ccBFDvgN.s 			page 241


 738:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 6332              		.loc 1 738 2 is_stmt 1 view .LVU1771
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6333              		.loc 1 739 2 view .LVU1772
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6334              		.loc 1 739 14 view .LVU1773
 6335 001a 6434     		adds	r4, r4, #100
 6336              	.LBB1741:
 6337              	.LBB1742:
 6338              	.LBB1743:
 6339              	.LBB1744:
1119:src/xeq.c     **** }
 6340              		.loc 1 1119 24 is_stmt 0 view .LVU1774
 6341 001c 44F20107 		movw	r7, #16385
 6342              	.L512:
 6343              	.LVL462:
1119:src/xeq.c     **** }
 6344              		.loc 1 1119 24 view .LVU1775
 6345              	.LBE1744:
 6346              	.LBE1743:
 6347              	.LBE1742:
 6348              	.LBE1741:
 740:src/xeq.c     **** }
 6349              		.loc 1 740 3 is_stmt 1 view .LVU1776
 6350              	.LBB1751:
 6351              	.LBI1751:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6352              		.loc 1 718 11 view .LVU1777
 6353              	.LBB1752:
 719:src/xeq.c     **** }
 6354              		.loc 1 719 2 view .LVU1778
 719:src/xeq.c     **** }
 6355              		.loc 1 719 9 is_stmt 0 view .LVU1779
 6356 0020 2046     		mov	r0, r4
 6357 0022 FFF7FEFF 		bl	get_reg_n
 6358              	.LVL463:
 6359              	.LBE1752:
 6360              	.LBE1751:
 6361              	.LBB1754:
 6362              	.LBB1755:
 6363 0026 013C     		subs	r4, r4, #1
 6364              	.LVL464:
 719:src/xeq.c     **** }
 6365              		.loc 1 719 9 view .LVU1780
 6366              	.LBE1755:
 6367              	.LBE1754:
 6368              	.LBB1759:
 6369              	.LBB1753:
 6370 0028 0546     		mov	r5, r0
 6371              	.LBE1753:
 6372              	.LBE1759:
 6373              	.LBB1760:
 6374              	.LBB1756:
 6375 002a 2046     		mov	r0, r4
 6376              	.LVL465:
 719:src/xeq.c     **** }
 6377              		.loc 1 719 9 view .LVU1781
ARM GAS  /tmp/ccBFDvgN.s 			page 242


 6378              	.LBE1756:
 6379              	.LBI1754:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6380              		.loc 1 718 11 is_stmt 1 view .LVU1782
 6381              	.LBB1757:
 719:src/xeq.c     **** }
 6382              		.loc 1 719 2 view .LVU1783
 719:src/xeq.c     **** }
 6383              		.loc 1 719 9 is_stmt 0 view .LVU1784
 6384 002c FFF7FEFF 		bl	get_reg_n
 6385              	.LVL466:
 719:src/xeq.c     **** }
 6386              		.loc 1 719 9 view .LVU1785
 6387              	.LBE1757:
 6388              	.LBE1760:
 6389              	.LBB1761:
 6390              	.LBB1749:
 6391              	.LBB1747:
 6392              	.LBB1745:
1119:src/xeq.c     **** }
 6393              		.loc 1 1119 24 view .LVU1786
 6394 0030 3368     		ldr	r3, [r6]
 6395 0032 B3F8E837 		ldrh	r3, [r3, #2024]
 6396              	.LBE1745:
 6397              	.LBE1747:
 727:src/xeq.c     **** }
 6398              		.loc 1 727 2 view .LVU1787
 6399 0036 3B40     		ands	r3, r3, r7
 6400 0038 B3F5804F 		cmp	r3, #16384
 6401              	.LBE1749:
 6402              	.LBE1761:
 6403              	.LBB1762:
 6404              	.LBB1758:
 719:src/xeq.c     **** }
 6405              		.loc 1 719 9 view .LVU1788
 6406 003c 0146     		mov	r1, r0
 6407              	.LVL467:
 719:src/xeq.c     **** }
 6408              		.loc 1 719 9 view .LVU1789
 6409              	.LBE1758:
 6410              	.LBE1762:
 6411              	.LBB1763:
 6412              	.LBI1741:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6413              		.loc 1 726 6 is_stmt 1 view .LVU1790
 6414              	.LBB1750:
 727:src/xeq.c     **** }
 6415              		.loc 1 727 2 view .LVU1791
 6416              	.LBB1748:
 6417              	.LBI1743:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6418              		.loc 1 1118 5 view .LVU1792
 6419              	.LBB1746:
1119:src/xeq.c     **** }
 6420              		.loc 1 1119 2 view .LVU1793
 6421              	.LBE1746:
 6422              	.LBE1748:
ARM GAS  /tmp/ccBFDvgN.s 			page 243


 727:src/xeq.c     **** }
 6423              		.loc 1 727 2 is_stmt 0 view .LVU1794
 6424 003e 0CBF     		ite	eq
 6425 0040 1022     		moveq	r2, #16
 6426 0042 0822     		movne	r2, #8
 6427 0044 2846     		mov	r0, r5
 6428              	.LVL468:
 727:src/xeq.c     **** }
 6429              		.loc 1 727 2 view .LVU1795
 6430 0046 FFF7FEFF 		bl	xcopy
 6431              	.LVL469:
 727:src/xeq.c     **** }
 6432              		.loc 1 727 2 view .LVU1796
 6433              	.LBE1750:
 6434              	.LBE1763:
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6435              		.loc 1 739 19 is_stmt 1 view .LVU1797
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6436              		.loc 1 739 14 view .LVU1798
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6437              		.loc 1 739 2 is_stmt 0 view .LVU1799
 6438 004a 642C     		cmp	r4, #100
 6439 004c E8D1     		bne	.L512
 741:src/xeq.c     **** 
 6440              		.loc 1 741 1 view .LVU1800
 6441 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6442              	.LVL470:
 6443              	.L519:
 6444              	.LBB1764:
 6445              	.LBB1739:
 713:src/xeq.c     **** 		return 4;
 6446              		.loc 1 713 44 view .LVU1801
 6447 0050 054B     		ldr	r3, .L520+4
 713:src/xeq.c     **** 		return 4;
 6448              		.loc 1 713 41 view .LVU1802
 6449 0052 93F90130 		ldrsb	r3, [r3, #1]
 6450 0056 002B     		cmp	r3, #0
 6451 0058 B4BF     		ite	lt
 6452 005a 0724     		movlt	r4, #7
 6453 005c 0324     		movge	r4, #3
 6454 005e DCE7     		b	.L510
 6455              	.L513:
 6456 0060 0324     		movs	r4, #3
 6457 0062 DAE7     		b	.L510
 6458              	.L521:
 6459              		.align	2
 6460              	.L520:
 6461 0064 00000000 		.word	main_ram
 6462 0068 00000000 		.word	XromParams
 6463              	.LBE1739:
 6464              	.LBE1764:
 6465              		.cfi_endproc
 6466              	.LFE47:
 6468              		.section	.text.lift_if_enabled,"ax",%progbits
 6469              		.align	1
 6470              		.p2align 2,,3
 6471              		.global	lift_if_enabled
ARM GAS  /tmp/ccBFDvgN.s 			page 244


 6472              		.syntax unified
 6473              		.thumb
 6474              		.thumb_func
 6475              		.fpu fpv4-sp-d16
 6477              	lift_if_enabled:
 6478              	.LFB49:
 747:src/xeq.c     **** 	if (get_lift())
 6479              		.loc 1 747 28 is_stmt 1 view -0
 6480              		.cfi_startproc
 6481              		@ args = 0, pretend = 0, frame = 0
 6482              		@ frame_needed = 0, uses_anonymous_args = 0
 6483              		@ link register save eliminated.
 748:src/xeq.c     **** 		lift();
 6484              		.loc 1 748 2 view .LVU1804
 6485              	.LBB1765:
 6486              	.LBI1765:
 743:src/xeq.c     **** 	return State2.state_lift;
 6487              		.loc 1 743 12 view .LVU1805
 6488              	.LBB1766:
 744:src/xeq.c     **** }
 6489              		.loc 1 744 2 view .LVU1806
 744:src/xeq.c     **** }
 6490              		.loc 1 744 15 is_stmt 0 view .LVU1807
 6491 0000 034B     		ldr	r3, .L525
 6492 0002 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 6493              	.LBE1766:
 6494              	.LBE1765:
 748:src/xeq.c     **** 		lift();
 6495              		.loc 1 748 5 view .LVU1808
 6496 0004 5B06     		lsls	r3, r3, #25
 6497 0006 00D4     		bmi	.L524
 750:src/xeq.c     **** 
 6498              		.loc 1 750 1 view .LVU1809
 6499 0008 7047     		bx	lr
 6500              	.L524:
 749:src/xeq.c     **** }
 6501              		.loc 1 749 3 is_stmt 1 view .LVU1810
 6502 000a FFF7FEBF 		b	lift
 6503              	.LVL471:
 6504              	.L526:
 6505 000e 00BF     		.align	2
 6506              	.L525:
 6507 0010 00000000 		.word	StateWhileOn
 6508              		.cfi_endproc
 6509              	.LFE49:
 6511              		.section	.text.lift2_if_enabled,"ax",%progbits
 6512              		.align	1
 6513              		.p2align 2,,3
 6514              		.syntax unified
 6515              		.thumb
 6516              		.thumb_func
 6517              		.fpu fpv4-sp-d16
 6519              	lift2_if_enabled:
 6520              	.LFB50:
 752:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6521              		.loc 1 752 36 view -0
 6522              		.cfi_startproc
ARM GAS  /tmp/ccBFDvgN.s 			page 245


 6523              		@ args = 0, pretend = 0, frame = 0
 6524              		@ frame_needed = 0, uses_anonymous_args = 0
 754:src/xeq.c     **** 	if (C_LOCKED) {
 6525              		.loc 1 754 2 view .LVU1812
 6526              	.LBB1781:
 6527              	.LBI1781:
 747:src/xeq.c     **** 	if (get_lift())
 6528              		.loc 1 747 6 view .LVU1813
 6529              	.LBB1782:
 748:src/xeq.c     **** 		lift();
 6530              		.loc 1 748 2 view .LVU1814
 6531              	.LBB1783:
 6532              	.LBI1783:
 743:src/xeq.c     **** 	return State2.state_lift;
 6533              		.loc 1 743 12 view .LVU1815
 6534              	.LBB1784:
 744:src/xeq.c     **** }
 6535              		.loc 1 744 2 view .LVU1816
 6536              	.LBE1784:
 6537              	.LBE1783:
 6538              	.LBE1782:
 6539              	.LBE1781:
 752:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6540              		.loc 1 752 36 is_stmt 0 view .LVU1817
 6541 0000 10B5     		push	{r4, lr}
 6542              		.cfi_def_cfa_offset 8
 6543              		.cfi_offset 4, -8
 6544              		.cfi_offset 14, -4
 6545              	.LBB1789:
 6546              	.LBB1787:
 6547              	.LBB1786:
 6548              	.LBB1785:
 744:src/xeq.c     **** }
 6549              		.loc 1 744 15 view .LVU1818
 6550 0002 0F4C     		ldr	r4, .L538
 6551 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6552              	.LBE1785:
 6553              	.LBE1786:
 748:src/xeq.c     **** 		lift();
 6554              		.loc 1 748 5 view .LVU1819
 6555 0006 5A06     		lsls	r2, r3, #25
 6556 0008 08D4     		bmi	.L537
 6557              	.LBE1787:
 6558              	.LBE1789:
 755:src/xeq.c     **** 		lift_if_enabled();
 6559              		.loc 1 755 2 is_stmt 1 view .LVU1820
 755:src/xeq.c     **** 		lift_if_enabled();
 6560              		.loc 1 755 6 is_stmt 0 view .LVU1821
 6561 000a 0E4B     		ldr	r3, .L538+4
 6562 000c 1B68     		ldr	r3, [r3]
 6563 000e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 755:src/xeq.c     **** 		lift_if_enabled();
 6564              		.loc 1 755 5 view .LVU1822
 6565 0012 03F04103 		and	r3, r3, #65
 6566 0016 412B     		cmp	r3, #65
 6567 0018 0DD1     		bne	.L530
 6568              	.L527:
ARM GAS  /tmp/ccBFDvgN.s 			page 246


 765:src/xeq.c     **** 
 6569              		.loc 1 765 1 view .LVU1823
 6570 001a 10BD     		pop	{r4, pc}
 6571              	.L537:
 6572              	.LBB1790:
 6573              	.LBB1788:
 749:src/xeq.c     **** }
 6574              		.loc 1 749 3 is_stmt 1 view .LVU1824
 6575 001c FFF7FEFF 		bl	lift
 6576              	.LVL472:
 6577              	.LBE1788:
 6578              	.LBE1790:
 755:src/xeq.c     **** 		lift_if_enabled();
 6579              		.loc 1 755 2 view .LVU1825
 755:src/xeq.c     **** 		lift_if_enabled();
 6580              		.loc 1 755 6 is_stmt 0 view .LVU1826
 6581 0020 084B     		ldr	r3, .L538+4
 6582 0022 1B68     		ldr	r3, [r3]
 6583 0024 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 755:src/xeq.c     **** 		lift_if_enabled();
 6584              		.loc 1 755 5 view .LVU1827
 6585 0028 03F04103 		and	r3, r3, #65
 6586 002c 412B     		cmp	r3, #65
 6587 002e 02D1     		bne	.L530
 6588              	.LBB1791:
 6589              	.LBI1791:
 752:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6590              		.loc 1 752 13 is_stmt 1 view .LVU1828
 6591              	.LBE1791:
 756:src/xeq.c     **** 	}
 6592              		.loc 1 756 3 view .LVU1829
 6593              	.LBB1798:
 6594              	.LBB1792:
 6595              	.LBI1792:
 747:src/xeq.c     **** 	if (get_lift())
 6596              		.loc 1 747 6 view .LVU1830
 6597              	.LBB1793:
 748:src/xeq.c     **** 		lift();
 6598              		.loc 1 748 2 view .LVU1831
 6599              	.LBB1794:
 6600              	.LBI1794:
 743:src/xeq.c     **** 	return State2.state_lift;
 6601              		.loc 1 743 12 view .LVU1832
 6602              	.LBB1795:
 744:src/xeq.c     **** }
 6603              		.loc 1 744 2 view .LVU1833
 744:src/xeq.c     **** }
 6604              		.loc 1 744 15 is_stmt 0 view .LVU1834
 6605 0030 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6606              	.LBE1795:
 6607              	.LBE1794:
 748:src/xeq.c     **** 		lift();
 6608              		.loc 1 748 5 view .LVU1835
 6609 0032 5B06     		lsls	r3, r3, #25
 6610 0034 F1D5     		bpl	.L527
 6611              	.L530:
 749:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 247


 6612              		.loc 1 749 3 is_stmt 1 view .LVU1836
 6613              	.LBE1793:
 6614              	.LBE1792:
 6615              	.LBE1798:
 765:src/xeq.c     **** 
 6616              		.loc 1 765 1 is_stmt 0 view .LVU1837
 6617 0036 BDE81040 		pop	{r4, lr}
 6618              		.cfi_restore 14
 6619              		.cfi_restore 4
 6620              		.cfi_def_cfa_offset 0
 6621              	.LBB1799:
 6622              	.LBB1797:
 6623              	.LBB1796:
 749:src/xeq.c     **** }
 6624              		.loc 1 749 3 view .LVU1838
 6625 003a FFF7FEBF 		b	lift
 6626              	.LVL473:
 6627              	.L539:
 6628 003e 00BF     		.align	2
 6629              	.L538:
 6630 0040 00000000 		.word	StateWhileOn
 6631 0044 00000000 		.word	main_ram
 6632              	.LBE1796:
 6633              	.LBE1797:
 6634              	.LBE1799:
 6635              		.cfi_endproc
 6636              	.LFE50:
 6638              		.section	.text.lower,"ax",%progbits
 6639              		.align	1
 6640              		.p2align 2,,3
 6641              		.syntax unified
 6642              		.thumb
 6643              		.thumb_func
 6644              		.fpu fpv4-sp-d16
 6646              	lower:
 6647              	.LFB53:
 775:src/xeq.c     **** 	const int n = stack_size();
 6648              		.loc 1 775 25 is_stmt 1 view -0
 6649              		.cfi_startproc
 6650              		@ args = 0, pretend = 0, frame = 0
 6651              		@ frame_needed = 0, uses_anonymous_args = 0
 776:src/xeq.c     **** 	int i;
 6652              		.loc 1 776 2 view .LVU1840
 6653              	.LBB1800:
 6654              	.LBI1800:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6655              		.loc 1 712 5 view .LVU1841
 6656              	.LBB1801:
 713:src/xeq.c     **** 		return 4;
 6657              		.loc 1 713 2 view .LVU1842
 6658              	.LBE1801:
 6659              	.LBE1800:
 775:src/xeq.c     **** 	const int n = stack_size();
 6660              		.loc 1 775 25 is_stmt 0 view .LVU1843
 6661 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6662              		.cfi_def_cfa_offset 24
 6663              		.cfi_offset 4, -24
ARM GAS  /tmp/ccBFDvgN.s 			page 248


 6664              		.cfi_offset 5, -20
 6665              		.cfi_offset 6, -16
 6666              		.cfi_offset 7, -12
 6667              		.cfi_offset 8, -8
 6668              		.cfi_offset 14, -4
 6669              	.LBB1807:
 6670              	.LBB1804:
 713:src/xeq.c     **** 		return 4;
 6671              		.loc 1 713 8 view .LVU1844
 6672 0004 194F     		ldr	r7, .L551
 6673 0006 3B68     		ldr	r3, [r7]
 713:src/xeq.c     **** 		return 4;
 6674              		.loc 1 713 6 view .LVU1845
 6675 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 6676              		.loc 1 713 5 view .LVU1846
 6677 000c 1207     		lsls	r2, r2, #28
 6678 000e 2BD5     		bpl	.L544
 6679              	.LBB1802:
 6680              	.LBI1802:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6681              		.loc 1 185 5 is_stmt 1 view .LVU1847
 6682              	.LBB1803:
 186:src/xeq.c     **** }
 6683              		.loc 1 186 2 view .LVU1848
 186:src/xeq.c     **** }
 6684              		.loc 1 186 9 is_stmt 0 view .LVU1849
 6685 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 6686              	.LBE1803:
 6687              	.LBE1802:
 713:src/xeq.c     **** 		return 4;
 6688              		.loc 1 713 27 view .LVU1850
 6689 0014 9B0B     		lsrs	r3, r3, #14
 6690 0016 032B     		cmp	r3, #3
 6691 0018 1ED0     		beq	.L550
 715:src/xeq.c     **** }
 6692              		.loc 1 715 9 view .LVU1851
 6693 001a 0826     		movs	r6, #8
 6694              	.L541:
 6695              	.LVL474:
 715:src/xeq.c     **** }
 6696              		.loc 1 715 9 view .LVU1852
 6697              	.LBE1804:
 6698              	.LBE1807:
 777:src/xeq.c     **** 
 6699              		.loc 1 777 2 is_stmt 1 view .LVU1853
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6700              		.loc 1 779 2 view .LVU1854
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6701              		.loc 1 779 12 view .LVU1855
 6702 001c 6336     		adds	r6, r6, #99
 6703              	.LVL475:
 6704              	.LBB1808:
 6705              	.LBB1805:
 714:src/xeq.c     **** 	return 8;
 6706              		.loc 1 714 10 is_stmt 0 view .LVU1856
 6707 001e 6424     		movs	r4, #100
ARM GAS  /tmp/ccBFDvgN.s 			page 249


 6708              	.LBE1805:
 6709              	.LBE1808:
 6710              	.LBB1809:
 6711              	.LBB1810:
 6712              	.LBB1811:
 6713              	.LBB1812:
1119:src/xeq.c     **** }
 6714              		.loc 1 1119 24 view .LVU1857
 6715 0020 44F20108 		movw	r8, #16385
 6716              	.LVL476:
 6717              	.L543:
1119:src/xeq.c     **** }
 6718              		.loc 1 1119 24 view .LVU1858
 6719              	.LBE1812:
 6720              	.LBE1811:
 6721              	.LBE1810:
 6722              	.LBE1809:
 780:src/xeq.c     **** }
 6723              		.loc 1 780 3 is_stmt 1 discriminator 3 view .LVU1859
 6724              	.LBB1819:
 6725              	.LBI1819:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6726              		.loc 1 718 11 discriminator 3 view .LVU1860
 6727              	.LBB1820:
 719:src/xeq.c     **** }
 6728              		.loc 1 719 2 discriminator 3 view .LVU1861
 719:src/xeq.c     **** }
 6729              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU1862
 6730 0024 2046     		mov	r0, r4
 6731 0026 FFF7FEFF 		bl	get_reg_n
 6732              	.LVL477:
 6733 002a 0134     		adds	r4, r4, #1
 6734              	.LVL478:
 719:src/xeq.c     **** }
 6735              		.loc 1 719 9 discriminator 3 view .LVU1863
 6736 002c 0546     		mov	r5, r0
 6737              	.LBE1820:
 6738              	.LBE1819:
 6739              	.LBB1821:
 6740              	.LBB1822:
 6741 002e 2046     		mov	r0, r4
 6742              	.LVL479:
 719:src/xeq.c     **** }
 6743              		.loc 1 719 9 discriminator 3 view .LVU1864
 6744              	.LBE1822:
 6745              	.LBI1821:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6746              		.loc 1 718 11 is_stmt 1 discriminator 3 view .LVU1865
 6747              	.LBB1823:
 719:src/xeq.c     **** }
 6748              		.loc 1 719 2 discriminator 3 view .LVU1866
 719:src/xeq.c     **** }
 6749              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU1867
 6750 0030 FFF7FEFF 		bl	get_reg_n
 6751              	.LVL480:
 719:src/xeq.c     **** }
 6752              		.loc 1 719 9 discriminator 3 view .LVU1868
ARM GAS  /tmp/ccBFDvgN.s 			page 250


 6753              	.LBE1823:
 6754              	.LBE1821:
 6755              	.LBB1825:
 6756              	.LBB1817:
 6757              	.LBB1815:
 6758              	.LBB1813:
1119:src/xeq.c     **** }
 6759              		.loc 1 1119 24 discriminator 3 view .LVU1869
 6760 0034 3B68     		ldr	r3, [r7]
 6761 0036 B3F8E837 		ldrh	r3, [r3, #2024]
 6762              	.LBE1813:
 6763              	.LBE1815:
 727:src/xeq.c     **** }
 6764              		.loc 1 727 2 discriminator 3 view .LVU1870
 6765 003a 08EA0303 		and	r3, r8, r3
 6766 003e B3F5804F 		cmp	r3, #16384
 6767              	.LBE1817:
 6768              	.LBE1825:
 6769              	.LBB1826:
 6770              	.LBB1824:
 719:src/xeq.c     **** }
 6771              		.loc 1 719 9 discriminator 3 view .LVU1871
 6772 0042 0146     		mov	r1, r0
 6773              	.LVL481:
 719:src/xeq.c     **** }
 6774              		.loc 1 719 9 discriminator 3 view .LVU1872
 6775              	.LBE1824:
 6776              	.LBE1826:
 6777              	.LBB1827:
 6778              	.LBI1809:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6779              		.loc 1 726 6 is_stmt 1 discriminator 3 view .LVU1873
 6780              	.LBB1818:
 727:src/xeq.c     **** }
 6781              		.loc 1 727 2 discriminator 3 view .LVU1874
 6782              	.LBB1816:
 6783              	.LBI1811:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6784              		.loc 1 1118 5 discriminator 3 view .LVU1875
 6785              	.LBB1814:
1119:src/xeq.c     **** }
 6786              		.loc 1 1119 2 discriminator 3 view .LVU1876
 6787              	.LBE1814:
 6788              	.LBE1816:
 727:src/xeq.c     **** }
 6789              		.loc 1 727 2 is_stmt 0 discriminator 3 view .LVU1877
 6790 0044 0CBF     		ite	eq
 6791 0046 1022     		moveq	r2, #16
 6792 0048 0822     		movne	r2, #8
 6793 004a 2846     		mov	r0, r5
 6794              	.LVL482:
 727:src/xeq.c     **** }
 6795              		.loc 1 727 2 discriminator 3 view .LVU1878
 6796 004c FFF7FEFF 		bl	xcopy
 6797              	.LVL483:
 727:src/xeq.c     **** }
 6798              		.loc 1 727 2 discriminator 3 view .LVU1879
ARM GAS  /tmp/ccBFDvgN.s 			page 251


 6799              	.LBE1818:
 6800              	.LBE1827:
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6801              		.loc 1 779 17 is_stmt 1 discriminator 3 view .LVU1880
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6802              		.loc 1 779 12 discriminator 3 view .LVU1881
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6803              		.loc 1 779 2 is_stmt 0 discriminator 3 view .LVU1882
 6804 0050 B442     		cmp	r4, r6
 6805 0052 E7D1     		bne	.L543
 781:src/xeq.c     **** 
 6806              		.loc 1 781 1 view .LVU1883
 6807 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6808              	.LVL484:
 6809              	.L550:
 6810              	.LBB1828:
 6811              	.LBB1806:
 713:src/xeq.c     **** 		return 4;
 6812              		.loc 1 713 44 view .LVU1884
 6813 0058 054B     		ldr	r3, .L551+4
 713:src/xeq.c     **** 		return 4;
 6814              		.loc 1 713 41 view .LVU1885
 6815 005a 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 6816              		.loc 1 714 10 view .LVU1886
 6817 005e 002B     		cmp	r3, #0
 6818 0060 B4BF     		ite	lt
 6819 0062 0826     		movlt	r6, #8
 6820 0064 0426     		movge	r6, #4
 6821 0066 D9E7     		b	.L541
 6822              	.L544:
 6823 0068 0426     		movs	r6, #4
 6824 006a D7E7     		b	.L541
 6825              	.L552:
 6826              		.align	2
 6827              	.L551:
 6828 006c 00000000 		.word	main_ram
 6829 0070 00000000 		.word	XromParams
 6830              	.LBE1806:
 6831              	.LBE1828:
 6832              		.cfi_endproc
 6833              	.LFE53:
 6835              		.section	.text.get_stack_top,"ax",%progbits
 6836              		.align	1
 6837              		.p2align 2,,3
 6838              		.syntax unified
 6839              		.thumb
 6840              		.thumb_func
 6841              		.fpu fpv4-sp-d16
 6843              	get_stack_top:
 6844              	.LFB44:
 722:src/xeq.c     **** 	return get_stack(stack_size()-1);
 6845              		.loc 1 722 38 is_stmt 1 view -0
 6846              		.cfi_startproc
 6847              		@ args = 0, pretend = 0, frame = 0
 6848              		@ frame_needed = 0, uses_anonymous_args = 0
 6849              		@ link register save eliminated.
ARM GAS  /tmp/ccBFDvgN.s 			page 252


 723:src/xeq.c     **** }
 6850              		.loc 1 723 2 view .LVU1888
 6851              	.LBB1829:
 6852              	.LBI1829:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6853              		.loc 1 712 5 view .LVU1889
 6854              	.LBB1830:
 713:src/xeq.c     **** 		return 4;
 6855              		.loc 1 713 2 view .LVU1890
 713:src/xeq.c     **** 		return 4;
 6856              		.loc 1 713 8 is_stmt 0 view .LVU1891
 6857 0000 0C4B     		ldr	r3, .L559
 6858 0002 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 6859              		.loc 1 713 6 view .LVU1892
 6860 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 6861              		.loc 1 713 5 view .LVU1893
 6862 0008 1207     		lsls	r2, r2, #28
 6863 000a 10D5     		bpl	.L555
 6864              	.LBB1831:
 6865              	.LBI1831:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6866              		.loc 1 185 5 is_stmt 1 view .LVU1894
 6867              	.LBB1832:
 186:src/xeq.c     **** }
 6868              		.loc 1 186 2 view .LVU1895
 186:src/xeq.c     **** }
 6869              		.loc 1 186 9 is_stmt 0 view .LVU1896
 6870 000c B3F8E037 		ldrh	r3, [r3, #2016]
 6871              	.LBE1832:
 6872              	.LBE1831:
 713:src/xeq.c     **** 		return 4;
 6873              		.loc 1 713 27 view .LVU1897
 6874 0010 9B0B     		lsrs	r3, r3, #14
 6875 0012 032B     		cmp	r3, #3
 6876 0014 02D0     		beq	.L558
 6877 0016 6B20     		movs	r0, #107
 6878              	.LBE1830:
 6879              	.LBE1829:
 6880              	.LBB1835:
 6881              	.LBI1835:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6882              		.loc 1 718 11 is_stmt 1 view .LVU1898
 6883              	.LBB1836:
 719:src/xeq.c     **** }
 6884              		.loc 1 719 2 view .LVU1899
 719:src/xeq.c     **** }
 6885              		.loc 1 719 9 is_stmt 0 view .LVU1900
 6886 0018 FFF7FEBF 		b	get_reg_n
 6887              	.LVL485:
 6888              	.L558:
 6889              	.LBE1836:
 6890              	.LBE1835:
 6891              	.LBB1839:
 6892              	.LBB1833:
 713:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccBFDvgN.s 			page 253


 6893              		.loc 1 713 44 view .LVU1901
 6894 001c 064B     		ldr	r3, .L559+4
 713:src/xeq.c     **** 		return 4;
 6895              		.loc 1 713 41 view .LVU1902
 6896 001e 93F90130 		ldrsb	r3, [r3, #1]
 6897 0022 002B     		cmp	r3, #0
 6898 0024 B4BF     		ite	lt
 6899 0026 6B20     		movlt	r0, #107
 6900 0028 6720     		movge	r0, #103
 6901              	.LBE1833:
 6902              	.LBE1839:
 6903              	.LBB1840:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6904              		.loc 1 718 11 is_stmt 1 view .LVU1903
 6905              	.LBB1837:
 719:src/xeq.c     **** }
 6906              		.loc 1 719 2 view .LVU1904
 719:src/xeq.c     **** }
 6907              		.loc 1 719 9 is_stmt 0 view .LVU1905
 6908 002a FFF7FEBF 		b	get_reg_n
 6909              	.LVL486:
 6910              	.L555:
 6911              	.LBE1837:
 6912              	.LBE1840:
 6913              	.LBB1841:
 6914              	.LBB1834:
 6915 002e 6720     		movs	r0, #103
 6916              	.LBE1834:
 6917              	.LBE1841:
 6918              	.LBB1842:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6919              		.loc 1 718 11 is_stmt 1 view .LVU1906
 6920              	.LBB1838:
 719:src/xeq.c     **** }
 6921              		.loc 1 719 2 view .LVU1907
 719:src/xeq.c     **** }
 6922              		.loc 1 719 9 is_stmt 0 view .LVU1908
 6923 0030 FFF7FEBF 		b	get_reg_n
 6924              	.LVL487:
 6925              	.L560:
 6926              		.align	2
 6927              	.L559:
 6928 0034 00000000 		.word	main_ram
 6929 0038 00000000 		.word	XromParams
 6930              	.LBE1838:
 6931              	.LBE1842:
 6932              		.cfi_endproc
 6933              	.LFE44:
 6935              		.section	.text.roll_down,"ax",%progbits
 6936              		.align	1
 6937              		.p2align 2,,3
 6938              		.global	roll_down
 6939              		.syntax unified
 6940              		.thumb
 6941              		.thumb_func
 6942              		.fpu fpv4-sp-d16
 6944              	roll_down:
ARM GAS  /tmp/ccBFDvgN.s 			page 254


 6945              	.LVL488:
 6946              	.LFB70:
 889:src/xeq.c     **** 	REGISTER r;
 6947              		.loc 1 889 31 is_stmt 1 view -0
 6948              		.cfi_startproc
 6949              		@ args = 0, pretend = 0, frame = 16
 6950              		@ frame_needed = 0, uses_anonymous_args = 0
 890:src/xeq.c     **** 	copyreg(&r, StackBase);
 6951              		.loc 1 890 2 view .LVU1910
 891:src/xeq.c     **** 	lower();
 6952              		.loc 1 891 2 view .LVU1911
 889:src/xeq.c     **** 	REGISTER r;
 6953              		.loc 1 889 31 is_stmt 0 view .LVU1912
 6954 0000 30B5     		push	{r4, r5, lr}
 6955              		.cfi_def_cfa_offset 12
 6956              		.cfi_offset 4, -12
 6957              		.cfi_offset 5, -8
 6958              		.cfi_offset 14, -4
 6959              	.LBB1843:
 6960              	.LBB1844:
 6961              	.LBB1845:
 6962              	.LBB1846:
1119:src/xeq.c     **** }
 6963              		.loc 1 1119 24 view .LVU1913
 6964 0002 124D     		ldr	r5, .L567
 6965              	.LBE1846:
 6966              	.LBE1845:
 6967              	.LBE1844:
 6968              	.LBE1843:
 891:src/xeq.c     **** 	lower();
 6969              		.loc 1 891 2 view .LVU1914
 6970 0004 124A     		ldr	r2, .L567+4
 6971              	.LBB1855:
 6972              	.LBB1853:
 6973              	.LBB1850:
 6974              	.LBB1847:
1119:src/xeq.c     **** }
 6975              		.loc 1 1119 24 view .LVU1915
 6976 0006 2B68     		ldr	r3, [r5]
 6977              	.LBE1847:
 6978              	.LBE1850:
 727:src/xeq.c     **** }
 6979              		.loc 1 727 2 view .LVU1916
 6980 0008 1168     		ldr	r1, [r2]
 6981              	.LBB1851:
 6982              	.LBB1848:
1119:src/xeq.c     **** }
 6983              		.loc 1 1119 24 view .LVU1917
 6984 000a B3F8E837 		ldrh	r3, [r3, #2024]
 6985 000e 44F20104 		movw	r4, #16385
 6986              	.LBE1848:
 6987              	.LBE1851:
 727:src/xeq.c     **** }
 6988              		.loc 1 727 2 view .LVU1918
 6989 0012 2340     		ands	r3, r3, r4
 6990              	.LBE1853:
 6991              	.LBE1855:
ARM GAS  /tmp/ccBFDvgN.s 			page 255


 889:src/xeq.c     **** 	REGISTER r;
 6992              		.loc 1 889 31 view .LVU1919
 6993 0014 85B0     		sub	sp, sp, #20
 6994              		.cfi_def_cfa_offset 32
 6995              	.LVL489:
 6996              	.LBB1856:
 6997              	.LBI1843:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6998              		.loc 1 726 6 is_stmt 1 view .LVU1920
 6999              	.LBB1854:
 727:src/xeq.c     **** }
 7000              		.loc 1 727 2 view .LVU1921
 7001              	.LBB1852:
 7002              	.LBI1845:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7003              		.loc 1 1118 5 view .LVU1922
 7004              	.LBB1849:
1119:src/xeq.c     **** }
 7005              		.loc 1 1119 2 view .LVU1923
 7006              	.LBE1849:
 7007              	.LBE1852:
 727:src/xeq.c     **** }
 7008              		.loc 1 727 2 is_stmt 0 view .LVU1924
 7009 0016 B3F5804F 		cmp	r3, #16384
 7010 001a 0CBF     		ite	eq
 7011 001c 1022     		moveq	r2, #16
 7012 001e 0822     		movne	r2, #8
 7013 0020 6846     		mov	r0, sp
 7014              	.LVL490:
 727:src/xeq.c     **** }
 7015              		.loc 1 727 2 view .LVU1925
 7016 0022 FFF7FEFF 		bl	xcopy
 7017              	.LVL491:
 727:src/xeq.c     **** }
 7018              		.loc 1 727 2 view .LVU1926
 7019              	.LBE1854:
 7020              	.LBE1856:
 892:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 7021              		.loc 1 892 2 is_stmt 1 view .LVU1927
 7022 0026 FFF7FEFF 		bl	lower
 7023              	.LVL492:
 893:src/xeq.c     **** }
 7024              		.loc 1 893 2 view .LVU1928
 7025 002a FFF7FEFF 		bl	get_stack_top
 7026              	.LVL493:
 7027              	.LBB1857:
 7028              	.LBI1857:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7029              		.loc 1 726 6 view .LVU1929
 7030              	.LBB1858:
 727:src/xeq.c     **** }
 7031              		.loc 1 727 2 view .LVU1930
 7032              	.LBB1859:
 7033              	.LBI1859:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7034              		.loc 1 1118 5 view .LVU1931
 7035              	.LBB1860:
ARM GAS  /tmp/ccBFDvgN.s 			page 256


1119:src/xeq.c     **** }
 7036              		.loc 1 1119 2 view .LVU1932
1119:src/xeq.c     **** }
 7037              		.loc 1 1119 24 is_stmt 0 view .LVU1933
 7038 002e 2B68     		ldr	r3, [r5]
 7039 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7040              	.LBE1860:
 7041              	.LBE1859:
 727:src/xeq.c     **** }
 7042              		.loc 1 727 2 view .LVU1934
 7043 0034 1C40     		ands	r4, r4, r3
 7044 0036 B4F5804F 		cmp	r4, #16384
 7045 003a 6946     		mov	r1, sp
 7046 003c 0CBF     		ite	eq
 7047 003e 1022     		moveq	r2, #16
 7048 0040 0822     		movne	r2, #8
 7049 0042 FFF7FEFF 		bl	xcopy
 7050              	.LVL494:
 727:src/xeq.c     **** }
 7051              		.loc 1 727 2 view .LVU1935
 7052              	.LBE1858:
 7053              	.LBE1857:
 894:src/xeq.c     **** 
 7054              		.loc 1 894 1 view .LVU1936
 7055 0046 05B0     		add	sp, sp, #20
 7056              		.cfi_def_cfa_offset 12
 7057              		@ sp needed
 7058 0048 30BD     		pop	{r4, r5, pc}
 7059              	.L568:
 7060 004a 00BF     		.align	2
 7061              	.L567:
 7062 004c 00000000 		.word	main_ram
 7063 0050 00000000 		.word	StackBase
 7064              		.cfi_endproc
 7065              	.LFE70:
 7067              		.section	.text.cpx_roll_down,"ax",%progbits
 7068              		.align	1
 7069              		.p2align 2,,3
 7070              		.global	cpx_roll_down
 7071              		.syntax unified
 7072              		.thumb
 7073              		.thumb_func
 7074              		.fpu fpv4-sp-d16
 7076              	cpx_roll_down:
 7077              	.LVL495:
 7078              	.LFB72:
 903:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7079              		.loc 1 903 35 is_stmt 1 view -0
 7080              		.cfi_startproc
 7081              		@ args = 0, pretend = 0, frame = 0
 7082              		@ frame_needed = 0, uses_anonymous_args = 0
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7083              		.loc 1 904 2 view .LVU1938
 903:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7084              		.loc 1 903 35 is_stmt 0 view .LVU1939
 7085 0000 08B5     		push	{r3, lr}
 7086              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccBFDvgN.s 			page 257


 7087              		.cfi_offset 3, -8
 7088              		.cfi_offset 14, -4
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7089              		.loc 1 904 2 view .LVU1940
 7090 0002 0720     		movs	r0, #7
 7091              	.LVL496:
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7092              		.loc 1 904 2 view .LVU1941
 7093 0004 FFF7FEFF 		bl	roll_down
 7094              	.LVL497:
 905:src/xeq.c     **** 	set_was_complex();
 7095              		.loc 1 905 2 is_stmt 1 view .LVU1942
 7096 0008 0720     		movs	r0, #7
 7097 000a FFF7FEFF 		bl	roll_down
 7098              	.LVL498:
 906:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7099              		.loc 1 906 2 view .LVU1943
 7100              	.LBB1861:
 7101              	.LBI1861:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 7102              		.loc 1 539 13 view .LVU1944
 7103              	.LBB1862:
 540:src/xeq.c     **** }
 7104              		.loc 1 540 2 view .LVU1945
 540:src/xeq.c     **** }
 7105              		.loc 1 540 20 is_stmt 0 view .LVU1946
 7106 000e 074B     		ldr	r3, .L571
 7107              	.LBE1862:
 7108              	.LBE1861:
 908:src/xeq.c     **** #endif
 7109              		.loc 1 908 2 view .LVU1947
 7110 0010 074A     		ldr	r2, .L571+4
 7111              	.LBB1865:
 7112              	.LBB1863:
 540:src/xeq.c     **** }
 7113              		.loc 1 540 20 view .LVU1948
 7114 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7115              	.LBE1863:
 7116              	.LBE1865:
 908:src/xeq.c     **** #endif
 7117              		.loc 1 908 2 view .LVU1949
 7118 0014 1268     		ldr	r2, [r2]
 7119              	.LBB1866:
 7120              	.LBB1864:
 540:src/xeq.c     **** }
 7121              		.loc 1 540 20 view .LVU1950
 7122 0016 0120     		movs	r0, #1
 7123 0018 60F38711 		bfi	r1, r0, #6, #2
 7124 001c 1975     		strb	r1, [r3, #20]
 7125              	.LBE1864:
 7126              	.LBE1866:
 908:src/xeq.c     **** #endif
 7127              		.loc 1 908 2 is_stmt 1 view .LVU1951
 7128 001e 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 7129 0022 0343     		orrs	r3, r3, r0
 7130 0024 82F8AD37 		strb	r3, [r2, #1965]
 910:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 258


 7131              		.loc 1 910 1 is_stmt 0 view .LVU1952
 7132 0028 08BD     		pop	{r3, pc}
 7133              	.L572:
 7134 002a 00BF     		.align	2
 7135              	.L571:
 7136 002c 00000000 		.word	StateWhileOn
 7137 0030 00000000 		.word	main_ram
 7138              		.cfi_endproc
 7139              	.LFE72:
 7141              		.section	.text.roll_up,"ax",%progbits
 7142              		.align	1
 7143              		.p2align 2,,3
 7144              		.global	roll_up
 7145              		.syntax unified
 7146              		.thumb
 7147              		.thumb_func
 7148              		.fpu fpv4-sp-d16
 7150              	roll_up:
 7151              	.LVL499:
 7152              	.LFB71:
 896:src/xeq.c     **** 	REGISTER r;
 7153              		.loc 1 896 29 is_stmt 1 view -0
 7154              		.cfi_startproc
 7155              		@ args = 0, pretend = 0, frame = 16
 7156              		@ frame_needed = 0, uses_anonymous_args = 0
 897:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 7157              		.loc 1 897 2 view .LVU1954
 898:src/xeq.c     **** 	lift();
 7158              		.loc 1 898 2 view .LVU1955
 896:src/xeq.c     **** 	REGISTER r;
 7159              		.loc 1 896 29 is_stmt 0 view .LVU1956
 7160 0000 30B5     		push	{r4, r5, lr}
 7161              		.cfi_def_cfa_offset 12
 7162              		.cfi_offset 4, -12
 7163              		.cfi_offset 5, -8
 7164              		.cfi_offset 14, -4
 7165              	.LBB1867:
 7166              	.LBB1868:
 7167              	.LBB1869:
 7168              	.LBB1870:
1119:src/xeq.c     **** }
 7169              		.loc 1 1119 24 view .LVU1957
 7170 0002 124D     		ldr	r5, .L579
 7171              	.LBE1870:
 7172              	.LBE1869:
 7173              	.LBE1868:
 7174              	.LBE1867:
 896:src/xeq.c     **** 	REGISTER r;
 7175              		.loc 1 896 29 view .LVU1958
 7176 0004 85B0     		sub	sp, sp, #20
 7177              		.cfi_def_cfa_offset 32
 898:src/xeq.c     **** 	lift();
 7178              		.loc 1 898 14 view .LVU1959
 7179 0006 FFF7FEFF 		bl	get_stack_top
 7180              	.LVL500:
 7181              	.LBB1877:
 7182              	.LBB1875:
ARM GAS  /tmp/ccBFDvgN.s 			page 259


 7183              	.LBB1873:
 7184              	.LBB1871:
1119:src/xeq.c     **** }
 7185              		.loc 1 1119 24 view .LVU1960
 7186 000a 2B68     		ldr	r3, [r5]
 7187 000c B3F8E837 		ldrh	r3, [r3, #2024]
 7188 0010 44F20104 		movw	r4, #16385
 7189              	.LBE1871:
 7190              	.LBE1873:
 727:src/xeq.c     **** }
 7191              		.loc 1 727 2 view .LVU1961
 7192 0014 2340     		ands	r3, r3, r4
 7193 0016 B3F5804F 		cmp	r3, #16384
 7194              	.LBE1875:
 7195              	.LBE1877:
 898:src/xeq.c     **** 	lift();
 7196              		.loc 1 898 14 view .LVU1962
 7197 001a 0146     		mov	r1, r0
 7198              	.LVL501:
 7199              	.LBB1878:
 7200              	.LBI1867:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7201              		.loc 1 726 6 is_stmt 1 view .LVU1963
 7202              	.LBB1876:
 727:src/xeq.c     **** }
 7203              		.loc 1 727 2 view .LVU1964
 7204              	.LBB1874:
 7205              	.LBI1869:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7206              		.loc 1 1118 5 view .LVU1965
 7207              	.LBB1872:
1119:src/xeq.c     **** }
 7208              		.loc 1 1119 2 view .LVU1966
 7209              	.LBE1872:
 7210              	.LBE1874:
 727:src/xeq.c     **** }
 7211              		.loc 1 727 2 is_stmt 0 view .LVU1967
 7212 001c 0CBF     		ite	eq
 7213 001e 1022     		moveq	r2, #16
 7214 0020 0822     		movne	r2, #8
 7215 0022 6846     		mov	r0, sp
 7216              	.LVL502:
 727:src/xeq.c     **** }
 7217              		.loc 1 727 2 view .LVU1968
 7218 0024 FFF7FEFF 		bl	xcopy
 7219              	.LVL503:
 727:src/xeq.c     **** }
 7220              		.loc 1 727 2 view .LVU1969
 7221              	.LBE1876:
 7222              	.LBE1878:
 899:src/xeq.c     **** 	copyreg(StackBase, &r);
 7223              		.loc 1 899 2 is_stmt 1 view .LVU1970
 7224 0028 FFF7FEFF 		bl	lift
 7225              	.LVL504:
 900:src/xeq.c     **** }
 7226              		.loc 1 900 2 view .LVU1971
 7227              	.LBB1879:
ARM GAS  /tmp/ccBFDvgN.s 			page 260


 7228              	.LBB1880:
 7229              	.LBB1881:
 7230              	.LBB1882:
1119:src/xeq.c     **** }
 7231              		.loc 1 1119 24 is_stmt 0 view .LVU1972
 7232 002c 2B68     		ldr	r3, [r5]
 7233              	.LBE1882:
 7234              	.LBE1881:
 7235              	.LBE1880:
 7236              	.LBE1879:
 900:src/xeq.c     **** }
 7237              		.loc 1 900 2 view .LVU1973
 7238 002e 084A     		ldr	r2, .L579+4
 7239              	.LVL505:
 7240              	.LBB1886:
 7241              	.LBI1879:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7242              		.loc 1 726 6 is_stmt 1 view .LVU1974
 7243              	.LBB1885:
 727:src/xeq.c     **** }
 7244              		.loc 1 727 2 view .LVU1975
 7245              	.LBB1884:
 7246              	.LBI1881:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7247              		.loc 1 1118 5 view .LVU1976
 7248              	.LBB1883:
1119:src/xeq.c     **** }
 7249              		.loc 1 1119 2 view .LVU1977
1119:src/xeq.c     **** }
 7250              		.loc 1 1119 24 is_stmt 0 view .LVU1978
 7251 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7252              	.LBE1883:
 7253              	.LBE1884:
 727:src/xeq.c     **** }
 7254              		.loc 1 727 2 view .LVU1979
 7255 0034 1068     		ldr	r0, [r2]
 7256 0036 1C40     		ands	r4, r4, r3
 7257 0038 B4F5804F 		cmp	r4, #16384
 7258 003c 6946     		mov	r1, sp
 7259 003e 0CBF     		ite	eq
 7260 0040 1022     		moveq	r2, #16
 7261              	.LVL506:
 727:src/xeq.c     **** }
 7262              		.loc 1 727 2 view .LVU1980
 7263 0042 0822     		movne	r2, #8
 7264 0044 FFF7FEFF 		bl	xcopy
 7265              	.LVL507:
 727:src/xeq.c     **** }
 7266              		.loc 1 727 2 view .LVU1981
 7267              	.LBE1885:
 7268              	.LBE1886:
 901:src/xeq.c     **** 
 7269              		.loc 1 901 1 view .LVU1982
 7270 0048 05B0     		add	sp, sp, #20
 7271              		.cfi_def_cfa_offset 12
 7272              		@ sp needed
 7273 004a 30BD     		pop	{r4, r5, pc}
ARM GAS  /tmp/ccBFDvgN.s 			page 261


 7274              	.L580:
 7275              		.align	2
 7276              	.L579:
 7277 004c 00000000 		.word	main_ram
 7278 0050 00000000 		.word	StackBase
 7279              		.cfi_endproc
 7280              	.LFE71:
 7282              		.section	.text.cpx_roll_up,"ax",%progbits
 7283              		.align	1
 7284              		.p2align 2,,3
 7285              		.global	cpx_roll_up
 7286              		.syntax unified
 7287              		.thumb
 7288              		.thumb_func
 7289              		.fpu fpv4-sp-d16
 7291              	cpx_roll_up:
 7292              	.LVL508:
 7293              	.LFB73:
 912:src/xeq.c     **** 	roll_up(OP_RUP);
 7294              		.loc 1 912 33 is_stmt 1 view -0
 7295              		.cfi_startproc
 7296              		@ args = 0, pretend = 0, frame = 0
 7297              		@ frame_needed = 0, uses_anonymous_args = 0
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 7298              		.loc 1 913 2 view .LVU1984
 912:src/xeq.c     **** 	roll_up(OP_RUP);
 7299              		.loc 1 912 33 is_stmt 0 view .LVU1985
 7300 0000 08B5     		push	{r3, lr}
 7301              		.cfi_def_cfa_offset 8
 7302              		.cfi_offset 3, -8
 7303              		.cfi_offset 14, -4
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 7304              		.loc 1 913 2 view .LVU1986
 7305 0002 0820     		movs	r0, #8
 7306              	.LVL509:
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 7307              		.loc 1 913 2 view .LVU1987
 7308 0004 FFF7FEFF 		bl	roll_up
 7309              	.LVL510:
 914:src/xeq.c     **** 	set_was_complex();
 7310              		.loc 1 914 2 is_stmt 1 view .LVU1988
 7311 0008 0820     		movs	r0, #8
 7312 000a FFF7FEFF 		bl	roll_up
 7313              	.LVL511:
 915:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7314              		.loc 1 915 2 view .LVU1989
 7315              	.LBB1887:
 7316              	.LBI1887:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 7317              		.loc 1 539 13 view .LVU1990
 7318              	.LBB1888:
 540:src/xeq.c     **** }
 7319              		.loc 1 540 2 view .LVU1991
 540:src/xeq.c     **** }
 7320              		.loc 1 540 20 is_stmt 0 view .LVU1992
 7321 000e 074B     		ldr	r3, .L583
 7322              	.LBE1888:
ARM GAS  /tmp/ccBFDvgN.s 			page 262


 7323              	.LBE1887:
 917:src/xeq.c     **** #endif
 7324              		.loc 1 917 2 view .LVU1993
 7325 0010 074A     		ldr	r2, .L583+4
 7326              	.LBB1891:
 7327              	.LBB1889:
 540:src/xeq.c     **** }
 7328              		.loc 1 540 20 view .LVU1994
 7329 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7330              	.LBE1889:
 7331              	.LBE1891:
 917:src/xeq.c     **** #endif
 7332              		.loc 1 917 2 view .LVU1995
 7333 0014 1268     		ldr	r2, [r2]
 7334              	.LBB1892:
 7335              	.LBB1890:
 540:src/xeq.c     **** }
 7336              		.loc 1 540 20 view .LVU1996
 7337 0016 0120     		movs	r0, #1
 7338 0018 60F38711 		bfi	r1, r0, #6, #2
 7339 001c 1975     		strb	r1, [r3, #20]
 7340              	.LBE1890:
 7341              	.LBE1892:
 917:src/xeq.c     **** #endif
 7342              		.loc 1 917 2 is_stmt 1 view .LVU1997
 7343 001e 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 7344 0022 0343     		orrs	r3, r3, r0
 7345 0024 82F8AD37 		strb	r3, [r2, #1965]
 919:src/xeq.c     **** 
 7346              		.loc 1 919 1 is_stmt 0 view .LVU1998
 7347 0028 08BD     		pop	{r3, pc}
 7348              	.L584:
 7349 002a 00BF     		.align	2
 7350              	.L583:
 7351 002c 00000000 		.word	StateWhileOn
 7352 0030 00000000 		.word	main_ram
 7353              		.cfi_endproc
 7354              	.LFE73:
 7356              		.section	.text.fill,"ax",%progbits
 7357              		.align	1
 7358              		.p2align 2,,3
 7359              		.global	fill
 7360              		.syntax unified
 7361              		.thumb
 7362              		.thumb_func
 7363              		.fpu fpv4-sp-d16
 7365              	fill:
 7366              	.LVL512:
 7367              	.LFB80:
1096:src/xeq.c     **** 	const int n = stack_size();
 7368              		.loc 1 1096 26 is_stmt 1 view -0
 7369              		.cfi_startproc
 7370              		@ args = 0, pretend = 0, frame = 0
 7371              		@ frame_needed = 0, uses_anonymous_args = 0
1097:src/xeq.c     **** 	int i;
 7372              		.loc 1 1097 2 view .LVU2000
 7373              	.LBB1893:
ARM GAS  /tmp/ccBFDvgN.s 			page 263


 7374              	.LBI1893:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7375              		.loc 1 712 5 view .LVU2001
 7376              	.LBB1894:
 713:src/xeq.c     **** 		return 4;
 7377              		.loc 1 713 2 view .LVU2002
 7378              	.LBE1894:
 7379              	.LBE1893:
1096:src/xeq.c     **** 	const int n = stack_size();
 7380              		.loc 1 1096 26 is_stmt 0 view .LVU2003
 7381 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7382              		.cfi_def_cfa_offset 24
 7383              		.cfi_offset 4, -24
 7384              		.cfi_offset 5, -20
 7385              		.cfi_offset 6, -16
 7386              		.cfi_offset 7, -12
 7387              		.cfi_offset 8, -8
 7388              		.cfi_offset 14, -4
 7389              	.LBB1900:
 7390              	.LBB1897:
 713:src/xeq.c     **** 		return 4;
 7391              		.loc 1 713 8 view .LVU2004
 7392 0004 174E     		ldr	r6, .L596
 7393 0006 3368     		ldr	r3, [r6]
 713:src/xeq.c     **** 		return 4;
 7394              		.loc 1 713 6 view .LVU2005
 7395 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 7396              		.loc 1 713 5 view .LVU2006
 7397 000c 1207     		lsls	r2, r2, #28
 7398 000e 27D5     		bpl	.L589
 7399              	.LBB1895:
 7400              	.LBI1895:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 7401              		.loc 1 185 5 is_stmt 1 view .LVU2007
 7402              	.LBB1896:
 186:src/xeq.c     **** }
 7403              		.loc 1 186 2 view .LVU2008
 186:src/xeq.c     **** }
 7404              		.loc 1 186 9 is_stmt 0 view .LVU2009
 7405 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7406              	.LBE1896:
 7407              	.LBE1895:
 713:src/xeq.c     **** 		return 4;
 7408              		.loc 1 713 27 view .LVU2010
 7409 0014 9B0B     		lsrs	r3, r3, #14
 7410 0016 032B     		cmp	r3, #3
 7411 0018 1AD0     		beq	.L595
 715:src/xeq.c     **** }
 7412              		.loc 1 715 9 view .LVU2011
 7413 001a 0825     		movs	r5, #8
 7414              	.L586:
 7415              	.LVL513:
 715:src/xeq.c     **** }
 7416              		.loc 1 715 9 view .LVU2012
 7417              	.LBE1897:
 7418              	.LBE1900:
ARM GAS  /tmp/ccBFDvgN.s 			page 264


1098:src/xeq.c     **** 
 7419              		.loc 1 1098 2 is_stmt 1 view .LVU2013
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7420              		.loc 1 1100 2 view .LVU2014
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7421              		.loc 1 1100 12 view .LVU2015
 7422 001c 124F     		ldr	r7, .L596+4
 7423 001e 6435     		adds	r5, r5, #100
 7424              	.LVL514:
 7425              	.LBB1901:
 7426              	.LBB1898:
 714:src/xeq.c     **** 	return 8;
 7427              		.loc 1 714 10 is_stmt 0 view .LVU2016
 7428 0020 6524     		movs	r4, #101
 7429              	.LBE1898:
 7430              	.LBE1901:
 7431              	.LBB1902:
 7432              	.LBB1903:
 7433              	.LBB1904:
 7434              	.LBB1905:
1119:src/xeq.c     **** }
 7435              		.loc 1 1119 24 view .LVU2017
 7436 0022 44F20108 		movw	r8, #16385
 7437              	.LVL515:
 7438              	.L588:
1119:src/xeq.c     **** }
 7439              		.loc 1 1119 24 view .LVU2018
 7440              	.LBE1905:
 7441              	.LBE1904:
 7442              	.LBE1903:
 7443              	.LBE1902:
1101:src/xeq.c     **** }
 7444              		.loc 1 1101 3 is_stmt 1 view .LVU2019
 7445              	.LBB1911:
 7446              	.LBI1911:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7447              		.loc 1 718 11 view .LVU2020
 7448              	.LBB1912:
 719:src/xeq.c     **** }
 7449              		.loc 1 719 2 view .LVU2021
 719:src/xeq.c     **** }
 7450              		.loc 1 719 9 is_stmt 0 view .LVU2022
 7451 0026 2046     		mov	r0, r4
 7452 0028 FFF7FEFF 		bl	get_reg_n
 7453              	.LVL516:
 719:src/xeq.c     **** }
 7454              		.loc 1 719 9 view .LVU2023
 7455              	.LBE1912:
 7456              	.LBE1911:
 7457              	.LBB1913:
 7458              	.LBI1902:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7459              		.loc 1 726 6 is_stmt 1 view .LVU2024
 7460              	.LBB1910:
 727:src/xeq.c     **** }
 7461              		.loc 1 727 2 view .LVU2025
 7462              	.LBB1908:
ARM GAS  /tmp/ccBFDvgN.s 			page 265


 7463              	.LBI1904:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7464              		.loc 1 1118 5 view .LVU2026
 7465              	.LBB1906:
1119:src/xeq.c     **** }
 7466              		.loc 1 1119 2 view .LVU2027
1119:src/xeq.c     **** }
 7467              		.loc 1 1119 24 is_stmt 0 view .LVU2028
 7468 002c 3368     		ldr	r3, [r6]
 7469              	.LBE1906:
 7470              	.LBE1908:
 727:src/xeq.c     **** }
 7471              		.loc 1 727 2 view .LVU2029
 7472 002e 3968     		ldr	r1, [r7]
 7473              	.LBB1909:
 7474              	.LBB1907:
1119:src/xeq.c     **** }
 7475              		.loc 1 1119 24 view .LVU2030
 7476 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7477              	.LBE1907:
 7478              	.LBE1909:
 727:src/xeq.c     **** }
 7479              		.loc 1 727 2 view .LVU2031
 7480 0034 08EA0303 		and	r3, r8, r3
 7481 0038 B3F5804F 		cmp	r3, #16384
 7482 003c 0CBF     		ite	eq
 7483 003e 1022     		moveq	r2, #16
 7484 0040 0822     		movne	r2, #8
 7485 0042 0134     		adds	r4, r4, #1
 7486              	.LVL517:
 727:src/xeq.c     **** }
 7487              		.loc 1 727 2 view .LVU2032
 7488 0044 FFF7FEFF 		bl	xcopy
 7489              	.LVL518:
 727:src/xeq.c     **** }
 7490              		.loc 1 727 2 view .LVU2033
 7491              	.LBE1910:
 7492              	.LBE1913:
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7493              		.loc 1 1100 17 is_stmt 1 view .LVU2034
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7494              		.loc 1 1100 12 view .LVU2035
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7495              		.loc 1 1100 2 is_stmt 0 view .LVU2036
 7496 0048 AC42     		cmp	r4, r5
 7497 004a ECD1     		bne	.L588
1102:src/xeq.c     **** 
 7498              		.loc 1 1102 1 view .LVU2037
 7499 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7500              	.LVL519:
 7501              	.L595:
 7502              	.LBB1914:
 7503              	.LBB1899:
 713:src/xeq.c     **** 		return 4;
 7504              		.loc 1 713 44 view .LVU2038
 7505 0050 064B     		ldr	r3, .L596+8
 713:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccBFDvgN.s 			page 266


 7506              		.loc 1 713 41 view .LVU2039
 7507 0052 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 7508              		.loc 1 714 10 view .LVU2040
 7509 0056 002B     		cmp	r3, #0
 7510 0058 B4BF     		ite	lt
 7511 005a 0825     		movlt	r5, #8
 7512 005c 0425     		movge	r5, #4
 7513 005e DDE7     		b	.L586
 7514              	.L589:
 7515 0060 0425     		movs	r5, #4
 7516 0062 DBE7     		b	.L586
 7517              	.L597:
 7518              		.align	2
 7519              	.L596:
 7520 0064 00000000 		.word	main_ram
 7521 0068 00000000 		.word	StackBase
 7522 006c 00000000 		.word	XromParams
 7523              	.LBE1899:
 7524              	.LBE1914:
 7525              		.cfi_endproc
 7526              	.LFE80:
 7528              		.section	.text.lower2,"ax",%progbits
 7529              		.align	1
 7530              		.p2align 2,,3
 7531              		.syntax unified
 7532              		.thumb
 7533              		.thumb_func
 7534              		.fpu fpv4-sp-d16
 7536              	lower2:
 7537              	.LFB54:
 783:src/xeq.c     **** 	const int n = stack_size();
 7538              		.loc 1 783 26 is_stmt 1 view -0
 7539              		.cfi_startproc
 7540              		@ args = 0, pretend = 0, frame = 0
 7541              		@ frame_needed = 0, uses_anonymous_args = 0
 784:src/xeq.c     **** 	int i;
 7542              		.loc 1 784 2 view .LVU2042
 7543              	.LBB1915:
 7544              	.LBI1915:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7545              		.loc 1 712 5 view .LVU2043
 7546              	.LBB1916:
 713:src/xeq.c     **** 		return 4;
 7547              		.loc 1 713 2 view .LVU2044
 7548              	.LBE1916:
 7549              	.LBE1915:
 783:src/xeq.c     **** 	const int n = stack_size();
 7550              		.loc 1 783 26 is_stmt 0 view .LVU2045
 7551 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7552              		.cfi_def_cfa_offset 24
 7553              		.cfi_offset 4, -24
 7554              		.cfi_offset 5, -20
 7555              		.cfi_offset 6, -16
 7556              		.cfi_offset 7, -12
 7557              		.cfi_offset 8, -8
 7558              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBFDvgN.s 			page 267


 7559              	.LBB1922:
 7560              	.LBB1919:
 713:src/xeq.c     **** 		return 4;
 7561              		.loc 1 713 8 view .LVU2046
 7562 0004 194F     		ldr	r7, .L609
 7563 0006 3B68     		ldr	r3, [r7]
 713:src/xeq.c     **** 		return 4;
 7564              		.loc 1 713 6 view .LVU2047
 7565 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 7566              		.loc 1 713 5 view .LVU2048
 7567 000c 1207     		lsls	r2, r2, #28
 7568 000e 2BD5     		bpl	.L602
 7569              	.LBB1917:
 7570              	.LBI1917:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 7571              		.loc 1 185 5 is_stmt 1 view .LVU2049
 7572              	.LBB1918:
 186:src/xeq.c     **** }
 7573              		.loc 1 186 2 view .LVU2050
 186:src/xeq.c     **** }
 7574              		.loc 1 186 9 is_stmt 0 view .LVU2051
 7575 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7576              	.LBE1918:
 7577              	.LBE1917:
 713:src/xeq.c     **** 		return 4;
 7578              		.loc 1 713 27 view .LVU2052
 7579 0014 9B0B     		lsrs	r3, r3, #14
 7580 0016 032B     		cmp	r3, #3
 7581 0018 1ED0     		beq	.L608
 715:src/xeq.c     **** }
 7582              		.loc 1 715 9 view .LVU2053
 7583 001a 0826     		movs	r6, #8
 7584              	.L599:
 7585              	.LVL520:
 715:src/xeq.c     **** }
 7586              		.loc 1 715 9 view .LVU2054
 7587              	.LBE1919:
 7588              	.LBE1922:
 785:src/xeq.c     **** 
 7589              		.loc 1 785 2 is_stmt 1 view .LVU2055
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7590              		.loc 1 787 2 view .LVU2056
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7591              		.loc 1 787 12 view .LVU2057
 7592 001c 6236     		adds	r6, r6, #98
 7593              	.LVL521:
 7594              	.LBB1923:
 7595              	.LBB1920:
 714:src/xeq.c     **** 	return 8;
 7596              		.loc 1 714 10 is_stmt 0 view .LVU2058
 7597 001e 6424     		movs	r4, #100
 7598              	.LBE1920:
 7599              	.LBE1923:
 7600              	.LBB1924:
 7601              	.LBB1925:
 7602              	.LBB1926:
ARM GAS  /tmp/ccBFDvgN.s 			page 268


 7603              	.LBB1927:
1119:src/xeq.c     **** }
 7604              		.loc 1 1119 24 view .LVU2059
 7605 0020 44F20108 		movw	r8, #16385
 7606              	.LVL522:
 7607              	.L601:
1119:src/xeq.c     **** }
 7608              		.loc 1 1119 24 view .LVU2060
 7609              	.LBE1927:
 7610              	.LBE1926:
 7611              	.LBE1925:
 7612              	.LBE1924:
 788:src/xeq.c     **** }
 7613              		.loc 1 788 3 is_stmt 1 discriminator 3 view .LVU2061
 7614              	.LBB1934:
 7615              	.LBI1934:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7616              		.loc 1 718 11 discriminator 3 view .LVU2062
 7617              	.LBB1935:
 719:src/xeq.c     **** }
 7618              		.loc 1 719 2 discriminator 3 view .LVU2063
 719:src/xeq.c     **** }
 7619              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU2064
 7620 0024 2046     		mov	r0, r4
 7621 0026 FFF7FEFF 		bl	get_reg_n
 7622              	.LVL523:
 7623 002a 0546     		mov	r5, r0
 7624              	.LBE1935:
 7625              	.LBE1934:
 7626              	.LBB1936:
 7627              	.LBB1937:
 7628 002c A01C     		adds	r0, r4, #2
 7629              	.LVL524:
 719:src/xeq.c     **** }
 7630              		.loc 1 719 9 discriminator 3 view .LVU2065
 7631              	.LBE1937:
 7632              	.LBI1936:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7633              		.loc 1 718 11 is_stmt 1 discriminator 3 view .LVU2066
 7634              	.LBB1938:
 719:src/xeq.c     **** }
 7635              		.loc 1 719 2 discriminator 3 view .LVU2067
 719:src/xeq.c     **** }
 7636              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU2068
 7637 002e FFF7FEFF 		bl	get_reg_n
 7638              	.LVL525:
 719:src/xeq.c     **** }
 7639              		.loc 1 719 9 discriminator 3 view .LVU2069
 7640              	.LBE1938:
 7641              	.LBE1936:
 7642              	.LBB1940:
 7643              	.LBB1932:
 7644              	.LBB1930:
 7645              	.LBB1928:
1119:src/xeq.c     **** }
 7646              		.loc 1 1119 24 discriminator 3 view .LVU2070
 7647 0032 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccBFDvgN.s 			page 269


 7648 0034 B3F8E837 		ldrh	r3, [r3, #2024]
 7649              	.LBE1928:
 7650              	.LBE1930:
 727:src/xeq.c     **** }
 7651              		.loc 1 727 2 discriminator 3 view .LVU2071
 7652 0038 08EA0303 		and	r3, r8, r3
 7653 003c B3F5804F 		cmp	r3, #16384
 7654              	.LBE1932:
 7655              	.LBE1940:
 7656              	.LBB1941:
 7657              	.LBB1939:
 719:src/xeq.c     **** }
 7658              		.loc 1 719 9 discriminator 3 view .LVU2072
 7659 0040 0146     		mov	r1, r0
 7660              	.LVL526:
 719:src/xeq.c     **** }
 7661              		.loc 1 719 9 discriminator 3 view .LVU2073
 7662              	.LBE1939:
 7663              	.LBE1941:
 7664              	.LBB1942:
 7665              	.LBI1924:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7666              		.loc 1 726 6 is_stmt 1 discriminator 3 view .LVU2074
 7667              	.LBB1933:
 727:src/xeq.c     **** }
 7668              		.loc 1 727 2 discriminator 3 view .LVU2075
 7669              	.LBB1931:
 7670              	.LBI1926:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7671              		.loc 1 1118 5 discriminator 3 view .LVU2076
 7672              	.LBB1929:
1119:src/xeq.c     **** }
 7673              		.loc 1 1119 2 discriminator 3 view .LVU2077
 7674              	.LBE1929:
 7675              	.LBE1931:
 727:src/xeq.c     **** }
 7676              		.loc 1 727 2 is_stmt 0 discriminator 3 view .LVU2078
 7677 0042 0CBF     		ite	eq
 7678 0044 1022     		moveq	r2, #16
 7679 0046 0822     		movne	r2, #8
 7680 0048 2846     		mov	r0, r5
 7681              	.LVL527:
 727:src/xeq.c     **** }
 7682              		.loc 1 727 2 discriminator 3 view .LVU2079
 7683 004a 0134     		adds	r4, r4, #1
 7684              	.LVL528:
 727:src/xeq.c     **** }
 7685              		.loc 1 727 2 discriminator 3 view .LVU2080
 7686 004c FFF7FEFF 		bl	xcopy
 7687              	.LVL529:
 727:src/xeq.c     **** }
 7688              		.loc 1 727 2 discriminator 3 view .LVU2081
 7689              	.LBE1933:
 7690              	.LBE1942:
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7691              		.loc 1 787 17 is_stmt 1 discriminator 3 view .LVU2082
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
ARM GAS  /tmp/ccBFDvgN.s 			page 270


 7692              		.loc 1 787 12 discriminator 3 view .LVU2083
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7693              		.loc 1 787 2 is_stmt 0 discriminator 3 view .LVU2084
 7694 0050 B442     		cmp	r4, r6
 7695 0052 E7D1     		bne	.L601
 789:src/xeq.c     **** 
 7696              		.loc 1 789 1 view .LVU2085
 7697 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7698              	.LVL530:
 7699              	.L608:
 7700              	.LBB1943:
 7701              	.LBB1921:
 713:src/xeq.c     **** 		return 4;
 7702              		.loc 1 713 44 view .LVU2086
 7703 0058 054B     		ldr	r3, .L609+4
 713:src/xeq.c     **** 		return 4;
 7704              		.loc 1 713 41 view .LVU2087
 7705 005a 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 7706              		.loc 1 714 10 view .LVU2088
 7707 005e 002B     		cmp	r3, #0
 7708 0060 B4BF     		ite	lt
 7709 0062 0826     		movlt	r6, #8
 7710 0064 0426     		movge	r6, #4
 7711 0066 D9E7     		b	.L599
 7712              	.L602:
 7713 0068 0426     		movs	r6, #4
 7714 006a D7E7     		b	.L599
 7715              	.L610:
 7716              		.align	2
 7717              	.L609:
 7718 006c 00000000 		.word	main_ram
 7719 0070 00000000 		.word	XromParams
 7720              	.LBE1921:
 7721              	.LBE1943:
 7722              		.cfi_endproc
 7723              	.LFE54:
 7725              		.section	.text.drop,"ax",%progbits
 7726              		.align	1
 7727              		.p2align 2,,3
 7728              		.global	drop
 7729              		.syntax unified
 7730              		.thumb
 7731              		.thumb_func
 7732              		.fpu fpv4-sp-d16
 7734              	drop:
 7735              	.LVL531:
 7736              	.LFB81:
1104:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7737              		.loc 1 1104 26 is_stmt 1 view -0
 7738              		.cfi_startproc
 7739              		@ args = 0, pretend = 0, frame = 0
 7740              		@ frame_needed = 0, uses_anonymous_args = 0
1105:src/xeq.c     **** 		lower2();
 7741              		.loc 1 1105 2 view .LVU2090
1105:src/xeq.c     **** 		lower2();
 7742              		.loc 1 1105 5 is_stmt 0 view .LVU2091
ARM GAS  /tmp/ccBFDvgN.s 			page 271


 7743 0000 0F28     		cmp	r0, #15
 7744 0002 01D0     		beq	.L618
1109:src/xeq.c     **** }
 7745              		.loc 1 1109 3 is_stmt 1 view .LVU2092
 7746 0004 FFF7FEBF 		b	lower
 7747              	.LVL532:
 7748              	.L618:
1106:src/xeq.c     **** 		set_was_complex();
 7749              		.loc 1 1106 3 view .LVU2093
1104:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7750              		.loc 1 1104 26 is_stmt 0 view .LVU2094
 7751 0008 08B5     		push	{r3, lr}
 7752              		.cfi_def_cfa_offset 8
 7753              		.cfi_offset 3, -8
 7754              		.cfi_offset 14, -4
1106:src/xeq.c     **** 		set_was_complex();
 7755              		.loc 1 1106 3 view .LVU2095
 7756 000a FFF7FEFF 		bl	lower2
 7757              	.LVL533:
1107:src/xeq.c     **** 	} else
 7758              		.loc 1 1107 3 is_stmt 1 view .LVU2096
 7759              	.LBB1944:
 7760              	.LBI1944:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 7761              		.loc 1 539 13 view .LVU2097
 7762              	.LBB1945:
 540:src/xeq.c     **** }
 7763              		.loc 1 540 2 view .LVU2098
 540:src/xeq.c     **** }
 7764              		.loc 1 540 20 is_stmt 0 view .LVU2099
 7765 000e 034B     		ldr	r3, .L619
 7766 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7767 0012 0121     		movs	r1, #1
 7768 0014 61F38712 		bfi	r2, r1, #6, #2
 7769 0018 1A75     		strb	r2, [r3, #20]
 7770              	.LBE1945:
 7771              	.LBE1944:
1110:src/xeq.c     **** 
 7772              		.loc 1 1110 1 view .LVU2100
 7773 001a 08BD     		pop	{r3, pc}
 7774              	.L620:
 7775              		.align	2
 7776              	.L619:
 7777 001c 00000000 		.word	StateWhileOn
 7778              		.cfi_endproc
 7779              	.LFE81:
 7781              		.section	.text.copyreg_n,"ax",%progbits
 7782              		.align	1
 7783              		.p2align 2,,3
 7784              		.global	copyreg_n
 7785              		.syntax unified
 7786              		.thumb
 7787              		.thumb_func
 7788              		.fpu fpv4-sp-d16
 7790              	copyreg_n:
 7791              	.LVL534:
 7792              	.LFB46:
ARM GAS  /tmp/ccBFDvgN.s 			page 272


 730:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7793              		.loc 1 730 30 is_stmt 1 view -0
 7794              		.cfi_startproc
 7795              		@ args = 0, pretend = 0, frame = 0
 7796              		@ frame_needed = 0, uses_anonymous_args = 0
 731:src/xeq.c     **** }
 7797              		.loc 1 731 2 view .LVU2102
 730:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7798              		.loc 1 730 30 is_stmt 0 view .LVU2103
 7799 0000 38B5     		push	{r3, r4, r5, lr}
 7800              		.cfi_def_cfa_offset 16
 7801              		.cfi_offset 3, -16
 7802              		.cfi_offset 4, -12
 7803              		.cfi_offset 5, -8
 7804              		.cfi_offset 14, -4
 730:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7805              		.loc 1 730 30 view .LVU2104
 7806 0002 0D46     		mov	r5, r1
 731:src/xeq.c     **** }
 7807              		.loc 1 731 2 view .LVU2105
 7808 0004 FFF7FEFF 		bl	get_reg_n
 7809              	.LVL535:
 731:src/xeq.c     **** }
 7810              		.loc 1 731 2 view .LVU2106
 7811 0008 0446     		mov	r4, r0
 731:src/xeq.c     **** }
 7812              		.loc 1 731 24 view .LVU2107
 7813 000a 2846     		mov	r0, r5
 7814 000c FFF7FEFF 		bl	get_reg_n
 7815              	.LVL536:
 7816              	.LBB1946:
 7817              	.LBB1947:
 7818              	.LBB1948:
 7819              	.LBB1949:
1119:src/xeq.c     **** }
 7820              		.loc 1 1119 24 view .LVU2108
 7821 0010 094B     		ldr	r3, .L625
 7822 0012 1B68     		ldr	r3, [r3]
 7823 0014 B3F8E827 		ldrh	r2, [r3, #2024]
 7824 0018 44F20103 		movw	r3, #16385
 7825              	.LBE1949:
 7826              	.LBE1948:
 727:src/xeq.c     **** }
 7827              		.loc 1 727 2 view .LVU2109
 7828 001c 1340     		ands	r3, r3, r2
 7829 001e B3F5804F 		cmp	r3, #16384
 7830              	.LBE1947:
 7831              	.LBE1946:
 731:src/xeq.c     **** }
 7832              		.loc 1 731 24 view .LVU2110
 7833 0022 0146     		mov	r1, r0
 7834              	.LVL537:
 7835              	.LBB1954:
 7836              	.LBI1946:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7837              		.loc 1 726 6 is_stmt 1 view .LVU2111
 7838              	.LBB1952:
ARM GAS  /tmp/ccBFDvgN.s 			page 273


 727:src/xeq.c     **** }
 7839              		.loc 1 727 2 view .LVU2112
 7840              	.LBB1951:
 7841              	.LBI1948:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7842              		.loc 1 1118 5 view .LVU2113
 7843              	.LBB1950:
1119:src/xeq.c     **** }
 7844              		.loc 1 1119 2 view .LVU2114
 7845              	.LBE1950:
 7846              	.LBE1951:
 727:src/xeq.c     **** }
 7847              		.loc 1 727 2 is_stmt 0 view .LVU2115
 7848 0024 08BF     		it	eq
 7849 0026 1022     		moveq	r2, #16
 7850 0028 2046     		mov	r0, r4
 7851              	.LVL538:
 727:src/xeq.c     **** }
 7852              		.loc 1 727 2 view .LVU2116
 7853 002a 18BF     		it	ne
 7854 002c 0822     		movne	r2, #8
 7855              	.LBE1952:
 7856              	.LBE1954:
 732:src/xeq.c     **** 
 7857              		.loc 1 732 1 view .LVU2117
 7858 002e BDE83840 		pop	{r3, r4, r5, lr}
 7859              		.cfi_restore 14
 7860              		.cfi_restore 5
 7861              		.cfi_restore 4
 7862              		.cfi_restore 3
 7863              		.cfi_def_cfa_offset 0
 7864              	.LVL539:
 7865              	.LBB1955:
 7866              	.LBB1953:
 727:src/xeq.c     **** }
 7867              		.loc 1 727 2 view .LVU2118
 7868 0032 FFF7FEBF 		b	xcopy
 7869              	.LVL540:
 7870              	.L626:
 727:src/xeq.c     **** }
 7871              		.loc 1 727 2 view .LVU2119
 7872 0036 00BF     		.align	2
 7873              	.L625:
 7874 0038 00000000 		.word	main_ram
 7875              	.LBE1953:
 7876              	.LBE1955:
 7877              		.cfi_endproc
 7878              	.LFE46:
 7880              		.section	.text.setlastX,"ax",%progbits
 7881              		.align	1
 7882              		.p2align 2,,3
 7883              		.global	setlastX
 7884              		.syntax unified
 7885              		.thumb
 7886              		.thumb_func
 7887              		.fpu fpv4-sp-d16
 7889              	setlastX:
ARM GAS  /tmp/ccBFDvgN.s 			page 274


 7890              	.LFB55:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7891              		.loc 1 792 21 is_stmt 1 view -0
 7892              		.cfi_startproc
 7893              		@ args = 0, pretend = 0, frame = 0
 7894              		@ frame_needed = 0, uses_anonymous_args = 0
 7895              		@ link register save eliminated.
 793:src/xeq.c     **** }
 7896              		.loc 1 793 2 view .LVU2121
 7897 0000 6421     		movs	r1, #100
 7898 0002 6C20     		movs	r0, #108
 7899 0004 FFF7FEBF 		b	copyreg_n
 7900              	.LVL541:
 7901              		.cfi_endproc
 7902              	.LFE55:
 7904              		.section	.text.setlastXY,"ax",%progbits
 7905              		.align	1
 7906              		.p2align 2,,3
 7907              		.syntax unified
 7908              		.thumb
 7909              		.thumb_func
 7910              		.fpu fpv4-sp-d16
 7912              	setlastXY:
 7913              	.LFB56:
 796:src/xeq.c     **** 	setlastX();
 7914              		.loc 1 796 29 view -0
 7915              		.cfi_startproc
 7916              		@ args = 0, pretend = 0, frame = 0
 7917              		@ frame_needed = 0, uses_anonymous_args = 0
 797:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 7918              		.loc 1 797 2 view .LVU2123
 7919              	.LBB1956:
 7920              	.LBI1956:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7921              		.loc 1 792 6 view .LVU2124
 7922              	.LBB1957:
 793:src/xeq.c     **** }
 7923              		.loc 1 793 2 view .LVU2125
 7924              	.LBE1957:
 7925              	.LBE1956:
 796:src/xeq.c     **** 	setlastX();
 7926              		.loc 1 796 29 is_stmt 0 view .LVU2126
 7927 0000 08B5     		push	{r3, lr}
 7928              		.cfi_def_cfa_offset 8
 7929              		.cfi_offset 3, -8
 7930              		.cfi_offset 14, -4
 7931              	.LBB1959:
 7932              	.LBB1958:
 793:src/xeq.c     **** }
 7933              		.loc 1 793 2 view .LVU2127
 7934 0002 6421     		movs	r1, #100
 7935 0004 6C20     		movs	r0, #108
 7936 0006 FFF7FEFF 		bl	copyreg_n
 7937              	.LVL542:
 7938              	.LBE1958:
 7939              	.LBE1959:
 798:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 275


 7940              		.loc 1 798 2 is_stmt 1 view .LVU2128
 799:src/xeq.c     **** 
 7941              		.loc 1 799 1 is_stmt 0 view .LVU2129
 7942 000a BDE80840 		pop	{r3, lr}
 7943              		.cfi_restore 14
 7944              		.cfi_restore 3
 7945              		.cfi_def_cfa_offset 0
 798:src/xeq.c     **** }
 7946              		.loc 1 798 2 view .LVU2130
 7947 000e 6521     		movs	r1, #101
 7948 0010 6D20     		movs	r0, #109
 7949 0012 FFF7FEBF 		b	copyreg_n
 7950              	.LVL543:
 7951              		.cfi_endproc
 7952              	.LFE56:
 7954 0016 00BF     		.section	.text.getRegister,"ax",%progbits
 7955              		.align	1
 7956              		.p2align 2,,3
 7957              		.global	getRegister
 7958              		.syntax unified
 7959              		.thumb
 7960              		.thumb_func
 7961              		.fpu fpv4-sp-d16
 7963              	getRegister:
 7964              	.LVL544:
 7965              	.LFB57:
 802:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7966              		.loc 1 802 49 is_stmt 1 view -0
 7967              		.cfi_startproc
 7968              		@ args = 0, pretend = 0, frame = 0
 7969              		@ frame_needed = 0, uses_anonymous_args = 0
 803:src/xeq.c     **** 	if (is_dblmode())
 7970              		.loc 1 803 2 view .LVU2132
 802:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7971              		.loc 1 802 49 is_stmt 0 view .LVU2133
 7972 0000 10B5     		push	{r4, lr}
 7973              		.cfi_def_cfa_offset 8
 7974              		.cfi_offset 4, -8
 7975              		.cfi_offset 14, -4
 802:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7976              		.loc 1 802 49 view .LVU2134
 7977 0002 0446     		mov	r4, r0
 803:src/xeq.c     **** 	if (is_dblmode())
 7978              		.loc 1 803 30 view .LVU2135
 7979 0004 0846     		mov	r0, r1
 7980              	.LVL545:
 803:src/xeq.c     **** 	if (is_dblmode())
 7981              		.loc 1 803 30 view .LVU2136
 7982 0006 FFF7FEFF 		bl	get_reg_n
 7983              	.LVL546:
 804:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7984              		.loc 1 804 2 is_stmt 1 view .LVU2137
 7985              	.LBB1960:
 7986              	.LBI1960:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7987              		.loc 1 1118 5 view .LVU2138
 7988              	.LBB1961:
ARM GAS  /tmp/ccBFDvgN.s 			page 276


1119:src/xeq.c     **** }
 7989              		.loc 1 1119 2 view .LVU2139
1119:src/xeq.c     **** }
 7990              		.loc 1 1119 24 is_stmt 0 view .LVU2140
 7991 000a 094B     		ldr	r3, .L635
 7992 000c 1B68     		ldr	r3, [r3]
 7993 000e B3F8E827 		ldrh	r2, [r3, #2024]
 7994 0012 44F20103 		movw	r3, #16385
 7995              	.LBE1961:
 7996              	.LBE1960:
 804:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7997              		.loc 1 804 5 view .LVU2141
 7998 0016 1340     		ands	r3, r3, r2
 7999 0018 B3F5804F 		cmp	r3, #16384
 805:src/xeq.c     **** 	else
 8000              		.loc 1 805 3 view .LVU2142
 8001 001c 2146     		mov	r1, r4
 804:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 8002              		.loc 1 804 5 view .LVU2143
 8003 001e 03D0     		beq	.L634
 807:src/xeq.c     **** 	return r;
 8004              		.loc 1 807 3 is_stmt 1 view .LVU2144
 8005 0020 FFF7FEFF 		bl	decimal64ToNumber
 8006              	.LVL547:
 808:src/xeq.c     **** }
 8007              		.loc 1 808 2 view .LVU2145
 809:src/xeq.c     **** 
 8008              		.loc 1 809 1 is_stmt 0 view .LVU2146
 8009 0024 2046     		mov	r0, r4
 8010 0026 10BD     		pop	{r4, pc}
 8011              	.LVL548:
 8012              	.L634:
 805:src/xeq.c     **** 	else
 8013              		.loc 1 805 3 is_stmt 1 view .LVU2147
 8014 0028 FFF7FEFF 		bl	decimal128ToNumber
 8015              	.LVL549:
 808:src/xeq.c     **** }
 8016              		.loc 1 808 2 view .LVU2148
 809:src/xeq.c     **** 
 8017              		.loc 1 809 1 is_stmt 0 view .LVU2149
 8018 002c 2046     		mov	r0, r4
 8019 002e 10BD     		pop	{r4, pc}
 8020              	.LVL550:
 8021              	.L636:
 809:src/xeq.c     **** 
 8022              		.loc 1 809 1 view .LVU2150
 8023              		.align	2
 8024              	.L635:
 8025 0030 00000000 		.word	main_ram
 8026              		.cfi_endproc
 8027              	.LFE57:
 8029              		.section	.text.getX,"ax",%progbits
 8030              		.align	1
 8031              		.p2align 2,,3
 8032              		.global	getX
 8033              		.syntax unified
 8034              		.thumb
ARM GAS  /tmp/ccBFDvgN.s 			page 277


 8035              		.thumb_func
 8036              		.fpu fpv4-sp-d16
 8038              	getX:
 8039              	.LVL551:
 8040              	.LFB59:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8041              		.loc 1 824 31 is_stmt 1 view -0
 8042              		.cfi_startproc
 8043              		@ args = 0, pretend = 0, frame = 0
 8044              		@ frame_needed = 0, uses_anonymous_args = 0
 8045              		@ link register save eliminated.
 825:src/xeq.c     **** }
 8046              		.loc 1 825 2 view .LVU2152
 825:src/xeq.c     **** }
 8047              		.loc 1 825 9 is_stmt 0 view .LVU2153
 8048 0000 6421     		movs	r1, #100
 8049 0002 FFF7FEBF 		b	getRegister
 8050              	.LVL552:
 825:src/xeq.c     **** }
 8051              		.loc 1 825 9 view .LVU2154
 8052              		.cfi_endproc
 8053              	.LFE59:
 8055 0006 00BF     		.section	.text.getY,"ax",%progbits
 8056              		.align	1
 8057              		.p2align 2,,3
 8058              		.global	getY
 8059              		.syntax unified
 8060              		.thumb
 8061              		.thumb_func
 8062              		.fpu fpv4-sp-d16
 8064              	getY:
 8065              	.LVL553:
 8066              	.LFB61:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8067              		.loc 1 832 25 is_stmt 1 view -0
 8068              		.cfi_startproc
 8069              		@ args = 0, pretend = 0, frame = 0
 8070              		@ frame_needed = 0, uses_anonymous_args = 0
 8071              		@ link register save eliminated.
 833:src/xeq.c     **** }
 8072              		.loc 1 833 2 view .LVU2156
 8073 0000 6521     		movs	r1, #101
 8074 0002 FFF7FEBF 		b	getRegister
 8075              	.LVL554:
 833:src/xeq.c     **** }
 8076              		.loc 1 833 2 is_stmt 0 view .LVU2157
 8077              		.cfi_endproc
 8078              	.LFE61:
 8080 0006 00BF     		.section	.text.getXY,"ax",%progbits
 8081              		.align	1
 8082              		.p2align 2,,3
 8083              		.global	getXY
 8084              		.syntax unified
 8085              		.thumb
 8086              		.thumb_func
 8087              		.fpu fpv4-sp-d16
 8089              	getXY:
ARM GAS  /tmp/ccBFDvgN.s 			page 278


 8090              	.LVL555:
 8091              	.LFB65:
 854:src/xeq.c     **** 	getX(x);
 8092              		.loc 1 854 40 is_stmt 1 view -0
 8093              		.cfi_startproc
 8094              		@ args = 0, pretend = 0, frame = 0
 8095              		@ frame_needed = 0, uses_anonymous_args = 0
 855:src/xeq.c     **** 	getY(y);
 8096              		.loc 1 855 2 view .LVU2159
 8097              	.LBB1962:
 8098              	.LBI1962:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8099              		.loc 1 824 12 view .LVU2160
 8100              	.LBB1963:
 825:src/xeq.c     **** }
 8101              		.loc 1 825 2 view .LVU2161
 8102              	.LBE1963:
 8103              	.LBE1962:
 854:src/xeq.c     **** 	getX(x);
 8104              		.loc 1 854 40 is_stmt 0 view .LVU2162
 8105 0000 10B5     		push	{r4, lr}
 8106              		.cfi_def_cfa_offset 8
 8107              		.cfi_offset 4, -8
 8108              		.cfi_offset 14, -4
 854:src/xeq.c     **** 	getX(x);
 8109              		.loc 1 854 40 view .LVU2163
 8110 0002 0C46     		mov	r4, r1
 8111              	.LBB1965:
 8112              	.LBB1964:
 825:src/xeq.c     **** }
 8113              		.loc 1 825 9 view .LVU2164
 8114 0004 6421     		movs	r1, #100
 8115              	.LVL556:
 825:src/xeq.c     **** }
 8116              		.loc 1 825 9 view .LVU2165
 8117 0006 FFF7FEFF 		bl	getRegister
 8118              	.LVL557:
 825:src/xeq.c     **** }
 8119              		.loc 1 825 9 view .LVU2166
 8120              	.LBE1964:
 8121              	.LBE1965:
 856:src/xeq.c     **** }
 8122              		.loc 1 856 2 is_stmt 1 view .LVU2167
 8123              	.LBB1966:
 8124              	.LBI1966:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8125              		.loc 1 832 6 view .LVU2168
 8126              	.LBB1967:
 833:src/xeq.c     **** }
 8127              		.loc 1 833 2 view .LVU2169
 8128 000a 2046     		mov	r0, r4
 8129 000c 6521     		movs	r1, #101
 8130              	.LBE1967:
 8131              	.LBE1966:
 857:src/xeq.c     **** 
 8132              		.loc 1 857 1 is_stmt 0 view .LVU2170
 8133 000e BDE81040 		pop	{r4, lr}
ARM GAS  /tmp/ccBFDvgN.s 			page 279


 8134              		.cfi_restore 14
 8135              		.cfi_restore 4
 8136              		.cfi_def_cfa_offset 0
 8137              	.LVL558:
 8138              	.LBB1969:
 8139              	.LBB1968:
 833:src/xeq.c     **** }
 8140              		.loc 1 833 2 view .LVU2171
 8141 0012 FFF7FEBF 		b	getRegister
 8142              	.LVL559:
 833:src/xeq.c     **** }
 8143              		.loc 1 833 2 view .LVU2172
 8144              	.LBE1968:
 8145              	.LBE1969:
 8146              		.cfi_endproc
 8147              	.LFE65:
 8149 0016 00BF     		.section	.text.getXYZ,"ax",%progbits
 8150              		.align	1
 8151              		.p2align 2,,3
 8152              		.global	getXYZ
 8153              		.syntax unified
 8154              		.thumb
 8155              		.thumb_func
 8156              		.fpu fpv4-sp-d16
 8158              	getXYZ:
 8159              	.LVL560:
 8160              	.LFB67:
 867:src/xeq.c     **** 	getXY(x, y);
 8161              		.loc 1 867 55 is_stmt 1 view -0
 8162              		.cfi_startproc
 8163              		@ args = 0, pretend = 0, frame = 0
 8164              		@ frame_needed = 0, uses_anonymous_args = 0
 868:src/xeq.c     **** 	getZ(z);
 8165              		.loc 1 868 2 view .LVU2174
 867:src/xeq.c     **** 	getXY(x, y);
 8166              		.loc 1 867 55 is_stmt 0 view .LVU2175
 8167 0000 38B5     		push	{r3, r4, r5, lr}
 8168              		.cfi_def_cfa_offset 16
 8169              		.cfi_offset 3, -16
 8170              		.cfi_offset 4, -12
 8171              		.cfi_offset 5, -8
 8172              		.cfi_offset 14, -4
 867:src/xeq.c     **** 	getXY(x, y);
 8173              		.loc 1 867 55 view .LVU2176
 8174 0002 0D46     		mov	r5, r1
 8175              	.LVL561:
 8176              	.LBB1970:
 8177              	.LBI1970:
 854:src/xeq.c     **** 	getX(x);
 8178              		.loc 1 854 6 is_stmt 1 view .LVU2177
 8179              	.LBE1970:
 855:src/xeq.c     **** 	getY(y);
 8180              		.loc 1 855 2 view .LVU2178
 8181              	.LBB1977:
 8182              	.LBB1971:
 8183              	.LBI1971:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
ARM GAS  /tmp/ccBFDvgN.s 			page 280


 8184              		.loc 1 824 12 view .LVU2179
 8185              	.LBB1972:
 825:src/xeq.c     **** }
 8186              		.loc 1 825 2 view .LVU2180
 825:src/xeq.c     **** }
 8187              		.loc 1 825 9 is_stmt 0 view .LVU2181
 8188 0004 6421     		movs	r1, #100
 8189              	.LVL562:
 825:src/xeq.c     **** }
 8190              		.loc 1 825 9 view .LVU2182
 8191              	.LBE1972:
 8192              	.LBE1971:
 8193              	.LBE1977:
 867:src/xeq.c     **** 	getXY(x, y);
 8194              		.loc 1 867 55 view .LVU2183
 8195 0006 1446     		mov	r4, r2
 8196              	.LBB1978:
 8197              	.LBB1974:
 8198              	.LBB1973:
 825:src/xeq.c     **** }
 8199              		.loc 1 825 9 view .LVU2184
 8200 0008 FFF7FEFF 		bl	getRegister
 8201              	.LVL563:
 825:src/xeq.c     **** }
 8202              		.loc 1 825 9 view .LVU2185
 8203              	.LBE1973:
 8204              	.LBE1974:
 8205              	.LBE1978:
 856:src/xeq.c     **** }
 8206              		.loc 1 856 2 is_stmt 1 view .LVU2186
 8207              	.LBB1979:
 8208              	.LBB1975:
 8209              	.LBI1975:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8210              		.loc 1 832 6 view .LVU2187
 8211              	.LBB1976:
 833:src/xeq.c     **** }
 8212              		.loc 1 833 2 view .LVU2188
 8213 000c 2846     		mov	r0, r5
 8214 000e 6521     		movs	r1, #101
 8215 0010 FFF7FEFF 		bl	getRegister
 8216              	.LVL564:
 833:src/xeq.c     **** }
 8217              		.loc 1 833 2 is_stmt 0 view .LVU2189
 8218              	.LBE1976:
 8219              	.LBE1975:
 8220              	.LBE1979:
 869:src/xeq.c     **** }
 8221              		.loc 1 869 2 is_stmt 1 view .LVU2190
 8222              	.LBB1980:
 8223              	.LBI1980:
 840:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8224              		.loc 1 840 13 view .LVU2191
 8225              	.LBB1981:
 841:src/xeq.c     **** }
 8226              		.loc 1 841 2 view .LVU2192
 8227 0014 2046     		mov	r0, r4
ARM GAS  /tmp/ccBFDvgN.s 			page 281


 8228 0016 6621     		movs	r1, #102
 8229              	.LBE1981:
 8230              	.LBE1980:
 870:src/xeq.c     **** 
 8231              		.loc 1 870 1 is_stmt 0 view .LVU2193
 8232 0018 BDE83840 		pop	{r3, r4, r5, lr}
 8233              		.cfi_restore 14
 8234              		.cfi_restore 5
 8235              		.cfi_restore 4
 8236              		.cfi_restore 3
 8237              		.cfi_def_cfa_offset 0
 8238              	.LVL565:
 8239              	.LBB1983:
 8240              	.LBB1982:
 841:src/xeq.c     **** }
 8241              		.loc 1 841 2 view .LVU2194
 8242 001c FFF7FEBF 		b	getRegister
 8243              	.LVL566:
 841:src/xeq.c     **** }
 8244              		.loc 1 841 2 view .LVU2195
 8245              	.LBE1982:
 8246              	.LBE1983:
 8247              		.cfi_endproc
 8248              	.LFE67:
 8250              		.section	.text.getYZ,"ax",%progbits
 8251              		.align	1
 8252              		.p2align 2,,3
 8253              		.global	getYZ
 8254              		.syntax unified
 8255              		.thumb
 8256              		.thumb_func
 8257              		.fpu fpv4-sp-d16
 8259              	getYZ:
 8260              	.LVL567:
 8261              	.LFB69:
 884:src/xeq.c     **** 	getY(y);
 8262              		.loc 1 884 40 is_stmt 1 view -0
 8263              		.cfi_startproc
 8264              		@ args = 0, pretend = 0, frame = 0
 8265              		@ frame_needed = 0, uses_anonymous_args = 0
 885:src/xeq.c     **** 	getZ(z);
 8266              		.loc 1 885 2 view .LVU2197
 8267              	.LBB1984:
 8268              	.LBI1984:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8269              		.loc 1 832 6 view .LVU2198
 8270              	.LBB1985:
 833:src/xeq.c     **** }
 8271              		.loc 1 833 2 view .LVU2199
 8272              	.LBE1985:
 8273              	.LBE1984:
 884:src/xeq.c     **** 	getY(y);
 8274              		.loc 1 884 40 is_stmt 0 view .LVU2200
 8275 0000 10B5     		push	{r4, lr}
 8276              		.cfi_def_cfa_offset 8
 8277              		.cfi_offset 4, -8
 8278              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBFDvgN.s 			page 282


 884:src/xeq.c     **** 	getY(y);
 8279              		.loc 1 884 40 view .LVU2201
 8280 0002 0C46     		mov	r4, r1
 8281              	.LBB1987:
 8282              	.LBB1986:
 833:src/xeq.c     **** }
 8283              		.loc 1 833 2 view .LVU2202
 8284 0004 6521     		movs	r1, #101
 8285              	.LVL568:
 833:src/xeq.c     **** }
 8286              		.loc 1 833 2 view .LVU2203
 8287 0006 FFF7FEFF 		bl	getRegister
 8288              	.LVL569:
 833:src/xeq.c     **** }
 8289              		.loc 1 833 2 view .LVU2204
 8290              	.LBE1986:
 8291              	.LBE1987:
 886:src/xeq.c     **** }
 8292              		.loc 1 886 2 is_stmt 1 view .LVU2205
 8293              	.LBB1988:
 8294              	.LBI1988:
 840:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8295              		.loc 1 840 13 view .LVU2206
 8296              	.LBB1989:
 841:src/xeq.c     **** }
 8297              		.loc 1 841 2 view .LVU2207
 8298 000a 2046     		mov	r0, r4
 8299 000c 6621     		movs	r1, #102
 8300              	.LBE1989:
 8301              	.LBE1988:
 887:src/xeq.c     **** 
 8302              		.loc 1 887 1 is_stmt 0 view .LVU2208
 8303 000e BDE81040 		pop	{r4, lr}
 8304              		.cfi_restore 14
 8305              		.cfi_restore 4
 8306              		.cfi_def_cfa_offset 0
 8307              	.LVL570:
 8308              	.LBB1991:
 8309              	.LBB1990:
 841:src/xeq.c     **** }
 8310              		.loc 1 841 2 view .LVU2209
 8311 0012 FFF7FEBF 		b	getRegister
 8312              	.LVL571:
 841:src/xeq.c     **** }
 8313              		.loc 1 841 2 view .LVU2210
 8314              	.LBE1990:
 8315              	.LBE1991:
 8316              		.cfi_endproc
 8317              	.LFE69:
 8319 0016 00BF     		.section	.text.getXYZT,"ax",%progbits
 8320              		.align	1
 8321              		.p2align 2,,3
 8322              		.global	getXYZT
 8323              		.syntax unified
 8324              		.thumb
 8325              		.thumb_func
 8326              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccBFDvgN.s 			page 283


 8328              	getXYZT:
 8329              	.LVL572:
 8330              	.LFB68:
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 8331              		.loc 1 879 70 is_stmt 1 view -0
 8332              		.cfi_startproc
 8333              		@ args = 0, pretend = 0, frame = 0
 8334              		@ frame_needed = 0, uses_anonymous_args = 0
 880:src/xeq.c     **** 	getT(t);
 8335              		.loc 1 880 2 view .LVU2212
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 8336              		.loc 1 879 70 is_stmt 0 view .LVU2213
 8337 0000 10B5     		push	{r4, lr}
 8338              		.cfi_def_cfa_offset 8
 8339              		.cfi_offset 4, -8
 8340              		.cfi_offset 14, -4
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 8341              		.loc 1 879 70 view .LVU2214
 8342 0002 1C46     		mov	r4, r3
 880:src/xeq.c     **** 	getT(t);
 8343              		.loc 1 880 2 view .LVU2215
 8344 0004 FFF7FEFF 		bl	getXYZ
 8345              	.LVL573:
 881:src/xeq.c     **** }
 8346              		.loc 1 881 2 is_stmt 1 view .LVU2216
 8347              	.LBB1992:
 8348              	.LBI1992:
 850:src/xeq.c     **** 	getRegister(t, regT_idx);
 8349              		.loc 1 850 13 view .LVU2217
 8350              	.LBB1993:
 851:src/xeq.c     **** }
 8351              		.loc 1 851 2 view .LVU2218
 8352 0008 2046     		mov	r0, r4
 8353 000a 6721     		movs	r1, #103
 8354              	.LBE1993:
 8355              	.LBE1992:
 882:src/xeq.c     **** 
 8356              		.loc 1 882 1 is_stmt 0 view .LVU2219
 8357 000c BDE81040 		pop	{r4, lr}
 8358              		.cfi_restore 14
 8359              		.cfi_restore 4
 8360              		.cfi_def_cfa_offset 0
 8361              	.LVL574:
 8362              	.LBB1995:
 8363              	.LBB1994:
 851:src/xeq.c     **** }
 8364              		.loc 1 851 2 view .LVU2220
 8365 0010 FFF7FEBF 		b	getRegister
 8366              	.LVL575:
 851:src/xeq.c     **** }
 8367              		.loc 1 851 2 view .LVU2221
 8368              	.LBE1994:
 8369              	.LBE1995:
 8370              		.cfi_endproc
 8371              	.LFE68:
 8373              		.section	.text.storcl_op,"ax",%progbits
 8374              		.align	1
ARM GAS  /tmp/ccBFDvgN.s 			page 284


 8375              		.p2align 2,,3
 8376              		.syntax unified
 8377              		.thumb
 8378              		.thumb_func
 8379              		.fpu fpv4-sp-d16
 8381              	storcl_op:
 8382              	.LVL576:
 8383              	.LFB115:
1650:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8384              		.loc 1 1650 76 is_stmt 1 view -0
 8385              		.cfi_startproc
 8386              		@ args = 0, pretend = 0, frame = 72
 8387              		@ frame_needed = 0, uses_anonymous_args = 0
1651:src/xeq.c     **** 
 8388              		.loc 1 1651 2 view .LVU2223
1650:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8389              		.loc 1 1650 76 is_stmt 0 view .LVU2224
 8390 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8391              		.cfi_def_cfa_offset 20
 8392              		.cfi_offset 4, -20
 8393              		.cfi_offset 5, -16
 8394              		.cfi_offset 6, -12
 8395              		.cfi_offset 7, -8
 8396              		.cfi_offset 14, -4
 8397 0002 93B0     		sub	sp, sp, #76
 8398              		.cfi_def_cfa_offset 96
 8399              	.LVL577:
1653:src/xeq.c     **** 	getRegister(y, index);
 8400              		.loc 1 1653 2 is_stmt 1 view .LVU2225
 8401              	.LBB1996:
 8402              	.LBI1996:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8403              		.loc 1 824 12 view .LVU2226
 8404              	.LBB1997:
 825:src/xeq.c     **** }
 8405              		.loc 1 825 2 view .LVU2227
 8406              	.LBE1997:
 8407              	.LBE1996:
1650:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8408              		.loc 1 1650 76 is_stmt 0 view .LVU2228
 8409 0004 0E46     		mov	r6, r1
 8410 0006 0446     		mov	r4, r0
 8411              	.LBB2000:
 8412              	.LBB1998:
 825:src/xeq.c     **** }
 8413              		.loc 1 825 9 view .LVU2229
 8414 0008 6421     		movs	r1, #100
 8415              	.LVL578:
 825:src/xeq.c     **** }
 8416              		.loc 1 825 9 view .LVU2230
 8417 000a 6846     		mov	r0, sp
 8418              	.LVL579:
 825:src/xeq.c     **** }
 8419              		.loc 1 825 9 view .LVU2231
 8420              	.LBE1998:
 8421              	.LBE2000:
1650:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
ARM GAS  /tmp/ccBFDvgN.s 			page 285


 8422              		.loc 1 1650 76 view .LVU2232
 8423 000c 1D46     		mov	r5, r3
 8424 000e 1746     		mov	r7, r2
 8425              	.LBB2001:
 8426              	.LBB1999:
 825:src/xeq.c     **** }
 8427              		.loc 1 825 9 view .LVU2233
 8428 0010 FFF7FEFF 		bl	getRegister
 8429              	.LVL580:
 825:src/xeq.c     **** }
 8430              		.loc 1 825 9 view .LVU2234
 8431              	.LBE1999:
 8432              	.LBE2001:
1654:src/xeq.c     **** 	if (rev) {
 8433              		.loc 1 1654 2 is_stmt 1 view .LVU2235
 8434 0014 3146     		mov	r1, r6
 8435 0016 09A8     		add	r0, sp, #36
 8436              	.LVL581:
1654:src/xeq.c     **** 	if (rev) {
 8437              		.loc 1 1654 2 is_stmt 0 view .LVU2236
 8438 0018 FFF7FEFF 		bl	getRegister
 8439              	.LVL582:
1655:src/xeq.c     **** 		x = y;
 8440              		.loc 1 1655 2 is_stmt 1 view .LVU2237
1655:src/xeq.c     **** 		x = y;
 8441              		.loc 1 1655 5 is_stmt 0 view .LVU2238
 8442 001c 4DB1     		cbz	r5, .L657
1657:src/xeq.c     **** 	}
 8443              		.loc 1 1657 5 view .LVU2239
 8444 001e 6946     		mov	r1, sp
1656:src/xeq.c     **** 		y = &a;
 8445              		.loc 1 1656 5 view .LVU2240
 8446 0020 09AA     		add	r2, sp, #36
 8447              	.LVL583:
 8448              	.L648:
1660:src/xeq.c     **** 	case 1:
 8449              		.loc 1 1660 2 is_stmt 1 view .LVU2241
 8450 0022 601E     		subs	r0, r4, #1
 8451 0024 0528     		cmp	r0, #5
 8452 0026 2BD8     		bhi	.L658
 8453 0028 DFE800F0 		tbb	[pc, r0]
 8454              	.L651:
 8455 002c 0C       		.byte	(.L656-.L651)/2
 8456 002d 12       		.byte	(.L655-.L651)/2
 8457 002e 18       		.byte	(.L654-.L651)/2
 8458 002f 1E       		.byte	(.L653-.L651)/2
 8459 0030 24       		.byte	(.L652-.L651)/2
 8460 0031 06       		.byte	(.L650-.L651)/2
 8461              	.LVL584:
 8462              		.p2align 1
 8463              	.L657:
1651:src/xeq.c     **** 
 8464              		.loc 1 1651 28 is_stmt 0 view .LVU2242
 8465 0032 09A9     		add	r1, sp, #36
 8466              	.LVL585:
1651:src/xeq.c     **** 
 8467              		.loc 1 1651 19 view .LVU2243
ARM GAS  /tmp/ccBFDvgN.s 			page 286


 8468 0034 6A46     		mov	r2, sp
 8469 0036 F4E7     		b	.L648
 8470              	.LVL586:
 8471              	.L650:
1677:src/xeq.c     **** 		break;
 8472              		.loc 1 1677 3 is_stmt 1 view .LVU2244
 8473 0038 3846     		mov	r0, r7
 8474 003a FFF7FEFF 		bl	dn_max
 8475              	.LVL587:
1678:src/xeq.c     **** 	default:
 8476              		.loc 1 1678 3 view .LVU2245
1682:src/xeq.c     **** }
 8477              		.loc 1 1682 9 is_stmt 0 view .LVU2246
 8478 003e 0020     		movs	r0, #0
 8479              	.L647:
1683:src/xeq.c     **** 
 8480              		.loc 1 1683 1 view .LVU2247
 8481 0040 13B0     		add	sp, sp, #76
 8482              		.cfi_remember_state
 8483              		.cfi_def_cfa_offset 20
 8484              		@ sp needed
 8485 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 8486              	.LVL588:
 8487              	.L656:
 8488              		.cfi_restore_state
1662:src/xeq.c     **** 		break;
 8489              		.loc 1 1662 3 is_stmt 1 view .LVU2248
 8490 0044 3846     		mov	r0, r7
 8491 0046 FFF7FEFF 		bl	dn_add
 8492              	.LVL589:
1663:src/xeq.c     **** 	case 2:
 8493              		.loc 1 1663 3 view .LVU2249
1682:src/xeq.c     **** }
 8494              		.loc 1 1682 9 is_stmt 0 view .LVU2250
 8495 004a 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8496              		.loc 1 1683 1 view .LVU2251
 8497 004c 13B0     		add	sp, sp, #76
 8498              		.cfi_remember_state
 8499              		.cfi_def_cfa_offset 20
 8500              		@ sp needed
 8501 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 8502              	.LVL590:
 8503              	.L655:
 8504              		.cfi_restore_state
1665:src/xeq.c     **** 		break;
 8505              		.loc 1 1665 3 is_stmt 1 view .LVU2252
 8506 0050 3846     		mov	r0, r7
 8507 0052 FFF7FEFF 		bl	dn_subtract
 8508              	.LVL591:
1666:src/xeq.c     **** 	case 3:
 8509              		.loc 1 1666 3 view .LVU2253
1682:src/xeq.c     **** }
 8510              		.loc 1 1682 9 is_stmt 0 view .LVU2254
 8511 0056 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8512              		.loc 1 1683 1 view .LVU2255
ARM GAS  /tmp/ccBFDvgN.s 			page 287


 8513 0058 13B0     		add	sp, sp, #76
 8514              		.cfi_remember_state
 8515              		.cfi_def_cfa_offset 20
 8516              		@ sp needed
 8517 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 8518              	.LVL592:
 8519              	.L654:
 8520              		.cfi_restore_state
1668:src/xeq.c     **** 		break;
 8521              		.loc 1 1668 3 is_stmt 1 view .LVU2256
 8522 005c 3846     		mov	r0, r7
 8523 005e FFF7FEFF 		bl	dn_multiply
 8524              	.LVL593:
1669:src/xeq.c     **** 	case 4:
 8525              		.loc 1 1669 3 view .LVU2257
1682:src/xeq.c     **** }
 8526              		.loc 1 1682 9 is_stmt 0 view .LVU2258
 8527 0062 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8528              		.loc 1 1683 1 view .LVU2259
 8529 0064 13B0     		add	sp, sp, #76
 8530              		.cfi_remember_state
 8531              		.cfi_def_cfa_offset 20
 8532              		@ sp needed
 8533 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 8534              	.LVL594:
 8535              	.L653:
 8536              		.cfi_restore_state
1671:src/xeq.c     **** 		break;
 8537              		.loc 1 1671 3 is_stmt 1 view .LVU2260
 8538 0068 3846     		mov	r0, r7
 8539 006a FFF7FEFF 		bl	dn_divide
 8540              	.LVL595:
1672:src/xeq.c     **** 	case 5:
 8541              		.loc 1 1672 3 view .LVU2261
1682:src/xeq.c     **** }
 8542              		.loc 1 1682 9 is_stmt 0 view .LVU2262
 8543 006e 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8544              		.loc 1 1683 1 view .LVU2263
 8545 0070 13B0     		add	sp, sp, #76
 8546              		.cfi_remember_state
 8547              		.cfi_def_cfa_offset 20
 8548              		@ sp needed
 8549 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 8550              	.LVL596:
 8551              	.L652:
 8552              		.cfi_restore_state
1674:src/xeq.c     **** 		break;
 8553              		.loc 1 1674 3 is_stmt 1 view .LVU2264
 8554 0074 3846     		mov	r0, r7
 8555 0076 FFF7FEFF 		bl	dn_min
 8556              	.LVL597:
1675:src/xeq.c     **** 	case 6:
 8557              		.loc 1 1675 3 view .LVU2265
1682:src/xeq.c     **** }
 8558              		.loc 1 1682 9 is_stmt 0 view .LVU2266
ARM GAS  /tmp/ccBFDvgN.s 			page 288


 8559 007a 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8560              		.loc 1 1683 1 view .LVU2267
 8561 007c 13B0     		add	sp, sp, #76
 8562              		.cfi_def_cfa_offset 20
 8563              		@ sp needed
 8564 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 8565              	.LVL598:
 8566              	.L658:
1682:src/xeq.c     **** }
 8567              		.loc 1 1682 9 view .LVU2268
 8568 0080 0120     		movs	r0, #1
 8569 0082 DDE7     		b	.L647
 8570              		.cfi_endproc
 8571              	.LFE115:
 8573              		.section	.text.storcl_cop,"ax",%progbits
 8574              		.align	1
 8575              		.p2align 2,,3
 8576              		.syntax unified
 8577              		.thumb
 8578              		.thumb_func
 8579              		.fpu fpv4-sp-d16
 8581              	storcl_cop:
 8582              	.LVL599:
 8583              	.LFB120:
1784:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8584              		.loc 1 1784 93 is_stmt 1 view -0
 8585              		.cfi_startproc
 8586              		@ args = 4, pretend = 0, frame = 144
 8587              		@ frame_needed = 0, uses_anonymous_args = 0
1785:src/xeq.c     **** 
 8588              		.loc 1 1785 2 view .LVU2270
1784:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8589              		.loc 1 1784 93 is_stmt 0 view .LVU2271
 8590 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8591              		.cfi_def_cfa_offset 24
 8592              		.cfi_offset 4, -24
 8593              		.cfi_offset 5, -20
 8594              		.cfi_offset 6, -16
 8595              		.cfi_offset 7, -12
 8596              		.cfi_offset 8, -8
 8597              		.cfi_offset 14, -4
 8598 0004 A6B0     		sub	sp, sp, #152
 8599              		.cfi_def_cfa_offset 176
 8600              	.LVL600:
1787:src/xeq.c     **** 	getRegister(y + 0, index);
 8601              		.loc 1 1787 2 is_stmt 1 view .LVU2272
 8602              	.LBB2002:
 8603              	.LBI2002:
 854:src/xeq.c     **** 	getX(x);
 8604              		.loc 1 854 6 view .LVU2273
 8605              	.LBE2002:
 855:src/xeq.c     **** 	getY(y);
 8606              		.loc 1 855 2 view .LVU2274
 8607              	.LBB2011:
 8608              	.LBB2003:
 8609              	.LBI2003:
ARM GAS  /tmp/ccBFDvgN.s 			page 289


 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8610              		.loc 1 824 12 view .LVU2275
 8611              	.LBB2004:
 825:src/xeq.c     **** }
 8612              		.loc 1 825 2 view .LVU2276
 8613              	.LBE2004:
 8614              	.LBE2003:
 8615              	.LBE2011:
1784:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8616              		.loc 1 1784 93 is_stmt 0 view .LVU2277
 8617 0006 0D46     		mov	r5, r1
 8618 0008 0446     		mov	r4, r0
 8619              	.LBB2012:
 8620              	.LBB2007:
 8621              	.LBB2005:
 825:src/xeq.c     **** }
 8622              		.loc 1 825 9 view .LVU2278
 8623 000a 6421     		movs	r1, #100
 8624              	.LVL601:
 825:src/xeq.c     **** }
 8625              		.loc 1 825 9 view .LVU2279
 8626 000c 02A8     		add	r0, sp, #8
 8627              	.LVL602:
 825:src/xeq.c     **** }
 8628              		.loc 1 825 9 view .LVU2280
 8629              	.LBE2005:
 8630              	.LBE2007:
 8631              	.LBE2012:
1784:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8632              		.loc 1 1784 93 view .LVU2281
 8633 000e 9046     		mov	r8, r2
 8634 0010 1E46     		mov	r6, r3
 8635 0012 2C9F     		ldr	r7, [sp, #176]
 8636              	.LBB2013:
 8637              	.LBB2008:
 8638              	.LBB2006:
 825:src/xeq.c     **** }
 8639              		.loc 1 825 9 view .LVU2282
 8640 0014 FFF7FEFF 		bl	getRegister
 8641              	.LVL603:
 825:src/xeq.c     **** }
 8642              		.loc 1 825 9 view .LVU2283
 8643              	.LBE2006:
 8644              	.LBE2008:
 8645              	.LBE2013:
 856:src/xeq.c     **** }
 8646              		.loc 1 856 2 is_stmt 1 view .LVU2284
 8647              	.LBB2014:
 8648              	.LBB2009:
 8649              	.LBI2009:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8650              		.loc 1 832 6 view .LVU2285
 8651              	.LBB2010:
 833:src/xeq.c     **** }
 8652              		.loc 1 833 2 view .LVU2286
 8653 0018 6521     		movs	r1, #101
 8654 001a 0BA8     		add	r0, sp, #44
ARM GAS  /tmp/ccBFDvgN.s 			page 290


 8655              	.LVL604:
 833:src/xeq.c     **** }
 8656              		.loc 1 833 2 is_stmt 0 view .LVU2287
 8657 001c FFF7FEFF 		bl	getRegister
 8658              	.LVL605:
 833:src/xeq.c     **** }
 8659              		.loc 1 833 2 view .LVU2288
 8660              	.LBE2010:
 8661              	.LBE2009:
 8662              	.LBE2014:
1788:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8663              		.loc 1 1788 2 is_stmt 1 view .LVU2289
 8664 0020 2946     		mov	r1, r5
 8665 0022 14A8     		add	r0, sp, #80
 8666              	.LVL606:
1788:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8667              		.loc 1 1788 2 is_stmt 0 view .LVU2290
 8668 0024 FFF7FEFF 		bl	getRegister
 8669              	.LVL607:
1789:src/xeq.c     **** 
 8670              		.loc 1 1789 2 is_stmt 1 view .LVU2291
 8671 0028 691C     		adds	r1, r5, #1
 8672 002a 1DA8     		add	r0, sp, #116
 8673 002c FFF7FEFF 		bl	getRegister
 8674              	.LVL608:
1791:src/xeq.c     **** 		x = y;
 8675              		.loc 1 1791 2 view .LVU2292
1791:src/xeq.c     **** 		x = y;
 8676              		.loc 1 1791 5 is_stmt 0 view .LVU2293
 8677 0030 47B1     		cbz	r7, .L668
1793:src/xeq.c     **** 	}
 8678              		.loc 1 1793 5 view .LVU2294
 8679 0032 02AA     		add	r2, sp, #8
 8680              	.LVL609:
1792:src/xeq.c     **** 		y = a;
 8681              		.loc 1 1792 5 view .LVU2295
 8682 0034 14A9     		add	r1, sp, #80
 8683              	.LVL610:
 8684              	.L661:
1796:src/xeq.c     **** 	case 1:
 8685              		.loc 1 1796 2 is_stmt 1 view .LVU2296
 8686 0036 601E     		subs	r0, r4, #1
 8687 0038 0328     		cmp	r0, #3
 8688 003a 3ED8     		bhi	.L669
 8689 003c DFE800F0 		tbb	[pc, r0]
 8690              	.L664:
 8691 0040 13       		.byte	(.L667-.L664)/2
 8692 0041 21       		.byte	(.L666-.L664)/2
 8693 0042 2F       		.byte	(.L665-.L664)/2
 8694 0043 05       		.byte	(.L663-.L664)/2
 8695              	.LVL611:
 8696              		.p2align 1
 8697              	.L668:
1785:src/xeq.c     **** 
 8698              		.loc 1 1785 33 is_stmt 0 view .LVU2297
 8699 0044 14AA     		add	r2, sp, #80
 8700              	.LVL612:
ARM GAS  /tmp/ccBFDvgN.s 			page 291


1785:src/xeq.c     **** 
 8701              		.loc 1 1785 25 view .LVU2298
 8702 0046 02A9     		add	r1, sp, #8
 8703              	.LVL613:
1785:src/xeq.c     **** 
 8704              		.loc 1 1785 25 view .LVU2299
 8705 0048 F5E7     		b	.L661
 8706              	.L663:
1807:src/xeq.c     **** 		break;
 8707              		.loc 1 1807 3 is_stmt 1 view .LVU2300
1807:src/xeq.c     **** 		break;
 8708              		.loc 1 1807 46 is_stmt 0 view .LVU2301
 8709 004a 01F12403 		add	r3, r1, #36
1807:src/xeq.c     **** 		break;
 8710              		.loc 1 1807 3 view .LVU2302
 8711 004e CDE90013 		strd	r1, r3, [sp]
 8712 0052 4046     		mov	r0, r8
 8713 0054 3146     		mov	r1, r6
 8714              	.LVL614:
1807:src/xeq.c     **** 		break;
 8715              		.loc 1 1807 3 view .LVU2303
 8716 0056 02F12403 		add	r3, r2, #36
 8717 005a FFF7FEFF 		bl	cmplxDivide
 8718              	.LVL615:
1808:src/xeq.c     **** 	default:
 8719              		.loc 1 1808 3 is_stmt 1 view .LVU2304
1812:src/xeq.c     **** }
 8720              		.loc 1 1812 9 is_stmt 0 view .LVU2305
 8721 005e 0020     		movs	r0, #0
 8722              	.L660:
1813:src/xeq.c     **** 
 8723              		.loc 1 1813 1 view .LVU2306
 8724 0060 26B0     		add	sp, sp, #152
 8725              		.cfi_remember_state
 8726              		.cfi_def_cfa_offset 24
 8727              		@ sp needed
 8728 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8729              	.LVL616:
 8730              	.L667:
 8731              		.cfi_restore_state
1798:src/xeq.c     **** 		break;
 8732              		.loc 1 1798 3 is_stmt 1 view .LVU2307
1798:src/xeq.c     **** 		break;
 8733              		.loc 1 1798 43 is_stmt 0 view .LVU2308
 8734 0066 01F12403 		add	r3, r1, #36
1798:src/xeq.c     **** 		break;
 8735              		.loc 1 1798 3 view .LVU2309
 8736 006a CDE90013 		strd	r1, r3, [sp]
 8737 006e 4046     		mov	r0, r8
 8738 0070 3146     		mov	r1, r6
 8739              	.LVL617:
1798:src/xeq.c     **** 		break;
 8740              		.loc 1 1798 3 view .LVU2310
 8741 0072 02F12403 		add	r3, r2, #36
 8742 0076 FFF7FEFF 		bl	cmplxAdd
 8743              	.LVL618:
1799:src/xeq.c     **** 	case 2:
ARM GAS  /tmp/ccBFDvgN.s 			page 292


 8744              		.loc 1 1799 3 is_stmt 1 view .LVU2311
1812:src/xeq.c     **** }
 8745              		.loc 1 1812 9 is_stmt 0 view .LVU2312
 8746 007a 0020     		movs	r0, #0
1813:src/xeq.c     **** 
 8747              		.loc 1 1813 1 view .LVU2313
 8748 007c 26B0     		add	sp, sp, #152
 8749              		.cfi_remember_state
 8750              		.cfi_def_cfa_offset 24
 8751              		@ sp needed
 8752 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8753              	.LVL619:
 8754              	.L666:
 8755              		.cfi_restore_state
1801:src/xeq.c     **** 		break;
 8756              		.loc 1 1801 3 is_stmt 1 view .LVU2314
1801:src/xeq.c     **** 		break;
 8757              		.loc 1 1801 48 is_stmt 0 view .LVU2315
 8758 0082 01F12403 		add	r3, r1, #36
1801:src/xeq.c     **** 		break;
 8759              		.loc 1 1801 3 view .LVU2316
 8760 0086 CDE90013 		strd	r1, r3, [sp]
 8761 008a 4046     		mov	r0, r8
 8762 008c 3146     		mov	r1, r6
 8763              	.LVL620:
1801:src/xeq.c     **** 		break;
 8764              		.loc 1 1801 3 view .LVU2317
 8765 008e 02F12403 		add	r3, r2, #36
 8766 0092 FFF7FEFF 		bl	cmplxSubtract
 8767              	.LVL621:
1802:src/xeq.c     **** 	case 3:
 8768              		.loc 1 1802 3 is_stmt 1 view .LVU2318
1812:src/xeq.c     **** }
 8769              		.loc 1 1812 9 is_stmt 0 view .LVU2319
 8770 0096 0020     		movs	r0, #0
1813:src/xeq.c     **** 
 8771              		.loc 1 1813 1 view .LVU2320
 8772 0098 26B0     		add	sp, sp, #152
 8773              		.cfi_remember_state
 8774              		.cfi_def_cfa_offset 24
 8775              		@ sp needed
 8776 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8777              	.LVL622:
 8778              	.L665:
 8779              		.cfi_restore_state
1804:src/xeq.c     **** 		break;
 8780              		.loc 1 1804 3 is_stmt 1 view .LVU2321
1804:src/xeq.c     **** 		break;
 8781              		.loc 1 1804 48 is_stmt 0 view .LVU2322
 8782 009e 01F12403 		add	r3, r1, #36
1804:src/xeq.c     **** 		break;
 8783              		.loc 1 1804 3 view .LVU2323
 8784 00a2 CDE90013 		strd	r1, r3, [sp]
 8785 00a6 4046     		mov	r0, r8
 8786 00a8 3146     		mov	r1, r6
 8787              	.LVL623:
1804:src/xeq.c     **** 		break;
ARM GAS  /tmp/ccBFDvgN.s 			page 293


 8788              		.loc 1 1804 3 view .LVU2324
 8789 00aa 02F12403 		add	r3, r2, #36
 8790 00ae FFF7FEFF 		bl	cmplxMultiply
 8791              	.LVL624:
1805:src/xeq.c     **** 	case 4:
 8792              		.loc 1 1805 3 is_stmt 1 view .LVU2325
1812:src/xeq.c     **** }
 8793              		.loc 1 1812 9 is_stmt 0 view .LVU2326
 8794 00b2 0020     		movs	r0, #0
1813:src/xeq.c     **** 
 8795              		.loc 1 1813 1 view .LVU2327
 8796 00b4 26B0     		add	sp, sp, #152
 8797              		.cfi_def_cfa_offset 24
 8798              		@ sp needed
 8799 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8800              	.LVL625:
 8801              	.L669:
1812:src/xeq.c     **** }
 8802              		.loc 1 1812 9 view .LVU2328
 8803 00ba 0120     		movs	r0, #1
 8804 00bc D0E7     		b	.L660
 8805              		.cfi_endproc
 8806              	.LFE120:
 8808 00be 00BF     		.section	.text.cpx_enter,"ax",%progbits
 8809              		.align	1
 8810              		.p2align 2,,3
 8811              		.global	cpx_enter
 8812              		.syntax unified
 8813              		.thumb
 8814              		.thumb_func
 8815              		.fpu fpv4-sp-d16
 8817              	cpx_enter:
 8818              	.LVL626:
 8819              	.LFB74:
 921:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
 8820              		.loc 1 921 31 is_stmt 1 view -0
 8821              		.cfi_startproc
 8822              		@ args = 0, pretend = 0, frame = 0
 8823              		@ frame_needed = 0, uses_anonymous_args = 0
 922:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8824              		.loc 1 922 3 view .LVU2330
 930:src/xeq.c     ****     lift();
 8825              		.loc 1 930 5 view .LVU2331
 921:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
 8826              		.loc 1 921 31 is_stmt 0 view .LVU2332
 8827 0000 70B5     		push	{r4, r5, r6, lr}
 8828              		.cfi_def_cfa_offset 16
 8829              		.cfi_offset 4, -16
 8830              		.cfi_offset 5, -12
 8831              		.cfi_offset 6, -8
 8832              		.cfi_offset 14, -4
 930:src/xeq.c     ****     lift();
 8833              		.loc 1 930 5 view .LVU2333
 8834 0002 FFF7FEFF 		bl	lift
 8835              	.LVL627:
 931:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 8836              		.loc 1 931 5 is_stmt 1 view .LVU2334
ARM GAS  /tmp/ccBFDvgN.s 			page 294


 8837 0006 FFF7FEFF 		bl	lift
 8838              	.LVL628:
 932:src/xeq.c     ****     set_was_complex();
 8839              		.loc 1 932 5 view .LVU2335
 8840 000a 6520     		movs	r0, #101
 8841 000c FFF7FEFF 		bl	get_reg_n
 8842              	.LVL629:
 922:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8843              		.loc 1 922 55 is_stmt 0 view .LVU2336
 8844 0010 0D4D     		ldr	r5, .L685
 922:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8845              		.loc 1 922 8 view .LVU2337
 8846 0012 0E4C     		ldr	r4, .L685+4
 932:src/xeq.c     ****     set_was_complex();
 8847              		.loc 1 932 5 view .LVU2338
 8848 0014 0646     		mov	r6, r0
 932:src/xeq.c     ****     set_was_complex();
 8849              		.loc 1 932 34 view .LVU2339
 8850 0016 6720     		movs	r0, #103
 8851 0018 FFF7FEFF 		bl	get_reg_n
 8852              	.LVL630:
 8853              	.LBB2015:
 8854              	.LBB2016:
 8855              	.LBB2017:
 8856              	.LBB2018:
1119:src/xeq.c     **** }
 8857              		.loc 1 1119 24 view .LVU2340
 8858 001c 2B68     		ldr	r3, [r5]
 8859 001e B3F8E827 		ldrh	r2, [r3, #2024]
 8860 0022 44F20103 		movw	r3, #16385
 8861              	.LBE2018:
 8862              	.LBE2017:
 727:src/xeq.c     **** }
 8863              		.loc 1 727 2 view .LVU2341
 8864 0026 1340     		ands	r3, r3, r2
 8865 0028 B3F5804F 		cmp	r3, #16384
 8866              	.LBE2016:
 8867              	.LBE2015:
 932:src/xeq.c     ****     set_was_complex();
 8868              		.loc 1 932 34 view .LVU2342
 8869 002c 0146     		mov	r1, r0
 8870              	.LVL631:
 8871              	.LBB2022:
 8872              	.LBI2015:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8873              		.loc 1 726 6 is_stmt 1 view .LVU2343
 8874              	.LBB2021:
 727:src/xeq.c     **** }
 8875              		.loc 1 727 2 view .LVU2344
 8876              	.LBB2020:
 8877              	.LBI2017:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8878              		.loc 1 1118 5 view .LVU2345
 8879              	.LBB2019:
1119:src/xeq.c     **** }
 8880              		.loc 1 1119 2 view .LVU2346
 8881              	.LBE2019:
ARM GAS  /tmp/ccBFDvgN.s 			page 295


 8882              	.LBE2020:
 727:src/xeq.c     **** }
 8883              		.loc 1 727 2 is_stmt 0 view .LVU2347
 8884 002e 0CBF     		ite	eq
 8885 0030 1022     		moveq	r2, #16
 8886 0032 0822     		movne	r2, #8
 8887 0034 3046     		mov	r0, r6
 8888              	.LVL632:
 727:src/xeq.c     **** }
 8889              		.loc 1 727 2 view .LVU2348
 8890 0036 FFF7FEFF 		bl	xcopy
 8891              	.LVL633:
 727:src/xeq.c     **** }
 8892              		.loc 1 727 2 view .LVU2349
 8893              	.LBE2021:
 8894              	.LBE2022:
 933:src/xeq.c     ****   }
 8895              		.loc 1 933 5 is_stmt 1 view .LVU2350
 8896              	.LBB2023:
 8897              	.LBI2023:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 8898              		.loc 1 539 13 view .LVU2351
 8899              	.LBB2024:
 540:src/xeq.c     **** }
 8900              		.loc 1 540 2 view .LVU2352
 540:src/xeq.c     **** }
 8901              		.loc 1 540 20 is_stmt 0 view .LVU2353
 8902 003a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8903 003c 0122     		movs	r2, #1
 8904 003e 62F38713 		bfi	r3, r2, #6, #2
 8905 0042 2375     		strb	r3, [r4, #20]
 8906              	.LBE2024:
 8907              	.LBE2023:
 935:src/xeq.c     **** 
 8908              		.loc 1 935 1 view .LVU2354
 8909 0044 70BD     		pop	{r4, r5, r6, pc}
 8910              	.L686:
 8911 0046 00BF     		.align	2
 8912              	.L685:
 8913 0048 00000000 		.word	main_ram
 8914 004c 00000000 		.word	StateWhileOn
 8915              		.cfi_endproc
 8916              	.LFE74:
 8918              		.section	.text.cpx_fill,"ax",%progbits
 8919              		.align	1
 8920              		.p2align 2,,3
 8921              		.global	cpx_fill
 8922              		.syntax unified
 8923              		.thumb
 8924              		.thumb_func
 8925              		.fpu fpv4-sp-d16
 8927              	cpx_fill:
 8928              	.LVL634:
 8929              	.LFB79:
1086:src/xeq.c     **** 	const int n = stack_size();
 8930              		.loc 1 1086 30 is_stmt 1 view -0
 8931              		.cfi_startproc
ARM GAS  /tmp/ccBFDvgN.s 			page 296


 8932              		@ args = 0, pretend = 0, frame = 0
 8933              		@ frame_needed = 0, uses_anonymous_args = 0
1087:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 8934              		.loc 1 1087 2 view .LVU2356
 8935              	.LBB2025:
 8936              	.LBI2025:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 8937              		.loc 1 712 5 view .LVU2357
 8938              	.LBB2026:
 713:src/xeq.c     **** 		return 4;
 8939              		.loc 1 713 2 view .LVU2358
 8940              	.LBE2026:
 8941              	.LBE2025:
1086:src/xeq.c     **** 	const int n = stack_size();
 8942              		.loc 1 1086 30 is_stmt 0 view .LVU2359
 8943 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 8944              		.cfi_def_cfa_offset 32
 8945              		.cfi_offset 3, -32
 8946              		.cfi_offset 4, -28
 8947              		.cfi_offset 5, -24
 8948              		.cfi_offset 6, -20
 8949              		.cfi_offset 7, -16
 8950              		.cfi_offset 8, -12
 8951              		.cfi_offset 9, -8
 8952              		.cfi_offset 14, -4
 8953              	.LBB2031:
 8954              	.LBB2029:
 713:src/xeq.c     **** 		return 4;
 8955              		.loc 1 713 8 view .LVU2360
 8956 0004 1F4D     		ldr	r5, .L700
 8957 0006 2B68     		ldr	r3, [r5]
 713:src/xeq.c     **** 		return 4;
 8958              		.loc 1 713 6 view .LVU2361
 8959 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 8960              		.loc 1 713 5 view .LVU2362
 8961 000c 1207     		lsls	r2, r2, #28
 8962 000e 37D5     		bpl	.L692
 8963              	.LBB2027:
 8964              	.LBI2027:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 8965              		.loc 1 185 5 is_stmt 1 view .LVU2363
 8966              	.LBB2028:
 186:src/xeq.c     **** }
 8967              		.loc 1 186 2 view .LVU2364
 186:src/xeq.c     **** }
 8968              		.loc 1 186 9 is_stmt 0 view .LVU2365
 8969 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 8970              	.LBE2028:
 8971              	.LBE2027:
 713:src/xeq.c     **** 		return 4;
 8972              		.loc 1 713 27 view .LVU2366
 8973 0014 9B0B     		lsrs	r3, r3, #14
 8974 0016 032B     		cmp	r3, #3
 8975 0018 2AD0     		beq	.L699
 715:src/xeq.c     **** }
 8976              		.loc 1 715 9 view .LVU2367
ARM GAS  /tmp/ccBFDvgN.s 			page 297


 8977 001a 0827     		movs	r7, #8
 8978              	.L688:
 8979              	.LVL635:
 715:src/xeq.c     **** }
 8980              		.loc 1 715 9 view .LVU2368
 8981              	.LBE2029:
 8982              	.LBE2031:
1088:src/xeq.c     **** 	int i;
 8983              		.loc 1 1088 2 is_stmt 1 view .LVU2369
1088:src/xeq.c     **** 	int i;
 8984              		.loc 1 1088 22 is_stmt 0 view .LVU2370
 8985 001c 6520     		movs	r0, #101
 8986              	.LVL636:
1088:src/xeq.c     **** 	int i;
 8987              		.loc 1 1088 22 view .LVU2371
 8988 001e FFF7FEFF 		bl	get_reg_n
 8989              	.LVL637:
1092:src/xeq.c     **** 	set_was_complex();
 8990              		.loc 1 1092 3 view .LVU2372
 8991 0022 DFF86C90 		ldr	r9, .L700+12
1088:src/xeq.c     **** 	int i;
 8992              		.loc 1 1088 22 view .LVU2373
 8993 0026 8046     		mov	r8, r0
 8994              	.LVL638:
1089:src/xeq.c     **** 
 8995              		.loc 1 1089 2 is_stmt 1 view .LVU2374
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8996              		.loc 1 1091 2 view .LVU2375
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8997              		.loc 1 1091 12 view .LVU2376
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8998              		.loc 1 1091 8 is_stmt 0 view .LVU2377
 8999 0028 0224     		movs	r4, #2
 9000              	.LBB2032:
 9001              	.LBB2033:
 9002              	.LBB2034:
 9003              	.LBB2035:
1119:src/xeq.c     **** }
 9004              		.loc 1 1119 24 view .LVU2378
 9005 002a 44F20106 		movw	r6, #16385
 9006              	.LVL639:
 9007              	.L691:
1119:src/xeq.c     **** }
 9008              		.loc 1 1119 24 view .LVU2379
 9009              	.LBE2035:
 9010              	.LBE2034:
 9011              	.LBE2033:
 9012              	.LBE2032:
1092:src/xeq.c     **** 	set_was_complex();
 9013              		.loc 1 1092 3 is_stmt 1 view .LVU2380
 9014              	.LBB2046:
 9015              	.LBI2046:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 9016              		.loc 1 718 11 view .LVU2381
 9017              	.LBB2047:
 719:src/xeq.c     **** }
 9018              		.loc 1 719 2 view .LVU2382
ARM GAS  /tmp/ccBFDvgN.s 			page 298


 719:src/xeq.c     **** }
 9019              		.loc 1 719 9 is_stmt 0 view .LVU2383
 9020 002e 04F16400 		add	r0, r4, #100
 9021 0032 FFF7FEFF 		bl	get_reg_n
 9022              	.LVL640:
 719:src/xeq.c     **** }
 9023              		.loc 1 719 9 view .LVU2384
 9024              	.LBE2047:
 9025              	.LBE2046:
1092:src/xeq.c     **** 	set_was_complex();
 9026              		.loc 1 1092 3 view .LVU2385
 9027 0036 E307     		lsls	r3, r4, #31
 9028              	.LBB2048:
 9029              	.LBB2042:
 9030              	.LBB2039:
 9031              	.LBB2036:
1119:src/xeq.c     **** }
 9032              		.loc 1 1119 24 view .LVU2386
 9033 0038 2B68     		ldr	r3, [r5]
 9034              	.LBE2036:
 9035              	.LBE2039:
 9036              	.LBE2042:
 9037              	.LBE2048:
1092:src/xeq.c     **** 	set_was_complex();
 9038              		.loc 1 1092 3 view .LVU2387
 9039 003a 58BF     		it	pl
 9040 003c D9F80010 		ldrpl	r1, [r9]
 9041              	.LBB2049:
 9042              	.LBB2043:
 9043              	.LBB2040:
 9044              	.LBB2037:
1119:src/xeq.c     **** }
 9045              		.loc 1 1119 24 view .LVU2388
 9046 0040 B3F8E837 		ldrh	r3, [r3, #2024]
 9047              	.LBE2037:
 9048              	.LBE2040:
 727:src/xeq.c     **** }
 9049              		.loc 1 727 2 view .LVU2389
 9050 0044 03EA0603 		and	r3, r3, r6
 9051              	.LBE2043:
 9052              	.LBE2049:
1092:src/xeq.c     **** 	set_was_complex();
 9053              		.loc 1 1092 3 view .LVU2390
 9054 0048 48BF     		it	mi
 9055 004a 4146     		movmi	r1, r8
 9056              	.LVL641:
 9057              	.LBB2050:
 9058              	.LBI2032:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 9059              		.loc 1 726 6 is_stmt 1 view .LVU2391
 9060              	.LBB2044:
 727:src/xeq.c     **** }
 9061              		.loc 1 727 2 view .LVU2392
 9062              	.LBB2041:
 9063              	.LBI2034:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9064              		.loc 1 1118 5 view .LVU2393
ARM GAS  /tmp/ccBFDvgN.s 			page 299


 9065              	.LBB2038:
1119:src/xeq.c     **** }
 9066              		.loc 1 1119 2 view .LVU2394
 9067              	.LBE2038:
 9068              	.LBE2041:
 727:src/xeq.c     **** }
 9069              		.loc 1 727 2 is_stmt 0 view .LVU2395
 9070 004c B3F5804F 		cmp	r3, #16384
 9071 0050 0CBF     		ite	eq
 9072 0052 1022     		moveq	r2, #16
 9073 0054 0822     		movne	r2, #8
 9074              	.LBE2044:
 9075              	.LBE2050:
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9076              		.loc 1 1091 18 view .LVU2396
 9077 0056 0134     		adds	r4, r4, #1
 9078              	.LVL642:
 9079              	.LBB2051:
 9080              	.LBB2045:
 727:src/xeq.c     **** }
 9081              		.loc 1 727 2 view .LVU2397
 9082 0058 FFF7FEFF 		bl	xcopy
 9083              	.LVL643:
 727:src/xeq.c     **** }
 9084              		.loc 1 727 2 view .LVU2398
 9085              	.LBE2045:
 9086              	.LBE2051:
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9087              		.loc 1 1091 17 is_stmt 1 view .LVU2399
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9088              		.loc 1 1091 12 view .LVU2400
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9089              		.loc 1 1091 2 is_stmt 0 view .LVU2401
 9090 005c BC42     		cmp	r4, r7
 9091 005e E6D1     		bne	.L691
1093:src/xeq.c     **** }
 9092              		.loc 1 1093 2 is_stmt 1 view .LVU2402
 9093              	.LBB2052:
 9094              	.LBI2052:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 9095              		.loc 1 539 13 view .LVU2403
 9096              	.LBB2053:
 540:src/xeq.c     **** }
 9097              		.loc 1 540 2 view .LVU2404
 540:src/xeq.c     **** }
 9098              		.loc 1 540 20 is_stmt 0 view .LVU2405
 9099 0060 094B     		ldr	r3, .L700+4
 9100 0062 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 9101 0064 0121     		movs	r1, #1
 9102 0066 61F38712 		bfi	r2, r1, #6, #2
 9103 006a 1A75     		strb	r2, [r3, #20]
 9104              	.LBE2053:
 9105              	.LBE2052:
1094:src/xeq.c     **** 
 9106              		.loc 1 1094 1 view .LVU2406
 9107 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9108              	.LVL644:
ARM GAS  /tmp/ccBFDvgN.s 			page 300


 9109              	.L699:
 9110              	.LBB2054:
 9111              	.LBB2030:
 713:src/xeq.c     **** 		return 4;
 9112              		.loc 1 713 44 view .LVU2407
 9113 0070 064B     		ldr	r3, .L700+8
 713:src/xeq.c     **** 		return 4;
 9114              		.loc 1 713 41 view .LVU2408
 9115 0072 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 9116              		.loc 1 714 10 view .LVU2409
 9117 0076 002B     		cmp	r3, #0
 9118 0078 B4BF     		ite	lt
 9119 007a 0827     		movlt	r7, #8
 9120 007c 0427     		movge	r7, #4
 9121 007e CDE7     		b	.L688
 9122              	.L692:
 9123 0080 0427     		movs	r7, #4
 9124 0082 CBE7     		b	.L688
 9125              	.L701:
 9126              		.align	2
 9127              	.L700:
 9128 0084 00000000 		.word	main_ram
 9129 0088 00000000 		.word	StateWhileOn
 9130 008c 00000000 		.word	XromParams
 9131 0090 00000000 		.word	StackBase
 9132              	.LBE2030:
 9133              	.LBE2054:
 9134              		.cfi_endproc
 9135              	.LFE79:
 9137              		.section	.text.setRegister,"ax",%progbits
 9138              		.align	1
 9139              		.p2align 2,,3
 9140              		.global	setRegister
 9141              		.syntax unified
 9142              		.thumb
 9143              		.thumb_func
 9144              		.fpu fpv4-sp-d16
 9146              	setRegister:
 9147              	.LVL645:
 9148              	.LFB58:
 811:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9149              		.loc 1 811 49 is_stmt 1 view -0
 9150              		.cfi_startproc
 9151              		@ args = 0, pretend = 0, frame = 40
 9152              		@ frame_needed = 0, uses_anonymous_args = 0
 812:src/xeq.c     **** 	decNumber dn;
 9153              		.loc 1 812 2 view .LVU2411
 811:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9154              		.loc 1 811 49 is_stmt 0 view .LVU2412
 9155 0000 30B5     		push	{r4, r5, lr}
 9156              		.cfi_def_cfa_offset 12
 9157              		.cfi_offset 4, -12
 9158              		.cfi_offset 5, -8
 9159              		.cfi_offset 14, -4
 9160 0002 8BB0     		sub	sp, sp, #44
 9161              		.cfi_def_cfa_offset 56
ARM GAS  /tmp/ccBFDvgN.s 			page 301


 811:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9162              		.loc 1 811 49 view .LVU2413
 9163 0004 0C46     		mov	r4, r1
 812:src/xeq.c     **** 	decNumber dn;
 9164              		.loc 1 812 24 view .LVU2414
 9165 0006 FFF7FEFF 		bl	get_reg_n
 9166              	.LVL646:
 812:src/xeq.c     **** 	decNumber dn;
 9167              		.loc 1 812 24 view .LVU2415
 9168 000a 0546     		mov	r5, r0
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9169              		.loc 1 815 8 view .LVU2416
 9170 000c 2046     		mov	r0, r4
 9171              	.LVL647:
 813:src/xeq.c     **** 
 9172              		.loc 1 813 2 is_stmt 1 view .LVU2417
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9173              		.loc 1 815 2 view .LVU2418
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9174              		.loc 1 815 8 is_stmt 0 view .LVU2419
 9175 000e FFF7FEFF 		bl	check_special
 9176              	.LVL648:
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9177              		.loc 1 815 5 view .LVU2420
 9178 0012 08B1     		cbz	r0, .L706
 822:src/xeq.c     **** 
 9179              		.loc 1 822 1 view .LVU2421
 9180 0014 0BB0     		add	sp, sp, #44
 9181              		.cfi_remember_state
 9182              		.cfi_def_cfa_offset 12
 9183              		@ sp needed
 9184 0016 30BD     		pop	{r4, r5, pc}
 9185              	.LVL649:
 9186              	.L706:
 9187              		.cfi_restore_state
 816:src/xeq.c     **** 		if (is_dblmode())
 9188              		.loc 1 816 3 is_stmt 1 view .LVU2422
 9189 0018 0C4A     		ldr	r2, .L708
 9190 001a 2146     		mov	r1, r4
 9191 001c 01A8     		add	r0, sp, #4
 9192 001e FFF7FEFF 		bl	decNumberNormalize
 9193              	.LVL650:
 817:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9194              		.loc 1 817 3 view .LVU2423
 9195              	.LBB2055:
 9196              	.LBI2055:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9197              		.loc 1 1118 5 view .LVU2424
 9198              	.LBB2056:
1119:src/xeq.c     **** }
 9199              		.loc 1 1119 2 view .LVU2425
1119:src/xeq.c     **** }
 9200              		.loc 1 1119 24 is_stmt 0 view .LVU2426
 9201 0022 0B4B     		ldr	r3, .L708+4
 9202 0024 1B68     		ldr	r3, [r3]
 9203 0026 B3F8E827 		ldrh	r2, [r3, #2024]
 9204 002a 44F20103 		movw	r3, #16385
ARM GAS  /tmp/ccBFDvgN.s 			page 302


 9205              	.LBE2056:
 9206              	.LBE2055:
 817:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9207              		.loc 1 817 6 view .LVU2427
 9208 002e 1340     		ands	r3, r3, r2
 9209 0030 B3F5804F 		cmp	r3, #16384
 818:src/xeq.c     **** 		else
 9210              		.loc 1 818 4 view .LVU2428
 9211 0034 01A9     		add	r1, sp, #4
 9212 0036 2846     		mov	r0, r5
 817:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9213              		.loc 1 817 6 view .LVU2429
 9214 0038 03D0     		beq	.L707
 9215              	.LVL651:
 820:src/xeq.c     **** 	}
 9216              		.loc 1 820 4 is_stmt 1 view .LVU2430
 9217 003a FFF7FEFF 		bl	packed_from_number
 9218              	.LVL652:
 822:src/xeq.c     **** 
 9219              		.loc 1 822 1 is_stmt 0 view .LVU2431
 9220 003e 0BB0     		add	sp, sp, #44
 9221              		.cfi_remember_state
 9222              		.cfi_def_cfa_offset 12
 9223              		@ sp needed
 9224 0040 30BD     		pop	{r4, r5, pc}
 9225              	.LVL653:
 9226              	.L707:
 9227              		.cfi_restore_state
 818:src/xeq.c     **** 		else
 9228              		.loc 1 818 4 is_stmt 1 view .LVU2432
 9229 0042 FFF7FEFF 		bl	packed128_from_number
 9230              	.LVL654:
 822:src/xeq.c     **** 
 9231              		.loc 1 822 1 is_stmt 0 view .LVU2433
 9232 0046 0BB0     		add	sp, sp, #44
 9233              		.cfi_def_cfa_offset 12
 9234              		@ sp needed
 9235 0048 30BD     		pop	{r4, r5, pc}
 9236              	.LVL655:
 9237              	.L709:
 822:src/xeq.c     **** 
 9238              		.loc 1 822 1 view .LVU2434
 9239 004a 00BF     		.align	2
 9240              	.L708:
 9241 004c 00000000 		.word	Ctx
 9242 0050 00000000 		.word	main_ram
 9243              		.cfi_endproc
 9244              	.LFE58:
 9246              		.section	.text.setX,"ax",%progbits
 9247              		.align	1
 9248              		.p2align 2,,3
 9249              		.global	setX
 9250              		.syntax unified
 9251              		.thumb
 9252              		.thumb_func
 9253              		.fpu fpv4-sp-d16
 9255              	setX:
ARM GAS  /tmp/ccBFDvgN.s 			page 303


 9256              	.LVL656:
 9257              	.LFB60:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9258              		.loc 1 828 31 is_stmt 1 view -0
 9259              		.cfi_startproc
 9260              		@ args = 0, pretend = 0, frame = 0
 9261              		@ frame_needed = 0, uses_anonymous_args = 0
 9262              		@ link register save eliminated.
 829:src/xeq.c     **** }
 9263              		.loc 1 829 2 view .LVU2436
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9264              		.loc 1 828 31 is_stmt 0 view .LVU2437
 9265 0000 0146     		mov	r1, r0
 829:src/xeq.c     **** }
 9266              		.loc 1 829 2 view .LVU2438
 9267 0002 6420     		movs	r0, #100
 9268              	.LVL657:
 829:src/xeq.c     **** }
 9269              		.loc 1 829 2 view .LVU2439
 9270 0004 FFF7FEBF 		b	setRegister
 9271              	.LVL658:
 829:src/xeq.c     **** }
 9272              		.loc 1 829 2 view .LVU2440
 9273              		.cfi_endproc
 9274              	.LFE60:
 9276              		.section	.text.rarg_round,"ax",%progbits
 9277              		.align	1
 9278              		.p2align 2,,3
 9279              		.global	rarg_round
 9280              		.syntax unified
 9281              		.thumb
 9282              		.thumb_func
 9283              		.fpu fpv4-sp-d16
 9285              	rarg_round:
 9286              	.LVL659:
 9287              	.LFB40:
 662:src/xeq.c     **** 	decNumber res, x;
 9288              		.loc 1 662 49 is_stmt 1 view -0
 9289              		.cfi_startproc
 9290              		@ args = 0, pretend = 0, frame = 80
 9291              		@ frame_needed = 0, uses_anonymous_args = 0
 663:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 9292              		.loc 1 663 2 view .LVU2442
 664:src/xeq.c     **** 
 9293              		.loc 1 664 2 view .LVU2443
 9294              	.LBB2069:
 9295              	.LBI2069:
 610:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 9296              		.loc 1 610 22 view .LVU2444
 9297              	.LBB2070:
 611:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 9298              		.loc 1 611 2 view .LVU2445
 616:src/xeq.c     **** }
 9299              		.loc 1 616 2 view .LVU2446
 616:src/xeq.c     **** }
 9300              		.loc 1 616 31 is_stmt 0 view .LVU2447
 9301 0000 184B     		ldr	r3, .L719
ARM GAS  /tmp/ccBFDvgN.s 			page 304


 9302              	.LBE2070:
 9303              	.LBE2069:
 662:src/xeq.c     **** 	decNumber res, x;
 9304              		.loc 1 662 49 view .LVU2448
 9305 0002 70B5     		push	{r4, r5, r6, lr}
 9306              		.cfi_def_cfa_offset 16
 9307              		.cfi_offset 4, -16
 9308              		.cfi_offset 5, -12
 9309              		.cfi_offset 6, -8
 9310              		.cfi_offset 14, -4
 9311              	.LBB2073:
 9312              	.LBB2071:
 616:src/xeq.c     **** }
 9313              		.loc 1 616 31 view .LVU2449
 9314 0004 1B68     		ldr	r3, [r3]
 9315              	.LVL660:
 616:src/xeq.c     **** }
 9316              		.loc 1 616 31 view .LVU2450
 9317              	.LBE2071:
 9318              	.LBE2073:
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9319              		.loc 1 666 2 is_stmt 1 view .LVU2451
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9320              		.loc 1 666 6 is_stmt 0 view .LVU2452
 9321 0006 93F8E857 		ldrb	r5, [r3, #2024]	@ zero_extendqisi2
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9322              		.loc 1 666 5 view .LVU2453
 9323 000a EA07     		lsls	r2, r5, #31
 662:src/xeq.c     **** 	decNumber res, x;
 9324              		.loc 1 662 49 view .LVU2454
 9325 000c 94B0     		sub	sp, sp, #80
 9326              		.cfi_def_cfa_offset 96
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9327              		.loc 1 666 5 view .LVU2455
 9328 000e 06D5     		bpl	.L712
 667:src/xeq.c     **** 		return;
 9329              		.loc 1 667 3 is_stmt 1 view .LVU2456
 9330              	.LVL661:
 9331              	.LBB2074:
 9332              	.LBI2074:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9333              		.loc 1 546 5 view .LVU2457
 9334              	.LBB2075:
 547:src/xeq.c     **** 		Error = e;
 9335              		.loc 1 547 2 view .LVU2458
 547:src/xeq.c     **** 		Error = e;
 9336              		.loc 1 547 12 is_stmt 0 view .LVU2459
 9337 0010 154B     		ldr	r3, .L719+4
 9338              	.LVL662:
 547:src/xeq.c     **** 		Error = e;
 9339              		.loc 1 547 5 view .LVU2460
 9340 0012 1A68     		ldr	r2, [r3]
 9341 0014 0AB9     		cbnz	r2, .L711
 9342              	.LVL663:
 9343              	.LBB2076:
 9344              	.LBI2076:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/ccBFDvgN.s 			page 305


 9345              		.loc 1 546 5 is_stmt 1 view .LVU2461
 9346              	.LBB2077:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 9347              		.loc 1 548 3 view .LVU2462
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 9348              		.loc 1 548 9 is_stmt 0 view .LVU2463
 9349 0016 0D22     		movs	r2, #13
 9350 0018 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 9351              		.loc 1 549 3 is_stmt 1 view .LVU2464
 9352              	.LVL664:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 9353              		.loc 1 549 3 is_stmt 0 view .LVU2465
 9354              	.LBE2077:
 9355              	.LBE2076:
 9356              	.LBE2075:
 9357              	.LBE2074:
 668:src/xeq.c     **** 	}
 9358              		.loc 1 668 3 is_stmt 1 view .LVU2466
 9359              	.L711:
 678:src/xeq.c     **** 
 9360              		.loc 1 678 1 is_stmt 0 view .LVU2467
 9361 001a 14B0     		add	sp, sp, #80
 9362              		.cfi_remember_state
 9363              		.cfi_def_cfa_offset 16
 9364              		@ sp needed
 9365 001c 70BD     		pop	{r4, r5, r6, pc}
 9366              	.LVL665:
 9367              	.L712:
 9368              		.cfi_restore_state
 9369              	.LBB2078:
 9370              	.LBB2072:
 616:src/xeq.c     **** }
 9371              		.loc 1 616 37 view .LVU2468
 9372 001e 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 9373              	.LVL666:
 616:src/xeq.c     **** }
 9374              		.loc 1 616 9 view .LVU2469
 9375 0022 124A     		ldr	r2, .L719+8
 616:src/xeq.c     **** }
 9376              		.loc 1 616 37 view .LVU2470
 9377 0024 C3F30213 		ubfx	r3, r3, #4, #3
 9378 0028 0C46     		mov	r4, r1
 616:src/xeq.c     **** }
 9379              		.loc 1 616 9 view .LVU2471
 9380 002a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9381 002c 0193     		str	r3, [sp, #4]
 9382              	.LBE2072:
 9383              	.LBE2078:
 671:src/xeq.c     **** 	getX(&x);
 9384              		.loc 1 671 2 is_stmt 1 view .LVU2472
 9385              	.LBB2079:
 9386              	.LBI2079:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 9387              		.loc 1 792 6 view .LVU2473
 9388              	.LBB2080:
 793:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 306


 9389              		.loc 1 793 2 view .LVU2474
 9390 002e 0646     		mov	r6, r0
 9391 0030 6421     		movs	r1, #100
 9392              	.LVL667:
 793:src/xeq.c     **** }
 9393              		.loc 1 793 2 is_stmt 0 view .LVU2475
 9394 0032 6C20     		movs	r0, #108
 9395              	.LVL668:
 793:src/xeq.c     **** }
 9396              		.loc 1 793 2 view .LVU2476
 9397 0034 FFF7FEFF 		bl	copyreg_n
 9398              	.LVL669:
 793:src/xeq.c     **** }
 9399              		.loc 1 793 2 view .LVU2477
 9400              	.LBE2080:
 9401              	.LBE2079:
 672:src/xeq.c     **** 	if (op == RARG_ROUND)
 9402              		.loc 1 672 2 is_stmt 1 view .LVU2478
 9403              	.LBB2081:
 9404              	.LBI2081:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9405              		.loc 1 824 12 view .LVU2479
 9406              	.LBB2082:
 825:src/xeq.c     **** }
 9407              		.loc 1 825 2 view .LVU2480
 825:src/xeq.c     **** }
 9408              		.loc 1 825 9 is_stmt 0 view .LVU2481
 9409 0038 6421     		movs	r1, #100
 9410 003a 0BA8     		add	r0, sp, #44
 9411              	.LVL670:
 825:src/xeq.c     **** }
 9412              		.loc 1 825 9 view .LVU2482
 9413 003c FFF7FEFF 		bl	getRegister
 9414              	.LVL671:
 825:src/xeq.c     **** }
 9415              		.loc 1 825 9 view .LVU2483
 9416              	.LBE2082:
 9417              	.LBE2081:
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9418              		.loc 1 673 2 is_stmt 1 view .LVU2484
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9419              		.loc 1 673 5 is_stmt 0 view .LVU2485
 9420 0040 752C     		cmp	r4, #117
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9421              		.loc 1 674 3 view .LVU2486
 9422 0042 02AC     		add	r4, sp, #8
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9423              		.loc 1 673 5 view .LVU2487
 9424 0044 019B     		ldr	r3, [sp, #4]
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9425              		.loc 1 674 3 view .LVU2488
 9426 0046 3246     		mov	r2, r6
 9427 0048 0BA9     		add	r1, sp, #44
 9428 004a 2046     		mov	r0, r4
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9429              		.loc 1 673 5 view .LVU2489
 9430 004c 07D0     		beq	.L718
ARM GAS  /tmp/ccBFDvgN.s 			page 307


 9431              	.LVL672:
 676:src/xeq.c     **** 	setX(&res);
 9432              		.loc 1 676 3 is_stmt 1 view .LVU2490
 9433 004e FFF7FEFF 		bl	decNumberRoundDecimals
 9434              	.LVL673:
 9435              	.L716:
 677:src/xeq.c     **** }
 9436              		.loc 1 677 2 view .LVU2491
 9437              	.LBB2083:
 9438              	.LBI2083:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9439              		.loc 1 828 6 view .LVU2492
 9440              	.LBB2084:
 829:src/xeq.c     **** }
 9441              		.loc 1 829 2 view .LVU2493
 9442 0052 2146     		mov	r1, r4
 9443 0054 6420     		movs	r0, #100
 9444 0056 FFF7FEFF 		bl	setRegister
 9445              	.LVL674:
 829:src/xeq.c     **** }
 9446              		.loc 1 829 2 is_stmt 0 view .LVU2494
 9447              	.LBE2084:
 9448              	.LBE2083:
 678:src/xeq.c     **** 
 9449              		.loc 1 678 1 view .LVU2495
 9450 005a 14B0     		add	sp, sp, #80
 9451              		.cfi_remember_state
 9452              		.cfi_def_cfa_offset 16
 9453              		@ sp needed
 9454 005c 70BD     		pop	{r4, r5, r6, pc}
 9455              	.LVL675:
 9456              	.L718:
 9457              		.cfi_restore_state
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9458              		.loc 1 674 3 is_stmt 1 view .LVU2496
 9459 005e FFF7FEFF 		bl	decNumberRoundDigits
 9460              	.LVL676:
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9461              		.loc 1 674 3 is_stmt 0 view .LVU2497
 9462 0062 F6E7     		b	.L716
 9463              	.L720:
 9464              		.align	2
 9465              	.L719:
 9466 0064 00000000 		.word	main_ram
 9467 0068 00000000 		.word	Error
 9468 006c 00000000 		.word	.LANCHOR1
 9469              		.cfi_endproc
 9470              	.LFE40:
 9472              		.section	.text.setY,"ax",%progbits
 9473              		.align	1
 9474              		.p2align 2,,3
 9475              		.global	setY
 9476              		.syntax unified
 9477              		.thumb
 9478              		.thumb_func
 9479              		.fpu fpv4-sp-d16
 9481              	setY:
ARM GAS  /tmp/ccBFDvgN.s 			page 308


 9482              	.LVL677:
 9483              	.LFB62:
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9484              		.loc 1 836 31 is_stmt 1 view -0
 9485              		.cfi_startproc
 9486              		@ args = 0, pretend = 0, frame = 0
 9487              		@ frame_needed = 0, uses_anonymous_args = 0
 9488              		@ link register save eliminated.
 837:src/xeq.c     **** }
 9489              		.loc 1 837 2 view .LVU2499
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9490              		.loc 1 836 31 is_stmt 0 view .LVU2500
 9491 0000 0146     		mov	r1, r0
 837:src/xeq.c     **** }
 9492              		.loc 1 837 2 view .LVU2501
 9493 0002 6520     		movs	r0, #101
 9494              	.LVL678:
 837:src/xeq.c     **** }
 9495              		.loc 1 837 2 view .LVU2502
 9496 0004 FFF7FEBF 		b	setRegister
 9497              	.LVL679:
 837:src/xeq.c     **** }
 9498              		.loc 1 837 2 view .LVU2503
 9499              		.cfi_endproc
 9500              	.LFE62:
 9502              		.section	.text.setXY,"ax",%progbits
 9503              		.align	1
 9504              		.p2align 2,,3
 9505              		.global	setXY
 9506              		.syntax unified
 9507              		.thumb
 9508              		.thumb_func
 9509              		.fpu fpv4-sp-d16
 9511              	setXY:
 9512              	.LVL680:
 9513              	.LFB66:
 859:src/xeq.c     **** 	setX(x);
 9514              		.loc 1 859 52 is_stmt 1 view -0
 9515              		.cfi_startproc
 9516              		@ args = 0, pretend = 0, frame = 0
 9517              		@ frame_needed = 0, uses_anonymous_args = 0
 860:src/xeq.c     **** 	setY(y);
 9518              		.loc 1 860 2 view .LVU2505
 9519              	.LBB2085:
 9520              	.LBI2085:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9521              		.loc 1 828 6 view .LVU2506
 9522              	.LBB2086:
 829:src/xeq.c     **** }
 9523              		.loc 1 829 2 view .LVU2507
 9524              	.LBE2086:
 9525              	.LBE2085:
 859:src/xeq.c     **** 	setX(x);
 9526              		.loc 1 859 52 is_stmt 0 view .LVU2508
 9527 0000 10B5     		push	{r4, lr}
 9528              		.cfi_def_cfa_offset 8
 9529              		.cfi_offset 4, -8
ARM GAS  /tmp/ccBFDvgN.s 			page 309


 9530              		.cfi_offset 14, -4
 859:src/xeq.c     **** 	setX(x);
 9531              		.loc 1 859 52 view .LVU2509
 9532 0002 0C46     		mov	r4, r1
 9533              	.LBB2088:
 9534              	.LBB2087:
 829:src/xeq.c     **** }
 9535              		.loc 1 829 2 view .LVU2510
 9536 0004 0146     		mov	r1, r0
 9537              	.LVL681:
 829:src/xeq.c     **** }
 9538              		.loc 1 829 2 view .LVU2511
 9539 0006 6420     		movs	r0, #100
 9540              	.LVL682:
 829:src/xeq.c     **** }
 9541              		.loc 1 829 2 view .LVU2512
 9542 0008 FFF7FEFF 		bl	setRegister
 9543              	.LVL683:
 829:src/xeq.c     **** }
 9544              		.loc 1 829 2 view .LVU2513
 9545              	.LBE2087:
 9546              	.LBE2088:
 861:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 9547              		.loc 1 861 2 is_stmt 1 view .LVU2514
 9548              	.LBB2089:
 9549              	.LBI2089:
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9550              		.loc 1 836 6 view .LVU2515
 9551              	.LBB2090:
 837:src/xeq.c     **** }
 9552              		.loc 1 837 2 view .LVU2516
 9553 000c 2146     		mov	r1, r4
 9554 000e 6520     		movs	r0, #101
 9555 0010 FFF7FEFF 		bl	setRegister
 9556              	.LVL684:
 837:src/xeq.c     **** }
 9557              		.loc 1 837 2 is_stmt 0 view .LVU2517
 9558              	.LBE2090:
 9559              	.LBE2089:
 863:src/xeq.c     **** #endif
 9560              		.loc 1 863 2 is_stmt 1 view .LVU2518
 9561 0014 044B     		ldr	r3, .L724
 9562 0016 1A68     		ldr	r2, [r3]
 9563 0018 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 9564 001c 43F00103 		orr	r3, r3, #1
 9565 0020 82F8AD37 		strb	r3, [r2, #1965]
 865:src/xeq.c     **** 
 9566              		.loc 1 865 1 is_stmt 0 view .LVU2519
 9567 0024 10BD     		pop	{r4, pc}
 9568              	.LVL685:
 9569              	.L725:
 865:src/xeq.c     **** 
 9570              		.loc 1 865 1 view .LVU2520
 9571 0026 00BF     		.align	2
 9572              	.L724:
 9573 0028 00000000 		.word	main_ram
 9574              		.cfi_endproc
ARM GAS  /tmp/ccBFDvgN.s 			page 310


 9575              	.LFE66:
 9577              		.section	.text.convert_regK,"ax",%progbits
 9578              		.align	1
 9579              		.p2align 2,,3
 9580              		.global	convert_regK
 9581              		.syntax unified
 9582              		.thumb
 9583              		.thumb_func
 9584              		.fpu fpv4-sp-d16
 9586              	convert_regK:
 9587              	.LVL686:
 9588              	.LFB75:
 939:src/xeq.c     **** 	decNumber k;
 9589              		.loc 1 939 41 is_stmt 1 view -0
 9590              		.cfi_startproc
 9591              		@ args = 0, pretend = 0, frame = 40
 9592              		@ frame_needed = 0, uses_anonymous_args = 0
 940:src/xeq.c     **** 
 9593              		.loc 1 940 2 view .LVU2522
 942:src/xeq.c     **** 	if (i==j) return; // no mode change
 9594              		.loc 1 942 2 view .LVU2523
 9595              	.LBB2091:
 9596              	.LBI2091:
4099:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 9597              		.loc 1 4099 17 view .LVU2524
 9598              	.LBB2092:
4100:src/xeq.c     **** 		return TRIG_RAD;
 9599              		.loc 1 4100 2 view .LVU2525
 9600              	.LBE2092:
 9601              	.LBE2091:
 939:src/xeq.c     **** 	decNumber k;
 9602              		.loc 1 939 41 is_stmt 0 view .LVU2526
 9603 0000 70B5     		push	{r4, r5, r6, lr}
 9604              		.cfi_def_cfa_offset 16
 9605              		.cfi_offset 4, -16
 9606              		.cfi_offset 5, -12
 9607              		.cfi_offset 6, -8
 9608              		.cfi_offset 14, -4
 9609              	.LBB2096:
 9610              	.LBB2093:
4100:src/xeq.c     **** 		return TRIG_RAD;
 9611              		.loc 1 4100 6 view .LVU2527
 9612 0002 2A4B     		ldr	r3, .L747
 9613 0004 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4100:src/xeq.c     **** 		return TRIG_RAD;
 9614              		.loc 1 4100 5 view .LVU2528
 9615 0006 9B07     		lsls	r3, r3, #30
 9616              	.LBE2093:
 9617              	.LBE2096:
 939:src/xeq.c     **** 	decNumber k;
 9618              		.loc 1 939 41 view .LVU2529
 9619 0008 8AB0     		sub	sp, sp, #40
 9620              		.cfi_def_cfa_offset 56
 939:src/xeq.c     **** 	decNumber k;
 9621              		.loc 1 939 41 view .LVU2530
 9622 000a 0446     		mov	r4, r0
 9623              	.LBB2097:
ARM GAS  /tmp/ccBFDvgN.s 			page 311


 9624              	.LBB2094:
4100:src/xeq.c     **** 		return TRIG_RAD;
 9625              		.loc 1 4100 5 view .LVU2531
 9626 000c 27D4     		bmi	.L730
4100:src/xeq.c     **** 		return TRIG_RAD;
 9627              		.loc 1 4100 19 view .LVU2532
 9628 000e 284B     		ldr	r3, .L747+4
 9629 0010 93F90130 		ldrsb	r3, [r3, #1]
 9630 0014 002B     		cmp	r3, #0
 9631 0016 22DB     		blt	.L730
4103:src/xeq.c     **** }
 9632              		.loc 1 4103 2 is_stmt 1 view .LVU2533
4103:src/xeq.c     **** }
 9633              		.loc 1 4103 33 is_stmt 0 view .LVU2534
 9634 0018 264B     		ldr	r3, .L747+8
 9635 001a 1B68     		ldr	r3, [r3]
 9636 001c 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 9637              	.LBE2094:
 9638              	.LBE2097:
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9639              		.loc 1 943 5 view .LVU2535
 9640 0020 B0EB931F 		cmp	r0, r3, lsr #6
 9641              	.LBB2098:
 9642              	.LBB2095:
4103:src/xeq.c     **** }
 9643              		.loc 1 4103 33 view .LVU2536
 9644 0024 4FEA9316 		lsr	r6, r3, #6
 9645              	.LVL687:
4103:src/xeq.c     **** }
 9646              		.loc 1 4103 33 view .LVU2537
 9647              	.LBE2095:
 9648              	.LBE2098:
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9649              		.loc 1 943 2 is_stmt 1 view .LVU2538
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9650              		.loc 1 943 5 is_stmt 0 view .LVU2539
 9651 0028 17D0     		beq	.L726
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9652              		.loc 1 944 2 is_stmt 1 view .LVU2540
 9653 002a 01AD     		add	r5, sp, #4
 9654 002c 2846     		mov	r0, r5
 9655              	.LVL688:
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9656              		.loc 1 944 2 is_stmt 0 view .LVU2541
 9657 002e 6F21     		movs	r1, #111
 9658 0030 FFF7FEFF 		bl	getRegister
 9659              	.LVL689:
 945:src/xeq.c     **** 		case TRIG_DEG:
 9660              		.loc 1 945 2 is_stmt 1 view .LVU2542
 9661 0034 012E     		cmp	r6, #1
 9662 0036 19D0     		beq	.L729
 9663 0038 022E     		cmp	r6, #2
 9664 003a 24D0     		beq	.L733
 9665 003c 26B9     		cbnz	r6, .L734
 947:src/xeq.c     **** 			break;
 9666              		.loc 1 947 4 view .LVU2543
 9667 003e 1E4A     		ldr	r2, .L747+12
ARM GAS  /tmp/ccBFDvgN.s 			page 312


 9668 0040 2946     		mov	r1, r5
 9669 0042 2846     		mov	r0, r5
 9670 0044 FFF7FEFF 		bl	dn_divide
 9671              	.LVL690:
 948:src/xeq.c     **** 		case TRIG_RAD:
 9672              		.loc 1 948 4 view .LVU2544
 9673              	.L734:
 954:src/xeq.c     **** 	}
 9674              		.loc 1 954 11 view .LVU2545
 956:src/xeq.c     **** 		case TRIG_DEG:
 9675              		.loc 1 956 2 view .LVU2546
 9676 0048 012C     		cmp	r4, #1
 9677 004a 16D0     		beq	.L735
 9678              	.L746:
 956:src/xeq.c     **** 		case TRIG_DEG:
 9679              		.loc 1 956 2 is_stmt 0 view .LVU2547
 9680 004c 022C     		cmp	r4, #2
 9681 004e 20D0     		beq	.L736
 9682 0050 2CB3     		cbz	r4, .L745
 9683              	.L737:
 965:src/xeq.c     **** 	}
 9684              		.loc 1 965 11 is_stmt 1 view .LVU2548
 967:src/xeq.c     **** }
 9685              		.loc 1 967 2 view .LVU2549
 9686 0052 2946     		mov	r1, r5
 9687 0054 6F20     		movs	r0, #111
 9688 0056 FFF7FEFF 		bl	setRegister
 9689              	.LVL691:
 9690              	.L726:
 968:src/xeq.c     **** 
 9691              		.loc 1 968 1 is_stmt 0 view .LVU2550
 9692 005a 0AB0     		add	sp, sp, #40
 9693              		.cfi_remember_state
 9694              		.cfi_def_cfa_offset 16
 9695              		@ sp needed
 9696 005c 70BD     		pop	{r4, r5, r6, pc}
 9697              	.LVL692:
 9698              	.L730:
 9699              		.cfi_restore_state
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9700              		.loc 1 943 2 is_stmt 1 view .LVU2551
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9701              		.loc 1 943 5 is_stmt 0 view .LVU2552
 9702 005e 012C     		cmp	r4, #1
 9703 0060 FBD0     		beq	.L726
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9704              		.loc 1 944 2 is_stmt 1 view .LVU2553
 9705 0062 01AD     		add	r5, sp, #4
 9706 0064 2846     		mov	r0, r5
 9707              	.LVL693:
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9708              		.loc 1 944 2 is_stmt 0 view .LVU2554
 9709 0066 6F21     		movs	r1, #111
 9710 0068 FFF7FEFF 		bl	getRegister
 9711              	.LVL694:
 945:src/xeq.c     **** 		case TRIG_DEG:
 9712              		.loc 1 945 2 is_stmt 1 view .LVU2555
ARM GAS  /tmp/ccBFDvgN.s 			page 313


 9713              	.L729:
 950:src/xeq.c     **** 			break;
 9714              		.loc 1 950 4 view .LVU2556
 9715 006c 134A     		ldr	r2, .L747+16
 9716 006e 2946     		mov	r1, r5
 9717 0070 2846     		mov	r0, r5
 9718 0072 FFF7FEFF 		bl	dn_divide
 9719              	.LVL695:
 951:src/xeq.c     **** 		case TRIG_GRAD:
 9720              		.loc 1 951 4 view .LVU2557
 954:src/xeq.c     **** 	}
 9721              		.loc 1 954 11 view .LVU2558
 956:src/xeq.c     **** 		case TRIG_DEG:
 9722              		.loc 1 956 2 view .LVU2559
 9723 0076 012C     		cmp	r4, #1
 9724 0078 E8D1     		bne	.L746
 9725              	.L735:
 961:src/xeq.c     **** 			break;
 9726              		.loc 1 961 4 view .LVU2560
 9727 007a 104A     		ldr	r2, .L747+16
 9728 007c 2946     		mov	r1, r5
 9729 007e 2846     		mov	r0, r5
 9730 0080 FFF7FEFF 		bl	dn_multiply
 9731              	.LVL696:
 962:src/xeq.c     **** 		case TRIG_GRAD:
 9732              		.loc 1 962 4 view .LVU2561
 9733 0084 E5E7     		b	.L737
 9734              	.L733:
 953:src/xeq.c     **** 		default:;
 9735              		.loc 1 953 4 view .LVU2562
 9736 0086 0E4A     		ldr	r2, .L747+20
 9737 0088 2946     		mov	r1, r5
 9738 008a 2846     		mov	r0, r5
 9739 008c FFF7FEFF 		bl	dn_divide
 9740              	.LVL697:
 9741 0090 DAE7     		b	.L734
 9742              	.L736:
 964:src/xeq.c     **** 		default:;
 9743              		.loc 1 964 4 view .LVU2563
 9744 0092 0B4A     		ldr	r2, .L747+20
 9745 0094 2946     		mov	r1, r5
 9746 0096 2846     		mov	r0, r5
 9747 0098 FFF7FEFF 		bl	dn_multiply
 9748              	.LVL698:
 9749 009c D9E7     		b	.L737
 9750              	.L745:
 958:src/xeq.c     **** 			break;
 9751              		.loc 1 958 4 view .LVU2564
 9752 009e 064A     		ldr	r2, .L747+12
 9753 00a0 2946     		mov	r1, r5
 9754 00a2 2846     		mov	r0, r5
 9755 00a4 FFF7FEFF 		bl	dn_multiply
 9756              	.LVL699:
 959:src/xeq.c     **** 		case TRIG_RAD:
 9757              		.loc 1 959 4 view .LVU2565
 9758 00a8 D3E7     		b	.L737
 9759              	.L748:
ARM GAS  /tmp/ccBFDvgN.s 			page 314


 9760 00aa 00BF     		.align	2
 9761              	.L747:
 9762 00ac 00000000 		.word	StateWhileOn
 9763 00b0 00000000 		.word	XromParams
 9764 00b4 00000000 		.word	main_ram
 9765 00b8 00000000 		.word	const_360
 9766 00bc 00000000 		.word	const_2PI
 9767 00c0 00000000 		.word	const_400
 9768              		.cfi_endproc
 9769              	.LFE75:
 9771              		.section	.text.cpx_nop,"ax",%progbits
 9772              		.align	1
 9773              		.p2align 2,,3
 9774              		.global	cpx_nop
 9775              		.syntax unified
 9776              		.thumb
 9777              		.thumb_func
 9778              		.fpu fpv4-sp-d16
 9780              	cpx_nop:
 9781              	.LVL700:
 9782              	.LFB78:
1011:src/xeq.c     ****   reset_shift();
 9783              		.loc 1 1011 29 view -0
 9784              		.cfi_startproc
 9785              		@ args = 0, pretend = 0, frame = 40
 9786              		@ frame_needed = 0, uses_anonymous_args = 0
1012:src/xeq.c     **** 	switch (op) {
 9787              		.loc 1 1012 3 view .LVU2567
1011:src/xeq.c     ****   reset_shift();
 9788              		.loc 1 1011 29 is_stmt 0 view .LVU2568
 9789 0000 10B5     		push	{r4, lr}
 9790              		.cfi_def_cfa_offset 8
 9791              		.cfi_offset 4, -8
 9792              		.cfi_offset 14, -4
 9793 0002 0446     		mov	r4, r0
 9794 0004 8AB0     		sub	sp, sp, #40
 9795              		.cfi_def_cfa_offset 48
1012:src/xeq.c     **** 	switch (op) {
 9796              		.loc 1 1012 3 view .LVU2569
 9797 0006 FFF7FEFF 		bl	reset_shift
 9798              	.LVL701:
1013:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
 9799              		.loc 1 1013 2 is_stmt 1 view .LVU2570
 9800 000a A4F1C100 		sub	r0, r4, #193
 9801 000e 0B28     		cmp	r0, #11
 9802 0010 13D8     		bhi	.L767
 9803 0012 DFE800F0 		tbb	[pc, r0]
 9804              	.L752:
 9805 0016 21       		.byte	(.L761-.L752)/2
 9806 0017 3B       		.byte	(.L765-.L752)/2
 9807 0018 06       		.byte	(.L759-.L752)/2
 9808 0019 59       		.byte	(.L758-.L752)/2
 9809 001a 68       		.byte	(.L757-.L752)/2
 9810 001b 70       		.byte	(.L756-.L752)/2
 9811 001c 12       		.byte	(.L767-.L752)/2
 9812 001d 12       		.byte	(.L767-.L752)/2
 9813 001e 77       		.byte	(.L755-.L752)/2
ARM GAS  /tmp/ccBFDvgN.s 			page 315


 9814 001f 80       		.byte	(.L754-.L752)/2
 9815 0020 89       		.byte	(.L753-.L752)/2
 9816 0021 94       		.byte	(.L751-.L752)/2
 9817              		.p2align 1
 9818              	.L759:
 9819              	.LBB2099:
1053:src/xeq.c     **** 		getY(&y);
 9820              		.loc 1 1053 3 view .LVU2571
1054:src/xeq.c     **** 		dn_minus(&y, &y);
 9821              		.loc 1 1054 3 view .LVU2572
 9822              	.LVL702:
 9823              	.LBB2100:
 9824              	.LBI2100:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 9825              		.loc 1 832 6 view .LVU2573
 9826              	.LBB2101:
 833:src/xeq.c     **** }
 9827              		.loc 1 833 2 view .LVU2574
 9828 0022 6521     		movs	r1, #101
 9829 0024 01A8     		add	r0, sp, #4
 9830              	.LVL703:
 833:src/xeq.c     **** }
 9831              		.loc 1 833 2 is_stmt 0 view .LVU2575
 9832 0026 FFF7FEFF 		bl	getRegister
 9833              	.LVL704:
 833:src/xeq.c     **** }
 9834              		.loc 1 833 2 view .LVU2576
 9835              	.LBE2101:
 9836              	.LBE2100:
1055:src/xeq.c     **** 		setY(&y);
 9837              		.loc 1 1055 3 is_stmt 1 view .LVU2577
 9838 002a 01A9     		add	r1, sp, #4
 9839 002c 0846     		mov	r0, r1
 9840 002e FFF7FEFF 		bl	dn_minus
 9841              	.LVL705:
1056:src/xeq.c     **** 		}
 9842              		.loc 1 1056 3 view .LVU2578
 9843              	.LBB2102:
 9844              	.LBI2102:
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9845              		.loc 1 836 6 view .LVU2579
 9846              	.LBB2103:
 837:src/xeq.c     **** }
 9847              		.loc 1 837 2 view .LVU2580
 9848 0032 01A9     		add	r1, sp, #4
 9849              	.LVL706:
 837:src/xeq.c     **** }
 9850              		.loc 1 837 2 is_stmt 0 view .LVU2581
 9851 0034 6520     		movs	r0, #101
 9852 0036 FFF7FEFF 		bl	setRegister
 9853              	.LVL707:
 9854              	.L767:
 837:src/xeq.c     **** }
 9855              		.loc 1 837 2 view .LVU2582
 9856              	.LBE2103:
 9857              	.LBE2102:
 9858              	.LBE2099:
ARM GAS  /tmp/ccBFDvgN.s 			page 316


1058:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
 9859              		.loc 1 1058 3 is_stmt 1 view .LVU2583
 9860 003a 4A4B     		ldr	r3, .L768
 9861 003c 1A68     		ldr	r2, [r3]
 9862              	.L762:
1079:src/xeq.c     **** 	}
 9863              		.loc 1 1079 10 view .LVU2584
1081:src/xeq.c     **** 	CLEAR_POLAR_READY;
 9864              		.loc 1 1081 2 view .LVU2585
 9865              	.LBB2104:
 9866              	.LBI2104:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 9867              		.loc 1 539 13 view .LVU2586
 9868              	.LBB2105:
 540:src/xeq.c     **** }
 9869              		.loc 1 540 2 view .LVU2587
 540:src/xeq.c     **** }
 9870              		.loc 1 540 20 is_stmt 0 view .LVU2588
 9871 003e 4A4B     		ldr	r3, .L768+4
 9872 0040 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 9873 0042 0120     		movs	r0, #1
 9874 0044 60F38711 		bfi	r1, r0, #6, #2
 9875 0048 1975     		strb	r1, [r3, #20]
 9876              	.LBE2105:
 9877              	.LBE2104:
1082:src/xeq.c     **** }
 9878              		.loc 1 1082 2 is_stmt 1 view .LVU2589
 9879 004a 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 9880 004e 0343     		orrs	r3, r3, r0
 9881 0050 82F8AD37 		strb	r3, [r2, #1965]
 9882              	.L749:
1083:src/xeq.c     **** #endif
 9883              		.loc 1 1083 1 is_stmt 0 view .LVU2590
 9884 0054 0AB0     		add	sp, sp, #40
 9885              		.cfi_remember_state
 9886              		.cfi_def_cfa_offset 8
 9887              		@ sp needed
 9888 0056 10BD     		pop	{r4, pc}
 9889              	.L761:
 9890              		.cfi_restore_state
1021:src/xeq.c     **** 			INIT_8;
 9891              		.loc 1 1021 3 is_stmt 1 view .LVU2591
1021:src/xeq.c     **** 			INIT_8;
 9892              		.loc 1 1021 7 is_stmt 0 view .LVU2592
 9893 0058 424C     		ldr	r4, .L768
 9894 005a 2268     		ldr	r2, [r4]
1027:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9895              		.loc 1 1027 3 is_stmt 1 view .LVU2593
1021:src/xeq.c     **** 			INIT_8;
 9896              		.loc 1 1021 6 is_stmt 0 view .LVU2594
 9897 005c 92F8EA17 		ldrb	r1, [r2, #2026]	@ zero_extendqisi2
1027:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9898              		.loc 1 1027 3 view .LVU2595
 9899 0060 92F8AC07 		ldrb	r0, [r2, #1964]	@ zero_extendqisi2
 9900 0064 01F00803 		and	r3, r1, #8
 9901 0068 20F00900 		bic	r0, r0, #9
 9902 006c 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/ccBFDvgN.s 			page 317


 9903 0070 0343     		orrs	r3, r3, r0
1028:src/xeq.c     **** #ifdef DM42
 9904              		.loc 1 1028 22 view .LVU2596
 9905 0072 41F00801 		orr	r1, r1, #8
 9906 0076 82F8EA17 		strb	r1, [r2, #2026]
1027:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9907              		.loc 1 1027 3 view .LVU2597
 9908 007a 82F8AC37 		strb	r3, [r2, #1964]
1028:src/xeq.c     **** #ifdef DM42
 9909              		.loc 1 1028 3 is_stmt 1 view .LVU2598
1030:src/xeq.c     **** 		display_current_menu();
 9910              		.loc 1 1030 3 view .LVU2599
 9911 007e 1120     		movs	r0, #17
 9912 0080 FFF7FEFF 		bl	set_menu
 9913              	.LVL708:
1031:src/xeq.c     **** #endif
 9914              		.loc 1 1031 3 view .LVU2600
 9915 0084 FFF7FEFF 		bl	display_current_menu
 9916              	.LVL709:
1033:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
 9917              		.loc 1 1033 3 view .LVU2601
 9918 0088 2268     		ldr	r2, [r4]
 9919 008a D8E7     		b	.L762
 9920              	.L765:
 9921 008c 354C     		ldr	r4, .L768
 9922              	.L760:
1042:src/xeq.c     **** 		UNLOCK_C;
 9923              		.loc 1 1042 3 view .LVU2602
 9924 008e 0120     		movs	r0, #1
 9925 0090 FFF7FEFF 		bl	finish_cpx_entry
 9926              	.LVL710:
1043:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9927              		.loc 1 1043 3 view .LVU2603
 9928 0094 2368     		ldr	r3, [r4]
1045:src/xeq.c     **** #ifdef DM42
 9929              		.loc 1 1045 21 is_stmt 0 view .LVU2604
 9930 0096 3449     		ldr	r1, .L768+4
1043:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9931              		.loc 1 1043 3 view .LVU2605
 9932 0098 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
1044:src/xeq.c     **** 		State2.wascomplex = 0;
 9933              		.loc 1 1044 22 view .LVU2606
 9934 009c 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
1043:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9935              		.loc 1 1043 3 view .LVU2607
 9936 00a0 6FF30002 		bfc	r2, #0, #1
1044:src/xeq.c     **** 		State2.wascomplex = 0;
 9937              		.loc 1 1044 22 view .LVU2608
 9938 00a4 C2F3C004 		ubfx	r4, r2, #3, #1
 9939 00a8 64F3C300 		bfi	r0, r4, #3, #1
 9940 00ac 83F8EA07 		strb	r0, [r3, #2026]
1045:src/xeq.c     **** #ifdef DM42
 9941              		.loc 1 1045 21 view .LVU2609
 9942 00b0 087D     		ldrb	r0, [r1, #20]	@ zero_extendqisi2
1043:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9943              		.loc 1 1043 3 view .LVU2610
 9944 00b2 83F8AC27 		strb	r2, [r3, #1964]
ARM GAS  /tmp/ccBFDvgN.s 			page 318


1044:src/xeq.c     **** 		State2.wascomplex = 0;
 9945              		.loc 1 1044 3 is_stmt 1 view .LVU2611
1045:src/xeq.c     **** #ifdef DM42
 9946              		.loc 1 1045 3 view .LVU2612
1045:src/xeq.c     **** #ifdef DM42
 9947              		.loc 1 1045 21 is_stmt 0 view .LVU2613
 9948 00b6 6FF38710 		bfc	r0, #6, #2
 9949 00ba 0875     		strb	r0, [r1, #20]
1047:src/xeq.c     **** 		display_current_menu();
 9950              		.loc 1 1047 3 is_stmt 1 view .LVU2614
 9951 00bc FFF7FEFF 		bl	set_default_menu
 9952              	.LVL711:
1048:src/xeq.c     **** #endif
 9953              		.loc 1 1048 3 view .LVU2615
 9954 00c0 FFF7FEFF 		bl	display_current_menu
 9955              	.LVL712:
1050:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
 9956              		.loc 1 1050 3 view .LVU2616
1083:src/xeq.c     **** #endif
 9957              		.loc 1 1083 1 is_stmt 0 view .LVU2617
 9958 00c4 0AB0     		add	sp, sp, #40
 9959              		.cfi_remember_state
 9960              		.cfi_def_cfa_offset 8
 9961              		@ sp needed
 9962 00c6 10BD     		pop	{r4, pc}
 9963              	.L758:
 9964              		.cfi_restore_state
 9965              	.LBB2106:
1061:src/xeq.c     **** 		getX(&x);
 9966              		.loc 1 1061 3 is_stmt 1 view .LVU2618
1062:src/xeq.c     **** 		dn_minus(&x, &x);
 9967              		.loc 1 1062 3 view .LVU2619
 9968              	.LVL713:
 9969              	.LBB2107:
 9970              	.LBI2107:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9971              		.loc 1 824 12 view .LVU2620
 9972              	.LBB2108:
 825:src/xeq.c     **** }
 9973              		.loc 1 825 2 view .LVU2621
 825:src/xeq.c     **** }
 9974              		.loc 1 825 9 is_stmt 0 view .LVU2622
 9975 00c8 6421     		movs	r1, #100
 9976 00ca 01A8     		add	r0, sp, #4
 9977              	.LVL714:
 825:src/xeq.c     **** }
 9978              		.loc 1 825 9 view .LVU2623
 9979 00cc FFF7FEFF 		bl	getRegister
 9980              	.LVL715:
 825:src/xeq.c     **** }
 9981              		.loc 1 825 9 view .LVU2624
 9982              	.LBE2108:
 9983              	.LBE2107:
1063:src/xeq.c     **** 		setX(&x);
 9984              		.loc 1 1063 3 is_stmt 1 view .LVU2625
 9985 00d0 01A9     		add	r1, sp, #4
 9986 00d2 0846     		mov	r0, r1
ARM GAS  /tmp/ccBFDvgN.s 			page 319


 9987 00d4 FFF7FEFF 		bl	dn_minus
 9988              	.LVL716:
1064:src/xeq.c     **** 		}
 9989              		.loc 1 1064 3 view .LVU2626
 9990              	.LBB2109:
 9991              	.LBI2109:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9992              		.loc 1 828 6 view .LVU2627
 9993              	.LBB2110:
 829:src/xeq.c     **** }
 9994              		.loc 1 829 2 view .LVU2628
 9995 00d8 01A9     		add	r1, sp, #4
 9996              	.LVL717:
 829:src/xeq.c     **** }
 9997              		.loc 1 829 2 is_stmt 0 view .LVU2629
 9998 00da 6420     		movs	r0, #100
 9999 00dc FFF7FEFF 		bl	setRegister
 10000              	.LVL718:
 829:src/xeq.c     **** }
 10001              		.loc 1 829 2 view .LVU2630
 10002              	.LBE2110:
 10003              	.LBE2109:
 10004              	.LBE2106:
1066:src/xeq.c     **** 	case OP_C_IM: // zero real part
 10005              		.loc 1 1066 3 is_stmt 1 view .LVU2631
 10006 00e0 204B     		ldr	r3, .L768
 10007 00e2 1A68     		ldr	r2, [r3]
 10008 00e4 ABE7     		b	.L762
 10009              	.L757:
1071:src/xeq.c     **** 		break;
 10010              		.loc 1 1071 3 view .LVU2632
 10011              	.LBB2111:
 10012              	.LBI2111:
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 10013              		.loc 1 1554 6 view .LVU2633
 10014              	.LBB2112:
1555:src/xeq.c     **** }
 10015              		.loc 1 1555 2 view .LVU2634
 10016 00e6 6520     		movs	r0, #101
 10017 00e8 FFF7FEFF 		bl	get_reg_n
 10018              	.LVL719:
 10019 00ec FFF7FEFF 		bl	set_zero
 10020              	.LVL720:
 10021 00f0 1C4B     		ldr	r3, .L768
 10022 00f2 1A68     		ldr	r2, [r3]
1556:src/xeq.c     **** 
 10023              		.loc 1 1556 1 is_stmt 0 view .LVU2635
 10024 00f4 A3E7     		b	.L762
 10025              	.L756:
 10026              	.LBE2112:
 10027              	.LBE2111:
1068:src/xeq.c     **** 		break;
 10028              		.loc 1 1068 3 is_stmt 1 view .LVU2636
 10029              	.LBB2113:
 10030              	.LBI2113:
1550:src/xeq.c     **** 	set_zero(StackBase);
 10031              		.loc 1 1550 6 view .LVU2637
ARM GAS  /tmp/ccBFDvgN.s 			page 320


 10032              	.LBB2114:
1551:src/xeq.c     **** }
 10033              		.loc 1 1551 2 view .LVU2638
 10034 00f6 1D4B     		ldr	r3, .L768+8
 10035 00f8 1868     		ldr	r0, [r3]
 10036 00fa FFF7FEFF 		bl	set_zero
 10037              	.LVL721:
 10038 00fe 194B     		ldr	r3, .L768
 10039 0100 1A68     		ldr	r2, [r3]
1552:src/xeq.c     **** 
 10040              		.loc 1 1552 1 is_stmt 0 view .LVU2639
 10041 0102 9CE7     		b	.L762
 10042              	.L755:
 10043              	.LBE2114:
 10044              	.LBE2113:
1074:src/xeq.c     **** 		break;
 10045              		.loc 1 1074 3 is_stmt 1 view .LVU2640
 10046 0104 174B     		ldr	r3, .L768
 10047 0106 1A68     		ldr	r2, [r3]
 10048 0108 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 10049 010c 6FF34513 		bfc	r3, #5, #1
 10050 0110 82F8AC37 		strb	r3, [r2, #1964]
1075:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
 10051              		.loc 1 1075 3 view .LVU2641
 10052 0114 93E7     		b	.L762
 10053              	.L754:
1077:src/xeq.c     **** 		break;
 10054              		.loc 1 1077 3 view .LVU2642
 10055 0116 134B     		ldr	r3, .L768
 10056 0118 1A68     		ldr	r2, [r3]
 10057 011a 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 10058 011e 43F02003 		orr	r3, r3, #32
 10059 0122 82F8AC37 		strb	r3, [r2, #1964]
1078:src/xeq.c     **** 	default:;
 10060              		.loc 1 1078 3 view .LVU2643
 10061 0126 8AE7     		b	.L762
 10062              	.L753:
1015:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10063              		.loc 1 1015 10 view .LVU2644
 10064 0128 0E4B     		ldr	r3, .L768
 10065 012a 1A68     		ldr	r2, [r3]
1016:src/xeq.c     **** 		CLEAR_IMAG;
 10066              		.loc 1 1016 3 view .LVU2645
1017:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
 10067              		.loc 1 1017 3 view .LVU2646
1018:src/xeq.c     **** 		return;
 10068              		.loc 1 1018 3 view .LVU2647
1016:src/xeq.c     **** 		CLEAR_IMAG;
 10069              		.loc 1 1016 3 is_stmt 0 view .LVU2648
 10070 012c 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 10071 0130 03F03903 		and	r3, r3, #57
 10072 0134 43F04003 		orr	r3, r3, #64
 10073 0138 82F8AC37 		strb	r3, [r2, #1964]
1019:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
 10074              		.loc 1 1019 3 is_stmt 1 view .LVU2649
 10075 013c 8AE7     		b	.L749
 10076              	.L751:
ARM GAS  /tmp/ccBFDvgN.s 			page 321


1035:src/xeq.c     **** 			SET_CPX_NO;
 10077              		.loc 1 1035 3 view .LVU2650
1035:src/xeq.c     **** 			SET_CPX_NO;
 10078              		.loc 1 1035 8 is_stmt 0 view .LVU2651
 10079 013e 094C     		ldr	r4, .L768
 10080 0140 2268     		ldr	r2, [r4]
1035:src/xeq.c     **** 			SET_CPX_NO;
 10081              		.loc 1 1035 7 view .LVU2652
 10082 0142 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
1035:src/xeq.c     **** 			SET_CPX_NO;
 10083              		.loc 1 1035 6 view .LVU2653
 10084 0146 03F04101 		and	r1, r3, #65
 10085 014a 4129     		cmp	r1, #65
 10086 014c 04D0     		beq	.L764
1036:src/xeq.c     **** 			UNLOCK_C; //just in case
 10087              		.loc 1 1036 4 is_stmt 1 view .LVU2654
1037:src/xeq.c     **** 			return;
 10088              		.loc 1 1037 4 view .LVU2655
 10089 014e 23F04103 		bic	r3, r3, #65
 10090 0152 82F8AC37 		strb	r3, [r2, #1964]
1038:src/xeq.c     **** 		}
 10091              		.loc 1 1038 4 view .LVU2656
 10092 0156 7DE7     		b	.L749
 10093              	.L764:
1040:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
 10094              		.loc 1 1040 3 view .LVU2657
 10095 0158 6FF38613 		bfc	r3, #6, #1
 10096 015c 82F8AC37 		strb	r3, [r2, #1964]
 10097 0160 95E7     		b	.L760
 10098              	.L769:
 10099 0162 00BF     		.align	2
 10100              	.L768:
 10101 0164 00000000 		.word	main_ram
 10102 0168 00000000 		.word	StateWhileOn
 10103 016c 00000000 		.word	StackBase
 10104              		.cfi_endproc
 10105              	.LFE78:
 10107              		.section	.text.get_reg_n_int,"ax",%progbits
 10108              		.align	1
 10109              		.p2align 2,,3
 10110              		.global	get_reg_n_int
 10111              		.syntax unified
 10112              		.thumb
 10113              		.thumb_func
 10114              		.fpu fpv4-sp-d16
 10116              	get_reg_n_int:
 10117              	.LVL722:
 10118              	.LFB94:
1416:src/xeq.c     **** 	long long int ll;
 10119              		.loc 1 1416 40 view -0
 10120              		.cfi_startproc
 10121              		@ args = 0, pretend = 0, frame = 8
 10122              		@ frame_needed = 0, uses_anonymous_args = 0
1417:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
 10123              		.loc 1 1417 2 view .LVU2659
1418:src/xeq.c     **** 	return ll;
 10124              		.loc 1 1418 2 view .LVU2660
ARM GAS  /tmp/ccBFDvgN.s 			page 322


1416:src/xeq.c     **** 	long long int ll;
 10125              		.loc 1 1416 40 is_stmt 0 view .LVU2661
 10126 0000 00B5     		push	{lr}
 10127              		.cfi_def_cfa_offset 4
 10128              		.cfi_offset 14, -4
 10129 0002 83B0     		sub	sp, sp, #12
 10130              		.cfi_def_cfa_offset 16
1418:src/xeq.c     **** 	return ll;
 10131              		.loc 1 1418 13 view .LVU2662
 10132 0004 FFF7FEFF 		bl	get_reg_n
 10133              	.LVL723:
1418:src/xeq.c     **** 	return ll;
 10134              		.loc 1 1418 2 view .LVU2663
 10135 0008 0822     		movs	r2, #8
1418:src/xeq.c     **** 	return ll;
 10136              		.loc 1 1418 13 view .LVU2664
 10137 000a 0146     		mov	r1, r0
1418:src/xeq.c     **** 	return ll;
 10138              		.loc 1 1418 2 view .LVU2665
 10139 000c 6846     		mov	r0, sp
 10140 000e FFF7FEFF 		bl	xcopy
 10141              	.LVL724:
1419:src/xeq.c     **** }
 10142              		.loc 1 1419 2 is_stmt 1 view .LVU2666
1420:src/xeq.c     **** 
 10143              		.loc 1 1420 1 is_stmt 0 view .LVU2667
 10144 0012 DDE90001 		ldrd	r0, [sp]
 10145 0016 03B0     		add	sp, sp, #12
 10146              		.cfi_def_cfa_offset 4
 10147              		@ sp needed
 10148 0018 5DF804FB 		ldr	pc, [sp], #4
 10149              		.cfi_endproc
 10150              	.LFE94:
 10152              		.section	.text.storcl_intop,"ax",%progbits
 10153              		.align	1
 10154              		.p2align 2,,3
 10155              		.syntax unified
 10156              		.thumb
 10157              		.thumb_func
 10158              		.fpu fpv4-sp-d16
 10160              	storcl_intop:
 10161              	.LVL725:
 10162              	.LFB116:
1685:src/xeq.c     **** 	long long int x, y;
 10163              		.loc 1 1685 83 is_stmt 1 view -0
 10164              		.cfi_startproc
 10165              		@ args = 0, pretend = 0, frame = 0
 10166              		@ frame_needed = 0, uses_anonymous_args = 0
1686:src/xeq.c     **** 
 10167              		.loc 1 1686 2 view .LVU2669
1688:src/xeq.c     **** 	y = get_reg_n_int(index);
 10168              		.loc 1 1688 2 view .LVU2670
 10169              	.LBB2115:
 10170              	.LBI2115:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10171              		.loc 1 1442 15 view .LVU2671
 10172              	.LBB2116:
ARM GAS  /tmp/ccBFDvgN.s 			page 323


1443:src/xeq.c     **** }
 10173              		.loc 1 1443 2 view .LVU2672
 10174              	.LBE2116:
 10175              	.LBE2115:
1685:src/xeq.c     **** 	long long int x, y;
 10176              		.loc 1 1685 83 is_stmt 0 view .LVU2673
 10177 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 10178              		.cfi_def_cfa_offset 32
 10179              		.cfi_offset 3, -32
 10180              		.cfi_offset 4, -28
 10181              		.cfi_offset 5, -24
 10182              		.cfi_offset 6, -20
 10183              		.cfi_offset 7, -16
 10184              		.cfi_offset 8, -12
 10185              		.cfi_offset 9, -8
 10186              		.cfi_offset 14, -4
1685:src/xeq.c     **** 	long long int x, y;
 10187              		.loc 1 1685 83 view .LVU2674
 10188 0004 0446     		mov	r4, r0
 10189              	.LBB2120:
 10190              	.LBB2117:
1443:src/xeq.c     **** }
 10191              		.loc 1 1443 9 view .LVU2675
 10192 0006 6420     		movs	r0, #100
 10193              	.LVL726:
1443:src/xeq.c     **** }
 10194              		.loc 1 1443 9 view .LVU2676
 10195              	.LBE2117:
 10196              	.LBE2120:
1685:src/xeq.c     **** 	long long int x, y;
 10197              		.loc 1 1685 83 view .LVU2677
 10198 0008 8946     		mov	r9, r1
 10199 000a 9846     		mov	r8, r3
 10200 000c 1646     		mov	r6, r2
 10201              	.LBB2121:
 10202              	.LBB2118:
1443:src/xeq.c     **** }
 10203              		.loc 1 1443 9 view .LVU2678
 10204 000e FFF7FEFF 		bl	get_reg_n_int
 10205              	.LVL727:
1443:src/xeq.c     **** }
 10206              		.loc 1 1443 9 view .LVU2679
 10207 0012 0746     		mov	r7, r0
 10208              	.LBE2118:
 10209              	.LBE2121:
1689:src/xeq.c     **** 
 10210              		.loc 1 1689 6 view .LVU2680
 10211 0014 4846     		mov	r0, r9
 10212              	.LBB2122:
 10213              	.LBB2119:
1443:src/xeq.c     **** }
 10214              		.loc 1 1443 9 view .LVU2681
 10215 0016 0D46     		mov	r5, r1
 10216              	.LVL728:
1443:src/xeq.c     **** }
 10217              		.loc 1 1443 9 view .LVU2682
 10218              	.LBE2119:
ARM GAS  /tmp/ccBFDvgN.s 			page 324


 10219              	.LBE2122:
1689:src/xeq.c     **** 
 10220              		.loc 1 1689 2 is_stmt 1 view .LVU2683
1689:src/xeq.c     **** 
 10221              		.loc 1 1689 6 is_stmt 0 view .LVU2684
 10222 0018 FFF7FEFF 		bl	get_reg_n_int
 10223              	.LVL729:
1691:src/xeq.c     **** 		const long long int t = x;
 10224              		.loc 1 1691 2 is_stmt 1 view .LVU2685
1691:src/xeq.c     **** 		const long long int t = x;
 10225              		.loc 1 1691 5 is_stmt 0 view .LVU2686
 10226 001c B8F1000F 		cmp	r8, #0
 10227 0020 05D0     		beq	.L773
 10228 0022 3A46     		mov	r2, r7
 10229 0024 2B46     		mov	r3, r5
 10230              	.LBB2123:
1693:src/xeq.c     **** 		y = t;
 10231              		.loc 1 1693 5 view .LVU2687
 10232 0026 0746     		mov	r7, r0
 10233              	.LVL730:
1693:src/xeq.c     **** 		y = t;
 10234              		.loc 1 1693 5 view .LVU2688
 10235 0028 0D46     		mov	r5, r1
 10236              	.LVL731:
1694:src/xeq.c     **** 	}
 10237              		.loc 1 1694 5 view .LVU2689
 10238 002a 1046     		mov	r0, r2
 10239              	.LVL732:
1694:src/xeq.c     **** 	}
 10240              		.loc 1 1694 5 view .LVU2690
 10241 002c 1946     		mov	r1, r3
 10242              	.LVL733:
 10243              	.L773:
1694:src/xeq.c     **** 	}
 10244              		.loc 1 1694 5 view .LVU2691
 10245              	.LBE2123:
1697:src/xeq.c     **** 	case 1:
 10246              		.loc 1 1697 2 is_stmt 1 view .LVU2692
 10247 002e 013C     		subs	r4, r4, #1
 10248 0030 052C     		cmp	r4, #5
 10249 0032 3AD8     		bhi	.L782
 10250 0034 DFE804F0 		tbb	[pc, r4]
 10251              	.L776:
 10252 0038 0C       		.byte	(.L781-.L776)/2
 10253 0039 15       		.byte	(.L780-.L776)/2
 10254 003a 1E       		.byte	(.L779-.L776)/2
 10255 003b 27       		.byte	(.L778-.L776)/2
 10256 003c 30       		.byte	(.L777-.L776)/2
 10257 003d 03       		.byte	(.L775-.L776)/2
 10258              		.p2align 1
 10259              	.L775:
1714:src/xeq.c     **** 		break;
 10260              		.loc 1 1714 3 view .LVU2693
1714:src/xeq.c     **** 		break;
 10261              		.loc 1 1714 8 is_stmt 0 view .LVU2694
 10262 003e 3A46     		mov	r2, r7
 10263 0040 2B46     		mov	r3, r5
ARM GAS  /tmp/ccBFDvgN.s 			page 325


 10264 0042 FFF7FEFF 		bl	intMax
 10265              	.LVL734:
1714:src/xeq.c     **** 		break;
 10266              		.loc 1 1714 6 view .LVU2695
 10267 0046 C6E90001 		strd	r0, [r6]
1715:src/xeq.c     **** 	default:
 10268              		.loc 1 1715 3 is_stmt 1 view .LVU2696
1719:src/xeq.c     **** }
 10269              		.loc 1 1719 9 is_stmt 0 view .LVU2697
 10270 004a 0020     		movs	r0, #0
 10271              	.L772:
1720:src/xeq.c     **** 
 10272              		.loc 1 1720 1 view .LVU2698
 10273 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10274              	.LVL735:
 10275              	.L781:
1699:src/xeq.c     **** 		break;
 10276              		.loc 1 1699 3 is_stmt 1 view .LVU2699
1699:src/xeq.c     **** 		break;
 10277              		.loc 1 1699 8 is_stmt 0 view .LVU2700
 10278 0050 3A46     		mov	r2, r7
 10279 0052 2B46     		mov	r3, r5
 10280 0054 FFF7FEFF 		bl	intAdd
 10281              	.LVL736:
1699:src/xeq.c     **** 		break;
 10282              		.loc 1 1699 6 view .LVU2701
 10283 0058 C6E90001 		strd	r0, [r6]
1700:src/xeq.c     **** 	case 2:
 10284              		.loc 1 1700 3 is_stmt 1 view .LVU2702
1719:src/xeq.c     **** }
 10285              		.loc 1 1719 9 is_stmt 0 view .LVU2703
 10286 005c 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10287              		.loc 1 1720 1 view .LVU2704
 10288 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10289              	.LVL737:
 10290              	.L780:
1702:src/xeq.c     **** 		break;
 10291              		.loc 1 1702 3 is_stmt 1 view .LVU2705
1702:src/xeq.c     **** 		break;
 10292              		.loc 1 1702 8 is_stmt 0 view .LVU2706
 10293 0062 3A46     		mov	r2, r7
 10294 0064 2B46     		mov	r3, r5
 10295 0066 FFF7FEFF 		bl	intSubtract
 10296              	.LVL738:
1702:src/xeq.c     **** 		break;
 10297              		.loc 1 1702 6 view .LVU2707
 10298 006a C6E90001 		strd	r0, [r6]
1703:src/xeq.c     **** 	case 3:
 10299              		.loc 1 1703 3 is_stmt 1 view .LVU2708
1719:src/xeq.c     **** }
 10300              		.loc 1 1719 9 is_stmt 0 view .LVU2709
 10301 006e 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10302              		.loc 1 1720 1 view .LVU2710
 10303 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10304              	.LVL739:
ARM GAS  /tmp/ccBFDvgN.s 			page 326


 10305              	.L779:
1705:src/xeq.c     **** 		break;
 10306              		.loc 1 1705 3 is_stmt 1 view .LVU2711
1705:src/xeq.c     **** 		break;
 10307              		.loc 1 1705 8 is_stmt 0 view .LVU2712
 10308 0074 3A46     		mov	r2, r7
 10309 0076 2B46     		mov	r3, r5
 10310 0078 FFF7FEFF 		bl	intMultiply
 10311              	.LVL740:
1705:src/xeq.c     **** 		break;
 10312              		.loc 1 1705 6 view .LVU2713
 10313 007c C6E90001 		strd	r0, [r6]
1706:src/xeq.c     **** 	case 4:
 10314              		.loc 1 1706 3 is_stmt 1 view .LVU2714
1719:src/xeq.c     **** }
 10315              		.loc 1 1719 9 is_stmt 0 view .LVU2715
 10316 0080 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10317              		.loc 1 1720 1 view .LVU2716
 10318 0082 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10319              	.LVL741:
 10320              	.L778:
1708:src/xeq.c     **** 		break;
 10321              		.loc 1 1708 3 is_stmt 1 view .LVU2717
1708:src/xeq.c     **** 		break;
 10322              		.loc 1 1708 8 is_stmt 0 view .LVU2718
 10323 0086 3A46     		mov	r2, r7
 10324 0088 2B46     		mov	r3, r5
 10325 008a FFF7FEFF 		bl	intDivide
 10326              	.LVL742:
1708:src/xeq.c     **** 		break;
 10327              		.loc 1 1708 6 view .LVU2719
 10328 008e C6E90001 		strd	r0, [r6]
1709:src/xeq.c     **** 	case 5:
 10329              		.loc 1 1709 3 is_stmt 1 view .LVU2720
1719:src/xeq.c     **** }
 10330              		.loc 1 1719 9 is_stmt 0 view .LVU2721
 10331 0092 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10332              		.loc 1 1720 1 view .LVU2722
 10333 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10334              	.LVL743:
 10335              	.L777:
1711:src/xeq.c     **** 		break;
 10336              		.loc 1 1711 3 is_stmt 1 view .LVU2723
1711:src/xeq.c     **** 		break;
 10337              		.loc 1 1711 8 is_stmt 0 view .LVU2724
 10338 0098 3A46     		mov	r2, r7
 10339 009a 2B46     		mov	r3, r5
 10340 009c FFF7FEFF 		bl	intMin
 10341              	.LVL744:
1711:src/xeq.c     **** 		break;
 10342              		.loc 1 1711 6 view .LVU2725
 10343 00a0 C6E90001 		strd	r0, [r6]
1712:src/xeq.c     **** 	case 6:
 10344              		.loc 1 1712 3 is_stmt 1 view .LVU2726
1719:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 327


 10345              		.loc 1 1719 9 is_stmt 0 view .LVU2727
 10346 00a4 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10347              		.loc 1 1720 1 view .LVU2728
 10348 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10349              	.LVL745:
 10350              	.L782:
1719:src/xeq.c     **** }
 10351              		.loc 1 1719 9 view .LVU2729
 10352 00aa 0120     		movs	r0, #1
 10353              	.LVL746:
1719:src/xeq.c     **** }
 10354              		.loc 1 1719 9 view .LVU2730
 10355 00ac CEE7     		b	.L772
 10356              		.cfi_endproc
 10357              	.LFE116:
 10359 00ae 00BF     		.section	.text.incdec,"ax",%progbits
 10360              		.align	1
 10361              		.p2align 2,,3
 10362              		.syntax unified
 10363              		.thumb
 10364              		.thumb_func
 10365              		.fpu fpv4-sp-d16
 10367              	incdec:
 10368              	.LVL747:
 10369              	.LFB193:
3401:src/xeq.c     **** 	if (is_intmode()) {
 10370              		.loc 1 3401 46 is_stmt 1 view -0
 10371              		.cfi_startproc
 10372              		@ args = 0, pretend = 0, frame = 80
 10373              		@ frame_needed = 0, uses_anonymous_args = 0
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10374              		.loc 1 3402 2 view .LVU2732
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10375              		.loc 1 3402 6 is_stmt 0 view .LVU2733
 10376 0000 244B     		ldr	r3, .L797
3401:src/xeq.c     **** 	if (is_intmode()) {
 10377              		.loc 1 3401 46 view .LVU2734
 10378 0002 70B5     		push	{r4, r5, r6, lr}
 10379              		.cfi_def_cfa_offset 16
 10380              		.cfi_offset 4, -16
 10381              		.cfi_offset 5, -12
 10382              		.cfi_offset 6, -8
 10383              		.cfi_offset 14, -4
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10384              		.loc 1 3402 6 view .LVU2735
 10385 0004 1B68     		ldr	r3, [r3]
 10386 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10387              		.loc 1 3402 5 view .LVU2736
 10388 000a DB07     		lsls	r3, r3, #31
3401:src/xeq.c     **** 	if (is_intmode()) {
 10389              		.loc 1 3401 46 view .LVU2737
 10390 000c 94B0     		sub	sp, sp, #80
 10391              		.cfi_def_cfa_offset 96
3401:src/xeq.c     **** 	if (is_intmode()) {
 10392              		.loc 1 3401 46 view .LVU2738
ARM GAS  /tmp/ccBFDvgN.s 			page 328


 10393 000e 0D46     		mov	r5, r1
 10394 0010 0446     		mov	r4, r0
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10395              		.loc 1 3402 5 view .LVU2739
 10396 0012 1ED5     		bpl	.L788
 10397              	.LVL748:
 10398              	.LBB2131:
 10399              	.LBI2131:
3401:src/xeq.c     **** 	if (is_intmode()) {
 10400              		.loc 1 3401 12 is_stmt 1 view .LVU2740
 10401              	.LBB2132:
3403:src/xeq.c     **** 		int xs;
 10402              		.loc 1 3403 3 view .LVU2741
3403:src/xeq.c     **** 		int xs;
 10403              		.loc 1 3403 21 is_stmt 0 view .LVU2742
 10404 0014 FFF7FEFF 		bl	get_reg_n_int
 10405              	.LVL749:
3404:src/xeq.c     **** 		unsigned long long int xv;
 10406              		.loc 1 3404 3 is_stmt 1 view .LVU2743
3405:src/xeq.c     **** 
 10407              		.loc 1 3405 3 view .LVU2744
3407:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10408              		.loc 1 3407 3 view .LVU2745
3408:src/xeq.c     **** 		else
 10409              		.loc 1 3408 8 is_stmt 0 view .LVU2746
 10410 0018 0122     		movs	r2, #1
 10411 001a 0023     		movs	r3, #0
3407:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10412              		.loc 1 3407 6 view .LVU2747
 10413 001c 002D     		cmp	r5, #0
 10414 001e 33D1     		bne	.L795
3410:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10415              		.loc 1 3410 4 is_stmt 1 view .LVU2748
3410:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10416              		.loc 1 3410 8 is_stmt 0 view .LVU2749
 10417 0020 FFF7FEFF 		bl	intSubtract
 10418              	.LVL750:
3410:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10419              		.loc 1 3410 8 view .LVU2750
 10420 0024 0646     		mov	r6, r0
 10421 0026 0D46     		mov	r5, r1
 10422              	.LVL751:
 10423              	.L790:
3411:src/xeq.c     **** 
 10424              		.loc 1 3411 3 is_stmt 1 view .LVU2751
 10425              	.LBB2133:
 10426              	.LBB2134:
1423:src/xeq.c     **** }
 10427              		.loc 1 1423 8 is_stmt 0 view .LVU2752
 10428 0028 2046     		mov	r0, r4
 10429 002a CDE90A65 		strd	r6, r5, [sp, #40]
 10430              	.LVL752:
1423:src/xeq.c     **** }
 10431              		.loc 1 1423 8 view .LVU2753
 10432              	.LBE2134:
 10433              	.LBI2133:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
ARM GAS  /tmp/ccBFDvgN.s 			page 329


 10434              		.loc 1 1422 6 is_stmt 1 view .LVU2754
 10435              	.LBB2135:
1423:src/xeq.c     **** }
 10436              		.loc 1 1423 2 view .LVU2755
1423:src/xeq.c     **** }
 10437              		.loc 1 1423 8 is_stmt 0 view .LVU2756
 10438 002e FFF7FEFF 		bl	get_reg_n
 10439              	.LVL753:
1423:src/xeq.c     **** }
 10440              		.loc 1 1423 2 view .LVU2757
 10441 0032 0AA9     		add	r1, sp, #40
 10442 0034 0822     		movs	r2, #8
 10443 0036 FFF7FEFF 		bl	xcopy
 10444              	.LVL754:
1423:src/xeq.c     **** }
 10445              		.loc 1 1423 2 view .LVU2758
 10446              	.LBE2135:
 10447              	.LBE2133:
3413:src/xeq.c     **** 		return xv != 0;
 10448              		.loc 1 3413 3 is_stmt 1 view .LVU2759
3413:src/xeq.c     **** 		return xv != 0;
 10449              		.loc 1 3413 8 is_stmt 0 view .LVU2760
 10450 003a 0AAA     		add	r2, sp, #40
 10451 003c 3046     		mov	r0, r6
 10452 003e 2946     		mov	r1, r5
 10453 0040 FFF7FEFF 		bl	extract_value
 10454              	.LVL755:
3414:src/xeq.c     **** 	} else {
 10455              		.loc 1 3414 3 is_stmt 1 view .LVU2761
3414:src/xeq.c     **** 	} else {
 10456              		.loc 1 3414 13 is_stmt 0 view .LVU2762
 10457 0044 50EA0103 		orrs	r3, r0, r1
 10458 0048 14BF     		ite	ne
 10459 004a 0120     		movne	r0, #1
 10460              	.LVL756:
3414:src/xeq.c     **** 	} else {
 10461              		.loc 1 3414 13 view .LVU2763
 10462 004c 0020     		moveq	r0, #0
 10463              	.LVL757:
3414:src/xeq.c     **** 	} else {
 10464              		.loc 1 3414 13 view .LVU2764
 10465              	.LBE2132:
 10466              	.LBE2131:
3427:src/xeq.c     **** 
 10467              		.loc 1 3427 1 view .LVU2765
 10468 004e 14B0     		add	sp, sp, #80
 10469              		.cfi_remember_state
 10470              		.cfi_def_cfa_offset 16
 10471              		@ sp needed
 10472 0050 70BD     		pop	{r4, r5, r6, pc}
 10473              	.LVL758:
 10474              	.L788:
 10475              		.cfi_restore_state
 10476              	.LBB2137:
3416:src/xeq.c     **** 
 10477              		.loc 1 3416 3 is_stmt 1 view .LVU2766
3418:src/xeq.c     **** 		if (inc)
ARM GAS  /tmp/ccBFDvgN.s 			page 330


 10478              		.loc 1 3418 3 view .LVU2767
 10479 0052 01A8     		add	r0, sp, #4
 10480              	.LVL759:
3418:src/xeq.c     **** 		if (inc)
 10481              		.loc 1 3418 3 is_stmt 0 view .LVU2768
 10482 0054 2146     		mov	r1, r4
 10483              	.LVL760:
3418:src/xeq.c     **** 		if (inc)
 10484              		.loc 1 3418 3 view .LVU2769
 10485 0056 FFF7FEFF 		bl	getRegister
 10486              	.LVL761:
3419:src/xeq.c     **** 			dn_inc(&x);
 10487              		.loc 1 3419 3 is_stmt 1 view .LVU2770
3420:src/xeq.c     **** 		else
 10488              		.loc 1 3420 4 is_stmt 0 view .LVU2771
 10489 005a 01A8     		add	r0, sp, #4
3419:src/xeq.c     **** 			dn_inc(&x);
 10490              		.loc 1 3419 6 view .LVU2772
 10491 005c 8DB9     		cbnz	r5, .L796
3422:src/xeq.c     **** 		setRegister(arg, &x);
 10492              		.loc 1 3422 4 is_stmt 1 view .LVU2773
 10493 005e FFF7FEFF 		bl	dn_dec
 10494              	.LVL762:
 10495              	.L793:
3423:src/xeq.c     **** 		decNumberTrunc(&y, &x);
 10496              		.loc 1 3423 3 view .LVU2774
 10497 0062 2046     		mov	r0, r4
 10498 0064 01A9     		add	r1, sp, #4
 10499 0066 FFF7FEFF 		bl	setRegister
 10500              	.LVL763:
3424:src/xeq.c     **** 		return ! dn_eq0(&y);
 10501              		.loc 1 3424 3 view .LVU2775
 10502 006a 01A9     		add	r1, sp, #4
 10503 006c 0AA8     		add	r0, sp, #40
 10504 006e FFF7FEFF 		bl	decNumberTrunc
 10505              	.LVL764:
3425:src/xeq.c     **** 	}
 10506              		.loc 1 3425 3 view .LVU2776
3425:src/xeq.c     **** 	}
 10507              		.loc 1 3425 12 is_stmt 0 view .LVU2777
 10508 0072 0AA8     		add	r0, sp, #40
 10509 0074 FFF7FEFF 		bl	dn_eq0
 10510              	.LVL765:
3425:src/xeq.c     **** 	}
 10511              		.loc 1 3425 10 view .LVU2778
 10512 0078 B0FA80F0 		clz	r0, r0
 10513 007c 4009     		lsrs	r0, r0, #5
 10514              	.LBE2137:
3427:src/xeq.c     **** 
 10515              		.loc 1 3427 1 view .LVU2779
 10516 007e 14B0     		add	sp, sp, #80
 10517              		.cfi_remember_state
 10518              		.cfi_def_cfa_offset 16
 10519              		@ sp needed
 10520 0080 70BD     		pop	{r4, r5, r6, pc}
 10521              	.LVL766:
 10522              	.L796:
ARM GAS  /tmp/ccBFDvgN.s 			page 331


 10523              		.cfi_restore_state
 10524              	.LBB2138:
3420:src/xeq.c     **** 		else
 10525              		.loc 1 3420 4 is_stmt 1 view .LVU2780
 10526 0082 FFF7FEFF 		bl	dn_inc
 10527              	.LVL767:
 10528 0086 ECE7     		b	.L793
 10529              	.LVL768:
 10530              	.L795:
3420:src/xeq.c     **** 		else
 10531              		.loc 1 3420 4 is_stmt 0 view .LVU2781
 10532              	.LBE2138:
 10533              	.LBB2139:
 10534              	.LBB2136:
3408:src/xeq.c     **** 		else
 10535              		.loc 1 3408 4 is_stmt 1 view .LVU2782
3408:src/xeq.c     **** 		else
 10536              		.loc 1 3408 8 is_stmt 0 view .LVU2783
 10537 0088 FFF7FEFF 		bl	intAdd
 10538              	.LVL769:
3408:src/xeq.c     **** 		else
 10539              		.loc 1 3408 8 view .LVU2784
 10540 008c 0646     		mov	r6, r0
 10541 008e 0D46     		mov	r5, r1
 10542              	.LVL770:
3408:src/xeq.c     **** 		else
 10543              		.loc 1 3408 8 view .LVU2785
 10544 0090 CAE7     		b	.L790
 10545              	.L798:
 10546 0092 00BF     		.align	2
 10547              	.L797:
 10548 0094 00000000 		.word	main_ram
 10549              	.LBE2136:
 10550              	.LBE2139:
 10551              		.cfi_endproc
 10552              	.LFE193:
 10554              		.section	.text.set_reg_n_int,"ax",%progbits
 10555              		.align	1
 10556              		.p2align 2,,3
 10557              		.global	set_reg_n_int
 10558              		.syntax unified
 10559              		.thumb
 10560              		.thumb_func
 10561              		.fpu fpv4-sp-d16
 10563              	set_reg_n_int:
 10564              	.LVL771:
 10565              	.LFB95:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10566              		.loc 1 1422 49 is_stmt 1 view -0
 10567              		.cfi_startproc
 10568              		@ args = 0, pretend = 0, frame = 8
 10569              		@ frame_needed = 0, uses_anonymous_args = 0
1423:src/xeq.c     **** }
 10570              		.loc 1 1423 2 view .LVU2787
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10571              		.loc 1 1422 49 is_stmt 0 view .LVU2788
 10572 0000 00B5     		push	{lr}
ARM GAS  /tmp/ccBFDvgN.s 			page 332


 10573              		.cfi_def_cfa_offset 4
 10574              		.cfi_offset 14, -4
 10575 0002 83B0     		sub	sp, sp, #12
 10576              		.cfi_def_cfa_offset 16
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10577              		.loc 1 1422 49 view .LVU2789
 10578 0004 CDE90023 		strd	r2, [sp]
1423:src/xeq.c     **** }
 10579              		.loc 1 1423 8 view .LVU2790
 10580 0008 FFF7FEFF 		bl	get_reg_n
 10581              	.LVL772:
1423:src/xeq.c     **** }
 10582              		.loc 1 1423 2 view .LVU2791
 10583 000c 0822     		movs	r2, #8
 10584 000e 6946     		mov	r1, sp
 10585 0010 FFF7FEFF 		bl	xcopy
 10586              	.LVL773:
1424:src/xeq.c     **** 
 10587              		.loc 1 1424 1 view .LVU2792
 10588 0014 03B0     		add	sp, sp, #12
 10589              		.cfi_def_cfa_offset 4
 10590              		@ sp needed
 10591 0016 5DF804FB 		ldr	pc, [sp], #4
 10592              		.cfi_endproc
 10593              	.LFE95:
 10595 001a 00BF     		.section	.text.get_reg_n_int_sgn,"ax",%progbits
 10596              		.align	1
 10597              		.p2align 2,,3
 10598              		.global	get_reg_n_int_sgn
 10599              		.syntax unified
 10600              		.thumb
 10601              		.thumb_func
 10602              		.fpu fpv4-sp-d16
 10604              	get_reg_n_int_sgn:
 10605              	.LVL774:
 10606              	.LFB96:
1428:src/xeq.c     **** 	if (is_intmode()) {
 10607              		.loc 1 1428 63 is_stmt 1 view -0
 10608              		.cfi_startproc
 10609              		@ args = 0, pretend = 0, frame = 40
 10610              		@ frame_needed = 0, uses_anonymous_args = 0
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10611              		.loc 1 1429 2 view .LVU2794
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10612              		.loc 1 1429 6 is_stmt 0 view .LVU2795
 10613 0000 0C4B     		ldr	r3, .L805
1428:src/xeq.c     **** 	if (is_intmode()) {
 10614              		.loc 1 1428 63 view .LVU2796
 10615 0002 10B5     		push	{r4, lr}
 10616              		.cfi_def_cfa_offset 8
 10617              		.cfi_offset 4, -8
 10618              		.cfi_offset 14, -4
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10619              		.loc 1 1429 6 view .LVU2797
 10620 0004 1B68     		ldr	r3, [r3]
 10621 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
ARM GAS  /tmp/ccBFDvgN.s 			page 333


 10622              		.loc 1 1429 5 view .LVU2798
 10623 000a DB07     		lsls	r3, r3, #31
1428:src/xeq.c     **** 	if (is_intmode()) {
 10624              		.loc 1 1428 63 view .LVU2799
 10625 000c 8AB0     		sub	sp, sp, #40
 10626              		.cfi_def_cfa_offset 48
1428:src/xeq.c     **** 	if (is_intmode()) {
 10627              		.loc 1 1428 63 view .LVU2800
 10628 000e 0C46     		mov	r4, r1
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10629              		.loc 1 1429 5 view .LVU2801
 10630 0010 06D5     		bpl	.L802
 10631              	.LVL775:
 10632              	.LBB2144:
 10633              	.LBI2144:
1428:src/xeq.c     **** 	if (is_intmode()) {
 10634              		.loc 1 1428 24 is_stmt 1 view .LVU2802
 10635              	.LBB2145:
1430:src/xeq.c     **** 	} else {
 10636              		.loc 1 1430 3 view .LVU2803
1430:src/xeq.c     **** 	} else {
 10637              		.loc 1 1430 10 is_stmt 0 view .LVU2804
 10638 0012 FFF7FEFF 		bl	get_reg_n_int
 10639              	.LVL776:
1430:src/xeq.c     **** 	} else {
 10640              		.loc 1 1430 10 view .LVU2805
 10641 0016 2246     		mov	r2, r4
 10642 0018 FFF7FEFF 		bl	extract_value
 10643              	.LVL777:
1430:src/xeq.c     **** 	} else {
 10644              		.loc 1 1430 10 view .LVU2806
 10645              	.LBE2145:
 10646              	.LBE2144:
1437:src/xeq.c     **** 
 10647              		.loc 1 1437 1 view .LVU2807
 10648 001c 0AB0     		add	sp, sp, #40
 10649              		.cfi_remember_state
 10650              		.cfi_def_cfa_offset 8
 10651              		@ sp needed
 10652 001e 10BD     		pop	{r4, pc}
 10653              	.LVL778:
 10654              	.L802:
 10655              		.cfi_restore_state
1437:src/xeq.c     **** 
 10656              		.loc 1 1437 1 view .LVU2808
 10657 0020 0146     		mov	r1, r0
 10658              	.LVL779:
 10659              	.LBB2146:
1432:src/xeq.c     **** 
 10660              		.loc 1 1432 3 is_stmt 1 view .LVU2809
1434:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10661              		.loc 1 1434 3 view .LVU2810
 10662 0022 01A8     		add	r0, sp, #4
 10663              	.LVL780:
1434:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10664              		.loc 1 1434 3 is_stmt 0 view .LVU2811
 10665 0024 FFF7FEFF 		bl	getRegister
ARM GAS  /tmp/ccBFDvgN.s 			page 334


 10666              	.LVL781:
1435:src/xeq.c     **** 	}
 10667              		.loc 1 1435 3 is_stmt 1 view .LVU2812
1435:src/xeq.c     **** 	}
 10668              		.loc 1 1435 10 is_stmt 0 view .LVU2813
 10669 0028 2146     		mov	r1, r4
 10670 002a 01A8     		add	r0, sp, #4
 10671 002c FFF7FEFF 		bl	dn_to_ull
 10672              	.LVL782:
 10673              	.LBE2146:
1437:src/xeq.c     **** 
 10674              		.loc 1 1437 1 view .LVU2814
 10675 0030 0AB0     		add	sp, sp, #40
 10676              		.cfi_def_cfa_offset 8
 10677              		@ sp needed
 10678 0032 10BD     		pop	{r4, pc}
 10679              	.LVL783:
 10680              	.L806:
1437:src/xeq.c     **** 
 10681              		.loc 1 1437 1 view .LVU2815
 10682              		.align	2
 10683              	.L805:
 10684 0034 00000000 		.word	main_ram
 10685              		.cfi_endproc
 10686              	.LFE96:
 10688              		.section	.text.get_keycode_from_reg,"ax",%progbits
 10689              		.align	1
 10690              		.p2align 2,,3
 10691              		.syntax unified
 10692              		.thumb
 10693              		.thumb_func
 10694              		.fpu fpv4-sp-d16
 10696              	get_keycode_from_reg:
 10697              	.LVL784:
 10698              	.LFB140:
2061:src/xeq.c     **** 	int sgn;
 10699              		.loc 1 2061 1 is_stmt 1 view -0
 10700              		.cfi_startproc
 10701              		@ args = 0, pretend = 0, frame = 8
 10702              		@ frame_needed = 0, uses_anonymous_args = 0
2062:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
 10703              		.loc 1 2062 2 view .LVU2817
2063:src/xeq.c     **** 	if ( c < 0 )
 10704              		.loc 1 2063 2 view .LVU2818
2061:src/xeq.c     **** 	int sgn;
 10705              		.loc 1 2061 1 is_stmt 0 view .LVU2819
 10706 0000 00B5     		push	{lr}
 10707              		.cfi_def_cfa_offset 4
 10708              		.cfi_offset 14, -4
 10709 0002 83B0     		sub	sp, sp, #12
 10710              		.cfi_def_cfa_offset 16
2063:src/xeq.c     **** 	if ( c < 0 )
 10711              		.loc 1 2063 44 view .LVU2820
 10712 0004 01A9     		add	r1, sp, #4
 10713 0006 FFF7FEFF 		bl	get_reg_n_int_sgn
 10714              	.LVL785:
2063:src/xeq.c     **** 	if ( c < 0 )
ARM GAS  /tmp/ccBFDvgN.s 			page 335


 10715              		.loc 1 2063 16 view .LVU2821
 10716 000a FFF7FEFF 		bl	row_column_to_keycode
 10717              	.LVL786:
2064:src/xeq.c     **** 		report_err(ERR_RANGE);
 10718              		.loc 1 2064 2 is_stmt 1 view .LVU2822
2064:src/xeq.c     **** 		report_err(ERR_RANGE);
 10719              		.loc 1 2064 5 is_stmt 0 view .LVU2823
 10720 000e 0028     		cmp	r0, #0
2064:src/xeq.c     **** 		report_err(ERR_RANGE);
 10721              		.loc 1 2064 5 view .LVU2824
 10722 0010 02DB     		blt	.L810
 10723              	.L807:
2067:src/xeq.c     **** 
 10724              		.loc 1 2067 1 view .LVU2825
 10725 0012 03B0     		add	sp, sp, #12
 10726              		.cfi_remember_state
 10727              		.cfi_def_cfa_offset 4
 10728              		@ sp needed
 10729 0014 5DF804FB 		ldr	pc, [sp], #4
 10730              	.L810:
 10731              		.cfi_restore_state
 10732              	.LBB2153:
 10733              	.LBI2153:
2060:src/xeq.c     **** {
 10734              		.loc 1 2060 12 is_stmt 1 view .LVU2826
 10735              	.LVL787:
 10736              	.LBB2154:
2065:src/xeq.c     **** 	return c;
 10737              		.loc 1 2065 3 view .LVU2827
 10738              	.LBB2155:
 10739              	.LBI2155:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10740              		.loc 1 546 5 view .LVU2828
 10741              	.LBB2156:
 547:src/xeq.c     **** 		Error = e;
 10742              		.loc 1 547 2 view .LVU2829
 547:src/xeq.c     **** 		Error = e;
 10743              		.loc 1 547 12 is_stmt 0 view .LVU2830
 10744 0018 044B     		ldr	r3, .L811
 547:src/xeq.c     **** 		Error = e;
 10745              		.loc 1 547 5 view .LVU2831
 10746 001a 1A68     		ldr	r2, [r3]
 10747 001c 002A     		cmp	r2, #0
 10748 001e F8D1     		bne	.L807
 10749              	.LVL788:
 10750              	.LBB2157:
 10751              	.LBI2157:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10752              		.loc 1 546 5 is_stmt 1 view .LVU2832
 10753              	.LBB2158:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 10754              		.loc 1 548 3 view .LVU2833
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 10755              		.loc 1 548 9 is_stmt 0 view .LVU2834
 10756 0020 0822     		movs	r2, #8
 10757 0022 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccBFDvgN.s 			page 336


 10758              		.loc 1 549 3 is_stmt 1 view .LVU2835
 10759              	.LVL789:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 10760              		.loc 1 549 3 is_stmt 0 view .LVU2836
 10761              	.LBE2158:
 10762              	.LBE2157:
 10763              	.LBE2156:
 10764              	.LBE2155:
 10765              	.LBE2154:
 10766              	.LBE2153:
2066:src/xeq.c     **** }
 10767              		.loc 1 2066 2 is_stmt 1 view .LVU2837
2067:src/xeq.c     **** 
 10768              		.loc 1 2067 1 is_stmt 0 view .LVU2838
 10769 0024 03B0     		add	sp, sp, #12
 10770              		.cfi_def_cfa_offset 4
 10771              		@ sp needed
 10772 0026 5DF804FB 		ldr	pc, [sp], #4
 10773              	.L812:
 10774 002a 00BF     		.align	2
 10775              	.L811:
 10776 002c 00000000 		.word	Error
 10777              		.cfi_endproc
 10778              	.LFE140:
 10780              		.section	.text.getX_int,"ax",%progbits
 10781              		.align	1
 10782              		.p2align 2,,3
 10783              		.global	getX_int
 10784              		.syntax unified
 10785              		.thumb
 10786              		.thumb_func
 10787              		.fpu fpv4-sp-d16
 10789              	getX_int:
 10790              	.LFB97:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10791              		.loc 1 1442 30 is_stmt 1 view -0
 10792              		.cfi_startproc
 10793              		@ args = 0, pretend = 0, frame = 0
 10794              		@ frame_needed = 0, uses_anonymous_args = 0
 10795              		@ link register save eliminated.
1443:src/xeq.c     **** }
 10796              		.loc 1 1443 2 view .LVU2840
1443:src/xeq.c     **** }
 10797              		.loc 1 1443 9 is_stmt 0 view .LVU2841
 10798 0000 6420     		movs	r0, #100
 10799 0002 FFF7FEBF 		b	get_reg_n_int
 10800              	.LVL790:
 10801              		.cfi_endproc
 10802              	.LFE97:
 10804 0006 00BF     		.section	.text.getX_int_sgn,"ax",%progbits
 10805              		.align	1
 10806              		.p2align 2,,3
 10807              		.global	getX_int_sgn
 10808              		.syntax unified
 10809              		.thumb
 10810              		.thumb_func
 10811              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccBFDvgN.s 			page 337


 10813              	getX_int_sgn:
 10814              	.LVL791:
 10815              	.LFB98:
1446:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10816              		.loc 1 1446 47 is_stmt 1 view -0
 10817              		.cfi_startproc
 10818              		@ args = 0, pretend = 0, frame = 0
 10819              		@ frame_needed = 0, uses_anonymous_args = 0
 10820              		@ link register save eliminated.
1447:src/xeq.c     **** }
 10821              		.loc 1 1447 2 view .LVU2843
1446:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10822              		.loc 1 1446 47 is_stmt 0 view .LVU2844
 10823 0000 0146     		mov	r1, r0
1447:src/xeq.c     **** }
 10824              		.loc 1 1447 9 view .LVU2845
 10825 0002 6420     		movs	r0, #100
 10826              	.LVL792:
1447:src/xeq.c     **** }
 10827              		.loc 1 1447 9 view .LVU2846
 10828 0004 FFF7FEBF 		b	get_reg_n_int_sgn
 10829              	.LVL793:
1447:src/xeq.c     **** }
 10830              		.loc 1 1447 9 view .LVU2847
 10831              		.cfi_endproc
 10832              	.LFE98:
 10834              		.section	.text.set_reg_n_int_sgn,"ax",%progbits
 10835              		.align	1
 10836              		.p2align 2,,3
 10837              		.global	set_reg_n_int_sgn
 10838              		.syntax unified
 10839              		.thumb
 10840              		.thumb_func
 10841              		.fpu fpv4-sp-d16
 10843              	set_reg_n_int_sgn:
 10844              	.LVL794:
 10845              	.LFB100:
1467:src/xeq.c     **** 	if (is_intmode()) {
 10846              		.loc 1 1467 72 is_stmt 1 view -0
 10847              		.cfi_startproc
 10848              		@ args = 4, pretend = 0, frame = 40
 10849              		@ frame_needed = 0, uses_anonymous_args = 0
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10850              		.loc 1 1468 2 view .LVU2849
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10851              		.loc 1 1468 6 is_stmt 0 view .LVU2850
 10852 0000 1749     		ldr	r1, .L825
1467:src/xeq.c     **** 	if (is_intmode()) {
 10853              		.loc 1 1467 72 view .LVU2851
 10854 0002 30B5     		push	{r4, r5, lr}
 10855              		.cfi_def_cfa_offset 12
 10856              		.cfi_offset 4, -12
 10857              		.cfi_offset 5, -8
 10858              		.cfi_offset 14, -4
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10859              		.loc 1 1468 6 view .LVU2852
 10860 0004 0968     		ldr	r1, [r1]
ARM GAS  /tmp/ccBFDvgN.s 			page 338


 10861 0006 91F8E857 		ldrb	r5, [r1, #2024]	@ zero_extendqisi2
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10862              		.loc 1 1468 5 view .LVU2853
 10863 000a E907     		lsls	r1, r5, #31
1467:src/xeq.c     **** 	if (is_intmode()) {
 10864              		.loc 1 1467 72 view .LVU2854
 10865 000c 8BB0     		sub	sp, sp, #44
 10866              		.cfi_def_cfa_offset 56
1467:src/xeq.c     **** 	if (is_intmode()) {
 10867              		.loc 1 1467 72 view .LVU2855
 10868 000e 0446     		mov	r4, r0
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10869              		.loc 1 1468 5 view .LVU2856
 10870 0010 11D5     		bpl	.L816
 10871              	.LVL795:
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10872              		.loc 1 1468 5 view .LVU2857
 10873 0012 1046     		mov	r0, r2
 10874              	.LVL796:
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10875              		.loc 1 1468 5 view .LVU2858
 10876 0014 1946     		mov	r1, r3
 10877              	.LVL797:
 10878              	.LBB2165:
 10879              	.LBI2165:
1467:src/xeq.c     **** 	if (is_intmode()) {
 10880              		.loc 1 1467 6 is_stmt 1 view .LVU2859
 10881              	.LBB2166:
1469:src/xeq.c     **** 	} else {
 10882              		.loc 1 1469 3 view .LVU2860
 10883 0016 0E9A     		ldr	r2, [sp, #56]
 10884              	.LVL798:
1469:src/xeq.c     **** 	} else {
 10885              		.loc 1 1469 3 is_stmt 0 view .LVU2861
 10886 0018 FFF7FEFF 		bl	build_value
 10887              	.LVL799:
1469:src/xeq.c     **** 	} else {
 10888              		.loc 1 1469 3 view .LVU2862
 10889 001c 0B46     		mov	r3, r1
 10890 001e 0246     		mov	r2, r0
 10891              	.LBB2167:
 10892              	.LBB2168:
1423:src/xeq.c     **** }
 10893              		.loc 1 1423 8 view .LVU2863
 10894 0020 2046     		mov	r0, r4
 10895 0022 CDE90023 		strd	r2, [sp]
 10896              	.LVL800:
1423:src/xeq.c     **** }
 10897              		.loc 1 1423 8 view .LVU2864
 10898              	.LBE2168:
 10899              	.LBI2167:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10900              		.loc 1 1422 6 is_stmt 1 view .LVU2865
 10901              	.LBB2169:
1423:src/xeq.c     **** }
 10902              		.loc 1 1423 2 view .LVU2866
1423:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 339


 10903              		.loc 1 1423 8 is_stmt 0 view .LVU2867
 10904 0026 FFF7FEFF 		bl	get_reg_n
 10905              	.LVL801:
1423:src/xeq.c     **** }
 10906              		.loc 1 1423 2 view .LVU2868
 10907 002a 0822     		movs	r2, #8
 10908 002c 6946     		mov	r1, sp
 10909 002e FFF7FEFF 		bl	xcopy
 10910              	.LVL802:
1423:src/xeq.c     **** }
 10911              		.loc 1 1423 2 view .LVU2869
 10912              	.LBE2169:
 10913              	.LBE2167:
 10914              	.LBE2166:
 10915              	.LBE2165:
1478:src/xeq.c     **** 
 10916              		.loc 1 1478 1 view .LVU2870
 10917 0032 0BB0     		add	sp, sp, #44
 10918              		.cfi_remember_state
 10919              		.cfi_def_cfa_offset 12
 10920              		@ sp needed
 10921 0034 30BD     		pop	{r4, r5, pc}
 10922              	.LVL803:
 10923              	.L816:
 10924              		.cfi_restore_state
 10925              	.LBB2170:
1471:src/xeq.c     **** 
 10926              		.loc 1 1471 3 is_stmt 1 view .LVU2871
1473:src/xeq.c     **** 		if (sgn)
 10927              		.loc 1 1473 3 view .LVU2872
 10928 0036 6846     		mov	r0, sp
 10929              	.LVL804:
1473:src/xeq.c     **** 		if (sgn)
 10930              		.loc 1 1473 3 is_stmt 0 view .LVU2873
 10931 0038 FFF7FEFF 		bl	ullint_to_dn
 10932              	.LVL805:
1474:src/xeq.c     **** 			dn_minus(&t, &t);
 10933              		.loc 1 1474 3 is_stmt 1 view .LVU2874
1474:src/xeq.c     **** 			dn_minus(&t, &t);
 10934              		.loc 1 1474 6 is_stmt 0 view .LVU2875
 10935 003c 0E9B     		ldr	r3, [sp, #56]
 10936 003e 2BB9     		cbnz	r3, .L823
1476:src/xeq.c     **** 	}
 10937              		.loc 1 1476 3 is_stmt 1 view .LVU2876
 10938 0040 6946     		mov	r1, sp
 10939 0042 2046     		mov	r0, r4
 10940 0044 FFF7FEFF 		bl	setRegister
 10941              	.LVL806:
 10942              	.L824:
1476:src/xeq.c     **** 	}
 10943              		.loc 1 1476 3 is_stmt 0 view .LVU2877
 10944              	.LBE2170:
1478:src/xeq.c     **** 
 10945              		.loc 1 1478 1 view .LVU2878
 10946 0048 0BB0     		add	sp, sp, #44
 10947              		.cfi_remember_state
 10948              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccBFDvgN.s 			page 340


 10949              		@ sp needed
 10950 004a 30BD     		pop	{r4, r5, pc}
 10951              	.LVL807:
 10952              	.L823:
 10953              		.cfi_restore_state
 10954              	.LBB2171:
1475:src/xeq.c     **** 		setRegister(index, &t);
 10955              		.loc 1 1475 4 is_stmt 1 view .LVU2879
 10956 004c 6946     		mov	r1, sp
 10957 004e 6846     		mov	r0, sp
 10958 0050 FFF7FEFF 		bl	dn_minus
 10959              	.LVL808:
1476:src/xeq.c     **** 	}
 10960              		.loc 1 1476 3 view .LVU2880
 10961 0054 6946     		mov	r1, sp
 10962 0056 2046     		mov	r0, r4
 10963 0058 FFF7FEFF 		bl	setRegister
 10964              	.LVL809:
 10965 005c F4E7     		b	.L824
 10966              	.L826:
 10967 005e 00BF     		.align	2
 10968              	.L825:
 10969 0060 00000000 		.word	main_ram
 10970              	.LBE2171:
 10971              		.cfi_endproc
 10972              	.LFE100:
 10974              		.section	.text.op_roundingmode,"ax",%progbits
 10975              		.align	1
 10976              		.p2align 2,,3
 10977              		.global	op_roundingmode
 10978              		.syntax unified
 10979              		.thumb
 10980              		.thumb_func
 10981              		.fpu fpv4-sp-d16
 10983              	op_roundingmode:
 10984              	.LVL810:
 10985              	.LFB34:
 619:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10986              		.loc 1 619 37 view -0
 10987              		.cfi_startproc
 10988              		@ args = 0, pretend = 0, frame = 0
 10989              		@ frame_needed = 0, uses_anonymous_args = 0
 620:src/xeq.c     **** }
 10990              		.loc 1 620 2 view .LVU2882
 10991              	.LBB2172:
 10992              	.LBI2172:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 10993              		.loc 1 1509 6 view .LVU2883
 10994              	.LBB2173:
1510:src/xeq.c     **** }
 10995              		.loc 1 1510 2 view .LVU2884
 10996              	.LBE2173:
 10997              	.LBE2172:
 619:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10998              		.loc 1 619 37 is_stmt 0 view .LVU2885
 10999 0000 00B5     		push	{lr}
 11000              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccBFDvgN.s 			page 341


 11001              		.cfi_offset 14, -4
 620:src/xeq.c     **** }
 11002              		.loc 1 620 21 view .LVU2886
 11003 0002 084B     		ldr	r3, .L829
 11004              	.LVL811:
 620:src/xeq.c     **** }
 11005              		.loc 1 620 21 view .LVU2887
 11006 0004 1B68     		ldr	r3, [r3]
 11007              	.LVL812:
 620:src/xeq.c     **** }
 11008              		.loc 1 620 21 view .LVU2888
 11009 0006 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 619:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 11010              		.loc 1 619 37 view .LVU2889
 11011 000a 83B0     		sub	sp, sp, #12
 11012              		.cfi_def_cfa_offset 16
 11013              	.LBB2176:
 11014              	.LBB2174:
1510:src/xeq.c     **** }
 11015              		.loc 1 1510 2 view .LVU2890
 11016 000c 0021     		movs	r1, #0
 11017              	.LBE2174:
 11018              	.LBE2176:
 620:src/xeq.c     **** }
 11019              		.loc 1 620 21 view .LVU2891
 11020 000e C2F30212 		ubfx	r2, r2, #4, #3
 11021              	.LBB2177:
 11022              	.LBB2175:
1510:src/xeq.c     **** }
 11023              		.loc 1 1510 2 view .LVU2892
 11024 0012 D2B2     		uxtb	r2, r2
 11025 0014 0023     		movs	r3, #0
 11026              	.LVL813:
1510:src/xeq.c     **** }
 11027              		.loc 1 1510 2 view .LVU2893
 11028 0016 0091     		str	r1, [sp]
 11029              	.LVL814:
1510:src/xeq.c     **** }
 11030              		.loc 1 1510 2 view .LVU2894
 11031 0018 6420     		movs	r0, #100
 11032              	.LVL815:
1510:src/xeq.c     **** }
 11033              		.loc 1 1510 2 view .LVU2895
 11034 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 11035              	.LVL816:
1510:src/xeq.c     **** }
 11036              		.loc 1 1510 2 view .LVU2896
 11037              	.LBE2175:
 11038              	.LBE2177:
 621:src/xeq.c     **** 
 11039              		.loc 1 621 1 view .LVU2897
 11040 001e 03B0     		add	sp, sp, #12
 11041              		.cfi_def_cfa_offset 4
 11042              		@ sp needed
 11043 0020 5DF804FB 		ldr	pc, [sp], #4
 11044              	.L830:
 11045              		.align	2
ARM GAS  /tmp/ccBFDvgN.s 			page 342


 11046              	.L829:
 11047 0024 00000000 		.word	main_ram
 11048              		.cfi_endproc
 11049              	.LFE34:
 11051              		.section	.text.register_from_int,"ax",%progbits
 11052              		.align	1
 11053              		.p2align 2,,3
 11054              		.syntax unified
 11055              		.thumb
 11056              		.thumb_func
 11057              		.fpu fpv4-sp-d16
 11059              	register_from_int:
 11060              	.LVL817:
 11061              	.LFB101:
1485:src/xeq.c     **** 	int sgn;
 11062              		.loc 1 1485 69 is_stmt 1 view -0
 11063              		.cfi_startproc
 11064              		@ args = 0, pretend = 0, frame = 8
 11065              		@ frame_needed = 0, uses_anonymous_args = 0
1486:src/xeq.c     **** 	unsigned long long int val;
 11066              		.loc 1 1486 2 view .LVU2899
1487:src/xeq.c     **** 	const int xin = XromFlags.xIN;
 11067              		.loc 1 1487 2 view .LVU2900
1488:src/xeq.c     **** 	
 11068              		.loc 1 1488 2 view .LVU2901
1485:src/xeq.c     **** 	int sgn;
 11069              		.loc 1 1485 69 is_stmt 0 view .LVU2902
 11070 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 11071              		.cfi_def_cfa_offset 28
 11072              		.cfi_offset 4, -28
 11073              		.cfi_offset 5, -24
 11074              		.cfi_offset 6, -20
 11075              		.cfi_offset 7, -16
 11076              		.cfi_offset 8, -12
 11077              		.cfi_offset 9, -8
 11078              		.cfi_offset 14, -4
1488:src/xeq.c     **** 	
 11079              		.loc 1 1488 27 view .LVU2903
 11080 0004 154C     		ldr	r4, .L837
 11081 0006 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
1485:src/xeq.c     **** 	int sgn;
 11082              		.loc 1 1485 69 view .LVU2904
 11083 0008 0546     		mov	r5, r0
 11084 000a 85B0     		sub	sp, sp, #20
 11085              		.cfi_def_cfa_offset 48
1485:src/xeq.c     **** 	int sgn;
 11086              		.loc 1 1485 69 view .LVU2905
 11087 000c 0846     		mov	r0, r1
 11088              	.LVL818:
1488:src/xeq.c     **** 	
 11089              		.loc 1 1488 27 view .LVU2906
 11090 000e DE09     		lsrs	r6, r3, #7
 11091              	.LVL819:
1490:src/xeq.c     **** 		XromFlags.xIN = 0;
 11092              		.loc 1 1490 2 is_stmt 1 view .LVU2907
1490:src/xeq.c     **** 		XromFlags.xIN = 0;
 11093              		.loc 1 1490 5 is_stmt 0 view .LVU2908
ARM GAS  /tmp/ccBFDvgN.s 			page 343


 11094 0010 12B1     		cbz	r2, .L832
1491:src/xeq.c     **** 	UState.intm = 1;
 11095              		.loc 1 1491 3 is_stmt 1 view .LVU2909
1491:src/xeq.c     **** 	UState.intm = 1;
 11096              		.loc 1 1491 17 is_stmt 0 view .LVU2910
 11097 0012 6FF3C713 		bfc	r3, #7, #1
 11098              	.LVL820:
1491:src/xeq.c     **** 	UState.intm = 1;
 11099              		.loc 1 1491 17 view .LVU2911
 11100 0016 6370     		strb	r3, [r4, #1]
 11101              	.LVL821:
 11102              	.L832:
1492:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11103              		.loc 1 1492 2 is_stmt 1 view .LVU2912
1492:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11104              		.loc 1 1492 14 is_stmt 0 view .LVU2913
 11105 0018 114F     		ldr	r7, .L837+4
 11106 001a 3A68     		ldr	r2, [r7]
 11107              	.LVL822:
1492:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11108              		.loc 1 1492 14 view .LVU2914
 11109 001c 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 11110 0020 43F00103 		orr	r3, r3, #1
 11111 0024 82F8E837 		strb	r3, [r2, #2024]
1493:src/xeq.c     **** 
 11112              		.loc 1 1493 2 is_stmt 1 view .LVU2915
1493:src/xeq.c     **** 
 11113              		.loc 1 1493 8 is_stmt 0 view .LVU2916
 11114 0028 03A9     		add	r1, sp, #12
 11115              	.LVL823:
1493:src/xeq.c     **** 
 11116              		.loc 1 1493 8 view .LVU2917
 11117 002a FFF7FEFF 		bl	get_reg_n_int_sgn
 11118              	.LVL824:
1495:src/xeq.c     **** 	UState.intm = 0;
 11119              		.loc 1 1495 16 view .LVU2918
 11120 002e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
1496:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11121              		.loc 1 1496 14 view .LVU2919
 11122 0030 3B68     		ldr	r3, [r7]
1495:src/xeq.c     **** 	UState.intm = 0;
 11123              		.loc 1 1495 16 view .LVU2920
 11124 0032 66F3C712 		bfi	r2, r6, #7, #1
 11125 0036 6270     		strb	r2, [r4, #1]
1493:src/xeq.c     **** 
 11126              		.loc 1 1493 8 view .LVU2921
 11127 0038 8946     		mov	r9, r1
1496:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11128              		.loc 1 1496 14 view .LVU2922
 11129 003a 93F8E817 		ldrb	r1, [r3, #2024]	@ zero_extendqisi2
 11130 003e 6FF30001 		bfc	r1, #0, #1
 11131 0042 83F8E817 		strb	r1, [r3, #2024]
1497:src/xeq.c     **** }
 11132              		.loc 1 1497 2 view .LVU2923
 11133 0046 039B     		ldr	r3, [sp, #12]
 11134 0048 0093     		str	r3, [sp]
1493:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 344


 11135              		.loc 1 1493 8 view .LVU2924
 11136 004a 8046     		mov	r8, r0
 11137              	.LVL825:
1495:src/xeq.c     **** 	UState.intm = 0;
 11138              		.loc 1 1495 2 is_stmt 1 view .LVU2925
1496:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11139              		.loc 1 1496 2 view .LVU2926
1497:src/xeq.c     **** }
 11140              		.loc 1 1497 2 view .LVU2927
 11141 004c 4246     		mov	r2, r8
 11142 004e 4B46     		mov	r3, r9
 11143 0050 2846     		mov	r0, r5
 11144 0052 FFF7FEFF 		bl	set_reg_n_int_sgn
 11145              	.LVL826:
1498:src/xeq.c     **** 
 11146              		.loc 1 1498 1 is_stmt 0 view .LVU2928
 11147 0056 05B0     		add	sp, sp, #20
 11148              		.cfi_def_cfa_offset 28
 11149              		@ sp needed
 11150 0058 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 11151              	.LVL827:
 11152              	.L838:
1498:src/xeq.c     **** 
 11153              		.loc 1 1498 1 view .LVU2929
 11154              		.align	2
 11155              	.L837:
 11156 005c 00000000 		.word	XromParams
 11157 0060 00000000 		.word	main_ram
 11158              		.cfi_endproc
 11159              	.LFE101:
 11161              		.section	.text.int_from_register,"ax",%progbits
 11162              		.align	1
 11163              		.p2align 2,,3
 11164              		.syntax unified
 11165              		.thumb
 11166              		.thumb_func
 11167              		.fpu fpv4-sp-d16
 11169              	int_from_register:
 11170              	.LVL828:
 11171              	.LFB99:
1454:src/xeq.c     **** 	int sgn;
 11172              		.loc 1 1454 48 is_stmt 1 view -0
 11173              		.cfi_startproc
 11174              		@ args = 0, pretend = 0, frame = 8
 11175              		@ frame_needed = 0, uses_anonymous_args = 0
1455:src/xeq.c     **** 	unsigned long long int val;
 11176              		.loc 1 1455 2 view .LVU2931
1456:src/xeq.c     **** 	
 11177              		.loc 1 1456 2 view .LVU2932
1458:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11178              		.loc 1 1458 2 view .LVU2933
1454:src/xeq.c     **** 	int sgn;
 11179              		.loc 1 1454 48 is_stmt 0 view .LVU2934
 11180 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11181              		.cfi_def_cfa_offset 20
 11182              		.cfi_offset 4, -20
 11183              		.cfi_offset 5, -16
ARM GAS  /tmp/ccBFDvgN.s 			page 345


 11184              		.cfi_offset 6, -12
 11185              		.cfi_offset 7, -8
 11186              		.cfi_offset 14, -4
1458:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11187              		.loc 1 1458 14 view .LVU2935
 11188 0002 104D     		ldr	r5, .L841
 11189 0004 2B68     		ldr	r3, [r5]
 11190 0006 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1454:src/xeq.c     **** 	int sgn;
 11191              		.loc 1 1454 48 view .LVU2936
 11192 000a 85B0     		sub	sp, sp, #20
 11193              		.cfi_def_cfa_offset 40
1458:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11194              		.loc 1 1458 14 view .LVU2937
 11195 000c 6FF30002 		bfc	r2, #0, #1
1454:src/xeq.c     **** 	int sgn;
 11196              		.loc 1 1454 48 view .LVU2938
 11197 0010 0446     		mov	r4, r0
1458:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11198              		.loc 1 1458 14 view .LVU2939
 11199 0012 83F8E827 		strb	r2, [r3, #2024]
1459:src/xeq.c     **** 
 11200              		.loc 1 1459 2 is_stmt 1 view .LVU2940
1459:src/xeq.c     **** 
 11201              		.loc 1 1459 8 is_stmt 0 view .LVU2941
 11202 0016 0846     		mov	r0, r1
 11203              	.LVL829:
1459:src/xeq.c     **** 
 11204              		.loc 1 1459 8 view .LVU2942
 11205 0018 03A9     		add	r1, sp, #12
 11206              	.LVL830:
1459:src/xeq.c     **** 
 11207              		.loc 1 1459 8 view .LVU2943
 11208 001a FFF7FEFF 		bl	get_reg_n_int_sgn
 11209              	.LVL831:
1459:src/xeq.c     **** 
 11210              		.loc 1 1459 8 view .LVU2944
 11211 001e 0F46     		mov	r7, r1
1461:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11212              		.loc 1 1461 14 view .LVU2945
 11213 0020 2968     		ldr	r1, [r5]
 11214 0022 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
 11215 0026 43F00103 		orr	r3, r3, #1
 11216 002a 81F8E837 		strb	r3, [r1, #2024]
1462:src/xeq.c     **** }
 11217              		.loc 1 1462 2 view .LVU2946
 11218 002e 039B     		ldr	r3, [sp, #12]
 11219 0030 0093     		str	r3, [sp]
1459:src/xeq.c     **** 
 11220              		.loc 1 1459 8 view .LVU2947
 11221 0032 0646     		mov	r6, r0
 11222              	.LVL832:
1461:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11223              		.loc 1 1461 2 is_stmt 1 view .LVU2948
1462:src/xeq.c     **** }
 11224              		.loc 1 1462 2 view .LVU2949
 11225 0034 3246     		mov	r2, r6
ARM GAS  /tmp/ccBFDvgN.s 			page 346


 11226 0036 2046     		mov	r0, r4
 11227 0038 3B46     		mov	r3, r7
 11228 003a FFF7FEFF 		bl	set_reg_n_int_sgn
 11229              	.LVL833:
1463:src/xeq.c     **** 
 11230              		.loc 1 1463 1 is_stmt 0 view .LVU2950
 11231 003e 05B0     		add	sp, sp, #20
 11232              		.cfi_def_cfa_offset 20
 11233              		@ sp needed
 11234 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 11235              	.LVL834:
 11236              	.L842:
1463:src/xeq.c     **** 
 11237              		.loc 1 1463 1 view .LVU2951
 11238 0042 00BF     		.align	2
 11239              	.L841:
 11240 0044 00000000 		.word	main_ram
 11241              		.cfi_endproc
 11242              	.LFE99:
 11244              		.section	.text.switch_to_int,"ax",%progbits
 11245              		.align	1
 11246              		.p2align 2,,3
 11247              		.syntax unified
 11248              		.thumb
 11249              		.thumb_func
 11250              		.fpu fpv4-sp-d16
 11252              	switch_to_int:
 11253              	.LFB208:
3738:src/xeq.c     **** 	int i;
 11254              		.loc 1 3738 33 is_stmt 1 view -0
 11255              		.cfi_startproc
 11256              		@ args = 0, pretend = 0, frame = 40
 11257              		@ frame_needed = 0, uses_anonymous_args = 0
3739:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
 11258              		.loc 1 3739 2 view .LVU2953
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11259              		.loc 1 3740 2 view .LVU2954
3738:src/xeq.c     **** 	int i;
 11260              		.loc 1 3738 33 is_stmt 0 view .LVU2955
 11261 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 11262              		.cfi_def_cfa_offset 24
 11263              		.cfi_offset 4, -24
 11264              		.cfi_offset 5, -20
 11265              		.cfi_offset 6, -16
 11266              		.cfi_offset 7, -12
 11267              		.cfi_offset 8, -8
 11268              		.cfi_offset 14, -4
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11269              		.loc 1 3740 26 view .LVU2956
 11270 0004 DFF87480 		ldr	r8, .L851+4
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11271              		.loc 1 3740 25 view .LVU2957
 11272 0008 1B49     		ldr	r1, .L851
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11273              		.loc 1 3740 26 view .LVU2958
 11274 000a D8F80020 		ldr	r2, [r8]
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
ARM GAS  /tmp/ccBFDvgN.s 			page 347


 11275              		.loc 1 3740 32 view .LVU2959
 11276 000e 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 11277              	.LBB2178:
 11278              	.LBB2179:
1119:src/xeq.c     **** }
 11279              		.loc 1 1119 24 view .LVU2960
 11280 0012 B2F8E827 		ldrh	r2, [r2, #2024]
 11281              	.LBE2179:
 11282              	.LBE2178:
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11283              		.loc 1 3740 32 view .LVU2961
 11284 0016 C3F3C003 		ubfx	r3, r3, #3, #1
 11285              	.LBB2183:
 11286              	.LBB2180:
1119:src/xeq.c     **** }
 11287              		.loc 1 1119 24 view .LVU2962
 11288 001a 44F20106 		movw	r6, #16385
 11289              	.LBE2180:
 11290              	.LBE2183:
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11291              		.loc 1 3740 6 view .LVU2963
 11292 001e 31F81350 		ldrh	r5, [r1, r3, lsl #1]
 11293              	.LVL835:
3741:src/xeq.c     **** 
 11294              		.loc 1 3741 2 is_stmt 1 view .LVU2964
 11295              	.LBB2184:
 11296              	.LBI2178:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11297              		.loc 1 1118 5 view .LVU2965
 11298              	.LBB2181:
1119:src/xeq.c     **** }
 11299              		.loc 1 1119 2 view .LVU2966
 11300              	.LBE2181:
 11301              	.LBE2184:
3738:src/xeq.c     **** 	int i;
 11302              		.loc 1 3738 33 is_stmt 0 view .LVU2967
 11303 0022 8AB0     		sub	sp, sp, #40
 11304              		.cfi_def_cfa_offset 64
 11305              	.LBB2185:
 11306              	.LBB2182:
1119:src/xeq.c     **** }
 11307              		.loc 1 1119 24 view .LVU2968
 11308 0024 1640     		ands	r6, r6, r2
 11309              	.LVL836:
1119:src/xeq.c     **** }
 11310              		.loc 1 1119 24 view .LVU2969
 11311              	.LBE2182:
 11312              	.LBE2185:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11313              		.loc 1 3743 2 is_stmt 1 view .LVU2970
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11314              		.loc 1 3743 21 view .LVU2971
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11315              		.loc 1 3743 9 is_stmt 0 view .LVU2972
 11316 0026 6F24     		movs	r4, #111
 11317 0028 07E0     		b	.L846
 11318              	.LVL837:
ARM GAS  /tmp/ccBFDvgN.s 			page 348


 11319              	.L844:
3748:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11320              		.loc 1 3748 11 view .LVU2973
 11321 002a B6F5804F 		cmp	r6, #16384
 11322 002e 12D0     		beq	.L849
 11323              	.L845:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11324              		.loc 1 3743 36 is_stmt 1 discriminator 2 view .LVU2974
 11325 0030 013C     		subs	r4, r4, #1
 11326              	.LVL838:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11327              		.loc 1 3743 2 is_stmt 0 discriminator 2 view .LVU2975
 11328 0032 632C     		cmp	r4, #99
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11329              		.loc 1 3743 46 discriminator 2 view .LVU2976
 11330 0034 4FEA4505 		lsl	r5, r5, #1
 11331              	.LVL839:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11332              		.loc 1 3743 21 is_stmt 1 discriminator 2 view .LVU2977
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11333              		.loc 1 3743 2 is_stmt 0 discriminator 2 view .LVU2978
 11334 0038 0AD0     		beq	.L850
 11335              	.LVL840:
 11336              	.L846:
3744:src/xeq.c     **** 			// register belongs to stack
 11337              		.loc 1 3744 3 is_stmt 1 view .LVU2979
3748:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11338              		.loc 1 3748 8 view .LVU2980
3744:src/xeq.c     **** 			// register belongs to stack
 11339              		.loc 1 3744 6 is_stmt 0 view .LVU2981
 11340 003a 2B05     		lsls	r3, r5, #20
 11341 003c F5D5     		bpl	.L844
3746:src/xeq.c     **** 		}
 11342              		.loc 1 3746 4 is_stmt 1 view .LVU2982
 11343 003e 2146     		mov	r1, r4
 11344 0040 2046     		mov	r0, r4
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11345              		.loc 1 3743 36 is_stmt 0 view .LVU2983
 11346 0042 013C     		subs	r4, r4, #1
 11347              	.LVL841:
3746:src/xeq.c     **** 		}
 11348              		.loc 1 3746 4 view .LVU2984
 11349 0044 FFF7FEFF 		bl	int_from_register
 11350              	.LVL842:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11351              		.loc 1 3743 36 is_stmt 1 view .LVU2985
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11352              		.loc 1 3743 2 is_stmt 0 view .LVU2986
 11353 0048 632C     		cmp	r4, #99
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11354              		.loc 1 3743 46 view .LVU2987
 11355 004a 4FEA4505 		lsl	r5, r5, #1
 11356              	.LVL843:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11357              		.loc 1 3743 21 is_stmt 1 view .LVU2988
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11358              		.loc 1 3743 2 is_stmt 0 view .LVU2989
ARM GAS  /tmp/ccBFDvgN.s 			page 349


 11359 004e F4D1     		bne	.L846
 11360              	.L850:
3753:src/xeq.c     **** 
 11361              		.loc 1 3753 1 view .LVU2990
 11362 0050 0AB0     		add	sp, sp, #40
 11363              		.cfi_remember_state
 11364              		.cfi_def_cfa_offset 24
 11365              		@ sp needed
 11366 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11367              	.LVL844:
 11368              	.L849:
 11369              		.cfi_restore_state
3750:src/xeq.c     **** 		}
 11370              		.loc 1 3750 4 is_stmt 1 view .LVU2991
3750:src/xeq.c     **** 		}
 11371              		.loc 1 3750 26 is_stmt 0 view .LVU2992
 11372 0056 D8F80030 		ldr	r3, [r8]
3750:src/xeq.c     **** 		}
 11373              		.loc 1 3750 38 view .LVU2993
 11374 005a 2046     		mov	r0, r4
3750:src/xeq.c     **** 		}
 11375              		.loc 1 3750 26 view .LVU2994
 11376 005c 03F22C43 		addw	r3, r3, #1068
3750:src/xeq.c     **** 		}
 11377              		.loc 1 3750 4 view .LVU2995
 11378 0060 03EBC407 		add	r7, r3, r4, lsl #3
3750:src/xeq.c     **** 		}
 11379              		.loc 1 3750 38 view .LVU2996
 11380 0064 FFF7FEFF 		bl	get_reg_n
 11381              	.LVL845:
 11382              	.LBB2186:
 11383              	.LBI2186:
 648:src/xeq.c     **** 	decNumber temp;
 11384              		.loc 1 648 6 is_stmt 1 view .LVU2997
 11385              	.LBB2187:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 11386              		.loc 1 649 2 view .LVU2998
 650:src/xeq.c     **** }
 11387              		.loc 1 650 2 view .LVU2999
 650:src/xeq.c     **** }
 11388              		.loc 1 650 24 is_stmt 0 view .LVU3000
 11389 0068 01A9     		add	r1, sp, #4
 11390 006a FFF7FEFF 		bl	decimal128ToNumber
 11391              	.LVL846:
 650:src/xeq.c     **** }
 11392              		.loc 1 650 24 view .LVU3001
 11393 006e 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 11394              		.loc 1 650 2 view .LVU3002
 11395 0070 3846     		mov	r0, r7
 11396 0072 FFF7FEFF 		bl	packed_from_number
 11397              	.LVL847:
 651:src/xeq.c     **** 
 11398              		.loc 1 651 1 view .LVU3003
 11399 0076 DBE7     		b	.L845
 11400              	.L852:
 11401              		.align	2
ARM GAS  /tmp/ccBFDvgN.s 			page 350


 11402              	.L851:
 11403 0078 00000000 		.word	.LANCHOR3
 11404 007c 00000000 		.word	main_ram
 11405              	.LBE2187:
 11406              	.LBE2186:
 11407              		.cfi_endproc
 11408              	.LFE208:
 11410              		.section	.text.process_cmdline.part.0,"ax",%progbits
 11411              		.align	1
 11412              		.p2align 2,,3
 11413              		.syntax unified
 11414              		.thumb
 11415              		.thumb_func
 11416              		.fpu fpv4-sp-d16
 11418              	process_cmdline.part.0:
 11419              	.LFB290:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 11420              		.loc 1 1226 6 is_stmt 1 view -0
 11421              		.cfi_startproc
 11422              		@ args = 0, pretend = 0, frame = 168
 11423              		@ frame_needed = 0, uses_anonymous_args = 0
 11424              	.LBB2210:
1230:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 11425              		.loc 1 1230 3 view .LVU3005
 11426              	.LBE2210:
1221:src/xeq.c     **** }
 11427              		.loc 1 1221 2 view .LVU3006
 11428              	.LVL848:
 11429              	.LBB2254:
1231:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11430              		.loc 1 1231 3 view .LVU3007
 11431              	.LBE2254:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 11432              		.loc 1 1226 6 is_stmt 0 view .LVU3008
 11433 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 11434              		.cfi_def_cfa_offset 32
 11435              		.cfi_offset 4, -32
 11436              		.cfi_offset 5, -28
 11437              		.cfi_offset 6, -24
 11438              		.cfi_offset 7, -20
 11439              		.cfi_offset 8, -16
 11440              		.cfi_offset 9, -12
 11441              		.cfi_offset 10, -8
 11442              		.cfi_offset 14, -4
 11443              	.LBB2255:
1231:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11444              		.loc 1 1231 35 view .LVU3009
 11445 0004 8D4C     		ldr	r4, .L892
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11446              		.loc 1 1241 7 view .LVU3010
 11447 0006 DFF84482 		ldr	r8, .L892+16
1231:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11448              		.loc 1 1231 22 view .LVU3011
 11449 000a A57F     		ldrb	r5, [r4, #30]	@ zero_extendqisi2
 11450              	.LVL849:
1233:src/xeq.c     **** #else
 11451              		.loc 1 1233 3 is_stmt 1 view .LVU3012
ARM GAS  /tmp/ccBFDvgN.s 			page 351


1238:src/xeq.c     **** 
 11452              		.loc 1 1238 3 view .LVU3013
 11453              	.LBE2255:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 11454              		.loc 1 1226 6 is_stmt 0 view .LVU3014
 11455 000c ACB0     		sub	sp, sp, #176
 11456              		.cfi_def_cfa_offset 208
 11457              	.LBB2256:
1238:src/xeq.c     **** 
 11458              		.loc 1 1238 3 view .LVU3015
 11459 000e 04F12001 		add	r1, r4, #32
 11460 0012 1422     		movs	r2, #20
 11461 0014 02A8     		add	r0, sp, #8
 11462 0016 FFF7FEFF 		bl	xcopy
 11463              	.LVL850:
1240:src/xeq.c     **** 		if (!is_intmode()) {
 11464              		.loc 1 1240 3 is_stmt 1 view .LVU3016
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11465              		.loc 1 1241 7 is_stmt 0 view .LVU3017
 11466 001a D8F80020 		ldr	r2, [r8]
1240:src/xeq.c     **** 		if (!is_intmode()) {
 11467              		.loc 1 1240 11 view .LVU3018
 11468 001e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11469              		.loc 1 1241 7 view .LVU3019
 11470 0020 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1240:src/xeq.c     **** 		if (!is_intmode()) {
 11471              		.loc 1 1240 26 view .LVU3020
 11472 0024 2CA9     		add	r1, sp, #176
 11473 0026 1944     		add	r1, r1, r3
 11474 0028 0020     		movs	r0, #0
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11475              		.loc 1 1241 6 view .LVU3021
 11476 002a 12F00102 		ands	r2, r2, #1
1240:src/xeq.c     **** 		if (!is_intmode()) {
 11477              		.loc 1 1240 26 view .LVU3022
 11478 002e 01F8A80C 		strb	r0, [r1, #-168]
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11479              		.loc 1 1241 3 is_stmt 1 view .LVU3023
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11480              		.loc 1 1241 6 is_stmt 0 view .LVU3024
 11481 0032 16D1     		bne	.L855
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11482              		.loc 1 1243 4 is_stmt 1 view .LVU3025
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11483              		.loc 1 1243 15 is_stmt 0 view .LVU3026
 11484 0034 2CA9     		add	r1, sp, #176
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11485              		.loc 1 1243 29 view .LVU3027
 11486 0036 013B     		subs	r3, r3, #1
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11487              		.loc 1 1243 15 view .LVU3028
 11488 0038 0B44     		add	r3, r3, r1
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11489              		.loc 1 1243 40 view .LVU3029
 11490 003a 13F8A81C 		ldrb	r1, [r3, #-168]	@ zero_extendqisi2
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
ARM GAS  /tmp/ccBFDvgN.s 			page 352


 11491              		.loc 1 1243 7 view .LVU3030
 11492 003e 4439     		subs	r1, r1, #68
 11493 0040 0129     		cmp	r1, #1
 11494 0042 40F28B80 		bls	.L883
1245:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11495              		.loc 1 1245 9 is_stmt 1 view .LVU3031
1245:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11496              		.loc 1 1245 21 is_stmt 0 view .LVU3032
 11497 0046 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1245:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11498              		.loc 1 1245 20 view .LVU3033
 11499 0048 2CAB     		add	r3, sp, #176
 11500 004a 1344     		add	r3, r3, r2
1245:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11501              		.loc 1 1245 12 view .LVU3034
 11502 004c 13F8A83C 		ldrb	r3, [r3, #-168]	@ zero_extendqisi2
 11503 0050 442B     		cmp	r3, #68
 11504 0052 00F0D080 		beq	.L884
 11505              	.L857:
1256:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11506              		.loc 1 1256 4 is_stmt 1 view .LVU3035
1256:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11507              		.loc 1 1256 7 is_stmt 0 view .LVU3036
 11508 0056 002A     		cmp	r2, #0
 11509 0058 40F08680 		bne	.L858
 11510              	.L889:
1261:src/xeq.c     **** #endif
 11511              		.loc 1 1261 8 view .LVU3037
 11512 005c 012D     		cmp	r5, #1
 11513 005e 00F08380 		beq	.L858
 11514              	.L855:
1266:src/xeq.c     **** 		lift_if_enabled();
 11515              		.loc 1 1266 3 is_stmt 1 view .LVU3038
 11516              	.LBB2211:
 11517              	.LBB2212:
 11518              	.LBB2213:
 11519              	.LBB2214:
 744:src/xeq.c     **** }
 11520              		.loc 1 744 15 is_stmt 0 view .LVU3039
 11521 0062 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11522              	.LBE2214:
 11523              	.LBE2213:
 11524              	.LBE2212:
 11525              	.LBE2211:
1266:src/xeq.c     **** 		lift_if_enabled();
 11526              		.loc 1 1266 17 view .LVU3040
 11527 0064 0022     		movs	r2, #0
 11528              	.LBB2226:
 11529              	.LBB2221:
 748:src/xeq.c     **** 		lift();
 11530              		.loc 1 748 5 view .LVU3041
 11531 0066 5B06     		lsls	r3, r3, #25
 11532              	.LBE2221:
 11533              	.LBE2226:
1266:src/xeq.c     **** 		lift_if_enabled();
 11534              		.loc 1 1266 17 view .LVU3042
 11535 0068 2277     		strb	r2, [r4, #28]
ARM GAS  /tmp/ccBFDvgN.s 			page 353


1267:src/xeq.c     **** 		set_lift();
 11536              		.loc 1 1267 3 is_stmt 1 view .LVU3043
 11537              	.LBB2227:
 11538              	.LBI2211:
 747:src/xeq.c     **** 	if (get_lift())
 11539              		.loc 1 747 6 view .LVU3044
 11540              	.LBB2222:
 748:src/xeq.c     **** 		lift();
 11541              		.loc 1 748 2 view .LVU3045
 11542              	.LBB2218:
 11543              	.LBI2213:
 743:src/xeq.c     **** 	return State2.state_lift;
 11544              		.loc 1 743 12 view .LVU3046
 11545              	.LBB2215:
 744:src/xeq.c     **** }
 11546              		.loc 1 744 2 view .LVU3047
 11547              	.LBE2215:
 11548              	.LBE2218:
 748:src/xeq.c     **** 		lift();
 11549              		.loc 1 748 5 is_stmt 0 view .LVU3048
 11550 006a 00F18B80 		bmi	.L885
 11551              	.L860:
 11552              	.LBE2222:
 11553              	.LBE2227:
1268:src/xeq.c     **** 		CmdLineDot = 0;
 11554              		.loc 1 1268 3 is_stmt 1 view .LVU3049
 11555              	.LBB2228:
 11556              	.LBI2228:
 767:src/xeq.c     ****     State2.state_lift = 1;
 11557              		.loc 1 767 6 view .LVU3050
 11558              	.LBB2229:
 768:src/xeq.c     **** }
 11559              		.loc 1 768 5 view .LVU3051
 768:src/xeq.c     **** }
 11560              		.loc 1 768 23 is_stmt 0 view .LVU3052
 11561 006e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11562              	.LBE2229:
 11563              	.LBE2228:
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11564              		.loc 1 1271 7 view .LVU3053
 11565 0070 D8F80010 		ldr	r1, [r8]
 11566              	.LBB2231:
 11567              	.LBB2230:
 768:src/xeq.c     **** }
 11568              		.loc 1 768 23 view .LVU3054
 11569 0074 43F04003 		orr	r3, r3, #64
 11570 0078 E375     		strb	r3, [r4, #23]
 11571              	.LBE2230:
 11572              	.LBE2231:
1269:src/xeq.c     **** 		CmdLineEex = 0;
 11573              		.loc 1 1269 3 is_stmt 1 view .LVU3055
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11574              		.loc 1 1271 7 is_stmt 0 view .LVU3056
 11575 007a 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
1269:src/xeq.c     **** 		CmdLineEex = 0;
 11576              		.loc 1 1269 14 view .LVU3057
 11577 007e 0022     		movs	r2, #0
ARM GAS  /tmp/ccBFDvgN.s 			page 354


1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11578              		.loc 1 1271 6 view .LVU3058
 11579 0080 13F00103 		ands	r3, r3, #1
1269:src/xeq.c     **** 		CmdLineEex = 0;
 11580              		.loc 1 1269 14 view .LVU3059
 11581 0084 A277     		strb	r2, [r4, #30]
1270:src/xeq.c     **** 		if (is_intmode()) {
 11582              		.loc 1 1270 3 is_stmt 1 view .LVU3060
1270:src/xeq.c     **** 		if (is_intmode()) {
 11583              		.loc 1 1270 14 is_stmt 0 view .LVU3061
 11584 0086 6277     		strb	r2, [r4, #29]
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11585              		.loc 1 1271 3 is_stmt 1 view .LVU3062
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11586              		.loc 1 1271 6 is_stmt 0 view .LVU3063
 11587 0088 7FD1     		bne	.L886
1275:src/xeq.c     **** 			char *d0, *d1, *d2;
 11588              		.loc 1 1275 10 is_stmt 1 view .LVU3064
1275:src/xeq.c     **** 			char *d0, *d1, *d2;
 11589              		.loc 1 1275 13 is_stmt 0 view .LVU3065
 11590 008a 022D     		cmp	r5, #2
 11591 008c 4CD1     		bne	.L867
 11592              	.LBB2232:
1276:src/xeq.c     **** 			int neg;
 11593              		.loc 1 1276 4 is_stmt 1 view .LVU3066
1277:src/xeq.c     **** 
 11594              		.loc 1 1277 4 view .LVU3067
1279:src/xeq.c     **** 				return;
 11595              		.loc 1 1279 4 view .LVU3068
1282:src/xeq.c     **** #endif
 11596              		.loc 1 1282 4 view .LVU3069
1282:src/xeq.c     **** #endif
 11597              		.loc 1 1282 17 is_stmt 0 view .LVU3070
 11598 008e 91F8E627 		ldrb	r2, [r1, #2022]	@ zero_extendqisi2
 11599 0092 42F02002 		orr	r2, r2, #32
 11600 0096 81F8E627 		strb	r2, [r1, #2022]
1284:src/xeq.c     **** 				neg = 1;
 11601              		.loc 1 1284 4 is_stmt 1 view .LVU3071
1284:src/xeq.c     **** 				neg = 1;
 11602              		.loc 1 1284 7 is_stmt 0 view .LVU3072
 11603 009a 9DF80820 		ldrb	r2, [sp, #8]	@ zero_extendqisi2
 11604 009e 2D2A     		cmp	r2, #45
1289:src/xeq.c     **** 			}
 11605              		.loc 1 1289 8 view .LVU3073
 11606 00a0 14BF     		ite	ne
 11607 00a2 02AD     		addne	r5, sp, #8
 11608              	.LVL851:
1286:src/xeq.c     **** 			} else {
 11609              		.loc 1 1286 8 view .LVU3074
 11610 00a4 0DF10905 		addeq	r5, sp, #9
1291:src/xeq.c     **** 			*d1++ = '\0';
 11611              		.loc 1 1291 9 view .LVU3075
 11612 00a8 4FF02E01 		mov	r1, #46
 11613 00ac 2846     		mov	r0, r5
1288:src/xeq.c     **** 				d0 = cmdline;
 11614              		.loc 1 1288 9 view .LVU3076
 11615 00ae 14BF     		ite	ne
ARM GAS  /tmp/ccBFDvgN.s 			page 355


 11616 00b0 1C46     		movne	r4, r3
1285:src/xeq.c     **** 				d0 = cmdline+1;
 11617              		.loc 1 1285 9 view .LVU3077
 11618 00b2 0124     		moveq	r4, #1
 11619              	.LVL852:
1291:src/xeq.c     **** 			*d1++ = '\0';
 11620              		.loc 1 1291 4 is_stmt 1 view .LVU3078
1291:src/xeq.c     **** 			*d1++ = '\0';
 11621              		.loc 1 1291 9 is_stmt 0 view .LVU3079
 11622 00b4 FFF7FEFF 		bl	find_char
 11623              	.LVL853:
1292:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11624              		.loc 1 1292 4 is_stmt 1 view .LVU3080
1292:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11625              		.loc 1 1292 10 is_stmt 0 view .LVU3081
 11626 00b8 8146     		mov	r9, r0
 11627 00ba 4FF0000A 		mov	r10, #0
1292:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11628              		.loc 1 1292 7 view .LVU3082
 11629 00be 461C     		adds	r6, r0, #1
 11630              	.LVL854:
1292:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11631              		.loc 1 1292 10 view .LVU3083
 11632 00c0 09F802AB 		strb	r10, [r9], #2
1293:src/xeq.c     **** 			*d2++ = '\0';
 11633              		.loc 1 1293 4 is_stmt 1 view .LVU3084
1293:src/xeq.c     **** 			*d2++ = '\0';
 11634              		.loc 1 1293 9 is_stmt 0 view .LVU3085
 11635 00c4 2E21     		movs	r1, #46
 11636 00c6 3046     		mov	r0, r6
 11637 00c8 FFF7FEFF 		bl	find_char
 11638              	.LVL855:
1294:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11639              		.loc 1 1294 4 is_stmt 1 view .LVU3086
1294:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11640              		.loc 1 1294 7 is_stmt 0 view .LVU3087
 11641 00cc 0746     		mov	r7, r0
 11642              	.LVL856:
1295:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11643              		.loc 1 1295 4 view .LVU3088
 11644 00ce 5C4A     		ldr	r2, .L892+4
1294:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11645              		.loc 1 1294 10 view .LVU3089
 11646 00d0 07F801AB 		strb	r10, [r7], #1
 11647              	.LVL857:
1295:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11648              		.loc 1 1295 4 is_stmt 1 view .LVU3090
 11649 00d4 11A8     		add	r0, sp, #68
 11650 00d6 3946     		mov	r1, r7
 11651 00d8 FFF7FEFF 		bl	decNumberFromString
 11652              	.LVL858:
1296:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11653              		.loc 1 1296 4 view .LVU3091
 11654 00dc 2946     		mov	r1, r5
 11655 00de 584A     		ldr	r2, .L892+4
 11656 00e0 1AA8     		add	r0, sp, #104
 11657 00e2 FFF7FEFF 		bl	decNumberFromString
ARM GAS  /tmp/ccBFDvgN.s 			page 356


 11658              	.LVL859:
1298:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11659              		.loc 1 1298 4 view .LVU3092
1298:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11660              		.loc 1 1298 7 is_stmt 0 view .LVU3093
 11661 00e6 4F45     		cmp	r7, r9
1299:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11662              		.loc 1 1299 5 view .LVU3094
 11663 00e8 08AD     		add	r5, sp, #32
 11664              	.LVL860:
1298:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11665              		.loc 1 1298 7 view .LVU3095
 11666 00ea 00F09780 		beq	.L887
1308:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11667              		.loc 1 1308 5 is_stmt 1 view .LVU3096
 11668 00ee 544A     		ldr	r2, .L892+4
 11669 00f0 3146     		mov	r1, r6
 11670 00f2 2846     		mov	r0, r5
 11671 00f4 FFF7FEFF 		bl	decNumberFromString
 11672              	.LVL861:
1310:src/xeq.c     **** #endif
 11673              		.loc 1 1310 5 view .LVU3097
1310:src/xeq.c     **** #endif
 11674              		.loc 1 1310 25 is_stmt 0 view .LVU3098
 11675 00f8 D8F80030 		ldr	r3, [r8]
 11676 00fc 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11677 0100 6AF30412 		bfi	r2, r10, #4, #1
 11678 0104 83F8E627 		strb	r2, [r3, #2022]
 11679              	.L870:
1313:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
 11680              		.loc 1 1313 4 is_stmt 1 view .LVU3099
 11681 0108 11AA     		add	r2, sp, #68
 11682 010a 2946     		mov	r1, r5
 11683 010c 23A8     		add	r0, sp, #140
 11684 010e FFF7FEFF 		bl	dn_divide
 11685              	.LVL862:
1315:src/xeq.c     **** #endif
 11686              		.loc 1 1315 4 view .LVU3100
1315:src/xeq.c     **** #endif
 11687              		.loc 1 1315 7 is_stmt 0 view .LVU3101
 11688 0112 9DF89430 		ldrb	r3, [sp, #148]	@ zero_extendqisi2
 11689 0116 13F0700F 		tst	r3, #112
 11690 011a 64D0     		beq	.L888
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11691              		.loc 1 1318 4 is_stmt 1 view .LVU3102
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11692              		.loc 1 1318 7 is_stmt 0 view .LVU3103
 11693 011c 4CB1     		cbz	r4, .L882
 11694              	.L891:
1319:src/xeq.c     **** 			setX(&x);
 11695              		.loc 1 1319 5 is_stmt 1 view .LVU3104
 11696 011e 1AA9     		add	r1, sp, #104
 11697 0120 0846     		mov	r0, r1
 11698 0122 FFF7FEFF 		bl	dn_minus
 11699              	.LVL863:
1320:src/xeq.c     **** 		} else {
 11700              		.loc 1 1320 4 view .LVU3105
ARM GAS  /tmp/ccBFDvgN.s 			page 357


 11701              	.LBB2233:
 11702              	.LBI2233:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 11703              		.loc 1 828 6 view .LVU3106
 11704              	.LBB2234:
 829:src/xeq.c     **** }
 11705              		.loc 1 829 2 view .LVU3107
 11706 0126 04E0     		b	.L882
 11707              	.LVL864:
 11708              	.L867:
 829:src/xeq.c     **** }
 11709              		.loc 1 829 2 is_stmt 0 view .LVU3108
 11710              	.LBE2234:
 11711              	.LBE2233:
 11712              	.LBE2232:
1322:src/xeq.c     **** 			setX(&x);
 11713              		.loc 1 1322 4 is_stmt 1 view .LVU3109
 11714 0128 454A     		ldr	r2, .L892+4
 11715 012a 02A9     		add	r1, sp, #8
 11716 012c 1AA8     		add	r0, sp, #104
 11717 012e FFF7FEFF 		bl	decNumberFromString
 11718              	.LVL865:
 11719              	.L882:
1323:src/xeq.c     **** 		}
 11720              		.loc 1 1323 4 view .LVU3110
 11721              	.LBB2235:
 11722              	.LBI2235:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 11723              		.loc 1 828 6 view .LVU3111
 11724              	.LBB2236:
 829:src/xeq.c     **** }
 11725              		.loc 1 829 2 view .LVU3112
 11726 0132 1AA9     		add	r1, sp, #104
 11727              	.LVL866:
 829:src/xeq.c     **** }
 11728              		.loc 1 829 2 is_stmt 0 view .LVU3113
 11729 0134 6420     		movs	r0, #100
 11730 0136 FFF7FEFF 		bl	setRegister
 11731              	.LVL867:
 11732              	.L866:
 829:src/xeq.c     **** }
 11733              		.loc 1 829 2 view .LVU3114
 11734              	.LBE2236:
 11735              	.LBE2235:
1325:src/xeq.c     **** #ifndef DM42
 11736              		.loc 1 1325 3 is_stmt 1 view .LVU3115
 11737              	.LBB2237:
 11738              	.LBI2237:
3911:src/xeq.c     **** 	if (!Running && !XromRunning)
 11739              		.loc 1 3911 6 view .LVU3116
 11740              	.LBB2238:
3912:src/xeq.c     **** 		State.entryp = 1;
 11741              		.loc 1 3912 2 view .LVU3117
 11742              	.LBB2239:
 11743              	.LBI2239:
3911:src/xeq.c     **** 	if (!Running && !XromRunning)
 11744              		.loc 1 3911 6 view .LVU3118
ARM GAS  /tmp/ccBFDvgN.s 			page 358


 11745              	.LBE2239:
3912:src/xeq.c     **** 		State.entryp = 1;
 11746              		.loc 1 3912 6 is_stmt 0 view .LVU3119
 11747 013a 424A     		ldr	r2, .L892+8
 11748              	.LBB2241:
 11749              	.LBB2240:
3912:src/xeq.c     **** 		State.entryp = 1;
 11750              		.loc 1 3912 18 view .LVU3120
 11751 013c 424B     		ldr	r3, .L892+12
3912:src/xeq.c     **** 		State.entryp = 1;
 11752              		.loc 1 3912 15 view .LVU3121
 11753 013e 1268     		ldr	r2, [r2]
 11754 0140 1B68     		ldr	r3, [r3]
 11755 0142 1343     		orrs	r3, r2, r3
 11756 0144 07D1     		bne	.L853
3913:src/xeq.c     **** }
 11757              		.loc 1 3913 3 is_stmt 1 view .LVU3122
3913:src/xeq.c     **** }
 11758              		.loc 1 3913 16 is_stmt 0 view .LVU3123
 11759 0146 D8F80020 		ldr	r2, [r8]
 11760 014a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 11761 014e 43F01003 		orr	r3, r3, #16
 11762 0152 82F8DD37 		strb	r3, [r2, #2013]
 11763              	.L853:
 11764              	.LBE2240:
 11765              	.LBE2241:
 11766              	.LBE2238:
 11767              	.LBE2237:
 11768              	.LBE2256:
1330:src/xeq.c     **** 
 11769              		.loc 1 1330 1 view .LVU3124
 11770 0156 2CB0     		add	sp, sp, #176
 11771              		.cfi_remember_state
 11772              		.cfi_def_cfa_offset 32
 11773              		@ sp needed
 11774 0158 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 11775              	.LVL868:
 11776              	.L883:
 11777              		.cfi_restore_state
 11778              	.LBB2257:
1244:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11779              		.loc 1 1244 5 is_stmt 1 view .LVU3125
1244:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11780              		.loc 1 1244 30 is_stmt 0 view .LVU3126
 11781 015c 03F8A82C 		strb	r2, [r3, #-168]
 11782 0160 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1256:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11783              		.loc 1 1256 4 is_stmt 1 view .LVU3127
1256:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11784              		.loc 1 1256 7 is_stmt 0 view .LVU3128
 11785 0162 002A     		cmp	r2, #0
 11786 0164 3FF47AAF 		beq	.L889
 11787              	.L858:
1264:src/xeq.c     **** 		}
 11788              		.loc 1 1264 5 is_stmt 1 view .LVU3129
1264:src/xeq.c     **** 		}
 11789              		.loc 1 1264 18 is_stmt 0 view .LVU3130
ARM GAS  /tmp/ccBFDvgN.s 			page 359


 11790 0168 D8F80030 		ldr	r3, [r8]
 11791 016c 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11792 0170 6FF34512 		bfc	r2, #5, #1
 11793 0174 83F8E627 		strb	r2, [r3, #2022]
1266:src/xeq.c     **** 		lift_if_enabled();
 11794              		.loc 1 1266 3 is_stmt 1 view .LVU3131
 11795              	.LBB2242:
 11796              	.LBB2223:
 11797              	.LBB2219:
 11798              	.LBB2216:
 744:src/xeq.c     **** }
 11799              		.loc 1 744 15 is_stmt 0 view .LVU3132
 11800 0178 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11801              	.LBE2216:
 11802              	.LBE2219:
 11803              	.LBE2223:
 11804              	.LBE2242:
1266:src/xeq.c     **** 		lift_if_enabled();
 11805              		.loc 1 1266 17 view .LVU3133
 11806 017a 0022     		movs	r2, #0
 11807              	.LBB2243:
 11808              	.LBB2224:
 748:src/xeq.c     **** 		lift();
 11809              		.loc 1 748 5 view .LVU3134
 11810 017c 5B06     		lsls	r3, r3, #25
 11811              	.LBE2224:
 11812              	.LBE2243:
1266:src/xeq.c     **** 		lift_if_enabled();
 11813              		.loc 1 1266 17 view .LVU3135
 11814 017e 2277     		strb	r2, [r4, #28]
1267:src/xeq.c     **** 		set_lift();
 11815              		.loc 1 1267 3 is_stmt 1 view .LVU3136
 11816              	.LBB2244:
 747:src/xeq.c     **** 	if (get_lift())
 11817              		.loc 1 747 6 view .LVU3137
 11818              	.LBB2225:
 748:src/xeq.c     **** 		lift();
 11819              		.loc 1 748 2 view .LVU3138
 11820              	.LBB2220:
 743:src/xeq.c     **** 	return State2.state_lift;
 11821              		.loc 1 743 12 view .LVU3139
 11822              	.LBB2217:
 744:src/xeq.c     **** }
 11823              		.loc 1 744 2 view .LVU3140
 11824              	.LBE2217:
 11825              	.LBE2220:
 748:src/xeq.c     **** 		lift();
 11826              		.loc 1 748 5 is_stmt 0 view .LVU3141
 11827 0180 7FF575AF 		bpl	.L860
 11828              	.L885:
 749:src/xeq.c     **** }
 11829              		.loc 1 749 3 is_stmt 1 view .LVU3142
 11830 0184 FFF7FEFF 		bl	lift
 11831              	.LVL869:
 11832 0188 71E7     		b	.L860
 11833              	.L886:
 11834              	.LBE2225:
ARM GAS  /tmp/ccBFDvgN.s 			page 360


 11835              	.LBE2244:
 11836              	.LBB2245:
1272:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11837              		.loc 1 1272 4 view .LVU3143
1272:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11838              		.loc 1 1272 41 is_stmt 0 view .LVU3144
 11839 018a 9DF80890 		ldrb	r9, [sp, #8]	@ zero_extendqisi2
 11840 018e A9F12D09 		sub	r9, r9, #45
 11841 0192 B9FA89F9 		clz	r9, r9
1273:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11842              		.loc 1 1273 31 view .LVU3145
 11843 0196 FFF7FEFF 		bl	int_base
 11844              	.LVL870:
1272:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11845              		.loc 1 1272 41 view .LVU3146
 11846 019a 4FEA5919 		lsr	r9, r9, #5
 11847              	.LVL871:
1273:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11848              		.loc 1 1273 4 is_stmt 1 view .LVU3147
1273:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11849              		.loc 1 1273 31 is_stmt 0 view .LVU3148
 11850 019e 02AB     		add	r3, sp, #8
 11851 01a0 03EB0902 		add	r2, r3, r9
 11852              	.LVL872:
 11853              	.LBB2246:
 11854              	.LBI2246:
1157:src/xeq.c     **** 	unsigned long long int x = 0;
 11855              		.loc 1 1157 24 is_stmt 1 view .LVU3149
 11856              	.LBB2247:
1158:src/xeq.c     **** 
 11857              		.loc 1 1158 2 view .LVU3150
1158:src/xeq.c     **** 
 11858              		.loc 1 1158 25 is_stmt 0 view .LVU3151
 11859 01a4 0026     		movs	r6, #0
 11860 01a6 0027     		movs	r7, #0
 11861 01a8 02E0     		b	.L865
 11862              	.LVL873:
 11863              	.L890:
 11864              	.LBB2248:
1172:src/xeq.c     **** 	}
 11865              		.loc 1 1172 5 view .LVU3152
 11866 01aa E618     		adds	r6, r4, r3
 11867              	.LVL874:
1172:src/xeq.c     **** 	}
 11868              		.loc 1 1172 5 view .LVU3153
 11869 01ac 45F10007 		adc	r7, r5, #0
 11870              	.LVL875:
1172:src/xeq.c     **** 	}
 11871              		.loc 1 1172 5 view .LVU3154
 11872              	.LBE2248:
1160:src/xeq.c     **** 		unsigned int n;
 11873              		.loc 1 1160 8 is_stmt 1 view .LVU3155
 11874              	.L865:
1160:src/xeq.c     **** 		unsigned int n;
 11875              		.loc 1 1160 2 view .LVU3156
 11876              	.LBB2249:
1161:src/xeq.c     **** 		const char c = *s++;
ARM GAS  /tmp/ccBFDvgN.s 			page 361


 11877              		.loc 1 1161 3 view .LVU3157
1162:src/xeq.c     **** 
 11878              		.loc 1 1162 3 view .LVU3158
1165:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 11879              		.loc 1 1165 4 view .LVU3159
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 11880              		.loc 1 1166 8 view .LVU3160
1167:src/xeq.c     **** 		else
 11881              		.loc 1 1167 4 view .LVU3161
1162:src/xeq.c     **** 
 11882              		.loc 1 1162 14 is_stmt 0 view .LVU3162
 11883 01b0 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 11884              	.LVL876:
1164:src/xeq.c     **** 			n = c - '0';
 11885              		.loc 1 1164 3 is_stmt 1 view .LVU3163
1164:src/xeq.c     **** 			n = c - '0';
 11886              		.loc 1 1164 16 is_stmt 0 view .LVU3164
 11887 01b4 A1F13003 		sub	r3, r1, #48
1164:src/xeq.c     **** 			n = c - '0';
 11888              		.loc 1 1164 6 view .LVU3165
 11889 01b8 DCB2     		uxtb	r4, r3
 11890 01ba 092C     		cmp	r4, #9
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 11891              		.loc 1 1166 11 view .LVU3166
 11892 01bc A1F14105 		sub	r5, r1, #65
1164:src/xeq.c     **** 			n = c - '0';
 11893              		.loc 1 1164 6 view .LVU3167
 11894 01c0 03D9     		bls	.L863
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 11895              		.loc 1 1166 11 view .LVU3168
 11896 01c2 052D     		cmp	r5, #5
 11897 01c4 07D8     		bhi	.L864
1167:src/xeq.c     **** 		else
 11898              		.loc 1 1167 16 view .LVU3169
 11899 01c6 A1F13703 		sub	r3, r1, #55
 11900              	.LVL877:
 11901              	.L863:
1170:src/xeq.c     **** 			break;
 11902              		.loc 1 1170 3 is_stmt 1 view .LVU3170
1172:src/xeq.c     **** 	}
 11903              		.loc 1 1172 3 view .LVU3171
1172:src/xeq.c     **** 	}
 11904              		.loc 1 1172 9 is_stmt 0 view .LVU3172
 11905 01ca A0FB0645 		umull	r4, r5, r0, r6
1170:src/xeq.c     **** 			break;
 11906              		.loc 1 1170 6 view .LVU3173
 11907 01ce 9842     		cmp	r0, r3
1172:src/xeq.c     **** 	}
 11908              		.loc 1 1172 9 view .LVU3174
 11909 01d0 00FB0755 		mla	r5, r0, r7, r5
1170:src/xeq.c     **** 			break;
 11910              		.loc 1 1170 6 view .LVU3175
 11911 01d4 E9D8     		bhi	.L890
 11912              	.LVL878:
 11913              	.L864:
1170:src/xeq.c     **** 			break;
 11914              		.loc 1 1170 6 view .LVU3176
ARM GAS  /tmp/ccBFDvgN.s 			page 362


 11915              	.LBE2249:
1174:src/xeq.c     **** }
 11916              		.loc 1 1174 2 is_stmt 1 view .LVU3177
1174:src/xeq.c     **** }
 11917              		.loc 1 1174 2 is_stmt 0 view .LVU3178
 11918              	.LBE2247:
 11919              	.LBE2246:
1274:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
 11920              		.loc 1 1274 4 is_stmt 1 view .LVU3179
 11921              	.LBB2250:
 11922              	.LBI2250:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11923              		.loc 1 1509 6 view .LVU3180
 11924              	.LBB2251:
1510:src/xeq.c     **** }
 11925              		.loc 1 1510 2 view .LVU3181
 11926 01d6 CDF80090 		str	r9, [sp]
 11927 01da 3246     		mov	r2, r6
 11928 01dc 3B46     		mov	r3, r7
 11929 01de 6420     		movs	r0, #100
 11930 01e0 FFF7FEFF 		bl	set_reg_n_int_sgn
 11931              	.LVL879:
1511:src/xeq.c     **** 
 11932              		.loc 1 1511 1 is_stmt 0 view .LVU3182
 11933 01e4 A9E7     		b	.L866
 11934              	.LVL880:
 11935              	.L888:
1511:src/xeq.c     **** 
 11936              		.loc 1 1511 1 view .LVU3183
 11937              	.LBE2251:
 11938              	.LBE2250:
 11939              	.LBE2245:
 11940              	.LBB2252:
1317:src/xeq.c     **** 			if (neg)
 11941              		.loc 1 1317 5 is_stmt 1 view .LVU3184
 11942 01e6 1AA9     		add	r1, sp, #104
 11943 01e8 23AA     		add	r2, sp, #140
 11944 01ea 0846     		mov	r0, r1
 11945 01ec FFF7FEFF 		bl	dn_add
 11946              	.LVL881:
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11947              		.loc 1 1318 4 view .LVU3185
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11948              		.loc 1 1318 7 is_stmt 0 view .LVU3186
 11949 01f0 002C     		cmp	r4, #0
 11950 01f2 9ED0     		beq	.L882
 11951 01f4 93E7     		b	.L891
 11952              	.LVL882:
 11953              	.L884:
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11954              		.loc 1 1318 7 view .LVU3187
 11955              	.LBE2252:
1246:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11956              		.loc 1 1246 5 is_stmt 1 view .LVU3188
 11957 01f6 02AB     		add	r3, sp, #8
1246:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11958              		.loc 1 1246 58 is_stmt 0 view .LVU3189
ARM GAS  /tmp/ccBFDvgN.s 			page 363


 11959 01f8 511C     		adds	r1, r2, #1
1246:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11960              		.loc 1 1246 32 view .LVU3190
 11961 01fa 901C     		adds	r0, r2, #2
1246:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11962              		.loc 1 1246 5 view .LVU3191
 11963 01fc 1944     		add	r1, r1, r3
 11964 01fe 1844     		add	r0, r0, r3
 11965 0200 C2F11202 		rsb	r2, r2, #18
 11966 0204 FFF7FEFF 		bl	xcopy
 11967              	.LVL883:
1247:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11968              		.loc 1 1247 5 is_stmt 1 view .LVU3192
1247:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11969              		.loc 1 1247 13 is_stmt 0 view .LVU3193
 11970 0208 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1247:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11971              		.loc 1 1247 25 view .LVU3194
 11972 020a 2CAB     		add	r3, sp, #176
 11973 020c 1344     		add	r3, r3, r2
 11974 020e 4520     		movs	r0, #69
1248:src/xeq.c     **** 			}
 11975              		.loc 1 1248 29 view .LVU3195
 11976 0210 2D21     		movs	r1, #45
1247:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11977              		.loc 1 1247 25 view .LVU3196
 11978 0212 03F8A80C 		strb	r0, [r3, #-168]
1248:src/xeq.c     **** 			}
 11979              		.loc 1 1248 5 is_stmt 1 view .LVU3197
1248:src/xeq.c     **** 			}
 11980              		.loc 1 1248 29 is_stmt 0 view .LVU3198
 11981 0216 03F8A71C 		strb	r1, [r3, #-167]
 11982 021a 1CE7     		b	.L857
 11983              	.LVL884:
 11984              	.L887:
 11985              	.LBB2253:
1299:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11986              		.loc 1 1299 5 is_stmt 1 view .LVU3199
 11987 021c 1AA9     		add	r1, sp, #104
 11988 021e 2846     		mov	r0, r5
 11989 0220 FFF7FEFF 		bl	decNumberCopy
 11990              	.LVL885:
1300:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
 11991              		.loc 1 1300 5 view .LVU3200
 11992 0224 1AA8     		add	r0, sp, #104
 11993 0226 FFF7FEFF 		bl	decNumberZero
 11994              	.LVL886:
1302:src/xeq.c     **** #endif
 11995              		.loc 1 1302 5 view .LVU3201
1302:src/xeq.c     **** #endif
 11996              		.loc 1 1302 25 is_stmt 0 view .LVU3202
 11997 022a D8F80020 		ldr	r2, [r8]
 11998 022e 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 11999 0232 43F01003 		orr	r3, r3, #16
 12000 0236 82F8E637 		strb	r3, [r2, #2022]
 12001 023a 65E7     		b	.L870
 12002              	.L893:
ARM GAS  /tmp/ccBFDvgN.s 			page 364


 12003              		.align	2
 12004              	.L892:
 12005 023c 00000000 		.word	StateWhileOn
 12006 0240 00000000 		.word	Ctx
 12007 0244 00000000 		.word	Running
 12008 0248 00000000 		.word	XromRunning
 12009 024c 00000000 		.word	main_ram
 12010              	.LBE2253:
 12011              	.LBE2257:
 12012              		.cfi_endproc
 12013              	.LFE290:
 12015              		.section	.text.process_cmdline,"ax",%progbits
 12016              		.align	1
 12017              		.p2align 2,,3
 12018              		.global	process_cmdline
 12019              		.syntax unified
 12020              		.thumb
 12021              		.thumb_func
 12022              		.fpu fpv4-sp-d16
 12024              	process_cmdline:
 12025              	.LFB88:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 12026              		.loc 1 1226 28 is_stmt 1 view -0
 12027              		.cfi_startproc
 12028              		@ args = 0, pretend = 0, frame = 0
 12029              		@ frame_needed = 0, uses_anonymous_args = 0
 12030              		@ link register save eliminated.
1227:src/xeq.c     **** 
 12031              		.loc 1 1227 2 view .LVU3204
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12032              		.loc 1 1229 2 view .LVU3205
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12033              		.loc 1 1229 6 is_stmt 0 view .LVU3206
 12034 0000 024B     		ldr	r3, .L897
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12035              		.loc 1 1229 5 view .LVU3207
 12036 0002 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 12037 0004 03B9     		cbnz	r3, .L896
1330:src/xeq.c     **** 
 12038              		.loc 1 1330 1 view .LVU3208
 12039 0006 7047     		bx	lr
 12040              	.L896:
 12041 0008 FFF7FEBF 		b	process_cmdline.part.0
 12042              	.LVL887:
 12043              	.L898:
 12044              		.align	2
 12045              	.L897:
 12046 000c 00000000 		.word	StateWhileOn
 12047              		.cfi_endproc
 12048              	.LFE88:
 12050              		.section	.text.cpx_pi,"ax",%progbits
 12051              		.align	1
 12052              		.p2align 2,,3
 12053              		.global	cpx_pi
 12054              		.syntax unified
 12055              		.thumb
 12056              		.thumb_func
ARM GAS  /tmp/ccBFDvgN.s 			page 365


 12057              		.fpu fpv4-sp-d16
 12059              	cpx_pi:
 12060              	.LVL888:
 12061              	.LFB76:
 973:src/xeq.c     **** 	switch (op) {
 12062              		.loc 1 973 29 is_stmt 1 view -0
 12063              		.cfi_startproc
 12064              		@ args = 0, pretend = 0, frame = 40
 12065              		@ frame_needed = 0, uses_anonymous_args = 0
 974:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12066              		.loc 1 974 2 view .LVU3210
 973:src/xeq.c     **** 	switch (op) {
 12067              		.loc 1 973 29 is_stmt 0 view .LVU3211
 12068 0000 70B5     		push	{r4, r5, r6, lr}
 12069              		.cfi_def_cfa_offset 16
 12070              		.cfi_offset 4, -16
 12071              		.cfi_offset 5, -12
 12072              		.cfi_offset 6, -8
 12073              		.cfi_offset 14, -4
 974:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12074              		.loc 1 974 2 view .LVU3212
 12075 0002 C728     		cmp	r0, #199
 973:src/xeq.c     **** 	switch (op) {
 12076              		.loc 1 973 29 view .LVU3213
 12077 0004 8AB0     		sub	sp, sp, #40
 12078              		.cfi_def_cfa_offset 56
 974:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12079              		.loc 1 974 2 view .LVU3214
 12080 0006 26D0     		beq	.L900
 12081 0008 C828     		cmp	r0, #200
 12082 000a 1AD1     		bne	.L911
 983:src/xeq.c     **** 		process_cmdline();
 12083              		.loc 1 983 3 is_stmt 1 view .LVU3215
 983:src/xeq.c     **** 		process_cmdline();
 12084              		.loc 1 983 21 is_stmt 0 view .LVU3216
 12085 000c 2B4D     		ldr	r5, .L914
 12086 000e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12087              	.LBB2258:
 12088              	.LBB2259:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12089              		.loc 1 1229 5 view .LVU3217
 12090 0010 2A7F     		ldrb	r2, [r5, #28]	@ zero_extendqisi2
 12091              	.LBE2259:
 12092              	.LBE2258:
 983:src/xeq.c     **** 		process_cmdline();
 12093              		.loc 1 983 21 view .LVU3218
 12094 0012 6FF38613 		bfc	r3, #6, #1
 12095 0016 EB75     		strb	r3, [r5, #23]
 984:src/xeq.c     **** 		State2.state_lift = 0;
 12096              		.loc 1 984 3 is_stmt 1 view .LVU3219
 12097              	.LBB2262:
 12098              	.LBI2258:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 12099              		.loc 1 1226 6 view .LVU3220
 12100              	.LBB2260:
1227:src/xeq.c     **** 
 12101              		.loc 1 1227 2 view .LVU3221
ARM GAS  /tmp/ccBFDvgN.s 			page 366


1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12102              		.loc 1 1229 2 view .LVU3222
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12103              		.loc 1 1229 5 is_stmt 0 view .LVU3223
 12104 0018 002A     		cmp	r2, #0
 12105 001a 41D1     		bne	.L912
 12106              	.LVL889:
 12107              	.L905:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12108              		.loc 1 1229 5 view .LVU3224
 12109              	.LBE2260:
 12110              	.LBE2262:
 985:src/xeq.c     **** 		{
 12111              		.loc 1 985 3 is_stmt 1 view .LVU3225
 985:src/xeq.c     **** 		{
 12112              		.loc 1 985 21 is_stmt 0 view .LVU3226
 12113 001c EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12114 001e 284C     		ldr	r4, .L914+4
 12115 0020 6FF38613 		bfc	r3, #6, #1
 12116 0024 EB75     		strb	r3, [r5, #23]
 12117              	.LBB2263:
 987:src/xeq.c     **** 			getX(&r);
 12118              		.loc 1 987 4 is_stmt 1 view .LVU3227
 988:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 12119              		.loc 1 988 4 view .LVU3228
 12120              	.LVL890:
 12121              	.LBB2264:
 12122              	.LBI2264:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 12123              		.loc 1 824 12 view .LVU3229
 12124              	.LBB2265:
 825:src/xeq.c     **** }
 12125              		.loc 1 825 2 view .LVU3230
 825:src/xeq.c     **** }
 12126              		.loc 1 825 9 is_stmt 0 view .LVU3231
 12127 0026 01A8     		add	r0, sp, #4
 12128              	.LVL891:
 825:src/xeq.c     **** }
 12129              		.loc 1 825 9 view .LVU3232
 12130 0028 6421     		movs	r1, #100
 12131 002a FFF7FEFF 		bl	getRegister
 12132              	.LVL892:
 825:src/xeq.c     **** }
 12133              		.loc 1 825 9 view .LVU3233
 12134              	.LBE2265:
 12135              	.LBE2264:
 989:src/xeq.c     **** 			setX(&r);
 12136              		.loc 1 989 4 is_stmt 1 view .LVU3234
 12137 002e 01AA     		add	r2, sp, #4
 12138 0030 2449     		ldr	r1, .L914+8
 12139 0032 1046     		mov	r0, r2
 12140 0034 FFF7FEFF 		bl	dn_multiply
 12141              	.LVL893:
 990:src/xeq.c     **** 		}
 12142              		.loc 1 990 4 view .LVU3235
 12143              	.LBB2266:
 12144              	.LBI2266:
ARM GAS  /tmp/ccBFDvgN.s 			page 367


 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 12145              		.loc 1 828 6 view .LVU3236
 12146              	.LBB2267:
 829:src/xeq.c     **** }
 12147              		.loc 1 829 2 view .LVU3237
 12148 0038 01A9     		add	r1, sp, #4
 12149              	.LVL894:
 829:src/xeq.c     **** }
 12150              		.loc 1 829 2 is_stmt 0 view .LVU3238
 12151 003a 6420     		movs	r0, #100
 12152 003c FFF7FEFF 		bl	setRegister
 12153              	.LVL895:
 829:src/xeq.c     **** }
 12154              		.loc 1 829 2 view .LVU3239
 12155 0040 00E0     		b	.L902
 12156              	.LVL896:
 12157              	.L911:
 829:src/xeq.c     **** }
 12158              		.loc 1 829 2 view .LVU3240
 12159 0042 1F4C     		ldr	r4, .L914+4
 12160              	.LVL897:
 12161              	.L902:
 829:src/xeq.c     **** }
 12162              		.loc 1 829 2 view .LVU3241
 12163              	.LBE2267:
 12164              	.LBE2266:
 12165              	.LBE2263:
 992:src/xeq.c     **** 	}
 12166              		.loc 1 992 10 is_stmt 1 view .LVU3242
 994:src/xeq.c     **** }
 12167              		.loc 1 994 2 view .LVU3243
 12168 0044 2268     		ldr	r2, [r4]
 12169 0046 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 12170 004a 43F00103 		orr	r3, r3, #1
 12171 004e 82F8AD37 		strb	r3, [r2, #1965]
 995:src/xeq.c     **** 
 12172              		.loc 1 995 1 is_stmt 0 view .LVU3244
 12173 0052 0AB0     		add	sp, sp, #40
 12174              		.cfi_remember_state
 12175              		.cfi_def_cfa_offset 16
 12176              		@ sp needed
 12177 0054 70BD     		pop	{r4, r5, r6, pc}
 12178              	.LVL898:
 12179              	.L900:
 12180              		.cfi_restore_state
 976:src/xeq.c     **** 			stack_begin( 1 );
 12181              		.loc 1 976 3 is_stmt 1 view .LVU3245
 976:src/xeq.c     **** 			stack_begin( 1 );
 12182              		.loc 1 976 8 is_stmt 0 view .LVU3246
 12183 0056 1A4C     		ldr	r4, .L914+4
 12184 0058 2368     		ldr	r3, [r4]
 976:src/xeq.c     **** 			stack_begin( 1 );
 12185              		.loc 1 976 18 view .LVU3247
 12186 005a 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 976:src/xeq.c     **** 			stack_begin( 1 );
 12187              		.loc 1 976 6 view .LVU3248
 12188 005e 12F0060F 		tst	r2, #6
ARM GAS  /tmp/ccBFDvgN.s 			page 368


 12189 0062 20D0     		beq	.L913
 12190              	.LVL899:
 12191              	.L903:
 980:src/xeq.c     **** 		break;
 12192              		.loc 1 980 3 is_stmt 1 view .LVU3249
 12193              	.LBB2268:
 12194              	.LBB2269:
1119:src/xeq.c     **** }
 12195              		.loc 1 1119 24 is_stmt 0 view .LVU3250
 12196 0064 B3F8E817 		ldrh	r1, [r3, #2024]
 12197              	.LBE2269:
 12198              	.LBE2268:
 980:src/xeq.c     **** 		break;
 12199              		.loc 1 980 3 view .LVU3251
 12200 0068 174B     		ldr	r3, .L914+12
 12201              	.LBB2272:
 12202              	.LBB2270:
1119:src/xeq.c     **** }
 12203              		.loc 1 1119 24 view .LVU3252
 12204 006a 44F20105 		movw	r5, #16385
 12205 006e 2940     		ands	r1, r1, r5
 12206              	.LBE2270:
 12207              	.LBE2272:
 980:src/xeq.c     **** 		break;
 12208              		.loc 1 980 22 view .LVU3253
 12209 0070 A1F58041 		sub	r1, r1, #16384
 12210 0074 B1FA81F1 		clz	r1, r1
 12211 0078 4909     		lsrs	r1, r1, #5
 12212 007a 6620     		movs	r0, #102
 980:src/xeq.c     **** 		break;
 12213              		.loc 1 980 3 view .LVU3254
 12214 007c 1E68     		ldr	r6, [r3]
 12215              	.LBB2273:
 12216              	.LBI2268:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12217              		.loc 1 1118 5 is_stmt 1 view .LVU3255
 12218              	.LBB2271:
1119:src/xeq.c     **** }
 12219              		.loc 1 1119 2 view .LVU3256
 12220              	.LBE2271:
 12221              	.LBE2273:
 980:src/xeq.c     **** 		break;
 12222              		.loc 1 980 22 is_stmt 0 view .LVU3257
 12223 007e FFF7FEFF 		bl	get_const
 12224              	.LVL900:
 12225              	.LBB2274:
 12226              	.LBB2275:
 12227              	.LBB2276:
 12228              	.LBB2277:
1119:src/xeq.c     **** }
 12229              		.loc 1 1119 24 view .LVU3258
 12230 0082 2368     		ldr	r3, [r4]
 12231 0084 B3F8E837 		ldrh	r3, [r3, #2024]
 12232              	.LBE2277:
 12233              	.LBE2276:
 727:src/xeq.c     **** }
 12234              		.loc 1 727 2 view .LVU3259
ARM GAS  /tmp/ccBFDvgN.s 			page 369


 12235 0088 1D40     		ands	r5, r5, r3
 12236 008a B5F5804F 		cmp	r5, #16384
 12237              	.LBE2275:
 12238              	.LBE2274:
 980:src/xeq.c     **** 		break;
 12239              		.loc 1 980 22 view .LVU3260
 12240 008e 0146     		mov	r1, r0
 12241              	.LVL901:
 12242              	.LBB2281:
 12243              	.LBI2274:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12244              		.loc 1 726 6 is_stmt 1 view .LVU3261
 12245              	.LBB2280:
 727:src/xeq.c     **** }
 12246              		.loc 1 727 2 view .LVU3262
 12247              	.LBB2279:
 12248              	.LBI2276:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12249              		.loc 1 1118 5 view .LVU3263
 12250              	.LBB2278:
1119:src/xeq.c     **** }
 12251              		.loc 1 1119 2 view .LVU3264
 12252              	.LBE2278:
 12253              	.LBE2279:
 727:src/xeq.c     **** }
 12254              		.loc 1 727 2 is_stmt 0 view .LVU3265
 12255 0090 08BF     		it	eq
 12256 0092 1022     		moveq	r2, #16
 12257 0094 3046     		mov	r0, r6
 12258              	.LVL902:
 727:src/xeq.c     **** }
 12259              		.loc 1 727 2 view .LVU3266
 12260 0096 18BF     		it	ne
 12261 0098 0822     		movne	r2, #8
 12262 009a FFF7FEFF 		bl	xcopy
 12263              	.LVL903:
 728:src/xeq.c     **** 
 12264              		.loc 1 728 1 view .LVU3267
 12265 009e D1E7     		b	.L902
 12266              	.LVL904:
 12267              	.L912:
 728:src/xeq.c     **** 
 12268              		.loc 1 728 1 view .LVU3268
 12269              	.LBE2280:
 12270              	.LBE2281:
 12271              	.LBB2282:
 12272              	.LBB2261:
 12273 00a0 FFF7FEFF 		bl	process_cmdline.part.0
 12274              	.LVL905:
 728:src/xeq.c     **** 
 12275              		.loc 1 728 1 view .LVU3269
 12276 00a4 BAE7     		b	.L905
 12277              	.LVL906:
 12278              	.L913:
 728:src/xeq.c     **** 
 12279              		.loc 1 728 1 view .LVU3270
 12280              	.LBE2261:
ARM GAS  /tmp/ccBFDvgN.s 			page 370


 12281              	.LBE2282:
 977:src/xeq.c     **** 			SET_REAL;
 12282              		.loc 1 977 4 is_stmt 1 view .LVU3271
 12283 00a6 0120     		movs	r0, #1
 12284              	.LVL907:
 977:src/xeq.c     **** 			SET_REAL;
 12285              		.loc 1 977 4 is_stmt 0 view .LVU3272
 12286 00a8 FFF7FEFF 		bl	stack_begin
 12287              	.LVL908:
 978:src/xeq.c     **** 		}
 12288              		.loc 1 978 4 is_stmt 1 view .LVU3273
 12289 00ac 2368     		ldr	r3, [r4]
 12290 00ae 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 12291 00b2 42F00202 		orr	r2, r2, #2
 12292 00b6 83F8AC27 		strb	r2, [r3, #1964]
 12293 00ba D3E7     		b	.L903
 12294              	.L915:
 12295              		.align	2
 12296              	.L914:
 12297 00bc 00000000 		.word	StateWhileOn
 12298 00c0 00000000 		.word	main_ram
 12299 00c4 00000000 		.word	const_PI
 12300 00c8 00000000 		.word	StackBase
 12301              		.cfi_endproc
 12302              	.LFE76:
 12304              		.section	.text.process_cmdline_set_lift,"ax",%progbits
 12305              		.align	1
 12306              		.p2align 2,,3
 12307              		.global	process_cmdline_set_lift
 12308              		.syntax unified
 12309              		.thumb
 12310              		.thumb_func
 12311              		.fpu fpv4-sp-d16
 12313              	process_cmdline_set_lift:
 12314              	.LFB89:
1332:src/xeq.c     **** 	process_cmdline();
 12315              		.loc 1 1332 37 view -0
 12316              		.cfi_startproc
 12317              		@ args = 0, pretend = 0, frame = 0
 12318              		@ frame_needed = 0, uses_anonymous_args = 0
1333:src/xeq.c     **** 	set_lift();
 12319              		.loc 1 1333 2 view .LVU3275
 12320              	.LBB2283:
 12321              	.LBI2283:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 12322              		.loc 1 1226 6 view .LVU3276
 12323              	.LBB2284:
1227:src/xeq.c     **** 
 12324              		.loc 1 1227 2 view .LVU3277
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12325              		.loc 1 1229 2 view .LVU3278
 12326              	.LBE2284:
 12327              	.LBE2283:
1332:src/xeq.c     **** 	process_cmdline();
 12328              		.loc 1 1332 37 is_stmt 0 view .LVU3279
 12329 0000 10B5     		push	{r4, lr}
 12330              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccBFDvgN.s 			page 371


 12331              		.cfi_offset 4, -8
 12332              		.cfi_offset 14, -4
 12333              	.LBB2287:
 12334              	.LBB2285:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12335              		.loc 1 1229 6 view .LVU3280
 12336 0002 074C     		ldr	r4, .L923
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12337              		.loc 1 1229 5 view .LVU3281
 12338 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 12339 0006 23B9     		cbnz	r3, .L922
 12340              	.LBE2285:
 12341              	.LBE2287:
1334:src/xeq.c     **** }
 12342              		.loc 1 1334 2 is_stmt 1 view .LVU3282
 12343              	.LBB2288:
 12344              	.LBI2288:
 767:src/xeq.c     ****     State2.state_lift = 1;
 12345              		.loc 1 767 6 view .LVU3283
 12346              	.LBB2289:
 768:src/xeq.c     **** }
 12347              		.loc 1 768 5 view .LVU3284
 768:src/xeq.c     **** }
 12348              		.loc 1 768 23 is_stmt 0 view .LVU3285
 12349 0008 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12350 000a 43F04003 		orr	r3, r3, #64
 12351 000e E375     		strb	r3, [r4, #23]
 12352              	.LBE2289:
 12353              	.LBE2288:
1335:src/xeq.c     **** 
 12354              		.loc 1 1335 1 view .LVU3286
 12355 0010 10BD     		pop	{r4, pc}
 12356              	.L922:
 12357              	.LBB2291:
 12358              	.LBB2286:
 12359 0012 FFF7FEFF 		bl	process_cmdline.part.0
 12360              	.LVL909:
 12361              	.LBE2286:
 12362              	.LBE2291:
1334:src/xeq.c     **** }
 12363              		.loc 1 1334 2 is_stmt 1 view .LVU3287
 12364              	.LBB2292:
 767:src/xeq.c     ****     State2.state_lift = 1;
 12365              		.loc 1 767 6 view .LVU3288
 12366              	.LBB2290:
 768:src/xeq.c     **** }
 12367              		.loc 1 768 5 view .LVU3289
 768:src/xeq.c     **** }
 12368              		.loc 1 768 23 is_stmt 0 view .LVU3290
 12369 0016 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12370 0018 43F04003 		orr	r3, r3, #64
 12371 001c E375     		strb	r3, [r4, #23]
 12372              	.LBE2290:
 12373              	.LBE2292:
1335:src/xeq.c     **** 
 12374              		.loc 1 1335 1 view .LVU3291
 12375 001e 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccBFDvgN.s 			page 372


 12376              	.L924:
 12377              		.align	2
 12378              	.L923:
 12379 0020 00000000 		.word	StateWhileOn
 12380              		.cfi_endproc
 12381              	.LFE89:
 12383              		.section	.text.setX_int,"ax",%progbits
 12384              		.align	1
 12385              		.p2align 2,,3
 12386              		.global	setX_int
 12387              		.syntax unified
 12388              		.thumb
 12389              		.thumb_func
 12390              		.fpu fpv4-sp-d16
 12392              	setX_int:
 12393              	.LVL910:
 12394              	.LFB102:
1504:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12395              		.loc 1 1504 34 is_stmt 1 view -0
 12396              		.cfi_startproc
 12397              		@ args = 0, pretend = 0, frame = 8
 12398              		@ frame_needed = 0, uses_anonymous_args = 0
1505:src/xeq.c     **** }
 12399              		.loc 1 1505 2 view .LVU3293
1504:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12400              		.loc 1 1504 34 is_stmt 0 view .LVU3294
 12401 0000 00B5     		push	{lr}
 12402              		.cfi_def_cfa_offset 4
 12403              		.cfi_offset 14, -4
 12404 0002 0B46     		mov	r3, r1
 12405 0004 83B0     		sub	sp, sp, #12
 12406              		.cfi_def_cfa_offset 16
1504:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12407              		.loc 1 1504 34 view .LVU3295
 12408 0006 0246     		mov	r2, r0
 12409              	.LBB2293:
 12410              	.LBB2294:
1423:src/xeq.c     **** }
 12411              		.loc 1 1423 8 view .LVU3296
 12412 0008 6420     		movs	r0, #100
 12413              	.LVL911:
1423:src/xeq.c     **** }
 12414              		.loc 1 1423 8 view .LVU3297
 12415 000a CDE90023 		strd	r2, [sp]
 12416              	.LVL912:
1423:src/xeq.c     **** }
 12417              		.loc 1 1423 8 view .LVU3298
 12418              	.LBE2294:
 12419              	.LBI2293:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 12420              		.loc 1 1422 6 is_stmt 1 view .LVU3299
 12421              	.LBB2295:
1423:src/xeq.c     **** }
 12422              		.loc 1 1423 2 view .LVU3300
1423:src/xeq.c     **** }
 12423              		.loc 1 1423 8 is_stmt 0 view .LVU3301
 12424 000e FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccBFDvgN.s 			page 373


 12425              	.LVL913:
1423:src/xeq.c     **** }
 12426              		.loc 1 1423 2 view .LVU3302
 12427 0012 0822     		movs	r2, #8
 12428 0014 6946     		mov	r1, sp
 12429 0016 FFF7FEFF 		bl	xcopy
 12430              	.LVL914:
1423:src/xeq.c     **** }
 12431              		.loc 1 1423 2 view .LVU3303
 12432              	.LBE2295:
 12433              	.LBE2293:
1506:src/xeq.c     **** 
 12434              		.loc 1 1506 1 view .LVU3304
 12435 001a 03B0     		add	sp, sp, #12
 12436              		.cfi_def_cfa_offset 4
 12437              		@ sp needed
 12438 001c 5DF804FB 		ldr	pc, [sp], #4
 12439              		.cfi_endproc
 12440              	.LFE102:
 12442              		.section	.text.do_rcl,"ax",%progbits
 12443              		.align	1
 12444              		.p2align 2,,3
 12445              		.syntax unified
 12446              		.thumb
 12447              		.thumb_func
 12448              		.fpu fpv4-sp-d16
 12450              	do_rcl:
 12451              	.LVL915:
 12452              	.LFB118:
1746:src/xeq.c     **** 	if (op == RARG_RCL) {
 12453              		.loc 1 1746 45 is_stmt 1 view -0
 12454              		.cfi_startproc
 12455              		@ args = 0, pretend = 0, frame = 40
 12456              		@ frame_needed = 0, uses_anonymous_args = 0
1747:src/xeq.c     **** 		REGISTER temp;
 12457              		.loc 1 1747 2 view .LVU3306
1746:src/xeq.c     **** 	if (op == RARG_RCL) {
 12458              		.loc 1 1746 45 is_stmt 0 view .LVU3307
 12459 0000 30B5     		push	{r4, r5, lr}
 12460              		.cfi_def_cfa_offset 12
 12461              		.cfi_offset 4, -12
 12462              		.cfi_offset 5, -8
 12463              		.cfi_offset 14, -4
1747:src/xeq.c     **** 		REGISTER temp;
 12464              		.loc 1 1747 5 view .LVU3308
 12465 0002 0A29     		cmp	r1, #10
1746:src/xeq.c     **** 	if (op == RARG_RCL) {
 12466              		.loc 1 1746 45 view .LVU3309
 12467 0004 8BB0     		sub	sp, sp, #44
 12468              		.cfi_def_cfa_offset 56
1746:src/xeq.c     **** 	if (op == RARG_RCL) {
 12469              		.loc 1 1746 45 view .LVU3310
 12470 0006 0B46     		mov	r3, r1
1747:src/xeq.c     **** 		REGISTER temp;
 12471              		.loc 1 1747 5 view .LVU3311
 12472 0008 33D0     		beq	.L948
1753:src/xeq.c     **** 			long long int r;
ARM GAS  /tmp/ccBFDvgN.s 			page 374


 12473              		.loc 1 1753 3 is_stmt 1 view .LVU3312
1753:src/xeq.c     **** 			long long int r;
 12474              		.loc 1 1753 7 is_stmt 0 view .LVU3313
 12475 000a 304A     		ldr	r2, .L950
 12476 000c 1268     		ldr	r2, [r2]
 12477 000e 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1753:src/xeq.c     **** 			long long int r;
 12478              		.loc 1 1753 6 view .LVU3314
 12479 0012 D207     		lsls	r2, r2, #31
 12480 0014 0146     		mov	r1, r0
 12481              	.LVL916:
 12482              	.LBB2325:
1756:src/xeq.c     **** 				illegal(op);
 12483              		.loc 1 1756 8 view .LVU3315
 12484 0016 A3F10A03 		sub	r3, r3, #10
 12485              	.LBE2325:
1753:src/xeq.c     **** 			long long int r;
 12486              		.loc 1 1753 6 view .LVU3316
 12487 001a 14D5     		bpl	.L933
 12488              	.LBB2332:
1754:src/xeq.c     **** 
 12489              		.loc 1 1754 4 is_stmt 1 view .LVU3317
1756:src/xeq.c     **** 				illegal(op);
 12490              		.loc 1 1756 4 view .LVU3318
1756:src/xeq.c     **** 				illegal(op);
 12491              		.loc 1 1756 8 is_stmt 0 view .LVU3319
 12492 001c 98B2     		uxth	r0, r3
 12493              	.LVL917:
1756:src/xeq.c     **** 				illegal(op);
 12494              		.loc 1 1756 8 view .LVU3320
 12495 001e 6A46     		mov	r2, sp
 12496 0020 0123     		movs	r3, #1
 12497 0022 FFF7FEFF 		bl	storcl_intop
 12498              	.LVL918:
1756:src/xeq.c     **** 				illegal(op);
 12499              		.loc 1 1756 7 view .LVU3321
 12500 0026 20B1     		cbz	r0, .L934
1757:src/xeq.c     **** 			setlastX();
 12501              		.loc 1 1757 5 is_stmt 1 view .LVU3322
1757:src/xeq.c     **** 			setlastX();
 12502              		.loc 1 1757 5 view .LVU3323
 12503              	.LVL919:
 12504              	.LBB2326:
 12505              	.LBI2326:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12506              		.loc 1 546 5 view .LVU3324
 12507              	.LBB2327:
 547:src/xeq.c     **** 		Error = e;
 12508              		.loc 1 547 2 view .LVU3325
 547:src/xeq.c     **** 		Error = e;
 12509              		.loc 1 547 12 is_stmt 0 view .LVU3326
 12510 0028 294B     		ldr	r3, .L950+4
 547:src/xeq.c     **** 		Error = e;
 12511              		.loc 1 547 5 view .LVU3327
 12512 002a 1A68     		ldr	r2, [r3]
 12513 002c 0AB9     		cbnz	r2, .L934
 12514              	.LVL920:
ARM GAS  /tmp/ccBFDvgN.s 			page 375


 12515              	.LBB2328:
 12516              	.LBI2328:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12517              		.loc 1 546 5 is_stmt 1 view .LVU3328
 12518              	.LBB2329:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12519              		.loc 1 548 3 view .LVU3329
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12520              		.loc 1 548 9 is_stmt 0 view .LVU3330
 12521 002e 0322     		movs	r2, #3
 12522 0030 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12523              		.loc 1 549 3 is_stmt 1 view .LVU3331
 12524              	.LVL921:
 12525              	.L934:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12526              		.loc 1 549 3 is_stmt 0 view .LVU3332
 12527              	.LBE2329:
 12528              	.LBE2328:
 12529              	.LBE2327:
 12530              	.LBE2326:
1757:src/xeq.c     **** 			setlastX();
 12531              		.loc 1 1757 5 is_stmt 1 discriminator 1 view .LVU3333
1758:src/xeq.c     **** 			setX_int(r);
 12532              		.loc 1 1758 4 discriminator 1 view .LVU3334
 12533              	.LBB2330:
 12534              	.LBI2330:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12535              		.loc 1 792 6 discriminator 1 view .LVU3335
 12536              	.LBB2331:
 793:src/xeq.c     **** }
 12537              		.loc 1 793 2 discriminator 1 view .LVU3336
 12538 0032 6421     		movs	r1, #100
 12539 0034 6C20     		movs	r0, #108
 12540 0036 FFF7FEFF 		bl	copyreg_n
 12541              	.LVL922:
 12542              	.LBE2331:
 12543              	.LBE2330:
1759:src/xeq.c     **** 		} else {
 12544              		.loc 1 1759 4 discriminator 1 view .LVU3337
 12545 003a DDE90001 		ldrd	r0, [sp]
 12546 003e FFF7FEFF 		bl	setX_int
 12547              	.LVL923:
 12548              	.LBE2332:
1769:src/xeq.c     **** 
 12549              		.loc 1 1769 1 is_stmt 0 discriminator 1 view .LVU3338
 12550 0042 0BB0     		add	sp, sp, #44
 12551              		.cfi_remember_state
 12552              		.cfi_def_cfa_offset 12
 12553              		@ sp needed
 12554 0044 30BD     		pop	{r4, r5, pc}
 12555              	.LVL924:
 12556              	.L933:
 12557              		.cfi_restore_state
 12558              	.LBB2333:
1761:src/xeq.c     **** 
 12559              		.loc 1 1761 4 is_stmt 1 view .LVU3339
ARM GAS  /tmp/ccBFDvgN.s 			page 376


1763:src/xeq.c     **** 				illegal(op);
 12560              		.loc 1 1763 4 view .LVU3340
1763:src/xeq.c     **** 				illegal(op);
 12561              		.loc 1 1763 8 is_stmt 0 view .LVU3341
 12562 0046 6C46     		mov	r4, sp
 12563 0048 98B2     		uxth	r0, r3
 12564              	.LVL925:
1763:src/xeq.c     **** 				illegal(op);
 12565              		.loc 1 1763 8 view .LVU3342
 12566 004a 2246     		mov	r2, r4
 12567 004c 0123     		movs	r3, #1
 12568 004e FFF7FEFF 		bl	storcl_op
 12569              	.LVL926:
1763:src/xeq.c     **** 				illegal(op);
 12570              		.loc 1 1763 7 view .LVU3343
 12571 0052 20B1     		cbz	r0, .L935
1764:src/xeq.c     **** 			setlastX();
 12572              		.loc 1 1764 5 is_stmt 1 view .LVU3344
1764:src/xeq.c     **** 			setlastX();
 12573              		.loc 1 1764 5 view .LVU3345
 12574              	.LVL927:
 12575              	.LBB2334:
 12576              	.LBI2334:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12577              		.loc 1 546 5 view .LVU3346
 12578              	.LBB2335:
 547:src/xeq.c     **** 		Error = e;
 12579              		.loc 1 547 2 view .LVU3347
 547:src/xeq.c     **** 		Error = e;
 12580              		.loc 1 547 12 is_stmt 0 view .LVU3348
 12581 0054 1E4B     		ldr	r3, .L950+4
 547:src/xeq.c     **** 		Error = e;
 12582              		.loc 1 547 5 view .LVU3349
 12583 0056 1A68     		ldr	r2, [r3]
 12584 0058 0AB9     		cbnz	r2, .L935
 12585              	.LVL928:
 12586              	.LBB2336:
 12587              	.LBI2336:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12588              		.loc 1 546 5 is_stmt 1 view .LVU3350
 12589              	.LBB2337:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12590              		.loc 1 548 3 view .LVU3351
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12591              		.loc 1 548 9 is_stmt 0 view .LVU3352
 12592 005a 0322     		movs	r2, #3
 12593 005c 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12594              		.loc 1 549 3 is_stmt 1 view .LVU3353
 12595              	.LVL929:
 12596              	.L935:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12597              		.loc 1 549 3 is_stmt 0 view .LVU3354
 12598              	.LBE2337:
 12599              	.LBE2336:
 12600              	.LBE2335:
 12601              	.LBE2334:
ARM GAS  /tmp/ccBFDvgN.s 			page 377


1764:src/xeq.c     **** 			setlastX();
 12602              		.loc 1 1764 5 is_stmt 1 discriminator 1 view .LVU3355
1765:src/xeq.c     **** 			setX(&r);
 12603              		.loc 1 1765 4 discriminator 1 view .LVU3356
 12604              	.LBB2338:
 12605              	.LBI2338:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12606              		.loc 1 792 6 discriminator 1 view .LVU3357
 12607              	.LBB2339:
 793:src/xeq.c     **** }
 12608              		.loc 1 793 2 discriminator 1 view .LVU3358
 12609 005e 6421     		movs	r1, #100
 12610 0060 6C20     		movs	r0, #108
 12611 0062 FFF7FEFF 		bl	copyreg_n
 12612              	.LVL930:
 12613              	.LBE2339:
 12614              	.LBE2338:
1766:src/xeq.c     **** 		}
 12615              		.loc 1 1766 4 discriminator 1 view .LVU3359
 12616              	.LBB2340:
 12617              	.LBI2340:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 12618              		.loc 1 828 6 discriminator 1 view .LVU3360
 12619              	.LBB2341:
 829:src/xeq.c     **** }
 12620              		.loc 1 829 2 discriminator 1 view .LVU3361
 12621 0066 2146     		mov	r1, r4
 12622 0068 6420     		movs	r0, #100
 12623 006a FFF7FEFF 		bl	setRegister
 12624              	.LVL931:
 829:src/xeq.c     **** }
 12625              		.loc 1 829 2 is_stmt 0 discriminator 1 view .LVU3362
 12626              	.LBE2341:
 12627              	.LBE2340:
 12628              	.LBE2333:
1769:src/xeq.c     **** 
 12629              		.loc 1 1769 1 discriminator 1 view .LVU3363
 12630 006e 0BB0     		add	sp, sp, #44
 12631              		.cfi_remember_state
 12632              		.cfi_def_cfa_offset 12
 12633              		@ sp needed
 12634 0070 30BD     		pop	{r4, r5, pc}
 12635              	.LVL932:
 12636              	.L948:
 12637              		.cfi_restore_state
 12638              	.LBB2342:
1748:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
 12639              		.loc 1 1748 3 is_stmt 1 view .LVU3364
1749:src/xeq.c     **** 		lift_if_enabled();
 12640              		.loc 1 1749 3 view .LVU3365
 12641              	.LBB2343:
 12642              	.LBB2344:
 12643              	.LBB2345:
 12644              	.LBB2346:
1119:src/xeq.c     **** }
 12645              		.loc 1 1119 24 is_stmt 0 view .LVU3366
 12646 0072 164D     		ldr	r5, .L950
ARM GAS  /tmp/ccBFDvgN.s 			page 378


 12647              	.LBE2346:
 12648              	.LBE2345:
 12649              	.LBE2344:
 12650              	.LBE2343:
1749:src/xeq.c     **** 		lift_if_enabled();
 12651              		.loc 1 1749 18 view .LVU3367
 12652 0074 FFF7FEFF 		bl	get_reg_n
 12653              	.LVL933:
 12654              	.LBB2353:
 12655              	.LBB2351:
 12656              	.LBB2349:
 12657              	.LBB2347:
1119:src/xeq.c     **** }
 12658              		.loc 1 1119 24 view .LVU3368
 12659 0078 2B68     		ldr	r3, [r5]
 12660 007a B3F8E827 		ldrh	r2, [r3, #2024]
 12661 007e 44F20103 		movw	r3, #16385
 12662              	.LBE2347:
 12663              	.LBE2349:
 727:src/xeq.c     **** }
 12664              		.loc 1 727 2 view .LVU3369
 12665 0082 1340     		ands	r3, r3, r2
 12666 0084 B3F5804F 		cmp	r3, #16384
 12667 0088 6C46     		mov	r4, sp
 12668              	.LBE2351:
 12669              	.LBE2353:
1749:src/xeq.c     **** 		lift_if_enabled();
 12670              		.loc 1 1749 18 view .LVU3370
 12671 008a 0146     		mov	r1, r0
 12672              	.LVL934:
 12673              	.LBB2354:
 12674              	.LBI2343:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12675              		.loc 1 726 6 is_stmt 1 view .LVU3371
 12676              	.LBB2352:
 727:src/xeq.c     **** }
 12677              		.loc 1 727 2 view .LVU3372
 12678              	.LBB2350:
 12679              	.LBI2345:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12680              		.loc 1 1118 5 view .LVU3373
 12681              	.LBB2348:
1119:src/xeq.c     **** }
 12682              		.loc 1 1119 2 view .LVU3374
 12683              	.LBE2348:
 12684              	.LBE2350:
 727:src/xeq.c     **** }
 12685              		.loc 1 727 2 is_stmt 0 view .LVU3375
 12686 008c 0CBF     		ite	eq
 12687 008e 1022     		moveq	r2, #16
 12688 0090 0822     		movne	r2, #8
 12689 0092 2046     		mov	r0, r4
 12690              	.LVL935:
 727:src/xeq.c     **** }
 12691              		.loc 1 727 2 view .LVU3376
 12692 0094 FFF7FEFF 		bl	xcopy
 12693              	.LVL936:
ARM GAS  /tmp/ccBFDvgN.s 			page 379


 727:src/xeq.c     **** }
 12694              		.loc 1 727 2 view .LVU3377
 12695              	.LBE2352:
 12696              	.LBE2354:
1750:src/xeq.c     **** 		copyreg(StackBase, &temp);
 12697              		.loc 1 1750 3 is_stmt 1 view .LVU3378
 12698              	.LBB2355:
 12699              	.LBI2355:
 747:src/xeq.c     **** 	if (get_lift())
 12700              		.loc 1 747 6 view .LVU3379
 12701              	.LBB2356:
 748:src/xeq.c     **** 		lift();
 12702              		.loc 1 748 2 view .LVU3380
 12703              	.LBB2357:
 12704              	.LBI2357:
 743:src/xeq.c     **** 	return State2.state_lift;
 12705              		.loc 1 743 12 view .LVU3381
 12706              	.LBB2358:
 744:src/xeq.c     **** }
 12707              		.loc 1 744 2 view .LVU3382
 744:src/xeq.c     **** }
 12708              		.loc 1 744 15 is_stmt 0 view .LVU3383
 12709 0098 0E4B     		ldr	r3, .L950+8
 12710 009a DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 12711              	.LBE2358:
 12712              	.LBE2357:
 748:src/xeq.c     **** 		lift();
 12713              		.loc 1 748 5 view .LVU3384
 12714 009c 5906     		lsls	r1, r3, #25
 12715 009e 11D4     		bmi	.L949
 12716              	.L930:
 12717              	.LBE2356:
 12718              	.LBE2355:
1751:src/xeq.c     **** 	} else {
 12719              		.loc 1 1751 3 is_stmt 1 view .LVU3385
 12720              	.LBB2360:
 12721              	.LBB2361:
 12722              	.LBB2362:
 12723              	.LBB2363:
1119:src/xeq.c     **** }
 12724              		.loc 1 1119 24 is_stmt 0 view .LVU3386
 12725 00a0 2A68     		ldr	r2, [r5]
 12726              	.LBE2363:
 12727              	.LBE2362:
 12728              	.LBE2361:
 12729              	.LBE2360:
1751:src/xeq.c     **** 	} else {
 12730              		.loc 1 1751 3 view .LVU3387
 12731 00a2 0D4B     		ldr	r3, .L950+12
 12732              	.LVL937:
 12733              	.LBB2369:
 12734              	.LBI2360:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12735              		.loc 1 726 6 is_stmt 1 view .LVU3388
 12736              	.LBB2368:
 727:src/xeq.c     **** }
 12737              		.loc 1 727 2 view .LVU3389
ARM GAS  /tmp/ccBFDvgN.s 			page 380


 12738              	.LBB2366:
 12739              	.LBI2362:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12740              		.loc 1 1118 5 view .LVU3390
 12741              	.LBB2364:
1119:src/xeq.c     **** }
 12742              		.loc 1 1119 2 view .LVU3391
1119:src/xeq.c     **** }
 12743              		.loc 1 1119 24 is_stmt 0 view .LVU3392
 12744 00a4 B2F8E827 		ldrh	r2, [r2, #2024]
 12745              	.LBE2364:
 12746              	.LBE2366:
 727:src/xeq.c     **** }
 12747              		.loc 1 727 2 view .LVU3393
 12748 00a8 1868     		ldr	r0, [r3]
 12749              	.LBB2367:
 12750              	.LBB2365:
1119:src/xeq.c     **** }
 12751              		.loc 1 1119 24 view .LVU3394
 12752 00aa 44F20103 		movw	r3, #16385
 12753              	.LVL938:
1119:src/xeq.c     **** }
 12754              		.loc 1 1119 24 view .LVU3395
 12755              	.LBE2365:
 12756              	.LBE2367:
 727:src/xeq.c     **** }
 12757              		.loc 1 727 2 view .LVU3396
 12758 00ae 1340     		ands	r3, r3, r2
 12759 00b0 B3F5804F 		cmp	r3, #16384
 12760 00b4 2146     		mov	r1, r4
 12761 00b6 0CBF     		ite	eq
 12762 00b8 1022     		moveq	r2, #16
 12763 00ba 0822     		movne	r2, #8
 12764 00bc FFF7FEFF 		bl	xcopy
 12765              	.LVL939:
 727:src/xeq.c     **** }
 12766              		.loc 1 727 2 view .LVU3397
 12767              	.LBE2368:
 12768              	.LBE2369:
 12769              	.LBE2342:
1769:src/xeq.c     **** 
 12770              		.loc 1 1769 1 view .LVU3398
 12771 00c0 0BB0     		add	sp, sp, #44
 12772              		.cfi_remember_state
 12773              		.cfi_def_cfa_offset 12
 12774              		@ sp needed
 12775 00c2 30BD     		pop	{r4, r5, pc}
 12776              	.L949:
 12777              		.cfi_restore_state
 12778              	.LBB2371:
 12779              	.LBB2370:
 12780              	.LBB2359:
 749:src/xeq.c     **** }
 12781              		.loc 1 749 3 is_stmt 1 view .LVU3399
 12782 00c4 FFF7FEFF 		bl	lift
 12783              	.LVL940:
 12784 00c8 EAE7     		b	.L930
ARM GAS  /tmp/ccBFDvgN.s 			page 381


 12785              	.L951:
 12786 00ca 00BF     		.align	2
 12787              	.L950:
 12788 00cc 00000000 		.word	main_ram
 12789 00d0 00000000 		.word	Error
 12790 00d4 00000000 		.word	StateWhileOn
 12791 00d8 00000000 		.word	StackBase
 12792              	.LBE2359:
 12793              	.LBE2370:
 12794              	.LBE2371:
 12795              		.cfi_endproc
 12796              	.LFE118:
 12798              		.section	.text.setX_int_sgn,"ax",%progbits
 12799              		.align	1
 12800              		.p2align 2,,3
 12801              		.global	setX_int_sgn
 12802              		.syntax unified
 12803              		.thumb
 12804              		.thumb_func
 12805              		.fpu fpv4-sp-d16
 12807              	setX_int_sgn:
 12808              	.LVL941:
 12809              	.LFB103:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12810              		.loc 1 1509 56 view -0
 12811              		.cfi_startproc
 12812              		@ args = 0, pretend = 0, frame = 0
 12813              		@ frame_needed = 0, uses_anonymous_args = 0
1510:src/xeq.c     **** }
 12814              		.loc 1 1510 2 view .LVU3401
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12815              		.loc 1 1509 56 is_stmt 0 view .LVU3402
 12816 0000 00B5     		push	{lr}
 12817              		.cfi_def_cfa_offset 4
 12818              		.cfi_offset 14, -4
 12819 0002 83B0     		sub	sp, sp, #12
 12820              		.cfi_def_cfa_offset 16
1510:src/xeq.c     **** }
 12821              		.loc 1 1510 2 view .LVU3403
 12822 0004 0B46     		mov	r3, r1
 12823 0006 0092     		str	r2, [sp]
 12824 0008 0246     		mov	r2, r0
 12825              	.LVL942:
1510:src/xeq.c     **** }
 12826              		.loc 1 1510 2 view .LVU3404
 12827 000a 6420     		movs	r0, #100
 12828              	.LVL943:
1510:src/xeq.c     **** }
 12829              		.loc 1 1510 2 view .LVU3405
 12830 000c FFF7FEFF 		bl	set_reg_n_int_sgn
 12831              	.LVL944:
1511:src/xeq.c     **** 
 12832              		.loc 1 1511 1 view .LVU3406
 12833 0010 03B0     		add	sp, sp, #12
 12834              		.cfi_def_cfa_offset 4
 12835              		@ sp needed
 12836 0012 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/ccBFDvgN.s 			page 382


 12837              		.cfi_endproc
 12838              	.LFE103:
 12840 0016 00BF     		.section	.text.zero_regs,"ax",%progbits
 12841              		.align	1
 12842              		.p2align 2,,3
 12843              		.global	zero_regs
 12844              		.syntax unified
 12845              		.thumb
 12846              		.thumb_func
 12847              		.fpu fpv4-sp-d16
 12849              	zero_regs:
 12850              	.LVL945:
 12851              	.LFB104:
1518:src/xeq.c     **** #if 0
 12852              		.loc 1 1518 39 is_stmt 1 view -0
 12853              		.cfi_startproc
 12854              		@ args = 0, pretend = 0, frame = 0
 12855              		@ frame_needed = 0, uses_anonymous_args = 0
 12856              		@ link register save eliminated.
1533:src/xeq.c     **** #endif
 12857              		.loc 1 1533 2 view .LVU3408
 12858              	.LBB2372:
 12859              	.LBI2372:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12860              		.loc 1 1118 5 view .LVU3409
 12861              	.LBB2373:
1119:src/xeq.c     **** }
 12862              		.loc 1 1119 2 view .LVU3410
1119:src/xeq.c     **** }
 12863              		.loc 1 1119 24 is_stmt 0 view .LVU3411
 12864 0000 084B     		ldr	r3, .L955
 12865 0002 1B68     		ldr	r3, [r3]
 12866 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 12867 0008 44F20103 		movw	r3, #16385
 12868 000c 1340     		ands	r3, r3, r2
 12869 000e A3F58043 		sub	r3, r3, #16384
 12870 0012 B3FA83F3 		clz	r3, r3
 12871 0016 5B09     		lsrs	r3, r3, #5
 12872              	.LBE2373:
 12873              	.LBE2372:
1533:src/xeq.c     **** #endif
 12874              		.loc 1 1533 24 view .LVU3412
 12875 0018 0333     		adds	r3, r3, #3
1533:src/xeq.c     **** #endif
 12876              		.loc 1 1533 2 view .LVU3413
 12877 001a 01FA03F2 		lsl	r2, r1, r3
 12878 001e 0021     		movs	r1, #0
 12879              	.LVL946:
1533:src/xeq.c     **** #endif
 12880              		.loc 1 1533 2 view .LVU3414
 12881 0020 FFF7FEBF 		b	xset
 12882              	.LVL947:
 12883              	.L956:
1533:src/xeq.c     **** #endif
 12884              		.loc 1 1533 2 view .LVU3415
 12885              		.align	2
 12886              	.L955:
ARM GAS  /tmp/ccBFDvgN.s 			page 383


 12887 0024 00000000 		.word	main_ram
 12888              		.cfi_endproc
 12889              	.LFE104:
 12891              		.section	.text.move_regs,"ax",%progbits
 12892              		.align	1
 12893              		.p2align 2,,3
 12894              		.global	move_regs
 12895              		.syntax unified
 12896              		.thumb
 12897              		.thumb_func
 12898              		.fpu fpv4-sp-d16
 12900              	move_regs:
 12901              	.LVL948:
 12902              	.LFB105:
1537:src/xeq.c     **** 	if (is_dblmode())
 12903              		.loc 1 1537 54 is_stmt 1 view -0
 12904              		.cfi_startproc
 12905              		@ args = 0, pretend = 0, frame = 0
 12906              		@ frame_needed = 0, uses_anonymous_args = 0
 12907              		@ link register save eliminated.
1538:src/xeq.c     **** 		n <<= 1;
 12908              		.loc 1 1538 2 view .LVU3417
 12909              	.LBB2374:
 12910              	.LBI2374:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12911              		.loc 1 1118 5 view .LVU3418
 12912              	.LBB2375:
1119:src/xeq.c     **** }
 12913              		.loc 1 1119 2 view .LVU3419
1119:src/xeq.c     **** }
 12914              		.loc 1 1119 24 is_stmt 0 view .LVU3420
 12915 0000 084B     		ldr	r3, .L960
 12916 0002 1B68     		ldr	r3, [r3]
 12917              	.LBE2375:
 12918              	.LBE2374:
1537:src/xeq.c     **** 	if (is_dblmode())
 12919              		.loc 1 1537 54 view .LVU3421
 12920 0004 10B4     		push	{r4}
 12921              		.cfi_def_cfa_offset 4
 12922              		.cfi_offset 4, -4
 12923              	.LBB2377:
 12924              	.LBB2376:
1119:src/xeq.c     **** }
 12925              		.loc 1 1119 24 view .LVU3422
 12926 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 12927 000a 44F20103 		movw	r3, #16385
 12928              	.LBE2376:
 12929              	.LBE2377:
1538:src/xeq.c     **** 		n <<= 1;
 12930              		.loc 1 1538 5 view .LVU3423
 12931 000e 2340     		ands	r3, r3, r4
 12932 0010 B3F5804F 		cmp	r3, #16384
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12933              		.loc 1 1539 3 is_stmt 1 view .LVU3424
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12934              		.loc 1 1539 5 is_stmt 0 view .LVU3425
 12935 0014 08BF     		it	eq
ARM GAS  /tmp/ccBFDvgN.s 			page 384


 12936 0016 5200     		lsleq	r2, r2, #1
 12937              	.LVL949:
1540:src/xeq.c     **** }
 12938              		.loc 1 1540 2 is_stmt 1 view .LVU3426
1541:src/xeq.c     **** 
 12939              		.loc 1 1541 1 is_stmt 0 view .LVU3427
 12940 0018 5DF8044B 		ldr	r4, [sp], #4
 12941              		.cfi_restore 4
 12942              		.cfi_def_cfa_offset 0
1540:src/xeq.c     **** }
 12943              		.loc 1 1540 2 view .LVU3428
 12944 001c D200     		lsls	r2, r2, #3
 12945              	.LVL950:
1540:src/xeq.c     **** }
 12946              		.loc 1 1540 2 view .LVU3429
 12947 001e FFF7FEBF 		b	xcopy
 12948              	.LVL951:
 12949              	.L961:
1540:src/xeq.c     **** }
 12950              		.loc 1 1540 2 view .LVU3430
 12951 0022 00BF     		.align	2
 12952              	.L960:
 12953 0024 00000000 		.word	main_ram
 12954              		.cfi_endproc
 12955              	.LFE105:
 12957              		.section	.text.zero_X,"ax",%progbits
 12958              		.align	1
 12959              		.p2align 2,,3
 12960              		.global	zero_X
 12961              		.syntax unified
 12962              		.thumb
 12963              		.thumb_func
 12964              		.fpu fpv4-sp-d16
 12966              	zero_X:
 12967              	.LFB107:
1550:src/xeq.c     **** 	set_zero(StackBase);
 12968              		.loc 1 1550 19 is_stmt 1 view -0
 12969              		.cfi_startproc
 12970              		@ args = 0, pretend = 0, frame = 0
 12971              		@ frame_needed = 0, uses_anonymous_args = 0
 12972              		@ link register save eliminated.
1551:src/xeq.c     **** }
 12973              		.loc 1 1551 2 view .LVU3432
 12974 0000 014B     		ldr	r3, .L963
 12975 0002 1868     		ldr	r0, [r3]
 12976 0004 FFF7FEBF 		b	set_zero
 12977              	.LVL952:
 12978              	.L964:
 12979              		.align	2
 12980              	.L963:
 12981 0008 00000000 		.word	StackBase
 12982              		.cfi_endproc
 12983              	.LFE107:
 12985              		.section	.text.zero_Y,"ax",%progbits
 12986              		.align	1
 12987              		.p2align 2,,3
 12988              		.global	zero_Y
ARM GAS  /tmp/ccBFDvgN.s 			page 385


 12989              		.syntax unified
 12990              		.thumb
 12991              		.thumb_func
 12992              		.fpu fpv4-sp-d16
 12994              	zero_Y:
 12995              	.LFB108:
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12996              		.loc 1 1554 19 view -0
 12997              		.cfi_startproc
 12998              		@ args = 0, pretend = 0, frame = 0
 12999              		@ frame_needed = 0, uses_anonymous_args = 0
1555:src/xeq.c     **** }
 13000              		.loc 1 1555 2 view .LVU3434
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 13001              		.loc 1 1554 19 is_stmt 0 view .LVU3435
 13002 0000 08B5     		push	{r3, lr}
 13003              		.cfi_def_cfa_offset 8
 13004              		.cfi_offset 3, -8
 13005              		.cfi_offset 14, -4
1555:src/xeq.c     **** }
 13006              		.loc 1 1555 2 view .LVU3436
 13007 0002 6520     		movs	r0, #101
 13008 0004 FFF7FEFF 		bl	get_reg_n
 13009              	.LVL953:
1556:src/xeq.c     **** 
 13010              		.loc 1 1556 1 view .LVU3437
 13011 0008 BDE80840 		pop	{r3, lr}
 13012              		.cfi_restore 14
 13013              		.cfi_restore 3
 13014              		.cfi_def_cfa_offset 0
1555:src/xeq.c     **** }
 13015              		.loc 1 1555 2 view .LVU3438
 13016 000c FFF7FEBF 		b	set_zero
 13017              	.LVL954:
 13018              		.cfi_endproc
 13019              	.LFE108:
 13021              		.section	.text.clrx,"ax",%progbits
 13022              		.align	1
 13023              		.p2align 2,,3
 13024              		.global	clrx
 13025              		.syntax unified
 13026              		.thumb
 13027              		.thumb_func
 13028              		.fpu fpv4-sp-d16
 13030              	clrx:
 13031              	.LVL955:
 13032              	.LFB109:
1558:src/xeq.c     **** 	zero_X();
 13033              		.loc 1 1558 26 is_stmt 1 view -0
 13034              		.cfi_startproc
 13035              		@ args = 0, pretend = 0, frame = 0
 13036              		@ frame_needed = 0, uses_anonymous_args = 0
1559:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 13037              		.loc 1 1559 2 view .LVU3440
 13038              	.LBB2378:
 13039              	.LBI2378:
1550:src/xeq.c     **** 	set_zero(StackBase);
ARM GAS  /tmp/ccBFDvgN.s 			page 386


 13040              		.loc 1 1550 6 view .LVU3441
 13041              	.LBB2379:
1551:src/xeq.c     **** }
 13042              		.loc 1 1551 2 view .LVU3442
 13043 0000 1A4B     		ldr	r3, .L973
 13044              	.LBE2379:
 13045              	.LBE2378:
1558:src/xeq.c     **** 	zero_X();
 13046              		.loc 1 1558 26 is_stmt 0 view .LVU3443
 13047 0002 10B5     		push	{r4, lr}
 13048              		.cfi_def_cfa_offset 8
 13049              		.cfi_offset 4, -8
 13050              		.cfi_offset 14, -4
1561:src/xeq.c     **** 		zero_Y();
 13051              		.loc 1 1561 6 view .LVU3444
 13052 0004 1A4C     		ldr	r4, .L973+4
 13053              	.LBB2381:
 13054              	.LBB2380:
1551:src/xeq.c     **** }
 13055              		.loc 1 1551 2 view .LVU3445
 13056 0006 1868     		ldr	r0, [r3]
 13057              	.LVL956:
1551:src/xeq.c     **** }
 13058              		.loc 1 1551 2 view .LVU3446
 13059 0008 FFF7FEFF 		bl	set_zero
 13060              	.LVL957:
 13061              	.LBE2380:
 13062              	.LBE2381:
1561:src/xeq.c     **** 		zero_Y();
 13063              		.loc 1 1561 2 is_stmt 1 view .LVU3447
1561:src/xeq.c     **** 		zero_Y();
 13064              		.loc 1 1561 6 is_stmt 0 view .LVU3448
 13065 000c 2368     		ldr	r3, [r4]
 13066 000e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
1561:src/xeq.c     **** 		zero_Y();
 13067              		.loc 1 1561 5 view .LVU3449
 13068 0012 03F04103 		and	r3, r3, #65
 13069 0016 412B     		cmp	r3, #65
 13070 0018 05D0     		beq	.L971
1571:src/xeq.c     **** }
 13071              		.loc 1 1571 2 is_stmt 1 view .LVU3450
 13072              	.LBB2382:
 13073              	.LBI2382:
 771:src/xeq.c     ****     State2.state_lift = 0;
 13074              		.loc 1 771 13 view .LVU3451
 13075              	.LBB2383:
 772:src/xeq.c     **** }
 13076              		.loc 1 772 5 view .LVU3452
 772:src/xeq.c     **** }
 13077              		.loc 1 772 23 is_stmt 0 view .LVU3453
 13078 001a 164B     		ldr	r3, .L973+8
 13079 001c DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13080 001e 6FF38612 		bfc	r2, #6, #1
 13081 0022 DA75     		strb	r2, [r3, #23]
 13082              	.LBE2383:
 13083              	.LBE2382:
1572:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 387


 13084              		.loc 1 1572 1 view .LVU3454
 13085 0024 10BD     		pop	{r4, pc}
 13086              	.L971:
1562:src/xeq.c     **** 		if (POLAR_DISPLAY) {
 13087              		.loc 1 1562 3 is_stmt 1 view .LVU3455
 13088              	.LBB2385:
 13089              	.LBI2385:
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 13090              		.loc 1 1554 6 view .LVU3456
 13091              	.LBB2386:
1555:src/xeq.c     **** }
 13092              		.loc 1 1555 2 view .LVU3457
 13093 0026 6520     		movs	r0, #101
 13094 0028 FFF7FEFF 		bl	get_reg_n
 13095              	.LVL958:
 13096 002c FFF7FEFF 		bl	set_zero
 13097              	.LVL959:
 13098              	.LBE2386:
 13099              	.LBE2385:
1563:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13100              		.loc 1 1563 3 view .LVU3458
1563:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13101              		.loc 1 1563 7 is_stmt 0 view .LVU3459
 13102 0030 2368     		ldr	r3, [r4]
1563:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13103              		.loc 1 1563 6 view .LVU3460
 13104 0032 93F9AC27 		ldrsb	r2, [r3, #1964]
 13105 0036 002A     		cmp	r2, #0
 13106 0038 0BDB     		blt	.L972
 13107              	.L969:
1567:src/xeq.c     **** 		CLEAR_IMAG;
 13108              		.loc 1 1567 3 is_stmt 1 view .LVU3461
1568:src/xeq.c     **** 	}
 13109              		.loc 1 1568 3 view .LVU3462
1567:src/xeq.c     **** 		CLEAR_IMAG;
 13110              		.loc 1 1567 3 is_stmt 0 view .LVU3463
 13111 003a 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 13112 003e 22F00602 		bic	r2, r2, #6
 13113 0042 83F8AC27 		strb	r2, [r3, #1964]
1571:src/xeq.c     **** }
 13114              		.loc 1 1571 2 is_stmt 1 view .LVU3464
 13115              	.LBB2387:
 771:src/xeq.c     ****     State2.state_lift = 0;
 13116              		.loc 1 771 13 view .LVU3465
 13117              	.LBB2384:
 772:src/xeq.c     **** }
 13118              		.loc 1 772 5 view .LVU3466
 772:src/xeq.c     **** }
 13119              		.loc 1 772 23 is_stmt 0 view .LVU3467
 13120 0046 0B4B     		ldr	r3, .L973+8
 13121 0048 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13122 004a 6FF38612 		bfc	r2, #6, #1
 13123 004e DA75     		strb	r2, [r3, #23]
 13124              	.LBE2384:
 13125              	.LBE2387:
1572:src/xeq.c     **** 
 13126              		.loc 1 1572 1 view .LVU3468
ARM GAS  /tmp/ccBFDvgN.s 			page 388


 13127 0050 10BD     		pop	{r4, pc}
 13128              	.L972:
1564:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
 13129              		.loc 1 1564 4 is_stmt 1 view .LVU3469
 13130 0052 6E20     		movs	r0, #110
 13131 0054 FFF7FEFF 		bl	get_reg_n
 13132              	.LVL960:
 13133 0058 FFF7FEFF 		bl	set_zero
 13134              	.LVL961:
1565:src/xeq.c     **** 		}
 13135              		.loc 1 1565 4 view .LVU3470
 13136 005c 6F20     		movs	r0, #111
 13137 005e FFF7FEFF 		bl	get_reg_n
 13138              	.LVL962:
 13139 0062 FFF7FEFF 		bl	set_zero
 13140              	.LVL963:
 13141 0066 2368     		ldr	r3, [r4]
 13142 0068 E7E7     		b	.L969
 13143              	.L974:
 13144 006a 00BF     		.align	2
 13145              	.L973:
 13146 006c 00000000 		.word	StackBase
 13147 0070 00000000 		.word	main_ram
 13148 0074 00000000 		.word	StateWhileOn
 13149              		.cfi_endproc
 13150              	.LFE109:
 13152              		.section	.text.clrstk,"ax",%progbits
 13153              		.align	1
 13154              		.p2align 2,,3
 13155              		.global	clrstk
 13156              		.syntax unified
 13157              		.thumb
 13158              		.thumb_func
 13159              		.fpu fpv4-sp-d16
 13161              	clrstk:
 13162              	.LVL964:
 13163              	.LFB110:
1576:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13164              		.loc 1 1576 28 view -0
 13165              		.cfi_startproc
 13166              		@ args = 0, pretend = 0, frame = 0
 13167              		@ frame_needed = 0, uses_anonymous_args = 0
1577:src/xeq.c     **** 	set_lift();
 13168              		.loc 1 1577 2 view .LVU3472
1576:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13169              		.loc 1 1576 28 is_stmt 0 view .LVU3473
 13170 0000 08B5     		push	{r3, lr}
 13171              		.cfi_def_cfa_offset 8
 13172              		.cfi_offset 3, -8
 13173              		.cfi_offset 14, -4
 13174              	.LBB2388:
 13175              	.LBB2389:
 713:src/xeq.c     **** 		return 4;
 13176              		.loc 1 713 8 view .LVU3474
 13177 0002 164B     		ldr	r3, .L982
 13178              	.LBE2389:
 13179              	.LBE2388:
ARM GAS  /tmp/ccBFDvgN.s 			page 389


1577:src/xeq.c     **** 	set_lift();
 13180              		.loc 1 1577 2 view .LVU3475
 13181 0004 164A     		ldr	r2, .L982+4
 13182              	.LBB2395:
 13183              	.LBB2392:
 713:src/xeq.c     **** 		return 4;
 13184              		.loc 1 713 8 view .LVU3476
 13185 0006 1B68     		ldr	r3, [r3]
 13186              	.LBE2392:
 13187              	.LBE2395:
1577:src/xeq.c     **** 	set_lift();
 13188              		.loc 1 1577 2 view .LVU3477
 13189 0008 1068     		ldr	r0, [r2]
 13190              	.LVL965:
 13191              	.LBB2396:
 13192              	.LBI2388:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13193              		.loc 1 712 5 is_stmt 1 view .LVU3478
 13194              	.LBB2393:
 713:src/xeq.c     **** 		return 4;
 13195              		.loc 1 713 2 view .LVU3479
 713:src/xeq.c     **** 		return 4;
 13196              		.loc 1 713 6 is_stmt 0 view .LVU3480
 13197 000a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 13198              		.loc 1 713 5 view .LVU3481
 13199 000e 1207     		lsls	r2, r2, #28
 13200 0010 22D5     		bpl	.L977
 13201              	.LBB2390:
 13202              	.LBI2390:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 13203              		.loc 1 185 5 is_stmt 1 view .LVU3482
 13204              	.LBB2391:
 186:src/xeq.c     **** }
 13205              		.loc 1 186 2 view .LVU3483
 186:src/xeq.c     **** }
 13206              		.loc 1 186 9 is_stmt 0 view .LVU3484
 13207 0012 B3F8E027 		ldrh	r2, [r3, #2016]
 13208              	.LBE2391:
 13209              	.LBE2390:
 713:src/xeq.c     **** 		return 4;
 13210              		.loc 1 713 27 view .LVU3485
 13211 0016 920B     		lsrs	r2, r2, #14
 13212 0018 032A     		cmp	r2, #3
 13213 001a 15D0     		beq	.L981
 715:src/xeq.c     **** }
 13214              		.loc 1 715 9 view .LVU3486
 13215 001c 0822     		movs	r2, #8
 13216              	.L976:
 13217              	.LVL966:
 715:src/xeq.c     **** }
 13218              		.loc 1 715 9 view .LVU3487
 13219              	.LBE2393:
 13220              	.LBE2396:
 13221              	.LBB2397:
 13222              	.LBI2397:
1518:src/xeq.c     **** #if 0
ARM GAS  /tmp/ccBFDvgN.s 			page 390


 13223              		.loc 1 1518 6 is_stmt 1 view .LVU3488
 13224              	.LBB2398:
1533:src/xeq.c     **** #endif
 13225              		.loc 1 1533 2 view .LVU3489
 13226              	.LBB2399:
 13227              	.LBI2399:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13228              		.loc 1 1118 5 view .LVU3490
 13229              	.LBB2400:
1119:src/xeq.c     **** }
 13230              		.loc 1 1119 2 view .LVU3491
1119:src/xeq.c     **** }
 13231              		.loc 1 1119 24 is_stmt 0 view .LVU3492
 13232 001e B3F8E817 		ldrh	r1, [r3, #2024]
 13233 0022 44F20103 		movw	r3, #16385
 13234 0026 0B40     		ands	r3, r3, r1
 13235 0028 A3F58043 		sub	r3, r3, #16384
 13236 002c B3FA83F3 		clz	r3, r3
 13237 0030 5B09     		lsrs	r3, r3, #5
 13238              	.LBE2400:
 13239              	.LBE2399:
1533:src/xeq.c     **** #endif
 13240              		.loc 1 1533 24 view .LVU3493
 13241 0032 0333     		adds	r3, r3, #3
1533:src/xeq.c     **** #endif
 13242              		.loc 1 1533 2 view .LVU3494
 13243 0034 9A40     		lsls	r2, r2, r3
 13244              	.LVL967:
1533:src/xeq.c     **** #endif
 13245              		.loc 1 1533 2 view .LVU3495
 13246 0036 0021     		movs	r1, #0
 13247 0038 FFF7FEFF 		bl	xset
 13248              	.LVL968:
1533:src/xeq.c     **** #endif
 13249              		.loc 1 1533 2 view .LVU3496
 13250              	.LBE2398:
 13251              	.LBE2397:
1578:src/xeq.c     **** }
 13252              		.loc 1 1578 2 is_stmt 1 view .LVU3497
 13253              	.LBB2401:
 13254              	.LBI2401:
 767:src/xeq.c     ****     State2.state_lift = 1;
 13255              		.loc 1 767 6 view .LVU3498
 13256              	.LBB2402:
 768:src/xeq.c     **** }
 13257              		.loc 1 768 5 view .LVU3499
 768:src/xeq.c     **** }
 13258              		.loc 1 768 23 is_stmt 0 view .LVU3500
 13259 003c 094A     		ldr	r2, .L982+8
 13260 003e D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 13261 0040 43F04003 		orr	r3, r3, #64
 13262 0044 D375     		strb	r3, [r2, #23]
 13263              	.LBE2402:
 13264              	.LBE2401:
1579:src/xeq.c     **** 
 13265              		.loc 1 1579 1 view .LVU3501
 13266 0046 08BD     		pop	{r3, pc}
ARM GAS  /tmp/ccBFDvgN.s 			page 391


 13267              	.L981:
 13268              	.LBB2403:
 13269              	.LBB2394:
 713:src/xeq.c     **** 		return 4;
 13270              		.loc 1 713 44 view .LVU3502
 13271 0048 074A     		ldr	r2, .L982+12
 713:src/xeq.c     **** 		return 4;
 13272              		.loc 1 713 41 view .LVU3503
 13273 004a 92F90120 		ldrsb	r2, [r2, #1]
 13274 004e 002A     		cmp	r2, #0
 714:src/xeq.c     **** 	return 8;
 13275              		.loc 1 714 10 view .LVU3504
 13276 0050 B4BF     		ite	lt
 13277 0052 0822     		movlt	r2, #8
 13278 0054 0422     		movge	r2, #4
 13279 0056 E2E7     		b	.L976
 13280              	.L977:
 13281 0058 0422     		movs	r2, #4
 13282 005a E0E7     		b	.L976
 13283              	.L983:
 13284              		.align	2
 13285              	.L982:
 13286 005c 00000000 		.word	main_ram
 13287 0060 00000000 		.word	StackBase
 13288 0064 00000000 		.word	StateWhileOn
 13289 0068 00000000 		.word	XromParams
 13290              	.LBE2394:
 13291              	.LBE2403:
 13292              		.cfi_endproc
 13293              	.LFE110:
 13295              		.section	.text.clrreg,"ax",%progbits
 13296              		.align	1
 13297              		.p2align 2,,3
 13298              		.global	clrreg
 13299              		.syntax unified
 13300              		.thumb
 13301              		.thumb_func
 13302              		.fpu fpv4-sp-d16
 13304              	clrreg:
 13305              	.LVL969:
 13306              	.LFB111:
1584:src/xeq.c     **** 	const int local = local_regs();
 13307              		.loc 1 1584 28 is_stmt 1 view -0
 13308              		.cfi_startproc
 13309              		@ args = 0, pretend = 0, frame = 0
 13310              		@ frame_needed = 0, uses_anonymous_args = 0
1585:src/xeq.c     **** 	process_cmdline_set_lift();
 13311              		.loc 1 1585 2 view .LVU3506
 13312              	.LBB2404:
 13313              	.LBI2404:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 13314              		.loc 1 233 5 view .LVU3507
 13315              	.LBE2404:
 234:src/xeq.c     **** }
 13316              		.loc 1 234 2 view .LVU3508
 13317              	.LBB2435:
 13318              	.LBB2405:
ARM GAS  /tmp/ccBFDvgN.s 			page 392


 13319              	.LBI2405:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 13320              		.loc 1 225 5 view .LVU3509
 13321              	.LBB2406:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13322              		.loc 1 226 2 view .LVU3510
 13323              	.LBB2407:
 13324              	.LBI2407:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13325              		.loc 1 1118 5 view .LVU3511
 13326              	.LBB2408:
1119:src/xeq.c     **** }
 13327              		.loc 1 1119 2 view .LVU3512
 13328              	.LBE2408:
 13329              	.LBE2407:
 13330              	.LBE2406:
 13331              	.LBE2405:
 13332              	.LBE2435:
1584:src/xeq.c     **** 	const int local = local_regs();
 13333              		.loc 1 1584 28 is_stmt 0 view .LVU3513
 13334 0000 70B5     		push	{r4, r5, r6, lr}
 13335              		.cfi_def_cfa_offset 16
 13336              		.cfi_offset 4, -16
 13337              		.cfi_offset 5, -12
 13338              		.cfi_offset 6, -8
 13339              		.cfi_offset 14, -4
 13340              	.LBB2436:
 13341              	.LBB2431:
 13342              	.LBB2427:
 13343              	.LBB2412:
 13344              	.LBB2409:
1119:src/xeq.c     **** }
 13345              		.loc 1 1119 12 view .LVU3514
 13346 0002 464C     		ldr	r4, .L1004
 13347 0004 2368     		ldr	r3, [r4]
 13348              	.LVL970:
1119:src/xeq.c     **** }
 13349              		.loc 1 1119 12 view .LVU3515
 13350              	.LBE2409:
 13351              	.LBE2412:
 227:src/xeq.c     **** }
 13352              		.loc 1 227 2 is_stmt 1 view .LVU3516
 13353              	.LBB2413:
 13354              	.LBI2413:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 13355              		.loc 1 217 5 view .LVU3517
 13356              	.LBB2414:
 218:src/xeq.c     **** }
 13357              		.loc 1 218 2 view .LVU3518
 218:src/xeq.c     **** }
 13358              		.loc 1 218 9 is_stmt 0 view .LVU3519
 13359 0006 B3F9DE27 		ldrsh	r2, [r3, #2014]
 218:src/xeq.c     **** }
 13360              		.loc 1 218 57 view .LVU3520
 13361 000a 002A     		cmp	r2, #0
 13362 000c 58DB     		blt	.L1000
 13363              	.LVL971:
ARM GAS  /tmp/ccBFDvgN.s 			page 393


 218:src/xeq.c     **** }
 13364              		.loc 1 218 57 view .LVU3521
 13365              	.LBE2414:
 13366              	.LBE2413:
 13367              	.LBE2427:
 13368              	.LBE2431:
 13369              	.LBE2436:
1586:src/xeq.c     **** 
 13370              		.loc 1 1586 2 is_stmt 1 view .LVU3522
 13371              	.LBB2437:
 13372              	.LBI2437:
1332:src/xeq.c     **** 	process_cmdline();
 13373              		.loc 1 1332 6 view .LVU3523
 13374              	.LBE2437:
1333:src/xeq.c     **** 	set_lift();
 13375              		.loc 1 1333 2 view .LVU3524
 13376              	.LBB2448:
 13377              	.LBB2438:
 13378              	.LBI2438:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 13379              		.loc 1 1226 6 view .LVU3525
 13380              	.LBB2439:
1227:src/xeq.c     **** 
 13381              		.loc 1 1227 2 view .LVU3526
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13382              		.loc 1 1229 2 view .LVU3527
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13383              		.loc 1 1229 6 is_stmt 0 view .LVU3528
 13384 000e 444D     		ldr	r5, .L1004+4
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13385              		.loc 1 1229 5 view .LVU3529
 13386 0010 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13387              	.LVL972:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13388              		.loc 1 1229 5 view .LVU3530
 13389              	.LBE2439:
 13390              	.LBE2438:
 13391              	.LBE2448:
 13392              	.LBB2449:
 13393              	.LBB2432:
 13394              	.LBB2428:
 13395              	.LBB2420:
 13396              	.LBB2415:
 13397 0012 0026     		movs	r6, #0
 13398              	.LBE2415:
 13399              	.LBE2420:
 13400              	.LBE2428:
 13401              	.LBE2432:
 13402              	.LBE2449:
 13403              	.LBB2450:
 13404              	.LBB2443:
 13405              	.LBB2440:
 13406 0014 002B     		cmp	r3, #0
 13407 0016 69D1     		bne	.L1001
 13408              	.LVL973:
 13409              	.L986:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
ARM GAS  /tmp/ccBFDvgN.s 			page 394


 13410              		.loc 1 1229 5 view .LVU3531
 13411              	.LBE2440:
 13412              	.LBE2443:
 13413              	.LBE2450:
1334:src/xeq.c     **** }
 13414              		.loc 1 1334 2 is_stmt 1 view .LVU3532
 13415              	.LBB2451:
 13416              	.LBB2444:
 13417              	.LBI2444:
 767:src/xeq.c     ****     State2.state_lift = 1;
 13418              		.loc 1 767 6 view .LVU3533
 13419              	.LBB2445:
 768:src/xeq.c     **** }
 13420              		.loc 1 768 5 view .LVU3534
 768:src/xeq.c     **** }
 13421              		.loc 1 768 23 is_stmt 0 view .LVU3535
 13422 0018 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 13423 001a 43F04003 		orr	r3, r3, #64
 13424 001e EB75     		strb	r3, [r5, #23]
 13425              	.LBE2445:
 13426              	.LBE2444:
 13427              	.LBE2451:
1589:src/xeq.c     **** 
 13428              		.loc 1 1589 2 is_stmt 1 view .LVU3536
 13429 0020 0020     		movs	r0, #0
 13430 0022 FFF7FEFF 		bl	get_reg_n
 13431              	.LVL974:
 13432              	.LBB2452:
 13433              	.LBB2453:
 13434              	.LBB2454:
 13435              	.LBB2455:
 13436              	.LBB2456:
1119:src/xeq.c     **** }
 13437              		.loc 1 1119 12 is_stmt 0 view .LVU3537
 13438 0026 2168     		ldr	r1, [r4]
1119:src/xeq.c     **** }
 13439              		.loc 1 1119 24 view .LVU3538
 13440 0028 B1F8E827 		ldrh	r2, [r1, #2024]
 13441 002c 44F20103 		movw	r3, #16385
 13442 0030 1340     		ands	r3, r3, r2
 13443              	.LBE2456:
 13444              	.LBE2455:
 13445              	.LBE2454:
 13446              	.LBE2453:
 13447              	.LBI2452:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 13448              		.loc 1 253 14 is_stmt 1 view .LVU3539
 13449              	.LBE2452:
 254:src/xeq.c     **** }
 13450              		.loc 1 254 2 view .LVU3540
 13451              	.LVL975:
 13452              	.LBB2471:
 13453              	.LBB2467:
 13454              	.LBI2453:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 13455              		.loc 1 241 14 view .LVU3541
 13456              	.LBB2463:
ARM GAS  /tmp/ccBFDvgN.s 			page 395


 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13457              		.loc 1 242 2 view .LVU3542
 13458              	.LBB2458:
 13459              	.LBI2455:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13460              		.loc 1 1118 5 view .LVU3543
 13461              	.LBB2457:
1119:src/xeq.c     **** }
 13462              		.loc 1 1119 2 view .LVU3544
 13463              	.LBE2457:
 13464              	.LBE2458:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13465              		.loc 1 242 5 is_stmt 0 view .LVU3545
 13466 0032 B3F5804F 		cmp	r3, #16384
 13467              	.LBB2459:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13468              		.loc 1 243 3 is_stmt 1 view .LVU3546
 244:src/xeq.c     **** 	}
 13469              		.loc 1 244 3 view .LVU3547
 13470              	.LVL976:
 244:src/xeq.c     **** 	}
 13471              		.loc 1 244 3 is_stmt 0 view .LVU3548
 13472              	.LBE2459:
 13473              	.LBE2463:
 13474              	.LBE2467:
 13475              	.LBE2471:
 13476              	.LBB2472:
 13477              	.LBI2472:
1518:src/xeq.c     **** #if 0
 13478              		.loc 1 1518 6 is_stmt 1 view .LVU3549
 13479              	.LBB2473:
1533:src/xeq.c     **** #endif
 13480              		.loc 1 1533 2 view .LVU3550
 13481              	.LBB2474:
 13482              	.LBI2474:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13483              		.loc 1 1118 5 view .LVU3551
 13484              	.LBB2475:
1119:src/xeq.c     **** }
 13485              		.loc 1 1119 2 view .LVU3552
 13486              	.LBE2475:
 13487              	.LBE2474:
 13488              	.LBE2473:
 13489              	.LBE2472:
 13490              	.LBB2483:
 13491              	.LBB2468:
 13492              	.LBB2464:
 13493              	.LBB2460:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13494              		.loc 1 243 24 is_stmt 0 view .LVU3553
 13495 0036 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 13496              	.LBE2460:
 13497              	.LBE2464:
 13498              	.LBE2468:
 13499              	.LBE2483:
 13500              	.LBB2484:
 13501              	.LBB2480:
ARM GAS  /tmp/ccBFDvgN.s 			page 396


 13502              	.LBB2478:
 13503              	.LBB2476:
1119:src/xeq.c     **** }
 13504              		.loc 1 1119 24 view .LVU3554
 13505 003a A3F58043 		sub	r3, r3, #16384
 13506 003e B3FA83F3 		clz	r3, r3
 13507              	.LBE2476:
 13508              	.LBE2478:
 13509              	.LBE2480:
 13510              	.LBE2484:
 13511              	.LBB2485:
 13512              	.LBB2469:
 13513              	.LBB2465:
 13514              	.LBB2461:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13515              		.loc 1 243 13 view .LVU3555
 13516 0042 08BF     		it	eq
 13517 0044 0C3A     		subeq	r2, r2, #12
 13518              	.LBE2461:
 13519              	.LBE2465:
 13520              	.LBE2469:
 13521              	.LBE2485:
 13522              	.LBB2486:
 13523              	.LBB2481:
 13524              	.LBB2479:
 13525              	.LBB2477:
1119:src/xeq.c     **** }
 13526              		.loc 1 1119 24 view .LVU3556
 13527 0046 4FEA5313 		lsr	r3, r3, #5
 13528              	.LBE2477:
 13529              	.LBE2479:
 13530              	.LBE2481:
 13531              	.LBE2486:
 13532              	.LBB2487:
 13533              	.LBB2470:
 13534              	.LBB2466:
 13535              	.LBB2462:
 244:src/xeq.c     **** 	}
 13536              		.loc 1 244 67 view .LVU3557
 13537 004a 08BF     		it	eq
 13538 004c 5210     		asreq	r2, r2, #1
 13539              	.LBE2462:
 13540              	.LBE2466:
 13541              	.LBE2470:
 13542              	.LBE2487:
 13543              	.LBB2488:
 13544              	.LBB2482:
1533:src/xeq.c     **** #endif
 13545              		.loc 1 1533 24 view .LVU3558
 13546 004e 0333     		adds	r3, r3, #3
1533:src/xeq.c     **** #endif
 13547              		.loc 1 1533 2 view .LVU3559
 13548 0050 9A40     		lsls	r2, r2, r3
 13549 0052 0021     		movs	r1, #0
 13550 0054 FFF7FEFF 		bl	xset
 13551              	.LVL977:
1533:src/xeq.c     **** #endif
ARM GAS  /tmp/ccBFDvgN.s 			page 397


 13552              		.loc 1 1533 2 view .LVU3560
 13553              	.LBE2482:
 13554              	.LBE2488:
1592:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
 13555              		.loc 1 1592 2 is_stmt 1 view .LVU3561
 13556              	.LBB2489:
 13557              	.LBI2489:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13558              		.loc 1 712 5 view .LVU3562
 13559              	.LBB2490:
 713:src/xeq.c     **** 		return 4;
 13560              		.loc 1 713 2 view .LVU3563
 713:src/xeq.c     **** 		return 4;
 13561              		.loc 1 713 8 is_stmt 0 view .LVU3564
 13562 0058 2368     		ldr	r3, [r4]
 713:src/xeq.c     **** 		return 4;
 13563              		.loc 1 713 6 view .LVU3565
 13564 005a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 13565              		.loc 1 713 5 view .LVU3566
 13566 005e 1207     		lsls	r2, r2, #28
 13567 0060 1CD5     		bpl	.L989
 13568              	.LBB2491:
 13569              	.LBI2491:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 13570              		.loc 1 185 5 is_stmt 1 view .LVU3567
 13571              	.LBB2492:
 186:src/xeq.c     **** }
 13572              		.loc 1 186 2 view .LVU3568
 186:src/xeq.c     **** }
 13573              		.loc 1 186 9 is_stmt 0 view .LVU3569
 13574 0062 B3F8E037 		ldrh	r3, [r3, #2016]
 13575              	.LBE2492:
 13576              	.LBE2491:
 713:src/xeq.c     **** 		return 4;
 13577              		.loc 1 713 27 view .LVU3570
 13578 0066 9B0B     		lsrs	r3, r3, #14
 13579 0068 032B     		cmp	r3, #3
 13580 006a 12D0     		beq	.L1002
 13581              	.L990:
 13582              	.LBE2490:
 13583              	.LBE2489:
1596:src/xeq.c     **** 
 13584              		.loc 1 1596 2 is_stmt 1 view .LVU3571
 13585 006c 6E20     		movs	r0, #110
 13586 006e FFF7FEFF 		bl	get_reg_n
 13587              	.LVL978:
 13588              	.LBB2494:
 13589              	.LBI2494:
1518:src/xeq.c     **** #if 0
 13590              		.loc 1 1518 6 view .LVU3572
 13591              	.LBB2495:
1533:src/xeq.c     **** #endif
 13592              		.loc 1 1533 2 view .LVU3573
 13593              	.LBB2496:
 13594              	.LBI2496:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/ccBFDvgN.s 			page 398


 13595              		.loc 1 1118 5 view .LVU3574
 13596              	.LBB2497:
1119:src/xeq.c     **** }
 13597              		.loc 1 1119 2 view .LVU3575
1119:src/xeq.c     **** }
 13598              		.loc 1 1119 24 is_stmt 0 view .LVU3576
 13599 0072 2368     		ldr	r3, [r4]
 13600 0074 B3F8E827 		ldrh	r2, [r3, #2024]
 13601 0078 44F20105 		movw	r5, #16385
 13602 007c 2A40     		ands	r2, r2, r5
 13603              	.LBE2497:
 13604              	.LBE2496:
1533:src/xeq.c     **** #endif
 13605              		.loc 1 1533 2 view .LVU3577
 13606 007e B2F5804F 		cmp	r2, #16384
 13607 0082 0CBF     		ite	eq
 13608 0084 2022     		moveq	r2, #32
 13609 0086 1022     		movne	r2, #16
 13610 0088 0021     		movs	r1, #0
 13611 008a FFF7FEFF 		bl	xset
 13612              	.LVL979:
1533:src/xeq.c     **** #endif
 13613              		.loc 1 1533 2 view .LVU3578
 13614              	.LBE2495:
 13615              	.LBE2494:
1599:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13616              		.loc 1 1599 2 is_stmt 1 view .LVU3579
1599:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13617              		.loc 1 1599 5 is_stmt 0 view .LVU3580
 13618 008e 86BB     		cbnz	r6, .L1003
1601:src/xeq.c     **** 
 13619              		.loc 1 1601 1 view .LVU3581
 13620 0090 70BD     		pop	{r4, r5, r6, pc}
 13621              	.L1002:
 13622              	.LBB2498:
 13623              	.LBB2493:
 713:src/xeq.c     **** 		return 4;
 13624              		.loc 1 713 44 view .LVU3582
 13625 0092 244B     		ldr	r3, .L1004+8
 713:src/xeq.c     **** 		return 4;
 13626              		.loc 1 713 41 view .LVU3583
 13627 0094 93F90130 		ldrsb	r3, [r3, #1]
 13628 0098 002B     		cmp	r3, #0
 13629 009a E7DB     		blt	.L990
 13630              	.L989:
 714:src/xeq.c     **** 	return 8;
 13631              		.loc 1 714 3 is_stmt 1 view .LVU3584
 13632              	.LBE2493:
 13633              	.LBE2498:
1593:src/xeq.c     **** 
 13634              		.loc 1 1593 3 view .LVU3585
 13635 009c 6820     		movs	r0, #104
 13636 009e FFF7FEFF 		bl	get_reg_n
 13637              	.LVL980:
 13638              	.LBB2499:
 13639              	.LBI2499:
1518:src/xeq.c     **** #if 0
ARM GAS  /tmp/ccBFDvgN.s 			page 399


 13640              		.loc 1 1518 6 view .LVU3586
 13641              	.LBB2500:
1533:src/xeq.c     **** #endif
 13642              		.loc 1 1533 2 view .LVU3587
 13643              	.LBB2501:
 13644              	.LBI2501:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13645              		.loc 1 1118 5 view .LVU3588
 13646              	.LBB2502:
1119:src/xeq.c     **** }
 13647              		.loc 1 1119 2 view .LVU3589
1119:src/xeq.c     **** }
 13648              		.loc 1 1119 24 is_stmt 0 view .LVU3590
 13649 00a2 2368     		ldr	r3, [r4]
 13650 00a4 B3F8E837 		ldrh	r3, [r3, #2024]
 13651 00a8 44F20102 		movw	r2, #16385
 13652 00ac 1A40     		ands	r2, r2, r3
 13653              	.LBE2502:
 13654              	.LBE2501:
1533:src/xeq.c     **** #endif
 13655              		.loc 1 1533 2 view .LVU3591
 13656 00ae B2F5804F 		cmp	r2, #16384
 13657 00b2 0CBF     		ite	eq
 13658 00b4 4022     		moveq	r2, #64
 13659 00b6 2022     		movne	r2, #32
 13660 00b8 0021     		movs	r1, #0
 13661 00ba FFF7FEFF 		bl	xset
 13662              	.LVL981:
1535:src/xeq.c     **** 
 13663              		.loc 1 1535 1 view .LVU3592
 13664 00be D5E7     		b	.L990
 13665              	.LVL982:
 13666              	.L1000:
1535:src/xeq.c     **** 
 13667              		.loc 1 1535 1 view .LVU3593
 13668              	.LBE2500:
 13669              	.LBE2499:
 13670              	.LBB2503:
 13671              	.LBB2433:
 13672              	.LBB2429:
 13673              	.LBB2421:
 13674              	.LBB2410:
1119:src/xeq.c     **** }
 13675              		.loc 1 1119 24 view .LVU3594
 13676 00c0 B3F8E867 		ldrh	r6, [r3, #2024]
 13677              	.LBE2410:
 13678              	.LBE2421:
 13679              	.LBB2422:
 13680              	.LBB2416:
 218:src/xeq.c     **** }
 13681              		.loc 1 218 25 view .LVU3595
 13682 00c4 1849     		ldr	r1, .L1004+12
 13683              	.LBE2416:
 13684              	.LBE2422:
 13685              	.LBE2429:
 13686              	.LBE2433:
 13687              	.LBE2503:
ARM GAS  /tmp/ccBFDvgN.s 			page 400


 13688              	.LBB2504:
 13689              	.LBB2446:
 13690              	.LBB2441:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13691              		.loc 1 1229 6 view .LVU3596
 13692 00c6 164D     		ldr	r5, .L1004+4
 13693              	.LBE2441:
 13694              	.LBE2446:
 13695              	.LBE2504:
 13696              	.LBB2505:
 13697              	.LBB2434:
 13698              	.LBB2430:
 13699              	.LBB2423:
 13700              	.LBB2417:
 218:src/xeq.c     **** }
 13701              		.loc 1 218 25 view .LVU3597
 13702 00c8 0968     		ldr	r1, [r1]
 13703              	.LBE2417:
 13704              	.LBE2423:
 13705              	.LBB2424:
 13706              	.LBB2411:
1119:src/xeq.c     **** }
 13707              		.loc 1 1119 24 view .LVU3598
 13708 00ca 44F20103 		movw	r3, #16385
 13709              	.LVL983:
1119:src/xeq.c     **** }
 13710              		.loc 1 1119 24 view .LVU3599
 13711              	.LBE2411:
 13712              	.LBE2424:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13713              		.loc 1 226 73 view .LVU3600
 13714 00ce 3340     		ands	r3, r3, r6
 13715 00d0 A3F58043 		sub	r3, r3, #16384
 13716              	.LBB2425:
 13717              	.LBB2418:
 218:src/xeq.c     **** }
 13718              		.loc 1 218 57 view .LVU3601
 13719 00d4 31F81260 		ldrh	r6, [r1, r2, lsl #1]
 13720              	.LBE2418:
 13721              	.LBE2425:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13722              		.loc 1 226 73 view .LVU3602
 13723 00d8 B3FA83F3 		clz	r3, r3
 13724 00dc 5B09     		lsrs	r3, r3, #5
 13725 00de 0233     		adds	r3, r3, #2
 13726              	.LBB2426:
 13727              	.LBB2419:
 218:src/xeq.c     **** }
 13728              		.loc 1 218 57 view .LVU3603
 13729 00e0 C6F30B06 		ubfx	r6, r6, #0, #12
 13730 00e4 1E41     		asrs	r6, r6, r3
 13731              	.LVL984:
 218:src/xeq.c     **** }
 13732              		.loc 1 218 57 view .LVU3604
 13733              	.LBE2419:
 13734              	.LBE2426:
 13735              	.LBE2430:
ARM GAS  /tmp/ccBFDvgN.s 			page 401


 13736              	.LBE2434:
 13737              	.LBE2505:
1586:src/xeq.c     **** 
 13738              		.loc 1 1586 2 is_stmt 1 view .LVU3605
 13739              	.LBB2506:
1332:src/xeq.c     **** 	process_cmdline();
 13740              		.loc 1 1332 6 view .LVU3606
 13741              	.LBE2506:
1333:src/xeq.c     **** 	set_lift();
 13742              		.loc 1 1333 2 view .LVU3607
 13743              	.LBB2507:
 13744              	.LBB2447:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 13745              		.loc 1 1226 6 view .LVU3608
 13746              	.LBB2442:
1227:src/xeq.c     **** 
 13747              		.loc 1 1227 2 view .LVU3609
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13748              		.loc 1 1229 2 view .LVU3610
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13749              		.loc 1 1229 5 is_stmt 0 view .LVU3611
 13750 00e6 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13751 00e8 002B     		cmp	r3, #0
 13752 00ea 95D0     		beq	.L986
 13753              	.L1001:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13754              		.loc 1 1229 5 view .LVU3612
 13755 00ec FFF7FEFF 		bl	process_cmdline.part.0
 13756              	.LVL985:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13757              		.loc 1 1229 5 view .LVU3613
 13758 00f0 92E7     		b	.L986
 13759              	.L1003:
 13760              	.LBE2442:
 13761              	.LBE2447:
 13762              	.LBE2507:
1600:src/xeq.c     **** }
 13763              		.loc 1 1600 3 is_stmt 1 view .LVU3614
 13764 00f2 7020     		movs	r0, #112
 13765 00f4 FFF7FEFF 		bl	get_reg_n
 13766              	.LVL986:
 13767              	.LBB2508:
 13768              	.LBI2508:
1518:src/xeq.c     **** #if 0
 13769              		.loc 1 1518 6 view .LVU3615
 13770              	.LBB2509:
1533:src/xeq.c     **** #endif
 13771              		.loc 1 1533 2 view .LVU3616
 13772              	.LBB2510:
 13773              	.LBI2510:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13774              		.loc 1 1118 5 view .LVU3617
 13775              	.LBB2511:
1119:src/xeq.c     **** }
 13776              		.loc 1 1119 2 view .LVU3618
1119:src/xeq.c     **** }
 13777              		.loc 1 1119 24 is_stmt 0 view .LVU3619
ARM GAS  /tmp/ccBFDvgN.s 			page 402


 13778 00f8 2368     		ldr	r3, [r4]
 13779 00fa B3F8E827 		ldrh	r2, [r3, #2024]
 13780 00fe 2A40     		ands	r2, r2, r5
 13781 0100 A2F58042 		sub	r2, r2, #16384
 13782 0104 B2FA82F2 		clz	r2, r2
 13783 0108 5209     		lsrs	r2, r2, #5
 13784              	.LBE2511:
 13785              	.LBE2510:
1533:src/xeq.c     **** #endif
 13786              		.loc 1 1533 24 view .LVU3620
 13787 010a 0332     		adds	r2, r2, #3
1533:src/xeq.c     **** #endif
 13788              		.loc 1 1533 2 view .LVU3621
 13789 010c 06FA02F2 		lsl	r2, r6, r2
 13790 0110 0021     		movs	r1, #0
 13791              	.LBE2509:
 13792              	.LBE2508:
1601:src/xeq.c     **** 
 13793              		.loc 1 1601 1 view .LVU3622
 13794 0112 BDE87040 		pop	{r4, r5, r6, lr}
 13795              		.cfi_restore 14
 13796              		.cfi_restore 6
 13797              		.cfi_restore 5
 13798              		.cfi_restore 4
 13799              		.cfi_def_cfa_offset 0
 13800              	.LBB2513:
 13801              	.LBB2512:
1533:src/xeq.c     **** #endif
 13802              		.loc 1 1533 2 view .LVU3623
 13803 0116 FFF7FEBF 		b	xset
 13804              	.LVL987:
 13805              	.L1005:
1533:src/xeq.c     **** #endif
 13806              		.loc 1 1533 2 view .LVU3624
 13807 011a 00BF     		.align	2
 13808              	.L1004:
 13809 011c 00000000 		.word	main_ram
 13810 0120 00000000 		.word	StateWhileOn
 13811 0124 00000000 		.word	XromParams
 13812 0128 00000000 		.word	RetStk
 13813              	.LBE2512:
 13814              	.LBE2513:
 13815              		.cfi_endproc
 13816              	.LFE111:
 13818              		.section	.text.clrretstk,"ax",%progbits
 13819              		.align	1
 13820              		.p2align 2,,3
 13821              		.global	clrretstk
 13822              		.syntax unified
 13823              		.thumb
 13824              		.thumb_func
 13825              		.fpu fpv4-sp-d16
 13827              	clrretstk:
 13828              	.LFB112:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13829              		.loc 1 1606 22 is_stmt 1 view -0
 13830              		.cfi_startproc
ARM GAS  /tmp/ccBFDvgN.s 			page 403


 13831              		@ args = 0, pretend = 0, frame = 0
 13832              		@ frame_needed = 0, uses_anonymous_args = 0
 13833              		@ link register save eliminated.
1607:src/xeq.c     **** }
 13834              		.loc 1 1607 2 view .LVU3626
1607:src/xeq.c     **** }
 13835              		.loc 1 1607 14 is_stmt 0 view .LVU3627
 13836 0000 034B     		ldr	r3, .L1007
 13837 0002 1B68     		ldr	r3, [r3]
1607:src/xeq.c     **** }
 13838              		.loc 1 1607 24 view .LVU3628
 13839 0004 0022     		movs	r2, #0
 13840 0006 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1607:src/xeq.c     **** }
 13841              		.loc 1 1607 12 view .LVU3629
 13842 000a A3F8E227 		strh	r2, [r3, #2018]	@ movhi
1608:src/xeq.c     **** 
 13843              		.loc 1 1608 1 view .LVU3630
 13844 000e 7047     		bx	lr
 13845              	.L1008:
 13846              		.align	2
 13847              	.L1007:
 13848 0010 00000000 		.word	main_ram
 13849              		.cfi_endproc
 13850              	.LFE112:
 13852              		.section	.text.clrretstk_pc,"ax",%progbits
 13853              		.align	1
 13854              		.p2align 2,,3
 13855              		.global	clrretstk_pc
 13856              		.syntax unified
 13857              		.thumb
 13858              		.thumb_func
 13859              		.fpu fpv4-sp-d16
 13861              	clrretstk_pc:
 13862              	.LFB113:
1610:src/xeq.c     **** 	clrretstk();
 13863              		.loc 1 1610 25 is_stmt 1 view -0
 13864              		.cfi_startproc
 13865              		@ args = 0, pretend = 0, frame = 0
 13866              		@ frame_needed = 0, uses_anonymous_args = 0
1611:src/xeq.c     **** 	raw_set_pc(0);
 13867              		.loc 1 1611 2 view .LVU3632
 13868              	.LBB2514:
 13869              	.LBI2514:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13870              		.loc 1 1606 6 view .LVU3633
 13871              	.LBB2515:
1607:src/xeq.c     **** }
 13872              		.loc 1 1607 2 view .LVU3634
 13873              	.LBE2515:
 13874              	.LBE2514:
1610:src/xeq.c     **** 	clrretstk();
 13875              		.loc 1 1610 25 is_stmt 0 view .LVU3635
 13876 0000 08B5     		push	{r3, lr}
 13877              		.cfi_def_cfa_offset 8
 13878              		.cfi_offset 3, -8
 13879              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBFDvgN.s 			page 404


 13880              	.LBB2518:
 13881              	.LBB2516:
1607:src/xeq.c     **** }
 13882              		.loc 1 1607 14 view .LVU3636
 13883 0002 074B     		ldr	r3, .L1011
 13884 0004 1B68     		ldr	r3, [r3]
 13885              	.LBE2516:
 13886              	.LBE2518:
1612:src/xeq.c     **** 	update_program_bounds(1);
 13887              		.loc 1 1612 2 is_stmt 1 view .LVU3637
 13888              	.LVL988:
 13889              	.LBB2519:
 13890              	.LBI2519:
 282:src/xeq.c     **** 	State.pc = pc;
 13891              		.loc 1 282 13 view .LVU3638
 13892              	.LBB2520:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13893              		.loc 1 283 2 view .LVU3639
 13894              	.LBE2520:
 13895              	.LBE2519:
 13896              	.LBB2522:
 13897              	.LBB2517:
1607:src/xeq.c     **** }
 13898              		.loc 1 1607 24 is_stmt 0 view .LVU3640
 13899 0006 0020     		movs	r0, #0
 13900 0008 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
 13901              	.LBE2517:
 13902              	.LBE2522:
 13903              	.LBB2523:
 13904              	.LBB2521:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13905              		.loc 1 283 11 view .LVU3641
 13906 000c C3F8E007 		str	r0, [r3, #2016]
 284:src/xeq.c     **** }
 13907              		.loc 1 284 2 is_stmt 1 view .LVU3642
 13908 0010 FFF7FEFF 		bl	update_program_bounds
 13909              	.LVL989:
 284:src/xeq.c     **** }
 13910              		.loc 1 284 2 is_stmt 0 view .LVU3643
 13911              	.LBE2521:
 13912              	.LBE2523:
1613:src/xeq.c     **** }
 13913              		.loc 1 1613 2 is_stmt 1 view .LVU3644
1614:src/xeq.c     **** 
 13914              		.loc 1 1614 1 is_stmt 0 view .LVU3645
 13915 0014 BDE80840 		pop	{r3, lr}
 13916              		.cfi_restore 14
 13917              		.cfi_restore 3
 13918              		.cfi_def_cfa_offset 0
1613:src/xeq.c     **** }
 13919              		.loc 1 1613 2 view .LVU3646
 13920 0018 0120     		movs	r0, #1
 13921 001a FFF7FEBF 		b	update_program_bounds
 13922              	.LVL990:
 13923              	.L1012:
 13924 001e 00BF     		.align	2
 13925              	.L1011:
ARM GAS  /tmp/ccBFDvgN.s 			page 405


 13926 0020 00000000 		.word	main_ram
 13927              		.cfi_endproc
 13928              	.LFE113:
 13930              		.section	.text.cmdconst,"ax",%progbits
 13931              		.align	1
 13932              		.p2align 2,,3
 13933              		.global	cmdconst
 13934              		.syntax unified
 13935              		.thumb
 13936              		.thumb_func
 13937              		.fpu fpv4-sp-d16
 13939              	cmdconst:
 13940              	.LVL991:
 13941              	.LFB114:
1620:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13942              		.loc 1 1620 47 is_stmt 1 view -0
 13943              		.cfi_startproc
 13944              		@ args = 0, pretend = 0, frame = 0
 13945              		@ frame_needed = 0, uses_anonymous_args = 0
1622:src/xeq.c     **** #else
 13946              		.loc 1 1622 2 view .LVU3648
1620:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13947              		.loc 1 1620 47 is_stmt 0 view .LVU3649
 13948 0000 70B5     		push	{r4, r5, r6, lr}
 13949              		.cfi_def_cfa_offset 16
 13950              		.cfi_offset 4, -16
 13951              		.cfi_offset 5, -12
 13952              		.cfi_offset 6, -8
 13953              		.cfi_offset 14, -4
1622:src/xeq.c     **** #else
 13954              		.loc 1 1622 5 view .LVU3650
 13955 0002 01F0FD03 		and	r3, r1, #253
 13956 0006 882B     		cmp	r3, #136
1620:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13957              		.loc 1 1620 47 view .LVU3651
 13958 0008 82B0     		sub	sp, sp, #8
 13959              		.cfi_def_cfa_offset 24
1620:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13960              		.loc 1 1620 47 view .LVU3652
 13961 000a 0C46     		mov	r4, r1
 13962 000c 0546     		mov	r5, r0
1622:src/xeq.c     **** #else
 13963              		.loc 1 1622 5 view .LVU3653
 13964 000e 1CD0     		beq	.L1014
1622:src/xeq.c     **** #else
 13965              		.loc 1 1622 30 discriminator 1 view .LVU3654
 13966 0010 0129     		cmp	r1, #1
 13967 0012 1AD0     		beq	.L1014
1630:src/xeq.c     **** 
 13968              		.loc 1 1630 3 is_stmt 1 view .LVU3655
 13969              	.LBB2545:
 13970              	.LBI2545:
 747:src/xeq.c     **** 	if (get_lift())
 13971              		.loc 1 747 6 view .LVU3656
 13972              	.LBB2546:
 748:src/xeq.c     **** 		lift();
 13973              		.loc 1 748 2 view .LVU3657
ARM GAS  /tmp/ccBFDvgN.s 			page 406


 13974              	.LBB2547:
 13975              	.LBI2547:
 743:src/xeq.c     **** 	return State2.state_lift;
 13976              		.loc 1 743 12 view .LVU3658
 13977              	.LBB2548:
 744:src/xeq.c     **** }
 13978              		.loc 1 744 2 view .LVU3659
 744:src/xeq.c     **** }
 13979              		.loc 1 744 15 is_stmt 0 view .LVU3660
 13980 0014 2B4B     		ldr	r3, .L1031
 13981 0016 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 13982              	.LBE2548:
 13983              	.LBE2547:
 748:src/xeq.c     **** 		lift();
 13984              		.loc 1 748 5 view .LVU3661
 13985 0018 5906     		lsls	r1, r3, #25
 13986              	.LVL992:
 748:src/xeq.c     **** 		lift();
 13987              		.loc 1 748 5 view .LVU3662
 13988 001a 4FD4     		bmi	.L1029
 13989              	.LVL993:
 13990              	.L1016:
 748:src/xeq.c     **** 		lift();
 13991              		.loc 1 748 5 view .LVU3663
 13992              	.LBE2546:
 13993              	.LBE2545:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 13994              		.loc 1 1632 2 is_stmt 1 view .LVU3664
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 13995              		.loc 1 1632 24 is_stmt 0 view .LVU3665
 13996 001c 7934     		adds	r4, r4, #121
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 13997              		.loc 1 1632 5 view .LVU3666
 13998 001e E4B2     		uxtb	r4, r4
 13999 0020 012C     		cmp	r4, #1
 14000 0022 23D9     		bls	.L1030
 14001              	.L1017:
1634:src/xeq.c     **** 		bad_mode_error();
 14002              		.loc 1 1634 7 is_stmt 1 view .LVU3667
1634:src/xeq.c     **** 		bad_mode_error();
 14003              		.loc 1 1634 11 is_stmt 0 view .LVU3668
 14004 0024 284C     		ldr	r4, .L1031+4
 14005 0026 2368     		ldr	r3, [r4]
 14006 0028 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1634:src/xeq.c     **** 		bad_mode_error();
 14007              		.loc 1 1634 10 view .LVU3669
 14008 002c D207     		lsls	r2, r2, #31
 14009 002e 26D5     		bpl	.L1019
1635:src/xeq.c     **** 	else 
 14010              		.loc 1 1635 3 is_stmt 1 view .LVU3670
 14011              	.LBB2550:
 14012              	.LBI2550:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14013              		.loc 1 575 6 view .LVU3671
 14014              	.LBE2550:
 576:src/xeq.c     **** }
 14015              		.loc 1 576 2 view .LVU3672
ARM GAS  /tmp/ccBFDvgN.s 			page 407


 14016              	.LVL994:
 14017              	.LBB2555:
 14018              	.LBB2551:
 14019              	.LBI2551:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14020              		.loc 1 546 5 view .LVU3673
 14021              	.LBB2552:
 547:src/xeq.c     **** 		Error = e;
 14022              		.loc 1 547 2 view .LVU3674
 547:src/xeq.c     **** 		Error = e;
 14023              		.loc 1 547 12 is_stmt 0 view .LVU3675
 14024 0030 264A     		ldr	r2, .L1031+8
 547:src/xeq.c     **** 		Error = e;
 14025              		.loc 1 547 5 view .LVU3676
 14026 0032 1168     		ldr	r1, [r2]
 14027 0034 09B9     		cbnz	r1, .L1018
 14028              	.LVL995:
 14029              	.LBB2553:
 14030              	.LBI2553:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14031              		.loc 1 546 5 is_stmt 1 view .LVU3677
 14032              	.LBB2554:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14033              		.loc 1 548 3 view .LVU3678
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14034              		.loc 1 548 9 is_stmt 0 view .LVU3679
 14035 0036 0D21     		movs	r1, #13
 14036 0038 1160     		str	r1, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14037              		.loc 1 549 3 is_stmt 1 view .LVU3680
 14038              	.LVL996:
 14039              	.L1018:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14040              		.loc 1 549 3 is_stmt 0 view .LVU3681
 14041              	.LBE2554:
 14042              	.LBE2553:
 14043              	.LBE2552:
 14044              	.LBE2551:
 14045              	.LBE2555:
1639:src/xeq.c     **** #endif
 14046              		.loc 1 1639 2 is_stmt 1 view .LVU3682
 14047 003a 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 14048 003e 42F00102 		orr	r2, r2, #1
 14049 0042 83F8AD27 		strb	r2, [r3, #1965]
1641:src/xeq.c     **** 
 14050              		.loc 1 1641 1 is_stmt 0 view .LVU3683
 14051 0046 02B0     		add	sp, sp, #8
 14052              		.cfi_remember_state
 14053              		.cfi_def_cfa_offset 16
 14054              		@ sp needed
 14055 0048 70BD     		pop	{r4, r5, r6, pc}
 14056              	.LVL997:
 14057              	.L1014:
 14058              		.cfi_restore_state
1626:src/xeq.c     **** 		zero_Y();
 14059              		.loc 1 1626 3 is_stmt 1 view .LVU3684
 14060 004a FFF7FEFF 		bl	lift2_if_enabled
ARM GAS  /tmp/ccBFDvgN.s 			page 408


 14061              	.LVL998:
1627:src/xeq.c     **** 		set_was_complex();
 14062              		.loc 1 1627 3 view .LVU3685
 14063              	.LBB2556:
 14064              	.LBI2556:
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 14065              		.loc 1 1554 6 view .LVU3686
 14066              	.LBB2557:
1555:src/xeq.c     **** }
 14067              		.loc 1 1555 2 view .LVU3687
 14068 004e 6520     		movs	r0, #101
 14069 0050 FFF7FEFF 		bl	get_reg_n
 14070              	.LVL999:
 14071 0054 FFF7FEFF 		bl	set_zero
 14072              	.LVL1000:
 14073              	.LBE2557:
 14074              	.LBE2556:
1628:src/xeq.c     **** 	} else
 14075              		.loc 1 1628 3 view .LVU3688
 14076              	.LBB2558:
 14077              	.LBI2558:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 14078              		.loc 1 539 13 view .LVU3689
 14079              	.LBB2559:
 540:src/xeq.c     **** }
 14080              		.loc 1 540 2 view .LVU3690
 540:src/xeq.c     **** }
 14081              		.loc 1 540 20 is_stmt 0 view .LVU3691
 14082 0058 1A4B     		ldr	r3, .L1031
 14083              	.LBE2559:
 14084              	.LBE2558:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14085              		.loc 1 1632 24 view .LVU3692
 14086 005a 7934     		adds	r4, r4, #121
 14087              	.LBB2563:
 14088              	.LBB2560:
 540:src/xeq.c     **** }
 14089              		.loc 1 540 20 view .LVU3693
 14090 005c 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14091 005e 0121     		movs	r1, #1
 14092              	.LBE2560:
 14093              	.LBE2563:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14094              		.loc 1 1632 5 view .LVU3694
 14095 0060 E4B2     		uxtb	r4, r4
 14096              	.LBB2564:
 14097              	.LBB2561:
 540:src/xeq.c     **** }
 14098              		.loc 1 540 20 view .LVU3695
 14099 0062 61F38712 		bfi	r2, r1, #6, #2
 14100              	.LBE2561:
 14101              	.LBE2564:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14102              		.loc 1 1632 5 view .LVU3696
 14103 0066 012C     		cmp	r4, #1
 14104              	.LBB2565:
 14105              	.LBB2562:
ARM GAS  /tmp/ccBFDvgN.s 			page 409


 540:src/xeq.c     **** }
 14106              		.loc 1 540 20 view .LVU3697
 14107 0068 1A75     		strb	r2, [r3, #20]
 14108              	.LBE2562:
 14109              	.LBE2565:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14110              		.loc 1 1632 2 is_stmt 1 view .LVU3698
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14111              		.loc 1 1632 5 is_stmt 0 view .LVU3699
 14112 006a DBD8     		bhi	.L1017
 14113              	.L1030:
1633:src/xeq.c     **** 	else if (is_intmode())
 14114              		.loc 1 1633 3 is_stmt 1 view .LVU3700
 14115              	.LVL1001:
 14116              	.LBB2566:
 14117              	.LBI2566:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14118              		.loc 1 1509 6 view .LVU3701
 14119              	.LBB2567:
1510:src/xeq.c     **** }
 14120              		.loc 1 1510 2 view .LVU3702
 14121              	.LBE2567:
 14122              	.LBE2566:
1633:src/xeq.c     **** 	else if (is_intmode())
 14123              		.loc 1 1633 3 is_stmt 0 view .LVU3703
 14124 006c 0023     		movs	r3, #0
 14125              	.LBB2569:
 14126              	.LBB2568:
1510:src/xeq.c     **** }
 14127              		.loc 1 1510 2 view .LVU3704
 14128 006e 0093     		str	r3, [sp]
 14129 0070 2A46     		mov	r2, r5
 14130 0072 6420     		movs	r0, #100
 14131 0074 FFF7FEFF 		bl	set_reg_n_int_sgn
 14132              	.LVL1002:
 14133 0078 134B     		ldr	r3, .L1031+4
 14134 007a 1B68     		ldr	r3, [r3]
1511:src/xeq.c     **** 
 14135              		.loc 1 1511 1 view .LVU3705
 14136 007c DDE7     		b	.L1018
 14137              	.LVL1003:
 14138              	.L1019:
1511:src/xeq.c     **** 
 14139              		.loc 1 1511 1 view .LVU3706
 14140              	.LBE2568:
 14141              	.LBE2569:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14142              		.loc 1 1637 3 is_stmt 1 view .LVU3707
 14143              	.LBB2570:
 14144              	.LBB2571:
1119:src/xeq.c     **** }
 14145              		.loc 1 1119 24 is_stmt 0 view .LVU3708
 14146 007e B3F8E817 		ldrh	r1, [r3, #2024]
 14147              	.LBE2571:
 14148              	.LBE2570:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14149              		.loc 1 1637 3 view .LVU3709
ARM GAS  /tmp/ccBFDvgN.s 			page 410


 14150 0082 134B     		ldr	r3, .L1031+12
 14151              	.LBB2574:
 14152              	.LBB2572:
1119:src/xeq.c     **** }
 14153              		.loc 1 1119 24 view .LVU3710
 14154 0084 44F20106 		movw	r6, #16385
 14155 0088 3140     		ands	r1, r1, r6
 14156              	.LBE2572:
 14157              	.LBE2574:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14158              		.loc 1 1637 22 view .LVU3711
 14159 008a A1F58041 		sub	r1, r1, #16384
 14160 008e B1FA81F1 		clz	r1, r1
 14161 0092 2846     		mov	r0, r5
 14162 0094 4909     		lsrs	r1, r1, #5
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14163              		.loc 1 1637 3 view .LVU3712
 14164 0096 1D68     		ldr	r5, [r3]
 14165              	.LVL1004:
 14166              	.LBB2575:
 14167              	.LBI2570:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14168              		.loc 1 1118 5 is_stmt 1 view .LVU3713
 14169              	.LBB2573:
1119:src/xeq.c     **** }
 14170              		.loc 1 1119 2 view .LVU3714
 14171              	.LBE2573:
 14172              	.LBE2575:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14173              		.loc 1 1637 22 is_stmt 0 view .LVU3715
 14174 0098 FFF7FEFF 		bl	get_const
 14175              	.LVL1005:
 14176              	.LBB2576:
 14177              	.LBB2577:
 14178              	.LBB2578:
 14179              	.LBB2579:
1119:src/xeq.c     **** }
 14180              		.loc 1 1119 24 view .LVU3716
 14181 009c 2368     		ldr	r3, [r4]
 14182 009e B3F8E837 		ldrh	r3, [r3, #2024]
 14183              	.LBE2579:
 14184              	.LBE2578:
 727:src/xeq.c     **** }
 14185              		.loc 1 727 2 view .LVU3717
 14186 00a2 1E40     		ands	r6, r6, r3
 14187 00a4 B6F5804F 		cmp	r6, #16384
 14188              	.LBE2577:
 14189              	.LBE2576:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14190              		.loc 1 1637 22 view .LVU3718
 14191 00a8 0146     		mov	r1, r0
 14192              	.LVL1006:
 14193              	.LBB2583:
 14194              	.LBI2576:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14195              		.loc 1 726 6 is_stmt 1 view .LVU3719
 14196              	.LBB2582:
ARM GAS  /tmp/ccBFDvgN.s 			page 411


 727:src/xeq.c     **** }
 14197              		.loc 1 727 2 view .LVU3720
 14198              	.LBB2581:
 14199              	.LBI2578:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14200              		.loc 1 1118 5 view .LVU3721
 14201              	.LBB2580:
1119:src/xeq.c     **** }
 14202              		.loc 1 1119 2 view .LVU3722
 14203              	.LBE2580:
 14204              	.LBE2581:
 727:src/xeq.c     **** }
 14205              		.loc 1 727 2 is_stmt 0 view .LVU3723
 14206 00aa 08BF     		it	eq
 14207 00ac 1022     		moveq	r2, #16
 14208 00ae 2846     		mov	r0, r5
 14209              	.LVL1007:
 727:src/xeq.c     **** }
 14210              		.loc 1 727 2 view .LVU3724
 14211 00b0 18BF     		it	ne
 14212 00b2 0822     		movne	r2, #8
 14213 00b4 FFF7FEFF 		bl	xcopy
 14214              	.LVL1008:
 727:src/xeq.c     **** }
 14215              		.loc 1 727 2 view .LVU3725
 14216 00b8 2368     		ldr	r3, [r4]
 728:src/xeq.c     **** 
 14217              		.loc 1 728 1 view .LVU3726
 14218 00ba BEE7     		b	.L1018
 14219              	.LVL1009:
 14220              	.L1029:
 728:src/xeq.c     **** 
 14221              		.loc 1 728 1 view .LVU3727
 14222              	.LBE2582:
 14223              	.LBE2583:
 14224              	.LBB2584:
 14225              	.LBB2549:
 749:src/xeq.c     **** }
 14226              		.loc 1 749 3 is_stmt 1 view .LVU3728
 14227 00bc FFF7FEFF 		bl	lift
 14228              	.LVL1010:
 749:src/xeq.c     **** }
 14229              		.loc 1 749 3 is_stmt 0 view .LVU3729
 14230 00c0 ACE7     		b	.L1016
 14231              	.L1032:
 14232 00c2 00BF     		.align	2
 14233              	.L1031:
 14234 00c4 00000000 		.word	StateWhileOn
 14235 00c8 00000000 		.word	main_ram
 14236 00cc 00000000 		.word	Error
 14237 00d0 00000000 		.word	StackBase
 14238              	.LBE2549:
 14239              	.LBE2584:
 14240              		.cfi_endproc
 14241              	.LFE114:
 14243              		.section	.text.cmdsto,"ax",%progbits
 14244              		.align	1
ARM GAS  /tmp/ccBFDvgN.s 			page 412


 14245              		.p2align 2,,3
 14246              		.global	cmdsto
 14247              		.syntax unified
 14248              		.thumb
 14249              		.thumb_func
 14250              		.fpu fpv4-sp-d16
 14252              	cmdsto:
 14253              	.LVL1011:
 14254              	.LFB117:
1724:src/xeq.c     **** 	if (op == RARG_STO) {
 14255              		.loc 1 1724 45 is_stmt 1 view -0
 14256              		.cfi_startproc
 14257              		@ args = 0, pretend = 0, frame = 48
 14258              		@ frame_needed = 0, uses_anonymous_args = 0
1725:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14259              		.loc 1 1725 2 view .LVU3731
1724:src/xeq.c     **** 	if (op == RARG_STO) {
 14260              		.loc 1 1724 45 is_stmt 0 view .LVU3732
 14261 0000 10B5     		push	{r4, lr}
 14262              		.cfi_def_cfa_offset 8
 14263              		.cfi_offset 4, -8
 14264              		.cfi_offset 14, -4
1725:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14265              		.loc 1 1725 5 view .LVU3733
 14266 0002 0329     		cmp	r1, #3
1724:src/xeq.c     **** 	if (op == RARG_STO) {
 14267              		.loc 1 1724 45 view .LVU3734
 14268 0004 8CB0     		sub	sp, sp, #48
 14269              		.cfi_def_cfa_offset 56
1725:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14270              		.loc 1 1725 5 view .LVU3735
 14271 0006 32D0     		beq	.L1046
1728:src/xeq.c     **** 			long long int r;
 14272              		.loc 1 1728 3 is_stmt 1 view .LVU3736
1728:src/xeq.c     **** 			long long int r;
 14273              		.loc 1 1728 7 is_stmt 0 view .LVU3737
 14274 0008 1B4B     		ldr	r3, .L1047
 14275 000a 1B68     		ldr	r3, [r3]
 14276 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 14277              	.LBB2597:
1731:src/xeq.c     **** 				illegal(op);
 14278              		.loc 1 1731 8 view .LVU3738
 14279 0010 0339     		subs	r1, r1, #3
 14280              	.LVL1012:
1731:src/xeq.c     **** 				illegal(op);
 14281              		.loc 1 1731 8 view .LVU3739
 14282              	.LBE2597:
1728:src/xeq.c     **** 			long long int r;
 14283              		.loc 1 1728 6 view .LVU3740
 14284 0012 13F00103 		ands	r3, r3, #1
 14285 0016 0446     		mov	r4, r0
 14286              	.LBB2605:
1731:src/xeq.c     **** 				illegal(op);
 14287              		.loc 1 1731 8 view .LVU3741
 14288 0018 88B2     		uxth	r0, r1
 14289              	.LVL1013:
1731:src/xeq.c     **** 				illegal(op);
ARM GAS  /tmp/ccBFDvgN.s 			page 413


 14290              		.loc 1 1731 8 view .LVU3742
 14291              	.LBE2605:
1728:src/xeq.c     **** 			long long int r;
 14292              		.loc 1 1728 6 view .LVU3743
 14293 001a 18D0     		beq	.L1036
 14294              	.LBB2606:
1729:src/xeq.c     **** 
 14295              		.loc 1 1729 4 is_stmt 1 view .LVU3744
1731:src/xeq.c     **** 				illegal(op);
 14296              		.loc 1 1731 4 view .LVU3745
1731:src/xeq.c     **** 				illegal(op);
 14297              		.loc 1 1731 8 is_stmt 0 view .LVU3746
 14298 001c 0023     		movs	r3, #0
 14299 001e 6A46     		mov	r2, sp
 14300 0020 2146     		mov	r1, r4
 14301 0022 FFF7FEFF 		bl	storcl_intop
 14302              	.LVL1014:
1731:src/xeq.c     **** 				illegal(op);
 14303              		.loc 1 1731 7 view .LVU3747
 14304 0026 20B1     		cbz	r0, .L1037
1732:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14305              		.loc 1 1732 5 is_stmt 1 view .LVU3748
1732:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14306              		.loc 1 1732 5 view .LVU3749
 14307              	.LVL1015:
 14308              	.LBB2598:
 14309              	.LBI2598:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14310              		.loc 1 546 5 view .LVU3750
 14311              	.LBB2599:
 547:src/xeq.c     **** 		Error = e;
 14312              		.loc 1 547 2 view .LVU3751
 547:src/xeq.c     **** 		Error = e;
 14313              		.loc 1 547 12 is_stmt 0 view .LVU3752
 14314 0028 144B     		ldr	r3, .L1047+4
 547:src/xeq.c     **** 		Error = e;
 14315              		.loc 1 547 5 view .LVU3753
 14316 002a 1A68     		ldr	r2, [r3]
 14317 002c 0AB9     		cbnz	r2, .L1037
 14318              	.LVL1016:
 14319              	.LBB2600:
 14320              	.LBI2600:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14321              		.loc 1 546 5 is_stmt 1 view .LVU3754
 14322              	.LBB2601:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14323              		.loc 1 548 3 view .LVU3755
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14324              		.loc 1 548 9 is_stmt 0 view .LVU3756
 14325 002e 0322     		movs	r2, #3
 14326 0030 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14327              		.loc 1 549 3 is_stmt 1 view .LVU3757
 14328              	.LVL1017:
 14329              	.L1037:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14330              		.loc 1 549 3 is_stmt 0 view .LVU3758
ARM GAS  /tmp/ccBFDvgN.s 			page 414


 14331              	.LBE2601:
 14332              	.LBE2600:
 14333              	.LBE2599:
 14334              	.LBE2598:
1732:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14335              		.loc 1 1732 5 is_stmt 1 discriminator 1 view .LVU3759
1733:src/xeq.c     **** 		} else {
 14336              		.loc 1 1733 4 discriminator 1 view .LVU3760
1733:src/xeq.c     **** 		} else {
 14337              		.loc 1 1733 4 is_stmt 0 discriminator 1 view .LVU3761
 14338 0032 DDE90023 		ldrd	r2, [sp]
 14339              	.LBB2602:
 14340              	.LBB2603:
1423:src/xeq.c     **** }
 14341              		.loc 1 1423 8 discriminator 1 view .LVU3762
 14342 0036 2046     		mov	r0, r4
 14343 0038 CDE90223 		strd	r2, [sp, #8]
 14344              	.LVL1018:
1423:src/xeq.c     **** }
 14345              		.loc 1 1423 8 discriminator 1 view .LVU3763
 14346              	.LBE2603:
 14347              	.LBI2602:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 14348              		.loc 1 1422 6 is_stmt 1 discriminator 1 view .LVU3764
 14349              	.LBB2604:
1423:src/xeq.c     **** }
 14350              		.loc 1 1423 2 discriminator 1 view .LVU3765
1423:src/xeq.c     **** }
 14351              		.loc 1 1423 8 is_stmt 0 discriminator 1 view .LVU3766
 14352 003c FFF7FEFF 		bl	get_reg_n
 14353              	.LVL1019:
1423:src/xeq.c     **** }
 14354              		.loc 1 1423 2 discriminator 1 view .LVU3767
 14355 0040 0822     		movs	r2, #8
 14356 0042 0DEB0201 		add	r1, sp, r2
 14357 0046 FFF7FEFF 		bl	xcopy
 14358              	.LVL1020:
1423:src/xeq.c     **** }
 14359              		.loc 1 1423 2 discriminator 1 view .LVU3768
 14360              	.LBE2604:
 14361              	.LBE2602:
 14362              	.LBE2606:
1742:src/xeq.c     **** 
 14363              		.loc 1 1742 1 discriminator 1 view .LVU3769
 14364 004a 0CB0     		add	sp, sp, #48
 14365              		.cfi_remember_state
 14366              		.cfi_def_cfa_offset 8
 14367              		@ sp needed
 14368 004c 10BD     		pop	{r4, pc}
 14369              	.LVL1021:
 14370              	.L1036:
 14371              		.cfi_restore_state
 14372              	.LBB2607:
1735:src/xeq.c     **** 
 14373              		.loc 1 1735 4 is_stmt 1 view .LVU3770
1737:src/xeq.c     **** 				illegal(op);
 14374              		.loc 1 1737 4 view .LVU3771
ARM GAS  /tmp/ccBFDvgN.s 			page 415


1737:src/xeq.c     **** 				illegal(op);
 14375              		.loc 1 1737 8 is_stmt 0 view .LVU3772
 14376 004e 02AA     		add	r2, sp, #8
 14377 0050 2146     		mov	r1, r4
 14378 0052 FFF7FEFF 		bl	storcl_op
 14379              	.LVL1022:
1737:src/xeq.c     **** 				illegal(op);
 14380              		.loc 1 1737 7 view .LVU3773
 14381 0056 20B1     		cbz	r0, .L1038
1738:src/xeq.c     **** 			setRegister(arg, &r);
 14382              		.loc 1 1738 5 is_stmt 1 view .LVU3774
1738:src/xeq.c     **** 			setRegister(arg, &r);
 14383              		.loc 1 1738 5 view .LVU3775
 14384              	.LVL1023:
 14385              	.LBB2608:
 14386              	.LBI2608:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14387              		.loc 1 546 5 view .LVU3776
 14388              	.LBB2609:
 547:src/xeq.c     **** 		Error = e;
 14389              		.loc 1 547 2 view .LVU3777
 547:src/xeq.c     **** 		Error = e;
 14390              		.loc 1 547 12 is_stmt 0 view .LVU3778
 14391 0058 084B     		ldr	r3, .L1047+4
 547:src/xeq.c     **** 		Error = e;
 14392              		.loc 1 547 5 view .LVU3779
 14393 005a 1A68     		ldr	r2, [r3]
 14394 005c 0AB9     		cbnz	r2, .L1038
 14395              	.LVL1024:
 14396              	.LBB2610:
 14397              	.LBI2610:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14398              		.loc 1 546 5 is_stmt 1 view .LVU3780
 14399              	.LBB2611:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14400              		.loc 1 548 3 view .LVU3781
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14401              		.loc 1 548 9 is_stmt 0 view .LVU3782
 14402 005e 0322     		movs	r2, #3
 14403 0060 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14404              		.loc 1 549 3 is_stmt 1 view .LVU3783
 14405              	.LVL1025:
 14406              	.L1038:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14407              		.loc 1 549 3 is_stmt 0 view .LVU3784
 14408              	.LBE2611:
 14409              	.LBE2610:
 14410              	.LBE2609:
 14411              	.LBE2608:
1738:src/xeq.c     **** 			setRegister(arg, &r);
 14412              		.loc 1 1738 5 is_stmt 1 discriminator 1 view .LVU3785
1739:src/xeq.c     **** 		}
 14413              		.loc 1 1739 4 discriminator 1 view .LVU3786
 14414 0062 02A9     		add	r1, sp, #8
 14415 0064 2046     		mov	r0, r4
 14416 0066 FFF7FEFF 		bl	setRegister
ARM GAS  /tmp/ccBFDvgN.s 			page 416


 14417              	.LVL1026:
 14418              	.LBE2607:
1742:src/xeq.c     **** 
 14419              		.loc 1 1742 1 is_stmt 0 discriminator 1 view .LVU3787
 14420 006a 0CB0     		add	sp, sp, #48
 14421              		.cfi_remember_state
 14422              		.cfi_def_cfa_offset 8
 14423              		@ sp needed
 14424 006c 10BD     		pop	{r4, pc}
 14425              	.LVL1027:
 14426              	.L1046:
 14427              		.cfi_restore_state
1726:src/xeq.c     **** 	} else {
 14428              		.loc 1 1726 3 is_stmt 1 view .LVU3788
 14429 006e 6421     		movs	r1, #100
 14430              	.LVL1028:
1726:src/xeq.c     **** 	} else {
 14431              		.loc 1 1726 3 is_stmt 0 view .LVU3789
 14432 0070 FFF7FEFF 		bl	copyreg_n
 14433              	.LVL1029:
1742:src/xeq.c     **** 
 14434              		.loc 1 1742 1 view .LVU3790
 14435 0074 0CB0     		add	sp, sp, #48
 14436              		.cfi_def_cfa_offset 8
 14437              		@ sp needed
 14438 0076 10BD     		pop	{r4, pc}
 14439              	.L1048:
 14440              		.align	2
 14441              	.L1047:
 14442 0078 00000000 		.word	main_ram
 14443 007c 00000000 		.word	Error
 14444              		.cfi_endproc
 14445              	.LFE117:
 14447              		.section	.text.cmdrcl,"ax",%progbits
 14448              		.align	1
 14449              		.p2align 2,,3
 14450              		.global	cmdrcl
 14451              		.syntax unified
 14452              		.thumb
 14453              		.thumb_func
 14454              		.fpu fpv4-sp-d16
 14456              	cmdrcl:
 14457              	.LVL1030:
 14458              	.LFB119:
1771:src/xeq.c     **** 	do_rcl(arg, op);
 14459              		.loc 1 1771 45 is_stmt 1 view -0
 14460              		.cfi_startproc
 14461              		@ args = 0, pretend = 0, frame = 0
 14462              		@ frame_needed = 0, uses_anonymous_args = 0
 14463              		@ link register save eliminated.
1772:src/xeq.c     **** }
 14464              		.loc 1 1772 2 view .LVU3792
 14465 0000 FFF7FEBF 		b	do_rcl
 14466              	.LVL1031:
1772:src/xeq.c     **** }
 14467              		.loc 1 1772 2 is_stmt 0 view .LVU3793
 14468              		.cfi_endproc
ARM GAS  /tmp/ccBFDvgN.s 			page 417


 14469              	.LFE119:
 14471              		.section	.text.cmdcsto,"ax",%progbits
 14472              		.align	1
 14473              		.p2align 2,,3
 14474              		.global	cmdcsto
 14475              		.syntax unified
 14476              		.thumb
 14477              		.thumb_func
 14478              		.fpu fpv4-sp-d16
 14480              	cmdcsto:
 14481              	.LVL1032:
 14482              	.LFB121:
1816:src/xeq.c     **** 	decNumber r1, r2;
 14483              		.loc 1 1816 46 is_stmt 1 view -0
 14484              		.cfi_startproc
 14485              		@ args = 0, pretend = 0, frame = 72
 14486              		@ frame_needed = 0, uses_anonymous_args = 0
1817:src/xeq.c     **** 	REGISTER *t1, *t2;
 14487              		.loc 1 1817 2 view .LVU3795
1818:src/xeq.c     **** 
 14488              		.loc 1 1818 2 view .LVU3796
1820:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14489              		.loc 1 1820 2 view .LVU3797
1816:src/xeq.c     **** 	decNumber r1, r2;
 14490              		.loc 1 1816 46 is_stmt 0 view .LVU3798
 14491 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 14492              		.cfi_def_cfa_offset 24
 14493              		.cfi_offset 4, -24
 14494              		.cfi_offset 5, -20
 14495              		.cfi_offset 6, -16
 14496              		.cfi_offset 7, -12
 14497              		.cfi_offset 8, -8
 14498              		.cfi_offset 14, -4
 14499 0004 94B0     		sub	sp, sp, #80
 14500              		.cfi_def_cfa_offset 104
1816:src/xeq.c     **** 	decNumber r1, r2;
 14501              		.loc 1 1816 46 view .LVU3799
 14502 0006 0C46     		mov	r4, r1
1821:src/xeq.c     **** 
 14503              		.loc 1 1821 21 view .LVU3800
 14504 0008 461C     		adds	r6, r0, #1
1816:src/xeq.c     **** 	decNumber r1, r2;
 14505              		.loc 1 1816 46 view .LVU3801
 14506 000a 0546     		mov	r5, r0
1820:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14507              		.loc 1 1820 7 view .LVU3802
 14508 000c FFF7FEFF 		bl	get_reg_n
 14509              	.LVL1033:
1820:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14510              		.loc 1 1820 7 view .LVU3803
 14511 0010 8046     		mov	r8, r0
1821:src/xeq.c     **** 
 14512              		.loc 1 1821 7 view .LVU3804
 14513 0012 3046     		mov	r0, r6
 14514              	.LVL1034:
1821:src/xeq.c     **** 
 14515              		.loc 1 1821 2 is_stmt 1 view .LVU3805
ARM GAS  /tmp/ccBFDvgN.s 			page 418


1821:src/xeq.c     **** 
 14516              		.loc 1 1821 7 is_stmt 0 view .LVU3806
 14517 0014 FFF7FEFF 		bl	get_reg_n
 14518              	.LVL1035:
1823:src/xeq.c     **** 		copyreg(t1, StackBase);
 14519              		.loc 1 1823 2 is_stmt 1 view .LVU3807
1823:src/xeq.c     **** 		copyreg(t1, StackBase);
 14520              		.loc 1 1823 5 is_stmt 0 view .LVU3808
 14521 0018 152C     		cmp	r4, #21
 14522 001a 24D0     		beq	.L1062
1827:src/xeq.c     **** 			bad_mode_error();
 14523              		.loc 1 1827 3 is_stmt 1 view .LVU3809
1827:src/xeq.c     **** 			bad_mode_error();
 14524              		.loc 1 1827 7 is_stmt 0 view .LVU3810
 14525 001c 284B     		ldr	r3, .L1063
 14526 001e 1B68     		ldr	r3, [r3]
 14527 0020 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1827:src/xeq.c     **** 			bad_mode_error();
 14528              		.loc 1 1827 6 view .LVU3811
 14529 0024 13F00103 		ands	r3, r3, #1
 14530 0028 0DD0     		beq	.L1055
1828:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
 14531              		.loc 1 1828 4 is_stmt 1 view .LVU3812
 14532              	.LBB2631:
 14533              	.LBI2631:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14534              		.loc 1 575 6 view .LVU3813
 14535              	.LBE2631:
 576:src/xeq.c     **** }
 14536              		.loc 1 576 2 view .LVU3814
 14537              	.LVL1036:
 14538              	.LBB2636:
 14539              	.LBB2632:
 14540              	.LBI2632:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14541              		.loc 1 546 5 view .LVU3815
 14542              	.LBB2633:
 547:src/xeq.c     **** 		Error = e;
 14543              		.loc 1 547 2 view .LVU3816
 547:src/xeq.c     **** 		Error = e;
 14544              		.loc 1 547 12 is_stmt 0 view .LVU3817
 14545 002a 264B     		ldr	r3, .L1063+4
 547:src/xeq.c     **** 		Error = e;
 14546              		.loc 1 547 5 view .LVU3818
 14547 002c 1A68     		ldr	r2, [r3]
 14548 002e 0AB9     		cbnz	r2, .L1054
 14549              	.LVL1037:
 14550              	.LBB2634:
 14551              	.LBI2634:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14552              		.loc 1 546 5 is_stmt 1 view .LVU3819
 14553              	.LBB2635:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14554              		.loc 1 548 3 view .LVU3820
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14555              		.loc 1 548 9 is_stmt 0 view .LVU3821
 14556 0030 0D22     		movs	r2, #13
ARM GAS  /tmp/ccBFDvgN.s 			page 419


 14557 0032 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14558              		.loc 1 549 3 is_stmt 1 view .LVU3822
 14559              	.LVL1038:
 14560              	.L1054:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14561              		.loc 1 549 3 is_stmt 0 view .LVU3823
 14562              	.LBE2635:
 14563              	.LBE2634:
 14564              	.LBE2633:
 14565              	.LBE2632:
 14566              	.LBE2636:
1836:src/xeq.c     **** }
 14567              		.loc 1 1836 2 is_stmt 1 view .LVU3824
 14568              	.LBB2637:
 14569              	.LBI2637:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 14570              		.loc 1 539 13 view .LVU3825
 14571              	.LBB2638:
 540:src/xeq.c     **** }
 14572              		.loc 1 540 2 view .LVU3826
 540:src/xeq.c     **** }
 14573              		.loc 1 540 20 is_stmt 0 view .LVU3827
 14574 0034 244B     		ldr	r3, .L1063+8
 14575 0036 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14576 0038 0121     		movs	r1, #1
 14577 003a 61F38712 		bfi	r2, r1, #6, #2
 14578 003e 1A75     		strb	r2, [r3, #20]
 14579              	.LBE2638:
 14580              	.LBE2637:
1837:src/xeq.c     **** 
 14581              		.loc 1 1837 1 view .LVU3828
 14582 0040 14B0     		add	sp, sp, #80
 14583              		.cfi_remember_state
 14584              		.cfi_def_cfa_offset 24
 14585              		@ sp needed
 14586 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 14587              	.LVL1039:
 14588              	.L1055:
 14589              		.cfi_restore_state
1829:src/xeq.c     **** 			illegal(op);
 14590              		.loc 1 1829 8 is_stmt 1 view .LVU3829
1829:src/xeq.c     **** 			illegal(op);
 14591              		.loc 1 1829 12 is_stmt 0 view .LVU3830
 14592 0046 153C     		subs	r4, r4, #21
 14593 0048 0093     		str	r3, [sp]
 14594 004a A0B2     		uxth	r0, r4
 14595              	.LVL1040:
1829:src/xeq.c     **** 			illegal(op);
 14596              		.loc 1 1829 12 view .LVU3831
 14597 004c 0BAB     		add	r3, sp, #44
 14598 004e 02AA     		add	r2, sp, #8
 14599 0050 2946     		mov	r1, r5
 14600 0052 FFF7FEFF 		bl	storcl_cop
 14601              	.LVL1041:
1829:src/xeq.c     **** 			illegal(op);
 14602              		.loc 1 1829 11 view .LVU3832
ARM GAS  /tmp/ccBFDvgN.s 			page 420


 14603 0056 50B3     		cbz	r0, .L1057
1830:src/xeq.c     **** 		else {
 14604              		.loc 1 1830 4 is_stmt 1 view .LVU3833
1830:src/xeq.c     **** 		else {
 14605              		.loc 1 1830 4 view .LVU3834
 14606              	.LVL1042:
 14607              	.LBB2639:
 14608              	.LBI2639:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14609              		.loc 1 546 5 view .LVU3835
 14610              	.LBB2640:
 547:src/xeq.c     **** 		Error = e;
 14611              		.loc 1 547 2 view .LVU3836
 547:src/xeq.c     **** 		Error = e;
 14612              		.loc 1 547 12 is_stmt 0 view .LVU3837
 14613 0058 1A4B     		ldr	r3, .L1063+4
 547:src/xeq.c     **** 		Error = e;
 14614              		.loc 1 547 5 view .LVU3838
 14615 005a 1A68     		ldr	r2, [r3]
 14616 005c 002A     		cmp	r2, #0
 14617 005e E9D1     		bne	.L1054
 14618              	.LVL1043:
 14619              	.LBB2641:
 14620              	.LBI2641:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14621              		.loc 1 546 5 is_stmt 1 view .LVU3839
 14622              	.LBB2642:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14623              		.loc 1 548 3 view .LVU3840
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14624              		.loc 1 548 9 is_stmt 0 view .LVU3841
 14625 0060 0322     		movs	r2, #3
 14626 0062 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14627              		.loc 1 549 3 is_stmt 1 view .LVU3842
 14628 0064 E6E7     		b	.L1054
 14629              	.LVL1044:
 14630              	.L1062:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14631              		.loc 1 549 3 is_stmt 0 view .LVU3843
 14632              	.LBE2642:
 14633              	.LBE2641:
 14634              	.LBE2640:
 14635              	.LBE2639:
1824:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14636              		.loc 1 1824 3 is_stmt 1 view .LVU3844
 14637              	.LBB2643:
 14638              	.LBB2644:
 14639              	.LBB2645:
 14640              	.LBB2646:
1119:src/xeq.c     **** }
 14641              		.loc 1 1119 24 is_stmt 0 view .LVU3845
 14642 0066 164D     		ldr	r5, .L1063
 14643              	.LVL1045:
1119:src/xeq.c     **** }
 14644              		.loc 1 1119 24 view .LVU3846
 14645              	.LBE2646:
ARM GAS  /tmp/ccBFDvgN.s 			page 421


 14646              	.LBE2645:
 14647              	.LBE2644:
 14648              	.LBE2643:
1824:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14649              		.loc 1 1824 3 view .LVU3847
 14650 0068 184A     		ldr	r2, .L1063+12
 14651              	.LVL1046:
 14652              	.LBB2652:
 14653              	.LBI2643:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14654              		.loc 1 726 6 is_stmt 1 view .LVU3848
 14655              	.LBB2651:
 727:src/xeq.c     **** }
 14656              		.loc 1 727 2 view .LVU3849
 14657              	.LBB2649:
 14658              	.LBI2645:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14659              		.loc 1 1118 5 view .LVU3850
 14660              	.LBB2647:
1119:src/xeq.c     **** }
 14661              		.loc 1 1119 2 view .LVU3851
1119:src/xeq.c     **** }
 14662              		.loc 1 1119 24 is_stmt 0 view .LVU3852
 14663 006a 2B68     		ldr	r3, [r5]
 14664              	.LBE2647:
 14665              	.LBE2649:
 727:src/xeq.c     **** }
 14666              		.loc 1 727 2 view .LVU3853
 14667 006c 1168     		ldr	r1, [r2]
 14668              	.LBB2650:
 14669              	.LBB2648:
1119:src/xeq.c     **** }
 14670              		.loc 1 1119 24 view .LVU3854
 14671 006e B3F8E837 		ldrh	r3, [r3, #2024]
 14672 0072 44F20104 		movw	r4, #16385
 14673              	.LBE2648:
 14674              	.LBE2650:
 727:src/xeq.c     **** }
 14675              		.loc 1 727 2 view .LVU3855
 14676 0076 2340     		ands	r3, r3, r4
 14677 0078 B3F5804F 		cmp	r3, #16384
 14678 007c 0CBF     		ite	eq
 14679 007e 1022     		moveq	r2, #16
 14680              	.LVL1047:
 727:src/xeq.c     **** }
 14681              		.loc 1 727 2 view .LVU3856
 14682 0080 0822     		movne	r2, #8
 14683 0082 0746     		mov	r7, r0
 14684 0084 4046     		mov	r0, r8
 14685              	.LVL1048:
 727:src/xeq.c     **** }
 14686              		.loc 1 727 2 view .LVU3857
 14687 0086 FFF7FEFF 		bl	xcopy
 14688              	.LVL1049:
 727:src/xeq.c     **** }
 14689              		.loc 1 727 2 view .LVU3858
 14690              	.LBE2651:
ARM GAS  /tmp/ccBFDvgN.s 			page 422


 14691              	.LBE2652:
1825:src/xeq.c     **** 	} else {
 14692              		.loc 1 1825 3 is_stmt 1 view .LVU3859
1825:src/xeq.c     **** 	} else {
 14693              		.loc 1 1825 15 is_stmt 0 view .LVU3860
 14694 008a 6520     		movs	r0, #101
 14695 008c FFF7FEFF 		bl	get_reg_n
 14696              	.LVL1050:
 14697              	.LBB2653:
 14698              	.LBB2654:
 14699              	.LBB2655:
 14700              	.LBB2656:
1119:src/xeq.c     **** }
 14701              		.loc 1 1119 24 view .LVU3861
 14702 0090 2B68     		ldr	r3, [r5]
 14703 0092 B3F8E837 		ldrh	r3, [r3, #2024]
 14704              	.LBE2656:
 14705              	.LBE2655:
 727:src/xeq.c     **** }
 14706              		.loc 1 727 2 view .LVU3862
 14707 0096 1C40     		ands	r4, r4, r3
 14708 0098 B4F5804F 		cmp	r4, #16384
 14709              	.LBE2654:
 14710              	.LBE2653:
1825:src/xeq.c     **** 	} else {
 14711              		.loc 1 1825 15 view .LVU3863
 14712 009c 0146     		mov	r1, r0
 14713              	.LVL1051:
 14714              	.LBB2660:
 14715              	.LBI2653:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14716              		.loc 1 726 6 is_stmt 1 view .LVU3864
 14717              	.LBB2659:
 727:src/xeq.c     **** }
 14718              		.loc 1 727 2 view .LVU3865
 14719              	.LBB2658:
 14720              	.LBI2655:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14721              		.loc 1 1118 5 view .LVU3866
 14722              	.LBB2657:
1119:src/xeq.c     **** }
 14723              		.loc 1 1119 2 view .LVU3867
 14724              	.LBE2657:
 14725              	.LBE2658:
 727:src/xeq.c     **** }
 14726              		.loc 1 727 2 is_stmt 0 view .LVU3868
 14727 009e 08BF     		it	eq
 14728 00a0 1022     		moveq	r2, #16
 14729 00a2 3846     		mov	r0, r7
 14730              	.LVL1052:
 727:src/xeq.c     **** }
 14731              		.loc 1 727 2 view .LVU3869
 14732 00a4 18BF     		it	ne
 14733 00a6 0822     		movne	r2, #8
 14734 00a8 FFF7FEFF 		bl	xcopy
 14735              	.LVL1053:
 728:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 423


 14736              		.loc 1 728 1 view .LVU3870
 14737 00ac C2E7     		b	.L1054
 14738              	.LVL1054:
 14739              	.L1057:
 728:src/xeq.c     **** 
 14740              		.loc 1 728 1 view .LVU3871
 14741              	.LBE2659:
 14742              	.LBE2660:
1832:src/xeq.c     **** 			setRegister(arg + 1, &r2);
 14743              		.loc 1 1832 4 is_stmt 1 view .LVU3872
 14744 00ae 02A9     		add	r1, sp, #8
 14745 00b0 2846     		mov	r0, r5
 14746 00b2 FFF7FEFF 		bl	setRegister
 14747              	.LVL1055:
1833:src/xeq.c     **** 		}
 14748              		.loc 1 1833 4 view .LVU3873
 14749 00b6 0BA9     		add	r1, sp, #44
 14750 00b8 3046     		mov	r0, r6
 14751 00ba FFF7FEFF 		bl	setRegister
 14752              	.LVL1056:
 14753 00be B9E7     		b	.L1054
 14754              	.L1064:
 14755              		.align	2
 14756              	.L1063:
 14757 00c0 00000000 		.word	main_ram
 14758 00c4 00000000 		.word	Error
 14759 00c8 00000000 		.word	StateWhileOn
 14760 00cc 00000000 		.word	StackBase
 14761              		.cfi_endproc
 14762              	.LFE121:
 14764              		.section	.text.cmdcrcl,"ax",%progbits
 14765              		.align	1
 14766              		.p2align 2,,3
 14767              		.global	cmdcrcl
 14768              		.syntax unified
 14769              		.thumb
 14770              		.thumb_func
 14771              		.fpu fpv4-sp-d16
 14773              	cmdcrcl:
 14774              	.LVL1057:
 14775              	.LFB123:
1862:src/xeq.c     **** 	do_crcl(arg, op);
 14776              		.loc 1 1862 46 view -0
 14777              		.cfi_startproc
 14778              		@ args = 0, pretend = 0, frame = 72
 14779              		@ frame_needed = 0, uses_anonymous_args = 0
1863:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14780              		.loc 1 1863 2 view .LVU3875
1862:src/xeq.c     **** 	do_crcl(arg, op);
 14781              		.loc 1 1862 46 is_stmt 0 view .LVU3876
 14782 0000 70B5     		push	{r4, r5, r6, lr}
 14783              		.cfi_def_cfa_offset 16
 14784              		.cfi_offset 4, -16
 14785              		.cfi_offset 5, -12
 14786              		.cfi_offset 6, -8
 14787              		.cfi_offset 14, -4
 14788              	.LBB2691:
ARM GAS  /tmp/ccBFDvgN.s 			page 424


 14789              	.LBB2692:
1842:src/xeq.c     **** 		REGISTER x, y;
 14790              		.loc 1 1842 5 view .LVU3877
 14791 0002 1A29     		cmp	r1, #26
 14792              	.LBE2692:
 14793              	.LBE2691:
1862:src/xeq.c     **** 	do_crcl(arg, op);
 14794              		.loc 1 1862 46 view .LVU3878
 14795 0004 94B0     		sub	sp, sp, #80
 14796              		.cfi_def_cfa_offset 96
1862:src/xeq.c     **** 	do_crcl(arg, op);
 14797              		.loc 1 1862 46 view .LVU3879
 14798 0006 0446     		mov	r4, r0
 14799              	.LVL1058:
 14800              	.LBB2741:
 14801              	.LBI2691:
1839:src/xeq.c     **** 	decNumber r1, r2;
 14802              		.loc 1 1839 13 is_stmt 1 view .LVU3880
 14803              	.LBB2738:
1840:src/xeq.c     **** 
 14804              		.loc 1 1840 2 view .LVU3881
1842:src/xeq.c     **** 		REGISTER x, y;
 14805              		.loc 1 1842 2 view .LVU3882
1842:src/xeq.c     **** 		REGISTER x, y;
 14806              		.loc 1 1842 5 is_stmt 0 view .LVU3883
 14807 0008 2AD0     		beq	.L1081
1850:src/xeq.c     **** 			bad_mode_error();
 14808              		.loc 1 1850 3 is_stmt 1 view .LVU3884
1850:src/xeq.c     **** 			bad_mode_error();
 14809              		.loc 1 1850 7 is_stmt 0 view .LVU3885
 14810 000a 3B4D     		ldr	r5, .L1082
 14811 000c 2B68     		ldr	r3, [r5]
 14812 000e 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1850:src/xeq.c     **** 			bad_mode_error();
 14813              		.loc 1 1850 6 view .LVU3886
 14814 0012 D207     		lsls	r2, r2, #31
 14815 0014 11D5     		bpl	.L1072
1851:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
 14816              		.loc 1 1851 4 is_stmt 1 view .LVU3887
 14817              	.LBB2693:
 14818              	.LBI2693:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14819              		.loc 1 575 6 view .LVU3888
 14820              	.LBE2693:
 14821              	.LBE2738:
 14822              	.LBE2741:
 576:src/xeq.c     **** }
 14823              		.loc 1 576 2 view .LVU3889
 14824              	.LVL1059:
 14825              	.LBB2742:
 14826              	.LBB2739:
 14827              	.LBB2698:
 14828              	.LBB2694:
 14829              	.LBI2694:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14830              		.loc 1 546 5 view .LVU3890
 14831              	.LBB2695:
ARM GAS  /tmp/ccBFDvgN.s 			page 425


 547:src/xeq.c     **** 		Error = e;
 14832              		.loc 1 547 2 view .LVU3891
 547:src/xeq.c     **** 		Error = e;
 14833              		.loc 1 547 12 is_stmt 0 view .LVU3892
 14834 0016 394A     		ldr	r2, .L1082+4
 547:src/xeq.c     **** 		Error = e;
 14835              		.loc 1 547 5 view .LVU3893
 14836 0018 1168     		ldr	r1, [r2]
 14837              	.LVL1060:
 547:src/xeq.c     **** 		Error = e;
 14838              		.loc 1 547 5 view .LVU3894
 14839 001a 09B9     		cbnz	r1, .L1071
 14840              	.LVL1061:
 14841              	.LBB2696:
 14842              	.LBI2696:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14843              		.loc 1 546 5 is_stmt 1 view .LVU3895
 14844              	.LBB2697:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14845              		.loc 1 548 3 view .LVU3896
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14846              		.loc 1 548 9 is_stmt 0 view .LVU3897
 14847 001c 0D21     		movs	r1, #13
 14848 001e 1160     		str	r1, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14849              		.loc 1 549 3 is_stmt 1 view .LVU3898
 14850              	.LVL1062:
 14851              	.L1071:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14852              		.loc 1 549 3 is_stmt 0 view .LVU3899
 14853              	.LBE2697:
 14854              	.LBE2696:
 14855              	.LBE2695:
 14856              	.LBE2694:
 14857              	.LBE2698:
1859:src/xeq.c     **** }
 14858              		.loc 1 1859 2 is_stmt 1 view .LVU3900
 14859              	.LBB2699:
 14860              	.LBI2699:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 14861              		.loc 1 539 13 view .LVU3901
 14862              	.LBB2700:
 540:src/xeq.c     **** }
 14863              		.loc 1 540 2 view .LVU3902
 540:src/xeq.c     **** }
 14864              		.loc 1 540 20 is_stmt 0 view .LVU3903
 14865 0020 374A     		ldr	r2, .L1082+8
 14866 0022 117D     		ldrb	r1, [r2, #20]	@ zero_extendqisi2
 14867 0024 0120     		movs	r0, #1
 14868 0026 60F38711 		bfi	r1, r0, #6, #2
 14869 002a 1175     		strb	r1, [r2, #20]
 14870              	.LVL1063:
 540:src/xeq.c     **** }
 14871              		.loc 1 540 20 view .LVU3904
 14872              	.LBE2700:
 14873              	.LBE2699:
 14874              	.LBE2739:
ARM GAS  /tmp/ccBFDvgN.s 			page 426


 14875              	.LBE2742:
1865:src/xeq.c     **** #endif
 14876              		.loc 1 1865 2 is_stmt 1 view .LVU3905
 14877 002c 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 14878 0030 0243     		orrs	r2, r2, r0
 14879 0032 83F8AD27 		strb	r2, [r3, #1965]
1867:src/xeq.c     **** 
 14880              		.loc 1 1867 1 is_stmt 0 view .LVU3906
 14881 0036 14B0     		add	sp, sp, #80
 14882              		.cfi_remember_state
 14883              		.cfi_def_cfa_offset 16
 14884              		@ sp needed
 14885 0038 70BD     		pop	{r4, r5, r6, pc}
 14886              	.LVL1064:
 14887              	.L1072:
 14888              		.cfi_restore_state
 14889              	.LBB2743:
 14890              	.LBB2740:
1852:src/xeq.c     **** 			illegal(op);
 14891              		.loc 1 1852 8 is_stmt 1 view .LVU3907
1852:src/xeq.c     **** 			illegal(op);
 14892              		.loc 1 1852 12 is_stmt 0 view .LVU3908
 14893 003a 1A39     		subs	r1, r1, #26
 14894              	.LVL1065:
1852:src/xeq.c     **** 			illegal(op);
 14895              		.loc 1 1852 12 view .LVU3909
 14896 003c 0126     		movs	r6, #1
 14897 003e 88B2     		uxth	r0, r1
 14898              	.LVL1066:
1852:src/xeq.c     **** 			illegal(op);
 14899              		.loc 1 1852 12 view .LVU3910
 14900 0040 0BAB     		add	r3, sp, #44
 14901 0042 2146     		mov	r1, r4
 14902 0044 02AA     		add	r2, sp, #8
 14903 0046 0096     		str	r6, [sp]
 14904 0048 FFF7FEFF 		bl	storcl_cop
 14905              	.LVL1067:
1852:src/xeq.c     **** 			illegal(op);
 14906              		.loc 1 1852 11 view .LVU3911
 14907 004c 0028     		cmp	r0, #0
 14908 004e 4AD0     		beq	.L1073
1853:src/xeq.c     **** 		else {
 14909              		.loc 1 1853 4 is_stmt 1 view .LVU3912
1853:src/xeq.c     **** 		else {
 14910              		.loc 1 1853 4 view .LVU3913
 14911              	.LVL1068:
 14912              	.LBB2701:
 14913              	.LBI2701:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14914              		.loc 1 546 5 view .LVU3914
 14915              	.LBB2702:
 547:src/xeq.c     **** 		Error = e;
 14916              		.loc 1 547 2 view .LVU3915
 547:src/xeq.c     **** 		Error = e;
 14917              		.loc 1 547 12 is_stmt 0 view .LVU3916
 14918 0050 2A4A     		ldr	r2, .L1082+4
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccBFDvgN.s 			page 427


 14919              		.loc 1 547 5 view .LVU3917
 14920 0052 1368     		ldr	r3, [r2]
 14921 0054 002B     		cmp	r3, #0
 14922 0056 4CD1     		bne	.L1080
 14923              	.LVL1069:
 14924              	.LBB2703:
 14925              	.LBI2703:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14926              		.loc 1 546 5 is_stmt 1 view .LVU3918
 14927              	.LBB2704:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14928              		.loc 1 548 3 view .LVU3919
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14929              		.loc 1 548 9 is_stmt 0 view .LVU3920
 14930 0058 0321     		movs	r1, #3
 14931 005a 2B68     		ldr	r3, [r5]
 14932 005c 1160     		str	r1, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14933              		.loc 1 549 3 is_stmt 1 view .LVU3921
 14934 005e DFE7     		b	.L1071
 14935              	.LVL1070:
 14936              	.L1081:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14937              		.loc 1 549 3 is_stmt 0 view .LVU3922
 14938              	.LBE2704:
 14939              	.LBE2703:
 14940              	.LBE2702:
 14941              	.LBE2701:
 14942              	.LBB2705:
1843:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
 14943              		.loc 1 1843 3 is_stmt 1 view .LVU3923
1844:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14944              		.loc 1 1844 3 view .LVU3924
 14945              	.LBB2706:
 14946              	.LBB2707:
 14947              	.LBB2708:
 14948              	.LBB2709:
1119:src/xeq.c     **** }
 14949              		.loc 1 1119 24 is_stmt 0 view .LVU3925
 14950 0060 254E     		ldr	r6, .L1082
 14951              	.LBE2709:
 14952              	.LBE2708:
 14953              	.LBE2707:
 14954              	.LBE2706:
1844:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14955              		.loc 1 1844 15 view .LVU3926
 14956 0062 FFF7FEFF 		bl	get_reg_n
 14957              	.LVL1071:
 14958              	.LBB2716:
 14959              	.LBB2714:
 14960              	.LBB2712:
 14961              	.LBB2710:
1119:src/xeq.c     **** }
 14962              		.loc 1 1119 24 view .LVU3927
 14963 0066 3368     		ldr	r3, [r6]
 14964 0068 B3F8E837 		ldrh	r3, [r3, #2024]
 14965 006c 44F20105 		movw	r5, #16385
ARM GAS  /tmp/ccBFDvgN.s 			page 428


 14966              	.LBE2710:
 14967              	.LBE2712:
 727:src/xeq.c     **** }
 14968              		.loc 1 727 2 view .LVU3928
 14969 0070 2B40     		ands	r3, r3, r5
 14970 0072 B3F5804F 		cmp	r3, #16384
 14971 0076 0CBF     		ite	eq
 14972 0078 1022     		moveq	r2, #16
 14973 007a 0822     		movne	r2, #8
 14974              	.LBE2714:
 14975              	.LBE2716:
1844:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14976              		.loc 1 1844 15 view .LVU3929
 14977 007c 0146     		mov	r1, r0
 14978              	.LVL1072:
 14979              	.LBB2717:
 14980              	.LBI2706:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14981              		.loc 1 726 6 is_stmt 1 view .LVU3930
 14982              	.LBB2715:
 727:src/xeq.c     **** }
 14983              		.loc 1 727 2 view .LVU3931
 14984              	.LBB2713:
 14985              	.LBI2708:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14986              		.loc 1 1118 5 view .LVU3932
 14987              	.LBB2711:
1119:src/xeq.c     **** }
 14988              		.loc 1 1119 2 view .LVU3933
 14989              	.LBE2711:
 14990              	.LBE2713:
 727:src/xeq.c     **** }
 14991              		.loc 1 727 2 is_stmt 0 view .LVU3934
 14992 007e 02A8     		add	r0, sp, #8
 14993              	.LVL1073:
 727:src/xeq.c     **** }
 14994              		.loc 1 727 2 view .LVU3935
 14995 0080 FFF7FEFF 		bl	xcopy
 14996              	.LVL1074:
 727:src/xeq.c     **** }
 14997              		.loc 1 727 2 view .LVU3936
 14998              	.LBE2715:
 14999              	.LBE2717:
1845:src/xeq.c     **** 		lift2_if_enabled();
 15000              		.loc 1 1845 3 is_stmt 1 view .LVU3937
1845:src/xeq.c     **** 		lift2_if_enabled();
 15001              		.loc 1 1845 15 is_stmt 0 view .LVU3938
 15002 0084 601C     		adds	r0, r4, #1
 15003 0086 FFF7FEFF 		bl	get_reg_n
 15004              	.LVL1075:
 15005              	.LBB2718:
 15006              	.LBB2719:
 15007              	.LBB2720:
 15008              	.LBB2721:
1119:src/xeq.c     **** }
 15009              		.loc 1 1119 24 view .LVU3939
 15010 008a 3368     		ldr	r3, [r6]
ARM GAS  /tmp/ccBFDvgN.s 			page 429


 15011 008c B3F8E837 		ldrh	r3, [r3, #2024]
 15012              	.LBE2721:
 15013              	.LBE2720:
 727:src/xeq.c     **** }
 15014              		.loc 1 727 2 view .LVU3940
 15015 0090 2B40     		ands	r3, r3, r5
 15016 0092 B3F5804F 		cmp	r3, #16384
 15017              	.LBE2719:
 15018              	.LBE2718:
1845:src/xeq.c     **** 		lift2_if_enabled();
 15019              		.loc 1 1845 15 view .LVU3941
 15020 0096 0146     		mov	r1, r0
 15021              	.LVL1076:
 15022              	.LBB2725:
 15023              	.LBI2718:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15024              		.loc 1 726 6 is_stmt 1 view .LVU3942
 15025              	.LBB2724:
 727:src/xeq.c     **** }
 15026              		.loc 1 727 2 view .LVU3943
 15027              	.LBB2723:
 15028              	.LBI2720:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15029              		.loc 1 1118 5 view .LVU3944
 15030              	.LBB2722:
1119:src/xeq.c     **** }
 15031              		.loc 1 1119 2 view .LVU3945
 15032              	.LBE2722:
 15033              	.LBE2723:
 727:src/xeq.c     **** }
 15034              		.loc 1 727 2 is_stmt 0 view .LVU3946
 15035 0098 0CBF     		ite	eq
 15036 009a 1022     		moveq	r2, #16
 15037 009c 0822     		movne	r2, #8
 15038 009e 0BA8     		add	r0, sp, #44
 15039              	.LVL1077:
 727:src/xeq.c     **** }
 15040              		.loc 1 727 2 view .LVU3947
 15041 00a0 FFF7FEFF 		bl	xcopy
 15042              	.LVL1078:
 727:src/xeq.c     **** }
 15043              		.loc 1 727 2 view .LVU3948
 15044              	.LBE2724:
 15045              	.LBE2725:
1846:src/xeq.c     **** 		copyreg(StackBase, &x);
 15046              		.loc 1 1846 3 is_stmt 1 view .LVU3949
 15047 00a4 FFF7FEFF 		bl	lift2_if_enabled
 15048              	.LVL1079:
1847:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 15049              		.loc 1 1847 3 view .LVU3950
 15050              	.LBB2726:
 15051              	.LBB2727:
 15052              	.LBB2728:
 15053              	.LBB2729:
1119:src/xeq.c     **** }
 15054              		.loc 1 1119 24 is_stmt 0 view .LVU3951
 15055 00a8 3368     		ldr	r3, [r6]
ARM GAS  /tmp/ccBFDvgN.s 			page 430


 15056              	.LBE2729:
 15057              	.LBE2728:
 15058              	.LBE2727:
 15059              	.LBE2726:
1847:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 15060              		.loc 1 1847 3 view .LVU3952
 15061 00aa 164A     		ldr	r2, .L1082+12
 15062              	.LVL1080:
 15063              	.LBB2733:
 15064              	.LBI2726:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15065              		.loc 1 726 6 is_stmt 1 view .LVU3953
 15066              	.LBB2732:
 727:src/xeq.c     **** }
 15067              		.loc 1 727 2 view .LVU3954
 15068              	.LBB2731:
 15069              	.LBI2728:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15070              		.loc 1 1118 5 view .LVU3955
 15071              	.LBB2730:
1119:src/xeq.c     **** }
 15072              		.loc 1 1119 2 view .LVU3956
1119:src/xeq.c     **** }
 15073              		.loc 1 1119 24 is_stmt 0 view .LVU3957
 15074 00ac B3F8E837 		ldrh	r3, [r3, #2024]
 15075              	.LBE2730:
 15076              	.LBE2731:
 727:src/xeq.c     **** }
 15077              		.loc 1 727 2 view .LVU3958
 15078 00b0 1068     		ldr	r0, [r2]
 15079 00b2 2B40     		ands	r3, r3, r5
 15080 00b4 B3F5804F 		cmp	r3, #16384
 15081 00b8 0CBF     		ite	eq
 15082 00ba 1022     		moveq	r2, #16
 15083              	.LVL1081:
 727:src/xeq.c     **** }
 15084              		.loc 1 727 2 view .LVU3959
 15085 00bc 0822     		movne	r2, #8
 15086 00be 02A9     		add	r1, sp, #8
 15087              	.LVL1082:
 727:src/xeq.c     **** }
 15088              		.loc 1 727 2 view .LVU3960
 15089 00c0 FFF7FEFF 		bl	xcopy
 15090              	.LVL1083:
 727:src/xeq.c     **** }
 15091              		.loc 1 727 2 view .LVU3961
 15092              	.LBE2732:
 15093              	.LBE2733:
1848:src/xeq.c     **** 	} else {
 15094              		.loc 1 1848 3 is_stmt 1 view .LVU3962
 15095 00c4 6520     		movs	r0, #101
 15096 00c6 FFF7FEFF 		bl	get_reg_n
 15097              	.LVL1084:
 15098              	.LBB2734:
 15099              	.LBI2734:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15100              		.loc 1 726 6 view .LVU3963
ARM GAS  /tmp/ccBFDvgN.s 			page 431


 15101              	.LBB2735:
 727:src/xeq.c     **** }
 15102              		.loc 1 727 2 view .LVU3964
 15103              	.LBB2736:
 15104              	.LBI2736:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15105              		.loc 1 1118 5 view .LVU3965
 15106              	.LBB2737:
1119:src/xeq.c     **** }
 15107              		.loc 1 1119 2 view .LVU3966
1119:src/xeq.c     **** }
 15108              		.loc 1 1119 24 is_stmt 0 view .LVU3967
 15109 00ca 3368     		ldr	r3, [r6]
 15110 00cc B3F8E837 		ldrh	r3, [r3, #2024]
 15111              	.LBE2737:
 15112              	.LBE2736:
 727:src/xeq.c     **** }
 15113              		.loc 1 727 2 view .LVU3968
 15114 00d0 1D40     		ands	r5, r5, r3
 15115 00d2 B5F5804F 		cmp	r5, #16384
 15116 00d6 0BA9     		add	r1, sp, #44
 15117              	.LVL1085:
 727:src/xeq.c     **** }
 15118              		.loc 1 727 2 view .LVU3969
 15119 00d8 0CBF     		ite	eq
 15120 00da 1022     		moveq	r2, #16
 15121 00dc 0822     		movne	r2, #8
 15122 00de FFF7FEFF 		bl	xcopy
 15123              	.LVL1086:
 727:src/xeq.c     **** }
 15124              		.loc 1 727 2 view .LVU3970
 15125 00e2 3368     		ldr	r3, [r6]
 15126              	.LBE2735:
 15127              	.LBE2734:
 15128              	.LBE2705:
 15129 00e4 9CE7     		b	.L1071
 15130              	.L1073:
1855:src/xeq.c     **** 			setXY(&r1, &r2);
 15131              		.loc 1 1855 4 is_stmt 1 view .LVU3971
 15132 00e6 FFF7FEFF 		bl	setlastXY
 15133              	.LVL1087:
1856:src/xeq.c     **** 		}
 15134              		.loc 1 1856 4 view .LVU3972
 15135 00ea 0BA9     		add	r1, sp, #44
 15136 00ec 02A8     		add	r0, sp, #8
 15137 00ee FFF7FEFF 		bl	setXY
 15138              	.LVL1088:
 15139              	.L1080:
 15140 00f2 2B68     		ldr	r3, [r5]
 15141 00f4 94E7     		b	.L1071
 15142              	.L1083:
 15143 00f6 00BF     		.align	2
 15144              	.L1082:
 15145 00f8 00000000 		.word	main_ram
 15146 00fc 00000000 		.word	Error
 15147 0100 00000000 		.word	StateWhileOn
 15148 0104 00000000 		.word	StackBase
ARM GAS  /tmp/ccBFDvgN.s 			page 432


 15149              	.LBE2740:
 15150              	.LBE2743:
 15151              		.cfi_endproc
 15152              	.LFE123:
 15154              		.section	.text.cmdircl,"ax",%progbits
 15155              		.align	1
 15156              		.p2align 2,,3
 15157              		.global	cmdircl
 15158              		.syntax unified
 15159              		.thumb
 15160              		.thumb_func
 15161              		.fpu fpv4-sp-d16
 15163              	cmdircl:
 15164              	.LVL1089:
 15165              	.LFB124:
1879:src/xeq.c     **** 	if (is_intmode())
 15166              		.loc 1 1879 46 view -0
 15167              		.cfi_startproc
 15168              		@ args = 0, pretend = 0, frame = 0
 15169              		@ frame_needed = 0, uses_anonymous_args = 0
 15170              		@ link register save eliminated.
1880:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15171              		.loc 1 1880 2 view .LVU3974
1880:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15172              		.loc 1 1880 6 is_stmt 0 view .LVU3975
 15173 0000 064B     		ldr	r3, .L1086
 15174 0002 1B68     		ldr	r3, [r3]
 15175 0004 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1880:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15176              		.loc 1 1880 5 view .LVU3976
 15177 0008 12F00102 		ands	r2, r2, #1
1879:src/xeq.c     **** 	if (is_intmode())
 15178              		.loc 1 1879 46 view .LVU3977
 15179 000c 0146     		mov	r1, r0
 15180              	.LVL1090:
1880:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15181              		.loc 1 1880 5 view .LVU3978
 15182 000e 02D0     		beq	.L1085
1881:src/xeq.c     **** 	else
 15183              		.loc 1 1881 3 is_stmt 1 view .LVU3979
 15184              	.LVL1091:
 15185              	.LBB2744:
 15186              	.LBI2744:
1771:src/xeq.c     **** 	do_rcl(arg, op);
 15187              		.loc 1 1771 6 view .LVU3980
 15188              	.LBB2745:
1772:src/xeq.c     **** }
 15189              		.loc 1 1772 2 view .LVU3981
 15190 0010 0A21     		movs	r1, #10
 15191 0012 FFF7FEBF 		b	do_rcl
 15192              	.LVL1092:
 15193              	.L1085:
1772:src/xeq.c     **** }
 15194              		.loc 1 1772 2 is_stmt 0 view .LVU3982
 15195              	.LBE2745:
 15196              	.LBE2744:
1883:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 433


 15197              		.loc 1 1883 3 is_stmt 1 view .LVU3983
 15198 0016 6420     		movs	r0, #100
 15199              	.LVL1093:
1883:src/xeq.c     **** }
 15200              		.loc 1 1883 3 is_stmt 0 view .LVU3984
 15201 0018 FFF7FEBF 		b	register_from_int
 15202              	.LVL1094:
 15203              	.L1087:
1883:src/xeq.c     **** }
 15204              		.loc 1 1883 3 view .LVU3985
 15205              		.align	2
 15206              	.L1086:
 15207 001c 00000000 		.word	main_ram
 15208              		.cfi_endproc
 15209              	.LFE124:
 15211              		.section	.text.cmdrrcl,"ax",%progbits
 15212              		.align	1
 15213              		.p2align 2,,3
 15214              		.global	cmdrrcl
 15215              		.syntax unified
 15216              		.thumb
 15217              		.thumb_func
 15218              		.fpu fpv4-sp-d16
 15220              	cmdrrcl:
 15221              	.LVL1095:
 15222              	.LFB125:
1887:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15223              		.loc 1 1887 46 is_stmt 1 view -0
 15224              		.cfi_startproc
 15225              		@ args = 0, pretend = 0, frame = 40
 15226              		@ frame_needed = 0, uses_anonymous_args = 0
1888:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15227              		.loc 1 1888 2 view .LVU3987
1887:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15228              		.loc 1 1887 46 is_stmt 0 view .LVU3988
 15229 0000 70B5     		push	{r4, r5, r6, lr}
 15230              		.cfi_def_cfa_offset 16
 15231              		.cfi_offset 4, -16
 15232              		.cfi_offset 5, -12
 15233              		.cfi_offset 6, -8
 15234              		.cfi_offset 14, -4
1888:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15235              		.loc 1 1888 22 view .LVU3989
 15236 0002 1F4C     		ldr	r4, .L1095
 15237 0004 2368     		ldr	r3, [r4]
1888:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15238              		.loc 1 1888 28 view .LVU3990
 15239 0006 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1889:src/xeq.c     **** 
 15240              		.loc 1 1889 26 view .LVU3991
 15241 000a 8029     		cmp	r1, #128
1887:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15242              		.loc 1 1887 46 view .LVU3992
 15243 000c 8AB0     		sub	sp, sp, #40
 15244              		.cfi_def_cfa_offset 56
1888:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15245              		.loc 1 1888 28 view .LVU3993
ARM GAS  /tmp/ccBFDvgN.s 			page 434


 15246 000e C2F38015 		ubfx	r5, r2, #6, #1
 15247              	.LVL1096:
1889:src/xeq.c     **** 
 15248              		.loc 1 1889 2 is_stmt 1 view .LVU3994
1889:src/xeq.c     **** 
 15249              		.loc 1 1889 26 is_stmt 0 view .LVU3995
 15250 0012 0CBF     		ite	eq
 15251 0014 0121     		moveq	r1, #1
 15252              	.LVL1097:
1889:src/xeq.c     **** 
 15253              		.loc 1 1889 26 view .LVU3996
 15254 0016 0021     		movne	r1, #0
 15255              	.LVL1098:
1891:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15256              		.loc 1 1891 2 is_stmt 1 view .LVU3997
1891:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15257              		.loc 1 1891 5 is_stmt 0 view .LVU3998
 15258 0018 26D0     		beq	.L1093
 15259              	.LVL1099:
 15260              	.L1089:
1897:src/xeq.c     **** 	if (is_intmode()) {
 15261              		.loc 1 1897 2 is_stmt 1 view .LVU3999
1897:src/xeq.c     **** 	if (is_intmode()) {
 15262              		.loc 1 1897 21 is_stmt 0 view .LVU4000
 15263 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1898:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15264              		.loc 1 1898 6 view .LVU4001
 15265 001e 93F8E867 		ldrb	r6, [r3, #2024]	@ zero_extendqisi2
1897:src/xeq.c     **** 	if (is_intmode()) {
 15266              		.loc 1 1897 21 view .LVU4002
 15267 0022 61F38612 		bfi	r2, r1, #6, #1
 15268 0026 83F8E927 		strb	r2, [r3, #2025]
 15269              	.LVL1100:
1898:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15270              		.loc 1 1898 2 is_stmt 1 view .LVU4003
1898:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15271              		.loc 1 1898 5 is_stmt 0 view .LVU4004
 15272 002a F307     		lsls	r3, r6, #31
1899:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15273              		.loc 1 1899 3 view .LVU4005
 15274 002c 0146     		mov	r1, r0
 15275              	.LVL1101:
1898:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15276              		.loc 1 1898 5 view .LVU4006
 15277 002e 0FD4     		bmi	.L1094
 15278              	.LBB2753:
1903:src/xeq.c     **** 		getRegister(&x, arg);
 15279              		.loc 1 1903 3 is_stmt 1 view .LVU4007
1904:src/xeq.c     **** 
 15280              		.loc 1 1904 3 view .LVU4008
 15281 0030 01A8     		add	r0, sp, #4
 15282              	.LVL1102:
1904:src/xeq.c     **** 
 15283              		.loc 1 1904 3 is_stmt 0 view .LVU4009
 15284 0032 FFF7FEFF 		bl	getRegister
 15285              	.LVL1103:
1906:src/xeq.c     **** 		setX(&x);
ARM GAS  /tmp/ccBFDvgN.s 			page 435


 15286              		.loc 1 1906 3 is_stmt 1 view .LVU4010
1906:src/xeq.c     **** 		setX(&x);
 15287              		.loc 1 1906 22 is_stmt 0 view .LVU4011
 15288 0036 2368     		ldr	r3, [r4]
 15289 0038 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15290 003c 65F38612 		bfi	r2, r5, #6, #1
 15291              	.LBB2754:
 15292              	.LBB2755:
 829:src/xeq.c     **** }
 15293              		.loc 1 829 2 view .LVU4012
 15294 0040 01A9     		add	r1, sp, #4
 15295              	.LBE2755:
 15296              	.LBE2754:
1906:src/xeq.c     **** 		setX(&x);
 15297              		.loc 1 1906 22 view .LVU4013
 15298 0042 83F8E927 		strb	r2, [r3, #2025]
1907:src/xeq.c     **** 	}
 15299              		.loc 1 1907 3 is_stmt 1 view .LVU4014
 15300              	.LVL1104:
 15301              	.LBB2757:
 15302              	.LBI2754:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 15303              		.loc 1 828 6 view .LVU4015
 15304              	.LBB2756:
 829:src/xeq.c     **** }
 15305              		.loc 1 829 2 view .LVU4016
 15306 0046 6420     		movs	r0, #100
 15307 0048 FFF7FEFF 		bl	setRegister
 15308              	.LVL1105:
 15309              	.L1088:
 829:src/xeq.c     **** }
 15310              		.loc 1 829 2 is_stmt 0 view .LVU4017
 15311              	.LBE2756:
 15312              	.LBE2757:
 15313              	.LBE2753:
1909:src/xeq.c     **** 
 15314              		.loc 1 1909 1 view .LVU4018
 15315 004c 0AB0     		add	sp, sp, #40
 15316              		.cfi_remember_state
 15317              		.cfi_def_cfa_offset 16
 15318              		@ sp needed
 15319 004e 70BD     		pop	{r4, r5, r6, pc}
 15320              	.LVL1106:
 15321              	.L1094:
 15322              		.cfi_restore_state
1899:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15323              		.loc 1 1899 3 is_stmt 1 view .LVU4019
 15324 0050 6420     		movs	r0, #100
 15325              	.LVL1107:
1899:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15326              		.loc 1 1899 3 is_stmt 0 view .LVU4020
 15327 0052 FFF7FEFF 		bl	int_from_register
 15328              	.LVL1108:
1900:src/xeq.c     **** 	}
 15329              		.loc 1 1900 3 is_stmt 1 view .LVU4021
1900:src/xeq.c     **** 	}
 15330              		.loc 1 1900 22 is_stmt 0 view .LVU4022
ARM GAS  /tmp/ccBFDvgN.s 			page 436


 15331 0056 2368     		ldr	r3, [r4]
 15332 0058 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15333 005c 65F38612 		bfi	r2, r5, #6, #1
 15334 0060 83F8E927 		strb	r2, [r3, #2025]
1909:src/xeq.c     **** 
 15335              		.loc 1 1909 1 view .LVU4023
 15336 0064 0AB0     		add	sp, sp, #40
 15337              		.cfi_remember_state
 15338              		.cfi_def_cfa_offset 16
 15339              		@ sp needed
 15340 0066 70BD     		pop	{r4, r5, r6, pc}
 15341              	.LVL1109:
 15342              	.L1093:
 15343              		.cfi_restore_state
1891:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15344              		.loc 1 1891 14 discriminator 1 view .LVU4024
 15345 0068 A0F16402 		sub	r2, r0, #100
 15346              	.LVL1110:
1891:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15347              		.loc 1 1891 14 discriminator 1 view .LVU4025
 15348 006c 0B2A     		cmp	r2, #11
 15349 006e D4D8     		bhi	.L1089
1893:src/xeq.c     **** 		return;
 15350              		.loc 1 1893 3 is_stmt 1 view .LVU4026
 15351              	.LVL1111:
 15352              	.LBB2758:
 15353              	.LBI2758:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15354              		.loc 1 546 5 view .LVU4027
 15355              	.LBB2759:
 547:src/xeq.c     **** 		Error = e;
 15356              		.loc 1 547 2 view .LVU4028
 547:src/xeq.c     **** 		Error = e;
 15357              		.loc 1 547 12 is_stmt 0 view .LVU4029
 15358 0070 044B     		ldr	r3, .L1095+4
 15359              	.LVL1112:
 547:src/xeq.c     **** 		Error = e;
 15360              		.loc 1 547 5 view .LVU4030
 15361 0072 1A68     		ldr	r2, [r3]
 15362 0074 002A     		cmp	r2, #0
 15363 0076 E9D1     		bne	.L1088
 15364              	.LVL1113:
 15365              	.LBB2760:
 15366              	.LBI2760:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15367              		.loc 1 546 5 is_stmt 1 view .LVU4031
 15368              	.LBB2761:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 15369              		.loc 1 548 3 view .LVU4032
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 15370              		.loc 1 548 9 is_stmt 0 view .LVU4033
 15371 0078 0822     		movs	r2, #8
 15372 007a 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 15373              		.loc 1 549 3 is_stmt 1 view .LVU4034
 15374 007c E6E7     		b	.L1088
 15375              	.L1096:
ARM GAS  /tmp/ccBFDvgN.s 			page 437


 15376 007e 00BF     		.align	2
 15377              	.L1095:
 15378 0080 00000000 		.word	main_ram
 15379 0084 00000000 		.word	Error
 15380              	.LBE2761:
 15381              	.LBE2760:
 15382              	.LBE2759:
 15383              	.LBE2758:
 15384              		.cfi_endproc
 15385              	.LFE125:
 15387              		.section	.text.swap_reg,"ax",%progbits
 15388              		.align	1
 15389              		.p2align 2,,3
 15390              		.global	swap_reg
 15391              		.syntax unified
 15392              		.thumb
 15393              		.thumb_func
 15394              		.fpu fpv4-sp-d16
 15396              	swap_reg:
 15397              	.LVL1114:
 15398              	.LFB126:
1914:src/xeq.c     **** 	REGISTER t;
 15399              		.loc 1 1914 41 view -0
 15400              		.cfi_startproc
 15401              		@ args = 0, pretend = 0, frame = 16
 15402              		@ frame_needed = 0, uses_anonymous_args = 0
1915:src/xeq.c     **** 
 15403              		.loc 1 1915 2 view .LVU4036
1917:src/xeq.c     **** 	copyreg(a, b);
 15404              		.loc 1 1917 2 view .LVU4037
1914:src/xeq.c     **** 	REGISTER t;
 15405              		.loc 1 1914 41 is_stmt 0 view .LVU4038
 15406 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 15407              		.cfi_def_cfa_offset 20
 15408              		.cfi_offset 4, -20
 15409              		.cfi_offset 5, -16
 15410              		.cfi_offset 6, -12
 15411              		.cfi_offset 7, -8
 15412              		.cfi_offset 14, -4
 15413              	.LBB2762:
 15414              	.LBB2763:
 15415              	.LBB2764:
 15416              	.LBB2765:
1119:src/xeq.c     **** }
 15417              		.loc 1 1119 24 view .LVU4039
 15418 0002 174F     		ldr	r7, .L1105
 15419 0004 3B68     		ldr	r3, [r7]
 15420 0006 B3F8E837 		ldrh	r3, [r3, #2024]
 15421 000a 44F20104 		movw	r4, #16385
 15422              	.LBE2765:
 15423              	.LBE2764:
 727:src/xeq.c     **** }
 15424              		.loc 1 727 2 view .LVU4040
 15425 000e 2340     		ands	r3, r3, r4
 15426              	.LBE2763:
 15427              	.LBE2762:
1914:src/xeq.c     **** 	REGISTER t;
ARM GAS  /tmp/ccBFDvgN.s 			page 438


 15428              		.loc 1 1914 41 view .LVU4041
 15429 0010 85B0     		sub	sp, sp, #20
 15430              		.cfi_def_cfa_offset 40
 15431              	.LVL1115:
 15432              	.LBB2770:
 15433              	.LBB2768:
 727:src/xeq.c     **** }
 15434              		.loc 1 727 2 view .LVU4042
 15435 0012 B3F5804F 		cmp	r3, #16384
 15436 0016 0CBF     		ite	eq
 15437 0018 1022     		moveq	r2, #16
 15438 001a 0822     		movne	r2, #8
 15439              	.LBE2768:
 15440              	.LBE2770:
1914:src/xeq.c     **** 	REGISTER t;
 15441              		.loc 1 1914 41 view .LVU4043
 15442 001c 0D46     		mov	r5, r1
 15443 001e 0646     		mov	r6, r0
 15444              	.LVL1116:
 15445              	.LBB2771:
 15446              	.LBI2762:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15447              		.loc 1 726 6 is_stmt 1 view .LVU4044
 15448              	.LBB2769:
 727:src/xeq.c     **** }
 15449              		.loc 1 727 2 view .LVU4045
 15450              	.LBB2767:
 15451              	.LBI2764:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15452              		.loc 1 1118 5 view .LVU4046
 15453              	.LBB2766:
1119:src/xeq.c     **** }
 15454              		.loc 1 1119 2 view .LVU4047
 15455              	.LBE2766:
 15456              	.LBE2767:
 727:src/xeq.c     **** }
 15457              		.loc 1 727 2 is_stmt 0 view .LVU4048
 15458 0020 0146     		mov	r1, r0
 15459              	.LVL1117:
 727:src/xeq.c     **** }
 15460              		.loc 1 727 2 view .LVU4049
 15461 0022 6846     		mov	r0, sp
 15462              	.LVL1118:
 727:src/xeq.c     **** }
 15463              		.loc 1 727 2 view .LVU4050
 15464 0024 FFF7FEFF 		bl	xcopy
 15465              	.LVL1119:
 727:src/xeq.c     **** }
 15466              		.loc 1 727 2 view .LVU4051
 15467              	.LBE2769:
 15468              	.LBE2771:
1918:src/xeq.c     **** 	copyreg(b, &t);
 15469              		.loc 1 1918 2 is_stmt 1 view .LVU4052
 15470              	.LBB2772:
 15471              	.LBI2772:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15472              		.loc 1 726 6 view .LVU4053
ARM GAS  /tmp/ccBFDvgN.s 			page 439


 15473              	.LBB2773:
 727:src/xeq.c     **** }
 15474              		.loc 1 727 2 view .LVU4054
 15475              	.LBB2774:
 15476              	.LBI2774:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15477              		.loc 1 1118 5 view .LVU4055
 15478              	.LBB2775:
1119:src/xeq.c     **** }
 15479              		.loc 1 1119 2 view .LVU4056
1119:src/xeq.c     **** }
 15480              		.loc 1 1119 24 is_stmt 0 view .LVU4057
 15481 0028 3B68     		ldr	r3, [r7]
 15482 002a B3F8E837 		ldrh	r3, [r3, #2024]
 15483              	.LBE2775:
 15484              	.LBE2774:
 727:src/xeq.c     **** }
 15485              		.loc 1 727 2 view .LVU4058
 15486 002e 2340     		ands	r3, r3, r4
 15487 0030 B3F5804F 		cmp	r3, #16384
 15488 0034 0CBF     		ite	eq
 15489 0036 1022     		moveq	r2, #16
 15490 0038 0822     		movne	r2, #8
 15491 003a 2946     		mov	r1, r5
 15492 003c 3046     		mov	r0, r6
 15493 003e FFF7FEFF 		bl	xcopy
 15494              	.LVL1120:
 727:src/xeq.c     **** }
 15495              		.loc 1 727 2 view .LVU4059
 15496              	.LBE2773:
 15497              	.LBE2772:
1919:src/xeq.c     **** }
 15498              		.loc 1 1919 2 is_stmt 1 view .LVU4060
 15499              	.LBB2776:
 15500              	.LBI2776:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15501              		.loc 1 726 6 view .LVU4061
 15502              	.LBB2777:
 727:src/xeq.c     **** }
 15503              		.loc 1 727 2 view .LVU4062
 15504              	.LBB2778:
 15505              	.LBI2778:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15506              		.loc 1 1118 5 view .LVU4063
 15507              	.LBB2779:
1119:src/xeq.c     **** }
 15508              		.loc 1 1119 2 view .LVU4064
1119:src/xeq.c     **** }
 15509              		.loc 1 1119 24 is_stmt 0 view .LVU4065
 15510 0042 3B68     		ldr	r3, [r7]
 15511 0044 B3F8E837 		ldrh	r3, [r3, #2024]
 15512              	.LBE2779:
 15513              	.LBE2778:
 727:src/xeq.c     **** }
 15514              		.loc 1 727 2 view .LVU4066
 15515 0048 1C40     		ands	r4, r4, r3
 15516 004a B4F5804F 		cmp	r4, #16384
ARM GAS  /tmp/ccBFDvgN.s 			page 440


 15517 004e 2846     		mov	r0, r5
 15518 0050 6946     		mov	r1, sp
 15519 0052 0CBF     		ite	eq
 15520 0054 1022     		moveq	r2, #16
 15521 0056 0822     		movne	r2, #8
 15522 0058 FFF7FEFF 		bl	xcopy
 15523              	.LVL1121:
 727:src/xeq.c     **** }
 15524              		.loc 1 727 2 view .LVU4067
 15525              	.LBE2777:
 15526              	.LBE2776:
1920:src/xeq.c     **** 
 15527              		.loc 1 1920 1 view .LVU4068
 15528 005c 05B0     		add	sp, sp, #20
 15529              		.cfi_def_cfa_offset 20
 15530              		@ sp needed
 15531 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 15532              	.LVL1122:
 15533              	.L1106:
1920:src/xeq.c     **** 
 15534              		.loc 1 1920 1 view .LVU4069
 15535              		.align	2
 15536              	.L1105:
 15537 0060 00000000 		.word	main_ram
 15538              		.cfi_endproc
 15539              	.LFE126:
 15541              		.section	.text.cmdswap,"ax",%progbits
 15542              		.align	1
 15543              		.p2align 2,,3
 15544              		.global	cmdswap
 15545              		.syntax unified
 15546              		.thumb
 15547              		.thumb_func
 15548              		.fpu fpv4-sp-d16
 15550              	cmdswap:
 15551              	.LVL1123:
 15552              	.LFB127:
1922:src/xeq.c     **** 	int idx;
 15553              		.loc 1 1922 46 is_stmt 1 view -0
 15554              		.cfi_startproc
 15555              		@ args = 0, pretend = 0, frame = 0
 15556              		@ frame_needed = 0, uses_anonymous_args = 0
1923:src/xeq.c     **** 
 15557              		.loc 1 1923 2 view .LVU4071
1925:src/xeq.c     **** 		idx = regX_idx;
 15558              		.loc 1 1925 2 view .LVU4072
1925:src/xeq.c     **** 		idx = regX_idx;
 15559              		.loc 1 1925 5 is_stmt 0 view .LVU4073
 15560 0000 1F29     		cmp	r1, #31
1922:src/xeq.c     **** 	int idx;
 15561              		.loc 1 1922 46 view .LVU4074
 15562 0002 70B5     		push	{r4, r5, r6, lr}
 15563              		.cfi_def_cfa_offset 16
 15564              		.cfi_offset 4, -16
 15565              		.cfi_offset 5, -12
 15566              		.cfi_offset 6, -8
 15567              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBFDvgN.s 			page 441


1922:src/xeq.c     **** 	int idx;
 15568              		.loc 1 1922 46 view .LVU4075
 15569 0004 0546     		mov	r5, r0
1925:src/xeq.c     **** 		idx = regX_idx;
 15570              		.loc 1 1925 5 view .LVU4076
 15571 0006 11D0     		beq	.L1108
1927:src/xeq.c     **** 		idx = regZ_idx;
 15572              		.loc 1 1927 10 view .LVU4077
 15573 0008 2029     		cmp	r1, #32
 15574 000a 0C46     		mov	r4, r1
1927:src/xeq.c     **** 		idx = regZ_idx;
 15575              		.loc 1 1927 7 is_stmt 1 view .LVU4078
1927:src/xeq.c     **** 		idx = regZ_idx;
 15576              		.loc 1 1927 10 is_stmt 0 view .LVU4079
 15577 000c 32D0     		beq	.L1109
1930:src/xeq.c     **** 
 15578              		.loc 1 1930 3 is_stmt 1 view .LVU4080
 15579              	.LVL1124:
1932:src/xeq.c     **** 
 15580              		.loc 1 1932 2 view .LVU4081
 15581 000e 01F15300 		add	r0, r1, #83
 15582              	.LVL1125:
1932:src/xeq.c     **** 
 15583              		.loc 1 1932 2 is_stmt 0 view .LVU4082
 15584 0012 FFF7FEFF 		bl	get_reg_n
 15585              	.LVL1126:
1932:src/xeq.c     **** 
 15586              		.loc 1 1932 2 view .LVU4083
 15587 0016 0646     		mov	r6, r0
 15588 0018 2846     		mov	r0, r5
 15589 001a FFF7FEFF 		bl	get_reg_n
 15590              	.LVL1127:
 15591 001e 0146     		mov	r1, r0
 15592 0020 3046     		mov	r0, r6
 15593 0022 FFF7FEFF 		bl	swap_reg
 15594              	.LVL1128:
1934:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15595              		.loc 1 1934 2 is_stmt 1 view .LVU4084
1934:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15596              		.loc 1 1934 5 is_stmt 0 view .LVU4085
 15597 0026 1E2C     		cmp	r4, #30
 15598 0028 31D8     		bhi	.L1113
1941:src/xeq.c     **** 
 15599              		.loc 1 1941 1 view .LVU4086
 15600 002a 70BD     		pop	{r4, r5, r6, pc}
 15601              	.LVL1129:
 15602              	.L1108:
1932:src/xeq.c     **** 
 15603              		.loc 1 1932 2 is_stmt 1 view .LVU4087
 15604 002c 6420     		movs	r0, #100
 15605              	.LVL1130:
1932:src/xeq.c     **** 
 15606              		.loc 1 1932 2 is_stmt 0 view .LVU4088
 15607 002e FFF7FEFF 		bl	get_reg_n
 15608              	.LVL1131:
1932:src/xeq.c     **** 
 15609              		.loc 1 1932 2 view .LVU4089
ARM GAS  /tmp/ccBFDvgN.s 			page 442


 15610 0032 0446     		mov	r4, r0
 15611 0034 2846     		mov	r0, r5
 15612 0036 FFF7FEFF 		bl	get_reg_n
 15613              	.LVL1132:
 15614 003a 0146     		mov	r1, r0
 15615 003c 2046     		mov	r0, r4
 15616 003e FFF7FEFF 		bl	swap_reg
 15617              	.LVL1133:
1934:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15618              		.loc 1 1934 2 is_stmt 1 view .LVU4090
1932:src/xeq.c     **** 
 15619              		.loc 1 1932 2 is_stmt 0 view .LVU4091
 15620 0042 6520     		movs	r0, #101
 15621              	.LVL1134:
 15622              	.L1111:
1935:src/xeq.c     **** 		set_was_complex();
 15623              		.loc 1 1935 3 is_stmt 1 view .LVU4092
 15624 0044 FFF7FEFF 		bl	get_reg_n
 15625              	.LVL1135:
 15626 0048 0446     		mov	r4, r0
 15627 004a 681C     		adds	r0, r5, #1
 15628 004c FFF7FEFF 		bl	get_reg_n
 15629              	.LVL1136:
 15630 0050 0146     		mov	r1, r0
 15631 0052 2046     		mov	r0, r4
 15632 0054 FFF7FEFF 		bl	swap_reg
 15633              	.LVL1137:
1936:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 15634              		.loc 1 1936 3 view .LVU4093
 15635              	.LBB2780:
 15636              	.LBI2780:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 15637              		.loc 1 539 13 view .LVU4094
 15638              	.LBB2781:
 540:src/xeq.c     **** }
 15639              		.loc 1 540 2 view .LVU4095
 540:src/xeq.c     **** }
 15640              		.loc 1 540 20 is_stmt 0 view .LVU4096
 15641 0058 0E4B     		ldr	r3, .L1114
 15642              	.LBE2781:
 15643              	.LBE2780:
1938:src/xeq.c     **** #endif
 15644              		.loc 1 1938 2 view .LVU4097
 15645 005a 0F4A     		ldr	r2, .L1114+4
 15646              	.LBB2784:
 15647              	.LBB2782:
 540:src/xeq.c     **** }
 15648              		.loc 1 540 20 view .LVU4098
 15649 005c 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 15650              	.LBE2782:
 15651              	.LBE2784:
1938:src/xeq.c     **** #endif
 15652              		.loc 1 1938 2 view .LVU4099
 15653 005e 1268     		ldr	r2, [r2]
 15654              	.LBB2785:
 15655              	.LBB2783:
 540:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 443


 15656              		.loc 1 540 20 view .LVU4100
 15657 0060 0120     		movs	r0, #1
 15658 0062 60F38711 		bfi	r1, r0, #6, #2
 15659 0066 1975     		strb	r1, [r3, #20]
 15660              	.LBE2783:
 15661              	.LBE2785:
1938:src/xeq.c     **** #endif
 15662              		.loc 1 1938 2 is_stmt 1 view .LVU4101
 15663 0068 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 15664 006c 0343     		orrs	r3, r3, r0
 15665 006e 82F8AD37 		strb	r3, [r2, #1965]
1941:src/xeq.c     **** 
 15666              		.loc 1 1941 1 is_stmt 0 view .LVU4102
 15667 0072 70BD     		pop	{r4, r5, r6, pc}
 15668              	.LVL1138:
 15669              	.L1109:
1932:src/xeq.c     **** 
 15670              		.loc 1 1932 2 is_stmt 1 view .LVU4103
 15671 0074 6620     		movs	r0, #102
 15672              	.LVL1139:
1932:src/xeq.c     **** 
 15673              		.loc 1 1932 2 is_stmt 0 view .LVU4104
 15674 0076 FFF7FEFF 		bl	get_reg_n
 15675              	.LVL1140:
1932:src/xeq.c     **** 
 15676              		.loc 1 1932 2 view .LVU4105
 15677 007a 0446     		mov	r4, r0
 15678 007c 2846     		mov	r0, r5
 15679 007e FFF7FEFF 		bl	get_reg_n
 15680              	.LVL1141:
 15681 0082 0146     		mov	r1, r0
 15682 0084 2046     		mov	r0, r4
 15683 0086 FFF7FEFF 		bl	swap_reg
 15684              	.LVL1142:
1934:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15685              		.loc 1 1934 2 is_stmt 1 view .LVU4106
1932:src/xeq.c     **** 
 15686              		.loc 1 1932 2 is_stmt 0 view .LVU4107
 15687 008a 6720     		movs	r0, #103
 15688 008c DAE7     		b	.L1111
 15689              	.LVL1143:
 15690              	.L1113:
1932:src/xeq.c     **** 
 15691              		.loc 1 1932 2 view .LVU4108
 15692 008e 04F15400 		add	r0, r4, #84
 15693 0092 D7E7     		b	.L1111
 15694              	.L1115:
 15695              		.align	2
 15696              	.L1114:
 15697 0094 00000000 		.word	StateWhileOn
 15698 0098 00000000 		.word	main_ram
 15699              		.cfi_endproc
 15700              	.LFE127:
 15702              		.section	.text.cmdview,"ax",%progbits
 15703              		.align	1
 15704              		.p2align 2,,3
 15705              		.global	cmdview
ARM GAS  /tmp/ccBFDvgN.s 			page 444


 15706              		.syntax unified
 15707              		.thumb
 15708              		.thumb_func
 15709              		.fpu fpv4-sp-d16
 15711              	cmdview:
 15712              	.LVL1144:
 15713              	.LFB128:
1946:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15714              		.loc 1 1946 46 is_stmt 1 view -0
 15715              		.cfi_startproc
 15716              		@ args = 0, pretend = 0, frame = 0
 15717              		@ frame_needed = 0, uses_anonymous_args = 0
1947:src/xeq.c     **** 
 15718              		.loc 1 1947 2 view .LVU4110
1946:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15719              		.loc 1 1946 46 is_stmt 0 view .LVU4111
 15720 0000 70B5     		push	{r4, r5, r6, lr}
 15721              		.cfi_def_cfa_offset 16
 15722              		.cfi_offset 4, -16
 15723              		.cfi_offset 5, -12
 15724              		.cfi_offset 6, -8
 15725              		.cfi_offset 14, -4
1949:src/xeq.c     **** 	ShowRegister = arg;
 15726              		.loc 1 1949 20 view .LVU4112
 15727 0002 134D     		ldr	r5, .L1122
1950:src/xeq.c     **** 	State2.disp_freeze = 0;
 15728              		.loc 1 1950 15 view .LVU4113
 15729 0004 134A     		ldr	r2, .L1122+4
1949:src/xeq.c     **** 	ShowRegister = arg;
 15730              		.loc 1 1949 20 view .LVU4114
 15731 0006 6B69     		ldr	r3, [r5, #20]
1950:src/xeq.c     **** 	State2.disp_freeze = 0;
 15732              		.loc 1 1950 15 view .LVU4115
 15733 0008 1060     		str	r0, [r2]
1946:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15734              		.loc 1 1946 46 view .LVU4116
 15735 000a 0E46     		mov	r6, r1
 15736              	.LVL1145:
1949:src/xeq.c     **** 	ShowRegister = arg;
 15737              		.loc 1 1949 2 is_stmt 1 view .LVU4117
1950:src/xeq.c     **** 	State2.disp_freeze = 0;
 15738              		.loc 1 1950 2 view .LVU4118
1951:src/xeq.c     **** 	display();
 15739              		.loc 1 1951 2 view .LVU4119
1947:src/xeq.c     **** 
 15740              		.loc 1 1947 41 is_stmt 0 view .LVU4120
 15741 000c A1F18C01 		sub	r1, #140
 15742              	.LVL1146:
1949:src/xeq.c     **** 	ShowRegister = arg;
 15743              		.loc 1 1949 20 view .LVU4121
 15744 0010 23F08053 		bic	r3, r3, #268435456
1947:src/xeq.c     **** 
 15745              		.loc 1 1947 41 view .LVU4122
 15746 0014 B1FA81F1 		clz	r1, r1
 15747 0018 4909     		lsrs	r1, r1, #5
1949:src/xeq.c     **** 	ShowRegister = arg;
 15748              		.loc 1 1949 20 view .LVU4123
ARM GAS  /tmp/ccBFDvgN.s 			page 445


 15749 001a 23F0C003 		bic	r3, r3, #192
 15750 001e 43EA8113 		orr	r3, r3, r1, lsl #6
1946:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15751              		.loc 1 1946 46 view .LVU4124
 15752 0022 0446     		mov	r4, r0
1949:src/xeq.c     **** 	ShowRegister = arg;
 15753              		.loc 1 1949 20 view .LVU4125
 15754 0024 6B61     		str	r3, [r5, #20]
1952:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
 15755              		.loc 1 1952 2 is_stmt 1 view .LVU4126
 15756 0026 FFF7FEFF 		bl	display
 15757              	.LVL1147:
1953:src/xeq.c     **** }
 15758              		.loc 1 1953 2 view .LVU4127
1953:src/xeq.c     **** }
 15759              		.loc 1 1953 40 is_stmt 0 view .LVU4128
 15760 002a 8C2E     		cmp	r6, #140
 15761 002c 02D0     		beq	.L1119
1953:src/xeq.c     **** }
 15762              		.loc 1 1953 29 discriminator 2 view .LVU4129
 15763 002e 0A4B     		ldr	r3, .L1122+8
 15764 0030 1B68     		ldr	r3, [r3]
 15765 0032 2BB1     		cbz	r3, .L1121
 15766              	.L1119:
1953:src/xeq.c     **** }
 15767              		.loc 1 1953 21 view .LVU4130
 15768 0034 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 15769 0036 0124     		movs	r4, #1
 15770              	.LVL1148:
1953:src/xeq.c     **** }
 15771              		.loc 1 1953 21 view .LVU4131
 15772 0038 64F30413 		bfi	r3, r4, #4, #1
 15773 003c EB75     		strb	r3, [r5, #23]
1954:src/xeq.c     **** 
 15774              		.loc 1 1954 1 view .LVU4132
 15775 003e 70BD     		pop	{r4, r5, r6, pc}
 15776              	.LVL1149:
 15777              	.L1121:
1953:src/xeq.c     **** }
 15778              		.loc 1 1953 21 discriminator 4 view .LVU4133
 15779 0040 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
1953:src/xeq.c     **** }
 15780              		.loc 1 1953 40 discriminator 4 view .LVU4134
 15781 0042 643C     		subs	r4, r4, #100
 15782              	.LVL1150:
1953:src/xeq.c     **** }
 15783              		.loc 1 1953 40 discriminator 4 view .LVU4135
 15784 0044 18BF     		it	ne
 15785 0046 0124     		movne	r4, #1
 15786              	.LVL1151:
1953:src/xeq.c     **** }
 15787              		.loc 1 1953 21 discriminator 4 view .LVU4136
 15788 0048 64F30413 		bfi	r3, r4, #4, #1
 15789 004c EB75     		strb	r3, [r5, #23]
1954:src/xeq.c     **** 
 15790              		.loc 1 1954 1 discriminator 4 view .LVU4137
 15791 004e 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccBFDvgN.s 			page 446


 15792              	.L1123:
 15793              		.align	2
 15794              	.L1122:
 15795 0050 00000000 		.word	StateWhileOn
 15796 0054 00000000 		.word	ShowRegister
 15797 0058 00000000 		.word	Running
 15798              		.cfi_endproc
 15799              	.LFE128:
 15801              		.section	.text.get_stack_size,"ax",%progbits
 15802              		.align	1
 15803              		.p2align 2,,3
 15804              		.global	get_stack_size
 15805              		.syntax unified
 15806              		.thumb
 15807              		.thumb_func
 15808              		.fpu fpv4-sp-d16
 15810              	get_stack_size:
 15811              	.LVL1152:
 15812              	.LFB129:
1958:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15813              		.loc 1 1958 36 is_stmt 1 view -0
 15814              		.cfi_startproc
 15815              		@ args = 0, pretend = 0, frame = 0
 15816              		@ frame_needed = 0, uses_anonymous_args = 0
1959:src/xeq.c     **** }
 15817              		.loc 1 1959 2 view .LVU4139
 15818              	.LBB2786:
 15819              	.LBI2786:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 15820              		.loc 1 712 5 view .LVU4140
 15821              	.LBB2787:
 713:src/xeq.c     **** 		return 4;
 15822              		.loc 1 713 2 view .LVU4141
 713:src/xeq.c     **** 		return 4;
 15823              		.loc 1 713 8 is_stmt 0 view .LVU4142
 15824 0000 0F4B     		ldr	r3, .L1131
 15825              	.LBE2787:
 15826              	.LBE2786:
1958:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15827              		.loc 1 1958 36 view .LVU4143
 15828 0002 00B5     		push	{lr}
 15829              		.cfi_def_cfa_offset 4
 15830              		.cfi_offset 14, -4
 15831              	.LBB2793:
 15832              	.LBB2790:
 713:src/xeq.c     **** 		return 4;
 15833              		.loc 1 713 8 view .LVU4144
 15834 0004 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 15835              		.loc 1 713 6 view .LVU4145
 15836 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 15837              		.loc 1 713 5 view .LVU4146
 15838 000a 1207     		lsls	r2, r2, #28
 15839              	.LBE2790:
 15840              	.LBE2793:
1958:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
ARM GAS  /tmp/ccBFDvgN.s 			page 447


 15841              		.loc 1 1958 36 view .LVU4147
 15842 000c 83B0     		sub	sp, sp, #12
 15843              		.cfi_def_cfa_offset 16
 15844              	.LBB2794:
 15845              	.LBB2791:
 713:src/xeq.c     **** 		return 4;
 15846              		.loc 1 713 5 view .LVU4148
 15847 000e 13D5     		bpl	.L1126
 15848              	.LBB2788:
 15849              	.LBI2788:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 15850              		.loc 1 185 5 is_stmt 1 view .LVU4149
 15851              	.LBB2789:
 186:src/xeq.c     **** }
 15852              		.loc 1 186 2 view .LVU4150
 186:src/xeq.c     **** }
 15853              		.loc 1 186 9 is_stmt 0 view .LVU4151
 15854 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 15855              	.LBE2789:
 15856              	.LBE2788:
 713:src/xeq.c     **** 		return 4;
 15857              		.loc 1 713 27 view .LVU4152
 15858 0014 9B0B     		lsrs	r3, r3, #14
 15859 0016 032B     		cmp	r3, #3
 15860 0018 09D0     		beq	.L1130
 15861              	.L1128:
 15862 001a 0822     		movs	r2, #8
 15863 001c 0023     		movs	r3, #0
 15864              	.L1125:
 15865              	.LVL1153:
 713:src/xeq.c     **** 		return 4;
 15866              		.loc 1 713 27 view .LVU4153
 15867              	.LBE2791:
 15868              	.LBE2794:
 15869              	.LBB2795:
 15870              	.LBI2795:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15871              		.loc 1 1509 6 is_stmt 1 view .LVU4154
 15872              	.LBB2796:
1510:src/xeq.c     **** }
 15873              		.loc 1 1510 2 view .LVU4155
 15874 001e 0021     		movs	r1, #0
 15875 0020 0091     		str	r1, [sp]
 15876 0022 6420     		movs	r0, #100
 15877              	.LVL1154:
1510:src/xeq.c     **** }
 15878              		.loc 1 1510 2 is_stmt 0 view .LVU4156
 15879 0024 FFF7FEFF 		bl	set_reg_n_int_sgn
 15880              	.LVL1155:
1510:src/xeq.c     **** }
 15881              		.loc 1 1510 2 view .LVU4157
 15882              	.LBE2796:
 15883              	.LBE2795:
1960:src/xeq.c     **** 
 15884              		.loc 1 1960 1 view .LVU4158
 15885 0028 03B0     		add	sp, sp, #12
 15886              		.cfi_remember_state
ARM GAS  /tmp/ccBFDvgN.s 			page 448


 15887              		.cfi_def_cfa_offset 4
 15888              		@ sp needed
 15889 002a 5DF804FB 		ldr	pc, [sp], #4
 15890              	.LVL1156:
 15891              	.L1130:
 15892              		.cfi_restore_state
 15893              	.LBB2797:
 15894              	.LBB2792:
 713:src/xeq.c     **** 		return 4;
 15895              		.loc 1 713 44 view .LVU4159
 15896 002e 054B     		ldr	r3, .L1131+4
 713:src/xeq.c     **** 		return 4;
 15897              		.loc 1 713 41 view .LVU4160
 15898 0030 93F90130 		ldrsb	r3, [r3, #1]
 15899 0034 002B     		cmp	r3, #0
 15900 0036 F0DB     		blt	.L1128
 15901              	.L1126:
 15902 0038 0422     		movs	r2, #4
 15903 003a 0023     		movs	r3, #0
 15904 003c EFE7     		b	.L1125
 15905              	.L1132:
 15906 003e 00BF     		.align	2
 15907              	.L1131:
 15908 0040 00000000 		.word	main_ram
 15909 0044 00000000 		.word	XromParams
 15910              	.LBE2792:
 15911              	.LBE2797:
 15912              		.cfi_endproc
 15913              	.LFE129:
 15915              		.section	.text.get_word_size,"ax",%progbits
 15916              		.align	1
 15917              		.p2align 2,,3
 15918              		.global	get_word_size
 15919              		.syntax unified
 15920              		.thumb
 15921              		.thumb_func
 15922              		.fpu fpv4-sp-d16
 15924              	get_word_size:
 15925              	.LVL1157:
 15926              	.LFB130:
1962:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15927              		.loc 1 1962 35 is_stmt 1 view -0
 15928              		.cfi_startproc
 15929              		@ args = 0, pretend = 0, frame = 0
 15930              		@ frame_needed = 0, uses_anonymous_args = 0
1963:src/xeq.c     **** }
 15931              		.loc 1 1963 2 view .LVU4162
1962:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15932              		.loc 1 1962 35 is_stmt 0 view .LVU4163
 15933 0000 00B5     		push	{lr}
 15934              		.cfi_def_cfa_offset 4
 15935              		.cfi_offset 14, -4
 15936 0002 83B0     		sub	sp, sp, #12
 15937              		.cfi_def_cfa_offset 16
1963:src/xeq.c     **** }
 15938              		.loc 1 1963 20 view .LVU4164
 15939 0004 FFF7FEFF 		bl	word_size
ARM GAS  /tmp/ccBFDvgN.s 			page 449


 15940              	.LVL1158:
 15941              	.LBB2798:
 15942              	.LBI2798:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15943              		.loc 1 1509 6 is_stmt 1 view .LVU4165
 15944              	.LBB2799:
1510:src/xeq.c     **** }
 15945              		.loc 1 1510 2 view .LVU4166
 15946 0008 0021     		movs	r1, #0
 15947 000a 0246     		mov	r2, r0
 15948 000c C317     		asrs	r3, r0, #31
 15949 000e 0091     		str	r1, [sp]
 15950 0010 6420     		movs	r0, #100
 15951              	.LVL1159:
1510:src/xeq.c     **** }
 15952              		.loc 1 1510 2 is_stmt 0 view .LVU4167
 15953 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 15954              	.LVL1160:
1510:src/xeq.c     **** }
 15955              		.loc 1 1510 2 view .LVU4168
 15956              	.LBE2799:
 15957              	.LBE2798:
1964:src/xeq.c     **** 
 15958              		.loc 1 1964 1 view .LVU4169
 15959 0016 03B0     		add	sp, sp, #12
 15960              		.cfi_def_cfa_offset 4
 15961              		@ sp needed
 15962 0018 5DF804FB 		ldr	pc, [sp], #4
 15963              		.cfi_endproc
 15964              	.LFE130:
 15966              		.section	.text.get_sign_mode,"ax",%progbits
 15967              		.align	1
 15968              		.p2align 2,,3
 15969              		.global	get_sign_mode
 15970              		.syntax unified
 15971              		.thumb
 15972              		.thumb_func
 15973              		.fpu fpv4-sp-d16
 15975              	get_sign_mode:
 15976              	.LVL1161:
 15977              	.LFB131:
1966:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15978              		.loc 1 1966 35 is_stmt 1 view -0
 15979              		.cfi_startproc
 15980              		@ args = 0, pretend = 0, frame = 0
 15981              		@ frame_needed = 0, uses_anonymous_args = 0
1967:src/xeq.c     **** 		0x02,		// 2's complement
 15982              		.loc 1 1967 2 view .LVU4171
1973:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15983              		.loc 1 1973 2 view .LVU4172
1966:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15984              		.loc 1 1966 35 is_stmt 0 view .LVU4173
 15985 0000 00B5     		push	{lr}
 15986              		.cfi_def_cfa_offset 4
 15987              		.cfi_offset 14, -4
 15988 0002 83B0     		sub	sp, sp, #12
 15989              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccBFDvgN.s 			page 450


1973:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15990              		.loc 1 1973 37 view .LVU4174
 15991 0004 FFF7FEFF 		bl	int_mode
 15992              	.LVL1162:
1973:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15993              		.loc 1 1973 22 view .LVU4175
 15994 0008 064B     		ldr	r3, .L1137
 15995 000a 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 15996              	.LVL1163:
1974:src/xeq.c     **** }
 15997              		.loc 1 1974 2 is_stmt 1 view .LVU4176
 15998              	.LBB2800:
 15999              	.LBI2800:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16000              		.loc 1 1509 6 view .LVU4177
 16001              	.LBB2801:
1510:src/xeq.c     **** }
 16002              		.loc 1 1510 2 view .LVU4178
 16003              	.LBE2801:
 16004              	.LBE2800:
1974:src/xeq.c     **** }
 16005              		.loc 1 1974 2 is_stmt 0 view .LVU4179
 16006 000c 03F00302 		and	r2, r3, #3
 16007 0010 03F08003 		and	r3, r3, #128
 16008              	.LVL1164:
1974:src/xeq.c     **** }
 16009              		.loc 1 1974 2 view .LVU4180
 16010 0014 0093     		str	r3, [sp]
 16011              	.LBB2803:
 16012              	.LBB2802:
1510:src/xeq.c     **** }
 16013              		.loc 1 1510 2 view .LVU4181
 16014 0016 6420     		movs	r0, #100
 16015              	.LVL1165:
1510:src/xeq.c     **** }
 16016              		.loc 1 1510 2 view .LVU4182
 16017 0018 0023     		movs	r3, #0
 16018 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 16019              	.LVL1166:
1510:src/xeq.c     **** }
 16020              		.loc 1 1510 2 view .LVU4183
 16021              	.LBE2802:
 16022              	.LBE2803:
1975:src/xeq.c     **** 
 16023              		.loc 1 1975 1 view .LVU4184
 16024 001e 03B0     		add	sp, sp, #12
 16025              		.cfi_def_cfa_offset 4
 16026              		@ sp needed
 16027 0020 5DF804FB 		ldr	pc, [sp], #4
 16028              	.L1138:
 16029              		.align	2
 16030              	.L1137:
 16031 0024 00000000 		.word	.LANCHOR4
 16032              		.cfi_endproc
 16033              	.LFE131:
 16035              		.section	.text.get_base,"ax",%progbits
 16036              		.align	1
ARM GAS  /tmp/ccBFDvgN.s 			page 451


 16037              		.p2align 2,,3
 16038              		.global	get_base
 16039              		.syntax unified
 16040              		.thumb
 16041              		.thumb_func
 16042              		.fpu fpv4-sp-d16
 16044              	get_base:
 16045              	.LVL1167:
 16046              	.LFB132:
1977:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 16047              		.loc 1 1977 30 is_stmt 1 view -0
 16048              		.cfi_startproc
 16049              		@ args = 0, pretend = 0, frame = 0
 16050              		@ frame_needed = 0, uses_anonymous_args = 0
1978:src/xeq.c     **** }
 16051              		.loc 1 1978 2 view .LVU4186
1977:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 16052              		.loc 1 1977 30 is_stmt 0 view .LVU4187
 16053 0000 00B5     		push	{lr}
 16054              		.cfi_def_cfa_offset 4
 16055              		.cfi_offset 14, -4
 16056 0002 83B0     		sub	sp, sp, #12
 16057              		.cfi_def_cfa_offset 16
1978:src/xeq.c     **** }
 16058              		.loc 1 1978 20 view .LVU4188
 16059 0004 FFF7FEFF 		bl	int_base
 16060              	.LVL1168:
 16061              	.LBB2804:
 16062              	.LBI2804:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16063              		.loc 1 1509 6 is_stmt 1 view .LVU4189
 16064              	.LBB2805:
1510:src/xeq.c     **** }
 16065              		.loc 1 1510 2 view .LVU4190
 16066 0008 0021     		movs	r1, #0
 16067 000a 0246     		mov	r2, r0
 16068 000c C317     		asrs	r3, r0, #31
 16069 000e 0091     		str	r1, [sp]
 16070 0010 6420     		movs	r0, #100
 16071              	.LVL1169:
1510:src/xeq.c     **** }
 16072              		.loc 1 1510 2 is_stmt 0 view .LVU4191
 16073 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 16074              	.LVL1170:
1510:src/xeq.c     **** }
 16075              		.loc 1 1510 2 view .LVU4192
 16076              	.LBE2805:
 16077              	.LBE2804:
1979:src/xeq.c     **** 
 16078              		.loc 1 1979 1 view .LVU4193
 16079 0016 03B0     		add	sp, sp, #12
 16080              		.cfi_def_cfa_offset 4
 16081              		@ sp needed
 16082 0018 5DF804FB 		ldr	pc, [sp], #4
 16083              		.cfi_endproc
 16084              	.LFE132:
 16086              		.section	.text.DM42_Ticker,"ax",%progbits
ARM GAS  /tmp/ccBFDvgN.s 			page 452


 16087              		.align	1
 16088              		.p2align 2,,3
 16089              		.global	DM42_Ticker
 16090              		.syntax unified
 16091              		.thumb
 16092              		.thumb_func
 16093              		.fpu fpv4-sp-d16
 16095              	DM42_Ticker:
 16096              	.LFB133:
1982:src/xeq.c     ****     long int f, t;
 16097              		.loc 1 1982 26 is_stmt 1 view -0
 16098              		.cfi_startproc
 16099              		@ args = 0, pretend = 0, frame = 0
 16100              		@ frame_needed = 0, uses_anonymous_args = 0
1983:src/xeq.c     ****     t = get_rtc_ticks();
 16101              		.loc 1 1983 5 view .LVU4195
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16102              		.loc 1 1984 5 view .LVU4196
1982:src/xeq.c     ****     long int f, t;
 16103              		.loc 1 1982 26 is_stmt 0 view .LVU4197
 16104 0000 08B5     		push	{r3, lr}
 16105              		.cfi_def_cfa_offset 8
 16106              		.cfi_offset 3, -8
 16107              		.cfi_offset 14, -4
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16108              		.loc 1 1984 9 view .LVU4198
 16109 0002 044B     		ldr	r3, .L1143
 16110 0004 9847     		blx	r3
 16111              	.LVL1171:
1985:src/xeq.c     ****     return f;
 16112              		.loc 1 1985 5 is_stmt 1 view .LVU4199
1986:src/xeq.c     ****  }
 16113              		.loc 1 1986 5 view .LVU4200
1985:src/xeq.c     ****     return f;
 16114              		.loc 1 1985 13 is_stmt 0 view .LVU4201
 16115 0006 C0F31300 		ubfx	r0, r0, #0, #20
 16116              	.LVL1172:
1985:src/xeq.c     ****     return f;
 16117              		.loc 1 1985 23 view .LVU4202
 16118 000a 00EB8000 		add	r0, r0, r0, lsl #2
1987:src/xeq.c     **** #endif
 16119              		.loc 1 1987 2 view .LVU4203
 16120 000e C009     		lsrs	r0, r0, #7
 16121 0010 08BD     		pop	{r3, pc}
 16122              	.L1144:
 16123 0012 00BF     		.align	2
 16124              	.L1143:
 16125 0014 B9040008 		.word	134218937
 16126              		.cfi_endproc
 16127              	.LFE133:
 16129              		.section	.text.op_ticks,"ax",%progbits
 16130              		.align	1
 16131              		.p2align 2,,3
 16132              		.global	op_ticks
 16133              		.syntax unified
 16134              		.thumb
 16135              		.thumb_func
ARM GAS  /tmp/ccBFDvgN.s 			page 453


 16136              		.fpu fpv4-sp-d16
 16138              	op_ticks:
 16139              	.LVL1173:
 16140              	.LFB134:
1990:src/xeq.c     **** #if !defined(CONSOLE)
 16141              		.loc 1 1990 30 is_stmt 1 view -0
 16142              		.cfi_startproc
 16143              		@ args = 0, pretend = 0, frame = 0
 16144              		@ frame_needed = 0, uses_anonymous_args = 0
1992:src/xeq.c     **** #else 
 16145              		.loc 1 1992 5 view .LVU4205
 16146              	.LBB2806:
 16147              	.LBI2806:
1982:src/xeq.c     ****     long int f, t;
 16148              		.loc 1 1982 11 view .LVU4206
 16149              	.LBB2807:
1983:src/xeq.c     ****     t = get_rtc_ticks();
 16150              		.loc 1 1983 5 view .LVU4207
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16151              		.loc 1 1984 5 view .LVU4208
 16152              	.LBE2807:
 16153              	.LBE2806:
1990:src/xeq.c     **** #if !defined(CONSOLE)
 16154              		.loc 1 1990 30 is_stmt 0 view .LVU4209
 16155 0000 00B5     		push	{lr}
 16156              		.cfi_def_cfa_offset 4
 16157              		.cfi_offset 14, -4
 16158              	.LBB2811:
 16159              	.LBB2808:
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16160              		.loc 1 1984 9 view .LVU4210
 16161 0002 084B     		ldr	r3, .L1147
 16162              	.LBE2808:
 16163              	.LBE2811:
1990:src/xeq.c     **** #if !defined(CONSOLE)
 16164              		.loc 1 1990 30 view .LVU4211
 16165 0004 83B0     		sub	sp, sp, #12
 16166              		.cfi_def_cfa_offset 16
 16167              	.LBB2812:
 16168              	.LBB2809:
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16169              		.loc 1 1984 9 view .LVU4212
 16170 0006 9847     		blx	r3
 16171              	.LVL1174:
1985:src/xeq.c     ****     return f;
 16172              		.loc 1 1985 5 is_stmt 1 view .LVU4213
1986:src/xeq.c     ****  }
 16173              		.loc 1 1986 5 view .LVU4214
1986:src/xeq.c     ****  }
 16174              		.loc 1 1986 5 is_stmt 0 view .LVU4215
 16175              	.LBE2809:
 16176              	.LBE2812:
 16177              	.LBB2813:
 16178              	.LBI2813:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16179              		.loc 1 1509 6 is_stmt 1 view .LVU4216
 16180              	.LBB2814:
ARM GAS  /tmp/ccBFDvgN.s 			page 454


1510:src/xeq.c     **** }
 16181              		.loc 1 1510 2 view .LVU4217
 16182              	.LBE2814:
 16183              	.LBE2813:
 16184              	.LBB2816:
 16185              	.LBB2810:
1985:src/xeq.c     ****     return f;
 16186              		.loc 1 1985 13 is_stmt 0 view .LVU4218
 16187 0008 C0F31300 		ubfx	r0, r0, #0, #20
 16188              	.LVL1175:
1985:src/xeq.c     ****     return f;
 16189              		.loc 1 1985 23 view .LVU4219
 16190 000c 00EB8000 		add	r0, r0, r0, lsl #2
1985:src/xeq.c     ****     return f;
 16191              		.loc 1 1985 7 view .LVU4220
 16192 0010 C209     		lsrs	r2, r0, #7
 16193              	.LBE2810:
 16194              	.LBE2816:
 16195              	.LBB2817:
 16196              	.LBB2815:
1510:src/xeq.c     **** }
 16197              		.loc 1 1510 2 view .LVU4221
 16198 0012 0021     		movs	r1, #0
 16199 0014 D317     		asrs	r3, r2, #31
 16200 0016 0091     		str	r1, [sp]
 16201 0018 6420     		movs	r0, #100
 16202 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 16203              	.LVL1176:
1510:src/xeq.c     **** }
 16204              		.loc 1 1510 2 view .LVU4222
 16205              	.LBE2815:
 16206              	.LBE2817:
2000:src/xeq.c     **** 
 16207              		.loc 1 2000 1 view .LVU4223
 16208 001e 03B0     		add	sp, sp, #12
 16209              		.cfi_def_cfa_offset 4
 16210              		@ sp needed
 16211 0020 5DF804FB 		ldr	pc, [sp], #4
 16212              	.L1148:
 16213              		.align	2
 16214              	.L1147:
 16215 0024 B9040008 		.word	134218937
 16216              		.cfi_endproc
 16217              	.LFE134:
 16219              		.section	.text.op_voltage,"ax",%progbits
 16220              		.align	1
 16221              		.p2align 2,,3
 16222              		.global	op_voltage
 16223              		.syntax unified
 16224              		.thumb
 16225              		.thumb_func
 16226              		.fpu fpv4-sp-d16
 16228              	op_voltage:
 16229              	.LVL1177:
 16230              	.LFB135:
2003:src/xeq.c     **** 	decNumber t, u;
 16231              		.loc 1 2003 32 is_stmt 1 view -0
ARM GAS  /tmp/ccBFDvgN.s 			page 455


 16232              		.cfi_startproc
 16233              		@ args = 0, pretend = 0, frame = 72
 16234              		@ frame_needed = 0, uses_anonymous_args = 0
2004:src/xeq.c     **** #ifdef REALBUILD
 16235              		.loc 1 2004 2 view .LVU4225
2008:src/xeq.c     **** 	v = v / 100;
 16236              		.loc 1 2008 2 view .LVU4226
2003:src/xeq.c     **** 	decNumber t, u;
 16237              		.loc 1 2003 32 is_stmt 0 view .LVU4227
 16238 0000 00B5     		push	{lr}
 16239              		.cfi_def_cfa_offset 4
 16240              		.cfi_offset 14, -4
2008:src/xeq.c     **** 	v = v / 100;
 16241              		.loc 1 2008 10 view .LVU4228
 16242 0002 154B     		ldr	r3, .L1153
2003:src/xeq.c     **** 	decNumber t, u;
 16243              		.loc 1 2003 32 view .LVU4229
 16244 0004 95B0     		sub	sp, sp, #84
 16245              		.cfi_def_cfa_offset 88
2008:src/xeq.c     **** 	v = v / 100;
 16246              		.loc 1 2008 10 view .LVU4230
 16247 0006 9847     		blx	r3
 16248              	.LVL1178:
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16249              		.loc 1 2014 6 view .LVU4231
 16250 0008 144B     		ldr	r3, .L1153+4
2009:src/xeq.c     **** #else
 16251              		.loc 1 2009 4 view .LVU4232
 16252 000a 154A     		ldr	r2, .L1153+8
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16253              		.loc 1 2014 6 view .LVU4233
 16254 000c 1B68     		ldr	r3, [r3]
 16255              	.LVL1179:
2009:src/xeq.c     **** #else
 16256              		.loc 1 2009 2 is_stmt 1 view .LVU4234
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16257              		.loc 1 2014 6 is_stmt 0 view .LVU4235
 16258 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2009:src/xeq.c     **** #else
 16259              		.loc 1 2009 4 view .LVU4236
 16260 0012 82FB0012 		smull	r1, r2, r2, r0
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16261              		.loc 1 2014 5 view .LVU4237
 16262 0016 DB07     		lsls	r3, r3, #31
2009:src/xeq.c     **** #else
 16263              		.loc 1 2009 4 view .LVU4238
 16264 0018 4FEAE070 		asr	r0, r0, #31
 16265              	.LVL1180:
2009:src/xeq.c     **** #else
 16266              		.loc 1 2009 4 view .LVU4239
 16267 001c C0EB6212 		rsb	r2, r0, r2, asr #5
 16268              	.LVL1181:
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16269              		.loc 1 2014 2 is_stmt 1 view .LVU4240
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16270              		.loc 1 2014 5 is_stmt 0 view .LVU4241
 16271 0020 08D5     		bpl	.L1150
ARM GAS  /tmp/ccBFDvgN.s 			page 456


2015:src/xeq.c     **** 	} else {
 16272              		.loc 1 2015 3 is_stmt 1 view .LVU4242
 16273              	.LVL1182:
 16274              	.LBB2818:
 16275              	.LBI2818:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16276              		.loc 1 1509 6 view .LVU4243
 16277              	.LBB2819:
1510:src/xeq.c     **** }
 16278              		.loc 1 1510 2 view .LVU4244
 16279 0022 0023     		movs	r3, #0
 16280 0024 0093     		str	r3, [sp]
 16281 0026 6420     		movs	r0, #100
 16282 0028 D317     		asrs	r3, r2, #31
 16283 002a FFF7FEFF 		bl	set_reg_n_int_sgn
 16284              	.LVL1183:
1510:src/xeq.c     **** }
 16285              		.loc 1 1510 2 is_stmt 0 view .LVU4245
 16286              	.LBE2819:
 16287              	.LBE2818:
2021:src/xeq.c     **** 
 16288              		.loc 1 2021 1 view .LVU4246
 16289 002e 15B0     		add	sp, sp, #84
 16290              		.cfi_remember_state
 16291              		.cfi_def_cfa_offset 4
 16292              		@ sp needed
 16293 0030 5DF804FB 		ldr	pc, [sp], #4
 16294              	.LVL1184:
 16295              	.L1150:
 16296              		.cfi_restore_state
2017:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
 16297              		.loc 1 2017 3 is_stmt 1 view .LVU4247
 16298 0034 D317     		asrs	r3, r2, #31
 16299 0036 02A8     		add	r0, sp, #8
 16300 0038 FFF7FEFF 		bl	ullint_to_dn
 16301              	.LVL1185:
2018:src/xeq.c     **** 		setX(&u);
 16302              		.loc 1 2018 3 view .LVU4248
 16303 003c 02A9     		add	r1, sp, #8
 16304 003e 4FF0FF32 		mov	r2, #-1
 16305 0042 0BA8     		add	r0, sp, #44
 16306 0044 FFF7FEFF 		bl	dn_mulpow10
 16307              	.LVL1186:
2019:src/xeq.c     **** 	}
 16308              		.loc 1 2019 3 view .LVU4249
 16309              	.LBB2820:
 16310              	.LBI2820:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 16311              		.loc 1 828 6 view .LVU4250
 16312              	.LBB2821:
 829:src/xeq.c     **** }
 16313              		.loc 1 829 2 view .LVU4251
 16314 0048 0BA9     		add	r1, sp, #44
 16315              	.LVL1187:
 829:src/xeq.c     **** }
 16316              		.loc 1 829 2 is_stmt 0 view .LVU4252
 16317 004a 6420     		movs	r0, #100
ARM GAS  /tmp/ccBFDvgN.s 			page 457


 16318 004c FFF7FEFF 		bl	setRegister
 16319              	.LVL1188:
 829:src/xeq.c     **** }
 16320              		.loc 1 829 2 view .LVU4253
 16321              	.LBE2821:
 16322              	.LBE2820:
2021:src/xeq.c     **** 
 16323              		.loc 1 2021 1 view .LVU4254
 16324 0050 15B0     		add	sp, sp, #84
 16325              		.cfi_def_cfa_offset 4
 16326              		@ sp needed
 16327 0052 5DF804FB 		ldr	pc, [sp], #4
 16328              	.L1154:
 16329 0056 00BF     		.align	2
 16330              	.L1153:
 16331 0058 F1020008 		.word	134218481
 16332 005c 00000000 		.word	main_ram
 16333 0060 1F85EB51 		.word	1374389535
 16334              		.cfi_endproc
 16335              	.LFE135:
 16337              		.section	.text.free_mem,"ax",%progbits
 16338              		.align	1
 16339              		.p2align 2,,3
 16340              		.global	free_mem
 16341              		.syntax unified
 16342              		.thumb
 16343              		.thumb_func
 16344              		.fpu fpv4-sp-d16
 16346              	free_mem:
 16347              	.LFB136:
2026:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16348              		.loc 1 2026 20 is_stmt 1 view -0
 16349              		.cfi_startproc
 16350              		@ args = 0, pretend = 0, frame = 0
 16351              		@ frame_needed = 0, uses_anonymous_args = 0
 16352              		@ link register save eliminated.
2027:src/xeq.c     **** }
 16353              		.loc 1 2027 2 view .LVU4256
2027:src/xeq.c     **** }
 16354              		.loc 1 2027 22 is_stmt 0 view .LVU4257
 16355 0000 034A     		ldr	r2, .L1156
2027:src/xeq.c     **** }
 16356              		.loc 1 2027 20 view .LVU4258
 16357 0002 044B     		ldr	r3, .L1156+4
2027:src/xeq.c     **** }
 16358              		.loc 1 2027 22 view .LVU4259
 16359 0004 1268     		ldr	r2, [r2]
2027:src/xeq.c     **** }
 16360              		.loc 1 2027 20 view .LVU4260
 16361 0006 1B68     		ldr	r3, [r3]
2027:src/xeq.c     **** }
 16362              		.loc 1 2027 22 view .LVU4261
 16363 0008 B2F9E207 		ldrsh	r0, [r2, #2018]
2028:src/xeq.c     **** 
 16364              		.loc 1 2028 1 view .LVU4262
 16365 000c 1844     		add	r0, r0, r3
 16366 000e 7047     		bx	lr
ARM GAS  /tmp/ccBFDvgN.s 			page 458


 16367              	.L1157:
 16368              		.align	2
 16369              	.L1156:
 16370 0010 00000000 		.word	main_ram
 16371 0014 00000000 		.word	RetStkSize
 16372              		.cfi_endproc
 16373              	.LFE136:
 16375              		.section	.text.free_flash,"ax",%progbits
 16376              		.align	1
 16377              		.p2align 2,,3
 16378              		.global	free_flash
 16379              		.syntax unified
 16380              		.thumb
 16381              		.thumb_func
 16382              		.fpu fpv4-sp-d16
 16384              	free_flash:
 16385              	.LFB137:
2030:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16386              		.loc 1 2030 22 is_stmt 1 view -0
 16387              		.cfi_startproc
 16388              		@ args = 0, pretend = 0, frame = 0
 16389              		@ frame_needed = 0, uses_anonymous_args = 0
 16390              		@ link register save eliminated.
2031:src/xeq.c     **** }
 16391              		.loc 1 2031 2 view .LVU4264
2031:src/xeq.c     **** }
 16392              		.loc 1 2031 38 is_stmt 0 view .LVU4265
 16393 0000 034B     		ldr	r3, .L1159
 16394 0002 1B68     		ldr	r3, [r3]
 16395 0004 5888     		ldrh	r0, [r3, #2]
2032:src/xeq.c     **** 
 16396              		.loc 1 2032 1 view .LVU4266
 16397 0006 C0F5FF50 		rsb	r0, r0, #8160
 16398 000a 1E30     		adds	r0, r0, #30
 16399 000c 7047     		bx	lr
 16400              	.L1160:
 16401 000e 00BF     		.align	2
 16402              	.L1159:
 16403 0010 00000000 		.word	library_ram
 16404              		.cfi_endproc
 16405              	.LFE137:
 16407              		.section	.text.get_mem,"ax",%progbits
 16408              		.align	1
 16409              		.p2align 2,,3
 16410              		.global	get_mem
 16411              		.syntax unified
 16412              		.thumb
 16413              		.thumb_func
 16414              		.fpu fpv4-sp-d16
 16416              	get_mem:
 16417              	.LVL1189:
 16418              	.LFB138:
2034:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16419              		.loc 1 2034 29 is_stmt 1 view -0
 16420              		.cfi_startproc
 16421              		@ args = 0, pretend = 0, frame = 0
 16422              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBFDvgN.s 			page 459


2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16423              		.loc 1 2035 2 view .LVU4268
2034:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16424              		.loc 1 2034 29 is_stmt 0 view .LVU4269
 16425 0000 00B5     		push	{lr}
 16426              		.cfi_def_cfa_offset 4
 16427              		.cfi_offset 14, -4
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16428              		.loc 1 2035 2 view .LVU4270
 16429 0002 A928     		cmp	r0, #169
2034:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16430              		.loc 1 2034 29 view .LVU4271
 16431 0004 83B0     		sub	sp, sp, #12
 16432              		.cfi_def_cfa_offset 16
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16433              		.loc 1 2035 2 view .LVU4272
 16434 0006 23D0     		beq	.L1170
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16435              		.loc 1 2035 2 discriminator 2 view .LVU4273
 16436 0008 AA28     		cmp	r0, #170
 16437 000a 18D0     		beq	.L1171
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16438              		.loc 1 2035 2 discriminator 5 view .LVU4274
 16439 000c AC28     		cmp	r0, #172
 16440 000e 3CD0     		beq	.L1172
 16441              	.LBB2822:
 16442              	.LBI2822:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 16443              		.loc 1 253 14 is_stmt 1 view .LVU4275
 16444              	.LBE2822:
 254:src/xeq.c     **** }
 16445              		.loc 1 254 2 view .LVU4276
 16446              	.LVL1190:
 16447              	.LBB2831:
 16448              	.LBB2823:
 16449              	.LBI2823:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 16450              		.loc 1 241 14 view .LVU4277
 16451              	.LBB2824:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16452              		.loc 1 242 2 view .LVU4278
 16453              	.LBB2825:
 16454              	.LBI2825:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16455              		.loc 1 1118 5 view .LVU4279
 16456              	.LBB2826:
1119:src/xeq.c     **** }
 16457              		.loc 1 1119 2 view .LVU4280
1119:src/xeq.c     **** }
 16458              		.loc 1 1119 12 is_stmt 0 view .LVU4281
 16459 0010 224B     		ldr	r3, .L1174
 16460 0012 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 16461              		.loc 1 1119 24 view .LVU4282
 16462 0014 B2F8E817 		ldrh	r1, [r2, #2024]
 16463              	.LBE2826:
 16464              	.LBE2825:
ARM GAS  /tmp/ccBFDvgN.s 			page 460


 16465              	.LBB2828:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16466              		.loc 1 243 24 view .LVU4283
 16467 0018 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 16468              	.LBE2828:
 16469              	.LBB2829:
 16470              	.LBB2827:
1119:src/xeq.c     **** }
 16471              		.loc 1 1119 24 view .LVU4284
 16472 001c 44F20103 		movw	r3, #16385
 16473              	.LBE2827:
 16474              	.LBE2829:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16475              		.loc 1 242 5 view .LVU4285
 16476 0020 0B40     		ands	r3, r3, r1
 16477 0022 B3F5804F 		cmp	r3, #16384
 16478              	.LBB2830:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16479              		.loc 1 243 3 is_stmt 1 view .LVU4286
 16480              	.LVL1191:
 244:src/xeq.c     **** 	}
 16481              		.loc 1 244 3 view .LVU4287
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16482              		.loc 1 243 13 is_stmt 0 view .LVU4288
 16483 0026 04BF     		itt	eq
 16484 0028 0C3A     		subeq	r2, r2, #12
 16485              	.LVL1192:
 244:src/xeq.c     **** 	}
 16486              		.loc 1 244 67 view .LVU4289
 16487 002a 5210     		asreq	r2, r2, #1
 16488              	.LBE2830:
 247:src/xeq.c     **** }
 16489              		.loc 1 247 3 is_stmt 1 view .LVU4290
 16490 002c 0023     		movs	r3, #0
 16491              	.LVL1193:
 16492              	.L1163:
 247:src/xeq.c     **** }
 16493              		.loc 1 247 3 is_stmt 0 view .LVU4291
 16494              	.LBE2824:
 16495              	.LBE2823:
 16496              	.LBE2831:
 16497              	.LBB2832:
 16498              	.LBI2832:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16499              		.loc 1 1509 6 is_stmt 1 discriminator 10 view .LVU4292
 16500              	.LBB2833:
1510:src/xeq.c     **** }
 16501              		.loc 1 1510 2 discriminator 10 view .LVU4293
 16502 002e 0021     		movs	r1, #0
 16503 0030 0091     		str	r1, [sp]
 16504 0032 6420     		movs	r0, #100
 16505 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 16506              	.LVL1194:
1510:src/xeq.c     **** }
 16507              		.loc 1 1510 2 is_stmt 0 discriminator 10 view .LVU4294
 16508              	.LBE2833:
 16509              	.LBE2832:
ARM GAS  /tmp/ccBFDvgN.s 			page 461


2040:src/xeq.c     **** 
 16510              		.loc 1 2040 1 discriminator 10 view .LVU4295
 16511 0038 03B0     		add	sp, sp, #12
 16512              		.cfi_remember_state
 16513              		.cfi_def_cfa_offset 4
 16514              		@ sp needed
 16515 003a 5DF804FB 		ldr	pc, [sp], #4
 16516              	.LVL1195:
 16517              	.L1171:
 16518              		.cfi_restore_state
 16519              	.LBB2834:
 16520              	.LBI2834:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 16521              		.loc 1 233 5 is_stmt 1 view .LVU4296
 16522              	.LBE2834:
 234:src/xeq.c     **** }
 16523              		.loc 1 234 2 view .LVU4297
 16524              	.LBB2855:
 16525              	.LBB2835:
 16526              	.LBI2835:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 16527              		.loc 1 225 5 view .LVU4298
 16528              	.LBB2836:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16529              		.loc 1 226 2 view .LVU4299
 16530              	.LBB2837:
 16531              	.LBI2837:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16532              		.loc 1 1118 5 view .LVU4300
 16533              	.LBB2838:
1119:src/xeq.c     **** }
 16534              		.loc 1 1119 2 view .LVU4301
1119:src/xeq.c     **** }
 16535              		.loc 1 1119 12 is_stmt 0 view .LVU4302
 16536 003e 174B     		ldr	r3, .L1174
 16537 0040 1B68     		ldr	r3, [r3]
 16538              	.LVL1196:
1119:src/xeq.c     **** }
 16539              		.loc 1 1119 12 view .LVU4303
 16540              	.LBE2838:
 16541              	.LBE2837:
 227:src/xeq.c     **** }
 16542              		.loc 1 227 2 is_stmt 1 view .LVU4304
 16543              	.LBB2841:
 16544              	.LBI2841:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 16545              		.loc 1 217 5 view .LVU4305
 16546              	.LBB2842:
 218:src/xeq.c     **** }
 16547              		.loc 1 218 2 view .LVU4306
 218:src/xeq.c     **** }
 16548              		.loc 1 218 9 is_stmt 0 view .LVU4307
 16549 0042 B3F9DE27 		ldrsh	r2, [r3, #2014]
 218:src/xeq.c     **** }
 16550              		.loc 1 218 57 view .LVU4308
 16551 0046 002A     		cmp	r2, #0
 16552 0048 0BDB     		blt	.L1173
ARM GAS  /tmp/ccBFDvgN.s 			page 462


 16553 004a 0022     		movs	r2, #0
 16554 004c 0023     		movs	r3, #0
 16555              	.LVL1197:
 218:src/xeq.c     **** }
 16556              		.loc 1 218 57 view .LVU4309
 16557 004e EEE7     		b	.L1163
 16558              	.LVL1198:
 16559              	.L1170:
 218:src/xeq.c     **** }
 16560              		.loc 1 218 57 view .LVU4310
 16561              	.LBE2842:
 16562              	.LBE2841:
 16563              	.LBE2836:
 16564              	.LBE2835:
 16565              	.LBE2855:
 16566              	.LBB2856:
 16567              	.LBI2856:
2026:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16568              		.loc 1 2026 5 is_stmt 1 view .LVU4311
 16569              	.LBB2857:
2027:src/xeq.c     **** }
 16570              		.loc 1 2027 2 view .LVU4312
2027:src/xeq.c     **** }
 16571              		.loc 1 2027 22 is_stmt 0 view .LVU4313
 16572 0050 124A     		ldr	r2, .L1174
2027:src/xeq.c     **** }
 16573              		.loc 1 2027 20 view .LVU4314
 16574 0052 134B     		ldr	r3, .L1174+4
2027:src/xeq.c     **** }
 16575              		.loc 1 2027 22 view .LVU4315
 16576 0054 1268     		ldr	r2, [r2]
2027:src/xeq.c     **** }
 16577              		.loc 1 2027 20 view .LVU4316
 16578 0056 1B68     		ldr	r3, [r3]
2027:src/xeq.c     **** }
 16579              		.loc 1 2027 22 view .LVU4317
 16580 0058 B2F9E227 		ldrsh	r2, [r2, #2018]
2027:src/xeq.c     **** }
 16581              		.loc 1 2027 20 view .LVU4318
 16582 005c 1A44     		add	r2, r2, r3
 16583 005e 0023     		movs	r3, #0
 16584              	.LBE2857:
 16585              	.LBE2856:
 16586 0060 E5E7     		b	.L1163
 16587              	.LVL1199:
 16588              	.L1173:
 16589              	.LBB2858:
 16590              	.LBB2854:
 16591              	.LBB2853:
 16592              	.LBB2847:
 16593              	.LBB2839:
1119:src/xeq.c     **** }
 16594              		.loc 1 1119 24 view .LVU4319
 16595 0062 B3F8E807 		ldrh	r0, [r3, #2024]
 16596              	.LVL1200:
1119:src/xeq.c     **** }
 16597              		.loc 1 1119 24 view .LVU4320
ARM GAS  /tmp/ccBFDvgN.s 			page 463


 16598              	.LBE2839:
 16599              	.LBE2847:
 16600              	.LBB2848:
 16601              	.LBB2843:
 218:src/xeq.c     **** }
 16602              		.loc 1 218 25 view .LVU4321
 16603 0066 0F49     		ldr	r1, .L1174+8
 16604              	.LBE2843:
 16605              	.LBE2848:
 16606              	.LBB2849:
 16607              	.LBB2840:
1119:src/xeq.c     **** }
 16608              		.loc 1 1119 24 view .LVU4322
 16609 0068 44F20103 		movw	r3, #16385
 16610              	.LVL1201:
1119:src/xeq.c     **** }
 16611              		.loc 1 1119 24 view .LVU4323
 16612              	.LBE2840:
 16613              	.LBE2849:
 16614              	.LBB2850:
 16615              	.LBB2844:
 218:src/xeq.c     **** }
 16616              		.loc 1 218 25 view .LVU4324
 16617 006c 0968     		ldr	r1, [r1]
 16618              	.LBE2844:
 16619              	.LBE2850:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16620              		.loc 1 226 73 view .LVU4325
 16621 006e 0340     		ands	r3, r3, r0
 16622 0070 A3F58043 		sub	r3, r3, #16384
 16623              	.LBB2851:
 16624              	.LBB2845:
 218:src/xeq.c     **** }
 16625              		.loc 1 218 57 view .LVU4326
 16626 0074 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 16627              	.LBE2845:
 16628              	.LBE2851:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16629              		.loc 1 226 73 view .LVU4327
 16630 0078 B3FA83F3 		clz	r3, r3
 16631 007c 5B09     		lsrs	r3, r3, #5
 16632 007e 0233     		adds	r3, r3, #2
 16633              	.LBB2852:
 16634              	.LBB2846:
 218:src/xeq.c     **** }
 16635              		.loc 1 218 57 view .LVU4328
 16636 0080 C2F30B02 		ubfx	r2, r2, #0, #12
 16637 0084 1A41     		asrs	r2, r2, r3
 16638 0086 D317     		asrs	r3, r2, #31
 16639 0088 D1E7     		b	.L1163
 16640              	.LVL1202:
 16641              	.L1172:
 218:src/xeq.c     **** }
 16642              		.loc 1 218 57 view .LVU4329
 16643              	.LBE2846:
 16644              	.LBE2852:
 16645              	.LBE2853:
ARM GAS  /tmp/ccBFDvgN.s 			page 464


 16646              	.LBE2854:
 16647              	.LBE2858:
 16648              	.LBB2859:
 16649              	.LBI2859:
2030:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16650              		.loc 1 2030 5 is_stmt 1 view .LVU4330
 16651              	.LBB2860:
2031:src/xeq.c     **** }
 16652              		.loc 1 2031 2 view .LVU4331
2031:src/xeq.c     **** }
 16653              		.loc 1 2031 38 is_stmt 0 view .LVU4332
 16654 008a 074B     		ldr	r3, .L1174+12
 16655 008c 1B68     		ldr	r3, [r3]
 16656 008e 5A88     		ldrh	r2, [r3, #2]
2031:src/xeq.c     **** }
 16657              		.loc 1 2031 27 view .LVU4333
 16658 0090 C2F5FF52 		rsb	r2, r2, #8160
 16659 0094 1E32     		adds	r2, r2, #30
 16660 0096 0023     		movs	r3, #0
 16661              	.LBE2860:
 16662              	.LBE2859:
 16663 0098 C9E7     		b	.L1163
 16664              	.L1175:
 16665 009a 00BF     		.align	2
 16666              	.L1174:
 16667 009c 00000000 		.word	main_ram
 16668 00a0 00000000 		.word	RetStkSize
 16669 00a4 00000000 		.word	RetStk
 16670 00a8 00000000 		.word	library_ram
 16671              		.cfi_endproc
 16672              	.LFE138:
 16674              		.section	.text.cmdputkey,"ax",%progbits
 16675              		.align	1
 16676              		.p2align 2,,3
 16677              		.global	cmdputkey
 16678              		.syntax unified
 16679              		.thumb
 16680              		.thumb_func
 16681              		.fpu fpv4-sp-d16
 16683              	cmdputkey:
 16684              	.LVL1203:
 16685              	.LFB141:
2075:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16686              		.loc 1 2075 1 is_stmt 1 view -0
 16687              		.cfi_startproc
 16688              		@ args = 0, pretend = 0, frame = 0
 16689              		@ frame_needed = 0, uses_anonymous_args = 0
2076:src/xeq.c     **** 
 16690              		.loc 1 2076 2 view .LVU4335
2075:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16691              		.loc 1 2075 1 is_stmt 0 view .LVU4336
 16692 0000 10B5     		push	{r4, lr}
 16693              		.cfi_def_cfa_offset 8
 16694              		.cfi_offset 4, -8
 16695              		.cfi_offset 14, -4
2076:src/xeq.c     **** 
 16696              		.loc 1 2076 16 view .LVU4337
ARM GAS  /tmp/ccBFDvgN.s 			page 465


 16697 0002 FFF7FEFF 		bl	get_keycode_from_reg
 16698              	.LVL1204:
2078:src/xeq.c     **** 		set_running_off();
 16699              		.loc 1 2078 2 is_stmt 1 view .LVU4338
2078:src/xeq.c     **** 		set_running_off();
 16700              		.loc 1 2078 5 is_stmt 0 view .LVU4339
 16701 0006 041E     		subs	r4, r0, #0
 16702 0008 00DA     		bge	.L1179
2082:src/xeq.c     **** 
 16703              		.loc 1 2082 1 view .LVU4340
 16704 000a 10BD     		pop	{r4, pc}
 16705              	.L1179:
2079:src/xeq.c     **** 		put_key(c);
 16706              		.loc 1 2079 3 is_stmt 1 view .LVU4341
 16707              	.LBB2861:
 16708              	.LBI2861:
5816:src/xeq.c     **** 	set_running_off_sst();
 16709              		.loc 1 5816 6 view .LVU4342
 16710              	.LBB2862:
5817:src/xeq.c     **** 	State.entryp = 0;
 16711              		.loc 1 5817 2 view .LVU4343
 16712              	.LBB2863:
 16713              	.LBI2863:
5808:src/xeq.c     **** 	Running = 0;
 16714              		.loc 1 5808 6 view .LVU4344
 16715              	.LBB2864:
5809:src/xeq.c     **** }
 16716              		.loc 1 5809 2 view .LVU4345
 16717              	.LBE2864:
 16718              	.LBE2863:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 16719              		.loc 1 5818 15 is_stmt 0 view .LVU4346
 16720 000c 094B     		ldr	r3, .L1180
 16721              	.LBB2867:
 16722              	.LBB2865:
5809:src/xeq.c     **** }
 16723              		.loc 1 5809 10 view .LVU4347
 16724 000e 0A4A     		ldr	r2, .L1180+4
 16725              	.LBE2865:
 16726              	.LBE2867:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 16727              		.loc 1 5818 15 view .LVU4348
 16728 0010 1B68     		ldr	r3, [r3]
 16729              	.LBB2868:
 16730              	.LBB2866:
5809:src/xeq.c     **** }
 16731              		.loc 1 5809 10 view .LVU4349
 16732 0012 0021     		movs	r1, #0
 16733 0014 1160     		str	r1, [r2]
 16734              	.LBE2866:
 16735              	.LBE2868:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 16736              		.loc 1 5818 2 is_stmt 1 view .LVU4350
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 16737              		.loc 1 5818 15 is_stmt 0 view .LVU4351
 16738 0016 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 16739 001a 61F30412 		bfi	r2, r1, #4, #1
ARM GAS  /tmp/ccBFDvgN.s 			page 466


 16740              		.loc 1 5819 2 view .LVU4352
 16741 001e 8A20     		movs	r0, #138
 16742              	.LVL1205:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 16743              		.loc 1 5818 15 view .LVU4353
 16744 0020 83F8DD27 		strb	r2, [r3, #2013]
 16745              		.loc 1 5819 2 is_stmt 1 view .LVU4354
 16746 0024 FFF7FEFF 		bl	dot
 16747              	.LVL1206:
 16748              	.LBE2862:
 16749              	.LBE2861:
2080:src/xeq.c     **** 	}
 16750              		.loc 1 2080 3 view .LVU4355
 16751 0028 2046     		mov	r0, r4
2082:src/xeq.c     **** 
 16752              		.loc 1 2082 1 is_stmt 0 view .LVU4356
 16753 002a BDE81040 		pop	{r4, lr}
 16754              		.cfi_restore 14
 16755              		.cfi_restore 4
 16756              		.cfi_def_cfa_offset 0
 16757              	.LVL1207:
2080:src/xeq.c     **** 	}
 16758              		.loc 1 2080 3 view .LVU4357
 16759 002e FFF7FEBF 		b	put_key
 16760              	.LVL1208:
 16761              	.L1181:
2080:src/xeq.c     **** 	}
 16762              		.loc 1 2080 3 view .LVU4358
 16763 0032 00BF     		.align	2
 16764              	.L1180:
 16765 0034 00000000 		.word	main_ram
 16766 0038 00000000 		.word	Running
 16767              		.cfi_endproc
 16768              	.LFE141:
 16770              		.section	.text.cmdkeytype,"ax",%progbits
 16771              		.align	1
 16772              		.p2align 2,,3
 16773              		.global	cmdkeytype
 16774              		.syntax unified
 16775              		.thumb
 16776              		.thumb_func
 16777              		.fpu fpv4-sp-d16
 16779              	cmdkeytype:
 16780              	.LVL1209:
 16781              	.LFB142:
2090:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16782              		.loc 1 2090 1 is_stmt 1 view -0
 16783              		.cfi_startproc
 16784              		@ args = 0, pretend = 0, frame = 48
 16785              		@ frame_needed = 0, uses_anonymous_args = 0
2091:src/xeq.c     **** 	if ( c >= 0 ) {
 16786              		.loc 1 2091 2 view .LVU4360
2090:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16787              		.loc 1 2090 1 is_stmt 0 view .LVU4361
 16788 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 16789              		.cfi_def_cfa_offset 20
 16790              		.cfi_offset 4, -20
ARM GAS  /tmp/ccBFDvgN.s 			page 467


 16791              		.cfi_offset 5, -16
 16792              		.cfi_offset 6, -12
 16793              		.cfi_offset 7, -8
 16794              		.cfi_offset 14, -4
 16795 0002 8FB0     		sub	sp, sp, #60
 16796              		.cfi_def_cfa_offset 80
2091:src/xeq.c     **** 	if ( c >= 0 ) {
 16797              		.loc 1 2091 16 view .LVU4362
 16798 0004 FFF7FEFF 		bl	get_keycode_from_reg
 16799              	.LVL1210:
2092:src/xeq.c     **** 		const char types[] = {
 16800              		.loc 1 2092 2 is_stmt 1 view .LVU4363
2092:src/xeq.c     **** 		const char types[] = {
 16801              		.loc 1 2092 5 is_stmt 0 view .LVU4364
 16802 0008 061E     		subs	r6, r0, #0
 16803 000a 17DB     		blt	.L1182
 16804              	.LBB2869:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16805              		.loc 1 2093 3 is_stmt 1 view .LVU4365
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16806              		.loc 1 2093 14 is_stmt 0 view .LVU4366
 16807 000c 0E4D     		ldr	r5, .L1190
 16808              	.LBB2870:
 16809              	.LBB2871:
 16810              	.LBB2872:
 16811              	.LBB2873:
 744:src/xeq.c     **** }
 16812              		.loc 1 744 15 view .LVU4367
 16813 000e 0F4F     		ldr	r7, .L1190+4
 16814              	.LBE2873:
 16815              	.LBE2872:
 16816              	.LBE2871:
 16817              	.LBE2870:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16818              		.loc 1 2093 14 view .LVU4368
 16819 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16820              	.LVL1211:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16821              		.loc 1 2093 14 view .LVU4369
 16822 0012 03AC     		add	r4, sp, #12
 16823 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16824 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16825 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16826 001a 95E80700 		ldm	r5, {r0, r1, r2}
 16827              	.LBB2882:
 16828              	.LBB2878:
 16829              	.LBB2876:
 16830              	.LBB2874:
 744:src/xeq.c     **** }
 16831              		.loc 1 744 15 view .LVU4370
 16832 001e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 16833              	.LBE2874:
 16834              	.LBE2876:
 16835              	.LBE2878:
 16836              	.LBE2882:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16837              		.loc 1 2093 14 view .LVU4371
ARM GAS  /tmp/ccBFDvgN.s 			page 468


 16838 0020 03C4     		stmia	r4!, {r0, r1}
 16839              	.LBB2883:
 16840              	.LBB2879:
 748:src/xeq.c     **** 		lift();
 16841              		.loc 1 748 5 view .LVU4372
 16842 0022 5B06     		lsls	r3, r3, #25
 16843              	.LBE2879:
 16844              	.LBE2883:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16845              		.loc 1 2093 14 view .LVU4373
 16846 0024 2270     		strb	r2, [r4]
2101:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
 16847              		.loc 1 2101 3 is_stmt 1 view .LVU4374
 16848              	.LBB2884:
 16849              	.LBI2870:
 747:src/xeq.c     **** 	if (get_lift())
 16850              		.loc 1 747 6 view .LVU4375
 16851              	.LBB2880:
 748:src/xeq.c     **** 		lift();
 16852              		.loc 1 748 2 view .LVU4376
 16853              	.LBB2877:
 16854              	.LBI2872:
 743:src/xeq.c     **** 	return State2.state_lift;
 16855              		.loc 1 743 12 view .LVU4377
 16856              	.LBB2875:
 744:src/xeq.c     **** }
 16857              		.loc 1 744 2 view .LVU4378
 16858              	.LBE2875:
 16859              	.LBE2877:
 748:src/xeq.c     **** 		lift();
 16860              		.loc 1 748 5 is_stmt 0 view .LVU4379
 16861 0026 0BD4     		bmi	.L1189
 16862              	.L1184:
 16863              	.LBE2880:
 16864              	.LBE2884:
2102:src/xeq.c     **** 	}
 16865              		.loc 1 2102 3 is_stmt 1 view .LVU4380
 16866              	.LVL1212:
 16867              	.LBB2885:
 16868              	.LBI2885:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16869              		.loc 1 1509 6 view .LVU4381
 16870              	.LBB2886:
1510:src/xeq.c     **** }
 16871              		.loc 1 1510 2 view .LVU4382
 16872              	.LBE2886:
 16873              	.LBE2885:
2102:src/xeq.c     **** 	}
 16874              		.loc 1 2102 21 is_stmt 0 view .LVU4383
 16875 0028 0EAB     		add	r3, sp, #56
 16876 002a 9819     		adds	r0, r3, r6
 16877              	.LBB2888:
 16878              	.LBB2887:
1510:src/xeq.c     **** }
 16879              		.loc 1 1510 2 view .LVU4384
 16880 002c 0021     		movs	r1, #0
 16881 002e 10F82C2C 		ldrb	r2, [r0, #-44]	@ zero_extendqisi2
ARM GAS  /tmp/ccBFDvgN.s 			page 469


 16882 0032 0091     		str	r1, [sp]
 16883              	.LVL1213:
1510:src/xeq.c     **** }
 16884              		.loc 1 1510 2 view .LVU4385
 16885 0034 0023     		movs	r3, #0
 16886 0036 6420     		movs	r0, #100
 16887 0038 FFF7FEFF 		bl	set_reg_n_int_sgn
 16888              	.LVL1214:
 16889              	.L1182:
1510:src/xeq.c     **** }
 16890              		.loc 1 1510 2 view .LVU4386
 16891              	.LBE2887:
 16892              	.LBE2888:
 16893              	.LBE2869:
2104:src/xeq.c     **** 
 16894              		.loc 1 2104 1 view .LVU4387
 16895 003c 0FB0     		add	sp, sp, #60
 16896              		.cfi_remember_state
 16897              		.cfi_def_cfa_offset 20
 16898              		@ sp needed
 16899 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 16900              	.LVL1215:
 16901              	.L1189:
 16902              		.cfi_restore_state
 16903              	.LBB2890:
 16904              	.LBB2889:
 16905              	.LBB2881:
 749:src/xeq.c     **** }
 16906              		.loc 1 749 3 is_stmt 1 view .LVU4388
 16907 0040 FFF7FEFF 		bl	lift
 16908              	.LVL1216:
 16909 0044 F0E7     		b	.L1184
 16910              	.L1191:
 16911 0046 00BF     		.align	2
 16912              	.L1190:
 16913 0048 00000000 		.word	.LANCHOR5
 16914 004c 00000000 		.word	StateWhileOn
 16915              	.LBE2881:
 16916              	.LBE2889:
 16917              	.LBE2890:
 16918              		.cfi_endproc
 16919              	.LFE142:
 16921              		.section	.rodata.op_query_xtal.str1.4,"aMS",%progbits,1
 16922              		.align	2
 16923              	.LC2:
 16924 0000 74727565 		.ascii	"true\000"
 16924      00
 16925              		.section	.text.op_query_xtal,"ax",%progbits
 16926              		.align	1
 16927              		.p2align 2,,3
 16928              		.global	op_query_xtal
 16929              		.syntax unified
 16930              		.thumb
 16931              		.thumb_func
 16932              		.fpu fpv4-sp-d16
 16934              	op_query_xtal:
 16935              	.LVL1217:
ARM GAS  /tmp/ccBFDvgN.s 			page 470


 16936              	.LFB145:
2124:src/xeq.c     **** 	fin_tst(Xtal);
 16937              		.loc 1 2124 35 view -0
 16938              		.cfi_startproc
 16939              		@ args = 0, pretend = 0, frame = 0
 16940              		@ frame_needed = 0, uses_anonymous_args = 0
 16941              		@ link register save eliminated.
2125:src/xeq.c     **** }
 16942              		.loc 1 2125 2 view .LVU4390
 16943              	.LBB2891:
 16944              	.LBI2891:
2576:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 16945              		.loc 1 2576 6 view .LVU4391
 16946              	.LBB2892:
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 16947              		.loc 1 2577 2 view .LVU4392
2578:src/xeq.c     **** 		if (! a && incpc())
 16948              		.loc 1 2578 2 view .LVU4393
2578:src/xeq.c     **** 		if (! a && incpc())
 16949              		.loc 1 2578 6 is_stmt 0 view .LVU4394
 16950 0000 044A     		ldr	r2, .L1194
2578:src/xeq.c     **** 		if (! a && incpc())
 16951              		.loc 1 2578 14 view .LVU4395
 16952 0002 054B     		ldr	r3, .L1194+4
 16953 0004 1268     		ldr	r2, [r2]
 16954 0006 1B68     		ldr	r3, [r3]
 16955 0008 1343     		orrs	r3, r2, r3
 16956 000a 02D1     		bne	.L1192
2583:src/xeq.c     **** #ifdef INFRARED
 16957              		.loc 1 2583 3 is_stmt 1 view .LVU4396
2583:src/xeq.c     **** #ifdef INFRARED
 16958              		.loc 1 2583 11 is_stmt 0 view .LVU4397
 16959 000c 034B     		ldr	r3, .L1194+8
 16960 000e 044A     		ldr	r2, .L1194+12
 16961 0010 1A60     		str	r2, [r3]
 16962              	.LVL1218:
 16963              	.L1192:
2583:src/xeq.c     **** #ifdef INFRARED
 16964              		.loc 1 2583 11 view .LVU4398
 16965              	.LBE2892:
 16966              	.LBE2891:
2126:src/xeq.c     **** 
 16967              		.loc 1 2126 1 view .LVU4399
 16968 0012 7047     		bx	lr
 16969              	.L1195:
 16970              		.align	2
 16971              	.L1194:
 16972 0014 00000000 		.word	Running
 16973 0018 00000000 		.word	XromRunning
 16974 001c 00000000 		.word	DispMsg
 16975 0020 00000000 		.word	.LC2
 16976              		.cfi_endproc
 16977              	.LFE145:
 16979              		.section	.rodata.op_query_print.str1.4,"aMS",%progbits,1
 16980              		.align	2
 16981              	.LC3:
 16982 0000 66616C73 		.ascii	"false\000"
ARM GAS  /tmp/ccBFDvgN.s 			page 471


 16982      6500
 16983              		.section	.text.op_query_print,"ax",%progbits
 16984              		.align	1
 16985              		.p2align 2,,3
 16986              		.global	op_query_print
 16987              		.syntax unified
 16988              		.thumb
 16989              		.thumb_func
 16990              		.fpu fpv4-sp-d16
 16992              	op_query_print:
 16993              	.LVL1219:
 16994              	.LFB146:
2128:src/xeq.c     **** #ifdef INFRARED
 16995              		.loc 1 2128 36 is_stmt 1 view -0
 16996              		.cfi_startproc
 16997              		@ args = 0, pretend = 0, frame = 0
 16998              		@ frame_needed = 0, uses_anonymous_args = 0
 16999              		@ link register save eliminated.
2132:src/xeq.c     **** #endif
 17000              		.loc 1 2132 2 view .LVU4401
 17001              	.LBB2893:
 17002              	.LBI2893:
2576:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 17003              		.loc 1 2576 6 view .LVU4402
 17004              	.LBB2894:
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 17005              		.loc 1 2577 2 view .LVU4403
2578:src/xeq.c     **** 		if (! a && incpc())
 17006              		.loc 1 2578 2 view .LVU4404
2578:src/xeq.c     **** 		if (! a && incpc())
 17007              		.loc 1 2578 6 is_stmt 0 view .LVU4405
 17008 0000 054A     		ldr	r2, .L1199
2578:src/xeq.c     **** 		if (! a && incpc())
 17009              		.loc 1 2578 14 view .LVU4406
 17010 0002 064B     		ldr	r3, .L1199+4
 17011 0004 1268     		ldr	r2, [r2]
 17012 0006 1B68     		ldr	r3, [r3]
 17013 0008 1343     		orrs	r3, r2, r3
 17014 000a 03D1     		bne	.L1198
2583:src/xeq.c     **** #ifdef INFRARED
 17015              		.loc 1 2583 3 is_stmt 1 view .LVU4407
2583:src/xeq.c     **** #ifdef INFRARED
 17016              		.loc 1 2583 11 is_stmt 0 view .LVU4408
 17017 000c 044B     		ldr	r3, .L1199+8
 17018 000e 054A     		ldr	r2, .L1199+12
 17019 0010 1A60     		str	r2, [r3]
 17020              	.LVL1220:
2583:src/xeq.c     **** #ifdef INFRARED
 17021              		.loc 1 2583 11 view .LVU4409
 17022              	.LBE2894:
 17023              	.LBE2893:
2134:src/xeq.c     **** 
 17024              		.loc 1 2134 1 view .LVU4410
 17025 0012 7047     		bx	lr
 17026              	.LVL1221:
 17027              	.L1198:
 17028              	.LBB2896:
ARM GAS  /tmp/ccBFDvgN.s 			page 472


 17029              	.LBB2895:
2579:src/xeq.c     **** 			decpc();
 17030              		.loc 1 2579 3 is_stmt 1 view .LVU4411
 17031 0014 FFF7FEBF 		b	fin_tst.part.0
 17032              	.LVL1222:
 17033              	.L1200:
2579:src/xeq.c     **** 			decpc();
 17034              		.loc 1 2579 3 is_stmt 0 view .LVU4412
 17035              		.align	2
 17036              	.L1199:
 17037 0018 00000000 		.word	Running
 17038 001c 00000000 		.word	XromRunning
 17039 0020 00000000 		.word	DispMsg
 17040 0024 00000000 		.word	.LC3
 17041              	.LBE2895:
 17042              	.LBE2896:
 17043              		.cfi_endproc
 17044              	.LFE146:
 17046              		.section	.text.cmdstostk,"ax",%progbits
 17047              		.align	1
 17048              		.p2align 2,,3
 17049              		.global	cmdstostk
 17050              		.syntax unified
 17051              		.thumb
 17052              		.thumb_func
 17053              		.fpu fpv4-sp-d16
 17055              	cmdstostk:
 17056              	.LVL1223:
 17057              	.LFB148:
2147:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17058              		.loc 1 2147 48 is_stmt 1 view -0
 17059              		.cfi_startproc
 17060              		@ args = 0, pretend = 0, frame = 0
 17061              		@ frame_needed = 0, uses_anonymous_args = 0
2148:src/xeq.c     **** 
 17062              		.loc 1 2148 2 view .LVU4414
2147:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17063              		.loc 1 2147 48 is_stmt 0 view .LVU4415
 17064 0000 70B5     		push	{r4, r5, r6, lr}
 17065              		.cfi_def_cfa_offset 16
 17066              		.cfi_offset 4, -16
 17067              		.cfi_offset 5, -12
 17068              		.cfi_offset 6, -8
 17069              		.cfi_offset 14, -4
2147:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17070              		.loc 1 2147 48 view .LVU4416
 17071 0002 0546     		mov	r5, r0
2148:src/xeq.c     **** 
 17072              		.loc 1 2148 13 view .LVU4417
 17073 0004 FFF7FEFF 		bl	check_stack_overlap
 17074              	.LVL1224:
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17075              		.loc 1 2150 2 is_stmt 1 view .LVU4418
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17076              		.loc 1 2150 12 view .LVU4419
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17077              		.loc 1 2150 2 is_stmt 0 view .LVU4420
ARM GAS  /tmp/ccBFDvgN.s 			page 473


 17078 0008 031E     		subs	r3, r0, #0
 17079 000a 0ADD     		ble	.L1201
 17080 000c 2C46     		mov	r4, r5
 17081 000e C4F16406 		rsb	r6, r4, #100
 17082 0012 1D44     		add	r5, r5, r3
 17083              	.LVL1225:
 17084              	.L1203:
2151:src/xeq.c     **** }
 17085              		.loc 1 2151 3 is_stmt 1 discriminator 3 view .LVU4421
 17086 0014 3119     		adds	r1, r6, r4
 17087 0016 2046     		mov	r0, r4
 17088 0018 0134     		adds	r4, r4, #1
 17089              	.LVL1226:
2151:src/xeq.c     **** }
 17090              		.loc 1 2151 3 is_stmt 0 discriminator 3 view .LVU4422
 17091 001a FFF7FEFF 		bl	copyreg_n
 17092              	.LVL1227:
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17093              		.loc 1 2150 17 is_stmt 1 discriminator 3 view .LVU4423
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17094              		.loc 1 2150 12 discriminator 3 view .LVU4424
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17095              		.loc 1 2150 2 is_stmt 0 discriminator 3 view .LVU4425
 17096 001e AC42     		cmp	r4, r5
 17097 0020 F8D1     		bne	.L1203
 17098              	.L1201:
2152:src/xeq.c     **** 
 17099              		.loc 1 2152 1 view .LVU4426
 17100 0022 70BD     		pop	{r4, r5, r6, pc}
 17101              		.cfi_endproc
 17102              	.LFE148:
 17104              		.section	.text.cmdrclstk,"ax",%progbits
 17105              		.align	1
 17106              		.p2align 2,,3
 17107              		.global	cmdrclstk
 17108              		.syntax unified
 17109              		.thumb
 17110              		.thumb_func
 17111              		.fpu fpv4-sp-d16
 17113              	cmdrclstk:
 17114              	.LVL1228:
 17115              	.LFB149:
2154:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17116              		.loc 1 2154 48 is_stmt 1 view -0
 17117              		.cfi_startproc
 17118              		@ args = 0, pretend = 0, frame = 0
 17119              		@ frame_needed = 0, uses_anonymous_args = 0
2155:src/xeq.c     **** 
 17120              		.loc 1 2155 2 view .LVU4428
2154:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17121              		.loc 1 2154 48 is_stmt 0 view .LVU4429
 17122 0000 70B5     		push	{r4, r5, r6, lr}
 17123              		.cfi_def_cfa_offset 16
 17124              		.cfi_offset 4, -16
 17125              		.cfi_offset 5, -12
 17126              		.cfi_offset 6, -8
 17127              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBFDvgN.s 			page 474


2154:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17128              		.loc 1 2154 48 view .LVU4430
 17129 0002 0646     		mov	r6, r0
2155:src/xeq.c     **** 
 17130              		.loc 1 2155 13 view .LVU4431
 17131 0004 FFF7FEFF 		bl	check_stack_overlap
 17132              	.LVL1229:
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17133              		.loc 1 2157 2 is_stmt 1 view .LVU4432
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17134              		.loc 1 2157 12 view .LVU4433
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17135              		.loc 1 2157 2 is_stmt 0 view .LVU4434
 17136 0008 051E     		subs	r5, r0, #0
 17137 000a 09DD     		ble	.L1206
 17138 000c 6435     		adds	r5, r5, #100
 17139 000e 643E     		subs	r6, r6, #100
 17140              	.LVL1230:
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17141              		.loc 1 2157 2 view .LVU4435
 17142 0010 6424     		movs	r4, #100
 17143              	.LVL1231:
 17144              	.L1208:
2158:src/xeq.c     **** }
 17145              		.loc 1 2158 3 is_stmt 1 discriminator 3 view .LVU4436
 17146 0012 3119     		adds	r1, r6, r4
 17147 0014 2046     		mov	r0, r4
 17148 0016 0134     		adds	r4, r4, #1
 17149              	.LVL1232:
2158:src/xeq.c     **** }
 17150              		.loc 1 2158 3 is_stmt 0 discriminator 3 view .LVU4437
 17151 0018 FFF7FEFF 		bl	copyreg_n
 17152              	.LVL1233:
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17153              		.loc 1 2157 17 is_stmt 1 discriminator 3 view .LVU4438
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17154              		.loc 1 2157 12 discriminator 3 view .LVU4439
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17155              		.loc 1 2157 2 is_stmt 0 discriminator 3 view .LVU4440
 17156 001c AC42     		cmp	r4, r5
 17157 001e F8D1     		bne	.L1208
 17158              	.LVL1234:
 17159              	.L1206:
2159:src/xeq.c     **** 
 17160              		.loc 1 2159 1 view .LVU4441
 17161 0020 70BD     		pop	{r4, r5, r6, pc}
 17162              		.cfi_endproc
 17163              	.LFE149:
 17165 0022 00BF     		.section	.text.find_opcode_from,"ax",%progbits
 17166              		.align	1
 17167              		.p2align 2,,3
 17168              		.global	find_opcode_from
 17169              		.syntax unified
 17170              		.thumb
 17171              		.thumb_func
 17172              		.fpu fpv4-sp-d16
 17174              	find_opcode_from:
ARM GAS  /tmp/ccBFDvgN.s 			page 475


 17175              	.LVL1235:
 17176              	.LFB151:
2192:src/xeq.c     **** 	unsigned short int top;
 17177              		.loc 1 2192 81 is_stmt 1 view -0
 17178              		.cfi_startproc
 17179              		@ args = 0, pretend = 0, frame = 8
 17180              		@ frame_needed = 0, uses_anonymous_args = 0
2192:src/xeq.c     **** 	unsigned short int top;
 17181              		.loc 1 2192 81 is_stmt 0 view .LVU4443
 17182 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 17183              		.cfi_def_cfa_offset 24
 17184              		.cfi_offset 4, -24
 17185              		.cfi_offset 5, -20
 17186              		.cfi_offset 6, -16
 17187              		.cfi_offset 7, -12
 17188              		.cfi_offset 8, -8
 17189              		.cfi_offset 14, -4
2195:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17190              		.loc 1 2195 12 view .LVU4444
 17191 0004 02F00207 		and	r7, r2, #2
2192:src/xeq.c     **** 	unsigned short int top;
 17192              		.loc 1 2192 81 view .LVU4445
 17193 0008 82B0     		sub	sp, sp, #8
 17194              		.cfi_def_cfa_offset 32
2192:src/xeq.c     **** 	unsigned short int top;
 17195              		.loc 1 2192 81 view .LVU4446
 17196 000a 9046     		mov	r8, r2
 17197 000c 0E46     		mov	r6, r1
2198:src/xeq.c     **** 	count -= top;
 17198              		.loc 1 2198 14 view .LVU4447
 17199 000e 0DF10602 		add	r2, sp, #6
 17200              	.LVL1236:
2198:src/xeq.c     **** 	count -= top;
 17201              		.loc 1 2198 14 view .LVU4448
 17202 0012 3946     		mov	r1, r7
 17203              	.LVL1237:
2192:src/xeq.c     **** 	unsigned short int top;
 17204              		.loc 1 2192 81 view .LVU4449
 17205 0014 0446     		mov	r4, r0
2193:src/xeq.c     **** 	int count;
 17206              		.loc 1 2193 2 is_stmt 1 view .LVU4450
2194:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
 17207              		.loc 1 2194 2 view .LVU4451
2195:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17208              		.loc 1 2195 2 view .LVU4452
 17209              	.LVL1238:
2196:src/xeq.c     **** 
 17210              		.loc 1 2196 2 view .LVU4453
2198:src/xeq.c     **** 	count -= top;
 17211              		.loc 1 2198 2 view .LVU4454
2198:src/xeq.c     **** 	count -= top;
 17212              		.loc 1 2198 14 is_stmt 0 view .LVU4455
 17213 0016 FFF7FEFF 		bl	find_section_bounds
 17214              	.LVL1239:
2199:src/xeq.c     **** 	while (count--) {
 17215              		.loc 1 2199 8 view .LVU4456
 17216 001a BDF80650 		ldrh	r5, [sp, #6]
ARM GAS  /tmp/ccBFDvgN.s 			page 476


2198:src/xeq.c     **** 	count -= top;
 17217              		.loc 1 2198 8 view .LVU4457
 17218 001e 0130     		adds	r0, r0, #1
 17219              	.LVL1240:
2199:src/xeq.c     **** 	while (count--) {
 17220              		.loc 1 2199 2 is_stmt 1 view .LVU4458
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17221              		.loc 1 2200 2 view .LVU4459
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17222              		.loc 1 2200 8 view .LVU4460
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17223              		.loc 1 2200 8 is_stmt 0 view .LVU4461
 17224 0020 451B     		subs	r5, r0, r5
 17225              	.LVL1241:
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17226              		.loc 1 2200 8 view .LVU4462
 17227 0022 05D1     		bne	.L1214
 17228 0024 10E0     		b	.L1212
 17229              	.LVL1242:
 17230              	.L1222:
2206:src/xeq.c     **** 	}
 17231              		.loc 1 2206 8 view .LVU4463
 17232 0026 FFF7FEFF 		bl	do_inc
 17233              	.LVL1243:
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17234              		.loc 1 2200 8 view .LVU4464
 17235 002a 013D     		subs	r5, r5, #1
 17236              	.LVL1244:
2206:src/xeq.c     **** 	}
 17237              		.loc 1 2206 8 view .LVU4465
 17238 002c 0446     		mov	r4, r0
 17239              	.LVL1245:
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17240              		.loc 1 2200 8 is_stmt 1 view .LVU4466
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17241              		.loc 1 2200 8 is_stmt 0 view .LVU4467
 17242 002e 0BD0     		beq	.L1212
 17243              	.LVL1246:
 17244              	.L1214:
2204:src/xeq.c     **** 			return pc;
 17245              		.loc 1 2204 3 is_stmt 1 view .LVU4468
2204:src/xeq.c     **** 			return pc;
 17246              		.loc 1 2204 7 is_stmt 0 view .LVU4469
 17247 0030 2046     		mov	r0, r4
 17248 0032 FFF7FEFF 		bl	getprog
 17249              	.LVL1247:
2206:src/xeq.c     **** 	}
 17250              		.loc 1 2206 3 is_stmt 1 view .LVU4470
2204:src/xeq.c     **** 			return pc;
 17251              		.loc 1 2204 7 is_stmt 0 view .LVU4471
 17252 0036 0346     		mov	r3, r0
2204:src/xeq.c     **** 			return pc;
 17253              		.loc 1 2204 6 view .LVU4472
 17254 0038 B342     		cmp	r3, r6
2206:src/xeq.c     **** 	}
 17255              		.loc 1 2206 8 view .LVU4473
 17256 003a 3946     		mov	r1, r7
ARM GAS  /tmp/ccBFDvgN.s 			page 477


 17257 003c 2046     		mov	r0, r4
2204:src/xeq.c     **** 			return pc;
 17258              		.loc 1 2204 6 view .LVU4474
 17259 003e F2D1     		bne	.L1222
 17260              	.LVL1248:
 17261              	.L1211:
2211:src/xeq.c     **** 
 17262              		.loc 1 2211 1 view .LVU4475
 17263 0040 2046     		mov	r0, r4
 17264 0042 02B0     		add	sp, sp, #8
 17265              		.cfi_remember_state
 17266              		.cfi_def_cfa_offset 24
 17267              		@ sp needed
 17268 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17269              	.LVL1249:
 17270              	.L1212:
 17271              		.cfi_restore_state
2208:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17272              		.loc 1 2208 2 is_stmt 1 view .LVU4476
2208:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17273              		.loc 1 2208 5 is_stmt 0 view .LVU4477
 17274 0048 18F00104 		ands	r4, r8, #1
 17275 004c F8D0     		beq	.L1211
 17276              	.LBB2903:
 17277              	.LBI2903:
2192:src/xeq.c     **** 	unsigned short int top;
 17278              		.loc 1 2192 14 is_stmt 1 view .LVU4478
 17279              	.LVL1250:
 17280              	.LBB2904:
2209:src/xeq.c     **** 	return 0;
 17281              		.loc 1 2209 3 view .LVU4479
 17282              	.LBB2905:
 17283              	.LBI2905:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17284              		.loc 1 546 5 view .LVU4480
 17285              	.LBB2906:
 547:src/xeq.c     **** 		Error = e;
 17286              		.loc 1 547 2 view .LVU4481
 547:src/xeq.c     **** 		Error = e;
 17287              		.loc 1 547 12 is_stmt 0 view .LVU4482
 17288 004e 074B     		ldr	r3, .L1223
 547:src/xeq.c     **** 		Error = e;
 17289              		.loc 1 547 5 view .LVU4483
 17290 0050 1C68     		ldr	r4, [r3]
 17291 0052 2CB9     		cbnz	r4, .L1216
 17292              	.LVL1251:
 17293              	.LBB2907:
 17294              	.LBI2907:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17295              		.loc 1 546 5 is_stmt 1 view .LVU4484
 17296              	.LBB2908:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17297              		.loc 1 548 3 view .LVU4485
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17298              		.loc 1 548 9 is_stmt 0 view .LVU4486
 17299 0054 0622     		movs	r2, #6
 17300              	.LBE2908:
ARM GAS  /tmp/ccBFDvgN.s 			page 478


 17301              	.LBE2907:
 17302              	.LBE2906:
 17303              	.LBE2905:
 17304              	.LBE2904:
 17305              	.LBE2903:
2211:src/xeq.c     **** 
 17306              		.loc 1 2211 1 view .LVU4487
 17307 0056 2046     		mov	r0, r4
 17308              	.LBB2914:
 17309              	.LBB2913:
 17310              	.LBB2912:
 17311              	.LBB2911:
 17312              	.LBB2910:
 17313              	.LBB2909:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17314              		.loc 1 548 9 view .LVU4488
 17315 0058 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 17316              		.loc 1 549 3 is_stmt 1 view .LVU4489
 17317              	.LBE2909:
 17318              	.LBE2910:
 17319              	.LBE2911:
 17320              	.LBE2912:
 17321              	.LBE2913:
 17322              	.LBE2914:
2211:src/xeq.c     **** 
 17323              		.loc 1 2211 1 is_stmt 0 view .LVU4490
 17324 005a 02B0     		add	sp, sp, #8
 17325              		.cfi_remember_state
 17326              		.cfi_def_cfa_offset 24
 17327              		@ sp needed
 17328 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17329              	.LVL1252:
 17330              	.L1216:
 17331              		.cfi_restore_state
2210:src/xeq.c     **** }
 17332              		.loc 1 2210 9 view .LVU4491
 17333 0060 0024     		movs	r4, #0
 17334              	.LVL1253:
2211:src/xeq.c     **** 
 17335              		.loc 1 2211 1 view .LVU4492
 17336 0062 2046     		mov	r0, r4
 17337 0064 02B0     		add	sp, sp, #8
 17338              		.cfi_def_cfa_offset 24
 17339              		@ sp needed
 17340 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17341              	.LVL1254:
 17342              	.L1224:
2211:src/xeq.c     **** 
 17343              		.loc 1 2211 1 view .LVU4493
 17344 006a 00BF     		.align	2
 17345              	.L1223:
 17346 006c 00000000 		.word	Error
 17347              		.cfi_endproc
 17348              	.LFE151:
 17350              		.section	.text.find_label_from,"ax",%progbits
 17351              		.align	1
ARM GAS  /tmp/ccBFDvgN.s 			page 479


 17352              		.p2align 2,,3
 17353              		.global	find_label_from
 17354              		.syntax unified
 17355              		.thumb
 17356              		.thumb_func
 17357              		.fpu fpv4-sp-d16
 17359              	find_label_from:
 17360              	.LVL1255:
 17361              	.LFB152:
2214:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 17362              		.loc 1 2214 76 is_stmt 1 view -0
 17363              		.cfi_startproc
 17364              		@ args = 0, pretend = 0, frame = 0
 17365              		@ frame_needed = 0, uses_anonymous_args = 0
 17366              		@ link register save eliminated.
2215:src/xeq.c     **** }
 17367              		.loc 1 2215 2 view .LVU4495
2215:src/xeq.c     **** }
 17368              		.loc 1 2215 9 is_stmt 0 view .LVU4496
 17369 0000 41F4C441 		orr	r1, r1, #25088
 17370              	.LVL1256:
2215:src/xeq.c     **** }
 17371              		.loc 1 2215 9 view .LVU4497
 17372 0004 FFF7FEBF 		b	find_opcode_from
 17373              	.LVL1257:
2215:src/xeq.c     **** }
 17374              		.loc 1 2215 9 view .LVU4498
 17375              		.cfi_endproc
 17376              	.LFE152:
 17378              		.section	.text.op_rtn,"ax",%progbits
 17379              		.align	1
 17380              		.p2align 2,,3
 17381              		.global	op_rtn
 17382              		.syntax unified
 17383              		.thumb
 17384              		.thumb_func
 17385              		.fpu fpv4-sp-d16
 17387              	op_rtn:
 17388              	.LVL1258:
 17389              	.LFB155:
2273:src/xeq.c     **** 	if (! Running && ! XromRunning) {
 17390              		.loc 1 2273 28 is_stmt 1 view -0
 17391              		.cfi_startproc
 17392              		@ args = 0, pretend = 0, frame = 0
 17393              		@ frame_needed = 0, uses_anonymous_args = 0
 17394              		@ link register save eliminated.
2274:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17395              		.loc 1 2274 2 view .LVU4500
2274:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17396              		.loc 1 2274 6 is_stmt 0 view .LVU4501
 17397 0000 074A     		ldr	r2, .L1229
2274:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17398              		.loc 1 2274 19 view .LVU4502
 17399 0002 084B     		ldr	r3, .L1229+4
2274:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17400              		.loc 1 2274 16 view .LVU4503
 17401 0004 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccBFDvgN.s 			page 480


 17402 0006 1B68     		ldr	r3, [r3]
 17403 0008 1343     		orrs	r3, r2, r3
 17404 000a 06D0     		beq	.L1228
2279:src/xeq.c     **** }
 17405              		.loc 1 2279 3 is_stmt 1 view .LVU4504
 17406 000c A0F13900 		sub	r0, #57
 17407              	.LVL1259:
2279:src/xeq.c     **** }
 17408              		.loc 1 2279 3 is_stmt 0 view .LVU4505
 17409 0010 B0FA80F0 		clz	r0, r0
 17410 0014 4009     		lsrs	r0, r0, #5
 17411 0016 FFF7FEBF 		b	do_rtn
 17412              	.LVL1260:
 17413              	.L1228:
2276:src/xeq.c     **** 	}
 17414              		.loc 1 2276 3 is_stmt 1 view .LVU4506
 17415 001a FFF7FEBF 		b	clrretstk_pc
 17416              	.LVL1261:
 17417              	.L1230:
2276:src/xeq.c     **** 	}
 17418              		.loc 1 2276 3 is_stmt 0 view .LVU4507
 17419 001e 00BF     		.align	2
 17420              	.L1229:
 17421 0020 00000000 		.word	Running
 17422 0024 00000000 		.word	XromRunning
 17423              		.cfi_endproc
 17424              	.LFE155:
 17426              		.section	.text.op_popusr,"ax",%progbits
 17427              		.align	1
 17428              		.p2align 2,,3
 17429              		.global	op_popusr
 17430              		.syntax unified
 17431              		.thumb
 17432              		.thumb_func
 17433              		.fpu fpv4-sp-d16
 17435              	op_popusr:
 17436              	.LVL1262:
 17437              	.LFB159:
2320:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17438              		.loc 1 2320 31 is_stmt 1 view -0
 17439              		.cfi_startproc
 17440              		@ args = 0, pretend = 0, frame = 0
 17441              		@ frame_needed = 0, uses_anonymous_args = 0
 17442              		@ link register save eliminated.
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17443              		.loc 1 2321 2 view .LVU4509
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17444              		.loc 1 2321 25 is_stmt 0 view .LVU4510
 17445 0000 134A     		ldr	r2, .L1233
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17446              		.loc 1 2321 24 view .LVU4511
 17447 0002 144B     		ldr	r3, .L1233+4
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17448              		.loc 1 2321 25 view .LVU4512
 17449 0004 1268     		ldr	r2, [r2]
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17450              		.loc 1 2321 24 view .LVU4513
ARM GAS  /tmp/ccBFDvgN.s 			page 481


 17451 0006 1B68     		ldr	r3, [r3]
2320:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17452              		.loc 1 2320 31 view .LVU4514
 17453 0008 70B4     		push	{r4, r5, r6}
 17454              		.cfi_def_cfa_offset 12
 17455              		.cfi_offset 4, -12
 17456              		.cfi_offset 5, -8
 17457              		.cfi_offset 6, -4
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17458              		.loc 1 2321 25 view .LVU4515
 17459 000a B2F9E257 		ldrsh	r5, [r2, #2018]
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17460              		.loc 1 2323 13 view .LVU4516
 17461 000e 124E     		ldr	r6, .L1233+8
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17462              		.loc 1 2321 34 view .LVU4517
 17463 0010 A9B2     		uxth	r1, r5
 17464 0012 4C1C     		adds	r4, r1, #1
 17465 0014 24B2     		sxth	r4, r4
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17466              		.loc 1 2322 34 view .LVU4518
 17467 0016 881C     		adds	r0, r1, #2
 17468              	.LVL1263:
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17469              		.loc 1 2321 34 view .LVU4519
 17470 0018 A2F8E247 		strh	r4, [r2, #2018]	@ movhi
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17471              		.loc 1 2322 34 view .LVU4520
 17472 001c 00B2     		sxth	r0, r0
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17473              		.loc 1 2321 24 view .LVU4521
 17474 001e 33F81550 		ldrh	r5, [r3, r5, lsl #1]
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17475              		.loc 1 2322 34 view .LVU4522
 17476 0022 A2F8E207 		strh	r0, [r2, #2018]	@ movhi
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17477              		.loc 1 2322 24 view .LVU4523
 17478 0026 33F91440 		ldrsh	r4, [r3, r4, lsl #1]
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17479              		.loc 1 2322 12 view .LVU4524
 17480 002a A2F8DE47 		strh	r4, [r2, #2014]	@ movhi
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17481              		.loc 1 2323 34 view .LVU4525
 17482 002e 0331     		adds	r1, r1, #3
 17483 0030 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
2324:src/xeq.c     **** }
 17484              		.loc 1 2324 20 view .LVU4526
 17485 0034 33F81420 		ldrh	r2, [r3, r4, lsl #1]
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17486              		.loc 1 2321 16 view .LVU4527
 17487 0038 0849     		ldr	r1, .L1233+12
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17488              		.loc 1 2323 24 view .LVU4528
 17489 003a 33F81000 		ldrh	r0, [r3, r0, lsl #1]
 17490 003e 3060     		str	r0, [r6]
2324:src/xeq.c     **** }
 17491              		.loc 1 2324 20 view .LVU4529
ARM GAS  /tmp/ccBFDvgN.s 			page 482


 17492 0040 22F40052 		bic	r2, r2, #8192
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17493              		.loc 1 2321 24 view .LVU4530
 17494 0044 0D60     		str	r5, [r1]
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17495              		.loc 1 2322 2 is_stmt 1 view .LVU4531
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17496              		.loc 1 2323 2 view .LVU4532
2324:src/xeq.c     **** }
 17497              		.loc 1 2324 2 view .LVU4533
2324:src/xeq.c     **** }
 17498              		.loc 1 2324 20 is_stmt 0 view .LVU4534
 17499 0046 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
2325:src/xeq.c     **** 
 17500              		.loc 1 2325 1 view .LVU4535
 17501 004a 70BC     		pop	{r4, r5, r6}
 17502              		.cfi_restore 6
 17503              		.cfi_restore 5
 17504              		.cfi_restore 4
 17505              		.cfi_def_cfa_offset 0
 17506 004c 7047     		bx	lr
 17507              	.L1234:
 17508 004e 00BF     		.align	2
 17509              	.L1233:
 17510 0050 00000000 		.word	main_ram
 17511 0054 00000000 		.word	RetStk
 17512 0058 00000000 		.word	XromUserPc
 17513 005c 00000000 		.word	UserLocalRegs
 17514              		.cfi_endproc
 17515              	.LFE159:
 17517              		.section	.text.findmultilbl,"ax",%progbits
 17518              		.align	1
 17519              		.p2align 2,,3
 17520              		.global	findmultilbl
 17521              		.syntax unified
 17522              		.thumb
 17523              		.thumb_func
 17524              		.fpu fpv4-sp-d16
 17526              	findmultilbl:
 17527              	.LVL1264:
 17528              	.LFB163:
2353:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17529              		.loc 1 2353 54 is_stmt 1 view -0
 17530              		.cfi_startproc
 17531              		@ args = 0, pretend = 0, frame = 0
 17532              		@ frame_needed = 0, uses_anonymous_args = 0
2354:src/xeq.c     **** 	unsigned int lbl;
 17533              		.loc 1 2354 2 view .LVU4537
2353:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17534              		.loc 1 2353 54 is_stmt 0 view .LVU4538
 17535 0000 38B5     		push	{r3, r4, r5, lr}
 17536              		.cfi_def_cfa_offset 16
 17537              		.cfi_offset 3, -16
 17538              		.cfi_offset 4, -12
 17539              		.cfi_offset 5, -8
 17540              		.cfi_offset 14, -4
2357:src/xeq.c     **** 	if (lbl == 0)
ARM GAS  /tmp/ccBFDvgN.s 			page 483


 17541              		.loc 1 2357 8 view .LVU4539
 17542 0002 0022     		movs	r2, #0
2354:src/xeq.c     **** 	unsigned int lbl;
 17543              		.loc 1 2354 15 view .LVU4540
 17544 0004 20F47064 		bic	r4, r0, #3840
 17545              	.LVL1265:
2355:src/xeq.c     **** 
 17546              		.loc 1 2355 2 is_stmt 1 view .LVU4541
2357:src/xeq.c     **** 	if (lbl == 0)
 17547              		.loc 1 2357 2 view .LVU4542
2353:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17548              		.loc 1 2353 54 is_stmt 0 view .LVU4543
 17549 0008 0D46     		mov	r5, r1
2357:src/xeq.c     **** 	if (lbl == 0)
 17550              		.loc 1 2357 8 view .LVU4544
 17551 000a 1046     		mov	r0, r2
 17552              	.LVL1266:
2357:src/xeq.c     **** 	if (lbl == 0)
 17553              		.loc 1 2357 8 view .LVU4545
 17554 000c 2146     		mov	r1, r4
 17555              	.LVL1267:
2357:src/xeq.c     **** 	if (lbl == 0)
 17556              		.loc 1 2357 8 view .LVU4546
 17557 000e FFF7FEFF 		bl	find_opcode_from
 17558              	.LVL1268:
2358:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17559              		.loc 1 2358 2 is_stmt 1 view .LVU4547
2358:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17560              		.loc 1 2358 5 is_stmt 0 view .LVU4548
 17561 0012 00B1     		cbz	r0, .L1241
 17562              	.L1235:
2365:src/xeq.c     **** 
 17563              		.loc 1 2365 1 view .LVU4549
 17564 0014 38BD     		pop	{r3, r4, r5, pc}
 17565              	.LVL1269:
 17566              	.L1241:
2359:src/xeq.c     **** 	if (lbl == 0)
 17567              		.loc 1 2359 3 is_stmt 1 view .LVU4550
2359:src/xeq.c     **** 	if (lbl == 0)
 17568              		.loc 1 2359 9 is_stmt 0 view .LVU4551
 17569 0016 0246     		mov	r2, r0
 17570 0018 2146     		mov	r1, r4
 17571 001a 4FF48040 		mov	r0, #16384
 17572              	.LVL1270:
2359:src/xeq.c     **** 	if (lbl == 0)
 17573              		.loc 1 2359 9 view .LVU4552
 17574 001e FFF7FEFF 		bl	find_opcode_from
 17575              	.LVL1271:
2360:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17576              		.loc 1 2360 2 is_stmt 1 view .LVU4553
2360:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17577              		.loc 1 2360 5 is_stmt 0 view .LVU4554
 17578 0022 0028     		cmp	r0, #0
 17579 0024 F6D1     		bne	.L1235
2361:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17580              		.loc 1 2361 3 is_stmt 1 view .LVU4555
2361:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
ARM GAS  /tmp/ccBFDvgN.s 			page 484


 17581              		.loc 1 2361 9 is_stmt 0 view .LVU4556
 17582 0026 0246     		mov	r2, r0
 17583 0028 2146     		mov	r1, r4
 17584 002a 4FF40040 		mov	r0, #32768
 17585              	.LVL1272:
2361:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17586              		.loc 1 2361 9 view .LVU4557
 17587 002e FFF7FEFF 		bl	find_opcode_from
 17588              	.LVL1273:
2362:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17589              		.loc 1 2362 2 is_stmt 1 view .LVU4558
2362:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17590              		.loc 1 2362 5 is_stmt 0 view .LVU4559
 17591 0032 0028     		cmp	r0, #0
 17592 0034 EED1     		bne	.L1235
2362:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17593              		.loc 1 2362 15 discriminator 1 view .LVU4560
 17594 0036 EB07     		lsls	r3, r5, #31
 17595 0038 ECD5     		bpl	.L1235
 17596              	.LBB2921:
 17597              	.LBI2921:
2353:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17598              		.loc 1 2353 14 is_stmt 1 view .LVU4561
 17599              	.LVL1274:
 17600              	.LBB2922:
2363:src/xeq.c     **** 	return lbl;
 17601              		.loc 1 2363 3 view .LVU4562
 17602              	.LBB2923:
 17603              	.LBI2923:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17604              		.loc 1 546 5 view .LVU4563
 17605              	.LBB2924:
 547:src/xeq.c     **** 		Error = e;
 17606              		.loc 1 547 2 view .LVU4564
 547:src/xeq.c     **** 		Error = e;
 17607              		.loc 1 547 12 is_stmt 0 view .LVU4565
 17608 003a 034B     		ldr	r3, .L1242
 547:src/xeq.c     **** 		Error = e;
 17609              		.loc 1 547 5 view .LVU4566
 17610 003c 1A68     		ldr	r2, [r3]
 17611 003e 002A     		cmp	r2, #0
 17612 0040 E8D1     		bne	.L1235
 17613              	.LVL1275:
 17614              	.LBB2925:
 17615              	.LBI2925:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17616              		.loc 1 546 5 is_stmt 1 view .LVU4567
 17617              	.LBB2926:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17618              		.loc 1 548 3 view .LVU4568
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17619              		.loc 1 548 9 is_stmt 0 view .LVU4569
 17620 0042 0622     		movs	r2, #6
 17621 0044 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 17622              		.loc 1 549 3 is_stmt 1 view .LVU4570
 17623              	.LVL1276:
ARM GAS  /tmp/ccBFDvgN.s 			page 485


 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 17624              		.loc 1 549 3 is_stmt 0 view .LVU4571
 17625              	.LBE2926:
 17626              	.LBE2925:
 17627              	.LBE2924:
 17628              	.LBE2923:
 17629              	.LBE2922:
 17630              	.LBE2921:
2364:src/xeq.c     **** }
 17631              		.loc 1 2364 2 is_stmt 1 view .LVU4572
2365:src/xeq.c     **** 
 17632              		.loc 1 2365 1 is_stmt 0 view .LVU4573
 17633 0046 38BD     		pop	{r3, r4, r5, pc}
 17634              	.LVL1277:
 17635              	.L1243:
2365:src/xeq.c     **** 
 17636              		.loc 1 2365 1 view .LVU4574
 17637              		.align	2
 17638              	.L1242:
 17639 0048 00000000 		.word	Error
 17640              		.cfi_endproc
 17641              	.LFE163:
 17643              		.section	.text.multiumenu,"ax",%progbits
 17644              		.align	1
 17645              		.p2align 2,,3
 17646              		.global	multiumenu
 17647              		.syntax unified
 17648              		.thumb
 17649              		.thumb_func
 17650              		.fpu fpv4-sp-d16
 17652              	multiumenu:
 17653              	.LVL1278:
 17654              	.LFB166:
2386:src/xeq.c     ****   opcode op = (o & 0xFFFFF0FF) + ((DBL_LBL) << DBL_SHIFT); // change opcode to LBL
 17655              		.loc 1 2386 53 is_stmt 1 view -0
 17656              		.cfi_startproc
 17657              		@ args = 0, pretend = 0, frame = 0
 17658              		@ frame_needed = 0, uses_anonymous_args = 0
2387:src/xeq.c     ****   build_user_menu_from_program(op);
 17659              		.loc 1 2387 3 view .LVU4576
2388:src/xeq.c     ****   set_menu (M_User);
 17660              		.loc 1 2388 3 view .LVU4577
2386:src/xeq.c     ****   opcode op = (o & 0xFFFFF0FF) + ((DBL_LBL) << DBL_SHIFT); // change opcode to LBL
 17661              		.loc 1 2386 53 is_stmt 0 view .LVU4578
 17662 0000 08B5     		push	{r3, lr}
 17663              		.cfi_def_cfa_offset 8
 17664              		.cfi_offset 3, -8
 17665              		.cfi_offset 14, -4
2388:src/xeq.c     ****   set_menu (M_User);
 17666              		.loc 1 2388 3 view .LVU4579
 17667 0002 20F47060 		bic	r0, r0, #3840
 17668              	.LVL1279:
2388:src/xeq.c     ****   set_menu (M_User);
 17669              		.loc 1 2388 3 view .LVU4580
 17670 0006 FFF7FEFF 		bl	build_user_menu_from_program
 17671              	.LVL1280:
2389:src/xeq.c     ****   display_current_menu ();
ARM GAS  /tmp/ccBFDvgN.s 			page 486


 17672              		.loc 1 2389 3 is_stmt 1 view .LVU4581
 17673 000a 6320     		movs	r0, #99
 17674 000c FFF7FEFF 		bl	set_menu
 17675              	.LVL1281:
2390:src/xeq.c     **** }
 17676              		.loc 1 2390 3 view .LVU4582
2391:src/xeq.c     **** 
 17677              		.loc 1 2391 1 is_stmt 0 view .LVU4583
 17678 0010 BDE80840 		pop	{r3, lr}
 17679              		.cfi_restore 14
 17680              		.cfi_restore 3
 17681              		.cfi_def_cfa_offset 0
2390:src/xeq.c     **** }
 17682              		.loc 1 2390 3 view .LVU4584
 17683 0014 FFF7FEBF 		b	display_current_menu
 17684              	.LVL1282:
 17685              		.cfi_endproc
 17686              	.LFE166:
 17688              		.section	.text.get_dispmode_digs,"ax",%progbits
 17689              		.align	1
 17690              		.p2align 2,,3
 17691              		.global	get_dispmode_digs
 17692              		.syntax unified
 17693              		.thumb
 17694              		.thumb_func
 17695              		.fpu fpv4-sp-d16
 17697              	get_dispmode_digs:
 17698              	.LVL1283:
 17699              	.LFB171:
2424:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17700              		.loc 1 2424 1 is_stmt 1 view -0
 17701              		.cfi_startproc
 17702              		@ args = 0, pretend = 0, frame = 0
 17703              		@ frame_needed = 0, uses_anonymous_args = 0
 17704              		@ link register save eliminated.
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17705              		.loc 1 2425 2 view .LVU4586
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17706              		.loc 1 2425 17 is_stmt 0 view .LVU4587
 17707 0000 0A4B     		ldr	r3, .L1249
 17708 0002 1A68     		ldr	r2, [r3]
2426:src/xeq.c     **** 
 17709              		.loc 1 2426 23 view .LVU4588
 17710 0004 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17711              		.loc 1 2425 23 view .LVU4589
 17712 0008 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
2426:src/xeq.c     **** 
 17713              		.loc 1 2426 6 view .LVU4590
 17714 000c 03F00F03 		and	r3, r3, #15
2428:src/xeq.c     **** 		dispdigs -= 12;
 17715              		.loc 1 2428 5 view .LVU4591
 17716 0010 0B2B     		cmp	r3, #11
2424:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17717              		.loc 1 2424 1 view .LVU4592
 17718 0012 0146     		mov	r1, r0
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
ARM GAS  /tmp/ccBFDvgN.s 			page 487


 17719              		.loc 1 2425 6 view .LVU4593
 17720 0014 4FEA9210 		lsr	r0, r2, #6
 17721              	.LVL1284:
2426:src/xeq.c     **** 
 17722              		.loc 1 2426 2 is_stmt 1 view .LVU4594
2428:src/xeq.c     **** 		dispdigs -= 12;
 17723              		.loc 1 2428 2 view .LVU4595
2428:src/xeq.c     **** 		dispdigs -= 12;
 17724              		.loc 1 2428 5 is_stmt 0 view .LVU4596
 17725 0018 06DD     		ble	.L1247
2429:src/xeq.c     **** 		dispmode += 4;
 17726              		.loc 1 2429 3 is_stmt 1 view .LVU4597
 17727              	.LVL1285:
2430:src/xeq.c     **** 		if (dispmode >= 6) {
 17728              		.loc 1 2430 3 view .LVU4598
2430:src/xeq.c     **** 		if (dispmode >= 6) {
 17729              		.loc 1 2430 12 is_stmt 0 view .LVU4599
 17730 001a 021D     		adds	r2, r0, #4
 17731              	.LVL1286:
2431:src/xeq.c     **** 			dispmode -= 2;
 17732              		.loc 1 2431 3 is_stmt 1 view .LVU4600
2431:src/xeq.c     **** 			dispmode -= 2;
 17733              		.loc 1 2431 6 is_stmt 0 view .LVU4601
 17734 001c 052A     		cmp	r2, #5
2429:src/xeq.c     **** 		dispmode += 4;
 17735              		.loc 1 2429 12 view .LVU4602
 17736 001e D9BF     		ittee	le
 17737 0020 0C3B     		suble	r3, r3, #12
 17738              	.LVL1287:
2429:src/xeq.c     **** 		dispmode += 4;
 17739              		.loc 1 2429 12 view .LVU4603
 17740 0022 1046     		movle	r0, r2
2432:src/xeq.c     **** 			dispdigs += 4;
 17741              		.loc 1 2432 4 is_stmt 1 view .LVU4604
2432:src/xeq.c     **** 			dispdigs += 4;
 17742              		.loc 1 2432 13 is_stmt 0 view .LVU4605
 17743 0024 0230     		addgt	r0, r0, #2
 17744              	.LVL1288:
2433:src/xeq.c     **** 		}
 17745              		.loc 1 2433 4 is_stmt 1 view .LVU4606
2433:src/xeq.c     **** 		}
 17746              		.loc 1 2433 13 is_stmt 0 view .LVU4607
 17747 0026 083B     		subgt	r3, r3, #8
 17748              	.LVL1289:
 17749              	.L1247:
2436:src/xeq.c     **** 	return dispmode;
 17750              		.loc 1 2436 2 is_stmt 1 view .LVU4608
2436:src/xeq.c     **** 	return dispmode;
 17751              		.loc 1 2436 9 is_stmt 0 view .LVU4609
 17752 0028 0B60     		str	r3, [r1]
2437:src/xeq.c     **** }
 17753              		.loc 1 2437 2 is_stmt 1 view .LVU4610
2438:src/xeq.c     **** 
 17754              		.loc 1 2438 1 is_stmt 0 view .LVU4611
 17755 002a 7047     		bx	lr
 17756              	.L1250:
 17757              		.align	2
ARM GAS  /tmp/ccBFDvgN.s 			page 488


 17758              	.L1249:
 17759 002c 00000000 		.word	main_ram
 17760              		.cfi_endproc
 17761              	.LFE171:
 17763              		.section	.text.set_dispmode_digs,"ax",%progbits
 17764              		.align	1
 17765              		.p2align 2,,3
 17766              		.global	set_dispmode_digs
 17767              		.syntax unified
 17768              		.thumb
 17769              		.thumb_func
 17770              		.fpu fpv4-sp-d16
 17772              	set_dispmode_digs:
 17773              	.LVL1290:
 17774              	.LFB172:
2441:src/xeq.c     **** 	if (dispmode >= 4) {
 17775              		.loc 1 2441 1 is_stmt 1 view -0
 17776              		.cfi_startproc
 17777              		@ args = 0, pretend = 0, frame = 0
 17778              		@ frame_needed = 0, uses_anonymous_args = 0
 17779              		@ link register save eliminated.
2442:src/xeq.c     **** 		dispmode -= 4;
 17780              		.loc 1 2442 2 view .LVU4613
2442:src/xeq.c     **** 		dispmode -= 4;
 17781              		.loc 1 2442 5 is_stmt 0 view .LVU4614
 17782 0000 0328     		cmp	r0, #3
 17783 0002 07DD     		ble	.L1252
2443:src/xeq.c     **** 		dispdigs += 12;
 17784              		.loc 1 2443 3 is_stmt 1 view .LVU4615
 17785              	.LVL1291:
2444:src/xeq.c     **** 		if (dispdigs >= 16) {
 17786              		.loc 1 2444 3 view .LVU4616
2444:src/xeq.c     **** 		if (dispdigs >= 16) {
 17787              		.loc 1 2444 12 is_stmt 0 view .LVU4617
 17788 0004 01F10C03 		add	r3, r1, #12
 17789              	.LVL1292:
2445:src/xeq.c     **** 			dispdigs -= 4;
 17790              		.loc 1 2445 3 is_stmt 1 view .LVU4618
2445:src/xeq.c     **** 			dispdigs -= 4;
 17791              		.loc 1 2445 6 is_stmt 0 view .LVU4619
 17792 0008 0F2B     		cmp	r3, #15
2443:src/xeq.c     **** 		dispdigs += 12;
 17793              		.loc 1 2443 12 view .LVU4620
 17794 000a D9BF     		ittee	le
 17795 000c 0438     		suble	r0, r0, #4
 17796              	.LVL1293:
2443:src/xeq.c     **** 		dispdigs += 12;
 17797              		.loc 1 2443 12 view .LVU4621
 17798 000e 1946     		movle	r1, r3
2446:src/xeq.c     **** 			dispmode += 2;
 17799              		.loc 1 2446 4 is_stmt 1 view .LVU4622
2446:src/xeq.c     **** 			dispmode += 2;
 17800              		.loc 1 2446 13 is_stmt 0 view .LVU4623
 17801 0010 0831     		addgt	r1, r1, #8
 17802              	.LVL1294:
2447:src/xeq.c     **** 		}
 17803              		.loc 1 2447 4 is_stmt 1 view .LVU4624
ARM GAS  /tmp/ccBFDvgN.s 			page 489


2447:src/xeq.c     **** 		}
 17804              		.loc 1 2447 13 is_stmt 0 view .LVU4625
 17805 0012 0238     		subgt	r0, r0, #2
 17806              	.LVL1295:
 17807              	.L1252:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17808              		.loc 1 2450 2 is_stmt 1 view .LVU4626
 17809 0014 084B     		ldr	r3, .L1254
 17810 0016 1A68     		ldr	r2, [r3]
2451:src/xeq.c     **** }
 17811              		.loc 1 2451 2 view .LVU4627
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17812              		.loc 1 2450 18 is_stmt 0 view .LVU4628
 17813 0018 00F00300 		and	r0, r0, #3
 17814              	.LVL1296:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17815              		.loc 1 2450 18 view .LVU4629
 17816 001c B2F8E637 		ldrh	r3, [r2, #2022]
 17817 0020 8001     		lsls	r0, r0, #6
 17818 0022 01F00F01 		and	r1, r1, #15
 17819              	.LVL1297:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17820              		.loc 1 2450 18 view .LVU4630
 17821 0026 40EA0120 		orr	r0, r0, r1, lsl #8
 17822 002a 23F47C63 		bic	r3, r3, #4032
 17823 002e 1843     		orrs	r0, r0, r3
 17824 0030 A2F8E607 		strh	r0, [r2, #2022]	@ movhi
2452:src/xeq.c     **** #endif
 17825              		.loc 1 2452 1 view .LVU4631
 17826 0034 7047     		bx	lr
 17827              	.L1255:
 17828 0036 00BF     		.align	2
 17829              	.L1254:
 17830 0038 00000000 		.word	main_ram
 17831              		.cfi_endproc
 17832              	.LFE172:
 17834              		.section	.text.convC2F,"ax",%progbits
 17835              		.align	1
 17836              		.p2align 2,,3
 17837              		.global	convC2F
 17838              		.syntax unified
 17839              		.thumb
 17840              		.thumb_func
 17841              		.fpu fpv4-sp-d16
 17843              	convC2F:
 17844              	.LVL1298:
 17845              	.LFB174:
2504:src/xeq.c     **** 	decNumber s;
 17846              		.loc 1 2504 54 is_stmt 1 view -0
 17847              		.cfi_startproc
 17848              		@ args = 0, pretend = 0, frame = 40
 17849              		@ frame_needed = 0, uses_anonymous_args = 0
2505:src/xeq.c     **** 
 17850              		.loc 1 2505 2 view .LVU4633
2507:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17851              		.loc 1 2507 2 view .LVU4634
2504:src/xeq.c     **** 	decNumber s;
ARM GAS  /tmp/ccBFDvgN.s 			page 490


 17852              		.loc 1 2504 54 is_stmt 0 view .LVU4635
 17853 0000 10B5     		push	{r4, lr}
 17854              		.cfi_def_cfa_offset 8
 17855              		.cfi_offset 4, -8
 17856              		.cfi_offset 14, -4
 17857 0002 8AB0     		sub	sp, sp, #40
 17858              		.cfi_def_cfa_offset 48
2504:src/xeq.c     **** 	decNumber s;
 17859              		.loc 1 2504 54 view .LVU4636
 17860 0004 0446     		mov	r4, r0
2507:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17861              		.loc 1 2507 2 view .LVU4637
 17862 0006 054A     		ldr	r2, .L1258
 17863 0008 01A8     		add	r0, sp, #4
 17864              	.LVL1299:
2507:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17865              		.loc 1 2507 2 view .LVU4638
 17866 000a FFF7FEFF 		bl	dn_multiply
 17867              	.LVL1300:
2508:src/xeq.c     **** }
 17868              		.loc 1 2508 2 is_stmt 1 view .LVU4639
2508:src/xeq.c     **** }
 17869              		.loc 1 2508 9 is_stmt 0 view .LVU4640
 17870 000e 044A     		ldr	r2, .L1258+4
 17871 0010 2046     		mov	r0, r4
 17872 0012 01A9     		add	r1, sp, #4
 17873 0014 FFF7FEFF 		bl	dn_add
 17874              	.LVL1301:
2509:src/xeq.c     **** 
 17875              		.loc 1 2509 1 view .LVU4641
 17876 0018 0AB0     		add	sp, sp, #40
 17877              		.cfi_def_cfa_offset 8
 17878              		@ sp needed
 17879 001a 10BD     		pop	{r4, pc}
 17880              	.LVL1302:
 17881              	.L1259:
2509:src/xeq.c     **** 
 17882              		.loc 1 2509 1 view .LVU4642
 17883              		.align	2
 17884              	.L1258:
 17885 001c 00000000 		.word	const_9on5
 17886 0020 00000000 		.word	const_32
 17887              		.cfi_endproc
 17888              	.LFE174:
 17890              		.section	.text.convF2C,"ax",%progbits
 17891              		.align	1
 17892              		.p2align 2,,3
 17893              		.global	convF2C
 17894              		.syntax unified
 17895              		.thumb
 17896              		.thumb_func
 17897              		.fpu fpv4-sp-d16
 17899              	convF2C:
 17900              	.LVL1303:
 17901              	.LFB175:
2511:src/xeq.c     **** 	decNumber s;
 17902              		.loc 1 2511 54 is_stmt 1 view -0
ARM GAS  /tmp/ccBFDvgN.s 			page 491


 17903              		.cfi_startproc
 17904              		@ args = 0, pretend = 0, frame = 40
 17905              		@ frame_needed = 0, uses_anonymous_args = 0
2512:src/xeq.c     **** 
 17906              		.loc 1 2512 2 view .LVU4644
2514:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17907              		.loc 1 2514 2 view .LVU4645
2511:src/xeq.c     **** 	decNumber s;
 17908              		.loc 1 2511 54 is_stmt 0 view .LVU4646
 17909 0000 10B5     		push	{r4, lr}
 17910              		.cfi_def_cfa_offset 8
 17911              		.cfi_offset 4, -8
 17912              		.cfi_offset 14, -4
 17913 0002 8AB0     		sub	sp, sp, #40
 17914              		.cfi_def_cfa_offset 48
2511:src/xeq.c     **** 	decNumber s;
 17915              		.loc 1 2511 54 view .LVU4647
 17916 0004 0446     		mov	r4, r0
2514:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17917              		.loc 1 2514 2 view .LVU4648
 17918 0006 054A     		ldr	r2, .L1262
 17919 0008 01A8     		add	r0, sp, #4
 17920              	.LVL1304:
2514:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17921              		.loc 1 2514 2 view .LVU4649
 17922 000a FFF7FEFF 		bl	dn_subtract
 17923              	.LVL1305:
2515:src/xeq.c     **** }
 17924              		.loc 1 2515 2 is_stmt 1 view .LVU4650
2515:src/xeq.c     **** }
 17925              		.loc 1 2515 9 is_stmt 0 view .LVU4651
 17926 000e 044A     		ldr	r2, .L1262+4
 17927 0010 2046     		mov	r0, r4
 17928 0012 01A9     		add	r1, sp, #4
 17929 0014 FFF7FEFF 		bl	dn_divide
 17930              	.LVL1306:
2516:src/xeq.c     **** 
 17931              		.loc 1 2516 1 view .LVU4652
 17932 0018 0AB0     		add	sp, sp, #40
 17933              		.cfi_def_cfa_offset 8
 17934              		@ sp needed
 17935 001a 10BD     		pop	{r4, pc}
 17936              	.LVL1307:
 17937              	.L1263:
2516:src/xeq.c     **** 
 17938              		.loc 1 2516 1 view .LVU4653
 17939              		.align	2
 17940              	.L1262:
 17941 001c 00000000 		.word	const_32
 17942 0020 00000000 		.word	const_9on5
 17943              		.cfi_endproc
 17944              	.LFE175:
 17946              		.section	.text.convDB2AR,"ax",%progbits
 17947              		.align	1
 17948              		.p2align 2,,3
 17949              		.global	convDB2AR
 17950              		.syntax unified
ARM GAS  /tmp/ccBFDvgN.s 			page 492


 17951              		.thumb
 17952              		.thumb_func
 17953              		.fpu fpv4-sp-d16
 17955              	convDB2AR:
 17956              	.LVL1308:
 17957              	.LFB176:
2518:src/xeq.c     **** 	decNumber t;
 17958              		.loc 1 2518 56 is_stmt 1 view -0
 17959              		.cfi_startproc
 17960              		@ args = 0, pretend = 0, frame = 40
 17961              		@ frame_needed = 0, uses_anonymous_args = 0
2519:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
 17962              		.loc 1 2519 2 view .LVU4655
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17963              		.loc 1 2520 2 view .LVU4656
2518:src/xeq.c     **** 	decNumber t;
 17964              		.loc 1 2518 56 is_stmt 0 view .LVU4657
 17965 0000 10B5     		push	{r4, lr}
 17966              		.cfi_def_cfa_offset 8
 17967              		.cfi_offset 4, -8
 17968              		.cfi_offset 14, -4
 17969 0002 8AB0     		sub	sp, sp, #40
 17970              		.cfi_def_cfa_offset 48
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17971              		.loc 1 2520 2 view .LVU4658
 17972 0004 054A     		ldr	r2, .L1266
2518:src/xeq.c     **** 	decNumber t;
 17973              		.loc 1 2518 56 view .LVU4659
 17974 0006 0446     		mov	r4, r0
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17975              		.loc 1 2520 2 view .LVU4660
 17976 0008 01A8     		add	r0, sp, #4
 17977              	.LVL1309:
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17978              		.loc 1 2520 2 view .LVU4661
 17979 000a FFF7FEFF 		bl	dn_multiply
 17980              	.LVL1310:
2521:src/xeq.c     **** }
 17981              		.loc 1 2521 2 is_stmt 1 view .LVU4662
2521:src/xeq.c     **** }
 17982              		.loc 1 2521 9 is_stmt 0 view .LVU4663
 17983 000e 01A9     		add	r1, sp, #4
 17984 0010 2046     		mov	r0, r4
 17985 0012 FFF7FEFF 		bl	decNumberPow10
 17986              	.LVL1311:
2522:src/xeq.c     **** 
 17987              		.loc 1 2522 1 view .LVU4664
 17988 0016 0AB0     		add	sp, sp, #40
 17989              		.cfi_def_cfa_offset 8
 17990              		@ sp needed
 17991 0018 10BD     		pop	{r4, pc}
 17992              	.LVL1312:
 17993              	.L1267:
2522:src/xeq.c     **** 
 17994              		.loc 1 2522 1 view .LVU4665
 17995 001a 00BF     		.align	2
 17996              	.L1266:
ARM GAS  /tmp/ccBFDvgN.s 			page 493


 17997 001c 00000000 		.word	const_0_05
 17998              		.cfi_endproc
 17999              	.LFE176:
 18001              		.section	.text.convAR2DB,"ax",%progbits
 18002              		.align	1
 18003              		.p2align 2,,3
 18004              		.global	convAR2DB
 18005              		.syntax unified
 18006              		.thumb
 18007              		.thumb_func
 18008              		.fpu fpv4-sp-d16
 18010              	convAR2DB:
 18011              	.LVL1313:
 18012              	.LFB177:
2524:src/xeq.c     **** 	decNumber t;
 18013              		.loc 1 2524 56 is_stmt 1 view -0
 18014              		.cfi_startproc
 18015              		@ args = 0, pretend = 0, frame = 40
 18016              		@ frame_needed = 0, uses_anonymous_args = 0
2525:src/xeq.c     **** 	dn_log10(&t, x);
 18017              		.loc 1 2525 2 view .LVU4667
2526:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 18018              		.loc 1 2526 2 view .LVU4668
2524:src/xeq.c     **** 	decNumber t;
 18019              		.loc 1 2524 56 is_stmt 0 view .LVU4669
 18020 0000 10B5     		push	{r4, lr}
 18021              		.cfi_def_cfa_offset 8
 18022              		.cfi_offset 4, -8
 18023              		.cfi_offset 14, -4
 18024 0002 8AB0     		sub	sp, sp, #40
 18025              		.cfi_def_cfa_offset 48
2524:src/xeq.c     **** 	decNumber t;
 18026              		.loc 1 2524 56 view .LVU4670
 18027 0004 0446     		mov	r4, r0
2526:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 18028              		.loc 1 2526 2 view .LVU4671
 18029 0006 01A8     		add	r0, sp, #4
 18030              	.LVL1314:
2526:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 18031              		.loc 1 2526 2 view .LVU4672
 18032 0008 FFF7FEFF 		bl	dn_log10
 18033              	.LVL1315:
2527:src/xeq.c     **** }
 18034              		.loc 1 2527 2 is_stmt 1 view .LVU4673
2527:src/xeq.c     **** }
 18035              		.loc 1 2527 9 is_stmt 0 view .LVU4674
 18036 000c 034A     		ldr	r2, .L1270
 18037 000e 2046     		mov	r0, r4
 18038 0010 01A9     		add	r1, sp, #4
 18039 0012 FFF7FEFF 		bl	dn_multiply
 18040              	.LVL1316:
2528:src/xeq.c     **** 
 18041              		.loc 1 2528 1 view .LVU4675
 18042 0016 0AB0     		add	sp, sp, #40
 18043              		.cfi_def_cfa_offset 8
 18044              		@ sp needed
 18045 0018 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccBFDvgN.s 			page 494


 18046              	.LVL1317:
 18047              	.L1271:
2528:src/xeq.c     **** 
 18048              		.loc 1 2528 1 view .LVU4676
 18049 001a 00BF     		.align	2
 18050              	.L1270:
 18051 001c 00000000 		.word	const_20
 18052              		.cfi_endproc
 18053              	.LFE177:
 18055              		.section	.text.convDB2PR,"ax",%progbits
 18056              		.align	1
 18057              		.p2align 2,,3
 18058              		.global	convDB2PR
 18059              		.syntax unified
 18060              		.thumb
 18061              		.thumb_func
 18062              		.fpu fpv4-sp-d16
 18064              	convDB2PR:
 18065              	.LVL1318:
 18066              	.LFB178:
2530:src/xeq.c     **** 	decNumber t;
 18067              		.loc 1 2530 56 is_stmt 1 view -0
 18068              		.cfi_startproc
 18069              		@ args = 0, pretend = 0, frame = 40
 18070              		@ frame_needed = 0, uses_anonymous_args = 0
2531:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
 18071              		.loc 1 2531 2 view .LVU4678
2532:src/xeq.c     **** 	return decNumberPow10(r, &t);
 18072              		.loc 1 2532 2 view .LVU4679
2530:src/xeq.c     **** 	decNumber t;
 18073              		.loc 1 2530 56 is_stmt 0 view .LVU4680
 18074 0000 10B5     		push	{r4, lr}
 18075              		.cfi_def_cfa_offset 8
 18076              		.cfi_offset 4, -8
 18077              		.cfi_offset 14, -4
 18078 0002 8AB0     		sub	sp, sp, #40
 18079              		.cfi_def_cfa_offset 48
2530:src/xeq.c     **** 	decNumber t;
 18080              		.loc 1 2530 56 view .LVU4681
 18081 0004 0446     		mov	r4, r0
2532:src/xeq.c     **** 	return decNumberPow10(r, &t);
 18082              		.loc 1 2532 2 view .LVU4682
 18083 0006 4FF0FF32 		mov	r2, #-1
 18084 000a 01A8     		add	r0, sp, #4
 18085              	.LVL1319:
2532:src/xeq.c     **** 	return decNumberPow10(r, &t);
 18086              		.loc 1 2532 2 view .LVU4683
 18087 000c FFF7FEFF 		bl	dn_mulpow10
 18088              	.LVL1320:
2533:src/xeq.c     **** }
 18089              		.loc 1 2533 2 is_stmt 1 view .LVU4684
2533:src/xeq.c     **** }
 18090              		.loc 1 2533 9 is_stmt 0 view .LVU4685
 18091 0010 01A9     		add	r1, sp, #4
 18092 0012 2046     		mov	r0, r4
 18093 0014 FFF7FEFF 		bl	decNumberPow10
 18094              	.LVL1321:
ARM GAS  /tmp/ccBFDvgN.s 			page 495


2534:src/xeq.c     **** 
 18095              		.loc 1 2534 1 view .LVU4686
 18096 0018 0AB0     		add	sp, sp, #40
 18097              		.cfi_def_cfa_offset 8
 18098              		@ sp needed
 18099 001a 10BD     		pop	{r4, pc}
2534:src/xeq.c     **** 
 18100              		.loc 1 2534 1 view .LVU4687
 18101              		.cfi_endproc
 18102              	.LFE178:
 18104              		.section	.text.convPR2DB,"ax",%progbits
 18105              		.align	1
 18106              		.p2align 2,,3
 18107              		.global	convPR2DB
 18108              		.syntax unified
 18109              		.thumb
 18110              		.thumb_func
 18111              		.fpu fpv4-sp-d16
 18113              	convPR2DB:
 18114              	.LVL1322:
 18115              	.LFB179:
2536:src/xeq.c     **** 	decNumber t;
 18116              		.loc 1 2536 56 is_stmt 1 view -0
 18117              		.cfi_startproc
 18118              		@ args = 0, pretend = 0, frame = 40
 18119              		@ frame_needed = 0, uses_anonymous_args = 0
2537:src/xeq.c     **** 	dn_log10(&t, x);
 18120              		.loc 1 2537 2 view .LVU4689
2538:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18121              		.loc 1 2538 2 view .LVU4690
2536:src/xeq.c     **** 	decNumber t;
 18122              		.loc 1 2536 56 is_stmt 0 view .LVU4691
 18123 0000 10B5     		push	{r4, lr}
 18124              		.cfi_def_cfa_offset 8
 18125              		.cfi_offset 4, -8
 18126              		.cfi_offset 14, -4
 18127 0002 8AB0     		sub	sp, sp, #40
 18128              		.cfi_def_cfa_offset 48
2536:src/xeq.c     **** 	decNumber t;
 18129              		.loc 1 2536 56 view .LVU4692
 18130 0004 0446     		mov	r4, r0
2538:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18131              		.loc 1 2538 2 view .LVU4693
 18132 0006 01A8     		add	r0, sp, #4
 18133              	.LVL1323:
2538:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18134              		.loc 1 2538 2 view .LVU4694
 18135 0008 FFF7FEFF 		bl	dn_log10
 18136              	.LVL1324:
2539:src/xeq.c     **** }
 18137              		.loc 1 2539 2 is_stmt 1 view .LVU4695
2539:src/xeq.c     **** }
 18138              		.loc 1 2539 9 is_stmt 0 view .LVU4696
 18139 000c 2046     		mov	r0, r4
 18140 000e 01A9     		add	r1, sp, #4
 18141 0010 0122     		movs	r2, #1
 18142 0012 FFF7FEFF 		bl	dn_mulpow10
ARM GAS  /tmp/ccBFDvgN.s 			page 496


 18143              	.LVL1325:
2540:src/xeq.c     **** 
 18144              		.loc 1 2540 1 view .LVU4697
 18145 0016 0AB0     		add	sp, sp, #40
 18146              		.cfi_def_cfa_offset 8
 18147              		@ sp needed
 18148 0018 10BD     		pop	{r4, pc}
2540:src/xeq.c     **** 
 18149              		.loc 1 2540 1 view .LVU4698
 18150              		.cfi_endproc
 18151              	.LFE179:
 18153 001a 00BF     		.section	.text.do_conv,"ax",%progbits
 18154              		.align	1
 18155              		.p2align 2,,3
 18156              		.global	do_conv
 18157              		.syntax unified
 18158              		.thumb
 18159              		.thumb_func
 18160              		.fpu fpv4-sp-d16
 18162              	do_conv:
 18163              	.LVL1326:
 18164              	.LFB180:
2543:src/xeq.c     **** 	decNumber m;
 18165              		.loc 1 2543 66 is_stmt 1 view -0
 18166              		.cfi_startproc
 18167              		@ args = 0, pretend = 0, frame = 40
 18168              		@ frame_needed = 0, uses_anonymous_args = 0
2544:src/xeq.c     **** 	const unsigned int conv = arg / 2;
 18169              		.loc 1 2544 2 view .LVU4700
2545:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18170              		.loc 1 2545 2 view .LVU4701
2546:src/xeq.c     **** 
 18171              		.loc 1 2546 2 view .LVU4702
2548:src/xeq.c     **** 		decNumberCopy(r, x);
 18172              		.loc 1 2548 2 view .LVU4703
2543:src/xeq.c     **** 	decNumber m;
 18173              		.loc 1 2543 66 is_stmt 0 view .LVU4704
 18174 0000 70B5     		push	{r4, r5, r6, lr}
 18175              		.cfi_def_cfa_offset 16
 18176              		.cfi_offset 4, -16
 18177              		.cfi_offset 5, -12
 18178              		.cfi_offset 6, -8
 18179              		.cfi_offset 14, -4
2548:src/xeq.c     **** 		decNumberCopy(r, x);
 18180              		.loc 1 2548 5 view .LVU4705
 18181 0002 4D29     		cmp	r1, #77
2543:src/xeq.c     **** 	decNumber m;
 18182              		.loc 1 2543 66 view .LVU4706
 18183 0004 8AB0     		sub	sp, sp, #40
 18184              		.cfi_def_cfa_offset 56
2543:src/xeq.c     **** 	decNumber m;
 18185              		.loc 1 2543 66 view .LVU4707
 18186 0006 1546     		mov	r5, r2
2548:src/xeq.c     **** 		decNumberCopy(r, x);
 18187              		.loc 1 2548 5 view .LVU4708
 18188 0008 15D8     		bhi	.L1282
2553:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 497


 18189              		.loc 1 2553 2 is_stmt 1 view .LVU4709
 18190 000a 0D4B     		ldr	r3, .L1284
 18191 000c 0646     		mov	r6, r0
2545:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18192              		.loc 1 2545 21 is_stmt 0 view .LVU4710
 18193 000e 4808     		lsrs	r0, r1, #1
 18194              	.LVL1327:
2545:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18195              		.loc 1 2545 21 view .LVU4711
 18196 0010 0C46     		mov	r4, r1
2553:src/xeq.c     **** 
 18197              		.loc 1 2553 2 view .LVU4712
 18198 0012 03EB0010 		add	r0, r3, r0, lsl #4
 18199 0016 01A9     		add	r1, sp, #4
 18200              	.LVL1328:
2553:src/xeq.c     **** 
 18201              		.loc 1 2553 2 view .LVU4713
 18202 0018 FFF7FEFF 		bl	decimal64ToNumber
 18203              	.LVL1329:
2555:src/xeq.c     **** 		dn_divide(r, x, &m);
 18204              		.loc 1 2555 2 is_stmt 1 view .LVU4714
2555:src/xeq.c     **** 		dn_divide(r, x, &m);
 18205              		.loc 1 2555 5 is_stmt 0 view .LVU4715
 18206 001c E307     		lsls	r3, r4, #31
2556:src/xeq.c     **** 	else			// imperial to metric
 18207              		.loc 1 2556 3 view .LVU4716
 18208 001e 01AA     		add	r2, sp, #4
 18209 0020 2946     		mov	r1, r5
 18210 0022 3046     		mov	r0, r6
2555:src/xeq.c     **** 		dn_divide(r, x, &m);
 18211              		.loc 1 2555 5 view .LVU4717
 18212 0024 03D5     		bpl	.L1283
2558:src/xeq.c     **** }
 18213              		.loc 1 2558 3 is_stmt 1 view .LVU4718
 18214 0026 FFF7FEFF 		bl	dn_multiply
 18215              	.LVL1330:
2559:src/xeq.c     **** 
 18216              		.loc 1 2559 1 is_stmt 0 view .LVU4719
 18217 002a 0AB0     		add	sp, sp, #40
 18218              		.cfi_remember_state
 18219              		.cfi_def_cfa_offset 16
 18220              		@ sp needed
 18221 002c 70BD     		pop	{r4, r5, r6, pc}
 18222              	.LVL1331:
 18223              	.L1283:
 18224              		.cfi_restore_state
2556:src/xeq.c     **** 	else			// imperial to metric
 18225              		.loc 1 2556 3 is_stmt 1 view .LVU4720
 18226 002e FFF7FEFF 		bl	dn_divide
 18227              	.LVL1332:
2559:src/xeq.c     **** 
 18228              		.loc 1 2559 1 is_stmt 0 view .LVU4721
 18229 0032 0AB0     		add	sp, sp, #40
 18230              		.cfi_remember_state
 18231              		.cfi_def_cfa_offset 16
 18232              		@ sp needed
 18233 0034 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccBFDvgN.s 			page 498


 18234              	.LVL1333:
 18235              	.L1282:
 18236              		.cfi_restore_state
2549:src/xeq.c     **** 		return;
 18237              		.loc 1 2549 3 is_stmt 1 view .LVU4722
 18238 0036 1146     		mov	r1, r2
 18239              	.LVL1334:
2549:src/xeq.c     **** 		return;
 18240              		.loc 1 2549 3 is_stmt 0 view .LVU4723
 18241 0038 FFF7FEFF 		bl	decNumberCopy
 18242              	.LVL1335:
2550:src/xeq.c     **** 	}
 18243              		.loc 1 2550 3 is_stmt 1 view .LVU4724
2559:src/xeq.c     **** 
 18244              		.loc 1 2559 1 is_stmt 0 view .LVU4725
 18245 003c 0AB0     		add	sp, sp, #40
 18246              		.cfi_def_cfa_offset 16
 18247              		@ sp needed
 18248 003e 70BD     		pop	{r4, r5, r6, pc}
 18249              	.LVL1336:
 18250              	.L1285:
2559:src/xeq.c     **** 
 18251              		.loc 1 2559 1 view .LVU4726
 18252              		.align	2
 18253              	.L1284:
 18254 0040 00000000 		.word	cnsts_conv
 18255              		.cfi_endproc
 18256              	.LFE180:
 18258              		.section	.text.cmdconv,"ax",%progbits
 18259              		.align	1
 18260              		.p2align 2,,3
 18261              		.global	cmdconv
 18262              		.syntax unified
 18263              		.thumb
 18264              		.thumb_func
 18265              		.fpu fpv4-sp-d16
 18267              	cmdconv:
 18268              	.LVL1337:
 18269              	.LFB181:
2561:src/xeq.c     **** 	decNumber x, r;
 18270              		.loc 1 2561 46 is_stmt 1 view -0
 18271              		.cfi_startproc
 18272              		@ args = 0, pretend = 0, frame = 72
 18273              		@ frame_needed = 0, uses_anonymous_args = 0
2562:src/xeq.c     **** 
 18274              		.loc 1 2562 2 view .LVU4728
2564:src/xeq.c     **** 		return;
 18275              		.loc 1 2564 2 view .LVU4729
2564:src/xeq.c     **** 		return;
 18276              		.loc 1 2564 6 is_stmt 0 view .LVU4730
 18277 0000 0E4B     		ldr	r3, .L1294
 18278 0002 1B68     		ldr	r3, [r3]
 18279 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2564:src/xeq.c     **** 		return;
 18280              		.loc 1 2564 5 view .LVU4731
 18281 0008 DB07     		lsls	r3, r3, #31
 18282 000a 00D5     		bpl	.L1293
ARM GAS  /tmp/ccBFDvgN.s 			page 499


 18283 000c 7047     		bx	lr
 18284              	.L1293:
2561:src/xeq.c     **** 	decNumber x, r;
 18285              		.loc 1 2561 46 view .LVU4732
 18286 000e 10B5     		push	{r4, lr}
 18287              		.cfi_def_cfa_offset 8
 18288              		.cfi_offset 4, -8
 18289              		.cfi_offset 14, -4
 18290 0010 92B0     		sub	sp, sp, #72
 18291              		.cfi_def_cfa_offset 80
 18292 0012 0446     		mov	r4, r0
2567:src/xeq.c     **** 	do_conv(&r, arg, &x);
 18293              		.loc 1 2567 2 is_stmt 1 view .LVU4733
 18294              	.LVL1338:
 18295              	.LBB2927:
 18296              	.LBI2927:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18297              		.loc 1 824 12 view .LVU4734
 18298              	.LBB2928:
 825:src/xeq.c     **** }
 18299              		.loc 1 825 2 view .LVU4735
 825:src/xeq.c     **** }
 18300              		.loc 1 825 9 is_stmt 0 view .LVU4736
 18301 0014 6421     		movs	r1, #100
 18302              	.LVL1339:
 825:src/xeq.c     **** }
 18303              		.loc 1 825 9 view .LVU4737
 18304 0016 6846     		mov	r0, sp
 18305              	.LVL1340:
 825:src/xeq.c     **** }
 18306              		.loc 1 825 9 view .LVU4738
 18307 0018 FFF7FEFF 		bl	getRegister
 18308              	.LVL1341:
 825:src/xeq.c     **** }
 18309              		.loc 1 825 9 view .LVU4739
 18310              	.LBE2928:
 18311              	.LBE2927:
2568:src/xeq.c     **** 	setlastX();
 18312              		.loc 1 2568 2 is_stmt 1 view .LVU4740
 18313 001c 6A46     		mov	r2, sp
 18314 001e 2146     		mov	r1, r4
 18315 0020 09A8     		add	r0, sp, #36
 18316 0022 FFF7FEFF 		bl	do_conv
 18317              	.LVL1342:
2569:src/xeq.c     **** 	setX(&r);
 18318              		.loc 1 2569 2 view .LVU4741
 18319              	.LBB2929:
 18320              	.LBI2929:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 18321              		.loc 1 792 6 view .LVU4742
 18322              	.LBB2930:
 793:src/xeq.c     **** }
 18323              		.loc 1 793 2 view .LVU4743
 18324 0026 6421     		movs	r1, #100
 18325 0028 6C20     		movs	r0, #108
 18326 002a FFF7FEFF 		bl	copyreg_n
 18327              	.LVL1343:
ARM GAS  /tmp/ccBFDvgN.s 			page 500


 18328              	.LBE2930:
 18329              	.LBE2929:
2570:src/xeq.c     **** }
 18330              		.loc 1 2570 2 view .LVU4744
 18331              	.LBB2931:
 18332              	.LBI2931:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 18333              		.loc 1 828 6 view .LVU4745
 18334              	.LBB2932:
 829:src/xeq.c     **** }
 18335              		.loc 1 829 2 view .LVU4746
 18336 002e 09A9     		add	r1, sp, #36
 18337              	.LVL1344:
 829:src/xeq.c     **** }
 18338              		.loc 1 829 2 is_stmt 0 view .LVU4747
 18339 0030 6420     		movs	r0, #100
 18340 0032 FFF7FEFF 		bl	setRegister
 18341              	.LVL1345:
 829:src/xeq.c     **** }
 18342              		.loc 1 829 2 view .LVU4748
 18343              	.LBE2932:
 18344              	.LBE2931:
2571:src/xeq.c     **** 
 18345              		.loc 1 2571 1 view .LVU4749
 18346 0036 12B0     		add	sp, sp, #72
 18347              		.cfi_def_cfa_offset 8
 18348              		@ sp needed
 18349 0038 10BD     		pop	{r4, pc}
 18350              	.LVL1346:
 18351              	.L1295:
2571:src/xeq.c     **** 
 18352              		.loc 1 2571 1 view .LVU4750
 18353 003a 00BF     		.align	2
 18354              	.L1294:
 18355 003c 00000000 		.word	main_ram
 18356              		.cfi_endproc
 18357              	.LFE181:
 18359              		.section	.text.fin_tst,"ax",%progbits
 18360              		.align	1
 18361              		.p2align 2,,3
 18362              		.global	fin_tst
 18363              		.syntax unified
 18364              		.thumb
 18365              		.thumb_func
 18366              		.fpu fpv4-sp-d16
 18368              	fin_tst:
 18369              	.LVL1347:
 18370              	.LFB182:
2576:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18371              		.loc 1 2576 27 is_stmt 1 view -0
 18372              		.cfi_startproc
 18373              		@ args = 0, pretend = 0, frame = 0
 18374              		@ frame_needed = 0, uses_anonymous_args = 0
 18375              		@ link register save eliminated.
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 18376              		.loc 1 2577 2 view .LVU4752
2577:src/xeq.c     **** 	if (Running || XromRunning) {
ARM GAS  /tmp/ccBFDvgN.s 			page 501


 18377              		.loc 1 2577 31 is_stmt 0 view .LVU4753
 18378 0000 30B1     		cbz	r0, .L1303
 18379              	.LVL1348:
2578:src/xeq.c     **** 		if (! a && incpc())
 18380              		.loc 1 2578 2 is_stmt 1 view .LVU4754
2578:src/xeq.c     **** 		if (! a && incpc())
 18381              		.loc 1 2578 14 is_stmt 0 view .LVU4755
 18382 0002 0A4A     		ldr	r2, .L1305
2578:src/xeq.c     **** 		if (! a && incpc())
 18383              		.loc 1 2578 6 view .LVU4756
 18384 0004 0A4B     		ldr	r3, .L1305+4
2578:src/xeq.c     **** 		if (! a && incpc())
 18385              		.loc 1 2578 14 view .LVU4757
 18386 0006 1268     		ldr	r2, [r2]
 18387 0008 1B68     		ldr	r3, [r3]
 18388 000a 1343     		orrs	r3, r2, r3
 18389 000c 0CD0     		beq	.L1304
2590:src/xeq.c     **** 
 18390              		.loc 1 2590 1 view .LVU4758
 18391 000e 7047     		bx	lr
 18392              	.LVL1349:
 18393              	.L1303:
2578:src/xeq.c     **** 		if (! a && incpc())
 18394              		.loc 1 2578 2 is_stmt 1 view .LVU4759
2578:src/xeq.c     **** 		if (! a && incpc())
 18395              		.loc 1 2578 14 is_stmt 0 view .LVU4760
 18396 0010 064A     		ldr	r2, .L1305
2578:src/xeq.c     **** 		if (! a && incpc())
 18397              		.loc 1 2578 6 view .LVU4761
 18398 0012 074B     		ldr	r3, .L1305+4
2578:src/xeq.c     **** 		if (! a && incpc())
 18399              		.loc 1 2578 14 view .LVU4762
 18400 0014 1268     		ldr	r2, [r2]
 18401 0016 1B68     		ldr	r3, [r3]
 18402 0018 1343     		orrs	r3, r2, r3
 18403 001a 03D1     		bne	.L1299
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 18404              		.loc 1 2577 31 view .LVU4763
 18405 001c 054B     		ldr	r3, .L1305+8
 18406              	.LVL1350:
 18407              	.L1300:
2583:src/xeq.c     **** #ifdef INFRARED
 18408              		.loc 1 2583 3 is_stmt 1 view .LVU4764
2583:src/xeq.c     **** #ifdef INFRARED
 18409              		.loc 1 2583 11 is_stmt 0 view .LVU4765
 18410 001e 064A     		ldr	r2, .L1305+12
 18411 0020 1360     		str	r3, [r2]
2590:src/xeq.c     **** 
 18412              		.loc 1 2590 1 view .LVU4766
 18413 0022 7047     		bx	lr
 18414              	.LVL1351:
 18415              	.L1299:
2590:src/xeq.c     **** 
 18416              		.loc 1 2590 1 view .LVU4767
 18417 0024 FFF7FEBF 		b	fin_tst.part.0
 18418              	.LVL1352:
 18419              	.L1304:
ARM GAS  /tmp/ccBFDvgN.s 			page 502


2577:src/xeq.c     **** 	if (Running || XromRunning) {
 18420              		.loc 1 2577 31 view .LVU4768
 18421 0028 044B     		ldr	r3, .L1305+16
 18422 002a F8E7     		b	.L1300
 18423              	.L1306:
 18424              		.align	2
 18425              	.L1305:
 18426 002c 00000000 		.word	XromRunning
 18427 0030 00000000 		.word	Running
 18428 0034 00000000 		.word	.LC3
 18429 0038 00000000 		.word	DispMsg
 18430 003c 00000000 		.word	.LC2
 18431              		.cfi_endproc
 18432              	.LFE182:
 18434              		.section	.text.check_mode,"ax",%progbits
 18435              		.align	1
 18436              		.p2align 2,,3
 18437              		.global	check_mode
 18438              		.syntax unified
 18439              		.thumb
 18440              		.thumb_func
 18441              		.fpu fpv4-sp-d16
 18443              	check_mode:
 18444              	.LVL1353:
 18445              	.LFB143:
2110:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
 18446              		.loc 1 2110 32 is_stmt 1 view -0
 18447              		.cfi_startproc
 18448              		@ args = 0, pretend = 0, frame = 0
 18449              		@ frame_needed = 0, uses_anonymous_args = 0
 18450              		@ link register save eliminated.
2111:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18451              		.loc 1 2111 2 view .LVU4770
2112:src/xeq.c     **** 
 18452              		.loc 1 2112 2 view .LVU4771
2111:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18453              		.loc 1 2111 35 is_stmt 0 view .LVU4772
 18454 0000 084B     		ldr	r3, .L1308
 18455              	.LVL1354:
2111:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18456              		.loc 1 2111 35 view .LVU4773
 18457 0002 1B68     		ldr	r3, [r3]
 18458              	.LVL1355:
2114:src/xeq.c     **** }
 18459              		.loc 1 2114 2 view .LVU4774
 18460 0004 A0F19F00 		sub	r0, #159
 18461              	.LVL1356:
2114:src/xeq.c     **** }
 18462              		.loc 1 2114 2 view .LVU4775
 18463 0008 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 18464              	.LVL1357:
2114:src/xeq.c     **** }
 18465              		.loc 1 2114 2 is_stmt 1 view .LVU4776
 18466 000c B0FA80F0 		clz	r0, r0
 18467 0010 4009     		lsrs	r0, r0, #5
 18468 0012 03F00103 		and	r3, r3, #1
 18469 0016 C01A     		subs	r0, r0, r3
ARM GAS  /tmp/ccBFDvgN.s 			page 503


 18470 0018 B0FA80F0 		clz	r0, r0
 18471 001c 4009     		lsrs	r0, r0, #5
 18472 001e FFF7FEBF 		b	fin_tst
 18473              	.LVL1358:
 18474              	.L1309:
2114:src/xeq.c     **** }
 18475              		.loc 1 2114 2 is_stmt 0 view .LVU4777
 18476 0022 00BF     		.align	2
 18477              	.L1308:
 18478 0024 00000000 		.word	main_ram
 18479              		.cfi_endproc
 18480              	.LFE143:
 18482              		.section	.text.check_dblmode,"ax",%progbits
 18483              		.align	1
 18484              		.p2align 2,,3
 18485              		.global	check_dblmode
 18486              		.syntax unified
 18487              		.thumb
 18488              		.thumb_func
 18489              		.fpu fpv4-sp-d16
 18491              	check_dblmode:
 18492              	.LVL1359:
 18493              	.LFB144:
2120:src/xeq.c     **** 	fin_tst(is_dblmode());
 18494              		.loc 1 2120 35 is_stmt 1 view -0
 18495              		.cfi_startproc
 18496              		@ args = 0, pretend = 0, frame = 0
 18497              		@ frame_needed = 0, uses_anonymous_args = 0
 18498              		@ link register save eliminated.
2121:src/xeq.c     **** }
 18499              		.loc 1 2121 2 view .LVU4779
 18500              	.LBB2933:
 18501              	.LBI2933:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 18502              		.loc 1 1118 5 view .LVU4780
 18503              	.LBB2934:
1119:src/xeq.c     **** }
 18504              		.loc 1 1119 2 view .LVU4781
1119:src/xeq.c     **** }
 18505              		.loc 1 1119 24 is_stmt 0 view .LVU4782
 18506 0000 064B     		ldr	r3, .L1311
 18507 0002 1B68     		ldr	r3, [r3]
 18508 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 18509 0008 44F20100 		movw	r0, #16385
 18510              	.LVL1360:
1119:src/xeq.c     **** }
 18511              		.loc 1 1119 24 view .LVU4783
 18512 000c 1840     		ands	r0, r0, r3
 18513              	.LBE2934:
 18514              	.LBE2933:
2121:src/xeq.c     **** }
 18515              		.loc 1 2121 2 view .LVU4784
 18516 000e A0F58040 		sub	r0, r0, #16384
 18517 0012 B0FA80F0 		clz	r0, r0
 18518 0016 4009     		lsrs	r0, r0, #5
 18519 0018 FFF7FEBF 		b	fin_tst
 18520              	.LVL1361:
ARM GAS  /tmp/ccBFDvgN.s 			page 504


 18521              	.L1312:
 18522              		.align	2
 18523              	.L1311:
 18524 001c 00000000 		.word	main_ram
 18525              		.cfi_endproc
 18526              	.LFE144:
 18528              		.section	.text.isTop,"ax",%progbits
 18529              		.align	1
 18530              		.p2align 2,,3
 18531              		.global	isTop
 18532              		.syntax unified
 18533              		.thumb
 18534              		.thumb_func
 18535              		.fpu fpv4-sp-d16
 18537              	isTop:
 18538              	.LVL1362:
 18539              	.LFB160:
2328:src/xeq.c     **** 	int top = 0;
 18540              		.loc 1 2328 27 is_stmt 1 view -0
 18541              		.cfi_startproc
 18542              		@ args = 0, pretend = 0, frame = 0
 18543              		@ frame_needed = 0, uses_anonymous_args = 0
 18544              		@ link register save eliminated.
2329:src/xeq.c     **** 
 18545              		.loc 1 2329 2 view .LVU4786
2331:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18546              		.loc 1 2331 2 view .LVU4787
2331:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18547              		.loc 1 2331 6 is_stmt 0 view .LVU4788
 18548 0000 0D4B     		ldr	r3, .L1321
 18549 0002 1868     		ldr	r0, [r3]
 18550              	.LVL1363:
2331:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18551              		.loc 1 2331 5 view .LVU4789
 18552 0004 68B1     		cbz	r0, .L1314
2332:src/xeq.c     **** 	}
 18553              		.loc 1 2332 3 is_stmt 1 view .LVU4790
2332:src/xeq.c     **** 	}
 18554              		.loc 1 2332 9 is_stmt 0 view .LVU4791
 18555 0006 0D4B     		ldr	r3, .L1321+4
 18556 0008 1B68     		ldr	r3, [r3]
 18557              	.LBB2935:
 18558              	.LBB2936:
 218:src/xeq.c     **** }
 18559              		.loc 1 218 9 view .LVU4792
 18560 000a B3F9DE27 		ldrsh	r2, [r3, #2014]
 18561              	.LBE2936:
 18562              	.LBE2935:
2332:src/xeq.c     **** 	}
 18563              		.loc 1 2332 9 view .LVU4793
 18564 000e B3F9E207 		ldrsh	r0, [r3, #2018]
 18565              	.LBB2939:
 18566              	.LBI2935:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 18567              		.loc 1 217 5 is_stmt 1 view .LVU4794
 18568              	.LBB2937:
 218:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 505


 18569              		.loc 1 218 2 view .LVU4795
 218:src/xeq.c     **** }
 18570              		.loc 1 218 57 is_stmt 0 view .LVU4796
 18571 0012 002A     		cmp	r2, #0
 18572 0014 07DB     		blt	.L1320
 18573 0016 4FF0FF33 		mov	r3, #-1
 18574              	.L1315:
 18575              	.LBE2937:
 18576              	.LBE2939:
2332:src/xeq.c     **** 	}
 18577              		.loc 1 2332 19 view .LVU4797
 18578 001a 9842     		cmp	r0, r3
 18579 001c B4BF     		ite	lt
 18580 001e 0020     		movlt	r0, #0
 18581 0020 0120     		movge	r0, #1
 18582              	.LVL1364:
 18583              	.L1314:
2334:src/xeq.c     **** }
 18584              		.loc 1 2334 2 is_stmt 1 view .LVU4798
 18585 0022 FFF7FEBF 		b	fin_tst
 18586              	.LVL1365:
 18587              	.L1320:
 18588              	.LBB2940:
 18589              	.LBB2938:
 218:src/xeq.c     **** }
 18590              		.loc 1 218 25 is_stmt 0 view .LVU4799
 18591 0026 064B     		ldr	r3, .L1321+8
 18592 0028 1B68     		ldr	r3, [r3]
 218:src/xeq.c     **** }
 18593              		.loc 1 218 57 view .LVU4800
 18594 002a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 18595 002e C3F30B03 		ubfx	r3, r3, #0, #12
 18596 0032 DB43     		mvns	r3, r3
 18597 0034 F1E7     		b	.L1315
 18598              	.L1322:
 18599 0036 00BF     		.align	2
 18600              	.L1321:
 18601 0038 00000000 		.word	Running
 18602 003c 00000000 		.word	main_ram
 18603 0040 00000000 		.word	RetStk
 18604              	.LBE2938:
 18605              	.LBE2940:
 18606              		.cfi_endproc
 18607              	.LFE160:
 18609              		.section	.text.cmdlblp,"ax",%progbits
 18610              		.align	1
 18611              		.p2align 2,,3
 18612              		.global	cmdlblp
 18613              		.syntax unified
 18614              		.thumb
 18615              		.thumb_func
 18616              		.fpu fpv4-sp-d16
 18618              	cmdlblp:
 18619              	.LVL1366:
 18620              	.LFB161:
2339:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18621              		.loc 1 2339 46 is_stmt 1 view -0
ARM GAS  /tmp/ccBFDvgN.s 			page 506


 18622              		.cfi_startproc
 18623              		@ args = 0, pretend = 0, frame = 0
 18624              		@ frame_needed = 0, uses_anonymous_args = 0
2340:src/xeq.c     **** }
 18625              		.loc 1 2340 2 view .LVU4802
2339:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18626              		.loc 1 2339 46 is_stmt 0 view .LVU4803
 18627 0000 08B5     		push	{r3, lr}
 18628              		.cfi_def_cfa_offset 8
 18629              		.cfi_offset 3, -8
 18630              		.cfi_offset 14, -4
2340:src/xeq.c     **** }
 18631              		.loc 1 2340 26 view .LVU4804
 18632 0002 084B     		ldr	r3, .L1325
 18633              	.LVL1367:
2340:src/xeq.c     **** }
 18634              		.loc 1 2340 26 view .LVU4805
 18635 0004 1B68     		ldr	r3, [r3]
 18636              	.LVL1368:
 18637              	.LBB2941:
 18638              	.LBI2941:
2214:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 18639              		.loc 1 2214 14 is_stmt 1 view .LVU4806
 18640              	.LBB2942:
2215:src/xeq.c     **** }
 18641              		.loc 1 2215 2 view .LVU4807
2215:src/xeq.c     **** }
 18642              		.loc 1 2215 9 is_stmt 0 view .LVU4808
 18643 0006 40F4C441 		orr	r1, r0, #25088
 18644              	.LVL1369:
2215:src/xeq.c     **** }
 18645              		.loc 1 2215 9 view .LVU4809
 18646 000a 0222     		movs	r2, #2
 18647 000c B3F8E007 		ldrh	r0, [r3, #2016]
 18648              	.LVL1370:
2215:src/xeq.c     **** }
 18649              		.loc 1 2215 9 view .LVU4810
 18650 0010 FFF7FEFF 		bl	find_opcode_from
 18651              	.LVL1371:
2215:src/xeq.c     **** }
 18652              		.loc 1 2215 9 view .LVU4811
 18653              	.LBE2942:
 18654              	.LBE2941:
2340:src/xeq.c     **** }
 18655              		.loc 1 2340 2 view .LVU4812
 18656 0014 0038     		subs	r0, r0, #0
2341:src/xeq.c     **** 
 18657              		.loc 1 2341 1 view .LVU4813
 18658 0016 BDE80840 		pop	{r3, lr}
 18659              		.cfi_restore 14
 18660              		.cfi_restore 3
 18661              		.cfi_def_cfa_offset 0
2340:src/xeq.c     **** }
 18662              		.loc 1 2340 2 view .LVU4814
 18663 001a 18BF     		it	ne
 18664 001c 0120     		movne	r0, #1
 18665 001e FFF7FEBF 		b	fin_tst
ARM GAS  /tmp/ccBFDvgN.s 			page 507


 18666              	.LVL1372:
 18667              	.L1326:
 18668 0022 00BF     		.align	2
 18669              	.L1325:
 18670 0024 00000000 		.word	main_ram
 18671              		.cfi_endproc
 18672              	.LFE161:
 18674              		.section	.text.cmdmultilblp,"ax",%progbits
 18675              		.align	1
 18676              		.p2align 2,,3
 18677              		.global	cmdmultilblp
 18678              		.syntax unified
 18679              		.thumb
 18680              		.thumb_func
 18681              		.fpu fpv4-sp-d16
 18683              	cmdmultilblp:
 18684              	.LVL1373:
 18685              	.LFB164:
2368:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18686              		.loc 1 2368 55 is_stmt 1 view -0
 18687              		.cfi_startproc
 18688              		@ args = 0, pretend = 0, frame = 0
 18689              		@ frame_needed = 0, uses_anonymous_args = 0
2369:src/xeq.c     **** }
 18690              		.loc 1 2369 2 view .LVU4816
2368:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18691              		.loc 1 2368 55 is_stmt 0 view .LVU4817
 18692 0000 08B5     		push	{r3, lr}
 18693              		.cfi_def_cfa_offset 8
 18694              		.cfi_offset 3, -8
 18695              		.cfi_offset 14, -4
2369:src/xeq.c     **** }
 18696              		.loc 1 2369 10 view .LVU4818
 18697 0002 0021     		movs	r1, #0
 18698              	.LVL1374:
2369:src/xeq.c     **** }
 18699              		.loc 1 2369 10 view .LVU4819
 18700 0004 FFF7FEFF 		bl	findmultilbl
 18701              	.LVL1375:
2369:src/xeq.c     **** }
 18702              		.loc 1 2369 2 view .LVU4820
 18703 0008 0038     		subs	r0, r0, #0
2370:src/xeq.c     **** 
 18704              		.loc 1 2370 1 view .LVU4821
 18705 000a BDE80840 		pop	{r3, lr}
 18706              		.cfi_restore 14
 18707              		.cfi_restore 3
 18708              		.cfi_def_cfa_offset 0
2369:src/xeq.c     **** }
 18709              		.loc 1 2369 2 view .LVU4822
 18710 000e 18BF     		it	ne
 18711 0010 0120     		movne	r0, #1
 18712 0012 FFF7FEBF 		b	fin_tst
 18713              	.LVL1376:
 18714              		.cfi_endproc
 18715              	.LFE164:
 18717 0016 00BF     		.section	.text.cmdkeyp,"ax",%progbits
ARM GAS  /tmp/ccBFDvgN.s 			page 508


 18718              		.align	1
 18719              		.p2align 2,,3
 18720              		.global	cmdkeyp
 18721              		.syntax unified
 18722              		.thumb
 18723              		.thumb_func
 18724              		.fpu fpv4-sp-d16
 18726              	cmdkeyp:
 18727              	.LVL1377:
 18728              	.LFB139:
2046:src/xeq.c     **** 	int cond = LastKey == 0;
 18729              		.loc 1 2046 46 is_stmt 1 view -0
 18730              		.cfi_startproc
 18731              		@ args = 0, pretend = 0, frame = 0
 18732              		@ frame_needed = 0, uses_anonymous_args = 0
2047:src/xeq.c     **** 	if (!cond) {
 18733              		.loc 1 2047 2 view .LVU4824
2046:src/xeq.c     **** 	int cond = LastKey == 0;
 18734              		.loc 1 2046 46 is_stmt 0 view .LVU4825
 18735 0000 70B5     		push	{r4, r5, r6, lr}
 18736              		.cfi_def_cfa_offset 16
 18737              		.cfi_offset 4, -16
 18738              		.cfi_offset 5, -12
 18739              		.cfi_offset 6, -8
 18740              		.cfi_offset 14, -4
2047:src/xeq.c     **** 	if (!cond) {
 18741              		.loc 1 2047 13 view .LVU4826
 18742 0002 104B     		ldr	r3, .L1336
 18743 0004 93F91320 		ldrsb	r2, [r3, #19]
2047:src/xeq.c     **** 	if (!cond) {
 18744              		.loc 1 2047 21 view .LVU4827
 18745 0008 002A     		cmp	r2, #0
2046:src/xeq.c     **** 	int cond = LastKey == 0;
 18746              		.loc 1 2046 46 view .LVU4828
 18747 000a 82B0     		sub	sp, sp, #8
 18748              		.cfi_def_cfa_offset 24
2047:src/xeq.c     **** 	if (!cond) {
 18749              		.loc 1 2047 21 view .LVU4829
 18750 000c 0CBF     		ite	eq
 18751 000e 0125     		moveq	r5, #1
 18752 0010 0025     		movne	r5, #0
 18753              	.LVL1378:
2048:src/xeq.c     **** 		int k = LastKey - 1;
 18754              		.loc 1 2048 2 is_stmt 1 view .LVU4830
2048:src/xeq.c     **** 		int k = LastKey - 1;
 18755              		.loc 1 2048 5 is_stmt 0 view .LVU4831
 18756 0012 05D1     		bne	.L1335
2053:src/xeq.c     **** }
 18757              		.loc 1 2053 2 is_stmt 1 view .LVU4832
 18758 0014 2846     		mov	r0, r5
 18759              	.LVL1379:
2054:src/xeq.c     **** 
 18760              		.loc 1 2054 1 is_stmt 0 view .LVU4833
 18761 0016 02B0     		add	sp, sp, #8
 18762              		.cfi_remember_state
 18763              		.cfi_def_cfa_offset 16
 18764              		@ sp needed
ARM GAS  /tmp/ccBFDvgN.s 			page 509


 18765 0018 BDE87040 		pop	{r4, r5, r6, lr}
 18766              		.cfi_restore 14
 18767              		.cfi_restore 6
 18768              		.cfi_restore 5
 18769              		.cfi_restore 4
 18770              		.cfi_def_cfa_offset 0
 18771              	.LVL1380:
2053:src/xeq.c     **** }
 18772              		.loc 1 2053 2 view .LVU4834
 18773 001c FFF7FEBF 		b	fin_tst
 18774              	.LVL1381:
 18775              	.L1335:
 18776              		.cfi_restore_state
 18777              	.LBB2943:
2049:src/xeq.c     **** 		LastKey = 0;
 18778              		.loc 1 2049 3 is_stmt 1 view .LVU4835
2050:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18779              		.loc 1 2050 3 view .LVU4836
 18780 0020 0446     		mov	r4, r0
2050:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18781              		.loc 1 2050 11 is_stmt 0 view .LVU4837
 18782 0022 0026     		movs	r6, #0
2051:src/xeq.c     **** 	}
 18783              		.loc 1 2051 26 view .LVU4838
 18784 0024 501E     		subs	r0, r2, #1
 18785              	.LVL1382:
2050:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18786              		.loc 1 2050 11 view .LVU4839
 18787 0026 DE74     		strb	r6, [r3, #19]
2051:src/xeq.c     **** 	}
 18788              		.loc 1 2051 3 is_stmt 1 view .LVU4840
2051:src/xeq.c     **** 	}
 18789              		.loc 1 2051 26 is_stmt 0 view .LVU4841
 18790 0028 FFF7FEFF 		bl	keycode_to_row_column
 18791              	.LVL1383:
2051:src/xeq.c     **** 	}
 18792              		.loc 1 2051 26 view .LVU4842
 18793 002c 0246     		mov	r2, r0
2051:src/xeq.c     **** 	}
 18794              		.loc 1 2051 3 view .LVU4843
 18795 002e 0096     		str	r6, [sp]
 18796 0030 2046     		mov	r0, r4
 18797 0032 D317     		asrs	r3, r2, #31
 18798 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 18799              	.LVL1384:
 18800              	.LBE2943:
2053:src/xeq.c     **** }
 18801              		.loc 1 2053 2 is_stmt 1 view .LVU4844
 18802 0038 2846     		mov	r0, r5
2054:src/xeq.c     **** 
 18803              		.loc 1 2054 1 is_stmt 0 view .LVU4845
 18804 003a 02B0     		add	sp, sp, #8
 18805              		.cfi_def_cfa_offset 16
 18806              		@ sp needed
 18807 003c BDE87040 		pop	{r4, r5, r6, lr}
 18808              		.cfi_restore 14
 18809              		.cfi_restore 6
ARM GAS  /tmp/ccBFDvgN.s 			page 510


 18810              		.cfi_restore 5
 18811              		.cfi_restore 4
 18812              		.cfi_def_cfa_offset 0
 18813              	.LVL1385:
2053:src/xeq.c     **** }
 18814              		.loc 1 2053 2 view .LVU4846
 18815 0040 FFF7FEBF 		b	fin_tst
 18816              	.LVL1386:
 18817              	.L1337:
2053:src/xeq.c     **** }
 18818              		.loc 1 2053 2 view .LVU4847
 18819              		.align	2
 18820              	.L1336:
 18821 0044 00000000 		.word	StateWhileOn
 18822              		.cfi_endproc
 18823              	.LFE139:
 18825              		.section	.text.do_tst,"ax",%progbits
 18826              		.align	1
 18827              		.p2align 2,,3
 18828              		.syntax unified
 18829              		.thumb
 18830              		.thumb_func
 18831              		.fpu fpv4-sp-d16
 18833              	do_tst:
 18834              	.LVL1387:
 18835              	.LFB188:
3291:src/xeq.c     **** 	int a = 0;
 18836              		.loc 1 3291 51 is_stmt 1 view -0
 18837              		.cfi_startproc
 18838              		@ args = 0, pretend = 0, frame = 112
 18839              		@ frame_needed = 0, uses_anonymous_args = 0
3292:src/xeq.c     **** 	int iszero, isneg;
 18840              		.loc 1 3292 2 view .LVU4849
3293:src/xeq.c     **** 
 18841              		.loc 1 3293 2 view .LVU4850
3295:src/xeq.c     **** 
 18842              		.loc 1 3295 2 view .LVU4851
 18843              	.LBB2944:
 18844              	.LBI2944:
1332:src/xeq.c     **** 	process_cmdline();
 18845              		.loc 1 1332 6 view .LVU4852
 18846              	.LBE2944:
1333:src/xeq.c     **** 	set_lift();
 18847              		.loc 1 1333 2 view .LVU4853
 18848              	.LBB2959:
 18849              	.LBB2945:
 18850              	.LBI2945:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 18851              		.loc 1 1226 6 view .LVU4854
 18852              	.LBB2946:
1227:src/xeq.c     **** 
 18853              		.loc 1 1227 2 view .LVU4855
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18854              		.loc 1 1229 2 view .LVU4856
 18855              	.LBE2946:
 18856              	.LBE2945:
 18857              	.LBE2959:
ARM GAS  /tmp/ccBFDvgN.s 			page 511


3291:src/xeq.c     **** 	int a = 0;
 18858              		.loc 1 3291 51 is_stmt 0 view .LVU4857
 18859 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 18860              		.cfi_def_cfa_offset 28
 18861              		.cfi_offset 4, -28
 18862              		.cfi_offset 5, -24
 18863              		.cfi_offset 6, -20
 18864              		.cfi_offset 7, -16
 18865              		.cfi_offset 8, -12
 18866              		.cfi_offset 9, -8
 18867              		.cfi_offset 14, -4
 18868              	.LBB2960:
 18869              	.LBB2950:
 18870              	.LBB2947:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18871              		.loc 1 1229 6 view .LVU4858
 18872 0004 584D     		ldr	r5, .L1373
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18873              		.loc 1 1229 5 view .LVU4859
 18874 0006 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 18875              	.LBE2947:
 18876              	.LBE2950:
 18877              	.LBE2960:
3291:src/xeq.c     **** 	int a = 0;
 18878              		.loc 1 3291 51 view .LVU4860
 18879 0008 9DB0     		sub	sp, sp, #116
 18880              		.cfi_def_cfa_offset 144
3291:src/xeq.c     **** 	int a = 0;
 18881              		.loc 1 3291 51 view .LVU4861
 18882 000a 8046     		mov	r8, r0
 18883 000c 0C46     		mov	r4, r1
 18884              	.LBB2961:
 18885              	.LBB2951:
 18886              	.LBB2948:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18887              		.loc 1 1229 5 view .LVU4862
 18888 000e 002B     		cmp	r3, #0
 18889 0010 5DD1     		bne	.L1371
 18890              	.LVL1388:
 18891              	.L1339:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18892              		.loc 1 1229 5 view .LVU4863
 18893              	.LBE2948:
 18894              	.LBE2951:
 18895              	.LBE2961:
1334:src/xeq.c     **** }
 18896              		.loc 1 1334 2 is_stmt 1 view .LVU4864
 18897              	.LBB2962:
 18898              	.LBB2952:
 18899              	.LBI2952:
 767:src/xeq.c     ****     State2.state_lift = 1;
 18900              		.loc 1 767 6 view .LVU4865
 18901              	.LBB2953:
 768:src/xeq.c     **** }
 18902              		.loc 1 768 5 view .LVU4866
 768:src/xeq.c     **** }
 18903              		.loc 1 768 23 is_stmt 0 view .LVU4867
ARM GAS  /tmp/ccBFDvgN.s 			page 512


 18904 0012 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 18905              	.LBE2953:
 18906              	.LBE2952:
 18907              	.LBE2962:
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18908              		.loc 1 3297 6 view .LVU4868
 18909 0014 554A     		ldr	r2, .L1373+4
 18910              	.LBB2963:
 18911              	.LBB2956:
 18912              	.LBB2954:
 768:src/xeq.c     **** }
 18913              		.loc 1 768 23 view .LVU4869
 18914 0016 43F04003 		orr	r3, r3, #64
 18915              	.LBE2954:
 18916              	.LBE2956:
 18917              	.LBE2963:
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18918              		.loc 1 3297 6 view .LVU4870
 18919 001a 1268     		ldr	r2, [r2]
 18920              	.LBB2964:
 18921              	.LBB2957:
 18922              	.LBB2955:
 768:src/xeq.c     **** }
 18923              		.loc 1 768 23 view .LVU4871
 18924 001c EB75     		strb	r3, [r5, #23]
 18925              	.LBE2955:
 18926              	.LBE2957:
 18927              	.LBE2964:
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18928              		.loc 1 3297 2 is_stmt 1 view .LVU4872
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18929              		.loc 1 3297 6 is_stmt 0 view .LVU4873
 18930 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18931              		.loc 1 3297 5 view .LVU4874
 18932 0022 DB07     		lsls	r3, r3, #31
 18933 0024 2CD5     		bpl	.L1340
 18934              	.LBB2965:
3298:src/xeq.c     **** 		int xs, ys;
 18935              		.loc 1 3298 3 is_stmt 1 view .LVU4875
3299:src/xeq.c     **** 
 18936              		.loc 1 3299 3 view .LVU4876
3301:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18937              		.loc 1 3301 3 view .LVU4877
 18938              	.LBB2966:
 18939              	.LBI2966:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 18940              		.loc 1 1442 15 view .LVU4878
 18941              	.LBB2967:
1443:src/xeq.c     **** }
 18942              		.loc 1 1443 2 view .LVU4879
1443:src/xeq.c     **** }
 18943              		.loc 1 1443 9 is_stmt 0 view .LVU4880
 18944 0026 6420     		movs	r0, #100
 18945 0028 FFF7FEFF 		bl	get_reg_n_int
 18946              	.LVL1389:
 18947              	.LBE2967:
ARM GAS  /tmp/ccBFDvgN.s 			page 513


 18948              	.LBE2966:
3301:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18949              		.loc 1 3301 8 view .LVU4881
 18950 002c 0AAA     		add	r2, sp, #40
 18951 002e FFF7FEFF 		bl	extract_value
 18952              	.LVL1390:
3302:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18953              		.loc 1 3302 6 view .LVU4882
 18954 0032 B8F5FA6F 		cmp	r8, #2000
3301:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18955              		.loc 1 3301 8 view .LVU4883
 18956 0036 0646     		mov	r6, r0
 18957 0038 0F46     		mov	r7, r1
 18958              	.LVL1391:
3302:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18959              		.loc 1 3302 3 is_stmt 1 view .LVU4884
3302:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18960              		.loc 1 3302 6 is_stmt 0 view .LVU4885
 18961 003a 54DB     		blt	.L1341
3303:src/xeq.c     **** 			ys = 0;
 18962              		.loc 1 3303 4 is_stmt 1 view .LVU4886
3303:src/xeq.c     **** 			ys = 0;
 18963              		.loc 1 3303 30 is_stmt 0 view .LVU4887
 18964 003c A8F61B08 		subw	r8, r8, #2075
 18965              	.LVL1392:
3303:src/xeq.c     **** 			ys = 0;
 18966              		.loc 1 3303 7 view .LVU4888
 18967 0040 4FEAE879 		asr	r9, r8, #31
 18968              	.LVL1393:
3304:src/xeq.c     **** 		} else
 18969              		.loc 1 3304 4 is_stmt 1 view .LVU4889
 18970 0044 0022     		movs	r2, #0
 18971              	.LVL1394:
 18972              	.L1342:
3308:src/xeq.c     **** 			iszero = 1;
 18973              		.loc 1 3308 3 view .LVU4890
3308:src/xeq.c     **** 			iszero = 1;
 18974              		.loc 1 3308 6 is_stmt 0 view .LVU4891
 18975 0046 56EA0703 		orrs	r3, r6, r7
 18976 004a 43D1     		bne	.L1343
3308:src/xeq.c     **** 			iszero = 1;
 18977              		.loc 1 3308 15 discriminator 1 view .LVU4892
 18978 004c 58EA0903 		orrs	r3, r8, r9
 18979 0050 53D0     		beq	.L1344
 18980              	.L1346:
 18981 0052 0A9B     		ldr	r3, [sp, #40]
3313:src/xeq.c     **** 			if (xs)		// both negative
 18982              		.loc 1 3313 6 view .LVU4893
 18983 0054 9A42     		cmp	r2, r3
3311:src/xeq.c     **** 
 18984              		.loc 1 3311 24 view .LVU4894
 18985 0056 4FF00000 		mov	r0, #0
 18986              	.LVL1395:
3313:src/xeq.c     **** 			if (xs)		// both negative
 18987              		.loc 1 3313 3 is_stmt 1 view .LVU4895
3313:src/xeq.c     **** 			if (xs)		// both negative
 18988              		.loc 1 3313 6 is_stmt 0 view .LVU4896
ARM GAS  /tmp/ccBFDvgN.s 			page 514


 18989 005a 53D0     		beq	.L1347
 18990              	.LVL1396:
 18991              	.L1350:
3313:src/xeq.c     **** 			if (xs)		// both negative
 18992              		.loc 1 3313 6 view .LVU4897
 18993              	.LBE2965:
3341:src/xeq.c     **** 	case TST_APX:
 18994              		.loc 1 3341 2 is_stmt 1 view .LVU4898
 18995 005c 062C     		cmp	r4, #6
 18996 005e 30D8     		bhi	.L1356
 18997 0060 DFE804F0 		tbb	[pc, r4]
 18998              	.L1358:
 18999 0064 09       		.byte	(.L1355-.L1358)/2
 19000 0065 58       		.byte	(.L1370-.L1358)/2
 19001 0066 09       		.byte	(.L1355-.L1358)/2
 19002 0067 2E       		.byte	(.L1361-.L1358)/2
 19003 0068 67       		.byte	(.L1360-.L1358)/2
 19004 0069 6C       		.byte	(.L1359-.L1358)/2
 19005 006a 04       		.byte	(.L1357-.L1358)/2
 19006 006b 00       		.p2align 1
 19007              	.L1357:
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19008              		.loc 1 3348 15 view .LVU4899
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19009              		.loc 1 3348 26 is_stmt 0 view .LVU4900
 19010 006c 002B     		cmp	r3, #0
 19011 006e 6AD0     		beq	.L1365
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19012              		.loc 1 3348 26 discriminator 2 view .LVU4901
 19013 0070 0038     		subs	r0, r0, #0
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19014              		.loc 1 3348 26 discriminator 2 view .LVU4902
 19015 0072 18BF     		it	ne
 19016 0074 0120     		movne	r0, #1
 19017              	.LVL1397:
 19018              	.L1355:
3352:src/xeq.c     **** }
 19019              		.loc 1 3352 7 is_stmt 1 view .LVU4903
 19020 0076 FFF7FEFF 		bl	fin_tst
 19021              	.LVL1398:
3353:src/xeq.c     **** 
 19022              		.loc 1 3353 1 is_stmt 0 view .LVU4904
 19023 007a 1DB0     		add	sp, sp, #116
 19024              		.cfi_remember_state
 19025              		.cfi_def_cfa_offset 28
 19026              		@ sp needed
 19027 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19028              	.LVL1399:
 19029              	.L1340:
 19030              		.cfi_restore_state
 19031              	.LBB2968:
3321:src/xeq.c     **** 
 19032              		.loc 1 3321 3 is_stmt 1 view .LVU4905
3323:src/xeq.c     **** 		if (decNumberIsNaN(&x))
 19033              		.loc 1 3323 3 view .LVU4906
 19034              	.LBB2969:
 19035              	.LBI2969:
ARM GAS  /tmp/ccBFDvgN.s 			page 515


 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19036              		.loc 1 824 12 view .LVU4907
 19037              	.LBB2970:
 825:src/xeq.c     **** }
 19038              		.loc 1 825 2 view .LVU4908
 825:src/xeq.c     **** }
 19039              		.loc 1 825 9 is_stmt 0 view .LVU4909
 19040 0080 0AA8     		add	r0, sp, #40
 19041              	.LVL1400:
 825:src/xeq.c     **** }
 19042              		.loc 1 825 9 view .LVU4910
 19043 0082 6421     		movs	r1, #100
 19044 0084 FFF7FEFF 		bl	getRegister
 19045              	.LVL1401:
 825:src/xeq.c     **** }
 19046              		.loc 1 825 9 view .LVU4911
 19047              	.LBE2970:
 19048              	.LBE2969:
3324:src/xeq.c     **** 			goto flse;
 19049              		.loc 1 3324 3 is_stmt 1 view .LVU4912
3324:src/xeq.c     **** 			goto flse;
 19050              		.loc 1 3324 6 is_stmt 0 view .LVU4913
 19051 0088 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 19052 008c 13F0300F 		tst	r3, #48
 19053 0090 17D1     		bne	.L1356
3327:src/xeq.c     **** 		if (decNumberIsNaN(&t))
 19054              		.loc 1 3327 3 is_stmt 1 view .LVU4914
 19055 0092 01A8     		add	r0, sp, #4
 19056 0094 4146     		mov	r1, r8
 19057 0096 FFF7FEFF 		bl	getRegister
 19058              	.LVL1402:
3328:src/xeq.c     **** 			goto flse;
 19059              		.loc 1 3328 3 view .LVU4915
3328:src/xeq.c     **** 			goto flse;
 19060              		.loc 1 3328 6 is_stmt 0 view .LVU4916
 19061 009a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 19062 009e 13F0300F 		tst	r3, #48
 19063 00a2 0ED1     		bne	.L1356
3331:src/xeq.c     **** 			decNumberRnd(&x, &x);
 19064              		.loc 1 3331 3 is_stmt 1 view .LVU4917
3331:src/xeq.c     **** 			decNumberRnd(&x, &x);
 19065              		.loc 1 3331 6 is_stmt 0 view .LVU4918
 19066 00a4 022C     		cmp	r4, #2
 19067 00a6 53D0     		beq	.L1372
 19068              	.L1353:
3336:src/xeq.c     **** 		iszero = dn_eq0(&r);
 19069              		.loc 1 3336 3 is_stmt 1 view .LVU4919
 19070 00a8 01AA     		add	r2, sp, #4
 19071 00aa 0AA9     		add	r1, sp, #40
 19072 00ac 13A8     		add	r0, sp, #76
 19073 00ae FFF7FEFF 		bl	dn_compare
 19074              	.LVL1403:
3337:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 19075              		.loc 1 3337 3 view .LVU4920
3337:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 19076              		.loc 1 3337 12 is_stmt 0 view .LVU4921
 19077 00b2 13A8     		add	r0, sp, #76
ARM GAS  /tmp/ccBFDvgN.s 			page 516


 19078 00b4 FFF7FEFF 		bl	dn_eq0
 19079              	.LVL1404:
3338:src/xeq.c     **** 	}
 19080              		.loc 1 3338 11 view .LVU4922
 19081 00b8 9DF95430 		ldrsb	r3, [sp, #84]
 19082              	.LVL1405:
3338:src/xeq.c     **** 	}
 19083              		.loc 1 3338 3 is_stmt 1 view .LVU4923
3338:src/xeq.c     **** 	}
 19084              		.loc 1 3338 11 is_stmt 0 view .LVU4924
 19085 00bc DB0F     		lsrs	r3, r3, #31
 19086              	.LVL1406:
3338:src/xeq.c     **** 	}
 19087              		.loc 1 3338 11 view .LVU4925
 19088 00be CDE7     		b	.L1350
 19089              	.LVL1407:
 19090              	.L1361:
3338:src/xeq.c     **** 	}
 19091              		.loc 1 3338 11 view .LVU4926
 19092              	.LBE2968:
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19093              		.loc 1 3345 15 is_stmt 1 view .LVU4927
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19094              		.loc 1 3345 25 is_stmt 0 view .LVU4928
 19095 00c0 43BB     		cbnz	r3, .L1370
 19096              	.LVL1408:
 19097              	.L1356:
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19098              		.loc 1 3345 25 view .LVU4929
 19099 00c2 0020     		movs	r0, #0
 19100              	.LVL1409:
3352:src/xeq.c     **** }
 19101              		.loc 1 3352 7 is_stmt 1 view .LVU4930
 19102 00c4 FFF7FEFF 		bl	fin_tst
 19103              	.LVL1410:
3353:src/xeq.c     **** 
 19104              		.loc 1 3353 1 is_stmt 0 view .LVU4931
 19105 00c8 1DB0     		add	sp, sp, #116
 19106              		.cfi_remember_state
 19107              		.cfi_def_cfa_offset 28
 19108              		@ sp needed
 19109 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19110              	.LVL1411:
 19111              	.L1371:
 19112              		.cfi_restore_state
 19113              	.LBB2971:
 19114              	.LBB2958:
 19115              	.LBB2949:
3353:src/xeq.c     **** 
 19116              		.loc 1 3353 1 view .LVU4932
 19117 00ce FFF7FEFF 		bl	process_cmdline.part.0
 19118              	.LVL1412:
3353:src/xeq.c     **** 
 19119              		.loc 1 3353 1 view .LVU4933
 19120 00d2 9EE7     		b	.L1339
 19121              	.LVL1413:
 19122              	.L1343:
ARM GAS  /tmp/ccBFDvgN.s 			page 517


3353:src/xeq.c     **** 
 19123              		.loc 1 3353 1 view .LVU4934
 19124              	.LBE2949:
 19125              	.LBE2958:
 19126              	.LBE2971:
 19127              	.LBB2972:
3311:src/xeq.c     **** 
 19128              		.loc 1 3311 4 is_stmt 1 view .LVU4935
3311:src/xeq.c     **** 
 19129              		.loc 1 3311 24 is_stmt 0 view .LVU4936
 19130 00d4 B945     		cmp	r9, r7
 19131 00d6 08BF     		it	eq
 19132 00d8 B045     		cmpeq	r8, r6
 19133 00da BAD1     		bne	.L1346
3311:src/xeq.c     **** 
 19134              		.loc 1 3311 31 discriminator 1 view .LVU4937
 19135 00dc 0A9B     		ldr	r3, [sp, #40]
3311:src/xeq.c     **** 
 19136              		.loc 1 3311 24 discriminator 1 view .LVU4938
 19137 00de 9342     		cmp	r3, r2
 19138 00e0 33D0     		beq	.L1363
3311:src/xeq.c     **** 
 19139              		.loc 1 3311 24 view .LVU4939
 19140 00e2 0020     		movs	r0, #0
 19141 00e4 BAE7     		b	.L1350
 19142              	.LVL1414:
 19143              	.L1341:
3306:src/xeq.c     **** 
 19144              		.loc 1 3306 4 is_stmt 1 view .LVU4940
3306:src/xeq.c     **** 
 19145              		.loc 1 3306 9 is_stmt 0 view .LVU4941
 19146 00e6 4046     		mov	r0, r8
 19147 00e8 FFF7FEFF 		bl	get_reg_n_int
 19148              	.LVL1415:
 19149 00ec 13AA     		add	r2, sp, #76
 19150 00ee FFF7FEFF 		bl	extract_value
 19151              	.LVL1416:
 19152 00f2 139A     		ldr	r2, [sp, #76]
 19153 00f4 8046     		mov	r8, r0
 19154              	.LVL1417:
3306:src/xeq.c     **** 
 19155              		.loc 1 3306 9 view .LVU4942
 19156 00f6 8946     		mov	r9, r1
 19157              	.LVL1418:
3306:src/xeq.c     **** 
 19158              		.loc 1 3306 9 view .LVU4943
 19159 00f8 A5E7     		b	.L1342
 19160              	.L1344:
3306:src/xeq.c     **** 
 19161              		.loc 1 3306 9 view .LVU4944
 19162 00fa 0A9B     		ldr	r3, [sp, #40]
3313:src/xeq.c     **** 			if (xs)		// both negative
 19163              		.loc 1 3313 6 view .LVU4945
 19164 00fc 9A42     		cmp	r2, r3
3309:src/xeq.c     **** 		else
 19165              		.loc 1 3309 11 view .LVU4946
 19166 00fe 4FF00100 		mov	r0, #1
ARM GAS  /tmp/ccBFDvgN.s 			page 518


 19167              	.LVL1419:
3313:src/xeq.c     **** 			if (xs)		// both negative
 19168              		.loc 1 3313 3 is_stmt 1 view .LVU4947
3313:src/xeq.c     **** 			if (xs)		// both negative
 19169              		.loc 1 3313 6 is_stmt 0 view .LVU4948
 19170 0102 ABD1     		bne	.L1350
 19171              	.LVL1420:
 19172              	.L1347:
3314:src/xeq.c     **** 				isneg = xv > yv;
 19173              		.loc 1 3314 4 is_stmt 1 view .LVU4949
3314:src/xeq.c     **** 				isneg = xv > yv;
 19174              		.loc 1 3314 7 is_stmt 0 view .LVU4950
 19175 0104 73B1     		cbz	r3, .L1349
3315:src/xeq.c     **** 			else		// both positive
 19176              		.loc 1 3315 5 is_stmt 1 view .LVU4951
3315:src/xeq.c     **** 			else		// both positive
 19177              		.loc 1 3315 16 is_stmt 0 view .LVU4952
 19178 0106 B945     		cmp	r9, r7
 19179 0108 08BF     		it	eq
 19180 010a B045     		cmpeq	r8, r6
 19181 010c 34BF     		ite	cc
 19182 010e 0123     		movcc	r3, #1
 19183 0110 0023     		movcs	r3, #0
 19184              	.LVL1421:
3315:src/xeq.c     **** 			else		// both positive
 19185              		.loc 1 3315 16 view .LVU4953
 19186 0112 A3E7     		b	.L1350
 19187              	.LVL1422:
 19188              	.L1370:
3315:src/xeq.c     **** 			else		// both positive
 19189              		.loc 1 3315 16 view .LVU4954
 19190              	.LBE2972:
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19191              		.loc 1 3345 25 discriminator 1 view .LVU4955
 19192 0114 B0FA80F0 		clz	r0, r0
 19193              	.LVL1423:
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19194              		.loc 1 3345 25 discriminator 1 view .LVU4956
 19195 0118 4009     		lsrs	r0, r0, #5
 19196              	.LVL1424:
3352:src/xeq.c     **** }
 19197              		.loc 1 3352 7 is_stmt 1 discriminator 1 view .LVU4957
 19198 011a FFF7FEFF 		bl	fin_tst
 19199              	.LVL1425:
3353:src/xeq.c     **** 
 19200              		.loc 1 3353 1 is_stmt 0 discriminator 1 view .LVU4958
 19201 011e 1DB0     		add	sp, sp, #116
 19202              		.cfi_remember_state
 19203              		.cfi_def_cfa_offset 28
 19204              		@ sp needed
 19205 0120 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19206              	.LVL1426:
 19207              	.L1349:
 19208              		.cfi_restore_state
 19209              	.LBB2973:
3317:src/xeq.c     **** 		} else
 19210              		.loc 1 3317 5 is_stmt 1 view .LVU4959
ARM GAS  /tmp/ccBFDvgN.s 			page 519


3317:src/xeq.c     **** 		} else
 19211              		.loc 1 3317 16 is_stmt 0 view .LVU4960
 19212 0124 4F45     		cmp	r7, r9
 19213 0126 08BF     		it	eq
 19214 0128 4645     		cmpeq	r6, r8
 19215 012a 34BF     		ite	cc
 19216 012c 0123     		movcc	r3, #1
 19217 012e 0023     		movcs	r3, #0
 19218              	.LVL1427:
3317:src/xeq.c     **** 		} else
 19219              		.loc 1 3317 16 view .LVU4961
 19220 0130 94E7     		b	.L1350
 19221              	.LVL1428:
 19222              	.L1360:
3317:src/xeq.c     **** 		} else
 19223              		.loc 1 3317 16 view .LVU4962
 19224              	.LBE2973:
3346:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19225              		.loc 1 3346 15 is_stmt 1 discriminator 2 view .LVU4963
3346:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19226              		.loc 1 3346 25 is_stmt 0 discriminator 2 view .LVU4964
 19227 0132 0343     		orrs	r3, r0, r3
 19228              	.LVL1429:
3346:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19229              		.loc 1 3346 25 discriminator 2 view .LVU4965
 19230 0134 14BF     		ite	ne
 19231 0136 0120     		movne	r0, #1
 19232              	.LVL1430:
3346:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19233              		.loc 1 3346 25 discriminator 2 view .LVU4966
 19234 0138 0020     		moveq	r0, #0
 19235 013a 9CE7     		b	.L1355
 19236              	.LVL1431:
 19237              	.L1359:
3347:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19238              		.loc 1 3347 15 is_stmt 1 discriminator 1 view .LVU4967
3347:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19239              		.loc 1 3347 26 is_stmt 0 discriminator 1 view .LVU4968
 19240 013c 0343     		orrs	r3, r0, r3
 19241              	.LVL1432:
3347:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19242              		.loc 1 3347 26 discriminator 1 view .LVU4969
 19243 013e 0CBF     		ite	eq
 19244 0140 0120     		moveq	r0, #1
 19245              	.LVL1433:
3347:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19246              		.loc 1 3347 26 discriminator 1 view .LVU4970
 19247 0142 0020     		movne	r0, #0
 19248 0144 97E7     		b	.L1355
 19249              	.LVL1434:
 19250              	.L1365:
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19251              		.loc 1 3348 26 view .LVU4971
 19252 0146 0120     		movs	r0, #1
 19253              	.LVL1435:
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19254              		.loc 1 3348 26 view .LVU4972
ARM GAS  /tmp/ccBFDvgN.s 			page 520


 19255 0148 95E7     		b	.L1355
 19256              	.LVL1436:
 19257              	.L1363:
 19258              	.LBB2974:
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19259              		.loc 1 3348 26 view .LVU4973
 19260 014a 1346     		mov	r3, r2
3311:src/xeq.c     **** 
 19261              		.loc 1 3311 24 view .LVU4974
 19262 014c 0120     		movs	r0, #1
 19263 014e D9E7     		b	.L1347
 19264              	.LVL1437:
 19265              	.L1372:
3311:src/xeq.c     **** 
 19266              		.loc 1 3311 24 view .LVU4975
 19267              	.LBE2974:
 19268              	.LBB2975:
3332:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
 19269              		.loc 1 3332 4 is_stmt 1 view .LVU4976
 19270 0150 0AA9     		add	r1, sp, #40
 19271 0152 0846     		mov	r0, r1
 19272 0154 FFF7FEFF 		bl	decNumberRnd
 19273              	.LVL1438:
3333:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19274              		.loc 1 3333 4 view .LVU4977
3333:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19275              		.loc 1 3333 7 is_stmt 0 view .LVU4978
 19276 0158 B8F5FA6F 		cmp	r8, #2000
 19277 015c A4DA     		bge	.L1353
3334:src/xeq.c     **** 		}
 19278              		.loc 1 3334 5 is_stmt 1 view .LVU4979
 19279 015e 01A9     		add	r1, sp, #4
 19280 0160 0846     		mov	r0, r1
 19281 0162 FFF7FEFF 		bl	decNumberRnd
 19282              	.LVL1439:
 19283 0166 9FE7     		b	.L1353
 19284              	.L1374:
 19285              		.align	2
 19286              	.L1373:
 19287 0168 00000000 		.word	StateWhileOn
 19288 016c 00000000 		.word	main_ram
 19289              	.LBE2975:
 19290              		.cfi_endproc
 19291              	.LFE188:
 19293              		.section	.text.do_ztst,"ax",%progbits
 19294              		.align	1
 19295              		.p2align 2,,3
 19296              		.syntax unified
 19297              		.thumb
 19298              		.thumb_func
 19299              		.fpu fpv4-sp-d16
 19301              	do_ztst:
 19302              	.LVL1440:
 19303              	.LFB191:
3378:src/xeq.c     **** 	decNumber x, y;
 19304              		.loc 1 3378 79 view -0
 19305              		.cfi_startproc
ARM GAS  /tmp/ccBFDvgN.s 			page 521


 19306              		@ args = 0, pretend = 0, frame = 72
 19307              		@ frame_needed = 0, uses_anonymous_args = 0
3379:src/xeq.c     **** 
 19308              		.loc 1 3379 2 view .LVU4981
3381:src/xeq.c     **** 	if (is_intmode()) {
 19309              		.loc 1 3381 2 view .LVU4982
 19310              	.LBB2993:
 19311              	.LBI2993:
1332:src/xeq.c     **** 	process_cmdline();
 19312              		.loc 1 1332 6 view .LVU4983
 19313              	.LBE2993:
1333:src/xeq.c     **** 	set_lift();
 19314              		.loc 1 1333 2 view .LVU4984
 19315              	.LBB3008:
 19316              	.LBB2994:
 19317              	.LBI2994:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 19318              		.loc 1 1226 6 view .LVU4985
 19319              	.LBB2995:
1227:src/xeq.c     **** 
 19320              		.loc 1 1227 2 view .LVU4986
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19321              		.loc 1 1229 2 view .LVU4987
 19322              	.LBE2995:
 19323              	.LBE2994:
 19324              	.LBE3008:
3378:src/xeq.c     **** 	decNumber x, y;
 19325              		.loc 1 3378 79 is_stmt 0 view .LVU4988
 19326 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 19327              		.cfi_def_cfa_offset 20
 19328              		.cfi_offset 4, -20
 19329              		.cfi_offset 5, -16
 19330              		.cfi_offset 6, -12
 19331              		.cfi_offset 7, -8
 19332              		.cfi_offset 14, -4
 19333              	.LBB3009:
 19334              	.LBB2999:
 19335              	.LBB2996:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19336              		.loc 1 1229 6 view .LVU4989
 19337 0002 2C4C     		ldr	r4, .L1394
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19338              		.loc 1 1229 5 view .LVU4990
 19339 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 19340              	.LBE2996:
 19341              	.LBE2999:
 19342              	.LBE3009:
3378:src/xeq.c     **** 	decNumber x, y;
 19343              		.loc 1 3378 79 view .LVU4991
 19344 0006 93B0     		sub	sp, sp, #76
 19345              		.cfi_def_cfa_offset 96
3378:src/xeq.c     **** 	decNumber x, y;
 19346              		.loc 1 3378 79 view .LVU4992
 19347 0008 0546     		mov	r5, r0
 19348 000a 0F46     		mov	r7, r1
 19349 000c 1646     		mov	r6, r2
 19350              	.LBB3010:
ARM GAS  /tmp/ccBFDvgN.s 			page 522


 19351              	.LBB3000:
 19352              	.LBB2997:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19353              		.loc 1 1229 5 view .LVU4993
 19354 000e 002B     		cmp	r3, #0
 19355 0010 3FD1     		bne	.L1391
 19356              	.LVL1441:
 19357              	.L1376:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19358              		.loc 1 1229 5 view .LVU4994
 19359              	.LBE2997:
 19360              	.LBE3000:
 19361              	.LBE3010:
1334:src/xeq.c     **** }
 19362              		.loc 1 1334 2 is_stmt 1 view .LVU4995
 19363              	.LBB3011:
 19364              	.LBB3001:
 19365              	.LBI3001:
 767:src/xeq.c     ****     State2.state_lift = 1;
 19366              		.loc 1 767 6 view .LVU4996
 19367              	.LBB3002:
 768:src/xeq.c     **** }
 19368              		.loc 1 768 5 view .LVU4997
 768:src/xeq.c     **** }
 19369              		.loc 1 768 23 is_stmt 0 view .LVU4998
 19370 0012 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 19371              	.LBE3002:
 19372              	.LBE3001:
 19373              	.LBE3011:
3382:src/xeq.c     **** 		bad_mode_error();
 19374              		.loc 1 3382 6 view .LVU4999
 19375 0014 284A     		ldr	r2, .L1394+4
 19376              	.LBB3012:
 19377              	.LBB3005:
 19378              	.LBB3003:
 768:src/xeq.c     **** }
 19379              		.loc 1 768 23 view .LVU5000
 19380 0016 43F04003 		orr	r3, r3, #64
 19381              	.LBE3003:
 19382              	.LBE3005:
 19383              	.LBE3012:
3382:src/xeq.c     **** 		bad_mode_error();
 19384              		.loc 1 3382 6 view .LVU5001
 19385 001a 1268     		ldr	r2, [r2]
 19386              	.LBB3013:
 19387              	.LBB3006:
 19388              	.LBB3004:
 768:src/xeq.c     **** }
 19389              		.loc 1 768 23 view .LVU5002
 19390 001c E375     		strb	r3, [r4, #23]
 19391              	.LBE3004:
 19392              	.LBE3006:
 19393              	.LBE3013:
3382:src/xeq.c     **** 		bad_mode_error();
 19394              		.loc 1 3382 2 is_stmt 1 view .LVU5003
3382:src/xeq.c     **** 		bad_mode_error();
 19395              		.loc 1 3382 6 is_stmt 0 view .LVU5004
ARM GAS  /tmp/ccBFDvgN.s 			page 523


 19396 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3382:src/xeq.c     **** 		bad_mode_error();
 19397              		.loc 1 3382 5 view .LVU5005
 19398 0022 DB07     		lsls	r3, r3, #31
 19399 0024 06D5     		bpl	.L1377
3383:src/xeq.c     **** 		return;
 19400              		.loc 1 3383 3 is_stmt 1 view .LVU5006
 19401              	.LBB3014:
 19402              	.LBI3014:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 19403              		.loc 1 575 6 view .LVU5007
 19404              	.LBE3014:
 576:src/xeq.c     **** }
 19405              		.loc 1 576 2 view .LVU5008
 19406              	.LVL1442:
 19407              	.LBB3019:
 19408              	.LBB3015:
 19409              	.LBI3015:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19410              		.loc 1 546 5 view .LVU5009
 19411              	.LBB3016:
 547:src/xeq.c     **** 		Error = e;
 19412              		.loc 1 547 2 view .LVU5010
 547:src/xeq.c     **** 		Error = e;
 19413              		.loc 1 547 12 is_stmt 0 view .LVU5011
 19414 0026 254B     		ldr	r3, .L1394+8
 547:src/xeq.c     **** 		Error = e;
 19415              		.loc 1 547 5 view .LVU5012
 19416 0028 1A68     		ldr	r2, [r3]
 19417 002a 0AB9     		cbnz	r2, .L1375
 19418              	.LVL1443:
 19419              	.LBB3017:
 19420              	.LBI3017:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19421              		.loc 1 546 5 is_stmt 1 view .LVU5013
 19422              	.LBB3018:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 19423              		.loc 1 548 3 view .LVU5014
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 19424              		.loc 1 548 9 is_stmt 0 view .LVU5015
 19425 002c 0D22     		movs	r2, #13
 19426 002e 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 19427              		.loc 1 549 3 is_stmt 1 view .LVU5016
 19428              	.LVL1444:
 19429              	.L1375:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 19430              		.loc 1 549 3 is_stmt 0 view .LVU5017
 19431              	.LBE3018:
 19432              	.LBE3017:
 19433              	.LBE3016:
 19434              	.LBE3015:
 19435              	.LBE3019:
3392:src/xeq.c     **** 
 19436              		.loc 1 3392 1 view .LVU5018
 19437 0030 13B0     		add	sp, sp, #76
 19438              		.cfi_remember_state
ARM GAS  /tmp/ccBFDvgN.s 			page 524


 19439              		.cfi_def_cfa_offset 20
 19440              		@ sp needed
 19441 0032 F0BD     		pop	{r4, r5, r6, r7, pc}
 19442              	.LVL1445:
 19443              	.L1377:
 19444              		.cfi_restore_state
3386:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
 19445              		.loc 1 3386 2 is_stmt 1 view .LVU5019
 19446              	.LBB3020:
 19447              	.LBI3020:
 854:src/xeq.c     **** 	getX(x);
 19448              		.loc 1 854 6 view .LVU5020
 19449              	.LBE3020:
 855:src/xeq.c     **** 	getY(y);
 19450              		.loc 1 855 2 view .LVU5021
 19451              	.LBB3025:
 19452              	.LBB3021:
 19453              	.LBI3021:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19454              		.loc 1 824 12 view .LVU5022
 19455              	.LBB3022:
 825:src/xeq.c     **** }
 19456              		.loc 1 825 2 view .LVU5023
 825:src/xeq.c     **** }
 19457              		.loc 1 825 9 is_stmt 0 view .LVU5024
 19458 0034 6421     		movs	r1, #100
 19459 0036 6846     		mov	r0, sp
 19460 0038 FFF7FEFF 		bl	getRegister
 19461              	.LVL1446:
 825:src/xeq.c     **** }
 19462              		.loc 1 825 9 view .LVU5025
 19463              	.LBE3022:
 19464              	.LBE3021:
 19465              	.LBE3025:
 856:src/xeq.c     **** }
 19466              		.loc 1 856 2 is_stmt 1 view .LVU5026
 19467              	.LBB3026:
 19468              	.LBB3023:
 19469              	.LBI3023:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 19470              		.loc 1 832 6 view .LVU5027
 19471              	.LBB3024:
 833:src/xeq.c     **** }
 19472              		.loc 1 833 2 view .LVU5028
 19473 003c 09A8     		add	r0, sp, #36
 19474              	.LVL1447:
 833:src/xeq.c     **** }
 19475              		.loc 1 833 2 is_stmt 0 view .LVU5029
 19476 003e 6521     		movs	r1, #101
 19477 0040 FFF7FEFF 		bl	getRegister
 19478              	.LVL1448:
 833:src/xeq.c     **** }
 19479              		.loc 1 833 2 view .LVU5030
 19480              	.LBE3024:
 19481              	.LBE3023:
 19482              	.LBE3026:
3387:src/xeq.c     **** 		fin_tst(0);
ARM GAS  /tmp/ccBFDvgN.s 			page 525


 19483              		.loc 1 3387 2 is_stmt 1 view .LVU5031
3387:src/xeq.c     **** 		fin_tst(0);
 19484              		.loc 1 3387 25 is_stmt 0 view .LVU5032
 19485 0044 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 19486 0048 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 19487 004c 1343     		orrs	r3, r3, r2
 19488 004e 13F0300F 		tst	r3, #48
 19489 0052 13D1     		bne	.L1379
3387:src/xeq.c     **** 		fin_tst(0);
 19490              		.loc 1 3387 47 discriminator 2 view .LVU5033
 19491 0054 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 19492 0056 13F0300F 		tst	r3, #48
 19493 005a 0FD1     		bne	.L1379
3387:src/xeq.c     **** 		fin_tst(0);
 19494              		.loc 1 3387 69 discriminator 3 view .LVU5034
 19495 005c 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 19496 005e 13F0300F 		tst	r3, #48
 19497 0062 0BD1     		bne	.L1379
3391:src/xeq.c     **** }
 19498              		.loc 1 3391 2 is_stmt 1 view .LVU5035
3391:src/xeq.c     **** }
 19499              		.loc 1 3391 29 is_stmt 0 view .LVU5036
 19500 0064 2946     		mov	r1, r5
 19501 0066 6846     		mov	r0, sp
 19502 0068 FFF7FEFF 		bl	dn_eq
 19503              	.LVL1449:
3391:src/xeq.c     **** }
 19504              		.loc 1 3391 25 view .LVU5037
 19505 006c 003E     		subs	r6, r6, #0
 19506 006e 18BF     		it	ne
 19507 0070 0126     		movne	r6, #1
3391:src/xeq.c     **** }
 19508              		.loc 1 3391 43 view .LVU5038
 19509 0072 A8B9     		cbnz	r0, .L1392
 19510              	.L1382:
3391:src/xeq.c     **** }
 19511              		.loc 1 3391 2 discriminator 6 view .LVU5039
 19512 0074 3046     		mov	r0, r6
 19513 0076 FFF7FEFF 		bl	fin_tst
 19514              	.LVL1450:
 19515 007a D9E7     		b	.L1375
 19516              	.L1379:
3388:src/xeq.c     **** 		return;
 19517              		.loc 1 3388 3 is_stmt 1 view .LVU5040
 19518              	.LVL1451:
 19519              	.LBB3027:
 19520              	.LBI3027:
2576:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 19521              		.loc 1 2576 6 view .LVU5041
 19522              	.LBB3028:
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 19523              		.loc 1 2577 2 view .LVU5042
2578:src/xeq.c     **** 		if (! a && incpc())
 19524              		.loc 1 2578 2 view .LVU5043
2578:src/xeq.c     **** 		if (! a && incpc())
 19525              		.loc 1 2578 6 is_stmt 0 view .LVU5044
 19526 007c 104A     		ldr	r2, .L1394+12
ARM GAS  /tmp/ccBFDvgN.s 			page 526


2578:src/xeq.c     **** 		if (! a && incpc())
 19527              		.loc 1 2578 14 view .LVU5045
 19528 007e 114B     		ldr	r3, .L1394+16
 19529 0080 1268     		ldr	r2, [r2]
 19530 0082 1B68     		ldr	r3, [r3]
 19531 0084 1343     		orrs	r3, r2, r3
 19532 0086 07D1     		bne	.L1393
2583:src/xeq.c     **** #ifdef INFRARED
 19533              		.loc 1 2583 3 is_stmt 1 view .LVU5046
2583:src/xeq.c     **** #ifdef INFRARED
 19534              		.loc 1 2583 11 is_stmt 0 view .LVU5047
 19535 0088 0F4B     		ldr	r3, .L1394+20
 19536 008a 104A     		ldr	r2, .L1394+24
 19537 008c 1A60     		str	r2, [r3]
 19538              	.LBE3028:
 19539              	.LBE3027:
3392:src/xeq.c     **** 
 19540              		.loc 1 3392 1 view .LVU5048
 19541 008e 13B0     		add	sp, sp, #76
 19542              		.cfi_remember_state
 19543              		.cfi_def_cfa_offset 20
 19544              		@ sp needed
 19545 0090 F0BD     		pop	{r4, r5, r6, r7, pc}
 19546              	.LVL1452:
 19547              	.L1391:
 19548              		.cfi_restore_state
 19549              	.LBB3030:
 19550              	.LBB3007:
 19551              	.LBB2998:
3392:src/xeq.c     **** 
 19552              		.loc 1 3392 1 view .LVU5049
 19553 0092 FFF7FEFF 		bl	process_cmdline.part.0
 19554              	.LVL1453:
3392:src/xeq.c     **** 
 19555              		.loc 1 3392 1 view .LVU5050
 19556 0096 BCE7     		b	.L1376
 19557              	.LVL1454:
 19558              	.L1393:
3392:src/xeq.c     **** 
 19559              		.loc 1 3392 1 view .LVU5051
 19560              	.LBE2998:
 19561              	.LBE3007:
 19562              	.LBE3030:
 19563              	.LBB3031:
 19564              	.LBB3029:
2579:src/xeq.c     **** 			decpc();
 19565              		.loc 1 2579 3 is_stmt 1 view .LVU5052
 19566 0098 FFF7FEFF 		bl	fin_tst.part.0
 19567              	.LVL1455:
 19568              	.LBE3029:
 19569              	.LBE3031:
3392:src/xeq.c     **** 
 19570              		.loc 1 3392 1 is_stmt 0 view .LVU5053
 19571 009c 13B0     		add	sp, sp, #76
 19572              		.cfi_remember_state
 19573              		.cfi_def_cfa_offset 20
 19574              		@ sp needed
ARM GAS  /tmp/ccBFDvgN.s 			page 527


 19575 009e F0BD     		pop	{r4, r5, r6, r7, pc}
 19576              	.LVL1456:
 19577              	.L1392:
 19578              		.cfi_restore_state
3391:src/xeq.c     **** }
 19579              		.loc 1 3391 46 discriminator 1 view .LVU5054
 19580 00a0 3946     		mov	r1, r7
 19581 00a2 09A8     		add	r0, sp, #36
 19582 00a4 FFF7FEFF 		bl	dn_eq
 19583              	.LVL1457:
 19584 00a8 0028     		cmp	r0, #0
 19585 00aa 18BF     		it	ne
 19586 00ac 86F00106 		eorne	r6, r6, #1
 19587 00b0 E0E7     		b	.L1382
 19588              	.L1395:
 19589 00b2 00BF     		.align	2
 19590              	.L1394:
 19591 00b4 00000000 		.word	StateWhileOn
 19592 00b8 00000000 		.word	main_ram
 19593 00bc 00000000 		.word	Error
 19594 00c0 00000000 		.word	Running
 19595 00c4 00000000 		.word	XromRunning
 19596 00c8 00000000 		.word	DispMsg
 19597 00cc 00000000 		.word	.LC3
 19598              		.cfi_endproc
 19599              	.LFE191:
 19601              		.section	.text.check_zero,"ax",%progbits
 19602              		.align	1
 19603              		.p2align 2,,3
 19604              		.global	check_zero
 19605              		.syntax unified
 19606              		.thumb
 19607              		.thumb_func
 19608              		.fpu fpv4-sp-d16
 19610              	check_zero:
 19611              	.LVL1458:
 19612              	.LFB189:
3355:src/xeq.c     **** 	int neg;
 19613              		.loc 1 3355 32 is_stmt 1 view -0
 19614              		.cfi_startproc
 19615              		@ args = 0, pretend = 0, frame = 40
 19616              		@ frame_needed = 0, uses_anonymous_args = 0
3356:src/xeq.c     **** 	int zero;
 19617              		.loc 1 3356 2 view .LVU5056
3357:src/xeq.c     **** 
 19618              		.loc 1 3357 2 view .LVU5057
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19619              		.loc 1 3359 2 view .LVU5058
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19620              		.loc 1 3359 6 is_stmt 0 view .LVU5059
 19621 0000 1A4B     		ldr	r3, .L1411
3355:src/xeq.c     **** 	int neg;
 19622              		.loc 1 3355 32 view .LVU5060
 19623 0002 10B5     		push	{r4, lr}
 19624              		.cfi_def_cfa_offset 8
 19625              		.cfi_offset 4, -8
 19626              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBFDvgN.s 			page 528


3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19627              		.loc 1 3359 6 view .LVU5061
 19628 0004 1B68     		ldr	r3, [r3]
 19629 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19630              		.loc 1 3359 5 view .LVU5062
 19631 000a DB07     		lsls	r3, r3, #31
3355:src/xeq.c     **** 	int neg;
 19632              		.loc 1 3355 32 view .LVU5063
 19633 000c 8AB0     		sub	sp, sp, #40
 19634              		.cfi_def_cfa_offset 48
3355:src/xeq.c     **** 	int neg;
 19635              		.loc 1 3355 32 view .LVU5064
 19636 000e 0446     		mov	r4, r0
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19637              		.loc 1 3359 5 view .LVU5065
 19638 0010 15D5     		bpl	.L1397
 19639              	.LBB3032:
3360:src/xeq.c     **** 		zero = (xv == 0);
 19640              		.loc 1 3360 3 is_stmt 1 view .LVU5066
 19641              	.LBB3033:
 19642              	.LBI3033:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 19643              		.loc 1 1442 15 view .LVU5067
 19644              	.LBB3034:
1443:src/xeq.c     **** }
 19645              		.loc 1 1443 2 view .LVU5068
1443:src/xeq.c     **** }
 19646              		.loc 1 1443 9 is_stmt 0 view .LVU5069
 19647 0012 6420     		movs	r0, #100
 19648              	.LVL1459:
1443:src/xeq.c     **** }
 19649              		.loc 1 1443 9 view .LVU5070
 19650 0014 FFF7FEFF 		bl	get_reg_n_int
 19651              	.LVL1460:
 19652              	.LBE3034:
 19653              	.LBE3033:
3360:src/xeq.c     **** 		zero = (xv == 0);
 19654              		.loc 1 3360 37 view .LVU5071
 19655 0018 6A46     		mov	r2, sp
 19656 001a FFF7FEFF 		bl	extract_value
 19657              	.LVL1461:
3361:src/xeq.c     **** 	} else {
 19658              		.loc 1 3361 3 is_stmt 1 view .LVU5072
3361:src/xeq.c     **** 	} else {
 19659              		.loc 1 3361 14 is_stmt 0 view .LVU5073
 19660 001e 50EA0103 		orrs	r3, r0, r1
 19661 0022 0CBF     		ite	eq
 19662 0024 0120     		moveq	r0, #1
 19663              	.LVL1462:
3361:src/xeq.c     **** 	} else {
 19664              		.loc 1 3361 14 view .LVU5074
 19665 0026 0020     		movne	r0, #0
 19666              	.LVL1463:
3361:src/xeq.c     **** 	} else {
 19667              		.loc 1 3361 14 view .LVU5075
 19668              	.LBE3032:
ARM GAS  /tmp/ccBFDvgN.s 			page 529


3368:src/xeq.c     **** 		fin_tst(zero && !neg);
 19669              		.loc 1 3368 2 is_stmt 1 view .LVU5076
3368:src/xeq.c     **** 		fin_tst(zero && !neg);
 19670              		.loc 1 3368 5 is_stmt 0 view .LVU5077
 19671 0028 A12C     		cmp	r4, #161
 19672 002a 15D0     		beq	.L1410
 19673              	.L1399:
3371:src/xeq.c     **** }
 19674              		.loc 1 3371 3 is_stmt 1 view .LVU5078
 19675 002c 18B1     		cbz	r0, .L1402
3371:src/xeq.c     **** }
 19676              		.loc 1 3371 3 is_stmt 0 discriminator 1 view .LVU5079
 19677 002e 0098     		ldr	r0, [sp]
 19678              	.LVL1464:
3371:src/xeq.c     **** }
 19679              		.loc 1 3371 3 discriminator 1 view .LVU5080
 19680 0030 0038     		subs	r0, r0, #0
 19681 0032 18BF     		it	ne
 19682 0034 0120     		movne	r0, #1
 19683              	.L1402:
3371:src/xeq.c     **** }
 19684              		.loc 1 3371 3 discriminator 6 view .LVU5081
 19685 0036 FFF7FEFF 		bl	fin_tst
 19686              	.LVL1465:
3372:src/xeq.c     **** 
 19687              		.loc 1 3372 1 discriminator 6 view .LVU5082
 19688 003a 0AB0     		add	sp, sp, #40
 19689              		.cfi_remember_state
 19690              		.cfi_def_cfa_offset 8
 19691              		@ sp needed
 19692 003c 10BD     		pop	{r4, pc}
 19693              	.LVL1466:
 19694              	.L1397:
 19695              		.cfi_restore_state
 19696              	.LBB3035:
3363:src/xeq.c     **** 		getX(&x);
 19697              		.loc 1 3363 3 is_stmt 1 view .LVU5083
3364:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
 19698              		.loc 1 3364 3 view .LVU5084
 19699              	.LBB3036:
 19700              	.LBI3036:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19701              		.loc 1 824 12 view .LVU5085
 19702              	.LBB3037:
 825:src/xeq.c     **** }
 19703              		.loc 1 825 2 view .LVU5086
 825:src/xeq.c     **** }
 19704              		.loc 1 825 9 is_stmt 0 view .LVU5087
 19705 003e 6421     		movs	r1, #100
 19706 0040 01A8     		add	r0, sp, #4
 19707              	.LVL1467:
 825:src/xeq.c     **** }
 19708              		.loc 1 825 9 view .LVU5088
 19709 0042 FFF7FEFF 		bl	getRegister
 19710              	.LVL1468:
 825:src/xeq.c     **** }
 19711              		.loc 1 825 9 view .LVU5089
ARM GAS  /tmp/ccBFDvgN.s 			page 530


 19712              	.LBE3037:
 19713              	.LBE3036:
3365:src/xeq.c     **** 		zero = dn_eq0(&x);
 19714              		.loc 1 3365 3 is_stmt 1 view .LVU5090
3365:src/xeq.c     **** 		zero = dn_eq0(&x);
 19715              		.loc 1 3365 9 is_stmt 0 view .LVU5091
 19716 0046 9DF90C30 		ldrsb	r3, [sp, #12]
3366:src/xeq.c     **** 	}
 19717              		.loc 1 3366 10 view .LVU5092
 19718 004a 01A8     		add	r0, sp, #4
3365:src/xeq.c     **** 		zero = dn_eq0(&x);
 19719              		.loc 1 3365 9 view .LVU5093
 19720 004c DB0F     		lsrs	r3, r3, #31
3365:src/xeq.c     **** 		zero = dn_eq0(&x);
 19721              		.loc 1 3365 7 view .LVU5094
 19722 004e 0093     		str	r3, [sp]
3366:src/xeq.c     **** 	}
 19723              		.loc 1 3366 3 is_stmt 1 view .LVU5095
3366:src/xeq.c     **** 	}
 19724              		.loc 1 3366 10 is_stmt 0 view .LVU5096
 19725 0050 FFF7FEFF 		bl	dn_eq0
 19726              	.LVL1469:
3366:src/xeq.c     **** 	}
 19727              		.loc 1 3366 10 view .LVU5097
 19728              	.LBE3035:
3368:src/xeq.c     **** 		fin_tst(zero && !neg);
 19729              		.loc 1 3368 2 is_stmt 1 view .LVU5098
3368:src/xeq.c     **** 		fin_tst(zero && !neg);
 19730              		.loc 1 3368 5 is_stmt 0 view .LVU5099
 19731 0054 A12C     		cmp	r4, #161
 19732 0056 E9D1     		bne	.L1399
 19733              	.L1410:
3369:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19734              		.loc 1 3369 3 is_stmt 1 view .LVU5100
 19735 0058 0028     		cmp	r0, #0
 19736 005a ECD0     		beq	.L1402
3369:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19737              		.loc 1 3369 3 is_stmt 0 discriminator 1 view .LVU5101
 19738 005c 0098     		ldr	r0, [sp]
 19739              	.LVL1470:
3369:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19740              		.loc 1 3369 3 discriminator 1 view .LVU5102
 19741 005e B0FA80F0 		clz	r0, r0
 19742 0062 4009     		lsrs	r0, r0, #5
3371:src/xeq.c     **** }
 19743              		.loc 1 3371 3 discriminator 1 view .LVU5103
 19744 0064 FFF7FEFF 		bl	fin_tst
 19745              	.LVL1471:
3372:src/xeq.c     **** 
 19746              		.loc 1 3372 1 discriminator 1 view .LVU5104
 19747 0068 0AB0     		add	sp, sp, #40
 19748              		.cfi_def_cfa_offset 8
 19749              		@ sp needed
 19750 006a 10BD     		pop	{r4, pc}
 19751              	.L1412:
 19752              		.align	2
 19753              	.L1411:
ARM GAS  /tmp/ccBFDvgN.s 			page 531


 19754 006c 00000000 		.word	main_ram
 19755              		.cfi_endproc
 19756              	.LFE189:
 19758              		.section	.text.cmdtest,"ax",%progbits
 19759              		.align	1
 19760              		.p2align 2,,3
 19761              		.global	cmdtest
 19762              		.syntax unified
 19763              		.thumb
 19764              		.thumb_func
 19765              		.fpu fpv4-sp-d16
 19767              	cmdtest:
 19768              	.LVL1472:
 19769              	.LFB190:
3374:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
 19770              		.loc 1 3374 46 is_stmt 1 view -0
 19771              		.cfi_startproc
 19772              		@ args = 0, pretend = 0, frame = 0
 19773              		@ frame_needed = 0, uses_anonymous_args = 0
 19774              		@ link register save eliminated.
3375:src/xeq.c     **** }
 19775              		.loc 1 3375 2 view .LVU5106
3375:src/xeq.c     **** }
 19776              		.loc 1 3375 31 is_stmt 0 view .LVU5107
 19777 0000 2D39     		subs	r1, r1, #45
 19778              	.LVL1473:
3375:src/xeq.c     **** }
 19779              		.loc 1 3375 2 view .LVU5108
 19780 0002 C9B2     		uxtb	r1, r1
 19781 0004 FFF7FEBF 		b	do_tst
 19782              	.LVL1474:
3375:src/xeq.c     **** }
 19783              		.loc 1 3375 2 view .LVU5109
 19784              		.cfi_endproc
 19785              	.LFE190:
 19787              		.section	.text.cmdztest,"ax",%progbits
 19788              		.align	1
 19789              		.p2align 2,,3
 19790              		.global	cmdztest
 19791              		.syntax unified
 19792              		.thumb
 19793              		.thumb_func
 19794              		.fpu fpv4-sp-d16
 19796              	cmdztest:
 19797              	.LVL1475:
 19798              	.LFB192:
3394:src/xeq.c     **** 	decNumber re, im;
 19799              		.loc 1 3394 47 is_stmt 1 view -0
 19800              		.cfi_startproc
 19801              		@ args = 0, pretend = 0, frame = 72
 19802              		@ frame_needed = 0, uses_anonymous_args = 0
3395:src/xeq.c     **** 	getRegister(&re, arg);
 19803              		.loc 1 3395 2 view .LVU5111
3396:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19804              		.loc 1 3396 2 view .LVU5112
3394:src/xeq.c     **** 	decNumber re, im;
 19805              		.loc 1 3394 47 is_stmt 0 view .LVU5113
ARM GAS  /tmp/ccBFDvgN.s 			page 532


 19806 0000 30B5     		push	{r4, r5, lr}
 19807              		.cfi_def_cfa_offset 12
 19808              		.cfi_offset 4, -12
 19809              		.cfi_offset 5, -8
 19810              		.cfi_offset 14, -4
 19811 0002 0546     		mov	r5, r0
 19812 0004 93B0     		sub	sp, sp, #76
 19813              		.cfi_def_cfa_offset 88
3394:src/xeq.c     **** 	decNumber re, im;
 19814              		.loc 1 3394 47 view .LVU5114
 19815 0006 0C46     		mov	r4, r1
3396:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19816              		.loc 1 3396 2 view .LVU5115
 19817 0008 6846     		mov	r0, sp
 19818              	.LVL1476:
3396:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19819              		.loc 1 3396 2 view .LVU5116
 19820 000a 2946     		mov	r1, r5
 19821              	.LVL1477:
3396:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19822              		.loc 1 3396 2 view .LVU5117
 19823 000c FFF7FEFF 		bl	getRegister
 19824              	.LVL1478:
3397:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
 19825              		.loc 1 3397 2 is_stmt 1 view .LVU5118
 19826 0010 691C     		adds	r1, r5, #1
 19827 0012 09A8     		add	r0, sp, #36
 19828 0014 FFF7FEFF 		bl	getRegister
 19829              	.LVL1479:
3398:src/xeq.c     **** }
 19830              		.loc 1 3398 2 view .LVU5119
3398:src/xeq.c     **** }
 19831              		.loc 1 3398 37 is_stmt 0 view .LVU5120
 19832 0018 A4F13402 		sub	r2, r4, #52
3398:src/xeq.c     **** }
 19833              		.loc 1 3398 2 view .LVU5121
 19834 001c D2B2     		uxtb	r2, r2
 19835 001e 09A9     		add	r1, sp, #36
 19836 0020 6846     		mov	r0, sp
 19837 0022 FFF7FEFF 		bl	do_ztst
 19838              	.LVL1480:
3399:src/xeq.c     **** 
 19839              		.loc 1 3399 1 view .LVU5122
 19840 0026 13B0     		add	sp, sp, #76
 19841              		.cfi_def_cfa_offset 12
 19842              		@ sp needed
 19843 0028 30BD     		pop	{r4, r5, pc}
3399:src/xeq.c     **** 
 19844              		.loc 1 3399 1 view .LVU5123
 19845              		.cfi_endproc
 19846              	.LFE192:
 19848 002a 00BF     		.section	.text.cmdlincdec,"ax",%progbits
 19849              		.align	1
 19850              		.p2align 2,,3
 19851              		.global	cmdlincdec
 19852              		.syntax unified
 19853              		.thumb
ARM GAS  /tmp/ccBFDvgN.s 			page 533


 19854              		.thumb_func
 19855              		.fpu fpv4-sp-d16
 19857              	cmdlincdec:
 19858              	.LVL1481:
 19859              	.LFB194:
3429:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
 19860              		.loc 1 3429 49 is_stmt 1 view -0
 19861              		.cfi_startproc
 19862              		@ args = 0, pretend = 0, frame = 0
 19863              		@ frame_needed = 0, uses_anonymous_args = 0
 19864              		@ link register save eliminated.
3430:src/xeq.c     **** }
 19865              		.loc 1 3430 2 view .LVU5125
 19866 0000 A1F14101 		sub	r1, #65
 19867              	.LVL1482:
3430:src/xeq.c     **** }
 19868              		.loc 1 3430 2 is_stmt 0 view .LVU5126
 19869 0004 B1FA81F1 		clz	r1, r1
 19870 0008 4909     		lsrs	r1, r1, #5
 19871 000a FFF7FEBF 		b	incdec
 19872              	.LVL1483:
3430:src/xeq.c     **** }
 19873              		.loc 1 3430 2 view .LVU5127
 19874              		.cfi_endproc
 19875              	.LFE194:
 19877 000e 00BF     		.section	.text.cmdloopz,"ax",%progbits
 19878              		.align	1
 19879              		.p2align 2,,3
 19880              		.global	cmdloopz
 19881              		.syntax unified
 19882              		.thumb
 19883              		.thumb_func
 19884              		.fpu fpv4-sp-d16
 19886              	cmdloopz:
 19887              	.LVL1484:
 19888              	.LFB195:
3433:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19889              		.loc 1 3433 47 is_stmt 1 view -0
 19890              		.cfi_startproc
 19891              		@ args = 0, pretend = 0, frame = 0
 19892              		@ frame_needed = 0, uses_anonymous_args = 0
3434:src/xeq.c     **** }
 19893              		.loc 1 3434 2 view .LVU5129
3433:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19894              		.loc 1 3433 47 is_stmt 0 view .LVU5130
 19895 0000 08B5     		push	{r3, lr}
 19896              		.cfi_def_cfa_offset 8
 19897              		.cfi_offset 3, -8
 19898              		.cfi_offset 14, -4
3434:src/xeq.c     **** }
 19899              		.loc 1 3434 2 view .LVU5131
 19900 0002 A1F13F01 		sub	r1, #63
 19901              	.LVL1485:
3434:src/xeq.c     **** }
 19902              		.loc 1 3434 2 view .LVU5132
 19903 0006 B1FA81F1 		clz	r1, r1
 19904 000a 4909     		lsrs	r1, r1, #5
ARM GAS  /tmp/ccBFDvgN.s 			page 534


 19905 000c FFF7FEFF 		bl	incdec
 19906              	.LVL1486:
3435:src/xeq.c     **** 
 19907              		.loc 1 3435 1 view .LVU5133
 19908 0010 BDE80840 		pop	{r3, lr}
 19909              		.cfi_restore 14
 19910              		.cfi_restore 3
 19911              		.cfi_def_cfa_offset 0
3434:src/xeq.c     **** }
 19912              		.loc 1 3434 2 view .LVU5134
 19913 0014 FFF7FEBF 		b	fin_tst
 19914              	.LVL1487:
 19915              		.cfi_endproc
 19916              	.LFE195:
 19918              		.section	.text.cmdloop,"ax",%progbits
 19919              		.align	1
 19920              		.p2align 2,,3
 19921              		.global	cmdloop
 19922              		.syntax unified
 19923              		.thumb
 19924              		.thumb_func
 19925              		.fpu fpv4-sp-d16
 19927              	cmdloop:
 19928              	.LVL1488:
 19929              	.LFB196:
3437:src/xeq.c     **** 	if (is_intmode()) {
 19930              		.loc 1 3437 46 is_stmt 1 view -0
 19931              		.cfi_startproc
 19932              		@ args = 0, pretend = 0, frame = 184
 19933              		@ frame_needed = 0, uses_anonymous_args = 0
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19934              		.loc 1 3438 2 view .LVU5136
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19935              		.loc 1 3438 6 is_stmt 0 view .LVU5137
 19936 0000 7C4B     		ldr	r3, .L1459
3437:src/xeq.c     **** 	if (is_intmode()) {
 19937              		.loc 1 3437 46 view .LVU5138
 19938 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 19939              		.cfi_def_cfa_offset 20
 19940              		.cfi_offset 4, -20
 19941              		.cfi_offset 5, -16
 19942              		.cfi_offset 6, -12
 19943              		.cfi_offset 7, -8
 19944              		.cfi_offset 14, -4
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19945              		.loc 1 3438 6 view .LVU5139
 19946 0004 1B68     		ldr	r3, [r3]
 19947 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19948              		.loc 1 3438 5 view .LVU5140
 19949 000a DB07     		lsls	r3, r3, #31
3437:src/xeq.c     **** 	if (is_intmode()) {
 19950              		.loc 1 3437 46 view .LVU5141
 19951 000c AFB0     		sub	sp, sp, #188
 19952              		.cfi_def_cfa_offset 208
3437:src/xeq.c     **** 	if (is_intmode()) {
 19953              		.loc 1 3437 46 view .LVU5142
ARM GAS  /tmp/ccBFDvgN.s 			page 535


 19954 000e 0C46     		mov	r4, r1
 19955 0010 0546     		mov	r5, r0
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19956              		.loc 1 3438 5 view .LVU5143
 19957 0012 7BD4     		bmi	.L1451
 19958              	.LBB3038:
3460:src/xeq.c     **** 
 19959              		.loc 1 3460 3 is_stmt 1 view .LVU5144
3462:src/xeq.c     **** 
 19960              		.loc 1 3462 3 view .LVU5145
 19961 0014 2946     		mov	r1, r5
 19962              	.LVL1489:
3462:src/xeq.c     **** 
 19963              		.loc 1 3462 3 is_stmt 0 view .LVU5146
 19964 0016 6846     		mov	r0, sp
 19965              	.LVL1490:
3462:src/xeq.c     **** 
 19966              		.loc 1 3462 3 view .LVU5147
 19967 0018 FFF7FEFF 		bl	getRegister
 19968              	.LVL1491:
3466:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
 19969              		.loc 1 3466 3 is_stmt 1 view .LVU5148
 19970 001c 6946     		mov	r1, sp
 19971 001e 12A8     		add	r0, sp, #72
 19972 0020 FFF7FEFF 		bl	dn_abs
 19973              	.LVL1492:
3467:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
 19974              		.loc 1 3467 3 view .LVU5149
 19975 0024 12A9     		add	r1, sp, #72
 19976 0026 1BA8     		add	r0, sp, #108
 19977 0028 FFF7FEFF 		bl	decNumberTrunc
 19978              	.LVL1493:
3468:src/xeq.c     **** 		if (decNumberIsNegative(&x))
 19979              		.loc 1 3468 3 view .LVU5150
 19980 002c 1BAA     		add	r2, sp, #108
 19981 002e 12A9     		add	r1, sp, #72
 19982 0030 24A8     		add	r0, sp, #144
 19983 0032 FFF7FEFF 		bl	dn_subtract
 19984              	.LVL1494:
3469:src/xeq.c     **** 			dn_minus(&n, &n);
 19985              		.loc 1 3469 3 view .LVU5151
3469:src/xeq.c     **** 			dn_minus(&n, &n);
 19986              		.loc 1 3469 6 is_stmt 0 view .LVU5152
 19987 0036 9DF90830 		ldrsb	r3, [sp, #8]
 19988 003a 002B     		cmp	r3, #0
 19989 003c C0F29080 		blt	.L1452
 19990              	.L1429:
3471:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
 19991              		.loc 1 3471 3 is_stmt 1 view .LVU5153
 19992 0040 0322     		movs	r2, #3
 19993 0042 24A9     		add	r1, sp, #144
 19994 0044 09A8     		add	r0, sp, #36
 19995 0046 FFF7FEFF 		bl	dn_mulpow10
 19996              	.LVL1495:
3472:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
 19997              		.loc 1 3472 3 view .LVU5154
 19998 004a 09A9     		add	r1, sp, #36
ARM GAS  /tmp/ccBFDvgN.s 			page 536


 19999 004c 12A8     		add	r0, sp, #72
 20000 004e FFF7FEFF 		bl	decNumberTrunc
 20001              	.LVL1496:
3473:src/xeq.c     **** 		dn_mul100(&x, &i);
 20002              		.loc 1 3473 3 view .LVU5155
 20003 0052 09A9     		add	r1, sp, #36
 20004 0054 12AA     		add	r2, sp, #72
 20005 0056 0846     		mov	r0, r1
 20006 0058 FFF7FEFF 		bl	dn_subtract
 20007              	.LVL1497:
3474:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
 20008              		.loc 1 3474 3 view .LVU5156
 20009 005c 09A9     		add	r1, sp, #36
 20010 005e 6846     		mov	r0, sp
 20011 0060 FFF7FEFF 		bl	dn_mul100
 20012              	.LVL1498:
3475:src/xeq.c     **** 		if (dn_eq0(&i))
 20013              		.loc 1 3475 3 view .LVU5157
 20014 0064 6946     		mov	r1, sp
 20015 0066 09A8     		add	r0, sp, #36
 20016 0068 FFF7FEFF 		bl	decNumberTrunc
 20017              	.LVL1499:
3476:src/xeq.c     **** 			dn_1(&i);
 20018              		.loc 1 3476 3 view .LVU5158
3476:src/xeq.c     **** 			dn_1(&i);
 20019              		.loc 1 3476 7 is_stmt 0 view .LVU5159
 20020 006c 09A8     		add	r0, sp, #36
 20021 006e FFF7FEFF 		bl	dn_eq0
 20022              	.LVL1500:
3476:src/xeq.c     **** 			dn_1(&i);
 20023              		.loc 1 3476 6 view .LVU5160
 20024 0072 98BB     		cbnz	r0, .L1453
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20025              		.loc 1 3479 3 is_stmt 1 view .LVU5161
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20026              		.loc 1 3480 4 is_stmt 0 view .LVU5162
 20027 0074 1BA9     		add	r1, sp, #108
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20028              		.loc 1 3479 6 view .LVU5163
 20029 0076 3B2C     		cmp	r4, #59
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20030              		.loc 1 3480 4 view .LVU5164
 20031 0078 09AA     		add	r2, sp, #36
 20032 007a 0846     		mov	r0, r1
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20033              		.loc 1 3479 6 view .LVU5165
 20034 007c 36D0     		beq	.L1431
 20035              	.L1456:
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20036              		.loc 1 3479 22 discriminator 1 view .LVU5166
 20037 007e 3D2C     		cmp	r4, #61
 20038 0080 1DD1     		bne	.L1432
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20039              		.loc 1 3480 4 is_stmt 1 view .LVU5167
 20040 0082 FFF7FEFF 		bl	dn_add
 20041              	.LVL1501:
3481:src/xeq.c     **** 			if (op == RARG_ISE)
ARM GAS  /tmp/ccBFDvgN.s 			page 537


 20042              		.loc 1 3481 4 view .LVU5168
 20043 0086 1BAA     		add	r2, sp, #108
 20044 0088 12A9     		add	r1, sp, #72
 20045 008a 6846     		mov	r0, sp
 20046 008c FFF7FEFF 		bl	dn_compare
 20047              	.LVL1502:
3482:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 20048              		.loc 1 3482 4 view .LVU5169
3483:src/xeq.c     **** 			else
 20049              		.loc 1 3483 5 view .LVU5170
3483:src/xeq.c     **** 			else
 20050              		.loc 1 3483 13 is_stmt 0 view .LVU5171
 20051 0090 6846     		mov	r0, sp
 20052 0092 FFF7FEFF 		bl	dn_le0
 20053              	.LVL1503:
3483:src/xeq.c     **** 			else
 20054              		.loc 1 3483 5 view .LVU5172
 20055 0096 B0FA80F0 		clz	r0, r0
 20056 009a 4009     		lsrs	r0, r0, #5
 20057 009c FFF7FEFF 		bl	fin_tst
 20058              	.LVL1504:
 20059              	.L1433:
3496:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20060              		.loc 1 3496 3 is_stmt 1 view .LVU5173
3496:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20061              		.loc 1 3496 6 is_stmt 0 view .LVU5174
 20062 00a0 9DF97430 		ldrsb	r3, [sp, #116]
 20063 00a4 002B     		cmp	r3, #0
3497:src/xeq.c     **** 		} else
 20064              		.loc 1 3497 4 view .LVU5175
 20065 00a6 24AA     		add	r2, sp, #144
 20066 00a8 1BA9     		add	r1, sp, #108
 20067 00aa 6846     		mov	r0, sp
3496:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20068              		.loc 1 3496 6 view .LVU5176
 20069 00ac 55DB     		blt	.L1454
3499:src/xeq.c     **** 		setRegister(arg, &x);
 20070              		.loc 1 3499 4 is_stmt 1 view .LVU5177
 20071 00ae FFF7FEFF 		bl	dn_add
 20072              	.LVL1505:
 20073              	.L1436:
3500:src/xeq.c     **** 	}
 20074              		.loc 1 3500 3 discriminator 2 view .LVU5178
 20075 00b2 6946     		mov	r1, sp
 20076 00b4 2846     		mov	r0, r5
 20077 00b6 FFF7FEFF 		bl	setRegister
 20078              	.LVL1506:
 20079              	.L1419:
3500:src/xeq.c     **** 	}
 20080              		.loc 1 3500 3 is_stmt 0 discriminator 2 view .LVU5179
 20081              	.LBE3038:
3502:src/xeq.c     **** 
 20082              		.loc 1 3502 1 view .LVU5180
 20083 00ba 2FB0     		add	sp, sp, #188
 20084              		.cfi_remember_state
 20085              		.cfi_def_cfa_offset 20
 20086              		@ sp needed
ARM GAS  /tmp/ccBFDvgN.s 			page 538


 20087 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 20088              	.LVL1507:
 20089              	.L1432:
 20090              		.cfi_restore_state
 20091              	.LBB3039:
3487:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20092              		.loc 1 3487 4 is_stmt 1 view .LVU5181
 20093 00be FFF7FEFF 		bl	dn_subtract
 20094              	.LVL1508:
3488:src/xeq.c     **** 			if (op == RARG_DSL)
 20095              		.loc 1 3488 4 view .LVU5182
 20096 00c2 1BAA     		add	r2, sp, #108
 20097 00c4 12A9     		add	r1, sp, #72
 20098 00c6 6846     		mov	r0, sp
 20099 00c8 FFF7FEFF 		bl	dn_compare
 20100              	.LVL1509:
3489:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20101              		.loc 1 3489 4 view .LVU5183
3489:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20102              		.loc 1 3489 7 is_stmt 0 view .LVU5184
 20103 00cc 3C2C     		cmp	r4, #60
3490:src/xeq.c     **** 			else
 20104              		.loc 1 3490 5 view .LVU5185
 20105 00ce 6846     		mov	r0, sp
3489:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20106              		.loc 1 3489 7 view .LVU5186
 20107 00d0 6AD0     		beq	.L1455
3492:src/xeq.c     **** 		}
 20108              		.loc 1 3492 5 is_stmt 1 view .LVU5187
 20109 00d2 FFF7FEFF 		bl	dn_lt0
 20110              	.LVL1510:
 20111 00d6 FFF7FEFF 		bl	fin_tst
 20112              	.LVL1511:
 20113 00da E1E7     		b	.L1433
 20114              	.L1453:
3477:src/xeq.c     **** 
 20115              		.loc 1 3477 4 view .LVU5188
 20116 00dc 09A8     		add	r0, sp, #36
 20117 00de FFF7FEFF 		bl	dn_1
 20118              	.LVL1512:
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20119              		.loc 1 3479 3 view .LVU5189
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20120              		.loc 1 3480 4 is_stmt 0 view .LVU5190
 20121 00e2 1BA9     		add	r1, sp, #108
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20122              		.loc 1 3479 6 view .LVU5191
 20123 00e4 3B2C     		cmp	r4, #59
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20124              		.loc 1 3480 4 view .LVU5192
 20125 00e6 09AA     		add	r2, sp, #36
 20126 00e8 0846     		mov	r0, r1
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20127              		.loc 1 3479 6 view .LVU5193
 20128 00ea C8D1     		bne	.L1456
 20129              	.L1431:
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
ARM GAS  /tmp/ccBFDvgN.s 			page 539


 20130              		.loc 1 3480 4 is_stmt 1 view .LVU5194
 20131 00ec FFF7FEFF 		bl	dn_add
 20132              	.LVL1513:
3481:src/xeq.c     **** 			if (op == RARG_ISE)
 20133              		.loc 1 3481 4 view .LVU5195
 20134 00f0 1BAA     		add	r2, sp, #108
 20135 00f2 12A9     		add	r1, sp, #72
 20136 00f4 6846     		mov	r0, sp
 20137 00f6 FFF7FEFF 		bl	dn_compare
 20138              	.LVL1514:
3482:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 20139              		.loc 1 3482 4 view .LVU5196
3485:src/xeq.c     **** 		} else {
 20140              		.loc 1 3485 5 view .LVU5197
3485:src/xeq.c     **** 		} else {
 20141              		.loc 1 3485 13 is_stmt 0 view .LVU5198
 20142 00fa 6846     		mov	r0, sp
 20143 00fc FFF7FEFF 		bl	dn_lt0
 20144              	.LVL1515:
3485:src/xeq.c     **** 		} else {
 20145              		.loc 1 3485 5 view .LVU5199
 20146 0100 B0FA80F0 		clz	r0, r0
 20147 0104 4009     		lsrs	r0, r0, #5
 20148 0106 FFF7FEFF 		bl	fin_tst
 20149              	.LVL1516:
 20150 010a C9E7     		b	.L1433
 20151              	.LVL1517:
 20152              	.L1451:
3485:src/xeq.c     **** 		} else {
 20153              		.loc 1 3485 5 view .LVU5200
 20154              	.LBE3039:
 20155              	.LBB3040:
3439:src/xeq.c     **** 		int xs;
 20156              		.loc 1 3439 3 is_stmt 1 view .LVU5201
3439:src/xeq.c     **** 		int xs;
 20157              		.loc 1 3439 21 is_stmt 0 view .LVU5202
 20158 010c FFF7FEFF 		bl	get_reg_n_int
 20159              	.LVL1518:
3440:src/xeq.c     **** 		unsigned long long int xv;
 20160              		.loc 1 3440 3 is_stmt 1 view .LVU5203
3441:src/xeq.c     **** 
 20161              		.loc 1 3441 3 view .LVU5204
3443:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20162              		.loc 1 3443 3 view .LVU5205
3443:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20163              		.loc 1 3443 6 is_stmt 0 view .LVU5206
 20164 0110 3B2C     		cmp	r4, #59
3444:src/xeq.c     **** 		else
 20165              		.loc 1 3444 8 view .LVU5207
 20166 0112 4FF00102 		mov	r2, #1
 20167 0116 4FF00003 		mov	r3, #0
3443:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20168              		.loc 1 3443 6 view .LVU5208
 20169 011a 4AD0     		beq	.L1421
3443:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20170              		.loc 1 3443 22 discriminator 1 view .LVU5209
 20171 011c 3D2C     		cmp	r4, #61
ARM GAS  /tmp/ccBFDvgN.s 			page 540


 20172 011e 24D1     		bne	.L1457
3444:src/xeq.c     **** 		else
 20173              		.loc 1 3444 4 is_stmt 1 view .LVU5210
3444:src/xeq.c     **** 		else
 20174              		.loc 1 3444 8 is_stmt 0 view .LVU5211
 20175 0120 FFF7FEFF 		bl	intAdd
 20176              	.LVL1519:
3444:src/xeq.c     **** 		else
 20177              		.loc 1 3444 8 view .LVU5212
 20178 0124 0646     		mov	r6, r0
 20179              	.LBB3041:
 20180              	.LBB3042:
1423:src/xeq.c     **** }
 20181              		.loc 1 1423 8 view .LVU5213
 20182 0126 2846     		mov	r0, r5
 20183              	.LBE3042:
 20184              	.LBE3041:
3444:src/xeq.c     **** 		else
 20185              		.loc 1 3444 8 view .LVU5214
 20186 0128 0C46     		mov	r4, r1
 20187              	.LVL1520:
3447:src/xeq.c     **** 
 20188              		.loc 1 3447 3 is_stmt 1 view .LVU5215
3447:src/xeq.c     **** 
 20189              		.loc 1 3447 3 is_stmt 0 view .LVU5216
 20190 012a CDE92461 		strd	r6, r1, [sp, #144]
 20191              	.LVL1521:
 20192              	.LBB3048:
 20193              	.LBI3041:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20194              		.loc 1 1422 6 is_stmt 1 view .LVU5217
 20195              	.LBB3043:
1423:src/xeq.c     **** }
 20196              		.loc 1 1423 2 view .LVU5218
1423:src/xeq.c     **** }
 20197              		.loc 1 1423 8 is_stmt 0 view .LVU5219
 20198 012e FFF7FEFF 		bl	get_reg_n
 20199              	.LVL1522:
1423:src/xeq.c     **** }
 20200              		.loc 1 1423 2 view .LVU5220
 20201 0132 24A9     		add	r1, sp, #144
 20202 0134 0822     		movs	r2, #8
 20203 0136 FFF7FEFF 		bl	xcopy
 20204              	.LVL1523:
1423:src/xeq.c     **** }
 20205              		.loc 1 1423 2 view .LVU5221
 20206              	.LBE3043:
 20207              	.LBE3048:
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20208              		.loc 1 3449 3 is_stmt 1 view .LVU5222
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20209              		.loc 1 3449 8 is_stmt 0 view .LVU5223
 20210 013a 24AA     		add	r2, sp, #144
 20211 013c 3046     		mov	r0, r6
 20212 013e 2146     		mov	r1, r4
 20213 0140 FFF7FEFF 		bl	extract_value
 20214              	.LVL1524:
ARM GAS  /tmp/ccBFDvgN.s 			page 541


3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20215              		.loc 1 3455 18 view .LVU5224
 20216 0144 249B     		ldr	r3, [sp, #144]
 20217              	.LVL1525:
3450:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20218              		.loc 1 3450 3 is_stmt 1 view .LVU5225
3452:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20219              		.loc 1 3452 8 view .LVU5226
3454:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
 20220              		.loc 1 3454 8 view .LVU5227
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20221              		.loc 1 3455 4 view .LVU5228
 20222 0146 23B1     		cbz	r3, .L1440
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20223              		.loc 1 3455 4 is_stmt 0 discriminator 1 view .LVU5229
 20224 0148 50EA0103 		orrs	r3, r0, r1
 20225 014c 14BF     		ite	ne
 20226 014e 0123     		movne	r3, #1
 20227 0150 0023     		moveq	r3, #0
 20228              	.L1440:
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20229              		.loc 1 3455 4 discriminator 6 view .LVU5230
 20230 0152 1846     		mov	r0, r3
 20231              	.LVL1526:
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20232              		.loc 1 3455 4 discriminator 6 view .LVU5231
 20233 0154 FFF7FEFF 		bl	fin_tst
 20234              	.LVL1527:
 20235 0158 AFE7     		b	.L1419
 20236              	.L1454:
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20237              		.loc 1 3455 4 discriminator 6 view .LVU5232
 20238              	.LBE3040:
 20239              	.LBB3053:
3497:src/xeq.c     **** 		} else
 20240              		.loc 1 3497 4 is_stmt 1 view .LVU5233
 20241 015a FFF7FEFF 		bl	dn_subtract
 20242              	.LVL1528:
 20243 015e A8E7     		b	.L1436
 20244              	.L1452:
3470:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20245              		.loc 1 3470 4 view .LVU5234
 20246 0160 1BA9     		add	r1, sp, #108
 20247 0162 0846     		mov	r0, r1
 20248 0164 FFF7FEFF 		bl	dn_minus
 20249              	.LVL1529:
 20250 0168 6AE7     		b	.L1429
 20251              	.LVL1530:
 20252              	.L1457:
3470:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20253              		.loc 1 3470 4 is_stmt 0 view .LVU5235
 20254              	.LBE3053:
 20255              	.LBB3054:
3446:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20256              		.loc 1 3446 4 is_stmt 1 view .LVU5236
3446:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20257              		.loc 1 3446 8 is_stmt 0 view .LVU5237
ARM GAS  /tmp/ccBFDvgN.s 			page 542


 20258 016a FFF7FEFF 		bl	intSubtract
 20259              	.LVL1531:
3446:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20260              		.loc 1 3446 8 view .LVU5238
 20261 016e 0746     		mov	r7, r0
 20262              	.LBB3049:
 20263              	.LBB3044:
1423:src/xeq.c     **** }
 20264              		.loc 1 1423 8 view .LVU5239
 20265 0170 2846     		mov	r0, r5
 20266              	.LBE3044:
 20267              	.LBE3049:
3446:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20268              		.loc 1 3446 8 view .LVU5240
 20269 0172 0E46     		mov	r6, r1
 20270              	.LVL1532:
3447:src/xeq.c     **** 
 20271              		.loc 1 3447 3 is_stmt 1 view .LVU5241
3447:src/xeq.c     **** 
 20272              		.loc 1 3447 3 is_stmt 0 view .LVU5242
 20273 0174 CDE92471 		strd	r7, r1, [sp, #144]
 20274              	.LVL1533:
 20275              	.LBB3050:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20276              		.loc 1 1422 6 is_stmt 1 view .LVU5243
 20277              	.LBB3045:
1423:src/xeq.c     **** }
 20278              		.loc 1 1423 2 view .LVU5244
1423:src/xeq.c     **** }
 20279              		.loc 1 1423 8 is_stmt 0 view .LVU5245
 20280 0178 FFF7FEFF 		bl	get_reg_n
 20281              	.LVL1534:
1423:src/xeq.c     **** }
 20282              		.loc 1 1423 2 view .LVU5246
 20283 017c 24A9     		add	r1, sp, #144
 20284 017e 0822     		movs	r2, #8
 20285 0180 FFF7FEFF 		bl	xcopy
 20286              	.LVL1535:
1423:src/xeq.c     **** }
 20287              		.loc 1 1423 2 view .LVU5247
 20288              	.LBE3045:
 20289              	.LBE3050:
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20290              		.loc 1 3449 3 is_stmt 1 view .LVU5248
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20291              		.loc 1 3449 8 is_stmt 0 view .LVU5249
 20292 0184 24AA     		add	r2, sp, #144
 20293 0186 3846     		mov	r0, r7
 20294 0188 3146     		mov	r1, r6
 20295 018a FFF7FEFF 		bl	extract_value
 20296              	.LVL1536:
3450:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20297              		.loc 1 3450 3 is_stmt 1 view .LVU5250
3452:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20298              		.loc 1 3452 8 view .LVU5251
3452:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20299              		.loc 1 3452 11 is_stmt 0 view .LVU5252
ARM GAS  /tmp/ccBFDvgN.s 			page 543


 20300 018e 3A2C     		cmp	r4, #58
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20301              		.loc 1 3453 4 view .LVU5253
 20302 0190 249B     		ldr	r3, [sp, #144]
3452:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20303              		.loc 1 3452 11 view .LVU5254
 20304 0192 25D0     		beq	.L1458
3457:src/xeq.c     **** 		return;
 20305              		.loc 1 3457 4 is_stmt 1 view .LVU5255
 20306 0194 13B3     		cbz	r3, .L1442
 20307              	.LVL1537:
 20308              	.L1450:
3457:src/xeq.c     **** 		return;
 20309              		.loc 1 3457 4 is_stmt 0 discriminator 2 view .LVU5256
 20310 0196 50EA0103 		orrs	r3, r0, r1
 20311 019a 0CBF     		ite	eq
 20312 019c 0120     		moveq	r0, #1
 20313 019e 0020     		movne	r0, #0
 20314              	.L1427:
3457:src/xeq.c     **** 		return;
 20315              		.loc 1 3457 4 discriminator 6 view .LVU5257
 20316 01a0 FFF7FEFF 		bl	fin_tst
 20317              	.LVL1538:
3458:src/xeq.c     **** 	} else {
 20318              		.loc 1 3458 3 is_stmt 1 discriminator 6 view .LVU5258
 20319              	.LBE3054:
3502:src/xeq.c     **** 
 20320              		.loc 1 3502 1 is_stmt 0 discriminator 6 view .LVU5259
 20321 01a4 2FB0     		add	sp, sp, #188
 20322              		.cfi_remember_state
 20323              		.cfi_def_cfa_offset 20
 20324              		@ sp needed
 20325 01a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 20326              	.LVL1539:
 20327              	.L1455:
 20328              		.cfi_restore_state
 20329              	.LBB3055:
3490:src/xeq.c     **** 			else
 20330              		.loc 1 3490 5 is_stmt 1 view .LVU5260
 20331 01a8 FFF7FEFF 		bl	dn_le0
 20332              	.LVL1540:
 20333 01ac FFF7FEFF 		bl	fin_tst
 20334              	.LVL1541:
 20335 01b0 76E7     		b	.L1433
 20336              	.LVL1542:
 20337              	.L1421:
3490:src/xeq.c     **** 			else
 20338              		.loc 1 3490 5 is_stmt 0 view .LVU5261
 20339              	.LBE3055:
 20340              	.LBB3056:
3444:src/xeq.c     **** 		else
 20341              		.loc 1 3444 4 is_stmt 1 view .LVU5262
3444:src/xeq.c     **** 		else
 20342              		.loc 1 3444 8 is_stmt 0 view .LVU5263
 20343 01b2 FFF7FEFF 		bl	intAdd
 20344              	.LVL1543:
3444:src/xeq.c     **** 		else
ARM GAS  /tmp/ccBFDvgN.s 			page 544


 20345              		.loc 1 3444 8 view .LVU5264
 20346 01b6 0646     		mov	r6, r0
 20347              	.LBB3051:
 20348              	.LBB3046:
1423:src/xeq.c     **** }
 20349              		.loc 1 1423 8 view .LVU5265
 20350 01b8 2846     		mov	r0, r5
 20351              	.LBE3046:
 20352              	.LBE3051:
3444:src/xeq.c     **** 		else
 20353              		.loc 1 3444 8 view .LVU5266
 20354 01ba 0C46     		mov	r4, r1
 20355              	.LVL1544:
3447:src/xeq.c     **** 
 20356              		.loc 1 3447 3 is_stmt 1 view .LVU5267
3447:src/xeq.c     **** 
 20357              		.loc 1 3447 3 is_stmt 0 view .LVU5268
 20358 01bc CDE92461 		strd	r6, r1, [sp, #144]
 20359              	.LVL1545:
 20360              	.LBB3052:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20361              		.loc 1 1422 6 is_stmt 1 view .LVU5269
 20362              	.LBB3047:
1423:src/xeq.c     **** }
 20363              		.loc 1 1423 2 view .LVU5270
1423:src/xeq.c     **** }
 20364              		.loc 1 1423 8 is_stmt 0 view .LVU5271
 20365 01c0 FFF7FEFF 		bl	get_reg_n
 20366              	.LVL1546:
1423:src/xeq.c     **** }
 20367              		.loc 1 1423 2 view .LVU5272
 20368 01c4 24A9     		add	r1, sp, #144
 20369 01c6 0822     		movs	r2, #8
 20370 01c8 FFF7FEFF 		bl	xcopy
 20371              	.LVL1547:
1423:src/xeq.c     **** }
 20372              		.loc 1 1423 2 view .LVU5273
 20373              	.LBE3047:
 20374              	.LBE3052:
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20375              		.loc 1 3449 3 is_stmt 1 view .LVU5274
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20376              		.loc 1 3449 8 is_stmt 0 view .LVU5275
 20377 01cc 24AA     		add	r2, sp, #144
 20378 01ce 3046     		mov	r0, r6
 20379 01d0 2146     		mov	r1, r4
 20380 01d2 FFF7FEFF 		bl	extract_value
 20381              	.LVL1548:
3451:src/xeq.c     **** 		else if (op == RARG_DSE)
 20382              		.loc 1 3451 4 view .LVU5276
 20383 01d6 249B     		ldr	r3, [sp, #144]
 20384              	.LVL1549:
3450:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20385              		.loc 1 3450 3 is_stmt 1 view .LVU5277
3451:src/xeq.c     **** 		else if (op == RARG_DSE)
 20386              		.loc 1 3451 4 view .LVU5278
 20387 01d8 002B     		cmp	r3, #0
ARM GAS  /tmp/ccBFDvgN.s 			page 545


 20388 01da DCD0     		beq	.L1450
 20389              	.LVL1550:
 20390              	.L1442:
3457:src/xeq.c     **** 		return;
 20391              		.loc 1 3457 4 is_stmt 0 view .LVU5279
 20392 01dc 0120     		movs	r0, #1
 20393 01de DFE7     		b	.L1427
 20394              	.LVL1551:
 20395              	.L1458:
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20396              		.loc 1 3453 4 is_stmt 1 view .LVU5280
 20397 01e0 2BB9     		cbnz	r3, .L1441
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20398              		.loc 1 3453 4 is_stmt 0 discriminator 1 view .LVU5281
 20399 01e2 50EA0103 		orrs	r3, r0, r1
 20400 01e6 14BF     		ite	ne
 20401 01e8 0120     		movne	r0, #1
 20402              	.LVL1552:
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20403              		.loc 1 3453 4 discriminator 1 view .LVU5282
 20404 01ea 0020     		moveq	r0, #0
 20405 01ec D8E7     		b	.L1427
 20406              	.LVL1553:
 20407              	.L1441:
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20408              		.loc 1 3453 4 view .LVU5283
 20409 01ee 0020     		movs	r0, #0
 20410              	.LVL1554:
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20411              		.loc 1 3453 4 view .LVU5284
 20412 01f0 D6E7     		b	.L1427
 20413              	.L1460:
 20414 01f2 00BF     		.align	2
 20415              	.L1459:
 20416 01f4 00000000 		.word	main_ram
 20417              	.LBE3056:
 20418              		.cfi_endproc
 20419              	.LFE196:
 20421              		.section	.text.op_shift_digit,"ax",%progbits
 20422              		.align	1
 20423              		.p2align 2,,3
 20424              		.global	op_shift_digit
 20425              		.syntax unified
 20426              		.thumb
 20427              		.thumb_func
 20428              		.fpu fpv4-sp-d16
 20430              	op_shift_digit:
 20431              	.LVL1555:
 20432              	.LFB197:
3507:src/xeq.c     **** 	decNumber x;
 20433              		.loc 1 3507 51 is_stmt 1 view -0
 20434              		.cfi_startproc
 20435              		@ args = 0, pretend = 0, frame = 40
 20436              		@ frame_needed = 0, uses_anonymous_args = 0
3508:src/xeq.c     **** 	int adjust = n;
 20437              		.loc 1 3508 2 view .LVU5286
3509:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 546


 20438              		.loc 1 3509 2 view .LVU5287
3511:src/xeq.c     **** 		bad_mode_error();
 20439              		.loc 1 3511 6 is_stmt 0 view .LVU5288
 20440 0000 174B     		ldr	r3, .L1470
 20441 0002 1B68     		ldr	r3, [r3]
 20442 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 20443              	.LVL1556:
3511:src/xeq.c     **** 		bad_mode_error();
 20444              		.loc 1 3511 2 is_stmt 1 view .LVU5289
3511:src/xeq.c     **** 		bad_mode_error();
 20445              		.loc 1 3511 5 is_stmt 0 view .LVU5290
 20446 0008 DB07     		lsls	r3, r3, #31
 20447 000a 06D5     		bpl	.L1462
3512:src/xeq.c     **** 		return;
 20448              		.loc 1 3512 3 is_stmt 1 view .LVU5291
 20449              	.LBB3068:
 20450              	.LBI3068:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 20451              		.loc 1 575 6 view .LVU5292
 20452              	.LBE3068:
 576:src/xeq.c     **** }
 20453              		.loc 1 576 2 view .LVU5293
 20454              	.LVL1557:
 20455              	.LBB3073:
 20456              	.LBB3069:
 20457              	.LBI3069:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20458              		.loc 1 546 5 view .LVU5294
 20459              	.LBB3070:
 547:src/xeq.c     **** 		Error = e;
 20460              		.loc 1 547 2 view .LVU5295
 547:src/xeq.c     **** 		Error = e;
 20461              		.loc 1 547 12 is_stmt 0 view .LVU5296
 20462 000c 154B     		ldr	r3, .L1470+4
 547:src/xeq.c     **** 		Error = e;
 20463              		.loc 1 547 5 view .LVU5297
 20464 000e 1A68     		ldr	r2, [r3]
 20465 0010 12B9     		cbnz	r2, .L1468
 20466              	.LVL1558:
 20467              	.LBB3071:
 20468              	.LBI3071:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20469              		.loc 1 546 5 is_stmt 1 view .LVU5298
 20470              	.LBB3072:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 20471              		.loc 1 548 3 view .LVU5299
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 20472              		.loc 1 548 9 is_stmt 0 view .LVU5300
 20473 0012 0D22     		movs	r2, #13
 20474 0014 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 20475              		.loc 1 549 3 is_stmt 1 view .LVU5301
 20476 0016 7047     		bx	lr
 20477              	.LVL1559:
 20478              	.L1468:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 20479              		.loc 1 549 3 is_stmt 0 view .LVU5302
ARM GAS  /tmp/ccBFDvgN.s 			page 547


 20480 0018 7047     		bx	lr
 20481              	.LVL1560:
 20482              	.L1462:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 20483              		.loc 1 549 3 view .LVU5303
 20484              	.LBE3072:
 20485              	.LBE3071:
 20486              	.LBE3070:
 20487              	.LBE3069:
 20488              	.LBE3073:
3515:src/xeq.c     **** 	setlastX();
 20489              		.loc 1 3515 2 is_stmt 1 view .LVU5304
3507:src/xeq.c     **** 	decNumber x;
 20490              		.loc 1 3507 51 is_stmt 0 view .LVU5305
 20491 001a 30B5     		push	{r4, r5, lr}
 20492              		.cfi_def_cfa_offset 12
 20493              		.cfi_offset 4, -12
 20494              		.cfi_offset 5, -8
 20495              		.cfi_offset 14, -4
 20496 001c 8BB0     		sub	sp, sp, #44
 20497              		.cfi_def_cfa_offset 56
 20498              	.LVL1561:
 20499              	.LBB3074:
 20500              	.LBI3074:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 20501              		.loc 1 824 12 is_stmt 1 view .LVU5306
 20502              	.LBB3075:
 825:src/xeq.c     **** }
 20503              		.loc 1 825 2 view .LVU5307
 20504 001e 0446     		mov	r4, r0
 20505 0020 0D46     		mov	r5, r1
 825:src/xeq.c     **** }
 20506              		.loc 1 825 9 is_stmt 0 view .LVU5308
 20507 0022 01A8     		add	r0, sp, #4
 20508              	.LVL1562:
 825:src/xeq.c     **** }
 20509              		.loc 1 825 9 view .LVU5309
 20510 0024 6421     		movs	r1, #100
 20511              	.LVL1563:
 825:src/xeq.c     **** }
 20512              		.loc 1 825 9 view .LVU5310
 20513 0026 FFF7FEFF 		bl	getRegister
 20514              	.LVL1564:
 825:src/xeq.c     **** }
 20515              		.loc 1 825 9 view .LVU5311
 20516              	.LBE3075:
 20517              	.LBE3074:
3516:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
 20518              		.loc 1 3516 2 is_stmt 1 view .LVU5312
 20519              	.LBB3076:
 20520              	.LBI3076:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 20521              		.loc 1 792 6 view .LVU5313
 20522              	.LBB3077:
 793:src/xeq.c     **** }
 20523              		.loc 1 793 2 view .LVU5314
 20524 002a 6421     		movs	r1, #100
ARM GAS  /tmp/ccBFDvgN.s 			page 548


 20525 002c 6C20     		movs	r0, #108
 20526 002e FFF7FEFF 		bl	copyreg_n
 20527              	.LVL1565:
 20528              	.LBE3077:
 20529              	.LBE3076:
3517:src/xeq.c     **** 		return;
 20530              		.loc 1 3517 2 view .LVU5315
3517:src/xeq.c     **** 		return;
 20531              		.loc 1 3517 5 is_stmt 0 view .LVU5316
 20532 0032 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 20533 0036 13F0700F 		tst	r3, #112
 20534 003a 0ED1     		bne	.L1461
3517:src/xeq.c     **** 		return;
 20535              		.loc 1 3517 32 discriminator 1 view .LVU5317
 20536 003c 01A8     		add	r0, sp, #4
 20537 003e FFF7FEFF 		bl	dn_eq0
 20538              	.LVL1566:
3517:src/xeq.c     **** 		return;
 20539              		.loc 1 3517 29 discriminator 1 view .LVU5318
 20540 0042 50B9     		cbnz	r0, .L1461
3519:src/xeq.c     **** 		adjust = -adjust;
 20541              		.loc 1 3519 5 view .LVU5319
 20542 0044 722D     		cmp	r5, #114
3509:src/xeq.c     **** 
 20543              		.loc 1 3509 6 view .LVU5320
 20544 0046 2046     		mov	r0, r4
3519:src/xeq.c     **** 		adjust = -adjust;
 20545              		.loc 1 3519 2 is_stmt 1 view .LVU5321
3520:src/xeq.c     **** 	x.exponent += adjust;
 20546              		.loc 1 3520 3 view .LVU5322
3520:src/xeq.c     **** 	x.exponent += adjust;
 20547              		.loc 1 3520 10 is_stmt 0 view .LVU5323
 20548 0048 08BF     		it	eq
 20549 004a 6042     		rsbeq	r0, r4, #0
 20550              	.LVL1567:
3521:src/xeq.c     **** 	setX(&x);
 20551              		.loc 1 3521 2 is_stmt 1 view .LVU5324
3521:src/xeq.c     **** 	setX(&x);
 20552              		.loc 1 3521 13 is_stmt 0 view .LVU5325
 20553 004c 029C     		ldr	r4, [sp, #8]
 20554              	.LVL1568:
 20555              	.LBB3078:
 20556              	.LBB3079:
 829:src/xeq.c     **** }
 20557              		.loc 1 829 2 view .LVU5326
 20558 004e 01A9     		add	r1, sp, #4
 20559              	.LBE3079:
 20560              	.LBE3078:
3521:src/xeq.c     **** 	setX(&x);
 20561              		.loc 1 3521 13 view .LVU5327
 20562 0050 0444     		add	r4, r4, r0
 20563              	.LBB3082:
 20564              	.LBB3080:
 829:src/xeq.c     **** }
 20565              		.loc 1 829 2 view .LVU5328
 20566 0052 6420     		movs	r0, #100
 20567              	.LVL1569:
ARM GAS  /tmp/ccBFDvgN.s 			page 549


 829:src/xeq.c     **** }
 20568              		.loc 1 829 2 view .LVU5329
 20569              	.LBE3080:
 20570              	.LBE3082:
3521:src/xeq.c     **** 	setX(&x);
 20571              		.loc 1 3521 13 view .LVU5330
 20572 0054 0294     		str	r4, [sp, #8]
3522:src/xeq.c     **** }
 20573              		.loc 1 3522 2 is_stmt 1 view .LVU5331
 20574              	.LVL1570:
 20575              	.LBB3083:
 20576              	.LBI3078:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 20577              		.loc 1 828 6 view .LVU5332
 20578              	.LBB3081:
 829:src/xeq.c     **** }
 20579              		.loc 1 829 2 view .LVU5333
 20580 0056 FFF7FEFF 		bl	setRegister
 20581              	.LVL1571:
 20582              	.L1461:
 829:src/xeq.c     **** }
 20583              		.loc 1 829 2 is_stmt 0 view .LVU5334
 20584              	.LBE3081:
 20585              	.LBE3083:
3523:src/xeq.c     **** 
 20586              		.loc 1 3523 1 view .LVU5335
 20587 005a 0BB0     		add	sp, sp, #44
 20588              		.cfi_def_cfa_offset 12
 20589              		@ sp needed
 20590 005c 30BD     		pop	{r4, r5, pc}
 20591              	.L1471:
 20592 005e 00BF     		.align	2
 20593              	.L1470:
 20594 0060 00000000 		.word	main_ram
 20595 0064 00000000 		.word	Error
 20596              		.cfi_endproc
 20597              	.LFE197:
 20599              		.section	.text.get_user_flag,"ax",%progbits
 20600              		.align	1
 20601              		.p2align 2,,3
 20602              		.global	get_user_flag
 20603              		.syntax unified
 20604              		.thumb
 20605              		.thumb_func
 20606              		.fpu fpv4-sp-d16
 20608              	get_user_flag:
 20609              	.LVL1572:
 20610              	.LFB199:
3556:src/xeq.c     **** 	unsigned short mask;
 20611              		.loc 1 3556 26 is_stmt 1 view -0
 20612              		.cfi_startproc
 20613              		@ args = 0, pretend = 0, frame = 8
 20614              		@ frame_needed = 0, uses_anonymous_args = 0
3557:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 20615              		.loc 1 3557 2 view .LVU5337
3558:src/xeq.c     **** 
 20616              		.loc 1 3558 2 view .LVU5338
ARM GAS  /tmp/ccBFDvgN.s 			page 550


3556:src/xeq.c     **** 	unsigned short mask;
 20617              		.loc 1 3556 26 is_stmt 0 view .LVU5339
 20618 0000 00B5     		push	{lr}
 20619              		.cfi_def_cfa_offset 4
 20620              		.cfi_offset 14, -4
 20621 0002 83B0     		sub	sp, sp, #12
 20622              		.cfi_def_cfa_offset 16
3558:src/xeq.c     **** 
 20623              		.loc 1 3558 34 view .LVU5340
 20624 0004 0DF10601 		add	r1, sp, #6
 20625 0008 FFF7FEFF 		bl	flag_word
 20626              	.LVL1573:
3560:src/xeq.c     **** }
 20627              		.loc 1 3560 2 is_stmt 1 view .LVU5341
3560:src/xeq.c     **** }
 20628              		.loc 1 3560 24 is_stmt 0 view .LVU5342
 20629 000c BDF80630 		ldrh	r3, [sp, #6]
 20630 0010 0288     		ldrh	r2, [r0]
 20631 0012 1A42     		tst	r2, r3
3561:src/xeq.c     **** 
 20632              		.loc 1 3561 1 view .LVU5343
 20633 0014 14BF     		ite	ne
 20634 0016 0120     		movne	r0, #1
 20635              	.LVL1574:
3561:src/xeq.c     **** 
 20636              		.loc 1 3561 1 view .LVU5344
 20637 0018 0020     		moveq	r0, #0
 20638 001a 03B0     		add	sp, sp, #12
 20639              		.cfi_def_cfa_offset 4
 20640              		@ sp needed
 20641 001c 5DF804FB 		ldr	pc, [sp], #4
 20642              		.cfi_endproc
 20643              	.LFE199:
 20645              		.section	.text.cmdflag,"ax",%progbits
 20646              		.align	1
 20647              		.p2align 2,,3
 20648              		.global	cmdflag
 20649              		.syntax unified
 20650              		.thumb
 20651              		.thumb_func
 20652              		.fpu fpv4-sp-d16
 20654              	cmdflag:
 20655              	.LVL1575:
 20656              	.LFB201:
3584:src/xeq.c     **** 	unsigned short mask;
 20657              		.loc 1 3584 46 is_stmt 1 view -0
 20658              		.cfi_startproc
 20659              		@ args = 0, pretend = 0, frame = 8
 20660              		@ frame_needed = 0, uses_anonymous_args = 0
3585:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
 20661              		.loc 1 3585 2 view .LVU5346
3586:src/xeq.c     **** 	int flg = *f & mask;
 20662              		.loc 1 3586 2 view .LVU5347
3584:src/xeq.c     **** 	unsigned short mask;
 20663              		.loc 1 3584 46 is_stmt 0 view .LVU5348
 20664 0000 70B5     		push	{r4, r5, r6, lr}
 20665              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccBFDvgN.s 			page 551


 20666              		.cfi_offset 4, -16
 20667              		.cfi_offset 5, -12
 20668              		.cfi_offset 6, -8
 20669              		.cfi_offset 14, -4
 20670 0002 82B0     		sub	sp, sp, #8
 20671              		.cfi_def_cfa_offset 24
3584:src/xeq.c     **** 	unsigned short mask;
 20672              		.loc 1 3584 46 view .LVU5349
 20673 0004 0C46     		mov	r4, r1
3586:src/xeq.c     **** 	int flg = *f & mask;
 20674              		.loc 1 3586 28 view .LVU5350
 20675 0006 0DF10601 		add	r1, sp, #6
 20676              	.LVL1576:
3584:src/xeq.c     **** 	unsigned short mask;
 20677              		.loc 1 3584 46 view .LVU5351
 20678 000a 0646     		mov	r6, r0
3586:src/xeq.c     **** 	int flg = *f & mask;
 20679              		.loc 1 3586 28 view .LVU5352
 20680 000c FFF7FEFF 		bl	flag_word
 20681              	.LVL1577:
3587:src/xeq.c     **** 
 20682              		.loc 1 3587 15 view .LVU5353
 20683 0010 BDF80620 		ldrh	r2, [sp, #6]
3587:src/xeq.c     **** 
 20684              		.loc 1 3587 12 view .LVU5354
 20685 0014 0388     		ldrh	r3, [r0]
 20686 0016 A4F15101 		sub	r1, r4, #81
3586:src/xeq.c     **** 	int flg = *f & mask;
 20687              		.loc 1 3586 28 view .LVU5355
 20688 001a 0546     		mov	r5, r0
 20689              	.LVL1578:
3587:src/xeq.c     **** 
 20690              		.loc 1 3587 2 is_stmt 1 view .LVU5356
3587:src/xeq.c     **** 
 20691              		.loc 1 3587 6 is_stmt 0 view .LVU5357
 20692 001c 03EA0200 		and	r0, r3, r2
 20693              	.LVL1579:
3589:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
 20694              		.loc 1 3589 2 is_stmt 1 view .LVU5358
 20695 0020 0A29     		cmp	r1, #10
 20696 0022 1AD8     		bhi	.L1474
 20697 0024 DFE801F0 		tbb	[pc, r1]
 20698              	.L1477:
 20699 0028 23       		.byte	(.L1487-.L1477)/2
 20700 0029 0E       		.byte	(.L1486-.L1477)/2
 20701 002a 46       		.byte	(.L1485-.L1477)/2
 20702 002b 29       		.byte	(.L1498-.L1477)/2
 20703 002c 26       		.byte	(.L1483-.L1477)/2
 20704 002d 09       		.byte	(.L1497-.L1477)/2
 20705 002e 1E       		.byte	(.L1496-.L1477)/2
 20706 002f 2D       		.byte	(.L1480-.L1477)/2
 20707 0030 06       		.byte	(.L1479-.L1477)/2
 20708 0031 1B       		.byte	(.L1478-.L1477)/2
 20709 0032 3A       		.byte	(.L1476-.L1477)/2
 20710 0033 00       		.p2align 1
 20711              	.L1479:
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
ARM GAS  /tmp/ccBFDvgN.s 			page 552


 20712              		.loc 1 3601 17 view .LVU5359
 20713 0034 B0FA80F0 		clz	r0, r0
 20714              	.LVL1580:
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20715              		.loc 1 3601 17 is_stmt 0 view .LVU5360
 20716 0038 4009     		lsrs	r0, r0, #5
 20717              	.L1497:
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20718              		.loc 1 3601 17 view .LVU5361
 20719 003a FFF7FEFF 		bl	fin_tst
 20720              	.LVL1581:
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20721              		.loc 1 3601 33 is_stmt 1 view .LVU5362
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20722              		.loc 1 3601 45 view .LVU5363
3610:src/xeq.c     **** 		*f |= mask;
 20723              		.loc 1 3610 2 view .LVU5364
 20724 003e 2B88     		ldrh	r3, [r5]
 20725 0040 BDF80620 		ldrh	r2, [sp, #6]
 20726              	.LVL1582:
 20727              	.L1486:
3613:src/xeq.c     **** 
 20728              		.loc 1 3613 3 view .LVU5365
3613:src/xeq.c     **** 
 20729              		.loc 1 3613 6 is_stmt 0 view .LVU5366
 20730 0044 23EA0203 		bic	r3, r3, r2
 20731 0048 0021     		movs	r1, #0
 20732              	.L1489:
3615:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20733              		.loc 1 3615 5 view .LVU5367
 20734 004a 682E     		cmp	r6, #104
 20735 004c 2B80     		strh	r3, [r5]	@ movhi
3615:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20736              		.loc 1 3615 2 is_stmt 1 view .LVU5368
3615:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20737              		.loc 1 3615 5 is_stmt 0 view .LVU5369
 20738 004e 04D1     		bne	.L1474
3616:src/xeq.c     **** 		finish_display(); // BIG_EQ
 20739              		.loc 1 3616 3 is_stmt 1 view .LVU5370
 20740 0050 8320     		movs	r0, #131
 20741 0052 FFF7FEFF 		bl	dot
 20742              	.LVL1583:
3617:src/xeq.c     **** 	}
 20743              		.loc 1 3617 3 view .LVU5371
 20744 0056 FFF7FEFF 		bl	finish_display
 20745              	.LVL1584:
 20746              	.L1474:
3619:src/xeq.c     **** 
 20747              		.loc 1 3619 1 is_stmt 0 view .LVU5372
 20748 005a 02B0     		add	sp, sp, #8
 20749              		.cfi_remember_state
 20750              		.cfi_def_cfa_offset 16
 20751              		@ sp needed
 20752 005c 70BD     		pop	{r4, r5, r6, pc}
 20753              	.LVL1585:
 20754              	.L1478:
 20755              		.cfi_restore_state
ARM GAS  /tmp/ccBFDvgN.s 			page 553


3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20756              		.loc 1 3602 17 is_stmt 1 view .LVU5373
 20757 005e B0FA80F0 		clz	r0, r0
 20758              	.LVL1586:
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20759              		.loc 1 3602 17 is_stmt 0 view .LVU5374
 20760 0062 4009     		lsrs	r0, r0, #5
 20761              	.L1496:
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20762              		.loc 1 3602 17 view .LVU5375
 20763 0064 FFF7FEFF 		bl	fin_tst
 20764              	.LVL1587:
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20765              		.loc 1 3602 33 is_stmt 1 view .LVU5376
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20766              		.loc 1 3602 45 view .LVU5377
3610:src/xeq.c     **** 		*f |= mask;
 20767              		.loc 1 3610 2 view .LVU5378
 20768 0068 2B88     		ldrh	r3, [r5]
 20769 006a BDF80620 		ldrh	r2, [sp, #6]
 20770              	.LVL1588:
 20771              	.L1487:
3611:src/xeq.c     **** 	else
 20772              		.loc 1 3611 3 view .LVU5379
3611:src/xeq.c     **** 	else
 20773              		.loc 1 3611 6 is_stmt 0 view .LVU5380
 20774 006e 1343     		orrs	r3, r3, r2
 20775 0070 0121     		movs	r1, #1
 20776 0072 EAE7     		b	.L1489
 20777              	.LVL1589:
 20778              	.L1483:
3595:src/xeq.c     **** 
 20779              		.loc 1 3595 16 is_stmt 1 view .LVU5381
 20780 0074 B0FA80F0 		clz	r0, r0
 20781              	.LVL1590:
3595:src/xeq.c     **** 
 20782              		.loc 1 3595 16 is_stmt 0 view .LVU5382
 20783 0078 4009     		lsrs	r0, r0, #5
 20784              	.L1498:
3595:src/xeq.c     **** 
 20785              		.loc 1 3595 16 view .LVU5383
 20786 007a FFF7FEFF 		bl	fin_tst
 20787              	.LVL1591:
3595:src/xeq.c     **** 
 20788              		.loc 1 3595 37 is_stmt 1 view .LVU5384
3619:src/xeq.c     **** 
 20789              		.loc 1 3619 1 is_stmt 0 view .LVU5385
 20790 007e 02B0     		add	sp, sp, #8
 20791              		.cfi_remember_state
 20792              		.cfi_def_cfa_offset 16
 20793              		@ sp needed
 20794 0080 70BD     		pop	{r4, r5, r6, pc}
 20795              	.LVL1592:
 20796              	.L1480:
 20797              		.cfi_restore_state
3599:src/xeq.c     **** 
 20798              		.loc 1 3599 17 is_stmt 1 view .LVU5386
ARM GAS  /tmp/ccBFDvgN.s 			page 554


3599:src/xeq.c     **** 
 20799              		.loc 1 3599 45 is_stmt 0 view .LVU5387
 20800 0082 B0FA80F4 		clz	r4, r0
 20801 0086 6409     		lsrs	r4, r4, #5
3599:src/xeq.c     **** 
 20802              		.loc 1 3599 17 view .LVU5388
 20803 0088 FFF7FEFF 		bl	fin_tst
 20804              	.LVL1593:
3599:src/xeq.c     **** 
 20805              		.loc 1 3599 31 is_stmt 1 view .LVU5389
3599:src/xeq.c     **** 
 20806              		.loc 1 3599 52 view .LVU5390
3610:src/xeq.c     **** 		*f |= mask;
 20807              		.loc 1 3610 2 view .LVU5391
 20808 008c 2B88     		ldrh	r3, [r5]
 20809 008e BDF80620 		ldrh	r2, [sp, #6]
3610:src/xeq.c     **** 		*f |= mask;
 20810              		.loc 1 3610 5 is_stmt 0 view .LVU5392
 20811 0092 002C     		cmp	r4, #0
 20812 0094 D6D0     		beq	.L1486
 20813              	.L1499:
 20814              	.LVL1594:
3611:src/xeq.c     **** 	else
 20815              		.loc 1 3611 3 is_stmt 1 view .LVU5393
3611:src/xeq.c     **** 	else
 20816              		.loc 1 3611 6 is_stmt 0 view .LVU5394
 20817 0096 1343     		orrs	r3, r3, r2
 20818 0098 0121     		movs	r1, #1
 20819 009a D6E7     		b	.L1489
 20820              	.LVL1595:
 20821              	.L1476:
3603:src/xeq.c     **** 
 20822              		.loc 1 3603 17 is_stmt 1 view .LVU5395
 20823 009c B0FA80F4 		clz	r4, r0
 20824 00a0 6409     		lsrs	r4, r4, #5
 20825 00a2 2046     		mov	r0, r4
 20826              	.LVL1596:
3603:src/xeq.c     **** 
 20827              		.loc 1 3603 17 is_stmt 0 view .LVU5396
 20828 00a4 FFF7FEFF 		bl	fin_tst
 20829              	.LVL1597:
3603:src/xeq.c     **** 
 20830              		.loc 1 3603 33 is_stmt 1 view .LVU5397
3603:src/xeq.c     **** 
 20831              		.loc 1 3603 52 view .LVU5398
 20832 00a8 2B88     		ldrh	r3, [r5]
 20833 00aa BDF80620 		ldrh	r2, [sp, #6]
3610:src/xeq.c     **** 		*f |= mask;
 20834              		.loc 1 3610 2 view .LVU5399
3610:src/xeq.c     **** 		*f |= mask;
 20835              		.loc 1 3610 5 is_stmt 0 view .LVU5400
 20836 00ae 002C     		cmp	r4, #0
 20837 00b0 C8D0     		beq	.L1486
 20838 00b2 F0E7     		b	.L1499
 20839              	.LVL1598:
 20840              	.L1485:
3592:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 555


 20841              		.loc 1 3592 16 is_stmt 1 view .LVU5401
3592:src/xeq.c     **** 
 20842              		.loc 1 3592 29 is_stmt 0 view .LVU5402
 20843 00b4 B0FA80F4 		clz	r4, r0
 20844 00b8 6409     		lsrs	r4, r4, #5
 20845              	.LVL1599:
3592:src/xeq.c     **** 
 20846              		.loc 1 3592 38 is_stmt 1 view .LVU5403
3610:src/xeq.c     **** 		*f |= mask;
 20847              		.loc 1 3610 2 view .LVU5404
3610:src/xeq.c     **** 		*f |= mask;
 20848              		.loc 1 3610 5 is_stmt 0 view .LVU5405
 20849 00ba 002C     		cmp	r4, #0
 20850 00bc C2D0     		beq	.L1486
 20851 00be EAE7     		b	.L1499
 20852              		.cfi_endproc
 20853              	.LFE201:
 20855              		.section	.text.put_user_flag,"ax",%progbits
 20856              		.align	1
 20857              		.p2align 2,,3
 20858              		.global	put_user_flag
 20859              		.syntax unified
 20860              		.thumb
 20861              		.thumb_func
 20862              		.fpu fpv4-sp-d16
 20864              	put_user_flag:
 20865              	.LVL1600:
 20866              	.LFB200:
3563:src/xeq.c     **** 	if (f)	set_user_flag(n);
 20867              		.loc 1 3563 34 is_stmt 1 view -0
 20868              		.cfi_startproc
 20869              		@ args = 0, pretend = 0, frame = 0
 20870              		@ frame_needed = 0, uses_anonymous_args = 0
 20871              		@ link register save eliminated.
3564:src/xeq.c     **** 	else	clr_user_flag(n);
 20872              		.loc 1 3564 2 view .LVU5407
3564:src/xeq.c     **** 	else	clr_user_flag(n);
 20873              		.loc 1 3564 5 is_stmt 0 view .LVU5408
 20874 0000 11B1     		cbz	r1, .L1501
3564:src/xeq.c     **** 	else	clr_user_flag(n);
 20875              		.loc 1 3564 9 is_stmt 1 discriminator 1 view .LVU5409
 20876 0002 5121     		movs	r1, #81
 20877              	.LVL1601:
3564:src/xeq.c     **** 	else	clr_user_flag(n);
 20878              		.loc 1 3564 9 is_stmt 0 discriminator 1 view .LVU5410
 20879 0004 FFF7FEBF 		b	cmdflag
 20880              	.LVL1602:
 20881              	.L1501:
3565:src/xeq.c     **** }
 20882              		.loc 1 3565 7 is_stmt 1 view .LVU5411
 20883 0008 5221     		movs	r1, #82
 20884              	.LVL1603:
3565:src/xeq.c     **** }
 20885              		.loc 1 3565 7 is_stmt 0 view .LVU5412
 20886 000a FFF7FEBF 		b	cmdflag
 20887              	.LVL1604:
3565:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 556


 20888              		.loc 1 3565 7 view .LVU5413
 20889              		.cfi_endproc
 20890              	.LFE200:
 20892 000e 00BF     		.section	.text.clrflags,"ax",%progbits
 20893              		.align	1
 20894              		.p2align 2,,3
 20895              		.global	clrflags
 20896              		.syntax unified
 20897              		.thumb
 20898              		.thumb_func
 20899              		.fpu fpv4-sp-d16
 20901              	clrflags:
 20902              	.LVL1605:
 20903              	.LFB202:
3623:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20904              		.loc 1 3623 30 is_stmt 1 view -0
 20905              		.cfi_startproc
 20906              		@ args = 0, pretend = 0, frame = 0
 20907              		@ frame_needed = 0, uses_anonymous_args = 0
3624:src/xeq.c     **** 	if (LocalRegs < 0) {
 20908              		.loc 1 3624 2 view .LVU5415
3623:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20909              		.loc 1 3623 30 is_stmt 0 view .LVU5416
 20910 0000 10B5     		push	{r4, lr}
 20911              		.cfi_def_cfa_offset 8
 20912              		.cfi_offset 4, -8
 20913              		.cfi_offset 14, -4
3624:src/xeq.c     **** 	if (LocalRegs < 0) {
 20914              		.loc 1 3624 7 view .LVU5417
 20915 0002 0A4C     		ldr	r4, .L1506
 20916 0004 2068     		ldr	r0, [r4]
 20917              	.LVL1606:
3624:src/xeq.c     **** 	if (LocalRegs < 0) {
 20918              		.loc 1 3624 2 view .LVU5418
 20919 0006 0E22     		movs	r2, #14
 20920 0008 00F5FE60 		add	r0, r0, #2032
 20921 000c 0021     		movs	r1, #0
 20922 000e FFF7FEFF 		bl	xset
 20923              	.LVL1607:
3625:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20924              		.loc 1 3625 2 is_stmt 1 view .LVU5419
3625:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20925              		.loc 1 3625 6 is_stmt 0 view .LVU5420
 20926 0012 2368     		ldr	r3, [r4]
3625:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20927              		.loc 1 3625 5 view .LVU5421
 20928 0014 B3F9DE37 		ldrsh	r3, [r3, #2014]
 20929 0018 002B     		cmp	r3, #0
 20930 001a 00DB     		blt	.L1505
3628:src/xeq.c     **** 
 20931              		.loc 1 3628 1 view .LVU5422
 20932 001c 10BD     		pop	{r4, pc}
 20933              	.L1505:
3626:src/xeq.c     **** 	}
 20934              		.loc 1 3626 3 is_stmt 1 view .LVU5423
3626:src/xeq.c     **** 	}
 20935              		.loc 1 3626 5 is_stmt 0 view .LVU5424
ARM GAS  /tmp/ccBFDvgN.s 			page 557


 20936 001e 0021     		movs	r1, #0
 20937 0020 7020     		movs	r0, #112
 20938 0022 FFF7FEFF 		bl	flag_word
 20939              	.LVL1608:
3626:src/xeq.c     **** 	}
 20940              		.loc 1 3626 37 view .LVU5425
 20941 0026 0023     		movs	r3, #0
 20942 0028 0380     		strh	r3, [r0]	@ movhi
3628:src/xeq.c     **** 
 20943              		.loc 1 3628 1 view .LVU5426
 20944 002a 10BD     		pop	{r4, pc}
 20945              	.L1507:
 20946              		.align	2
 20947              	.L1506:
 20948 002c 00000000 		.word	main_ram
 20949              		.cfi_endproc
 20950              	.LFE202:
 20952              		.section	.text.intws,"ax",%progbits
 20953              		.align	1
 20954              		.p2align 2,,3
 20955              		.global	intws
 20956              		.syntax unified
 20957              		.thumb
 20958              		.thumb_func
 20959              		.fpu fpv4-sp-d16
 20961              	intws:
 20962              	.LVL1609:
 20963              	.LFB203:
3633:src/xeq.c     **** 	if (is_intmode()) {
 20964              		.loc 1 3633 44 is_stmt 1 view -0
 20965              		.cfi_startproc
 20966              		@ args = 0, pretend = 0, frame = 8
 20967              		@ frame_needed = 0, uses_anonymous_args = 0
3634:src/xeq.c     **** 		int i, ss = stack_size();
 20968              		.loc 1 3634 2 view .LVU5428
3633:src/xeq.c     **** 	if (is_intmode()) {
 20969              		.loc 1 3633 44 is_stmt 0 view .LVU5429
 20970 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20971              		.cfi_def_cfa_offset 24
 20972              		.cfi_offset 4, -24
 20973              		.cfi_offset 5, -20
 20974              		.cfi_offset 6, -16
 20975              		.cfi_offset 7, -12
 20976              		.cfi_offset 8, -8
 20977              		.cfi_offset 14, -4
3634:src/xeq.c     **** 		int i, ss = stack_size();
 20978              		.loc 1 3634 6 view .LVU5430
 20979 0004 DFF8E080 		ldr	r8, .L1519+4
 20980 0008 D8F80030 		ldr	r3, [r8]
 20981 000c 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3634:src/xeq.c     **** 		int i, ss = stack_size();
 20982              		.loc 1 3634 5 view .LVU5431
 20983 0010 D107     		lsls	r1, r2, #31
 20984              	.LVL1610:
3633:src/xeq.c     **** 	if (is_intmode()) {
 20985              		.loc 1 3633 44 view .LVU5432
 20986 0012 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccBFDvgN.s 			page 558


 20987              		.cfi_def_cfa_offset 32
3634:src/xeq.c     **** 		int i, ss = stack_size();
 20988              		.loc 1 3634 5 view .LVU5433
 20989 0014 53D5     		bpl	.L1509
 20990              	.LBB3084:
3635:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
 20991              		.loc 1 3635 3 is_stmt 1 view .LVU5434
 20992              	.LBB3085:
 20993              	.LBI3085:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 20994              		.loc 1 712 5 view .LVU5435
 20995              	.LBB3086:
 713:src/xeq.c     **** 		return 4;
 20996              		.loc 1 713 2 view .LVU5436
 713:src/xeq.c     **** 		return 4;
 20997              		.loc 1 713 6 is_stmt 0 view .LVU5437
 20998 0016 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 20999              		.loc 1 713 5 view .LVU5438
 21000 001a 1207     		lsls	r2, r2, #28
 21001 001c 58D5     		bpl	.L1513
 21002              	.LBB3087:
 21003              	.LBI3087:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 21004              		.loc 1 185 5 is_stmt 1 view .LVU5439
 21005              	.LBB3088:
 186:src/xeq.c     **** }
 21006              		.loc 1 186 2 view .LVU5440
 186:src/xeq.c     **** }
 21007              		.loc 1 186 9 is_stmt 0 view .LVU5441
 21008 001e B3F8E027 		ldrh	r2, [r3, #2016]
 21009              	.LBE3088:
 21010              	.LBE3087:
 713:src/xeq.c     **** 		return 4;
 21011              		.loc 1 713 27 view .LVU5442
 21012 0022 920B     		lsrs	r2, r2, #14
 21013 0024 032A     		cmp	r2, #3
 21014 0026 55D0     		beq	.L1518
 715:src/xeq.c     **** }
 21015              		.loc 1 715 9 view .LVU5443
 21016 0028 0827     		movs	r7, #8
 21017              	.L1510:
 21018              	.LVL1611:
 715:src/xeq.c     **** }
 21019              		.loc 1 715 9 view .LVU5444
 21020              	.LBE3086:
 21021              	.LBE3085:
3636:src/xeq.c     **** 		long long int v;
 21022              		.loc 1 3636 3 is_stmt 1 view .LVU5445
3636:src/xeq.c     **** 		long long int v;
 21023              		.loc 1 3636 31 is_stmt 0 view .LVU5446
 21024 002a 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 21025 002e 00F03F05 		and	r5, r0, #63
 21026 0032 06F03F06 		and	r6, r6, #63
 21027              	.LVL1612:
3637:src/xeq.c     **** 
 21028              		.loc 1 3637 3 is_stmt 1 view .LVU5447
ARM GAS  /tmp/ccBFDvgN.s 			page 559


3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21029              		.loc 1 3639 3 view .LVU5448
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21030              		.loc 1 3639 13 view .LVU5449
 21031 0036 6437     		adds	r7, r7, #100
 21032              	.LVL1613:
3636:src/xeq.c     **** 		long long int v;
 21033              		.loc 1 3636 31 is_stmt 0 view .LVU5450
 21034 0038 6424     		movs	r4, #100
 21035              	.LVL1614:
 21036              	.L1511:
3640:src/xeq.c     **** 			UState.int_len = arg;
 21037              		.loc 1 3640 4 is_stmt 1 discriminator 3 view .LVU5451
3640:src/xeq.c     **** 			UState.int_len = arg;
 21038              		.loc 1 3640 8 is_stmt 0 discriminator 3 view .LVU5452
 21039 003a 2046     		mov	r0, r4
 21040 003c FFF7FEFF 		bl	get_reg_n_int
 21041              	.LVL1615:
 21042 0040 FFF7FEFF 		bl	mask_value
 21043              	.LVL1616:
3641:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 21044              		.loc 1 3641 4 is_stmt 1 discriminator 3 view .LVU5453
3641:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 21045              		.loc 1 3641 19 is_stmt 0 discriminator 3 view .LVU5454
 21046 0044 D8F80030 		ldr	r3, [r8]
 21047 0048 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21048 004c 65F30502 		bfi	r2, r5, #0, #6
 21049 0050 83F8E927 		strb	r2, [r3, #2025]
3642:src/xeq.c     **** 			UState.int_len = oldlen;
 21050              		.loc 1 3642 4 is_stmt 1 discriminator 3 view .LVU5455
 21051 0054 FFF7FEFF 		bl	mask_value
 21052              	.LVL1617:
3642:src/xeq.c     **** 			UState.int_len = oldlen;
 21053              		.loc 1 3642 4 is_stmt 0 discriminator 3 view .LVU5456
 21054 0058 0B46     		mov	r3, r1
 21055 005a 0246     		mov	r2, r0
 21056              	.LBB3090:
 21057              	.LBB3091:
1423:src/xeq.c     **** }
 21058              		.loc 1 1423 8 discriminator 3 view .LVU5457
 21059 005c 2046     		mov	r0, r4
 21060 005e CDE90023 		strd	r2, [sp]
 21061              	.LVL1618:
1423:src/xeq.c     **** }
 21062              		.loc 1 1423 8 discriminator 3 view .LVU5458
 21063              	.LBE3091:
 21064              	.LBI3090:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 21065              		.loc 1 1422 6 is_stmt 1 discriminator 3 view .LVU5459
 21066              	.LBB3092:
1423:src/xeq.c     **** }
 21067              		.loc 1 1423 2 discriminator 3 view .LVU5460
1423:src/xeq.c     **** }
 21068              		.loc 1 1423 8 is_stmt 0 discriminator 3 view .LVU5461
 21069 0062 FFF7FEFF 		bl	get_reg_n
 21070              	.LVL1619:
1423:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 560


 21071              		.loc 1 1423 2 discriminator 3 view .LVU5462
 21072 0066 0822     		movs	r2, #8
 21073 0068 6946     		mov	r1, sp
 21074 006a FFF7FEFF 		bl	xcopy
 21075              	.LVL1620:
1423:src/xeq.c     **** }
 21076              		.loc 1 1423 2 discriminator 3 view .LVU5463
 21077              	.LBE3092:
 21078              	.LBE3090:
3643:src/xeq.c     **** 		}
 21079              		.loc 1 3643 4 is_stmt 1 discriminator 3 view .LVU5464
3643:src/xeq.c     **** 		}
 21080              		.loc 1 3643 19 is_stmt 0 discriminator 3 view .LVU5465
 21081 006e D8F80030 		ldr	r3, [r8]
 21082 0072 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21083 0076 0134     		adds	r4, r4, #1
 21084              	.LVL1621:
3643:src/xeq.c     **** 		}
 21085              		.loc 1 3643 19 discriminator 3 view .LVU5466
 21086 0078 66F30502 		bfi	r2, r6, #0, #6
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21087              		.loc 1 3639 3 discriminator 3 view .LVU5467
 21088 007c BC42     		cmp	r4, r7
3643:src/xeq.c     **** 		}
 21089              		.loc 1 3643 19 discriminator 3 view .LVU5468
 21090 007e 83F8E927 		strb	r2, [r3, #2025]
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21091              		.loc 1 3639 19 is_stmt 1 discriminator 3 view .LVU5469
 21092              	.LVL1622:
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21093              		.loc 1 3639 13 discriminator 3 view .LVU5470
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21094              		.loc 1 3639 3 is_stmt 0 discriminator 3 view .LVU5471
 21095 0082 DAD1     		bne	.L1511
3645:src/xeq.c     **** 		UState.int_len = arg;
 21096              		.loc 1 3645 3 is_stmt 1 view .LVU5472
3645:src/xeq.c     **** 		UState.int_len = arg;
 21097              		.loc 1 3645 7 is_stmt 0 view .LVU5473
 21098 0084 6C20     		movs	r0, #108
 21099 0086 FFF7FEFF 		bl	get_reg_n_int
 21100              	.LVL1623:
 21101 008a FFF7FEFF 		bl	mask_value
 21102              	.LVL1624:
3646:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 21103              		.loc 1 3646 3 is_stmt 1 view .LVU5474
3646:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 21104              		.loc 1 3646 18 is_stmt 0 view .LVU5475
 21105 008e D8F80030 		ldr	r3, [r8]
 21106 0092 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21107 0096 65F30502 		bfi	r2, r5, #0, #6
 21108 009a 83F8E927 		strb	r2, [r3, #2025]
3647:src/xeq.c     **** 	} else
 21109              		.loc 1 3647 3 is_stmt 1 view .LVU5476
 21110 009e FFF7FEFF 		bl	mask_value
 21111              	.LVL1625:
3647:src/xeq.c     **** 	} else
 21112              		.loc 1 3647 3 is_stmt 0 view .LVU5477
ARM GAS  /tmp/ccBFDvgN.s 			page 561


 21113 00a2 0B46     		mov	r3, r1
 21114 00a4 0246     		mov	r2, r0
 21115              	.LBB3093:
 21116              	.LBB3094:
1423:src/xeq.c     **** }
 21117              		.loc 1 1423 8 view .LVU5478
 21118 00a6 6C20     		movs	r0, #108
 21119 00a8 CDE90023 		strd	r2, [sp]
 21120              	.LVL1626:
1423:src/xeq.c     **** }
 21121              		.loc 1 1423 8 view .LVU5479
 21122              	.LBE3094:
 21123              	.LBI3093:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 21124              		.loc 1 1422 6 is_stmt 1 view .LVU5480
 21125              	.LBB3095:
1423:src/xeq.c     **** }
 21126              		.loc 1 1423 2 view .LVU5481
1423:src/xeq.c     **** }
 21127              		.loc 1 1423 8 is_stmt 0 view .LVU5482
 21128 00ac FFF7FEFF 		bl	get_reg_n
 21129              	.LVL1627:
1423:src/xeq.c     **** }
 21130              		.loc 1 1423 2 view .LVU5483
 21131 00b0 6946     		mov	r1, sp
 21132 00b2 0822     		movs	r2, #8
 21133 00b4 FFF7FEFF 		bl	xcopy
 21134              	.LVL1628:
1423:src/xeq.c     **** }
 21135              		.loc 1 1423 2 view .LVU5484
 21136              	.LBE3095:
 21137              	.LBE3093:
 21138              	.LBE3084:
3650:src/xeq.c     **** 
 21139              		.loc 1 3650 1 view .LVU5485
 21140 00b8 02B0     		add	sp, sp, #8
 21141              		.cfi_remember_state
 21142              		.cfi_def_cfa_offset 24
 21143              		@ sp needed
 21144 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21145              	.LVL1629:
 21146              	.L1509:
 21147              		.cfi_restore_state
3649:src/xeq.c     **** }
 21148              		.loc 1 3649 6 is_stmt 1 view .LVU5486
3649:src/xeq.c     **** }
 21149              		.loc 1 3649 21 is_stmt 0 view .LVU5487
 21150 00be 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21151 00c2 60F30502 		bfi	r2, r0, #0, #6
 21152              	.LVL1630:
3649:src/xeq.c     **** }
 21153              		.loc 1 3649 21 view .LVU5488
 21154 00c6 83F8E927 		strb	r2, [r3, #2025]
3650:src/xeq.c     **** 
 21155              		.loc 1 3650 1 view .LVU5489
 21156 00ca 02B0     		add	sp, sp, #8
 21157              		.cfi_remember_state
ARM GAS  /tmp/ccBFDvgN.s 			page 562


 21158              		.cfi_def_cfa_offset 24
 21159              		@ sp needed
 21160 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21161              	.LVL1631:
 21162              	.L1513:
 21163              		.cfi_restore_state
 21164              	.LBB3097:
 21165              	.LBB3096:
 21166              	.LBB3089:
 714:src/xeq.c     **** 	return 8;
 21167              		.loc 1 714 10 view .LVU5490
 21168 00d0 0427     		movs	r7, #4
 21169 00d2 AAE7     		b	.L1510
 21170              	.L1518:
 713:src/xeq.c     **** 		return 4;
 21171              		.loc 1 713 44 view .LVU5491
 21172 00d4 034A     		ldr	r2, .L1519
 713:src/xeq.c     **** 		return 4;
 21173              		.loc 1 713 41 view .LVU5492
 21174 00d6 92F90120 		ldrsb	r2, [r2, #1]
 714:src/xeq.c     **** 	return 8;
 21175              		.loc 1 714 10 view .LVU5493
 21176 00da 002A     		cmp	r2, #0
 21177 00dc B4BF     		ite	lt
 21178 00de 0827     		movlt	r7, #8
 21179 00e0 0427     		movge	r7, #4
 21180 00e2 A2E7     		b	.L1510
 21181              	.L1520:
 21182              		.align	2
 21183              	.L1519:
 21184 00e4 00000000 		.word	XromParams
 21185 00e8 00000000 		.word	main_ram
 21186              	.LBE3089:
 21187              	.LBE3096:
 21188              	.LBE3097:
 21189              		.cfi_endproc
 21190              	.LFE203:
 21192              		.section	.text.get_maxdenom,"ax",%progbits
 21193              		.align	1
 21194              		.p2align 2,,3
 21195              		.global	get_maxdenom
 21196              		.syntax unified
 21197              		.thumb
 21198              		.thumb_func
 21199              		.fpu fpv4-sp-d16
 21201              	get_maxdenom:
 21202              	.LVL1632:
 21203              	.LFB204:
3656:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
 21204              		.loc 1 3656 33 is_stmt 1 view -0
 21205              		.cfi_startproc
 21206              		@ args = 0, pretend = 0, frame = 0
 21207              		@ frame_needed = 0, uses_anonymous_args = 0
 21208              		@ link register save eliminated.
3657:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21209              		.loc 1 3657 2 view .LVU5495
3657:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
ARM GAS  /tmp/ccBFDvgN.s 			page 563


 21210              		.loc 1 3657 32 is_stmt 0 view .LVU5496
 21211 0000 064B     		ldr	r3, .L1523
 21212 0002 1B68     		ldr	r3, [r3]
 21213 0004 D3F8E417 		ldr	r1, [r3, #2020]
3658:src/xeq.c     **** }
 21214              		.loc 1 3658 2 view .LVU5497
 21215 0008 42F20F73 		movw	r3, #9999
3657:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21216              		.loc 1 3657 32 view .LVU5498
 21217 000c C1F38D11 		ubfx	r1, r1, #6, #14
 21218              	.LVL1633:
3658:src/xeq.c     **** }
 21219              		.loc 1 3658 2 is_stmt 1 view .LVU5499
 21220 0010 0029     		cmp	r1, #0
 21221 0012 08BF     		it	eq
 21222 0014 1946     		moveq	r1, r3
 21223 0016 FFF7FEBF 		b	int_to_dn
 21224              	.LVL1634:
 21225              	.L1524:
3658:src/xeq.c     **** }
 21226              		.loc 1 3658 2 is_stmt 0 view .LVU5500
 21227 001a 00BF     		.align	2
 21228              	.L1523:
 21229 001c 00000000 		.word	main_ram
 21230              		.cfi_endproc
 21231              	.LFE204:
 21233              		.section	.rodata.op_2frac.str1.4,"aMS",%progbits,1
 21234              		.align	2
 21235              	.LC4:
 21236 0000 792F7820 		.ascii	"y/x =\000"
 21236      3D00
 21237 0006 0000     		.align	2
 21238              	.LC5:
 21239 0008 792F7820 		.ascii	"y/x \007\344<\000"
 21239      07E43C00 
 21240              		.align	2
 21241              	.LC6:
 21242 0010 792F7820 		.ascii	"y/x \007\344>\000"
 21242      07E43E00 
 21243              		.section	.text.op_2frac,"ax",%progbits
 21244              		.align	1
 21245              		.p2align 2,,3
 21246              		.global	op_2frac
 21247              		.syntax unified
 21248              		.thumb
 21249              		.thumb_func
 21250              		.fpu fpv4-sp-d16
 21252              	op_2frac:
 21253              	.LVL1635:
 21254              	.LFB205:
3661:src/xeq.c     **** 	decNumber z, n, d, t;
 21255              		.loc 1 3661 30 is_stmt 1 view -0
 21256              		.cfi_startproc
 21257              		@ args = 0, pretend = 0, frame = 144
 21258              		@ frame_needed = 0, uses_anonymous_args = 0
3662:src/xeq.c     **** 
 21259              		.loc 1 3662 2 view .LVU5502
ARM GAS  /tmp/ccBFDvgN.s 			page 564


3664:src/xeq.c     **** 		setX_int(1);
 21260              		.loc 1 3664 2 view .LVU5503
3664:src/xeq.c     **** 		setX_int(1);
 21261              		.loc 1 3664 6 is_stmt 0 view .LVU5504
 21262 0000 214B     		ldr	r3, .L1537
3661:src/xeq.c     **** 	decNumber z, n, d, t;
 21263              		.loc 1 3661 30 view .LVU5505
 21264 0002 00B5     		push	{lr}
 21265              		.cfi_def_cfa_offset 4
 21266              		.cfi_offset 14, -4
3664:src/xeq.c     **** 		setX_int(1);
 21267              		.loc 1 3664 6 view .LVU5506
 21268 0004 1B68     		ldr	r3, [r3]
 21269 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3664:src/xeq.c     **** 		setX_int(1);
 21270              		.loc 1 3664 5 view .LVU5507
 21271 000a DA07     		lsls	r2, r3, #31
3661:src/xeq.c     **** 	decNumber z, n, d, t;
 21272              		.loc 1 3661 30 view .LVU5508
 21273 000c A5B0     		sub	sp, sp, #148
 21274              		.cfi_def_cfa_offset 152
3664:src/xeq.c     **** 		setX_int(1);
 21275              		.loc 1 3664 5 view .LVU5509
 21276 000e 27D4     		bmi	.L1535
3669:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
 21277              		.loc 1 3669 2 is_stmt 1 view .LVU5510
 21278              	.LVL1636:
 21279              	.LBB3098:
 21280              	.LBI3098:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 21281              		.loc 1 832 6 view .LVU5511
 21282              	.LBB3099:
 833:src/xeq.c     **** }
 21283              		.loc 1 833 2 view .LVU5512
 21284 0010 6521     		movs	r1, #101
 21285 0012 6846     		mov	r0, sp
 21286              	.LVL1637:
 833:src/xeq.c     **** }
 21287              		.loc 1 833 2 is_stmt 0 view .LVU5513
 21288 0014 FFF7FEFF 		bl	getRegister
 21289              	.LVL1638:
 833:src/xeq.c     **** }
 21290              		.loc 1 833 2 view .LVU5514
 21291              	.LBE3099:
 21292              	.LBE3098:
3670:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
 21293              		.loc 1 3670 2 is_stmt 1 view .LVU5515
 21294 0018 6A46     		mov	r2, sp
 21295 001a 12A9     		add	r1, sp, #72
 21296 001c 09A8     		add	r0, sp, #36
 21297 001e FFF7FEFF 		bl	decNumber2Fraction
 21298              	.LVL1639:
3671:src/xeq.c     **** 	if (State2.runmode) {
 21299              		.loc 1 3671 2 view .LVU5516
 21300 0022 09A9     		add	r1, sp, #36
 21301 0024 12A8     		add	r0, sp, #72
 21302 0026 FFF7FEFF 		bl	setXY
ARM GAS  /tmp/ccBFDvgN.s 			page 565


 21303              	.LVL1640:
3672:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21304              		.loc 1 3672 2 view .LVU5517
3672:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21305              		.loc 1 3672 6 is_stmt 0 view .LVU5518
 21306 002a 184B     		ldr	r3, .L1537+4
 21307 002c 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3672:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21308              		.loc 1 3672 5 view .LVU5519
 21309 002e 5B06     		lsls	r3, r3, #25
 21310 0030 02D4     		bmi	.L1536
3688:src/xeq.c     **** 
 21311              		.loc 1 3688 1 view .LVU5520
 21312 0032 25B0     		add	sp, sp, #148
 21313              		.cfi_remember_state
 21314              		.cfi_def_cfa_offset 4
 21315              		@ sp needed
 21316 0034 5DF804FB 		ldr	pc, [sp], #4
 21317              	.L1536:
 21318              		.cfi_restore_state
3673:src/xeq.c     **** 		dn_compare(&n, &t, &z);
 21319              		.loc 1 3673 3 is_stmt 1 view .LVU5521
 21320 0038 12AA     		add	r2, sp, #72
 21321 003a 09A9     		add	r1, sp, #36
 21322 003c 1BA8     		add	r0, sp, #108
 21323 003e FFF7FEFF 		bl	dn_divide
 21324              	.LVL1641:
3674:src/xeq.c     **** 		if (dn_eq0(&n))
 21325              		.loc 1 3674 3 view .LVU5522
 21326 0042 6A46     		mov	r2, sp
 21327 0044 1BA9     		add	r1, sp, #108
 21328 0046 09A8     		add	r0, sp, #36
 21329 0048 FFF7FEFF 		bl	dn_compare
 21330              	.LVL1642:
3675:src/xeq.c     **** 			DispMsg = "y/x =";
 21331              		.loc 1 3675 3 view .LVU5523
3675:src/xeq.c     **** 			DispMsg = "y/x =";
 21332              		.loc 1 3675 7 is_stmt 0 view .LVU5524
 21333 004c 09A8     		add	r0, sp, #36
 21334 004e FFF7FEFF 		bl	dn_eq0
 21335              	.LVL1643:
3675:src/xeq.c     **** 			DispMsg = "y/x =";
 21336              		.loc 1 3675 6 view .LVU5525
 21337 0052 60B1     		cbz	r0, .L1529
3676:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21338              		.loc 1 3676 4 is_stmt 1 view .LVU5526
3676:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21339              		.loc 1 3676 12 is_stmt 0 view .LVU5527
 21340 0054 0E4B     		ldr	r3, .L1537+8
 21341 0056 0F4A     		ldr	r2, .L1537+12
 21342 0058 1A60     		str	r2, [r3]
3688:src/xeq.c     **** 
 21343              		.loc 1 3688 1 view .LVU5528
 21344 005a 25B0     		add	sp, sp, #148
 21345              		.cfi_remember_state
 21346              		.cfi_def_cfa_offset 4
 21347              		@ sp needed
ARM GAS  /tmp/ccBFDvgN.s 			page 566


 21348 005c 5DF804FB 		ldr	pc, [sp], #4
 21349              	.LVL1644:
 21350              	.L1535:
 21351              		.cfi_restore_state
3665:src/xeq.c     **** 		return;
 21352              		.loc 1 3665 3 is_stmt 1 view .LVU5529
 21353 0060 0120     		movs	r0, #1
 21354              	.LVL1645:
3665:src/xeq.c     **** 		return;
 21355              		.loc 1 3665 3 is_stmt 0 view .LVU5530
 21356 0062 0021     		movs	r1, #0
 21357 0064 FFF7FEFF 		bl	setX_int
 21358              	.LVL1646:
3666:src/xeq.c     **** 	}
 21359              		.loc 1 3666 3 is_stmt 1 view .LVU5531
3688:src/xeq.c     **** 
 21360              		.loc 1 3688 1 is_stmt 0 view .LVU5532
 21361 0068 25B0     		add	sp, sp, #148
 21362              		.cfi_remember_state
 21363              		.cfi_def_cfa_offset 4
 21364              		@ sp needed
 21365 006a 5DF804FB 		ldr	pc, [sp], #4
 21366              	.L1529:
 21367              		.cfi_restore_state
3677:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21368              		.loc 1 3677 8 is_stmt 1 view .LVU5533
3677:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21369              		.loc 1 3677 11 is_stmt 0 view .LVU5534
 21370 006e 9DF92C30 		ldrsb	r3, [sp, #44]
 21371 0072 002B     		cmp	r3, #0
3679:src/xeq.c     **** 		else
 21372              		.loc 1 3679 12 view .LVU5535
 21373 0074 B8BF     		it	lt
 21374 0076 084A     		ldrlt	r2, .L1537+16
 21375 0078 054B     		ldr	r3, .L1537+8
3679:src/xeq.c     **** 		else
 21376              		.loc 1 3679 4 is_stmt 1 view .LVU5536
3681:src/xeq.c     **** #else
 21377              		.loc 1 3681 4 view .LVU5537
3681:src/xeq.c     **** #else
 21378              		.loc 1 3681 12 is_stmt 0 view .LVU5538
 21379 007a A8BF     		it	ge
 21380 007c 074A     		ldrge	r2, .L1537+20
 21381 007e 1A60     		str	r2, [r3]
3688:src/xeq.c     **** 
 21382              		.loc 1 3688 1 view .LVU5539
 21383 0080 25B0     		add	sp, sp, #148
 21384              		.cfi_def_cfa_offset 4
 21385              		@ sp needed
 21386 0082 5DF804FB 		ldr	pc, [sp], #4
 21387              	.L1538:
 21388 0086 00BF     		.align	2
 21389              	.L1537:
 21390 0088 00000000 		.word	main_ram
 21391 008c 00000000 		.word	StateWhileOn
 21392 0090 00000000 		.word	DispMsg
 21393 0094 00000000 		.word	.LC4
ARM GAS  /tmp/ccBFDvgN.s 			page 567


 21394 0098 08000000 		.word	.LC5
 21395 009c 10000000 		.word	.LC6
 21396              		.cfi_endproc
 21397              	.LFE205:
 21399              		.section	.text.op_fracdenom,"ax",%progbits
 21400              		.align	1
 21401              		.p2align 2,,3
 21402              		.global	op_fracdenom
 21403              		.syntax unified
 21404              		.thumb
 21405              		.thumb_func
 21406              		.fpu fpv4-sp-d16
 21408              	op_fracdenom:
 21409              	.LVL1647:
 21410              	.LFB206:
3690:src/xeq.c     **** 	int s;
 21411              		.loc 1 3690 34 is_stmt 1 view -0
 21412              		.cfi_startproc
 21413              		@ args = 0, pretend = 0, frame = 8
 21414              		@ frame_needed = 0, uses_anonymous_args = 0
3691:src/xeq.c     **** 	unsigned long long int i;
 21415              		.loc 1 3691 2 view .LVU5541
3692:src/xeq.c     **** 
 21416              		.loc 1 3692 2 view .LVU5542
3694:src/xeq.c     **** 	if (i > 9999)
 21417              		.loc 1 3694 2 view .LVU5543
3690:src/xeq.c     **** 	int s;
 21418              		.loc 1 3690 34 is_stmt 0 view .LVU5544
 21419 0000 2DE90048 		push	{fp, lr}
 21420              		.cfi_def_cfa_offset 8
 21421              		.cfi_offset 11, -8
 21422              		.cfi_offset 14, -4
 21423 0004 84B0     		sub	sp, sp, #16
 21424              		.cfi_def_cfa_offset 24
 21425              	.LVL1648:
 21426              	.LBB3100:
 21427              	.LBI3100:
1446:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 21428              		.loc 1 1446 24 is_stmt 1 view .LVU5545
 21429              	.LBB3101:
1447:src/xeq.c     **** }
 21430              		.loc 1 1447 2 view .LVU5546
1447:src/xeq.c     **** }
 21431              		.loc 1 1447 9 is_stmt 0 view .LVU5547
 21432 0006 03A9     		add	r1, sp, #12
 21433              	.LVL1649:
1447:src/xeq.c     **** }
 21434              		.loc 1 1447 9 view .LVU5548
 21435 0008 6420     		movs	r0, #100
 21436              	.LVL1650:
1447:src/xeq.c     **** }
 21437              		.loc 1 1447 9 view .LVU5549
 21438 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 21439              	.LVL1651:
1447:src/xeq.c     **** }
 21440              		.loc 1 1447 9 view .LVU5550
 21441 000e 8C46     		mov	ip, r1
ARM GAS  /tmp/ccBFDvgN.s 			page 568


 21442              	.LVL1652:
1447:src/xeq.c     **** }
 21443              		.loc 1 1447 9 view .LVU5551
 21444              	.LBE3101:
 21445              	.LBE3100:
3695:src/xeq.c     **** 		UState.denom_max = 0;
 21446              		.loc 1 3695 5 view .LVU5552
 21447 0010 0021     		movs	r1, #0
 21448              	.LBB3103:
 21449              	.LBB3102:
1447:src/xeq.c     **** }
 21450              		.loc 1 1447 9 view .LVU5553
 21451 0012 8346     		mov	fp, r0
 21452              	.LVL1653:
1447:src/xeq.c     **** }
 21453              		.loc 1 1447 9 view .LVU5554
 21454              	.LBE3102:
 21455              	.LBE3103:
3695:src/xeq.c     **** 		UState.denom_max = 0;
 21456              		.loc 1 3695 2 is_stmt 1 view .LVU5555
3695:src/xeq.c     **** 		UState.denom_max = 0;
 21457              		.loc 1 3695 5 is_stmt 0 view .LVU5556
 21458 0014 6145     		cmp	r1, ip
 21459 0016 42F20F70 		movw	r0, #9999
 21460 001a 08BF     		it	eq
 21461 001c 5845     		cmpeq	r0, fp
 21462 001e 0AD2     		bcs	.L1540
3696:src/xeq.c     **** 	else if (i != 1)
 21463              		.loc 1 3696 3 is_stmt 1 view .LVU5557
3696:src/xeq.c     **** 	else if (i != 1)
 21464              		.loc 1 3696 20 is_stmt 0 view .LVU5558
 21465 0020 174B     		ldr	r3, .L1544
 21466 0022 1B68     		ldr	r3, [r3]
 21467 0024 D3F8E427 		ldr	r2, [r3, #2020]
 21468 0028 6FF39312 		bfc	r2, #6, #14
 21469 002c C3F8E427 		str	r2, [r3, #2020]
3703:src/xeq.c     **** 
 21470              		.loc 1 3703 1 view .LVU5559
 21471 0030 04B0     		add	sp, sp, #16
 21472              		.cfi_remember_state
 21473              		.cfi_def_cfa_offset 8
 21474              		@ sp needed
 21475 0032 BDE80088 		pop	{fp, pc}
 21476              	.LVL1654:
 21477              	.L1540:
 21478              		.cfi_restore_state
3697:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21479              		.loc 1 3697 7 is_stmt 1 view .LVU5560
3697:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21480              		.loc 1 3697 10 is_stmt 0 view .LVU5561
 21481 0036 BCF1000F 		cmp	ip, #0
 21482 003a 08BF     		it	eq
 21483 003c BBF1010F 		cmpeq	fp, #1
 21484 0040 0AD0     		beq	.L1542
3698:src/xeq.c     **** 	else {
 21485              		.loc 1 3698 3 is_stmt 1 view .LVU5562
3698:src/xeq.c     **** 	else {
ARM GAS  /tmp/ccBFDvgN.s 			page 569


 21486              		.loc 1 3698 20 is_stmt 0 view .LVU5563
 21487 0042 0F4B     		ldr	r3, .L1544
 21488 0044 1B68     		ldr	r3, [r3]
 21489 0046 D3F8E417 		ldr	r1, [r3, #2020]
 21490 004a 6BF39311 		bfi	r1, fp, #6, #14
 21491 004e C3F8E417 		str	r1, [r3, #2020]
3703:src/xeq.c     **** 
 21492              		.loc 1 3703 1 view .LVU5564
 21493 0052 04B0     		add	sp, sp, #16
 21494              		.cfi_remember_state
 21495              		.cfi_def_cfa_offset 8
 21496              		@ sp needed
 21497 0054 BDE80088 		pop	{fp, pc}
 21498              	.LVL1655:
 21499              	.L1542:
 21500              		.cfi_restore_state
3700:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
 21501              		.loc 1 3700 3 is_stmt 1 view .LVU5565
 21502              	.LBB3104:
 21503              	.LBI3104:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 21504              		.loc 1 792 6 view .LVU5566
 21505              	.LBB3105:
 793:src/xeq.c     **** }
 21506              		.loc 1 793 2 view .LVU5567
 21507 0058 6421     		movs	r1, #100
 21508 005a 6C20     		movs	r0, #108
 21509 005c FFF7FEFF 		bl	copyreg_n
 21510              	.LVL1656:
 21511              	.LBE3105:
 21512              	.LBE3104:
3701:src/xeq.c     **** 	}
 21513              		.loc 1 3701 3 view .LVU5568
 21514              	.LBB3106:
 21515              	.LBI3106:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 21516              		.loc 1 1509 6 view .LVU5569
 21517              	.LBB3107:
1510:src/xeq.c     **** }
 21518              		.loc 1 1510 2 view .LVU5570
 21519              	.LBE3107:
 21520              	.LBE3106:
3701:src/xeq.c     **** 	}
 21521              		.loc 1 3701 22 is_stmt 0 view .LVU5571
 21522 0060 074B     		ldr	r3, .L1544
 21523              	.LVL1657:
3701:src/xeq.c     **** 	}
 21524              		.loc 1 3701 22 view .LVU5572
 21525 0062 1B68     		ldr	r3, [r3]
 21526              	.LVL1658:
3701:src/xeq.c     **** 	}
 21527              		.loc 1 3701 22 view .LVU5573
 21528 0064 D3F8E427 		ldr	r2, [r3, #2020]
 21529              	.LBB3110:
 21530              	.LBB3108:
1510:src/xeq.c     **** }
 21531              		.loc 1 1510 2 view .LVU5574
ARM GAS  /tmp/ccBFDvgN.s 			page 570


 21532 0068 0021     		movs	r1, #0
 21533              	.LBE3108:
 21534              	.LBE3110:
3701:src/xeq.c     **** 	}
 21535              		.loc 1 3701 22 view .LVU5575
 21536 006a C2F38D12 		ubfx	r2, r2, #6, #14
 21537              	.LBB3111:
 21538              	.LBB3109:
1510:src/xeq.c     **** }
 21539              		.loc 1 1510 2 view .LVU5576
 21540 006e 92B2     		uxth	r2, r2
 21541 0070 0023     		movs	r3, #0
 21542              	.LVL1659:
1510:src/xeq.c     **** }
 21543              		.loc 1 1510 2 view .LVU5577
 21544 0072 0091     		str	r1, [sp]
 21545              	.LVL1660:
1510:src/xeq.c     **** }
 21546              		.loc 1 1510 2 view .LVU5578
 21547 0074 6420     		movs	r0, #100
 21548 0076 FFF7FEFF 		bl	set_reg_n_int_sgn
 21549              	.LVL1661:
1510:src/xeq.c     **** }
 21550              		.loc 1 1510 2 view .LVU5579
 21551              	.LBE3109:
 21552              	.LBE3111:
3703:src/xeq.c     **** 
 21553              		.loc 1 3703 1 view .LVU5580
 21554 007a 04B0     		add	sp, sp, #16
 21555              		.cfi_def_cfa_offset 8
 21556              		@ sp needed
 21557 007c BDE80088 		pop	{fp, pc}
 21558              	.LVL1662:
 21559              	.L1545:
3703:src/xeq.c     **** 
 21560              		.loc 1 3703 1 view .LVU5581
 21561              		.align	2
 21562              	.L1544:
 21563 0080 00000000 		.word	main_ram
 21564              		.cfi_endproc
 21565              	.LFE206:
 21567              		.section	.text.op_float,"ax",%progbits
 21568              		.align	1
 21569              		.p2align 2,,3
 21570              		.global	op_float
 21571              		.syntax unified
 21572              		.thumb
 21573              		.thumb_func
 21574              		.fpu fpv4-sp-d16
 21576              	op_float:
 21577              	.LVL1663:
 21578              	.LFB207:
3711:src/xeq.c     **** 
 21579              		.loc 1 3711 30 is_stmt 1 view -0
 21580              		.cfi_startproc
 21581              		@ args = 0, pretend = 0, frame = 40
 21582              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBFDvgN.s 			page 571


3713:src/xeq.c     **** 		int i;
 21583              		.loc 1 3713 2 view .LVU5583
3711:src/xeq.c     **** 
 21584              		.loc 1 3711 30 is_stmt 0 view .LVU5584
 21585 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 21586              		.cfi_def_cfa_offset 28
 21587              		.cfi_offset 4, -28
 21588              		.cfi_offset 5, -24
 21589              		.cfi_offset 6, -20
 21590              		.cfi_offset 7, -16
 21591              		.cfi_offset 8, -12
 21592              		.cfi_offset 9, -8
 21593              		.cfi_offset 14, -4
3713:src/xeq.c     **** 		int i;
 21594              		.loc 1 3713 6 view .LVU5585
 21595 0004 2F4F     		ldr	r7, .L1558
 21596 0006 3B68     		ldr	r3, [r7]
 21597 0008 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3713:src/xeq.c     **** 		int i;
 21598              		.loc 1 3713 5 view .LVU5586
 21599 000c D207     		lsls	r2, r2, #31
3711:src/xeq.c     **** 
 21600              		.loc 1 3711 30 view .LVU5587
 21601 000e 8BB0     		sub	sp, sp, #44
 21602              		.cfi_def_cfa_offset 72
3711:src/xeq.c     **** 
 21603              		.loc 1 3711 30 view .LVU5588
 21604 0010 0646     		mov	r6, r0
3713:src/xeq.c     **** 		int i;
 21605              		.loc 1 3713 5 view .LVU5589
 21606 0012 27D5     		bpl	.L1547
 21607              	.LBB3112:
3714:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
 21608              		.loc 1 3714 3 is_stmt 1 view .LVU5590
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21609              		.loc 1 3715 3 view .LVU5591
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21610              		.loc 1 3715 33 is_stmt 0 view .LVU5592
 21611 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21612              		.loc 1 3715 26 view .LVU5593
 21613 0018 2B4A     		ldr	r2, .L1558+4
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21614              		.loc 1 3715 33 view .LVU5594
 21615 001a C3F3C003 		ubfx	r3, r3, #3, #1
3716:src/xeq.c     **** 			if (mask & 1) {
 21616              		.loc 1 3716 10 view .LVU5595
 21617 001e 6424     		movs	r4, #100
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21618              		.loc 1 3715 7 view .LVU5596
 21619 0020 32F81350 		ldrh	r5, [r2, r3, lsl #1]
 21620              	.LVL1664:
3716:src/xeq.c     **** 			if (mask & 1) {
 21621              		.loc 1 3716 3 is_stmt 1 view .LVU5597
3716:src/xeq.c     **** 			if (mask & 1) {
 21622              		.loc 1 3716 22 view .LVU5598
 21623              	.LBB3113:
ARM GAS  /tmp/ccBFDvgN.s 			page 572


 21624              	.LBB3114:
1119:src/xeq.c     **** }
 21625              		.loc 1 1119 24 is_stmt 0 view .LVU5599
 21626 0024 44F20108 		movw	r8, #16385
 21627 0028 0CE0     		b	.L1550
 21628              	.LVL1665:
 21629              	.L1548:
1119:src/xeq.c     **** }
 21630              		.loc 1 1119 24 view .LVU5600
 21631 002a 3B68     		ldr	r3, [r7]
 21632 002c B3F8E837 		ldrh	r3, [r3, #2024]
 21633              	.LBE3114:
 21634              	.LBE3113:
3721:src/xeq.c     **** 				// expand the other registers which have been left
 21635              		.loc 1 3721 12 view .LVU5601
 21636 0030 08EA0303 		and	r3, r8, r3
 21637 0034 B3F5804F 		cmp	r3, #16384
 21638 0038 32D0     		beq	.L1557
 21639              	.L1549:
3716:src/xeq.c     **** 			if (mask & 1) {
 21640              		.loc 1 3716 37 is_stmt 1 discriminator 2 view .LVU5602
 21641 003a 0134     		adds	r4, r4, #1
 21642              	.LVL1666:
3716:src/xeq.c     **** 			if (mask & 1) {
 21643              		.loc 1 3716 3 is_stmt 0 discriminator 2 view .LVU5603
 21644 003c 702C     		cmp	r4, #112
3716:src/xeq.c     **** 			if (mask & 1) {
 21645              		.loc 1 3716 47 discriminator 2 view .LVU5604
 21646 003e 4FEA6505 		asr	r5, r5, #1
 21647              	.LVL1667:
3716:src/xeq.c     **** 			if (mask & 1) {
 21648              		.loc 1 3716 22 is_stmt 1 discriminator 2 view .LVU5605
3716:src/xeq.c     **** 			if (mask & 1) {
 21649              		.loc 1 3716 3 is_stmt 0 discriminator 2 view .LVU5606
 21650 0042 0FD0     		beq	.L1547
 21651              	.LVL1668:
 21652              	.L1550:
3717:src/xeq.c     **** 				// register belongs to stack
 21653              		.loc 1 3717 4 is_stmt 1 view .LVU5607
3721:src/xeq.c     **** 				// expand the other registers which have been left
 21654              		.loc 1 3721 9 view .LVU5608
 21655              	.LBB3116:
 21656              	.LBI3113:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 21657              		.loc 1 1118 5 view .LVU5609
 21658              	.LBB3115:
1119:src/xeq.c     **** }
 21659              		.loc 1 1119 2 view .LVU5610
 21660              	.LBE3115:
 21661              	.LBE3116:
3717:src/xeq.c     **** 				// register belongs to stack
 21662              		.loc 1 3717 7 is_stmt 0 view .LVU5611
 21663 0044 EB07     		lsls	r3, r5, #31
 21664 0046 F0D5     		bpl	.L1548
3719:src/xeq.c     **** 			}
 21665              		.loc 1 3719 5 is_stmt 1 view .LVU5612
 21666 0048 A6F1D102 		sub	r2, r6, #209
ARM GAS  /tmp/ccBFDvgN.s 			page 573


 21667 004c B2FA82F2 		clz	r2, r2
 21668 0050 2146     		mov	r1, r4
 21669 0052 2046     		mov	r0, r4
 21670 0054 5209     		lsrs	r2, r2, #5
3716:src/xeq.c     **** 			if (mask & 1) {
 21671              		.loc 1 3716 37 is_stmt 0 view .LVU5613
 21672 0056 0134     		adds	r4, r4, #1
 21673              	.LVL1669:
3719:src/xeq.c     **** 			}
 21674              		.loc 1 3719 5 view .LVU5614
 21675 0058 FFF7FEFF 		bl	register_from_int
 21676              	.LVL1670:
3716:src/xeq.c     **** 			if (mask & 1) {
 21677              		.loc 1 3716 37 is_stmt 1 view .LVU5615
3716:src/xeq.c     **** 			if (mask & 1) {
 21678              		.loc 1 3716 3 is_stmt 0 view .LVU5616
 21679 005c 702C     		cmp	r4, #112
3716:src/xeq.c     **** 			if (mask & 1) {
 21680              		.loc 1 3716 47 view .LVU5617
 21681 005e 4FEA6505 		asr	r5, r5, #1
 21682              	.LVL1671:
3716:src/xeq.c     **** 			if (mask & 1) {
 21683              		.loc 1 3716 22 is_stmt 1 view .LVU5618
3716:src/xeq.c     **** 			if (mask & 1) {
 21684              		.loc 1 3716 3 is_stmt 0 view .LVU5619
 21685 0062 EFD1     		bne	.L1550
 21686              	.LVL1672:
 21687              	.L1547:
3716:src/xeq.c     **** 			if (mask & 1) {
 21688              		.loc 1 3716 3 view .LVU5620
 21689              	.LBE3112:
3728:src/xeq.c     **** 		UState.fract = 0;
 21690              		.loc 1 3728 2 is_stmt 1 view .LVU5621
3728:src/xeq.c     **** 		UState.fract = 0;
 21691              		.loc 1 3728 25 is_stmt 0 view .LVU5622
 21692 0064 06F12F03 		add	r3, r6, #47
3728:src/xeq.c     **** 		UState.fract = 0;
 21693              		.loc 1 3728 5 view .LVU5623
 21694 0068 DBB2     		uxtb	r3, r3
 21695 006a 012B     		cmp	r3, #1
 21696 006c 10D9     		bls	.L1551
3729:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21697              		.loc 1 3729 3 is_stmt 1 view .LVU5624
3729:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21698              		.loc 1 3729 16 is_stmt 0 view .LVU5625
 21699 006e 3A68     		ldr	r2, [r7]
3730:src/xeq.c     **** 	}
 21700              		.loc 1 3730 14 view .LVU5626
 21701 0070 164B     		ldr	r3, .L1558+8
3729:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21702              		.loc 1 3729 16 view .LVU5627
 21703 0072 92F8E617 		ldrb	r1, [r2, #2022]	@ zero_extendqisi2
 21704 0076 6FF34511 		bfc	r1, #5, #1
 21705 007a 82F8E617 		strb	r1, [r2, #2022]
3730:src/xeq.c     **** 	}
 21706              		.loc 1 3730 3 is_stmt 1 view .LVU5628
3730:src/xeq.c     **** 	}
ARM GAS  /tmp/ccBFDvgN.s 			page 574


 21707              		.loc 1 3730 35 is_stmt 0 view .LVU5629
 21708 007e A6F15C06 		sub	r6, #92
3730:src/xeq.c     **** 	}
 21709              		.loc 1 3730 14 view .LVU5630
 21710 0082 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
3730:src/xeq.c     **** 	}
 21711              		.loc 1 3730 35 view .LVU5631
 21712 0084 B6FA86F6 		clz	r6, r6
 21713 0088 7609     		lsrs	r6, r6, #5
3730:src/xeq.c     **** 	}
 21714              		.loc 1 3730 14 view .LVU5632
 21715 008a 66F30002 		bfi	r2, r6, #0, #1
 21716 008e DA75     		strb	r2, [r3, #23]
 21717              	.L1551:
3732:src/xeq.c     **** }
 21718              		.loc 1 3732 2 is_stmt 1 view .LVU5633
3732:src/xeq.c     **** }
 21719              		.loc 1 3732 14 is_stmt 0 view .LVU5634
 21720 0090 6420     		movs	r0, #100
 21721 0092 FFF7FEFF 		bl	get_reg_n
 21722              	.LVL1673:
3732:src/xeq.c     **** }
 21723              		.loc 1 3732 12 view .LVU5635
 21724 0096 0E4B     		ldr	r3, .L1558+12
 21725 0098 1860     		str	r0, [r3]
3733:src/xeq.c     **** 
 21726              		.loc 1 3733 1 view .LVU5636
 21727 009a 0BB0     		add	sp, sp, #44
 21728              		.cfi_remember_state
 21729              		.cfi_def_cfa_offset 28
 21730              		@ sp needed
 21731 009c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 21732              	.LVL1674:
 21733              	.L1557:
 21734              		.cfi_restore_state
 21735              	.LBB3119:
3724:src/xeq.c     **** 			}
 21736              		.loc 1 3724 5 is_stmt 1 view .LVU5637
3724:src/xeq.c     **** 			}
 21737              		.loc 1 3724 29 is_stmt 0 view .LVU5638
 21738 00a0 2046     		mov	r0, r4
 21739 00a2 FFF7FEFF 		bl	get_reg_n
 21740              	.LVL1675:
3724:src/xeq.c     **** 			}
 21741              		.loc 1 3724 47 view .LVU5639
 21742 00a6 3B68     		ldr	r3, [r7]
 21743 00a8 03F22C43 		addw	r3, r3, #1068
3724:src/xeq.c     **** 			}
 21744              		.loc 1 3724 29 view .LVU5640
 21745 00ac 8146     		mov	r9, r0
 21746              	.LVL1676:
 21747              	.LBB3117:
 21748              	.LBI3117:
 654:src/xeq.c     **** 	decNumber temp;
 21749              		.loc 1 654 6 is_stmt 1 view .LVU5641
 21750              	.LBB3118:
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
ARM GAS  /tmp/ccBFDvgN.s 			page 575


 21751              		.loc 1 655 2 view .LVU5642
 656:src/xeq.c     **** }
 21752              		.loc 1 656 2 view .LVU5643
 656:src/xeq.c     **** }
 21753              		.loc 1 656 27 is_stmt 0 view .LVU5644
 21754 00ae 01A9     		add	r1, sp, #4
 21755 00b0 03EBC400 		add	r0, r3, r4, lsl #3
 21756              	.LVL1677:
 656:src/xeq.c     **** }
 21757              		.loc 1 656 27 view .LVU5645
 21758 00b4 FFF7FEFF 		bl	decimal64ToNumber
 21759              	.LVL1678:
 656:src/xeq.c     **** }
 21760              		.loc 1 656 27 view .LVU5646
 21761 00b8 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 21762              		.loc 1 656 2 view .LVU5647
 21763 00ba 4846     		mov	r0, r9
 21764 00bc FFF7FEFF 		bl	packed128_from_number
 21765              	.LVL1679:
 657:src/xeq.c     **** 
 21766              		.loc 1 657 1 view .LVU5648
 21767 00c0 BBE7     		b	.L1549
 21768              	.L1559:
 21769 00c2 00BF     		.align	2
 21770              	.L1558:
 21771 00c4 00000000 		.word	main_ram
 21772 00c8 00000000 		.word	.LANCHOR3
 21773 00cc 00000000 		.word	StateWhileOn
 21774 00d0 00000000 		.word	StackBase
 21775              	.LBE3118:
 21776              	.LBE3117:
 21777              	.LBE3119:
 21778              		.cfi_endproc
 21779              	.LFE207:
 21781              		.section	.text.cmddisp,"ax",%progbits
 21782              		.align	1
 21783              		.p2align 2,,3
 21784              		.global	cmddisp
 21785              		.syntax unified
 21786              		.thumb
 21787              		.thumb_func
 21788              		.fpu fpv4-sp-d16
 21790              	cmddisp:
 21791              	.LVL1680:
 21792              	.LFB173:
2455:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21793              		.loc 1 2455 46 is_stmt 1 view -0
 21794              		.cfi_startproc
 21795              		@ args = 0, pretend = 0, frame = 0
 21796              		@ frame_needed = 0, uses_anonymous_args = 0
 21797              		@ link register save eliminated.
2457:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
 21798              		.loc 1 2457 2 view .LVU5650
2458:src/xeq.c     **** #ifdef DM42
 21799              		.loc 1 2458 2 view .LVU5651
 21800              	.LBB3128:
ARM GAS  /tmp/ccBFDvgN.s 			page 576


 21801              	.LBI3128:
2423:src/xeq.c     **** {
 21802              		.loc 1 2423 5 view .LVU5652
 21803              	.LBB3129:
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21804              		.loc 1 2425 2 view .LVU5653
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21805              		.loc 1 2425 17 is_stmt 0 view .LVU5654
 21806 0000 2E4B     		ldr	r3, .L1580
 21807 0002 1A68     		ldr	r2, [r3]
 21808              	.LBE3129:
 21809              	.LBE3128:
2455:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21810              		.loc 1 2455 46 view .LVU5655
 21811 0004 10B4     		push	{r4}
 21812              		.cfi_def_cfa_offset 4
 21813              		.cfi_offset 4, -4
 21814              	.LBB3131:
 21815              	.LBB3130:
2426:src/xeq.c     **** 
 21816              		.loc 1 2426 23 view .LVU5656
 21817 0006 92F8E747 		ldrb	r4, [r2, #2023]	@ zero_extendqisi2
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21818              		.loc 1 2425 23 view .LVU5657
 21819 000a 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
2428:src/xeq.c     **** 		dispdigs -= 12;
 21820              		.loc 1 2428 5 view .LVU5658
 21821 000e 04F00F04 		and	r4, r4, #15
 21822 0012 0B2C     		cmp	r4, #11
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21823              		.loc 1 2425 6 view .LVU5659
 21824 0014 4FEA9313 		lsr	r3, r3, #6
 21825              	.LVL1681:
2426:src/xeq.c     **** 
 21826              		.loc 1 2426 2 is_stmt 1 view .LVU5660
2428:src/xeq.c     **** 		dispdigs -= 12;
 21827              		.loc 1 2428 2 view .LVU5661
2428:src/xeq.c     **** 		dispdigs -= 12;
 21828              		.loc 1 2428 5 is_stmt 0 view .LVU5662
 21829 0018 04D9     		bls	.L1561
2429:src/xeq.c     **** 		dispmode += 4;
 21830              		.loc 1 2429 3 is_stmt 1 view .LVU5663
 21831              	.LVL1682:
2430:src/xeq.c     **** 		if (dispmode >= 6) {
 21832              		.loc 1 2430 3 view .LVU5664
2430:src/xeq.c     **** 		if (dispmode >= 6) {
 21833              		.loc 1 2430 12 is_stmt 0 view .LVU5665
 21834 001a 1C1D     		adds	r4, r3, #4
 21835              	.LVL1683:
2431:src/xeq.c     **** 			dispmode -= 2;
 21836              		.loc 1 2431 3 is_stmt 1 view .LVU5666
2431:src/xeq.c     **** 			dispmode -= 2;
 21837              		.loc 1 2431 6 is_stmt 0 view .LVU5667
 21838 001c 052C     		cmp	r4, #5
2432:src/xeq.c     **** 			dispdigs += 4;
 21839              		.loc 1 2432 4 is_stmt 1 view .LVU5668
2432:src/xeq.c     **** 			dispdigs += 4;
ARM GAS  /tmp/ccBFDvgN.s 			page 577


 21840              		.loc 1 2432 13 is_stmt 0 view .LVU5669
 21841 001e CCBF     		ite	gt
 21842 0020 0233     		addgt	r3, r3, #2
 21843              	.LVL1684:
2433:src/xeq.c     **** 		}
 21844              		.loc 1 2433 4 is_stmt 1 view .LVU5670
2433:src/xeq.c     **** 		}
 21845              		.loc 1 2433 4 is_stmt 0 view .LVU5671
 21846 0022 2346     		movle	r3, r4
 21847              	.LVL1685:
 21848              	.L1561:
2436:src/xeq.c     **** 	return dispmode;
 21849              		.loc 1 2436 2 is_stmt 1 view .LVU5672
2437:src/xeq.c     **** }
 21850              		.loc 1 2437 2 view .LVU5673
2437:src/xeq.c     **** }
 21851              		.loc 1 2437 2 is_stmt 0 view .LVU5674
 21852              	.LBE3130:
 21853              	.LBE3131:
2460:src/xeq.c     **** 	case RARG_STD:
 21854              		.loc 1 2460 2 is_stmt 1 view .LVU5675
 21855 0024 4F29     		cmp	r1, #79
 21856 0026 1DD8     		bhi	.L1562
 21857 0028 4B29     		cmp	r1, #75
 21858 002a 3ED9     		bls	.L1563
 21859 002c 4D39     		subs	r1, r1, #77
 21860              	.LVL1686:
2460:src/xeq.c     **** 	case RARG_STD:
 21861              		.loc 1 2460 2 is_stmt 0 view .LVU5676
 21862 002e 0229     		cmp	r1, #2
 21863 0030 41D8     		bhi	.L1564
 21864 0032 DFE801F0 		tbb	[pc, r1]
 21865              	.LVL1687:
 21866              	.L1566:
 21867 0036 15       		.byte	(.L1568-.L1566)/2
 21868 0037 02       		.byte	(.L1575-.L1566)/2
 21869 0038 38       		.byte	(.L1565-.L1566)/2
 21870 0039 00       		.p2align 1
 21871              	.L1575:
2460:src/xeq.c     **** 	case RARG_STD:
 21872              		.loc 1 2460 2 view .LVU5677
 21873 003a 0223     		movs	r3, #2
 21874              	.L1567:
2493:src/xeq.c     **** #else
 21875              		.loc 1 2493 2 is_stmt 1 view .LVU5678
 21876 003c 0146     		mov	r1, r0
 21877              	.LVL1688:
 21878              	.LBB3132:
 21879              	.LBI3132:
2440:src/xeq.c     **** {
 21880              		.loc 1 2440 6 view .LVU5679
 21881              	.LBB3133:
2442:src/xeq.c     **** 		dispmode -= 4;
 21882              		.loc 1 2442 2 view .LVU5680
 21883              	.L1572:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21884              		.loc 1 2450 2 view .LVU5681
ARM GAS  /tmp/ccBFDvgN.s 			page 578


2451:src/xeq.c     **** }
 21885              		.loc 1 2451 2 view .LVU5682
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21886              		.loc 1 2450 18 is_stmt 0 view .LVU5683
 21887 003e B2F8E607 		ldrh	r0, [r2, #2022]
 21888              	.LVL1689:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21889              		.loc 1 2450 18 view .LVU5684
 21890              	.LBE3133:
 21891              	.LBE3132:
2500:src/xeq.c     **** 
 21892              		.loc 1 2500 1 view .LVU5685
 21893 0042 5DF8044B 		ldr	r4, [sp], #4
 21894              		.cfi_remember_state
 21895              		.cfi_restore 4
 21896              		.cfi_def_cfa_offset 0
 21897              	.LBB3137:
 21898              	.LBB3134:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21899              		.loc 1 2450 18 view .LVU5686
 21900 0046 01F00F01 		and	r1, r1, #15
 21901              	.LVL1690:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21902              		.loc 1 2450 18 view .LVU5687
 21903 004a 9B01     		lsls	r3, r3, #6
 21904 004c 43EA0123 		orr	r3, r3, r1, lsl #8
 21905 0050 20F47C61 		bic	r1, r0, #4032
 21906 0054 0B43     		orrs	r3, r3, r1
 21907 0056 A2F8E637 		strh	r3, [r2, #2022]	@ movhi
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21908              		.loc 1 2450 18 view .LVU5688
 21909              	.LBE3134:
 21910              	.LBE3137:
2499:src/xeq.c     **** }
 21911              		.loc 1 2499 2 is_stmt 1 view .LVU5689
 21912 005a 5B20     		movs	r0, #91
 21913 005c FFF7FEBF 		b	op_float
 21914              	.LVL1691:
 21915              	.L1568:
 21916              		.cfi_restore_state
2460:src/xeq.c     **** 	case RARG_STD:
 21917              		.loc 1 2460 2 is_stmt 0 view .LVU5690
 21918 0060 0123     		movs	r3, #1
 21919 0062 EBE7     		b	.L1567
 21920              	.LVL1692:
 21921              	.L1562:
2460:src/xeq.c     **** 	case RARG_STD:
 21922              		.loc 1 2460 2 view .LVU5691
 21923 0064 8D29     		cmp	r1, #141
 21924 0066 0CD0     		beq	.L1576
 21925 0068 8E29     		cmp	r1, #142
 21926 006a 08BF     		it	eq
 21927 006c 0523     		moveq	r3, #5
 21928              	.LVL1693:
2460:src/xeq.c     **** 	case RARG_STD:
 21929              		.loc 1 2460 2 view .LVU5692
 21930 006e 1CD1     		bne	.L1563
ARM GAS  /tmp/ccBFDvgN.s 			page 579


 21931              	.LVL1694:
 21932              	.L1569:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21933              		.loc 1 2481 54 discriminator 1 view .LVU5693
 21934 0070 0728     		cmp	r0, #7
 21935 0072 0AD8     		bhi	.L1579
 21936              	.L1570:
2493:src/xeq.c     **** #else
 21937              		.loc 1 2493 2 is_stmt 1 view .LVU5694
 21938              	.LVL1695:
 21939              	.LBB3138:
2440:src/xeq.c     **** {
 21940              		.loc 1 2440 6 view .LVU5695
 21941              	.LBB3135:
2442:src/xeq.c     **** 		dispmode -= 4;
 21942              		.loc 1 2442 2 view .LVU5696
2443:src/xeq.c     **** 		dispdigs += 12;
 21943              		.loc 1 2443 3 view .LVU5697
2444:src/xeq.c     **** 		if (dispdigs >= 16) {
 21944              		.loc 1 2444 3 view .LVU5698
2444:src/xeq.c     **** 		if (dispdigs >= 16) {
 21945              		.loc 1 2444 12 is_stmt 0 view .LVU5699
 21946 0074 00F10C01 		add	r1, r0, #12
 21947              	.LVL1696:
2445:src/xeq.c     **** 			dispdigs -= 4;
 21948              		.loc 1 2445 3 is_stmt 1 view .LVU5700
2445:src/xeq.c     **** 			dispdigs -= 4;
 21949              		.loc 1 2445 6 is_stmt 0 view .LVU5701
 21950 0078 0F29     		cmp	r1, #15
 21951 007a 0EDC     		bgt	.L1573
2445:src/xeq.c     **** 			dispdigs -= 4;
 21952              		.loc 1 2445 6 view .LVU5702
 21953 007c 03F00303 		and	r3, r3, #3
 21954              	.LVL1697:
2445:src/xeq.c     **** 			dispdigs -= 4;
 21955              		.loc 1 2445 6 view .LVU5703
 21956 0080 DDE7     		b	.L1572
 21957              	.LVL1698:
 21958              	.L1576:
2445:src/xeq.c     **** 			dispdigs -= 4;
 21959              		.loc 1 2445 6 view .LVU5704
 21960              	.LBE3135:
 21961              	.LBE3138:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21962              		.loc 1 2481 54 view .LVU5705
 21963 0082 0728     		cmp	r0, #7
2474:src/xeq.c     **** 	  break;
 21964              		.loc 1 2474 13 view .LVU5706
 21965 0084 4FF00403 		mov	r3, #4
 21966              	.LVL1699:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21967              		.loc 1 2481 54 view .LVU5707
 21968 0088 F4D9     		bls	.L1570
 21969              	.LVL1700:
 21970              	.L1579:
2482:src/xeq.c     **** 	  return;
 21971              		.loc 1 2482 4 is_stmt 1 view .LVU5708
ARM GAS  /tmp/ccBFDvgN.s 			page 580


 21972              	.LBB3139:
 21973              	.LBI3139:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21974              		.loc 1 546 5 view .LVU5709
 21975              	.LBB3140:
 547:src/xeq.c     **** 		Error = e;
 21976              		.loc 1 547 2 view .LVU5710
 547:src/xeq.c     **** 		Error = e;
 21977              		.loc 1 547 12 is_stmt 0 view .LVU5711
 21978 008a 0D4B     		ldr	r3, .L1580+4
 21979              	.LVL1701:
 547:src/xeq.c     **** 		Error = e;
 21980              		.loc 1 547 5 view .LVU5712
 21981 008c 1A68     		ldr	r2, [r3]
 21982 008e 0AB9     		cbnz	r2, .L1560
 21983              	.LVL1702:
 21984              	.LBB3141:
 21985              	.LBI3141:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21986              		.loc 1 546 5 is_stmt 1 view .LVU5713
 21987              	.LBB3142:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 21988              		.loc 1 548 3 view .LVU5714
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 21989              		.loc 1 548 9 is_stmt 0 view .LVU5715
 21990 0090 0822     		movs	r2, #8
 21991 0092 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 21992              		.loc 1 549 3 is_stmt 1 view .LVU5716
 21993              	.LVL1703:
 21994              	.L1560:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 21995              		.loc 1 549 3 is_stmt 0 view .LVU5717
 21996              	.LBE3142:
 21997              	.LBE3141:
 21998              	.LBE3140:
 21999              	.LBE3139:
2500:src/xeq.c     **** 
 22000              		.loc 1 2500 1 view .LVU5718
 22001 0094 5DF8044B 		ldr	r4, [sp], #4
 22002              		.cfi_remember_state
 22003              		.cfi_restore 4
 22004              		.cfi_def_cfa_offset 0
 22005 0098 7047     		bx	lr
 22006              	.LVL1704:
 22007              	.L1573:
 22008              		.cfi_restore_state
 22009              	.LBB3143:
 22010              	.LBB3136:
2446:src/xeq.c     **** 			dispmode += 2;
 22011              		.loc 1 2446 4 is_stmt 1 view .LVU5719
2447:src/xeq.c     **** 		}
 22012              		.loc 1 2447 13 is_stmt 0 view .LVU5720
 22013 009a 023B     		subs	r3, r3, #2
 22014              	.LVL1705:
2447:src/xeq.c     **** 		}
 22015              		.loc 1 2447 13 view .LVU5721
ARM GAS  /tmp/ccBFDvgN.s 			page 581


 22016 009c 03F00303 		and	r3, r3, #3
 22017              	.LVL1706:
2446:src/xeq.c     **** 			dispmode += 2;
 22018              		.loc 1 2446 13 view .LVU5722
 22019 00a0 00F10801 		add	r1, r0, #8
 22020              	.LVL1707:
2447:src/xeq.c     **** 		}
 22021              		.loc 1 2447 4 is_stmt 1 view .LVU5723
2447:src/xeq.c     **** 		}
 22022              		.loc 1 2447 4 is_stmt 0 view .LVU5724
 22023 00a4 CBE7     		b	.L1572
 22024              	.LVL1708:
 22025              	.L1565:
2447:src/xeq.c     **** 		}
 22026              		.loc 1 2447 4 view .LVU5725
 22027              	.LBE3136:
 22028              	.LBE3143:
2471:src/xeq.c     **** 	  break;
 22029              		.loc 1 2471 4 is_stmt 1 view .LVU5726
2472:src/xeq.c     **** 	case RARG_SIG:
 22030              		.loc 1 2472 4 view .LVU5727
 22031 00a6 0323     		movs	r3, #3
 22032 00a8 C8E7     		b	.L1567
 22033              	.LVL1709:
 22034              	.L1563:
2479:src/xeq.c     **** 	}
 22035              		.loc 1 2479 10 view .LVU5728
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22036              		.loc 1 2481 2 view .LVU5729
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22037              		.loc 1 2481 28 is_stmt 0 view .LVU5730
 22038 00aa 191F     		subs	r1, r3, #4
 22039              	.LVL1710:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22040              		.loc 1 2481 5 view .LVU5731
 22041 00ac 0129     		cmp	r1, #1
 22042 00ae DFD9     		bls	.L1569
 22043 00b0 03F00303 		and	r3, r3, #3
 22044              	.LVL1711:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22045              		.loc 1 2481 5 view .LVU5732
 22046 00b4 C2E7     		b	.L1567
 22047              	.LVL1712:
 22048              	.L1564:
2460:src/xeq.c     **** 	case RARG_STD:
 22049              		.loc 1 2460 2 view .LVU5733
 22050 00b6 0023     		movs	r3, #0
 22051 00b8 C0E7     		b	.L1567
 22052              	.L1581:
 22053 00ba 00BF     		.align	2
 22054              	.L1580:
 22055 00bc 00000000 		.word	main_ram
 22056 00c0 00000000 		.word	Error
 22057              		.cfi_endproc
 22058              	.LFE173:
 22060              		.section	.text.set_int_base,"ax",%progbits
 22061              		.align	1
ARM GAS  /tmp/ccBFDvgN.s 			page 582


 22062              		.p2align 2,,3
 22063              		.global	set_int_base
 22064              		.syntax unified
 22065              		.thumb
 22066              		.thumb_func
 22067              		.fpu fpv4-sp-d16
 22069              	set_int_base:
 22070              	.LVL1713:
 22071              	.LFB210:
3761:src/xeq.c     **** 	if (arg < 2) {
 22072              		.loc 1 3761 51 is_stmt 1 view -0
 22073              		.cfi_startproc
 22074              		@ args = 0, pretend = 0, frame = 0
 22075              		@ frame_needed = 0, uses_anonymous_args = 0
3762:src/xeq.c     **** 		if (arg == 0)
 22076              		.loc 1 3762 2 view .LVU5735
3762:src/xeq.c     **** 		if (arg == 0)
 22077              		.loc 1 3762 5 is_stmt 0 view .LVU5736
 22078 0000 0128     		cmp	r0, #1
3761:src/xeq.c     **** 	if (arg < 2) {
 22079              		.loc 1 3761 51 view .LVU5737
 22080 0002 08B5     		push	{r3, lr}
 22081              		.cfi_def_cfa_offset 8
 22082              		.cfi_offset 3, -8
 22083              		.cfi_offset 14, -4
3762:src/xeq.c     **** 		if (arg == 0)
 22084              		.loc 1 3762 5 view .LVU5738
 22085 0004 0BD9     		bls	.L1587
3768:src/xeq.c     **** }
 22086              		.loc 1 3768 3 is_stmt 1 view .LVU5739
 22087              	.LVL1714:
 22088              	.LBB3144:
 22089              	.LBI3144:
3755:src/xeq.c     **** 	UState.int_base = b - 1;
 22090              		.loc 1 3755 13 view .LVU5740
 22091              	.LBB3145:
3756:src/xeq.c     **** 	if (!is_intmode())
 22092              		.loc 1 3756 2 view .LVU5741
 22093 0006 114B     		ldr	r3, .L1589
 22094 0008 1A68     		ldr	r2, [r3]
3756:src/xeq.c     **** 	if (!is_intmode())
 22095              		.loc 1 3756 18 is_stmt 0 view .LVU5742
 22096 000a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3756:src/xeq.c     **** 	if (!is_intmode())
 22097              		.loc 1 3756 22 view .LVU5743
 22098 000e 0138     		subs	r0, r0, #1
 22099              	.LVL1715:
3756:src/xeq.c     **** 	if (!is_intmode())
 22100              		.loc 1 3756 18 view .LVU5744
 22101 0010 60F30713 		bfi	r3, r0, #4, #4
 22102 0014 82F8E837 		strb	r3, [r2, #2024]
3757:src/xeq.c     **** 		switch_to_int();
 22103              		.loc 1 3757 2 is_stmt 1 view .LVU5745
3757:src/xeq.c     **** 		switch_to_int();
 22104              		.loc 1 3757 5 is_stmt 0 view .LVU5746
 22105 0018 DB07     		lsls	r3, r3, #31
 22106 001a 12D5     		bpl	.L1588
ARM GAS  /tmp/ccBFDvgN.s 			page 583


 22107              	.LBE3145:
 22108              	.LBE3144:
3769:src/xeq.c     **** 
 22109              		.loc 1 3769 1 view .LVU5747
 22110 001c 08BD     		pop	{r3, pc}
 22111              	.LVL1716:
 22112              	.L1587:
3763:src/xeq.c     **** 			op_float(OP_FLOAT);
 22113              		.loc 1 3763 3 is_stmt 1 view .LVU5748
3763:src/xeq.c     **** 			op_float(OP_FLOAT);
 22114              		.loc 1 3763 6 is_stmt 0 view .LVU5749
 22115 001e 20B9     		cbnz	r0, .L1584
3764:src/xeq.c     **** 		else
 22116              		.loc 1 3764 4 is_stmt 1 view .LVU5750
3769:src/xeq.c     **** 
 22117              		.loc 1 3769 1 is_stmt 0 view .LVU5751
 22118 0020 BDE80840 		pop	{r3, lr}
 22119              		.cfi_remember_state
 22120              		.cfi_restore 14
 22121              		.cfi_restore 3
 22122              		.cfi_def_cfa_offset 0
3764:src/xeq.c     **** 		else
 22123              		.loc 1 3764 4 view .LVU5752
 22124 0024 5B20     		movs	r0, #91
 22125              	.LVL1717:
3764:src/xeq.c     **** 		else
 22126              		.loc 1 3764 4 view .LVU5753
 22127 0026 FFF7FEBF 		b	op_float
 22128              	.LVL1718:
 22129              	.L1584:
 22130              		.cfi_restore_state
3766:src/xeq.c     **** 	} else
 22131              		.loc 1 3766 4 is_stmt 1 view .LVU5754
 22132              	.LBB3148:
 22133              	.LBI3148:
3772:src/xeq.c     **** 	op_float(OP_FLOAT);
 22134              		.loc 1 3772 6 view .LVU5755
 22135              	.LBB3149:
3773:src/xeq.c     **** 	UState.fract = 1;
 22136              		.loc 1 3773 2 view .LVU5756
 22137 002a 5B20     		movs	r0, #91
 22138              	.LVL1719:
3773:src/xeq.c     **** 	UState.fract = 1;
 22139              		.loc 1 3773 2 is_stmt 0 view .LVU5757
 22140 002c FFF7FEFF 		bl	op_float
 22141              	.LVL1720:
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22142              		.loc 1 3774 2 is_stmt 1 view .LVU5758
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22143              		.loc 1 3774 15 is_stmt 0 view .LVU5759
 22144 0030 064B     		ldr	r3, .L1589
 22145 0032 1A68     		ldr	r2, [r3]
 22146 0034 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 22147 0038 43F02003 		orr	r3, r3, #32
 22148 003c 82F8E637 		strb	r3, [r2, #2022]
3775:src/xeq.c     **** 		UState.improperfrac = 1;
 22149              		.loc 1 3775 2 is_stmt 1 view .LVU5760
ARM GAS  /tmp/ccBFDvgN.s 			page 584


3777:src/xeq.c     **** 		UState.improperfrac = 0;
 22150              		.loc 1 3777 7 view .LVU5761
 22151              	.LBE3149:
 22152              	.LBE3148:
3769:src/xeq.c     **** 
 22153              		.loc 1 3769 1 is_stmt 0 view .LVU5762
 22154 0040 08BD     		pop	{r3, pc}
 22155              	.LVL1721:
 22156              	.L1588:
 22157              	.LBB3150:
 22158              	.LBB3146:
3758:src/xeq.c     **** }
 22159              		.loc 1 3758 3 is_stmt 1 view .LVU5763
 22160              	.LBE3146:
 22161              	.LBE3150:
3769:src/xeq.c     **** 
 22162              		.loc 1 3769 1 is_stmt 0 view .LVU5764
 22163 0042 BDE80840 		pop	{r3, lr}
 22164              		.cfi_restore 14
 22165              		.cfi_restore 3
 22166              		.cfi_def_cfa_offset 0
 22167              	.LBB3151:
 22168              	.LBB3147:
3758:src/xeq.c     **** }
 22169              		.loc 1 3758 3 view .LVU5765
 22170 0046 FFF7FEBF 		b	switch_to_int
 22171              	.LVL1722:
 22172              	.L1590:
3758:src/xeq.c     **** }
 22173              		.loc 1 3758 3 view .LVU5766
 22174 004a 00BF     		.align	2
 22175              	.L1589:
 22176 004c 00000000 		.word	main_ram
 22177              	.LBE3147:
 22178              	.LBE3151:
 22179              		.cfi_endproc
 22180              	.LFE210:
 22182              		.section	.text.op_fract,"ax",%progbits
 22183              		.align	1
 22184              		.p2align 2,,3
 22185              		.global	op_fract
 22186              		.syntax unified
 22187              		.thumb
 22188              		.thumb_func
 22189              		.fpu fpv4-sp-d16
 22191              	op_fract:
 22192              	.LVL1723:
 22193              	.LFB211:
3772:src/xeq.c     **** 	op_float(OP_FLOAT);
 22194              		.loc 1 3772 30 is_stmt 1 view -0
 22195              		.cfi_startproc
 22196              		@ args = 0, pretend = 0, frame = 0
 22197              		@ frame_needed = 0, uses_anonymous_args = 0
3773:src/xeq.c     **** 	UState.fract = 1;
 22198              		.loc 1 3773 2 view .LVU5768
3772:src/xeq.c     **** 	op_float(OP_FLOAT);
 22199              		.loc 1 3772 30 is_stmt 0 view .LVU5769
ARM GAS  /tmp/ccBFDvgN.s 			page 585


 22200 0000 10B5     		push	{r4, lr}
 22201              		.cfi_def_cfa_offset 8
 22202              		.cfi_offset 4, -8
 22203              		.cfi_offset 14, -4
3772:src/xeq.c     **** 	op_float(OP_FLOAT);
 22204              		.loc 1 3772 30 view .LVU5770
 22205 0002 0446     		mov	r4, r0
3773:src/xeq.c     **** 	UState.fract = 1;
 22206              		.loc 1 3773 2 view .LVU5771
 22207 0004 5B20     		movs	r0, #91
 22208              	.LVL1724:
3773:src/xeq.c     **** 	UState.fract = 1;
 22209              		.loc 1 3773 2 view .LVU5772
 22210 0006 FFF7FEFF 		bl	op_float
 22211              	.LVL1725:
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22212              		.loc 1 3774 2 is_stmt 1 view .LVU5773
 22213 000a 0D4B     		ldr	r3, .L1597
 22214 000c 1B68     		ldr	r3, [r3]
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22215              		.loc 1 3774 15 is_stmt 0 view .LVU5774
 22216 000e 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
3775:src/xeq.c     **** 		UState.improperfrac = 1;
 22217              		.loc 1 3775 5 view .LVU5775
 22218 0012 4D2C     		cmp	r4, #77
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22219              		.loc 1 3774 15 view .LVU5776
 22220 0014 42F02002 		orr	r2, r2, #32
 22221 0018 83F8E627 		strb	r2, [r3, #2022]
3775:src/xeq.c     **** 		UState.improperfrac = 1;
 22222              		.loc 1 3775 2 is_stmt 1 view .LVU5777
3775:src/xeq.c     **** 		UState.improperfrac = 1;
 22223              		.loc 1 3775 5 is_stmt 0 view .LVU5778
 22224 001c 09D0     		beq	.L1595
3777:src/xeq.c     **** 		UState.improperfrac = 0;
 22225              		.loc 1 3777 7 is_stmt 1 view .LVU5779
3777:src/xeq.c     **** 		UState.improperfrac = 0;
 22226              		.loc 1 3777 10 is_stmt 0 view .LVU5780
 22227 001e 4E2C     		cmp	r4, #78
 22228 0020 00D0     		beq	.L1596
3779:src/xeq.c     **** 
 22229              		.loc 1 3779 1 view .LVU5781
 22230 0022 10BD     		pop	{r4, pc}
 22231              	.L1596:
3778:src/xeq.c     **** }
 22232              		.loc 1 3778 3 is_stmt 1 view .LVU5782
3778:src/xeq.c     **** }
 22233              		.loc 1 3778 23 is_stmt 0 view .LVU5783
 22234 0024 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 22235 0028 6FF30412 		bfc	r2, #4, #1
 22236 002c 83F8E627 		strb	r2, [r3, #2022]
3779:src/xeq.c     **** 
 22237              		.loc 1 3779 1 view .LVU5784
 22238 0030 10BD     		pop	{r4, pc}
 22239              	.L1595:
3776:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22240              		.loc 1 3776 3 is_stmt 1 view .LVU5785
ARM GAS  /tmp/ccBFDvgN.s 			page 586


3776:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22241              		.loc 1 3776 23 is_stmt 0 view .LVU5786
 22242 0032 D2B2     		uxtb	r2, r2
 22243 0034 42F01002 		orr	r2, r2, #16
 22244 0038 83F8E627 		strb	r2, [r3, #2022]
3779:src/xeq.c     **** 
 22245              		.loc 1 3779 1 view .LVU5787
 22246 003c 10BD     		pop	{r4, pc}
 22247              	.L1598:
 22248 003e 00BF     		.align	2
 22249              	.L1597:
 22250 0040 00000000 		.word	main_ram
 22251              		.cfi_endproc
 22252              	.LFE211:
 22254              		.section	.text.cmdsavem,"ax",%progbits
 22255              		.align	1
 22256              		.p2align 2,,3
 22257              		.global	cmdsavem
 22258              		.syntax unified
 22259              		.thumb
 22260              		.thumb_func
 22261              		.fpu fpv4-sp-d16
 22263              	cmdsavem:
 22264              	.LVL1726:
 22265              	.LFB212:
3784:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22266              		.loc 1 3784 47 is_stmt 1 view -0
 22267              		.cfi_startproc
 22268              		@ args = 0, pretend = 0, frame = 0
 22269              		@ frame_needed = 0, uses_anonymous_args = 0
3785:src/xeq.c     **** }
 22270              		.loc 1 3785 2 view .LVU5789
3784:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22271              		.loc 1 3784 47 is_stmt 0 view .LVU5790
 22272 0000 08B5     		push	{r3, lr}
 22273              		.cfi_def_cfa_offset 8
 22274              		.cfi_offset 3, -8
 22275              		.cfi_offset 14, -4
3785:src/xeq.c     **** }
 22276              		.loc 1 3785 9 view .LVU5791
 22277 0002 FFF7FEFF 		bl	get_reg_n
 22278              	.LVL1727:
3785:src/xeq.c     **** }
 22279              		.loc 1 3785 26 view .LVU5792
 22280 0006 044B     		ldr	r3, .L1601
3785:src/xeq.c     **** }
 22281              		.loc 1 3785 25 view .LVU5793
 22282 0008 1968     		ldr	r1, [r3]
3785:src/xeq.c     **** }
 22283              		.loc 1 3785 2 view .LVU5794
 22284 000a 0822     		movs	r2, #8
3786:src/xeq.c     **** 
 22285              		.loc 1 3786 1 view .LVU5795
 22286 000c BDE80840 		pop	{r3, lr}
 22287              		.cfi_restore 14
 22288              		.cfi_restore 3
 22289              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccBFDvgN.s 			page 587


3785:src/xeq.c     **** }
 22290              		.loc 1 3785 2 view .LVU5796
 22291 0010 01F2E471 		addw	r1, r1, #2020
 22292 0014 FFF7FEBF 		b	xcopy
 22293              	.LVL1728:
 22294              	.L1602:
 22295              		.align	2
 22296              	.L1601:
 22297 0018 00000000 		.word	main_ram
 22298              		.cfi_endproc
 22299              	.LFE212:
 22301              		.section	.text.set_entry,"ax",%progbits
 22302              		.align	1
 22303              		.p2align 2,,3
 22304              		.global	set_entry
 22305              		.syntax unified
 22306              		.thumb
 22307              		.thumb_func
 22308              		.fpu fpv4-sp-d16
 22310              	set_entry:
 22311              	.LFB215:
3911:src/xeq.c     **** 	if (!Running && !XromRunning)
 22312              		.loc 1 3911 18 is_stmt 1 view -0
 22313              		.cfi_startproc
 22314              		@ args = 0, pretend = 0, frame = 0
 22315              		@ frame_needed = 0, uses_anonymous_args = 0
 22316              		@ link register save eliminated.
3912:src/xeq.c     **** 		State.entryp = 1;
 22317              		.loc 1 3912 2 view .LVU5798
 22318              	.LBB3154:
 22319              	.LBI3154:
3911:src/xeq.c     **** 	if (!Running && !XromRunning)
 22320              		.loc 1 3911 6 view .LVU5799
 22321              	.LBE3154:
3912:src/xeq.c     **** 		State.entryp = 1;
 22322              		.loc 1 3912 6 is_stmt 0 view .LVU5800
 22323 0000 074A     		ldr	r2, .L1605
 22324              	.LBB3156:
 22325              	.LBB3155:
3912:src/xeq.c     **** 		State.entryp = 1;
 22326              		.loc 1 3912 18 view .LVU5801
 22327 0002 084B     		ldr	r3, .L1605+4
3912:src/xeq.c     **** 		State.entryp = 1;
 22328              		.loc 1 3912 15 view .LVU5802
 22329 0004 1268     		ldr	r2, [r2]
 22330 0006 1B68     		ldr	r3, [r3]
 22331 0008 1343     		orrs	r3, r2, r3
 22332 000a 07D1     		bne	.L1603
3913:src/xeq.c     **** }
 22333              		.loc 1 3913 3 is_stmt 1 view .LVU5803
3913:src/xeq.c     **** }
 22334              		.loc 1 3913 16 is_stmt 0 view .LVU5804
 22335 000c 064B     		ldr	r3, .L1605+8
 22336 000e 1A68     		ldr	r2, [r3]
 22337 0010 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 22338 0014 43F01003 		orr	r3, r3, #16
 22339 0018 82F8DD37 		strb	r3, [r2, #2013]
ARM GAS  /tmp/ccBFDvgN.s 			page 588


 22340              	.L1603:
 22341              	.LBE3155:
 22342              	.LBE3156:
3914:src/xeq.c     **** 
 22343              		.loc 1 3914 1 view .LVU5805
 22344 001c 7047     		bx	lr
 22345              	.L1606:
 22346 001e 00BF     		.align	2
 22347              	.L1605:
 22348 0020 00000000 		.word	Running
 22349 0024 00000000 		.word	XromRunning
 22350 0028 00000000 		.word	main_ram
 22351              		.cfi_endproc
 22352              	.LFE215:
 22354              		.section	.text.get_trig_mode,"ax",%progbits
 22355              		.align	1
 22356              		.p2align 2,,3
 22357              		.global	get_trig_mode
 22358              		.syntax unified
 22359              		.thumb
 22360              		.thumb_func
 22361              		.fpu fpv4-sp-d16
 22363              	get_trig_mode:
 22364              	.LFB217:
4099:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 22365              		.loc 1 4099 37 is_stmt 1 view -0
 22366              		.cfi_startproc
 22367              		@ args = 0, pretend = 0, frame = 0
 22368              		@ frame_needed = 0, uses_anonymous_args = 0
 22369              		@ link register save eliminated.
4100:src/xeq.c     **** 		return TRIG_RAD;
 22370              		.loc 1 4100 2 view .LVU5807
4100:src/xeq.c     **** 		return TRIG_RAD;
 22371              		.loc 1 4100 6 is_stmt 0 view .LVU5808
 22372 0000 084B     		ldr	r3, .L1611
 22373 0002 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4100:src/xeq.c     **** 		return TRIG_RAD;
 22374              		.loc 1 4100 5 view .LVU5809
 22375 0004 9B07     		lsls	r3, r3, #30
 22376 0006 0AD4     		bmi	.L1610
4100:src/xeq.c     **** 		return TRIG_RAD;
 22377              		.loc 1 4100 19 discriminator 1 view .LVU5810
 22378 0008 074B     		ldr	r3, .L1611+4
 22379 000a 93F90130 		ldrsb	r3, [r3, #1]
 22380 000e 002B     		cmp	r3, #0
 22381 0010 05DB     		blt	.L1610
4103:src/xeq.c     **** }
 22382              		.loc 1 4103 2 is_stmt 1 view .LVU5811
4103:src/xeq.c     **** }
 22383              		.loc 1 4103 33 is_stmt 0 view .LVU5812
 22384 0012 064B     		ldr	r3, .L1611+8
 22385 0014 1B68     		ldr	r3, [r3]
 22386 0016 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
4103:src/xeq.c     **** }
 22387              		.loc 1 4103 9 view .LVU5813
 22388 001a 8009     		lsrs	r0, r0, #6
 22389 001c 7047     		bx	lr
ARM GAS  /tmp/ccBFDvgN.s 			page 589


 22390              	.L1610:
4101:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
 22391              		.loc 1 4101 10 view .LVU5814
 22392 001e 0120     		movs	r0, #1
4104:src/xeq.c     **** 
 22393              		.loc 1 4104 1 view .LVU5815
 22394 0020 7047     		bx	lr
 22395              	.L1612:
 22396 0022 00BF     		.align	2
 22397              	.L1611:
 22398 0024 00000000 		.word	StateWhileOn
 22399 0028 00000000 		.word	XromParams
 22400 002c 00000000 		.word	main_ram
 22401              		.cfi_endproc
 22402              	.LFE217:
 22404              		.section	.text.cmdpause,"ax",%progbits
 22405              		.align	1
 22406              		.p2align 2,,3
 22407              		.global	cmdpause
 22408              		.syntax unified
 22409              		.thumb
 22410              		.thumb_func
 22411              		.fpu fpv4-sp-d16
 22413              	cmdpause:
 22414              	.LVL1729:
 22415              	.LFB219:
4149:src/xeq.c     **** 	display();
 22416              		.loc 1 4149 47 is_stmt 1 view -0
 22417              		.cfi_startproc
 22418              		@ args = 0, pretend = 0, frame = 0
 22419              		@ frame_needed = 0, uses_anonymous_args = 0
4150:src/xeq.c     **** #ifndef CONSOLE
 22420              		.loc 1 4150 2 view .LVU5817
4149:src/xeq.c     **** 	display();
 22421              		.loc 1 4149 47 is_stmt 0 view .LVU5818
 22422 0000 10B5     		push	{r4, lr}
 22423              		.cfi_def_cfa_offset 8
 22424              		.cfi_offset 4, -8
 22425              		.cfi_offset 14, -4
4149:src/xeq.c     **** 	display();
 22426              		.loc 1 4149 47 view .LVU5819
 22427 0002 0446     		mov	r4, r0
4150:src/xeq.c     **** #ifndef CONSOLE
 22428              		.loc 1 4150 2 view .LVU5820
 22429 0004 FFF7FEFF 		bl	display
 22430              	.LVL1730:
4153:src/xeq.c     **** 	GoFast = (arg == 0);
 22431              		.loc 1 4153 2 is_stmt 1 view .LVU5821
4153:src/xeq.c     **** 	GoFast = (arg == 0);
 22432              		.loc 1 4153 8 is_stmt 0 view .LVU5822
 22433 0008 044A     		ldr	r2, .L1615
4154:src/xeq.c     **** #elif 0
 22434              		.loc 1 4154 9 view .LVU5823
 22435 000a 0549     		ldr	r1, .L1615+4
4154:src/xeq.c     **** #elif 0
 22436              		.loc 1 4154 16 view .LVU5824
 22437 000c B4FA84F3 		clz	r3, r4
ARM GAS  /tmp/ccBFDvgN.s 			page 590


4153:src/xeq.c     **** 	GoFast = (arg == 0);
 22438              		.loc 1 4153 8 view .LVU5825
 22439 0010 E4B2     		uxtb	r4, r4
 22440              	.LVL1731:
4154:src/xeq.c     **** #elif 0
 22441              		.loc 1 4154 16 view .LVU5826
 22442 0012 5B09     		lsrs	r3, r3, #5
4153:src/xeq.c     **** 	GoFast = (arg == 0);
 22443              		.loc 1 4153 8 view .LVU5827
 22444 0014 1470     		strb	r4, [r2]
4154:src/xeq.c     **** #elif 0
 22445              		.loc 1 4154 2 is_stmt 1 view .LVU5828
4154:src/xeq.c     **** #elif 0
 22446              		.loc 1 4154 9 is_stmt 0 view .LVU5829
 22447 0016 0B60     		str	r3, [r1]
4165:src/xeq.c     **** 
 22448              		.loc 1 4165 1 view .LVU5830
 22449 0018 10BD     		pop	{r4, pc}
 22450              	.L1616:
 22451 001a 00BF     		.align	2
 22452              	.L1615:
 22453 001c 00000000 		.word	Pause
 22454 0020 00000000 		.word	GoFast
 22455              		.cfi_endproc
 22456              	.LFE219:
 22458              		.section	.text.op_setspeed,"ax",%progbits
 22459              		.align	1
 22460              		.p2align 2,,3
 22461              		.global	op_setspeed
 22462              		.syntax unified
 22463              		.thumb
 22464              		.thumb_func
 22465              		.fpu fpv4-sp-d16
 22467              	op_setspeed:
 22468              	.LVL1732:
 22469              	.LFB220:
4169:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
 22470              		.loc 1 4169 33 is_stmt 1 view -0
 22471              		.cfi_startproc
 22472              		@ args = 0, pretend = 0, frame = 0
 22473              		@ frame_needed = 0, uses_anonymous_args = 0
 22474              		@ link register save eliminated.
4170:src/xeq.c     **** 	update_speed(1);
 22475              		.loc 1 4170 2 view .LVU5832
4170:src/xeq.c     **** 	update_speed(1);
 22476              		.loc 1 4170 20 is_stmt 0 view .LVU5833
 22477 0000 064B     		ldr	r3, .L1618
 22478 0002 1B68     		ldr	r3, [r3]
4170:src/xeq.c     **** 	update_speed(1);
 22479              		.loc 1 4170 42 view .LVU5834
 22480 0004 A0F19A00 		sub	r0, #154
 22481              	.LVL1733:
4170:src/xeq.c     **** 	update_speed(1);
 22482              		.loc 1 4170 20 view .LVU5835
 22483 0008 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
4170:src/xeq.c     **** 	update_speed(1);
 22484              		.loc 1 4170 42 view .LVU5836
ARM GAS  /tmp/ccBFDvgN.s 			page 591


 22485 000c B0FA80F0 		clz	r0, r0
 22486 0010 4009     		lsrs	r0, r0, #5
4170:src/xeq.c     **** 	update_speed(1);
 22487              		.loc 1 4170 20 view .LVU5837
 22488 0012 60F3C302 		bfi	r2, r0, #3, #1
 22489 0016 83F8EB27 		strb	r2, [r3, #2027]
4171:src/xeq.c     **** }
 22490              		.loc 1 4171 17 is_stmt 1 view .LVU5838
4172:src/xeq.c     **** 
 22491              		.loc 1 4172 1 is_stmt 0 view .LVU5839
 22492 001a 7047     		bx	lr
 22493              	.L1619:
 22494              		.align	2
 22495              	.L1618:
 22496 001c 00000000 		.word	main_ram
 22497              		.cfi_endproc
 22498              	.LFE220:
 22500              		.section	.text.op_prompt,"ax",%progbits
 22501              		.align	1
 22502              		.p2align 2,,3
 22503              		.global	op_prompt
 22504              		.syntax unified
 22505              		.thumb
 22506              		.thumb_func
 22507              		.fpu fpv4-sp-d16
 22509              	op_prompt:
 22510              	.LVL1734:
 22511              	.LFB221:
4175:src/xeq.c     **** 	set_running_off();
 22512              		.loc 1 4175 31 is_stmt 1 view -0
 22513              		.cfi_startproc
 22514              		@ args = 0, pretend = 0, frame = 0
 22515              		@ frame_needed = 0, uses_anonymous_args = 0
4176:src/xeq.c     **** 	alpha_view_common(regX_idx);
 22516              		.loc 1 4176 2 view .LVU5841
 22517              	.LBB3157:
 22518              	.LBI3157:
5816:src/xeq.c     **** 	set_running_off_sst();
 22519              		.loc 1 5816 6 view .LVU5842
 22520              	.LBB3158:
5817:src/xeq.c     **** 	State.entryp = 0;
 22521              		.loc 1 5817 2 view .LVU5843
 22522              	.LBB3159:
 22523              	.LBI3159:
5808:src/xeq.c     **** 	Running = 0;
 22524              		.loc 1 5808 6 view .LVU5844
 22525              	.LBB3160:
5809:src/xeq.c     **** }
 22526              		.loc 1 5809 2 view .LVU5845
 22527              	.LBE3160:
 22528              	.LBE3159:
 22529              	.LBE3158:
 22530              	.LBE3157:
4175:src/xeq.c     **** 	set_running_off();
 22531              		.loc 1 4175 31 is_stmt 0 view .LVU5846
 22532 0000 08B5     		push	{r3, lr}
 22533              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccBFDvgN.s 			page 592


 22534              		.cfi_offset 3, -8
 22535              		.cfi_offset 14, -4
 22536              	.LBB3166:
 22537              	.LBB3165:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 22538              		.loc 1 5818 15 view .LVU5847
 22539 0002 094B     		ldr	r3, .L1622
 22540              	.LBB3163:
 22541              	.LBB3161:
5809:src/xeq.c     **** }
 22542              		.loc 1 5809 10 view .LVU5848
 22543 0004 094A     		ldr	r2, .L1622+4
 22544              	.LBE3161:
 22545              	.LBE3163:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 22546              		.loc 1 5818 15 view .LVU5849
 22547 0006 1B68     		ldr	r3, [r3]
 22548              	.LBB3164:
 22549              	.LBB3162:
5809:src/xeq.c     **** }
 22550              		.loc 1 5809 10 view .LVU5850
 22551 0008 0021     		movs	r1, #0
 22552 000a 1160     		str	r1, [r2]
 22553              	.LBE3162:
 22554              	.LBE3164:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 22555              		.loc 1 5818 2 is_stmt 1 view .LVU5851
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 22556              		.loc 1 5818 15 is_stmt 0 view .LVU5852
 22557 000c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 22558 0010 61F30412 		bfi	r2, r1, #4, #1
 22559 0014 83F8DD27 		strb	r2, [r3, #2013]
 22560              		.loc 1 5819 2 is_stmt 1 view .LVU5853
 22561 0018 8A20     		movs	r0, #138
 22562              	.LVL1735:
 22563              		.loc 1 5819 2 is_stmt 0 view .LVU5854
 22564 001a FFF7FEFF 		bl	dot
 22565              	.LVL1736:
 22566              	.LBE3165:
 22567              	.LBE3166:
4177:src/xeq.c     **** }
 22568              		.loc 1 4177 2 is_stmt 1 view .LVU5855
4178:src/xeq.c     **** 
 22569              		.loc 1 4178 1 is_stmt 0 view .LVU5856
 22570 001e BDE80840 		pop	{r3, lr}
 22571              		.cfi_restore 14
 22572              		.cfi_restore 3
 22573              		.cfi_def_cfa_offset 0
4177:src/xeq.c     **** }
 22574              		.loc 1 4177 2 view .LVU5857
 22575 0022 6420     		movs	r0, #100
 22576 0024 FFF7FEBF 		b	alpha_view_common
 22577              	.LVL1737:
 22578              	.L1623:
 22579              		.align	2
 22580              	.L1622:
 22581 0028 00000000 		.word	main_ram
ARM GAS  /tmp/ccBFDvgN.s 			page 593


 22582 002c 00000000 		.word	Running
 22583              		.cfi_endproc
 22584              	.LFE221:
 22586              		.section	.text.XisInt,"ax",%progbits
 22587              		.align	1
 22588              		.p2align 2,,3
 22589              		.global	XisInt
 22590              		.syntax unified
 22591              		.thumb
 22592              		.thumb_func
 22593              		.fpu fpv4-sp-d16
 22595              	XisInt:
 22596              	.LVL1738:
 22597              	.LFB222:
4182:src/xeq.c     **** 	decNumber x;
 22598              		.loc 1 4182 28 is_stmt 1 view -0
 22599              		.cfi_startproc
 22600              		@ args = 0, pretend = 0, frame = 40
 22601              		@ frame_needed = 0, uses_anonymous_args = 0
4183:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
 22602              		.loc 1 4183 2 view .LVU5859
4184:src/xeq.c     **** 	if ( is_intmode() )
 22603              		.loc 1 4184 2 view .LVU5860
4185:src/xeq.c     **** 		result = op_int;
 22604              		.loc 1 4185 7 is_stmt 0 view .LVU5861
 22605 0000 164B     		ldr	r3, .L1630
4182:src/xeq.c     **** 	decNumber x;
 22606              		.loc 1 4182 28 view .LVU5862
 22607 0002 30B5     		push	{r4, r5, lr}
 22608              		.cfi_def_cfa_offset 12
 22609              		.cfi_offset 4, -12
 22610              		.cfi_offset 5, -8
 22611              		.cfi_offset 14, -4
4185:src/xeq.c     **** 		result = op_int;
 22612              		.loc 1 4185 7 view .LVU5863
 22613 0004 1B68     		ldr	r3, [r3]
 22614 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4184:src/xeq.c     **** 	if ( is_intmode() )
 22615              		.loc 1 4184 27 view .LVU5864
 22616 000a A0F18704 		sub	r4, r0, #135
 22617 000e B4FA84F4 		clz	r4, r4
4185:src/xeq.c     **** 		result = op_int;
 22618              		.loc 1 4185 5 view .LVU5865
 22619 0012 13F00105 		ands	r5, r3, #1
4182:src/xeq.c     **** 	decNumber x;
 22620              		.loc 1 4182 28 view .LVU5866
 22621 0016 8BB0     		sub	sp, sp, #44
 22622              		.cfi_def_cfa_offset 56
4184:src/xeq.c     **** 	if ( is_intmode() )
 22623              		.loc 1 4184 27 view .LVU5867
 22624 0018 4FEA5414 		lsr	r4, r4, #5
 22625              	.LVL1739:
4185:src/xeq.c     **** 		result = op_int;
 22626              		.loc 1 4185 2 is_stmt 1 view .LVU5868
4185:src/xeq.c     **** 		result = op_int;
 22627              		.loc 1 4185 5 is_stmt 0 view .LVU5869
 22628 001c 04D0     		beq	.L1628
ARM GAS  /tmp/ccBFDvgN.s 			page 594


 22629              	.LVL1740:
4191:src/xeq.c     **** }
 22630              		.loc 1 4191 2 is_stmt 1 view .LVU5870
 22631 001e 2046     		mov	r0, r4
 22632              	.LVL1741:
4191:src/xeq.c     **** }
 22633              		.loc 1 4191 2 is_stmt 0 view .LVU5871
 22634 0020 FFF7FEFF 		bl	fin_tst
 22635              	.LVL1742:
4192:src/xeq.c     **** 
 22636              		.loc 1 4192 1 view .LVU5872
 22637 0024 0BB0     		add	sp, sp, #44
 22638              		.cfi_remember_state
 22639              		.cfi_def_cfa_offset 12
 22640              		@ sp needed
 22641 0026 30BD     		pop	{r4, r5, pc}
 22642              	.LVL1743:
 22643              	.L1628:
 22644              		.cfi_restore_state
4187:src/xeq.c     **** 		result = 0;
 22645              		.loc 1 4187 7 is_stmt 1 view .LVU5873
 22646              	.LBB3167:
 22647              	.LBI3167:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22648              		.loc 1 824 12 view .LVU5874
 22649              	.LBB3168:
 825:src/xeq.c     **** }
 22650              		.loc 1 825 2 view .LVU5875
 825:src/xeq.c     **** }
 22651              		.loc 1 825 9 is_stmt 0 view .LVU5876
 22652 0028 01A8     		add	r0, sp, #4
 22653              	.LVL1744:
 825:src/xeq.c     **** }
 22654              		.loc 1 825 9 view .LVU5877
 22655 002a 6421     		movs	r1, #100
 22656 002c FFF7FEFF 		bl	getRegister
 22657              	.LVL1745:
 825:src/xeq.c     **** }
 22658              		.loc 1 825 9 view .LVU5878
 22659              	.LBE3168:
 22660              	.LBE3167:
4187:src/xeq.c     **** 		result = 0;
 22661              		.loc 1 4187 10 view .LVU5879
 22662 0030 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 22663 0032 13F0700F 		tst	r3, #112
 22664 0036 05D0     		beq	.L1629
4188:src/xeq.c     **** 	else
 22665              		.loc 1 4188 10 view .LVU5880
 22666 0038 2C46     		mov	r4, r5
 22667              	.LVL1746:
4191:src/xeq.c     **** }
 22668              		.loc 1 4191 2 is_stmt 1 view .LVU5881
 22669 003a 2046     		mov	r0, r4
 22670 003c FFF7FEFF 		bl	fin_tst
 22671              	.LVL1747:
4192:src/xeq.c     **** 
 22672              		.loc 1 4192 1 is_stmt 0 view .LVU5882
ARM GAS  /tmp/ccBFDvgN.s 			page 595


 22673 0040 0BB0     		add	sp, sp, #44
 22674              		.cfi_remember_state
 22675              		.cfi_def_cfa_offset 12
 22676              		@ sp needed
 22677 0042 30BD     		pop	{r4, r5, pc}
 22678              	.LVL1748:
 22679              	.L1629:
 22680              		.cfi_restore_state
4190:src/xeq.c     **** 	fin_tst(result);
 22681              		.loc 1 4190 10 is_stmt 1 view .LVU5883
4190:src/xeq.c     **** 	fin_tst(result);
 22682              		.loc 1 4190 20 is_stmt 0 view .LVU5884
 22683 0044 01A8     		add	r0, sp, #4
 22684 0046 FFF7FEFF 		bl	is_int
 22685              	.LVL1749:
4190:src/xeq.c     **** 	fin_tst(result);
 22686              		.loc 1 4190 31 view .LVU5885
 22687 004a 041B     		subs	r4, r0, r4
 22688              	.LVL1750:
4190:src/xeq.c     **** 	fin_tst(result);
 22689              		.loc 1 4190 31 view .LVU5886
 22690 004c B4FA84F4 		clz	r4, r4
 22691 0050 6409     		lsrs	r4, r4, #5
 22692              	.LVL1751:
4191:src/xeq.c     **** }
 22693              		.loc 1 4191 2 is_stmt 1 view .LVU5887
 22694 0052 2046     		mov	r0, r4
 22695 0054 FFF7FEFF 		bl	fin_tst
 22696              	.LVL1752:
4192:src/xeq.c     **** 
 22697              		.loc 1 4192 1 is_stmt 0 view .LVU5888
 22698 0058 0BB0     		add	sp, sp, #44
 22699              		.cfi_def_cfa_offset 12
 22700              		@ sp needed
 22701 005a 30BD     		pop	{r4, r5, pc}
 22702              	.LVL1753:
 22703              	.L1631:
4192:src/xeq.c     **** 
 22704              		.loc 1 4192 1 view .LVU5889
 22705              		.align	2
 22706              	.L1630:
 22707 005c 00000000 		.word	main_ram
 22708              		.cfi_endproc
 22709              	.LFE222:
 22711              		.section	.text.XisEvenOrOdd,"ax",%progbits
 22712              		.align	1
 22713              		.p2align 2,,3
 22714              		.global	XisEvenOrOdd
 22715              		.syntax unified
 22716              		.thumb
 22717              		.thumb_func
 22718              		.fpu fpv4-sp-d16
 22720              	XisEvenOrOdd:
 22721              	.LVL1754:
 22722              	.LFB223:
4196:src/xeq.c     **** 	decNumber x;
 22723              		.loc 1 4196 34 is_stmt 1 view -0
ARM GAS  /tmp/ccBFDvgN.s 			page 596


 22724              		.cfi_startproc
 22725              		@ args = 0, pretend = 0, frame = 40
 22726              		@ frame_needed = 0, uses_anonymous_args = 0
4197:src/xeq.c     **** 	int odd = (op == OP_XisODD);
 22727              		.loc 1 4197 2 view .LVU5891
4198:src/xeq.c     **** 
 22728              		.loc 1 4198 2 view .LVU5892
4200:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22729              		.loc 1 4200 6 is_stmt 0 view .LVU5893
 22730 0000 174B     		ldr	r3, .L1636
4196:src/xeq.c     **** 	decNumber x;
 22731              		.loc 1 4196 34 view .LVU5894
 22732 0002 30B5     		push	{r4, r5, lr}
 22733              		.cfi_def_cfa_offset 12
 22734              		.cfi_offset 4, -12
 22735              		.cfi_offset 5, -8
 22736              		.cfi_offset 14, -4
4200:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22737              		.loc 1 4200 6 view .LVU5895
 22738 0004 1B68     		ldr	r3, [r3]
 22739 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4200:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22740              		.loc 1 4200 5 view .LVU5896
 22741 000a DB07     		lsls	r3, r3, #31
4196:src/xeq.c     **** 	decNumber x;
 22742              		.loc 1 4196 34 view .LVU5897
 22743 000c 8BB0     		sub	sp, sp, #44
 22744              		.cfi_def_cfa_offset 56
4196:src/xeq.c     **** 	decNumber x;
 22745              		.loc 1 4196 34 view .LVU5898
 22746 000e 0446     		mov	r4, r0
 22747              	.LVL1755:
4200:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22748              		.loc 1 4200 2 is_stmt 1 view .LVU5899
4200:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22749              		.loc 1 4200 5 is_stmt 0 view .LVU5900
 22750 0010 15D5     		bpl	.L1633
4201:src/xeq.c     **** 	} else {
 22751              		.loc 1 4201 3 is_stmt 1 view .LVU5901
 22752              	.LBB3169:
 22753              	.LBI3169:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 22754              		.loc 1 1442 15 view .LVU5902
 22755              	.LBB3170:
1443:src/xeq.c     **** }
 22756              		.loc 1 1443 2 view .LVU5903
1443:src/xeq.c     **** }
 22757              		.loc 1 1443 9 is_stmt 0 view .LVU5904
 22758 0012 6420     		movs	r0, #100
 22759              	.LVL1756:
1443:src/xeq.c     **** }
 22760              		.loc 1 1443 9 view .LVU5905
 22761 0014 FFF7FEFF 		bl	get_reg_n_int
 22762              	.LVL1757:
 22763              	.LBE3170:
 22764              	.LBE3169:
4198:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 597


 22765              		.loc 1 4198 16 view .LVU5906
 22766 0018 A4F18A04 		sub	r4, #138
 22767              	.LVL1758:
4201:src/xeq.c     **** 	} else {
 22768              		.loc 1 4201 23 view .LVU5907
 22769 001c 0023     		movs	r3, #0
4198:src/xeq.c     **** 
 22770              		.loc 1 4198 16 view .LVU5908
 22771 001e 0025     		movs	r5, #0
 22772 0020 B4FA84F4 		clz	r4, r4
4201:src/xeq.c     **** 	} else {
 22773              		.loc 1 4201 23 view .LVU5909
 22774 0024 00F00102 		and	r2, r0, #1
4201:src/xeq.c     **** 	} else {
 22775              		.loc 1 4201 3 view .LVU5910
 22776 0028 AB42     		cmp	r3, r5
4198:src/xeq.c     **** 
 22777              		.loc 1 4198 16 view .LVU5911
 22778 002a 4FEA5414 		lsr	r4, r4, #5
4201:src/xeq.c     **** 	} else {
 22779              		.loc 1 4201 3 view .LVU5912
 22780 002e 06BF     		itte	eq
 22781 0030 A242     		cmpeq	r2, r4
 22782 0032 0120     		moveq	r0, #1
 22783 0034 1846     		movne	r0, r3
 22784 0036 FFF7FEFF 		bl	fin_tst
 22785              	.LVL1759:
4205:src/xeq.c     **** 
 22786              		.loc 1 4205 1 view .LVU5913
 22787 003a 0BB0     		add	sp, sp, #44
 22788              		.cfi_remember_state
 22789              		.cfi_def_cfa_offset 12
 22790              		@ sp needed
 22791 003c 30BD     		pop	{r4, r5, pc}
 22792              	.LVL1760:
 22793              	.L1633:
 22794              		.cfi_restore_state
4203:src/xeq.c     **** 	}
 22795              		.loc 1 4203 3 is_stmt 1 view .LVU5914
 22796              	.LBB3171:
 22797              	.LBI3171:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22798              		.loc 1 824 12 view .LVU5915
 22799              	.LBB3172:
 825:src/xeq.c     **** }
 22800              		.loc 1 825 2 view .LVU5916
 825:src/xeq.c     **** }
 22801              		.loc 1 825 9 is_stmt 0 view .LVU5917
 22802 003e 6421     		movs	r1, #100
 22803 0040 01A8     		add	r0, sp, #4
 22804              	.LVL1761:
 825:src/xeq.c     **** }
 22805              		.loc 1 825 9 view .LVU5918
 22806 0042 FFF7FEFF 		bl	getRegister
 22807              	.LVL1762:
 825:src/xeq.c     **** }
 22808              		.loc 1 825 9 view .LVU5919
ARM GAS  /tmp/ccBFDvgN.s 			page 598


 22809              	.LBE3172:
 22810              	.LBE3171:
4203:src/xeq.c     **** 	}
 22811              		.loc 1 4203 11 view .LVU5920
 22812 0046 FFF7FEFF 		bl	is_even
 22813              	.LVL1763:
4203:src/xeq.c     **** 	}
 22814              		.loc 1 4203 32 view .LVU5921
 22815 004a 8A3C     		subs	r4, r4, #138
 22816              	.LVL1764:
4203:src/xeq.c     **** 	}
 22817              		.loc 1 4203 32 view .LVU5922
 22818 004c 18BF     		it	ne
 22819 004e 0124     		movne	r4, #1
4203:src/xeq.c     **** 	}
 22820              		.loc 1 4203 3 view .LVU5923
 22821 0050 201A     		subs	r0, r4, r0
 22822 0052 B0FA80F0 		clz	r0, r0
 22823 0056 4009     		lsrs	r0, r0, #5
 22824 0058 FFF7FEFF 		bl	fin_tst
 22825              	.LVL1765:
4205:src/xeq.c     **** 
 22826              		.loc 1 4205 1 view .LVU5924
 22827 005c 0BB0     		add	sp, sp, #44
 22828              		.cfi_def_cfa_offset 12
 22829              		@ sp needed
 22830 005e 30BD     		pop	{r4, r5, pc}
 22831              	.L1637:
 22832              		.align	2
 22833              	.L1636:
 22834 0060 00000000 		.word	main_ram
 22835              		.cfi_endproc
 22836              	.LFE223:
 22838              		.section	.text.XisPrime,"ax",%progbits
 22839              		.align	1
 22840              		.p2align 2,,3
 22841              		.global	XisPrime
 22842              		.syntax unified
 22843              		.thumb
 22844              		.thumb_func
 22845              		.fpu fpv4-sp-d16
 22847              	XisPrime:
 22848              	.LVL1766:
 22849              	.LFB224:
4209:src/xeq.c     **** 	unsigned long long int i;
 22850              		.loc 1 4209 30 is_stmt 1 view -0
 22851              		.cfi_startproc
 22852              		@ args = 0, pretend = 0, frame = 40
 22853              		@ frame_needed = 0, uses_anonymous_args = 0
4210:src/xeq.c     **** 	int sgn;
 22854              		.loc 1 4210 2 view .LVU5926
4211:src/xeq.c     **** 
 22855              		.loc 1 4211 2 view .LVU5927
4213:src/xeq.c     **** 	if (!is_intmode()) {
 22856              		.loc 1 4213 2 view .LVU5928
4209:src/xeq.c     **** 	unsigned long long int i;
 22857              		.loc 1 4209 30 is_stmt 0 view .LVU5929
ARM GAS  /tmp/ccBFDvgN.s 			page 599


 22858 0000 70B5     		push	{r4, r5, r6, lr}
 22859              		.cfi_def_cfa_offset 16
 22860              		.cfi_offset 4, -16
 22861              		.cfi_offset 5, -12
 22862              		.cfi_offset 6, -8
 22863              		.cfi_offset 14, -4
 22864 0002 8AB0     		sub	sp, sp, #40
 22865              		.cfi_def_cfa_offset 56
 22866              	.LVL1767:
 22867              	.LBB3173:
 22868              	.LBI3173:
1446:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 22869              		.loc 1 1446 24 is_stmt 1 view .LVU5930
 22870              	.LBB3174:
1447:src/xeq.c     **** }
 22871              		.loc 1 1447 2 view .LVU5931
1447:src/xeq.c     **** }
 22872              		.loc 1 1447 9 is_stmt 0 view .LVU5932
 22873 0004 6946     		mov	r1, sp
 22874 0006 6420     		movs	r0, #100
 22875              	.LVL1768:
1447:src/xeq.c     **** }
 22876              		.loc 1 1447 9 view .LVU5933
 22877 0008 FFF7FEFF 		bl	get_reg_n_int_sgn
 22878              	.LVL1769:
 22879              	.LBE3174:
 22880              	.LBE3173:
4214:src/xeq.c     **** 		decNumber x;
 22881              		.loc 1 4214 6 view .LVU5934
 22882 000c 1B4B     		ldr	r3, .L1648
 22883 000e 1B68     		ldr	r3, [r3]
 22884 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4214:src/xeq.c     **** 		decNumber x;
 22885              		.loc 1 4214 5 view .LVU5935
 22886 0014 13F00104 		ands	r4, r3, #1
 22887              	.LBB3176:
 22888              	.LBB3175:
1447:src/xeq.c     **** }
 22889              		.loc 1 1447 9 view .LVU5936
 22890 0018 0646     		mov	r6, r0
 22891 001a 0D46     		mov	r5, r1
 22892              	.LVL1770:
1447:src/xeq.c     **** }
 22893              		.loc 1 1447 9 view .LVU5937
 22894              	.LBE3175:
 22895              	.LBE3176:
4214:src/xeq.c     **** 		decNumber x;
 22896              		.loc 1 4214 2 is_stmt 1 view .LVU5938
4214:src/xeq.c     **** 		decNumber x;
 22897              		.loc 1 4214 5 is_stmt 0 view .LVU5939
 22898 001c 11D0     		beq	.L1639
 22899 001e 009B     		ldr	r3, [sp]
 22900              	.LVL1771:
 22901              	.L1640:
4224:src/xeq.c     **** }
 22902              		.loc 1 4224 2 is_stmt 1 view .LVU5940
 22903 0020 23B1     		cbz	r3, .L1647
ARM GAS  /tmp/ccBFDvgN.s 			page 600


 22904              	.L1645:
4224:src/xeq.c     **** }
 22905              		.loc 1 4224 2 is_stmt 0 view .LVU5941
 22906 0022 0020     		movs	r0, #0
 22907 0024 FFF7FEFF 		bl	fin_tst
 22908              	.LVL1772:
4225:src/xeq.c     **** 
 22909              		.loc 1 4225 1 view .LVU5942
 22910 0028 0AB0     		add	sp, sp, #40
 22911              		.cfi_remember_state
 22912              		.cfi_def_cfa_offset 16
 22913              		@ sp needed
 22914 002a 70BD     		pop	{r4, r5, r6, pc}
 22915              	.L1647:
 22916              		.cfi_restore_state
4224:src/xeq.c     **** }
 22917              		.loc 1 4224 22 discriminator 1 view .LVU5943
 22918 002c 2946     		mov	r1, r5
 22919 002e 3046     		mov	r0, r6
 22920 0030 FFF7FEFF 		bl	isPrime
 22921              	.LVL1773:
4224:src/xeq.c     **** }
 22922              		.loc 1 4224 2 discriminator 1 view .LVU5944
 22923 0034 0038     		subs	r0, r0, #0
 22924 0036 18BF     		it	ne
 22925 0038 0120     		movne	r0, #1
 22926 003a FFF7FEFF 		bl	fin_tst
 22927              	.LVL1774:
4225:src/xeq.c     **** 
 22928              		.loc 1 4225 1 discriminator 1 view .LVU5945
 22929 003e 0AB0     		add	sp, sp, #40
 22930              		.cfi_remember_state
 22931              		.cfi_def_cfa_offset 16
 22932              		@ sp needed
 22933 0040 70BD     		pop	{r4, r5, r6, pc}
 22934              	.LVL1775:
 22935              	.L1639:
 22936              		.cfi_restore_state
 22937              	.LBB3177:
4215:src/xeq.c     **** 
 22938              		.loc 1 4215 3 is_stmt 1 view .LVU5946
4217:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
 22939              		.loc 1 4217 3 view .LVU5947
 22940              	.LBB3178:
 22941              	.LBI3178:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22942              		.loc 1 824 12 view .LVU5948
 22943              	.LBB3179:
 825:src/xeq.c     **** }
 22944              		.loc 1 825 2 view .LVU5949
 825:src/xeq.c     **** }
 22945              		.loc 1 825 9 is_stmt 0 view .LVU5950
 22946 0042 01A8     		add	r0, sp, #4
 22947              	.LVL1776:
 825:src/xeq.c     **** }
 22948              		.loc 1 825 9 view .LVU5951
 22949 0044 6421     		movs	r1, #100
ARM GAS  /tmp/ccBFDvgN.s 			page 601


 22950 0046 FFF7FEFF 		bl	getRegister
 22951              	.LVL1777:
 825:src/xeq.c     **** }
 22952              		.loc 1 825 9 view .LVU5952
 22953              	.LBE3179:
 22954              	.LBE3178:
4218:src/xeq.c     **** 			sgn = 1; // not prime
 22955              		.loc 1 4218 3 is_stmt 1 view .LVU5953
4218:src/xeq.c     **** 			sgn = 1; // not prime
 22956              		.loc 1 4218 6 is_stmt 0 view .LVU5954
 22957 004a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 22958 004e 13F0700F 		tst	r3, #112
 22959 0052 06D0     		beq	.L1641
4219:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22960              		.loc 1 4219 4 is_stmt 1 view .LVU5955
4219:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22961              		.loc 1 4219 8 is_stmt 0 view .LVU5956
 22962 0054 0123     		movs	r3, #1
 22963              	.LBE3177:
4224:src/xeq.c     **** }
 22964              		.loc 1 4224 2 view .LVU5957
 22965 0056 2046     		mov	r0, r4
 22966              	.LBB3180:
4219:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22967              		.loc 1 4219 8 view .LVU5958
 22968 0058 0093     		str	r3, [sp]
4219:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22969              		.loc 1 4219 8 view .LVU5959
 22970              	.LBE3180:
4224:src/xeq.c     **** }
 22971              		.loc 1 4224 2 is_stmt 1 view .LVU5960
 22972 005a FFF7FEFF 		bl	fin_tst
 22973              	.LVL1778:
4225:src/xeq.c     **** 
 22974              		.loc 1 4225 1 is_stmt 0 view .LVU5961
 22975 005e 0AB0     		add	sp, sp, #40
 22976              		.cfi_remember_state
 22977              		.cfi_def_cfa_offset 16
 22978              		@ sp needed
 22979 0060 70BD     		pop	{r4, r5, r6, pc}
 22980              	.L1641:
 22981              		.cfi_restore_state
 22982              	.LBB3181:
4220:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22983              		.loc 1 4220 8 is_stmt 1 view .LVU5962
4220:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22984              		.loc 1 4220 12 is_stmt 0 view .LVU5963
 22985 0062 0749     		ldr	r1, .L1648+4
 22986 0064 01A8     		add	r0, sp, #4
 22987 0066 FFF7FEFF 		bl	dn_lt
 22988              	.LVL1779:
 22989 006a 009B     		ldr	r3, [sp]
4220:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22990              		.loc 1 4220 11 view .LVU5964
 22991 006c 0028     		cmp	r0, #0
 22992 006e D7D1     		bne	.L1640
4222:src/xeq.c     **** 	}
ARM GAS  /tmp/ccBFDvgN.s 			page 602


 22993              		.loc 1 4222 4 is_stmt 1 view .LVU5965
 22994              	.LVL1780:
4222:src/xeq.c     **** 	}
 22995              		.loc 1 4222 6 is_stmt 0 view .LVU5966
 22996 0070 4FF0FF36 		mov	r6, #-1
 22997 0074 3546     		mov	r5, r6
4222:src/xeq.c     **** 	}
 22998              		.loc 1 4222 6 view .LVU5967
 22999              	.LBE3181:
4224:src/xeq.c     **** }
 23000              		.loc 1 4224 2 is_stmt 1 view .LVU5968
 23001 0076 002B     		cmp	r3, #0
 23002 0078 D3D1     		bne	.L1645
 23003 007a D7E7     		b	.L1647
 23004              	.L1649:
 23005              		.align	2
 23006              	.L1648:
 23007 007c 00000000 		.word	main_ram
 23008 0080 00000000 		.word	const_2pow64
 23009              		.cfi_endproc
 23010              	.LFE224:
 23012              		.section	.text.isInfinite,"ax",%progbits
 23013              		.align	1
 23014              		.p2align 2,,3
 23015              		.global	isInfinite
 23016              		.syntax unified
 23017              		.thumb
 23018              		.thumb_func
 23019              		.fpu fpv4-sp-d16
 23021              	isInfinite:
 23022              	.LVL1781:
 23023              	.LFB225:
4229:src/xeq.c     **** 	decNumber x;
 23024              		.loc 1 4229 32 view -0
 23025              		.cfi_startproc
 23026              		@ args = 0, pretend = 0, frame = 40
 23027              		@ frame_needed = 0, uses_anonymous_args = 0
4230:src/xeq.c     **** 
 23028              		.loc 1 4230 2 view .LVU5970
4232:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
 23029              		.loc 1 4232 2 view .LVU5971
4229:src/xeq.c     **** 	decNumber x;
 23030              		.loc 1 4229 32 is_stmt 0 view .LVU5972
 23031 0000 00B5     		push	{lr}
 23032              		.cfi_def_cfa_offset 4
 23033              		.cfi_offset 14, -4
 23034 0002 8BB0     		sub	sp, sp, #44
 23035              		.cfi_def_cfa_offset 48
 23036              	.LVL1782:
 23037              	.LBB3182:
 23038              	.LBI3182:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23039              		.loc 1 824 12 is_stmt 1 view .LVU5973
 23040              	.LBB3183:
 825:src/xeq.c     **** }
 23041              		.loc 1 825 2 view .LVU5974
 825:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 603


 23042              		.loc 1 825 9 is_stmt 0 view .LVU5975
 23043 0004 6421     		movs	r1, #100
 23044 0006 01A8     		add	r0, sp, #4
 23045              	.LVL1783:
 825:src/xeq.c     **** }
 23046              		.loc 1 825 9 view .LVU5976
 23047 0008 FFF7FEFF 		bl	getRegister
 23048              	.LVL1784:
 825:src/xeq.c     **** }
 23049              		.loc 1 825 9 view .LVU5977
 23050              	.LBE3183:
 23051              	.LBE3182:
4233:src/xeq.c     **** }
 23052              		.loc 1 4233 2 is_stmt 1 view .LVU5978
4233:src/xeq.c     **** }
 23053              		.loc 1 4233 10 is_stmt 0 view .LVU5979
 23054 000c 074B     		ldr	r3, .L1654
 23055 000e 1B68     		ldr	r3, [r3]
 23056 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4233:src/xeq.c     **** }
 23057              		.loc 1 4233 2 view .LVU5980
 23058 0014 DB07     		lsls	r3, r3, #31
 23059 0016 56BF     		itet	pl
 23060 0018 9DF80C00 		ldrbpl	r0, [sp, #12]	@ zero_extendqisi2
 23061 001c 0020     		movmi	r0, #0
 23062 001e C0F38010 		ubfxpl	r0, r0, #6, #1
 23063 0022 FFF7FEFF 		bl	fin_tst
 23064              	.LVL1785:
4234:src/xeq.c     **** 
 23065              		.loc 1 4234 1 view .LVU5981
 23066 0026 0BB0     		add	sp, sp, #44
 23067              		.cfi_def_cfa_offset 4
 23068              		@ sp needed
 23069 0028 5DF804FB 		ldr	pc, [sp], #4
 23070              	.L1655:
 23071              		.align	2
 23072              	.L1654:
 23073 002c 00000000 		.word	main_ram
 23074              		.cfi_endproc
 23075              	.LFE225:
 23077              		.section	.text.isNan,"ax",%progbits
 23078              		.align	1
 23079              		.p2align 2,,3
 23080              		.global	isNan
 23081              		.syntax unified
 23082              		.thumb
 23083              		.thumb_func
 23084              		.fpu fpv4-sp-d16
 23086              	isNan:
 23087              	.LVL1786:
 23088              	.LFB226:
4240:src/xeq.c     **** 	decNumber x;
 23089              		.loc 1 4240 27 is_stmt 1 view -0
 23090              		.cfi_startproc
 23091              		@ args = 0, pretend = 0, frame = 40
 23092              		@ frame_needed = 0, uses_anonymous_args = 0
4241:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 604


 23093              		.loc 1 4241 2 view .LVU5983
4243:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
 23094              		.loc 1 4243 2 view .LVU5984
4240:src/xeq.c     **** 	decNumber x;
 23095              		.loc 1 4240 27 is_stmt 0 view .LVU5985
 23096 0000 00B5     		push	{lr}
 23097              		.cfi_def_cfa_offset 4
 23098              		.cfi_offset 14, -4
 23099 0002 8BB0     		sub	sp, sp, #44
 23100              		.cfi_def_cfa_offset 48
 23101              	.LVL1787:
 23102              	.LBB3184:
 23103              	.LBI3184:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23104              		.loc 1 824 12 is_stmt 1 view .LVU5986
 23105              	.LBB3185:
 825:src/xeq.c     **** }
 23106              		.loc 1 825 2 view .LVU5987
 825:src/xeq.c     **** }
 23107              		.loc 1 825 9 is_stmt 0 view .LVU5988
 23108 0004 6421     		movs	r1, #100
 23109 0006 01A8     		add	r0, sp, #4
 23110              	.LVL1788:
 825:src/xeq.c     **** }
 23111              		.loc 1 825 9 view .LVU5989
 23112 0008 FFF7FEFF 		bl	getRegister
 23113              	.LVL1789:
 825:src/xeq.c     **** }
 23114              		.loc 1 825 9 view .LVU5990
 23115              	.LBE3185:
 23116              	.LBE3184:
4244:src/xeq.c     **** }
 23117              		.loc 1 4244 2 is_stmt 1 view .LVU5991
4244:src/xeq.c     **** }
 23118              		.loc 1 4244 10 is_stmt 0 view .LVU5992
 23119 000c 0B4B     		ldr	r3, .L1660
 23120 000e 1B68     		ldr	r3, [r3]
 23121 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4244:src/xeq.c     **** }
 23122              		.loc 1 4244 2 view .LVU5993
 23123 0014 DB07     		lsls	r3, r3, #31
 23124 0016 0BD4     		bmi	.L1658
4244:src/xeq.c     **** }
 23125              		.loc 1 4244 2 discriminator 1 view .LVU5994
 23126 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23127 001c 13F0300F 		tst	r3, #48
 23128 0020 14BF     		ite	ne
 23129 0022 0120     		movne	r0, #1
 23130 0024 0020     		moveq	r0, #0
 23131 0026 FFF7FEFF 		bl	fin_tst
 23132              	.LVL1790:
4245:src/xeq.c     **** 
 23133              		.loc 1 4245 1 discriminator 1 view .LVU5995
 23134 002a 0BB0     		add	sp, sp, #44
 23135              		.cfi_remember_state
 23136              		.cfi_def_cfa_offset 4
 23137              		@ sp needed
ARM GAS  /tmp/ccBFDvgN.s 			page 605


 23138 002c 5DF804FB 		ldr	pc, [sp], #4
 23139              	.L1658:
 23140              		.cfi_restore_state
4244:src/xeq.c     **** }
 23141              		.loc 1 4244 2 view .LVU5996
 23142 0030 0020     		movs	r0, #0
 23143 0032 FFF7FEFF 		bl	fin_tst
 23144              	.LVL1791:
4245:src/xeq.c     **** 
 23145              		.loc 1 4245 1 view .LVU5997
 23146 0036 0BB0     		add	sp, sp, #44
 23147              		.cfi_def_cfa_offset 4
 23148              		@ sp needed
 23149 0038 5DF804FB 		ldr	pc, [sp], #4
 23150              	.L1661:
 23151              		.align	2
 23152              	.L1660:
 23153 003c 00000000 		.word	main_ram
 23154              		.cfi_endproc
 23155              	.LFE226:
 23157              		.section	.text.isSpecial,"ax",%progbits
 23158              		.align	1
 23159              		.p2align 2,,3
 23160              		.global	isSpecial
 23161              		.syntax unified
 23162              		.thumb
 23163              		.thumb_func
 23164              		.fpu fpv4-sp-d16
 23166              	isSpecial:
 23167              	.LVL1792:
 23168              	.LFB227:
4247:src/xeq.c     **** 	decNumber x;
 23169              		.loc 1 4247 31 is_stmt 1 view -0
 23170              		.cfi_startproc
 23171              		@ args = 0, pretend = 0, frame = 40
 23172              		@ frame_needed = 0, uses_anonymous_args = 0
4248:src/xeq.c     **** 
 23173              		.loc 1 4248 2 view .LVU5999
4250:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
 23174              		.loc 1 4250 2 view .LVU6000
4247:src/xeq.c     **** 	decNumber x;
 23175              		.loc 1 4247 31 is_stmt 0 view .LVU6001
 23176 0000 00B5     		push	{lr}
 23177              		.cfi_def_cfa_offset 4
 23178              		.cfi_offset 14, -4
 23179 0002 8BB0     		sub	sp, sp, #44
 23180              		.cfi_def_cfa_offset 48
 23181              	.LVL1793:
 23182              	.LBB3186:
 23183              	.LBI3186:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23184              		.loc 1 824 12 is_stmt 1 view .LVU6002
 23185              	.LBB3187:
 825:src/xeq.c     **** }
 23186              		.loc 1 825 2 view .LVU6003
 825:src/xeq.c     **** }
 23187              		.loc 1 825 9 is_stmt 0 view .LVU6004
ARM GAS  /tmp/ccBFDvgN.s 			page 606


 23188 0004 6421     		movs	r1, #100
 23189 0006 01A8     		add	r0, sp, #4
 23190              	.LVL1794:
 825:src/xeq.c     **** }
 23191              		.loc 1 825 9 view .LVU6005
 23192 0008 FFF7FEFF 		bl	getRegister
 23193              	.LVL1795:
 825:src/xeq.c     **** }
 23194              		.loc 1 825 9 view .LVU6006
 23195              	.LBE3187:
 23196              	.LBE3186:
4251:src/xeq.c     **** }
 23197              		.loc 1 4251 2 is_stmt 1 view .LVU6007
4251:src/xeq.c     **** }
 23198              		.loc 1 4251 10 is_stmt 0 view .LVU6008
 23199 000c 0B4B     		ldr	r3, .L1666
 23200 000e 1B68     		ldr	r3, [r3]
 23201 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4251:src/xeq.c     **** }
 23202              		.loc 1 4251 2 view .LVU6009
 23203 0014 DB07     		lsls	r3, r3, #31
 23204 0016 0BD4     		bmi	.L1664
4251:src/xeq.c     **** }
 23205              		.loc 1 4251 2 discriminator 1 view .LVU6010
 23206 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23207 001c 13F0700F 		tst	r3, #112
 23208 0020 14BF     		ite	ne
 23209 0022 0120     		movne	r0, #1
 23210 0024 0020     		moveq	r0, #0
 23211 0026 FFF7FEFF 		bl	fin_tst
 23212              	.LVL1796:
4252:src/xeq.c     **** 
 23213              		.loc 1 4252 1 discriminator 1 view .LVU6011
 23214 002a 0BB0     		add	sp, sp, #44
 23215              		.cfi_remember_state
 23216              		.cfi_def_cfa_offset 4
 23217              		@ sp needed
 23218 002c 5DF804FB 		ldr	pc, [sp], #4
 23219              	.L1664:
 23220              		.cfi_restore_state
4251:src/xeq.c     **** }
 23221              		.loc 1 4251 2 view .LVU6012
 23222 0030 0020     		movs	r0, #0
 23223 0032 FFF7FEFF 		bl	fin_tst
 23224              	.LVL1797:
4252:src/xeq.c     **** 
 23225              		.loc 1 4252 1 view .LVU6013
 23226 0036 0BB0     		add	sp, sp, #44
 23227              		.cfi_def_cfa_offset 4
 23228              		@ sp needed
 23229 0038 5DF804FB 		ldr	pc, [sp], #4
 23230              	.L1667:
 23231              		.align	2
 23232              	.L1666:
 23233 003c 00000000 		.word	main_ram
 23234              		.cfi_endproc
 23235              	.LFE227:
ARM GAS  /tmp/ccBFDvgN.s 			page 607


 23237              		.section	.text.op_entryp,"ax",%progbits
 23238              		.align	1
 23239              		.p2align 2,,3
 23240              		.global	op_entryp
 23241              		.syntax unified
 23242              		.thumb
 23243              		.thumb_func
 23244              		.fpu fpv4-sp-d16
 23246              	op_entryp:
 23247              	.LVL1798:
 23248              	.LFB228:
4254:src/xeq.c     **** 	fin_tst(State.entryp);
 23249              		.loc 1 4254 31 is_stmt 1 view -0
 23250              		.cfi_startproc
 23251              		@ args = 0, pretend = 0, frame = 0
 23252              		@ frame_needed = 0, uses_anonymous_args = 0
 23253              		@ link register save eliminated.
4255:src/xeq.c     **** }
 23254              		.loc 1 4255 2 view .LVU6015
4255:src/xeq.c     **** }
 23255              		.loc 1 4255 15 is_stmt 0 view .LVU6016
 23256 0000 034B     		ldr	r3, .L1669
 23257 0002 1B68     		ldr	r3, [r3]
 23258 0004 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
 23259              	.LVL1799:
4255:src/xeq.c     **** }
 23260              		.loc 1 4255 2 view .LVU6017
 23261 0008 C0F30010 		ubfx	r0, r0, #4, #1
 23262 000c FFF7FEBF 		b	fin_tst
 23263              	.LVL1800:
 23264              	.L1670:
 23265              		.align	2
 23266              	.L1669:
 23267 0010 00000000 		.word	main_ram
 23268              		.cfi_endproc
 23269              	.LFE228:
 23271              		.section	.text.reg_decode,"ax",%progbits
 23272              		.align	1
 23273              		.p2align 2,,3
 23274              		.global	reg_decode
 23275              		.syntax unified
 23276              		.thumb
 23277              		.thumb_func
 23278              		.fpu fpv4-sp-d16
 23280              	reg_decode:
 23281              	.LVL1801:
 23282              	.LFB229:
4259:src/xeq.c     **** 	decNumber x, y;
 23283              		.loc 1 4259 51 is_stmt 1 view -0
 23284              		.cfi_startproc
 23285              		@ args = 0, pretend = 0, frame = 80
 23286              		@ frame_needed = 0, uses_anonymous_args = 0
4260:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
 23287              		.loc 1 4260 2 view .LVU6019
4261:src/xeq.c     **** 
 23288              		.loc 1 4261 2 view .LVU6020
4263:src/xeq.c     **** 		bad_mode_error();
ARM GAS  /tmp/ccBFDvgN.s 			page 608


 23289              		.loc 1 4263 2 view .LVU6021
4259:src/xeq.c     **** 	decNumber x, y;
 23290              		.loc 1 4259 51 is_stmt 0 view .LVU6022
 23291 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 23292              		.cfi_def_cfa_offset 36
 23293              		.cfi_offset 4, -36
 23294              		.cfi_offset 5, -32
 23295              		.cfi_offset 6, -28
 23296              		.cfi_offset 7, -24
 23297              		.cfi_offset 8, -20
 23298              		.cfi_offset 9, -16
 23299              		.cfi_offset 10, -12
 23300              		.cfi_offset 11, -8
 23301              		.cfi_offset 14, -4
4263:src/xeq.c     **** 		bad_mode_error();
 23302              		.loc 1 4263 6 view .LVU6023
 23303 0004 DFF82CA2 		ldr	r10, .L1723+28
 23304 0008 DAF80040 		ldr	r4, [r10]
 23305 000c 94F8E847 		ldrb	r4, [r4, #2024]	@ zero_extendqisi2
4259:src/xeq.c     **** 	decNumber x, y;
 23306              		.loc 1 4259 51 view .LVU6024
 23307 0010 1F46     		mov	r7, r3
4263:src/xeq.c     **** 		bad_mode_error();
 23308              		.loc 1 4263 5 view .LVU6025
 23309 0012 14F00103 		ands	r3, r4, #1
 23310              	.LVL1802:
4259:src/xeq.c     **** 	decNumber x, y;
 23311              		.loc 1 4259 51 view .LVU6026
 23312 0016 95B0     		sub	sp, sp, #84
 23313              		.cfi_def_cfa_offset 120
4263:src/xeq.c     **** 		bad_mode_error();
 23314              		.loc 1 4263 5 view .LVU6027
 23315 0018 0CD0     		beq	.L1672
4264:src/xeq.c     **** 		return 1;
 23316              		.loc 1 4264 3 is_stmt 1 view .LVU6028
 23317              	.LBB3230:
 23318              	.LBI3230:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 23319              		.loc 1 575 6 view .LVU6029
 23320              	.LBE3230:
 576:src/xeq.c     **** }
 23321              		.loc 1 576 2 view .LVU6030
 23322              	.LVL1803:
 23323              	.LBB3241:
 23324              	.LBB3231:
 23325              	.LBI3231:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23326              		.loc 1 546 5 view .LVU6031
 23327              	.LBB3232:
 547:src/xeq.c     **** 		Error = e;
 23328              		.loc 1 547 2 view .LVU6032
 547:src/xeq.c     **** 		Error = e;
 23329              		.loc 1 547 12 is_stmt 0 view .LVU6033
 23330 001a 7F4B     		ldr	r3, .L1723
 547:src/xeq.c     **** 		Error = e;
 23331              		.loc 1 547 5 view .LVU6034
 23332 001c 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccBFDvgN.s 			page 609


 23333              	.LVL1804:
 547:src/xeq.c     **** 		Error = e;
 23334              		.loc 1 547 5 view .LVU6035
 23335 001e 1AB1     		cbz	r2, .L1717
 23336              	.LVL1805:
 23337              	.L1700:
 547:src/xeq.c     **** 		Error = e;
 23338              		.loc 1 547 5 view .LVU6036
 23339              	.LBE3232:
 23340              	.LBE3231:
 23341              	.LBE3241:
4265:src/xeq.c     **** 	}
 23342              		.loc 1 4265 10 view .LVU6037
 23343 0020 0120     		movs	r0, #1
4337:src/xeq.c     **** 
 23344              		.loc 1 4337 1 view .LVU6038
 23345 0022 15B0     		add	sp, sp, #84
 23346              		.cfi_remember_state
 23347              		.cfi_def_cfa_offset 36
 23348              		@ sp needed
 23349 0024 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23350              	.LVL1806:
 23351              	.L1717:
 23352              		.cfi_restore_state
 23353              	.LBB3242:
 23354              	.LBB3239:
 23355              	.LBB3237:
 23356              	.LBB3233:
 23357              	.LBI3233:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23358              		.loc 1 546 5 is_stmt 1 view .LVU6039
 23359              	.LBB3234:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23360              		.loc 1 548 3 view .LVU6040
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23361              		.loc 1 548 9 is_stmt 0 view .LVU6041
 23362 0028 0D22     		movs	r2, #13
 23363              	.LBE3234:
 23364              	.LBE3233:
 23365              	.LBE3237:
 23366              	.LBE3239:
 23367              	.LBE3242:
4265:src/xeq.c     **** 	}
 23368              		.loc 1 4265 10 view .LVU6042
 23369 002a 0120     		movs	r0, #1
 23370              	.LVL1807:
 23371              	.LBB3243:
 23372              	.LBB3240:
 23373              	.LBB3238:
 23374              	.LBB3236:
 23375              	.LBB3235:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23376              		.loc 1 548 9 view .LVU6043
 23377 002c 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 23378              		.loc 1 549 3 is_stmt 1 view .LVU6044
 23379              	.LBE3235:
ARM GAS  /tmp/ccBFDvgN.s 			page 610


 23380              	.LBE3236:
 23381              	.LBE3238:
 23382              	.LBE3240:
 23383              	.LBE3243:
4337:src/xeq.c     **** 
 23384              		.loc 1 4337 1 is_stmt 0 view .LVU6045
 23385 002e 15B0     		add	sp, sp, #84
 23386              		.cfi_remember_state
 23387              		.cfi_def_cfa_offset 36
 23388              		@ sp needed
 23389 0030 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23390              	.LVL1808:
 23391              	.L1672:
 23392              		.cfi_restore_state
4337:src/xeq.c     **** 
 23393              		.loc 1 4337 1 view .LVU6046
 23394 0034 8346     		mov	fp, r0
 23395              	.LVL1809:
4337:src/xeq.c     **** 
 23396              		.loc 1 4337 1 view .LVU6047
 23397 0036 8946     		mov	r9, r1
 23398              	.LVL1810:
 23399              	.LBB3244:
 23400              	.LBB3245:
 23401              	.LBB3246:
 23402              	.LBB3247:
 825:src/xeq.c     **** }
 23403              		.loc 1 825 9 view .LVU6048
 23404 0038 02A8     		add	r0, sp, #8
 23405              	.LVL1811:
 825:src/xeq.c     **** }
 23406              		.loc 1 825 9 view .LVU6049
 23407 003a 6421     		movs	r1, #100
 23408              	.LVL1812:
 825:src/xeq.c     **** }
 23409              		.loc 1 825 9 view .LVU6050
 23410 003c 0193     		str	r3, [sp, #4]
 23411 003e 9046     		mov	r8, r2
 23412              	.LVL1813:
 825:src/xeq.c     **** }
 23413              		.loc 1 825 9 view .LVU6051
 23414              	.LBE3247:
 23415              	.LBE3246:
 23416              	.LBE3245:
 23417              	.LBI3244:
4259:src/xeq.c     **** 	decNumber x, y;
 23418              		.loc 1 4259 5 is_stmt 1 view .LVU6052
 23419              	.LBB3327:
4267:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
 23420              		.loc 1 4267 2 view .LVU6053
 23421              	.LBB3249:
 23422              	.LBI3246:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23423              		.loc 1 824 12 view .LVU6054
 23424              	.LBB3248:
 825:src/xeq.c     **** }
 23425              		.loc 1 825 2 view .LVU6055
ARM GAS  /tmp/ccBFDvgN.s 			page 611


 825:src/xeq.c     **** }
 23426              		.loc 1 825 9 is_stmt 0 view .LVU6056
 23427 0040 FFF7FEFF 		bl	getRegister
 23428              	.LVL1814:
 825:src/xeq.c     **** }
 23429              		.loc 1 825 9 view .LVU6057
 23430              	.LBE3248:
 23431              	.LBE3249:
4268:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
 23432              		.loc 1 4268 2 is_stmt 1 view .LVU6058
 23433 0044 0522     		movs	r2, #5
 23434 0046 02A9     		add	r1, sp, #8
 23435 0048 0BA8     		add	r0, sp, #44
 23436 004a FFF7FEFF 		bl	dn_mulpow10
 23437              	.LVL1815:
4269:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
 23438              		.loc 1 4269 2 view .LVU6059
 23439 004e 0BA9     		add	r1, sp, #44
 23440 0050 02A8     		add	r0, sp, #8
 23441 0052 FFF7FEFF 		bl	decNumberTrunc
 23442              	.LVL1816:
4270:src/xeq.c     **** 
 23443              		.loc 1 4270 2 view .LVU6060
4270:src/xeq.c     **** 
 23444              		.loc 1 4270 9 is_stmt 0 view .LVU6061
 23445 0056 02A8     		add	r0, sp, #8
 23446 0058 FFF7FEFF 		bl	dn_to_int
 23447              	.LVL1817:
4272:src/xeq.c     **** 		if (!flash)
 23448              		.loc 1 4272 2 is_stmt 1 view .LVU6062
4272:src/xeq.c     **** 		if (!flash)
 23449              		.loc 1 4272 5 is_stmt 0 view .LVU6063
 23450 005c 041E     		subs	r4, r0, #0
 23451 005e 35DB     		blt	.L1674
 23452              	.LVL1818:
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23453              		.loc 1 4280 2 is_stmt 1 view .LVU6064
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23454              		.loc 1 4280 8 is_stmt 0 view .LVU6065
 23455 0060 6E4A     		ldr	r2, .L1723+4
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23456              		.loc 1 4282 6 view .LVU6066
 23457 0062 6F4E     		ldr	r6, .L1723+8
4286:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23458              		.loc 1 4286 9 view .LVU6067
 23459 0064 6F48     		ldr	r0, .L1723+12
 23460              	.LVL1819:
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23461              		.loc 1 4280 8 view .LVU6068
 23462 0066 82FB0432 		smull	r3, r2, r2, r4
 23463 006a E517     		asrs	r5, r4, #31
4281:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23464              		.loc 1 4281 7 view .LVU6069
 23465 006c C5EBA211 		rsb	r1, r5, r2, asr #6
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23466              		.loc 1 4282 6 view .LVU6070
 23467 0070 A6FB0136 		umull	r3, r6, r6, r1
ARM GAS  /tmp/ccBFDvgN.s 			page 612


4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23468              		.loc 1 4280 8 view .LVU6071
 23469 0074 4FF47A77 		mov	r7, #1000
 23470              	.LVL1820:
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23471              		.loc 1 4282 6 view .LVU6072
 23472 0078 7209     		lsrs	r2, r6, #5
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23473              		.loc 1 4280 8 view .LVU6073
 23474 007a 07FB1145 		mls	r5, r7, r1, r4
 23475              	.LVL1821:
4281:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23476              		.loc 1 4281 2 is_stmt 1 view .LVU6074
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23477              		.loc 1 4282 2 view .LVU6075
4286:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23478              		.loc 1 4286 9 is_stmt 0 view .LVU6076
 23479 007e 8442     		cmp	r4, r0
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23480              		.loc 1 4282 6 view .LVU6077
 23481 0080 4FF06407 		mov	r7, #100
4283:src/xeq.c     **** 
 23482              		.loc 1 4283 7 view .LVU6078
 23483 0084 1646     		mov	r6, r2
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23484              		.loc 1 4282 6 view .LVU6079
 23485 0086 07FB1212 		mls	r2, r7, r2, r1
 23486              	.LVL1822:
4283:src/xeq.c     **** 
 23487              		.loc 1 4283 2 is_stmt 1 view .LVU6080
4285:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23488              		.loc 1 4285 2 view .LVU6081
4286:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23489              		.loc 1 4286 9 is_stmt 0 view .LVU6082
 23490 008a 59DA     		bge	.L1675
 23491 008c 6649     		ldr	r1, .L1723+16
 23492 008e 019B     		ldr	r3, [sp, #4]
 23493 0090 8C42     		cmp	r4, r1
 23494 0092 7ADA     		bge	.L1702
 23495              	.LBB3250:
 23496              	.LBI3250:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23497              		.loc 1 253 14 is_stmt 1 view .LVU6083
 23498              	.LBE3250:
 23499              	.LBE3327:
 23500              	.LBE3244:
 254:src/xeq.c     **** }
 23501              		.loc 1 254 2 view .LVU6084
 23502              	.LVL1823:
 23503              	.LBB3334:
 23504              	.LBB3328:
 23505              	.LBB3256:
 23506              	.LBB3251:
 23507              	.LBI3251:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23508              		.loc 1 241 14 view .LVU6085
 23509              	.LBB3252:
ARM GAS  /tmp/ccBFDvgN.s 			page 613


 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23510              		.loc 1 242 2 view .LVU6086
 23511              	.LBB3253:
 23512              	.LBI3253:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23513              		.loc 1 1118 5 view .LVU6087
 23514              	.LBB3254:
1119:src/xeq.c     **** }
 23515              		.loc 1 1119 2 view .LVU6088
1119:src/xeq.c     **** }
 23516              		.loc 1 1119 12 is_stmt 0 view .LVU6089
 23517 0094 DAF80010 		ldr	r1, [r10]
1119:src/xeq.c     **** }
 23518              		.loc 1 1119 24 view .LVU6090
 23519 0098 B1F8E807 		ldrh	r0, [r1, #2024]
 23520 009c 44F20103 		movw	r3, #16385
 23521              	.LBE3254:
 23522              	.LBE3253:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23523              		.loc 1 242 5 view .LVU6091
 23524 00a0 0340     		ands	r3, r3, r0
 23525 00a2 B3F5804F 		cmp	r3, #16384
 23526              	.LBB3255:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23527              		.loc 1 243 24 view .LVU6092
 23528 00a6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23529              		.loc 1 243 3 is_stmt 1 view .LVU6093
 244:src/xeq.c     **** 	}
 23530              		.loc 1 244 3 view .LVU6094
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23531              		.loc 1 243 13 is_stmt 0 view .LVU6095
 23532 00aa 04BF     		itt	eq
 23533 00ac 0C3B     		subeq	r3, r3, #12
 244:src/xeq.c     **** 	}
 23534              		.loc 1 244 67 view .LVU6096
 23535 00ae 5B10     		asreq	r3, r3, #1
 23536              	.LVL1824:
 23537              	.L1681:
 244:src/xeq.c     **** 	}
 23538              		.loc 1 244 67 view .LVU6097
 23539              	.LBE3255:
 23540              	.LBE3252:
 23541              	.LBE3251:
 23542              	.LBE3256:
4289:src/xeq.c     **** 		goto range_error;
 23543              		.loc 1 4289 5 view .LVU6098
 23544 00b0 B342     		cmp	r3, r6
 23545 00b2 4FF00007 		mov	r7, #0
 23546              	.LVL1825:
4289:src/xeq.c     **** 		goto range_error;
 23547              		.loc 1 4289 2 is_stmt 1 view .LVU6099
4289:src/xeq.c     **** 		goto range_error;
 23548              		.loc 1 4289 5 is_stmt 0 view .LVU6100
 23549 00b6 22DC     		bgt	.L1718
 23550              	.LVL1826:
 23551              	.L1677:
ARM GAS  /tmp/ccBFDvgN.s 			page 614


 23552              	.LDL1:
4335:src/xeq.c     **** 	return 1;
 23553              		.loc 1 4335 2 is_stmt 1 view .LVU6101
 23554              	.LBB3257:
 23555              	.LBI3257:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23556              		.loc 1 546 5 view .LVU6102
 23557              	.LBB3258:
 547:src/xeq.c     **** 		Error = e;
 23558              		.loc 1 547 2 view .LVU6103
 547:src/xeq.c     **** 		Error = e;
 23559              		.loc 1 547 12 is_stmt 0 view .LVU6104
 23560 00b8 574B     		ldr	r3, .L1723
 547:src/xeq.c     **** 		Error = e;
 23561              		.loc 1 547 5 view .LVU6105
 23562 00ba 1A68     		ldr	r2, [r3]
 23563 00bc 002A     		cmp	r2, #0
 23564 00be AFD1     		bne	.L1700
 23565              	.LVL1827:
 23566              	.LBB3259:
 23567              	.LBI3259:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23568              		.loc 1 546 5 is_stmt 1 view .LVU6106
 23569              	.LBB3260:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23570              		.loc 1 548 3 view .LVU6107
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23571              		.loc 1 548 9 is_stmt 0 view .LVU6108
 23572 00c0 0822     		movs	r2, #8
 23573              	.LBE3260:
 23574              	.LBE3259:
 23575              	.LBE3258:
 23576              	.LBE3257:
4336:src/xeq.c     **** }
 23577              		.loc 1 4336 9 view .LVU6109
 23578 00c2 0120     		movs	r0, #1
 23579              	.LBB3264:
 23580              	.LBB3263:
 23581              	.LBB3262:
 23582              	.LBB3261:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23583              		.loc 1 548 9 view .LVU6110
 23584 00c4 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 23585              		.loc 1 549 3 is_stmt 1 view .LVU6111
 23586              	.LBE3261:
 23587              	.LBE3262:
 23588              	.LBE3263:
 23589              	.LBE3264:
 23590              	.LBE3328:
 23591              	.LBE3334:
4337:src/xeq.c     **** 
 23592              		.loc 1 4337 1 is_stmt 0 view .LVU6112
 23593 00c6 15B0     		add	sp, sp, #84
 23594              		.cfi_remember_state
 23595              		.cfi_def_cfa_offset 36
 23596              		@ sp needed
ARM GAS  /tmp/ccBFDvgN.s 			page 615


 23597 00c8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23598              	.LVL1828:
 23599              	.L1674:
 23600              		.cfi_restore_state
 23601              	.LBB3335:
 23602              	.LBB3329:
4273:src/xeq.c     **** 			goto range_error;
 23603              		.loc 1 4273 3 is_stmt 1 view .LVU6113
4273:src/xeq.c     **** 			goto range_error;
 23604              		.loc 1 4273 6 is_stmt 0 view .LVU6114
 23605 00cc 002F     		cmp	r7, #0
 23606 00ce F3D0     		beq	.L1677
4275:src/xeq.c     **** 	}
 23607              		.loc 1 4275 3 is_stmt 1 view .LVU6115
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23608              		.loc 1 4280 8 is_stmt 0 view .LVU6116
 23609 00d0 524D     		ldr	r5, .L1723+4
4285:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23610              		.loc 1 4285 30 view .LVU6117
 23611 00d2 564A     		ldr	r2, .L1723+20
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23612              		.loc 1 4282 6 view .LVU6118
 23613 00d4 524E     		ldr	r6, .L1723+8
4275:src/xeq.c     **** 	}
 23614              		.loc 1 4275 8 view .LVU6119
 23615 00d6 6442     		rsbs	r4, r4, #0
 23616              	.LVL1829:
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23617              		.loc 1 4280 2 is_stmt 1 view .LVU6120
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23618              		.loc 1 4280 8 is_stmt 0 view .LVU6121
 23619 00d8 A5FB0435 		umull	r3, r5, r5, r4
4281:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23620              		.loc 1 4281 7 view .LVU6122
 23621 00dc AB09     		lsrs	r3, r5, #6
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23622              		.loc 1 4282 6 view .LVU6123
 23623 00de A6FB0316 		umull	r1, r6, r6, r3
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23624              		.loc 1 4280 8 view .LVU6124
 23625 00e2 4FF47A70 		mov	r0, #1000
4285:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23626              		.loc 1 4285 30 view .LVU6125
 23627 00e6 1168     		ldr	r1, [r2]
4280:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23628              		.loc 1 4280 8 view .LVU6126
 23629 00e8 00FB1345 		mls	r5, r0, r3, r4
 23630              	.LVL1830:
4281:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23631              		.loc 1 4281 2 is_stmt 1 view .LVU6127
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23632              		.loc 1 4282 2 view .LVU6128
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23633              		.loc 1 4282 6 is_stmt 0 view .LVU6129
 23634 00ec 7209     		lsrs	r2, r6, #5
 23635 00ee 6420     		movs	r0, #100
4283:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 616


 23636              		.loc 1 4283 7 view .LVU6130
 23637 00f0 1646     		mov	r6, r2
4282:src/xeq.c     **** 	rsrc /= 100;			// sss
 23638              		.loc 1 4282 6 view .LVU6131
 23639 00f2 00FB1232 		mls	r2, r0, r2, r3
 23640              	.LVL1831:
4283:src/xeq.c     **** 
 23641              		.loc 1 4283 2 is_stmt 1 view .LVU6132
4285:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23642              		.loc 1 4285 2 view .LVU6133
4286:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23643              		.loc 1 4286 9 is_stmt 0 view .LVU6134
 23644 00f6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 23645              	.LVL1832:
 23646              	.L1678:
4289:src/xeq.c     **** 		goto range_error;
 23647              		.loc 1 4289 2 is_stmt 1 view .LVU6135
4289:src/xeq.c     **** 		goto range_error;
 23648              		.loc 1 4289 5 is_stmt 0 view .LVU6136
 23649 00fa B342     		cmp	r3, r6
 23650 00fc DCDD     		ble	.L1677
 23651              	.L1718:
4292:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23652              		.loc 1 4292 2 is_stmt 1 view .LVU6137
4292:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23653              		.loc 1 4292 5 is_stmt 0 view .LVU6138
 23654 00fe B8F1000F 		cmp	r8, #0
 23655 0102 25D0     		beq	.L1682
4293:src/xeq.c     **** 
 23656              		.loc 1 4293 3 is_stmt 1 view .LVU6139
4293:src/xeq.c     **** 
 23657              		.loc 1 4293 52 is_stmt 0 view .LVU6140
 23658 0104 6F2D     		cmp	r5, #111
 23659 0106 27DD     		ble	.L1683
 23660              	.LBB3265:
 23661              	.LBI3265:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23662              		.loc 1 233 5 is_stmt 1 view .LVU6141
 23663              	.LBE3265:
 23664              	.LBE3329:
 23665              	.LBE3335:
 234:src/xeq.c     **** }
 23666              		.loc 1 234 2 view .LVU6142
 23667              	.LVL1833:
 23668              	.LBB3336:
 23669              	.LBB3330:
 23670              	.LBB3290:
 23671              	.LBB3266:
 23672              	.LBI3266:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23673              		.loc 1 225 5 view .LVU6143
 23674              	.LBB3267:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23675              		.loc 1 226 2 view .LVU6144
 23676              	.LBB3268:
 23677              	.LBI3268:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/ccBFDvgN.s 			page 617


 23678              		.loc 1 1118 5 view .LVU6145
 23679              	.LBB3269:
1119:src/xeq.c     **** }
 23680              		.loc 1 1119 2 view .LVU6146
1119:src/xeq.c     **** }
 23681              		.loc 1 1119 12 is_stmt 0 view .LVU6147
 23682 0108 DAF80010 		ldr	r1, [r10]
 23683              	.LVL1834:
1119:src/xeq.c     **** }
 23684              		.loc 1 1119 12 view .LVU6148
 23685              	.LBE3269:
 23686              	.LBE3268:
 227:src/xeq.c     **** }
 23687              		.loc 1 227 2 is_stmt 1 view .LVU6149
 23688              	.LBB3272:
 23689              	.LBI3272:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23690              		.loc 1 217 5 view .LVU6150
 23691              	.LBB3273:
 218:src/xeq.c     **** }
 23692              		.loc 1 218 2 view .LVU6151
 218:src/xeq.c     **** }
 23693              		.loc 1 218 9 is_stmt 0 view .LVU6152
 23694 010c B1F9DE07 		ldrsh	r0, [r1, #2014]
 218:src/xeq.c     **** }
 23695              		.loc 1 218 57 view .LVU6153
 23696 0110 0028     		cmp	r0, #0
 23697 0112 69DB     		blt	.L1719
 23698              	.LVL1835:
 218:src/xeq.c     **** }
 23699              		.loc 1 218 57 view .LVU6154
 23700              	.LBE3273:
 23701              	.LBE3272:
 23702              	.LBE3267:
 23703              	.LBE3266:
 23704              	.LBE3290:
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23705              		.loc 1 4295 3 is_stmt 1 view .LVU6155
 23706              	.LBB3291:
 23707              	.LBB3288:
 23708              	.LBB3286:
 23709              	.LBB3279:
 23710              	.LBB3274:
 23711 0114 0021     		movs	r1, #0
 23712              	.LVL1836:
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23713              		.loc 1 4295 3 is_stmt 0 view .LVU6156
 23714              	.LBE3274:
 23715              	.LBE3279:
 23716              	.LBE3286:
 23717              	.LBE3288:
 23718              	.LBE3291:
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23719              		.loc 1 4295 6 view .LVU6157
 23720 0116 82B3     		cbz	r2, .L1685
 23721              	.LVL1837:
 23722              	.L1686:
ARM GAS  /tmp/ccBFDvgN.s 			page 618


4314:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23723              		.loc 1 4314 4 is_stmt 1 view .LVU6158
4314:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23724              		.loc 1 4314 12 is_stmt 0 view .LVU6159
 23725 0118 7031     		adds	r1, r1, #112
 23726              	.LVL1838:
 23727              	.L1689:
4315:src/xeq.c     **** 			goto range_error;
 23728              		.loc 1 4315 3 is_stmt 1 view .LVU6160
4315:src/xeq.c     **** 			goto range_error;
 23729              		.loc 1 4315 13 is_stmt 0 view .LVU6161
 23730 011a A818     		adds	r0, r5, r2
4315:src/xeq.c     **** 			goto range_error;
 23731              		.loc 1 4315 6 view .LVU6162
 23732 011c 8842     		cmp	r0, r1
 23733 011e CBDC     		bgt	.L1677
4318:src/xeq.c     **** 	}
 23734              		.loc 1 4318 3 is_stmt 1 view .LVU6163
4318:src/xeq.c     **** 	}
 23735              		.loc 1 4318 6 is_stmt 0 view .LVU6164
 23736 0120 C8F80050 		str	r5, [r8]
 23737 0124 B118     		adds	r1, r6, r2
 23738              	.LVL1839:
 23739              	.L1695:
4325:src/xeq.c     **** 		goto range_error;
 23740              		.loc 1 4325 2 is_stmt 1 view .LVU6165
4325:src/xeq.c     **** 		goto range_error;
 23741              		.loc 1 4325 5 is_stmt 0 view .LVU6166
 23742 0126 8B42     		cmp	r3, r1
 23743 0128 C6DB     		blt	.L1677
 23744              	.L1697:
4329:src/xeq.c     **** 	*n = num;
 23745              		.loc 1 4329 2 is_stmt 1 view .LVU6167
4329:src/xeq.c     **** 	*n = num;
 23746              		.loc 1 4329 37 is_stmt 0 view .LVU6168
 23747 012a 0FB1     		cbz	r7, .L1698
4329:src/xeq.c     **** 	*n = num;
 23748              		.loc 1 4329 37 view .LVU6169
 23749 012c 06F57A76 		add	r6, r6, #1000
 23750              	.LVL1840:
 23751              	.L1698:
4332:src/xeq.c     **** 
 23752              		.loc 1 4332 9 view .LVU6170
 23753 0130 0020     		movs	r0, #0
4329:src/xeq.c     **** 	*n = num;
 23754              		.loc 1 4329 5 view .LVU6171
 23755 0132 CBF80060 		str	r6, [fp]
4330:src/xeq.c     **** 
 23756              		.loc 1 4330 2 is_stmt 1 view .LVU6172
4330:src/xeq.c     **** 
 23757              		.loc 1 4330 5 is_stmt 0 view .LVU6173
 23758 0136 C9F80020 		str	r2, [r9]
4332:src/xeq.c     **** 
 23759              		.loc 1 4332 2 is_stmt 1 view .LVU6174
 23760              	.LBE3330:
 23761              	.LBE3336:
4337:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 619


 23762              		.loc 1 4337 1 is_stmt 0 view .LVU6175
 23763 013a 15B0     		add	sp, sp, #84
 23764              		.cfi_remember_state
 23765              		.cfi_def_cfa_offset 36
 23766              		@ sp needed
 23767 013c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23768              	.LVL1841:
 23769              	.L1675:
 23770              		.cfi_restore_state
 23771              	.LBB3337:
 23772              	.LBB3331:
 23773              	.LBB3292:
 23774              	.LBI3292:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23775              		.loc 1 233 5 is_stmt 1 view .LVU6176
 23776              	.LBE3292:
 23777              	.LBE3331:
 23778              	.LBE3337:
 234:src/xeq.c     **** }
 23779              		.loc 1 234 2 view .LVU6177
 23780              	.LBB3338:
 23781              	.LBB3332:
 23782              	.LBB3313:
 23783              	.LBB3293:
 23784              	.LBI3293:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23785              		.loc 1 225 5 view .LVU6178
 23786              	.LBB3294:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23787              		.loc 1 226 2 view .LVU6179
 23788              	.LBB3295:
 23789              	.LBI3295:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23790              		.loc 1 1118 5 view .LVU6180
 23791              	.LBB3296:
1119:src/xeq.c     **** }
 23792              		.loc 1 1119 2 view .LVU6181
1119:src/xeq.c     **** }
 23793              		.loc 1 1119 12 is_stmt 0 view .LVU6182
 23794 0140 DAF80030 		ldr	r3, [r10]
 23795              	.LVL1842:
1119:src/xeq.c     **** }
 23796              		.loc 1 1119 12 view .LVU6183
 23797              	.LBE3296:
 23798              	.LBE3295:
 227:src/xeq.c     **** }
 23799              		.loc 1 227 2 is_stmt 1 view .LVU6184
 23800              	.LBB3299:
 23801              	.LBI3299:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23802              		.loc 1 217 5 view .LVU6185
 23803              	.LBB3300:
 218:src/xeq.c     **** }
 23804              		.loc 1 218 2 view .LVU6186
 218:src/xeq.c     **** }
 23805              		.loc 1 218 9 is_stmt 0 view .LVU6187
 23806 0144 B3F9DE17 		ldrsh	r1, [r3, #2014]
ARM GAS  /tmp/ccBFDvgN.s 			page 620


 218:src/xeq.c     **** }
 23807              		.loc 1 218 57 view .LVU6188
 23808 0148 0029     		cmp	r1, #0
 23809 014a 38DB     		blt	.L1720
 23810 014c 7023     		movs	r3, #112
 23811              	.LVL1843:
 218:src/xeq.c     **** }
 23812              		.loc 1 218 57 view .LVU6189
 23813 014e AFE7     		b	.L1681
 23814              	.LVL1844:
 23815              	.L1682:
 218:src/xeq.c     **** }
 23816              		.loc 1 218 57 view .LVU6190
 23817              	.LBE3300:
 23818              	.LBE3299:
 23819              	.LBE3294:
 23820              	.LBE3293:
 23821              	.LBE3313:
4321:src/xeq.c     **** 			num = mx_src - rsrc;
 23822              		.loc 1 4321 3 is_stmt 1 view .LVU6191
4321:src/xeq.c     **** 			num = mx_src - rsrc;
 23823              		.loc 1 4321 6 is_stmt 0 view .LVU6192
 23824 0150 002A     		cmp	r2, #0
 23825 0152 32D1     		bne	.L1721
4322:src/xeq.c     **** 		}
 23826              		.loc 1 4322 4 is_stmt 1 view .LVU6193
4322:src/xeq.c     **** 		}
 23827              		.loc 1 4322 8 is_stmt 0 view .LVU6194
 23828 0154 9A1B     		subs	r2, r3, r6
 23829              	.LVL1845:
4325:src/xeq.c     **** 		goto range_error;
 23830              		.loc 1 4325 2 is_stmt 1 view .LVU6195
 23831 0156 E8E7     		b	.L1697
 23832              	.L1683:
 23833              	.LBB3314:
 23834              	.LBI3314:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23835              		.loc 1 253 14 view .LVU6196
 23836              	.LBE3314:
 23837              	.LBE3332:
 23838              	.LBE3338:
 254:src/xeq.c     **** }
 23839              		.loc 1 254 2 view .LVU6197
 23840              	.LVL1846:
 23841              	.LBB3339:
 23842              	.LBB3333:
 23843              	.LBB3323:
 23844              	.LBB3315:
 23845              	.LBI3315:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23846              		.loc 1 241 14 view .LVU6198
 23847              	.LBB3316:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23848              		.loc 1 242 2 view .LVU6199
 23849              	.LBB3317:
 23850              	.LBI3317:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/ccBFDvgN.s 			page 621


 23851              		.loc 1 1118 5 view .LVU6200
 23852              	.LBB3318:
1119:src/xeq.c     **** }
 23853              		.loc 1 1119 2 view .LVU6201
1119:src/xeq.c     **** }
 23854              		.loc 1 1119 12 is_stmt 0 view .LVU6202
 23855 0158 DAF80000 		ldr	r0, [r10]
1119:src/xeq.c     **** }
 23856              		.loc 1 1119 24 view .LVU6203
 23857 015c B0F8E8C7 		ldrh	ip, [r0, #2024]
 23858 0160 44F20101 		movw	r1, #16385
 23859              	.LBE3318:
 23860              	.LBE3317:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23861              		.loc 1 242 5 view .LVU6204
 23862 0164 01EA0C01 		and	r1, r1, ip
 23863 0168 B1F5804F 		cmp	r1, #16384
 23864              	.LBB3319:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23865              		.loc 1 243 24 view .LVU6205
 23866 016c 90F8CF17 		ldrb	r1, [r0, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23867              		.loc 1 243 3 is_stmt 1 view .LVU6206
 244:src/xeq.c     **** 	}
 23868              		.loc 1 244 3 view .LVU6207
 23869              	.LVL1847:
 244:src/xeq.c     **** 	}
 23870              		.loc 1 244 3 is_stmt 0 view .LVU6208
 23871              	.LBE3319:
 23872              	.LBE3316:
 23873              	.LBE3315:
 23874              	.LBE3323:
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23875              		.loc 1 4295 3 is_stmt 1 view .LVU6209
 23876              	.LBB3324:
 23877              	.LBB3322:
 23878              	.LBB3321:
 23879              	.LBB3320:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23880              		.loc 1 243 13 is_stmt 0 view .LVU6210
 23881 0170 04BF     		itt	eq
 23882 0172 0C39     		subeq	r1, r1, #12
 244:src/xeq.c     **** 	}
 23883              		.loc 1 244 67 view .LVU6211
 23884 0174 4910     		asreq	r1, r1, #1
 23885              	.LBE3320:
 23886              	.LBE3321:
 23887              	.LBE3322:
 23888              	.LBE3324:
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23889              		.loc 1 4295 6 view .LVU6212
 23890 0176 002A     		cmp	r2, #0
 23891 0178 CFD1     		bne	.L1689
 23892              	.L1685:
4297:src/xeq.c     **** 				// source & destination in different memory areas
 23893              		.loc 1 4297 4 is_stmt 1 view .LVU6213
4297:src/xeq.c     **** 				// source & destination in different memory areas
ARM GAS  /tmp/ccBFDvgN.s 			page 622


 23894              		.loc 1 4297 7 is_stmt 0 view .LVU6214
 23895 017a 4FB1     		cbz	r7, .L1722
 23896              	.LVL1848:
 23897              	.L1690:
4299:src/xeq.c     **** 			else {
 23898              		.loc 1 4299 5 is_stmt 1 view .LVU6215
4299:src/xeq.c     **** 			else {
 23899              		.loc 1 4299 9 is_stmt 0 view .LVU6216
 23900 017c 8B42     		cmp	r3, r1
 23901 017e 1A46     		mov	r2, r3
 23902 0180 A8BF     		it	ge
 23903 0182 0A46     		movge	r2, r1
 23904              	.LVL1849:
 23905              	.L1692:
4313:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23906              		.loc 1 4313 3 is_stmt 1 view .LVU6217
4313:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23907              		.loc 1 4313 6 is_stmt 0 view .LVU6218
 23908 0184 6F2D     		cmp	r5, #111
 23909 0186 C8DD     		ble	.L1689
 23910 0188 C6E7     		b	.L1686
 23911              	.LVL1850:
 23912              	.L1702:
4313:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23913              		.loc 1 4313 6 view .LVU6219
 23914 018a 1F46     		mov	r7, r3
4286:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23915              		.loc 1 4286 9 view .LVU6220
 23916 018c 7023     		movs	r3, #112
 23917 018e B4E7     		b	.L1678
 23918              	.LVL1851:
 23919              	.L1722:
4297:src/xeq.c     **** 				// source & destination in different memory areas
 23920              		.loc 1 4297 42 view .LVU6221
 23921 0190 244A     		ldr	r2, .L1723+12
 23922              	.LVL1852:
4297:src/xeq.c     **** 				// source & destination in different memory areas
 23923              		.loc 1 4297 14 view .LVU6222
 23924 0192 9442     		cmp	r4, r2
 23925 0194 B4BF     		ite	lt
 23926 0196 0024     		movlt	r4, #0
 23927 0198 0124     		movge	r4, #1
 23928 019a 6F2D     		cmp	r5, #111
 23929 019c D4BF     		ite	le
 23930 019e 0022     		movle	r2, #0
 23931 01a0 0122     		movgt	r2, #1
 23932 01a2 9442     		cmp	r4, r2
 23933 01a4 EAD1     		bne	.L1690
4301:src/xeq.c     **** 					num = mx_src - rsrc;
 23934              		.loc 1 4301 5 is_stmt 1 view .LVU6223
4301:src/xeq.c     **** 					num = mx_src - rsrc;
 23935              		.loc 1 4301 8 is_stmt 0 view .LVU6224
 23936 01a6 B542     		cmp	r5, r6
4302:src/xeq.c     **** 					q = rsrc - rdest;
 23937              		.loc 1 4302 6 is_stmt 1 view .LVU6225
4306:src/xeq.c     **** 					q = rdest - rsrc;
 23938              		.loc 1 4306 10 is_stmt 0 view .LVU6226
ARM GAS  /tmp/ccBFDvgN.s 			page 623


 23939 01a8 A7BF     		ittee	ge
 23940 01aa 4A1B     		subge	r2, r1, r5
4307:src/xeq.c     **** 				}
 23941              		.loc 1 4307 8 view .LVU6227
 23942 01ac A81B     		subge	r0, r5, r6
4302:src/xeq.c     **** 					q = rsrc - rdest;
 23943              		.loc 1 4302 10 view .LVU6228
 23944 01ae 9A1B     		sublt	r2, r3, r6
4303:src/xeq.c     **** 				}
 23945              		.loc 1 4303 6 is_stmt 1 view .LVU6229
4303:src/xeq.c     **** 				}
 23946              		.loc 1 4303 8 is_stmt 0 view .LVU6230
 23947 01b0 701B     		sublt	r0, r6, r5
4306:src/xeq.c     **** 					q = rdest - rsrc;
 23948              		.loc 1 4306 6 is_stmt 1 view .LVU6231
 23949              	.LVL1853:
4307:src/xeq.c     **** 				}
 23950              		.loc 1 4307 6 view .LVU6232
4309:src/xeq.c     **** 					num = q;
 23951              		.loc 1 4309 5 view .LVU6233
 23952 01b2 8242     		cmp	r2, r0
 23953 01b4 A8BF     		it	ge
 23954 01b6 0246     		movge	r2, r0
 23955              	.LVL1854:
4309:src/xeq.c     **** 					num = q;
 23956              		.loc 1 4309 5 is_stmt 0 view .LVU6234
 23957 01b8 E4E7     		b	.L1692
 23958              	.LVL1855:
 23959              	.L1721:
4309:src/xeq.c     **** 					num = q;
 23960              		.loc 1 4309 5 view .LVU6235
 23961 01ba 9119     		adds	r1, r2, r6
 23962 01bc B3E7     		b	.L1695
 23963              	.LVL1856:
 23964              	.L1720:
 23965              	.LBB3325:
 23966              	.LBB3312:
 23967              	.LBB3311:
 23968              	.LBB3305:
 23969              	.LBB3297:
1119:src/xeq.c     **** }
 23970              		.loc 1 1119 24 view .LVU6236
 23971 01be B3F8E877 		ldrh	r7, [r3, #2024]
 23972              	.LBE3297:
 23973              	.LBE3305:
 23974              	.LBB3306:
 23975              	.LBB3301:
 218:src/xeq.c     **** }
 23976              		.loc 1 218 25 view .LVU6237
 23977 01c2 1B48     		ldr	r0, .L1723+24
 23978              	.LBE3301:
 23979              	.LBE3306:
 23980              	.LBB3307:
 23981              	.LBB3298:
1119:src/xeq.c     **** }
 23982              		.loc 1 1119 24 view .LVU6238
 23983 01c4 44F20103 		movw	r3, #16385
ARM GAS  /tmp/ccBFDvgN.s 			page 624


 23984              	.LVL1857:
1119:src/xeq.c     **** }
 23985              		.loc 1 1119 24 view .LVU6239
 23986              	.LBE3298:
 23987              	.LBE3307:
 23988              	.LBB3308:
 23989              	.LBB3302:
 218:src/xeq.c     **** }
 23990              		.loc 1 218 25 view .LVU6240
 23991 01c8 0068     		ldr	r0, [r0]
 23992              	.LBE3302:
 23993              	.LBE3308:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23994              		.loc 1 226 73 view .LVU6241
 23995 01ca 3B40     		ands	r3, r3, r7
 23996 01cc A3F58043 		sub	r3, r3, #16384
 23997              	.LBB3309:
 23998              	.LBB3303:
 218:src/xeq.c     **** }
 23999              		.loc 1 218 57 view .LVU6242
 24000 01d0 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 24001              	.LBE3303:
 24002              	.LBE3309:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 24003              		.loc 1 226 73 view .LVU6243
 24004 01d4 B3FA83F3 		clz	r3, r3
 24005 01d8 5B09     		lsrs	r3, r3, #5
 24006 01da 0233     		adds	r3, r3, #2
 24007              	.LBB3310:
 24008              	.LBB3304:
 218:src/xeq.c     **** }
 24009              		.loc 1 218 57 view .LVU6244
 24010 01dc C1F30B01 		ubfx	r1, r1, #0, #12
 24011 01e0 41FA03F3 		asr	r3, r1, r3
 24012 01e4 7033     		adds	r3, r3, #112
 24013 01e6 63E7     		b	.L1681
 24014              	.LVL1858:
 24015              	.L1719:
 218:src/xeq.c     **** }
 24016              		.loc 1 218 57 view .LVU6245
 24017              	.LBE3304:
 24018              	.LBE3310:
 24019              	.LBE3311:
 24020              	.LBE3312:
 24021              	.LBE3325:
 24022              	.LBB3326:
 24023              	.LBB3289:
 24024              	.LBB3287:
 24025              	.LBB3280:
 24026              	.LBB3270:
1119:src/xeq.c     **** }
 24027              		.loc 1 1119 24 view .LVU6246
 24028 01e8 B1F8E8E7 		ldrh	lr, [r1, #2024]
 24029              	.LBE3270:
 24030              	.LBE3280:
 24031              	.LBB3281:
 24032              	.LBB3275:
ARM GAS  /tmp/ccBFDvgN.s 			page 625


 218:src/xeq.c     **** }
 24033              		.loc 1 218 25 view .LVU6247
 24034 01ec DFF840C0 		ldr	ip, .L1723+24
 24035              	.LBE3275:
 24036              	.LBE3281:
 24037              	.LBB3282:
 24038              	.LBB3271:
1119:src/xeq.c     **** }
 24039              		.loc 1 1119 24 view .LVU6248
 24040 01f0 44F20101 		movw	r1, #16385
 24041              	.LVL1859:
1119:src/xeq.c     **** }
 24042              		.loc 1 1119 24 view .LVU6249
 24043              	.LBE3271:
 24044              	.LBE3282:
 24045              	.LBB3283:
 24046              	.LBB3276:
 218:src/xeq.c     **** }
 24047              		.loc 1 218 25 view .LVU6250
 24048 01f4 DCF800C0 		ldr	ip, [ip]
 24049              	.LBE3276:
 24050              	.LBE3283:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 24051              		.loc 1 226 73 view .LVU6251
 24052 01f8 01EA0E01 		and	r1, r1, lr
 24053 01fc A1F58041 		sub	r1, r1, #16384
 24054              	.LBB3284:
 24055              	.LBB3277:
 218:src/xeq.c     **** }
 24056              		.loc 1 218 57 view .LVU6252
 24057 0200 3CF810C0 		ldrh	ip, [ip, r0, lsl #1]
 24058              	.LBE3277:
 24059              	.LBE3284:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 24060              		.loc 1 226 73 view .LVU6253
 24061 0204 B1FA81F1 		clz	r1, r1
 24062 0208 4909     		lsrs	r1, r1, #5
 24063 020a 881C     		adds	r0, r1, #2
 24064              	.LBB3285:
 24065              	.LBB3278:
 218:src/xeq.c     **** }
 24066              		.loc 1 218 57 view .LVU6254
 24067 020c CCF30B01 		ubfx	r1, ip, #0, #12
 24068 0210 0141     		asrs	r1, r1, r0
 24069              	.LVL1860:
 218:src/xeq.c     **** }
 24070              		.loc 1 218 57 view .LVU6255
 24071              	.LBE3278:
 24072              	.LBE3285:
 24073              	.LBE3287:
 24074              	.LBE3289:
 24075              	.LBE3326:
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 24076              		.loc 1 4295 3 is_stmt 1 view .LVU6256
4295:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 24077              		.loc 1 4295 6 is_stmt 0 view .LVU6257
 24078 0212 002A     		cmp	r2, #0
ARM GAS  /tmp/ccBFDvgN.s 			page 626


 24079 0214 B1D0     		beq	.L1685
 24080 0216 7FE7     		b	.L1686
 24081              	.L1724:
 24082              		.align	2
 24083              	.L1723:
 24084 0218 00000000 		.word	Error
 24085 021c D34D6210 		.word	274877907
 24086 0220 1F85EB51 		.word	1374389535
 24087 0224 00E6AA00 		.word	11200000
 24088 0228 80969800 		.word	10000000
 24089 022c 00000000 		.word	backup_ram
 24090 0230 00000000 		.word	RetStk
 24091 0234 00000000 		.word	main_ram
 24092              	.LBE3333:
 24093              	.LBE3339:
 24094              		.cfi_endproc
 24095              	.LFE229:
 24097              		.section	.text.op_regcopy,"ax",%progbits
 24098              		.align	1
 24099              		.p2align 2,,3
 24100              		.global	op_regcopy
 24101              		.syntax unified
 24102              		.thumb
 24103              		.thumb_func
 24104              		.fpu fpv4-sp-d16
 24106              	op_regcopy:
 24107              	.LVL1861:
 24108              	.LFB230:
4339:src/xeq.c     **** 	int s, n, d;
 24109              		.loc 1 4339 32 is_stmt 1 view -0
 24110              		.cfi_startproc
 24111              		@ args = 0, pretend = 0, frame = 16
 24112              		@ frame_needed = 0, uses_anonymous_args = 0
4340:src/xeq.c     **** 
 24113              		.loc 1 4340 2 view .LVU6259
4342:src/xeq.c     **** 		return;
 24114              		.loc 1 4342 2 view .LVU6260
4339:src/xeq.c     **** 	int s, n, d;
 24115              		.loc 1 4339 32 is_stmt 0 view .LVU6261
 24116 0000 10B5     		push	{r4, lr}
 24117              		.cfi_def_cfa_offset 8
 24118              		.cfi_offset 4, -8
 24119              		.cfi_offset 14, -4
 24120 0002 84B0     		sub	sp, sp, #16
 24121              		.cfi_def_cfa_offset 24
4342:src/xeq.c     **** 		return;
 24122              		.loc 1 4342 6 view .LVU6262
 24123 0004 0123     		movs	r3, #1
 24124 0006 03AA     		add	r2, sp, #12
 24125 0008 02A9     		add	r1, sp, #8
 24126 000a 01A8     		add	r0, sp, #4
 24127              	.LVL1862:
4342:src/xeq.c     **** 		return;
 24128              		.loc 1 4342 6 view .LVU6263
 24129 000c FFF7FEFF 		bl	reg_decode
 24130              	.LVL1863:
4342:src/xeq.c     **** 		return;
ARM GAS  /tmp/ccBFDvgN.s 			page 627


 24131              		.loc 1 4342 5 view .LVU6264
 24132 0010 B8B9     		cbnz	r0, .L1725
4344:src/xeq.c     **** }
 24133              		.loc 1 4344 2 is_stmt 1 view .LVU6265
 24134 0012 0398     		ldr	r0, [sp, #12]
 24135 0014 FFF7FEFF 		bl	get_reg_n
 24136              	.LVL1864:
 24137 0018 0446     		mov	r4, r0
 24138 001a 0198     		ldr	r0, [sp, #4]
 24139 001c FFF7FEFF 		bl	get_reg_n
 24140              	.LVL1865:
 24141              	.LBB3340:
 24142              	.LBB3341:
 24143              	.LBB3342:
 24144              	.LBB3343:
1119:src/xeq.c     **** }
 24145              		.loc 1 1119 24 is_stmt 0 view .LVU6266
 24146 0020 094B     		ldr	r3, .L1730
 24147              	.LBE3343:
 24148              	.LBE3342:
 24149              	.LBE3341:
 24150              	.LBE3340:
4344:src/xeq.c     **** }
 24151              		.loc 1 4344 2 view .LVU6267
 24152 0022 029A     		ldr	r2, [sp, #8]
 24153              	.LVL1866:
 24154              	.LBB3350:
 24155              	.LBB3348:
 24156              	.LBB3346:
 24157              	.LBB3344:
1119:src/xeq.c     **** }
 24158              		.loc 1 1119 24 view .LVU6268
 24159 0024 1B68     		ldr	r3, [r3]
 24160 0026 B3F8E817 		ldrh	r1, [r3, #2024]
 24161 002a 44F20103 		movw	r3, #16385
 24162              	.LBE3344:
 24163              	.LBE3346:
1538:src/xeq.c     **** 		n <<= 1;
 24164              		.loc 1 1538 5 view .LVU6269
 24165 002e 0B40     		ands	r3, r3, r1
 24166 0030 B3F5804F 		cmp	r3, #16384
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24167              		.loc 1 1539 5 view .LVU6270
 24168 0034 08BF     		it	eq
 24169 0036 5200     		lsleq	r2, r2, #1
 24170              	.LBE3348:
 24171              	.LBE3350:
4344:src/xeq.c     **** }
 24172              		.loc 1 4344 2 view .LVU6271
 24173 0038 0146     		mov	r1, r0
 24174              	.LVL1867:
 24175              	.LBB3351:
 24176              	.LBI3340:
1537:src/xeq.c     **** 	if (is_dblmode())
 24177              		.loc 1 1537 6 is_stmt 1 view .LVU6272
 24178              	.LBB3349:
1538:src/xeq.c     **** 		n <<= 1;
ARM GAS  /tmp/ccBFDvgN.s 			page 628


 24179              		.loc 1 1538 2 view .LVU6273
 24180              	.LBB3347:
 24181              	.LBI3342:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24182              		.loc 1 1118 5 view .LVU6274
 24183              	.LBB3345:
1119:src/xeq.c     **** }
 24184              		.loc 1 1119 2 view .LVU6275
 24185              	.LBE3345:
 24186              	.LBE3347:
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24187              		.loc 1 1539 3 view .LVU6276
1540:src/xeq.c     **** }
 24188              		.loc 1 1540 2 view .LVU6277
 24189 003a D200     		lsls	r2, r2, #3
 24190              	.LVL1868:
1540:src/xeq.c     **** }
 24191              		.loc 1 1540 2 is_stmt 0 view .LVU6278
 24192 003c 2046     		mov	r0, r4
 24193              	.LVL1869:
1540:src/xeq.c     **** }
 24194              		.loc 1 1540 2 view .LVU6279
 24195 003e FFF7FEFF 		bl	xcopy
 24196              	.LVL1870:
 24197              	.L1725:
1540:src/xeq.c     **** }
 24198              		.loc 1 1540 2 view .LVU6280
 24199              	.LBE3349:
 24200              	.LBE3351:
4345:src/xeq.c     **** 
 24201              		.loc 1 4345 1 view .LVU6281
 24202 0042 04B0     		add	sp, sp, #16
 24203              		.cfi_def_cfa_offset 8
 24204              		@ sp needed
 24205 0044 10BD     		pop	{r4, pc}
 24206              	.L1731:
 24207 0046 00BF     		.align	2
 24208              	.L1730:
 24209 0048 00000000 		.word	main_ram
 24210              		.cfi_endproc
 24211              	.LFE230:
 24213              		.section	.text.op_regswap,"ax",%progbits
 24214              		.align	1
 24215              		.p2align 2,,3
 24216              		.global	op_regswap
 24217              		.syntax unified
 24218              		.thumb
 24219              		.thumb_func
 24220              		.fpu fpv4-sp-d16
 24222              	op_regswap:
 24223              	.LVL1871:
 24224              	.LFB231:
4347:src/xeq.c     **** 	int s, n, d, i;
 24225              		.loc 1 4347 32 is_stmt 1 view -0
 24226              		.cfi_startproc
 24227              		@ args = 0, pretend = 0, frame = 16
 24228              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBFDvgN.s 			page 629


4348:src/xeq.c     **** 
 24229              		.loc 1 4348 2 view .LVU6283
4350:src/xeq.c     **** 		return;
 24230              		.loc 1 4350 2 view .LVU6284
4347:src/xeq.c     **** 	int s, n, d, i;
 24231              		.loc 1 4347 32 is_stmt 0 view .LVU6285
 24232 0000 30B5     		push	{r4, r5, lr}
 24233              		.cfi_def_cfa_offset 12
 24234              		.cfi_offset 4, -12
 24235              		.cfi_offset 5, -8
 24236              		.cfi_offset 14, -4
 24237 0002 85B0     		sub	sp, sp, #20
 24238              		.cfi_def_cfa_offset 32
4350:src/xeq.c     **** 		return;
 24239              		.loc 1 4350 6 view .LVU6286
 24240 0004 0023     		movs	r3, #0
 24241 0006 03AA     		add	r2, sp, #12
 24242 0008 02A9     		add	r1, sp, #8
 24243 000a 01A8     		add	r0, sp, #4
 24244              	.LVL1872:
4350:src/xeq.c     **** 		return;
 24245              		.loc 1 4350 6 view .LVU6287
 24246 000c FFF7FEFF 		bl	reg_decode
 24247              	.LVL1873:
4350:src/xeq.c     **** 		return;
 24248              		.loc 1 4350 5 view .LVU6288
 24249 0010 E8B9     		cbnz	r0, .L1732
4350:src/xeq.c     **** 		return;
 24250              		.loc 1 4350 37 discriminator 1 view .LVU6289
 24251 0012 039B     		ldr	r3, [sp, #12]
 24252 0014 0446     		mov	r4, r0
 24253 0016 0198     		ldr	r0, [sp, #4]
4350:src/xeq.c     **** 		return;
 24254              		.loc 1 4350 32 discriminator 1 view .LVU6290
 24255 0018 9842     		cmp	r0, r3
 24256 001a 18D0     		beq	.L1732
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24257              		.loc 1 4353 3 is_stmt 1 view .LVU6291
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24258              		.loc 1 4353 19 is_stmt 0 view .LVU6292
 24259 001c 029A     		ldr	r2, [sp, #8]
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24260              		.loc 1 4353 6 view .LVU6293
 24261 001e 18DD     		ble	.L1737
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24262              		.loc 1 4353 19 discriminator 1 view .LVU6294
 24263 0020 1344     		add	r3, r3, r2
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24264              		.loc 1 4353 14 discriminator 1 view .LVU6295
 24265 0022 9842     		cmp	r0, r3
 24266 0024 19DB     		blt	.L1738
 24267              	.L1739:
 24268              	.LVL1874:
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24269              		.loc 1 4356 16 is_stmt 1 discriminator 1 view .LVU6296
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24270              		.loc 1 4356 4 is_stmt 0 discriminator 1 view .LVU6297
ARM GAS  /tmp/ccBFDvgN.s 			page 630


 24271 0026 002A     		cmp	r2, #0
 24272 0028 01DC     		bgt	.L1741
 24273 002a 10E0     		b	.L1732
 24274              	.LVL1875:
 24275              	.L1744:
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24276              		.loc 1 4356 4 discriminator 1 view .LVU6298
 24277 002c 0198     		ldr	r0, [sp, #4]
 24278              	.LVL1876:
 24279              	.L1741:
4357:src/xeq.c     **** 		}
 24280              		.loc 1 4357 5 is_stmt 1 discriminator 3 view .LVU6299
 24281 002e 2044     		add	r0, r0, r4
 24282 0030 FFF7FEFF 		bl	get_reg_n
 24283              	.LVL1877:
 24284 0034 039B     		ldr	r3, [sp, #12]
 24285 0036 0546     		mov	r5, r0
 24286 0038 E018     		adds	r0, r4, r3
 24287 003a FFF7FEFF 		bl	get_reg_n
 24288              	.LVL1878:
 24289 003e 0146     		mov	r1, r0
 24290 0040 2846     		mov	r0, r5
 24291 0042 FFF7FEFF 		bl	swap_reg
 24292              	.LVL1879:
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24293              		.loc 1 4356 23 discriminator 3 view .LVU6300
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24294              		.loc 1 4356 4 is_stmt 0 discriminator 3 view .LVU6301
 24295 0046 029B     		ldr	r3, [sp, #8]
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24296              		.loc 1 4356 24 discriminator 3 view .LVU6302
 24297 0048 0134     		adds	r4, r4, #1
 24298              	.LVL1880:
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24299              		.loc 1 4356 16 is_stmt 1 discriminator 3 view .LVU6303
4356:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24300              		.loc 1 4356 4 is_stmt 0 discriminator 3 view .LVU6304
 24301 004a A342     		cmp	r3, r4
 24302 004c EEDC     		bgt	.L1744
 24303              	.LVL1881:
 24304              	.L1732:
4360:src/xeq.c     **** 
 24305              		.loc 1 4360 1 view .LVU6305
 24306 004e 05B0     		add	sp, sp, #20
 24307              		.cfi_remember_state
 24308              		.cfi_def_cfa_offset 12
 24309              		@ sp needed
 24310 0050 30BD     		pop	{r4, r5, pc}
 24311              	.L1737:
 24312              		.cfi_restore_state
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24313              		.loc 1 4353 28 discriminator 3 view .LVU6306
 24314 0052 E8DA     		bge	.L1739
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
 24315              		.loc 1 4353 43 discriminator 4 view .LVU6307
 24316 0054 8118     		adds	r1, r0, r2
4353:src/xeq.c     **** 			report_err(ERR_RANGE);
ARM GAS  /tmp/ccBFDvgN.s 			page 631


 24317              		.loc 1 4353 38 discriminator 4 view .LVU6308
 24318 0056 8B42     		cmp	r3, r1
 24319 0058 E5DA     		bge	.L1739
 24320              	.L1738:
4354:src/xeq.c     **** 		else {
 24321              		.loc 1 4354 4 is_stmt 1 view .LVU6309
 24322              	.LVL1882:
 24323              	.LBB3356:
 24324              	.LBI3356:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24325              		.loc 1 546 5 view .LVU6310
 24326              	.LBB3357:
 547:src/xeq.c     **** 		Error = e;
 24327              		.loc 1 547 2 view .LVU6311
 547:src/xeq.c     **** 		Error = e;
 24328              		.loc 1 547 12 is_stmt 0 view .LVU6312
 24329 005a 044B     		ldr	r3, .L1745
 547:src/xeq.c     **** 		Error = e;
 24330              		.loc 1 547 5 view .LVU6313
 24331 005c 1A68     		ldr	r2, [r3]
 24332 005e 002A     		cmp	r2, #0
 24333 0060 F5D1     		bne	.L1732
 24334              	.LVL1883:
 24335              	.LBB3358:
 24336              	.LBI3358:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24337              		.loc 1 546 5 is_stmt 1 view .LVU6314
 24338              	.LBB3359:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24339              		.loc 1 548 3 view .LVU6315
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24340              		.loc 1 548 9 is_stmt 0 view .LVU6316
 24341 0062 0822     		movs	r2, #8
 24342 0064 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 24343              		.loc 1 549 3 is_stmt 1 view .LVU6317
 24344              	.LBE3359:
 24345              	.LBE3358:
 24346              	.LBE3357:
 24347              	.LBE3356:
4360:src/xeq.c     **** 
 24348              		.loc 1 4360 1 is_stmt 0 view .LVU6318
 24349 0066 05B0     		add	sp, sp, #20
 24350              		.cfi_def_cfa_offset 12
 24351              		@ sp needed
 24352 0068 30BD     		pop	{r4, r5, pc}
 24353              	.L1746:
 24354 006a 00BF     		.align	2
 24355              	.L1745:
 24356 006c 00000000 		.word	Error
 24357              		.cfi_endproc
 24358              	.LFE231:
 24360              		.section	.text.op_regclr,"ax",%progbits
 24361              		.align	1
 24362              		.p2align 2,,3
 24363              		.global	op_regclr
 24364              		.syntax unified
ARM GAS  /tmp/ccBFDvgN.s 			page 632


 24365              		.thumb
 24366              		.thumb_func
 24367              		.fpu fpv4-sp-d16
 24369              	op_regclr:
 24370              	.LVL1884:
 24371              	.LFB232:
4362:src/xeq.c     **** 	int s, n;
 24372              		.loc 1 4362 31 is_stmt 1 view -0
 24373              		.cfi_startproc
 24374              		@ args = 0, pretend = 0, frame = 8
 24375              		@ frame_needed = 0, uses_anonymous_args = 0
4363:src/xeq.c     **** 
 24376              		.loc 1 4363 2 view .LVU6320
4365:src/xeq.c     **** 		return;
 24377              		.loc 1 4365 2 view .LVU6321
4362:src/xeq.c     **** 	int s, n;
 24378              		.loc 1 4362 31 is_stmt 0 view .LVU6322
 24379 0000 10B5     		push	{r4, lr}
 24380              		.cfi_def_cfa_offset 8
 24381              		.cfi_offset 4, -8
 24382              		.cfi_offset 14, -4
4365:src/xeq.c     **** 		return;
 24383              		.loc 1 4365 6 view .LVU6323
 24384 0002 0023     		movs	r3, #0
4362:src/xeq.c     **** 	int s, n;
 24385              		.loc 1 4362 31 view .LVU6324
 24386 0004 82B0     		sub	sp, sp, #8
 24387              		.cfi_def_cfa_offset 16
4365:src/xeq.c     **** 		return;
 24388              		.loc 1 4365 6 view .LVU6325
 24389 0006 1A46     		mov	r2, r3
 24390 0008 01A9     		add	r1, sp, #4
 24391 000a 6846     		mov	r0, sp
 24392              	.LVL1885:
4365:src/xeq.c     **** 		return;
 24393              		.loc 1 4365 6 view .LVU6326
 24394 000c FFF7FEFF 		bl	reg_decode
 24395              	.LVL1886:
4365:src/xeq.c     **** 		return;
 24396              		.loc 1 4365 5 view .LVU6327
 24397 0010 A8B9     		cbnz	r0, .L1747
4367:src/xeq.c     **** }
 24398              		.loc 1 4367 2 is_stmt 1 view .LVU6328
 24399 0012 0446     		mov	r4, r0
 24400 0014 0098     		ldr	r0, [sp]
 24401 0016 FFF7FEFF 		bl	get_reg_n
 24402              	.LVL1887:
 24403              	.LBB3360:
 24404              	.LBI3360:
1518:src/xeq.c     **** #if 0
 24405              		.loc 1 1518 6 view .LVU6329
 24406              	.LBB3361:
1533:src/xeq.c     **** #endif
 24407              		.loc 1 1533 2 view .LVU6330
 24408              	.LBB3362:
 24409              	.LBI3362:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/ccBFDvgN.s 			page 633


 24410              		.loc 1 1118 5 view .LVU6331
 24411              	.LBB3363:
1119:src/xeq.c     **** }
 24412              		.loc 1 1119 2 view .LVU6332
1119:src/xeq.c     **** }
 24413              		.loc 1 1119 24 is_stmt 0 view .LVU6333
 24414 001a 0A4B     		ldr	r3, .L1751
 24415              	.LBE3363:
 24416              	.LBE3362:
1533:src/xeq.c     **** #endif
 24417              		.loc 1 1533 2 view .LVU6334
 24418 001c 019A     		ldr	r2, [sp, #4]
 24419              	.LBB3365:
 24420              	.LBB3364:
1119:src/xeq.c     **** }
 24421              		.loc 1 1119 24 view .LVU6335
 24422 001e 1B68     		ldr	r3, [r3]
 24423 0020 B3F8E817 		ldrh	r1, [r3, #2024]
 24424 0024 44F20103 		movw	r3, #16385
 24425 0028 0B40     		ands	r3, r3, r1
 24426 002a A3F58043 		sub	r3, r3, #16384
 24427 002e B3FA83F3 		clz	r3, r3
 24428 0032 5B09     		lsrs	r3, r3, #5
 24429              	.LBE3364:
 24430              	.LBE3365:
1533:src/xeq.c     **** #endif
 24431              		.loc 1 1533 24 view .LVU6336
 24432 0034 0333     		adds	r3, r3, #3
1533:src/xeq.c     **** #endif
 24433              		.loc 1 1533 2 view .LVU6337
 24434 0036 2146     		mov	r1, r4
 24435 0038 9A40     		lsls	r2, r2, r3
 24436 003a FFF7FEFF 		bl	xset
 24437              	.LVL1888:
 24438              	.L1747:
1533:src/xeq.c     **** #endif
 24439              		.loc 1 1533 2 view .LVU6338
 24440              	.LBE3361:
 24441              	.LBE3360:
4368:src/xeq.c     **** 
 24442              		.loc 1 4368 1 view .LVU6339
 24443 003e 02B0     		add	sp, sp, #8
 24444              		.cfi_def_cfa_offset 8
 24445              		@ sp needed
 24446 0040 10BD     		pop	{r4, pc}
 24447              	.L1752:
 24448 0042 00BF     		.align	2
 24449              	.L1751:
 24450 0044 00000000 		.word	main_ram
 24451              		.cfi_endproc
 24452              	.LFE232:
 24454              		.section	.text.op_regsort,"ax",%progbits
 24455              		.align	1
 24456              		.p2align 2,,3
 24457              		.global	op_regsort
 24458              		.syntax unified
 24459              		.thumb
ARM GAS  /tmp/ccBFDvgN.s 			page 634


 24460              		.thumb_func
 24461              		.fpu fpv4-sp-d16
 24463              	op_regsort:
 24464              	.LVL1889:
 24465              	.LFB233:
4370:src/xeq.c     **** 	int s, n;
 24466              		.loc 1 4370 32 is_stmt 1 view -0
 24467              		.cfi_startproc
 24468              		@ args = 0, pretend = 0, frame = 160
 24469              		@ frame_needed = 0, uses_anonymous_args = 0
4371:src/xeq.c     **** 	decNumber pivot, a;
 24470              		.loc 1 4371 2 view .LVU6341
4372:src/xeq.c     **** 	int beg[10], end[10], i;
 24471              		.loc 1 4372 2 view .LVU6342
4373:src/xeq.c     **** 
 24472              		.loc 1 4373 2 view .LVU6343
4375:src/xeq.c     **** 		return;
 24473              		.loc 1 4375 2 view .LVU6344
4370:src/xeq.c     **** 	int s, n;
 24474              		.loc 1 4370 32 is_stmt 0 view .LVU6345
 24475 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 24476              		.cfi_def_cfa_offset 28
 24477              		.cfi_offset 4, -28
 24478              		.cfi_offset 5, -24
 24479              		.cfi_offset 6, -20
 24480              		.cfi_offset 7, -16
 24481              		.cfi_offset 8, -12
 24482              		.cfi_offset 9, -8
 24483              		.cfi_offset 14, -4
4375:src/xeq.c     **** 		return;
 24484              		.loc 1 4375 6 view .LVU6346
 24485 0004 0023     		movs	r3, #0
4370:src/xeq.c     **** 	int s, n;
 24486              		.loc 1 4370 32 view .LVU6347
 24487 0006 A9B0     		sub	sp, sp, #164
 24488              		.cfi_def_cfa_offset 192
4375:src/xeq.c     **** 		return;
 24489              		.loc 1 4375 6 view .LVU6348
 24490 0008 1A46     		mov	r2, r3
 24491 000a 01A9     		add	r1, sp, #4
 24492 000c 6846     		mov	r0, sp
 24493              	.LVL1890:
4375:src/xeq.c     **** 		return;
 24494              		.loc 1 4375 6 view .LVU6349
 24495 000e FFF7FEFF 		bl	reg_decode
 24496              	.LVL1891:
4375:src/xeq.c     **** 		return;
 24497              		.loc 1 4375 5 view .LVU6350
 24498 0012 20B9     		cbnz	r0, .L1753
4375:src/xeq.c     **** 		return;
 24499              		.loc 1 4375 39 discriminator 1 view .LVU6351
 24500 0014 DDF80480 		ldr	r8, [sp, #4]
4375:src/xeq.c     **** 		return;
 24501              		.loc 1 4375 34 discriminator 1 view .LVU6352
 24502 0018 B8F1010F 		cmp	r8, #1
 24503 001c 02D1     		bne	.L1777
 24504              	.L1753:
ARM GAS  /tmp/ccBFDvgN.s 			page 635


4420:src/xeq.c     **** 
 24505              		.loc 1 4420 1 view .LVU6353
 24506 001e 29B0     		add	sp, sp, #164
 24507              		.cfi_remember_state
 24508              		.cfi_def_cfa_offset 28
 24509              		@ sp needed
 24510 0020 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 24511              	.L1777:
 24512              		.cfi_restore_state
 24513 0024 0646     		mov	r6, r0
4379:src/xeq.c     **** 	end[0] = n;
 24514              		.loc 1 4379 2 is_stmt 1 view .LVU6354
4379:src/xeq.c     **** 	end[0] = n;
 24515              		.loc 1 4379 9 is_stmt 0 view .LVU6355
 24516 0026 1490     		str	r0, [sp, #80]
4380:src/xeq.c     **** 	i = 0;
 24517              		.loc 1 4380 2 is_stmt 1 view .LVU6356
4380:src/xeq.c     **** 	i = 0;
 24518              		.loc 1 4380 9 is_stmt 0 view .LVU6357
 24519 0028 CDF87880 		str	r8, [sp, #120]
4381:src/xeq.c     **** 	while (i>=0) {
 24520              		.loc 1 4381 2 is_stmt 1 view .LVU6358
 24521              	.LVL1892:
4382:src/xeq.c     **** 		int L = beg[i];
 24522              		.loc 1 4382 2 view .LVU6359
4382:src/xeq.c     **** 		int L = beg[i];
 24523              		.loc 1 4382 8 view .LVU6360
4381:src/xeq.c     **** 	while (i>=0) {
 24524              		.loc 1 4381 4 is_stmt 0 view .LVU6361
 24525 002c 0746     		mov	r7, r0
 24526              	.LVL1893:
 24527              	.L1767:
 24528              	.LBB3366:
4383:src/xeq.c     **** 		int R = end[i] - 1;
 24529              		.loc 1 4383 3 is_stmt 1 view .LVU6362
4384:src/xeq.c     **** 		if (L<R) {
 24530              		.loc 1 4384 3 view .LVU6363
4384:src/xeq.c     **** 		if (L<R) {
 24531              		.loc 1 4384 7 is_stmt 0 view .LVU6364
 24532 002e 08F1FF34 		add	r4, r8, #-1
 24533              	.LVL1894:
4385:src/xeq.c     **** 			const int pvt = s + L;
 24534              		.loc 1 4385 3 is_stmt 1 view .LVU6365
4385:src/xeq.c     **** 			const int pvt = s + L;
 24535              		.loc 1 4385 6 is_stmt 0 view .LVU6366
 24536 0032 B442     		cmp	r4, r6
 24537 0034 0CDC     		bgt	.L1778
 24538              	.LVL1895:
 24539              	.L1756:
4418:src/xeq.c     **** 	}
 24540              		.loc 1 4418 4 is_stmt 1 view .LVU6367
 24541              	.LBE3366:
4382:src/xeq.c     **** 		int L = beg[i];
 24542              		.loc 1 4382 8 is_stmt 0 view .LVU6368
 24543 0036 013F     		subs	r7, r7, #1
 24544              	.LVL1896:
4382:src/xeq.c     **** 		int L = beg[i];
ARM GAS  /tmp/ccBFDvgN.s 			page 636


 24545              		.loc 1 4382 8 view .LVU6369
 24546 0038 F1D3     		bcc	.L1753
 24547 003a 28AB     		add	r3, sp, #160
 24548 003c 03EB8703 		add	r3, r3, r7, lsl #2
 24549 0040 53F8288C 		ldr	r8, [r3, #-40]
 24550 0044 53F8506C 		ldr	r6, [r3, #-80]
 24551              	.LVL1897:
 24552              	.LBB3369:
4383:src/xeq.c     **** 		int R = end[i] - 1;
 24553              		.loc 1 4383 3 is_stmt 1 view .LVU6370
4384:src/xeq.c     **** 		if (L<R) {
 24554              		.loc 1 4384 3 view .LVU6371
4384:src/xeq.c     **** 		if (L<R) {
 24555              		.loc 1 4384 7 is_stmt 0 view .LVU6372
 24556 0048 08F1FF34 		add	r4, r8, #-1
 24557              	.LVL1898:
4385:src/xeq.c     **** 			const int pvt = s + L;
 24558              		.loc 1 4385 3 is_stmt 1 view .LVU6373
4385:src/xeq.c     **** 			const int pvt = s + L;
 24559              		.loc 1 4385 6 is_stmt 0 view .LVU6374
 24560 004c B442     		cmp	r4, r6
 24561 004e F2DD     		ble	.L1756
 24562              	.LVL1899:
 24563              	.L1778:
 24564              	.LBB3367:
4386:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24565              		.loc 1 4386 4 is_stmt 1 view .LVU6375
4387:src/xeq.c     **** 			while (L<R) {
 24566              		.loc 1 4387 4 view .LVU6376
4386:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24567              		.loc 1 4386 14 is_stmt 0 view .LVU6377
 24568 0050 0099     		ldr	r1, [sp]
4387:src/xeq.c     **** 			while (L<R) {
 24569              		.loc 1 4387 4 view .LVU6378
 24570 0052 02A8     		add	r0, sp, #8
 24571 0054 3144     		add	r1, r1, r6
 24572              	.LVL1900:
4387:src/xeq.c     **** 			while (L<R) {
 24573              		.loc 1 4387 4 view .LVU6379
 24574 0056 FFF7FEFF 		bl	getRegister
 24575              	.LVL1901:
4388:src/xeq.c     **** 				while (L<R) {
 24576              		.loc 1 4388 4 is_stmt 1 view .LVU6380
4388:src/xeq.c     **** 				while (L<R) {
 24577              		.loc 1 4388 10 view .LVU6381
4387:src/xeq.c     **** 			while (L<R) {
 24578              		.loc 1 4387 4 is_stmt 0 view .LVU6382
 24579 005a B146     		mov	r9, r6
 24580              	.L1759:
4390:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
 24581              		.loc 1 4390 6 is_stmt 1 view .LVU6383
 24582 005c 0099     		ldr	r1, [sp]
 24583 005e 0BA8     		add	r0, sp, #44
 24584 0060 2144     		add	r1, r1, r4
 24585 0062 FFF7FEFF 		bl	getRegister
 24586              	.LVL1902:
4391:src/xeq.c     **** 						break;
ARM GAS  /tmp/ccBFDvgN.s 			page 637


 24587              		.loc 1 4391 6 view .LVU6384
4391:src/xeq.c     **** 						break;
 24588              		.loc 1 4391 10 is_stmt 0 view .LVU6385
 24589 0066 02A9     		add	r1, sp, #8
 24590 0068 0BA8     		add	r0, sp, #44
 24591 006a FFF7FEFF 		bl	dn_lt
 24592              	.LVL1903:
4393:src/xeq.c     **** 				}
 24593              		.loc 1 4393 6 is_stmt 1 view .LVU6386
4391:src/xeq.c     **** 						break;
 24594              		.loc 1 4391 9 is_stmt 0 view .LVU6387
 24595 006e 00BB     		cbnz	r0, .L1758
4393:src/xeq.c     **** 				}
 24596              		.loc 1 4393 7 view .LVU6388
 24597 0070 013C     		subs	r4, r4, #1
 24598              	.LVL1904:
4389:src/xeq.c     **** 					getRegister(&a, s + R);
 24599              		.loc 1 4389 11 is_stmt 1 view .LVU6389
 24600 0072 4C45     		cmp	r4, r9
 24601 0074 F2DC     		bgt	.L1759
 24602              	.L1760:
 24603              	.LVL1905:
4397:src/xeq.c     **** 					getRegister(&a, s + L);
 24604              		.loc 1 4397 11 is_stmt 0 view .LVU6390
 24605 0076 4D46     		mov	r5, r9
 24606              	.LVL1906:
4388:src/xeq.c     **** 				while (L<R) {
 24607              		.loc 1 4388 10 is_stmt 1 view .LVU6391
 24608              	.L1768:
4406:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
 24609              		.loc 1 4406 4 view .LVU6392
 24610 0078 0098     		ldr	r0, [sp]
 24611 007a 02A9     		add	r1, sp, #8
 24612 007c 2844     		add	r0, r0, r5
 24613 007e FFF7FEFF 		bl	setRegister
 24614              	.LVL1907:
4407:src/xeq.c     **** 				beg[i+1] = beg[i];
 24615              		.loc 1 4407 4 view .LVU6393
4407:src/xeq.c     **** 				beg[i+1] = beg[i];
 24616              		.loc 1 4407 32 is_stmt 0 view .LVU6394
 24617 0082 6B1C     		adds	r3, r5, #1
4407:src/xeq.c     **** 				beg[i+1] = beg[i];
 24618              		.loc 1 4407 28 view .LVU6395
 24619 0084 A8EB0302 		sub	r2, r8, r3
4407:src/xeq.c     **** 				beg[i+1] = beg[i];
 24620              		.loc 1 4407 10 view .LVU6396
 24621 0088 A91B     		subs	r1, r5, r6
4407:src/xeq.c     **** 				beg[i+1] = beg[i];
 24622              		.loc 1 4407 7 view .LVU6397
 24623 008a 9142     		cmp	r1, r2
4408:src/xeq.c     **** 				end[i+1] = L;
 24624              		.loc 1 4408 10 view .LVU6398
 24625 008c 07F10101 		add	r1, r7, #1
4410:src/xeq.c     **** 			} else {
 24626              		.loc 1 4410 12 view .LVU6399
 24627 0090 28AA     		add	r2, sp, #160
 24628 0092 02EB8700 		add	r0, r2, r7, lsl #2
ARM GAS  /tmp/ccBFDvgN.s 			page 638


4408:src/xeq.c     **** 				end[i+1] = L;
 24629              		.loc 1 4408 14 view .LVU6400
 24630 0096 02EB8102 		add	r2, r2, r1, lsl #2
 24631 009a 0F46     		mov	r7, r1
 24632              	.LVL1908:
4407:src/xeq.c     **** 				beg[i+1] = beg[i];
 24633              		.loc 1 4407 7 view .LVU6401
 24634 009c 2DDA     		bge	.L1764
4408:src/xeq.c     **** 				end[i+1] = L;
 24635              		.loc 1 4408 5 is_stmt 1 view .LVU6402
4408:src/xeq.c     **** 				end[i+1] = L;
 24636              		.loc 1 4408 14 is_stmt 0 view .LVU6403
 24637 009e 42F8506C 		str	r6, [r2, #-80]
4409:src/xeq.c     **** 				beg[i] = L+1;
 24638              		.loc 1 4409 5 is_stmt 1 view .LVU6404
4410:src/xeq.c     **** 			} else {
 24639              		.loc 1 4410 12 is_stmt 0 view .LVU6405
 24640 00a2 40F8503C 		str	r3, [r0, #-80]
 24641 00a6 52F8506C 		ldr	r6, [r2, #-80]
4409:src/xeq.c     **** 				beg[i] = L+1;
 24642              		.loc 1 4409 14 view .LVU6406
 24643 00aa 42F8285C 		str	r5, [r2, #-40]
4410:src/xeq.c     **** 			} else {
 24644              		.loc 1 4410 5 is_stmt 1 view .LVU6407
 24645 00ae A846     		mov	r8, r5
 24646 00b0 BDE7     		b	.L1767
 24647              	.LVL1909:
 24648              	.L1758:
4395:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24649              		.loc 1 4395 5 view .LVU6408
4395:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24650              		.loc 1 4395 8 is_stmt 0 view .LVU6409
 24651 00b2 A145     		cmp	r9, r4
 24652 00b4 DFDA     		bge	.L1760
4396:src/xeq.c     **** 				while (L<R) {
 24653              		.loc 1 4396 6 is_stmt 1 view .LVU6410
 24654 00b6 0098     		ldr	r0, [sp]
4396:src/xeq.c     **** 				while (L<R) {
 24655              		.loc 1 4396 21 is_stmt 0 view .LVU6411
 24656 00b8 09F10105 		add	r5, r9, #1
 24657              	.LVL1910:
4396:src/xeq.c     **** 				while (L<R) {
 24658              		.loc 1 4396 6 view .LVU6412
 24659 00bc 0119     		adds	r1, r0, r4
 24660 00be 4844     		add	r0, r0, r9
 24661 00c0 FFF7FEFF 		bl	copyreg_n
 24662              	.LVL1911:
4397:src/xeq.c     **** 					getRegister(&a, s + L);
 24663              		.loc 1 4397 11 is_stmt 1 view .LVU6413
 24664 00c4 A542     		cmp	r5, r4
 24665 00c6 03DB     		blt	.L1762
 24666 00c8 21E0     		b	.L1769
 24667              	.L1779:
4401:src/xeq.c     **** 				}
 24668              		.loc 1 4401 7 is_stmt 0 view .LVU6414
 24669 00ca 0135     		adds	r5, r5, #1
 24670              	.LVL1912:
ARM GAS  /tmp/ccBFDvgN.s 			page 639


4397:src/xeq.c     **** 					getRegister(&a, s + L);
 24671              		.loc 1 4397 11 is_stmt 1 view .LVU6415
 24672 00cc A542     		cmp	r5, r4
 24673 00ce D3D0     		beq	.L1768
 24674              	.L1762:
4398:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
 24675              		.loc 1 4398 6 view .LVU6416
 24676 00d0 0099     		ldr	r1, [sp]
 24677 00d2 0BA8     		add	r0, sp, #44
 24678 00d4 2944     		add	r1, r1, r5
 24679 00d6 FFF7FEFF 		bl	getRegister
 24680              	.LVL1913:
4399:src/xeq.c     **** 						break;
 24681              		.loc 1 4399 6 view .LVU6417
4399:src/xeq.c     **** 						break;
 24682              		.loc 1 4399 10 is_stmt 0 view .LVU6418
 24683 00da 0BA9     		add	r1, sp, #44
 24684 00dc 02A8     		add	r0, sp, #8
 24685 00de FFF7FEFF 		bl	dn_lt
 24686              	.LVL1914:
4401:src/xeq.c     **** 				}
 24687              		.loc 1 4401 6 is_stmt 1 view .LVU6419
4399:src/xeq.c     **** 						break;
 24688              		.loc 1 4399 9 is_stmt 0 view .LVU6420
 24689 00e2 0028     		cmp	r0, #0
 24690 00e4 F1D0     		beq	.L1779
4403:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
 24691              		.loc 1 4403 5 is_stmt 1 view .LVU6421
4404:src/xeq.c     **** 			}
 24692              		.loc 1 4404 6 view .LVU6422
 24693 00e6 0098     		ldr	r0, [sp]
 24694 00e8 4119     		adds	r1, r0, r5
 24695 00ea 2044     		add	r0, r0, r4
4404:src/xeq.c     **** 			}
 24696              		.loc 1 4404 21 is_stmt 0 view .LVU6423
 24697 00ec 013C     		subs	r4, r4, #1
 24698              	.LVL1915:
4404:src/xeq.c     **** 			}
 24699              		.loc 1 4404 6 view .LVU6424
 24700 00ee FFF7FEFF 		bl	copyreg_n
 24701              	.LVL1916:
4388:src/xeq.c     **** 				while (L<R) {
 24702              		.loc 1 4388 10 is_stmt 1 view .LVU6425
 24703 00f2 A542     		cmp	r5, r4
 24704 00f4 C0DA     		bge	.L1768
 24705 00f6 A946     		mov	r9, r5
4389:src/xeq.c     **** 					getRegister(&a, s + R);
 24706              		.loc 1 4389 11 view .LVU6426
 24707 00f8 B0E7     		b	.L1759
 24708              	.LVL1917:
 24709              	.L1764:
4412:src/xeq.c     **** 				end[i+1] = end[i];
 24710              		.loc 1 4412 5 view .LVU6427
4413:src/xeq.c     **** 				end[i] = L;
 24711              		.loc 1 4413 14 is_stmt 0 view .LVU6428
 24712 00fa 42F8288C 		str	r8, [r2, #-40]
4414:src/xeq.c     **** 			}
ARM GAS  /tmp/ccBFDvgN.s 			page 640


 24713              		.loc 1 4414 12 view .LVU6429
 24714 00fe 40F8285C 		str	r5, [r0, #-40]
 24715 0102 52F8288C 		ldr	r8, [r2, #-40]
4412:src/xeq.c     **** 				end[i+1] = end[i];
 24716              		.loc 1 4412 14 view .LVU6430
 24717 0106 42F8503C 		str	r3, [r2, #-80]
4413:src/xeq.c     **** 				end[i] = L;
 24718              		.loc 1 4413 5 is_stmt 1 view .LVU6431
4414:src/xeq.c     **** 			}
 24719              		.loc 1 4414 5 view .LVU6432
4416:src/xeq.c     **** 		} else
 24720              		.loc 1 4416 4 view .LVU6433
 24721              	.LVL1918:
4416:src/xeq.c     **** 		} else
 24722              		.loc 1 4416 4 is_stmt 0 view .LVU6434
 24723              	.LBE3367:
 24724              	.LBE3369:
4382:src/xeq.c     **** 		int L = beg[i];
 24725              		.loc 1 4382 8 is_stmt 1 view .LVU6435
 24726              	.LBB3370:
 24727              	.LBB3368:
4414:src/xeq.c     **** 			}
 24728              		.loc 1 4414 12 is_stmt 0 view .LVU6436
 24729 010a 1E46     		mov	r6, r3
 24730 010c 8FE7     		b	.L1767
 24731              	.LVL1919:
 24732              	.L1769:
4397:src/xeq.c     **** 					getRegister(&a, s + L);
 24733              		.loc 1 4397 11 view .LVU6437
 24734 010e A946     		mov	r9, r5
 24735              	.LVL1920:
4397:src/xeq.c     **** 					getRegister(&a, s + L);
 24736              		.loc 1 4397 11 view .LVU6438
 24737 0110 4D46     		mov	r5, r9
 24738              	.LVL1921:
4388:src/xeq.c     **** 				while (L<R) {
 24739              		.loc 1 4388 10 is_stmt 1 view .LVU6439
 24740 0112 B1E7     		b	.L1768
 24741              	.LBE3368:
 24742              	.LBE3370:
 24743              		.cfi_endproc
 24744              	.LFE233:
 24746              		.section	.text.reset_volatile_state,"ax",%progbits
 24747              		.align	1
 24748              		.p2align 2,,3
 24749              		.global	reset_volatile_state
 24750              		.syntax unified
 24751              		.thumb
 24752              		.thumb_func
 24753              		.fpu fpv4-sp-d16
 24755              	reset_volatile_state:
 24756              	.LFB235:
4455:src/xeq.c     **** 	// extern int IntMaxWindow;
 24757              		.loc 1 4455 33 view -0
 24758              		.cfi_startproc
 24759              		@ args = 0, pretend = 0, frame = 0
 24760              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBFDvgN.s 			page 641


 24761              		@ link register save eliminated.
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24762              		.loc 1 4458 2 view .LVU6441
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24763              		.loc 1 4458 16 is_stmt 0 view .LVU6442
 24764 0000 034B     		ldr	r3, .L1781
 24765 0002 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
4459:src/xeq.c     **** }
 24766              		.loc 1 4459 15 view .LVU6443
 24767 0004 0021     		movs	r1, #0
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24768              		.loc 1 4458 16 view .LVU6444
 24769 0006 6FF3C502 		bfc	r2, #3, #3
 24770 000a 1A75     		strb	r2, [r3, #20]
4459:src/xeq.c     **** }
 24771              		.loc 1 4459 2 is_stmt 1 view .LVU6445
4459:src/xeq.c     **** }
 24772              		.loc 1 4459 15 is_stmt 0 view .LVU6446
 24773 000c 5974     		strb	r1, [r3, #17]
4460:src/xeq.c     **** 
 24774              		.loc 1 4460 1 view .LVU6447
 24775 000e 7047     		bx	lr
 24776              	.L1782:
 24777              		.align	2
 24778              	.L1781:
 24779 0010 00000000 		.word	StateWhileOn
 24780              		.cfi_endproc
 24781              	.LFE235:
 24783              		.section	.rodata.busy.str1.4,"aMS",%progbits,1
 24784              		.align	2
 24785              	.LC7:
 24786 0000 57616974 		.ascii	"Wait...\000"
 24786      2E2E2E00 
 24787              		.section	.text.busy,"ax",%progbits
 24788              		.align	1
 24789              		.p2align 2,,3
 24790              		.global	busy
 24791              		.syntax unified
 24792              		.thumb
 24793              		.thumb_func
 24794              		.fpu fpv4-sp-d16
 24796              	busy:
 24797              	.LFB236:
4467:src/xeq.c     **** 	/*
 24798              		.loc 1 4467 1 is_stmt 1 view -0
 24799              		.cfi_startproc
 24800              		@ args = 0, pretend = 0, frame = 0
 24801              		@ frame_needed = 0, uses_anonymous_args = 0
 24802              		@ link register save eliminated.
4471:src/xeq.c     **** 
 24803              		.loc 1 4471 12 view .LVU6449
4476:src/xeq.c     **** 
 24804              		.loc 1 4476 17 view .LVU6450
4481:src/xeq.c     **** 		Busy = 1;
 24805              		.loc 1 4481 2 view .LVU6451
4481:src/xeq.c     **** 		Busy = 1;
 24806              		.loc 1 4481 6 is_stmt 0 view .LVU6452
ARM GAS  /tmp/ccBFDvgN.s 			page 642


 24807 0000 054A     		ldr	r2, .L1786
4481:src/xeq.c     **** 		Busy = 1;
 24808              		.loc 1 4481 15 view .LVU6453
 24809 0002 064B     		ldr	r3, .L1786+4
4481:src/xeq.c     **** 		Busy = 1;
 24810              		.loc 1 4481 12 view .LVU6454
 24811 0004 1168     		ldr	r1, [r2]
 24812 0006 1B68     		ldr	r3, [r3]
 24813 0008 1943     		orrs	r1, r1, r3
 24814 000a 00D0     		beq	.L1785
4485:src/xeq.c     **** 
 24815              		.loc 1 4485 1 view .LVU6455
 24816 000c 7047     		bx	lr
 24817              	.L1785:
 24818              	.LBB3373:
 24819              	.LBI3373:
4466:src/xeq.c     **** {
 24820              		.loc 1 4466 6 is_stmt 1 view .LVU6456
 24821              	.LBB3374:
4482:src/xeq.c     **** 		message("Wait...", NULL);
 24822              		.loc 1 4482 3 view .LVU6457
4482:src/xeq.c     **** 		message("Wait...", NULL);
 24823              		.loc 1 4482 8 is_stmt 0 view .LVU6458
 24824 000e 0123     		movs	r3, #1
4483:src/xeq.c     **** 	}
 24825              		.loc 1 4483 3 view .LVU6459
 24826 0010 0348     		ldr	r0, .L1786+8
4482:src/xeq.c     **** 		message("Wait...", NULL);
 24827              		.loc 1 4482 8 view .LVU6460
 24828 0012 1360     		str	r3, [r2]
4483:src/xeq.c     **** 	}
 24829              		.loc 1 4483 3 is_stmt 1 view .LVU6461
 24830 0014 FFF7FEBF 		b	message
 24831              	.LVL1922:
 24832              	.L1787:
 24833              		.align	2
 24834              	.L1786:
 24835 0018 00000000 		.word	Busy
 24836 001c 00000000 		.word	Running
 24837 0020 00000000 		.word	.LC7
 24838              	.LBE3374:
 24839              	.LBE3373:
 24840              		.cfi_endproc
 24841              	.LFE236:
 24843              		.section	.text.intMonadic,"ax",%progbits
 24844              		.align	1
 24845              		.p2align 2,,3
 24846              		.global	intMonadic
 24847              		.syntax unified
 24848              		.thumb
 24849              		.thumb_func
 24850              		.fpu fpv4-sp-d16
 24852              	intMonadic:
 24853              	.LVL1923:
 24854              	.LFB240:
4563:src/xeq.c     **** 	int s;
 24855              		.loc 1 4563 43 view -0
ARM GAS  /tmp/ccBFDvgN.s 			page 643


 24856              		.cfi_startproc
 24857              		@ args = 0, pretend = 0, frame = 80
 24858              		@ frame_needed = 0, uses_anonymous_args = 0
4564:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
 24859              		.loc 1 4564 2 view .LVU6463
4565:src/xeq.c     **** 	decNumber rx, r;
 24860              		.loc 1 4565 2 view .LVU6464
4563:src/xeq.c     **** 	int s;
 24861              		.loc 1 4563 43 is_stmt 0 view .LVU6465
 24862 0000 30B5     		push	{r4, r5, lr}
 24863              		.cfi_def_cfa_offset 12
 24864              		.cfi_offset 4, -12
 24865              		.cfi_offset 5, -8
 24866              		.cfi_offset 14, -4
 24867 0002 95B0     		sub	sp, sp, #84
 24868              		.cfi_def_cfa_offset 96
4565:src/xeq.c     **** 	decNumber rx, r;
 24869              		.loc 1 4565 30 view .LVU6466
 24870 0004 01AA     		add	r2, sp, #4
 24871 0006 FFF7FEFF 		bl	extract_value
 24872              	.LVL1924:
4567:src/xeq.c     **** 
 24873              		.loc 1 4567 19 view .LVU6467
 24874 000a 1E4A     		ldr	r2, .L1803
4569:src/xeq.c     **** 		bad_mode_error();
 24875              		.loc 1 4569 6 view .LVU6468
 24876 000c 1E4B     		ldr	r3, .L1803+4
4567:src/xeq.c     **** 
 24877              		.loc 1 4567 15 view .LVU6469
 24878 000e 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4569:src/xeq.c     **** 		bad_mode_error();
 24879              		.loc 1 4569 6 view .LVU6470
 24880 0010 04EB4404 		add	r4, r4, r4, lsl #1
 24881 0014 53F83440 		ldr	r4, [r3, r4, lsl #3]
 24882              	.LVL1925:
4566:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 24883              		.loc 1 4566 2 is_stmt 1 view .LVU6471
4567:src/xeq.c     **** 
 24884              		.loc 1 4567 2 view .LVU6472
4569:src/xeq.c     **** 		bad_mode_error();
 24885              		.loc 1 4569 2 view .LVU6473
4569:src/xeq.c     **** 		bad_mode_error();
 24886              		.loc 1 4569 5 is_stmt 0 view .LVU6474
 24887 0018 5CB1     		cbz	r4, .L1793
 24888              	.LBB3392:
4572:src/xeq.c     **** #ifndef REALBUILD
 24889              		.loc 1 4572 3 is_stmt 1 view .LVU6475
 24890              	.LVL1926:
4574:src/xeq.c     **** 			bad_mode_error();
 24891              		.loc 1 4574 3 view .LVU6476
 24892              	.LBB3393:
 24893              	.LBI3393:
4501:src/xeq.c     **** {
 24894              		.loc 1 4501 24 view .LVU6477
 24895              	.LBB3394:
4503:src/xeq.c     **** 	if (xp < xrom)
 24896              		.loc 1 4503 2 view .LVU6478
ARM GAS  /tmp/ccBFDvgN.s 			page 644


4504:src/xeq.c     **** 		return NULL;
 24897              		.loc 1 4504 5 is_stmt 0 view .LVU6479
 24898 001a 1C4B     		ldr	r3, .L1803+8
4503:src/xeq.c     **** 	if (xp < xrom)
 24899              		.loc 1 4503 59 view .LVU6480
 24900 001c 24F00102 		bic	r2, r4, #1
 24901              	.LVL1927:
4504:src/xeq.c     **** 		return NULL;
 24902              		.loc 1 4504 2 is_stmt 1 view .LVU6481
4504:src/xeq.c     **** 		return NULL;
 24903              		.loc 1 4504 5 is_stmt 0 view .LVU6482
 24904 0020 9A42     		cmp	r2, r3
 24905 0022 10D3     		bcc	.L1792
4508:src/xeq.c     **** 		return NULL;
 24906              		.loc 1 4508 2 is_stmt 1 view .LVU6483
4508:src/xeq.c     **** 		return NULL;
 24907              		.loc 1 4508 17 is_stmt 0 view .LVU6484
 24908 0024 1A4D     		ldr	r5, .L1803+12
 24909 0026 2D88     		ldrh	r5, [r5]
 24910 0028 03EB4503 		add	r3, r3, r5, lsl #1
4508:src/xeq.c     **** 		return NULL;
 24911              		.loc 1 4508 5 view .LVU6485
 24912 002c 9A42     		cmp	r2, r3
 24913 002e 0AD2     		bcs	.L1792
 24914              	.LVL1928:
4508:src/xeq.c     **** 		return NULL;
 24915              		.loc 1 4508 5 view .LVU6486
 24916              	.LBE3394:
 24917              	.LBE3393:
4574:src/xeq.c     **** 			bad_mode_error();
 24918              		.loc 1 4574 6 view .LVU6487
 24919 0030 4AB1     		cbz	r2, .L1792
 24920              	.LVL1929:
 24921              	.L1793:
4574:src/xeq.c     **** 			bad_mode_error();
 24922              		.loc 1 4574 6 view .LVU6488
 24923              	.LBE3392:
4570:src/xeq.c     **** 	else {
 24924              		.loc 1 4570 3 is_stmt 1 view .LVU6489
 24925              	.LBB3403:
 24926              	.LBI3403:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 24927              		.loc 1 575 6 view .LVU6490
 24928              	.LBE3403:
 576:src/xeq.c     **** }
 24929              		.loc 1 576 2 view .LVU6491
 24930              	.LBB3412:
 24931              	.LBB3404:
 24932              	.LBI3404:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24933              		.loc 1 546 5 view .LVU6492
 24934              	.LBB3405:
 547:src/xeq.c     **** 		Error = e;
 24935              		.loc 1 547 2 view .LVU6493
 547:src/xeq.c     **** 		Error = e;
 24936              		.loc 1 547 12 is_stmt 0 view .LVU6494
 24937 0032 184B     		ldr	r3, .L1803+16
ARM GAS  /tmp/ccBFDvgN.s 			page 645


 547:src/xeq.c     **** 		Error = e;
 24938              		.loc 1 547 5 view .LVU6495
 24939 0034 1A68     		ldr	r2, [r3]
 24940 0036 1AB1     		cbz	r2, .L1790
 24941              	.LVL1930:
 24942              	.L1801:
 24943              	.LBB3406:
 24944              	.LBB3407:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 24945              		.loc 1 549 3 is_stmt 1 view .LVU6496
 24946              	.LBE3407:
 24947              	.LBE3406:
 24948              	.LBE3405:
 24949              	.LBE3404:
 24950              	.LBE3412:
4588:src/xeq.c     **** }
 24951              		.loc 1 4588 9 is_stmt 0 view .LVU6497
 24952 0038 0020     		movs	r0, #0
 24953 003a 0146     		mov	r1, r0
4589:src/xeq.c     **** 
 24954              		.loc 1 4589 1 view .LVU6498
 24955 003c 15B0     		add	sp, sp, #84
 24956              		.cfi_remember_state
 24957              		.cfi_def_cfa_offset 12
 24958              		@ sp needed
 24959 003e 30BD     		pop	{r4, r5, pc}
 24960              	.LVL1931:
 24961              	.L1790:
 24962              		.cfi_restore_state
 24963              	.LBB3413:
 24964              	.LBB3411:
 24965              	.LBB3410:
 24966              	.LBB3409:
 24967              	.LBI3406:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24968              		.loc 1 546 5 is_stmt 1 view .LVU6499
 24969              	.LBB3408:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24970              		.loc 1 548 3 view .LVU6500
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24971              		.loc 1 548 9 is_stmt 0 view .LVU6501
 24972 0040 0D22     		movs	r2, #13
 24973 0042 1A60     		str	r2, [r3]
 24974 0044 F8E7     		b	.L1801
 24975              	.LVL1932:
 24976              	.L1792:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24977              		.loc 1 548 9 view .LVU6502
 24978              	.LBE3408:
 24979              	.LBE3409:
 24980              	.LBE3410:
 24981              	.LBE3411:
 24982              	.LBE3413:
 24983              	.LBB3414:
4579:src/xeq.c     **** 			if (s)
 24984              		.loc 1 4579 4 is_stmt 1 view .LVU6503
 24985 0046 0246     		mov	r2, r0
ARM GAS  /tmp/ccBFDvgN.s 			page 646


 24986 0048 0B46     		mov	r3, r1
 24987 004a 02A8     		add	r0, sp, #8
 24988              	.LVL1933:
4579:src/xeq.c     **** 			if (s)
 24989              		.loc 1 4579 4 is_stmt 0 view .LVU6504
 24990 004c FFF7FEFF 		bl	ullint_to_dn
 24991              	.LVL1934:
4580:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24992              		.loc 1 4580 4 is_stmt 1 view .LVU6505
4580:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24993              		.loc 1 4580 7 is_stmt 0 view .LVU6506
 24994 0050 019B     		ldr	r3, [sp, #4]
 24995 0052 8BB9     		cbnz	r3, .L1802
 24996              	.L1794:
4582:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24997              		.loc 1 4582 4 is_stmt 1 view .LVU6507
4582:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24998              		.loc 1 4582 16 is_stmt 0 view .LVU6508
 24999 0054 02A9     		add	r1, sp, #8
 25000 0056 0BA8     		add	r0, sp, #44
 25001 0058 A047     		blx	r4
 25002              	.LVL1935:
4582:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25003              		.loc 1 4582 7 view .LVU6509
 25004 005a 40B9     		cbnz	r0, .L1795
4583:src/xeq.c     **** 			else
 25005              		.loc 1 4583 5 is_stmt 1 view .LVU6510
 25006              	.LVL1936:
 25007              	.LBB3395:
 25008              	.LBI3395:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25009              		.loc 1 546 5 view .LVU6511
 25010              	.LBB3396:
 547:src/xeq.c     **** 		Error = e;
 25011              		.loc 1 547 2 view .LVU6512
 547:src/xeq.c     **** 		Error = e;
 25012              		.loc 1 547 12 is_stmt 0 view .LVU6513
 25013 005c 0D4B     		ldr	r3, .L1803+16
 547:src/xeq.c     **** 		Error = e;
 25014              		.loc 1 547 5 view .LVU6514
 25015 005e 1A68     		ldr	r2, [r3]
 25016 0060 002A     		cmp	r2, #0
 25017 0062 E9D1     		bne	.L1801
 25018              	.LVL1937:
 25019              	.LBB3397:
 25020              	.LBI3397:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25021              		.loc 1 546 5 is_stmt 1 view .LVU6515
 25022              	.LBB3398:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25023              		.loc 1 548 3 view .LVU6516
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25024              		.loc 1 548 9 is_stmt 0 view .LVU6517
 25025 0064 0122     		movs	r2, #1
 25026              	.LBE3398:
 25027              	.LBE3397:
 25028              	.LBE3396:
ARM GAS  /tmp/ccBFDvgN.s 			page 647


 25029              	.LBE3395:
 25030              	.LBE3414:
4588:src/xeq.c     **** }
 25031              		.loc 1 4588 9 view .LVU6518
 25032 0066 0146     		mov	r1, r0
 25033              	.LBB3415:
 25034              	.LBB3402:
 25035              	.LBB3401:
 25036              	.LBB3400:
 25037              	.LBB3399:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25038              		.loc 1 548 9 view .LVU6519
 25039 0068 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25040              		.loc 1 549 3 is_stmt 1 view .LVU6520
 25041              	.LBE3399:
 25042              	.LBE3400:
 25043              	.LBE3401:
 25044              	.LBE3402:
 25045              	.LBE3415:
4589:src/xeq.c     **** 
 25046              		.loc 1 4589 1 is_stmt 0 view .LVU6521
 25047 006a 15B0     		add	sp, sp, #84
 25048              		.cfi_remember_state
 25049              		.cfi_def_cfa_offset 12
 25050              		@ sp needed
 25051 006c 30BD     		pop	{r4, r5, pc}
 25052              	.LVL1938:
 25053              	.L1795:
 25054              		.cfi_restore_state
 25055              	.LBB3416:
4585:src/xeq.c     **** 		}
 25056              		.loc 1 4585 5 is_stmt 1 view .LVU6522
4585:src/xeq.c     **** 		}
 25057              		.loc 1 4585 12 is_stmt 0 view .LVU6523
 25058 006e 0BA8     		add	r0, sp, #44
 25059 0070 FFF7FEFF 		bl	intResult
 25060              	.LVL1939:
 25061              	.LBE3416:
4589:src/xeq.c     **** 
 25062              		.loc 1 4589 1 view .LVU6524
 25063 0074 15B0     		add	sp, sp, #84
 25064              		.cfi_remember_state
 25065              		.cfi_def_cfa_offset 12
 25066              		@ sp needed
 25067 0076 30BD     		pop	{r4, r5, pc}
 25068              	.LVL1940:
 25069              	.L1802:
 25070              		.cfi_restore_state
 25071              	.LBB3417:
4581:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
 25072              		.loc 1 4581 5 is_stmt 1 view .LVU6525
 25073 0078 02A9     		add	r1, sp, #8
 25074 007a 0846     		mov	r0, r1
 25075 007c FFF7FEFF 		bl	dn_minus
 25076              	.LVL1941:
 25077 0080 E8E7     		b	.L1794
ARM GAS  /tmp/ccBFDvgN.s 			page 648


 25078              	.L1804:
 25079 0082 00BF     		.align	2
 25080              	.L1803:
 25081 0084 00000000 		.word	XeqOpCode
 25082 0088 00000000 		.word	monfuncs
 25083 008c 00000000 		.word	xrom
 25084 0090 00000000 		.word	xrom_size
 25085 0094 00000000 		.word	Error
 25086              	.LBE3417:
 25087              		.cfi_endproc
 25088              	.LFE240:
 25090              		.section	.text.intDyadic,"ax",%progbits
 25091              		.align	1
 25092              		.p2align 2,,3
 25093              		.global	intDyadic
 25094              		.syntax unified
 25095              		.thumb
 25096              		.thumb_func
 25097              		.fpu fpv4-sp-d16
 25099              	intDyadic:
 25100              	.LVL1942:
 25101              	.LFB241:
4594:src/xeq.c     **** 	int sx, sy;
 25102              		.loc 1 4594 59 view -0
 25103              		.cfi_startproc
 25104              		@ args = 0, pretend = 0, frame = 120
 25105              		@ frame_needed = 0, uses_anonymous_args = 0
4595:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 25106              		.loc 1 4595 2 view .LVU6527
4596:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25107              		.loc 1 4596 2 view .LVU6528
4594:src/xeq.c     **** 	int sx, sy;
 25108              		.loc 1 4594 59 is_stmt 0 view .LVU6529
 25109 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25110              		.cfi_def_cfa_offset 24
 25111              		.cfi_offset 4, -24
 25112              		.cfi_offset 5, -20
 25113              		.cfi_offset 6, -16
 25114              		.cfi_offset 7, -12
 25115              		.cfi_offset 8, -8
 25116              		.cfi_offset 14, -4
 25117 0004 9EB0     		sub	sp, sp, #120
 25118              		.cfi_def_cfa_offset 144
4594:src/xeq.c     **** 	int sx, sy;
 25119              		.loc 1 4594 59 view .LVU6530
 25120 0006 0546     		mov	r5, r0
 25121 0008 0C46     		mov	r4, r1
4596:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25122              		.loc 1 4596 30 view .LVU6531
 25123 000a 1046     		mov	r0, r2
 25124              	.LVL1943:
4596:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25125              		.loc 1 4596 30 view .LVU6532
 25126 000c 1946     		mov	r1, r3
 25127 000e 01AA     		add	r2, sp, #4
 25128              	.LVL1944:
4596:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
ARM GAS  /tmp/ccBFDvgN.s 			page 649


 25129              		.loc 1 4596 30 view .LVU6533
 25130 0010 FFF7FEFF 		bl	extract_value
 25131              	.LVL1945:
4597:src/xeq.c     **** 	decNumber rx, ry, r;
 25132              		.loc 1 4597 30 view .LVU6534
 25133 0014 02AA     		add	r2, sp, #8
4596:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25134              		.loc 1 4596 30 view .LVU6535
 25135 0016 0B46     		mov	r3, r1
 25136 0018 0646     		mov	r6, r0
4597:src/xeq.c     **** 	decNumber rx, ry, r;
 25137              		.loc 1 4597 30 view .LVU6536
 25138 001a 2146     		mov	r1, r4
 25139 001c 2846     		mov	r0, r5
4596:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25140              		.loc 1 4596 30 view .LVU6537
 25141 001e 1D46     		mov	r5, r3
 25142              	.LVL1946:
4597:src/xeq.c     **** 	decNumber rx, ry, r;
 25143              		.loc 1 4597 2 is_stmt 1 view .LVU6538
4597:src/xeq.c     **** 	decNumber rx, ry, r;
 25144              		.loc 1 4597 30 is_stmt 0 view .LVU6539
 25145 0020 FFF7FEFF 		bl	extract_value
 25146              	.LVL1947:
4599:src/xeq.c     **** 
 25147              		.loc 1 4599 19 view .LVU6540
 25148 0024 264A     		ldr	r2, .L1825
4601:src/xeq.c     **** 		bad_mode_error();
 25149              		.loc 1 4601 6 view .LVU6541
 25150 0026 274B     		ldr	r3, .L1825+4
4599:src/xeq.c     **** 
 25151              		.loc 1 4599 15 view .LVU6542
 25152 0028 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4601:src/xeq.c     **** 		bad_mode_error();
 25153              		.loc 1 4601 6 view .LVU6543
 25154 002a 04EB4404 		add	r4, r4, r4, lsl #1
 25155 002e 53F83440 		ldr	r4, [r3, r4, lsl #3]
 25156              	.LVL1948:
4598:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 25157              		.loc 1 4598 2 is_stmt 1 view .LVU6544
4599:src/xeq.c     **** 
 25158              		.loc 1 4599 2 view .LVU6545
4601:src/xeq.c     **** 		bad_mode_error();
 25159              		.loc 1 4601 2 view .LVU6546
4601:src/xeq.c     **** 		bad_mode_error();
 25160              		.loc 1 4601 5 is_stmt 0 view .LVU6547
 25161 0032 6CB1     		cbz	r4, .L1810
 25162              	.LBB3435:
 25163              	.LBB3436:
 25164              	.LBB3437:
4504:src/xeq.c     **** 		return NULL;
 25165              		.loc 1 4504 5 view .LVU6548
 25166 0034 244B     		ldr	r3, .L1825+8
4503:src/xeq.c     **** 	if (xp < xrom)
 25167              		.loc 1 4503 59 view .LVU6549
 25168 0036 24F00102 		bic	r2, r4, #1
 25169              	.LVL1949:
ARM GAS  /tmp/ccBFDvgN.s 			page 650


4504:src/xeq.c     **** 		return NULL;
 25170              		.loc 1 4504 5 view .LVU6550
 25171 003a 9A42     		cmp	r2, r3
 25172 003c 0746     		mov	r7, r0
 25173 003e 8846     		mov	r8, r1
 25174              	.LBE3437:
 25175              	.LBE3436:
4604:src/xeq.c     **** 
 25176              		.loc 1 4604 3 is_stmt 1 view .LVU6551
 25177              	.LVL1950:
4607:src/xeq.c     **** 			bad_mode_error();
 25178              		.loc 1 4607 3 view .LVU6552
 25179              	.LBB3439:
 25180              	.LBI3436:
4501:src/xeq.c     **** {
 25181              		.loc 1 4501 24 view .LVU6553
 25182              	.LBB3438:
4503:src/xeq.c     **** 	if (xp < xrom)
 25183              		.loc 1 4503 2 view .LVU6554
4504:src/xeq.c     **** 		return NULL;
 25184              		.loc 1 4504 2 view .LVU6555
4504:src/xeq.c     **** 		return NULL;
 25185              		.loc 1 4504 5 is_stmt 0 view .LVU6556
 25186 0040 11D3     		bcc	.L1809
4508:src/xeq.c     **** 		return NULL;
 25187              		.loc 1 4508 2 is_stmt 1 view .LVU6557
4508:src/xeq.c     **** 		return NULL;
 25188              		.loc 1 4508 17 is_stmt 0 view .LVU6558
 25189 0042 2249     		ldr	r1, .L1825+12
 25190              	.LVL1951:
4508:src/xeq.c     **** 		return NULL;
 25191              		.loc 1 4508 17 view .LVU6559
 25192 0044 0988     		ldrh	r1, [r1]
 25193 0046 03EB4103 		add	r3, r3, r1, lsl #1
4508:src/xeq.c     **** 		return NULL;
 25194              		.loc 1 4508 5 view .LVU6560
 25195 004a 9A42     		cmp	r2, r3
 25196 004c 0BD2     		bcs	.L1809
 25197              	.LVL1952:
4508:src/xeq.c     **** 		return NULL;
 25198              		.loc 1 4508 5 view .LVU6561
 25199              	.LBE3438:
 25200              	.LBE3439:
4607:src/xeq.c     **** 			bad_mode_error();
 25201              		.loc 1 4607 6 view .LVU6562
 25202 004e 52B1     		cbz	r2, .L1809
 25203              	.LVL1953:
 25204              	.L1810:
4607:src/xeq.c     **** 			bad_mode_error();
 25205              		.loc 1 4607 6 view .LVU6563
 25206              	.LBE3435:
4602:src/xeq.c     **** 	else {
 25207              		.loc 1 4602 3 is_stmt 1 view .LVU6564
 25208              	.LBB3448:
 25209              	.LBI3448:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 25210              		.loc 1 575 6 view .LVU6565
ARM GAS  /tmp/ccBFDvgN.s 			page 651


 25211              	.LBE3448:
 576:src/xeq.c     **** }
 25212              		.loc 1 576 2 view .LVU6566
 25213              	.LBB3457:
 25214              	.LBB3449:
 25215              	.LBI3449:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25216              		.loc 1 546 5 view .LVU6567
 25217              	.LBB3450:
 547:src/xeq.c     **** 		Error = e;
 25218              		.loc 1 547 2 view .LVU6568
 547:src/xeq.c     **** 		Error = e;
 25219              		.loc 1 547 12 is_stmt 0 view .LVU6569
 25220 0050 1F4B     		ldr	r3, .L1825+16
 547:src/xeq.c     **** 		Error = e;
 25221              		.loc 1 547 5 view .LVU6570
 25222 0052 1A68     		ldr	r2, [r3]
 25223 0054 22B1     		cbz	r2, .L1807
 25224              	.LVL1954:
 25225              	.L1822:
 25226              	.LBB3451:
 25227              	.LBB3452:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25228              		.loc 1 549 3 is_stmt 1 view .LVU6571
 25229              	.LBE3452:
 25230              	.LBE3451:
 25231              	.LBE3450:
 25232              	.LBE3449:
 25233              	.LBE3457:
4621:src/xeq.c     **** }
 25234              		.loc 1 4621 9 is_stmt 0 view .LVU6572
 25235 0056 0020     		movs	r0, #0
 25236 0058 0146     		mov	r1, r0
4622:src/xeq.c     **** 
 25237              		.loc 1 4622 1 view .LVU6573
 25238 005a 1EB0     		add	sp, sp, #120
 25239              		.cfi_remember_state
 25240              		.cfi_def_cfa_offset 24
 25241              		@ sp needed
 25242 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25243              	.LVL1955:
 25244              	.L1807:
 25245              		.cfi_restore_state
 25246              	.LBB3458:
 25247              	.LBB3456:
 25248              	.LBB3455:
 25249              	.LBB3454:
 25250              	.LBI3451:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25251              		.loc 1 546 5 is_stmt 1 view .LVU6574
 25252              	.LBB3453:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25253              		.loc 1 548 3 view .LVU6575
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25254              		.loc 1 548 9 is_stmt 0 view .LVU6576
 25255 0060 0D22     		movs	r2, #13
 25256 0062 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccBFDvgN.s 			page 652


 25257 0064 F7E7     		b	.L1822
 25258              	.LVL1956:
 25259              	.L1809:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25260              		.loc 1 548 9 view .LVU6577
 25261              	.LBE3453:
 25262              	.LBE3454:
 25263              	.LBE3455:
 25264              	.LBE3456:
 25265              	.LBE3458:
 25266              	.LBB3459:
4612:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25267              		.loc 1 4612 4 is_stmt 1 view .LVU6578
 25268 0066 2B46     		mov	r3, r5
 25269 0068 3246     		mov	r2, r6
 25270 006a 03A8     		add	r0, sp, #12
 25271              	.LVL1957:
4612:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25272              		.loc 1 4612 4 is_stmt 0 view .LVU6579
 25273 006c FFF7FEFF 		bl	ullint_to_dn
 25274              	.LVL1958:
4612:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25275              		.loc 1 4612 27 is_stmt 1 view .LVU6580
4612:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25276              		.loc 1 4612 30 is_stmt 0 view .LVU6581
 25277 0070 019B     		ldr	r3, [sp, #4]
 25278 0072 03BB     		cbnz	r3, .L1823
 25279              	.L1811:
4613:src/xeq.c     **** 
 25280              		.loc 1 4613 4 is_stmt 1 view .LVU6582
 25281 0074 4346     		mov	r3, r8
 25282 0076 3A46     		mov	r2, r7
 25283 0078 0CA8     		add	r0, sp, #48
 25284 007a FFF7FEFF 		bl	ullint_to_dn
 25285              	.LVL1959:
4613:src/xeq.c     **** 
 25286              		.loc 1 4613 27 view .LVU6583
4613:src/xeq.c     **** 
 25287              		.loc 1 4613 30 is_stmt 0 view .LVU6584
 25288 007e 029B     		ldr	r3, [sp, #8]
 25289 0080 A3B9     		cbnz	r3, .L1824
 25290              	.L1812:
4615:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25291              		.loc 1 4615 4 is_stmt 1 view .LVU6585
4615:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25292              		.loc 1 4615 16 is_stmt 0 view .LVU6586
 25293 0082 03AA     		add	r2, sp, #12
 25294 0084 0CA9     		add	r1, sp, #48
 25295 0086 15A8     		add	r0, sp, #84
 25296 0088 A047     		blx	r4
 25297              	.LVL1960:
4615:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25298              		.loc 1 4615 7 view .LVU6587
 25299 008a 48B9     		cbnz	r0, .L1813
4616:src/xeq.c     **** 			else
 25300              		.loc 1 4616 5 is_stmt 1 view .LVU6588
 25301              	.LVL1961:
ARM GAS  /tmp/ccBFDvgN.s 			page 653


 25302              	.LBB3440:
 25303              	.LBI3440:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25304              		.loc 1 546 5 view .LVU6589
 25305              	.LBB3441:
 547:src/xeq.c     **** 		Error = e;
 25306              		.loc 1 547 2 view .LVU6590
 547:src/xeq.c     **** 		Error = e;
 25307              		.loc 1 547 12 is_stmt 0 view .LVU6591
 25308 008c 104B     		ldr	r3, .L1825+16
 547:src/xeq.c     **** 		Error = e;
 25309              		.loc 1 547 5 view .LVU6592
 25310 008e 1A68     		ldr	r2, [r3]
 25311 0090 002A     		cmp	r2, #0
 25312 0092 E0D1     		bne	.L1822
 25313              	.LVL1962:
 25314              	.LBB3442:
 25315              	.LBI3442:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25316              		.loc 1 546 5 is_stmt 1 view .LVU6593
 25317              	.LBB3443:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25318              		.loc 1 548 3 view .LVU6594
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25319              		.loc 1 548 9 is_stmt 0 view .LVU6595
 25320 0094 0122     		movs	r2, #1
 25321              	.LBE3443:
 25322              	.LBE3442:
 25323              	.LBE3441:
 25324              	.LBE3440:
 25325              	.LBE3459:
4621:src/xeq.c     **** }
 25326              		.loc 1 4621 9 view .LVU6596
 25327 0096 0146     		mov	r1, r0
 25328              	.LBB3460:
 25329              	.LBB3447:
 25330              	.LBB3446:
 25331              	.LBB3445:
 25332              	.LBB3444:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25333              		.loc 1 548 9 view .LVU6597
 25334 0098 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25335              		.loc 1 549 3 is_stmt 1 view .LVU6598
 25336              	.LBE3444:
 25337              	.LBE3445:
 25338              	.LBE3446:
 25339              	.LBE3447:
 25340              	.LBE3460:
4622:src/xeq.c     **** 
 25341              		.loc 1 4622 1 is_stmt 0 view .LVU6599
 25342 009a 1EB0     		add	sp, sp, #120
 25343              		.cfi_remember_state
 25344              		.cfi_def_cfa_offset 24
 25345              		@ sp needed
 25346 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25347              	.LVL1963:
ARM GAS  /tmp/ccBFDvgN.s 			page 654


 25348              	.L1813:
 25349              		.cfi_restore_state
 25350              	.LBB3461:
4618:src/xeq.c     **** 		}
 25351              		.loc 1 4618 5 is_stmt 1 view .LVU6600
4618:src/xeq.c     **** 		}
 25352              		.loc 1 4618 12 is_stmt 0 view .LVU6601
 25353 00a0 15A8     		add	r0, sp, #84
 25354 00a2 FFF7FEFF 		bl	intResult
 25355              	.LVL1964:
 25356              	.LBE3461:
4622:src/xeq.c     **** 
 25357              		.loc 1 4622 1 view .LVU6602
 25358 00a6 1EB0     		add	sp, sp, #120
 25359              		.cfi_remember_state
 25360              		.cfi_def_cfa_offset 24
 25361              		@ sp needed
 25362 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25363              	.LVL1965:
 25364              	.L1824:
 25365              		.cfi_restore_state
 25366              	.LBB3462:
4613:src/xeq.c     **** 
 25367              		.loc 1 4613 35 is_stmt 1 discriminator 1 view .LVU6603
 25368 00ac 0CA9     		add	r1, sp, #48
 25369 00ae 0846     		mov	r0, r1
 25370 00b0 FFF7FEFF 		bl	dn_minus
 25371              	.LVL1966:
 25372 00b4 E5E7     		b	.L1812
 25373              	.L1823:
4612:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25374              		.loc 1 4612 35 discriminator 1 view .LVU6604
 25375 00b6 03A9     		add	r1, sp, #12
 25376 00b8 0846     		mov	r0, r1
 25377 00ba FFF7FEFF 		bl	dn_minus
 25378              	.LVL1967:
 25379 00be D9E7     		b	.L1811
 25380              	.L1826:
 25381              		.align	2
 25382              	.L1825:
 25383 00c0 00000000 		.word	XeqOpCode
 25384 00c4 00000000 		.word	dyfuncs
 25385 00c8 00000000 		.word	xrom
 25386 00cc 00000000 		.word	xrom_size
 25387 00d0 00000000 		.word	Error
 25388              	.LBE3462:
 25389              		.cfi_endproc
 25390              	.LFE241:
 25392              		.section	.text.xeq_init_contexts,"ax",%progbits
 25393              		.align	1
 25394              		.p2align 2,,3
 25395              		.global	xeq_init_contexts
 25396              		.syntax unified
 25397              		.thumb
 25398              		.thumb_func
 25399              		.fpu fpv4-sp-d16
 25401              	xeq_init_contexts:
ARM GAS  /tmp/ccBFDvgN.s 			page 655


 25402              	.LFB258:
5627:src/xeq.c     **** 	/*
 25403              		.loc 1 5627 30 view -0
 25404              		.cfi_startproc
 25405              		@ args = 0, pretend = 0, frame = 0
 25406              		@ frame_needed = 0, uses_anonymous_args = 0
5631:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
 25407              		.loc 1 5631 2 view .LVU6606
5632:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25408              		.loc 1 5632 2 view .LVU6607
5627:src/xeq.c     **** 	/*
 25409              		.loc 1 5627 30 is_stmt 0 view .LVU6608
 25410 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 25411              		.cfi_def_cfa_offset 24
 25412              		.cfi_offset 3, -24
 25413              		.cfi_offset 4, -20
 25414              		.cfi_offset 5, -16
 25415              		.cfi_offset 6, -12
 25416              		.cfi_offset 7, -8
 25417              		.cfi_offset 14, -4
5632:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25418              		.loc 1 5632 17 view .LVU6609
 25419 0002 1D4B     		ldr	r3, .L1832
5635:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25420              		.loc 1 5635 13 view .LVU6610
 25421 0004 1D4F     		ldr	r7, .L1832+4
5632:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25422              		.loc 1 5632 17 view .LVU6611
 25423 0006 1A68     		ldr	r2, [r3]
5632:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25424              		.loc 1 5632 34 view .LVU6612
 25425 0008 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
5633:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25426              		.loc 1 5633 21 view .LVU6613
 25427 000c 92F8CF17 		ldrb	r1, [r2, #1999]	@ zero_extendqisi2
5635:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25428              		.loc 1 5635 36 view .LVU6614
 25429 0010 5088     		ldrh	r0, [r2, #2]
5637:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25430              		.loc 1 5637 34 view .LVU6615
 25431 0012 B2F9E247 		ldrsh	r4, [r2, #2018]
5632:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25432              		.loc 1 5632 59 view .LVU6616
 25433 0016 13F02003 		ands	r3, r3, #32
 25434 001a 18BF     		it	ne
 25435 001c 4623     		movne	r3, #70
5633:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25436              		.loc 1 5633 19 view .LVU6617
 25437 001e C1F16401 		rsb	r1, r1, #100
5632:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25438              		.loc 1 5632 59 view .LVU6618
 25439 0022 1E46     		mov	r6, r3
5633:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25440              		.loc 1 5633 36 view .LVU6619
 25441 0024 C3EB8103 		rsb	r3, r3, r1, lsl #2
5636:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25442              		.loc 1 5636 31 view .LVU6620
ARM GAS  /tmp/ccBFDvgN.s 			page 656


 25443 0028 03F20E21 		addw	r1, r3, #526
 25444 002c 89B2     		uxth	r1, r1
5637:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25445              		.loc 1 5637 21 view .LVU6621
 25446 002e 0D1A     		subs	r5, r1, r0
5634:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25447              		.loc 1 5634 22 view .LVU6622
 25448 0030 03F50573 		add	r3, r3, #532
5635:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25449              		.loc 1 5635 34 view .LVU6623
 25450 0034 181A     		subs	r0, r3, r0
5637:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25451              		.loc 1 5637 32 view .LVU6624
 25452 0036 2544     		add	r5, r5, r4
5634:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25453              		.loc 1 5634 11 view .LVU6625
 25454 0038 141D     		adds	r4, r2, #4
5635:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25455              		.loc 1 5635 13 view .LVU6626
 25456 003a 3860     		str	r0, [r7]
5634:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25457              		.loc 1 5634 22 view .LVU6627
 25458 003c 04EB4303 		add	r3, r4, r3, lsl #1
5632:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25459              		.loc 1 5632 15 view .LVU6628
 25460 0040 0F48     		ldr	r0, .L1832+8
5634:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25461              		.loc 1 5634 9 view .LVU6629
 25462 0042 104C     		ldr	r4, .L1832+12
5637:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25463              		.loc 1 5637 11 view .LVU6630
 25464 0044 104F     		ldr	r7, .L1832+16
5634:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25465              		.loc 1 5634 9 view .LVU6631
 25466 0046 2360     		str	r3, [r4]
5632:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25467              		.loc 1 5632 15 view .LVU6632
 25468 0048 0660     		str	r6, [r0]
5633:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25469              		.loc 1 5633 2 is_stmt 1 view .LVU6633
 25470              	.LVL1968:
5634:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25471              		.loc 1 5634 2 view .LVU6634
5635:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25472              		.loc 1 5635 2 view .LVU6635
5636:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25473              		.loc 1 5636 2 view .LVU6636
5636:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25474              		.loc 1 5636 10 is_stmt 0 view .LVU6637
 25475 004a 1180     		strh	r1, [r2]	@ movhi
5637:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25476              		.loc 1 5637 2 is_stmt 1 view .LVU6638
5638:src/xeq.c     **** 
 25477              		.loc 1 5638 14 is_stmt 0 view .LVU6639
 25478 004c 6420     		movs	r0, #100
5637:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25479              		.loc 1 5637 11 view .LVU6640
ARM GAS  /tmp/ccBFDvgN.s 			page 657


 25480 004e 3D60     		str	r5, [r7]
5638:src/xeq.c     **** 
 25481              		.loc 1 5638 2 is_stmt 1 view .LVU6641
5638:src/xeq.c     **** 
 25482              		.loc 1 5638 14 is_stmt 0 view .LVU6642
 25483 0050 FFF7FEFF 		bl	get_reg_n
 25484              	.LVL1969:
5644:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25485              		.loc 1 5644 2 view .LVU6643
 25486 0054 0D4C     		ldr	r4, .L1832+20
5638:src/xeq.c     **** 
 25487              		.loc 1 5638 12 view .LVU6644
 25488 0056 0E4B     		ldr	r3, .L1832+24
5638:src/xeq.c     **** 
 25489              		.loc 1 5638 14 view .LVU6645
 25490 0058 0246     		mov	r2, r0
5644:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25491              		.loc 1 5644 2 view .LVU6646
 25492 005a 0021     		movs	r1, #0
 25493 005c 2046     		mov	r0, r4
5638:src/xeq.c     **** 
 25494              		.loc 1 5638 12 view .LVU6647
 25495 005e 1A60     		str	r2, [r3]
5644:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25496              		.loc 1 5644 2 is_stmt 1 view .LVU6648
 25497 0060 FFF7FEFF 		bl	decContextDefault
 25498              	.LVL1970:
5645:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25499              		.loc 1 5645 2 view .LVU6649
5645:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25500              		.loc 1 5645 13 is_stmt 0 view .LVU6650
 25501 0064 2723     		movs	r3, #39
5646:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25502              		.loc 1 5646 10 view .LVU6651
 25503 0066 0B49     		ldr	r1, .L1832+28
5647:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25504              		.loc 1 5647 10 view .LVU6652
 25505 0068 0B4A     		ldr	r2, .L1832+32
5645:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25506              		.loc 1 5645 13 view .LVU6653
 25507 006a 2360     		str	r3, [r4]
5646:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25508              		.loc 1 5646 2 is_stmt 1 view .LVU6654
5648:src/xeq.c     **** }
 25509              		.loc 1 5648 12 is_stmt 0 view .LVU6655
 25510 006c 0323     		movs	r3, #3
 25511 006e 2373     		strb	r3, [r4, #12]
5647:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25512              		.loc 1 5647 10 view .LVU6656
 25513 0070 C4E90112 		strd	r1, r2, [r4, #4]
5648:src/xeq.c     **** }
 25514              		.loc 1 5648 2 is_stmt 1 view .LVU6657
5649:src/xeq.c     **** 
 25515              		.loc 1 5649 1 is_stmt 0 view .LVU6658
 25516 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25517              	.L1833:
 25518 0076 00BF     		.align	2
ARM GAS  /tmp/ccBFDvgN.s 			page 658


 25519              	.L1832:
 25520 0078 00000000 		.word	main_ram
 25521 007c 00000000 		.word	RetStkSize
 25522 0080 00000000 		.word	SizeStatRegs
 25523 0084 00000000 		.word	RetStk
 25524 0088 00000000 		.word	ProgFree
 25525 008c 00000000 		.word	Ctx
 25526 0090 00000000 		.word	StackBase
 25527 0094 3F420F00 		.word	999999
 25528 0098 C1BDF0FF 		.word	-999999
 25529              		.cfi_endproc
 25530              	.LFE258:
 25532              		.section	.text.not_running,"ax",%progbits
 25533              		.align	1
 25534              		.p2align 2,,3
 25535              		.global	not_running
 25536              		.syntax unified
 25537              		.thumb
 25538              		.thumb_func
 25539              		.fpu fpv4-sp-d16
 25541              	not_running:
 25542              	.LFB259:
5797:src/xeq.c     **** 	if ( Running ) {
 25543              		.loc 1 5797 23 is_stmt 1 view -0
 25544              		.cfi_startproc
 25545              		@ args = 0, pretend = 0, frame = 0
 25546              		@ frame_needed = 0, uses_anonymous_args = 0
 25547              		@ link register save eliminated.
5798:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25548              		.loc 1 5798 2 view .LVU6660
5798:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25549              		.loc 1 5798 7 is_stmt 0 view .LVU6661
 25550 0000 064B     		ldr	r3, .L1839
5798:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25551              		.loc 1 5798 5 view .LVU6662
 25552 0002 1B68     		ldr	r3, [r3]
 25553 0004 0BB9     		cbnz	r3, .L1838
5802:src/xeq.c     **** }
 25554              		.loc 1 5802 9 view .LVU6663
 25555 0006 0120     		movs	r0, #1
 25556 0008 7047     		bx	lr
 25557              	.L1838:
5799:src/xeq.c     **** 		return 0;
 25558              		.loc 1 5799 3 is_stmt 1 view .LVU6664
 25559              	.LVL1971:
 25560              	.LBB3467:
 25561              	.LBI3467:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25562              		.loc 1 546 5 view .LVU6665
 25563              	.LBB3468:
 547:src/xeq.c     **** 		Error = e;
 25564              		.loc 1 547 2 view .LVU6666
 547:src/xeq.c     **** 		Error = e;
 25565              		.loc 1 547 12 is_stmt 0 view .LVU6667
 25566 000a 054B     		ldr	r3, .L1839+4
 25567 000c 1868     		ldr	r0, [r3]
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccBFDvgN.s 			page 659


 25568              		.loc 1 547 5 view .LVU6668
 25569 000e 10B9     		cbnz	r0, .L1837
 25570              	.LVL1972:
 25571              	.LBB3469:
 25572              	.LBI3469:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25573              		.loc 1 546 5 is_stmt 1 view .LVU6669
 25574              	.LBB3470:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25575              		.loc 1 548 3 view .LVU6670
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25576              		.loc 1 548 9 is_stmt 0 view .LVU6671
 25577 0010 0722     		movs	r2, #7
 25578 0012 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25579              		.loc 1 549 3 is_stmt 1 view .LVU6672
 25580 0014 7047     		bx	lr
 25581              	.LVL1973:
 25582              	.L1837:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25583              		.loc 1 549 3 is_stmt 0 view .LVU6673
 25584              	.LBE3470:
 25585              	.LBE3469:
 25586              	.LBE3468:
 25587              	.LBE3467:
5800:src/xeq.c     **** 	}
 25588              		.loc 1 5800 10 view .LVU6674
 25589 0016 0020     		movs	r0, #0
 25590              	.LVL1974:
5803:src/xeq.c     **** 
 25591              		.loc 1 5803 1 view .LVU6675
 25592 0018 7047     		bx	lr
 25593              	.L1840:
 25594 001a 00BF     		.align	2
 25595              	.L1839:
 25596 001c 00000000 		.word	Running
 25597 0020 00000000 		.word	Error
 25598              		.cfi_endproc
 25599              	.LFE259:
 25601              		.section	.text.set_running_off_sst,"ax",%progbits
 25602              		.align	1
 25603              		.p2align 2,,3
 25604              		.global	set_running_off_sst
 25605              		.syntax unified
 25606              		.thumb
 25607              		.thumb_func
 25608              		.fpu fpv4-sp-d16
 25610              	set_running_off_sst:
 25611              	.LFB260:
5808:src/xeq.c     **** 	Running = 0;
 25612              		.loc 1 5808 28 is_stmt 1 view -0
 25613              		.cfi_startproc
 25614              		@ args = 0, pretend = 0, frame = 0
 25615              		@ frame_needed = 0, uses_anonymous_args = 0
 25616              		@ link register save eliminated.
5809:src/xeq.c     **** }
 25617              		.loc 1 5809 2 view .LVU6677
ARM GAS  /tmp/ccBFDvgN.s 			page 660


5809:src/xeq.c     **** }
 25618              		.loc 1 5809 10 is_stmt 0 view .LVU6678
 25619 0000 014B     		ldr	r3, .L1842
 25620 0002 0022     		movs	r2, #0
 25621 0004 1A60     		str	r2, [r3]
5810:src/xeq.c     **** 
 25622              		.loc 1 5810 1 view .LVU6679
 25623 0006 7047     		bx	lr
 25624              	.L1843:
 25625              		.align	2
 25626              	.L1842:
 25627 0008 00000000 		.word	Running
 25628              		.cfi_endproc
 25629              	.LFE260:
 25631              		.section	.text.set_running_on_sst,"ax",%progbits
 25632              		.align	1
 25633              		.p2align 2,,3
 25634              		.global	set_running_on_sst
 25635              		.syntax unified
 25636              		.thumb
 25637              		.thumb_func
 25638              		.fpu fpv4-sp-d16
 25640              	set_running_on_sst:
 25641              	.LFB261:
5812:src/xeq.c     **** 	Running = 1;
 25642              		.loc 1 5812 27 is_stmt 1 view -0
 25643              		.cfi_startproc
 25644              		@ args = 0, pretend = 0, frame = 0
 25645              		@ frame_needed = 0, uses_anonymous_args = 0
 25646              		@ link register save eliminated.
5813:src/xeq.c     **** }
 25647              		.loc 1 5813 2 view .LVU6681
5813:src/xeq.c     **** }
 25648              		.loc 1 5813 10 is_stmt 0 view .LVU6682
 25649 0000 014B     		ldr	r3, .L1845
 25650 0002 0122     		movs	r2, #1
 25651 0004 1A60     		str	r2, [r3]
5814:src/xeq.c     **** 
 25652              		.loc 1 5814 1 view .LVU6683
 25653 0006 7047     		bx	lr
 25654              	.L1846:
 25655              		.align	2
 25656              	.L1845:
 25657 0008 00000000 		.word	Running
 25658              		.cfi_endproc
 25659              	.LFE261:
 25661              		.section	.text.set_running_off,"ax",%progbits
 25662              		.align	1
 25663              		.p2align 2,,3
 25664              		.global	set_running_off
 25665              		.syntax unified
 25666              		.thumb
 25667              		.thumb_func
 25668              		.fpu fpv4-sp-d16
 25670              	set_running_off:
 25671              	.LFB262:
5816:src/xeq.c     **** 	set_running_off_sst();
ARM GAS  /tmp/ccBFDvgN.s 			page 661


 25672              		.loc 1 5816 24 is_stmt 1 view -0
 25673              		.cfi_startproc
 25674              		@ args = 0, pretend = 0, frame = 0
 25675              		@ frame_needed = 0, uses_anonymous_args = 0
 25676              		@ link register save eliminated.
5817:src/xeq.c     **** 	State.entryp = 0;
 25677              		.loc 1 5817 2 view .LVU6685
 25678              	.LBB3471:
 25679              	.LBI3471:
5808:src/xeq.c     **** 	Running = 0;
 25680              		.loc 1 5808 6 view .LVU6686
 25681              	.LBB3472:
5809:src/xeq.c     **** }
 25682              		.loc 1 5809 2 view .LVU6687
 25683              	.LBE3472:
 25684              	.LBE3471:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 25685              		.loc 1 5818 15 is_stmt 0 view .LVU6688
 25686 0000 064B     		ldr	r3, .L1848
 25687              	.LBB3475:
 25688              	.LBB3473:
5809:src/xeq.c     **** }
 25689              		.loc 1 5809 10 view .LVU6689
 25690 0002 074A     		ldr	r2, .L1848+4
 25691              	.LBE3473:
 25692              	.LBE3475:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 25693              		.loc 1 5818 15 view .LVU6690
 25694 0004 1B68     		ldr	r3, [r3]
 25695              	.LBB3476:
 25696              	.LBB3474:
5809:src/xeq.c     **** }
 25697              		.loc 1 5809 10 view .LVU6691
 25698 0006 0021     		movs	r1, #0
 25699 0008 1160     		str	r1, [r2]
 25700              	.LBE3474:
 25701              	.LBE3476:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 25702              		.loc 1 5818 2 is_stmt 1 view .LVU6692
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 25703              		.loc 1 5818 15 is_stmt 0 view .LVU6693
 25704 000a 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 25705 000e 61F30412 		bfi	r2, r1, #4, #1
 25706 0012 83F8DD27 		strb	r2, [r3, #2013]
 25707              		.loc 1 5819 2 is_stmt 1 view .LVU6694
 25708 0016 8A20     		movs	r0, #138
 25709 0018 FFF7FEBF 		b	dot
 25710              	.LVL1975:
 25711              	.L1849:
 25712              		.align	2
 25713              	.L1848:
 25714 001c 00000000 		.word	main_ram
 25715 0020 00000000 		.word	Running
 25716              		.cfi_endproc
 25717              	.LFE262:
 25719              		.section	.text.set_running_on,"ax",%progbits
 25720              		.align	1
ARM GAS  /tmp/ccBFDvgN.s 			page 662


 25721              		.p2align 2,,3
 25722              		.global	set_running_on
 25723              		.syntax unified
 25724              		.thumb
 25725              		.thumb_func
 25726              		.fpu fpv4-sp-d16
 25728              	set_running_on:
 25729              	.LFB263:
5820:src/xeq.c     **** }
5821:src/xeq.c     **** 
5822:src/xeq.c     **** void set_running_on() {
 25730              		.loc 1 5822 23 view -0
 25731              		.cfi_startproc
 25732              		@ args = 0, pretend = 0, frame = 0
 25733              		@ frame_needed = 0, uses_anonymous_args = 0
5823:src/xeq.c     **** 	update_speed(0);
 25734              		.loc 1 5823 17 view .LVU6696
5824:src/xeq.c     **** 	GoFast = 1;
 25735              		.loc 1 5824 2 view .LVU6697
5822:src/xeq.c     **** 	update_speed(0);
 25736              		.loc 1 5822 23 is_stmt 0 view .LVU6698
 25737 0000 38B5     		push	{r3, r4, r5, lr}
 25738              		.cfi_def_cfa_offset 16
 25739              		.cfi_offset 3, -16
 25740              		.cfi_offset 4, -12
 25741              		.cfi_offset 5, -8
 25742              		.cfi_offset 14, -4
 25743              	.LBB3477:
 25744              	.LBB3478:
 186:src/xeq.c     **** }
 25745              		.loc 1 186 9 view .LVU6699
 25746 0002 0C4B     		ldr	r3, .L1856
 25747              	.LBE3478:
 25748              	.LBE3477:
 25749              		.loc 1 5824 9 view .LVU6700
 25750 0004 0C4D     		ldr	r5, .L1856+4
 25751              	.LBB3482:
 25752              	.LBB3479:
 186:src/xeq.c     **** }
 25753              		.loc 1 186 9 view .LVU6701
 25754 0006 1B68     		ldr	r3, [r3]
 25755              	.LBE3479:
 25756              	.LBE3482:
 25757              	.LBB3483:
 25758              	.LBB3484:
5813:src/xeq.c     **** }
 25759              		.loc 1 5813 10 view .LVU6702
 25760 0008 0C4C     		ldr	r4, .L1856+8
 25761              	.LBE3484:
 25762              	.LBE3483:
 25763              	.LBB3486:
 25764              	.LBB3480:
 186:src/xeq.c     **** }
 25765              		.loc 1 186 9 view .LVU6703
 25766 000a B3F8E037 		ldrh	r3, [r3, #2016]
 25767              	.LBE3480:
 25768              	.LBE3486:
ARM GAS  /tmp/ccBFDvgN.s 			page 663


5825:src/xeq.c     **** 	set_running_on_sst();
5826:src/xeq.c     **** 	LastKey = 0;
 25769              		.loc 1 5826 10 view .LVU6704
 25770 000e 0C49     		ldr	r1, .L1856+12
5827:src/xeq.c     **** 	if (!is_xrom())
 25771              		.loc 1 5827 5 view .LVU6705
 25772 0010 9B0B     		lsrs	r3, r3, #14
5824:src/xeq.c     **** 	set_running_on_sst();
 25773              		.loc 1 5824 9 view .LVU6706
 25774 0012 0122     		movs	r2, #1
5826:src/xeq.c     **** 	if (!is_xrom())
 25775              		.loc 1 5826 10 view .LVU6707
 25776 0014 0020     		movs	r0, #0
 25777              		.loc 1 5827 5 view .LVU6708
 25778 0016 032B     		cmp	r3, #3
5824:src/xeq.c     **** 	set_running_on_sst();
 25779              		.loc 1 5824 9 view .LVU6709
 25780 0018 2A60     		str	r2, [r5]
5825:src/xeq.c     **** 	LastKey = 0;
 25781              		.loc 1 5825 2 is_stmt 1 view .LVU6710
 25782              	.LBB3487:
 25783              	.LBI3483:
5812:src/xeq.c     **** 	Running = 1;
 25784              		.loc 1 5812 6 view .LVU6711
 25785              	.LBB3485:
5813:src/xeq.c     **** }
 25786              		.loc 1 5813 2 view .LVU6712
5813:src/xeq.c     **** }
 25787              		.loc 1 5813 10 is_stmt 0 view .LVU6713
 25788 001a 2260     		str	r2, [r4]
 25789              	.LBE3485:
 25790              	.LBE3487:
5826:src/xeq.c     **** 	if (!is_xrom())
 25791              		.loc 1 5826 2 is_stmt 1 view .LVU6714
5826:src/xeq.c     **** 	if (!is_xrom())
 25792              		.loc 1 5826 10 is_stmt 0 view .LVU6715
 25793 001c C874     		strb	r0, [r1, #19]
 25794              		.loc 1 5827 2 is_stmt 1 view .LVU6716
 25795              	.LBB3488:
 25796              	.LBI3477:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 25797              		.loc 1 185 5 view .LVU6717
 25798              	.LBB3481:
 186:src/xeq.c     **** }
 25799              		.loc 1 186 2 view .LVU6718
 25800              	.LBE3481:
 25801              	.LBE3488:
 25802              		.loc 1 5827 5 is_stmt 0 view .LVU6719
 25803 001e 01D0     		beq	.L1851
5828:src/xeq.c     **** 		error_message(ERR_NONE);
 25804              		.loc 1 5828 3 is_stmt 1 view .LVU6720
 25805 0020 FFF7FEFF 		bl	error_message
 25806              	.LVL1976:
 25807              	.L1851:
5829:src/xeq.c     **** 	dot(BEG, 0);
 25808              		.loc 1 5829 2 view .LVU6721
 25809 0024 0021     		movs	r1, #0
ARM GAS  /tmp/ccBFDvgN.s 			page 664


 25810 0026 8820     		movs	r0, #136
 25811 0028 FFF7FEFF 		bl	dot
 25812              	.LVL1977:
5830:src/xeq.c     **** 	finish_display(); // BEG
 25813              		.loc 1 5830 2 view .LVU6722
5831:src/xeq.c     **** }
 25814              		.loc 1 5831 1 is_stmt 0 view .LVU6723
 25815 002c BDE83840 		pop	{r3, r4, r5, lr}
 25816              		.cfi_restore 14
 25817              		.cfi_restore 5
 25818              		.cfi_restore 4
 25819              		.cfi_restore 3
 25820              		.cfi_def_cfa_offset 0
5830:src/xeq.c     **** 	finish_display(); // BEG
 25821              		.loc 1 5830 2 view .LVU6724
 25822 0030 FFF7FEBF 		b	finish_display
 25823              	.LVL1978:
 25824              	.L1857:
 25825              		.align	2
 25826              	.L1856:
 25827 0034 00000000 		.word	main_ram
 25828 0038 00000000 		.word	GoFast
 25829 003c 00000000 		.word	Running
 25830 0040 00000000 		.word	StateWhileOn
 25831              		.cfi_endproc
 25832              	.LFE263:
 25834              		.section	.text.gsbgto,"ax",%progbits
 25835              		.align	1
 25836              		.p2align 2,,3
 25837              		.syntax unified
 25838              		.thumb
 25839              		.thumb_func
 25840              		.fpu fpv4-sp-d16
 25842              	gsbgto:
 25843              	.LVL1979:
 25844              	.LFB153:
2222:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25845              		.loc 1 2222 66 is_stmt 1 view -0
 25846              		.cfi_startproc
 25847              		@ args = 0, pretend = 0, frame = 0
 25848              		@ frame_needed = 0, uses_anonymous_args = 0
2223:src/xeq.c     **** 	raw_set_pc(pc);
 25849              		.loc 1 2223 2 view .LVU6726
2222:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25850              		.loc 1 2222 66 is_stmt 0 view .LVU6727
 25851 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25852              		.cfi_def_cfa_offset 24
 25853              		.cfi_offset 4, -24
 25854              		.cfi_offset 5, -20
 25855              		.cfi_offset 6, -16
 25856              		.cfi_offset 7, -12
 25857              		.cfi_offset 8, -8
 25858              		.cfi_offset 14, -4
2223:src/xeq.c     **** 	raw_set_pc(pc);
 25859              		.loc 1 2223 39 view .LVU6728
 25860 0004 214F     		ldr	r7, .L1869
 25861 0006 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccBFDvgN.s 			page 665


2222:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25862              		.loc 1 2222 66 view .LVU6729
 25863 0008 0446     		mov	r4, r0
 25864 000a 0D46     		mov	r5, r1
 25865              	.LBB3497:
 25866              	.LBB3498:
 283:src/xeq.c     **** 	update_program_bounds(0);
 25867              		.loc 1 283 11 view .LVU6730
 25868 000c A3F8E007 		strh	r0, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 25869              		.loc 1 284 2 view .LVU6731
 25870 0010 0020     		movs	r0, #0
 25871              	.LVL1980:
 284:src/xeq.c     **** }
 25872              		.loc 1 284 2 view .LVU6732
 25873              	.LBE3498:
 25874              	.LBE3497:
2223:src/xeq.c     **** 	raw_set_pc(pc);
 25875              		.loc 1 2223 27 view .LVU6733
 25876 0012 B3F8EC87 		ldrh	r8, [r3, #2028]
 25877              	.LVL1981:
2224:src/xeq.c     **** 	if (gsb) {
 25878              		.loc 1 2224 2 is_stmt 1 view .LVU6734
 25879              	.LBB3501:
 25880              	.LBI3497:
 282:src/xeq.c     **** 	State.pc = pc;
 25881              		.loc 1 282 13 view .LVU6735
 25882              	.LBB3499:
 283:src/xeq.c     **** 	update_program_bounds(0);
 25883              		.loc 1 283 2 view .LVU6736
 284:src/xeq.c     **** }
 25884              		.loc 1 284 2 view .LVU6737
 25885              	.LBE3499:
 25886              	.LBE3501:
2222:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25887              		.loc 1 2222 66 is_stmt 0 view .LVU6738
 25888 0016 1646     		mov	r6, r2
 25889              	.LBB3502:
 25890              	.LBB3500:
 284:src/xeq.c     **** }
 25891              		.loc 1 284 2 view .LVU6739
 25892 0018 FFF7FEFF 		bl	update_program_bounds
 25893              	.LVL1982:
 284:src/xeq.c     **** }
 25894              		.loc 1 284 2 view .LVU6740
 25895              	.LBE3500:
 25896              	.LBE3502:
2225:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25897              		.loc 1 2225 2 is_stmt 1 view .LVU6741
2225:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25898              		.loc 1 2225 5 is_stmt 0 view .LVU6742
 25899 001c D5B1     		cbz	r5, .L1858
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25900              		.loc 1 2226 3 is_stmt 1 view .LVU6743
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25901              		.loc 1 2226 7 is_stmt 0 view .LVU6744
 25902 001e 1C4B     		ldr	r3, .L1869+4
ARM GAS  /tmp/ccBFDvgN.s 			page 666


2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25903              		.loc 1 2226 19 view .LVU6745
 25904 0020 1C4A     		ldr	r2, .L1869+8
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25905              		.loc 1 2226 16 view .LVU6746
 25906 0022 1B68     		ldr	r3, [r3]
 25907 0024 1268     		ldr	r2, [r2]
 25908 0026 1343     		orrs	r3, r3, r2
 25909              	.LBB3503:
 25910              	.LBB3504:
1607:src/xeq.c     **** }
 25911              		.loc 1 1607 14 view .LVU6747
 25912 0028 3A68     		ldr	r2, [r7]
 25913              	.LBE3504:
 25914              	.LBE3503:
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25915              		.loc 1 2226 16 view .LVU6748
 25916 002a 1FD0     		beq	.L1861
 25917              	.LVL1983:
 25918              	.L1862:
2234:src/xeq.c     **** 			// Stack is full
 25919              		.loc 1 2234 3 is_stmt 1 view .LVU6749
2234:src/xeq.c     **** 			// Stack is full
 25920              		.loc 1 2234 36 is_stmt 0 view .LVU6750
 25921 002c 1A49     		ldr	r1, .L1869+12
2234:src/xeq.c     **** 			// Stack is full
 25922              		.loc 1 2234 8 view .LVU6751
 25923 002e B2F9E237 		ldrsh	r3, [r2, #2018]
2234:src/xeq.c     **** 			// Stack is full
 25924              		.loc 1 2234 58 view .LVU6752
 25925 0032 91F90110 		ldrsb	r1, [r1, #1]
 25926 0036 0029     		cmp	r1, #0
 25927 0038 A4BF     		itt	ge
 25928 003a 1849     		ldrge	r1, .L1869+16
 25929 003c 0968     		ldrge	r1, [r1]
2234:src/xeq.c     **** 			// Stack is full
 25930              		.loc 1 2234 7 view .LVU6753
 25931 003e C3F10000 		rsb	r0, r3, #0
2234:src/xeq.c     **** 			// Stack is full
 25932              		.loc 1 2234 58 view .LVU6754
 25933 0042 B8BF     		it	lt
 25934 0044 8821     		movlt	r1, #136
2234:src/xeq.c     **** 			// Stack is full
 25935              		.loc 1 2234 6 view .LVU6755
 25936 0046 8842     		cmp	r0, r1
 25937 0048 06DB     		blt	.L1865
2236:src/xeq.c     **** 			// clrretstk();
 25938              		.loc 1 2236 4 is_stmt 1 view .LVU6756
 25939              	.LVL1984:
 25940              	.LBB3506:
 25941              	.LBI3506:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25942              		.loc 1 546 5 view .LVU6757
 25943              	.LBB3507:
 547:src/xeq.c     **** 		Error = e;
 25944              		.loc 1 547 2 view .LVU6758
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccBFDvgN.s 			page 667


 25945              		.loc 1 547 12 is_stmt 0 view .LVU6759
 25946 004a 154B     		ldr	r3, .L1869+20
 547:src/xeq.c     **** 		Error = e;
 25947              		.loc 1 547 5 view .LVU6760
 25948 004c 1A68     		ldr	r2, [r3]
 25949 004e 0AB9     		cbnz	r2, .L1858
 25950              	.LVL1985:
 25951              	.LBB3508:
 25952              	.LBI3508:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25953              		.loc 1 546 5 is_stmt 1 view .LVU6761
 25954              	.LBB3509:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25955              		.loc 1 548 3 view .LVU6762
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25956              		.loc 1 548 9 is_stmt 0 view .LVU6763
 25957 0050 0B22     		movs	r2, #11
 25958 0052 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25959              		.loc 1 549 3 is_stmt 1 view .LVU6764
 25960              	.LVL1986:
 25961              	.L1858:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25962              		.loc 1 549 3 is_stmt 0 view .LVU6765
 25963              	.LBE3509:
 25964              	.LBE3508:
 25965              	.LBE3507:
 25966              	.LBE3506:
2244:src/xeq.c     **** 
 25967              		.loc 1 2244 1 view .LVU6766
 25968 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25969              	.LVL1987:
 25970              	.L1865:
2241:src/xeq.c     **** 		}
 25971              		.loc 1 2241 4 is_stmt 1 view .LVU6767
2241:src/xeq.c     **** 		}
 25972              		.loc 1 2241 10 is_stmt 0 view .LVU6768
 25973 0058 1249     		ldr	r1, .L1869+24
2241:src/xeq.c     **** 		}
 25974              		.loc 1 2241 11 view .LVU6769
 25975 005a 013B     		subs	r3, r3, #1
 25976 005c 1BB2     		sxth	r3, r3
2241:src/xeq.c     **** 		}
 25977              		.loc 1 2241 10 view .LVU6770
 25978 005e 0968     		ldr	r1, [r1]
2241:src/xeq.c     **** 		}
 25979              		.loc 1 2241 24 view .LVU6771
 25980 0060 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25981 0064 21F81360 		strh	r6, [r1, r3, lsl #1]	@ movhi
2244:src/xeq.c     **** 
 25982              		.loc 1 2244 1 view .LVU6772
 25983 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25984              	.LVL1988:
 25985              	.L1861:
2228:src/xeq.c     **** 			set_running_on();
 25986              		.loc 1 2228 4 is_stmt 1 view .LVU6773
 25987              	.LBB3510:
ARM GAS  /tmp/ccBFDvgN.s 			page 668


 25988              	.LBI3503:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 25989              		.loc 1 1606 6 view .LVU6774
 25990              	.LBB3505:
1607:src/xeq.c     **** }
 25991              		.loc 1 1607 2 view .LVU6775
1607:src/xeq.c     **** }
 25992              		.loc 1 1607 24 is_stmt 0 view .LVU6776
 25993 006c A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1607:src/xeq.c     **** }
 25994              		.loc 1 1607 12 view .LVU6777
 25995 0070 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25996              	.LBE3505:
 25997              	.LBE3510:
2229:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 25998              		.loc 1 2229 4 is_stmt 1 view .LVU6778
 25999 0074 FFF7FEFF 		bl	set_running_on
 26000              	.LVL1989:
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26001              		.loc 1 2230 4 view .LVU6779
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26002              		.loc 1 2230 10 is_stmt 0 view .LVU6780
 26003 0078 A30B     		lsrs	r3, r4, #14
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26004              		.loc 1 2230 7 view .LVU6781
 26005 007a 032B     		cmp	r3, #3
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26006              		.loc 1 2230 24 view .LVU6782
 26007 007c 3A68     		ldr	r2, [r7]
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26008              		.loc 1 2230 7 view .LVU6783
 26009 007e D5D0     		beq	.L1862
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26010              		.loc 1 2230 21 discriminator 1 view .LVU6784
 26011 0080 B2F8EC37 		ldrh	r3, [r2, #2028]
 26012 0084 4345     		cmp	r3, r8
 26013 0086 18BF     		it	ne
 26014 0088 2646     		movne	r6, r4
 26015              	.LVL1990:
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26016              		.loc 1 2230 21 discriminator 1 view .LVU6785
 26017 008a CFE7     		b	.L1862
 26018              	.L1870:
 26019              		.align	2
 26020              	.L1869:
 26021 008c 00000000 		.word	main_ram
 26022 0090 00000000 		.word	Running
 26023 0094 00000000 		.word	XromRunning
 26024 0098 00000000 		.word	XromParams
 26025 009c 00000000 		.word	RetStkSize
 26026 00a0 00000000 		.word	Error
 26027 00a4 00000000 		.word	RetStk
 26028              		.cfi_endproc
 26029              	.LFE153:
 26031              		.section	.text.cmdgtocommon,"ax",%progbits
 26032              		.align	1
 26033              		.p2align 2,,3
ARM GAS  /tmp/ccBFDvgN.s 			page 669


 26034              		.global	cmdgtocommon
 26035              		.syntax unified
 26036              		.thumb
 26037              		.thumb_func
 26038              		.fpu fpv4-sp-d16
 26040              	cmdgtocommon:
 26041              	.LVL1991:
 26042              	.LFB156:
2284:src/xeq.c     **** 	if (pc == 0)
 26043              		.loc 1 2284 45 is_stmt 1 view -0
 26044              		.cfi_startproc
 26045              		@ args = 0, pretend = 0, frame = 0
 26046              		@ frame_needed = 0, uses_anonymous_args = 0
 26047              		@ link register save eliminated.
2285:src/xeq.c     **** 		set_running_off();
 26048              		.loc 1 2285 2 view .LVU6787
 26049              	.LBB3517:
 26050              	.LBB3518:
 26051              	.LBB3519:
 26052              	.LBB3520:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 26053              		.loc 1 5818 15 is_stmt 0 view .LVU6788
 26054 0000 0A4A     		ldr	r2, .L1873
 26055              	.LBE3520:
 26056              	.LBE3519:
 26057              	.LBE3518:
 26058              	.LBE3517:
2285:src/xeq.c     **** 		set_running_off();
 26059              		.loc 1 2285 5 view .LVU6789
 26060 0002 0B46     		mov	r3, r1
 26061 0004 59B9     		cbnz	r1, .L1872
 26062              	.LBB3528:
 26063              	.LBI3517:
2284:src/xeq.c     **** 	if (pc == 0)
 26064              		.loc 1 2284 6 is_stmt 1 view .LVU6790
 26065              	.LVL1992:
 26066              	.LBB3527:
2286:src/xeq.c     **** 	else
 26067              		.loc 1 2286 3 view .LVU6791
 26068              	.LBB3526:
 26069              	.LBI3519:
5816:src/xeq.c     **** 	set_running_off_sst();
 26070              		.loc 1 5816 6 view .LVU6792
 26071              	.LBB3525:
5817:src/xeq.c     **** 	State.entryp = 0;
 26072              		.loc 1 5817 2 view .LVU6793
 26073              	.LBB3521:
 26074              	.LBI3521:
5808:src/xeq.c     **** 	Running = 0;
 26075              		.loc 1 5808 6 view .LVU6794
 26076              	.LBB3522:
5809:src/xeq.c     **** }
 26077              		.loc 1 5809 2 view .LVU6795
5809:src/xeq.c     **** }
 26078              		.loc 1 5809 10 is_stmt 0 view .LVU6796
 26079 0006 0A48     		ldr	r0, .L1873+4
 26080              	.LVL1993:
ARM GAS  /tmp/ccBFDvgN.s 			page 670


5809:src/xeq.c     **** }
 26081              		.loc 1 5809 10 view .LVU6797
 26082              	.LBE3522:
 26083              	.LBE3521:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 26084              		.loc 1 5818 15 view .LVU6798
 26085 0008 1268     		ldr	r2, [r2]
 26086              	.LBB3524:
 26087              	.LBB3523:
5809:src/xeq.c     **** }
 26088              		.loc 1 5809 10 view .LVU6799
 26089 000a 0160     		str	r1, [r0]
 26090              	.LBE3523:
 26091              	.LBE3524:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 26092              		.loc 1 5818 2 is_stmt 1 view .LVU6800
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 26093              		.loc 1 5818 15 is_stmt 0 view .LVU6801
 26094 000c 92F8DD07 		ldrb	r0, [r2, #2013]	@ zero_extendqisi2
 26095 0010 61F30410 		bfi	r0, r1, #4, #1
 26096              	.LVL1994:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 26097              		.loc 1 5818 15 view .LVU6802
 26098 0014 82F8DD07 		strb	r0, [r2, #2013]
5819:src/xeq.c     **** }
 26099              		.loc 1 5819 2 is_stmt 1 view .LVU6803
 26100 0018 8A20     		movs	r0, #138
 26101 001a FFF7FEBF 		b	dot
 26102              	.LVL1995:
 26103              	.L1872:
5819:src/xeq.c     **** }
 26104              		.loc 1 5819 2 is_stmt 0 view .LVU6804
 26105              	.LBE3525:
 26106              	.LBE3526:
 26107              	.LBE3527:
 26108              	.LBE3528:
2288:src/xeq.c     **** }
 26109              		.loc 1 2288 3 is_stmt 1 view .LVU6805
2288:src/xeq.c     **** }
 26110              		.loc 1 2288 19 is_stmt 0 view .LVU6806
 26111 001e 1268     		ldr	r2, [r2]
2288:src/xeq.c     **** }
 26112              		.loc 1 2288 3 view .LVU6807
 26113 0020 0146     		mov	r1, r0
 26114              	.LVL1996:
2288:src/xeq.c     **** }
 26115              		.loc 1 2288 3 view .LVU6808
 26116 0022 B2F8E027 		ldrh	r2, [r2, #2016]
 26117 0026 1846     		mov	r0, r3
 26118              	.LVL1997:
2288:src/xeq.c     **** }
 26119              		.loc 1 2288 3 view .LVU6809
 26120 0028 FFF7FEBF 		b	gsbgto
 26121              	.LVL1998:
 26122              	.L1874:
2288:src/xeq.c     **** }
 26123              		.loc 1 2288 3 view .LVU6810
ARM GAS  /tmp/ccBFDvgN.s 			page 671


 26124              		.align	2
 26125              	.L1873:
 26126 002c 00000000 		.word	main_ram
 26127 0030 00000000 		.word	Running
 26128              		.cfi_endproc
 26129              	.LFE156:
 26131              		.section	.text.cmdgto,"ax",%progbits
 26132              		.align	1
 26133              		.p2align 2,,3
 26134              		.global	cmdgto
 26135              		.syntax unified
 26136              		.thumb
 26137              		.thumb_func
 26138              		.fpu fpv4-sp-d16
 26140              	cmdgto:
 26141              	.LVL1999:
 26142              	.LFB162:
2344:src/xeq.c     **** 	unsigned int lbl;
 26143              		.loc 1 2344 45 is_stmt 1 view -0
 26144              		.cfi_startproc
 26145              		@ args = 0, pretend = 0, frame = 0
 26146              		@ frame_needed = 0, uses_anonymous_args = 0
2345:src/xeq.c     **** 	if (is_xrom())
 26147              		.loc 1 2345 2 view .LVU6812
2346:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26148              		.loc 1 2346 2 view .LVU6813
 26149              	.LBB3529:
 26150              	.LBI3529:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 26151              		.loc 1 185 5 view .LVU6814
 26152              	.LBB3530:
 186:src/xeq.c     **** }
 26153              		.loc 1 186 2 view .LVU6815
 186:src/xeq.c     **** }
 26154              		.loc 1 186 9 is_stmt 0 view .LVU6816
 26155 0000 0E4B     		ldr	r3, .L1879
 26156 0002 1B68     		ldr	r3, [r3]
 26157 0004 B3F8E037 		ldrh	r3, [r3, #2016]
 26158              	.LBE3530:
 26159              	.LBE3529:
2346:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26160              		.loc 1 2346 5 view .LVU6817
 26161 0008 9A0B     		lsrs	r2, r3, #14
 26162 000a 032A     		cmp	r2, #3
2344:src/xeq.c     **** 	unsigned int lbl;
 26163              		.loc 1 2344 45 view .LVU6818
 26164 000c 10B5     		push	{r4, lr}
 26165              		.cfi_def_cfa_offset 8
 26166              		.cfi_offset 4, -8
 26167              		.cfi_offset 14, -4
2344:src/xeq.c     **** 	unsigned int lbl;
 26168              		.loc 1 2344 45 view .LVU6819
 26169 000e 0C46     		mov	r4, r1
2346:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26170              		.loc 1 2346 5 view .LVU6820
 26171 0010 0CD1     		bne	.L1876
2347:src/xeq.c     **** 	else
ARM GAS  /tmp/ccBFDvgN.s 			page 672


 26172              		.loc 1 2347 3 is_stmt 1 view .LVU6821
2347:src/xeq.c     **** 	else
 26173              		.loc 1 2347 9 is_stmt 0 view .LVU6822
 26174 0012 0B4B     		ldr	r3, .L1879+4
2347:src/xeq.c     **** 	else
 26175              		.loc 1 2347 37 view .LVU6823
 26176 0014 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 26177              	.LVL2000:
2347:src/xeq.c     **** 	else
 26178              		.loc 1 2347 7 view .LVU6824
 26179 0018 41F44041 		orr	r1, r1, #49152
 26180              	.LVL2001:
 26181              	.L1877:
2350:src/xeq.c     **** }
 26182              		.loc 1 2350 2 is_stmt 1 view .LVU6825
 26183 001c B4F14500 		subs	r0, r4, #69
 26184 0020 18BF     		it	ne
 26185 0022 0120     		movne	r0, #1
2351:src/xeq.c     **** 
 26186              		.loc 1 2351 1 is_stmt 0 view .LVU6826
 26187 0024 BDE81040 		pop	{r4, lr}
 26188              		.cfi_remember_state
 26189              		.cfi_restore 14
 26190              		.cfi_restore 4
 26191              		.cfi_def_cfa_offset 0
2350:src/xeq.c     **** }
 26192              		.loc 1 2350 2 view .LVU6827
 26193 0028 FFF7FEBF 		b	cmdgtocommon
 26194              	.LVL2002:
 26195              	.L1876:
 26196              		.cfi_restore_state
2349:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
 26197              		.loc 1 2349 3 is_stmt 1 view .LVU6828
 26198              	.LBB3531:
 26199              	.LBI3531:
2214:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 26200              		.loc 1 2214 14 view .LVU6829
 26201              	.LBB3532:
2215:src/xeq.c     **** }
 26202              		.loc 1 2215 2 view .LVU6830
2215:src/xeq.c     **** }
 26203              		.loc 1 2215 9 is_stmt 0 view .LVU6831
 26204 002c 40F4C441 		orr	r1, r0, #25088
 26205              	.LVL2003:
2215:src/xeq.c     **** }
 26206              		.loc 1 2215 9 view .LVU6832
 26207 0030 0322     		movs	r2, #3
 26208 0032 1846     		mov	r0, r3
 26209              	.LVL2004:
2215:src/xeq.c     **** }
 26210              		.loc 1 2215 9 view .LVU6833
 26211 0034 FFF7FEFF 		bl	find_opcode_from
 26212              	.LVL2005:
2215:src/xeq.c     **** }
 26213              		.loc 1 2215 9 view .LVU6834
 26214 0038 0146     		mov	r1, r0
 26215              	.LVL2006:
ARM GAS  /tmp/ccBFDvgN.s 			page 673


2215:src/xeq.c     **** }
 26216              		.loc 1 2215 9 view .LVU6835
 26217 003a EFE7     		b	.L1877
 26218              	.L1880:
 26219              		.align	2
 26220              	.L1879:
 26221 003c 00000000 		.word	main_ram
 26222 0040 00000000 		.word	.LANCHOR6
 26223              	.LBE3532:
 26224              	.LBE3531:
 26225              		.cfi_endproc
 26226              	.LFE162:
 26228              		.section	.text.branchtoalpha,"ax",%progbits
 26229              		.align	1
 26230              		.p2align 2,,3
 26231              		.syntax unified
 26232              		.thumb
 26233              		.thumb_func
 26234              		.fpu fpv4-sp-d16
 26236              	branchtoalpha:
 26237              	.LVL2007:
 26238              	.LFB167:
2393:src/xeq.c     **** 	unsigned int op;
 26239              		.loc 1 2393 51 is_stmt 1 view -0
 26240              		.cfi_startproc
 26241              		@ args = 0, pretend = 0, frame = 0
 26242              		@ frame_needed = 0, uses_anonymous_args = 0
2394:src/xeq.c     **** 
 26243              		.loc 1 2394 2 view .LVU6837
2396:src/xeq.c     **** 	op |= buf[0] & 0xff;
 26244              		.loc 1 2396 2 view .LVU6838
2397:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 26245              		.loc 1 2397 2 view .LVU6839
2398:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 26246              		.loc 1 2398 2 view .LVU6840
2399:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26247              		.loc 1 2399 2 view .LVU6841
2400:src/xeq.c     **** }
 26248              		.loc 1 2400 2 view .LVU6842
2393:src/xeq.c     **** 	unsigned int op;
 26249              		.loc 1 2393 51 is_stmt 0 view .LVU6843
 26250 0000 10B5     		push	{r4, lr}
 26251              		.cfi_def_cfa_offset 8
 26252              		.cfi_offset 4, -8
 26253              		.cfi_offset 14, -4
2399:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26254              		.loc 1 2399 16 view .LVU6844
 26255 0002 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
2398:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 26256              		.loc 1 2398 16 view .LVU6845
 26257 0004 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
2397:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 26258              		.loc 1 2397 15 view .LVU6846
 26259 0006 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
2399:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26260              		.loc 1 2399 24 view .LVU6847
 26261 0008 1B06     		lsls	r3, r3, #24
ARM GAS  /tmp/ccBFDvgN.s 			page 674


2399:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26262              		.loc 1 2399 5 view .LVU6848
 26263 000a 43EA0443 		orr	r3, r3, r4, lsl #16
 26264 000e 1343     		orrs	r3, r3, r2
2393:src/xeq.c     **** 	unsigned int op;
 26265              		.loc 1 2393 51 view .LVU6849
 26266 0010 0446     		mov	r4, r0
2400:src/xeq.c     **** }
 26267              		.loc 1 2400 2 view .LVU6850
 26268 0012 0121     		movs	r1, #1
 26269              	.LVL2008:
2400:src/xeq.c     **** }
 26270              		.loc 1 2400 2 view .LVU6851
 26271 0014 43F47040 		orr	r0, r3, #61440
 26272              	.LVL2009:
2400:src/xeq.c     **** }
 26273              		.loc 1 2400 2 view .LVU6852
 26274 0018 FFF7FEFF 		bl	findmultilbl
 26275              	.LVL2010:
2400:src/xeq.c     **** }
 26276              		.loc 1 2400 2 view .LVU6853
 26277 001c 0146     		mov	r1, r0
 26278 001e 2046     		mov	r0, r4
2401:src/xeq.c     **** 
 26279              		.loc 1 2401 1 view .LVU6854
 26280 0020 BDE81040 		pop	{r4, lr}
 26281              		.cfi_restore 14
 26282              		.cfi_restore 4
 26283              		.cfi_def_cfa_offset 0
 26284              	.LVL2011:
2400:src/xeq.c     **** }
 26285              		.loc 1 2400 2 view .LVU6855
 26286 0024 FFF7FEBF 		b	cmdgtocommon
 26287              	.LVL2012:
2400:src/xeq.c     **** }
 26288              		.loc 1 2400 2 view .LVU6856
 26289              		.cfi_endproc
 26290              	.LFE167:
 26292              		.section	.text.cmdalphagto,"ax",%progbits
 26293              		.align	1
 26294              		.p2align 2,,3
 26295              		.global	cmdalphagto
 26296              		.syntax unified
 26297              		.thumb
 26298              		.thumb_func
 26299              		.fpu fpv4-sp-d16
 26301              	cmdalphagto:
 26302              	.LVL2013:
 26303              	.LFB168:
2403:src/xeq.c     **** 	char buf[14];
 26304              		.loc 1 2403 50 is_stmt 1 view -0
 26305              		.cfi_startproc
 26306              		@ args = 0, pretend = 0, frame = 16
 26307              		@ frame_needed = 0, uses_anonymous_args = 0
2404:src/xeq.c     **** 
 26308              		.loc 1 2404 2 view .LVU6858
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
ARM GAS  /tmp/ccBFDvgN.s 			page 675


 26309              		.loc 1 2406 2 view .LVU6859
2403:src/xeq.c     **** 	char buf[14];
 26310              		.loc 1 2403 50 is_stmt 0 view .LVU6860
 26311 0000 30B5     		push	{r4, r5, lr}
 26312              		.cfi_def_cfa_offset 12
 26313              		.cfi_offset 4, -12
 26314              		.cfi_offset 5, -8
 26315              		.cfi_offset 14, -4
 26316 0002 85B0     		sub	sp, sp, #20
 26317              		.cfi_def_cfa_offset 32
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26318              		.loc 1 2406 2 view .LVU6861
 26319 0004 0E22     		movs	r2, #14
2403:src/xeq.c     **** 	char buf[14];
 26320              		.loc 1 2403 50 view .LVU6862
 26321 0006 0546     		mov	r5, r0
 26322 0008 0C46     		mov	r4, r1
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26323              		.loc 1 2406 2 view .LVU6863
 26324 000a 6846     		mov	r0, sp
 26325              	.LVL2014:
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26326              		.loc 1 2406 2 view .LVU6864
 26327 000c 0021     		movs	r1, #0
 26328              	.LVL2015:
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26329              		.loc 1 2406 2 view .LVU6865
 26330 000e FFF7FEFF 		bl	xset
 26331              	.LVL2016:
2407:src/xeq.c     **** }
 26332              		.loc 1 2407 2 is_stmt 1 view .LVU6866
 26333 0012 6946     		mov	r1, sp
 26334 0014 2846     		mov	r0, r5
 26335 0016 FFF7FEFF 		bl	alpha_rcl_s
 26336              	.LVL2017:
 26337 001a 0146     		mov	r1, r0
 26338 001c B4F17000 		subs	r0, r4, #112
 26339 0020 18BF     		it	ne
 26340 0022 0120     		movne	r0, #1
 26341 0024 FFF7FEFF 		bl	branchtoalpha
 26342              	.LVL2018:
2408:src/xeq.c     **** 
 26343              		.loc 1 2408 1 is_stmt 0 view .LVU6867
 26344 0028 05B0     		add	sp, sp, #20
 26345              		.cfi_def_cfa_offset 12
 26346              		@ sp needed
 26347 002a 30BD     		pop	{r4, r5, pc}
2408:src/xeq.c     **** 
 26348              		.loc 1 2408 1 view .LVU6868
 26349              		.cfi_endproc
 26350              	.LFE168:
 26352              		.section	.text.op_gtoalpha,"ax",%progbits
 26353              		.align	1
 26354              		.p2align 2,,3
 26355              		.global	op_gtoalpha
 26356              		.syntax unified
 26357              		.thumb
ARM GAS  /tmp/ccBFDvgN.s 			page 676


 26358              		.thumb_func
 26359              		.fpu fpv4-sp-d16
 26361              	op_gtoalpha:
 26362              	.LVL2019:
 26363              	.LFB170:
2418:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26364              		.loc 1 2418 33 is_stmt 1 view -0
 26365              		.cfi_startproc
 26366              		@ args = 0, pretend = 0, frame = 8
 26367              		@ frame_needed = 0, uses_anonymous_args = 0
2419:src/xeq.c     **** }
 26368              		.loc 1 2419 2 view .LVU6870
2418:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26369              		.loc 1 2418 33 is_stmt 0 view .LVU6871
 26370 0000 10B5     		push	{r4, lr}
 26371              		.cfi_def_cfa_offset 8
 26372              		.cfi_offset 4, -8
 26373              		.cfi_offset 14, -4
 26374              	.LBB3535:
 26375              	.LBB3536:
2413:src/xeq.c     **** 	buf[3] = '\0';
 26376              		.loc 1 2413 13 view .LVU6872
 26377 0002 0B4B     		ldr	r3, .L1887
 26378 0004 1968     		ldr	r1, [r3]
 26379              	.LBE3536:
 26380              	.LBE3535:
2418:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26381              		.loc 1 2418 33 view .LVU6873
 26382 0006 82B0     		sub	sp, sp, #8
 26383              		.cfi_def_cfa_offset 16
2418:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26384              		.loc 1 2418 33 view .LVU6874
 26385 0008 0446     		mov	r4, r0
 26386              	.LVL2020:
 26387              	.LBB3538:
 26388              	.LBI3535:
2410:src/xeq.c     **** 	char buf[4];
 26389              		.loc 1 2410 13 is_stmt 1 view .LVU6875
 26390              	.LBB3537:
2411:src/xeq.c     **** 
 26391              		.loc 1 2411 2 view .LVU6876
2413:src/xeq.c     **** 	buf[3] = '\0';
 26392              		.loc 1 2413 2 view .LVU6877
 26393 000a 0322     		movs	r2, #3
 26394 000c 01F5F661 		add	r1, r1, #1968
 26395 0010 01A8     		add	r0, sp, #4
 26396              	.LVL2021:
2413:src/xeq.c     **** 	buf[3] = '\0';
 26397              		.loc 1 2413 2 is_stmt 0 view .LVU6878
 26398 0012 FFF7FEFF 		bl	xcopy
 26399              	.LVL2022:
2414:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26400              		.loc 1 2414 2 is_stmt 1 view .LVU6879
2415:src/xeq.c     **** }
 26401              		.loc 1 2415 2 is_stmt 0 view .LVU6880
 26402 0016 B4F19800 		subs	r0, r4, #152
2414:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
ARM GAS  /tmp/ccBFDvgN.s 			page 677


 26403              		.loc 1 2414 9 view .LVU6881
 26404 001a 4FF00003 		mov	r3, #0
2415:src/xeq.c     **** }
 26405              		.loc 1 2415 2 view .LVU6882
 26406 001e 18BF     		it	ne
 26407 0020 0120     		movne	r0, #1
 26408 0022 01A9     		add	r1, sp, #4
2414:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26409              		.loc 1 2414 9 view .LVU6883
 26410 0024 8DF80730 		strb	r3, [sp, #7]
2415:src/xeq.c     **** }
 26411              		.loc 1 2415 2 is_stmt 1 view .LVU6884
 26412 0028 FFF7FEFF 		bl	branchtoalpha
 26413              	.LVL2023:
2415:src/xeq.c     **** }
 26414              		.loc 1 2415 2 is_stmt 0 view .LVU6885
 26415              	.LBE3537:
 26416              	.LBE3538:
2420:src/xeq.c     **** 
 26417              		.loc 1 2420 1 view .LVU6886
 26418 002c 02B0     		add	sp, sp, #8
 26419              		.cfi_def_cfa_offset 8
 26420              		@ sp needed
 26421 002e 10BD     		pop	{r4, pc}
 26422              	.L1888:
 26423              		.align	2
 26424              	.L1887:
 26425 0030 00000000 		.word	main_ram
 26426              		.cfi_endproc
 26427              	.LFE170:
 26429              		.section	.text.cmdskip,"ax",%progbits
 26430              		.align	1
 26431              		.p2align 2,,3
 26432              		.global	cmdskip
 26433              		.syntax unified
 26434              		.thumb
 26435              		.thumb_func
 26436              		.fpu fpv4-sp-d16
 26438              	cmdskip:
 26439              	.LVL2024:
 26440              	.LFB183:
2594:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26441              		.loc 1 2594 46 is_stmt 1 view -0
 26442              		.cfi_startproc
 26443              		@ args = 0, pretend = 0, frame = 8
 26444              		@ frame_needed = 0, uses_anonymous_args = 0
2595:src/xeq.c     **** 	unsigned int pc;
 26445              		.loc 1 2595 2 view .LVU6888
2594:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26446              		.loc 1 2594 46 is_stmt 0 view .LVU6889
 26447 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 26448              		.cfi_def_cfa_offset 20
 26449              		.cfi_offset 4, -20
 26450              		.cfi_offset 5, -16
 26451              		.cfi_offset 6, -12
 26452              		.cfi_offset 7, -8
 26453              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBFDvgN.s 			page 678


2595:src/xeq.c     **** 	unsigned int pc;
 26454              		.loc 1 2595 30 view .LVU6890
 26455 0002 1D4F     		ldr	r7, .L1913
 26456 0004 3B68     		ldr	r3, [r7]
2598:src/xeq.c     **** 		int sgn;
 26457              		.loc 1 2598 5 view .LVU6891
 26458 0006 8B29     		cmp	r1, #139
2595:src/xeq.c     **** 	unsigned int pc;
 26459              		.loc 1 2595 21 view .LVU6892
 26460 0008 B3F8E067 		ldrh	r6, [r3, #2016]
 26461              	.LVL2025:
2596:src/xeq.c     **** 
 26462              		.loc 1 2596 2 is_stmt 1 view .LVU6893
2598:src/xeq.c     **** 		int sgn;
 26463              		.loc 1 2598 2 view .LVU6894
2594:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26464              		.loc 1 2594 46 is_stmt 0 view .LVU6895
 26465 000c 83B0     		sub	sp, sp, #12
 26466              		.cfi_def_cfa_offset 32
2594:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26467              		.loc 1 2594 46 view .LVU6896
 26468 000e 0D46     		mov	r5, r1
2598:src/xeq.c     **** 		int sgn;
 26469              		.loc 1 2598 5 view .LVU6897
 26470 0010 22D0     		beq	.L1910
 26471 0012 0446     		mov	r4, r0
 26472              	.LVL2026:
 26473              	.L1890:
2607:src/xeq.c     **** 		pc = origpc + arg;
 26474              		.loc 1 2607 2 is_stmt 1 view .LVU6898
2607:src/xeq.c     **** 		pc = origpc + arg;
 26475              		.loc 1 2607 6 is_stmt 0 view .LVU6899
 26476 0014 B30B     		lsrs	r3, r6, #14
2607:src/xeq.c     **** 		pc = origpc + arg;
 26477              		.loc 1 2607 5 view .LVU6900
 26478 0016 032B     		cmp	r3, #3
 26479 0018 15D0     		beq	.L1911
 26480              	.LVL2027:
 26481              	.L1895:
2610:src/xeq.c     **** 		if (PcWrapped) {
 26482              		.loc 1 2610 28 is_stmt 1 discriminator 2 view .LVU6901
2610:src/xeq.c     **** 		if (PcWrapped) {
 26483              		.loc 1 2610 9 discriminator 2 view .LVU6902
2610:src/xeq.c     **** 		if (PcWrapped) {
 26484              		.loc 1 2610 9 is_stmt 0 discriminator 2 view .LVU6903
 26485 001a 24B1     		cbz	r4, .L1897
2610:src/xeq.c     **** 		if (PcWrapped) {
 26486              		.loc 1 2610 20 discriminator 1 view .LVU6904
 26487 001c FFF7FEFF 		bl	incpc
 26488              	.LVL2028:
 26489 0020 013C     		subs	r4, r4, #1
 26490              	.LVL2029:
2610:src/xeq.c     **** 		if (PcWrapped) {
 26491              		.loc 1 2610 16 discriminator 1 view .LVU6905
 26492 0022 0028     		cmp	r0, #0
 26493 0024 F9D0     		beq	.L1895
 26494              	.LVL2030:
ARM GAS  /tmp/ccBFDvgN.s 			page 679


 26495              	.L1897:
2611:src/xeq.c     **** 			report_err(ERR_RANGE);
 26496              		.loc 1 2611 3 is_stmt 1 view .LVU6906
2611:src/xeq.c     **** 			report_err(ERR_RANGE);
 26497              		.loc 1 2611 7 is_stmt 0 view .LVU6907
 26498 0026 154B     		ldr	r3, .L1913+4
2611:src/xeq.c     **** 			report_err(ERR_RANGE);
 26499              		.loc 1 2611 6 view .LVU6908
 26500 0028 1B68     		ldr	r3, [r3]
 26501 002a 73B9     		cbnz	r3, .L1912
 26502              	.L1898:
2614:src/xeq.c     **** 	}
 26503              		.loc 1 2614 3 is_stmt 1 view .LVU6909
2614:src/xeq.c     **** 	}
 26504              		.loc 1 2614 8 is_stmt 0 view .LVU6910
 26505 002c 3B68     		ldr	r3, [r7]
2614:src/xeq.c     **** 	}
 26506              		.loc 1 2614 6 view .LVU6911
 26507 002e B3F8E007 		ldrh	r0, [r3, #2016]
 26508              	.LVL2031:
 26509              	.L1896:
2616:src/xeq.c     **** }
 26510              		.loc 1 2616 2 is_stmt 1 view .LVU6912
 26511 0032 A5F13801 		sub	r1, r5, #56
 26512 0036 B1FA81F1 		clz	r1, r1
 26513 003a 3246     		mov	r2, r6
 26514 003c 4909     		lsrs	r1, r1, #5
 26515 003e FFF7FEFF 		bl	gsbgto
 26516              	.LVL2032:
 26517              	.L1889:
2617:src/xeq.c     **** 
 26518              		.loc 1 2617 1 is_stmt 0 view .LVU6913
 26519 0042 03B0     		add	sp, sp, #12
 26520              		.cfi_remember_state
 26521              		.cfi_def_cfa_offset 20
 26522              		@ sp needed
 26523 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 26524              	.LVL2033:
 26525              	.L1911:
 26526              		.cfi_restore_state
2608:src/xeq.c     **** 	else {
 26527              		.loc 1 2608 3 is_stmt 1 view .LVU6914
2608:src/xeq.c     **** 	else {
 26528              		.loc 1 2608 6 is_stmt 0 view .LVU6915
 26529 0046 A019     		adds	r0, r4, r6
 26530              	.LVL2034:
2608:src/xeq.c     **** 	else {
 26531              		.loc 1 2608 6 view .LVU6916
 26532 0048 F3E7     		b	.L1896
 26533              	.LVL2035:
 26534              	.L1912:
2612:src/xeq.c     **** 		}
 26535              		.loc 1 2612 4 is_stmt 1 view .LVU6917
 26536              	.LBB3548:
 26537              	.LBI3548:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26538              		.loc 1 546 5 view .LVU6918
ARM GAS  /tmp/ccBFDvgN.s 			page 680


 26539              	.LBB3549:
 547:src/xeq.c     **** 		Error = e;
 26540              		.loc 1 547 2 view .LVU6919
 547:src/xeq.c     **** 		Error = e;
 26541              		.loc 1 547 12 is_stmt 0 view .LVU6920
 26542 004a 0D4B     		ldr	r3, .L1913+8
 547:src/xeq.c     **** 		Error = e;
 26543              		.loc 1 547 5 view .LVU6921
 26544 004c 1A68     		ldr	r2, [r3]
 26545 004e 002A     		cmp	r2, #0
 26546 0050 ECD1     		bne	.L1898
 26547              	.LVL2036:
 26548              	.LBB3550:
 26549              	.LBI3550:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26550              		.loc 1 546 5 is_stmt 1 view .LVU6922
 26551              	.LBB3551:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26552              		.loc 1 548 3 view .LVU6923
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26553              		.loc 1 548 9 is_stmt 0 view .LVU6924
 26554 0052 0822     		movs	r2, #8
 26555 0054 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26556              		.loc 1 549 3 is_stmt 1 view .LVU6925
 26557 0056 E9E7     		b	.L1898
 26558              	.LVL2037:
 26559              	.L1910:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26560              		.loc 1 549 3 is_stmt 0 view .LVU6926
 26561              	.LBE3551:
 26562              	.LBE3550:
 26563              	.LBE3549:
 26564              	.LBE3548:
 26565              	.LBB3552:
2599:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
 26566              		.loc 1 2599 3 is_stmt 1 view .LVU6927
2600:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26567              		.loc 1 2600 3 view .LVU6928
2600:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26568              		.loc 1 2600 15 is_stmt 0 view .LVU6929
 26569 0058 01A9     		add	r1, sp, #4
 26570              	.LVL2038:
2600:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26571              		.loc 1 2600 15 view .LVU6930
 26572 005a FFF7FEFF 		bl	get_reg_n_int_sgn
 26573              	.LVL2039:
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26574              		.loc 1 2601 6 view .LVU6931
 26575 005e 019B     		ldr	r3, [sp, #4]
 26576              	.LVL2040:
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26577              		.loc 1 2601 3 is_stmt 1 view .LVU6932
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26578              		.loc 1 2601 6 is_stmt 0 view .LVU6933
 26579 0060 13B9     		cbnz	r3, .L1891
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
ARM GAS  /tmp/ccBFDvgN.s 			page 681


 26580              		.loc 1 2601 11 discriminator 1 view .LVU6934
 26581 0062 6328     		cmp	r0, #99
2600:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26582              		.loc 1 2600 7 discriminator 1 view .LVU6935
 26583 0064 0446     		mov	r4, r0
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26584              		.loc 1 2601 11 discriminator 1 view .LVU6936
 26585 0066 D5D9     		bls	.L1890
 26586              	.L1891:
2602:src/xeq.c     **** 			return;
 26587              		.loc 1 2602 4 is_stmt 1 view .LVU6937
 26588              	.LVL2041:
 26589              	.LBB3553:
 26590              	.LBI3553:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26591              		.loc 1 546 5 view .LVU6938
 26592              	.LBB3554:
 547:src/xeq.c     **** 		Error = e;
 26593              		.loc 1 547 2 view .LVU6939
 547:src/xeq.c     **** 		Error = e;
 26594              		.loc 1 547 12 is_stmt 0 view .LVU6940
 26595 0068 054B     		ldr	r3, .L1913+8
 547:src/xeq.c     **** 		Error = e;
 26596              		.loc 1 547 5 view .LVU6941
 26597 006a 1A68     		ldr	r2, [r3]
 26598 006c 002A     		cmp	r2, #0
 26599 006e E8D1     		bne	.L1889
 26600              	.LVL2042:
 26601              	.LBB3555:
 26602              	.LBI3555:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26603              		.loc 1 546 5 is_stmt 1 view .LVU6942
 26604              	.LBB3556:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26605              		.loc 1 548 3 view .LVU6943
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26606              		.loc 1 548 9 is_stmt 0 view .LVU6944
 26607 0070 0822     		movs	r2, #8
 26608 0072 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26609              		.loc 1 549 3 is_stmt 1 view .LVU6945
 26610              	.LVL2043:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26611              		.loc 1 549 3 is_stmt 0 view .LVU6946
 26612              	.LBE3556:
 26613              	.LBE3555:
 26614              	.LBE3554:
 26615              	.LBE3553:
2603:src/xeq.c     **** 		}
 26616              		.loc 1 2603 4 is_stmt 1 view .LVU6947
 26617 0074 E5E7     		b	.L1889
 26618              	.L1914:
 26619 0076 00BF     		.align	2
 26620              	.L1913:
 26621 0078 00000000 		.word	main_ram
 26622 007c 00000000 		.word	PcWrapped
 26623 0080 00000000 		.word	Error
ARM GAS  /tmp/ccBFDvgN.s 			page 682


 26624              	.LBE3552:
 26625              		.cfi_endproc
 26626              	.LFE183:
 26628              		.section	.text.cmdback,"ax",%progbits
 26629              		.align	1
 26630              		.p2align 2,,3
 26631              		.global	cmdback
 26632              		.syntax unified
 26633              		.thumb
 26634              		.thumb_func
 26635              		.fpu fpv4-sp-d16
 26637              	cmdback:
 26638              	.LVL2044:
 26639              	.LFB184:
2620:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26640              		.loc 1 2620 46 view -0
 26641              		.cfi_startproc
 26642              		@ args = 0, pretend = 0, frame = 0
 26643              		@ frame_needed = 0, uses_anonymous_args = 0
2621:src/xeq.c     **** 	unsigned int pc = origpc;
 26644              		.loc 1 2621 2 view .LVU6949
2620:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26645              		.loc 1 2620 46 is_stmt 0 view .LVU6950
 26646 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 26647              		.cfi_def_cfa_offset 24
 26648              		.cfi_offset 3, -24
 26649              		.cfi_offset 4, -20
 26650              		.cfi_offset 5, -16
 26651              		.cfi_offset 6, -12
 26652              		.cfi_offset 7, -8
 26653              		.cfi_offset 14, -4
2621:src/xeq.c     **** 	unsigned int pc = origpc;
 26654              		.loc 1 2621 30 view .LVU6951
 26655 0002 184B     		ldr	r3, .L1934
 26656 0004 1B68     		ldr	r3, [r3]
2621:src/xeq.c     **** 	unsigned int pc = origpc;
 26657              		.loc 1 2621 21 view .LVU6952
 26658 0006 B3F8E067 		ldrh	r6, [r3, #2016]
 26659              	.LVL2045:
2622:src/xeq.c     **** 
 26660              		.loc 1 2622 2 is_stmt 1 view .LVU6953
2624:src/xeq.c     **** 		pc -= arg + 1;
 26661              		.loc 1 2624 2 view .LVU6954
2624:src/xeq.c     **** 		pc -= arg + 1;
 26662              		.loc 1 2624 6 is_stmt 0 view .LVU6955
 26663 000a B30B     		lsrs	r3, r6, #14
2624:src/xeq.c     **** 		pc -= arg + 1;
 26664              		.loc 1 2624 5 view .LVU6956
 26665 000c 032B     		cmp	r3, #3
2620:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26666              		.loc 1 2620 46 view .LVU6957
 26667 000e 0446     		mov	r4, r0
 26668 0010 0D46     		mov	r5, r1
2624:src/xeq.c     **** 		pc -= arg + 1;
 26669              		.loc 1 2624 5 view .LVU6958
 26670 0012 1FD0     		beq	.L1931
2626:src/xeq.c     **** 		if ( Running ) {
ARM GAS  /tmp/ccBFDvgN.s 			page 683


 26671              		.loc 1 2626 14 is_stmt 1 view .LVU6959
2626:src/xeq.c     **** 		if ( Running ) {
 26672              		.loc 1 2626 17 is_stmt 0 view .LVU6960
 26673 0014 98B1     		cbz	r0, .L1923
2627:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26674              		.loc 1 2627 3 is_stmt 1 view .LVU6961
2627:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26675              		.loc 1 2627 8 is_stmt 0 view .LVU6962
 26676 0016 144B     		ldr	r3, .L1934+4
2627:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26677              		.loc 1 2627 6 view .LVU6963
 26678 0018 1B68     		ldr	r3, [r3]
 26679 001a F3B9     		cbnz	r3, .L1932
 26680 001c 3046     		mov	r0, r6
 26681              	.LVL2046:
 26682              	.L1918:
2627:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26683              		.loc 1 2627 6 view .LVU6964
 26684 001e 134F     		ldr	r7, .L1934+8
 26685 0020 00E0     		b	.L1920
 26686              	.L1933:
2633:src/xeq.c     **** 		if (PcWrapped) {
 26687              		.loc 1 2633 18 discriminator 1 view .LVU6965
 26688 0022 33B9     		cbnz	r3, .L1921
 26689              	.L1920:
2631:src/xeq.c     **** 			pc = do_dec(pc, 1);
 26690              		.loc 1 2631 3 is_stmt 1 discriminator 2 view .LVU6966
2632:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26691              		.loc 1 2632 4 discriminator 2 view .LVU6967
2632:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26692              		.loc 1 2632 9 is_stmt 0 discriminator 2 view .LVU6968
 26693 0024 0121     		movs	r1, #1
 26694 0026 FFF7FEFF 		bl	do_dec
 26695              	.LVL2047:
2633:src/xeq.c     **** 		if (PcWrapped) {
 26696              		.loc 1 2633 11 is_stmt 1 discriminator 2 view .LVU6969
2633:src/xeq.c     **** 		if (PcWrapped) {
 26697              		.loc 1 2633 3 is_stmt 0 discriminator 2 view .LVU6970
 26698 002a 013C     		subs	r4, r4, #1
 26699              	.LVL2048:
2633:src/xeq.c     **** 		if (PcWrapped) {
 26700              		.loc 1 2633 18 discriminator 2 view .LVU6971
 26701 002c 3B68     		ldr	r3, [r7]
2633:src/xeq.c     **** 		if (PcWrapped) {
 26702              		.loc 1 2633 3 discriminator 2 view .LVU6972
 26703 002e F8D1     		bne	.L1933
2634:src/xeq.c     **** 			report_err(ERR_RANGE);
 26704              		.loc 1 2634 3 is_stmt 1 view .LVU6973
2634:src/xeq.c     **** 			report_err(ERR_RANGE);
 26705              		.loc 1 2634 6 is_stmt 0 view .LVU6974
 26706 0030 33B1     		cbz	r3, .L1917
 26707              	.L1921:
2635:src/xeq.c     **** 			return;
 26708              		.loc 1 2635 4 is_stmt 1 view .LVU6975
 26709              	.LVL2049:
 26710              	.LBB3561:
 26711              	.LBI3561:
ARM GAS  /tmp/ccBFDvgN.s 			page 684


 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26712              		.loc 1 546 5 view .LVU6976
 26713              	.LBB3562:
 547:src/xeq.c     **** 		Error = e;
 26714              		.loc 1 547 2 view .LVU6977
 547:src/xeq.c     **** 		Error = e;
 26715              		.loc 1 547 12 is_stmt 0 view .LVU6978
 26716 0032 0F4B     		ldr	r3, .L1934+12
 547:src/xeq.c     **** 		Error = e;
 26717              		.loc 1 547 5 view .LVU6979
 26718 0034 1A68     		ldr	r2, [r3]
 26719 0036 0AB9     		cbnz	r2, .L1915
 26720              	.LVL2050:
 26721              	.LBB3563:
 26722              	.LBI3563:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26723              		.loc 1 546 5 is_stmt 1 view .LVU6980
 26724              	.LBB3564:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26725              		.loc 1 548 3 view .LVU6981
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26726              		.loc 1 548 9 is_stmt 0 view .LVU6982
 26727 0038 0822     		movs	r2, #8
 26728 003a 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26729              		.loc 1 549 3 is_stmt 1 view .LVU6983
 26730              	.LVL2051:
 26731              	.L1915:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26732              		.loc 1 549 3 is_stmt 0 view .LVU6984
 26733              	.LBE3564:
 26734              	.LBE3563:
 26735              	.LBE3562:
 26736              	.LBE3561:
2640:src/xeq.c     **** 
 26737              		.loc 1 2640 1 view .LVU6985
 26738 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 26739              	.LVL2052:
 26740              	.L1923:
2640:src/xeq.c     **** 
 26741              		.loc 1 2640 1 view .LVU6986
 26742 003e 3046     		mov	r0, r6
 26743              	.LVL2053:
 26744              	.L1917:
2639:src/xeq.c     **** }
 26745              		.loc 1 2639 2 is_stmt 1 view .LVU6987
 26746 0040 A5F13901 		sub	r1, r5, #57
 26747 0044 B1FA81F1 		clz	r1, r1
 26748 0048 3246     		mov	r2, r6
 26749 004a 4909     		lsrs	r1, r1, #5
2640:src/xeq.c     **** 
 26750              		.loc 1 2640 1 is_stmt 0 view .LVU6988
 26751 004c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 26752              		.cfi_remember_state
 26753              		.cfi_restore 14
 26754              		.cfi_restore 7
 26755              		.cfi_restore 6
ARM GAS  /tmp/ccBFDvgN.s 			page 685


 26756              		.cfi_restore 5
 26757              		.cfi_restore 4
 26758              		.cfi_restore 3
 26759              		.cfi_def_cfa_offset 0
 26760              	.LVL2054:
2639:src/xeq.c     **** }
 26761              		.loc 1 2639 2 view .LVU6989
 26762 0050 FFF7FEBF 		b	gsbgto
 26763              	.LVL2055:
 26764              	.L1931:
 26765              		.cfi_restore_state
2625:src/xeq.c     ****         else if (arg) {
 26766              		.loc 1 2625 3 is_stmt 1 view .LVU6990
2625:src/xeq.c     ****         else if (arg) {
 26767              		.loc 1 2625 6 is_stmt 0 view .LVU6991
 26768 0054 731E     		subs	r3, r6, #1
 26769 0056 181A     		subs	r0, r3, r0
 26770              	.LVL2056:
2625:src/xeq.c     ****         else if (arg) {
 26771              		.loc 1 2625 6 view .LVU6992
 26772 0058 F2E7     		b	.L1917
 26773              	.LVL2057:
 26774              	.L1932:
2629:src/xeq.c     **** 		}
 26775              		.loc 1 2629 4 is_stmt 1 view .LVU6993
2629:src/xeq.c     **** 		}
 26776              		.loc 1 2629 9 is_stmt 0 view .LVU6994
 26777 005a 0121     		movs	r1, #1
 26778              	.LVL2058:
2629:src/xeq.c     **** 		}
 26779              		.loc 1 2629 9 view .LVU6995
 26780 005c 3046     		mov	r0, r6
 26781              	.LVL2059:
2629:src/xeq.c     **** 		}
 26782              		.loc 1 2629 9 view .LVU6996
 26783 005e FFF7FEFF 		bl	do_dec
 26784              	.LVL2060:
2629:src/xeq.c     **** 		}
 26785              		.loc 1 2629 9 view .LVU6997
 26786 0062 DCE7     		b	.L1918
 26787              	.L1935:
 26788              		.align	2
 26789              	.L1934:
 26790 0064 00000000 		.word	main_ram
 26791 0068 00000000 		.word	Running
 26792 006c 00000000 		.word	PcWrapped
 26793 0070 00000000 		.word	Error
 26794              		.cfi_endproc
 26795              	.LFE184:
 26797              		.section	.text.usergsb_common,"ax",%progbits
 26798              		.align	1
 26799              		.p2align 2,,3
 26800              		.syntax unified
 26801              		.thumb
 26802              		.thumb_func
 26803              		.fpu fpv4-sp-d16
 26805              	usergsb_common:
ARM GAS  /tmp/ccBFDvgN.s 			page 686


 26806              	.LVL2061:
 26807              	.LFB157:
2294:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26808              		.loc 1 2294 55 is_stmt 1 view -0
 26809              		.cfi_startproc
 26810              		@ args = 0, pretend = 0, frame = 0
 26811              		@ frame_needed = 0, uses_anonymous_args = 0
2295:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26812              		.loc 1 2295 2 view .LVU6999
2294:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26813              		.loc 1 2294 55 is_stmt 0 view .LVU7000
 26814 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 26815              		.cfi_def_cfa_offset 24
 26816              		.cfi_offset 4, -24
 26817              		.cfi_offset 5, -20
 26818              		.cfi_offset 6, -16
 26819              		.cfi_offset 7, -12
 26820              		.cfi_offset 8, -8
 26821              		.cfi_offset 14, -4
2295:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26822              		.loc 1 2295 26 view .LVU7001
 26823 0004 1C4D     		ldr	r5, .L1940
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26824              		.loc 1 2296 2 view .LVU7002
 26825 0006 1D4F     		ldr	r7, .L1940+4
2295:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26826              		.loc 1 2295 26 view .LVU7003
 26827 0008 2B68     		ldr	r3, [r5]
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26828              		.loc 1 2296 2 view .LVU7004
 26829 000a 3A68     		ldr	r2, [r7]
2295:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26830              		.loc 1 2295 21 view .LVU7005
 26831 000c B3F8E047 		ldrh	r4, [r3, #2016]
 26832              	.LVL2062:
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26833              		.loc 1 2296 2 is_stmt 1 view .LVU7006
2298:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26834              		.loc 1 2298 2 is_stmt 0 view .LVU7007
 26835 0010 DFF87480 		ldr	r8, .L1940+16
2294:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26836              		.loc 1 2294 55 view .LVU7008
 26837 0014 0646     		mov	r6, r0
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26838              		.loc 1 2296 2 view .LVU7009
 26839 0016 0121     		movs	r1, #1
 26840 0018 2046     		mov	r0, r4
 26841              	.LVL2063:
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26842              		.loc 1 2296 2 view .LVU7010
 26843 001a FFF7FEFF 		bl	gsbgto
 26844              	.LVL2064:
2297:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26845              		.loc 1 2297 2 is_stmt 1 view .LVU7011
2297:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26846              		.loc 1 2297 16 is_stmt 0 view .LVU7012
 26847 001e 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/ccBFDvgN.s 			page 687


2297:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26848              		.loc 1 2297 2 view .LVU7013
 26849 0020 2046     		mov	r0, r4
 26850 0022 B3F9DE27 		ldrsh	r2, [r3, #2014]
 26851 0026 0121     		movs	r1, #1
 26852 0028 FFF7FEFF 		bl	gsbgto
 26853              	.LVL2065:
2298:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26854              		.loc 1 2298 2 is_stmt 1 view .LVU7014
 26855 002c 2046     		mov	r0, r4
 26856 002e D8F80020 		ldr	r2, [r8]
 26857 0032 0121     		movs	r1, #1
 26858 0034 FFF7FEFF 		bl	gsbgto
 26859              	.LVL2066:
2299:src/xeq.c     **** 
 26860              		.loc 1 2299 2 view .LVU7015
 26861 0038 2246     		mov	r2, r4
 26862 003a 3046     		mov	r0, r6
 26863 003c 0121     		movs	r1, #1
 26864 003e FFF7FEFF 		bl	gsbgto
 26865              	.LVL2067:
2301:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26866              		.loc 1 2301 2 view .LVU7016
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26867              		.loc 1 2302 9 is_stmt 0 view .LVU7017
 26868 0042 2A68     		ldr	r2, [r5]
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26869              		.loc 1 2302 20 view .LVU7018
 26870 0044 0E4B     		ldr	r3, .L1940+8
 26871 0046 B2F9DE07 		ldrsh	r0, [r2, #2014]
 26872 004a 1968     		ldr	r1, [r3]
2304:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26873              		.loc 1 2304 6 view .LVU7019
 26874 004c 0D4C     		ldr	r4, .L1940+12
 26875              	.LVL2068:
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26876              		.loc 1 2302 20 view .LVU7020
 26877 004e 31F81030 		ldrh	r3, [r1, r0, lsl #1]
2304:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26878              		.loc 1 2304 5 view .LVU7021
 26879 0052 2468     		ldr	r4, [r4]
2303:src/xeq.c     **** 	if (! Running)
 26880              		.loc 1 2303 12 view .LVU7022
 26881 0054 D8F80050 		ldr	r5, [r8]
2301:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26882              		.loc 1 2301 13 view .LVU7023
 26883 0058 0026     		movs	r6, #0
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26884              		.loc 1 2302 20 view .LVU7024
 26885 005a 43F40053 		orr	r3, r3, #8192
2301:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26886              		.loc 1 2301 13 view .LVU7025
 26887 005e 3E60     		str	r6, [r7]
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26888              		.loc 1 2302 2 is_stmt 1 view .LVU7026
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26889              		.loc 1 2302 20 is_stmt 0 view .LVU7027
ARM GAS  /tmp/ccBFDvgN.s 			page 688


 26890 0060 21F81030 		strh	r3, [r1, r0, lsl #1]	@ movhi
2303:src/xeq.c     **** 	if (! Running)
 26891              		.loc 1 2303 2 is_stmt 1 view .LVU7028
2303:src/xeq.c     **** 	if (! Running)
 26892              		.loc 1 2303 12 is_stmt 0 view .LVU7029
 26893 0064 A2F8DE57 		strh	r5, [r2, #2014]	@ movhi
2304:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26894              		.loc 1 2304 2 is_stmt 1 view .LVU7030
2304:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26895              		.loc 1 2304 5 is_stmt 0 view .LVU7031
 26896 0068 0CB1     		cbz	r4, .L1939
2307:src/xeq.c     **** 
 26897              		.loc 1 2307 1 view .LVU7032
 26898 006a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 26899              	.L1939:
2305:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26900              		.loc 1 2305 3 is_stmt 1 view .LVU7033
2307:src/xeq.c     **** 
 26901              		.loc 1 2307 1 is_stmt 0 view .LVU7034
 26902 006e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 26903              		.cfi_restore 14
 26904              		.cfi_restore 8
 26905              		.cfi_restore 7
 26906              		.cfi_restore 6
 26907              		.cfi_restore 5
 26908              		.cfi_restore 4
 26909              		.cfi_def_cfa_offset 0
2305:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26910              		.loc 1 2305 3 view .LVU7035
 26911 0072 FFF7FEBF 		b	set_running_on
 26912              	.LVL2069:
 26913              	.L1941:
 26914 0076 00BF     		.align	2
 26915              	.L1940:
 26916 0078 00000000 		.word	main_ram
 26917 007c 00000000 		.word	XromUserPc
 26918 0080 00000000 		.word	RetStk
 26919 0084 00000000 		.word	Running
 26920 0088 00000000 		.word	UserLocalRegs
 26921              		.cfi_endproc
 26922              	.LFE157:
 26924              		.section	.text.do_usergsb,"ax",%progbits
 26925              		.align	1
 26926              		.p2align 2,,3
 26927              		.global	do_usergsb
 26928              		.syntax unified
 26929              		.thumb
 26930              		.thumb_func
 26931              		.fpu fpv4-sp-d16
 26933              	do_usergsb:
 26934              	.LVL2070:
 26935              	.LFB158:
2313:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26936              		.loc 1 2313 32 is_stmt 1 view -0
 26937              		.cfi_startproc
 26938              		@ args = 0, pretend = 0, frame = 0
 26939              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBFDvgN.s 			page 689


2314:src/xeq.c     ****         fill(OP_FILL);
 26940              		.loc 1 2314 2 view .LVU7037
2313:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26941              		.loc 1 2313 32 is_stmt 0 view .LVU7038
 26942 0000 08B5     		push	{r3, lr}
 26943              		.cfi_def_cfa_offset 8
 26944              		.cfi_offset 3, -8
 26945              		.cfi_offset 14, -4
2314:src/xeq.c     ****         fill(OP_FILL);
 26946              		.loc 1 2314 2 view .LVU7039
 26947 0002 044B     		ldr	r3, .L1944
 26948 0004 1888     		ldrh	r0, [r3]
 26949              	.LVL2071:
2314:src/xeq.c     ****         fill(OP_FILL);
 26950              		.loc 1 2314 2 view .LVU7040
 26951 0006 FFF7FEFF 		bl	usergsb_common
 26952              	.LVL2072:
2315:src/xeq.c     **** }
 26953              		.loc 1 2315 9 is_stmt 1 view .LVU7041
2316:src/xeq.c     **** 
 26954              		.loc 1 2316 1 is_stmt 0 view .LVU7042
 26955 000a BDE80840 		pop	{r3, lr}
 26956              		.cfi_restore 14
 26957              		.cfi_restore 3
 26958              		.cfi_def_cfa_offset 0
2315:src/xeq.c     **** }
 26959              		.loc 1 2315 9 view .LVU7043
 26960 000e 0C20     		movs	r0, #12
 26961 0010 FFF7FEBF 		b	fill
 26962              	.LVL2073:
 26963              	.L1945:
 26964              		.align	2
 26965              	.L1944:
 26966 0014 00000000 		.word	XromUserPc
 26967              		.cfi_endproc
 26968              	.LFE158:
 26970              		.section	.text.cmdmultigto,"ax",%progbits
 26971              		.align	1
 26972              		.p2align 2,,3
 26973              		.global	cmdmultigto
 26974              		.syntax unified
 26975              		.thumb
 26976              		.thumb_func
 26977              		.fpu fpv4-sp-d16
 26979              	cmdmultigto:
 26980              	.LVL2074:
 26981              	.LFB165:
2372:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26982              		.loc 1 2372 54 is_stmt 1 view -0
 26983              		.cfi_startproc
 26984              		@ args = 0, pretend = 0, frame = 0
 26985              		@ frame_needed = 0, uses_anonymous_args = 0
2373:src/xeq.c     **** 		// In XROM the command behaves differently!
 26986              		.loc 1 2373 2 view .LVU7045
2373:src/xeq.c     **** 		// In XROM the command behaves differently!
 26987              		.loc 1 2373 5 is_stmt 0 view .LVU7046
 26988 0000 0229     		cmp	r1, #2
ARM GAS  /tmp/ccBFDvgN.s 			page 690


2372:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26989              		.loc 1 2372 54 view .LVU7047
 26990 0002 10B5     		push	{r4, lr}
 26991              		.cfi_def_cfa_offset 8
 26992              		.cfi_offset 4, -8
 26993              		.cfi_offset 14, -4
2372:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26994              		.loc 1 2372 54 view .LVU7048
 26995 0004 0346     		mov	r3, r0
 26996 0006 0C46     		mov	r4, r1
2373:src/xeq.c     **** 		// In XROM the command behaves differently!
 26997              		.loc 1 2373 5 view .LVU7049
 26998 0008 06D1     		bne	.L1947
 26999              	.LBB3565:
 27000              	.LBI3565:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 27001              		.loc 1 185 5 is_stmt 1 view .LVU7050
 27002              	.LBB3566:
 186:src/xeq.c     **** }
 27003              		.loc 1 186 2 view .LVU7051
 186:src/xeq.c     **** }
 27004              		.loc 1 186 9 is_stmt 0 view .LVU7052
 27005 000a 104A     		ldr	r2, .L1951
 27006 000c 1268     		ldr	r2, [r2]
 27007 000e B2F8E027 		ldrh	r2, [r2, #2016]
 27008              	.LBE3566:
 27009              	.LBE3565:
2373:src/xeq.c     **** 		// In XROM the command behaves differently!
 27010              		.loc 1 2373 22 view .LVU7053
 27011 0012 920B     		lsrs	r2, r2, #14
 27012 0014 032A     		cmp	r2, #3
 27013 0016 0BD0     		beq	.L1950
 27014              	.L1947:
2382:src/xeq.c     **** 	}
 27015              		.loc 1 2382 3 is_stmt 1 view .LVU7054
 27016 0018 0121     		movs	r1, #1
 27017              	.LVL2075:
2382:src/xeq.c     **** 	}
 27018              		.loc 1 2382 3 is_stmt 0 view .LVU7055
 27019 001a 1846     		mov	r0, r3
 27020              	.LVL2076:
2382:src/xeq.c     **** 	}
 27021              		.loc 1 2382 3 view .LVU7056
 27022 001c FFF7FEFF 		bl	findmultilbl
 27023              	.LVL2077:
2382:src/xeq.c     **** 	}
 27024              		.loc 1 2382 3 view .LVU7057
 27025 0020 0146     		mov	r1, r0
 27026 0022 E01E     		subs	r0, r4, #3
 27027 0024 18BF     		it	ne
 27028 0026 0120     		movne	r0, #1
2384:src/xeq.c     **** 
 27029              		.loc 1 2384 1 view .LVU7058
 27030 0028 BDE81040 		pop	{r4, lr}
 27031              		.cfi_remember_state
 27032              		.cfi_restore 14
 27033              		.cfi_restore 4
ARM GAS  /tmp/ccBFDvgN.s 			page 691


 27034              		.cfi_def_cfa_offset 0
2382:src/xeq.c     **** 	}
 27035              		.loc 1 2382 3 view .LVU7059
 27036 002c FFF7FEBF 		b	cmdgtocommon
 27037              	.LVL2078:
 27038              	.L1950:
 27039              		.cfi_restore_state
 27040              	.LBB3567:
2375:src/xeq.c     **** 		if (target != 0)
 27041              		.loc 1 2375 3 is_stmt 1 view .LVU7060
2375:src/xeq.c     **** 		if (target != 0)
 27042              		.loc 1 2375 31 is_stmt 0 view .LVU7061
 27043 0030 0021     		movs	r1, #0
 27044              	.LVL2079:
2375:src/xeq.c     **** 		if (target != 0)
 27045              		.loc 1 2375 31 view .LVU7062
 27046 0032 FFF7FEFF 		bl	findmultilbl
 27047              	.LVL2080:
2375:src/xeq.c     **** 		if (target != 0)
 27048              		.loc 1 2375 22 view .LVU7063
 27049 0036 80B2     		uxth	r0, r0
 27050              	.LVL2081:
2376:src/xeq.c     **** 			usergsb_common(target); 
 27051              		.loc 1 2376 3 is_stmt 1 view .LVU7064
2376:src/xeq.c     **** 			usergsb_common(target); 
 27052              		.loc 1 2376 6 is_stmt 0 view .LVU7065
 27053 0038 18B1     		cbz	r0, .L1948
2377:src/xeq.c     **** 		else
 27054              		.loc 1 2377 4 is_stmt 1 view .LVU7066
 27055              	.LBE3567:
2384:src/xeq.c     **** 
 27056              		.loc 1 2384 1 is_stmt 0 view .LVU7067
 27057 003a BDE81040 		pop	{r4, lr}
 27058              		.cfi_remember_state
 27059              		.cfi_restore 14
 27060              		.cfi_restore 4
 27061              		.cfi_def_cfa_offset 0
 27062              	.LBB3568:
2377:src/xeq.c     **** 		else
 27063              		.loc 1 2377 4 view .LVU7068
 27064 003e FFF7FEBF 		b	usergsb_common
 27065              	.LVL2082:
 27066              	.L1948:
 27067              		.cfi_restore_state
2379:src/xeq.c     **** 	}
 27068              		.loc 1 2379 4 is_stmt 1 view .LVU7069
 27069              	.LBE3568:
2384:src/xeq.c     **** 
 27070              		.loc 1 2384 1 is_stmt 0 view .LVU7070
 27071 0042 BDE81040 		pop	{r4, lr}
 27072              		.cfi_restore 14
 27073              		.cfi_restore 4
 27074              		.cfi_def_cfa_offset 0
 27075              	.LBB3569:
2379:src/xeq.c     **** 	}
 27076              		.loc 1 2379 4 view .LVU7071
 27077 0046 FFF7FEBF 		b	incpc
ARM GAS  /tmp/ccBFDvgN.s 			page 692


 27078              	.LVL2083:
 27079              	.L1952:
2379:src/xeq.c     **** 	}
 27080              		.loc 1 2379 4 view .LVU7072
 27081 004a 00BF     		.align	2
 27082              	.L1951:
 27083 004c 00000000 		.word	main_ram
 27084              	.LBE3569:
 27085              		.cfi_endproc
 27086              	.LFE165:
 27088              		.section	.text.store_a_to_d,"ax",%progbits
 27089              		.align	1
 27090              		.p2align 2,,3
 27091              		.global	store_a_to_d
 27092              		.syntax unified
 27093              		.thumb
 27094              		.thumb_func
 27095              		.fpu fpv4-sp-d16
 27097              	store_a_to_d:
 27098              	.LVL2084:
 27099              	.LFB264:
5832:src/xeq.c     **** 
5833:src/xeq.c     **** /* Command to stash registers A through D into volatile RAM and to restore them
5834:src/xeq.c     ****  * again.
5835:src/xeq.c     ****  */
5836:src/xeq.c     **** void store_a_to_d(enum nilop op) {
 27100              		.loc 1 5836 34 is_stmt 1 view -0
 27101              		.cfi_startproc
 27102              		@ args = 0, pretend = 0, frame = 0
 27103              		@ frame_needed = 0, uses_anonymous_args = 0
5837:src/xeq.c     **** 	const void *src = XromA2D;
 27104              		.loc 1 5837 2 view .LVU7074
5838:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27105              		.loc 1 5838 2 view .LVU7075
5836:src/xeq.c     **** 	const void *src = XromA2D;
 27106              		.loc 1 5836 34 is_stmt 0 view .LVU7076
 27107 0000 10B5     		push	{r4, lr}
 27108              		.cfi_def_cfa_offset 8
 27109              		.cfi_offset 4, -8
 27110              		.cfi_offset 14, -4
5836:src/xeq.c     **** 	const void *src = XromA2D;
 27111              		.loc 1 5836 34 view .LVU7077
 27112 0002 0446     		mov	r4, r0
 27113              		.loc 1 5838 15 view .LVU7078
 27114 0004 6820     		movs	r0, #104
 27115              	.LVL2085:
 27116              		.loc 1 5838 15 view .LVU7079
 27117 0006 FFF7FEFF 		bl	get_reg_n
 27118              	.LVL2086:
5839:src/xeq.c     **** 
5840:src/xeq.c     **** 	if (op == OP_SAVEA2D) {
 27119              		.loc 1 5840 2 is_stmt 1 view .LVU7080
 27120              		.loc 1 5840 5 is_stmt 0 view .LVU7081
 27121 000a 802C     		cmp	r4, #128
5841:src/xeq.c     **** 		src = dest;
 27122              		.loc 1 5841 7 view .LVU7082
 27123 000c 08BF     		it	eq
ARM GAS  /tmp/ccBFDvgN.s 			page 693


 27124 000e 0146     		moveq	r1, r0
5842:src/xeq.c     **** 		dest = XromA2D;
5843:src/xeq.c     **** 	}
5844:src/xeq.c     **** 	xcopy(dest, src, sizeof(REGISTER) * 4);
5845:src/xeq.c     **** }
 27125              		.loc 1 5845 1 view .LVU7083
 27126 0010 BDE81040 		pop	{r4, lr}
 27127              		.cfi_restore 14
 27128              		.cfi_restore 4
 27129              		.cfi_def_cfa_offset 0
5842:src/xeq.c     **** 		dest = XromA2D;
 27130              		.loc 1 5842 8 view .LVU7084
 27131 0014 0CBF     		ite	eq
 27132 0016 0248     		ldreq	r0, .L1957
 27133              	.LVL2087:
5837:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27134              		.loc 1 5837 14 view .LVU7085
 27135 0018 0149     		ldrne	r1, .L1957
 27136              	.LVL2088:
5844:src/xeq.c     **** }
 27137              		.loc 1 5844 2 is_stmt 1 view .LVU7086
 27138 001a 4022     		movs	r2, #64
 27139 001c FFF7FEBF 		b	xcopy
 27140              	.LVL2089:
 27141              	.L1958:
5844:src/xeq.c     **** }
 27142              		.loc 1 5844 2 is_stmt 0 view .LVU7087
 27143              		.align	2
 27144              	.L1957:
 27145 0020 00000000 		.word	XromA2D
 27146              		.cfi_endproc
 27147              	.LFE264:
 27149              		.section	.text.cmdlocr,"ax",%progbits
 27150              		.align	1
 27151              		.p2align 2,,3
 27152              		.global	cmdlocr
 27153              		.syntax unified
 27154              		.thumb
 27155              		.thumb_func
 27156              		.fpu fpv4-sp-d16
 27158              	cmdlocr:
 27159              	.LVL2090:
 27160              	.LFB265:
5846:src/xeq.c     **** 
5847:src/xeq.c     **** /*
5848:src/xeq.c     ****  *  Command to support local variables.
5849:src/xeq.c     ****  *  A stack frame is constructed:
5850:src/xeq.c     ****  *	marker including size of frame,
5851:src/xeq.c     ****  *	register + flag area.
5852:src/xeq.c     ****  *  Registers must reside on even stack positions
5853:src/xeq.c     ****  *  so the flag word is either at the top or at the bottom of the frame.
5854:src/xeq.c     ****  */
5855:src/xeq.c     **** void cmdlocr(unsigned int arg, enum rarg op) {
 27161              		.loc 1 5855 46 is_stmt 1 view -0
 27162              		.cfi_startproc
 27163              		@ args = 0, pretend = 0, frame = 0
 27164              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccBFDvgN.s 			page 694


5856:src/xeq.c     **** 	short int sp = RetStkPtr;
 27165              		.loc 1 5856 2 view .LVU7089
5855:src/xeq.c     **** 	short int sp = RetStkPtr;
 27166              		.loc 1 5855 46 is_stmt 0 view .LVU7090
 27167 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27168              		.cfi_def_cfa_offset 40
 27169              		.cfi_offset 3, -40
 27170              		.cfi_offset 4, -36
 27171              		.cfi_offset 5, -32
 27172              		.cfi_offset 6, -28
 27173              		.cfi_offset 7, -24
 27174              		.cfi_offset 8, -20
 27175              		.cfi_offset 9, -16
 27176              		.cfi_offset 10, -12
 27177              		.cfi_offset 11, -8
 27178              		.cfi_offset 14, -4
 27179              		.loc 1 5856 17 view .LVU7091
 27180 0004 554F     		ldr	r7, .L1979
 27181 0006 3C68     		ldr	r4, [r7]
 27182              	.LBB3579:
 27183              	.LBB3580:
1119:src/xeq.c     **** }
 27184              		.loc 1 1119 24 view .LVU7092
 27185 0008 B4F8E827 		ldrh	r2, [r4, #2024]
 27186              	.LBE3580:
 27187              	.LBE3579:
 27188              		.loc 1 5856 12 view .LVU7093
 27189 000c B4F9E267 		ldrsh	r6, [r4, #2018]
 27190              	.LVL2091:
5857:src/xeq.c     **** 	int size = (arg << (is_dblmode() ? 3 : 2)) + 2;
 27191              		.loc 1 5857 2 is_stmt 1 view .LVU7094
 27192              	.LBB3582:
 27193              	.LBI3579:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27194              		.loc 1 1118 5 view .LVU7095
 27195              	.LBB3581:
1119:src/xeq.c     **** }
 27196              		.loc 1 1119 2 view .LVU7096
1119:src/xeq.c     **** }
 27197              		.loc 1 1119 24 is_stmt 0 view .LVU7097
 27198 0010 44F20103 		movw	r3, #16385
 27199              	.LBE3581:
 27200              	.LBE3582:
 27201              		.loc 1 5857 39 view .LVU7098
 27202 0014 1340     		ands	r3, r3, r2
 27203 0016 B3F5804F 		cmp	r3, #16384
 27204 001a 0CBF     		ite	eq
 27205 001c 0325     		moveq	r5, #3
 27206 001e 0225     		movne	r5, #2
 27207              		.loc 1 5857 18 view .LVU7099
 27208 0020 A840     		lsls	r0, r0, r5
 27209              	.LVL2092:
 27210              		.loc 1 5857 45 view .LVU7100
 27211 0022 851C     		adds	r5, r0, #2
 27212              	.LVL2093:
5858:src/xeq.c     **** 	const unsigned short marker = LOCAL_MARKER | size;
 27213              		.loc 1 5858 2 is_stmt 1 view .LVU7101
ARM GAS  /tmp/ccBFDvgN.s 			page 695


 27214              		.loc 1 5858 45 is_stmt 0 view .LVU7102
 27215 0024 1FFA85F8 		uxth	r8, r5
 27216              	.LVL2094:
5859:src/xeq.c     **** 	int old_size = 0;
 27217              		.loc 1 5859 2 is_stmt 1 view .LVU7103
5860:src/xeq.c     **** 	short unsigned int old_flags = 0;
 27218              		.loc 1 5860 2 view .LVU7104
5861:src/xeq.c     **** 
5862:src/xeq.c     **** 	if (sp != 0 && sp == LocalRegs) {
 27219              		.loc 1 5862 2 view .LVU7105
 27220              		.loc 1 5862 5 is_stmt 0 view .LVU7106
 27221 0028 7EB9     		cbnz	r6, .L1961
 27222              	.LVL2095:
5863:src/xeq.c     **** 		// resize required
5864:src/xeq.c     **** 		old_size = local_levels();
5865:src/xeq.c     **** 		sp += old_size;
5866:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5867:src/xeq.c     **** 	}
5868:src/xeq.c     **** 	// compute space needed
5869:src/xeq.c     **** 	sp -= size;
 27223              		.loc 1 5869 2 is_stmt 1 view .LVU7107
5870:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27224              		.loc 1 5870 10 is_stmt 0 view .LVU7108
 27225 002a 4D4B     		ldr	r3, .L1979+4
5869:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27226              		.loc 1 5869 5 view .LVU7109
 27227 002c C8F10004 		rsb	r4, r8, #0
 27228              		.loc 1 5870 5 view .LVU7110
 27229 0030 1B68     		ldr	r3, [r3]
5869:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27230              		.loc 1 5869 5 view .LVU7111
 27231 0032 24B2     		sxth	r4, r4
 27232              	.LVL2096:
 27233              		.loc 1 5870 2 is_stmt 1 view .LVU7112
 27234              		.loc 1 5870 6 is_stmt 0 view .LVU7113
 27235 0034 6242     		rsbs	r2, r4, #0
 27236              		.loc 1 5870 5 view .LVU7114
 27237 0036 9A42     		cmp	r2, r3
 27238 0038 42DC     		bgt	.L1967
 27239 003a 4FEA4409 		lsl	r9, r4, #1
 27240 003e DFF828B1 		ldr	fp, .L1979+12
 27241 0042 4FEA450A 		lsl	r10, r5, #1
 27242 0046 4B46     		mov	r3, r9
 27243 0048 13E0     		b	.L1965
 27244              	.LVL2097:
 27245              	.L1961:
5862:src/xeq.c     **** 		// resize required
 27246              		.loc 1 5862 23 discriminator 1 view .LVU7115
 27247 004a B4F9DE47 		ldrsh	r4, [r4, #2014]
5862:src/xeq.c     **** 		// resize required
 27248              		.loc 1 5862 14 discriminator 1 view .LVU7116
 27249 004e B442     		cmp	r4, r6
 27250 0050 28D0     		beq	.L1966
5869:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27251              		.loc 1 5869 2 is_stmt 1 view .LVU7117
 27252              		.loc 1 5870 10 is_stmt 0 view .LVU7118
 27253 0052 434B     		ldr	r3, .L1979+4
ARM GAS  /tmp/ccBFDvgN.s 			page 696


5869:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27254              		.loc 1 5869 5 view .LVU7119
 27255 0054 A6EB0804 		sub	r4, r6, r8
 27256              		.loc 1 5870 5 view .LVU7120
 27257 0058 1B68     		ldr	r3, [r3]
5869:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27258              		.loc 1 5869 5 view .LVU7121
 27259 005a 24B2     		sxth	r4, r4
 27260              	.LVL2098:
 27261              		.loc 1 5870 2 is_stmt 1 view .LVU7122
 27262              		.loc 1 5870 6 is_stmt 0 view .LVU7123
 27263 005c 6242     		rsbs	r2, r4, #0
 27264              		.loc 1 5870 5 view .LVU7124
 27265 005e 9A42     		cmp	r2, r3
 27266 0060 2EDC     		bgt	.L1967
 27267 0062 4FEA4409 		lsl	r9, r4, #1
 27268 0066 DFF800B1 		ldr	fp, .L1979+12
 27269 006a 4FEA450A 		lsl	r10, r5, #1
 27270 006e 4B46     		mov	r3, r9
5860:src/xeq.c     **** 
 27271              		.loc 1 5860 21 view .LVU7125
 27272 0070 0026     		movs	r6, #0
 27273              	.LVL2099:
 27274              	.L1965:
5871:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
5872:src/xeq.c     **** 		return;
5873:src/xeq.c     **** 	}
5874:src/xeq.c     **** 	if ( old_size > 0 ) {
5875:src/xeq.c     **** 		// move previous contents to new destination
5876:src/xeq.c     **** 		int n;
5877:src/xeq.c     **** 		if (size > old_size) {
5878:src/xeq.c     **** 			n = old_size;
5879:src/xeq.c     **** 			size -= old_size;
5880:src/xeq.c     **** 		}
5881:src/xeq.c     **** 		else {
5882:src/xeq.c     **** 			n = size;
5883:src/xeq.c     **** 			size = 0;
5884:src/xeq.c     **** 		}
5885:src/xeq.c     **** 		xcopy(RetStk + sp, RetStk + LocalRegs, n + n);
5886:src/xeq.c     **** 	}
5887:src/xeq.c     **** 	// fill the rest with 0
5888:src/xeq.c     **** 	xset(RetStk + sp + old_size, 0, size + size);
 27275              		.loc 1 5888 2 is_stmt 1 view .LVU7126
 27276              		.loc 1 5888 19 is_stmt 0 view .LVU7127
 27277 0072 DBF80000 		ldr	r0, [fp]
 27278              		.loc 1 5888 2 view .LVU7128
 27279 0076 5246     		mov	r2, r10
 27280 0078 1844     		add	r0, r0, r3
 27281 007a 0021     		movs	r1, #0
 27282 007c FFF7FEFF 		bl	xset
 27283              	.LVL2100:
5889:src/xeq.c     **** 
5890:src/xeq.c     **** 	// set marker, pointers and flags
5891:src/xeq.c     **** 	RetStk[sp] = marker;
 27284              		.loc 1 5891 2 is_stmt 1 view .LVU7129
5892:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27285              		.loc 1 5892 14 is_stmt 0 view .LVU7130
ARM GAS  /tmp/ccBFDvgN.s 			page 697


 27286 0080 3B68     		ldr	r3, [r7]
5891:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27287              		.loc 1 5891 13 view .LVU7131
 27288 0082 DBF80020 		ldr	r2, [fp]
5858:src/xeq.c     **** 	int old_size = 0;
 27289              		.loc 1 5858 23 view .LVU7132
 27290 0086 48F48058 		orr	r8, r8, #4096
 27291              	.LVL2101:
5891:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27292              		.loc 1 5891 13 view .LVU7133
 27293 008a 22F80980 		strh	r8, [r2, r9]	@ movhi
 27294              		.loc 1 5892 2 is_stmt 1 view .LVU7134
5893:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27295              		.loc 1 5893 3 is_stmt 0 view .LVU7135
 27296 008e 0021     		movs	r1, #0
5892:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27297              		.loc 1 5892 24 view .LVU7136
 27298 0090 A3F8DE47 		strh	r4, [r3, #2014]	@ movhi
5892:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27299              		.loc 1 5892 12 view .LVU7137
 27300 0094 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
 27301              		.loc 1 5893 2 is_stmt 1 view .LVU7138
 27302              		.loc 1 5893 3 is_stmt 0 view .LVU7139
 27303 0098 7020     		movs	r0, #112
 27304 009a FFF7FEFF 		bl	flag_word
 27305              	.LVL2102:
 27306              		.loc 1 5893 36 view .LVU7140
 27307 009e 0680     		strh	r6, [r0]	@ movhi
 27308              	.L1959:
5894:src/xeq.c     **** }
 27309              		.loc 1 5894 1 view .LVU7141
 27310 00a0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27311              	.LVL2103:
 27312              	.L1966:
5864:src/xeq.c     **** 		sp += old_size;
 27313              		.loc 1 5864 3 is_stmt 1 view .LVU7142
 27314              	.LBB3583:
 27315              	.LBI3583:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 27316              		.loc 1 217 5 view .LVU7143
 27317              	.LBB3584:
 218:src/xeq.c     **** }
 27318              		.loc 1 218 2 view .LVU7144
 218:src/xeq.c     **** }
 27319              		.loc 1 218 57 is_stmt 0 view .LVU7145
 27320 00a4 002C     		cmp	r4, #0
 27321 00a6 13DB     		blt	.L1976
 218:src/xeq.c     **** }
 27322              		.loc 1 218 57 view .LVU7146
 27323              	.LBE3584:
 27324              	.LBE3583:
5865:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27325              		.loc 1 5865 3 is_stmt 1 view .LVU7147
 27326              	.LVL2104:
5866:src/xeq.c     **** 	}
 27327              		.loc 1 5866 3 view .LVU7148
5866:src/xeq.c     **** 	}
ARM GAS  /tmp/ccBFDvgN.s 			page 698


 27328              		.loc 1 5866 16 is_stmt 0 view .LVU7149
 27329 00a8 0021     		movs	r1, #0
 27330              	.LVL2105:
5866:src/xeq.c     **** 	}
 27331              		.loc 1 5866 16 view .LVU7150
 27332 00aa 7020     		movs	r0, #112
 27333 00ac FFF7FEFF 		bl	flag_word
 27334              	.LVL2106:
5870:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27335              		.loc 1 5870 10 view .LVU7151
 27336 00b0 2B4B     		ldr	r3, .L1979+4
5869:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27337              		.loc 1 5869 5 view .LVU7152
 27338 00b2 A4EB0804 		sub	r4, r4, r8
 27339              	.LVL2107:
5870:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27340              		.loc 1 5870 5 view .LVU7153
 27341 00b6 1B68     		ldr	r3, [r3]
5869:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27342              		.loc 1 5869 5 view .LVU7154
 27343 00b8 24B2     		sxth	r4, r4
5870:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27344              		.loc 1 5870 6 view .LVU7155
 27345 00ba 6242     		rsbs	r2, r4, #0
 27346              	.LVL2108:
5869:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27347              		.loc 1 5869 2 is_stmt 1 view .LVU7156
5870:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27348              		.loc 1 5870 2 view .LVU7157
5870:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27349              		.loc 1 5870 5 is_stmt 0 view .LVU7158
 27350 00bc 9A42     		cmp	r2, r3
 27351 00be 3EDD     		ble	.L1977
 27352              	.LVL2109:
 27353              	.L1967:
5871:src/xeq.c     **** 		return;
 27354              		.loc 1 5871 3 is_stmt 1 view .LVU7159
 27355              	.LBB3586:
 27356              	.LBI3586:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27357              		.loc 1 546 5 view .LVU7160
 27358              	.LBB3587:
 547:src/xeq.c     **** 		Error = e;
 27359              		.loc 1 547 2 view .LVU7161
 547:src/xeq.c     **** 		Error = e;
 27360              		.loc 1 547 12 is_stmt 0 view .LVU7162
 27361 00c0 284B     		ldr	r3, .L1979+8
 547:src/xeq.c     **** 		Error = e;
 27362              		.loc 1 547 5 view .LVU7163
 27363 00c2 1A68     		ldr	r2, [r3]
 27364 00c4 002A     		cmp	r2, #0
 27365 00c6 EBD1     		bne	.L1959
 27366              	.LVL2110:
 27367              	.LBB3588:
 27368              	.LBI3588:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27369              		.loc 1 546 5 is_stmt 1 view .LVU7164
ARM GAS  /tmp/ccBFDvgN.s 			page 699


 27370              	.LBB3589:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27371              		.loc 1 548 3 view .LVU7165
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27372              		.loc 1 548 9 is_stmt 0 view .LVU7166
 27373 00c8 0B22     		movs	r2, #11
 27374 00ca 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27375              		.loc 1 549 3 is_stmt 1 view .LVU7167
 27376              	.LBE3589:
 27377              	.LBE3588:
 27378              	.LBE3587:
 27379              	.LBE3586:
 27380              		.loc 1 5894 1 is_stmt 0 view .LVU7168
 27381 00cc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27382              	.LVL2111:
 27383              	.L1976:
 27384              	.LBB3590:
 27385              	.LBB3585:
 218:src/xeq.c     **** }
 27386              		.loc 1 218 25 view .LVU7169
 27387 00d0 DFF894B0 		ldr	fp, .L1979+12
 27388 00d4 DBF80030 		ldr	r3, [fp]
 27389 00d8 33F81490 		ldrh	r9, [r3, r4, lsl #1]
 27390 00dc C9F30B09 		ubfx	r9, r9, #0, #12
 27391              	.LVL2112:
 218:src/xeq.c     **** }
 27392              		.loc 1 218 25 view .LVU7170
 27393              	.LBE3585:
 27394              	.LBE3590:
5865:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27395              		.loc 1 5865 3 is_stmt 1 view .LVU7171
5865:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27396              		.loc 1 5865 6 is_stmt 0 view .LVU7172
 27397 00e0 4C44     		add	r4, r4, r9
5866:src/xeq.c     **** 	}
 27398              		.loc 1 5866 16 view .LVU7173
 27399 00e2 0021     		movs	r1, #0
 27400              	.LVL2113:
5866:src/xeq.c     **** 	}
 27401              		.loc 1 5866 16 view .LVU7174
 27402 00e4 7020     		movs	r0, #112
 27403 00e6 FFF7FEFF 		bl	flag_word
 27404              	.LVL2114:
5865:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27405              		.loc 1 5865 6 view .LVU7175
 27406 00ea A4B2     		uxth	r4, r4
 27407              	.LVL2115:
5866:src/xeq.c     **** 	}
 27408              		.loc 1 5866 3 is_stmt 1 view .LVU7176
5870:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27409              		.loc 1 5870 10 is_stmt 0 view .LVU7177
 27410 00ec 1C4B     		ldr	r3, .L1979+4
5866:src/xeq.c     **** 	}
 27411              		.loc 1 5866 13 view .LVU7178
 27412 00ee 0688     		ldrh	r6, [r0]
 27413              	.LVL2116:
ARM GAS  /tmp/ccBFDvgN.s 			page 700


5869:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27414              		.loc 1 5869 2 is_stmt 1 view .LVU7179
5870:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27415              		.loc 1 5870 5 is_stmt 0 view .LVU7180
 27416 00f0 1B68     		ldr	r3, [r3]
5869:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27417              		.loc 1 5869 5 view .LVU7181
 27418 00f2 A4EB0804 		sub	r4, r4, r8
 27419              	.LVL2117:
5869:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27420              		.loc 1 5869 5 view .LVU7182
 27421 00f6 24B2     		sxth	r4, r4
 27422              	.LVL2118:
5870:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27423              		.loc 1 5870 2 is_stmt 1 view .LVU7183
5870:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27424              		.loc 1 5870 6 is_stmt 0 view .LVU7184
 27425 00f8 6242     		rsbs	r2, r4, #0
5870:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27426              		.loc 1 5870 5 view .LVU7185
 27427 00fa 9A42     		cmp	r2, r3
 27428 00fc E0DC     		bgt	.L1967
5874:src/xeq.c     **** 		// move previous contents to new destination
 27429              		.loc 1 5874 2 is_stmt 1 view .LVU7186
5874:src/xeq.c     **** 		// move previous contents to new destination
 27430              		.loc 1 5874 5 is_stmt 0 view .LVU7187
 27431 00fe B9F1000F 		cmp	r9, #0
 27432 0102 25D0     		beq	.L1978
 27433              	.LBB3591:
5876:src/xeq.c     **** 		if (size > old_size) {
 27434              		.loc 1 5876 3 is_stmt 1 view .LVU7188
5877:src/xeq.c     **** 			n = old_size;
 27435              		.loc 1 5877 3 view .LVU7189
5885:src/xeq.c     **** 	}
 27436              		.loc 1 5885 31 is_stmt 0 view .LVU7190
 27437 0104 3B68     		ldr	r3, [r7]
5885:src/xeq.c     **** 	}
 27438              		.loc 1 5885 3 view .LVU7191
 27439 0106 DBF80000 		ldr	r0, [fp]
5885:src/xeq.c     **** 	}
 27440              		.loc 1 5885 29 view .LVU7192
 27441 010a B3F9DE17 		ldrsh	r1, [r3, #2014]
5877:src/xeq.c     **** 			n = old_size;
 27442              		.loc 1 5877 6 view .LVU7193
 27443 010e 4D45     		cmp	r5, r9
5878:src/xeq.c     **** 			size -= old_size;
 27444              		.loc 1 5878 4 is_stmt 1 view .LVU7194
 27445              	.LVL2119:
5879:src/xeq.c     **** 		}
 27446              		.loc 1 5879 4 view .LVU7195
5879:src/xeq.c     **** 		}
 27447              		.loc 1 5879 9 is_stmt 0 view .LVU7196
 27448 0110 C2BF     		ittt	gt
 27449 0112 A5EB0905 		subgt	r5, r5, r9
 27450              	.LVL2120:
5879:src/xeq.c     **** 		}
 27451              		.loc 1 5879 9 view .LVU7197
ARM GAS  /tmp/ccBFDvgN.s 			page 701


 27452 0116 4FEA450A 		lslgt	r10, r5, #1
 27453 011a 4D46     		movgt	r5, r9
 27454              	.LVL2121:
5885:src/xeq.c     **** 	}
 27455              		.loc 1 5885 3 is_stmt 1 view .LVU7198
 27456 011c 00EB4101 		add	r1, r0, r1, lsl #1
 27457 0120 4FEA4502 		lsl	r2, r5, #1
 27458 0124 00EB4400 		add	r0, r0, r4, lsl #1
 27459 0128 D8BF     		it	le
 27460 012a 4FF0000A 		movle	r10, #0
 27461 012e FFF7FEFF 		bl	xcopy
 27462              	.LVL2122:
 27463 0132 04EB0903 		add	r3, r4, r9
 27464 0136 5B00     		lsls	r3, r3, #1
5885:src/xeq.c     **** 	}
 27465              		.loc 1 5885 16 is_stmt 0 view .LVU7199
 27466 0138 4FEA4409 		lsl	r9, r4, #1
 27467              	.LVL2123:
5885:src/xeq.c     **** 	}
 27468              		.loc 1 5885 16 view .LVU7200
 27469 013c 99E7     		b	.L1965
 27470              	.LVL2124:
 27471              	.L1977:
5885:src/xeq.c     **** 	}
 27472              		.loc 1 5885 16 view .LVU7201
 27473 013e 4FEA4409 		lsl	r9, r4, #1
 27474              	.LBE3591:
5866:src/xeq.c     **** 	}
 27475              		.loc 1 5866 13 view .LVU7202
 27476 0142 0688     		ldrh	r6, [r0]
 27477 0144 DFF820B0 		ldr	fp, .L1979+12
 27478 0148 4FEA450A 		lsl	r10, r5, #1
 27479 014c 4B46     		mov	r3, r9
 27480 014e 90E7     		b	.L1965
 27481              	.LVL2125:
 27482              	.L1978:
5866:src/xeq.c     **** 	}
 27483              		.loc 1 5866 13 view .LVU7203
 27484 0150 4FEA4409 		lsl	r9, r4, #1
 27485              	.LVL2126:
5866:src/xeq.c     **** 	}
 27486              		.loc 1 5866 13 view .LVU7204
 27487 0154 4FEA450A 		lsl	r10, r5, #1
5874:src/xeq.c     **** 		// move previous contents to new destination
 27488              		.loc 1 5874 5 view .LVU7205
 27489 0158 4B46     		mov	r3, r9
 27490 015a 8AE7     		b	.L1965
 27491              	.L1980:
 27492              		.align	2
 27493              	.L1979:
 27494 015c 00000000 		.word	main_ram
 27495 0160 00000000 		.word	RetStkSize
 27496 0164 00000000 		.word	Error
 27497 0168 00000000 		.word	RetStk
 27498              		.cfi_endproc
 27499              	.LFE265:
 27501              		.section	.text.cmdxout,"ax",%progbits
ARM GAS  /tmp/ccBFDvgN.s 			page 702


 27502              		.align	1
 27503              		.p2align 2,,3
 27504              		.global	cmdxout
 27505              		.syntax unified
 27506              		.thumb
 27507              		.thumb_func
 27508              		.fpu fpv4-sp-d16
 27510              	cmdxout:
 27511              	.LVL2127:
 27512              	.LFB267:
5895:src/xeq.c     **** 
5896:src/xeq.c     **** 
5897:src/xeq.c     **** /*
5898:src/xeq.c     ****  *  xIN: Setup an environment for XROM based math routines:
5899:src/xeq.c     ****  *
5900:src/xeq.c     ****  *  - 12 Private double precision stack & special registers X to K
5901:src/xeq.c     ****  *  - private return stack for local flags & registers
5902:src/xeq.c     ****  *  - 6 system flags
5903:src/xeq.c     ****  *
5904:src/xeq.c     ****  *  Argument:
5905:src/xeq.c     ****  *      noLocals - bit 7
5906:src/xeq.c     ****  *      out      - bits 4..5
5907:src/xeq.c     ****  *      in       - bits 2..4		
5908:src/xeq.c     ****  *      setLastX - bit 1
5909:src/xeq.c     ****  *      complex  - bit 0
5910:src/xeq.c     ****  *
5911:src/xeq.c     ****  *  Local flags:
5912:src/xeq.c     ****  *      .00 to .09 are free for general use.
5913:src/xeq.c     ****  *	.10 - stack_depth as previously set by user, don't touch it!
5914:src/xeq.c     ****  *	.11 - mode_double as previously set by user, don't touch it!
5915:src/xeq.c     ****  *      .12 - complex, from argument, can be modified.
5916:src/xeq.c     ****  *	.13 - setLastX, from argumment, can be modified.
5917:src/xeq.c     ****  *	.14 - state_lift as desired on exit, set to 1 by default, can be modified.
5918:src/xeq.c     ****  *      .15 - reserved, indicates that xIN is active, set to 1, don't touch it!
5919:src/xeq.c     ****  *
5920:src/xeq.c     ****  *  If the call is repeated only the argument values are reevaluated.
5921:src/xeq.c     ****  */
5922:src/xeq.c     **** void cmdxin(unsigned int arg, enum rarg op) {
5923:src/xeq.c     **** 
5924:src/xeq.c     **** 	int i;
5925:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5926:src/xeq.c     **** 	REGISTER *previousLocals = NULL;
5927:src/xeq.c     **** 	unsigned short previousFlags = 0;
5928:src/xeq.c     **** 	int num_locals = 0;
5929:src/xeq.c     **** #endif
5930:src/xeq.c     **** #ifndef REALBUILD
5931:src/xeq.c     **** 	/* This should never happen in a real build but it causes havoc writing
5932:src/xeq.c     **** 	 * xrom code, so trap it here.
5933:src/xeq.c     **** 	 */
5934:src/xeq.c     **** 	if (XromFlags.xIN) {
5935:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5936:src/xeq.c     **** 		return;
5937:src/xeq.c     **** 	}
5938:src/xeq.c     **** #endif
5939:src/xeq.c     **** 
5940:src/xeq.c     **** 	// Setup the XromLocal and XromParams structures in volatile RAM
5941:src/xeq.c     **** 	// fill with 0
ARM GAS  /tmp/ccBFDvgN.s 			page 703


5942:src/xeq.c     **** 	xset(&XromLocal, 0, sizeof(XromLocal));
5943:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
5944:src/xeq.c     **** 
5945:src/xeq.c     **** 	// Flags
5946:src/xeq.c     **** 	XromFlags.state_lift_in = get_lift();
5947:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
5948:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
5949:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
5950:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
5951:src/xeq.c     **** 	XromFlags.state_lift = 1;
5952:src/xeq.c     **** 	XromFlags.xIN = 1;
5953:src/xeq.c     **** 
5954:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5955:src/xeq.c     **** 	// Save pointers to original local data
5956:src/xeq.c     **** 	if ((arg & 0x80) != 0 && LocalRegs < 0) {
5957:src/xeq.c     **** 		XromFlags.copyLocals = 1;
5958:src/xeq.c     **** 		previousFlags = *flag_word(LOCAL_FLAG_BASE, NULL);
5959:src/xeq.c     **** 		previousLocals = get_reg_n(LOCAL_REG_BASE);
5960:src/xeq.c     **** 		num_locals = local_regs();
5961:src/xeq.c     **** 	}
5962:src/xeq.c     **** #endif
5963:src/xeq.c     **** 	// Establish local return stack
5964:src/xeq.c     **** 	XromUserRetStk = RetStk;
5965:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
5966:src/xeq.c     **** 
5967:src/xeq.c     **** 	RetStk = XromRetStk;
5968:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5969:src/xeq.c     **** 	RetStkPtr = 0;			// Locals will be allocated later
5970:src/xeq.c     **** #else
5971:src/xeq.c     **** 	LocalRegs = RetStkPtr = -2;	// Allocate just the local flags
5972:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
5973:src/xeq.c     **** #endif
5974:src/xeq.c     **** 
5975:src/xeq.c     **** 	// Parse the argument into fields
5976:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5977:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x20) != 0;
5978:src/xeq.c     **** 	XromFlags.complex = (arg & 0x40) != 0;
5979:src/xeq.c     **** 	XromIn = (arg & 0x1f) % 5;
5980:src/xeq.c     **** 	XromOut = (arg & 0x1f) / 5;
5981:src/xeq.c     **** #else
5982:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x40) != 0;
5983:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
5984:src/xeq.c     **** 	XromIn = (arg & 0x7);
5985:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
5986:src/xeq.c     **** #endif
5987:src/xeq.c     **** 	if (XromFlags.complex) {
5988:src/xeq.c     **** 		// Complex arguments are always in pairs
5989:src/xeq.c     **** 		XromIn <<= 1;
5990:src/xeq.c     **** 		XromOut <<= 1;
5991:src/xeq.c     **** 	}
5992:src/xeq.c     **** 
5993:src/xeq.c     ****         UState.rounding_mode = 0;
5994:src/xeq.c     **** 
5995:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5996:src/xeq.c     **** 	// Allocate the local frame
5997:src/xeq.c     **** 	LocalRegs = 0;
5998:src/xeq.c     **** 	UState.mode_double = 1;		// Needed to allocate enough registers
ARM GAS  /tmp/ccBFDvgN.s 			page 704


5999:src/xeq.c     **** 	cmdlocr(num_locals, RARG_LOCR);
6000:src/xeq.c     **** 	if (XromFlags.copyLocals)
6001:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = previousFlags;
6002:src/xeq.c     **** #endif
6003:src/xeq.c     **** 	// Switch to double precision mode
6004:src/xeq.c     **** 	if (XromFlags.mode_int) {
6005:src/xeq.c     **** 		// Convert integers to decimal128
6006:src/xeq.c     **** #ifndef ENABLE_COPYLOCALS
6007:src/xeq.c     **** 		UState.mode_double = 1;
6008:src/xeq.c     **** #endif
6009:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
6010:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
6011:src/xeq.c     **** 	}
6012:src/xeq.c     **** 	else if (XromFlags.mode_double) {
6013:src/xeq.c     **** 		// No conversion necessary
6014:src/xeq.c     **** 		xcopy(XromStack, StackBase, sizeof(XromStack));
6015:src/xeq.c     **** 		StackBase = XromStack;
6016:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6017:src/xeq.c     **** 		if (XromFlags.copyLocals)
6018:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), previousLocals, num_locals);
6019:src/xeq.c     **** #endif
6020:src/xeq.c     **** 	}
6021:src/xeq.c     **** 	else {
6022:src/xeq.c     **** 		// Convert decimal64 to decinal128
6023:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6024:src/xeq.c     **** 		UState.mode_double = 0;		// This was the original state before xIN
6025:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
6026:src/xeq.c     **** 		if (XromFlags.copyLocals) {
6027:src/xeq.c     **** 			decimal64  *src  = &(previousLocals->s);
6028:src/xeq.c     **** 			decimal128 *dest = &(get_reg_n(LOCAL_REG_BASE)->d);
6029:src/xeq.c     **** 			while (num_locals--)
6030:src/xeq.c     **** 				packed128_from_packed(dest++, src++);
6031:src/xeq.c     **** 		}
6032:src/xeq.c     **** #else
6033:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
6034:src/xeq.c     **** #endif
6035:src/xeq.c     **** 	}
6036:src/xeq.c     **** 
6037:src/xeq.c     **** 	// Set stack size to 8 and turn on stack_lift
6038:src/xeq.c     **** 	set_lift();
6039:src/xeq.c     **** 	UState.stack_depth = 1;
6040:src/xeq.c     **** 
6041:src/xeq.c     **** 	// check for any NaNs in input
6042:src/xeq.c     **** 	for (i = 0; i < XromIn; ++i) {
6043:src/xeq.c     **** 		decNumber x;
6044:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
6045:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
6046:src/xeq.c     **** 			// domain error
6047:src/xeq.c     **** 			if (get_user_flag(NAN_FLAG)) {
6048:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
6049:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
6050:src/xeq.c     **** 				// Early exit of routine
6051:src/xeq.c     **** 				cmdxout(0, RARG_XROM_OUT);
6052:src/xeq.c     **** 			} 
6053:src/xeq.c     **** 			else
6054:src/xeq.c     **** 				report_err(ERR_DOMAIN);	// this will do all the cleanup
6055:src/xeq.c     **** 			return;
ARM GAS  /tmp/ccBFDvgN.s 			page 705


6056:src/xeq.c     **** 		}
6057:src/xeq.c     **** 	}
6058:src/xeq.c     **** }
6059:src/xeq.c     **** 
6060:src/xeq.c     **** /*
6061:src/xeq.c     ****  *  xOUT: Return from an XROM routine that has previously called xIN
6062:src/xeq.c     ****  *  Argument:
6063:src/xeq.c     ****  *     bit 0 set - do a RTN+1
6064:src/xeq.c     ****  *     bit 1 set - leave I alone even with a complex result
6065:src/xeq.c     ****  */
6066:src/xeq.c     **** void cmdxout(unsigned int arg, enum rarg op) {
 27513              		.loc 1 6066 46 is_stmt 1 view -0
 27514              		.cfi_startproc
 27515              		@ args = 0, pretend = 0, frame = 56
 27516              		@ frame_needed = 0, uses_anonymous_args = 0
6067:src/xeq.c     **** 	int i, dbl, intm;
 27517              		.loc 1 6067 2 view .LVU7207
6068:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6069:src/xeq.c     **** 	unsigned short flags = *flag_word(LOCAL_FLAG_BASE, NULL);
6070:src/xeq.c     **** 	REGISTER *locals = get_reg_n(LOCAL_REG_BASE);
6071:src/xeq.c     **** 	int num_locals = local_regs();
6072:src/xeq.c     **** #endif
6073:src/xeq.c     **** #ifndef REALBUILD
6074:src/xeq.c     **** 	// shouldn't happen in final build
6075:src/xeq.c     **** 	if (! XromFlags.xIN) {
 27518              		.loc 1 6075 2 view .LVU7208
6066:src/xeq.c     **** 	int i, dbl, intm;
 27519              		.loc 1 6066 46 is_stmt 0 view .LVU7209
 27520 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27521              		.cfi_def_cfa_offset 36
 27522              		.cfi_offset 4, -36
 27523              		.cfi_offset 5, -32
 27524              		.cfi_offset 6, -28
 27525              		.cfi_offset 7, -24
 27526              		.cfi_offset 8, -20
 27527              		.cfi_offset 9, -16
 27528              		.cfi_offset 10, -12
 27529              		.cfi_offset 11, -8
 27530              		.cfi_offset 14, -4
 27531              		.loc 1 6075 6 view .LVU7210
 27532 0004 774C     		ldr	r4, .L2027
 27533              		.loc 1 6075 5 view .LVU7211
 27534 0006 94F90130 		ldrsb	r3, [r4, #1]
 27535 000a 002B     		cmp	r3, #0
6066:src/xeq.c     **** 	int i, dbl, intm;
 27536              		.loc 1 6066 46 view .LVU7212
 27537 000c 8FB0     		sub	sp, sp, #60
 27538              		.cfi_def_cfa_offset 96
 27539              		.loc 1 6075 5 view .LVU7213
 27540 000e 07DB     		blt	.L1982
6076:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 27541              		.loc 1 6076 3 is_stmt 1 view .LVU7214
 27542              	.LVL2128:
 27543              	.LBB3615:
 27544              	.LBI3615:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27545              		.loc 1 546 5 view .LVU7215
ARM GAS  /tmp/ccBFDvgN.s 			page 706


 27546              	.LBB3616:
 547:src/xeq.c     **** 		Error = e;
 27547              		.loc 1 547 2 view .LVU7216
 547:src/xeq.c     **** 		Error = e;
 27548              		.loc 1 547 12 is_stmt 0 view .LVU7217
 27549 0010 754B     		ldr	r3, .L2027+4
 547:src/xeq.c     **** 		Error = e;
 27550              		.loc 1 547 5 view .LVU7218
 27551 0012 1A68     		ldr	r2, [r3]
 27552 0014 0AB9     		cbnz	r2, .L1981
 27553              	.LVL2129:
 27554              	.LBB3617:
 27555              	.LBI3617:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27556              		.loc 1 546 5 is_stmt 1 view .LVU7219
 27557              	.LBB3618:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27558              		.loc 1 548 3 view .LVU7220
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27559              		.loc 1 548 9 is_stmt 0 view .LVU7221
 27560 0016 0722     		movs	r2, #7
 27561 0018 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27562              		.loc 1 549 3 is_stmt 1 view .LVU7222
 27563              	.LVL2130:
 27564              	.L1981:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27565              		.loc 1 549 3 is_stmt 0 view .LVU7223
 27566              	.LBE3618:
 27567              	.LBE3617:
 27568              	.LBE3616:
 27569              	.LBE3615:
6077:src/xeq.c     **** 		return;
6078:src/xeq.c     **** 	}
6079:src/xeq.c     **** #endif
6080:src/xeq.c     **** 	// End special handling
6081:src/xeq.c     **** 	XromFlags.xIN = 0;
6082:src/xeq.c     **** 
6083:src/xeq.c     **** 	// Restore the global return stack
6084:src/xeq.c     **** 	RetStk = XromUserRetStk;
6085:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
6086:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
6087:src/xeq.c     **** 
6088:src/xeq.c     **** 	// RTN or RTN+1 depending on bit 0 of argument
6089:src/xeq.c     **** 	do_rtn(arg & 1);
6090:src/xeq.c     **** 
6091:src/xeq.c     **** 	// Switch back to user stack settings
6092:src/xeq.c     **** 	dbl = UState.mode_double = XromFlags.mode_double;
6093:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
6094:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
6095:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
6096:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
6097:src/xeq.c     **** 
6098:src/xeq.c     **** 	// Last X handling and complex flag
6099:src/xeq.c     **** 	if (XromFlags.setLastX) {
6100:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
6101:src/xeq.c     **** 			setlastXY();
ARM GAS  /tmp/ccBFDvgN.s 			page 707


6102:src/xeq.c     **** 		else
6103:src/xeq.c     **** 			setlastX();
6104:src/xeq.c     **** 	}
6105:src/xeq.c     **** 
6106:src/xeq.c     **** 	// Move the stack according to the in/out fields
6107:src/xeq.c     **** 	i = (int) XromOut - (int) XromIn;
6108:src/xeq.c     **** 	if (XromFlags.complex) {
6109:src/xeq.c     **** 		set_was_complex();
6110:src/xeq.c     **** 		while (i < 0) {
6111:src/xeq.c     **** 			// different stack handling in complex mode
6112:src/xeq.c     **** 			// more to consume then to push back
6113:src/xeq.c     **** 			lower2();
6114:src/xeq.c     **** 			i += 2;
6115:src/xeq.c     **** 		}
6116:src/xeq.c     **** 	}
6117:src/xeq.c     **** 	else {
6118:src/xeq.c     **** 		while (i < 0) {
6119:src/xeq.c     **** 			// more to consume then to push back
6120:src/xeq.c     **** 			lower();	
6121:src/xeq.c     **** 			++i;
6122:src/xeq.c     **** 		}
6123:src/xeq.c     **** 	}
6124:src/xeq.c     **** 	if (i > 0) {
6125:src/xeq.c     **** 		// more to push back then to consume
6126:src/xeq.c     **** 		if (! XromFlags.state_lift_in)
6127:src/xeq.c     **** 			--i;
6128:src/xeq.c     **** 		while (i > 0) {
6129:src/xeq.c     **** 			lift();
6130:src/xeq.c     **** 			--i;
6131:src/xeq.c     **** 		}
6132:src/xeq.c     **** 	}
6133:src/xeq.c     **** 	State2.state_lift = XromFlags.state_lift;
6134:src/xeq.c     **** 
6135:src/xeq.c     **** 	// Copy results
6136:src/xeq.c     **** 	i = XromOut;
6137:src/xeq.c     **** 	if (intm) {
6138:src/xeq.c     **** 		while (i--) {
6139:src/xeq.c     **** 			decNumber r;
6140:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
6141:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
6142:src/xeq.c     **** 		}
6143:src/xeq.c     **** 	}
6144:src/xeq.c     **** 	else if (dbl) {
6145:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
6146:src/xeq.c     **** 	}
6147:src/xeq.c     **** 	else {
6148:src/xeq.c     **** 		while (i--)
6149:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
6150:src/xeq.c     **** 	}
6151:src/xeq.c     **** 
6152:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6153:src/xeq.c     **** 	// Copy back local data
6154:src/xeq.c     **** 	if (XromFlags.copyLocals) {
6155:src/xeq.c     **** 		i = local_regs();
6156:src/xeq.c     **** 		num_locals = i < num_locals ? i : num_locals; 
6157:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = flags;
6158:src/xeq.c     **** 		if (intm) {
ARM GAS  /tmp/ccBFDvgN.s 			page 708


6159:src/xeq.c     **** 			// not used
6160:src/xeq.c     **** 		}
6161:src/xeq.c     **** 		else if (dbl) {
6162:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), locals, num_locals);
6163:src/xeq.c     **** 		}
6164:src/xeq.c     **** 		else {
6165:src/xeq.c     **** 			decimal64  *dest = &(get_reg_n(LOCAL_REG_BASE)->s);
6166:src/xeq.c     **** 			decimal128 *src  = &(locals->d);
6167:src/xeq.c     **** 			while (num_locals--)
6168:src/xeq.c     **** 				packed_from_packed128(dest++, src++);
6169:src/xeq.c     **** 		}
6170:src/xeq.c     **** 	}
6171:src/xeq.c     **** #endif
6172:src/xeq.c     **** }
 27570              		.loc 1 6172 1 view .LVU7224
 27571 001a 0FB0     		add	sp, sp, #60
 27572              		.cfi_remember_state
 27573              		.cfi_def_cfa_offset 36
 27574              		@ sp needed
 27575 001c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27576              	.LVL2131:
 27577              	.L1982:
 27578              		.cfi_restore_state
 27579              	.LBB3619:
 27580              	.LBB3620:
6085:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27581              		.loc 1 6085 2 view .LVU7225
 27582 0020 724F     		ldr	r7, .L2027+8
6086:src/xeq.c     **** 
 27583              		.loc 1 6086 12 view .LVU7226
 27584 0022 7349     		ldr	r1, .L2027+12
 27585              	.LVL2132:
6085:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27586              		.loc 1 6085 2 view .LVU7227
 27587 0024 3A68     		ldr	r2, [r7]
6081:src/xeq.c     **** 
 27588              		.loc 1 6081 16 view .LVU7228
 27589 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6085:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27590              		.loc 1 6085 12 view .LVU7229
 27591 0028 A689     		ldrh	r6, [r4, #12]
 27592 002a A2F8E267 		strh	r6, [r2, #2018]	@ movhi
 27593 002e 0546     		mov	r5, r0
 27594              	.LVL2133:
6085:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27595              		.loc 1 6085 12 view .LVU7230
 27596              	.LBE3620:
 27597              	.LBI3619:
6066:src/xeq.c     **** 	int i, dbl, intm;
 27598              		.loc 1 6066 6 is_stmt 1 view .LVU7231
 27599              	.LBB3649:
6081:src/xeq.c     **** 
 27600              		.loc 1 6081 2 view .LVU7232
6086:src/xeq.c     **** 
 27601              		.loc 1 6086 12 is_stmt 0 view .LVU7233
 27602 0030 0868     		ldr	r0, [r1]
 27603              	.LVL2134:
ARM GAS  /tmp/ccBFDvgN.s 			page 709


6084:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27604              		.loc 1 6084 9 view .LVU7234
 27605 0032 7049     		ldr	r1, .L2027+16
6086:src/xeq.c     **** 
 27606              		.loc 1 6086 12 view .LVU7235
 27607 0034 A2F8DE07 		strh	r0, [r2, #2014]	@ movhi
6081:src/xeq.c     **** 
 27608              		.loc 1 6081 16 view .LVU7236
 27609 0038 6FF3C713 		bfc	r3, #7, #1
6084:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27610              		.loc 1 6084 9 view .LVU7237
 27611 003c A268     		ldr	r2, [r4, #8]
 27612 003e 0A60     		str	r2, [r1]
6089:src/xeq.c     **** 
 27613              		.loc 1 6089 2 view .LVU7238
 27614 0040 05F00100 		and	r0, r5, #1
6081:src/xeq.c     **** 
 27615              		.loc 1 6081 16 view .LVU7239
 27616 0044 6370     		strb	r3, [r4, #1]
6084:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27617              		.loc 1 6084 2 is_stmt 1 view .LVU7240
6085:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27618              		.loc 1 6085 2 view .LVU7241
6086:src/xeq.c     **** 
 27619              		.loc 1 6086 2 view .LVU7242
6089:src/xeq.c     **** 
 27620              		.loc 1 6089 2 view .LVU7243
 27621 0046 FFF7FEFF 		bl	do_rtn
 27622              	.LVL2135:
6092:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27623              		.loc 1 6092 2 view .LVU7244
6092:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27624              		.loc 1 6092 38 is_stmt 0 view .LVU7245
 27625 004a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6092:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27626              		.loc 1 6092 8 view .LVU7246
 27627 004c 3868     		ldr	r0, [r7]
6094:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27628              		.loc 1 6094 41 view .LVU7247
 27629 004e A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
6093:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27630              		.loc 1 6093 21 view .LVU7248
 27631 0050 D0F8E827 		ldr	r2, [r0, #2024]
6096:src/xeq.c     **** 
 27632              		.loc 1 6096 12 view .LVU7249
 27633 0054 DFF8ACA1 		ldr	r10, .L2027+32
6092:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27634              		.loc 1 6092 38 view .LVU7250
 27635 0058 C3F3C009 		ubfx	r9, r3, #3, #1
 27636              	.LVL2136:
6093:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27637              		.loc 1 6093 2 is_stmt 1 view .LVU7251
6093:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27638              		.loc 1 6093 32 is_stmt 0 view .LVU7252
 27639 005c 03F00108 		and	r8, r3, #1
 27640              	.LVL2137:
6094:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
ARM GAS  /tmp/ccBFDvgN.s 			page 710


 27641              		.loc 1 6094 9 is_stmt 1 view .LVU7253
6095:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 27642              		.loc 1 6095 2 view .LVU7254
6093:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27643              		.loc 1 6093 21 is_stmt 0 view .LVU7255
 27644 0060 C3F38001 		ubfx	r1, r3, #2, #1
 27645 0064 48EA8933 		orr	r3, r8, r9, lsl #14
 27646              	.LVL2138:
6093:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27647              		.loc 1 6093 21 view .LVU7256
 27648 0068 43EAC143 		orr	r3, r3, r1, lsl #19
 27649 006c 6249     		ldr	r1, .L2027+20
 27650 006e 06F00706 		and	r6, r6, #7
 27651 0072 1140     		ands	r1, r1, r2
 27652 0074 43EA0673 		orr	r3, r3, r6, lsl #28
 27653 0078 0B43     		orrs	r3, r3, r1
 27654 007a C0F8E837 		str	r3, [r0, #2024]
6096:src/xeq.c     **** 
 27655              		.loc 1 6096 2 is_stmt 1 view .LVU7257
6096:src/xeq.c     **** 
 27656              		.loc 1 6096 14 is_stmt 0 view .LVU7258
 27657 007e 6420     		movs	r0, #100
 27658 0080 FFF7FEFF 		bl	get_reg_n
 27659              	.LVL2139:
6099:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27660              		.loc 1 6099 6 view .LVU7259
 27661 0084 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6096:src/xeq.c     **** 
 27662              		.loc 1 6096 12 view .LVU7260
 27663 0086 CAF80000 		str	r0, [r10]
6099:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27664              		.loc 1 6099 2 is_stmt 1 view .LVU7261
6099:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27665              		.loc 1 6099 5 is_stmt 0 view .LVU7262
 27666 008a 9606     		lsls	r6, r2, #26
 27667 008c 09D5     		bpl	.L1985
6100:src/xeq.c     **** 			setlastXY();
 27668              		.loc 1 6100 3 is_stmt 1 view .LVU7263
6100:src/xeq.c     **** 			setlastXY();
 27669              		.loc 1 6100 6 is_stmt 0 view .LVU7264
 27670 008e D006     		lsls	r0, r2, #27
 27671 0090 02D5     		bpl	.L1986
6100:src/xeq.c     **** 			setlastXY();
 27672              		.loc 1 6100 25 view .LVU7265
 27673 0092 A907     		lsls	r1, r5, #30
 27674 0094 40F19F80 		bpl	.L2023
 27675              	.L1986:
6103:src/xeq.c     **** 	}
 27676              		.loc 1 6103 4 is_stmt 1 view .LVU7266
 27677              	.LBB3621:
 27678              	.LBI3621:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 27679              		.loc 1 792 6 view .LVU7267
 27680              	.LBB3622:
 793:src/xeq.c     **** }
 27681              		.loc 1 793 2 view .LVU7268
 27682 0098 6421     		movs	r1, #100
ARM GAS  /tmp/ccBFDvgN.s 			page 711


 27683 009a 6C20     		movs	r0, #108
 27684 009c FFF7FEFF 		bl	copyreg_n
 27685              	.LVL2140:
 27686 00a0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27687              	.L1985:
 27688              	.LBE3622:
 27689              	.LBE3621:
6107:src/xeq.c     **** 	if (XromFlags.complex) {
 27690              		.loc 1 6107 2 view .LVU7269
6107:src/xeq.c     **** 	if (XromFlags.complex) {
 27691              		.loc 1 6107 6 is_stmt 0 view .LVU7270
 27692 00a2 94F805B0 		ldrb	fp, [r4, #5]	@ zero_extendqisi2
6107:src/xeq.c     **** 	if (XromFlags.complex) {
 27693              		.loc 1 6107 22 view .LVU7271
 27694 00a6 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
6108:src/xeq.c     **** 		set_was_complex();
 27695              		.loc 1 6108 5 view .LVU7272
 27696 00a8 D206     		lsls	r2, r2, #27
6107:src/xeq.c     **** 	if (XromFlags.complex) {
 27697              		.loc 1 6107 4 view .LVU7273
 27698 00aa ABEB030B 		sub	fp, fp, r3
 27699              	.LVL2141:
6108:src/xeq.c     **** 		set_was_complex();
 27700              		.loc 1 6108 2 is_stmt 1 view .LVU7274
6108:src/xeq.c     **** 		set_was_complex();
 27701              		.loc 1 6108 5 is_stmt 0 view .LVU7275
 27702 00ae 2BD5     		bpl	.L2024
6109:src/xeq.c     **** 		while (i < 0) {
 27703              		.loc 1 6109 3 is_stmt 1 view .LVU7276
 27704              	.LBB3623:
 27705              	.LBI3623:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 27706              		.loc 1 539 13 view .LVU7277
 27707              	.LBB3624:
 540:src/xeq.c     **** }
 27708              		.loc 1 540 2 view .LVU7278
 540:src/xeq.c     **** }
 27709              		.loc 1 540 20 is_stmt 0 view .LVU7279
 27710 00b0 524E     		ldr	r6, .L2027+24
 27711 00b2 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 27712 00b4 0121     		movs	r1, #1
 27713 00b6 61F38712 		bfi	r2, r1, #6, #2
 27714              	.LBE3624:
 27715              	.LBE3623:
6110:src/xeq.c     **** 			// different stack handling in complex mode
 27716              		.loc 1 6110 9 view .LVU7280
 27717 00ba BBF1000F 		cmp	fp, #0
 27718              	.LBB3626:
 27719              	.LBB3625:
 540:src/xeq.c     **** }
 27720              		.loc 1 540 20 view .LVU7281
 27721 00be 3275     		strb	r2, [r6, #20]
 540:src/xeq.c     **** }
 27722              		.loc 1 540 20 view .LVU7282
 27723              	.LBE3625:
 27724              	.LBE3626:
6110:src/xeq.c     **** 			// different stack handling in complex mode
ARM GAS  /tmp/ccBFDvgN.s 			page 712


 27725              		.loc 1 6110 9 is_stmt 1 view .LVU7283
 27726 00c0 13DA     		bge	.L1989
 27727 00c2 6FEA0B03 		mvn	r3, fp
 27728 00c6 23F00105 		bic	r5, r3, #1
 27729              	.LVL2142:
6110:src/xeq.c     **** 			// different stack handling in complex mode
 27730              		.loc 1 6110 9 is_stmt 0 view .LVU7284
 27731 00ca 0093     		str	r3, [sp]
 27732 00cc 0BF10203 		add	r3, fp, #2
 27733 00d0 0193     		str	r3, [sp, #4]
 27734 00d2 1D44     		add	r5, r5, r3
 27735              	.L1990:
6113:src/xeq.c     **** 			i += 2;
 27736              		.loc 1 6113 4 is_stmt 1 view .LVU7285
6114:src/xeq.c     **** 		}
 27737              		.loc 1 6114 6 is_stmt 0 view .LVU7286
 27738 00d4 0BF1020B 		add	fp, fp, #2
 27739              	.LVL2143:
6113:src/xeq.c     **** 			i += 2;
 27740              		.loc 1 6113 4 view .LVU7287
 27741 00d8 FFF7FEFF 		bl	lower2
 27742              	.LVL2144:
6114:src/xeq.c     **** 		}
 27743              		.loc 1 6114 4 is_stmt 1 view .LVU7288
6110:src/xeq.c     **** 			// different stack handling in complex mode
 27744              		.loc 1 6110 9 view .LVU7289
 27745 00dc AB45     		cmp	fp, r5
 27746 00de F9D1     		bne	.L1990
 27747 00e0 009B     		ldr	r3, [sp]
 27748 00e2 23F0010B 		bic	fp, r3, #1
 27749              	.LVL2145:
6110:src/xeq.c     **** 			// different stack handling in complex mode
 27750              		.loc 1 6110 9 is_stmt 0 view .LVU7290
 27751 00e6 019B     		ldr	r3, [sp, #4]
 27752 00e8 9B44     		add	fp, fp, r3
 27753              	.L1989:
 27754              	.LVL2146:
6124:src/xeq.c     **** 		// more to push back then to consume
 27755              		.loc 1 6124 2 is_stmt 1 view .LVU7291
6124:src/xeq.c     **** 		// more to push back then to consume
 27756              		.loc 1 6124 5 is_stmt 0 view .LVU7292
 27757 00ea BBF1000F 		cmp	fp, #0
 27758 00ee 14D0     		beq	.L1991
6126:src/xeq.c     **** 			--i;
 27759              		.loc 1 6126 3 is_stmt 1 view .LVU7293
6126:src/xeq.c     **** 			--i;
 27760              		.loc 1 6126 7 is_stmt 0 view .LVU7294
 27761 00f0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6126:src/xeq.c     **** 			--i;
 27762              		.loc 1 6126 6 view .LVU7295
 27763 00f2 9307     		lsls	r3, r2, #30
 27764 00f4 02D4     		bmi	.L1996
6127:src/xeq.c     **** 		while (i > 0) {
 27765              		.loc 1 6127 4 is_stmt 1 view .LVU7296
 27766              	.LVL2147:
6128:src/xeq.c     **** 			lift();
 27767              		.loc 1 6128 9 view .LVU7297
ARM GAS  /tmp/ccBFDvgN.s 			page 713


 27768 00f6 BBF1010B 		subs	fp, fp, #1
 27769              	.LVL2148:
6128:src/xeq.c     **** 			lift();
 27770              		.loc 1 6128 9 is_stmt 0 view .LVU7298
 27771 00fa 0ED0     		beq	.L1991
 27772              	.L1996:
6129:src/xeq.c     **** 			--i;
 27773              		.loc 1 6129 4 is_stmt 1 view .LVU7299
 27774 00fc FFF7FEFF 		bl	lift
 27775              	.LVL2149:
6130:src/xeq.c     **** 		}
 27776              		.loc 1 6130 4 view .LVU7300
6128:src/xeq.c     **** 			lift();
 27777              		.loc 1 6128 9 view .LVU7301
 27778 0100 BBF1010B 		subs	fp, fp, #1
 27779              	.LVL2150:
6128:src/xeq.c     **** 			lift();
 27780              		.loc 1 6128 9 is_stmt 0 view .LVU7302
 27781 0104 FAD1     		bne	.L1996
 27782 0106 08E0     		b	.L1991
 27783              	.LVL2151:
 27784              	.L2024:
6118:src/xeq.c     **** 			// more to consume then to push back
 27785              		.loc 1 6118 9 is_stmt 1 view .LVU7303
 27786 0108 BBF1000F 		cmp	fp, #0
 27787 010c 67DA     		bge	.L2025
 27788              	.L1988:
6120:src/xeq.c     **** 			++i;
 27789              		.loc 1 6120 4 view .LVU7304
 27790 010e FFF7FEFF 		bl	lower
 27791              	.LVL2152:
6121:src/xeq.c     **** 		}
 27792              		.loc 1 6121 4 view .LVU7305
6118:src/xeq.c     **** 			// more to consume then to push back
 27793              		.loc 1 6118 9 view .LVU7306
 27794 0112 1BF1010B 		adds	fp, fp, #1
 27795              	.LVL2153:
6118:src/xeq.c     **** 			// more to consume then to push back
 27796              		.loc 1 6118 9 is_stmt 0 view .LVU7307
 27797 0116 FAD1     		bne	.L1988
 27798 0118 384E     		ldr	r6, .L2027+24
 27799              	.LVL2154:
 27800              	.L1991:
6133:src/xeq.c     **** 
 27801              		.loc 1 6133 2 is_stmt 1 view .LVU7308
6133:src/xeq.c     **** 
 27802              		.loc 1 6133 31 is_stmt 0 view .LVU7309
 27803 011a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6133:src/xeq.c     **** 
 27804              		.loc 1 6133 20 view .LVU7310
 27805 011c F27D     		ldrb	r2, [r6, #23]	@ zero_extendqisi2
6136:src/xeq.c     **** 	if (intm) {
 27806              		.loc 1 6136 4 view .LVU7311
 27807 011e 6479     		ldrb	r4, [r4, #5]	@ zero_extendqisi2
6133:src/xeq.c     **** 
 27808              		.loc 1 6133 31 view .LVU7312
 27809 0120 C3F38013 		ubfx	r3, r3, #6, #1
ARM GAS  /tmp/ccBFDvgN.s 			page 714


6133:src/xeq.c     **** 
 27810              		.loc 1 6133 20 view .LVU7313
 27811 0124 63F38612 		bfi	r2, r3, #6, #1
 27812 0128 F275     		strb	r2, [r6, #23]
6136:src/xeq.c     **** 	if (intm) {
 27813              		.loc 1 6136 2 is_stmt 1 view .LVU7314
 27814              	.LVL2155:
6137:src/xeq.c     **** 		while (i--) {
 27815              		.loc 1 6137 2 view .LVU7315
6137:src/xeq.c     **** 		while (i--) {
 27816              		.loc 1 6137 5 is_stmt 0 view .LVU7316
 27817 012a B8F1000F 		cmp	r8, #0
 27818 012e 23D0     		beq	.L2026
6138:src/xeq.c     **** 			decNumber r;
 27819              		.loc 1 6138 9 is_stmt 1 view .LVU7317
6138:src/xeq.c     **** 			decNumber r;
 27820              		.loc 1 6138 11 is_stmt 0 view .LVU7318
 27821 0130 631E     		subs	r3, r4, #1
 27822              	.LVL2156:
6138:src/xeq.c     **** 			decNumber r;
 27823              		.loc 1 6138 9 view .LVU7319
 27824 0132 002C     		cmp	r4, #0
 27825 0134 3FF471AF 		beq	.L1981
 27826 0138 314D     		ldr	r5, .L2027+28
 27827 013a 6334     		adds	r4, r4, #99
 27828 013c 05EB0315 		add	r5, r5, r3, lsl #4
 27829 0140 05AE     		add	r6, sp, #20
 27830              	.LVL2157:
 27831              	.L1998:
 27832              	.LBB3627:
6139:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
 27833              		.loc 1 6139 4 is_stmt 1 view .LVU7320
6140:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
 27834              		.loc 1 6140 4 view .LVU7321
 27835 0142 3146     		mov	r1, r6
 27836 0144 2846     		mov	r0, r5
 27837 0146 FFF7FEFF 		bl	decimal128ToNumber
 27838              	.LVL2158:
6141:src/xeq.c     **** 		}
 27839              		.loc 1 6141 4 view .LVU7322
 27840 014a 3046     		mov	r0, r6
 27841 014c FFF7FEFF 		bl	intResult
 27842              	.LVL2159:
6141:src/xeq.c     **** 		}
 27843              		.loc 1 6141 4 is_stmt 0 view .LVU7323
 27844 0150 0246     		mov	r2, r0
 27845 0152 0B46     		mov	r3, r1
 27846              	.LBB3628:
 27847              	.LBB3629:
1423:src/xeq.c     **** }
 27848              		.loc 1 1423 8 view .LVU7324
 27849 0154 2046     		mov	r0, r4
 27850 0156 CDE90223 		strd	r2, [sp, #8]
 27851              	.LVL2160:
1423:src/xeq.c     **** }
 27852              		.loc 1 1423 8 view .LVU7325
 27853              	.LBE3629:
ARM GAS  /tmp/ccBFDvgN.s 			page 715


 27854              	.LBI3628:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 27855              		.loc 1 1422 6 is_stmt 1 view .LVU7326
 27856              	.LBB3630:
1423:src/xeq.c     **** }
 27857              		.loc 1 1423 2 view .LVU7327
1423:src/xeq.c     **** }
 27858              		.loc 1 1423 8 is_stmt 0 view .LVU7328
 27859 015a FFF7FEFF 		bl	get_reg_n
 27860              	.LVL2161:
1423:src/xeq.c     **** }
 27861              		.loc 1 1423 2 view .LVU7329
 27862 015e 0822     		movs	r2, #8
 27863 0160 013C     		subs	r4, r4, #1
 27864              	.LVL2162:
1423:src/xeq.c     **** }
 27865              		.loc 1 1423 2 view .LVU7330
 27866 0162 0DEB0201 		add	r1, sp, r2
 27867 0166 FFF7FEFF 		bl	xcopy
 27868              	.LVL2163:
1423:src/xeq.c     **** }
 27869              		.loc 1 1423 2 view .LVU7331
 27870              	.LBE3630:
 27871              	.LBE3628:
 27872              	.LBE3627:
6138:src/xeq.c     **** 			decNumber r;
 27873              		.loc 1 6138 9 is_stmt 1 view .LVU7332
 27874 016a 632C     		cmp	r4, #99
 27875 016c A5F11005 		sub	r5, r5, #16
 27876 0170 E7D1     		bne	.L1998
 27877              	.LBE3649:
 27878              	.LBE3619:
 27879              		.loc 1 6172 1 is_stmt 0 view .LVU7333
 27880 0172 0FB0     		add	sp, sp, #60
 27881              		.cfi_remember_state
 27882              		.cfi_def_cfa_offset 36
 27883              		@ sp needed
 27884 0174 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27885              	.LVL2164:
 27886              	.L2026:
 27887              		.cfi_restore_state
 27888              	.LBB3651:
 27889              	.LBB3650:
6144:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27890              		.loc 1 6144 7 is_stmt 1 view .LVU7334
6144:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27891              		.loc 1 6144 10 is_stmt 0 view .LVU7335
 27892 0178 B9F1000F 		cmp	r9, #0
 27893 017c 1AD1     		bne	.L1999
6148:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27894              		.loc 1 6148 9 is_stmt 1 view .LVU7336
6148:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27895              		.loc 1 6148 11 is_stmt 0 view .LVU7337
 27896 017e 631E     		subs	r3, r4, #1
 27897              	.LVL2165:
6148:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27898              		.loc 1 6148 9 view .LVU7338
ARM GAS  /tmp/ccBFDvgN.s 			page 716


 27899 0180 002C     		cmp	r4, #0
 27900 0182 3FF44AAF 		beq	.L1981
 27901 0186 1E4F     		ldr	r7, .L2027+28
 27902 0188 6334     		adds	r4, r4, #99
 27903 018a 07EB0317 		add	r7, r7, r3, lsl #4
 27904 018e 05AE     		add	r6, sp, #20
 27905              	.LVL2166:
 27906              	.L2002:
6149:src/xeq.c     **** 	}
 27907              		.loc 1 6149 4 is_stmt 1 view .LVU7339
 27908              	.LBB3631:
 27909              	.LBI3631:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27910              		.loc 1 718 11 view .LVU7340
 27911              	.LBB3632:
 719:src/xeq.c     **** }
 27912              		.loc 1 719 2 view .LVU7341
 719:src/xeq.c     **** }
 27913              		.loc 1 719 9 is_stmt 0 view .LVU7342
 27914 0190 2046     		mov	r0, r4
 27915 0192 FFF7FEFF 		bl	get_reg_n
 27916              	.LVL2167:
 27917              	.LBE3632:
 27918              	.LBE3631:
 27919              	.LBB3634:
 27920              	.LBB3635:
 650:src/xeq.c     **** }
 27921              		.loc 1 650 24 view .LVU7343
 27922 0196 3146     		mov	r1, r6
 27923              	.LBE3635:
 27924              	.LBE3634:
 27925              	.LBB3637:
 27926              	.LBB3633:
 719:src/xeq.c     **** }
 27927              		.loc 1 719 9 view .LVU7344
 27928 0198 0546     		mov	r5, r0
 27929              	.LVL2168:
 719:src/xeq.c     **** }
 27930              		.loc 1 719 9 view .LVU7345
 27931              	.LBE3633:
 27932              	.LBE3637:
 27933              	.LBB3638:
 27934              	.LBI3634:
 648:src/xeq.c     **** 	decNumber temp;
 27935              		.loc 1 648 6 is_stmt 1 view .LVU7346
 27936              	.LBB3636:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 27937              		.loc 1 649 2 view .LVU7347
 650:src/xeq.c     **** }
 27938              		.loc 1 650 2 view .LVU7348
 650:src/xeq.c     **** }
 27939              		.loc 1 650 24 is_stmt 0 view .LVU7349
 27940 019a 3846     		mov	r0, r7
 27941              	.LVL2169:
 650:src/xeq.c     **** }
 27942              		.loc 1 650 24 view .LVU7350
 27943 019c FFF7FEFF 		bl	decimal128ToNumber
ARM GAS  /tmp/ccBFDvgN.s 			page 717


 27944              	.LVL2170:
 27945 01a0 013C     		subs	r4, r4, #1
 27946              	.LVL2171:
 650:src/xeq.c     **** }
 27947              		.loc 1 650 24 view .LVU7351
 27948 01a2 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 27949              		.loc 1 650 2 view .LVU7352
 27950 01a4 2846     		mov	r0, r5
 27951 01a6 FFF7FEFF 		bl	packed_from_number
 27952              	.LVL2172:
 650:src/xeq.c     **** }
 27953              		.loc 1 650 2 view .LVU7353
 27954              	.LBE3636:
 27955              	.LBE3638:
6148:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27956              		.loc 1 6148 9 is_stmt 1 view .LVU7354
6148:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27957              		.loc 1 6148 9 is_stmt 0 view .LVU7355
 27958 01aa 632C     		cmp	r4, #99
 27959 01ac A7F11007 		sub	r7, r7, #16
 27960 01b0 EED1     		bne	.L2002
 27961 01b2 32E7     		b	.L1981
 27962              	.LVL2173:
 27963              	.L1999:
6145:src/xeq.c     **** 	}
 27964              		.loc 1 6145 3 is_stmt 1 view .LVU7356
 27965              	.LBB3639:
 27966              	.LBB3640:
 27967              	.LBB3641:
 27968              	.LBB3642:
1119:src/xeq.c     **** }
 27969              		.loc 1 1119 24 is_stmt 0 view .LVU7357
 27970 01b4 3B68     		ldr	r3, [r7]
 27971              	.LBE3642:
 27972              	.LBE3641:
 27973              	.LBE3640:
 27974              	.LBE3639:
6145:src/xeq.c     **** 	}
 27975              		.loc 1 6145 3 view .LVU7358
 27976 01b6 DAF80000 		ldr	r0, [r10]
 27977              	.LVL2174:
 27978              	.LBB3648:
 27979              	.LBI3639:
1537:src/xeq.c     **** 	if (is_dblmode())
 27980              		.loc 1 1537 6 is_stmt 1 view .LVU7359
 27981              	.LBB3647:
1538:src/xeq.c     **** 		n <<= 1;
 27982              		.loc 1 1538 2 view .LVU7360
 27983              	.LBB3645:
 27984              	.LBI3641:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27985              		.loc 1 1118 5 view .LVU7361
 27986              	.LBB3643:
1119:src/xeq.c     **** }
 27987              		.loc 1 1119 2 view .LVU7362
1119:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 718


 27988              		.loc 1 1119 24 is_stmt 0 view .LVU7363
 27989 01ba B3F8E827 		ldrh	r2, [r3, #2024]
 27990              	.LBE3643:
 27991              	.LBE3645:
1540:src/xeq.c     **** }
 27992              		.loc 1 1540 2 view .LVU7364
 27993 01be 1049     		ldr	r1, .L2027+28
 27994              	.LBB3646:
 27995              	.LBB3644:
1119:src/xeq.c     **** }
 27996              		.loc 1 1119 24 view .LVU7365
 27997 01c0 44F20103 		movw	r3, #16385
 27998              	.LBE3644:
 27999              	.LBE3646:
1538:src/xeq.c     **** 		n <<= 1;
 28000              		.loc 1 1538 5 view .LVU7366
 28001 01c4 1340     		ands	r3, r3, r2
 28002 01c6 B3F5804F 		cmp	r3, #16384
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 28003              		.loc 1 1539 3 is_stmt 1 view .LVU7367
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 28004              		.loc 1 1539 5 is_stmt 0 view .LVU7368
 28005 01ca 08BF     		it	eq
 28006 01cc 6400     		lsleq	r4, r4, #1
 28007              	.LVL2175:
1540:src/xeq.c     **** }
 28008              		.loc 1 1540 2 is_stmt 1 view .LVU7369
 28009 01ce E200     		lsls	r2, r4, #3
 28010 01d0 FFF7FEFF 		bl	xcopy
 28011              	.LVL2176:
1541:src/xeq.c     **** 
 28012              		.loc 1 1541 1 is_stmt 0 view .LVU7370
 28013 01d4 21E7     		b	.L1981
 28014              	.LVL2177:
 28015              	.L2023:
1541:src/xeq.c     **** 
 28016              		.loc 1 1541 1 view .LVU7371
 28017              	.LBE3647:
 28018              	.LBE3648:
6101:src/xeq.c     **** 		else
 28019              		.loc 1 6101 4 is_stmt 1 view .LVU7372
 28020 01d6 FFF7FEFF 		bl	setlastXY
 28021              	.LVL2178:
 28022 01da 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 28023 01dc 61E7     		b	.L1985
 28024              	.LVL2179:
 28025              	.L2025:
6101:src/xeq.c     **** 		else
 28026              		.loc 1 6101 4 is_stmt 0 view .LVU7373
 28027 01de 074E     		ldr	r6, .L2027+24
 28028 01e0 83E7     		b	.L1989
 28029              	.L2028:
 28030 01e2 00BF     		.align	2
 28031              	.L2027:
 28032 01e4 00000000 		.word	XromParams
 28033 01e8 00000000 		.word	Error
 28034 01ec 00000000 		.word	main_ram
ARM GAS  /tmp/ccBFDvgN.s 			page 719


 28035 01f0 00000000 		.word	UserLocalRegs
 28036 01f4 00000000 		.word	RetStk
 28037 01f8 FEBFF78F 		.word	-1879588866
 28038 01fc 00000000 		.word	StateWhileOn
 28039 0200 00000000 		.word	XromLocal
 28040 0204 00000000 		.word	StackBase
 28041              	.LBE3650:
 28042              	.LBE3651:
 28043              		.cfi_endproc
 28044              	.LFE267:
 28046              		.section	.text.cmdconverged,"ax",%progbits
 28047              		.align	1
 28048              		.p2align 2,,3
 28049              		.global	cmdconverged
 28050              		.syntax unified
 28051              		.thumb
 28052              		.thumb_func
 28053              		.fpu fpv4-sp-d16
 28055              	cmdconverged:
 28056              	.LVL2180:
 28057              	.LFB268:
6173:src/xeq.c     **** 
6174:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
6175:src/xeq.c     **** /*
6176:src/xeq.c     ****  *  Allow access to command argument from XROM
6177:src/xeq.c     ****  */
6178:src/xeq.c     **** void cmdxarg(unsigned int arg, enum rarg op) {
6179:src/xeq.c     **** 	set_reg_n_int_sgn(arg, XromArg, 0);
6180:src/xeq.c     **** }
6181:src/xeq.c     **** #endif
6182:src/xeq.c     **** 
6183:src/xeq.c     **** 
6184:src/xeq.c     **** /* A slightly obtuse command to check for convergence.
6185:src/xeq.c     ****  * Arguments are organised bitwise in this form:
6186:src/xeq.c     ****  *
6187:src/xeq.c     ****  *	SMMTT
6188:src/xeq.c     ****  *
6189:src/xeq.c     ****  * where:
6190:src/xeq.c     ****  *	TT is the tolerance parameter:
6191:src/xeq.c     ****  *
6192:src/xeq.c     ****  *	  	0	1e-14 tolerance
6193:src/xeq.c     ****  *	  	1	1e-24 tolerance
6194:src/xeq.c     ****  *	  	2	1e-32 tolerance
6195:src/xeq.c     ****  *	  	3	choose the best tolerance for the current modes
6196:src/xeq.c     ****  *			for user mode this means 0 for single precision and 2 for double precision
6197:src/xeq.c     ****  *
6198:src/xeq.c     ****  *	MM is the mode parameter:
6199:src/xeq.c     ****  *	  	0	compare real X & Y relatively
6200:src/xeq.c     ****  *	  	1	compare real X & Y absolutely
6201:src/xeq.c     ****  *	  	2	compare complex X/Y & Z/T for absolute difference
6202:src/xeq.c     ****  *	  	3	compare real X & Y relatively
6203:src/xeq.c     ****  *
6204:src/xeq.c     ****  *	S is the special number validation:
6205:src/xeq.c     ****  *		0	Nan & infinities are considered converged
6206:src/xeq.c     ****  *		1	NaN & infinities are not considered converged
6207:src/xeq.c     ****  *
6208:src/xeq.c     ****  * In integer mode, the arguemnt is completely ignored and an equality
ARM GAS  /tmp/ccBFDvgN.s 			page 720


6209:src/xeq.c     ****  * comparision is undertaken instead.
6210:src/xeq.c     ****  */
6211:src/xeq.c     **** static const decNumber * const convergence_tolerances[3] = {
6212:src/xeq.c     **** 	&const_1e_14, &const_1e_24, &const_1e_32
6213:src/xeq.c     **** };
6214:src/xeq.c     **** 
6215:src/xeq.c     **** void cmdconverged(unsigned int arg, enum rarg cmd) {
 28058              		.loc 1 6215 52 is_stmt 1 view -0
 28059              		.cfi_startproc
 28060              		@ args = 0, pretend = 0, frame = 216
 28061              		@ frame_needed = 0, uses_anonymous_args = 0
6216:src/xeq.c     **** 	const decNumber *tolerance;
 28062              		.loc 1 6216 2 view .LVU7375
6217:src/xeq.c     **** 	unsigned int tol = arg & 3;
 28063              		.loc 1 6217 2 view .LVU7376
6218:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
6219:src/xeq.c     **** 	const int specials = arg & 0x10;
6220:src/xeq.c     **** 	const int complex = mode == 2;
6221:src/xeq.c     **** 	const int absolute = mode == 1;
6222:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
6223:src/xeq.c     **** 	int res;
6224:src/xeq.c     **** 
6225:src/xeq.c     **** 	if (is_intmode()) {
 28064              		.loc 1 6225 6 is_stmt 0 view .LVU7377
 28065 0000 374B     		ldr	r3, .L2044
6215:src/xeq.c     **** 	const decNumber *tolerance;
 28066              		.loc 1 6215 52 view .LVU7378
 28067 0002 70B5     		push	{r4, r5, r6, lr}
 28068              		.cfi_def_cfa_offset 16
 28069              		.cfi_offset 4, -16
 28070              		.cfi_offset 5, -12
 28071              		.cfi_offset 6, -8
 28072              		.cfi_offset 14, -4
 28073              		.loc 1 6225 6 view .LVU7379
 28074 0004 1A68     		ldr	r2, [r3]
 28075 0006 92F8E817 		ldrb	r1, [r2, #2024]	@ zero_extendqisi2
 28076              	.LVL2181:
6218:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
 28077              		.loc 1 6218 2 is_stmt 1 view .LVU7380
6219:src/xeq.c     **** 	const int complex = mode == 2;
 28078              		.loc 1 6219 2 view .LVU7381
6220:src/xeq.c     **** 	const int absolute = mode == 1;
 28079              		.loc 1 6220 2 view .LVU7382
6221:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
 28080              		.loc 1 6221 2 view .LVU7383
6222:src/xeq.c     **** 	int res;
 28081              		.loc 1 6222 2 view .LVU7384
6223:src/xeq.c     **** 
 28082              		.loc 1 6223 2 view .LVU7385
 28083              		.loc 1 6225 2 view .LVU7386
 28084              		.loc 1 6225 5 is_stmt 0 view .LVU7387
 28085 000a CB07     		lsls	r3, r1, #31
6215:src/xeq.c     **** 	const decNumber *tolerance;
 28086              		.loc 1 6215 52 view .LVU7388
 28087 000c B8B0     		sub	sp, sp, #224
 28088              		.cfi_def_cfa_offset 240
 28089              		.loc 1 6225 5 view .LVU7389
ARM GAS  /tmp/ccBFDvgN.s 			page 721


 28090 000e 35D4     		bmi	.L2040
 28091 0010 00F00303 		and	r3, r0, #3
 28092              	.LVL2182:
6226:src/xeq.c     **** 		do_tst(regY_idx, TST_EQ);
6227:src/xeq.c     **** 		return;
6228:src/xeq.c     **** 	}
6229:src/xeq.c     **** 
6230:src/xeq.c     **** 	if (tol == 3) {
 28093              		.loc 1 6230 5 view .LVU7390
 28094 0014 032B     		cmp	r3, #3
 28095 0016 0446     		mov	r4, r0
 28096 0018 00F01005 		and	r5, r0, #16
 28097              	.LVL2183:
 28098              		.loc 1 6230 2 is_stmt 1 view .LVU7391
 28099              		.loc 1 6230 5 is_stmt 0 view .LVU7392
 28100 001c 24D0     		beq	.L2032
 28101 001e 314A     		ldr	r2, .L2044+4
 28102 0020 52F82360 		ldr	r6, [r2, r3, lsl #2]
 28103              	.LVL2184:
 28104              	.L2033:
6231:src/xeq.c     **** 		if (is_dblmode())
6232:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
6233:src/xeq.c     **** 		else
6234:src/xeq.c     **** 			tol = 0;
6235:src/xeq.c     **** 	}
6236:src/xeq.c     **** 	tolerance = convergence_tolerances[tol];
 28105              		.loc 1 6236 2 is_stmt 1 view .LVU7393
6237:src/xeq.c     **** 
6238:src/xeq.c     **** 	getXYZT(&x, &y, &z, &t);
 28106              		.loc 1 6238 2 view .LVU7394
 28107              	.LBB3652:
 28108              	.LBI3652:
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 28109              		.loc 1 879 6 view .LVU7395
 28110              	.LBB3653:
 880:src/xeq.c     **** 	getT(t);
 28111              		.loc 1 880 2 view .LVU7396
 28112 0024 1DAA     		add	r2, sp, #116
 28113              	.LVL2185:
 880:src/xeq.c     **** 	getT(t);
 28114              		.loc 1 880 2 is_stmt 0 view .LVU7397
 28115 0026 14A9     		add	r1, sp, #80
 28116              	.LVL2186:
 880:src/xeq.c     **** 	getT(t);
 28117              		.loc 1 880 2 view .LVU7398
 28118 0028 0BA8     		add	r0, sp, #44
 28119              	.LVL2187:
 880:src/xeq.c     **** 	getT(t);
 28120              		.loc 1 880 2 view .LVU7399
 28121 002a FFF7FEFF 		bl	getXYZ
 28122              	.LVL2188:
 881:src/xeq.c     **** }
 28123              		.loc 1 881 2 is_stmt 1 view .LVU7400
 28124              	.LBB3654:
 28125              	.LBI3654:
 850:src/xeq.c     **** 	getRegister(t, regT_idx);
 28126              		.loc 1 850 13 view .LVU7401
ARM GAS  /tmp/ccBFDvgN.s 			page 722


 28127              	.LBB3655:
 851:src/xeq.c     **** }
 28128              		.loc 1 851 2 view .LVU7402
 28129 002e 02A8     		add	r0, sp, #8
 28130              	.LVL2189:
 851:src/xeq.c     **** }
 28131              		.loc 1 851 2 is_stmt 0 view .LVU7403
 28132 0030 6721     		movs	r1, #103
 28133 0032 FFF7FEFF 		bl	getRegister
 28134              	.LVL2190:
 851:src/xeq.c     **** }
 28135              		.loc 1 851 2 view .LVU7404
 28136              	.LBE3655:
 28137              	.LBE3654:
 28138              	.LBE3653:
 28139              	.LBE3652:
6239:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || decNumberIsSpecial(&y))
 28140              		.loc 1 6239 2 is_stmt 1 view .LVU7405
 28141              		.loc 1 6239 29 is_stmt 0 view .LVU7406
 28142 0036 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 28143 003a 9DF85820 		ldrb	r2, [sp, #88]	@ zero_extendqisi2
 28144 003e 1343     		orrs	r3, r3, r2
 28145 0040 13F0700F 		tst	r3, #112
 28146 0044 0BD1     		bne	.L2034
6218:src/xeq.c     **** 	const int specials = arg & 0x10;
 28147              		.loc 1 6218 21 view .LVU7407
 28148 0046 C4F38104 		ubfx	r4, r4, #2, #2
 28149              	.LVL2191:
6240:src/xeq.c     **** 		res = specials;
6241:src/xeq.c     **** 	else if (complex) {
 28150              		.loc 1 6241 7 is_stmt 1 view .LVU7408
 28151              		.loc 1 6241 10 is_stmt 0 view .LVU7409
 28152 004a 022C     		cmp	r4, #2
 28153 004c 26D0     		beq	.L2041
6242:src/xeq.c     **** 		if (decNumberIsSpecial(&z) || decNumberIsSpecial(&t))
6243:src/xeq.c     **** 			res = specials;
6244:src/xeq.c     **** 		else {
6245:src/xeq.c     **** 			cmplxSubtract(&a, &b, &x, &y, &z, &t);
6246:src/xeq.c     **** 			cmplxR(&x, &a, &b);
6247:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
6248:src/xeq.c     **** 		}
6249:src/xeq.c     **** 	} else {
6250:src/xeq.c     **** 		if (absolute)
 28154              		.loc 1 6250 3 is_stmt 1 view .LVU7410
 28155              		.loc 1 6250 6 is_stmt 0 view .LVU7411
 28156 004e 012C     		cmp	r4, #1
6251:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28157              		.loc 1 6251 10 view .LVU7412
 28158 0050 3246     		mov	r2, r6
 28159 0052 14A9     		add	r1, sp, #80
 28160 0054 0BA8     		add	r0, sp, #44
6250:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28161              		.loc 1 6250 6 view .LVU7413
 28162 0056 3ED0     		beq	.L2042
6252:src/xeq.c     **** 		else
6253:src/xeq.c     **** 			res = relative_error(&x, &y, tolerance);
 28163              		.loc 1 6253 4 is_stmt 1 view .LVU7414
ARM GAS  /tmp/ccBFDvgN.s 			page 723


 28164              		.loc 1 6253 10 is_stmt 0 view .LVU7415
 28165 0058 FFF7FEFF 		bl	relative_error
 28166              	.LVL2192:
 28167 005c 0546     		mov	r5, r0
 28168              	.LVL2193:
 28169              	.L2034:
6254:src/xeq.c     **** 	}
6255:src/xeq.c     **** 	fin_tst(res);
 28170              		.loc 1 6255 2 is_stmt 1 discriminator 1 view .LVU7416
 28171 005e 2846     		mov	r0, r5
 28172 0060 FFF7FEFF 		bl	fin_tst
 28173              	.LVL2194:
6256:src/xeq.c     **** }
 28174              		.loc 1 6256 1 is_stmt 0 discriminator 1 view .LVU7417
 28175 0064 38B0     		add	sp, sp, #224
 28176              		.cfi_remember_state
 28177              		.cfi_def_cfa_offset 16
 28178              		@ sp needed
 28179 0066 70BD     		pop	{r4, r5, r6, pc}
 28180              	.LVL2195:
 28181              	.L2032:
 28182              		.cfi_restore_state
6231:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 28183              		.loc 1 6231 3 is_stmt 1 view .LVU7418
 28184              	.LBB3656:
 28185              	.LBI3656:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28186              		.loc 1 1118 5 view .LVU7419
 28187              	.LBB3657:
1119:src/xeq.c     **** }
 28188              		.loc 1 1119 2 view .LVU7420
1119:src/xeq.c     **** }
 28189              		.loc 1 1119 24 is_stmt 0 view .LVU7421
 28190 0068 B2F8E827 		ldrh	r2, [r2, #2024]
 28191 006c 44F20103 		movw	r3, #16385
 28192              	.LVL2196:
1119:src/xeq.c     **** }
 28193              		.loc 1 1119 24 view .LVU7422
 28194              	.LBE3657:
 28195              	.LBE3656:
6231:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 28196              		.loc 1 6231 6 view .LVU7423
 28197 0070 1340     		ands	r3, r3, r2
 28198 0072 B3F5804F 		cmp	r3, #16384
 28199 0076 07D0     		beq	.L2043
 28200 0078 1B4E     		ldr	r6, .L2044+8
 28201 007a D3E7     		b	.L2033
 28202              	.LVL2197:
 28203              	.L2040:
6226:src/xeq.c     **** 		return;
 28204              		.loc 1 6226 3 is_stmt 1 view .LVU7424
 28205 007c 0021     		movs	r1, #0
 28206 007e 6520     		movs	r0, #101
 28207              	.LVL2198:
6226:src/xeq.c     **** 		return;
 28208              		.loc 1 6226 3 is_stmt 0 view .LVU7425
 28209 0080 FFF7FEFF 		bl	do_tst
ARM GAS  /tmp/ccBFDvgN.s 			page 724


 28210              	.LVL2199:
6227:src/xeq.c     **** 	}
 28211              		.loc 1 6227 3 is_stmt 1 view .LVU7426
 28212              		.loc 1 6256 1 is_stmt 0 view .LVU7427
 28213 0084 38B0     		add	sp, sp, #224
 28214              		.cfi_remember_state
 28215              		.cfi_def_cfa_offset 16
 28216              		@ sp needed
 28217 0086 70BD     		pop	{r4, r5, r6, pc}
 28218              	.LVL2200:
 28219              	.L2043:
 28220              		.cfi_restore_state
6232:src/xeq.c     **** 		else
 28221              		.loc 1 6232 4 is_stmt 1 view .LVU7428
6232:src/xeq.c     **** 		else
 28222              		.loc 1 6232 27 is_stmt 0 view .LVU7429
 28223 0088 184B     		ldr	r3, .L2044+12
6232:src/xeq.c     **** 		else
 28224              		.loc 1 6232 57 view .LVU7430
 28225 008a 194E     		ldr	r6, .L2044+16
6232:src/xeq.c     **** 		else
 28226              		.loc 1 6232 27 view .LVU7431
 28227 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
6232:src/xeq.c     **** 		else
 28228              		.loc 1 6232 57 view .LVU7432
 28229 008e 194A     		ldr	r2, .L2044+20
 28230 0090 03F08803 		and	r3, r3, #136
 28231 0094 802B     		cmp	r3, #128
 28232 0096 08BF     		it	eq
 28233 0098 1646     		moveq	r6, r2
 28234 009a C3E7     		b	.L2033
 28235              	.LVL2201:
 28236              	.L2041:
6242:src/xeq.c     **** 			res = specials;
 28237              		.loc 1 6242 3 is_stmt 1 view .LVU7433
6242:src/xeq.c     **** 			res = specials;
 28238              		.loc 1 6242 30 is_stmt 0 view .LVU7434
 28239 009c 9DF87C30 		ldrb	r3, [sp, #124]	@ zero_extendqisi2
 28240 00a0 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 28241 00a4 1343     		orrs	r3, r3, r2
 28242 00a6 13F0700F 		tst	r3, #112
 28243 00aa D8D1     		bne	.L2034
6245:src/xeq.c     **** 			cmplxR(&x, &a, &b);
 28244              		.loc 1 6245 4 is_stmt 1 view .LVU7435
 28245 00ac 02AB     		add	r3, sp, #8
 28246 00ae 0193     		str	r3, [sp, #4]
 28247 00b0 1DAB     		add	r3, sp, #116
 28248 00b2 0093     		str	r3, [sp]
 28249 00b4 2FA9     		add	r1, sp, #188
 28250 00b6 14AB     		add	r3, sp, #80
 28251 00b8 26A8     		add	r0, sp, #152
 28252 00ba 0BAA     		add	r2, sp, #44
 28253 00bc FFF7FEFF 		bl	cmplxSubtract
 28254              	.LVL2202:
6246:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
 28255              		.loc 1 6246 4 view .LVU7436
 28256 00c0 2FAA     		add	r2, sp, #188
ARM GAS  /tmp/ccBFDvgN.s 			page 725


 28257 00c2 26A9     		add	r1, sp, #152
 28258 00c4 0BA8     		add	r0, sp, #44
 28259 00c6 FFF7FEFF 		bl	cmplxR
 28260              	.LVL2203:
6247:src/xeq.c     **** 		}
 28261              		.loc 1 6247 4 view .LVU7437
6247:src/xeq.c     **** 		}
 28262              		.loc 1 6247 10 is_stmt 0 view .LVU7438
 28263 00ca 3146     		mov	r1, r6
 28264 00cc 0BA8     		add	r0, sp, #44
 28265 00ce FFF7FEFF 		bl	dn_lt
 28266              	.LVL2204:
 28267 00d2 0546     		mov	r5, r0
 28268              	.LVL2205:
6247:src/xeq.c     **** 		}
 28269              		.loc 1 6247 10 view .LVU7439
 28270 00d4 C3E7     		b	.L2034
 28271              	.LVL2206:
 28272              	.L2042:
6251:src/xeq.c     **** 		else
 28273              		.loc 1 6251 4 is_stmt 1 view .LVU7440
6251:src/xeq.c     **** 		else
 28274              		.loc 1 6251 10 is_stmt 0 view .LVU7441
 28275 00d6 FFF7FEFF 		bl	absolute_error
 28276              	.LVL2207:
 28277 00da 0546     		mov	r5, r0
 28278              	.LVL2208:
6251:src/xeq.c     **** 		else
 28279              		.loc 1 6251 10 view .LVU7442
 28280 00dc BFE7     		b	.L2034
 28281              	.L2045:
 28282 00de 00BF     		.align	2
 28283              	.L2044:
 28284 00e0 00000000 		.word	main_ram
 28285 00e4 00000000 		.word	.LANCHOR7
 28286 00e8 00000000 		.word	const_1e_14
 28287 00ec 00000000 		.word	XromParams
 28288 00f0 00000000 		.word	const_1e_32
 28289 00f4 00000000 		.word	const_1e_24
 28290              		.cfi_endproc
 28291              	.LFE268:
 28293              		.section	.text.cmdshuffle,"ax",%progbits
 28294              		.align	1
 28295              		.p2align 2,,3
 28296              		.global	cmdshuffle
 28297              		.syntax unified
 28298              		.thumb
 28299              		.thumb_func
 28300              		.fpu fpv4-sp-d16
 28302              	cmdshuffle:
 28303              	.LVL2209:
 28304              	.LFB269:
6257:src/xeq.c     **** 
6258:src/xeq.c     **** void cmdshuffle(unsigned int arg, enum rarg cmd) {
 28305              		.loc 1 6258 50 is_stmt 1 view -0
 28306              		.cfi_startproc
 28307              		@ args = 0, pretend = 0, frame = 64
ARM GAS  /tmp/ccBFDvgN.s 			page 726


 28308              		@ frame_needed = 0, uses_anonymous_args = 0
6259:src/xeq.c     **** 	REGISTER xyzt[4];
 28309              		.loc 1 6259 2 view .LVU7444
6260:src/xeq.c     **** 	int i;
 28310              		.loc 1 6260 2 view .LVU7445
6261:src/xeq.c     **** 
6262:src/xeq.c     **** 	set_lift();
 28311              		.loc 1 6262 2 view .LVU7446
 28312              	.LBB3658:
 28313              	.LBI3658:
 767:src/xeq.c     ****     State2.state_lift = 1;
 28314              		.loc 1 767 6 view .LVU7447
 28315              	.LBB3659:
 768:src/xeq.c     **** }
 28316              		.loc 1 768 5 view .LVU7448
 28317              	.LBE3659:
 28318              	.LBE3658:
6258:src/xeq.c     **** 	REGISTER xyzt[4];
 28319              		.loc 1 6258 50 is_stmt 0 view .LVU7449
 28320 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28321              		.cfi_def_cfa_offset 24
 28322              		.cfi_offset 4, -24
 28323              		.cfi_offset 5, -20
 28324              		.cfi_offset 6, -16
 28325              		.cfi_offset 7, -12
 28326              		.cfi_offset 8, -8
 28327              		.cfi_offset 14, -4
 28328              	.LBB3664:
 28329              	.LBB3660:
 768:src/xeq.c     **** }
 28330              		.loc 1 768 23 view .LVU7450
 28331 0004 1F4A     		ldr	r2, .L2056
 28332 0006 204E     		ldr	r6, .L2056+4
 28333 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 28334              	.LBE3660:
 28335              	.LBE3664:
6258:src/xeq.c     **** 	REGISTER xyzt[4];
 28336              		.loc 1 6258 50 view .LVU7451
 28337 000a 90B0     		sub	sp, sp, #64
 28338              		.cfi_def_cfa_offset 88
 28339              	.LBB3665:
 28340              	.LBB3661:
 768:src/xeq.c     **** }
 28341              		.loc 1 768 23 view .LVU7452
 28342 000c 43F04003 		orr	r3, r3, #64
 28343              	.LBE3661:
 28344              	.LBE3665:
6258:src/xeq.c     **** 	REGISTER xyzt[4];
 28345              		.loc 1 6258 50 view .LVU7453
 28346 0010 0546     		mov	r5, r0
 28347              	.LBB3666:
 28348              	.LBB3662:
 768:src/xeq.c     **** }
 28349              		.loc 1 768 23 view .LVU7454
 28350 0012 D375     		strb	r3, [r2, #23]
 28351              	.LBE3662:
 28352              	.LBE3666:
ARM GAS  /tmp/ccBFDvgN.s 			page 727


6263:src/xeq.c     **** 	for (i=0; i<4; i++)
 28353              		.loc 1 6263 2 is_stmt 1 view .LVU7455
 28354              	.LVL2210:
 28355              		.loc 1 6263 12 view .LVU7456
 28356 0014 6F46     		mov	r7, sp
 28357              	.LBB3667:
 28358              	.LBB3663:
 768:src/xeq.c     **** }
 28359              		.loc 1 768 23 is_stmt 0 view .LVU7457
 28360 0016 6424     		movs	r4, #100
 28361              	.LBE3663:
 28362              	.LBE3667:
 28363              	.LBB3668:
 28364              	.LBB3669:
 28365              	.LBB3670:
 28366              	.LBB3671:
1119:src/xeq.c     **** }
 28367              		.loc 1 1119 24 view .LVU7458
 28368 0018 44F20108 		movw	r8, #16385
 28369              	.LVL2211:
 28370              	.L2048:
1119:src/xeq.c     **** }
 28371              		.loc 1 1119 24 view .LVU7459
 28372              	.LBE3671:
 28373              	.LBE3670:
 28374              	.LBE3669:
 28375              	.LBE3668:
6264:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28376              		.loc 1 6264 3 is_stmt 1 discriminator 3 view .LVU7460
 28377              	.LBB3678:
 28378              	.LBI3678:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28379              		.loc 1 718 11 discriminator 3 view .LVU7461
 28380              	.LBB3679:
 719:src/xeq.c     **** }
 28381              		.loc 1 719 2 discriminator 3 view .LVU7462
 719:src/xeq.c     **** }
 28382              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU7463
 28383 001c 2046     		mov	r0, r4
 28384 001e FFF7FEFF 		bl	get_reg_n
 28385              	.LVL2212:
 719:src/xeq.c     **** }
 28386              		.loc 1 719 9 discriminator 3 view .LVU7464
 28387              	.LBE3679:
 28388              	.LBE3678:
 28389              	.LBB3681:
 28390              	.LBB3676:
 28391              	.LBB3674:
 28392              	.LBB3672:
1119:src/xeq.c     **** }
 28393              		.loc 1 1119 24 discriminator 3 view .LVU7465
 28394 0022 3368     		ldr	r3, [r6]
 28395 0024 B3F8E837 		ldrh	r3, [r3, #2024]
 28396              	.LBE3672:
 28397              	.LBE3674:
 727:src/xeq.c     **** }
 28398              		.loc 1 727 2 discriminator 3 view .LVU7466
ARM GAS  /tmp/ccBFDvgN.s 			page 728


 28399 0028 08EA0303 		and	r3, r8, r3
 28400 002c B3F5804F 		cmp	r3, #16384
 28401              	.LBE3676:
 28402              	.LBE3681:
 28403              	.LBB3682:
 28404              	.LBB3680:
 719:src/xeq.c     **** }
 28405              		.loc 1 719 9 discriminator 3 view .LVU7467
 28406 0030 0146     		mov	r1, r0
 28407              	.LVL2213:
 719:src/xeq.c     **** }
 28408              		.loc 1 719 9 discriminator 3 view .LVU7468
 28409              	.LBE3680:
 28410              	.LBE3682:
 28411              	.LBB3683:
 28412              	.LBI3668:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 28413              		.loc 1 726 6 is_stmt 1 discriminator 3 view .LVU7469
 28414              	.LBB3677:
 727:src/xeq.c     **** }
 28415              		.loc 1 727 2 discriminator 3 view .LVU7470
 28416              	.LBB3675:
 28417              	.LBI3670:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28418              		.loc 1 1118 5 discriminator 3 view .LVU7471
 28419              	.LBB3673:
1119:src/xeq.c     **** }
 28420              		.loc 1 1119 2 discriminator 3 view .LVU7472
 28421              	.LBE3673:
 28422              	.LBE3675:
 727:src/xeq.c     **** }
 28423              		.loc 1 727 2 is_stmt 0 discriminator 3 view .LVU7473
 28424 0032 0CBF     		ite	eq
 28425 0034 1022     		moveq	r2, #16
 28426 0036 0822     		movne	r2, #8
 28427 0038 3846     		mov	r0, r7
 28428              	.LVL2214:
 727:src/xeq.c     **** }
 28429              		.loc 1 727 2 discriminator 3 view .LVU7474
 28430 003a 0134     		adds	r4, r4, #1
 28431              	.LVL2215:
 727:src/xeq.c     **** }
 28432              		.loc 1 727 2 discriminator 3 view .LVU7475
 28433 003c FFF7FEFF 		bl	xcopy
 28434              	.LVL2216:
 727:src/xeq.c     **** }
 28435              		.loc 1 727 2 discriminator 3 view .LVU7476
 28436              	.LBE3677:
 28437              	.LBE3683:
6263:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28438              		.loc 1 6263 17 is_stmt 1 discriminator 3 view .LVU7477
6263:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28439              		.loc 1 6263 12 discriminator 3 view .LVU7478
6263:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28440              		.loc 1 6263 2 is_stmt 0 discriminator 3 view .LVU7479
 28441 0040 682C     		cmp	r4, #104
 28442 0042 07F11007 		add	r7, r7, #16
ARM GAS  /tmp/ccBFDvgN.s 			page 729


 28443 0046 E9D1     		bne	.L2048
 28444 0048 6424     		movs	r4, #100
 28445              	.LBB3684:
 28446              	.LBB3685:
 28447              	.LBB3686:
 28448              	.LBB3687:
1119:src/xeq.c     **** }
 28449              		.loc 1 1119 24 view .LVU7480
 28450 004a 44F20107 		movw	r7, #16385
 28451              	.L2050:
 28452              	.LVL2217:
1119:src/xeq.c     **** }
 28453              		.loc 1 1119 24 view .LVU7481
 28454              	.LBE3687:
 28455              	.LBE3686:
 28456              	.LBE3685:
 28457              	.LBE3684:
6265:src/xeq.c     **** 
6266:src/xeq.c     **** 	for (i=0; i<4; i++) {
6267:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28458              		.loc 1 6267 3 is_stmt 1 view .LVU7482
 28459              	.LBB3694:
 28460              	.LBI3694:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28461              		.loc 1 718 11 view .LVU7483
 28462              	.LBB3695:
 719:src/xeq.c     **** }
 28463              		.loc 1 719 2 view .LVU7484
 719:src/xeq.c     **** }
 28464              		.loc 1 719 9 is_stmt 0 view .LVU7485
 28465 004e 2046     		mov	r0, r4
 28466 0050 FFF7FEFF 		bl	get_reg_n
 28467              	.LVL2218:
 719:src/xeq.c     **** }
 28468              		.loc 1 719 9 view .LVU7486
 28469              	.LBE3695:
 28470              	.LBE3694:
 28471              	.LBB3696:
 28472              	.LBB3692:
 28473              	.LBB3690:
 28474              	.LBB3688:
1119:src/xeq.c     **** }
 28475              		.loc 1 1119 24 view .LVU7487
 28476 0054 3368     		ldr	r3, [r6]
 28477 0056 B3F8E837 		ldrh	r3, [r3, #2024]
 28478              	.LBE3688:
 28479              	.LBE3690:
 727:src/xeq.c     **** }
 28480              		.loc 1 727 2 view .LVU7488
 28481 005a 3B40     		ands	r3, r3, r7
 28482 005c B3F5804F 		cmp	r3, #16384
 28483              	.LBE3692:
 28484              	.LBE3696:
 28485              		.loc 1 6267 36 view .LVU7489
 28486 0060 05F00301 		and	r1, r5, #3
 28487              	.LVL2219:
 28488              	.LBB3697:
ARM GAS  /tmp/ccBFDvgN.s 			page 730


 28489              	.LBI3684:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 28490              		.loc 1 726 6 is_stmt 1 view .LVU7490
 28491              	.LBB3693:
 727:src/xeq.c     **** }
 28492              		.loc 1 727 2 view .LVU7491
 28493              	.LBB3691:
 28494              	.LBI3686:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28495              		.loc 1 1118 5 view .LVU7492
 28496              	.LBB3689:
1119:src/xeq.c     **** }
 28497              		.loc 1 1119 2 view .LVU7493
 28498              	.LBE3689:
 28499              	.LBE3691:
 727:src/xeq.c     **** }
 28500              		.loc 1 727 2 is_stmt 0 view .LVU7494
 28501 0064 0CBF     		ite	eq
 28502 0066 1022     		moveq	r2, #16
 28503 0068 0822     		movne	r2, #8
 28504 006a 0134     		adds	r4, r4, #1
 28505              	.LVL2220:
 727:src/xeq.c     **** }
 28506              		.loc 1 727 2 view .LVU7495
 28507 006c 0DEB0111 		add	r1, sp, r1, lsl #4
 28508              	.LVL2221:
 727:src/xeq.c     **** }
 28509              		.loc 1 727 2 view .LVU7496
 28510 0070 FFF7FEFF 		bl	xcopy
 28511              	.LVL2222:
 727:src/xeq.c     **** }
 28512              		.loc 1 727 2 view .LVU7497
 28513              	.LBE3693:
 28514              	.LBE3697:
6268:src/xeq.c     **** 		arg >>= 2;
 28515              		.loc 1 6268 3 is_stmt 1 view .LVU7498
6266:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28516              		.loc 1 6266 2 is_stmt 0 view .LVU7499
 28517 0074 682C     		cmp	r4, #104
 28518              		.loc 1 6268 7 view .LVU7500
 28519 0076 4FEA9505 		lsr	r5, r5, #2
 28520              	.LVL2223:
6266:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28521              		.loc 1 6266 17 is_stmt 1 view .LVU7501
6266:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28522              		.loc 1 6266 12 view .LVU7502
6266:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28523              		.loc 1 6266 2 is_stmt 0 view .LVU7503
 28524 007a E8D1     		bne	.L2050
6269:src/xeq.c     **** 	}
6270:src/xeq.c     **** }
 28525              		.loc 1 6270 1 view .LVU7504
 28526 007c 10B0     		add	sp, sp, #64
 28527              		.cfi_def_cfa_offset 24
 28528              		@ sp needed
 28529 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28530              	.LVL2224:
ARM GAS  /tmp/ccBFDvgN.s 			page 731


 28531              	.L2057:
 28532              		.loc 1 6270 1 view .LVU7505
 28533 0082 00BF     		.align	2
 28534              	.L2056:
 28535 0084 00000000 		.word	StateWhileOn
 28536 0088 00000000 		.word	main_ram
 28537              		.cfi_endproc
 28538              	.LFE269:
 28540              		.section	.text.cmdmode,"ax",%progbits
 28541              		.align	1
 28542              		.p2align 2,,3
 28543              		.global	cmdmode
 28544              		.syntax unified
 28545              		.thumb
 28546              		.thumb_func
 28547              		.fpu fpv4-sp-d16
 28549              	cmdmode:
 28550              	.LVL2225:
 28551              	.LFB270:
6271:src/xeq.c     **** 
6272:src/xeq.c     **** /*
6273:src/xeq.c     ****  *  Toggle UState mode bits from XROM
6274:src/xeq.c     ****  */
6275:src/xeq.c     **** void cmdmode(unsigned int arg, enum rarg cmd) {
 28552              		.loc 1 6275 47 is_stmt 1 view -0
 28553              		.cfi_startproc
 28554              		@ args = 0, pretend = 0, frame = 0
 28555              		@ frame_needed = 0, uses_anonymous_args = 0
 28556              		@ link register save eliminated.
6276:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28557              		.loc 1 6276 2 view .LVU7507
6275:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28558              		.loc 1 6275 47 is_stmt 0 view .LVU7508
 28559 0000 30B4     		push	{r4, r5}
 28560              		.cfi_def_cfa_offset 8
 28561              		.cfi_offset 4, -8
 28562              		.cfi_offset 5, -4
6277:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 28563              		.loc 1 6277 62 view .LVU7509
 28564 0002 134D     		ldr	r5, .L2063
6276:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28565              		.loc 1 6276 35 view .LVU7510
 28566 0004 0122     		movs	r2, #1
 28567 0006 A0F12003 		sub	r3, r0, #32
 28568 000a C0F12004 		rsb	r4, r0, #32
 28569 000e 02FA03F3 		lsl	r3, r2, r3
 28570 0012 22FA04F4 		lsr	r4, r2, r4
 28571 0016 8240     		lsls	r2, r2, r0
 28572              		.loc 1 6277 62 view .LVU7511
 28573 0018 2868     		ldr	r0, [r5]
 28574              	.LVL2226:
6278:src/xeq.c     **** 
6279:src/xeq.c     **** 	if (cmd == RARG_MODE_SET)
 28575              		.loc 1 6279 5 view .LVU7512
 28576 001a 8129     		cmp	r1, #129
6280:src/xeq.c     **** 		*mode |= bit;
 28577              		.loc 1 6280 9 view .LVU7513
ARM GAS  /tmp/ccBFDvgN.s 			page 732


 28578 001c D0F8E457 		ldr	r5, [r0, #2020]
6276:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 28579              		.loc 1 6276 35 view .LVU7514
 28580 0020 43EA0403 		orr	r3, r3, r4
 28581              	.LVL2227:
6277:src/xeq.c     **** 
 28582              		.loc 1 6277 2 is_stmt 1 view .LVU7515
6279:src/xeq.c     **** 		*mode |= bit;
 28583              		.loc 1 6279 2 view .LVU7516
 28584              		.loc 1 6280 9 is_stmt 0 view .LVU7517
 28585 0024 00F2E471 		addw	r1, r0, #2020
 28586              	.LVL2228:
6279:src/xeq.c     **** 		*mode |= bit;
 28587              		.loc 1 6279 5 view .LVU7518
 28588 0028 0AD0     		beq	.L2062
6281:src/xeq.c     **** 	else
6282:src/xeq.c     **** 		*mode &= ~bit;
 28589              		.loc 1 6282 3 is_stmt 1 view .LVU7519
 28590              		.loc 1 6282 9 is_stmt 0 view .LVU7520
 28591 002a D0F8E847 		ldr	r4, [r0, #2024]
 28592 002e 25EA0202 		bic	r2, r5, r2
 28593              	.LVL2229:
 28594              		.loc 1 6282 9 view .LVU7521
 28595 0032 24EA0303 		bic	r3, r4, r3
 28596              	.LVL2230:
 28597              		.loc 1 6282 9 view .LVU7522
 28598 0036 C0F8E427 		str	r2, [r0, #2020]
6283:src/xeq.c     **** }
 28599              		.loc 1 6283 1 view .LVU7523
 28600 003a 30BC     		pop	{r4, r5}
 28601              		.cfi_remember_state
 28602              		.cfi_restore 5
 28603              		.cfi_restore 4
 28604              		.cfi_def_cfa_offset 0
 28605 003c 4B60     		str	r3, [r1, #4]
 28606 003e 7047     		bx	lr
 28607              	.LVL2231:
 28608              	.L2062:
 28609              		.cfi_restore_state
6280:src/xeq.c     **** 	else
 28610              		.loc 1 6280 3 is_stmt 1 view .LVU7524
6280:src/xeq.c     **** 	else
 28611              		.loc 1 6280 9 is_stmt 0 view .LVU7525
 28612 0040 4C68     		ldr	r4, [r1, #4]
 28613 0042 2A43     		orrs	r2, r2, r5
 28614              	.LVL2232:
6280:src/xeq.c     **** 	else
 28615              		.loc 1 6280 9 view .LVU7526
 28616 0044 2343     		orrs	r3, r3, r4
 28617              	.LVL2233:
6280:src/xeq.c     **** 	else
 28618              		.loc 1 6280 9 view .LVU7527
 28619 0046 C0F8E427 		str	r2, [r0, #2020]
 28620              		.loc 1 6283 1 view .LVU7528
 28621 004a 30BC     		pop	{r4, r5}
 28622              		.cfi_restore 5
 28623              		.cfi_restore 4
ARM GAS  /tmp/ccBFDvgN.s 			page 733


 28624              		.cfi_def_cfa_offset 0
 28625 004c 4B60     		str	r3, [r1, #4]
 28626 004e 7047     		bx	lr
 28627              	.L2064:
 28628              		.align	2
 28629              	.L2063:
 28630 0050 00000000 		.word	main_ram
 28631              		.cfi_endproc
 28632              	.LFE270:
 28634              		.section	.text.cmdlpop,"ax",%progbits
 28635              		.align	1
 28636              		.p2align 2,,3
 28637              		.global	cmdlpop
 28638              		.syntax unified
 28639              		.thumb
 28640              		.thumb_func
 28641              		.fpu fpv4-sp-d16
 28643              	cmdlpop:
 28644              	.LVL2234:
 28645              	.LFB271:
6284:src/xeq.c     **** 
6285:src/xeq.c     **** /*
6286:src/xeq.c     ****  *  Undo the effect of LOCL by popping the current local frame.
6287:src/xeq.c     ****  *  Needs to be executed from the same level that has established the frame.
6288:src/xeq.c     ****  */
6289:src/xeq.c     **** void cmdlpop(enum nilop op) {
 28646              		.loc 1 6289 29 is_stmt 1 view -0
 28647              		.cfi_startproc
 28648              		@ args = 0, pretend = 0, frame = 0
 28649              		@ frame_needed = 0, uses_anonymous_args = 0
6290:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28650              		.loc 1 6290 2 view .LVU7530
6289:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28651              		.loc 1 6289 29 is_stmt 0 view .LVU7531
 28652 0000 10B5     		push	{r4, lr}
 28653              		.cfi_def_cfa_offset 8
 28654              		.cfi_offset 4, -8
 28655              		.cfi_offset 14, -4
 28656              		.loc 1 6290 6 view .LVU7532
 28657 0002 0C4C     		ldr	r4, .L2069
 28658 0004 2368     		ldr	r3, [r4]
 28659 0006 B3F9DE17 		ldrsh	r1, [r3, #2014]
 28660              		.loc 1 6290 5 view .LVU7533
 28661 000a B3F9E227 		ldrsh	r2, [r3, #2018]
 28662 000e 8A42     		cmp	r2, r1
 28663 0010 05D0     		beq	.L2066
6291:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28664              		.loc 1 6291 3 is_stmt 1 view .LVU7534
 28665              	.LVL2235:
 28666              	.LBB3702:
 28667              	.LBI3702:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28668              		.loc 1 546 5 view .LVU7535
 28669              	.LBB3703:
 547:src/xeq.c     **** 		Error = e;
 28670              		.loc 1 547 2 view .LVU7536
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccBFDvgN.s 			page 734


 28671              		.loc 1 547 12 is_stmt 0 view .LVU7537
 28672 0012 094B     		ldr	r3, .L2069+4
 547:src/xeq.c     **** 		Error = e;
 28673              		.loc 1 547 5 view .LVU7538
 28674 0014 1A68     		ldr	r2, [r3]
 28675 0016 0AB9     		cbnz	r2, .L2065
 28676              	.LVL2236:
 28677              	.LBB3704:
 28678              	.LBI3704:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28679              		.loc 1 546 5 is_stmt 1 view .LVU7539
 28680              	.LBB3705:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28681              		.loc 1 548 3 view .LVU7540
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28682              		.loc 1 548 9 is_stmt 0 view .LVU7541
 28683 0018 0722     		movs	r2, #7
 28684 001a 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28685              		.loc 1 549 3 is_stmt 1 view .LVU7542
 28686              	.LVL2237:
 28687              	.L2065:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28688              		.loc 1 549 3 is_stmt 0 view .LVU7543
 28689              	.LBE3705:
 28690              	.LBE3704:
 28691              	.LBE3703:
 28692              	.LBE3702:
6292:src/xeq.c     **** 		return;
6293:src/xeq.c     **** 	}
6294:src/xeq.c     **** 	RetStkPtr = LocalRegs;
6295:src/xeq.c     **** 	retstk_up();
6296:src/xeq.c     **** 	--RetStkPtr;
6297:src/xeq.c     **** }
 28693              		.loc 1 6297 1 view .LVU7544
 28694 001c 10BD     		pop	{r4, pc}
 28695              	.LVL2238:
 28696              	.L2066:
6294:src/xeq.c     **** 	retstk_up();
 28697              		.loc 1 6294 2 is_stmt 1 view .LVU7545
6294:src/xeq.c     **** 	retstk_up();
 28698              		.loc 1 6294 12 is_stmt 0 view .LVU7546
 28699 001e A3F8E227 		strh	r2, [r3, #2018]	@ movhi
6295:src/xeq.c     **** 	--RetStkPtr;
 28700              		.loc 1 6295 2 is_stmt 1 view .LVU7547
 28701 0022 FFF7FEFF 		bl	retstk_up
 28702              	.LVL2239:
6296:src/xeq.c     **** }
 28703              		.loc 1 6296 2 view .LVU7548
6296:src/xeq.c     **** }
 28704              		.loc 1 6296 4 is_stmt 0 view .LVU7549
 28705 0026 2268     		ldr	r2, [r4]
6296:src/xeq.c     **** }
 28706              		.loc 1 6296 2 view .LVU7550
 28707 0028 B2F8E237 		ldrh	r3, [r2, #2018]
 28708 002c 013B     		subs	r3, r3, #1
 28709 002e A2F8E237 		strh	r3, [r2, #2018]	@ movhi
ARM GAS  /tmp/ccBFDvgN.s 			page 735


 28710              		.loc 1 6297 1 view .LVU7551
 28711 0032 10BD     		pop	{r4, pc}
 28712              	.L2070:
 28713              		.align	2
 28714              	.L2069:
 28715 0034 00000000 		.word	main_ram
 28716 0038 00000000 		.word	Error
 28717              		.cfi_endproc
 28718              	.LFE271:
 28720              		.section	.text.cmdregs,"ax",%progbits
 28721              		.align	1
 28722              		.p2align 2,,3
 28723              		.global	cmdregs
 28724              		.syntax unified
 28725              		.thumb
 28726              		.thumb_func
 28727              		.fpu fpv4-sp-d16
 28729              	cmdregs:
 28730              	.LVL2240:
 28731              	.LFB272:
6298:src/xeq.c     **** 
6299:src/xeq.c     **** /*
6300:src/xeq.c     ****  *  Reduce the number of global registers in favour of local data on the return stack
6301:src/xeq.c     ****  */
6302:src/xeq.c     **** void cmdregs(unsigned int arg, enum rarg op) {
 28732              		.loc 1 6302 46 is_stmt 1 view -0
 28733              		.cfi_startproc
 28734              		@ args = 0, pretend = 0, frame = 0
 28735              		@ frame_needed = 0, uses_anonymous_args = 0
6303:src/xeq.c     **** 	int distance;
 28736              		.loc 1 6303 2 view .LVU7553
6304:src/xeq.c     **** 	int length;
 28737              		.loc 1 6304 2 view .LVU7554
6305:src/xeq.c     **** 
6306:src/xeq.c     **** 	if (is_dblmode()) {
 28738              		.loc 1 6306 2 view .LVU7555
 28739              	.LBB3712:
 28740              	.LBI3712:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28741              		.loc 1 1118 5 view .LVU7556
 28742              	.LBB3713:
1119:src/xeq.c     **** }
 28743              		.loc 1 1119 2 view .LVU7557
 28744              	.LBE3713:
 28745              	.LBE3712:
6302:src/xeq.c     **** 	int distance;
 28746              		.loc 1 6302 46 is_stmt 0 view .LVU7558
 28747 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28748              		.cfi_def_cfa_offset 24
 28749              		.cfi_offset 4, -24
 28750              		.cfi_offset 5, -20
 28751              		.cfi_offset 6, -16
 28752              		.cfi_offset 7, -12
 28753              		.cfi_offset 8, -8
 28754              		.cfi_offset 14, -4
 28755              	.LBB3715:
 28756              	.LBB3714:
ARM GAS  /tmp/ccBFDvgN.s 			page 736


1119:src/xeq.c     **** }
 28757              		.loc 1 1119 12 view .LVU7559
 28758 0004 294F     		ldr	r7, .L2087
 28759 0006 3A68     		ldr	r2, [r7]
1119:src/xeq.c     **** }
 28760              		.loc 1 1119 24 view .LVU7560
 28761 0008 B2F8E817 		ldrh	r1, [r2, #2024]
 28762              	.LVL2241:
1119:src/xeq.c     **** }
 28763              		.loc 1 1119 24 view .LVU7561
 28764 000c 44F20103 		movw	r3, #16385
 28765              	.LBE3714:
 28766              	.LBE3715:
 28767              		.loc 1 6306 5 view .LVU7562
 28768 0010 0B40     		ands	r3, r3, r1
 28769 0012 B3F5804F 		cmp	r3, #16384
6302:src/xeq.c     **** 	int distance;
 28770              		.loc 1 6302 46 view .LVU7563
 28771 0016 0446     		mov	r4, r0
 28772              		.loc 1 6306 5 view .LVU7564
 28773 0018 36D0     		beq	.L2083
6307:src/xeq.c     **** 		// DP register length 16 bytes
6308:src/xeq.c     **** 		length = (arg << 4); 
6309:src/xeq.c     **** 		// We need additional room for lettered registers
6310:src/xeq.c     **** 		arg = (arg << 1) + STACK_SIZE + EXTRA_REG;
6311:src/xeq.c     **** 	}
6312:src/xeq.c     **** 	else {
6313:src/xeq.c     **** 		if (UState.mode_double && arg < STACK_SIZE + EXTRA_REG) {
 28774              		.loc 1 6313 3 is_stmt 1 view .LVU7565
 28775              		.loc 1 6313 7 is_stmt 0 view .LVU7566
 28776 001a 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 28777              		.loc 1 6313 6 view .LVU7567
 28778 001e 5B06     		lsls	r3, r3, #25
 28779 0020 29D4     		bmi	.L2084
 28780              	.L2074:
6314:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
6315:src/xeq.c     **** 			// We must not release the space needed for the DP lettered registers
6316:src/xeq.c     **** 			report_err(ERR_RANGE);
6317:src/xeq.c     **** 			return;
6318:src/xeq.c     **** 		}
6319:src/xeq.c     **** 		// register length 8 bytes
6320:src/xeq.c     **** 		length = (arg << 3);
 28781              		.loc 1 6320 3 is_stmt 1 view .LVU7568
 28782              		.loc 1 6320 17 is_stmt 0 view .LVU7569
 28783 0022 4FEAC408 		lsl	r8, r4, #3
 28784              	.LVL2242:
 28785              	.L2073:
6321:src/xeq.c     **** 	}
6322:src/xeq.c     **** 	distance = NumRegs - arg;
 28786              		.loc 1 6322 2 is_stmt 1 view .LVU7570
 28787              		.loc 1 6322 13 is_stmt 0 view .LVU7571
 28788 0026 92F8CF57 		ldrb	r5, [r2, #1999]	@ zero_extendqisi2
 28789              		.loc 1 6322 21 view .LVU7572
 28790 002a 2D1B     		subs	r5, r5, r4
 28791              	.LVL2243:
6323:src/xeq.c     **** 	
6324:src/xeq.c     **** 	// Move return stack, check for room
ARM GAS  /tmp/ccBFDvgN.s 			page 737


6325:src/xeq.c     **** 	if (move_retstk(distance << 2))
 28792              		.loc 1 6325 2 is_stmt 1 view .LVU7573
 28793              		.loc 1 6325 6 is_stmt 0 view .LVU7574
 28794 002c A800     		lsls	r0, r5, #2
 28795 002e FFF7FEFF 		bl	move_retstk
 28796              	.LVL2244:
 28797              		.loc 1 6325 5 view .LVU7575
 28798 0032 0646     		mov	r6, r0
 28799 0034 08B1     		cbz	r0, .L2085
 28800              	.LVL2245:
 28801              	.L2071:
6326:src/xeq.c     **** 		return;
6327:src/xeq.c     **** 	
6328:src/xeq.c     **** 	// Move register contents, including the statistics registers
6329:src/xeq.c     **** 	xcopy((unsigned short *)(Regs + TOPREALREG - arg)     - SizeStatRegs,
6330:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
6331:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
6332:src/xeq.c     **** 
6333:src/xeq.c     **** 	// Clear the left space
6334:src/xeq.c     **** 	if (distance < 0)
6335:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
6336:src/xeq.c     **** 	NumRegs = arg;
6337:src/xeq.c     **** }
 28802              		.loc 1 6337 1 view .LVU7576
 28803 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28804              	.LVL2246:
 28805              	.L2085:
6329:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28806              		.loc 1 6329 2 is_stmt 1 view .LVU7577
6329:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28807              		.loc 1 6329 27 is_stmt 0 view .LVU7578
 28808 003a 3B68     		ldr	r3, [r7]
6329:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28809              		.loc 1 6329 56 view .LVU7579
 28810 003c 1C4A     		ldr	r2, .L2087+4
6330:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28811              		.loc 1 6330 45 view .LVU7580
 28812 003e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
6329:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28813              		.loc 1 6329 56 view .LVU7581
 28814 0042 1268     		ldr	r2, [r2]
6330:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28815              		.loc 1 6330 45 view .LVU7582
 28816 0044 C1F16401 		rsb	r1, r1, #100
6329:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28817              		.loc 1 6329 45 view .LVU7583
 28818 0048 C4F16400 		rsb	r0, r4, #100
6329:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28819              		.loc 1 6329 27 view .LVU7584
 28820 004c 03F22C43 		addw	r3, r3, #1068
6330:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28821              		.loc 1 6330 56 view .LVU7585
 28822 0050 C2EB8101 		rsb	r1, r2, r1, lsl #2
6329:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28823              		.loc 1 6329 56 view .LVU7586
 28824 0054 C2EB8000 		rsb	r0, r2, r0, lsl #2
6329:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
ARM GAS  /tmp/ccBFDvgN.s 			page 738


 28825              		.loc 1 6329 2 view .LVU7587
 28826 0058 03EB4101 		add	r1, r3, r1, lsl #1
 28827 005c 08EB4202 		add	r2, r8, r2, lsl #1
 28828 0060 03EB4000 		add	r0, r3, r0, lsl #1
 28829 0064 FFF7FEFF 		bl	xcopy
 28830              	.LVL2247:
6334:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28831              		.loc 1 6334 2 is_stmt 1 view .LVU7588
6334:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28832              		.loc 1 6334 5 is_stmt 0 view .LVU7589
 28833 0068 002D     		cmp	r5, #0
 28834 006a 13DB     		blt	.L2086
 28835              	.L2078:
6336:src/xeq.c     **** }
 28836              		.loc 1 6336 2 is_stmt 1 view .LVU7590
6336:src/xeq.c     **** }
 28837              		.loc 1 6336 10 is_stmt 0 view .LVU7591
 28838 006c 3B68     		ldr	r3, [r7]
 28839 006e 83F8CF47 		strb	r4, [r3, #1999]
 28840              		.loc 1 6337 1 view .LVU7592
 28841 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28842              	.LVL2248:
 28843              	.L2084:
6313:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
 28844              		.loc 1 6313 26 discriminator 1 view .LVU7593
 28845 0076 0B28     		cmp	r0, #11
 28846 0078 D3D8     		bhi	.L2074
6316:src/xeq.c     **** 			return;
 28847              		.loc 1 6316 4 is_stmt 1 view .LVU7594
 28848              	.LVL2249:
 28849              	.LBB3716:
 28850              	.LBI3716:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28851              		.loc 1 546 5 view .LVU7595
 28852              	.LBB3717:
 547:src/xeq.c     **** 		Error = e;
 28853              		.loc 1 547 2 view .LVU7596
 547:src/xeq.c     **** 		Error = e;
 28854              		.loc 1 547 12 is_stmt 0 view .LVU7597
 28855 007a 0E4B     		ldr	r3, .L2087+8
 547:src/xeq.c     **** 		Error = e;
 28856              		.loc 1 547 5 view .LVU7598
 28857 007c 1A68     		ldr	r2, [r3]
 28858 007e 002A     		cmp	r2, #0
 28859 0080 D9D1     		bne	.L2071
 28860              	.LVL2250:
 28861              	.LBB3718:
 28862              	.LBI3718:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28863              		.loc 1 546 5 is_stmt 1 view .LVU7599
 28864              	.LBB3719:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28865              		.loc 1 548 3 view .LVU7600
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28866              		.loc 1 548 9 is_stmt 0 view .LVU7601
 28867 0082 0822     		movs	r2, #8
 28868 0084 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccBFDvgN.s 			page 739


 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28869              		.loc 1 549 3 is_stmt 1 view .LVU7602
 28870 0086 D6E7     		b	.L2071
 28871              	.LVL2251:
 28872              	.L2083:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28873              		.loc 1 549 3 is_stmt 0 view .LVU7603
 28874              	.LBE3719:
 28875              	.LBE3718:
 28876              	.LBE3717:
 28877              	.LBE3716:
6308:src/xeq.c     **** 		// We need additional room for lettered registers
 28878              		.loc 1 6308 3 is_stmt 1 view .LVU7604
6310:src/xeq.c     **** 	}
 28879              		.loc 1 6310 14 is_stmt 0 view .LVU7605
 28880 0088 4300     		lsls	r3, r0, #1
6308:src/xeq.c     **** 		// We need additional room for lettered registers
 28881              		.loc 1 6308 17 view .LVU7606
 28882 008a 4FEA0018 		lsl	r8, r0, #4
 28883              	.LVL2252:
6310:src/xeq.c     **** 	}
 28884              		.loc 1 6310 3 is_stmt 1 view .LVU7607
6310:src/xeq.c     **** 	}
 28885              		.loc 1 6310 7 is_stmt 0 view .LVU7608
 28886 008e 03F10C04 		add	r4, r3, #12
 28887              	.LVL2253:
6310:src/xeq.c     **** 	}
 28888              		.loc 1 6310 7 view .LVU7609
 28889 0092 C8E7     		b	.L2073
 28890              	.LVL2254:
 28891              	.L2086:
6335:src/xeq.c     **** 	NumRegs = arg;
 28892              		.loc 1 6335 3 is_stmt 1 view .LVU7610
6335:src/xeq.c     **** 	NumRegs = arg;
 28893              		.loc 1 6335 8 is_stmt 0 view .LVU7611
 28894 0094 3868     		ldr	r0, [r7]
6335:src/xeq.c     **** 	NumRegs = arg;
 28895              		.loc 1 6335 41 view .LVU7612
 28896 0096 6A42     		rsbs	r2, r5, #0
6335:src/xeq.c     **** 	NumRegs = arg;
 28897              		.loc 1 6335 26 view .LVU7613
 28898 0098 00EBC500 		add	r0, r0, r5, lsl #3
6335:src/xeq.c     **** 	NumRegs = arg;
 28899              		.loc 1 6335 3 view .LVU7614
 28900 009c 3146     		mov	r1, r6
 28901 009e D200     		lsls	r2, r2, #3
 28902 00a0 00F24C70 		addw	r0, r0, #1868
 28903 00a4 FFF7FEFF 		bl	xset
 28904              	.LVL2255:
 28905 00a8 E0E7     		b	.L2078
 28906              	.L2088:
 28907 00aa 00BF     		.align	2
 28908              	.L2087:
 28909 00ac 00000000 		.word	main_ram
 28910 00b0 00000000 		.word	SizeStatRegs
 28911 00b4 00000000 		.word	Error
 28912              		.cfi_endproc
ARM GAS  /tmp/ccBFDvgN.s 			page 740


 28913              	.LFE272:
 28915              		.section	.text.op_double,"ax",%progbits
 28916              		.align	1
 28917              		.p2align 2,,3
 28918              		.global	op_double
 28919              		.syntax unified
 28920              		.thumb
 28921              		.thumb_func
 28922              		.fpu fpv4-sp-d16
 28924              	op_double:
 28925              	.LVL2256:
 28926              	.LFB218:
4106:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28927              		.loc 1 4106 31 is_stmt 1 view -0
 28928              		.cfi_startproc
 28929              		@ args = 0, pretend = 0, frame = 40
 28930              		@ frame_needed = 0, uses_anonymous_args = 0
4107:src/xeq.c     **** 	const int intm = is_intmode();
 28931              		.loc 1 4107 2 view .LVU7616
4106:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28932              		.loc 1 4106 31 is_stmt 0 view .LVU7617
 28933 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28934              		.cfi_def_cfa_offset 24
 28935              		.cfi_offset 4, -24
 28936              		.cfi_offset 5, -20
 28937              		.cfi_offset 6, -16
 28938              		.cfi_offset 7, -12
 28939              		.cfi_offset 8, -8
 28940              		.cfi_offset 14, -4
4108:src/xeq.c     **** 	int i;
 28941              		.loc 1 4108 19 view .LVU7618
 28942 0004 454E     		ldr	r6, .L2117
 28943 0006 3368     		ldr	r3, [r6]
4111:src/xeq.c     **** 		// Mode switch
 28944              		.loc 1 4111 5 view .LVU7619
 28945 0008 A0F1B504 		sub	r4, r0, #181
4111:src/xeq.c     **** 		// Mode switch
 28946              		.loc 1 4111 19 view .LVU7620
 28947 000c 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4108:src/xeq.c     **** 	int i;
 28948              		.loc 1 4108 19 view .LVU7621
 28949 0010 93F8E887 		ldrb	r8, [r3, #2024]	@ zero_extendqisi2
 28950              	.LVL2257:
4108:src/xeq.c     **** 	int i;
 28951              		.loc 1 4108 2 is_stmt 1 view .LVU7622
4111:src/xeq.c     **** 		// Mode switch
 28952              		.loc 1 4111 5 is_stmt 0 view .LVU7623
 28953 0014 B4FA84F4 		clz	r4, r4
 28954 0018 C2F38011 		ubfx	r1, r2, #6, #1
 28955 001c 6409     		lsrs	r4, r4, #5
 28956 001e 8C42     		cmp	r4, r1
4106:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28957              		.loc 1 4106 31 view .LVU7624
 28958 0020 8AB0     		sub	sp, sp, #40
 28959              		.cfi_def_cfa_offset 64
4108:src/xeq.c     **** 	int i;
 28960              		.loc 1 4108 12 view .LVU7625
ARM GAS  /tmp/ccBFDvgN.s 			page 741


 28961 0022 08F00108 		and	r8, r8, #1
 28962              	.LVL2258:
4109:src/xeq.c     **** 
 28963              		.loc 1 4109 2 is_stmt 1 view .LVU7626
4111:src/xeq.c     **** 		// Mode switch
 28964              		.loc 1 4111 2 view .LVU7627
4111:src/xeq.c     **** 		// Mode switch
 28965              		.loc 1 4111 5 is_stmt 0 view .LVU7628
 28966 0026 41D0     		beq	.L2090
4113:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28967              		.loc 1 4113 3 is_stmt 1 view .LVU7629
4113:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28968              		.loc 1 4113 6 is_stmt 0 view .LVU7630
 28969 0028 B528     		cmp	r0, #181
 28970 002a 4AD0     		beq	.L2115
4131:src/xeq.c     **** 				// Convert X to K to single precision
 28971              		.loc 1 4131 4 is_stmt 1 view .LVU7631
4131:src/xeq.c     **** 				// Convert X to K to single precision
 28972              		.loc 1 4131 7 is_stmt 0 view .LVU7632
 28973 002c B8F1000F 		cmp	r8, #0
 28974 0030 25D1     		bne	.L2098
 28975 0032 6F24     		movs	r4, #111
 28976 0034 01AF     		add	r7, sp, #4
 28977              	.LVL2259:
 28978              	.L2100:
4135:src/xeq.c     **** 			}
 28979              		.loc 1 4135 6 is_stmt 1 discriminator 3 view .LVU7633
4135:src/xeq.c     **** 			}
 28980              		.loc 1 4135 28 is_stmt 0 discriminator 3 view .LVU7634
 28981 0036 03F22C43 		addw	r3, r3, #1068
 28982              	.LBB3720:
 28983              	.LBB3721:
 719:src/xeq.c     **** }
 28984              		.loc 1 719 9 discriminator 3 view .LVU7635
 28985 003a 2046     		mov	r0, r4
 28986              	.LBE3721:
 28987              	.LBE3720:
4135:src/xeq.c     **** 			}
 28988              		.loc 1 4135 6 discriminator 3 view .LVU7636
 28989 003c 03EBC405 		add	r5, r3, r4, lsl #3
 28990              	.LVL2260:
 28991              	.LBB3723:
 28992              	.LBI3720:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28993              		.loc 1 718 11 is_stmt 1 discriminator 3 view .LVU7637
 28994              	.LBB3722:
 719:src/xeq.c     **** }
 28995              		.loc 1 719 2 discriminator 3 view .LVU7638
 719:src/xeq.c     **** }
 28996              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU7639
 28997 0040 FFF7FEFF 		bl	get_reg_n
 28998              	.LVL2261:
 719:src/xeq.c     **** }
 28999              		.loc 1 719 9 discriminator 3 view .LVU7640
 29000              	.LBE3722:
 29001              	.LBE3723:
 29002              	.LBB3724:
ARM GAS  /tmp/ccBFDvgN.s 			page 742


 29003              	.LBI3724:
 648:src/xeq.c     **** 	decNumber temp;
 29004              		.loc 1 648 6 is_stmt 1 discriminator 3 view .LVU7641
 29005              	.LBB3725:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 29006              		.loc 1 649 2 discriminator 3 view .LVU7642
 650:src/xeq.c     **** }
 29007              		.loc 1 650 2 discriminator 3 view .LVU7643
 650:src/xeq.c     **** }
 29008              		.loc 1 650 24 is_stmt 0 discriminator 3 view .LVU7644
 29009 0044 3946     		mov	r1, r7
 29010 0046 FFF7FEFF 		bl	decimal128ToNumber
 29011              	.LVL2262:
 650:src/xeq.c     **** }
 29012              		.loc 1 650 24 discriminator 3 view .LVU7645
 29013 004a 013C     		subs	r4, r4, #1
 29014              	.LVL2263:
 650:src/xeq.c     **** }
 29015              		.loc 1 650 24 discriminator 3 view .LVU7646
 29016 004c 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 29017              		.loc 1 650 2 discriminator 3 view .LVU7647
 29018 004e 2846     		mov	r0, r5
 29019 0050 FFF7FEFF 		bl	packed_from_number
 29020              	.LVL2264:
 650:src/xeq.c     **** }
 29021              		.loc 1 650 2 discriminator 3 view .LVU7648
 29022              	.LBE3725:
 29023              	.LBE3724:
4134:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 29024              		.loc 1 4134 50 is_stmt 1 discriminator 3 view .LVU7649
4134:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 29025              		.loc 1 4134 42 discriminator 3 view .LVU7650
4134:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 29026              		.loc 1 4134 5 is_stmt 0 discriminator 3 view .LVU7651
 29027 0054 632C     		cmp	r4, #99
 29028 0056 3368     		ldr	r3, [r6]
 29029 0058 EDD1     		bne	.L2100
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29030              		.loc 1 4137 4 is_stmt 1 view .LVU7652
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29031              		.loc 1 4137 23 is_stmt 0 view .LVU7653
 29032 005a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29033              		.loc 1 4138 7 view .LVU7654
 29034 005e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29035              		.loc 1 4137 23 view .LVU7655
 29036 0062 6FF38612 		bfc	r2, #6, #1
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29037              		.loc 1 4138 7 view .LVU7656
 29038 0066 6429     		cmp	r1, #100
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29039              		.loc 1 4137 23 view .LVU7657
 29040 0068 83F8E927 		strb	r2, [r3, #2025]
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29041              		.loc 1 4138 4 is_stmt 1 view .LVU7658
ARM GAS  /tmp/ccBFDvgN.s 			page 743


4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29042              		.loc 1 4138 7 is_stmt 0 view .LVU7659
 29043 006c 1AD8     		bhi	.L2103
 29044              	.LVL2265:
 29045              	.L2112:
4142:src/xeq.c     **** 	if (intm) {
 29046              		.loc 1 4142 2 is_stmt 1 view .LVU7660
4142:src/xeq.c     **** 	if (intm) {
 29047              		.loc 1 4142 14 is_stmt 0 view .LVU7661
 29048 006e 6420     		movs	r0, #100
 29049 0070 FFF7FEFF 		bl	get_reg_n
 29050              	.LVL2266:
4142:src/xeq.c     **** 	if (intm) {
 29051              		.loc 1 4142 12 view .LVU7662
 29052 0074 2A4B     		ldr	r3, .L2117+4
 29053 0076 1860     		str	r0, [r3]
4143:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29054              		.loc 1 4143 2 is_stmt 1 view .LVU7663
 29055              	.L2089:
4147:src/xeq.c     **** 
 29056              		.loc 1 4147 1 is_stmt 0 view .LVU7664
 29057 0078 0AB0     		add	sp, sp, #40
 29058              		.cfi_remember_state
 29059              		.cfi_def_cfa_offset 24
 29060              		@ sp needed
 29061 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29062              	.LVL2267:
 29063              	.L2098:
 29064              		.cfi_restore_state
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29065              		.loc 1 4137 4 is_stmt 1 view .LVU7665
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29066              		.loc 1 4138 7 is_stmt 0 view .LVU7666
 29067 007e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29068              		.loc 1 4137 23 view .LVU7667
 29069 0082 6FF38612 		bfc	r2, #6, #1
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29070              		.loc 1 4138 7 view .LVU7668
 29071 0086 6429     		cmp	r1, #100
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29072              		.loc 1 4137 23 view .LVU7669
 29073 0088 83F8E927 		strb	r2, [r3, #2025]
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29074              		.loc 1 4138 4 is_stmt 1 view .LVU7670
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29075              		.loc 1 4138 7 is_stmt 0 view .LVU7671
 29076 008c 0AD8     		bhi	.L2103
 29077              	.LVL2268:
 29078              	.L2111:
4142:src/xeq.c     **** 	if (intm) {
 29079              		.loc 1 4142 2 is_stmt 1 view .LVU7672
4142:src/xeq.c     **** 	if (intm) {
 29080              		.loc 1 4142 14 is_stmt 0 view .LVU7673
 29081 008e 6420     		movs	r0, #100
 29082 0090 FFF7FEFF 		bl	get_reg_n
 29083              	.LVL2269:
ARM GAS  /tmp/ccBFDvgN.s 			page 744


4142:src/xeq.c     **** 	if (intm) {
 29084              		.loc 1 4142 12 view .LVU7674
 29085 0094 224B     		ldr	r3, .L2117+4
 29086 0096 1860     		str	r0, [r3]
4143:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29087              		.loc 1 4143 2 is_stmt 1 view .LVU7675
 29088              	.L2102:
4145:src/xeq.c     **** 	}
 29089              		.loc 1 4145 3 view .LVU7676
 29090 0098 D120     		movs	r0, #209
 29091 009a FFF7FEFF 		bl	op_float
 29092              	.LVL2270:
4147:src/xeq.c     **** 
 29093              		.loc 1 4147 1 is_stmt 0 view .LVU7677
 29094 009e 0AB0     		add	sp, sp, #40
 29095              		.cfi_remember_state
 29096              		.cfi_def_cfa_offset 24
 29097              		@ sp needed
 29098 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29099              	.LVL2271:
 29100              	.L2103:
 29101              		.cfi_restore_state
4139:src/xeq.c     **** 		}
 29102              		.loc 1 4139 5 is_stmt 1 view .LVU7678
 29103 00a4 7D21     		movs	r1, #125
 29104 00a6 6420     		movs	r0, #100
 29105 00a8 FFF7FEFF 		bl	cmdregs
 29106              	.LVL2272:
 29107              	.L2090:
4142:src/xeq.c     **** 	if (intm) {
 29108              		.loc 1 4142 2 view .LVU7679
4142:src/xeq.c     **** 	if (intm) {
 29109              		.loc 1 4142 14 is_stmt 0 view .LVU7680
 29110 00ac 6420     		movs	r0, #100
 29111 00ae FFF7FEFF 		bl	get_reg_n
 29112              	.LVL2273:
4142:src/xeq.c     **** 	if (intm) {
 29113              		.loc 1 4142 12 view .LVU7681
 29114 00b2 1B4B     		ldr	r3, .L2117+4
 29115 00b4 1860     		str	r0, [r3]
4143:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29116              		.loc 1 4143 2 is_stmt 1 view .LVU7682
4143:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29117              		.loc 1 4143 5 is_stmt 0 view .LVU7683
 29118 00b6 B8F1000F 		cmp	r8, #0
 29119 00ba EDD1     		bne	.L2102
4147:src/xeq.c     **** 
 29120              		.loc 1 4147 1 view .LVU7684
 29121 00bc 0AB0     		add	sp, sp, #40
 29122              		.cfi_remember_state
 29123              		.cfi_def_cfa_offset 24
 29124              		@ sp needed
 29125 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29126              	.LVL2274:
 29127              	.L2115:
 29128              		.cfi_restore_state
4114:src/xeq.c     **** 				// Need space for double precision stack
ARM GAS  /tmp/ccBFDvgN.s 			page 745


 29129              		.loc 1 4114 4 is_stmt 1 view .LVU7685
4114:src/xeq.c     **** 				// Need space for double precision stack
 29130              		.loc 1 4114 7 is_stmt 0 view .LVU7686
 29131 00c2 93F8CF27 		ldrb	r2, [r3, #1999]	@ zero_extendqisi2
 29132 00c6 0B2A     		cmp	r2, #11
 29133 00c8 1ED9     		bls	.L2116
 29134              	.LVL2275:
 29135              	.L2092:
4122:src/xeq.c     **** 			if (! intm) {
 29136              		.loc 1 4122 4 is_stmt 1 view .LVU7687
4122:src/xeq.c     **** 			if (! intm) {
 29137              		.loc 1 4122 23 is_stmt 0 view .LVU7688
 29138 00ca 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29139 00ce 42F04002 		orr	r2, r2, #64
 29140 00d2 83F8E927 		strb	r2, [r3, #2025]
4123:src/xeq.c     **** 				// Convert X to K to double precision
 29141              		.loc 1 4123 4 is_stmt 1 view .LVU7689
4123:src/xeq.c     **** 				// Convert X to K to double precision
 29142              		.loc 1 4123 7 is_stmt 0 view .LVU7690
 29143 00d6 B8F1000F 		cmp	r8, #0
 29144 00da D8D1     		bne	.L2111
 29145 00dc 6424     		movs	r4, #100
 29146 00de 01AF     		add	r7, sp, #4
 29147              	.L2096:
 29148              	.LVL2276:
4127:src/xeq.c     **** 			}
 29149              		.loc 1 4127 6 is_stmt 1 view .LVU7691
 29150              	.LBB3726:
 29151              	.LBI3726:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 29152              		.loc 1 718 11 view .LVU7692
 29153              	.LBB3727:
 719:src/xeq.c     **** }
 29154              		.loc 1 719 2 view .LVU7693
 719:src/xeq.c     **** }
 29155              		.loc 1 719 9 is_stmt 0 view .LVU7694
 29156 00e0 2046     		mov	r0, r4
 29157 00e2 FFF7FEFF 		bl	get_reg_n
 29158              	.LVL2277:
 29159              	.LBE3727:
 29160              	.LBE3726:
4127:src/xeq.c     **** 			}
 29161              		.loc 1 4127 48 view .LVU7695
 29162 00e6 3368     		ldr	r3, [r6]
 29163 00e8 03F22C43 		addw	r3, r3, #1068
 29164              	.LBB3729:
 29165              	.LBB3728:
 719:src/xeq.c     **** }
 29166              		.loc 1 719 9 view .LVU7696
 29167 00ec 0546     		mov	r5, r0
 29168              	.LVL2278:
 719:src/xeq.c     **** }
 29169              		.loc 1 719 9 view .LVU7697
 29170              	.LBE3728:
 29171              	.LBE3729:
 29172              	.LBB3730:
 29173              	.LBI3730:
ARM GAS  /tmp/ccBFDvgN.s 			page 746


 654:src/xeq.c     **** 	decNumber temp;
 29174              		.loc 1 654 6 is_stmt 1 view .LVU7698
 29175              	.LBB3731:
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 29176              		.loc 1 655 2 view .LVU7699
 656:src/xeq.c     **** }
 29177              		.loc 1 656 2 view .LVU7700
 656:src/xeq.c     **** }
 29178              		.loc 1 656 27 is_stmt 0 view .LVU7701
 29179 00ee 3946     		mov	r1, r7
 29180 00f0 03EBC400 		add	r0, r3, r4, lsl #3
 29181              	.LVL2279:
 656:src/xeq.c     **** }
 29182              		.loc 1 656 27 view .LVU7702
 29183 00f4 FFF7FEFF 		bl	decimal64ToNumber
 29184              	.LVL2280:
 656:src/xeq.c     **** }
 29185              		.loc 1 656 27 view .LVU7703
 29186 00f8 0134     		adds	r4, r4, #1
 29187              	.LVL2281:
 656:src/xeq.c     **** }
 29188              		.loc 1 656 27 view .LVU7704
 29189 00fa 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 29190              		.loc 1 656 2 view .LVU7705
 29191 00fc 2846     		mov	r0, r5
 29192 00fe FFF7FEFF 		bl	packed128_from_number
 29193              	.LVL2282:
 656:src/xeq.c     **** }
 29194              		.loc 1 656 2 view .LVU7706
 29195              	.LBE3731:
 29196              	.LBE3730:
4126:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29197              		.loc 1 4126 45 is_stmt 1 view .LVU7707
4126:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29198              		.loc 1 4126 17 view .LVU7708
4126:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29199              		.loc 1 4126 5 is_stmt 0 view .LVU7709
 29200 0102 702C     		cmp	r4, #112
 29201 0104 ECD1     		bne	.L2096
 29202 0106 B2E7     		b	.L2112
 29203              	.LVL2283:
 29204              	.L2116:
4116:src/xeq.c     **** 				if (Error) {
 29205              		.loc 1 4116 5 is_stmt 1 view .LVU7710
 29206 0108 7D21     		movs	r1, #125
 29207 010a 0C20     		movs	r0, #12
 29208              	.LVL2284:
4116:src/xeq.c     **** 				if (Error) {
 29209              		.loc 1 4116 5 is_stmt 0 view .LVU7711
 29210 010c FFF7FEFF 		bl	cmdregs
 29211              	.LVL2285:
4117:src/xeq.c     **** 					return;
 29212              		.loc 1 4117 5 is_stmt 1 view .LVU7712
4117:src/xeq.c     **** 					return;
 29213              		.loc 1 4117 9 is_stmt 0 view .LVU7713
 29214 0110 044B     		ldr	r3, .L2117+8
ARM GAS  /tmp/ccBFDvgN.s 			page 747


4117:src/xeq.c     **** 					return;
 29215              		.loc 1 4117 8 view .LVU7714
 29216 0112 1B68     		ldr	r3, [r3]
 29217 0114 002B     		cmp	r3, #0
 29218 0116 AFD1     		bne	.L2089
 29219 0118 3368     		ldr	r3, [r6]
 29220 011a D6E7     		b	.L2092
 29221              	.L2118:
 29222              		.align	2
 29223              	.L2117:
 29224 011c 00000000 		.word	main_ram
 29225 0120 00000000 		.word	StackBase
 29226 0124 00000000 		.word	Error
 29227              		.cfi_endproc
 29228              	.LFE218:
 29230              		.section	.text.cmdrestm,"ax",%progbits
 29231              		.align	1
 29232              		.p2align 2,,3
 29233              		.global	cmdrestm
 29234              		.syntax unified
 29235              		.thumb
 29236              		.thumb_func
 29237              		.fpu fpv4-sp-d16
 29239              	cmdrestm:
 29240              	.LVL2286:
 29241              	.LFB213:
3788:src/xeq.c     **** 	const int dbl = is_dblmode();
 29242              		.loc 1 3788 47 is_stmt 1 view -0
 29243              		.cfi_startproc
 29244              		@ args = 0, pretend = 0, frame = 0
 29245              		@ frame_needed = 0, uses_anonymous_args = 0
3789:src/xeq.c     **** 	const int intm = is_intmode();
 29246              		.loc 1 3789 2 view .LVU7716
 29247              	.LBB3732:
 29248              	.LBI3732:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29249              		.loc 1 1118 5 view .LVU7717
 29250              	.LBB3733:
1119:src/xeq.c     **** }
 29251              		.loc 1 1119 2 view .LVU7718
 29252              	.LBE3733:
 29253              	.LBE3732:
3788:src/xeq.c     **** 	const int dbl = is_dblmode();
 29254              		.loc 1 3788 47 is_stmt 0 view .LVU7719
 29255 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 29256              		.cfi_def_cfa_offset 24
 29257              		.cfi_offset 3, -24
 29258              		.cfi_offset 4, -20
 29259              		.cfi_offset 5, -16
 29260              		.cfi_offset 6, -12
 29261              		.cfi_offset 7, -8
 29262              		.cfi_offset 14, -4
 29263              	.LBB3741:
 29264              	.LBB3734:
1119:src/xeq.c     **** }
 29265              		.loc 1 1119 12 view .LVU7720
 29266 0002 254E     		ldr	r6, .L2126
ARM GAS  /tmp/ccBFDvgN.s 			page 748


 29267 0004 3568     		ldr	r5, [r6]
 29268              	.LBE3734:
 29269              	.LBE3741:
3790:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29270              		.loc 1 3790 19 view .LVU7721
 29271 0006 95F8E847 		ldrb	r4, [r5, #2024]	@ zero_extendqisi2
 29272              	.LBB3742:
 29273              	.LBB3735:
1119:src/xeq.c     **** }
 29274              		.loc 1 1119 24 view .LVU7722
 29275 000a B5F8E877 		ldrh	r7, [r5, #2024]
 29276              	.LVL2287:
1119:src/xeq.c     **** }
 29277              		.loc 1 1119 24 view .LVU7723
 29278              	.LBE3735:
 29279              	.LBE3742:
3790:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29280              		.loc 1 3790 2 is_stmt 1 view .LVU7724
3791:src/xeq.c     **** 
 29281              		.loc 1 3791 18 is_stmt 0 view .LVU7725
 29282 000e FFF7FEFF 		bl	get_reg_n
 29283              	.LVL2288:
3791:src/xeq.c     **** 
 29284              		.loc 1 3791 2 view .LVU7726
 29285 0012 0822     		movs	r2, #8
3791:src/xeq.c     **** 
 29286              		.loc 1 3791 18 view .LVU7727
 29287 0014 0146     		mov	r1, r0
3791:src/xeq.c     **** 
 29288              		.loc 1 3791 2 view .LVU7728
 29289 0016 05F2E470 		addw	r0, r5, #2020
 29290 001a FFF7FEFF 		bl	xcopy
 29291              	.LVL2289:
3798:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29292              		.loc 1 3798 14 view .LVU7729
 29293 001e 3368     		ldr	r3, [r6]
 29294 0020 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3790:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29295              		.loc 1 3790 19 view .LVU7730
 29296 0024 04F00104 		and	r4, r4, #1
 29297              	.LVL2290:
3791:src/xeq.c     **** 
 29298              		.loc 1 3791 2 is_stmt 1 view .LVU7731
3798:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29299              		.loc 1 3798 2 view .LVU7732
3798:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29300              		.loc 1 3798 5 is_stmt 0 view .LVU7733
 29301 0028 02F00101 		and	r1, r2, #1
 29302 002c A142     		cmp	r1, r4
 29303 002e 08D0     		beq	.L2120
3800:src/xeq.c     **** 		if (intm)
 29304              		.loc 1 3800 3 is_stmt 1 view .LVU7734
3800:src/xeq.c     **** 		if (intm)
 29305              		.loc 1 3800 15 is_stmt 0 view .LVU7735
 29306 0030 64F30002 		bfi	r2, r4, #0, #1
 29307 0034 83F8E827 		strb	r2, [r3, #2024]
3801:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
ARM GAS  /tmp/ccBFDvgN.s 			page 749


 29308              		.loc 1 3801 3 is_stmt 1 view .LVU7736
3801:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 29309              		.loc 1 3801 6 is_stmt 0 view .LVU7737
 29310 0038 4CB3     		cbz	r4, .L2121
3802:src/xeq.c     **** 		else
 29311              		.loc 1 3802 4 is_stmt 1 view .LVU7738
 29312 003a D220     		movs	r0, #210
 29313 003c FFF7FEFF 		bl	op_float
 29314              	.LVL2291:
 29315 0040 3368     		ldr	r3, [r6]
 29316              	.L2120:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29317              		.loc 1 3806 2 view .LVU7739
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29318              		.loc 1 3806 6 is_stmt 0 view .LVU7740
 29319 0042 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29320              		.loc 1 3806 5 view .LVU7741
 29321 0046 D207     		lsls	r2, r2, #31
 29322 0048 20D4     		bmi	.L2119
 29323              	.LBB3743:
 29324              	.LBB3744:
1119:src/xeq.c     **** }
 29325              		.loc 1 1119 24 view .LVU7742
 29326 004a B3F8E827 		ldrh	r2, [r3, #2024]
 29327              	.LBE3744:
 29328              	.LBE3743:
 29329              	.LBB3747:
 29330              	.LBB3736:
 29331 004e 44F20101 		movw	r1, #16385
 29332              	.LBE3736:
 29333              	.LBE3747:
 29334              	.LBB3748:
 29335              	.LBB3745:
 29336 0052 0A40     		ands	r2, r2, r1
 29337              	.LBE3745:
 29338              	.LBE3748:
 29339              	.LBB3749:
 29340              	.LBB3737:
 29341 0054 0F40     		ands	r7, r7, r1
 29342              	.LVL2292:
1119:src/xeq.c     **** }
 29343              		.loc 1 1119 24 view .LVU7743
 29344              	.LBE3737:
 29345              	.LBE3749:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29346              		.loc 1 3806 21 view .LVU7744
 29347 0056 A2F58042 		sub	r2, r2, #16384
 29348              	.LBB3750:
 29349              	.LBB3738:
1119:src/xeq.c     **** }
 29350              		.loc 1 1119 24 view .LVU7745
 29351 005a A7F58041 		sub	r1, r7, #16384
 29352              	.LBE3738:
 29353              	.LBE3750:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29354              		.loc 1 3806 21 view .LVU7746
ARM GAS  /tmp/ccBFDvgN.s 			page 750


 29355 005e B2FA82F2 		clz	r2, r2
 29356              	.LBB3751:
 29357              	.LBB3739:
1119:src/xeq.c     **** }
 29358              		.loc 1 1119 24 view .LVU7747
 29359 0062 B1FA81F1 		clz	r1, r1
 29360              	.LBE3739:
 29361              	.LBE3751:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29362              		.loc 1 3806 21 view .LVU7748
 29363 0066 5209     		lsrs	r2, r2, #5
 29364              	.LBB3752:
 29365              	.LBB3740:
1119:src/xeq.c     **** }
 29366              		.loc 1 1119 24 view .LVU7749
 29367 0068 4909     		lsrs	r1, r1, #5
 29368              	.LBE3740:
 29369              	.LBE3752:
 29370              	.LBB3753:
 29371              	.LBI3743:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29372              		.loc 1 1118 5 is_stmt 1 view .LVU7750
 29373              	.LBB3746:
1119:src/xeq.c     **** }
 29374              		.loc 1 1119 2 view .LVU7751
 29375              	.LBE3746:
 29376              	.LBE3753:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29377              		.loc 1 3806 21 is_stmt 0 view .LVU7752
 29378 006a 8A42     		cmp	r2, r1
 29379 006c 0ED0     		beq	.L2119
3808:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29380              		.loc 1 3808 3 is_stmt 1 view .LVU7753
3808:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29381              		.loc 1 3808 22 is_stmt 0 view .LVU7754
 29382 006e 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29383 0072 61F38612 		bfi	r2, r1, #6, #1
3809:src/xeq.c     **** 	}
 29384              		.loc 1 3809 3 view .LVU7755
 29385 0076 B7F5804F 		cmp	r7, #16384
3808:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29386              		.loc 1 3808 22 view .LVU7756
 29387 007a 83F8E927 		strb	r2, [r3, #2025]
3809:src/xeq.c     **** 	}
 29388              		.loc 1 3809 3 is_stmt 1 view .LVU7757
3811:src/xeq.c     **** #endif
 29389              		.loc 1 3811 1 is_stmt 0 view .LVU7758
 29390 007e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 29391              		.cfi_remember_state
 29392              		.cfi_restore 14
 29393              		.cfi_restore 7
 29394              		.cfi_restore 6
 29395              		.cfi_restore 5
 29396              		.cfi_restore 4
 29397              		.cfi_restore 3
 29398              		.cfi_def_cfa_offset 0
3809:src/xeq.c     **** 	}
ARM GAS  /tmp/ccBFDvgN.s 			page 751


 29399              		.loc 1 3809 3 view .LVU7759
 29400 0082 0CBF     		ite	eq
 29401 0084 B620     		moveq	r0, #182
 29402 0086 B520     		movne	r0, #181
 29403 0088 FFF7FEBF 		b	op_double
 29404              	.LVL2293:
 29405              	.L2119:
 29406              		.cfi_restore_state
3811:src/xeq.c     **** #endif
 29407              		.loc 1 3811 1 view .LVU7760
 29408 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 29409              	.LVL2294:
 29410              	.L2121:
3804:src/xeq.c     **** 	}
 29411              		.loc 1 3804 4 is_stmt 1 view .LVU7761
 29412 008e FFF7FEFF 		bl	switch_to_int
 29413              	.LVL2295:
 29414 0092 3368     		ldr	r3, [r6]
 29415 0094 D5E7     		b	.L2120
 29416              	.L2127:
 29417 0096 00BF     		.align	2
 29418              	.L2126:
 29419 0098 00000000 		.word	main_ram
 29420              		.cfi_endproc
 29421              	.LFE213:
 29423              		.section	.text.cmdxin,"ax",%progbits
 29424              		.align	1
 29425              		.p2align 2,,3
 29426              		.global	cmdxin
 29427              		.syntax unified
 29428              		.thumb
 29429              		.thumb_func
 29430              		.fpu fpv4-sp-d16
 29432              	cmdxin:
 29433              	.LVL2296:
 29434              	.LFB266:
5922:src/xeq.c     **** 
 29435              		.loc 1 5922 45 view -0
 29436              		.cfi_startproc
 29437              		@ args = 0, pretend = 0, frame = 40
 29438              		@ frame_needed = 0, uses_anonymous_args = 0
5924:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29439              		.loc 1 5924 2 view .LVU7763
5934:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29440              		.loc 1 5934 2 view .LVU7764
5922:src/xeq.c     **** 
 29441              		.loc 1 5922 45 is_stmt 0 view .LVU7765
 29442 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 29443              		.cfi_def_cfa_offset 32
 29444              		.cfi_offset 4, -32
 29445              		.cfi_offset 5, -28
 29446              		.cfi_offset 6, -24
 29447              		.cfi_offset 7, -20
 29448              		.cfi_offset 8, -16
 29449              		.cfi_offset 9, -12
 29450              		.cfi_offset 10, -8
 29451              		.cfi_offset 14, -4
ARM GAS  /tmp/ccBFDvgN.s 			page 752


5934:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29452              		.loc 1 5934 6 view .LVU7766
 29453 0004 6A4D     		ldr	r5, .L2157
5934:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29454              		.loc 1 5934 5 view .LVU7767
 29455 0006 95F90130 		ldrsb	r3, [r5, #1]
 29456 000a 002B     		cmp	r3, #0
5922:src/xeq.c     **** 
 29457              		.loc 1 5922 45 view .LVU7768
 29458 000c 8AB0     		sub	sp, sp, #40
 29459              		.cfi_def_cfa_offset 72
5934:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29460              		.loc 1 5934 5 view .LVU7769
 29461 000e C0F2AD80 		blt	.L2154
5942:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29462              		.loc 1 5942 2 is_stmt 1 view .LVU7770
 29463 0012 684E     		ldr	r6, .L2157+4
5947:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29464              		.loc 1 5947 26 is_stmt 0 view .LVU7771
 29465 0014 684F     		ldr	r7, .L2157+8
 29466              	.LBB3769:
 29467              	.LBB3770:
 744:src/xeq.c     **** }
 29468              		.loc 1 744 15 view .LVU7772
 29469 0016 DFF8B481 		ldr	r8, .L2157+28
 29470 001a 0446     		mov	r4, r0
 29471              	.LBE3770:
 29472              	.LBE3769:
5942:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29473              		.loc 1 5942 2 view .LVU7773
 29474 001c 4FF4E872 		mov	r2, #464
 29475 0020 0021     		movs	r1, #0
 29476              	.LVL2297:
5942:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29477              		.loc 1 5942 2 view .LVU7774
 29478 0022 3046     		mov	r0, r6
 29479              	.LVL2298:
5942:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29480              		.loc 1 5942 2 view .LVU7775
 29481 0024 FFF7FEFF 		bl	xset
 29482              	.LVL2299:
5943:src/xeq.c     **** 
 29483              		.loc 1 5943 2 is_stmt 1 view .LVU7776
 29484 0028 1022     		movs	r2, #16
 29485 002a 0021     		movs	r1, #0
 29486 002c 2846     		mov	r0, r5
 29487 002e FFF7FEFF 		bl	xset
 29488              	.LVL2300:
5946:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
 29489              		.loc 1 5946 2 view .LVU7777
 29490              	.LBB3774:
 29491              	.LBI3769:
 743:src/xeq.c     **** 	return State2.state_lift;
 29492              		.loc 1 743 12 view .LVU7778
 29493              	.LBB3771:
 744:src/xeq.c     **** }
 29494              		.loc 1 744 2 view .LVU7779
ARM GAS  /tmp/ccBFDvgN.s 			page 753


 29495              	.LBE3771:
 29496              	.LBE3774:
5947:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29497              		.loc 1 5947 26 is_stmt 0 view .LVU7780
 29498 0032 3A68     		ldr	r2, [r7]
 29499              	.LBB3775:
 29500              	.LBB3772:
 744:src/xeq.c     **** }
 29501              		.loc 1 744 15 view .LVU7781
 29502 0034 98F817E0 		ldrb	lr, [r8, #23]	@ zero_extendqisi2
 29503              	.LBE3772:
 29504              	.LBE3775:
5949:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29505              		.loc 1 5949 29 view .LVU7782
 29506 0038 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
5947:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29507              		.loc 1 5947 32 view .LVU7783
 29508 003c 92F8EAC7 		ldrb	ip, [r2, #2026]	@ zero_extendqisi2
5948:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29509              		.loc 1 5948 32 view .LVU7784
 29510 0040 92F8E907 		ldrb	r0, [r2, #2025]	@ zero_extendqisi2
5950:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29511              		.loc 1 5950 41 view .LVU7785
 29512 0044 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
5965:src/xeq.c     **** 
 29513              		.loc 1 5965 20 view .LVU7786
 29514 0048 B2F8E2A7 		ldrh	r10, [r2, #2018]
 29515 004c A5F80CA0 		strh	r10, [r5, #12]	@ movhi
5949:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29516              		.loc 1 5949 29 view .LVU7787
 29517 0050 03F00103 		and	r3, r3, #1
 29518              	.LBB3776:
 29519              	.LBB3773:
 744:src/xeq.c     **** }
 29520              		.loc 1 744 15 view .LVU7788
 29521 0054 CEF3801E 		ubfx	lr, lr, #6, #1
 29522              	.LBE3773:
 29523              	.LBE3776:
5947:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29524              		.loc 1 5947 2 is_stmt 1 view .LVU7789
5949:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29525              		.loc 1 5949 21 is_stmt 0 view .LVU7790
 29526 0058 63F03F03 		orn	r3, r3, #63
 29527 005c 43EA4E03 		orr	r3, r3, lr, lsl #1
5947:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29528              		.loc 1 5947 32 view .LVU7791
 29529 0060 CCF3C00C 		ubfx	ip, ip, #3, #1
5948:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29530              		.loc 1 5948 2 is_stmt 1 view .LVU7792
5949:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29531              		.loc 1 5949 21 is_stmt 0 view .LVU7793
 29532 0064 43EA8C03 		orr	r3, r3, ip, lsl #2
5948:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29533              		.loc 1 5948 32 view .LVU7794
 29534 0068 C0F38010 		ubfx	r0, r0, #6, #1
5949:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29535              		.loc 1 5949 2 is_stmt 1 view .LVU7795
ARM GAS  /tmp/ccBFDvgN.s 			page 754


5950:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29536              		.loc 1 5950 9 view .LVU7796
5983:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29537              		.loc 1 5983 35 is_stmt 0 view .LVU7797
 29538 006c C4F3C01C 		ubfx	ip, r4, #7, #1
5950:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29539              		.loc 1 5950 33 view .LVU7798
 29540 0070 95F802E0 		ldrb	lr, [r5, #2]	@ zero_extendqisi2
5949:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29541              		.loc 1 5949 21 view .LVU7799
 29542 0074 43EAC003 		orr	r3, r3, r0, lsl #3
5982:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29543              		.loc 1 5982 36 view .LVU7800
 29544 0078 C4F38019 		ubfx	r9, r4, #6, #1
5964:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29545              		.loc 1 5964 17 view .LVU7801
 29546 007c 4F48     		ldr	r0, .L2157+12
5949:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29547              		.loc 1 5949 21 view .LVU7802
 29548 007e 43EA0C13 		orr	r3, r3, ip, lsl #4
5950:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29549              		.loc 1 5950 41 view .LVU7803
 29550 0082 C1F30211 		ubfx	r1, r1, #4, #3
5951:src/xeq.c     **** 	XromFlags.xIN = 1;
 29551              		.loc 1 5951 2 is_stmt 1 view .LVU7804
5952:src/xeq.c     **** 
 29552              		.loc 1 5952 2 view .LVU7805
5964:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29553              		.loc 1 5964 2 view .LVU7806
5949:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29554              		.loc 1 5949 21 is_stmt 0 view .LVU7807
 29555 0086 43EA4913 		orr	r3, r3, r9, lsl #5
5950:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29556              		.loc 1 5950 33 view .LVU7808
 29557 008a 61F3020E 		bfi	lr, r1, #0, #3
5972:src/xeq.c     **** #endif
 29558              		.loc 1 5972 17 view .LVU7809
 29559 008e 41F2020C 		movw	ip, #4098
5971:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29560              		.loc 1 5971 24 view .LVU7810
 29561 0092 4FF6FE71 		movw	r1, #65534
5964:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29562              		.loc 1 5964 17 view .LVU7811
 29563 0096 D0F80090 		ldr	r9, [r0]
5972:src/xeq.c     **** #endif
 29564              		.loc 1 5972 17 view .LVU7812
 29565 009a A6F8CCC1 		strh	ip, [r6, #460]	@ movhi
5949:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29566              		.loc 1 5949 21 view .LVU7813
 29567 009e 6B70     		strb	r3, [r5, #1]
5987:src/xeq.c     **** 		// Complex arguments are always in pairs
 29568              		.loc 1 5987 6 view .LVU7814
 29569 00a0 5FFA83FC 		uxtb	ip, r3
5950:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29570              		.loc 1 5950 33 view .LVU7815
 29571 00a4 85F802E0 		strb	lr, [r5, #2]
5971:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
ARM GAS  /tmp/ccBFDvgN.s 			page 755


 29572              		.loc 1 5971 24 view .LVU7816
 29573 00a8 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
5967:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29574              		.loc 1 5967 9 view .LVU7817
 29575 00ac 06F5E87E 		add	lr, r6, #464
5971:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29576              		.loc 1 5971 12 view .LVU7818
 29577 00b0 A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
5987:src/xeq.c     **** 		// Complex arguments are always in pairs
 29578              		.loc 1 5987 5 view .LVU7819
 29579 00b4 DB06     		lsls	r3, r3, #27
5984:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29580              		.loc 1 5984 16 view .LVU7820
 29581 00b6 04F00701 		and	r1, r4, #7
5985:src/xeq.c     **** #endif
 29582              		.loc 1 5985 24 view .LVU7821
 29583 00ba C4F3C204 		ubfx	r4, r4, #3, #3
 29584              	.LVL2301:
5967:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29585              		.loc 1 5967 9 view .LVU7822
 29586 00be C0F800E0 		str	lr, [r0]
5964:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29587              		.loc 1 5964 17 view .LVU7823
 29588 00c2 C5F80890 		str	r9, [r5, #8]
5965:src/xeq.c     **** 
 29589              		.loc 1 5965 2 is_stmt 1 view .LVU7824
5967:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29590              		.loc 1 5967 2 view .LVU7825
5971:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29591              		.loc 1 5971 2 view .LVU7826
5972:src/xeq.c     **** #endif
 29592              		.loc 1 5972 2 view .LVU7827
5982:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29593              		.loc 1 5982 2 view .LVU7828
5983:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29594              		.loc 1 5983 2 view .LVU7829
5984:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29595              		.loc 1 5984 2 view .LVU7830
5984:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29596              		.loc 1 5984 9 is_stmt 0 view .LVU7831
 29597 00c6 2971     		strb	r1, [r5, #4]
5985:src/xeq.c     **** #endif
 29598              		.loc 1 5985 2 is_stmt 1 view .LVU7832
5985:src/xeq.c     **** #endif
 29599              		.loc 1 5985 10 is_stmt 0 view .LVU7833
 29600 00c8 6C71     		strb	r4, [r5, #5]
5987:src/xeq.c     **** 		// Complex arguments are always in pairs
 29601              		.loc 1 5987 2 is_stmt 1 view .LVU7834
5987:src/xeq.c     **** 		// Complex arguments are always in pairs
 29602              		.loc 1 5987 5 is_stmt 0 view .LVU7835
 29603 00ca 03D5     		bpl	.L2132
5989:src/xeq.c     **** 		XromOut <<= 1;
 29604              		.loc 1 5989 3 is_stmt 1 view .LVU7836
5989:src/xeq.c     **** 		XromOut <<= 1;
 29605              		.loc 1 5989 10 is_stmt 0 view .LVU7837
 29606 00cc 4900     		lsls	r1, r1, #1
5990:src/xeq.c     **** 	}
ARM GAS  /tmp/ccBFDvgN.s 			page 756


 29607              		.loc 1 5990 11 view .LVU7838
 29608 00ce 6400     		lsls	r4, r4, #1
5989:src/xeq.c     **** 		XromOut <<= 1;
 29609              		.loc 1 5989 10 view .LVU7839
 29610 00d0 2971     		strb	r1, [r5, #4]
5990:src/xeq.c     **** 	}
 29611              		.loc 1 5990 3 is_stmt 1 view .LVU7840
5990:src/xeq.c     **** 	}
 29612              		.loc 1 5990 11 is_stmt 0 view .LVU7841
 29613 00d2 6C71     		strb	r4, [r5, #5]
 29614              	.L2132:
5993:src/xeq.c     **** 
 29615              		.loc 1 5993 9 is_stmt 1 view .LVU7842
5993:src/xeq.c     **** 
 29616              		.loc 1 5993 30 is_stmt 0 view .LVU7843
 29617 00d4 92F8EB37 		ldrb	r3, [r2, #2027]	@ zero_extendqisi2
6004:src/xeq.c     **** 		// Convert integers to decimal128
 29618              		.loc 1 6004 5 view .LVU7844
 29619 00d8 1CF0010F 		tst	ip, #1
5993:src/xeq.c     **** 
 29620              		.loc 1 5993 30 view .LVU7845
 29621 00dc 6FF30613 		bfc	r3, #4, #3
 29622 00e0 82F8EB37 		strb	r3, [r2, #2027]
6004:src/xeq.c     **** 		// Convert integers to decimal128
 29623              		.loc 1 6004 2 is_stmt 1 view .LVU7846
6004:src/xeq.c     **** 		// Convert integers to decimal128
 29624              		.loc 1 6004 5 is_stmt 0 view .LVU7847
 29625 00e4 52D1     		bne	.L2155
6012:src/xeq.c     **** 		// No conversion necessary
 29626              		.loc 1 6012 7 is_stmt 1 view .LVU7848
6012:src/xeq.c     **** 		// No conversion necessary
 29627              		.loc 1 6012 10 is_stmt 0 view .LVU7849
 29628 00e6 1CF0080F 		tst	ip, #8
 29629 00ea 47D1     		bne	.L2156
6033:src/xeq.c     **** #endif
 29630              		.loc 1 6033 3 is_stmt 1 view .LVU7850
 29631 00ec B520     		movs	r0, #181
 29632 00ee FFF7FEFF 		bl	op_double
 29633              	.LVL2302:
 29634              	.L2134:
6038:src/xeq.c     **** 	UState.stack_depth = 1;
 29635              		.loc 1 6038 2 view .LVU7851
 29636              	.LBB3777:
 29637              	.LBI3777:
 767:src/xeq.c     ****     State2.state_lift = 1;
 29638              		.loc 1 767 6 view .LVU7852
 29639              	.LBB3778:
 768:src/xeq.c     **** }
 29640              		.loc 1 768 5 view .LVU7853
 768:src/xeq.c     **** }
 29641              		.loc 1 768 23 is_stmt 0 view .LVU7854
 29642 00f2 98F81730 		ldrb	r3, [r8, #23]	@ zero_extendqisi2
 29643              	.LBE3778:
 29644              	.LBE3777:
6039:src/xeq.c     **** 
 29645              		.loc 1 6039 21 view .LVU7855
 29646 00f6 3A68     		ldr	r2, [r7]
ARM GAS  /tmp/ccBFDvgN.s 			page 757


 29647              	.LBB3780:
 29648              	.LBB3779:
 768:src/xeq.c     **** }
 29649              		.loc 1 768 23 view .LVU7856
 29650 00f8 43F04003 		orr	r3, r3, #64
 29651 00fc 88F81730 		strb	r3, [r8, #23]
 29652              	.LBE3779:
 29653              	.LBE3780:
6039:src/xeq.c     **** 
 29654              		.loc 1 6039 2 is_stmt 1 view .LVU7857
6039:src/xeq.c     **** 
 29655              		.loc 1 6039 21 is_stmt 0 view .LVU7858
 29656 0100 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 29657 0104 43F00803 		orr	r3, r3, #8
 29658 0108 82F8EA37 		strb	r3, [r2, #2026]
6042:src/xeq.c     **** 		decNumber x;
 29659              		.loc 1 6042 2 is_stmt 1 view .LVU7859
 29660              	.LVL2303:
6042:src/xeq.c     **** 		decNumber x;
 29661              		.loc 1 6042 14 view .LVU7860
6042:src/xeq.c     **** 		decNumber x;
 29662              		.loc 1 6042 2 is_stmt 0 view .LVU7861
 29663 010c 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 29664 010e 93B3     		cbz	r3, .L2128
6042:src/xeq.c     **** 		decNumber x;
 29665              		.loc 1 6042 9 view .LVU7862
 29666 0110 0024     		movs	r4, #0
 29667 0112 02E0     		b	.L2141
 29668              	.LVL2304:
 29669              	.L2136:
6042:src/xeq.c     **** 		decNumber x;
 29670              		.loc 1 6042 18 view .LVU7863
 29671 0114 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
6042:src/xeq.c     **** 		decNumber x;
 29672              		.loc 1 6042 2 view .LVU7864
 29673 0116 A342     		cmp	r3, r4
 29674 0118 2DDD     		ble	.L2128
 29675              	.LVL2305:
 29676              	.L2141:
 29677              	.LBB3781:
6043:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
 29678              		.loc 1 6043 3 is_stmt 1 view .LVU7865
6044:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29679              		.loc 1 6044 3 view .LVU7866
6044:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29680              		.loc 1 6044 7 is_stmt 0 view .LVU7867
 29681 011a 04F16401 		add	r1, r4, #100
 29682 011e 01A8     		add	r0, sp, #4
 29683 0120 FFF7FEFF 		bl	getRegister
 29684              	.LVL2306:
 29685              	.LBE3781:
6042:src/xeq.c     **** 		decNumber x;
 29686              		.loc 1 6042 26 is_stmt 1 view .LVU7868
 29687              	.LBB3788:
6044:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29688              		.loc 1 6044 6 is_stmt 0 view .LVU7869
 29689 0124 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
ARM GAS  /tmp/ccBFDvgN.s 			page 758


 29690 0126 13F0300F 		tst	r3, #48
 29691              	.LBE3788:
6042:src/xeq.c     **** 		decNumber x;
 29692              		.loc 1 6042 26 view .LVU7870
 29693 012a 04F10104 		add	r4, r4, #1
 29694              	.LVL2307:
6042:src/xeq.c     **** 		decNumber x;
 29695              		.loc 1 6042 14 is_stmt 1 view .LVU7871
 29696              	.LBB3789:
6044:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29697              		.loc 1 6044 6 is_stmt 0 view .LVU7872
 29698 012e F1D0     		beq	.L2136
6047:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29699              		.loc 1 6047 4 is_stmt 1 view .LVU7873
 29700              	.LVL2308:
 29701              	.LBB3782:
 29702              	.LBI3782:
3556:src/xeq.c     **** 	unsigned short mask;
 29703              		.loc 1 3556 5 view .LVU7874
 29704              	.LBB3783:
3557:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 29705              		.loc 1 3557 2 view .LVU7875
3558:src/xeq.c     **** 
 29706              		.loc 1 3558 2 view .LVU7876
3558:src/xeq.c     **** 
 29707              		.loc 1 3558 34 is_stmt 0 view .LVU7877
 29708 0130 0DF10201 		add	r1, sp, #2
 29709 0134 6B20     		movs	r0, #107
 29710 0136 FFF7FEFF 		bl	flag_word
 29711              	.LVL2309:
3560:src/xeq.c     **** }
 29712              		.loc 1 3560 2 is_stmt 1 view .LVU7878
3560:src/xeq.c     **** }
 29713              		.loc 1 3560 24 is_stmt 0 view .LVU7879
 29714 013a BDF80230 		ldrh	r3, [sp, #2]
 29715 013e 0288     		ldrh	r2, [r0]
 29716              	.LBE3783:
 29717              	.LBE3782:
6047:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29718              		.loc 1 6047 7 view .LVU7880
 29719 0140 1A42     		tst	r2, r3
 29720 0142 2DD0     		beq	.L2137
 29721              	.LVL2310:
6048:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29722              		.loc 1 6048 17 is_stmt 1 view .LVU7881
6048:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29723              		.loc 1 6048 5 is_stmt 0 view .LVU7882
 29724 0144 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 29725 0146 53B1     		cbz	r3, .L2138
6049:src/xeq.c     **** 				// Early exit of routine
 29726              		.loc 1 6049 6 view .LVU7883
 29727 0148 1D4E     		ldr	r6, .L2157+16
6048:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29728              		.loc 1 6048 12 view .LVU7884
 29729 014a 0024     		movs	r4, #0
 29730              	.LVL2311:
 29731              	.L2139:
ARM GAS  /tmp/ccBFDvgN.s 			page 759


6049:src/xeq.c     **** 				// Early exit of routine
 29732              		.loc 1 6049 6 is_stmt 1 discriminator 3 view .LVU7885
 29733 014c 04F16400 		add	r0, r4, #100
 29734 0150 3146     		mov	r1, r6
 29735 0152 FFF7FEFF 		bl	setRegister
 29736              	.LVL2312:
6048:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29737              		.loc 1 6048 30 discriminator 3 view .LVU7886
6048:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29738              		.loc 1 6048 21 is_stmt 0 discriminator 3 view .LVU7887
 29739 0156 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
6048:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29740              		.loc 1 6048 30 discriminator 3 view .LVU7888
 29741 0158 0134     		adds	r4, r4, #1
 29742              	.LVL2313:
6048:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29743              		.loc 1 6048 17 is_stmt 1 discriminator 3 view .LVU7889
6048:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29744              		.loc 1 6048 5 is_stmt 0 discriminator 3 view .LVU7890
 29745 015a A342     		cmp	r3, r4
 29746 015c F6DC     		bgt	.L2139
 29747              	.LVL2314:
 29748              	.L2138:
6051:src/xeq.c     **** 			} 
 29749              		.loc 1 6051 5 is_stmt 1 view .LVU7891
 29750 015e 8421     		movs	r1, #132
 29751 0160 0020     		movs	r0, #0
 29752 0162 FFF7FEFF 		bl	cmdxout
 29753              	.LVL2315:
 29754              	.LBE3789:
6058:src/xeq.c     **** 
 29755              		.loc 1 6058 1 is_stmt 0 view .LVU7892
 29756 0166 0AB0     		add	sp, sp, #40
 29757              		.cfi_remember_state
 29758              		.cfi_def_cfa_offset 32
 29759              		@ sp needed
 29760 0168 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 29761              	.LVL2316:
 29762              	.L2154:
 29763              		.cfi_restore_state
5935:src/xeq.c     **** 		return;
 29764              		.loc 1 5935 3 is_stmt 1 view .LVU7893
 29765              	.LBB3790:
 29766              	.LBI3790:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29767              		.loc 1 546 5 view .LVU7894
 29768              	.LBB3791:
 547:src/xeq.c     **** 		Error = e;
 29769              		.loc 1 547 2 view .LVU7895
 547:src/xeq.c     **** 		Error = e;
 29770              		.loc 1 547 12 is_stmt 0 view .LVU7896
 29771 016c 154B     		ldr	r3, .L2157+20
 547:src/xeq.c     **** 		Error = e;
 29772              		.loc 1 547 5 view .LVU7897
 29773 016e 1A68     		ldr	r2, [r3]
 29774 0170 0AB9     		cbnz	r2, .L2128
 29775              	.LVL2317:
ARM GAS  /tmp/ccBFDvgN.s 			page 760


 29776              	.LBB3792:
 29777              	.LBI3792:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29778              		.loc 1 546 5 is_stmt 1 view .LVU7898
 29779              	.LBB3793:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29780              		.loc 1 548 3 view .LVU7899
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29781              		.loc 1 548 9 is_stmt 0 view .LVU7900
 29782 0172 0722     		movs	r2, #7
 29783 0174 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29784              		.loc 1 549 3 is_stmt 1 view .LVU7901
 29785              	.LVL2318:
 29786              	.L2128:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29787              		.loc 1 549 3 is_stmt 0 view .LVU7902
 29788              	.LBE3793:
 29789              	.LBE3792:
 29790              	.LBE3791:
 29791              	.LBE3790:
6058:src/xeq.c     **** 
 29792              		.loc 1 6058 1 view .LVU7903
 29793 0176 0AB0     		add	sp, sp, #40
 29794              		.cfi_remember_state
 29795              		.cfi_def_cfa_offset 32
 29796              		@ sp needed
 29797 0178 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 29798              	.L2156:
 29799              		.cfi_restore_state
6014:src/xeq.c     **** 		StackBase = XromStack;
 29800              		.loc 1 6014 3 is_stmt 1 view .LVU7904
 29801 017c 124C     		ldr	r4, .L2157+24
 29802 017e 0D48     		ldr	r0, .L2157+4
 29803 0180 2168     		ldr	r1, [r4]
 29804 0182 C022     		movs	r2, #192
 29805 0184 FFF7FEFF 		bl	xcopy
 29806              	.LVL2319:
6015:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29807              		.loc 1 6015 3 view .LVU7905
6015:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29808              		.loc 1 6015 13 is_stmt 0 view .LVU7906
 29809 0188 2660     		str	r6, [r4]
 29810 018a B2E7     		b	.L2134
 29811              	.L2155:
6007:src/xeq.c     **** #endif
 29812              		.loc 1 6007 3 is_stmt 1 view .LVU7907
6007:src/xeq.c     **** #endif
 29813              		.loc 1 6007 22 is_stmt 0 view .LVU7908
 29814 018c 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 29815 0190 43F04003 		orr	r3, r3, #64
 29816 0194 82F8E937 		strb	r3, [r2, #2025]
6009:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
 29817              		.loc 1 6009 3 is_stmt 1 view .LVU7909
 29818 0198 D120     		movs	r0, #209
 29819 019a FFF7FEFF 		bl	op_float
 29820              	.LVL2320:
ARM GAS  /tmp/ccBFDvgN.s 			page 761


 29821 019e A8E7     		b	.L2134
 29822              	.LVL2321:
 29823              	.L2137:
 29824              	.LBB3794:
6054:src/xeq.c     **** 			return;
 29825              		.loc 1 6054 5 view .LVU7910
 29826              	.LBB3784:
 29827              	.LBI3784:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29828              		.loc 1 546 5 view .LVU7911
 29829              	.LBB3785:
 547:src/xeq.c     **** 		Error = e;
 29830              		.loc 1 547 2 view .LVU7912
 547:src/xeq.c     **** 		Error = e;
 29831              		.loc 1 547 12 is_stmt 0 view .LVU7913
 29832 01a0 084B     		ldr	r3, .L2157+20
 547:src/xeq.c     **** 		Error = e;
 29833              		.loc 1 547 5 view .LVU7914
 29834 01a2 1A68     		ldr	r2, [r3]
 29835 01a4 002A     		cmp	r2, #0
 29836 01a6 E6D1     		bne	.L2128
 29837              	.LVL2322:
 29838              	.LBB3786:
 29839              	.LBI3786:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29840              		.loc 1 546 5 is_stmt 1 view .LVU7915
 29841              	.LBB3787:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29842              		.loc 1 548 3 view .LVU7916
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29843              		.loc 1 548 9 is_stmt 0 view .LVU7917
 29844 01a8 0122     		movs	r2, #1
 29845 01aa 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29846              		.loc 1 549 3 is_stmt 1 view .LVU7918
 29847              	.LVL2323:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29848              		.loc 1 549 3 is_stmt 0 view .LVU7919
 29849              	.LBE3787:
 29850              	.LBE3786:
 29851              	.LBE3785:
 29852              	.LBE3784:
6055:src/xeq.c     **** 		}
 29853              		.loc 1 6055 4 is_stmt 1 view .LVU7920
 29854 01ac E3E7     		b	.L2128
 29855              	.L2158:
 29856 01ae 00BF     		.align	2
 29857              	.L2157:
 29858 01b0 00000000 		.word	XromParams
 29859 01b4 00000000 		.word	XromLocal
 29860 01b8 00000000 		.word	main_ram
 29861 01bc 00000000 		.word	RetStk
 29862 01c0 00000000 		.word	const_NaN
 29863 01c4 00000000 		.word	Error
 29864 01c8 00000000 		.word	StackBase
 29865 01cc 00000000 		.word	StateWhileOn
 29866              	.LBE3794:
ARM GAS  /tmp/ccBFDvgN.s 			page 762


 29867              		.cfi_endproc
 29868              	.LFE266:
 29870              		.section	.rodata.xeq.str1.4,"aMS",%progbits,1
 29871              		.align	2
 29872              	.LC8:
 29873 0000 25303458 		.ascii	"%04X:%s\000"
 29873      3A257300 
 29874              		.section	.text.xeq,"ax",%progbits
 29875              		.align	1
 29876              		.p2align 2,,3
 29877              		.global	xeq
 29878              		.syntax unified
 29879              		.thumb
 29880              		.thumb_func
 29881              		.fpu fpv4-sp-d16
 29883              	xeq:
 29884              	.LVL2324:
 29885              	.LFB251:
5319:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29886              		.loc 1 5319 1 view -0
 29887              		.cfi_startproc
 29888              		@ args = 0, pretend = 0, frame = 416
 29889              		@ frame_needed = 0, uses_anonymous_args = 0
5320:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
 29890              		.loc 1 5320 2 view .LVU7922
5321:src/xeq.c     **** 	const struct _ustate old = UState;
 29891              		.loc 1 5321 2 view .LVU7923
5319:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29892              		.loc 1 5319 1 is_stmt 0 view .LVU7924
 29893 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 29894              		.cfi_def_cfa_offset 36
 29895              		.cfi_offset 4, -36
 29896              		.cfi_offset 5, -32
 29897              		.cfi_offset 6, -28
 29898              		.cfi_offset 7, -24
 29899              		.cfi_offset 8, -20
 29900              		.cfi_offset 9, -16
 29901              		.cfi_offset 10, -12
 29902              		.cfi_offset 11, -8
 29903              		.cfi_offset 14, -4
5321:src/xeq.c     **** 	const struct _ustate old = UState;
 29904              		.loc 1 5321 31 view .LVU7925
 29905 0004 BC4F     		ldr	r7, .L2503
 29906              	.LBB4096:
 29907              	.LBB4097:
 744:src/xeq.c     **** }
 29908              		.loc 1 744 15 view .LVU7926
 29909 0006 BD4C     		ldr	r4, .L2503+4
 29910              	.LBE4097:
 29911              	.LBE4096:
5321:src/xeq.c     **** 	const struct _ustate old = UState;
 29912              		.loc 1 5321 31 view .LVU7927
 29913 0008 3B68     		ldr	r3, [r7]
 29914              	.LBB4101:
 29915              	.LBB4098:
 744:src/xeq.c     **** }
 29916              		.loc 1 744 15 view .LVU7928
ARM GAS  /tmp/ccBFDvgN.s 			page 763


 29917 000a 94F817C0 		ldrb	ip, [r4, #23]	@ zero_extendqisi2
 29918              	.LBE4098:
 29919              	.LBE4101:
5322:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29920              		.loc 1 5322 23 view .LVU7929
 29921 000e D3F8E817 		ldr	r1, [r3, #2024]
5340:src/xeq.c     **** #if defined(CONSOLE)
 29922              		.loc 1 5340 2 view .LVU7930
 29923 0012 DFF82483 		ldr	r8, .L2503+64
5321:src/xeq.c     **** 	const struct _ustate old = UState;
 29924              		.loc 1 5321 23 view .LVU7931
 29925 0016 B3F8FC27 		ldrh	r2, [r3, #2044]
5324:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29926              		.loc 1 5324 23 view .LVU7932
 29927 001a B3F8E0B7 		ldrh	fp, [r3, #2016]
5325:src/xeq.c     **** #ifdef INFRARED
 29928              		.loc 1 5325 12 view .LVU7933
 29929 001e D4F81C90 		ldr	r9, [r4, #28]
5319:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29930              		.loc 1 5319 1 view .LVU7934
 29931 0022 EBB0     		sub	sp, sp, #428
 29932              		.cfi_def_cfa_offset 464
5319:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29933              		.loc 1 5319 1 view .LVU7935
 29934 0024 0546     		mov	r5, r0
5322:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29935              		.loc 1 5322 23 view .LVU7936
 29936 0026 D3F8E407 		ldr	r0, [r3, #2020]
 29937              	.LVL2325:
5321:src/xeq.c     **** 	const struct _ustate old = UState;
 29938              		.loc 1 5321 23 view .LVU7937
 29939 002a 0392     		str	r2, [sp, #12]
 29940              	.LVL2326:
5322:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29941              		.loc 1 5322 2 is_stmt 1 view .LVU7938
5322:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29942              		.loc 1 5322 23 is_stmt 0 view .LVU7939
 29943 002c 0AAE     		add	r6, sp, #40
 29944 002e 86E80300 		stm	r6, {r0, r1}
5323:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
 29945              		.loc 1 5323 2 is_stmt 1 view .LVU7940
 29946              	.LBB4102:
 29947              	.LBI4096:
 743:src/xeq.c     **** 	return State2.state_lift;
 29948              		.loc 1 743 12 view .LVU7941
 29949              	.LBB4099:
 744:src/xeq.c     **** }
 29950              		.loc 1 744 2 view .LVU7942
 744:src/xeq.c     **** }
 29951              		.loc 1 744 15 is_stmt 0 view .LVU7943
 29952 0032 CCF38013 		ubfx	r3, ip, #6, #1
 29953              	.LBE4099:
 29954              	.LBE4102:
5340:src/xeq.c     **** #if defined(CONSOLE)
 29955              		.loc 1 5340 2 view .LVU7944
 29956 0036 D8F80010 		ldr	r1, [r8]
 29957              	.LBB4103:
ARM GAS  /tmp/ccBFDvgN.s 			page 764


 29958              	.LBB4100:
 744:src/xeq.c     **** }
 29959              		.loc 1 744 15 view .LVU7945
 29960 003a 0493     		str	r3, [sp, #16]
 29961              	.LVL2327:
 744:src/xeq.c     **** }
 29962              		.loc 1 744 15 view .LVU7946
 29963              	.LBE4100:
 29964              	.LBE4103:
5324:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29965              		.loc 1 5324 2 is_stmt 1 view .LVU7947
5325:src/xeq.c     **** #ifdef INFRARED
 29966              		.loc 1 5325 2 view .LVU7948
5340:src/xeq.c     **** #if defined(CONSOLE)
 29967              		.loc 1 5340 2 view .LVU7949
 29968 003c A022     		movs	r2, #160
 29969 003e 42A8     		add	r0, sp, #264
 29970 0040 FFF7FEFF 		bl	xcopy
 29971              	.LVL2328:
5345:src/xeq.c     **** 		char buf[16];
 29972              		.loc 1 5345 2 view .LVU7950
5345:src/xeq.c     **** 		char buf[16];
 29973              		.loc 1 5345 5 is_stmt 0 view .LVU7951
 29974 0044 94F91730 		ldrsb	r3, [r4, #23]
 29975 0048 002B     		cmp	r3, #0
 29976 004a 1CDB     		blt	.L2470
 29977              	.L2160:
5363:src/xeq.c     **** 	State2.wascomplex = 0;
 29978              		.loc 1 5363 2 is_stmt 1 view .LVU7952
5364:src/xeq.c     **** 	if (isDBL(op))
 29979              		.loc 1 5364 20 is_stmt 0 view .LVU7953
 29980 004c 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
5363:src/xeq.c     **** 	State2.wascomplex = 0;
 29981              		.loc 1 5363 7 view .LVU7954
 29982 004e AC49     		ldr	r1, .L2503+8
 29983 0050 0023     		movs	r3, #0
5364:src/xeq.c     **** 	if (isDBL(op))
 29984              		.loc 1 5364 20 view .LVU7955
 29985 0052 63F38712 		bfi	r2, r3, #6, #2
 29986 0056 2275     		strb	r2, [r4, #20]
5365:src/xeq.c     **** 		multi(op);
 29987              		.loc 1 5365 6 view .LVU7956
 29988 0058 05F47042 		and	r2, r5, #61440
5365:src/xeq.c     **** 		multi(op);
 29989              		.loc 1 5365 5 view .LVU7957
 29990 005c B2F5704F 		cmp	r2, #61440
5363:src/xeq.c     **** 	State2.wascomplex = 0;
 29991              		.loc 1 5363 7 view .LVU7958
 29992 0060 0B60     		str	r3, [r1]
5364:src/xeq.c     **** 	if (isDBL(op))
 29993              		.loc 1 5364 2 is_stmt 1 view .LVU7959
5365:src/xeq.c     **** 		multi(op);
 29994              		.loc 1 5365 2 view .LVU7960
5365:src/xeq.c     **** 		multi(op);
 29995              		.loc 1 5365 5 is_stmt 0 view .LVU7961
 29996 0062 5FD0     		beq	.L2471
5367:src/xeq.c     **** 		rargs(op);
ARM GAS  /tmp/ccBFDvgN.s 			page 765


 29997              		.loc 1 5367 7 is_stmt 1 view .LVU7962
5367:src/xeq.c     **** 		rargs(op);
 29998              		.loc 1 5367 10 is_stmt 0 view .LVU7963
 29999 0064 32BB     		cbnz	r2, .L2472
5370:src/xeq.c     **** 		switch (opKIND(op)) {
 30000              		.loc 1 5370 3 is_stmt 1 view .LVU7964
5370:src/xeq.c     **** 		switch (opKIND(op)) {
 30001              		.loc 1 5370 13 is_stmt 0 view .LVU7965
 30002 0066 A74A     		ldr	r2, .L2503+12
 30003 0068 C5F30723 		ubfx	r3, r5, #8, #8
5370:src/xeq.c     **** 		switch (opKIND(op)) {
 30004              		.loc 1 5370 15 view .LVU7966
 30005 006c 1580     		strh	r5, [r2]	@ movhi
5371:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 30006              		.loc 1 5371 3 is_stmt 1 view .LVU7967
 30007 006e 062B     		cmp	r3, #6
 30008 0070 00F2A280 		bhi	.L2197
 30009 0074 DFE813F0 		tbh	[pc, r3, lsl #1]
 30010              	.L2199:
 30011 0078 D101     		.2byte	(.L2205-.L2199)/2
 30012 007a 6A01     		.2byte	(.L2204-.L2199)/2
 30013 007c A301     		.2byte	(.L2203-.L2199)/2
 30014 007e 9400     		.2byte	(.L2202-.L2199)/2
 30015 0080 0402     		.2byte	(.L2201-.L2199)/2
 30016 0082 4402     		.2byte	(.L2200-.L2199)/2
 30017 0084 7902     		.2byte	(.L2198-.L2199)/2
 30018              		.p2align 1
 30019              	.L2470:
5345:src/xeq.c     **** 		char buf[16];
 30020              		.loc 1 5345 22 is_stmt 0 discriminator 1 view .LVU7968
 30021 0086 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
5345:src/xeq.c     **** 		char buf[16];
 30022              		.loc 1 5345 19 discriminator 1 view .LVU7969
 30023 0088 9B07     		lsls	r3, r3, #30
 30024 008a DFD4     		bmi	.L2160
 30025              	.LBB4104:
5346:src/xeq.c     **** 		if (Running)
 30026              		.loc 1 5346 3 is_stmt 1 view .LVU7970
5347:src/xeq.c     **** 			print_step(op);
 30027              		.loc 1 5347 3 view .LVU7971
5347:src/xeq.c     **** 			print_step(op);
 30028              		.loc 1 5347 7 is_stmt 0 view .LVU7972
 30029 008c DFF8ACA2 		ldr	r10, .L2503+68
5347:src/xeq.c     **** 			print_step(op);
 30030              		.loc 1 5347 6 view .LVU7973
 30031 0090 DAF80030 		ldr	r3, [r10]
 30032 0094 002B     		cmp	r3, #0
 30033 0096 7FD1     		bne	.L2473
5350:src/xeq.c     **** 		DispMsg = TraceBuffer;
 30034              		.loc 1 5350 4 is_stmt 1 view .LVU7974
 30035 0098 39A9     		add	r1, sp, #228
 30036 009a 2846     		mov	r0, r5
 30037 009c FFF7FEFF 		bl	prt
 30038              	.LVL2329:
 30039 00a0 9949     		ldr	r1, .L2503+16
 30040 00a2 0346     		mov	r3, r0
 30041 00a4 2A46     		mov	r2, r5
ARM GAS  /tmp/ccBFDvgN.s 			page 766


 30042 00a6 9948     		ldr	r0, .L2503+20
 30043 00a8 FFF7FEFF 		bl	sprintf
 30044              	.LVL2330:
 30045              	.L2162:
5351:src/xeq.c     **** 	}
 30046              		.loc 1 5351 3 view .LVU7975
5351:src/xeq.c     **** 	}
 30047              		.loc 1 5351 11 is_stmt 0 view .LVU7976
 30048 00ac 984B     		ldr	r3, .L2503+24
 30049 00ae 974A     		ldr	r2, .L2503+20
 30050 00b0 1A60     		str	r2, [r3]
 30051 00b2 CBE7     		b	.L2160
 30052              	.L2472:
5351:src/xeq.c     **** 	}
 30053              		.loc 1 5351 11 view .LVU7977
 30054              	.LBE4104:
5368:src/xeq.c     **** 	else {
 30055              		.loc 1 5368 3 is_stmt 1 view .LVU7978
 30056              	.LVL2331:
 30057              	.LBB4105:
 30058              	.LBI4105:
5187:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
 30059              		.loc 1 5187 13 view .LVU7979
 30060              	.LBB4106:
5188:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 30061              		.loc 1 5188 2 view .LVU7980
5189:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30062              		.loc 1 5189 2 view .LVU7981
5189:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30063              		.loc 1 5189 27 is_stmt 0 view .LVU7982
 30064 00b4 4FEA152A 		lsr	r10, r5, #8
5191:src/xeq.c     **** 
 30065              		.loc 1 5191 33 view .LVU7983
 30066 00b8 964B     		ldr	r3, .L2503+28
5193:src/xeq.c     **** 
 30067              		.loc 1 5193 12 view .LVU7984
 30068 00ba 9248     		ldr	r0, .L2503+12
 30069              	.LBB4107:
 30070              	.LBB4108:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30071              		.loc 1 1229 5 view .LVU7985
 30072 00bc 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 30073              	.LBE4108:
 30074              	.LBE4107:
5189:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30075              		.loc 1 5189 27 view .LVU7986
 30076 00be AAF1200A 		sub	r10, r10, #32
 30077 00c2 5FFA8AFA 		uxtb	r10, r10
 30078              	.LVL2332:
5190:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
 30079              		.loc 1 5190 2 is_stmt 1 view .LVU7987
5191:src/xeq.c     **** 
 30080              		.loc 1 5191 2 view .LVU7988
5191:src/xeq.c     **** 
 30081              		.loc 1 5191 33 is_stmt 0 view .LVU7989
 30082 00c6 03EB0A12 		add	r2, r3, r10, lsl #4
5193:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 767


 30083              		.loc 1 5193 14 view .LVU7990
 30084 00ca A0F800A0 		strh	r10, [r0]	@ movhi
5191:src/xeq.c     **** 
 30085              		.loc 1 5191 33 view .LVU7991
 30086 00ce 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 30087 00d0 0592     		str	r2, [sp, #20]
 30088              	.LVL2333:
5193:src/xeq.c     **** 
 30089              		.loc 1 5193 2 is_stmt 1 view .LVU7992
5195:src/xeq.c     **** 
 30090              		.loc 1 5195 2 view .LVU7993
 30091              	.LBB4112:
 30092              	.LBI4107:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30093              		.loc 1 1226 6 view .LVU7994
 30094              	.LBB4109:
1227:src/xeq.c     **** 
 30095              		.loc 1 1227 2 view .LVU7995
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30096              		.loc 1 1229 2 view .LVU7996
 30097              	.LBE4109:
 30098              	.LBE4112:
5191:src/xeq.c     **** 
 30099              		.loc 1 5191 33 is_stmt 0 view .LVU7997
 30100 00d2 4FEA0A12 		lsl	r2, r10, #4
 30101              	.LBB4113:
 30102              	.LBB4110:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30103              		.loc 1 1229 5 view .LVU7998
 30104 00d6 0029     		cmp	r1, #0
 30105 00d8 40F03281 		bne	.L2474
 30106              	.L2174:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30107              		.loc 1 1229 5 view .LVU7999
 30108              	.LBE4110:
 30109              	.LBE4113:
5197:src/xeq.c     **** 		illegal(op);
 30110              		.loc 1 5197 2 is_stmt 1 view .LVU8000
5197:src/xeq.c     **** 		illegal(op);
 30111              		.loc 1 5197 5 is_stmt 0 view .LVU8001
 30112 00dc BAF18E0F 		cmp	r10, #142
 30113 00e0 6AD8     		bhi	.L2197
5201:src/xeq.c     **** 		set_lift();
 30114              		.loc 1 5201 2 is_stmt 1 view .LVU8002
5201:src/xeq.c     **** 		set_lift();
 30115              		.loc 1 5201 6 is_stmt 0 view .LVU8003
 30116 00e2 9958     		ldr	r1, [r3, r2]
 30117 00e4 0891     		str	r1, [sp, #32]
 30118 00e6 9818     		adds	r0, r3, r2
5201:src/xeq.c     **** 		set_lift();
 30119              		.loc 1 5201 5 view .LVU8004
 30120 00e8 0029     		cmp	r1, #0
 30121 00ea 44D0     		beq	.L2445
5188:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 30122              		.loc 1 5188 15 view .LVU8005
 30123 00ec 05F07F01 		and	r1, r5, #127
5206:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
ARM GAS  /tmp/ccBFDvgN.s 			page 768


 30124              		.loc 1 5206 2 is_stmt 1 view .LVU8006
5206:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30125              		.loc 1 5206 5 is_stmt 0 view .LVU8007
 30126 00f0 2D06     		lsls	r5, r5, #24
 30127              	.LVL2334:
5206:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30128              		.loc 1 5206 5 view .LVU8008
 30129 00f2 40F1A282 		bpl	.L2178
5207:src/xeq.c     **** 			// Get the argument by reading a register
 30130              		.loc 1 5207 3 is_stmt 1 view .LVU8009
5207:src/xeq.c     **** 			// Get the argument by reading a register
 30131              		.loc 1 5207 19 is_stmt 0 view .LVU8010
 30132 00f6 4579     		ldrb	r5, [r0, #5]	@ zero_extendqisi2
5207:src/xeq.c     **** 			// Get the argument by reading a register
 30133              		.loc 1 5207 6 view .LVU8011
 30134 00f8 E807     		lsls	r0, r5, #31
 30135 00fa 40F12583 		bpl	.L2179
 30136              	.LBB4114:
5209:src/xeq.c     **** 			unsigned long long int regval;
 30137              		.loc 1 5209 4 is_stmt 1 view .LVU8012
5210:src/xeq.c     **** 
 30138              		.loc 1 5210 4 view .LVU8013
5212:src/xeq.c     **** 				// Invalid register specified for indirect access
 30139              		.loc 1 5212 4 view .LVU8014
5212:src/xeq.c     **** 				// Invalid register specified for indirect access
 30140              		.loc 1 5212 14 is_stmt 0 view .LVU8015
 30141 00fe 0A20     		movs	r0, #10
 30142 0100 0992     		str	r2, [sp, #36]
 30143 0102 0691     		str	r1, [sp, #24]
 30144 0104 FFF7FEFF 		bl	get_reg_limit
 30145              	.LVL2335:
5212:src/xeq.c     **** 				// Invalid register specified for indirect access
 30146              		.loc 1 5212 7 view .LVU8016
 30147 0108 0699     		ldr	r1, [sp, #24]
 30148 010a 099A     		ldr	r2, [sp, #36]
 30149 010c 8142     		cmp	r1, r0
 30150 010e 40F27F82 		bls	.L2180
5214:src/xeq.c     **** 				return;
 30151              		.loc 1 5214 5 is_stmt 1 view .LVU8017
 30152              	.LVL2336:
 30153              	.LBB4115:
 30154              	.LBI4115:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30155              		.loc 1 546 5 view .LVU8018
 30156              	.LBB4116:
 547:src/xeq.c     **** 		Error = e;
 30157              		.loc 1 547 2 view .LVU8019
 547:src/xeq.c     **** 		Error = e;
 30158              		.loc 1 547 12 is_stmt 0 view .LVU8020
 30159 0112 814B     		ldr	r3, .L2503+32
 30160 0114 1A68     		ldr	r2, [r3]
 547:src/xeq.c     **** 		Error = e;
 30161              		.loc 1 547 5 view .LVU8021
 30162 0116 0AB9     		cbnz	r2, .L2182
 30163              	.LVL2337:
 30164              	.LBB4117:
 30165              	.LBI4117:
ARM GAS  /tmp/ccBFDvgN.s 			page 769


 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30166              		.loc 1 546 5 is_stmt 1 view .LVU8022
 30167              	.LBB4118:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30168              		.loc 1 548 3 view .LVU8023
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30169              		.loc 1 548 9 is_stmt 0 view .LVU8024
 30170 0118 0822     		movs	r2, #8
 30171 011a 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30172              		.loc 1 549 3 is_stmt 1 view .LVU8025
 30173              	.LVL2338:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30174              		.loc 1 549 3 is_stmt 0 view .LVU8026
 30175              	.LBE4118:
 30176              	.LBE4117:
 30177              	.LBE4116:
 30178              	.LBE4115:
5215:src/xeq.c     **** 			}
 30179              		.loc 1 5215 5 is_stmt 1 view .LVU8027
5215:src/xeq.c     **** 			}
 30180              		.loc 1 5215 5 is_stmt 0 view .LVU8028
 30181              	.LBE4114:
 30182              	.LBE4106:
 30183              	.LBE4105:
5379:src/xeq.c     **** 		}
 30184              		.loc 1 5379 12 is_stmt 1 view .LVU8029
5389:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30185              		.loc 1 5389 2 view .LVU8030
 30186              	.L2182:
5389:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30187              		.loc 1 5389 2 is_stmt 0 view .LVU8031
 30188 011c DFF81CA2 		ldr	r10, .L2503+68
 30189 0120 1046     		mov	r0, r2
 30190 0122 52E0     		b	.L2307
 30191              	.LVL2339:
 30192              	.L2471:
5366:src/xeq.c     **** 	else if (isRARG(op))
 30193              		.loc 1 5366 3 is_stmt 1 view .LVU8032
 30194              	.LBB4147:
 30195              	.LBI4147:
5283:src/xeq.c     **** 	const int cmd = opDBL(op);
 30196              		.loc 1 5283 13 view .LVU8033
 30197              	.LBB4148:
5284:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 30198              		.loc 1 5284 2 view .LVU8034
5285:src/xeq.c     **** 
 30199              		.loc 1 5285 12 is_stmt 0 view .LVU8035
 30200 0124 774A     		ldr	r2, .L2503+12
 30201              	.LBB4149:
 30202              	.LBB4150:
 30203              	.LBB4151:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30204              		.loc 1 1229 5 view .LVU8036
 30205 0126 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30206              	.LBE4151:
 30207              	.LBE4150:
ARM GAS  /tmp/ccBFDvgN.s 			page 770


 30208              	.LBE4149:
5284:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 30209              		.loc 1 5284 12 view .LVU8037
 30210 0128 C5F3032A 		ubfx	r10, r5, #8, #4
 30211              	.LVL2340:
5285:src/xeq.c     **** 
 30212              		.loc 1 5285 2 is_stmt 1 view .LVU8038
5285:src/xeq.c     **** 
 30213              		.loc 1 5285 14 is_stmt 0 view .LVU8039
 30214 012c A2F800A0 		strh	r10, [r2]	@ movhi
5287:src/xeq.c     **** 
 30215              		.loc 1 5287 2 is_stmt 1 view .LVU8040
 30216              	.LBB4160:
 30217              	.LBI4149:
1332:src/xeq.c     **** 	process_cmdline();
 30218              		.loc 1 1332 6 view .LVU8041
 30219              	.LBE4160:
 30220              	.LBE4148:
 30221              	.LBE4147:
1333:src/xeq.c     **** 	set_lift();
 30222              		.loc 1 1333 2 view .LVU8042
 30223              	.LBB4184:
 30224              	.LBB4179:
 30225              	.LBB4161:
 30226              	.LBB4154:
 30227              	.LBI4150:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30228              		.loc 1 1226 6 view .LVU8043
 30229              	.LBB4152:
1227:src/xeq.c     **** 
 30230              		.loc 1 1227 2 view .LVU8044
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30231              		.loc 1 1229 2 view .LVU8045
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30232              		.loc 1 1229 5 is_stmt 0 view .LVU8046
 30233 0130 002B     		cmp	r3, #0
 30234 0132 40F05482 		bne	.L2475
 30235              	.L2164:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30236              		.loc 1 1229 5 view .LVU8047
 30237              	.LBE4152:
 30238              	.LBE4154:
 30239              	.LBE4161:
 30240              	.LBE4179:
 30241              	.LBE4184:
1334:src/xeq.c     **** }
 30242              		.loc 1 1334 2 is_stmt 1 view .LVU8048
 30243              	.LBB4185:
 30244              	.LBB4180:
 30245              	.LBB4162:
 30246              	.LBB4155:
 30247              	.LBI4155:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30248              		.loc 1 767 6 view .LVU8049
 30249              	.LBB4156:
 768:src/xeq.c     **** }
 30250              		.loc 1 768 5 view .LVU8050
ARM GAS  /tmp/ccBFDvgN.s 			page 771


 768:src/xeq.c     **** }
 30251              		.loc 1 768 23 is_stmt 0 view .LVU8051
 30252 0136 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30253              	.LBE4156:
 30254              	.LBE4155:
 30255              	.LBE4162:
5289:src/xeq.c     **** 		illegal(op);
 30256              		.loc 1 5289 5 view .LVU8052
 30257 0138 BAF10B0F 		cmp	r10, #11
 30258              	.LBB4163:
 30259              	.LBB4158:
 30260              	.LBB4157:
 768:src/xeq.c     **** }
 30261              		.loc 1 768 23 view .LVU8053
 30262 013c 43F04003 		orr	r3, r3, #64
 30263 0140 E375     		strb	r3, [r4, #23]
 30264              	.LBE4157:
 30265              	.LBE4158:
 30266              	.LBE4163:
5289:src/xeq.c     **** 		illegal(op);
 30267              		.loc 1 5289 2 is_stmt 1 view .LVU8054
5289:src/xeq.c     **** 		illegal(op);
 30268              		.loc 1 5289 5 is_stmt 0 view .LVU8055
 30269 0142 00F34482 		bgt	.L2476
5293:src/xeq.c     **** 		return;
 30270              		.loc 1 5293 2 is_stmt 1 view .LVU8056
5293:src/xeq.c     **** 		return;
 30271              		.loc 1 5293 6 is_stmt 0 view .LVU8057
 30272 0146 754A     		ldr	r2, .L2503+36
 30273 0148 4FEA0A13 		lsl	r3, r10, #4
 30274 014c D258     		ldr	r2, [r2, r3]
5293:src/xeq.c     **** 		return;
 30275              		.loc 1 5293 5 view .LVU8058
 30276 014e 002A     		cmp	r2, #0
 30277 0150 00F09C82 		beq	.L2168
 30278              	.LBB4164:
5296:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 30279              		.loc 1 5296 3 is_stmt 1 view .LVU8059
 30280              	.LVL2341:
5297:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 30281              		.loc 1 5297 3 view .LVU8060
 30282              	.LBB4165:
 30283              	.LBI4165:
4501:src/xeq.c     **** {
 30284              		.loc 1 4501 24 view .LVU8061
 30285              	.LBB4166:
4503:src/xeq.c     **** 	if (xp < xrom)
 30286              		.loc 1 4503 2 view .LVU8062
4504:src/xeq.c     **** 		return NULL;
 30287              		.loc 1 4504 5 is_stmt 0 view .LVU8063
 30288 0154 724B     		ldr	r3, .L2503+40
4503:src/xeq.c     **** 	if (xp < xrom)
 30289              		.loc 1 4503 59 view .LVU8064
 30290 0156 22F00101 		bic	r1, r2, #1
 30291              	.LVL2342:
4504:src/xeq.c     **** 		return NULL;
 30292              		.loc 1 4504 2 is_stmt 1 view .LVU8065
ARM GAS  /tmp/ccBFDvgN.s 			page 772


4504:src/xeq.c     **** 		return NULL;
 30293              		.loc 1 4504 5 is_stmt 0 view .LVU8066
 30294 015a 9942     		cmp	r1, r3
 30295 015c 08D3     		bcc	.L2169
4508:src/xeq.c     **** 		return NULL;
 30296              		.loc 1 4508 2 is_stmt 1 view .LVU8067
4508:src/xeq.c     **** 		return NULL;
 30297              		.loc 1 4508 17 is_stmt 0 view .LVU8068
 30298 015e 7148     		ldr	r0, .L2503+44
 30299 0160 0088     		ldrh	r0, [r0]
 30300 0162 03EB4003 		add	r3, r3, r0, lsl #1
4508:src/xeq.c     **** 		return NULL;
 30301              		.loc 1 4508 5 view .LVU8069
 30302 0166 9942     		cmp	r1, r3
 30303 0168 02D2     		bcs	.L2169
 30304              	.LVL2343:
4508:src/xeq.c     **** 		return NULL;
 30305              		.loc 1 4508 5 view .LVU8070
 30306              	.LBE4166:
 30307              	.LBE4165:
5297:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 30308              		.loc 1 5297 6 view .LVU8071
 30309 016a 0029     		cmp	r1, #0
 30310 016c 40F04F83 		bne	.L2477
 30311              	.L2169:
5307:src/xeq.c     **** 			set_lift();
 30312              		.loc 1 5307 4 is_stmt 1 view .LVU8072
 30313 0170 5146     		mov	r1, r10
 30314 0172 2846     		mov	r0, r5
 30315 0174 9047     		blx	r2
 30316              	.LVL2344:
5308:src/xeq.c     **** 		}
 30317              		.loc 1 5308 4 view .LVU8073
 30318              	.LBB4167:
 30319              	.LBI4167:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30320              		.loc 1 767 6 view .LVU8074
 30321              	.LBB4168:
 768:src/xeq.c     **** }
 30322              		.loc 1 768 5 view .LVU8075
 30323              	.L2445:
 768:src/xeq.c     **** }
 30324              		.loc 1 768 5 is_stmt 0 view .LVU8076
 30325              	.LBE4168:
 30326              	.LBE4167:
 30327              	.LBE4164:
 30328              	.LBE4180:
 30329              	.LBE4185:
 30330              	.LBB4186:
 30331              	.LBB4187:
4006:src/xeq.c     **** 		} else {
 30332              		.loc 1 4006 4 is_stmt 1 view .LVU8077
 30333              	.LBB4188:
 30334              	.LBI4188:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30335              		.loc 1 767 6 view .LVU8078
 30336              	.LBB4189:
ARM GAS  /tmp/ccBFDvgN.s 			page 773


 768:src/xeq.c     **** }
 30337              		.loc 1 768 5 view .LVU8079
 768:src/xeq.c     **** }
 30338              		.loc 1 768 23 is_stmt 0 view .LVU8080
 30339 0176 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30340 0178 674B     		ldr	r3, .L2503+32
 30341 017a 42F04002 		orr	r2, r2, #64
 30342 017e E275     		strb	r2, [r4, #23]
 30343 0180 1A68     		ldr	r2, [r3]
 30344              	.L2171:
 30345              	.LBE4189:
 30346              	.LBE4188:
 30347              	.LBE4187:
 30348              	.LBE4186:
5379:src/xeq.c     **** 		}
 30349              		.loc 1 5379 12 is_stmt 1 discriminator 1 view .LVU8081
5389:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30350              		.loc 1 5389 2 discriminator 1 view .LVU8082
5389:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30351              		.loc 1 5389 5 is_stmt 0 discriminator 1 view .LVU8083
 30352 0182 002A     		cmp	r2, #0
 30353 0184 CAD1     		bne	.L2182
 30354              	.LVL2345:
 30355              	.L2293:
5458:src/xeq.c     **** #ifdef INFRARED
 30356              		.loc 1 5458 2 is_stmt 1 view .LVU8084
 30357              	.LBB4260:
 30358              	.LBI4260:
4455:src/xeq.c     **** 	// extern int IntMaxWindow;
 30359              		.loc 1 4455 6 view .LVU8085
 30360              	.LBB4261:
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30361              		.loc 1 4458 2 view .LVU8086
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30362              		.loc 1 4458 16 is_stmt 0 view .LVU8087
 30363 0186 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4459:src/xeq.c     **** }
 30364              		.loc 1 4459 15 view .LVU8088
 30365 0188 0022     		movs	r2, #0
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30366              		.loc 1 4458 16 view .LVU8089
 30367 018a 6FF3C503 		bfc	r3, #3, #3
 30368 018e 2375     		strb	r3, [r4, #20]
4459:src/xeq.c     **** }
 30369              		.loc 1 4459 2 is_stmt 1 view .LVU8090
4459:src/xeq.c     **** }
 30370              		.loc 1 4459 15 is_stmt 0 view .LVU8091
 30371 0190 6274     		strb	r2, [r4, #17]
 30372              	.LBE4261:
 30373              	.LBE4260:
5463:src/xeq.c     **** 
 30374              		.loc 1 5463 1 view .LVU8092
 30375 0192 6BB0     		add	sp, sp, #428
 30376              		.cfi_remember_state
 30377              		.cfi_def_cfa_offset 36
 30378              		@ sp needed
 30379 0194 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/ccBFDvgN.s 			page 774


 30380              	.LVL2346:
 30381              	.L2473:
 30382              		.cfi_restore_state
 30383              	.LBB4262:
5348:src/xeq.c     **** 		else
 30384              		.loc 1 5348 4 is_stmt 1 view .LVU8093
 30385 0198 2846     		mov	r0, r5
 30386 019a FFF7FEFF 		bl	print_step
 30387              	.LVL2347:
 30388 019e 85E7     		b	.L2162
 30389              	.L2202:
5348:src/xeq.c     **** 		else
 30390              		.loc 1 5348 4 is_stmt 0 view .LVU8094
 30391              	.LBE4262:
5375:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
 30392              		.loc 1 5375 18 is_stmt 1 view .LVU8095
 30393              	.LVL2348:
 30394              	.LBB4263:
 30395              	.LBI4263:
4742:src/xeq.c     **** 
 30396              		.loc 1 4742 13 view .LVU8096
 30397              	.LBB4264:
4744:src/xeq.c     **** 	process_cmdline_set_lift();
 30398              		.loc 1 4744 2 view .LVU8097
4745:src/xeq.c     **** 
 30399              		.loc 1 4745 2 view .LVU8098
 30400              	.LBB4265:
 30401              	.LBI4265:
1332:src/xeq.c     **** 	process_cmdline();
 30402              		.loc 1 1332 6 view .LVU8099
 30403              	.LBE4265:
 30404              	.LBE4264:
 30405              	.LBE4263:
1333:src/xeq.c     **** 	set_lift();
 30406              		.loc 1 1333 2 view .LVU8100
 30407              	.LBB4313:
 30408              	.LBB4306:
 30409              	.LBB4274:
 30410              	.LBB4266:
 30411              	.LBI4266:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30412              		.loc 1 1226 6 view .LVU8101
 30413              	.LBB4267:
1227:src/xeq.c     **** 
 30414              		.loc 1 1227 2 view .LVU8102
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30415              		.loc 1 1229 2 view .LVU8103
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30416              		.loc 1 1229 5 is_stmt 0 view .LVU8104
 30417 01a0 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30418 01a2 0BB1     		cbz	r3, .L2267
 30419 01a4 FFF7FEFF 		bl	process_cmdline.part.0
 30420              	.LVL2349:
 30421              	.L2267:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30422              		.loc 1 1229 5 view .LVU8105
 30423              	.LBE4267:
ARM GAS  /tmp/ccBFDvgN.s 			page 775


 30424              	.LBE4266:
 30425              	.LBE4274:
 30426              	.LBE4306:
 30427              	.LBE4313:
1334:src/xeq.c     **** }
 30428              		.loc 1 1334 2 is_stmt 1 view .LVU8106
 30429              	.LBB4314:
 30430              	.LBB4307:
 30431              	.LBB4275:
 30432              	.LBB4268:
 30433              	.LBI4268:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30434              		.loc 1 767 6 view .LVU8107
 30435              	.LBB4269:
 768:src/xeq.c     **** }
 30436              		.loc 1 768 5 view .LVU8108
 768:src/xeq.c     **** }
 30437              		.loc 1 768 23 is_stmt 0 view .LVU8109
 30438 01a8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30439              	.LBE4269:
 30440              	.LBE4268:
 30441              	.LBE4275:
4747:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30442              		.loc 1 4747 4 view .LVU8110
 30443 01aa EDB2     		uxtb	r5, r5
 30444              	.LVL2350:
 30445              	.LBB4276:
 30446              	.LBB4272:
 30447              	.LBB4270:
 768:src/xeq.c     **** }
 30448              		.loc 1 768 23 view .LVU8111
 30449 01ac 43F04003 		orr	r3, r3, #64
 30450              	.LBE4270:
 30451              	.LBE4272:
 30452              	.LBE4276:
4748:src/xeq.c     **** 		if (is_intmode()) {
 30453              		.loc 1 4748 5 view .LVU8112
 30454 01b0 342D     		cmp	r5, #52
 30455              	.LBB4277:
 30456              	.LBB4273:
 30457              	.LBB4271:
 768:src/xeq.c     **** }
 30458              		.loc 1 768 23 view .LVU8113
 30459 01b2 E375     		strb	r3, [r4, #23]
 30460              	.LBE4271:
 30461              	.LBE4273:
 30462              	.LBE4277:
4747:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30463              		.loc 1 4747 2 is_stmt 1 view .LVU8114
 30464              	.LVL2351:
4748:src/xeq.c     **** 		if (is_intmode()) {
 30465              		.loc 1 4748 2 view .LVU8115
4748:src/xeq.c     **** 		if (is_intmode()) {
 30466              		.loc 1 4748 5 is_stmt 0 view .LVU8116
 30467 01b4 40F2CB82 		bls	.L2478
 30468              	.LVL2352:
 30469              	.L2197:
ARM GAS  /tmp/ccBFDvgN.s 			page 776


4748:src/xeq.c     **** 		if (is_intmode()) {
 30470              		.loc 1 4748 5 view .LVU8117
 30471              	.LBE4307:
 30472              	.LBE4314:
5379:src/xeq.c     **** 		}
 30473              		.loc 1 5379 12 is_stmt 1 view .LVU8118
5379:src/xeq.c     **** 		}
 30474              		.loc 1 5379 12 view .LVU8119
 30475              	.LBB4315:
 30476              	.LBI4315:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30477              		.loc 1 546 5 view .LVU8120
 30478              	.LBB4316:
 547:src/xeq.c     **** 		Error = e;
 30479              		.loc 1 547 2 view .LVU8121
 547:src/xeq.c     **** 		Error = e;
 30480              		.loc 1 547 12 is_stmt 0 view .LVU8122
 30481 01b8 574B     		ldr	r3, .L2503+32
 30482 01ba 1868     		ldr	r0, [r3]
 547:src/xeq.c     **** 		Error = e;
 30483              		.loc 1 547 5 view .LVU8123
 30484 01bc 0028     		cmp	r0, #0
 30485 01be 40F04F82 		bne	.L2440
 30486 01c2 DFF878A1 		ldr	r10, .L2503+68
 30487              	.LVL2353:
 30488              	.L2176:
 547:src/xeq.c     **** 		Error = e;
 30489              		.loc 1 547 5 view .LVU8124
 30490              	.LBE4316:
 30491              	.LBE4315:
 30492              	.LBB4317:
 30493              	.LBB4181:
 30494              	.LBB4171:
 30495              	.LBB4172:
 30496              	.LBB4173:
 30497              	.LBI4173:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30498              		.loc 1 546 5 is_stmt 1 view .LVU8125
 30499              	.LBB4174:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30500              		.loc 1 548 3 view .LVU8126
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30501              		.loc 1 548 9 is_stmt 0 view .LVU8127
 30502 01c6 0320     		movs	r0, #3
 30503 01c8 1860     		str	r0, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30504              		.loc 1 549 3 is_stmt 1 view .LVU8128
 30505              	.LVL2354:
 30506              	.L2307:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30507              		.loc 1 549 3 is_stmt 0 view .LVU8129
 30508              	.LBE4174:
 30509              	.LBE4173:
 30510              	.LBE4172:
 30511              	.LBE4171:
 30512              	.LBE4181:
 30513              	.LBE4317:
ARM GAS  /tmp/ccBFDvgN.s 			page 777


5391:src/xeq.c     **** 		// Repair stack and state
 30514              		.loc 1 5391 3 is_stmt 1 view .LVU8130
 30515 01ca 0593     		str	r3, [sp, #20]
 30516 01cc FFF7FEFF 		bl	error_message
 30517              	.LVL2355:
5394:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
 30518              		.loc 1 5394 3 view .LVU8131
 30519 01d0 42A9     		add	r1, sp, #264
 30520 01d2 A022     		movs	r2, #160
 30521 01d4 D8F80000 		ldr	r0, [r8]
 30522 01d8 FFF7FEFF 		bl	xcopy
 30523              	.LVL2356:
5395:src/xeq.c     **** 		UState = old;
 30524              		.loc 1 5395 3 view .LVU8132
5396:src/xeq.c     **** 		State2.state_lift = lift;
 30525              		.loc 1 5396 10 is_stmt 0 view .LVU8133
 30526 01dc 96E80300 		ldm	r6, {r0, r1}
5395:src/xeq.c     **** 		UState = old;
 30527              		.loc 1 5395 3 view .LVU8134
 30528 01e0 3A68     		ldr	r2, [r7]
5395:src/xeq.c     **** 		UState = old;
 30529              		.loc 1 5395 28 view .LVU8135
 30530 01e2 039B     		ldr	r3, [sp, #12]
 30531 01e4 A2F8FC37 		strh	r3, [r2, #2044]	@ movhi
5396:src/xeq.c     **** 		State2.state_lift = lift;
 30532              		.loc 1 5396 3 is_stmt 1 view .LVU8136
5396:src/xeq.c     **** 		State2.state_lift = lift;
 30533              		.loc 1 5396 10 is_stmt 0 view .LVU8137
 30534 01e8 02F2E475 		addw	r5, r2, #2020
 30535 01ec 85E80300 		stm	r5, {r0, r1}
5397:src/xeq.c     **** 		raw_set_pc(old_pc);
 30536              		.loc 1 5397 3 is_stmt 1 view .LVU8138
5397:src/xeq.c     **** 		raw_set_pc(old_pc);
 30537              		.loc 1 5397 21 is_stmt 0 view .LVU8139
 30538 01f0 049B     		ldr	r3, [sp, #16]
 30539 01f2 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 30540 01f4 63F38611 		bfi	r1, r3, #6, #1
 30541 01f8 E175     		strb	r1, [r4, #23]
5398:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
 30542              		.loc 1 5398 3 is_stmt 1 view .LVU8140
 30543              	.LVL2357:
 30544              	.LBB4318:
 30545              	.LBI4318:
 282:src/xeq.c     **** 	State.pc = pc;
 30546              		.loc 1 282 13 view .LVU8141
 30547              	.LBB4319:
 283:src/xeq.c     **** 	update_program_bounds(0);
 30548              		.loc 1 283 2 view .LVU8142
 284:src/xeq.c     **** }
 30549              		.loc 1 284 2 is_stmt 0 view .LVU8143
 30550 01fa 0020     		movs	r0, #0
 283:src/xeq.c     **** 	update_program_bounds(0);
 30551              		.loc 1 283 11 view .LVU8144
 30552 01fc A2F8E0B7 		strh	fp, [r2, #2016]	@ movhi
 284:src/xeq.c     **** }
 30553              		.loc 1 284 2 is_stmt 1 view .LVU8145
 30554 0200 FFF7FEFF 		bl	update_program_bounds
ARM GAS  /tmp/ccBFDvgN.s 			page 778


 30555              	.LVL2358:
 284:src/xeq.c     **** }
 30556              		.loc 1 284 2 is_stmt 0 view .LVU8146
 30557              	.LBE4319:
 30558              	.LBE4318:
5399:src/xeq.c     **** 		process_cmdline_set_lift();
 30559              		.loc 1 5399 3 is_stmt 1 view .LVU8147
 30560              	.LBB4320:
 30561              	.LBB4321:
 30562              	.LBB4322:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30563              		.loc 1 1229 5 is_stmt 0 view .LVU8148
 30564 0204 19F0FF0F 		tst	r9, #255
 30565 0208 059B     		ldr	r3, [sp, #20]
 30566              	.LBE4322:
 30567              	.LBE4321:
 30568              	.LBE4320:
5399:src/xeq.c     **** 		process_cmdline_set_lift();
 30569              		.loc 1 5399 26 view .LVU8149
 30570 020a C4F81C90 		str	r9, [r4, #28]
5400:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
 30571              		.loc 1 5400 3 is_stmt 1 view .LVU8150
 30572              	.LBB4333:
 30573              	.LBI4320:
1332:src/xeq.c     **** 	process_cmdline();
 30574              		.loc 1 1332 6 view .LVU8151
 30575              	.LBE4333:
1333:src/xeq.c     **** 	set_lift();
 30576              		.loc 1 1333 2 view .LVU8152
 30577              	.LBB4334:
 30578              	.LBB4325:
 30579              	.LBI4321:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30580              		.loc 1 1226 6 view .LVU8153
 30581              	.LBB4323:
1227:src/xeq.c     **** 
 30582              		.loc 1 1227 2 view .LVU8154
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30583              		.loc 1 1229 2 view .LVU8155
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30584              		.loc 1 1229 5 is_stmt 0 view .LVU8156
 30585 020e 40F04082 		bne	.L2479
 30586              	.LVL2359:
 30587              	.L2294:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30588              		.loc 1 1229 5 view .LVU8157
 30589              	.LBE4323:
 30590              	.LBE4325:
 30591              	.LBE4334:
1334:src/xeq.c     **** }
 30592              		.loc 1 1334 2 is_stmt 1 view .LVU8158
 30593              	.LBB4335:
 30594              	.LBB4326:
 30595              	.LBI4326:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30596              		.loc 1 767 6 view .LVU8159
 30597              	.LBB4327:
ARM GAS  /tmp/ccBFDvgN.s 			page 779


 768:src/xeq.c     **** }
 30598              		.loc 1 768 5 view .LVU8160
 30599              	.LBE4327:
 30600              	.LBE4326:
 30601              	.LBE4335:
5404:src/xeq.c     **** #ifndef REALBUILD
 30602              		.loc 1 5404 15 is_stmt 0 view .LVU8161
 30603 0212 4549     		ldr	r1, .L2503+48
 30604              	.LBB4336:
 30605              	.LBB4330:
 30606              	.LBB4328:
 768:src/xeq.c     **** }
 30607              		.loc 1 768 23 view .LVU8162
 30608 0214 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30609              	.LBE4328:
 30610              	.LBE4330:
 30611              	.LBE4336:
5404:src/xeq.c     **** #ifndef REALBUILD
 30612              		.loc 1 5404 15 view .LVU8163
 30613 0216 0D68     		ldr	r5, [r1]
 30614 0218 DAF80010 		ldr	r1, [r10]
 30615              	.LBB4337:
 30616              	.LBB4331:
 30617              	.LBB4329:
 768:src/xeq.c     **** }
 30618              		.loc 1 768 23 view .LVU8164
 30619 021c 42F04002 		orr	r2, r2, #64
 30620 0220 E275     		strb	r2, [r4, #23]
 30621              	.LBE4329:
 30622              	.LBE4331:
 30623              	.LBE4337:
5403:src/xeq.c     **** 		if (Running || XromRunning) {
 30624              		.loc 1 5403 3 is_stmt 1 view .LVU8165
5403:src/xeq.c     **** 		if (Running || XromRunning) {
 30625              		.loc 1 5403 9 is_stmt 0 view .LVU8166
 30626 0222 0020     		movs	r0, #0
5404:src/xeq.c     **** #ifndef REALBUILD
 30627              		.loc 1 5404 15 view .LVU8167
 30628 0224 51EA0502 		orrs	r2, r1, r5
5403:src/xeq.c     **** 		if (Running || XromRunning) {
 30629              		.loc 1 5403 9 view .LVU8168
 30630 0228 1860     		str	r0, [r3]
5404:src/xeq.c     **** #ifndef REALBUILD
 30631              		.loc 1 5404 3 is_stmt 1 view .LVU8169
5404:src/xeq.c     **** #ifndef REALBUILD
 30632              		.loc 1 5404 15 is_stmt 0 view .LVU8170
 30633 022a ACD0     		beq	.L2293
5406:src/xeq.c     **** 				// Special handling for debug environment
 30634              		.loc 1 5406 4 is_stmt 1 view .LVU8171
5406:src/xeq.c     **** 				// Special handling for debug environment
 30635              		.loc 1 5406 7 is_stmt 0 view .LVU8172
 30636 022c 94F91720 		ldrsb	r2, [r4, #23]
 30637 0230 8242     		cmp	r2, r0
 30638 0232 C0F23382 		blt	.L2480
 30639              	.LBB4338:
5428:src/xeq.c     **** 				if (XromFlags.xIN) {
 30640              		.loc 1 5428 5 is_stmt 1 view .LVU8173
ARM GAS  /tmp/ccBFDvgN.s 			page 780


5429:src/xeq.c     **** 					// Restore state to before xIN
 30641              		.loc 1 5429 9 is_stmt 0 view .LVU8174
 30642 0236 3D4E     		ldr	r6, .L2503+52
5428:src/xeq.c     **** 				if (XromFlags.xIN) {
 30643              		.loc 1 5428 29 view .LVU8175
 30644 0238 3968     		ldr	r1, [r7]
5429:src/xeq.c     **** 					// Restore state to before xIN
 30645              		.loc 1 5429 8 view .LVU8176
 30646 023a 96F90120 		ldrsb	r2, [r6, #1]
5428:src/xeq.c     **** 				if (XromFlags.xIN) {
 30647              		.loc 1 5428 24 view .LVU8177
 30648 023e B1F8E037 		ldrh	r3, [r1, #2016]
 30649              	.LVL2360:
5429:src/xeq.c     **** 					// Restore state to before xIN
 30650              		.loc 1 5429 5 is_stmt 1 view .LVU8178
5429:src/xeq.c     **** 					// Restore state to before xIN
 30651              		.loc 1 5429 8 is_stmt 0 view .LVU8179
 30652 0242 002A     		cmp	r2, #0
 30653 0244 22DA     		bge	.L2302
5431:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30654              		.loc 1 5431 6 is_stmt 1 view .LVU8180
5431:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30655              		.loc 1 5431 20 is_stmt 0 view .LVU8181
 30656 0246 96F801C0 		ldrb	ip, [r6, #1]	@ zero_extendqisi2
5433:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30657              		.loc 1 5433 18 view .LVU8182
 30658 024a D1F8E857 		ldr	r5, [r1, #2024]
5436:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30659              		.loc 1 5436 13 view .LVU8183
 30660 024e D6F808E0 		ldr	lr, [r6, #8]
5431:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30661              		.loc 1 5431 20 view .LVU8184
 30662 0252 60F3C71C 		bfi	ip, r0, #7, #1
5433:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30663              		.loc 1 5433 18 view .LVU8185
 30664 0256 CCF3C000 		ubfx	r0, ip, #3, #1
 30665 025a 0CF00102 		and	r2, ip, #1
 30666 025e 42EA8032 		orr	r2, r2, r0, lsl #14
 30667 0262 CCF38000 		ubfx	r0, ip, #2, #1
 30668 0266 42EAC042 		orr	r2, r2, r0, lsl #19
 30669 026a 3148     		ldr	r0, .L2503+56
5431:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30670              		.loc 1 5431 20 view .LVU8186
 30671 026c 86F801C0 		strb	ip, [r6, #1]
5432:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
 30672              		.loc 1 5432 6 is_stmt 1 view .LVU8187
5433:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30673              		.loc 1 5433 6 view .LVU8188
5434:src/xeq.c     **** 					// Restore the global return stack
 30674              		.loc 1 5434 6 view .LVU8189
5433:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30675              		.loc 1 5433 18 is_stmt 0 view .LVU8190
 30676 0270 25F40425 		bic	r5, r5, #540672
 30677 0274 0240     		ands	r2, r2, r0
 30678 0276 25F00105 		bic	r5, r5, #1
5436:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30679              		.loc 1 5436 13 view .LVU8191
ARM GAS  /tmp/ccBFDvgN.s 			page 781


 30680 027a 2E48     		ldr	r0, .L2503+60
5437:src/xeq.c     **** 				}
 30681              		.loc 1 5437 16 view .LVU8192
 30682 027c B689     		ldrh	r6, [r6, #12]
5436:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30683              		.loc 1 5436 13 view .LVU8193
 30684 027e C0F800E0 		str	lr, [r0]
5433:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30685              		.loc 1 5433 18 view .LVU8194
 30686 0282 2A43     		orrs	r2, r2, r5
 30687 0284 C1F8E827 		str	r2, [r1, #2024]
5436:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30688              		.loc 1 5436 6 is_stmt 1 view .LVU8195
5437:src/xeq.c     **** 				}
 30689              		.loc 1 5437 6 view .LVU8196
5437:src/xeq.c     **** 				}
 30690              		.loc 1 5437 16 is_stmt 0 view .LVU8197
 30691 0288 A1F8E267 		strh	r6, [r1, #2018]	@ movhi
 30692              	.L2302:
5439:src/xeq.c     **** 					// Leave XROM
 30693              		.loc 1 5439 11 is_stmt 1 view .LVU8198
 30694 028c 9A0B     		lsrs	r2, r3, #14
 30695 028e 032A     		cmp	r2, #3
 30696 0290 1AD1     		bne	.L2303
5443:src/xeq.c     **** 					}
 30697              		.loc 1 5443 10 is_stmt 0 view .LVU8199
 30698 0292 284E     		ldr	r6, .L2503+60
5443:src/xeq.c     **** 					}
 30699              		.loc 1 5443 18 view .LVU8200
 30700 0294 6FF00045 		mvn	r5, #-2147483648
 30701 0298 04E0     		b	.L2306
 30702              	.L2304:
5446:src/xeq.c     **** 				}
 30703              		.loc 1 5446 7 is_stmt 1 view .LVU8201
 30704 029a 0133     		adds	r3, r3, #1
 30705              	.LVL2361:
5446:src/xeq.c     **** 				}
 30706              		.loc 1 5446 7 is_stmt 0 view .LVU8202
 30707 029c 9BB2     		uxth	r3, r3
 30708              	.LVL2362:
5439:src/xeq.c     **** 					// Leave XROM
 30709              		.loc 1 5439 11 is_stmt 1 view .LVU8203
 30710 029e 9A0B     		lsrs	r2, r3, #14
 30711 02a0 032A     		cmp	r2, #3
 30712 02a2 11D1     		bne	.L2303
 30713              	.L2306:
5441:src/xeq.c     **** 						retstk_up();
 30714              		.loc 1 5441 6 view .LVU8204
5441:src/xeq.c     **** 						retstk_up();
 30715              		.loc 1 5441 9 is_stmt 0 view .LVU8205
 30716 02a4 B1F9E227 		ldrsh	r2, [r1, #2018]
 30717 02a8 002A     		cmp	r2, #0
 30718 02aa F6D0     		beq	.L2304
5442:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
 30719              		.loc 1 5442 7 is_stmt 1 view .LVU8206
 30720 02ac FFF7FEFF 		bl	retstk_up
 30721              	.LVL2363:
ARM GAS  /tmp/ccBFDvgN.s 			page 782


5443:src/xeq.c     **** 					}
 30722              		.loc 1 5443 7 view .LVU8207
5443:src/xeq.c     **** 					}
 30723              		.loc 1 5443 19 is_stmt 0 view .LVU8208
 30724 02b0 3968     		ldr	r1, [r7]
5443:src/xeq.c     **** 					}
 30725              		.loc 1 5443 10 view .LVU8209
 30726 02b2 3368     		ldr	r3, [r6]
5443:src/xeq.c     **** 					}
 30727              		.loc 1 5443 19 view .LVU8210
 30728 02b4 B1F9E227 		ldrsh	r2, [r1, #2018]
5443:src/xeq.c     **** 					}
 30729              		.loc 1 5443 18 view .LVU8211
 30730 02b8 5019     		adds	r0, r2, r5
5443:src/xeq.c     **** 					}
 30731              		.loc 1 5443 10 view .LVU8212
 30732 02ba 33F81030 		ldrh	r3, [r3, r0, lsl #1]
 30733              	.LVL2364:
5445:src/xeq.c     **** 						++pc; // compensate for decpc below
 30734              		.loc 1 5445 6 is_stmt 1 view .LVU8213
5445:src/xeq.c     **** 						++pc; // compensate for decpc below
 30735              		.loc 1 5445 9 is_stmt 0 view .LVU8214
 30736 02be 002A     		cmp	r2, #0
 30737 02c0 EBD0     		beq	.L2304
5439:src/xeq.c     **** 					// Leave XROM
 30738              		.loc 1 5439 11 is_stmt 1 view .LVU8215
 30739 02c2 9A0B     		lsrs	r2, r3, #14
 30740 02c4 032A     		cmp	r2, #3
 30741 02c6 EDD0     		beq	.L2306
 30742              	.L2303:
5448:src/xeq.c     **** #ifndef REALBUILD
 30743              		.loc 1 5448 5 view .LVU8216
 30744              	.LVL2365:
 30745              	.LBB4339:
 30746              	.LBI4339:
 282:src/xeq.c     **** 	State.pc = pc;
 30747              		.loc 1 282 13 view .LVU8217
 30748              	.LBB4340:
 283:src/xeq.c     **** 	update_program_bounds(0);
 30749              		.loc 1 283 2 view .LVU8218
 283:src/xeq.c     **** 	update_program_bounds(0);
 30750              		.loc 1 283 11 is_stmt 0 view .LVU8219
 30751 02c8 A1F8E037 		strh	r3, [r1, #2016]	@ movhi
 284:src/xeq.c     **** }
 30752              		.loc 1 284 2 is_stmt 1 view .LVU8220
 30753 02cc 0020     		movs	r0, #0
 30754 02ce FFF7FEFF 		bl	update_program_bounds
 30755              	.LVL2366:
 30756              	.L2297:
 284:src/xeq.c     **** }
 30757              		.loc 1 284 2 is_stmt 0 view .LVU8221
 30758              	.LBE4340:
 30759              	.LBE4339:
 30760              	.LBE4338:
5452:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
 30761              		.loc 1 5452 4 is_stmt 1 view .LVU8222
 30762 02d2 FFF7FEFF 		bl	decpc
ARM GAS  /tmp/ccBFDvgN.s 			page 783


 30763              	.LVL2367:
5453:src/xeq.c     **** 
 30764              		.loc 1 5453 4 view .LVU8223
 30765 02d6 FFF7FEFF 		bl	xeq_init_contexts
 30766              	.LVL2368:
5455:src/xeq.c     **** 		}
 30767              		.loc 1 5455 4 view .LVU8224
 30768              	.LBB4341:
 30769              	.LBI4341:
5816:src/xeq.c     **** 	set_running_off_sst();
 30770              		.loc 1 5816 6 view .LVU8225
 30771              	.LBB4342:
5817:src/xeq.c     **** 	State.entryp = 0;
 30772              		.loc 1 5817 2 view .LVU8226
 30773              	.LBB4343:
 30774              	.LBI4343:
5808:src/xeq.c     **** 	Running = 0;
 30775              		.loc 1 5808 6 view .LVU8227
 30776              	.LBB4344:
5809:src/xeq.c     **** }
 30777              		.loc 1 5809 2 view .LVU8228
 30778              	.LBE4344:
 30779              	.LBE4343:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 30780              		.loc 1 5818 15 is_stmt 0 view .LVU8229
 30781 02da 3B68     		ldr	r3, [r7]
 30782              	.LBB4346:
 30783              	.LBB4345:
5809:src/xeq.c     **** }
 30784              		.loc 1 5809 10 view .LVU8230
 30785 02dc 0021     		movs	r1, #0
 30786 02de CAF80010 		str	r1, [r10]
 30787              	.LBE4345:
 30788              	.LBE4346:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 30789              		.loc 1 5818 2 is_stmt 1 view .LVU8231
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 30790              		.loc 1 5818 15 is_stmt 0 view .LVU8232
 30791 02e2 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 30792 02e6 61F30412 		bfi	r2, r1, #4, #1
 30793 02ea 83F8DD27 		strb	r2, [r3, #2013]
5819:src/xeq.c     **** }
 30794              		.loc 1 5819 2 is_stmt 1 view .LVU8233
 30795 02ee 8A20     		movs	r0, #138
 30796 02f0 FFF7FEFF 		bl	dot
 30797              	.LVL2369:
5820:src/xeq.c     **** 
 30798              		.loc 1 5820 1 is_stmt 0 view .LVU8234
 30799 02f4 47E7     		b	.L2293
 30800              	.L2504:
 30801 02f6 00BF     		.align	2
 30802              	.L2503:
 30803 02f8 00000000 		.word	main_ram
 30804 02fc 00000000 		.word	StateWhileOn
 30805 0300 00000000 		.word	Busy
 30806 0304 00000000 		.word	XeqOpCode
 30807 0308 00000000 		.word	.LC8
ARM GAS  /tmp/ccBFDvgN.s 			page 784


 30808 030c 00000000 		.word	TraceBuffer
 30809 0310 00000000 		.word	DispMsg
 30810 0314 00000000 		.word	argcmds
 30811 0318 00000000 		.word	Error
 30812 031c 00000000 		.word	multicmds
 30813 0320 00000000 		.word	xrom
 30814 0324 00000000 		.word	xrom_size
 30815 0328 00000000 		.word	XromRunning
 30816 032c 00000000 		.word	XromParams
 30817 0330 01400800 		.word	540673
 30818 0334 00000000 		.word	RetStk
 30819 0338 00000000 		.word	StackBase
 30820 033c 00000000 		.word	Running
 30821              	.LVL2370:
 30822              	.L2474:
5820:src/xeq.c     **** 
 30823              		.loc 1 5820 1 view .LVU8235
 30824 0340 0892     		str	r2, [sp, #32]
 30825              	.LBE4342:
 30826              	.LBE4341:
 30827              	.LBB4347:
 30828              	.LBB4143:
 30829              	.LBB4119:
 30830              	.LBB4111:
 30831 0342 FFF7FEFF 		bl	process_cmdline.part.0
 30832              	.LVL2371:
 30833 0346 AB4B     		ldr	r3, .L2505
 30834 0348 089A     		ldr	r2, [sp, #32]
 30835 034a C7E6     		b	.L2174
 30836              	.LVL2372:
 30837              	.L2204:
5820:src/xeq.c     **** 
 30838              		.loc 1 5820 1 view .LVU8236
 30839              	.LBE4111:
 30840              	.LBE4119:
 30841              	.LBE4143:
 30842              	.LBE4347:
5373:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
 30843              		.loc 1 5373 18 is_stmt 1 view .LVU8237
 30844              	.LBB4348:
 30845              	.LBI4348:
4627:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
 30846              		.loc 1 4627 13 view .LVU8238
 30847              	.LBB4349:
4628:src/xeq.c     **** 
 30848              		.loc 1 4628 2 view .LVU8239
 30849              	.LBB4350:
 30850              	.LBB4351:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30851              		.loc 1 1229 5 is_stmt 0 view .LVU8240
 30852 034c 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30853              	.LBE4351:
 30854              	.LBE4350:
4628:src/xeq.c     **** 
 30855              		.loc 1 4628 21 view .LVU8241
 30856 034e EDB2     		uxtb	r5, r5
 30857              	.LVL2373:
ARM GAS  /tmp/ccBFDvgN.s 			page 785


4630:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
 30858              		.loc 1 4630 2 is_stmt 1 view .LVU8242
 30859              	.LBB4354:
 30860              	.LBI4350:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30861              		.loc 1 1226 6 view .LVU8243
 30862              	.LBB4352:
1227:src/xeq.c     **** 
 30863              		.loc 1 1227 2 view .LVU8244
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30864              		.loc 1 1229 2 view .LVU8245
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30865              		.loc 1 1229 5 is_stmt 0 view .LVU8246
 30866 0350 002B     		cmp	r3, #0
 30867 0352 40F08582 		bne	.L2481
 30868              	.L2245:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30869              		.loc 1 1229 5 view .LVU8247
 30870              	.LBE4352:
 30871              	.LBE4354:
4631:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 30872              		.loc 1 4631 2 is_stmt 1 view .LVU8248
4631:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 30873              		.loc 1 4631 5 is_stmt 0 view .LVU8249
 30874 0356 CF2D     		cmp	r5, #207
 30875 0358 00F22982 		bhi	.L2246
4632:src/xeq.c     **** 			bad_mode_error();
 30876              		.loc 1 4632 3 is_stmt 1 view .LVU8250
4632:src/xeq.c     **** 			bad_mode_error();
 30877              		.loc 1 4632 7 is_stmt 0 view .LVU8251
 30878 035c 3A68     		ldr	r2, [r7]
4632:src/xeq.c     **** 			bad_mode_error();
 30879              		.loc 1 4632 23 view .LVU8252
 30880 035e A649     		ldr	r1, .L2505+4
4632:src/xeq.c     **** 			bad_mode_error();
 30881              		.loc 1 4632 7 view .LVU8253
 30882 0360 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
4632:src/xeq.c     **** 			bad_mode_error();
 30883              		.loc 1 4632 6 view .LVU8254
 30884 0364 D807     		lsls	r0, r3, #31
 30885 0366 00F11C84 		bmi	.L2435
 30886 036a 4FEA051A 		lsl	r10, r5, #4
 30887              	.L2247:
4634:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 30888              		.loc 1 4634 8 is_stmt 1 view .LVU8255
4634:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 30889              		.loc 1 4634 14 is_stmt 0 view .LVU8256
 30890 036e 51F80A30 		ldr	r3, [r1, r10]
 30891 0372 8A44     		add	r10, r10, r1
4634:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 30892              		.loc 1 4634 11 view .LVU8257
 30893 0374 002B     		cmp	r3, #0
 30894 0376 00F02D84 		beq	.L2482
 30895              	.LBB4355:
4635:src/xeq.c     **** 			if (dispatch_xrom(fp))
 30896              		.loc 1 4635 4 is_stmt 1 view .LVU8258
 30897              	.LVL2374:
ARM GAS  /tmp/ccBFDvgN.s 			page 786


4636:src/xeq.c     **** 				return;
 30898              		.loc 1 4636 4 view .LVU8259
4636:src/xeq.c     **** 				return;
 30899              		.loc 1 4636 8 is_stmt 0 view .LVU8260
 30900 037a 1846     		mov	r0, r3
 30901 037c 0593     		str	r3, [sp, #20]
 30902 037e FFF7FEFF 		bl	dispatch_xrom
 30903              	.LVL2375:
4636:src/xeq.c     **** 				return;
 30904              		.loc 1 4636 7 view .LVU8261
 30905 0382 059B     		ldr	r3, [sp, #20]
 30906 0384 0028     		cmp	r0, #0
 30907 0386 40F08181 		bne	.L2168
4639:src/xeq.c     **** 				case 2:	lift_if_enabled();
 30908              		.loc 1 4639 5 is_stmt 1 view .LVU8262
 30909 038a 9AF80420 		ldrb	r2, [r10, #4]	@ zero_extendqisi2
 30910 038e 02F00302 		and	r2, r2, #3
 30911 0392 012A     		cmp	r2, #1
 30912 0394 00F04884 		beq	.L2250
 30913 0398 022A     		cmp	r2, #2
 30914 039a 03D1     		bne	.L2251
4640:src/xeq.c     **** 				case 1:	lift_if_enabled();
 30915              		.loc 1 4640 13 view .LVU8263
 30916              	.LBB4356:
 30917              	.LBI4356:
 747:src/xeq.c     **** 	if (get_lift())
 30918              		.loc 1 747 6 view .LVU8264
 30919              	.LBB4357:
 748:src/xeq.c     **** 		lift();
 30920              		.loc 1 748 2 view .LVU8265
 30921              	.LBB4358:
 30922              	.LBI4358:
 743:src/xeq.c     **** 	return State2.state_lift;
 30923              		.loc 1 743 12 view .LVU8266
 30924              	.LBB4359:
 744:src/xeq.c     **** }
 30925              		.loc 1 744 2 view .LVU8267
 744:src/xeq.c     **** }
 30926              		.loc 1 744 15 is_stmt 0 view .LVU8268
 30927 039c E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30928              	.LBE4359:
 30929              	.LBE4358:
 748:src/xeq.c     **** 		lift();
 30930              		.loc 1 748 5 view .LVU8269
 30931 039e 5206     		lsls	r2, r2, #25
 30932 03a0 00F13E84 		bmi	.L2483
 30933              	.LVL2376:
 30934              	.L2251:
 748:src/xeq.c     **** 		lift();
 30935              		.loc 1 748 5 view .LVU8270
 30936              	.LBE4357:
 30937              	.LBE4356:
4643:src/xeq.c     **** 					break;
 30938              		.loc 1 4643 6 is_stmt 1 view .LVU8271
 30939 03a4 2846     		mov	r0, r5
 30940 03a6 9847     		blx	r3
 30941              	.LVL2377:
ARM GAS  /tmp/ccBFDvgN.s 			page 787


4644:src/xeq.c     **** 				}
 30942              		.loc 1 4644 6 view .LVU8272
 30943 03a8 944B     		ldr	r3, .L2505+8
 30944 03aa 3A68     		ldr	r2, [r7]
 30945              	.LVL2378:
 30946              	.L2248:
4644:src/xeq.c     **** 				}
 30947              		.loc 1 4644 6 is_stmt 0 view .LVU8273
 30948              	.LBE4355:
4649:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 30949              		.loc 1 4649 3 is_stmt 1 view .LVU8274
4651:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 30950              		.loc 1 4651 2 view .LVU8275
4651:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 30951              		.loc 1 4651 6 is_stmt 0 view .LVU8276
 30952 03ac 92F8AD17 		ldrb	r1, [r2, #1965]	@ zero_extendqisi2
4651:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 30953              		.loc 1 4651 5 view .LVU8277
 30954 03b0 8907     		lsls	r1, r1, #30
 30955 03b2 40F10884 		bpl	.L2255
4651:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 30956              		.loc 1 4651 24 view .LVU8278
 30957 03b6 3F2D     		cmp	r5, #63
 30958 03b8 00F06981 		beq	.L2446
 30959 03bc 08E2     		b	.L2447
 30960              	.LVL2379:
 30961              	.L2203:
4651:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 30962              		.loc 1 4651 24 view .LVU8279
 30963              	.LBE4349:
 30964              	.LBE4348:
5374:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
 30965              		.loc 1 5374 18 is_stmt 1 view .LVU8280
 30966              	.LBB4385:
 30967              	.LBI4385:
4668:src/xeq.c     **** {
 30968              		.loc 1 4668 13 view .LVU8281
 30969              	.LBB4386:
4670:src/xeq.c     **** 	process_cmdline_set_lift();
 30970              		.loc 1 4670 2 view .LVU8282
4671:src/xeq.c     **** 
 30971              		.loc 1 4671 2 view .LVU8283
 30972              	.LBB4387:
 30973              	.LBI4387:
1332:src/xeq.c     **** 	process_cmdline();
 30974              		.loc 1 1332 6 view .LVU8284
 30975              	.LBE4387:
 30976              	.LBE4386:
 30977              	.LBE4385:
1333:src/xeq.c     **** 	set_lift();
 30978              		.loc 1 1333 2 view .LVU8285
 30979              	.LBB4426:
 30980              	.LBB4421:
 30981              	.LBB4398:
 30982              	.LBB4388:
 30983              	.LBI4388:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
ARM GAS  /tmp/ccBFDvgN.s 			page 788


 30984              		.loc 1 1226 6 view .LVU8286
 30985              	.LBB4389:
1227:src/xeq.c     **** 
 30986              		.loc 1 1227 2 view .LVU8287
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30987              		.loc 1 1229 2 view .LVU8288
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30988              		.loc 1 1229 5 is_stmt 0 view .LVU8289
 30989 03be 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30990 03c0 002B     		cmp	r3, #0
 30991 03c2 40F04A82 		bne	.L2484
 30992              	.L2259:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30993              		.loc 1 1229 5 view .LVU8290
 30994              	.LBE4389:
 30995              	.LBE4388:
 30996              	.LBE4398:
 30997              	.LBE4421:
 30998              	.LBE4426:
1334:src/xeq.c     **** }
 30999              		.loc 1 1334 2 is_stmt 1 view .LVU8291
 31000              	.LBB4427:
 31001              	.LBB4422:
 31002              	.LBB4399:
 31003              	.LBB4391:
 31004              	.LBI4391:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31005              		.loc 1 767 6 view .LVU8292
 31006              	.LBB4392:
 768:src/xeq.c     **** }
 31007              		.loc 1 768 5 view .LVU8293
 768:src/xeq.c     **** }
 31008              		.loc 1 768 23 is_stmt 0 view .LVU8294
 31009 03c6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31010              	.LBE4392:
 31011              	.LBE4391:
 31012              	.LBE4399:
4673:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 31013              		.loc 1 4673 4 view .LVU8295
 31014 03c8 EDB2     		uxtb	r5, r5
 31015              	.LVL2380:
 31016              	.LBB4400:
 31017              	.LBB4395:
 31018              	.LBB4393:
 768:src/xeq.c     **** }
 31019              		.loc 1 768 23 view .LVU8296
 31020 03ca 43F04003 		orr	r3, r3, #64
 31021              	.LBE4393:
 31022              	.LBE4395:
 31023              	.LBE4400:
4674:src/xeq.c     **** 		if (is_intmode()) {
 31024              		.loc 1 4674 5 view .LVU8297
 31025 03ce 9B2D     		cmp	r5, #155
 31026              	.LBB4401:
 31027              	.LBB4396:
 31028              	.LBB4394:
 768:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 789


 31029              		.loc 1 768 23 view .LVU8298
 31030 03d0 E375     		strb	r3, [r4, #23]
 31031              	.LBE4394:
 31032              	.LBE4396:
 31033              	.LBE4401:
4673:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 31034              		.loc 1 4673 2 is_stmt 1 view .LVU8299
 31035              	.LVL2381:
4674:src/xeq.c     **** 		if (is_intmode()) {
 31036              		.loc 1 4674 2 view .LVU8300
4674:src/xeq.c     **** 		if (is_intmode()) {
 31037              		.loc 1 4674 5 is_stmt 0 view .LVU8301
 31038 03d2 3FF6F1AE 		bhi	.L2197
4675:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 31039              		.loc 1 4675 3 is_stmt 1 view .LVU8302
4675:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 31040              		.loc 1 4675 7 is_stmt 0 view .LVU8303
 31041 03d6 3B68     		ldr	r3, [r7]
 31042 03d8 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4675:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 31043              		.loc 1 4675 6 view .LVU8304
 31044 03dc DA07     		lsls	r2, r3, #31
 31045 03de 40F19B83 		bpl	.L2261
4676:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31046              		.loc 1 4676 4 is_stmt 1 view .LVU8305
4676:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31047              		.loc 1 4676 10 is_stmt 0 view .LVU8306
 31048 03e2 874B     		ldr	r3, .L2505+12
 31049 03e4 05EB4505 		add	r5, r5, r5, lsl #1
 31050              	.LVL2382:
4676:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31051              		.loc 1 4676 10 view .LVU8307
 31052 03e8 03EBC505 		add	r5, r3, r5, lsl #3
 31053 03ec AD68     		ldr	r5, [r5, #8]
4676:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31054              		.loc 1 4676 7 view .LVU8308
 31055 03ee 002D     		cmp	r5, #0
 31056 03f0 00F04783 		beq	.L2280
 31057              	.LBB4402:
4677:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31058              		.loc 1 4677 5 is_stmt 1 view .LVU8309
 31059              	.LVL2383:
4678:src/xeq.c     **** 					return;
 31060              		.loc 1 4678 5 view .LVU8310
4678:src/xeq.c     **** 					return;
 31061              		.loc 1 4678 9 is_stmt 0 view .LVU8311
 31062 03f4 2846     		mov	r0, r5
 31063 03f6 FFF7FEFF 		bl	dispatch_xrom
 31064              	.LVL2384:
4678:src/xeq.c     **** 					return;
 31065              		.loc 1 4678 8 view .LVU8312
 31066 03fa 0028     		cmp	r0, #0
 31067 03fc 40F04681 		bne	.L2168
 31068              	.LBB4403:
4681:src/xeq.c     **** 					x = fp(x);
 31069              		.loc 1 4681 6 is_stmt 1 view .LVU8313
 31070              	.LBB4404:
ARM GAS  /tmp/ccBFDvgN.s 			page 790


 31071              	.LBI4404:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31072              		.loc 1 1442 15 view .LVU8314
 31073              	.LBB4405:
1443:src/xeq.c     **** }
 31074              		.loc 1 1443 2 view .LVU8315
1443:src/xeq.c     **** }
 31075              		.loc 1 1443 9 is_stmt 0 view .LVU8316
 31076 0400 6420     		movs	r0, #100
 31077 0402 FFF7FEFF 		bl	get_reg_n_int
 31078              	.LVL2385:
1443:src/xeq.c     **** }
 31079              		.loc 1 1443 9 view .LVU8317
 31080              	.LBE4405:
 31081              	.LBE4404:
4682:src/xeq.c     **** 					setlastX();
 31082              		.loc 1 4682 6 is_stmt 1 view .LVU8318
4682:src/xeq.c     **** 					setlastX();
 31083              		.loc 1 4682 10 is_stmt 0 view .LVU8319
 31084 0406 A847     		blx	r5
 31085              	.LVL2386:
4682:src/xeq.c     **** 					setlastX();
 31086              		.loc 1 4682 10 view .LVU8320
 31087 0408 7C4B     		ldr	r3, .L2505+8
 31088 040a 0593     		str	r3, [sp, #20]
 31089 040c 0546     		mov	r5, r0
 31090              	.LVL2387:
4682:src/xeq.c     **** 					setlastX();
 31091              		.loc 1 4682 10 view .LVU8321
 31092 040e 8A46     		mov	r10, r1
 31093              	.LVL2388:
4683:src/xeq.c     **** 					setX_int(x);
 31094              		.loc 1 4683 6 is_stmt 1 view .LVU8322
 31095              	.LBB4406:
 31096              	.LBI4406:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31097              		.loc 1 792 6 view .LVU8323
 31098              	.LBB4407:
 793:src/xeq.c     **** }
 31099              		.loc 1 793 2 view .LVU8324
 31100 0410 6C20     		movs	r0, #108
 31101              	.LVL2389:
 793:src/xeq.c     **** }
 31102              		.loc 1 793 2 is_stmt 0 view .LVU8325
 31103 0412 6421     		movs	r1, #100
 31104              	.LVL2390:
 793:src/xeq.c     **** }
 31105              		.loc 1 793 2 view .LVU8326
 31106 0414 FFF7FEFF 		bl	copyreg_n
 31107              	.LVL2391:
 31108              	.LBE4407:
 31109              	.LBE4406:
4684:src/xeq.c     **** 				}
 31110              		.loc 1 4684 6 is_stmt 1 view .LVU8327
 31111 0418 C2E1     		b	.L2452
 31112              	.LVL2392:
 31113              	.L2205:
ARM GAS  /tmp/ccBFDvgN.s 			page 791


4684:src/xeq.c     **** 				}
 31114              		.loc 1 4684 6 is_stmt 0 view .LVU8328
 31115              	.LBE4403:
 31116              	.LBE4402:
 31117              	.LBE4422:
 31118              	.LBE4427:
5372:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
 31119              		.loc 1 5372 19 is_stmt 1 view .LVU8329
 31120              	.LBB4428:
 31121              	.LBI4186:
3920:src/xeq.c     **** 	int opm = argKIND(op);
 31122              		.loc 1 3920 13 view .LVU8330
 31123              	.LBB4252:
3921:src/xeq.c     **** 
 31124              		.loc 1 3921 2 view .LVU8331
3921:src/xeq.c     **** 
 31125              		.loc 1 3921 6 is_stmt 0 view .LVU8332
 31126 041a 5FFA85FA 		uxtb	r10, r5
 31127              	.LVL2393:
3923:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31128              		.loc 1 3923 2 is_stmt 1 view .LVU8333
 31129 041e BAF12A0F 		cmp	r10, #42
 31130 0422 3FF6C9AE 		bhi	.L2197
 31131 0426 DFE81AF0 		tbh	[pc, r10, lsl #1]
 31132              	.L2208:
 31133 042a DB02     		.2byte	(.L2219-.L2208)/2
 31134 042c 1E03     		.2byte	(.L2218-.L2208)/2
 31135 042e F902     		.2byte	(.L2217-.L2208)/2
 31136 0430 C802     		.2byte	(.L2216-.L2208)/2
 31137 0432 9702     		.2byte	(.L2215-.L2208)/2
 31138 0434 0F02     		.2byte	(.L2214-.L2208)/2
 31139 0436 0F02     		.2byte	(.L2214-.L2208)/2
 31140 0438 0F02     		.2byte	(.L2214-.L2208)/2
 31141 043a 0F02     		.2byte	(.L2214-.L2208)/2
 31142 043c 0F02     		.2byte	(.L2214-.L2208)/2
 31143 043e 0F02     		.2byte	(.L2214-.L2208)/2
 31144 0440 0F02     		.2byte	(.L2214-.L2208)/2
 31145 0442 0F02     		.2byte	(.L2214-.L2208)/2
 31146 0444 0F02     		.2byte	(.L2214-.L2208)/2
 31147 0446 0F02     		.2byte	(.L2214-.L2208)/2
 31148 0448 0F02     		.2byte	(.L2214-.L2208)/2
 31149 044a 0F02     		.2byte	(.L2214-.L2208)/2
 31150 044c 0F02     		.2byte	(.L2214-.L2208)/2
 31151 044e 0F02     		.2byte	(.L2214-.L2208)/2
 31152 0450 0F02     		.2byte	(.L2214-.L2208)/2
 31153 0452 0F02     		.2byte	(.L2214-.L2208)/2
 31154 0454 3F02     		.2byte	(.L2213-.L2208)/2
 31155 0456 3F02     		.2byte	(.L2213-.L2208)/2
 31156 0458 3302     		.2byte	(.L2212-.L2208)/2
 31157 045a 3302     		.2byte	(.L2212-.L2208)/2
 31158 045c 3302     		.2byte	(.L2212-.L2208)/2
 31159 045e 3302     		.2byte	(.L2212-.L2208)/2
 31160 0460 3302     		.2byte	(.L2212-.L2208)/2
 31161 0462 3302     		.2byte	(.L2212-.L2208)/2
 31162 0464 3302     		.2byte	(.L2212-.L2208)/2
 31163 0466 2702     		.2byte	(.L2211-.L2208)/2
 31164 0468 2702     		.2byte	(.L2211-.L2208)/2
ARM GAS  /tmp/ccBFDvgN.s 			page 792


 31165 046a 2702     		.2byte	(.L2211-.L2208)/2
 31166 046c 2702     		.2byte	(.L2211-.L2208)/2
 31167 046e 2702     		.2byte	(.L2211-.L2208)/2
 31168 0470 2702     		.2byte	(.L2211-.L2208)/2
 31169 0472 2702     		.2byte	(.L2211-.L2208)/2
 31170 0474 8B02     		.2byte	(.L2210-.L2208)/2
 31171 0476 8B02     		.2byte	(.L2210-.L2208)/2
 31172 0478 7F02     		.2byte	(.L2209-.L2208)/2
 31173 047a 7F02     		.2byte	(.L2209-.L2208)/2
 31174 047c 7302     		.2byte	(.L2207-.L2208)/2
 31175 047e 7302     		.2byte	(.L2207-.L2208)/2
 31176              	.LVL2394:
 31177              		.p2align 1
 31178              	.L2201:
3923:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31179              		.loc 1 3923 2 is_stmt 0 view .LVU8334
 31180              	.LBE4252:
 31181              	.LBE4428:
5376:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
 31182              		.loc 1 5376 18 is_stmt 1 view .LVU8335
 31183              	.LBB4429:
 31184              	.LBI4429:
4817:src/xeq.c     **** 	unsigned int f;
 31185              		.loc 1 4817 13 view .LVU8336
 31186              	.LBB4430:
4818:src/xeq.c     **** 	process_cmdline_set_lift();
 31187              		.loc 1 4818 2 view .LVU8337
4819:src/xeq.c     **** 
 31188              		.loc 1 4819 2 view .LVU8338
 31189              	.LBB4431:
 31190              	.LBI4431:
1332:src/xeq.c     **** 	process_cmdline();
 31191              		.loc 1 1332 6 view .LVU8339
 31192              	.LBE4431:
 31193              	.LBE4430:
 31194              	.LBE4429:
1333:src/xeq.c     **** 	set_lift();
 31195              		.loc 1 1333 2 view .LVU8340
 31196              	.LBB4477:
 31197              	.LBB4469:
 31198              	.LBB4442:
 31199              	.LBB4432:
 31200              	.LBI4432:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 31201              		.loc 1 1226 6 view .LVU8341
 31202              	.LBB4433:
1227:src/xeq.c     **** 
 31203              		.loc 1 1227 2 view .LVU8342
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31204              		.loc 1 1229 2 view .LVU8343
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31205              		.loc 1 1229 5 is_stmt 0 view .LVU8344
 31206 0480 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31207 0482 002B     		cmp	r3, #0
 31208 0484 40F0F581 		bne	.L2485
 31209              	.L2275:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
ARM GAS  /tmp/ccBFDvgN.s 			page 793


 31210              		.loc 1 1229 5 view .LVU8345
 31211              	.LBE4433:
 31212              	.LBE4432:
 31213              	.LBE4442:
 31214              	.LBE4469:
 31215              	.LBE4477:
1334:src/xeq.c     **** }
 31216              		.loc 1 1334 2 is_stmt 1 view .LVU8346
 31217              	.LBB4478:
 31218              	.LBB4470:
 31219              	.LBB4443:
 31220              	.LBB4435:
 31221              	.LBI4435:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31222              		.loc 1 767 6 view .LVU8347
 31223              	.LBB4436:
 768:src/xeq.c     **** }
 31224              		.loc 1 768 5 view .LVU8348
 768:src/xeq.c     **** }
 31225              		.loc 1 768 23 is_stmt 0 view .LVU8349
 31226 0488 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31227              	.LBE4436:
 31228              	.LBE4435:
 31229              	.LBE4443:
4821:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31230              		.loc 1 4821 4 view .LVU8350
 31231 048a EDB2     		uxtb	r5, r5
 31232              	.LVL2395:
 31233              	.LBB4444:
 31234              	.LBB4439:
 31235              	.LBB4437:
 768:src/xeq.c     **** }
 31236              		.loc 1 768 23 view .LVU8351
 31237 048c 43F04003 		orr	r3, r3, #64
 31238              	.LBE4437:
 31239              	.LBE4439:
 31240              	.LBE4444:
4822:src/xeq.c     **** 		if (is_intmode()) {
 31241              		.loc 1 4822 5 view .LVU8352
 31242 0490 0B2D     		cmp	r5, #11
 31243              	.LBB4445:
 31244              	.LBB4440:
 31245              	.LBB4438:
 768:src/xeq.c     **** }
 31246              		.loc 1 768 23 view .LVU8353
 31247 0492 E375     		strb	r3, [r4, #23]
 31248              	.LBE4438:
 31249              	.LBE4440:
 31250              	.LBE4445:
4821:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31251              		.loc 1 4821 2 is_stmt 1 view .LVU8354
 31252              	.LVL2396:
4822:src/xeq.c     **** 		if (is_intmode()) {
 31253              		.loc 1 4822 2 view .LVU8355
4822:src/xeq.c     **** 		if (is_intmode()) {
 31254              		.loc 1 4822 5 is_stmt 0 view .LVU8356
 31255 0494 3FF690AE 		bhi	.L2197
ARM GAS  /tmp/ccBFDvgN.s 			page 794


4823:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31256              		.loc 1 4823 3 is_stmt 1 view .LVU8357
4823:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31257              		.loc 1 4823 7 is_stmt 0 view .LVU8358
 31258 0498 3B68     		ldr	r3, [r7]
 31259 049a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4823:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31260              		.loc 1 4823 6 view .LVU8359
 31261 049e D807     		lsls	r0, r3, #31
 31262 04a0 40F10C83 		bpl	.L2277
4824:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31263              		.loc 1 4824 4 is_stmt 1 view .LVU8360
4824:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31264              		.loc 1 4824 10 is_stmt 0 view .LVU8361
 31265 04a4 574B     		ldr	r3, .L2505+16
 31266 04a6 05EB8505 		add	r5, r5, r5, lsl #2
 31267              	.LVL2397:
4824:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31268              		.loc 1 4824 10 view .LVU8362
 31269 04aa 03EB8505 		add	r5, r3, r5, lsl #2
 31270 04ae 6D68     		ldr	r5, [r5, #4]
4824:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31271              		.loc 1 4824 7 view .LVU8363
 31272 04b0 002D     		cmp	r5, #0
 31273 04b2 00F0E682 		beq	.L2280
 31274              	.LBB4446:
4825:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31275              		.loc 1 4825 5 is_stmt 1 view .LVU8364
 31276              	.LVL2398:
4826:src/xeq.c     **** 					return;
 31277              		.loc 1 4826 5 view .LVU8365
4826:src/xeq.c     **** 					return;
 31278              		.loc 1 4826 9 is_stmt 0 view .LVU8366
 31279 04b6 2846     		mov	r0, r5
 31280 04b8 FFF7FEFF 		bl	dispatch_xrom
 31281              	.LVL2399:
4826:src/xeq.c     **** 					return;
 31282              		.loc 1 4826 8 view .LVU8367
 31283 04bc 0028     		cmp	r0, #0
 31284 04be 40F0E580 		bne	.L2168
 31285              	.LBB4447:
4829:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 31286              		.loc 1 4829 6 is_stmt 1 view .LVU8368
 31287              	.LBB4448:
 31288              	.LBI4448:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31289              		.loc 1 1442 15 view .LVU8369
 31290              	.LBB4449:
1443:src/xeq.c     **** }
 31291              		.loc 1 1443 2 view .LVU8370
1443:src/xeq.c     **** }
 31292              		.loc 1 1443 9 is_stmt 0 view .LVU8371
 31293 04c2 6420     		movs	r0, #100
 31294 04c4 FFF7FEFF 		bl	get_reg_n_int
 31295              	.LVL2400:
 31296 04c8 8246     		mov	r10, r0
 31297              	.LVL2401:
ARM GAS  /tmp/ccBFDvgN.s 			page 795


1443:src/xeq.c     **** }
 31298              		.loc 1 1443 9 view .LVU8372
 31299              	.LBE4449:
 31300              	.LBE4448:
4830:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31301              		.loc 1 4830 6 is_stmt 1 view .LVU8373
4830:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31302              		.loc 1 4830 24 is_stmt 0 view .LVU8374
 31303 04ca 6520     		movs	r0, #101
 31304              	.LVL2402:
 31305              	.LBB4451:
 31306              	.LBB4450:
1443:src/xeq.c     **** }
 31307              		.loc 1 1443 9 view .LVU8375
 31308 04cc 0591     		str	r1, [sp, #20]
 31309              	.LVL2403:
1443:src/xeq.c     **** }
 31310              		.loc 1 1443 9 view .LVU8376
 31311              	.LBE4450:
 31312              	.LBE4451:
4830:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31313              		.loc 1 4830 24 view .LVU8377
 31314 04ce FFF7FEFF 		bl	get_reg_n_int
 31315              	.LVL2404:
 31316 04d2 0690     		str	r0, [sp, #24]
4831:src/xeq.c     **** 					x = fp(z, y, x);
 31317              		.loc 1 4831 24 view .LVU8378
 31318 04d4 6620     		movs	r0, #102
4830:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31319              		.loc 1 4830 24 view .LVU8379
 31320 04d6 0891     		str	r1, [sp, #32]
 31321              	.LVL2405:
4831:src/xeq.c     **** 					x = fp(z, y, x);
 31322              		.loc 1 4831 6 is_stmt 1 view .LVU8380
4831:src/xeq.c     **** 					x = fp(z, y, x);
 31323              		.loc 1 4831 24 is_stmt 0 view .LVU8381
 31324 04d8 FFF7FEFF 		bl	get_reg_n_int
 31325              	.LVL2406:
4832:src/xeq.c     **** 					setlastX();
 31326              		.loc 1 4832 6 is_stmt 1 view .LVU8382
4832:src/xeq.c     **** 					setlastX();
 31327              		.loc 1 4832 10 is_stmt 0 view .LVU8383
 31328 04dc 059B     		ldr	r3, [sp, #20]
 31329 04de 069A     		ldr	r2, [sp, #24]
 31330 04e0 CDF800A0 		str	r10, [sp]
 31331 04e4 0193     		str	r3, [sp, #4]
 31332 04e6 089B     		ldr	r3, [sp, #32]
 31333 04e8 A847     		blx	r5
 31334              	.LVL2407:
4832:src/xeq.c     **** 					setlastX();
 31335              		.loc 1 4832 10 view .LVU8384
 31336 04ea 444B     		ldr	r3, .L2505+8
 31337 04ec 0593     		str	r3, [sp, #20]
 31338 04ee 0546     		mov	r5, r0
 31339              	.LVL2408:
4832:src/xeq.c     **** 					setlastX();
 31340              		.loc 1 4832 10 view .LVU8385
ARM GAS  /tmp/ccBFDvgN.s 			page 796


 31341 04f0 8A46     		mov	r10, r1
 31342              	.LVL2409:
4833:src/xeq.c     **** 					lower();
 31343              		.loc 1 4833 6 is_stmt 1 view .LVU8386
 31344              	.LBB4452:
 31345              	.LBI4452:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31346              		.loc 1 792 6 view .LVU8387
 31347              	.LBB4453:
 793:src/xeq.c     **** }
 31348              		.loc 1 793 2 view .LVU8388
 31349 04f2 6C20     		movs	r0, #108
 31350              	.LVL2410:
 793:src/xeq.c     **** }
 31351              		.loc 1 793 2 is_stmt 0 view .LVU8389
 31352 04f4 6421     		movs	r1, #100
 31353              	.LVL2411:
 793:src/xeq.c     **** }
 31354              		.loc 1 793 2 view .LVU8390
 31355 04f6 FFF7FEFF 		bl	copyreg_n
 31356              	.LVL2412:
 31357              	.LBE4453:
 31358              	.LBE4452:
4834:src/xeq.c     **** 					lower();
 31359              		.loc 1 4834 6 is_stmt 1 view .LVU8391
 31360 04fa FFF7FEFF 		bl	lower
 31361              	.LVL2413:
 31362 04fe 4DE1     		b	.L2450
 31363              	.LVL2414:
 31364              	.L2200:
4834:src/xeq.c     **** 					lower();
 31365              		.loc 1 4834 6 is_stmt 0 view .LVU8392
 31366              	.LBE4447:
 31367              	.LBE4446:
 31368              	.LBE4470:
 31369              	.LBE4478:
5377:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
 31370              		.loc 1 5377 19 is_stmt 1 view .LVU8393
 31371              	.LBB4479:
 31372              	.LBI4479:
4708:src/xeq.c     **** 	decNumber x, y, rx, ry;
 31373              		.loc 1 4708 13 view .LVU8394
 31374              	.LBB4480:
4709:src/xeq.c     **** 	unsigned int f;
 31375              		.loc 1 4709 2 view .LVU8395
4710:src/xeq.c     **** 
 31376              		.loc 1 4710 2 view .LVU8396
4712:src/xeq.c     **** 
 31377              		.loc 1 4712 2 view .LVU8397
 31378              	.LBB4481:
 31379              	.LBI4481:
1332:src/xeq.c     **** 	process_cmdline();
 31380              		.loc 1 1332 6 view .LVU8398
 31381              	.LBE4481:
 31382              	.LBE4480:
 31383              	.LBE4479:
1333:src/xeq.c     **** 	set_lift();
ARM GAS  /tmp/ccBFDvgN.s 			page 797


 31384              		.loc 1 1333 2 view .LVU8399
 31385              	.LBB4512:
 31386              	.LBB4507:
 31387              	.LBB4492:
 31388              	.LBB4482:
 31389              	.LBI4482:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 31390              		.loc 1 1226 6 view .LVU8400
 31391              	.LBB4483:
1227:src/xeq.c     **** 
 31392              		.loc 1 1227 2 view .LVU8401
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31393              		.loc 1 1229 2 view .LVU8402
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31394              		.loc 1 1229 5 is_stmt 0 view .LVU8403
 31395 0500 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31396 0502 002B     		cmp	r3, #0
 31397 0504 40F0B281 		bne	.L2486
 31398              	.L2283:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31399              		.loc 1 1229 5 view .LVU8404
 31400              	.LBE4483:
 31401              	.LBE4482:
 31402              	.LBE4492:
 31403              	.LBE4507:
 31404              	.LBE4512:
1334:src/xeq.c     **** }
 31405              		.loc 1 1334 2 is_stmt 1 view .LVU8405
 31406              	.LBB4513:
 31407              	.LBB4508:
 31408              	.LBB4493:
 31409              	.LBB4485:
 31410              	.LBI4485:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31411              		.loc 1 767 6 view .LVU8406
 31412              	.LBB4486:
 768:src/xeq.c     **** }
 31413              		.loc 1 768 5 view .LVU8407
 768:src/xeq.c     **** }
 31414              		.loc 1 768 23 is_stmt 0 view .LVU8408
 31415 0508 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31416              	.LBE4486:
 31417              	.LBE4485:
 31418              	.LBE4493:
4714:src/xeq.c     **** 
 31419              		.loc 1 4714 4 view .LVU8409
 31420 050a EDB2     		uxtb	r5, r5
 31421              	.LVL2415:
 31422              	.LBB4494:
 31423              	.LBB4489:
 31424              	.LBB4487:
 768:src/xeq.c     **** }
 31425              		.loc 1 768 23 view .LVU8410
 31426 050c 43F04003 		orr	r3, r3, #64
 31427              	.LBE4487:
 31428              	.LBE4489:
 31429              	.LBE4494:
ARM GAS  /tmp/ccBFDvgN.s 			page 798


4716:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31430              		.loc 1 4716 5 view .LVU8411
 31431 0510 9B2D     		cmp	r5, #155
 31432              	.LBB4495:
 31433              	.LBB4490:
 31434              	.LBB4488:
 768:src/xeq.c     **** }
 31435              		.loc 1 768 23 view .LVU8412
 31436 0512 E375     		strb	r3, [r4, #23]
 31437              	.LBE4488:
 31438              	.LBE4490:
 31439              	.LBE4495:
4714:src/xeq.c     **** 
 31440              		.loc 1 4714 2 is_stmt 1 view .LVU8413
 31441              	.LVL2416:
4716:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31442              		.loc 1 4716 2 view .LVU8414
4716:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31443              		.loc 1 4716 5 is_stmt 0 view .LVU8415
 31444 0514 66D8     		bhi	.L2289
4717:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31445              		.loc 1 4717 3 is_stmt 1 view .LVU8416
4717:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31446              		.loc 1 4717 9 is_stmt 0 view .LVU8417
 31447 0516 3A4B     		ldr	r3, .L2505+12
 31448 0518 05EB4505 		add	r5, r5, r5, lsl #1
 31449              	.LVL2417:
4717:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31450              		.loc 1 4717 9 view .LVU8418
 31451 051c 03EBC505 		add	r5, r3, r5, lsl #3
 31452 0520 6D68     		ldr	r5, [r5, #4]
4717:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31453              		.loc 1 4717 6 view .LVU8419
 31454 0522 002D     		cmp	r5, #0
 31455 0524 00F0B882 		beq	.L2290
 31456              	.LBB4496:
4718:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31457              		.loc 1 4718 4 is_stmt 1 view .LVU8420
 31458              	.LVL2418:
4719:src/xeq.c     **** 				return;
 31459              		.loc 1 4719 4 view .LVU8421
4719:src/xeq.c     **** 				return;
 31460              		.loc 1 4719 8 is_stmt 0 view .LVU8422
 31461 0528 2846     		mov	r0, r5
 31462 052a FFF7FEFF 		bl	dispatch_xrom
 31463              	.LVL2419:
4719:src/xeq.c     **** 				return;
 31464              		.loc 1 4719 7 view .LVU8423
 31465 052e 0028     		cmp	r0, #0
 31466 0530 40F0AC80 		bne	.L2168
4722:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
 31467              		.loc 1 4722 5 is_stmt 1 view .LVU8424
 31468              	.LVL2420:
 31469              	.LBB4497:
 31470              	.LBI4497:
 854:src/xeq.c     **** 	getX(x);
 31471              		.loc 1 854 6 view .LVU8425
ARM GAS  /tmp/ccBFDvgN.s 			page 799


 31472              	.LBE4497:
 31473              	.LBE4496:
 31474              	.LBE4508:
 31475              	.LBE4513:
 855:src/xeq.c     **** 	getY(y);
 31476              		.loc 1 855 2 view .LVU8426
 31477              	.LBB4514:
 31478              	.LBB4509:
 31479              	.LBB4504:
 31480              	.LBB4502:
 31481              	.LBB4498:
 31482              	.LBI4498:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 31483              		.loc 1 824 12 view .LVU8427
 31484              	.LBB4499:
 825:src/xeq.c     **** }
 31485              		.loc 1 825 2 view .LVU8428
 825:src/xeq.c     **** }
 31486              		.loc 1 825 9 is_stmt 0 view .LVU8429
 31487 0534 6421     		movs	r1, #100
 31488 0536 1EA8     		add	r0, sp, #120
 31489              	.LVL2421:
 825:src/xeq.c     **** }
 31490              		.loc 1 825 9 view .LVU8430
 31491 0538 FFF7FEFF 		bl	getRegister
 31492              	.LVL2422:
 825:src/xeq.c     **** }
 31493              		.loc 1 825 9 view .LVU8431
 31494              	.LBE4499:
 31495              	.LBE4498:
 31496              	.LBE4502:
 31497              	.LBE4504:
 31498              	.LBE4509:
 31499              	.LBE4514:
 856:src/xeq.c     **** }
 31500              		.loc 1 856 2 is_stmt 1 view .LVU8432
 31501              	.LBB4515:
 31502              	.LBB4510:
 31503              	.LBB4505:
 31504              	.LBB4503:
 31505              	.LBB4500:
 31506              	.LBI4500:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 31507              		.loc 1 832 6 view .LVU8433
 31508              	.LBB4501:
 833:src/xeq.c     **** }
 31509              		.loc 1 833 2 view .LVU8434
 31510 053c 6521     		movs	r1, #101
 31511 053e 27A8     		add	r0, sp, #156
 31512              	.LVL2423:
 833:src/xeq.c     **** }
 31513              		.loc 1 833 2 is_stmt 0 view .LVU8435
 31514 0540 FFF7FEFF 		bl	getRegister
 31515              	.LVL2424:
 833:src/xeq.c     **** }
 31516              		.loc 1 833 2 view .LVU8436
 31517              	.LBE4501:
ARM GAS  /tmp/ccBFDvgN.s 			page 800


 31518              	.LBE4500:
 31519              	.LBE4503:
4723:src/xeq.c     **** 				setlastXY();
 31520              		.loc 1 4723 5 is_stmt 1 view .LVU8437
 31521 0544 27AB     		add	r3, sp, #156
 31522 0546 1EAA     		add	r2, sp, #120
 31523 0548 39A9     		add	r1, sp, #228
 31524 054a 30A8     		add	r0, sp, #192
 31525 054c A847     		blx	r5
 31526              	.LVL2425:
4724:src/xeq.c     **** 				setXY(&rx, &ry);
 31527              		.loc 1 4724 5 view .LVU8438
 31528 054e FFF7FEFF 		bl	setlastXY
 31529              	.LVL2426:
4725:src/xeq.c     **** 				set_was_complex();
 31530              		.loc 1 4725 5 view .LVU8439
 31531              	.L2449:
4725:src/xeq.c     **** 				set_was_complex();
 31532              		.loc 1 4725 5 is_stmt 0 view .LVU8440
 31533              	.LBE4505:
 31534              	.LBE4510:
 31535              	.LBE4515:
 31536              	.LBB4516:
 31537              	.LBB4517:
 31538              	.LBB4518:
4804:src/xeq.c     **** 				set_was_complex();
 31539              		.loc 1 4804 5 is_stmt 1 view .LVU8441
 31540 0552 39A9     		add	r1, sp, #228
 31541 0554 30A8     		add	r0, sp, #192
 31542 0556 FFF7FEFF 		bl	setXY
 31543              	.LVL2427:
4805:src/xeq.c     **** 			}
 31544              		.loc 1 4805 5 view .LVU8442
 31545              	.LBB4519:
 31546              	.LBI4519:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 31547              		.loc 1 539 13 view .LVU8443
 31548              	.LBB4520:
 540:src/xeq.c     **** }
 31549              		.loc 1 540 2 view .LVU8444
 540:src/xeq.c     **** }
 31550              		.loc 1 540 20 is_stmt 0 view .LVU8445
 31551 055a 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 31552 055c 274B     		ldr	r3, .L2505+8
 31553 055e 0121     		movs	r1, #1
 31554 0560 61F38712 		bfi	r2, r1, #6, #2
 31555 0564 2275     		strb	r2, [r4, #20]
 31556 0566 1A68     		ldr	r2, [r3]
 541:src/xeq.c     **** 
 31557              		.loc 1 541 1 view .LVU8446
 31558 0568 0BE6     		b	.L2171
 31559              	.LVL2428:
 31560              	.L2198:
 541:src/xeq.c     **** 
 31561              		.loc 1 541 1 view .LVU8447
 31562              	.LBE4520:
 31563              	.LBE4519:
ARM GAS  /tmp/ccBFDvgN.s 			page 801


 31564              	.LBE4518:
 31565              	.LBE4517:
 31566              	.LBE4516:
5378:src/xeq.c     **** 		default:	illegal(op);
 31567              		.loc 1 5378 19 is_stmt 1 view .LVU8448
 31568              	.LBB4559:
 31569              	.LBI4516:
4785:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
 31570              		.loc 1 4785 13 view .LVU8449
 31571              	.LBB4552:
4786:src/xeq.c     **** 	unsigned int f;
 31572              		.loc 1 4786 2 view .LVU8450
4787:src/xeq.c     **** 
 31573              		.loc 1 4787 2 view .LVU8451
4789:src/xeq.c     **** 
 31574              		.loc 1 4789 2 view .LVU8452
 31575              	.LBB4525:
 31576              	.LBI4525:
1332:src/xeq.c     **** 	process_cmdline();
 31577              		.loc 1 1332 6 view .LVU8453
 31578              	.LBE4525:
 31579              	.LBE4552:
 31580              	.LBE4559:
1333:src/xeq.c     **** 	set_lift();
 31581              		.loc 1 1333 2 view .LVU8454
 31582              	.LBB4560:
 31583              	.LBB4553:
 31584              	.LBB4536:
 31585              	.LBB4526:
 31586              	.LBI4526:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 31587              		.loc 1 1226 6 view .LVU8455
 31588              	.LBB4527:
1227:src/xeq.c     **** 
 31589              		.loc 1 1227 2 view .LVU8456
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31590              		.loc 1 1229 2 view .LVU8457
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31591              		.loc 1 1229 5 is_stmt 0 view .LVU8458
 31592 056a 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31593 056c 002B     		cmp	r3, #0
 31594 056e 40F07A81 		bne	.L2487
 31595              	.L2288:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31596              		.loc 1 1229 5 view .LVU8459
 31597              	.LBE4527:
 31598              	.LBE4526:
 31599              	.LBE4536:
 31600              	.LBE4553:
 31601              	.LBE4560:
1334:src/xeq.c     **** }
 31602              		.loc 1 1334 2 is_stmt 1 view .LVU8460
 31603              	.LBB4561:
 31604              	.LBB4554:
 31605              	.LBB4537:
 31606              	.LBB4529:
 31607              	.LBI4529:
ARM GAS  /tmp/ccBFDvgN.s 			page 802


 767:src/xeq.c     ****     State2.state_lift = 1;
 31608              		.loc 1 767 6 view .LVU8461
 31609              	.LBB4530:
 768:src/xeq.c     **** }
 31610              		.loc 1 768 5 view .LVU8462
 768:src/xeq.c     **** }
 31611              		.loc 1 768 23 is_stmt 0 view .LVU8463
 31612 0572 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31613              	.LBE4530:
 31614              	.LBE4529:
 31615              	.LBE4537:
4791:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31616              		.loc 1 4791 4 view .LVU8464
 31617 0574 EDB2     		uxtb	r5, r5
 31618              	.LVL2429:
 31619              	.LBB4538:
 31620              	.LBB4533:
 31621              	.LBB4531:
 768:src/xeq.c     **** }
 31622              		.loc 1 768 23 view .LVU8465
 31623 0576 43F04003 		orr	r3, r3, #64
 31624              	.LBE4531:
 31625              	.LBE4533:
 31626              	.LBE4538:
4792:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31627              		.loc 1 4792 5 view .LVU8466
 31628 057a 342D     		cmp	r5, #52
 31629              	.LBB4539:
 31630              	.LBB4534:
 31631              	.LBB4532:
 768:src/xeq.c     **** }
 31632              		.loc 1 768 23 view .LVU8467
 31633 057c E375     		strb	r3, [r4, #23]
 31634              	.LBE4532:
 31635              	.LBE4534:
 31636              	.LBE4539:
4791:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31637              		.loc 1 4791 2 is_stmt 1 view .LVU8468
 31638              	.LVL2430:
4792:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31639              		.loc 1 4792 2 view .LVU8469
4792:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31640              		.loc 1 4792 5 is_stmt 0 view .LVU8470
 31641 057e 31D8     		bhi	.L2289
4793:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31642              		.loc 1 4793 3 is_stmt 1 view .LVU8471
4793:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31643              		.loc 1 4793 9 is_stmt 0 view .LVU8472
 31644 0580 214B     		ldr	r3, .L2505+20
 31645 0582 05EB4505 		add	r5, r5, r5, lsl #1
 31646              	.LVL2431:
4793:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31647              		.loc 1 4793 9 view .LVU8473
 31648 0586 03EBC505 		add	r5, r3, r5, lsl #3
 31649 058a 6D68     		ldr	r5, [r5, #4]
4793:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31650              		.loc 1 4793 6 view .LVU8474
ARM GAS  /tmp/ccBFDvgN.s 			page 803


 31651 058c 002D     		cmp	r5, #0
 31652 058e 00F08382 		beq	.L2290
 31653              	.LBB4540:
4794:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31654              		.loc 1 4794 4 is_stmt 1 view .LVU8475
 31655              	.LVL2432:
4795:src/xeq.c     **** 				return;
 31656              		.loc 1 4795 4 view .LVU8476
4795:src/xeq.c     **** 				return;
 31657              		.loc 1 4795 8 is_stmt 0 view .LVU8477
 31658 0592 2846     		mov	r0, r5
 31659 0594 FFF7FEFF 		bl	dispatch_xrom
 31660              	.LVL2433:
4795:src/xeq.c     **** 				return;
 31661              		.loc 1 4795 7 view .LVU8478
 31662 0598 0028     		cmp	r0, #0
 31663 059a 77D1     		bne	.L2168
4798:src/xeq.c     **** 
 31664              		.loc 1 4798 5 is_stmt 1 view .LVU8479
 31665              	.LVL2434:
 31666              	.LBB4521:
 31667              	.LBI4521:
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 31668              		.loc 1 879 6 view .LVU8480
 31669              	.LBB4522:
 880:src/xeq.c     **** 	getT(t);
 31670              		.loc 1 880 2 view .LVU8481
 31671 059c 15AB     		add	r3, sp, #84
 31672              	.LVL2435:
 880:src/xeq.c     **** 	getT(t);
 31673              		.loc 1 880 2 is_stmt 0 view .LVU8482
 31674 059e 0DF1300A 		add	r10, sp, #48
 31675              	.LVL2436:
 880:src/xeq.c     **** 	getT(t);
 31676              		.loc 1 880 2 view .LVU8483
 31677 05a2 1EAA     		add	r2, sp, #120
 31678              	.LVL2437:
 880:src/xeq.c     **** 	getT(t);
 31679              		.loc 1 880 2 view .LVU8484
 31680 05a4 1946     		mov	r1, r3
 31681 05a6 5046     		mov	r0, r10
 31682 05a8 FFF7FEFF 		bl	getXYZ
 31683              	.LVL2438:
 881:src/xeq.c     **** }
 31684              		.loc 1 881 2 is_stmt 1 view .LVU8485
 31685              	.LBB4523:
 31686              	.LBI4523:
 850:src/xeq.c     **** 	getRegister(t, regT_idx);
 31687              		.loc 1 850 13 view .LVU8486
 31688              	.LBB4524:
 851:src/xeq.c     **** }
 31689              		.loc 1 851 2 view .LVU8487
 31690 05ac 27A8     		add	r0, sp, #156
 31691              	.LVL2439:
 851:src/xeq.c     **** }
 31692              		.loc 1 851 2 is_stmt 0 view .LVU8488
 31693 05ae 6721     		movs	r1, #103
ARM GAS  /tmp/ccBFDvgN.s 			page 804


 31694 05b0 FFF7FEFF 		bl	getRegister
 31695              	.LVL2440:
 851:src/xeq.c     **** }
 31696              		.loc 1 851 2 view .LVU8489
 31697              	.LBE4524:
 31698              	.LBE4523:
 31699              	.LBE4522:
 31700              	.LBE4521:
4800:src/xeq.c     **** 
 31701              		.loc 1 4800 5 is_stmt 1 view .LVU8490
 31702 05b4 15AB     		add	r3, sp, #84
 31703 05b6 1EAA     		add	r2, sp, #120
 31704 05b8 39A9     		add	r1, sp, #228
 31705 05ba 30A8     		add	r0, sp, #192
 31706 05bc CDE900A3 		strd	r10, r3, [sp]
 31707 05c0 27AB     		add	r3, sp, #156
 31708 05c2 A847     		blx	r5
 31709              	.LVL2441:
4802:src/xeq.c     **** 				lower2();
 31710              		.loc 1 4802 5 view .LVU8491
 31711 05c4 FFF7FEFF 		bl	setlastXY
 31712              	.LVL2442:
4803:src/xeq.c     **** 				setXY(&xr, &yr);
 31713              		.loc 1 4803 5 view .LVU8492
 31714 05c8 FFF7FEFF 		bl	lower2
 31715              	.LVL2443:
 31716 05cc C1E7     		b	.L2449
 31717              	.LVL2444:
 31718              	.L2476:
4803:src/xeq.c     **** 				setXY(&xr, &yr);
 31719              		.loc 1 4803 5 is_stmt 0 view .LVU8493
 31720              	.LBE4540:
 31721              	.LBE4554:
 31722              	.LBE4561:
 31723              	.LBB4562:
 31724              	.LBB4182:
5290:src/xeq.c     **** 		return;
 31725              		.loc 1 5290 3 is_stmt 1 view .LVU8494
5290:src/xeq.c     **** 		return;
 31726              		.loc 1 5290 3 view .LVU8495
 31727              	.LBB4176:
 31728              	.LBI4171:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31729              		.loc 1 546 5 view .LVU8496
 31730              	.LBB4175:
 547:src/xeq.c     **** 		Error = e;
 31731              		.loc 1 547 2 view .LVU8497
 547:src/xeq.c     **** 		Error = e;
 31732              		.loc 1 547 12 is_stmt 0 view .LVU8498
 31733 05ce 0B4B     		ldr	r3, .L2505+8
 31734 05d0 DFF838A0 		ldr	r10, .L2505+24
 31735              	.LVL2445:
 547:src/xeq.c     **** 		Error = e;
 31736              		.loc 1 547 12 view .LVU8499
 31737 05d4 1868     		ldr	r0, [r3]
 547:src/xeq.c     **** 		Error = e;
 31738              		.loc 1 547 5 view .LVU8500
ARM GAS  /tmp/ccBFDvgN.s 			page 805


 31739 05d6 0028     		cmp	r0, #0
 31740 05d8 7FF4F7AD 		bne	.L2307
 31741 05dc F3E5     		b	.L2176
 31742              	.LVL2446:
 31743              	.L2475:
 547:src/xeq.c     **** 		Error = e;
 31744              		.loc 1 547 5 view .LVU8501
 31745              	.LBE4175:
 31746              	.LBE4176:
 31747              	.LBB4177:
 31748              	.LBB4159:
 31749              	.LBB4153:
 31750 05de FFF7FEFF 		bl	process_cmdline.part.0
 31751              	.LVL2447:
 31752 05e2 A8E5     		b	.L2164
 31753              	.LVL2448:
 31754              	.L2289:
 547:src/xeq.c     **** 		Error = e;
 31755              		.loc 1 547 5 view .LVU8502
 31756              	.LBE4153:
 31757              	.LBE4159:
 31758              	.LBE4177:
 31759              	.LBE4182:
 31760              	.LBE4562:
 31761              	.LBB4563:
 31762              	.LBB4555:
4810:src/xeq.c     **** }
 31763              		.loc 1 4810 3 is_stmt 1 view .LVU8503
4810:src/xeq.c     **** }
 31764              		.loc 1 4810 3 view .LVU8504
 31765              	.LBB4541:
 31766              	.LBI4541:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31767              		.loc 1 546 5 view .LVU8505
 31768              	.LBB4542:
 547:src/xeq.c     **** 		Error = e;
 31769              		.loc 1 547 2 view .LVU8506
 547:src/xeq.c     **** 		Error = e;
 31770              		.loc 1 547 12 is_stmt 0 view .LVU8507
 31771 05e4 054B     		ldr	r3, .L2505+8
 31772 05e6 1A68     		ldr	r2, [r3]
 547:src/xeq.c     **** 		Error = e;
 31773              		.loc 1 547 5 view .LVU8508
 31774 05e8 002A     		cmp	r2, #0
 31775 05ea 7FF497AD 		bne	.L2182
 31776              	.LVL2449:
 31777              	.LBB4543:
 31778              	.LBI4543:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31779              		.loc 1 546 5 is_stmt 1 view .LVU8509
 31780              	.LBB4544:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 31781              		.loc 1 548 3 view .LVU8510
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 31782              		.loc 1 548 9 is_stmt 0 view .LVU8511
 31783 05ee 0322     		movs	r2, #3
 31784 05f0 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccBFDvgN.s 			page 806


 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 31785              		.loc 1 549 3 is_stmt 1 view .LVU8512
 31786              	.LVL2450:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 31787              		.loc 1 549 3 is_stmt 0 view .LVU8513
 31788              	.LBE4544:
 31789              	.LBE4543:
 31790              	.LBE4542:
 31791              	.LBE4541:
4810:src/xeq.c     **** }
 31792              		.loc 1 4810 3 is_stmt 1 view .LVU8514
 31793              	.LBE4555:
 31794              	.LBE4563:
5379:src/xeq.c     **** 		}
 31795              		.loc 1 5379 12 view .LVU8515
5389:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31796              		.loc 1 5389 2 view .LVU8516
 31797 05f2 93E5     		b	.L2182
 31798              	.L2506:
 31799              		.align	2
 31800              	.L2505:
 31801 05f4 00000000 		.word	argcmds
 31802 05f8 00000000 		.word	niladics
 31803 05fc 00000000 		.word	Error
 31804 0600 00000000 		.word	monfuncs
 31805 0604 00000000 		.word	trifuncs
 31806 0608 00000000 		.word	dyfuncs
 31807 060c 00000000 		.word	Running
 31808              	.LVL2451:
 31809              	.L2180:
 31810              	.LBB4564:
 31811              	.LBB4144:
 31812              	.LBB4120:
5217:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31813              		.loc 1 5217 4 view .LVU8517
5217:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31814              		.loc 1 5217 13 is_stmt 0 view .LVU8518
 31815 0610 0846     		mov	r0, r1
 31816 0612 39A9     		add	r1, sp, #228
 31817 0614 0992     		str	r2, [sp, #36]
 31818 0616 FFF7FEFF 		bl	get_reg_n_int_sgn
 31819              	.LVL2452:
5218:src/xeq.c     **** 				goto range;
 31820              		.loc 1 5218 16 view .LVU8519
 31821 061a 0023     		movs	r3, #0
 31822 061c 0691     		str	r1, [sp, #24]
 31823 061e 0793     		str	r3, [sp, #28]
 31824              	.LVL2453:
5218:src/xeq.c     **** 				goto range;
 31825              		.loc 1 5218 4 is_stmt 1 view .LVU8520
5218:src/xeq.c     **** 				goto range;
 31826              		.loc 1 5218 7 is_stmt 0 view .LVU8521
 31827 0620 DDE90623 		ldrd	r2, [sp, #24]
 31828 0624 1343     		orrs	r3, r2, r3
 31829 0626 16D1     		bne	.L2184
5220:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31830              		.loc 1 5220 4 is_stmt 1 view .LVU8522
ARM GAS  /tmp/ccBFDvgN.s 			page 807


5221:src/xeq.c     **** 				// negative arguments address local registers or flags
 31831              		.loc 1 5221 7 is_stmt 0 view .LVU8523
 31832 0628 15F0080F 		tst	r5, #8
 31833 062c 099A     		ldr	r2, [sp, #36]
 31834 062e AE4B     		ldr	r3, .L2507
5220:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31835              		.loc 1 5220 8 view .LVU8524
 31836 0630 0146     		mov	r1, r0
 31837              	.LVL2454:
5221:src/xeq.c     **** 				// negative arguments address local registers or flags
 31838              		.loc 1 5221 4 is_stmt 1 view .LVU8525
5221:src/xeq.c     **** 				// negative arguments address local registers or flags
 31839              		.loc 1 5221 7 is_stmt 0 view .LVU8526
 31840 0632 02D0     		beq	.L2178
5221:src/xeq.c     **** 				// negative arguments address local registers or flags
 31841              		.loc 1 5221 27 view .LVU8527
 31842 0634 3998     		ldr	r0, [sp, #228]
 31843              	.LVL2455:
5221:src/xeq.c     **** 				// negative arguments address local registers or flags
 31844              		.loc 1 5221 27 view .LVU8528
 31845 0636 00B1     		cbz	r0, .L2178
5223:src/xeq.c     **** 			}
 31846              		.loc 1 5223 5 is_stmt 1 view .LVU8529
5223:src/xeq.c     **** 			}
 31847              		.loc 1 5223 9 is_stmt 0 view .LVU8530
 31848 0638 7031     		adds	r1, r1, #112
 31849              	.LVL2456:
 31850              	.L2178:
5223:src/xeq.c     **** 			}
 31851              		.loc 1 5223 9 view .LVU8531
 31852              	.LBE4120:
5231:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31853              		.loc 1 5231 2 is_stmt 1 view .LVU8532
5231:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31854              		.loc 1 5231 18 is_stmt 0 view .LVU8533
 31855 063a 9818     		adds	r0, r3, r2
 31856 063c 4079     		ldrb	r0, [r0, #5]	@ zero_extendqisi2
5231:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31857              		.loc 1 5231 5 view .LVU8534
 31858 063e 8507     		lsls	r5, r0, #30
 31859 0640 51D5     		bpl	.L2186
5233:src/xeq.c     **** 	}
 31860              		.loc 1 5233 9 view .LVU8535
 31861 0642 5046     		mov	r0, r10
 31862 0644 CDE90512 		strd	r1, r2, [sp, #20]
 31863              	.LVL2457:
5233:src/xeq.c     **** 	}
 31864              		.loc 1 5233 9 view .LVU8536
 31865 0648 FFF7FEFF 		bl	get_reg_limit
 31866              	.LVL2458:
5233:src/xeq.c     **** 	}
 31867              		.loc 1 5233 9 view .LVU8537
 31868 064c DDE90512 		ldrd	r1, r2, [sp, #20]
 31869 0650 A54B     		ldr	r3, .L2507
 31870              	.LVL2459:
 31871              	.L2187:
5241:src/xeq.c     **** 		// Argument is too large
ARM GAS  /tmp/ccBFDvgN.s 			page 808


 31872              		.loc 1 5241 2 is_stmt 1 view .LVU8538
5241:src/xeq.c     **** 		// Argument is too large
 31873              		.loc 1 5241 5 is_stmt 0 view .LVU8539
 31874 0652 8142     		cmp	r1, r0
 31875 0654 07D9     		bls	.L2189
 31876              	.LVL2460:
 31877              	.L2184:
5243:src/xeq.c     **** 	}
 31878              		.loc 1 5243 9 is_stmt 1 view .LVU8540
 31879              	.LBB4121:
 31880              	.LBI4121:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31881              		.loc 1 546 5 view .LVU8541
 31882              	.LBB4122:
 547:src/xeq.c     **** 		Error = e;
 31883              		.loc 1 547 2 view .LVU8542
 547:src/xeq.c     **** 		Error = e;
 31884              		.loc 1 547 12 is_stmt 0 view .LVU8543
 31885 0656 A54B     		ldr	r3, .L2507+4
 31886 0658 1868     		ldr	r0, [r3]
 547:src/xeq.c     **** 		Error = e;
 31887              		.loc 1 547 5 view .LVU8544
 31888 065a 0028     		cmp	r0, #0
 31889 065c 00F0BE80 		beq	.L2190
 31890              	.LVL2461:
 31891              	.L2440:
 547:src/xeq.c     **** 		Error = e;
 31892              		.loc 1 547 5 view .LVU8545
 31893 0660 DFF8A8A2 		ldr	r10, .L2507+36
 31894 0664 B1E5     		b	.L2307
 31895              	.LVL2462:
 31896              	.L2189:
 547:src/xeq.c     **** 		Error = e;
 31897              		.loc 1 547 5 view .LVU8546
 31898              	.LBE4122:
 31899              	.LBE4121:
5245:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31900              		.loc 1 5245 7 is_stmt 1 view .LVU8547
5245:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31901              		.loc 1 5245 23 is_stmt 0 view .LVU8548
 31902 0666 1344     		add	r3, r3, r2
 31903 0668 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
5245:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31904              		.loc 1 5245 10 view .LVU8549
 31905 066a DD06     		lsls	r5, r3, #27
 31906 066c 00F1BB80 		bmi	.L2488
 31907              	.LVL2463:
 31908              	.L2191:
 31909              	.LBB4126:
5251:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 31910              		.loc 1 5251 3 is_stmt 1 view .LVU8550
5252:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 31911              		.loc 1 5252 3 view .LVU8551
 31912              	.LBB4127:
 31913              	.LBI4127:
4501:src/xeq.c     **** {
 31914              		.loc 1 4501 24 view .LVU8552
ARM GAS  /tmp/ccBFDvgN.s 			page 809


 31915              	.LBB4128:
4503:src/xeq.c     **** 	if (xp < xrom)
 31916              		.loc 1 4503 2 view .LVU8553
4503:src/xeq.c     **** 	if (xp < xrom)
 31917              		.loc 1 4503 59 is_stmt 0 view .LVU8554
 31918 0670 089A     		ldr	r2, [sp, #32]
4504:src/xeq.c     **** 		return NULL;
 31919              		.loc 1 4504 5 view .LVU8555
 31920 0672 9F4B     		ldr	r3, .L2507+8
4503:src/xeq.c     **** 	if (xp < xrom)
 31921              		.loc 1 4503 59 view .LVU8556
 31922 0674 22F00102 		bic	r2, r2, #1
 31923              	.LVL2464:
4504:src/xeq.c     **** 		return NULL;
 31924              		.loc 1 4504 2 is_stmt 1 view .LVU8557
4504:src/xeq.c     **** 		return NULL;
 31925              		.loc 1 4504 5 is_stmt 0 view .LVU8558
 31926 0678 9A42     		cmp	r2, r3
 31927 067a 3FD2     		bcs	.L2489
 31928              	.LVL2465:
 31929              	.L2193:
4504:src/xeq.c     **** 		return NULL;
 31930              		.loc 1 4504 5 view .LVU8559
 31931              	.LBE4128:
 31932              	.LBE4127:
5274:src/xeq.c     **** 		}
 31933              		.loc 1 5274 4 is_stmt 1 view .LVU8560
 31934 067c 0846     		mov	r0, r1
 31935 067e 089B     		ldr	r3, [sp, #32]
 31936 0680 5146     		mov	r1, r10
 31937              	.LVL2466:
5274:src/xeq.c     **** 		}
 31938              		.loc 1 5274 4 is_stmt 0 view .LVU8561
 31939 0682 9847     		blx	r3
 31940              	.LVL2467:
5276:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31941              		.loc 1 5276 3 is_stmt 1 view .LVU8562
5276:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31942              		.loc 1 5276 6 is_stmt 0 view .LVU8563
 31943 0684 BAF1840F 		cmp	r10, #132
 31944 0688 7FF475AD 		bne	.L2445
 31945              	.LVL2468:
 31946              	.L2168:
5276:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31947              		.loc 1 5276 6 view .LVU8564
 31948 068c 974B     		ldr	r3, .L2507+4
 31949              	.L2446:
 31950 068e 1A68     		ldr	r2, [r3]
 31951 0690 77E5     		b	.L2171
 31952              	.L2479:
5276:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31953              		.loc 1 5276 6 view .LVU8565
 31954 0692 0393     		str	r3, [sp, #12]
 31955              	.LVL2469:
5276:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31956              		.loc 1 5276 6 view .LVU8566
 31957              	.LBE4126:
ARM GAS  /tmp/ccBFDvgN.s 			page 810


 31958              	.LBE4144:
 31959              	.LBE4564:
 31960              	.LBB4565:
 31961              	.LBB4332:
 31962              	.LBB4324:
 31963 0694 FFF7FEFF 		bl	process_cmdline.part.0
 31964              	.LVL2470:
 31965 0698 039B     		ldr	r3, [sp, #12]
 31966 069a BAE5     		b	.L2294
 31967              	.L2480:
 31968              	.LBE4324:
 31969              	.LBE4332:
 31970              	.LBE4565:
5408:src/xeq.c     **** 					// Restore the global return stack
 31971              		.loc 1 5408 5 is_stmt 1 view .LVU8567
5408:src/xeq.c     **** 					// Restore the global return stack
 31972              		.loc 1 5408 9 is_stmt 0 view .LVU8568
 31973 069c 954D     		ldr	r5, .L2507+12
5408:src/xeq.c     **** 					// Restore the global return stack
 31974              		.loc 1 5408 8 view .LVU8569
 31975 069e 95F90110 		ldrsb	r1, [r5, #1]
5408:src/xeq.c     **** 					// Restore the global return stack
 31976              		.loc 1 5408 9 view .LVU8570
 31977 06a2 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
5408:src/xeq.c     **** 					// Restore the global return stack
 31978              		.loc 1 5408 8 view .LVU8571
 31979 06a4 8142     		cmp	r1, r0
 31980 06a6 BFF614AE 		bge	.L2297
5410:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31981              		.loc 1 5410 6 is_stmt 1 view .LVU8572
5410:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31982              		.loc 1 5410 13 is_stmt 0 view .LVU8573
 31983 06aa 9349     		ldr	r1, .L2507+16
5411:src/xeq.c     **** 					// Restore private stack to normal stack
 31984              		.loc 1 5411 6 view .LVU8574
 31985 06ac D7F800C0 		ldr	ip, [r7]
5410:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31986              		.loc 1 5410 13 view .LVU8575
 31987 06b0 AE68     		ldr	r6, [r5, #8]
 31988 06b2 0E60     		str	r6, [r1]
5411:src/xeq.c     **** 					// Restore private stack to normal stack
 31989              		.loc 1 5411 6 is_stmt 1 view .LVU8576
5413:src/xeq.c     **** 						// Need space for double precision stack
 31990              		.loc 1 5413 9 is_stmt 0 view .LVU8577
 31991 06b4 12F00808 		ands	r8, r2, #8
5411:src/xeq.c     **** 					// Restore private stack to normal stack
 31992              		.loc 1 5411 16 view .LVU8578
 31993 06b8 A989     		ldrh	r1, [r5, #12]
 31994 06ba ACF8E217 		strh	r1, [ip, #2018]	@ movhi
5413:src/xeq.c     **** 						// Need space for double precision stack
 31995              		.loc 1 5413 6 is_stmt 1 view .LVU8579
5413:src/xeq.c     **** 						// Need space for double precision stack
 31996              		.loc 1 5413 9 is_stmt 0 view .LVU8580
 31997 06be 00F0F481 		beq	.L2298
5417:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31998              		.loc 1 5417 6 is_stmt 1 view .LVU8581
5417:src/xeq.c     **** 					if (Error == ERR_NONE) {
ARM GAS  /tmp/ccBFDvgN.s 			page 811


 31999              		.loc 1 5417 20 is_stmt 0 view .LVU8582
 32000 06c2 60F3C712 		bfi	r2, r0, #7, #1
 32001 06c6 6A70     		strb	r2, [r5, #1]
5418:src/xeq.c     **** 						UState.mode_double = 1;
 32002              		.loc 1 5418 6 is_stmt 1 view .LVU8583
 32003              	.L2299:
5419:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 32004              		.loc 1 5419 7 view .LVU8584
5419:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 32005              		.loc 1 5419 26 is_stmt 0 view .LVU8585
 32006 06c8 3A68     		ldr	r2, [r7]
 32007 06ca 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 32008 06ce 43F04003 		orr	r3, r3, #64
 32009 06d2 82F8E937 		strb	r3, [r2, #2025]
5420:src/xeq.c     **** 					}
 32010              		.loc 1 5420 7 is_stmt 1 view .LVU8586
5420:src/xeq.c     **** 					}
 32011              		.loc 1 5420 13 is_stmt 0 view .LVU8587
 32012 06d6 6420     		movs	r0, #100
 32013 06d8 FFF7FEFF 		bl	get_reg_n
 32014              	.LVL2471:
5420:src/xeq.c     **** 					}
 32015              		.loc 1 5420 7 view .LVU8588
 32016 06dc 8749     		ldr	r1, .L2507+20
 32017 06de C022     		movs	r2, #192
 32018 06e0 FFF7FEFF 		bl	xcopy
 32019              	.LVL2472:
 32020 06e4 F5E5     		b	.L2297
 32021              	.LVL2473:
 32022              	.L2186:
 32023              	.LBB4566:
 32024              	.LBB4145:
5235:src/xeq.c     **** 		if (LocalRegs == 0)
 32025              		.loc 1 5235 7 is_stmt 1 view .LVU8589
5235:src/xeq.c     **** 		if (LocalRegs == 0)
 32026              		.loc 1 5235 10 is_stmt 0 view .LVU8590
 32027 06e6 4006     		lsls	r0, r0, #25
 32028 06e8 40F18F80 		bpl	.L2490
5236:src/xeq.c     **** 			lim = NUMFLG - 1;
 32029              		.loc 1 5236 3 is_stmt 1 view .LVU8591
5236:src/xeq.c     **** 			lim = NUMFLG - 1;
 32030              		.loc 1 5236 7 is_stmt 0 view .LVU8592
 32031 06ec 3868     		ldr	r0, [r7]
5236:src/xeq.c     **** 			lim = NUMFLG - 1;
 32032              		.loc 1 5236 6 view .LVU8593
 32033 06ee B0F9DE07 		ldrsh	r0, [r0, #2014]
5239:src/xeq.c     **** 	}
 32034              		.loc 1 5239 8 view .LVU8594
 32035 06f2 0028     		cmp	r0, #0
 32036 06f4 0CBF     		ite	eq
 32037 06f6 6F20     		moveq	r0, #111
 32038 06f8 7F20     		movne	r0, #127
 32039 06fa AAE7     		b	.L2187
 32040              	.LVL2474:
 32041              	.L2489:
 32042              	.LBB4137:
 32043              	.LBB4130:
ARM GAS  /tmp/ccBFDvgN.s 			page 812


 32044              	.LBB4129:
4508:src/xeq.c     **** 		return NULL;
 32045              		.loc 1 4508 2 is_stmt 1 view .LVU8595
4508:src/xeq.c     **** 		return NULL;
 32046              		.loc 1 4508 17 is_stmt 0 view .LVU8596
 32047 06fc 8048     		ldr	r0, .L2507+24
 32048 06fe 0088     		ldrh	r0, [r0]
 32049 0700 03EB4003 		add	r3, r3, r0, lsl #1
4508:src/xeq.c     **** 		return NULL;
 32050              		.loc 1 4508 5 view .LVU8597
 32051 0704 9A42     		cmp	r2, r3
 32052 0706 B9D2     		bcs	.L2193
 32053              	.LVL2475:
4508:src/xeq.c     **** 		return NULL;
 32054              		.loc 1 4508 5 view .LVU8598
 32055              	.LBE4129:
 32056              	.LBE4130:
5252:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 32057              		.loc 1 5252 6 view .LVU8599
 32058 0708 002A     		cmp	r2, #0
 32059 070a B7D0     		beq	.L2193
5264:src/xeq.c     **** 			if (XromUserPc == 0)
 32060              		.loc 1 5264 4 is_stmt 1 view .LVU8600
 32061              	.LVL2476:
 32062              	.LBB4131:
 32063              	.LBI4131:
2214:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 32064              		.loc 1 2214 14 view .LVU8601
 32065              	.LBB4132:
2215:src/xeq.c     **** }
 32066              		.loc 1 2215 2 view .LVU8602
 32067              	.LBE4132:
 32068              	.LBE4131:
5264:src/xeq.c     **** 			if (XromUserPc == 0)
 32069              		.loc 1 5264 33 is_stmt 0 view .LVU8603
 32070 070c 3B68     		ldr	r3, [r7]
 32071              	.LBB4134:
 32072              	.LBB4133:
2215:src/xeq.c     **** }
 32073              		.loc 1 2215 9 view .LVU8604
 32074 070e 41F4C441 		orr	r1, r1, #25088
 32075              	.LVL2477:
2215:src/xeq.c     **** }
 32076              		.loc 1 2215 9 view .LVU8605
 32077 0712 B3F8E007 		ldrh	r0, [r3, #2016]
 32078 0716 0322     		movs	r2, #3
 32079 0718 FFF7FEFF 		bl	find_opcode_from
 32080              	.LVL2478:
2215:src/xeq.c     **** }
 32081              		.loc 1 2215 9 view .LVU8606
 32082              	.LBE4133:
 32083              	.LBE4134:
5264:src/xeq.c     **** 			if (XromUserPc == 0)
 32084              		.loc 1 5264 15 view .LVU8607
 32085 071c 794B     		ldr	r3, .L2507+28
 32086              	.LVL2479:
5264:src/xeq.c     **** 			if (XromUserPc == 0)
ARM GAS  /tmp/ccBFDvgN.s 			page 813


 32087              		.loc 1 5264 15 view .LVU8608
 32088 071e 1860     		str	r0, [r3]
5265:src/xeq.c     **** 				return;
 32089              		.loc 1 5265 4 is_stmt 1 view .LVU8609
5265:src/xeq.c     **** 				return;
 32090              		.loc 1 5265 7 is_stmt 0 view .LVU8610
 32091 0720 0028     		cmp	r0, #0
 32092 0722 B3D0     		beq	.L2168
5267:src/xeq.c     **** 				clrretstk();
 32093              		.loc 1 5267 4 is_stmt 1 view .LVU8611
5267:src/xeq.c     **** 				clrretstk();
 32094              		.loc 1 5267 8 is_stmt 0 view .LVU8612
 32095 0724 DFF8E4A1 		ldr	r10, .L2507+36
 32096              	.LVL2480:
5267:src/xeq.c     **** 				clrretstk();
 32097              		.loc 1 5267 7 view .LVU8613
 32098 0728 DAF80030 		ldr	r3, [r10]
 32099 072c 23B9     		cbnz	r3, .L2195
5268:src/xeq.c     **** #endif
 32100              		.loc 1 5268 5 is_stmt 1 view .LVU8614
 32101              	.LBB4135:
 32102              	.LBI4135:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 32103              		.loc 1 1606 6 view .LVU8615
 32104              	.LBB4136:
1607:src/xeq.c     **** }
 32105              		.loc 1 1607 2 view .LVU8616
1607:src/xeq.c     **** }
 32106              		.loc 1 1607 14 is_stmt 0 view .LVU8617
 32107 072e 3A68     		ldr	r2, [r7]
1607:src/xeq.c     **** }
 32108              		.loc 1 1607 24 view .LVU8618
 32109 0730 A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1607:src/xeq.c     **** }
 32110              		.loc 1 1607 12 view .LVU8619
 32111 0734 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 32112              	.L2195:
 32113              	.LBE4136:
 32114              	.LBE4135:
5270:src/xeq.c     **** 			return;
 32115              		.loc 1 5270 4 is_stmt 1 view .LVU8620
 32116 0738 6C4B     		ldr	r3, .L2507+4
 32117 073a 0898     		ldr	r0, [sp, #32]
 32118 073c 0593     		str	r3, [sp, #20]
 32119 073e FFF7FEFF 		bl	dispatch_xrom
 32120              	.LVL2481:
5271:src/xeq.c     **** 		}
 32121              		.loc 1 5271 4 view .LVU8621
 32122 0742 059B     		ldr	r3, [sp, #20]
 32123 0744 1A68     		ldr	r2, [r3]
 32124 0746 1CE5     		b	.L2171
 32125              	.LVL2482:
 32126              	.L2179:
5271:src/xeq.c     **** 		}
 32127              		.loc 1 5271 4 is_stmt 0 view .LVU8622
 32128              	.LBE4137:
5228:src/xeq.c     **** 		}
ARM GAS  /tmp/ccBFDvgN.s 			page 814


 32129              		.loc 1 5228 4 is_stmt 1 view .LVU8623
5228:src/xeq.c     **** 		}
 32130              		.loc 1 5228 8 is_stmt 0 view .LVU8624
 32131 0748 41F08001 		orr	r1, r1, #128
 32132              	.LVL2483:
5228:src/xeq.c     **** 		}
 32133              		.loc 1 5228 8 view .LVU8625
 32134 074c 75E7     		b	.L2178
 32135              	.LVL2484:
 32136              	.L2478:
5228:src/xeq.c     **** 		}
 32137              		.loc 1 5228 8 view .LVU8626
 32138              	.LBE4145:
 32139              	.LBE4566:
 32140              	.LBB4567:
 32141              	.LBB4308:
4749:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32142              		.loc 1 4749 3 is_stmt 1 view .LVU8627
4749:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32143              		.loc 1 4749 7 is_stmt 0 view .LVU8628
 32144 074e 3B68     		ldr	r3, [r7]
 32145 0750 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4749:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32146              		.loc 1 4749 6 view .LVU8629
 32147 0754 DB07     		lsls	r3, r3, #31
 32148 0756 40F1FF81 		bpl	.L2269
4750:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32149              		.loc 1 4750 4 is_stmt 1 view .LVU8630
4750:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32150              		.loc 1 4750 10 is_stmt 0 view .LVU8631
 32151 075a 6B4B     		ldr	r3, .L2507+32
 32152 075c 05EB4505 		add	r5, r5, r5, lsl #1
 32153              	.LVL2485:
4750:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32154              		.loc 1 4750 10 view .LVU8632
 32155 0760 03EBC505 		add	r5, r3, r5, lsl #3
 32156 0764 AD68     		ldr	r5, [r5, #8]
4750:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32157              		.loc 1 4750 7 view .LVU8633
 32158 0766 002D     		cmp	r5, #0
 32159 0768 00F08B81 		beq	.L2280
 32160              	.LBB4278:
4751:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32161              		.loc 1 4751 5 is_stmt 1 view .LVU8634
 32162              	.LVL2486:
4752:src/xeq.c     **** 					return;
 32163              		.loc 1 4752 5 view .LVU8635
4752:src/xeq.c     **** 					return;
 32164              		.loc 1 4752 9 is_stmt 0 view .LVU8636
 32165 076c 2846     		mov	r0, r5
 32166 076e FFF7FEFF 		bl	dispatch_xrom
 32167              	.LVL2487:
4752:src/xeq.c     **** 					return;
 32168              		.loc 1 4752 8 view .LVU8637
 32169 0772 0028     		cmp	r0, #0
 32170 0774 8AD1     		bne	.L2168
 32171              	.LBB4279:
ARM GAS  /tmp/ccBFDvgN.s 			page 815


4755:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 32172              		.loc 1 4755 6 is_stmt 1 view .LVU8638
 32173              	.LBB4280:
 32174              	.LBI4280:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32175              		.loc 1 1442 15 view .LVU8639
 32176              	.LBB4281:
1443:src/xeq.c     **** }
 32177              		.loc 1 1443 2 view .LVU8640
1443:src/xeq.c     **** }
 32178              		.loc 1 1443 9 is_stmt 0 view .LVU8641
 32179 0776 6420     		movs	r0, #100
 32180 0778 FFF7FEFF 		bl	get_reg_n_int
 32181              	.LVL2488:
 32182 077c 0890     		str	r0, [sp, #32]
 32183              	.LBE4281:
 32184              	.LBE4280:
4756:src/xeq.c     **** 					x = fp(y, x);
 32185              		.loc 1 4756 24 view .LVU8642
 32186 077e 6520     		movs	r0, #101
 32187              	.LBB4283:
 32188              	.LBB4282:
1443:src/xeq.c     **** }
 32189              		.loc 1 1443 9 view .LVU8643
 32190 0780 0591     		str	r1, [sp, #20]
 32191              	.LVL2489:
1443:src/xeq.c     **** }
 32192              		.loc 1 1443 9 view .LVU8644
 32193              	.LBE4282:
 32194              	.LBE4283:
4756:src/xeq.c     **** 					x = fp(y, x);
 32195              		.loc 1 4756 6 is_stmt 1 view .LVU8645
4756:src/xeq.c     **** 					x = fp(y, x);
 32196              		.loc 1 4756 24 is_stmt 0 view .LVU8646
 32197 0782 FFF7FEFF 		bl	get_reg_n_int
 32198              	.LVL2490:
4757:src/xeq.c     **** 					setlastX();
 32199              		.loc 1 4757 6 is_stmt 1 view .LVU8647
4757:src/xeq.c     **** 					setlastX();
 32200              		.loc 1 4757 10 is_stmt 0 view .LVU8648
 32201 0786 059B     		ldr	r3, [sp, #20]
 32202 0788 089A     		ldr	r2, [sp, #32]
 32203 078a A847     		blx	r5
 32204              	.LVL2491:
4757:src/xeq.c     **** 					setlastX();
 32205              		.loc 1 4757 10 view .LVU8649
 32206 078c 574B     		ldr	r3, .L2507+4
 32207 078e 0593     		str	r3, [sp, #20]
 32208              	.LVL2492:
4757:src/xeq.c     **** 					setlastX();
 32209              		.loc 1 4757 10 view .LVU8650
 32210 0790 0546     		mov	r5, r0
 32211              	.LVL2493:
4757:src/xeq.c     **** 					setlastX();
 32212              		.loc 1 4757 10 view .LVU8651
 32213 0792 8A46     		mov	r10, r1
 32214              	.LVL2494:
ARM GAS  /tmp/ccBFDvgN.s 			page 816


4758:src/xeq.c     **** 					lower();
 32215              		.loc 1 4758 6 is_stmt 1 view .LVU8652
 32216              	.LBB4284:
 32217              	.LBI4284:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32218              		.loc 1 792 6 view .LVU8653
 32219              	.LBB4285:
 793:src/xeq.c     **** }
 32220              		.loc 1 793 2 view .LVU8654
 32221 0794 6C20     		movs	r0, #108
 32222              	.LVL2495:
 793:src/xeq.c     **** }
 32223              		.loc 1 793 2 is_stmt 0 view .LVU8655
 32224 0796 6421     		movs	r1, #100
 32225              	.LVL2496:
 793:src/xeq.c     **** }
 32226              		.loc 1 793 2 view .LVU8656
 32227 0798 FFF7FEFF 		bl	copyreg_n
 32228              	.LVL2497:
 32229              	.LBE4285:
 32230              	.LBE4284:
4759:src/xeq.c     **** 					setX_int(x);
 32231              		.loc 1 4759 6 is_stmt 1 view .LVU8657
 32232              	.L2450:
4759:src/xeq.c     **** 					setX_int(x);
 32233              		.loc 1 4759 6 is_stmt 0 view .LVU8658
 32234              	.LBE4279:
 32235              	.LBE4278:
 32236              	.LBE4308:
 32237              	.LBE4567:
 32238              	.LBB4568:
 32239              	.LBB4471:
 32240              	.LBB4455:
 32241              	.LBB4454:
4835:src/xeq.c     **** 					setX_int(x);
 32242              		.loc 1 4835 6 is_stmt 1 view .LVU8659
 32243 079c FFF7FEFF 		bl	lower
 32244              	.LVL2498:
 32245              	.L2452:
4836:src/xeq.c     **** 				}
 32246              		.loc 1 4836 6 view .LVU8660
 32247 07a0 2846     		mov	r0, r5
 32248 07a2 5146     		mov	r1, r10
 32249 07a4 FFF7FEFF 		bl	setX_int
 32250              	.LVL2499:
 32251 07a8 059B     		ldr	r3, [sp, #20]
 32252 07aa 1A68     		ldr	r2, [r3]
 32253              	.LBE4454:
 32254              	.LBE4455:
 32255 07ac E9E4     		b	.L2171
 32256              	.LVL2500:
 32257              	.L2246:
4836:src/xeq.c     **** 				}
 32258              		.loc 1 4836 6 is_stmt 0 view .LVU8661
 32259              	.LBE4471:
 32260              	.LBE4568:
 32261              	.LBB4569:
ARM GAS  /tmp/ccBFDvgN.s 			page 817


 32262              	.LBB4380:
4649:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32263              		.loc 1 4649 3 is_stmt 1 view .LVU8662
4649:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32264              		.loc 1 4649 3 view .LVU8663
 32265              	.LBB4366:
 32266              	.LBI4366:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32267              		.loc 1 546 5 view .LVU8664
 32268              	.LBB4367:
 547:src/xeq.c     **** 		Error = e;
 32269              		.loc 1 547 2 view .LVU8665
 547:src/xeq.c     **** 		Error = e;
 32270              		.loc 1 547 12 is_stmt 0 view .LVU8666
 32271 07ae 4F4B     		ldr	r3, .L2507+4
 547:src/xeq.c     **** 		Error = e;
 32272              		.loc 1 547 5 view .LVU8667
 32273 07b0 1A68     		ldr	r2, [r3]
 32274 07b2 0AB9     		cbnz	r2, .L2254
 32275              	.LVL2501:
 32276              	.LBB4368:
 32277              	.LBI4368:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32278              		.loc 1 546 5 is_stmt 1 view .LVU8668
 32279              	.LBB4369:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32280              		.loc 1 548 3 view .LVU8669
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32281              		.loc 1 548 9 is_stmt 0 view .LVU8670
 32282 07b4 0322     		movs	r2, #3
 32283 07b6 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32284              		.loc 1 549 3 is_stmt 1 view .LVU8671
 32285              	.LVL2502:
 32286              	.L2254:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32287              		.loc 1 549 3 is_stmt 0 view .LVU8672
 32288              	.LBE4369:
 32289              	.LBE4368:
 32290              	.LBE4367:
 32291              	.LBE4366:
4649:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32292              		.loc 1 4649 3 is_stmt 1 view .LVU8673
4651:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32293              		.loc 1 4651 2 view .LVU8674
4651:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32294              		.loc 1 4651 6 is_stmt 0 view .LVU8675
 32295 07b8 3A68     		ldr	r2, [r7]
 32296 07ba 92F8AD17 		ldrb	r1, [r2, #1965]	@ zero_extendqisi2
4651:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32297              		.loc 1 4651 5 view .LVU8676
 32298 07be 8907     		lsls	r1, r1, #30
 32299 07c0 06D4     		bmi	.L2447
 32300              	.L2308:
4654:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32301              		.loc 1 4654 60 view .LVU8677
 32302 07c2 92F8AC27 		ldrb	r2, [r2, #1964]	@ zero_extendqisi2
ARM GAS  /tmp/ccBFDvgN.s 			page 818


4654:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32303              		.loc 1 4654 56 view .LVU8678
 32304 07c6 02F04102 		and	r2, r2, #65
 32305 07ca 412A     		cmp	r2, #65
 32306 07cc 7FF45FAF 		bne	.L2446
 32307              	.L2447:
4655:src/xeq.c     **** 	}
 32308              		.loc 1 4655 4 is_stmt 1 view .LVU8679
 32309              	.LBB4370:
 32310              	.LBI4370:
 767:src/xeq.c     ****     State2.state_lift = 1;
 32311              		.loc 1 767 6 view .LVU8680
 32312              	.LBB4371:
 768:src/xeq.c     **** }
 32313              		.loc 1 768 5 view .LVU8681
 768:src/xeq.c     **** }
 32314              		.loc 1 768 23 is_stmt 0 view .LVU8682
 32315 07d0 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 32316 07d2 1A68     		ldr	r2, [r3]
 32317 07d4 41F04001 		orr	r1, r1, #64
 32318 07d8 E175     		strb	r1, [r4, #23]
 769:src/xeq.c     **** 
 32319              		.loc 1 769 1 view .LVU8683
 32320 07da D2E4     		b	.L2171
 32321              	.LVL2503:
 32322              	.L2190:
 769:src/xeq.c     **** 
 32323              		.loc 1 769 1 view .LVU8684
 32324              	.LBE4371:
 32325              	.LBE4370:
 32326              	.LBE4380:
 32327              	.LBE4569:
 32328              	.LBB4570:
 32329              	.LBB4146:
 32330              	.LBB4138:
 32331              	.LBB4125:
 32332              	.LBB4123:
 32333              	.LBI4123:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32334              		.loc 1 546 5 is_stmt 1 view .LVU8685
 32335              	.LBB4124:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32336              		.loc 1 548 3 view .LVU8686
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32337              		.loc 1 548 9 is_stmt 0 view .LVU8687
 32338 07dc 0820     		movs	r0, #8
 32339 07de DFF82CA1 		ldr	r10, .L2507+36
 32340              	.LVL2504:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32341              		.loc 1 548 9 view .LVU8688
 32342 07e2 1860     		str	r0, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32343              		.loc 1 549 3 is_stmt 1 view .LVU8689
 32344 07e4 F1E4     		b	.L2307
 32345              	.LVL2505:
 32346              	.L2488:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccBFDvgN.s 			page 819


 32347              		.loc 1 549 3 is_stmt 0 view .LVU8690
 32348              	.LBE4124:
 32349              	.LBE4123:
 32350              	.LBE4125:
 32351              	.LBE4138:
5245:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32352              		.loc 1 5245 30 view .LVU8691
 32353 07e6 A1F16303 		sub	r3, r1, #99
 32354 07ea 0C2B     		cmp	r3, #12
 32355 07ec 3FF640AF 		bhi	.L2191
5245:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32356              		.loc 1 5245 69 view .LVU8692
 32357 07f0 C807     		lsls	r0, r1, #31
 32358              	.LVL2506:
5245:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32359              		.loc 1 5245 69 view .LVU8693
 32360 07f2 7FF53DAF 		bpl	.L2191
5247:src/xeq.c     **** 	}
 32361              		.loc 1 5247 3 is_stmt 1 view .LVU8694
 32362              	.LVL2507:
 32363              	.LBB4139:
 32364              	.LBI4139:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32365              		.loc 1 546 5 view .LVU8695
 32366              	.LBB4140:
 547:src/xeq.c     **** 		Error = e;
 32367              		.loc 1 547 2 view .LVU8696
 547:src/xeq.c     **** 		Error = e;
 32368              		.loc 1 547 12 is_stmt 0 view .LVU8697
 32369 07f6 3D4B     		ldr	r3, .L2507+4
 32370 07f8 1868     		ldr	r0, [r3]
 547:src/xeq.c     **** 		Error = e;
 32371              		.loc 1 547 5 view .LVU8698
 32372 07fa 0028     		cmp	r0, #0
 32373 07fc 7FF430AF 		bne	.L2440
 32374              	.LVL2508:
 32375              	.LBB4141:
 32376              	.LBI4141:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32377              		.loc 1 546 5 is_stmt 1 view .LVU8699
 32378              	.LBB4142:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32379              		.loc 1 548 3 view .LVU8700
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32380              		.loc 1 548 9 is_stmt 0 view .LVU8701
 32381 0800 0720     		movs	r0, #7
 32382 0802 DFF808A1 		ldr	r10, .L2507+36
 32383              	.LVL2509:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32384              		.loc 1 548 9 view .LVU8702
 32385 0806 1860     		str	r0, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32386              		.loc 1 549 3 is_stmt 1 view .LVU8703
 32387 0808 DFE4     		b	.L2307
 32388              	.LVL2510:
 32389              	.L2490:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccBFDvgN.s 			page 820


 32390              		.loc 1 549 3 is_stmt 0 view .LVU8704
 32391              	.LBE4142:
 32392              	.LBE4141:
 32393              	.LBE4140:
 32394              	.LBE4139:
5191:src/xeq.c     **** 
 32395              		.loc 1 5191 15 view .LVU8705
 32396 080a 0598     		ldr	r0, [sp, #20]
 32397 080c 21E7     		b	.L2187
 32398              	.LVL2511:
 32399              	.L2477:
5191:src/xeq.c     **** 
 32400              		.loc 1 5191 15 view .LVU8706
 32401              	.LBE4146:
 32402              	.LBE4570:
 32403              	.LBB4571:
 32404              	.LBB4183:
 32405              	.LBB4178:
5298:src/xeq.c     **** 			if (XromUserPc != 0) {
 32406              		.loc 1 5298 4 is_stmt 1 view .LVU8707
5298:src/xeq.c     **** 			if (XromUserPc != 0) {
 32407              		.loc 1 5298 17 is_stmt 0 view .LVU8708
 32408 080e 2846     		mov	r0, r5
 32409 0810 0121     		movs	r1, #1
 32410 0812 0592     		str	r2, [sp, #20]
 32411 0814 FFF7FEFF 		bl	findmultilbl
 32412              	.LVL2512:
5298:src/xeq.c     **** 			if (XromUserPc != 0) {
 32413              		.loc 1 5298 15 view .LVU8709
 32414 0818 3A4B     		ldr	r3, .L2507+28
5299:src/xeq.c     **** 				if (! Running)
 32415              		.loc 1 5299 7 view .LVU8710
 32416 081a 059A     		ldr	r2, [sp, #20]
5298:src/xeq.c     **** 			if (XromUserPc != 0) {
 32417              		.loc 1 5298 15 view .LVU8711
 32418 081c 1860     		str	r0, [r3]
5299:src/xeq.c     **** 				if (! Running)
 32419              		.loc 1 5299 4 is_stmt 1 view .LVU8712
5299:src/xeq.c     **** 				if (! Running)
 32420              		.loc 1 5299 7 is_stmt 0 view .LVU8713
 32421 081e 0028     		cmp	r0, #0
 32422 0820 3FF434AF 		beq	.L2168
 32423              	.LVL2513:
5300:src/xeq.c     **** 					clrretstk();
 32424              		.loc 1 5300 5 is_stmt 1 view .LVU8714
5300:src/xeq.c     **** 					clrretstk();
 32425              		.loc 1 5300 9 is_stmt 0 view .LVU8715
 32426 0824 DFF8E4A0 		ldr	r10, .L2507+36
 32427              	.LVL2514:
5300:src/xeq.c     **** 					clrretstk();
 32428              		.loc 1 5300 8 view .LVU8716
 32429 0828 DAF80030 		ldr	r3, [r10]
 32430 082c 23B9     		cbnz	r3, .L2172
5301:src/xeq.c     **** 				dispatch_xrom(fp);
 32431              		.loc 1 5301 6 is_stmt 1 view .LVU8717
 32432              	.LBB4169:
 32433              	.LBI4169:
ARM GAS  /tmp/ccBFDvgN.s 			page 821


1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 32434              		.loc 1 1606 6 view .LVU8718
 32435              	.LBB4170:
1607:src/xeq.c     **** }
 32436              		.loc 1 1607 2 view .LVU8719
1607:src/xeq.c     **** }
 32437              		.loc 1 1607 14 is_stmt 0 view .LVU8720
 32438 082e 3968     		ldr	r1, [r7]
1607:src/xeq.c     **** }
 32439              		.loc 1 1607 24 view .LVU8721
 32440 0830 A1F8DE37 		strh	r3, [r1, #2014]	@ movhi
1607:src/xeq.c     **** }
 32441              		.loc 1 1607 12 view .LVU8722
 32442 0834 A1F8E237 		strh	r3, [r1, #2018]	@ movhi
 32443              	.L2172:
 32444              	.LBE4170:
 32445              	.LBE4169:
5302:src/xeq.c     **** 			}
 32446              		.loc 1 5302 5 is_stmt 1 view .LVU8723
 32447 0838 2C4B     		ldr	r3, .L2507+4
 32448 083a 0593     		str	r3, [sp, #20]
 32449              	.LVL2515:
5302:src/xeq.c     **** 			}
 32450              		.loc 1 5302 5 is_stmt 0 view .LVU8724
 32451 083c 1046     		mov	r0, r2
 32452 083e FFF7FEFF 		bl	dispatch_xrom
 32453              	.LVL2516:
 32454 0842 059B     		ldr	r3, [sp, #20]
 32455 0844 1A68     		ldr	r2, [r3]
 32456 0846 9CE4     		b	.L2171
 32457              	.LVL2517:
 32458              	.L2214:
5302:src/xeq.c     **** 			}
 32459              		.loc 1 5302 5 view .LVU8725
 32460              	.LBE4178:
 32461              	.LBE4183:
 32462              	.LBE4571:
 32463              	.LBB4572:
 32464              	.LBB4253:
3930:src/xeq.c     **** 		break;
 32465              		.loc 1 3930 3 is_stmt 1 view .LVU8726
 32466 0848 284B     		ldr	r3, .L2507+4
 32467 084a 0593     		str	r3, [sp, #20]
 32468 084c AAF10500 		sub	r0, r10, #5
 32469 0850 FFF7FEFF 		bl	digit
 32470              	.LVL2518:
3931:src/xeq.c     **** 
 32471              		.loc 1 3931 3 view .LVU8727
 32472 0854 059B     		ldr	r3, [sp, #20]
 32473 0856 1A68     		ldr	r2, [r3]
 32474 0858 93E4     		b	.L2171
 32475              	.LVL2519:
 32476              	.L2484:
3931:src/xeq.c     **** 
 32477              		.loc 1 3931 3 is_stmt 0 view .LVU8728
 32478              	.LBE4253:
 32479              	.LBE4572:
ARM GAS  /tmp/ccBFDvgN.s 			page 822


 32480              	.LBB4573:
 32481              	.LBB4423:
 32482              	.LBB4408:
 32483              	.LBB4397:
 32484              	.LBB4390:
 32485 085a FFF7FEFF 		bl	process_cmdline.part.0
 32486              	.LVL2520:
 32487 085e B2E5     		b	.L2259
 32488              	.LVL2521:
 32489              	.L2481:
3931:src/xeq.c     **** 
 32490              		.loc 1 3931 3 view .LVU8729
 32491              	.LBE4390:
 32492              	.LBE4397:
 32493              	.LBE4408:
 32494              	.LBE4423:
 32495              	.LBE4573:
 32496              	.LBB4574:
 32497              	.LBB4381:
 32498              	.LBB4372:
 32499              	.LBB4353:
 32500 0860 FFF7FEFF 		bl	process_cmdline.part.0
 32501              	.LVL2522:
 32502 0864 77E5     		b	.L2245
 32503              	.LVL2523:
 32504              	.L2487:
3931:src/xeq.c     **** 
 32505              		.loc 1 3931 3 view .LVU8730
 32506              	.LBE4353:
 32507              	.LBE4372:
 32508              	.LBE4381:
 32509              	.LBE4574:
 32510              	.LBB4575:
 32511              	.LBB4556:
 32512              	.LBB4545:
 32513              	.LBB4535:
 32514              	.LBB4528:
 32515 0866 FFF7FEFF 		bl	process_cmdline.part.0
 32516              	.LVL2524:
 32517 086a 82E6     		b	.L2288
 32518              	.LVL2525:
 32519              	.L2486:
3931:src/xeq.c     **** 
 32520              		.loc 1 3931 3 view .LVU8731
 32521              	.LBE4528:
 32522              	.LBE4535:
 32523              	.LBE4545:
 32524              	.LBE4556:
 32525              	.LBE4575:
 32526              	.LBB4576:
 32527              	.LBB4511:
 32528              	.LBB4506:
 32529              	.LBB4491:
 32530              	.LBB4484:
 32531 086c FFF7FEFF 		bl	process_cmdline.part.0
 32532              	.LVL2526:
 32533 0870 4AE6     		b	.L2283
ARM GAS  /tmp/ccBFDvgN.s 			page 823


 32534              	.LVL2527:
 32535              	.L2485:
3931:src/xeq.c     **** 
 32536              		.loc 1 3931 3 view .LVU8732
 32537              	.LBE4484:
 32538              	.LBE4491:
 32539              	.LBE4506:
 32540              	.LBE4511:
 32541              	.LBE4576:
 32542              	.LBB4577:
 32543              	.LBB4472:
 32544              	.LBB4456:
 32545              	.LBB4441:
 32546              	.LBB4434:
 32547 0872 FFF7FEFF 		bl	process_cmdline.part.0
 32548              	.LVL2528:
 32549 0876 07E6     		b	.L2275
 32550              	.LVL2529:
 32551              	.L2211:
3931:src/xeq.c     **** 
 32552              		.loc 1 3931 3 view .LVU8733
 32553              	.LBE4434:
 32554              	.LBE4441:
 32555              	.LBE4456:
 32556              	.LBE4472:
 32557              	.LBE4577:
 32558              	.LBB4578:
 32559              	.LBB4254:
4085:src/xeq.c     **** 		break;
 32560              		.loc 1 4085 3 is_stmt 1 view .LVU8734
4085:src/xeq.c     **** 		break;
 32561              		.loc 1 4085 53 is_stmt 0 view .LVU8735
 32562 0878 A5F11E01 		sub	r1, r5, #30
 32563 087c 1B4B     		ldr	r3, .L2507+4
 32564 087e 0593     		str	r3, [sp, #20]
4085:src/xeq.c     **** 		break;
 32565              		.loc 1 4085 3 view .LVU8736
 32566 0880 C9B2     		uxtb	r1, r1
 32567 0882 40F61C00 		movw	r0, #2076
 32568 0886 FFF7FEFF 		bl	do_tst
 32569              	.LVL2530:
4086:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
 32570              		.loc 1 4086 3 is_stmt 1 view .LVU8737
 32571 088a 059B     		ldr	r3, [sp, #20]
 32572 088c 1A68     		ldr	r2, [r3]
 32573 088e 78E4     		b	.L2171
 32574              	.L2212:
4076:src/xeq.c     **** 		break;
 32575              		.loc 1 4076 3 view .LVU8738
4076:src/xeq.c     **** 		break;
 32576              		.loc 1 4076 54 is_stmt 0 view .LVU8739
 32577 0890 A5F11701 		sub	r1, r5, #23
 32578 0894 154B     		ldr	r3, .L2507+4
 32579 0896 0593     		str	r3, [sp, #20]
4076:src/xeq.c     **** 		break;
 32580              		.loc 1 4076 3 view .LVU8740
 32581 0898 C9B2     		uxtb	r1, r1
ARM GAS  /tmp/ccBFDvgN.s 			page 824


 32582 089a 40F61B00 		movw	r0, #2075
 32583 089e FFF7FEFF 		bl	do_tst
 32584              	.LVL2531:
4077:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 32585              		.loc 1 4077 3 is_stmt 1 view .LVU8741
 32586 08a2 059B     		ldr	r3, [sp, #20]
 32587 08a4 1A68     		ldr	r2, [r3]
 32588 08a6 6CE4     		b	.L2171
 32589              	.L2213:
4058:src/xeq.c     **** 			bad_mode_error();
 32590              		.loc 1 4058 3 view .LVU8742
4058:src/xeq.c     **** 			bad_mode_error();
 32591              		.loc 1 4058 7 is_stmt 0 view .LVU8743
 32592 08a8 3B68     		ldr	r3, [r7]
 32593 08aa 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4058:src/xeq.c     **** 			bad_mode_error();
 32594              		.loc 1 4058 6 view .LVU8744
 32595 08ae DD07     		lsls	r5, r3, #31
 32596              	.LVL2532:
4058:src/xeq.c     **** 			bad_mode_error();
 32597              		.loc 1 4058 6 view .LVU8745
 32598 08b0 00F1E780 		bmi	.L2280
4062:src/xeq.c     **** 		clr_lift();
 32599              		.loc 1 4062 3 is_stmt 1 view .LVU8746
 32600              	.LBB4190:
 32601              	.LBI4190:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 32602              		.loc 1 1226 6 view .LVU8747
 32603              	.LBB4191:
1227:src/xeq.c     **** 
 32604              		.loc 1 1227 2 view .LVU8748
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32605              		.loc 1 1229 2 view .LVU8749
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32606              		.loc 1 1229 5 is_stmt 0 view .LVU8750
 32607 08b4 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32608 08b6 002B     		cmp	r3, #0
 32609 08b8 40F02582 		bne	.L2491
 32610              	.L2242:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32611              		.loc 1 1229 5 view .LVU8751
 32612              	.LBE4191:
 32613              	.LBE4190:
4063:src/xeq.c     **** 		setlastX();
 32614              		.loc 1 4063 3 is_stmt 1 view .LVU8752
 32615              	.LBB4193:
 32616              	.LBI4193:
 771:src/xeq.c     ****     State2.state_lift = 0;
 32617              		.loc 1 771 13 view .LVU8753
 32618              	.LBB4194:
 772:src/xeq.c     **** }
 32619              		.loc 1 772 5 view .LVU8754
 772:src/xeq.c     **** }
 32620              		.loc 1 772 23 is_stmt 0 view .LVU8755
 32621 08bc E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32622              	.LBE4194:
 32623              	.LBE4193:
ARM GAS  /tmp/ccBFDvgN.s 			page 825


 32624              	.LBB4197:
 32625              	.LBB4198:
 793:src/xeq.c     **** }
 32626              		.loc 1 793 2 view .LVU8756
 32627 08be 6421     		movs	r1, #100
 32628              	.LBE4198:
 32629              	.LBE4197:
 32630              	.LBB4201:
 32631              	.LBB4195:
 772:src/xeq.c     **** }
 32632              		.loc 1 772 23 view .LVU8757
 32633 08c0 6FF38613 		bfc	r3, #6, #1
 32634              	.LBE4195:
 32635              	.LBE4201:
 32636              	.LBB4202:
 32637              	.LBB4199:
 793:src/xeq.c     **** }
 32638              		.loc 1 793 2 view .LVU8758
 32639 08c4 6C20     		movs	r0, #108
 32640              	.LBE4199:
 32641              	.LBE4202:
 32642              	.LBB4203:
 32643              	.LBB4196:
 772:src/xeq.c     **** }
 32644              		.loc 1 772 23 view .LVU8759
 32645 08c6 E375     		strb	r3, [r4, #23]
 32646              	.LBE4196:
 32647              	.LBE4203:
4064:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
 32648              		.loc 1 4064 3 is_stmt 1 view .LVU8760
 32649              	.LBB4204:
 32650              	.LBI4197:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32651              		.loc 1 792 6 view .LVU8761
 32652              	.LBB4200:
 793:src/xeq.c     **** }
 32653              		.loc 1 793 2 view .LVU8762
 32654 08c8 FFF7FEFF 		bl	copyreg_n
 32655              	.LVL2533:
 32656              	.LBE4200:
 32657              	.LBE4204:
4065:src/xeq.c     **** 			sigma_plus();
 32658              		.loc 1 4065 3 view .LVU8763
4065:src/xeq.c     **** 			sigma_plus();
 32659              		.loc 1 4065 6 is_stmt 0 view .LVU8764
 32660 08cc BAF1150F 		cmp	r10, #21
 32661 08d0 00F0FB81 		beq	.L2492
4068:src/xeq.c     **** 		sigma_val(OP_sigmaN);
 32662              		.loc 1 4068 4 is_stmt 1 view .LVU8765
 32663 08d4 FFF7FEFF 		bl	sigma_minus
 32664              	.LVL2534:
 32665              	.L2244:
4069:src/xeq.c     **** 		break;
 32666              		.loc 1 4069 3 view .LVU8766
 32667 08d8 044B     		ldr	r3, .L2507+4
 32668 08da 0593     		str	r3, [sp, #20]
 32669 08dc 1D20     		movs	r0, #29
ARM GAS  /tmp/ccBFDvgN.s 			page 826


 32670 08de FFF7FEFF 		bl	sigma_val
 32671              	.LVL2535:
4070:src/xeq.c     **** 
 32672              		.loc 1 4070 3 view .LVU8767
 32673 08e2 059B     		ldr	r3, [sp, #20]
 32674 08e4 1A68     		ldr	r2, [r3]
 32675 08e6 4CE4     		b	.L2171
 32676              	.L2508:
 32677              		.align	2
 32678              	.L2507:
 32679 08e8 00000000 		.word	argcmds
 32680 08ec 00000000 		.word	Error
 32681 08f0 00000000 		.word	xrom
 32682 08f4 00000000 		.word	XromParams
 32683 08f8 00000000 		.word	RetStk
 32684 08fc 00000000 		.word	XromLocal
 32685 0900 00000000 		.word	xrom_size
 32686 0904 00000000 		.word	XromUserPc
 32687 0908 00000000 		.word	dyfuncs
 32688 090c 00000000 		.word	Running
 32689              	.LVL2536:
 32690              	.L2207:
4091:src/xeq.c     **** 		break;
 32691              		.loc 1 4091 3 view .LVU8768
4091:src/xeq.c     **** 		break;
 32692              		.loc 1 4091 49 is_stmt 0 view .LVU8769
 32693 0910 A5F12902 		sub	r2, r5, #41
 32694 0914 BA4B     		ldr	r3, .L2509
4091:src/xeq.c     **** 		break;
 32695              		.loc 1 4091 3 view .LVU8770
 32696 0916 BB49     		ldr	r1, .L2509+4
 32697 0918 BB48     		ldr	r0, .L2509+8
 32698 091a 0593     		str	r3, [sp, #20]
 32699 091c D2B2     		uxtb	r2, r2
 32700 091e FFF7FEFF 		bl	do_ztst
 32701              	.LVL2537:
4092:src/xeq.c     **** 
 32702              		.loc 1 4092 3 is_stmt 1 view .LVU8771
 32703 0922 059B     		ldr	r3, [sp, #20]
 32704 0924 1A68     		ldr	r2, [r3]
 32705 0926 2CE4     		b	.L2171
 32706              	.L2209:
4088:src/xeq.c     **** 		break;
 32707              		.loc 1 4088 3 view .LVU8772
4088:src/xeq.c     **** 		break;
 32708              		.loc 1 4088 49 is_stmt 0 view .LVU8773
 32709 0928 A5F12702 		sub	r2, r5, #39
 32710 092c B44B     		ldr	r3, .L2509
4088:src/xeq.c     **** 		break;
 32711              		.loc 1 4088 3 view .LVU8774
 32712 092e B649     		ldr	r1, .L2509+8
 32713 0930 B448     		ldr	r0, .L2509+4
 32714 0932 0593     		str	r3, [sp, #20]
 32715 0934 D2B2     		uxtb	r2, r2
 32716 0936 FFF7FEFF 		bl	do_ztst
 32717              	.LVL2538:
4089:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
ARM GAS  /tmp/ccBFDvgN.s 			page 827


 32718              		.loc 1 4089 3 is_stmt 1 view .LVU8775
 32719 093a 059B     		ldr	r3, [sp, #20]
 32720 093c 1A68     		ldr	r2, [r3]
 32721 093e 20E4     		b	.L2171
 32722              	.L2210:
4079:src/xeq.c     **** 		break;
 32723              		.loc 1 4079 3 view .LVU8776
 32724 0940 B149     		ldr	r1, .L2509+8
 32725 0942 AF4B     		ldr	r3, .L2509
 32726 0944 0593     		str	r3, [sp, #20]
4079:src/xeq.c     **** 		break;
 32727              		.loc 1 4079 49 is_stmt 0 view .LVU8777
 32728 0946 A5F12502 		sub	r2, r5, #37
4079:src/xeq.c     **** 		break;
 32729              		.loc 1 4079 3 view .LVU8778
 32730 094a D2B2     		uxtb	r2, r2
 32731 094c 0846     		mov	r0, r1
 32732 094e FFF7FEFF 		bl	do_ztst
 32733              	.LVL2539:
4080:src/xeq.c     **** 
 32734              		.loc 1 4080 3 is_stmt 1 view .LVU8779
 32735 0952 059B     		ldr	r3, [sp, #20]
 32736 0954 1A68     		ldr	r2, [r3]
 32737 0956 14E4     		b	.L2171
 32738              	.L2215:
3934:src/xeq.c     **** 			break;
 32739              		.loc 1 3934 3 view .LVU8780
3934:src/xeq.c     **** 			break;
 32740              		.loc 1 3934 7 is_stmt 0 view .LVU8781
 32741 0958 3B68     		ldr	r3, [r7]
 32742 095a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3934:src/xeq.c     **** 			break;
 32743              		.loc 1 3934 6 view .LVU8782
 32744 095e DA07     		lsls	r2, r3, #31
 32745 0960 3FF594AE 		bmi	.L2168
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32746              		.loc 1 3937 3 is_stmt 1 view .LVU8783
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32747              		.loc 1 3937 7 is_stmt 0 view .LVU8784
 32748 0964 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32749              		.loc 1 3937 6 view .LVU8785
 32750 0966 012B     		cmp	r3, #1
 32751 0968 3FF690AE 		bhi	.L2168
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32752              		.loc 1 3937 22 view .LVU8786
 32753 096c 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 32754 096e 002A     		cmp	r2, #0
 32755 0970 7FF48CAE 		bne	.L2168
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32756              		.loc 1 3937 54 view .LVU8787
 32757 0974 002B     		cmp	r3, #0
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32758              		.loc 1 3937 40 view .LVU8788
 32759 0976 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32760              		.loc 1 3937 54 view .LVU8789
ARM GAS  /tmp/ccBFDvgN.s 			page 828


 32761 0978 0CBF     		ite	eq
 32762 097a 0C22     		moveq	r2, #12
 32763 097c 0D22     		movne	r2, #13
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32764              		.loc 1 3937 37 view .LVU8790
 32765 097e 9A42     		cmp	r2, r3
 32766 0980 FFF684AE 		blt	.L2168
3938:src/xeq.c     **** #else
 32767              		.loc 1 3938 4 is_stmt 1 view .LVU8791
3938:src/xeq.c     **** #else
 32768              		.loc 1 3938 7 is_stmt 0 view .LVU8792
 32769 0984 002B     		cmp	r3, #0
 32770 0986 00F0F781 		beq	.L2222
3938:src/xeq.c     **** #else
 32771              		.loc 1 3938 37 view .LVU8793
 32772 098a 2344     		add	r3, r3, r4
3938:src/xeq.c     **** #else
 32773              		.loc 1 3938 27 view .LVU8794
 32774 098c DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 32775 098e 2D2B     		cmp	r3, #45
 32776 0990 00F0F281 		beq	.L2222
 32777              	.L2223:
3949:src/xeq.c     **** 			append_cmdline('.');
 32778              		.loc 1 3949 4 is_stmt 1 view .LVU8795
 32779              	.LBB4205:
 32780              	.LBB4206:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32781              		.loc 1 2646 10 is_stmt 0 view .LVU8796
 32782 0994 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32783              	.LBE4206:
 32784              	.LBE4205:
3949:src/xeq.c     **** 			append_cmdline('.');
 32785              		.loc 1 3949 14 view .LVU8797
 32786 0996 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 32787              	.LBB4210:
 32788              	.LBB4207:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32789              		.loc 1 2646 23 view .LVU8798
 32790 0998 5A1C     		adds	r2, r3, #1
 32791 099a D2B2     		uxtb	r2, r2
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32792              		.loc 1 2646 27 view .LVU8799
 32793 099c 2344     		add	r3, r3, r4
2647:src/xeq.c     **** }
 32794              		.loc 1 2647 25 view .LVU8800
 32795 099e A018     		adds	r0, r4, r2
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32796              		.loc 1 2646 23 view .LVU8801
 32797 09a0 2277     		strb	r2, [r4, #28]
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32798              		.loc 1 2646 27 view .LVU8802
 32799 09a2 2E22     		movs	r2, #46
 32800 09a4 83F82020 		strb	r2, [r3, #32]
 32801 09a8 954B     		ldr	r3, .L2509
2647:src/xeq.c     **** }
 32802              		.loc 1 2647 25 view .LVU8803
 32803 09aa 0022     		movs	r2, #0
ARM GAS  /tmp/ccBFDvgN.s 			page 829


 32804              	.LBE4207:
 32805              	.LBE4210:
3949:src/xeq.c     **** 			append_cmdline('.');
 32806              		.loc 1 3949 14 view .LVU8804
 32807 09ac 0131     		adds	r1, r1, #1
 32808              	.LBB4211:
 32809              	.LBB4208:
2647:src/xeq.c     **** }
 32810              		.loc 1 2647 25 view .LVU8805
 32811 09ae 80F82020 		strb	r2, [r0, #32]
 32812              	.LBE4208:
 32813              	.LBE4211:
3949:src/xeq.c     **** 			append_cmdline('.');
 32814              		.loc 1 3949 14 view .LVU8806
 32815 09b2 A177     		strb	r1, [r4, #30]
3950:src/xeq.c     **** 		}
 32816              		.loc 1 3950 4 is_stmt 1 view .LVU8807
 32817              	.LVL2540:
 32818              	.LBB4212:
 32819              	.LBI4205:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32820              		.loc 1 2645 13 view .LVU8808
 32821              	.LBB4209:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32822              		.loc 1 2646 2 view .LVU8809
2647:src/xeq.c     **** }
 32823              		.loc 1 2647 2 view .LVU8810
 32824 09b4 1A68     		ldr	r2, [r3]
2648:src/xeq.c     **** 
 32825              		.loc 1 2648 1 is_stmt 0 view .LVU8811
 32826 09b6 FFF7E4BB 		b	.L2171
 32827              	.LVL2541:
 32828              	.L2216:
2648:src/xeq.c     **** 
 32829              		.loc 1 2648 1 view .LVU8812
 32830              	.LBE4209:
 32831              	.LBE4212:
4002:src/xeq.c     **** 			cmdlinechs();
 32832              		.loc 1 4002 3 is_stmt 1 view .LVU8813
4002:src/xeq.c     **** 			cmdlinechs();
 32833              		.loc 1 4002 7 is_stmt 0 view .LVU8814
 32834 09ba 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
4002:src/xeq.c     **** 			cmdlinechs();
 32835              		.loc 1 4002 6 view .LVU8815
 32836 09bc 002A     		cmp	r2, #0
 32837 09be 40F06C81 		bne	.L2493
4004:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32838              		.loc 1 4004 8 is_stmt 1 view .LVU8816
4004:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32839              		.loc 1 4004 12 is_stmt 0 view .LVU8817
 32840 09c2 3B68     		ldr	r3, [r7]
 32841 09c4 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4004:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32842              		.loc 1 4004 11 view .LVU8818
 32843 09c8 DB07     		lsls	r3, r3, #31
 32844 09ca 40F15881 		bpl	.L2229
4005:src/xeq.c     **** 			set_lift();
ARM GAS  /tmp/ccBFDvgN.s 			page 830


 32845              		.loc 1 4005 4 is_stmt 1 view .LVU8819
 32846              	.LBB4213:
 32847              	.LBI4213:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32848              		.loc 1 1442 15 view .LVU8820
 32849              	.LBB4214:
1443:src/xeq.c     **** }
 32850              		.loc 1 1443 2 view .LVU8821
1443:src/xeq.c     **** }
 32851              		.loc 1 1443 9 is_stmt 0 view .LVU8822
 32852 09ce 6420     		movs	r0, #100
 32853 09d0 FFF7FEFF 		bl	get_reg_n_int
 32854              	.LVL2542:
 32855              	.LBE4214:
 32856              	.LBE4213:
4005:src/xeq.c     **** 			set_lift();
 32857              		.loc 1 4005 4 view .LVU8823
 32858 09d4 FFF7FEFF 		bl	intChs
 32859              	.LVL2543:
 32860 09d8 FFF7FEFF 		bl	setX_int
 32861              	.LVL2544:
 32862 09dc FFF7CBBB 		b	.L2445
 32863              	.L2219:
4037:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32864              		.loc 1 4037 5 is_stmt 1 view .LVU8824
4037:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32865              		.loc 1 4037 9 is_stmt 0 view .LVU8825
 32866 09e0 3B68     		ldr	r3, [r7]
 32867 09e2 93F8AD37 		ldrb	r3, [r3, #1965]	@ zero_extendqisi2
4037:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32868              		.loc 1 4037 8 view .LVU8826
 32869 09e6 13F0020F 		tst	r3, #2
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32870              		.loc 1 4038 10 view .LVU8827
 32871 09ea 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
4037:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32872              		.loc 1 4037 8 view .LVU8828
 32873 09ec 00F02681 		beq	.L2235
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32874              		.loc 1 4038 7 is_stmt 1 view .LVU8829
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32875              		.loc 1 4038 10 is_stmt 0 view .LVU8830
 32876 09f0 002B     		cmp	r3, #0
 32877 09f2 40F05F81 		bne	.L2433
 32878 09f6 DFF824A2 		ldr	r10, .L2509+28
 32879              	.LVL2545:
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32880              		.loc 1 4038 10 view .LVU8831
 32881 09fa 844D     		ldr	r5, .L2509+12
 32882              	.LVL2546:
 32883              	.L2236:
4043:src/xeq.c     **** 		      if ( (XromRunning || Running) ) {//JMTEST Explicitly including standard functionality if co
 32884              		.loc 1 4043 9 is_stmt 1 view .LVU8832
 32885 09fc FFF7FEFF 		bl	lift
 32886              	.LVL2547:
4044:src/xeq.c     **** 			clr_lift();
 32887              		.loc 1 4044 9 view .LVU8833
ARM GAS  /tmp/ccBFDvgN.s 			page 831


4044:src/xeq.c     **** 			clr_lift();
 32888              		.loc 1 4044 27 is_stmt 0 view .LVU8834
 32889 0a00 2A68     		ldr	r2, [r5]
 32890 0a02 DAF80030 		ldr	r3, [r10]
 32891 0a06 1343     		orrs	r3, r2, r3
 32892 0a08 3FF440AE 		beq	.L2168
 32893              	.L2448:
4052:src/xeq.c     **** 		  }
 32894              		.loc 1 4052 7 is_stmt 1 view .LVU8835
 32895              	.LBB4215:
 32896              	.LBI4215:
 771:src/xeq.c     ****     State2.state_lift = 0;
 32897              		.loc 1 771 13 view .LVU8836
 32898              	.LBB4216:
 772:src/xeq.c     **** }
 32899              		.loc 1 772 5 view .LVU8837
 772:src/xeq.c     **** }
 32900              		.loc 1 772 23 is_stmt 0 view .LVU8838
 32901 0a0c E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 32902 0a0e 7C4B     		ldr	r3, .L2509
 32903 0a10 6FF38612 		bfc	r2, #6, #1
 32904 0a14 E275     		strb	r2, [r4, #23]
 32905 0a16 1A68     		ldr	r2, [r3]
 773:src/xeq.c     **** 
 32906              		.loc 1 773 1 view .LVU8839
 32907 0a18 FFF7B3BB 		b	.L2171
 32908              	.LVL2548:
 32909              	.L2217:
 773:src/xeq.c     **** 
 32910              		.loc 1 773 1 view .LVU8840
 32911              	.LBE4216:
 32912              	.LBE4215:
3955:src/xeq.c     **** 			break;
 32913              		.loc 1 3955 3 is_stmt 1 view .LVU8841
 32914              	.LBB4217:
3963:src/xeq.c     **** #endif
 32915              		.loc 1 3963 4 view .LVU8842
3966:src/xeq.c     **** 				if (eex_pi) {
 32916              		.loc 1 3966 4 view .LVU8843
3966:src/xeq.c     **** 				if (eex_pi) {
 32917              		.loc 1 3966 7 is_stmt 0 view .LVU8844
 32918 0a1c A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 32919 0a1e 022B     		cmp	r3, #2
 32920 0a20 3FF434AE 		beq	.L2168
3981:src/xeq.c     **** 				break;
 32921              		.loc 1 3981 4 is_stmt 1 view .LVU8845
 32922              	.LBE4217:
3955:src/xeq.c     **** 			break;
 32923              		.loc 1 3955 7 is_stmt 0 view .LVU8846
 32924 0a24 3B68     		ldr	r3, [r7]
 32925              	.LBB4220:
3981:src/xeq.c     **** 				break;
 32926              		.loc 1 3981 7 view .LVU8847
 32927 0a26 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 32928              	.LBE4220:
3955:src/xeq.c     **** 			break;
 32929              		.loc 1 3955 7 view .LVU8848
ARM GAS  /tmp/ccBFDvgN.s 			page 832


 32930 0a28 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 32931 0a2c 03F00103 		and	r3, r3, #1
 32932              	.LBB4221:
3981:src/xeq.c     **** 				break;
 32933              		.loc 1 3981 7 view .LVU8849
 32934 0a30 1343     		orrs	r3, r3, r2
 32935 0a32 7FF42BAE 		bne	.L2168
3981:src/xeq.c     **** 				break;
 32936              		.loc 1 3981 22 view .LVU8850
 32937 0a36 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3981:src/xeq.c     **** 				break;
 32938              		.loc 1 3981 19 view .LVU8851
 32939 0a38 122B     		cmp	r3, #18
 32940 0a3a 3FF627AE 		bhi	.L2168
3983:src/xeq.c     **** 				// empty command line: enter pi
 32941              		.loc 1 3983 4 is_stmt 1 view .LVU8852
3994:src/xeq.c     **** 				digit(1);
 32942              		.loc 1 3994 4 view .LVU8853
3994:src/xeq.c     **** 				digit(1);
 32943              		.loc 1 3994 7 is_stmt 0 view .LVU8854
 32944 0a3e 002B     		cmp	r3, #0
 32945 0a40 00F09E81 		beq	.L2494
 32946              	.L2224:
3996:src/xeq.c     **** 			append_cmdline('E');
 32947              		.loc 1 3996 4 is_stmt 1 view .LVU8855
3996:src/xeq.c     **** 			append_cmdline('E');
 32948              		.loc 1 3996 17 is_stmt 0 view .LVU8856
 32949 0a44 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3996:src/xeq.c     **** 			append_cmdline('E');
 32950              		.loc 1 3996 15 view .LVU8857
 32951 0a46 6377     		strb	r3, [r4, #29]
3997:src/xeq.c     **** 		}
 32952              		.loc 1 3997 4 is_stmt 1 view .LVU8858
 32953              	.LVL2549:
 32954              	.LBB4218:
 32955              	.LBI4218:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32956              		.loc 1 2645 13 view .LVU8859
 32957              	.LBB4219:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32958              		.loc 1 2646 2 view .LVU8860
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32959              		.loc 1 2646 23 is_stmt 0 view .LVU8861
 32960 0a48 591C     		adds	r1, r3, #1
 32961 0a4a C9B2     		uxtb	r1, r1
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32962              		.loc 1 2646 27 view .LVU8862
 32963 0a4c E218     		adds	r2, r4, r3
2647:src/xeq.c     **** }
 32964              		.loc 1 2647 25 view .LVU8863
 32965 0a4e 6018     		adds	r0, r4, r1
 32966 0a50 6B4B     		ldr	r3, .L2509
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32967              		.loc 1 2646 23 view .LVU8864
 32968 0a52 2177     		strb	r1, [r4, #28]
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32969              		.loc 1 2646 27 view .LVU8865
ARM GAS  /tmp/ccBFDvgN.s 			page 833


 32970 0a54 4521     		movs	r1, #69
 32971 0a56 82F82010 		strb	r1, [r2, #32]
2647:src/xeq.c     **** }
 32972              		.loc 1 2647 2 is_stmt 1 view .LVU8866
2647:src/xeq.c     **** }
 32973              		.loc 1 2647 25 is_stmt 0 view .LVU8867
 32974 0a5a 0022     		movs	r2, #0
 32975 0a5c 80F82020 		strb	r2, [r0, #32]
 32976 0a60 1A68     		ldr	r2, [r3]
2648:src/xeq.c     **** 
 32977              		.loc 1 2648 1 view .LVU8868
 32978 0a62 FFF78EBB 		b	.L2171
 32979              	.LVL2550:
 32980              	.L2218:
2648:src/xeq.c     **** 
 32981              		.loc 1 2648 1 view .LVU8869
 32982              	.LBE4219:
 32983              	.LBE4218:
 32984              	.LBE4221:
4018:src/xeq.c     **** 			illegal(op);
 32985              		.loc 1 4018 3 is_stmt 1 view .LVU8870
4018:src/xeq.c     **** 			illegal(op);
 32986              		.loc 1 4018 7 is_stmt 0 view .LVU8871
 32987 0a66 DFF8B4A1 		ldr	r10, .L2509+28
 32988              	.LVL2551:
4018:src/xeq.c     **** 			illegal(op);
 32989              		.loc 1 4018 6 view .LVU8872
 32990 0a6a DAF80030 		ldr	r3, [r10]
 32991 0a6e 002B     		cmp	r3, #0
 32992 0a70 00F0E980 		beq	.L2230
4019:src/xeq.c     **** 		else if (CmdLineLength) {
 32993              		.loc 1 4019 4 is_stmt 1 view .LVU8873
4019:src/xeq.c     **** 		else if (CmdLineLength) {
 32994              		.loc 1 4019 4 view .LVU8874
 32995              	.LVL2552:
 32996              	.LBB4222:
 32997              	.LBI4222:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32998              		.loc 1 546 5 view .LVU8875
 32999              	.LBB4223:
 547:src/xeq.c     **** 		Error = e;
 33000              		.loc 1 547 2 view .LVU8876
 547:src/xeq.c     **** 		Error = e;
 33001              		.loc 1 547 12 is_stmt 0 view .LVU8877
 33002 0a74 624B     		ldr	r3, .L2509
 33003 0a76 1868     		ldr	r0, [r3]
 547:src/xeq.c     **** 		Error = e;
 33004              		.loc 1 547 5 view .LVU8878
 33005 0a78 0028     		cmp	r0, #0
 33006 0a7a 3FF4A4AB 		beq	.L2176
 33007 0a7e FFF7A4BB 		b	.L2307
 33008              	.LVL2553:
 33009              	.L2280:
 547:src/xeq.c     **** 		Error = e;
 33010              		.loc 1 547 5 view .LVU8879
 33011              	.LBE4223:
 33012              	.LBE4222:
ARM GAS  /tmp/ccBFDvgN.s 			page 834


 33013              	.LBE4254:
 33014              	.LBE4578:
 33015              	.LBB4579:
 33016              	.LBB4473:
4856:src/xeq.c     **** 		}
 33017              		.loc 1 4856 5 is_stmt 1 view .LVU8880
 33018              	.LBB4457:
 33019              	.LBI4457:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33020              		.loc 1 575 6 view .LVU8881
 33021              	.LBE4457:
 33022              	.LBE4473:
 33023              	.LBE4579:
 576:src/xeq.c     **** }
 33024              		.loc 1 576 2 view .LVU8882
 33025              	.LBB4580:
 33026              	.LBB4474:
 33027              	.LBB4460:
 33028              	.LBB4458:
 33029              	.LBI4458:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33030              		.loc 1 546 5 view .LVU8883
 33031              	.LBB4459:
 547:src/xeq.c     **** 		Error = e;
 33032              		.loc 1 547 2 view .LVU8884
 547:src/xeq.c     **** 		Error = e;
 33033              		.loc 1 547 12 is_stmt 0 view .LVU8885
 33034 0a82 5F4B     		ldr	r3, .L2509
 33035 0a84 1868     		ldr	r0, [r3]
 547:src/xeq.c     **** 		Error = e;
 33036              		.loc 1 547 5 view .LVU8886
 33037 0a86 0028     		cmp	r0, #0
 33038 0a88 7FF4EAAD 		bne	.L2440
 33039              	.LVL2554:
 547:src/xeq.c     **** 		Error = e;
 33040              		.loc 1 547 5 view .LVU8887
 33041              	.LBE4459:
 33042              	.LBE4458:
 33043              	.LBE4460:
 33044              	.LBE4474:
 33045              	.LBE4580:
 33046              	.LBB4581:
 33047              	.LBB4255:
 33048              	.LBB4224:
 33049              	.LBB4225:
 33050              	.LBB4226:
 33051              	.LBB4227:
 33052              	.LBI4227:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33053              		.loc 1 546 5 is_stmt 1 view .LVU8888
 33054              	.LBB4228:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33055              		.loc 1 548 3 view .LVU8889
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33056              		.loc 1 548 9 is_stmt 0 view .LVU8890
 33057 0a8c 0D20     		movs	r0, #13
 33058 0a8e DFF88CA1 		ldr	r10, .L2509+28
ARM GAS  /tmp/ccBFDvgN.s 			page 835


 33059 0a92 1860     		str	r0, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33060              		.loc 1 549 3 is_stmt 1 view .LVU8891
 33061 0a94 FFF799BB 		b	.L2307
 33062              	.LVL2555:
 33063              	.L2290:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33064              		.loc 1 549 3 is_stmt 0 view .LVU8892
 33065              	.LBE4228:
 33066              	.LBE4227:
 33067              	.LBE4226:
 33068              	.LBE4225:
 33069              	.LBE4224:
 33070              	.LBE4255:
 33071              	.LBE4581:
 33072              	.LBB4582:
 33073              	.LBB4557:
4808:src/xeq.c     **** 	} else
 33074              		.loc 1 4808 4 is_stmt 1 view .LVU8893
 33075              	.LBB4546:
 33076              	.LBI4546:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33077              		.loc 1 575 6 view .LVU8894
 33078              	.LBE4546:
 33079              	.LBE4557:
 33080              	.LBE4582:
 576:src/xeq.c     **** }
 33081              		.loc 1 576 2 view .LVU8895
 33082              	.LBB4583:
 33083              	.LBB4558:
 33084              	.LBB4551:
 33085              	.LBB4547:
 33086              	.LBI4547:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33087              		.loc 1 546 5 view .LVU8896
 33088              	.LBB4548:
 547:src/xeq.c     **** 		Error = e;
 33089              		.loc 1 547 2 view .LVU8897
 547:src/xeq.c     **** 		Error = e;
 33090              		.loc 1 547 12 is_stmt 0 view .LVU8898
 33091 0a98 594B     		ldr	r3, .L2509
 33092 0a9a 1A68     		ldr	r2, [r3]
 547:src/xeq.c     **** 		Error = e;
 33093              		.loc 1 547 5 view .LVU8899
 33094 0a9c 002A     		cmp	r2, #0
 33095 0a9e 7FF43DAB 		bne	.L2182
 33096              	.LVL2556:
 33097              	.LBB4549:
 33098              	.LBI4549:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33099              		.loc 1 546 5 is_stmt 1 view .LVU8900
 33100              	.LBB4550:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33101              		.loc 1 548 3 view .LVU8901
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33102              		.loc 1 548 9 is_stmt 0 view .LVU8902
 33103 0aa2 0D22     		movs	r2, #13
ARM GAS  /tmp/ccBFDvgN.s 			page 836


 33104 0aa4 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33105              		.loc 1 549 3 is_stmt 1 view .LVU8903
 33106              	.LVL2557:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33107              		.loc 1 549 3 is_stmt 0 view .LVU8904
 33108              	.LBE4550:
 33109              	.LBE4549:
 33110              	.LBE4548:
 33111              	.LBE4547:
 33112              	.LBE4551:
4810:src/xeq.c     **** }
 33113              		.loc 1 4810 3 is_stmt 1 view .LVU8905
 33114              	.LBE4558:
 33115              	.LBE4583:
5379:src/xeq.c     **** 		}
 33116              		.loc 1 5379 12 view .LVU8906
5389:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 33117              		.loc 1 5389 2 view .LVU8907
 33118 0aa6 FFF739BB 		b	.L2182
 33119              	.LVL2558:
 33120              	.L2298:
5413:src/xeq.c     **** 						// Need space for double precision stack
 33121              		.loc 1 5413 34 is_stmt 0 discriminator 1 view .LVU8908
 33122 0aaa 9CF8CF17 		ldrb	r1, [ip, #1999]	@ zero_extendqisi2
 33123 0aae 0B29     		cmp	r1, #11
 33124 0ab0 40F29380 		bls	.L2300
5417:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33125              		.loc 1 5417 6 is_stmt 1 view .LVU8909
5417:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33126              		.loc 1 5417 20 is_stmt 0 view .LVU8910
 33127 0ab4 68F3C712 		bfi	r2, r8, #7, #1
 33128 0ab8 6A70     		strb	r2, [r5, #1]
5418:src/xeq.c     **** 						UState.mode_double = 1;
 33129              		.loc 1 5418 6 is_stmt 1 view .LVU8911
 33130 0aba 05E6     		b	.L2299
 33131              	.LVL2559:
 33132              	.L2277:
 33133              	.LBB4584:
 33134              	.LBB4475:
4841:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33135              		.loc 1 4841 4 view .LVU8912
4841:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33136              		.loc 1 4841 10 is_stmt 0 view .LVU8913
 33137 0abc 544B     		ldr	r3, .L2509+16
 33138 0abe 05EB8505 		add	r5, r5, r5, lsl #2
 33139              	.LVL2560:
4841:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33140              		.loc 1 4841 10 view .LVU8914
 33141 0ac2 53F82550 		ldr	r5, [r3, r5, lsl #2]
4841:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33142              		.loc 1 4841 7 view .LVU8915
 33143 0ac6 002D     		cmp	r5, #0
 33144 0ac8 DBD0     		beq	.L2280
 33145              	.LBB4461:
4842:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33146              		.loc 1 4842 5 is_stmt 1 view .LVU8916
ARM GAS  /tmp/ccBFDvgN.s 			page 837


 33147              	.LVL2561:
4843:src/xeq.c     **** 					return;
 33148              		.loc 1 4843 5 view .LVU8917
4843:src/xeq.c     **** 					return;
 33149              		.loc 1 4843 9 is_stmt 0 view .LVU8918
 33150 0aca 2846     		mov	r0, r5
 33151 0acc FFF7FEFF 		bl	dispatch_xrom
 33152              	.LVL2562:
4843:src/xeq.c     **** 					return;
 33153              		.loc 1 4843 8 view .LVU8919
 33154 0ad0 0028     		cmp	r0, #0
 33155 0ad2 7FF4DBAD 		bne	.L2168
 33156              	.LBB4462:
4846:src/xeq.c     **** 					getXYZ(&x, &y, &z);
 33157              		.loc 1 4846 6 is_stmt 1 view .LVU8920
4847:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 33158              		.loc 1 4847 6 view .LVU8921
 33159 0ad6 30AA     		add	r2, sp, #192
 33160 0ad8 27A9     		add	r1, sp, #156
 33161 0ada 1EA8     		add	r0, sp, #120
4848:src/xeq.c     **** 						set_NaN(&r);
 33162              		.loc 1 4848 18 is_stmt 0 view .LVU8922
 33163 0adc 0DF1E40A 		add	r10, sp, #228
4847:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 33164              		.loc 1 4847 6 view .LVU8923
 33165 0ae0 FFF7FEFF 		bl	getXYZ
 33166              	.LVL2563:
4848:src/xeq.c     **** 						set_NaN(&r);
 33167              		.loc 1 4848 6 is_stmt 1 view .LVU8924
4848:src/xeq.c     **** 						set_NaN(&r);
 33168              		.loc 1 4848 18 is_stmt 0 view .LVU8925
 33169 0ae4 1EAB     		add	r3, sp, #120
 33170 0ae6 27AA     		add	r2, sp, #156
 33171 0ae8 30A9     		add	r1, sp, #192
 33172 0aea 5046     		mov	r0, r10
 33173 0aec A847     		blx	r5
 33174              	.LVL2564:
4848:src/xeq.c     **** 						set_NaN(&r);
 33175              		.loc 1 4848 9 view .LVU8926
 33176 0aee 0028     		cmp	r0, #0
 33177 0af0 00F01C81 		beq	.L2495
 33178              	.L2282:
4850:src/xeq.c     **** 					lower();
 33179              		.loc 1 4850 6 is_stmt 1 view .LVU8927
 33180              	.LBB4463:
 33181              	.LBI4463:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33182              		.loc 1 792 6 view .LVU8928
 33183              	.LBB4464:
 793:src/xeq.c     **** }
 33184              		.loc 1 793 2 view .LVU8929
 33185 0af4 424B     		ldr	r3, .L2509
 33186 0af6 0593     		str	r3, [sp, #20]
 33187 0af8 6421     		movs	r1, #100
 33188 0afa 6C20     		movs	r0, #108
 33189 0afc FFF7FEFF 		bl	copyreg_n
 33190              	.LVL2565:
ARM GAS  /tmp/ccBFDvgN.s 			page 838


 33191              	.LBE4464:
 33192              	.LBE4463:
4851:src/xeq.c     **** 					lower();
 33193              		.loc 1 4851 6 view .LVU8930
 33194 0b00 FFF7FEFF 		bl	lower
 33195              	.LVL2566:
 33196              	.L2451:
4852:src/xeq.c     **** 					setX(&r);
 33197              		.loc 1 4852 6 view .LVU8931
 33198 0b04 FFF7FEFF 		bl	lower
 33199              	.LVL2567:
 33200              	.L2453:
4853:src/xeq.c     **** 				}
 33201              		.loc 1 4853 6 view .LVU8932
 33202              	.LBB4465:
 33203              	.LBI4465:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 33204              		.loc 1 828 6 view .LVU8933
 33205              	.LBB4466:
 829:src/xeq.c     **** }
 33206              		.loc 1 829 2 view .LVU8934
 33207 0b08 5146     		mov	r1, r10
 33208 0b0a 6420     		movs	r0, #100
 33209 0b0c FFF7FEFF 		bl	setRegister
 33210              	.LVL2568:
 829:src/xeq.c     **** }
 33211              		.loc 1 829 2 is_stmt 0 view .LVU8935
 33212 0b10 059B     		ldr	r3, [sp, #20]
 33213 0b12 1A68     		ldr	r2, [r3]
 33214              	.LBE4466:
 33215              	.LBE4465:
 33216              	.LBE4462:
 33217              	.LBE4461:
 33218 0b14 FFF735BB 		b	.L2171
 33219              	.LVL2569:
 33220              	.L2261:
 829:src/xeq.c     **** }
 33221              		.loc 1 829 2 view .LVU8936
 33222              	.LBE4475:
 33223              	.LBE4584:
 33224              	.LBB4585:
 33225              	.LBB4424:
4689:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33226              		.loc 1 4689 4 is_stmt 1 view .LVU8937
4689:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33227              		.loc 1 4689 10 is_stmt 0 view .LVU8938
 33228 0b18 3E4B     		ldr	r3, .L2509+20
 33229 0b1a 05EB4505 		add	r5, r5, r5, lsl #1
 33230              	.LVL2570:
4689:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33231              		.loc 1 4689 10 view .LVU8939
 33232 0b1e 53F83550 		ldr	r5, [r3, r5, lsl #3]
4689:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33233              		.loc 1 4689 7 view .LVU8940
 33234 0b22 002D     		cmp	r5, #0
 33235 0b24 ADD0     		beq	.L2280
 33236              	.LBB4409:
ARM GAS  /tmp/ccBFDvgN.s 			page 839


4690:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33237              		.loc 1 4690 5 is_stmt 1 view .LVU8941
 33238              	.LVL2571:
4691:src/xeq.c     **** 					return;
 33239              		.loc 1 4691 5 view .LVU8942
4691:src/xeq.c     **** 					return;
 33240              		.loc 1 4691 9 is_stmt 0 view .LVU8943
 33241 0b26 2846     		mov	r0, r5
 33242 0b28 FFF7FEFF 		bl	dispatch_xrom
 33243              	.LVL2572:
4691:src/xeq.c     **** 					return;
 33244              		.loc 1 4691 8 view .LVU8944
 33245 0b2c 0028     		cmp	r0, #0
 33246 0b2e 7FF4ADAD 		bne	.L2168
 33247              	.LBB4410:
4694:src/xeq.c     **** 					getX(&x);
 33248              		.loc 1 4694 6 is_stmt 1 view .LVU8945
4695:src/xeq.c     **** 					if (NULL == fp(&r, &x))
 33249              		.loc 1 4695 6 view .LVU8946
 33250              	.LVL2573:
 33251              	.LBB4411:
 33252              	.LBI4411:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33253              		.loc 1 824 12 view .LVU8947
 33254              	.LBB4412:
 825:src/xeq.c     **** }
 33255              		.loc 1 825 2 view .LVU8948
 825:src/xeq.c     **** }
 33256              		.loc 1 825 9 is_stmt 0 view .LVU8949
 33257 0b32 6421     		movs	r1, #100
 33258 0b34 30A8     		add	r0, sp, #192
 33259              	.LVL2574:
 825:src/xeq.c     **** }
 33260              		.loc 1 825 9 view .LVU8950
 33261              	.LBE4412:
 33262              	.LBE4411:
4696:src/xeq.c     **** 						set_NaN(&r);
 33263              		.loc 1 4696 18 view .LVU8951
 33264 0b36 0DF1E40A 		add	r10, sp, #228
 33265              	.LBB4414:
 33266              	.LBB4413:
 825:src/xeq.c     **** }
 33267              		.loc 1 825 9 view .LVU8952
 33268 0b3a FFF7FEFF 		bl	getRegister
 33269              	.LVL2575:
 825:src/xeq.c     **** }
 33270              		.loc 1 825 9 view .LVU8953
 33271              	.LBE4413:
 33272              	.LBE4414:
4696:src/xeq.c     **** 						set_NaN(&r);
 33273              		.loc 1 4696 6 is_stmt 1 view .LVU8954
4696:src/xeq.c     **** 						set_NaN(&r);
 33274              		.loc 1 4696 18 is_stmt 0 view .LVU8955
 33275 0b3e 30A9     		add	r1, sp, #192
 33276 0b40 5046     		mov	r0, r10
 33277 0b42 A847     		blx	r5
 33278              	.LVL2576:
ARM GAS  /tmp/ccBFDvgN.s 			page 840


4696:src/xeq.c     **** 						set_NaN(&r);
 33279              		.loc 1 4696 9 view .LVU8956
 33280 0b44 0028     		cmp	r0, #0
 33281 0b46 00F0EA80 		beq	.L2496
 33282              	.L2266:
4698:src/xeq.c     **** 					setX(&r);
 33283              		.loc 1 4698 6 is_stmt 1 view .LVU8957
 33284              	.LBB4415:
 33285              	.LBI4415:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33286              		.loc 1 792 6 view .LVU8958
 33287              	.LBB4416:
 793:src/xeq.c     **** }
 33288              		.loc 1 793 2 view .LVU8959
 33289 0b4a 2D4B     		ldr	r3, .L2509
 33290 0b4c 0593     		str	r3, [sp, #20]
 33291 0b4e 6421     		movs	r1, #100
 33292 0b50 6C20     		movs	r0, #108
 33293 0b52 FFF7FEFF 		bl	copyreg_n
 33294              	.LVL2577:
 33295              	.LBE4416:
 33296              	.LBE4415:
4699:src/xeq.c     **** 				}
 33297              		.loc 1 4699 6 view .LVU8960
 33298              	.LBB4417:
 33299              	.LBI4417:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 33300              		.loc 1 828 6 view .LVU8961
 33301              	.LBB4418:
 829:src/xeq.c     **** }
 33302              		.loc 1 829 2 view .LVU8962
 33303 0b56 D7E7     		b	.L2453
 33304              	.LVL2578:
 33305              	.L2269:
 829:src/xeq.c     **** }
 33306              		.loc 1 829 2 is_stmt 0 view .LVU8963
 33307              	.LBE4418:
 33308              	.LBE4417:
 33309              	.LBE4410:
 33310              	.LBE4409:
 33311              	.LBE4424:
 33312              	.LBE4585:
 33313              	.LBB4586:
 33314              	.LBB4309:
4765:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33315              		.loc 1 4765 4 is_stmt 1 view .LVU8964
4765:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33316              		.loc 1 4765 10 is_stmt 0 view .LVU8965
 33317 0b58 2F4B     		ldr	r3, .L2509+24
 33318 0b5a 05EB4505 		add	r5, r5, r5, lsl #1
 33319              	.LVL2579:
4765:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33320              		.loc 1 4765 10 view .LVU8966
 33321 0b5e 53F83550 		ldr	r5, [r3, r5, lsl #3]
4765:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33322              		.loc 1 4765 7 view .LVU8967
 33323 0b62 002D     		cmp	r5, #0
ARM GAS  /tmp/ccBFDvgN.s 			page 841


 33324 0b64 8DD0     		beq	.L2280
 33325              	.LBB4286:
4766:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33326              		.loc 1 4766 5 is_stmt 1 view .LVU8968
 33327              	.LVL2580:
4767:src/xeq.c     **** 					return;
 33328              		.loc 1 4767 5 view .LVU8969
4767:src/xeq.c     **** 					return;
 33329              		.loc 1 4767 9 is_stmt 0 view .LVU8970
 33330 0b66 2846     		mov	r0, r5
 33331 0b68 FFF7FEFF 		bl	dispatch_xrom
 33332              	.LVL2581:
4767:src/xeq.c     **** 					return;
 33333              		.loc 1 4767 8 view .LVU8971
 33334 0b6c 0028     		cmp	r0, #0
 33335 0b6e 7FF48DAD 		bne	.L2168
 33336              	.LBB4287:
4770:src/xeq.c     **** 					getXY(&x, &y);
 33337              		.loc 1 4770 6 is_stmt 1 view .LVU8972
4771:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
 33338              		.loc 1 4771 6 view .LVU8973
 33339              	.LVL2582:
 33340              	.LBB4288:
 33341              	.LBI4288:
 854:src/xeq.c     **** 	getX(x);
 33342              		.loc 1 854 6 view .LVU8974
 33343              	.LBE4288:
 33344              	.LBE4287:
 33345              	.LBE4286:
 33346              	.LBE4309:
 33347              	.LBE4586:
 855:src/xeq.c     **** 	getY(y);
 33348              		.loc 1 855 2 view .LVU8975
 33349              	.LBB4587:
 33350              	.LBB4310:
 33351              	.LBB4303:
 33352              	.LBB4300:
 33353              	.LBB4295:
 33354              	.LBB4289:
 33355              	.LBI4289:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33356              		.loc 1 824 12 view .LVU8976
 33357              	.LBB4290:
 825:src/xeq.c     **** }
 33358              		.loc 1 825 2 view .LVU8977
 825:src/xeq.c     **** }
 33359              		.loc 1 825 9 is_stmt 0 view .LVU8978
 33360 0b72 6421     		movs	r1, #100
 33361 0b74 27A8     		add	r0, sp, #156
 33362              	.LVL2583:
 825:src/xeq.c     **** }
 33363              		.loc 1 825 9 view .LVU8979
 33364 0b76 FFF7FEFF 		bl	getRegister
 33365              	.LVL2584:
 825:src/xeq.c     **** }
 33366              		.loc 1 825 9 view .LVU8980
 33367              	.LBE4290:
ARM GAS  /tmp/ccBFDvgN.s 			page 842


 33368              	.LBE4289:
 33369              	.LBE4295:
 33370              	.LBE4300:
 33371              	.LBE4303:
 33372              	.LBE4310:
 33373              	.LBE4587:
 856:src/xeq.c     **** }
 33374              		.loc 1 856 2 is_stmt 1 view .LVU8981
 33375              	.LBB4588:
 33376              	.LBB4311:
 33377              	.LBB4304:
 33378              	.LBB4301:
 33379              	.LBB4296:
 33380              	.LBB4291:
 33381              	.LBI4291:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 33382              		.loc 1 832 6 view .LVU8982
 33383              	.LBB4292:
 833:src/xeq.c     **** }
 33384              		.loc 1 833 2 view .LVU8983
 33385              	.LBE4292:
 33386              	.LBE4291:
 33387              	.LBE4296:
4772:src/xeq.c     **** 						set_NaN(&r);
 33388              		.loc 1 4772 18 is_stmt 0 view .LVU8984
 33389 0b7a 0DF1E40A 		add	r10, sp, #228
 33390              	.LBB4297:
 33391              	.LBB4294:
 33392              	.LBB4293:
 833:src/xeq.c     **** }
 33393              		.loc 1 833 2 view .LVU8985
 33394 0b7e 6521     		movs	r1, #101
 33395 0b80 30A8     		add	r0, sp, #192
 33396              	.LVL2585:
 833:src/xeq.c     **** }
 33397              		.loc 1 833 2 view .LVU8986
 33398 0b82 FFF7FEFF 		bl	getRegister
 33399              	.LVL2586:
 833:src/xeq.c     **** }
 33400              		.loc 1 833 2 view .LVU8987
 33401              	.LBE4293:
 33402              	.LBE4294:
 33403              	.LBE4297:
4772:src/xeq.c     **** 						set_NaN(&r);
 33404              		.loc 1 4772 6 is_stmt 1 view .LVU8988
4772:src/xeq.c     **** 						set_NaN(&r);
 33405              		.loc 1 4772 18 is_stmt 0 view .LVU8989
 33406 0b86 27AA     		add	r2, sp, #156
 33407 0b88 30A9     		add	r1, sp, #192
 33408 0b8a 5046     		mov	r0, r10
 33409 0b8c A847     		blx	r5
 33410              	.LVL2587:
4772:src/xeq.c     **** 						set_NaN(&r);
 33411              		.loc 1 4772 9 view .LVU8990
 33412 0b8e 0028     		cmp	r0, #0
 33413 0b90 00F09E80 		beq	.L2497
 33414              	.L2274:
ARM GAS  /tmp/ccBFDvgN.s 			page 843


4774:src/xeq.c     **** 					lower();
 33415              		.loc 1 4774 6 is_stmt 1 view .LVU8991
 33416              	.LBB4298:
 33417              	.LBI4298:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33418              		.loc 1 792 6 view .LVU8992
 33419              	.LBB4299:
 793:src/xeq.c     **** }
 33420              		.loc 1 793 2 view .LVU8993
 33421 0b94 1A4B     		ldr	r3, .L2509
 33422 0b96 0593     		str	r3, [sp, #20]
 33423 0b98 6421     		movs	r1, #100
 33424 0b9a 6C20     		movs	r0, #108
 33425 0b9c FFF7FEFF 		bl	copyreg_n
 33426              	.LVL2588:
 33427              	.LBE4299:
 33428              	.LBE4298:
4775:src/xeq.c     **** 					setX(&r);
 33429              		.loc 1 4775 6 view .LVU8994
 33430 0ba0 B0E7     		b	.L2451
 33431              	.LVL2589:
 33432              	.L2435:
4775:src/xeq.c     **** 					setX(&r);
 33433              		.loc 1 4775 6 is_stmt 0 view .LVU8995
 33434              	.LBE4301:
 33435              	.LBE4304:
 33436              	.LBE4311:
 33437              	.LBE4588:
 33438              	.LBB4589:
 33439              	.LBB4382:
4632:src/xeq.c     **** 			bad_mode_error();
 33440              		.loc 1 4632 23 view .LVU8996
 33441 0ba2 01EB0513 		add	r3, r1, r5, lsl #4
 33442 0ba6 4FEA051A 		lsl	r10, r5, #4
4632:src/xeq.c     **** 			bad_mode_error();
 33443              		.loc 1 4632 20 view .LVU8997
 33444 0baa 93F90430 		ldrsb	r3, [r3, #4]
 33445 0bae 002B     		cmp	r3, #0
 33446 0bb0 BFF6DDAB 		bge	.L2247
4633:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
 33447              		.loc 1 4633 4 is_stmt 1 view .LVU8998
 33448              	.LBB4373:
 33449              	.LBI4373:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33450              		.loc 1 575 6 view .LVU8999
 33451              	.LBE4373:
 33452              	.LBE4382:
 33453              	.LBE4589:
 576:src/xeq.c     **** }
 33454              		.loc 1 576 2 view .LVU9000
 33455              	.LVL2590:
 33456              	.LBB4590:
 33457              	.LBB4383:
 33458              	.LBB4378:
 33459              	.LBB4374:
 33460              	.LBI4374:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/ccBFDvgN.s 			page 844


 33461              		.loc 1 546 5 view .LVU9001
 33462              	.LBB4375:
 547:src/xeq.c     **** 		Error = e;
 33463              		.loc 1 547 2 view .LVU9002
 547:src/xeq.c     **** 		Error = e;
 33464              		.loc 1 547 12 is_stmt 0 view .LVU9003
 33465 0bb4 124B     		ldr	r3, .L2509
 547:src/xeq.c     **** 		Error = e;
 33466              		.loc 1 547 5 view .LVU9004
 33467 0bb6 1968     		ldr	r1, [r3]
 33468 0bb8 0029     		cmp	r1, #0
 33469 0bba 7FF4F7AB 		bne	.L2248
 33470              	.LVL2591:
 33471              	.LBB4376:
 33472              	.LBI4376:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33473              		.loc 1 546 5 is_stmt 1 view .LVU9005
 33474              	.LBB4377:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33475              		.loc 1 548 3 view .LVU9006
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33476              		.loc 1 548 9 is_stmt 0 view .LVU9007
 33477 0bbe 0D21     		movs	r1, #13
 33478 0bc0 1960     		str	r1, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33479              		.loc 1 549 3 is_stmt 1 view .LVU9008
 33480 0bc2 FFF7F3BB 		b	.L2248
 33481              	.LVL2592:
 33482              	.L2255:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33483              		.loc 1 549 3 is_stmt 0 view .LVU9009
 33484              	.LBE4377:
 33485              	.LBE4376:
 33486              	.LBE4375:
 33487              	.LBE4374:
 33488              	.LBE4378:
4654:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33489              		.loc 1 4654 7 is_stmt 1 view .LVU9010
4654:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33490              		.loc 1 4654 10 is_stmt 0 view .LVU9011
 33491 0bc6 3F2D     		cmp	r5, #63
 33492 0bc8 3FF461AD 		beq	.L2446
4654:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33493              		.loc 1 4654 29 view .LVU9012
 33494 0bcc 0B2D     		cmp	r5, #11
 33495 0bce 3FF45EAD 		beq	.L2446
 33496 0bd2 F6E5     		b	.L2308
 33497              	.L2482:
4654:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33498              		.loc 1 4654 29 view .LVU9013
 33499 0bd4 0A4B     		ldr	r3, .L2509
 33500 0bd6 FFF7E9BB 		b	.L2248
 33501              	.LVL2593:
 33502              	.L2300:
4654:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 33503              		.loc 1 4654 29 view .LVU9014
 33504              	.LBE4383:
ARM GAS  /tmp/ccBFDvgN.s 			page 845


 33505              	.LBE4590:
5415:src/xeq.c     **** 					}
 33506              		.loc 1 5415 7 is_stmt 1 view .LVU9015
 33507 0bda 7D21     		movs	r1, #125
 33508 0bdc 0C20     		movs	r0, #12
 33509 0bde 0393     		str	r3, [sp, #12]
 33510 0be0 FFF7FEFF 		bl	cmdregs
 33511              	.LVL2594:
 33512 0be4 039B     		ldr	r3, [sp, #12]
5417:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33513              		.loc 1 5417 20 is_stmt 0 view .LVU9016
 33514 0be6 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 33515 0be8 1968     		ldr	r1, [r3]
5417:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33516              		.loc 1 5417 6 is_stmt 1 view .LVU9017
5417:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33517              		.loc 1 5417 20 is_stmt 0 view .LVU9018
 33518 0bea 68F3C712 		bfi	r2, r8, #7, #1
 33519 0bee 6A70     		strb	r2, [r5, #1]
5418:src/xeq.c     **** 						UState.mode_double = 1;
 33520              		.loc 1 5418 6 is_stmt 1 view .LVU9019
5418:src/xeq.c     **** 						UState.mode_double = 1;
 33521              		.loc 1 5418 9 is_stmt 0 view .LVU9020
 33522 0bf0 0029     		cmp	r1, #0
 33523 0bf2 3FF469AD 		beq	.L2299
5423:src/xeq.c     **** 				}
 33524              		.loc 1 5423 7 is_stmt 1 view .LVU9021
5423:src/xeq.c     **** 				}
 33525              		.loc 1 5423 13 is_stmt 0 view .LVU9022
 33526 0bf6 C3F80080 		str	r8, [r3]
 33527 0bfa FFF76ABB 		b	.L2297
 33528              	.L2510:
 33529 0bfe 00BF     		.align	2
 33530              	.L2509:
 33531 0c00 00000000 		.word	Error
 33532 0c04 00000000 		.word	const_1
 33533 0c08 00000000 		.word	const_0
 33534 0c0c 00000000 		.word	XromRunning
 33535 0c10 00000000 		.word	trifuncs
 33536 0c14 00000000 		.word	monfuncs
 33537 0c18 00000000 		.word	dyfuncs
 33538 0c1c 00000000 		.word	Running
 33539              	.LVL2595:
 33540              	.L2483:
5423:src/xeq.c     **** 				}
 33541              		.loc 1 5423 13 view .LVU9023
 33542 0c20 0593     		str	r3, [sp, #20]
 33543              	.LVL2596:
 33544              	.LBB4591:
 33545              	.LBB4384:
 33546              	.LBB4379:
 33547              	.LBB4361:
 33548              	.LBB4360:
 749:src/xeq.c     **** }
 33549              		.loc 1 749 3 is_stmt 1 view .LVU9024
 33550 0c22 FFF7FEFF 		bl	lift
 33551              	.LVL2597:
ARM GAS  /tmp/ccBFDvgN.s 			page 846


 33552 0c26 059B     		ldr	r3, [sp, #20]
 33553              	.L2250:
 33554              	.LBE4360:
 33555              	.LBE4361:
4641:src/xeq.c     **** 				default:
 33556              		.loc 1 4641 13 view .LVU9025
 33557              	.LBB4362:
 33558              	.LBI4362:
 747:src/xeq.c     **** 	if (get_lift())
 33559              		.loc 1 747 6 view .LVU9026
 33560              	.LBB4363:
 748:src/xeq.c     **** 		lift();
 33561              		.loc 1 748 2 view .LVU9027
 33562              	.LBB4364:
 33563              	.LBI4364:
 743:src/xeq.c     **** 	return State2.state_lift;
 33564              		.loc 1 743 12 view .LVU9028
 33565              	.LBB4365:
 744:src/xeq.c     **** }
 33566              		.loc 1 744 2 view .LVU9029
 744:src/xeq.c     **** }
 33567              		.loc 1 744 15 is_stmt 0 view .LVU9030
 33568 0c28 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 33569              	.LBE4365:
 33570              	.LBE4364:
 748:src/xeq.c     **** 		lift();
 33571              		.loc 1 748 5 view .LVU9031
 33572 0c2a 5006     		lsls	r0, r2, #25
 33573 0c2c 7FF5BAAB 		bpl	.L2251
 33574 0c30 0593     		str	r3, [sp, #20]
 749:src/xeq.c     **** }
 33575              		.loc 1 749 3 is_stmt 1 view .LVU9032
 33576 0c32 FFF7FEFF 		bl	lift
 33577              	.LVL2598:
 33578 0c36 059B     		ldr	r3, [sp, #20]
 33579 0c38 FFF7B4BB 		b	.L2251
 33580              	.LVL2599:
 33581              	.L2235:
 749:src/xeq.c     **** }
 33582              		.loc 1 749 3 is_stmt 0 view .LVU9033
 33583              	.LBE4363:
 33584              	.LBE4362:
 33585              	.LBE4379:
 33586              	.LBE4384:
 33587              	.LBE4591:
 33588              	.LBB4592:
 33589              	.LBB4256:
4050:src/xeq.c     **** 		    lift();
 33590              		.loc 1 4050 7 is_stmt 1 view .LVU9034
 33591              	.LBB4229:
 33592              	.LBI4229:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 33593              		.loc 1 1226 6 view .LVU9035
 33594              	.LBB4230:
1227:src/xeq.c     **** 
 33595              		.loc 1 1227 2 view .LVU9036
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
ARM GAS  /tmp/ccBFDvgN.s 			page 847


 33596              		.loc 1 1229 2 view .LVU9037
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33597              		.loc 1 1229 5 is_stmt 0 view .LVU9038
 33598 0c3c 002B     		cmp	r3, #0
 33599 0c3e 72D1     		bne	.L2498
 33600              	.L2239:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33601              		.loc 1 1229 5 view .LVU9039
 33602              	.LBE4230:
 33603              	.LBE4229:
4051:src/xeq.c     **** 		    clr_lift();
 33604              		.loc 1 4051 7 is_stmt 1 view .LVU9040
 33605 0c40 FFF7FEFF 		bl	lift
 33606              	.LVL2600:
 33607 0c44 E2E6     		b	.L2448
 33608              	.LVL2601:
 33609              	.L2230:
4020:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33610              		.loc 1 4020 8 view .LVU9041
4020:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33611              		.loc 1 4020 12 is_stmt 0 view .LVU9042
 33612 0c46 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
4020:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33613              		.loc 1 4020 11 view .LVU9043
 33614 0c48 002B     		cmp	r3, #0
 33615 0c4a 5FD0     		beq	.L2231
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33616              		.loc 1 4022 4 is_stmt 1 view .LVU9044
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33617              		.loc 1 4022 7 is_stmt 0 view .LVU9045
 33618 0c4c 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33619              		.loc 1 4022 48 view .LVU9046
 33620 0c4e 013B     		subs	r3, r3, #1
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33621              		.loc 1 4022 7 view .LVU9047
 33622 0c50 22B1     		cbz	r2, .L2232
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33623              		.loc 1 4022 34 view .LVU9048
 33624 0c52 E118     		adds	r1, r4, r3
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33625              		.loc 1 4022 24 view .LVU9049
 33626 0c54 91F82020 		ldrb	r2, [r1, #32]	@ zero_extendqisi2
 33627 0c58 442A     		cmp	r2, #68
 33628 0c5a 7ED0     		beq	.L2499
 33629              	.L2232:
4027:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33630              		.loc 1 4027 4 is_stmt 1 view .LVU9050
4027:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33631              		.loc 1 4027 17 is_stmt 0 view .LVU9051
 33632 0c5c DBB2     		uxtb	r3, r3
4028:src/xeq.c     **** 				CmdLineEex = 0;
 33633              		.loc 1 4028 15 view .LVU9052
 33634 0c5e E218     		adds	r2, r4, r3
4027:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33635              		.loc 1 4027 17 view .LVU9053
 33636 0c60 2377     		strb	r3, [r4, #28]
ARM GAS  /tmp/ccBFDvgN.s 			page 848


4028:src/xeq.c     **** 				CmdLineEex = 0;
 33637              		.loc 1 4028 4 is_stmt 1 view .LVU9054
4028:src/xeq.c     **** 				CmdLineEex = 0;
 33638              		.loc 1 4028 15 is_stmt 0 view .LVU9055
 33639 0c62 92F82030 		ldrb	r3, [r2, #32]	@ zero_extendqisi2
4028:src/xeq.c     **** 				CmdLineEex = 0;
 33640              		.loc 1 4028 7 view .LVU9056
 33641 0c66 452B     		cmp	r3, #69
 33642 0c68 64D0     		beq	.L2500
4030:src/xeq.c     **** 				CmdLineDot--;
 33643              		.loc 1 4030 9 is_stmt 1 view .LVU9057
4030:src/xeq.c     **** 				CmdLineDot--;
 33644              		.loc 1 4030 12 is_stmt 0 view .LVU9058
 33645 0c6a 2E2B     		cmp	r3, #46
 33646 0c6c 7FF40EAD 		bne	.L2168
4031:src/xeq.c     **** 		} else
 33647              		.loc 1 4031 5 is_stmt 1 view .LVU9059
4031:src/xeq.c     **** 		} else
 33648              		.loc 1 4031 15 is_stmt 0 view .LVU9060
 33649 0c70 A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 33650 0c72 454B     		ldr	r3, .L2511
 33651 0c74 013A     		subs	r2, r2, #1
 33652 0c76 A277     		strb	r2, [r4, #30]
 33653 0c78 1A68     		ldr	r2, [r3]
 33654 0c7a FFF782BA 		b	.L2171
 33655              	.LVL2602:
 33656              	.L2229:
 33657              	.LBB4232:
4008:src/xeq.c     **** 
 33658              		.loc 1 4008 4 is_stmt 1 view .LVU9061
4010:src/xeq.c     **** 			dn_minus(&r, &x);
 33659              		.loc 1 4010 4 view .LVU9062
 33660              	.LBB4233:
 33661              	.LBI4233:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33662              		.loc 1 824 12 view .LVU9063
 33663              	.LBB4234:
 825:src/xeq.c     **** }
 33664              		.loc 1 825 2 view .LVU9064
 825:src/xeq.c     **** }
 33665              		.loc 1 825 9 is_stmt 0 view .LVU9065
 33666 0c7e 30A8     		add	r0, sp, #192
 33667              	.LVL2603:
 825:src/xeq.c     **** }
 33668              		.loc 1 825 9 view .LVU9066
 33669 0c80 6421     		movs	r1, #100
 33670 0c82 FFF7FEFF 		bl	getRegister
 33671              	.LVL2604:
 825:src/xeq.c     **** }
 33672              		.loc 1 825 9 view .LVU9067
 33673              	.LBE4234:
 33674              	.LBE4233:
4011:src/xeq.c     **** 			setX(&r);
 33675              		.loc 1 4011 4 is_stmt 1 view .LVU9068
 33676 0c86 30A9     		add	r1, sp, #192
 33677 0c88 39A8     		add	r0, sp, #228
 33678 0c8a FFF7FEFF 		bl	dn_minus
ARM GAS  /tmp/ccBFDvgN.s 			page 849


 33679              	.LVL2605:
4012:src/xeq.c     **** 			set_lift();
 33680              		.loc 1 4012 4 view .LVU9069
 33681              	.LBB4235:
 33682              	.LBI4235:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 33683              		.loc 1 828 6 view .LVU9070
 33684              	.LBB4236:
 829:src/xeq.c     **** }
 33685              		.loc 1 829 2 view .LVU9071
 33686 0c8e 39A9     		add	r1, sp, #228
 33687              	.LVL2606:
 829:src/xeq.c     **** }
 33688              		.loc 1 829 2 is_stmt 0 view .LVU9072
 33689 0c90 6420     		movs	r0, #100
 33690 0c92 FFF7FEFF 		bl	setRegister
 33691              	.LVL2607:
 829:src/xeq.c     **** }
 33692              		.loc 1 829 2 view .LVU9073
 33693              	.LBE4236:
 33694              	.LBE4235:
4013:src/xeq.c     **** 		}
 33695              		.loc 1 4013 4 is_stmt 1 view .LVU9074
 33696              	.LBB4237:
 33697              	.LBI4237:
 767:src/xeq.c     ****     State2.state_lift = 1;
 33698              		.loc 1 767 6 view .LVU9075
 33699              	.LBB4238:
 768:src/xeq.c     **** }
 33700              		.loc 1 768 5 view .LVU9076
 33701 0c96 FFF76EBA 		b	.L2445
 33702              	.L2493:
 33703              	.LBE4238:
 33704              	.LBE4237:
 33705              	.LBE4232:
4003:src/xeq.c     **** 		else if (is_intmode()) {
 33706              		.loc 1 4003 4 view .LVU9077
 33707              	.LBB4239:
 33708              	.LBI4239:
3245:src/xeq.c     **** 	if (CmdLineEex) {
 33709              		.loc 1 3245 13 view .LVU9078
 33710              	.LBB4240:
3246:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33711              		.loc 1 3246 2 view .LVU9079
3246:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33712              		.loc 1 3246 6 is_stmt 0 view .LVU9080
 33713 0c9a 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3246:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33714              		.loc 1 3246 5 view .LVU9081
 33715 0c9c E3B1     		cbz	r3, .L2226
3250:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
 33716              		.loc 1 3250 3 is_stmt 1 view .LVU9082
3251:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33717              		.loc 1 3251 4 view .LVU9083
3251:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33718              		.loc 1 3251 24 is_stmt 0 view .LVU9084
 33719 0c9e E218     		adds	r2, r4, r3
ARM GAS  /tmp/ccBFDvgN.s 			page 850


 33720 0ca0 394B     		ldr	r3, .L2511
 33721 0ca2 92F82010 		ldrb	r1, [r2, #32]	@ zero_extendqisi2
 33722 0ca6 81F00101 		eor	r1, r1, #1
 33723 0caa 82F82010 		strb	r1, [r2, #32]
 33724 0cae 1A68     		ldr	r2, [r3]
 33725 0cb0 FFF767BA 		b	.L2171
 33726              	.L2433:
 33727              	.LBE4240:
 33728              	.LBE4239:
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33729              		.loc 1 4038 31 view .LVU9085
 33730 0cb4 354D     		ldr	r5, .L2511+4
 33731              	.LVL2608:
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33732              		.loc 1 4038 43 view .LVU9086
 33733 0cb6 DFF8E0A0 		ldr	r10, .L2511+16
 33734              	.LVL2609:
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33735              		.loc 1 4038 29 view .LVU9087
 33736 0cba 2A68     		ldr	r2, [r5]
 33737 0cbc DAF80030 		ldr	r3, [r10]
 33738 0cc0 1343     		orrs	r3, r2, r3
 33739 0cc2 51D0     		beq	.L2501
4042:src/xeq.c     **** 		      lift();
 33740              		.loc 1 4042 9 is_stmt 1 view .LVU9088
 33741              	.LBB4243:
 33742              	.LBI4243:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 33743              		.loc 1 1226 6 view .LVU9089
 33744              	.LBB4244:
1227:src/xeq.c     **** 
 33745              		.loc 1 1227 2 view .LVU9090
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33746              		.loc 1 1229 2 view .LVU9091
 33747 0cc4 FFF7FEFF 		bl	process_cmdline.part.0
 33748              	.LVL2610:
 33749 0cc8 98E6     		b	.L2236
 33750              	.LVL2611:
 33751              	.L2492:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33752              		.loc 1 1229 2 is_stmt 0 view .LVU9092
 33753              	.LBE4244:
 33754              	.LBE4243:
4066:src/xeq.c     **** 		else
 33755              		.loc 1 4066 4 is_stmt 1 view .LVU9093
 33756 0cca FFF7FEFF 		bl	sigma_plus
 33757              	.LVL2612:
 33758 0cce 03E6     		b	.L2244
 33759              	.LVL2613:
 33760              	.L2497:
4066:src/xeq.c     **** 		else
 33761              		.loc 1 4066 4 is_stmt 0 view .LVU9094
 33762              	.LBE4256:
 33763              	.LBE4592:
 33764              	.LBB4593:
 33765              	.LBB4312:
 33766              	.LBB4305:
ARM GAS  /tmp/ccBFDvgN.s 			page 851


 33767              	.LBB4302:
4773:src/xeq.c     **** 					setlastX();
 33768              		.loc 1 4773 7 is_stmt 1 view .LVU9095
 33769 0cd0 5046     		mov	r0, r10
 33770 0cd2 FFF7FEFF 		bl	set_NaN
 33771              	.LVL2614:
 33772 0cd6 5DE7     		b	.L2274
 33773              	.LVL2615:
 33774              	.L2226:
4773:src/xeq.c     **** 					setlastX();
 33775              		.loc 1 4773 7 is_stmt 0 view .LVU9096
 33776              	.LBE4302:
 33777              	.LBE4305:
 33778              	.LBE4312:
 33779              	.LBE4593:
 33780              	.LBB4594:
 33781              	.LBB4257:
 33782              	.LBB4245:
 33783              	.LBB4241:
3277:src/xeq.c     **** 			if (CmdLineLength > 1)
 33784              		.loc 1 3277 3 is_stmt 1 view .LVU9097
3277:src/xeq.c     **** 			if (CmdLineLength > 1)
 33785              		.loc 1 3277 6 is_stmt 0 view .LVU9098
 33786 0cd8 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 33787 0cdc 2D2B     		cmp	r3, #45
 33788 0cde 2FD0     		beq	.L2502
3281:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33789              		.loc 1 3281 10 is_stmt 1 view .LVU9099
3281:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33790              		.loc 1 3281 13 is_stmt 0 view .LVU9100
 33791 0ce0 122A     		cmp	r2, #18
 33792 0ce2 3FF6D3AC 		bhi	.L2168
3282:src/xeq.c     **** 			Cmdline[0] = '-';
 33793              		.loc 1 3282 4 is_stmt 1 view .LVU9101
 33794 0ce6 2A49     		ldr	r1, .L2511+8
 33795 0ce8 274B     		ldr	r3, .L2511
 33796 0cea 0593     		str	r3, [sp, #20]
 33797 0cec 481C     		adds	r0, r1, #1
 33798 0cee FFF7FEFF 		bl	xcopy
 33799              	.LVL2616:
3283:src/xeq.c     **** 			CmdLineLength++;
 33800              		.loc 1 3283 4 view .LVU9102
3284:src/xeq.c     **** 		}
 33801              		.loc 1 3284 17 is_stmt 0 view .LVU9103
 33802 0cf2 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 33803 0cf4 059B     		ldr	r3, [sp, #20]
 33804 0cf6 0131     		adds	r1, r1, #1
3283:src/xeq.c     **** 			CmdLineLength++;
 33805              		.loc 1 3283 15 view .LVU9104
 33806 0cf8 2D20     		movs	r0, #45
 33807 0cfa 1A68     		ldr	r2, [r3]
3284:src/xeq.c     **** 		}
 33808              		.loc 1 3284 17 view .LVU9105
 33809 0cfc 2177     		strb	r1, [r4, #28]
3283:src/xeq.c     **** 			CmdLineLength++;
 33810              		.loc 1 3283 15 view .LVU9106
 33811 0cfe 84F82000 		strb	r0, [r4, #32]
ARM GAS  /tmp/ccBFDvgN.s 			page 852


3284:src/xeq.c     **** 		}
 33812              		.loc 1 3284 4 is_stmt 1 view .LVU9107
 33813 0d02 FFF73EBA 		b	.L2171
 33814              	.LVL2617:
 33815              	.L2491:
3284:src/xeq.c     **** 		}
 33816              		.loc 1 3284 4 is_stmt 0 view .LVU9108
 33817              	.LBE4241:
 33818              	.LBE4245:
 33819              	.LBB4246:
 33820              	.LBB4192:
 33821 0d06 FFF7FEFF 		bl	process_cmdline.part.0
 33822              	.LVL2618:
 33823 0d0a D7E5     		b	.L2242
 33824              	.LVL2619:
 33825              	.L2231:
3284:src/xeq.c     **** 		}
 33826              		.loc 1 3284 4 view .LVU9109
 33827              	.LBE4192:
 33828              	.LBE4246:
4033:src/xeq.c     **** 		break;
 33829              		.loc 1 4033 4 is_stmt 1 view .LVU9110
 33830 0d0c 1E4B     		ldr	r3, .L2511
 33831 0d0e 0593     		str	r3, [sp, #20]
 33832 0d10 3F20     		movs	r0, #63
 33833 0d12 FFF7FEFF 		bl	clrx
 33834              	.LVL2620:
 33835 0d16 059B     		ldr	r3, [sp, #20]
 33836 0d18 1A68     		ldr	r2, [r3]
 33837 0d1a FFF732BA 		b	.L2171
 33838              	.LVL2621:
 33839              	.L2496:
4033:src/xeq.c     **** 		break;
 33840              		.loc 1 4033 4 is_stmt 0 view .LVU9111
 33841              	.LBE4257:
 33842              	.LBE4594:
 33843              	.LBB4595:
 33844              	.LBB4425:
 33845              	.LBB4420:
 33846              	.LBB4419:
4697:src/xeq.c     **** 					setlastX();
 33847              		.loc 1 4697 7 is_stmt 1 view .LVU9112
 33848 0d1e 5046     		mov	r0, r10
 33849 0d20 FFF7FEFF 		bl	set_NaN
 33850              	.LVL2622:
 33851 0d24 11E7     		b	.L2266
 33852              	.LVL2623:
 33853              	.L2498:
4697:src/xeq.c     **** 					setlastX();
 33854              		.loc 1 4697 7 is_stmt 0 view .LVU9113
 33855              	.LBE4419:
 33856              	.LBE4420:
 33857              	.LBE4425:
 33858              	.LBE4595:
 33859              	.LBB4596:
 33860              	.LBB4258:
 33861              	.LBB4247:
ARM GAS  /tmp/ccBFDvgN.s 			page 853


 33862              	.LBB4231:
 33863 0d26 FFF7FEFF 		bl	process_cmdline.part.0
 33864              	.LVL2624:
 33865 0d2a 89E7     		b	.L2239
 33866              	.LVL2625:
 33867              	.L2495:
4697:src/xeq.c     **** 					setlastX();
 33868              		.loc 1 4697 7 view .LVU9114
 33869              	.LBE4231:
 33870              	.LBE4247:
 33871              	.LBE4258:
 33872              	.LBE4596:
 33873              	.LBB4597:
 33874              	.LBB4476:
 33875              	.LBB4468:
 33876              	.LBB4467:
4849:src/xeq.c     **** 					setlastX();
 33877              		.loc 1 4849 7 is_stmt 1 view .LVU9115
 33878 0d2c 5046     		mov	r0, r10
 33879 0d2e FFF7FEFF 		bl	set_NaN
 33880              	.LVL2626:
 33881 0d32 DFE6     		b	.L2282
 33882              	.LVL2627:
 33883              	.L2500:
4849:src/xeq.c     **** 					setlastX();
 33884              		.loc 1 4849 7 is_stmt 0 view .LVU9116
 33885              	.LBE4467:
 33886              	.LBE4468:
 33887              	.LBE4476:
 33888              	.LBE4597:
 33889              	.LBB4598:
 33890              	.LBB4259:
4029:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33891              		.loc 1 4029 5 is_stmt 1 view .LVU9117
 33892 0d34 144B     		ldr	r3, .L2511
4029:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33893              		.loc 1 4029 16 is_stmt 0 view .LVU9118
 33894 0d36 0021     		movs	r1, #0
 33895 0d38 1A68     		ldr	r2, [r3]
 33896 0d3a 6177     		strb	r1, [r4, #29]
 33897 0d3c FFF721BA 		b	.L2171
 33898              	.LVL2628:
 33899              	.L2502:
 33900              	.LBB4248:
 33901              	.LBB4242:
3278:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33902              		.loc 1 3278 4 is_stmt 1 view .LVU9119
3278:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33903              		.loc 1 3278 7 is_stmt 0 view .LVU9120
 33904 0d40 012A     		cmp	r2, #1
 33905 0d42 03D9     		bls	.L2228
3279:src/xeq.c     **** 			CmdLineLength--;
 33906              		.loc 1 3279 5 is_stmt 1 view .LVU9121
 33907 0d44 1349     		ldr	r1, .L2511+12
 33908 0d46 481E     		subs	r0, r1, #1
 33909 0d48 FFF7FEFF 		bl	xcopy
 33910              	.LVL2629:
ARM GAS  /tmp/ccBFDvgN.s 			page 854


 33911              	.L2228:
3280:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33912              		.loc 1 3280 4 view .LVU9122
3280:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33913              		.loc 1 3280 17 is_stmt 0 view .LVU9123
 33914 0d4c 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 33915 0d4e 0E4B     		ldr	r3, .L2511
 33916 0d50 013A     		subs	r2, r2, #1
 33917 0d52 2277     		strb	r2, [r4, #28]
 33918 0d54 1A68     		ldr	r2, [r3]
 33919 0d56 FFF714BA 		b	.L2171
 33920              	.LVL2630:
 33921              	.L2499:
3280:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33922              		.loc 1 3280 17 view .LVU9124
 33923              	.LBE4242:
 33924              	.LBE4248:
4023:src/xeq.c     **** 				break;
 33925              		.loc 1 4023 5 is_stmt 1 view .LVU9125
 33926 0d5a 0B4B     		ldr	r3, .L2511
4023:src/xeq.c     **** 				break;
 33927              		.loc 1 4023 30 is_stmt 0 view .LVU9126
 33928 0d5c 4520     		movs	r0, #69
 33929 0d5e 1A68     		ldr	r2, [r3]
 33930 0d60 81F82000 		strb	r0, [r1, #32]
4024:src/xeq.c     **** 			}
 33931              		.loc 1 4024 5 is_stmt 1 view .LVU9127
 33932 0d64 FFF70DBA 		b	.L2171
 33933              	.LVL2631:
 33934              	.L2501:
4040:src/xeq.c     **** 		    } else {                       //JM
 33935              		.loc 1 4040 9 view .LVU9128
 33936              	.LBB4249:
 33937              	.LBI4249:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 33938              		.loc 1 1226 6 view .LVU9129
 33939              	.LBB4250:
1227:src/xeq.c     **** 
 33940              		.loc 1 1227 2 view .LVU9130
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33941              		.loc 1 1229 2 view .LVU9131
 33942 0d68 074B     		ldr	r3, .L2511
 33943 0d6a 0593     		str	r3, [sp, #20]
 33944 0d6c FFF7FEFF 		bl	process_cmdline.part.0
 33945              	.LVL2632:
 33946 0d70 059B     		ldr	r3, [sp, #20]
 33947 0d72 1A68     		ldr	r2, [r3]
 33948 0d74 FFF705BA 		b	.L2171
 33949              	.LVL2633:
 33950              	.L2222:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33951              		.loc 1 1229 2 is_stmt 0 view .LVU9132
 33952              	.LBE4250:
 33953              	.LBE4249:
3948:src/xeq.c     **** 			CmdLineDot++;
 33954              		.loc 1 3948 5 is_stmt 1 view .LVU9133
 33955 0d78 0020     		movs	r0, #0
ARM GAS  /tmp/ccBFDvgN.s 			page 855


 33956 0d7a FFF7FEFF 		bl	digit
 33957              	.LVL2634:
 33958 0d7e 09E6     		b	.L2223
 33959              	.LVL2635:
 33960              	.L2494:
 33961              	.LBB4251:
3995:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 33962              		.loc 1 3995 5 view .LVU9134
 33963 0d80 0120     		movs	r0, #1
 33964 0d82 FFF7FEFF 		bl	digit
 33965              	.LVL2636:
 33966 0d86 5DE6     		b	.L2224
 33967              	.L2512:
 33968              		.align	2
 33969              	.L2511:
 33970 0d88 00000000 		.word	Error
 33971 0d8c 00000000 		.word	XromRunning
 33972 0d90 20000000 		.word	StateWhileOn+32
 33973 0d94 21000000 		.word	StateWhileOn+33
 33974 0d98 00000000 		.word	Running
 33975              	.LBE4251:
 33976              	.LBE4259:
 33977              	.LBE4598:
 33978              		.cfi_endproc
 33979              	.LFE251:
 33981              		.section	.text.xeq_single,"ax",%progbits
 33982              		.align	1
 33983              		.p2align 2,,3
 33984              		.syntax unified
 33985              		.thumb
 33986              		.thumb_func
 33987              		.fpu fpv4-sp-d16
 33989              	xeq_single:
 33990              	.LFB252:
5467:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 33991              		.loc 1 5467 30 view -0
 33992              		.cfi_startproc
 33993              		@ args = 0, pretend = 0, frame = 0
 33994              		@ frame_needed = 0, uses_anonymous_args = 0
5468:src/xeq.c     **** 
 33995              		.loc 1 5468 2 view .LVU9136
5468:src/xeq.c     **** 
 33996              		.loc 1 5468 28 is_stmt 0 view .LVU9137
 33997 0000 074B     		ldr	r3, .L2515
 33998 0002 1B68     		ldr	r3, [r3]
5467:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 33999              		.loc 1 5467 30 view .LVU9138
 34000 0004 10B5     		push	{r4, lr}
 34001              		.cfi_def_cfa_offset 8
 34002              		.cfi_offset 4, -8
 34003              		.cfi_offset 14, -4
5468:src/xeq.c     **** 
 34004              		.loc 1 5468 20 view .LVU9139
 34005 0006 B3F8E007 		ldrh	r0, [r3, #2016]
 34006 000a FFF7FEFF 		bl	getprog
 34007              	.LVL2637:
 34008 000e 0446     		mov	r4, r0
ARM GAS  /tmp/ccBFDvgN.s 			page 856


 34009              	.LVL2638:
5470:src/xeq.c     **** 	xeq(op);
 34010              		.loc 1 5470 2 is_stmt 1 view .LVU9140
 34011 0010 FFF7FEFF 		bl	incpc
 34012              	.LVL2639:
5471:src/xeq.c     **** }
 34013              		.loc 1 5471 2 view .LVU9141
 34014 0014 2046     		mov	r0, r4
5472:src/xeq.c     **** 
 34015              		.loc 1 5472 1 is_stmt 0 view .LVU9142
 34016 0016 BDE81040 		pop	{r4, lr}
 34017              		.cfi_restore 14
 34018              		.cfi_restore 4
 34019              		.cfi_def_cfa_offset 0
 34020              	.LVL2640:
5471:src/xeq.c     **** }
 34021              		.loc 1 5471 2 view .LVU9143
 34022 001a FFF7FEBF 		b	xeq
 34023              	.LVL2641:
 34024              	.L2516:
5471:src/xeq.c     **** }
 34025              		.loc 1 5471 2 view .LVU9144
 34026 001e 00BF     		.align	2
 34027              	.L2515:
 34028 0020 00000000 		.word	main_ram
 34029              		.cfi_endproc
 34030              	.LFE252:
 34032              		.section	.text.xeq_xrom2,"ax",%progbits
 34033              		.align	1
 34034              		.p2align 2,,3
 34035              		.syntax unified
 34036              		.thumb
 34037              		.thumb_func
 34038              		.fpu fpv4-sp-d16
 34040              	xeq_xrom2:
 34041              	.LFB253:
5479:src/xeq.c     **** #endif
 34042              		.loc 1 5479 29 is_stmt 1 view -0
 34043              		.cfi_startproc
 34044              		@ args = 0, pretend = 0, frame = 0
 34045              		@ frame_needed = 0, uses_anonymous_args = 0
5481:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
 34046              		.loc 1 5481 2 view .LVU9146
 34047              	.LVL2642:
5485:src/xeq.c     **** 		XromRunning = 1;
 34048              		.loc 1 5485 4 view .LVU9147
5485:src/xeq.c     **** 		XromRunning = 1;
 34049              		.loc 1 5485 10 view .LVU9148
5479:src/xeq.c     **** #endif
 34050              		.loc 1 5479 29 is_stmt 0 view .LVU9149
 34051 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 34052              		.cfi_def_cfa_offset 32
 34053              		.cfi_offset 4, -32
 34054              		.cfi_offset 5, -28
 34055              		.cfi_offset 6, -24
 34056              		.cfi_offset 7, -20
 34057              		.cfi_offset 8, -16
ARM GAS  /tmp/ccBFDvgN.s 			page 857


 34058              		.cfi_offset 9, -12
 34059              		.cfi_offset 10, -8
 34060              		.cfi_offset 14, -4
5485:src/xeq.c     **** 		XromRunning = 1;
 34061              		.loc 1 5485 11 view .LVU9150
 34062 0004 1A4D     		ldr	r5, .L2529
 34063 0006 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5485:src/xeq.c     **** 		XromRunning = 1;
 34064              		.loc 1 5485 10 view .LVU9151
 34065 0008 53BB     		cbnz	r3, .L2517
 34066 000a DFF87080 		ldr	r8, .L2529+12
5486:src/xeq.c     **** 		xeq_single();
 34067              		.loc 1 5486 15 view .LVU9152
 34068 000e 194F     		ldr	r7, .L2529+4
 34069              	.LBB4605:
 34070              	.LBB4606:
4481:src/xeq.c     **** 		Busy = 1;
 34071              		.loc 1 4481 6 view .LVU9153
 34072 0010 DFF86CA0 		ldr	r10, .L2529+16
4481:src/xeq.c     **** 		Busy = 1;
 34073              		.loc 1 4481 15 view .LVU9154
 34074 0014 DFF86C90 		ldr	r9, .L2529+20
 34075 0018 03F0FF04 		and	r4, r3, #255
 34076              	.LVL2643:
 34077              	.L2518:
4481:src/xeq.c     **** 		Busy = 1;
 34078              		.loc 1 4481 15 view .LVU9155
 34079              	.LBE4606:
 34080              	.LBE4605:
5486:src/xeq.c     **** 		xeq_single();
 34081              		.loc 1 5486 3 is_stmt 1 view .LVU9156
 34082              	.LBB4613:
 34083              	.LBI4613:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 34084              		.loc 1 185 5 view .LVU9157
 34085              	.LBB4614:
 186:src/xeq.c     **** }
 34086              		.loc 1 186 2 view .LVU9158
 186:src/xeq.c     **** }
 34087              		.loc 1 186 9 is_stmt 0 view .LVU9159
 34088 001c D8F80020 		ldr	r2, [r8]
 34089 0020 B2F8E037 		ldrh	r3, [r2, #2016]
 34090              	.LBE4614:
 34091              	.LBE4613:
5485:src/xeq.c     **** 		XromRunning = 1;
 34092              		.loc 1 5485 18 view .LVU9160
 34093 0024 9B0B     		lsrs	r3, r3, #14
5486:src/xeq.c     **** 		xeq_single();
 34094              		.loc 1 5486 15 view .LVU9161
 34095 0026 0126     		movs	r6, #1
5485:src/xeq.c     **** 		XromRunning = 1;
 34096              		.loc 1 5485 18 view .LVU9162
 34097 0028 032B     		cmp	r3, #3
5489:src/xeq.c     **** 			busy();
 34098              		.loc 1 5489 6 view .LVU9163
 34099 002a 3444     		add	r4, r4, r6
 34100              	.LVL2644:
ARM GAS  /tmp/ccBFDvgN.s 			page 858


5485:src/xeq.c     **** 		XromRunning = 1;
 34101              		.loc 1 5485 18 view .LVU9164
 34102 002c 18D1     		bne	.L2517
5485:src/xeq.c     **** 		XromRunning = 1;
 34103              		.loc 1 5485 31 discriminator 2 view .LVU9165
 34104 002e B2F9E237 		ldrsh	r3, [r2, #2018]
 34105 0032 ABB1     		cbz	r3, .L2517
5486:src/xeq.c     **** 		xeq_single();
 34106              		.loc 1 5486 15 view .LVU9166
 34107 0034 3E60     		str	r6, [r7]
5487:src/xeq.c     **** 		XromRunning = 0;
 34108              		.loc 1 5487 3 is_stmt 1 view .LVU9167
 34109 0036 FFF7FEFF 		bl	xeq_single
 34110              	.LVL2645:
5488:src/xeq.c     **** 		if ((++count & 31) == 0)
 34111              		.loc 1 5488 3 view .LVU9168
 34112              	.LBB4615:
 34113              	.LBB4609:
4481:src/xeq.c     **** 		Busy = 1;
 34114              		.loc 1 4481 12 is_stmt 0 view .LVU9169
 34115 003a D9F80030 		ldr	r3, [r9]
 34116 003e DAF80010 		ldr	r1, [r10]
 34117 0042 1943     		orrs	r1, r1, r3
 34118              	.LBE4609:
 34119              	.LBE4615:
5489:src/xeq.c     **** 			busy();
 34120              		.loc 1 5489 16 view .LVU9170
 34121 0044 04F01F03 		and	r3, r4, #31
5488:src/xeq.c     **** 		if ((++count & 31) == 0)
 34122              		.loc 1 5488 15 view .LVU9171
 34123 0048 0022     		movs	r2, #0
 34124              	.LBB4616:
 34125              	.LBB4610:
4481:src/xeq.c     **** 		Busy = 1;
 34126              		.loc 1 4481 12 view .LVU9172
 34127 004a 1943     		orrs	r1, r1, r3
 34128              	.LBE4610:
 34129              	.LBE4616:
5488:src/xeq.c     **** 		if ((++count & 31) == 0)
 34130              		.loc 1 5488 15 view .LVU9173
 34131 004c 3A60     		str	r2, [r7]
5489:src/xeq.c     **** 			busy();
 34132              		.loc 1 5489 3 is_stmt 1 view .LVU9174
 34133              	.LVL2646:
5490:src/xeq.c     **** 		  if (Pause)
 34134              		.loc 1 5490 4 view .LVU9175
 34135              	.LBB4617:
 34136              	.LBI4605:
4466:src/xeq.c     **** {
 34137              		.loc 1 4466 6 view .LVU9176
 34138              	.LBB4611:
4471:src/xeq.c     **** 
 34139              		.loc 1 4471 12 view .LVU9177
4476:src/xeq.c     **** 
 34140              		.loc 1 4476 17 view .LVU9178
4481:src/xeq.c     **** 		Busy = 1;
 34141              		.loc 1 4481 2 view .LVU9179
ARM GAS  /tmp/ccBFDvgN.s 			page 859


4481:src/xeq.c     **** 		Busy = 1;
 34142              		.loc 1 4481 12 is_stmt 0 view .LVU9180
 34143 004e 09D0     		beq	.L2528
 34144              	.L2519:
 34145              	.LBE4611:
 34146              	.LBE4617:
5491:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 34147              		.loc 1 5491 5 is_stmt 1 view .LVU9181
5494:src/xeq.c     **** 		
 34148              		.loc 1 5494 4 view .LVU9182
5485:src/xeq.c     **** 		XromRunning = 1;
 34149              		.loc 1 5485 10 view .LVU9183
5491:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 34150              		.loc 1 5491 9 is_stmt 0 view .LVU9184
 34151 0050 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
5485:src/xeq.c     **** 		XromRunning = 1;
 34152              		.loc 1 5485 11 view .LVU9185
 34153 0052 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5491:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 34154              		.loc 1 5491 8 view .LVU9186
 34155 0054 12B1     		cbz	r2, .L2520
5494:src/xeq.c     **** 		
 34156              		.loc 1 5494 12 view .LVU9187
 34157 0056 0122     		movs	r2, #1
 34158 0058 C9F80020 		str	r2, [r9]
 34159              	.L2520:
5485:src/xeq.c     **** 		XromRunning = 1;
 34160              		.loc 1 5485 10 view .LVU9188
 34161 005c 002B     		cmp	r3, #0
 34162 005e DDD0     		beq	.L2518
 34163              	.LVL2647:
 34164              	.L2517:
5497:src/xeq.c     **** 
 34165              		.loc 1 5497 1 view .LVU9189
 34166 0060 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 34167              	.LVL2648:
 34168              	.L2528:
 34169              	.LBB4618:
 34170              	.LBB4612:
 34171              	.LBB4607:
 34172              	.LBI4607:
4466:src/xeq.c     **** {
 34173              		.loc 1 4466 6 is_stmt 1 view .LVU9190
 34174              	.LBB4608:
4482:src/xeq.c     **** 		message("Wait...", NULL);
 34175              		.loc 1 4482 3 view .LVU9191
4483:src/xeq.c     **** 	}
 34176              		.loc 1 4483 3 is_stmt 0 view .LVU9192
 34177 0064 0448     		ldr	r0, .L2529+8
4482:src/xeq.c     **** 		message("Wait...", NULL);
 34178              		.loc 1 4482 8 view .LVU9193
 34179 0066 CAF80060 		str	r6, [r10]
4483:src/xeq.c     **** 	}
 34180              		.loc 1 4483 3 is_stmt 1 view .LVU9194
 34181 006a FFF7FEFF 		bl	message
 34182              	.LVL2649:
4485:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 860


 34183              		.loc 1 4485 1 is_stmt 0 view .LVU9195
 34184 006e EFE7     		b	.L2519
 34185              	.L2530:
 34186              		.align	2
 34187              	.L2529:
 34188 0070 00000000 		.word	Pause
 34189 0074 00000000 		.word	XromRunning
 34190 0078 00000000 		.word	.LC7
 34191 007c 00000000 		.word	main_ram
 34192 0080 00000000 		.word	Busy
 34193 0084 00000000 		.word	Running
 34194              	.LBE4608:
 34195              	.LBE4607:
 34196              	.LBE4612:
 34197              	.LBE4618:
 34198              		.cfi_endproc
 34199              	.LFE253:
 34201              		.section	.text.xeq_xrom,"ax",%progbits
 34202              		.align	1
 34203              		.p2align 2,,3
 34204              		.global	xeq_xrom
 34205              		.syntax unified
 34206              		.thumb
 34207              		.thumb_func
 34208              		.fpu fpv4-sp-d16
 34210              	xeq_xrom:
 34211              	.LFB254:
5500:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34212              		.loc 1 5500 21 is_stmt 1 view -0
 34213              		.cfi_startproc
 34214              		@ args = 0, pretend = 0, frame = 0
 34215              		@ frame_needed = 0, uses_anonymous_args = 0
 34216              		@ link register save eliminated.
5502:src/xeq.c     **** 		xeq_xrom2();
 34217              		.loc 1 5502 2 view .LVU9197
5502:src/xeq.c     **** 		xeq_xrom2();
 34218              		.loc 1 5502 6 is_stmt 0 view .LVU9198
 34219 0000 034B     		ldr	r3, .L2534
5502:src/xeq.c     **** 		xeq_xrom2();
 34220              		.loc 1 5502 5 view .LVU9199
 34221 0002 93F91730 		ldrsb	r3, [r3, #23]
 34222 0006 002B     		cmp	r3, #0
 34223 0008 00DA     		bge	.L2533
5504:src/xeq.c     **** #endif
 34224              		.loc 1 5504 1 view .LVU9200
 34225 000a 7047     		bx	lr
 34226              	.L2533:
5503:src/xeq.c     **** }
 34227              		.loc 1 5503 3 is_stmt 1 view .LVU9201
 34228 000c FFF7FEBF 		b	xeq_xrom2
 34229              	.LVL2650:
 34230              	.L2535:
 34231              		.align	2
 34232              	.L2534:
 34233 0010 00000000 		.word	StateWhileOn
 34234              		.cfi_endproc
 34235              	.LFE254:
ARM GAS  /tmp/ccBFDvgN.s 			page 861


 34237              		.section	.text.dispatch_xrom,"ax",%progbits
 34238              		.align	1
 34239              		.p2align 2,,3
 34240              		.syntax unified
 34241              		.thumb
 34242              		.thumb_func
 34243              		.fpu fpv4-sp-d16
 34245              	dispatch_xrom:
 34246              	.LVL2651:
 34247              	.LFB238:
4518:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 34248              		.loc 1 4518 1 view -0
 34249              		.cfi_startproc
 34250              		@ args = 0, pretend = 0, frame = 0
 34251              		@ frame_needed = 0, uses_anonymous_args = 0
4519:src/xeq.c     **** 	if (xp == NULL)
 34252              		.loc 1 4519 2 view .LVU9203
 34253              	.LBB4619:
 34254              	.LBI4619:
4501:src/xeq.c     **** {
 34255              		.loc 1 4501 24 view .LVU9204
 34256              	.LBB4620:
4503:src/xeq.c     **** 	if (xp < xrom)
 34257              		.loc 1 4503 2 view .LVU9205
4504:src/xeq.c     **** 		return NULL;
 34258              		.loc 1 4504 5 is_stmt 0 view .LVU9206
 34259 0000 1649     		ldr	r1, .L2547
4503:src/xeq.c     **** 	if (xp < xrom)
 34260              		.loc 1 4503 59 view .LVU9207
 34261 0002 20F00100 		bic	r0, r0, #1
 34262              	.LVL2652:
4504:src/xeq.c     **** 		return NULL;
 34263              		.loc 1 4504 2 is_stmt 1 view .LVU9208
4504:src/xeq.c     **** 		return NULL;
 34264              		.loc 1 4504 5 is_stmt 0 view .LVU9209
 34265 0006 8842     		cmp	r0, r1
 34266 0008 22D3     		bcc	.L2539
4508:src/xeq.c     **** 		return NULL;
 34267              		.loc 1 4508 2 is_stmt 1 view .LVU9210
4508:src/xeq.c     **** 		return NULL;
 34268              		.loc 1 4508 17 is_stmt 0 view .LVU9211
 34269 000a 154B     		ldr	r3, .L2547+4
 34270 000c 1B88     		ldrh	r3, [r3]
 34271 000e 01EB4303 		add	r3, r1, r3, lsl #1
4508:src/xeq.c     **** 		return NULL;
 34272              		.loc 1 4508 5 view .LVU9212
 34273 0012 9842     		cmp	r0, r3
 34274 0014 1CD2     		bcs	.L2539
 34275              	.LVL2653:
4508:src/xeq.c     **** 		return NULL;
 34276              		.loc 1 4508 5 view .LVU9213
 34277              	.LBE4620:
 34278              	.LBE4619:
4520:src/xeq.c     **** 		return 0;
 34279              		.loc 1 4520 2 is_stmt 1 view .LVU9214
4520:src/xeq.c     **** 		return 0;
 34280              		.loc 1 4520 5 is_stmt 0 view .LVU9215
ARM GAS  /tmp/ccBFDvgN.s 			page 862


 34281 0016 D0B1     		cbz	r0, .L2543
4523:src/xeq.c     **** 	XromRunning = 1;
 34282              		.loc 1 4523 2 is_stmt 1 view .LVU9216
4523:src/xeq.c     **** 	XromRunning = 1;
 34283              		.loc 1 4523 18 is_stmt 0 view .LVU9217
 34284 0018 124B     		ldr	r3, .L2547+8
 34285 001a 1B68     		ldr	r3, [r3]
4518:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 34286              		.loc 1 4518 1 view .LVU9218
 34287 001c 70B5     		push	{r4, r5, r6, lr}
 34288              		.cfi_def_cfa_offset 16
 34289              		.cfi_offset 4, -16
 34290              		.cfi_offset 5, -12
 34291              		.cfi_offset 6, -8
 34292              		.cfi_offset 14, -4
4525:src/xeq.c     **** 	xeq_xrom();
 34293              		.loc 1 4525 9 view .LVU9219
 34294 001e 401A     		subs	r0, r0, r1
 34295              	.LVL2654:
4523:src/xeq.c     **** 	XromRunning = 1;
 34296              		.loc 1 4523 16 view .LVU9220
 34297 0020 114C     		ldr	r4, .L2547+12
4523:src/xeq.c     **** 	XromRunning = 1;
 34298              		.loc 1 4523 18 view .LVU9221
 34299 0022 B3F9DE67 		ldrsh	r6, [r3, #2014]
 34300 0026 2660     		str	r6, [r4]
4524:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34301              		.loc 1 4524 2 is_stmt 1 view .LVU9222
4525:src/xeq.c     **** 	xeq_xrom();
 34302              		.loc 1 4525 9 is_stmt 0 view .LVU9223
 34303 0028 4010     		asrs	r0, r0, #1
 34304              	.LVL2655:
4524:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34305              		.loc 1 4524 14 view .LVU9224
 34306 002a 0124     		movs	r4, #1
 34307 002c 0F4D     		ldr	r5, .L2547+16
4525:src/xeq.c     **** 	xeq_xrom();
 34308              		.loc 1 4525 2 view .LVU9225
 34309 002e B3F8E027 		ldrh	r2, [r3, #2016]
4524:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34310              		.loc 1 4524 14 view .LVU9226
 34311 0032 2C60     		str	r4, [r5]
4525:src/xeq.c     **** 	xeq_xrom();
 34312              		.loc 1 4525 2 is_stmt 1 view .LVU9227
4525:src/xeq.c     **** 	xeq_xrom();
 34313              		.loc 1 4525 9 is_stmt 0 view .LVU9228
 34314 0034 0130     		adds	r0, r0, #1
4525:src/xeq.c     **** 	xeq_xrom();
 34315              		.loc 1 4525 2 view .LVU9229
 34316 0036 40F44040 		orr	r0, r0, #49152
 34317 003a 2146     		mov	r1, r4
 34318 003c FFF7FEFF 		bl	gsbgto
 34319              	.LVL2656:
4526:src/xeq.c     **** 	return 1;
 34320              		.loc 1 4526 2 is_stmt 1 view .LVU9230
 34321              	.LBB4621:
 34322              	.LBI4621:
ARM GAS  /tmp/ccBFDvgN.s 			page 863


5500:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34323              		.loc 1 5500 6 view .LVU9231
 34324              	.LBB4622:
5502:src/xeq.c     **** 		xeq_xrom2();
 34325              		.loc 1 5502 2 view .LVU9232
5502:src/xeq.c     **** 		xeq_xrom2();
 34326              		.loc 1 5502 6 is_stmt 0 view .LVU9233
 34327 0040 0B4B     		ldr	r3, .L2547+20
5502:src/xeq.c     **** 		xeq_xrom2();
 34328              		.loc 1 5502 5 view .LVU9234
 34329 0042 93F91730 		ldrsb	r3, [r3, #23]
 34330 0046 002B     		cmp	r3, #0
 34331 0048 04DA     		bge	.L2546
 34332              	.LBE4622:
 34333              	.LBE4621:
4527:src/xeq.c     **** }
 34334              		.loc 1 4527 9 view .LVU9235
 34335 004a 2046     		mov	r0, r4
 34336              	.LVL2657:
4528:src/xeq.c     **** 
 34337              		.loc 1 4528 1 view .LVU9236
 34338 004c 70BD     		pop	{r4, r5, r6, pc}
 34339              	.LVL2658:
 34340              	.L2543:
 34341              		.cfi_def_cfa_offset 0
 34342              		.cfi_restore 4
 34343              		.cfi_restore 5
 34344              		.cfi_restore 6
 34345              		.cfi_restore 14
4528:src/xeq.c     **** 
 34346              		.loc 1 4528 1 view .LVU9237
 34347 004e 7047     		bx	lr
 34348              	.LVL2659:
 34349              	.L2539:
4521:src/xeq.c     **** 	// set_lift();
 34350              		.loc 1 4521 10 view .LVU9238
 34351 0050 0020     		movs	r0, #0
 34352              	.LVL2660:
4521:src/xeq.c     **** 	// set_lift();
 34353              		.loc 1 4521 10 view .LVU9239
 34354 0052 7047     		bx	lr
 34355              	.LVL2661:
 34356              	.L2546:
 34357              		.cfi_def_cfa_offset 16
 34358              		.cfi_offset 4, -16
 34359              		.cfi_offset 5, -12
 34360              		.cfi_offset 6, -8
 34361              		.cfi_offset 14, -4
 34362              	.LBB4624:
 34363              	.LBB4623:
5503:src/xeq.c     **** }
 34364              		.loc 1 5503 3 is_stmt 1 view .LVU9240
 34365 0054 FFF7FEFF 		bl	xeq_xrom2
 34366              	.LVL2662:
 34367              	.LBE4623:
 34368              	.LBE4624:
4527:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 864


 34369              		.loc 1 4527 9 is_stmt 0 view .LVU9241
 34370 0058 2046     		mov	r0, r4
4528:src/xeq.c     **** 
 34371              		.loc 1 4528 1 view .LVU9242
 34372 005a 70BD     		pop	{r4, r5, r6, pc}
 34373              	.L2548:
 34374              		.align	2
 34375              	.L2547:
 34376 005c 00000000 		.word	xrom
 34377 0060 00000000 		.word	xrom_size
 34378 0064 00000000 		.word	main_ram
 34379 0068 00000000 		.word	UserLocalRegs
 34380 006c 00000000 		.word	XromRunning
 34381 0070 00000000 		.word	StateWhileOn
 34382              		.cfi_endproc
 34383              	.LFE238:
 34385              		.section	.text.op_rs,"ax",%progbits
 34386              		.align	1
 34387              		.p2align 2,,3
 34388              		.global	op_rs
 34389              		.syntax unified
 34390              		.thumb
 34391              		.thumb_func
 34392              		.fpu fpv4-sp-d16
 34394              	op_rs:
 34395              	.LVL2663:
 34396              	.LFB257:
5599:src/xeq.c     **** #ifndef REALBUILD
 34397              		.loc 1 5599 27 is_stmt 1 view -0
 34398              		.cfi_startproc
 34399              		@ args = 0, pretend = 0, frame = 0
 34400              		@ frame_needed = 0, uses_anonymous_args = 0
5603:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 34401              		.loc 1 5603 2 view .LVU9244
 34402              	.LBB4625:
 34403              	.LBI4625:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 34404              		.loc 1 185 5 view .LVU9245
 34405              	.LBB4626:
 186:src/xeq.c     **** }
 34406              		.loc 1 186 2 view .LVU9246
 34407              	.LBE4626:
 34408              	.LBE4625:
5599:src/xeq.c     **** #ifndef REALBUILD
 34409              		.loc 1 5599 27 is_stmt 0 view .LVU9247
 34410 0000 10B5     		push	{r4, lr}
 34411              		.cfi_def_cfa_offset 8
 34412              		.cfi_offset 4, -8
 34413              		.cfi_offset 14, -4
 34414              	.LBB4628:
 34415              	.LBB4627:
 186:src/xeq.c     **** }
 34416              		.loc 1 186 9 view .LVU9248
 34417 0002 1D4C     		ldr	r4, .L2559
 34418 0004 2268     		ldr	r2, [r4]
 34419 0006 B2F8E037 		ldrh	r3, [r2, #2016]
 34420              	.LBE4627:
ARM GAS  /tmp/ccBFDvgN.s 			page 865


 34421              	.LBE4628:
5603:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 34422              		.loc 1 5603 5 view .LVU9249
 34423 000a 9B0B     		lsrs	r3, r3, #14
 34424 000c 032B     		cmp	r3, #3
 34425 000e 20D0     		beq	.L2558
5613:src/xeq.c     **** 		set_running_off();
 34426              		.loc 1 5613 2 is_stmt 1 view .LVU9250
5613:src/xeq.c     **** 		set_running_off();
 34427              		.loc 1 5613 6 is_stmt 0 view .LVU9251
 34428 0010 1A4B     		ldr	r3, .L2559+4
5613:src/xeq.c     **** 		set_running_off();
 34429              		.loc 1 5613 5 view .LVU9252
 34430 0012 1968     		ldr	r1, [r3]
 34431 0014 61B1     		cbz	r1, .L2553
5614:src/xeq.c     **** 	else {
 34432              		.loc 1 5614 3 is_stmt 1 view .LVU9253
 34433              	.LBB4629:
 34434              	.LBI4629:
5816:src/xeq.c     **** 	set_running_off_sst();
 34435              		.loc 1 5816 6 view .LVU9254
 34436              	.LBB4630:
5817:src/xeq.c     **** 	State.entryp = 0;
 34437              		.loc 1 5817 2 view .LVU9255
 34438              	.LBB4631:
 34439              	.LBI4631:
5808:src/xeq.c     **** 	Running = 0;
 34440              		.loc 1 5808 6 view .LVU9256
 34441              	.LBB4632:
5809:src/xeq.c     **** }
 34442              		.loc 1 5809 2 view .LVU9257
5809:src/xeq.c     **** }
 34443              		.loc 1 5809 10 is_stmt 0 view .LVU9258
 34444 0016 0021     		movs	r1, #0
 34445 0018 1960     		str	r1, [r3]
 34446              	.LBE4632:
 34447              	.LBE4631:
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 34448              		.loc 1 5818 2 is_stmt 1 view .LVU9259
5818:src/xeq.c     **** 	dot( RCL_annun, 0);
 34449              		.loc 1 5818 15 is_stmt 0 view .LVU9260
 34450 001a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 34451 001e 61F30413 		bfi	r3, r1, #4, #1
 34452 0022 82F8DD37 		strb	r3, [r2, #2013]
5819:src/xeq.c     **** }
 34453              		.loc 1 5819 2 is_stmt 1 view .LVU9261
 34454              	.LBE4630:
 34455              	.LBE4629:
5620:src/xeq.c     **** 
 34456              		.loc 1 5620 1 is_stmt 0 view .LVU9262
 34457 0026 BDE81040 		pop	{r4, lr}
 34458              		.cfi_remember_state
 34459              		.cfi_restore 14
 34460              		.cfi_restore 4
 34461              		.cfi_def_cfa_offset 0
 34462              	.LBB4634:
 34463              	.LBB4633:
ARM GAS  /tmp/ccBFDvgN.s 			page 866


5819:src/xeq.c     **** }
 34464              		.loc 1 5819 2 view .LVU9263
 34465 002a 8A20     		movs	r0, #138
 34466              	.LVL2664:
5819:src/xeq.c     **** }
 34467              		.loc 1 5819 2 view .LVU9264
 34468 002c FFF7FEBF 		b	dot
 34469              	.LVL2665:
 34470              	.L2553:
 34471              		.cfi_restore_state
5819:src/xeq.c     **** }
 34472              		.loc 1 5819 2 view .LVU9265
 34473              	.LBE4633:
 34474              	.LBE4634:
5616:src/xeq.c     **** 		if (RetStkPtr == 0)
 34475              		.loc 1 5616 3 is_stmt 1 view .LVU9266
 34476 0030 FFF7FEFF 		bl	set_running_on
 34477              	.LVL2666:
5617:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34478              		.loc 1 5617 3 view .LVU9267
5617:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34479              		.loc 1 5617 7 is_stmt 0 view .LVU9268
 34480 0034 2368     		ldr	r3, [r4]
5617:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34481              		.loc 1 5617 6 view .LVU9269
 34482 0036 B3F9E227 		ldrsh	r2, [r3, #2018]
 34483 003a 4AB9     		cbnz	r2, .L2549
5618:src/xeq.c     **** 	}
 34484              		.loc 1 5618 4 is_stmt 1 view .LVU9270
5618:src/xeq.c     **** 	}
 34485              		.loc 1 5618 10 is_stmt 0 view .LVU9271
 34486 003c 104A     		ldr	r2, .L2559+8
5618:src/xeq.c     **** 	}
 34487              		.loc 1 5618 26 view .LVU9272
 34488 003e B3F8E017 		ldrh	r1, [r3, #2016]
5618:src/xeq.c     **** 	}
 34489              		.loc 1 5618 10 view .LVU9273
 34490 0042 1268     		ldr	r2, [r2]
5618:src/xeq.c     **** 	}
 34491              		.loc 1 5618 24 view .LVU9274
 34492 0044 4FF6FF70 		movw	r0, #65535
 34493 0048 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 34494 004c 22F8021C 		strh	r1, [r2, #-2]	@ movhi
 34495              	.L2549:
5620:src/xeq.c     **** 
 34496              		.loc 1 5620 1 view .LVU9275
 34497 0050 10BD     		pop	{r4, pc}
 34498              	.LVL2667:
 34499              	.L2558:
5604:src/xeq.c     **** 			Running = XromRunning = 0;
 34500              		.loc 1 5604 3 is_stmt 1 view .LVU9276
5604:src/xeq.c     **** 			Running = XromRunning = 0;
 34501              		.loc 1 5604 7 is_stmt 0 view .LVU9277
 34502 0052 0C4B     		ldr	r3, .L2559+12
5604:src/xeq.c     **** 			Running = XromRunning = 0;
 34503              		.loc 1 5604 6 view .LVU9278
 34504 0054 93F91730 		ldrsb	r3, [r3, #23]
ARM GAS  /tmp/ccBFDvgN.s 			page 867


 34505 0058 002B     		cmp	r3, #0
 34506 005a 09DA     		bge	.L2551
5604:src/xeq.c     **** 			Running = XromRunning = 0;
 34507              		.loc 1 5604 24 discriminator 1 view .LVU9279
 34508 005c 074B     		ldr	r3, .L2559+4
5604:src/xeq.c     **** 			Running = XromRunning = 0;
 34509              		.loc 1 5604 32 discriminator 1 view .LVU9280
 34510 005e 0A4A     		ldr	r2, .L2559+16
 34511 0060 1868     		ldr	r0, [r3]
 34512              	.LVL2668:
5604:src/xeq.c     **** 			Running = XromRunning = 0;
 34513              		.loc 1 5604 32 discriminator 1 view .LVU9281
 34514 0062 1168     		ldr	r1, [r2]
 34515 0064 0143     		orrs	r1, r0, r1
 34516 0066 03D0     		beq	.L2551
5605:src/xeq.c     **** 		}
 34517              		.loc 1 5605 4 is_stmt 1 view .LVU9282
5605:src/xeq.c     **** 		}
 34518              		.loc 1 5605 26 is_stmt 0 view .LVU9283
 34519 0068 0021     		movs	r1, #0
 34520 006a 1160     		str	r1, [r2]
5605:src/xeq.c     **** 		}
 34521              		.loc 1 5605 12 view .LVU9284
 34522 006c 1960     		str	r1, [r3]
5620:src/xeq.c     **** 
 34523              		.loc 1 5620 1 view .LVU9285
 34524 006e 10BD     		pop	{r4, pc}
 34525              	.L2551:
5608:src/xeq.c     **** 		}
 34526              		.loc 1 5608 4 is_stmt 1 view .LVU9286
5620:src/xeq.c     **** 
 34527              		.loc 1 5620 1 is_stmt 0 view .LVU9287
 34528 0070 BDE81040 		pop	{r4, lr}
 34529              		.cfi_restore 14
 34530              		.cfi_restore 4
 34531              		.cfi_def_cfa_offset 0
5608:src/xeq.c     **** 		}
 34532              		.loc 1 5608 4 view .LVU9288
 34533 0074 FFF7FEBF 		b	xeq_xrom2
 34534              	.LVL2669:
 34535              	.L2560:
 34536              		.align	2
 34537              	.L2559:
 34538 0078 00000000 		.word	main_ram
 34539 007c 00000000 		.word	Running
 34540 0080 00000000 		.word	RetStk
 34541 0084 00000000 		.word	StateWhileOn
 34542 0088 00000000 		.word	XromRunning
 34543              		.cfi_endproc
 34544              	.LFE257:
 34546              		.section	.text.xeqprog,"ax",%progbits
 34547              		.align	1
 34548              		.p2align 2,,3
 34549              		.global	xeqprog
 34550              		.syntax unified
 34551              		.thumb
 34552              		.thumb_func
ARM GAS  /tmp/ccBFDvgN.s 			page 868


 34553              		.fpu fpv4-sp-d16
 34555              	xeqprog:
 34556              	.LFB255:
5516:src/xeq.c     ****    int state = 0;
 34557              		.loc 1 5516 2 is_stmt 1 view -0
 34558              		.cfi_startproc
 34559              		@ args = 0, pretend = 0, frame = 0
 34560              		@ frame_needed = 0, uses_anonymous_args = 0
5517:src/xeq.c     ****    if (Running || Pause) {
 34561              		.loc 1 5517 4 view .LVU9290
 34562              	.LVL2670:
5518:src/xeq.c     **** 
 34563              		.loc 1 5518 4 view .LVU9291
5516:src/xeq.c     ****    int state = 0;
 34564              		.loc 1 5516 2 is_stmt 0 view .LVU9292
 34565 0000 38B5     		push	{r3, r4, r5, lr}
 34566              		.cfi_def_cfa_offset 16
 34567              		.cfi_offset 3, -16
 34568              		.cfi_offset 4, -12
 34569              		.cfi_offset 5, -8
 34570              		.cfi_offset 14, -4
5518:src/xeq.c     **** 
 34571              		.loc 1 5518 8 view .LVU9293
 34572 0002 184C     		ldr	r4, .L2586
 34573 0004 184D     		ldr	r5, .L2586+4
5518:src/xeq.c     **** 
 34574              		.loc 1 5518 7 view .LVU9294
 34575 0006 2368     		ldr	r3, [r4]
 34576 0008 0BB9     		cbnz	r3, .L2562
5518:src/xeq.c     **** 
 34577              		.loc 1 5518 16 discriminator 1 view .LVU9295
 34578 000a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 34579 000c 9BB1     		cbz	r3, .L2567
 34580              	.L2562:
5524:src/xeq.c     **** #endif
 34581              		.loc 1 5524 6 is_stmt 1 view .LVU9296
 34582              	.LVL2671:
5528:src/xeq.c     ****      finish_RPN(); // RPN
 34583              		.loc 1 5528 6 view .LVU9297
 34584 000e 0121     		movs	r1, #1
 34585 0010 8A20     		movs	r0, #138
 34586 0012 FFF7FEFF 		bl	dot
 34587              	.LVL2672:
5529:src/xeq.c     **** 
 34588              		.loc 1 5529 6 view .LVU9298
 34589 0016 FFF7FEFF 		bl	finish_RPN
 34590              	.LVL2673:
5531:src/xeq.c     ****        xeq_single();
 34591              		.loc 1 5531 6 view .LVU9299
5531:src/xeq.c     ****        xeq_single();
 34592              		.loc 1 5531 12 is_stmt 0 view .LVU9300
 34593 001a 06E0     		b	.L2564
 34594              	.L2584:
5531:src/xeq.c     ****        xeq_single();
 34595              		.loc 1 5531 21 discriminator 1 view .LVU9301
 34596 001c 2368     		ldr	r3, [r4]
 34597 001e 53B1     		cbz	r3, .L2567
ARM GAS  /tmp/ccBFDvgN.s 			page 869


5532:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 34598              		.loc 1 5532 8 view .LVU9302
 34599 0020 FFF7FEFF 		bl	xeq_single
 34600              	.LVL2674:
5534:src/xeq.c     **** 	 {
 34601              		.loc 1 5534 8 is_stmt 1 view .LVU9303
5534:src/xeq.c     **** 	 {
 34602              		.loc 1 5534 12 is_stmt 0 view .LVU9304
 34603 0024 FFF7FEFF 		bl	is_key_pressed
 34604              	.LVL2675:
5534:src/xeq.c     **** 	 {
 34605              		.loc 1 5534 11 view .LVU9305
 34606 0028 10B9     		cbnz	r0, .L2565
 34607              	.L2564:
5532:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 34608              		.loc 1 5532 8 is_stmt 1 view .LVU9306
5531:src/xeq.c     ****        xeq_single();
 34609              		.loc 1 5531 12 view .LVU9307
5531:src/xeq.c     ****        xeq_single();
 34610              		.loc 1 5531 13 is_stmt 0 view .LVU9308
 34611 002a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5531:src/xeq.c     ****        xeq_single();
 34612              		.loc 1 5531 12 view .LVU9309
 34613 002c 002B     		cmp	r3, #0
 34614 002e F5D0     		beq	.L2584
 34615              	.L2565:
5543:src/xeq.c     ****      // Program has terminated
 34616              		.loc 1 5543 4 is_stmt 1 view .LVU9310
5543:src/xeq.c     ****      // Program has terminated
 34617              		.loc 1 5543 7 is_stmt 0 view .LVU9311
 34618 0030 2368     		ldr	r3, [r4]
 34619 0032 03B1     		cbz	r3, .L2567
 34620              	.LVL2676:
 34621              	.L2561:
5557:src/xeq.c     **** 
 34622              		.loc 1 5557 2 view .LVU9312
 34623 0034 38BD     		pop	{r3, r4, r5, pc}
 34624              	.L2567:
5543:src/xeq.c     ****      // Program has terminated
 34625              		.loc 1 5543 4 is_stmt 1 view .LVU9313
5543:src/xeq.c     ****      // Program has terminated
 34626              		.loc 1 5543 21 is_stmt 0 view .LVU9314
 34627 0036 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5543:src/xeq.c     ****      // Program has terminated
 34628              		.loc 1 5543 18 view .LVU9315
 34629 0038 002B     		cmp	r3, #0
 34630 003a FBD1     		bne	.L2561
5545:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
 34631              		.loc 1 5545 6 is_stmt 1 view .LVU9316
5546:src/xeq.c     ****      display();
 34632              		.loc 1 5546 14 is_stmt 0 view .LVU9317
 34633 003c 0B4C     		ldr	r4, .L2586+8
5545:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
 34634              		.loc 1 5545 6 view .LVU9318
 34635 003e 8A20     		movs	r0, #138
 34636 0040 FFF7FEFF 		bl	clr_dot
 34637              	.LVL2677:
ARM GAS  /tmp/ccBFDvgN.s 			page 870


5546:src/xeq.c     ****      display();
 34638              		.loc 1 5546 6 is_stmt 1 view .LVU9319
5546:src/xeq.c     ****      display();
 34639              		.loc 1 5546 14 is_stmt 0 view .LVU9320
 34640 0044 0123     		movs	r3, #1
 34641 0046 2360     		str	r3, [r4]
5547:src/xeq.c     ****      if (ShowRPN) {
 34642              		.loc 1 5547 6 is_stmt 1 view .LVU9321
 34643 0048 FFF7FEFF 		bl	display
 34644              	.LVL2678:
5548:src/xeq.c     ****        set_dot(RPN);
 34645              		.loc 1 5548 6 view .LVU9322
5548:src/xeq.c     ****        set_dot(RPN);
 34646              		.loc 1 5548 9 is_stmt 0 view .LVU9323
 34647 004c 2368     		ldr	r3, [r4]
 34648 004e 1BB9     		cbnz	r3, .L2585
 34649              	.L2569:
5554:src/xeq.c     **** #endif
 34650              		.loc 1 5554 6 is_stmt 1 view .LVU9324
5554:src/xeq.c     **** #endif
 34651              		.loc 1 5554 18 is_stmt 0 view .LVU9325
 34652 0050 074B     		ldr	r3, .L2586+12
 34653 0052 0122     		movs	r2, #1
 34654 0054 1A60     		str	r2, [r3]
5557:src/xeq.c     **** 
 34655              		.loc 1 5557 2 view .LVU9326
 34656 0056 38BD     		pop	{r3, r4, r5, pc}
 34657              	.L2585:
5549:src/xeq.c     ****        finish_RPN(); // RPN
 34658              		.loc 1 5549 8 is_stmt 1 view .LVU9327
 34659 0058 8D20     		movs	r0, #141
 34660 005a FFF7FEFF 		bl	set_dot
 34661              	.LVL2679:
5550:src/xeq.c     ****      }
 34662              		.loc 1 5550 8 view .LVU9328
 34663 005e FFF7FEFF 		bl	finish_RPN
 34664              	.LVL2680:
 34665 0062 F5E7     		b	.L2569
 34666              	.L2587:
 34667              		.align	2
 34668              	.L2586:
 34669 0064 00000000 		.word	Running
 34670 0068 00000000 		.word	Pause
 34671 006c 00000000 		.word	ShowRPN
 34672 0070 00000000 		.word	JustStopped
 34673              		.cfi_endproc
 34674              	.LFE255:
 34676              		.section	.text.xeq_sst_bst,"ax",%progbits
 34677              		.align	1
 34678              		.p2align 2,,3
 34679              		.global	xeq_sst_bst
 34680              		.syntax unified
 34681              		.thumb
 34682              		.thumb_func
 34683              		.fpu fpv4-sp-d16
 34685              	xeq_sst_bst:
 34686              	.LVL2681:
ARM GAS  /tmp/ccBFDvgN.s 			page 871


 34687              	.LFB256:
5562:src/xeq.c     **** 	opcode op;
 34688              		.loc 1 5562 1 view -0
 34689              		.cfi_startproc
 34690              		@ args = 0, pretend = 0, frame = 0
 34691              		@ frame_needed = 0, uses_anonymous_args = 0
5563:src/xeq.c     **** 
 34692              		.loc 1 5563 2 view .LVU9330
5565:src/xeq.c     **** 	if (kind == -1)
 34693              		.loc 1 5565 2 view .LVU9331
 34694              	.LBB4635:
 34695              	.LBI4635:
4455:src/xeq.c     **** 	// extern int IntMaxWindow;
 34696              		.loc 1 4455 6 view .LVU9332
 34697              	.LBB4636:
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34698              		.loc 1 4458 2 view .LVU9333
 34699              	.LBE4636:
 34700              	.LBE4635:
5562:src/xeq.c     **** 	opcode op;
 34701              		.loc 1 5562 1 is_stmt 0 view .LVU9334
 34702 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 34703              		.cfi_def_cfa_offset 24
 34704              		.cfi_offset 4, -24
 34705              		.cfi_offset 5, -20
 34706              		.cfi_offset 6, -16
 34707              		.cfi_offset 7, -12
 34708              		.cfi_offset 8, -8
 34709              		.cfi_offset 14, -4
 34710              	.LBB4639:
 34711              	.LBB4637:
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34712              		.loc 1 4458 16 view .LVU9335
 34713 0004 254C     		ldr	r4, .L2601
 34714 0006 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4459:src/xeq.c     **** }
 34715              		.loc 1 4459 15 view .LVU9336
 34716 0008 0026     		movs	r6, #0
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34717              		.loc 1 4458 16 view .LVU9337
 34718 000a 6FF3C503 		bfc	r3, #3, #3
 34719              	.LBE4637:
 34720              	.LBE4639:
5566:src/xeq.c     **** 		decpc();
 34721              		.loc 1 5566 5 view .LVU9338
 34722 000e 411C     		adds	r1, r0, #1
 34723              	.LBB4640:
 34724              	.LBB4638:
4458:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34725              		.loc 1 4458 16 view .LVU9339
 34726 0010 2375     		strb	r3, [r4, #20]
4459:src/xeq.c     **** }
 34727              		.loc 1 4459 2 is_stmt 1 view .LVU9340
4459:src/xeq.c     **** }
 34728              		.loc 1 4459 15 is_stmt 0 view .LVU9341
 34729 0012 6674     		strb	r6, [r4, #17]
 34730              	.LBE4638:
ARM GAS  /tmp/ccBFDvgN.s 			page 872


 34731              	.LBE4640:
5566:src/xeq.c     **** 		decpc();
 34732              		.loc 1 5566 2 is_stmt 1 view .LVU9342
5566:src/xeq.c     **** 		decpc();
 34733              		.loc 1 5566 5 is_stmt 0 view .LVU9343
 34734 0014 30D0     		beq	.L2597
5569:src/xeq.c     **** 		// Display the step
 34735              		.loc 1 5569 2 is_stmt 1 view .LVU9344
5569:src/xeq.c     **** 		// Display the step
 34736              		.loc 1 5569 6 is_stmt 0 view .LVU9345
 34737 0016 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5569:src/xeq.c     **** 		// Display the step
 34738              		.loc 1 5569 5 view .LVU9346
 34739 0018 5B06     		lsls	r3, r3, #25
 34740 001a 0546     		mov	r5, r0
 34741 001c 08D4     		bmi	.L2598
5588:src/xeq.c     **** 		// Key down in program mode
 34742              		.loc 1 5588 7 is_stmt 1 view .LVU9347
5588:src/xeq.c     **** 		// Key down in program mode
 34743              		.loc 1 5588 10 is_stmt 0 view .LVU9348
 34744 001e 08B1     		cbz	r0, .L2599
 34745              	.LVL2682:
 34746              	.L2588:
5593:src/xeq.c     **** 
 34747              		.loc 1 5593 1 view .LVU9349
 34748 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34749              	.LVL2683:
 34750              	.L2599:
5590:src/xeq.c     **** 		OpCode = 0;
 34751              		.loc 1 5590 3 is_stmt 1 view .LVU9350
 34752 0024 FFF7FEFF 		bl	incpc
 34753              	.LVL2684:
5591:src/xeq.c     **** 	}
 34754              		.loc 1 5591 3 view .LVU9351
5591:src/xeq.c     **** 	}
 34755              		.loc 1 5591 10 is_stmt 0 view .LVU9352
 34756 0028 1D4B     		ldr	r3, .L2601+4
 34757 002a 1D60     		str	r5, [r3]
5593:src/xeq.c     **** 
 34758              		.loc 1 5593 1 view .LVU9353
 34759 002c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34760              	.LVL2685:
 34761              	.L2598:
5571:src/xeq.c     **** 		print_step(op);
 34762              		.loc 1 5571 3 is_stmt 1 view .LVU9354
5571:src/xeq.c     **** 		print_step(op);
 34763              		.loc 1 5571 16 is_stmt 0 view .LVU9355
 34764 0030 1C4B     		ldr	r3, .L2601+8
 34765 0032 1B68     		ldr	r3, [r3]
5571:src/xeq.c     **** 		print_step(op);
 34766              		.loc 1 5571 8 view .LVU9356
 34767 0034 B3F8E007 		ldrh	r0, [r3, #2016]
 34768              	.LVL2686:
5571:src/xeq.c     **** 		print_step(op);
 34769              		.loc 1 5571 8 view .LVU9357
 34770 0038 FFF7FEFF 		bl	getprog
 34771              	.LVL2687:
ARM GAS  /tmp/ccBFDvgN.s 			page 873


 34772 003c 0746     		mov	r7, r0
 34773              	.LVL2688:
5572:src/xeq.c     **** 		if (kind == 1) {
 34774              		.loc 1 5572 3 is_stmt 1 view .LVU9358
 34775 003e FFF7FEFF 		bl	print_step
 34776              	.LVL2689:
5573:src/xeq.c     **** 			// Execute the step on key up
 34777              		.loc 1 5573 3 view .LVU9359
5573:src/xeq.c     **** 			// Execute the step on key up
 34778              		.loc 1 5573 6 is_stmt 0 view .LVU9360
 34779 0042 012D     		cmp	r5, #1
 34780 0044 ECD1     		bne	.L2588
5576:src/xeq.c     **** #endif
 34781              		.loc 1 5576 4 is_stmt 1 view .LVU9361
5576:src/xeq.c     **** #endif
 34782              		.loc 1 5576 15 is_stmt 0 view .LVU9362
 34783 0046 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34784              	.LBB4641:
 34785              	.LBB4642:
5813:src/xeq.c     **** }
 34786              		.loc 1 5813 10 view .LVU9363
 34787 0048 DFF85C80 		ldr	r8, .L2601+12
 34788              	.LBE4642:
 34789              	.LBE4641:
5576:src/xeq.c     **** #endif
 34790              		.loc 1 5576 15 view .LVU9364
 34791 004c 43F00203 		orr	r3, r3, #2
 34792 0050 2376     		strb	r3, [r4, #24]
5578:src/xeq.c     **** 			incpc();
 34793              		.loc 1 5578 4 is_stmt 1 view .LVU9365
 34794              	.LBB4644:
 34795              	.LBI4641:
5812:src/xeq.c     **** 	Running = 1;
 34796              		.loc 1 5812 6 view .LVU9366
 34797              	.LBB4643:
5813:src/xeq.c     **** }
 34798              		.loc 1 5813 2 view .LVU9367
5813:src/xeq.c     **** }
 34799              		.loc 1 5813 10 is_stmt 0 view .LVU9368
 34800 0052 C8F80050 		str	r5, [r8]
 34801              	.LBE4643:
 34802              	.LBE4644:
5579:src/xeq.c     **** 			xeq(op);
 34803              		.loc 1 5579 4 is_stmt 1 view .LVU9369
 34804 0056 FFF7FEFF 		bl	incpc
 34805              	.LVL2690:
5580:src/xeq.c     **** #ifndef REALBUILD
 34806              		.loc 1 5580 4 view .LVU9370
 34807 005a 3846     		mov	r0, r7
 34808 005c FFF7FEFF 		bl	xeq
 34809              	.LVL2691:
5582:src/xeq.c     **** #endif
 34810              		.loc 1 5582 4 view .LVU9371
5582:src/xeq.c     **** #endif
 34811              		.loc 1 5582 15 is_stmt 0 view .LVU9372
 34812 0060 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34813              	.LBB4645:
ARM GAS  /tmp/ccBFDvgN.s 			page 874


 34814              	.LBB4646:
5502:src/xeq.c     **** 		xeq_xrom2();
 34815              		.loc 1 5502 5 view .LVU9373
 34816 0062 94F91720 		ldrsb	r2, [r4, #23]
 34817              	.LBE4646:
 34818              	.LBE4645:
5582:src/xeq.c     **** #endif
 34819              		.loc 1 5582 15 view .LVU9374
 34820 0066 66F34103 		bfi	r3, r6, #1, #1
 34821              	.LBB4650:
 34822              	.LBB4647:
5502:src/xeq.c     **** 		xeq_xrom2();
 34823              		.loc 1 5502 5 view .LVU9375
 34824 006a 002A     		cmp	r2, #0
 34825              	.LBE4647:
 34826              	.LBE4650:
5582:src/xeq.c     **** #endif
 34827              		.loc 1 5582 15 view .LVU9376
 34828 006c 2376     		strb	r3, [r4, #24]
5584:src/xeq.c     **** 			set_running_off_sst();
 34829              		.loc 1 5584 4 is_stmt 1 view .LVU9377
 34830              	.LBB4651:
 34831              	.LBI4645:
5500:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34832              		.loc 1 5500 6 view .LVU9378
 34833              	.LBB4648:
5502:src/xeq.c     **** 		xeq_xrom2();
 34834              		.loc 1 5502 2 view .LVU9379
5502:src/xeq.c     **** 		xeq_xrom2();
 34835              		.loc 1 5502 5 is_stmt 0 view .LVU9380
 34836 006e 12DA     		bge	.L2600
 34837              	.L2595:
 34838              	.LBE4648:
 34839              	.LBE4651:
5585:src/xeq.c     **** 		}
 34840              		.loc 1 5585 4 is_stmt 1 view .LVU9381
 34841              	.LBB4652:
 34842              	.LBI4652:
5808:src/xeq.c     **** 	Running = 0;
 34843              		.loc 1 5808 6 view .LVU9382
 34844              	.LBB4653:
5809:src/xeq.c     **** }
 34845              		.loc 1 5809 2 view .LVU9383
5809:src/xeq.c     **** }
 34846              		.loc 1 5809 10 is_stmt 0 view .LVU9384
 34847 0070 0023     		movs	r3, #0
 34848 0072 C8F80030 		str	r3, [r8]
5810:src/xeq.c     **** 
 34849              		.loc 1 5810 1 view .LVU9385
 34850 0076 D3E7     		b	.L2588
 34851              	.LVL2692:
 34852              	.L2597:
5810:src/xeq.c     **** 
 34853              		.loc 1 5810 1 view .LVU9386
 34854              	.LBE4653:
 34855              	.LBE4652:
5567:src/xeq.c     **** 
ARM GAS  /tmp/ccBFDvgN.s 			page 875


 34856              		.loc 1 5567 3 is_stmt 1 view .LVU9387
 34857 0078 FFF7FEFF 		bl	decpc
 34858              	.LVL2693:
5569:src/xeq.c     **** 		// Display the step
 34859              		.loc 1 5569 2 view .LVU9388
5569:src/xeq.c     **** 		// Display the step
 34860              		.loc 1 5569 6 is_stmt 0 view .LVU9389
 34861 007c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5569:src/xeq.c     **** 		// Display the step
 34862              		.loc 1 5569 5 view .LVU9390
 34863 007e 5A06     		lsls	r2, r3, #25
 34864 0080 CED5     		bpl	.L2588
5571:src/xeq.c     **** 		print_step(op);
 34865              		.loc 1 5571 3 is_stmt 1 view .LVU9391
5571:src/xeq.c     **** 		print_step(op);
 34866              		.loc 1 5571 16 is_stmt 0 view .LVU9392
 34867 0082 084B     		ldr	r3, .L2601+8
 34868 0084 1B68     		ldr	r3, [r3]
5571:src/xeq.c     **** 		print_step(op);
 34869              		.loc 1 5571 8 view .LVU9393
 34870 0086 B3F8E007 		ldrh	r0, [r3, #2016]
 34871 008a FFF7FEFF 		bl	getprog
 34872              	.LVL2694:
5572:src/xeq.c     **** 		if (kind == 1) {
 34873              		.loc 1 5572 3 is_stmt 1 view .LVU9394
5593:src/xeq.c     **** 
 34874              		.loc 1 5593 1 is_stmt 0 view .LVU9395
 34875 008e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 34876              		.cfi_remember_state
 34877              		.cfi_restore 14
 34878              		.cfi_restore 8
 34879              		.cfi_restore 7
 34880              		.cfi_restore 6
 34881              		.cfi_restore 5
 34882              		.cfi_restore 4
 34883              		.cfi_def_cfa_offset 0
5572:src/xeq.c     **** 		if (kind == 1) {
 34884              		.loc 1 5572 3 view .LVU9396
 34885 0092 FFF7FEBF 		b	print_step
 34886              	.LVL2695:
 34887              	.L2600:
 34888              		.cfi_restore_state
 34889              	.LBB4654:
 34890              	.LBB4649:
5503:src/xeq.c     **** }
 34891              		.loc 1 5503 3 is_stmt 1 view .LVU9397
 34892 0096 FFF7FEFF 		bl	xeq_xrom2
 34893              	.LVL2696:
 34894 009a E9E7     		b	.L2595
 34895              	.L2602:
 34896              		.align	2
 34897              	.L2601:
 34898 009c 00000000 		.word	StateWhileOn
 34899 00a0 00000000 		.word	OpCode
 34900 00a4 00000000 		.word	main_ram
 34901 00a8 00000000 		.word	Running
 34902              	.LBE4649:
ARM GAS  /tmp/ccBFDvgN.s 			page 876


 34903              	.LBE4654:
 34904              		.cfi_endproc
 34905              	.LFE256:
 34907              		.section	.text.init_34s,"ax",%progbits
 34908              		.align	1
 34909              		.p2align 2,,3
 34910              		.global	init_34s
 34911              		.syntax unified
 34912              		.thumb
 34913              		.thumb_func
 34914              		.fpu fpv4-sp-d16
 34916              	init_34s:
 34917              	.LFB273:
6338:src/xeq.c     **** 
6339:src/xeq.c     **** 
6340:src/xeq.c     **** /*
6341:src/xeq.c     ****  *  Debugging output for the console version
6342:src/xeq.c     ****  */
6343:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(WP34STEST)
6344:src/xeq.c     **** extern unsigned char remap_chars(unsigned char ch);
6345:src/xeq.c     **** 
6346:src/xeq.c     **** static int compare(s_opcode a1, s_opcode a2, int cata) {
6347:src/xeq.c     **** 	char b1[16], b2[16];
6348:src/xeq.c     **** 	const unsigned char *s1, *s2;
6349:src/xeq.c     **** 	int i;
6350:src/xeq.c     **** 
6351:src/xeq.c     **** 	xset(b1, 0, sizeof(b1));
6352:src/xeq.c     **** 	xset(b2, 0, sizeof(b2));
6353:src/xeq.c     **** 	s1 = (unsigned char *)catcmd(a1, b1);
6354:src/xeq.c     **** 	s2 = (unsigned char *)catcmd(a2, b2);
6355:src/xeq.c     **** 	if (*s1 == COMPLEX_PREFIX) s1++;
6356:src/xeq.c     **** 	if (*s2 == COMPLEX_PREFIX) s2++;
6357:src/xeq.c     **** 
6358:src/xeq.c     **** 	for (i=0;;i++) {
6359:src/xeq.c     **** 		unsigned char c1 = *s1++;
6360:src/xeq.c     **** 		unsigned char c2 = *s2++;
6361:src/xeq.c     **** 		c1 = remap_chars(c1);
6362:src/xeq.c     **** 		c2 = remap_chars(c2);
6363:src/xeq.c     **** 
6364:src/xeq.c     **** 		if (c1 != c2) {
6365:src/xeq.c     **** 			if (c1 > c2) {
6366:src/xeq.c     **** 				return 1;
6367:src/xeq.c     **** 			}
6368:src/xeq.c     **** 			return 0;
6369:src/xeq.c     **** 		} else if (c1 == '\0')
6370:src/xeq.c     **** 			break;
6371:src/xeq.c     **** 	}
6372:src/xeq.c     **** 	return 0;
6373:src/xeq.c     **** }
6374:src/xeq.c     **** 
6375:src/xeq.c     **** static void check_cat(const enum catalogues cata, const char *name) {
6376:src/xeq.c     **** 	int i;
6377:src/xeq.c     **** 	char b1[16], b2[16];
6378:src/xeq.c     **** 	const int oldcata = State2.catalogue;
6379:src/xeq.c     **** 	int n;
6380:src/xeq.c     **** 
6381:src/xeq.c     **** 	State2.catalogue = cata;
ARM GAS  /tmp/ccBFDvgN.s 			page 877


6382:src/xeq.c     **** 	n = current_catalogue_max();
6383:src/xeq.c     **** 	for (i=1; i<n; i++) {
6384:src/xeq.c     **** 		opcode cold = current_catalogue(i-1);
6385:src/xeq.c     **** 		opcode c = current_catalogue(i);
6386:src/xeq.c     **** 		if (compare(cold, c, cata))
6387:src/xeq.c     **** 			error("catalogue %s row %04x / %04x  %d / %d: %04o / %04o (%s / %s)", name, cold, c, i-1, i,
6388:src/xeq.c     **** 					0xff & cold, 0xff & c,
6389:src/xeq.c     **** 					catcmd(cold, b1), catcmd(c, b2));
6390:src/xeq.c     **** 	}
6391:src/xeq.c     **** 	State2.catalogue = oldcata;
6392:src/xeq.c     **** }
6393:src/xeq.c     **** 
6394:src/xeq.c     **** static void check_const_cat(void) {
6395:src/xeq.c     **** 	int i;
6396:src/xeq.c     **** 	char b1[16], b2[16];
6397:src/xeq.c     **** 	char p1[64], p2[64];
6398:src/xeq.c     **** 
6399:src/xeq.c     **** 	for (i=1; i<NUM_CONSTS_CAT; i++) {
6400:src/xeq.c     **** 		if (compare(CONST(i-1), CONST(i), 0)) {
6401:src/xeq.c     **** 			prettify(catcmd(CONST(i-1), b1), p1, 0);
6402:src/xeq.c     **** 			prettify(catcmd(CONST(i), b2), p2, 0);
6403:src/xeq.c     **** 			error("constants row %d / %d: %s / %s", i, i+1, p1, p2);
6404:src/xeq.c     **** 		}
6405:src/xeq.c     **** 	}
6406:src/xeq.c     **** }
6407:src/xeq.c     **** 
6408:src/xeq.c     **** static void bad_table(const char *t, int row, const char *n, int nlen) {
6409:src/xeq.c     **** 	char buf[64], name[20];
6410:src/xeq.c     **** 	int i;
6411:src/xeq.c     **** 
6412:src/xeq.c     **** 	for (i=0; i<nlen; i++)
6413:src/xeq.c     **** 		name[i] = n[i];
6414:src/xeq.c     **** 	name[nlen] = '\0';
6415:src/xeq.c     **** 	prettify(name, buf, 0);
6416:src/xeq.c     **** 	error("%s table row %d: %6s", t, row, buf);
6417:src/xeq.c     **** }
6418:src/xeq.c     **** 
6419:src/xeq.c     **** #endif
6420:src/xeq.c     **** 
6421:src/xeq.c     **** /* Main initialisation routine that sets things up for us.
6422:src/xeq.c     ****  * Returns a nonzero result if it has cleared ram.
6423:src/xeq.c     ****  */
6424:src/xeq.c     **** int init_34s(void)
6425:src/xeq.c     **** {
 34918              		.loc 1 6425 1 view -0
 34919              		.cfi_startproc
 34920              		@ args = 0, pretend = 0, frame = 0
 34921              		@ frame_needed = 0, uses_anonymous_args = 0
6426:src/xeq.c     **** 	const int cleared = checksum_all();
 34922              		.loc 1 6426 2 view .LVU9399
6425:src/xeq.c     **** 	const int cleared = checksum_all();
 34923              		.loc 1 6425 1 is_stmt 0 view .LVU9400
 34924 0000 10B5     		push	{r4, lr}
 34925              		.cfi_def_cfa_offset 8
 34926              		.cfi_offset 4, -8
 34927              		.cfi_offset 14, -4
 34928              		.loc 1 6426 22 view .LVU9401
ARM GAS  /tmp/ccBFDvgN.s 			page 878


 34929 0002 FFF7FEFF 		bl	checksum_ram
 34930              	.LVL2697:
6427:src/xeq.c     **** 	if (cleared) {
 34931              		.loc 1 6427 2 is_stmt 1 view .LVU9402
 34932              		.loc 1 6427 5 is_stmt 0 view .LVU9403
 34933 0006 0446     		mov	r4, r0
 34934 0008 80B9     		cbnz	r0, .L2609
 34935              	.LVL2698:
 34936              	.L2604:
6428:src/xeq.c     **** 		reset();
6429:src/xeq.c     **** 	}
6430:src/xeq.c     **** 	init_state();
 34937              		.loc 1 6430 2 is_stmt 1 view .LVU9404
 34938 000a FFF7FEFF 		bl	init_state
 34939              	.LVL2699:
6431:src/xeq.c     **** 	xeq_init_contexts();
 34940              		.loc 1 6431 2 view .LVU9405
 34941 000e FFF7FEFF 		bl	xeq_init_contexts
 34942              	.LVL2700:
6432:src/xeq.c     **** 	ShowRPN = 1;
 34943              		.loc 1 6432 2 view .LVU9406
 34944              		.loc 1 6432 10 is_stmt 0 view .LVU9407
 34945 0012 084B     		ldr	r3, .L2610
 34946 0014 0122     		movs	r2, #1
6433:src/xeq.c     **** 	set_dot(RPN);
 34947              		.loc 1 6433 2 view .LVU9408
 34948 0016 8D20     		movs	r0, #141
6432:src/xeq.c     **** 	ShowRPN = 1;
 34949              		.loc 1 6432 10 view .LVU9409
 34950 0018 1A60     		str	r2, [r3]
 34951              		.loc 1 6433 2 is_stmt 1 view .LVU9410
 34952 001a FFF7FEFF 		bl	set_dot
 34953              	.LVL2701:
6434:src/xeq.c     **** 
6435:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
6436:src/xeq.c     **** 	StopWatchRunning = 0;
 34954              		.loc 1 6436 2 view .LVU9411
 34955              		.loc 1 6436 19 is_stmt 0 view .LVU9412
 34956 001e 064B     		ldr	r3, .L2610+4
 34957 0020 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 34958 0022 6FF30002 		bfc	r2, #0, #1
6437:src/xeq.c     **** #endif
6438:src/xeq.c     **** #if defined(CONSOLE) && !defined(WP34STEST) && defined(DEBUG)
6439:src/xeq.c     **** 	{
6440:src/xeq.c     **** 		int i;
6441:src/xeq.c     **** 	/* Sanity check the function table indices.
6442:src/xeq.c     **** 	 * These indicies must correspond exactly with the enum definition.
6443:src/xeq.c     **** 	 * This code validates that this is true and prints error messages
6444:src/xeq.c     **** 	 * if it isn't.
6445:src/xeq.c     **** 	 */
6446:src/xeq.c     **** 	for (i=0; i<NUM_MONADIC; i++)
6447:src/xeq.c     **** 		if (monfuncs[i].n != i)
6448:src/xeq.c     **** 			bad_table("monadic function", i, monfuncs[i].fname, NAME_LEN);
6449:src/xeq.c     **** 	for (i=0; i<NUM_DYADIC; i++)
6450:src/xeq.c     **** 		if (dyfuncs[i].n != i)
6451:src/xeq.c     **** 			bad_table("dyadic function", i, dyfuncs[i].fname, NAME_LEN);
6452:src/xeq.c     **** 	for (i=0; i<NUM_TRIADIC; i++)
ARM GAS  /tmp/ccBFDvgN.s 			page 879


6453:src/xeq.c     **** 		if (trifuncs[i].n != i)
6454:src/xeq.c     **** 			bad_table("triadic function", i, trifuncs[i].fname, NAME_LEN);
6455:src/xeq.c     **** 	for (i=0; i<NUM_NILADIC; i++)
6456:src/xeq.c     **** 		if (niladics[i].n != i)
6457:src/xeq.c     **** 			bad_table("niladic function", i, niladics[i].nname, NAME_LEN);
6458:src/xeq.c     **** 	for (i=0; i<NUM_RARG; i++)
6459:src/xeq.c     **** 		if (argcmds[i].n != i)
6460:src/xeq.c     **** 			bad_table("argument command", i, argcmds[i].cmd, NAME_LEN);
6461:src/xeq.c     **** 	for (i=0; i<NUM_MULTI; i++)
6462:src/xeq.c     **** 		if (multicmds[i].n != i)
6463:src/xeq.c     **** 			bad_table("multi command", i, multicmds[i].cmd, NAME_LEN);
6464:src/xeq.c     **** 	check_const_cat();
6465:src/xeq.c     **** 	check_cat(CATALOGUE_COMPLEX, "complex");
6466:src/xeq.c     **** 	check_cat(CATALOGUE_STATS, "statistics");
6467:src/xeq.c     **** 	check_cat(CATALOGUE_SUMS, "summations");
6468:src/xeq.c     **** 	check_cat(CATALOGUE_PROB, "probability");
6469:src/xeq.c     **** 	check_cat(CATALOGUE_PROG, "programme");
6470:src/xeq.c     **** 	check_cat(CATALOGUE_MODE, "mode");
6471:src/xeq.c     **** 	check_cat(CATALOGUE_TEST, "tests");
6472:src/xeq.c     **** 	check_cat(CATALOGUE_INT, "int");
6473:src/xeq.c     **** 	check_cat(CATALOGUE_MATRIX, "matrix");
6474:src/xeq.c     **** 	/*
6475:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA, "alpha");
6476:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_LETTERS, "alpha special upper case letters");
6477:src/xeq.c     **** 	// check_cat(CATALOGUE_ALPHA_LETTERS_LOWER, "alpha special lower letters");
6478:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SUBSCRIPTS, "alpha subscripts");
6479:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SYMBOLS, "alpha symbols");
6480:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_COMPARES, "alpha compares");
6481:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_ARROWS, "alpha arrows");
6482:src/xeq.c     **** 	*/
6483:src/xeq.c     **** 	check_cat(CATALOGUE_CONV, "conversion");
6484:src/xeq.c     **** 	check_cat(CATALOGUE_NORMAL, "float");
6485:src/xeq.c     **** #ifdef INCLUDE_INTERNAL_CATALOGUE
6486:src/xeq.c     **** 	check_cat(CATALOGUE_INTERNAL, "internal");
6487:src/xeq.c     **** #endif
6488:src/xeq.c     ****         if (sizeof(unsigned long long int) != sizeof(UState))
6489:src/xeq.c     ****             error("sizeof register (%u) != sizeof user state (%u)\n", sizeof(unsigned long long int
6490:src/xeq.c     **** 	}
6491:src/xeq.c     **** #endif
6492:src/xeq.c     **** 	return cleared;
6493:src/xeq.c     **** }
 34959              		.loc 1 6493 1 view .LVU9413
 34960 0026 2046     		mov	r0, r4
6436:src/xeq.c     **** #endif
 34961              		.loc 1 6436 19 view .LVU9414
 34962 0028 1A70     		strb	r2, [r3]
6492:src/xeq.c     **** }
 34963              		.loc 1 6492 2 is_stmt 1 view .LVU9415
 34964              		.loc 1 6493 1 is_stmt 0 view .LVU9416
 34965 002a 10BD     		pop	{r4, pc}
 34966              	.LVL2702:
 34967              	.L2609:
6428:src/xeq.c     **** 	}
 34968              		.loc 1 6428 3 is_stmt 1 view .LVU9417
 34969 002c FFF7FEFF 		bl	reset
 34970              	.LVL2703:
6428:src/xeq.c     **** 	}
ARM GAS  /tmp/ccBFDvgN.s 			page 880


 34971              		.loc 1 6428 3 is_stmt 0 view .LVU9418
 34972 0030 EBE7     		b	.L2604
 34973              	.L2611:
 34974 0032 00BF     		.align	2
 34975              	.L2610:
 34976 0034 00000000 		.word	ShowRPN
 34977 0038 00000000 		.word	StopWatchStatus
 34978              		.cfi_endproc
 34979              	.LFE273:
 34981              		.section	.rodata.paste_raw_x.str1.4,"aMS",%progbits,1
 34982              		.align	2
 34983              	.LC9:
 34984 0000 0D0A0920 		.ascii	"\015\012\011 :;\000"
 34984      3A3B00
 34985              		.section	.text.paste_raw_x,"ax",%progbits
 34986              		.align	1
 34987              		.p2align 2,,3
 34988              		.global	paste_raw_x
 34989              		.syntax unified
 34990              		.thumb
 34991              		.thumb_func
 34992              		.fpu fpv4-sp-d16
 34994              	paste_raw_x:
 34995              	.LVL2704:
 34996              	.LFB274:
6494:src/xeq.c     **** 
6495:src/xeq.c     **** #ifndef REALBUILD
6496:src/xeq.c     **** 
6497:src/xeq.c     **** #include "string.h"
6498:src/xeq.c     **** 
6499:src/xeq.c     **** void paste_raw_x(const char *in)
6500:src/xeq.c     **** {
 34997              		.loc 1 6500 1 is_stmt 1 view -0
 34998              		.cfi_startproc
 34999              		@ args = 0, pretend = 0, frame = 40
 35000              		@ frame_needed = 0, uses_anonymous_args = 0
6501:src/xeq.c     **** 	char *buffer = strdup( in );
 35001              		.loc 1 6501 2 view .LVU9420
6500:src/xeq.c     **** 	char *buffer = strdup( in );
 35002              		.loc 1 6500 1 is_stmt 0 view .LVU9421
 35003 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 35004              		.cfi_def_cfa_offset 32
 35005              		.cfi_offset 4, -32
 35006              		.cfi_offset 5, -28
 35007              		.cfi_offset 6, -24
 35008              		.cfi_offset 7, -20
 35009              		.cfi_offset 8, -16
 35010              		.cfi_offset 9, -12
 35011              		.cfi_offset 10, -8
 35012              		.cfi_offset 14, -4
 35013 0004 8AB0     		sub	sp, sp, #40
 35014              		.cfi_def_cfa_offset 72
 35015              		.loc 1 6501 17 view .LVU9422
 35016 0006 FFF7FEFF 		bl	strdup
 35017              	.LVL2705:
6502:src/xeq.c     **** 
6503:src/xeq.c     **** 	if ( buffer ) {
ARM GAS  /tmp/ccBFDvgN.s 			page 881


 35018              		.loc 1 6503 2 is_stmt 1 view .LVU9423
 35019              		.loc 1 6503 5 is_stmt 0 view .LVU9424
 35020 000a 0028     		cmp	r0, #0
 35021 000c 5CD0     		beq	.L2613
 35022              	.LBB4655:
6504:src/xeq.c     **** 		static const char *delim = "\r\n\t :;";
 35023              		.loc 1 6504 3 is_stmt 1 view .LVU9425
6505:src/xeq.c     **** 		char *p = strtok( buffer, delim );
 35024              		.loc 1 6505 3 view .LVU9426
 35025              	.LBB4656:
 35026              	.LBB4657:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35027              		.loc 1 1229 6 is_stmt 0 view .LVU9427
 35028 000e 394D     		ldr	r5, .L2648
 35029              	.LBE4657:
 35030              	.LBE4656:
 35031              		.loc 1 6505 13 view .LVU9428
 35032 0010 3949     		ldr	r1, .L2648+4
 35033 0012 8146     		mov	r9, r0
 35034 0014 FFF7FEFF 		bl	strtok
 35035              	.LVL2706:
 35036              	.LBB4661:
 35037              	.LBB4658:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35038              		.loc 1 1229 5 view .LVU9429
 35039 0018 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 35040              	.LBE4658:
 35041              	.LBE4661:
 35042              		.loc 1 6505 13 view .LVU9430
 35043 001a 0446     		mov	r4, r0
 35044              	.LVL2707:
6506:src/xeq.c     **** 		process_cmdline();
 35045              		.loc 1 6506 3 is_stmt 1 view .LVU9431
 35046              	.LBB4662:
 35047              	.LBI4656:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 35048              		.loc 1 1226 6 view .LVU9432
 35049              	.LBB4659:
1227:src/xeq.c     **** 
 35050              		.loc 1 1227 2 view .LVU9433
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35051              		.loc 1 1229 2 view .LVU9434
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35052              		.loc 1 1229 5 is_stmt 0 view .LVU9435
 35053 001c 002B     		cmp	r3, #0
 35054 001e 5ED1     		bne	.L2644
 35055              	.LVL2708:
 35056              	.L2614:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35057              		.loc 1 1229 5 view .LVU9436
 35058              	.LBE4659:
 35059              	.LBE4662:
6507:src/xeq.c     **** 		while ( p ) {
 35060              		.loc 1 6507 9 is_stmt 1 view .LVU9437
 35061 0020 002C     		cmp	r4, #0
 35062 0022 4ED0     		beq	.L2622
 35063 0024 354E     		ldr	r6, .L2648+8
ARM GAS  /tmp/ccBFDvgN.s 			page 882


 35064              	.LBB4663:
 35065              	.LBB4664:
6508:src/xeq.c     **** 			char *pp = strchr( p, ',' );
6509:src/xeq.c     **** 			if ( pp ) {
6510:src/xeq.c     **** 				*pp = '.';
6511:src/xeq.c     **** 			}
6512:src/xeq.c     **** 			if (is_intmode()) {
6513:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
6514:src/xeq.c     **** 				lift_if_enabled();
6515:src/xeq.c     **** 				set_lift();
6516:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
6517:src/xeq.c     **** 			} else {
6518:src/xeq.c     **** 				decNumber x;
6519:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 35066              		.loc 1 6519 5 is_stmt 0 view .LVU9438
 35067 0026 DFF8DC80 		ldr	r8, .L2648+16
 35068              	.LBE4664:
6520:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
6521:src/xeq.c     **** 					lift_if_enabled();
6522:src/xeq.c     **** 					set_lift();
6523:src/xeq.c     **** 					setX(&x);
6524:src/xeq.c     **** 				}
6525:src/xeq.c     **** 				else {
6526:src/xeq.c     **** 					error_message(Error);
6527:src/xeq.c     **** 					Error = 0;
6528:src/xeq.c     **** 					break;
6529:src/xeq.c     **** 				}
6530:src/xeq.c     **** 			}
6531:src/xeq.c     **** 			p = strtok( NULL, delim );
 35069              		.loc 1 6531 8 view .LVU9439
 35070 002a 334F     		ldr	r7, .L2648+4
 35071 002c 21E0     		b	.L2623
 35072              	.LVL2709:
 35073              	.L2646:
 35074              	.LBB4683:
6513:src/xeq.c     **** 				lift_if_enabled();
 35075              		.loc 1 6513 5 is_stmt 1 view .LVU9440
6513:src/xeq.c     **** 				lift_if_enabled();
 35076              		.loc 1 6513 31 is_stmt 0 view .LVU9441
 35077 002e 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 35078              	.LBB4684:
 35079              	.LBB4685:
 35080              	.LBB4686:
 35081              	.LBB4687:
 744:src/xeq.c     **** }
 35082              		.loc 1 744 15 view .LVU9442
 35083 0032 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35084              	.LBE4687:
 35085              	.LBE4686:
 35086              	.LBE4685:
 35087              	.LBE4684:
6513:src/xeq.c     **** 				lift_if_enabled();
 35088              		.loc 1 6513 31 view .LVU9443
 35089 0034 AAF12D0A 		sub	r10, r10, #45
 35090 0038 BAFA8AFA 		clz	r10, r10
 35091              	.LBB4693:
 35092              	.LBB4690:
ARM GAS  /tmp/ccBFDvgN.s 			page 883


 748:src/xeq.c     **** 		lift();
 35093              		.loc 1 748 5 view .LVU9444
 35094 003c 5A06     		lsls	r2, r3, #25
 35095              	.LBE4690:
 35096              	.LBE4693:
6513:src/xeq.c     **** 				lift_if_enabled();
 35097              		.loc 1 6513 31 view .LVU9445
 35098 003e 4FEA5A1A 		lsr	r10, r10, #5
 35099              	.LVL2710:
6514:src/xeq.c     **** 				set_lift();
 35100              		.loc 1 6514 5 is_stmt 1 view .LVU9446
 35101              	.LBB4694:
 35102              	.LBI4684:
 747:src/xeq.c     **** 	if (get_lift())
 35103              		.loc 1 747 6 view .LVU9447
 35104              	.LBB4691:
 748:src/xeq.c     **** 		lift();
 35105              		.loc 1 748 2 view .LVU9448
 35106              	.LBB4689:
 35107              	.LBI4686:
 743:src/xeq.c     **** 	return State2.state_lift;
 35108              		.loc 1 743 12 view .LVU9449
 35109              	.LBB4688:
 744:src/xeq.c     **** }
 35110              		.loc 1 744 2 view .LVU9450
 35111              	.LBE4688:
 35112              	.LBE4689:
 748:src/xeq.c     **** 		lift();
 35113              		.loc 1 748 5 is_stmt 0 view .LVU9451
 35114 0042 46D4     		bmi	.L2645
 35115              	.LVL2711:
 35116              	.L2618:
 748:src/xeq.c     **** 		lift();
 35117              		.loc 1 748 5 view .LVU9452
 35118              	.LBE4691:
 35119              	.LBE4694:
6515:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
 35120              		.loc 1 6515 5 is_stmt 1 view .LVU9453
 35121              	.LBB4695:
 35122              	.LBI4695:
 767:src/xeq.c     ****     State2.state_lift = 1;
 35123              		.loc 1 767 6 view .LVU9454
 35124              	.LBB4696:
 768:src/xeq.c     **** }
 35125              		.loc 1 768 5 view .LVU9455
 768:src/xeq.c     **** }
 35126              		.loc 1 768 23 is_stmt 0 view .LVU9456
 35127 0044 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35128 0046 43F04003 		orr	r3, r3, #64
 35129 004a EB75     		strb	r3, [r5, #23]
 35130              	.LBE4696:
 35131              	.LBE4695:
6516:src/xeq.c     **** 			} else {
 35132              		.loc 1 6516 5 is_stmt 1 view .LVU9457
6516:src/xeq.c     **** 			} else {
 35133              		.loc 1 6516 50 is_stmt 0 view .LVU9458
 35134 004c FFF7FEFF 		bl	int_base
ARM GAS  /tmp/ccBFDvgN.s 			page 884


 35135              	.LVL2712:
6516:src/xeq.c     **** 			} else {
 35136              		.loc 1 6516 37 view .LVU9459
 35137 0050 5444     		add	r4, r4, r10
 35138              	.LVL2713:
6516:src/xeq.c     **** 			} else {
 35139              		.loc 1 6516 50 view .LVU9460
 35140 0052 0246     		mov	r2, r0
6516:src/xeq.c     **** 			} else {
 35141              		.loc 1 6516 5 view .LVU9461
 35142 0054 0021     		movs	r1, #0
 35143 0056 2046     		mov	r0, r4
 35144 0058 FFF7FEFF 		bl	strtoull
 35145              	.LVL2714:
 35146 005c 5246     		mov	r2, r10
 35147 005e FFF7FEFF 		bl	build_value
 35148              	.LVL2715:
 35149 0062 FFF7FEFF 		bl	setX_int
 35150              	.LVL2716:
 35151              	.LBE4683:
 35152              		.loc 1 6531 4 is_stmt 1 view .LVU9462
 35153              		.loc 1 6531 8 is_stmt 0 view .LVU9463
 35154 0066 3946     		mov	r1, r7
 35155 0068 0020     		movs	r0, #0
 35156 006a FFF7FEFF 		bl	strtok
 35157              	.LVL2717:
 35158              		.loc 1 6531 8 view .LVU9464
 35159              	.LBE4663:
6507:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 35160              		.loc 1 6507 9 is_stmt 1 view .LVU9465
 35161 006e 0446     		mov	r4, r0
 35162 0070 38B3     		cbz	r0, .L2622
 35163              	.LVL2718:
 35164              	.L2623:
 35165              	.LBB4702:
6508:src/xeq.c     **** 			if ( pp ) {
 35166              		.loc 1 6508 4 view .LVU9466
6508:src/xeq.c     **** 			if ( pp ) {
 35167              		.loc 1 6508 15 is_stmt 0 view .LVU9467
 35168 0072 2C21     		movs	r1, #44
 35169 0074 2046     		mov	r0, r4
 35170 0076 FFF7FEFF 		bl	strchr
 35171              	.LVL2719:
6509:src/xeq.c     **** 				*pp = '.';
 35172              		.loc 1 6509 4 is_stmt 1 view .LVU9468
6509:src/xeq.c     **** 				*pp = '.';
 35173              		.loc 1 6509 7 is_stmt 0 view .LVU9469
 35174 007a 08B1     		cbz	r0, .L2616
6510:src/xeq.c     **** 			}
 35175              		.loc 1 6510 5 is_stmt 1 view .LVU9470
6510:src/xeq.c     **** 			}
 35176              		.loc 1 6510 9 is_stmt 0 view .LVU9471
 35177 007c 2E23     		movs	r3, #46
 35178 007e 0370     		strb	r3, [r0]
 35179              	.L2616:
6512:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 35180              		.loc 1 6512 4 is_stmt 1 view .LVU9472
ARM GAS  /tmp/ccBFDvgN.s 			page 885


6512:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 35181              		.loc 1 6512 8 is_stmt 0 view .LVU9473
 35182 0080 3368     		ldr	r3, [r6]
 35183 0082 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
6512:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 35184              		.loc 1 6512 7 view .LVU9474
 35185 0086 13F0010A 		ands	r10, r3, #1
 35186 008a D0D1     		bne	.L2646
 35187              	.LBB4698:
6518:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 35188              		.loc 1 6518 5 is_stmt 1 view .LVU9475
6519:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 35189              		.loc 1 6519 5 view .LVU9476
 35190 008c 2146     		mov	r1, r4
 35191 008e 01A8     		add	r0, sp, #4
 35192              	.LVL2720:
6519:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 35193              		.loc 1 6519 5 is_stmt 0 view .LVU9477
 35194 0090 4246     		mov	r2, r8
 35195 0092 FFF7FEFF 		bl	decNumberFromString
 35196              	.LVL2721:
6520:src/xeq.c     **** 					lift_if_enabled();
 35197              		.loc 1 6520 5 is_stmt 1 view .LVU9478
6520:src/xeq.c     **** 					lift_if_enabled();
 35198              		.loc 1 6520 11 is_stmt 0 view .LVU9479
 35199 0096 01A8     		add	r0, sp, #4
 35200 0098 FFF7FEFF 		bl	check_special
 35201              	.LVL2722:
6520:src/xeq.c     **** 					lift_if_enabled();
 35202              		.loc 1 6520 8 view .LVU9480
 35203 009c 10BB     		cbnz	r0, .L2620
6521:src/xeq.c     **** 					set_lift();
 35204              		.loc 1 6521 6 is_stmt 1 view .LVU9481
 35205              	.LBB4665:
 35206              	.LBI4665:
 747:src/xeq.c     **** 	if (get_lift())
 35207              		.loc 1 747 6 view .LVU9482
 35208              	.LBB4666:
 748:src/xeq.c     **** 		lift();
 35209              		.loc 1 748 2 view .LVU9483
 35210              	.LBB4667:
 35211              	.LBI4667:
 743:src/xeq.c     **** 	return State2.state_lift;
 35212              		.loc 1 743 12 view .LVU9484
 35213              	.LBB4668:
 744:src/xeq.c     **** }
 35214              		.loc 1 744 2 view .LVU9485
 744:src/xeq.c     **** }
 35215              		.loc 1 744 15 is_stmt 0 view .LVU9486
 35216 009e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35217              	.LBE4668:
 35218              	.LBE4667:
 748:src/xeq.c     **** 		lift();
 35219              		.loc 1 748 5 view .LVU9487
 35220 00a0 5B06     		lsls	r3, r3, #25
 35221 00a2 19D4     		bmi	.L2647
 35222              	.L2621:
ARM GAS  /tmp/ccBFDvgN.s 			page 886


 35223              	.LBE4666:
 35224              	.LBE4665:
6522:src/xeq.c     **** 					setX(&x);
 35225              		.loc 1 6522 6 is_stmt 1 view .LVU9488
 35226              	.LBB4670:
 35227              	.LBI4670:
 767:src/xeq.c     ****     State2.state_lift = 1;
 35228              		.loc 1 767 6 view .LVU9489
 35229              	.LBB4671:
 768:src/xeq.c     **** }
 35230              		.loc 1 768 5 view .LVU9490
 768:src/xeq.c     **** }
 35231              		.loc 1 768 23 is_stmt 0 view .LVU9491
 35232 00a4 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35233              	.LBE4671:
 35234              	.LBE4670:
 35235              	.LBB4674:
 35236              	.LBB4675:
 829:src/xeq.c     **** }
 35237              		.loc 1 829 2 view .LVU9492
 35238 00a6 01A9     		add	r1, sp, #4
 35239              	.LBE4675:
 35240              	.LBE4674:
 35241              	.LBB4678:
 35242              	.LBB4672:
 768:src/xeq.c     **** }
 35243              		.loc 1 768 23 view .LVU9493
 35244 00a8 43F04003 		orr	r3, r3, #64
 35245              	.LBE4672:
 35246              	.LBE4678:
 35247              	.LBB4679:
 35248              	.LBB4676:
 829:src/xeq.c     **** }
 35249              		.loc 1 829 2 view .LVU9494
 35250 00ac 6420     		movs	r0, #100
 35251              	.LBE4676:
 35252              	.LBE4679:
 35253              	.LBB4680:
 35254              	.LBB4673:
 768:src/xeq.c     **** }
 35255              		.loc 1 768 23 view .LVU9495
 35256 00ae EB75     		strb	r3, [r5, #23]
 35257              	.LBE4673:
 35258              	.LBE4680:
6523:src/xeq.c     **** 				}
 35259              		.loc 1 6523 6 is_stmt 1 view .LVU9496
 35260              	.LVL2723:
 35261              	.LBB4681:
 35262              	.LBI4674:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 35263              		.loc 1 828 6 view .LVU9497
 35264              	.LBB4677:
 829:src/xeq.c     **** }
 35265              		.loc 1 829 2 view .LVU9498
 35266 00b0 FFF7FEFF 		bl	setRegister
 35267              	.LVL2724:
 829:src/xeq.c     **** }
ARM GAS  /tmp/ccBFDvgN.s 			page 887


 35268              		.loc 1 829 2 is_stmt 0 view .LVU9499
 35269              	.LBE4677:
 35270              	.LBE4681:
 35271              	.LBE4698:
 35272              		.loc 1 6531 4 is_stmt 1 view .LVU9500
 35273              		.loc 1 6531 8 is_stmt 0 view .LVU9501
 35274 00b4 3946     		mov	r1, r7
 35275 00b6 0020     		movs	r0, #0
 35276 00b8 FFF7FEFF 		bl	strtok
 35277              	.LVL2725:
 35278              		.loc 1 6531 8 view .LVU9502
 35279              	.LBE4702:
6507:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 35280              		.loc 1 6507 9 is_stmt 1 view .LVU9503
 35281 00bc 0446     		mov	r4, r0
 35282 00be 0028     		cmp	r0, #0
 35283 00c0 D7D1     		bne	.L2623
 35284              	.LVL2726:
 35285              	.L2622:
6532:src/xeq.c     **** 		}
6533:src/xeq.c     **** 		free( buffer );
 35286              		.loc 1 6533 3 view .LVU9504
 35287 00c2 4846     		mov	r0, r9
 35288 00c4 FFF7FEFF 		bl	free
 35289              	.LVL2727:
 35290              	.L2613:
 35291              		.loc 1 6533 3 is_stmt 0 view .LVU9505
 35292              	.LBE4655:
6534:src/xeq.c     **** 	}
6535:src/xeq.c     **** 	display();
 35293              		.loc 1 6535 2 is_stmt 1 view .LVU9506
 35294 00c8 FFF7FEFF 		bl	display
 35295              	.LVL2728:
6536:src/xeq.c     **** }
 35296              		.loc 1 6536 1 is_stmt 0 view .LVU9507
 35297 00cc 0AB0     		add	sp, sp, #40
 35298              		.cfi_remember_state
 35299              		.cfi_def_cfa_offset 32
 35300              		@ sp needed
 35301 00ce BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 35302              	.LVL2729:
 35303              	.L2645:
 35304              		.cfi_restore_state
 35305              	.LBB4706:
 35306              	.LBB4703:
 35307              	.LBB4699:
 35308              	.LBB4697:
 35309              	.LBB4692:
 749:src/xeq.c     **** }
 35310              		.loc 1 749 3 is_stmt 1 view .LVU9508
 35311 00d2 FFF7FEFF 		bl	lift
 35312              	.LVL2730:
 749:src/xeq.c     **** }
 35313              		.loc 1 749 3 is_stmt 0 view .LVU9509
 35314 00d6 B5E7     		b	.L2618
 35315              	.LVL2731:
 35316              	.L2647:
ARM GAS  /tmp/ccBFDvgN.s 			page 888


 749:src/xeq.c     **** }
 35317              		.loc 1 749 3 view .LVU9510
 35318              	.LBE4692:
 35319              	.LBE4697:
 35320              	.LBE4699:
 35321              	.LBB4700:
 35322              	.LBB4682:
 35323              	.LBB4669:
 749:src/xeq.c     **** }
 35324              		.loc 1 749 3 is_stmt 1 view .LVU9511
 35325 00d8 FFF7FEFF 		bl	lift
 35326              	.LVL2732:
 35327 00dc E2E7     		b	.L2621
 35328              	.LVL2733:
 35329              	.L2644:
 749:src/xeq.c     **** }
 35330              		.loc 1 749 3 is_stmt 0 view .LVU9512
 35331              	.LBE4669:
 35332              	.LBE4682:
 35333              	.LBE4700:
 35334              	.LBE4703:
 35335              	.LBB4704:
 35336              	.LBB4660:
 35337 00de FFF7FEFF 		bl	process_cmdline.part.0
 35338              	.LVL2734:
 749:src/xeq.c     **** }
 35339              		.loc 1 749 3 view .LVU9513
 35340 00e2 9DE7     		b	.L2614
 35341              	.L2620:
 749:src/xeq.c     **** }
 35342              		.loc 1 749 3 view .LVU9514
 35343              	.LBE4660:
 35344              	.LBE4704:
 35345              	.LBB4705:
 35346              	.LBB4701:
6526:src/xeq.c     **** 					Error = 0;
 35347              		.loc 1 6526 6 is_stmt 1 view .LVU9515
 35348 00e4 064C     		ldr	r4, .L2648+12
 35349              	.LVL2735:
6526:src/xeq.c     **** 					Error = 0;
 35350              		.loc 1 6526 6 is_stmt 0 view .LVU9516
 35351 00e6 2068     		ldr	r0, [r4]
 35352 00e8 FFF7FEFF 		bl	error_message
 35353              	.LVL2736:
6527:src/xeq.c     **** 					break;
 35354              		.loc 1 6527 6 is_stmt 1 view .LVU9517
6527:src/xeq.c     **** 					break;
 35355              		.loc 1 6527 12 is_stmt 0 view .LVU9518
 35356 00ec C4F800A0 		str	r10, [r4]
6528:src/xeq.c     **** 				}
 35357              		.loc 1 6528 6 is_stmt 1 view .LVU9519
 35358 00f0 E7E7     		b	.L2622
 35359              	.L2649:
 35360 00f2 00BF     		.align	2
 35361              	.L2648:
 35362 00f4 00000000 		.word	StateWhileOn
 35363 00f8 00000000 		.word	.LC9
ARM GAS  /tmp/ccBFDvgN.s 			page 889


 35364 00fc 00000000 		.word	main_ram
 35365 0100 00000000 		.word	Error
 35366 0104 00000000 		.word	Ctx
 35367              	.LBE4701:
 35368              	.LBE4705:
 35369              	.LBE4706:
 35370              		.cfi_endproc
 35371              	.LFE274:
 35373              		.global	__aeabi_uldivmod
 35374              		.section	.rodata.fill_buffer_from_raw_x.str1.4,"aMS",%progbits,1
 35375              		.align	2
 35376              	.LC10:
 35377 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 35377      34353637 
 35377      38394142 
 35377      43444546 
 35377      00
 35378              		.section	.text.fill_buffer_from_raw_x,"ax",%progbits
 35379              		.align	1
 35380              		.p2align 2,,3
 35381              		.global	fill_buffer_from_raw_x
 35382              		.syntax unified
 35383              		.thumb
 35384              		.thumb_func
 35385              		.fpu fpv4-sp-d16
 35387              	fill_buffer_from_raw_x:
 35388              	.LVL2737:
 35389              	.LFB275:
6537:src/xeq.c     **** 
6538:src/xeq.c     **** char* fill_buffer_from_raw_x(char *buffer)
6539:src/xeq.c     **** {
 35390              		.loc 1 6539 1 view -0
 35391              		.cfi_startproc
 35392              		@ args = 0, pretend = 0, frame = 40
 35393              		@ frame_needed = 0, uses_anonymous_args = 0
6540:src/xeq.c     **** 	process_cmdline();
 35394              		.loc 1 6540 2 view .LVU9521
 35395              	.LBB4707:
 35396              	.LBI4707:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 35397              		.loc 1 1226 6 view .LVU9522
 35398              	.LBB4708:
1227:src/xeq.c     **** 
 35399              		.loc 1 1227 2 view .LVU9523
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35400              		.loc 1 1229 2 view .LVU9524
 35401              	.LBE4708:
 35402              	.LBE4707:
6539:src/xeq.c     **** 	process_cmdline();
 35403              		.loc 1 6539 1 is_stmt 0 view .LVU9525
 35404 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 35405              		.cfi_def_cfa_offset 36
 35406              		.cfi_offset 4, -36
 35407              		.cfi_offset 5, -32
 35408              		.cfi_offset 6, -28
 35409              		.cfi_offset 7, -24
 35410              		.cfi_offset 8, -20
ARM GAS  /tmp/ccBFDvgN.s 			page 890


 35411              		.cfi_offset 9, -16
 35412              		.cfi_offset 10, -12
 35413              		.cfi_offset 11, -8
 35414              		.cfi_offset 14, -4
 35415              	.LBB4712:
 35416              	.LBB4709:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35417              		.loc 1 1229 6 view .LVU9526
 35418 0004 2F4B     		ldr	r3, .L2674
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35419              		.loc 1 1229 5 view .LVU9527
 35420 0006 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 35421              	.LBE4709:
 35422              	.LBE4712:
6539:src/xeq.c     **** 	process_cmdline();
 35423              		.loc 1 6539 1 view .LVU9528
 35424 0008 8BB0     		sub	sp, sp, #44
 35425              		.cfi_def_cfa_offset 80
6539:src/xeq.c     **** 	process_cmdline();
 35426              		.loc 1 6539 1 view .LVU9529
 35427 000a 0446     		mov	r4, r0
 35428              	.LBB4713:
 35429              	.LBB4710:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35430              		.loc 1 1229 5 view .LVU9530
 35431 000c 002B     		cmp	r3, #0
 35432 000e 55D1     		bne	.L2671
 35433              	.LVL2738:
 35434              	.L2651:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35435              		.loc 1 1229 5 view .LVU9531
 35436              	.LBE4710:
 35437              	.LBE4713:
6541:src/xeq.c     **** 	if (is_intmode()) {
 35438              		.loc 1 6541 2 is_stmt 1 view .LVU9532
 35439              		.loc 1 6541 6 is_stmt 0 view .LVU9533
 35440 0010 2D4D     		ldr	r5, .L2674+4
 35441 0012 2B68     		ldr	r3, [r5]
 35442 0014 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 35443              		.loc 1 6541 5 view .LVU9534
 35444 0018 DA07     		lsls	r2, r3, #31
 35445 001a 2CD5     		bpl	.L2652
 35446              	.LBB4714:
6542:src/xeq.c     **** 		int sgn;
 35447              		.loc 1 6542 3 is_stmt 1 view .LVU9535
6543:src/xeq.c     **** 		unsigned long long int x = extract_value(get_reg_n_int(regX_idx), &sgn);
 35448              		.loc 1 6543 3 view .LVU9536
 35449              		.loc 1 6543 30 is_stmt 0 view .LVU9537
 35450 001c 6420     		movs	r0, #100
 35451 001e FFF7FEFF 		bl	get_reg_n_int
 35452              	.LVL2739:
 35453 0022 01AA     		add	r2, sp, #4
 35454 0024 FFF7FEFF 		bl	extract_value
 35455              	.LVL2740:
 35456 0028 0646     		mov	r6, r0
 35457 002a 0F46     		mov	r7, r1
 35458              	.LVL2741:
ARM GAS  /tmp/ccBFDvgN.s 			page 891


6544:src/xeq.c     **** 		const int base = int_base();
 35459              		.loc 1 6544 3 is_stmt 1 view .LVU9538
 35460              		.loc 1 6544 20 is_stmt 0 view .LVU9539
 35461 002c FFF7FEFF 		bl	int_base
 35462              	.LVL2742:
6545:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
6546:src/xeq.c     **** 
6547:src/xeq.c     **** 		*p-- = '\0';
 35463              		.loc 1 6547 8 view .LVU9540
 35464 0030 0023     		movs	r3, #0
 35465              	.LVL2743:
6545:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
 35466              		.loc 1 6545 3 is_stmt 1 view .LVU9541
 35467              		.loc 1 6547 3 view .LVU9542
 35468              		.loc 1 6547 8 is_stmt 0 view .LVU9543
 35469 0032 E370     		strb	r3, [r4, #3]
6548:src/xeq.c     **** 		if (x == 0)
 35470              		.loc 1 6548 3 is_stmt 1 view .LVU9544
 35471              		.loc 1 6548 6 is_stmt 0 view .LVU9545
 35472 0034 56EA0703 		orrs	r3, r6, r7
 35473 0038 35D0     		beq	.L2672
 35474 003a 244D     		ldr	r5, .L2674+8
6547:src/xeq.c     **** 		if (x == 0)
 35475              		.loc 1 6547 5 view .LVU9546
 35476 003c 0234     		adds	r4, r4, #2
 35477              	.LVL2744:
6547:src/xeq.c     **** 		if (x == 0)
 35478              		.loc 1 6547 5 view .LVU9547
 35479 003e 8046     		mov	r8, r0
 35480 0040 4FEAE079 		asr	r9, r0, #31
 35481              	.LVL2745:
 35482              	.L2655:
 35483              	.LBB4715:
6549:src/xeq.c     **** 			*p-- = '0'; 
6550:src/xeq.c     **** 		else {
6551:src/xeq.c     **** 			while (x != 0) {
6552:src/xeq.c     **** 				const int n = x % base;
 35484              		.loc 1 6552 5 is_stmt 1 view .LVU9548
 35485 0044 3046     		mov	r0, r6
 35486 0046 3946     		mov	r1, r7
 35487 0048 4246     		mov	r2, r8
 35488 004a 4B46     		mov	r3, r9
 35489 004c FFF7FEFF 		bl	__aeabi_uldivmod
 35490              	.LVL2746:
6553:src/xeq.c     **** 				x /= base;
 35491              		.loc 1 6553 5 view .LVU9549
 35492 0050 BB46     		mov	fp, r7
 35493 0052 B246     		mov	r10, r6
 35494              	.LBE4715:
6551:src/xeq.c     **** 				const int n = x % base;
 35495              		.loc 1 6551 10 is_stmt 0 view .LVU9550
 35496 0054 CB45     		cmp	fp, r9
 35497              	.LBB4716:
6554:src/xeq.c     **** 				*p-- = n["0123456789ABCDEF"];
 35498              		.loc 1 6554 10 view .LVU9551
 35499 0056 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 35500 0058 04F80139 		strb	r3, [r4], #-1
ARM GAS  /tmp/ccBFDvgN.s 			page 892


 35501              	.LVL2747:
 35502              		.loc 1 6554 10 view .LVU9552
 35503              	.LBE4716:
6551:src/xeq.c     **** 				const int n = x % base;
 35504              		.loc 1 6551 10 view .LVU9553
 35505 005c 08BF     		it	eq
 35506 005e C245     		cmpeq	r10, r8
 35507              	.LBB4717:
6553:src/xeq.c     **** 				x /= base;
 35508              		.loc 1 6553 7 view .LVU9554
 35509 0060 0646     		mov	r6, r0
 35510              	.LVL2748:
6553:src/xeq.c     **** 				x /= base;
 35511              		.loc 1 6553 7 view .LVU9555
 35512 0062 0F46     		mov	r7, r1
 35513              	.LVL2749:
 35514              		.loc 1 6554 5 is_stmt 1 view .LVU9556
 35515              		.loc 1 6554 5 is_stmt 0 view .LVU9557
 35516              	.LBE4717:
6551:src/xeq.c     **** 				const int n = x % base;
 35517              		.loc 1 6551 10 is_stmt 1 view .LVU9558
 35518 0064 EED2     		bcs	.L2655
6555:src/xeq.c     **** 			}
6556:src/xeq.c     **** 		}
6557:src/xeq.c     **** 		if (sgn)
 35519              		.loc 1 6557 3 view .LVU9559
 35520              		.loc 1 6557 6 is_stmt 0 view .LVU9560
 35521 0066 019B     		ldr	r3, [sp, #4]
 35522 0068 1BB3     		cbz	r3, .L2656
 35523              	.LVL2750:
 35524              	.L2673:
6558:src/xeq.c     **** 			*p = '-';
 35525              		.loc 1 6558 4 is_stmt 1 view .LVU9561
 35526              		.loc 1 6558 7 is_stmt 0 view .LVU9562
 35527 006a 2D23     		movs	r3, #45
 35528 006c 2370     		strb	r3, [r4]
 35529              	.LVL2751:
 35530              	.L2650:
 35531              		.loc 1 6558 7 view .LVU9563
 35532              	.LBE4714:
6559:src/xeq.c     **** 		else
6560:src/xeq.c     **** 			p++;
6561:src/xeq.c     **** 		return p;
6562:src/xeq.c     **** 	} else {
6563:src/xeq.c     **** 		decNumber x;
6564:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
6565:src/xeq.c     **** 		if (UState.fraccomma) {
6566:src/xeq.c     **** 			char *p = strchr(buffer, '.');
6567:src/xeq.c     **** 			if (p != NULL)
6568:src/xeq.c     **** 				*p = ',';
6569:src/xeq.c     **** 		}
6570:src/xeq.c     **** 
6571:src/xeq.c     **** 		return buffer;
6572:src/xeq.c     **** 	}
6573:src/xeq.c     **** }
 35533              		.loc 1 6573 1 view .LVU9564
 35534 006e 2046     		mov	r0, r4
ARM GAS  /tmp/ccBFDvgN.s 			page 893


 35535 0070 0BB0     		add	sp, sp, #44
 35536              		.cfi_remember_state
 35537              		.cfi_def_cfa_offset 36
 35538              		@ sp needed
 35539 0072 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35540              	.LVL2752:
 35541              	.L2652:
 35542              		.cfi_restore_state
 35543              	.LBB4718:
6563:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
 35544              		.loc 1 6563 3 is_stmt 1 view .LVU9565
6564:src/xeq.c     **** 		if (UState.fraccomma) {
 35545              		.loc 1 6564 3 view .LVU9566
 35546              	.LBB4719:
 35547              	.LBI4719:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 35548              		.loc 1 824 12 view .LVU9567
 35549              	.LBB4720:
 825:src/xeq.c     **** }
 35550              		.loc 1 825 2 view .LVU9568
 825:src/xeq.c     **** }
 35551              		.loc 1 825 9 is_stmt 0 view .LVU9569
 35552 0076 6421     		movs	r1, #100
 35553 0078 01A8     		add	r0, sp, #4
 35554              	.LVL2753:
 825:src/xeq.c     **** }
 35555              		.loc 1 825 9 view .LVU9570
 35556 007a FFF7FEFF 		bl	getRegister
 35557              	.LVL2754:
 825:src/xeq.c     **** }
 35558              		.loc 1 825 9 view .LVU9571
 35559              	.LBE4720:
 35560              	.LBE4719:
6564:src/xeq.c     **** 		if (UState.fraccomma) {
 35561              		.loc 1 6564 3 view .LVU9572
 35562 007e 2146     		mov	r1, r4
 35563 0080 FFF7FEFF 		bl	decNumberToString
 35564              	.LVL2755:
6565:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35565              		.loc 1 6565 3 is_stmt 1 view .LVU9573
6565:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35566              		.loc 1 6565 7 is_stmt 0 view .LVU9574
 35567 0084 2B68     		ldr	r3, [r5]
 35568 0086 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
6565:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35569              		.loc 1 6565 6 view .LVU9575
 35570 008a 9B06     		lsls	r3, r3, #26
 35571 008c EFD5     		bpl	.L2650
 35572              	.LBB4721:
6566:src/xeq.c     **** 			if (p != NULL)
 35573              		.loc 1 6566 4 is_stmt 1 view .LVU9576
6566:src/xeq.c     **** 			if (p != NULL)
 35574              		.loc 1 6566 14 is_stmt 0 view .LVU9577
 35575 008e 2E21     		movs	r1, #46
 35576 0090 2046     		mov	r0, r4
 35577 0092 FFF7FEFF 		bl	strchr
 35578              	.LVL2756:
ARM GAS  /tmp/ccBFDvgN.s 			page 894


6567:src/xeq.c     **** 				*p = ',';
 35579              		.loc 1 6567 4 is_stmt 1 view .LVU9578
6567:src/xeq.c     **** 				*p = ',';
 35580              		.loc 1 6567 7 is_stmt 0 view .LVU9579
 35581 0096 0028     		cmp	r0, #0
 35582 0098 E9D0     		beq	.L2650
6568:src/xeq.c     **** 		}
 35583              		.loc 1 6568 5 is_stmt 1 view .LVU9580
6568:src/xeq.c     **** 		}
 35584              		.loc 1 6568 8 is_stmt 0 view .LVU9581
 35585 009a 2C23     		movs	r3, #44
 35586 009c 0370     		strb	r3, [r0]
 35587              	.LBE4721:
6571:src/xeq.c     **** 	}
 35588              		.loc 1 6571 3 is_stmt 1 view .LVU9582
 35589              	.LBE4718:
 35590              		.loc 1 6573 1 is_stmt 0 view .LVU9583
 35591 009e 2046     		mov	r0, r4
 35592              	.LVL2757:
 35593              		.loc 1 6573 1 view .LVU9584
 35594 00a0 0BB0     		add	sp, sp, #44
 35595              		.cfi_remember_state
 35596              		.cfi_def_cfa_offset 36
 35597              		@ sp needed
 35598 00a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35599              	.LVL2758:
 35600              	.L2672:
 35601              		.cfi_restore_state
 35602              	.LBB4722:
6549:src/xeq.c     **** 		else {
 35603              		.loc 1 6549 4 is_stmt 1 view .LVU9585
6549:src/xeq.c     **** 		else {
 35604              		.loc 1 6549 9 is_stmt 0 view .LVU9586
 35605 00a6 3023     		movs	r3, #48
 35606 00a8 A370     		strb	r3, [r4, #2]
6557:src/xeq.c     **** 			*p = '-';
 35607              		.loc 1 6557 6 view .LVU9587
 35608 00aa 019B     		ldr	r3, [sp, #4]
6549:src/xeq.c     **** 		else {
 35609              		.loc 1 6549 6 view .LVU9588
 35610 00ac 0134     		adds	r4, r4, #1
 35611              	.LVL2759:
6557:src/xeq.c     **** 			*p = '-';
 35612              		.loc 1 6557 3 is_stmt 1 view .LVU9589
6557:src/xeq.c     **** 			*p = '-';
 35613              		.loc 1 6557 6 is_stmt 0 view .LVU9590
 35614 00ae 002B     		cmp	r3, #0
 35615 00b0 DBD1     		bne	.L2673
 35616              	.LVL2760:
 35617              	.L2656:
6560:src/xeq.c     **** 		return p;
 35618              		.loc 1 6560 4 is_stmt 1 view .LVU9591
6560:src/xeq.c     **** 		return p;
 35619              		.loc 1 6560 5 is_stmt 0 view .LVU9592
 35620 00b2 0134     		adds	r4, r4, #1
 35621              	.LVL2761:
6561:src/xeq.c     **** 	} else {
ARM GAS  /tmp/ccBFDvgN.s 			page 895


 35622              		.loc 1 6561 3 is_stmt 1 view .LVU9593
 35623              	.LBE4722:
 35624              		.loc 1 6573 1 is_stmt 0 view .LVU9594
 35625 00b4 2046     		mov	r0, r4
 35626 00b6 0BB0     		add	sp, sp, #44
 35627              		.cfi_remember_state
 35628              		.cfi_def_cfa_offset 36
 35629              		@ sp needed
 35630 00b8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35631              	.LVL2762:
 35632              	.L2671:
 35633              		.cfi_restore_state
 35634              	.LBB4723:
 35635              	.LBB4711:
 35636              		.loc 1 6573 1 view .LVU9595
 35637 00bc FFF7FEFF 		bl	process_cmdline.part.0
 35638              	.LVL2763:
 35639              		.loc 1 6573 1 view .LVU9596
 35640 00c0 A6E7     		b	.L2651
 35641              	.L2675:
 35642 00c2 00BF     		.align	2
 35643              	.L2674:
 35644 00c4 00000000 		.word	StateWhileOn
 35645 00c8 00000000 		.word	main_ram
 35646 00cc 00000000 		.word	.LC10
 35647              	.LBE4711:
 35648              	.LBE4723:
 35649              		.cfi_endproc
 35650              	.LFE275:
 35652              		.comm	RectPolConv,4,4
 35653              		.comm	StackBase,4,4
 35654              		.comm	RetStk,4,4
 35655              		.comm	ProgFree,4,4
 35656              		.comm	RetStkSize,4,4
 35657              		.comm	TraceBuffer,25,4
 35658              		.comm	Ctx,24,4
 35659              		.comm	UserLocalRegs,4,4
 35660              		.comm	XromUserPc,4,4
 35661              		.comm	ShowRegister,4,4
 35662              		.comm	XeqOpCode,2,2
 35663              		.comm	PcWrapped,4,4
 35664              		.comm	Error,4,4
 35665              		.comm	Busy,4,4
 35666              		.comm	Pause,1,1
 35667              		.comm	JustStopped,4,4
 35668              		.comm	XromRunning,4,4
 35669              		.comm	Running,4,4
 35670              		.global	xrom_targets
 35671              		.section	.rodata
 35672              		.align	2
 35673              		.set	.LANCHOR5,. + 0
 35674              	.LC1:
 35675 0000 0C0C0C0C 		.ascii	"\014\014\014\014\014\014\014\014\014\013\013\013\014"
 35675      0C0C0C0C 
 35675      0C0B0B0B 
 35675      0C
 35676 000d 0C0A0A0C 		.ascii	"\014\012\012\014\014\014\007\010\011\014\014\014\004"
ARM GAS  /tmp/ccBFDvgN.s 			page 896


 35676      0C0C0708 
 35676      090C0C0C 
 35676      04
 35677 001a 05060C0C 		.ascii	"\005\006\014\014\014\001\002\003\014\014\014\000\012"
 35677      0C010203 
 35677      0C0C0C00 
 35677      0A
 35678 0027 0C0C     		.ascii	"\014\014"
 35679              		.section	.bss.result.11636,"aw",%nobits
 35680              		.align	2
 35681              		.set	.LANCHOR2,. + 0
 35684              	result.11636:
 35685 0000 00000000 		.space	16
 35685      00000000 
 35685      00000000 
 35685      00000000 
 35686              		.section	.data.RegionTab,"aw"
 35687              		.align	2
 35688              		.set	.LANCHOR0,. + 0
 35691              	RegionTab:
 35692 0000 00000000 		.word	0
 35693 0004 00000000 		.word	0
 35694 0008 00000000 		.word	0
 35695 000c 00000000 		.word	xrom
 35696              		.section	.rodata.StackRegMask,"a"
 35697              		.align	2
 35698              		.set	.LANCHOR3,. + 0
 35701              	StackRegMask:
 35702 0000 0F01     		.short	271
 35703 0002 FF01     		.short	511
 35704              		.section	.rodata.convergence_tolerances,"a"
 35705              		.align	2
 35706              		.set	.LANCHOR7,. + 0
 35709              	convergence_tolerances:
 35710 0000 00000000 		.word	const_1e_14
 35711 0004 00000000 		.word	const_1e_24
 35712 0008 00000000 		.word	const_1e_32
 35713              		.section	.rodata.modes.11329,"a"
 35714              		.align	2
 35715              		.set	.LANCHOR1,. + 0
 35718              	modes.11329:
 35719 0000 03020401 		.ascii	"\003\002\004\001\005\000\006"
 35719      050006
 35720              		.section	.rodata.modes.11846,"a"
 35721              		.align	2
 35722              		.set	.LANCHOR4,. + 0
 35725              	modes.11846:
 35726 0000 02010081 		.ascii	"\002\001\000\201"
 35727              		.section	.rodata.xrom_targets,"a"
 35728              		.align	2
 35729              		.set	.LANCHOR6,. + 0
 35732              	xrom_targets:
 35733 0000 9107     		.short	1937
 35734 0002 B70B     		.short	2999
 35735 0004 4602     		.short	582
 35736 0006 4402     		.short	580
 35737 0008 420A     		.short	2626
ARM GAS  /tmp/ccBFDvgN.s 			page 897


 35738 000a 340A     		.short	2612
 35739 000c 100C     		.short	3088
 35740 000e 9C05     		.short	1436
 35741 0010 3B0A     		.short	2619
 35742 0012 5A06     		.short	1626
 35743 0014 6F06     		.short	1647
 35744 0016 6B06     		.short	1643
 35745 0018 6406     		.short	1636
 35746 001a 390A     		.short	2617
 35747 001c 7206     		.short	1650
 35748 001e 7506     		.short	1653
 35749 0020 7706     		.short	1655
 35750 0022 5D06     		.short	1629
 35751 0024 5707     		.short	1879
 35752 0026 4F08     		.short	2127
 35753 0028 EB05     		.short	1515
 35754 002a 0405     		.short	1284
 35755 002c 2907     		.short	1833
 35756 002e 8205     		.short	1410
 35757 0030 9A05     		.short	1434
 35758 0032 EC05     		.short	1516
 35759 0034 490A     		.short	2633
 35760              		.text
 35761              	.Letext0:
 35762              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 35763              		.file 3 "dmcp/dmcp.h"
 35764              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 35765              		.file 5 "/usr/include/newlib/sys/_types.h"
 35766              		.file 6 "/usr/include/newlib/sys/reent.h"
 35767              		.file 7 "/usr/include/newlib/sys/lock.h"
 35768              		.file 8 "/usr/include/newlib/stdlib.h"
 35769              		.file 9 "src/decNumber/decContext.h"
 35770              		.file 10 "src/decNumber/decNumber.h"
 35771              		.file 11 "src/decNumber/decimal64.h"
 35772              		.file 12 "src/decNumber/decimal128.h"
 35773              		.file 13 "src/xeq.h"
 35774              		.file 14 "src/data.h"
 35775              		.file 15 "src/keys.h"
 35776              		.file 16 "src/menu.h"
 35777              		.file 17 "src/storage.h"
 35778              		.file 18 "src/stats.h"
 35779              		.file 19 "src/display.h"
 35780              		.file 20 "src/consts.h"
 35781              		.file 21 "src/xrom.h"
 35782              		.file 22 "src/stopwatch.h"
 35783              		.file 23 "src/pretty.h"
 35784              		.file 24 "src/xrom_targets.c"
 35785              		.file 25 "src/int.h"
 35786              		.file 26 "/usr/include/newlib/string.h"
 35787              		.file 27 "src/lcd.h"
 35788              		.file 28 "src/decn.h"
 35789              		.file 29 "src/complex.h"
 35790              		.file 30 "/usr/include/newlib/stdio.h"
 35791              		.file 31 "src/alpha.h"
ARM GAS  /tmp/ccBFDvgN.s 			page 898


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xeq.c
     /tmp/ccBFDvgN.s:18     .text.find_section_bounds:0000000000000000 $t
     /tmp/ccBFDvgN.s:26     .text.find_section_bounds:0000000000000000 find_section_bounds
     /tmp/ccBFDvgN.s:164    .text.find_section_bounds:0000000000000068 $d
     /tmp/ccBFDvgN.s:172    .text.reg_address:0000000000000000 $t
     /tmp/ccBFDvgN.s:179    .text.reg_address:0000000000000000 reg_address
     /tmp/ccBFDvgN.s:293    .text.reg_address:0000000000000058 $d
     /tmp/ccBFDvgN.s:300    .text.retstk_up:0000000000000000 $t
     /tmp/ccBFDvgN.s:307    .text.retstk_up:0000000000000000 retstk_up
     /tmp/ccBFDvgN.s:440    .text.retstk_up:000000000000006c $d
                            *COM*:0000000000000004 RetStk
     /tmp/ccBFDvgN.s:447    .text.flag_word:0000000000000000 $t
     /tmp/ccBFDvgN.s:454    .text.flag_word:0000000000000000 flag_word
     /tmp/ccBFDvgN.s:574    .text.flag_word:000000000000006c $d
     /tmp/ccBFDvgN.s:581    .text.set_zero:0000000000000000 $t
     /tmp/ccBFDvgN.s:588    .text.set_zero:0000000000000000 set_zero
     /tmp/ccBFDvgN.s:627    .text.set_zero:0000000000000020 $d
     /tmp/ccBFDvgN.s:634    .text.intResult:0000000000000000 $t
     /tmp/ccBFDvgN.s:641    .text.intResult:0000000000000000 intResult
     /tmp/ccBFDvgN.s:841    .text.intResult:00000000000000a4 $d
                            *COM*:0000000000000004 Error
     /tmp/ccBFDvgN.s:847    .text.check_stack_overlap:0000000000000000 $t
     /tmp/ccBFDvgN.s:854    .text.check_stack_overlap:0000000000000000 check_stack_overlap
     /tmp/ccBFDvgN.s:1068   .text.check_stack_overlap:0000000000000068 $d
     /tmp/ccBFDvgN.s:1075   .text.is_xrom:0000000000000000 $t
     /tmp/ccBFDvgN.s:1083   .text.is_xrom:0000000000000000 is_xrom
     /tmp/ccBFDvgN.s:1104   .text.is_xrom:0000000000000018 $d
     /tmp/ccBFDvgN.s:1109   .text.move_retstk:0000000000000000 $t
     /tmp/ccBFDvgN.s:1117   .text.move_retstk:0000000000000000 move_retstk
     /tmp/ccBFDvgN.s:1300   .text.move_retstk:000000000000006c $d
                            *COM*:0000000000000004 RetStkSize
     /tmp/ccBFDvgN.s:1309   .text.local_levels:0000000000000000 $t
     /tmp/ccBFDvgN.s:1317   .text.local_levels:0000000000000000 local_levels
     /tmp/ccBFDvgN.s:1346   .text.local_levels:0000000000000020 $d
     /tmp/ccBFDvgN.s:1352   .text.local_regs_rarg:0000000000000000 $t
     /tmp/ccBFDvgN.s:1360   .text.local_regs_rarg:0000000000000000 local_regs_rarg
     /tmp/ccBFDvgN.s:1460   .text.local_regs_rarg:0000000000000058 $d
     /tmp/ccBFDvgN.s:1466   .text.get_reg_limit:0000000000000000 $t
     /tmp/ccBFDvgN.s:1473   .text.get_reg_limit:0000000000000000 get_reg_limit
     /tmp/ccBFDvgN.s:1711   .text.get_reg_limit:00000000000000b0 $d
     /tmp/ccBFDvgN.s:1720   .text.local_regs:0000000000000000 $t
     /tmp/ccBFDvgN.s:1728   .text.local_regs:0000000000000000 local_regs
     /tmp/ccBFDvgN.s:1826   .text.local_regs:0000000000000038 $d
     /tmp/ccBFDvgN.s:1836   .text.global_regs_rarg:0000000000000000 $t
     /tmp/ccBFDvgN.s:1844   .text.global_regs_rarg:0000000000000000 global_regs_rarg
     /tmp/ccBFDvgN.s:1917   .text.global_regs_rarg:000000000000003c $d
     /tmp/ccBFDvgN.s:1922   .text.global_regs:0000000000000000 $t
     /tmp/ccBFDvgN.s:1930   .text.global_regs:0000000000000000 global_regs
     /tmp/ccBFDvgN.s:1988   .text.global_regs:0000000000000020 $d
     /tmp/ccBFDvgN.s:1993   .text.version:0000000000000000 $t
     /tmp/ccBFDvgN.s:2001   .text.version:0000000000000000 version
     /tmp/ccBFDvgN.s:2032   .text.version:0000000000000018 $d
     /tmp/ccBFDvgN.s:2037   .text.cmd_off:0000000000000000 $t
     /tmp/ccBFDvgN.s:2045   .text.cmd_off:0000000000000000 cmd_off
     /tmp/ccBFDvgN.s:2061   .text.init_RegionTab:0000000000000000 $t
     /tmp/ccBFDvgN.s:2069   .text.init_RegionTab:0000000000000000 init_RegionTab
ARM GAS  /tmp/ccBFDvgN.s 			page 899


     /tmp/ccBFDvgN.s:2107   .text.init_RegionTab:000000000000001c $d
     /tmp/ccBFDvgN.s:2115   .text.sizeLIB:0000000000000000 $t
     /tmp/ccBFDvgN.s:2123   .text.sizeLIB:0000000000000000 sizeLIB
     /tmp/ccBFDvgN.s:2157   .text.sizeLIB:0000000000000018 $d
     /tmp/ccBFDvgN.s:2163   .text.getprog:0000000000000000 $t
     /tmp/ccBFDvgN.s:2171   .text.getprog:0000000000000000 getprog
     /tmp/ccBFDvgN.s:2275   .text.getprog:0000000000000048 $d
     /tmp/ccBFDvgN.s:2283   .text.get_current_prog:0000000000000000 $t
     /tmp/ccBFDvgN.s:2291   .text.get_current_prog:0000000000000000 get_current_prog
     /tmp/ccBFDvgN.s:2323   .text.get_current_prog:0000000000000020 $d
     /tmp/ccBFDvgN.s:2329   .text.do_inc:0000000000000000 $t
     /tmp/ccBFDvgN.s:2337   .text.do_inc:0000000000000000 do_inc
     /tmp/ccBFDvgN.s:2417   .text.do_inc:0000000000000044 $d
                            *COM*:0000000000000004 PcWrapped
     /tmp/ccBFDvgN.s:2422   .text.user_pc.part.0:0000000000000000 $t
     /tmp/ccBFDvgN.s:2429   .text.user_pc.part.0:0000000000000000 user_pc.part.0
     /tmp/ccBFDvgN.s:2499   .text.user_pc.part.0:0000000000000034 $d
     /tmp/ccBFDvgN.s:2504   .rodata.print_step.str1.4:0000000000000000 $d
     /tmp/ccBFDvgN.s:2508   .text.print_step:0000000000000000 $t
     /tmp/ccBFDvgN.s:2515   .text.print_step:0000000000000000 print_step
     /tmp/ccBFDvgN.s:2684   .text.print_step:0000000000000098 $d
                            *COM*:0000000000000019 TraceBuffer
     /tmp/ccBFDvgN.s:2695   .text.do_dec:0000000000000000 $t
     /tmp/ccBFDvgN.s:2703   .text.do_dec:0000000000000000 do_dec
     /tmp/ccBFDvgN.s:2785   .text.do_dec:0000000000000048 $d
     /tmp/ccBFDvgN.s:2790   .text.update_program_bounds:0000000000000000 $t
     /tmp/ccBFDvgN.s:2798   .text.update_program_bounds:0000000000000000 update_program_bounds
     /tmp/ccBFDvgN.s:2951   .text.update_program_bounds:000000000000008c $d
     /tmp/ccBFDvgN.s:2958   .text.set_pc:0000000000000000 $t
     /tmp/ccBFDvgN.s:2966   .text.set_pc:0000000000000000 set_pc
     /tmp/ccBFDvgN.s:3200   .text.set_pc:00000000000000a4 $d
     /tmp/ccBFDvgN.s:3209   .text.incpc:0000000000000000 $t
     /tmp/ccBFDvgN.s:3217   .text.incpc:0000000000000000 incpc
     /tmp/ccBFDvgN.s:3271   .text.incpc:0000000000000024 $d
     /tmp/ccBFDvgN.s:3277   .text.decpc:0000000000000000 $t
     /tmp/ccBFDvgN.s:3285   .text.decpc:0000000000000000 decpc
     /tmp/ccBFDvgN.s:3340   .text.decpc:0000000000000024 $d
     /tmp/ccBFDvgN.s:3347   .text.fin_tst.part.0:0000000000000000 $t
     /tmp/ccBFDvgN.s:3354   .text.fin_tst.part.0:0000000000000000 fin_tst.part.0
     /tmp/ccBFDvgN.s:3387   .text.do_rtn:0000000000000000 $t
     /tmp/ccBFDvgN.s:3394   .text.do_rtn:0000000000000000 do_rtn
     /tmp/ccBFDvgN.s:3572   .text.do_rtn:000000000000008c $d
                            *COM*:0000000000000004 Running
     /tmp/ccBFDvgN.s:3581   .text.user_pc:0000000000000000 $t
     /tmp/ccBFDvgN.s:3589   .text.user_pc:0000000000000000 user_pc
     /tmp/ccBFDvgN.s:3621   .text.find_user_pc:0000000000000000 $t
     /tmp/ccBFDvgN.s:3629   .text.find_user_pc:0000000000000000 find_user_pc
     /tmp/ccBFDvgN.s:3737   .text.find_user_pc:000000000000004c $d
     /tmp/ccBFDvgN.s:3743   .text.report_err:0000000000000000 $t
     /tmp/ccBFDvgN.s:3751   .text.report_err:0000000000000000 report_err
     /tmp/ccBFDvgN.s:3810   .text.report_err:000000000000001c $d
     /tmp/ccBFDvgN.s:3815   .text.report_warn:0000000000000000 $t
     /tmp/ccBFDvgN.s:3823   .text.report_warn:0000000000000000 report_warn
     /tmp/ccBFDvgN.s:3943   .text.report_warn:0000000000000048 $d
     /tmp/ccBFDvgN.s:3952   .text.bad_mode_error:0000000000000000 $t
     /tmp/ccBFDvgN.s:3960   .text.bad_mode_error:0000000000000000 bad_mode_error
     /tmp/ccBFDvgN.s:4001   .text.bad_mode_error:000000000000000c $d
ARM GAS  /tmp/ccBFDvgN.s 			page 900


     /tmp/ccBFDvgN.s:4006   .text.cmderr:0000000000000000 $t
     /tmp/ccBFDvgN.s:4014   .text.cmderr:0000000000000000 cmderr
     /tmp/ccBFDvgN.s:4071   .text.cmderr:0000000000000010 $d
     /tmp/ccBFDvgN.s:4080   .text.cmdmsg:0000000000000000 $t
     /tmp/ccBFDvgN.s:4088   .text.cmdmsg:0000000000000000 cmdmsg
     /tmp/ccBFDvgN.s:4104   .text.rarg_roundingmode:0000000000000000 $t
     /tmp/ccBFDvgN.s:4112   .text.rarg_roundingmode:0000000000000000 rarg_roundingmode
     /tmp/ccBFDvgN.s:4134   .text.rarg_roundingmode:0000000000000014 $d
     /tmp/ccBFDvgN.s:4139   .text.packed_from_number:0000000000000000 $t
     /tmp/ccBFDvgN.s:4147   .text.packed_from_number:0000000000000000 packed_from_number
     /tmp/ccBFDvgN.s:4214   .text.packed_from_number:0000000000000034 $d
     /tmp/ccBFDvgN.s:4220   .text.packed128_from_number:0000000000000000 $t
     /tmp/ccBFDvgN.s:4228   .text.packed128_from_number:0000000000000000 packed128_from_number
     /tmp/ccBFDvgN.s:4295   .text.packed128_from_number:0000000000000034 $d
     /tmp/ccBFDvgN.s:4301   .text.check_special:0000000000000000 $t
     /tmp/ccBFDvgN.s:4308   .text.check_special:0000000000000000 check_special
     /tmp/ccBFDvgN.s:4535   .text.check_special:00000000000000a0 $d
     /tmp/ccBFDvgN.s:4541   .text.packed_from_packed128:0000000000000000 $t
     /tmp/ccBFDvgN.s:4549   .text.packed_from_packed128:0000000000000000 packed_from_packed128
     /tmp/ccBFDvgN.s:4592   .text.packed128_from_packed:0000000000000000 $t
     /tmp/ccBFDvgN.s:4600   .text.packed128_from_packed:0000000000000000 packed128_from_packed
     /tmp/ccBFDvgN.s:4643   .text.stack_size:0000000000000000 $t
     /tmp/ccBFDvgN.s:4651   .text.stack_size:0000000000000000 stack_size
     /tmp/ccBFDvgN.s:4702   .text.stack_size:0000000000000030 $d
     /tmp/ccBFDvgN.s:4708   .text.copyreg:0000000000000000 $t
     /tmp/ccBFDvgN.s:4716   .text.copyreg:0000000000000000 copyreg
     /tmp/ccBFDvgN.s:4749   .text.copyreg:000000000000001c $d
     /tmp/ccBFDvgN.s:4754   .text.set_lift:0000000000000000 $t
     /tmp/ccBFDvgN.s:4762   .text.set_lift:0000000000000000 set_lift
     /tmp/ccBFDvgN.s:4780   .text.set_lift:000000000000000c $d
     /tmp/ccBFDvgN.s:4785   .text.entry_rpn_on_off:0000000000000000 $t
     /tmp/ccBFDvgN.s:4793   .text.entry_rpn_on_off:0000000000000000 entry_rpn_on_off
     /tmp/ccBFDvgN.s:4830   .text.entry_rpn_on_off:0000000000000030 $d
     /tmp/ccBFDvgN.s:4835   .text.is_dblmode:0000000000000000 $t
     /tmp/ccBFDvgN.s:4843   .text.is_dblmode:0000000000000000 is_dblmode
     /tmp/ccBFDvgN.s:4865   .text.is_dblmode:000000000000001c $d
     /tmp/ccBFDvgN.s:4870   .text.is_usrdblmode:0000000000000000 $t
     /tmp/ccBFDvgN.s:4878   .text.is_usrdblmode:0000000000000000 is_usrdblmode
     /tmp/ccBFDvgN.s:4920   .text.is_usrdblmode:000000000000002c $d
     /tmp/ccBFDvgN.s:4926   .text.s_to_i:0000000000000000 $t
     /tmp/ccBFDvgN.s:4934   .text.s_to_i:0000000000000000 s_to_i
     /tmp/ccBFDvgN.s:5082   .text.digit:0000000000000000 $t
     /tmp/ccBFDvgN.s:5089   .text.digit:0000000000000000 digit
     /tmp/ccBFDvgN.s:5634   .text.digit:0000000000000184 $d
     /tmp/ccBFDvgN.s:5641   .text.s_to_ull:0000000000000000 $t
     /tmp/ccBFDvgN.s:5649   .text.s_to_ull:0000000000000000 s_to_ull
     /tmp/ccBFDvgN.s:5743   .text.get_cmdline:0000000000000000 $t
     /tmp/ccBFDvgN.s:5751   .text.get_cmdline:0000000000000000 get_cmdline
     /tmp/ccBFDvgN.s:5779   .text.get_cmdline:0000000000000014 $d
     /tmp/ccBFDvgN.s:5784   .text.is_bad_cmdline:0000000000000000 $t
     /tmp/ccBFDvgN.s:5792   .text.is_bad_cmdline:0000000000000000 is_bad_cmdline
     /tmp/ccBFDvgN.s:5807   .text.get_flash_reg_n:0000000000000000 $t
     /tmp/ccBFDvgN.s:5815   .text.get_flash_reg_n:0000000000000000 get_flash_reg_n
     /tmp/ccBFDvgN.s:5842   .text.get_flash_reg_n:000000000000001c $d
     /tmp/ccBFDvgN.s:5847   .text.get_const:0000000000000000 $t
     /tmp/ccBFDvgN.s:5855   .text.get_const:0000000000000000 get_const
     /tmp/ccBFDvgN.s:6003   .text.get_const:0000000000000074 $d
ARM GAS  /tmp/ccBFDvgN.s 			page 901


     /tmp/ccBFDvgN.s:6011   .text.get_reg_n:0000000000000000 $t
     /tmp/ccBFDvgN.s:6019   .text.get_reg_n:0000000000000000 get_reg_n
     /tmp/ccBFDvgN.s:6239   .text.get_reg_n:00000000000000a8 $d
     /tmp/ccBFDvgN.s:6246   .text.get_stack:0000000000000000 $t
     /tmp/ccBFDvgN.s:6254   .text.get_stack:0000000000000000 get_stack
     /tmp/ccBFDvgN.s:6274   .text.lift:0000000000000000 $t
     /tmp/ccBFDvgN.s:6282   .text.lift:0000000000000000 lift
     /tmp/ccBFDvgN.s:6461   .text.lift:0000000000000064 $d
     /tmp/ccBFDvgN.s:6469   .text.lift_if_enabled:0000000000000000 $t
     /tmp/ccBFDvgN.s:6477   .text.lift_if_enabled:0000000000000000 lift_if_enabled
     /tmp/ccBFDvgN.s:6507   .text.lift_if_enabled:0000000000000010 $d
     /tmp/ccBFDvgN.s:6512   .text.lift2_if_enabled:0000000000000000 $t
     /tmp/ccBFDvgN.s:6519   .text.lift2_if_enabled:0000000000000000 lift2_if_enabled
     /tmp/ccBFDvgN.s:6630   .text.lift2_if_enabled:0000000000000040 $d
     /tmp/ccBFDvgN.s:6639   .text.lower:0000000000000000 $t
     /tmp/ccBFDvgN.s:6646   .text.lower:0000000000000000 lower
     /tmp/ccBFDvgN.s:6828   .text.lower:000000000000006c $d
     /tmp/ccBFDvgN.s:6836   .text.get_stack_top:0000000000000000 $t
     /tmp/ccBFDvgN.s:6843   .text.get_stack_top:0000000000000000 get_stack_top
     /tmp/ccBFDvgN.s:6928   .text.get_stack_top:0000000000000034 $d
     /tmp/ccBFDvgN.s:6936   .text.roll_down:0000000000000000 $t
     /tmp/ccBFDvgN.s:6944   .text.roll_down:0000000000000000 roll_down
     /tmp/ccBFDvgN.s:7062   .text.roll_down:000000000000004c $d
                            *COM*:0000000000000004 StackBase
     /tmp/ccBFDvgN.s:7068   .text.cpx_roll_down:0000000000000000 $t
     /tmp/ccBFDvgN.s:7076   .text.cpx_roll_down:0000000000000000 cpx_roll_down
     /tmp/ccBFDvgN.s:7136   .text.cpx_roll_down:000000000000002c $d
     /tmp/ccBFDvgN.s:7142   .text.roll_up:0000000000000000 $t
     /tmp/ccBFDvgN.s:7150   .text.roll_up:0000000000000000 roll_up
     /tmp/ccBFDvgN.s:7277   .text.roll_up:000000000000004c $d
     /tmp/ccBFDvgN.s:7283   .text.cpx_roll_up:0000000000000000 $t
     /tmp/ccBFDvgN.s:7291   .text.cpx_roll_up:0000000000000000 cpx_roll_up
     /tmp/ccBFDvgN.s:7351   .text.cpx_roll_up:000000000000002c $d
     /tmp/ccBFDvgN.s:7357   .text.fill:0000000000000000 $t
     /tmp/ccBFDvgN.s:7365   .text.fill:0000000000000000 fill
     /tmp/ccBFDvgN.s:7520   .text.fill:0000000000000064 $d
     /tmp/ccBFDvgN.s:7529   .text.lower2:0000000000000000 $t
     /tmp/ccBFDvgN.s:7536   .text.lower2:0000000000000000 lower2
     /tmp/ccBFDvgN.s:7718   .text.lower2:000000000000006c $d
     /tmp/ccBFDvgN.s:7726   .text.drop:0000000000000000 $t
     /tmp/ccBFDvgN.s:7734   .text.drop:0000000000000000 drop
     /tmp/ccBFDvgN.s:7777   .text.drop:000000000000001c $d
     /tmp/ccBFDvgN.s:7782   .text.copyreg_n:0000000000000000 $t
     /tmp/ccBFDvgN.s:7790   .text.copyreg_n:0000000000000000 copyreg_n
     /tmp/ccBFDvgN.s:7874   .text.copyreg_n:0000000000000038 $d
     /tmp/ccBFDvgN.s:7881   .text.setlastX:0000000000000000 $t
     /tmp/ccBFDvgN.s:7889   .text.setlastX:0000000000000000 setlastX
     /tmp/ccBFDvgN.s:7905   .text.setlastXY:0000000000000000 $t
     /tmp/ccBFDvgN.s:7912   .text.setlastXY:0000000000000000 setlastXY
     /tmp/ccBFDvgN.s:7955   .text.getRegister:0000000000000000 $t
     /tmp/ccBFDvgN.s:7963   .text.getRegister:0000000000000000 getRegister
     /tmp/ccBFDvgN.s:8025   .text.getRegister:0000000000000030 $d
     /tmp/ccBFDvgN.s:8030   .text.getX:0000000000000000 $t
     /tmp/ccBFDvgN.s:8038   .text.getX:0000000000000000 getX
     /tmp/ccBFDvgN.s:8056   .text.getY:0000000000000000 $t
     /tmp/ccBFDvgN.s:8064   .text.getY:0000000000000000 getY
     /tmp/ccBFDvgN.s:8081   .text.getXY:0000000000000000 $t
ARM GAS  /tmp/ccBFDvgN.s 			page 902


     /tmp/ccBFDvgN.s:8089   .text.getXY:0000000000000000 getXY
     /tmp/ccBFDvgN.s:8150   .text.getXYZ:0000000000000000 $t
     /tmp/ccBFDvgN.s:8158   .text.getXYZ:0000000000000000 getXYZ
     /tmp/ccBFDvgN.s:8251   .text.getYZ:0000000000000000 $t
     /tmp/ccBFDvgN.s:8259   .text.getYZ:0000000000000000 getYZ
     /tmp/ccBFDvgN.s:8320   .text.getXYZT:0000000000000000 $t
     /tmp/ccBFDvgN.s:8328   .text.getXYZT:0000000000000000 getXYZT
     /tmp/ccBFDvgN.s:8374   .text.storcl_op:0000000000000000 $t
     /tmp/ccBFDvgN.s:8381   .text.storcl_op:0000000000000000 storcl_op
     /tmp/ccBFDvgN.s:8455   .text.storcl_op:000000000000002c $d
     /tmp/ccBFDvgN.s:8462   .text.storcl_op:0000000000000032 $t
     /tmp/ccBFDvgN.s:8574   .text.storcl_cop:0000000000000000 $t
     /tmp/ccBFDvgN.s:8581   .text.storcl_cop:0000000000000000 storcl_cop
     /tmp/ccBFDvgN.s:8691   .text.storcl_cop:0000000000000040 $d
     /tmp/ccBFDvgN.s:8696   .text.storcl_cop:0000000000000044 $t
     /tmp/ccBFDvgN.s:8809   .text.cpx_enter:0000000000000000 $t
     /tmp/ccBFDvgN.s:8817   .text.cpx_enter:0000000000000000 cpx_enter
     /tmp/ccBFDvgN.s:8913   .text.cpx_enter:0000000000000048 $d
     /tmp/ccBFDvgN.s:8919   .text.cpx_fill:0000000000000000 $t
     /tmp/ccBFDvgN.s:8927   .text.cpx_fill:0000000000000000 cpx_fill
     /tmp/ccBFDvgN.s:9128   .text.cpx_fill:0000000000000084 $d
     /tmp/ccBFDvgN.s:9138   .text.setRegister:0000000000000000 $t
     /tmp/ccBFDvgN.s:9146   .text.setRegister:0000000000000000 setRegister
     /tmp/ccBFDvgN.s:9241   .text.setRegister:000000000000004c $d
                            *COM*:0000000000000018 Ctx
     /tmp/ccBFDvgN.s:9247   .text.setX:0000000000000000 $t
     /tmp/ccBFDvgN.s:9255   .text.setX:0000000000000000 setX
     /tmp/ccBFDvgN.s:9277   .text.rarg_round:0000000000000000 $t
     /tmp/ccBFDvgN.s:9285   .text.rarg_round:0000000000000000 rarg_round
     /tmp/ccBFDvgN.s:9466   .text.rarg_round:0000000000000064 $d
     /tmp/ccBFDvgN.s:9473   .text.setY:0000000000000000 $t
     /tmp/ccBFDvgN.s:9481   .text.setY:0000000000000000 setY
     /tmp/ccBFDvgN.s:9503   .text.setXY:0000000000000000 $t
     /tmp/ccBFDvgN.s:9511   .text.setXY:0000000000000000 setXY
     /tmp/ccBFDvgN.s:9573   .text.setXY:0000000000000028 $d
     /tmp/ccBFDvgN.s:9578   .text.convert_regK:0000000000000000 $t
     /tmp/ccBFDvgN.s:9586   .text.convert_regK:0000000000000000 convert_regK
     /tmp/ccBFDvgN.s:9762   .text.convert_regK:00000000000000ac $d
     /tmp/ccBFDvgN.s:9772   .text.cpx_nop:0000000000000000 $t
     /tmp/ccBFDvgN.s:9780   .text.cpx_nop:0000000000000000 cpx_nop
     /tmp/ccBFDvgN.s:9805   .text.cpx_nop:0000000000000016 $d
     /tmp/ccBFDvgN.s:9817   .text.cpx_nop:0000000000000022 $t
     /tmp/ccBFDvgN.s:10101  .text.cpx_nop:0000000000000164 $d
     /tmp/ccBFDvgN.s:10108  .text.get_reg_n_int:0000000000000000 $t
     /tmp/ccBFDvgN.s:10116  .text.get_reg_n_int:0000000000000000 get_reg_n_int
     /tmp/ccBFDvgN.s:10153  .text.storcl_intop:0000000000000000 $t
     /tmp/ccBFDvgN.s:10160  .text.storcl_intop:0000000000000000 storcl_intop
     /tmp/ccBFDvgN.s:10252  .text.storcl_intop:0000000000000038 $d
     /tmp/ccBFDvgN.s:10258  .text.storcl_intop:000000000000003e $t
     /tmp/ccBFDvgN.s:10360  .text.incdec:0000000000000000 $t
     /tmp/ccBFDvgN.s:10367  .text.incdec:0000000000000000 incdec
     /tmp/ccBFDvgN.s:10548  .text.incdec:0000000000000094 $d
     /tmp/ccBFDvgN.s:10555  .text.set_reg_n_int:0000000000000000 $t
     /tmp/ccBFDvgN.s:10563  .text.set_reg_n_int:0000000000000000 set_reg_n_int
     /tmp/ccBFDvgN.s:10596  .text.get_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccBFDvgN.s:10604  .text.get_reg_n_int_sgn:0000000000000000 get_reg_n_int_sgn
     /tmp/ccBFDvgN.s:10684  .text.get_reg_n_int_sgn:0000000000000034 $d
ARM GAS  /tmp/ccBFDvgN.s 			page 903


     /tmp/ccBFDvgN.s:10689  .text.get_keycode_from_reg:0000000000000000 $t
     /tmp/ccBFDvgN.s:10696  .text.get_keycode_from_reg:0000000000000000 get_keycode_from_reg
     /tmp/ccBFDvgN.s:10776  .text.get_keycode_from_reg:000000000000002c $d
     /tmp/ccBFDvgN.s:10781  .text.getX_int:0000000000000000 $t
     /tmp/ccBFDvgN.s:10789  .text.getX_int:0000000000000000 getX_int
     /tmp/ccBFDvgN.s:10805  .text.getX_int_sgn:0000000000000000 $t
     /tmp/ccBFDvgN.s:10813  .text.getX_int_sgn:0000000000000000 getX_int_sgn
     /tmp/ccBFDvgN.s:10835  .text.set_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccBFDvgN.s:10843  .text.set_reg_n_int_sgn:0000000000000000 set_reg_n_int_sgn
     /tmp/ccBFDvgN.s:10969  .text.set_reg_n_int_sgn:0000000000000060 $d
     /tmp/ccBFDvgN.s:10975  .text.op_roundingmode:0000000000000000 $t
     /tmp/ccBFDvgN.s:10983  .text.op_roundingmode:0000000000000000 op_roundingmode
     /tmp/ccBFDvgN.s:11047  .text.op_roundingmode:0000000000000024 $d
     /tmp/ccBFDvgN.s:11052  .text.register_from_int:0000000000000000 $t
     /tmp/ccBFDvgN.s:11059  .text.register_from_int:0000000000000000 register_from_int
     /tmp/ccBFDvgN.s:11156  .text.register_from_int:000000000000005c $d
     /tmp/ccBFDvgN.s:11162  .text.int_from_register:0000000000000000 $t
     /tmp/ccBFDvgN.s:11169  .text.int_from_register:0000000000000000 int_from_register
     /tmp/ccBFDvgN.s:11240  .text.int_from_register:0000000000000044 $d
     /tmp/ccBFDvgN.s:11245  .text.switch_to_int:0000000000000000 $t
     /tmp/ccBFDvgN.s:11252  .text.switch_to_int:0000000000000000 switch_to_int
     /tmp/ccBFDvgN.s:11403  .text.switch_to_int:0000000000000078 $d
     /tmp/ccBFDvgN.s:11411  .text.process_cmdline.part.0:0000000000000000 $t
     /tmp/ccBFDvgN.s:11418  .text.process_cmdline.part.0:0000000000000000 process_cmdline.part.0
     /tmp/ccBFDvgN.s:12005  .text.process_cmdline.part.0:000000000000023c $d
                            *COM*:0000000000000004 XromRunning
     /tmp/ccBFDvgN.s:12016  .text.process_cmdline:0000000000000000 $t
     /tmp/ccBFDvgN.s:12024  .text.process_cmdline:0000000000000000 process_cmdline
     /tmp/ccBFDvgN.s:12046  .text.process_cmdline:000000000000000c $d
     /tmp/ccBFDvgN.s:12051  .text.cpx_pi:0000000000000000 $t
     /tmp/ccBFDvgN.s:12059  .text.cpx_pi:0000000000000000 cpx_pi
     /tmp/ccBFDvgN.s:12297  .text.cpx_pi:00000000000000bc $d
     /tmp/ccBFDvgN.s:12305  .text.process_cmdline_set_lift:0000000000000000 $t
     /tmp/ccBFDvgN.s:12313  .text.process_cmdline_set_lift:0000000000000000 process_cmdline_set_lift
     /tmp/ccBFDvgN.s:12379  .text.process_cmdline_set_lift:0000000000000020 $d
     /tmp/ccBFDvgN.s:12384  .text.setX_int:0000000000000000 $t
     /tmp/ccBFDvgN.s:12392  .text.setX_int:0000000000000000 setX_int
     /tmp/ccBFDvgN.s:12443  .text.do_rcl:0000000000000000 $t
     /tmp/ccBFDvgN.s:12450  .text.do_rcl:0000000000000000 do_rcl
     /tmp/ccBFDvgN.s:12788  .text.do_rcl:00000000000000cc $d
     /tmp/ccBFDvgN.s:12799  .text.setX_int_sgn:0000000000000000 $t
     /tmp/ccBFDvgN.s:12807  .text.setX_int_sgn:0000000000000000 setX_int_sgn
     /tmp/ccBFDvgN.s:12841  .text.zero_regs:0000000000000000 $t
     /tmp/ccBFDvgN.s:12849  .text.zero_regs:0000000000000000 zero_regs
     /tmp/ccBFDvgN.s:12887  .text.zero_regs:0000000000000024 $d
     /tmp/ccBFDvgN.s:12892  .text.move_regs:0000000000000000 $t
     /tmp/ccBFDvgN.s:12900  .text.move_regs:0000000000000000 move_regs
     /tmp/ccBFDvgN.s:12953  .text.move_regs:0000000000000024 $d
     /tmp/ccBFDvgN.s:12958  .text.zero_X:0000000000000000 $t
     /tmp/ccBFDvgN.s:12966  .text.zero_X:0000000000000000 zero_X
     /tmp/ccBFDvgN.s:12981  .text.zero_X:0000000000000008 $d
     /tmp/ccBFDvgN.s:12986  .text.zero_Y:0000000000000000 $t
     /tmp/ccBFDvgN.s:12994  .text.zero_Y:0000000000000000 zero_Y
     /tmp/ccBFDvgN.s:13022  .text.clrx:0000000000000000 $t
     /tmp/ccBFDvgN.s:13030  .text.clrx:0000000000000000 clrx
     /tmp/ccBFDvgN.s:13146  .text.clrx:000000000000006c $d
     /tmp/ccBFDvgN.s:13153  .text.clrstk:0000000000000000 $t
ARM GAS  /tmp/ccBFDvgN.s 			page 904


     /tmp/ccBFDvgN.s:13161  .text.clrstk:0000000000000000 clrstk
     /tmp/ccBFDvgN.s:13286  .text.clrstk:000000000000005c $d
     /tmp/ccBFDvgN.s:13296  .text.clrreg:0000000000000000 $t
     /tmp/ccBFDvgN.s:13304  .text.clrreg:0000000000000000 clrreg
     /tmp/ccBFDvgN.s:13809  .text.clrreg:000000000000011c $d
     /tmp/ccBFDvgN.s:13819  .text.clrretstk:0000000000000000 $t
     /tmp/ccBFDvgN.s:13827  .text.clrretstk:0000000000000000 clrretstk
     /tmp/ccBFDvgN.s:13848  .text.clrretstk:0000000000000010 $d
     /tmp/ccBFDvgN.s:13853  .text.clrretstk_pc:0000000000000000 $t
     /tmp/ccBFDvgN.s:13861  .text.clrretstk_pc:0000000000000000 clrretstk_pc
     /tmp/ccBFDvgN.s:13926  .text.clrretstk_pc:0000000000000020 $d
     /tmp/ccBFDvgN.s:13931  .text.cmdconst:0000000000000000 $t
     /tmp/ccBFDvgN.s:13939  .text.cmdconst:0000000000000000 cmdconst
     /tmp/ccBFDvgN.s:14234  .text.cmdconst:00000000000000c4 $d
     /tmp/ccBFDvgN.s:14244  .text.cmdsto:0000000000000000 $t
     /tmp/ccBFDvgN.s:14252  .text.cmdsto:0000000000000000 cmdsto
     /tmp/ccBFDvgN.s:14442  .text.cmdsto:0000000000000078 $d
     /tmp/ccBFDvgN.s:14448  .text.cmdrcl:0000000000000000 $t
     /tmp/ccBFDvgN.s:14456  .text.cmdrcl:0000000000000000 cmdrcl
     /tmp/ccBFDvgN.s:14472  .text.cmdcsto:0000000000000000 $t
     /tmp/ccBFDvgN.s:14480  .text.cmdcsto:0000000000000000 cmdcsto
     /tmp/ccBFDvgN.s:14757  .text.cmdcsto:00000000000000c0 $d
     /tmp/ccBFDvgN.s:14765  .text.cmdcrcl:0000000000000000 $t
     /tmp/ccBFDvgN.s:14773  .text.cmdcrcl:0000000000000000 cmdcrcl
     /tmp/ccBFDvgN.s:15145  .text.cmdcrcl:00000000000000f8 $d
     /tmp/ccBFDvgN.s:15155  .text.cmdircl:0000000000000000 $t
     /tmp/ccBFDvgN.s:15163  .text.cmdircl:0000000000000000 cmdircl
     /tmp/ccBFDvgN.s:15207  .text.cmdircl:000000000000001c $d
     /tmp/ccBFDvgN.s:15212  .text.cmdrrcl:0000000000000000 $t
     /tmp/ccBFDvgN.s:15220  .text.cmdrrcl:0000000000000000 cmdrrcl
     /tmp/ccBFDvgN.s:15378  .text.cmdrrcl:0000000000000080 $d
     /tmp/ccBFDvgN.s:15388  .text.swap_reg:0000000000000000 $t
     /tmp/ccBFDvgN.s:15396  .text.swap_reg:0000000000000000 swap_reg
     /tmp/ccBFDvgN.s:15537  .text.swap_reg:0000000000000060 $d
     /tmp/ccBFDvgN.s:15542  .text.cmdswap:0000000000000000 $t
     /tmp/ccBFDvgN.s:15550  .text.cmdswap:0000000000000000 cmdswap
     /tmp/ccBFDvgN.s:15697  .text.cmdswap:0000000000000094 $d
     /tmp/ccBFDvgN.s:15703  .text.cmdview:0000000000000000 $t
     /tmp/ccBFDvgN.s:15711  .text.cmdview:0000000000000000 cmdview
     /tmp/ccBFDvgN.s:15795  .text.cmdview:0000000000000050 $d
                            *COM*:0000000000000004 ShowRegister
     /tmp/ccBFDvgN.s:15802  .text.get_stack_size:0000000000000000 $t
     /tmp/ccBFDvgN.s:15810  .text.get_stack_size:0000000000000000 get_stack_size
     /tmp/ccBFDvgN.s:15908  .text.get_stack_size:0000000000000040 $d
     /tmp/ccBFDvgN.s:15916  .text.get_word_size:0000000000000000 $t
     /tmp/ccBFDvgN.s:15924  .text.get_word_size:0000000000000000 get_word_size
     /tmp/ccBFDvgN.s:15967  .text.get_sign_mode:0000000000000000 $t
     /tmp/ccBFDvgN.s:15975  .text.get_sign_mode:0000000000000000 get_sign_mode
     /tmp/ccBFDvgN.s:16031  .text.get_sign_mode:0000000000000024 $d
     /tmp/ccBFDvgN.s:16036  .text.get_base:0000000000000000 $t
     /tmp/ccBFDvgN.s:16044  .text.get_base:0000000000000000 get_base
     /tmp/ccBFDvgN.s:16087  .text.DM42_Ticker:0000000000000000 $t
     /tmp/ccBFDvgN.s:16095  .text.DM42_Ticker:0000000000000000 DM42_Ticker
     /tmp/ccBFDvgN.s:16125  .text.DM42_Ticker:0000000000000014 $d
     /tmp/ccBFDvgN.s:16130  .text.op_ticks:0000000000000000 $t
     /tmp/ccBFDvgN.s:16138  .text.op_ticks:0000000000000000 op_ticks
     /tmp/ccBFDvgN.s:16215  .text.op_ticks:0000000000000024 $d
ARM GAS  /tmp/ccBFDvgN.s 			page 905


     /tmp/ccBFDvgN.s:16220  .text.op_voltage:0000000000000000 $t
     /tmp/ccBFDvgN.s:16228  .text.op_voltage:0000000000000000 op_voltage
     /tmp/ccBFDvgN.s:16331  .text.op_voltage:0000000000000058 $d
     /tmp/ccBFDvgN.s:16338  .text.free_mem:0000000000000000 $t
     /tmp/ccBFDvgN.s:16346  .text.free_mem:0000000000000000 free_mem
     /tmp/ccBFDvgN.s:16370  .text.free_mem:0000000000000010 $d
     /tmp/ccBFDvgN.s:16376  .text.free_flash:0000000000000000 $t
     /tmp/ccBFDvgN.s:16384  .text.free_flash:0000000000000000 free_flash
     /tmp/ccBFDvgN.s:16403  .text.free_flash:0000000000000010 $d
     /tmp/ccBFDvgN.s:16408  .text.get_mem:0000000000000000 $t
     /tmp/ccBFDvgN.s:16416  .text.get_mem:0000000000000000 get_mem
     /tmp/ccBFDvgN.s:16667  .text.get_mem:000000000000009c $d
     /tmp/ccBFDvgN.s:16675  .text.cmdputkey:0000000000000000 $t
     /tmp/ccBFDvgN.s:16683  .text.cmdputkey:0000000000000000 cmdputkey
     /tmp/ccBFDvgN.s:16765  .text.cmdputkey:0000000000000034 $d
     /tmp/ccBFDvgN.s:16771  .text.cmdkeytype:0000000000000000 $t
     /tmp/ccBFDvgN.s:16779  .text.cmdkeytype:0000000000000000 cmdkeytype
     /tmp/ccBFDvgN.s:16913  .text.cmdkeytype:0000000000000048 $d
     /tmp/ccBFDvgN.s:16922  .rodata.op_query_xtal.str1.4:0000000000000000 $d
     /tmp/ccBFDvgN.s:16926  .text.op_query_xtal:0000000000000000 $t
     /tmp/ccBFDvgN.s:16934  .text.op_query_xtal:0000000000000000 op_query_xtal
     /tmp/ccBFDvgN.s:16972  .text.op_query_xtal:0000000000000014 $d
     /tmp/ccBFDvgN.s:16980  .rodata.op_query_print.str1.4:0000000000000000 $d
     /tmp/ccBFDvgN.s:16984  .text.op_query_print:0000000000000000 $t
     /tmp/ccBFDvgN.s:16992  .text.op_query_print:0000000000000000 op_query_print
     /tmp/ccBFDvgN.s:17037  .text.op_query_print:0000000000000018 $d
     /tmp/ccBFDvgN.s:17047  .text.cmdstostk:0000000000000000 $t
     /tmp/ccBFDvgN.s:17055  .text.cmdstostk:0000000000000000 cmdstostk
     /tmp/ccBFDvgN.s:17105  .text.cmdrclstk:0000000000000000 $t
     /tmp/ccBFDvgN.s:17113  .text.cmdrclstk:0000000000000000 cmdrclstk
     /tmp/ccBFDvgN.s:17166  .text.find_opcode_from:0000000000000000 $t
     /tmp/ccBFDvgN.s:17174  .text.find_opcode_from:0000000000000000 find_opcode_from
     /tmp/ccBFDvgN.s:17346  .text.find_opcode_from:000000000000006c $d
     /tmp/ccBFDvgN.s:17351  .text.find_label_from:0000000000000000 $t
     /tmp/ccBFDvgN.s:17359  .text.find_label_from:0000000000000000 find_label_from
     /tmp/ccBFDvgN.s:17379  .text.op_rtn:0000000000000000 $t
     /tmp/ccBFDvgN.s:17387  .text.op_rtn:0000000000000000 op_rtn
     /tmp/ccBFDvgN.s:17421  .text.op_rtn:0000000000000020 $d
     /tmp/ccBFDvgN.s:17427  .text.op_popusr:0000000000000000 $t
     /tmp/ccBFDvgN.s:17435  .text.op_popusr:0000000000000000 op_popusr
     /tmp/ccBFDvgN.s:17510  .text.op_popusr:0000000000000050 $d
                            *COM*:0000000000000004 XromUserPc
                            *COM*:0000000000000004 UserLocalRegs
     /tmp/ccBFDvgN.s:17518  .text.findmultilbl:0000000000000000 $t
     /tmp/ccBFDvgN.s:17526  .text.findmultilbl:0000000000000000 findmultilbl
     /tmp/ccBFDvgN.s:17639  .text.findmultilbl:0000000000000048 $d
     /tmp/ccBFDvgN.s:17644  .text.multiumenu:0000000000000000 $t
     /tmp/ccBFDvgN.s:17652  .text.multiumenu:0000000000000000 multiumenu
     /tmp/ccBFDvgN.s:17689  .text.get_dispmode_digs:0000000000000000 $t
     /tmp/ccBFDvgN.s:17697  .text.get_dispmode_digs:0000000000000000 get_dispmode_digs
     /tmp/ccBFDvgN.s:17759  .text.get_dispmode_digs:000000000000002c $d
     /tmp/ccBFDvgN.s:17764  .text.set_dispmode_digs:0000000000000000 $t
     /tmp/ccBFDvgN.s:17772  .text.set_dispmode_digs:0000000000000000 set_dispmode_digs
     /tmp/ccBFDvgN.s:17830  .text.set_dispmode_digs:0000000000000038 $d
     /tmp/ccBFDvgN.s:17835  .text.convC2F:0000000000000000 $t
     /tmp/ccBFDvgN.s:17843  .text.convC2F:0000000000000000 convC2F
     /tmp/ccBFDvgN.s:17885  .text.convC2F:000000000000001c $d
ARM GAS  /tmp/ccBFDvgN.s 			page 906


     /tmp/ccBFDvgN.s:17891  .text.convF2C:0000000000000000 $t
     /tmp/ccBFDvgN.s:17899  .text.convF2C:0000000000000000 convF2C
     /tmp/ccBFDvgN.s:17941  .text.convF2C:000000000000001c $d
     /tmp/ccBFDvgN.s:17947  .text.convDB2AR:0000000000000000 $t
     /tmp/ccBFDvgN.s:17955  .text.convDB2AR:0000000000000000 convDB2AR
     /tmp/ccBFDvgN.s:17997  .text.convDB2AR:000000000000001c $d
     /tmp/ccBFDvgN.s:18002  .text.convAR2DB:0000000000000000 $t
     /tmp/ccBFDvgN.s:18010  .text.convAR2DB:0000000000000000 convAR2DB
     /tmp/ccBFDvgN.s:18051  .text.convAR2DB:000000000000001c $d
     /tmp/ccBFDvgN.s:18056  .text.convDB2PR:0000000000000000 $t
     /tmp/ccBFDvgN.s:18064  .text.convDB2PR:0000000000000000 convDB2PR
     /tmp/ccBFDvgN.s:18105  .text.convPR2DB:0000000000000000 $t
     /tmp/ccBFDvgN.s:18113  .text.convPR2DB:0000000000000000 convPR2DB
     /tmp/ccBFDvgN.s:18154  .text.do_conv:0000000000000000 $t
     /tmp/ccBFDvgN.s:18162  .text.do_conv:0000000000000000 do_conv
     /tmp/ccBFDvgN.s:18254  .text.do_conv:0000000000000040 $d
     /tmp/ccBFDvgN.s:18259  .text.cmdconv:0000000000000000 $t
     /tmp/ccBFDvgN.s:18267  .text.cmdconv:0000000000000000 cmdconv
     /tmp/ccBFDvgN.s:18355  .text.cmdconv:000000000000003c $d
     /tmp/ccBFDvgN.s:18360  .text.fin_tst:0000000000000000 $t
     /tmp/ccBFDvgN.s:18368  .text.fin_tst:0000000000000000 fin_tst
     /tmp/ccBFDvgN.s:18426  .text.fin_tst:000000000000002c $d
     /tmp/ccBFDvgN.s:18435  .text.check_mode:0000000000000000 $t
     /tmp/ccBFDvgN.s:18443  .text.check_mode:0000000000000000 check_mode
     /tmp/ccBFDvgN.s:18478  .text.check_mode:0000000000000024 $d
     /tmp/ccBFDvgN.s:18483  .text.check_dblmode:0000000000000000 $t
     /tmp/ccBFDvgN.s:18491  .text.check_dblmode:0000000000000000 check_dblmode
     /tmp/ccBFDvgN.s:18524  .text.check_dblmode:000000000000001c $d
     /tmp/ccBFDvgN.s:18529  .text.isTop:0000000000000000 $t
     /tmp/ccBFDvgN.s:18537  .text.isTop:0000000000000000 isTop
     /tmp/ccBFDvgN.s:18601  .text.isTop:0000000000000038 $d
     /tmp/ccBFDvgN.s:18610  .text.cmdlblp:0000000000000000 $t
     /tmp/ccBFDvgN.s:18618  .text.cmdlblp:0000000000000000 cmdlblp
     /tmp/ccBFDvgN.s:18670  .text.cmdlblp:0000000000000024 $d
     /tmp/ccBFDvgN.s:18675  .text.cmdmultilblp:0000000000000000 $t
     /tmp/ccBFDvgN.s:18683  .text.cmdmultilblp:0000000000000000 cmdmultilblp
     /tmp/ccBFDvgN.s:18718  .text.cmdkeyp:0000000000000000 $t
     /tmp/ccBFDvgN.s:18726  .text.cmdkeyp:0000000000000000 cmdkeyp
     /tmp/ccBFDvgN.s:18821  .text.cmdkeyp:0000000000000044 $d
     /tmp/ccBFDvgN.s:18826  .text.do_tst:0000000000000000 $t
     /tmp/ccBFDvgN.s:18833  .text.do_tst:0000000000000000 do_tst
     /tmp/ccBFDvgN.s:18999  .text.do_tst:0000000000000064 $d
     /tmp/ccBFDvgN.s:19287  .text.do_tst:0000000000000168 $d
     /tmp/ccBFDvgN.s:19294  .text.do_ztst:0000000000000000 $t
     /tmp/ccBFDvgN.s:19301  .text.do_ztst:0000000000000000 do_ztst
     /tmp/ccBFDvgN.s:19591  .text.do_ztst:00000000000000b4 $d
     /tmp/ccBFDvgN.s:19602  .text.check_zero:0000000000000000 $t
     /tmp/ccBFDvgN.s:19610  .text.check_zero:0000000000000000 check_zero
     /tmp/ccBFDvgN.s:19754  .text.check_zero:000000000000006c $d
     /tmp/ccBFDvgN.s:19759  .text.cmdtest:0000000000000000 $t
     /tmp/ccBFDvgN.s:19767  .text.cmdtest:0000000000000000 cmdtest
     /tmp/ccBFDvgN.s:19788  .text.cmdztest:0000000000000000 $t
     /tmp/ccBFDvgN.s:19796  .text.cmdztest:0000000000000000 cmdztest
     /tmp/ccBFDvgN.s:19849  .text.cmdlincdec:0000000000000000 $t
     /tmp/ccBFDvgN.s:19857  .text.cmdlincdec:0000000000000000 cmdlincdec
     /tmp/ccBFDvgN.s:19878  .text.cmdloopz:0000000000000000 $t
     /tmp/ccBFDvgN.s:19886  .text.cmdloopz:0000000000000000 cmdloopz
ARM GAS  /tmp/ccBFDvgN.s 			page 907


     /tmp/ccBFDvgN.s:19919  .text.cmdloop:0000000000000000 $t
     /tmp/ccBFDvgN.s:19927  .text.cmdloop:0000000000000000 cmdloop
     /tmp/ccBFDvgN.s:20416  .text.cmdloop:00000000000001f4 $d
     /tmp/ccBFDvgN.s:20422  .text.op_shift_digit:0000000000000000 $t
     /tmp/ccBFDvgN.s:20430  .text.op_shift_digit:0000000000000000 op_shift_digit
     /tmp/ccBFDvgN.s:20594  .text.op_shift_digit:0000000000000060 $d
     /tmp/ccBFDvgN.s:20600  .text.get_user_flag:0000000000000000 $t
     /tmp/ccBFDvgN.s:20608  .text.get_user_flag:0000000000000000 get_user_flag
     /tmp/ccBFDvgN.s:20646  .text.cmdflag:0000000000000000 $t
     /tmp/ccBFDvgN.s:20654  .text.cmdflag:0000000000000000 cmdflag
     /tmp/ccBFDvgN.s:20699  .text.cmdflag:0000000000000028 $d
     /tmp/ccBFDvgN.s:20856  .text.put_user_flag:0000000000000000 $t
     /tmp/ccBFDvgN.s:20864  .text.put_user_flag:0000000000000000 put_user_flag
     /tmp/ccBFDvgN.s:20893  .text.clrflags:0000000000000000 $t
     /tmp/ccBFDvgN.s:20901  .text.clrflags:0000000000000000 clrflags
     /tmp/ccBFDvgN.s:20948  .text.clrflags:000000000000002c $d
     /tmp/ccBFDvgN.s:20953  .text.intws:0000000000000000 $t
     /tmp/ccBFDvgN.s:20961  .text.intws:0000000000000000 intws
     /tmp/ccBFDvgN.s:21184  .text.intws:00000000000000e4 $d
     /tmp/ccBFDvgN.s:21193  .text.get_maxdenom:0000000000000000 $t
     /tmp/ccBFDvgN.s:21201  .text.get_maxdenom:0000000000000000 get_maxdenom
     /tmp/ccBFDvgN.s:21229  .text.get_maxdenom:000000000000001c $d
     /tmp/ccBFDvgN.s:21234  .rodata.op_2frac.str1.4:0000000000000000 $d
     /tmp/ccBFDvgN.s:21244  .text.op_2frac:0000000000000000 $t
     /tmp/ccBFDvgN.s:21252  .text.op_2frac:0000000000000000 op_2frac
     /tmp/ccBFDvgN.s:21390  .text.op_2frac:0000000000000088 $d
     /tmp/ccBFDvgN.s:21400  .text.op_fracdenom:0000000000000000 $t
     /tmp/ccBFDvgN.s:21408  .text.op_fracdenom:0000000000000000 op_fracdenom
     /tmp/ccBFDvgN.s:21563  .text.op_fracdenom:0000000000000080 $d
     /tmp/ccBFDvgN.s:21568  .text.op_float:0000000000000000 $t
     /tmp/ccBFDvgN.s:21576  .text.op_float:0000000000000000 op_float
     /tmp/ccBFDvgN.s:21771  .text.op_float:00000000000000c4 $d
     /tmp/ccBFDvgN.s:21782  .text.cmddisp:0000000000000000 $t
     /tmp/ccBFDvgN.s:21790  .text.cmddisp:0000000000000000 cmddisp
     /tmp/ccBFDvgN.s:21867  .text.cmddisp:0000000000000036 $d
     /tmp/ccBFDvgN.s:22055  .text.cmddisp:00000000000000bc $d
     /tmp/ccBFDvgN.s:22061  .text.set_int_base:0000000000000000 $t
     /tmp/ccBFDvgN.s:22069  .text.set_int_base:0000000000000000 set_int_base
     /tmp/ccBFDvgN.s:22176  .text.set_int_base:000000000000004c $d
     /tmp/ccBFDvgN.s:22183  .text.op_fract:0000000000000000 $t
     /tmp/ccBFDvgN.s:22191  .text.op_fract:0000000000000000 op_fract
     /tmp/ccBFDvgN.s:22250  .text.op_fract:0000000000000040 $d
     /tmp/ccBFDvgN.s:22255  .text.cmdsavem:0000000000000000 $t
     /tmp/ccBFDvgN.s:22263  .text.cmdsavem:0000000000000000 cmdsavem
     /tmp/ccBFDvgN.s:22297  .text.cmdsavem:0000000000000018 $d
     /tmp/ccBFDvgN.s:22302  .text.set_entry:0000000000000000 $t
     /tmp/ccBFDvgN.s:22310  .text.set_entry:0000000000000000 set_entry
     /tmp/ccBFDvgN.s:22348  .text.set_entry:0000000000000020 $d
     /tmp/ccBFDvgN.s:22355  .text.get_trig_mode:0000000000000000 $t
     /tmp/ccBFDvgN.s:22363  .text.get_trig_mode:0000000000000000 get_trig_mode
     /tmp/ccBFDvgN.s:22398  .text.get_trig_mode:0000000000000024 $d
     /tmp/ccBFDvgN.s:22405  .text.cmdpause:0000000000000000 $t
     /tmp/ccBFDvgN.s:22413  .text.cmdpause:0000000000000000 cmdpause
     /tmp/ccBFDvgN.s:22453  .text.cmdpause:000000000000001c $d
                            *COM*:0000000000000001 Pause
     /tmp/ccBFDvgN.s:22459  .text.op_setspeed:0000000000000000 $t
     /tmp/ccBFDvgN.s:22467  .text.op_setspeed:0000000000000000 op_setspeed
ARM GAS  /tmp/ccBFDvgN.s 			page 908


     /tmp/ccBFDvgN.s:22496  .text.op_setspeed:000000000000001c $d
     /tmp/ccBFDvgN.s:22501  .text.op_prompt:0000000000000000 $t
     /tmp/ccBFDvgN.s:22509  .text.op_prompt:0000000000000000 op_prompt
     /tmp/ccBFDvgN.s:22581  .text.op_prompt:0000000000000028 $d
     /tmp/ccBFDvgN.s:22587  .text.XisInt:0000000000000000 $t
     /tmp/ccBFDvgN.s:22595  .text.XisInt:0000000000000000 XisInt
     /tmp/ccBFDvgN.s:22707  .text.XisInt:000000000000005c $d
     /tmp/ccBFDvgN.s:22712  .text.XisEvenOrOdd:0000000000000000 $t
     /tmp/ccBFDvgN.s:22720  .text.XisEvenOrOdd:0000000000000000 XisEvenOrOdd
     /tmp/ccBFDvgN.s:22834  .text.XisEvenOrOdd:0000000000000060 $d
     /tmp/ccBFDvgN.s:22839  .text.XisPrime:0000000000000000 $t
     /tmp/ccBFDvgN.s:22847  .text.XisPrime:0000000000000000 XisPrime
     /tmp/ccBFDvgN.s:23007  .text.XisPrime:000000000000007c $d
     /tmp/ccBFDvgN.s:23013  .text.isInfinite:0000000000000000 $t
     /tmp/ccBFDvgN.s:23021  .text.isInfinite:0000000000000000 isInfinite
     /tmp/ccBFDvgN.s:23073  .text.isInfinite:000000000000002c $d
     /tmp/ccBFDvgN.s:23078  .text.isNan:0000000000000000 $t
     /tmp/ccBFDvgN.s:23086  .text.isNan:0000000000000000 isNan
     /tmp/ccBFDvgN.s:23153  .text.isNan:000000000000003c $d
     /tmp/ccBFDvgN.s:23158  .text.isSpecial:0000000000000000 $t
     /tmp/ccBFDvgN.s:23166  .text.isSpecial:0000000000000000 isSpecial
     /tmp/ccBFDvgN.s:23233  .text.isSpecial:000000000000003c $d
     /tmp/ccBFDvgN.s:23238  .text.op_entryp:0000000000000000 $t
     /tmp/ccBFDvgN.s:23246  .text.op_entryp:0000000000000000 op_entryp
     /tmp/ccBFDvgN.s:23267  .text.op_entryp:0000000000000010 $d
     /tmp/ccBFDvgN.s:23272  .text.reg_decode:0000000000000000 $t
     /tmp/ccBFDvgN.s:23280  .text.reg_decode:0000000000000000 reg_decode
     /tmp/ccBFDvgN.s:24084  .text.reg_decode:0000000000000218 $d
     /tmp/ccBFDvgN.s:24098  .text.op_regcopy:0000000000000000 $t
     /tmp/ccBFDvgN.s:24106  .text.op_regcopy:0000000000000000 op_regcopy
     /tmp/ccBFDvgN.s:24209  .text.op_regcopy:0000000000000048 $d
     /tmp/ccBFDvgN.s:24214  .text.op_regswap:0000000000000000 $t
     /tmp/ccBFDvgN.s:24222  .text.op_regswap:0000000000000000 op_regswap
     /tmp/ccBFDvgN.s:24356  .text.op_regswap:000000000000006c $d
     /tmp/ccBFDvgN.s:24361  .text.op_regclr:0000000000000000 $t
     /tmp/ccBFDvgN.s:24369  .text.op_regclr:0000000000000000 op_regclr
     /tmp/ccBFDvgN.s:24450  .text.op_regclr:0000000000000044 $d
     /tmp/ccBFDvgN.s:24455  .text.op_regsort:0000000000000000 $t
     /tmp/ccBFDvgN.s:24463  .text.op_regsort:0000000000000000 op_regsort
     /tmp/ccBFDvgN.s:24747  .text.reset_volatile_state:0000000000000000 $t
     /tmp/ccBFDvgN.s:24755  .text.reset_volatile_state:0000000000000000 reset_volatile_state
     /tmp/ccBFDvgN.s:24779  .text.reset_volatile_state:0000000000000010 $d
     /tmp/ccBFDvgN.s:24784  .rodata.busy.str1.4:0000000000000000 $d
     /tmp/ccBFDvgN.s:24788  .text.busy:0000000000000000 $t
     /tmp/ccBFDvgN.s:24796  .text.busy:0000000000000000 busy
     /tmp/ccBFDvgN.s:24835  .text.busy:0000000000000018 $d
                            *COM*:0000000000000004 Busy
     /tmp/ccBFDvgN.s:24844  .text.intMonadic:0000000000000000 $t
     /tmp/ccBFDvgN.s:24852  .text.intMonadic:0000000000000000 intMonadic
     /tmp/ccBFDvgN.s:25081  .text.intMonadic:0000000000000084 $d
                            *COM*:0000000000000002 XeqOpCode
     /tmp/ccBFDvgN.s:25091  .text.intDyadic:0000000000000000 $t
     /tmp/ccBFDvgN.s:25099  .text.intDyadic:0000000000000000 intDyadic
     /tmp/ccBFDvgN.s:25383  .text.intDyadic:00000000000000c0 $d
     /tmp/ccBFDvgN.s:25393  .text.xeq_init_contexts:0000000000000000 $t
     /tmp/ccBFDvgN.s:25401  .text.xeq_init_contexts:0000000000000000 xeq_init_contexts
     /tmp/ccBFDvgN.s:25520  .text.xeq_init_contexts:0000000000000078 $d
ARM GAS  /tmp/ccBFDvgN.s 			page 909


                            *COM*:0000000000000004 ProgFree
     /tmp/ccBFDvgN.s:25533  .text.not_running:0000000000000000 $t
     /tmp/ccBFDvgN.s:25541  .text.not_running:0000000000000000 not_running
     /tmp/ccBFDvgN.s:25596  .text.not_running:000000000000001c $d
     /tmp/ccBFDvgN.s:25602  .text.set_running_off_sst:0000000000000000 $t
     /tmp/ccBFDvgN.s:25610  .text.set_running_off_sst:0000000000000000 set_running_off_sst
     /tmp/ccBFDvgN.s:25627  .text.set_running_off_sst:0000000000000008 $d
     /tmp/ccBFDvgN.s:25632  .text.set_running_on_sst:0000000000000000 $t
     /tmp/ccBFDvgN.s:25640  .text.set_running_on_sst:0000000000000000 set_running_on_sst
     /tmp/ccBFDvgN.s:25657  .text.set_running_on_sst:0000000000000008 $d
     /tmp/ccBFDvgN.s:25662  .text.set_running_off:0000000000000000 $t
     /tmp/ccBFDvgN.s:25670  .text.set_running_off:0000000000000000 set_running_off
     /tmp/ccBFDvgN.s:25714  .text.set_running_off:000000000000001c $d
     /tmp/ccBFDvgN.s:25720  .text.set_running_on:0000000000000000 $t
     /tmp/ccBFDvgN.s:25728  .text.set_running_on:0000000000000000 set_running_on
     /tmp/ccBFDvgN.s:25827  .text.set_running_on:0000000000000034 $d
     /tmp/ccBFDvgN.s:25835  .text.gsbgto:0000000000000000 $t
     /tmp/ccBFDvgN.s:25842  .text.gsbgto:0000000000000000 gsbgto
     /tmp/ccBFDvgN.s:26021  .text.gsbgto:000000000000008c $d
     /tmp/ccBFDvgN.s:26032  .text.cmdgtocommon:0000000000000000 $t
     /tmp/ccBFDvgN.s:26040  .text.cmdgtocommon:0000000000000000 cmdgtocommon
     /tmp/ccBFDvgN.s:26126  .text.cmdgtocommon:000000000000002c $d
     /tmp/ccBFDvgN.s:26132  .text.cmdgto:0000000000000000 $t
     /tmp/ccBFDvgN.s:26140  .text.cmdgto:0000000000000000 cmdgto
     /tmp/ccBFDvgN.s:26221  .text.cmdgto:000000000000003c $d
     /tmp/ccBFDvgN.s:26229  .text.branchtoalpha:0000000000000000 $t
     /tmp/ccBFDvgN.s:26236  .text.branchtoalpha:0000000000000000 branchtoalpha
     /tmp/ccBFDvgN.s:26293  .text.cmdalphagto:0000000000000000 $t
     /tmp/ccBFDvgN.s:26301  .text.cmdalphagto:0000000000000000 cmdalphagto
     /tmp/ccBFDvgN.s:26353  .text.op_gtoalpha:0000000000000000 $t
     /tmp/ccBFDvgN.s:26361  .text.op_gtoalpha:0000000000000000 op_gtoalpha
     /tmp/ccBFDvgN.s:26425  .text.op_gtoalpha:0000000000000030 $d
     /tmp/ccBFDvgN.s:26430  .text.cmdskip:0000000000000000 $t
     /tmp/ccBFDvgN.s:26438  .text.cmdskip:0000000000000000 cmdskip
     /tmp/ccBFDvgN.s:26621  .text.cmdskip:0000000000000078 $d
     /tmp/ccBFDvgN.s:26629  .text.cmdback:0000000000000000 $t
     /tmp/ccBFDvgN.s:26637  .text.cmdback:0000000000000000 cmdback
     /tmp/ccBFDvgN.s:26790  .text.cmdback:0000000000000064 $d
     /tmp/ccBFDvgN.s:26798  .text.usergsb_common:0000000000000000 $t
     /tmp/ccBFDvgN.s:26805  .text.usergsb_common:0000000000000000 usergsb_common
     /tmp/ccBFDvgN.s:26916  .text.usergsb_common:0000000000000078 $d
     /tmp/ccBFDvgN.s:26925  .text.do_usergsb:0000000000000000 $t
     /tmp/ccBFDvgN.s:26933  .text.do_usergsb:0000000000000000 do_usergsb
     /tmp/ccBFDvgN.s:26966  .text.do_usergsb:0000000000000014 $d
     /tmp/ccBFDvgN.s:26971  .text.cmdmultigto:0000000000000000 $t
     /tmp/ccBFDvgN.s:26979  .text.cmdmultigto:0000000000000000 cmdmultigto
     /tmp/ccBFDvgN.s:27083  .text.cmdmultigto:000000000000004c $d
     /tmp/ccBFDvgN.s:27089  .text.store_a_to_d:0000000000000000 $t
     /tmp/ccBFDvgN.s:27097  .text.store_a_to_d:0000000000000000 store_a_to_d
     /tmp/ccBFDvgN.s:27145  .text.store_a_to_d:0000000000000020 $d
     /tmp/ccBFDvgN.s:27150  .text.cmdlocr:0000000000000000 $t
     /tmp/ccBFDvgN.s:27158  .text.cmdlocr:0000000000000000 cmdlocr
     /tmp/ccBFDvgN.s:27494  .text.cmdlocr:000000000000015c $d
     /tmp/ccBFDvgN.s:27502  .text.cmdxout:0000000000000000 $t
     /tmp/ccBFDvgN.s:27510  .text.cmdxout:0000000000000000 cmdxout
     /tmp/ccBFDvgN.s:28032  .text.cmdxout:00000000000001e4 $d
     /tmp/ccBFDvgN.s:28047  .text.cmdconverged:0000000000000000 $t
ARM GAS  /tmp/ccBFDvgN.s 			page 910


     /tmp/ccBFDvgN.s:28055  .text.cmdconverged:0000000000000000 cmdconverged
     /tmp/ccBFDvgN.s:28284  .text.cmdconverged:00000000000000e0 $d
     /tmp/ccBFDvgN.s:28294  .text.cmdshuffle:0000000000000000 $t
     /tmp/ccBFDvgN.s:28302  .text.cmdshuffle:0000000000000000 cmdshuffle
     /tmp/ccBFDvgN.s:28535  .text.cmdshuffle:0000000000000084 $d
     /tmp/ccBFDvgN.s:28541  .text.cmdmode:0000000000000000 $t
     /tmp/ccBFDvgN.s:28549  .text.cmdmode:0000000000000000 cmdmode
     /tmp/ccBFDvgN.s:28630  .text.cmdmode:0000000000000050 $d
     /tmp/ccBFDvgN.s:28635  .text.cmdlpop:0000000000000000 $t
     /tmp/ccBFDvgN.s:28643  .text.cmdlpop:0000000000000000 cmdlpop
     /tmp/ccBFDvgN.s:28715  .text.cmdlpop:0000000000000034 $d
     /tmp/ccBFDvgN.s:28721  .text.cmdregs:0000000000000000 $t
     /tmp/ccBFDvgN.s:28729  .text.cmdregs:0000000000000000 cmdregs
     /tmp/ccBFDvgN.s:28909  .text.cmdregs:00000000000000ac $d
     /tmp/ccBFDvgN.s:28916  .text.op_double:0000000000000000 $t
     /tmp/ccBFDvgN.s:28924  .text.op_double:0000000000000000 op_double
     /tmp/ccBFDvgN.s:29224  .text.op_double:000000000000011c $d
     /tmp/ccBFDvgN.s:29231  .text.cmdrestm:0000000000000000 $t
     /tmp/ccBFDvgN.s:29239  .text.cmdrestm:0000000000000000 cmdrestm
     /tmp/ccBFDvgN.s:29419  .text.cmdrestm:0000000000000098 $d
     /tmp/ccBFDvgN.s:29424  .text.cmdxin:0000000000000000 $t
     /tmp/ccBFDvgN.s:29432  .text.cmdxin:0000000000000000 cmdxin
     /tmp/ccBFDvgN.s:29858  .text.cmdxin:00000000000001b0 $d
     /tmp/ccBFDvgN.s:29871  .rodata.xeq.str1.4:0000000000000000 $d
     /tmp/ccBFDvgN.s:29875  .text.xeq:0000000000000000 $t
     /tmp/ccBFDvgN.s:29883  .text.xeq:0000000000000000 xeq
     /tmp/ccBFDvgN.s:30011  .text.xeq:0000000000000078 $d
     /tmp/ccBFDvgN.s:30018  .text.xeq:0000000000000086 $t
     /tmp/ccBFDvgN.s:30803  .text.xeq:00000000000002f8 $d
     /tmp/ccBFDvgN.s:30824  .text.xeq:0000000000000340 $t
     /tmp/ccBFDvgN.s:34245  .text.dispatch_xrom:0000000000000000 dispatch_xrom
     /tmp/ccBFDvgN.s:31133  .text.xeq:000000000000042a $d
     /tmp/ccBFDvgN.s:31177  .text.xeq:0000000000000480 $t
     /tmp/ccBFDvgN.s:31801  .text.xeq:00000000000005f4 $d
     /tmp/ccBFDvgN.s:31815  .text.xeq:0000000000000610 $t
     /tmp/ccBFDvgN.s:32679  .text.xeq:00000000000008e8 $d
     /tmp/ccBFDvgN.s:32693  .text.xeq:0000000000000910 $t
     /tmp/ccBFDvgN.s:33531  .text.xeq:0000000000000c00 $d
     /tmp/ccBFDvgN.s:33542  .text.xeq:0000000000000c20 $t
     /tmp/ccBFDvgN.s:33970  .text.xeq:0000000000000d88 $d
     /tmp/ccBFDvgN.s:33982  .text.xeq_single:0000000000000000 $t
     /tmp/ccBFDvgN.s:33989  .text.xeq_single:0000000000000000 xeq_single
     /tmp/ccBFDvgN.s:34028  .text.xeq_single:0000000000000020 $d
     /tmp/ccBFDvgN.s:34033  .text.xeq_xrom2:0000000000000000 $t
     /tmp/ccBFDvgN.s:34040  .text.xeq_xrom2:0000000000000000 xeq_xrom2
     /tmp/ccBFDvgN.s:34188  .text.xeq_xrom2:0000000000000070 $d
     /tmp/ccBFDvgN.s:34202  .text.xeq_xrom:0000000000000000 $t
     /tmp/ccBFDvgN.s:34210  .text.xeq_xrom:0000000000000000 xeq_xrom
     /tmp/ccBFDvgN.s:34233  .text.xeq_xrom:0000000000000010 $d
     /tmp/ccBFDvgN.s:34238  .text.dispatch_xrom:0000000000000000 $t
     /tmp/ccBFDvgN.s:34376  .text.dispatch_xrom:000000000000005c $d
     /tmp/ccBFDvgN.s:34386  .text.op_rs:0000000000000000 $t
     /tmp/ccBFDvgN.s:34394  .text.op_rs:0000000000000000 op_rs
     /tmp/ccBFDvgN.s:34538  .text.op_rs:0000000000000078 $d
     /tmp/ccBFDvgN.s:34547  .text.xeqprog:0000000000000000 $t
     /tmp/ccBFDvgN.s:34555  .text.xeqprog:0000000000000000 xeqprog
     /tmp/ccBFDvgN.s:34669  .text.xeqprog:0000000000000064 $d
ARM GAS  /tmp/ccBFDvgN.s 			page 911


                            *COM*:0000000000000004 JustStopped
     /tmp/ccBFDvgN.s:34677  .text.xeq_sst_bst:0000000000000000 $t
     /tmp/ccBFDvgN.s:34685  .text.xeq_sst_bst:0000000000000000 xeq_sst_bst
     /tmp/ccBFDvgN.s:34898  .text.xeq_sst_bst:000000000000009c $d
     /tmp/ccBFDvgN.s:34908  .text.init_34s:0000000000000000 $t
     /tmp/ccBFDvgN.s:34916  .text.init_34s:0000000000000000 init_34s
     /tmp/ccBFDvgN.s:34976  .text.init_34s:0000000000000034 $d
     /tmp/ccBFDvgN.s:34982  .rodata.paste_raw_x.str1.4:0000000000000000 $d
     /tmp/ccBFDvgN.s:34986  .text.paste_raw_x:0000000000000000 $t
     /tmp/ccBFDvgN.s:34994  .text.paste_raw_x:0000000000000000 paste_raw_x
     /tmp/ccBFDvgN.s:35362  .text.paste_raw_x:00000000000000f4 $d
     /tmp/ccBFDvgN.s:35375  .rodata.fill_buffer_from_raw_x.str1.4:0000000000000000 $d
     /tmp/ccBFDvgN.s:35379  .text.fill_buffer_from_raw_x:0000000000000000 $t
     /tmp/ccBFDvgN.s:35387  .text.fill_buffer_from_raw_x:0000000000000000 fill_buffer_from_raw_x
     /tmp/ccBFDvgN.s:35644  .text.fill_buffer_from_raw_x:00000000000000c4 $d
                            *COM*:0000000000000004 RectPolConv
     /tmp/ccBFDvgN.s:35732  .rodata.xrom_targets:0000000000000000 xrom_targets
     /tmp/ccBFDvgN.s:35672  .rodata:0000000000000000 $d
     /tmp/ccBFDvgN.s:35680  .bss.result.11636:0000000000000000 $d
     /tmp/ccBFDvgN.s:35684  .bss.result.11636:0000000000000000 result.11636
     /tmp/ccBFDvgN.s:35687  .data.RegionTab:0000000000000000 $d
     /tmp/ccBFDvgN.s:35691  .data.RegionTab:0000000000000000 RegionTab
     /tmp/ccBFDvgN.s:35697  .rodata.StackRegMask:0000000000000000 $d
     /tmp/ccBFDvgN.s:35701  .rodata.StackRegMask:0000000000000000 StackRegMask
     /tmp/ccBFDvgN.s:35705  .rodata.convergence_tolerances:0000000000000000 $d
     /tmp/ccBFDvgN.s:35709  .rodata.convergence_tolerances:0000000000000000 convergence_tolerances
     /tmp/ccBFDvgN.s:35714  .rodata.modes.11329:0000000000000000 $d
     /tmp/ccBFDvgN.s:35718  .rodata.modes.11329:0000000000000000 modes.11329
     /tmp/ccBFDvgN.s:35721  .rodata.modes.11846:0000000000000000 $d
     /tmp/ccBFDvgN.s:35725  .rodata.modes.11846:0000000000000000 modes.11846
     /tmp/ccBFDvgN.s:35728  .rodata.xrom_targets:0000000000000000 $d
     /tmp/ccBFDvgN.s:19006  .text.do_tst:000000000000006b $d
     /tmp/ccBFDvgN.s:19006  .text.do_tst:000000000000006c $t
     /tmp/ccBFDvgN.s:20710  .text.cmdflag:0000000000000033 $d
     /tmp/ccBFDvgN.s:20710  .text.cmdflag:0000000000000034 $t
     /tmp/ccBFDvgN.s:21870  .text.cmddisp:0000000000000039 $d
     /tmp/ccBFDvgN.s:21870  .text.cmddisp:000000000000003a $t

UNDEFINED SYMBOLS
StateWhileOn
main_ram
xrom_size
XromParams
XromLocal
xset
decNumberRoundDigits
decNumberTrunc
dn_eq
set_carry
dn_to_ull
dn_abs
check_overflow
set_overflow
build_value
dn_lt
const_2pow64
xcopy
ARM GAS  /tmp/ccBFDvgN.s 			page 912


argcmds
display
shutdown
library_ram
backup_ram
scopy
num_arg_0
prt
scopy_char
DispMsg
dot
error_message
JustDisplayed
ShowRPN
decContextDefault
decimal64FromNumber
decimal128FromNumber
decimal64ToNumber
decimal128ToNumber
int_base
cnsts
cnsts_d128
cnsts_d64
dn_max
dn_add
dn_subtract
dn_multiply
dn_divide
dn_min
cmplxDivide
cmplxAdd
cmplxSubtract
cmplxMultiply
decNumberNormalize
decNumberRoundDecimals
const_360
const_2PI
const_400
reset_shift
dn_minus
set_menu
display_current_menu
finish_cpx_entry
set_default_menu
intMax
intAdd
intSubtract
intMultiply
intDivide
intMin
extract_value
dn_dec
dn_eq0
dn_inc
row_column_to_keycode
ullint_to_dn
find_char
ARM GAS  /tmp/ccBFDvgN.s 			page 913


decNumberFromString
decNumberCopy
decNumberZero
stack_begin
const_PI
word_size
int_mode
dn_mulpow10
put_key
build_user_menu_from_program
const_9on5
const_32
decNumberPow10
const_0_05
dn_log10
const_20
cnsts_conv
keycode_to_row_column
dn_compare
decNumberRnd
dn_mul100
dn_le0
dn_lt0
dn_1
finish_display
mask_value
int_to_dn
decNumber2Fraction
GoFast
alpha_view_common
is_int
is_even
isPrime
dn_to_int
message
monfuncs
xrom
dyfuncs
SizeStatRegs
alpha_rcl_s
XromA2D
relative_error
cmplxR
absolute_error
const_1e_14
const_1e_32
const_1e_24
const_NaN
sprintf
multicmds
niladics
trifuncs
sigma_minus
sigma_val
intChs
const_1
const_0
ARM GAS  /tmp/ccBFDvgN.s 			page 914


sigma_plus
set_NaN
finish_RPN
is_key_pressed
clr_dot
set_dot
OpCode
checksum_ram
init_state
reset
StopWatchStatus
strdup
strtok
strtoull
strchr
free
__aeabi_uldivmod
decNumberToString

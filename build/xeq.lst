ARM GAS  /tmp/cciWh9P3.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xeq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.find_section_bounds,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	find_section_bounds:
  27              	.LVL0:
  28              	.LFB19:
  29              		.file 1 "src/xeq.c"
   1:src/xeq.c     **** /* This file is part of 34S.
   2:src/xeq.c     ****  * 
   3:src/xeq.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/xeq.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/xeq.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/xeq.c     ****  * (at your option) any later version.
   7:src/xeq.c     ****  * 
   8:src/xeq.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/xeq.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/xeq.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/xeq.c     ****  * GNU General Public License for more details.
  12:src/xeq.c     ****  * 
  13:src/xeq.c     ****  * You should have received a copy of the GNU General Public License
  14:src/xeq.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/xeq.c     ****  */
  16:src/xeq.c     **** 
  17:src/xeq.c     **** #ifndef REALBUILD
  18:src/xeq.c     **** 
  19:src/xeq.c     **** #if defined(WIN32) && !defined(QTGUI) && !defined(IOS) && !defined(__GNUC__) && !defined(DM42)
  20:src/xeq.c     **** 
  21:src/xeq.c     **** #include <stdlib.h>  // sleep
  22:src/xeq.c     **** #include "win32.h"
  23:src/xeq.c     **** #define sleep _sleep
  24:src/xeq.c     **** #define strtoull _strtoui64
  25:src/xeq.c     **** 
  26:src/xeq.c     **** #else
  27:src/xeq.c     **** #ifdef DM42
  28:src/xeq.c     **** #include "dmcp.h"
  29:src/xeq.c     **** #else
ARM GAS  /tmp/cciWh9P3.s 			page 2


  30:src/xeq.c     **** #include <unistd.h>
  31:src/xeq.c     **** #include <sys/time.h>
  32:src/xeq.c     **** extern unsigned long long strtoull(const char *, char **, int);
  33:src/xeq.c     **** #endif
  34:src/xeq.c     **** 
  35:src/xeq.c     **** #endif
  36:src/xeq.c     **** 
  37:src/xeq.c     **** #include <stdio.h>   // (s)printf
  38:src/xeq.c     **** #include <string.h>
  39:src/xeq.c     **** #include <stdlib.h>
  40:src/xeq.c     **** 
  41:src/xeq.c     **** #endif // REALBUILD
  42:src/xeq.c     **** 
  43:src/xeq.c     **** #ifdef IOS
  44:src/xeq.c     **** #include <stdarg.h>
  45:src/xeq.c     **** #endif
  46:src/xeq.c     **** 
  47:src/xeq.c     **** #if __GNUC__ >= 4 && __GNUC_MINOR__ >= 6
  48:src/xeq.c     **** #define GNUC_POP_ERROR
  49:src/xeq.c     **** #pragma GCC diagnostic push
  50:src/xeq.c     **** #pragma GCC diagnostic ignored "-Warray-bounds"
  51:src/xeq.c     **** #endif
  52:src/xeq.c     **** 
  53:src/xeq.c     **** #define XEQ_INTERNAL 1
  54:src/xeq.c     **** #define DM42SAFE
  55:src/xeq.c     **** #include "xeq.h"
  56:src/xeq.c     **** #include "storage.h"
  57:src/xeq.c     **** #include "decn.h"
  58:src/xeq.c     **** #include "complex.h"
  59:src/xeq.c     **** #include "stats.h"
  60:src/xeq.c     **** #include "display.h"
  61:src/xeq.c     **** #include "consts.h"
  62:src/xeq.c     **** #include "int.h"
  63:src/xeq.c     **** #include "date.h"
  64:src/xeq.c     **** #include "lcd.h"
  65:src/xeq.c     **** #include "xrom.h"
  66:src/xeq.c     **** #include "alpha.h"
  67:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
  68:src/xeq.c     **** #include "stopwatch.h"
  69:src/xeq.c     **** #endif
  70:src/xeq.c     **** #ifndef DM42
  71:src/xeq.c     **** #include "printer.h"
  72:src/xeq.c     **** #endif
  73:src/xeq.c     **** #undef DM42SAFE
  74:src/xeq.c     **** 
  75:src/xeq.c     **** #include "pretty.h"
  76:src/xeq.c     **** 
  77:src/xeq.c     **** 
  78:src/xeq.c     **** #include "xrom_targets.c"	// Generated by PP
  79:src/xeq.c     **** 
  80:src/xeq.c     **** /* Define the number of program Ticks that must elapse between flashing the
  81:src/xeq.c     ****  * RCL annunciator.
  82:src/xeq.c     ****  */
  83:src/xeq.c     **** #define TICKS_PER_FLASH	(5)
  84:src/xeq.c     **** 
  85:src/xeq.c     **** /*
  86:src/xeq.c     ****  *  A program is running
ARM GAS  /tmp/cciWh9P3.s 			page 3


  87:src/xeq.c     ****  */
  88:src/xeq.c     **** FLAG Running;
  89:src/xeq.c     **** FLAG XromRunning;
  90:src/xeq.c     **** 
  91:src/xeq.c     **** #ifndef CONSOLE
  92:src/xeq.c     **** /*
  93:src/xeq.c     ****  *  A program has just stopped
  94:src/xeq.c     ****  */
  95:src/xeq.c     **** FLAG JustStopped;
  96:src/xeq.c     **** #endif
  97:src/xeq.c     **** 
  98:src/xeq.c     **** /*
  99:src/xeq.c     ****  *  Count down counter for a programmed pause
 100:src/xeq.c     ****  */
 101:src/xeq.c     **** volatile unsigned char Pause;
 102:src/xeq.c     **** 
 103:src/xeq.c     **** /*
 104:src/xeq.c     ****  *  Some long running function has called busy();
 105:src/xeq.c     ****  */
 106:src/xeq.c     **** FLAG Busy;
 107:src/xeq.c     **** 
 108:src/xeq.c     **** /*
 109:src/xeq.c     ****  *  Error code
 110:src/xeq.c     ****  */
 111:src/xeq.c     **** SMALL_INT Error;
 112:src/xeq.c     **** 
 113:src/xeq.c     **** /*
 114:src/xeq.c     ****  *  Indication of PC wrap around
 115:src/xeq.c     ****  */
 116:src/xeq.c     **** FLAG PcWrapped;
 117:src/xeq.c     **** 
 118:src/xeq.c     **** /*
 119:src/xeq.c     ****  *  Currently executed function
 120:src/xeq.c     ****  */
 121:src/xeq.c     **** s_opcode XeqOpCode;
 122:src/xeq.c     **** 
 123:src/xeq.c     **** /*
 124:src/xeq.c     ****  *  Temporary display (not X)
 125:src/xeq.c     ****  */
 126:src/xeq.c     **** SMALL_INT ShowRegister;
 127:src/xeq.c     **** 
 128:src/xeq.c     **** /*
 129:src/xeq.c     ****  *  User code being called from XROM
 130:src/xeq.c     ****  */
 131:src/xeq.c     **** SMALL_INT XromUserPc;
 132:src/xeq.c     **** SMALL_INT UserLocalRegs;
 133:src/xeq.c     **** 
 134:src/xeq.c     **** /* We need various different math contexts.
 135:src/xeq.c     ****  * More efficient to define these globally and reuse them as needed.
 136:src/xeq.c     ****  */
 137:src/xeq.c     **** decContext Ctx;
 138:src/xeq.c     **** 
 139:src/xeq.c     **** /*
 140:src/xeq.c     ****  * A buffer for instruction display
 141:src/xeq.c     ****  */
 142:src/xeq.c     **** char TraceBuffer[25];
 143:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 4


 144:src/xeq.c     **** /*
 145:src/xeq.c     ****  *  Total Size of the return stack
 146:src/xeq.c     ****  */
 147:src/xeq.c     **** SMALL_INT RetStkSize;
 148:src/xeq.c     **** 
 149:src/xeq.c     **** /*
 150:src/xeq.c     ****  *  Number of remaining program steps
 151:src/xeq.c     ****  */
 152:src/xeq.c     **** SMALL_INT ProgFree;
 153:src/xeq.c     **** 
 154:src/xeq.c     **** /*
 155:src/xeq.c     ****  * The actual top of the return stack
 156:src/xeq.c     ****  */
 157:src/xeq.c     **** unsigned short *RetStk;
 158:src/xeq.c     **** 
 159:src/xeq.c     **** /*
 160:src/xeq.c     ****  *  The location of the RPN stack
 161:src/xeq.c     ****  */
 162:src/xeq.c     **** REGISTER *StackBase;
 163:src/xeq.c     **** 
 164:src/xeq.c     **** #ifdef INFRARED
 165:src/xeq.c     **** /*
 166:src/xeq.c     ****  *  Is tracing active?
 167:src/xeq.c     ****  */
 168:src/xeq.c     **** FLAG Tracing;
 169:src/xeq.c     **** #endif
 170:src/xeq.c     **** 
 171:src/xeq.c     **** /*
 172:src/xeq.c     **** *	Indicates that a coordinate converstion has just happened
 173:src/xeq.c     **** */
 174:src/xeq.c     **** #ifdef RP_PREFIX
 175:src/xeq.c     **** SMALL_INT RectPolConv; // 1 - R->P just done; 2 - P->R just done
 176:src/xeq.c     **** #endif
 177:src/xeq.c     **** 
 178:src/xeq.c     **** /*
 179:src/xeq.c     ****  *  Check if the current PC is in XROM
 180:src/xeq.c     ****  */
 181:src/xeq.c     **** int is_xrom(void) {
 182:src/xeq.c     **** 	return isXROM(state_pc());
 183:src/xeq.c     **** }
 184:src/xeq.c     **** 
 185:src/xeq.c     **** /*
 186:src/xeq.c     ****  *  Shift the return stack.
 187:src/xeq.c     ****  *  The distance is in levels.
 188:src/xeq.c     ****  *  If argument is negative, return stack will shrink.
 189:src/xeq.c     ****  *  Returns 1 if unsuccessful (error is set)
 190:src/xeq.c     ****  */
 191:src/xeq.c     **** int move_retstk(int distance)
 192:src/xeq.c     **** {
 193:src/xeq.c     **** #ifndef REALBUILD
 194:src/xeq.c     **** 	// Sanity check
 195:src/xeq.c     **** 	if (XromFlags.xIN) {
 196:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 197:src/xeq.c     **** 		return 1;
 198:src/xeq.c     **** 	}
 199:src/xeq.c     **** #endif
 200:src/xeq.c     **** 	if (RetStkSize + RetStkPtr + distance < 0) {
ARM GAS  /tmp/cciWh9P3.s 			page 5


 201:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 202:src/xeq.c     **** 		return 1;
 203:src/xeq.c     **** 	}
 204:src/xeq.c     **** 	xcopy(RetStk + RetStkPtr + distance, RetStk + RetStkPtr, (-RetStkPtr) << 1);
 205:src/xeq.c     **** 	RetStk += distance;
 206:src/xeq.c     **** 	RetStkSize += distance;
 207:src/xeq.c     **** 	return 0;
 208:src/xeq.c     **** }
 209:src/xeq.c     **** 
 210:src/xeq.c     **** /*
 211:src/xeq.c     ****  *  How many stack levels with local data have we?
 212:src/xeq.c     ****  */
 213:src/xeq.c     **** int local_levels(void) {
 214:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 215:src/xeq.c     **** }
 216:src/xeq.c     **** 
 217:src/xeq.c     **** /*
 218:src/xeq.c     ****  *  How many local registers have we?
 219:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 220:src/xeq.c     ****  */
 221:src/xeq.c     **** int local_regs_rarg(enum rarg op) {
 222:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 223:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 224:src/xeq.c     **** }
 225:src/xeq.c     **** 
 226:src/xeq.c     **** /*
 227:src/xeq.c     ****  *  How many local registers have we?
 228:src/xeq.c     ****  */
 229:src/xeq.c     **** int local_regs(void) {
 230:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 231:src/xeq.c     **** }
 232:src/xeq.c     **** 
 233:src/xeq.c     **** /*
 234:src/xeq.c     ****  *  How many global registers have we?
 235:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 236:src/xeq.c     ****  */
 237:src/xeq.c     **** unsigned int global_regs_rarg(enum rarg op) {
 238:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 239:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 240:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 241:src/xeq.c     **** 	}
 242:src/xeq.c     **** 	else
 243:src/xeq.c     **** 		return NumRegs;
 244:src/xeq.c     **** }
 245:src/xeq.c     **** 
 246:src/xeq.c     **** /*
 247:src/xeq.c     ****  *  How many global registers have we?
 248:src/xeq.c     ****  */
 249:src/xeq.c     **** unsigned int global_regs(void) {
 250:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 251:src/xeq.c     **** }
 252:src/xeq.c     **** 
 253:src/xeq.c     **** 
 254:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 255:src/xeq.c     **** // Console screen only
 256:src/xeq.c     **** unsigned int get_local_flags(void) {
 257:src/xeq.c     **** 	if (LocalRegs == 0)
ARM GAS  /tmp/cciWh9P3.s 			page 6


 258:src/xeq.c     **** 		return 0;
 259:src/xeq.c     **** 	return RetStk[LocalRegs + 1];
 260:src/xeq.c     **** }
 261:src/xeq.c     **** #endif
 262:src/xeq.c     **** 
 263:src/xeq.c     **** void version(enum nilop op) {
 264:src/xeq.c     **** 	State2.version = 1;
 265:src/xeq.c     **** 	if (!State2.runmode)
 266:src/xeq.c     **** 		display();
 267:src/xeq.c     **** }
 268:src/xeq.c     **** 
 269:src/xeq.c     **** void cmd_off(enum nilop op) {
 270:src/xeq.c     **** 	shutdown();
 271:src/xeq.c     **** }
 272:src/xeq.c     **** 
 273:src/xeq.c     **** #ifndef state_pc
 274:src/xeq.c     **** unsigned int state_pc(void) {
 275:src/xeq.c     **** 	return State.pc;	
 276:src/xeq.c     **** }
 277:src/xeq.c     **** #endif
 278:src/xeq.c     **** static void raw_set_pc(unsigned int pc) {
 279:src/xeq.c     **** 	State.pc = pc;
 280:src/xeq.c     **** 	update_program_bounds(0);
 281:src/xeq.c     **** }
 282:src/xeq.c     **** 
 283:src/xeq.c     **** /*
 284:src/xeq.c     ****  *  Where do the program regions start?
 285:src/xeq.c     ****  */
 286:src/xeq.c     **** #ifdef DM42
 287:src/xeq.c     **** static s_opcode * RegionTab[] = {
 288:src/xeq.c     **** 	NULL,
 289:src/xeq.c     **** 	NULL,
 290:src/xeq.c     **** 	NULL,
 291:src/xeq.c     **** 	xrom
 292:src/xeq.c     **** };
 293:src/xeq.c     **** void init_RegionTab (void) {
 294:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 295:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 296:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 297:src/xeq.c     **** }
 298:src/xeq.c     **** #else
 299:src/xeq.c     **** static const s_opcode *const RegionTab[] = {
 300:src/xeq.c     **** 	Prog,
 301:src/xeq.c     **** 	UserFlash.prog,
 302:src/xeq.c     **** 	BackupFlash._prog,
 303:src/xeq.c     **** 	xrom
 304:src/xeq.c     **** };
 305:src/xeq.c     **** #endif
 306:src/xeq.c     **** /*
 307:src/xeq.c     ****  *  Size of a program segment
 308:src/xeq.c     ****  */
 309:src/xeq.c     **** int sizeLIB(int region) {
 310:src/xeq.c     **** 	if (region == REGION_XROM)
 311:src/xeq.c     **** 		return xrom_size;
 312:src/xeq.c     **** 	else
 313:src/xeq.c     **** 		return (int)RegionTab[region][-1];
 314:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 7


 315:src/xeq.c     **** 
 316:src/xeq.c     **** 
 317:src/xeq.c     **** /*
 318:src/xeq.c     ****  *  Get an opcode, check for double length codes
 319:src/xeq.c     ****  */
 320:src/xeq.c     **** static opcode get_opcode( const s_opcode *loc )
 321:src/xeq.c     **** {
 322:src/xeq.c     **** 	opcode r = *loc;
 323:src/xeq.c     **** 	if ( isDBL(r) ) {
 324:src/xeq.c     **** 		r |= loc[1] << 16;
 325:src/xeq.c     **** 	}
 326:src/xeq.c     **** 	return r;
 327:src/xeq.c     **** }
 328:src/xeq.c     **** 
 329:src/xeq.c     **** 
 330:src/xeq.c     **** /* 
 331:src/xeq.c     ****  * Return the program memory location specified.
 332:src/xeq.c     ****  */
 333:src/xeq.c     **** opcode getprog(unsigned int pc) {
 334:src/xeq.c     **** 
 335:src/xeq.c     **** 	const int region = nLIB(pc);
 336:src/xeq.c     **** 	int offset = offsetLIB(pc);
 337:src/xeq.c     **** 
 338:src/xeq.c     **** 	if (offset < 0 || offset >= sizeLIB(region))
 339:src/xeq.c     **** 		return OP_NIL | OP_END;
 340:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 341:src/xeq.c     **** }
 342:src/xeq.c     **** 
 343:src/xeq.c     **** 
 344:src/xeq.c     **** /* 
 345:src/xeq.c     ****  * Return the physical start-address of the current program
 346:src/xeq.c     ****  */
 347:src/xeq.c     **** const s_opcode *get_current_prog(void) {
 348:src/xeq.c     **** 
 349:src/xeq.c     **** 	const int region = nLIB(ProgBegin);
 350:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 351:src/xeq.c     **** }
 352:src/xeq.c     **** 
 353:src/xeq.c     **** 
 354:src/xeq.c     **** /*
 355:src/xeq.c     ****  *  Set PC with sanity check
 356:src/xeq.c     ****  */
 357:src/xeq.c     **** void set_pc(unsigned int pc) {
 358:src/xeq.c     **** 	if (isRAM(pc)) {
 359:src/xeq.c     **** 		if (pc > ProgSize)
 360:src/xeq.c     **** 			pc = ProgSize;
 361:src/xeq.c     **** 		if (pc > 1 && isDBL(Prog_1[pc - 1]))
 362:src/xeq.c     **** 			pc--;
 363:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 364:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 365:src/xeq.c     **** 		if (pc > n - 1)
 366:src/xeq.c     **** 			pc = n - 1;
 367:src/xeq.c     **** 		if (pc > startLIB(pc) && isDBL(getprog(pc - 1)))
 368:src/xeq.c     **** 			--pc;
 369:src/xeq.c     **** 	}
 370:src/xeq.c     **** 	raw_set_pc(pc);
 371:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 8


 372:src/xeq.c     **** 
 373:src/xeq.c     **** 
 374:src/xeq.c     **** 
 375:src/xeq.c     **** /* Locate the beginning and end of a section from a PC that points anywhere within
 376:src/xeq.c     ****  */
 377:src/xeq.c     **** static unsigned short int find_section_bounds(const unsigned int pc, const int endp, unsigned short
  30              		.loc 1 377 119 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 378:src/xeq.c     **** 	unsigned short int top, bottom;
  35              		.loc 1 378 2 view .LVU1
 379:src/xeq.c     **** 
 380:src/xeq.c     **** 	if (endp && State2.runmode) { 
  36              		.loc 1 380 2 view .LVU2
  37              		.loc 1 380 5 is_stmt 0 view .LVU3
  38 0000 71B1     		cbz	r1, .L2
  39              		.loc 1 380 11 discriminator 1 view .LVU4
  40 0002 194B     		ldr	r3, .L14
  41 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
  42 0006 5B06     		lsls	r3, r3, #25
  43 0008 0AD5     		bpl	.L2
 381:src/xeq.c     **** 		// Use the current program as bounds
 382:src/xeq.c     **** 		top = ProgBegin;
  44              		.loc 1 382 3 is_stmt 1 view .LVU5
  45              		.loc 1 382 9 is_stmt 0 view .LVU6
  46 000a 184B     		ldr	r3, .L14+4
  47 000c 1968     		ldr	r1, [r3]
  48              	.LVL1:
 383:src/xeq.c     **** 		bottom = ProgEnd;
  49              		.loc 1 383 3 is_stmt 1 view .LVU7
  50 000e B1F8EC37 		ldrh	r3, [r1, #2028]
  51              		.loc 1 383 10 is_stmt 0 view .LVU8
  52 0012 B1F8EE07 		ldrh	r0, [r1, #2030]
  53              	.LVL2:
 384:src/xeq.c     **** 		if (top == 0)
  54              		.loc 1 384 3 is_stmt 1 view .LVU9
  55 0016 012B     		cmp	r3, #1
  56 0018 38BF     		it	cc
  57 001a 0123     		movcc	r3, #1
  58              	.LVL3:
 385:src/xeq.c     **** 			top = 1;
 386:src/xeq.c     **** 	}
 387:src/xeq.c     **** 	else if (isXROM(pc)) {
 388:src/xeq.c     **** 		top = addrXROM(1);
 389:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 390:src/xeq.c     **** 	} 
 391:src/xeq.c     **** 	else if (isLIB(pc)) {
 392:src/xeq.c     **** 		top = startLIB(pc);
 393:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
 394:src/xeq.c     **** 	}
 395:src/xeq.c     **** 	else {
 396:src/xeq.c     **** 		top = State2.runmode;  // step 001 if not entering a program
 397:src/xeq.c     **** 		bottom = ProgSize;
 398:src/xeq.c     **** 	}
 399:src/xeq.c     **** 	*p_top = top;
ARM GAS  /tmp/cciWh9P3.s 			page 9


  59              		.loc 1 399 2 view .LVU10
  60              		.loc 1 399 9 is_stmt 0 view .LVU11
  61 001c 1380     		strh	r3, [r2]	@ movhi
 400:src/xeq.c     **** 	return bottom;
  62              		.loc 1 400 2 is_stmt 1 view .LVU12
 401:src/xeq.c     **** }
  63              		.loc 1 401 1 is_stmt 0 view .LVU13
  64 001e 7047     		bx	lr
  65              	.LVL4:
  66              	.L2:
 387:src/xeq.c     **** 		top = addrXROM(1);
  67              		.loc 1 387 7 is_stmt 1 view .LVU14
 387:src/xeq.c     **** 		top = addrXROM(1);
  68              		.loc 1 387 11 is_stmt 0 view .LVU15
  69 0020 830B     		lsrs	r3, r0, #14
 387:src/xeq.c     **** 		top = addrXROM(1);
  70              		.loc 1 387 10 view .LVU16
  71 0022 032B     		cmp	r3, #3
  72 0024 0FD0     		beq	.L13
 391:src/xeq.c     **** 		top = startLIB(pc);
  73              		.loc 1 391 7 is_stmt 1 view .LVU17
 391:src/xeq.c     **** 		top = startLIB(pc);
  74              		.loc 1 391 10 is_stmt 0 view .LVU18
  75 0026 10F4404F 		tst	r0, #49152
  76 002a 14D0     		beq	.L5
 392:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  77              		.loc 1 392 3 is_stmt 1 view .LVU19
  78              	.LBB1282:
  79              	.LBB1283:
 313:src/xeq.c     **** }
  80              		.loc 1 313 24 is_stmt 0 view .LVU20
  81 002c 1049     		ldr	r1, .L14+8
  82              	.LVL5:
 313:src/xeq.c     **** }
  83              		.loc 1 313 32 view .LVU21
  84 002e 51F82330 		ldr	r3, [r1, r3, lsl #2]
  85              	.LBE1283:
  86              	.LBE1282:
 393:src/xeq.c     **** 	}
  87              		.loc 1 393 10 view .LVU22
  88 0032 33F8021C 		ldrh	r1, [r3, #-2]
 392:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  89              		.loc 1 392 9 view .LVU23
  90 0036 00F44043 		and	r3, r0, #49152
 393:src/xeq.c     **** 	}
  91              		.loc 1 393 10 view .LVU24
  92 003a 5818     		adds	r0, r3, r1
  93              	.LVL6:
 392:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  94              		.loc 1 392 7 view .LVU25
  95 003c 0133     		adds	r3, r3, #1
  96 003e 9BB2     		uxth	r3, r3
  97              	.LVL7:
 393:src/xeq.c     **** 	}
  98              		.loc 1 393 3 is_stmt 1 view .LVU26
  99              	.LBB1285:
 100              	.LBI1282:
ARM GAS  /tmp/cciWh9P3.s 			page 10


 309:src/xeq.c     **** 	if (region == REGION_XROM)
 101              		.loc 1 309 5 view .LVU27
 102              	.LBB1284:
 310:src/xeq.c     **** 		return xrom_size;
 103              		.loc 1 310 2 view .LVU28
 313:src/xeq.c     **** }
 104              		.loc 1 313 3 view .LVU29
 313:src/xeq.c     **** }
 105              		.loc 1 313 3 is_stmt 0 view .LVU30
 106              	.LBE1284:
 107              	.LBE1285:
 393:src/xeq.c     **** 	}
 108              		.loc 1 393 10 view .LVU31
 109 0040 80B2     		uxth	r0, r0
 110              	.LVL8:
 399:src/xeq.c     **** 	return bottom;
 111              		.loc 1 399 2 is_stmt 1 view .LVU32
 399:src/xeq.c     **** 	return bottom;
 112              		.loc 1 399 9 is_stmt 0 view .LVU33
 113 0042 1380     		strh	r3, [r2]	@ movhi
 400:src/xeq.c     **** }
 114              		.loc 1 400 2 is_stmt 1 view .LVU34
 115              		.loc 1 401 1 is_stmt 0 view .LVU35
 116 0044 7047     		bx	lr
 117              	.LVL9:
 118              	.L13:
 388:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 119              		.loc 1 388 3 is_stmt 1 view .LVU36
 389:src/xeq.c     **** 	} 
 120              		.loc 1 389 3 view .LVU37
 389:src/xeq.c     **** 	} 
 121              		.loc 1 389 10 is_stmt 0 view .LVU38
 122 0046 0B4B     		ldr	r3, .L14+12
 123 0048 1888     		ldrh	r0, [r3]
 124              	.LVL10:
 388:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 125              		.loc 1 388 7 view .LVU39
 126 004a 4CF20103 		movw	r3, #49153
 389:src/xeq.c     **** 	} 
 127              		.loc 1 389 10 view .LVU40
 128 004e 40F44040 		orr	r0, r0, #49152
 129              	.LVL11:
 399:src/xeq.c     **** 	return bottom;
 130              		.loc 1 399 2 is_stmt 1 view .LVU41
 399:src/xeq.c     **** 	return bottom;
 131              		.loc 1 399 9 is_stmt 0 view .LVU42
 132 0052 1380     		strh	r3, [r2]	@ movhi
 400:src/xeq.c     **** }
 133              		.loc 1 400 2 is_stmt 1 view .LVU43
 134              		.loc 1 401 1 is_stmt 0 view .LVU44
 135 0054 7047     		bx	lr
 136              	.LVL12:
 137              	.L5:
 396:src/xeq.c     **** 		bottom = ProgSize;
 138              		.loc 1 396 3 is_stmt 1 view .LVU45
 396:src/xeq.c     **** 		bottom = ProgSize;
 139              		.loc 1 396 15 is_stmt 0 view .LVU46
ARM GAS  /tmp/cciWh9P3.s 			page 11


 140 0056 044B     		ldr	r3, .L14
 397:src/xeq.c     **** 	}
 141              		.loc 1 397 10 view .LVU47
 142 0058 0449     		ldr	r1, .L14+4
 143              	.LVL13:
 396:src/xeq.c     **** 		bottom = ProgSize;
 144              		.loc 1 396 15 view .LVU48
 145 005a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 397:src/xeq.c     **** 	}
 146              		.loc 1 397 10 view .LVU49
 147 005c 0968     		ldr	r1, [r1]
 396:src/xeq.c     **** 		bottom = ProgSize;
 148              		.loc 1 396 7 view .LVU50
 149 005e C3F38013 		ubfx	r3, r3, #6, #1
 150              	.LVL14:
 397:src/xeq.c     **** 	}
 151              		.loc 1 397 3 is_stmt 1 view .LVU51
 397:src/xeq.c     **** 	}
 152              		.loc 1 397 10 is_stmt 0 view .LVU52
 153 0062 4888     		ldrh	r0, [r1, #2]
 154              	.LVL15:
 399:src/xeq.c     **** 	return bottom;
 155              		.loc 1 399 2 is_stmt 1 view .LVU53
 399:src/xeq.c     **** 	return bottom;
 156              		.loc 1 399 9 is_stmt 0 view .LVU54
 157 0064 1380     		strh	r3, [r2]	@ movhi
 400:src/xeq.c     **** }
 158              		.loc 1 400 2 is_stmt 1 view .LVU55
 159              		.loc 1 401 1 is_stmt 0 view .LVU56
 160 0066 7047     		bx	lr
 161              	.L15:
 162              		.align	2
 163              	.L14:
 164 0068 00000000 		.word	StateWhileOn
 165 006c 00000000 		.word	main_ram
 166 0070 00000000 		.word	.LANCHOR0
 167 0074 00000000 		.word	xrom_size
 168              		.cfi_endproc
 169              	.LFE19:
 171              		.section	.text.reg_address,"ax",%progbits
 172              		.align	1
 173              		.p2align 2,,3
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	reg_address:
 180              	.LVL16:
 181              	.LFB86:
 402:src/xeq.c     **** 
 403:src/xeq.c     **** 
 404:src/xeq.c     **** /* Increment the passed PC.  Account for wrap around but nothing else.
 405:src/xeq.c     ****  * Return the updated PC.
 406:src/xeq.c     ****  * Set PcWrapped on wrap around
 407:src/xeq.c     ****  */
 408:src/xeq.c     **** unsigned int do_inc(const unsigned int pc, int endp) {
 409:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
ARM GAS  /tmp/cciWh9P3.s 			page 12


 410:src/xeq.c     **** 	unsigned short int top = 0;
 411:src/xeq.c     **** 	unsigned short int bottom = 0;
 412:src/xeq.c     **** 
 413:src/xeq.c     **** 	PcWrapped = 0;
 414:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 415:src/xeq.c     **** 
 416:src/xeq.c     **** 	if (npc > bottom) {
 417:src/xeq.c     **** 		PcWrapped = 1;
 418:src/xeq.c     **** 		return top;
 419:src/xeq.c     **** 	}
 420:src/xeq.c     **** 	return npc;
 421:src/xeq.c     **** }
 422:src/xeq.c     **** 
 423:src/xeq.c     **** /* Decrement the passed PC.  Account for wrap around but nothing else.
 424:src/xeq.c     ****  * Return the updated PC.
 425:src/xeq.c     ****  * Set PcWrapped on wrap around
 426:src/xeq.c     ****  */
 427:src/xeq.c     **** unsigned int do_dec(unsigned int pc, int endp) {
 428:src/xeq.c     **** 	unsigned short int top = 0;
 429:src/xeq.c     **** 	unsigned short int bottom = 0;
 430:src/xeq.c     **** 
 431:src/xeq.c     **** 	PcWrapped = 0;
 432:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 433:src/xeq.c     **** 
 434:src/xeq.c     **** 	if (pc <= top) {
 435:src/xeq.c     **** 		PcWrapped = 1;
 436:src/xeq.c     **** 		pc = bottom;
 437:src/xeq.c     **** 	}
 438:src/xeq.c     **** 	else
 439:src/xeq.c     **** 		--pc;
 440:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 441:src/xeq.c     **** 		--pc;
 442:src/xeq.c     **** 	return pc;
 443:src/xeq.c     **** }
 444:src/xeq.c     **** 
 445:src/xeq.c     **** /* Increment the PC keeping account of wrapping around and stopping
 446:src/xeq.c     ****  * programs on such.  Return non-zero if we wrapped.
 447:src/xeq.c     ****  */
 448:src/xeq.c     **** int incpc(void) {
 449:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 450:src/xeq.c     **** 	return PcWrapped;
 451:src/xeq.c     **** }
 452:src/xeq.c     **** 
 453:src/xeq.c     **** void decpc(void) {
 454:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 455:src/xeq.c     **** }
 456:src/xeq.c     **** 
 457:src/xeq.c     **** /*
 458:src/xeq.c     ****  * Update the pointers to the current program delimited by END statements
 459:src/xeq.c     ****  */
 460:src/xeq.c     **** void update_program_bounds(const int force) {
 461:src/xeq.c     **** 	unsigned int pc = state_pc();
 462:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 463:src/xeq.c     **** 		State.pc = pc = 1;
 464:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 465:src/xeq.c     **** 		return;
 466:src/xeq.c     **** 	for (PcWrapped = 0; !PcWrapped; pc = do_inc(pc, 0)) {
ARM GAS  /tmp/cciWh9P3.s 			page 13


 467:src/xeq.c     **** 		ProgEnd = pc;
 468:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 469:src/xeq.c     **** 			break;
 470:src/xeq.c     **** 		}
 471:src/xeq.c     **** 	}
 472:src/xeq.c     **** 	for (pc = state_pc();;) {
 473:src/xeq.c     **** 		const unsigned int opc = pc;
 474:src/xeq.c     **** 		pc = do_dec(opc, 0);
 475:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 476:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 477:src/xeq.c     **** 			break;
 478:src/xeq.c     **** 		}
 479:src/xeq.c     **** 	}
 480:src/xeq.c     **** }
 481:src/xeq.c     **** 
 482:src/xeq.c     **** /* Determine where in program space the PC really is
 483:src/xeq.c     ****  */
 484:src/xeq.c     **** unsigned int user_pc(unsigned int pc) {
 485:src/xeq.c     **** 	unsigned int n = 1;
 486:src/xeq.c     **** 	unsigned int base;
 487:src/xeq.c     **** 
 488:src/xeq.c     **** #ifndef REALBUILD
 489:src/xeq.c     **** 	if (pc == 0 || isXROM(pc))
 490:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 491:src/xeq.c     **** #else
 492:src/xeq.c     **** 	if (pc == 0)
 493:src/xeq.c     **** 		return 0;
 494:src/xeq.c     **** #endif
 495:src/xeq.c     **** 	base = startLIB(pc);
 496:src/xeq.c     **** 	while (base < pc) {
 497:src/xeq.c     **** 		base = do_inc(base, 0);
 498:src/xeq.c     **** 		if (PcWrapped)
 499:src/xeq.c     **** 			return n;
 500:src/xeq.c     **** 		++n;
 501:src/xeq.c     **** 	}
 502:src/xeq.c     **** 	return n;
 503:src/xeq.c     **** }
 504:src/xeq.c     **** 
 505:src/xeq.c     **** /* Given a target user PC, figure out the real matching PC
 506:src/xeq.c     ****  */
 507:src/xeq.c     **** unsigned int find_user_pc(unsigned int target) {
 508:src/xeq.c     **** 	unsigned int upc = state_pc();
 509:src/xeq.c     **** 	const int libp = isLIB(upc);
 510:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 511:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 512:src/xeq.c     **** #ifndef REALBUILD
 513:src/xeq.c     **** 	if (isXROM(upc))
 514:src/xeq.c     **** 		return addrXROM(target);
 515:src/xeq.c     **** #endif
 516:src/xeq.c     **** 	while (n++ < target) {
 517:src/xeq.c     **** 		const unsigned int oldbase = base;
 518:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 519:src/xeq.c     **** 		if (PcWrapped)
 520:src/xeq.c     **** 			return oldbase;
 521:src/xeq.c     **** 	}
 522:src/xeq.c     **** 	return base;
 523:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 14


 524:src/xeq.c     **** 
 525:src/xeq.c     **** 
 526:src/xeq.c     **** /* Set a flag to indicate that a complex operation has taken place
 527:src/xeq.c     ****  * The flag disappears with the next command executed.
 528:src/xeq.c     ****  */
 529:src/xeq.c     **** static void set_was_complex(void) {
 530:src/xeq.c     **** 	State2.wascomplex = 1;
 531:src/xeq.c     **** }
 532:src/xeq.c     **** 
 533:src/xeq.c     **** 
 534:src/xeq.c     **** /* Produce an error and stop
 535:src/xeq.c     ****  */
 536:src/xeq.c     **** int report_err(const unsigned int e) {
 537:src/xeq.c     **** 	if (Error == ERR_NONE) {
 538:src/xeq.c     **** 		Error = e;
 539:src/xeq.c     **** 		if (e == ERR_NONE) {
 540:src/xeq.c     **** 			error_message(e); // "Running Program"
 541:src/xeq.c     **** 			return 0;
 542:src/xeq.c     **** 		}
 543:src/xeq.c     **** 	}
 544:src/xeq.c     **** 	return 1;
 545:src/xeq.c     **** }
 546:src/xeq.c     **** 
 547:src/xeq.c     **** 
 548:src/xeq.c     **** /* Display a warning
 549:src/xeq.c     ****  */
 550:src/xeq.c     **** int report_warn(const unsigned int e) {
 551:src/xeq.c     **** 	if (Running) {
 552:src/xeq.c     **** 		return report_err(e);
 553:src/xeq.c     **** 	}
 554:src/xeq.c     **** 	error_message(e);
 555:src/xeq.c     **** #ifndef CONSOLE
 556:src/xeq.c     **** 	State2.disp_freeze = 0;
 557:src/xeq.c     **** 	JustDisplayed = 1;
 558:src/xeq.c     **** 	ShowRPN = 1;
 559:src/xeq.c     **** #endif
 560:src/xeq.c     **** 	return e != ERR_NONE;
 561:src/xeq.c     **** }
 562:src/xeq.c     **** 
 563:src/xeq.c     **** 
 564:src/xeq.c     **** /* Doing something in the wrong mode */
 565:src/xeq.c     **** void bad_mode_error(void) {
 566:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 567:src/xeq.c     **** }
 568:src/xeq.c     **** 
 569:src/xeq.c     **** 
 570:src/xeq.c     **** /* User command to produce an error */
 571:src/xeq.c     **** void cmderr(unsigned int arg, enum rarg op) {
 572:src/xeq.c     **** 	report_err(arg);
 573:src/xeq.c     **** }
 574:src/xeq.c     **** 
 575:src/xeq.c     **** 
 576:src/xeq.c     **** /* User command to display a warning */
 577:src/xeq.c     **** void cmdmsg(unsigned int arg, enum rarg op) {
 578:src/xeq.c     **** 	error_message(arg);
 579:src/xeq.c     **** }
 580:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 15


 581:src/xeq.c     **** 
 582:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(DM42)
 583:src/xeq.c     **** #include <stdlib.h>
 584:src/xeq.c     **** static void error(const char *fmt, ...) {
 585:src/xeq.c     **** 	va_list ap;
 586:src/xeq.c     **** 	va_start(ap, fmt);
 587:src/xeq.c     **** 	vprintf(fmt, ap);
 588:src/xeq.c     **** 	va_end(ap);
 589:src/xeq.c     **** 	putchar('\n');
 590:src/xeq.c     **** 	exit(1);
 591:src/xeq.c     **** }
 592:src/xeq.c     **** 
 593:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); printf("illegal opcode 0x%08x\n", op); } while (
 594:src/xeq.c     **** #else
 595:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); } while (0)
 596:src/xeq.c     **** #endif
 597:src/xeq.c     **** 
 598:src/xeq.c     **** /* Real rounding mode access routine
 599:src/xeq.c     ****  */
 600:src/xeq.c     **** static enum rounding get_rounding_mode() {
 601:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 602:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 603:src/xeq.c     **** 		DEC_ROUND_UP, DEC_ROUND_DOWN,
 604:src/xeq.c     **** 		DEC_ROUND_CEILING, DEC_ROUND_FLOOR
 605:src/xeq.c     **** 	};
 606:src/xeq.c     **** 	return (enum rounding) modes[UState.rounding_mode];
 607:src/xeq.c     **** }
 608:src/xeq.c     **** 
 609:src/xeq.c     **** void op_roundingmode(enum nilop op) {
 610:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 611:src/xeq.c     **** }
 612:src/xeq.c     **** 
 613:src/xeq.c     **** void rarg_roundingmode(unsigned int arg, enum rarg op) {
 614:src/xeq.c     **** 	UState.rounding_mode = arg;
 615:src/xeq.c     **** }
 616:src/xeq.c     **** 
 617:src/xeq.c     **** 
 618:src/xeq.c     **** /* Pack a number into our DPD register format
 619:src/xeq.c     ****  */
 620:src/xeq.c     **** 
 621:src/xeq.c     **** void packed_from_number(decimal64 *r, const decNumber *x) {
 622:src/xeq.c     **** 	decContext ctx64;
 623:src/xeq.c     **** 
 624:src/xeq.c     **** 	decContextDefault(&ctx64, DEC_INIT_DECIMAL64);
 625:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 626:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 627:src/xeq.c     **** }
 628:src/xeq.c     **** 
 629:src/xeq.c     **** void packed128_from_number(decimal128 *r, const decNumber *x) {
 630:src/xeq.c     **** 	decContext ctx128;
 631:src/xeq.c     **** 
 632:src/xeq.c     **** 	decContextDefault(&ctx128, DEC_INIT_DECIMAL128);
 633:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 634:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 635:src/xeq.c     **** }
 636:src/xeq.c     **** 
 637:src/xeq.c     **** // Repack a decimal128 to decimal64
ARM GAS  /tmp/cciWh9P3.s 			page 16


 638:src/xeq.c     **** void packed_from_packed128(decimal64 *r, const decimal128 *s) {
 639:src/xeq.c     **** 	decNumber temp;
 640:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 641:src/xeq.c     **** }
 642:src/xeq.c     **** 
 643:src/xeq.c     **** // Repack a decimal64 to decimal128
 644:src/xeq.c     **** void packed128_from_packed(decimal128 *r, const decimal64 *s) {
 645:src/xeq.c     **** 	decNumber temp;
 646:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 647:src/xeq.c     **** }
 648:src/xeq.c     **** 
 649:src/xeq.c     **** /*
 650:src/xeq.c     ****  *  User command to round to a specific number of digits
 651:src/xeq.c     ****  */
 652:src/xeq.c     **** void rarg_round(unsigned int arg, enum rarg op) {
 653:src/xeq.c     **** 	decNumber res, x;
 654:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 655:src/xeq.c     **** 
 656:src/xeq.c     **** 	if (is_intmode()) {
 657:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 658:src/xeq.c     **** 		return;
 659:src/xeq.c     **** 	}
 660:src/xeq.c     **** 
 661:src/xeq.c     **** 	setlastX();
 662:src/xeq.c     **** 	getX(&x);
 663:src/xeq.c     **** 	if (op == RARG_ROUND)
 664:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 665:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 666:src/xeq.c     **** 		decNumberRoundDecimals(&res, &x, arg, rm);
 667:src/xeq.c     **** 	setX(&res);
 668:src/xeq.c     **** }
 669:src/xeq.c     **** 
 670:src/xeq.c     **** /* Check if a value is bogus and error out if so.
 671:src/xeq.c     ****  * A value is bogus if it is infinite, NaN *and* flag D is not set.
 672:src/xeq.c     ****  * If flag D is set, these values are allowed through just fine.
 673:src/xeq.c     ****  */
 674:src/xeq.c     **** static int check_special(const decNumber *x) {
 675:src/xeq.c     **** 	decNumber y;
 676:src/xeq.c     **** 	decimal64 z;
 677:src/xeq.c     **** 	decimal128 d;
 678:src/xeq.c     **** 	if (is_dblmode()) {
 679:src/xeq.c     **** 		packed128_from_number(&d, x);
 680:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 681:src/xeq.c     **** 	}
 682:src/xeq.c     **** 	else 
 683:src/xeq.c     **** 	{
 684:src/xeq.c     **** 		packed_from_number(&z, x);
 685:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 686:src/xeq.c     **** 	}
 687:src/xeq.c     **** 	if (decNumberIsSpecial(&y)) {
 688:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 689:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 690:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 691:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 692:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 693:src/xeq.c     **** 			else
 694:src/xeq.c     **** 				report_err(ERR_INFINITY);
ARM GAS  /tmp/cciWh9P3.s 			page 17


 695:src/xeq.c     **** 			return 1;
 696:src/xeq.c     **** 		}
 697:src/xeq.c     **** 	}
 698:src/xeq.c     **** 	return 0;
 699:src/xeq.c     **** }
 700:src/xeq.c     **** 
 701:src/xeq.c     **** 
 702:src/xeq.c     **** int stack_size(void) {
 703:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 704:src/xeq.c     **** 		return 4;
 705:src/xeq.c     **** 	return 8;
 706:src/xeq.c     **** }
 707:src/xeq.c     **** 
 708:src/xeq.c     **** REGISTER *get_stack(int pos) {
 709:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 710:src/xeq.c     **** }
 711:src/xeq.c     **** 
 712:src/xeq.c     **** static REGISTER *get_stack_top(void) {
 713:src/xeq.c     **** 	return get_stack(stack_size()-1);
 714:src/xeq.c     **** }
 715:src/xeq.c     **** 
 716:src/xeq.c     **** void copyreg(REGISTER *d, const REGISTER *s) {
 717:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 718:src/xeq.c     **** }
 719:src/xeq.c     **** 
 720:src/xeq.c     **** void copyreg_n(int d, int s) {
 721:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 722:src/xeq.c     **** }
 723:src/xeq.c     **** 
 724:src/xeq.c     **** /* Lift the stack one level.
 725:src/xeq.c     ****  */
 726:src/xeq.c     **** void lift(void) {
 727:src/xeq.c     **** 	const int n = stack_size();
 728:src/xeq.c     **** 	int i;
 729:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 730:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 731:src/xeq.c     **** }
 732:src/xeq.c     **** 
 733:src/xeq.c     **** static int get_lift(void) {
 734:src/xeq.c     **** 	return State2.state_lift;
 735:src/xeq.c     **** }
 736:src/xeq.c     **** 
 737:src/xeq.c     **** void lift_if_enabled(void) {
 738:src/xeq.c     **** 	if (get_lift())
 739:src/xeq.c     **** 		lift();
 740:src/xeq.c     **** }
 741:src/xeq.c     **** 
 742:src/xeq.c     **** static void lift2_if_enabled(void) {
 743:src/xeq.c     **** 	lift_if_enabled();
 744:src/xeq.c     **** 	lift();
 745:src/xeq.c     **** }
 746:src/xeq.c     **** 
 747:src/xeq.c     **** void set_lift(void) {
 748:src/xeq.c     ****     State2.state_lift = 1;
 749:src/xeq.c     **** }
 750:src/xeq.c     **** 
 751:src/xeq.c     **** static void clr_lift(void) {
ARM GAS  /tmp/cciWh9P3.s 			page 18


 752:src/xeq.c     ****     State2.state_lift = 0;
 753:src/xeq.c     **** }
 754:src/xeq.c     **** 
 755:src/xeq.c     **** static void lower(void) {
 756:src/xeq.c     **** 	const int n = stack_size();
 757:src/xeq.c     **** 	int i;
 758:src/xeq.c     **** 
 759:src/xeq.c     **** 	for (i=1; i<n; i++)
 760:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 761:src/xeq.c     **** }
 762:src/xeq.c     **** 
 763:src/xeq.c     **** static void lower2(void) {
 764:src/xeq.c     **** 	const int n = stack_size();
 765:src/xeq.c     **** 	int i;
 766:src/xeq.c     **** 
 767:src/xeq.c     **** 	for (i=2; i<n; i++)
 768:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 769:src/xeq.c     **** }
 770:src/xeq.c     **** 
 771:src/xeq.c     **** 
 772:src/xeq.c     **** void setlastX(void) {
 773:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 774:src/xeq.c     **** }
 775:src/xeq.c     **** 
 776:src/xeq.c     **** static void setlastXY(void) {
 777:src/xeq.c     **** 	setlastX();
 778:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 779:src/xeq.c     **** }
 780:src/xeq.c     **** 
 781:src/xeq.c     **** 
 782:src/xeq.c     **** decNumber *getRegister(decNumber *r, int index) {
 783:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 784:src/xeq.c     **** 	if (is_dblmode())
 785:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 786:src/xeq.c     **** 	else
 787:src/xeq.c     **** 		decimal64ToNumber(&(reg->s), r);
 788:src/xeq.c     **** 	return r;
 789:src/xeq.c     **** }
 790:src/xeq.c     **** 
 791:src/xeq.c     **** void setRegister(int index, const decNumber *x) {
 792:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 793:src/xeq.c     **** 	decNumber dn;
 794:src/xeq.c     **** 
 795:src/xeq.c     **** 	if (! check_special(x)) {	/* This correctly deals with infinities and NaN based on flag D */
 796:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 797:src/xeq.c     **** 		if (is_dblmode())
 798:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 799:src/xeq.c     **** 		else
 800:src/xeq.c     **** 			packed_from_number(&(reg->s), &dn);
 801:src/xeq.c     **** 	}
 802:src/xeq.c     **** }
 803:src/xeq.c     **** 
 804:src/xeq.c     **** decNumber *getX(decNumber *x) {
 805:src/xeq.c     **** 	return getRegister(x, regX_idx);
 806:src/xeq.c     **** }
 807:src/xeq.c     **** 
 808:src/xeq.c     **** void setX(const decNumber *x) {
ARM GAS  /tmp/cciWh9P3.s 			page 19


 809:src/xeq.c     **** 	setRegister(regX_idx, x);
 810:src/xeq.c     **** }
 811:src/xeq.c     **** 
 812:src/xeq.c     **** void getY(decNumber *y) {
 813:src/xeq.c     **** 	getRegister(y, regY_idx);
 814:src/xeq.c     **** }
 815:src/xeq.c     **** 
 816:src/xeq.c     **** void setY(const decNumber *y) {
 817:src/xeq.c     **** 	setRegister(regY_idx, y);
 818:src/xeq.c     **** }
 819:src/xeq.c     **** 
 820:src/xeq.c     **** static void getZ(decNumber *z) {
 821:src/xeq.c     **** 	getRegister(z, regZ_idx);
 822:src/xeq.c     **** }
 823:src/xeq.c     **** 
 824:src/xeq.c     **** #if 0
 825:src/xeq.c     **** static void setZ(const decNumber *z) {
 826:src/xeq.c     **** 	setRegister(regZ_idx, z);
 827:src/xeq.c     **** }
 828:src/xeq.c     **** #endif
 829:src/xeq.c     **** 
 830:src/xeq.c     **** static void getT(decNumber *t) {
 831:src/xeq.c     **** 	getRegister(t, regT_idx);
 832:src/xeq.c     **** }
 833:src/xeq.c     **** 
 834:src/xeq.c     **** void getXY(decNumber *x, decNumber *y) {
 835:src/xeq.c     **** 	getX(x);
 836:src/xeq.c     **** 	getY(y);
 837:src/xeq.c     **** }
 838:src/xeq.c     **** 
 839:src/xeq.c     **** void setXY(const decNumber *x, const decNumber *y) {
 840:src/xeq.c     **** 	setX(x);
 841:src/xeq.c     **** 	setY(y);
 842:src/xeq.c     **** }
 843:src/xeq.c     **** 
 844:src/xeq.c     **** void getXYZ(decNumber *x, decNumber *y, decNumber *z) {
 845:src/xeq.c     **** 	getXY(x, y);
 846:src/xeq.c     **** 	getZ(z);
 847:src/xeq.c     **** }
 848:src/xeq.c     **** 
 849:src/xeq.c     **** #if 0
 850:src/xeq.c     **** void setXYZ(const decNumber *x, const decNumber *y, const decNumber *z) {
 851:src/xeq.c     **** 	setXY(x, y);
 852:src/xeq.c     **** 	setZ(z);
 853:src/xeq.c     **** }
 854:src/xeq.c     **** #endif
 855:src/xeq.c     **** 
 856:src/xeq.c     **** void getXYZT(decNumber *x, decNumber *y, decNumber *z, decNumber *t) {
 857:src/xeq.c     **** 	getXYZ(x, y, z);
 858:src/xeq.c     **** 	getT(t);
 859:src/xeq.c     **** }
 860:src/xeq.c     **** 
 861:src/xeq.c     **** void getYZ(decNumber *y, decNumber *z) {
 862:src/xeq.c     **** 	getY(y);
 863:src/xeq.c     **** 	getZ(z);
 864:src/xeq.c     **** }
 865:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 20


 866:src/xeq.c     **** void roll_down(enum nilop op) {
 867:src/xeq.c     **** 	REGISTER r;
 868:src/xeq.c     **** 	copyreg(&r, StackBase);
 869:src/xeq.c     **** 	lower();
 870:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 871:src/xeq.c     **** }
 872:src/xeq.c     **** 
 873:src/xeq.c     **** void roll_up(enum nilop op) {
 874:src/xeq.c     **** 	REGISTER r;
 875:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 876:src/xeq.c     **** 	lift();
 877:src/xeq.c     **** 	copyreg(StackBase, &r);
 878:src/xeq.c     **** }
 879:src/xeq.c     **** 
 880:src/xeq.c     **** void cpx_roll_down(enum nilop op) {
 881:src/xeq.c     **** 	roll_down(OP_RDOWN);
 882:src/xeq.c     **** 	roll_down(OP_RDOWN);
 883:src/xeq.c     **** 	set_was_complex();
 884:src/xeq.c     **** }
 885:src/xeq.c     **** 
 886:src/xeq.c     **** void cpx_roll_up(enum nilop op) {
 887:src/xeq.c     **** 	roll_up(OP_RUP);
 888:src/xeq.c     **** 	roll_up(OP_RUP);
 889:src/xeq.c     **** 	set_was_complex();
 890:src/xeq.c     **** }
 891:src/xeq.c     **** 
 892:src/xeq.c     **** void cpx_enter(enum nilop op) {
 893:src/xeq.c     **** 	lift();
 894:src/xeq.c     **** 	lift();
 895:src/xeq.c     **** 	copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 896:src/xeq.c     **** 	set_was_complex();
 897:src/xeq.c     **** }
 898:src/xeq.c     **** 
 899:src/xeq.c     **** void cpx_fill(enum nilop op) {
 900:src/xeq.c     **** 	const int n = stack_size();
 901:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 902:src/xeq.c     **** 	int i;
 903:src/xeq.c     **** 
 904:src/xeq.c     **** 	for (i=2; i<n; i++)
 905:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 906:src/xeq.c     **** 	set_was_complex();
 907:src/xeq.c     **** }
 908:src/xeq.c     **** 
 909:src/xeq.c     **** void fill(enum nilop op) {
 910:src/xeq.c     **** 	const int n = stack_size();
 911:src/xeq.c     **** 	int i;
 912:src/xeq.c     **** 
 913:src/xeq.c     **** 	for (i=1; i<n; i++)
 914:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 915:src/xeq.c     **** }
 916:src/xeq.c     **** 
 917:src/xeq.c     **** void drop(enum nilop op) {
 918:src/xeq.c     **** 	if (op == OP_DROPXY) {
 919:src/xeq.c     **** 		lower2();
 920:src/xeq.c     **** 		set_was_complex();
 921:src/xeq.c     **** 	} else
 922:src/xeq.c     **** 		lower();
ARM GAS  /tmp/cciWh9P3.s 			page 21


 923:src/xeq.c     **** }
 924:src/xeq.c     **** 
 925:src/xeq.c     **** #ifndef is_intmode
 926:src/xeq.c     **** int is_intmode(void) {
 927:src/xeq.c     **** 	return UState.intm;
 928:src/xeq.c     **** }
 929:src/xeq.c     **** #endif
 930:src/xeq.c     **** 
 931:src/xeq.c     **** int is_dblmode(void) {
 932:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 933:src/xeq.c     **** }
 934:src/xeq.c     **** 
 935:src/xeq.c     **** int is_usrdblmode(void) {
 936:src/xeq.c     **** 	if (XromFlags.xIN)
 937:src/xeq.c     **** 		return XromFlags.mode_double;
 938:src/xeq.c     **** 	return is_dblmode();
 939:src/xeq.c     **** }
 940:src/xeq.c     **** 
 941:src/xeq.c     **** /* Convert a possibly signed string to an integer
 942:src/xeq.c     ****  */
 943:src/xeq.c     **** int s_to_i(const char *s) {
 944:src/xeq.c     **** 	int x = 0;
 945:src/xeq.c     **** 	int neg;
 946:src/xeq.c     **** 
 947:src/xeq.c     **** 	if (*s == '-') {
 948:src/xeq.c     **** 		s++;
 949:src/xeq.c     **** 		neg = 1;
 950:src/xeq.c     **** 	} else {
 951:src/xeq.c     **** 		if (*s == '+')
 952:src/xeq.c     **** 			s++;
 953:src/xeq.c     **** 		neg = 0;
 954:src/xeq.c     **** 	}
 955:src/xeq.c     **** 
 956:src/xeq.c     **** 	for (;;) {
 957:src/xeq.c     **** 		const char c = *s++;
 958:src/xeq.c     **** 
 959:src/xeq.c     **** 		if (c < '0' || c > '9')
 960:src/xeq.c     **** 			break;
 961:src/xeq.c     **** 		x = 10 * x + (c - '0');
 962:src/xeq.c     **** 	}
 963:src/xeq.c     **** 	if (neg)
 964:src/xeq.c     **** 		return -x;
 965:src/xeq.c     **** 	return x;
 966:src/xeq.c     **** }
 967:src/xeq.c     **** 
 968:src/xeq.c     **** /* Convert a string in the given base to an unsigned integer
 969:src/xeq.c     ****  */
 970:src/xeq.c     **** unsigned long long int s_to_ull(const char *s, unsigned int base) {
 971:src/xeq.c     **** 	unsigned long long int x = 0;
 972:src/xeq.c     **** 
 973:src/xeq.c     **** 	for (;;) {
 974:src/xeq.c     **** 		unsigned int n;
 975:src/xeq.c     **** 		const char c = *s++;
 976:src/xeq.c     **** 
 977:src/xeq.c     **** 		if (c >= '0' && c <= '9')
 978:src/xeq.c     **** 			n = c - '0';
 979:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
ARM GAS  /tmp/cciWh9P3.s 			page 22


 980:src/xeq.c     **** 			n = c - 'A' + 10;
 981:src/xeq.c     **** 		else
 982:src/xeq.c     **** 			break;
 983:src/xeq.c     **** 		if (n >= base)
 984:src/xeq.c     **** 			break;
 985:src/xeq.c     **** 		x = x * base + n;
 986:src/xeq.c     **** 	}
 987:src/xeq.c     **** 	return x;
 988:src/xeq.c     **** }
 989:src/xeq.c     **** 
 990:src/xeq.c     **** const char *get_cmdline(void) {
 991:src/xeq.c     **** 	if (CmdLineLength) {
 992:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 993:src/xeq.c     **** 		return Cmdline;
 994:src/xeq.c     **** 	}
 995:src/xeq.c     **** 	return NULL;
 996:src/xeq.c     **** }
 997:src/xeq.c     **** 
 998:src/xeq.c     **** #if 0
 999:src/xeq.c     **** static int fract_convert_number(decNumber *x, const char *s) {
1000:src/xeq.c     **** 	if (*s == '\0') {
1001:src/xeq.c     **** 		report_err(ERR_DOMAIN);
1002:src/xeq.c     **** 		return 1;
1003:src/xeq.c     **** 	}
1004:src/xeq.c     **** 	decNumberFromString(x, s, &Ctx);
1005:src/xeq.c     **** 	return check_special(x);
1006:src/xeq.c     **** }
1007:src/xeq.c     **** #endif
1008:src/xeq.c     **** 
1009:src/xeq.c     **** /* Return 1 if the command line contains an error and also set an appropriate
1010:src/xeq.c     ****  * error message.
1011:src/xeq.c     ****  */
1012:src/xeq.c     **** int is_bad_cmdline(void)
1013:src/xeq.c     **** {
1014:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
1015:src/xeq.c     **** 	if (CmdLineDot == 2) {
1016:src/xeq.c     **** 		char *p;
1017:src/xeq.c     **** 
1018:src/xeq.c     **** 		// Check if there's a non-zero digit after the last decimal mark
1019:src/xeq.c     **** 		p = Cmdline + CmdLineLength;
1020:src/xeq.c     **** 		for (;;) {
1021:src/xeq.c     **** 			p--;
1022:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
1023:src/xeq.c     **** 				return 0;
1024:src/xeq.c     **** 			if (*p == '.')
1025:src/xeq.c     **** 				break;
1026:src/xeq.c     **** 		}
1027:src/xeq.c     **** 
1028:src/xeq.c     **** 		reset_shift();
1029:src/xeq.c     **** 		error_message(ERR_DOMAIN);
1030:src/xeq.c     **** 		State2.invalid_disp = 1;
1031:src/xeq.c     **** 		return 1;
1032:src/xeq.c     **** 	}
1033:src/xeq.c     **** #endif
1034:src/xeq.c     **** 	return 0;
1035:src/xeq.c     **** }
1036:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 23


1037:src/xeq.c     **** /* Process the command line if any
1038:src/xeq.c     ****  */
1039:src/xeq.c     **** void process_cmdline(void) {
1040:src/xeq.c     **** 	decNumber a, b, x, t;
1041:src/xeq.c     **** 
1042:src/xeq.c     **** 	if (CmdLineLength) {
1043:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
1044:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
1045:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1046:src/xeq.c     **** 		char cmdline[CMDLINELEN + 2];
1047:src/xeq.c     **** #else
1048:src/xeq.c     **** 		char cmdline[CMDLINELEN + 1];
1049:src/xeq.c     **** #endif
1050:src/xeq.c     **** 
1051:src/xeq.c     **** 		xcopy(cmdline, Cmdline, CMDLINELEN + 1);
1052:src/xeq.c     **** 
1053:src/xeq.c     **** 		cmdline[CmdLineLength] = '\0';
1054:src/xeq.c     **** 		if (!is_intmode()) {
1055:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1056:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E' || cmdline[CmdLineLength-1] == 'D')
1057:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1058:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
1059:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
1060:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
1061:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
1062:src/xeq.c     **** 			}
1063:src/xeq.c     **** #else
1064:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E')
1065:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1066:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
1067:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
1068:src/xeq.c     **** #endif
1069:src/xeq.c     **** 			if (0
1070:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
1071:src/xeq.c     **** 			    || CmdLineEex
1072:src/xeq.c     **** #endif
1073:src/xeq.c     **** #if FRACTION_MODE_INPUT & 4
1074:src/xeq.c     **** 			    || cmdlinedot == 1
1075:src/xeq.c     **** #endif
1076:src/xeq.c     **** 			   )
1077:src/xeq.c     **** 				UState.fract = 0;
1078:src/xeq.c     **** 		}
1079:src/xeq.c     **** 		CmdLineLength = 0;
1080:src/xeq.c     **** 		lift_if_enabled();
1081:src/xeq.c     **** 		set_lift();
1082:src/xeq.c     **** 		CmdLineDot = 0;
1083:src/xeq.c     **** 		CmdLineEex = 0;
1084:src/xeq.c     **** 		if (is_intmode()) {
1085:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
1086:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
1087:src/xeq.c     **** 			setX_int_sgn(x, sgn);
1088:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
1089:src/xeq.c     **** 			char *d0, *d1, *d2;
1090:src/xeq.c     **** 			int neg;
1091:src/xeq.c     **** 
1092:src/xeq.c     **** 			if (bad_cmdline)
1093:src/xeq.c     **** 				return;
ARM GAS  /tmp/cciWh9P3.s 			page 24


1094:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 8)
1095:src/xeq.c     **** 			UState.fract = 1;
1096:src/xeq.c     **** #endif
1097:src/xeq.c     **** 			if (cmdline[0] == '-') {
1098:src/xeq.c     **** 				neg = 1;
1099:src/xeq.c     **** 				d0 = cmdline+1;
1100:src/xeq.c     **** 			} else {
1101:src/xeq.c     **** 				neg = 0;
1102:src/xeq.c     **** 				d0 = cmdline;
1103:src/xeq.c     **** 			}
1104:src/xeq.c     **** 			d1 = find_char(d0, '.');
1105:src/xeq.c     **** 			*d1++ = '\0';
1106:src/xeq.c     **** 			d2 = find_char(d1, '.');
1107:src/xeq.c     **** 			*d2++ = '\0';
1108:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
1109:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
1110:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1111:src/xeq.c     **** 			if (d2 == d1+1) { // ND change starts here; if dots are adjacent...
1112:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
1113:src/xeq.c     **** 				decNumberZero(&x); // and zero x
1114:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
1115:src/xeq.c     **** 				UState.improperfrac = 1;
1116:src/xeq.c     **** #endif
1117:src/xeq.c     **** 			}
1118:src/xeq.c     **** 			else
1119:src/xeq.c     **** #endif
1120:src/xeq.c     **** 			{
1121:src/xeq.c     **** 				decNumberFromString(&a, d1, &Ctx);
1122:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1123:src/xeq.c     **** 				UState.improperfrac = 0;
1124:src/xeq.c     **** #endif
1125:src/xeq.c     **** 			}
1126:src/xeq.c     **** 			dn_divide(&t, &a, &b);
1127:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
1128:src/xeq.c     **** 			if (!decNumberIsSpecial(&t))
1129:src/xeq.c     **** #endif
1130:src/xeq.c     **** 				dn_add(&x, &x, &t);
1131:src/xeq.c     **** 			if (neg)
1132:src/xeq.c     **** 				dn_minus(&x, &x);
1133:src/xeq.c     **** 			setX(&x);
1134:src/xeq.c     **** 		} else {
1135:src/xeq.c     **** 			decNumberFromString(&x, cmdline, &Ctx);
1136:src/xeq.c     **** 			setX(&x);
1137:src/xeq.c     **** 		}
1138:src/xeq.c     **** 		set_entry();
1139:src/xeq.c     **** #ifndef DM42
1140:src/xeq.c     **** 		print_trace( TRACE_DATA_ENTRY, 1 );
1141:src/xeq.c     **** #endif
1142:src/xeq.c     **** 	}
1143:src/xeq.c     **** }
1144:src/xeq.c     **** 
1145:src/xeq.c     **** void process_cmdline_set_lift(void) {
1146:src/xeq.c     **** 	process_cmdline();
1147:src/xeq.c     **** 	set_lift();
1148:src/xeq.c     **** }
1149:src/xeq.c     **** 
1150:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 25


1151:src/xeq.c     **** /*
1152:src/xeq.c     ****  *  Return a pointer to a numbered register.
1153:src/xeq.c     ****  *  If locals are enabled and a non existent local register
1154:src/xeq.c     ****  *  is accessed, the respective global register is returned.
1155:src/xeq.c     ****  *  Error checking must be done outside this routine.
1156:src/xeq.c     ****  *  We force the beginning of the local registers on an even stack position.
1157:src/xeq.c     ****  *  This ensures 32 bit alignment of the decima64 object.
1158:src/xeq.c     ****  */
1159:src/xeq.c     **** /*
1160:src/xeq.c     ****  *  If working in double precision, register numbers must be remapped
1161:src/xeq.c     ****  */
1162:src/xeq.c     **** static decimal64 *reg_address(int n, decimal64 *const regs, decimal64 *const named_regs) {
 182              		.loc 1 1162 90 is_stmt 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
1163:src/xeq.c     **** 	const int dbl = is_dblmode();
 187              		.loc 1 1163 2 view .LVU58
 188              	.LBB1286:
 189              	.LBI1286:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 190              		.loc 1 931 5 view .LVU59
 191              	.LBB1287:
 932:src/xeq.c     **** }
 192              		.loc 1 932 2 view .LVU60
 932:src/xeq.c     **** }
 193              		.loc 1 932 24 is_stmt 0 view .LVU61
 194 0000 154B     		ldr	r3, .L25
 195 0002 1B68     		ldr	r3, [r3]
 196              	.LBE1287:
 197              	.LBE1286:
1162:src/xeq.c     **** 	const int dbl = is_dblmode();
 198              		.loc 1 1162 90 view .LVU62
 199 0004 10B4     		push	{r4}
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 4, -4
 202              	.LBB1290:
 203              	.LBB1288:
 932:src/xeq.c     **** }
 204              		.loc 1 932 24 view .LVU63
 205 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 206              	.LBE1288:
 207              	.LBE1290:
1164:src/xeq.c     **** 
1165:src/xeq.c     **** 	if (n < regX_idx)
 208              		.loc 1 1165 5 view .LVU64
 209 000a 6328     		cmp	r0, #99
 210              	.LBB1291:
 211              	.LBB1289:
 932:src/xeq.c     **** }
 212              		.loc 1 932 24 view .LVU65
 213 000c 44F20103 		movw	r3, #16385
 214 0010 03EA0403 		and	r3, r3, r4
 215              	.LVL17:
 932:src/xeq.c     **** }
 216              		.loc 1 932 24 view .LVU66
ARM GAS  /tmp/cciWh9P3.s 			page 26


 217              	.LBE1289:
 218              	.LBE1291:
 219              		.loc 1 1165 2 is_stmt 1 view .LVU67
 220              		.loc 1 1165 5 is_stmt 0 view .LVU68
 221 0014 10DD     		ble	.L23
1166:src/xeq.c     **** 		return regs + n + (dbl ? n : 0);
1167:src/xeq.c     **** 
1168:src/xeq.c     **** 	n -= regX_idx;
 222              		.loc 1 1168 2 is_stmt 1 view .LVU69
1169:src/xeq.c     **** 	// Lettered register
1170:src/xeq.c     **** 	if (XromFlags.xIN)
 223              		.loc 1 1170 6 is_stmt 0 view .LVU70
 224 0016 1149     		ldr	r1, .L25+4
 225              	.LVL18:
 226              		.loc 1 1170 5 view .LVU71
 227 0018 91F90140 		ldrsb	r4, [r1, #1]
 228 001c 002C     		cmp	r4, #0
1168:src/xeq.c     **** 	// Lettered register
 229              		.loc 1 1168 4 view .LVU72
 230 001e A0F16401 		sub	r1, r0, #100
 231              	.LVL19:
 232              		.loc 1 1170 2 is_stmt 1 view .LVU73
 233              		.loc 1 1170 5 is_stmt 0 view .LVU74
 234 0022 13DB     		blt	.L24
1171:src/xeq.c     **** 		return (decimal64 *) (XromStack + n);
1172:src/xeq.c     **** 	if (dbl)
 235              		.loc 1 1172 2 is_stmt 1 view .LVU75
 236              		.loc 1 1172 5 is_stmt 0 view .LVU76
 237 0024 B3F5804F 		cmp	r3, #16384
1173:src/xeq.c     **** 		n = (n << 1) - STACK_SIZE - EXTRA_REG;
 238              		.loc 1 1173 3 is_stmt 1 view .LVU77
 239              		.loc 1 1173 10 is_stmt 0 view .LVU78
 240 0028 04BF     		itt	eq
 241 002a 4900     		lsleq	r1, r1, #1
 242              	.LVL20:
 243              		.loc 1 1173 5 view .LVU79
 244 002c 0C39     		subeq	r1, r1, #12
 245              	.LVL21:
1174:src/xeq.c     **** 	return named_regs + n;
 246              		.loc 1 1174 2 is_stmt 1 view .LVU80
 247              		.loc 1 1174 20 is_stmt 0 view .LVU81
 248 002e 02EBC100 		add	r0, r2, r1, lsl #3
1175:src/xeq.c     **** }
 249              		.loc 1 1175 1 view .LVU82
 250 0032 5DF8044B 		ldr	r4, [sp], #4
 251              		.cfi_remember_state
 252              		.cfi_restore 4
 253              		.cfi_def_cfa_offset 0
 254 0036 7047     		bx	lr
 255              	.LVL22:
 256              	.L23:
 257              		.cfi_restore_state
1166:src/xeq.c     **** 
 258              		.loc 1 1166 3 is_stmt 1 view .LVU83
1166:src/xeq.c     **** 
 259              		.loc 1 1166 19 is_stmt 0 view .LVU84
 260 0038 B3F5804F 		cmp	r3, #16384
ARM GAS  /tmp/cciWh9P3.s 			page 27


1166:src/xeq.c     **** 
 261              		.loc 1 1166 15 view .LVU85
 262 003c 4FEAC002 		lsl	r2, r0, #3
 263              	.LVL23:
1166:src/xeq.c     **** 
 264              		.loc 1 1166 15 view .LVU86
 265 0040 08BF     		it	eq
 266 0042 0201     		lsleq	r2, r0, #4
1166:src/xeq.c     **** 
 267              		.loc 1 1166 19 view .LVU87
 268 0044 8818     		adds	r0, r1, r2
 269              	.LVL24:
 270              		.loc 1 1175 1 view .LVU88
 271 0046 5DF8044B 		ldr	r4, [sp], #4
 272              		.cfi_remember_state
 273              		.cfi_restore 4
 274              		.cfi_def_cfa_offset 0
 275 004a 7047     		bx	lr
 276              	.LVL25:
 277              	.L24:
 278              		.cfi_restore_state
1171:src/xeq.c     **** 	if (dbl)
 279              		.loc 1 1171 3 is_stmt 1 view .LVU89
1171:src/xeq.c     **** 	if (dbl)
 280              		.loc 1 1171 10 is_stmt 0 view .LVU90
 281 004c 0448     		ldr	r0, .L25+8
 282              		.loc 1 1175 1 view .LVU91
 283 004e 5DF8044B 		ldr	r4, [sp], #4
 284              		.cfi_restore 4
 285              		.cfi_def_cfa_offset 0
1171:src/xeq.c     **** 	if (dbl)
 286              		.loc 1 1171 10 view .LVU92
 287 0052 00EB0110 		add	r0, r0, r1, lsl #4
 288              		.loc 1 1175 1 view .LVU93
 289 0056 7047     		bx	lr
 290              	.L26:
 291              		.align	2
 292              	.L25:
 293 0058 00000000 		.word	main_ram
 294 005c 00000000 		.word	XromParams
 295 0060 00000000 		.word	XromLocal
 296              		.cfi_endproc
 297              	.LFE86:
 299              		.section	.text.retstk_up,"ax",%progbits
 300              		.align	1
 301              		.p2align 2,,3
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	retstk_up:
 308              	.LFB146:
1176:src/xeq.c     **** 
1177:src/xeq.c     **** REGISTER *get_reg_n(int n) {
1178:src/xeq.c     **** 	const int dbl = is_dblmode();
1179:src/xeq.c     **** 
1180:src/xeq.c     **** 	if (n >= CONST_REG_BASE) {
ARM GAS  /tmp/cciWh9P3.s 			page 28


1181:src/xeq.c     **** 		n -= CONST_REG_BASE;
1182:src/xeq.c     **** 		return get_const(n, dbl);
1183:src/xeq.c     **** 	}
1184:src/xeq.c     **** 	if (n >= FLASH_REG_BASE)
1185:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
1186:src/xeq.c     **** 
1187:src/xeq.c     **** 	if (n >= LOCAL_REG_BASE && local_regs() > 0) {
1188:src/xeq.c     **** 		// local register on the return stack
1189:src/xeq.c     **** 		n -= LOCAL_REG_BASE;
1190:src/xeq.c     **** 		if (dbl)
1191:src/xeq.c     **** 			n <<= 1;
1192:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
1193:src/xeq.c     **** 	}
1194:src/xeq.c     **** 	return (REGISTER *) reg_address(n, Regs + TOPREALREG - NumRegs, Regs + regX_idx);
1195:src/xeq.c     **** }
1196:src/xeq.c     **** 
1197:src/xeq.c     **** 
1198:src/xeq.c     **** REGISTER *get_flash_reg_n(int n) {
1199:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
1200:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
1201:src/xeq.c     **** }
1202:src/xeq.c     **** 
1203:src/xeq.c     **** 
1204:src/xeq.c     **** /*
1205:src/xeq.c     ****  *  Get a constatnt by index and mode
1206:src/xeq.c     ****  *  In case of a conversion, a private copy is returned
1207:src/xeq.c     ****  */
1208:src/xeq.c     **** REGISTER *get_const(int index, int dbl)
1209:src/xeq.c     **** {
1210:src/xeq.c     **** 	static REGISTER result;
1211:src/xeq.c     **** 	const int i = cnsts[index].index;
1212:src/xeq.c     **** 	if (dbl) {
1213:src/xeq.c     **** 		if (i <= 1 || i >= 128)
1214:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
1215:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
1216:src/xeq.c     **** 	}
1217:src/xeq.c     **** 	else {
1218:src/xeq.c     **** 		if (i < 128)
1219:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
1220:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
1221:src/xeq.c     **** 	}
1222:src/xeq.c     **** 	return &result;
1223:src/xeq.c     **** }
1224:src/xeq.c     **** 
1225:src/xeq.c     **** 
1226:src/xeq.c     **** /*  Some conversion routines to take decimals and produce integers
1227:src/xeq.c     ****  *  This is for opaque storage, no conversion takes place.
1228:src/xeq.c     ****  */
1229:src/xeq.c     **** long long int get_reg_n_int(int index) {
1230:src/xeq.c     **** 	long long int ll;
1231:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
1232:src/xeq.c     **** 	return ll;
1233:src/xeq.c     **** }
1234:src/xeq.c     **** 
1235:src/xeq.c     **** void set_reg_n_int(int index, long long int ll) {
1236:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
1237:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 29


1238:src/xeq.c     **** 
1239:src/xeq.c     **** /* Get an integer from a register
1240:src/xeq.c     ****  */
1241:src/xeq.c     **** unsigned long long int get_reg_n_int_sgn(int index, int *sgn) {
1242:src/xeq.c     **** 	if (is_intmode()) {
1243:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
1244:src/xeq.c     **** 	} else {
1245:src/xeq.c     **** 		decNumber n;
1246:src/xeq.c     **** 
1247:src/xeq.c     **** 		getRegister(&n, index);
1248:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
1249:src/xeq.c     **** 	}
1250:src/xeq.c     **** }
1251:src/xeq.c     **** 
1252:src/xeq.c     **** 
1253:src/xeq.c     **** /* Get an integer from X
1254:src/xeq.c     ****  */
1255:src/xeq.c     **** long long int getX_int(void) {
1256:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
1257:src/xeq.c     **** }
1258:src/xeq.c     **** 
1259:src/xeq.c     **** unsigned long long int getX_int_sgn(int *sgn) {
1260:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
1261:src/xeq.c     **** }
1262:src/xeq.c     **** 
1263:src/xeq.c     **** /*
1264:src/xeq.c     ****  *  Forced conversion from real to intger
1265:src/xeq.c     ****  *  Leaves integer mode active on return!
1266:src/xeq.c     ****  */
1267:src/xeq.c     **** static void int_from_register(int out, int in) {
1268:src/xeq.c     **** 	int sgn;
1269:src/xeq.c     **** 	unsigned long long int val;
1270:src/xeq.c     **** 	
1271:src/xeq.c     **** 	UState.intm = 0;	// Force real mode access
1272:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1273:src/xeq.c     **** 
1274:src/xeq.c     **** 	UState.intm = 1;	// Force integer access
1275:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1276:src/xeq.c     **** }
1277:src/xeq.c     **** 
1278:src/xeq.c     **** /* Put an integer into a register
1279:src/xeq.c     ****  */
1280:src/xeq.c     **** void set_reg_n_int_sgn(int index, unsigned long long int val, int sgn) {
1281:src/xeq.c     **** 	if (is_intmode()) {
1282:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
1283:src/xeq.c     **** 	} else {
1284:src/xeq.c     **** 		decNumber t;
1285:src/xeq.c     **** 
1286:src/xeq.c     **** 		ullint_to_dn(&t, val);
1287:src/xeq.c     **** 		if (sgn)
1288:src/xeq.c     **** 			dn_minus(&t, &t);
1289:src/xeq.c     **** 		setRegister(index, &t);
1290:src/xeq.c     **** 	}
1291:src/xeq.c     **** }
1292:src/xeq.c     **** 
1293:src/xeq.c     **** /* 
1294:src/xeq.c     ****  *  Forced conversion from integer to register format.
ARM GAS  /tmp/cciWh9P3.s 			page 30


1295:src/xeq.c     ****  *  Leaves integer mode off after conversion.
1296:src/xeq.c     ****  *  Destination may be in XROM register space
1297:src/xeq.c     ****  */
1298:src/xeq.c     **** static void register_from_int(int out, int in, int called_from_xin) {
1299:src/xeq.c     **** 	int sgn;
1300:src/xeq.c     **** 	unsigned long long int val;
1301:src/xeq.c     **** 	const int xin = XromFlags.xIN;
1302:src/xeq.c     **** 	
1303:src/xeq.c     **** 	if (called_from_xin)
1304:src/xeq.c     **** 		XromFlags.xIN = 0;
1305:src/xeq.c     **** 	UState.intm = 1;
1306:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1307:src/xeq.c     **** 
1308:src/xeq.c     **** 	XromFlags.xIN = xin;
1309:src/xeq.c     **** 	UState.intm = 0;
1310:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1311:src/xeq.c     **** }
1312:src/xeq.c     **** 
1313:src/xeq.c     **** 
1314:src/xeq.c     **** /* Put an integer into X
1315:src/xeq.c     ****  * Integer registers are always single precision!
1316:src/xeq.c     ****  */
1317:src/xeq.c     **** void setX_int(long long int val) {
1318:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
1319:src/xeq.c     **** }
1320:src/xeq.c     **** 
1321:src/xeq.c     **** 
1322:src/xeq.c     **** void setX_int_sgn(unsigned long long int val, int sgn) {
1323:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
1324:src/xeq.c     **** }
1325:src/xeq.c     **** 
1326:src/xeq.c     **** 
1327:src/xeq.c     **** 
1328:src/xeq.c     **** /*
1329:src/xeq.c     ****  *  Set the register value explicitely
1330:src/xeq.c     ****  */
1331:src/xeq.c     **** void zero_regs(REGISTER *dest, int n) {
1332:src/xeq.c     **** #if 0
1333:src/xeq.c     **** 	if (is_intmode())
1334:src/xeq.c     **** 		xset(dest, 0, n << 3);
1335:src/xeq.c     **** 	else {
1336:src/xeq.c     **** 		REGISTER *const zero = get_reg_n(CONST_REG_BASE + OP_ZERO);
1337:src/xeq.c     **** 		const int reg_size = is_dblmode() ? sizeof(decimal128) : sizeof(decimal64);
1338:src/xeq.c     **** 		char *d = (char *) dest;
1339:src/xeq.c     **** 		int i;
1340:src/xeq.c     **** 		for (i = 0; i < n; ++i, d += reg_size)
1341:src/xeq.c     **** 			copyreg((REGISTER *) d, zero);
1342:src/xeq.c     **** 	}
1343:src/xeq.c     **** #else
1344:src/xeq.c     **** 	// This works for all modes
1345:src/xeq.c     **** 	// no it doesn't -- it leaves varying values of zero around
1346:src/xeq.c     **** 	xset(dest, 0, n << (3 + is_dblmode()));
1347:src/xeq.c     **** #endif
1348:src/xeq.c     **** }
1349:src/xeq.c     **** 
1350:src/xeq.c     **** void move_regs(REGISTER *dest, REGISTER *src, int n) {
1351:src/xeq.c     **** 	if (is_dblmode())
ARM GAS  /tmp/cciWh9P3.s 			page 31


1352:src/xeq.c     **** 		n <<= 1;
1353:src/xeq.c     **** 	xcopy(dest, src, n << 3);
1354:src/xeq.c     **** }
1355:src/xeq.c     **** 
1356:src/xeq.c     **** 
1357:src/xeq.c     **** /* Zero a register
1358:src/xeq.c     ****  */
1359:src/xeq.c     **** static void set_zero(REGISTER *x) {
1360:src/xeq.c     **** 	zero_regs(x, 1);
1361:src/xeq.c     **** }
1362:src/xeq.c     **** 
1363:src/xeq.c     **** void zero_X(void) {
1364:src/xeq.c     **** 	set_zero(StackBase);
1365:src/xeq.c     **** }
1366:src/xeq.c     **** 
1367:src/xeq.c     **** void zero_Y(void) {
1368:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
1369:src/xeq.c     **** }
1370:src/xeq.c     **** 
1371:src/xeq.c     **** void clrx(enum nilop op) {
1372:src/xeq.c     **** 	zero_X();
1373:src/xeq.c     **** 	clr_lift();
1374:src/xeq.c     **** }
1375:src/xeq.c     **** 
1376:src/xeq.c     **** /* Zero out the stack
1377:src/xeq.c     ****  */
1378:src/xeq.c     **** void clrstk(enum nilop op) {
1379:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
1380:src/xeq.c     **** 	set_lift();
1381:src/xeq.c     **** }
1382:src/xeq.c     **** 
1383:src/xeq.c     **** 
1384:src/xeq.c     **** /* Zero out all registers excluding the stack and lastx
1385:src/xeq.c     ****  */	
1386:src/xeq.c     **** void clrreg(enum nilop op) {
1387:src/xeq.c     **** 	const int local = local_regs();
1388:src/xeq.c     **** 	process_cmdline_set_lift();
1389:src/xeq.c     **** 
1390:src/xeq.c     **** 	// erase register memory
1391:src/xeq.c     **** 	zero_regs(get_reg_n(0), global_regs());
1392:src/xeq.c     **** 
1393:src/xeq.c     **** 	// Clear A, B, C & D if they aren't part of the stack
1394:src/xeq.c     **** 	if (stack_size() != 8)
1395:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
1396:src/xeq.c     **** 
1397:src/xeq.c     **** 	// Clear J & K but not I and L since they are last X.
1398:src/xeq.c     **** 	zero_regs(get_reg_n(regJ_idx), 2);
1399:src/xeq.c     **** 
1400:src/xeq.c     **** 	// erase local registers but keep them allocated
1401:src/xeq.c     **** 	if (local)
1402:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
1403:src/xeq.c     **** }
1404:src/xeq.c     **** 
1405:src/xeq.c     **** 
1406:src/xeq.c     **** /* Clear the subroutine return stack
1407:src/xeq.c     ****  */
1408:src/xeq.c     **** void clrretstk(void) {
ARM GAS  /tmp/cciWh9P3.s 			page 32


1409:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
1410:src/xeq.c     **** }
1411:src/xeq.c     **** 
1412:src/xeq.c     **** void clrretstk_pc(void) {
1413:src/xeq.c     **** 	clrretstk();
1414:src/xeq.c     **** 	raw_set_pc(0);
1415:src/xeq.c     **** 	update_program_bounds(1);
1416:src/xeq.c     **** }
1417:src/xeq.c     **** 
1418:src/xeq.c     **** 
1419:src/xeq.c     **** /*
1420:src/xeq.c     ****  *  Command to allow access to constants and small integers
1421:src/xeq.c     ****  */
1422:src/xeq.c     **** void cmdconst(unsigned int arg, enum rarg op) {
1423:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
1424:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX || op == RARG_IND_CONST_CMPLX) {
1425:src/xeq.c     **** #else
1426:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX) {
1427:src/xeq.c     **** #endif
1428:src/xeq.c     **** 		lift2_if_enabled();
1429:src/xeq.c     **** 		zero_Y();
1430:src/xeq.c     **** 		set_was_complex();
1431:src/xeq.c     **** 	} else
1432:src/xeq.c     **** 		lift_if_enabled();
1433:src/xeq.c     **** 
1434:src/xeq.c     **** 	if (op == RARG_INTNUM || op == RARG_INTNUM_CMPLX)
1435:src/xeq.c     **** 		setX_int_sgn(arg, 0);
1436:src/xeq.c     **** 	else if (is_intmode())
1437:src/xeq.c     **** 		bad_mode_error();
1438:src/xeq.c     **** 	else 
1439:src/xeq.c     **** 		copyreg(StackBase, get_const(arg, is_dblmode()));
1440:src/xeq.c     **** }
1441:src/xeq.c     **** 
1442:src/xeq.c     **** 
1443:src/xeq.c     **** /* Store/recall code here.
1444:src/xeq.c     ****  * These two are pretty much the same so we define some utility routines first.
1445:src/xeq.c     ****  */
1446:src/xeq.c     **** 
1447:src/xeq.c     **** /* Do a basic STO/RCL arithmetic operation.
1448:src/xeq.c     ****  */
1449:src/xeq.c     **** static int storcl_op(unsigned short opr, int index, decNumber *r, int rev) {
1450:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
1451:src/xeq.c     **** 
1452:src/xeq.c     **** 	getX(x);
1453:src/xeq.c     **** 	getRegister(y, index);
1454:src/xeq.c     **** 	if (rev) {
1455:src/xeq.c     **** 		x = y;
1456:src/xeq.c     **** 		y = &a;
1457:src/xeq.c     **** 	}
1458:src/xeq.c     **** 
1459:src/xeq.c     **** 	switch (opr) {
1460:src/xeq.c     **** 	case 1:
1461:src/xeq.c     **** 		dn_add(r, y, x);
1462:src/xeq.c     **** 		break;
1463:src/xeq.c     **** 	case 2:
1464:src/xeq.c     **** 		dn_subtract(r, y, x);
1465:src/xeq.c     **** 		break;
ARM GAS  /tmp/cciWh9P3.s 			page 33


1466:src/xeq.c     **** 	case 3:
1467:src/xeq.c     **** 		dn_multiply(r, y, x);
1468:src/xeq.c     **** 		break;
1469:src/xeq.c     **** 	case 4:
1470:src/xeq.c     **** 		dn_divide(r, y, x);
1471:src/xeq.c     **** 		break;
1472:src/xeq.c     **** 	case 5:
1473:src/xeq.c     **** 		dn_min(r, y, x);
1474:src/xeq.c     **** 		break;
1475:src/xeq.c     **** 	case 6:
1476:src/xeq.c     **** 		dn_max(r, y, x);
1477:src/xeq.c     **** 		break;
1478:src/xeq.c     **** 	default:
1479:src/xeq.c     **** 		return 1;
1480:src/xeq.c     **** 	}
1481:src/xeq.c     **** 	return 0;
1482:src/xeq.c     **** }
1483:src/xeq.c     **** 
1484:src/xeq.c     **** static int storcl_intop(unsigned short opr, int index, long long int *r, int rev) {
1485:src/xeq.c     **** 	long long int x, y;
1486:src/xeq.c     **** 
1487:src/xeq.c     **** 	x = getX_int();
1488:src/xeq.c     **** 	y = get_reg_n_int(index);
1489:src/xeq.c     **** 
1490:src/xeq.c     **** 	if (rev) {
1491:src/xeq.c     **** 		const long long int t = x;
1492:src/xeq.c     **** 		x = y;
1493:src/xeq.c     **** 		y = t;
1494:src/xeq.c     **** 	}
1495:src/xeq.c     **** 
1496:src/xeq.c     **** 	switch (opr) {
1497:src/xeq.c     **** 	case 1:
1498:src/xeq.c     **** 		*r = intAdd(y, x);
1499:src/xeq.c     **** 		break;
1500:src/xeq.c     **** 	case 2:
1501:src/xeq.c     **** 		*r = intSubtract(y, x);
1502:src/xeq.c     **** 		break;
1503:src/xeq.c     **** 	case 3:
1504:src/xeq.c     **** 		*r = intMultiply(y, x);
1505:src/xeq.c     **** 		break;
1506:src/xeq.c     **** 	case 4:
1507:src/xeq.c     **** 		*r = intDivide(y, x);
1508:src/xeq.c     **** 		break;
1509:src/xeq.c     **** 	case 5:
1510:src/xeq.c     **** 		*r = intMin(y, x);
1511:src/xeq.c     **** 		break;
1512:src/xeq.c     **** 	case 6:
1513:src/xeq.c     **** 		*r = intMax(y, x);
1514:src/xeq.c     **** 		break;
1515:src/xeq.c     **** 	default:
1516:src/xeq.c     **** 		return 1;
1517:src/xeq.c     **** 	}
1518:src/xeq.c     **** 	return 0;
1519:src/xeq.c     **** }
1520:src/xeq.c     **** 
1521:src/xeq.c     **** /* We've got a STO operation to do.
1522:src/xeq.c     ****  */
ARM GAS  /tmp/cciWh9P3.s 			page 34


1523:src/xeq.c     **** void cmdsto(unsigned int arg, enum rarg op) {
1524:src/xeq.c     **** 	if (op == RARG_STO) {
1525:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
1526:src/xeq.c     **** 	} else {
1527:src/xeq.c     **** 		if (is_intmode()) {
1528:src/xeq.c     **** 			long long int r;
1529:src/xeq.c     **** 
1530:src/xeq.c     **** 			if (storcl_intop(op - RARG_STO, arg, &r, 0))
1531:src/xeq.c     **** 				illegal(op);
1532:src/xeq.c     **** 			set_reg_n_int(arg, r);
1533:src/xeq.c     **** 		} else {
1534:src/xeq.c     **** 			decNumber r;
1535:src/xeq.c     **** 
1536:src/xeq.c     **** 			if (storcl_op(op - RARG_STO, arg, &r, 0))
1537:src/xeq.c     **** 				illegal(op);
1538:src/xeq.c     **** 			setRegister(arg, &r);
1539:src/xeq.c     **** 		}
1540:src/xeq.c     **** 	}
1541:src/xeq.c     **** }
1542:src/xeq.c     **** 
1543:src/xeq.c     **** /* We've got a RCL operation to do.
1544:src/xeq.c     ****  */
1545:src/xeq.c     **** static void do_rcl(int index, enum rarg op) {
1546:src/xeq.c     **** 	if (op == RARG_RCL) {
1547:src/xeq.c     **** 		REGISTER temp;
1548:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
1549:src/xeq.c     **** 		lift_if_enabled();
1550:src/xeq.c     **** 		copyreg(StackBase, &temp);
1551:src/xeq.c     **** 	} else {
1552:src/xeq.c     **** 		if (is_intmode()) {
1553:src/xeq.c     **** 			long long int r;
1554:src/xeq.c     **** 
1555:src/xeq.c     **** 			if (storcl_intop(op - RARG_RCL, index, &r, 1))
1556:src/xeq.c     **** 				illegal(op);
1557:src/xeq.c     **** 			setlastX();
1558:src/xeq.c     **** 			setX_int(r);
1559:src/xeq.c     **** 		} else {
1560:src/xeq.c     **** 			decNumber r;
1561:src/xeq.c     **** 
1562:src/xeq.c     **** 			if (storcl_op(op - RARG_RCL, index, &r, 1))
1563:src/xeq.c     **** 				illegal(op);
1564:src/xeq.c     **** 			setlastX();
1565:src/xeq.c     **** 			setX(&r);
1566:src/xeq.c     **** 		}
1567:src/xeq.c     **** 	}
1568:src/xeq.c     **** }
1569:src/xeq.c     **** 
1570:src/xeq.c     **** void cmdrcl(unsigned int arg, enum rarg op) {
1571:src/xeq.c     **** 	do_rcl(arg, op);
1572:src/xeq.c     **** }
1573:src/xeq.c     **** 
1574:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1575:src/xeq.c     **** void cmdflashrcl(unsigned int arg, enum rarg op) {
1576:src/xeq.c     **** 	do_rcl(FLASH_REG_BASE + arg, op - RARG_FLRCL + RARG_RCL);
1577:src/xeq.c     **** }
1578:src/xeq.c     **** #endif
1579:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 35


1580:src/xeq.c     **** /* And the complex equivalents for the above.
1581:src/xeq.c     ****  * We pair registers arg & arg+1 to provide a complex number
1582:src/xeq.c     ****  */
1583:src/xeq.c     **** static int storcl_cop(unsigned short opr, int index, decNumber *r1, decNumber *r2, int rev) {
1584:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
1585:src/xeq.c     **** 
1586:src/xeq.c     **** 	getXY(x + 0, x + 1);
1587:src/xeq.c     **** 	getRegister(y + 0, index);
1588:src/xeq.c     **** 	getRegister(y + 1, index + 1);
1589:src/xeq.c     **** 
1590:src/xeq.c     **** 	if (rev) {
1591:src/xeq.c     **** 		x = y;
1592:src/xeq.c     **** 		y = a;
1593:src/xeq.c     **** 	}
1594:src/xeq.c     **** 
1595:src/xeq.c     **** 	switch (opr) {
1596:src/xeq.c     **** 	case 1:
1597:src/xeq.c     **** 		cmplxAdd(r1, r2, y + 0, y + 1, x + 0, x + 1);
1598:src/xeq.c     **** 		break;
1599:src/xeq.c     **** 	case 2:
1600:src/xeq.c     **** 		cmplxSubtract(r1, r2, y + 0, y + 1, x + 0, x + 1);
1601:src/xeq.c     **** 		break;
1602:src/xeq.c     **** 	case 3:
1603:src/xeq.c     **** 		cmplxMultiply(r1, r2, y + 0, y + 1, x + 0, x + 1);
1604:src/xeq.c     **** 		break;
1605:src/xeq.c     **** 	case 4:
1606:src/xeq.c     **** 		cmplxDivide(r1, r2, y + 0, y + 1, x + 0, x + 1);
1607:src/xeq.c     **** 		break;
1608:src/xeq.c     **** 	default:
1609:src/xeq.c     **** 		return 1;
1610:src/xeq.c     **** 	}
1611:src/xeq.c     **** 	return 0;
1612:src/xeq.c     **** }
1613:src/xeq.c     **** 
1614:src/xeq.c     **** 
1615:src/xeq.c     **** void cmdcsto(unsigned int arg, enum rarg op) {
1616:src/xeq.c     **** 	decNumber r1, r2;
1617:src/xeq.c     **** 	REGISTER *t1, *t2;
1618:src/xeq.c     **** 
1619:src/xeq.c     **** 	t1 = get_reg_n(arg);
1620:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
1621:src/xeq.c     **** 
1622:src/xeq.c     **** 	if (op == RARG_CSTO) {
1623:src/xeq.c     **** 		copyreg(t1, StackBase);
1624:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
1625:src/xeq.c     **** 	} else {
1626:src/xeq.c     **** 		if (is_intmode())
1627:src/xeq.c     **** 			bad_mode_error();
1628:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
1629:src/xeq.c     **** 			illegal(op);
1630:src/xeq.c     **** 		else {
1631:src/xeq.c     **** 			setRegister(arg, &r1);
1632:src/xeq.c     **** 			setRegister(arg + 1, &r2);
1633:src/xeq.c     **** 		}
1634:src/xeq.c     **** 	}
1635:src/xeq.c     **** 	set_was_complex();
1636:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 36


1637:src/xeq.c     **** 
1638:src/xeq.c     **** static void do_crcl(int index, enum rarg op) {
1639:src/xeq.c     **** 	decNumber r1, r2;
1640:src/xeq.c     **** 
1641:src/xeq.c     **** 	if (op == RARG_CRCL) {
1642:src/xeq.c     **** 		REGISTER x, y;
1643:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
1644:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
1645:src/xeq.c     **** 		lift2_if_enabled();
1646:src/xeq.c     **** 		copyreg(StackBase, &x);
1647:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
1648:src/xeq.c     **** 	} else {
1649:src/xeq.c     **** 		if (is_intmode())
1650:src/xeq.c     **** 			bad_mode_error();
1651:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
1652:src/xeq.c     **** 			illegal(op);
1653:src/xeq.c     **** 		else {
1654:src/xeq.c     **** 			setlastXY();
1655:src/xeq.c     **** 			setXY(&r1, &r2);
1656:src/xeq.c     **** 		}
1657:src/xeq.c     **** 	}
1658:src/xeq.c     **** 	set_was_complex();
1659:src/xeq.c     **** }
1660:src/xeq.c     **** 
1661:src/xeq.c     **** void cmdcrcl(unsigned int arg, enum rarg op) {
1662:src/xeq.c     **** 	do_crcl(arg, op);
1663:src/xeq.c     **** }
1664:src/xeq.c     **** 
1665:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1666:src/xeq.c     **** void cmdflashcrcl(unsigned int arg, enum rarg op) {
1667:src/xeq.c     **** 	do_crcl(FLASH_REG_BASE + arg, op - RARG_FLCRCL + RARG_CRCL);
1668:src/xeq.c     **** }
1669:src/xeq.c     **** #endif
1670:src/xeq.c     **** 
1671:src/xeq.c     **** /*
1672:src/xeq.c     ****  *  "Alien" RCL commands to convert registers originally stored in a different format
1673:src/xeq.c     ****  */
1674:src/xeq.c     **** // RCL of an integer value
1675:src/xeq.c     **** void cmdircl(unsigned int arg, enum rarg op) {
1676:src/xeq.c     **** 	if (is_intmode())
1677:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
1678:src/xeq.c     **** 	else
1679:src/xeq.c     **** 		register_from_int(regX_idx, arg, 0);
1680:src/xeq.c     **** }
1681:src/xeq.c     **** 
1682:src/xeq.c     **** // RCL of a single or double precision real value
1683:src/xeq.c     **** void cmdrrcl(unsigned int arg, enum rarg op) {
1684:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
1685:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
1686:src/xeq.c     **** 
1687:src/xeq.c     **** 	if (rcl_dbl && arg >= regX_idx && arg <= regK_idx) {
1688:src/xeq.c     **** 		// dRCL is not valid for lettered registers
1689:src/xeq.c     **** 		report_err(ERR_RANGE);
1690:src/xeq.c     **** 		return;
1691:src/xeq.c     **** 	}
1692:src/xeq.c     **** 
1693:src/xeq.c     **** 	UState.mode_double = rcl_dbl; // Force reading in requested format
ARM GAS  /tmp/cciWh9P3.s 			page 37


1694:src/xeq.c     **** 	if (is_intmode()) {
1695:src/xeq.c     **** 		int_from_register(regX_idx, arg);
1696:src/xeq.c     **** 		UState.mode_double = was_dbl;
1697:src/xeq.c     **** 	}
1698:src/xeq.c     **** 	else {
1699:src/xeq.c     **** 		decNumber x;
1700:src/xeq.c     **** 		getRegister(&x, arg);
1701:src/xeq.c     **** 
1702:src/xeq.c     **** 		UState.mode_double = was_dbl; // Force access in original mode
1703:src/xeq.c     **** 		setX(&x);
1704:src/xeq.c     **** 	}
1705:src/xeq.c     **** }
1706:src/xeq.c     **** 
1707:src/xeq.c     **** 
1708:src/xeq.c     **** /* SWAP x with the specified register
1709:src/xeq.c     ****  */
1710:src/xeq.c     **** void swap_reg(REGISTER *a, REGISTER *b) {
1711:src/xeq.c     **** 	REGISTER t;
1712:src/xeq.c     **** 
1713:src/xeq.c     **** 	copyreg(&t, a);
1714:src/xeq.c     **** 	copyreg(a, b);
1715:src/xeq.c     **** 	copyreg(b, &t);
1716:src/xeq.c     **** }
1717:src/xeq.c     **** 
1718:src/xeq.c     **** void cmdswap(unsigned int arg, enum rarg op) {
1719:src/xeq.c     **** 	int idx;
1720:src/xeq.c     **** 
1721:src/xeq.c     **** 	if (op == RARG_CSWAPX)
1722:src/xeq.c     **** 		idx = regX_idx;
1723:src/xeq.c     **** 	else if (op == RARG_CSWAPZ)
1724:src/xeq.c     **** 		idx = regZ_idx;
1725:src/xeq.c     **** 	else
1726:src/xeq.c     **** 		idx = regX_idx + (int)(op - RARG_SWAPX);
1727:src/xeq.c     **** 
1728:src/xeq.c     **** 	swap_reg(get_reg_n(idx), get_reg_n(arg));
1729:src/xeq.c     **** 
1730:src/xeq.c     **** 	if (op >= RARG_CSWAPX) {
1731:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
1732:src/xeq.c     **** 		set_was_complex();
1733:src/xeq.c     **** 	}
1734:src/xeq.c     **** }
1735:src/xeq.c     **** 
1736:src/xeq.c     **** 
1737:src/xeq.c     **** /* View a specified register
1738:src/xeq.c     ****  */
1739:src/xeq.c     **** void cmdview(unsigned int arg, enum rarg op) {
1740:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
1741:src/xeq.c     **** 
1742:src/xeq.c     **** 	State2.wascomplex = cmplx;
1743:src/xeq.c     **** 	ShowRegister = arg;
1744:src/xeq.c     **** 	State2.disp_freeze = 0;
1745:src/xeq.c     **** 	display();
1746:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
1747:src/xeq.c     **** }
1748:src/xeq.c     **** 
1749:src/xeq.c     **** 
1750:src/xeq.c     **** /* Get the stack size */
ARM GAS  /tmp/cciWh9P3.s 			page 38


1751:src/xeq.c     **** void get_stack_size(enum nilop op) {
1752:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
1753:src/xeq.c     **** }
1754:src/xeq.c     **** 
1755:src/xeq.c     **** void get_word_size(enum nilop op) {
1756:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
1757:src/xeq.c     **** }
1758:src/xeq.c     **** 
1759:src/xeq.c     **** void get_sign_mode(enum nilop op) {
1760:src/xeq.c     **** 	static const unsigned char modes[4] = {
1761:src/xeq.c     **** 		0x02,		// 2's complement
1762:src/xeq.c     **** 		0x01,		// 1's complement
1763:src/xeq.c     **** 		0x00,		// unsigned
1764:src/xeq.c     **** 		0x81		// sign and mantissa
1765:src/xeq.c     **** 	};
1766:src/xeq.c     **** 	const unsigned char v = modes[(int)int_mode()];
1767:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
1768:src/xeq.c     **** }
1769:src/xeq.c     **** 
1770:src/xeq.c     **** void get_base(enum nilop op) {
1771:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
1772:src/xeq.c     **** }
1773:src/xeq.c     **** 
1774:src/xeq.c     **** #ifdef DM42
1775:src/xeq.c     ****  int DM42_Ticker () {
1776:src/xeq.c     ****     int f, t;
1777:src/xeq.c     ****     t = get_rtc_ticks();
1778:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
1779:src/xeq.c     ****     return f;
1780:src/xeq.c     ****  }
1781:src/xeq.c     **** #endif
1782:src/xeq.c     **** /* Get the current ticker value */
1783:src/xeq.c     **** void op_ticks(enum nilop op) {
1784:src/xeq.c     **** #if !defined(CONSOLE) && !defined(DM42)
1785:src/xeq.c     ****     setX_int_sgn(Ticker, 0);
1786:src/xeq.c     **** #elif defined(DM42)
1787:src/xeq.c     ****     setX_int_sgn(DM42_Ticker(),0);
1788:src/xeq.c     **** #else 
1789:src/xeq.c     ****     struct timeval tv;
1790:src/xeq.c     ****     long long int t;
1791:src/xeq.c     ****     gettimeofday(&tv, NULL);
1792:src/xeq.c     ****     t = tv.tv_sec * 10 + tv.tv_usec / 100000;
1793:src/xeq.c     ****     setX_int_sgn(t, 0);
1794:src/xeq.c     **** #endif
1795:src/xeq.c     **** }
1796:src/xeq.c     **** 
1797:src/xeq.c     **** /* Display the battery voltage */
1798:src/xeq.c     **** void op_voltage(enum nilop op) {
1799:src/xeq.c     **** 	decNumber t, u;
1800:src/xeq.c     **** #ifdef REALBUILD
1801:src/xeq.c     **** 	unsigned long long int v = 19 + Voltage;
1802:src/xeq.c     **** #elif defined(DM42)
1803:src/xeq.c     **** 	int v = get_vbat();
1804:src/xeq.c     **** 	v = v / 100;
1805:src/xeq.c     **** #else
1806:src/xeq.c     **** 	unsigned long long int v = 32;
1807:src/xeq.c     **** #endif
ARM GAS  /tmp/cciWh9P3.s 			page 39


1808:src/xeq.c     **** 
1809:src/xeq.c     **** 	if (is_intmode()) {
1810:src/xeq.c     **** 		setX_int_sgn(v, 0);
1811:src/xeq.c     **** 	} else {
1812:src/xeq.c     **** 		ullint_to_dn(&t, v);
1813:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
1814:src/xeq.c     **** 		setX(&u);
1815:src/xeq.c     **** 	}
1816:src/xeq.c     **** }
1817:src/xeq.c     **** 
1818:src/xeq.c     **** /*
1819:src/xeq.c     ****  *  Commands to determine free memory
1820:src/xeq.c     ****  */
1821:src/xeq.c     **** int free_mem(void) {
1822:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
1823:src/xeq.c     **** }
1824:src/xeq.c     **** 
1825:src/xeq.c     **** int free_flash(void) {
1826:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
1827:src/xeq.c     **** }
1828:src/xeq.c     **** 
1829:src/xeq.c     **** void get_mem(enum nilop op) {
1830:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
1831:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
1832:src/xeq.c     **** 		 op == OP_FLASHQ ? free_flash() :
1833:src/xeq.c     **** 		 global_regs(),
1834:src/xeq.c     **** 		 0);
1835:src/xeq.c     **** }
1836:src/xeq.c     **** 
1837:src/xeq.c     **** 
1838:src/xeq.c     **** /* Check if a keystroke is pending in the buffer, if so return it to the specified
1839:src/xeq.c     ****  * register, if not skip the next step.
1840:src/xeq.c     ****  */
1841:src/xeq.c     **** void cmdkeyp(unsigned int arg, enum rarg op) {
1842:src/xeq.c     **** 	int cond = LastKey == 0;
1843:src/xeq.c     **** 	if (!cond) {
1844:src/xeq.c     **** 		int k = LastKey - 1;
1845:src/xeq.c     **** 		LastKey = 0;
1846:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
1847:src/xeq.c     **** 	}
1848:src/xeq.c     **** 	fin_tst(cond);
1849:src/xeq.c     **** }
1850:src/xeq.c     **** 
1851:src/xeq.c     **** /*
1852:src/xeq.c     ****  *  Get a key code from a register and translate it from row/colum to internal
1853:src/xeq.c     ****  *  Check for valid arguments
1854:src/xeq.c     ****  */
1855:src/xeq.c     **** static int get_keycode_from_reg(unsigned int n)
1856:src/xeq.c     **** {
1857:src/xeq.c     **** 	int sgn;
1858:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
1859:src/xeq.c     **** 	if ( c < 0 )
1860:src/xeq.c     **** 		report_err(ERR_RANGE);
1861:src/xeq.c     **** 	return c;
1862:src/xeq.c     **** }
1863:src/xeq.c     **** 
1864:src/xeq.c     **** /*
ARM GAS  /tmp/cciWh9P3.s 			page 40


1865:src/xeq.c     ****  *  Take a row/column key code and feed it to the keyboard buffer
1866:src/xeq.c     ****  *  This stops program execution first to make sure, the key is not
1867:src/xeq.c     ****  *  read in by KEY? again.
1868:src/xeq.c     ****  */
1869:src/xeq.c     **** void cmdputkey(unsigned int arg, enum rarg op)
1870:src/xeq.c     **** {
1871:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
1872:src/xeq.c     **** 
1873:src/xeq.c     **** 	if (c >= 0) {
1874:src/xeq.c     **** 		set_running_off();
1875:src/xeq.c     **** 		put_key(c);
1876:src/xeq.c     **** 	}
1877:src/xeq.c     **** }
1878:src/xeq.c     **** 
1879:src/xeq.c     **** /*
1880:src/xeq.c     ****  *  Return the type of the keycode in register n
1881:src/xeq.c     ****  *  returns 0-9 for digits, 10 for ., +/-, EEX, 11 for f,g,h, 12 for all other keys.
1882:src/xeq.c     ****  *  Invalid codes produce an error.
1883:src/xeq.c     ****  */
1884:src/xeq.c     **** void cmdkeytype(unsigned int arg, enum rarg op)
1885:src/xeq.c     **** {
1886:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
1887:src/xeq.c     **** 	if ( c >= 0 ) {
1888:src/xeq.c     **** 		const char types[] = {
1889:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
1890:src/xeq.c     **** 			12, 12, 12, 11, 11, 11,
1891:src/xeq.c     **** 			12, 12, 10, 10, 12, 12,
1892:src/xeq.c     **** 			12,  7,  8,  9, 12, 12,
1893:src/xeq.c     **** 			12,  4,  5,  6, 12, 12,
1894:src/xeq.c     **** 			12,  1,  2,  3, 12, 12,
1895:src/xeq.c     **** 			12,  0, 10, 12, 12 };
1896:src/xeq.c     **** 		lift_if_enabled();
1897:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
1898:src/xeq.c     **** 	}
1899:src/xeq.c     **** }
1900:src/xeq.c     **** 
1901:src/xeq.c     **** 
1902:src/xeq.c     **** /* Check which operating mode we're in -- integer or real -- they both
1903:src/xeq.c     ****  * vector through this routine.
1904:src/xeq.c     ****  */
1905:src/xeq.c     **** void check_mode(enum nilop op) {
1906:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
1907:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
1908:src/xeq.c     **** 
1909:src/xeq.c     **** 	fin_tst(intmode == desired);
1910:src/xeq.c     **** }
1911:src/xeq.c     **** 
1912:src/xeq.c     **** 
1913:src/xeq.c     **** /* Check if DBLON is active
1914:src/xeq.c     ****  */
1915:src/xeq.c     **** void check_dblmode(enum nilop op) {
1916:src/xeq.c     **** 	fin_tst(is_dblmode());
1917:src/xeq.c     **** }
1918:src/xeq.c     **** 
1919:src/xeq.c     **** void op_query_xtal(enum nilop op) {
1920:src/xeq.c     **** 	fin_tst(Xtal);
1921:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 41


1922:src/xeq.c     **** 
1923:src/xeq.c     **** void op_query_print(enum nilop op) {
1924:src/xeq.c     **** #ifdef INFRARED
1925:src/xeq.c     **** 	fin_tst(1);
1926:src/xeq.c     **** #else
1927:src/xeq.c     **** 	fin_tst(0);
1928:src/xeq.c     **** #endif
1929:src/xeq.c     **** }
1930:src/xeq.c     **** 
1931:src/xeq.c     **** /* Save and restore the entire stack to sequential registers */
1932:src/xeq.c     **** static int check_stack_overlap(unsigned int arg) {
1933:src/xeq.c     **** 	const int n = stack_size();
1934:src/xeq.c     **** 
1935:src/xeq.c     **** 	if (arg + n <= global_regs() || arg >= NUMREG) {
1936:src/xeq.c     **** 		return n;
1937:src/xeq.c     **** 	}
1938:src/xeq.c     **** 	report_err(ERR_STK_CLASH);
1939:src/xeq.c     **** 	return 0;
1940:src/xeq.c     **** }
1941:src/xeq.c     **** 
1942:src/xeq.c     **** void cmdstostk(unsigned int arg, enum rarg op) {
1943:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
1944:src/xeq.c     **** 
1945:src/xeq.c     **** 	for (i=0; i<n; i++)
1946:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
1947:src/xeq.c     **** }
1948:src/xeq.c     **** 
1949:src/xeq.c     **** void cmdrclstk(unsigned int arg, enum rarg op) {
1950:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
1951:src/xeq.c     **** 
1952:src/xeq.c     **** 	for (i=0; i<n; i++)
1953:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
1954:src/xeq.c     **** }
1955:src/xeq.c     **** 
1956:src/xeq.c     **** 
1957:src/xeq.c     **** /*
1958:src/xeq.c     ****  *  Move up the return stack, skipping any local variables
1959:src/xeq.c     ****  */
1960:src/xeq.c     **** static void retstk_up(void)
1961:src/xeq.c     **** {
 309              		.loc 1 1961 1 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
1962:src/xeq.c     **** 	if (RetStkPtr < 0) {
 314              		.loc 1 1962 2 view .LVU95
 315              		.loc 1 1962 6 is_stmt 0 view .LVU96
 316 0000 1A4B     		ldr	r3, .L39
1961:src/xeq.c     **** 	if (RetStkPtr < 0) {
 317              		.loc 1 1961 1 view .LVU97
 318 0002 70B4     		push	{r4, r5, r6}
 319              		.cfi_def_cfa_offset 12
 320              		.cfi_offset 4, -12
 321              		.cfi_offset 5, -8
 322              		.cfi_offset 6, -4
 323              		.loc 1 1962 6 view .LVU98
ARM GAS  /tmp/cciWh9P3.s 			page 42


 324 0004 1C68     		ldr	r4, [r3]
 325 0006 B4F9E227 		ldrsh	r2, [r4, #2018]
 326              		.loc 1 1962 5 view .LVU99
 327 000a 002A     		cmp	r2, #0
 328 000c 01DB     		blt	.L37
 329              	.L27:
1963:src/xeq.c     **** 		int sp = RetStkPtr++;
1964:src/xeq.c     **** 		unsigned int s = RetStk[sp++];
1965:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
1966:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
1967:src/xeq.c     **** 			RetStkPtr = sp;
1968:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
1969:src/xeq.c     **** 			LocalRegs = 0;
1970:src/xeq.c     **** 			while (sp < 0) {
1971:src/xeq.c     **** 				s = RetStk[sp];
1972:src/xeq.c     **** 				if (isLOCAL(s)) {
1973:src/xeq.c     **** 					LocalRegs = sp;
1974:src/xeq.c     **** 					break;
1975:src/xeq.c     **** 				}
1976:src/xeq.c     **** 				++sp;
1977:src/xeq.c     **** 				if (isHIDDEN(s))
1978:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
1979:src/xeq.c     **** 			}
1980:src/xeq.c     **** 		}
1981:src/xeq.c     **** 	}
1982:src/xeq.c     **** }
 330              		.loc 1 1982 1 view .LVU100
 331 000e 70BC     		pop	{r4, r5, r6}
 332              		.cfi_remember_state
 333              		.cfi_restore 6
 334              		.cfi_restore 5
 335              		.cfi_restore 4
 336              		.cfi_def_cfa_offset 0
 337 0010 7047     		bx	lr
 338              	.L37:
 339              		.cfi_restore_state
 340              	.LBB1292:
1963:src/xeq.c     **** 		int sp = RetStkPtr++;
 341              		.loc 1 1963 3 is_stmt 1 view .LVU101
1964:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 342              		.loc 1 1964 26 is_stmt 0 view .LVU102
 343 0012 174B     		ldr	r3, .L39+4
1963:src/xeq.c     **** 		int sp = RetStkPtr++;
 344              		.loc 1 1963 21 view .LVU103
 345 0014 511C     		adds	r1, r2, #1
1964:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 346              		.loc 1 1964 26 view .LVU104
 347 0016 1D68     		ldr	r5, [r3]
1963:src/xeq.c     **** 		int sp = RetStkPtr++;
 348              		.loc 1 1963 21 view .LVU105
 349 0018 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
 350              	.LVL26:
1964:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 351              		.loc 1 1964 3 is_stmt 1 view .LVU106
1964:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 352              		.loc 1 1964 26 is_stmt 0 view .LVU107
 353 001c 35F81230 		ldrh	r3, [r5, r2, lsl #1]
ARM GAS  /tmp/cciWh9P3.s 			page 43


 354              	.LVL27:
1965:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 355              		.loc 1 1965 3 is_stmt 1 view .LVU108
1965:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 356              		.loc 1 1965 7 is_stmt 0 view .LVU109
 357 0020 1A0B     		lsrs	r2, r3, #12
 358              	.LVL28:
1965:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 359              		.loc 1 1965 6 view .LVU110
 360 0022 22F00202 		bic	r2, r2, #2
 361 0026 012A     		cmp	r2, #1
 362 0028 F1D1     		bne	.L27
1966:src/xeq.c     **** 			RetStkPtr = sp;
 363              		.loc 1 1966 4 is_stmt 1 view .LVU111
1966:src/xeq.c     **** 			RetStkPtr = sp;
 364              		.loc 1 1966 10 is_stmt 0 view .LVU112
 365 002a C3F30B03 		ubfx	r3, r3, #0, #12
 366              	.LVL29:
1966:src/xeq.c     **** 			RetStkPtr = sp;
 367              		.loc 1 1966 7 view .LVU113
 368 002e 0B44     		add	r3, r3, r1
 369              	.LVL30:
1967:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 370              		.loc 1 1967 4 is_stmt 1 view .LVU114
1969:src/xeq.c     **** 			while (sp < 0) {
 371              		.loc 1 1969 14 is_stmt 0 view .LVU115
 372 0030 0022     		movs	r2, #0
1967:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 373              		.loc 1 1967 14 view .LVU116
 374 0032 A4F8E237 		strh	r3, [r4, #2018]	@ movhi
 375              	.LVL31:
1969:src/xeq.c     **** 			while (sp < 0) {
 376              		.loc 1 1969 4 is_stmt 1 view .LVU117
1969:src/xeq.c     **** 			while (sp < 0) {
 377              		.loc 1 1969 14 is_stmt 0 view .LVU118
 378 0036 A4F8DE27 		strh	r2, [r4, #2014]	@ movhi
1970:src/xeq.c     **** 				s = RetStk[sp];
 379              		.loc 1 1970 4 is_stmt 1 view .LVU119
 380 003a 6FF00046 		mvn	r6, #-2147483648
 381              	.L31:
1970:src/xeq.c     **** 				s = RetStk[sp];
 382              		.loc 1 1970 4 is_stmt 0 view .LVU120
 383 003e 9919     		adds	r1, r3, r6
 384 0040 05EB4101 		add	r1, r5, r1, lsl #1
 385 0044 03E0     		b	.L33
 386              	.LVL32:
 387              	.L32:
1977:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 388              		.loc 1 1977 8 view .LVU121
 389 0046 032A     		cmp	r2, #3
1976:src/xeq.c     **** 				if (isHIDDEN(s))
 390              		.loc 1 1976 5 view .LVU122
 391 0048 03F10103 		add	r3, r3, #1
 392              	.LVL33:
1977:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 393              		.loc 1 1977 5 is_stmt 1 view .LVU123
1977:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
ARM GAS  /tmp/cciWh9P3.s 			page 44


 394              		.loc 1 1977 8 is_stmt 0 view .LVU124
 395 004c 0AD0     		beq	.L38
 396              	.LVL34:
 397              	.L33:
1971:src/xeq.c     **** 				if (isLOCAL(s)) {
 398              		.loc 1 1971 5 is_stmt 1 view .LVU125
1976:src/xeq.c     **** 				if (isHIDDEN(s))
 399              		.loc 1 1976 5 view .LVU126
1970:src/xeq.c     **** 				s = RetStk[sp];
 400              		.loc 1 1970 10 view .LVU127
 401 004e 002B     		cmp	r3, #0
 402 0050 DDDA     		bge	.L27
1971:src/xeq.c     **** 				if (isLOCAL(s)) {
 403              		.loc 1 1971 15 is_stmt 0 view .LVU128
 404 0052 31F8020F 		ldrh	r0, [r1, #2]!
 405              	.LVL35:
1972:src/xeq.c     **** 					LocalRegs = sp;
 406              		.loc 1 1972 5 is_stmt 1 view .LVU129
1972:src/xeq.c     **** 					LocalRegs = sp;
 407              		.loc 1 1972 9 is_stmt 0 view .LVU130
 408 0056 020B     		lsrs	r2, r0, #12
1972:src/xeq.c     **** 					LocalRegs = sp;
 409              		.loc 1 1972 8 view .LVU131
 410 0058 012A     		cmp	r2, #1
 411 005a F4D1     		bne	.L32
1973:src/xeq.c     **** 					break;
 412              		.loc 1 1973 6 is_stmt 1 view .LVU132
1973:src/xeq.c     **** 					break;
 413              		.loc 1 1973 16 is_stmt 0 view .LVU133
 414 005c A4F8DE37 		strh	r3, [r4, #2014]	@ movhi
1974:src/xeq.c     **** 				}
 415              		.loc 1 1974 6 is_stmt 1 view .LVU134
 416              	.LBE1292:
 417              		.loc 1 1982 1 is_stmt 0 view .LVU135
 418 0060 70BC     		pop	{r4, r5, r6}
 419              		.cfi_remember_state
 420              		.cfi_restore 6
 421              		.cfi_restore 5
 422              		.cfi_restore 4
 423              		.cfi_def_cfa_offset 0
 424 0062 7047     		bx	lr
 425              	.L38:
 426              		.cfi_restore_state
 427              	.LBB1293:
1978:src/xeq.c     **** 			}
 428              		.loc 1 1978 6 is_stmt 1 view .LVU136
1978:src/xeq.c     **** 			}
 429              		.loc 1 1978 12 is_stmt 0 view .LVU137
 430 0064 C0F30B00 		ubfx	r0, r0, #0, #12
 431              	.LVL36:
1978:src/xeq.c     **** 			}
 432              		.loc 1 1978 9 view .LVU138
 433 0068 0344     		add	r3, r3, r0
 434              	.LVL37:
1978:src/xeq.c     **** 			}
 435              		.loc 1 1978 9 view .LVU139
 436 006a E8E7     		b	.L31
ARM GAS  /tmp/cciWh9P3.s 			page 45


 437              	.L40:
 438              		.align	2
 439              	.L39:
 440 006c 00000000 		.word	main_ram
 441 0070 00000000 		.word	RetStk
 442              	.LBE1293:
 443              		.cfi_endproc
 444              	.LFE146:
 446              		.section	.text.flag_word,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu fpv4-sp-d16
 454              	flag_word:
 455              	.LVL38:
 456              	.LFB191:
1983:src/xeq.c     **** 
1984:src/xeq.c     **** 
1985:src/xeq.c     **** /* Search from the given position for the specified numeric label.
1986:src/xeq.c     ****  */
1987:src/xeq.c     **** unsigned int find_opcode_from(unsigned int pc, const opcode l, const int flags) {
1988:src/xeq.c     **** 	unsigned short int top;
1989:src/xeq.c     **** 	int count;
1990:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
1991:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
1992:src/xeq.c     **** 
1993:src/xeq.c     **** 	count = 1 + find_section_bounds(pc, endp, &top);
1994:src/xeq.c     **** 	count -= top;
1995:src/xeq.c     **** 	while (count--) {
1996:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
1997:src/xeq.c     **** 		// If we don't find the label, we may search a little too far if many double word
1998:src/xeq.c     **** 		// instructions are in the code, but this doesn't do any harm.
1999:src/xeq.c     **** 		if (getprog(pc) == l)
2000:src/xeq.c     **** 			return pc;
2001:src/xeq.c     **** 		pc = do_inc(pc, endp);
2002:src/xeq.c     **** 	}
2003:src/xeq.c     **** 	if (errp)
2004:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2005:src/xeq.c     **** 	return 0;
2006:src/xeq.c     **** }
2007:src/xeq.c     **** 
2008:src/xeq.c     **** 
2009:src/xeq.c     **** unsigned int find_label_from(unsigned int pc, unsigned int arg, int flags) {
2010:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
2011:src/xeq.c     **** }
2012:src/xeq.c     **** 
2013:src/xeq.c     **** 
2014:src/xeq.c     **** 
2015:src/xeq.c     **** /* Handle a GTO/GSB instruction
2016:src/xeq.c     ****  */
2017:src/xeq.c     **** static void gsbgto(unsigned int pc, int gsb, unsigned int oldpc) {
2018:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
2019:src/xeq.c     **** 	raw_set_pc(pc);
2020:src/xeq.c     **** 	if (gsb) {
2021:src/xeq.c     **** 		if (!Running && !XromRunning) {
ARM GAS  /tmp/cciWh9P3.s 			page 46


2022:src/xeq.c     **** 			// XEQ or hot key from keyboard
2023:src/xeq.c     **** 			clrretstk();
2024:src/xeq.c     **** 			set_running_on();
2025:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
2026:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
2027:src/xeq.c     **** 				oldpc = pc;
2028:src/xeq.c     **** 		}
2029:src/xeq.c     **** 		if (-RetStkPtr >= (XromFlags.xIN ? XROM_RET_STACK_SIZE : RetStkSize)) {
2030:src/xeq.c     **** 			// Stack is full
2031:src/xeq.c     **** 			report_err(ERR_RAM_FULL);
2032:src/xeq.c     **** 			// clrretstk();
2033:src/xeq.c     **** 		}
2034:src/xeq.c     **** 		else {
2035:src/xeq.c     **** 			// Push PC on return stack
2036:src/xeq.c     **** 			RetStk[--RetStkPtr] = oldpc;
2037:src/xeq.c     **** 		}
2038:src/xeq.c     **** 	}
2039:src/xeq.c     **** }
2040:src/xeq.c     **** 
2041:src/xeq.c     **** // Handle a RTN
2042:src/xeq.c     **** static void do_rtn(int plus1) {
2043:src/xeq.c     **** 	unsigned short pc;
2044:src/xeq.c     **** 
2045:src/xeq.c     **** 	if (RetStkPtr >= 0) {
2046:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
2047:src/xeq.c     **** 		clrretstk();
2048:src/xeq.c     **** 		raw_set_pc(ProgBegin);
2049:src/xeq.c     **** 	}
2050:src/xeq.c     **** 	else {
2051:src/xeq.c     **** 		// Normal RTN within program
2052:src/xeq.c     **** 		// Pop any LOCALS off the stack, increment sp
2053:src/xeq.c     **** 		retstk_up();
2054:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
2055:src/xeq.c     **** 		raw_set_pc(pc);
2056:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
2057:src/xeq.c     **** 		if (plus1 && getprog(pc) != (OP_NIL | OP_POPUSR))
2058:src/xeq.c     **** 			if (incpc())
2059:src/xeq.c     **** 				decpc();
2060:src/xeq.c     **** 	}
2061:src/xeq.c     **** 	if (RetStkPtr == 0) {
2062:src/xeq.c     **** 		// RTN with empty stack stops
2063:src/xeq.c     **** 		set_running_off();
2064:src/xeq.c     **** 	}
2065:src/xeq.c     **** }
2066:src/xeq.c     **** 
2067:src/xeq.c     **** // RTN and RTN+1
2068:src/xeq.c     **** void op_rtn(enum nilop op) {
2069:src/xeq.c     **** 	if (! Running && ! XromRunning) {
2070:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
2071:src/xeq.c     **** 		clrretstk_pc();
2072:src/xeq.c     **** 	}
2073:src/xeq.c     **** 	else
2074:src/xeq.c     **** 		do_rtn(op == OP_RTNp1 ? 1 : 0);
2075:src/xeq.c     **** }
2076:src/xeq.c     **** 
2077:src/xeq.c     **** 
2078:src/xeq.c     **** // Called by XEQ, GTO and CAT browser
ARM GAS  /tmp/cciWh9P3.s 			page 47


2079:src/xeq.c     **** void cmdgtocommon(int gsb, unsigned int pc) {
2080:src/xeq.c     **** 	if (pc == 0)
2081:src/xeq.c     **** 		set_running_off();
2082:src/xeq.c     **** 	else
2083:src/xeq.c     **** 		gsbgto(pc, gsb, state_pc());
2084:src/xeq.c     **** }
2085:src/xeq.c     **** 
2086:src/xeq.c     **** 
2087:src/xeq.c     **** // Common part of XEQUSR and XEQ'...' from XROM
2088:src/xeq.c     **** // Command pushes 4 values on stack, needs to be followed by POPUSR
2089:src/xeq.c     **** static void usergsb_common(unsigned short int target) {
2090:src/xeq.c     **** 	const unsigned int pc = state_pc();
2091:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
2092:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
2093:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
2094:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
2095:src/xeq.c     **** 
2096:src/xeq.c     **** 	XromUserPc = 0;			     // Hide information irrelevant to user code
2097:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
2098:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
2099:src/xeq.c     **** 	if (! Running)
2100:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
2101:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
2102:src/xeq.c     **** }
2103:src/xeq.c     **** 
2104:src/xeq.c     **** 
2105:src/xeq.c     **** // XEQUSR
2106:src/xeq.c     **** // Command fills the stack and calls the user's code.
2107:src/xeq.c     **** // Needs to be followed by POPUSR
2108:src/xeq.c     **** void do_usergsb(enum nilop op) {
2109:src/xeq.c     **** 	usergsb_common(XromUserPc);
2110:src/xeq.c     ****         fill(OP_FILL);
2111:src/xeq.c     **** }
2112:src/xeq.c     **** 
2113:src/xeq.c     **** 
2114:src/xeq.c     **** // POPUSR
2115:src/xeq.c     **** void op_popusr(enum nilop op) {
2116:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
2117:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
2118:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
2119:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
2120:src/xeq.c     **** }
2121:src/xeq.c     **** 
2122:src/xeq.c     **** /* Tests if the user program is at the top level */
2123:src/xeq.c     **** void isTop(enum nilop op) {
2124:src/xeq.c     **** 	int top = 0;
2125:src/xeq.c     **** 
2126:src/xeq.c     **** 	if (Running) {
2127:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
2128:src/xeq.c     **** 	}
2129:src/xeq.c     **** 	fin_tst(top);
2130:src/xeq.c     **** }
2131:src/xeq.c     **** 
2132:src/xeq.c     **** 
2133:src/xeq.c     **** // LBL?
2134:src/xeq.c     **** void cmdlblp(unsigned int arg, enum rarg op) {
2135:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
ARM GAS  /tmp/cciWh9P3.s 			page 48


2136:src/xeq.c     **** }
2137:src/xeq.c     **** 
2138:src/xeq.c     **** 
2139:src/xeq.c     **** void cmdgto(unsigned int arg, enum rarg op) {
2140:src/xeq.c     **** 	unsigned int lbl;
2141:src/xeq.c     **** 	if (is_xrom())
2142:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
2143:src/xeq.c     **** 	else
2144:src/xeq.c     **** 		lbl = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
2145:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
2146:src/xeq.c     **** }
2147:src/xeq.c     **** 
2148:src/xeq.c     **** unsigned int findmultilbl(const opcode o, int flags) {
2149:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
2150:src/xeq.c     **** 	unsigned int lbl;
2151:src/xeq.c     **** 
2152:src/xeq.c     **** 	lbl = find_opcode_from(0, dest, 0);					// RAM
2153:src/xeq.c     **** 	if (lbl == 0)
2154:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
2155:src/xeq.c     **** 	if (lbl == 0)
2156:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
2157:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
2158:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2159:src/xeq.c     **** 	return lbl;
2160:src/xeq.c     **** }
2161:src/xeq.c     **** 
2162:src/xeq.c     **** // LBL?'...'
2163:src/xeq.c     **** void cmdmultilblp(const opcode o, enum multiops mopr) {
2164:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
2165:src/xeq.c     **** }
2166:src/xeq.c     **** 
2167:src/xeq.c     **** void cmdmultigto(const opcode o, enum multiops mopr) {
2168:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
2169:src/xeq.c     **** 		// In XROM the command behaves differently!
2170:src/xeq.c     **** 		unsigned short int target = findmultilbl(o, 0);
2171:src/xeq.c     **** 		if (target != 0)
2172:src/xeq.c     **** 			usergsb_common(target); 
2173:src/xeq.c     **** 		else
2174:src/xeq.c     **** 			incpc();
2175:src/xeq.c     **** 	}
2176:src/xeq.c     **** 	else {
2177:src/xeq.c     **** 		cmdgtocommon(mopr != DBL_GTO, findmultilbl(o, FIND_OP_ERROR));
2178:src/xeq.c     **** 	}
2179:src/xeq.c     **** }
2180:src/xeq.c     **** 
2181:src/xeq.c     **** static void branchtoalpha(int is_gsb, char buf[]) {
2182:src/xeq.c     **** 	unsigned int op;
2183:src/xeq.c     **** 
2184:src/xeq.c     **** 	op = OP_DBL + (DBL_LBL << DBL_SHIFT);
2185:src/xeq.c     **** 	op |= buf[0] & 0xff;
2186:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
2187:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
2188:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
2189:src/xeq.c     **** }
2190:src/xeq.c     **** 
2191:src/xeq.c     **** void cmdalphagto(unsigned int arg, enum rarg op) {
2192:src/xeq.c     **** 	char buf[14];
ARM GAS  /tmp/cciWh9P3.s 			page 49


2193:src/xeq.c     **** 
2194:src/xeq.c     **** 	xset(buf, '\0', sizeof(buf));
2195:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
2196:src/xeq.c     **** }
2197:src/xeq.c     **** 
2198:src/xeq.c     **** static void do_branchalpha(int is_gsb) {
2199:src/xeq.c     **** 	char buf[4];
2200:src/xeq.c     **** 
2201:src/xeq.c     **** 	xcopy(buf, Alpha, 3);
2202:src/xeq.c     **** 	buf[3] = '\0';
2203:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
2204:src/xeq.c     **** }
2205:src/xeq.c     **** 
2206:src/xeq.c     **** void op_gtoalpha(enum nilop op) {
2207:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
2208:src/xeq.c     **** }
2209:src/xeq.c     **** 
2210:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2211:src/xeq.c     **** int get_dispmode_digs(int *pdigs)
2212:src/xeq.c     **** {
2213:src/xeq.c     **** 	int dispmode = UState.dispmode;
2214:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
2215:src/xeq.c     **** 
2216:src/xeq.c     **** 	if (dispdigs >= 12) {
2217:src/xeq.c     **** 		dispdigs -= 12;
2218:src/xeq.c     **** 		dispmode += 4;
2219:src/xeq.c     **** 		if (dispmode >= 6) {
2220:src/xeq.c     **** 			dispmode -= 2;
2221:src/xeq.c     **** 			dispdigs += 4;
2222:src/xeq.c     **** 		}
2223:src/xeq.c     **** 	}
2224:src/xeq.c     **** 	*pdigs = dispdigs;
2225:src/xeq.c     **** 	return dispmode;
2226:src/xeq.c     **** }
2227:src/xeq.c     **** 
2228:src/xeq.c     **** void set_dispmode_digs(int dispmode, int dispdigs)
2229:src/xeq.c     **** {
2230:src/xeq.c     **** 	if (dispmode >= 4) {
2231:src/xeq.c     **** 		dispmode -= 4;
2232:src/xeq.c     **** 		dispdigs += 12;
2233:src/xeq.c     **** 		if (dispdigs >= 16) {
2234:src/xeq.c     **** 			dispdigs -= 4;
2235:src/xeq.c     **** 			dispmode += 2;
2236:src/xeq.c     **** 		}
2237:src/xeq.c     **** 	}
2238:src/xeq.c     **** 	UState.dispmode = dispmode;
2239:src/xeq.c     **** 	UState.dispdigs = dispdigs;
2240:src/xeq.c     **** }
2241:src/xeq.c     **** #endif
2242:src/xeq.c     **** 
2243:src/xeq.c     **** void cmddisp(unsigned int arg, enum rarg op) {
2244:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2245:src/xeq.c     **** 	int dispdigs;
2246:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
2247:src/xeq.c     **** 
2248:src/xeq.c     **** 	if (op != RARG_DISP)
2249:src/xeq.c     **** 		dispmode = (op - RARG_STD) + MODE_STD;
ARM GAS  /tmp/cciWh9P3.s 			page 50


2250:src/xeq.c     **** 	else if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2251:src/xeq.c     **** 		report_err(ERR_RANGE);
2252:src/xeq.c     **** 		return;
2253:src/xeq.c     **** 	}
2254:src/xeq.c     **** 	set_dispmode_digs(dispmode, arg);
2255:src/xeq.c     **** #else
2256:src/xeq.c     **** 	UState.dispdigs = arg;
2257:src/xeq.c     **** 	if (op != RARG_DISP)
2258:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
2259:src/xeq.c     **** #endif
2260:src/xeq.c     **** 	op_float(OP_FLOAT);
2261:src/xeq.c     **** }
2262:src/xeq.c     **** 
2263:src/xeq.c     **** 
2264:src/xeq.c     **** /* Metric / Imperial conversion code */
2265:src/xeq.c     **** decNumber *convC2F(decNumber *r, const decNumber *x) {
2266:src/xeq.c     **** 	decNumber s;
2267:src/xeq.c     **** 
2268:src/xeq.c     **** 	dn_multiply(&s, x, &const_9on5);
2269:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
2270:src/xeq.c     **** }
2271:src/xeq.c     **** 
2272:src/xeq.c     **** decNumber *convF2C(decNumber *r, const decNumber *x) {
2273:src/xeq.c     **** 	decNumber s;
2274:src/xeq.c     **** 
2275:src/xeq.c     **** 	dn_subtract(&s, x, &const_32);
2276:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
2277:src/xeq.c     **** }
2278:src/xeq.c     **** 
2279:src/xeq.c     **** decNumber *convDB2AR(decNumber *r, const decNumber *x) {
2280:src/xeq.c     **** 	decNumber t;
2281:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
2282:src/xeq.c     **** 	return decNumberPow10(r, &t);
2283:src/xeq.c     **** }
2284:src/xeq.c     **** 
2285:src/xeq.c     **** decNumber *convAR2DB(decNumber *r, const decNumber *x) {
2286:src/xeq.c     **** 	decNumber t;
2287:src/xeq.c     **** 	dn_log10(&t, x);
2288:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
2289:src/xeq.c     **** }
2290:src/xeq.c     **** 
2291:src/xeq.c     **** decNumber *convDB2PR(decNumber *r, const decNumber *x) {
2292:src/xeq.c     **** 	decNumber t;
2293:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
2294:src/xeq.c     **** 	return decNumberPow10(r, &t);
2295:src/xeq.c     **** }
2296:src/xeq.c     **** 
2297:src/xeq.c     **** decNumber *convPR2DB(decNumber *r, const decNumber *x) {
2298:src/xeq.c     **** 	decNumber t;
2299:src/xeq.c     **** 	dn_log10(&t, x);
2300:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
2301:src/xeq.c     **** }
2302:src/xeq.c     **** 
2303:src/xeq.c     **** /* Scale conversions */
2304:src/xeq.c     **** void do_conv(decNumber *r, unsigned int arg, const decNumber *x) {
2305:src/xeq.c     **** 	decNumber m;
2306:src/xeq.c     **** 	const unsigned int conv = arg / 2;
ARM GAS  /tmp/cciWh9P3.s 			page 51


2307:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
2308:src/xeq.c     **** 
2309:src/xeq.c     **** 	if (conv > NUM_CONSTS_CONV) {
2310:src/xeq.c     **** 		decNumberCopy(r, x);
2311:src/xeq.c     **** 		return;
2312:src/xeq.c     **** 	}
2313:src/xeq.c     **** 
2314:src/xeq.c     **** 	decimal64ToNumber(&CONSTANT_CONV(conv), &m);
2315:src/xeq.c     **** 
2316:src/xeq.c     **** 	if (dirn == 0)		// metric to imperial
2317:src/xeq.c     **** 		dn_divide(r, x, &m);
2318:src/xeq.c     **** 	else			// imperial to metric
2319:src/xeq.c     **** 		dn_multiply(r, x, &m);
2320:src/xeq.c     **** }
2321:src/xeq.c     **** 
2322:src/xeq.c     **** void cmdconv(unsigned int arg, enum rarg op) {
2323:src/xeq.c     **** 	decNumber x, r;
2324:src/xeq.c     **** 
2325:src/xeq.c     **** 	if (is_intmode())
2326:src/xeq.c     **** 		return;
2327:src/xeq.c     **** 
2328:src/xeq.c     **** 	getX(&x);
2329:src/xeq.c     **** 	do_conv(&r, arg, &x);
2330:src/xeq.c     **** 	setlastX();
2331:src/xeq.c     **** 	setX(&r);
2332:src/xeq.c     **** }
2333:src/xeq.c     **** 
2334:src/xeq.c     **** /*  Finish up a test -- if the value is non-zero, the test passes.
2335:src/xeq.c     ****  *  If it is zero, the test fails.
2336:src/xeq.c     ****  */
2337:src/xeq.c     **** void fin_tst(const int a) {
2338:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
2339:src/xeq.c     **** 	if (Running || XromRunning) {
2340:src/xeq.c     **** 		if (! a && incpc())
2341:src/xeq.c     **** 			decpc();
2342:src/xeq.c     **** 	}
2343:src/xeq.c     **** 	else
2344:src/xeq.c     **** 		DispMsg = msg;
2345:src/xeq.c     **** #ifdef INFRARED
2346:src/xeq.c     **** 	if (Tracing) {
2347:src/xeq.c     **** 		print_justified( msg );
2348:src/xeq.c     **** 		Tracing = 0;
2349:src/xeq.c     **** 	}
2350:src/xeq.c     **** #endif
2351:src/xeq.c     **** }
2352:src/xeq.c     **** 
2353:src/xeq.c     **** 
2354:src/xeq.c     **** /* Skip a number of instructions forwards */
2355:src/xeq.c     **** void cmdskip(unsigned int arg, enum rarg op) {
2356:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2357:src/xeq.c     **** 	unsigned int pc;
2358:src/xeq.c     **** 
2359:src/xeq.c     **** 	if (op == RARG_CASE) {
2360:src/xeq.c     **** 		int sgn;
2361:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
2362:src/xeq.c     **** 		if (sgn || arg >= 100) {
2363:src/xeq.c     **** 			report_err(ERR_RANGE);
ARM GAS  /tmp/cciWh9P3.s 			page 52


2364:src/xeq.c     **** 			return;
2365:src/xeq.c     **** 		}
2366:src/xeq.c     **** 	}
2367:src/xeq.c     **** 
2368:src/xeq.c     **** 	if (isXROM(origpc))
2369:src/xeq.c     **** 		pc = origpc + arg;
2370:src/xeq.c     **** 	else {
2371:src/xeq.c     **** 		while (arg-- && !incpc());
2372:src/xeq.c     **** 		if (PcWrapped) {
2373:src/xeq.c     **** 			report_err(ERR_RANGE);
2374:src/xeq.c     **** 		}
2375:src/xeq.c     **** 		pc = state_pc();
2376:src/xeq.c     **** 	}
2377:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSF, origpc);
2378:src/xeq.c     **** }
2379:src/xeq.c     **** 
2380:src/xeq.c     **** /* Skip backwards */
2381:src/xeq.c     **** void cmdback(unsigned int arg, enum rarg op) {
2382:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2383:src/xeq.c     **** 	unsigned int pc = origpc;
2384:src/xeq.c     **** 
2385:src/xeq.c     **** 	if (isXROM(origpc))
2386:src/xeq.c     **** 		pc -= arg + 1;
2387:src/xeq.c     ****         else if (arg) {
2388:src/xeq.c     **** 		if ( Running ) {
2389:src/xeq.c     **** 			// Handles the case properly that we are on last step
2390:src/xeq.c     **** 			pc = do_dec(pc, 1);
2391:src/xeq.c     **** 		}
2392:src/xeq.c     **** 		do {
2393:src/xeq.c     **** 			pc = do_dec(pc, 1);
2394:src/xeq.c     **** 		} while (--arg && !PcWrapped);
2395:src/xeq.c     **** 		if (PcWrapped) {
2396:src/xeq.c     **** 			report_err(ERR_RANGE);
2397:src/xeq.c     **** 			return;
2398:src/xeq.c     **** 		}
2399:src/xeq.c     **** 	}
2400:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSB, origpc);
2401:src/xeq.c     **** }
2402:src/xeq.c     **** 
2403:src/xeq.c     **** 
2404:src/xeq.c     **** /* Append a character to the command line
2405:src/xeq.c     ****  */
2406:src/xeq.c     **** static void append_cmdline(char c) {
2407:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
2408:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
2409:src/xeq.c     **** }
2410:src/xeq.c     **** 
2411:src/xeq.c     **** /* Make sure exponent stays within allowed limits.
2412:src/xeq.c     ****  * was_digit_entered: 0: sign was changed
2413:src/xeq.c     ****  *                    1: new digit was entered
2414:src/xeq.c     ****  */
2415:src/xeq.c     **** static void exponent_adjusted(int was_digit_entered)
2416:src/xeq.c     **** {
2417:src/xeq.c     **** 	const int dbl = is_dblmode();
2418:src/xeq.c     **** 	int i;
2419:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
2420:src/xeq.c     **** 	const int neg_type_dc = get_reg_n_int_sgn(0, &i);
ARM GAS  /tmp/cciWh9P3.s 			page 53


2421:src/xeq.c     **** #else
2422:src/xeq.c     **** 	const int neg_type_dc = SP_NEG_EXP_ENTRY_TYPE_DC;
2423:src/xeq.c     **** #endif
2424:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DC == -1
2425:src/xeq.c     **** 	const int neg_lim_dc = get_reg_n_int_sgn(1, &i);
2426:src/xeq.c     **** #else
2427:src/xeq.c     **** 	const int neg_lim_dc = SP_NEG_EXP_ENTRY_LIMIT_DC;
2428:src/xeq.c     **** #endif
2429:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DS == -1
2430:src/xeq.c     **** 	const int neg_type_ds = get_reg_n_int_sgn(2, &i);
2431:src/xeq.c     **** #else
2432:src/xeq.c     **** 	const int neg_type_ds = SP_NEG_EXP_ENTRY_TYPE_DS;
2433:src/xeq.c     **** #endif
2434:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DS == -1
2435:src/xeq.c     **** 	const int neg_lim_ds = get_reg_n_int_sgn(3, &i);
2436:src/xeq.c     **** #else
2437:src/xeq.c     **** 	const int neg_lim_ds = SP_NEG_EXP_ENTRY_LIMIT_DS;
2438:src/xeq.c     **** #endif
2439:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DC == -1
2440:src/xeq.c     **** 	const int pos_type_dc = get_reg_n_int_sgn(4, &i);
2441:src/xeq.c     **** #else
2442:src/xeq.c     **** 	const int pos_type_dc = SP_POS_EXP_ENTRY_TYPE_DC;
2443:src/xeq.c     **** #endif
2444:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DC == -1
2445:src/xeq.c     **** 	const int pos_lim_dc = get_reg_n_int_sgn(5, &i);
2446:src/xeq.c     **** #else
2447:src/xeq.c     **** 	const int pos_lim_dc = SP_POS_EXP_ENTRY_LIMIT_DC;
2448:src/xeq.c     **** #endif
2449:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DS == -1
2450:src/xeq.c     **** 	const int pos_type_ds = get_reg_n_int_sgn(6, &i);
2451:src/xeq.c     **** #else
2452:src/xeq.c     **** 	const int pos_type_ds = SP_POS_EXP_ENTRY_TYPE_DS;
2453:src/xeq.c     **** #endif
2454:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DS == -1
2455:src/xeq.c     **** 	const int pos_lim_ds = get_reg_n_int_sgn(7, &i);
2456:src/xeq.c     **** #else
2457:src/xeq.c     **** 	const int pos_lim_ds = SP_POS_EXP_ENTRY_LIMIT_DS;
2458:src/xeq.c     **** #endif
2459:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1
2460:src/xeq.c     **** 	const int exp_chs_dc = get_reg_n_int_sgn(8, &i);
2461:src/xeq.c     **** #else
2462:src/xeq.c     **** 	const int exp_chs_dc = SP_EXP_ENTRY_CHS_DC;
2463:src/xeq.c     **** #endif
2464:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DS == -1
2465:src/xeq.c     **** 	const int exp_chs_ds = get_reg_n_int_sgn(9, &i);
2466:src/xeq.c     **** #else
2467:src/xeq.c     **** 	const int exp_chs_ds = SP_EXP_ENTRY_CHS_DS;
2468:src/xeq.c     **** #endif
2469:src/xeq.c     **** 	const int dp_neg_type_dc = DP_NEG_EXP_ENTRY_TYPE_DC;
2470:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
2471:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
2472:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
2473:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
2474:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
2475:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
2476:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
2477:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
ARM GAS  /tmp/cciWh9P3.s 			page 54


2478:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
2479:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2480:src/xeq.c     **** 	const int large_exp_entry = 1;
2481:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
2482:src/xeq.c     **** #else
2483:src/xeq.c     **** 	const int large_exp_entry = 0;
2484:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
2485:src/xeq.c     **** #endif
2486:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1 || SP_NEG_EXP_ENTRY_TYPE_DC != SP_NEG_EXP_ENTRY_TYPE_DS \
2487:src/xeq.c     ****     || SP_NEG_EXP_ENTRY_LIMIT_DC == -1 || SP_NEG_EXP_ENTRY_LIMIT_DC != SP_NEG_EXP_ENTRY_LIMIT_DS \
2488:src/xeq.c     ****     || SP_POS_EXP_ENTRY_TYPE_DC == -1 || SP_POS_EXP_ENTRY_TYPE_DC != SP_POS_EXP_ENTRY_TYPE_DS \
2489:src/xeq.c     ****     || SP_POS_EXP_ENTRY_LIMIT_DC == -1 || SP_POS_EXP_ENTRY_LIMIT_DC != SP_POS_EXP_ENTRY_LIMIT_DS \
2490:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC != SP_EXP_ENTRY_CHS_DS \
2491:src/xeq.c     ****     || SP_EXP_ENTRY_ZERO_DC == -1 || SP_EXP_ENTRY_ZERO_DC != SP_EXP_ENTRY_ZERO_DS \
2492:src/xeq.c     ****     || ((DP_NEG_EXP_ENTRY_TYPE_DC != DP_NEG_EXP_ENTRY_TYPE_DS \
2493:src/xeq.c     ****          || DP_NEG_EXP_ENTRY_LIMIT_DC != DP_NEG_EXP_ENTRY_LIMIT_DS \
2494:src/xeq.c     ****          || DP_POS_EXP_ENTRY_TYPE_DC != DP_POS_EXP_ENTRY_TYPE_DS \
2495:src/xeq.c     ****          || DP_POS_EXP_ENTRY_LIMIT_DC != DP_POS_EXP_ENTRY_LIMIT_DS \
2496:src/xeq.c     ****          || DP_EXP_ENTRY_CHS_DC != DP_EXP_ENTRY_CHS_DS \
2497:src/xeq.c     ****          || DP_EXP_ENTRY_ZERO_DC != DP_EXP_ENTRY_ZERO_DS) && defined(LARGE_EXPONENT_ENTRY))
2498:src/xeq.c     **** 	const int flag_D = get_user_flag(NAN_FLAG);
2499:src/xeq.c     **** #else
2500:src/xeq.c     **** 	const int flag_D = 0;
2501:src/xeq.c     **** #endif
2502:src/xeq.c     **** #ifndef SHIFT_EXPONENT
2503:src/xeq.c     **** 	int negative;
2504:src/xeq.c     **** #endif
2505:src/xeq.c     **** 	int emax;
2506:src/xeq.c     **** 
2507:src/xeq.c     **** 	/* Figure out the range limit for the exponent */
2508:src/xeq.c     **** 	if (!large_exp_entry && dbl) {
2509:src/xeq.c     **** 		emax = 999;
2510:src/xeq.c     **** 	}
2511:src/xeq.c     **** 	else {
2512:src/xeq.c     **** 		int emax_plus, emax_minus;
2513:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
2514:src/xeq.c     **** 
2515:src/xeq.c     **** 		if ((neg_type_dc >= 1 && neg_type_dc <= 9)
2516:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
2517:src/xeq.c     **** 		    || (pos_type_dc >= 1 && pos_type_dc <= 3)
2518:src/xeq.c     **** 		    || (pos_type_ds >= 1 && pos_type_ds <= 3)
2519:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2520:src/xeq.c     **** 		    || (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9)
2521:src/xeq.c     **** 		    || (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9)
2522:src/xeq.c     **** 		    || (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2523:src/xeq.c     **** 		    || (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2524:src/xeq.c     **** #endif
2525:src/xeq.c     **** 		   ) {
2526:src/xeq.c     **** 			// Exponent limits have to be calculated at run-time
2527:src/xeq.c     **** 
2528:src/xeq.c     **** 			for (i = 0; i < CmdLineLength; ++i) {
2529:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2530:src/xeq.c     **** 				if (Cmdline[i] == 'E' || Cmdline[i] == 'D')
2531:src/xeq.c     **** #else
2532:src/xeq.c     **** 				if (Cmdline[i] == 'E')
2533:src/xeq.c     **** #endif
2534:src/xeq.c     **** 					break;
ARM GAS  /tmp/cciWh9P3.s 			page 55


2535:src/xeq.c     **** 				else if (Cmdline[i] == '.')
2536:src/xeq.c     **** 					dot = i;
2537:src/xeq.c     **** 				else if (Cmdline[i] != '0') {
2538:src/xeq.c     **** 					last_nonzero = i - (dot != 0);
2539:src/xeq.c     **** 					if (first_nonzero < 0)
2540:src/xeq.c     **** 						first_nonzero = i - (dot != 0);
2541:src/xeq.c     **** 				}
2542:src/xeq.c     **** 			}
2543:src/xeq.c     **** 			if (first_nonzero < 0) { // Mantissa is zero.
2544:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DC == -1
2545:src/xeq.c     **** 				const int zero_dc = (get_user_flag(1) << 1) | get_user_flag(0);
2546:src/xeq.c     **** #else
2547:src/xeq.c     **** 				const int zero_dc = SP_EXP_ENTRY_ZERO_DC;
2548:src/xeq.c     **** #endif
2549:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DS == -1
2550:src/xeq.c     **** 				const int zero_ds = (get_user_flag(3) << 1) | get_user_flag(2);
2551:src/xeq.c     **** #else
2552:src/xeq.c     **** 				const int zero_ds = SP_EXP_ENTRY_ZERO_DS;
2553:src/xeq.c     **** #endif
2554:src/xeq.c     **** 				const int dp_zero_dc = DP_EXP_ENTRY_ZERO_DC;
2555:src/xeq.c     **** 				const int dp_zero_ds = DP_EXP_ENTRY_ZERO_DS;
2556:src/xeq.c     **** 
2557:src/xeq.c     **** 				if (large_exp_entry && dbl) {
2558:src/xeq.c     **** 					if ((dp_zero_dc == 1 && dp_zero_ds == 1)
2559:src/xeq.c     **** 					    || (dp_zero_dc == 1 && !flag_D)
2560:src/xeq.c     **** 					    || (dp_zero_ds == 1 && flag_D)) {
2561:src/xeq.c     **** 						// Double precision: Allow any exponent
2562:src/xeq.c     **** 						// within configured limits if any.
2563:src/xeq.c     **** 						emax_plus = emax_minus = 9999;
2564:src/xeq.c     **** 						goto check_limits;
2565:src/xeq.c     **** 					}
2566:src/xeq.c     **** 					else if ((dp_zero_dc == 2 && dp_zero_ds == 2)
2567:src/xeq.c     **** 					         || (dp_zero_dc == 2 && !flag_D)
2568:src/xeq.c     **** 					         || (dp_zero_ds == 2 && flag_D)) {
2569:src/xeq.c     **** 						// Double precision: Allow any exponent
2570:src/xeq.c     **** 						// even outside of configured limits.
2571:src/xeq.c     **** 						emax = 9999;
2572:src/xeq.c     **** 						goto do_not_check_limits;
2573:src/xeq.c     **** 					}
2574:src/xeq.c     **** 					goto zero_has_one_significant_digit;
2575:src/xeq.c     **** 				}
2576:src/xeq.c     **** 				if ((zero_dc == 1 && zero_ds == 1)
2577:src/xeq.c     **** 				    || (zero_dc == 1 && !flag_D)
2578:src/xeq.c     **** 				    || (zero_ds == 1 && flag_D)) {
2579:src/xeq.c     **** 					// Allow any exponent within configured limits if any.
2580:src/xeq.c     **** 					emax_plus = emax_minus = 999;
2581:src/xeq.c     **** 					goto check_limits;
2582:src/xeq.c     **** 				}
2583:src/xeq.c     **** 				else if ((zero_dc == 2 && zero_ds == 2)
2584:src/xeq.c     **** 				         || (zero_dc == 2 && !flag_D)
2585:src/xeq.c     **** 				         || (zero_ds == 2 && flag_D)) {
2586:src/xeq.c     **** 					// Allow any exponent even outside of configured limits.
2587:src/xeq.c     **** 					emax = 999;
2588:src/xeq.c     **** 					goto do_not_check_limits;
2589:src/xeq.c     **** 				}
2590:src/xeq.c     **** 				else {
2591:src/xeq.c     **** zero_has_one_significant_digit:
ARM GAS  /tmp/cciWh9P3.s 			page 56


2592:src/xeq.c     **** 					// Treat zero as if it had one significant digit.
2593:src/xeq.c     **** 					first_nonzero = 0;
2594:src/xeq.c     **** 					dot = 1;
2595:src/xeq.c     **** 				}
2596:src/xeq.c     **** 			}
2597:src/xeq.c     **** 			else if (dot == 0)
2598:src/xeq.c     **** 				dot = i;
2599:src/xeq.c     **** 		}
2600:src/xeq.c     **** 
2601:src/xeq.c     **** 		if (large_exp_entry && dbl) {
2602:src/xeq.c     **** 			// Double precision mode
2603:src/xeq.c     **** 			if (flag_D && dp_neg_type_dc != dp_neg_type_ds) {
2604:src/xeq.c     **** 				if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 3) {
2605:src/xeq.c     **** 					// Don't allow denormal numbers
2606:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2607:src/xeq.c     **** 				}
2608:src/xeq.c     **** 				else if (dp_neg_type_ds >= 4 && dp_neg_type_ds <= 6) {
2609:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2610:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2611:src/xeq.c     **** 				}
2612:src/xeq.c     **** 				else if (dp_neg_type_ds >= 7 && dp_neg_type_ds <= 9) {
2613:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2614:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2615:src/xeq.c     **** 				}
2616:src/xeq.c     **** 				else {
2617:src/xeq.c     **** 					// Fixed limit
2618:src/xeq.c     **** 					emax_minus = dp_neg_lim_ds;
2619:src/xeq.c     **** 				}
2620:src/xeq.c     **** 			}
2621:src/xeq.c     **** 			else {
2622:src/xeq.c     **** 				if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 3) {
2623:src/xeq.c     **** 					// Don't allow denormal numbers
2624:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2625:src/xeq.c     **** 				}
2626:src/xeq.c     **** 				else if (dp_neg_type_dc >= 4 && dp_neg_type_dc <= 6) {
2627:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2628:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2629:src/xeq.c     **** 				}
2630:src/xeq.c     **** 				else if (dp_neg_type_dc >= 7 && dp_neg_type_dc <= 9) {
2631:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2632:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2633:src/xeq.c     **** 				}
2634:src/xeq.c     **** 				else {
2635:src/xeq.c     **** 					// Fixed limit
2636:src/xeq.c     **** 					emax_minus = dp_neg_lim_dc;
2637:src/xeq.c     **** 				}
2638:src/xeq.c     **** 			}
2639:src/xeq.c     **** 
2640:src/xeq.c     **** 			if (flag_D && dp_pos_type_dc != dp_pos_type_ds) {
2641:src/xeq.c     **** 				if (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2642:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2643:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2644:src/xeq.c     **** 				else
2645:src/xeq.c     **** 					// Fixed limit
2646:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2647:src/xeq.c     **** 			}
2648:src/xeq.c     **** 			else {
ARM GAS  /tmp/cciWh9P3.s 			page 57


2649:src/xeq.c     **** 				if (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2650:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2651:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2652:src/xeq.c     **** 				else
2653:src/xeq.c     **** 					// Fixed limit
2654:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2655:src/xeq.c     **** 			}
2656:src/xeq.c     **** 
2657:src/xeq.c     **** 			goto check_limits;
2658:src/xeq.c     **** 		}
2659:src/xeq.c     **** 
2660:src/xeq.c     **** 		if (flag_D && neg_type_dc != neg_type_ds) {
2661:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
2662:src/xeq.c     **** 				// Don't allow denormal numbers
2663:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2664:src/xeq.c     **** 			}
2665:src/xeq.c     **** 			else if (neg_type_ds >= 4 && neg_type_ds <= 6) {
2666:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2667:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2668:src/xeq.c     **** 			}
2669:src/xeq.c     **** 			else if (neg_type_ds >= 7 && neg_type_ds <= 9) {
2670:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2671:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2672:src/xeq.c     **** 			}
2673:src/xeq.c     **** 			else {
2674:src/xeq.c     **** 				// Fixed limit
2675:src/xeq.c     **** 				emax_minus = neg_lim_ds;
2676:src/xeq.c     **** 			}
2677:src/xeq.c     **** 		}
2678:src/xeq.c     **** 		else {
2679:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 3) {
2680:src/xeq.c     **** 				// Don't allow denormal numbers
2681:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2682:src/xeq.c     **** 			}
2683:src/xeq.c     **** 			else if (neg_type_dc >= 4 && neg_type_dc <= 6) {
2684:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2685:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2686:src/xeq.c     **** 			}
2687:src/xeq.c     **** 			else if (neg_type_dc >= 7 && neg_type_dc <= 9) {
2688:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2689:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2690:src/xeq.c     **** 			}
2691:src/xeq.c     **** 			else {
2692:src/xeq.c     **** 				// Fixed limit
2693:src/xeq.c     **** 				emax_minus = neg_lim_dc;
2694:src/xeq.c     **** 			}
2695:src/xeq.c     **** 		}
2696:src/xeq.c     **** 
2697:src/xeq.c     **** 		if (flag_D && pos_type_dc != pos_type_ds) {
2698:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
2699:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2700:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2701:src/xeq.c     **** 			else
2702:src/xeq.c     **** 				// Fixed limit
2703:src/xeq.c     **** 				emax_plus = pos_lim_ds;
2704:src/xeq.c     **** 		}
2705:src/xeq.c     **** 		else {
ARM GAS  /tmp/cciWh9P3.s 			page 58


2706:src/xeq.c     **** 			if (pos_type_dc >= 1 && pos_type_dc <= 3)
2707:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2708:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2709:src/xeq.c     **** 			else
2710:src/xeq.c     **** 				// Fixed limit
2711:src/xeq.c     **** 				emax_plus = pos_lim_dc;
2712:src/xeq.c     **** 		}
2713:src/xeq.c     **** 
2714:src/xeq.c     **** check_limits:
2715:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2716:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
2717:src/xeq.c     **** 		    && (dp_neg_type_ds != neg_type_ds || dp_neg_lim_ds != neg_lim_ds)) {
2718:src/xeq.c     **** 			if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9) {
2719:src/xeq.c     **** 				if (dp_neg_type_ds % 3 == 2) { // low limit
2720:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_ds)
2721:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2722:src/xeq.c     **** 				}
2723:src/xeq.c     **** 				else if (dp_neg_type_ds % 3 == 0) { // high limit
2724:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_ds)
2725:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2726:src/xeq.c     **** 				}
2727:src/xeq.c     **** 			}
2728:src/xeq.c     **** 			if (dp_neg_lim_ds < 0 && emax_minus < 0)
2729:src/xeq.c     **** 				emax_minus = 0;
2730:src/xeq.c     **** 		}
2731:src/xeq.c     **** 		else if (large_exp_entry && dbl
2732:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
2733:src/xeq.c     **** 		                         && dp_neg_lim_dc == dp_neg_lim_ds))
2734:src/xeq.c     **** 		         && (dp_neg_type_dc != neg_type_dc || dp_neg_lim_dc != neg_lim_dc)) {
2735:src/xeq.c     **** 			if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9) {
2736:src/xeq.c     **** 				if (dp_neg_type_dc % 3 == 2) { // low limit
2737:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_dc)
2738:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2739:src/xeq.c     **** 				}
2740:src/xeq.c     **** 				else if (dp_neg_type_dc % 3 == 0) { // high limit
2741:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_dc)
2742:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2743:src/xeq.c     **** 				}
2744:src/xeq.c     **** 			}
2745:src/xeq.c     **** 			if (dp_neg_lim_dc < 0 && emax_minus < 0)
2746:src/xeq.c     **** 				emax_minus = 0;
2747:src/xeq.c     **** 		}
2748:src/xeq.c     **** 		else if (flag_D && (neg_type_dc != neg_type_ds || neg_lim_dc != neg_lim_ds)) {
2749:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
2750:src/xeq.c     **** 				if (neg_type_ds % 3 == 2) { // low limit
2751:src/xeq.c     **** 					if (emax_minus > neg_lim_ds)
2752:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2753:src/xeq.c     **** 				}
2754:src/xeq.c     **** 				else if (neg_type_ds % 3 == 0) { // high limit
2755:src/xeq.c     **** 					if (emax_minus < neg_lim_ds)
2756:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2757:src/xeq.c     **** 				}
2758:src/xeq.c     **** 			}
2759:src/xeq.c     **** 			if (neg_lim_ds < 0 && emax_minus < 0)
2760:src/xeq.c     **** 				emax_minus = 0;
2761:src/xeq.c     **** 		}
2762:src/xeq.c     **** 		else {
ARM GAS  /tmp/cciWh9P3.s 			page 59


2763:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 9) {
2764:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
2765:src/xeq.c     **** 					if (emax_minus > neg_lim_dc)
2766:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2767:src/xeq.c     **** 				}
2768:src/xeq.c     **** 				else if (neg_type_dc % 3 == 0) { // high limit
2769:src/xeq.c     **** 					if (emax_minus < neg_lim_dc)
2770:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2771:src/xeq.c     **** 				}
2772:src/xeq.c     **** 			}
2773:src/xeq.c     **** 			if (neg_lim_dc < 0 && emax_minus < 0)
2774:src/xeq.c     **** 				emax_minus = 0;
2775:src/xeq.c     **** 		}
2776:src/xeq.c     **** 
2777:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2778:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
2779:src/xeq.c     **** 		    && (dp_pos_type_ds != pos_type_ds || dp_pos_lim_ds != pos_lim_ds)) {
2780:src/xeq.c     **** 			if (dp_pos_type_ds == 2) { // low limit
2781:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_ds)
2782:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2783:src/xeq.c     **** 			}
2784:src/xeq.c     **** 			else if (dp_pos_type_ds == 3) { // high limit
2785:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_ds)
2786:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2787:src/xeq.c     **** 			}
2788:src/xeq.c     **** 			if (dp_pos_lim_ds < 0 && emax_plus < 0)
2789:src/xeq.c     **** 				emax_plus = 0;
2790:src/xeq.c     **** 		}
2791:src/xeq.c     **** 		else if (large_exp_entry && dbl
2792:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
2793:src/xeq.c     **** 		                         && dp_pos_lim_dc == dp_pos_lim_ds))
2794:src/xeq.c     **** 		         && (dp_pos_type_dc != pos_type_dc || dp_pos_lim_dc != pos_lim_dc)) {
2795:src/xeq.c     **** 			if (dp_pos_type_dc == 2) { // low limit
2796:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_dc)
2797:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2798:src/xeq.c     **** 			}
2799:src/xeq.c     **** 			else if (dp_pos_type_dc == 3) { // high limit
2800:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_dc)
2801:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2802:src/xeq.c     **** 			}
2803:src/xeq.c     **** 			if (dp_pos_lim_dc < 0 && emax_plus < 0)
2804:src/xeq.c     **** 				emax_plus = 0;
2805:src/xeq.c     **** 		}
2806:src/xeq.c     **** 		else if (flag_D && (pos_type_dc != pos_type_ds || pos_lim_dc != pos_lim_ds)) {
2807:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
2808:src/xeq.c     **** 				if (emax_plus < pos_lim_ds)
2809:src/xeq.c     **** 					emax_plus = pos_lim_ds;
2810:src/xeq.c     **** 			}
2811:src/xeq.c     **** 			else if (pos_type_ds == 3) { // high limit
2812:src/xeq.c     **** 				if (emax_plus > pos_lim_ds)
2813:src/xeq.c     **** 					emax_plus = pos_lim_ds;
2814:src/xeq.c     **** 			}
2815:src/xeq.c     **** 			if (pos_lim_ds < 0 && emax_plus < 0)
2816:src/xeq.c     **** 				emax_plus = 0;
2817:src/xeq.c     **** 		}
2818:src/xeq.c     **** 		else {
2819:src/xeq.c     **** 			if (pos_type_dc == 2) { // low limit
ARM GAS  /tmp/cciWh9P3.s 			page 60


2820:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
2821:src/xeq.c     **** 					emax_plus = pos_lim_dc;
2822:src/xeq.c     **** 			}
2823:src/xeq.c     **** 			else if (pos_type_dc == 3) { // high limit
2824:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
2825:src/xeq.c     **** 					emax_plus = pos_lim_dc;
2826:src/xeq.c     **** 			}
2827:src/xeq.c     **** 			if (pos_lim_dc < 0 && emax_plus < 0)
2828:src/xeq.c     **** 				emax_plus = 0;
2829:src/xeq.c     **** 		}
2830:src/xeq.c     **** 
2831:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2832:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
2833:src/xeq.c     **** 		    && (dp_exp_chs_ds != exp_chs_ds)) {
2834:src/xeq.c     **** 			if (dp_exp_chs_ds == 0) {
2835:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2836:src/xeq.c     **** 				if (emax_minus < emax_plus)
2837:src/xeq.c     **** 					emax = emax_minus;
2838:src/xeq.c     **** 				else
2839:src/xeq.c     **** 					emax = emax_plus;
2840:src/xeq.c     **** 			}
2841:src/xeq.c     **** 			else if (dp_exp_chs_ds == 3) {
2842:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2843:src/xeq.c     **** 				if (emax_minus > emax_plus)
2844:src/xeq.c     **** 					emax = emax_minus;
2845:src/xeq.c     **** 				else
2846:src/xeq.c     **** 					emax = emax_plus;
2847:src/xeq.c     **** 			}
2848:src/xeq.c     **** 			else {
2849:src/xeq.c     **** 				if (dp_exp_chs_ds == 2 && !was_digit_entered)
2850:src/xeq.c     **** 					return;
2851:src/xeq.c     **** 				if (*p == 'D')
2852:src/xeq.c     **** 					emax = emax_minus;
2853:src/xeq.c     **** 				else
2854:src/xeq.c     **** 					emax = emax_plus;
2855:src/xeq.c     **** 			}
2856:src/xeq.c     **** 		}
2857:src/xeq.c     **** 		else if (large_exp_entry && dbl
2858:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
2859:src/xeq.c     **** 		         && (dp_exp_chs_dc != exp_chs_dc)) {
2860:src/xeq.c     **** 			if (dp_exp_chs_dc == 0) {
2861:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2862:src/xeq.c     **** 				if (emax_minus < emax_plus)
2863:src/xeq.c     **** 					emax = emax_minus;
2864:src/xeq.c     **** 				else
2865:src/xeq.c     **** 					emax = emax_plus;
2866:src/xeq.c     **** 			}
2867:src/xeq.c     **** 			else if (dp_exp_chs_dc == 3) {
2868:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2869:src/xeq.c     **** 				if (emax_minus > emax_plus)
2870:src/xeq.c     **** 					emax = emax_minus;
2871:src/xeq.c     **** 				else
2872:src/xeq.c     **** 					emax = emax_plus;
2873:src/xeq.c     **** 			}
2874:src/xeq.c     **** 			else {
2875:src/xeq.c     **** 				if (dp_exp_chs_dc == 2 && !was_digit_entered)
2876:src/xeq.c     **** 					return;
ARM GAS  /tmp/cciWh9P3.s 			page 61


2877:src/xeq.c     **** 				if (*p == 'D')
2878:src/xeq.c     **** 					emax = emax_minus;
2879:src/xeq.c     **** 				else
2880:src/xeq.c     **** 					emax = emax_plus;
2881:src/xeq.c     **** 			}
2882:src/xeq.c     **** 		}
2883:src/xeq.c     **** 		else if (flag_D && exp_chs_dc != exp_chs_ds) {
2884:src/xeq.c     **** 			if (exp_chs_ds == 0) {
2885:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2886:src/xeq.c     **** 				if (emax_minus < emax_plus)
2887:src/xeq.c     **** 					emax = emax_minus;
2888:src/xeq.c     **** 				else
2889:src/xeq.c     **** 					emax = emax_plus;
2890:src/xeq.c     **** 			}
2891:src/xeq.c     **** 			else if (exp_chs_ds == 3) {
2892:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2893:src/xeq.c     **** 				if (emax_minus > emax_plus)
2894:src/xeq.c     **** 					emax = emax_minus;
2895:src/xeq.c     **** 				else
2896:src/xeq.c     **** 					emax = emax_plus;
2897:src/xeq.c     **** 			}
2898:src/xeq.c     **** 			else {
2899:src/xeq.c     **** 				if (exp_chs_ds == 2 && !was_digit_entered)
2900:src/xeq.c     **** 					return;
2901:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2902:src/xeq.c     **** 				if (*p == 'D')
2903:src/xeq.c     **** #else
2904:src/xeq.c     **** 				if (*p == '-')
2905:src/xeq.c     **** #endif
2906:src/xeq.c     **** 					emax = emax_minus;
2907:src/xeq.c     **** 				else
2908:src/xeq.c     **** 					emax = emax_plus;
2909:src/xeq.c     **** 			}
2910:src/xeq.c     **** 		}
2911:src/xeq.c     **** 		else {
2912:src/xeq.c     **** 			if (exp_chs_dc == 0) {
2913:src/xeq.c     **** 				// Limit exponents so sign change is always legal
2914:src/xeq.c     **** 				if (emax_minus < emax_plus)
2915:src/xeq.c     **** 					emax = emax_minus;
2916:src/xeq.c     **** 				else
2917:src/xeq.c     **** 					emax = emax_plus;
2918:src/xeq.c     **** 			}
2919:src/xeq.c     **** 			else if (exp_chs_dc == 3) {
2920:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
2921:src/xeq.c     **** 				if (emax_minus > emax_plus)
2922:src/xeq.c     **** 					emax = emax_minus;
2923:src/xeq.c     **** 				else
2924:src/xeq.c     **** 					emax = emax_plus;
2925:src/xeq.c     **** 			}
2926:src/xeq.c     **** 			else {
2927:src/xeq.c     **** 				if (exp_chs_dc == 2 && !was_digit_entered)
2928:src/xeq.c     **** 					return;
2929:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2930:src/xeq.c     **** 				if (*p == 'D')
2931:src/xeq.c     **** #else
2932:src/xeq.c     **** 				if (*p == '-')
2933:src/xeq.c     **** #endif
ARM GAS  /tmp/cciWh9P3.s 			page 62


2934:src/xeq.c     **** 					emax = emax_minus;
2935:src/xeq.c     **** 				else
2936:src/xeq.c     **** 					emax = emax_plus;
2937:src/xeq.c     **** 			}
2938:src/xeq.c     **** 		}
2939:src/xeq.c     **** 	}
2940:src/xeq.c     **** 
2941:src/xeq.c     **** do_not_check_limits:
2942:src/xeq.c     **** #ifdef SHIFT_EXPONENT
2943:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
2944:src/xeq.c     **** 	p++;
2945:src/xeq.c     **** #  else
2946:src/xeq.c     **** 	if (*p == '-')
2947:src/xeq.c     **** 		p++;
2948:src/xeq.c     **** #  endif
2949:src/xeq.c     **** 	/* Check if the current exponent exceeds the range.
2950:src/xeq.c     **** 	 * If so, shift it back until it doesn't.
2951:src/xeq.c     **** 	 * Also remove leading zeros.
2952:src/xeq.c     **** 	 */
2953:src/xeq.c     **** 	while (s_to_i(p) > emax || *p == '0') {
2954:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
2955:src/xeq.c     **** 			p[i] = p[i + 1];
2956:src/xeq.c     **** 		CmdLineLength--;
2957:src/xeq.c     **** 	}
2958:src/xeq.c     **** #else
2959:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
2960:src/xeq.c     **** 	negative = (*p == 'D');
2961:src/xeq.c     **** 	p++;
2962:src/xeq.c     **** #  else
2963:src/xeq.c     **** 	if (*p == '-') {
2964:src/xeq.c     **** 		p++;
2965:src/xeq.c     **** 		negative = 1;
2966:src/xeq.c     **** 	}
2967:src/xeq.c     **** 	else negative = 0;
2968:src/xeq.c     **** #  endif
2969:src/xeq.c     **** 	// Display a warning if the exponent is out of range.
2970:src/xeq.c     **** 	if ((i = s_to_i(p)) > emax) {
2971:src/xeq.c     **** 		if (was_digit_entered) {
2972:src/xeq.c     **** 			CmdLineLength--;
2973:src/xeq.c     **** 			if (large_exp_entry && dbl ? i > 9999 : i > 999) {
2974:src/xeq.c     **** 				report_warn(ERR_TOO_LONG);
2975:src/xeq.c     **** 				return;
2976:src/xeq.c     **** 			}
2977:src/xeq.c     **** 		}
2978:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
2979:src/xeq.c     **** 		else if (('D' | 1) == 'E')
2980:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
2981:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
2982:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
2983:src/xeq.c     **** 		else
2984:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
2985:src/xeq.c     **** #  else
2986:src/xeq.c     **** 		else if (negative) {
2987:src/xeq.c     **** 			scopy(p - 1, p);
2988:src/xeq.c     **** 			CmdLineLength--;
2989:src/xeq.c     **** 		}
2990:src/xeq.c     **** 		else {
ARM GAS  /tmp/cciWh9P3.s 			page 63


2991:src/xeq.c     **** 			xcopy(p + 1, p, CMDLINELEN - 1 - CmdLineEex);
2992:src/xeq.c     **** 			*p = '-';
2993:src/xeq.c     **** 			CmdLineLength++;
2994:src/xeq.c     **** 		}
2995:src/xeq.c     **** #  endif
2996:src/xeq.c     **** 		if (negative)
2997:src/xeq.c     **** 			report_warn(ERR_TOO_SMALL);
2998:src/xeq.c     **** 		else
2999:src/xeq.c     **** 			report_warn(ERR_TOO_BIG);
3000:src/xeq.c     **** 	}
3001:src/xeq.c     **** #endif
3002:src/xeq.c     **** }
3003:src/xeq.c     **** 
3004:src/xeq.c     **** /* We've encountered a CHS while entering the command line.
3005:src/xeq.c     ****  */
3006:src/xeq.c     **** static void cmdlinechs(void) {
3007:src/xeq.c     **** 	if (CmdLineEex) {
3008:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3009:src/xeq.c     **** 		// 'D' instead of 'E' indicates a negative exponent.
3010:src/xeq.c     **** 		// Four-digit exponents wouldn't fit into Cmdline if we used 'E-'.
3011:src/xeq.c     **** 		if (('D' | 1) == 'E')
3012:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3013:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3014:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3015:src/xeq.c     **** 		else
3016:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3017:src/xeq.c     **** #else
3018:src/xeq.c     **** 		const unsigned int pos = CmdLineEex + 1;
3019:src/xeq.c     **** 		if (CmdLineLength <= pos) {
3020:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
3021:src/xeq.c     **** 				append_cmdline('-');
3022:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
3023:src/xeq.c     **** 			if (CmdLineLength != pos)
3024:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
3025:src/xeq.c     **** 			CmdLineLength--;
3026:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3027:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
3028:src/xeq.c     **** 			Cmdline[pos] = '-';
3029:src/xeq.c     **** 			CmdLineLength++;
3030:src/xeq.c     **** 		}
3031:src/xeq.c     **** #endif
3032:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC == 1 \
3033:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DS == -1 || SP_EXP_ENTRY_CHS_DS == 1 \
3034:src/xeq.c     ****     || ((DP_EXP_ENTRY_CHS_DC == 1 || DP_EXP_ENTRY_CHS_DS == 1) && defined(LARGE_EXPONENT_ENTRY))
3035:src/xeq.c     **** 		exponent_adjusted(0);
3036:src/xeq.c     **** #endif
3037:src/xeq.c     **** 	} else {
3038:src/xeq.c     **** 		if (Cmdline[0] == '-') {
3039:src/xeq.c     **** 			if (CmdLineLength > 1)
3040:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
3041:src/xeq.c     **** 			CmdLineLength--;
3042:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3043:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
3044:src/xeq.c     **** 			Cmdline[0] = '-';
3045:src/xeq.c     **** 			CmdLineLength++;
3046:src/xeq.c     **** 		}
3047:src/xeq.c     **** 	}
ARM GAS  /tmp/cciWh9P3.s 			page 64


3048:src/xeq.c     **** }
3049:src/xeq.c     **** 
3050:src/xeq.c     **** /* Execute a tests command
3051:src/xeq.c     ****  */
3052:src/xeq.c     **** static void do_tst(int cmp, const enum tst_op op) {
3053:src/xeq.c     **** 	int a = 0;
3054:src/xeq.c     **** 	int iszero, isneg;
3055:src/xeq.c     **** 
3056:src/xeq.c     **** 	process_cmdline_set_lift();
3057:src/xeq.c     **** 
3058:src/xeq.c     **** 	if (is_intmode()) {
3059:src/xeq.c     **** 		unsigned long long int xv, yv;
3060:src/xeq.c     **** 		int xs, ys;
3061:src/xeq.c     **** 
3062:src/xeq.c     **** 		xv = extract_value(getX_int(), &xs);
3063:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
3064:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
3065:src/xeq.c     **** 			ys = 0;
3066:src/xeq.c     **** 		} else
3067:src/xeq.c     **** 			yv = extract_value(get_reg_n_int(cmp), &ys);
3068:src/xeq.c     **** 
3069:src/xeq.c     **** 		if (xv == 0 && yv == 0)
3070:src/xeq.c     **** 			iszero = 1;
3071:src/xeq.c     **** 		else
3072:src/xeq.c     **** 			iszero = (xv == yv) && (xs == ys);
3073:src/xeq.c     **** 
3074:src/xeq.c     **** 		if (xs == ys) {		// same sign
3075:src/xeq.c     **** 			if (xs)		// both negative
3076:src/xeq.c     **** 				isneg = xv > yv;
3077:src/xeq.c     **** 			else		// both positive
3078:src/xeq.c     **** 				isneg = xv < yv;
3079:src/xeq.c     **** 		} else
3080:src/xeq.c     **** 			isneg = xs;	// opposite signs
3081:src/xeq.c     **** 	} else {
3082:src/xeq.c     **** 		decNumber t, x, r;
3083:src/xeq.c     **** 
3084:src/xeq.c     **** 		getX(&x);
3085:src/xeq.c     **** 		if (decNumberIsNaN(&x))
3086:src/xeq.c     **** 			goto flse;
3087:src/xeq.c     **** 
3088:src/xeq.c     **** 		getRegister(&t, cmp);
3089:src/xeq.c     **** 		if (decNumberIsNaN(&t))
3090:src/xeq.c     **** 			goto flse;
3091:src/xeq.c     **** 
3092:src/xeq.c     **** 		if (op == TST_APX) {
3093:src/xeq.c     **** 			decNumberRnd(&x, &x);
3094:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
3095:src/xeq.c     **** 				decNumberRnd(&t, &t);
3096:src/xeq.c     **** 		}
3097:src/xeq.c     **** 		dn_compare(&r, &x, &t);
3098:src/xeq.c     **** 		iszero = dn_eq0(&r);
3099:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
3100:src/xeq.c     **** 	}
3101:src/xeq.c     **** 
3102:src/xeq.c     **** 	switch (op) {
3103:src/xeq.c     **** 	case TST_APX:
3104:src/xeq.c     **** 	case TST_EQ:	a = iszero;		break;
ARM GAS  /tmp/cciWh9P3.s 			page 65


3105:src/xeq.c     **** 	case TST_NE:	a = !iszero;		break;
3106:src/xeq.c     **** 	case TST_LT:	a = isneg && !iszero;	break;
3107:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
3108:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
3109:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
3110:src/xeq.c     **** 	default:	a = 0;			break;
3111:src/xeq.c     **** 	}
3112:src/xeq.c     **** 
3113:src/xeq.c     **** flse:	fin_tst(a);
3114:src/xeq.c     **** }
3115:src/xeq.c     **** 
3116:src/xeq.c     **** void check_zero(enum nilop op) {
3117:src/xeq.c     **** 	int neg;
3118:src/xeq.c     **** 	int zero;
3119:src/xeq.c     **** 
3120:src/xeq.c     **** 	if (is_intmode()) {
3121:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
3122:src/xeq.c     **** 		zero = (xv == 0);
3123:src/xeq.c     **** 	} else {
3124:src/xeq.c     **** 		decNumber x;
3125:src/xeq.c     **** 		getX(&x);
3126:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
3127:src/xeq.c     **** 		zero = dn_eq0(&x);
3128:src/xeq.c     **** 	}
3129:src/xeq.c     **** 	if (op == OP_Xeq_pos0)
3130:src/xeq.c     **** 		fin_tst(zero && !neg);
3131:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
3132:src/xeq.c     **** 		fin_tst(zero && neg);
3133:src/xeq.c     **** }
3134:src/xeq.c     **** 
3135:src/xeq.c     **** void cmdtest(unsigned int arg, enum rarg op) {
3136:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
3137:src/xeq.c     **** }
3138:src/xeq.c     **** 
3139:src/xeq.c     **** static void do_ztst(const decNumber *re, const decNumber *im, enum tst_op op) {
3140:src/xeq.c     **** 	decNumber x, y;
3141:src/xeq.c     **** 
3142:src/xeq.c     **** 	process_cmdline_set_lift();
3143:src/xeq.c     **** 	if (is_intmode()) {
3144:src/xeq.c     **** 		bad_mode_error();
3145:src/xeq.c     **** 		return;
3146:src/xeq.c     **** 	}
3147:src/xeq.c     **** 	getXY(&x, &y);
3148:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
3149:src/xeq.c     **** 		fin_tst(0);
3150:src/xeq.c     **** 		return;
3151:src/xeq.c     **** 	}
3152:src/xeq.c     **** 	fin_tst((op == TST_EQ) == (dn_eq(&x, re) && dn_eq(&y, im)));
3153:src/xeq.c     **** }
3154:src/xeq.c     **** 
3155:src/xeq.c     **** void cmdztest(unsigned int arg, enum rarg op) {
3156:src/xeq.c     **** 	decNumber re, im;
3157:src/xeq.c     **** 	getRegister(&re, arg);
3158:src/xeq.c     **** 	getRegister(&im, arg + 1);
3159:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
3160:src/xeq.c     **** }
3161:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 66


3162:src/xeq.c     **** static int incdec(unsigned int arg, int inc) {
3163:src/xeq.c     **** 	if (is_intmode()) {
3164:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3165:src/xeq.c     **** 		int xs;
3166:src/xeq.c     **** 		unsigned long long int xv;
3167:src/xeq.c     **** 
3168:src/xeq.c     **** 		if (inc)
3169:src/xeq.c     **** 			x = intAdd(x, 1LL);
3170:src/xeq.c     **** 		else
3171:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3172:src/xeq.c     **** 		set_reg_n_int(arg, x);
3173:src/xeq.c     **** 
3174:src/xeq.c     **** 		xv = extract_value(x, &xs);
3175:src/xeq.c     **** 		return xv != 0;
3176:src/xeq.c     **** 	} else {
3177:src/xeq.c     **** 		decNumber x, y;
3178:src/xeq.c     **** 
3179:src/xeq.c     **** 		getRegister(&x, arg);
3180:src/xeq.c     **** 		if (inc)
3181:src/xeq.c     **** 			dn_inc(&x);
3182:src/xeq.c     **** 		else
3183:src/xeq.c     **** 			dn_dec(&x);
3184:src/xeq.c     **** 		setRegister(arg, &x);
3185:src/xeq.c     **** 		decNumberTrunc(&y, &x);
3186:src/xeq.c     **** 		return ! dn_eq0(&y);
3187:src/xeq.c     **** 	}
3188:src/xeq.c     **** }
3189:src/xeq.c     **** 
3190:src/xeq.c     **** void cmdlincdec(unsigned int arg, enum rarg op) {
3191:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
3192:src/xeq.c     **** }
3193:src/xeq.c     **** 
3194:src/xeq.c     **** void cmdloopz(unsigned int arg, enum rarg op) {
3195:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
3196:src/xeq.c     **** }
3197:src/xeq.c     **** 
3198:src/xeq.c     **** void cmdloop(unsigned int arg, enum rarg op) {
3199:src/xeq.c     **** 	if (is_intmode()) {
3200:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3201:src/xeq.c     **** 		int xs;
3202:src/xeq.c     **** 		unsigned long long int xv;
3203:src/xeq.c     **** 
3204:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE)
3205:src/xeq.c     **** 			x = intAdd(x, 1LL);
3206:src/xeq.c     **** 		else
3207:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3208:src/xeq.c     **** 		set_reg_n_int(arg, x);
3209:src/xeq.c     **** 
3210:src/xeq.c     **** 		xv = extract_value(x, &xs);
3211:src/xeq.c     **** 		if (op == RARG_ISG)
3212:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
3213:src/xeq.c     **** 		else if (op == RARG_DSE)
3214:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
3215:src/xeq.c     **** 		else if (op == RARG_ISE)
3216:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
3217:src/xeq.c     **** 		else // if (op == RARG_DSL)
3218:src/xeq.c     **** 			fin_tst(! (xs != 0 && xv > 0));		// < 0
ARM GAS  /tmp/cciWh9P3.s 			page 67


3219:src/xeq.c     **** 		return;
3220:src/xeq.c     **** 	} else {
3221:src/xeq.c     **** 		decNumber x, i, f, n, u;
3222:src/xeq.c     **** 
3223:src/xeq.c     **** 		getRegister(&x, arg);
3224:src/xeq.c     **** 
3225:src/xeq.c     **** 		// Break the number into the important bits
3226:src/xeq.c     **** 		// nnnnn.fffii
3227:src/xeq.c     **** 		dn_abs(&f, &x);
3228:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
3229:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
3230:src/xeq.c     **** 		if (decNumberIsNegative(&x))
3231:src/xeq.c     **** 			dn_minus(&n, &n);
3232:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
3233:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
3234:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
3235:src/xeq.c     **** 		dn_mul100(&x, &i);
3236:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
3237:src/xeq.c     **** 		if (dn_eq0(&i))
3238:src/xeq.c     **** 			dn_1(&i);
3239:src/xeq.c     **** 
3240:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE) {
3241:src/xeq.c     **** 			dn_add(&n, &n, &i);
3242:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3243:src/xeq.c     **** 			if (op == RARG_ISE)
3244:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
3245:src/xeq.c     **** 			else
3246:src/xeq.c     **** 				fin_tst(dn_ge0(&x));
3247:src/xeq.c     **** 		} else {
3248:src/xeq.c     **** 			dn_subtract(&n, &n, &i);
3249:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3250:src/xeq.c     **** 			if (op == RARG_DSL)
3251:src/xeq.c     **** 				fin_tst(dn_le0(&x));
3252:src/xeq.c     **** 			else
3253:src/xeq.c     **** 				fin_tst(dn_lt0(&x));
3254:src/xeq.c     **** 		}
3255:src/xeq.c     **** 
3256:src/xeq.c     **** 		// Finally rebuild the result
3257:src/xeq.c     **** 		if (decNumberIsNegative(&n)) {
3258:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
3259:src/xeq.c     **** 		} else
3260:src/xeq.c     **** 			dn_add(&x, &n, &u);
3261:src/xeq.c     **** 		setRegister(arg, &x);
3262:src/xeq.c     **** 	}
3263:src/xeq.c     **** }
3264:src/xeq.c     **** 
3265:src/xeq.c     **** 
3266:src/xeq.c     **** /* Shift a real number by 10 to the specified power
3267:src/xeq.c     ****  */
3268:src/xeq.c     **** void op_shift_digit(unsigned int n, enum rarg op) {
3269:src/xeq.c     **** 	decNumber x;
3270:src/xeq.c     **** 	int adjust = n;
3271:src/xeq.c     **** 
3272:src/xeq.c     **** 	if (is_intmode()) {
3273:src/xeq.c     **** 		bad_mode_error();
3274:src/xeq.c     **** 		return;
3275:src/xeq.c     **** 	}
ARM GAS  /tmp/cciWh9P3.s 			page 68


3276:src/xeq.c     **** 	getX(&x);
3277:src/xeq.c     **** 	setlastX();
3278:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
3279:src/xeq.c     **** 		return;
3280:src/xeq.c     **** 	if (op == RARG_SRD)
3281:src/xeq.c     **** 		adjust = -adjust;
3282:src/xeq.c     **** 	x.exponent += adjust;
3283:src/xeq.c     **** 	setX(&x);
3284:src/xeq.c     **** }
3285:src/xeq.c     **** 
3286:src/xeq.c     **** 
3287:src/xeq.c     **** /* Return a pointer to the byte with the indicated flag in it.
3288:src/xeq.c     ****  * also return a byte with the relevant bit mask set up.
3289:src/xeq.c     ****  * Also, handle local flags.
3290:src/xeq.c     ****  */
3291:src/xeq.c     **** static unsigned short int *flag_word(int n, unsigned short int *mask) {
 457              		.loc 1 3291 71 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
3292:src/xeq.c     **** 	unsigned short int *p;
 462              		.loc 1 3292 2 view .LVU141
3293:src/xeq.c     **** 
3294:src/xeq.c     **** 	if (n >= LOCAL_FLAG_BASE) {
 463              		.loc 1 3294 2 view .LVU142
 464              		.loc 1 3294 5 is_stmt 0 view .LVU143
 465 0000 6F28     		cmp	r0, #111
3291:src/xeq.c     **** 	unsigned short int *p;
 466              		.loc 1 3291 71 view .LVU144
 467 0002 10B4     		push	{r4}
 468              		.cfi_def_cfa_offset 4
 469              		.cfi_offset 4, -4
 470              		.loc 1 3294 5 view .LVU145
 471 0004 29DD     		ble	.L42
3295:src/xeq.c     **** 		n -= LOCAL_FLAG_BASE;
 472              		.loc 1 3295 3 is_stmt 1 view .LVU146
 473              		.loc 1 3295 5 is_stmt 0 view .LVU147
 474 0006 7038     		subs	r0, r0, #112
 475              	.LVL39:
3296:src/xeq.c     **** 		if (n > XROM_SYSTEM_FLAG_BASE && XromFlags.xIN) {
 476              		.loc 1 3296 3 is_stmt 1 view .LVU148
 477              		.loc 1 3296 6 is_stmt 0 view .LVU149
 478 0008 0828     		cmp	r0, #8
 479 000a 04DD     		ble	.L43
 480              		.loc 1 3296 33 discriminator 1 view .LVU150
 481 000c 174B     		ldr	r3, .L54
 482 000e 93F90120 		ldrsb	r2, [r3, #1]
 483 0012 002A     		cmp	r2, #0
 484 0014 15DB     		blt	.L44
 485              	.L43:
3297:src/xeq.c     **** 			// XROM special
3298:src/xeq.c     **** 			p = &XromFlagWord;
3299:src/xeq.c     **** 		}
3300:src/xeq.c     **** 		else if (LocalRegs & 1) {
 486              		.loc 1 3300 8 is_stmt 1 view .LVU151
 487              		.loc 1 3300 12 is_stmt 0 view .LVU152
ARM GAS  /tmp/cciWh9P3.s 			page 69


 488 0016 164B     		ldr	r3, .L54+4
 489 0018 1B68     		ldr	r3, [r3]
 490 001a B3F9DE27 		ldrsh	r2, [r3, #2014]
3301:src/xeq.c     **** 			// Odd frame: flags are at end of frame
3302:src/xeq.c     **** 			p = RetStk + LocalRegs + local_levels() - 1;
 491              		.loc 1 3302 44 view .LVU153
 492 001e 154B     		ldr	r3, .L54+8
3300:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 493              		.loc 1 3300 11 view .LVU154
 494 0020 D407     		lsls	r4, r2, #31
 495              		.loc 1 3302 44 view .LVU155
 496 0022 1B68     		ldr	r3, [r3]
3300:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 497              		.loc 1 3300 11 view .LVU156
 498 0024 1ED5     		bpl	.L45
 499              		.loc 1 3302 4 is_stmt 1 view .LVU157
 500              	.LBB1294:
 501              	.LBI1294:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 502              		.loc 1 213 5 view .LVU158
 503              	.LBB1295:
 214:src/xeq.c     **** }
 504              		.loc 1 214 2 view .LVU159
 214:src/xeq.c     **** }
 505              		.loc 1 214 57 is_stmt 0 view .LVU160
 506 0026 002A     		cmp	r2, #0
 507 0028 B8BF     		it	lt
 508 002a 33F81240 		ldrhlt	r4, [r3, r2, lsl #1]
 509              	.LBE1295:
 510              	.LBE1294:
 511              		.loc 1 3302 44 view .LVU161
 512 002e 02F10042 		add	r2, r2, #-2147483648
 513 0032 B4BF     		ite	lt
 514 0034 C4F30B04 		ubfxlt	r4, r4, #0, #12
 515              	.LBB1297:
 516              	.LBB1296:
 517 0038 0024     		movge	r4, #0
 518              	.LBE1296:
 519              	.LBE1297:
 520 003a 013A     		subs	r2, r2, #1
 521 003c 2244     		add	r2, r2, r4
 522              		.loc 1 3302 6 view .LVU162
 523 003e 03EB4203 		add	r3, r3, r2, lsl #1
 524              	.LVL40:
 525              	.L44:
3303:src/xeq.c     **** 		}
3304:src/xeq.c     **** 		else {
3305:src/xeq.c     **** 			// Even frame: Flags are at beginning of frame
3306:src/xeq.c     **** 			p = RetStk + LocalRegs + 1;
3307:src/xeq.c     **** 		}
3308:src/xeq.c     **** 	}
3309:src/xeq.c     **** 	else
3310:src/xeq.c     **** 		p = UserFlags;
3311:src/xeq.c     **** 
3312:src/xeq.c     **** 	if (mask != NULL)
 526              		.loc 1 3312 2 is_stmt 1 view .LVU163
 527              		.loc 1 3312 5 is_stmt 0 view .LVU164
ARM GAS  /tmp/cciWh9P3.s 			page 70


 528 0042 21B1     		cbz	r1, .L47
3313:src/xeq.c     **** 		*mask = 1 << (n & 15);
 529              		.loc 1 3313 3 is_stmt 1 view .LVU165
 530              		.loc 1 3313 19 is_stmt 0 view .LVU166
 531 0044 00F00F04 		and	r4, r0, #15
 532              		.loc 1 3313 13 view .LVU167
 533 0048 0122     		movs	r2, #1
 534 004a A240     		lsls	r2, r2, r4
 535              		.loc 1 3313 9 view .LVU168
 536 004c 0A80     		strh	r2, [r1]	@ movhi
 537              	.L47:
3314:src/xeq.c     **** 	return p + (n >> 4);
 538              		.loc 1 3314 2 is_stmt 1 view .LVU169
 539              		.loc 1 3314 16 is_stmt 0 view .LVU170
 540 004e 0011     		asrs	r0, r0, #4
 541              	.LVL41:
3315:src/xeq.c     **** }
 542              		.loc 1 3315 1 view .LVU171
 543 0050 03EB4000 		add	r0, r3, r0, lsl #1
 544 0054 5DF8044B 		ldr	r4, [sp], #4
 545              		.cfi_remember_state
 546              		.cfi_restore 4
 547              		.cfi_def_cfa_offset 0
 548 0058 7047     		bx	lr
 549              	.LVL42:
 550              	.L42:
 551              		.cfi_restore_state
3310:src/xeq.c     **** 
 552              		.loc 1 3310 3 is_stmt 1 view .LVU172
3310:src/xeq.c     **** 
 553              		.loc 1 3310 7 is_stmt 0 view .LVU173
 554 005a 054B     		ldr	r3, .L54+4
3310:src/xeq.c     **** 
 555              		.loc 1 3310 5 view .LVU174
 556 005c 1B68     		ldr	r3, [r3]
 557 005e 03F5FE63 		add	r3, r3, #2032
 558              	.LVL43:
3310:src/xeq.c     **** 
 559              		.loc 1 3310 5 view .LVU175
 560 0062 EEE7     		b	.L44
 561              	.LVL44:
 562              	.L45:
3306:src/xeq.c     **** 		}
 563              		.loc 1 3306 4 is_stmt 1 view .LVU176
3306:src/xeq.c     **** 		}
 564              		.loc 1 3306 27 is_stmt 0 view .LVU177
 565 0064 0132     		adds	r2, r2, #1
3306:src/xeq.c     **** 		}
 566              		.loc 1 3306 6 view .LVU178
 567 0066 03EB4203 		add	r3, r3, r2, lsl #1
 568              	.LVL45:
3306:src/xeq.c     **** 		}
 569              		.loc 1 3306 6 view .LVU179
 570 006a EAE7     		b	.L44
 571              	.L55:
 572              		.align	2
 573              	.L54:
ARM GAS  /tmp/cciWh9P3.s 			page 71


 574 006c 00000000 		.word	XromParams
 575 0070 00000000 		.word	main_ram
 576 0074 00000000 		.word	RetStk
 577              		.cfi_endproc
 578              	.LFE191:
 580              		.section	.text.set_zero,"ax",%progbits
 581              		.align	1
 582              		.p2align 2,,3
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu fpv4-sp-d16
 588              	set_zero:
 589              	.LVL46:
 590              	.LFB102:
1359:src/xeq.c     **** 	zero_regs(x, 1);
 591              		.loc 1 1359 35 is_stmt 1 view -0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              		@ link register save eliminated.
1360:src/xeq.c     **** }
 596              		.loc 1 1360 2 view .LVU181
 597              	.LBB1298:
 598              	.LBI1298:
1331:src/xeq.c     **** #if 0
 599              		.loc 1 1331 6 view .LVU182
 600              	.LBB1299:
1346:src/xeq.c     **** #endif
 601              		.loc 1 1346 2 view .LVU183
 602              	.LBB1300:
 603              	.LBI1300:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 604              		.loc 1 931 5 view .LVU184
 605              	.LBB1301:
 932:src/xeq.c     **** }
 606              		.loc 1 932 2 view .LVU185
 932:src/xeq.c     **** }
 607              		.loc 1 932 24 is_stmt 0 view .LVU186
 608 0000 074B     		ldr	r3, .L57
 609 0002 1B68     		ldr	r3, [r3]
 610 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 611 0008 44F20102 		movw	r2, #16385
 612 000c 1A40     		ands	r2, r2, r3
 613              	.LBE1301:
 614              	.LBE1300:
1346:src/xeq.c     **** #endif
 615              		.loc 1 1346 2 view .LVU187
 616 000e B2F5804F 		cmp	r2, #16384
 617 0012 0CBF     		ite	eq
 618 0014 1022     		moveq	r2, #16
 619 0016 0822     		movne	r2, #8
 620 0018 0021     		movs	r1, #0
 621 001a FFF7FEBF 		b	xset
 622              	.LVL47:
 623              	.L58:
1346:src/xeq.c     **** #endif
ARM GAS  /tmp/cciWh9P3.s 			page 72


 624              		.loc 1 1346 2 view .LVU188
 625 001e 00BF     		.align	2
 626              	.L57:
 627 0020 00000000 		.word	main_ram
 628              	.LBE1299:
 629              	.LBE1298:
 630              		.cfi_endproc
 631              	.LFE102:
 633              		.section	.text.intResult,"ax",%progbits
 634              		.align	1
 635              		.p2align 2,,3
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
 639              		.fpu fpv4-sp-d16
 641              	intResult:
 642              	.LVL48:
 643              	.LFB232:
3316:src/xeq.c     **** 
3317:src/xeq.c     **** int get_user_flag(int n) {
3318:src/xeq.c     **** 	unsigned short mask;
3319:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
3320:src/xeq.c     **** 
3321:src/xeq.c     **** 	return (*f & mask)? 1 : 0;
3322:src/xeq.c     **** }
3323:src/xeq.c     **** 
3324:src/xeq.c     **** void put_user_flag(int n, int f) {
3325:src/xeq.c     **** 	if (f)	set_user_flag(n);
3326:src/xeq.c     **** 	else	clr_user_flag(n);
3327:src/xeq.c     **** }
3328:src/xeq.c     **** 
3329:src/xeq.c     **** #ifndef set_user_flag
3330:src/xeq.c     **** void set_user_flag(int n) {
3331:src/xeq.c     **** 	unsigned short mask;
3332:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3333:src/xeq.c     **** 
3334:src/xeq.c     **** 	*f |= mask;
3335:src/xeq.c     **** }
3336:src/xeq.c     **** 
3337:src/xeq.c     **** void clr_user_flag(int n) {
3338:src/xeq.c     **** 	unsigned short mask;
3339:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3340:src/xeq.c     **** 
3341:src/xeq.c     **** 	*f &= ~mask;
3342:src/xeq.c     **** }
3343:src/xeq.c     **** #endif
3344:src/xeq.c     **** 
3345:src/xeq.c     **** void cmdflag(unsigned int arg, enum rarg op) {
3346:src/xeq.c     **** 	unsigned short mask;
3347:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
3348:src/xeq.c     **** 	int flg = *f & mask;
3349:src/xeq.c     **** 
3350:src/xeq.c     **** 	switch (op) {
3351:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
3352:src/xeq.c     **** 	case RARG_CF:	flg = 0;			   break;
3353:src/xeq.c     **** 	case RARG_FF:	flg = flg? 0 : 1;		   break;
3354:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 73


3355:src/xeq.c     **** 	case RARG_FS:	fin_tst(flg);			   return;
3356:src/xeq.c     **** 	case RARG_FC:	fin_tst(! flg);			   return;
3357:src/xeq.c     **** 
3358:src/xeq.c     **** 	case RARG_FSC:	fin_tst(flg); flg = 0;		   break;
3359:src/xeq.c     **** 	case RARG_FSS:	fin_tst(flg); flg = 1;		   break;
3360:src/xeq.c     **** 	case RARG_FSF:	fin_tst(flg); flg = flg ? 0 : 1;   break;
3361:src/xeq.c     **** 
3362:src/xeq.c     **** 	case RARG_FCC:	fin_tst(! flg);	flg = 0;	   break;
3363:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
3364:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
3365:src/xeq.c     **** 
3366:src/xeq.c     **** 	default:
3367:src/xeq.c     **** 		return;
3368:src/xeq.c     **** 	}
3369:src/xeq.c     **** 
3370:src/xeq.c     **** 	// And write the value back
3371:src/xeq.c     **** 	if (flg)
3372:src/xeq.c     **** 		*f |= mask;
3373:src/xeq.c     **** 	else
3374:src/xeq.c     **** 		*f &= ~mask;
3375:src/xeq.c     **** 
3376:src/xeq.c     **** 	if ( arg == A_FLAG ) {
3377:src/xeq.c     **** 		dot( BIG_EQ, flg );
3378:src/xeq.c     **** 		finish_display();
3379:src/xeq.c     **** 	}
3380:src/xeq.c     **** }
3381:src/xeq.c     **** 
3382:src/xeq.c     **** /* Reset all flags to off/false
3383:src/xeq.c     ****  */
3384:src/xeq.c     **** void clrflags(enum nilop op) {
3385:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
3386:src/xeq.c     **** 	if (LocalRegs < 0) {
3387:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
3388:src/xeq.c     **** 	}
3389:src/xeq.c     **** }
3390:src/xeq.c     **** 
3391:src/xeq.c     **** 
3392:src/xeq.c     **** /* Integer word size
3393:src/xeq.c     ****  */
3394:src/xeq.c     **** void intws(unsigned int arg, enum rarg op) {
3395:src/xeq.c     **** 	if (is_intmode()) {
3396:src/xeq.c     **** 		int i, ss = stack_size();
3397:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
3398:src/xeq.c     **** 		long long int v;
3399:src/xeq.c     **** 
3400:src/xeq.c     **** 		for (i=0; i<ss; i++) {
3401:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
3402:src/xeq.c     **** 			UState.int_len = arg;
3403:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
3404:src/xeq.c     **** 			UState.int_len = oldlen;
3405:src/xeq.c     **** 		}
3406:src/xeq.c     **** 		v = mask_value(get_reg_n_int(regL_idx));
3407:src/xeq.c     **** 		UState.int_len = arg;
3408:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
3409:src/xeq.c     **** 	} else
3410:src/xeq.c     **** 	    UState.int_len = arg;
3411:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 74


3412:src/xeq.c     **** 
3413:src/xeq.c     **** 
3414:src/xeq.c     **** /* Convert from a real to a fraction
3415:src/xeq.c     ****  */
3416:src/xeq.c     **** 
3417:src/xeq.c     **** void get_maxdenom(decNumber *d) {
3418:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
3419:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
3420:src/xeq.c     **** }
3421:src/xeq.c     **** 
3422:src/xeq.c     **** void op_2frac(enum nilop op) {
3423:src/xeq.c     **** 	decNumber z, n, d, t;
3424:src/xeq.c     **** 
3425:src/xeq.c     **** 	if (UState.intm) {
3426:src/xeq.c     **** 		setX_int(1);
3427:src/xeq.c     **** 		return;
3428:src/xeq.c     **** 	}
3429:src/xeq.c     **** 
3430:src/xeq.c     **** 	getY(&z);			// Stack has been lifted already
3431:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
3432:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
3433:src/xeq.c     **** 	if (State2.runmode) {
3434:src/xeq.c     **** 		dn_divide(&t, &n, &d);
3435:src/xeq.c     **** 		dn_compare(&n, &t, &z);
3436:src/xeq.c     **** 		if (dn_eq0(&n))
3437:src/xeq.c     **** 			DispMsg = "y/x =";
3438:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
3439:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
3440:src/xeq.c     **** 			DispMsg = "y/x \007\344<";
3441:src/xeq.c     **** 		else
3442:src/xeq.c     **** 			DispMsg = "y/x \007\344>";
3443:src/xeq.c     **** #else
3444:src/xeq.c     **** 			DispMsg = "y/x <";
3445:src/xeq.c     **** 		else
3446:src/xeq.c     **** 			DispMsg = "y/x >";
3447:src/xeq.c     **** #endif
3448:src/xeq.c     **** 	}
3449:src/xeq.c     **** }
3450:src/xeq.c     **** 
3451:src/xeq.c     **** void op_fracdenom(enum nilop op) {
3452:src/xeq.c     **** 	int s;
3453:src/xeq.c     **** 	unsigned long long int i;
3454:src/xeq.c     **** 
3455:src/xeq.c     **** 	i = getX_int_sgn(&s);
3456:src/xeq.c     **** 	if (i > 9999)
3457:src/xeq.c     **** 		UState.denom_max = 0;
3458:src/xeq.c     **** 	else if (i != 1)
3459:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
3460:src/xeq.c     **** 	else {
3461:src/xeq.c     **** 		setlastX();
3462:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
3463:src/xeq.c     **** 	}
3464:src/xeq.c     **** }
3465:src/xeq.c     **** 
3466:src/xeq.c     **** 
3467:src/xeq.c     **** /*  Switching from an integer mode to real mode
3468:src/xeq.c     ****  *  We convert the stack and LastX 
ARM GAS  /tmp/cciWh9P3.s 			page 75


3469:src/xeq.c     ****  */
3470:src/xeq.c     **** static const unsigned short int StackRegMask[] = { 0x10f, 0x1ff };
3471:src/xeq.c     **** 
3472:src/xeq.c     **** void op_float(enum nilop op) {
3473:src/xeq.c     **** 
3474:src/xeq.c     **** 	if (is_intmode()) {
3475:src/xeq.c     **** 		int i;
3476:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
3477:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
3478:src/xeq.c     **** 			if (mask & 1) {
3479:src/xeq.c     **** 				// register belongs to stack
3480:src/xeq.c     **** 				register_from_int(i, i, op == OP_FLOAT_XIN);
3481:src/xeq.c     **** 			}
3482:src/xeq.c     **** 			else if (is_dblmode()) {
3483:src/xeq.c     **** 				// expand the other registers which have been left
3484:src/xeq.c     **** 				// in decimal64 format by the integer mode switch
3485:src/xeq.c     **** 				packed128_from_packed(&(get_reg_n(i)->d), Regs + i);
3486:src/xeq.c     **** 			}
3487:src/xeq.c     **** 		}
3488:src/xeq.c     **** 	}
3489:src/xeq.c     **** 	if (op != OP_FLOAT_XIN && op != OP_FLOAT_RCLM) {
3490:src/xeq.c     **** 		UState.fract = 0;
3491:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
3492:src/xeq.c     **** 	}
3493:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3494:src/xeq.c     **** }
3495:src/xeq.c     **** 
3496:src/xeq.c     **** /*  Switch to integer mode.
3497:src/xeq.c     ****  *  We convert the stack and LastX
3498:src/xeq.c     ****  */
3499:src/xeq.c     **** static void switch_to_int(void) {
3500:src/xeq.c     **** 	int i;
3501:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
3502:src/xeq.c     **** 	const int dbl = is_dblmode();
3503:src/xeq.c     **** 
3504:src/xeq.c     **** 	for (i = regK_idx; i >= regX_idx; --i, mask <<= 1) {
3505:src/xeq.c     **** 		if (mask & 0x800) {
3506:src/xeq.c     **** 			// register belongs to stack
3507:src/xeq.c     **** 			int_from_register(i, i);
3508:src/xeq.c     **** 		}
3509:src/xeq.c     **** 		else if (dbl) {
3510:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
3511:src/xeq.c     **** 			packed_from_packed128(Regs + i, &(get_reg_n(i)->d));
3512:src/xeq.c     **** 		}
3513:src/xeq.c     **** 	}
3514:src/xeq.c     **** }
3515:src/xeq.c     **** 
3516:src/xeq.c     **** static void set_base(unsigned int b) {
3517:src/xeq.c     **** 	UState.int_base = b - 1;
3518:src/xeq.c     **** 	if (!is_intmode())
3519:src/xeq.c     **** 		switch_to_int();
3520:src/xeq.c     **** }
3521:src/xeq.c     **** 
3522:src/xeq.c     **** void set_int_base(unsigned int arg, enum rarg op) {
3523:src/xeq.c     **** 	if (arg < 2) {
3524:src/xeq.c     **** 		if (arg == 0)
3525:src/xeq.c     **** 			op_float(OP_FLOAT);
ARM GAS  /tmp/cciWh9P3.s 			page 76


3526:src/xeq.c     **** 		else
3527:src/xeq.c     **** 			op_fract(OP_FRACT);
3528:src/xeq.c     **** 	} else
3529:src/xeq.c     **** 		set_base(arg);
3530:src/xeq.c     **** }
3531:src/xeq.c     **** 
3532:src/xeq.c     **** 
3533:src/xeq.c     **** void op_fract(enum nilop op) {
3534:src/xeq.c     **** 	op_float(OP_FLOAT);
3535:src/xeq.c     **** 	UState.fract = 1;
3536:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
3537:src/xeq.c     **** 		UState.improperfrac = 1;
3538:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
3539:src/xeq.c     **** 		UState.improperfrac = 0;
3540:src/xeq.c     **** }
3541:src/xeq.c     **** 
3542:src/xeq.c     **** #ifdef INCLUDE_USER_MODE
3543:src/xeq.c     **** /* Save and restore user state.
3544:src/xeq.c     ****  */
3545:src/xeq.c     **** void cmdsavem(unsigned int arg, enum rarg op) {
3546:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
3547:src/xeq.c     **** }
3548:src/xeq.c     **** 
3549:src/xeq.c     **** void cmdrestm(unsigned int arg, enum rarg op) {
3550:src/xeq.c     **** 	const int dbl = is_dblmode();
3551:src/xeq.c     **** 	const int intm = is_intmode();
3552:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
3553:src/xeq.c     **** 
3554:src/xeq.c     **** 	// Fix things
3555:src/xeq.c     **** 	if ( UState.contrast == 0 )
3556:src/xeq.c     **** 		UState.contrast = 6;
3557:src/xeq.c     **** 
3558:src/xeq.c     **** 	if (intm != is_intmode()) {
3559:src/xeq.c     **** 		// Switch back to decimal or integer mode
3560:src/xeq.c     **** 		UState.intm = intm;
3561:src/xeq.c     **** 		if (intm)
3562:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
3563:src/xeq.c     **** 		else
3564:src/xeq.c     **** 			switch_to_int();
3565:src/xeq.c     **** 	}
3566:src/xeq.c     **** 	if (! is_intmode() && dbl != is_dblmode()) {
3567:src/xeq.c     **** 		// Switch back to double/single precision
3568:src/xeq.c     **** 		UState.mode_double = dbl;
3569:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
3570:src/xeq.c     **** 	}
3571:src/xeq.c     **** }
3572:src/xeq.c     **** #endif
3573:src/xeq.c     **** 
3574:src/xeq.c     **** /* Process a single digit.
3575:src/xeq.c     ****  */
3576:src/xeq.c     **** #if 0 // unused
3577:src/xeq.c     **** static int is_digit(const char c) {
3578:src/xeq.c     **** 	if (c >= '0' && c <= '9')
3579:src/xeq.c     **** 		return 1;
3580:src/xeq.c     **** 	return 0;
3581:src/xeq.c     **** }
3582:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 77


3583:src/xeq.c     **** static int is_xdigit(const char c) {
3584:src/xeq.c     **** 	if (is_digit(c) || (c >= 'A' && c <= 'F'))
3585:src/xeq.c     **** 		return 1;
3586:src/xeq.c     **** 	return 0;
3587:src/xeq.c     **** }
3588:src/xeq.c     **** #endif
3589:src/xeq.c     **** 
3590:src/xeq.c     **** static void digit(unsigned int c) {
3591:src/xeq.c     **** 	const int intm = is_intmode();
3592:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
3593:src/xeq.c     **** 
3594:src/xeq.c     **** 	if (Cmdline[0] == '-')
3595:src/xeq.c     **** 		lim++;
3596:src/xeq.c     **** 	if (intm) {
3597:src/xeq.c     **** 		if (c >= int_base()) {
3598:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3599:src/xeq.c     **** 			return;
3600:src/xeq.c     **** 		}
3601:src/xeq.c     **** 	} else {
3602:src/xeq.c     **** 		if (c >= 10) {
3603:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3604:src/xeq.c     **** 			return;
3605:src/xeq.c     **** 		}
3606:src/xeq.c     **** 
3607:src/xeq.c     **** 		if (CmdLineEex) {
3608:src/xeq.c     **** 			lim = CMDLINELEN;
3609:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3610:src/xeq.c     **** 			if (CmdLineLength >= lim) {
3611:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
3612:src/xeq.c     **** 
3613:src/xeq.c     **** 				if (*p == '-')
3614:src/xeq.c     **** 					p++;
3615:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
3616:src/xeq.c     **** 					p[0] = p[1];
3617:src/xeq.c     **** 					p++;
3618:src/xeq.c     **** 				}
3619:src/xeq.c     **** 				CmdLineLength--;
3620:src/xeq.c     **** 			}
3621:src/xeq.c     **** #endif
3622:src/xeq.c     **** 		}
3623:src/xeq.c     **** 		else {
3624:src/xeq.c     **** 			lim += CmdLineDot;
3625:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
3626:src/xeq.c     **** 			if (CmdLineDot >= 2) {
3627:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
3628:src/xeq.c     **** 				// Make space for the minus sign
3629:src/xeq.c     **** 				lim = CMDLINELEN - (Cmdline[0] != '-');
3630:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3631:src/xeq.c     **** 				lim += 1 + (find_char(Cmdline, '.')[1] == '.');
3632:src/xeq.c     **** #  else
3633:src/xeq.c     **** 				lim++;
3634:src/xeq.c     **** #  endif
3635:src/xeq.c     **** 			}
3636:src/xeq.c     **** #endif
3637:src/xeq.c     **** 		}
3638:src/xeq.c     **** 	}
3639:src/xeq.c     **** 	if (CmdLineLength >= lim
ARM GAS  /tmp/cciWh9P3.s 			page 78


3640:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
3641:src/xeq.c     **** 		report_warn(ERR_TOO_LONG);
3642:src/xeq.c     **** 		return;
3643:src/xeq.c     **** 	}
3644:src/xeq.c     **** 
3645:src/xeq.c     **** 	if (c >= 10)
3646:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
3647:src/xeq.c     **** 	else {
3648:src/xeq.c     **** 		// Leading zeros in the exponent aren't visible to the user,
3649:src/xeq.c     **** 		// and they're removed automatically if digits are shifted,
3650:src/xeq.c     **** 		// so it's more consistent if they can't be entered, either.
3651:src/xeq.c     **** 		if (c == 0 && CmdLineEex) {
3652:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
3653:src/xeq.c     **** 				return;
3654:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3655:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'D')
3656:src/xeq.c     **** 				return;
3657:src/xeq.c     **** #else
3658:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == '-')
3659:src/xeq.c     **** 				return;
3660:src/xeq.c     **** #endif
3661:src/xeq.c     **** 		}
3662:src/xeq.c     **** 
3663:src/xeq.c     **** 		append_cmdline(c + '0');
3664:src/xeq.c     **** 
3665:src/xeq.c     **** 		if (CmdLineEex)
3666:src/xeq.c     **** 			exponent_adjusted(1);
3667:src/xeq.c     **** 	}
3668:src/xeq.c     **** }
3669:src/xeq.c     **** 
3670:src/xeq.c     **** 
3671:src/xeq.c     **** void set_entry() {
3672:src/xeq.c     **** 	if (!Running && !XromRunning)
3673:src/xeq.c     **** 		State.entryp = 1;
3674:src/xeq.c     **** }
3675:src/xeq.c     **** 
3676:src/xeq.c     **** 
3677:src/xeq.c     **** /* Decode and process the specials.  These are niladic functions and
3678:src/xeq.c     ****  * commands with non-standard stack operation.
3679:src/xeq.c     ****  */
3680:src/xeq.c     **** static void specials(const opcode op) {
3681:src/xeq.c     **** 	int opm = argKIND(op);
3682:src/xeq.c     **** 
3683:src/xeq.c     **** 	switch (opm) {
3684:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
3685:src/xeq.c     **** 	case OP_3:	case OP_4:	case OP_5:
3686:src/xeq.c     **** 	case OP_6:	case OP_7:	case OP_8:
3687:src/xeq.c     **** 	case OP_9:	case OP_A:	case OP_B:
3688:src/xeq.c     **** 	case OP_C:	case OP_D:	case OP_E:
3689:src/xeq.c     **** 	case OP_F:
3690:src/xeq.c     **** 		digit(opm - OP_0);
3691:src/xeq.c     **** 		break;
3692:src/xeq.c     **** 
3693:src/xeq.c     **** 	case OP_DOT:
3694:src/xeq.c     **** 		if (is_intmode())
3695:src/xeq.c     **** 			break;
3696:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
ARM GAS  /tmp/cciWh9P3.s 			page 79


3697:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 13 + CmdLineDot) {
3698:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
3699:src/xeq.c     **** #else
3700:src/xeq.c     **** #  if defined(PRETTY_FRACTION_ENTRY)
3701:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + 2*CmdLineDot) {
3702:src/xeq.c     **** #  else
3703:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + CmdLineDot) {
3704:src/xeq.c     **** #  endif
3705:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '.'
3706:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
3707:src/xeq.c     **** #endif
3708:src/xeq.c     **** 				digit(0);
3709:src/xeq.c     **** 			CmdLineDot++;
3710:src/xeq.c     **** 			append_cmdline('.');
3711:src/xeq.c     **** 		}
3712:src/xeq.c     **** 		break;
3713:src/xeq.c     **** 
3714:src/xeq.c     **** 	case OP_EEX:
3715:src/xeq.c     **** 		if (is_intmode())
3716:src/xeq.c     **** 			break;
3717:src/xeq.c     **** 		else {
3718:src/xeq.c     **** #if INCLUDE_EEX_PI == 2
3719:src/xeq.c     **** 			const int eex_pi = 1;
3720:src/xeq.c     **** #elif INCLUDE_EEX_PI == 1
3721:src/xeq.c     **** 			const int eex_pi = get_user_flag(regL_idx);
3722:src/xeq.c     **** #else
3723:src/xeq.c     **** 			const int eex_pi = 0;
3724:src/xeq.c     **** #endif
3725:src/xeq.c     **** 
3726:src/xeq.c     **** 			if (CmdLineDot == 2) {
3727:src/xeq.c     **** 				if (eex_pi) {
3728:src/xeq.c     **** 					// fraction entered (two dots); execute ENTER and enter pi
3729:src/xeq.c     **** 					if (is_bad_cmdline()) {
3730:src/xeq.c     **** 						if (Running || XromRunning)
3731:src/xeq.c     **** 							report_err(ERR_DOMAIN);
3732:src/xeq.c     **** 						break;
3733:src/xeq.c     **** 					}
3734:src/xeq.c     **** 					process_cmdline();
3735:src/xeq.c     **** 					lift();
3736:src/xeq.c     **** 					copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3737:src/xeq.c     **** 					set_lift();
3738:src/xeq.c     **** 				}
3739:src/xeq.c     **** 				break;
3740:src/xeq.c     **** 			}
3741:src/xeq.c     **** 			if (CmdLineEex || CmdLineLength >= CMDLINELEN)
3742:src/xeq.c     **** 				break;
3743:src/xeq.c     **** 			if (eex_pi && CmdLineLength == 0) {
3744:src/xeq.c     **** 				// empty command line: enter pi
3745:src/xeq.c     **** 				lift_if_enabled();
3746:src/xeq.c     **** 				copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3747:src/xeq.c     **** 				set_lift();
3748:src/xeq.c     **** 				break;
3749:src/xeq.c     **** 			}
3750:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 1)
3751:src/xeq.c     **** 			if (UState.fract)
3752:src/xeq.c     **** 				break;
3753:src/xeq.c     **** #endif
ARM GAS  /tmp/cciWh9P3.s 			page 80


3754:src/xeq.c     **** 			if (CmdLineLength == 0)
3755:src/xeq.c     **** 				digit(1);
3756:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
3757:src/xeq.c     **** 			append_cmdline('E');
3758:src/xeq.c     **** 		}
3759:src/xeq.c     **** 		break;
3760:src/xeq.c     **** 
3761:src/xeq.c     **** 	case OP_CHS:
3762:src/xeq.c     **** 		if (CmdLineLength)
3763:src/xeq.c     **** 			cmdlinechs();
3764:src/xeq.c     **** 		else if (is_intmode()) {
3765:src/xeq.c     **** 			setX_int(intChs(getX_int()));
3766:src/xeq.c     **** 			set_lift();
3767:src/xeq.c     **** 		} else {
3768:src/xeq.c     **** 			decNumber x, r;
3769:src/xeq.c     **** 
3770:src/xeq.c     **** 			getX(&x);
3771:src/xeq.c     **** 			dn_minus(&r, &x);
3772:src/xeq.c     **** 			setX(&r);
3773:src/xeq.c     **** 			set_lift();
3774:src/xeq.c     **** 		}
3775:src/xeq.c     **** 		break;
3776:src/xeq.c     **** 
3777:src/xeq.c     **** 	case OP_CLX:
3778:src/xeq.c     **** 		if (Running)
3779:src/xeq.c     **** 			illegal(op);
3780:src/xeq.c     **** 		else if (CmdLineLength) {
3781:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3782:src/xeq.c     **** 			if (CmdLineEex != 0 && Cmdline[CmdLineLength-1] == 'D') {
3783:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
3784:src/xeq.c     **** 				break;
3785:src/xeq.c     **** 			}
3786:src/xeq.c     **** #endif
3787:src/xeq.c     **** 			CmdLineLength--;
3788:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
3789:src/xeq.c     **** 				CmdLineEex = 0;
3790:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
3791:src/xeq.c     **** 				CmdLineDot--;
3792:src/xeq.c     **** 		} else
3793:src/xeq.c     **** 			clrx(OP_rCLX);
3794:src/xeq.c     **** 		break;
3795:src/xeq.c     **** 
3796:src/xeq.c     **** 	case OP_ENTER:
3797:src/xeq.c     **** 		process_cmdline();
3798:src/xeq.c     **** 		lift();
3799:src/xeq.c     **** 		clr_lift();
3800:src/xeq.c     **** 		break;
3801:src/xeq.c     **** 
3802:src/xeq.c     **** 	case OP_SIGMAPLUS:
3803:src/xeq.c     **** 	case OP_SIGMAMINUS:
3804:src/xeq.c     **** 		if (is_intmode()) {
3805:src/xeq.c     **** 			bad_mode_error();
3806:src/xeq.c     **** 			break;
3807:src/xeq.c     **** 		}
3808:src/xeq.c     **** 		process_cmdline();
3809:src/xeq.c     **** 		clr_lift();
3810:src/xeq.c     **** 		setlastX();
ARM GAS  /tmp/cciWh9P3.s 			page 81


3811:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
3812:src/xeq.c     **** 			sigma_plus();
3813:src/xeq.c     **** 		else
3814:src/xeq.c     **** 			sigma_minus();
3815:src/xeq.c     **** 		sigma_val(OP_sigmaN);
3816:src/xeq.c     **** 		break;
3817:src/xeq.c     **** 
3818:src/xeq.c     **** 	// Conditional tests vs registers....
3819:src/xeq.c     **** 	case OP_Xeq0:	case OP_Xlt0:	case OP_Xgt0:
3820:src/xeq.c     **** 	case OP_Xne0:	case OP_Xle0:	case OP_Xge0:
3821:src/xeq.c     **** 	case OP_Xapx0:
3822:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ZERO, (enum tst_op)(opm - OP_Xeq0));
3823:src/xeq.c     **** 		break;
3824:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
3825:src/xeq.c     **** 		do_ztst(&const_0, &const_0, (enum tst_op)(opm - OP_Zeq0));
3826:src/xeq.c     **** 		break;
3827:src/xeq.c     **** 
3828:src/xeq.c     **** 	case OP_Xeq1:	case OP_Xlt1:	case OP_Xgt1:
3829:src/xeq.c     **** 	case OP_Xne1:	case OP_Xle1:	case OP_Xge1:
3830:src/xeq.c     **** 	case OP_Xapx1:
3831:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ONE, (enum tst_op)(opm - OP_Xeq1));
3832:src/xeq.c     **** 		break;
3833:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
3834:src/xeq.c     **** 		do_ztst(&const_1, &const_0, (enum tst_op)(opm - OP_Zeq1));
3835:src/xeq.c     **** 		break;
3836:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
3837:src/xeq.c     **** 		do_ztst(&const_0, &const_1, (enum tst_op)(opm - OP_Zeqi));
3838:src/xeq.c     **** 		break;
3839:src/xeq.c     **** 
3840:src/xeq.c     **** 	default:
3841:src/xeq.c     **** 		illegal(op);
3842:src/xeq.c     **** 	}
3843:src/xeq.c     **** }
3844:src/xeq.c     **** 
3845:src/xeq.c     **** enum trig_modes get_trig_mode(void) {
3846:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
3847:src/xeq.c     **** 		return TRIG_RAD;
3848:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
3849:src/xeq.c     **** 	return (enum trig_modes) UState.trigmode;
3850:src/xeq.c     **** }
3851:src/xeq.c     **** 
3852:src/xeq.c     **** void op_double(enum nilop op) {
3853:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
3854:src/xeq.c     **** 	const int intm = is_intmode();
3855:src/xeq.c     **** 	int i;
3856:src/xeq.c     **** 
3857:src/xeq.c     **** 	if (dbl != UState.mode_double) {
3858:src/xeq.c     **** 		// Mode switch
3859:src/xeq.c     **** 		if (dbl) {
3860:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
3861:src/xeq.c     **** 				// Need space for double precision stack
3862:src/xeq.c     **** 				cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
3863:src/xeq.c     **** 				if (Error) {
3864:src/xeq.c     **** 					return;
3865:src/xeq.c     **** 				}
3866:src/xeq.c     **** 			}
3867:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 82


3868:src/xeq.c     **** 			UState.mode_double = 1;
3869:src/xeq.c     **** 			if (! intm) {
3870:src/xeq.c     **** 				// Convert X to K to double precision
3871:src/xeq.c     **** 				// Avoid this in integer mode
3872:src/xeq.c     **** 				for (i = 0; i < STACK_SIZE + EXTRA_REG; ++i)
3873:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
3874:src/xeq.c     **** 			}
3875:src/xeq.c     **** 		}
3876:src/xeq.c     **** 		else {
3877:src/xeq.c     **** 			if (! intm) {
3878:src/xeq.c     **** 				// Convert X to K to single precision
3879:src/xeq.c     **** 				// Avoid this in integer mode
3880:src/xeq.c     **** 				for (i = STACK_SIZE + EXTRA_REG - 1; i >= 0; --i)
3881:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
3882:src/xeq.c     **** 			}
3883:src/xeq.c     **** 			UState.mode_double = 0;
3884:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
3885:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
3886:src/xeq.c     **** 		}
3887:src/xeq.c     **** 	}
3888:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3889:src/xeq.c     **** 	if (intm) {
3890:src/xeq.c     **** 		// Do the necessary conversions from integer mode
3891:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
3892:src/xeq.c     **** 	}
3893:src/xeq.c     **** }
3894:src/xeq.c     **** 
3895:src/xeq.c     **** void cmdpause(unsigned int arg, enum rarg op) {
3896:src/xeq.c     **** 	display();
3897:src/xeq.c     **** #ifndef CONSOLE
3898:src/xeq.c     **** 	// decremented in the low level heartbeat
3899:src/xeq.c     **** 	Pause = arg;
3900:src/xeq.c     **** 	GoFast = (arg == 0);
3901:src/xeq.c     **** #elif (defined) DM42
3902:src/xeq.c     **** 	start_pause(arg);
3903:src/xeq.c     **** #else	
3904:src/xeq.c     **** #if defined(WIN32) && !defined(__GNUC__)
3905:src/xeq.c     **** #pragma warning(disable:4996)
3906:src/xeq.c     **** 	sleep(arg/10);
3907:src/xeq.c     **** #else
3908:src/xeq.c     **** 	usleep(arg * 100000);
3909:src/xeq.c     **** #endif
3910:src/xeq.c     **** #endif
3911:src/xeq.c     **** }
3912:src/xeq.c     **** 
3913:src/xeq.c     **** 
3914:src/xeq.c     **** 
3915:src/xeq.c     **** void op_setspeed(enum nilop op) {
3916:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
3917:src/xeq.c     **** 	update_speed(1);
3918:src/xeq.c     **** }
3919:src/xeq.c     **** 
3920:src/xeq.c     **** 
3921:src/xeq.c     **** void op_prompt(enum nilop op) {
3922:src/xeq.c     **** 	set_running_off();
3923:src/xeq.c     **** 	alpha_view_common(regX_idx);
3924:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 83


3925:src/xeq.c     **** 
3926:src/xeq.c     **** /* Test if a number is an integer or fractional */
3927:src/xeq.c     **** /* Special numbers are neither */
3928:src/xeq.c     **** void XisInt(enum nilop op) {
3929:src/xeq.c     **** 	decNumber x;
3930:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
3931:src/xeq.c     **** 	if ( is_intmode() )
3932:src/xeq.c     **** 		result = op_int;
3933:src/xeq.c     **** 	else if (decNumberIsSpecial(getX(&x)))
3934:src/xeq.c     **** 		result = 0;
3935:src/xeq.c     **** 	else
3936:src/xeq.c     **** 	        result = (is_int(&x) == op_int);
3937:src/xeq.c     **** 	fin_tst(result);
3938:src/xeq.c     **** }
3939:src/xeq.c     **** 
3940:src/xeq.c     **** /* Test if a number is an even or odd integer */
3941:src/xeq.c     **** /* fractional or special values are neither even nor odd */
3942:src/xeq.c     **** void XisEvenOrOdd(enum nilop op) {
3943:src/xeq.c     **** 	decNumber x;
3944:src/xeq.c     **** 	int odd = (op == OP_XisODD);
3945:src/xeq.c     **** 
3946:src/xeq.c     **** 	if (is_intmode()) {
3947:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
3948:src/xeq.c     **** 	} else {
3949:src/xeq.c     **** 		fin_tst(is_even(getX(&x)) == !odd);
3950:src/xeq.c     **** 	}
3951:src/xeq.c     **** }
3952:src/xeq.c     **** 
3953:src/xeq.c     **** 
3954:src/xeq.c     **** /* Test if a number is prime */
3955:src/xeq.c     **** void XisPrime(enum nilop op) {
3956:src/xeq.c     **** 	unsigned long long int i;
3957:src/xeq.c     **** 	int sgn;
3958:src/xeq.c     **** 
3959:src/xeq.c     **** 	i = getX_int_sgn(&sgn);
3960:src/xeq.c     **** 	if (!is_intmode()) {
3961:src/xeq.c     **** 		decNumber x;
3962:src/xeq.c     **** 
3963:src/xeq.c     **** 		getX(&x);
3964:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
3965:src/xeq.c     **** 			sgn = 1; // not prime
3966:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
3967:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
3968:src/xeq.c     **** 			i = 0xFFFFFFFFFFFFFFFFull;
3969:src/xeq.c     **** 	}
3970:src/xeq.c     **** 	fin_tst(sgn == 0 && isPrime(i));
3971:src/xeq.c     **** }
3972:src/xeq.c     **** 
3973:src/xeq.c     **** /* Test is a number is infinite.
3974:src/xeq.c     ****  */
3975:src/xeq.c     **** void isInfinite(enum nilop op) {
3976:src/xeq.c     **** 	decNumber x;
3977:src/xeq.c     **** 
3978:src/xeq.c     **** 	getX(&x);
3979:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
3980:src/xeq.c     **** }
3981:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 84


3982:src/xeq.c     **** /* Test for NaN.
3983:src/xeq.c     ****  * this could be done by testing x != x, but having a special command
3984:src/xeq.c     ****  * for it reads easier.
3985:src/xeq.c     ****  */
3986:src/xeq.c     **** void isNan(enum nilop op) {
3987:src/xeq.c     **** 	decNumber x;
3988:src/xeq.c     **** 
3989:src/xeq.c     **** 	getX(&x);
3990:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
3991:src/xeq.c     **** }
3992:src/xeq.c     **** 
3993:src/xeq.c     **** void isSpecial(enum nilop op) {
3994:src/xeq.c     **** 	decNumber x;
3995:src/xeq.c     **** 
3996:src/xeq.c     **** 	getX(&x);
3997:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
3998:src/xeq.c     **** }
3999:src/xeq.c     **** 
4000:src/xeq.c     **** void op_entryp(enum nilop op) {
4001:src/xeq.c     **** 	fin_tst(State.entryp);
4002:src/xeq.c     **** }
4003:src/xeq.c     **** 
4004:src/xeq.c     **** /* Bulk register operations */
4005:src/xeq.c     **** int reg_decode(int *s, int *n, int *d, int flash) {
4006:src/xeq.c     **** 	decNumber x, y;
4007:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
4008:src/xeq.c     **** 
4009:src/xeq.c     **** 	if (is_intmode()) {
4010:src/xeq.c     **** 		bad_mode_error();
4011:src/xeq.c     **** 		return 1;
4012:src/xeq.c     **** 	}
4013:src/xeq.c     **** 	getX(&x);			// sss.nnddd~
4014:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
4015:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
4016:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
4017:src/xeq.c     **** 
4018:src/xeq.c     **** 	if (rsrc < 0) {
4019:src/xeq.c     **** 		if (!flash)
4020:src/xeq.c     **** 			goto range_error;
4021:src/xeq.c     **** 		rsrc = -rsrc;
4022:src/xeq.c     **** 	}
4023:src/xeq.c     **** 	else
4024:src/xeq.c     **** 		flash = 0;
4025:src/xeq.c     **** 
4026:src/xeq.c     **** 	rdest = rsrc % 1000;		// ddd
4027:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
4028:src/xeq.c     **** 	num = rsrc % 100;		// nn
4029:src/xeq.c     **** 	rsrc /= 100;			// sss
4030:src/xeq.c     **** 
4031:src/xeq.c     **** 	mx_src = flash ? BackupFlash._numregs
4032:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
4033:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
4034:src/xeq.c     **** 	       : global_regs();
4035:src/xeq.c     **** 	if (rsrc >= mx_src)
4036:src/xeq.c     **** 		goto range_error;
4037:src/xeq.c     **** 
4038:src/xeq.c     **** 	if (d != NULL) {
ARM GAS  /tmp/cciWh9P3.s 			page 85


4039:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
4040:src/xeq.c     **** 
4041:src/xeq.c     **** 		if (num == 0) {
4042:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
4043:src/xeq.c     **** 			if (flash || (rsrc >= LOCAL_REG_BASE) != (rdest >= LOCAL_REG_BASE))
4044:src/xeq.c     **** 				// source & destination in different memory areas
4045:src/xeq.c     **** 				num = mx_dest < mx_src ? mx_dest : mx_src;
4046:src/xeq.c     **** 			else {
4047:src/xeq.c     **** 				if (rsrc > rdest) {
4048:src/xeq.c     **** 					num = mx_src - rsrc;
4049:src/xeq.c     **** 					q = rsrc - rdest;
4050:src/xeq.c     **** 				}
4051:src/xeq.c     **** 				else {
4052:src/xeq.c     **** 					num = mx_dest - rdest;
4053:src/xeq.c     **** 					q = rdest - rsrc;
4054:src/xeq.c     **** 				}
4055:src/xeq.c     **** 				if (num > q)
4056:src/xeq.c     **** 					num = q;
4057:src/xeq.c     **** 			}
4058:src/xeq.c     **** 		}
4059:src/xeq.c     **** 		if (rdest >= LOCAL_REG_BASE)
4060:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
4061:src/xeq.c     **** 		if (rdest + num > mx_dest)
4062:src/xeq.c     **** 			goto range_error;
4063:src/xeq.c     **** 		// Set pointer
4064:src/xeq.c     **** 		*d = rdest;
4065:src/xeq.c     **** 	}
4066:src/xeq.c     **** 	else {
4067:src/xeq.c     **** 		if (num == 0) {
4068:src/xeq.c     **** 			num = mx_src - rsrc;
4069:src/xeq.c     **** 		}
4070:src/xeq.c     **** 	}
4071:src/xeq.c     **** 	if (rsrc + num > mx_src)
4072:src/xeq.c     **** 		goto range_error;
4073:src/xeq.c     **** 
4074:src/xeq.c     **** 	// Now point to the correct source register
4075:src/xeq.c     **** 	*s = flash ? FLASH_REG_BASE + rsrc : rsrc;
4076:src/xeq.c     **** 	*n = num;
4077:src/xeq.c     **** 
4078:src/xeq.c     **** 	return 0;
4079:src/xeq.c     **** 
4080:src/xeq.c     **** range_error:
4081:src/xeq.c     **** 	report_err(ERR_RANGE);
4082:src/xeq.c     **** 	return 1;
4083:src/xeq.c     **** }
4084:src/xeq.c     **** 
4085:src/xeq.c     **** void op_regcopy(enum nilop op) {
4086:src/xeq.c     **** 	int s, n, d;
4087:src/xeq.c     **** 
4088:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 1))
4089:src/xeq.c     **** 		return;
4090:src/xeq.c     **** 	move_regs(get_reg_n(d), get_reg_n(s), n);
4091:src/xeq.c     **** }
4092:src/xeq.c     **** 
4093:src/xeq.c     **** void op_regswap(enum nilop op) {
4094:src/xeq.c     **** 	int s, n, d, i;
4095:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 86


4096:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 0) || s == d)
4097:src/xeq.c     **** 		return;
4098:src/xeq.c     **** 	else {
4099:src/xeq.c     **** 		if ((s > d && d + n > s) || (d > s && s + n > d))
4100:src/xeq.c     **** 			report_err(ERR_RANGE);
4101:src/xeq.c     **** 		else {
4102:src/xeq.c     **** 			for (i = 0; i < n; i++)
4103:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
4104:src/xeq.c     **** 		}
4105:src/xeq.c     **** 	}
4106:src/xeq.c     **** }
4107:src/xeq.c     **** 
4108:src/xeq.c     **** void op_regclr(enum nilop op) {
4109:src/xeq.c     **** 	int s, n;
4110:src/xeq.c     **** 
4111:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0))
4112:src/xeq.c     **** 		return;
4113:src/xeq.c     **** 	zero_regs(get_reg_n(s), n);
4114:src/xeq.c     **** }
4115:src/xeq.c     **** 
4116:src/xeq.c     **** void op_regsort(enum nilop op) {
4117:src/xeq.c     **** 	int s, n;
4118:src/xeq.c     **** 	decNumber pivot, a;
4119:src/xeq.c     **** 	int beg[10], end[10], i;
4120:src/xeq.c     **** 
4121:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0) || n == 1)
4122:src/xeq.c     **** 		return;
4123:src/xeq.c     **** 
4124:src/xeq.c     **** 	/* Non-recursive quicksort */
4125:src/xeq.c     **** 	beg[0] = 0;
4126:src/xeq.c     **** 	end[0] = n;
4127:src/xeq.c     **** 	i = 0;
4128:src/xeq.c     **** 	while (i>=0) {
4129:src/xeq.c     **** 		int L = beg[i];
4130:src/xeq.c     **** 		int R = end[i] - 1;
4131:src/xeq.c     **** 		if (L<R) {
4132:src/xeq.c     **** 			const int pvt = s + L;
4133:src/xeq.c     **** 			getRegister(&pivot, pvt);
4134:src/xeq.c     **** 			while (L<R) {
4135:src/xeq.c     **** 				while (L<R) {
4136:src/xeq.c     **** 					getRegister(&a, s + R);
4137:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
4138:src/xeq.c     **** 						break;
4139:src/xeq.c     **** 					R--;
4140:src/xeq.c     **** 				}
4141:src/xeq.c     **** 				if (L<R)
4142:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
4143:src/xeq.c     **** 				while (L<R) {
4144:src/xeq.c     **** 					getRegister(&a, s + L);
4145:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
4146:src/xeq.c     **** 						break;
4147:src/xeq.c     **** 					L++;
4148:src/xeq.c     **** 				}
4149:src/xeq.c     **** 				if (L<R)
4150:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
4151:src/xeq.c     **** 			}
4152:src/xeq.c     **** 			setRegister(s + L, &pivot);
ARM GAS  /tmp/cciWh9P3.s 			page 87


4153:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
4154:src/xeq.c     **** 				beg[i+1] = beg[i];
4155:src/xeq.c     **** 				end[i+1] = L;
4156:src/xeq.c     **** 				beg[i] = L+1;
4157:src/xeq.c     **** 			} else {
4158:src/xeq.c     **** 				beg[i+1] = L+1;
4159:src/xeq.c     **** 				end[i+1] = end[i];
4160:src/xeq.c     **** 				end[i] = L;
4161:src/xeq.c     **** 			}
4162:src/xeq.c     **** 			i++;
4163:src/xeq.c     **** 		} else
4164:src/xeq.c     **** 			i--;
4165:src/xeq.c     **** 	}
4166:src/xeq.c     **** }
4167:src/xeq.c     **** 
4168:src/xeq.c     **** 
4169:src/xeq.c     **** 
4170:src/xeq.c     **** /* Print a single program step nicely.
4171:src/xeq.c     ****  */
4172:src/xeq.c     **** static void print_step(const opcode op) {
4173:src/xeq.c     **** 	char buf[16];
4174:src/xeq.c     **** 	const unsigned int pc = state_pc();
4175:src/xeq.c     **** 	char *p = TraceBuffer;
4176:src/xeq.c     **** 
4177:src/xeq.c     **** 	if (isXROM(pc)) {
4178:src/xeq.c     **** 		*p++ = 'x';
4179:src/xeq.c     **** 	} else if (isLIB(pc)) {
4180:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
4181:src/xeq.c     **** 		*p++ = ' ';
4182:src/xeq.c     **** 	}
4183:src/xeq.c     **** 	if (pc == 0)
4184:src/xeq.c     **** 		scopy(p, "000:");
4185:src/xeq.c     **** 	else {
4186:src/xeq.c     **** 		p = num_arg_0(p, user_pc(pc), 3);
4187:src/xeq.c     **** 		*p++ = ':';
4188:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
4189:src/xeq.c     **** 		if (*p == '?')
4190:src/xeq.c     **** 			*p = '\0';
4191:src/xeq.c     **** 	}
4192:src/xeq.c     **** 	State2.disp_small = 1;
4193:src/xeq.c     **** 	DispMsg = TraceBuffer;
4194:src/xeq.c     **** }
4195:src/xeq.c     **** 
4196:src/xeq.c     **** 
4197:src/xeq.c     **** /* When stuff gets done, there are some bits of state that need
4198:src/xeq.c     ****  * to be reset -- SHOW, ->base change the display mode until something
4199:src/xeq.c     ****  * happens.  This should be called on that something.
4200:src/xeq.c     ****  */
4201:src/xeq.c     **** void reset_volatile_state(void) {
4202:src/xeq.c     **** 	// extern int IntMaxWindow;
4203:src/xeq.c     **** 	// IntMaxWindow = 0;
4204:src/xeq.c     **** 	State2.window = 0;
4205:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
4206:src/xeq.c     **** }
4207:src/xeq.c     **** 
4208:src/xeq.c     **** 
4209:src/xeq.c     **** /*
ARM GAS  /tmp/cciWh9P3.s 			page 88


4210:src/xeq.c     ****  *  Called by any long running function
4211:src/xeq.c     ****  */
4212:src/xeq.c     **** void busy(void)
4213:src/xeq.c     **** {
4214:src/xeq.c     **** 	/*
4215:src/xeq.c     **** 	 *  Serve the hardware watch dog
4216:src/xeq.c     **** 	 */
4217:src/xeq.c     **** 	watchdog();
4218:src/xeq.c     **** 
4219:src/xeq.c     **** 	/*
4220:src/xeq.c     **** 	 *  Increase the speed
4221:src/xeq.c     **** 	 */
4222:src/xeq.c     **** 	update_speed(1);
4223:src/xeq.c     **** 
4224:src/xeq.c     **** 	/*
4225:src/xeq.c     **** 	 *  Indicate busy state to the user
4226:src/xeq.c     **** 	 */
4227:src/xeq.c     **** 	if (!Busy && !Running) {
4228:src/xeq.c     **** 		Busy = 1;
4229:src/xeq.c     **** 		message("Wait...", NULL);
4230:src/xeq.c     **** 	}
4231:src/xeq.c     **** }
4232:src/xeq.c     **** 
4233:src/xeq.c     **** /***************************************************************************
4234:src/xeq.c     ****  * Function dispatchers.
4235:src/xeq.c     ****  */
4236:src/xeq.c     **** 
4237:src/xeq.c     **** /*
4238:src/xeq.c     ****  *  Check for a call into XROM space.
4239:src/xeq.c     ****  *  Fix the pointer alignment on the go.
4240:src/xeq.c     ****  */
4241:src/xeq.c     **** #ifdef REALBUILD
4242:src/xeq.c     **** typedef unsigned long uintptr_t;
4243:src/xeq.c     **** #else
4244:src/xeq.c     **** #include <stdint.h>
4245:src/xeq.c     **** #endif
4246:src/xeq.c     **** 
4247:src/xeq.c     **** static const s_opcode *check_for_xrom_address(void *fp)
4248:src/xeq.c     **** {
4249:src/xeq.c     **** 	const s_opcode *xp = (const s_opcode *) ((uintptr_t ) fp & ~1);
4250:src/xeq.c     **** 	if (xp < xrom)
4251:src/xeq.c     **** 		return NULL;
4252:src/xeq.c     **** #ifndef REALBUILD
4253:src/xeq.c     **** 	// On the device, XROM is at the end so this is not needed
4254:src/xeq.c     **** 	if (xp >= xrom + xrom_size)
4255:src/xeq.c     **** 		return NULL;
4256:src/xeq.c     **** #endif
4257:src/xeq.c     **** 	return xp;
4258:src/xeq.c     **** }
4259:src/xeq.c     **** 
4260:src/xeq.c     **** /*
4261:src/xeq.c     ****  *  Check for a call into XROM space and dispatch it.
4262:src/xeq.c     ****  */
4263:src/xeq.c     **** static int dispatch_xrom(void *fp)
4264:src/xeq.c     **** {
4265:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
4266:src/xeq.c     **** 	if (xp == NULL)
ARM GAS  /tmp/cciWh9P3.s 			page 89


4267:src/xeq.c     **** 		return 0;
4268:src/xeq.c     **** 	// set_lift();
4269:src/xeq.c     **** 	UserLocalRegs = LocalRegs;
4270:src/xeq.c     **** 	XromRunning = 1;
4271:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
4272:src/xeq.c     **** 	xeq_xrom();
4273:src/xeq.c     **** 	return 1;
4274:src/xeq.c     **** }
4275:src/xeq.c     **** 
4276:src/xeq.c     **** /*
4277:src/xeq.c     ****  *  Return an integer result from a decimal value, setting flags properly
4278:src/xeq.c     ****  */
4279:src/xeq.c     **** static long long int intResult(decNumber *r) {
 644              		.loc 1 4279 46 is_stmt 1 view -0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 80
 647              		@ frame_needed = 0, uses_anonymous_args = 0
4280:src/xeq.c     **** 	unsigned long long int i;
 648              		.loc 1 4280 2 view .LVU190
4281:src/xeq.c     **** 	int s;
 649              		.loc 1 4281 2 view .LVU191
4282:src/xeq.c     **** 	decNumber ri, t;
 650              		.loc 1 4282 2 view .LVU192
4283:src/xeq.c     **** 
4284:src/xeq.c     **** 	decNumberRoundDigits(&t, r, 25, DEC_ROUND_HALF_EVEN);
 651              		.loc 1 4284 2 view .LVU193
4279:src/xeq.c     **** 	unsigned long long int i;
 652              		.loc 1 4279 46 is_stmt 0 view .LVU194
 653 0000 30B5     		push	{r4, r5, lr}
 654              		.cfi_def_cfa_offset 12
 655              		.cfi_offset 4, -12
 656              		.cfi_offset 5, -8
 657              		.cfi_offset 14, -4
 658 0002 95B0     		sub	sp, sp, #84
 659              		.cfi_def_cfa_offset 96
 660              		.loc 1 4284 2 view .LVU195
 661 0004 0323     		movs	r3, #3
 662 0006 1922     		movs	r2, #25
4279:src/xeq.c     **** 	unsigned long long int i;
 663              		.loc 1 4279 46 view .LVU196
 664 0008 0146     		mov	r1, r0
 665              		.loc 1 4284 2 view .LVU197
 666 000a 0BA8     		add	r0, sp, #44
 667              	.LVL49:
 668              		.loc 1 4284 2 view .LVU198
 669 000c FFF7FEFF 		bl	decNumberRoundDigits
 670              	.LVL50:
4285:src/xeq.c     **** 	decNumberTrunc(&ri, &t);
 671              		.loc 1 4285 2 is_stmt 1 view .LVU199
 672 0010 0BA9     		add	r1, sp, #44
 673 0012 02A8     		add	r0, sp, #8
 674 0014 FFF7FEFF 		bl	decNumberTrunc
 675              	.LVL51:
4286:src/xeq.c     **** 	set_carry(dn_eq(&ri, &t) ? 0 : 1);
 676              		.loc 1 4286 2 view .LVU200
 677              		.loc 1 4286 12 is_stmt 0 view .LVU201
 678 0018 0BA9     		add	r1, sp, #44
ARM GAS  /tmp/cciWh9P3.s 			page 90


 679 001a 02A8     		add	r0, sp, #8
 680 001c FFF7FEFF 		bl	dn_eq
 681              	.LVL52:
 682              		.loc 1 4286 2 view .LVU202
 683 0020 B0FA80F0 		clz	r0, r0
 684 0024 4009     		lsrs	r0, r0, #5
 685 0026 FFF7FEFF 		bl	set_carry
 686              	.LVL53:
4287:src/xeq.c     **** 
4288:src/xeq.c     **** 	if (decNumberIsNaN(&t)) {
 687              		.loc 1 4288 2 is_stmt 1 view .LVU203
 688              		.loc 1 4288 6 is_stmt 0 view .LVU204
 689 002a 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 690              		.loc 1 4288 5 view .LVU205
 691 002e 13F0300F 		tst	r3, #48
 692 0032 22D1     		bne	.L67
4289:src/xeq.c     **** 		report_err(ERR_DOMAIN);
4290:src/xeq.c     **** 		return 0;
4291:src/xeq.c     **** 	}
4292:src/xeq.c     **** 	if (decNumberIsSpecial(&t)) {
 693              		.loc 1 4292 2 is_stmt 1 view .LVU206
 694              		.loc 1 4292 5 is_stmt 0 view .LVU207
 695 0034 13F0700F 		tst	r3, #112
 696 0038 18D1     		bne	.L68
4293:src/xeq.c     **** 		set_overflow(1);
4294:src/xeq.c     **** 		return 0;
4295:src/xeq.c     **** 	}
4296:src/xeq.c     **** 	i = dn_to_ull(&ri, &s);
 697              		.loc 1 4296 2 is_stmt 1 view .LVU208
 698              		.loc 1 4296 6 is_stmt 0 view .LVU209
 699 003a 02A8     		add	r0, sp, #8
 700 003c 01A9     		add	r1, sp, #4
 701 003e FFF7FEFF 		bl	dn_to_ull
 702              	.LVL54:
 703 0042 0C46     		mov	r4, r1
4297:src/xeq.c     **** 	dn_abs(&t, &t);
 704              		.loc 1 4297 2 view .LVU210
 705 0044 0BA9     		add	r1, sp, #44
4296:src/xeq.c     **** 	dn_abs(&t, &t);
 706              		.loc 1 4296 6 view .LVU211
 707 0046 0546     		mov	r5, r0
 708              	.LVL55:
 709              		.loc 1 4297 2 is_stmt 1 view .LVU212
 710 0048 0846     		mov	r0, r1
 711              	.LVL56:
 712              		.loc 1 4297 2 is_stmt 0 view .LVU213
 713 004a FFF7FEFF 		bl	dn_abs
 714              	.LVL57:
4298:src/xeq.c     **** 	set_overflow(check_overflow(i) || dn_ge(&t, &const_2pow64));
 715              		.loc 1 4298 2 is_stmt 1 view .LVU214
 716              		.loc 1 4298 15 is_stmt 0 view .LVU215
 717 004e 2846     		mov	r0, r5
 718 0050 2146     		mov	r1, r4
 719 0052 FFF7FEFF 		bl	check_overflow
 720              	.LVL58:
 721              		.loc 1 4298 2 view .LVU216
 722 0056 E8B1     		cbz	r0, .L69
ARM GAS  /tmp/cciWh9P3.s 			page 91


 723 0058 0120     		movs	r0, #1
 724              	.L63:
 725              		.loc 1 4298 2 discriminator 6 view .LVU217
 726 005a FFF7FEFF 		bl	set_overflow
 727              	.LVL59:
4299:src/xeq.c     **** 	return build_value(i, s);
 728              		.loc 1 4299 2 is_stmt 1 discriminator 6 view .LVU218
 729              		.loc 1 4299 9 is_stmt 0 discriminator 6 view .LVU219
 730 005e 019A     		ldr	r2, [sp, #4]
 731 0060 2846     		mov	r0, r5
 732 0062 2146     		mov	r1, r4
 733 0064 FFF7FEFF 		bl	build_value
 734              	.LVL60:
4300:src/xeq.c     **** }
 735              		.loc 1 4300 1 discriminator 6 view .LVU220
 736 0068 15B0     		add	sp, sp, #84
 737              		.cfi_remember_state
 738              		.cfi_def_cfa_offset 12
 739              		@ sp needed
 740 006a 30BD     		pop	{r4, r5, pc}
 741              	.LVL61:
 742              	.L68:
 743              		.cfi_restore_state
4293:src/xeq.c     **** 		return 0;
 744              		.loc 1 4293 3 is_stmt 1 view .LVU221
 745 006c 0120     		movs	r0, #1
 746 006e FFF7FEFF 		bl	set_overflow
 747              	.LVL62:
4294:src/xeq.c     **** 	}
 748              		.loc 1 4294 3 view .LVU222
4294:src/xeq.c     **** 	}
 749              		.loc 1 4294 10 is_stmt 0 view .LVU223
 750 0072 0020     		movs	r0, #0
 751 0074 0146     		mov	r1, r0
 752              		.loc 1 4300 1 view .LVU224
 753 0076 15B0     		add	sp, sp, #84
 754              		.cfi_remember_state
 755              		.cfi_def_cfa_offset 12
 756              		@ sp needed
 757 0078 30BD     		pop	{r4, r5, pc}
 758              	.L67:
 759              		.cfi_restore_state
4289:src/xeq.c     **** 		return 0;
 760              		.loc 1 4289 3 is_stmt 1 view .LVU225
 761              	.LVL63:
 762              	.LBB1306:
 763              	.LBI1306:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 764              		.loc 1 536 5 view .LVU226
 765              	.LBB1307:
 537:src/xeq.c     **** 		Error = e;
 766              		.loc 1 537 2 view .LVU227
 537:src/xeq.c     **** 		Error = e;
 767              		.loc 1 537 12 is_stmt 0 view .LVU228
 768 007a 0A4B     		ldr	r3, .L70
 537:src/xeq.c     **** 		Error = e;
 769              		.loc 1 537 5 view .LVU229
ARM GAS  /tmp/cciWh9P3.s 			page 92


 770 007c 1A68     		ldr	r2, [r3]
 771 007e 2AB9     		cbnz	r2, .L64
 772              	.LVL64:
 773              	.LBB1308:
 774              	.LBI1308:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 775              		.loc 1 536 5 is_stmt 1 view .LVU230
 776              	.LBB1309:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 777              		.loc 1 538 3 view .LVU231
 778              	.LBE1309:
 779              	.LBE1308:
 780              	.LBE1307:
 781              	.LBE1306:
4290:src/xeq.c     **** 	}
 782              		.loc 1 4290 10 is_stmt 0 view .LVU232
 783 0080 0020     		movs	r0, #0
 784              	.LBB1316:
 785              	.LBB1314:
 786              	.LBB1312:
 787              	.LBB1310:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 788              		.loc 1 538 9 view .LVU233
 789 0082 0122     		movs	r2, #1
 790              	.LBE1310:
 791              	.LBE1312:
 792              	.LBE1314:
 793              	.LBE1316:
4290:src/xeq.c     **** 	}
 794              		.loc 1 4290 10 view .LVU234
 795 0084 0146     		mov	r1, r0
 796              	.LBB1317:
 797              	.LBB1315:
 798              	.LBB1313:
 799              	.LBB1311:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 800              		.loc 1 538 9 view .LVU235
 801 0086 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 802              		.loc 1 539 3 is_stmt 1 view .LVU236
 803              	.LBE1311:
 804              	.LBE1313:
 805              	.LBE1315:
 806              	.LBE1317:
 807              		.loc 1 4300 1 is_stmt 0 view .LVU237
 808 0088 15B0     		add	sp, sp, #84
 809              		.cfi_remember_state
 810              		.cfi_def_cfa_offset 12
 811              		@ sp needed
 812 008a 30BD     		pop	{r4, r5, pc}
 813              	.LVL65:
 814              	.L64:
 815              		.cfi_restore_state
4290:src/xeq.c     **** 	}
 816              		.loc 1 4290 10 view .LVU238
 817 008c 0020     		movs	r0, #0
 818 008e 0146     		mov	r1, r0
ARM GAS  /tmp/cciWh9P3.s 			page 93


 819              	.LVL66:
 820              		.loc 1 4300 1 view .LVU239
 821 0090 15B0     		add	sp, sp, #84
 822              		.cfi_remember_state
 823              		.cfi_def_cfa_offset 12
 824              		@ sp needed
 825 0092 30BD     		pop	{r4, r5, pc}
 826              	.LVL67:
 827              	.L69:
 828              		.cfi_restore_state
4298:src/xeq.c     **** 	return build_value(i, s);
 829              		.loc 1 4298 36 discriminator 2 view .LVU240
 830 0094 0449     		ldr	r1, .L70+4
 831 0096 0BA8     		add	r0, sp, #44
 832 0098 FFF7FEFF 		bl	dn_lt
 833              	.LVL68:
4298:src/xeq.c     **** 	return build_value(i, s);
 834              		.loc 1 4298 2 discriminator 2 view .LVU241
 835 009c B0FA80F0 		clz	r0, r0
 836 00a0 4009     		lsrs	r0, r0, #5
 837 00a2 DAE7     		b	.L63
 838              	.L71:
 839              		.align	2
 840              	.L70:
 841 00a4 00000000 		.word	Error
 842 00a8 00000000 		.word	const_2pow64
 843              		.cfi_endproc
 844              	.LFE232:
 846              		.section	.text.check_stack_overlap,"ax",%progbits
 847              		.align	1
 848              		.p2align 2,,3
 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 852              		.fpu fpv4-sp-d16
 854              	check_stack_overlap:
 855              	.LVL69:
 856              	.LFB143:
1932:src/xeq.c     **** 	const int n = stack_size();
 857              		.loc 1 1932 50 is_stmt 1 view -0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861              		@ link register save eliminated.
1933:src/xeq.c     **** 
 862              		.loc 1 1933 2 view .LVU243
 863              	.LBB1344:
 864              	.LBI1344:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 865              		.loc 1 702 5 view .LVU244
 866              	.LBB1345:
 703:src/xeq.c     **** 		return 4;
 867              		.loc 1 703 2 view .LVU245
 703:src/xeq.c     **** 		return 4;
 868              		.loc 1 703 8 is_stmt 0 view .LVU246
 869 0000 194B     		ldr	r3, .L83
 870 0002 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 94


 703:src/xeq.c     **** 		return 4;
 871              		.loc 1 703 6 view .LVU247
 872 0004 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 873              		.loc 1 703 5 view .LVU248
 874 0008 1B07     		lsls	r3, r3, #28
 875              	.LBE1345:
 876              	.LBE1344:
1932:src/xeq.c     **** 	const int n = stack_size();
 877              		.loc 1 1932 50 view .LVU249
 878 000a 30B4     		push	{r4, r5}
 879              		.cfi_def_cfa_offset 8
 880              		.cfi_offset 4, -8
 881              		.cfi_offset 5, -4
 882              	.LBB1350:
 883              	.LBB1348:
 703:src/xeq.c     **** 		return 4;
 884              		.loc 1 703 5 view .LVU250
 885 000c 25D5     		bpl	.L77
 886              	.LBB1346:
 887              	.LBI1346:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 888              		.loc 1 181 5 is_stmt 1 view .LVU251
 889              	.LBB1347:
 182:src/xeq.c     **** }
 890              		.loc 1 182 2 view .LVU252
 182:src/xeq.c     **** }
 891              		.loc 1 182 9 is_stmt 0 view .LVU253
 892 000e B2F8E037 		ldrh	r3, [r2, #2016]
 893              	.LBE1347:
 894              	.LBE1346:
 703:src/xeq.c     **** 		return 4;
 895              		.loc 1 703 27 view .LVU254
 896 0012 9B0B     		lsrs	r3, r3, #14
 897 0014 032B     		cmp	r3, #3
 898 0016 1BD0     		beq	.L82
 899              	.L79:
 900 0018 0823     		movs	r3, #8
 705:src/xeq.c     **** }
 901              		.loc 1 705 9 view .LVU255
 902 001a 1C46     		mov	r4, r3
 903              	.L73:
 904              	.LVL70:
 705:src/xeq.c     **** }
 905              		.loc 1 705 9 view .LVU256
 906              	.LBE1348:
 907              	.LBE1350:
1935:src/xeq.c     **** 		return n;
 908              		.loc 1 1935 2 is_stmt 1 view .LVU257
 909              	.LBB1351:
 910              	.LBB1352:
 911              	.LBB1353:
 912              	.LBB1354:
 913              	.LBB1355:
 932:src/xeq.c     **** }
 914              		.loc 1 932 24 is_stmt 0 view .LVU258
 915 001c B2F8E857 		ldrh	r5, [r2, #2024]
ARM GAS  /tmp/cciWh9P3.s 			page 95


 916              	.LBE1355:
 917              	.LBE1354:
 918              	.LBB1358:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 919              		.loc 1 239 24 view .LVU259
 920 0020 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 921              	.LBE1358:
 922              	.LBB1359:
 923              	.LBB1356:
 932:src/xeq.c     **** }
 924              		.loc 1 932 24 view .LVU260
 925 0024 44F20101 		movw	r1, #16385
 926              	.LBE1356:
 927              	.LBE1359:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 928              		.loc 1 238 5 view .LVU261
 929 0028 2940     		ands	r1, r1, r5
 930 002a B1F5804F 		cmp	r1, #16384
 931              	.LBB1360:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 932              		.loc 1 239 13 view .LVU262
 933 002e 08BF     		it	eq
 934 0030 0C3A     		subeq	r2, r2, #12
 935              	.LBE1360:
 936              	.LBE1353:
 937              	.LBE1352:
 938              	.LBE1351:
1935:src/xeq.c     **** 		return n;
 939              		.loc 1 1935 10 view .LVU263
 940 0032 0344     		add	r3, r3, r0
 941              	.LBB1365:
 942              	.LBI1351:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 943              		.loc 1 249 14 is_stmt 1 view .LVU264
 944              	.LBE1365:
 250:src/xeq.c     **** }
 945              		.loc 1 250 2 view .LVU265
 946              	.LVL71:
 947              	.LBB1366:
 948              	.LBB1364:
 949              	.LBI1352:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 950              		.loc 1 237 14 view .LVU266
 951              	.LBB1363:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 952              		.loc 1 238 2 view .LVU267
 953              	.LBB1361:
 954              	.LBI1354:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 955              		.loc 1 931 5 view .LVU268
 956              	.LBB1357:
 932:src/xeq.c     **** }
 957              		.loc 1 932 2 view .LVU269
 958              	.LBE1357:
 959              	.LBE1361:
 960              	.LBB1362:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
ARM GAS  /tmp/cciWh9P3.s 			page 96


 961              		.loc 1 239 3 view .LVU270
 240:src/xeq.c     **** 	}
 962              		.loc 1 240 3 view .LVU271
 240:src/xeq.c     **** 	}
 963              		.loc 1 240 67 is_stmt 0 view .LVU272
 964 0034 08BF     		it	eq
 965 0036 5210     		asreq	r2, r2, #1
 966              	.LVL72:
 240:src/xeq.c     **** 	}
 967              		.loc 1 240 67 view .LVU273
 968              	.LBE1362:
 969              	.LBE1363:
 970              	.LBE1364:
 971              	.LBE1366:
1935:src/xeq.c     **** 		return n;
 972              		.loc 1 1935 5 view .LVU274
 973 0038 9342     		cmp	r3, r2
 974 003a 06D9     		bls	.L72
1935:src/xeq.c     **** 		return n;
 975              		.loc 1 1935 31 discriminator 1 view .LVU275
 976 003c 6F28     		cmp	r0, #111
 977 003e 04D8     		bhi	.L72
 978              	.LBB1367:
 979              	.LBI1367:
1932:src/xeq.c     **** 	const int n = stack_size();
 980              		.loc 1 1932 12 is_stmt 1 view .LVU276
 981              	.LVL73:
 982              	.LBB1368:
1938:src/xeq.c     **** 	return 0;
 983              		.loc 1 1938 2 view .LVU277
 984              	.LBB1369:
 985              	.LBI1369:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 986              		.loc 1 536 5 view .LVU278
 987              	.LBB1370:
 537:src/xeq.c     **** 		Error = e;
 988              		.loc 1 537 2 view .LVU279
 537:src/xeq.c     **** 		Error = e;
 989              		.loc 1 537 12 is_stmt 0 view .LVU280
 990 0040 0A4B     		ldr	r3, .L83+4
 991 0042 1C68     		ldr	r4, [r3]
 992              	.LVL74:
 537:src/xeq.c     **** 		Error = e;
 993              		.loc 1 537 5 view .LVU281
 994 0044 64B9     		cbnz	r4, .L80
 995              	.LVL75:
 996              	.LBB1371:
 997              	.LBI1371:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 998              		.loc 1 536 5 is_stmt 1 view .LVU282
 999              	.LBB1372:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 1000              		.loc 1 538 3 view .LVU283
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 1001              		.loc 1 538 9 is_stmt 0 view .LVU284
 1002 0046 0C22     		movs	r2, #12
 1003 0048 1A60     		str	r2, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 97


 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 1004              		.loc 1 539 3 is_stmt 1 view .LVU285
 1005              	.LVL76:
 1006              	.L72:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 1007              		.loc 1 539 3 is_stmt 0 view .LVU286
 1008              	.LBE1372:
 1009              	.LBE1371:
 1010              	.LBE1370:
 1011              	.LBE1369:
 1012              	.LBE1368:
 1013              	.LBE1367:
1940:src/xeq.c     **** 
 1014              		.loc 1 1940 1 view .LVU287
 1015 004a 2046     		mov	r0, r4
 1016              	.LVL77:
1940:src/xeq.c     **** 
 1017              		.loc 1 1940 1 view .LVU288
 1018 004c 30BC     		pop	{r4, r5}
 1019              		.cfi_remember_state
 1020              		.cfi_restore 5
 1021              		.cfi_restore 4
 1022              		.cfi_def_cfa_offset 0
 1023 004e 7047     		bx	lr
 1024              	.LVL78:
 1025              	.L82:
 1026              		.cfi_restore_state
 1027              	.LBB1376:
 1028              	.LBB1349:
 703:src/xeq.c     **** 		return 4;
 1029              		.loc 1 703 44 view .LVU289
 1030 0050 074B     		ldr	r3, .L83+8
 703:src/xeq.c     **** 		return 4;
 1031              		.loc 1 703 41 view .LVU290
 1032 0052 93F90130 		ldrsb	r3, [r3, #1]
 1033 0056 002B     		cmp	r3, #0
 1034 0058 DEDB     		blt	.L79
 1035              	.L77:
 1036 005a 0423     		movs	r3, #4
 704:src/xeq.c     **** 	return 8;
 1037              		.loc 1 704 10 view .LVU291
 1038 005c 1C46     		mov	r4, r3
 1039 005e DDE7     		b	.L73
 1040              	.LVL79:
 1041              	.L80:
 704:src/xeq.c     **** 	return 8;
 1042              		.loc 1 704 10 view .LVU292
 1043              	.LBE1349:
 1044              	.LBE1376:
 1045              	.LBB1377:
 1046              	.LBB1375:
 1047              	.LBB1374:
 1048              	.LBB1373:
 1049 0060 0024     		movs	r4, #0
 1050              	.LVL80:
 704:src/xeq.c     **** 	return 8;
 1051              		.loc 1 704 10 view .LVU293
ARM GAS  /tmp/cciWh9P3.s 			page 98


 1052              	.LBE1373:
 1053              	.LBE1374:
 1054              	.LBE1375:
 1055              	.LBE1377:
1940:src/xeq.c     **** 
 1056              		.loc 1 1940 1 view .LVU294
 1057 0062 2046     		mov	r0, r4
 1058              	.LVL81:
1940:src/xeq.c     **** 
 1059              		.loc 1 1940 1 view .LVU295
 1060 0064 30BC     		pop	{r4, r5}
 1061              		.cfi_restore 5
 1062              		.cfi_restore 4
 1063              		.cfi_def_cfa_offset 0
 1064 0066 7047     		bx	lr
 1065              	.L84:
 1066              		.align	2
 1067              	.L83:
 1068 0068 00000000 		.word	main_ram
 1069 006c 00000000 		.word	Error
 1070 0070 00000000 		.word	XromParams
 1071              		.cfi_endproc
 1072              	.LFE143:
 1074              		.section	.text.is_xrom,"ax",%progbits
 1075              		.align	1
 1076              		.p2align 2,,3
 1077              		.global	is_xrom
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu fpv4-sp-d16
 1083              	is_xrom:
 1084              	.LFB3:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 1085              		.loc 1 181 19 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 182:src/xeq.c     **** }
 1090              		.loc 1 182 2 view .LVU297
 182:src/xeq.c     **** }
 1091              		.loc 1 182 9 is_stmt 0 view .LVU298
 1092 0000 054B     		ldr	r3, .L86
 1093 0002 1B68     		ldr	r3, [r3]
 1094 0004 B3F8E007 		ldrh	r0, [r3, #2016]
 1095 0008 800B     		lsrs	r0, r0, #14
 183:src/xeq.c     **** 
 1096              		.loc 1 183 1 view .LVU299
 1097 000a A0F10300 		sub	r0, #3
 1098 000e B0FA80F0 		clz	r0, r0
 1099 0012 4009     		lsrs	r0, r0, #5
 1100 0014 7047     		bx	lr
 1101              	.L87:
 1102 0016 00BF     		.align	2
 1103              	.L86:
 1104 0018 00000000 		.word	main_ram
ARM GAS  /tmp/cciWh9P3.s 			page 99


 1105              		.cfi_endproc
 1106              	.LFE3:
 1108              		.section	.text.move_retstk,"ax",%progbits
 1109              		.align	1
 1110              		.p2align 2,,3
 1111              		.global	move_retstk
 1112              		.syntax unified
 1113              		.thumb
 1114              		.thumb_func
 1115              		.fpu fpv4-sp-d16
 1117              	move_retstk:
 1118              	.LVL82:
 1119              	.LFB4:
 192:src/xeq.c     **** #ifndef REALBUILD
 1120              		.loc 1 192 1 is_stmt 1 view -0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 195:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1124              		.loc 1 195 2 view .LVU301
 195:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1125              		.loc 1 195 6 is_stmt 0 view .LVU302
 1126 0000 1A4B     		ldr	r3, .L99
 195:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1127              		.loc 1 195 5 view .LVU303
 1128 0002 93F90130 		ldrsb	r3, [r3, #1]
 1129 0006 002B     		cmp	r3, #0
 1130 0008 25DB     		blt	.L97
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1131              		.loc 1 200 2 is_stmt 1 view .LVU304
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1132              		.loc 1 200 19 is_stmt 0 view .LVU305
 1133 000a 194B     		ldr	r3, .L99+4
 192:src/xeq.c     **** #ifndef REALBUILD
 1134              		.loc 1 192 1 view .LVU306
 1135 000c 70B5     		push	{r4, r5, r6, lr}
 1136              		.cfi_def_cfa_offset 16
 1137              		.cfi_offset 4, -16
 1138              		.cfi_offset 5, -12
 1139              		.cfi_offset 6, -8
 1140              		.cfi_offset 14, -4
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1141              		.loc 1 200 19 view .LVU307
 1142 000e 1A68     		ldr	r2, [r3]
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1143              		.loc 1 200 17 view .LVU308
 1144 0010 184D     		ldr	r5, .L99+8
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1145              		.loc 1 200 19 view .LVU309
 1146 0012 B2F9E217 		ldrsh	r1, [r2, #2018]
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1147              		.loc 1 200 17 view .LVU310
 1148 0016 2B68     		ldr	r3, [r5]
 1149 0018 0B44     		add	r3, r3, r1
 200:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1150              		.loc 1 200 5 view .LVU311
 1151 001a C342     		cmn	r3, r0
ARM GAS  /tmp/cciWh9P3.s 			page 100


 1152 001c 0446     		mov	r4, r0
 1153 001e 13D4     		bmi	.L98
 204:src/xeq.c     **** 	RetStk += distance;
 1154              		.loc 1 204 2 is_stmt 1 view .LVU312
 1155 0020 154E     		ldr	r6, .L99+12
 1156 0022 3368     		ldr	r3, [r6]
 204:src/xeq.c     **** 	RetStk += distance;
 1157              		.loc 1 204 27 is_stmt 0 view .LVU313
 1158 0024 0818     		adds	r0, r1, r0
 1159              	.LVL83:
 204:src/xeq.c     **** 	RetStk += distance;
 1160              		.loc 1 204 60 view .LVU314
 1161 0026 4A42     		rsbs	r2, r1, #0
 204:src/xeq.c     **** 	RetStk += distance;
 1162              		.loc 1 204 2 view .LVU315
 1163 0028 03EB4000 		add	r0, r3, r0, lsl #1
 1164 002c 03EB4101 		add	r1, r3, r1, lsl #1
 1165 0030 5200     		lsls	r2, r2, #1
 1166 0032 FFF7FEFF 		bl	xcopy
 1167              	.LVL84:
 205:src/xeq.c     **** 	RetStkSize += distance;
 1168              		.loc 1 205 2 is_stmt 1 view .LVU316
 205:src/xeq.c     **** 	RetStkSize += distance;
 1169              		.loc 1 205 9 is_stmt 0 view .LVU317
 1170 0036 3368     		ldr	r3, [r6]
 206:src/xeq.c     **** 	return 0;
 1171              		.loc 1 206 13 view .LVU318
 1172 0038 2868     		ldr	r0, [r5]
 205:src/xeq.c     **** 	RetStkSize += distance;
 1173              		.loc 1 205 9 view .LVU319
 1174 003a 03EB4403 		add	r3, r3, r4, lsl #1
 206:src/xeq.c     **** 	return 0;
 1175              		.loc 1 206 13 view .LVU320
 1176 003e 2044     		add	r0, r0, r4
 1177 0040 2860     		str	r0, [r5]
 205:src/xeq.c     **** 	RetStkSize += distance;
 1178              		.loc 1 205 9 view .LVU321
 1179 0042 3360     		str	r3, [r6]
 206:src/xeq.c     **** 	return 0;
 1180              		.loc 1 206 2 is_stmt 1 view .LVU322
 207:src/xeq.c     **** }
 1181              		.loc 1 207 2 view .LVU323
 207:src/xeq.c     **** }
 1182              		.loc 1 207 9 is_stmt 0 view .LVU324
 1183 0044 0020     		movs	r0, #0
 208:src/xeq.c     **** 
 1184              		.loc 1 208 1 view .LVU325
 1185 0046 70BD     		pop	{r4, r5, r6, pc}
 1186              	.LVL85:
 1187              	.L98:
 201:src/xeq.c     **** 		return 1;
 1188              		.loc 1 201 3 is_stmt 1 view .LVU326
 1189              	.LBB1390:
 1190              	.LBI1390:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1191              		.loc 1 536 5 view .LVU327
 1192              	.LBB1391:
ARM GAS  /tmp/cciWh9P3.s 			page 101


 537:src/xeq.c     **** 		Error = e;
 1193              		.loc 1 537 2 view .LVU328
 537:src/xeq.c     **** 		Error = e;
 1194              		.loc 1 537 12 is_stmt 0 view .LVU329
 1195 0048 0C4B     		ldr	r3, .L99+16
 537:src/xeq.c     **** 		Error = e;
 1196              		.loc 1 537 5 view .LVU330
 1197 004a 1A68     		ldr	r2, [r3]
 1198 004c 52B9     		cbnz	r2, .L93
 1199              	.LVL86:
 1200              	.LBB1392:
 1201              	.LBI1392:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1202              		.loc 1 536 5 is_stmt 1 view .LVU331
 1203              	.LBB1393:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 1204              		.loc 1 538 3 view .LVU332
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 1205              		.loc 1 538 9 is_stmt 0 view .LVU333
 1206 004e 0B22     		movs	r2, #11
 1207 0050 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 1208              		.loc 1 539 3 is_stmt 1 view .LVU334
 1209              	.LBE1393:
 1210              	.LBE1392:
 1211              	.LBE1391:
 1212              	.LBE1390:
 202:src/xeq.c     **** 	}
 1213              		.loc 1 202 10 is_stmt 0 view .LVU335
 1214 0052 0120     		movs	r0, #1
 1215              	.LVL87:
 208:src/xeq.c     **** 
 1216              		.loc 1 208 1 view .LVU336
 1217 0054 70BD     		pop	{r4, r5, r6, pc}
 1218              	.LVL88:
 1219              	.L97:
 1220              		.cfi_def_cfa_offset 0
 1221              		.cfi_restore 4
 1222              		.cfi_restore 5
 1223              		.cfi_restore 6
 1224              		.cfi_restore 14
 1225              	.LBB1395:
 1226              	.LBI1395:
 191:src/xeq.c     **** {
 1227              		.loc 1 191 5 is_stmt 1 view .LVU337
 191:src/xeq.c     **** {
 1228              		.loc 1 191 5 is_stmt 0 view .LVU338
 1229              	.LBE1395:
 196:src/xeq.c     **** 		return 1;
 1230              		.loc 1 196 3 is_stmt 1 view .LVU339
 1231              	.LBB1402:
 1232              	.LBB1396:
 1233              	.LBI1396:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1234              		.loc 1 536 5 view .LVU340
 1235              	.LBB1397:
 537:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/cciWh9P3.s 			page 102


 1236              		.loc 1 537 2 view .LVU341
 537:src/xeq.c     **** 		Error = e;
 1237              		.loc 1 537 12 is_stmt 0 view .LVU342
 1238 0056 094B     		ldr	r3, .L99+16
 537:src/xeq.c     **** 		Error = e;
 1239              		.loc 1 537 5 view .LVU343
 1240 0058 1A68     		ldr	r2, [r3]
 1241 005a 2AB9     		cbnz	r2, .L92
 1242              	.LVL89:
 1243              	.LBB1398:
 1244              	.LBI1398:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1245              		.loc 1 536 5 is_stmt 1 view .LVU344
 1246              	.LBB1399:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 1247              		.loc 1 538 3 view .LVU345
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 1248              		.loc 1 538 9 is_stmt 0 view .LVU346
 1249 005c 0722     		movs	r2, #7
 1250 005e 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 1251              		.loc 1 539 3 is_stmt 1 view .LVU347
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 1252              		.loc 1 538 9 is_stmt 0 view .LVU348
 1253 0060 0120     		movs	r0, #1
 1254              	.LVL90:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 1255              		.loc 1 538 9 view .LVU349
 1256 0062 7047     		bx	lr
 1257              	.LVL91:
 1258              	.L93:
 1259              		.cfi_def_cfa_offset 16
 1260              		.cfi_offset 4, -16
 1261              		.cfi_offset 5, -12
 1262              		.cfi_offset 6, -8
 1263              		.cfi_offset 14, -4
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 1264              		.loc 1 538 9 view .LVU350
 1265              	.LBE1399:
 1266              	.LBE1398:
 1267              	.LBE1397:
 1268              	.LBE1396:
 1269              	.LBE1402:
 1270              	.LBB1403:
 1271              	.LBB1394:
 1272 0064 0120     		movs	r0, #1
 1273              	.LVL92:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 1274              		.loc 1 538 9 view .LVU351
 1275              	.LBE1394:
 1276              	.LBE1403:
 208:src/xeq.c     **** 
 1277              		.loc 1 208 1 view .LVU352
 1278 0066 70BD     		pop	{r4, r5, r6, pc}
 1279              	.LVL93:
 1280              	.L92:
 1281              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cciWh9P3.s 			page 103


 1282              		.cfi_restore 4
 1283              		.cfi_restore 5
 1284              		.cfi_restore 6
 1285              		.cfi_restore 14
 1286              	.LBB1404:
 1287              	.LBB1401:
 1288              	.LBB1400:
 208:src/xeq.c     **** 
 1289              		.loc 1 208 1 view .LVU353
 1290 0068 0120     		movs	r0, #1
 1291              	.LVL94:
 208:src/xeq.c     **** 
 1292              		.loc 1 208 1 view .LVU354
 1293              	.LBE1400:
 1294              	.LBE1401:
 1295              	.LBE1404:
 1296 006a 7047     		bx	lr
 1297              	.L100:
 1298              		.align	2
 1299              	.L99:
 1300 006c 00000000 		.word	XromParams
 1301 0070 00000000 		.word	main_ram
 1302 0074 00000000 		.word	RetStkSize
 1303 0078 00000000 		.word	RetStk
 1304 007c 00000000 		.word	Error
 1305              		.cfi_endproc
 1306              	.LFE4:
 1308              		.section	.text.local_levels,"ax",%progbits
 1309              		.align	1
 1310              		.p2align 2,,3
 1311              		.global	local_levels
 1312              		.syntax unified
 1313              		.thumb
 1314              		.thumb_func
 1315              		.fpu fpv4-sp-d16
 1317              	local_levels:
 1318              	.LFB5:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1319              		.loc 1 213 24 is_stmt 1 view -0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 0
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323              		@ link register save eliminated.
 214:src/xeq.c     **** }
 1324              		.loc 1 214 2 view .LVU356
 214:src/xeq.c     **** }
 1325              		.loc 1 214 9 is_stmt 0 view .LVU357
 1326 0000 074B     		ldr	r3, .L105
 1327 0002 1B68     		ldr	r3, [r3]
 1328 0004 B3F9DE37 		ldrsh	r3, [r3, #2014]
 214:src/xeq.c     **** }
 1329              		.loc 1 214 57 view .LVU358
 1330 0008 002B     		cmp	r3, #0
 1331 000a 01DB     		blt	.L104
 1332 000c 0020     		movs	r0, #0
 215:src/xeq.c     **** 
 1333              		.loc 1 215 1 view .LVU359
ARM GAS  /tmp/cciWh9P3.s 			page 104


 1334 000e 7047     		bx	lr
 1335              	.L104:
 214:src/xeq.c     **** }
 1336              		.loc 1 214 25 discriminator 1 view .LVU360
 1337 0010 044A     		ldr	r2, .L105+4
 1338 0012 1268     		ldr	r2, [r2]
 214:src/xeq.c     **** }
 1339              		.loc 1 214 57 discriminator 1 view .LVU361
 1340 0014 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 1341 0018 C0F30B00 		ubfx	r0, r0, #0, #12
 1342 001c 7047     		bx	lr
 1343              	.L106:
 1344 001e 00BF     		.align	2
 1345              	.L105:
 1346 0020 00000000 		.word	main_ram
 1347 0024 00000000 		.word	RetStk
 1348              		.cfi_endproc
 1349              	.LFE5:
 1351              		.section	.text.local_regs_rarg,"ax",%progbits
 1352              		.align	1
 1353              		.p2align 2,,3
 1354              		.global	local_regs_rarg
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1358              		.fpu fpv4-sp-d16
 1360              	local_regs_rarg:
 1361              	.LVL95:
 1362              	.LFB6:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1363              		.loc 1 221 35 is_stmt 1 view -0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1368              		.loc 1 222 2 view .LVU363
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1369              		.loc 1 222 53 is_stmt 0 view .LVU364
 1370 0000 A0F17E03 		sub	r3, r0, #126
 1371 0004 012B     		cmp	r3, #1
 1372 0006 144B     		ldr	r3, .L116
 1373 0008 23D9     		bls	.L113
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1374              		.loc 1 222 53 discriminator 1 view .LVU365
 1375 000a 8028     		cmp	r0, #128
 1376 000c 11D0     		beq	.L114
 1377              	.LBB1405:
 1378              	.LBI1405:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1379              		.loc 1 931 5 is_stmt 1 view .LVU366
 1380              	.LBB1406:
 932:src/xeq.c     **** }
 1381              		.loc 1 932 2 view .LVU367
 932:src/xeq.c     **** }
 1382              		.loc 1 932 12 is_stmt 0 view .LVU368
 1383 000e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 105


 932:src/xeq.c     **** }
 1384              		.loc 1 932 24 view .LVU369
 1385 0010 B3F8E827 		ldrh	r2, [r3, #2024]
 1386 0014 44F20100 		movw	r0, #16385
 1387              	.LVL96:
 932:src/xeq.c     **** }
 1388              		.loc 1 932 24 view .LVU370
 1389              	.LBE1406:
 1390              	.LBE1405:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1391              		.loc 1 222 73 view .LVU371
 1392 0018 1040     		ands	r0, r0, r2
 1393 001a A0F58040 		sub	r0, r0, #16384
 1394 001e B0FA80F0 		clz	r0, r0
 1395 0022 4009     		lsrs	r0, r0, #5
 1396 0024 0230     		adds	r0, r0, #2
 1397              	.L109:
 223:src/xeq.c     **** }
 1398              		.loc 1 223 2 is_stmt 1 discriminator 8 view .LVU372
 1399              	.LBB1407:
 1400              	.LBI1407:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1401              		.loc 1 213 5 discriminator 8 view .LVU373
 1402              	.LBB1408:
 214:src/xeq.c     **** }
 1403              		.loc 1 214 2 discriminator 8 view .LVU374
 214:src/xeq.c     **** }
 1404              		.loc 1 214 9 is_stmt 0 discriminator 8 view .LVU375
 1405 0026 B3F9DE37 		ldrsh	r3, [r3, #2014]
 214:src/xeq.c     **** }
 1406              		.loc 1 214 57 discriminator 8 view .LVU376
 1407 002a 002B     		cmp	r3, #0
 1408 002c 08DB     		blt	.L115
 1409              	.L112:
 1410 002e 0020     		movs	r0, #0
 1411              	.LBE1408:
 1412              	.LBE1407:
 224:src/xeq.c     **** 
 1413              		.loc 1 224 1 view .LVU377
 1414 0030 7047     		bx	lr
 1415              	.LVL97:
 1416              	.L114:
 224:src/xeq.c     **** 
 1417              		.loc 1 224 1 view .LVU378
 1418 0032 1B68     		ldr	r3, [r3]
 223:src/xeq.c     **** }
 1419              		.loc 1 223 2 is_stmt 1 view .LVU379
 1420              	.LBB1411:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1421              		.loc 1 213 5 view .LVU380
 1422              	.LBB1409:
 214:src/xeq.c     **** }
 1423              		.loc 1 214 2 view .LVU381
 214:src/xeq.c     **** }
 1424              		.loc 1 214 9 is_stmt 0 view .LVU382
 1425 0034 B3F9DE37 		ldrsh	r3, [r3, #2014]
 214:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 106


 1426              		.loc 1 214 57 view .LVU383
 1427 0038 002B     		cmp	r3, #0
 1428              	.LBE1409:
 1429              	.LBE1411:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1430              		.loc 1 222 53 view .LVU384
 1431 003a 4FF00300 		mov	r0, #3
 1432              	.LVL98:
 1433              	.LBB1412:
 1434              	.LBB1410:
 214:src/xeq.c     **** }
 1435              		.loc 1 214 57 view .LVU385
 1436 003e F6DA     		bge	.L112
 1437              	.L115:
 214:src/xeq.c     **** }
 1438              		.loc 1 214 25 view .LVU386
 1439 0040 064A     		ldr	r2, .L116+4
 1440 0042 1268     		ldr	r2, [r2]
 214:src/xeq.c     **** }
 1441              		.loc 1 214 57 view .LVU387
 1442 0044 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1443 0048 C3F30B03 		ubfx	r3, r3, #0, #12
 1444 004c 43FA00F0 		asr	r0, r3, r0
 1445 0050 7047     		bx	lr
 1446              	.LVL99:
 1447              	.L113:
 214:src/xeq.c     **** }
 1448              		.loc 1 214 57 view .LVU388
 1449 0052 1B68     		ldr	r3, [r3]
 1450              	.LBE1410:
 1451              	.LBE1412:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1452              		.loc 1 222 53 view .LVU389
 1453 0054 0220     		movs	r0, #2
 1454              	.LVL100:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1455              		.loc 1 222 53 view .LVU390
 1456 0056 E6E7     		b	.L109
 1457              	.L117:
 1458              		.align	2
 1459              	.L116:
 1460 0058 00000000 		.word	main_ram
 1461 005c 00000000 		.word	RetStk
 1462              		.cfi_endproc
 1463              	.LFE6:
 1465              		.section	.text.get_reg_limit,"ax",%progbits
 1466              		.align	1
 1467              		.p2align 2,,3
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1471              		.fpu fpv4-sp-d16
 1473              	get_reg_limit:
 1474              	.LVL101:
 1475              	.LFB241:
4301:src/xeq.c     **** 
4302:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 107


4303:src/xeq.c     **** #ifndef UNIVERSAL_DISPATCH
4304:src/xeq.c     **** 
4305:src/xeq.c     **** 
4306:src/xeq.c     **** /*
4307:src/xeq.c     ****  *  Call a monadic function by reusing the decimal code for integer mode
4308:src/xeq.c     ****  */
4309:src/xeq.c     **** long long int intMonadic(long long int x) {
4310:src/xeq.c     **** 	int s;
4311:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
4312:src/xeq.c     **** 	decNumber rx, r;
4313:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4314:src/xeq.c     **** 
4315:src/xeq.c     **** 	if (isNULL(monfuncs[f].mondreal))
4316:src/xeq.c     **** 		bad_mode_error();
4317:src/xeq.c     **** 	else {
4318:src/xeq.c     **** 		FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4319:src/xeq.c     **** #ifndef REALBUILD
4320:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4321:src/xeq.c     **** 			bad_mode_error();
4322:src/xeq.c     **** 		else 
4323:src/xeq.c     **** #endif
4324:src/xeq.c     **** 		{
4325:src/xeq.c     **** 			ullint_to_dn(&rx, vx);
4326:src/xeq.c     **** 			if (s)
4327:src/xeq.c     **** 				dn_minus(&rx, &rx);
4328:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
4329:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4330:src/xeq.c     **** 			else
4331:src/xeq.c     **** 				return intResult(&r);
4332:src/xeq.c     **** 		}
4333:src/xeq.c     **** 	}
4334:src/xeq.c     **** 	return 0;
4335:src/xeq.c     **** }
4336:src/xeq.c     **** 
4337:src/xeq.c     **** /*
4338:src/xeq.c     ****  *  Call a dyadic function by reusing the decimal code for integer mode
4339:src/xeq.c     ****  */
4340:src/xeq.c     **** long long int intDyadic(long long int y, long long int x) {
4341:src/xeq.c     **** 	int sx, sy;
4342:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4343:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
4344:src/xeq.c     **** 	decNumber rx, ry, r;
4345:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4346:src/xeq.c     **** 
4347:src/xeq.c     **** 	if (isNULL(dyfuncs[f].dydreal))
4348:src/xeq.c     **** 		bad_mode_error();
4349:src/xeq.c     **** 	else {
4350:src/xeq.c     **** 		FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4351:src/xeq.c     **** 
4352:src/xeq.c     **** #ifndef REALBUILD
4353:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4354:src/xeq.c     **** 			bad_mode_error();
4355:src/xeq.c     **** 		else 
4356:src/xeq.c     **** #endif
4357:src/xeq.c     **** 		{
4358:src/xeq.c     **** 			ullint_to_dn(&rx, vx);	if (sx) dn_minus(&rx, &rx);
4359:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
ARM GAS  /tmp/cciWh9P3.s 			page 108


4360:src/xeq.c     **** 
4361:src/xeq.c     **** 			if (NULL == fp(&r, &ry, &rx))
4362:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4363:src/xeq.c     **** 			else
4364:src/xeq.c     **** 				return intResult(&r);
4365:src/xeq.c     **** 		}
4366:src/xeq.c     **** 	}
4367:src/xeq.c     **** 	return 0;
4368:src/xeq.c     **** }
4369:src/xeq.c     **** 
4370:src/xeq.c     **** 
4371:src/xeq.c     **** /* Dispatch routine for niladic functions.
4372:src/xeq.c     ****  */
4373:src/xeq.c     **** static void niladic(const opcode op) {
4374:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
4375:src/xeq.c     **** 
4376:src/xeq.c     **** 	process_cmdline();
4377:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
4378:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
4379:src/xeq.c     **** 			bad_mode_error();
4380:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
4381:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
4382:src/xeq.c     **** 			if (dispatch_xrom(fp))
4383:src/xeq.c     **** 				return;
4384:src/xeq.c     **** 			else {
4385:src/xeq.c     **** 				switch (NILADIC_NUMRESULTS(niladics[idx])) {
4386:src/xeq.c     **** 				case 2:	lift_if_enabled();
4387:src/xeq.c     **** 				case 1:	lift_if_enabled();
4388:src/xeq.c     **** 				default:
4389:src/xeq.c     **** 					fp((enum nilop)idx);
4390:src/xeq.c     **** 					break;
4391:src/xeq.c     **** 				}
4392:src/xeq.c     **** 			}
4393:src/xeq.c     **** 		}
4394:src/xeq.c     **** 	} else
4395:src/xeq.c     **** 		illegal(op);
4396:src/xeq.c     **** 	if (idx != OP_rCLX)
4397:src/xeq.c     **** 		set_lift();
4398:src/xeq.c     **** }
4399:src/xeq.c     **** 
4400:src/xeq.c     **** 
4401:src/xeq.c     **** /* Dispatch routine for monadic operations.
4402:src/xeq.c     ****  * Since these functions take an argument from the X register, save it in
4403:src/xeq.c     ****  * lastx and then replace it with their result, we can factor out the common
4404:src/xeq.c     ****  * stack manipulatin code.
4405:src/xeq.c     ****  */
4406:src/xeq.c     **** static void monadic(const opcode op)
4407:src/xeq.c     **** {
4408:src/xeq.c     **** 	unsigned int f;
4409:src/xeq.c     **** 	process_cmdline_set_lift();
4410:src/xeq.c     **** 
4411:src/xeq.c     **** 	f = argKIND(op);
4412:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4413:src/xeq.c     **** 		if (is_intmode()) {
4414:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
4415:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
4416:src/xeq.c     **** 				if (dispatch_xrom(fp))
ARM GAS  /tmp/cciWh9P3.s 			page 109


4417:src/xeq.c     **** 					return;
4418:src/xeq.c     **** 				else {
4419:src/xeq.c     **** 					long long int x = getX_int();
4420:src/xeq.c     **** 					x = fp(x);
4421:src/xeq.c     **** 					setlastX();
4422:src/xeq.c     **** 					setX_int(x);
4423:src/xeq.c     **** 				}
4424:src/xeq.c     **** 			} else
4425:src/xeq.c     **** 				bad_mode_error();
4426:src/xeq.c     **** 		} else {
4427:src/xeq.c     **** 			if (! isNULL(monfuncs[f].mondreal)) {
4428:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4429:src/xeq.c     **** 				if (dispatch_xrom(fp))
4430:src/xeq.c     **** 					return;
4431:src/xeq.c     **** 				else {
4432:src/xeq.c     **** 					decNumber x, r;
4433:src/xeq.c     **** 					getX(&x);
4434:src/xeq.c     **** 					if (NULL == fp(&r, &x))
4435:src/xeq.c     **** 						set_NaN(&r);
4436:src/xeq.c     **** 					setlastX();
4437:src/xeq.c     **** 					setX(&r);
4438:src/xeq.c     **** 				}
4439:src/xeq.c     **** 			} else
4440:src/xeq.c     **** 				bad_mode_error();
4441:src/xeq.c     **** 		}
4442:src/xeq.c     **** 	} else
4443:src/xeq.c     **** 		illegal(op);
4444:src/xeq.c     **** }
4445:src/xeq.c     **** 
4446:src/xeq.c     **** static void monadic_cmplex(const opcode op) {
4447:src/xeq.c     **** 	decNumber x, y, rx, ry;
4448:src/xeq.c     **** 	unsigned int f;
4449:src/xeq.c     **** 
4450:src/xeq.c     **** 	process_cmdline_set_lift();
4451:src/xeq.c     **** 
4452:src/xeq.c     **** 	f = argKIND(op);
4453:src/xeq.c     **** 
4454:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4455:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
4456:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
4457:src/xeq.c     **** 			if (dispatch_xrom(fp))
4458:src/xeq.c     **** 				return;
4459:src/xeq.c     **** 			else {
4460:src/xeq.c     **** 				getXY(&x, &y);
4461:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
4462:src/xeq.c     **** 				setlastXY();
4463:src/xeq.c     **** 				setXY(&rx, &ry);
4464:src/xeq.c     **** 				set_was_complex();
4465:src/xeq.c     **** 			}
4466:src/xeq.c     **** 		} else
4467:src/xeq.c     **** 			bad_mode_error();
4468:src/xeq.c     **** 	} else
4469:src/xeq.c     **** 		illegal(op);
4470:src/xeq.c     **** }
4471:src/xeq.c     **** 
4472:src/xeq.c     **** /***************************************************************************
4473:src/xeq.c     ****  * Dyadic function handling.
ARM GAS  /tmp/cciWh9P3.s 			page 110


4474:src/xeq.c     ****  */
4475:src/xeq.c     **** 
4476:src/xeq.c     **** /* Dispatch routine for dyadic operations.
4477:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4478:src/xeq.c     ****  * common stack manipulation.
4479:src/xeq.c     ****  */
4480:src/xeq.c     **** static void dyadic(const opcode op) {
4481:src/xeq.c     **** 
4482:src/xeq.c     **** 	unsigned int f;
4483:src/xeq.c     **** 	process_cmdline_set_lift();
4484:src/xeq.c     **** 
4485:src/xeq.c     **** 	f = argKIND(op);
4486:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4487:src/xeq.c     **** 		if (is_intmode()) {
4488:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
4489:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
4490:src/xeq.c     **** 				if (dispatch_xrom(fp))
4491:src/xeq.c     **** 					return;
4492:src/xeq.c     **** 				else {
4493:src/xeq.c     **** 					long long int x = getX_int();
4494:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4495:src/xeq.c     **** 					x = fp(y, x);
4496:src/xeq.c     **** 					setlastX();
4497:src/xeq.c     **** 					lower();
4498:src/xeq.c     **** 					setX_int(x);
4499:src/xeq.c     **** 				}
4500:src/xeq.c     **** 			} else
4501:src/xeq.c     **** 				bad_mode_error();
4502:src/xeq.c     **** 		} else {
4503:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydreal)) {
4504:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4505:src/xeq.c     **** 				if (dispatch_xrom(fp))
4506:src/xeq.c     **** 					return;
4507:src/xeq.c     **** 				else {
4508:src/xeq.c     **** 					decNumber x, y, r;
4509:src/xeq.c     **** 					getXY(&x, &y);
4510:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
4511:src/xeq.c     **** 						set_NaN(&r);
4512:src/xeq.c     **** 					setlastX();
4513:src/xeq.c     **** 					lower();
4514:src/xeq.c     **** 					setX(&r);
4515:src/xeq.c     **** 				}
4516:src/xeq.c     **** 			} else
4517:src/xeq.c     **** 				bad_mode_error();
4518:src/xeq.c     **** 		}
4519:src/xeq.c     **** 	} else
4520:src/xeq.c     **** 		illegal(op);
4521:src/xeq.c     **** }
4522:src/xeq.c     **** 
4523:src/xeq.c     **** static void dyadic_cmplex(const opcode op) {
4524:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
4525:src/xeq.c     **** 	unsigned int f;
4526:src/xeq.c     **** 
4527:src/xeq.c     **** 	process_cmdline_set_lift();
4528:src/xeq.c     **** 
4529:src/xeq.c     **** 	f = argKIND(op);
4530:src/xeq.c     **** 	if (f < NUM_DYADIC) {
ARM GAS  /tmp/cciWh9P3.s 			page 111


4531:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
4532:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
4533:src/xeq.c     **** 			if (dispatch_xrom(fp))
4534:src/xeq.c     **** 				return;
4535:src/xeq.c     **** 			else {
4536:src/xeq.c     **** 				getXYZT(&x1, &y1, &x2, &y2);
4537:src/xeq.c     **** 
4538:src/xeq.c     **** 				fp(&xr, &yr, &x2, &y2, &x1, &y1);
4539:src/xeq.c     **** 
4540:src/xeq.c     **** 				setlastXY();
4541:src/xeq.c     **** 				lower2();
4542:src/xeq.c     **** 				setXY(&xr, &yr);
4543:src/xeq.c     **** 				set_was_complex();
4544:src/xeq.c     **** 			}
4545:src/xeq.c     **** 		} else
4546:src/xeq.c     **** 			bad_mode_error();
4547:src/xeq.c     **** 	} else
4548:src/xeq.c     **** 		illegal(op);
4549:src/xeq.c     **** }
4550:src/xeq.c     **** 
4551:src/xeq.c     **** /* Dispatch routine for triadic operations.
4552:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4553:src/xeq.c     ****  * common stack manipulation.
4554:src/xeq.c     ****  */
4555:src/xeq.c     **** static void triadic(const opcode op) {
4556:src/xeq.c     **** 	unsigned int f;
4557:src/xeq.c     **** 	process_cmdline_set_lift();
4558:src/xeq.c     **** 
4559:src/xeq.c     **** 	f = argKIND(op);
4560:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
4561:src/xeq.c     **** 		if (is_intmode()) {
4562:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
4563:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
4564:src/xeq.c     **** 				if (dispatch_xrom(fp))
4565:src/xeq.c     **** 					return;
4566:src/xeq.c     **** 				else {
4567:src/xeq.c     **** 					long long int x = getX_int();
4568:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4569:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
4570:src/xeq.c     **** 					x = fp(z, y, x);
4571:src/xeq.c     **** 					setlastX();
4572:src/xeq.c     **** 					lower();
4573:src/xeq.c     **** 					lower();
4574:src/xeq.c     **** 					setX_int(x);
4575:src/xeq.c     **** 				}
4576:src/xeq.c     **** 			} else
4577:src/xeq.c     **** 				bad_mode_error();
4578:src/xeq.c     **** 		} else {
4579:src/xeq.c     **** 			if (! isNULL(trifuncs[f].trireal)) {
4580:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
4581:src/xeq.c     **** 				if (dispatch_xrom(fp))
4582:src/xeq.c     **** 					return;
4583:src/xeq.c     **** 				else {
4584:src/xeq.c     **** 					decNumber x, y, z, r;
4585:src/xeq.c     **** 					getXYZ(&x, &y, &z);
4586:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
4587:src/xeq.c     **** 						set_NaN(&r);
ARM GAS  /tmp/cciWh9P3.s 			page 112


4588:src/xeq.c     **** 					setlastX();
4589:src/xeq.c     **** 					lower();
4590:src/xeq.c     **** 					lower();
4591:src/xeq.c     **** 					setX(&r);
4592:src/xeq.c     **** 				}
4593:src/xeq.c     **** 			} else
4594:src/xeq.c     **** 				bad_mode_error();
4595:src/xeq.c     **** 		}
4596:src/xeq.c     **** 	} else
4597:src/xeq.c     **** 		illegal(op);
4598:src/xeq.c     **** }
4599:src/xeq.c     **** 
4600:src/xeq.c     **** 
4601:src/xeq.c     **** #else // UNIVERSAL_DISPATCH
4602:src/xeq.c     **** 
4603:src/xeq.c     **** 
4604:src/xeq.c     **** /*
4605:src/xeq.c     ****  *  Call functions by reusing the decimal code for integer mode
4606:src/xeq.c     ****  */
4607:src/xeq.c     **** static long long int universal_dispatch_int(long long int y, long long int x, unsigned int dyadic)
4608:src/xeq.c     **** {
4609:src/xeq.c     **** 	int sx, sy;
4610:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4611:src/xeq.c     **** 	unsigned long long int vy;
4612:src/xeq.c     **** 	decNumber rx, ry, r;
4613:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4614:src/xeq.c     **** 	void (*function_pointer)(void);
4615:src/xeq.c     **** 
4616:src/xeq.c     **** #ifdef SHORT_POINTERS
4617:src/xeq.c     **** 	unsigned short compact_pointer;
4618:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4619:src/xeq.c     **** #else
4620:src/xeq.c     **** 	void (*compact_pointer)(void);
4621:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4622:src/xeq.c     **** #endif
4623:src/xeq.c     **** 
4624:src/xeq.c     **** 	if (dyadic) {
4625:src/xeq.c     **** 		vy = extract_value(y, &sy);
4626:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4627:src/xeq.c     **** 	}
4628:src/xeq.c     **** 	else {
4629:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4630:src/xeq.c     **** 	}
4631:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4632:src/xeq.c     **** 		bad_mode_error();
4633:src/xeq.c     **** 	}
4634:src/xeq.c     **** 	else {
4635:src/xeq.c     **** 		function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4636:src/xeq.c     **** #ifndef REALBUILD
4637:src/xeq.c     **** 		if (check_for_xrom_address(function_pointer) != NULL) {
4638:src/xeq.c     **** 			bad_mode_error();
4639:src/xeq.c     **** 		}
4640:src/xeq.c     **** 		else
4641:src/xeq.c     **** #endif
4642:src/xeq.c     **** 		{
4643:src/xeq.c     **** 			void *result;
4644:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 113


4645:src/xeq.c     **** 			ullint_to_dn(&rx, vx);		if (sx) dn_minus(&rx, &rx);
4646:src/xeq.c     **** 			if (dyadic) {
4647:src/xeq.c     **** 				ullint_to_dn(&ry, vy);		if (sy) dn_minus(&ry, &ry);
4648:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r, &ry, &rx);
4649:src/xeq.c     **** 			}
4650:src/xeq.c     **** 			else {
4651:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r, &rx);
4652:src/xeq.c     **** 			}
4653:src/xeq.c     **** 			if (NULL == result) {
4654:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4655:src/xeq.c     **** 			}
4656:src/xeq.c     **** 			else {
4657:src/xeq.c     **** 				return intResult(&r);
4658:src/xeq.c     **** 			}
4659:src/xeq.c     **** 		}
4660:src/xeq.c     **** 	}
4661:src/xeq.c     **** 	return 0;
4662:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4663:src/xeq.c     **** }
4664:src/xeq.c     **** 
4665:src/xeq.c     **** 
4666:src/xeq.c     **** long long int intMonadic(long long int x)
4667:src/xeq.c     **** {
4668:src/xeq.c     **** 	return universal_dispatch_int(0, x, 0);
4669:src/xeq.c     **** }
4670:src/xeq.c     **** 
4671:src/xeq.c     **** long long int intDyadic(long long int y, long long int x)
4672:src/xeq.c     **** {
4673:src/xeq.c     **** 	return universal_dispatch_int(y, x, 1);
4674:src/xeq.c     **** }
4675:src/xeq.c     **** 
4676:src/xeq.c     **** 
4677:src/xeq.c     **** /*
4678:src/xeq.c     ****  *  Universal dispatch function for niladic, monadic, dyadic and triadic functions, both real and c
4679:src/xeq.c     ****  */
4680:src/xeq.c     **** static void universal_dispatch(const opcode op, const unsigned int operands, const unsigned int com
4681:src/xeq.c     **** {
4682:src/xeq.c     **** 	const int intmode = is_intmode();
4683:src/xeq.c     **** 	volatile long long int ix; // declared volatile to avoid bogus warning about variable possibly bei
4684:src/xeq.c     **** 	const unsigned int f = argKIND(op);
4685:src/xeq.c     **** 	void (*function_pointer)(void);
4686:src/xeq.c     **** 
4687:src/xeq.c     **** #ifdef SHORT_POINTERS
4688:src/xeq.c     **** 	unsigned short compact_pointer;
4689:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4690:src/xeq.c     **** #else
4691:src/xeq.c     **** 	void (*compact_pointer)(void);
4692:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4693:src/xeq.c     **** #endif
4694:src/xeq.c     **** 
4695:src/xeq.c     **** 	process_cmdline();
4696:src/xeq.c     **** 	if (operands != 0) {
4697:src/xeq.c     **** 		set_lift();
4698:src/xeq.c     **** 	}
4699:src/xeq.c     **** 	switch (operands) {
4700:src/xeq.c     **** 	default:
4701:src/xeq.c     **** 	case 0:
ARM GAS  /tmp/cciWh9P3.s 			page 114


4702:src/xeq.c     **** 		if (f >= NUM_NILADIC) {
4703:src/xeq.c     **** illegal:
4704:src/xeq.c     **** 			illegal(op);
4705:src/xeq.c     **** 			goto finish_niladic;
4706:src/xeq.c     **** 		}
4707:src/xeq.c     **** 		if (intmode && NILADIC_NOTINT(niladics[f])) {
4708:src/xeq.c     **** 			goto bad_mode;
4709:src/xeq.c     **** 		}
4710:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)niladics[f].niladicf;
4711:src/xeq.c     **** 		break;
4712:src/xeq.c     **** 
4713:src/xeq.c     **** 	case 1:
4714:src/xeq.c     **** 		if (f >= NUM_MONADIC)
4715:src/xeq.c     **** 			goto illegal;
4716:src/xeq.c     **** 		if (intmode)
4717:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].monint;
4718:src/xeq.c     **** 		else if (complex)
4719:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondcmplx;
4720:src/xeq.c     **** 		else
4721:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4722:src/xeq.c     **** 		break;
4723:src/xeq.c     **** 
4724:src/xeq.c     **** 	case 2:
4725:src/xeq.c     **** 		if (f >= NUM_DYADIC)
4726:src/xeq.c     **** 			goto illegal;
4727:src/xeq.c     **** 		if (intmode)
4728:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydint;
4729:src/xeq.c     **** 		else if (complex)
4730:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydcmplx;
4731:src/xeq.c     **** 		else
4732:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4733:src/xeq.c     **** 		break;
4734:src/xeq.c     **** 
4735:src/xeq.c     **** 	case 3:
4736:src/xeq.c     **** 		if (f >= NUM_TRIADIC)
4737:src/xeq.c     **** 			goto illegal;
4738:src/xeq.c     **** 		if (intmode)
4739:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].triint;
4740:src/xeq.c     **** 		else
4741:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].trireal;
4742:src/xeq.c     **** 		break;
4743:src/xeq.c     **** 	}
4744:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4745:src/xeq.c     **** 		if (operands != 0) {
4746:src/xeq.c     **** 			// The original niladic() function doesn't invoke
4747:src/xeq.c     **** 			// bad_mode_error() if the function pointer is null.
4748:src/xeq.c     **** 			// TODO:  Verify that this behavior is really needed.
4749:src/xeq.c     **** bad_mode:
4750:src/xeq.c     **** 			bad_mode_error();
4751:src/xeq.c     **** 		}
4752:src/xeq.c     **** 		goto finish_niladic;
4753:src/xeq.c     **** 	}
4754:src/xeq.c     **** 	function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4755:src/xeq.c     **** 	if (dispatch_xrom(function_pointer)) {
4756:src/xeq.c     **** 		return;
4757:src/xeq.c     **** 	}
4758:src/xeq.c     **** 	if (operands == 0) {
ARM GAS  /tmp/cciWh9P3.s 			page 115


4759:src/xeq.c     **** 		switch (NILADIC_NUMRESULTS(niladics[f])) {
4760:src/xeq.c     **** 		case 2:		lift_if_enabled(); // fall through
4761:src/xeq.c     **** 		case 1:		lift_if_enabled(); break;
4762:src/xeq.c     **** 		}
4763:src/xeq.c     **** 		((FP_NILADIC)function_pointer)((enum nilop)f);
4764:src/xeq.c     **** finish_niladic:
4765:src/xeq.c     **** 		// If an error occurred, we end up here even if a non-niladic function was called.
4766:src/xeq.c     **** 		// set_lift() is always called for non-niladic functions so calling it again does no harm.
4767:src/xeq.c     **** 		if (f != OP_rCLX) {
4768:src/xeq.c     **** 			set_lift();
4769:src/xeq.c     **** 		}
4770:src/xeq.c     **** 	}
4771:src/xeq.c     **** 	else if (intmode) {
4772:src/xeq.c     **** 		long long int iy;
4773:src/xeq.c     **** 		long long int iz;
4774:src/xeq.c     **** 
4775:src/xeq.c     **** 		ix = getX_int();
4776:src/xeq.c     **** 		iy = get_reg_n_int(regY_idx);
4777:src/xeq.c     **** 		switch (operands) {
4778:src/xeq.c     **** 		default:
4779:src/xeq.c     **** 		case 1:
4780:src/xeq.c     **** 			ix = ((FP_MONADIC_INT)function_pointer)(ix);
4781:src/xeq.c     **** 			break;
4782:src/xeq.c     **** 
4783:src/xeq.c     **** 		case 2:
4784:src/xeq.c     **** 			ix = ((FP_DYADIC_INT)function_pointer)(iy, ix);
4785:src/xeq.c     **** 			break;
4786:src/xeq.c     **** 
4787:src/xeq.c     **** 		case 3:
4788:src/xeq.c     **** 			iz = get_reg_n_int(regZ_idx);
4789:src/xeq.c     **** 			ix = ((FP_TRIADIC_INT)function_pointer)(iz, iy, ix);
4790:src/xeq.c     **** 			break;
4791:src/xeq.c     **** 		}
4792:src/xeq.c     **** 		goto finish_x;
4793:src/xeq.c     **** 	}
4794:src/xeq.c     **** 	else {
4795:src/xeq.c     **** 		decNumber x, y, z, t, r1;
4796:src/xeq.c     **** 
4797:src/xeq.c     **** 		if (operands + complex <= 2) {
4798:src/xeq.c     **** 			getXY(&x, &y);
4799:src/xeq.c     **** 		}
4800:src/xeq.c     **** 		else {
4801:src/xeq.c     **** 			getXYZT(&x, &y, &z, &t);
4802:src/xeq.c     **** 		}
4803:src/xeq.c     **** 
4804:src/xeq.c     **** 		if (complex) {
4805:src/xeq.c     **** 			decNumber r2;
4806:src/xeq.c     **** 
4807:src/xeq.c     **** 			if (operands == 1) {
4808:src/xeq.c     **** 				((FP_MONADIC_CMPLX)function_pointer)(&r1, &r2, &x, &y);
4809:src/xeq.c     **** 			}
4810:src/xeq.c     **** 			else {
4811:src/xeq.c     **** 				((FP_DYADIC_CMPLX)function_pointer)(&r1, &r2, &z, &t, &x, &y);
4812:src/xeq.c     **** 			}
4813:src/xeq.c     **** 			setlastXY();
4814:src/xeq.c     **** 			if (operands != 1) {
4815:src/xeq.c     **** 				lower2();
ARM GAS  /tmp/cciWh9P3.s 			page 116


4816:src/xeq.c     **** 			}
4817:src/xeq.c     **** 			setXY(&r1, &r2);
4818:src/xeq.c     **** 			set_was_complex();
4819:src/xeq.c     **** 		}
4820:src/xeq.c     **** 		else { // real
4821:src/xeq.c     **** 			void *result;
4822:src/xeq.c     **** 
4823:src/xeq.c     **** 			switch (operands) {
4824:src/xeq.c     **** 			default:
4825:src/xeq.c     **** 			case 1:
4826:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r1, &x);
4827:src/xeq.c     **** 				break;
4828:src/xeq.c     **** 
4829:src/xeq.c     **** 			case 2:
4830:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r1, &y, &x);
4831:src/xeq.c     **** 				break;
4832:src/xeq.c     **** 
4833:src/xeq.c     **** 			case 3:
4834:src/xeq.c     **** 				result = ((FP_TRIADIC_REAL)function_pointer)(&r1, &z, &y, &x);
4835:src/xeq.c     **** 				break;
4836:src/xeq.c     **** 			}
4837:src/xeq.c     **** 			if (NULL == result) {
4838:src/xeq.c     **** 				set_NaN(&r1);
4839:src/xeq.c     **** 			}
4840:src/xeq.c     **** finish_x:
4841:src/xeq.c     **** 			setlastX();
4842:src/xeq.c     **** 			switch (operands) {
4843:src/xeq.c     **** 			case 3:		lower(); // fall through
4844:src/xeq.c     **** 			case 2:		lower(); break;
4845:src/xeq.c     **** 			}
4846:src/xeq.c     **** 			if (!intmode) {
4847:src/xeq.c     **** 				setX(&r1);
4848:src/xeq.c     **** 			}
4849:src/xeq.c     **** 			else {
4850:src/xeq.c     **** 				setX_int(ix);
4851:src/xeq.c     **** 			}
4852:src/xeq.c     **** 		}
4853:src/xeq.c     **** 	}
4854:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4855:src/xeq.c     **** }
4856:src/xeq.c     **** 
4857:src/xeq.c     **** 
4858:src/xeq.c     **** static void niladic(const opcode op)
4859:src/xeq.c     **** {
4860:src/xeq.c     **** 	universal_dispatch(op, 0, 0);
4861:src/xeq.c     **** }
4862:src/xeq.c     **** 
4863:src/xeq.c     **** static void monadic(const opcode op)
4864:src/xeq.c     **** {
4865:src/xeq.c     **** 	universal_dispatch(op, 1, 0);
4866:src/xeq.c     **** }
4867:src/xeq.c     **** 
4868:src/xeq.c     **** static void monadic_cmplex(const opcode op)
4869:src/xeq.c     **** {
4870:src/xeq.c     **** 	universal_dispatch(op, 1, 1);
4871:src/xeq.c     **** }
4872:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 117


4873:src/xeq.c     **** static void dyadic(const opcode op)
4874:src/xeq.c     **** {
4875:src/xeq.c     **** 	universal_dispatch(op, 2, 0);
4876:src/xeq.c     **** }
4877:src/xeq.c     **** 
4878:src/xeq.c     **** static void dyadic_cmplex(const opcode op)
4879:src/xeq.c     **** {
4880:src/xeq.c     **** 	universal_dispatch(op, 2, 1);
4881:src/xeq.c     **** }
4882:src/xeq.c     **** 
4883:src/xeq.c     **** static void triadic(const opcode op)
4884:src/xeq.c     **** {
4885:src/xeq.c     **** 	universal_dispatch(op, 3, 0);
4886:src/xeq.c     **** }
4887:src/xeq.c     **** 
4888:src/xeq.c     **** 
4889:src/xeq.c     **** #endif // UNIVERSAL_DISPATCH
4890:src/xeq.c     **** 
4891:src/xeq.c     **** 
4892:src/xeq.c     **** /*
4893:src/xeq.c     ****  *  Helper to check the maximum allowed register number, 
4894:src/xeq.c     ****  *  depending on command flags and current allocation.
4895:src/xeq.c     ****  *  This needs to be seperate because its called twice for indirect arguments
4896:src/xeq.c     ****  */
4897:src/xeq.c     **** static unsigned int get_reg_limit(unsigned int cmd, unsigned int arg)
4898:src/xeq.c     **** {
 1476              		.loc 1 4898 1 is_stmt 1 view -0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 0
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
4899:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1480              		.loc 1 4899 2 view .LVU392
4900:src/xeq.c     **** 
4901:src/xeq.c     **** 	if (arg < TOPREALREG) {
 1481              		.loc 1 4901 2 view .LVU393
 1482              		.loc 1 4901 5 is_stmt 0 view .LVU394
 1483 0000 6329     		cmp	r1, #99
4898:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1484              		.loc 1 4898 1 view .LVU395
 1485 0002 38B5     		push	{r3, r4, r5, lr}
 1486              		.cfi_def_cfa_offset 16
 1487              		.cfi_offset 3, -16
 1488              		.cfi_offset 4, -12
 1489              		.cfi_offset 5, -8
 1490              		.cfi_offset 14, -4
4898:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1491              		.loc 1 4898 1 view .LVU396
 1492 0004 0446     		mov	r4, r0
 1493              		.loc 1 4901 5 view .LVU397
 1494 0006 16D8     		bhi	.L119
4902:src/xeq.c     **** 		// Range checking for registers against variable boundary
4903:src/xeq.c     **** 		lim = global_regs_rarg((enum rarg) cmd) - 1;
 1495              		.loc 1 4903 3 is_stmt 1 view .LVU398
 1496              	.LVL102:
 1497              	.LBB1413:
 1498              	.LBI1413:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
ARM GAS  /tmp/cciWh9P3.s 			page 118


 1499              		.loc 1 237 14 view .LVU399
 1500              	.LBB1414:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1501              		.loc 1 238 2 view .LVU400
 1502              	.LBB1415:
 1503              	.LBI1415:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1504              		.loc 1 931 5 view .LVU401
 1505              	.LBB1416:
 932:src/xeq.c     **** }
 1506              		.loc 1 932 2 view .LVU402
 932:src/xeq.c     **** }
 1507              		.loc 1 932 12 is_stmt 0 view .LVU403
 1508 0008 294B     		ldr	r3, .L139
 1509 000a 1A68     		ldr	r2, [r3]
 932:src/xeq.c     **** }
 1510              		.loc 1 932 24 view .LVU404
 1511 000c B2F8E817 		ldrh	r1, [r2, #2024]
 1512              	.LVL103:
 932:src/xeq.c     **** }
 1513              		.loc 1 932 24 view .LVU405
 1514 0010 44F20103 		movw	r3, #16385
 1515              	.LBE1416:
 1516              	.LBE1415:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1517              		.loc 1 238 5 view .LVU406
 1518 0014 0B40     		ands	r3, r3, r1
 1519 0016 B3F5804F 		cmp	r3, #16384
 1520 001a 2ED0     		beq	.L120
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1521              		.loc 1 238 19 view .LVU407
 1522 001c 8028     		cmp	r0, #128
 1523 001e 39D0     		beq	.L136
 243:src/xeq.c     **** }
 1524              		.loc 1 243 3 is_stmt 1 view .LVU408
 243:src/xeq.c     **** }
 1525              		.loc 1 243 10 is_stmt 0 view .LVU409
 1526 0020 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1527              	.LVL104:
 1528              	.L124:
 243:src/xeq.c     **** }
 1529              		.loc 1 243 10 view .LVU410
 1530 0024 2349     		ldr	r1, .L139+4
 1531              	.LBE1414:
 1532              	.LBE1413:
 1533              		.loc 1 4903 7 view .LVU411
 1534 0026 0138     		subs	r0, r0, #1
 1535              	.LVL105:
 1536              		.loc 1 4903 7 view .LVU412
 1537 0028 2501     		lsls	r5, r4, #4
 1538              	.LVL106:
 1539              	.L125:
4904:src/xeq.c     **** 	}
4905:src/xeq.c     **** 	else if (argcmds[cmd].local) {
4906:src/xeq.c     **** 		// Range checking for local registers
4907:src/xeq.c     **** 		lim = NUMREG - 1 + local_regs_rarg((enum rarg) cmd);
4908:src/xeq.c     **** 	}
ARM GAS  /tmp/cciWh9P3.s 			page 119


4909:src/xeq.c     **** 	if (argcmds[cmd].cmplx) {
 1540              		.loc 1 4909 2 is_stmt 1 view .LVU413
 1541              		.loc 1 4909 18 is_stmt 0 view .LVU414
 1542 002a 2944     		add	r1, r1, r5
 1543 002c 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 1544              		.loc 1 4909 5 view .LVU415
 1545 002e D906     		lsls	r1, r3, #27
 1546 0030 10D5     		bpl	.L126
 1547              	.L137:
4910:src/xeq.c     **** 		// one short of the last avialable register for complex access
4911:src/xeq.c     **** 		--lim;
 1548              		.loc 1 4911 3 is_stmt 1 view .LVU416
 1549 0032 0138     		subs	r0, r0, #1
 1550              	.LVL107:
 1551              	.L118:
4912:src/xeq.c     **** 	}
4913:src/xeq.c     **** 	else if (cmd == RARG_STOSTK || cmd == RARG_RCLSTK) {
4914:src/xeq.c     **** 		// avoid stack clash error in these commands
4915:src/xeq.c     **** 		lim -= stack_size() - 1;
4916:src/xeq.c     **** 	}
4917:src/xeq.c     **** 	return lim;
4918:src/xeq.c     **** }
 1552              		.loc 1 4918 1 is_stmt 0 view .LVU417
 1553 0034 38BD     		pop	{r3, r4, r5, pc}
 1554              	.LVL108:
 1555              	.L119:
4905:src/xeq.c     **** 		// Range checking for local registers
 1556              		.loc 1 4905 7 is_stmt 1 view .LVU418
4905:src/xeq.c     **** 		// Range checking for local registers
 1557              		.loc 1 4905 23 is_stmt 0 view .LVU419
 1558 0036 1F49     		ldr	r1, .L139+4
 1559              	.LVL109:
4905:src/xeq.c     **** 		// Range checking for local registers
 1560              		.loc 1 4905 23 view .LVU420
 1561 0038 01EB0013 		add	r3, r1, r0, lsl #4
 1562 003c 0501     		lsls	r5, r0, #4
 1563 003e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
4905:src/xeq.c     **** 		// Range checking for local registers
 1564              		.loc 1 4905 10 view .LVU421
 1565 0040 1807     		lsls	r0, r3, #28
 1566              	.LVL110:
4905:src/xeq.c     **** 		// Range checking for local registers
 1567              		.loc 1 4905 10 view .LVU422
 1568 0042 18D5     		bpl	.L130
4907:src/xeq.c     **** 	}
 1569              		.loc 1 4907 3 is_stmt 1 view .LVU423
4907:src/xeq.c     **** 	}
 1570              		.loc 1 4907 22 is_stmt 0 view .LVU424
 1571 0044 E0B2     		uxtb	r0, r4
 1572 0046 FFF7FEFF 		bl	local_regs_rarg
 1573              	.LVL111:
4909:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1574              		.loc 1 4909 18 view .LVU425
 1575 004a 2944     		add	r1, r1, r5
4907:src/xeq.c     **** 	}
 1576              		.loc 1 4907 20 view .LVU426
 1577 004c 6F30     		adds	r0, r0, #111
ARM GAS  /tmp/cciWh9P3.s 			page 120


 1578              	.LVL112:
4909:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1579              		.loc 1 4909 2 is_stmt 1 view .LVU427
4909:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1580              		.loc 1 4909 18 is_stmt 0 view .LVU428
 1581 004e 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
4909:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1582              		.loc 1 4909 5 view .LVU429
 1583 0050 D906     		lsls	r1, r3, #27
 1584 0052 EED4     		bmi	.L137
 1585              	.L126:
4913:src/xeq.c     **** 		// avoid stack clash error in these commands
 1586              		.loc 1 4913 7 is_stmt 1 view .LVU430
4913:src/xeq.c     **** 		// avoid stack clash error in these commands
 1587              		.loc 1 4913 30 is_stmt 0 view .LVU431
 1588 0054 223C     		subs	r4, r4, #34
 1589              	.LVL113:
4913:src/xeq.c     **** 		// avoid stack clash error in these commands
 1590              		.loc 1 4913 10 view .LVU432
 1591 0056 012C     		cmp	r4, #1
 1592 0058 ECD8     		bhi	.L118
4915:src/xeq.c     **** 	}
 1593              		.loc 1 4915 3 is_stmt 1 view .LVU433
 1594              	.LBB1421:
 1595              	.LBI1421:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 1596              		.loc 1 702 5 view .LVU434
 1597              	.LBB1422:
 703:src/xeq.c     **** 		return 4;
 1598              		.loc 1 703 2 view .LVU435
 703:src/xeq.c     **** 		return 4;
 1599              		.loc 1 703 8 is_stmt 0 view .LVU436
 1600 005a 154B     		ldr	r3, .L139
 1601 005c 1B68     		ldr	r3, [r3]
 703:src/xeq.c     **** 		return 4;
 1602              		.loc 1 703 6 view .LVU437
 1603 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 1604              		.loc 1 703 5 view .LVU438
 1605 0062 1207     		lsls	r2, r2, #28
 1606 0064 14D5     		bpl	.L131
 1607              	.LBB1423:
 1608              	.LBI1423:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 1609              		.loc 1 181 5 is_stmt 1 view .LVU439
 1610              	.LBB1424:
 182:src/xeq.c     **** }
 1611              		.loc 1 182 2 view .LVU440
 182:src/xeq.c     **** }
 1612              		.loc 1 182 9 is_stmt 0 view .LVU441
 1613 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 1614              	.LBE1424:
 1615              	.LBE1423:
 703:src/xeq.c     **** 		return 4;
 1616              		.loc 1 703 27 view .LVU442
 1617 006a 9B0B     		lsrs	r3, r3, #14
 1618 006c 032B     		cmp	r3, #3
ARM GAS  /tmp/cciWh9P3.s 			page 121


 1619 006e 16D0     		beq	.L138
 1620 0070 0723     		movs	r3, #7
 1621              	.L128:
 1622              	.LBE1422:
 1623              	.LBE1421:
4915:src/xeq.c     **** 	}
 1624              		.loc 1 4915 7 view .LVU443
 1625 0072 C01A     		subs	r0, r0, r3
 1626              	.LVL114:
4917:src/xeq.c     **** }
 1627              		.loc 1 4917 2 is_stmt 1 view .LVU444
 1628              		.loc 1 4918 1 is_stmt 0 view .LVU445
 1629 0074 38BD     		pop	{r3, r4, r5, pc}
 1630              	.LVL115:
 1631              	.L130:
4899:src/xeq.c     **** 
 1632              		.loc 1 4899 15 view .LVU446
 1633 0076 7020     		movs	r0, #112
 1634 0078 D7E7     		b	.L125
 1635              	.LVL116:
 1636              	.L120:
 1637              	.LBB1427:
 1638              	.LBB1419:
 1639              	.LBB1417:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1640              		.loc 1 239 3 is_stmt 1 view .LVU447
 240:src/xeq.c     **** 	}
 1641              		.loc 1 240 26 is_stmt 0 view .LVU448
 1642 007a A4F17E03 		sub	r3, r4, #126
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1643              		.loc 1 239 24 view .LVU449
 1644 007e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1645              	.LVL117:
 240:src/xeq.c     **** 	}
 1646              		.loc 1 240 56 view .LVU450
 1647 0082 DBB2     		uxtb	r3, r3
 1648 0084 012B     		cmp	r3, #1
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1649              		.loc 1 239 13 view .LVU451
 1650 0086 A0F10C00 		sub	r0, r0, #12
 1651              	.LVL118:
 240:src/xeq.c     **** 	}
 1652              		.loc 1 240 3 is_stmt 1 view .LVU452
 240:src/xeq.c     **** 	}
 1653              		.loc 1 240 56 is_stmt 0 view .LVU453
 1654 008a CBD9     		bls	.L124
 240:src/xeq.c     **** 	}
 1655              		.loc 1 240 67 view .LVU454
 1656 008c 4010     		asrs	r0, r0, #1
 1657              	.LVL119:
 240:src/xeq.c     **** 	}
 1658              		.loc 1 240 67 view .LVU455
 1659 008e C9E7     		b	.L124
 1660              	.LVL120:
 1661              	.L131:
 240:src/xeq.c     **** 	}
 1662              		.loc 1 240 67 view .LVU456
ARM GAS  /tmp/cciWh9P3.s 			page 122


 1663              	.LBE1417:
 1664              	.LBE1419:
 1665              	.LBE1427:
 1666              	.LBB1428:
 1667              	.LBB1425:
 1668 0090 0323     		movs	r3, #3
 1669 0092 EEE7     		b	.L128
 1670              	.LVL121:
 1671              	.L136:
 240:src/xeq.c     **** 	}
 1672              		.loc 1 240 67 view .LVU457
 1673              	.LBE1425:
 1674              	.LBE1428:
 1675              	.LBB1429:
 1676              	.LBB1420:
 1677              	.LBB1418:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1678              		.loc 1 239 3 is_stmt 1 view .LVU458
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1679              		.loc 1 239 24 is_stmt 0 view .LVU459
 1680 0094 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1681              	.LVL122:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1682              		.loc 1 239 13 view .LVU460
 1683 0098 0C38     		subs	r0, r0, #12
 1684              	.LVL123:
 240:src/xeq.c     **** 	}
 1685              		.loc 1 240 3 is_stmt 1 view .LVU461
 240:src/xeq.c     **** 	}
 1686              		.loc 1 240 67 is_stmt 0 view .LVU462
 1687 009a 4010     		asrs	r0, r0, #1
 1688              	.LVL124:
 240:src/xeq.c     **** 	}
 1689              		.loc 1 240 67 view .LVU463
 1690 009c C2E7     		b	.L124
 1691              	.LVL125:
 1692              	.L138:
 240:src/xeq.c     **** 	}
 1693              		.loc 1 240 67 view .LVU464
 1694              	.LBE1418:
 1695              	.LBE1420:
 1696              	.LBE1429:
 1697              	.LBB1430:
 1698              	.LBB1426:
 703:src/xeq.c     **** 		return 4;
 1699              		.loc 1 703 44 view .LVU465
 1700 009e 064B     		ldr	r3, .L139+8
 703:src/xeq.c     **** 		return 4;
 1701              		.loc 1 703 41 view .LVU466
 1702 00a0 93F90130 		ldrsb	r3, [r3, #1]
 1703 00a4 002B     		cmp	r3, #0
 1704 00a6 B4BF     		ite	lt
 1705 00a8 0723     		movlt	r3, #7
 1706 00aa 0323     		movge	r3, #3
 1707 00ac E1E7     		b	.L128
 1708              	.L140:
 1709 00ae 00BF     		.align	2
ARM GAS  /tmp/cciWh9P3.s 			page 123


 1710              	.L139:
 1711 00b0 00000000 		.word	main_ram
 1712 00b4 00000000 		.word	argcmds
 1713 00b8 00000000 		.word	XromParams
 1714              	.LBE1426:
 1715              	.LBE1430:
 1716              		.cfi_endproc
 1717              	.LFE241:
 1719              		.section	.text.local_regs,"ax",%progbits
 1720              		.align	1
 1721              		.p2align 2,,3
 1722              		.global	local_regs
 1723              		.syntax unified
 1724              		.thumb
 1725              		.thumb_func
 1726              		.fpu fpv4-sp-d16
 1728              	local_regs:
 1729              	.LFB7:
 229:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 1730              		.loc 1 229 22 is_stmt 1 view -0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 0
 1733              		@ frame_needed = 0, uses_anonymous_args = 0
 1734              		@ link register save eliminated.
 230:src/xeq.c     **** }
 1735              		.loc 1 230 2 view .LVU468
 1736              	.LVL126:
 1737              	.LBB1431:
 1738              	.LBI1431:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1739              		.loc 1 221 5 view .LVU469
 1740              	.LBB1432:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1741              		.loc 1 222 2 view .LVU470
 1742              	.LBB1433:
 1743              	.LBI1433:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1744              		.loc 1 931 5 view .LVU471
 1745              	.LBB1434:
 932:src/xeq.c     **** }
 1746              		.loc 1 932 2 view .LVU472
 932:src/xeq.c     **** }
 1747              		.loc 1 932 12 is_stmt 0 view .LVU473
 1748 0000 0D4B     		ldr	r3, .L145
 1749 0002 1B68     		ldr	r3, [r3]
 1750              	.LVL127:
 932:src/xeq.c     **** }
 1751              		.loc 1 932 12 view .LVU474
 1752              	.LBE1434:
 1753              	.LBE1433:
 223:src/xeq.c     **** }
 1754              		.loc 1 223 2 is_stmt 1 view .LVU475
 1755              	.LBB1437:
 1756              	.LBI1437:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1757              		.loc 1 213 5 view .LVU476
 1758              	.LBB1438:
ARM GAS  /tmp/cciWh9P3.s 			page 124


 214:src/xeq.c     **** }
 1759              		.loc 1 214 2 view .LVU477
 214:src/xeq.c     **** }
 1760              		.loc 1 214 9 is_stmt 0 view .LVU478
 1761 0004 B3F9DE27 		ldrsh	r2, [r3, #2014]
 214:src/xeq.c     **** }
 1762              		.loc 1 214 57 view .LVU479
 1763 0008 002A     		cmp	r2, #0
 1764 000a 01DB     		blt	.L144
 1765 000c 0020     		movs	r0, #0
 1766              	.LVL128:
 214:src/xeq.c     **** }
 1767              		.loc 1 214 57 view .LVU480
 1768              	.LBE1438:
 1769              	.LBE1437:
 1770              	.LBE1432:
 1771              	.LBE1431:
 231:src/xeq.c     **** 
 1772              		.loc 1 231 1 view .LVU481
 1773 000e 7047     		bx	lr
 1774              	.LVL129:
 1775              	.L144:
 1776              	.LBB1450:
 1777              	.LBB1449:
 1778              	.LBB1443:
 1779              	.LBB1435:
 932:src/xeq.c     **** }
 1780              		.loc 1 932 24 view .LVU482
 1781 0010 B3F8E807 		ldrh	r0, [r3, #2024]
 1782              	.LBE1435:
 1783              	.LBE1443:
 1784              	.LBB1444:
 1785              	.LBB1439:
 214:src/xeq.c     **** }
 1786              		.loc 1 214 25 view .LVU483
 1787 0014 0949     		ldr	r1, .L145+4
 1788              	.LBE1439:
 1789              	.LBE1444:
 1790              	.LBB1445:
 1791              	.LBB1436:
 932:src/xeq.c     **** }
 1792              		.loc 1 932 24 view .LVU484
 1793 0016 44F20103 		movw	r3, #16385
 1794              	.LVL130:
 932:src/xeq.c     **** }
 1795              		.loc 1 932 24 view .LVU485
 1796              	.LBE1436:
 1797              	.LBE1445:
 1798              	.LBB1446:
 1799              	.LBB1440:
 214:src/xeq.c     **** }
 1800              		.loc 1 214 25 view .LVU486
 1801 001a 0968     		ldr	r1, [r1]
 1802              	.LBE1440:
 1803              	.LBE1446:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1804              		.loc 1 222 73 view .LVU487
ARM GAS  /tmp/cciWh9P3.s 			page 125


 1805 001c 0340     		ands	r3, r3, r0
 1806 001e A3F58043 		sub	r3, r3, #16384
 1807              	.LBB1447:
 1808              	.LBB1441:
 214:src/xeq.c     **** }
 1809              		.loc 1 214 57 view .LVU488
 1810 0022 31F81200 		ldrh	r0, [r1, r2, lsl #1]
 1811              	.LBE1441:
 1812              	.LBE1447:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1813              		.loc 1 222 73 view .LVU489
 1814 0026 B3FA83F3 		clz	r3, r3
 1815 002a 5B09     		lsrs	r3, r3, #5
 1816 002c 0233     		adds	r3, r3, #2
 1817              	.LBB1448:
 1818              	.LBB1442:
 214:src/xeq.c     **** }
 1819              		.loc 1 214 57 view .LVU490
 1820 002e C0F30B00 		ubfx	r0, r0, #0, #12
 1821 0032 1841     		asrs	r0, r0, r3
 1822 0034 7047     		bx	lr
 1823              	.L146:
 1824 0036 00BF     		.align	2
 1825              	.L145:
 1826 0038 00000000 		.word	main_ram
 1827 003c 00000000 		.word	RetStk
 1828              	.LBE1442:
 1829              	.LBE1448:
 1830              	.LBE1449:
 1831              	.LBE1450:
 1832              		.cfi_endproc
 1833              	.LFE7:
 1835              		.section	.text.global_regs_rarg,"ax",%progbits
 1836              		.align	1
 1837              		.p2align 2,,3
 1838              		.global	global_regs_rarg
 1839              		.syntax unified
 1840              		.thumb
 1841              		.thumb_func
 1842              		.fpu fpv4-sp-d16
 1844              	global_regs_rarg:
 1845              	.LVL131:
 1846              	.LFB8:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1847              		.loc 1 237 45 is_stmt 1 view -0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 1851              		@ link register save eliminated.
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1852              		.loc 1 238 2 view .LVU492
 1853              	.LBB1451:
 1854              	.LBI1451:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1855              		.loc 1 931 5 view .LVU493
 1856              	.LBB1452:
 932:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 126


 1857              		.loc 1 932 2 view .LVU494
 932:src/xeq.c     **** }
 1858              		.loc 1 932 12 is_stmt 0 view .LVU495
 1859 0000 0E4B     		ldr	r3, .L156
 1860 0002 1A68     		ldr	r2, [r3]
 932:src/xeq.c     **** }
 1861              		.loc 1 932 24 view .LVU496
 1862 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1863 0008 44F20103 		movw	r3, #16385
 1864              	.LBE1452:
 1865              	.LBE1451:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1866              		.loc 1 238 5 view .LVU497
 1867 000c 0B40     		ands	r3, r3, r1
 1868 000e B3F5804F 		cmp	r3, #16384
 1869 0012 09D0     		beq	.L148
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1870              		.loc 1 238 19 discriminator 1 view .LVU498
 1871 0014 8028     		cmp	r0, #128
 1872 0016 02D0     		beq	.L155
 243:src/xeq.c     **** }
 1873              		.loc 1 243 3 is_stmt 1 view .LVU499
 243:src/xeq.c     **** }
 1874              		.loc 1 243 10 is_stmt 0 view .LVU500
 1875 0018 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1876              	.LVL132:
 243:src/xeq.c     **** }
 1877              		.loc 1 243 10 view .LVU501
 1878 001c 7047     		bx	lr
 1879              	.LVL133:
 1880              	.L155:
 1881              	.LBB1453:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1882              		.loc 1 239 3 is_stmt 1 view .LVU502
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1883              		.loc 1 239 24 is_stmt 0 view .LVU503
 1884 001e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1885              	.LVL134:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1886              		.loc 1 239 13 view .LVU504
 1887 0022 0C38     		subs	r0, r0, #12
 1888              	.LVL135:
 240:src/xeq.c     **** 	}
 1889              		.loc 1 240 3 is_stmt 1 view .LVU505
 1890              	.L153:
 240:src/xeq.c     **** 	}
 1891              		.loc 1 240 67 is_stmt 0 discriminator 1 view .LVU506
 1892 0024 4010     		asrs	r0, r0, #1
 1893              	.LVL136:
 240:src/xeq.c     **** 	}
 1894              		.loc 1 240 67 discriminator 1 view .LVU507
 1895 0026 7047     		bx	lr
 1896              	.LVL137:
 1897              	.L148:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1898              		.loc 1 239 3 is_stmt 1 view .LVU508
 240:src/xeq.c     **** 	}
ARM GAS  /tmp/cciWh9P3.s 			page 127


 1899              		.loc 1 240 56 is_stmt 0 view .LVU509
 1900 0028 A0F17E03 		sub	r3, r0, #126
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1901              		.loc 1 239 24 view .LVU510
 1902 002c 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 240:src/xeq.c     **** 	}
 1903              		.loc 1 240 56 view .LVU511
 1904 0030 012B     		cmp	r3, #1
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1905              		.loc 1 239 13 view .LVU512
 1906 0032 A2F10C00 		sub	r0, r2, #12
 1907              	.LVL138:
 240:src/xeq.c     **** 	}
 1908              		.loc 1 240 3 is_stmt 1 view .LVU513
 240:src/xeq.c     **** 	}
 1909              		.loc 1 240 56 is_stmt 0 view .LVU514
 1910 0036 F5D8     		bhi	.L153
 1911              	.LBE1453:
 244:src/xeq.c     **** 
 1912              		.loc 1 244 1 view .LVU515
 1913 0038 7047     		bx	lr
 1914              	.L157:
 1915 003a 00BF     		.align	2
 1916              	.L156:
 1917 003c 00000000 		.word	main_ram
 1918              		.cfi_endproc
 1919              	.LFE8:
 1921              		.section	.text.global_regs,"ax",%progbits
 1922              		.align	1
 1923              		.p2align 2,,3
 1924              		.global	global_regs
 1925              		.syntax unified
 1926              		.thumb
 1927              		.thumb_func
 1928              		.fpu fpv4-sp-d16
 1930              	global_regs:
 1931              	.LFB9:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 1932              		.loc 1 249 32 is_stmt 1 view -0
 1933              		.cfi_startproc
 1934              		@ args = 0, pretend = 0, frame = 0
 1935              		@ frame_needed = 0, uses_anonymous_args = 0
 1936              		@ link register save eliminated.
 250:src/xeq.c     **** }
 1937              		.loc 1 250 2 view .LVU517
 1938              	.LVL139:
 1939              	.LBB1454:
 1940              	.LBI1454:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1941              		.loc 1 237 14 view .LVU518
 1942              	.LBB1455:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1943              		.loc 1 238 2 view .LVU519
 1944              	.LBB1456:
 1945              	.LBI1456:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1946              		.loc 1 931 5 view .LVU520
ARM GAS  /tmp/cciWh9P3.s 			page 128


 1947              	.LBB1457:
 932:src/xeq.c     **** }
 1948              		.loc 1 932 2 view .LVU521
 932:src/xeq.c     **** }
 1949              		.loc 1 932 12 is_stmt 0 view .LVU522
 1950 0000 074B     		ldr	r3, .L161
 1951 0002 1A68     		ldr	r2, [r3]
 932:src/xeq.c     **** }
 1952              		.loc 1 932 24 view .LVU523
 1953 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1954              	.LBE1457:
 1955              	.LBE1456:
 1956              	.LBB1459:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1957              		.loc 1 239 24 view .LVU524
 1958 0008 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1959              	.LBE1459:
 1960              	.LBB1460:
 1961              	.LBB1458:
 932:src/xeq.c     **** }
 1962              		.loc 1 932 24 view .LVU525
 1963 000c 44F20103 		movw	r3, #16385
 1964              	.LBE1458:
 1965              	.LBE1460:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1966              		.loc 1 238 5 view .LVU526
 1967 0010 0B40     		ands	r3, r3, r1
 1968 0012 B3F5804F 		cmp	r3, #16384
 1969              	.LBB1461:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1970              		.loc 1 239 3 is_stmt 1 view .LVU527
 240:src/xeq.c     **** 	}
 1971              		.loc 1 240 3 view .LVU528
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1972              		.loc 1 239 13 is_stmt 0 view .LVU529
 1973 0016 04BF     		itt	eq
 1974 0018 0C38     		subeq	r0, r0, #12
 240:src/xeq.c     **** 	}
 1975              		.loc 1 240 67 view .LVU530
 1976 001a 4010     		asreq	r0, r0, #1
 1977              	.LBE1461:
 243:src/xeq.c     **** }
 1978              		.loc 1 243 3 is_stmt 1 view .LVU531
 1979              	.LVL140:
 243:src/xeq.c     **** }
 1980              		.loc 1 243 3 is_stmt 0 view .LVU532
 1981              	.LBE1455:
 1982              	.LBE1454:
 251:src/xeq.c     **** 
 1983              		.loc 1 251 1 view .LVU533
 1984 001c 7047     		bx	lr
 1985              	.L162:
 1986 001e 00BF     		.align	2
 1987              	.L161:
 1988 0020 00000000 		.word	main_ram
 1989              		.cfi_endproc
 1990              	.LFE9:
ARM GAS  /tmp/cciWh9P3.s 			page 129


 1992              		.section	.text.version,"ax",%progbits
 1993              		.align	1
 1994              		.p2align 2,,3
 1995              		.global	version
 1996              		.syntax unified
 1997              		.thumb
 1998              		.thumb_func
 1999              		.fpu fpv4-sp-d16
 2001              	version:
 2002              	.LVL141:
 2003              	.LFB10:
 263:src/xeq.c     **** 	State2.version = 1;
 2004              		.loc 1 263 29 is_stmt 1 view -0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 0
 2007              		@ frame_needed = 0, uses_anonymous_args = 0
 2008              		@ link register save eliminated.
 264:src/xeq.c     **** 	if (!State2.runmode)
 2009              		.loc 1 264 2 view .LVU535
 264:src/xeq.c     **** 	if (!State2.runmode)
 2010              		.loc 1 264 17 is_stmt 0 view .LVU536
 2011 0000 054B     		ldr	r3, .L166
 2012 0002 5A7D     		ldrb	r2, [r3, #21]	@ zero_extendqisi2
 265:src/xeq.c     **** 		display();
 2013              		.loc 1 265 6 view .LVU537
 2014 0004 997D     		ldrb	r1, [r3, #22]	@ zero_extendqisi2
 264:src/xeq.c     **** 	if (!State2.runmode)
 2015              		.loc 1 264 17 view .LVU538
 2016 0006 42F01002 		orr	r2, r2, #16
 2017 000a 5A75     		strb	r2, [r3, #21]
 265:src/xeq.c     **** 		display();
 2018              		.loc 1 265 2 is_stmt 1 view .LVU539
 265:src/xeq.c     **** 		display();
 2019              		.loc 1 265 5 is_stmt 0 view .LVU540
 2020 000c 4B06     		lsls	r3, r1, #25
 2021 000e 00D5     		bpl	.L165
 267:src/xeq.c     **** 
 2022              		.loc 1 267 1 view .LVU541
 2023 0010 7047     		bx	lr
 2024              	.L165:
 266:src/xeq.c     **** }
 2025              		.loc 1 266 3 is_stmt 1 view .LVU542
 2026 0012 FFF7FEBF 		b	display
 2027              	.LVL142:
 2028              	.L167:
 266:src/xeq.c     **** }
 2029              		.loc 1 266 3 is_stmt 0 view .LVU543
 2030 0016 00BF     		.align	2
 2031              	.L166:
 2032 0018 00000000 		.word	StateWhileOn
 2033              		.cfi_endproc
 2034              	.LFE10:
 2036              		.section	.text.cmd_off,"ax",%progbits
 2037              		.align	1
 2038              		.p2align 2,,3
 2039              		.global	cmd_off
 2040              		.syntax unified
ARM GAS  /tmp/cciWh9P3.s 			page 130


 2041              		.thumb
 2042              		.thumb_func
 2043              		.fpu fpv4-sp-d16
 2045              	cmd_off:
 2046              	.LVL143:
 2047              	.LFB11:
 269:src/xeq.c     **** 	shutdown();
 2048              		.loc 1 269 29 is_stmt 1 view -0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
 2052              		@ link register save eliminated.
 270:src/xeq.c     **** }
 2053              		.loc 1 270 2 view .LVU545
 2054 0000 FFF7FEBF 		b	shutdown
 2055              	.LVL144:
 270:src/xeq.c     **** }
 2056              		.loc 1 270 2 is_stmt 0 view .LVU546
 2057              		.cfi_endproc
 2058              	.LFE11:
 2060              		.section	.text.init_RegionTab,"ax",%progbits
 2061              		.align	1
 2062              		.p2align 2,,3
 2063              		.global	init_RegionTab
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2067              		.fpu fpv4-sp-d16
 2069              	init_RegionTab:
 2070              	.LFB13:
 293:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 2071              		.loc 1 293 28 is_stmt 1 view -0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
 294:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2076              		.loc 1 294 3 view .LVU548
 294:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2077              		.loc 1 294 30 is_stmt 0 view .LVU549
 2078 0000 0649     		ldr	r1, .L170
 295:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2079              		.loc 1 295 30 view .LVU550
 2080 0002 074A     		ldr	r2, .L170+4
 296:src/xeq.c     **** }
 2081              		.loc 1 296 30 view .LVU551
 2082 0004 074B     		ldr	r3, .L170+8
 294:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2083              		.loc 1 294 30 view .LVU552
 2084 0006 0868     		ldr	r0, [r1]
 295:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2085              		.loc 1 295 30 view .LVU553
 2086 0008 1168     		ldr	r1, [r2]
 296:src/xeq.c     **** }
 2087              		.loc 1 296 30 view .LVU554
 2088 000a 1A68     		ldr	r2, [r3]
 294:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
ARM GAS  /tmp/cciWh9P3.s 			page 131


 2089              		.loc 1 294 16 view .LVU555
 2090 000c 064B     		ldr	r3, .L170+12
 294:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2091              		.loc 1 294 30 view .LVU556
 2092 000e 0430     		adds	r0, r0, #4
 295:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2093              		.loc 1 295 30 view .LVU557
 2094 0010 0431     		adds	r1, r1, #4
 296:src/xeq.c     **** }
 2095              		.loc 1 296 30 view .LVU558
 2096 0012 0432     		adds	r2, r2, #4
 295:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2097              		.loc 1 295 16 view .LVU559
 2098 0014 C3E90001 		strd	r0, r1, [r3]
 296:src/xeq.c     **** }
 2099              		.loc 1 296 3 is_stmt 1 view .LVU560
 296:src/xeq.c     **** }
 2100              		.loc 1 296 16 is_stmt 0 view .LVU561
 2101 0018 9A60     		str	r2, [r3, #8]
 297:src/xeq.c     **** #else
 2102              		.loc 1 297 1 view .LVU562
 2103 001a 7047     		bx	lr
 2104              	.L171:
 2105              		.align	2
 2106              	.L170:
 2107 001c 00000000 		.word	main_ram
 2108 0020 00000000 		.word	library_ram
 2109 0024 00000000 		.word	backup_ram
 2110 0028 00000000 		.word	.LANCHOR0
 2111              		.cfi_endproc
 2112              	.LFE13:
 2114              		.section	.text.sizeLIB,"ax",%progbits
 2115              		.align	1
 2116              		.p2align 2,,3
 2117              		.global	sizeLIB
 2118              		.syntax unified
 2119              		.thumb
 2120              		.thumb_func
 2121              		.fpu fpv4-sp-d16
 2123              	sizeLIB:
 2124              	.LVL145:
 2125              	.LFB14:
 309:src/xeq.c     **** 	if (region == REGION_XROM)
 2126              		.loc 1 309 25 is_stmt 1 view -0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 0
 2129              		@ frame_needed = 0, uses_anonymous_args = 0
 2130              		@ link register save eliminated.
 310:src/xeq.c     **** 		return xrom_size;
 2131              		.loc 1 310 2 view .LVU564
 310:src/xeq.c     **** 		return xrom_size;
 2132              		.loc 1 310 5 is_stmt 0 view .LVU565
 2133 0000 0328     		cmp	r0, #3
 2134 0002 05D0     		beq	.L175
 313:src/xeq.c     **** }
 2135              		.loc 1 313 3 is_stmt 1 view .LVU566
 313:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 132


 2136              		.loc 1 313 24 is_stmt 0 view .LVU567
 2137 0004 044B     		ldr	r3, .L176
 313:src/xeq.c     **** }
 2138              		.loc 1 313 32 view .LVU568
 2139 0006 53F82030 		ldr	r3, [r3, r0, lsl #2]
 313:src/xeq.c     **** }
 2140              		.loc 1 313 10 view .LVU569
 2141 000a 33F8020C 		ldrh	r0, [r3, #-2]
 2142              	.LVL146:
 314:src/xeq.c     **** 
 2143              		.loc 1 314 1 view .LVU570
 2144 000e 7047     		bx	lr
 2145              	.LVL147:
 2146              	.L175:
 311:src/xeq.c     **** 	else
 2147              		.loc 1 311 3 is_stmt 1 view .LVU571
 311:src/xeq.c     **** 	else
 2148              		.loc 1 311 10 is_stmt 0 view .LVU572
 2149 0010 024B     		ldr	r3, .L176+4
 2150 0012 1888     		ldrh	r0, [r3]
 2151              	.LVL148:
 311:src/xeq.c     **** 	else
 2152              		.loc 1 311 10 view .LVU573
 2153 0014 7047     		bx	lr
 2154              	.L177:
 2155 0016 00BF     		.align	2
 2156              	.L176:
 2157 0018 00000000 		.word	.LANCHOR0
 2158 001c 00000000 		.word	xrom_size
 2159              		.cfi_endproc
 2160              	.LFE14:
 2162              		.section	.text.getprog,"ax",%progbits
 2163              		.align	1
 2164              		.p2align 2,,3
 2165              		.global	getprog
 2166              		.syntax unified
 2167              		.thumb
 2168              		.thumb_func
 2169              		.fpu fpv4-sp-d16
 2171              	getprog:
 2172              	.LVL149:
 2173              	.LFB16:
 333:src/xeq.c     **** 
 2174              		.loc 1 333 33 is_stmt 1 view -0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178              		@ link register save eliminated.
 335:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2179              		.loc 1 335 2 view .LVU575
 336:src/xeq.c     **** 
 2180              		.loc 1 336 15 is_stmt 0 view .LVU576
 2181 0000 C0F30D02 		ubfx	r2, r0, #0, #14
 2182 0004 531E     		subs	r3, r2, #1
 335:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2183              		.loc 1 335 21 view .LVU577
 2184 0006 800B     		lsrs	r0, r0, #14
ARM GAS  /tmp/cciWh9P3.s 			page 133


 2185              	.LVL150:
 336:src/xeq.c     **** 
 2186              		.loc 1 336 2 is_stmt 1 view .LVU578
 338:src/xeq.c     **** 		return OP_NIL | OP_END;
 2187              		.loc 1 338 2 view .LVU579
 338:src/xeq.c     **** 		return OP_NIL | OP_END;
 2188              		.loc 1 338 5 is_stmt 0 view .LVU580
 2189 0008 BAB1     		cbz	r2, .L184
 2190              	.LVL151:
 2191              	.LBB1462:
 2192              	.LBI1462:
 309:src/xeq.c     **** 	if (region == REGION_XROM)
 2193              		.loc 1 309 5 is_stmt 1 view .LVU581
 2194              	.LBB1463:
 310:src/xeq.c     **** 		return xrom_size;
 2195              		.loc 1 310 2 view .LVU582
 310:src/xeq.c     **** 		return xrom_size;
 2196              		.loc 1 310 5 is_stmt 0 view .LVU583
 2197 000a 0328     		cmp	r0, #3
 2198 000c 18D0     		beq	.L185
 313:src/xeq.c     **** }
 2199              		.loc 1 313 3 is_stmt 1 view .LVU584
 313:src/xeq.c     **** }
 2200              		.loc 1 313 24 is_stmt 0 view .LVU585
 2201 000e 0E4A     		ldr	r2, .L187
 313:src/xeq.c     **** }
 2202              		.loc 1 313 32 view .LVU586
 2203 0010 52F82020 		ldr	r2, [r2, r0, lsl #2]
 313:src/xeq.c     **** }
 2204              		.loc 1 313 10 view .LVU587
 2205 0014 32F8022C 		ldrh	r2, [r2, #-2]
 2206              	.L181:
 2207              	.LVL152:
 313:src/xeq.c     **** }
 2208              		.loc 1 313 10 view .LVU588
 2209              	.LBE1463:
 2210              	.LBE1462:
 338:src/xeq.c     **** 		return OP_NIL | OP_END;
 2211              		.loc 1 338 17 view .LVU589
 2212 0018 9342     		cmp	r3, r2
 2213 001a 0EDA     		bge	.L184
 340:src/xeq.c     **** }
 2214              		.loc 1 340 2 is_stmt 1 view .LVU590
 340:src/xeq.c     **** }
 2215              		.loc 1 340 29 is_stmt 0 view .LVU591
 2216 001c 0A4A     		ldr	r2, .L187
 340:src/xeq.c     **** }
 2217              		.loc 1 340 38 view .LVU592
 2218 001e 52F82020 		ldr	r2, [r2, r0, lsl #2]
 2219              	.LBB1465:
 2220              	.LBB1466:
 322:src/xeq.c     **** 	if ( isDBL(r) ) {
 2221              		.loc 1 322 13 view .LVU593
 2222 0022 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 2223              	.LVL153:
 323:src/xeq.c     **** 		r |= loc[1] << 16;
 2224              		.loc 1 323 5 view .LVU594
ARM GAS  /tmp/cciWh9P3.s 			page 134


 2225 0026 00F47041 		and	r1, r0, #61440
 2226 002a B1F5704F 		cmp	r1, #61440
 2227              	.LBE1466:
 2228              	.LBE1465:
 340:src/xeq.c     **** }
 2229              		.loc 1 340 38 view .LVU595
 2230 002e 02EB4303 		add	r3, r2, r3, lsl #1
 2231              	.LVL154:
 2232              	.LBB1469:
 2233              	.LBI1465:
 320:src/xeq.c     **** {
 2234              		.loc 1 320 15 is_stmt 1 view .LVU596
 2235              	.LBB1467:
 322:src/xeq.c     **** 	if ( isDBL(r) ) {
 2236              		.loc 1 322 2 view .LVU597
 323:src/xeq.c     **** 		r |= loc[1] << 16;
 2237              		.loc 1 323 2 view .LVU598
 323:src/xeq.c     **** 		r |= loc[1] << 16;
 2238              		.loc 1 323 5 is_stmt 0 view .LVU599
 2239 0032 00D0     		beq	.L186
 2240              	.LBE1467:
 2241              	.LBE1469:
 341:src/xeq.c     **** 
 2242              		.loc 1 341 1 view .LVU600
 2243 0034 7047     		bx	lr
 2244              	.L186:
 2245              	.LBB1470:
 2246              	.LBB1468:
 324:src/xeq.c     **** 	}
 2247              		.loc 1 324 3 is_stmt 1 view .LVU601
 324:src/xeq.c     **** 	}
 2248              		.loc 1 324 5 is_stmt 0 view .LVU602
 2249 0036 1868     		ldr	r0, [r3]	@ unaligned
 2250              	.LVL155:
 324:src/xeq.c     **** 	}
 2251              		.loc 1 324 5 view .LVU603
 2252 0038 7047     		bx	lr
 2253              	.LVL156:
 2254              	.L184:
 324:src/xeq.c     **** 	}
 2255              		.loc 1 324 5 view .LVU604
 2256              	.LBE1468:
 2257              	.LBE1470:
 339:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 2258              		.loc 1 339 10 view .LVU605
 2259 003a 4FF49D70 		mov	r0, #314
 2260              	.LVL157:
 341:src/xeq.c     **** 
 2261              		.loc 1 341 1 view .LVU606
 2262 003e 7047     		bx	lr
 2263              	.LVL158:
 2264              	.L185:
 2265              	.LBB1471:
 2266              	.LBB1464:
 311:src/xeq.c     **** 	else
 2267              		.loc 1 311 3 is_stmt 1 view .LVU607
 311:src/xeq.c     **** 	else
ARM GAS  /tmp/cciWh9P3.s 			page 135


 2268              		.loc 1 311 10 is_stmt 0 view .LVU608
 2269 0040 024A     		ldr	r2, .L187+4
 2270 0042 1288     		ldrh	r2, [r2]
 2271 0044 E8E7     		b	.L181
 2272              	.L188:
 2273 0046 00BF     		.align	2
 2274              	.L187:
 2275 0048 00000000 		.word	.LANCHOR0
 2276 004c 00000000 		.word	xrom_size
 2277              	.LBE1464:
 2278              	.LBE1471:
 2279              		.cfi_endproc
 2280              	.LFE16:
 2282              		.section	.text.get_current_prog,"ax",%progbits
 2283              		.align	1
 2284              		.p2align 2,,3
 2285              		.global	get_current_prog
 2286              		.syntax unified
 2287              		.thumb
 2288              		.thumb_func
 2289              		.fpu fpv4-sp-d16
 2291              	get_current_prog:
 2292              	.LFB17:
 347:src/xeq.c     **** 
 2293              		.loc 1 347 40 is_stmt 1 view -0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
 2297              		@ link register save eliminated.
 349:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2298              		.loc 1 349 2 view .LVU610
 349:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2299              		.loc 1 349 21 is_stmt 0 view .LVU611
 2300 0000 074B     		ldr	r3, .L190
 350:src/xeq.c     **** }
 2301              		.loc 1 350 18 view .LVU612
 2302 0002 084A     		ldr	r2, .L190+4
 349:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2303              		.loc 1 349 21 view .LVU613
 2304 0004 1B68     		ldr	r3, [r3]
 2305 0006 B3F8EC37 		ldrh	r3, [r3, #2028]
 2306              	.LVL159:
 350:src/xeq.c     **** }
 2307              		.loc 1 350 2 is_stmt 1 view .LVU614
 349:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2308              		.loc 1 349 12 is_stmt 0 view .LVU615
 2309 000a 990B     		lsrs	r1, r3, #14
 350:src/xeq.c     **** }
 2310              		.loc 1 350 27 view .LVU616
 2311 000c C3F30D03 		ubfx	r3, r3, #0, #14
 2312              	.LVL160:
 350:src/xeq.c     **** }
 2313              		.loc 1 350 27 view .LVU617
 2314 0010 52F82100 		ldr	r0, [r2, r1, lsl #2]
 2315 0014 03F10043 		add	r3, r3, #-2147483648
 2316 0018 013B     		subs	r3, r3, #1
 351:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 136


 2317              		.loc 1 351 1 view .LVU618
 2318 001a 00EB4300 		add	r0, r0, r3, lsl #1
 2319 001e 7047     		bx	lr
 2320              	.L191:
 2321              		.align	2
 2322              	.L190:
 2323 0020 00000000 		.word	main_ram
 2324 0024 00000000 		.word	.LANCHOR0
 2325              		.cfi_endproc
 2326              	.LFE17:
 2328              		.section	.text.do_inc,"ax",%progbits
 2329              		.align	1
 2330              		.p2align 2,,3
 2331              		.global	do_inc
 2332              		.syntax unified
 2333              		.thumb
 2334              		.thumb_func
 2335              		.fpu fpv4-sp-d16
 2337              	do_inc:
 2338              	.LVL161:
 2339              	.LFB20:
 408:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2340              		.loc 1 408 54 is_stmt 1 view -0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 16
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 409:src/xeq.c     **** 	unsigned short int top = 0;
 2344              		.loc 1 409 2 view .LVU620
 408:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2345              		.loc 1 408 54 is_stmt 0 view .LVU621
 2346 0000 70B5     		push	{r4, r5, r6, lr}
 2347              		.cfi_def_cfa_offset 16
 2348              		.cfi_offset 4, -16
 2349              		.cfi_offset 5, -12
 2350              		.cfi_offset 6, -8
 2351              		.cfi_offset 14, -4
 2352 0002 84B0     		sub	sp, sp, #16
 2353              		.cfi_def_cfa_offset 32
 408:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2354              		.loc 1 408 54 view .LVU622
 2355 0004 0546     		mov	r5, r0
 2356 0006 0191     		str	r1, [sp, #4]
 409:src/xeq.c     **** 	unsigned short int top = 0;
 2357              		.loc 1 409 42 view .LVU623
 2358 0008 FFF7FEFF 		bl	getprog
 2359              	.LVL162:
 413:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2360              		.loc 1 413 12 view .LVU624
 2361 000c 0D4E     		ldr	r6, .L196
 414:src/xeq.c     **** 
 2362              		.loc 1 414 11 view .LVU625
 2363 000e 0199     		ldr	r1, [sp, #4]
 409:src/xeq.c     **** 	unsigned short int top = 0;
 2364              		.loc 1 409 42 view .LVU626
 2365 0010 00F47040 		and	r0, r0, #61440
 409:src/xeq.c     **** 	unsigned short int top = 0;
 2366              		.loc 1 409 27 view .LVU627
ARM GAS  /tmp/cciWh9P3.s 			page 137


 2367 0014 6C1C     		adds	r4, r5, #1
 410:src/xeq.c     **** 	unsigned short int bottom = 0;
 2368              		.loc 1 410 21 view .LVU628
 2369 0016 0023     		movs	r3, #0
 409:src/xeq.c     **** 	unsigned short int top = 0;
 2370              		.loc 1 409 27 view .LVU629
 2371 0018 B0F5704F 		cmp	r0, #61440
 2372 001c 08BF     		it	eq
 2373 001e 0134     		addeq	r4, r4, #1
 414:src/xeq.c     **** 
 2374              		.loc 1 414 11 view .LVU630
 2375 0020 0DF10E02 		add	r2, sp, #14
 2376 0024 2846     		mov	r0, r5
 413:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2377              		.loc 1 413 12 view .LVU631
 2378 0026 3360     		str	r3, [r6]
 410:src/xeq.c     **** 	unsigned short int bottom = 0;
 2379              		.loc 1 410 21 view .LVU632
 2380 0028 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 414:src/xeq.c     **** 
 2381              		.loc 1 414 11 view .LVU633
 2382 002c FFF7FEFF 		bl	find_section_bounds
 2383              	.LVL163:
 409:src/xeq.c     **** 	unsigned short int top = 0;
 2384              		.loc 1 409 27 view .LVU634
 2385 0030 A4B2     		uxth	r4, r4
 2386              	.LVL164:
 410:src/xeq.c     **** 	unsigned short int bottom = 0;
 2387              		.loc 1 410 2 is_stmt 1 view .LVU635
 411:src/xeq.c     **** 
 2388              		.loc 1 411 2 view .LVU636
 413:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2389              		.loc 1 413 2 view .LVU637
 414:src/xeq.c     **** 
 2390              		.loc 1 414 2 view .LVU638
 416:src/xeq.c     **** 		PcWrapped = 1;
 2391              		.loc 1 416 2 view .LVU639
 416:src/xeq.c     **** 		PcWrapped = 1;
 2392              		.loc 1 416 5 is_stmt 0 view .LVU640
 2393 0032 8442     		cmp	r4, r0
 417:src/xeq.c     **** 		return top;
 2394              		.loc 1 417 3 is_stmt 1 view .LVU641
 418:src/xeq.c     **** 	}
 2395              		.loc 1 418 10 is_stmt 0 view .LVU642
 2396 0034 85BF     		ittet	hi
 2397 0036 BDF80E00 		ldrhhi	r0, [sp, #14]
 2398              	.LVL165:
 417:src/xeq.c     **** 		return top;
 2399              		.loc 1 417 13 view .LVU643
 2400 003a 0123     		movhi	r3, #1
 420:src/xeq.c     **** }
 2401              		.loc 1 420 9 view .LVU644
 2402 003c 2046     		movls	r0, r4
 417:src/xeq.c     **** 		return top;
 2403              		.loc 1 417 13 view .LVU645
 2404 003e 3360     		strhi	r3, [r6]
 418:src/xeq.c     **** 	}
ARM GAS  /tmp/cciWh9P3.s 			page 138


 2405              		.loc 1 418 3 is_stmt 1 view .LVU646
 420:src/xeq.c     **** }
 2406              		.loc 1 420 2 view .LVU647
 421:src/xeq.c     **** 
 2407              		.loc 1 421 1 is_stmt 0 view .LVU648
 2408 0040 04B0     		add	sp, sp, #16
 2409              		.cfi_def_cfa_offset 16
 2410              		@ sp needed
 2411 0042 70BD     		pop	{r4, r5, r6, pc}
 2412              	.LVL166:
 2413              	.L197:
 421:src/xeq.c     **** 
 2414              		.loc 1 421 1 view .LVU649
 2415              		.align	2
 2416              	.L196:
 2417 0044 00000000 		.word	PcWrapped
 2418              		.cfi_endproc
 2419              	.LFE20:
 2421              		.section	.text.user_pc.part.0,"ax",%progbits
 2422              		.align	1
 2423              		.p2align 2,,3
 2424              		.syntax unified
 2425              		.thumb
 2426              		.thumb_func
 2427              		.fpu fpv4-sp-d16
 2429              	user_pc.part.0:
 2430              	.LVL167:
 2431              	.LFB274:
 484:src/xeq.c     **** 	unsigned int n = 1;
 2432              		.loc 1 484 14 is_stmt 1 view -0
 2433              		.cfi_startproc
 2434              		@ args = 0, pretend = 0, frame = 0
 2435              		@ frame_needed = 0, uses_anonymous_args = 0
 495:src/xeq.c     **** 	while (base < pc) {
 2436              		.loc 1 495 2 view .LVU651
 495:src/xeq.c     **** 	while (base < pc) {
 2437              		.loc 1 495 9 is_stmt 0 view .LVU652
 2438 0000 20F47F53 		bic	r3, r0, #16320
 2439 0004 23F03F03 		bic	r3, r3, #63
 484:src/xeq.c     **** 	unsigned int n = 1;
 2440              		.loc 1 484 14 view .LVU653
 2441 0008 70B5     		push	{r4, r5, r6, lr}
 2442              		.cfi_def_cfa_offset 16
 2443              		.cfi_offset 4, -16
 2444              		.cfi_offset 5, -12
 2445              		.cfi_offset 6, -8
 2446              		.cfi_offset 14, -4
 484:src/xeq.c     **** 	unsigned int n = 1;
 2447              		.loc 1 484 14 view .LVU654
 2448 000a 0546     		mov	r5, r0
 495:src/xeq.c     **** 	while (base < pc) {
 2449              		.loc 1 495 7 view .LVU655
 2450 000c 581C     		adds	r0, r3, #1
 2451              	.LVL168:
 496:src/xeq.c     **** 		base = do_inc(base, 0);
 2452              		.loc 1 496 2 is_stmt 1 view .LVU656
 496:src/xeq.c     **** 		base = do_inc(base, 0);
ARM GAS  /tmp/cciWh9P3.s 			page 139


 2453              		.loc 1 496 8 view .LVU657
 2454 000e 8542     		cmp	r5, r0
 2455 0010 0ED9     		bls	.L201
 2456 0012 084E     		ldr	r6, .L205
 485:src/xeq.c     **** 	unsigned int base;
 2457              		.loc 1 485 15 is_stmt 0 view .LVU658
 2458 0014 0124     		movs	r4, #1
 2459 0016 03E0     		b	.L200
 2460              	.LVL169:
 2461              	.L204:
 496:src/xeq.c     **** 		base = do_inc(base, 0);
 2462              		.loc 1 496 8 view .LVU659
 2463 0018 8542     		cmp	r5, r0
 500:src/xeq.c     **** 	}
 2464              		.loc 1 500 3 view .LVU660
 2465 001a 04F10104 		add	r4, r4, #1
 2466              	.LVL170:
 496:src/xeq.c     **** 		base = do_inc(base, 0);
 2467              		.loc 1 496 8 is_stmt 1 view .LVU661
 2468 001e 05D9     		bls	.L198
 2469              	.LVL171:
 2470              	.L200:
 497:src/xeq.c     **** 		if (PcWrapped)
 2471              		.loc 1 497 3 view .LVU662
 497:src/xeq.c     **** 		if (PcWrapped)
 2472              		.loc 1 497 10 is_stmt 0 view .LVU663
 2473 0020 0021     		movs	r1, #0
 2474 0022 FFF7FEFF 		bl	do_inc
 2475              	.LVL172:
 500:src/xeq.c     **** 	}
 2476              		.loc 1 500 3 is_stmt 1 view .LVU664
 498:src/xeq.c     **** 			return n;
 2477              		.loc 1 498 6 is_stmt 0 view .LVU665
 2478 0026 3368     		ldr	r3, [r6]
 2479              	.LVL173:
 498:src/xeq.c     **** 			return n;
 2480              		.loc 1 498 3 is_stmt 1 view .LVU666
 498:src/xeq.c     **** 			return n;
 2481              		.loc 1 498 6 is_stmt 0 view .LVU667
 2482 0028 002B     		cmp	r3, #0
 2483 002a F5D0     		beq	.L204
 2484              	.LVL174:
 2485              	.L198:
 503:src/xeq.c     **** 
 2486              		.loc 1 503 1 view .LVU668
 2487 002c 2046     		mov	r0, r4
 2488              	.LVL175:
 503:src/xeq.c     **** 
 2489              		.loc 1 503 1 view .LVU669
 2490 002e 70BD     		pop	{r4, r5, r6, pc}
 2491              	.LVL176:
 2492              	.L201:
 485:src/xeq.c     **** 	unsigned int base;
 2493              		.loc 1 485 15 view .LVU670
 2494 0030 0124     		movs	r4, #1
 2495 0032 FBE7     		b	.L198
 2496              	.L206:
ARM GAS  /tmp/cciWh9P3.s 			page 140


 2497              		.align	2
 2498              	.L205:
 2499 0034 00000000 		.word	PcWrapped
 2500              		.cfi_endproc
 2501              	.LFE274:
 2503              		.section	.rodata.print_step.str1.4,"aMS",%progbits,1
 2504              		.align	2
 2505              	.LC0:
 2506 0000 3030303A 		.ascii	"000:\000"
 2506      00
 2507              		.section	.text.print_step,"ax",%progbits
 2508              		.align	1
 2509              		.p2align 2,,3
 2510              		.syntax unified
 2511              		.thumb
 2512              		.thumb_func
 2513              		.fpu fpv4-sp-d16
 2515              	print_step:
 2516              	.LVL177:
 2517              	.LFB227:
4172:src/xeq.c     **** 	char buf[16];
 2518              		.loc 1 4172 41 is_stmt 1 view -0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 16
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
4173:src/xeq.c     **** 	const unsigned int pc = state_pc();
 2522              		.loc 1 4173 2 view .LVU672
4174:src/xeq.c     **** 	char *p = TraceBuffer;
 2523              		.loc 1 4174 2 view .LVU673
4174:src/xeq.c     **** 	char *p = TraceBuffer;
 2524              		.loc 1 4174 26 is_stmt 0 view .LVU674
 2525 0000 254B     		ldr	r3, .L221
 2526 0002 1B68     		ldr	r3, [r3]
4172:src/xeq.c     **** 	char buf[16];
 2527              		.loc 1 4172 41 view .LVU675
 2528 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 2529              		.cfi_def_cfa_offset 20
 2530              		.cfi_offset 4, -20
 2531              		.cfi_offset 5, -16
 2532              		.cfi_offset 6, -12
 2533              		.cfi_offset 7, -8
 2534              		.cfi_offset 14, -4
4174:src/xeq.c     **** 	char *p = TraceBuffer;
 2535              		.loc 1 4174 26 view .LVU676
 2536 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 2537              	.LVL178:
4175:src/xeq.c     **** 
 2538              		.loc 1 4175 2 is_stmt 1 view .LVU677
4177:src/xeq.c     **** 		*p++ = 'x';
 2539              		.loc 1 4177 2 view .LVU678
4177:src/xeq.c     **** 		*p++ = 'x';
 2540              		.loc 1 4177 6 is_stmt 0 view .LVU679
 2541 000a A10B     		lsrs	r1, r4, #14
4177:src/xeq.c     **** 		*p++ = 'x';
 2542              		.loc 1 4177 5 view .LVU680
 2543 000c 0329     		cmp	r1, #3
4172:src/xeq.c     **** 	char buf[16];
ARM GAS  /tmp/cciWh9P3.s 			page 141


 2544              		.loc 1 4172 41 view .LVU681
 2545 000e 85B0     		sub	sp, sp, #20
 2546              		.cfi_def_cfa_offset 40
4172:src/xeq.c     **** 	char buf[16];
 2547              		.loc 1 4172 41 view .LVU682
 2548 0010 0546     		mov	r5, r0
4177:src/xeq.c     **** 		*p++ = 'x';
 2549              		.loc 1 4177 5 view .LVU683
 2550 0012 39D0     		beq	.L218
4179:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2551              		.loc 1 4179 9 is_stmt 1 view .LVU684
4179:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2552              		.loc 1 4179 12 is_stmt 0 view .LVU685
 2553 0014 14F4404F 		tst	r4, #49152
 2554 0018 0FD1     		bne	.L219
4175:src/xeq.c     **** 
 2555              		.loc 1 4175 8 view .LVU686
 2556 001a 204E     		ldr	r6, .L221+4
 2557 001c 3746     		mov	r7, r6
 2558              	.LVL179:
4183:src/xeq.c     **** 		scopy(p, "000:");
 2559              		.loc 1 4183 2 is_stmt 1 view .LVU687
4183:src/xeq.c     **** 		scopy(p, "000:");
 2560              		.loc 1 4183 5 is_stmt 0 view .LVU688
 2561 001e BCB9     		cbnz	r4, .L220
 2562              	.LVL180:
 2563              	.L212:
4184:src/xeq.c     **** 	else {
 2564              		.loc 1 4184 3 is_stmt 1 view .LVU689
 2565 0020 1F49     		ldr	r1, .L221+8
 2566 0022 3846     		mov	r0, r7
 2567 0024 FFF7FEFF 		bl	scopy
 2568              	.LVL181:
 2569              	.L211:
4192:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2570              		.loc 1 4192 2 view .LVU690
4192:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2571              		.loc 1 4192 20 is_stmt 0 view .LVU691
 2572 0028 1E4A     		ldr	r2, .L221+12
4193:src/xeq.c     **** }
 2573              		.loc 1 4193 10 view .LVU692
 2574 002a 1F49     		ldr	r1, .L221+16
4192:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2575              		.loc 1 4192 20 view .LVU693
 2576 002c 937D     		ldrb	r3, [r2, #22]	@ zero_extendqisi2
4193:src/xeq.c     **** }
 2577              		.loc 1 4193 10 view .LVU694
 2578 002e 0E60     		str	r6, [r1]
4192:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2579              		.loc 1 4192 20 view .LVU695
 2580 0030 43F08003 		orr	r3, r3, #128
 2581 0034 9375     		strb	r3, [r2, #22]
4193:src/xeq.c     **** }
 2582              		.loc 1 4193 2 is_stmt 1 view .LVU696
4194:src/xeq.c     **** 
 2583              		.loc 1 4194 1 is_stmt 0 view .LVU697
 2584 0036 05B0     		add	sp, sp, #20
ARM GAS  /tmp/cciWh9P3.s 			page 142


 2585              		.cfi_remember_state
 2586              		.cfi_def_cfa_offset 20
 2587              		@ sp needed
 2588 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 2589              	.LVL182:
 2590              	.L219:
 2591              		.cfi_restore_state
4180:src/xeq.c     **** 		*p++ = ' ';
 2592              		.loc 1 4180 3 is_stmt 1 view .LVU698
4180:src/xeq.c     **** 		*p++ = ' ';
 2593              		.loc 1 4180 7 is_stmt 0 view .LVU699
 2594 003a 1848     		ldr	r0, .L221+4
 2595              	.LVL183:
4180:src/xeq.c     **** 		*p++ = ' ';
 2596              		.loc 1 4180 7 view .LVU700
 2597 003c 0122     		movs	r2, #1
 2598 003e 0646     		mov	r6, r0
 2599 0040 FFF7FEFF 		bl	num_arg_0
 2600              	.LVL184:
4181:src/xeq.c     **** 	}
 2601              		.loc 1 4181 3 is_stmt 1 view .LVU701
4181:src/xeq.c     **** 	}
 2602              		.loc 1 4181 5 is_stmt 0 view .LVU702
 2603 0044 0746     		mov	r7, r0
 2604              	.LVL185:
4181:src/xeq.c     **** 	}
 2605              		.loc 1 4181 8 view .LVU703
 2606 0046 2023     		movs	r3, #32
 2607 0048 07F8013B 		strb	r3, [r7], #1
 2608              	.LVL186:
4183:src/xeq.c     **** 		scopy(p, "000:");
 2609              		.loc 1 4183 2 is_stmt 1 view .LVU704
4183:src/xeq.c     **** 		scopy(p, "000:");
 2610              		.loc 1 4183 5 is_stmt 0 view .LVU705
 2611 004c 002C     		cmp	r4, #0
 2612 004e E7D0     		beq	.L212
 2613              	.L220:
 2614              	.LVL187:
 2615              	.LBB1472:
 2616              	.LBB1473:
4183:src/xeq.c     **** 		scopy(p, "000:");
 2617              		.loc 1 4183 5 view .LVU706
 2618 0050 2046     		mov	r0, r4
 2619 0052 FFF7FEFF 		bl	user_pc.part.0
 2620              	.LVL188:
 2621 0056 0146     		mov	r1, r0
 2622              	.L209:
4183:src/xeq.c     **** 		scopy(p, "000:");
 2623              		.loc 1 4183 5 view .LVU707
 2624              	.LBE1473:
 2625              	.LBE1472:
4186:src/xeq.c     **** 		*p++ = ':';
 2626              		.loc 1 4186 7 view .LVU708
 2627 0058 0322     		movs	r2, #3
 2628 005a 3846     		mov	r0, r7
 2629 005c FFF7FEFF 		bl	num_arg_0
 2630              	.LVL189:
ARM GAS  /tmp/cciWh9P3.s 			page 143


4187:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2631              		.loc 1 4187 8 view .LVU709
 2632 0060 0746     		mov	r7, r0
 2633 0062 3A23     		movs	r3, #58
 2634 0064 07F8013B 		strb	r3, [r7], #1
4186:src/xeq.c     **** 		*p++ = ':';
 2635              		.loc 1 4186 7 view .LVU710
 2636 0068 0446     		mov	r4, r0
 2637              	.LVL190:
4187:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2638              		.loc 1 4187 3 is_stmt 1 view .LVU711
4188:src/xeq.c     **** 		if (*p == '?')
 2639              		.loc 1 4188 3 view .LVU712
 2640 006a 6946     		mov	r1, sp
 2641 006c 2846     		mov	r0, r5
 2642 006e FFF7FEFF 		bl	prt
 2643              	.LVL191:
 2644 0072 0022     		movs	r2, #0
 2645 0074 0146     		mov	r1, r0
 2646 0076 3846     		mov	r0, r7
 2647 0078 FFF7FEFF 		bl	scopy_char
 2648              	.LVL192:
4189:src/xeq.c     **** 			*p = '\0';
 2649              		.loc 1 4189 3 view .LVU713
4189:src/xeq.c     **** 			*p = '\0';
 2650              		.loc 1 4189 6 is_stmt 0 view .LVU714
 2651 007c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2652 007e 3F2B     		cmp	r3, #63
4190:src/xeq.c     **** 	}
 2653              		.loc 1 4190 4 is_stmt 1 view .LVU715
4190:src/xeq.c     **** 	}
 2654              		.loc 1 4190 7 is_stmt 0 view .LVU716
 2655 0080 04BF     		itt	eq
 2656 0082 0023     		moveq	r3, #0
 2657 0084 6370     		strbeq	r3, [r4, #1]
 2658 0086 CFE7     		b	.L211
 2659              	.LVL193:
 2660              	.L218:
4178:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2661              		.loc 1 4178 3 is_stmt 1 view .LVU717
4178:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2662              		.loc 1 4178 8 is_stmt 0 view .LVU718
 2663 0088 044E     		ldr	r6, .L221+4
 2664 008a 3746     		mov	r7, r6
 2665 008c 7823     		movs	r3, #120
 2666 008e 07F8013B 		strb	r3, [r7], #1
4183:src/xeq.c     **** 		scopy(p, "000:");
 2667              		.loc 1 4183 2 is_stmt 1 view .LVU719
4186:src/xeq.c     **** 		*p++ = ':';
 2668              		.loc 1 4186 3 view .LVU720
 2669              	.LBB1475:
 2670              	.LBI1472:
 484:src/xeq.c     **** 	unsigned int n = 1;
 2671              		.loc 1 484 14 view .LVU721
 2672              	.LBB1474:
 485:src/xeq.c     **** 	unsigned int base;
 2673              		.loc 1 485 2 view .LVU722
ARM GAS  /tmp/cciWh9P3.s 			page 144


 2674              	.LVL194:
 486:src/xeq.c     **** 
 2675              		.loc 1 486 2 view .LVU723
 489:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 2676              		.loc 1 489 2 view .LVU724
 490:src/xeq.c     **** #else
 2677              		.loc 1 490 3 view .LVU725
 490:src/xeq.c     **** #else
 2678              		.loc 1 490 24 is_stmt 0 view .LVU726
 2679 0092 C4F30D01 		ubfx	r1, r4, #0, #14
 2680 0096 DFE7     		b	.L209
 2681              	.L222:
 2682              		.align	2
 2683              	.L221:
 2684 0098 00000000 		.word	main_ram
 2685 009c 00000000 		.word	TraceBuffer
 2686 00a0 00000000 		.word	.LC0
 2687 00a4 00000000 		.word	StateWhileOn
 2688 00a8 00000000 		.word	DispMsg
 2689              	.LBE1474:
 2690              	.LBE1475:
 2691              		.cfi_endproc
 2692              	.LFE227:
 2694              		.section	.text.do_dec,"ax",%progbits
 2695              		.align	1
 2696              		.p2align 2,,3
 2697              		.global	do_dec
 2698              		.syntax unified
 2699              		.thumb
 2700              		.thumb_func
 2701              		.fpu fpv4-sp-d16
 2703              	do_dec:
 2704              	.LVL195:
 2705              	.LFB21:
 427:src/xeq.c     **** 	unsigned short int top = 0;
 2706              		.loc 1 427 48 is_stmt 1 view -0
 2707              		.cfi_startproc
 2708              		@ args = 0, pretend = 0, frame = 8
 2709              		@ frame_needed = 0, uses_anonymous_args = 0
 428:src/xeq.c     **** 	unsigned short int bottom = 0;
 2710              		.loc 1 428 2 view .LVU728
 427:src/xeq.c     **** 	unsigned short int top = 0;
 2711              		.loc 1 427 48 is_stmt 0 view .LVU729
 2712 0000 70B5     		push	{r4, r5, r6, lr}
 2713              		.cfi_def_cfa_offset 16
 2714              		.cfi_offset 4, -16
 2715              		.cfi_offset 5, -12
 2716              		.cfi_offset 6, -8
 2717              		.cfi_offset 14, -4
 431:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2718              		.loc 1 431 12 view .LVU730
 2719 0002 114E     		ldr	r6, .L228
 427:src/xeq.c     **** 	unsigned short int top = 0;
 2720              		.loc 1 427 48 view .LVU731
 2721 0004 82B0     		sub	sp, sp, #8
 2722              		.cfi_def_cfa_offset 24
 428:src/xeq.c     **** 	unsigned short int bottom = 0;
ARM GAS  /tmp/cciWh9P3.s 			page 145


 2723              		.loc 1 428 21 view .LVU732
 2724 0006 0023     		movs	r3, #0
 432:src/xeq.c     **** 
 2725              		.loc 1 432 11 view .LVU733
 2726 0008 0DF10602 		add	r2, sp, #6
 427:src/xeq.c     **** 	unsigned short int top = 0;
 2727              		.loc 1 427 48 view .LVU734
 2728 000c 0546     		mov	r5, r0
 431:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2729              		.loc 1 431 12 view .LVU735
 2730 000e 3360     		str	r3, [r6]
 428:src/xeq.c     **** 	unsigned short int bottom = 0;
 2731              		.loc 1 428 21 view .LVU736
 2732 0010 ADF80630 		strh	r3, [sp, #6]	@ movhi
 429:src/xeq.c     **** 
 2733              		.loc 1 429 2 is_stmt 1 view .LVU737
 2734              	.LVL196:
 431:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2735              		.loc 1 431 2 view .LVU738
 432:src/xeq.c     **** 
 2736              		.loc 1 432 2 view .LVU739
 432:src/xeq.c     **** 
 2737              		.loc 1 432 11 is_stmt 0 view .LVU740
 2738 0014 FFF7FEFF 		bl	find_section_bounds
 2739              	.LVL197:
 434:src/xeq.c     **** 		PcWrapped = 1;
 2740              		.loc 1 434 9 view .LVU741
 2741 0018 BDF80630 		ldrh	r3, [sp, #6]
 2742              	.LVL198:
 434:src/xeq.c     **** 		PcWrapped = 1;
 2743              		.loc 1 434 2 is_stmt 1 view .LVU742
 434:src/xeq.c     **** 		PcWrapped = 1;
 2744              		.loc 1 434 5 is_stmt 0 view .LVU743
 2745 001c AB42     		cmp	r3, r5
 435:src/xeq.c     **** 		pc = bottom;
 2746              		.loc 1 435 13 view .LVU744
 2747 001e 25BF     		ittet	cs
 2748 0020 0122     		movcs	r2, #1
 2749 0022 0446     		movcs	r4, r0
 435:src/xeq.c     **** 		pc = bottom;
 2750              		.loc 1 435 3 is_stmt 1 view .LVU745
 439:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2751              		.loc 1 439 3 is_stmt 0 view .LVU746
 2752 0024 05F1FF34 		addcc	r4, r5, #-1
 435:src/xeq.c     **** 		pc = bottom;
 2753              		.loc 1 435 13 view .LVU747
 2754 0028 3260     		strcs	r2, [r6]
 436:src/xeq.c     **** 	}
 2755              		.loc 1 436 3 is_stmt 1 view .LVU748
 2756              	.LVL199:
 439:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2757              		.loc 1 439 3 view .LVU749
 440:src/xeq.c     **** 		--pc;
 2758              		.loc 1 440 2 view .LVU750
 440:src/xeq.c     **** 		--pc;
 2759              		.loc 1 440 5 is_stmt 0 view .LVU751
 2760 002a A342     		cmp	r3, r4
ARM GAS  /tmp/cciWh9P3.s 			page 146


 2761 002c 09D2     		bcs	.L223
 440:src/xeq.c     **** 		--pc;
 2762              		.loc 1 440 18 discriminator 1 view .LVU752
 2763 002e 651E     		subs	r5, r4, #1
 2764 0030 2846     		mov	r0, r5
 2765              	.LVL200:
 440:src/xeq.c     **** 		--pc;
 2766              		.loc 1 440 18 discriminator 1 view .LVU753
 2767 0032 FFF7FEFF 		bl	getprog
 2768              	.LVL201:
 2769 0036 00F47040 		and	r0, r0, #61440
 441:src/xeq.c     **** 	return pc;
 2770              		.loc 1 441 3 discriminator 1 view .LVU754
 2771 003a B0F5704F 		cmp	r0, #61440
 2772 003e 08BF     		it	eq
 2773 0040 2C46     		moveq	r4, r5
 2774              	.LVL202:
 2775              	.L223:
 443:src/xeq.c     **** 
 2776              		.loc 1 443 1 view .LVU755
 2777 0042 2046     		mov	r0, r4
 2778 0044 02B0     		add	sp, sp, #8
 2779              		.cfi_def_cfa_offset 16
 2780              		@ sp needed
 2781 0046 70BD     		pop	{r4, r5, r6, pc}
 2782              	.L229:
 2783              		.align	2
 2784              	.L228:
 2785 0048 00000000 		.word	PcWrapped
 2786              		.cfi_endproc
 2787              	.LFE21:
 2789              		.section	.text.update_program_bounds,"ax",%progbits
 2790              		.align	1
 2791              		.p2align 2,,3
 2792              		.global	update_program_bounds
 2793              		.syntax unified
 2794              		.thumb
 2795              		.thumb_func
 2796              		.fpu fpv4-sp-d16
 2798              	update_program_bounds:
 2799              	.LVL203:
 2800              	.LFB24:
 460:src/xeq.c     **** 	unsigned int pc = state_pc();
 2801              		.loc 1 460 45 is_stmt 1 view -0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 0
 2804              		@ frame_needed = 0, uses_anonymous_args = 0
 461:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2805              		.loc 1 461 2 view .LVU757
 460:src/xeq.c     **** 	unsigned int pc = state_pc();
 2806              		.loc 1 460 45 is_stmt 0 view .LVU758
 2807 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2808              		.cfi_def_cfa_offset 24
 2809              		.cfi_offset 3, -24
 2810              		.cfi_offset 4, -20
 2811              		.cfi_offset 5, -16
 2812              		.cfi_offset 6, -12
ARM GAS  /tmp/cciWh9P3.s 			page 147


 2813              		.cfi_offset 7, -8
 2814              		.cfi_offset 14, -4
 461:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2815              		.loc 1 461 20 view .LVU759
 2816 0002 224F     		ldr	r7, .L251
 2817 0004 3D68     		ldr	r5, [r7]
 461:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2818              		.loc 1 461 15 view .LVU760
 2819 0006 B5F8E047 		ldrh	r4, [r5, #2016]
 2820              	.LVL204:
 462:src/xeq.c     **** 		State.pc = pc = 1;
 2821              		.loc 1 462 2 is_stmt 1 view .LVU761
 462:src/xeq.c     **** 		State.pc = pc = 1;
 2822              		.loc 1 462 5 is_stmt 0 view .LVU762
 2823 000a 34B9     		cbnz	r4, .L231
 462:src/xeq.c     **** 		State.pc = pc = 1;
 2824              		.loc 1 462 14 discriminator 1 view .LVU763
 2825 000c 204B     		ldr	r3, .L251+4
 2826 000e 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2827 0010 5B06     		lsls	r3, r3, #25
 463:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2828              		.loc 1 463 3 is_stmt 1 discriminator 1 view .LVU764
 2829              	.LVL205:
 463:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2830              		.loc 1 463 12 is_stmt 0 discriminator 1 view .LVU765
 2831 0012 44BF     		itt	mi
 2832 0014 0124     		movmi	r4, #1
 2833 0016 A5F8E047 		strhmi	r4, [r5, #2016]	@ movhi
 2834              	.LVL206:
 2835              	.L231:
 464:src/xeq.c     **** 		return;
 2836              		.loc 1 464 2 is_stmt 1 view .LVU766
 464:src/xeq.c     **** 		return;
 2837              		.loc 1 464 5 is_stmt 0 view .LVU767
 2838 001a 18B9     		cbnz	r0, .L232
 464:src/xeq.c     **** 		return;
 2839              		.loc 1 464 23 discriminator 1 view .LVU768
 2840 001c B5F8EC37 		ldrh	r3, [r5, #2028]
 464:src/xeq.c     **** 		return;
 2841              		.loc 1 464 14 discriminator 1 view .LVU769
 2842 0020 A342     		cmp	r3, r4
 2843 0022 2DD9     		bls	.L248
 2844              	.L232:
 466:src/xeq.c     **** 		ProgEnd = pc;
 2845              		.loc 1 466 2 is_stmt 1 view .LVU770
 466:src/xeq.c     **** 		ProgEnd = pc;
 2846              		.loc 1 466 17 is_stmt 0 view .LVU771
 2847 0024 1B4E     		ldr	r6, .L251+8
 2848 0026 0023     		movs	r3, #0
 2849 0028 3360     		str	r3, [r6]
 466:src/xeq.c     **** 		ProgEnd = pc;
 2850              		.loc 1 466 22 is_stmt 1 view .LVU772
 2851 002a 05E0     		b	.L236
 2852              	.LVL207:
 2853              	.L249:
 466:src/xeq.c     **** 		ProgEnd = pc;
 2854              		.loc 1 466 39 is_stmt 0 discriminator 2 view .LVU773
ARM GAS  /tmp/cciWh9P3.s 			page 148


 2855 002c FFF7FEFF 		bl	do_inc
 2856              	.LVL208:
 466:src/xeq.c     **** 		ProgEnd = pc;
 2857              		.loc 1 466 2 discriminator 2 view .LVU774
 2858 0030 3368     		ldr	r3, [r6]
 2859 0032 3D68     		ldr	r5, [r7]
 466:src/xeq.c     **** 		ProgEnd = pc;
 2860              		.loc 1 466 39 discriminator 2 view .LVU775
 2861 0034 0446     		mov	r4, r0
 2862              	.LVL209:
 466:src/xeq.c     **** 		ProgEnd = pc;
 2863              		.loc 1 466 22 is_stmt 1 discriminator 2 view .LVU776
 466:src/xeq.c     **** 		ProgEnd = pc;
 2864              		.loc 1 466 2 is_stmt 0 discriminator 2 view .LVU777
 2865 0036 5BB9     		cbnz	r3, .L234
 2866              	.LVL210:
 2867              	.L236:
 467:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2868              		.loc 1 467 3 is_stmt 1 view .LVU778
 467:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2869              		.loc 1 467 11 is_stmt 0 view .LVU779
 2870 0038 A5F8EE47 		strh	r4, [r5, #2030]	@ movhi
 468:src/xeq.c     **** 			break;
 2871              		.loc 1 468 3 is_stmt 1 view .LVU780
 468:src/xeq.c     **** 			break;
 2872              		.loc 1 468 7 is_stmt 0 view .LVU781
 2873 003c 2046     		mov	r0, r4
 2874 003e FFF7FEFF 		bl	getprog
 2875              	.LVL211:
 466:src/xeq.c     **** 		ProgEnd = pc;
 2876              		.loc 1 466 34 is_stmt 1 view .LVU782
 468:src/xeq.c     **** 			break;
 2877              		.loc 1 468 7 is_stmt 0 view .LVU783
 2878 0042 0346     		mov	r3, r0
 468:src/xeq.c     **** 			break;
 2879              		.loc 1 468 6 view .LVU784
 2880 0044 B3F59D7F 		cmp	r3, #314
 466:src/xeq.c     **** 		ProgEnd = pc;
 2881              		.loc 1 466 39 view .LVU785
 2882 0048 4FF00001 		mov	r1, #0
 2883 004c 2046     		mov	r0, r4
 468:src/xeq.c     **** 			break;
 2884              		.loc 1 468 6 view .LVU786
 2885 004e EDD1     		bne	.L249
 2886              	.LVL212:
 2887              	.L234:
 472:src/xeq.c     **** 		const unsigned int opc = pc;
 2888              		.loc 1 472 2 is_stmt 1 view .LVU787
 472:src/xeq.c     **** 		const unsigned int opc = pc;
 2889              		.loc 1 472 10 is_stmt 0 view .LVU788
 2890 0050 B5F8E047 		ldrh	r4, [r5, #2016]
 2891              	.LVL213:
 472:src/xeq.c     **** 		const unsigned int opc = pc;
 2892              		.loc 1 472 10 view .LVU789
 2893 0054 04E0     		b	.L238
 2894              	.LVL214:
 2895              	.L250:
ARM GAS  /tmp/cciWh9P3.s 			page 149


 2896              	.LBB1476:
 475:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2897              		.loc 1 475 20 discriminator 1 view .LVU790
 2898 0056 FFF7FEFF 		bl	getprog
 2899              	.LVL215:
 475:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2900              		.loc 1 475 17 discriminator 1 view .LVU791
 2901 005a B0F59D7F 		cmp	r0, #314
 2902 005e 08D0     		beq	.L237
 2903              	.LVL216:
 2904              	.L238:
 473:src/xeq.c     **** 		pc = do_dec(opc, 0);
 2905              		.loc 1 473 3 is_stmt 1 view .LVU792
 474:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2906              		.loc 1 474 3 view .LVU793
 474:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2907              		.loc 1 474 8 is_stmt 0 view .LVU794
 2908 0060 2046     		mov	r0, r4
 2909 0062 0021     		movs	r1, #0
 2910 0064 FFF7FEFF 		bl	do_dec
 2911              	.LVL217:
 475:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2912              		.loc 1 475 6 view .LVU795
 2913 0068 3368     		ldr	r3, [r6]
 2914 006a 2546     		mov	r5, r4
 474:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2915              		.loc 1 474 8 view .LVU796
 2916 006c 0446     		mov	r4, r0
 2917              	.LVL218:
 475:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2918              		.loc 1 475 3 is_stmt 1 view .LVU797
 475:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2919              		.loc 1 475 6 is_stmt 0 view .LVU798
 2920 006e 002B     		cmp	r3, #0
 2921 0070 F1D0     		beq	.L250
 2922              	.LVL219:
 2923              	.L237:
 476:src/xeq.c     **** 			break;
 2924              		.loc 1 476 4 is_stmt 1 view .LVU799
 476:src/xeq.c     **** 			break;
 2925              		.loc 1 476 14 is_stmt 0 view .LVU800
 2926 0072 3B68     		ldr	r3, [r7]
 2927 0074 012D     		cmp	r5, #1
 2928 0076 38BF     		it	cc
 2929 0078 0125     		movcc	r5, #1
 2930              	.LVL220:
 476:src/xeq.c     **** 			break;
 2931              		.loc 1 476 14 view .LVU801
 2932 007a A3F8EC57 		strh	r5, [r3, #2028]	@ movhi
 477:src/xeq.c     **** 		}
 2933              		.loc 1 477 4 is_stmt 1 view .LVU802
 2934              	.LBE1476:
 480:src/xeq.c     **** 
 2935              		.loc 1 480 1 is_stmt 0 view .LVU803
 2936 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2937              	.LVL221:
 2938              	.L248:
ARM GAS  /tmp/cciWh9P3.s 			page 150


 464:src/xeq.c     **** 		return;
 2939              		.loc 1 464 42 discriminator 2 view .LVU804
 2940 0080 B5F8EE37 		ldrh	r3, [r5, #2030]
 464:src/xeq.c     **** 		return;
 2941              		.loc 1 464 33 discriminator 2 view .LVU805
 2942 0084 A342     		cmp	r3, r4
 2943 0086 CDD3     		bcc	.L232
 480:src/xeq.c     **** 
 2944              		.loc 1 480 1 view .LVU806
 2945 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2946              	.LVL222:
 2947              	.L252:
 480:src/xeq.c     **** 
 2948              		.loc 1 480 1 view .LVU807
 2949 008a 00BF     		.align	2
 2950              	.L251:
 2951 008c 00000000 		.word	main_ram
 2952 0090 00000000 		.word	StateWhileOn
 2953 0094 00000000 		.word	PcWrapped
 2954              		.cfi_endproc
 2955              	.LFE24:
 2957              		.section	.text.set_pc,"ax",%progbits
 2958              		.align	1
 2959              		.p2align 2,,3
 2960              		.global	set_pc
 2961              		.syntax unified
 2962              		.thumb
 2963              		.thumb_func
 2964              		.fpu fpv4-sp-d16
 2966              	set_pc:
 2967              	.LVL223:
 2968              	.LFB18:
 357:src/xeq.c     **** 	if (isRAM(pc)) {
 2969              		.loc 1 357 30 is_stmt 1 view -0
 2970              		.cfi_startproc
 2971              		@ args = 0, pretend = 0, frame = 0
 2972              		@ frame_needed = 0, uses_anonymous_args = 0
 358:src/xeq.c     **** 		if (pc > ProgSize)
 2973              		.loc 1 358 2 view .LVU809
 358:src/xeq.c     **** 		if (pc > ProgSize)
 2974              		.loc 1 358 5 is_stmt 0 view .LVU810
 2975 0000 10F4704F 		tst	r0, #61440
 357:src/xeq.c     **** 	if (isRAM(pc)) {
 2976              		.loc 1 357 30 view .LVU811
 2977 0004 38B5     		push	{r3, r4, r5, lr}
 2978              		.cfi_def_cfa_offset 16
 2979              		.cfi_offset 3, -16
 2980              		.cfi_offset 4, -12
 2981              		.cfi_offset 5, -8
 2982              		.cfi_offset 14, -4
 357:src/xeq.c     **** 	if (isRAM(pc)) {
 2983              		.loc 1 357 30 view .LVU812
 2984 0006 0446     		mov	r4, r0
 358:src/xeq.c     **** 		if (pc > ProgSize)
 2985              		.loc 1 358 5 view .LVU813
 2986 0008 15D1     		bne	.L254
 359:src/xeq.c     **** 			pc = ProgSize;
ARM GAS  /tmp/cciWh9P3.s 			page 151


 2987              		.loc 1 359 3 is_stmt 1 view .LVU814
 359:src/xeq.c     **** 			pc = ProgSize;
 2988              		.loc 1 359 12 is_stmt 0 view .LVU815
 2989 000a 264B     		ldr	r3, .L262
 2990 000c 1B68     		ldr	r3, [r3]
 2991 000e 5A88     		ldrh	r2, [r3, #2]
 2992 0010 9042     		cmp	r0, r2
 2993 0012 28BF     		it	cs
 2994 0014 1446     		movcs	r4, r2
 2995              	.LVL224:
 361:src/xeq.c     **** 			pc--;
 2996              		.loc 1 361 3 is_stmt 1 view .LVU816
 361:src/xeq.c     **** 			pc--;
 2997              		.loc 1 361 6 is_stmt 0 view .LVU817
 2998 0016 012C     		cmp	r4, #1
 2999 0018 06D9     		bls	.L255
 361:src/xeq.c     **** 			pc--;
 3000              		.loc 1 361 14 discriminator 1 view .LVU818
 3001 001a 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 3002 001e 02F47042 		and	r2, r2, #61440
 3003 0022 B2F5704F 		cmp	r2, #61440
 3004 0026 35D0     		beq	.L261
 3005              	.L255:
 370:src/xeq.c     **** }
 3006              		.loc 1 370 2 is_stmt 1 view .LVU819
 3007              	.LVL225:
 3008              	.LBB1477:
 3009              	.LBI1477:
 278:src/xeq.c     **** 	State.pc = pc;
 3010              		.loc 1 278 13 view .LVU820
 3011              	.LBB1478:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3012              		.loc 1 279 2 view .LVU821
 279:src/xeq.c     **** 	update_program_bounds(0);
 3013              		.loc 1 279 11 is_stmt 0 view .LVU822
 3014 0028 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 280:src/xeq.c     **** }
 3015              		.loc 1 280 2 is_stmt 1 view .LVU823
 3016 002c 0020     		movs	r0, #0
 3017              	.LBE1478:
 3018              	.LBE1477:
 371:src/xeq.c     **** 
 3019              		.loc 1 371 1 is_stmt 0 view .LVU824
 3020 002e BDE83840 		pop	{r3, r4, r5, lr}
 3021              		.cfi_remember_state
 3022              		.cfi_restore 14
 3023              		.cfi_restore 5
 3024              		.cfi_restore 4
 3025              		.cfi_restore 3
 3026              		.cfi_def_cfa_offset 0
 3027              	.LVL226:
 3028              	.LBB1486:
 3029              	.LBB1479:
 280:src/xeq.c     **** }
 3030              		.loc 1 280 2 view .LVU825
 3031 0032 FFF7FEBF 		b	update_program_bounds
 3032              	.LVL227:
ARM GAS  /tmp/cciWh9P3.s 			page 152


 3033              	.L254:
 3034              		.cfi_restore_state
 280:src/xeq.c     **** }
 3035              		.loc 1 280 2 view .LVU826
 3036              	.LBE1479:
 3037              	.LBE1486:
 363:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3038              		.loc 1 363 9 is_stmt 1 view .LVU827
 363:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3039              		.loc 1 363 14 is_stmt 0 view .LVU828
 3040 0036 820B     		lsrs	r2, r0, #14
 363:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3041              		.loc 1 363 12 view .LVU829
 3042 0038 032A     		cmp	r2, #3
 3043 003a 22D0     		beq	.L260
 3044              	.LBB1487:
 364:src/xeq.c     **** 		if (pc > n - 1)
 3045              		.loc 1 364 3 is_stmt 1 view .LVU830
 3046              	.LVL228:
 3047              	.LBB1488:
 3048              	.LBI1488:
 309:src/xeq.c     **** 	if (region == REGION_XROM)
 3049              		.loc 1 309 5 view .LVU831
 3050              	.LBB1489:
 310:src/xeq.c     **** 		return xrom_size;
 3051              		.loc 1 310 2 view .LVU832
 313:src/xeq.c     **** }
 3052              		.loc 1 313 3 view .LVU833
 313:src/xeq.c     **** }
 3053              		.loc 1 313 24 is_stmt 0 view .LVU834
 3054 003c 1A49     		ldr	r1, .L262+4
 3055              	.LBE1489:
 3056              	.LBE1488:
 364:src/xeq.c     **** 		if (pc > n - 1)
 3057              		.loc 1 364 26 view .LVU835
 3058 003e 1B4B     		ldr	r3, .L262+8
 3059              	.LBB1491:
 3060              	.LBB1490:
 313:src/xeq.c     **** }
 3061              		.loc 1 313 32 view .LVU836
 3062 0040 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3063              	.LBE1490:
 3064              	.LBE1491:
 364:src/xeq.c     **** 		if (pc > n - 1)
 3065              		.loc 1 364 39 view .LVU837
 3066 0044 32F8022C 		ldrh	r2, [r2, #-2]
 364:src/xeq.c     **** 		if (pc > n - 1)
 3067              		.loc 1 364 26 view .LVU838
 3068 0048 00EA0301 		and	r1, r0, r3
 364:src/xeq.c     **** 		if (pc > n - 1)
 3069              		.loc 1 364 39 view .LVU839
 3070 004c 0A44     		add	r2, r2, r1
 3071              	.LVL229:
 365:src/xeq.c     **** 			pc = n - 1;
 3072              		.loc 1 365 3 is_stmt 1 view .LVU840
 3073 004e 9042     		cmp	r0, r2
 3074 0050 28BF     		it	cs
ARM GAS  /tmp/cciWh9P3.s 			page 153


 3075 0052 1446     		movcs	r4, r2
 3076              	.LVL230:
 367:src/xeq.c     **** 			--pc;
 3077              		.loc 1 367 3 view .LVU841
 367:src/xeq.c     **** 			--pc;
 3078              		.loc 1 367 12 is_stmt 0 view .LVU842
 3079 0054 2340     		ands	r3, r3, r4
 3080 0056 0133     		adds	r3, r3, #1
 367:src/xeq.c     **** 			--pc;
 3081              		.loc 1 367 6 view .LVU843
 3082 0058 A342     		cmp	r3, r4
 3083 005a 12D2     		bcs	.L260
 367:src/xeq.c     **** 			--pc;
 3084              		.loc 1 367 28 discriminator 1 view .LVU844
 3085 005c 651E     		subs	r5, r4, #1
 3086 005e 2846     		mov	r0, r5
 3087 0060 FFF7FEFF 		bl	getprog
 3088              	.LVL231:
 367:src/xeq.c     **** 			--pc;
 3089              		.loc 1 367 28 discriminator 1 view .LVU845
 3090 0064 0F4B     		ldr	r3, .L262
 3091 0066 00F47040 		and	r0, r0, #61440
 3092 006a 1B68     		ldr	r3, [r3]
 367:src/xeq.c     **** 			--pc;
 3093              		.loc 1 367 25 discriminator 1 view .LVU846
 3094 006c B0F5704F 		cmp	r0, #61440
 368:src/xeq.c     **** 	}
 3095              		.loc 1 368 4 is_stmt 1 discriminator 1 view .LVU847
 3096              	.LVL232:
 368:src/xeq.c     **** 	}
 3097              		.loc 1 368 4 is_stmt 0 discriminator 1 view .LVU848
 3098 0070 08BF     		it	eq
 3099 0072 2C46     		moveq	r4, r5
 3100              	.LVL233:
 368:src/xeq.c     **** 	}
 3101              		.loc 1 368 4 discriminator 1 view .LVU849
 3102              	.LBE1487:
 370:src/xeq.c     **** }
 3103              		.loc 1 370 2 is_stmt 1 discriminator 1 view .LVU850
 3104              	.LBB1492:
 278:src/xeq.c     **** 	State.pc = pc;
 3105              		.loc 1 278 13 discriminator 1 view .LVU851
 3106              	.LBB1480:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3107              		.loc 1 279 2 discriminator 1 view .LVU852
 279:src/xeq.c     **** 	update_program_bounds(0);
 3108              		.loc 1 279 11 is_stmt 0 discriminator 1 view .LVU853
 3109 0074 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 280:src/xeq.c     **** }
 3110              		.loc 1 280 2 is_stmt 1 discriminator 1 view .LVU854
 3111 0078 0020     		movs	r0, #0
 3112              	.LBE1480:
 3113              	.LBE1492:
 371:src/xeq.c     **** 
 3114              		.loc 1 371 1 is_stmt 0 discriminator 1 view .LVU855
 3115 007a BDE83840 		pop	{r3, r4, r5, lr}
 3116              		.cfi_remember_state
ARM GAS  /tmp/cciWh9P3.s 			page 154


 3117              		.cfi_restore 14
 3118              		.cfi_restore 5
 3119              		.cfi_restore 4
 3120              		.cfi_restore 3
 3121              		.cfi_def_cfa_offset 0
 3122              	.LVL234:
 3123              	.LBB1493:
 3124              	.LBB1481:
 280:src/xeq.c     **** }
 3125              		.loc 1 280 2 discriminator 1 view .LVU856
 3126 007e FFF7FEBF 		b	update_program_bounds
 3127              	.LVL235:
 3128              	.L260:
 3129              		.cfi_restore_state
 280:src/xeq.c     **** }
 3130              		.loc 1 280 2 discriminator 1 view .LVU857
 3131 0082 084B     		ldr	r3, .L262
 3132 0084 1B68     		ldr	r3, [r3]
 280:src/xeq.c     **** }
 3133              		.loc 1 280 2 discriminator 1 view .LVU858
 3134              	.LBE1481:
 3135              	.LBE1493:
 370:src/xeq.c     **** }
 3136              		.loc 1 370 2 is_stmt 1 view .LVU859
 3137              	.LVL236:
 3138              	.LBB1494:
 278:src/xeq.c     **** 	State.pc = pc;
 3139              		.loc 1 278 13 view .LVU860
 3140              	.LBB1482:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3141              		.loc 1 279 2 view .LVU861
 280:src/xeq.c     **** }
 3142              		.loc 1 280 2 is_stmt 0 view .LVU862
 3143 0086 0020     		movs	r0, #0
 279:src/xeq.c     **** 	update_program_bounds(0);
 3144              		.loc 1 279 11 view .LVU863
 3145 0088 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 280:src/xeq.c     **** }
 3146              		.loc 1 280 2 is_stmt 1 view .LVU864
 3147              	.LBE1482:
 3148              	.LBE1494:
 371:src/xeq.c     **** 
 3149              		.loc 1 371 1 is_stmt 0 view .LVU865
 3150 008c BDE83840 		pop	{r3, r4, r5, lr}
 3151              		.cfi_remember_state
 3152              		.cfi_restore 14
 3153              		.cfi_restore 5
 3154              		.cfi_restore 4
 3155              		.cfi_restore 3
 3156              		.cfi_def_cfa_offset 0
 3157              	.LVL237:
 3158              	.LBB1495:
 3159              	.LBB1483:
 280:src/xeq.c     **** }
 3160              		.loc 1 280 2 view .LVU866
 3161 0090 FFF7FEBF 		b	update_program_bounds
 3162              	.LVL238:
ARM GAS  /tmp/cciWh9P3.s 			page 155


 3163              	.L261:
 3164              		.cfi_restore_state
 280:src/xeq.c     **** }
 3165              		.loc 1 280 2 view .LVU867
 3166              	.LBE1483:
 3167              	.LBE1495:
 362:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3168              		.loc 1 362 4 is_stmt 1 view .LVU868
 362:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3169              		.loc 1 362 6 is_stmt 0 view .LVU869
 3170 0094 013C     		subs	r4, r4, #1
 3171              	.LVL239:
 370:src/xeq.c     **** }
 3172              		.loc 1 370 2 is_stmt 1 view .LVU870
 3173              	.LBB1496:
 278:src/xeq.c     **** 	State.pc = pc;
 3174              		.loc 1 278 13 view .LVU871
 3175              	.LBB1484:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3176              		.loc 1 279 2 view .LVU872
 279:src/xeq.c     **** 	update_program_bounds(0);
 3177              		.loc 1 279 11 is_stmt 0 view .LVU873
 3178 0096 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 280:src/xeq.c     **** }
 3179              		.loc 1 280 2 is_stmt 1 view .LVU874
 3180 009a 0020     		movs	r0, #0
 3181              	.LBE1484:
 3182              	.LBE1496:
 371:src/xeq.c     **** 
 3183              		.loc 1 371 1 is_stmt 0 view .LVU875
 3184 009c BDE83840 		pop	{r3, r4, r5, lr}
 3185              		.cfi_restore 14
 3186              		.cfi_restore 5
 3187              		.cfi_restore 4
 3188              		.cfi_restore 3
 3189              		.cfi_def_cfa_offset 0
 3190              	.LVL240:
 3191              	.LBB1497:
 3192              	.LBB1485:
 280:src/xeq.c     **** }
 3193              		.loc 1 280 2 view .LVU876
 3194 00a0 FFF7FEBF 		b	update_program_bounds
 3195              	.LVL241:
 3196              	.L263:
 280:src/xeq.c     **** }
 3197              		.loc 1 280 2 view .LVU877
 3198              		.align	2
 3199              	.L262:
 3200 00a4 00000000 		.word	main_ram
 3201 00a8 00000000 		.word	.LANCHOR0
 3202 00ac 00C0FFFF 		.word	-16384
 3203              	.LBE1485:
 3204              	.LBE1497:
 3205              		.cfi_endproc
 3206              	.LFE18:
 3208              		.section	.text.incpc,"ax",%progbits
 3209              		.align	1
ARM GAS  /tmp/cciWh9P3.s 			page 156


 3210              		.p2align 2,,3
 3211              		.global	incpc
 3212              		.syntax unified
 3213              		.thumb
 3214              		.thumb_func
 3215              		.fpu fpv4-sp-d16
 3217              	incpc:
 3218              	.LFB22:
 448:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3219              		.loc 1 448 17 is_stmt 1 view -0
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 0
 3222              		@ frame_needed = 0, uses_anonymous_args = 0
 449:src/xeq.c     **** 	return PcWrapped;
 3223              		.loc 1 449 2 view .LVU879
 448:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3224              		.loc 1 448 17 is_stmt 0 view .LVU880
 3225 0000 10B5     		push	{r4, lr}
 3226              		.cfi_def_cfa_offset 8
 3227              		.cfi_offset 4, -8
 3228              		.cfi_offset 14, -4
 449:src/xeq.c     **** 	return PcWrapped;
 3229              		.loc 1 449 20 view .LVU881
 3230 0002 084C     		ldr	r4, .L266
 3231 0004 2368     		ldr	r3, [r4]
 449:src/xeq.c     **** 	return PcWrapped;
 3232              		.loc 1 449 2 view .LVU882
 3233 0006 0121     		movs	r1, #1
 3234 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3235 000c FFF7FEFF 		bl	do_inc
 3236              	.LVL242:
 3237              	.LBB1498:
 3238              	.LBB1499:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3239              		.loc 1 279 11 view .LVU883
 3240 0010 2368     		ldr	r3, [r4]
 3241              	.LBE1499:
 3242              	.LBE1498:
 449:src/xeq.c     **** 	return PcWrapped;
 3243              		.loc 1 449 2 view .LVU884
 3244 0012 0246     		mov	r2, r0
 3245              	.LVL243:
 3246              	.LBB1501:
 3247              	.LBI1498:
 278:src/xeq.c     **** 	State.pc = pc;
 3248              		.loc 1 278 13 is_stmt 1 view .LVU885
 3249              	.LBB1500:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3250              		.loc 1 279 2 view .LVU886
 279:src/xeq.c     **** 	update_program_bounds(0);
 3251              		.loc 1 279 11 is_stmt 0 view .LVU887
 3252 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 280:src/xeq.c     **** }
 3253              		.loc 1 280 2 is_stmt 1 view .LVU888
 3254 0018 0020     		movs	r0, #0
 3255              	.LVL244:
 280:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 157


 3256              		.loc 1 280 2 is_stmt 0 view .LVU889
 3257 001a FFF7FEFF 		bl	update_program_bounds
 3258              	.LVL245:
 280:src/xeq.c     **** }
 3259              		.loc 1 280 2 view .LVU890
 3260              	.LBE1500:
 3261              	.LBE1501:
 450:src/xeq.c     **** }
 3262              		.loc 1 450 2 is_stmt 1 view .LVU891
 450:src/xeq.c     **** }
 3263              		.loc 1 450 9 is_stmt 0 view .LVU892
 3264 001e 024B     		ldr	r3, .L266+4
 451:src/xeq.c     **** 
 3265              		.loc 1 451 1 view .LVU893
 3266 0020 1868     		ldr	r0, [r3]
 3267 0022 10BD     		pop	{r4, pc}
 3268              	.L267:
 3269              		.align	2
 3270              	.L266:
 3271 0024 00000000 		.word	main_ram
 3272 0028 00000000 		.word	PcWrapped
 3273              		.cfi_endproc
 3274              	.LFE22:
 3276              		.section	.text.decpc,"ax",%progbits
 3277              		.align	1
 3278              		.p2align 2,,3
 3279              		.global	decpc
 3280              		.syntax unified
 3281              		.thumb
 3282              		.thumb_func
 3283              		.fpu fpv4-sp-d16
 3285              	decpc:
 3286              	.LFB23:
 453:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3287              		.loc 1 453 18 is_stmt 1 view -0
 3288              		.cfi_startproc
 3289              		@ args = 0, pretend = 0, frame = 0
 3290              		@ frame_needed = 0, uses_anonymous_args = 0
 454:src/xeq.c     **** }
 3291              		.loc 1 454 2 view .LVU895
 453:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3292              		.loc 1 453 18 is_stmt 0 view .LVU896
 3293 0000 10B5     		push	{r4, lr}
 3294              		.cfi_def_cfa_offset 8
 3295              		.cfi_offset 4, -8
 3296              		.cfi_offset 14, -4
 454:src/xeq.c     **** }
 3297              		.loc 1 454 20 view .LVU897
 3298 0002 084C     		ldr	r4, .L270
 3299 0004 2368     		ldr	r3, [r4]
 454:src/xeq.c     **** }
 3300              		.loc 1 454 2 view .LVU898
 3301 0006 0121     		movs	r1, #1
 3302 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3303 000c FFF7FEFF 		bl	do_dec
 3304              	.LVL246:
 3305              	.LBB1502:
ARM GAS  /tmp/cciWh9P3.s 			page 158


 3306              	.LBB1503:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3307              		.loc 1 279 11 view .LVU899
 3308 0010 2368     		ldr	r3, [r4]
 3309              	.LBE1503:
 3310              	.LBE1502:
 454:src/xeq.c     **** }
 3311              		.loc 1 454 2 view .LVU900
 3312 0012 0246     		mov	r2, r0
 3313              	.LVL247:
 3314              	.LBB1506:
 3315              	.LBI1502:
 278:src/xeq.c     **** 	State.pc = pc;
 3316              		.loc 1 278 13 is_stmt 1 view .LVU901
 3317              	.LBB1504:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3318              		.loc 1 279 2 view .LVU902
 3319              	.LBE1504:
 3320              	.LBE1506:
 455:src/xeq.c     **** 
 3321              		.loc 1 455 1 is_stmt 0 view .LVU903
 3322 0014 BDE81040 		pop	{r4, lr}
 3323              		.cfi_restore 14
 3324              		.cfi_restore 4
 3325              		.cfi_def_cfa_offset 0
 3326              	.LBB1507:
 3327              	.LBB1505:
 280:src/xeq.c     **** }
 3328              		.loc 1 280 2 view .LVU904
 3329 0018 0020     		movs	r0, #0
 3330              	.LVL248:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3331              		.loc 1 279 11 view .LVU905
 3332 001a A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 280:src/xeq.c     **** }
 3333              		.loc 1 280 2 is_stmt 1 view .LVU906
 3334 001e FFF7FEBF 		b	update_program_bounds
 3335              	.LVL249:
 3336              	.L271:
 280:src/xeq.c     **** }
 3337              		.loc 1 280 2 is_stmt 0 view .LVU907
 3338 0022 00BF     		.align	2
 3339              	.L270:
 3340 0024 00000000 		.word	main_ram
 3341              	.LBE1505:
 3342              	.LBE1507:
 3343              		.cfi_endproc
 3344              	.LFE23:
 3346              		.section	.text.fin_tst.part.0,"ax",%progbits
 3347              		.align	1
 3348              		.p2align 2,,3
 3349              		.syntax unified
 3350              		.thumb
 3351              		.thumb_func
 3352              		.fpu fpv4-sp-d16
 3354              	fin_tst.part.0:
 3355              	.LFB284:
ARM GAS  /tmp/cciWh9P3.s 			page 159


2337:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3356              		.loc 1 2337 6 is_stmt 1 view -0
 3357              		.cfi_startproc
 3358              		@ args = 0, pretend = 0, frame = 0
 3359              		@ frame_needed = 0, uses_anonymous_args = 0
 3360              	.LVL250:
2337:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3361              		.loc 1 2337 6 is_stmt 0 view .LVU909
 3362 0000 08B5     		push	{r3, lr}
 3363              		.cfi_def_cfa_offset 8
 3364              		.cfi_offset 3, -8
 3365              		.cfi_offset 14, -4
2340:src/xeq.c     **** 			decpc();
 3366              		.loc 1 2340 14 view .LVU910
 3367 0002 FFF7FEFF 		bl	incpc
 3368              	.LVL251:
2340:src/xeq.c     **** 			decpc();
 3369              		.loc 1 2340 11 view .LVU911
 3370 0006 00B9     		cbnz	r0, .L275
2351:src/xeq.c     **** 
 3371              		.loc 1 2351 1 view .LVU912
 3372 0008 08BD     		pop	{r3, pc}
 3373              	.L275:
2341:src/xeq.c     **** 	}
 3374              		.loc 1 2341 4 is_stmt 1 view .LVU913
2351:src/xeq.c     **** 
 3375              		.loc 1 2351 1 is_stmt 0 view .LVU914
 3376 000a BDE80840 		pop	{r3, lr}
 3377              		.cfi_restore 14
 3378              		.cfi_restore 3
 3379              		.cfi_def_cfa_offset 0
2341:src/xeq.c     **** 	}
 3380              		.loc 1 2341 4 view .LVU915
 3381 000e FFF7FEBF 		b	decpc
 3382              	.LVL252:
 3383              		.cfi_endproc
 3384              	.LFE284:
 3386 0012 00BF     		.section	.text.do_rtn,"ax",%progbits
 3387              		.align	1
 3388              		.p2align 2,,3
 3389              		.syntax unified
 3390              		.thumb
 3391              		.thumb_func
 3392              		.fpu fpv4-sp-d16
 3394              	do_rtn:
 3395              	.LVL253:
 3396              	.LFB150:
2042:src/xeq.c     **** 	unsigned short pc;
 3397              		.loc 1 2042 31 is_stmt 1 view -0
 3398              		.cfi_startproc
 3399              		@ args = 0, pretend = 0, frame = 0
 3400              		@ frame_needed = 0, uses_anonymous_args = 0
2043:src/xeq.c     **** 
 3401              		.loc 1 2043 2 view .LVU917
2045:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3402              		.loc 1 2045 2 view .LVU918
2042:src/xeq.c     **** 	unsigned short pc;
ARM GAS  /tmp/cciWh9P3.s 			page 160


 3403              		.loc 1 2042 31 is_stmt 0 view .LVU919
 3404 0000 70B5     		push	{r4, r5, r6, lr}
 3405              		.cfi_def_cfa_offset 16
 3406              		.cfi_offset 4, -16
 3407              		.cfi_offset 5, -12
 3408              		.cfi_offset 6, -8
 3409              		.cfi_offset 14, -4
2045:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3410              		.loc 1 2045 6 view .LVU920
 3411 0002 224C     		ldr	r4, .L290
 3412 0004 2368     		ldr	r3, [r4]
2045:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3413              		.loc 1 2045 5 view .LVU921
 3414 0006 B3F9E227 		ldrsh	r2, [r3, #2018]
 3415 000a 002A     		cmp	r2, #0
 3416 000c 0FDB     		blt	.L277
2047:src/xeq.c     **** 		raw_set_pc(ProgBegin);
 3417              		.loc 1 2047 3 is_stmt 1 view .LVU922
 3418              	.LBB1508:
 3419              	.LBI1508:
1408:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 3420              		.loc 1 1408 6 view .LVU923
 3421              	.LBB1509:
1409:src/xeq.c     **** }
 3422              		.loc 1 1409 2 view .LVU924
1409:src/xeq.c     **** }
 3423              		.loc 1 1409 24 is_stmt 0 view .LVU925
 3424 000e 0020     		movs	r0, #0
 3425              	.LVL254:
1409:src/xeq.c     **** }
 3426              		.loc 1 1409 24 view .LVU926
 3427              	.LBE1509:
 3428              	.LBE1508:
 3429              	.LBB1511:
 3430              	.LBB1512:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3431              		.loc 1 279 11 view .LVU927
 3432 0010 B3F8EC27 		ldrh	r2, [r3, #2028]
 3433              	.LBE1512:
 3434              	.LBE1511:
 3435              	.LBB1514:
 3436              	.LBB1510:
1409:src/xeq.c     **** }
 3437              		.loc 1 1409 24 view .LVU928
 3438 0014 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
1409:src/xeq.c     **** }
 3439              		.loc 1 1409 12 view .LVU929
 3440 0018 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 3441              	.LBE1510:
 3442              	.LBE1514:
2048:src/xeq.c     **** 	}
 3443              		.loc 1 2048 3 is_stmt 1 view .LVU930
 3444              	.LVL255:
 3445              	.LBB1515:
 3446              	.LBI1511:
 278:src/xeq.c     **** 	State.pc = pc;
 3447              		.loc 1 278 13 view .LVU931
ARM GAS  /tmp/cciWh9P3.s 			page 161


 3448              	.LBB1513:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3449              		.loc 1 279 2 view .LVU932
 279:src/xeq.c     **** 	update_program_bounds(0);
 3450              		.loc 1 279 11 is_stmt 0 view .LVU933
 3451 001c A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 280:src/xeq.c     **** }
 3452              		.loc 1 280 2 is_stmt 1 view .LVU934
 3453 0020 FFF7FEFF 		bl	update_program_bounds
 3454              	.LVL256:
 3455              	.L278:
 280:src/xeq.c     **** }
 3456              		.loc 1 280 2 is_stmt 0 view .LVU935
 3457              	.LBE1513:
 3458              	.LBE1515:
2061:src/xeq.c     **** 		// RTN with empty stack stops
 3459              		.loc 1 2061 2 is_stmt 1 view .LVU936
2061:src/xeq.c     **** 		// RTN with empty stack stops
 3460              		.loc 1 2061 6 is_stmt 0 view .LVU937
 3461 0024 2368     		ldr	r3, [r4]
2061:src/xeq.c     **** 		// RTN with empty stack stops
 3462              		.loc 1 2061 5 view .LVU938
 3463 0026 B3F9E217 		ldrsh	r1, [r3, #2018]
 3464 002a 09B3     		cbz	r1, .L289
2065:src/xeq.c     **** 
 3465              		.loc 1 2065 1 view .LVU939
 3466 002c 70BD     		pop	{r4, r5, r6, pc}
 3467              	.LVL257:
 3468              	.L277:
2053:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
 3469              		.loc 1 2053 3 is_stmt 1 view .LVU940
 3470 002e 0546     		mov	r5, r0
 3471 0030 FFF7FEFF 		bl	retstk_up
 3472              	.LVL258:
2054:src/xeq.c     **** 		raw_set_pc(pc);
 3473              		.loc 1 2054 3 view .LVU941
2054:src/xeq.c     **** 		raw_set_pc(pc);
 3474              		.loc 1 2054 15 is_stmt 0 view .LVU942
 3475 0034 2268     		ldr	r2, [r4]
2054:src/xeq.c     **** 		raw_set_pc(pc);
 3476              		.loc 1 2054 6 view .LVU943
 3477 0036 1649     		ldr	r1, .L290+4
2054:src/xeq.c     **** 		raw_set_pc(pc);
 3478              		.loc 1 2054 14 view .LVU944
 3479 0038 B2F9E237 		ldrsh	r3, [r2, #2018]
2054:src/xeq.c     **** 		raw_set_pc(pc);
 3480              		.loc 1 2054 6 view .LVU945
 3481 003c 0968     		ldr	r1, [r1]
2054:src/xeq.c     **** 		raw_set_pc(pc);
 3482              		.loc 1 2054 14 view .LVU946
 3483 003e 03F10043 		add	r3, r3, #-2147483648
 3484 0042 013B     		subs	r3, r3, #1
 3485              	.LBB1516:
 3486              	.LBB1517:
 280:src/xeq.c     **** }
 3487              		.loc 1 280 2 view .LVU947
 3488 0044 0020     		movs	r0, #0
ARM GAS  /tmp/cciWh9P3.s 			page 162


 3489              	.LBE1517:
 3490              	.LBE1516:
2054:src/xeq.c     **** 		raw_set_pc(pc);
 3491              		.loc 1 2054 6 view .LVU948
 3492 0046 31F81360 		ldrh	r6, [r1, r3, lsl #1]
 3493              	.LVL259:
2055:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
 3494              		.loc 1 2055 3 is_stmt 1 view .LVU949
 3495              	.LBB1519:
 3496              	.LBI1516:
 278:src/xeq.c     **** 	State.pc = pc;
 3497              		.loc 1 278 13 view .LVU950
 3498              	.LBB1518:
 279:src/xeq.c     **** 	update_program_bounds(0);
 3499              		.loc 1 279 2 view .LVU951
 279:src/xeq.c     **** 	update_program_bounds(0);
 3500              		.loc 1 279 11 is_stmt 0 view .LVU952
 3501 004a A2F8E067 		strh	r6, [r2, #2016]	@ movhi
 280:src/xeq.c     **** }
 3502              		.loc 1 280 2 is_stmt 1 view .LVU953
 3503 004e FFF7FEFF 		bl	update_program_bounds
 3504              	.LVL260:
 280:src/xeq.c     **** }
 3505              		.loc 1 280 2 is_stmt 0 view .LVU954
 3506              	.LBE1518:
 3507              	.LBE1519:
2057:src/xeq.c     **** 			if (incpc())
 3508              		.loc 1 2057 3 is_stmt 1 view .LVU955
2057:src/xeq.c     **** 			if (incpc())
 3509              		.loc 1 2057 6 is_stmt 0 view .LVU956
 3510 0052 002D     		cmp	r5, #0
 3511 0054 E6D0     		beq	.L278
2057:src/xeq.c     **** 			if (incpc())
 3512              		.loc 1 2057 16 discriminator 1 view .LVU957
 3513 0056 3046     		mov	r0, r6
 3514 0058 FFF7FEFF 		bl	getprog
 3515              	.LVL261:
2057:src/xeq.c     **** 			if (incpc())
 3516              		.loc 1 2057 13 discriminator 1 view .LVU958
 3517 005c B0F5C17F 		cmp	r0, #386
 3518 0060 E0D0     		beq	.L278
2058:src/xeq.c     **** 				decpc();
 3519              		.loc 1 2058 4 is_stmt 1 view .LVU959
2058:src/xeq.c     **** 				decpc();
 3520              		.loc 1 2058 8 is_stmt 0 view .LVU960
 3521 0062 FFF7FEFF 		bl	incpc
 3522              	.LVL262:
2058:src/xeq.c     **** 				decpc();
 3523              		.loc 1 2058 7 view .LVU961
 3524 0066 0028     		cmp	r0, #0
 3525 0068 DCD0     		beq	.L278
2059:src/xeq.c     **** 	}
 3526              		.loc 1 2059 5 is_stmt 1 view .LVU962
 3527 006a FFF7FEFF 		bl	decpc
 3528              	.LVL263:
 3529 006e D9E7     		b	.L278
 3530              	.LVL264:
ARM GAS  /tmp/cciWh9P3.s 			page 163


 3531              	.L289:
2063:src/xeq.c     **** 	}
 3532              		.loc 1 2063 3 view .LVU963
 3533              	.LBB1520:
 3534              	.LBI1520:
4919:src/xeq.c     **** 
4920:src/xeq.c     **** 
4921:src/xeq.c     **** /* Handle a command that takes an argument.  The argument is encoded
4922:src/xeq.c     ****  * in the low order bits of the opcode.  We also have to take
4923:src/xeq.c     ****  * account of the indirection flag and various limits.
4924:src/xeq.c     ****  */
4925:src/xeq.c     **** static void rargs(const opcode op) {
4926:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
4927:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
4928:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
4929:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
4930:src/xeq.c     **** 
4931:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
4932:src/xeq.c     **** 
4933:src/xeq.c     **** 	process_cmdline();
4934:src/xeq.c     **** 
4935:src/xeq.c     **** 	if (cmd >= NUM_RARG) {
4936:src/xeq.c     **** 		illegal(op);
4937:src/xeq.c     **** 		return;
4938:src/xeq.c     **** 	}
4939:src/xeq.c     **** 	if (isNULL(argcmds[cmd].f)) {
4940:src/xeq.c     **** 		set_lift();
4941:src/xeq.c     **** 		return;
4942:src/xeq.c     **** 	}
4943:src/xeq.c     **** 
4944:src/xeq.c     **** 	if (ind) {
4945:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
4946:src/xeq.c     **** 			// Get the argument by reading a register
4947:src/xeq.c     **** 			int sgn;
4948:src/xeq.c     **** 			unsigned long long int regval;
4949:src/xeq.c     **** 
4950:src/xeq.c     **** 			if (arg > get_reg_limit(RARG_RCL, arg)) {
4951:src/xeq.c     **** 				// Invalid register specified for indirect access
4952:src/xeq.c     **** 				report_err(ERR_RANGE);
4953:src/xeq.c     **** 				return;
4954:src/xeq.c     **** 			}
4955:src/xeq.c     **** 			regval = get_reg_n_int_sgn(arg, &sgn);
4956:src/xeq.c     **** 			if ((regval >> 32) != 0)
4957:src/xeq.c     **** 				goto range;
4958:src/xeq.c     **** 			arg = (unsigned int) regval;
4959:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
4960:src/xeq.c     **** 				// negative arguments address local registers or flags
4961:src/xeq.c     **** 				arg = LOCAL_REG_BASE + arg;
4962:src/xeq.c     **** 			}
4963:src/xeq.c     **** 		} 
4964:src/xeq.c     **** 		else {
4965:src/xeq.c     **** 			// put the top bit back in
4966:src/xeq.c     **** 			arg |= RARG_IND;
4967:src/xeq.c     **** 		}
4968:src/xeq.c     **** 	}
4969:src/xeq.c     **** 	if (argcmds[cmd].reg) {
4970:src/xeq.c     **** 		// Range checking for registers against variable boundary
ARM GAS  /tmp/cciWh9P3.s 			page 164


4971:src/xeq.c     **** 		lim = get_reg_limit(cmd, arg);
4972:src/xeq.c     **** 	}
4973:src/xeq.c     **** 	else if (argcmds[cmd].flag) {
4974:src/xeq.c     **** 		if (LocalRegs == 0)
4975:src/xeq.c     **** 			lim = NUMFLG - 1;
4976:src/xeq.c     **** 		else 
4977:src/xeq.c     **** 			lim = LOCAL_FLAG_BASE + MAX_LOCAL_DIRECT - 1;
4978:src/xeq.c     **** 	}
4979:src/xeq.c     **** 	if (arg > lim) {
4980:src/xeq.c     **** 		// Argument is too large
4981:src/xeq.c     **** range:		report_err(ERR_RANGE);
4982:src/xeq.c     **** 	}
4983:src/xeq.c     **** 	else if (argcmds[cmd].cmplx && arg >= TOPREALREG-1 && arg < NUMREG && (arg & 1)) {
4984:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
4985:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
4986:src/xeq.c     **** 	}
4987:src/xeq.c     **** 	else {
4988:src/xeq.c     **** 		// Dispatch the command
4989:src/xeq.c     **** 		FP_RARG fp = (FP_RARG) EXPAND_ADDRESS(argcmds[cmd].f);
4990:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
4991:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
4992:src/xeq.c     **** 			if (argcmds[cmd].label) {
4993:src/xeq.c     **** 				XromUserPc = find_label_from(state_pc(), arg, 0);
4994:src/xeq.c     **** 				if (XromUserPc == 0)
4995:src/xeq.c     **** 					return;
4996:src/xeq.c     **** 				if (! Running)
4997:src/xeq.c     **** 					clrretstk();
4998:src/xeq.c     **** 			}
4999:src/xeq.c     **** 			else
5000:src/xeq.c     **** 				XromArg = (unsigned char) arg;
5001:src/xeq.c     **** #else
5002:src/xeq.c     **** 			XromUserPc = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
5003:src/xeq.c     **** 			if (XromUserPc == 0)
5004:src/xeq.c     **** 				return;
5005:src/xeq.c     **** 			if (! Running)
5006:src/xeq.c     **** 				clrretstk();
5007:src/xeq.c     **** #endif
5008:src/xeq.c     **** 			dispatch_xrom(fp);
5009:src/xeq.c     **** 			return;
5010:src/xeq.c     **** 		}
5011:src/xeq.c     **** 		else {
5012:src/xeq.c     **** 			fp(arg, (enum rarg)cmd);
5013:src/xeq.c     **** 		}
5014:src/xeq.c     **** 		if (cmd != RARG_XROM_OUT) {
5015:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
5016:src/xeq.c     **** 			set_lift();
5017:src/xeq.c     **** 		}
5018:src/xeq.c     **** 	}
5019:src/xeq.c     **** }
5020:src/xeq.c     **** 
5021:src/xeq.c     **** static void multi(const opcode op) {
5022:src/xeq.c     **** 	const int cmd = opDBL(op);
5023:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5024:src/xeq.c     **** 
5025:src/xeq.c     **** 	process_cmdline_set_lift();
5026:src/xeq.c     **** 
5027:src/xeq.c     **** 	if (cmd >= NUM_MULTI) {
ARM GAS  /tmp/cciWh9P3.s 			page 165


5028:src/xeq.c     **** 		illegal(op);
5029:src/xeq.c     **** 		return;
5030:src/xeq.c     **** 	}
5031:src/xeq.c     **** 	if (isNULL(multicmds[cmd].f))	// LBL does nothing
5032:src/xeq.c     **** 		return;
5033:src/xeq.c     **** 	else {
5034:src/xeq.c     **** 		FP_MULTI fp = (FP_MULTI) EXPAND_ADDRESS(multicmds[cmd].f);
5035:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5036:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
5037:src/xeq.c     **** 			if (XromUserPc != 0) {
5038:src/xeq.c     **** 				if (! Running)
5039:src/xeq.c     **** 					clrretstk();
5040:src/xeq.c     **** 				dispatch_xrom(fp);
5041:src/xeq.c     **** 			}
5042:src/xeq.c     **** 			return;
5043:src/xeq.c     **** 		}
5044:src/xeq.c     **** 		else {
5045:src/xeq.c     **** 			fp(op, (enum multiops)cmd);
5046:src/xeq.c     **** 			set_lift();
5047:src/xeq.c     **** 		}
5048:src/xeq.c     **** 	}
5049:src/xeq.c     **** }
5050:src/xeq.c     **** 
5051:src/xeq.c     **** 
5052:src/xeq.c     **** 
5053:src/xeq.c     **** /* Main dispatch routine that decodes the top level of the opcode and
5054:src/xeq.c     ****  * goes to the appropriate lower level dispatch routine.
5055:src/xeq.c     ****  */
5056:src/xeq.c     **** void xeq(opcode op) 
5057:src/xeq.c     **** {
5058:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
5059:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
5060:src/xeq.c     **** 	const struct _ustate old = UState;
5061:src/xeq.c     **** 	const unsigned char lift = get_lift();
5062:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
5063:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
5064:src/xeq.c     **** #ifdef INFRARED
5065:src/xeq.c     **** 	int tracing;
5066:src/xeq.c     **** #endif
5067:src/xeq.c     **** 
5068:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
5069:src/xeq.c     **** 	if (op == (OP_NIL | OP_rCLX) || op == (OP_NIL | OP_CLSTK)) {
5070:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
5071:src/xeq.c     **** 		// valid input so no error message will be generated.
5072:src/xeq.c     **** 		CmdLineDot = 0;
5073:src/xeq.c     **** 		Cmdline[0] = '0';
5074:src/xeq.c     **** 		Cmdline[1] = '\0';
5075:src/xeq.c     **** 	}
5076:src/xeq.c     **** #endif
5077:src/xeq.c     **** 
5078:src/xeq.c     **** 	xcopy(save, StackBase, sizeof(save));
5079:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
5080:src/xeq.c     **** 	instruction_count++;
5081:src/xeq.c     **** #endif
5082:src/xeq.c     **** #ifndef REALBUILD
5083:src/xeq.c     **** 	if (State2.trace && ! State2.sst) {
5084:src/xeq.c     **** 		char buf[16];
ARM GAS  /tmp/cciWh9P3.s 			page 166


5085:src/xeq.c     **** 		if (Running)
5086:src/xeq.c     **** 			print_step(op);
5087:src/xeq.c     **** 		else
5088:src/xeq.c     **** 			sprintf(TraceBuffer, "%04X:%s", op, prt(op, buf));
5089:src/xeq.c     **** 		DispMsg = TraceBuffer;
5090:src/xeq.c     **** 	}
5091:src/xeq.c     **** #endif
5092:src/xeq.c     **** #ifdef INFRARED
5093:src/xeq.c     **** #ifdef REALBUILD
5094:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && ! is_xrom() && State2.runmode;
5095:src/xeq.c     **** #else
5096:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && (! is_xrom() || State2.trace) && State2.runmode;
5097:src/xeq.c     **** #endif
5098:src/xeq.c     **** 	Tracing = tracing;
5099:src/xeq.c     **** 	print_trace( op, 0 );
5100:src/xeq.c     **** #endif
5101:src/xeq.c     **** 	Busy = 0;
5102:src/xeq.c     **** 	State2.wascomplex = 0;
5103:src/xeq.c     **** 	if (isDBL(op))
5104:src/xeq.c     **** 		multi(op);
5105:src/xeq.c     **** 	else if (isRARG(op))
5106:src/xeq.c     **** 		rargs(op);
5107:src/xeq.c     **** 	else {
5108:src/xeq.c     **** 		XeqOpCode = (s_opcode) op;
5109:src/xeq.c     **** 		switch (opKIND(op)) {
5110:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
5111:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
5112:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
5113:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
5114:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
5115:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
5116:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
5117:src/xeq.c     **** 		default:	illegal(op);
5118:src/xeq.c     **** 		}
5119:src/xeq.c     **** 	}
5120:src/xeq.c     **** #if INTERRUPT_XROM_TICKS > 0
5121:src/xeq.c     **** 	if (OnKeyTicks >= INTERRUPT_XROM_TICKS) {
5122:src/xeq.c     **** 		report_err(ERR_INTERRUPTED);
5123:src/xeq.c     **** 		while (get_key() >= 0) { } // Empty keyboard buffer
5124:src/xeq.c     **** 	}
5125:src/xeq.c     **** #endif
5126:src/xeq.c     **** 
5127:src/xeq.c     **** 	if (Error != ERR_NONE) {
5128:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
5129:src/xeq.c     **** 		error_message( Error );
5130:src/xeq.c     **** 		// Repair stack and state
5131:src/xeq.c     **** 		// Clear return stack
5132:src/xeq.c     **** 		xcopy(StackBase, save, sizeof(save));
5133:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
5134:src/xeq.c     **** 		UState = old;
5135:src/xeq.c     **** 		State2.state_lift = lift;
5136:src/xeq.c     **** 		raw_set_pc(old_pc);
5137:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
5138:src/xeq.c     **** 		process_cmdline_set_lift();
5139:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
5140:src/xeq.c     **** 		// wrong with the command line, e.g. it had a partially entered fraction
5141:src/xeq.c     **** 		Error = ERR_NONE;
ARM GAS  /tmp/cciWh9P3.s 			page 167


5142:src/xeq.c     **** 		if (Running || XromRunning) {
5143:src/xeq.c     **** #ifndef REALBUILD
5144:src/xeq.c     **** 			if (State2.trace ) {
5145:src/xeq.c     **** 				// Special handling for debug environment
5146:src/xeq.c     **** 				if (XromFlags.xIN) {
5147:src/xeq.c     **** 					// Restore the global return stack
5148:src/xeq.c     **** 					RetStk = XromUserRetStk;
5149:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5150:src/xeq.c     **** 					// Restore private stack to normal stack
5151:src/xeq.c     **** 					if (! XromFlags.mode_double && NumRegs < STACK_SIZE + EXTRA_REG) {
5152:src/xeq.c     **** 						// Need space for double precision stack
5153:src/xeq.c     **** 						cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
5154:src/xeq.c     **** 					}
5155:src/xeq.c     **** 					XromFlags.xIN = 0;		// Clear flag before get_reg_n!
5156:src/xeq.c     **** 					if (Error == ERR_NONE) {
5157:src/xeq.c     **** 						UState.mode_double = 1;
5158:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
5159:src/xeq.c     **** 					}
5160:src/xeq.c     **** 					else
5161:src/xeq.c     **** 						Error = ERR_NONE;	// Not enough RAM, can't restore
5162:src/xeq.c     **** 				}
5163:src/xeq.c     **** 			}
5164:src/xeq.c     **** 			else {
5165:src/xeq.c     **** #endif
5166:src/xeq.c     **** 				unsigned short int pc = state_pc();
5167:src/xeq.c     **** 				if (XromFlags.xIN) {
5168:src/xeq.c     **** 					// Restore state to before xIN
5169:src/xeq.c     **** 					XromFlags.xIN = 0;
5170:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
5171:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
5172:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
5173:src/xeq.c     **** 					// Restore the global return stack
5174:src/xeq.c     **** 					RetStk = XromUserRetStk;
5175:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5176:src/xeq.c     **** 				}
5177:src/xeq.c     **** 				while (isXROM(pc)) {
5178:src/xeq.c     **** 					// Leave XROM
5179:src/xeq.c     **** 					if (RetStkPtr != 0) {
5180:src/xeq.c     **** 						retstk_up();
5181:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
5182:src/xeq.c     **** 					}
5183:src/xeq.c     **** 					if (RetStkPtr == 0)
5184:src/xeq.c     **** 						++pc; // compensate for decpc below
5185:src/xeq.c     **** 				}
5186:src/xeq.c     **** 				raw_set_pc(pc);
5187:src/xeq.c     **** #ifndef REALBUILD
5188:src/xeq.c     **** 			}
5189:src/xeq.c     **** #endif
5190:src/xeq.c     **** 			decpc();		// Back to error instruction
5191:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
5192:src/xeq.c     **** 
5193:src/xeq.c     **** 			set_running_off();
5194:src/xeq.c     **** 		}
5195:src/xeq.c     **** 	} 
5196:src/xeq.c     **** 	reset_volatile_state();
5197:src/xeq.c     **** #ifdef INFRARED
5198:src/xeq.c     **** 	Tracing = tracing;
ARM GAS  /tmp/cciWh9P3.s 			page 168


5199:src/xeq.c     **** 	print_trace( op, 1 );
5200:src/xeq.c     **** #endif
5201:src/xeq.c     **** }
5202:src/xeq.c     **** 
5203:src/xeq.c     **** /* Execute a single step and return.
5204:src/xeq.c     ****  */
5205:src/xeq.c     **** static void xeq_single(void) {
5206:src/xeq.c     **** 	const opcode op = getprog(state_pc());
5207:src/xeq.c     **** 
5208:src/xeq.c     **** 	incpc();
5209:src/xeq.c     **** 	xeq(op);
5210:src/xeq.c     **** }
5211:src/xeq.c     **** 
5212:src/xeq.c     **** /* Continue execution trough xrom code
5213:src/xeq.c     ****  */
5214:src/xeq.c     **** #ifdef REALBUILD
5215:src/xeq.c     **** void xeq_xrom(void) {
5216:src/xeq.c     **** #else
5217:src/xeq.c     **** static void xeq_xrom2(void) {
5218:src/xeq.c     **** #endif
5219:src/xeq.c     **** 	int count = 0;
5220:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
5221:src/xeq.c     **** 	 * we break free.
5222:src/xeq.c     **** 	 */
5223:src/xeq.c     **** #ifdef DM42
5224:src/xeq.c     **** 	while ( !PAUSED && is_xrom() && RetStkPtr != 0) {
5225:src/xeq.c     **** #else
5226:src/xeq.c     **** 	  while (!Pause && is_xrom() && RetStkPtr != 0) {
5227:src/xeq.c     **** #endif
5228:src/xeq.c     **** 		XromRunning = 1;
5229:src/xeq.c     **** 		xeq_single();
5230:src/xeq.c     **** 		XromRunning = 0;
5231:src/xeq.c     **** 		if ((++count & 31) == 0)
5232:src/xeq.c     **** 			busy();
5233:src/xeq.c     **** #ifdef DM42
5234:src/xeq.c     **** 		if (PAUSED) {
5235:src/xeq.c     **** #else
5236:src/xeq.c     **** 		  if (Pause)
5237:src/xeq.c     **** #endif		  
5238:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
5239:src/xeq.c     **** 			// Switch to Running mode to force continued execution.
5240:src/xeq.c     **** 			Running = 1;
5241:src/xeq.c     **** 		}
5242:src/xeq.c     **** 	}
5243:src/xeq.c     **** }
5244:src/xeq.c     **** 
5245:src/xeq.c     **** #ifndef REALBUILD
5246:src/xeq.c     **** void xeq_xrom(void) {
5247:src/xeq.c     **** 	// We split the routine in two parts for debugging only
5248:src/xeq.c     **** 	if (! State2.trace)
5249:src/xeq.c     **** 		xeq_xrom2();
5250:src/xeq.c     **** }
5251:src/xeq.c     **** #endif
5252:src/xeq.c     **** 
5253:src/xeq.c     **** 	/* Check to see if we're running a program and if so execute it
5254:src/xeq.c     ****  * for a while.
5255:src/xeq.c     ****  *
ARM GAS  /tmp/cciWh9P3.s 			page 169


5256:src/xeq.c     ****  */
5257:src/xeq.c     **** 
5258:src/xeq.c     **** /*
5259:src/xeq.c     **** //#define PAUSED (start_pause(-1) == 0) (definition in xeq.h)
5260:src/xeq.c     **** 'Pause' is true if Pause is non-zero, i.e., if the pause is still running.
5261:src/xeq.c     **** PAUSED is true if the timer is not expired.
5262:src/xeq.c     **** */
5263:src/xeq.c     **** void xeqprog(void) 
5264:src/xeq.c     **** {
5265:src/xeq.c     **** 	int state = 0;
5266:src/xeq.c     **** #ifdef DM42
5267:src/xeq.c     **** 	if ( Running || PAUSED ) {
5268:src/xeq.c     **** #else
5269:src/xeq.c     **** 	if (Running || Pause) {
5270:src/xeq.c     **** #endif
5271:src/xeq.c     **** #ifndef CONSOLE
5272:src/xeq.c     **** #ifdef DM42
5273:src/xeq.c     **** 	  long long last_ticker = DM42_Ticker();
5274:src/xeq.c     **** #else
5275:src/xeq.c     **** 		long long last_ticker = Ticker;
5276:src/xeq.c     **** #endif
5277:src/xeq.c     **** 		state = ((int) last_ticker % (2*TICKS_PER_FLASH) < TICKS_PER_FLASH);
5278:src/xeq.c     **** #else
5279:src/xeq.c     **** 		state = 1;
5280:src/xeq.c     **** #endif
5281:src/xeq.c     **** 		dot(RCL_annun, state);
5282:src/xeq.c     **** 		finish_display();
5283:src/xeq.c     **** #ifdef DM42
5284:src/xeq.c     **** 		while (! PAUSED && Running) {
5285:src/xeq.c     **** #else		  
5286:src/xeq.c     **** 		while (! Pause && Running) {
5287:src/xeq.c     **** #endif
5288:src/xeq.c     **** 		  xeq_single();
5289:src/xeq.c     **** 			if (is_key_pressed()) {
5290:src/xeq.c     **** 				// Key press or heart beat
5291:src/xeq.c     **** 				// xeq_xrom(); // Already done by dispatch_xrom()
5292:src/xeq.c     **** 				break;
5293:src/xeq.c     **** 			}
5294:src/xeq.c     **** 		}
5295:src/xeq.c     **** 	}
5296:src/xeq.c     **** #ifdef DM42
5297:src/xeq.c     **** 	if (! Running && ! PAUSED ) {
5298:src/xeq.c     **** #else
5299:src/xeq.c     **** 	if (! Running && ! Pause) {	  
5300:src/xeq.c     **** #endif
5301:src/xeq.c     **** 	  // Program has terminated
5302:src/xeq.c     **** 		clr_dot(RCL_annun);
5303:src/xeq.c     **** 		ShowRPN = 1;	// display() may turn it off again
5304:src/xeq.c     **** 		display();
5305:src/xeq.c     **** 		if (ShowRPN) {
5306:src/xeq.c     **** 			set_dot(RPN);
5307:src/xeq.c     **** 			finish_display();
5308:src/xeq.c     **** 		}
5309:src/xeq.c     **** #ifndef CONSOLE
5310:src/xeq.c     **** 		// Avoid accidental restart with R/S or APD after program ends
5311:src/xeq.c     ****      		JustStopped = 1;
5312:src/xeq.c     **** #endif
ARM GAS  /tmp/cciWh9P3.s 			page 170


5313:src/xeq.c     **** 	}
5314:src/xeq.c     **** }
5315:src/xeq.c     **** 
5316:src/xeq.c     **** /* Single step and back step routine
5317:src/xeq.c     ****  */
5318:src/xeq.c     **** void xeq_sst_bst(int kind) 
5319:src/xeq.c     **** {
5320:src/xeq.c     **** 	opcode op;
5321:src/xeq.c     **** 
5322:src/xeq.c     **** 	reset_volatile_state();
5323:src/xeq.c     **** 	if (kind == -1)
5324:src/xeq.c     **** 		decpc();
5325:src/xeq.c     **** 
5326:src/xeq.c     **** 	if (State2.runmode) {
5327:src/xeq.c     **** 		// Display the step
5328:src/xeq.c     **** 		op = getprog(state_pc());
5329:src/xeq.c     **** 		print_step(op);
5330:src/xeq.c     **** 		if (kind == 1) {
5331:src/xeq.c     **** 			// Execute the step on key up
5332:src/xeq.c     **** #ifndef REALBUILD
5333:src/xeq.c     **** 			State2.sst = 1;
5334:src/xeq.c     **** #endif
5335:src/xeq.c     **** 			set_running_on_sst();
5336:src/xeq.c     **** 			incpc();
5337:src/xeq.c     **** 			xeq(op);
5338:src/xeq.c     **** #ifndef REALBUILD
5339:src/xeq.c     **** 			State2.sst = 0;
5340:src/xeq.c     **** #endif
5341:src/xeq.c     **** 			xeq_xrom();  // necessary for code called from XROM
5342:src/xeq.c     **** 			set_running_off_sst();
5343:src/xeq.c     **** 		}
5344:src/xeq.c     **** 	}
5345:src/xeq.c     **** 	else if (kind == 0) {
5346:src/xeq.c     **** 		// Key down in program mode
5347:src/xeq.c     **** 		incpc();
5348:src/xeq.c     **** 		OpCode = 0;
5349:src/xeq.c     **** 	}
5350:src/xeq.c     **** }
5351:src/xeq.c     **** 
5352:src/xeq.c     **** 
5353:src/xeq.c     **** /*
5354:src/xeq.c     ****  *  User command to start or stop execution
5355:src/xeq.c     ****  */
5356:src/xeq.c     **** void op_rs(enum nilop op) {
5357:src/xeq.c     **** #ifndef REALBUILD
5358:src/xeq.c     **** 	// This is for debugging purposes only
5359:src/xeq.c     **** 	// STOP does not appear in XROM normally
5360:src/xeq.c     **** 	if (is_xrom()) {
5361:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
5362:src/xeq.c     **** 			Running = XromRunning = 0;
5363:src/xeq.c     **** 		}
5364:src/xeq.c     **** 		else {
5365:src/xeq.c     **** 			xeq_xrom2();
5366:src/xeq.c     **** 		}
5367:src/xeq.c     **** 		return;
5368:src/xeq.c     **** 	}
5369:src/xeq.c     **** #endif
ARM GAS  /tmp/cciWh9P3.s 			page 171


5370:src/xeq.c     **** 	if (Running)
5371:src/xeq.c     **** 		set_running_off();
5372:src/xeq.c     **** 	else {
5373:src/xeq.c     **** 		set_running_on();
5374:src/xeq.c     **** 		if (RetStkPtr == 0)
5375:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
5376:src/xeq.c     **** 	}
5377:src/xeq.c     **** }
5378:src/xeq.c     **** 
5379:src/xeq.c     **** 
5380:src/xeq.c     **** /* 
5381:src/xeq.c     ****  *  The following needs to be done each time before any user input is processed.
5382:src/xeq.c     ****  *  On the hardware, RAM is volatile and these pointers and structures need valid values!
5383:src/xeq.c     ****  */
5384:src/xeq.c     **** void xeq_init_contexts(void) {
5385:src/xeq.c     **** 	/*
5386:src/xeq.c     **** 	 *  Compute the sizes of the various memory portions
5387:src/xeq.c     **** 	 */
5388:src/xeq.c     **** 	short int s;
5389:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
5390:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
5391:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
5392:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
5393:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
5394:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
5395:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5396:src/xeq.c     **** 
5397:src/xeq.c     **** 	/*
5398:src/xeq.c     **** 	 *  Initialise our standard contexts.
5399:src/xeq.c     **** 	 *  We bump the digits for internal calculations.
5400:src/xeq.c     **** 	 */
5401:src/xeq.c     **** 	decContextDefault(&Ctx, DEC_INIT_BASE);
5402:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
5403:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
5404:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
5405:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
5406:src/xeq.c     **** }
5407:src/xeq.c     **** 
5408:src/xeq.c     **** 
5409:src/xeq.c     **** 
5410:src/xeq.c     **** #ifdef INCLUDE_PLOTTING
5411:src/xeq.c     **** /*
5412:src/xeq.c     ****  *  Plotting commands
5413:src/xeq.c     ****  *
5414:src/xeq.c     ****  *  The plot buffer is a range of registers that is treated as pixel data
5415:src/xeq.c     ****  *  The first byte contains the length of the buffer in columns (bytes)
5416:src/xeq.c     ****  */
5417:src/xeq.c     **** 
5418:src/xeq.c     **** /*
5419:src/xeq.c     ****  *  Check register range and return a pointer to the plot data.
5420:src/xeq.c     ****  */
5421:src/xeq.c     **** unsigned char *plot_check_range( int arg, int width, int height )
5422:src/xeq.c     **** {
5423:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
5424:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
5425:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
5426:src/xeq.c     **** 	int bytes;
ARM GAS  /tmp/cciWh9P3.s 			page 172


5427:src/xeq.c     **** 
5428:src/xeq.c     **** 	if ( width == 0 ) {
5429:src/xeq.c     **** 		width = (int) *p;
5430:src/xeq.c     **** 		height = (int) p[ 1 ];
5431:src/xeq.c     **** 	}
5432:src/xeq.c     **** 
5433:src/xeq.c     **** 	/*
5434:src/xeq.c     **** 	 *  Compute total number of bytes
5435:src/xeq.c     **** 	 */
5436:src/xeq.c     **** 	bytes = 2 + width * height;
5437:src/xeq.c     **** 
5438:src/xeq.c     **** 	/*
5439:src/xeq.c     **** 	 *  Check if we have enough room
5440:src/xeq.c     **** 	 */
5441:src/xeq.c     **** 	if ( width > PAPER_WIDTH || arg + ( bytes + n - 1 ) / n > lim ) {
5442:src/xeq.c     **** 		report_err( ERR_RANGE );
5443:src/xeq.c     **** 		return (unsigned char *) NULL;
5444:src/xeq.c     **** 	}
5445:src/xeq.c     **** 	return p;
5446:src/xeq.c     **** }
5447:src/xeq.c     **** 
5448:src/xeq.c     **** /*
5449:src/xeq.c     ****  * Set up for graphical object display.
5450:src/xeq.c     ****  */
5451:src/xeq.c     **** void cmdplotdisplay( unsigned int arg, enum rarg op )
5452:src/xeq.c     **** {
5453:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
5454:src/xeq.c     **** 		DispPlot = arg + 1;
5455:src/xeq.c     **** 		frozen_display();
5456:src/xeq.c     **** 	}
5457:src/xeq.c     **** }
5458:src/xeq.c     **** 
5459:src/xeq.c     **** /*
5460:src/xeq.c     ****  *  Initialize a block of registers to act as a buffer for plotting
5461:src/xeq.c     ****  *  X contains the maximum width (<= 0 is default: 166)
5462:src/xeq.c     ****  */
5463:src/xeq.c     **** void cmdplotinit( unsigned int arg, enum rarg op )
5464:src/xeq.c     **** {
5465:src/xeq.c     **** 	int sgnx, sgny;
5466:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
5467:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
5468:src/xeq.c     **** 	unsigned char *p;
5469:src/xeq.c     **** 	
5470:src/xeq.c     **** 	if ( sgnx || width == 0 ) {
5471:src/xeq.c     **** 		width = PAPER_WIDTH;
5472:src/xeq.c     **** 	}
5473:src/xeq.c     **** 	if ( sgny || height == 0 ) {
5474:src/xeq.c     **** 		height = 1;
5475:src/xeq.c     **** 	}
5476:src/xeq.c     **** 	else {
5477:src/xeq.c     **** 		/*
5478:src/xeq.c     **** 		 *  Make height count the byte rows
5479:src/xeq.c     **** 		 */
5480:src/xeq.c     **** 		height = ( height + 7 ) >> 3;
5481:src/xeq.c     **** 	}
5482:src/xeq.c     **** 
5483:src/xeq.c     **** 	p = plot_check_range( arg, width, height );
ARM GAS  /tmp/cciWh9P3.s 			page 173


5484:src/xeq.c     **** 	if ( p != NULL ) {
5485:src/xeq.c     **** 		*p++ = (unsigned char) width;
5486:src/xeq.c     **** 		*p++ = (unsigned char) height;
5487:src/xeq.c     **** 		xset( p, 0, width * height );
5488:src/xeq.c     **** 	}
5489:src/xeq.c     **** }
5490:src/xeq.c     **** 
5491:src/xeq.c     **** /*
5492:src/xeq.c     ****  *  Return the width and height of the plotting block
5493:src/xeq.c     ****  */
5494:src/xeq.c     **** void cmdplotdim( unsigned int arg, enum rarg op )
5495:src/xeq.c     **** {
5496:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5497:src/xeq.c     **** 	if ( p != NULL ) {
5498:src/xeq.c     **** 		lift2_if_enabled();
5499:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
5500:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
5501:src/xeq.c     **** 	}
5502:src/xeq.c     **** }
5503:src/xeq.c     **** 
5504:src/xeq.c     **** /*
5505:src/xeq.c     ****  *  All pixel related commands
5506:src/xeq.c     ****  *  X is the horizontal position 0..width
5507:src/xeq.c     ****  *  Y is the vertical position 0..7
5508:src/xeq.c     ****  */
5509:src/xeq.c     **** void cmdplotpixel( unsigned int arg, enum rarg op )
5510:src/xeq.c     **** {
5511:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5512:src/xeq.c     **** 	if ( p != NULL ) {
5513:src/xeq.c     **** 		/*
5514:src/xeq.c     **** 		 *  Get row from Y
5515:src/xeq.c     **** 		 */
5516:src/xeq.c     **** 		int sgn;
5517:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
5518:src/xeq.c     **** 		int pix = 0;
5519:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
5520:src/xeq.c     **** 			/*
5521:src/xeq.c     **** 			 *  Row is OK, get column from X
5522:src/xeq.c     **** 			 */
5523:src/xeq.c     **** 			unsigned int width = (unsigned int) *p;
5524:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
5525:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
5526:src/xeq.c     **** 				/*
5527:src/xeq.c     **** 				 *  Modify the bit in the correct byte
5528:src/xeq.c     **** 				 */
5529:src/xeq.c     **** 				pix = 1 << ( row & 7 );
5530:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
5531:src/xeq.c     **** 
5532:src/xeq.c     **** 				if ( op == RARG_PLOT_SETPIX ) {
5533:src/xeq.c     **** 					*p |= pix;
5534:src/xeq.c     **** 				}
5535:src/xeq.c     **** 				else if ( op == RARG_PLOT_CLRPIX ) {
5536:src/xeq.c     **** 					*p &= ~pix;
5537:src/xeq.c     **** 				}
5538:src/xeq.c     **** 				else if ( op == RARG_PLOT_FLIPPIX ) {
5539:src/xeq.c     **** 					*p ^= pix;
5540:src/xeq.c     **** 				}
ARM GAS  /tmp/cciWh9P3.s 			page 174


5541:src/xeq.c     **** 			}
5542:src/xeq.c     **** 		}
5543:src/xeq.c     **** 		if ( op == RARG_PLOT_ISSET ) {
5544:src/xeq.c     **** 			fin_tst( *p & pix );
5545:src/xeq.c     **** 		}
5546:src/xeq.c     **** 	}
5547:src/xeq.c     **** }
5548:src/xeq.c     **** #endif
5549:src/xeq.c     **** 
5550:src/xeq.c     **** 
5551:src/xeq.c     **** /*
5552:src/xeq.c     ****  *  We don't allow some commands from a running program
5553:src/xeq.c     ****  */
5554:src/xeq.c     **** int not_running(void) {
5555:src/xeq.c     **** 	if ( Running ) {
5556:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5557:src/xeq.c     **** 		return 0;
5558:src/xeq.c     **** 	}
5559:src/xeq.c     **** 	return 1;
5560:src/xeq.c     **** }
5561:src/xeq.c     **** 
5562:src/xeq.c     **** /*
5563:src/xeq.c     ****  *  Handle the Running Flag
5564:src/xeq.c     ****  */
5565:src/xeq.c     **** void set_running_off_sst() {
5566:src/xeq.c     **** 	Running = 0;
5567:src/xeq.c     **** }
5568:src/xeq.c     **** 
5569:src/xeq.c     **** void set_running_on_sst() {
5570:src/xeq.c     **** 	Running = 1;
5571:src/xeq.c     **** }
5572:src/xeq.c     **** 
5573:src/xeq.c     **** void set_running_off() {
 3535              		.loc 1 5573 6 view .LVU964
 3536              	.LBB1521:
5574:src/xeq.c     **** 	set_running_off_sst();
 3537              		.loc 1 5574 2 view .LVU965
 3538              	.LBB1522:
 3539              	.LBI1522:
5565:src/xeq.c     **** 	Running = 0;
 3540              		.loc 1 5565 6 view .LVU966
 3541              	.LBB1523:
5566:src/xeq.c     **** }
 3542              		.loc 1 5566 2 view .LVU967
5566:src/xeq.c     **** }
 3543              		.loc 1 5566 10 is_stmt 0 view .LVU968
 3544 0070 084A     		ldr	r2, .L290+8
 3545 0072 1160     		str	r1, [r2]
 3546              	.LBE1523:
 3547              	.LBE1522:
5575:src/xeq.c     **** 	State.entryp = 0;
 3548              		.loc 1 5575 2 is_stmt 1 view .LVU969
 3549              		.loc 1 5575 15 is_stmt 0 view .LVU970
 3550 0074 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 3551 0078 61F30412 		bfi	r2, r1, #4, #1
 3552 007c 83F8DD27 		strb	r2, [r3, #2013]
5576:src/xeq.c     **** 	dot( RCL_annun, 0);
ARM GAS  /tmp/cciWh9P3.s 			page 175


 3553              		.loc 1 5576 2 is_stmt 1 view .LVU971
 3554              	.LBE1521:
 3555              	.LBE1520:
2065:src/xeq.c     **** 
 3556              		.loc 1 2065 1 is_stmt 0 view .LVU972
 3557 0080 BDE87040 		pop	{r4, r5, r6, lr}
 3558              		.cfi_restore 14
 3559              		.cfi_restore 6
 3560              		.cfi_restore 5
 3561              		.cfi_restore 4
 3562              		.cfi_def_cfa_offset 0
 3563              	.LBB1525:
 3564              	.LBB1524:
 3565              		.loc 1 5576 2 view .LVU973
 3566 0084 8A20     		movs	r0, #138
 3567 0086 FFF7FEBF 		b	dot
 3568              	.LVL265:
 3569              	.L291:
 3570 008a 00BF     		.align	2
 3571              	.L290:
 3572 008c 00000000 		.word	main_ram
 3573 0090 00000000 		.word	RetStk
 3574 0094 00000000 		.word	Running
 3575              	.LBE1524:
 3576              	.LBE1525:
 3577              		.cfi_endproc
 3578              	.LFE150:
 3580              		.section	.text.user_pc,"ax",%progbits
 3581              		.align	1
 3582              		.p2align 2,,3
 3583              		.global	user_pc
 3584              		.syntax unified
 3585              		.thumb
 3586              		.thumb_func
 3587              		.fpu fpv4-sp-d16
 3589              	user_pc:
 3590              	.LVL266:
 3591              	.LFB25:
 484:src/xeq.c     **** 	unsigned int n = 1;
 3592              		.loc 1 484 39 is_stmt 1 view -0
 3593              		.cfi_startproc
 3594              		@ args = 0, pretend = 0, frame = 0
 3595              		@ frame_needed = 0, uses_anonymous_args = 0
 3596              		@ link register save eliminated.
 485:src/xeq.c     **** 	unsigned int base;
 3597              		.loc 1 485 2 view .LVU975
 486:src/xeq.c     **** 
 3598              		.loc 1 486 2 view .LVU976
 489:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3599              		.loc 1 489 2 view .LVU977
 489:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3600              		.loc 1 489 5 is_stmt 0 view .LVU978
 3601 0000 0346     		mov	r3, r0
 3602 0002 20B1     		cbz	r0, .L293
 489:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3603              		.loc 1 489 17 discriminator 1 view .LVU979
 3604 0004 820B     		lsrs	r2, r0, #14
ARM GAS  /tmp/cciWh9P3.s 			page 176


 489:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3605              		.loc 1 489 14 discriminator 1 view .LVU980
 3606 0006 032A     		cmp	r2, #3
 3607 0008 01D0     		beq	.L293
 3608 000a FFF7FEBF 		b	user_pc.part.0
 3609              	.LVL267:
 3610              	.L293:
 490:src/xeq.c     **** #else
 3611              		.loc 1 490 3 is_stmt 1 view .LVU981
 490:src/xeq.c     **** #else
 3612              		.loc 1 490 24 is_stmt 0 view .LVU982
 3613 000e C3F30D00 		ubfx	r0, r3, #0, #14
 3614              	.LVL268:
 503:src/xeq.c     **** 
 3615              		.loc 1 503 1 view .LVU983
 3616 0012 7047     		bx	lr
 3617              		.cfi_endproc
 3618              	.LFE25:
 3620              		.section	.text.find_user_pc,"ax",%progbits
 3621              		.align	1
 3622              		.p2align 2,,3
 3623              		.global	find_user_pc
 3624              		.syntax unified
 3625              		.thumb
 3626              		.thumb_func
 3627              		.fpu fpv4-sp-d16
 3629              	find_user_pc:
 3630              	.LVL269:
 3631              	.LFB26:
 507:src/xeq.c     **** 	unsigned int upc = state_pc();
 3632              		.loc 1 507 48 is_stmt 1 view -0
 3633              		.cfi_startproc
 3634              		@ args = 0, pretend = 0, frame = 0
 3635              		@ frame_needed = 0, uses_anonymous_args = 0
 508:src/xeq.c     **** 	const int libp = isLIB(upc);
 3636              		.loc 1 508 2 view .LVU985
 507:src/xeq.c     **** 	unsigned int upc = state_pc();
 3637              		.loc 1 507 48 is_stmt 0 view .LVU986
 3638 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3639              		.cfi_def_cfa_offset 24
 3640              		.cfi_offset 3, -24
 3641              		.cfi_offset 4, -20
 3642              		.cfi_offset 5, -16
 3643              		.cfi_offset 6, -12
 3644              		.cfi_offset 7, -8
 3645              		.cfi_offset 14, -4
 508:src/xeq.c     **** 	const int libp = isLIB(upc);
 3646              		.loc 1 508 21 view .LVU987
 3647 0002 124B     		ldr	r3, .L309
 3648 0004 1B68     		ldr	r3, [r3]
 3649 0006 B3F8E037 		ldrh	r3, [r3, #2016]
 3650              	.LVL270:
 509:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 3651              		.loc 1 509 2 is_stmt 1 view .LVU988
 510:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3652              		.loc 1 510 2 view .LVU989
 510:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
ARM GAS  /tmp/cciWh9P3.s 			page 177


 3653              		.loc 1 510 43 is_stmt 0 view .LVU990
 3654 000a 13F44044 		ands	r4, r3, #49152
 3655              	.LVL271:
 510:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3656              		.loc 1 510 43 view .LVU991
 3657 000e 1ABF     		itte	ne
 3658 0010 03F44045 		andne	r5, r3, #49152
 3659 0014 0135     		addne	r5, r5, #1
 3660 0016 2546     		moveq	r5, r4
 3661              	.LVL272:
 511:src/xeq.c     **** #ifndef REALBUILD
 3662              		.loc 1 511 2 is_stmt 1 view .LVU992
 513:src/xeq.c     **** 		return addrXROM(target);
 3663              		.loc 1 513 6 is_stmt 0 view .LVU993
 3664 0018 9B0B     		lsrs	r3, r3, #14
 3665              	.LVL273:
 511:src/xeq.c     **** #ifndef REALBUILD
 3666              		.loc 1 511 28 view .LVU994
 3667 001a 003C     		subs	r4, r4, #0
 511:src/xeq.c     **** #ifndef REALBUILD
 3668              		.loc 1 511 28 view .LVU995
 3669 001c 18BF     		it	ne
 3670 001e 0124     		movne	r4, #1
 3671              	.LVL274:
 513:src/xeq.c     **** 		return addrXROM(target);
 3672              		.loc 1 513 2 is_stmt 1 view .LVU996
 513:src/xeq.c     **** 		return addrXROM(target);
 3673              		.loc 1 513 5 is_stmt 0 view .LVU997
 3674 0020 032B     		cmp	r3, #3
 507:src/xeq.c     **** 	unsigned int upc = state_pc();
 3675              		.loc 1 507 48 view .LVU998
 3676 0022 0646     		mov	r6, r0
 513:src/xeq.c     **** 		return addrXROM(target);
 3677              		.loc 1 513 5 view .LVU999
 3678 0024 0ED0     		beq	.L307
 3679              	.LBB1526:
 519:src/xeq.c     **** 			return oldbase;
 3680              		.loc 1 519 7 view .LVU1000
 3681 0026 0A4F     		ldr	r7, .L309+4
 3682 0028 05E0     		b	.L302
 3683              	.LVL275:
 3684              	.L304:
 518:src/xeq.c     **** 		if (PcWrapped)
 3685              		.loc 1 518 10 view .LVU1001
 3686 002a FFF7FEFF 		bl	do_inc
 3687              	.LVL276:
 519:src/xeq.c     **** 			return oldbase;
 3688              		.loc 1 519 6 view .LVU1002
 3689 002e 3B68     		ldr	r3, [r7]
 3690              	.LVL277:
 519:src/xeq.c     **** 			return oldbase;
 3691              		.loc 1 519 3 is_stmt 1 view .LVU1003
 3692 0030 0134     		adds	r4, r4, #1
 3693              	.LVL278:
 519:src/xeq.c     **** 			return oldbase;
 3694              		.loc 1 519 6 is_stmt 0 view .LVU1004
 3695 0032 2BB9     		cbnz	r3, .L300
ARM GAS  /tmp/cciWh9P3.s 			page 178


 518:src/xeq.c     **** 		if (PcWrapped)
 3696              		.loc 1 518 10 view .LVU1005
 3697 0034 0546     		mov	r5, r0
 3698              	.LVL279:
 3699              	.L302:
 517:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 3700              		.loc 1 517 3 is_stmt 1 view .LVU1006
 518:src/xeq.c     **** 		if (PcWrapped)
 3701              		.loc 1 518 3 view .LVU1007
 518:src/xeq.c     **** 		if (PcWrapped)
 3702              		.loc 1 518 3 is_stmt 0 view .LVU1008
 3703              	.LBE1526:
 516:src/xeq.c     **** 		const unsigned int oldbase = base;
 3704              		.loc 1 516 8 is_stmt 1 view .LVU1009
 516:src/xeq.c     **** 		const unsigned int oldbase = base;
 3705              		.loc 1 516 8 is_stmt 0 view .LVU1010
 3706 0036 A642     		cmp	r6, r4
 3707              	.LBB1527:
 518:src/xeq.c     **** 		if (PcWrapped)
 3708              		.loc 1 518 10 view .LVU1011
 3709 0038 2846     		mov	r0, r5
 3710 003a 4FF00001 		mov	r1, #0
 3711              	.LBE1527:
 516:src/xeq.c     **** 		const unsigned int oldbase = base;
 3712              		.loc 1 516 8 view .LVU1012
 3713 003e F4D8     		bhi	.L304
 3714              	.LVL280:
 3715              	.L300:
 523:src/xeq.c     **** 
 3716              		.loc 1 523 1 view .LVU1013
 3717 0040 2846     		mov	r0, r5
 3718              	.LVL281:
 523:src/xeq.c     **** 
 3719              		.loc 1 523 1 view .LVU1014
 3720 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3721              	.LVL282:
 3722              	.L307:
 514:src/xeq.c     **** #endif
 3723              		.loc 1 514 3 is_stmt 1 view .LVU1015
 514:src/xeq.c     **** #endif
 3724              		.loc 1 514 10 is_stmt 0 view .LVU1016
 3725 0044 40F44045 		orr	r5, r0, #49152
 3726              	.LVL283:
 523:src/xeq.c     **** 
 3727              		.loc 1 523 1 view .LVU1017
 3728 0048 2846     		mov	r0, r5
 3729              	.LVL284:
 523:src/xeq.c     **** 
 3730              		.loc 1 523 1 view .LVU1018
 3731 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3732              	.LVL285:
 3733              	.L310:
 523:src/xeq.c     **** 
 3734              		.loc 1 523 1 view .LVU1019
 3735              		.align	2
 3736              	.L309:
 3737 004c 00000000 		.word	main_ram
ARM GAS  /tmp/cciWh9P3.s 			page 179


 3738 0050 00000000 		.word	PcWrapped
 3739              		.cfi_endproc
 3740              	.LFE26:
 3742              		.section	.text.report_err,"ax",%progbits
 3743              		.align	1
 3744              		.p2align 2,,3
 3745              		.global	report_err
 3746              		.syntax unified
 3747              		.thumb
 3748              		.thumb_func
 3749              		.fpu fpv4-sp-d16
 3751              	report_err:
 3752              	.LVL286:
 3753              	.LFB28:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3754              		.loc 1 536 38 is_stmt 1 view -0
 3755              		.cfi_startproc
 3756              		@ args = 0, pretend = 0, frame = 0
 3757              		@ frame_needed = 0, uses_anonymous_args = 0
 537:src/xeq.c     **** 		Error = e;
 3758              		.loc 1 537 2 view .LVU1021
 537:src/xeq.c     **** 		Error = e;
 3759              		.loc 1 537 12 is_stmt 0 view .LVU1022
 3760 0000 064A     		ldr	r2, .L317
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3761              		.loc 1 536 38 view .LVU1023
 3762 0002 10B5     		push	{r4, lr}
 3763              		.cfi_def_cfa_offset 8
 3764              		.cfi_offset 4, -8
 3765              		.cfi_offset 14, -4
 537:src/xeq.c     **** 		Error = e;
 3766              		.loc 1 537 12 view .LVU1024
 3767 0004 1468     		ldr	r4, [r2]
 537:src/xeq.c     **** 		Error = e;
 3768              		.loc 1 537 5 view .LVU1025
 3769 0006 0CB9     		cbnz	r4, .L314
 3770              	.LVL287:
 3771              	.LBB1530:
 3772              	.LBI1530:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3773              		.loc 1 536 5 is_stmt 1 view .LVU1026
 3774              	.LBB1531:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 3775              		.loc 1 538 3 view .LVU1027
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 3776              		.loc 1 538 9 is_stmt 0 view .LVU1028
 3777 0008 1060     		str	r0, [r2]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 3778              		.loc 1 539 3 is_stmt 1 view .LVU1029
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 3779              		.loc 1 539 6 is_stmt 0 view .LVU1030
 3780 000a 10B1     		cbz	r0, .L316
 3781              	.LVL288:
 3782              	.L314:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 3783              		.loc 1 539 6 view .LVU1031
 3784              	.LBE1531:
ARM GAS  /tmp/cciWh9P3.s 			page 180


 3785              	.LBE1530:
 544:src/xeq.c     **** }
 3786              		.loc 1 544 9 view .LVU1032
 3787 000c 0124     		movs	r4, #1
 545:src/xeq.c     **** 
 3788              		.loc 1 545 1 view .LVU1033
 3789 000e 2046     		mov	r0, r4
 3790              	.LVL289:
 545:src/xeq.c     **** 
 3791              		.loc 1 545 1 view .LVU1034
 3792 0010 10BD     		pop	{r4, pc}
 3793              	.LVL290:
 3794              	.L316:
 3795              	.LBB1533:
 3796              	.LBB1532:
 540:src/xeq.c     **** 			return 0;
 3797              		.loc 1 540 4 is_stmt 1 view .LVU1035
 3798 0012 FFF7FEFF 		bl	error_message
 3799              	.LVL291:
 541:src/xeq.c     **** 		}
 3800              		.loc 1 541 4 view .LVU1036
 541:src/xeq.c     **** 		}
 3801              		.loc 1 541 4 is_stmt 0 view .LVU1037
 3802              	.LBE1532:
 3803              	.LBE1533:
 545:src/xeq.c     **** 
 3804              		.loc 1 545 1 view .LVU1038
 3805 0016 2046     		mov	r0, r4
 3806 0018 10BD     		pop	{r4, pc}
 3807              	.L318:
 3808 001a 00BF     		.align	2
 3809              	.L317:
 3810 001c 00000000 		.word	Error
 3811              		.cfi_endproc
 3812              	.LFE28:
 3814              		.section	.text.report_warn,"ax",%progbits
 3815              		.align	1
 3816              		.p2align 2,,3
 3817              		.global	report_warn
 3818              		.syntax unified
 3819              		.thumb
 3820              		.thumb_func
 3821              		.fpu fpv4-sp-d16
 3823              	report_warn:
 3824              	.LVL292:
 3825              	.LFB29:
 550:src/xeq.c     **** 	if (Running) {
 3826              		.loc 1 550 39 is_stmt 1 view -0
 3827              		.cfi_startproc
 3828              		@ args = 0, pretend = 0, frame = 0
 3829              		@ frame_needed = 0, uses_anonymous_args = 0
 551:src/xeq.c     **** 		return report_err(e);
 3830              		.loc 1 551 2 view .LVU1040
 551:src/xeq.c     **** 		return report_err(e);
 3831              		.loc 1 551 6 is_stmt 0 view .LVU1041
 3832 0000 114B     		ldr	r3, .L325
 550:src/xeq.c     **** 	if (Running) {
ARM GAS  /tmp/cciWh9P3.s 			page 181


 3833              		.loc 1 550 39 view .LVU1042
 3834 0002 70B5     		push	{r4, r5, r6, lr}
 3835              		.cfi_def_cfa_offset 16
 3836              		.cfi_offset 4, -16
 3837              		.cfi_offset 5, -12
 3838              		.cfi_offset 6, -8
 3839              		.cfi_offset 14, -4
 551:src/xeq.c     **** 		return report_err(e);
 3840              		.loc 1 551 5 view .LVU1043
 3841 0004 1D68     		ldr	r5, [r3]
 550:src/xeq.c     **** 	if (Running) {
 3842              		.loc 1 550 39 view .LVU1044
 3843 0006 0446     		mov	r4, r0
 551:src/xeq.c     **** 		return report_err(e);
 3844              		.loc 1 551 5 view .LVU1045
 3845 0008 5DB1     		cbz	r5, .L320
 552:src/xeq.c     **** 	}
 3846              		.loc 1 552 3 is_stmt 1 view .LVU1046
 3847              	.LVL293:
 3848              	.LBB1542:
 3849              	.LBI1542:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3850              		.loc 1 536 5 view .LVU1047
 3851              	.LBB1543:
 537:src/xeq.c     **** 		Error = e;
 3852              		.loc 1 537 2 view .LVU1048
 537:src/xeq.c     **** 		Error = e;
 3853              		.loc 1 537 12 is_stmt 0 view .LVU1049
 3854 000a 104B     		ldr	r3, .L325+4
 3855 000c 1D68     		ldr	r5, [r3]
 537:src/xeq.c     **** 		Error = e;
 3856              		.loc 1 537 5 view .LVU1050
 3857 000e 15B1     		cbz	r5, .L321
 3858              	.L323:
 544:src/xeq.c     **** }
 3859              		.loc 1 544 9 view .LVU1051
 3860 0010 0125     		movs	r5, #1
 3861              	.LVL294:
 3862              	.L319:
 544:src/xeq.c     **** }
 3863              		.loc 1 544 9 view .LVU1052
 3864              	.LBE1543:
 3865              	.LBE1542:
 561:src/xeq.c     **** 
 3866              		.loc 1 561 1 view .LVU1053
 3867 0012 2846     		mov	r0, r5
 3868 0014 70BD     		pop	{r4, r5, r6, pc}
 3869              	.LVL295:
 3870              	.L321:
 3871              	.LBB1547:
 3872              	.LBB1546:
 3873              	.LBB1544:
 3874              	.LBI1544:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3875              		.loc 1 536 5 is_stmt 1 view .LVU1054
 3876              	.LBB1545:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/cciWh9P3.s 			page 182


 3877              		.loc 1 538 3 view .LVU1055
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 3878              		.loc 1 538 9 is_stmt 0 view .LVU1056
 3879 0016 1860     		str	r0, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 3880              		.loc 1 539 3 is_stmt 1 view .LVU1057
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 3881              		.loc 1 539 6 is_stmt 0 view .LVU1058
 3882 0018 0028     		cmp	r0, #0
 3883 001a F9D1     		bne	.L323
 540:src/xeq.c     **** 			return 0;
 3884              		.loc 1 540 4 is_stmt 1 view .LVU1059
 3885 001c FFF7FEFF 		bl	error_message
 3886              	.LVL296:
 541:src/xeq.c     **** 		}
 3887              		.loc 1 541 4 view .LVU1060
 541:src/xeq.c     **** 		}
 3888              		.loc 1 541 11 is_stmt 0 view .LVU1061
 3889 0020 F7E7     		b	.L319
 3890              	.LVL297:
 3891              	.L320:
 541:src/xeq.c     **** 		}
 3892              		.loc 1 541 11 view .LVU1062
 3893              	.LBE1545:
 3894              	.LBE1544:
 3895              	.LBE1546:
 3896              	.LBE1547:
 3897              	.LBB1548:
 3898              	.LBI1548:
 550:src/xeq.c     **** 	if (Running) {
 3899              		.loc 1 550 5 is_stmt 1 view .LVU1063
 3900              	.LBB1549:
 554:src/xeq.c     **** #ifndef CONSOLE
 3901              		.loc 1 554 2 view .LVU1064
 3902 0022 FFF7FEFF 		bl	error_message
 3903              	.LVL298:
 556:src/xeq.c     **** 	JustDisplayed = 1;
 3904              		.loc 1 556 2 view .LVU1065
 556:src/xeq.c     **** 	JustDisplayed = 1;
 3905              		.loc 1 556 21 is_stmt 0 view .LVU1066
 3906 0026 0A4A     		ldr	r2, .L325+8
 557:src/xeq.c     **** 	ShowRPN = 1;
 3907              		.loc 1 557 16 view .LVU1067
 3908 0028 0A4E     		ldr	r6, .L325+12
 556:src/xeq.c     **** 	JustDisplayed = 1;
 3909              		.loc 1 556 21 view .LVU1068
 3910 002a D17D     		ldrb	r1, [r2, #23]	@ zero_extendqisi2
 558:src/xeq.c     **** #endif
 3911              		.loc 1 558 10 view .LVU1069
 3912 002c 0A48     		ldr	r0, .L325+16
 556:src/xeq.c     **** 	JustDisplayed = 1;
 3913              		.loc 1 556 21 view .LVU1070
 3914 002e 65F30411 		bfi	r1, r5, #4, #1
 560:src/xeq.c     **** }
 3915              		.loc 1 560 11 view .LVU1071
 3916 0032 251E     		subs	r5, r4, #0
 557:src/xeq.c     **** 	ShowRPN = 1;
ARM GAS  /tmp/cciWh9P3.s 			page 183


 3917              		.loc 1 557 16 view .LVU1072
 3918 0034 4FF00103 		mov	r3, #1
 556:src/xeq.c     **** 	JustDisplayed = 1;
 3919              		.loc 1 556 21 view .LVU1073
 3920 0038 D175     		strb	r1, [r2, #23]
 557:src/xeq.c     **** 	ShowRPN = 1;
 3921              		.loc 1 557 2 is_stmt 1 view .LVU1074
 560:src/xeq.c     **** }
 3922              		.loc 1 560 11 is_stmt 0 view .LVU1075
 3923 003a 18BF     		it	ne
 3924 003c 0125     		movne	r5, #1
 558:src/xeq.c     **** #endif
 3925              		.loc 1 558 10 view .LVU1076
 3926 003e 0360     		str	r3, [r0]
 557:src/xeq.c     **** 	ShowRPN = 1;
 3927              		.loc 1 557 16 view .LVU1077
 3928 0040 3360     		str	r3, [r6]
 558:src/xeq.c     **** #endif
 3929              		.loc 1 558 2 is_stmt 1 view .LVU1078
 560:src/xeq.c     **** }
 3930              		.loc 1 560 2 view .LVU1079
 3931              	.LVL299:
 560:src/xeq.c     **** }
 3932              		.loc 1 560 2 is_stmt 0 view .LVU1080
 3933              	.LBE1549:
 3934              	.LBE1548:
 561:src/xeq.c     **** 
 3935              		.loc 1 561 1 view .LVU1081
 3936 0042 2846     		mov	r0, r5
 3937 0044 70BD     		pop	{r4, r5, r6, pc}
 3938              	.LVL300:
 3939              	.L326:
 561:src/xeq.c     **** 
 3940              		.loc 1 561 1 view .LVU1082
 3941 0046 00BF     		.align	2
 3942              	.L325:
 3943 0048 00000000 		.word	Running
 3944 004c 00000000 		.word	Error
 3945 0050 00000000 		.word	StateWhileOn
 3946 0054 00000000 		.word	JustDisplayed
 3947 0058 00000000 		.word	ShowRPN
 3948              		.cfi_endproc
 3949              	.LFE29:
 3951              		.section	.text.bad_mode_error,"ax",%progbits
 3952              		.align	1
 3953              		.p2align 2,,3
 3954              		.global	bad_mode_error
 3955              		.syntax unified
 3956              		.thumb
 3957              		.thumb_func
 3958              		.fpu fpv4-sp-d16
 3960              	bad_mode_error:
 3961              	.LFB30:
 565:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 3962              		.loc 1 565 27 is_stmt 1 view -0
 3963              		.cfi_startproc
 3964              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cciWh9P3.s 			page 184


 3965              		@ frame_needed = 0, uses_anonymous_args = 0
 3966              		@ link register save eliminated.
 566:src/xeq.c     **** }
 3967              		.loc 1 566 2 view .LVU1084
 3968              	.LVL301:
 3969              	.LBB1554:
 3970              	.LBI1554:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3971              		.loc 1 536 5 view .LVU1085
 3972              	.LBB1555:
 537:src/xeq.c     **** 		Error = e;
 3973              		.loc 1 537 2 view .LVU1086
 537:src/xeq.c     **** 		Error = e;
 3974              		.loc 1 537 12 is_stmt 0 view .LVU1087
 3975 0000 024B     		ldr	r3, .L329
 537:src/xeq.c     **** 		Error = e;
 3976              		.loc 1 537 5 view .LVU1088
 3977 0002 1A68     		ldr	r2, [r3]
 3978 0004 0AB9     		cbnz	r2, .L327
 3979              	.LVL302:
 3980              	.LBB1556:
 3981              	.LBI1556:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3982              		.loc 1 536 5 is_stmt 1 view .LVU1089
 3983              	.LBB1557:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 3984              		.loc 1 538 3 view .LVU1090
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 3985              		.loc 1 538 9 is_stmt 0 view .LVU1091
 3986 0006 0D22     		movs	r2, #13
 3987 0008 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 3988              		.loc 1 539 3 is_stmt 1 view .LVU1092
 3989              	.LVL303:
 3990              	.L327:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 3991              		.loc 1 539 3 is_stmt 0 view .LVU1093
 3992              	.LBE1557:
 3993              	.LBE1556:
 3994              	.LBE1555:
 3995              	.LBE1554:
 567:src/xeq.c     **** 
 3996              		.loc 1 567 1 view .LVU1094
 3997 000a 7047     		bx	lr
 3998              	.L330:
 3999              		.align	2
 4000              	.L329:
 4001 000c 00000000 		.word	Error
 4002              		.cfi_endproc
 4003              	.LFE30:
 4005              		.section	.text.cmderr,"ax",%progbits
 4006              		.align	1
 4007              		.p2align 2,,3
 4008              		.global	cmderr
 4009              		.syntax unified
 4010              		.thumb
 4011              		.thumb_func
ARM GAS  /tmp/cciWh9P3.s 			page 185


 4012              		.fpu fpv4-sp-d16
 4014              	cmderr:
 4015              	.LVL304:
 4016              	.LFB31:
 571:src/xeq.c     **** 	report_err(arg);
 4017              		.loc 1 571 45 is_stmt 1 view -0
 4018              		.cfi_startproc
 4019              		@ args = 0, pretend = 0, frame = 0
 4020              		@ frame_needed = 0, uses_anonymous_args = 0
 4021              		@ link register save eliminated.
 572:src/xeq.c     **** }
 4022              		.loc 1 572 2 view .LVU1096
 4023              	.LBB1562:
 4024              	.LBB1563:
 537:src/xeq.c     **** 		Error = e;
 4025              		.loc 1 537 12 is_stmt 0 view .LVU1097
 4026 0000 034A     		ldr	r2, .L336
 537:src/xeq.c     **** 		Error = e;
 4027              		.loc 1 537 5 view .LVU1098
 4028 0002 1168     		ldr	r1, [r2]
 4029              	.LVL305:
 537:src/xeq.c     **** 		Error = e;
 4030              		.loc 1 537 5 view .LVU1099
 4031              	.LBE1563:
 4032              	.LBI1562:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4033              		.loc 1 536 5 is_stmt 1 view .LVU1100
 4034              	.LBB1568:
 537:src/xeq.c     **** 		Error = e;
 4035              		.loc 1 537 2 view .LVU1101
 537:src/xeq.c     **** 		Error = e;
 4036              		.loc 1 537 5 is_stmt 0 view .LVU1102
 4037 0004 09B9     		cbnz	r1, .L331
 4038              	.LVL306:
 4039              	.LBB1564:
 4040              	.LBI1564:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4041              		.loc 1 536 5 is_stmt 1 view .LVU1103
 4042              	.LBB1565:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 4043              		.loc 1 538 3 view .LVU1104
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 4044              		.loc 1 538 9 is_stmt 0 view .LVU1105
 4045 0006 1060     		str	r0, [r2]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 4046              		.loc 1 539 3 is_stmt 1 view .LVU1106
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 4047              		.loc 1 539 6 is_stmt 0 view .LVU1107
 4048 0008 00B1     		cbz	r0, .L335
 4049              	.LVL307:
 4050              	.L331:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 4051              		.loc 1 539 6 view .LVU1108
 4052              	.LBE1565:
 4053              	.LBE1564:
 4054              	.LBE1568:
 4055              	.LBE1562:
ARM GAS  /tmp/cciWh9P3.s 			page 186


 573:src/xeq.c     **** 
 4056              		.loc 1 573 1 view .LVU1109
 4057 000a 7047     		bx	lr
 4058              	.LVL308:
 4059              	.L335:
 4060              	.LBB1570:
 4061              	.LBB1569:
 4062              	.LBB1567:
 4063              	.LBB1566:
 540:src/xeq.c     **** 			return 0;
 4064              		.loc 1 540 4 is_stmt 1 view .LVU1110
 4065 000c FFF7FEBF 		b	error_message
 4066              	.LVL309:
 4067              	.L337:
 540:src/xeq.c     **** 			return 0;
 4068              		.loc 1 540 4 is_stmt 0 view .LVU1111
 4069              		.align	2
 4070              	.L336:
 4071 0010 00000000 		.word	Error
 4072              	.LBE1566:
 4073              	.LBE1567:
 4074              	.LBE1569:
 4075              	.LBE1570:
 4076              		.cfi_endproc
 4077              	.LFE31:
 4079              		.section	.text.cmdmsg,"ax",%progbits
 4080              		.align	1
 4081              		.p2align 2,,3
 4082              		.global	cmdmsg
 4083              		.syntax unified
 4084              		.thumb
 4085              		.thumb_func
 4086              		.fpu fpv4-sp-d16
 4088              	cmdmsg:
 4089              	.LVL310:
 4090              	.LFB32:
 577:src/xeq.c     **** 	error_message(arg);
 4091              		.loc 1 577 45 is_stmt 1 view -0
 4092              		.cfi_startproc
 4093              		@ args = 0, pretend = 0, frame = 0
 4094              		@ frame_needed = 0, uses_anonymous_args = 0
 4095              		@ link register save eliminated.
 578:src/xeq.c     **** }
 4096              		.loc 1 578 2 view .LVU1113
 4097 0000 FFF7FEBF 		b	error_message
 4098              	.LVL311:
 578:src/xeq.c     **** }
 4099              		.loc 1 578 2 is_stmt 0 view .LVU1114
 4100              		.cfi_endproc
 4101              	.LFE32:
 4103              		.section	.text.rarg_roundingmode,"ax",%progbits
 4104              		.align	1
 4105              		.p2align 2,,3
 4106              		.global	rarg_roundingmode
 4107              		.syntax unified
 4108              		.thumb
 4109              		.thumb_func
ARM GAS  /tmp/cciWh9P3.s 			page 187


 4110              		.fpu fpv4-sp-d16
 4112              	rarg_roundingmode:
 4113              	.LVL312:
 4114              	.LFB35:
 613:src/xeq.c     **** 	UState.rounding_mode = arg;
 4115              		.loc 1 613 56 is_stmt 1 view -0
 4116              		.cfi_startproc
 4117              		@ args = 0, pretend = 0, frame = 0
 4118              		@ frame_needed = 0, uses_anonymous_args = 0
 4119              		@ link register save eliminated.
 614:src/xeq.c     **** }
 4120              		.loc 1 614 2 view .LVU1116
 614:src/xeq.c     **** }
 4121              		.loc 1 614 23 is_stmt 0 view .LVU1117
 4122 0000 044B     		ldr	r3, .L340
 4123 0002 1B68     		ldr	r3, [r3]
 4124 0004 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 4125 0008 60F30612 		bfi	r2, r0, #4, #3
 4126              	.LVL313:
 614:src/xeq.c     **** }
 4127              		.loc 1 614 23 view .LVU1118
 4128 000c 83F8EB27 		strb	r2, [r3, #2027]
 615:src/xeq.c     **** 
 4129              		.loc 1 615 1 view .LVU1119
 4130 0010 7047     		bx	lr
 4131              	.L341:
 4132 0012 00BF     		.align	2
 4133              	.L340:
 4134 0014 00000000 		.word	main_ram
 4135              		.cfi_endproc
 4136              	.LFE35:
 4138              		.section	.text.packed_from_number,"ax",%progbits
 4139              		.align	1
 4140              		.p2align 2,,3
 4141              		.global	packed_from_number
 4142              		.syntax unified
 4143              		.thumb
 4144              		.thumb_func
 4145              		.fpu fpv4-sp-d16
 4147              	packed_from_number:
 4148              	.LVL314:
 4149              	.LFB36:
 621:src/xeq.c     **** 	decContext ctx64;
 4150              		.loc 1 621 59 is_stmt 1 view -0
 4151              		.cfi_startproc
 4152              		@ args = 0, pretend = 0, frame = 24
 4153              		@ frame_needed = 0, uses_anonymous_args = 0
 622:src/xeq.c     **** 
 4154              		.loc 1 622 2 view .LVU1121
 624:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4155              		.loc 1 624 2 view .LVU1122
 621:src/xeq.c     **** 	decContext ctx64;
 4156              		.loc 1 621 59 is_stmt 0 view .LVU1123
 4157 0000 70B5     		push	{r4, r5, r6, lr}
 4158              		.cfi_def_cfa_offset 16
 4159              		.cfi_offset 4, -16
 4160              		.cfi_offset 5, -12
ARM GAS  /tmp/cciWh9P3.s 			page 188


 4161              		.cfi_offset 6, -8
 4162              		.cfi_offset 14, -4
 4163 0002 86B0     		sub	sp, sp, #24
 4164              		.cfi_def_cfa_offset 40
 621:src/xeq.c     **** 	decContext ctx64;
 4165              		.loc 1 621 59 view .LVU1124
 4166 0004 0446     		mov	r4, r0
 4167 0006 0D46     		mov	r5, r1
 624:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4168              		.loc 1 624 2 view .LVU1125
 4169 0008 6846     		mov	r0, sp
 4170              	.LVL315:
 624:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4171              		.loc 1 624 2 view .LVU1126
 4172 000a 4021     		movs	r1, #64
 4173              	.LVL316:
 624:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4174              		.loc 1 624 2 view .LVU1127
 4175 000c FFF7FEFF 		bl	decContextDefault
 4176              	.LVL317:
 625:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4177              		.loc 1 625 2 is_stmt 1 view .LVU1128
 4178              	.LBB1571:
 4179              	.LBI1571:
 600:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4180              		.loc 1 600 22 view .LVU1129
 4181              	.LBB1572:
 601:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4182              		.loc 1 601 2 view .LVU1130
 606:src/xeq.c     **** }
 4183              		.loc 1 606 2 view .LVU1131
 606:src/xeq.c     **** }
 4184              		.loc 1 606 37 is_stmt 0 view .LVU1132
 4185 0010 084B     		ldr	r3, .L344
 606:src/xeq.c     **** }
 4186              		.loc 1 606 9 view .LVU1133
 4187 0012 094E     		ldr	r6, .L344+4
 606:src/xeq.c     **** }
 4188              		.loc 1 606 37 view .LVU1134
 4189 0014 1B68     		ldr	r3, [r3]
 4190 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4191 001a C3F30213 		ubfx	r3, r3, #4, #3
 4192              	.LBE1572:
 4193              	.LBE1571:
 626:src/xeq.c     **** }
 4194              		.loc 1 626 2 view .LVU1135
 4195 001e 2946     		mov	r1, r5
 625:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4196              		.loc 1 625 14 view .LVU1136
 4197 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4198 0022 8DF80C30 		strb	r3, [sp, #12]
 626:src/xeq.c     **** }
 4199              		.loc 1 626 2 is_stmt 1 view .LVU1137
 4200 0026 2046     		mov	r0, r4
 4201 0028 6A46     		mov	r2, sp
 4202 002a FFF7FEFF 		bl	decimal64FromNumber
 4203              	.LVL318:
ARM GAS  /tmp/cciWh9P3.s 			page 189


 627:src/xeq.c     **** 
 4204              		.loc 1 627 1 is_stmt 0 view .LVU1138
 4205 002e 06B0     		add	sp, sp, #24
 4206              		.cfi_def_cfa_offset 16
 4207              		@ sp needed
 4208 0030 70BD     		pop	{r4, r5, r6, pc}
 4209              	.LVL319:
 4210              	.L345:
 627:src/xeq.c     **** 
 4211              		.loc 1 627 1 view .LVU1139
 4212 0032 00BF     		.align	2
 4213              	.L344:
 4214 0034 00000000 		.word	main_ram
 4215 0038 00000000 		.word	.LANCHOR1
 4216              		.cfi_endproc
 4217              	.LFE36:
 4219              		.section	.text.packed128_from_number,"ax",%progbits
 4220              		.align	1
 4221              		.p2align 2,,3
 4222              		.global	packed128_from_number
 4223              		.syntax unified
 4224              		.thumb
 4225              		.thumb_func
 4226              		.fpu fpv4-sp-d16
 4228              	packed128_from_number:
 4229              	.LVL320:
 4230              	.LFB37:
 629:src/xeq.c     **** 	decContext ctx128;
 4231              		.loc 1 629 63 is_stmt 1 view -0
 4232              		.cfi_startproc
 4233              		@ args = 0, pretend = 0, frame = 24
 4234              		@ frame_needed = 0, uses_anonymous_args = 0
 630:src/xeq.c     **** 
 4235              		.loc 1 630 2 view .LVU1141
 632:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4236              		.loc 1 632 2 view .LVU1142
 629:src/xeq.c     **** 	decContext ctx128;
 4237              		.loc 1 629 63 is_stmt 0 view .LVU1143
 4238 0000 70B5     		push	{r4, r5, r6, lr}
 4239              		.cfi_def_cfa_offset 16
 4240              		.cfi_offset 4, -16
 4241              		.cfi_offset 5, -12
 4242              		.cfi_offset 6, -8
 4243              		.cfi_offset 14, -4
 4244 0002 86B0     		sub	sp, sp, #24
 4245              		.cfi_def_cfa_offset 40
 629:src/xeq.c     **** 	decContext ctx128;
 4246              		.loc 1 629 63 view .LVU1144
 4247 0004 0446     		mov	r4, r0
 4248 0006 0D46     		mov	r5, r1
 632:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4249              		.loc 1 632 2 view .LVU1145
 4250 0008 6846     		mov	r0, sp
 4251              	.LVL321:
 632:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4252              		.loc 1 632 2 view .LVU1146
 4253 000a 8021     		movs	r1, #128
ARM GAS  /tmp/cciWh9P3.s 			page 190


 4254              	.LVL322:
 632:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4255              		.loc 1 632 2 view .LVU1147
 4256 000c FFF7FEFF 		bl	decContextDefault
 4257              	.LVL323:
 633:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4258              		.loc 1 633 2 is_stmt 1 view .LVU1148
 4259              	.LBB1573:
 4260              	.LBI1573:
 600:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4261              		.loc 1 600 22 view .LVU1149
 4262              	.LBB1574:
 601:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4263              		.loc 1 601 2 view .LVU1150
 606:src/xeq.c     **** }
 4264              		.loc 1 606 2 view .LVU1151
 606:src/xeq.c     **** }
 4265              		.loc 1 606 37 is_stmt 0 view .LVU1152
 4266 0010 084B     		ldr	r3, .L348
 606:src/xeq.c     **** }
 4267              		.loc 1 606 9 view .LVU1153
 4268 0012 094E     		ldr	r6, .L348+4
 606:src/xeq.c     **** }
 4269              		.loc 1 606 37 view .LVU1154
 4270 0014 1B68     		ldr	r3, [r3]
 4271 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4272 001a C3F30213 		ubfx	r3, r3, #4, #3
 4273              	.LBE1574:
 4274              	.LBE1573:
 634:src/xeq.c     **** }
 4275              		.loc 1 634 2 view .LVU1155
 4276 001e 2946     		mov	r1, r5
 633:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4277              		.loc 1 633 15 view .LVU1156
 4278 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4279 0022 8DF80C30 		strb	r3, [sp, #12]
 634:src/xeq.c     **** }
 4280              		.loc 1 634 2 is_stmt 1 view .LVU1157
 4281 0026 2046     		mov	r0, r4
 4282 0028 6A46     		mov	r2, sp
 4283 002a FFF7FEFF 		bl	decimal128FromNumber
 4284              	.LVL324:
 635:src/xeq.c     **** 
 4285              		.loc 1 635 1 is_stmt 0 view .LVU1158
 4286 002e 06B0     		add	sp, sp, #24
 4287              		.cfi_def_cfa_offset 16
 4288              		@ sp needed
 4289 0030 70BD     		pop	{r4, r5, r6, pc}
 4290              	.LVL325:
 4291              	.L349:
 635:src/xeq.c     **** 
 4292              		.loc 1 635 1 view .LVU1159
 4293 0032 00BF     		.align	2
 4294              	.L348:
 4295 0034 00000000 		.word	main_ram
 4296 0038 00000000 		.word	.LANCHOR1
 4297              		.cfi_endproc
ARM GAS  /tmp/cciWh9P3.s 			page 191


 4298              	.LFE37:
 4300              		.section	.text.check_special,"ax",%progbits
 4301              		.align	1
 4302              		.p2align 2,,3
 4303              		.syntax unified
 4304              		.thumb
 4305              		.thumb_func
 4306              		.fpu fpv4-sp-d16
 4308              	check_special:
 4309              	.LVL326:
 4310              	.LFB41:
 674:src/xeq.c     **** 	decNumber y;
 4311              		.loc 1 674 46 is_stmt 1 view -0
 4312              		.cfi_startproc
 4313              		@ args = 0, pretend = 0, frame = 64
 4314              		@ frame_needed = 0, uses_anonymous_args = 0
 675:src/xeq.c     **** 	decimal64 z;
 4315              		.loc 1 675 2 view .LVU1161
 676:src/xeq.c     **** 	decimal128 d;
 4316              		.loc 1 676 2 view .LVU1162
 677:src/xeq.c     **** 	if (is_dblmode()) {
 4317              		.loc 1 677 2 view .LVU1163
 678:src/xeq.c     **** 		packed128_from_number(&d, x);
 4318              		.loc 1 678 2 view .LVU1164
 4319              	.LBB1591:
 4320              	.LBI1591:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4321              		.loc 1 931 5 view .LVU1165
 4322              	.LBB1592:
 932:src/xeq.c     **** }
 4323              		.loc 1 932 2 view .LVU1166
 932:src/xeq.c     **** }
 4324              		.loc 1 932 24 is_stmt 0 view .LVU1167
 4325 0000 274B     		ldr	r3, .L364
 4326 0002 1B68     		ldr	r3, [r3]
 4327              	.LBE1592:
 4328              	.LBE1591:
 674:src/xeq.c     **** 	decNumber y;
 4329              		.loc 1 674 46 view .LVU1168
 4330 0004 00B5     		push	{lr}
 4331              		.cfi_def_cfa_offset 4
 4332              		.cfi_offset 14, -4
 4333              	.LBB1594:
 4334              	.LBB1593:
 932:src/xeq.c     **** }
 4335              		.loc 1 932 24 view .LVU1169
 4336 0006 B3F8E827 		ldrh	r2, [r3, #2024]
 4337 000a 44F20103 		movw	r3, #16385
 4338              	.LBE1593:
 4339              	.LBE1594:
 678:src/xeq.c     **** 		packed128_from_number(&d, x);
 4340              		.loc 1 678 5 view .LVU1170
 4341 000e 1340     		ands	r3, r3, r2
 4342 0010 B3F5804F 		cmp	r3, #16384
 674:src/xeq.c     **** 	decNumber y;
 4343              		.loc 1 674 46 view .LVU1171
 4344 0014 91B0     		sub	sp, sp, #68
ARM GAS  /tmp/cciWh9P3.s 			page 192


 4345              		.cfi_def_cfa_offset 72
 674:src/xeq.c     **** 	decNumber y;
 4346              		.loc 1 674 46 view .LVU1172
 4347 0016 0146     		mov	r1, r0
 678:src/xeq.c     **** 		packed128_from_number(&d, x);
 4348              		.loc 1 678 5 view .LVU1173
 4349 0018 0FD0     		beq	.L362
 684:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4350              		.loc 1 684 3 is_stmt 1 view .LVU1174
 4351 001a 01A8     		add	r0, sp, #4
 4352              	.LVL327:
 684:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4353              		.loc 1 684 3 is_stmt 0 view .LVU1175
 4354 001c FFF7FEFF 		bl	packed_from_number
 4355              	.LVL328:
 685:src/xeq.c     **** 	}
 4356              		.loc 1 685 3 is_stmt 1 view .LVU1176
 4357 0020 01A8     		add	r0, sp, #4
 4358 0022 07A9     		add	r1, sp, #28
 4359 0024 FFF7FEFF 		bl	decimal64ToNumber
 4360              	.LVL329:
 687:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4361              		.loc 1 687 2 view .LVU1177
 687:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4362              		.loc 1 687 5 is_stmt 0 view .LVU1178
 4363 0028 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4364 002c 13F0700F 		tst	r3, #112
 4365 0030 0FD1     		bne	.L353
 4366              	.L355:
 698:src/xeq.c     **** }
 4367              		.loc 1 698 9 view .LVU1179
 4368 0032 0020     		movs	r0, #0
 4369              	.L350:
 699:src/xeq.c     **** 
 4370              		.loc 1 699 1 view .LVU1180
 4371 0034 11B0     		add	sp, sp, #68
 4372              		.cfi_remember_state
 4373              		.cfi_def_cfa_offset 4
 4374              		@ sp needed
 4375 0036 5DF804FB 		ldr	pc, [sp], #4
 4376              	.LVL330:
 4377              	.L362:
 4378              		.cfi_restore_state
 679:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4379              		.loc 1 679 3 is_stmt 1 view .LVU1181
 4380 003a 03A8     		add	r0, sp, #12
 4381              	.LVL331:
 679:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4382              		.loc 1 679 3 is_stmt 0 view .LVU1182
 4383 003c FFF7FEFF 		bl	packed128_from_number
 4384              	.LVL332:
 680:src/xeq.c     **** 	}
 4385              		.loc 1 680 3 is_stmt 1 view .LVU1183
 4386 0040 03A8     		add	r0, sp, #12
 4387 0042 07A9     		add	r1, sp, #28
 4388 0044 FFF7FEFF 		bl	decimal128ToNumber
 4389              	.LVL333:
ARM GAS  /tmp/cciWh9P3.s 			page 193


 687:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4390              		.loc 1 687 2 view .LVU1184
 687:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4391              		.loc 1 687 5 is_stmt 0 view .LVU1185
 4392 0048 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4393 004c 13F0700F 		tst	r3, #112
 4394 0050 EFD0     		beq	.L355
 4395              	.L353:
 688:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4396              		.loc 1 688 3 is_stmt 1 view .LVU1186
 4397              	.LVL334:
 4398              	.LBB1595:
 4399              	.LBI1595:
3317:src/xeq.c     **** 	unsigned short mask;
 4400              		.loc 1 3317 5 view .LVU1187
 4401              	.LBB1596:
3318:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 4402              		.loc 1 3318 2 view .LVU1188
3319:src/xeq.c     **** 
 4403              		.loc 1 3319 2 view .LVU1189
3319:src/xeq.c     **** 
 4404              		.loc 1 3319 34 is_stmt 0 view .LVU1190
 4405 0052 0DF10201 		add	r1, sp, #2
 4406 0056 6B20     		movs	r0, #107
 4407 0058 FFF7FEFF 		bl	flag_word
 4408              	.LVL335:
3321:src/xeq.c     **** }
 4409              		.loc 1 3321 2 is_stmt 1 view .LVU1191
3321:src/xeq.c     **** }
 4410              		.loc 1 3321 24 is_stmt 0 view .LVU1192
 4411 005c BDF80230 		ldrh	r3, [sp, #2]
 4412 0060 0288     		ldrh	r2, [r0]
 4413              	.LBE1596:
 4414              	.LBE1595:
 688:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4415              		.loc 1 688 6 view .LVU1193
 4416 0062 1A42     		tst	r2, r3
 4417 0064 E5D1     		bne	.L355
 689:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4418              		.loc 1 689 4 is_stmt 1 view .LVU1194
 689:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4419              		.loc 1 689 8 is_stmt 0 view .LVU1195
 4420 0066 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 689:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4421              		.loc 1 689 7 view .LVU1196
 4422 006a 13F0300F 		tst	r3, #48
 4423 006e 06D0     		beq	.L356
 690:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 4424              		.loc 1 690 5 is_stmt 1 view .LVU1197
 4425              	.LVL336:
 4426              	.LBB1597:
 4427              	.LBI1597:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4428              		.loc 1 536 5 view .LVU1198
 4429              	.LBB1598:
 537:src/xeq.c     **** 		Error = e;
 4430              		.loc 1 537 2 view .LVU1199
ARM GAS  /tmp/cciWh9P3.s 			page 194


 537:src/xeq.c     **** 		Error = e;
 4431              		.loc 1 537 12 is_stmt 0 view .LVU1200
 4432 0070 0C4B     		ldr	r3, .L364+4
 537:src/xeq.c     **** 		Error = e;
 4433              		.loc 1 537 5 view .LVU1201
 4434 0072 1A68     		ldr	r2, [r3]
 4435              	.LBB1599:
 4436              	.LBB1600:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 4437              		.loc 1 538 9 view .LVU1202
 4438 0074 0120     		movs	r0, #1
 4439              	.LBE1600:
 4440              	.LBE1599:
 537:src/xeq.c     **** 		Error = e;
 4441              		.loc 1 537 5 view .LVU1203
 4442 0076 002A     		cmp	r2, #0
 4443 0078 DCD1     		bne	.L350
 4444              	.LVL337:
 4445              	.LBB1602:
 4446              	.LBI1599:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4447              		.loc 1 536 5 is_stmt 1 view .LVU1204
 4448              	.LBB1601:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 4449              		.loc 1 538 3 view .LVU1205
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 4450              		.loc 1 538 9 is_stmt 0 view .LVU1206
 4451 007a 1860     		str	r0, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 4452              		.loc 1 539 3 is_stmt 1 view .LVU1207
 4453 007c DAE7     		b	.L350
 4454              	.LVL338:
 4455              	.L356:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 4456              		.loc 1 539 3 is_stmt 0 view .LVU1208
 4457              	.LBE1601:
 4458              	.LBE1602:
 4459              	.LBE1598:
 4460              	.LBE1597:
 691:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4461              		.loc 1 691 9 is_stmt 1 view .LVU1209
 691:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4462              		.loc 1 691 12 is_stmt 0 view .LVU1210
 4463 007e 13F0800F 		tst	r3, #128
 4464              	.LBB1603:
 4465              	.LBB1604:
 537:src/xeq.c     **** 		Error = e;
 4466              		.loc 1 537 12 view .LVU1211
 4467 0082 084B     		ldr	r3, .L364+4
 537:src/xeq.c     **** 		Error = e;
 4468              		.loc 1 537 5 view .LVU1212
 4469 0084 1A68     		ldr	r2, [r3]
 4470              	.LBE1604:
 4471              	.LBE1603:
 691:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4472              		.loc 1 691 12 view .LVU1213
 4473 0086 04D1     		bne	.L363
ARM GAS  /tmp/cciWh9P3.s 			page 195


 694:src/xeq.c     **** 			return 1;
 4474              		.loc 1 694 5 is_stmt 1 view .LVU1214
 4475              	.LVL339:
 4476              	.LBB1608:
 4477              	.LBI1608:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4478              		.loc 1 536 5 view .LVU1215
 4479              	.LBB1609:
 537:src/xeq.c     **** 		Error = e;
 4480              		.loc 1 537 2 view .LVU1216
 537:src/xeq.c     **** 		Error = e;
 4481              		.loc 1 537 5 is_stmt 0 view .LVU1217
 4482 0088 42B9     		cbnz	r2, .L360
 4483              	.LVL340:
 4484              	.LBB1610:
 4485              	.LBI1610:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4486              		.loc 1 536 5 is_stmt 1 view .LVU1218
 4487              	.LBB1611:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 4488              		.loc 1 538 3 view .LVU1219
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 4489              		.loc 1 538 9 is_stmt 0 view .LVU1220
 4490 008a 0422     		movs	r2, #4
 4491 008c 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 4492              		.loc 1 539 3 is_stmt 1 view .LVU1221
 4493              	.LBE1611:
 4494              	.LBE1610:
 4495              	.LBE1609:
 4496              	.LBE1608:
 695:src/xeq.c     **** 		}
 4497              		.loc 1 695 11 is_stmt 0 view .LVU1222
 4498 008e 0120     		movs	r0, #1
 4499 0090 D0E7     		b	.L350
 4500              	.LVL341:
 4501              	.L363:
 692:src/xeq.c     **** 			else
 4502              		.loc 1 692 5 is_stmt 1 view .LVU1223
 4503              	.LBB1612:
 4504              	.LBI1603:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4505              		.loc 1 536 5 view .LVU1224
 4506              	.LBB1607:
 537:src/xeq.c     **** 		Error = e;
 4507              		.loc 1 537 2 view .LVU1225
 537:src/xeq.c     **** 		Error = e;
 4508              		.loc 1 537 5 is_stmt 0 view .LVU1226
 4509 0092 1AB9     		cbnz	r2, .L360
 4510              	.LVL342:
 4511              	.LBB1605:
 4512              	.LBI1605:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4513              		.loc 1 536 5 is_stmt 1 view .LVU1227
 4514              	.LBB1606:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 4515              		.loc 1 538 3 view .LVU1228
ARM GAS  /tmp/cciWh9P3.s 			page 196


 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 4516              		.loc 1 538 9 is_stmt 0 view .LVU1229
 4517 0094 0522     		movs	r2, #5
 4518 0096 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 4519              		.loc 1 539 3 is_stmt 1 view .LVU1230
 4520              	.LBE1606:
 4521              	.LBE1605:
 4522              	.LBE1607:
 4523              	.LBE1612:
 695:src/xeq.c     **** 		}
 4524              		.loc 1 695 11 is_stmt 0 view .LVU1231
 4525 0098 0120     		movs	r0, #1
 4526 009a CBE7     		b	.L350
 4527              	.LVL343:
 4528              	.L360:
 695:src/xeq.c     **** 		}
 4529              		.loc 1 695 11 view .LVU1232
 4530 009c 0120     		movs	r0, #1
 4531 009e C9E7     		b	.L350
 4532              	.L365:
 4533              		.align	2
 4534              	.L364:
 4535 00a0 00000000 		.word	main_ram
 4536 00a4 00000000 		.word	Error
 4537              		.cfi_endproc
 4538              	.LFE41:
 4540              		.section	.text.packed_from_packed128,"ax",%progbits
 4541              		.align	1
 4542              		.p2align 2,,3
 4543              		.global	packed_from_packed128
 4544              		.syntax unified
 4545              		.thumb
 4546              		.thumb_func
 4547              		.fpu fpv4-sp-d16
 4549              	packed_from_packed128:
 4550              	.LVL344:
 4551              	.LFB38:
 638:src/xeq.c     **** 	decNumber temp;
 4552              		.loc 1 638 63 is_stmt 1 view -0
 4553              		.cfi_startproc
 4554              		@ args = 0, pretend = 0, frame = 40
 4555              		@ frame_needed = 0, uses_anonymous_args = 0
 639:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 4556              		.loc 1 639 2 view .LVU1234
 640:src/xeq.c     **** }
 4557              		.loc 1 640 2 view .LVU1235
 638:src/xeq.c     **** 	decNumber temp;
 4558              		.loc 1 638 63 is_stmt 0 view .LVU1236
 4559 0000 10B5     		push	{r4, lr}
 4560              		.cfi_def_cfa_offset 8
 4561              		.cfi_offset 4, -8
 4562              		.cfi_offset 14, -4
 4563 0002 8AB0     		sub	sp, sp, #40
 4564              		.cfi_def_cfa_offset 48
 638:src/xeq.c     **** 	decNumber temp;
 4565              		.loc 1 638 63 view .LVU1237
ARM GAS  /tmp/cciWh9P3.s 			page 197


 4566 0004 0446     		mov	r4, r0
 640:src/xeq.c     **** }
 4567              		.loc 1 640 24 view .LVU1238
 4568 0006 0846     		mov	r0, r1
 4569              	.LVL345:
 640:src/xeq.c     **** }
 4570              		.loc 1 640 24 view .LVU1239
 4571 0008 01A9     		add	r1, sp, #4
 4572              	.LVL346:
 640:src/xeq.c     **** }
 4573              		.loc 1 640 24 view .LVU1240
 4574 000a FFF7FEFF 		bl	decimal128ToNumber
 4575              	.LVL347:
 640:src/xeq.c     **** }
 4576              		.loc 1 640 24 view .LVU1241
 4577 000e 0146     		mov	r1, r0
 640:src/xeq.c     **** }
 4578              		.loc 1 640 2 view .LVU1242
 4579 0010 2046     		mov	r0, r4
 4580 0012 FFF7FEFF 		bl	packed_from_number
 4581              	.LVL348:
 641:src/xeq.c     **** 
 4582              		.loc 1 641 1 view .LVU1243
 4583 0016 0AB0     		add	sp, sp, #40
 4584              		.cfi_def_cfa_offset 8
 4585              		@ sp needed
 4586 0018 10BD     		pop	{r4, pc}
 641:src/xeq.c     **** 
 4587              		.loc 1 641 1 view .LVU1244
 4588              		.cfi_endproc
 4589              	.LFE38:
 4591 001a 00BF     		.section	.text.packed128_from_packed,"ax",%progbits
 4592              		.align	1
 4593              		.p2align 2,,3
 4594              		.global	packed128_from_packed
 4595              		.syntax unified
 4596              		.thumb
 4597              		.thumb_func
 4598              		.fpu fpv4-sp-d16
 4600              	packed128_from_packed:
 4601              	.LVL349:
 4602              	.LFB39:
 644:src/xeq.c     **** 	decNumber temp;
 4603              		.loc 1 644 63 is_stmt 1 view -0
 4604              		.cfi_startproc
 4605              		@ args = 0, pretend = 0, frame = 40
 4606              		@ frame_needed = 0, uses_anonymous_args = 0
 645:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 4607              		.loc 1 645 2 view .LVU1246
 646:src/xeq.c     **** }
 4608              		.loc 1 646 2 view .LVU1247
 644:src/xeq.c     **** 	decNumber temp;
 4609              		.loc 1 644 63 is_stmt 0 view .LVU1248
 4610 0000 10B5     		push	{r4, lr}
 4611              		.cfi_def_cfa_offset 8
 4612              		.cfi_offset 4, -8
 4613              		.cfi_offset 14, -4
ARM GAS  /tmp/cciWh9P3.s 			page 198


 4614 0002 8AB0     		sub	sp, sp, #40
 4615              		.cfi_def_cfa_offset 48
 644:src/xeq.c     **** 	decNumber temp;
 4616              		.loc 1 644 63 view .LVU1249
 4617 0004 0446     		mov	r4, r0
 646:src/xeq.c     **** }
 4618              		.loc 1 646 27 view .LVU1250
 4619 0006 0846     		mov	r0, r1
 4620              	.LVL350:
 646:src/xeq.c     **** }
 4621              		.loc 1 646 27 view .LVU1251
 4622 0008 01A9     		add	r1, sp, #4
 4623              	.LVL351:
 646:src/xeq.c     **** }
 4624              		.loc 1 646 27 view .LVU1252
 4625 000a FFF7FEFF 		bl	decimal64ToNumber
 4626              	.LVL352:
 646:src/xeq.c     **** }
 4627              		.loc 1 646 27 view .LVU1253
 4628 000e 0146     		mov	r1, r0
 646:src/xeq.c     **** }
 4629              		.loc 1 646 2 view .LVU1254
 4630 0010 2046     		mov	r0, r4
 4631 0012 FFF7FEFF 		bl	packed128_from_number
 4632              	.LVL353:
 647:src/xeq.c     **** 
 4633              		.loc 1 647 1 view .LVU1255
 4634 0016 0AB0     		add	sp, sp, #40
 4635              		.cfi_def_cfa_offset 8
 4636              		@ sp needed
 4637 0018 10BD     		pop	{r4, pc}
 647:src/xeq.c     **** 
 4638              		.loc 1 647 1 view .LVU1256
 4639              		.cfi_endproc
 4640              	.LFE39:
 4642 001a 00BF     		.section	.text.stack_size,"ax",%progbits
 4643              		.align	1
 4644              		.p2align 2,,3
 4645              		.global	stack_size
 4646              		.syntax unified
 4647              		.thumb
 4648              		.thumb_func
 4649              		.fpu fpv4-sp-d16
 4651              	stack_size:
 4652              	.LFB42:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 4653              		.loc 1 702 22 is_stmt 1 view -0
 4654              		.cfi_startproc
 4655              		@ args = 0, pretend = 0, frame = 0
 4656              		@ frame_needed = 0, uses_anonymous_args = 0
 4657              		@ link register save eliminated.
 703:src/xeq.c     **** 		return 4;
 4658              		.loc 1 703 2 view .LVU1258
 703:src/xeq.c     **** 		return 4;
 4659              		.loc 1 703 8 is_stmt 0 view .LVU1259
 4660 0000 0B4B     		ldr	r3, .L376
 4661 0002 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 199


 703:src/xeq.c     **** 		return 4;
 4662              		.loc 1 703 6 view .LVU1260
 4663 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 4664              		.loc 1 703 5 view .LVU1261
 4665 0008 1207     		lsls	r2, r2, #28
 4666 000a 0ED5     		bpl	.L372
 4667              	.LBB1613:
 4668              	.LBI1613:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 4669              		.loc 1 181 5 is_stmt 1 view .LVU1262
 4670              	.LBB1614:
 182:src/xeq.c     **** }
 4671              		.loc 1 182 2 view .LVU1263
 182:src/xeq.c     **** }
 4672              		.loc 1 182 9 is_stmt 0 view .LVU1264
 4673 000c B3F8E037 		ldrh	r3, [r3, #2016]
 4674              	.LBE1614:
 4675              	.LBE1613:
 703:src/xeq.c     **** 		return 4;
 4676              		.loc 1 703 27 view .LVU1265
 4677 0010 9B0B     		lsrs	r3, r3, #14
 4678 0012 032B     		cmp	r3, #3
 4679 0014 01D0     		beq	.L375
 705:src/xeq.c     **** }
 4680              		.loc 1 705 9 view .LVU1266
 4681 0016 0820     		movs	r0, #8
 706:src/xeq.c     **** 
 4682              		.loc 1 706 1 view .LVU1267
 4683 0018 7047     		bx	lr
 4684              	.L375:
 703:src/xeq.c     **** 		return 4;
 4685              		.loc 1 703 44 discriminator 2 view .LVU1268
 4686 001a 064B     		ldr	r3, .L376+4
 703:src/xeq.c     **** 		return 4;
 4687              		.loc 1 703 41 discriminator 2 view .LVU1269
 4688 001c 93F90130 		ldrsb	r3, [r3, #1]
 4689 0020 002B     		cmp	r3, #0
 704:src/xeq.c     **** 	return 8;
 4690              		.loc 1 704 10 discriminator 2 view .LVU1270
 4691 0022 B4BF     		ite	lt
 4692 0024 0820     		movlt	r0, #8
 4693 0026 0420     		movge	r0, #4
 4694 0028 7047     		bx	lr
 4695              	.L372:
 704:src/xeq.c     **** 	return 8;
 4696              		.loc 1 704 10 view .LVU1271
 4697 002a 0420     		movs	r0, #4
 4698 002c 7047     		bx	lr
 4699              	.L377:
 4700 002e 00BF     		.align	2
 4701              	.L376:
 4702 0030 00000000 		.word	main_ram
 4703 0034 00000000 		.word	XromParams
 4704              		.cfi_endproc
 4705              	.LFE42:
 4707              		.section	.text.copyreg,"ax",%progbits
ARM GAS  /tmp/cciWh9P3.s 			page 200


 4708              		.align	1
 4709              		.p2align 2,,3
 4710              		.global	copyreg
 4711              		.syntax unified
 4712              		.thumb
 4713              		.thumb_func
 4714              		.fpu fpv4-sp-d16
 4716              	copyreg:
 4717              	.LVL354:
 4718              	.LFB45:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 4719              		.loc 1 716 46 is_stmt 1 view -0
 4720              		.cfi_startproc
 4721              		@ args = 0, pretend = 0, frame = 0
 4722              		@ frame_needed = 0, uses_anonymous_args = 0
 4723              		@ link register save eliminated.
 717:src/xeq.c     **** }
 4724              		.loc 1 717 2 view .LVU1273
 4725              	.LBB1615:
 4726              	.LBI1615:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4727              		.loc 1 931 5 view .LVU1274
 4728              	.LBB1616:
 932:src/xeq.c     **** }
 4729              		.loc 1 932 2 view .LVU1275
 932:src/xeq.c     **** }
 4730              		.loc 1 932 24 is_stmt 0 view .LVU1276
 4731 0000 064B     		ldr	r3, .L381
 4732 0002 1B68     		ldr	r3, [r3]
 4733 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 4734 0008 44F20103 		movw	r3, #16385
 4735              	.LBE1616:
 4736              	.LBE1615:
 717:src/xeq.c     **** }
 4737              		.loc 1 717 2 view .LVU1277
 4738 000c 1340     		ands	r3, r3, r2
 4739 000e B3F5804F 		cmp	r3, #16384
 4740 0012 0CBF     		ite	eq
 4741 0014 1022     		moveq	r2, #16
 4742 0016 0822     		movne	r2, #8
 4743 0018 FFF7FEBF 		b	xcopy
 4744              	.LVL355:
 4745              	.L382:
 717:src/xeq.c     **** }
 4746              		.loc 1 717 2 view .LVU1278
 4747              		.align	2
 4748              	.L381:
 4749 001c 00000000 		.word	main_ram
 4750              		.cfi_endproc
 4751              	.LFE45:
 4753              		.section	.text.set_lift,"ax",%progbits
 4754              		.align	1
 4755              		.p2align 2,,3
 4756              		.global	set_lift
 4757              		.syntax unified
 4758              		.thumb
 4759              		.thumb_func
ARM GAS  /tmp/cciWh9P3.s 			page 201


 4760              		.fpu fpv4-sp-d16
 4762              	set_lift:
 4763              	.LFB51:
 747:src/xeq.c     ****     State2.state_lift = 1;
 4764              		.loc 1 747 21 is_stmt 1 view -0
 4765              		.cfi_startproc
 4766              		@ args = 0, pretend = 0, frame = 0
 4767              		@ frame_needed = 0, uses_anonymous_args = 0
 4768              		@ link register save eliminated.
 748:src/xeq.c     **** }
 4769              		.loc 1 748 5 view .LVU1280
 748:src/xeq.c     **** }
 4770              		.loc 1 748 23 is_stmt 0 view .LVU1281
 4771 0000 024A     		ldr	r2, .L384
 4772 0002 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 4773 0004 43F04003 		orr	r3, r3, #64
 4774 0008 D375     		strb	r3, [r2, #23]
 749:src/xeq.c     **** 
 4775              		.loc 1 749 1 view .LVU1282
 4776 000a 7047     		bx	lr
 4777              	.L385:
 4778              		.align	2
 4779              	.L384:
 4780 000c 00000000 		.word	StateWhileOn
 4781              		.cfi_endproc
 4782              	.LFE51:
 4784              		.section	.text.is_dblmode,"ax",%progbits
 4785              		.align	1
 4786              		.p2align 2,,3
 4787              		.global	is_dblmode
 4788              		.syntax unified
 4789              		.thumb
 4790              		.thumb_func
 4791              		.fpu fpv4-sp-d16
 4793              	is_dblmode:
 4794              	.LFB78:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4795              		.loc 1 931 22 is_stmt 1 view -0
 4796              		.cfi_startproc
 4797              		@ args = 0, pretend = 0, frame = 0
 4798              		@ frame_needed = 0, uses_anonymous_args = 0
 4799              		@ link register save eliminated.
 932:src/xeq.c     **** }
 4800              		.loc 1 932 2 view .LVU1284
 932:src/xeq.c     **** }
 4801              		.loc 1 932 24 is_stmt 0 view .LVU1285
 4802 0000 064B     		ldr	r3, .L387
 4803 0002 1B68     		ldr	r3, [r3]
 4804 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 4805 0008 44F20100 		movw	r0, #16385
 4806 000c 1840     		ands	r0, r0, r3
 933:src/xeq.c     **** 
 4807              		.loc 1 933 1 view .LVU1286
 4808 000e A0F58040 		sub	r0, r0, #16384
 4809 0012 B0FA80F0 		clz	r0, r0
 4810 0016 4009     		lsrs	r0, r0, #5
 4811 0018 7047     		bx	lr
ARM GAS  /tmp/cciWh9P3.s 			page 202


 4812              	.L388:
 4813 001a 00BF     		.align	2
 4814              	.L387:
 4815 001c 00000000 		.word	main_ram
 4816              		.cfi_endproc
 4817              	.LFE78:
 4819              		.section	.text.is_usrdblmode,"ax",%progbits
 4820              		.align	1
 4821              		.p2align 2,,3
 4822              		.global	is_usrdblmode
 4823              		.syntax unified
 4824              		.thumb
 4825              		.thumb_func
 4826              		.fpu fpv4-sp-d16
 4828              	is_usrdblmode:
 4829              	.LFB79:
 935:src/xeq.c     **** 	if (XromFlags.xIN)
 4830              		.loc 1 935 25 is_stmt 1 view -0
 4831              		.cfi_startproc
 4832              		@ args = 0, pretend = 0, frame = 0
 4833              		@ frame_needed = 0, uses_anonymous_args = 0
 4834              		@ link register save eliminated.
 936:src/xeq.c     **** 		return XromFlags.mode_double;
 4835              		.loc 1 936 2 view .LVU1288
 936:src/xeq.c     **** 		return XromFlags.mode_double;
 4836              		.loc 1 936 6 is_stmt 0 view .LVU1289
 4837 0000 0A4B     		ldr	r3, .L393
 936:src/xeq.c     **** 		return XromFlags.mode_double;
 4838              		.loc 1 936 5 view .LVU1290
 4839 0002 93F90120 		ldrsb	r2, [r3, #1]
 4840 0006 002A     		cmp	r2, #0
 4841 0008 0CDB     		blt	.L392
 938:src/xeq.c     **** }
 4842              		.loc 1 938 2 is_stmt 1 view .LVU1291
 4843              	.LBB1617:
 4844              	.LBI1617:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4845              		.loc 1 931 5 view .LVU1292
 4846              	.LBB1618:
 932:src/xeq.c     **** }
 4847              		.loc 1 932 2 view .LVU1293
 932:src/xeq.c     **** }
 4848              		.loc 1 932 24 is_stmt 0 view .LVU1294
 4849 000a 094B     		ldr	r3, .L393+4
 4850 000c 1B68     		ldr	r3, [r3]
 4851 000e B3F8E837 		ldrh	r3, [r3, #2024]
 4852 0012 44F20100 		movw	r0, #16385
 4853 0016 1840     		ands	r0, r0, r3
 4854 0018 A0F58040 		sub	r0, r0, #16384
 4855 001c B0FA80F0 		clz	r0, r0
 4856 0020 4009     		lsrs	r0, r0, #5
 4857              	.LBE1618:
 4858              	.LBE1617:
 939:src/xeq.c     **** 
 4859              		.loc 1 939 1 view .LVU1295
 4860 0022 7047     		bx	lr
 4861              	.L392:
ARM GAS  /tmp/cciWh9P3.s 			page 203


 937:src/xeq.c     **** 	return is_dblmode();
 4862              		.loc 1 937 3 is_stmt 1 view .LVU1296
 937:src/xeq.c     **** 	return is_dblmode();
 4863              		.loc 1 937 19 is_stmt 0 view .LVU1297
 4864 0024 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4865 0026 C0F3C000 		ubfx	r0, r0, #3, #1
 4866 002a 7047     		bx	lr
 4867              	.L394:
 4868              		.align	2
 4869              	.L393:
 4870 002c 00000000 		.word	XromParams
 4871 0030 00000000 		.word	main_ram
 4872              		.cfi_endproc
 4873              	.LFE79:
 4875              		.section	.text.s_to_i,"ax",%progbits
 4876              		.align	1
 4877              		.p2align 2,,3
 4878              		.global	s_to_i
 4879              		.syntax unified
 4880              		.thumb
 4881              		.thumb_func
 4882              		.fpu fpv4-sp-d16
 4884              	s_to_i:
 4885              	.LVL356:
 4886              	.LFB80:
 943:src/xeq.c     **** 	int x = 0;
 4887              		.loc 1 943 27 is_stmt 1 view -0
 4888              		.cfi_startproc
 4889              		@ args = 0, pretend = 0, frame = 0
 4890              		@ frame_needed = 0, uses_anonymous_args = 0
 4891              		@ link register save eliminated.
 944:src/xeq.c     **** 	int neg;
 4892              		.loc 1 944 2 view .LVU1299
 945:src/xeq.c     **** 
 4893              		.loc 1 945 2 view .LVU1300
 947:src/xeq.c     **** 		s++;
 4894              		.loc 1 947 2 view .LVU1301
 943:src/xeq.c     **** 	int x = 0;
 4895              		.loc 1 943 27 is_stmt 0 view .LVU1302
 4896 0000 10B4     		push	{r4}
 4897              		.cfi_def_cfa_offset 4
 4898              		.cfi_offset 4, -4
 947:src/xeq.c     **** 		s++;
 4899              		.loc 1 947 6 view .LVU1303
 4900 0002 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
 947:src/xeq.c     **** 		s++;
 4901              		.loc 1 947 5 view .LVU1304
 4902 0004 2D29     		cmp	r1, #45
 4903 0006 26D0     		beq	.L411
 951:src/xeq.c     **** 			s++;
 4904              		.loc 1 951 3 is_stmt 1 view .LVU1305
 951:src/xeq.c     **** 			s++;
 4905              		.loc 1 951 6 is_stmt 0 view .LVU1306
 4906 0008 2B29     		cmp	r1, #43
 4907 000a 18D0     		beq	.L399
 4908              	.LVL357:
 956:src/xeq.c     **** 		const char c = *s++;
ARM GAS  /tmp/cciWh9P3.s 			page 204


 4909              		.loc 1 956 2 is_stmt 1 view .LVU1307
 4910              	.LBB1619:
 957:src/xeq.c     **** 
 4911              		.loc 1 957 3 view .LVU1308
 959:src/xeq.c     **** 			break;
 4912              		.loc 1 959 15 is_stmt 0 view .LVU1309
 4913 000c A1F13003 		sub	r3, r1, #48
 959:src/xeq.c     **** 			break;
 4914              		.loc 1 959 6 view .LVU1310
 4915 0010 D9B2     		uxtb	r1, r3
 4916 0012 0929     		cmp	r1, #9
 957:src/xeq.c     **** 
 4917              		.loc 1 957 20 view .LVU1311
 4918 0014 00F10102 		add	r2, r0, #1
 4919              	.LVL358:
 959:src/xeq.c     **** 			break;
 4920              		.loc 1 959 3 is_stmt 1 view .LVU1312
 959:src/xeq.c     **** 			break;
 4921              		.loc 1 959 6 is_stmt 0 view .LVU1313
 4922 0018 19D8     		bhi	.L404
 4923              	.LVL359:
 4924              	.L410:
 959:src/xeq.c     **** 			break;
 4925              		.loc 1 959 6 view .LVU1314
 4926              	.LBE1619:
 953:src/xeq.c     **** 	}
 4927              		.loc 1 953 7 view .LVU1315
 4928 001a 0024     		movs	r4, #0
 4929              	.LVL360:
 4930              	.L398:
 953:src/xeq.c     **** 	}
 4931              		.loc 1 953 7 view .LVU1316
 4932 001c 0020     		movs	r0, #0
 4933              	.LVL361:
 4934              	.L401:
 4935              	.LBB1620:
 961:src/xeq.c     **** 	}
 4936              		.loc 1 961 3 is_stmt 1 view .LVU1317
 957:src/xeq.c     **** 
 4937              		.loc 1 957 14 is_stmt 0 view .LVU1318
 4938 001e 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 4939              	.LVL362:
 961:src/xeq.c     **** 	}
 4940              		.loc 1 961 10 view .LVU1319
 4941 0022 00EB8000 		add	r0, r0, r0, lsl #2
 4942              	.LVL363:
 961:src/xeq.c     **** 	}
 4943              		.loc 1 961 5 view .LVU1320
 4944 0026 03EB4000 		add	r0, r3, r0, lsl #1
 4945              	.LVL364:
 961:src/xeq.c     **** 	}
 4946              		.loc 1 961 5 view .LVU1321
 4947              	.LBE1620:
 956:src/xeq.c     **** 		const char c = *s++;
 4948              		.loc 1 956 8 is_stmt 1 view .LVU1322
 956:src/xeq.c     **** 		const char c = *s++;
 4949              		.loc 1 956 2 view .LVU1323
ARM GAS  /tmp/cciWh9P3.s 			page 205


 4950              	.LBB1621:
 957:src/xeq.c     **** 
 4951              		.loc 1 957 3 view .LVU1324
 959:src/xeq.c     **** 			break;
 4952              		.loc 1 959 3 view .LVU1325
 959:src/xeq.c     **** 			break;
 4953              		.loc 1 959 15 is_stmt 0 view .LVU1326
 4954 002a A1F13003 		sub	r3, r1, #48
 959:src/xeq.c     **** 			break;
 4955              		.loc 1 959 6 view .LVU1327
 4956 002e D9B2     		uxtb	r1, r3
 4957 0030 0929     		cmp	r1, #9
 4958 0032 F4D9     		bls	.L401
 4959              	.LBE1621:
 963:src/xeq.c     **** 		return -x;
 4960              		.loc 1 963 2 is_stmt 1 view .LVU1328
 963:src/xeq.c     **** 		return -x;
 4961              		.loc 1 963 5 is_stmt 0 view .LVU1329
 4962 0034 04B1     		cbz	r4, .L395
 4963 0036 4042     		rsbs	r0, r0, #0
 4964              	.LVL365:
 4965              	.L395:
 966:src/xeq.c     **** 
 4966              		.loc 1 966 1 view .LVU1330
 4967 0038 5DF8044B 		ldr	r4, [sp], #4
 4968              		.cfi_remember_state
 4969              		.cfi_restore 4
 4970              		.cfi_def_cfa_offset 0
 4971 003c 7047     		bx	lr
 4972              	.LVL366:
 4973              	.L399:
 4974              		.cfi_restore_state
 952:src/xeq.c     **** 		neg = 0;
 4975              		.loc 1 952 4 is_stmt 1 view .LVU1331
 956:src/xeq.c     **** 		const char c = *s++;
 4976              		.loc 1 956 2 view .LVU1332
 4977              	.LBB1622:
 957:src/xeq.c     **** 
 4978              		.loc 1 957 3 view .LVU1333
 957:src/xeq.c     **** 
 4979              		.loc 1 957 14 is_stmt 0 view .LVU1334
 4980 003e 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 959:src/xeq.c     **** 			break;
 4981              		.loc 1 959 15 view .LVU1335
 4982 0040 A1F13003 		sub	r3, r1, #48
 959:src/xeq.c     **** 			break;
 4983              		.loc 1 959 6 view .LVU1336
 4984 0044 D9B2     		uxtb	r1, r3
 4985 0046 0929     		cmp	r1, #9
 957:src/xeq.c     **** 
 4986              		.loc 1 957 20 view .LVU1337
 4987 0048 00F10202 		add	r2, r0, #2
 4988              	.LVL367:
 959:src/xeq.c     **** 			break;
 4989              		.loc 1 959 3 is_stmt 1 view .LVU1338
 959:src/xeq.c     **** 			break;
 4990              		.loc 1 959 6 is_stmt 0 view .LVU1339
ARM GAS  /tmp/cciWh9P3.s 			page 206


 4991 004c E5D9     		bls	.L410
 4992              	.LVL368:
 4993              	.L404:
 959:src/xeq.c     **** 			break;
 4994              		.loc 1 959 6 view .LVU1340
 4995 004e 0020     		movs	r0, #0
 4996              	.LBE1622:
 966:src/xeq.c     **** 
 4997              		.loc 1 966 1 view .LVU1341
 4998 0050 5DF8044B 		ldr	r4, [sp], #4
 4999              		.cfi_remember_state
 5000              		.cfi_restore 4
 5001              		.cfi_def_cfa_offset 0
 5002 0054 7047     		bx	lr
 5003              	.LVL369:
 5004              	.L411:
 5005              		.cfi_restore_state
 948:src/xeq.c     **** 		neg = 1;
 5006              		.loc 1 948 3 is_stmt 1 view .LVU1342
 949:src/xeq.c     **** 	} else {
 5007              		.loc 1 949 3 view .LVU1343
 956:src/xeq.c     **** 		const char c = *s++;
 5008              		.loc 1 956 2 view .LVU1344
 5009              	.LBB1623:
 957:src/xeq.c     **** 
 5010              		.loc 1 957 3 view .LVU1345
 957:src/xeq.c     **** 
 5011              		.loc 1 957 14 is_stmt 0 view .LVU1346
 5012 0056 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
 959:src/xeq.c     **** 			break;
 5013              		.loc 1 959 15 view .LVU1347
 5014 0058 A1F13003 		sub	r3, r1, #48
 959:src/xeq.c     **** 			break;
 5015              		.loc 1 959 6 view .LVU1348
 5016 005c D9B2     		uxtb	r1, r3
 5017 005e 0929     		cmp	r1, #9
 957:src/xeq.c     **** 
 5018              		.loc 1 957 20 view .LVU1349
 5019 0060 00F10202 		add	r2, r0, #2
 5020              	.LVL370:
 959:src/xeq.c     **** 			break;
 5021              		.loc 1 959 3 is_stmt 1 view .LVU1350
 959:src/xeq.c     **** 			break;
 5022              		.loc 1 959 6 is_stmt 0 view .LVU1351
 5023 0064 F3D8     		bhi	.L404
 5024              	.LBE1623:
 949:src/xeq.c     **** 	} else {
 5025              		.loc 1 949 7 view .LVU1352
 5026 0066 0124     		movs	r4, #1
 5027 0068 D8E7     		b	.L398
 5028              		.cfi_endproc
 5029              	.LFE80:
 5031 006a 00BF     		.section	.text.digit,"ax",%progbits
 5032              		.align	1
 5033              		.p2align 2,,3
 5034              		.syntax unified
 5035              		.thumb
ARM GAS  /tmp/cciWh9P3.s 			page 207


 5036              		.thumb_func
 5037              		.fpu fpv4-sp-d16
 5039              	digit:
 5040              	.LVL371:
 5041              	.LFB207:
3590:src/xeq.c     **** 	const int intm = is_intmode();
 5042              		.loc 1 3590 35 is_stmt 1 view -0
 5043              		.cfi_startproc
 5044              		@ args = 0, pretend = 0, frame = 0
 5045              		@ frame_needed = 0, uses_anonymous_args = 0
3591:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5046              		.loc 1 3591 2 view .LVU1354
3590:src/xeq.c     **** 	const int intm = is_intmode();
 5047              		.loc 1 3590 35 is_stmt 0 view .LVU1355
 5048 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5049              		.cfi_def_cfa_offset 24
 5050              		.cfi_offset 3, -24
 5051              		.cfi_offset 4, -20
 5052              		.cfi_offset 5, -16
 5053              		.cfi_offset 6, -12
 5054              		.cfi_offset 7, -8
 5055              		.cfi_offset 14, -4
3591:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5056              		.loc 1 3591 19 view .LVU1356
 5057 0002 624E     		ldr	r6, .L465
3594:src/xeq.c     **** 		lim++;
 5058              		.loc 1 3594 13 view .LVU1357
 5059 0004 624C     		ldr	r4, .L465+4
3591:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5060              		.loc 1 3591 19 view .LVU1358
 5061 0006 3368     		ldr	r3, [r6]
3594:src/xeq.c     **** 		lim++;
 5062              		.loc 1 3594 13 view .LVU1359
 5063 0008 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
3591:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5064              		.loc 1 3591 19 view .LVU1360
 5065 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 5066              	.LVL372:
3592:src/xeq.c     **** 
 5067              		.loc 1 3592 2 is_stmt 1 view .LVU1361
3594:src/xeq.c     **** 		lim++;
 5068              		.loc 1 3594 2 view .LVU1362
3595:src/xeq.c     **** 	if (intm) {
 5069              		.loc 1 3595 6 is_stmt 0 view .LVU1363
 5070 0010 2D2A     		cmp	r2, #45
 5071 0012 14BF     		ite	ne
 5072 0014 0C27     		movne	r7, #12
 5073 0016 0D27     		moveq	r7, #13
 5074              	.LVL373:
3596:src/xeq.c     **** 		if (c >= int_base()) {
 5075              		.loc 1 3596 2 is_stmt 1 view .LVU1364
3596:src/xeq.c     **** 		if (c >= int_base()) {
 5076              		.loc 1 3596 5 is_stmt 0 view .LVU1365
 5077 0018 DB07     		lsls	r3, r3, #31
 5078              	.LVL374:
3590:src/xeq.c     **** 	const int intm = is_intmode();
 5079              		.loc 1 3590 35 view .LVU1366
ARM GAS  /tmp/cciWh9P3.s 			page 208


 5080 001a 0546     		mov	r5, r0
3596:src/xeq.c     **** 		if (c >= int_base()) {
 5081              		.loc 1 3596 5 view .LVU1367
 5082 001c 73D4     		bmi	.L461
3602:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5083              		.loc 1 3602 3 is_stmt 1 view .LVU1368
3602:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5084              		.loc 1 3602 6 is_stmt 0 view .LVU1369
 5085 001e 0928     		cmp	r0, #9
 5086 0020 00F28680 		bhi	.L416
3607:src/xeq.c     **** 			lim = CMDLINELEN;
 5087              		.loc 1 3607 3 is_stmt 1 view .LVU1370
3607:src/xeq.c     **** 			lim = CMDLINELEN;
 5088              		.loc 1 3607 7 is_stmt 0 view .LVU1371
 5089 0024 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3607:src/xeq.c     **** 			lim = CMDLINELEN;
 5090              		.loc 1 3607 6 view .LVU1372
 5091 0026 002B     		cmp	r3, #0
 5092 0028 5FD0     		beq	.L417
3608:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5093              		.loc 1 3608 4 is_stmt 1 view .LVU1373
 5094              	.LVL375:
3610:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5095              		.loc 1 3610 4 view .LVU1374
3610:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5096              		.loc 1 3610 8 is_stmt 0 view .LVU1375
 5097 002a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3610:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5098              		.loc 1 3610 7 view .LVU1376
 5099 002c 122A     		cmp	r2, #18
 5100 002e 40F29380 		bls	.L442
 5101              	.LBB1634:
3611:src/xeq.c     **** 
 5102              		.loc 1 3611 5 is_stmt 1 view .LVU1377
3613:src/xeq.c     **** 					p++;
 5103              		.loc 1 3613 9 is_stmt 0 view .LVU1378
 5104 0032 E118     		adds	r1, r4, r3
3611:src/xeq.c     **** 
 5105              		.loc 1 3611 11 view .LVU1379
 5106 0034 2133     		adds	r3, r3, #33
3613:src/xeq.c     **** 					p++;
 5107              		.loc 1 3613 8 view .LVU1380
 5108 0036 91F82110 		ldrb	r1, [r1, #33]	@ zero_extendqisi2
3611:src/xeq.c     **** 
 5109              		.loc 1 3611 11 view .LVU1381
 5110 003a 2344     		add	r3, r3, r4
 5111              	.LVL376:
3613:src/xeq.c     **** 					p++;
 5112              		.loc 1 3613 5 is_stmt 1 view .LVU1382
3613:src/xeq.c     **** 					p++;
 5113              		.loc 1 3613 8 is_stmt 0 view .LVU1383
 5114 003c 2D29     		cmp	r1, #45
3614:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5115              		.loc 1 3614 6 is_stmt 1 view .LVU1384
3615:src/xeq.c     **** 					p[0] = p[1];
 5116              		.loc 1 3615 11 is_stmt 0 view .LVU1385
 5117 003e 5549     		ldr	r1, .L465+8
ARM GAS  /tmp/cciWh9P3.s 			page 209


3614:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5118              		.loc 1 3614 7 view .LVU1386
 5119 0040 08BF     		it	eq
 5120 0042 0133     		addeq	r3, r3, #1
 5121              	.LVL377:
3615:src/xeq.c     **** 					p[0] = p[1];
 5122              		.loc 1 3615 11 is_stmt 1 view .LVU1387
 5123 0044 8B42     		cmp	r3, r1
 5124 0046 05D2     		bcs	.L420
 5125              	.LVL378:
 5126              	.L421:
3616:src/xeq.c     **** 					p++;
 5127              		.loc 1 3616 6 view .LVU1388
3616:src/xeq.c     **** 					p++;
 5128              		.loc 1 3616 11 is_stmt 0 view .LVU1389
 5129 0048 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5130 004a 03F8012B 		strb	r2, [r3], #1
 5131              	.LVL379:
3617:src/xeq.c     **** 				}
 5132              		.loc 1 3617 6 is_stmt 1 view .LVU1390
3615:src/xeq.c     **** 					p[0] = p[1];
 5133              		.loc 1 3615 11 view .LVU1391
 5134 004e 8B42     		cmp	r3, r1
 5135 0050 FAD1     		bne	.L421
 5136 0052 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5137              	.L420:
3619:src/xeq.c     **** 			}
 5138              		.loc 1 3619 5 view .LVU1392
3619:src/xeq.c     **** 			}
 5139              		.loc 1 3619 18 is_stmt 0 view .LVU1393
 5140 0054 013A     		subs	r2, r2, #1
 5141 0056 D2B2     		uxtb	r2, r2
 5142              	.LBE1634:
3608:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5143              		.loc 1 3608 8 view .LVU1394
 5144 0058 1323     		movs	r3, #19
 5145              	.LVL380:
3639:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5146              		.loc 1 3639 2 is_stmt 1 view .LVU1395
3639:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5147              		.loc 1 3639 5 is_stmt 0 view .LVU1396
 5148 005a 9342     		cmp	r3, r2
 5149              	.LBB1635:
3619:src/xeq.c     **** 			}
 5150              		.loc 1 3619 18 view .LVU1397
 5151 005c 2277     		strb	r2, [r4, #28]
 5152              	.LBE1635:
3639:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5153              		.loc 1 3639 5 view .LVU1398
 5154 005e 4DDD     		ble	.L439
 5155              	.LVL381:
 5156              	.L425:
3651:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5157              		.loc 1 3651 3 is_stmt 1 view .LVU1399
3651:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5158              		.loc 1 3651 6 is_stmt 0 view .LVU1400
 5159 0060 002D     		cmp	r5, #0
ARM GAS  /tmp/cciWh9P3.s 			page 210


 5160 0062 6AD1     		bne	.L427
3651:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5161              		.loc 1 3651 17 discriminator 1 view .LVU1401
 5162 0064 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3651:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5163              		.loc 1 3651 14 discriminator 1 view .LVU1402
 5164 0066 002B     		cmp	r3, #0
 5165 0068 7BD0     		beq	.L428
3652:src/xeq.c     **** 				return;
 5166              		.loc 1 3652 4 is_stmt 1 view .LVU1403
3652:src/xeq.c     **** 				return;
 5167              		.loc 1 3652 15 is_stmt 0 view .LVU1404
 5168 006a A018     		adds	r0, r4, r2
 5169 006c C17F     		ldrb	r1, [r0, #31]	@ zero_extendqisi2
3652:src/xeq.c     **** 				return;
 5170              		.loc 1 3652 7 view .LVU1405
 5171 006e 4529     		cmp	r1, #69
 5172 0070 5DD0     		beq	.L412
3658:src/xeq.c     **** 				return;
 5173              		.loc 1 3658 4 is_stmt 1 view .LVU1406
3658:src/xeq.c     **** 				return;
 5174              		.loc 1 3658 7 is_stmt 0 view .LVU1407
 5175 0072 2D29     		cmp	r1, #45
 5176 0074 5BD0     		beq	.L412
3663:src/xeq.c     **** 
 5177              		.loc 1 3663 3 is_stmt 1 view .LVU1408
 5178              	.LVL382:
 5179              	.LBB1636:
 5180              	.LBI1636:
2406:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5181              		.loc 1 2406 13 view .LVU1409
 5182              	.LBB1637:
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5183              		.loc 1 2407 2 view .LVU1410
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5184              		.loc 1 2407 23 is_stmt 0 view .LVU1411
 5185 0076 0132     		adds	r2, r2, #1
 5186 0078 D2B2     		uxtb	r2, r2
2408:src/xeq.c     **** }
 5187              		.loc 1 2408 25 view .LVU1412
 5188 007a A118     		adds	r1, r4, r2
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5189              		.loc 1 2407 27 view .LVU1413
 5190 007c 3027     		movs	r7, #48
 5191 007e 80F82070 		strb	r7, [r0, #32]
2408:src/xeq.c     **** }
 5192              		.loc 1 2408 2 is_stmt 1 view .LVU1414
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5193              		.loc 1 2407 23 is_stmt 0 view .LVU1415
 5194 0082 2277     		strb	r2, [r4, #28]
2408:src/xeq.c     **** }
 5195              		.loc 1 2408 25 view .LVU1416
 5196 0084 81F82050 		strb	r5, [r1, #32]
 5197              	.LVL383:
2408:src/xeq.c     **** }
 5198              		.loc 1 2408 25 view .LVU1417
 5199              	.LBE1637:
ARM GAS  /tmp/cciWh9P3.s 			page 211


 5200              	.LBE1636:
3665:src/xeq.c     **** 			exponent_adjusted(1);
 5201              		.loc 1 3665 3 is_stmt 1 view .LVU1418
 5202              	.L440:
3666:src/xeq.c     **** 	}
 5203              		.loc 1 3666 4 view .LVU1419
 5204              	.LBB1642:
 5205              	.LBI1642:
2415:src/xeq.c     **** {
 5206              		.loc 1 2415 13 view .LVU1420
 5207              	.LBB1643:
2417:src/xeq.c     **** 	int i;
 5208              		.loc 1 2417 2 view .LVU1421
 5209              	.LBB1644:
 5210              	.LBI1644:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5211              		.loc 1 931 5 view .LVU1422
 5212              	.LBB1645:
 932:src/xeq.c     **** }
 5213              		.loc 1 932 2 view .LVU1423
 932:src/xeq.c     **** }
 5214              		.loc 1 932 2 is_stmt 0 view .LVU1424
 5215              	.LBE1645:
 5216              	.LBE1644:
2418:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
 5217              		.loc 1 2418 2 is_stmt 1 view .LVU1425
2422:src/xeq.c     **** #endif
 5218              		.loc 1 2422 2 view .LVU1426
2427:src/xeq.c     **** #endif
 5219              		.loc 1 2427 2 view .LVU1427
2432:src/xeq.c     **** #endif
 5220              		.loc 1 2432 2 view .LVU1428
2437:src/xeq.c     **** #endif
 5221              		.loc 1 2437 2 view .LVU1429
2442:src/xeq.c     **** #endif
 5222              		.loc 1 2442 2 view .LVU1430
2447:src/xeq.c     **** #endif
 5223              		.loc 1 2447 2 view .LVU1431
2452:src/xeq.c     **** #endif
 5224              		.loc 1 2452 2 view .LVU1432
2457:src/xeq.c     **** #endif
 5225              		.loc 1 2457 2 view .LVU1433
2462:src/xeq.c     **** #endif
 5226              		.loc 1 2462 2 view .LVU1434
2467:src/xeq.c     **** #endif
 5227              		.loc 1 2467 2 view .LVU1435
2469:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
 5228              		.loc 1 2469 2 view .LVU1436
2470:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
 5229              		.loc 1 2470 2 view .LVU1437
2471:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
 5230              		.loc 1 2471 2 view .LVU1438
2472:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
 5231              		.loc 1 2472 2 view .LVU1439
2473:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
 5232              		.loc 1 2473 2 view .LVU1440
2474:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
ARM GAS  /tmp/cciWh9P3.s 			page 212


 5233              		.loc 1 2474 2 view .LVU1441
2475:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
 5234              		.loc 1 2475 2 view .LVU1442
2476:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
 5235              		.loc 1 2476 2 view .LVU1443
2477:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
 5236              		.loc 1 2477 2 view .LVU1444
2478:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 5237              		.loc 1 2478 2 view .LVU1445
2483:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
 5238              		.loc 1 2483 2 view .LVU1446
2484:src/xeq.c     **** #endif
 5239              		.loc 1 2484 2 view .LVU1447
 5240              	.LBB1648:
 5241              	.LBB1646:
 932:src/xeq.c     **** }
 5242              		.loc 1 932 24 is_stmt 0 view .LVU1448
 5243 0088 3268     		ldr	r2, [r6]
 5244 008a B2F8E817 		ldrh	r1, [r2, #2024]
 5245              	.LBE1646:
 5246              	.LBE1648:
2484:src/xeq.c     **** #endif
 5247              		.loc 1 2484 8 view .LVU1449
 5248 008e 03F12105 		add	r5, r3, #33
 5249              	.LBB1649:
 5250              	.LBB1647:
 932:src/xeq.c     **** }
 5251              		.loc 1 932 24 view .LVU1450
 5252 0092 44F20102 		movw	r2, #16385
 5253              	.LBE1647:
 5254              	.LBE1649:
2484:src/xeq.c     **** #endif
 5255              		.loc 1 2484 32 view .LVU1451
 5256 0096 0133     		adds	r3, r3, #1
2508:src/xeq.c     **** 		emax = 999;
 5257              		.loc 1 2508 5 view .LVU1452
 5258 0098 0A40     		ands	r2, r2, r1
2946:src/xeq.c     **** 		p++;
 5259              		.loc 1 2946 6 view .LVU1453
 5260 009a 2344     		add	r3, r3, r4
2508:src/xeq.c     **** 		emax = 999;
 5261              		.loc 1 2508 5 view .LVU1454
 5262 009c B2F5804F 		cmp	r2, #16384
2946:src/xeq.c     **** 		p++;
 5263              		.loc 1 2946 5 view .LVU1455
 5264 00a0 93F82030 		ldrb	r3, [r3, #32]	@ zero_extendqisi2
2484:src/xeq.c     **** #endif
 5265              		.loc 1 2484 8 view .LVU1456
 5266 00a4 2544     		add	r5, r5, r4
 5267              	.LVL384:
2500:src/xeq.c     **** #endif
 5268              		.loc 1 2500 2 is_stmt 1 view .LVU1457
2505:src/xeq.c     **** 
 5269              		.loc 1 2505 2 view .LVU1458
2508:src/xeq.c     **** 		emax = 999;
 5270              		.loc 1 2508 2 view .LVU1459
2508:src/xeq.c     **** 		emax = 999;
ARM GAS  /tmp/cciWh9P3.s 			page 213


 5271              		.loc 1 2508 5 is_stmt 0 view .LVU1460
 5272 00a6 6BD0     		beq	.L431
 5273              	.LBB1650:
2512:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
 5274              		.loc 1 2512 3 is_stmt 1 view .LVU1461
2513:src/xeq.c     **** 
 5275              		.loc 1 2513 3 view .LVU1462
 5276              	.LVL385:
2515:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
 5277              		.loc 1 2515 3 view .LVU1463
2601:src/xeq.c     **** 			// Double precision mode
 5278              		.loc 1 2601 3 view .LVU1464
2660:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
 5279              		.loc 1 2660 3 view .LVU1465
2679:src/xeq.c     **** 				// Don't allow denormal numbers
 5280              		.loc 1 2679 4 view .LVU1466
2683:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
 5281              		.loc 1 2683 9 view .LVU1467
2687:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
 5282              		.loc 1 2687 9 view .LVU1468
2693:src/xeq.c     **** 			}
 5283              		.loc 1 2693 5 view .LVU1469
2697:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
 5284              		.loc 1 2697 3 view .LVU1470
2706:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
 5285              		.loc 1 2706 4 view .LVU1471
2711:src/xeq.c     **** 		}
 5286              		.loc 1 2711 5 view .LVU1472
 5287              	.LDL1:
2715:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
 5288              		.loc 1 2715 3 view .LVU1473
2731:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
 5289              		.loc 1 2731 8 view .LVU1474
2748:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
 5290              		.loc 1 2748 8 view .LVU1475
2763:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
 5291              		.loc 1 2763 4 view .LVU1476
2773:src/xeq.c     **** 				emax_minus = 0;
 5292              		.loc 1 2773 4 view .LVU1477
2777:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
 5293              		.loc 1 2777 3 view .LVU1478
2791:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
 5294              		.loc 1 2791 8 view .LVU1479
2806:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
 5295              		.loc 1 2806 8 view .LVU1480
2819:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
 5296              		.loc 1 2819 4 view .LVU1481
2823:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
 5297              		.loc 1 2823 9 view .LVU1482
2827:src/xeq.c     **** 				emax_plus = 0;
 5298              		.loc 1 2827 4 view .LVU1483
2831:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
 5299              		.loc 1 2831 3 view .LVU1484
2857:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
 5300              		.loc 1 2857 8 view .LVU1485
2883:src/xeq.c     **** 			if (exp_chs_ds == 0) {
 5301              		.loc 1 2883 8 view .LVU1486
ARM GAS  /tmp/cciWh9P3.s 			page 214


2912:src/xeq.c     **** 				// Limit exponents so sign change is always legal
 5302              		.loc 1 2912 4 view .LVU1487
2919:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
 5303              		.loc 1 2919 9 view .LVU1488
2927:src/xeq.c     **** 					return;
 5304              		.loc 1 2927 5 view .LVU1489
2932:src/xeq.c     **** #endif
 5305              		.loc 1 2932 5 view .LVU1490
2932:src/xeq.c     **** #endif
 5306              		.loc 1 2932 8 is_stmt 0 view .LVU1491
 5307 00a8 2D2B     		cmp	r3, #45
 5308 00aa 65D0     		beq	.L443
2936:src/xeq.c     **** 			}
 5309              		.loc 1 2936 11 view .LVU1492
 5310 00ac 4FF4C076 		mov	r6, #384
 5311              	.LVL386:
 5312              	.L435:
2936:src/xeq.c     **** 			}
 5313              		.loc 1 2936 11 view .LVU1493
 5314              	.LBE1650:
2953:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5315              		.loc 1 2953 8 is_stmt 1 view .LVU1494
2953:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5316              		.loc 1 2953 9 is_stmt 0 view .LVU1495
 5317 00b0 2846     		mov	r0, r5
 5318 00b2 FFF7FEFF 		bl	s_to_i
 5319              	.LVL387:
2953:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5320              		.loc 1 2953 8 view .LVU1496
 5321 00b6 B042     		cmp	r0, r6
2954:src/xeq.c     **** 			p[i] = p[i + 1];
 5322              		.loc 1 2954 3 view .LVU1497
 5323 00b8 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
2953:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5324              		.loc 1 2953 8 view .LVU1498
 5325 00ba 10DC     		bgt	.L436
 5326              	.L462:
2953:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5327              		.loc 1 2953 26 view .LVU1499
 5328 00bc 302B     		cmp	r3, #48
 5329 00be 36D1     		bne	.L412
 5330              	.L446:
2954:src/xeq.c     **** 			p[i] = p[i + 1];
 5331              		.loc 1 2954 3 view .LVU1500
 5332 00c0 2B46     		mov	r3, r5
 5333              	.L434:
2955:src/xeq.c     **** 		CmdLineLength--;
 5334              		.loc 1 2955 4 is_stmt 1 view .LVU1501
2955:src/xeq.c     **** 		CmdLineLength--;
 5335              		.loc 1 2955 9 is_stmt 0 view .LVU1502
 5336 00c2 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5337 00c4 1A70     		strb	r2, [r3]
2954:src/xeq.c     **** 			p[i] = p[i + 1];
 5338              		.loc 1 2954 29 is_stmt 1 view .LVU1503
2954:src/xeq.c     **** 			p[i] = p[i + 1];
 5339              		.loc 1 2954 15 view .LVU1504
2954:src/xeq.c     **** 			p[i] = p[i + 1];
ARM GAS  /tmp/cciWh9P3.s 			page 215


 5340              		.loc 1 2954 3 is_stmt 0 view .LVU1505
 5341 00c6 0133     		adds	r3, r3, #1
 5342 00c8 002A     		cmp	r2, #0
 5343 00ca FAD1     		bne	.L434
2956:src/xeq.c     **** 	}
 5344              		.loc 1 2956 3 is_stmt 1 view .LVU1506
2956:src/xeq.c     **** 	}
 5345              		.loc 1 2956 16 is_stmt 0 view .LVU1507
 5346 00cc 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 5347 00ce 013B     		subs	r3, r3, #1
 5348 00d0 2377     		strb	r3, [r4, #28]
 5349              	.L463:
2953:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5350              		.loc 1 2953 8 is_stmt 1 view .LVU1508
2953:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5351              		.loc 1 2953 9 is_stmt 0 view .LVU1509
 5352 00d2 2846     		mov	r0, r5
 5353 00d4 FFF7FEFF 		bl	s_to_i
 5354              	.LVL388:
2953:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5355              		.loc 1 2953 8 view .LVU1510
 5356 00d8 B042     		cmp	r0, r6
2954:src/xeq.c     **** 			p[i] = p[i + 1];
 5357              		.loc 1 2954 3 view .LVU1511
 5358 00da 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
2953:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5359              		.loc 1 2953 8 view .LVU1512
 5360 00dc EEDD     		ble	.L462
 5361              	.L436:
 5362              	.LVL389:
2954:src/xeq.c     **** 			p[i] = p[i + 1];
 5363              		.loc 1 2954 15 is_stmt 1 view .LVU1513
2954:src/xeq.c     **** 			p[i] = p[i + 1];
 5364              		.loc 1 2954 3 is_stmt 0 view .LVU1514
 5365 00de 002B     		cmp	r3, #0
 5366 00e0 EED1     		bne	.L446
2956:src/xeq.c     **** 	}
 5367              		.loc 1 2956 3 is_stmt 1 view .LVU1515
2956:src/xeq.c     **** 	}
 5368              		.loc 1 2956 16 is_stmt 0 view .LVU1516
 5369 00e2 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 5370 00e4 013B     		subs	r3, r3, #1
 5371 00e6 2377     		strb	r3, [r4, #28]
 5372 00e8 F3E7     		b	.L463
 5373              	.LVL390:
 5374              	.L417:
2956:src/xeq.c     **** 	}
 5375              		.loc 1 2956 16 view .LVU1517
 5376              	.LBE1643:
 5377              	.LBE1642:
3624:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5378              		.loc 1 3624 4 is_stmt 1 view .LVU1518
3624:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5379              		.loc 1 3624 11 is_stmt 0 view .LVU1519
 5380 00ea A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5381              	.LVL391:
3626:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
ARM GAS  /tmp/cciWh9P3.s 			page 216


 5382              		.loc 1 3626 4 is_stmt 1 view .LVU1520
3626:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5383              		.loc 1 3626 7 is_stmt 0 view .LVU1521
 5384 00ec 012B     		cmp	r3, #1
 5385 00ee 35D9     		bls	.L464
3629:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5386              		.loc 1 3629 5 is_stmt 1 view .LVU1522
3629:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5387              		.loc 1 3629 22 is_stmt 0 view .LVU1523
 5388 00f0 2D2A     		cmp	r2, #45
 5389 00f2 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5390 00f4 30D0     		beq	.L442
 5391 00f6 1223     		movs	r3, #18
 5392              	.LVL392:
 5393              	.L418:
3639:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5394              		.loc 1 3639 2 is_stmt 1 view .LVU1524
3639:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5395              		.loc 1 3639 5 is_stmt 0 view .LVU1525
 5396 00f8 9342     		cmp	r3, r2
 5397 00fa B1DC     		bgt	.L425
 5398              	.LVL393:
 5399              	.L439:
3641:src/xeq.c     **** 		return;
 5400              		.loc 1 3641 3 is_stmt 1 view .LVU1526
3668:src/xeq.c     **** 
 5401              		.loc 1 3668 1 is_stmt 0 view .LVU1527
 5402 00fc BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5403              		.cfi_remember_state
 5404              		.cfi_restore 14
 5405              		.cfi_restore 7
 5406              		.cfi_restore 6
 5407              		.cfi_restore 5
 5408              		.cfi_restore 4
 5409              		.cfi_restore 3
 5410              		.cfi_def_cfa_offset 0
 5411              	.LVL394:
3641:src/xeq.c     **** 		return;
 5412              		.loc 1 3641 3 view .LVU1528
 5413 0100 0A20     		movs	r0, #10
 5414 0102 FFF7FEBF 		b	report_warn
 5415              	.LVL395:
 5416              	.L461:
 5417              		.cfi_restore_state
3597:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5418              		.loc 1 3597 3 is_stmt 1 view .LVU1529
3597:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5419              		.loc 1 3597 12 is_stmt 0 view .LVU1530
 5420 0106 FFF7FEFF 		bl	int_base
 5421              	.LVL396:
3597:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5422              		.loc 1 3597 6 view .LVU1531
 5423 010a A842     		cmp	r0, r5
 5424 010c 10D9     		bls	.L416
3639:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5425              		.loc 1 3639 2 is_stmt 1 view .LVU1532
3639:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
ARM GAS  /tmp/cciWh9P3.s 			page 217


 5426              		.loc 1 3639 6 is_stmt 0 view .LVU1533
 5427 010e 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3639:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5428              		.loc 1 3639 5 view .LVU1534
 5429 0110 BA42     		cmp	r2, r7
 5430 0112 F3DA     		bge	.L439
3645:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5431              		.loc 1 3645 2 is_stmt 1 view .LVU1535
3645:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5432              		.loc 1 3645 5 is_stmt 0 view .LVU1536
 5433 0114 092D     		cmp	r5, #9
 5434 0116 A3D9     		bls	.L425
3646:src/xeq.c     **** 	else {
 5435              		.loc 1 3646 3 is_stmt 1 view .LVU1537
 5436              	.LVL397:
 5437              	.LBB1653:
 5438              	.LBI1653:
2406:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5439              		.loc 1 2406 13 view .LVU1538
 5440              	.LBB1654:
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5441              		.loc 1 2407 2 view .LVU1539
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5442              		.loc 1 2407 23 is_stmt 0 view .LVU1540
 5443 0118 531C     		adds	r3, r2, #1
 5444 011a DBB2     		uxtb	r3, r3
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5445              		.loc 1 2407 27 view .LVU1541
 5446 011c 2244     		add	r2, r2, r4
2408:src/xeq.c     **** }
 5447              		.loc 1 2408 25 view .LVU1542
 5448 011e E118     		adds	r1, r4, r3
 5449              	.LBE1654:
 5450              	.LBE1653:
3646:src/xeq.c     **** 	else {
 5451              		.loc 1 3646 3 view .LVU1543
 5452 0120 3735     		adds	r5, r5, #55
 5453              	.LVL398:
 5454              	.LBB1656:
 5455              	.LBB1655:
2408:src/xeq.c     **** }
 5456              		.loc 1 2408 25 view .LVU1544
 5457 0122 0026     		movs	r6, #0
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5458              		.loc 1 2407 27 view .LVU1545
 5459 0124 82F82050 		strb	r5, [r2, #32]
2408:src/xeq.c     **** }
 5460              		.loc 1 2408 2 is_stmt 1 view .LVU1546
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5461              		.loc 1 2407 23 is_stmt 0 view .LVU1547
 5462 0128 2377     		strb	r3, [r4, #28]
2408:src/xeq.c     **** }
 5463              		.loc 1 2408 25 view .LVU1548
 5464 012a 81F82060 		strb	r6, [r1, #32]
 5465              	.LVL399:
 5466              	.L412:
2408:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 218


 5467              		.loc 1 2408 25 view .LVU1549
 5468              	.LBE1655:
 5469              	.LBE1656:
3668:src/xeq.c     **** 
 5470              		.loc 1 3668 1 view .LVU1550
 5471 012e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5472              	.LVL400:
 5473              	.L416:
3598:src/xeq.c     **** 			return;
 5474              		.loc 1 3598 4 is_stmt 1 view .LVU1551
3668:src/xeq.c     **** 
 5475              		.loc 1 3668 1 is_stmt 0 view .LVU1552
 5476 0130 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5477              		.cfi_remember_state
 5478              		.cfi_restore 14
 5479              		.cfi_restore 7
 5480              		.cfi_restore 6
 5481              		.cfi_restore 5
 5482              		.cfi_restore 4
 5483              		.cfi_restore 3
 5484              		.cfi_def_cfa_offset 0
 5485              	.LVL401:
3598:src/xeq.c     **** 			return;
 5486              		.loc 1 3598 4 view .LVU1553
 5487 0134 0920     		movs	r0, #9
 5488 0136 FFF7FEBF 		b	report_warn
 5489              	.LVL402:
 5490              	.L427:
 5491              		.cfi_restore_state
3663:src/xeq.c     **** 
 5492              		.loc 1 3663 3 is_stmt 1 view .LVU1554
 5493              	.LBB1657:
2406:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5494              		.loc 1 2406 13 view .LVU1555
 5495              	.LBB1638:
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5496              		.loc 1 2407 2 view .LVU1556
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5497              		.loc 1 2407 23 is_stmt 0 view .LVU1557
 5498 013a 511C     		adds	r1, r2, #1
 5499 013c C9B2     		uxtb	r1, r1
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5500              		.loc 1 2407 27 view .LVU1558
 5501 013e 2244     		add	r2, r2, r4
2408:src/xeq.c     **** }
 5502              		.loc 1 2408 25 view .LVU1559
 5503 0140 6718     		adds	r7, r4, r1
 5504              	.LBE1638:
 5505              	.LBE1657:
3663:src/xeq.c     **** 
 5506              		.loc 1 3663 3 view .LVU1560
 5507 0142 3035     		adds	r5, r5, #48
 5508              	.LVL403:
3665:src/xeq.c     **** 			exponent_adjusted(1);
 5509              		.loc 1 3665 7 view .LVU1561
 5510 0144 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 5511              	.LBB1658:
ARM GAS  /tmp/cciWh9P3.s 			page 219


 5512              	.LBB1639:
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5513              		.loc 1 2407 27 view .LVU1562
 5514 0146 82F82050 		strb	r5, [r2, #32]
2408:src/xeq.c     **** }
 5515              		.loc 1 2408 2 is_stmt 1 view .LVU1563
2408:src/xeq.c     **** }
 5516              		.loc 1 2408 25 is_stmt 0 view .LVU1564
 5517 014a 0022     		movs	r2, #0
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5518              		.loc 1 2407 23 view .LVU1565
 5519 014c 2177     		strb	r1, [r4, #28]
2408:src/xeq.c     **** }
 5520              		.loc 1 2408 25 view .LVU1566
 5521 014e 87F82020 		strb	r2, [r7, #32]
2408:src/xeq.c     **** }
 5522              		.loc 1 2408 25 view .LVU1567
 5523              	.LBE1639:
 5524              	.LBE1658:
3665:src/xeq.c     **** 			exponent_adjusted(1);
 5525              		.loc 1 3665 3 is_stmt 1 view .LVU1568
3665:src/xeq.c     **** 			exponent_adjusted(1);
 5526              		.loc 1 3665 6 is_stmt 0 view .LVU1569
 5527 0152 002B     		cmp	r3, #0
 5528 0154 98D1     		bne	.L440
3668:src/xeq.c     **** 
 5529              		.loc 1 3668 1 view .LVU1570
 5530 0156 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5531              	.LVL404:
 5532              	.L442:
3608:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5533              		.loc 1 3608 8 view .LVU1571
 5534 0158 1323     		movs	r3, #19
 5535 015a CDE7     		b	.L418
 5536              	.LVL405:
 5537              	.L464:
3608:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5538              		.loc 1 3608 8 view .LVU1572
 5539 015c 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3624:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5540              		.loc 1 3624 8 view .LVU1573
 5541 015e 3B44     		add	r3, r3, r7
 5542              	.LVL406:
3624:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5543              		.loc 1 3624 8 view .LVU1574
 5544 0160 CAE7     		b	.L418
 5545              	.LVL407:
 5546              	.L428:
3663:src/xeq.c     **** 
 5547              		.loc 1 3663 3 is_stmt 1 view .LVU1575
 5548              	.LBB1659:
2406:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5549              		.loc 1 2406 13 view .LVU1576
 5550              	.LBB1640:
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5551              		.loc 1 2407 2 view .LVU1577
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
ARM GAS  /tmp/cciWh9P3.s 			page 220


 5552              		.loc 1 2407 23 is_stmt 0 view .LVU1578
 5553 0162 531C     		adds	r3, r2, #1
 5554 0164 DBB2     		uxtb	r3, r3
2408:src/xeq.c     **** }
 5555              		.loc 1 2408 25 view .LVU1579
 5556 0166 E118     		adds	r1, r4, r3
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5557              		.loc 1 2407 27 view .LVU1580
 5558 0168 2244     		add	r2, r2, r4
 5559 016a 3020     		movs	r0, #48
 5560 016c 82F82000 		strb	r0, [r2, #32]
2408:src/xeq.c     **** }
 5561              		.loc 1 2408 2 is_stmt 1 view .LVU1581
2408:src/xeq.c     **** }
 5562              		.loc 1 2408 25 is_stmt 0 view .LVU1582
 5563 0170 81F82050 		strb	r5, [r1, #32]
 5564              	.LVL408:
2408:src/xeq.c     **** }
 5565              		.loc 1 2408 25 view .LVU1583
 5566              	.LBE1640:
 5567              	.LBE1659:
3665:src/xeq.c     **** 			exponent_adjusted(1);
 5568              		.loc 1 3665 3 is_stmt 1 view .LVU1584
 5569              	.LBB1660:
 5570              	.LBB1641:
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5571              		.loc 1 2407 23 is_stmt 0 view .LVU1585
 5572 0174 2377     		strb	r3, [r4, #28]
 5573              	.LBE1641:
 5574              	.LBE1660:
3668:src/xeq.c     **** 
 5575              		.loc 1 3668 1 view .LVU1586
 5576 0176 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5577              	.LVL409:
 5578              	.L443:
 5579              	.LBB1661:
 5580              	.LBB1652:
 5581              	.LBB1651:
2934:src/xeq.c     **** 				else
 5582              		.loc 1 2934 11 view .LVU1587
 5583 0178 40F27F16 		movw	r6, #383
 5584              	.LVL410:
 5585              	.L432:
2934:src/xeq.c     **** 				else
 5586              		.loc 1 2934 11 view .LVU1588
 5587              	.LBE1651:
2947:src/xeq.c     **** #  endif
 5588              		.loc 1 2947 3 is_stmt 1 view .LVU1589
2947:src/xeq.c     **** #  endif
 5589              		.loc 1 2947 4 is_stmt 0 view .LVU1590
 5590 017c 0135     		adds	r5, r5, #1
 5591              	.LVL411:
2947:src/xeq.c     **** #  endif
 5592              		.loc 1 2947 4 view .LVU1591
 5593 017e 97E7     		b	.L435
 5594              	.LVL412:
 5595              	.L431:
ARM GAS  /tmp/cciWh9P3.s 			page 221


2946:src/xeq.c     **** 		p++;
 5596              		.loc 1 2946 2 is_stmt 1 view .LVU1592
2946:src/xeq.c     **** 		p++;
 5597              		.loc 1 2946 5 is_stmt 0 view .LVU1593
 5598 0180 2D2B     		cmp	r3, #45
2509:src/xeq.c     **** 	}
 5599              		.loc 1 2509 8 view .LVU1594
 5600 0182 40F2E736 		movw	r6, #999
 5601              	.LVL413:
2946:src/xeq.c     **** 		p++;
 5602              		.loc 1 2946 5 view .LVU1595
 5603 0186 93D1     		bne	.L435
 5604 0188 F8E7     		b	.L432
 5605              	.L466:
 5606 018a 00BF     		.align	2
 5607              	.L465:
 5608 018c 00000000 		.word	main_ram
 5609 0190 00000000 		.word	StateWhileOn
 5610 0194 33000000 		.word	StateWhileOn+51
 5611              	.LBE1652:
 5612              	.LBE1661:
 5613              		.cfi_endproc
 5614              	.LFE207:
 5616              		.section	.text.s_to_ull,"ax",%progbits
 5617              		.align	1
 5618              		.p2align 2,,3
 5619              		.global	s_to_ull
 5620              		.syntax unified
 5621              		.thumb
 5622              		.thumb_func
 5623              		.fpu fpv4-sp-d16
 5625              	s_to_ull:
 5626              	.LVL414:
 5627              	.LFB81:
 970:src/xeq.c     **** 	unsigned long long int x = 0;
 5628              		.loc 1 970 67 is_stmt 1 view -0
 5629              		.cfi_startproc
 5630              		@ args = 0, pretend = 0, frame = 0
 5631              		@ frame_needed = 0, uses_anonymous_args = 0
 5632              		@ link register save eliminated.
 971:src/xeq.c     **** 
 5633              		.loc 1 971 2 view .LVU1597
 970:src/xeq.c     **** 	unsigned long long int x = 0;
 5634              		.loc 1 970 67 is_stmt 0 view .LVU1598
 5635 0000 F0B4     		push	{r4, r5, r6, r7}
 5636              		.cfi_def_cfa_offset 16
 5637              		.cfi_offset 4, -16
 5638              		.cfi_offset 5, -12
 5639              		.cfi_offset 6, -8
 5640              		.cfi_offset 7, -4
 971:src/xeq.c     **** 
 5641              		.loc 1 971 25 view .LVU1599
 5642 0002 0026     		movs	r6, #0
 5643 0004 0027     		movs	r7, #0
 5644 0006 02E0     		b	.L471
 5645              	.LVL415:
 5646              	.L473:
ARM GAS  /tmp/cciWh9P3.s 			page 222


 5647              	.LBB1662:
 985:src/xeq.c     **** 	}
 5648              		.loc 1 985 5 view .LVU1600
 5649 0008 E618     		adds	r6, r4, r3
 5650              	.LVL416:
 985:src/xeq.c     **** 	}
 5651              		.loc 1 985 5 view .LVU1601
 5652 000a 45F10007 		adc	r7, r5, #0
 5653              	.LVL417:
 985:src/xeq.c     **** 	}
 5654              		.loc 1 985 5 view .LVU1602
 5655              	.LBE1662:
 973:src/xeq.c     **** 		unsigned int n;
 5656              		.loc 1 973 8 is_stmt 1 view .LVU1603
 5657              	.L471:
 973:src/xeq.c     **** 		unsigned int n;
 5658              		.loc 1 973 2 view .LVU1604
 5659              	.LBB1663:
 974:src/xeq.c     **** 		const char c = *s++;
 5660              		.loc 1 974 3 view .LVU1605
 975:src/xeq.c     **** 
 5661              		.loc 1 975 3 view .LVU1606
 978:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 5662              		.loc 1 978 4 view .LVU1607
 979:src/xeq.c     **** 			n = c - 'A' + 10;
 5663              		.loc 1 979 8 view .LVU1608
 980:src/xeq.c     **** 		else
 5664              		.loc 1 980 4 view .LVU1609
 975:src/xeq.c     **** 
 5665              		.loc 1 975 14 is_stmt 0 view .LVU1610
 5666 000e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5667              	.LVL418:
 977:src/xeq.c     **** 			n = c - '0';
 5668              		.loc 1 977 3 is_stmt 1 view .LVU1611
 977:src/xeq.c     **** 			n = c - '0';
 5669              		.loc 1 977 16 is_stmt 0 view .LVU1612
 5670 0012 A2F13003 		sub	r3, r2, #48
 977:src/xeq.c     **** 			n = c - '0';
 5671              		.loc 1 977 6 view .LVU1613
 5672 0016 DCB2     		uxtb	r4, r3
 5673 0018 092C     		cmp	r4, #9
 979:src/xeq.c     **** 			n = c - 'A' + 10;
 5674              		.loc 1 979 11 view .LVU1614
 5675 001a A2F14105 		sub	r5, r2, #65
 977:src/xeq.c     **** 			n = c - '0';
 5676              		.loc 1 977 6 view .LVU1615
 5677 001e 03D9     		bls	.L469
 979:src/xeq.c     **** 			n = c - 'A' + 10;
 5678              		.loc 1 979 11 view .LVU1616
 5679 0020 052D     		cmp	r5, #5
 5680 0022 07D8     		bhi	.L467
 980:src/xeq.c     **** 		else
 5681              		.loc 1 980 16 view .LVU1617
 5682 0024 A2F13703 		sub	r3, r2, #55
 5683              	.LVL419:
 5684              	.L469:
 983:src/xeq.c     **** 			break;
ARM GAS  /tmp/cciWh9P3.s 			page 223


 5685              		.loc 1 983 3 is_stmt 1 view .LVU1618
 985:src/xeq.c     **** 	}
 5686              		.loc 1 985 3 view .LVU1619
 985:src/xeq.c     **** 	}
 5687              		.loc 1 985 9 is_stmt 0 view .LVU1620
 5688 0028 A1FB0645 		umull	r4, r5, r1, r6
 983:src/xeq.c     **** 			break;
 5689              		.loc 1 983 6 view .LVU1621
 5690 002c 8B42     		cmp	r3, r1
 985:src/xeq.c     **** 	}
 5691              		.loc 1 985 9 view .LVU1622
 5692 002e 01FB0755 		mla	r5, r1, r7, r5
 983:src/xeq.c     **** 			break;
 5693              		.loc 1 983 6 view .LVU1623
 5694 0032 E9D3     		bcc	.L473
 5695              	.LVL420:
 5696              	.L467:
 983:src/xeq.c     **** 			break;
 5697              		.loc 1 983 6 view .LVU1624
 5698              	.LBE1663:
 988:src/xeq.c     **** 
 5699              		.loc 1 988 1 view .LVU1625
 5700 0034 3046     		mov	r0, r6
 5701              	.LVL421:
 988:src/xeq.c     **** 
 5702              		.loc 1 988 1 view .LVU1626
 5703 0036 3946     		mov	r1, r7
 5704              	.LVL422:
 988:src/xeq.c     **** 
 5705              		.loc 1 988 1 view .LVU1627
 5706 0038 F0BC     		pop	{r4, r5, r6, r7}
 5707              		.cfi_restore 7
 5708              		.cfi_restore 6
 5709              		.cfi_restore 5
 5710              		.cfi_restore 4
 5711              		.cfi_def_cfa_offset 0
 5712              	.LVL423:
 988:src/xeq.c     **** 
 5713              		.loc 1 988 1 view .LVU1628
 5714 003a 7047     		bx	lr
 5715              		.cfi_endproc
 5716              	.LFE81:
 5718              		.section	.text.get_cmdline,"ax",%progbits
 5719              		.align	1
 5720              		.p2align 2,,3
 5721              		.global	get_cmdline
 5722              		.syntax unified
 5723              		.thumb
 5724              		.thumb_func
 5725              		.fpu fpv4-sp-d16
 5727              	get_cmdline:
 5728              	.LFB82:
 990:src/xeq.c     **** 	if (CmdLineLength) {
 5729              		.loc 1 990 31 is_stmt 1 view -0
 5730              		.cfi_startproc
 5731              		@ args = 0, pretend = 0, frame = 0
 5732              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cciWh9P3.s 			page 224


 5733              		@ link register save eliminated.
 991:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5734              		.loc 1 991 2 view .LVU1630
 991:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5735              		.loc 1 991 6 is_stmt 0 view .LVU1631
 5736 0000 044B     		ldr	r3, .L477
 5737 0002 187F     		ldrb	r0, [r3, #28]	@ zero_extendqisi2
 991:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5738              		.loc 1 991 5 view .LVU1632
 5739 0004 28B1     		cbz	r0, .L474
 992:src/xeq.c     **** 		return Cmdline;
 5740              		.loc 1 992 3 is_stmt 1 view .LVU1633
 992:src/xeq.c     **** 		return Cmdline;
 5741              		.loc 1 992 26 is_stmt 0 view .LVU1634
 5742 0006 1A18     		adds	r2, r3, r0
 5743 0008 0021     		movs	r1, #0
 993:src/xeq.c     **** 	}
 5744              		.loc 1 993 10 view .LVU1635
 5745 000a 03F12000 		add	r0, r3, #32
 992:src/xeq.c     **** 		return Cmdline;
 5746              		.loc 1 992 26 view .LVU1636
 5747 000e 82F82010 		strb	r1, [r2, #32]
 993:src/xeq.c     **** 	}
 5748              		.loc 1 993 3 is_stmt 1 view .LVU1637
 5749              	.L474:
 996:src/xeq.c     **** 
 5750              		.loc 1 996 1 is_stmt 0 view .LVU1638
 5751 0012 7047     		bx	lr
 5752              	.L478:
 5753              		.align	2
 5754              	.L477:
 5755 0014 00000000 		.word	StateWhileOn
 5756              		.cfi_endproc
 5757              	.LFE82:
 5759              		.section	.text.is_bad_cmdline,"ax",%progbits
 5760              		.align	1
 5761              		.p2align 2,,3
 5762              		.global	is_bad_cmdline
 5763              		.syntax unified
 5764              		.thumb
 5765              		.thumb_func
 5766              		.fpu fpv4-sp-d16
 5768              	is_bad_cmdline:
 5769              	.LFB83:
1013:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5770              		.loc 1 1013 1 is_stmt 1 view -0
 5771              		.cfi_startproc
 5772              		@ args = 0, pretend = 0, frame = 0
 5773              		@ frame_needed = 0, uses_anonymous_args = 0
1015:src/xeq.c     **** 		char *p;
 5774              		.loc 1 1015 2 view .LVU1640
1013:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5775              		.loc 1 1013 1 is_stmt 0 view .LVU1641
 5776 0000 10B5     		push	{r4, lr}
 5777              		.cfi_def_cfa_offset 8
 5778              		.cfi_offset 4, -8
 5779              		.cfi_offset 14, -4
ARM GAS  /tmp/cciWh9P3.s 			page 225


1015:src/xeq.c     **** 		char *p;
 5780              		.loc 1 1015 6 view .LVU1642
 5781 0002 0E4C     		ldr	r4, .L487
1015:src/xeq.c     **** 		char *p;
 5782              		.loc 1 1015 5 view .LVU1643
 5783 0004 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5784 0006 022B     		cmp	r3, #2
 5785 0008 01D0     		beq	.L486
 5786              	.L483:
1034:src/xeq.c     **** }
 5787              		.loc 1 1034 9 view .LVU1644
 5788 000a 0020     		movs	r0, #0
1035:src/xeq.c     **** 
 5789              		.loc 1 1035 1 view .LVU1645
 5790 000c 10BD     		pop	{r4, pc}
 5791              	.L486:
 5792              	.LBB1668:
1016:src/xeq.c     **** 
 5793              		.loc 1 1016 3 is_stmt 1 view .LVU1646
1019:src/xeq.c     **** 		for (;;) {
 5794              		.loc 1 1019 3 view .LVU1647
1019:src/xeq.c     **** 		for (;;) {
 5795              		.loc 1 1019 17 is_stmt 0 view .LVU1648
 5796 000e 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
1019:src/xeq.c     **** 		for (;;) {
 5797              		.loc 1 1019 5 view .LVU1649
 5798 0010 04F12003 		add	r3, r4, #32
 5799 0014 1A44     		add	r2, r2, r3
 5800              	.LVL424:
 5801              	.L481:
1020:src/xeq.c     **** 			p--;
 5802              		.loc 1 1020 3 is_stmt 1 view .LVU1650
1021:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
 5803              		.loc 1 1021 4 view .LVU1651
1022:src/xeq.c     **** 				return 0;
 5804              		.loc 1 1022 4 view .LVU1652
1024:src/xeq.c     **** 				break;
 5805              		.loc 1 1024 4 view .LVU1653
1022:src/xeq.c     **** 				return 0;
 5806              		.loc 1 1022 8 is_stmt 0 view .LVU1654
 5807 0016 12F8013D 		ldrb	r3, [r2, #-1]!	@ zero_extendqisi2
 5808              	.LVL425:
1022:src/xeq.c     **** 				return 0;
 5809              		.loc 1 1022 7 view .LVU1655
 5810 001a A3F13101 		sub	r1, r3, #49
 5811 001e 0829     		cmp	r1, #8
 5812 0020 F3D9     		bls	.L483
1024:src/xeq.c     **** 				break;
 5813              		.loc 1 1024 7 view .LVU1656
 5814 0022 2E2B     		cmp	r3, #46
 5815 0024 F7D1     		bne	.L481
 5816              	.LBE1668:
 5817              	.LBB1669:
 5818              	.LBI1669:
1012:src/xeq.c     **** {
 5819              		.loc 1 1012 5 is_stmt 1 view .LVU1657
 5820              	.LBB1670:
ARM GAS  /tmp/cciWh9P3.s 			page 226


1028:src/xeq.c     **** 		error_message(ERR_DOMAIN);
 5821              		.loc 1 1028 3 view .LVU1658
 5822 0026 FFF7FEFF 		bl	reset_shift
 5823              	.LVL426:
1029:src/xeq.c     **** 		State2.invalid_disp = 1;
 5824              		.loc 1 1029 3 view .LVU1659
 5825 002a 0120     		movs	r0, #1
 5826 002c FFF7FEFF 		bl	error_message
 5827              	.LVL427:
1030:src/xeq.c     **** 		return 1;
 5828              		.loc 1 1030 3 view .LVU1660
1030:src/xeq.c     **** 		return 1;
 5829              		.loc 1 1030 23 is_stmt 0 view .LVU1661
 5830 0030 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 5831 0032 43F00203 		orr	r3, r3, #2
 5832 0036 E375     		strb	r3, [r4, #23]
1031:src/xeq.c     **** 	}
 5833              		.loc 1 1031 3 is_stmt 1 view .LVU1662
1030:src/xeq.c     **** 		return 1;
 5834              		.loc 1 1030 23 is_stmt 0 view .LVU1663
 5835 0038 0120     		movs	r0, #1
 5836              	.LBE1670:
 5837              	.LBE1669:
1035:src/xeq.c     **** 
 5838              		.loc 1 1035 1 view .LVU1664
 5839 003a 10BD     		pop	{r4, pc}
 5840              	.L488:
 5841              		.align	2
 5842              	.L487:
 5843 003c 00000000 		.word	StateWhileOn
 5844              		.cfi_endproc
 5845              	.LFE83:
 5847              		.section	.text.get_flash_reg_n,"ax",%progbits
 5848              		.align	1
 5849              		.p2align 2,,3
 5850              		.global	get_flash_reg_n
 5851              		.syntax unified
 5852              		.thumb
 5853              		.thumb_func
 5854              		.fpu fpv4-sp-d16
 5856              	get_flash_reg_n:
 5857              	.LVL428:
 5858              	.LFB88:
1198:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 5859              		.loc 1 1198 34 is_stmt 1 view -0
 5860              		.cfi_startproc
 5861              		@ args = 0, pretend = 0, frame = 0
 5862              		@ frame_needed = 0, uses_anonymous_args = 0
 5863              		@ link register save eliminated.
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5864              		.loc 1 1199 2 view .LVU1666
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5865              		.loc 1 1199 37 is_stmt 0 view .LVU1667
 5866 0000 064B     		ldr	r3, .L490
 5867 0002 1A68     		ldr	r2, [r3]
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5868              		.loc 1 1199 68 view .LVU1668
ARM GAS  /tmp/cciWh9P3.s 			page 227


 5869 0004 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5870              		.loc 1 1199 37 view .LVU1669
 5871 0008 02F58661 		add	r1, r2, #1072
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5872              		.loc 1 1199 68 view .LVU1670
 5873 000c C3F16403 		rsb	r3, r3, #100
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5874              		.loc 1 1199 22 view .LVU1671
 5875 0010 01EBC301 		add	r1, r1, r3, lsl #3
 5876 0014 02F5EA62 		add	r2, r2, #1872
 5877 0018 FFF7FEBF 		b	reg_address
 5878              	.LVL429:
 5879              	.L491:
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5880              		.loc 1 1199 22 view .LVU1672
 5881              		.align	2
 5882              	.L490:
 5883 001c 00000000 		.word	backup_ram
 5884              		.cfi_endproc
 5885              	.LFE88:
 5887              		.section	.text.get_const,"ax",%progbits
 5888              		.align	1
 5889              		.p2align 2,,3
 5890              		.global	get_const
 5891              		.syntax unified
 5892              		.thumb
 5893              		.thumb_func
 5894              		.fpu fpv4-sp-d16
 5896              	get_const:
 5897              	.LVL430:
 5898              	.LFB89:
1209:src/xeq.c     **** 	static REGISTER result;
 5899              		.loc 1 1209 1 is_stmt 1 view -0
 5900              		.cfi_startproc
 5901              		@ args = 0, pretend = 0, frame = 40
 5902              		@ frame_needed = 0, uses_anonymous_args = 0
1210:src/xeq.c     **** 	const int i = cnsts[index].index;
 5903              		.loc 1 1210 2 view .LVU1674
1211:src/xeq.c     **** 	if (dbl) {
 5904              		.loc 1 1211 2 view .LVU1675
1209:src/xeq.c     **** 	static REGISTER result;
 5905              		.loc 1 1209 1 is_stmt 0 view .LVU1676
 5906 0000 00B5     		push	{lr}
 5907              		.cfi_def_cfa_offset 4
 5908              		.cfi_offset 14, -4
1211:src/xeq.c     **** 	if (dbl) {
 5909              		.loc 1 1211 28 view .LVU1677
 5910 0002 1C4B     		ldr	r3, .L498
 5911 0004 00EB4000 		add	r0, r0, r0, lsl #1
 5912              	.LVL431:
1209:src/xeq.c     **** 	static REGISTER result;
 5913              		.loc 1 1209 1 view .LVU1678
 5914 0008 8BB0     		sub	sp, sp, #44
 5915              		.cfi_def_cfa_offset 48
1211:src/xeq.c     **** 	if (dbl) {
 5916              		.loc 1 1211 28 view .LVU1679
ARM GAS  /tmp/cciWh9P3.s 			page 228


 5917 000a 13F82030 		ldrb	r3, [r3, r0, lsl #2]	@ zero_extendqisi2
 5918              	.LVL432:
1212:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5919              		.loc 1 1212 2 is_stmt 1 view .LVU1680
1212:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5920              		.loc 1 1212 5 is_stmt 0 view .LVU1681
 5921 000e 51B1     		cbz	r1, .L493
1213:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5922              		.loc 1 1213 3 is_stmt 1 view .LVU1682
1213:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5923              		.loc 1 1213 14 is_stmt 0 view .LVU1683
 5924 0010 9A1E     		subs	r2, r3, #2
1213:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5925              		.loc 1 1213 6 view .LVU1684
 5926 0012 7D2A     		cmp	r2, #125
 5927 0014 0FD9     		bls	.L494
1214:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5928              		.loc 1 1214 4 is_stmt 1 view .LVU1685
1214:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5929              		.loc 1 1214 11 is_stmt 0 view .LVU1686
 5930 0016 184A     		ldr	r2, .L498+4
1214:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5931              		.loc 1 1214 36 view .LVU1687
 5932 0018 03F07F00 		and	r0, r3, #127
1214:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5933              		.loc 1 1214 11 view .LVU1688
 5934 001c 02EB0010 		add	r0, r2, r0, lsl #4
1223:src/xeq.c     **** 
 5935              		.loc 1 1223 1 view .LVU1689
 5936 0020 0BB0     		add	sp, sp, #44
 5937              		.cfi_remember_state
 5938              		.cfi_def_cfa_offset 4
 5939              		@ sp needed
 5940 0022 5DF804FB 		ldr	pc, [sp], #4
 5941              	.L493:
 5942              		.cfi_restore_state
1218:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5943              		.loc 1 1218 3 is_stmt 1 view .LVU1690
1218:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5944              		.loc 1 1218 6 is_stmt 0 view .LVU1691
 5945 0026 1A06     		lsls	r2, r3, #24
 5946 0028 13D4     		bmi	.L496
1219:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5947              		.loc 1 1219 4 is_stmt 1 view .LVU1692
1219:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5948              		.loc 1 1219 11 is_stmt 0 view .LVU1693
 5949 002a 1448     		ldr	r0, .L498+8
 5950 002c 00EBC300 		add	r0, r0, r3, lsl #3
1223:src/xeq.c     **** 
 5951              		.loc 1 1223 1 view .LVU1694
 5952 0030 0BB0     		add	sp, sp, #44
 5953              		.cfi_remember_state
 5954              		.cfi_def_cfa_offset 4
 5955              		@ sp needed
 5956 0032 5DF804FB 		ldr	pc, [sp], #4
 5957              	.L494:
 5958              		.cfi_restore_state
ARM GAS  /tmp/cciWh9P3.s 			page 229


1215:src/xeq.c     **** 	}
 5959              		.loc 1 1215 3 is_stmt 1 view .LVU1695
 5960              	.LVL433:
 5961              	.LBB1671:
 5962              	.LBI1671:
 644:src/xeq.c     **** 	decNumber temp;
 5963              		.loc 1 644 6 view .LVU1696
 5964              	.LBB1672:
 645:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 5965              		.loc 1 645 2 view .LVU1697
 646:src/xeq.c     **** }
 5966              		.loc 1 646 2 view .LVU1698
 5967              	.LBE1672:
 5968              	.LBE1671:
1215:src/xeq.c     **** 	}
 5969              		.loc 1 1215 3 is_stmt 0 view .LVU1699
 5970 0036 1148     		ldr	r0, .L498+8
 5971              	.LBB1674:
 5972              	.LBB1673:
 646:src/xeq.c     **** }
 5973              		.loc 1 646 27 view .LVU1700
 5974 0038 01A9     		add	r1, sp, #4
 5975              	.LVL434:
 646:src/xeq.c     **** }
 5976              		.loc 1 646 27 view .LVU1701
 5977 003a 00EBC300 		add	r0, r0, r3, lsl #3
 5978 003e FFF7FEFF 		bl	decimal64ToNumber
 5979              	.LVL435:
 646:src/xeq.c     **** }
 5980              		.loc 1 646 27 view .LVU1702
 5981 0042 0146     		mov	r1, r0
 646:src/xeq.c     **** }
 5982              		.loc 1 646 2 view .LVU1703
 5983 0044 0E48     		ldr	r0, .L498+12
 5984 0046 FFF7FEFF 		bl	packed128_from_number
 5985              	.LVL436:
 5986              	.LBE1673:
 5987              	.LBE1674:
1222:src/xeq.c     **** }
 5988              		.loc 1 1222 9 view .LVU1704
 5989 004a 0D48     		ldr	r0, .L498+12
1223:src/xeq.c     **** 
 5990              		.loc 1 1223 1 view .LVU1705
 5991 004c 0BB0     		add	sp, sp, #44
 5992              		.cfi_remember_state
 5993              		.cfi_def_cfa_offset 4
 5994              		@ sp needed
 5995 004e 5DF804FB 		ldr	pc, [sp], #4
 5996              	.LVL437:
 5997              	.L496:
 5998              		.cfi_restore_state
1220:src/xeq.c     **** 	}
 5999              		.loc 1 1220 3 is_stmt 1 view .LVU1706
 6000              	.LBB1675:
 6001              	.LBI1675:
 638:src/xeq.c     **** 	decNumber temp;
 6002              		.loc 1 638 6 view .LVU1707
ARM GAS  /tmp/cciWh9P3.s 			page 230


 6003              	.LBB1676:
 639:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 6004              		.loc 1 639 2 view .LVU1708
 640:src/xeq.c     **** }
 6005              		.loc 1 640 2 view .LVU1709
 6006              	.LBE1676:
 6007              	.LBE1675:
1220:src/xeq.c     **** 	}
 6008              		.loc 1 1220 3 is_stmt 0 view .LVU1710
 6009 0052 0948     		ldr	r0, .L498+4
1220:src/xeq.c     **** 	}
 6010              		.loc 1 1220 55 view .LVU1711
 6011 0054 03F18053 		add	r3, r3, #268435456
 6012              	.LVL438:
1220:src/xeq.c     **** 	}
 6013              		.loc 1 1220 55 view .LVU1712
 6014 0058 803B     		subs	r3, r3, #128
 6015              	.LVL439:
 6016              	.LBB1678:
 6017              	.LBB1677:
 640:src/xeq.c     **** }
 6018              		.loc 1 640 24 view .LVU1713
 6019 005a 00EB0310 		add	r0, r0, r3, lsl #4
 6020 005e 01A9     		add	r1, sp, #4
 6021              	.LVL440:
 640:src/xeq.c     **** }
 6022              		.loc 1 640 24 view .LVU1714
 6023 0060 FFF7FEFF 		bl	decimal128ToNumber
 6024              	.LVL441:
 640:src/xeq.c     **** }
 6025              		.loc 1 640 24 view .LVU1715
 6026 0064 0146     		mov	r1, r0
 640:src/xeq.c     **** }
 6027              		.loc 1 640 2 view .LVU1716
 6028 0066 0648     		ldr	r0, .L498+12
 6029 0068 FFF7FEFF 		bl	packed_from_number
 6030              	.LVL442:
 6031              	.LBE1677:
 6032              	.LBE1678:
1222:src/xeq.c     **** }
 6033              		.loc 1 1222 9 view .LVU1717
 6034 006c 0448     		ldr	r0, .L498+12
 6035              	.LVL443:
1223:src/xeq.c     **** 
 6036              		.loc 1 1223 1 view .LVU1718
 6037 006e 0BB0     		add	sp, sp, #44
 6038              		.cfi_def_cfa_offset 4
 6039              		@ sp needed
 6040 0070 5DF804FB 		ldr	pc, [sp], #4
 6041              	.L499:
 6042              		.align	2
 6043              	.L498:
 6044 0074 00000000 		.word	cnsts
 6045 0078 00000000 		.word	cnsts_d128
 6046 007c 00000000 		.word	cnsts_d64
 6047 0080 00000000 		.word	.LANCHOR2
 6048              		.cfi_endproc
ARM GAS  /tmp/cciWh9P3.s 			page 231


 6049              	.LFE89:
 6051              		.section	.text.get_reg_n,"ax",%progbits
 6052              		.align	1
 6053              		.p2align 2,,3
 6054              		.global	get_reg_n
 6055              		.syntax unified
 6056              		.thumb
 6057              		.thumb_func
 6058              		.fpu fpv4-sp-d16
 6060              	get_reg_n:
 6061              	.LVL444:
 6062              	.LFB87:
1177:src/xeq.c     **** 	const int dbl = is_dblmode();
 6063              		.loc 1 1177 28 is_stmt 1 view -0
 6064              		.cfi_startproc
 6065              		@ args = 0, pretend = 0, frame = 0
 6066              		@ frame_needed = 0, uses_anonymous_args = 0
 6067              		@ link register save eliminated.
1178:src/xeq.c     **** 
 6068              		.loc 1 1178 2 view .LVU1720
 6069              	.LBB1679:
 6070              	.LBI1679:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6071              		.loc 1 931 5 view .LVU1721
 6072              	.LBB1680:
 932:src/xeq.c     **** }
 6073              		.loc 1 932 2 view .LVU1722
 932:src/xeq.c     **** }
 6074              		.loc 1 932 12 is_stmt 0 view .LVU1723
 6075 0000 294B     		ldr	r3, .L515
 6076 0002 1A68     		ldr	r2, [r3]
 932:src/xeq.c     **** }
 6077              		.loc 1 932 24 view .LVU1724
 6078 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 6079 0008 44F20103 		movw	r3, #16385
 6080 000c 0B40     		ands	r3, r3, r1
 6081 000e A3F58041 		sub	r1, r3, #16384
 6082 0012 B1FA81F1 		clz	r1, r1
 6083              	.LBE1680:
 6084              	.LBE1679:
1180:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6085              		.loc 1 1180 5 view .LVU1725
 6086 0016 B0F5FA6F 		cmp	r0, #2000
 6087              	.LBB1682:
 6088              	.LBB1681:
 932:src/xeq.c     **** }
 6089              		.loc 1 932 24 view .LVU1726
 6090 001a 4FEA5111 		lsr	r1, r1, #5
 6091              	.LVL445:
 932:src/xeq.c     **** }
 6092              		.loc 1 932 24 view .LVU1727
 6093              	.LBE1681:
 6094              	.LBE1682:
1180:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6095              		.loc 1 1180 2 is_stmt 1 view .LVU1728
1180:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6096              		.loc 1 1180 5 is_stmt 0 view .LVU1729
ARM GAS  /tmp/cciWh9P3.s 			page 232


 6097 001e 26DA     		bge	.L512
1184:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6098              		.loc 1 1184 2 is_stmt 1 view .LVU1730
1184:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6099              		.loc 1 1184 5 is_stmt 0 view .LVU1731
 6100 0020 B0F57A7F 		cmp	r0, #1000
 6101 0024 13DA     		bge	.L513
1187:src/xeq.c     **** 		// local register on the return stack
 6102              		.loc 1 1187 2 is_stmt 1 view .LVU1732
1187:src/xeq.c     **** 		// local register on the return stack
 6103              		.loc 1 1187 5 is_stmt 0 view .LVU1733
 6104 0026 6F28     		cmp	r0, #111
1177:src/xeq.c     **** 	const int dbl = is_dblmode();
 6105              		.loc 1 1177 28 view .LVU1734
 6106 0028 70B4     		push	{r4, r5, r6}
 6107              		.cfi_def_cfa_offset 12
 6108              		.cfi_offset 4, -12
 6109              		.cfi_offset 5, -8
 6110              		.cfi_offset 6, -4
1187:src/xeq.c     **** 		// local register on the return stack
 6111              		.loc 1 1187 5 view .LVU1735
 6112 002a 03DD     		ble	.L503
 6113              	.LBB1683:
 6114              	.LBI1683:
 229:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 6115              		.loc 1 229 5 is_stmt 1 view .LVU1736
 6116              	.LBE1683:
 230:src/xeq.c     **** }
 6117              		.loc 1 230 2 view .LVU1737
 6118              	.LVL446:
 6119              	.LBB1696:
 6120              	.LBB1684:
 6121              	.LBI1684:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 6122              		.loc 1 221 5 view .LVU1738
 6123              	.LBB1685:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 6124              		.loc 1 222 2 view .LVU1739
 6125              	.LBE1685:
 6126              	.LBE1684:
 6127              	.LBE1696:
 932:src/xeq.c     **** }
 6128              		.loc 1 932 2 view .LVU1740
 6129              	.LBB1697:
 6130              	.LBB1694:
 6131              	.LBB1692:
 223:src/xeq.c     **** }
 6132              		.loc 1 223 2 view .LVU1741
 6133              	.LBB1686:
 6134              	.LBI1686:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 6135              		.loc 1 213 5 view .LVU1742
 6136              	.LBB1687:
 214:src/xeq.c     **** }
 6137              		.loc 1 214 2 view .LVU1743
 214:src/xeq.c     **** }
 6138              		.loc 1 214 9 is_stmt 0 view .LVU1744
ARM GAS  /tmp/cciWh9P3.s 			page 233


 6139 002c B2F9DE47 		ldrsh	r4, [r2, #2014]
 214:src/xeq.c     **** }
 6140              		.loc 1 214 57 view .LVU1745
 6141 0030 002C     		cmp	r4, #0
 6142 0032 20DB     		blt	.L514
 6143              	.LVL447:
 6144              	.L503:
 214:src/xeq.c     **** }
 6145              		.loc 1 214 57 view .LVU1746
 6146              	.LBE1687:
 6147              	.LBE1686:
 6148              	.LBE1692:
 6149              	.LBE1694:
 6150              	.LBE1697:
1194:src/xeq.c     **** }
 6151              		.loc 1 1194 2 is_stmt 1 view .LVU1747
1194:src/xeq.c     **** }
 6152              		.loc 1 1194 55 is_stmt 0 view .LVU1748
 6153 0034 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
 6154              	.LVL448:
1194:src/xeq.c     **** }
 6155              		.loc 1 1194 37 view .LVU1749
 6156 0038 02F58661 		add	r1, r2, #1072
1194:src/xeq.c     **** }
 6157              		.loc 1 1194 55 view .LVU1750
 6158 003c C3F16403 		rsb	r3, r3, #100
1195:src/xeq.c     **** 
 6159              		.loc 1 1195 1 view .LVU1751
 6160 0040 70BC     		pop	{r4, r5, r6}
 6161              		.cfi_restore 6
 6162              		.cfi_restore 5
 6163              		.cfi_restore 4
 6164              		.cfi_def_cfa_offset 0
1194:src/xeq.c     **** }
 6165              		.loc 1 1194 22 view .LVU1752
 6166 0042 01EBC301 		add	r1, r1, r3, lsl #3
 6167 0046 02F5EA62 		add	r2, r2, #1872
 6168              	.LVL449:
1194:src/xeq.c     **** }
 6169              		.loc 1 1194 22 view .LVU1753
 6170 004a FFF7FEBF 		b	reg_address
 6171              	.LVL450:
 6172              	.L513:
1185:src/xeq.c     **** 
 6173              		.loc 1 1185 3 is_stmt 1 view .LVU1754
 6174              	.LBB1698:
 6175              	.LBI1698:
1198:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 6176              		.loc 1 1198 11 view .LVU1755
 6177              	.LBB1699:
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6178              		.loc 1 1199 2 view .LVU1756
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6179              		.loc 1 1199 37 is_stmt 0 view .LVU1757
 6180 004e 174B     		ldr	r3, .L515+4
 6181 0050 1A68     		ldr	r2, [r3]
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
ARM GAS  /tmp/cciWh9P3.s 			page 234


 6182              		.loc 1 1199 68 view .LVU1758
 6183 0052 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6184              		.loc 1 1199 37 view .LVU1759
 6185 0056 02F58661 		add	r1, r2, #1072
 6186              	.LVL451:
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6187              		.loc 1 1199 68 view .LVU1760
 6188 005a C3F16403 		rsb	r3, r3, #100
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6189              		.loc 1 1199 22 view .LVU1761
 6190 005e A0F57A70 		sub	r0, r0, #1000
 6191              	.LVL452:
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6192              		.loc 1 1199 22 view .LVU1762
 6193 0062 01EBC301 		add	r1, r1, r3, lsl #3
 6194 0066 02F5EA62 		add	r2, r2, #1872
 6195 006a FFF7FEBF 		b	reg_address
 6196              	.LVL453:
 6197              	.L512:
1199:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6198              		.loc 1 1199 22 view .LVU1763
 6199              	.LBE1699:
 6200              	.LBE1698:
1181:src/xeq.c     **** 		return get_const(n, dbl);
 6201              		.loc 1 1181 3 is_stmt 1 view .LVU1764
1182:src/xeq.c     **** 	}
 6202              		.loc 1 1182 3 view .LVU1765
1182:src/xeq.c     **** 	}
 6203              		.loc 1 1182 10 is_stmt 0 view .LVU1766
 6204 006e A0F5FA60 		sub	r0, r0, #2000
 6205              	.LVL454:
1182:src/xeq.c     **** 	}
 6206              		.loc 1 1182 10 view .LVU1767
 6207 0072 FFF7FEBF 		b	get_const
 6208              	.LVL455:
 6209              	.L514:
 6210              		.cfi_def_cfa_offset 12
 6211              		.cfi_offset 4, -12
 6212              		.cfi_offset 5, -8
 6213              		.cfi_offset 6, -4
 6214              	.LBB1700:
 6215              	.LBB1695:
 6216              	.LBB1693:
 6217              	.LBB1690:
 6218              	.LBB1688:
 214:src/xeq.c     **** }
 6219              		.loc 1 214 25 view .LVU1768
 6220 0076 0E4D     		ldr	r5, .L515+8
 6221 0078 2D68     		ldr	r5, [r5]
 6222              	.LVL456:
 214:src/xeq.c     **** }
 6223              		.loc 1 214 57 view .LVU1769
 6224 007a 35F81460 		ldrh	r6, [r5, r4, lsl #1]
 6225              	.LBE1688:
 6226              	.LBE1690:
 223:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 235


 6227              		.loc 1 223 30 view .LVU1770
 6228 007e 0231     		adds	r1, r1, #2
 6229              	.LVL457:
 6230              	.LBB1691:
 6231              	.LBB1689:
 214:src/xeq.c     **** }
 6232              		.loc 1 214 57 view .LVU1771
 6233 0080 C6F30B06 		ubfx	r6, r6, #0, #12
 6234              	.LBE1689:
 6235              	.LBE1691:
 6236              	.LBE1693:
 6237              	.LBE1695:
 6238              	.LBE1700:
1187:src/xeq.c     **** 		// local register on the return stack
 6239              		.loc 1 1187 26 view .LVU1772
 6240 0084 56FA01F1 		asrs	r1, r6, r1
 6241              	.LVL458:
1187:src/xeq.c     **** 		// local register on the return stack
 6242              		.loc 1 1187 26 view .LVU1773
 6243 0088 D4D0     		beq	.L503
1189:src/xeq.c     **** 		if (dbl)
 6244              		.loc 1 1189 3 is_stmt 1 view .LVU1774
1189:src/xeq.c     **** 		if (dbl)
 6245              		.loc 1 1189 5 is_stmt 0 view .LVU1775
 6246 008a 7038     		subs	r0, r0, #112
 6247              	.LVL459:
1190:src/xeq.c     **** 			n <<= 1;
 6248              		.loc 1 1190 3 is_stmt 1 view .LVU1776
1190:src/xeq.c     **** 			n <<= 1;
 6249              		.loc 1 1190 6 is_stmt 0 view .LVU1777
 6250 008c B3F5804F 		cmp	r3, #16384
1191:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6251              		.loc 1 1191 4 is_stmt 1 view .LVU1778
1191:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6252              		.loc 1 1191 6 is_stmt 0 view .LVU1779
 6253 0090 08BF     		it	eq
 6254 0092 4000     		lsleq	r0, r0, #1
 6255              	.LVL460:
1192:src/xeq.c     **** 	}
 6256              		.loc 1 1192 3 is_stmt 1 view .LVU1780
1192:src/xeq.c     **** 	}
 6257              		.loc 1 1192 67 is_stmt 0 view .LVU1781
 6258 0094 0234     		adds	r4, r4, #2
1192:src/xeq.c     **** 	}
 6259              		.loc 1 1192 48 view .LVU1782
 6260 0096 24F00104 		bic	r4, r4, #1
1192:src/xeq.c     **** 	}
 6261              		.loc 1 1192 83 view .LVU1783
 6262 009a C000     		lsls	r0, r0, #3
 6263              	.LVL461:
1192:src/xeq.c     **** 	}
 6264              		.loc 1 1192 10 view .LVU1784
 6265 009c 0223     		movs	r3, #2
 6266              	.LVL462:
1192:src/xeq.c     **** 	}
 6267              		.loc 1 1192 10 view .LVU1785
 6268 009e 14FB0300 		smlabb	r0, r4, r3, r0
ARM GAS  /tmp/cciWh9P3.s 			page 236


 6269 00a2 2844     		add	r0, r0, r5
1195:src/xeq.c     **** 
 6270              		.loc 1 1195 1 view .LVU1786
 6271 00a4 70BC     		pop	{r4, r5, r6}
 6272              		.cfi_restore 6
 6273              		.cfi_restore 5
 6274              		.cfi_restore 4
 6275              		.cfi_def_cfa_offset 0
 6276 00a6 7047     		bx	lr
 6277              	.L516:
 6278              		.align	2
 6279              	.L515:
 6280 00a8 00000000 		.word	main_ram
 6281 00ac 00000000 		.word	backup_ram
 6282 00b0 00000000 		.word	RetStk
 6283              		.cfi_endproc
 6284              	.LFE87:
 6286              		.section	.text.get_stack,"ax",%progbits
 6287              		.align	1
 6288              		.p2align 2,,3
 6289              		.global	get_stack
 6290              		.syntax unified
 6291              		.thumb
 6292              		.thumb_func
 6293              		.fpu fpv4-sp-d16
 6295              	get_stack:
 6296              	.LVL463:
 6297              	.LFB43:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6298              		.loc 1 708 30 is_stmt 1 view -0
 6299              		.cfi_startproc
 6300              		@ args = 0, pretend = 0, frame = 0
 6301              		@ frame_needed = 0, uses_anonymous_args = 0
 6302              		@ link register save eliminated.
 709:src/xeq.c     **** }
 6303              		.loc 1 709 2 view .LVU1788
 709:src/xeq.c     **** }
 6304              		.loc 1 709 9 is_stmt 0 view .LVU1789
 6305 0000 6430     		adds	r0, r0, #100
 6306              	.LVL464:
 709:src/xeq.c     **** }
 6307              		.loc 1 709 9 view .LVU1790
 6308 0002 FFF7FEBF 		b	get_reg_n
 6309              	.LVL465:
 709:src/xeq.c     **** }
 6310              		.loc 1 709 9 view .LVU1791
 6311              		.cfi_endproc
 6312              	.LFE43:
 6314 0006 00BF     		.section	.text.lift,"ax",%progbits
 6315              		.align	1
 6316              		.p2align 2,,3
 6317              		.global	lift
 6318              		.syntax unified
 6319              		.thumb
 6320              		.thumb_func
 6321              		.fpu fpv4-sp-d16
 6323              	lift:
ARM GAS  /tmp/cciWh9P3.s 			page 237


 6324              	.LFB47:
 726:src/xeq.c     **** 	const int n = stack_size();
 6325              		.loc 1 726 17 is_stmt 1 view -0
 6326              		.cfi_startproc
 6327              		@ args = 0, pretend = 0, frame = 0
 6328              		@ frame_needed = 0, uses_anonymous_args = 0
 727:src/xeq.c     **** 	int i;
 6329              		.loc 1 727 2 view .LVU1793
 6330              	.LBB1701:
 6331              	.LBI1701:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6332              		.loc 1 702 5 view .LVU1794
 6333              	.LBB1702:
 703:src/xeq.c     **** 		return 4;
 6334              		.loc 1 703 2 view .LVU1795
 6335              	.LBE1702:
 6336              	.LBE1701:
 726:src/xeq.c     **** 	const int n = stack_size();
 6337              		.loc 1 726 17 is_stmt 0 view .LVU1796
 6338 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6339              		.cfi_def_cfa_offset 24
 6340              		.cfi_offset 3, -24
 6341              		.cfi_offset 4, -20
 6342              		.cfi_offset 5, -16
 6343              		.cfi_offset 6, -12
 6344              		.cfi_offset 7, -8
 6345              		.cfi_offset 14, -4
 6346              	.LBB1707:
 6347              	.LBB1705:
 703:src/xeq.c     **** 		return 4;
 6348              		.loc 1 703 8 view .LVU1797
 6349 0002 184E     		ldr	r6, .L529
 6350 0004 3368     		ldr	r3, [r6]
 703:src/xeq.c     **** 		return 4;
 6351              		.loc 1 703 6 view .LVU1798
 6352 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 6353              		.loc 1 703 5 view .LVU1799
 6354 000a 1207     		lsls	r2, r2, #28
 6355 000c 28D5     		bpl	.L522
 6356              	.LBB1703:
 6357              	.LBI1703:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 6358              		.loc 1 181 5 is_stmt 1 view .LVU1800
 6359              	.LBB1704:
 182:src/xeq.c     **** }
 6360              		.loc 1 182 2 view .LVU1801
 182:src/xeq.c     **** }
 6361              		.loc 1 182 9 is_stmt 0 view .LVU1802
 6362 000e B3F8E037 		ldrh	r3, [r3, #2016]
 6363              	.LBE1704:
 6364              	.LBE1703:
 703:src/xeq.c     **** 		return 4;
 6365              		.loc 1 703 27 view .LVU1803
 6366 0012 9B0B     		lsrs	r3, r3, #14
 6367 0014 032B     		cmp	r3, #3
 6368 0016 1BD0     		beq	.L528
ARM GAS  /tmp/cciWh9P3.s 			page 238


 6369 0018 0724     		movs	r4, #7
 6370              	.L519:
 6371              	.LBE1705:
 6372              	.LBE1707:
 728:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 6373              		.loc 1 728 2 is_stmt 1 view .LVU1804
 729:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6374              		.loc 1 729 2 view .LVU1805
 729:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6375              		.loc 1 729 14 view .LVU1806
 6376 001a 6434     		adds	r4, r4, #100
 6377              	.LBB1708:
 6378              	.LBB1709:
 6379              	.LBB1710:
 6380              	.LBB1711:
 932:src/xeq.c     **** }
 6381              		.loc 1 932 24 is_stmt 0 view .LVU1807
 6382 001c 44F20107 		movw	r7, #16385
 6383              	.L521:
 6384              	.LVL466:
 932:src/xeq.c     **** }
 6385              		.loc 1 932 24 view .LVU1808
 6386              	.LBE1711:
 6387              	.LBE1710:
 6388              	.LBE1709:
 6389              	.LBE1708:
 730:src/xeq.c     **** }
 6390              		.loc 1 730 3 is_stmt 1 view .LVU1809
 6391              	.LBB1718:
 6392              	.LBI1718:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6393              		.loc 1 708 11 view .LVU1810
 6394              	.LBB1719:
 709:src/xeq.c     **** }
 6395              		.loc 1 709 2 view .LVU1811
 709:src/xeq.c     **** }
 6396              		.loc 1 709 9 is_stmt 0 view .LVU1812
 6397 0020 2046     		mov	r0, r4
 6398 0022 FFF7FEFF 		bl	get_reg_n
 6399              	.LVL467:
 6400              	.LBE1719:
 6401              	.LBE1718:
 6402              	.LBB1721:
 6403              	.LBB1722:
 6404 0026 013C     		subs	r4, r4, #1
 6405              	.LVL468:
 709:src/xeq.c     **** }
 6406              		.loc 1 709 9 view .LVU1813
 6407              	.LBE1722:
 6408              	.LBE1721:
 6409              	.LBB1726:
 6410              	.LBB1720:
 6411 0028 0546     		mov	r5, r0
 6412              	.LBE1720:
 6413              	.LBE1726:
 6414              	.LBB1727:
 6415              	.LBB1723:
ARM GAS  /tmp/cciWh9P3.s 			page 239


 6416 002a 2046     		mov	r0, r4
 6417              	.LVL469:
 709:src/xeq.c     **** }
 6418              		.loc 1 709 9 view .LVU1814
 6419              	.LBE1723:
 6420              	.LBI1721:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6421              		.loc 1 708 11 is_stmt 1 view .LVU1815
 6422              	.LBB1724:
 709:src/xeq.c     **** }
 6423              		.loc 1 709 2 view .LVU1816
 709:src/xeq.c     **** }
 6424              		.loc 1 709 9 is_stmt 0 view .LVU1817
 6425 002c FFF7FEFF 		bl	get_reg_n
 6426              	.LVL470:
 709:src/xeq.c     **** }
 6427              		.loc 1 709 9 view .LVU1818
 6428              	.LBE1724:
 6429              	.LBE1727:
 6430              	.LBB1728:
 6431              	.LBB1716:
 6432              	.LBB1714:
 6433              	.LBB1712:
 932:src/xeq.c     **** }
 6434              		.loc 1 932 24 view .LVU1819
 6435 0030 3368     		ldr	r3, [r6]
 6436 0032 B3F8E837 		ldrh	r3, [r3, #2024]
 6437              	.LBE1712:
 6438              	.LBE1714:
 717:src/xeq.c     **** }
 6439              		.loc 1 717 2 view .LVU1820
 6440 0036 3B40     		ands	r3, r3, r7
 6441 0038 B3F5804F 		cmp	r3, #16384
 6442              	.LBE1716:
 6443              	.LBE1728:
 6444              	.LBB1729:
 6445              	.LBB1725:
 709:src/xeq.c     **** }
 6446              		.loc 1 709 9 view .LVU1821
 6447 003c 0146     		mov	r1, r0
 6448              	.LVL471:
 709:src/xeq.c     **** }
 6449              		.loc 1 709 9 view .LVU1822
 6450              	.LBE1725:
 6451              	.LBE1729:
 6452              	.LBB1730:
 6453              	.LBI1708:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6454              		.loc 1 716 6 is_stmt 1 view .LVU1823
 6455              	.LBB1717:
 717:src/xeq.c     **** }
 6456              		.loc 1 717 2 view .LVU1824
 6457              	.LBB1715:
 6458              	.LBI1710:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6459              		.loc 1 931 5 view .LVU1825
 6460              	.LBB1713:
ARM GAS  /tmp/cciWh9P3.s 			page 240


 932:src/xeq.c     **** }
 6461              		.loc 1 932 2 view .LVU1826
 6462              	.LBE1713:
 6463              	.LBE1715:
 717:src/xeq.c     **** }
 6464              		.loc 1 717 2 is_stmt 0 view .LVU1827
 6465 003e 0CBF     		ite	eq
 6466 0040 1022     		moveq	r2, #16
 6467 0042 0822     		movne	r2, #8
 6468 0044 2846     		mov	r0, r5
 6469              	.LVL472:
 717:src/xeq.c     **** }
 6470              		.loc 1 717 2 view .LVU1828
 6471 0046 FFF7FEFF 		bl	xcopy
 6472              	.LVL473:
 717:src/xeq.c     **** }
 6473              		.loc 1 717 2 view .LVU1829
 6474              	.LBE1717:
 6475              	.LBE1730:
 729:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6476              		.loc 1 729 19 is_stmt 1 view .LVU1830
 729:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6477              		.loc 1 729 14 view .LVU1831
 729:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6478              		.loc 1 729 2 is_stmt 0 view .LVU1832
 6479 004a 642C     		cmp	r4, #100
 6480 004c E8D1     		bne	.L521
 731:src/xeq.c     **** 
 6481              		.loc 1 731 1 view .LVU1833
 6482 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6483              	.LVL474:
 6484              	.L528:
 6485              	.LBB1731:
 6486              	.LBB1706:
 703:src/xeq.c     **** 		return 4;
 6487              		.loc 1 703 44 view .LVU1834
 6488 0050 054B     		ldr	r3, .L529+4
 703:src/xeq.c     **** 		return 4;
 6489              		.loc 1 703 41 view .LVU1835
 6490 0052 93F90130 		ldrsb	r3, [r3, #1]
 6491 0056 002B     		cmp	r3, #0
 6492 0058 B4BF     		ite	lt
 6493 005a 0724     		movlt	r4, #7
 6494 005c 0324     		movge	r4, #3
 6495 005e DCE7     		b	.L519
 6496              	.L522:
 6497 0060 0324     		movs	r4, #3
 6498 0062 DAE7     		b	.L519
 6499              	.L530:
 6500              		.align	2
 6501              	.L529:
 6502 0064 00000000 		.word	main_ram
 6503 0068 00000000 		.word	XromParams
 6504              	.LBE1706:
 6505              	.LBE1731:
 6506              		.cfi_endproc
 6507              	.LFE47:
ARM GAS  /tmp/cciWh9P3.s 			page 241


 6509              		.section	.text.lift_if_enabled,"ax",%progbits
 6510              		.align	1
 6511              		.p2align 2,,3
 6512              		.global	lift_if_enabled
 6513              		.syntax unified
 6514              		.thumb
 6515              		.thumb_func
 6516              		.fpu fpv4-sp-d16
 6518              	lift_if_enabled:
 6519              	.LFB49:
 737:src/xeq.c     **** 	if (get_lift())
 6520              		.loc 1 737 28 is_stmt 1 view -0
 6521              		.cfi_startproc
 6522              		@ args = 0, pretend = 0, frame = 0
 6523              		@ frame_needed = 0, uses_anonymous_args = 0
 6524              		@ link register save eliminated.
 738:src/xeq.c     **** 		lift();
 6525              		.loc 1 738 2 view .LVU1837
 6526              	.LBB1732:
 6527              	.LBI1732:
 733:src/xeq.c     **** 	return State2.state_lift;
 6528              		.loc 1 733 12 view .LVU1838
 6529              	.LBB1733:
 734:src/xeq.c     **** }
 6530              		.loc 1 734 2 view .LVU1839
 734:src/xeq.c     **** }
 6531              		.loc 1 734 15 is_stmt 0 view .LVU1840
 6532 0000 034B     		ldr	r3, .L534
 6533 0002 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 6534              	.LBE1733:
 6535              	.LBE1732:
 738:src/xeq.c     **** 		lift();
 6536              		.loc 1 738 5 view .LVU1841
 6537 0004 5B06     		lsls	r3, r3, #25
 6538 0006 00D4     		bmi	.L533
 740:src/xeq.c     **** 
 6539              		.loc 1 740 1 view .LVU1842
 6540 0008 7047     		bx	lr
 6541              	.L533:
 739:src/xeq.c     **** }
 6542              		.loc 1 739 3 is_stmt 1 view .LVU1843
 6543 000a FFF7FEBF 		b	lift
 6544              	.LVL475:
 6545              	.L535:
 6546 000e 00BF     		.align	2
 6547              	.L534:
 6548 0010 00000000 		.word	StateWhileOn
 6549              		.cfi_endproc
 6550              	.LFE49:
 6552              		.section	.text.lower,"ax",%progbits
 6553              		.align	1
 6554              		.p2align 2,,3
 6555              		.syntax unified
 6556              		.thumb
 6557              		.thumb_func
 6558              		.fpu fpv4-sp-d16
 6560              	lower:
ARM GAS  /tmp/cciWh9P3.s 			page 242


 6561              	.LFB53:
 755:src/xeq.c     **** 	const int n = stack_size();
 6562              		.loc 1 755 25 view -0
 6563              		.cfi_startproc
 6564              		@ args = 0, pretend = 0, frame = 0
 6565              		@ frame_needed = 0, uses_anonymous_args = 0
 756:src/xeq.c     **** 	int i;
 6566              		.loc 1 756 2 view .LVU1845
 6567              	.LBB1734:
 6568              	.LBI1734:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6569              		.loc 1 702 5 view .LVU1846
 6570              	.LBB1735:
 703:src/xeq.c     **** 		return 4;
 6571              		.loc 1 703 2 view .LVU1847
 6572              	.LBE1735:
 6573              	.LBE1734:
 755:src/xeq.c     **** 	const int n = stack_size();
 6574              		.loc 1 755 25 is_stmt 0 view .LVU1848
 6575 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6576              		.cfi_def_cfa_offset 24
 6577              		.cfi_offset 4, -24
 6578              		.cfi_offset 5, -20
 6579              		.cfi_offset 6, -16
 6580              		.cfi_offset 7, -12
 6581              		.cfi_offset 8, -8
 6582              		.cfi_offset 14, -4
 6583              	.LBB1741:
 6584              	.LBB1738:
 703:src/xeq.c     **** 		return 4;
 6585              		.loc 1 703 8 view .LVU1849
 6586 0004 194F     		ldr	r7, .L547
 6587 0006 3B68     		ldr	r3, [r7]
 703:src/xeq.c     **** 		return 4;
 6588              		.loc 1 703 6 view .LVU1850
 6589 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 6590              		.loc 1 703 5 view .LVU1851
 6591 000c 1207     		lsls	r2, r2, #28
 6592 000e 2BD5     		bpl	.L540
 6593              	.LBB1736:
 6594              	.LBI1736:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 6595              		.loc 1 181 5 is_stmt 1 view .LVU1852
 6596              	.LBB1737:
 182:src/xeq.c     **** }
 6597              		.loc 1 182 2 view .LVU1853
 182:src/xeq.c     **** }
 6598              		.loc 1 182 9 is_stmt 0 view .LVU1854
 6599 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 6600              	.LBE1737:
 6601              	.LBE1736:
 703:src/xeq.c     **** 		return 4;
 6602              		.loc 1 703 27 view .LVU1855
 6603 0014 9B0B     		lsrs	r3, r3, #14
 6604 0016 032B     		cmp	r3, #3
 6605 0018 1ED0     		beq	.L546
ARM GAS  /tmp/cciWh9P3.s 			page 243


 705:src/xeq.c     **** }
 6606              		.loc 1 705 9 view .LVU1856
 6607 001a 0826     		movs	r6, #8
 6608              	.L537:
 6609              	.LVL476:
 705:src/xeq.c     **** }
 6610              		.loc 1 705 9 view .LVU1857
 6611              	.LBE1738:
 6612              	.LBE1741:
 757:src/xeq.c     **** 
 6613              		.loc 1 757 2 is_stmt 1 view .LVU1858
 759:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6614              		.loc 1 759 2 view .LVU1859
 759:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6615              		.loc 1 759 12 view .LVU1860
 6616 001c 6336     		adds	r6, r6, #99
 6617              	.LVL477:
 6618              	.LBB1742:
 6619              	.LBB1739:
 704:src/xeq.c     **** 	return 8;
 6620              		.loc 1 704 10 is_stmt 0 view .LVU1861
 6621 001e 6424     		movs	r4, #100
 6622              	.LBE1739:
 6623              	.LBE1742:
 6624              	.LBB1743:
 6625              	.LBB1744:
 6626              	.LBB1745:
 6627              	.LBB1746:
 932:src/xeq.c     **** }
 6628              		.loc 1 932 24 view .LVU1862
 6629 0020 44F20108 		movw	r8, #16385
 6630              	.LVL478:
 6631              	.L539:
 932:src/xeq.c     **** }
 6632              		.loc 1 932 24 view .LVU1863
 6633              	.LBE1746:
 6634              	.LBE1745:
 6635              	.LBE1744:
 6636              	.LBE1743:
 760:src/xeq.c     **** }
 6637              		.loc 1 760 3 is_stmt 1 discriminator 3 view .LVU1864
 6638              	.LBB1753:
 6639              	.LBI1753:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6640              		.loc 1 708 11 discriminator 3 view .LVU1865
 6641              	.LBB1754:
 709:src/xeq.c     **** }
 6642              		.loc 1 709 2 discriminator 3 view .LVU1866
 709:src/xeq.c     **** }
 6643              		.loc 1 709 9 is_stmt 0 discriminator 3 view .LVU1867
 6644 0024 2046     		mov	r0, r4
 6645 0026 FFF7FEFF 		bl	get_reg_n
 6646              	.LVL479:
 6647 002a 0134     		adds	r4, r4, #1
 6648              	.LVL480:
 709:src/xeq.c     **** }
 6649              		.loc 1 709 9 discriminator 3 view .LVU1868
ARM GAS  /tmp/cciWh9P3.s 			page 244


 6650 002c 0546     		mov	r5, r0
 6651              	.LBE1754:
 6652              	.LBE1753:
 6653              	.LBB1755:
 6654              	.LBB1756:
 6655 002e 2046     		mov	r0, r4
 6656              	.LVL481:
 709:src/xeq.c     **** }
 6657              		.loc 1 709 9 discriminator 3 view .LVU1869
 6658              	.LBE1756:
 6659              	.LBI1755:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6660              		.loc 1 708 11 is_stmt 1 discriminator 3 view .LVU1870
 6661              	.LBB1757:
 709:src/xeq.c     **** }
 6662              		.loc 1 709 2 discriminator 3 view .LVU1871
 709:src/xeq.c     **** }
 6663              		.loc 1 709 9 is_stmt 0 discriminator 3 view .LVU1872
 6664 0030 FFF7FEFF 		bl	get_reg_n
 6665              	.LVL482:
 709:src/xeq.c     **** }
 6666              		.loc 1 709 9 discriminator 3 view .LVU1873
 6667              	.LBE1757:
 6668              	.LBE1755:
 6669              	.LBB1759:
 6670              	.LBB1751:
 6671              	.LBB1749:
 6672              	.LBB1747:
 932:src/xeq.c     **** }
 6673              		.loc 1 932 24 discriminator 3 view .LVU1874
 6674 0034 3B68     		ldr	r3, [r7]
 6675 0036 B3F8E837 		ldrh	r3, [r3, #2024]
 6676              	.LBE1747:
 6677              	.LBE1749:
 717:src/xeq.c     **** }
 6678              		.loc 1 717 2 discriminator 3 view .LVU1875
 6679 003a 08EA0303 		and	r3, r8, r3
 6680 003e B3F5804F 		cmp	r3, #16384
 6681              	.LBE1751:
 6682              	.LBE1759:
 6683              	.LBB1760:
 6684              	.LBB1758:
 709:src/xeq.c     **** }
 6685              		.loc 1 709 9 discriminator 3 view .LVU1876
 6686 0042 0146     		mov	r1, r0
 6687              	.LVL483:
 709:src/xeq.c     **** }
 6688              		.loc 1 709 9 discriminator 3 view .LVU1877
 6689              	.LBE1758:
 6690              	.LBE1760:
 6691              	.LBB1761:
 6692              	.LBI1743:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6693              		.loc 1 716 6 is_stmt 1 discriminator 3 view .LVU1878
 6694              	.LBB1752:
 717:src/xeq.c     **** }
 6695              		.loc 1 717 2 discriminator 3 view .LVU1879
ARM GAS  /tmp/cciWh9P3.s 			page 245


 6696              	.LBB1750:
 6697              	.LBI1745:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6698              		.loc 1 931 5 discriminator 3 view .LVU1880
 6699              	.LBB1748:
 932:src/xeq.c     **** }
 6700              		.loc 1 932 2 discriminator 3 view .LVU1881
 6701              	.LBE1748:
 6702              	.LBE1750:
 717:src/xeq.c     **** }
 6703              		.loc 1 717 2 is_stmt 0 discriminator 3 view .LVU1882
 6704 0044 0CBF     		ite	eq
 6705 0046 1022     		moveq	r2, #16
 6706 0048 0822     		movne	r2, #8
 6707 004a 2846     		mov	r0, r5
 6708              	.LVL484:
 717:src/xeq.c     **** }
 6709              		.loc 1 717 2 discriminator 3 view .LVU1883
 6710 004c FFF7FEFF 		bl	xcopy
 6711              	.LVL485:
 717:src/xeq.c     **** }
 6712              		.loc 1 717 2 discriminator 3 view .LVU1884
 6713              	.LBE1752:
 6714              	.LBE1761:
 759:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6715              		.loc 1 759 17 is_stmt 1 discriminator 3 view .LVU1885
 759:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6716              		.loc 1 759 12 discriminator 3 view .LVU1886
 759:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6717              		.loc 1 759 2 is_stmt 0 discriminator 3 view .LVU1887
 6718 0050 B442     		cmp	r4, r6
 6719 0052 E7D1     		bne	.L539
 761:src/xeq.c     **** 
 6720              		.loc 1 761 1 view .LVU1888
 6721 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6722              	.LVL486:
 6723              	.L546:
 6724              	.LBB1762:
 6725              	.LBB1740:
 703:src/xeq.c     **** 		return 4;
 6726              		.loc 1 703 44 view .LVU1889
 6727 0058 054B     		ldr	r3, .L547+4
 703:src/xeq.c     **** 		return 4;
 6728              		.loc 1 703 41 view .LVU1890
 6729 005a 93F90130 		ldrsb	r3, [r3, #1]
 704:src/xeq.c     **** 	return 8;
 6730              		.loc 1 704 10 view .LVU1891
 6731 005e 002B     		cmp	r3, #0
 6732 0060 B4BF     		ite	lt
 6733 0062 0826     		movlt	r6, #8
 6734 0064 0426     		movge	r6, #4
 6735 0066 D9E7     		b	.L537
 6736              	.L540:
 6737 0068 0426     		movs	r6, #4
 6738 006a D7E7     		b	.L537
 6739              	.L548:
 6740              		.align	2
ARM GAS  /tmp/cciWh9P3.s 			page 246


 6741              	.L547:
 6742 006c 00000000 		.word	main_ram
 6743 0070 00000000 		.word	XromParams
 6744              	.LBE1740:
 6745              	.LBE1762:
 6746              		.cfi_endproc
 6747              	.LFE53:
 6749              		.section	.text.get_stack_top,"ax",%progbits
 6750              		.align	1
 6751              		.p2align 2,,3
 6752              		.syntax unified
 6753              		.thumb
 6754              		.thumb_func
 6755              		.fpu fpv4-sp-d16
 6757              	get_stack_top:
 6758              	.LFB44:
 712:src/xeq.c     **** 	return get_stack(stack_size()-1);
 6759              		.loc 1 712 38 is_stmt 1 view -0
 6760              		.cfi_startproc
 6761              		@ args = 0, pretend = 0, frame = 0
 6762              		@ frame_needed = 0, uses_anonymous_args = 0
 6763              		@ link register save eliminated.
 713:src/xeq.c     **** }
 6764              		.loc 1 713 2 view .LVU1893
 6765              	.LBB1763:
 6766              	.LBI1763:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6767              		.loc 1 702 5 view .LVU1894
 6768              	.LBB1764:
 703:src/xeq.c     **** 		return 4;
 6769              		.loc 1 703 2 view .LVU1895
 703:src/xeq.c     **** 		return 4;
 6770              		.loc 1 703 8 is_stmt 0 view .LVU1896
 6771 0000 0C4B     		ldr	r3, .L555
 6772 0002 1B68     		ldr	r3, [r3]
 703:src/xeq.c     **** 		return 4;
 6773              		.loc 1 703 6 view .LVU1897
 6774 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 6775              		.loc 1 703 5 view .LVU1898
 6776 0008 1207     		lsls	r2, r2, #28
 6777 000a 10D5     		bpl	.L551
 6778              	.LBB1765:
 6779              	.LBI1765:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 6780              		.loc 1 181 5 is_stmt 1 view .LVU1899
 6781              	.LBB1766:
 182:src/xeq.c     **** }
 6782              		.loc 1 182 2 view .LVU1900
 182:src/xeq.c     **** }
 6783              		.loc 1 182 9 is_stmt 0 view .LVU1901
 6784 000c B3F8E037 		ldrh	r3, [r3, #2016]
 6785              	.LBE1766:
 6786              	.LBE1765:
 703:src/xeq.c     **** 		return 4;
 6787              		.loc 1 703 27 view .LVU1902
 6788 0010 9B0B     		lsrs	r3, r3, #14
ARM GAS  /tmp/cciWh9P3.s 			page 247


 6789 0012 032B     		cmp	r3, #3
 6790 0014 02D0     		beq	.L554
 6791 0016 6B20     		movs	r0, #107
 6792              	.LBE1764:
 6793              	.LBE1763:
 6794              	.LBB1769:
 6795              	.LBI1769:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6796              		.loc 1 708 11 is_stmt 1 view .LVU1903
 6797              	.LBB1770:
 709:src/xeq.c     **** }
 6798              		.loc 1 709 2 view .LVU1904
 709:src/xeq.c     **** }
 6799              		.loc 1 709 9 is_stmt 0 view .LVU1905
 6800 0018 FFF7FEBF 		b	get_reg_n
 6801              	.LVL487:
 6802              	.L554:
 6803              	.LBE1770:
 6804              	.LBE1769:
 6805              	.LBB1773:
 6806              	.LBB1767:
 703:src/xeq.c     **** 		return 4;
 6807              		.loc 1 703 44 view .LVU1906
 6808 001c 064B     		ldr	r3, .L555+4
 703:src/xeq.c     **** 		return 4;
 6809              		.loc 1 703 41 view .LVU1907
 6810 001e 93F90130 		ldrsb	r3, [r3, #1]
 6811 0022 002B     		cmp	r3, #0
 6812 0024 B4BF     		ite	lt
 6813 0026 6B20     		movlt	r0, #107
 6814 0028 6720     		movge	r0, #103
 6815              	.LBE1767:
 6816              	.LBE1773:
 6817              	.LBB1774:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6818              		.loc 1 708 11 is_stmt 1 view .LVU1908
 6819              	.LBB1771:
 709:src/xeq.c     **** }
 6820              		.loc 1 709 2 view .LVU1909
 709:src/xeq.c     **** }
 6821              		.loc 1 709 9 is_stmt 0 view .LVU1910
 6822 002a FFF7FEBF 		b	get_reg_n
 6823              	.LVL488:
 6824              	.L551:
 6825              	.LBE1771:
 6826              	.LBE1774:
 6827              	.LBB1775:
 6828              	.LBB1768:
 6829 002e 6720     		movs	r0, #103
 6830              	.LBE1768:
 6831              	.LBE1775:
 6832              	.LBB1776:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6833              		.loc 1 708 11 is_stmt 1 view .LVU1911
 6834              	.LBB1772:
 709:src/xeq.c     **** }
 6835              		.loc 1 709 2 view .LVU1912
ARM GAS  /tmp/cciWh9P3.s 			page 248


 709:src/xeq.c     **** }
 6836              		.loc 1 709 9 is_stmt 0 view .LVU1913
 6837 0030 FFF7FEBF 		b	get_reg_n
 6838              	.LVL489:
 6839              	.L556:
 6840              		.align	2
 6841              	.L555:
 6842 0034 00000000 		.word	main_ram
 6843 0038 00000000 		.word	XromParams
 6844              	.LBE1772:
 6845              	.LBE1776:
 6846              		.cfi_endproc
 6847              	.LFE44:
 6849              		.section	.text.roll_down,"ax",%progbits
 6850              		.align	1
 6851              		.p2align 2,,3
 6852              		.global	roll_down
 6853              		.syntax unified
 6854              		.thumb
 6855              		.thumb_func
 6856              		.fpu fpv4-sp-d16
 6858              	roll_down:
 6859              	.LVL490:
 6860              	.LFB70:
 866:src/xeq.c     **** 	REGISTER r;
 6861              		.loc 1 866 31 is_stmt 1 view -0
 6862              		.cfi_startproc
 6863              		@ args = 0, pretend = 0, frame = 16
 6864              		@ frame_needed = 0, uses_anonymous_args = 0
 867:src/xeq.c     **** 	copyreg(&r, StackBase);
 6865              		.loc 1 867 2 view .LVU1915
 868:src/xeq.c     **** 	lower();
 6866              		.loc 1 868 2 view .LVU1916
 866:src/xeq.c     **** 	REGISTER r;
 6867              		.loc 1 866 31 is_stmt 0 view .LVU1917
 6868 0000 30B5     		push	{r4, r5, lr}
 6869              		.cfi_def_cfa_offset 12
 6870              		.cfi_offset 4, -12
 6871              		.cfi_offset 5, -8
 6872              		.cfi_offset 14, -4
 6873              	.LBB1777:
 6874              	.LBB1778:
 6875              	.LBB1779:
 6876              	.LBB1780:
 932:src/xeq.c     **** }
 6877              		.loc 1 932 24 view .LVU1918
 6878 0002 124D     		ldr	r5, .L563
 6879              	.LBE1780:
 6880              	.LBE1779:
 6881              	.LBE1778:
 6882              	.LBE1777:
 868:src/xeq.c     **** 	lower();
 6883              		.loc 1 868 2 view .LVU1919
 6884 0004 124A     		ldr	r2, .L563+4
 6885              	.LBB1789:
 6886              	.LBB1787:
 6887              	.LBB1784:
ARM GAS  /tmp/cciWh9P3.s 			page 249


 6888              	.LBB1781:
 932:src/xeq.c     **** }
 6889              		.loc 1 932 24 view .LVU1920
 6890 0006 2B68     		ldr	r3, [r5]
 6891              	.LBE1781:
 6892              	.LBE1784:
 717:src/xeq.c     **** }
 6893              		.loc 1 717 2 view .LVU1921
 6894 0008 1168     		ldr	r1, [r2]
 6895              	.LBB1785:
 6896              	.LBB1782:
 932:src/xeq.c     **** }
 6897              		.loc 1 932 24 view .LVU1922
 6898 000a B3F8E837 		ldrh	r3, [r3, #2024]
 6899 000e 44F20104 		movw	r4, #16385
 6900              	.LBE1782:
 6901              	.LBE1785:
 717:src/xeq.c     **** }
 6902              		.loc 1 717 2 view .LVU1923
 6903 0012 2340     		ands	r3, r3, r4
 6904              	.LBE1787:
 6905              	.LBE1789:
 866:src/xeq.c     **** 	REGISTER r;
 6906              		.loc 1 866 31 view .LVU1924
 6907 0014 85B0     		sub	sp, sp, #20
 6908              		.cfi_def_cfa_offset 32
 6909              	.LVL491:
 6910              	.LBB1790:
 6911              	.LBI1777:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6912              		.loc 1 716 6 is_stmt 1 view .LVU1925
 6913              	.LBB1788:
 717:src/xeq.c     **** }
 6914              		.loc 1 717 2 view .LVU1926
 6915              	.LBB1786:
 6916              	.LBI1779:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6917              		.loc 1 931 5 view .LVU1927
 6918              	.LBB1783:
 932:src/xeq.c     **** }
 6919              		.loc 1 932 2 view .LVU1928
 6920              	.LBE1783:
 6921              	.LBE1786:
 717:src/xeq.c     **** }
 6922              		.loc 1 717 2 is_stmt 0 view .LVU1929
 6923 0016 B3F5804F 		cmp	r3, #16384
 6924 001a 0CBF     		ite	eq
 6925 001c 1022     		moveq	r2, #16
 6926 001e 0822     		movne	r2, #8
 6927 0020 6846     		mov	r0, sp
 6928              	.LVL492:
 717:src/xeq.c     **** }
 6929              		.loc 1 717 2 view .LVU1930
 6930 0022 FFF7FEFF 		bl	xcopy
 6931              	.LVL493:
 717:src/xeq.c     **** }
 6932              		.loc 1 717 2 view .LVU1931
ARM GAS  /tmp/cciWh9P3.s 			page 250


 6933              	.LBE1788:
 6934              	.LBE1790:
 869:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 6935              		.loc 1 869 2 is_stmt 1 view .LVU1932
 6936 0026 FFF7FEFF 		bl	lower
 6937              	.LVL494:
 870:src/xeq.c     **** }
 6938              		.loc 1 870 2 view .LVU1933
 6939 002a FFF7FEFF 		bl	get_stack_top
 6940              	.LVL495:
 6941              	.LBB1791:
 6942              	.LBI1791:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6943              		.loc 1 716 6 view .LVU1934
 6944              	.LBB1792:
 717:src/xeq.c     **** }
 6945              		.loc 1 717 2 view .LVU1935
 6946              	.LBB1793:
 6947              	.LBI1793:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6948              		.loc 1 931 5 view .LVU1936
 6949              	.LBB1794:
 932:src/xeq.c     **** }
 6950              		.loc 1 932 2 view .LVU1937
 932:src/xeq.c     **** }
 6951              		.loc 1 932 24 is_stmt 0 view .LVU1938
 6952 002e 2B68     		ldr	r3, [r5]
 6953 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 6954              	.LBE1794:
 6955              	.LBE1793:
 717:src/xeq.c     **** }
 6956              		.loc 1 717 2 view .LVU1939
 6957 0034 1C40     		ands	r4, r4, r3
 6958 0036 B4F5804F 		cmp	r4, #16384
 6959 003a 6946     		mov	r1, sp
 6960 003c 0CBF     		ite	eq
 6961 003e 1022     		moveq	r2, #16
 6962 0040 0822     		movne	r2, #8
 6963 0042 FFF7FEFF 		bl	xcopy
 6964              	.LVL496:
 717:src/xeq.c     **** }
 6965              		.loc 1 717 2 view .LVU1940
 6966              	.LBE1792:
 6967              	.LBE1791:
 871:src/xeq.c     **** 
 6968              		.loc 1 871 1 view .LVU1941
 6969 0046 05B0     		add	sp, sp, #20
 6970              		.cfi_def_cfa_offset 12
 6971              		@ sp needed
 6972 0048 30BD     		pop	{r4, r5, pc}
 6973              	.L564:
 6974 004a 00BF     		.align	2
 6975              	.L563:
 6976 004c 00000000 		.word	main_ram
 6977 0050 00000000 		.word	StackBase
 6978              		.cfi_endproc
 6979              	.LFE70:
ARM GAS  /tmp/cciWh9P3.s 			page 251


 6981              		.section	.text.cpx_roll_down,"ax",%progbits
 6982              		.align	1
 6983              		.p2align 2,,3
 6984              		.global	cpx_roll_down
 6985              		.syntax unified
 6986              		.thumb
 6987              		.thumb_func
 6988              		.fpu fpv4-sp-d16
 6990              	cpx_roll_down:
 6991              	.LVL497:
 6992              	.LFB72:
 880:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6993              		.loc 1 880 35 is_stmt 1 view -0
 6994              		.cfi_startproc
 6995              		@ args = 0, pretend = 0, frame = 0
 6996              		@ frame_needed = 0, uses_anonymous_args = 0
 881:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6997              		.loc 1 881 2 view .LVU1943
 880:src/xeq.c     **** 	roll_down(OP_RDOWN);
 6998              		.loc 1 880 35 is_stmt 0 view .LVU1944
 6999 0000 08B5     		push	{r3, lr}
 7000              		.cfi_def_cfa_offset 8
 7001              		.cfi_offset 3, -8
 7002              		.cfi_offset 14, -4
 881:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7003              		.loc 1 881 2 view .LVU1945
 7004 0002 0720     		movs	r0, #7
 7005              	.LVL498:
 881:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7006              		.loc 1 881 2 view .LVU1946
 7007 0004 FFF7FEFF 		bl	roll_down
 7008              	.LVL499:
 882:src/xeq.c     **** 	set_was_complex();
 7009              		.loc 1 882 2 is_stmt 1 view .LVU1947
 7010 0008 0720     		movs	r0, #7
 7011 000a FFF7FEFF 		bl	roll_down
 7012              	.LVL500:
 883:src/xeq.c     **** }
 7013              		.loc 1 883 2 view .LVU1948
 7014              	.LBB1795:
 7015              	.LBI1795:
 529:src/xeq.c     **** 	State2.wascomplex = 1;
 7016              		.loc 1 529 13 view .LVU1949
 7017              	.LBB1796:
 530:src/xeq.c     **** }
 7018              		.loc 1 530 2 view .LVU1950
 530:src/xeq.c     **** }
 7019              		.loc 1 530 20 is_stmt 0 view .LVU1951
 7020 000e 034B     		ldr	r3, .L567
 7021 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7022 0012 0121     		movs	r1, #1
 7023 0014 61F38712 		bfi	r2, r1, #6, #2
 7024 0018 1A75     		strb	r2, [r3, #20]
 7025              	.LBE1796:
 7026              	.LBE1795:
 884:src/xeq.c     **** 
 7027              		.loc 1 884 1 view .LVU1952
ARM GAS  /tmp/cciWh9P3.s 			page 252


 7028 001a 08BD     		pop	{r3, pc}
 7029              	.L568:
 7030              		.align	2
 7031              	.L567:
 7032 001c 00000000 		.word	StateWhileOn
 7033              		.cfi_endproc
 7034              	.LFE72:
 7036              		.section	.text.roll_up,"ax",%progbits
 7037              		.align	1
 7038              		.p2align 2,,3
 7039              		.global	roll_up
 7040              		.syntax unified
 7041              		.thumb
 7042              		.thumb_func
 7043              		.fpu fpv4-sp-d16
 7045              	roll_up:
 7046              	.LVL501:
 7047              	.LFB71:
 873:src/xeq.c     **** 	REGISTER r;
 7048              		.loc 1 873 29 is_stmt 1 view -0
 7049              		.cfi_startproc
 7050              		@ args = 0, pretend = 0, frame = 16
 7051              		@ frame_needed = 0, uses_anonymous_args = 0
 874:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 7052              		.loc 1 874 2 view .LVU1954
 875:src/xeq.c     **** 	lift();
 7053              		.loc 1 875 2 view .LVU1955
 873:src/xeq.c     **** 	REGISTER r;
 7054              		.loc 1 873 29 is_stmt 0 view .LVU1956
 7055 0000 30B5     		push	{r4, r5, lr}
 7056              		.cfi_def_cfa_offset 12
 7057              		.cfi_offset 4, -12
 7058              		.cfi_offset 5, -8
 7059              		.cfi_offset 14, -4
 7060              	.LBB1797:
 7061              	.LBB1798:
 7062              	.LBB1799:
 7063              	.LBB1800:
 932:src/xeq.c     **** }
 7064              		.loc 1 932 24 view .LVU1957
 7065 0002 124D     		ldr	r5, .L575
 7066              	.LBE1800:
 7067              	.LBE1799:
 7068              	.LBE1798:
 7069              	.LBE1797:
 873:src/xeq.c     **** 	REGISTER r;
 7070              		.loc 1 873 29 view .LVU1958
 7071 0004 85B0     		sub	sp, sp, #20
 7072              		.cfi_def_cfa_offset 32
 875:src/xeq.c     **** 	lift();
 7073              		.loc 1 875 14 view .LVU1959
 7074 0006 FFF7FEFF 		bl	get_stack_top
 7075              	.LVL502:
 7076              	.LBB1807:
 7077              	.LBB1805:
 7078              	.LBB1803:
 7079              	.LBB1801:
ARM GAS  /tmp/cciWh9P3.s 			page 253


 932:src/xeq.c     **** }
 7080              		.loc 1 932 24 view .LVU1960
 7081 000a 2B68     		ldr	r3, [r5]
 7082 000c B3F8E837 		ldrh	r3, [r3, #2024]
 7083 0010 44F20104 		movw	r4, #16385
 7084              	.LBE1801:
 7085              	.LBE1803:
 717:src/xeq.c     **** }
 7086              		.loc 1 717 2 view .LVU1961
 7087 0014 2340     		ands	r3, r3, r4
 7088 0016 B3F5804F 		cmp	r3, #16384
 7089              	.LBE1805:
 7090              	.LBE1807:
 875:src/xeq.c     **** 	lift();
 7091              		.loc 1 875 14 view .LVU1962
 7092 001a 0146     		mov	r1, r0
 7093              	.LVL503:
 7094              	.LBB1808:
 7095              	.LBI1797:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7096              		.loc 1 716 6 is_stmt 1 view .LVU1963
 7097              	.LBB1806:
 717:src/xeq.c     **** }
 7098              		.loc 1 717 2 view .LVU1964
 7099              	.LBB1804:
 7100              	.LBI1799:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7101              		.loc 1 931 5 view .LVU1965
 7102              	.LBB1802:
 932:src/xeq.c     **** }
 7103              		.loc 1 932 2 view .LVU1966
 7104              	.LBE1802:
 7105              	.LBE1804:
 717:src/xeq.c     **** }
 7106              		.loc 1 717 2 is_stmt 0 view .LVU1967
 7107 001c 0CBF     		ite	eq
 7108 001e 1022     		moveq	r2, #16
 7109 0020 0822     		movne	r2, #8
 7110 0022 6846     		mov	r0, sp
 7111              	.LVL504:
 717:src/xeq.c     **** }
 7112              		.loc 1 717 2 view .LVU1968
 7113 0024 FFF7FEFF 		bl	xcopy
 7114              	.LVL505:
 717:src/xeq.c     **** }
 7115              		.loc 1 717 2 view .LVU1969
 7116              	.LBE1806:
 7117              	.LBE1808:
 876:src/xeq.c     **** 	copyreg(StackBase, &r);
 7118              		.loc 1 876 2 is_stmt 1 view .LVU1970
 7119 0028 FFF7FEFF 		bl	lift
 7120              	.LVL506:
 877:src/xeq.c     **** }
 7121              		.loc 1 877 2 view .LVU1971
 7122              	.LBB1809:
 7123              	.LBB1810:
 7124              	.LBB1811:
ARM GAS  /tmp/cciWh9P3.s 			page 254


 7125              	.LBB1812:
 932:src/xeq.c     **** }
 7126              		.loc 1 932 24 is_stmt 0 view .LVU1972
 7127 002c 2B68     		ldr	r3, [r5]
 7128              	.LBE1812:
 7129              	.LBE1811:
 7130              	.LBE1810:
 7131              	.LBE1809:
 877:src/xeq.c     **** }
 7132              		.loc 1 877 2 view .LVU1973
 7133 002e 084A     		ldr	r2, .L575+4
 7134              	.LVL507:
 7135              	.LBB1816:
 7136              	.LBI1809:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7137              		.loc 1 716 6 is_stmt 1 view .LVU1974
 7138              	.LBB1815:
 717:src/xeq.c     **** }
 7139              		.loc 1 717 2 view .LVU1975
 7140              	.LBB1814:
 7141              	.LBI1811:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7142              		.loc 1 931 5 view .LVU1976
 7143              	.LBB1813:
 932:src/xeq.c     **** }
 7144              		.loc 1 932 2 view .LVU1977
 932:src/xeq.c     **** }
 7145              		.loc 1 932 24 is_stmt 0 view .LVU1978
 7146 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7147              	.LBE1813:
 7148              	.LBE1814:
 717:src/xeq.c     **** }
 7149              		.loc 1 717 2 view .LVU1979
 7150 0034 1068     		ldr	r0, [r2]
 7151 0036 1C40     		ands	r4, r4, r3
 7152 0038 B4F5804F 		cmp	r4, #16384
 7153 003c 6946     		mov	r1, sp
 7154 003e 0CBF     		ite	eq
 7155 0040 1022     		moveq	r2, #16
 7156              	.LVL508:
 717:src/xeq.c     **** }
 7157              		.loc 1 717 2 view .LVU1980
 7158 0042 0822     		movne	r2, #8
 7159 0044 FFF7FEFF 		bl	xcopy
 7160              	.LVL509:
 717:src/xeq.c     **** }
 7161              		.loc 1 717 2 view .LVU1981
 7162              	.LBE1815:
 7163              	.LBE1816:
 878:src/xeq.c     **** 
 7164              		.loc 1 878 1 view .LVU1982
 7165 0048 05B0     		add	sp, sp, #20
 7166              		.cfi_def_cfa_offset 12
 7167              		@ sp needed
 7168 004a 30BD     		pop	{r4, r5, pc}
 7169              	.L576:
 7170              		.align	2
ARM GAS  /tmp/cciWh9P3.s 			page 255


 7171              	.L575:
 7172 004c 00000000 		.word	main_ram
 7173 0050 00000000 		.word	StackBase
 7174              		.cfi_endproc
 7175              	.LFE71:
 7177              		.section	.text.cpx_roll_up,"ax",%progbits
 7178              		.align	1
 7179              		.p2align 2,,3
 7180              		.global	cpx_roll_up
 7181              		.syntax unified
 7182              		.thumb
 7183              		.thumb_func
 7184              		.fpu fpv4-sp-d16
 7186              	cpx_roll_up:
 7187              	.LVL510:
 7188              	.LFB73:
 886:src/xeq.c     **** 	roll_up(OP_RUP);
 7189              		.loc 1 886 33 is_stmt 1 view -0
 7190              		.cfi_startproc
 7191              		@ args = 0, pretend = 0, frame = 0
 7192              		@ frame_needed = 0, uses_anonymous_args = 0
 887:src/xeq.c     **** 	roll_up(OP_RUP);
 7193              		.loc 1 887 2 view .LVU1984
 886:src/xeq.c     **** 	roll_up(OP_RUP);
 7194              		.loc 1 886 33 is_stmt 0 view .LVU1985
 7195 0000 08B5     		push	{r3, lr}
 7196              		.cfi_def_cfa_offset 8
 7197              		.cfi_offset 3, -8
 7198              		.cfi_offset 14, -4
 887:src/xeq.c     **** 	roll_up(OP_RUP);
 7199              		.loc 1 887 2 view .LVU1986
 7200 0002 0820     		movs	r0, #8
 7201              	.LVL511:
 887:src/xeq.c     **** 	roll_up(OP_RUP);
 7202              		.loc 1 887 2 view .LVU1987
 7203 0004 FFF7FEFF 		bl	roll_up
 7204              	.LVL512:
 888:src/xeq.c     **** 	set_was_complex();
 7205              		.loc 1 888 2 is_stmt 1 view .LVU1988
 7206 0008 0820     		movs	r0, #8
 7207 000a FFF7FEFF 		bl	roll_up
 7208              	.LVL513:
 889:src/xeq.c     **** }
 7209              		.loc 1 889 2 view .LVU1989
 7210              	.LBB1817:
 7211              	.LBI1817:
 529:src/xeq.c     **** 	State2.wascomplex = 1;
 7212              		.loc 1 529 13 view .LVU1990
 7213              	.LBB1818:
 530:src/xeq.c     **** }
 7214              		.loc 1 530 2 view .LVU1991
 530:src/xeq.c     **** }
 7215              		.loc 1 530 20 is_stmt 0 view .LVU1992
 7216 000e 034B     		ldr	r3, .L579
 7217 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7218 0012 0121     		movs	r1, #1
 7219 0014 61F38712 		bfi	r2, r1, #6, #2
ARM GAS  /tmp/cciWh9P3.s 			page 256


 7220 0018 1A75     		strb	r2, [r3, #20]
 7221              	.LBE1818:
 7222              	.LBE1817:
 890:src/xeq.c     **** 
 7223              		.loc 1 890 1 view .LVU1993
 7224 001a 08BD     		pop	{r3, pc}
 7225              	.L580:
 7226              		.align	2
 7227              	.L579:
 7228 001c 00000000 		.word	StateWhileOn
 7229              		.cfi_endproc
 7230              	.LFE73:
 7232              		.section	.text.fill,"ax",%progbits
 7233              		.align	1
 7234              		.p2align 2,,3
 7235              		.global	fill
 7236              		.syntax unified
 7237              		.thumb
 7238              		.thumb_func
 7239              		.fpu fpv4-sp-d16
 7241              	fill:
 7242              	.LVL514:
 7243              	.LFB76:
 909:src/xeq.c     **** 	const int n = stack_size();
 7244              		.loc 1 909 26 is_stmt 1 view -0
 7245              		.cfi_startproc
 7246              		@ args = 0, pretend = 0, frame = 0
 7247              		@ frame_needed = 0, uses_anonymous_args = 0
 910:src/xeq.c     **** 	int i;
 7248              		.loc 1 910 2 view .LVU1995
 7249              	.LBB1819:
 7250              	.LBI1819:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7251              		.loc 1 702 5 view .LVU1996
 7252              	.LBB1820:
 703:src/xeq.c     **** 		return 4;
 7253              		.loc 1 703 2 view .LVU1997
 7254              	.LBE1820:
 7255              	.LBE1819:
 909:src/xeq.c     **** 	const int n = stack_size();
 7256              		.loc 1 909 26 is_stmt 0 view .LVU1998
 7257 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7258              		.cfi_def_cfa_offset 24
 7259              		.cfi_offset 4, -24
 7260              		.cfi_offset 5, -20
 7261              		.cfi_offset 6, -16
 7262              		.cfi_offset 7, -12
 7263              		.cfi_offset 8, -8
 7264              		.cfi_offset 14, -4
 7265              	.LBB1826:
 7266              	.LBB1823:
 703:src/xeq.c     **** 		return 4;
 7267              		.loc 1 703 8 view .LVU1999
 7268 0004 174E     		ldr	r6, .L592
 7269 0006 3368     		ldr	r3, [r6]
 703:src/xeq.c     **** 		return 4;
 7270              		.loc 1 703 6 view .LVU2000
ARM GAS  /tmp/cciWh9P3.s 			page 257


 7271 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 7272              		.loc 1 703 5 view .LVU2001
 7273 000c 1207     		lsls	r2, r2, #28
 7274 000e 27D5     		bpl	.L585
 7275              	.LBB1821:
 7276              	.LBI1821:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 7277              		.loc 1 181 5 is_stmt 1 view .LVU2002
 7278              	.LBB1822:
 182:src/xeq.c     **** }
 7279              		.loc 1 182 2 view .LVU2003
 182:src/xeq.c     **** }
 7280              		.loc 1 182 9 is_stmt 0 view .LVU2004
 7281 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7282              	.LBE1822:
 7283              	.LBE1821:
 703:src/xeq.c     **** 		return 4;
 7284              		.loc 1 703 27 view .LVU2005
 7285 0014 9B0B     		lsrs	r3, r3, #14
 7286 0016 032B     		cmp	r3, #3
 7287 0018 1AD0     		beq	.L591
 705:src/xeq.c     **** }
 7288              		.loc 1 705 9 view .LVU2006
 7289 001a 0825     		movs	r5, #8
 7290              	.L582:
 7291              	.LVL515:
 705:src/xeq.c     **** }
 7292              		.loc 1 705 9 view .LVU2007
 7293              	.LBE1823:
 7294              	.LBE1826:
 911:src/xeq.c     **** 
 7295              		.loc 1 911 2 is_stmt 1 view .LVU2008
 913:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7296              		.loc 1 913 2 view .LVU2009
 913:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7297              		.loc 1 913 12 view .LVU2010
 7298 001c 124F     		ldr	r7, .L592+4
 7299 001e 6435     		adds	r5, r5, #100
 7300              	.LVL516:
 7301              	.LBB1827:
 7302              	.LBB1824:
 704:src/xeq.c     **** 	return 8;
 7303              		.loc 1 704 10 is_stmt 0 view .LVU2011
 7304 0020 6524     		movs	r4, #101
 7305              	.LBE1824:
 7306              	.LBE1827:
 7307              	.LBB1828:
 7308              	.LBB1829:
 7309              	.LBB1830:
 7310              	.LBB1831:
 932:src/xeq.c     **** }
 7311              		.loc 1 932 24 view .LVU2012
 7312 0022 44F20108 		movw	r8, #16385
 7313              	.LVL517:
 7314              	.L584:
 932:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 258


 7315              		.loc 1 932 24 view .LVU2013
 7316              	.LBE1831:
 7317              	.LBE1830:
 7318              	.LBE1829:
 7319              	.LBE1828:
 914:src/xeq.c     **** }
 7320              		.loc 1 914 3 is_stmt 1 view .LVU2014
 7321              	.LBB1837:
 7322              	.LBI1837:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7323              		.loc 1 708 11 view .LVU2015
 7324              	.LBB1838:
 709:src/xeq.c     **** }
 7325              		.loc 1 709 2 view .LVU2016
 709:src/xeq.c     **** }
 7326              		.loc 1 709 9 is_stmt 0 view .LVU2017
 7327 0026 2046     		mov	r0, r4
 7328 0028 FFF7FEFF 		bl	get_reg_n
 7329              	.LVL518:
 709:src/xeq.c     **** }
 7330              		.loc 1 709 9 view .LVU2018
 7331              	.LBE1838:
 7332              	.LBE1837:
 7333              	.LBB1839:
 7334              	.LBI1828:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7335              		.loc 1 716 6 is_stmt 1 view .LVU2019
 7336              	.LBB1836:
 717:src/xeq.c     **** }
 7337              		.loc 1 717 2 view .LVU2020
 7338              	.LBB1834:
 7339              	.LBI1830:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7340              		.loc 1 931 5 view .LVU2021
 7341              	.LBB1832:
 932:src/xeq.c     **** }
 7342              		.loc 1 932 2 view .LVU2022
 932:src/xeq.c     **** }
 7343              		.loc 1 932 24 is_stmt 0 view .LVU2023
 7344 002c 3368     		ldr	r3, [r6]
 7345              	.LBE1832:
 7346              	.LBE1834:
 717:src/xeq.c     **** }
 7347              		.loc 1 717 2 view .LVU2024
 7348 002e 3968     		ldr	r1, [r7]
 7349              	.LBB1835:
 7350              	.LBB1833:
 932:src/xeq.c     **** }
 7351              		.loc 1 932 24 view .LVU2025
 7352 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7353              	.LBE1833:
 7354              	.LBE1835:
 717:src/xeq.c     **** }
 7355              		.loc 1 717 2 view .LVU2026
 7356 0034 08EA0303 		and	r3, r8, r3
 7357 0038 B3F5804F 		cmp	r3, #16384
 7358 003c 0CBF     		ite	eq
ARM GAS  /tmp/cciWh9P3.s 			page 259


 7359 003e 1022     		moveq	r2, #16
 7360 0040 0822     		movne	r2, #8
 7361 0042 0134     		adds	r4, r4, #1
 7362              	.LVL519:
 717:src/xeq.c     **** }
 7363              		.loc 1 717 2 view .LVU2027
 7364 0044 FFF7FEFF 		bl	xcopy
 7365              	.LVL520:
 717:src/xeq.c     **** }
 7366              		.loc 1 717 2 view .LVU2028
 7367              	.LBE1836:
 7368              	.LBE1839:
 913:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7369              		.loc 1 913 17 is_stmt 1 view .LVU2029
 913:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7370              		.loc 1 913 12 view .LVU2030
 913:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7371              		.loc 1 913 2 is_stmt 0 view .LVU2031
 7372 0048 AC42     		cmp	r4, r5
 7373 004a ECD1     		bne	.L584
 915:src/xeq.c     **** 
 7374              		.loc 1 915 1 view .LVU2032
 7375 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7376              	.LVL521:
 7377              	.L591:
 7378              	.LBB1840:
 7379              	.LBB1825:
 703:src/xeq.c     **** 		return 4;
 7380              		.loc 1 703 44 view .LVU2033
 7381 0050 064B     		ldr	r3, .L592+8
 703:src/xeq.c     **** 		return 4;
 7382              		.loc 1 703 41 view .LVU2034
 7383 0052 93F90130 		ldrsb	r3, [r3, #1]
 704:src/xeq.c     **** 	return 8;
 7384              		.loc 1 704 10 view .LVU2035
 7385 0056 002B     		cmp	r3, #0
 7386 0058 B4BF     		ite	lt
 7387 005a 0825     		movlt	r5, #8
 7388 005c 0425     		movge	r5, #4
 7389 005e DDE7     		b	.L582
 7390              	.L585:
 7391 0060 0425     		movs	r5, #4
 7392 0062 DBE7     		b	.L582
 7393              	.L593:
 7394              		.align	2
 7395              	.L592:
 7396 0064 00000000 		.word	main_ram
 7397 0068 00000000 		.word	StackBase
 7398 006c 00000000 		.word	XromParams
 7399              	.LBE1825:
 7400              	.LBE1840:
 7401              		.cfi_endproc
 7402              	.LFE76:
 7404              		.section	.text.lower2,"ax",%progbits
 7405              		.align	1
 7406              		.p2align 2,,3
 7407              		.syntax unified
ARM GAS  /tmp/cciWh9P3.s 			page 260


 7408              		.thumb
 7409              		.thumb_func
 7410              		.fpu fpv4-sp-d16
 7412              	lower2:
 7413              	.LFB54:
 763:src/xeq.c     **** 	const int n = stack_size();
 7414              		.loc 1 763 26 is_stmt 1 view -0
 7415              		.cfi_startproc
 7416              		@ args = 0, pretend = 0, frame = 0
 7417              		@ frame_needed = 0, uses_anonymous_args = 0
 764:src/xeq.c     **** 	int i;
 7418              		.loc 1 764 2 view .LVU2037
 7419              	.LBB1841:
 7420              	.LBI1841:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7421              		.loc 1 702 5 view .LVU2038
 7422              	.LBB1842:
 703:src/xeq.c     **** 		return 4;
 7423              		.loc 1 703 2 view .LVU2039
 7424              	.LBE1842:
 7425              	.LBE1841:
 763:src/xeq.c     **** 	const int n = stack_size();
 7426              		.loc 1 763 26 is_stmt 0 view .LVU2040
 7427 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7428              		.cfi_def_cfa_offset 24
 7429              		.cfi_offset 4, -24
 7430              		.cfi_offset 5, -20
 7431              		.cfi_offset 6, -16
 7432              		.cfi_offset 7, -12
 7433              		.cfi_offset 8, -8
 7434              		.cfi_offset 14, -4
 7435              	.LBB1848:
 7436              	.LBB1845:
 703:src/xeq.c     **** 		return 4;
 7437              		.loc 1 703 8 view .LVU2041
 7438 0004 194F     		ldr	r7, .L605
 7439 0006 3B68     		ldr	r3, [r7]
 703:src/xeq.c     **** 		return 4;
 7440              		.loc 1 703 6 view .LVU2042
 7441 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 7442              		.loc 1 703 5 view .LVU2043
 7443 000c 1207     		lsls	r2, r2, #28
 7444 000e 2BD5     		bpl	.L598
 7445              	.LBB1843:
 7446              	.LBI1843:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 7447              		.loc 1 181 5 is_stmt 1 view .LVU2044
 7448              	.LBB1844:
 182:src/xeq.c     **** }
 7449              		.loc 1 182 2 view .LVU2045
 182:src/xeq.c     **** }
 7450              		.loc 1 182 9 is_stmt 0 view .LVU2046
 7451 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7452              	.LBE1844:
 7453              	.LBE1843:
 703:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/cciWh9P3.s 			page 261


 7454              		.loc 1 703 27 view .LVU2047
 7455 0014 9B0B     		lsrs	r3, r3, #14
 7456 0016 032B     		cmp	r3, #3
 7457 0018 1ED0     		beq	.L604
 705:src/xeq.c     **** }
 7458              		.loc 1 705 9 view .LVU2048
 7459 001a 0826     		movs	r6, #8
 7460              	.L595:
 7461              	.LVL522:
 705:src/xeq.c     **** }
 7462              		.loc 1 705 9 view .LVU2049
 7463              	.LBE1845:
 7464              	.LBE1848:
 765:src/xeq.c     **** 
 7465              		.loc 1 765 2 is_stmt 1 view .LVU2050
 767:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7466              		.loc 1 767 2 view .LVU2051
 767:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7467              		.loc 1 767 12 view .LVU2052
 7468 001c 6236     		adds	r6, r6, #98
 7469              	.LVL523:
 7470              	.LBB1849:
 7471              	.LBB1846:
 704:src/xeq.c     **** 	return 8;
 7472              		.loc 1 704 10 is_stmt 0 view .LVU2053
 7473 001e 6424     		movs	r4, #100
 7474              	.LBE1846:
 7475              	.LBE1849:
 7476              	.LBB1850:
 7477              	.LBB1851:
 7478              	.LBB1852:
 7479              	.LBB1853:
 932:src/xeq.c     **** }
 7480              		.loc 1 932 24 view .LVU2054
 7481 0020 44F20108 		movw	r8, #16385
 7482              	.LVL524:
 7483              	.L597:
 932:src/xeq.c     **** }
 7484              		.loc 1 932 24 view .LVU2055
 7485              	.LBE1853:
 7486              	.LBE1852:
 7487              	.LBE1851:
 7488              	.LBE1850:
 768:src/xeq.c     **** }
 7489              		.loc 1 768 3 is_stmt 1 discriminator 3 view .LVU2056
 7490              	.LBB1860:
 7491              	.LBI1860:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7492              		.loc 1 708 11 discriminator 3 view .LVU2057
 7493              	.LBB1861:
 709:src/xeq.c     **** }
 7494              		.loc 1 709 2 discriminator 3 view .LVU2058
 709:src/xeq.c     **** }
 7495              		.loc 1 709 9 is_stmt 0 discriminator 3 view .LVU2059
 7496 0024 2046     		mov	r0, r4
 7497 0026 FFF7FEFF 		bl	get_reg_n
 7498              	.LVL525:
ARM GAS  /tmp/cciWh9P3.s 			page 262


 7499 002a 0546     		mov	r5, r0
 7500              	.LBE1861:
 7501              	.LBE1860:
 7502              	.LBB1862:
 7503              	.LBB1863:
 7504 002c A01C     		adds	r0, r4, #2
 7505              	.LVL526:
 709:src/xeq.c     **** }
 7506              		.loc 1 709 9 discriminator 3 view .LVU2060
 7507              	.LBE1863:
 7508              	.LBI1862:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7509              		.loc 1 708 11 is_stmt 1 discriminator 3 view .LVU2061
 7510              	.LBB1864:
 709:src/xeq.c     **** }
 7511              		.loc 1 709 2 discriminator 3 view .LVU2062
 709:src/xeq.c     **** }
 7512              		.loc 1 709 9 is_stmt 0 discriminator 3 view .LVU2063
 7513 002e FFF7FEFF 		bl	get_reg_n
 7514              	.LVL527:
 709:src/xeq.c     **** }
 7515              		.loc 1 709 9 discriminator 3 view .LVU2064
 7516              	.LBE1864:
 7517              	.LBE1862:
 7518              	.LBB1866:
 7519              	.LBB1858:
 7520              	.LBB1856:
 7521              	.LBB1854:
 932:src/xeq.c     **** }
 7522              		.loc 1 932 24 discriminator 3 view .LVU2065
 7523 0032 3B68     		ldr	r3, [r7]
 7524 0034 B3F8E837 		ldrh	r3, [r3, #2024]
 7525              	.LBE1854:
 7526              	.LBE1856:
 717:src/xeq.c     **** }
 7527              		.loc 1 717 2 discriminator 3 view .LVU2066
 7528 0038 08EA0303 		and	r3, r8, r3
 7529 003c B3F5804F 		cmp	r3, #16384
 7530              	.LBE1858:
 7531              	.LBE1866:
 7532              	.LBB1867:
 7533              	.LBB1865:
 709:src/xeq.c     **** }
 7534              		.loc 1 709 9 discriminator 3 view .LVU2067
 7535 0040 0146     		mov	r1, r0
 7536              	.LVL528:
 709:src/xeq.c     **** }
 7537              		.loc 1 709 9 discriminator 3 view .LVU2068
 7538              	.LBE1865:
 7539              	.LBE1867:
 7540              	.LBB1868:
 7541              	.LBI1850:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7542              		.loc 1 716 6 is_stmt 1 discriminator 3 view .LVU2069
 7543              	.LBB1859:
 717:src/xeq.c     **** }
 7544              		.loc 1 717 2 discriminator 3 view .LVU2070
ARM GAS  /tmp/cciWh9P3.s 			page 263


 7545              	.LBB1857:
 7546              	.LBI1852:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7547              		.loc 1 931 5 discriminator 3 view .LVU2071
 7548              	.LBB1855:
 932:src/xeq.c     **** }
 7549              		.loc 1 932 2 discriminator 3 view .LVU2072
 7550              	.LBE1855:
 7551              	.LBE1857:
 717:src/xeq.c     **** }
 7552              		.loc 1 717 2 is_stmt 0 discriminator 3 view .LVU2073
 7553 0042 0CBF     		ite	eq
 7554 0044 1022     		moveq	r2, #16
 7555 0046 0822     		movne	r2, #8
 7556 0048 2846     		mov	r0, r5
 7557              	.LVL529:
 717:src/xeq.c     **** }
 7558              		.loc 1 717 2 discriminator 3 view .LVU2074
 7559 004a 0134     		adds	r4, r4, #1
 7560              	.LVL530:
 717:src/xeq.c     **** }
 7561              		.loc 1 717 2 discriminator 3 view .LVU2075
 7562 004c FFF7FEFF 		bl	xcopy
 7563              	.LVL531:
 717:src/xeq.c     **** }
 7564              		.loc 1 717 2 discriminator 3 view .LVU2076
 7565              	.LBE1859:
 7566              	.LBE1868:
 767:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7567              		.loc 1 767 17 is_stmt 1 discriminator 3 view .LVU2077
 767:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7568              		.loc 1 767 12 discriminator 3 view .LVU2078
 767:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7569              		.loc 1 767 2 is_stmt 0 discriminator 3 view .LVU2079
 7570 0050 B442     		cmp	r4, r6
 7571 0052 E7D1     		bne	.L597
 769:src/xeq.c     **** 
 7572              		.loc 1 769 1 view .LVU2080
 7573 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7574              	.LVL532:
 7575              	.L604:
 7576              	.LBB1869:
 7577              	.LBB1847:
 703:src/xeq.c     **** 		return 4;
 7578              		.loc 1 703 44 view .LVU2081
 7579 0058 054B     		ldr	r3, .L605+4
 703:src/xeq.c     **** 		return 4;
 7580              		.loc 1 703 41 view .LVU2082
 7581 005a 93F90130 		ldrsb	r3, [r3, #1]
 704:src/xeq.c     **** 	return 8;
 7582              		.loc 1 704 10 view .LVU2083
 7583 005e 002B     		cmp	r3, #0
 7584 0060 B4BF     		ite	lt
 7585 0062 0826     		movlt	r6, #8
 7586 0064 0426     		movge	r6, #4
 7587 0066 D9E7     		b	.L595
 7588              	.L598:
ARM GAS  /tmp/cciWh9P3.s 			page 264


 7589 0068 0426     		movs	r6, #4
 7590 006a D7E7     		b	.L595
 7591              	.L606:
 7592              		.align	2
 7593              	.L605:
 7594 006c 00000000 		.word	main_ram
 7595 0070 00000000 		.word	XromParams
 7596              	.LBE1847:
 7597              	.LBE1869:
 7598              		.cfi_endproc
 7599              	.LFE54:
 7601              		.section	.text.drop,"ax",%progbits
 7602              		.align	1
 7603              		.p2align 2,,3
 7604              		.global	drop
 7605              		.syntax unified
 7606              		.thumb
 7607              		.thumb_func
 7608              		.fpu fpv4-sp-d16
 7610              	drop:
 7611              	.LVL533:
 7612              	.LFB77:
 917:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7613              		.loc 1 917 26 is_stmt 1 view -0
 7614              		.cfi_startproc
 7615              		@ args = 0, pretend = 0, frame = 0
 7616              		@ frame_needed = 0, uses_anonymous_args = 0
 918:src/xeq.c     **** 		lower2();
 7617              		.loc 1 918 2 view .LVU2085
 918:src/xeq.c     **** 		lower2();
 7618              		.loc 1 918 5 is_stmt 0 view .LVU2086
 7619 0000 0F28     		cmp	r0, #15
 7620 0002 01D0     		beq	.L614
 922:src/xeq.c     **** }
 7621              		.loc 1 922 3 is_stmt 1 view .LVU2087
 7622 0004 FFF7FEBF 		b	lower
 7623              	.LVL534:
 7624              	.L614:
 919:src/xeq.c     **** 		set_was_complex();
 7625              		.loc 1 919 3 view .LVU2088
 917:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7626              		.loc 1 917 26 is_stmt 0 view .LVU2089
 7627 0008 08B5     		push	{r3, lr}
 7628              		.cfi_def_cfa_offset 8
 7629              		.cfi_offset 3, -8
 7630              		.cfi_offset 14, -4
 919:src/xeq.c     **** 		set_was_complex();
 7631              		.loc 1 919 3 view .LVU2090
 7632 000a FFF7FEFF 		bl	lower2
 7633              	.LVL535:
 920:src/xeq.c     **** 	} else
 7634              		.loc 1 920 3 is_stmt 1 view .LVU2091
 7635              	.LBB1870:
 7636              	.LBI1870:
 529:src/xeq.c     **** 	State2.wascomplex = 1;
 7637              		.loc 1 529 13 view .LVU2092
 7638              	.LBB1871:
ARM GAS  /tmp/cciWh9P3.s 			page 265


 530:src/xeq.c     **** }
 7639              		.loc 1 530 2 view .LVU2093
 530:src/xeq.c     **** }
 7640              		.loc 1 530 20 is_stmt 0 view .LVU2094
 7641 000e 034B     		ldr	r3, .L615
 7642 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7643 0012 0121     		movs	r1, #1
 7644 0014 61F38712 		bfi	r2, r1, #6, #2
 7645 0018 1A75     		strb	r2, [r3, #20]
 7646              	.LBE1871:
 7647              	.LBE1870:
 923:src/xeq.c     **** 
 7648              		.loc 1 923 1 view .LVU2095
 7649 001a 08BD     		pop	{r3, pc}
 7650              	.L616:
 7651              		.align	2
 7652              	.L615:
 7653 001c 00000000 		.word	StateWhileOn
 7654              		.cfi_endproc
 7655              	.LFE77:
 7657              		.section	.text.copyreg_n,"ax",%progbits
 7658              		.align	1
 7659              		.p2align 2,,3
 7660              		.global	copyreg_n
 7661              		.syntax unified
 7662              		.thumb
 7663              		.thumb_func
 7664              		.fpu fpv4-sp-d16
 7666              	copyreg_n:
 7667              	.LVL536:
 7668              	.LFB46:
 720:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7669              		.loc 1 720 30 is_stmt 1 view -0
 7670              		.cfi_startproc
 7671              		@ args = 0, pretend = 0, frame = 0
 7672              		@ frame_needed = 0, uses_anonymous_args = 0
 721:src/xeq.c     **** }
 7673              		.loc 1 721 2 view .LVU2097
 720:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7674              		.loc 1 720 30 is_stmt 0 view .LVU2098
 7675 0000 38B5     		push	{r3, r4, r5, lr}
 7676              		.cfi_def_cfa_offset 16
 7677              		.cfi_offset 3, -16
 7678              		.cfi_offset 4, -12
 7679              		.cfi_offset 5, -8
 7680              		.cfi_offset 14, -4
 720:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7681              		.loc 1 720 30 view .LVU2099
 7682 0002 0D46     		mov	r5, r1
 721:src/xeq.c     **** }
 7683              		.loc 1 721 2 view .LVU2100
 7684 0004 FFF7FEFF 		bl	get_reg_n
 7685              	.LVL537:
 721:src/xeq.c     **** }
 7686              		.loc 1 721 2 view .LVU2101
 7687 0008 0446     		mov	r4, r0
 721:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 266


 7688              		.loc 1 721 24 view .LVU2102
 7689 000a 2846     		mov	r0, r5
 7690 000c FFF7FEFF 		bl	get_reg_n
 7691              	.LVL538:
 7692              	.LBB1872:
 7693              	.LBB1873:
 7694              	.LBB1874:
 7695              	.LBB1875:
 932:src/xeq.c     **** }
 7696              		.loc 1 932 24 view .LVU2103
 7697 0010 094B     		ldr	r3, .L621
 7698 0012 1B68     		ldr	r3, [r3]
 7699 0014 B3F8E827 		ldrh	r2, [r3, #2024]
 7700 0018 44F20103 		movw	r3, #16385
 7701              	.LBE1875:
 7702              	.LBE1874:
 717:src/xeq.c     **** }
 7703              		.loc 1 717 2 view .LVU2104
 7704 001c 1340     		ands	r3, r3, r2
 7705 001e B3F5804F 		cmp	r3, #16384
 7706              	.LBE1873:
 7707              	.LBE1872:
 721:src/xeq.c     **** }
 7708              		.loc 1 721 24 view .LVU2105
 7709 0022 0146     		mov	r1, r0
 7710              	.LVL539:
 7711              	.LBB1880:
 7712              	.LBI1872:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7713              		.loc 1 716 6 is_stmt 1 view .LVU2106
 7714              	.LBB1878:
 717:src/xeq.c     **** }
 7715              		.loc 1 717 2 view .LVU2107
 7716              	.LBB1877:
 7717              	.LBI1874:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7718              		.loc 1 931 5 view .LVU2108
 7719              	.LBB1876:
 932:src/xeq.c     **** }
 7720              		.loc 1 932 2 view .LVU2109
 7721              	.LBE1876:
 7722              	.LBE1877:
 717:src/xeq.c     **** }
 7723              		.loc 1 717 2 is_stmt 0 view .LVU2110
 7724 0024 08BF     		it	eq
 7725 0026 1022     		moveq	r2, #16
 7726 0028 2046     		mov	r0, r4
 7727              	.LVL540:
 717:src/xeq.c     **** }
 7728              		.loc 1 717 2 view .LVU2111
 7729 002a 18BF     		it	ne
 7730 002c 0822     		movne	r2, #8
 7731              	.LBE1878:
 7732              	.LBE1880:
 722:src/xeq.c     **** 
 7733              		.loc 1 722 1 view .LVU2112
 7734 002e BDE83840 		pop	{r3, r4, r5, lr}
ARM GAS  /tmp/cciWh9P3.s 			page 267


 7735              		.cfi_restore 14
 7736              		.cfi_restore 5
 7737              		.cfi_restore 4
 7738              		.cfi_restore 3
 7739              		.cfi_def_cfa_offset 0
 7740              	.LVL541:
 7741              	.LBB1881:
 7742              	.LBB1879:
 717:src/xeq.c     **** }
 7743              		.loc 1 717 2 view .LVU2113
 7744 0032 FFF7FEBF 		b	xcopy
 7745              	.LVL542:
 7746              	.L622:
 717:src/xeq.c     **** }
 7747              		.loc 1 717 2 view .LVU2114
 7748 0036 00BF     		.align	2
 7749              	.L621:
 7750 0038 00000000 		.word	main_ram
 7751              	.LBE1879:
 7752              	.LBE1881:
 7753              		.cfi_endproc
 7754              	.LFE46:
 7756              		.section	.text.setlastX,"ax",%progbits
 7757              		.align	1
 7758              		.p2align 2,,3
 7759              		.global	setlastX
 7760              		.syntax unified
 7761              		.thumb
 7762              		.thumb_func
 7763              		.fpu fpv4-sp-d16
 7765              	setlastX:
 7766              	.LFB55:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7767              		.loc 1 772 21 is_stmt 1 view -0
 7768              		.cfi_startproc
 7769              		@ args = 0, pretend = 0, frame = 0
 7770              		@ frame_needed = 0, uses_anonymous_args = 0
 7771              		@ link register save eliminated.
 773:src/xeq.c     **** }
 7772              		.loc 1 773 2 view .LVU2116
 7773 0000 6421     		movs	r1, #100
 7774 0002 6C20     		movs	r0, #108
 7775 0004 FFF7FEBF 		b	copyreg_n
 7776              	.LVL543:
 7777              		.cfi_endproc
 7778              	.LFE55:
 7780              		.section	.text.setlastXY,"ax",%progbits
 7781              		.align	1
 7782              		.p2align 2,,3
 7783              		.syntax unified
 7784              		.thumb
 7785              		.thumb_func
 7786              		.fpu fpv4-sp-d16
 7788              	setlastXY:
 7789              	.LFB56:
 776:src/xeq.c     **** 	setlastX();
 7790              		.loc 1 776 29 view -0
ARM GAS  /tmp/cciWh9P3.s 			page 268


 7791              		.cfi_startproc
 7792              		@ args = 0, pretend = 0, frame = 0
 7793              		@ frame_needed = 0, uses_anonymous_args = 0
 777:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 7794              		.loc 1 777 2 view .LVU2118
 7795              	.LBB1882:
 7796              	.LBI1882:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7797              		.loc 1 772 6 view .LVU2119
 7798              	.LBB1883:
 773:src/xeq.c     **** }
 7799              		.loc 1 773 2 view .LVU2120
 7800              	.LBE1883:
 7801              	.LBE1882:
 776:src/xeq.c     **** 	setlastX();
 7802              		.loc 1 776 29 is_stmt 0 view .LVU2121
 7803 0000 08B5     		push	{r3, lr}
 7804              		.cfi_def_cfa_offset 8
 7805              		.cfi_offset 3, -8
 7806              		.cfi_offset 14, -4
 7807              	.LBB1885:
 7808              	.LBB1884:
 773:src/xeq.c     **** }
 7809              		.loc 1 773 2 view .LVU2122
 7810 0002 6421     		movs	r1, #100
 7811 0004 6C20     		movs	r0, #108
 7812 0006 FFF7FEFF 		bl	copyreg_n
 7813              	.LVL544:
 7814              	.LBE1884:
 7815              	.LBE1885:
 778:src/xeq.c     **** }
 7816              		.loc 1 778 2 is_stmt 1 view .LVU2123
 779:src/xeq.c     **** 
 7817              		.loc 1 779 1 is_stmt 0 view .LVU2124
 7818 000a BDE80840 		pop	{r3, lr}
 7819              		.cfi_restore 14
 7820              		.cfi_restore 3
 7821              		.cfi_def_cfa_offset 0
 778:src/xeq.c     **** }
 7822              		.loc 1 778 2 view .LVU2125
 7823 000e 6521     		movs	r1, #101
 7824 0010 6D20     		movs	r0, #109
 7825 0012 FFF7FEBF 		b	copyreg_n
 7826              	.LVL545:
 7827              		.cfi_endproc
 7828              	.LFE56:
 7830 0016 00BF     		.section	.text.getRegister,"ax",%progbits
 7831              		.align	1
 7832              		.p2align 2,,3
 7833              		.global	getRegister
 7834              		.syntax unified
 7835              		.thumb
 7836              		.thumb_func
 7837              		.fpu fpv4-sp-d16
 7839              	getRegister:
 7840              	.LVL546:
 7841              	.LFB57:
ARM GAS  /tmp/cciWh9P3.s 			page 269


 782:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7842              		.loc 1 782 49 is_stmt 1 view -0
 7843              		.cfi_startproc
 7844              		@ args = 0, pretend = 0, frame = 0
 7845              		@ frame_needed = 0, uses_anonymous_args = 0
 783:src/xeq.c     **** 	if (is_dblmode())
 7846              		.loc 1 783 2 view .LVU2127
 782:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7847              		.loc 1 782 49 is_stmt 0 view .LVU2128
 7848 0000 10B5     		push	{r4, lr}
 7849              		.cfi_def_cfa_offset 8
 7850              		.cfi_offset 4, -8
 7851              		.cfi_offset 14, -4
 782:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7852              		.loc 1 782 49 view .LVU2129
 7853 0002 0446     		mov	r4, r0
 783:src/xeq.c     **** 	if (is_dblmode())
 7854              		.loc 1 783 30 view .LVU2130
 7855 0004 0846     		mov	r0, r1
 7856              	.LVL547:
 783:src/xeq.c     **** 	if (is_dblmode())
 7857              		.loc 1 783 30 view .LVU2131
 7858 0006 FFF7FEFF 		bl	get_reg_n
 7859              	.LVL548:
 784:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7860              		.loc 1 784 2 is_stmt 1 view .LVU2132
 7861              	.LBB1886:
 7862              	.LBI1886:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7863              		.loc 1 931 5 view .LVU2133
 7864              	.LBB1887:
 932:src/xeq.c     **** }
 7865              		.loc 1 932 2 view .LVU2134
 932:src/xeq.c     **** }
 7866              		.loc 1 932 24 is_stmt 0 view .LVU2135
 7867 000a 094B     		ldr	r3, .L631
 7868 000c 1B68     		ldr	r3, [r3]
 7869 000e B3F8E827 		ldrh	r2, [r3, #2024]
 7870 0012 44F20103 		movw	r3, #16385
 7871              	.LBE1887:
 7872              	.LBE1886:
 784:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7873              		.loc 1 784 5 view .LVU2136
 7874 0016 1340     		ands	r3, r3, r2
 7875 0018 B3F5804F 		cmp	r3, #16384
 785:src/xeq.c     **** 	else
 7876              		.loc 1 785 3 view .LVU2137
 7877 001c 2146     		mov	r1, r4
 784:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7878              		.loc 1 784 5 view .LVU2138
 7879 001e 03D0     		beq	.L630
 787:src/xeq.c     **** 	return r;
 7880              		.loc 1 787 3 is_stmt 1 view .LVU2139
 7881 0020 FFF7FEFF 		bl	decimal64ToNumber
 7882              	.LVL549:
 788:src/xeq.c     **** }
 7883              		.loc 1 788 2 view .LVU2140
ARM GAS  /tmp/cciWh9P3.s 			page 270


 789:src/xeq.c     **** 
 7884              		.loc 1 789 1 is_stmt 0 view .LVU2141
 7885 0024 2046     		mov	r0, r4
 7886 0026 10BD     		pop	{r4, pc}
 7887              	.LVL550:
 7888              	.L630:
 785:src/xeq.c     **** 	else
 7889              		.loc 1 785 3 is_stmt 1 view .LVU2142
 7890 0028 FFF7FEFF 		bl	decimal128ToNumber
 7891              	.LVL551:
 788:src/xeq.c     **** }
 7892              		.loc 1 788 2 view .LVU2143
 789:src/xeq.c     **** 
 7893              		.loc 1 789 1 is_stmt 0 view .LVU2144
 7894 002c 2046     		mov	r0, r4
 7895 002e 10BD     		pop	{r4, pc}
 7896              	.LVL552:
 7897              	.L632:
 789:src/xeq.c     **** 
 7898              		.loc 1 789 1 view .LVU2145
 7899              		.align	2
 7900              	.L631:
 7901 0030 00000000 		.word	main_ram
 7902              		.cfi_endproc
 7903              	.LFE57:
 7905              		.section	.text.getX,"ax",%progbits
 7906              		.align	1
 7907              		.p2align 2,,3
 7908              		.global	getX
 7909              		.syntax unified
 7910              		.thumb
 7911              		.thumb_func
 7912              		.fpu fpv4-sp-d16
 7914              	getX:
 7915              	.LVL553:
 7916              	.LFB59:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 7917              		.loc 1 804 31 is_stmt 1 view -0
 7918              		.cfi_startproc
 7919              		@ args = 0, pretend = 0, frame = 0
 7920              		@ frame_needed = 0, uses_anonymous_args = 0
 7921              		@ link register save eliminated.
 805:src/xeq.c     **** }
 7922              		.loc 1 805 2 view .LVU2147
 805:src/xeq.c     **** }
 7923              		.loc 1 805 9 is_stmt 0 view .LVU2148
 7924 0000 6421     		movs	r1, #100
 7925 0002 FFF7FEBF 		b	getRegister
 7926              	.LVL554:
 805:src/xeq.c     **** }
 7927              		.loc 1 805 9 view .LVU2149
 7928              		.cfi_endproc
 7929              	.LFE59:
 7931 0006 00BF     		.section	.text.getY,"ax",%progbits
 7932              		.align	1
 7933              		.p2align 2,,3
 7934              		.global	getY
ARM GAS  /tmp/cciWh9P3.s 			page 271


 7935              		.syntax unified
 7936              		.thumb
 7937              		.thumb_func
 7938              		.fpu fpv4-sp-d16
 7940              	getY:
 7941              	.LVL555:
 7942              	.LFB61:
 812:src/xeq.c     **** 	getRegister(y, regY_idx);
 7943              		.loc 1 812 25 is_stmt 1 view -0
 7944              		.cfi_startproc
 7945              		@ args = 0, pretend = 0, frame = 0
 7946              		@ frame_needed = 0, uses_anonymous_args = 0
 7947              		@ link register save eliminated.
 813:src/xeq.c     **** }
 7948              		.loc 1 813 2 view .LVU2151
 7949 0000 6521     		movs	r1, #101
 7950 0002 FFF7FEBF 		b	getRegister
 7951              	.LVL556:
 813:src/xeq.c     **** }
 7952              		.loc 1 813 2 is_stmt 0 view .LVU2152
 7953              		.cfi_endproc
 7954              	.LFE61:
 7956 0006 00BF     		.section	.text.getXY,"ax",%progbits
 7957              		.align	1
 7958              		.p2align 2,,3
 7959              		.global	getXY
 7960              		.syntax unified
 7961              		.thumb
 7962              		.thumb_func
 7963              		.fpu fpv4-sp-d16
 7965              	getXY:
 7966              	.LVL557:
 7967              	.LFB65:
 834:src/xeq.c     **** 	getX(x);
 7968              		.loc 1 834 40 is_stmt 1 view -0
 7969              		.cfi_startproc
 7970              		@ args = 0, pretend = 0, frame = 0
 7971              		@ frame_needed = 0, uses_anonymous_args = 0
 835:src/xeq.c     **** 	getY(y);
 7972              		.loc 1 835 2 view .LVU2154
 7973              	.LBB1888:
 7974              	.LBI1888:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 7975              		.loc 1 804 12 view .LVU2155
 7976              	.LBB1889:
 805:src/xeq.c     **** }
 7977              		.loc 1 805 2 view .LVU2156
 7978              	.LBE1889:
 7979              	.LBE1888:
 834:src/xeq.c     **** 	getX(x);
 7980              		.loc 1 834 40 is_stmt 0 view .LVU2157
 7981 0000 10B5     		push	{r4, lr}
 7982              		.cfi_def_cfa_offset 8
 7983              		.cfi_offset 4, -8
 7984              		.cfi_offset 14, -4
 834:src/xeq.c     **** 	getX(x);
 7985              		.loc 1 834 40 view .LVU2158
ARM GAS  /tmp/cciWh9P3.s 			page 272


 7986 0002 0C46     		mov	r4, r1
 7987              	.LBB1891:
 7988              	.LBB1890:
 805:src/xeq.c     **** }
 7989              		.loc 1 805 9 view .LVU2159
 7990 0004 6421     		movs	r1, #100
 7991              	.LVL558:
 805:src/xeq.c     **** }
 7992              		.loc 1 805 9 view .LVU2160
 7993 0006 FFF7FEFF 		bl	getRegister
 7994              	.LVL559:
 805:src/xeq.c     **** }
 7995              		.loc 1 805 9 view .LVU2161
 7996              	.LBE1890:
 7997              	.LBE1891:
 836:src/xeq.c     **** }
 7998              		.loc 1 836 2 is_stmt 1 view .LVU2162
 7999              	.LBB1892:
 8000              	.LBI1892:
 812:src/xeq.c     **** 	getRegister(y, regY_idx);
 8001              		.loc 1 812 6 view .LVU2163
 8002              	.LBB1893:
 813:src/xeq.c     **** }
 8003              		.loc 1 813 2 view .LVU2164
 8004 000a 2046     		mov	r0, r4
 8005 000c 6521     		movs	r1, #101
 8006              	.LBE1893:
 8007              	.LBE1892:
 837:src/xeq.c     **** 
 8008              		.loc 1 837 1 is_stmt 0 view .LVU2165
 8009 000e BDE81040 		pop	{r4, lr}
 8010              		.cfi_restore 14
 8011              		.cfi_restore 4
 8012              		.cfi_def_cfa_offset 0
 8013              	.LVL560:
 8014              	.LBB1895:
 8015              	.LBB1894:
 813:src/xeq.c     **** }
 8016              		.loc 1 813 2 view .LVU2166
 8017 0012 FFF7FEBF 		b	getRegister
 8018              	.LVL561:
 813:src/xeq.c     **** }
 8019              		.loc 1 813 2 view .LVU2167
 8020              	.LBE1894:
 8021              	.LBE1895:
 8022              		.cfi_endproc
 8023              	.LFE65:
 8025 0016 00BF     		.section	.text.getXYZ,"ax",%progbits
 8026              		.align	1
 8027              		.p2align 2,,3
 8028              		.global	getXYZ
 8029              		.syntax unified
 8030              		.thumb
 8031              		.thumb_func
 8032              		.fpu fpv4-sp-d16
 8034              	getXYZ:
 8035              	.LVL562:
ARM GAS  /tmp/cciWh9P3.s 			page 273


 8036              	.LFB67:
 844:src/xeq.c     **** 	getXY(x, y);
 8037              		.loc 1 844 55 is_stmt 1 view -0
 8038              		.cfi_startproc
 8039              		@ args = 0, pretend = 0, frame = 0
 8040              		@ frame_needed = 0, uses_anonymous_args = 0
 845:src/xeq.c     **** 	getZ(z);
 8041              		.loc 1 845 2 view .LVU2169
 844:src/xeq.c     **** 	getXY(x, y);
 8042              		.loc 1 844 55 is_stmt 0 view .LVU2170
 8043 0000 38B5     		push	{r3, r4, r5, lr}
 8044              		.cfi_def_cfa_offset 16
 8045              		.cfi_offset 3, -16
 8046              		.cfi_offset 4, -12
 8047              		.cfi_offset 5, -8
 8048              		.cfi_offset 14, -4
 844:src/xeq.c     **** 	getXY(x, y);
 8049              		.loc 1 844 55 view .LVU2171
 8050 0002 0D46     		mov	r5, r1
 8051              	.LVL563:
 8052              	.LBB1896:
 8053              	.LBI1896:
 834:src/xeq.c     **** 	getX(x);
 8054              		.loc 1 834 6 is_stmt 1 view .LVU2172
 8055              	.LBE1896:
 835:src/xeq.c     **** 	getY(y);
 8056              		.loc 1 835 2 view .LVU2173
 8057              	.LBB1903:
 8058              	.LBB1897:
 8059              	.LBI1897:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8060              		.loc 1 804 12 view .LVU2174
 8061              	.LBB1898:
 805:src/xeq.c     **** }
 8062              		.loc 1 805 2 view .LVU2175
 805:src/xeq.c     **** }
 8063              		.loc 1 805 9 is_stmt 0 view .LVU2176
 8064 0004 6421     		movs	r1, #100
 8065              	.LVL564:
 805:src/xeq.c     **** }
 8066              		.loc 1 805 9 view .LVU2177
 8067              	.LBE1898:
 8068              	.LBE1897:
 8069              	.LBE1903:
 844:src/xeq.c     **** 	getXY(x, y);
 8070              		.loc 1 844 55 view .LVU2178
 8071 0006 1446     		mov	r4, r2
 8072              	.LBB1904:
 8073              	.LBB1900:
 8074              	.LBB1899:
 805:src/xeq.c     **** }
 8075              		.loc 1 805 9 view .LVU2179
 8076 0008 FFF7FEFF 		bl	getRegister
 8077              	.LVL565:
 805:src/xeq.c     **** }
 8078              		.loc 1 805 9 view .LVU2180
 8079              	.LBE1899:
ARM GAS  /tmp/cciWh9P3.s 			page 274


 8080              	.LBE1900:
 8081              	.LBE1904:
 836:src/xeq.c     **** }
 8082              		.loc 1 836 2 is_stmt 1 view .LVU2181
 8083              	.LBB1905:
 8084              	.LBB1901:
 8085              	.LBI1901:
 812:src/xeq.c     **** 	getRegister(y, regY_idx);
 8086              		.loc 1 812 6 view .LVU2182
 8087              	.LBB1902:
 813:src/xeq.c     **** }
 8088              		.loc 1 813 2 view .LVU2183
 8089 000c 2846     		mov	r0, r5
 8090 000e 6521     		movs	r1, #101
 8091 0010 FFF7FEFF 		bl	getRegister
 8092              	.LVL566:
 813:src/xeq.c     **** }
 8093              		.loc 1 813 2 is_stmt 0 view .LVU2184
 8094              	.LBE1902:
 8095              	.LBE1901:
 8096              	.LBE1905:
 846:src/xeq.c     **** }
 8097              		.loc 1 846 2 is_stmt 1 view .LVU2185
 8098              	.LBB1906:
 8099              	.LBI1906:
 820:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8100              		.loc 1 820 13 view .LVU2186
 8101              	.LBB1907:
 821:src/xeq.c     **** }
 8102              		.loc 1 821 2 view .LVU2187
 8103 0014 2046     		mov	r0, r4
 8104 0016 6621     		movs	r1, #102
 8105              	.LBE1907:
 8106              	.LBE1906:
 847:src/xeq.c     **** 
 8107              		.loc 1 847 1 is_stmt 0 view .LVU2188
 8108 0018 BDE83840 		pop	{r3, r4, r5, lr}
 8109              		.cfi_restore 14
 8110              		.cfi_restore 5
 8111              		.cfi_restore 4
 8112              		.cfi_restore 3
 8113              		.cfi_def_cfa_offset 0
 8114              	.LVL567:
 8115              	.LBB1909:
 8116              	.LBB1908:
 821:src/xeq.c     **** }
 8117              		.loc 1 821 2 view .LVU2189
 8118 001c FFF7FEBF 		b	getRegister
 8119              	.LVL568:
 821:src/xeq.c     **** }
 8120              		.loc 1 821 2 view .LVU2190
 8121              	.LBE1908:
 8122              	.LBE1909:
 8123              		.cfi_endproc
 8124              	.LFE67:
 8126              		.section	.text.getYZ,"ax",%progbits
 8127              		.align	1
ARM GAS  /tmp/cciWh9P3.s 			page 275


 8128              		.p2align 2,,3
 8129              		.global	getYZ
 8130              		.syntax unified
 8131              		.thumb
 8132              		.thumb_func
 8133              		.fpu fpv4-sp-d16
 8135              	getYZ:
 8136              	.LVL569:
 8137              	.LFB69:
 861:src/xeq.c     **** 	getY(y);
 8138              		.loc 1 861 40 is_stmt 1 view -0
 8139              		.cfi_startproc
 8140              		@ args = 0, pretend = 0, frame = 0
 8141              		@ frame_needed = 0, uses_anonymous_args = 0
 862:src/xeq.c     **** 	getZ(z);
 8142              		.loc 1 862 2 view .LVU2192
 8143              	.LBB1910:
 8144              	.LBI1910:
 812:src/xeq.c     **** 	getRegister(y, regY_idx);
 8145              		.loc 1 812 6 view .LVU2193
 8146              	.LBB1911:
 813:src/xeq.c     **** }
 8147              		.loc 1 813 2 view .LVU2194
 8148              	.LBE1911:
 8149              	.LBE1910:
 861:src/xeq.c     **** 	getY(y);
 8150              		.loc 1 861 40 is_stmt 0 view .LVU2195
 8151 0000 10B5     		push	{r4, lr}
 8152              		.cfi_def_cfa_offset 8
 8153              		.cfi_offset 4, -8
 8154              		.cfi_offset 14, -4
 861:src/xeq.c     **** 	getY(y);
 8155              		.loc 1 861 40 view .LVU2196
 8156 0002 0C46     		mov	r4, r1
 8157              	.LBB1913:
 8158              	.LBB1912:
 813:src/xeq.c     **** }
 8159              		.loc 1 813 2 view .LVU2197
 8160 0004 6521     		movs	r1, #101
 8161              	.LVL570:
 813:src/xeq.c     **** }
 8162              		.loc 1 813 2 view .LVU2198
 8163 0006 FFF7FEFF 		bl	getRegister
 8164              	.LVL571:
 813:src/xeq.c     **** }
 8165              		.loc 1 813 2 view .LVU2199
 8166              	.LBE1912:
 8167              	.LBE1913:
 863:src/xeq.c     **** }
 8168              		.loc 1 863 2 is_stmt 1 view .LVU2200
 8169              	.LBB1914:
 8170              	.LBI1914:
 820:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8171              		.loc 1 820 13 view .LVU2201
 8172              	.LBB1915:
 821:src/xeq.c     **** }
 8173              		.loc 1 821 2 view .LVU2202
ARM GAS  /tmp/cciWh9P3.s 			page 276


 8174 000a 2046     		mov	r0, r4
 8175 000c 6621     		movs	r1, #102
 8176              	.LBE1915:
 8177              	.LBE1914:
 864:src/xeq.c     **** 
 8178              		.loc 1 864 1 is_stmt 0 view .LVU2203
 8179 000e BDE81040 		pop	{r4, lr}
 8180              		.cfi_restore 14
 8181              		.cfi_restore 4
 8182              		.cfi_def_cfa_offset 0
 8183              	.LVL572:
 8184              	.LBB1917:
 8185              	.LBB1916:
 821:src/xeq.c     **** }
 8186              		.loc 1 821 2 view .LVU2204
 8187 0012 FFF7FEBF 		b	getRegister
 8188              	.LVL573:
 821:src/xeq.c     **** }
 8189              		.loc 1 821 2 view .LVU2205
 8190              	.LBE1916:
 8191              	.LBE1917:
 8192              		.cfi_endproc
 8193              	.LFE69:
 8195 0016 00BF     		.section	.text.getXYZT,"ax",%progbits
 8196              		.align	1
 8197              		.p2align 2,,3
 8198              		.global	getXYZT
 8199              		.syntax unified
 8200              		.thumb
 8201              		.thumb_func
 8202              		.fpu fpv4-sp-d16
 8204              	getXYZT:
 8205              	.LVL574:
 8206              	.LFB68:
 856:src/xeq.c     **** 	getXYZ(x, y, z);
 8207              		.loc 1 856 70 is_stmt 1 view -0
 8208              		.cfi_startproc
 8209              		@ args = 0, pretend = 0, frame = 0
 8210              		@ frame_needed = 0, uses_anonymous_args = 0
 857:src/xeq.c     **** 	getT(t);
 8211              		.loc 1 857 2 view .LVU2207
 856:src/xeq.c     **** 	getXYZ(x, y, z);
 8212              		.loc 1 856 70 is_stmt 0 view .LVU2208
 8213 0000 10B5     		push	{r4, lr}
 8214              		.cfi_def_cfa_offset 8
 8215              		.cfi_offset 4, -8
 8216              		.cfi_offset 14, -4
 856:src/xeq.c     **** 	getXYZ(x, y, z);
 8217              		.loc 1 856 70 view .LVU2209
 8218 0002 1C46     		mov	r4, r3
 857:src/xeq.c     **** 	getT(t);
 8219              		.loc 1 857 2 view .LVU2210
 8220 0004 FFF7FEFF 		bl	getXYZ
 8221              	.LVL575:
 858:src/xeq.c     **** }
 8222              		.loc 1 858 2 is_stmt 1 view .LVU2211
 8223              	.LBB1918:
ARM GAS  /tmp/cciWh9P3.s 			page 277


 8224              	.LBI1918:
 830:src/xeq.c     **** 	getRegister(t, regT_idx);
 8225              		.loc 1 830 13 view .LVU2212
 8226              	.LBB1919:
 831:src/xeq.c     **** }
 8227              		.loc 1 831 2 view .LVU2213
 8228 0008 2046     		mov	r0, r4
 8229 000a 6721     		movs	r1, #103
 8230              	.LBE1919:
 8231              	.LBE1918:
 859:src/xeq.c     **** 
 8232              		.loc 1 859 1 is_stmt 0 view .LVU2214
 8233 000c BDE81040 		pop	{r4, lr}
 8234              		.cfi_restore 14
 8235              		.cfi_restore 4
 8236              		.cfi_def_cfa_offset 0
 8237              	.LVL576:
 8238              	.LBB1921:
 8239              	.LBB1920:
 831:src/xeq.c     **** }
 8240              		.loc 1 831 2 view .LVU2215
 8241 0010 FFF7FEBF 		b	getRegister
 8242              	.LVL577:
 831:src/xeq.c     **** }
 8243              		.loc 1 831 2 view .LVU2216
 8244              	.LBE1920:
 8245              	.LBE1921:
 8246              		.cfi_endproc
 8247              	.LFE68:
 8249              		.section	.text.storcl_op,"ax",%progbits
 8250              		.align	1
 8251              		.p2align 2,,3
 8252              		.syntax unified
 8253              		.thumb
 8254              		.thumb_func
 8255              		.fpu fpv4-sp-d16
 8257              	storcl_op:
 8258              	.LVL578:
 8259              	.LFB111:
1449:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8260              		.loc 1 1449 76 is_stmt 1 view -0
 8261              		.cfi_startproc
 8262              		@ args = 0, pretend = 0, frame = 72
 8263              		@ frame_needed = 0, uses_anonymous_args = 0
1450:src/xeq.c     **** 
 8264              		.loc 1 1450 2 view .LVU2218
1449:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8265              		.loc 1 1449 76 is_stmt 0 view .LVU2219
 8266 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8267              		.cfi_def_cfa_offset 20
 8268              		.cfi_offset 4, -20
 8269              		.cfi_offset 5, -16
 8270              		.cfi_offset 6, -12
 8271              		.cfi_offset 7, -8
 8272              		.cfi_offset 14, -4
 8273 0002 93B0     		sub	sp, sp, #76
 8274              		.cfi_def_cfa_offset 96
ARM GAS  /tmp/cciWh9P3.s 			page 278


 8275              	.LVL579:
1452:src/xeq.c     **** 	getRegister(y, index);
 8276              		.loc 1 1452 2 is_stmt 1 view .LVU2220
 8277              	.LBB1922:
 8278              	.LBI1922:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8279              		.loc 1 804 12 view .LVU2221
 8280              	.LBB1923:
 805:src/xeq.c     **** }
 8281              		.loc 1 805 2 view .LVU2222
 8282              	.LBE1923:
 8283              	.LBE1922:
1449:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8284              		.loc 1 1449 76 is_stmt 0 view .LVU2223
 8285 0004 0E46     		mov	r6, r1
 8286 0006 0446     		mov	r4, r0
 8287              	.LBB1926:
 8288              	.LBB1924:
 805:src/xeq.c     **** }
 8289              		.loc 1 805 9 view .LVU2224
 8290 0008 6421     		movs	r1, #100
 8291              	.LVL580:
 805:src/xeq.c     **** }
 8292              		.loc 1 805 9 view .LVU2225
 8293 000a 6846     		mov	r0, sp
 8294              	.LVL581:
 805:src/xeq.c     **** }
 8295              		.loc 1 805 9 view .LVU2226
 8296              	.LBE1924:
 8297              	.LBE1926:
1449:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8298              		.loc 1 1449 76 view .LVU2227
 8299 000c 1D46     		mov	r5, r3
 8300 000e 1746     		mov	r7, r2
 8301              	.LBB1927:
 8302              	.LBB1925:
 805:src/xeq.c     **** }
 8303              		.loc 1 805 9 view .LVU2228
 8304 0010 FFF7FEFF 		bl	getRegister
 8305              	.LVL582:
 805:src/xeq.c     **** }
 8306              		.loc 1 805 9 view .LVU2229
 8307              	.LBE1925:
 8308              	.LBE1927:
1453:src/xeq.c     **** 	if (rev) {
 8309              		.loc 1 1453 2 is_stmt 1 view .LVU2230
 8310 0014 3146     		mov	r1, r6
 8311 0016 09A8     		add	r0, sp, #36
 8312              	.LVL583:
1453:src/xeq.c     **** 	if (rev) {
 8313              		.loc 1 1453 2 is_stmt 0 view .LVU2231
 8314 0018 FFF7FEFF 		bl	getRegister
 8315              	.LVL584:
1454:src/xeq.c     **** 		x = y;
 8316              		.loc 1 1454 2 is_stmt 1 view .LVU2232
1454:src/xeq.c     **** 		x = y;
 8317              		.loc 1 1454 5 is_stmt 0 view .LVU2233
ARM GAS  /tmp/cciWh9P3.s 			page 279


 8318 001c 4DB1     		cbz	r5, .L653
1456:src/xeq.c     **** 	}
 8319              		.loc 1 1456 5 view .LVU2234
 8320 001e 6946     		mov	r1, sp
1455:src/xeq.c     **** 		y = &a;
 8321              		.loc 1 1455 5 view .LVU2235
 8322 0020 09AA     		add	r2, sp, #36
 8323              	.LVL585:
 8324              	.L644:
1459:src/xeq.c     **** 	case 1:
 8325              		.loc 1 1459 2 is_stmt 1 view .LVU2236
 8326 0022 601E     		subs	r0, r4, #1
 8327 0024 0528     		cmp	r0, #5
 8328 0026 2BD8     		bhi	.L654
 8329 0028 DFE800F0 		tbb	[pc, r0]
 8330              	.L647:
 8331 002c 0C       		.byte	(.L652-.L647)/2
 8332 002d 12       		.byte	(.L651-.L647)/2
 8333 002e 18       		.byte	(.L650-.L647)/2
 8334 002f 1E       		.byte	(.L649-.L647)/2
 8335 0030 24       		.byte	(.L648-.L647)/2
 8336 0031 06       		.byte	(.L646-.L647)/2
 8337              	.LVL586:
 8338              		.p2align 1
 8339              	.L653:
1450:src/xeq.c     **** 
 8340              		.loc 1 1450 28 is_stmt 0 view .LVU2237
 8341 0032 09A9     		add	r1, sp, #36
 8342              	.LVL587:
1450:src/xeq.c     **** 
 8343              		.loc 1 1450 19 view .LVU2238
 8344 0034 6A46     		mov	r2, sp
 8345 0036 F4E7     		b	.L644
 8346              	.LVL588:
 8347              	.L646:
1476:src/xeq.c     **** 		break;
 8348              		.loc 1 1476 3 is_stmt 1 view .LVU2239
 8349 0038 3846     		mov	r0, r7
 8350 003a FFF7FEFF 		bl	dn_max
 8351              	.LVL589:
1477:src/xeq.c     **** 	default:
 8352              		.loc 1 1477 3 view .LVU2240
1481:src/xeq.c     **** }
 8353              		.loc 1 1481 9 is_stmt 0 view .LVU2241
 8354 003e 0020     		movs	r0, #0
 8355              	.L643:
1482:src/xeq.c     **** 
 8356              		.loc 1 1482 1 view .LVU2242
 8357 0040 13B0     		add	sp, sp, #76
 8358              		.cfi_remember_state
 8359              		.cfi_def_cfa_offset 20
 8360              		@ sp needed
 8361 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 8362              	.LVL590:
 8363              	.L652:
 8364              		.cfi_restore_state
1461:src/xeq.c     **** 		break;
ARM GAS  /tmp/cciWh9P3.s 			page 280


 8365              		.loc 1 1461 3 is_stmt 1 view .LVU2243
 8366 0044 3846     		mov	r0, r7
 8367 0046 FFF7FEFF 		bl	dn_add
 8368              	.LVL591:
1462:src/xeq.c     **** 	case 2:
 8369              		.loc 1 1462 3 view .LVU2244
1481:src/xeq.c     **** }
 8370              		.loc 1 1481 9 is_stmt 0 view .LVU2245
 8371 004a 0020     		movs	r0, #0
1482:src/xeq.c     **** 
 8372              		.loc 1 1482 1 view .LVU2246
 8373 004c 13B0     		add	sp, sp, #76
 8374              		.cfi_remember_state
 8375              		.cfi_def_cfa_offset 20
 8376              		@ sp needed
 8377 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 8378              	.LVL592:
 8379              	.L651:
 8380              		.cfi_restore_state
1464:src/xeq.c     **** 		break;
 8381              		.loc 1 1464 3 is_stmt 1 view .LVU2247
 8382 0050 3846     		mov	r0, r7
 8383 0052 FFF7FEFF 		bl	dn_subtract
 8384              	.LVL593:
1465:src/xeq.c     **** 	case 3:
 8385              		.loc 1 1465 3 view .LVU2248
1481:src/xeq.c     **** }
 8386              		.loc 1 1481 9 is_stmt 0 view .LVU2249
 8387 0056 0020     		movs	r0, #0
1482:src/xeq.c     **** 
 8388              		.loc 1 1482 1 view .LVU2250
 8389 0058 13B0     		add	sp, sp, #76
 8390              		.cfi_remember_state
 8391              		.cfi_def_cfa_offset 20
 8392              		@ sp needed
 8393 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 8394              	.LVL594:
 8395              	.L650:
 8396              		.cfi_restore_state
1467:src/xeq.c     **** 		break;
 8397              		.loc 1 1467 3 is_stmt 1 view .LVU2251
 8398 005c 3846     		mov	r0, r7
 8399 005e FFF7FEFF 		bl	dn_multiply
 8400              	.LVL595:
1468:src/xeq.c     **** 	case 4:
 8401              		.loc 1 1468 3 view .LVU2252
1481:src/xeq.c     **** }
 8402              		.loc 1 1481 9 is_stmt 0 view .LVU2253
 8403 0062 0020     		movs	r0, #0
1482:src/xeq.c     **** 
 8404              		.loc 1 1482 1 view .LVU2254
 8405 0064 13B0     		add	sp, sp, #76
 8406              		.cfi_remember_state
 8407              		.cfi_def_cfa_offset 20
 8408              		@ sp needed
 8409 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 8410              	.LVL596:
ARM GAS  /tmp/cciWh9P3.s 			page 281


 8411              	.L649:
 8412              		.cfi_restore_state
1470:src/xeq.c     **** 		break;
 8413              		.loc 1 1470 3 is_stmt 1 view .LVU2255
 8414 0068 3846     		mov	r0, r7
 8415 006a FFF7FEFF 		bl	dn_divide
 8416              	.LVL597:
1471:src/xeq.c     **** 	case 5:
 8417              		.loc 1 1471 3 view .LVU2256
1481:src/xeq.c     **** }
 8418              		.loc 1 1481 9 is_stmt 0 view .LVU2257
 8419 006e 0020     		movs	r0, #0
1482:src/xeq.c     **** 
 8420              		.loc 1 1482 1 view .LVU2258
 8421 0070 13B0     		add	sp, sp, #76
 8422              		.cfi_remember_state
 8423              		.cfi_def_cfa_offset 20
 8424              		@ sp needed
 8425 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 8426              	.LVL598:
 8427              	.L648:
 8428              		.cfi_restore_state
1473:src/xeq.c     **** 		break;
 8429              		.loc 1 1473 3 is_stmt 1 view .LVU2259
 8430 0074 3846     		mov	r0, r7
 8431 0076 FFF7FEFF 		bl	dn_min
 8432              	.LVL599:
1474:src/xeq.c     **** 	case 6:
 8433              		.loc 1 1474 3 view .LVU2260
1481:src/xeq.c     **** }
 8434              		.loc 1 1481 9 is_stmt 0 view .LVU2261
 8435 007a 0020     		movs	r0, #0
1482:src/xeq.c     **** 
 8436              		.loc 1 1482 1 view .LVU2262
 8437 007c 13B0     		add	sp, sp, #76
 8438              		.cfi_def_cfa_offset 20
 8439              		@ sp needed
 8440 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 8441              	.LVL600:
 8442              	.L654:
1481:src/xeq.c     **** }
 8443              		.loc 1 1481 9 view .LVU2263
 8444 0080 0120     		movs	r0, #1
 8445 0082 DDE7     		b	.L643
 8446              		.cfi_endproc
 8447              	.LFE111:
 8449              		.section	.text.storcl_cop,"ax",%progbits
 8450              		.align	1
 8451              		.p2align 2,,3
 8452              		.syntax unified
 8453              		.thumb
 8454              		.thumb_func
 8455              		.fpu fpv4-sp-d16
 8457              	storcl_cop:
 8458              	.LVL601:
 8459              	.LFB116:
1583:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
ARM GAS  /tmp/cciWh9P3.s 			page 282


 8460              		.loc 1 1583 93 is_stmt 1 view -0
 8461              		.cfi_startproc
 8462              		@ args = 4, pretend = 0, frame = 144
 8463              		@ frame_needed = 0, uses_anonymous_args = 0
1584:src/xeq.c     **** 
 8464              		.loc 1 1584 2 view .LVU2265
1583:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8465              		.loc 1 1583 93 is_stmt 0 view .LVU2266
 8466 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8467              		.cfi_def_cfa_offset 24
 8468              		.cfi_offset 4, -24
 8469              		.cfi_offset 5, -20
 8470              		.cfi_offset 6, -16
 8471              		.cfi_offset 7, -12
 8472              		.cfi_offset 8, -8
 8473              		.cfi_offset 14, -4
 8474 0004 A6B0     		sub	sp, sp, #152
 8475              		.cfi_def_cfa_offset 176
 8476              	.LVL602:
1586:src/xeq.c     **** 	getRegister(y + 0, index);
 8477              		.loc 1 1586 2 is_stmt 1 view .LVU2267
 8478              	.LBB1928:
 8479              	.LBI1928:
 834:src/xeq.c     **** 	getX(x);
 8480              		.loc 1 834 6 view .LVU2268
 8481              	.LBE1928:
 835:src/xeq.c     **** 	getY(y);
 8482              		.loc 1 835 2 view .LVU2269
 8483              	.LBB1937:
 8484              	.LBB1929:
 8485              	.LBI1929:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8486              		.loc 1 804 12 view .LVU2270
 8487              	.LBB1930:
 805:src/xeq.c     **** }
 8488              		.loc 1 805 2 view .LVU2271
 8489              	.LBE1930:
 8490              	.LBE1929:
 8491              	.LBE1937:
1583:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8492              		.loc 1 1583 93 is_stmt 0 view .LVU2272
 8493 0006 0D46     		mov	r5, r1
 8494 0008 0446     		mov	r4, r0
 8495              	.LBB1938:
 8496              	.LBB1933:
 8497              	.LBB1931:
 805:src/xeq.c     **** }
 8498              		.loc 1 805 9 view .LVU2273
 8499 000a 6421     		movs	r1, #100
 8500              	.LVL603:
 805:src/xeq.c     **** }
 8501              		.loc 1 805 9 view .LVU2274
 8502 000c 02A8     		add	r0, sp, #8
 8503              	.LVL604:
 805:src/xeq.c     **** }
 8504              		.loc 1 805 9 view .LVU2275
 8505              	.LBE1931:
ARM GAS  /tmp/cciWh9P3.s 			page 283


 8506              	.LBE1933:
 8507              	.LBE1938:
1583:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8508              		.loc 1 1583 93 view .LVU2276
 8509 000e 9046     		mov	r8, r2
 8510 0010 1E46     		mov	r6, r3
 8511 0012 2C9F     		ldr	r7, [sp, #176]
 8512              	.LBB1939:
 8513              	.LBB1934:
 8514              	.LBB1932:
 805:src/xeq.c     **** }
 8515              		.loc 1 805 9 view .LVU2277
 8516 0014 FFF7FEFF 		bl	getRegister
 8517              	.LVL605:
 805:src/xeq.c     **** }
 8518              		.loc 1 805 9 view .LVU2278
 8519              	.LBE1932:
 8520              	.LBE1934:
 8521              	.LBE1939:
 836:src/xeq.c     **** }
 8522              		.loc 1 836 2 is_stmt 1 view .LVU2279
 8523              	.LBB1940:
 8524              	.LBB1935:
 8525              	.LBI1935:
 812:src/xeq.c     **** 	getRegister(y, regY_idx);
 8526              		.loc 1 812 6 view .LVU2280
 8527              	.LBB1936:
 813:src/xeq.c     **** }
 8528              		.loc 1 813 2 view .LVU2281
 8529 0018 6521     		movs	r1, #101
 8530 001a 0BA8     		add	r0, sp, #44
 8531              	.LVL606:
 813:src/xeq.c     **** }
 8532              		.loc 1 813 2 is_stmt 0 view .LVU2282
 8533 001c FFF7FEFF 		bl	getRegister
 8534              	.LVL607:
 813:src/xeq.c     **** }
 8535              		.loc 1 813 2 view .LVU2283
 8536              	.LBE1936:
 8537              	.LBE1935:
 8538              	.LBE1940:
1587:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8539              		.loc 1 1587 2 is_stmt 1 view .LVU2284
 8540 0020 2946     		mov	r1, r5
 8541 0022 14A8     		add	r0, sp, #80
 8542              	.LVL608:
1587:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8543              		.loc 1 1587 2 is_stmt 0 view .LVU2285
 8544 0024 FFF7FEFF 		bl	getRegister
 8545              	.LVL609:
1588:src/xeq.c     **** 
 8546              		.loc 1 1588 2 is_stmt 1 view .LVU2286
 8547 0028 691C     		adds	r1, r5, #1
 8548 002a 1DA8     		add	r0, sp, #116
 8549 002c FFF7FEFF 		bl	getRegister
 8550              	.LVL610:
1590:src/xeq.c     **** 		x = y;
ARM GAS  /tmp/cciWh9P3.s 			page 284


 8551              		.loc 1 1590 2 view .LVU2287
1590:src/xeq.c     **** 		x = y;
 8552              		.loc 1 1590 5 is_stmt 0 view .LVU2288
 8553 0030 47B1     		cbz	r7, .L664
1592:src/xeq.c     **** 	}
 8554              		.loc 1 1592 5 view .LVU2289
 8555 0032 02AA     		add	r2, sp, #8
 8556              	.LVL611:
1591:src/xeq.c     **** 		y = a;
 8557              		.loc 1 1591 5 view .LVU2290
 8558 0034 14A9     		add	r1, sp, #80
 8559              	.LVL612:
 8560              	.L657:
1595:src/xeq.c     **** 	case 1:
 8561              		.loc 1 1595 2 is_stmt 1 view .LVU2291
 8562 0036 601E     		subs	r0, r4, #1
 8563 0038 0328     		cmp	r0, #3
 8564 003a 3ED8     		bhi	.L665
 8565 003c DFE800F0 		tbb	[pc, r0]
 8566              	.L660:
 8567 0040 13       		.byte	(.L663-.L660)/2
 8568 0041 21       		.byte	(.L662-.L660)/2
 8569 0042 2F       		.byte	(.L661-.L660)/2
 8570 0043 05       		.byte	(.L659-.L660)/2
 8571              	.LVL613:
 8572              		.p2align 1
 8573              	.L664:
1584:src/xeq.c     **** 
 8574              		.loc 1 1584 33 is_stmt 0 view .LVU2292
 8575 0044 14AA     		add	r2, sp, #80
 8576              	.LVL614:
1584:src/xeq.c     **** 
 8577              		.loc 1 1584 25 view .LVU2293
 8578 0046 02A9     		add	r1, sp, #8
 8579              	.LVL615:
1584:src/xeq.c     **** 
 8580              		.loc 1 1584 25 view .LVU2294
 8581 0048 F5E7     		b	.L657
 8582              	.L659:
1606:src/xeq.c     **** 		break;
 8583              		.loc 1 1606 3 is_stmt 1 view .LVU2295
1606:src/xeq.c     **** 		break;
 8584              		.loc 1 1606 46 is_stmt 0 view .LVU2296
 8585 004a 01F12403 		add	r3, r1, #36
1606:src/xeq.c     **** 		break;
 8586              		.loc 1 1606 3 view .LVU2297
 8587 004e CDE90013 		strd	r1, r3, [sp]
 8588 0052 4046     		mov	r0, r8
 8589 0054 3146     		mov	r1, r6
 8590              	.LVL616:
1606:src/xeq.c     **** 		break;
 8591              		.loc 1 1606 3 view .LVU2298
 8592 0056 02F12403 		add	r3, r2, #36
 8593 005a FFF7FEFF 		bl	cmplxDivide
 8594              	.LVL617:
1607:src/xeq.c     **** 	default:
 8595              		.loc 1 1607 3 is_stmt 1 view .LVU2299
ARM GAS  /tmp/cciWh9P3.s 			page 285


1611:src/xeq.c     **** }
 8596              		.loc 1 1611 9 is_stmt 0 view .LVU2300
 8597 005e 0020     		movs	r0, #0
 8598              	.L656:
1612:src/xeq.c     **** 
 8599              		.loc 1 1612 1 view .LVU2301
 8600 0060 26B0     		add	sp, sp, #152
 8601              		.cfi_remember_state
 8602              		.cfi_def_cfa_offset 24
 8603              		@ sp needed
 8604 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8605              	.LVL618:
 8606              	.L663:
 8607              		.cfi_restore_state
1597:src/xeq.c     **** 		break;
 8608              		.loc 1 1597 3 is_stmt 1 view .LVU2302
1597:src/xeq.c     **** 		break;
 8609              		.loc 1 1597 43 is_stmt 0 view .LVU2303
 8610 0066 01F12403 		add	r3, r1, #36
1597:src/xeq.c     **** 		break;
 8611              		.loc 1 1597 3 view .LVU2304
 8612 006a CDE90013 		strd	r1, r3, [sp]
 8613 006e 4046     		mov	r0, r8
 8614 0070 3146     		mov	r1, r6
 8615              	.LVL619:
1597:src/xeq.c     **** 		break;
 8616              		.loc 1 1597 3 view .LVU2305
 8617 0072 02F12403 		add	r3, r2, #36
 8618 0076 FFF7FEFF 		bl	cmplxAdd
 8619              	.LVL620:
1598:src/xeq.c     **** 	case 2:
 8620              		.loc 1 1598 3 is_stmt 1 view .LVU2306
1611:src/xeq.c     **** }
 8621              		.loc 1 1611 9 is_stmt 0 view .LVU2307
 8622 007a 0020     		movs	r0, #0
1612:src/xeq.c     **** 
 8623              		.loc 1 1612 1 view .LVU2308
 8624 007c 26B0     		add	sp, sp, #152
 8625              		.cfi_remember_state
 8626              		.cfi_def_cfa_offset 24
 8627              		@ sp needed
 8628 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8629              	.LVL621:
 8630              	.L662:
 8631              		.cfi_restore_state
1600:src/xeq.c     **** 		break;
 8632              		.loc 1 1600 3 is_stmt 1 view .LVU2309
1600:src/xeq.c     **** 		break;
 8633              		.loc 1 1600 48 is_stmt 0 view .LVU2310
 8634 0082 01F12403 		add	r3, r1, #36
1600:src/xeq.c     **** 		break;
 8635              		.loc 1 1600 3 view .LVU2311
 8636 0086 CDE90013 		strd	r1, r3, [sp]
 8637 008a 4046     		mov	r0, r8
 8638 008c 3146     		mov	r1, r6
 8639              	.LVL622:
1600:src/xeq.c     **** 		break;
ARM GAS  /tmp/cciWh9P3.s 			page 286


 8640              		.loc 1 1600 3 view .LVU2312
 8641 008e 02F12403 		add	r3, r2, #36
 8642 0092 FFF7FEFF 		bl	cmplxSubtract
 8643              	.LVL623:
1601:src/xeq.c     **** 	case 3:
 8644              		.loc 1 1601 3 is_stmt 1 view .LVU2313
1611:src/xeq.c     **** }
 8645              		.loc 1 1611 9 is_stmt 0 view .LVU2314
 8646 0096 0020     		movs	r0, #0
1612:src/xeq.c     **** 
 8647              		.loc 1 1612 1 view .LVU2315
 8648 0098 26B0     		add	sp, sp, #152
 8649              		.cfi_remember_state
 8650              		.cfi_def_cfa_offset 24
 8651              		@ sp needed
 8652 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8653              	.LVL624:
 8654              	.L661:
 8655              		.cfi_restore_state
1603:src/xeq.c     **** 		break;
 8656              		.loc 1 1603 3 is_stmt 1 view .LVU2316
1603:src/xeq.c     **** 		break;
 8657              		.loc 1 1603 48 is_stmt 0 view .LVU2317
 8658 009e 01F12403 		add	r3, r1, #36
1603:src/xeq.c     **** 		break;
 8659              		.loc 1 1603 3 view .LVU2318
 8660 00a2 CDE90013 		strd	r1, r3, [sp]
 8661 00a6 4046     		mov	r0, r8
 8662 00a8 3146     		mov	r1, r6
 8663              	.LVL625:
1603:src/xeq.c     **** 		break;
 8664              		.loc 1 1603 3 view .LVU2319
 8665 00aa 02F12403 		add	r3, r2, #36
 8666 00ae FFF7FEFF 		bl	cmplxMultiply
 8667              	.LVL626:
1604:src/xeq.c     **** 	case 4:
 8668              		.loc 1 1604 3 is_stmt 1 view .LVU2320
1611:src/xeq.c     **** }
 8669              		.loc 1 1611 9 is_stmt 0 view .LVU2321
 8670 00b2 0020     		movs	r0, #0
1612:src/xeq.c     **** 
 8671              		.loc 1 1612 1 view .LVU2322
 8672 00b4 26B0     		add	sp, sp, #152
 8673              		.cfi_def_cfa_offset 24
 8674              		@ sp needed
 8675 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8676              	.LVL627:
 8677              	.L665:
1611:src/xeq.c     **** }
 8678              		.loc 1 1611 9 view .LVU2323
 8679 00ba 0120     		movs	r0, #1
 8680 00bc D0E7     		b	.L656
 8681              		.cfi_endproc
 8682              	.LFE116:
 8684 00be 00BF     		.section	.text.cpx_enter,"ax",%progbits
 8685              		.align	1
 8686              		.p2align 2,,3
ARM GAS  /tmp/cciWh9P3.s 			page 287


 8687              		.global	cpx_enter
 8688              		.syntax unified
 8689              		.thumb
 8690              		.thumb_func
 8691              		.fpu fpv4-sp-d16
 8693              	cpx_enter:
 8694              	.LVL628:
 8695              	.LFB74:
 892:src/xeq.c     **** 	lift();
 8696              		.loc 1 892 31 is_stmt 1 view -0
 8697              		.cfi_startproc
 8698              		@ args = 0, pretend = 0, frame = 0
 8699              		@ frame_needed = 0, uses_anonymous_args = 0
 893:src/xeq.c     **** 	lift();
 8700              		.loc 1 893 2 view .LVU2325
 892:src/xeq.c     **** 	lift();
 8701              		.loc 1 892 31 is_stmt 0 view .LVU2326
 8702 0000 10B5     		push	{r4, lr}
 8703              		.cfi_def_cfa_offset 8
 8704              		.cfi_offset 4, -8
 8705              		.cfi_offset 14, -4
 893:src/xeq.c     **** 	lift();
 8706              		.loc 1 893 2 view .LVU2327
 8707 0002 FFF7FEFF 		bl	lift
 8708              	.LVL629:
 894:src/xeq.c     **** 	copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 8709              		.loc 1 894 2 is_stmt 1 view .LVU2328
 8710 0006 FFF7FEFF 		bl	lift
 8711              	.LVL630:
 895:src/xeq.c     **** 	set_was_complex();
 8712              		.loc 1 895 2 view .LVU2329
 8713 000a 6520     		movs	r0, #101
 8714 000c FFF7FEFF 		bl	get_reg_n
 8715              	.LVL631:
 8716 0010 0446     		mov	r4, r0
 895:src/xeq.c     **** 	set_was_complex();
 8717              		.loc 1 895 31 is_stmt 0 view .LVU2330
 8718 0012 6720     		movs	r0, #103
 8719 0014 FFF7FEFF 		bl	get_reg_n
 8720              	.LVL632:
 8721              	.LBB1941:
 8722              	.LBB1942:
 8723              	.LBB1943:
 8724              	.LBB1944:
 932:src/xeq.c     **** }
 8725              		.loc 1 932 24 view .LVU2331
 8726 0018 0B4B     		ldr	r3, .L671
 8727 001a 1B68     		ldr	r3, [r3]
 8728 001c B3F8E827 		ldrh	r2, [r3, #2024]
 8729 0020 44F20103 		movw	r3, #16385
 8730              	.LBE1944:
 8731              	.LBE1943:
 717:src/xeq.c     **** }
 8732              		.loc 1 717 2 view .LVU2332
 8733 0024 1340     		ands	r3, r3, r2
 8734 0026 B3F5804F 		cmp	r3, #16384
 8735              	.LBE1942:
ARM GAS  /tmp/cciWh9P3.s 			page 288


 8736              	.LBE1941:
 895:src/xeq.c     **** 	set_was_complex();
 8737              		.loc 1 895 31 view .LVU2333
 8738 002a 0146     		mov	r1, r0
 8739              	.LVL633:
 8740              	.LBB1948:
 8741              	.LBI1941:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8742              		.loc 1 716 6 is_stmt 1 view .LVU2334
 8743              	.LBB1947:
 717:src/xeq.c     **** }
 8744              		.loc 1 717 2 view .LVU2335
 8745              	.LBB1946:
 8746              	.LBI1943:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8747              		.loc 1 931 5 view .LVU2336
 8748              	.LBB1945:
 932:src/xeq.c     **** }
 8749              		.loc 1 932 2 view .LVU2337
 8750              	.LBE1945:
 8751              	.LBE1946:
 717:src/xeq.c     **** }
 8752              		.loc 1 717 2 is_stmt 0 view .LVU2338
 8753 002c 0CBF     		ite	eq
 8754 002e 1022     		moveq	r2, #16
 8755 0030 0822     		movne	r2, #8
 8756 0032 2046     		mov	r0, r4
 8757              	.LVL634:
 717:src/xeq.c     **** }
 8758              		.loc 1 717 2 view .LVU2339
 8759 0034 FFF7FEFF 		bl	xcopy
 8760              	.LVL635:
 717:src/xeq.c     **** }
 8761              		.loc 1 717 2 view .LVU2340
 8762              	.LBE1947:
 8763              	.LBE1948:
 896:src/xeq.c     **** }
 8764              		.loc 1 896 2 is_stmt 1 view .LVU2341
 8765              	.LBB1949:
 8766              	.LBI1949:
 529:src/xeq.c     **** 	State2.wascomplex = 1;
 8767              		.loc 1 529 13 view .LVU2342
 8768              	.LBB1950:
 530:src/xeq.c     **** }
 8769              		.loc 1 530 2 view .LVU2343
 530:src/xeq.c     **** }
 8770              		.loc 1 530 20 is_stmt 0 view .LVU2344
 8771 0038 044B     		ldr	r3, .L671+4
 8772 003a 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 8773 003c 0121     		movs	r1, #1
 8774 003e 61F38712 		bfi	r2, r1, #6, #2
 8775 0042 1A75     		strb	r2, [r3, #20]
 8776              	.LBE1950:
 8777              	.LBE1949:
 897:src/xeq.c     **** 
 8778              		.loc 1 897 1 view .LVU2345
 8779 0044 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cciWh9P3.s 			page 289


 8780              	.L672:
 8781 0046 00BF     		.align	2
 8782              	.L671:
 8783 0048 00000000 		.word	main_ram
 8784 004c 00000000 		.word	StateWhileOn
 8785              		.cfi_endproc
 8786              	.LFE74:
 8788              		.section	.text.cpx_fill,"ax",%progbits
 8789              		.align	1
 8790              		.p2align 2,,3
 8791              		.global	cpx_fill
 8792              		.syntax unified
 8793              		.thumb
 8794              		.thumb_func
 8795              		.fpu fpv4-sp-d16
 8797              	cpx_fill:
 8798              	.LVL636:
 8799              	.LFB75:
 899:src/xeq.c     **** 	const int n = stack_size();
 8800              		.loc 1 899 30 is_stmt 1 view -0
 8801              		.cfi_startproc
 8802              		@ args = 0, pretend = 0, frame = 0
 8803              		@ frame_needed = 0, uses_anonymous_args = 0
 900:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 8804              		.loc 1 900 2 view .LVU2347
 8805              	.LBB1951:
 8806              	.LBI1951:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 8807              		.loc 1 702 5 view .LVU2348
 8808              	.LBB1952:
 703:src/xeq.c     **** 		return 4;
 8809              		.loc 1 703 2 view .LVU2349
 8810              	.LBE1952:
 8811              	.LBE1951:
 899:src/xeq.c     **** 	const int n = stack_size();
 8812              		.loc 1 899 30 is_stmt 0 view .LVU2350
 8813 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 8814              		.cfi_def_cfa_offset 32
 8815              		.cfi_offset 3, -32
 8816              		.cfi_offset 4, -28
 8817              		.cfi_offset 5, -24
 8818              		.cfi_offset 6, -20
 8819              		.cfi_offset 7, -16
 8820              		.cfi_offset 8, -12
 8821              		.cfi_offset 9, -8
 8822              		.cfi_offset 14, -4
 8823              	.LBB1957:
 8824              	.LBB1955:
 703:src/xeq.c     **** 		return 4;
 8825              		.loc 1 703 8 view .LVU2351
 8826 0004 1F4D     		ldr	r5, .L686
 8827 0006 2B68     		ldr	r3, [r5]
 703:src/xeq.c     **** 		return 4;
 8828              		.loc 1 703 6 view .LVU2352
 8829 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 8830              		.loc 1 703 5 view .LVU2353
ARM GAS  /tmp/cciWh9P3.s 			page 290


 8831 000c 1207     		lsls	r2, r2, #28
 8832 000e 37D5     		bpl	.L678
 8833              	.LBB1953:
 8834              	.LBI1953:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 8835              		.loc 1 181 5 is_stmt 1 view .LVU2354
 8836              	.LBB1954:
 182:src/xeq.c     **** }
 8837              		.loc 1 182 2 view .LVU2355
 182:src/xeq.c     **** }
 8838              		.loc 1 182 9 is_stmt 0 view .LVU2356
 8839 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 8840              	.LBE1954:
 8841              	.LBE1953:
 703:src/xeq.c     **** 		return 4;
 8842              		.loc 1 703 27 view .LVU2357
 8843 0014 9B0B     		lsrs	r3, r3, #14
 8844 0016 032B     		cmp	r3, #3
 8845 0018 2AD0     		beq	.L685
 705:src/xeq.c     **** }
 8846              		.loc 1 705 9 view .LVU2358
 8847 001a 0827     		movs	r7, #8
 8848              	.L674:
 8849              	.LVL637:
 705:src/xeq.c     **** }
 8850              		.loc 1 705 9 view .LVU2359
 8851              	.LBE1955:
 8852              	.LBE1957:
 901:src/xeq.c     **** 	int i;
 8853              		.loc 1 901 2 is_stmt 1 view .LVU2360
 901:src/xeq.c     **** 	int i;
 8854              		.loc 1 901 22 is_stmt 0 view .LVU2361
 8855 001c 6520     		movs	r0, #101
 8856              	.LVL638:
 901:src/xeq.c     **** 	int i;
 8857              		.loc 1 901 22 view .LVU2362
 8858 001e FFF7FEFF 		bl	get_reg_n
 8859              	.LVL639:
 905:src/xeq.c     **** 	set_was_complex();
 8860              		.loc 1 905 3 view .LVU2363
 8861 0022 DFF86C90 		ldr	r9, .L686+12
 901:src/xeq.c     **** 	int i;
 8862              		.loc 1 901 22 view .LVU2364
 8863 0026 8046     		mov	r8, r0
 8864              	.LVL640:
 902:src/xeq.c     **** 
 8865              		.loc 1 902 2 is_stmt 1 view .LVU2365
 904:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8866              		.loc 1 904 2 view .LVU2366
 904:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8867              		.loc 1 904 12 view .LVU2367
 904:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8868              		.loc 1 904 8 is_stmt 0 view .LVU2368
 8869 0028 0224     		movs	r4, #2
 8870              	.LBB1958:
 8871              	.LBB1959:
 8872              	.LBB1960:
ARM GAS  /tmp/cciWh9P3.s 			page 291


 8873              	.LBB1961:
 932:src/xeq.c     **** }
 8874              		.loc 1 932 24 view .LVU2369
 8875 002a 44F20106 		movw	r6, #16385
 8876              	.LVL641:
 8877              	.L677:
 932:src/xeq.c     **** }
 8878              		.loc 1 932 24 view .LVU2370
 8879              	.LBE1961:
 8880              	.LBE1960:
 8881              	.LBE1959:
 8882              	.LBE1958:
 905:src/xeq.c     **** 	set_was_complex();
 8883              		.loc 1 905 3 is_stmt 1 view .LVU2371
 8884              	.LBB1972:
 8885              	.LBI1972:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 8886              		.loc 1 708 11 view .LVU2372
 8887              	.LBB1973:
 709:src/xeq.c     **** }
 8888              		.loc 1 709 2 view .LVU2373
 709:src/xeq.c     **** }
 8889              		.loc 1 709 9 is_stmt 0 view .LVU2374
 8890 002e 04F16400 		add	r0, r4, #100
 8891 0032 FFF7FEFF 		bl	get_reg_n
 8892              	.LVL642:
 709:src/xeq.c     **** }
 8893              		.loc 1 709 9 view .LVU2375
 8894              	.LBE1973:
 8895              	.LBE1972:
 905:src/xeq.c     **** 	set_was_complex();
 8896              		.loc 1 905 3 view .LVU2376
 8897 0036 E307     		lsls	r3, r4, #31
 8898              	.LBB1974:
 8899              	.LBB1968:
 8900              	.LBB1965:
 8901              	.LBB1962:
 932:src/xeq.c     **** }
 8902              		.loc 1 932 24 view .LVU2377
 8903 0038 2B68     		ldr	r3, [r5]
 8904              	.LBE1962:
 8905              	.LBE1965:
 8906              	.LBE1968:
 8907              	.LBE1974:
 905:src/xeq.c     **** 	set_was_complex();
 8908              		.loc 1 905 3 view .LVU2378
 8909 003a 58BF     		it	pl
 8910 003c D9F80010 		ldrpl	r1, [r9]
 8911              	.LBB1975:
 8912              	.LBB1969:
 8913              	.LBB1966:
 8914              	.LBB1963:
 932:src/xeq.c     **** }
 8915              		.loc 1 932 24 view .LVU2379
 8916 0040 B3F8E837 		ldrh	r3, [r3, #2024]
 8917              	.LBE1963:
 8918              	.LBE1966:
ARM GAS  /tmp/cciWh9P3.s 			page 292


 717:src/xeq.c     **** }
 8919              		.loc 1 717 2 view .LVU2380
 8920 0044 03EA0603 		and	r3, r3, r6
 8921              	.LBE1969:
 8922              	.LBE1975:
 905:src/xeq.c     **** 	set_was_complex();
 8923              		.loc 1 905 3 view .LVU2381
 8924 0048 48BF     		it	mi
 8925 004a 4146     		movmi	r1, r8
 8926              	.LVL643:
 8927              	.LBB1976:
 8928              	.LBI1958:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8929              		.loc 1 716 6 is_stmt 1 view .LVU2382
 8930              	.LBB1970:
 717:src/xeq.c     **** }
 8931              		.loc 1 717 2 view .LVU2383
 8932              	.LBB1967:
 8933              	.LBI1960:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8934              		.loc 1 931 5 view .LVU2384
 8935              	.LBB1964:
 932:src/xeq.c     **** }
 8936              		.loc 1 932 2 view .LVU2385
 8937              	.LBE1964:
 8938              	.LBE1967:
 717:src/xeq.c     **** }
 8939              		.loc 1 717 2 is_stmt 0 view .LVU2386
 8940 004c B3F5804F 		cmp	r3, #16384
 8941 0050 0CBF     		ite	eq
 8942 0052 1022     		moveq	r2, #16
 8943 0054 0822     		movne	r2, #8
 8944              	.LBE1970:
 8945              	.LBE1976:
 904:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8946              		.loc 1 904 18 view .LVU2387
 8947 0056 0134     		adds	r4, r4, #1
 8948              	.LVL644:
 8949              	.LBB1977:
 8950              	.LBB1971:
 717:src/xeq.c     **** }
 8951              		.loc 1 717 2 view .LVU2388
 8952 0058 FFF7FEFF 		bl	xcopy
 8953              	.LVL645:
 717:src/xeq.c     **** }
 8954              		.loc 1 717 2 view .LVU2389
 8955              	.LBE1971:
 8956              	.LBE1977:
 904:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8957              		.loc 1 904 17 is_stmt 1 view .LVU2390
 904:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8958              		.loc 1 904 12 view .LVU2391
 904:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8959              		.loc 1 904 2 is_stmt 0 view .LVU2392
 8960 005c BC42     		cmp	r4, r7
 8961 005e E6D1     		bne	.L677
 906:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 293


 8962              		.loc 1 906 2 is_stmt 1 view .LVU2393
 8963              	.LBB1978:
 8964              	.LBI1978:
 529:src/xeq.c     **** 	State2.wascomplex = 1;
 8965              		.loc 1 529 13 view .LVU2394
 8966              	.LBB1979:
 530:src/xeq.c     **** }
 8967              		.loc 1 530 2 view .LVU2395
 530:src/xeq.c     **** }
 8968              		.loc 1 530 20 is_stmt 0 view .LVU2396
 8969 0060 094B     		ldr	r3, .L686+4
 8970 0062 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 8971 0064 0121     		movs	r1, #1
 8972 0066 61F38712 		bfi	r2, r1, #6, #2
 8973 006a 1A75     		strb	r2, [r3, #20]
 8974              	.LBE1979:
 8975              	.LBE1978:
 907:src/xeq.c     **** 
 8976              		.loc 1 907 1 view .LVU2397
 8977 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 8978              	.LVL646:
 8979              	.L685:
 8980              	.LBB1980:
 8981              	.LBB1956:
 703:src/xeq.c     **** 		return 4;
 8982              		.loc 1 703 44 view .LVU2398
 8983 0070 064B     		ldr	r3, .L686+8
 703:src/xeq.c     **** 		return 4;
 8984              		.loc 1 703 41 view .LVU2399
 8985 0072 93F90130 		ldrsb	r3, [r3, #1]
 704:src/xeq.c     **** 	return 8;
 8986              		.loc 1 704 10 view .LVU2400
 8987 0076 002B     		cmp	r3, #0
 8988 0078 B4BF     		ite	lt
 8989 007a 0827     		movlt	r7, #8
 8990 007c 0427     		movge	r7, #4
 8991 007e CDE7     		b	.L674
 8992              	.L678:
 8993 0080 0427     		movs	r7, #4
 8994 0082 CBE7     		b	.L674
 8995              	.L687:
 8996              		.align	2
 8997              	.L686:
 8998 0084 00000000 		.word	main_ram
 8999 0088 00000000 		.word	StateWhileOn
 9000 008c 00000000 		.word	XromParams
 9001 0090 00000000 		.word	StackBase
 9002              	.LBE1956:
 9003              	.LBE1980:
 9004              		.cfi_endproc
 9005              	.LFE75:
 9007              		.section	.text.setRegister,"ax",%progbits
 9008              		.align	1
 9009              		.p2align 2,,3
 9010              		.global	setRegister
 9011              		.syntax unified
 9012              		.thumb
ARM GAS  /tmp/cciWh9P3.s 			page 294


 9013              		.thumb_func
 9014              		.fpu fpv4-sp-d16
 9016              	setRegister:
 9017              	.LVL647:
 9018              	.LFB58:
 791:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9019              		.loc 1 791 49 is_stmt 1 view -0
 9020              		.cfi_startproc
 9021              		@ args = 0, pretend = 0, frame = 40
 9022              		@ frame_needed = 0, uses_anonymous_args = 0
 792:src/xeq.c     **** 	decNumber dn;
 9023              		.loc 1 792 2 view .LVU2402
 791:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9024              		.loc 1 791 49 is_stmt 0 view .LVU2403
 9025 0000 30B5     		push	{r4, r5, lr}
 9026              		.cfi_def_cfa_offset 12
 9027              		.cfi_offset 4, -12
 9028              		.cfi_offset 5, -8
 9029              		.cfi_offset 14, -4
 9030 0002 8BB0     		sub	sp, sp, #44
 9031              		.cfi_def_cfa_offset 56
 791:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9032              		.loc 1 791 49 view .LVU2404
 9033 0004 0C46     		mov	r4, r1
 792:src/xeq.c     **** 	decNumber dn;
 9034              		.loc 1 792 24 view .LVU2405
 9035 0006 FFF7FEFF 		bl	get_reg_n
 9036              	.LVL648:
 792:src/xeq.c     **** 	decNumber dn;
 9037              		.loc 1 792 24 view .LVU2406
 9038 000a 0546     		mov	r5, r0
 795:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9039              		.loc 1 795 8 view .LVU2407
 9040 000c 2046     		mov	r0, r4
 9041              	.LVL649:
 793:src/xeq.c     **** 
 9042              		.loc 1 793 2 is_stmt 1 view .LVU2408
 795:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9043              		.loc 1 795 2 view .LVU2409
 795:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9044              		.loc 1 795 8 is_stmt 0 view .LVU2410
 9045 000e FFF7FEFF 		bl	check_special
 9046              	.LVL650:
 795:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9047              		.loc 1 795 5 view .LVU2411
 9048 0012 08B1     		cbz	r0, .L692
 802:src/xeq.c     **** 
 9049              		.loc 1 802 1 view .LVU2412
 9050 0014 0BB0     		add	sp, sp, #44
 9051              		.cfi_remember_state
 9052              		.cfi_def_cfa_offset 12
 9053              		@ sp needed
 9054 0016 30BD     		pop	{r4, r5, pc}
 9055              	.LVL651:
 9056              	.L692:
 9057              		.cfi_restore_state
 796:src/xeq.c     **** 		if (is_dblmode())
ARM GAS  /tmp/cciWh9P3.s 			page 295


 9058              		.loc 1 796 3 is_stmt 1 view .LVU2413
 9059 0018 0C4A     		ldr	r2, .L694
 9060 001a 2146     		mov	r1, r4
 9061 001c 01A8     		add	r0, sp, #4
 9062 001e FFF7FEFF 		bl	decNumberNormalize
 9063              	.LVL652:
 797:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9064              		.loc 1 797 3 view .LVU2414
 9065              	.LBB1981:
 9066              	.LBI1981:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9067              		.loc 1 931 5 view .LVU2415
 9068              	.LBB1982:
 932:src/xeq.c     **** }
 9069              		.loc 1 932 2 view .LVU2416
 932:src/xeq.c     **** }
 9070              		.loc 1 932 24 is_stmt 0 view .LVU2417
 9071 0022 0B4B     		ldr	r3, .L694+4
 9072 0024 1B68     		ldr	r3, [r3]
 9073 0026 B3F8E827 		ldrh	r2, [r3, #2024]
 9074 002a 44F20103 		movw	r3, #16385
 9075              	.LBE1982:
 9076              	.LBE1981:
 797:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9077              		.loc 1 797 6 view .LVU2418
 9078 002e 1340     		ands	r3, r3, r2
 9079 0030 B3F5804F 		cmp	r3, #16384
 798:src/xeq.c     **** 		else
 9080              		.loc 1 798 4 view .LVU2419
 9081 0034 01A9     		add	r1, sp, #4
 9082 0036 2846     		mov	r0, r5
 797:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9083              		.loc 1 797 6 view .LVU2420
 9084 0038 03D0     		beq	.L693
 9085              	.LVL653:
 800:src/xeq.c     **** 	}
 9086              		.loc 1 800 4 is_stmt 1 view .LVU2421
 9087 003a FFF7FEFF 		bl	packed_from_number
 9088              	.LVL654:
 802:src/xeq.c     **** 
 9089              		.loc 1 802 1 is_stmt 0 view .LVU2422
 9090 003e 0BB0     		add	sp, sp, #44
 9091              		.cfi_remember_state
 9092              		.cfi_def_cfa_offset 12
 9093              		@ sp needed
 9094 0040 30BD     		pop	{r4, r5, pc}
 9095              	.LVL655:
 9096              	.L693:
 9097              		.cfi_restore_state
 798:src/xeq.c     **** 		else
 9098              		.loc 1 798 4 is_stmt 1 view .LVU2423
 9099 0042 FFF7FEFF 		bl	packed128_from_number
 9100              	.LVL656:
 802:src/xeq.c     **** 
 9101              		.loc 1 802 1 is_stmt 0 view .LVU2424
 9102 0046 0BB0     		add	sp, sp, #44
 9103              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cciWh9P3.s 			page 296


 9104              		@ sp needed
 9105 0048 30BD     		pop	{r4, r5, pc}
 9106              	.LVL657:
 9107              	.L695:
 802:src/xeq.c     **** 
 9108              		.loc 1 802 1 view .LVU2425
 9109 004a 00BF     		.align	2
 9110              	.L694:
 9111 004c 00000000 		.word	Ctx
 9112 0050 00000000 		.word	main_ram
 9113              		.cfi_endproc
 9114              	.LFE58:
 9116              		.section	.text.setX,"ax",%progbits
 9117              		.align	1
 9118              		.p2align 2,,3
 9119              		.global	setX
 9120              		.syntax unified
 9121              		.thumb
 9122              		.thumb_func
 9123              		.fpu fpv4-sp-d16
 9125              	setX:
 9126              	.LVL658:
 9127              	.LFB60:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 9128              		.loc 1 808 31 is_stmt 1 view -0
 9129              		.cfi_startproc
 9130              		@ args = 0, pretend = 0, frame = 0
 9131              		@ frame_needed = 0, uses_anonymous_args = 0
 9132              		@ link register save eliminated.
 809:src/xeq.c     **** }
 9133              		.loc 1 809 2 view .LVU2427
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 9134              		.loc 1 808 31 is_stmt 0 view .LVU2428
 9135 0000 0146     		mov	r1, r0
 809:src/xeq.c     **** }
 9136              		.loc 1 809 2 view .LVU2429
 9137 0002 6420     		movs	r0, #100
 9138              	.LVL659:
 809:src/xeq.c     **** }
 9139              		.loc 1 809 2 view .LVU2430
 9140 0004 FFF7FEBF 		b	setRegister
 9141              	.LVL660:
 809:src/xeq.c     **** }
 9142              		.loc 1 809 2 view .LVU2431
 9143              		.cfi_endproc
 9144              	.LFE60:
 9146              		.section	.text.rarg_round,"ax",%progbits
 9147              		.align	1
 9148              		.p2align 2,,3
 9149              		.global	rarg_round
 9150              		.syntax unified
 9151              		.thumb
 9152              		.thumb_func
 9153              		.fpu fpv4-sp-d16
 9155              	rarg_round:
 9156              	.LVL661:
 9157              	.LFB40:
ARM GAS  /tmp/cciWh9P3.s 			page 297


 652:src/xeq.c     **** 	decNumber res, x;
 9158              		.loc 1 652 49 is_stmt 1 view -0
 9159              		.cfi_startproc
 9160              		@ args = 0, pretend = 0, frame = 80
 9161              		@ frame_needed = 0, uses_anonymous_args = 0
 653:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 9162              		.loc 1 653 2 view .LVU2433
 654:src/xeq.c     **** 
 9163              		.loc 1 654 2 view .LVU2434
 9164              	.LBB1995:
 9165              	.LBI1995:
 600:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 9166              		.loc 1 600 22 view .LVU2435
 9167              	.LBB1996:
 601:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 9168              		.loc 1 601 2 view .LVU2436
 606:src/xeq.c     **** }
 9169              		.loc 1 606 2 view .LVU2437
 606:src/xeq.c     **** }
 9170              		.loc 1 606 31 is_stmt 0 view .LVU2438
 9171 0000 184B     		ldr	r3, .L705
 9172              	.LBE1996:
 9173              	.LBE1995:
 652:src/xeq.c     **** 	decNumber res, x;
 9174              		.loc 1 652 49 view .LVU2439
 9175 0002 70B5     		push	{r4, r5, r6, lr}
 9176              		.cfi_def_cfa_offset 16
 9177              		.cfi_offset 4, -16
 9178              		.cfi_offset 5, -12
 9179              		.cfi_offset 6, -8
 9180              		.cfi_offset 14, -4
 9181              	.LBB1999:
 9182              	.LBB1997:
 606:src/xeq.c     **** }
 9183              		.loc 1 606 31 view .LVU2440
 9184 0004 1B68     		ldr	r3, [r3]
 9185              	.LVL662:
 606:src/xeq.c     **** }
 9186              		.loc 1 606 31 view .LVU2441
 9187              	.LBE1997:
 9188              	.LBE1999:
 656:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9189              		.loc 1 656 2 is_stmt 1 view .LVU2442
 656:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9190              		.loc 1 656 6 is_stmt 0 view .LVU2443
 9191 0006 93F8E857 		ldrb	r5, [r3, #2024]	@ zero_extendqisi2
 656:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9192              		.loc 1 656 5 view .LVU2444
 9193 000a EA07     		lsls	r2, r5, #31
 652:src/xeq.c     **** 	decNumber res, x;
 9194              		.loc 1 652 49 view .LVU2445
 9195 000c 94B0     		sub	sp, sp, #80
 9196              		.cfi_def_cfa_offset 96
 656:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9197              		.loc 1 656 5 view .LVU2446
 9198 000e 06D5     		bpl	.L698
 657:src/xeq.c     **** 		return;
ARM GAS  /tmp/cciWh9P3.s 			page 298


 9199              		.loc 1 657 3 is_stmt 1 view .LVU2447
 9200              	.LVL663:
 9201              	.LBB2000:
 9202              	.LBI2000:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9203              		.loc 1 536 5 view .LVU2448
 9204              	.LBB2001:
 537:src/xeq.c     **** 		Error = e;
 9205              		.loc 1 537 2 view .LVU2449
 537:src/xeq.c     **** 		Error = e;
 9206              		.loc 1 537 12 is_stmt 0 view .LVU2450
 9207 0010 154B     		ldr	r3, .L705+4
 9208              	.LVL664:
 537:src/xeq.c     **** 		Error = e;
 9209              		.loc 1 537 5 view .LVU2451
 9210 0012 1A68     		ldr	r2, [r3]
 9211 0014 0AB9     		cbnz	r2, .L697
 9212              	.LVL665:
 9213              	.LBB2002:
 9214              	.LBI2002:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9215              		.loc 1 536 5 is_stmt 1 view .LVU2452
 9216              	.LBB2003:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 9217              		.loc 1 538 3 view .LVU2453
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 9218              		.loc 1 538 9 is_stmt 0 view .LVU2454
 9219 0016 0D22     		movs	r2, #13
 9220 0018 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 9221              		.loc 1 539 3 is_stmt 1 view .LVU2455
 9222              	.LVL666:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 9223              		.loc 1 539 3 is_stmt 0 view .LVU2456
 9224              	.LBE2003:
 9225              	.LBE2002:
 9226              	.LBE2001:
 9227              	.LBE2000:
 658:src/xeq.c     **** 	}
 9228              		.loc 1 658 3 is_stmt 1 view .LVU2457
 9229              	.L697:
 668:src/xeq.c     **** 
 9230              		.loc 1 668 1 is_stmt 0 view .LVU2458
 9231 001a 14B0     		add	sp, sp, #80
 9232              		.cfi_remember_state
 9233              		.cfi_def_cfa_offset 16
 9234              		@ sp needed
 9235 001c 70BD     		pop	{r4, r5, r6, pc}
 9236              	.LVL667:
 9237              	.L698:
 9238              		.cfi_restore_state
 9239              	.LBB2004:
 9240              	.LBB1998:
 606:src/xeq.c     **** }
 9241              		.loc 1 606 37 view .LVU2459
 9242 001e 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 9243              	.LVL668:
ARM GAS  /tmp/cciWh9P3.s 			page 299


 606:src/xeq.c     **** }
 9244              		.loc 1 606 9 view .LVU2460
 9245 0022 124A     		ldr	r2, .L705+8
 606:src/xeq.c     **** }
 9246              		.loc 1 606 37 view .LVU2461
 9247 0024 C3F30213 		ubfx	r3, r3, #4, #3
 9248 0028 0C46     		mov	r4, r1
 606:src/xeq.c     **** }
 9249              		.loc 1 606 9 view .LVU2462
 9250 002a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9251 002c 0193     		str	r3, [sp, #4]
 9252              	.LBE1998:
 9253              	.LBE2004:
 661:src/xeq.c     **** 	getX(&x);
 9254              		.loc 1 661 2 is_stmt 1 view .LVU2463
 9255              	.LBB2005:
 9256              	.LBI2005:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 9257              		.loc 1 772 6 view .LVU2464
 9258              	.LBB2006:
 773:src/xeq.c     **** }
 9259              		.loc 1 773 2 view .LVU2465
 9260 002e 0646     		mov	r6, r0
 9261 0030 6421     		movs	r1, #100
 9262              	.LVL669:
 773:src/xeq.c     **** }
 9263              		.loc 1 773 2 is_stmt 0 view .LVU2466
 9264 0032 6C20     		movs	r0, #108
 9265              	.LVL670:
 773:src/xeq.c     **** }
 9266              		.loc 1 773 2 view .LVU2467
 9267 0034 FFF7FEFF 		bl	copyreg_n
 9268              	.LVL671:
 773:src/xeq.c     **** }
 9269              		.loc 1 773 2 view .LVU2468
 9270              	.LBE2006:
 9271              	.LBE2005:
 662:src/xeq.c     **** 	if (op == RARG_ROUND)
 9272              		.loc 1 662 2 is_stmt 1 view .LVU2469
 9273              	.LBB2007:
 9274              	.LBI2007:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9275              		.loc 1 804 12 view .LVU2470
 9276              	.LBB2008:
 805:src/xeq.c     **** }
 9277              		.loc 1 805 2 view .LVU2471
 805:src/xeq.c     **** }
 9278              		.loc 1 805 9 is_stmt 0 view .LVU2472
 9279 0038 6421     		movs	r1, #100
 9280 003a 0BA8     		add	r0, sp, #44
 9281              	.LVL672:
 805:src/xeq.c     **** }
 9282              		.loc 1 805 9 view .LVU2473
 9283 003c FFF7FEFF 		bl	getRegister
 9284              	.LVL673:
 805:src/xeq.c     **** }
 9285              		.loc 1 805 9 view .LVU2474
ARM GAS  /tmp/cciWh9P3.s 			page 300


 9286              	.LBE2008:
 9287              	.LBE2007:
 663:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9288              		.loc 1 663 2 is_stmt 1 view .LVU2475
 663:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9289              		.loc 1 663 5 is_stmt 0 view .LVU2476
 9290 0040 752C     		cmp	r4, #117
 664:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9291              		.loc 1 664 3 view .LVU2477
 9292 0042 02AC     		add	r4, sp, #8
 663:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9293              		.loc 1 663 5 view .LVU2478
 9294 0044 019B     		ldr	r3, [sp, #4]
 664:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9295              		.loc 1 664 3 view .LVU2479
 9296 0046 3246     		mov	r2, r6
 9297 0048 0BA9     		add	r1, sp, #44
 9298 004a 2046     		mov	r0, r4
 663:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9299              		.loc 1 663 5 view .LVU2480
 9300 004c 07D0     		beq	.L704
 9301              	.LVL674:
 666:src/xeq.c     **** 	setX(&res);
 9302              		.loc 1 666 3 is_stmt 1 view .LVU2481
 9303 004e FFF7FEFF 		bl	decNumberRoundDecimals
 9304              	.LVL675:
 9305              	.L702:
 667:src/xeq.c     **** }
 9306              		.loc 1 667 2 view .LVU2482
 9307              	.LBB2009:
 9308              	.LBI2009:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 9309              		.loc 1 808 6 view .LVU2483
 9310              	.LBB2010:
 809:src/xeq.c     **** }
 9311              		.loc 1 809 2 view .LVU2484
 9312 0052 2146     		mov	r1, r4
 9313 0054 6420     		movs	r0, #100
 9314 0056 FFF7FEFF 		bl	setRegister
 9315              	.LVL676:
 809:src/xeq.c     **** }
 9316              		.loc 1 809 2 is_stmt 0 view .LVU2485
 9317              	.LBE2010:
 9318              	.LBE2009:
 668:src/xeq.c     **** 
 9319              		.loc 1 668 1 view .LVU2486
 9320 005a 14B0     		add	sp, sp, #80
 9321              		.cfi_remember_state
 9322              		.cfi_def_cfa_offset 16
 9323              		@ sp needed
 9324 005c 70BD     		pop	{r4, r5, r6, pc}
 9325              	.LVL677:
 9326              	.L704:
 9327              		.cfi_restore_state
 664:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9328              		.loc 1 664 3 is_stmt 1 view .LVU2487
 9329 005e FFF7FEFF 		bl	decNumberRoundDigits
ARM GAS  /tmp/cciWh9P3.s 			page 301


 9330              	.LVL678:
 664:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9331              		.loc 1 664 3 is_stmt 0 view .LVU2488
 9332 0062 F6E7     		b	.L702
 9333              	.L706:
 9334              		.align	2
 9335              	.L705:
 9336 0064 00000000 		.word	main_ram
 9337 0068 00000000 		.word	Error
 9338 006c 00000000 		.word	.LANCHOR1
 9339              		.cfi_endproc
 9340              	.LFE40:
 9342              		.section	.text.setY,"ax",%progbits
 9343              		.align	1
 9344              		.p2align 2,,3
 9345              		.global	setY
 9346              		.syntax unified
 9347              		.thumb
 9348              		.thumb_func
 9349              		.fpu fpv4-sp-d16
 9351              	setY:
 9352              	.LVL679:
 9353              	.LFB62:
 816:src/xeq.c     **** 	setRegister(regY_idx, y);
 9354              		.loc 1 816 31 is_stmt 1 view -0
 9355              		.cfi_startproc
 9356              		@ args = 0, pretend = 0, frame = 0
 9357              		@ frame_needed = 0, uses_anonymous_args = 0
 9358              		@ link register save eliminated.
 817:src/xeq.c     **** }
 9359              		.loc 1 817 2 view .LVU2490
 816:src/xeq.c     **** 	setRegister(regY_idx, y);
 9360              		.loc 1 816 31 is_stmt 0 view .LVU2491
 9361 0000 0146     		mov	r1, r0
 817:src/xeq.c     **** }
 9362              		.loc 1 817 2 view .LVU2492
 9363 0002 6520     		movs	r0, #101
 9364              	.LVL680:
 817:src/xeq.c     **** }
 9365              		.loc 1 817 2 view .LVU2493
 9366 0004 FFF7FEBF 		b	setRegister
 9367              	.LVL681:
 817:src/xeq.c     **** }
 9368              		.loc 1 817 2 view .LVU2494
 9369              		.cfi_endproc
 9370              	.LFE62:
 9372              		.section	.text.setXY,"ax",%progbits
 9373              		.align	1
 9374              		.p2align 2,,3
 9375              		.global	setXY
 9376              		.syntax unified
 9377              		.thumb
 9378              		.thumb_func
 9379              		.fpu fpv4-sp-d16
 9381              	setXY:
 9382              	.LVL682:
 9383              	.LFB66:
ARM GAS  /tmp/cciWh9P3.s 			page 302


 839:src/xeq.c     **** 	setX(x);
 9384              		.loc 1 839 52 is_stmt 1 view -0
 9385              		.cfi_startproc
 9386              		@ args = 0, pretend = 0, frame = 0
 9387              		@ frame_needed = 0, uses_anonymous_args = 0
 840:src/xeq.c     **** 	setY(y);
 9388              		.loc 1 840 2 view .LVU2496
 9389              	.LBB2011:
 9390              	.LBI2011:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 9391              		.loc 1 808 6 view .LVU2497
 9392              	.LBB2012:
 809:src/xeq.c     **** }
 9393              		.loc 1 809 2 view .LVU2498
 9394              	.LBE2012:
 9395              	.LBE2011:
 839:src/xeq.c     **** 	setX(x);
 9396              		.loc 1 839 52 is_stmt 0 view .LVU2499
 9397 0000 10B5     		push	{r4, lr}
 9398              		.cfi_def_cfa_offset 8
 9399              		.cfi_offset 4, -8
 9400              		.cfi_offset 14, -4
 839:src/xeq.c     **** 	setX(x);
 9401              		.loc 1 839 52 view .LVU2500
 9402 0002 0C46     		mov	r4, r1
 9403              	.LBB2014:
 9404              	.LBB2013:
 809:src/xeq.c     **** }
 9405              		.loc 1 809 2 view .LVU2501
 9406 0004 0146     		mov	r1, r0
 9407              	.LVL683:
 809:src/xeq.c     **** }
 9408              		.loc 1 809 2 view .LVU2502
 9409 0006 6420     		movs	r0, #100
 9410              	.LVL684:
 809:src/xeq.c     **** }
 9411              		.loc 1 809 2 view .LVU2503
 9412 0008 FFF7FEFF 		bl	setRegister
 9413              	.LVL685:
 809:src/xeq.c     **** }
 9414              		.loc 1 809 2 view .LVU2504
 9415              	.LBE2013:
 9416              	.LBE2014:
 841:src/xeq.c     **** }
 9417              		.loc 1 841 2 is_stmt 1 view .LVU2505
 9418              	.LBB2015:
 9419              	.LBI2015:
 816:src/xeq.c     **** 	setRegister(regY_idx, y);
 9420              		.loc 1 816 6 view .LVU2506
 9421              	.LBB2016:
 817:src/xeq.c     **** }
 9422              		.loc 1 817 2 view .LVU2507
 9423 000c 2146     		mov	r1, r4
 9424 000e 6520     		movs	r0, #101
 9425              	.LBE2016:
 9426              	.LBE2015:
 842:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 303


 9427              		.loc 1 842 1 is_stmt 0 view .LVU2508
 9428 0010 BDE81040 		pop	{r4, lr}
 9429              		.cfi_restore 14
 9430              		.cfi_restore 4
 9431              		.cfi_def_cfa_offset 0
 9432              	.LVL686:
 9433              	.LBB2018:
 9434              	.LBB2017:
 817:src/xeq.c     **** }
 9435              		.loc 1 817 2 view .LVU2509
 9436 0014 FFF7FEBF 		b	setRegister
 9437              	.LVL687:
 817:src/xeq.c     **** }
 9438              		.loc 1 817 2 view .LVU2510
 9439              	.LBE2017:
 9440              	.LBE2018:
 9441              		.cfi_endproc
 9442              	.LFE66:
 9444              		.section	.text.get_reg_n_int,"ax",%progbits
 9445              		.align	1
 9446              		.p2align 2,,3
 9447              		.global	get_reg_n_int
 9448              		.syntax unified
 9449              		.thumb
 9450              		.thumb_func
 9451              		.fpu fpv4-sp-d16
 9453              	get_reg_n_int:
 9454              	.LVL688:
 9455              	.LFB90:
1229:src/xeq.c     **** 	long long int ll;
 9456              		.loc 1 1229 40 is_stmt 1 view -0
 9457              		.cfi_startproc
 9458              		@ args = 0, pretend = 0, frame = 8
 9459              		@ frame_needed = 0, uses_anonymous_args = 0
1230:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
 9460              		.loc 1 1230 2 view .LVU2512
1231:src/xeq.c     **** 	return ll;
 9461              		.loc 1 1231 2 view .LVU2513
1229:src/xeq.c     **** 	long long int ll;
 9462              		.loc 1 1229 40 is_stmt 0 view .LVU2514
 9463 0000 00B5     		push	{lr}
 9464              		.cfi_def_cfa_offset 4
 9465              		.cfi_offset 14, -4
 9466 0002 83B0     		sub	sp, sp, #12
 9467              		.cfi_def_cfa_offset 16
1231:src/xeq.c     **** 	return ll;
 9468              		.loc 1 1231 13 view .LVU2515
 9469 0004 FFF7FEFF 		bl	get_reg_n
 9470              	.LVL689:
1231:src/xeq.c     **** 	return ll;
 9471              		.loc 1 1231 2 view .LVU2516
 9472 0008 0822     		movs	r2, #8
1231:src/xeq.c     **** 	return ll;
 9473              		.loc 1 1231 13 view .LVU2517
 9474 000a 0146     		mov	r1, r0
1231:src/xeq.c     **** 	return ll;
 9475              		.loc 1 1231 2 view .LVU2518
ARM GAS  /tmp/cciWh9P3.s 			page 304


 9476 000c 6846     		mov	r0, sp
 9477 000e FFF7FEFF 		bl	xcopy
 9478              	.LVL690:
1232:src/xeq.c     **** }
 9479              		.loc 1 1232 2 is_stmt 1 view .LVU2519
1233:src/xeq.c     **** 
 9480              		.loc 1 1233 1 is_stmt 0 view .LVU2520
 9481 0012 DDE90001 		ldrd	r0, [sp]
 9482 0016 03B0     		add	sp, sp, #12
 9483              		.cfi_def_cfa_offset 4
 9484              		@ sp needed
 9485 0018 5DF804FB 		ldr	pc, [sp], #4
 9486              		.cfi_endproc
 9487              	.LFE90:
 9489              		.section	.text.storcl_intop,"ax",%progbits
 9490              		.align	1
 9491              		.p2align 2,,3
 9492              		.syntax unified
 9493              		.thumb
 9494              		.thumb_func
 9495              		.fpu fpv4-sp-d16
 9497              	storcl_intop:
 9498              	.LVL691:
 9499              	.LFB112:
1484:src/xeq.c     **** 	long long int x, y;
 9500              		.loc 1 1484 83 is_stmt 1 view -0
 9501              		.cfi_startproc
 9502              		@ args = 0, pretend = 0, frame = 0
 9503              		@ frame_needed = 0, uses_anonymous_args = 0
1485:src/xeq.c     **** 
 9504              		.loc 1 1485 2 view .LVU2522
1487:src/xeq.c     **** 	y = get_reg_n_int(index);
 9505              		.loc 1 1487 2 view .LVU2523
 9506              	.LBB2019:
 9507              	.LBI2019:
1255:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 9508              		.loc 1 1255 15 view .LVU2524
 9509              	.LBB2020:
1256:src/xeq.c     **** }
 9510              		.loc 1 1256 2 view .LVU2525
 9511              	.LBE2020:
 9512              	.LBE2019:
1484:src/xeq.c     **** 	long long int x, y;
 9513              		.loc 1 1484 83 is_stmt 0 view .LVU2526
 9514 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 9515              		.cfi_def_cfa_offset 32
 9516              		.cfi_offset 3, -32
 9517              		.cfi_offset 4, -28
 9518              		.cfi_offset 5, -24
 9519              		.cfi_offset 6, -20
 9520              		.cfi_offset 7, -16
 9521              		.cfi_offset 8, -12
 9522              		.cfi_offset 9, -8
 9523              		.cfi_offset 14, -4
1484:src/xeq.c     **** 	long long int x, y;
 9524              		.loc 1 1484 83 view .LVU2527
 9525 0004 0446     		mov	r4, r0
ARM GAS  /tmp/cciWh9P3.s 			page 305


 9526              	.LBB2024:
 9527              	.LBB2021:
1256:src/xeq.c     **** }
 9528              		.loc 1 1256 9 view .LVU2528
 9529 0006 6420     		movs	r0, #100
 9530              	.LVL692:
1256:src/xeq.c     **** }
 9531              		.loc 1 1256 9 view .LVU2529
 9532              	.LBE2021:
 9533              	.LBE2024:
1484:src/xeq.c     **** 	long long int x, y;
 9534              		.loc 1 1484 83 view .LVU2530
 9535 0008 8946     		mov	r9, r1
 9536 000a 9846     		mov	r8, r3
 9537 000c 1646     		mov	r6, r2
 9538              	.LBB2025:
 9539              	.LBB2022:
1256:src/xeq.c     **** }
 9540              		.loc 1 1256 9 view .LVU2531
 9541 000e FFF7FEFF 		bl	get_reg_n_int
 9542              	.LVL693:
1256:src/xeq.c     **** }
 9543              		.loc 1 1256 9 view .LVU2532
 9544 0012 0746     		mov	r7, r0
 9545              	.LBE2022:
 9546              	.LBE2025:
1488:src/xeq.c     **** 
 9547              		.loc 1 1488 6 view .LVU2533
 9548 0014 4846     		mov	r0, r9
 9549              	.LBB2026:
 9550              	.LBB2023:
1256:src/xeq.c     **** }
 9551              		.loc 1 1256 9 view .LVU2534
 9552 0016 0D46     		mov	r5, r1
 9553              	.LVL694:
1256:src/xeq.c     **** }
 9554              		.loc 1 1256 9 view .LVU2535
 9555              	.LBE2023:
 9556              	.LBE2026:
1488:src/xeq.c     **** 
 9557              		.loc 1 1488 2 is_stmt 1 view .LVU2536
1488:src/xeq.c     **** 
 9558              		.loc 1 1488 6 is_stmt 0 view .LVU2537
 9559 0018 FFF7FEFF 		bl	get_reg_n_int
 9560              	.LVL695:
1490:src/xeq.c     **** 		const long long int t = x;
 9561              		.loc 1 1490 2 is_stmt 1 view .LVU2538
1490:src/xeq.c     **** 		const long long int t = x;
 9562              		.loc 1 1490 5 is_stmt 0 view .LVU2539
 9563 001c B8F1000F 		cmp	r8, #0
 9564 0020 05D0     		beq	.L713
 9565 0022 3A46     		mov	r2, r7
 9566 0024 2B46     		mov	r3, r5
 9567              	.LBB2027:
1492:src/xeq.c     **** 		y = t;
 9568              		.loc 1 1492 5 view .LVU2540
 9569 0026 0746     		mov	r7, r0
ARM GAS  /tmp/cciWh9P3.s 			page 306


 9570              	.LVL696:
1492:src/xeq.c     **** 		y = t;
 9571              		.loc 1 1492 5 view .LVU2541
 9572 0028 0D46     		mov	r5, r1
 9573              	.LVL697:
1493:src/xeq.c     **** 	}
 9574              		.loc 1 1493 5 view .LVU2542
 9575 002a 1046     		mov	r0, r2
 9576              	.LVL698:
1493:src/xeq.c     **** 	}
 9577              		.loc 1 1493 5 view .LVU2543
 9578 002c 1946     		mov	r1, r3
 9579              	.LVL699:
 9580              	.L713:
1493:src/xeq.c     **** 	}
 9581              		.loc 1 1493 5 view .LVU2544
 9582              	.LBE2027:
1496:src/xeq.c     **** 	case 1:
 9583              		.loc 1 1496 2 is_stmt 1 view .LVU2545
 9584 002e 013C     		subs	r4, r4, #1
 9585 0030 052C     		cmp	r4, #5
 9586 0032 3AD8     		bhi	.L722
 9587 0034 DFE804F0 		tbb	[pc, r4]
 9588              	.L716:
 9589 0038 0C       		.byte	(.L721-.L716)/2
 9590 0039 15       		.byte	(.L720-.L716)/2
 9591 003a 1E       		.byte	(.L719-.L716)/2
 9592 003b 27       		.byte	(.L718-.L716)/2
 9593 003c 30       		.byte	(.L717-.L716)/2
 9594 003d 03       		.byte	(.L715-.L716)/2
 9595              		.p2align 1
 9596              	.L715:
1513:src/xeq.c     **** 		break;
 9597              		.loc 1 1513 3 view .LVU2546
1513:src/xeq.c     **** 		break;
 9598              		.loc 1 1513 8 is_stmt 0 view .LVU2547
 9599 003e 3A46     		mov	r2, r7
 9600 0040 2B46     		mov	r3, r5
 9601 0042 FFF7FEFF 		bl	intMax
 9602              	.LVL700:
1513:src/xeq.c     **** 		break;
 9603              		.loc 1 1513 6 view .LVU2548
 9604 0046 C6E90001 		strd	r0, [r6]
1514:src/xeq.c     **** 	default:
 9605              		.loc 1 1514 3 is_stmt 1 view .LVU2549
1518:src/xeq.c     **** }
 9606              		.loc 1 1518 9 is_stmt 0 view .LVU2550
 9607 004a 0020     		movs	r0, #0
 9608              	.L712:
1519:src/xeq.c     **** 
 9609              		.loc 1 1519 1 view .LVU2551
 9610 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9611              	.LVL701:
 9612              	.L721:
1498:src/xeq.c     **** 		break;
 9613              		.loc 1 1498 3 is_stmt 1 view .LVU2552
1498:src/xeq.c     **** 		break;
ARM GAS  /tmp/cciWh9P3.s 			page 307


 9614              		.loc 1 1498 8 is_stmt 0 view .LVU2553
 9615 0050 3A46     		mov	r2, r7
 9616 0052 2B46     		mov	r3, r5
 9617 0054 FFF7FEFF 		bl	intAdd
 9618              	.LVL702:
1498:src/xeq.c     **** 		break;
 9619              		.loc 1 1498 6 view .LVU2554
 9620 0058 C6E90001 		strd	r0, [r6]
1499:src/xeq.c     **** 	case 2:
 9621              		.loc 1 1499 3 is_stmt 1 view .LVU2555
1518:src/xeq.c     **** }
 9622              		.loc 1 1518 9 is_stmt 0 view .LVU2556
 9623 005c 0020     		movs	r0, #0
1519:src/xeq.c     **** 
 9624              		.loc 1 1519 1 view .LVU2557
 9625 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9626              	.LVL703:
 9627              	.L720:
1501:src/xeq.c     **** 		break;
 9628              		.loc 1 1501 3 is_stmt 1 view .LVU2558
1501:src/xeq.c     **** 		break;
 9629              		.loc 1 1501 8 is_stmt 0 view .LVU2559
 9630 0062 3A46     		mov	r2, r7
 9631 0064 2B46     		mov	r3, r5
 9632 0066 FFF7FEFF 		bl	intSubtract
 9633              	.LVL704:
1501:src/xeq.c     **** 		break;
 9634              		.loc 1 1501 6 view .LVU2560
 9635 006a C6E90001 		strd	r0, [r6]
1502:src/xeq.c     **** 	case 3:
 9636              		.loc 1 1502 3 is_stmt 1 view .LVU2561
1518:src/xeq.c     **** }
 9637              		.loc 1 1518 9 is_stmt 0 view .LVU2562
 9638 006e 0020     		movs	r0, #0
1519:src/xeq.c     **** 
 9639              		.loc 1 1519 1 view .LVU2563
 9640 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9641              	.LVL705:
 9642              	.L719:
1504:src/xeq.c     **** 		break;
 9643              		.loc 1 1504 3 is_stmt 1 view .LVU2564
1504:src/xeq.c     **** 		break;
 9644              		.loc 1 1504 8 is_stmt 0 view .LVU2565
 9645 0074 3A46     		mov	r2, r7
 9646 0076 2B46     		mov	r3, r5
 9647 0078 FFF7FEFF 		bl	intMultiply
 9648              	.LVL706:
1504:src/xeq.c     **** 		break;
 9649              		.loc 1 1504 6 view .LVU2566
 9650 007c C6E90001 		strd	r0, [r6]
1505:src/xeq.c     **** 	case 4:
 9651              		.loc 1 1505 3 is_stmt 1 view .LVU2567
1518:src/xeq.c     **** }
 9652              		.loc 1 1518 9 is_stmt 0 view .LVU2568
 9653 0080 0020     		movs	r0, #0
1519:src/xeq.c     **** 
 9654              		.loc 1 1519 1 view .LVU2569
ARM GAS  /tmp/cciWh9P3.s 			page 308


 9655 0082 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9656              	.LVL707:
 9657              	.L718:
1507:src/xeq.c     **** 		break;
 9658              		.loc 1 1507 3 is_stmt 1 view .LVU2570
1507:src/xeq.c     **** 		break;
 9659              		.loc 1 1507 8 is_stmt 0 view .LVU2571
 9660 0086 3A46     		mov	r2, r7
 9661 0088 2B46     		mov	r3, r5
 9662 008a FFF7FEFF 		bl	intDivide
 9663              	.LVL708:
1507:src/xeq.c     **** 		break;
 9664              		.loc 1 1507 6 view .LVU2572
 9665 008e C6E90001 		strd	r0, [r6]
1508:src/xeq.c     **** 	case 5:
 9666              		.loc 1 1508 3 is_stmt 1 view .LVU2573
1518:src/xeq.c     **** }
 9667              		.loc 1 1518 9 is_stmt 0 view .LVU2574
 9668 0092 0020     		movs	r0, #0
1519:src/xeq.c     **** 
 9669              		.loc 1 1519 1 view .LVU2575
 9670 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9671              	.LVL709:
 9672              	.L717:
1510:src/xeq.c     **** 		break;
 9673              		.loc 1 1510 3 is_stmt 1 view .LVU2576
1510:src/xeq.c     **** 		break;
 9674              		.loc 1 1510 8 is_stmt 0 view .LVU2577
 9675 0098 3A46     		mov	r2, r7
 9676 009a 2B46     		mov	r3, r5
 9677 009c FFF7FEFF 		bl	intMin
 9678              	.LVL710:
1510:src/xeq.c     **** 		break;
 9679              		.loc 1 1510 6 view .LVU2578
 9680 00a0 C6E90001 		strd	r0, [r6]
1511:src/xeq.c     **** 	case 6:
 9681              		.loc 1 1511 3 is_stmt 1 view .LVU2579
1518:src/xeq.c     **** }
 9682              		.loc 1 1518 9 is_stmt 0 view .LVU2580
 9683 00a4 0020     		movs	r0, #0
1519:src/xeq.c     **** 
 9684              		.loc 1 1519 1 view .LVU2581
 9685 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9686              	.LVL711:
 9687              	.L722:
1518:src/xeq.c     **** }
 9688              		.loc 1 1518 9 view .LVU2582
 9689 00aa 0120     		movs	r0, #1
 9690              	.LVL712:
1518:src/xeq.c     **** }
 9691              		.loc 1 1518 9 view .LVU2583
 9692 00ac CEE7     		b	.L712
 9693              		.cfi_endproc
 9694              	.LFE112:
 9696 00ae 00BF     		.section	.text.incdec,"ax",%progbits
 9697              		.align	1
 9698              		.p2align 2,,3
ARM GAS  /tmp/cciWh9P3.s 			page 309


 9699              		.syntax unified
 9700              		.thumb
 9701              		.thumb_func
 9702              		.fpu fpv4-sp-d16
 9704              	incdec:
 9705              	.LVL713:
 9706              	.LFB186:
3162:src/xeq.c     **** 	if (is_intmode()) {
 9707              		.loc 1 3162 46 is_stmt 1 view -0
 9708              		.cfi_startproc
 9709              		@ args = 0, pretend = 0, frame = 80
 9710              		@ frame_needed = 0, uses_anonymous_args = 0
3163:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9711              		.loc 1 3163 2 view .LVU2585
3163:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9712              		.loc 1 3163 6 is_stmt 0 view .LVU2586
 9713 0000 244B     		ldr	r3, .L737
3162:src/xeq.c     **** 	if (is_intmode()) {
 9714              		.loc 1 3162 46 view .LVU2587
 9715 0002 70B5     		push	{r4, r5, r6, lr}
 9716              		.cfi_def_cfa_offset 16
 9717              		.cfi_offset 4, -16
 9718              		.cfi_offset 5, -12
 9719              		.cfi_offset 6, -8
 9720              		.cfi_offset 14, -4
3163:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9721              		.loc 1 3163 6 view .LVU2588
 9722 0004 1B68     		ldr	r3, [r3]
 9723 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3163:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9724              		.loc 1 3163 5 view .LVU2589
 9725 000a DB07     		lsls	r3, r3, #31
3162:src/xeq.c     **** 	if (is_intmode()) {
 9726              		.loc 1 3162 46 view .LVU2590
 9727 000c 94B0     		sub	sp, sp, #80
 9728              		.cfi_def_cfa_offset 96
3162:src/xeq.c     **** 	if (is_intmode()) {
 9729              		.loc 1 3162 46 view .LVU2591
 9730 000e 0D46     		mov	r5, r1
 9731 0010 0446     		mov	r4, r0
3163:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 9732              		.loc 1 3163 5 view .LVU2592
 9733 0012 1ED5     		bpl	.L728
 9734              	.LVL714:
 9735              	.LBB2035:
 9736              	.LBI2035:
3162:src/xeq.c     **** 	if (is_intmode()) {
 9737              		.loc 1 3162 12 is_stmt 1 view .LVU2593
 9738              	.LBB2036:
3164:src/xeq.c     **** 		int xs;
 9739              		.loc 1 3164 3 view .LVU2594
3164:src/xeq.c     **** 		int xs;
 9740              		.loc 1 3164 21 is_stmt 0 view .LVU2595
 9741 0014 FFF7FEFF 		bl	get_reg_n_int
 9742              	.LVL715:
3165:src/xeq.c     **** 		unsigned long long int xv;
 9743              		.loc 1 3165 3 is_stmt 1 view .LVU2596
ARM GAS  /tmp/cciWh9P3.s 			page 310


3166:src/xeq.c     **** 
 9744              		.loc 1 3166 3 view .LVU2597
3168:src/xeq.c     **** 			x = intAdd(x, 1LL);
 9745              		.loc 1 3168 3 view .LVU2598
3169:src/xeq.c     **** 		else
 9746              		.loc 1 3169 8 is_stmt 0 view .LVU2599
 9747 0018 0122     		movs	r2, #1
 9748 001a 0023     		movs	r3, #0
3168:src/xeq.c     **** 			x = intAdd(x, 1LL);
 9749              		.loc 1 3168 6 view .LVU2600
 9750 001c 002D     		cmp	r5, #0
 9751 001e 33D1     		bne	.L735
3171:src/xeq.c     **** 		set_reg_n_int(arg, x);
 9752              		.loc 1 3171 4 is_stmt 1 view .LVU2601
3171:src/xeq.c     **** 		set_reg_n_int(arg, x);
 9753              		.loc 1 3171 8 is_stmt 0 view .LVU2602
 9754 0020 FFF7FEFF 		bl	intSubtract
 9755              	.LVL716:
3171:src/xeq.c     **** 		set_reg_n_int(arg, x);
 9756              		.loc 1 3171 8 view .LVU2603
 9757 0024 0646     		mov	r6, r0
 9758 0026 0D46     		mov	r5, r1
 9759              	.LVL717:
 9760              	.L730:
3172:src/xeq.c     **** 
 9761              		.loc 1 3172 3 is_stmt 1 view .LVU2604
 9762              	.LBB2037:
 9763              	.LBB2038:
1236:src/xeq.c     **** }
 9764              		.loc 1 1236 8 is_stmt 0 view .LVU2605
 9765 0028 2046     		mov	r0, r4
 9766 002a CDE90A65 		strd	r6, r5, [sp, #40]
 9767              	.LVL718:
1236:src/xeq.c     **** }
 9768              		.loc 1 1236 8 view .LVU2606
 9769              	.LBE2038:
 9770              	.LBI2037:
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9771              		.loc 1 1235 6 is_stmt 1 view .LVU2607
 9772              	.LBB2039:
1236:src/xeq.c     **** }
 9773              		.loc 1 1236 2 view .LVU2608
1236:src/xeq.c     **** }
 9774              		.loc 1 1236 8 is_stmt 0 view .LVU2609
 9775 002e FFF7FEFF 		bl	get_reg_n
 9776              	.LVL719:
1236:src/xeq.c     **** }
 9777              		.loc 1 1236 2 view .LVU2610
 9778 0032 0AA9     		add	r1, sp, #40
 9779 0034 0822     		movs	r2, #8
 9780 0036 FFF7FEFF 		bl	xcopy
 9781              	.LVL720:
1236:src/xeq.c     **** }
 9782              		.loc 1 1236 2 view .LVU2611
 9783              	.LBE2039:
 9784              	.LBE2037:
3174:src/xeq.c     **** 		return xv != 0;
ARM GAS  /tmp/cciWh9P3.s 			page 311


 9785              		.loc 1 3174 3 is_stmt 1 view .LVU2612
3174:src/xeq.c     **** 		return xv != 0;
 9786              		.loc 1 3174 8 is_stmt 0 view .LVU2613
 9787 003a 0AAA     		add	r2, sp, #40
 9788 003c 3046     		mov	r0, r6
 9789 003e 2946     		mov	r1, r5
 9790 0040 FFF7FEFF 		bl	extract_value
 9791              	.LVL721:
3175:src/xeq.c     **** 	} else {
 9792              		.loc 1 3175 3 is_stmt 1 view .LVU2614
3175:src/xeq.c     **** 	} else {
 9793              		.loc 1 3175 13 is_stmt 0 view .LVU2615
 9794 0044 50EA0103 		orrs	r3, r0, r1
 9795 0048 14BF     		ite	ne
 9796 004a 0120     		movne	r0, #1
 9797              	.LVL722:
3175:src/xeq.c     **** 	} else {
 9798              		.loc 1 3175 13 view .LVU2616
 9799 004c 0020     		moveq	r0, #0
 9800              	.LVL723:
3175:src/xeq.c     **** 	} else {
 9801              		.loc 1 3175 13 view .LVU2617
 9802              	.LBE2036:
 9803              	.LBE2035:
3188:src/xeq.c     **** 
 9804              		.loc 1 3188 1 view .LVU2618
 9805 004e 14B0     		add	sp, sp, #80
 9806              		.cfi_remember_state
 9807              		.cfi_def_cfa_offset 16
 9808              		@ sp needed
 9809 0050 70BD     		pop	{r4, r5, r6, pc}
 9810              	.LVL724:
 9811              	.L728:
 9812              		.cfi_restore_state
 9813              	.LBB2041:
3177:src/xeq.c     **** 
 9814              		.loc 1 3177 3 is_stmt 1 view .LVU2619
3179:src/xeq.c     **** 		if (inc)
 9815              		.loc 1 3179 3 view .LVU2620
 9816 0052 01A8     		add	r0, sp, #4
 9817              	.LVL725:
3179:src/xeq.c     **** 		if (inc)
 9818              		.loc 1 3179 3 is_stmt 0 view .LVU2621
 9819 0054 2146     		mov	r1, r4
 9820              	.LVL726:
3179:src/xeq.c     **** 		if (inc)
 9821              		.loc 1 3179 3 view .LVU2622
 9822 0056 FFF7FEFF 		bl	getRegister
 9823              	.LVL727:
3180:src/xeq.c     **** 			dn_inc(&x);
 9824              		.loc 1 3180 3 is_stmt 1 view .LVU2623
3181:src/xeq.c     **** 		else
 9825              		.loc 1 3181 4 is_stmt 0 view .LVU2624
 9826 005a 01A8     		add	r0, sp, #4
3180:src/xeq.c     **** 			dn_inc(&x);
 9827              		.loc 1 3180 6 view .LVU2625
 9828 005c 8DB9     		cbnz	r5, .L736
ARM GAS  /tmp/cciWh9P3.s 			page 312


3183:src/xeq.c     **** 		setRegister(arg, &x);
 9829              		.loc 1 3183 4 is_stmt 1 view .LVU2626
 9830 005e FFF7FEFF 		bl	dn_dec
 9831              	.LVL728:
 9832              	.L733:
3184:src/xeq.c     **** 		decNumberTrunc(&y, &x);
 9833              		.loc 1 3184 3 view .LVU2627
 9834 0062 2046     		mov	r0, r4
 9835 0064 01A9     		add	r1, sp, #4
 9836 0066 FFF7FEFF 		bl	setRegister
 9837              	.LVL729:
3185:src/xeq.c     **** 		return ! dn_eq0(&y);
 9838              		.loc 1 3185 3 view .LVU2628
 9839 006a 01A9     		add	r1, sp, #4
 9840 006c 0AA8     		add	r0, sp, #40
 9841 006e FFF7FEFF 		bl	decNumberTrunc
 9842              	.LVL730:
3186:src/xeq.c     **** 	}
 9843              		.loc 1 3186 3 view .LVU2629
3186:src/xeq.c     **** 	}
 9844              		.loc 1 3186 12 is_stmt 0 view .LVU2630
 9845 0072 0AA8     		add	r0, sp, #40
 9846 0074 FFF7FEFF 		bl	dn_eq0
 9847              	.LVL731:
3186:src/xeq.c     **** 	}
 9848              		.loc 1 3186 10 view .LVU2631
 9849 0078 B0FA80F0 		clz	r0, r0
 9850 007c 4009     		lsrs	r0, r0, #5
 9851              	.LBE2041:
3188:src/xeq.c     **** 
 9852              		.loc 1 3188 1 view .LVU2632
 9853 007e 14B0     		add	sp, sp, #80
 9854              		.cfi_remember_state
 9855              		.cfi_def_cfa_offset 16
 9856              		@ sp needed
 9857 0080 70BD     		pop	{r4, r5, r6, pc}
 9858              	.LVL732:
 9859              	.L736:
 9860              		.cfi_restore_state
 9861              	.LBB2042:
3181:src/xeq.c     **** 		else
 9862              		.loc 1 3181 4 is_stmt 1 view .LVU2633
 9863 0082 FFF7FEFF 		bl	dn_inc
 9864              	.LVL733:
 9865 0086 ECE7     		b	.L733
 9866              	.LVL734:
 9867              	.L735:
3181:src/xeq.c     **** 		else
 9868              		.loc 1 3181 4 is_stmt 0 view .LVU2634
 9869              	.LBE2042:
 9870              	.LBB2043:
 9871              	.LBB2040:
3169:src/xeq.c     **** 		else
 9872              		.loc 1 3169 4 is_stmt 1 view .LVU2635
3169:src/xeq.c     **** 		else
 9873              		.loc 1 3169 8 is_stmt 0 view .LVU2636
 9874 0088 FFF7FEFF 		bl	intAdd
ARM GAS  /tmp/cciWh9P3.s 			page 313


 9875              	.LVL735:
3169:src/xeq.c     **** 		else
 9876              		.loc 1 3169 8 view .LVU2637
 9877 008c 0646     		mov	r6, r0
 9878 008e 0D46     		mov	r5, r1
 9879              	.LVL736:
3169:src/xeq.c     **** 		else
 9880              		.loc 1 3169 8 view .LVU2638
 9881 0090 CAE7     		b	.L730
 9882              	.L738:
 9883 0092 00BF     		.align	2
 9884              	.L737:
 9885 0094 00000000 		.word	main_ram
 9886              	.LBE2040:
 9887              	.LBE2043:
 9888              		.cfi_endproc
 9889              	.LFE186:
 9891              		.section	.text.set_reg_n_int,"ax",%progbits
 9892              		.align	1
 9893              		.p2align 2,,3
 9894              		.global	set_reg_n_int
 9895              		.syntax unified
 9896              		.thumb
 9897              		.thumb_func
 9898              		.fpu fpv4-sp-d16
 9900              	set_reg_n_int:
 9901              	.LVL737:
 9902              	.LFB91:
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9903              		.loc 1 1235 49 is_stmt 1 view -0
 9904              		.cfi_startproc
 9905              		@ args = 0, pretend = 0, frame = 8
 9906              		@ frame_needed = 0, uses_anonymous_args = 0
1236:src/xeq.c     **** }
 9907              		.loc 1 1236 2 view .LVU2640
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9908              		.loc 1 1235 49 is_stmt 0 view .LVU2641
 9909 0000 00B5     		push	{lr}
 9910              		.cfi_def_cfa_offset 4
 9911              		.cfi_offset 14, -4
 9912 0002 83B0     		sub	sp, sp, #12
 9913              		.cfi_def_cfa_offset 16
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 9914              		.loc 1 1235 49 view .LVU2642
 9915 0004 CDE90023 		strd	r2, [sp]
1236:src/xeq.c     **** }
 9916              		.loc 1 1236 8 view .LVU2643
 9917 0008 FFF7FEFF 		bl	get_reg_n
 9918              	.LVL738:
1236:src/xeq.c     **** }
 9919              		.loc 1 1236 2 view .LVU2644
 9920 000c 0822     		movs	r2, #8
 9921 000e 6946     		mov	r1, sp
 9922 0010 FFF7FEFF 		bl	xcopy
 9923              	.LVL739:
1237:src/xeq.c     **** 
 9924              		.loc 1 1237 1 view .LVU2645
ARM GAS  /tmp/cciWh9P3.s 			page 314


 9925 0014 03B0     		add	sp, sp, #12
 9926              		.cfi_def_cfa_offset 4
 9927              		@ sp needed
 9928 0016 5DF804FB 		ldr	pc, [sp], #4
 9929              		.cfi_endproc
 9930              	.LFE91:
 9932 001a 00BF     		.section	.text.get_reg_n_int_sgn,"ax",%progbits
 9933              		.align	1
 9934              		.p2align 2,,3
 9935              		.global	get_reg_n_int_sgn
 9936              		.syntax unified
 9937              		.thumb
 9938              		.thumb_func
 9939              		.fpu fpv4-sp-d16
 9941              	get_reg_n_int_sgn:
 9942              	.LVL740:
 9943              	.LFB92:
1241:src/xeq.c     **** 	if (is_intmode()) {
 9944              		.loc 1 1241 63 is_stmt 1 view -0
 9945              		.cfi_startproc
 9946              		@ args = 0, pretend = 0, frame = 40
 9947              		@ frame_needed = 0, uses_anonymous_args = 0
1242:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9948              		.loc 1 1242 2 view .LVU2647
1242:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9949              		.loc 1 1242 6 is_stmt 0 view .LVU2648
 9950 0000 0C4B     		ldr	r3, .L745
1241:src/xeq.c     **** 	if (is_intmode()) {
 9951              		.loc 1 1241 63 view .LVU2649
 9952 0002 10B5     		push	{r4, lr}
 9953              		.cfi_def_cfa_offset 8
 9954              		.cfi_offset 4, -8
 9955              		.cfi_offset 14, -4
1242:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9956              		.loc 1 1242 6 view .LVU2650
 9957 0004 1B68     		ldr	r3, [r3]
 9958 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1242:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9959              		.loc 1 1242 5 view .LVU2651
 9960 000a DB07     		lsls	r3, r3, #31
1241:src/xeq.c     **** 	if (is_intmode()) {
 9961              		.loc 1 1241 63 view .LVU2652
 9962 000c 8AB0     		sub	sp, sp, #40
 9963              		.cfi_def_cfa_offset 48
1241:src/xeq.c     **** 	if (is_intmode()) {
 9964              		.loc 1 1241 63 view .LVU2653
 9965 000e 0C46     		mov	r4, r1
1242:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 9966              		.loc 1 1242 5 view .LVU2654
 9967 0010 06D5     		bpl	.L742
 9968              	.LVL741:
 9969              	.LBB2048:
 9970              	.LBI2048:
1241:src/xeq.c     **** 	if (is_intmode()) {
 9971              		.loc 1 1241 24 is_stmt 1 view .LVU2655
 9972              	.LBB2049:
1243:src/xeq.c     **** 	} else {
ARM GAS  /tmp/cciWh9P3.s 			page 315


 9973              		.loc 1 1243 3 view .LVU2656
1243:src/xeq.c     **** 	} else {
 9974              		.loc 1 1243 10 is_stmt 0 view .LVU2657
 9975 0012 FFF7FEFF 		bl	get_reg_n_int
 9976              	.LVL742:
1243:src/xeq.c     **** 	} else {
 9977              		.loc 1 1243 10 view .LVU2658
 9978 0016 2246     		mov	r2, r4
 9979 0018 FFF7FEFF 		bl	extract_value
 9980              	.LVL743:
1243:src/xeq.c     **** 	} else {
 9981              		.loc 1 1243 10 view .LVU2659
 9982              	.LBE2049:
 9983              	.LBE2048:
1250:src/xeq.c     **** 
 9984              		.loc 1 1250 1 view .LVU2660
 9985 001c 0AB0     		add	sp, sp, #40
 9986              		.cfi_remember_state
 9987              		.cfi_def_cfa_offset 8
 9988              		@ sp needed
 9989 001e 10BD     		pop	{r4, pc}
 9990              	.LVL744:
 9991              	.L742:
 9992              		.cfi_restore_state
1250:src/xeq.c     **** 
 9993              		.loc 1 1250 1 view .LVU2661
 9994 0020 0146     		mov	r1, r0
 9995              	.LVL745:
 9996              	.LBB2050:
1245:src/xeq.c     **** 
 9997              		.loc 1 1245 3 is_stmt 1 view .LVU2662
1247:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 9998              		.loc 1 1247 3 view .LVU2663
 9999 0022 01A8     		add	r0, sp, #4
 10000              	.LVL746:
1247:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10001              		.loc 1 1247 3 is_stmt 0 view .LVU2664
 10002 0024 FFF7FEFF 		bl	getRegister
 10003              	.LVL747:
1248:src/xeq.c     **** 	}
 10004              		.loc 1 1248 3 is_stmt 1 view .LVU2665
1248:src/xeq.c     **** 	}
 10005              		.loc 1 1248 10 is_stmt 0 view .LVU2666
 10006 0028 2146     		mov	r1, r4
 10007 002a 01A8     		add	r0, sp, #4
 10008 002c FFF7FEFF 		bl	dn_to_ull
 10009              	.LVL748:
 10010              	.LBE2050:
1250:src/xeq.c     **** 
 10011              		.loc 1 1250 1 view .LVU2667
 10012 0030 0AB0     		add	sp, sp, #40
 10013              		.cfi_def_cfa_offset 8
 10014              		@ sp needed
 10015 0032 10BD     		pop	{r4, pc}
 10016              	.LVL749:
 10017              	.L746:
1250:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 316


 10018              		.loc 1 1250 1 view .LVU2668
 10019              		.align	2
 10020              	.L745:
 10021 0034 00000000 		.word	main_ram
 10022              		.cfi_endproc
 10023              	.LFE92:
 10025              		.section	.text.get_keycode_from_reg,"ax",%progbits
 10026              		.align	1
 10027              		.p2align 2,,3
 10028              		.syntax unified
 10029              		.thumb
 10030              		.thumb_func
 10031              		.fpu fpv4-sp-d16
 10033              	get_keycode_from_reg:
 10034              	.LVL750:
 10035              	.LFB136:
1856:src/xeq.c     **** 	int sgn;
 10036              		.loc 1 1856 1 is_stmt 1 view -0
 10037              		.cfi_startproc
 10038              		@ args = 0, pretend = 0, frame = 8
 10039              		@ frame_needed = 0, uses_anonymous_args = 0
1857:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
 10040              		.loc 1 1857 2 view .LVU2670
1858:src/xeq.c     **** 	if ( c < 0 )
 10041              		.loc 1 1858 2 view .LVU2671
1856:src/xeq.c     **** 	int sgn;
 10042              		.loc 1 1856 1 is_stmt 0 view .LVU2672
 10043 0000 00B5     		push	{lr}
 10044              		.cfi_def_cfa_offset 4
 10045              		.cfi_offset 14, -4
 10046 0002 83B0     		sub	sp, sp, #12
 10047              		.cfi_def_cfa_offset 16
1858:src/xeq.c     **** 	if ( c < 0 )
 10048              		.loc 1 1858 44 view .LVU2673
 10049 0004 01A9     		add	r1, sp, #4
 10050 0006 FFF7FEFF 		bl	get_reg_n_int_sgn
 10051              	.LVL751:
1858:src/xeq.c     **** 	if ( c < 0 )
 10052              		.loc 1 1858 16 view .LVU2674
 10053 000a FFF7FEFF 		bl	row_column_to_keycode
 10054              	.LVL752:
1859:src/xeq.c     **** 		report_err(ERR_RANGE);
 10055              		.loc 1 1859 2 is_stmt 1 view .LVU2675
1859:src/xeq.c     **** 		report_err(ERR_RANGE);
 10056              		.loc 1 1859 5 is_stmt 0 view .LVU2676
 10057 000e 0028     		cmp	r0, #0
1859:src/xeq.c     **** 		report_err(ERR_RANGE);
 10058              		.loc 1 1859 5 view .LVU2677
 10059 0010 02DB     		blt	.L750
 10060              	.L747:
1862:src/xeq.c     **** 
 10061              		.loc 1 1862 1 view .LVU2678
 10062 0012 03B0     		add	sp, sp, #12
 10063              		.cfi_remember_state
 10064              		.cfi_def_cfa_offset 4
 10065              		@ sp needed
 10066 0014 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/cciWh9P3.s 			page 317


 10067              	.L750:
 10068              		.cfi_restore_state
 10069              	.LBB2057:
 10070              	.LBI2057:
1855:src/xeq.c     **** {
 10071              		.loc 1 1855 12 is_stmt 1 view .LVU2679
 10072              	.LVL753:
 10073              	.LBB2058:
1860:src/xeq.c     **** 	return c;
 10074              		.loc 1 1860 3 view .LVU2680
 10075              	.LBB2059:
 10076              	.LBI2059:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10077              		.loc 1 536 5 view .LVU2681
 10078              	.LBB2060:
 537:src/xeq.c     **** 		Error = e;
 10079              		.loc 1 537 2 view .LVU2682
 537:src/xeq.c     **** 		Error = e;
 10080              		.loc 1 537 12 is_stmt 0 view .LVU2683
 10081 0018 044B     		ldr	r3, .L751
 537:src/xeq.c     **** 		Error = e;
 10082              		.loc 1 537 5 view .LVU2684
 10083 001a 1A68     		ldr	r2, [r3]
 10084 001c 002A     		cmp	r2, #0
 10085 001e F8D1     		bne	.L747
 10086              	.LVL754:
 10087              	.LBB2061:
 10088              	.LBI2061:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10089              		.loc 1 536 5 is_stmt 1 view .LVU2685
 10090              	.LBB2062:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 10091              		.loc 1 538 3 view .LVU2686
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 10092              		.loc 1 538 9 is_stmt 0 view .LVU2687
 10093 0020 0822     		movs	r2, #8
 10094 0022 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 10095              		.loc 1 539 3 is_stmt 1 view .LVU2688
 10096              	.LVL755:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 10097              		.loc 1 539 3 is_stmt 0 view .LVU2689
 10098              	.LBE2062:
 10099              	.LBE2061:
 10100              	.LBE2060:
 10101              	.LBE2059:
 10102              	.LBE2058:
 10103              	.LBE2057:
1861:src/xeq.c     **** }
 10104              		.loc 1 1861 2 is_stmt 1 view .LVU2690
1862:src/xeq.c     **** 
 10105              		.loc 1 1862 1 is_stmt 0 view .LVU2691
 10106 0024 03B0     		add	sp, sp, #12
 10107              		.cfi_def_cfa_offset 4
 10108              		@ sp needed
 10109 0026 5DF804FB 		ldr	pc, [sp], #4
 10110              	.L752:
ARM GAS  /tmp/cciWh9P3.s 			page 318


 10111 002a 00BF     		.align	2
 10112              	.L751:
 10113 002c 00000000 		.word	Error
 10114              		.cfi_endproc
 10115              	.LFE136:
 10117              		.section	.text.getX_int,"ax",%progbits
 10118              		.align	1
 10119              		.p2align 2,,3
 10120              		.global	getX_int
 10121              		.syntax unified
 10122              		.thumb
 10123              		.thumb_func
 10124              		.fpu fpv4-sp-d16
 10126              	getX_int:
 10127              	.LFB93:
1255:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10128              		.loc 1 1255 30 is_stmt 1 view -0
 10129              		.cfi_startproc
 10130              		@ args = 0, pretend = 0, frame = 0
 10131              		@ frame_needed = 0, uses_anonymous_args = 0
 10132              		@ link register save eliminated.
1256:src/xeq.c     **** }
 10133              		.loc 1 1256 2 view .LVU2693
1256:src/xeq.c     **** }
 10134              		.loc 1 1256 9 is_stmt 0 view .LVU2694
 10135 0000 6420     		movs	r0, #100
 10136 0002 FFF7FEBF 		b	get_reg_n_int
 10137              	.LVL756:
 10138              		.cfi_endproc
 10139              	.LFE93:
 10141 0006 00BF     		.section	.text.getX_int_sgn,"ax",%progbits
 10142              		.align	1
 10143              		.p2align 2,,3
 10144              		.global	getX_int_sgn
 10145              		.syntax unified
 10146              		.thumb
 10147              		.thumb_func
 10148              		.fpu fpv4-sp-d16
 10150              	getX_int_sgn:
 10151              	.LVL757:
 10152              	.LFB94:
1259:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10153              		.loc 1 1259 47 is_stmt 1 view -0
 10154              		.cfi_startproc
 10155              		@ args = 0, pretend = 0, frame = 0
 10156              		@ frame_needed = 0, uses_anonymous_args = 0
 10157              		@ link register save eliminated.
1260:src/xeq.c     **** }
 10158              		.loc 1 1260 2 view .LVU2696
1259:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10159              		.loc 1 1259 47 is_stmt 0 view .LVU2697
 10160 0000 0146     		mov	r1, r0
1260:src/xeq.c     **** }
 10161              		.loc 1 1260 9 view .LVU2698
 10162 0002 6420     		movs	r0, #100
 10163              	.LVL758:
1260:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 319


 10164              		.loc 1 1260 9 view .LVU2699
 10165 0004 FFF7FEBF 		b	get_reg_n_int_sgn
 10166              	.LVL759:
1260:src/xeq.c     **** }
 10167              		.loc 1 1260 9 view .LVU2700
 10168              		.cfi_endproc
 10169              	.LFE94:
 10171              		.section	.text.set_reg_n_int_sgn,"ax",%progbits
 10172              		.align	1
 10173              		.p2align 2,,3
 10174              		.global	set_reg_n_int_sgn
 10175              		.syntax unified
 10176              		.thumb
 10177              		.thumb_func
 10178              		.fpu fpv4-sp-d16
 10180              	set_reg_n_int_sgn:
 10181              	.LVL760:
 10182              	.LFB96:
1280:src/xeq.c     **** 	if (is_intmode()) {
 10183              		.loc 1 1280 72 is_stmt 1 view -0
 10184              		.cfi_startproc
 10185              		@ args = 4, pretend = 0, frame = 40
 10186              		@ frame_needed = 0, uses_anonymous_args = 0
1281:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10187              		.loc 1 1281 2 view .LVU2702
1281:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10188              		.loc 1 1281 6 is_stmt 0 view .LVU2703
 10189 0000 1749     		ldr	r1, .L765
1280:src/xeq.c     **** 	if (is_intmode()) {
 10190              		.loc 1 1280 72 view .LVU2704
 10191 0002 30B5     		push	{r4, r5, lr}
 10192              		.cfi_def_cfa_offset 12
 10193              		.cfi_offset 4, -12
 10194              		.cfi_offset 5, -8
 10195              		.cfi_offset 14, -4
1281:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10196              		.loc 1 1281 6 view .LVU2705
 10197 0004 0968     		ldr	r1, [r1]
 10198 0006 91F8E857 		ldrb	r5, [r1, #2024]	@ zero_extendqisi2
1281:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10199              		.loc 1 1281 5 view .LVU2706
 10200 000a E907     		lsls	r1, r5, #31
1280:src/xeq.c     **** 	if (is_intmode()) {
 10201              		.loc 1 1280 72 view .LVU2707
 10202 000c 8BB0     		sub	sp, sp, #44
 10203              		.cfi_def_cfa_offset 56
1280:src/xeq.c     **** 	if (is_intmode()) {
 10204              		.loc 1 1280 72 view .LVU2708
 10205 000e 0446     		mov	r4, r0
1281:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10206              		.loc 1 1281 5 view .LVU2709
 10207 0010 11D5     		bpl	.L756
 10208              	.LVL761:
1281:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10209              		.loc 1 1281 5 view .LVU2710
 10210 0012 1046     		mov	r0, r2
 10211              	.LVL762:
ARM GAS  /tmp/cciWh9P3.s 			page 320


1281:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10212              		.loc 1 1281 5 view .LVU2711
 10213 0014 1946     		mov	r1, r3
 10214              	.LVL763:
 10215              	.LBB2069:
 10216              	.LBI2069:
1280:src/xeq.c     **** 	if (is_intmode()) {
 10217              		.loc 1 1280 6 is_stmt 1 view .LVU2712
 10218              	.LBB2070:
1282:src/xeq.c     **** 	} else {
 10219              		.loc 1 1282 3 view .LVU2713
 10220 0016 0E9A     		ldr	r2, [sp, #56]
 10221              	.LVL764:
1282:src/xeq.c     **** 	} else {
 10222              		.loc 1 1282 3 is_stmt 0 view .LVU2714
 10223 0018 FFF7FEFF 		bl	build_value
 10224              	.LVL765:
1282:src/xeq.c     **** 	} else {
 10225              		.loc 1 1282 3 view .LVU2715
 10226 001c 0B46     		mov	r3, r1
 10227 001e 0246     		mov	r2, r0
 10228              	.LBB2071:
 10229              	.LBB2072:
1236:src/xeq.c     **** }
 10230              		.loc 1 1236 8 view .LVU2716
 10231 0020 2046     		mov	r0, r4
 10232 0022 CDE90023 		strd	r2, [sp]
 10233              	.LVL766:
1236:src/xeq.c     **** }
 10234              		.loc 1 1236 8 view .LVU2717
 10235              	.LBE2072:
 10236              	.LBI2071:
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10237              		.loc 1 1235 6 is_stmt 1 view .LVU2718
 10238              	.LBB2073:
1236:src/xeq.c     **** }
 10239              		.loc 1 1236 2 view .LVU2719
1236:src/xeq.c     **** }
 10240              		.loc 1 1236 8 is_stmt 0 view .LVU2720
 10241 0026 FFF7FEFF 		bl	get_reg_n
 10242              	.LVL767:
1236:src/xeq.c     **** }
 10243              		.loc 1 1236 2 view .LVU2721
 10244 002a 0822     		movs	r2, #8
 10245 002c 6946     		mov	r1, sp
 10246 002e FFF7FEFF 		bl	xcopy
 10247              	.LVL768:
1236:src/xeq.c     **** }
 10248              		.loc 1 1236 2 view .LVU2722
 10249              	.LBE2073:
 10250              	.LBE2071:
 10251              	.LBE2070:
 10252              	.LBE2069:
1291:src/xeq.c     **** 
 10253              		.loc 1 1291 1 view .LVU2723
 10254 0032 0BB0     		add	sp, sp, #44
 10255              		.cfi_remember_state
ARM GAS  /tmp/cciWh9P3.s 			page 321


 10256              		.cfi_def_cfa_offset 12
 10257              		@ sp needed
 10258 0034 30BD     		pop	{r4, r5, pc}
 10259              	.LVL769:
 10260              	.L756:
 10261              		.cfi_restore_state
 10262              	.LBB2074:
1284:src/xeq.c     **** 
 10263              		.loc 1 1284 3 is_stmt 1 view .LVU2724
1286:src/xeq.c     **** 		if (sgn)
 10264              		.loc 1 1286 3 view .LVU2725
 10265 0036 6846     		mov	r0, sp
 10266              	.LVL770:
1286:src/xeq.c     **** 		if (sgn)
 10267              		.loc 1 1286 3 is_stmt 0 view .LVU2726
 10268 0038 FFF7FEFF 		bl	ullint_to_dn
 10269              	.LVL771:
1287:src/xeq.c     **** 			dn_minus(&t, &t);
 10270              		.loc 1 1287 3 is_stmt 1 view .LVU2727
1287:src/xeq.c     **** 			dn_minus(&t, &t);
 10271              		.loc 1 1287 6 is_stmt 0 view .LVU2728
 10272 003c 0E9B     		ldr	r3, [sp, #56]
 10273 003e 2BB9     		cbnz	r3, .L763
1289:src/xeq.c     **** 	}
 10274              		.loc 1 1289 3 is_stmt 1 view .LVU2729
 10275 0040 6946     		mov	r1, sp
 10276 0042 2046     		mov	r0, r4
 10277 0044 FFF7FEFF 		bl	setRegister
 10278              	.LVL772:
 10279              	.L764:
1289:src/xeq.c     **** 	}
 10280              		.loc 1 1289 3 is_stmt 0 view .LVU2730
 10281              	.LBE2074:
1291:src/xeq.c     **** 
 10282              		.loc 1 1291 1 view .LVU2731
 10283 0048 0BB0     		add	sp, sp, #44
 10284              		.cfi_remember_state
 10285              		.cfi_def_cfa_offset 12
 10286              		@ sp needed
 10287 004a 30BD     		pop	{r4, r5, pc}
 10288              	.LVL773:
 10289              	.L763:
 10290              		.cfi_restore_state
 10291              	.LBB2075:
1288:src/xeq.c     **** 		setRegister(index, &t);
 10292              		.loc 1 1288 4 is_stmt 1 view .LVU2732
 10293 004c 6946     		mov	r1, sp
 10294 004e 6846     		mov	r0, sp
 10295 0050 FFF7FEFF 		bl	dn_minus
 10296              	.LVL774:
1289:src/xeq.c     **** 	}
 10297              		.loc 1 1289 3 view .LVU2733
 10298 0054 6946     		mov	r1, sp
 10299 0056 2046     		mov	r0, r4
 10300 0058 FFF7FEFF 		bl	setRegister
 10301              	.LVL775:
 10302 005c F4E7     		b	.L764
ARM GAS  /tmp/cciWh9P3.s 			page 322


 10303              	.L766:
 10304 005e 00BF     		.align	2
 10305              	.L765:
 10306 0060 00000000 		.word	main_ram
 10307              	.LBE2075:
 10308              		.cfi_endproc
 10309              	.LFE96:
 10311              		.section	.text.op_roundingmode,"ax",%progbits
 10312              		.align	1
 10313              		.p2align 2,,3
 10314              		.global	op_roundingmode
 10315              		.syntax unified
 10316              		.thumb
 10317              		.thumb_func
 10318              		.fpu fpv4-sp-d16
 10320              	op_roundingmode:
 10321              	.LVL776:
 10322              	.LFB34:
 609:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10323              		.loc 1 609 37 view -0
 10324              		.cfi_startproc
 10325              		@ args = 0, pretend = 0, frame = 0
 10326              		@ frame_needed = 0, uses_anonymous_args = 0
 610:src/xeq.c     **** }
 10327              		.loc 1 610 2 view .LVU2735
 10328              	.LBB2076:
 10329              	.LBI2076:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 10330              		.loc 1 1322 6 view .LVU2736
 10331              	.LBB2077:
1323:src/xeq.c     **** }
 10332              		.loc 1 1323 2 view .LVU2737
 10333              	.LBE2077:
 10334              	.LBE2076:
 609:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10335              		.loc 1 609 37 is_stmt 0 view .LVU2738
 10336 0000 00B5     		push	{lr}
 10337              		.cfi_def_cfa_offset 4
 10338              		.cfi_offset 14, -4
 610:src/xeq.c     **** }
 10339              		.loc 1 610 21 view .LVU2739
 10340 0002 084B     		ldr	r3, .L769
 10341              	.LVL777:
 610:src/xeq.c     **** }
 10342              		.loc 1 610 21 view .LVU2740
 10343 0004 1B68     		ldr	r3, [r3]
 10344              	.LVL778:
 610:src/xeq.c     **** }
 10345              		.loc 1 610 21 view .LVU2741
 10346 0006 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 609:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10347              		.loc 1 609 37 view .LVU2742
 10348 000a 83B0     		sub	sp, sp, #12
 10349              		.cfi_def_cfa_offset 16
 10350              	.LBB2080:
 10351              	.LBB2078:
1323:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 323


 10352              		.loc 1 1323 2 view .LVU2743
 10353 000c 0021     		movs	r1, #0
 10354              	.LBE2078:
 10355              	.LBE2080:
 610:src/xeq.c     **** }
 10356              		.loc 1 610 21 view .LVU2744
 10357 000e C2F30212 		ubfx	r2, r2, #4, #3
 10358              	.LBB2081:
 10359              	.LBB2079:
1323:src/xeq.c     **** }
 10360              		.loc 1 1323 2 view .LVU2745
 10361 0012 D2B2     		uxtb	r2, r2
 10362 0014 0023     		movs	r3, #0
 10363              	.LVL779:
1323:src/xeq.c     **** }
 10364              		.loc 1 1323 2 view .LVU2746
 10365 0016 0091     		str	r1, [sp]
 10366              	.LVL780:
1323:src/xeq.c     **** }
 10367              		.loc 1 1323 2 view .LVU2747
 10368 0018 6420     		movs	r0, #100
 10369              	.LVL781:
1323:src/xeq.c     **** }
 10370              		.loc 1 1323 2 view .LVU2748
 10371 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 10372              	.LVL782:
1323:src/xeq.c     **** }
 10373              		.loc 1 1323 2 view .LVU2749
 10374              	.LBE2079:
 10375              	.LBE2081:
 611:src/xeq.c     **** 
 10376              		.loc 1 611 1 view .LVU2750
 10377 001e 03B0     		add	sp, sp, #12
 10378              		.cfi_def_cfa_offset 4
 10379              		@ sp needed
 10380 0020 5DF804FB 		ldr	pc, [sp], #4
 10381              	.L770:
 10382              		.align	2
 10383              	.L769:
 10384 0024 00000000 		.word	main_ram
 10385              		.cfi_endproc
 10386              	.LFE34:
 10388              		.section	.text.register_from_int,"ax",%progbits
 10389              		.align	1
 10390              		.p2align 2,,3
 10391              		.syntax unified
 10392              		.thumb
 10393              		.thumb_func
 10394              		.fpu fpv4-sp-d16
 10396              	register_from_int:
 10397              	.LVL783:
 10398              	.LFB97:
1298:src/xeq.c     **** 	int sgn;
 10399              		.loc 1 1298 69 is_stmt 1 view -0
 10400              		.cfi_startproc
 10401              		@ args = 0, pretend = 0, frame = 8
 10402              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cciWh9P3.s 			page 324


1299:src/xeq.c     **** 	unsigned long long int val;
 10403              		.loc 1 1299 2 view .LVU2752
1300:src/xeq.c     **** 	const int xin = XromFlags.xIN;
 10404              		.loc 1 1300 2 view .LVU2753
1301:src/xeq.c     **** 	
 10405              		.loc 1 1301 2 view .LVU2754
1298:src/xeq.c     **** 	int sgn;
 10406              		.loc 1 1298 69 is_stmt 0 view .LVU2755
 10407 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 10408              		.cfi_def_cfa_offset 28
 10409              		.cfi_offset 4, -28
 10410              		.cfi_offset 5, -24
 10411              		.cfi_offset 6, -20
 10412              		.cfi_offset 7, -16
 10413              		.cfi_offset 8, -12
 10414              		.cfi_offset 9, -8
 10415              		.cfi_offset 14, -4
1301:src/xeq.c     **** 	
 10416              		.loc 1 1301 27 view .LVU2756
 10417 0004 154C     		ldr	r4, .L777
 10418 0006 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
1298:src/xeq.c     **** 	int sgn;
 10419              		.loc 1 1298 69 view .LVU2757
 10420 0008 0546     		mov	r5, r0
 10421 000a 85B0     		sub	sp, sp, #20
 10422              		.cfi_def_cfa_offset 48
1298:src/xeq.c     **** 	int sgn;
 10423              		.loc 1 1298 69 view .LVU2758
 10424 000c 0846     		mov	r0, r1
 10425              	.LVL784:
1301:src/xeq.c     **** 	
 10426              		.loc 1 1301 27 view .LVU2759
 10427 000e DE09     		lsrs	r6, r3, #7
 10428              	.LVL785:
1303:src/xeq.c     **** 		XromFlags.xIN = 0;
 10429              		.loc 1 1303 2 is_stmt 1 view .LVU2760
1303:src/xeq.c     **** 		XromFlags.xIN = 0;
 10430              		.loc 1 1303 5 is_stmt 0 view .LVU2761
 10431 0010 12B1     		cbz	r2, .L772
1304:src/xeq.c     **** 	UState.intm = 1;
 10432              		.loc 1 1304 3 is_stmt 1 view .LVU2762
1304:src/xeq.c     **** 	UState.intm = 1;
 10433              		.loc 1 1304 17 is_stmt 0 view .LVU2763
 10434 0012 6FF3C713 		bfc	r3, #7, #1
 10435              	.LVL786:
1304:src/xeq.c     **** 	UState.intm = 1;
 10436              		.loc 1 1304 17 view .LVU2764
 10437 0016 6370     		strb	r3, [r4, #1]
 10438              	.LVL787:
 10439              	.L772:
1305:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10440              		.loc 1 1305 2 is_stmt 1 view .LVU2765
1305:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10441              		.loc 1 1305 14 is_stmt 0 view .LVU2766
 10442 0018 114F     		ldr	r7, .L777+4
 10443 001a 3A68     		ldr	r2, [r7]
 10444              	.LVL788:
ARM GAS  /tmp/cciWh9P3.s 			page 325


1305:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10445              		.loc 1 1305 14 view .LVU2767
 10446 001c 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 10447 0020 43F00103 		orr	r3, r3, #1
 10448 0024 82F8E837 		strb	r3, [r2, #2024]
1306:src/xeq.c     **** 
 10449              		.loc 1 1306 2 is_stmt 1 view .LVU2768
1306:src/xeq.c     **** 
 10450              		.loc 1 1306 8 is_stmt 0 view .LVU2769
 10451 0028 03A9     		add	r1, sp, #12
 10452              	.LVL789:
1306:src/xeq.c     **** 
 10453              		.loc 1 1306 8 view .LVU2770
 10454 002a FFF7FEFF 		bl	get_reg_n_int_sgn
 10455              	.LVL790:
1308:src/xeq.c     **** 	UState.intm = 0;
 10456              		.loc 1 1308 16 view .LVU2771
 10457 002e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
1309:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10458              		.loc 1 1309 14 view .LVU2772
 10459 0030 3B68     		ldr	r3, [r7]
1308:src/xeq.c     **** 	UState.intm = 0;
 10460              		.loc 1 1308 16 view .LVU2773
 10461 0032 66F3C712 		bfi	r2, r6, #7, #1
 10462 0036 6270     		strb	r2, [r4, #1]
1306:src/xeq.c     **** 
 10463              		.loc 1 1306 8 view .LVU2774
 10464 0038 8946     		mov	r9, r1
1309:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10465              		.loc 1 1309 14 view .LVU2775
 10466 003a 93F8E817 		ldrb	r1, [r3, #2024]	@ zero_extendqisi2
 10467 003e 6FF30001 		bfc	r1, #0, #1
 10468 0042 83F8E817 		strb	r1, [r3, #2024]
1310:src/xeq.c     **** }
 10469              		.loc 1 1310 2 view .LVU2776
 10470 0046 039B     		ldr	r3, [sp, #12]
 10471 0048 0093     		str	r3, [sp]
1306:src/xeq.c     **** 
 10472              		.loc 1 1306 8 view .LVU2777
 10473 004a 8046     		mov	r8, r0
 10474              	.LVL791:
1308:src/xeq.c     **** 	UState.intm = 0;
 10475              		.loc 1 1308 2 is_stmt 1 view .LVU2778
1309:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10476              		.loc 1 1309 2 view .LVU2779
1310:src/xeq.c     **** }
 10477              		.loc 1 1310 2 view .LVU2780
 10478 004c 4246     		mov	r2, r8
 10479 004e 4B46     		mov	r3, r9
 10480 0050 2846     		mov	r0, r5
 10481 0052 FFF7FEFF 		bl	set_reg_n_int_sgn
 10482              	.LVL792:
1311:src/xeq.c     **** 
 10483              		.loc 1 1311 1 is_stmt 0 view .LVU2781
 10484 0056 05B0     		add	sp, sp, #20
 10485              		.cfi_def_cfa_offset 28
 10486              		@ sp needed
ARM GAS  /tmp/cciWh9P3.s 			page 326


 10487 0058 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 10488              	.LVL793:
 10489              	.L778:
1311:src/xeq.c     **** 
 10490              		.loc 1 1311 1 view .LVU2782
 10491              		.align	2
 10492              	.L777:
 10493 005c 00000000 		.word	XromParams
 10494 0060 00000000 		.word	main_ram
 10495              		.cfi_endproc
 10496              	.LFE97:
 10498              		.section	.text.int_from_register,"ax",%progbits
 10499              		.align	1
 10500              		.p2align 2,,3
 10501              		.syntax unified
 10502              		.thumb
 10503              		.thumb_func
 10504              		.fpu fpv4-sp-d16
 10506              	int_from_register:
 10507              	.LVL794:
 10508              	.LFB95:
1267:src/xeq.c     **** 	int sgn;
 10509              		.loc 1 1267 48 is_stmt 1 view -0
 10510              		.cfi_startproc
 10511              		@ args = 0, pretend = 0, frame = 8
 10512              		@ frame_needed = 0, uses_anonymous_args = 0
1268:src/xeq.c     **** 	unsigned long long int val;
 10513              		.loc 1 1268 2 view .LVU2784
1269:src/xeq.c     **** 	
 10514              		.loc 1 1269 2 view .LVU2785
1271:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10515              		.loc 1 1271 2 view .LVU2786
1267:src/xeq.c     **** 	int sgn;
 10516              		.loc 1 1267 48 is_stmt 0 view .LVU2787
 10517 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 10518              		.cfi_def_cfa_offset 20
 10519              		.cfi_offset 4, -20
 10520              		.cfi_offset 5, -16
 10521              		.cfi_offset 6, -12
 10522              		.cfi_offset 7, -8
 10523              		.cfi_offset 14, -4
1271:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10524              		.loc 1 1271 14 view .LVU2788
 10525 0002 104D     		ldr	r5, .L781
 10526 0004 2B68     		ldr	r3, [r5]
 10527 0006 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1267:src/xeq.c     **** 	int sgn;
 10528              		.loc 1 1267 48 view .LVU2789
 10529 000a 85B0     		sub	sp, sp, #20
 10530              		.cfi_def_cfa_offset 40
1271:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 10531              		.loc 1 1271 14 view .LVU2790
 10532 000c 6FF30002 		bfc	r2, #0, #1
1267:src/xeq.c     **** 	int sgn;
 10533              		.loc 1 1267 48 view .LVU2791
 10534 0010 0446     		mov	r4, r0
1271:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
ARM GAS  /tmp/cciWh9P3.s 			page 327


 10535              		.loc 1 1271 14 view .LVU2792
 10536 0012 83F8E827 		strb	r2, [r3, #2024]
1272:src/xeq.c     **** 
 10537              		.loc 1 1272 2 is_stmt 1 view .LVU2793
1272:src/xeq.c     **** 
 10538              		.loc 1 1272 8 is_stmt 0 view .LVU2794
 10539 0016 0846     		mov	r0, r1
 10540              	.LVL795:
1272:src/xeq.c     **** 
 10541              		.loc 1 1272 8 view .LVU2795
 10542 0018 03A9     		add	r1, sp, #12
 10543              	.LVL796:
1272:src/xeq.c     **** 
 10544              		.loc 1 1272 8 view .LVU2796
 10545 001a FFF7FEFF 		bl	get_reg_n_int_sgn
 10546              	.LVL797:
1272:src/xeq.c     **** 
 10547              		.loc 1 1272 8 view .LVU2797
 10548 001e 0F46     		mov	r7, r1
1274:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10549              		.loc 1 1274 14 view .LVU2798
 10550 0020 2968     		ldr	r1, [r5]
 10551 0022 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
 10552 0026 43F00103 		orr	r3, r3, #1
 10553 002a 81F8E837 		strb	r3, [r1, #2024]
1275:src/xeq.c     **** }
 10554              		.loc 1 1275 2 view .LVU2799
 10555 002e 039B     		ldr	r3, [sp, #12]
 10556 0030 0093     		str	r3, [sp]
1272:src/xeq.c     **** 
 10557              		.loc 1 1272 8 view .LVU2800
 10558 0032 0646     		mov	r6, r0
 10559              	.LVL798:
1274:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 10560              		.loc 1 1274 2 is_stmt 1 view .LVU2801
1275:src/xeq.c     **** }
 10561              		.loc 1 1275 2 view .LVU2802
 10562 0034 3246     		mov	r2, r6
 10563 0036 2046     		mov	r0, r4
 10564 0038 3B46     		mov	r3, r7
 10565 003a FFF7FEFF 		bl	set_reg_n_int_sgn
 10566              	.LVL799:
1276:src/xeq.c     **** 
 10567              		.loc 1 1276 1 is_stmt 0 view .LVU2803
 10568 003e 05B0     		add	sp, sp, #20
 10569              		.cfi_def_cfa_offset 20
 10570              		@ sp needed
 10571 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 10572              	.LVL800:
 10573              	.L782:
1276:src/xeq.c     **** 
 10574              		.loc 1 1276 1 view .LVU2804
 10575 0042 00BF     		.align	2
 10576              	.L781:
 10577 0044 00000000 		.word	main_ram
 10578              		.cfi_endproc
 10579              	.LFE95:
ARM GAS  /tmp/cciWh9P3.s 			page 328


 10581              		.section	.text.switch_to_int,"ax",%progbits
 10582              		.align	1
 10583              		.p2align 2,,3
 10584              		.syntax unified
 10585              		.thumb
 10586              		.thumb_func
 10587              		.fpu fpv4-sp-d16
 10589              	switch_to_int:
 10590              	.LFB201:
3499:src/xeq.c     **** 	int i;
 10591              		.loc 1 3499 33 is_stmt 1 view -0
 10592              		.cfi_startproc
 10593              		@ args = 0, pretend = 0, frame = 40
 10594              		@ frame_needed = 0, uses_anonymous_args = 0
3500:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
 10595              		.loc 1 3500 2 view .LVU2806
3501:src/xeq.c     **** 	const int dbl = is_dblmode();
 10596              		.loc 1 3501 2 view .LVU2807
3499:src/xeq.c     **** 	int i;
 10597              		.loc 1 3499 33 is_stmt 0 view .LVU2808
 10598 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 10599              		.cfi_def_cfa_offset 24
 10600              		.cfi_offset 4, -24
 10601              		.cfi_offset 5, -20
 10602              		.cfi_offset 6, -16
 10603              		.cfi_offset 7, -12
 10604              		.cfi_offset 8, -8
 10605              		.cfi_offset 14, -4
3501:src/xeq.c     **** 	const int dbl = is_dblmode();
 10606              		.loc 1 3501 26 view .LVU2809
 10607 0004 DFF87480 		ldr	r8, .L791+4
3501:src/xeq.c     **** 	const int dbl = is_dblmode();
 10608              		.loc 1 3501 25 view .LVU2810
 10609 0008 1B49     		ldr	r1, .L791
3501:src/xeq.c     **** 	const int dbl = is_dblmode();
 10610              		.loc 1 3501 26 view .LVU2811
 10611 000a D8F80020 		ldr	r2, [r8]
3501:src/xeq.c     **** 	const int dbl = is_dblmode();
 10612              		.loc 1 3501 32 view .LVU2812
 10613 000e 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 10614              	.LBB2082:
 10615              	.LBB2083:
 932:src/xeq.c     **** }
 10616              		.loc 1 932 24 view .LVU2813
 10617 0012 B2F8E827 		ldrh	r2, [r2, #2024]
 10618              	.LBE2083:
 10619              	.LBE2082:
3501:src/xeq.c     **** 	const int dbl = is_dblmode();
 10620              		.loc 1 3501 32 view .LVU2814
 10621 0016 C3F3C003 		ubfx	r3, r3, #3, #1
 10622              	.LBB2087:
 10623              	.LBB2084:
 932:src/xeq.c     **** }
 10624              		.loc 1 932 24 view .LVU2815
 10625 001a 44F20106 		movw	r6, #16385
 10626              	.LBE2084:
 10627              	.LBE2087:
ARM GAS  /tmp/cciWh9P3.s 			page 329


3501:src/xeq.c     **** 	const int dbl = is_dblmode();
 10628              		.loc 1 3501 6 view .LVU2816
 10629 001e 31F81350 		ldrh	r5, [r1, r3, lsl #1]
 10630              	.LVL801:
3502:src/xeq.c     **** 
 10631              		.loc 1 3502 2 is_stmt 1 view .LVU2817
 10632              	.LBB2088:
 10633              	.LBI2082:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 10634              		.loc 1 931 5 view .LVU2818
 10635              	.LBB2085:
 932:src/xeq.c     **** }
 10636              		.loc 1 932 2 view .LVU2819
 10637              	.LBE2085:
 10638              	.LBE2088:
3499:src/xeq.c     **** 	int i;
 10639              		.loc 1 3499 33 is_stmt 0 view .LVU2820
 10640 0022 8AB0     		sub	sp, sp, #40
 10641              		.cfi_def_cfa_offset 64
 10642              	.LBB2089:
 10643              	.LBB2086:
 932:src/xeq.c     **** }
 10644              		.loc 1 932 24 view .LVU2821
 10645 0024 1640     		ands	r6, r6, r2
 10646              	.LVL802:
 932:src/xeq.c     **** }
 10647              		.loc 1 932 24 view .LVU2822
 10648              	.LBE2086:
 10649              	.LBE2089:
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10650              		.loc 1 3504 2 is_stmt 1 view .LVU2823
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10651              		.loc 1 3504 21 view .LVU2824
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10652              		.loc 1 3504 9 is_stmt 0 view .LVU2825
 10653 0026 6F24     		movs	r4, #111
 10654 0028 07E0     		b	.L786
 10655              	.LVL803:
 10656              	.L784:
3509:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 10657              		.loc 1 3509 11 view .LVU2826
 10658 002a B6F5804F 		cmp	r6, #16384
 10659 002e 12D0     		beq	.L789
 10660              	.L785:
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10661              		.loc 1 3504 36 is_stmt 1 discriminator 2 view .LVU2827
 10662 0030 013C     		subs	r4, r4, #1
 10663              	.LVL804:
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10664              		.loc 1 3504 2 is_stmt 0 discriminator 2 view .LVU2828
 10665 0032 632C     		cmp	r4, #99
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10666              		.loc 1 3504 46 discriminator 2 view .LVU2829
 10667 0034 4FEA4505 		lsl	r5, r5, #1
 10668              	.LVL805:
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10669              		.loc 1 3504 21 is_stmt 1 discriminator 2 view .LVU2830
ARM GAS  /tmp/cciWh9P3.s 			page 330


3504:src/xeq.c     **** 		if (mask & 0x800) {
 10670              		.loc 1 3504 2 is_stmt 0 discriminator 2 view .LVU2831
 10671 0038 0AD0     		beq	.L790
 10672              	.LVL806:
 10673              	.L786:
3505:src/xeq.c     **** 			// register belongs to stack
 10674              		.loc 1 3505 3 is_stmt 1 view .LVU2832
3509:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 10675              		.loc 1 3509 8 view .LVU2833
3505:src/xeq.c     **** 			// register belongs to stack
 10676              		.loc 1 3505 6 is_stmt 0 view .LVU2834
 10677 003a 2B05     		lsls	r3, r5, #20
 10678 003c F5D5     		bpl	.L784
3507:src/xeq.c     **** 		}
 10679              		.loc 1 3507 4 is_stmt 1 view .LVU2835
 10680 003e 2146     		mov	r1, r4
 10681 0040 2046     		mov	r0, r4
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10682              		.loc 1 3504 36 is_stmt 0 view .LVU2836
 10683 0042 013C     		subs	r4, r4, #1
 10684              	.LVL807:
3507:src/xeq.c     **** 		}
 10685              		.loc 1 3507 4 view .LVU2837
 10686 0044 FFF7FEFF 		bl	int_from_register
 10687              	.LVL808:
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10688              		.loc 1 3504 36 is_stmt 1 view .LVU2838
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10689              		.loc 1 3504 2 is_stmt 0 view .LVU2839
 10690 0048 632C     		cmp	r4, #99
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10691              		.loc 1 3504 46 view .LVU2840
 10692 004a 4FEA4505 		lsl	r5, r5, #1
 10693              	.LVL809:
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10694              		.loc 1 3504 21 is_stmt 1 view .LVU2841
3504:src/xeq.c     **** 		if (mask & 0x800) {
 10695              		.loc 1 3504 2 is_stmt 0 view .LVU2842
 10696 004e F4D1     		bne	.L786
 10697              	.L790:
3514:src/xeq.c     **** 
 10698              		.loc 1 3514 1 view .LVU2843
 10699 0050 0AB0     		add	sp, sp, #40
 10700              		.cfi_remember_state
 10701              		.cfi_def_cfa_offset 24
 10702              		@ sp needed
 10703 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 10704              	.LVL810:
 10705              	.L789:
 10706              		.cfi_restore_state
3511:src/xeq.c     **** 		}
 10707              		.loc 1 3511 4 is_stmt 1 view .LVU2844
3511:src/xeq.c     **** 		}
 10708              		.loc 1 3511 26 is_stmt 0 view .LVU2845
 10709 0056 D8F80030 		ldr	r3, [r8]
3511:src/xeq.c     **** 		}
 10710              		.loc 1 3511 38 view .LVU2846
ARM GAS  /tmp/cciWh9P3.s 			page 331


 10711 005a 2046     		mov	r0, r4
3511:src/xeq.c     **** 		}
 10712              		.loc 1 3511 26 view .LVU2847
 10713 005c 03F58663 		add	r3, r3, #1072
3511:src/xeq.c     **** 		}
 10714              		.loc 1 3511 4 view .LVU2848
 10715 0060 03EBC407 		add	r7, r3, r4, lsl #3
3511:src/xeq.c     **** 		}
 10716              		.loc 1 3511 38 view .LVU2849
 10717 0064 FFF7FEFF 		bl	get_reg_n
 10718              	.LVL811:
 10719              	.LBB2090:
 10720              	.LBI2090:
 638:src/xeq.c     **** 	decNumber temp;
 10721              		.loc 1 638 6 is_stmt 1 view .LVU2850
 10722              	.LBB2091:
 639:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 10723              		.loc 1 639 2 view .LVU2851
 640:src/xeq.c     **** }
 10724              		.loc 1 640 2 view .LVU2852
 640:src/xeq.c     **** }
 10725              		.loc 1 640 24 is_stmt 0 view .LVU2853
 10726 0068 01A9     		add	r1, sp, #4
 10727 006a FFF7FEFF 		bl	decimal128ToNumber
 10728              	.LVL812:
 640:src/xeq.c     **** }
 10729              		.loc 1 640 24 view .LVU2854
 10730 006e 0146     		mov	r1, r0
 640:src/xeq.c     **** }
 10731              		.loc 1 640 2 view .LVU2855
 10732 0070 3846     		mov	r0, r7
 10733 0072 FFF7FEFF 		bl	packed_from_number
 10734              	.LVL813:
 641:src/xeq.c     **** 
 10735              		.loc 1 641 1 view .LVU2856
 10736 0076 DBE7     		b	.L785
 10737              	.L792:
 10738              		.align	2
 10739              	.L791:
 10740 0078 00000000 		.word	.LANCHOR3
 10741 007c 00000000 		.word	main_ram
 10742              	.LBE2091:
 10743              	.LBE2090:
 10744              		.cfi_endproc
 10745              	.LFE201:
 10747              		.section	.text.process_cmdline,"ax",%progbits
 10748              		.align	1
 10749              		.p2align 2,,3
 10750              		.global	process_cmdline
 10751              		.syntax unified
 10752              		.thumb
 10753              		.thumb_func
 10754              		.fpu fpv4-sp-d16
 10756              	process_cmdline:
 10757              	.LFB84:
1039:src/xeq.c     **** 	decNumber a, b, x, t;
 10758              		.loc 1 1039 28 is_stmt 1 view -0
ARM GAS  /tmp/cciWh9P3.s 			page 332


 10759              		.cfi_startproc
 10760              		@ args = 0, pretend = 0, frame = 168
 10761              		@ frame_needed = 0, uses_anonymous_args = 0
1040:src/xeq.c     **** 
 10762              		.loc 1 1040 2 view .LVU2858
1042:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 10763              		.loc 1 1042 2 view .LVU2859
1039:src/xeq.c     **** 	decNumber a, b, x, t;
 10764              		.loc 1 1039 28 is_stmt 0 view .LVU2860
 10765 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 10766              		.cfi_def_cfa_offset 28
 10767              		.cfi_offset 4, -28
 10768              		.cfi_offset 5, -24
 10769              		.cfi_offset 6, -20
 10770              		.cfi_offset 7, -16
 10771              		.cfi_offset 8, -12
 10772              		.cfi_offset 9, -8
 10773              		.cfi_offset 14, -4
1042:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 10774              		.loc 1 1042 6 view .LVU2861
 10775 0004 894C     		ldr	r4, .L833
1042:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 10776              		.loc 1 1042 5 view .LVU2862
 10777 0006 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
1039:src/xeq.c     **** 	decNumber a, b, x, t;
 10778              		.loc 1 1039 28 view .LVU2863
 10779 0008 ADB0     		sub	sp, sp, #180
 10780              		.cfi_def_cfa_offset 208
1042:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 10781              		.loc 1 1042 5 view .LVU2864
 10782 000a 13B9     		cbnz	r3, .L826
 10783              	.L793:
1143:src/xeq.c     **** 
 10784              		.loc 1 1143 1 view .LVU2865
 10785 000c 2DB0     		add	sp, sp, #180
 10786              		.cfi_remember_state
 10787              		.cfi_def_cfa_offset 28
 10788              		@ sp needed
 10789 000e BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 10790              	.L826:
 10791              		.cfi_restore_state
 10792              	.LBB2114:
1043:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 10793              		.loc 1 1043 3 is_stmt 1 view .LVU2866
1043:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 10794              		.loc 1 1043 27 is_stmt 0 view .LVU2867
 10795 0012 FFF7FEFF 		bl	is_bad_cmdline
 10796              	.LVL814:
1054:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10797              		.loc 1 1054 8 view .LVU2868
 10798 0016 864E     		ldr	r6, .L833+4
1044:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10799              		.loc 1 1044 35 view .LVU2869
 10800 0018 A77F     		ldrb	r7, [r4, #30]	@ zero_extendqisi2
1051:src/xeq.c     **** 
 10801              		.loc 1 1051 3 view .LVU2870
 10802 001a 1422     		movs	r2, #20
ARM GAS  /tmp/cciWh9P3.s 			page 333


 10803 001c 04F12001 		add	r1, r4, #32
1043:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 10804              		.loc 1 1043 27 view .LVU2871
 10805 0020 0546     		mov	r5, r0
 10806              	.LVL815:
1044:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10807              		.loc 1 1044 3 is_stmt 1 view .LVU2872
1048:src/xeq.c     **** #endif
 10808              		.loc 1 1048 3 view .LVU2873
1051:src/xeq.c     **** 
 10809              		.loc 1 1051 3 view .LVU2874
 10810 0022 03A8     		add	r0, sp, #12
 10811              	.LVL816:
1051:src/xeq.c     **** 
 10812              		.loc 1 1051 3 is_stmt 0 view .LVU2875
 10813 0024 FFF7FEFF 		bl	xcopy
 10814              	.LVL817:
1053:src/xeq.c     **** 		if (!is_intmode()) {
 10815              		.loc 1 1053 3 is_stmt 1 view .LVU2876
1054:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10816              		.loc 1 1054 8 is_stmt 0 view .LVU2877
 10817 0028 3168     		ldr	r1, [r6]
1053:src/xeq.c     **** 		if (!is_intmode()) {
 10818              		.loc 1 1053 11 view .LVU2878
 10819 002a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
1054:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10820              		.loc 1 1054 7 view .LVU2879
 10821 002c 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
1053:src/xeq.c     **** 		if (!is_intmode()) {
 10822              		.loc 1 1053 26 view .LVU2880
 10823 0030 2CA8     		add	r0, sp, #176
 10824 0032 00EB020C 		add	ip, r0, r2
1054:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10825              		.loc 1 1054 6 view .LVU2881
 10826 0036 13F00103 		ands	r3, r3, #1
1053:src/xeq.c     **** 		if (!is_intmode()) {
 10827              		.loc 1 1053 26 view .LVU2882
 10828 003a 4FF00000 		mov	r0, #0
 10829 003e 0CF8A40C 		strb	r0, [ip, #-164]
1054:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10830              		.loc 1 1054 3 is_stmt 1 view .LVU2883
1054:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 10831              		.loc 1 1054 6 is_stmt 0 view .LVU2884
 10832 0042 46D0     		beq	.L827
1079:src/xeq.c     **** 		lift_if_enabled();
 10833              		.loc 1 1079 3 is_stmt 1 view .LVU2885
 10834              	.LBB2115:
 10835              	.LBB2116:
 10836              	.LBB2117:
 10837              	.LBB2118:
 734:src/xeq.c     **** }
 10838              		.loc 1 734 15 is_stmt 0 view .LVU2886
 10839 0044 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 10840              	.LBE2118:
 10841              	.LBE2117:
 10842              	.LBE2116:
 10843              	.LBE2115:
ARM GAS  /tmp/cciWh9P3.s 			page 334


1079:src/xeq.c     **** 		lift_if_enabled();
 10844              		.loc 1 1079 17 view .LVU2887
 10845 0046 2077     		strb	r0, [r4, #28]
1080:src/xeq.c     **** 		set_lift();
 10846              		.loc 1 1080 3 is_stmt 1 view .LVU2888
 10847              	.LBB2133:
 10848              	.LBI2115:
 737:src/xeq.c     **** 	if (get_lift())
 10849              		.loc 1 737 6 view .LVU2889
 10850              	.LBB2129:
 738:src/xeq.c     **** 		lift();
 10851              		.loc 1 738 2 view .LVU2890
 10852              	.LBB2124:
 10853              	.LBI2117:
 733:src/xeq.c     **** 	return State2.state_lift;
 10854              		.loc 1 733 12 view .LVU2891
 10855              	.LBB2119:
 734:src/xeq.c     **** }
 10856              		.loc 1 734 2 view .LVU2892
 10857              	.LBE2119:
 10858              	.LBE2124:
 738:src/xeq.c     **** 		lift();
 10859              		.loc 1 738 5 is_stmt 0 view .LVU2893
 10860 0048 5906     		lsls	r1, r3, #25
 10861              	.LBB2125:
 10862              	.LBB2120:
 734:src/xeq.c     **** }
 10863              		.loc 1 734 15 view .LVU2894
 10864 004a C3F38012 		ubfx	r2, r3, #6, #1
 10865              	.LBE2120:
 10866              	.LBE2125:
 738:src/xeq.c     **** 		lift();
 10867              		.loc 1 738 5 view .LVU2895
 10868 004e 00F19A80 		bmi	.L811
 10869              	.LBE2129:
 10870              	.LBE2133:
1081:src/xeq.c     **** 		CmdLineDot = 0;
 10871              		.loc 1 1081 3 is_stmt 1 view .LVU2896
 10872              	.LBB2134:
 10873              	.LBI2134:
 747:src/xeq.c     ****     State2.state_lift = 1;
 10874              		.loc 1 747 6 view .LVU2897
 10875              	.LBB2135:
 748:src/xeq.c     **** }
 10876              		.loc 1 748 5 view .LVU2898
 748:src/xeq.c     **** }
 10877              		.loc 1 748 23 is_stmt 0 view .LVU2899
 10878 0052 43F04003 		orr	r3, r3, #64
 10879 0056 E375     		strb	r3, [r4, #23]
 10880              	.LBE2135:
 10881              	.LBE2134:
1082:src/xeq.c     **** 		CmdLineEex = 0;
 10882              		.loc 1 1082 3 is_stmt 1 view .LVU2900
1082:src/xeq.c     **** 		CmdLineEex = 0;
 10883              		.loc 1 1082 14 is_stmt 0 view .LVU2901
 10884 0058 A277     		strb	r2, [r4, #30]
1083:src/xeq.c     **** 		if (is_intmode()) {
ARM GAS  /tmp/cciWh9P3.s 			page 335


 10885              		.loc 1 1083 3 is_stmt 1 view .LVU2902
1083:src/xeq.c     **** 		if (is_intmode()) {
 10886              		.loc 1 1083 14 is_stmt 0 view .LVU2903
 10887 005a 6277     		strb	r2, [r4, #29]
1084:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 10888              		.loc 1 1084 3 is_stmt 1 view .LVU2904
 10889              	.L813:
 10890              	.LBB2140:
1085:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 10891              		.loc 1 1085 4 view .LVU2905
1085:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 10892              		.loc 1 1085 41 is_stmt 0 view .LVU2906
 10893 005c 9DF80C70 		ldrb	r7, [sp, #12]	@ zero_extendqisi2
 10894              	.LVL818:
1085:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 10895              		.loc 1 1085 41 view .LVU2907
 10896 0060 A7F12D07 		sub	r7, #45
 10897 0064 B7FA87F7 		clz	r7, r7
1086:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 10898              		.loc 1 1086 31 view .LVU2908
 10899 0068 FFF7FEFF 		bl	int_base
 10900              	.LVL819:
1085:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 10901              		.loc 1 1085 41 view .LVU2909
 10902 006c 7F09     		lsrs	r7, r7, #5
 10903              	.LVL820:
1086:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 10904              		.loc 1 1086 4 is_stmt 1 view .LVU2910
1086:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 10905              		.loc 1 1086 31 is_stmt 0 view .LVU2911
 10906 006e 03AB     		add	r3, sp, #12
 10907 0070 DA19     		adds	r2, r3, r7
 10908              	.LVL821:
 10909              	.LBB2141:
 10910              	.LBI2141:
 970:src/xeq.c     **** 	unsigned long long int x = 0;
 10911              		.loc 1 970 24 is_stmt 1 view .LVU2912
 10912              	.LBB2142:
 971:src/xeq.c     **** 
 10913              		.loc 1 971 2 view .LVU2913
 971:src/xeq.c     **** 
 10914              		.loc 1 971 25 is_stmt 0 view .LVU2914
 10915 0072 4FF00008 		mov	r8, #0
 10916 0076 4FF00009 		mov	r9, #0
 10917 007a 03E0     		b	.L802
 10918              	.LVL822:
 10919              	.L828:
 10920              	.LBB2143:
 985:src/xeq.c     **** 	}
 10921              		.loc 1 985 5 view .LVU2915
 10922 007c 14EB0308 		adds	r8, r4, r3
 10923              	.LVL823:
 985:src/xeq.c     **** 	}
 10924              		.loc 1 985 5 view .LVU2916
 10925 0080 45F10009 		adc	r9, r5, #0
 10926              	.LVL824:
 985:src/xeq.c     **** 	}
ARM GAS  /tmp/cciWh9P3.s 			page 336


 10927              		.loc 1 985 5 view .LVU2917
 10928              	.LBE2143:
 973:src/xeq.c     **** 		unsigned int n;
 10929              		.loc 1 973 8 is_stmt 1 view .LVU2918
 10930              	.L802:
 973:src/xeq.c     **** 		unsigned int n;
 10931              		.loc 1 973 2 view .LVU2919
 10932              	.LBB2144:
 974:src/xeq.c     **** 		const char c = *s++;
 10933              		.loc 1 974 3 view .LVU2920
 975:src/xeq.c     **** 
 10934              		.loc 1 975 3 view .LVU2921
 978:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 10935              		.loc 1 978 4 view .LVU2922
 979:src/xeq.c     **** 			n = c - 'A' + 10;
 10936              		.loc 1 979 8 view .LVU2923
 980:src/xeq.c     **** 		else
 10937              		.loc 1 980 4 view .LVU2924
 975:src/xeq.c     **** 
 10938              		.loc 1 975 14 is_stmt 0 view .LVU2925
 10939 0084 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 10940              	.LVL825:
 977:src/xeq.c     **** 			n = c - '0';
 10941              		.loc 1 977 3 is_stmt 1 view .LVU2926
 977:src/xeq.c     **** 			n = c - '0';
 10942              		.loc 1 977 16 is_stmt 0 view .LVU2927
 10943 0088 A1F13003 		sub	r3, r1, #48
 977:src/xeq.c     **** 			n = c - '0';
 10944              		.loc 1 977 6 view .LVU2928
 10945 008c DCB2     		uxtb	r4, r3
 10946 008e 092C     		cmp	r4, #9
 979:src/xeq.c     **** 			n = c - 'A' + 10;
 10947              		.loc 1 979 11 view .LVU2929
 10948 0090 A1F14105 		sub	r5, r1, #65
 977:src/xeq.c     **** 			n = c - '0';
 10949              		.loc 1 977 6 view .LVU2930
 10950 0094 03D9     		bls	.L800
 979:src/xeq.c     **** 			n = c - 'A' + 10;
 10951              		.loc 1 979 11 view .LVU2931
 10952 0096 052D     		cmp	r5, #5
 10953 0098 07D8     		bhi	.L801
 980:src/xeq.c     **** 		else
 10954              		.loc 1 980 16 view .LVU2932
 10955 009a A1F13703 		sub	r3, r1, #55
 10956              	.LVL826:
 10957              	.L800:
 983:src/xeq.c     **** 			break;
 10958              		.loc 1 983 3 is_stmt 1 view .LVU2933
 985:src/xeq.c     **** 	}
 10959              		.loc 1 985 3 view .LVU2934
 985:src/xeq.c     **** 	}
 10960              		.loc 1 985 9 is_stmt 0 view .LVU2935
 10961 009e A0FB0845 		umull	r4, r5, r0, r8
 983:src/xeq.c     **** 			break;
 10962              		.loc 1 983 6 view .LVU2936
 10963 00a2 9842     		cmp	r0, r3
 985:src/xeq.c     **** 	}
ARM GAS  /tmp/cciWh9P3.s 			page 337


 10964              		.loc 1 985 9 view .LVU2937
 10965 00a4 00FB0955 		mla	r5, r0, r9, r5
 983:src/xeq.c     **** 			break;
 10966              		.loc 1 983 6 view .LVU2938
 10967 00a8 E8D8     		bhi	.L828
 10968              	.LVL827:
 10969              	.L801:
 983:src/xeq.c     **** 			break;
 10970              		.loc 1 983 6 view .LVU2939
 10971              	.LBE2144:
 987:src/xeq.c     **** }
 10972              		.loc 1 987 2 is_stmt 1 view .LVU2940
 987:src/xeq.c     **** }
 10973              		.loc 1 987 2 is_stmt 0 view .LVU2941
 10974              	.LBE2142:
 10975              	.LBE2141:
1087:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
 10976              		.loc 1 1087 4 is_stmt 1 view .LVU2942
 10977              	.LBB2145:
 10978              	.LBI2145:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 10979              		.loc 1 1322 6 view .LVU2943
 10980              	.LBB2146:
1323:src/xeq.c     **** }
 10981              		.loc 1 1323 2 view .LVU2944
 10982 00aa 0097     		str	r7, [sp]
 10983 00ac 4246     		mov	r2, r8
 10984 00ae 4B46     		mov	r3, r9
 10985 00b0 6420     		movs	r0, #100
 10986 00b2 FFF7FEFF 		bl	set_reg_n_int_sgn
 10987              	.LVL828:
 10988              	.L803:
1323:src/xeq.c     **** }
 10989              		.loc 1 1323 2 is_stmt 0 view .LVU2945
 10990              	.LBE2146:
 10991              	.LBE2145:
 10992              	.LBE2140:
1138:src/xeq.c     **** #ifndef DM42
 10993              		.loc 1 1138 3 is_stmt 1 view .LVU2946
 10994              	.LBB2147:
 10995              	.LBI2147:
3671:src/xeq.c     **** 	if (!Running && !XromRunning)
 10996              		.loc 1 3671 6 view .LVU2947
 10997              	.LBB2148:
3672:src/xeq.c     **** 		State.entryp = 1;
 10998              		.loc 1 3672 2 view .LVU2948
 10999              	.LBB2149:
 11000              	.LBI2149:
3671:src/xeq.c     **** 	if (!Running && !XromRunning)
 11001              		.loc 1 3671 6 view .LVU2949
 11002              	.LBE2149:
3672:src/xeq.c     **** 		State.entryp = 1;
 11003              		.loc 1 3672 6 is_stmt 0 view .LVU2950
 11004 00b6 5F4A     		ldr	r2, .L833+8
 11005              	.LBB2151:
 11006              	.LBB2150:
3672:src/xeq.c     **** 		State.entryp = 1;
ARM GAS  /tmp/cciWh9P3.s 			page 338


 11007              		.loc 1 3672 18 view .LVU2951
 11008 00b8 5F4B     		ldr	r3, .L833+12
3672:src/xeq.c     **** 		State.entryp = 1;
 11009              		.loc 1 3672 15 view .LVU2952
 11010 00ba 1268     		ldr	r2, [r2]
 11011 00bc 1B68     		ldr	r3, [r3]
 11012 00be 1343     		orrs	r3, r2, r3
 11013 00c0 A4D1     		bne	.L793
3673:src/xeq.c     **** }
 11014              		.loc 1 3673 3 is_stmt 1 view .LVU2953
3673:src/xeq.c     **** }
 11015              		.loc 1 3673 16 is_stmt 0 view .LVU2954
 11016 00c2 3268     		ldr	r2, [r6]
 11017 00c4 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 11018 00c8 43F01003 		orr	r3, r3, #16
 11019 00cc 82F8DD37 		strb	r3, [r2, #2013]
 11020 00d0 9CE7     		b	.L793
 11021              	.LVL829:
 11022              	.L827:
3673:src/xeq.c     **** }
 11023              		.loc 1 3673 16 view .LVU2955
 11024              	.LBE2150:
 11025              	.LBE2151:
 11026              	.LBE2148:
 11027              	.LBE2147:
1064:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11028              		.loc 1 1064 4 is_stmt 1 view .LVU2956
1064:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11029              		.loc 1 1064 15 is_stmt 0 view .LVU2957
 11030 00d2 0DF1B00C 		add	ip, sp, #176
1064:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11031              		.loc 1 1064 29 view .LVU2958
 11032 00d6 501E     		subs	r0, r2, #1
1064:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11033              		.loc 1 1064 15 view .LVU2959
 11034 00d8 6044     		add	r0, r0, ip
 11035 00da 10F8A4CC 		ldrb	ip, [r0, #-164]	@ zero_extendqisi2
1064:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11036              		.loc 1 1064 7 view .LVU2960
 11037 00de BCF1450F 		cmp	ip, #69
 11038 00e2 6BD0     		beq	.L829
1066:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11039              		.loc 1 1066 9 is_stmt 1 view .LVU2961
1066:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11040              		.loc 1 1066 12 is_stmt 0 view .LVU2962
 11041 00e4 012A     		cmp	r2, #1
 11042 00e6 07D9     		bls	.L797
1066:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11043              		.loc 1 1066 41 discriminator 1 view .LVU2963
 11044 00e8 2CA8     		add	r0, sp, #176
1066:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11045              		.loc 1 1066 55 discriminator 1 view .LVU2964
 11046 00ea 023A     		subs	r2, r2, #2
1066:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11047              		.loc 1 1066 41 discriminator 1 view .LVU2965
 11048 00ec 0244     		add	r2, r2, r0
1066:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
ARM GAS  /tmp/cciWh9P3.s 			page 339


 11049              		.loc 1 1066 31 discriminator 1 view .LVU2966
 11050 00ee 12F8A40C 		ldrb	r0, [r2, #-164]	@ zero_extendqisi2
 11051 00f2 4528     		cmp	r0, #69
 11052 00f4 00F09380 		beq	.L830
 11053              	.L797:
1079:src/xeq.c     **** 		lift_if_enabled();
 11054              		.loc 1 1079 3 is_stmt 1 view .LVU2967
 11055              	.LBB2152:
 11056              	.LBB2130:
 11057              	.LBB2126:
 11058              	.LBB2121:
 734:src/xeq.c     **** }
 11059              		.loc 1 734 15 is_stmt 0 view .LVU2968
 11060 00f8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11061              	.LBE2121:
 11062              	.LBE2126:
 11063              	.LBE2130:
 11064              	.LBE2152:
1079:src/xeq.c     **** 		lift_if_enabled();
 11065              		.loc 1 1079 17 view .LVU2969
 11066 00fa 0020     		movs	r0, #0
 11067 00fc 2077     		strb	r0, [r4, #28]
1080:src/xeq.c     **** 		set_lift();
 11068              		.loc 1 1080 3 is_stmt 1 view .LVU2970
 11069              	.LBB2153:
 737:src/xeq.c     **** 	if (get_lift())
 11070              		.loc 1 737 6 view .LVU2971
 11071              	.LBB2131:
 738:src/xeq.c     **** 		lift();
 11072              		.loc 1 738 2 view .LVU2972
 11073              	.LBB2127:
 733:src/xeq.c     **** 	return State2.state_lift;
 11074              		.loc 1 733 12 view .LVU2973
 11075              	.LBB2122:
 734:src/xeq.c     **** }
 11076              		.loc 1 734 2 view .LVU2974
 11077              	.LBE2122:
 11078              	.LBE2127:
 738:src/xeq.c     **** 		lift();
 11079              		.loc 1 738 5 is_stmt 0 view .LVU2975
 11080 00fe 5806     		lsls	r0, r3, #25
 11081              	.LBB2128:
 11082              	.LBB2123:
 734:src/xeq.c     **** }
 11083              		.loc 1 734 15 view .LVU2976
 11084 0100 C3F38012 		ubfx	r2, r3, #6, #1
 11085              	.LBE2123:
 11086              	.LBE2128:
 738:src/xeq.c     **** 		lift();
 11087              		.loc 1 738 5 view .LVU2977
 11088 0104 3FD4     		bmi	.L811
 11089              	.LBE2131:
 11090              	.LBE2153:
1081:src/xeq.c     **** 		CmdLineDot = 0;
 11091              		.loc 1 1081 3 is_stmt 1 view .LVU2978
 11092              	.LBB2154:
 747:src/xeq.c     ****     State2.state_lift = 1;
ARM GAS  /tmp/cciWh9P3.s 			page 340


 11093              		.loc 1 747 6 view .LVU2979
 11094              	.LBB2136:
 748:src/xeq.c     **** }
 11095              		.loc 1 748 5 view .LVU2980
 748:src/xeq.c     **** }
 11096              		.loc 1 748 23 is_stmt 0 view .LVU2981
 11097 0106 43F04003 		orr	r3, r3, #64
 11098              	.LBE2136:
 11099              	.LBE2154:
1088:src/xeq.c     **** 			char *d0, *d1, *d2;
 11100              		.loc 1 1088 13 view .LVU2982
 11101 010a 022F     		cmp	r7, #2
 11102              	.LBB2155:
 11103              	.LBB2137:
 748:src/xeq.c     **** }
 11104              		.loc 1 748 23 view .LVU2983
 11105 010c E375     		strb	r3, [r4, #23]
 11106              	.LBE2137:
 11107              	.LBE2155:
1082:src/xeq.c     **** 		CmdLineEex = 0;
 11108              		.loc 1 1082 3 is_stmt 1 view .LVU2984
1082:src/xeq.c     **** 		CmdLineEex = 0;
 11109              		.loc 1 1082 14 is_stmt 0 view .LVU2985
 11110 010e A277     		strb	r2, [r4, #30]
1083:src/xeq.c     **** 		if (is_intmode()) {
 11111              		.loc 1 1083 3 is_stmt 1 view .LVU2986
1083:src/xeq.c     **** 		if (is_intmode()) {
 11112              		.loc 1 1083 14 is_stmt 0 view .LVU2987
 11113 0110 6277     		strb	r2, [r4, #29]
1084:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11114              		.loc 1 1084 3 is_stmt 1 view .LVU2988
1088:src/xeq.c     **** 			char *d0, *d1, *d2;
 11115              		.loc 1 1088 10 view .LVU2989
1088:src/xeq.c     **** 			char *d0, *d1, *d2;
 11116              		.loc 1 1088 13 is_stmt 0 view .LVU2990
 11117 0112 49D1     		bne	.L804
 11118              	.L832:
 11119              	.LBB2156:
1089:src/xeq.c     **** 			int neg;
 11120              		.loc 1 1089 4 is_stmt 1 view .LVU2991
1090:src/xeq.c     **** 
 11121              		.loc 1 1090 4 view .LVU2992
1092:src/xeq.c     **** 				return;
 11122              		.loc 1 1092 4 view .LVU2993
1092:src/xeq.c     **** 				return;
 11123              		.loc 1 1092 7 is_stmt 0 view .LVU2994
 11124 0114 002D     		cmp	r5, #0
 11125 0116 7FF479AF 		bne	.L793
1095:src/xeq.c     **** #endif
 11126              		.loc 1 1095 4 is_stmt 1 view .LVU2995
1095:src/xeq.c     **** #endif
 11127              		.loc 1 1095 17 is_stmt 0 view .LVU2996
 11128 011a 91F8E637 		ldrb	r3, [r1, #2022]	@ zero_extendqisi2
 11129 011e 43F02003 		orr	r3, r3, #32
 11130 0122 81F8E637 		strb	r3, [r1, #2022]
1097:src/xeq.c     **** 				neg = 1;
 11131              		.loc 1 1097 4 is_stmt 1 view .LVU2997
ARM GAS  /tmp/cciWh9P3.s 			page 341


1097:src/xeq.c     **** 				neg = 1;
 11132              		.loc 1 1097 7 is_stmt 0 view .LVU2998
 11133 0126 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 11134 012a 2D2B     		cmp	r3, #45
 11135 012c 49D0     		beq	.L831
1101:src/xeq.c     **** 				d0 = cmdline;
 11136              		.loc 1 1101 5 is_stmt 1 view .LVU2999
 11137              	.LVL830:
1102:src/xeq.c     **** 			}
 11138              		.loc 1 1102 5 view .LVU3000
1104:src/xeq.c     **** 			*d1++ = '\0';
 11139              		.loc 1 1104 4 view .LVU3001
1104:src/xeq.c     **** 			*d1++ = '\0';
 11140              		.loc 1 1104 9 is_stmt 0 view .LVU3002
 11141 012e 2E21     		movs	r1, #46
 11142 0130 03A8     		add	r0, sp, #12
 11143              	.LVL831:
1104:src/xeq.c     **** 			*d1++ = '\0';
 11144              		.loc 1 1104 9 view .LVU3003
 11145 0132 FFF7FEFF 		bl	find_char
 11146              	.LVL832:
1105:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11147              		.loc 1 1105 4 is_stmt 1 view .LVU3004
1105:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11148              		.loc 1 1105 7 is_stmt 0 view .LVU3005
 11149 0136 0746     		mov	r7, r0
 11150              	.LVL833:
1106:src/xeq.c     **** 			*d2++ = '\0';
 11151              		.loc 1 1106 9 view .LVU3006
 11152 0138 2E21     		movs	r1, #46
1105:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11153              		.loc 1 1105 10 view .LVU3007
 11154 013a 07F8015B 		strb	r5, [r7], #1
 11155              	.LVL834:
1106:src/xeq.c     **** 			*d2++ = '\0';
 11156              		.loc 1 1106 4 is_stmt 1 view .LVU3008
1106:src/xeq.c     **** 			*d2++ = '\0';
 11157              		.loc 1 1106 9 is_stmt 0 view .LVU3009
 11158 013e 3846     		mov	r0, r7
 11159 0140 FFF7FEFF 		bl	find_char
 11160              	.LVL835:
1107:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11161              		.loc 1 1107 4 is_stmt 1 view .LVU3010
1107:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11162              		.loc 1 1107 10 is_stmt 0 view .LVU3011
 11163 0144 0146     		mov	r1, r0
1109:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11164              		.loc 1 1109 4 view .LVU3012
 11165 0146 1AAC     		add	r4, sp, #104
1107:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11166              		.loc 1 1107 10 view .LVU3013
 11167 0148 01F8015B 		strb	r5, [r1], #1
 11168              	.LVL836:
1108:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11169              		.loc 1 1108 4 is_stmt 1 view .LVU3014
 11170 014c 3B4A     		ldr	r2, .L833+16
 11171 014e 11A8     		add	r0, sp, #68
ARM GAS  /tmp/cciWh9P3.s 			page 342


 11172 0150 FFF7FEFF 		bl	decNumberFromString
 11173              	.LVL837:
1109:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11174              		.loc 1 1109 4 view .LVU3015
 11175 0154 394A     		ldr	r2, .L833+16
 11176 0156 03A9     		add	r1, sp, #12
 11177              	.LVL838:
1109:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11178              		.loc 1 1109 4 is_stmt 0 view .LVU3016
 11179 0158 2046     		mov	r0, r4
 11180 015a FFF7FEFF 		bl	decNumberFromString
 11181              	.LVL839:
1121:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11182              		.loc 1 1121 5 is_stmt 1 view .LVU3017
 11183 015e 374A     		ldr	r2, .L833+16
 11184 0160 3946     		mov	r1, r7
 11185 0162 08A8     		add	r0, sp, #32
 11186 0164 FFF7FEFF 		bl	decNumberFromString
 11187              	.LVL840:
1126:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
 11188              		.loc 1 1126 4 view .LVU3018
 11189 0168 11AA     		add	r2, sp, #68
 11190 016a 08A9     		add	r1, sp, #32
 11191 016c 23A8     		add	r0, sp, #140
 11192 016e FFF7FEFF 		bl	dn_divide
 11193              	.LVL841:
1130:src/xeq.c     **** 			if (neg)
 11194              		.loc 1 1130 5 view .LVU3019
 11195 0172 23AA     		add	r2, sp, #140
 11196 0174 2146     		mov	r1, r4
 11197 0176 2046     		mov	r0, r4
 11198 0178 FFF7FEFF 		bl	dn_add
 11199              	.LVL842:
1131:src/xeq.c     **** 				dn_minus(&x, &x);
 11200              		.loc 1 1131 4 view .LVU3020
 11201              	.L810:
1133:src/xeq.c     **** 		} else {
 11202              		.loc 1 1133 4 view .LVU3021
 11203              	.LBB2157:
 11204              	.LBI2157:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 11205              		.loc 1 808 6 view .LVU3022
 11206              	.LBB2158:
 809:src/xeq.c     **** }
 11207              		.loc 1 809 2 view .LVU3023
 11208 017c 2146     		mov	r1, r4
 11209 017e 6420     		movs	r0, #100
 11210 0180 FFF7FEFF 		bl	setRegister
 11211              	.LVL843:
 810:src/xeq.c     **** 
 11212              		.loc 1 810 1 is_stmt 0 view .LVU3024
 11213 0184 97E7     		b	.L803
 11214              	.LVL844:
 11215              	.L811:
 810:src/xeq.c     **** 
 11216              		.loc 1 810 1 view .LVU3025
 11217              	.LBE2158:
ARM GAS  /tmp/cciWh9P3.s 			page 343


 11218              	.LBE2157:
 11219              	.LBE2156:
 11220              	.LBB2159:
 11221              	.LBB2132:
 739:src/xeq.c     **** }
 11222              		.loc 1 739 3 is_stmt 1 view .LVU3026
 11223 0186 FFF7FEFF 		bl	lift
 11224              	.LVL845:
 11225              	.LBE2132:
 11226              	.LBE2159:
1081:src/xeq.c     **** 		CmdLineDot = 0;
 11227              		.loc 1 1081 3 view .LVU3027
 11228              	.LBB2160:
 747:src/xeq.c     ****     State2.state_lift = 1;
 11229              		.loc 1 747 6 view .LVU3028
 11230              	.LBB2138:
 748:src/xeq.c     **** }
 11231              		.loc 1 748 5 view .LVU3029
 11232 018a 3168     		ldr	r1, [r6]
 748:src/xeq.c     **** }
 11233              		.loc 1 748 23 is_stmt 0 view .LVU3030
 11234 018c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11235 018e 91F8E807 		ldrb	r0, [r1, #2024]	@ zero_extendqisi2
 11236              	.LBE2138:
 11237              	.LBE2160:
1082:src/xeq.c     **** 		CmdLineEex = 0;
 11238              		.loc 1 1082 14 view .LVU3031
 11239 0192 0022     		movs	r2, #0
 11240              	.LBB2161:
 11241              	.LBB2139:
 748:src/xeq.c     **** }
 11242              		.loc 1 748 23 view .LVU3032
 11243 0194 43F04003 		orr	r3, r3, #64
 11244 0198 E375     		strb	r3, [r4, #23]
 11245              	.LBE2139:
 11246              	.LBE2161:
1082:src/xeq.c     **** 		CmdLineEex = 0;
 11247              		.loc 1 1082 3 is_stmt 1 view .LVU3033
1082:src/xeq.c     **** 		CmdLineEex = 0;
 11248              		.loc 1 1082 14 is_stmt 0 view .LVU3034
 11249 019a A277     		strb	r2, [r4, #30]
1083:src/xeq.c     **** 		if (is_intmode()) {
 11250              		.loc 1 1083 3 is_stmt 1 view .LVU3035
1083:src/xeq.c     **** 		if (is_intmode()) {
 11251              		.loc 1 1083 14 is_stmt 0 view .LVU3036
 11252 019c 6277     		strb	r2, [r4, #29]
1084:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11253              		.loc 1 1084 3 is_stmt 1 view .LVU3037
1084:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11254              		.loc 1 1084 6 is_stmt 0 view .LVU3038
 11255 019e C407     		lsls	r4, r0, #31
 11256 01a0 3FF55CAF 		bmi	.L813
1088:src/xeq.c     **** 			char *d0, *d1, *d2;
 11257              		.loc 1 1088 10 is_stmt 1 view .LVU3039
1088:src/xeq.c     **** 			char *d0, *d1, *d2;
 11258              		.loc 1 1088 13 is_stmt 0 view .LVU3040
 11259 01a4 022F     		cmp	r7, #2
ARM GAS  /tmp/cciWh9P3.s 			page 344


 11260 01a6 B5D0     		beq	.L832
 11261              	.L804:
1135:src/xeq.c     **** 			setX(&x);
 11262              		.loc 1 1135 4 is_stmt 1 view .LVU3041
 11263 01a8 03A9     		add	r1, sp, #12
 11264 01aa 244A     		ldr	r2, .L833+16
 11265 01ac 1AA8     		add	r0, sp, #104
 11266 01ae FFF7FEFF 		bl	decNumberFromString
 11267              	.LVL846:
1136:src/xeq.c     **** 		}
 11268              		.loc 1 1136 4 view .LVU3042
 11269              	.LBB2162:
 11270              	.LBI2162:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 11271              		.loc 1 808 6 view .LVU3043
 11272              	.LBB2163:
 809:src/xeq.c     **** }
 11273              		.loc 1 809 2 view .LVU3044
 11274 01b2 1AA9     		add	r1, sp, #104
 11275              	.LVL847:
 809:src/xeq.c     **** }
 11276              		.loc 1 809 2 is_stmt 0 view .LVU3045
 11277 01b4 6420     		movs	r0, #100
 11278 01b6 FFF7FEFF 		bl	setRegister
 11279              	.LVL848:
 810:src/xeq.c     **** 
 11280              		.loc 1 810 1 view .LVU3046
 11281 01ba 7CE7     		b	.L803
 11282              	.LVL849:
 11283              	.L829:
 810:src/xeq.c     **** 
 11284              		.loc 1 810 1 view .LVU3047
 11285              	.LBE2163:
 11286              	.LBE2162:
1065:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
 11287              		.loc 1 1065 5 is_stmt 1 view .LVU3048
1065:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
 11288              		.loc 1 1065 30 is_stmt 0 view .LVU3049
 11289 01bc 00F8A43C 		strb	r3, [r0, #-164]
 11290 01c0 9AE7     		b	.L797
 11291              	.L831:
 11292              	.LVL850:
 11293              	.LBB2164:
1104:src/xeq.c     **** 			*d1++ = '\0';
 11294              		.loc 1 1104 4 is_stmt 1 view .LVU3050
1104:src/xeq.c     **** 			*d1++ = '\0';
 11295              		.loc 1 1104 9 is_stmt 0 view .LVU3051
 11296 01c2 0DF10D00 		add	r0, sp, #13
 11297              	.LVL851:
1104:src/xeq.c     **** 			*d1++ = '\0';
 11298              		.loc 1 1104 9 view .LVU3052
 11299 01c6 2E21     		movs	r1, #46
 11300 01c8 FFF7FEFF 		bl	find_char
 11301              	.LVL852:
1105:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11302              		.loc 1 1105 4 is_stmt 1 view .LVU3053
1105:src/xeq.c     **** 			d2 = find_char(d1, '.');
ARM GAS  /tmp/cciWh9P3.s 			page 345


 11303              		.loc 1 1105 7 is_stmt 0 view .LVU3054
 11304 01cc 0746     		mov	r7, r0
 11305              	.LVL853:
1106:src/xeq.c     **** 			*d2++ = '\0';
 11306              		.loc 1 1106 9 view .LVU3055
 11307 01ce 2E21     		movs	r1, #46
1105:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11308              		.loc 1 1105 10 view .LVU3056
 11309 01d0 07F8015B 		strb	r5, [r7], #1
 11310              	.LVL854:
1106:src/xeq.c     **** 			*d2++ = '\0';
 11311              		.loc 1 1106 4 is_stmt 1 view .LVU3057
1106:src/xeq.c     **** 			*d2++ = '\0';
 11312              		.loc 1 1106 9 is_stmt 0 view .LVU3058
 11313 01d4 3846     		mov	r0, r7
 11314 01d6 FFF7FEFF 		bl	find_char
 11315              	.LVL855:
1107:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11316              		.loc 1 1107 4 is_stmt 1 view .LVU3059
1107:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11317              		.loc 1 1107 10 is_stmt 0 view .LVU3060
 11318 01da 0146     		mov	r1, r0
1109:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11319              		.loc 1 1109 4 view .LVU3061
 11320 01dc 1AAC     		add	r4, sp, #104
1107:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11321              		.loc 1 1107 10 view .LVU3062
 11322 01de 01F8015B 		strb	r5, [r1], #1
 11323              	.LVL856:
1108:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11324              		.loc 1 1108 4 is_stmt 1 view .LVU3063
 11325 01e2 164A     		ldr	r2, .L833+16
 11326 01e4 11A8     		add	r0, sp, #68
 11327 01e6 FFF7FEFF 		bl	decNumberFromString
 11328              	.LVL857:
1109:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11329              		.loc 1 1109 4 view .LVU3064
 11330 01ea 0DF10D01 		add	r1, sp, #13
 11331              	.LVL858:
1109:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11332              		.loc 1 1109 4 is_stmt 0 view .LVU3065
 11333 01ee 134A     		ldr	r2, .L833+16
 11334 01f0 2046     		mov	r0, r4
 11335 01f2 FFF7FEFF 		bl	decNumberFromString
 11336              	.LVL859:
1121:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11337              		.loc 1 1121 5 is_stmt 1 view .LVU3066
 11338 01f6 3946     		mov	r1, r7
 11339 01f8 104A     		ldr	r2, .L833+16
 11340 01fa 08A8     		add	r0, sp, #32
 11341 01fc FFF7FEFF 		bl	decNumberFromString
 11342              	.LVL860:
1126:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
 11343              		.loc 1 1126 4 view .LVU3067
 11344 0200 11AA     		add	r2, sp, #68
 11345 0202 08A9     		add	r1, sp, #32
 11346 0204 23A8     		add	r0, sp, #140
ARM GAS  /tmp/cciWh9P3.s 			page 346


 11347 0206 FFF7FEFF 		bl	dn_divide
 11348              	.LVL861:
1130:src/xeq.c     **** 			if (neg)
 11349              		.loc 1 1130 5 view .LVU3068
 11350 020a 2146     		mov	r1, r4
 11351 020c 23AA     		add	r2, sp, #140
 11352 020e 2046     		mov	r0, r4
 11353 0210 FFF7FEFF 		bl	dn_add
 11354              	.LVL862:
1131:src/xeq.c     **** 				dn_minus(&x, &x);
 11355              		.loc 1 1131 4 view .LVU3069
1132:src/xeq.c     **** 			setX(&x);
 11356              		.loc 1 1132 5 view .LVU3070
 11357 0214 2146     		mov	r1, r4
 11358 0216 2046     		mov	r0, r4
 11359 0218 FFF7FEFF 		bl	dn_minus
 11360              	.LVL863:
 11361 021c AEE7     		b	.L810
 11362              	.LVL864:
 11363              	.L830:
1132:src/xeq.c     **** 			setX(&x);
 11364              		.loc 1 1132 5 is_stmt 0 view .LVU3071
 11365              	.LBE2164:
1066:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
 11366              		.loc 1 1066 66 discriminator 2 view .LVU3072
 11367 021e BCF12D0F 		cmp	ip, #45
 11368 0222 7FF469AF 		bne	.L797
1067:src/xeq.c     **** #endif
 11369              		.loc 1 1067 5 is_stmt 1 view .LVU3073
1067:src/xeq.c     **** #endif
 11370              		.loc 1 1067 30 is_stmt 0 view .LVU3074
 11371 0226 02F8A43C 		strb	r3, [r2, #-164]
 11372 022a 65E7     		b	.L797
 11373              	.L834:
 11374              		.align	2
 11375              	.L833:
 11376 022c 00000000 		.word	StateWhileOn
 11377 0230 00000000 		.word	main_ram
 11378 0234 00000000 		.word	Running
 11379 0238 00000000 		.word	XromRunning
 11380 023c 00000000 		.word	Ctx
 11381              	.LBE2114:
 11382              		.cfi_endproc
 11383              	.LFE84:
 11385              		.section	.text.process_cmdline_set_lift,"ax",%progbits
 11386              		.align	1
 11387              		.p2align 2,,3
 11388              		.global	process_cmdline_set_lift
 11389              		.syntax unified
 11390              		.thumb
 11391              		.thumb_func
 11392              		.fpu fpv4-sp-d16
 11394              	process_cmdline_set_lift:
 11395              	.LFB85:
1145:src/xeq.c     **** 	process_cmdline();
 11396              		.loc 1 1145 37 is_stmt 1 view -0
 11397              		.cfi_startproc
ARM GAS  /tmp/cciWh9P3.s 			page 347


 11398              		@ args = 0, pretend = 0, frame = 0
 11399              		@ frame_needed = 0, uses_anonymous_args = 0
1146:src/xeq.c     **** 	set_lift();
 11400              		.loc 1 1146 2 view .LVU3076
1145:src/xeq.c     **** 	process_cmdline();
 11401              		.loc 1 1145 37 is_stmt 0 view .LVU3077
 11402 0000 08B5     		push	{r3, lr}
 11403              		.cfi_def_cfa_offset 8
 11404              		.cfi_offset 3, -8
 11405              		.cfi_offset 14, -4
1146:src/xeq.c     **** 	set_lift();
 11406              		.loc 1 1146 2 view .LVU3078
 11407 0002 FFF7FEFF 		bl	process_cmdline
 11408              	.LVL865:
1147:src/xeq.c     **** }
 11409              		.loc 1 1147 2 is_stmt 1 view .LVU3079
 11410              	.LBB2165:
 11411              	.LBI2165:
 747:src/xeq.c     ****     State2.state_lift = 1;
 11412              		.loc 1 747 6 view .LVU3080
 11413              	.LBB2166:
 748:src/xeq.c     **** }
 11414              		.loc 1 748 5 view .LVU3081
 748:src/xeq.c     **** }
 11415              		.loc 1 748 23 is_stmt 0 view .LVU3082
 11416 0006 034A     		ldr	r2, .L837
 11417 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 11418 000a 43F04003 		orr	r3, r3, #64
 11419 000e D375     		strb	r3, [r2, #23]
 11420              	.LBE2166:
 11421              	.LBE2165:
1148:src/xeq.c     **** 
 11422              		.loc 1 1148 1 view .LVU3083
 11423 0010 08BD     		pop	{r3, pc}
 11424              	.L838:
 11425 0012 00BF     		.align	2
 11426              	.L837:
 11427 0014 00000000 		.word	StateWhileOn
 11428              		.cfi_endproc
 11429              	.LFE85:
 11431              		.section	.text.setX_int,"ax",%progbits
 11432              		.align	1
 11433              		.p2align 2,,3
 11434              		.global	setX_int
 11435              		.syntax unified
 11436              		.thumb
 11437              		.thumb_func
 11438              		.fpu fpv4-sp-d16
 11440              	setX_int:
 11441              	.LVL866:
 11442              	.LFB98:
1317:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 11443              		.loc 1 1317 34 is_stmt 1 view -0
 11444              		.cfi_startproc
 11445              		@ args = 0, pretend = 0, frame = 8
 11446              		@ frame_needed = 0, uses_anonymous_args = 0
1318:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 348


 11447              		.loc 1 1318 2 view .LVU3085
1317:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 11448              		.loc 1 1317 34 is_stmt 0 view .LVU3086
 11449 0000 00B5     		push	{lr}
 11450              		.cfi_def_cfa_offset 4
 11451              		.cfi_offset 14, -4
 11452 0002 0B46     		mov	r3, r1
 11453 0004 83B0     		sub	sp, sp, #12
 11454              		.cfi_def_cfa_offset 16
1317:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 11455              		.loc 1 1317 34 view .LVU3087
 11456 0006 0246     		mov	r2, r0
 11457              	.LBB2167:
 11458              	.LBB2168:
1236:src/xeq.c     **** }
 11459              		.loc 1 1236 8 view .LVU3088
 11460 0008 6420     		movs	r0, #100
 11461              	.LVL867:
1236:src/xeq.c     **** }
 11462              		.loc 1 1236 8 view .LVU3089
 11463 000a CDE90023 		strd	r2, [sp]
 11464              	.LVL868:
1236:src/xeq.c     **** }
 11465              		.loc 1 1236 8 view .LVU3090
 11466              	.LBE2168:
 11467              	.LBI2167:
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 11468              		.loc 1 1235 6 is_stmt 1 view .LVU3091
 11469              	.LBB2169:
1236:src/xeq.c     **** }
 11470              		.loc 1 1236 2 view .LVU3092
1236:src/xeq.c     **** }
 11471              		.loc 1 1236 8 is_stmt 0 view .LVU3093
 11472 000e FFF7FEFF 		bl	get_reg_n
 11473              	.LVL869:
1236:src/xeq.c     **** }
 11474              		.loc 1 1236 2 view .LVU3094
 11475 0012 0822     		movs	r2, #8
 11476 0014 6946     		mov	r1, sp
 11477 0016 FFF7FEFF 		bl	xcopy
 11478              	.LVL870:
1236:src/xeq.c     **** }
 11479              		.loc 1 1236 2 view .LVU3095
 11480              	.LBE2169:
 11481              	.LBE2167:
1319:src/xeq.c     **** 
 11482              		.loc 1 1319 1 view .LVU3096
 11483 001a 03B0     		add	sp, sp, #12
 11484              		.cfi_def_cfa_offset 4
 11485              		@ sp needed
 11486 001c 5DF804FB 		ldr	pc, [sp], #4
 11487              		.cfi_endproc
 11488              	.LFE98:
 11490              		.section	.text.do_rcl,"ax",%progbits
 11491              		.align	1
 11492              		.p2align 2,,3
 11493              		.syntax unified
ARM GAS  /tmp/cciWh9P3.s 			page 349


 11494              		.thumb
 11495              		.thumb_func
 11496              		.fpu fpv4-sp-d16
 11498              	do_rcl:
 11499              	.LVL871:
 11500              	.LFB114:
1545:src/xeq.c     **** 	if (op == RARG_RCL) {
 11501              		.loc 1 1545 45 is_stmt 1 view -0
 11502              		.cfi_startproc
 11503              		@ args = 0, pretend = 0, frame = 40
 11504              		@ frame_needed = 0, uses_anonymous_args = 0
1546:src/xeq.c     **** 		REGISTER temp;
 11505              		.loc 1 1546 2 view .LVU3098
1545:src/xeq.c     **** 	if (op == RARG_RCL) {
 11506              		.loc 1 1545 45 is_stmt 0 view .LVU3099
 11507 0000 30B5     		push	{r4, r5, lr}
 11508              		.cfi_def_cfa_offset 12
 11509              		.cfi_offset 4, -12
 11510              		.cfi_offset 5, -8
 11511              		.cfi_offset 14, -4
1546:src/xeq.c     **** 		REGISTER temp;
 11512              		.loc 1 1546 5 view .LVU3100
 11513 0002 0A29     		cmp	r1, #10
1545:src/xeq.c     **** 	if (op == RARG_RCL) {
 11514              		.loc 1 1545 45 view .LVU3101
 11515 0004 8BB0     		sub	sp, sp, #44
 11516              		.cfi_def_cfa_offset 56
1545:src/xeq.c     **** 	if (op == RARG_RCL) {
 11517              		.loc 1 1545 45 view .LVU3102
 11518 0006 0B46     		mov	r3, r1
1546:src/xeq.c     **** 		REGISTER temp;
 11519              		.loc 1 1546 5 view .LVU3103
 11520 0008 33D0     		beq	.L862
1552:src/xeq.c     **** 			long long int r;
 11521              		.loc 1 1552 3 is_stmt 1 view .LVU3104
1552:src/xeq.c     **** 			long long int r;
 11522              		.loc 1 1552 7 is_stmt 0 view .LVU3105
 11523 000a 304A     		ldr	r2, .L864
 11524 000c 1268     		ldr	r2, [r2]
 11525 000e 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1552:src/xeq.c     **** 			long long int r;
 11526              		.loc 1 1552 6 view .LVU3106
 11527 0012 D207     		lsls	r2, r2, #31
 11528 0014 0146     		mov	r1, r0
 11529              	.LVL872:
 11530              	.LBB2199:
1555:src/xeq.c     **** 				illegal(op);
 11531              		.loc 1 1555 8 view .LVU3107
 11532 0016 A3F10A03 		sub	r3, r3, #10
 11533              	.LBE2199:
1552:src/xeq.c     **** 			long long int r;
 11534              		.loc 1 1552 6 view .LVU3108
 11535 001a 14D5     		bpl	.L847
 11536              	.LBB2206:
1553:src/xeq.c     **** 
 11537              		.loc 1 1553 4 is_stmt 1 view .LVU3109
1555:src/xeq.c     **** 				illegal(op);
ARM GAS  /tmp/cciWh9P3.s 			page 350


 11538              		.loc 1 1555 4 view .LVU3110
1555:src/xeq.c     **** 				illegal(op);
 11539              		.loc 1 1555 8 is_stmt 0 view .LVU3111
 11540 001c 98B2     		uxth	r0, r3
 11541              	.LVL873:
1555:src/xeq.c     **** 				illegal(op);
 11542              		.loc 1 1555 8 view .LVU3112
 11543 001e 6A46     		mov	r2, sp
 11544 0020 0123     		movs	r3, #1
 11545 0022 FFF7FEFF 		bl	storcl_intop
 11546              	.LVL874:
1555:src/xeq.c     **** 				illegal(op);
 11547              		.loc 1 1555 7 view .LVU3113
 11548 0026 20B1     		cbz	r0, .L848
1556:src/xeq.c     **** 			setlastX();
 11549              		.loc 1 1556 5 is_stmt 1 view .LVU3114
1556:src/xeq.c     **** 			setlastX();
 11550              		.loc 1 1556 5 view .LVU3115
 11551              	.LVL875:
 11552              	.LBB2200:
 11553              	.LBI2200:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11554              		.loc 1 536 5 view .LVU3116
 11555              	.LBB2201:
 537:src/xeq.c     **** 		Error = e;
 11556              		.loc 1 537 2 view .LVU3117
 537:src/xeq.c     **** 		Error = e;
 11557              		.loc 1 537 12 is_stmt 0 view .LVU3118
 11558 0028 294B     		ldr	r3, .L864+4
 537:src/xeq.c     **** 		Error = e;
 11559              		.loc 1 537 5 view .LVU3119
 11560 002a 1A68     		ldr	r2, [r3]
 11561 002c 0AB9     		cbnz	r2, .L848
 11562              	.LVL876:
 11563              	.LBB2202:
 11564              	.LBI2202:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11565              		.loc 1 536 5 is_stmt 1 view .LVU3120
 11566              	.LBB2203:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 11567              		.loc 1 538 3 view .LVU3121
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 11568              		.loc 1 538 9 is_stmt 0 view .LVU3122
 11569 002e 0322     		movs	r2, #3
 11570 0030 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 11571              		.loc 1 539 3 is_stmt 1 view .LVU3123
 11572              	.LVL877:
 11573              	.L848:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 11574              		.loc 1 539 3 is_stmt 0 view .LVU3124
 11575              	.LBE2203:
 11576              	.LBE2202:
 11577              	.LBE2201:
 11578              	.LBE2200:
1556:src/xeq.c     **** 			setlastX();
 11579              		.loc 1 1556 5 is_stmt 1 discriminator 1 view .LVU3125
ARM GAS  /tmp/cciWh9P3.s 			page 351


1557:src/xeq.c     **** 			setX_int(r);
 11580              		.loc 1 1557 4 discriminator 1 view .LVU3126
 11581              	.LBB2204:
 11582              	.LBI2204:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 11583              		.loc 1 772 6 discriminator 1 view .LVU3127
 11584              	.LBB2205:
 773:src/xeq.c     **** }
 11585              		.loc 1 773 2 discriminator 1 view .LVU3128
 11586 0032 6421     		movs	r1, #100
 11587 0034 6C20     		movs	r0, #108
 11588 0036 FFF7FEFF 		bl	copyreg_n
 11589              	.LVL878:
 11590              	.LBE2205:
 11591              	.LBE2204:
1558:src/xeq.c     **** 		} else {
 11592              		.loc 1 1558 4 discriminator 1 view .LVU3129
 11593 003a DDE90001 		ldrd	r0, [sp]
 11594 003e FFF7FEFF 		bl	setX_int
 11595              	.LVL879:
 11596              	.LBE2206:
1568:src/xeq.c     **** 
 11597              		.loc 1 1568 1 is_stmt 0 discriminator 1 view .LVU3130
 11598 0042 0BB0     		add	sp, sp, #44
 11599              		.cfi_remember_state
 11600              		.cfi_def_cfa_offset 12
 11601              		@ sp needed
 11602 0044 30BD     		pop	{r4, r5, pc}
 11603              	.LVL880:
 11604              	.L847:
 11605              		.cfi_restore_state
 11606              	.LBB2207:
1560:src/xeq.c     **** 
 11607              		.loc 1 1560 4 is_stmt 1 view .LVU3131
1562:src/xeq.c     **** 				illegal(op);
 11608              		.loc 1 1562 4 view .LVU3132
1562:src/xeq.c     **** 				illegal(op);
 11609              		.loc 1 1562 8 is_stmt 0 view .LVU3133
 11610 0046 6C46     		mov	r4, sp
 11611 0048 98B2     		uxth	r0, r3
 11612              	.LVL881:
1562:src/xeq.c     **** 				illegal(op);
 11613              		.loc 1 1562 8 view .LVU3134
 11614 004a 2246     		mov	r2, r4
 11615 004c 0123     		movs	r3, #1
 11616 004e FFF7FEFF 		bl	storcl_op
 11617              	.LVL882:
1562:src/xeq.c     **** 				illegal(op);
 11618              		.loc 1 1562 7 view .LVU3135
 11619 0052 20B1     		cbz	r0, .L849
1563:src/xeq.c     **** 			setlastX();
 11620              		.loc 1 1563 5 is_stmt 1 view .LVU3136
1563:src/xeq.c     **** 			setlastX();
 11621              		.loc 1 1563 5 view .LVU3137
 11622              	.LVL883:
 11623              	.LBB2208:
 11624              	.LBI2208:
ARM GAS  /tmp/cciWh9P3.s 			page 352


 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11625              		.loc 1 536 5 view .LVU3138
 11626              	.LBB2209:
 537:src/xeq.c     **** 		Error = e;
 11627              		.loc 1 537 2 view .LVU3139
 537:src/xeq.c     **** 		Error = e;
 11628              		.loc 1 537 12 is_stmt 0 view .LVU3140
 11629 0054 1E4B     		ldr	r3, .L864+4
 537:src/xeq.c     **** 		Error = e;
 11630              		.loc 1 537 5 view .LVU3141
 11631 0056 1A68     		ldr	r2, [r3]
 11632 0058 0AB9     		cbnz	r2, .L849
 11633              	.LVL884:
 11634              	.LBB2210:
 11635              	.LBI2210:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 11636              		.loc 1 536 5 is_stmt 1 view .LVU3142
 11637              	.LBB2211:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 11638              		.loc 1 538 3 view .LVU3143
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 11639              		.loc 1 538 9 is_stmt 0 view .LVU3144
 11640 005a 0322     		movs	r2, #3
 11641 005c 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 11642              		.loc 1 539 3 is_stmt 1 view .LVU3145
 11643              	.LVL885:
 11644              	.L849:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 11645              		.loc 1 539 3 is_stmt 0 view .LVU3146
 11646              	.LBE2211:
 11647              	.LBE2210:
 11648              	.LBE2209:
 11649              	.LBE2208:
1563:src/xeq.c     **** 			setlastX();
 11650              		.loc 1 1563 5 is_stmt 1 discriminator 1 view .LVU3147
1564:src/xeq.c     **** 			setX(&r);
 11651              		.loc 1 1564 4 discriminator 1 view .LVU3148
 11652              	.LBB2212:
 11653              	.LBI2212:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 11654              		.loc 1 772 6 discriminator 1 view .LVU3149
 11655              	.LBB2213:
 773:src/xeq.c     **** }
 11656              		.loc 1 773 2 discriminator 1 view .LVU3150
 11657 005e 6421     		movs	r1, #100
 11658 0060 6C20     		movs	r0, #108
 11659 0062 FFF7FEFF 		bl	copyreg_n
 11660              	.LVL886:
 11661              	.LBE2213:
 11662              	.LBE2212:
1565:src/xeq.c     **** 		}
 11663              		.loc 1 1565 4 discriminator 1 view .LVU3151
 11664              	.LBB2214:
 11665              	.LBI2214:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 11666              		.loc 1 808 6 discriminator 1 view .LVU3152
ARM GAS  /tmp/cciWh9P3.s 			page 353


 11667              	.LBB2215:
 809:src/xeq.c     **** }
 11668              		.loc 1 809 2 discriminator 1 view .LVU3153
 11669 0066 2146     		mov	r1, r4
 11670 0068 6420     		movs	r0, #100
 11671 006a FFF7FEFF 		bl	setRegister
 11672              	.LVL887:
 809:src/xeq.c     **** }
 11673              		.loc 1 809 2 is_stmt 0 discriminator 1 view .LVU3154
 11674              	.LBE2215:
 11675              	.LBE2214:
 11676              	.LBE2207:
1568:src/xeq.c     **** 
 11677              		.loc 1 1568 1 discriminator 1 view .LVU3155
 11678 006e 0BB0     		add	sp, sp, #44
 11679              		.cfi_remember_state
 11680              		.cfi_def_cfa_offset 12
 11681              		@ sp needed
 11682 0070 30BD     		pop	{r4, r5, pc}
 11683              	.LVL888:
 11684              	.L862:
 11685              		.cfi_restore_state
 11686              	.LBB2216:
1547:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
 11687              		.loc 1 1547 3 is_stmt 1 view .LVU3156
1548:src/xeq.c     **** 		lift_if_enabled();
 11688              		.loc 1 1548 3 view .LVU3157
 11689              	.LBB2217:
 11690              	.LBB2218:
 11691              	.LBB2219:
 11692              	.LBB2220:
 932:src/xeq.c     **** }
 11693              		.loc 1 932 24 is_stmt 0 view .LVU3158
 11694 0072 164D     		ldr	r5, .L864
 11695              	.LBE2220:
 11696              	.LBE2219:
 11697              	.LBE2218:
 11698              	.LBE2217:
1548:src/xeq.c     **** 		lift_if_enabled();
 11699              		.loc 1 1548 18 view .LVU3159
 11700 0074 FFF7FEFF 		bl	get_reg_n
 11701              	.LVL889:
 11702              	.LBB2227:
 11703              	.LBB2225:
 11704              	.LBB2223:
 11705              	.LBB2221:
 932:src/xeq.c     **** }
 11706              		.loc 1 932 24 view .LVU3160
 11707 0078 2B68     		ldr	r3, [r5]
 11708 007a B3F8E827 		ldrh	r2, [r3, #2024]
 11709 007e 44F20103 		movw	r3, #16385
 11710              	.LBE2221:
 11711              	.LBE2223:
 717:src/xeq.c     **** }
 11712              		.loc 1 717 2 view .LVU3161
 11713 0082 1340     		ands	r3, r3, r2
 11714 0084 B3F5804F 		cmp	r3, #16384
ARM GAS  /tmp/cciWh9P3.s 			page 354


 11715 0088 6C46     		mov	r4, sp
 11716              	.LBE2225:
 11717              	.LBE2227:
1548:src/xeq.c     **** 		lift_if_enabled();
 11718              		.loc 1 1548 18 view .LVU3162
 11719 008a 0146     		mov	r1, r0
 11720              	.LVL890:
 11721              	.LBB2228:
 11722              	.LBI2217:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 11723              		.loc 1 716 6 is_stmt 1 view .LVU3163
 11724              	.LBB2226:
 717:src/xeq.c     **** }
 11725              		.loc 1 717 2 view .LVU3164
 11726              	.LBB2224:
 11727              	.LBI2219:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11728              		.loc 1 931 5 view .LVU3165
 11729              	.LBB2222:
 932:src/xeq.c     **** }
 11730              		.loc 1 932 2 view .LVU3166
 11731              	.LBE2222:
 11732              	.LBE2224:
 717:src/xeq.c     **** }
 11733              		.loc 1 717 2 is_stmt 0 view .LVU3167
 11734 008c 0CBF     		ite	eq
 11735 008e 1022     		moveq	r2, #16
 11736 0090 0822     		movne	r2, #8
 11737 0092 2046     		mov	r0, r4
 11738              	.LVL891:
 717:src/xeq.c     **** }
 11739              		.loc 1 717 2 view .LVU3168
 11740 0094 FFF7FEFF 		bl	xcopy
 11741              	.LVL892:
 717:src/xeq.c     **** }
 11742              		.loc 1 717 2 view .LVU3169
 11743              	.LBE2226:
 11744              	.LBE2228:
1549:src/xeq.c     **** 		copyreg(StackBase, &temp);
 11745              		.loc 1 1549 3 is_stmt 1 view .LVU3170
 11746              	.LBB2229:
 11747              	.LBI2229:
 737:src/xeq.c     **** 	if (get_lift())
 11748              		.loc 1 737 6 view .LVU3171
 11749              	.LBB2230:
 738:src/xeq.c     **** 		lift();
 11750              		.loc 1 738 2 view .LVU3172
 11751              	.LBB2231:
 11752              	.LBI2231:
 733:src/xeq.c     **** 	return State2.state_lift;
 11753              		.loc 1 733 12 view .LVU3173
 11754              	.LBB2232:
 734:src/xeq.c     **** }
 11755              		.loc 1 734 2 view .LVU3174
 734:src/xeq.c     **** }
 11756              		.loc 1 734 15 is_stmt 0 view .LVU3175
 11757 0098 0E4B     		ldr	r3, .L864+8
ARM GAS  /tmp/cciWh9P3.s 			page 355


 11758 009a DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 11759              	.LBE2232:
 11760              	.LBE2231:
 738:src/xeq.c     **** 		lift();
 11761              		.loc 1 738 5 view .LVU3176
 11762 009c 5906     		lsls	r1, r3, #25
 11763 009e 11D4     		bmi	.L863
 11764              	.L844:
 11765              	.LBE2230:
 11766              	.LBE2229:
1550:src/xeq.c     **** 	} else {
 11767              		.loc 1 1550 3 is_stmt 1 view .LVU3177
 11768              	.LBB2234:
 11769              	.LBB2235:
 11770              	.LBB2236:
 11771              	.LBB2237:
 932:src/xeq.c     **** }
 11772              		.loc 1 932 24 is_stmt 0 view .LVU3178
 11773 00a0 2A68     		ldr	r2, [r5]
 11774              	.LBE2237:
 11775              	.LBE2236:
 11776              	.LBE2235:
 11777              	.LBE2234:
1550:src/xeq.c     **** 	} else {
 11778              		.loc 1 1550 3 view .LVU3179
 11779 00a2 0D4B     		ldr	r3, .L864+12
 11780              	.LVL893:
 11781              	.LBB2243:
 11782              	.LBI2234:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 11783              		.loc 1 716 6 is_stmt 1 view .LVU3180
 11784              	.LBB2242:
 717:src/xeq.c     **** }
 11785              		.loc 1 717 2 view .LVU3181
 11786              	.LBB2240:
 11787              	.LBI2236:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11788              		.loc 1 931 5 view .LVU3182
 11789              	.LBB2238:
 932:src/xeq.c     **** }
 11790              		.loc 1 932 2 view .LVU3183
 932:src/xeq.c     **** }
 11791              		.loc 1 932 24 is_stmt 0 view .LVU3184
 11792 00a4 B2F8E827 		ldrh	r2, [r2, #2024]
 11793              	.LBE2238:
 11794              	.LBE2240:
 717:src/xeq.c     **** }
 11795              		.loc 1 717 2 view .LVU3185
 11796 00a8 1868     		ldr	r0, [r3]
 11797              	.LBB2241:
 11798              	.LBB2239:
 932:src/xeq.c     **** }
 11799              		.loc 1 932 24 view .LVU3186
 11800 00aa 44F20103 		movw	r3, #16385
 11801              	.LVL894:
 932:src/xeq.c     **** }
 11802              		.loc 1 932 24 view .LVU3187
ARM GAS  /tmp/cciWh9P3.s 			page 356


 11803              	.LBE2239:
 11804              	.LBE2241:
 717:src/xeq.c     **** }
 11805              		.loc 1 717 2 view .LVU3188
 11806 00ae 1340     		ands	r3, r3, r2
 11807 00b0 B3F5804F 		cmp	r3, #16384
 11808 00b4 2146     		mov	r1, r4
 11809 00b6 0CBF     		ite	eq
 11810 00b8 1022     		moveq	r2, #16
 11811 00ba 0822     		movne	r2, #8
 11812 00bc FFF7FEFF 		bl	xcopy
 11813              	.LVL895:
 717:src/xeq.c     **** }
 11814              		.loc 1 717 2 view .LVU3189
 11815              	.LBE2242:
 11816              	.LBE2243:
 11817              	.LBE2216:
1568:src/xeq.c     **** 
 11818              		.loc 1 1568 1 view .LVU3190
 11819 00c0 0BB0     		add	sp, sp, #44
 11820              		.cfi_remember_state
 11821              		.cfi_def_cfa_offset 12
 11822              		@ sp needed
 11823 00c2 30BD     		pop	{r4, r5, pc}
 11824              	.L863:
 11825              		.cfi_restore_state
 11826              	.LBB2245:
 11827              	.LBB2244:
 11828              	.LBB2233:
 739:src/xeq.c     **** }
 11829              		.loc 1 739 3 is_stmt 1 view .LVU3191
 11830 00c4 FFF7FEFF 		bl	lift
 11831              	.LVL896:
 11832 00c8 EAE7     		b	.L844
 11833              	.L865:
 11834 00ca 00BF     		.align	2
 11835              	.L864:
 11836 00cc 00000000 		.word	main_ram
 11837 00d0 00000000 		.word	Error
 11838 00d4 00000000 		.word	StateWhileOn
 11839 00d8 00000000 		.word	StackBase
 11840              	.LBE2233:
 11841              	.LBE2244:
 11842              	.LBE2245:
 11843              		.cfi_endproc
 11844              	.LFE114:
 11846              		.section	.text.setX_int_sgn,"ax",%progbits
 11847              		.align	1
 11848              		.p2align 2,,3
 11849              		.global	setX_int_sgn
 11850              		.syntax unified
 11851              		.thumb
 11852              		.thumb_func
 11853              		.fpu fpv4-sp-d16
 11855              	setX_int_sgn:
 11856              	.LVL897:
 11857              	.LFB99:
ARM GAS  /tmp/cciWh9P3.s 			page 357


1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11858              		.loc 1 1322 56 view -0
 11859              		.cfi_startproc
 11860              		@ args = 0, pretend = 0, frame = 0
 11861              		@ frame_needed = 0, uses_anonymous_args = 0
1323:src/xeq.c     **** }
 11862              		.loc 1 1323 2 view .LVU3193
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11863              		.loc 1 1322 56 is_stmt 0 view .LVU3194
 11864 0000 00B5     		push	{lr}
 11865              		.cfi_def_cfa_offset 4
 11866              		.cfi_offset 14, -4
 11867 0002 83B0     		sub	sp, sp, #12
 11868              		.cfi_def_cfa_offset 16
1323:src/xeq.c     **** }
 11869              		.loc 1 1323 2 view .LVU3195
 11870 0004 0B46     		mov	r3, r1
 11871 0006 0092     		str	r2, [sp]
 11872 0008 0246     		mov	r2, r0
 11873              	.LVL898:
1323:src/xeq.c     **** }
 11874              		.loc 1 1323 2 view .LVU3196
 11875 000a 6420     		movs	r0, #100
 11876              	.LVL899:
1323:src/xeq.c     **** }
 11877              		.loc 1 1323 2 view .LVU3197
 11878 000c FFF7FEFF 		bl	set_reg_n_int_sgn
 11879              	.LVL900:
1324:src/xeq.c     **** 
 11880              		.loc 1 1324 1 view .LVU3198
 11881 0010 03B0     		add	sp, sp, #12
 11882              		.cfi_def_cfa_offset 4
 11883              		@ sp needed
 11884 0012 5DF804FB 		ldr	pc, [sp], #4
 11885              		.cfi_endproc
 11886              	.LFE99:
 11888 0016 00BF     		.section	.text.zero_regs,"ax",%progbits
 11889              		.align	1
 11890              		.p2align 2,,3
 11891              		.global	zero_regs
 11892              		.syntax unified
 11893              		.thumb
 11894              		.thumb_func
 11895              		.fpu fpv4-sp-d16
 11897              	zero_regs:
 11898              	.LVL901:
 11899              	.LFB100:
1331:src/xeq.c     **** #if 0
 11900              		.loc 1 1331 39 is_stmt 1 view -0
 11901              		.cfi_startproc
 11902              		@ args = 0, pretend = 0, frame = 0
 11903              		@ frame_needed = 0, uses_anonymous_args = 0
 11904              		@ link register save eliminated.
1346:src/xeq.c     **** #endif
 11905              		.loc 1 1346 2 view .LVU3200
 11906              	.LBB2246:
 11907              	.LBI2246:
ARM GAS  /tmp/cciWh9P3.s 			page 358


 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11908              		.loc 1 931 5 view .LVU3201
 11909              	.LBB2247:
 932:src/xeq.c     **** }
 11910              		.loc 1 932 2 view .LVU3202
 932:src/xeq.c     **** }
 11911              		.loc 1 932 24 is_stmt 0 view .LVU3203
 11912 0000 084B     		ldr	r3, .L869
 11913 0002 1B68     		ldr	r3, [r3]
 11914 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 11915 0008 44F20103 		movw	r3, #16385
 11916 000c 1340     		ands	r3, r3, r2
 11917 000e A3F58043 		sub	r3, r3, #16384
 11918 0012 B3FA83F3 		clz	r3, r3
 11919 0016 5B09     		lsrs	r3, r3, #5
 11920              	.LBE2247:
 11921              	.LBE2246:
1346:src/xeq.c     **** #endif
 11922              		.loc 1 1346 24 view .LVU3204
 11923 0018 0333     		adds	r3, r3, #3
1346:src/xeq.c     **** #endif
 11924              		.loc 1 1346 2 view .LVU3205
 11925 001a 01FA03F2 		lsl	r2, r1, r3
 11926 001e 0021     		movs	r1, #0
 11927              	.LVL902:
1346:src/xeq.c     **** #endif
 11928              		.loc 1 1346 2 view .LVU3206
 11929 0020 FFF7FEBF 		b	xset
 11930              	.LVL903:
 11931              	.L870:
1346:src/xeq.c     **** #endif
 11932              		.loc 1 1346 2 view .LVU3207
 11933              		.align	2
 11934              	.L869:
 11935 0024 00000000 		.word	main_ram
 11936              		.cfi_endproc
 11937              	.LFE100:
 11939              		.section	.text.move_regs,"ax",%progbits
 11940              		.align	1
 11941              		.p2align 2,,3
 11942              		.global	move_regs
 11943              		.syntax unified
 11944              		.thumb
 11945              		.thumb_func
 11946              		.fpu fpv4-sp-d16
 11948              	move_regs:
 11949              	.LVL904:
 11950              	.LFB101:
1350:src/xeq.c     **** 	if (is_dblmode())
 11951              		.loc 1 1350 54 is_stmt 1 view -0
 11952              		.cfi_startproc
 11953              		@ args = 0, pretend = 0, frame = 0
 11954              		@ frame_needed = 0, uses_anonymous_args = 0
 11955              		@ link register save eliminated.
1351:src/xeq.c     **** 		n <<= 1;
 11956              		.loc 1 1351 2 view .LVU3209
 11957              	.LBB2248:
ARM GAS  /tmp/cciWh9P3.s 			page 359


 11958              	.LBI2248:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11959              		.loc 1 931 5 view .LVU3210
 11960              	.LBB2249:
 932:src/xeq.c     **** }
 11961              		.loc 1 932 2 view .LVU3211
 932:src/xeq.c     **** }
 11962              		.loc 1 932 24 is_stmt 0 view .LVU3212
 11963 0000 084B     		ldr	r3, .L874
 11964 0002 1B68     		ldr	r3, [r3]
 11965              	.LBE2249:
 11966              	.LBE2248:
1350:src/xeq.c     **** 	if (is_dblmode())
 11967              		.loc 1 1350 54 view .LVU3213
 11968 0004 10B4     		push	{r4}
 11969              		.cfi_def_cfa_offset 4
 11970              		.cfi_offset 4, -4
 11971              	.LBB2251:
 11972              	.LBB2250:
 932:src/xeq.c     **** }
 11973              		.loc 1 932 24 view .LVU3214
 11974 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 11975 000a 44F20103 		movw	r3, #16385
 11976              	.LBE2250:
 11977              	.LBE2251:
1351:src/xeq.c     **** 		n <<= 1;
 11978              		.loc 1 1351 5 view .LVU3215
 11979 000e 2340     		ands	r3, r3, r4
 11980 0010 B3F5804F 		cmp	r3, #16384
1352:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 11981              		.loc 1 1352 3 is_stmt 1 view .LVU3216
1352:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 11982              		.loc 1 1352 5 is_stmt 0 view .LVU3217
 11983 0014 08BF     		it	eq
 11984 0016 5200     		lsleq	r2, r2, #1
 11985              	.LVL905:
1353:src/xeq.c     **** }
 11986              		.loc 1 1353 2 is_stmt 1 view .LVU3218
1354:src/xeq.c     **** 
 11987              		.loc 1 1354 1 is_stmt 0 view .LVU3219
 11988 0018 5DF8044B 		ldr	r4, [sp], #4
 11989              		.cfi_restore 4
 11990              		.cfi_def_cfa_offset 0
1353:src/xeq.c     **** }
 11991              		.loc 1 1353 2 view .LVU3220
 11992 001c D200     		lsls	r2, r2, #3
 11993              	.LVL906:
1353:src/xeq.c     **** }
 11994              		.loc 1 1353 2 view .LVU3221
 11995 001e FFF7FEBF 		b	xcopy
 11996              	.LVL907:
 11997              	.L875:
1353:src/xeq.c     **** }
 11998              		.loc 1 1353 2 view .LVU3222
 11999 0022 00BF     		.align	2
 12000              	.L874:
 12001 0024 00000000 		.word	main_ram
ARM GAS  /tmp/cciWh9P3.s 			page 360


 12002              		.cfi_endproc
 12003              	.LFE101:
 12005              		.section	.text.zero_X,"ax",%progbits
 12006              		.align	1
 12007              		.p2align 2,,3
 12008              		.global	zero_X
 12009              		.syntax unified
 12010              		.thumb
 12011              		.thumb_func
 12012              		.fpu fpv4-sp-d16
 12014              	zero_X:
 12015              	.LFB103:
1363:src/xeq.c     **** 	set_zero(StackBase);
 12016              		.loc 1 1363 19 is_stmt 1 view -0
 12017              		.cfi_startproc
 12018              		@ args = 0, pretend = 0, frame = 0
 12019              		@ frame_needed = 0, uses_anonymous_args = 0
 12020              		@ link register save eliminated.
1364:src/xeq.c     **** }
 12021              		.loc 1 1364 2 view .LVU3224
 12022 0000 014B     		ldr	r3, .L877
 12023 0002 1868     		ldr	r0, [r3]
 12024 0004 FFF7FEBF 		b	set_zero
 12025              	.LVL908:
 12026              	.L878:
 12027              		.align	2
 12028              	.L877:
 12029 0008 00000000 		.word	StackBase
 12030              		.cfi_endproc
 12031              	.LFE103:
 12033              		.section	.text.zero_Y,"ax",%progbits
 12034              		.align	1
 12035              		.p2align 2,,3
 12036              		.global	zero_Y
 12037              		.syntax unified
 12038              		.thumb
 12039              		.thumb_func
 12040              		.fpu fpv4-sp-d16
 12042              	zero_Y:
 12043              	.LFB104:
1367:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12044              		.loc 1 1367 19 view -0
 12045              		.cfi_startproc
 12046              		@ args = 0, pretend = 0, frame = 0
 12047              		@ frame_needed = 0, uses_anonymous_args = 0
1368:src/xeq.c     **** }
 12048              		.loc 1 1368 2 view .LVU3226
1367:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12049              		.loc 1 1367 19 is_stmt 0 view .LVU3227
 12050 0000 08B5     		push	{r3, lr}
 12051              		.cfi_def_cfa_offset 8
 12052              		.cfi_offset 3, -8
 12053              		.cfi_offset 14, -4
1368:src/xeq.c     **** }
 12054              		.loc 1 1368 2 view .LVU3228
 12055 0002 6520     		movs	r0, #101
 12056 0004 FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/cciWh9P3.s 			page 361


 12057              	.LVL909:
1369:src/xeq.c     **** 
 12058              		.loc 1 1369 1 view .LVU3229
 12059 0008 BDE80840 		pop	{r3, lr}
 12060              		.cfi_restore 14
 12061              		.cfi_restore 3
 12062              		.cfi_def_cfa_offset 0
1368:src/xeq.c     **** }
 12063              		.loc 1 1368 2 view .LVU3230
 12064 000c FFF7FEBF 		b	set_zero
 12065              	.LVL910:
 12066              		.cfi_endproc
 12067              	.LFE104:
 12069              		.section	.text.clrx,"ax",%progbits
 12070              		.align	1
 12071              		.p2align 2,,3
 12072              		.global	clrx
 12073              		.syntax unified
 12074              		.thumb
 12075              		.thumb_func
 12076              		.fpu fpv4-sp-d16
 12078              	clrx:
 12079              	.LVL911:
 12080              	.LFB105:
1371:src/xeq.c     **** 	zero_X();
 12081              		.loc 1 1371 26 is_stmt 1 view -0
 12082              		.cfi_startproc
 12083              		@ args = 0, pretend = 0, frame = 0
 12084              		@ frame_needed = 0, uses_anonymous_args = 0
1372:src/xeq.c     **** 	clr_lift();
 12085              		.loc 1 1372 2 view .LVU3232
 12086              	.LBB2252:
 12087              	.LBI2252:
1363:src/xeq.c     **** 	set_zero(StackBase);
 12088              		.loc 1 1363 6 view .LVU3233
 12089              	.LBB2253:
1364:src/xeq.c     **** }
 12090              		.loc 1 1364 2 view .LVU3234
 12091              	.LBE2253:
 12092              	.LBE2252:
1371:src/xeq.c     **** 	zero_X();
 12093              		.loc 1 1371 26 is_stmt 0 view .LVU3235
 12094 0000 08B5     		push	{r3, lr}
 12095              		.cfi_def_cfa_offset 8
 12096              		.cfi_offset 3, -8
 12097              		.cfi_offset 14, -4
 12098              	.LBB2255:
 12099              	.LBB2254:
1364:src/xeq.c     **** }
 12100              		.loc 1 1364 2 view .LVU3236
 12101 0002 054B     		ldr	r3, .L883
 12102 0004 1868     		ldr	r0, [r3]
 12103              	.LVL912:
1364:src/xeq.c     **** }
 12104              		.loc 1 1364 2 view .LVU3237
 12105 0006 FFF7FEFF 		bl	set_zero
 12106              	.LVL913:
ARM GAS  /tmp/cciWh9P3.s 			page 362


 12107              	.LBE2254:
 12108              	.LBE2255:
1373:src/xeq.c     **** }
 12109              		.loc 1 1373 2 is_stmt 1 view .LVU3238
 12110              	.LBB2256:
 12111              	.LBI2256:
 751:src/xeq.c     ****     State2.state_lift = 0;
 12112              		.loc 1 751 13 view .LVU3239
 12113              	.LBB2257:
 752:src/xeq.c     **** }
 12114              		.loc 1 752 5 view .LVU3240
 752:src/xeq.c     **** }
 12115              		.loc 1 752 23 is_stmt 0 view .LVU3241
 12116 000a 044B     		ldr	r3, .L883+4
 12117 000c DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 12118 000e 6FF38612 		bfc	r2, #6, #1
 12119 0012 DA75     		strb	r2, [r3, #23]
 12120              	.LBE2257:
 12121              	.LBE2256:
1374:src/xeq.c     **** 
 12122              		.loc 1 1374 1 view .LVU3242
 12123 0014 08BD     		pop	{r3, pc}
 12124              	.L884:
 12125 0016 00BF     		.align	2
 12126              	.L883:
 12127 0018 00000000 		.word	StackBase
 12128 001c 00000000 		.word	StateWhileOn
 12129              		.cfi_endproc
 12130              	.LFE105:
 12132              		.section	.text.clrstk,"ax",%progbits
 12133              		.align	1
 12134              		.p2align 2,,3
 12135              		.global	clrstk
 12136              		.syntax unified
 12137              		.thumb
 12138              		.thumb_func
 12139              		.fpu fpv4-sp-d16
 12141              	clrstk:
 12142              	.LVL914:
 12143              	.LFB106:
1378:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 12144              		.loc 1 1378 28 is_stmt 1 view -0
 12145              		.cfi_startproc
 12146              		@ args = 0, pretend = 0, frame = 0
 12147              		@ frame_needed = 0, uses_anonymous_args = 0
1379:src/xeq.c     **** 	set_lift();
 12148              		.loc 1 1379 2 view .LVU3244
1378:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 12149              		.loc 1 1378 28 is_stmt 0 view .LVU3245
 12150 0000 08B5     		push	{r3, lr}
 12151              		.cfi_def_cfa_offset 8
 12152              		.cfi_offset 3, -8
 12153              		.cfi_offset 14, -4
 12154              	.LBB2258:
 12155              	.LBB2259:
 703:src/xeq.c     **** 		return 4;
 12156              		.loc 1 703 8 view .LVU3246
ARM GAS  /tmp/cciWh9P3.s 			page 363


 12157 0002 164B     		ldr	r3, .L892
 12158              	.LBE2259:
 12159              	.LBE2258:
1379:src/xeq.c     **** 	set_lift();
 12160              		.loc 1 1379 2 view .LVU3247
 12161 0004 164A     		ldr	r2, .L892+4
 12162              	.LBB2265:
 12163              	.LBB2262:
 703:src/xeq.c     **** 		return 4;
 12164              		.loc 1 703 8 view .LVU3248
 12165 0006 1B68     		ldr	r3, [r3]
 12166              	.LBE2262:
 12167              	.LBE2265:
1379:src/xeq.c     **** 	set_lift();
 12168              		.loc 1 1379 2 view .LVU3249
 12169 0008 1068     		ldr	r0, [r2]
 12170              	.LVL915:
 12171              	.LBB2266:
 12172              	.LBI2258:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 12173              		.loc 1 702 5 is_stmt 1 view .LVU3250
 12174              	.LBB2263:
 703:src/xeq.c     **** 		return 4;
 12175              		.loc 1 703 2 view .LVU3251
 703:src/xeq.c     **** 		return 4;
 12176              		.loc 1 703 6 is_stmt 0 view .LVU3252
 12177 000a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 12178              		.loc 1 703 5 view .LVU3253
 12179 000e 1207     		lsls	r2, r2, #28
 12180 0010 22D5     		bpl	.L887
 12181              	.LBB2260:
 12182              	.LBI2260:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 12183              		.loc 1 181 5 is_stmt 1 view .LVU3254
 12184              	.LBB2261:
 182:src/xeq.c     **** }
 12185              		.loc 1 182 2 view .LVU3255
 182:src/xeq.c     **** }
 12186              		.loc 1 182 9 is_stmt 0 view .LVU3256
 12187 0012 B3F8E027 		ldrh	r2, [r3, #2016]
 12188              	.LBE2261:
 12189              	.LBE2260:
 703:src/xeq.c     **** 		return 4;
 12190              		.loc 1 703 27 view .LVU3257
 12191 0016 920B     		lsrs	r2, r2, #14
 12192 0018 032A     		cmp	r2, #3
 12193 001a 15D0     		beq	.L891
 705:src/xeq.c     **** }
 12194              		.loc 1 705 9 view .LVU3258
 12195 001c 0822     		movs	r2, #8
 12196              	.L886:
 12197              	.LVL916:
 705:src/xeq.c     **** }
 12198              		.loc 1 705 9 view .LVU3259
 12199              	.LBE2263:
 12200              	.LBE2266:
ARM GAS  /tmp/cciWh9P3.s 			page 364


 12201              	.LBB2267:
 12202              	.LBI2267:
1331:src/xeq.c     **** #if 0
 12203              		.loc 1 1331 6 is_stmt 1 view .LVU3260
 12204              	.LBB2268:
1346:src/xeq.c     **** #endif
 12205              		.loc 1 1346 2 view .LVU3261
 12206              	.LBB2269:
 12207              	.LBI2269:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12208              		.loc 1 931 5 view .LVU3262
 12209              	.LBB2270:
 932:src/xeq.c     **** }
 12210              		.loc 1 932 2 view .LVU3263
 932:src/xeq.c     **** }
 12211              		.loc 1 932 24 is_stmt 0 view .LVU3264
 12212 001e B3F8E817 		ldrh	r1, [r3, #2024]
 12213 0022 44F20103 		movw	r3, #16385
 12214 0026 0B40     		ands	r3, r3, r1
 12215 0028 A3F58043 		sub	r3, r3, #16384
 12216 002c B3FA83F3 		clz	r3, r3
 12217 0030 5B09     		lsrs	r3, r3, #5
 12218              	.LBE2270:
 12219              	.LBE2269:
1346:src/xeq.c     **** #endif
 12220              		.loc 1 1346 24 view .LVU3265
 12221 0032 0333     		adds	r3, r3, #3
1346:src/xeq.c     **** #endif
 12222              		.loc 1 1346 2 view .LVU3266
 12223 0034 9A40     		lsls	r2, r2, r3
 12224              	.LVL917:
1346:src/xeq.c     **** #endif
 12225              		.loc 1 1346 2 view .LVU3267
 12226 0036 0021     		movs	r1, #0
 12227 0038 FFF7FEFF 		bl	xset
 12228              	.LVL918:
1346:src/xeq.c     **** #endif
 12229              		.loc 1 1346 2 view .LVU3268
 12230              	.LBE2268:
 12231              	.LBE2267:
1380:src/xeq.c     **** }
 12232              		.loc 1 1380 2 is_stmt 1 view .LVU3269
 12233              	.LBB2271:
 12234              	.LBI2271:
 747:src/xeq.c     ****     State2.state_lift = 1;
 12235              		.loc 1 747 6 view .LVU3270
 12236              	.LBB2272:
 748:src/xeq.c     **** }
 12237              		.loc 1 748 5 view .LVU3271
 748:src/xeq.c     **** }
 12238              		.loc 1 748 23 is_stmt 0 view .LVU3272
 12239 003c 094A     		ldr	r2, .L892+8
 12240 003e D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 12241 0040 43F04003 		orr	r3, r3, #64
 12242 0044 D375     		strb	r3, [r2, #23]
 12243              	.LBE2272:
 12244              	.LBE2271:
ARM GAS  /tmp/cciWh9P3.s 			page 365


1381:src/xeq.c     **** 
 12245              		.loc 1 1381 1 view .LVU3273
 12246 0046 08BD     		pop	{r3, pc}
 12247              	.L891:
 12248              	.LBB2273:
 12249              	.LBB2264:
 703:src/xeq.c     **** 		return 4;
 12250              		.loc 1 703 44 view .LVU3274
 12251 0048 074A     		ldr	r2, .L892+12
 703:src/xeq.c     **** 		return 4;
 12252              		.loc 1 703 41 view .LVU3275
 12253 004a 92F90120 		ldrsb	r2, [r2, #1]
 12254 004e 002A     		cmp	r2, #0
 704:src/xeq.c     **** 	return 8;
 12255              		.loc 1 704 10 view .LVU3276
 12256 0050 B4BF     		ite	lt
 12257 0052 0822     		movlt	r2, #8
 12258 0054 0422     		movge	r2, #4
 12259 0056 E2E7     		b	.L886
 12260              	.L887:
 12261 0058 0422     		movs	r2, #4
 12262 005a E0E7     		b	.L886
 12263              	.L893:
 12264              		.align	2
 12265              	.L892:
 12266 005c 00000000 		.word	main_ram
 12267 0060 00000000 		.word	StackBase
 12268 0064 00000000 		.word	StateWhileOn
 12269 0068 00000000 		.word	XromParams
 12270              	.LBE2264:
 12271              	.LBE2273:
 12272              		.cfi_endproc
 12273              	.LFE106:
 12275              		.section	.text.clrreg,"ax",%progbits
 12276              		.align	1
 12277              		.p2align 2,,3
 12278              		.global	clrreg
 12279              		.syntax unified
 12280              		.thumb
 12281              		.thumb_func
 12282              		.fpu fpv4-sp-d16
 12284              	clrreg:
 12285              	.LVL919:
 12286              	.LFB107:
1386:src/xeq.c     **** 	const int local = local_regs();
 12287              		.loc 1 1386 28 is_stmt 1 view -0
 12288              		.cfi_startproc
 12289              		@ args = 0, pretend = 0, frame = 0
 12290              		@ frame_needed = 0, uses_anonymous_args = 0
1387:src/xeq.c     **** 	process_cmdline_set_lift();
 12291              		.loc 1 1387 2 view .LVU3278
 12292              	.LBB2274:
 12293              	.LBI2274:
 229:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 12294              		.loc 1 229 5 view .LVU3279
 12295              	.LBE2274:
 230:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 366


 12296              		.loc 1 230 2 view .LVU3280
 12297              	.LBB2299:
 12298              	.LBB2275:
 12299              	.LBI2275:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 12300              		.loc 1 221 5 view .LVU3281
 12301              	.LBB2276:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12302              		.loc 1 222 2 view .LVU3282
 12303              	.LBB2277:
 12304              	.LBI2277:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12305              		.loc 1 931 5 view .LVU3283
 12306              	.LBB2278:
 932:src/xeq.c     **** }
 12307              		.loc 1 932 2 view .LVU3284
 12308              	.LBE2278:
 12309              	.LBE2277:
 12310              	.LBE2276:
 12311              	.LBE2275:
 12312              	.LBE2299:
1386:src/xeq.c     **** 	const int local = local_regs();
 12313              		.loc 1 1386 28 is_stmt 0 view .LVU3285
 12314 0000 70B5     		push	{r4, r5, r6, lr}
 12315              		.cfi_def_cfa_offset 16
 12316              		.cfi_offset 4, -16
 12317              		.cfi_offset 5, -12
 12318              		.cfi_offset 6, -8
 12319              		.cfi_offset 14, -4
 12320              	.LBB2300:
 12321              	.LBB2297:
 12322              	.LBB2295:
 12323              	.LBB2282:
 12324              	.LBB2279:
 932:src/xeq.c     **** }
 12325              		.loc 1 932 12 view .LVU3286
 12326 0002 424C     		ldr	r4, .L909
 12327 0004 2368     		ldr	r3, [r4]
 12328              	.LVL920:
 932:src/xeq.c     **** }
 12329              		.loc 1 932 12 view .LVU3287
 12330              	.LBE2279:
 12331              	.LBE2282:
 223:src/xeq.c     **** }
 12332              		.loc 1 223 2 is_stmt 1 view .LVU3288
 12333              	.LBB2283:
 12334              	.LBI2283:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 12335              		.loc 1 213 5 view .LVU3289
 12336              	.LBB2284:
 214:src/xeq.c     **** }
 12337              		.loc 1 214 2 view .LVU3290
 214:src/xeq.c     **** }
 12338              		.loc 1 214 9 is_stmt 0 view .LVU3291
 12339 0006 B3F9DE27 		ldrsh	r2, [r3, #2014]
 214:src/xeq.c     **** }
 12340              		.loc 1 214 57 view .LVU3292
ARM GAS  /tmp/cciWh9P3.s 			page 367


 12341 000a 002A     		cmp	r2, #0
 12342 000c 57DB     		blt	.L906
 12343 000e 0026     		movs	r6, #0
 12344              	.LVL921:
 12345              	.L895:
 214:src/xeq.c     **** }
 12346              		.loc 1 214 57 view .LVU3293
 12347              	.LBE2284:
 12348              	.LBE2283:
 12349              	.LBE2295:
 12350              	.LBE2297:
 12351              	.LBE2300:
1388:src/xeq.c     **** 
 12352              		.loc 1 1388 2 is_stmt 1 view .LVU3294
 12353              	.LBB2301:
 12354              	.LBI2301:
1145:src/xeq.c     **** 	process_cmdline();
 12355              		.loc 1 1145 6 view .LVU3295
 12356              	.LBB2302:
1146:src/xeq.c     **** 	set_lift();
 12357              		.loc 1 1146 2 view .LVU3296
 12358 0010 FFF7FEFF 		bl	process_cmdline
 12359              	.LVL922:
1147:src/xeq.c     **** }
 12360              		.loc 1 1147 2 view .LVU3297
 12361              	.LBB2303:
 12362              	.LBI2303:
 747:src/xeq.c     ****     State2.state_lift = 1;
 12363              		.loc 1 747 6 view .LVU3298
 12364              	.LBB2304:
 748:src/xeq.c     **** }
 12365              		.loc 1 748 5 view .LVU3299
 748:src/xeq.c     **** }
 12366              		.loc 1 748 23 is_stmt 0 view .LVU3300
 12367 0014 3E4A     		ldr	r2, .L909+4
 12368 0016 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 12369 0018 43F04003 		orr	r3, r3, #64
 12370 001c D375     		strb	r3, [r2, #23]
 12371              	.LBE2304:
 12372              	.LBE2303:
 12373              	.LBE2302:
 12374              	.LBE2301:
1391:src/xeq.c     **** 
 12375              		.loc 1 1391 2 is_stmt 1 view .LVU3301
 12376 001e 0020     		movs	r0, #0
 12377 0020 FFF7FEFF 		bl	get_reg_n
 12378              	.LVL923:
 12379              	.LBB2305:
 12380              	.LBB2306:
 12381              	.LBB2307:
 12382              	.LBB2308:
 12383              	.LBB2309:
 932:src/xeq.c     **** }
 12384              		.loc 1 932 12 is_stmt 0 view .LVU3302
 12385 0024 2168     		ldr	r1, [r4]
 932:src/xeq.c     **** }
 12386              		.loc 1 932 24 view .LVU3303
ARM GAS  /tmp/cciWh9P3.s 			page 368


 12387 0026 B1F8E827 		ldrh	r2, [r1, #2024]
 12388 002a 44F20103 		movw	r3, #16385
 12389 002e 1340     		ands	r3, r3, r2
 12390              	.LBE2309:
 12391              	.LBE2308:
 12392              	.LBE2307:
 12393              	.LBE2306:
 12394              	.LBI2305:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 12395              		.loc 1 249 14 is_stmt 1 view .LVU3304
 12396              	.LBE2305:
 250:src/xeq.c     **** }
 12397              		.loc 1 250 2 view .LVU3305
 12398              	.LVL924:
 12399              	.LBB2324:
 12400              	.LBB2320:
 12401              	.LBI2306:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 12402              		.loc 1 237 14 view .LVU3306
 12403              	.LBB2316:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 12404              		.loc 1 238 2 view .LVU3307
 12405              	.LBB2311:
 12406              	.LBI2308:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12407              		.loc 1 931 5 view .LVU3308
 12408              	.LBB2310:
 932:src/xeq.c     **** }
 12409              		.loc 1 932 2 view .LVU3309
 12410              	.LBE2310:
 12411              	.LBE2311:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 12412              		.loc 1 238 5 is_stmt 0 view .LVU3310
 12413 0030 B3F5804F 		cmp	r3, #16384
 12414              	.LBB2312:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 12415              		.loc 1 239 3 is_stmt 1 view .LVU3311
 240:src/xeq.c     **** 	}
 12416              		.loc 1 240 3 view .LVU3312
 12417              	.LVL925:
 240:src/xeq.c     **** 	}
 12418              		.loc 1 240 3 is_stmt 0 view .LVU3313
 12419              	.LBE2312:
 12420              	.LBE2316:
 12421              	.LBE2320:
 12422              	.LBE2324:
 12423              	.LBB2325:
 12424              	.LBI2325:
1331:src/xeq.c     **** #if 0
 12425              		.loc 1 1331 6 is_stmt 1 view .LVU3314
 12426              	.LBB2326:
1346:src/xeq.c     **** #endif
 12427              		.loc 1 1346 2 view .LVU3315
 12428              	.LBB2327:
 12429              	.LBI2327:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12430              		.loc 1 931 5 view .LVU3316
ARM GAS  /tmp/cciWh9P3.s 			page 369


 12431              	.LBB2328:
 932:src/xeq.c     **** }
 12432              		.loc 1 932 2 view .LVU3317
 12433              	.LBE2328:
 12434              	.LBE2327:
 12435              	.LBE2326:
 12436              	.LBE2325:
 12437              	.LBB2336:
 12438              	.LBB2321:
 12439              	.LBB2317:
 12440              	.LBB2313:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 12441              		.loc 1 239 24 is_stmt 0 view .LVU3318
 12442 0034 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 12443              	.LBE2313:
 12444              	.LBE2317:
 12445              	.LBE2321:
 12446              	.LBE2336:
 12447              	.LBB2337:
 12448              	.LBB2333:
 12449              	.LBB2331:
 12450              	.LBB2329:
 932:src/xeq.c     **** }
 12451              		.loc 1 932 24 view .LVU3319
 12452 0038 A3F58043 		sub	r3, r3, #16384
 12453 003c B3FA83F3 		clz	r3, r3
 12454              	.LBE2329:
 12455              	.LBE2331:
 12456              	.LBE2333:
 12457              	.LBE2337:
 12458              	.LBB2338:
 12459              	.LBB2322:
 12460              	.LBB2318:
 12461              	.LBB2314:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 12462              		.loc 1 239 13 view .LVU3320
 12463 0040 08BF     		it	eq
 12464 0042 0C3A     		subeq	r2, r2, #12
 12465              	.LBE2314:
 12466              	.LBE2318:
 12467              	.LBE2322:
 12468              	.LBE2338:
 12469              	.LBB2339:
 12470              	.LBB2334:
 12471              	.LBB2332:
 12472              	.LBB2330:
 932:src/xeq.c     **** }
 12473              		.loc 1 932 24 view .LVU3321
 12474 0044 4FEA5313 		lsr	r3, r3, #5
 12475              	.LBE2330:
 12476              	.LBE2332:
 12477              	.LBE2334:
 12478              	.LBE2339:
 12479              	.LBB2340:
 12480              	.LBB2323:
 12481              	.LBB2319:
 12482              	.LBB2315:
ARM GAS  /tmp/cciWh9P3.s 			page 370


 240:src/xeq.c     **** 	}
 12483              		.loc 1 240 67 view .LVU3322
 12484 0048 08BF     		it	eq
 12485 004a 5210     		asreq	r2, r2, #1
 12486              	.LBE2315:
 12487              	.LBE2319:
 12488              	.LBE2323:
 12489              	.LBE2340:
 12490              	.LBB2341:
 12491              	.LBB2335:
1346:src/xeq.c     **** #endif
 12492              		.loc 1 1346 24 view .LVU3323
 12493 004c 0333     		adds	r3, r3, #3
1346:src/xeq.c     **** #endif
 12494              		.loc 1 1346 2 view .LVU3324
 12495 004e 9A40     		lsls	r2, r2, r3
 12496 0050 0021     		movs	r1, #0
 12497 0052 FFF7FEFF 		bl	xset
 12498              	.LVL926:
1346:src/xeq.c     **** #endif
 12499              		.loc 1 1346 2 view .LVU3325
 12500              	.LBE2335:
 12501              	.LBE2341:
1394:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
 12502              		.loc 1 1394 2 is_stmt 1 view .LVU3326
 12503              	.LBB2342:
 12504              	.LBI2342:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 12505              		.loc 1 702 5 view .LVU3327
 12506              	.LBB2343:
 703:src/xeq.c     **** 		return 4;
 12507              		.loc 1 703 2 view .LVU3328
 703:src/xeq.c     **** 		return 4;
 12508              		.loc 1 703 8 is_stmt 0 view .LVU3329
 12509 0056 2368     		ldr	r3, [r4]
 703:src/xeq.c     **** 		return 4;
 12510              		.loc 1 703 6 view .LVU3330
 12511 0058 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 12512              		.loc 1 703 5 view .LVU3331
 12513 005c 1207     		lsls	r2, r2, #28
 12514 005e 1CD5     		bpl	.L898
 12515              	.LBB2344:
 12516              	.LBI2344:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 12517              		.loc 1 181 5 is_stmt 1 view .LVU3332
 12518              	.LBB2345:
 182:src/xeq.c     **** }
 12519              		.loc 1 182 2 view .LVU3333
 182:src/xeq.c     **** }
 12520              		.loc 1 182 9 is_stmt 0 view .LVU3334
 12521 0060 B3F8E037 		ldrh	r3, [r3, #2016]
 12522              	.LBE2345:
 12523              	.LBE2344:
 703:src/xeq.c     **** 		return 4;
 12524              		.loc 1 703 27 view .LVU3335
 12525 0064 9B0B     		lsrs	r3, r3, #14
ARM GAS  /tmp/cciWh9P3.s 			page 371


 12526 0066 032B     		cmp	r3, #3
 12527 0068 12D0     		beq	.L907
 12528              	.L899:
 12529              	.LBE2343:
 12530              	.LBE2342:
1398:src/xeq.c     **** 
 12531              		.loc 1 1398 2 is_stmt 1 view .LVU3336
 12532 006a 6E20     		movs	r0, #110
 12533 006c FFF7FEFF 		bl	get_reg_n
 12534              	.LVL927:
 12535              	.LBB2347:
 12536              	.LBI2347:
1331:src/xeq.c     **** #if 0
 12537              		.loc 1 1331 6 view .LVU3337
 12538              	.LBB2348:
1346:src/xeq.c     **** #endif
 12539              		.loc 1 1346 2 view .LVU3338
 12540              	.LBB2349:
 12541              	.LBI2349:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12542              		.loc 1 931 5 view .LVU3339
 12543              	.LBB2350:
 932:src/xeq.c     **** }
 12544              		.loc 1 932 2 view .LVU3340
 932:src/xeq.c     **** }
 12545              		.loc 1 932 24 is_stmt 0 view .LVU3341
 12546 0070 2368     		ldr	r3, [r4]
 12547 0072 B3F8E827 		ldrh	r2, [r3, #2024]
 12548 0076 44F20105 		movw	r5, #16385
 12549 007a 2A40     		ands	r2, r2, r5
 12550              	.LBE2350:
 12551              	.LBE2349:
1346:src/xeq.c     **** #endif
 12552              		.loc 1 1346 2 view .LVU3342
 12553 007c B2F5804F 		cmp	r2, #16384
 12554 0080 0CBF     		ite	eq
 12555 0082 2022     		moveq	r2, #32
 12556 0084 1022     		movne	r2, #16
 12557 0086 0021     		movs	r1, #0
 12558 0088 FFF7FEFF 		bl	xset
 12559              	.LVL928:
1346:src/xeq.c     **** #endif
 12560              		.loc 1 1346 2 view .LVU3343
 12561              	.LBE2348:
 12562              	.LBE2347:
1401:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 12563              		.loc 1 1401 2 is_stmt 1 view .LVU3344
1401:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 12564              		.loc 1 1401 5 is_stmt 0 view .LVU3345
 12565 008c 56BB     		cbnz	r6, .L908
1403:src/xeq.c     **** 
 12566              		.loc 1 1403 1 view .LVU3346
 12567 008e 70BD     		pop	{r4, r5, r6, pc}
 12568              	.L907:
 12569              	.LBB2351:
 12570              	.LBB2346:
 703:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/cciWh9P3.s 			page 372


 12571              		.loc 1 703 44 view .LVU3347
 12572 0090 204B     		ldr	r3, .L909+8
 703:src/xeq.c     **** 		return 4;
 12573              		.loc 1 703 41 view .LVU3348
 12574 0092 93F90130 		ldrsb	r3, [r3, #1]
 12575 0096 002B     		cmp	r3, #0
 12576 0098 E7DB     		blt	.L899
 12577              	.L898:
 704:src/xeq.c     **** 	return 8;
 12578              		.loc 1 704 3 is_stmt 1 view .LVU3349
 12579              	.LBE2346:
 12580              	.LBE2351:
1395:src/xeq.c     **** 
 12581              		.loc 1 1395 3 view .LVU3350
 12582 009a 6820     		movs	r0, #104
 12583 009c FFF7FEFF 		bl	get_reg_n
 12584              	.LVL929:
 12585              	.LBB2352:
 12586              	.LBI2352:
1331:src/xeq.c     **** #if 0
 12587              		.loc 1 1331 6 view .LVU3351
 12588              	.LBB2353:
1346:src/xeq.c     **** #endif
 12589              		.loc 1 1346 2 view .LVU3352
 12590              	.LBB2354:
 12591              	.LBI2354:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12592              		.loc 1 931 5 view .LVU3353
 12593              	.LBB2355:
 932:src/xeq.c     **** }
 12594              		.loc 1 932 2 view .LVU3354
 932:src/xeq.c     **** }
 12595              		.loc 1 932 24 is_stmt 0 view .LVU3355
 12596 00a0 2368     		ldr	r3, [r4]
 12597 00a2 B3F8E837 		ldrh	r3, [r3, #2024]
 12598 00a6 44F20102 		movw	r2, #16385
 12599 00aa 1A40     		ands	r2, r2, r3
 12600              	.LBE2355:
 12601              	.LBE2354:
1346:src/xeq.c     **** #endif
 12602              		.loc 1 1346 2 view .LVU3356
 12603 00ac B2F5804F 		cmp	r2, #16384
 12604 00b0 0CBF     		ite	eq
 12605 00b2 4022     		moveq	r2, #64
 12606 00b4 2022     		movne	r2, #32
 12607 00b6 0021     		movs	r1, #0
 12608 00b8 FFF7FEFF 		bl	xset
 12609              	.LVL930:
1348:src/xeq.c     **** 
 12610              		.loc 1 1348 1 view .LVU3357
 12611 00bc D5E7     		b	.L899
 12612              	.LVL931:
 12613              	.L906:
1348:src/xeq.c     **** 
 12614              		.loc 1 1348 1 view .LVU3358
 12615              	.LBE2353:
 12616              	.LBE2352:
ARM GAS  /tmp/cciWh9P3.s 			page 373


 12617              	.LBB2356:
 12618              	.LBB2298:
 12619              	.LBB2296:
 12620              	.LBB2289:
 12621              	.LBB2280:
 932:src/xeq.c     **** }
 12622              		.loc 1 932 24 view .LVU3359
 12623 00be B3F8E867 		ldrh	r6, [r3, #2024]
 12624              	.LBE2280:
 12625              	.LBE2289:
 12626              	.LBB2290:
 12627              	.LBB2285:
 214:src/xeq.c     **** }
 12628              		.loc 1 214 25 view .LVU3360
 12629 00c2 1549     		ldr	r1, .L909+12
 12630              	.LBE2285:
 12631              	.LBE2290:
 12632              	.LBB2291:
 12633              	.LBB2281:
 932:src/xeq.c     **** }
 12634              		.loc 1 932 24 view .LVU3361
 12635 00c4 44F20103 		movw	r3, #16385
 12636              	.LVL932:
 932:src/xeq.c     **** }
 12637              		.loc 1 932 24 view .LVU3362
 12638              	.LBE2281:
 12639              	.LBE2291:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12640              		.loc 1 222 73 view .LVU3363
 12641 00c8 3340     		ands	r3, r3, r6
 12642              	.LBB2292:
 12643              	.LBB2286:
 214:src/xeq.c     **** }
 12644              		.loc 1 214 25 view .LVU3364
 12645 00ca 0968     		ldr	r1, [r1]
 12646              	.LBE2286:
 12647              	.LBE2292:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12648              		.loc 1 222 73 view .LVU3365
 12649 00cc A3F58043 		sub	r3, r3, #16384
 12650              	.LBB2293:
 12651              	.LBB2287:
 214:src/xeq.c     **** }
 12652              		.loc 1 214 57 view .LVU3366
 12653 00d0 31F81260 		ldrh	r6, [r1, r2, lsl #1]
 12654              	.LBE2287:
 12655              	.LBE2293:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 12656              		.loc 1 222 73 view .LVU3367
 12657 00d4 B3FA83F3 		clz	r3, r3
 12658 00d8 5B09     		lsrs	r3, r3, #5
 12659 00da 0233     		adds	r3, r3, #2
 12660              	.LBB2294:
 12661              	.LBB2288:
 214:src/xeq.c     **** }
 12662              		.loc 1 214 57 view .LVU3368
 12663 00dc C6F30B06 		ubfx	r6, r6, #0, #12
ARM GAS  /tmp/cciWh9P3.s 			page 374


 12664 00e0 1E41     		asrs	r6, r6, r3
 12665 00e2 95E7     		b	.L895
 12666              	.LVL933:
 12667              	.L908:
 214:src/xeq.c     **** }
 12668              		.loc 1 214 57 view .LVU3369
 12669              	.LBE2288:
 12670              	.LBE2294:
 12671              	.LBE2296:
 12672              	.LBE2298:
 12673              	.LBE2356:
1402:src/xeq.c     **** }
 12674              		.loc 1 1402 3 is_stmt 1 view .LVU3370
 12675 00e4 7020     		movs	r0, #112
 12676 00e6 FFF7FEFF 		bl	get_reg_n
 12677              	.LVL934:
 12678              	.LBB2357:
 12679              	.LBI2357:
1331:src/xeq.c     **** #if 0
 12680              		.loc 1 1331 6 view .LVU3371
 12681              	.LBB2358:
1346:src/xeq.c     **** #endif
 12682              		.loc 1 1346 2 view .LVU3372
 12683              	.LBB2359:
 12684              	.LBI2359:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12685              		.loc 1 931 5 view .LVU3373
 12686              	.LBB2360:
 932:src/xeq.c     **** }
 12687              		.loc 1 932 2 view .LVU3374
 932:src/xeq.c     **** }
 12688              		.loc 1 932 24 is_stmt 0 view .LVU3375
 12689 00ea 2368     		ldr	r3, [r4]
 12690 00ec B3F8E827 		ldrh	r2, [r3, #2024]
 12691 00f0 2A40     		ands	r2, r2, r5
 12692 00f2 A2F58042 		sub	r2, r2, #16384
 12693 00f6 B2FA82F2 		clz	r2, r2
 12694 00fa 5209     		lsrs	r2, r2, #5
 12695              	.LBE2360:
 12696              	.LBE2359:
1346:src/xeq.c     **** #endif
 12697              		.loc 1 1346 24 view .LVU3376
 12698 00fc 0332     		adds	r2, r2, #3
1346:src/xeq.c     **** #endif
 12699              		.loc 1 1346 2 view .LVU3377
 12700 00fe 06FA02F2 		lsl	r2, r6, r2
 12701 0102 0021     		movs	r1, #0
 12702              	.LBE2358:
 12703              	.LBE2357:
1403:src/xeq.c     **** 
 12704              		.loc 1 1403 1 view .LVU3378
 12705 0104 BDE87040 		pop	{r4, r5, r6, lr}
 12706              		.cfi_restore 14
 12707              		.cfi_restore 6
 12708              		.cfi_restore 5
 12709              		.cfi_restore 4
 12710              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/cciWh9P3.s 			page 375


 12711              	.LBB2362:
 12712              	.LBB2361:
1346:src/xeq.c     **** #endif
 12713              		.loc 1 1346 2 view .LVU3379
 12714 0108 FFF7FEBF 		b	xset
 12715              	.LVL935:
 12716              	.L910:
1346:src/xeq.c     **** #endif
 12717              		.loc 1 1346 2 view .LVU3380
 12718              		.align	2
 12719              	.L909:
 12720 010c 00000000 		.word	main_ram
 12721 0110 00000000 		.word	StateWhileOn
 12722 0114 00000000 		.word	XromParams
 12723 0118 00000000 		.word	RetStk
 12724              	.LBE2361:
 12725              	.LBE2362:
 12726              		.cfi_endproc
 12727              	.LFE107:
 12729              		.section	.text.clrretstk,"ax",%progbits
 12730              		.align	1
 12731              		.p2align 2,,3
 12732              		.global	clrretstk
 12733              		.syntax unified
 12734              		.thumb
 12735              		.thumb_func
 12736              		.fpu fpv4-sp-d16
 12738              	clrretstk:
 12739              	.LFB108:
1408:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 12740              		.loc 1 1408 22 is_stmt 1 view -0
 12741              		.cfi_startproc
 12742              		@ args = 0, pretend = 0, frame = 0
 12743              		@ frame_needed = 0, uses_anonymous_args = 0
 12744              		@ link register save eliminated.
1409:src/xeq.c     **** }
 12745              		.loc 1 1409 2 view .LVU3382
1409:src/xeq.c     **** }
 12746              		.loc 1 1409 14 is_stmt 0 view .LVU3383
 12747 0000 034B     		ldr	r3, .L912
 12748 0002 1B68     		ldr	r3, [r3]
1409:src/xeq.c     **** }
 12749              		.loc 1 1409 24 view .LVU3384
 12750 0004 0022     		movs	r2, #0
 12751 0006 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1409:src/xeq.c     **** }
 12752              		.loc 1 1409 12 view .LVU3385
 12753 000a A3F8E227 		strh	r2, [r3, #2018]	@ movhi
1410:src/xeq.c     **** 
 12754              		.loc 1 1410 1 view .LVU3386
 12755 000e 7047     		bx	lr
 12756              	.L913:
 12757              		.align	2
 12758              	.L912:
 12759 0010 00000000 		.word	main_ram
 12760              		.cfi_endproc
 12761              	.LFE108:
ARM GAS  /tmp/cciWh9P3.s 			page 376


 12763              		.section	.text.clrretstk_pc,"ax",%progbits
 12764              		.align	1
 12765              		.p2align 2,,3
 12766              		.global	clrretstk_pc
 12767              		.syntax unified
 12768              		.thumb
 12769              		.thumb_func
 12770              		.fpu fpv4-sp-d16
 12772              	clrretstk_pc:
 12773              	.LFB109:
1412:src/xeq.c     **** 	clrretstk();
 12774              		.loc 1 1412 25 is_stmt 1 view -0
 12775              		.cfi_startproc
 12776              		@ args = 0, pretend = 0, frame = 0
 12777              		@ frame_needed = 0, uses_anonymous_args = 0
1413:src/xeq.c     **** 	raw_set_pc(0);
 12778              		.loc 1 1413 2 view .LVU3388
 12779              	.LBB2363:
 12780              	.LBI2363:
1408:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 12781              		.loc 1 1408 6 view .LVU3389
 12782              	.LBB2364:
1409:src/xeq.c     **** }
 12783              		.loc 1 1409 2 view .LVU3390
 12784              	.LBE2364:
 12785              	.LBE2363:
1412:src/xeq.c     **** 	clrretstk();
 12786              		.loc 1 1412 25 is_stmt 0 view .LVU3391
 12787 0000 08B5     		push	{r3, lr}
 12788              		.cfi_def_cfa_offset 8
 12789              		.cfi_offset 3, -8
 12790              		.cfi_offset 14, -4
 12791              	.LBB2367:
 12792              	.LBB2365:
1409:src/xeq.c     **** }
 12793              		.loc 1 1409 14 view .LVU3392
 12794 0002 074B     		ldr	r3, .L916
 12795 0004 1B68     		ldr	r3, [r3]
 12796              	.LBE2365:
 12797              	.LBE2367:
1414:src/xeq.c     **** 	update_program_bounds(1);
 12798              		.loc 1 1414 2 is_stmt 1 view .LVU3393
 12799              	.LVL936:
 12800              	.LBB2368:
 12801              	.LBI2368:
 278:src/xeq.c     **** 	State.pc = pc;
 12802              		.loc 1 278 13 view .LVU3394
 12803              	.LBB2369:
 279:src/xeq.c     **** 	update_program_bounds(0);
 12804              		.loc 1 279 2 view .LVU3395
 12805              	.LBE2369:
 12806              	.LBE2368:
 12807              	.LBB2371:
 12808              	.LBB2366:
1409:src/xeq.c     **** }
 12809              		.loc 1 1409 24 is_stmt 0 view .LVU3396
 12810 0006 0020     		movs	r0, #0
ARM GAS  /tmp/cciWh9P3.s 			page 377


 12811 0008 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
 12812              	.LBE2366:
 12813              	.LBE2371:
 12814              	.LBB2372:
 12815              	.LBB2370:
 279:src/xeq.c     **** 	update_program_bounds(0);
 12816              		.loc 1 279 11 view .LVU3397
 12817 000c C3F8E007 		str	r0, [r3, #2016]
 280:src/xeq.c     **** }
 12818              		.loc 1 280 2 is_stmt 1 view .LVU3398
 12819 0010 FFF7FEFF 		bl	update_program_bounds
 12820              	.LVL937:
 280:src/xeq.c     **** }
 12821              		.loc 1 280 2 is_stmt 0 view .LVU3399
 12822              	.LBE2370:
 12823              	.LBE2372:
1415:src/xeq.c     **** }
 12824              		.loc 1 1415 2 is_stmt 1 view .LVU3400
1416:src/xeq.c     **** 
 12825              		.loc 1 1416 1 is_stmt 0 view .LVU3401
 12826 0014 BDE80840 		pop	{r3, lr}
 12827              		.cfi_restore 14
 12828              		.cfi_restore 3
 12829              		.cfi_def_cfa_offset 0
1415:src/xeq.c     **** }
 12830              		.loc 1 1415 2 view .LVU3402
 12831 0018 0120     		movs	r0, #1
 12832 001a FFF7FEBF 		b	update_program_bounds
 12833              	.LVL938:
 12834              	.L917:
 12835 001e 00BF     		.align	2
 12836              	.L916:
 12837 0020 00000000 		.word	main_ram
 12838              		.cfi_endproc
 12839              	.LFE109:
 12841              		.section	.text.cmdconst,"ax",%progbits
 12842              		.align	1
 12843              		.p2align 2,,3
 12844              		.global	cmdconst
 12845              		.syntax unified
 12846              		.thumb
 12847              		.thumb_func
 12848              		.fpu fpv4-sp-d16
 12850              	cmdconst:
 12851              	.LVL939:
 12852              	.LFB110:
1422:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12853              		.loc 1 1422 47 is_stmt 1 view -0
 12854              		.cfi_startproc
 12855              		@ args = 0, pretend = 0, frame = 0
 12856              		@ frame_needed = 0, uses_anonymous_args = 0
1424:src/xeq.c     **** #else
 12857              		.loc 1 1424 2 view .LVU3404
1422:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12858              		.loc 1 1422 47 is_stmt 0 view .LVU3405
 12859 0000 70B5     		push	{r4, r5, r6, lr}
 12860              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cciWh9P3.s 			page 378


 12861              		.cfi_offset 4, -16
 12862              		.cfi_offset 5, -12
 12863              		.cfi_offset 6, -8
 12864              		.cfi_offset 14, -4
1424:src/xeq.c     **** #else
 12865              		.loc 1 1424 5 view .LVU3406
 12866 0002 01F0FD03 		and	r3, r1, #253
 12867 0006 882B     		cmp	r3, #136
1422:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12868              		.loc 1 1422 47 view .LVU3407
 12869 0008 82B0     		sub	sp, sp, #8
 12870              		.cfi_def_cfa_offset 24
1422:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 12871              		.loc 1 1422 47 view .LVU3408
 12872 000a 0C46     		mov	r4, r1
 12873 000c 0646     		mov	r6, r0
1424:src/xeq.c     **** #else
 12874              		.loc 1 1424 5 view .LVU3409
 12875 000e 08D0     		beq	.L919
1424:src/xeq.c     **** #else
 12876              		.loc 1 1424 30 discriminator 1 view .LVU3410
 12877 0010 0129     		cmp	r1, #1
 12878 0012 06D0     		beq	.L919
1432:src/xeq.c     **** 
 12879              		.loc 1 1432 3 is_stmt 1 view .LVU3411
 12880              	.LBB2400:
 12881              	.LBI2400:
 737:src/xeq.c     **** 	if (get_lift())
 12882              		.loc 1 737 6 view .LVU3412
 12883              	.LBB2401:
 738:src/xeq.c     **** 		lift();
 12884              		.loc 1 738 2 view .LVU3413
 12885              	.LBB2402:
 12886              	.LBI2402:
 733:src/xeq.c     **** 	return State2.state_lift;
 12887              		.loc 1 733 12 view .LVU3414
 12888              	.LBB2403:
 734:src/xeq.c     **** }
 12889              		.loc 1 734 2 view .LVU3415
 734:src/xeq.c     **** }
 12890              		.loc 1 734 15 is_stmt 0 view .LVU3416
 12891 0014 294B     		ldr	r3, .L940
 12892 0016 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 12893              	.LBE2403:
 12894              	.LBE2402:
 738:src/xeq.c     **** 		lift();
 12895              		.loc 1 738 5 view .LVU3417
 12896 0018 5906     		lsls	r1, r3, #25
 12897              	.LVL940:
 738:src/xeq.c     **** 		lift();
 12898              		.loc 1 738 5 view .LVU3418
 12899 001a 12D5     		bpl	.L922
 739:src/xeq.c     **** }
 12900              		.loc 1 739 3 is_stmt 1 view .LVU3419
 12901 001c FFF7FEFF 		bl	lift
 12902              	.LVL941:
 739:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 379


 12903              		.loc 1 739 3 is_stmt 0 view .LVU3420
 12904 0020 0FE0     		b	.L922
 12905              	.LVL942:
 12906              	.L919:
 739:src/xeq.c     **** }
 12907              		.loc 1 739 3 view .LVU3421
 12908              	.LBE2401:
 12909              	.LBE2400:
1428:src/xeq.c     **** 		zero_Y();
 12910              		.loc 1 1428 3 is_stmt 1 view .LVU3422
 12911              	.LBB2404:
 12912              	.LBI2404:
 742:src/xeq.c     **** 	lift_if_enabled();
 12913              		.loc 1 742 13 view .LVU3423
 12914              	.LBB2405:
 743:src/xeq.c     **** 	lift();
 12915              		.loc 1 743 2 view .LVU3424
 12916              	.LBB2406:
 12917              	.LBI2406:
 737:src/xeq.c     **** 	if (get_lift())
 12918              		.loc 1 737 6 view .LVU3425
 12919              	.LBB2407:
 738:src/xeq.c     **** 		lift();
 12920              		.loc 1 738 2 view .LVU3426
 12921              	.LBB2408:
 12922              	.LBI2408:
 733:src/xeq.c     **** 	return State2.state_lift;
 12923              		.loc 1 733 12 view .LVU3427
 12924              	.LBB2409:
 734:src/xeq.c     **** }
 12925              		.loc 1 734 2 view .LVU3428
 734:src/xeq.c     **** }
 12926              		.loc 1 734 15 is_stmt 0 view .LVU3429
 12927 0022 264D     		ldr	r5, .L940
 12928 0024 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12929              	.LBE2409:
 12930              	.LBE2408:
 738:src/xeq.c     **** 		lift();
 12931              		.loc 1 738 5 view .LVU3430
 12932 0026 5806     		lsls	r0, r3, #25
 12933              	.LVL943:
 738:src/xeq.c     **** 		lift();
 12934              		.loc 1 738 5 view .LVU3431
 12935 0028 3CD4     		bmi	.L938
 12936              	.LVL944:
 12937              	.L921:
 738:src/xeq.c     **** 		lift();
 12938              		.loc 1 738 5 view .LVU3432
 12939              	.LBE2407:
 12940              	.LBE2406:
 744:src/xeq.c     **** }
 12941              		.loc 1 744 2 is_stmt 1 view .LVU3433
 12942 002a FFF7FEFF 		bl	lift
 12943              	.LVL945:
 12944              	.LBE2405:
 12945              	.LBE2404:
1429:src/xeq.c     **** 		set_was_complex();
ARM GAS  /tmp/cciWh9P3.s 			page 380


 12946              		.loc 1 1429 3 view .LVU3434
 12947              	.LBB2413:
 12948              	.LBI2413:
1367:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12949              		.loc 1 1367 6 view .LVU3435
 12950              	.LBB2414:
1368:src/xeq.c     **** }
 12951              		.loc 1 1368 2 view .LVU3436
 12952 002e 6520     		movs	r0, #101
 12953 0030 FFF7FEFF 		bl	get_reg_n
 12954              	.LVL946:
 12955 0034 FFF7FEFF 		bl	set_zero
 12956              	.LVL947:
 12957              	.LBE2414:
 12958              	.LBE2413:
1430:src/xeq.c     **** 	} else
 12959              		.loc 1 1430 3 view .LVU3437
 12960              	.LBB2415:
 12961              	.LBI2415:
 529:src/xeq.c     **** 	State2.wascomplex = 1;
 12962              		.loc 1 529 13 view .LVU3438
 12963              	.LBB2416:
 530:src/xeq.c     **** }
 12964              		.loc 1 530 2 view .LVU3439
 530:src/xeq.c     **** }
 12965              		.loc 1 530 20 is_stmt 0 view .LVU3440
 12966 0038 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 12967 003a 0122     		movs	r2, #1
 12968 003c 62F38713 		bfi	r3, r2, #6, #2
 12969 0040 2B75     		strb	r3, [r5, #20]
 12970              	.L922:
 12971              	.LBE2416:
 12972              	.LBE2415:
1434:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 12973              		.loc 1 1434 2 is_stmt 1 view .LVU3441
1434:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 12974              		.loc 1 1434 24 is_stmt 0 view .LVU3442
 12975 0042 7934     		adds	r4, r4, #121
1434:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 12976              		.loc 1 1434 5 view .LVU3443
 12977 0044 E4B2     		uxtb	r4, r4
 12978 0046 012C     		cmp	r4, #1
 12979 0048 2FD9     		bls	.L939
1436:src/xeq.c     **** 		bad_mode_error();
 12980              		.loc 1 1436 7 is_stmt 1 view .LVU3444
1436:src/xeq.c     **** 		bad_mode_error();
 12981              		.loc 1 1436 11 is_stmt 0 view .LVU3445
 12982 004a 1D4C     		ldr	r4, .L940+4
 12983 004c 2368     		ldr	r3, [r4]
 12984 004e 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1436:src/xeq.c     **** 		bad_mode_error();
 12985              		.loc 1 1436 10 view .LVU3446
 12986 0052 D207     		lsls	r2, r2, #31
 12987 0054 06D5     		bpl	.L925
1437:src/xeq.c     **** 	else 
 12988              		.loc 1 1437 3 is_stmt 1 view .LVU3447
 12989              	.LBB2417:
ARM GAS  /tmp/cciWh9P3.s 			page 381


 12990              	.LBI2417:
 565:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 12991              		.loc 1 565 6 view .LVU3448
 12992              	.LBE2417:
 566:src/xeq.c     **** }
 12993              		.loc 1 566 2 view .LVU3449
 12994              	.LVL948:
 12995              	.LBB2422:
 12996              	.LBB2418:
 12997              	.LBI2418:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12998              		.loc 1 536 5 view .LVU3450
 12999              	.LBB2419:
 537:src/xeq.c     **** 		Error = e;
 13000              		.loc 1 537 2 view .LVU3451
 537:src/xeq.c     **** 		Error = e;
 13001              		.loc 1 537 12 is_stmt 0 view .LVU3452
 13002 0056 1B4B     		ldr	r3, .L940+8
 537:src/xeq.c     **** 		Error = e;
 13003              		.loc 1 537 5 view .LVU3453
 13004 0058 1A68     		ldr	r2, [r3]
 13005 005a 0AB9     		cbnz	r2, .L918
 13006              	.LVL949:
 13007              	.LBB2420:
 13008              	.LBI2420:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13009              		.loc 1 536 5 is_stmt 1 view .LVU3454
 13010              	.LBB2421:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13011              		.loc 1 538 3 view .LVU3455
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13012              		.loc 1 538 9 is_stmt 0 view .LVU3456
 13013 005c 0D22     		movs	r2, #13
 13014 005e 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13015              		.loc 1 539 3 is_stmt 1 view .LVU3457
 13016              	.LVL950:
 13017              	.L918:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13018              		.loc 1 539 3 is_stmt 0 view .LVU3458
 13019              	.LBE2421:
 13020              	.LBE2420:
 13021              	.LBE2419:
 13022              	.LBE2418:
 13023              	.LBE2422:
1440:src/xeq.c     **** 
 13024              		.loc 1 1440 1 view .LVU3459
 13025 0060 02B0     		add	sp, sp, #8
 13026              		.cfi_remember_state
 13027              		.cfi_def_cfa_offset 16
 13028              		@ sp needed
 13029 0062 70BD     		pop	{r4, r5, r6, pc}
 13030              	.LVL951:
 13031              	.L925:
 13032              		.cfi_restore_state
1439:src/xeq.c     **** }
 13033              		.loc 1 1439 3 is_stmt 1 view .LVU3460
ARM GAS  /tmp/cciWh9P3.s 			page 382


 13034              	.LBB2423:
 13035              	.LBB2424:
 932:src/xeq.c     **** }
 13036              		.loc 1 932 24 is_stmt 0 view .LVU3461
 13037 0064 B3F8E817 		ldrh	r1, [r3, #2024]
 13038              	.LBE2424:
 13039              	.LBE2423:
1439:src/xeq.c     **** }
 13040              		.loc 1 1439 3 view .LVU3462
 13041 0068 174B     		ldr	r3, .L940+12
 13042              	.LBB2427:
 13043              	.LBB2425:
 932:src/xeq.c     **** }
 13044              		.loc 1 932 24 view .LVU3463
 13045 006a 44F20105 		movw	r5, #16385
 13046 006e 2940     		ands	r1, r1, r5
 13047              	.LBE2425:
 13048              	.LBE2427:
1439:src/xeq.c     **** }
 13049              		.loc 1 1439 22 view .LVU3464
 13050 0070 A1F58041 		sub	r1, r1, #16384
 13051 0074 B1FA81F1 		clz	r1, r1
 13052 0078 3046     		mov	r0, r6
 13053 007a 4909     		lsrs	r1, r1, #5
1439:src/xeq.c     **** }
 13054              		.loc 1 1439 3 view .LVU3465
 13055 007c 1E68     		ldr	r6, [r3]
 13056              	.LVL952:
 13057              	.LBB2428:
 13058              	.LBI2423:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13059              		.loc 1 931 5 is_stmt 1 view .LVU3466
 13060              	.LBB2426:
 932:src/xeq.c     **** }
 13061              		.loc 1 932 2 view .LVU3467
 13062              	.LBE2426:
 13063              	.LBE2428:
1439:src/xeq.c     **** }
 13064              		.loc 1 1439 22 is_stmt 0 view .LVU3468
 13065 007e FFF7FEFF 		bl	get_const
 13066              	.LVL953:
 13067              	.LBB2429:
 13068              	.LBB2430:
 13069              	.LBB2431:
 13070              	.LBB2432:
 932:src/xeq.c     **** }
 13071              		.loc 1 932 24 view .LVU3469
 13072 0082 2368     		ldr	r3, [r4]
 13073 0084 B3F8E837 		ldrh	r3, [r3, #2024]
 13074              	.LBE2432:
 13075              	.LBE2431:
 717:src/xeq.c     **** }
 13076              		.loc 1 717 2 view .LVU3470
 13077 0088 1D40     		ands	r5, r5, r3
 13078 008a B5F5804F 		cmp	r5, #16384
 13079              	.LBE2430:
 13080              	.LBE2429:
ARM GAS  /tmp/cciWh9P3.s 			page 383


1439:src/xeq.c     **** }
 13081              		.loc 1 1439 22 view .LVU3471
 13082 008e 0146     		mov	r1, r0
 13083              	.LVL954:
 13084              	.LBB2437:
 13085              	.LBI2429:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13086              		.loc 1 716 6 is_stmt 1 view .LVU3472
 13087              	.LBB2435:
 717:src/xeq.c     **** }
 13088              		.loc 1 717 2 view .LVU3473
 13089              	.LBB2434:
 13090              	.LBI2431:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13091              		.loc 1 931 5 view .LVU3474
 13092              	.LBB2433:
 932:src/xeq.c     **** }
 13093              		.loc 1 932 2 view .LVU3475
 13094              	.LBE2433:
 13095              	.LBE2434:
 717:src/xeq.c     **** }
 13096              		.loc 1 717 2 is_stmt 0 view .LVU3476
 13097 0090 08BF     		it	eq
 13098 0092 1022     		moveq	r2, #16
 13099 0094 3046     		mov	r0, r6
 13100              	.LVL955:
 717:src/xeq.c     **** }
 13101              		.loc 1 717 2 view .LVU3477
 13102 0096 18BF     		it	ne
 13103 0098 0822     		movne	r2, #8
 13104              	.LBE2435:
 13105              	.LBE2437:
1440:src/xeq.c     **** 
 13106              		.loc 1 1440 1 view .LVU3478
 13107 009a 02B0     		add	sp, sp, #8
 13108              		.cfi_remember_state
 13109              		.cfi_def_cfa_offset 16
 13110              		@ sp needed
 13111 009c BDE87040 		pop	{r4, r5, r6, lr}
 13112              		.cfi_restore 14
 13113              		.cfi_restore 6
 13114              		.cfi_restore 5
 13115              		.cfi_restore 4
 13116              		.cfi_def_cfa_offset 0
 13117              	.LVL956:
 13118              	.LBB2438:
 13119              	.LBB2436:
 717:src/xeq.c     **** }
 13120              		.loc 1 717 2 view .LVU3479
 13121 00a0 FFF7FEBF 		b	xcopy
 13122              	.LVL957:
 13123              	.L938:
 13124              		.cfi_restore_state
 717:src/xeq.c     **** }
 13125              		.loc 1 717 2 view .LVU3480
 13126              	.LBE2436:
 13127              	.LBE2438:
ARM GAS  /tmp/cciWh9P3.s 			page 384


 13128              	.LBB2439:
 13129              	.LBB2412:
 13130              	.LBB2411:
 13131              	.LBB2410:
 739:src/xeq.c     **** }
 13132              		.loc 1 739 3 is_stmt 1 view .LVU3481
 13133 00a4 FFF7FEFF 		bl	lift
 13134              	.LVL958:
 739:src/xeq.c     **** }
 13135              		.loc 1 739 3 is_stmt 0 view .LVU3482
 13136 00a8 BFE7     		b	.L921
 13137              	.L939:
 13138              	.LBE2410:
 13139              	.LBE2411:
 13140              	.LBE2412:
 13141              	.LBE2439:
1435:src/xeq.c     **** 	else if (is_intmode())
 13142              		.loc 1 1435 3 is_stmt 1 view .LVU3483
 13143              	.LVL959:
 13144              	.LBB2440:
 13145              	.LBI2440:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 13146              		.loc 1 1322 6 view .LVU3484
 13147              	.LBB2441:
1323:src/xeq.c     **** }
 13148              		.loc 1 1323 2 view .LVU3485
 13149              	.LBE2441:
 13150              	.LBE2440:
1435:src/xeq.c     **** 	else if (is_intmode())
 13151              		.loc 1 1435 3 is_stmt 0 view .LVU3486
 13152 00aa 0023     		movs	r3, #0
 13153              	.LBB2443:
 13154              	.LBB2442:
1323:src/xeq.c     **** }
 13155              		.loc 1 1323 2 view .LVU3487
 13156 00ac 3246     		mov	r2, r6
 13157 00ae 0093     		str	r3, [sp]
 13158 00b0 6420     		movs	r0, #100
 13159 00b2 FFF7FEFF 		bl	set_reg_n_int_sgn
 13160              	.LVL960:
 13161              	.LBE2442:
 13162              	.LBE2443:
1440:src/xeq.c     **** 
 13163              		.loc 1 1440 1 view .LVU3488
 13164 00b6 02B0     		add	sp, sp, #8
 13165              		.cfi_def_cfa_offset 16
 13166              		@ sp needed
 13167 00b8 70BD     		pop	{r4, r5, r6, pc}
 13168              	.LVL961:
 13169              	.L941:
1440:src/xeq.c     **** 
 13170              		.loc 1 1440 1 view .LVU3489
 13171 00ba 00BF     		.align	2
 13172              	.L940:
 13173 00bc 00000000 		.word	StateWhileOn
 13174 00c0 00000000 		.word	main_ram
 13175 00c4 00000000 		.word	Error
ARM GAS  /tmp/cciWh9P3.s 			page 385


 13176 00c8 00000000 		.word	StackBase
 13177              		.cfi_endproc
 13178              	.LFE110:
 13180              		.section	.text.cmdsto,"ax",%progbits
 13181              		.align	1
 13182              		.p2align 2,,3
 13183              		.global	cmdsto
 13184              		.syntax unified
 13185              		.thumb
 13186              		.thumb_func
 13187              		.fpu fpv4-sp-d16
 13189              	cmdsto:
 13190              	.LVL962:
 13191              	.LFB113:
1523:src/xeq.c     **** 	if (op == RARG_STO) {
 13192              		.loc 1 1523 45 is_stmt 1 view -0
 13193              		.cfi_startproc
 13194              		@ args = 0, pretend = 0, frame = 48
 13195              		@ frame_needed = 0, uses_anonymous_args = 0
1524:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 13196              		.loc 1 1524 2 view .LVU3491
1523:src/xeq.c     **** 	if (op == RARG_STO) {
 13197              		.loc 1 1523 45 is_stmt 0 view .LVU3492
 13198 0000 10B5     		push	{r4, lr}
 13199              		.cfi_def_cfa_offset 8
 13200              		.cfi_offset 4, -8
 13201              		.cfi_offset 14, -4
1524:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 13202              		.loc 1 1524 5 view .LVU3493
 13203 0002 0329     		cmp	r1, #3
1523:src/xeq.c     **** 	if (op == RARG_STO) {
 13204              		.loc 1 1523 45 view .LVU3494
 13205 0004 8CB0     		sub	sp, sp, #48
 13206              		.cfi_def_cfa_offset 56
1524:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 13207              		.loc 1 1524 5 view .LVU3495
 13208 0006 32D0     		beq	.L955
1527:src/xeq.c     **** 			long long int r;
 13209              		.loc 1 1527 3 is_stmt 1 view .LVU3496
1527:src/xeq.c     **** 			long long int r;
 13210              		.loc 1 1527 7 is_stmt 0 view .LVU3497
 13211 0008 1B4B     		ldr	r3, .L956
 13212 000a 1B68     		ldr	r3, [r3]
 13213 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 13214              	.LBB2456:
1530:src/xeq.c     **** 				illegal(op);
 13215              		.loc 1 1530 8 view .LVU3498
 13216 0010 0339     		subs	r1, r1, #3
 13217              	.LVL963:
1530:src/xeq.c     **** 				illegal(op);
 13218              		.loc 1 1530 8 view .LVU3499
 13219              	.LBE2456:
1527:src/xeq.c     **** 			long long int r;
 13220              		.loc 1 1527 6 view .LVU3500
 13221 0012 13F00103 		ands	r3, r3, #1
 13222 0016 0446     		mov	r4, r0
 13223              	.LBB2464:
ARM GAS  /tmp/cciWh9P3.s 			page 386


1530:src/xeq.c     **** 				illegal(op);
 13224              		.loc 1 1530 8 view .LVU3501
 13225 0018 88B2     		uxth	r0, r1
 13226              	.LVL964:
1530:src/xeq.c     **** 				illegal(op);
 13227              		.loc 1 1530 8 view .LVU3502
 13228              	.LBE2464:
1527:src/xeq.c     **** 			long long int r;
 13229              		.loc 1 1527 6 view .LVU3503
 13230 001a 18D0     		beq	.L945
 13231              	.LBB2465:
1528:src/xeq.c     **** 
 13232              		.loc 1 1528 4 is_stmt 1 view .LVU3504
1530:src/xeq.c     **** 				illegal(op);
 13233              		.loc 1 1530 4 view .LVU3505
1530:src/xeq.c     **** 				illegal(op);
 13234              		.loc 1 1530 8 is_stmt 0 view .LVU3506
 13235 001c 0023     		movs	r3, #0
 13236 001e 6A46     		mov	r2, sp
 13237 0020 2146     		mov	r1, r4
 13238 0022 FFF7FEFF 		bl	storcl_intop
 13239              	.LVL965:
1530:src/xeq.c     **** 				illegal(op);
 13240              		.loc 1 1530 7 view .LVU3507
 13241 0026 20B1     		cbz	r0, .L946
1531:src/xeq.c     **** 			set_reg_n_int(arg, r);
 13242              		.loc 1 1531 5 is_stmt 1 view .LVU3508
1531:src/xeq.c     **** 			set_reg_n_int(arg, r);
 13243              		.loc 1 1531 5 view .LVU3509
 13244              	.LVL966:
 13245              	.LBB2457:
 13246              	.LBI2457:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13247              		.loc 1 536 5 view .LVU3510
 13248              	.LBB2458:
 537:src/xeq.c     **** 		Error = e;
 13249              		.loc 1 537 2 view .LVU3511
 537:src/xeq.c     **** 		Error = e;
 13250              		.loc 1 537 12 is_stmt 0 view .LVU3512
 13251 0028 144B     		ldr	r3, .L956+4
 537:src/xeq.c     **** 		Error = e;
 13252              		.loc 1 537 5 view .LVU3513
 13253 002a 1A68     		ldr	r2, [r3]
 13254 002c 0AB9     		cbnz	r2, .L946
 13255              	.LVL967:
 13256              	.LBB2459:
 13257              	.LBI2459:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13258              		.loc 1 536 5 is_stmt 1 view .LVU3514
 13259              	.LBB2460:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13260              		.loc 1 538 3 view .LVU3515
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13261              		.loc 1 538 9 is_stmt 0 view .LVU3516
 13262 002e 0322     		movs	r2, #3
 13263 0030 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/cciWh9P3.s 			page 387


 13264              		.loc 1 539 3 is_stmt 1 view .LVU3517
 13265              	.LVL968:
 13266              	.L946:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13267              		.loc 1 539 3 is_stmt 0 view .LVU3518
 13268              	.LBE2460:
 13269              	.LBE2459:
 13270              	.LBE2458:
 13271              	.LBE2457:
1531:src/xeq.c     **** 			set_reg_n_int(arg, r);
 13272              		.loc 1 1531 5 is_stmt 1 discriminator 1 view .LVU3519
1532:src/xeq.c     **** 		} else {
 13273              		.loc 1 1532 4 discriminator 1 view .LVU3520
1532:src/xeq.c     **** 		} else {
 13274              		.loc 1 1532 4 is_stmt 0 discriminator 1 view .LVU3521
 13275 0032 DDE90023 		ldrd	r2, [sp]
 13276              	.LBB2461:
 13277              	.LBB2462:
1236:src/xeq.c     **** }
 13278              		.loc 1 1236 8 discriminator 1 view .LVU3522
 13279 0036 2046     		mov	r0, r4
 13280 0038 CDE90223 		strd	r2, [sp, #8]
 13281              	.LVL969:
1236:src/xeq.c     **** }
 13282              		.loc 1 1236 8 discriminator 1 view .LVU3523
 13283              	.LBE2462:
 13284              	.LBI2461:
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 13285              		.loc 1 1235 6 is_stmt 1 discriminator 1 view .LVU3524
 13286              	.LBB2463:
1236:src/xeq.c     **** }
 13287              		.loc 1 1236 2 discriminator 1 view .LVU3525
1236:src/xeq.c     **** }
 13288              		.loc 1 1236 8 is_stmt 0 discriminator 1 view .LVU3526
 13289 003c FFF7FEFF 		bl	get_reg_n
 13290              	.LVL970:
1236:src/xeq.c     **** }
 13291              		.loc 1 1236 2 discriminator 1 view .LVU3527
 13292 0040 0822     		movs	r2, #8
 13293 0042 0DEB0201 		add	r1, sp, r2
 13294 0046 FFF7FEFF 		bl	xcopy
 13295              	.LVL971:
1236:src/xeq.c     **** }
 13296              		.loc 1 1236 2 discriminator 1 view .LVU3528
 13297              	.LBE2463:
 13298              	.LBE2461:
 13299              	.LBE2465:
1541:src/xeq.c     **** 
 13300              		.loc 1 1541 1 discriminator 1 view .LVU3529
 13301 004a 0CB0     		add	sp, sp, #48
 13302              		.cfi_remember_state
 13303              		.cfi_def_cfa_offset 8
 13304              		@ sp needed
 13305 004c 10BD     		pop	{r4, pc}
 13306              	.LVL972:
 13307              	.L945:
 13308              		.cfi_restore_state
ARM GAS  /tmp/cciWh9P3.s 			page 388


 13309              	.LBB2466:
1534:src/xeq.c     **** 
 13310              		.loc 1 1534 4 is_stmt 1 view .LVU3530
1536:src/xeq.c     **** 				illegal(op);
 13311              		.loc 1 1536 4 view .LVU3531
1536:src/xeq.c     **** 				illegal(op);
 13312              		.loc 1 1536 8 is_stmt 0 view .LVU3532
 13313 004e 02AA     		add	r2, sp, #8
 13314 0050 2146     		mov	r1, r4
 13315 0052 FFF7FEFF 		bl	storcl_op
 13316              	.LVL973:
1536:src/xeq.c     **** 				illegal(op);
 13317              		.loc 1 1536 7 view .LVU3533
 13318 0056 20B1     		cbz	r0, .L947
1537:src/xeq.c     **** 			setRegister(arg, &r);
 13319              		.loc 1 1537 5 is_stmt 1 view .LVU3534
1537:src/xeq.c     **** 			setRegister(arg, &r);
 13320              		.loc 1 1537 5 view .LVU3535
 13321              	.LVL974:
 13322              	.LBB2467:
 13323              	.LBI2467:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13324              		.loc 1 536 5 view .LVU3536
 13325              	.LBB2468:
 537:src/xeq.c     **** 		Error = e;
 13326              		.loc 1 537 2 view .LVU3537
 537:src/xeq.c     **** 		Error = e;
 13327              		.loc 1 537 12 is_stmt 0 view .LVU3538
 13328 0058 084B     		ldr	r3, .L956+4
 537:src/xeq.c     **** 		Error = e;
 13329              		.loc 1 537 5 view .LVU3539
 13330 005a 1A68     		ldr	r2, [r3]
 13331 005c 0AB9     		cbnz	r2, .L947
 13332              	.LVL975:
 13333              	.LBB2469:
 13334              	.LBI2469:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13335              		.loc 1 536 5 is_stmt 1 view .LVU3540
 13336              	.LBB2470:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13337              		.loc 1 538 3 view .LVU3541
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13338              		.loc 1 538 9 is_stmt 0 view .LVU3542
 13339 005e 0322     		movs	r2, #3
 13340 0060 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13341              		.loc 1 539 3 is_stmt 1 view .LVU3543
 13342              	.LVL976:
 13343              	.L947:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13344              		.loc 1 539 3 is_stmt 0 view .LVU3544
 13345              	.LBE2470:
 13346              	.LBE2469:
 13347              	.LBE2468:
 13348              	.LBE2467:
1537:src/xeq.c     **** 			setRegister(arg, &r);
 13349              		.loc 1 1537 5 is_stmt 1 discriminator 1 view .LVU3545
ARM GAS  /tmp/cciWh9P3.s 			page 389


1538:src/xeq.c     **** 		}
 13350              		.loc 1 1538 4 discriminator 1 view .LVU3546
 13351 0062 02A9     		add	r1, sp, #8
 13352 0064 2046     		mov	r0, r4
 13353 0066 FFF7FEFF 		bl	setRegister
 13354              	.LVL977:
 13355              	.LBE2466:
1541:src/xeq.c     **** 
 13356              		.loc 1 1541 1 is_stmt 0 discriminator 1 view .LVU3547
 13357 006a 0CB0     		add	sp, sp, #48
 13358              		.cfi_remember_state
 13359              		.cfi_def_cfa_offset 8
 13360              		@ sp needed
 13361 006c 10BD     		pop	{r4, pc}
 13362              	.LVL978:
 13363              	.L955:
 13364              		.cfi_restore_state
1525:src/xeq.c     **** 	} else {
 13365              		.loc 1 1525 3 is_stmt 1 view .LVU3548
 13366 006e 6421     		movs	r1, #100
 13367              	.LVL979:
1525:src/xeq.c     **** 	} else {
 13368              		.loc 1 1525 3 is_stmt 0 view .LVU3549
 13369 0070 FFF7FEFF 		bl	copyreg_n
 13370              	.LVL980:
1541:src/xeq.c     **** 
 13371              		.loc 1 1541 1 view .LVU3550
 13372 0074 0CB0     		add	sp, sp, #48
 13373              		.cfi_def_cfa_offset 8
 13374              		@ sp needed
 13375 0076 10BD     		pop	{r4, pc}
 13376              	.L957:
 13377              		.align	2
 13378              	.L956:
 13379 0078 00000000 		.word	main_ram
 13380 007c 00000000 		.word	Error
 13381              		.cfi_endproc
 13382              	.LFE113:
 13384              		.section	.text.cmdrcl,"ax",%progbits
 13385              		.align	1
 13386              		.p2align 2,,3
 13387              		.global	cmdrcl
 13388              		.syntax unified
 13389              		.thumb
 13390              		.thumb_func
 13391              		.fpu fpv4-sp-d16
 13393              	cmdrcl:
 13394              	.LVL981:
 13395              	.LFB115:
1570:src/xeq.c     **** 	do_rcl(arg, op);
 13396              		.loc 1 1570 45 is_stmt 1 view -0
 13397              		.cfi_startproc
 13398              		@ args = 0, pretend = 0, frame = 0
 13399              		@ frame_needed = 0, uses_anonymous_args = 0
 13400              		@ link register save eliminated.
1571:src/xeq.c     **** }
 13401              		.loc 1 1571 2 view .LVU3552
ARM GAS  /tmp/cciWh9P3.s 			page 390


 13402 0000 FFF7FEBF 		b	do_rcl
 13403              	.LVL982:
1571:src/xeq.c     **** }
 13404              		.loc 1 1571 2 is_stmt 0 view .LVU3553
 13405              		.cfi_endproc
 13406              	.LFE115:
 13408              		.section	.text.cmdcsto,"ax",%progbits
 13409              		.align	1
 13410              		.p2align 2,,3
 13411              		.global	cmdcsto
 13412              		.syntax unified
 13413              		.thumb
 13414              		.thumb_func
 13415              		.fpu fpv4-sp-d16
 13417              	cmdcsto:
 13418              	.LVL983:
 13419              	.LFB117:
1615:src/xeq.c     **** 	decNumber r1, r2;
 13420              		.loc 1 1615 46 is_stmt 1 view -0
 13421              		.cfi_startproc
 13422              		@ args = 0, pretend = 0, frame = 72
 13423              		@ frame_needed = 0, uses_anonymous_args = 0
1616:src/xeq.c     **** 	REGISTER *t1, *t2;
 13424              		.loc 1 1616 2 view .LVU3555
1617:src/xeq.c     **** 
 13425              		.loc 1 1617 2 view .LVU3556
1619:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 13426              		.loc 1 1619 2 view .LVU3557
1615:src/xeq.c     **** 	decNumber r1, r2;
 13427              		.loc 1 1615 46 is_stmt 0 view .LVU3558
 13428 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 13429              		.cfi_def_cfa_offset 24
 13430              		.cfi_offset 4, -24
 13431              		.cfi_offset 5, -20
 13432              		.cfi_offset 6, -16
 13433              		.cfi_offset 7, -12
 13434              		.cfi_offset 8, -8
 13435              		.cfi_offset 14, -4
 13436 0004 94B0     		sub	sp, sp, #80
 13437              		.cfi_def_cfa_offset 104
1615:src/xeq.c     **** 	decNumber r1, r2;
 13438              		.loc 1 1615 46 view .LVU3559
 13439 0006 0C46     		mov	r4, r1
1620:src/xeq.c     **** 
 13440              		.loc 1 1620 21 view .LVU3560
 13441 0008 461C     		adds	r6, r0, #1
1615:src/xeq.c     **** 	decNumber r1, r2;
 13442              		.loc 1 1615 46 view .LVU3561
 13443 000a 0546     		mov	r5, r0
1619:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 13444              		.loc 1 1619 7 view .LVU3562
 13445 000c FFF7FEFF 		bl	get_reg_n
 13446              	.LVL984:
1619:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 13447              		.loc 1 1619 7 view .LVU3563
 13448 0010 8046     		mov	r8, r0
1620:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 391


 13449              		.loc 1 1620 7 view .LVU3564
 13450 0012 3046     		mov	r0, r6
 13451              	.LVL985:
1620:src/xeq.c     **** 
 13452              		.loc 1 1620 2 is_stmt 1 view .LVU3565
1620:src/xeq.c     **** 
 13453              		.loc 1 1620 7 is_stmt 0 view .LVU3566
 13454 0014 FFF7FEFF 		bl	get_reg_n
 13455              	.LVL986:
1622:src/xeq.c     **** 		copyreg(t1, StackBase);
 13456              		.loc 1 1622 2 is_stmt 1 view .LVU3567
1622:src/xeq.c     **** 		copyreg(t1, StackBase);
 13457              		.loc 1 1622 5 is_stmt 0 view .LVU3568
 13458 0018 152C     		cmp	r4, #21
 13459 001a 24D0     		beq	.L971
1626:src/xeq.c     **** 			bad_mode_error();
 13460              		.loc 1 1626 3 is_stmt 1 view .LVU3569
1626:src/xeq.c     **** 			bad_mode_error();
 13461              		.loc 1 1626 7 is_stmt 0 view .LVU3570
 13462 001c 284B     		ldr	r3, .L972
 13463 001e 1B68     		ldr	r3, [r3]
 13464 0020 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1626:src/xeq.c     **** 			bad_mode_error();
 13465              		.loc 1 1626 6 view .LVU3571
 13466 0024 13F00103 		ands	r3, r3, #1
 13467 0028 0DD0     		beq	.L964
1627:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
 13468              		.loc 1 1627 4 is_stmt 1 view .LVU3572
 13469              	.LBB2490:
 13470              	.LBI2490:
 565:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 13471              		.loc 1 565 6 view .LVU3573
 13472              	.LBE2490:
 566:src/xeq.c     **** }
 13473              		.loc 1 566 2 view .LVU3574
 13474              	.LVL987:
 13475              	.LBB2495:
 13476              	.LBB2491:
 13477              	.LBI2491:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13478              		.loc 1 536 5 view .LVU3575
 13479              	.LBB2492:
 537:src/xeq.c     **** 		Error = e;
 13480              		.loc 1 537 2 view .LVU3576
 537:src/xeq.c     **** 		Error = e;
 13481              		.loc 1 537 12 is_stmt 0 view .LVU3577
 13482 002a 264B     		ldr	r3, .L972+4
 537:src/xeq.c     **** 		Error = e;
 13483              		.loc 1 537 5 view .LVU3578
 13484 002c 1A68     		ldr	r2, [r3]
 13485 002e 0AB9     		cbnz	r2, .L963
 13486              	.LVL988:
 13487              	.LBB2493:
 13488              	.LBI2493:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13489              		.loc 1 536 5 is_stmt 1 view .LVU3579
 13490              	.LBB2494:
ARM GAS  /tmp/cciWh9P3.s 			page 392


 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13491              		.loc 1 538 3 view .LVU3580
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13492              		.loc 1 538 9 is_stmt 0 view .LVU3581
 13493 0030 0D22     		movs	r2, #13
 13494 0032 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13495              		.loc 1 539 3 is_stmt 1 view .LVU3582
 13496              	.LVL989:
 13497              	.L963:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13498              		.loc 1 539 3 is_stmt 0 view .LVU3583
 13499              	.LBE2494:
 13500              	.LBE2493:
 13501              	.LBE2492:
 13502              	.LBE2491:
 13503              	.LBE2495:
1635:src/xeq.c     **** }
 13504              		.loc 1 1635 2 is_stmt 1 view .LVU3584
 13505              	.LBB2496:
 13506              	.LBI2496:
 529:src/xeq.c     **** 	State2.wascomplex = 1;
 13507              		.loc 1 529 13 view .LVU3585
 13508              	.LBB2497:
 530:src/xeq.c     **** }
 13509              		.loc 1 530 2 view .LVU3586
 530:src/xeq.c     **** }
 13510              		.loc 1 530 20 is_stmt 0 view .LVU3587
 13511 0034 244B     		ldr	r3, .L972+8
 13512 0036 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 13513 0038 0121     		movs	r1, #1
 13514 003a 61F38712 		bfi	r2, r1, #6, #2
 13515 003e 1A75     		strb	r2, [r3, #20]
 13516              	.LBE2497:
 13517              	.LBE2496:
1636:src/xeq.c     **** 
 13518              		.loc 1 1636 1 view .LVU3588
 13519 0040 14B0     		add	sp, sp, #80
 13520              		.cfi_remember_state
 13521              		.cfi_def_cfa_offset 24
 13522              		@ sp needed
 13523 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 13524              	.LVL990:
 13525              	.L964:
 13526              		.cfi_restore_state
1628:src/xeq.c     **** 			illegal(op);
 13527              		.loc 1 1628 8 is_stmt 1 view .LVU3589
1628:src/xeq.c     **** 			illegal(op);
 13528              		.loc 1 1628 12 is_stmt 0 view .LVU3590
 13529 0046 153C     		subs	r4, r4, #21
 13530 0048 0093     		str	r3, [sp]
 13531 004a A0B2     		uxth	r0, r4
 13532              	.LVL991:
1628:src/xeq.c     **** 			illegal(op);
 13533              		.loc 1 1628 12 view .LVU3591
 13534 004c 0BAB     		add	r3, sp, #44
 13535 004e 02AA     		add	r2, sp, #8
ARM GAS  /tmp/cciWh9P3.s 			page 393


 13536 0050 2946     		mov	r1, r5
 13537 0052 FFF7FEFF 		bl	storcl_cop
 13538              	.LVL992:
1628:src/xeq.c     **** 			illegal(op);
 13539              		.loc 1 1628 11 view .LVU3592
 13540 0056 50B3     		cbz	r0, .L966
1629:src/xeq.c     **** 		else {
 13541              		.loc 1 1629 4 is_stmt 1 view .LVU3593
1629:src/xeq.c     **** 		else {
 13542              		.loc 1 1629 4 view .LVU3594
 13543              	.LVL993:
 13544              	.LBB2498:
 13545              	.LBI2498:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13546              		.loc 1 536 5 view .LVU3595
 13547              	.LBB2499:
 537:src/xeq.c     **** 		Error = e;
 13548              		.loc 1 537 2 view .LVU3596
 537:src/xeq.c     **** 		Error = e;
 13549              		.loc 1 537 12 is_stmt 0 view .LVU3597
 13550 0058 1A4B     		ldr	r3, .L972+4
 537:src/xeq.c     **** 		Error = e;
 13551              		.loc 1 537 5 view .LVU3598
 13552 005a 1A68     		ldr	r2, [r3]
 13553 005c 002A     		cmp	r2, #0
 13554 005e E9D1     		bne	.L963
 13555              	.LVL994:
 13556              	.LBB2500:
 13557              	.LBI2500:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13558              		.loc 1 536 5 is_stmt 1 view .LVU3599
 13559              	.LBB2501:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13560              		.loc 1 538 3 view .LVU3600
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13561              		.loc 1 538 9 is_stmt 0 view .LVU3601
 13562 0060 0322     		movs	r2, #3
 13563 0062 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13564              		.loc 1 539 3 is_stmt 1 view .LVU3602
 13565 0064 E6E7     		b	.L963
 13566              	.LVL995:
 13567              	.L971:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13568              		.loc 1 539 3 is_stmt 0 view .LVU3603
 13569              	.LBE2501:
 13570              	.LBE2500:
 13571              	.LBE2499:
 13572              	.LBE2498:
1623:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 13573              		.loc 1 1623 3 is_stmt 1 view .LVU3604
 13574              	.LBB2502:
 13575              	.LBB2503:
 13576              	.LBB2504:
 13577              	.LBB2505:
 932:src/xeq.c     **** }
 13578              		.loc 1 932 24 is_stmt 0 view .LVU3605
ARM GAS  /tmp/cciWh9P3.s 			page 394


 13579 0066 164D     		ldr	r5, .L972
 13580              	.LVL996:
 932:src/xeq.c     **** }
 13581              		.loc 1 932 24 view .LVU3606
 13582              	.LBE2505:
 13583              	.LBE2504:
 13584              	.LBE2503:
 13585              	.LBE2502:
1623:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 13586              		.loc 1 1623 3 view .LVU3607
 13587 0068 184A     		ldr	r2, .L972+12
 13588              	.LVL997:
 13589              	.LBB2511:
 13590              	.LBI2502:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13591              		.loc 1 716 6 is_stmt 1 view .LVU3608
 13592              	.LBB2510:
 717:src/xeq.c     **** }
 13593              		.loc 1 717 2 view .LVU3609
 13594              	.LBB2508:
 13595              	.LBI2504:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13596              		.loc 1 931 5 view .LVU3610
 13597              	.LBB2506:
 932:src/xeq.c     **** }
 13598              		.loc 1 932 2 view .LVU3611
 932:src/xeq.c     **** }
 13599              		.loc 1 932 24 is_stmt 0 view .LVU3612
 13600 006a 2B68     		ldr	r3, [r5]
 13601              	.LBE2506:
 13602              	.LBE2508:
 717:src/xeq.c     **** }
 13603              		.loc 1 717 2 view .LVU3613
 13604 006c 1168     		ldr	r1, [r2]
 13605              	.LBB2509:
 13606              	.LBB2507:
 932:src/xeq.c     **** }
 13607              		.loc 1 932 24 view .LVU3614
 13608 006e B3F8E837 		ldrh	r3, [r3, #2024]
 13609 0072 44F20104 		movw	r4, #16385
 13610              	.LBE2507:
 13611              	.LBE2509:
 717:src/xeq.c     **** }
 13612              		.loc 1 717 2 view .LVU3615
 13613 0076 2340     		ands	r3, r3, r4
 13614 0078 B3F5804F 		cmp	r3, #16384
 13615 007c 0CBF     		ite	eq
 13616 007e 1022     		moveq	r2, #16
 13617              	.LVL998:
 717:src/xeq.c     **** }
 13618              		.loc 1 717 2 view .LVU3616
 13619 0080 0822     		movne	r2, #8
 13620 0082 0746     		mov	r7, r0
 13621 0084 4046     		mov	r0, r8
 13622              	.LVL999:
 717:src/xeq.c     **** }
 13623              		.loc 1 717 2 view .LVU3617
ARM GAS  /tmp/cciWh9P3.s 			page 395


 13624 0086 FFF7FEFF 		bl	xcopy
 13625              	.LVL1000:
 717:src/xeq.c     **** }
 13626              		.loc 1 717 2 view .LVU3618
 13627              	.LBE2510:
 13628              	.LBE2511:
1624:src/xeq.c     **** 	} else {
 13629              		.loc 1 1624 3 is_stmt 1 view .LVU3619
1624:src/xeq.c     **** 	} else {
 13630              		.loc 1 1624 15 is_stmt 0 view .LVU3620
 13631 008a 6520     		movs	r0, #101
 13632 008c FFF7FEFF 		bl	get_reg_n
 13633              	.LVL1001:
 13634              	.LBB2512:
 13635              	.LBB2513:
 13636              	.LBB2514:
 13637              	.LBB2515:
 932:src/xeq.c     **** }
 13638              		.loc 1 932 24 view .LVU3621
 13639 0090 2B68     		ldr	r3, [r5]
 13640 0092 B3F8E837 		ldrh	r3, [r3, #2024]
 13641              	.LBE2515:
 13642              	.LBE2514:
 717:src/xeq.c     **** }
 13643              		.loc 1 717 2 view .LVU3622
 13644 0096 1C40     		ands	r4, r4, r3
 13645 0098 B4F5804F 		cmp	r4, #16384
 13646              	.LBE2513:
 13647              	.LBE2512:
1624:src/xeq.c     **** 	} else {
 13648              		.loc 1 1624 15 view .LVU3623
 13649 009c 0146     		mov	r1, r0
 13650              	.LVL1002:
 13651              	.LBB2519:
 13652              	.LBI2512:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13653              		.loc 1 716 6 is_stmt 1 view .LVU3624
 13654              	.LBB2518:
 717:src/xeq.c     **** }
 13655              		.loc 1 717 2 view .LVU3625
 13656              	.LBB2517:
 13657              	.LBI2514:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13658              		.loc 1 931 5 view .LVU3626
 13659              	.LBB2516:
 932:src/xeq.c     **** }
 13660              		.loc 1 932 2 view .LVU3627
 13661              	.LBE2516:
 13662              	.LBE2517:
 717:src/xeq.c     **** }
 13663              		.loc 1 717 2 is_stmt 0 view .LVU3628
 13664 009e 08BF     		it	eq
 13665 00a0 1022     		moveq	r2, #16
 13666 00a2 3846     		mov	r0, r7
 13667              	.LVL1003:
 717:src/xeq.c     **** }
 13668              		.loc 1 717 2 view .LVU3629
ARM GAS  /tmp/cciWh9P3.s 			page 396


 13669 00a4 18BF     		it	ne
 13670 00a6 0822     		movne	r2, #8
 13671 00a8 FFF7FEFF 		bl	xcopy
 13672              	.LVL1004:
 718:src/xeq.c     **** 
 13673              		.loc 1 718 1 view .LVU3630
 13674 00ac C2E7     		b	.L963
 13675              	.LVL1005:
 13676              	.L966:
 718:src/xeq.c     **** 
 13677              		.loc 1 718 1 view .LVU3631
 13678              	.LBE2518:
 13679              	.LBE2519:
1631:src/xeq.c     **** 			setRegister(arg + 1, &r2);
 13680              		.loc 1 1631 4 is_stmt 1 view .LVU3632
 13681 00ae 02A9     		add	r1, sp, #8
 13682 00b0 2846     		mov	r0, r5
 13683 00b2 FFF7FEFF 		bl	setRegister
 13684              	.LVL1006:
1632:src/xeq.c     **** 		}
 13685              		.loc 1 1632 4 view .LVU3633
 13686 00b6 0BA9     		add	r1, sp, #44
 13687 00b8 3046     		mov	r0, r6
 13688 00ba FFF7FEFF 		bl	setRegister
 13689              	.LVL1007:
 13690 00be B9E7     		b	.L963
 13691              	.L973:
 13692              		.align	2
 13693              	.L972:
 13694 00c0 00000000 		.word	main_ram
 13695 00c4 00000000 		.word	Error
 13696 00c8 00000000 		.word	StateWhileOn
 13697 00cc 00000000 		.word	StackBase
 13698              		.cfi_endproc
 13699              	.LFE117:
 13701              		.section	.text.cmdcrcl,"ax",%progbits
 13702              		.align	1
 13703              		.p2align 2,,3
 13704              		.global	cmdcrcl
 13705              		.syntax unified
 13706              		.thumb
 13707              		.thumb_func
 13708              		.fpu fpv4-sp-d16
 13710              	cmdcrcl:
 13711              	.LVL1008:
 13712              	.LFB119:
1661:src/xeq.c     **** 	do_crcl(arg, op);
 13713              		.loc 1 1661 46 view -0
 13714              		.cfi_startproc
 13715              		@ args = 0, pretend = 0, frame = 72
 13716              		@ frame_needed = 0, uses_anonymous_args = 0
1662:src/xeq.c     **** }
 13717              		.loc 1 1662 2 view .LVU3635
1661:src/xeq.c     **** 	do_crcl(arg, op);
 13718              		.loc 1 1661 46 is_stmt 0 view .LVU3636
 13719 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 13720              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/cciWh9P3.s 			page 397


 13721              		.cfi_offset 4, -20
 13722              		.cfi_offset 5, -16
 13723              		.cfi_offset 6, -12
 13724              		.cfi_offset 7, -8
 13725              		.cfi_offset 14, -4
 13726              	.LBB2562:
 13727              	.LBB2563:
1641:src/xeq.c     **** 		REGISTER x, y;
 13728              		.loc 1 1641 5 view .LVU3637
 13729 0002 1A29     		cmp	r1, #26
 13730              	.LBE2563:
 13731              	.LBE2562:
1661:src/xeq.c     **** 	do_crcl(arg, op);
 13732              		.loc 1 1661 46 view .LVU3638
 13733 0004 95B0     		sub	sp, sp, #84
 13734              		.cfi_def_cfa_offset 104
1661:src/xeq.c     **** 	do_crcl(arg, op);
 13735              		.loc 1 1661 46 view .LVU3639
 13736 0006 0446     		mov	r4, r0
 13737              	.LVL1009:
 13738              	.LBB2640:
 13739              	.LBI2562:
1638:src/xeq.c     **** 	decNumber r1, r2;
 13740              		.loc 1 1638 13 is_stmt 1 view .LVU3640
 13741              	.LBB2637:
1639:src/xeq.c     **** 
 13742              		.loc 1 1639 2 view .LVU3641
1641:src/xeq.c     **** 		REGISTER x, y;
 13743              		.loc 1 1641 2 view .LVU3642
1641:src/xeq.c     **** 		REGISTER x, y;
 13744              		.loc 1 1641 5 is_stmt 0 view .LVU3643
 13745 0008 27D0     		beq	.L997
1649:src/xeq.c     **** 			bad_mode_error();
 13746              		.loc 1 1649 3 is_stmt 1 view .LVU3644
1649:src/xeq.c     **** 			bad_mode_error();
 13747              		.loc 1 1649 7 is_stmt 0 view .LVU3645
 13748 000a 3F4B     		ldr	r3, .L999
 13749 000c 1B68     		ldr	r3, [r3]
 13750 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1649:src/xeq.c     **** 			bad_mode_error();
 13751              		.loc 1 1649 6 view .LVU3646
 13752 0012 DB07     		lsls	r3, r3, #31
 13753 0014 0ED5     		bpl	.L982
1650:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
 13754              		.loc 1 1650 4 is_stmt 1 view .LVU3647
 13755              	.LBB2564:
 13756              	.LBI2564:
 565:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 13757              		.loc 1 565 6 view .LVU3648
 13758              	.LBE2564:
 13759              	.LBE2637:
 13760              	.LBE2640:
 566:src/xeq.c     **** }
 13761              		.loc 1 566 2 view .LVU3649
 13762              	.LVL1010:
 13763              	.LBB2641:
 13764              	.LBB2638:
ARM GAS  /tmp/cciWh9P3.s 			page 398


 13765              	.LBB2571:
 13766              	.LBB2565:
 13767              	.LBI2565:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13768              		.loc 1 536 5 view .LVU3650
 13769              	.LBB2566:
 537:src/xeq.c     **** 		Error = e;
 13770              		.loc 1 537 2 view .LVU3651
 537:src/xeq.c     **** 		Error = e;
 13771              		.loc 1 537 12 is_stmt 0 view .LVU3652
 13772 0016 3D4B     		ldr	r3, .L999+4
 537:src/xeq.c     **** 		Error = e;
 13773              		.loc 1 537 5 view .LVU3653
 13774 0018 1A68     		ldr	r2, [r3]
 13775 001a 3AB1     		cbz	r2, .L983
 13776              	.LVL1011:
 13777              	.L996:
 537:src/xeq.c     **** 		Error = e;
 13778              		.loc 1 537 5 view .LVU3654
 13779 001c 3C4D     		ldr	r5, .L999+8
 13780              	.LVL1012:
 13781              	.L981:
 537:src/xeq.c     **** 		Error = e;
 13782              		.loc 1 537 5 view .LVU3655
 13783              	.LBE2566:
 13784              	.LBE2565:
 13785              	.LBE2571:
1658:src/xeq.c     **** }
 13786              		.loc 1 1658 2 is_stmt 1 view .LVU3656
 13787              	.LBB2572:
 13788              	.LBI2572:
 529:src/xeq.c     **** 	State2.wascomplex = 1;
 13789              		.loc 1 529 13 view .LVU3657
 13790              	.LBB2573:
 530:src/xeq.c     **** }
 13791              		.loc 1 530 2 view .LVU3658
 530:src/xeq.c     **** }
 13792              		.loc 1 530 20 is_stmt 0 view .LVU3659
 13793 001e 2B7D     		ldrb	r3, [r5, #20]	@ zero_extendqisi2
 13794 0020 0122     		movs	r2, #1
 13795 0022 62F38713 		bfi	r3, r2, #6, #2
 13796 0026 2B75     		strb	r3, [r5, #20]
 13797              	.LVL1013:
 530:src/xeq.c     **** }
 13798              		.loc 1 530 20 view .LVU3660
 13799              	.LBE2573:
 13800              	.LBE2572:
 13801              	.LBE2638:
 13802              	.LBE2641:
1663:src/xeq.c     **** 
 13803              		.loc 1 1663 1 view .LVU3661
 13804 0028 15B0     		add	sp, sp, #84
 13805              		.cfi_remember_state
 13806              		.cfi_def_cfa_offset 20
 13807              		@ sp needed
 13808 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 13809              	.LVL1014:
ARM GAS  /tmp/cciWh9P3.s 			page 399


 13810              	.L983:
 13811              		.cfi_restore_state
 13812              	.LBB2642:
 13813              	.LBB2639:
 13814              	.LBB2574:
 13815              	.LBB2570:
 13816              	.LBB2569:
 13817              	.LBB2567:
 13818              	.LBI2567:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13819              		.loc 1 536 5 is_stmt 1 view .LVU3662
 13820              	.LBB2568:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13821              		.loc 1 538 3 view .LVU3663
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13822              		.loc 1 538 9 is_stmt 0 view .LVU3664
 13823 002c 0D22     		movs	r2, #13
 13824 002e 384D     		ldr	r5, .L999+8
 13825 0030 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13826              		.loc 1 539 3 is_stmt 1 view .LVU3665
 13827 0032 F4E7     		b	.L981
 13828              	.LVL1015:
 13829              	.L982:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13830              		.loc 1 539 3 is_stmt 0 view .LVU3666
 13831              	.LBE2568:
 13832              	.LBE2567:
 13833              	.LBE2569:
 13834              	.LBE2570:
 13835              	.LBE2574:
1651:src/xeq.c     **** 			illegal(op);
 13836              		.loc 1 1651 8 is_stmt 1 view .LVU3667
1651:src/xeq.c     **** 			illegal(op);
 13837              		.loc 1 1651 12 is_stmt 0 view .LVU3668
 13838 0034 1A39     		subs	r1, r1, #26
 13839              	.LVL1016:
1651:src/xeq.c     **** 			illegal(op);
 13840              		.loc 1 1651 12 view .LVU3669
 13841 0036 0125     		movs	r5, #1
 13842 0038 88B2     		uxth	r0, r1
 13843              	.LVL1017:
1651:src/xeq.c     **** 			illegal(op);
 13844              		.loc 1 1651 12 view .LVU3670
 13845 003a 0BAB     		add	r3, sp, #44
 13846 003c 2146     		mov	r1, r4
 13847 003e 02AA     		add	r2, sp, #8
 13848 0040 0095     		str	r5, [sp]
 13849 0042 FFF7FEFF 		bl	storcl_cop
 13850              	.LVL1018:
1651:src/xeq.c     **** 			illegal(op);
 13851              		.loc 1 1651 11 view .LVU3671
 13852 0046 0028     		cmp	r0, #0
 13853 0048 4FD0     		beq	.L984
1652:src/xeq.c     **** 		else {
 13854              		.loc 1 1652 4 is_stmt 1 view .LVU3672
1652:src/xeq.c     **** 		else {
ARM GAS  /tmp/cciWh9P3.s 			page 400


 13855              		.loc 1 1652 4 view .LVU3673
 13856              	.LVL1019:
 13857              	.LBB2575:
 13858              	.LBI2575:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13859              		.loc 1 536 5 view .LVU3674
 13860              	.LBB2576:
 537:src/xeq.c     **** 		Error = e;
 13861              		.loc 1 537 2 view .LVU3675
 537:src/xeq.c     **** 		Error = e;
 13862              		.loc 1 537 12 is_stmt 0 view .LVU3676
 13863 004a 304B     		ldr	r3, .L999+4
 537:src/xeq.c     **** 		Error = e;
 13864              		.loc 1 537 5 view .LVU3677
 13865 004c 1A68     		ldr	r2, [r3]
 13866 004e 002A     		cmp	r2, #0
 13867 0050 E4D1     		bne	.L996
 13868              	.LVL1020:
 13869              	.LBB2577:
 13870              	.LBI2577:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13871              		.loc 1 536 5 is_stmt 1 view .LVU3678
 13872              	.LBB2578:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13873              		.loc 1 538 3 view .LVU3679
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 13874              		.loc 1 538 9 is_stmt 0 view .LVU3680
 13875 0052 0322     		movs	r2, #3
 13876 0054 2E4D     		ldr	r5, .L999+8
 13877 0056 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13878              		.loc 1 539 3 is_stmt 1 view .LVU3681
 13879 0058 E1E7     		b	.L981
 13880              	.LVL1021:
 13881              	.L997:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 13882              		.loc 1 539 3 is_stmt 0 view .LVU3682
 13883              	.LBE2578:
 13884              	.LBE2577:
 13885              	.LBE2576:
 13886              	.LBE2575:
 13887              	.LBB2579:
1642:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
 13888              		.loc 1 1642 3 is_stmt 1 view .LVU3683
1643:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 13889              		.loc 1 1643 3 view .LVU3684
 13890              	.LBB2580:
 13891              	.LBB2581:
 13892              	.LBB2582:
 13893              	.LBB2583:
 932:src/xeq.c     **** }
 13894              		.loc 1 932 24 is_stmt 0 view .LVU3685
 13895 005a 2B4E     		ldr	r6, .L999
 13896              	.LBE2583:
 13897              	.LBE2582:
 13898              	.LBE2581:
 13899              	.LBE2580:
ARM GAS  /tmp/cciWh9P3.s 			page 401


 13900              	.LBB2590:
 13901              	.LBB2591:
 13902              	.LBB2592:
 13903              	.LBB2593:
 13904              	.LBB2594:
 13905              	.LBB2595:
 734:src/xeq.c     **** }
 13906              		.loc 1 734 15 view .LVU3686
 13907 005c 2C4D     		ldr	r5, .L999+8
 13908              	.LBE2595:
 13909              	.LBE2594:
 13910              	.LBE2593:
 13911              	.LBE2592:
 13912              	.LBE2591:
 13913              	.LBE2590:
1643:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 13914              		.loc 1 1643 15 view .LVU3687
 13915 005e FFF7FEFF 		bl	get_reg_n
 13916              	.LVL1022:
 13917              	.LBB2604:
 13918              	.LBB2588:
 13919              	.LBB2586:
 13920              	.LBB2584:
 932:src/xeq.c     **** }
 13921              		.loc 1 932 24 view .LVU3688
 13922 0062 3368     		ldr	r3, [r6]
 13923 0064 B3F8E837 		ldrh	r3, [r3, #2024]
 13924 0068 44F20107 		movw	r7, #16385
 13925              	.LBE2584:
 13926              	.LBE2586:
 717:src/xeq.c     **** }
 13927              		.loc 1 717 2 view .LVU3689
 13928 006c 3B40     		ands	r3, r3, r7
 13929 006e B3F5804F 		cmp	r3, #16384
 13930 0072 0CBF     		ite	eq
 13931 0074 1022     		moveq	r2, #16
 13932 0076 0822     		movne	r2, #8
 13933              	.LBE2588:
 13934              	.LBE2604:
1643:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 13935              		.loc 1 1643 15 view .LVU3690
 13936 0078 0146     		mov	r1, r0
 13937              	.LVL1023:
 13938              	.LBB2605:
 13939              	.LBI2580:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13940              		.loc 1 716 6 is_stmt 1 view .LVU3691
 13941              	.LBB2589:
 717:src/xeq.c     **** }
 13942              		.loc 1 717 2 view .LVU3692
 13943              	.LBB2587:
 13944              	.LBI2582:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13945              		.loc 1 931 5 view .LVU3693
 13946              	.LBB2585:
 932:src/xeq.c     **** }
 13947              		.loc 1 932 2 view .LVU3694
ARM GAS  /tmp/cciWh9P3.s 			page 402


 13948              	.LBE2585:
 13949              	.LBE2587:
 717:src/xeq.c     **** }
 13950              		.loc 1 717 2 is_stmt 0 view .LVU3695
 13951 007a 02A8     		add	r0, sp, #8
 13952              	.LVL1024:
 717:src/xeq.c     **** }
 13953              		.loc 1 717 2 view .LVU3696
 13954 007c FFF7FEFF 		bl	xcopy
 13955              	.LVL1025:
 717:src/xeq.c     **** }
 13956              		.loc 1 717 2 view .LVU3697
 13957              	.LBE2589:
 13958              	.LBE2605:
1644:src/xeq.c     **** 		lift2_if_enabled();
 13959              		.loc 1 1644 3 is_stmt 1 view .LVU3698
1644:src/xeq.c     **** 		lift2_if_enabled();
 13960              		.loc 1 1644 15 is_stmt 0 view .LVU3699
 13961 0080 601C     		adds	r0, r4, #1
 13962 0082 FFF7FEFF 		bl	get_reg_n
 13963              	.LVL1026:
 13964              	.LBB2606:
 13965              	.LBB2607:
 13966              	.LBB2608:
 13967              	.LBB2609:
 932:src/xeq.c     **** }
 13968              		.loc 1 932 24 view .LVU3700
 13969 0086 3368     		ldr	r3, [r6]
 13970 0088 B3F8E837 		ldrh	r3, [r3, #2024]
 13971              	.LBE2609:
 13972              	.LBE2608:
 717:src/xeq.c     **** }
 13973              		.loc 1 717 2 view .LVU3701
 13974 008c 1F40     		ands	r7, r7, r3
 13975 008e B7F5804F 		cmp	r7, #16384
 13976              	.LBE2607:
 13977              	.LBE2606:
1644:src/xeq.c     **** 		lift2_if_enabled();
 13978              		.loc 1 1644 15 view .LVU3702
 13979 0092 0146     		mov	r1, r0
 13980              	.LVL1027:
 13981              	.LBB2613:
 13982              	.LBI2606:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 13983              		.loc 1 716 6 is_stmt 1 view .LVU3703
 13984              	.LBB2612:
 717:src/xeq.c     **** }
 13985              		.loc 1 717 2 view .LVU3704
 13986              	.LBB2611:
 13987              	.LBI2608:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13988              		.loc 1 931 5 view .LVU3705
 13989              	.LBB2610:
 932:src/xeq.c     **** }
 13990              		.loc 1 932 2 view .LVU3706
 13991              	.LBE2610:
 13992              	.LBE2611:
ARM GAS  /tmp/cciWh9P3.s 			page 403


 717:src/xeq.c     **** }
 13993              		.loc 1 717 2 is_stmt 0 view .LVU3707
 13994 0094 0CBF     		ite	eq
 13995 0096 1022     		moveq	r2, #16
 13996 0098 0822     		movne	r2, #8
 13997 009a 0BA8     		add	r0, sp, #44
 13998              	.LVL1028:
 717:src/xeq.c     **** }
 13999              		.loc 1 717 2 view .LVU3708
 14000 009c FFF7FEFF 		bl	xcopy
 14001              	.LVL1029:
 717:src/xeq.c     **** }
 14002              		.loc 1 717 2 view .LVU3709
 14003              	.LBE2612:
 14004              	.LBE2613:
1645:src/xeq.c     **** 		copyreg(StackBase, &x);
 14005              		.loc 1 1645 3 is_stmt 1 view .LVU3710
 14006              	.LBB2614:
 14007              	.LBI2590:
 742:src/xeq.c     **** 	lift_if_enabled();
 14008              		.loc 1 742 13 view .LVU3711
 14009              	.LBB2602:
 743:src/xeq.c     **** 	lift();
 14010              		.loc 1 743 2 view .LVU3712
 14011              	.LBB2600:
 14012              	.LBI2592:
 737:src/xeq.c     **** 	if (get_lift())
 14013              		.loc 1 737 6 view .LVU3713
 14014              	.LBB2598:
 738:src/xeq.c     **** 		lift();
 14015              		.loc 1 738 2 view .LVU3714
 14016              	.LBB2597:
 14017              	.LBI2594:
 733:src/xeq.c     **** 	return State2.state_lift;
 14018              		.loc 1 733 12 view .LVU3715
 14019              	.LBB2596:
 734:src/xeq.c     **** }
 14020              		.loc 1 734 2 view .LVU3716
 734:src/xeq.c     **** }
 14021              		.loc 1 734 15 is_stmt 0 view .LVU3717
 14022 00a0 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 14023              	.LBE2596:
 14024              	.LBE2597:
 738:src/xeq.c     **** 		lift();
 14025              		.loc 1 738 5 view .LVU3718
 14026 00a2 5A06     		lsls	r2, r3, #25
 14027 00a4 2CD4     		bmi	.L998
 14028              	.L978:
 14029              	.LBE2598:
 14030              	.LBE2600:
 744:src/xeq.c     **** }
 14031              		.loc 1 744 2 is_stmt 1 view .LVU3719
 14032 00a6 FFF7FEFF 		bl	lift
 14033              	.LVL1030:
 14034              	.LBE2602:
 14035              	.LBE2614:
1646:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
ARM GAS  /tmp/cciWh9P3.s 			page 404


 14036              		.loc 1 1646 3 view .LVU3720
 14037              	.LBB2615:
 14038              	.LBB2616:
 14039              	.LBB2617:
 14040              	.LBB2618:
 932:src/xeq.c     **** }
 14041              		.loc 1 932 24 is_stmt 0 view .LVU3721
 14042 00aa 3368     		ldr	r3, [r6]
 14043              	.LBE2618:
 14044              	.LBE2617:
 14045              	.LBE2616:
 14046              	.LBE2615:
1646:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 14047              		.loc 1 1646 3 view .LVU3722
 14048 00ac 194A     		ldr	r2, .L999+12
 14049              	.LVL1031:
 14050              	.LBB2624:
 14051              	.LBI2615:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14052              		.loc 1 716 6 is_stmt 1 view .LVU3723
 14053              	.LBB2623:
 717:src/xeq.c     **** }
 14054              		.loc 1 717 2 view .LVU3724
 14055              	.LBB2621:
 14056              	.LBI2617:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14057              		.loc 1 931 5 view .LVU3725
 14058              	.LBB2619:
 932:src/xeq.c     **** }
 14059              		.loc 1 932 2 view .LVU3726
 932:src/xeq.c     **** }
 14060              		.loc 1 932 24 is_stmt 0 view .LVU3727
 14061 00ae B3F8E837 		ldrh	r3, [r3, #2024]
 14062              	.LBE2619:
 14063              	.LBE2621:
 717:src/xeq.c     **** }
 14064              		.loc 1 717 2 view .LVU3728
 14065 00b2 1068     		ldr	r0, [r2]
 14066              	.LBB2622:
 14067              	.LBB2620:
 932:src/xeq.c     **** }
 14068              		.loc 1 932 24 view .LVU3729
 14069 00b4 44F20104 		movw	r4, #16385
 14070              	.LVL1032:
 932:src/xeq.c     **** }
 14071              		.loc 1 932 24 view .LVU3730
 14072              	.LBE2620:
 14073              	.LBE2622:
 717:src/xeq.c     **** }
 14074              		.loc 1 717 2 view .LVU3731
 14075 00b8 2340     		ands	r3, r3, r4
 14076 00ba B3F5804F 		cmp	r3, #16384
 14077 00be 0CBF     		ite	eq
 14078 00c0 1022     		moveq	r2, #16
 14079              	.LVL1033:
 717:src/xeq.c     **** }
 14080              		.loc 1 717 2 view .LVU3732
ARM GAS  /tmp/cciWh9P3.s 			page 405


 14081 00c2 0822     		movne	r2, #8
 14082 00c4 02A9     		add	r1, sp, #8
 14083              	.LVL1034:
 717:src/xeq.c     **** }
 14084              		.loc 1 717 2 view .LVU3733
 14085 00c6 FFF7FEFF 		bl	xcopy
 14086              	.LVL1035:
 717:src/xeq.c     **** }
 14087              		.loc 1 717 2 view .LVU3734
 14088              	.LBE2623:
 14089              	.LBE2624:
1647:src/xeq.c     **** 	} else {
 14090              		.loc 1 1647 3 is_stmt 1 view .LVU3735
 14091 00ca 6520     		movs	r0, #101
 14092 00cc FFF7FEFF 		bl	get_reg_n
 14093              	.LVL1036:
 14094              	.LBB2625:
 14095              	.LBI2625:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14096              		.loc 1 716 6 view .LVU3736
 14097              	.LBB2626:
 717:src/xeq.c     **** }
 14098              		.loc 1 717 2 view .LVU3737
 14099              	.LBB2627:
 14100              	.LBI2627:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14101              		.loc 1 931 5 view .LVU3738
 14102              	.LBB2628:
 932:src/xeq.c     **** }
 14103              		.loc 1 932 2 view .LVU3739
 932:src/xeq.c     **** }
 14104              		.loc 1 932 24 is_stmt 0 view .LVU3740
 14105 00d0 3368     		ldr	r3, [r6]
 14106 00d2 B3F8E837 		ldrh	r3, [r3, #2024]
 14107              	.LBE2628:
 14108              	.LBE2627:
 717:src/xeq.c     **** }
 14109              		.loc 1 717 2 view .LVU3741
 14110 00d6 1C40     		ands	r4, r4, r3
 14111 00d8 B4F5804F 		cmp	r4, #16384
 14112 00dc 0BA9     		add	r1, sp, #44
 14113              	.LVL1037:
 717:src/xeq.c     **** }
 14114              		.loc 1 717 2 view .LVU3742
 14115 00de 0CBF     		ite	eq
 14116 00e0 1022     		moveq	r2, #16
 14117 00e2 0822     		movne	r2, #8
 14118 00e4 FFF7FEFF 		bl	xcopy
 14119              	.LVL1038:
 717:src/xeq.c     **** }
 14120              		.loc 1 717 2 view .LVU3743
 14121              	.LBE2626:
 14122              	.LBE2625:
 14123              	.LBE2579:
 14124 00e8 99E7     		b	.L981
 14125              	.LVL1039:
 14126              	.L984:
ARM GAS  /tmp/cciWh9P3.s 			page 406


1654:src/xeq.c     **** 			setXY(&r1, &r2);
 14127              		.loc 1 1654 4 is_stmt 1 view .LVU3744
 14128 00ea FFF7FEFF 		bl	setlastXY
 14129              	.LVL1040:
1655:src/xeq.c     **** 		}
 14130              		.loc 1 1655 4 view .LVU3745
 14131              	.LBB2630:
 14132              	.LBI2630:
 839:src/xeq.c     **** 	setX(x);
 14133              		.loc 1 839 6 view .LVU3746
 14134              	.LBB2631:
 840:src/xeq.c     **** 	setY(y);
 14135              		.loc 1 840 2 view .LVU3747
 14136              	.LBB2632:
 14137              	.LBI2632:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 14138              		.loc 1 808 6 view .LVU3748
 14139              	.LBB2633:
 809:src/xeq.c     **** }
 14140              		.loc 1 809 2 view .LVU3749
 14141 00ee 02A9     		add	r1, sp, #8
 14142              	.LVL1041:
 809:src/xeq.c     **** }
 14143              		.loc 1 809 2 is_stmt 0 view .LVU3750
 14144 00f0 6420     		movs	r0, #100
 14145 00f2 FFF7FEFF 		bl	setRegister
 14146              	.LVL1042:
 809:src/xeq.c     **** }
 14147              		.loc 1 809 2 view .LVU3751
 14148              	.LBE2633:
 14149              	.LBE2632:
 841:src/xeq.c     **** }
 14150              		.loc 1 841 2 is_stmt 1 view .LVU3752
 14151              	.LBB2634:
 14152              	.LBI2634:
 816:src/xeq.c     **** 	setRegister(regY_idx, y);
 14153              		.loc 1 816 6 view .LVU3753
 14154              	.LBB2635:
 817:src/xeq.c     **** }
 14155              		.loc 1 817 2 view .LVU3754
 14156 00f6 0BA9     		add	r1, sp, #44
 14157              	.LVL1043:
 817:src/xeq.c     **** }
 14158              		.loc 1 817 2 is_stmt 0 view .LVU3755
 14159 00f8 6520     		movs	r0, #101
 14160 00fa FFF7FEFF 		bl	setRegister
 14161              	.LVL1044:
 817:src/xeq.c     **** }
 14162              		.loc 1 817 2 view .LVU3756
 14163 00fe 8DE7     		b	.L996
 14164              	.LVL1045:
 14165              	.L998:
 817:src/xeq.c     **** }
 14166              		.loc 1 817 2 view .LVU3757
 14167              	.LBE2635:
 14168              	.LBE2634:
 14169              	.LBE2631:
ARM GAS  /tmp/cciWh9P3.s 			page 407


 14170              	.LBE2630:
 14171              	.LBB2636:
 14172              	.LBB2629:
 14173              	.LBB2603:
 14174              	.LBB2601:
 14175              	.LBB2599:
 739:src/xeq.c     **** }
 14176              		.loc 1 739 3 is_stmt 1 view .LVU3758
 14177 0100 FFF7FEFF 		bl	lift
 14178              	.LVL1046:
 14179 0104 CFE7     		b	.L978
 14180              	.L1000:
 14181 0106 00BF     		.align	2
 14182              	.L999:
 14183 0108 00000000 		.word	main_ram
 14184 010c 00000000 		.word	Error
 14185 0110 00000000 		.word	StateWhileOn
 14186 0114 00000000 		.word	StackBase
 14187              	.LBE2599:
 14188              	.LBE2601:
 14189              	.LBE2603:
 14190              	.LBE2629:
 14191              	.LBE2636:
 14192              	.LBE2639:
 14193              	.LBE2642:
 14194              		.cfi_endproc
 14195              	.LFE119:
 14197              		.section	.text.cmdircl,"ax",%progbits
 14198              		.align	1
 14199              		.p2align 2,,3
 14200              		.global	cmdircl
 14201              		.syntax unified
 14202              		.thumb
 14203              		.thumb_func
 14204              		.fpu fpv4-sp-d16
 14206              	cmdircl:
 14207              	.LVL1047:
 14208              	.LFB120:
1675:src/xeq.c     **** 	if (is_intmode())
 14209              		.loc 1 1675 46 view -0
 14210              		.cfi_startproc
 14211              		@ args = 0, pretend = 0, frame = 0
 14212              		@ frame_needed = 0, uses_anonymous_args = 0
 14213              		@ link register save eliminated.
1676:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14214              		.loc 1 1676 2 view .LVU3760
1676:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14215              		.loc 1 1676 6 is_stmt 0 view .LVU3761
 14216 0000 064B     		ldr	r3, .L1003
 14217 0002 1B68     		ldr	r3, [r3]
 14218 0004 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1676:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14219              		.loc 1 1676 5 view .LVU3762
 14220 0008 12F00102 		ands	r2, r2, #1
1675:src/xeq.c     **** 	if (is_intmode())
 14221              		.loc 1 1675 46 view .LVU3763
 14222 000c 0146     		mov	r1, r0
ARM GAS  /tmp/cciWh9P3.s 			page 408


 14223              	.LVL1048:
1676:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 14224              		.loc 1 1676 5 view .LVU3764
 14225 000e 02D0     		beq	.L1002
1677:src/xeq.c     **** 	else
 14226              		.loc 1 1677 3 is_stmt 1 view .LVU3765
 14227              	.LVL1049:
 14228              	.LBB2643:
 14229              	.LBI2643:
1570:src/xeq.c     **** 	do_rcl(arg, op);
 14230              		.loc 1 1570 6 view .LVU3766
 14231              	.LBB2644:
1571:src/xeq.c     **** }
 14232              		.loc 1 1571 2 view .LVU3767
 14233 0010 0A21     		movs	r1, #10
 14234 0012 FFF7FEBF 		b	do_rcl
 14235              	.LVL1050:
 14236              	.L1002:
1571:src/xeq.c     **** }
 14237              		.loc 1 1571 2 is_stmt 0 view .LVU3768
 14238              	.LBE2644:
 14239              	.LBE2643:
1679:src/xeq.c     **** }
 14240              		.loc 1 1679 3 is_stmt 1 view .LVU3769
 14241 0016 6420     		movs	r0, #100
 14242              	.LVL1051:
1679:src/xeq.c     **** }
 14243              		.loc 1 1679 3 is_stmt 0 view .LVU3770
 14244 0018 FFF7FEBF 		b	register_from_int
 14245              	.LVL1052:
 14246              	.L1004:
1679:src/xeq.c     **** }
 14247              		.loc 1 1679 3 view .LVU3771
 14248              		.align	2
 14249              	.L1003:
 14250 001c 00000000 		.word	main_ram
 14251              		.cfi_endproc
 14252              	.LFE120:
 14254              		.section	.text.cmdrrcl,"ax",%progbits
 14255              		.align	1
 14256              		.p2align 2,,3
 14257              		.global	cmdrrcl
 14258              		.syntax unified
 14259              		.thumb
 14260              		.thumb_func
 14261              		.fpu fpv4-sp-d16
 14263              	cmdrrcl:
 14264              	.LVL1053:
 14265              	.LFB121:
1683:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 14266              		.loc 1 1683 46 is_stmt 1 view -0
 14267              		.cfi_startproc
 14268              		@ args = 0, pretend = 0, frame = 40
 14269              		@ frame_needed = 0, uses_anonymous_args = 0
1684:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14270              		.loc 1 1684 2 view .LVU3773
1683:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
ARM GAS  /tmp/cciWh9P3.s 			page 409


 14271              		.loc 1 1683 46 is_stmt 0 view .LVU3774
 14272 0000 70B5     		push	{r4, r5, r6, lr}
 14273              		.cfi_def_cfa_offset 16
 14274              		.cfi_offset 4, -16
 14275              		.cfi_offset 5, -12
 14276              		.cfi_offset 6, -8
 14277              		.cfi_offset 14, -4
1684:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14278              		.loc 1 1684 22 view .LVU3775
 14279 0002 1F4C     		ldr	r4, .L1012
 14280 0004 2368     		ldr	r3, [r4]
1684:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14281              		.loc 1 1684 28 view .LVU3776
 14282 0006 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1685:src/xeq.c     **** 
 14283              		.loc 1 1685 26 view .LVU3777
 14284 000a 8029     		cmp	r1, #128
1683:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 14285              		.loc 1 1683 46 view .LVU3778
 14286 000c 8AB0     		sub	sp, sp, #40
 14287              		.cfi_def_cfa_offset 56
1684:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 14288              		.loc 1 1684 28 view .LVU3779
 14289 000e C2F38015 		ubfx	r5, r2, #6, #1
 14290              	.LVL1054:
1685:src/xeq.c     **** 
 14291              		.loc 1 1685 2 is_stmt 1 view .LVU3780
1685:src/xeq.c     **** 
 14292              		.loc 1 1685 26 is_stmt 0 view .LVU3781
 14293 0012 0CBF     		ite	eq
 14294 0014 0121     		moveq	r1, #1
 14295              	.LVL1055:
1685:src/xeq.c     **** 
 14296              		.loc 1 1685 26 view .LVU3782
 14297 0016 0021     		movne	r1, #0
 14298              	.LVL1056:
1687:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14299              		.loc 1 1687 2 is_stmt 1 view .LVU3783
1687:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14300              		.loc 1 1687 5 is_stmt 0 view .LVU3784
 14301 0018 26D0     		beq	.L1010
 14302              	.LVL1057:
 14303              	.L1006:
1693:src/xeq.c     **** 	if (is_intmode()) {
 14304              		.loc 1 1693 2 is_stmt 1 view .LVU3785
1693:src/xeq.c     **** 	if (is_intmode()) {
 14305              		.loc 1 1693 21 is_stmt 0 view .LVU3786
 14306 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1694:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14307              		.loc 1 1694 6 view .LVU3787
 14308 001e 93F8E867 		ldrb	r6, [r3, #2024]	@ zero_extendqisi2
1693:src/xeq.c     **** 	if (is_intmode()) {
 14309              		.loc 1 1693 21 view .LVU3788
 14310 0022 61F38612 		bfi	r2, r1, #6, #1
 14311 0026 83F8E927 		strb	r2, [r3, #2025]
 14312              	.LVL1058:
1694:src/xeq.c     **** 		int_from_register(regX_idx, arg);
ARM GAS  /tmp/cciWh9P3.s 			page 410


 14313              		.loc 1 1694 2 is_stmt 1 view .LVU3789
1694:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14314              		.loc 1 1694 5 is_stmt 0 view .LVU3790
 14315 002a F307     		lsls	r3, r6, #31
1695:src/xeq.c     **** 		UState.mode_double = was_dbl;
 14316              		.loc 1 1695 3 view .LVU3791
 14317 002c 0146     		mov	r1, r0
 14318              	.LVL1059:
1694:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 14319              		.loc 1 1694 5 view .LVU3792
 14320 002e 0FD4     		bmi	.L1011
 14321              	.LBB2652:
1699:src/xeq.c     **** 		getRegister(&x, arg);
 14322              		.loc 1 1699 3 is_stmt 1 view .LVU3793
1700:src/xeq.c     **** 
 14323              		.loc 1 1700 3 view .LVU3794
 14324 0030 01A8     		add	r0, sp, #4
 14325              	.LVL1060:
1700:src/xeq.c     **** 
 14326              		.loc 1 1700 3 is_stmt 0 view .LVU3795
 14327 0032 FFF7FEFF 		bl	getRegister
 14328              	.LVL1061:
1702:src/xeq.c     **** 		setX(&x);
 14329              		.loc 1 1702 3 is_stmt 1 view .LVU3796
1702:src/xeq.c     **** 		setX(&x);
 14330              		.loc 1 1702 22 is_stmt 0 view .LVU3797
 14331 0036 2368     		ldr	r3, [r4]
 14332 0038 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 14333 003c 65F38612 		bfi	r2, r5, #6, #1
 14334              	.LBB2653:
 14335              	.LBB2654:
 809:src/xeq.c     **** }
 14336              		.loc 1 809 2 view .LVU3798
 14337 0040 01A9     		add	r1, sp, #4
 14338              	.LBE2654:
 14339              	.LBE2653:
1702:src/xeq.c     **** 		setX(&x);
 14340              		.loc 1 1702 22 view .LVU3799
 14341 0042 83F8E927 		strb	r2, [r3, #2025]
1703:src/xeq.c     **** 	}
 14342              		.loc 1 1703 3 is_stmt 1 view .LVU3800
 14343              	.LVL1062:
 14344              	.LBB2656:
 14345              	.LBI2653:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 14346              		.loc 1 808 6 view .LVU3801
 14347              	.LBB2655:
 809:src/xeq.c     **** }
 14348              		.loc 1 809 2 view .LVU3802
 14349 0046 6420     		movs	r0, #100
 14350 0048 FFF7FEFF 		bl	setRegister
 14351              	.LVL1063:
 14352              	.L1005:
 809:src/xeq.c     **** }
 14353              		.loc 1 809 2 is_stmt 0 view .LVU3803
 14354              	.LBE2655:
 14355              	.LBE2656:
ARM GAS  /tmp/cciWh9P3.s 			page 411


 14356              	.LBE2652:
1705:src/xeq.c     **** 
 14357              		.loc 1 1705 1 view .LVU3804
 14358 004c 0AB0     		add	sp, sp, #40
 14359              		.cfi_remember_state
 14360              		.cfi_def_cfa_offset 16
 14361              		@ sp needed
 14362 004e 70BD     		pop	{r4, r5, r6, pc}
 14363              	.LVL1064:
 14364              	.L1011:
 14365              		.cfi_restore_state
1695:src/xeq.c     **** 		UState.mode_double = was_dbl;
 14366              		.loc 1 1695 3 is_stmt 1 view .LVU3805
 14367 0050 6420     		movs	r0, #100
 14368              	.LVL1065:
1695:src/xeq.c     **** 		UState.mode_double = was_dbl;
 14369              		.loc 1 1695 3 is_stmt 0 view .LVU3806
 14370 0052 FFF7FEFF 		bl	int_from_register
 14371              	.LVL1066:
1696:src/xeq.c     **** 	}
 14372              		.loc 1 1696 3 is_stmt 1 view .LVU3807
1696:src/xeq.c     **** 	}
 14373              		.loc 1 1696 22 is_stmt 0 view .LVU3808
 14374 0056 2368     		ldr	r3, [r4]
 14375 0058 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 14376 005c 65F38612 		bfi	r2, r5, #6, #1
 14377 0060 83F8E927 		strb	r2, [r3, #2025]
1705:src/xeq.c     **** 
 14378              		.loc 1 1705 1 view .LVU3809
 14379 0064 0AB0     		add	sp, sp, #40
 14380              		.cfi_remember_state
 14381              		.cfi_def_cfa_offset 16
 14382              		@ sp needed
 14383 0066 70BD     		pop	{r4, r5, r6, pc}
 14384              	.LVL1067:
 14385              	.L1010:
 14386              		.cfi_restore_state
1687:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14387              		.loc 1 1687 14 discriminator 1 view .LVU3810
 14388 0068 A0F16402 		sub	r2, r0, #100
 14389              	.LVL1068:
1687:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 14390              		.loc 1 1687 14 discriminator 1 view .LVU3811
 14391 006c 0B2A     		cmp	r2, #11
 14392 006e D4D8     		bhi	.L1006
1689:src/xeq.c     **** 		return;
 14393              		.loc 1 1689 3 is_stmt 1 view .LVU3812
 14394              	.LVL1069:
 14395              	.LBB2657:
 14396              	.LBI2657:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14397              		.loc 1 536 5 view .LVU3813
 14398              	.LBB2658:
 537:src/xeq.c     **** 		Error = e;
 14399              		.loc 1 537 2 view .LVU3814
 537:src/xeq.c     **** 		Error = e;
 14400              		.loc 1 537 12 is_stmt 0 view .LVU3815
ARM GAS  /tmp/cciWh9P3.s 			page 412


 14401 0070 044B     		ldr	r3, .L1012+4
 14402              	.LVL1070:
 537:src/xeq.c     **** 		Error = e;
 14403              		.loc 1 537 5 view .LVU3816
 14404 0072 1A68     		ldr	r2, [r3]
 14405 0074 002A     		cmp	r2, #0
 14406 0076 E9D1     		bne	.L1005
 14407              	.LVL1071:
 14408              	.LBB2659:
 14409              	.LBI2659:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14410              		.loc 1 536 5 is_stmt 1 view .LVU3817
 14411              	.LBB2660:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 14412              		.loc 1 538 3 view .LVU3818
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 14413              		.loc 1 538 9 is_stmt 0 view .LVU3819
 14414 0078 0822     		movs	r2, #8
 14415 007a 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 14416              		.loc 1 539 3 is_stmt 1 view .LVU3820
 14417 007c E6E7     		b	.L1005
 14418              	.L1013:
 14419 007e 00BF     		.align	2
 14420              	.L1012:
 14421 0080 00000000 		.word	main_ram
 14422 0084 00000000 		.word	Error
 14423              	.LBE2660:
 14424              	.LBE2659:
 14425              	.LBE2658:
 14426              	.LBE2657:
 14427              		.cfi_endproc
 14428              	.LFE121:
 14430              		.section	.text.swap_reg,"ax",%progbits
 14431              		.align	1
 14432              		.p2align 2,,3
 14433              		.global	swap_reg
 14434              		.syntax unified
 14435              		.thumb
 14436              		.thumb_func
 14437              		.fpu fpv4-sp-d16
 14439              	swap_reg:
 14440              	.LVL1072:
 14441              	.LFB122:
1710:src/xeq.c     **** 	REGISTER t;
 14442              		.loc 1 1710 41 view -0
 14443              		.cfi_startproc
 14444              		@ args = 0, pretend = 0, frame = 16
 14445              		@ frame_needed = 0, uses_anonymous_args = 0
1711:src/xeq.c     **** 
 14446              		.loc 1 1711 2 view .LVU3822
1713:src/xeq.c     **** 	copyreg(a, b);
 14447              		.loc 1 1713 2 view .LVU3823
1710:src/xeq.c     **** 	REGISTER t;
 14448              		.loc 1 1710 41 is_stmt 0 view .LVU3824
 14449 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 14450              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/cciWh9P3.s 			page 413


 14451              		.cfi_offset 4, -20
 14452              		.cfi_offset 5, -16
 14453              		.cfi_offset 6, -12
 14454              		.cfi_offset 7, -8
 14455              		.cfi_offset 14, -4
 14456              	.LBB2661:
 14457              	.LBB2662:
 14458              	.LBB2663:
 14459              	.LBB2664:
 932:src/xeq.c     **** }
 14460              		.loc 1 932 24 view .LVU3825
 14461 0002 174F     		ldr	r7, .L1022
 14462 0004 3B68     		ldr	r3, [r7]
 14463 0006 B3F8E837 		ldrh	r3, [r3, #2024]
 14464 000a 44F20104 		movw	r4, #16385
 14465              	.LBE2664:
 14466              	.LBE2663:
 717:src/xeq.c     **** }
 14467              		.loc 1 717 2 view .LVU3826
 14468 000e 2340     		ands	r3, r3, r4
 14469              	.LBE2662:
 14470              	.LBE2661:
1710:src/xeq.c     **** 	REGISTER t;
 14471              		.loc 1 1710 41 view .LVU3827
 14472 0010 85B0     		sub	sp, sp, #20
 14473              		.cfi_def_cfa_offset 40
 14474              	.LVL1073:
 14475              	.LBB2669:
 14476              	.LBB2667:
 717:src/xeq.c     **** }
 14477              		.loc 1 717 2 view .LVU3828
 14478 0012 B3F5804F 		cmp	r3, #16384
 14479 0016 0CBF     		ite	eq
 14480 0018 1022     		moveq	r2, #16
 14481 001a 0822     		movne	r2, #8
 14482              	.LBE2667:
 14483              	.LBE2669:
1710:src/xeq.c     **** 	REGISTER t;
 14484              		.loc 1 1710 41 view .LVU3829
 14485 001c 0D46     		mov	r5, r1
 14486 001e 0646     		mov	r6, r0
 14487              	.LVL1074:
 14488              	.LBB2670:
 14489              	.LBI2661:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14490              		.loc 1 716 6 is_stmt 1 view .LVU3830
 14491              	.LBB2668:
 717:src/xeq.c     **** }
 14492              		.loc 1 717 2 view .LVU3831
 14493              	.LBB2666:
 14494              	.LBI2663:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14495              		.loc 1 931 5 view .LVU3832
 14496              	.LBB2665:
 932:src/xeq.c     **** }
 14497              		.loc 1 932 2 view .LVU3833
 14498              	.LBE2665:
ARM GAS  /tmp/cciWh9P3.s 			page 414


 14499              	.LBE2666:
 717:src/xeq.c     **** }
 14500              		.loc 1 717 2 is_stmt 0 view .LVU3834
 14501 0020 0146     		mov	r1, r0
 14502              	.LVL1075:
 717:src/xeq.c     **** }
 14503              		.loc 1 717 2 view .LVU3835
 14504 0022 6846     		mov	r0, sp
 14505              	.LVL1076:
 717:src/xeq.c     **** }
 14506              		.loc 1 717 2 view .LVU3836
 14507 0024 FFF7FEFF 		bl	xcopy
 14508              	.LVL1077:
 717:src/xeq.c     **** }
 14509              		.loc 1 717 2 view .LVU3837
 14510              	.LBE2668:
 14511              	.LBE2670:
1714:src/xeq.c     **** 	copyreg(b, &t);
 14512              		.loc 1 1714 2 is_stmt 1 view .LVU3838
 14513              	.LBB2671:
 14514              	.LBI2671:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14515              		.loc 1 716 6 view .LVU3839
 14516              	.LBB2672:
 717:src/xeq.c     **** }
 14517              		.loc 1 717 2 view .LVU3840
 14518              	.LBB2673:
 14519              	.LBI2673:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14520              		.loc 1 931 5 view .LVU3841
 14521              	.LBB2674:
 932:src/xeq.c     **** }
 14522              		.loc 1 932 2 view .LVU3842
 932:src/xeq.c     **** }
 14523              		.loc 1 932 24 is_stmt 0 view .LVU3843
 14524 0028 3B68     		ldr	r3, [r7]
 14525 002a B3F8E837 		ldrh	r3, [r3, #2024]
 14526              	.LBE2674:
 14527              	.LBE2673:
 717:src/xeq.c     **** }
 14528              		.loc 1 717 2 view .LVU3844
 14529 002e 2340     		ands	r3, r3, r4
 14530 0030 B3F5804F 		cmp	r3, #16384
 14531 0034 0CBF     		ite	eq
 14532 0036 1022     		moveq	r2, #16
 14533 0038 0822     		movne	r2, #8
 14534 003a 2946     		mov	r1, r5
 14535 003c 3046     		mov	r0, r6
 14536 003e FFF7FEFF 		bl	xcopy
 14537              	.LVL1078:
 717:src/xeq.c     **** }
 14538              		.loc 1 717 2 view .LVU3845
 14539              	.LBE2672:
 14540              	.LBE2671:
1715:src/xeq.c     **** }
 14541              		.loc 1 1715 2 is_stmt 1 view .LVU3846
 14542              	.LBB2675:
ARM GAS  /tmp/cciWh9P3.s 			page 415


 14543              	.LBI2675:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14544              		.loc 1 716 6 view .LVU3847
 14545              	.LBB2676:
 717:src/xeq.c     **** }
 14546              		.loc 1 717 2 view .LVU3848
 14547              	.LBB2677:
 14548              	.LBI2677:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14549              		.loc 1 931 5 view .LVU3849
 14550              	.LBB2678:
 932:src/xeq.c     **** }
 14551              		.loc 1 932 2 view .LVU3850
 932:src/xeq.c     **** }
 14552              		.loc 1 932 24 is_stmt 0 view .LVU3851
 14553 0042 3B68     		ldr	r3, [r7]
 14554 0044 B3F8E837 		ldrh	r3, [r3, #2024]
 14555              	.LBE2678:
 14556              	.LBE2677:
 717:src/xeq.c     **** }
 14557              		.loc 1 717 2 view .LVU3852
 14558 0048 1C40     		ands	r4, r4, r3
 14559 004a B4F5804F 		cmp	r4, #16384
 14560 004e 2846     		mov	r0, r5
 14561 0050 6946     		mov	r1, sp
 14562 0052 0CBF     		ite	eq
 14563 0054 1022     		moveq	r2, #16
 14564 0056 0822     		movne	r2, #8
 14565 0058 FFF7FEFF 		bl	xcopy
 14566              	.LVL1079:
 717:src/xeq.c     **** }
 14567              		.loc 1 717 2 view .LVU3853
 14568              	.LBE2676:
 14569              	.LBE2675:
1716:src/xeq.c     **** 
 14570              		.loc 1 1716 1 view .LVU3854
 14571 005c 05B0     		add	sp, sp, #20
 14572              		.cfi_def_cfa_offset 20
 14573              		@ sp needed
 14574 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 14575              	.LVL1080:
 14576              	.L1023:
1716:src/xeq.c     **** 
 14577              		.loc 1 1716 1 view .LVU3855
 14578              		.align	2
 14579              	.L1022:
 14580 0060 00000000 		.word	main_ram
 14581              		.cfi_endproc
 14582              	.LFE122:
 14584              		.section	.text.cmdswap,"ax",%progbits
 14585              		.align	1
 14586              		.p2align 2,,3
 14587              		.global	cmdswap
 14588              		.syntax unified
 14589              		.thumb
 14590              		.thumb_func
 14591              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cciWh9P3.s 			page 416


 14593              	cmdswap:
 14594              	.LVL1081:
 14595              	.LFB123:
1718:src/xeq.c     **** 	int idx;
 14596              		.loc 1 1718 46 is_stmt 1 view -0
 14597              		.cfi_startproc
 14598              		@ args = 0, pretend = 0, frame = 0
 14599              		@ frame_needed = 0, uses_anonymous_args = 0
1719:src/xeq.c     **** 
 14600              		.loc 1 1719 2 view .LVU3857
1721:src/xeq.c     **** 		idx = regX_idx;
 14601              		.loc 1 1721 2 view .LVU3858
1721:src/xeq.c     **** 		idx = regX_idx;
 14602              		.loc 1 1721 5 is_stmt 0 view .LVU3859
 14603 0000 1F29     		cmp	r1, #31
1718:src/xeq.c     **** 	int idx;
 14604              		.loc 1 1718 46 view .LVU3860
 14605 0002 70B5     		push	{r4, r5, r6, lr}
 14606              		.cfi_def_cfa_offset 16
 14607              		.cfi_offset 4, -16
 14608              		.cfi_offset 5, -12
 14609              		.cfi_offset 6, -8
 14610              		.cfi_offset 14, -4
1718:src/xeq.c     **** 	int idx;
 14611              		.loc 1 1718 46 view .LVU3861
 14612 0004 0546     		mov	r5, r0
1721:src/xeq.c     **** 		idx = regX_idx;
 14613              		.loc 1 1721 5 view .LVU3862
 14614 0006 11D0     		beq	.L1025
1723:src/xeq.c     **** 		idx = regZ_idx;
 14615              		.loc 1 1723 10 view .LVU3863
 14616 0008 2029     		cmp	r1, #32
 14617 000a 0C46     		mov	r4, r1
1723:src/xeq.c     **** 		idx = regZ_idx;
 14618              		.loc 1 1723 7 is_stmt 1 view .LVU3864
1723:src/xeq.c     **** 		idx = regZ_idx;
 14619              		.loc 1 1723 10 is_stmt 0 view .LVU3865
 14620 000c 2BD0     		beq	.L1026
1726:src/xeq.c     **** 
 14621              		.loc 1 1726 3 is_stmt 1 view .LVU3866
 14622              	.LVL1082:
1728:src/xeq.c     **** 
 14623              		.loc 1 1728 2 view .LVU3867
 14624 000e 01F15300 		add	r0, r1, #83
 14625              	.LVL1083:
1728:src/xeq.c     **** 
 14626              		.loc 1 1728 2 is_stmt 0 view .LVU3868
 14627 0012 FFF7FEFF 		bl	get_reg_n
 14628              	.LVL1084:
1728:src/xeq.c     **** 
 14629              		.loc 1 1728 2 view .LVU3869
 14630 0016 0646     		mov	r6, r0
 14631 0018 2846     		mov	r0, r5
 14632 001a FFF7FEFF 		bl	get_reg_n
 14633              	.LVL1085:
 14634 001e 0146     		mov	r1, r0
 14635 0020 3046     		mov	r0, r6
ARM GAS  /tmp/cciWh9P3.s 			page 417


 14636 0022 FFF7FEFF 		bl	swap_reg
 14637              	.LVL1086:
1730:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14638              		.loc 1 1730 2 is_stmt 1 view .LVU3870
1730:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14639              		.loc 1 1730 5 is_stmt 0 view .LVU3871
 14640 0026 1E2C     		cmp	r4, #30
 14641 0028 2AD8     		bhi	.L1030
1734:src/xeq.c     **** 
 14642              		.loc 1 1734 1 view .LVU3872
 14643 002a 70BD     		pop	{r4, r5, r6, pc}
 14644              	.LVL1087:
 14645              	.L1025:
1728:src/xeq.c     **** 
 14646              		.loc 1 1728 2 is_stmt 1 view .LVU3873
 14647 002c 6420     		movs	r0, #100
 14648              	.LVL1088:
1728:src/xeq.c     **** 
 14649              		.loc 1 1728 2 is_stmt 0 view .LVU3874
 14650 002e FFF7FEFF 		bl	get_reg_n
 14651              	.LVL1089:
1728:src/xeq.c     **** 
 14652              		.loc 1 1728 2 view .LVU3875
 14653 0032 0446     		mov	r4, r0
 14654 0034 2846     		mov	r0, r5
 14655 0036 FFF7FEFF 		bl	get_reg_n
 14656              	.LVL1090:
 14657 003a 0146     		mov	r1, r0
 14658 003c 2046     		mov	r0, r4
 14659 003e FFF7FEFF 		bl	swap_reg
 14660              	.LVL1091:
1730:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14661              		.loc 1 1730 2 is_stmt 1 view .LVU3876
1728:src/xeq.c     **** 
 14662              		.loc 1 1728 2 is_stmt 0 view .LVU3877
 14663 0042 6520     		movs	r0, #101
 14664              	.LVL1092:
 14665              	.L1028:
1731:src/xeq.c     **** 		set_was_complex();
 14666              		.loc 1 1731 3 is_stmt 1 view .LVU3878
 14667 0044 FFF7FEFF 		bl	get_reg_n
 14668              	.LVL1093:
 14669 0048 0446     		mov	r4, r0
 14670 004a 681C     		adds	r0, r5, #1
 14671 004c FFF7FEFF 		bl	get_reg_n
 14672              	.LVL1094:
 14673 0050 0146     		mov	r1, r0
 14674 0052 2046     		mov	r0, r4
 14675 0054 FFF7FEFF 		bl	swap_reg
 14676              	.LVL1095:
1732:src/xeq.c     **** 	}
 14677              		.loc 1 1732 3 view .LVU3879
 14678              	.LBB2679:
 14679              	.LBI2679:
 529:src/xeq.c     **** 	State2.wascomplex = 1;
 14680              		.loc 1 529 13 view .LVU3880
 14681              	.LBB2680:
ARM GAS  /tmp/cciWh9P3.s 			page 418


 530:src/xeq.c     **** }
 14682              		.loc 1 530 2 view .LVU3881
 530:src/xeq.c     **** }
 14683              		.loc 1 530 20 is_stmt 0 view .LVU3882
 14684 0058 0B4B     		ldr	r3, .L1031
 14685 005a 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14686 005c 0121     		movs	r1, #1
 14687 005e 61F38712 		bfi	r2, r1, #6, #2
 14688 0062 1A75     		strb	r2, [r3, #20]
 14689              	.LBE2680:
 14690              	.LBE2679:
1734:src/xeq.c     **** 
 14691              		.loc 1 1734 1 view .LVU3883
 14692 0064 70BD     		pop	{r4, r5, r6, pc}
 14693              	.LVL1096:
 14694              	.L1026:
1728:src/xeq.c     **** 
 14695              		.loc 1 1728 2 is_stmt 1 view .LVU3884
 14696 0066 6620     		movs	r0, #102
 14697              	.LVL1097:
1728:src/xeq.c     **** 
 14698              		.loc 1 1728 2 is_stmt 0 view .LVU3885
 14699 0068 FFF7FEFF 		bl	get_reg_n
 14700              	.LVL1098:
1728:src/xeq.c     **** 
 14701              		.loc 1 1728 2 view .LVU3886
 14702 006c 0446     		mov	r4, r0
 14703 006e 2846     		mov	r0, r5
 14704 0070 FFF7FEFF 		bl	get_reg_n
 14705              	.LVL1099:
 14706 0074 0146     		mov	r1, r0
 14707 0076 2046     		mov	r0, r4
 14708 0078 FFF7FEFF 		bl	swap_reg
 14709              	.LVL1100:
1730:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 14710              		.loc 1 1730 2 is_stmt 1 view .LVU3887
1728:src/xeq.c     **** 
 14711              		.loc 1 1728 2 is_stmt 0 view .LVU3888
 14712 007c 6720     		movs	r0, #103
 14713 007e E1E7     		b	.L1028
 14714              	.LVL1101:
 14715              	.L1030:
1728:src/xeq.c     **** 
 14716              		.loc 1 1728 2 view .LVU3889
 14717 0080 04F15400 		add	r0, r4, #84
 14718 0084 DEE7     		b	.L1028
 14719              	.L1032:
 14720 0086 00BF     		.align	2
 14721              	.L1031:
 14722 0088 00000000 		.word	StateWhileOn
 14723              		.cfi_endproc
 14724              	.LFE123:
 14726              		.section	.text.cmdview,"ax",%progbits
 14727              		.align	1
 14728              		.p2align 2,,3
 14729              		.global	cmdview
 14730              		.syntax unified
ARM GAS  /tmp/cciWh9P3.s 			page 419


 14731              		.thumb
 14732              		.thumb_func
 14733              		.fpu fpv4-sp-d16
 14735              	cmdview:
 14736              	.LVL1102:
 14737              	.LFB124:
1739:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14738              		.loc 1 1739 46 is_stmt 1 view -0
 14739              		.cfi_startproc
 14740              		@ args = 0, pretend = 0, frame = 0
 14741              		@ frame_needed = 0, uses_anonymous_args = 0
1740:src/xeq.c     **** 
 14742              		.loc 1 1740 2 view .LVU3891
1739:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14743              		.loc 1 1739 46 is_stmt 0 view .LVU3892
 14744 0000 70B5     		push	{r4, r5, r6, lr}
 14745              		.cfi_def_cfa_offset 16
 14746              		.cfi_offset 4, -16
 14747              		.cfi_offset 5, -12
 14748              		.cfi_offset 6, -8
 14749              		.cfi_offset 14, -4
1742:src/xeq.c     **** 	ShowRegister = arg;
 14750              		.loc 1 1742 20 view .LVU3893
 14751 0002 134D     		ldr	r5, .L1039
1743:src/xeq.c     **** 	State2.disp_freeze = 0;
 14752              		.loc 1 1743 15 view .LVU3894
 14753 0004 134A     		ldr	r2, .L1039+4
1742:src/xeq.c     **** 	ShowRegister = arg;
 14754              		.loc 1 1742 20 view .LVU3895
 14755 0006 6B69     		ldr	r3, [r5, #20]
1743:src/xeq.c     **** 	State2.disp_freeze = 0;
 14756              		.loc 1 1743 15 view .LVU3896
 14757 0008 1060     		str	r0, [r2]
1739:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14758              		.loc 1 1739 46 view .LVU3897
 14759 000a 0E46     		mov	r6, r1
 14760              	.LVL1103:
1742:src/xeq.c     **** 	ShowRegister = arg;
 14761              		.loc 1 1742 2 is_stmt 1 view .LVU3898
1743:src/xeq.c     **** 	State2.disp_freeze = 0;
 14762              		.loc 1 1743 2 view .LVU3899
1744:src/xeq.c     **** 	display();
 14763              		.loc 1 1744 2 view .LVU3900
1740:src/xeq.c     **** 
 14764              		.loc 1 1740 41 is_stmt 0 view .LVU3901
 14765 000c A1F19B01 		sub	r1, #155
 14766              	.LVL1104:
1742:src/xeq.c     **** 	ShowRegister = arg;
 14767              		.loc 1 1742 20 view .LVU3902
 14768 0010 23F08053 		bic	r3, r3, #268435456
1740:src/xeq.c     **** 
 14769              		.loc 1 1740 41 view .LVU3903
 14770 0014 B1FA81F1 		clz	r1, r1
 14771 0018 4909     		lsrs	r1, r1, #5
1742:src/xeq.c     **** 	ShowRegister = arg;
 14772              		.loc 1 1742 20 view .LVU3904
 14773 001a 23F0C003 		bic	r3, r3, #192
ARM GAS  /tmp/cciWh9P3.s 			page 420


 14774 001e 43EA8113 		orr	r3, r3, r1, lsl #6
1739:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 14775              		.loc 1 1739 46 view .LVU3905
 14776 0022 0446     		mov	r4, r0
1742:src/xeq.c     **** 	ShowRegister = arg;
 14777              		.loc 1 1742 20 view .LVU3906
 14778 0024 6B61     		str	r3, [r5, #20]
1745:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
 14779              		.loc 1 1745 2 is_stmt 1 view .LVU3907
 14780 0026 FFF7FEFF 		bl	display
 14781              	.LVL1105:
1746:src/xeq.c     **** }
 14782              		.loc 1 1746 2 view .LVU3908
1746:src/xeq.c     **** }
 14783              		.loc 1 1746 40 is_stmt 0 view .LVU3909
 14784 002a 9B2E     		cmp	r6, #155
 14785 002c 02D0     		beq	.L1036
1746:src/xeq.c     **** }
 14786              		.loc 1 1746 29 discriminator 2 view .LVU3910
 14787 002e 0A4B     		ldr	r3, .L1039+8
 14788 0030 1B68     		ldr	r3, [r3]
 14789 0032 2BB1     		cbz	r3, .L1038
 14790              	.L1036:
1746:src/xeq.c     **** }
 14791              		.loc 1 1746 21 view .LVU3911
 14792 0034 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 14793 0036 0124     		movs	r4, #1
 14794              	.LVL1106:
1746:src/xeq.c     **** }
 14795              		.loc 1 1746 21 view .LVU3912
 14796 0038 64F30413 		bfi	r3, r4, #4, #1
 14797 003c EB75     		strb	r3, [r5, #23]
1747:src/xeq.c     **** 
 14798              		.loc 1 1747 1 view .LVU3913
 14799 003e 70BD     		pop	{r4, r5, r6, pc}
 14800              	.LVL1107:
 14801              	.L1038:
1746:src/xeq.c     **** }
 14802              		.loc 1 1746 21 discriminator 4 view .LVU3914
 14803 0040 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
1746:src/xeq.c     **** }
 14804              		.loc 1 1746 40 discriminator 4 view .LVU3915
 14805 0042 643C     		subs	r4, r4, #100
 14806              	.LVL1108:
1746:src/xeq.c     **** }
 14807              		.loc 1 1746 40 discriminator 4 view .LVU3916
 14808 0044 18BF     		it	ne
 14809 0046 0124     		movne	r4, #1
 14810              	.LVL1109:
1746:src/xeq.c     **** }
 14811              		.loc 1 1746 21 discriminator 4 view .LVU3917
 14812 0048 64F30413 		bfi	r3, r4, #4, #1
 14813 004c EB75     		strb	r3, [r5, #23]
1747:src/xeq.c     **** 
 14814              		.loc 1 1747 1 discriminator 4 view .LVU3918
 14815 004e 70BD     		pop	{r4, r5, r6, pc}
 14816              	.L1040:
ARM GAS  /tmp/cciWh9P3.s 			page 421


 14817              		.align	2
 14818              	.L1039:
 14819 0050 00000000 		.word	StateWhileOn
 14820 0054 00000000 		.word	ShowRegister
 14821 0058 00000000 		.word	Running
 14822              		.cfi_endproc
 14823              	.LFE124:
 14825              		.section	.text.get_stack_size,"ax",%progbits
 14826              		.align	1
 14827              		.p2align 2,,3
 14828              		.global	get_stack_size
 14829              		.syntax unified
 14830              		.thumb
 14831              		.thumb_func
 14832              		.fpu fpv4-sp-d16
 14834              	get_stack_size:
 14835              	.LVL1110:
 14836              	.LFB125:
1751:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 14837              		.loc 1 1751 36 is_stmt 1 view -0
 14838              		.cfi_startproc
 14839              		@ args = 0, pretend = 0, frame = 0
 14840              		@ frame_needed = 0, uses_anonymous_args = 0
1752:src/xeq.c     **** }
 14841              		.loc 1 1752 2 view .LVU3920
 14842              	.LBB2681:
 14843              	.LBI2681:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 14844              		.loc 1 702 5 view .LVU3921
 14845              	.LBB2682:
 703:src/xeq.c     **** 		return 4;
 14846              		.loc 1 703 2 view .LVU3922
 703:src/xeq.c     **** 		return 4;
 14847              		.loc 1 703 8 is_stmt 0 view .LVU3923
 14848 0000 0F4B     		ldr	r3, .L1048
 14849              	.LBE2682:
 14850              	.LBE2681:
1751:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 14851              		.loc 1 1751 36 view .LVU3924
 14852 0002 00B5     		push	{lr}
 14853              		.cfi_def_cfa_offset 4
 14854              		.cfi_offset 14, -4
 14855              	.LBB2688:
 14856              	.LBB2685:
 703:src/xeq.c     **** 		return 4;
 14857              		.loc 1 703 8 view .LVU3925
 14858 0004 1B68     		ldr	r3, [r3]
 703:src/xeq.c     **** 		return 4;
 14859              		.loc 1 703 6 view .LVU3926
 14860 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 14861              		.loc 1 703 5 view .LVU3927
 14862 000a 1207     		lsls	r2, r2, #28
 14863              	.LBE2685:
 14864              	.LBE2688:
1751:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 14865              		.loc 1 1751 36 view .LVU3928
ARM GAS  /tmp/cciWh9P3.s 			page 422


 14866 000c 83B0     		sub	sp, sp, #12
 14867              		.cfi_def_cfa_offset 16
 14868              	.LBB2689:
 14869              	.LBB2686:
 703:src/xeq.c     **** 		return 4;
 14870              		.loc 1 703 5 view .LVU3929
 14871 000e 13D5     		bpl	.L1043
 14872              	.LBB2683:
 14873              	.LBI2683:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 14874              		.loc 1 181 5 is_stmt 1 view .LVU3930
 14875              	.LBB2684:
 182:src/xeq.c     **** }
 14876              		.loc 1 182 2 view .LVU3931
 182:src/xeq.c     **** }
 14877              		.loc 1 182 9 is_stmt 0 view .LVU3932
 14878 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 14879              	.LBE2684:
 14880              	.LBE2683:
 703:src/xeq.c     **** 		return 4;
 14881              		.loc 1 703 27 view .LVU3933
 14882 0014 9B0B     		lsrs	r3, r3, #14
 14883 0016 032B     		cmp	r3, #3
 14884 0018 09D0     		beq	.L1047
 14885              	.L1045:
 14886 001a 0822     		movs	r2, #8
 14887 001c 0023     		movs	r3, #0
 14888              	.L1042:
 14889              	.LVL1111:
 703:src/xeq.c     **** 		return 4;
 14890              		.loc 1 703 27 view .LVU3934
 14891              	.LBE2686:
 14892              	.LBE2689:
 14893              	.LBB2690:
 14894              	.LBI2690:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14895              		.loc 1 1322 6 is_stmt 1 view .LVU3935
 14896              	.LBB2691:
1323:src/xeq.c     **** }
 14897              		.loc 1 1323 2 view .LVU3936
 14898 001e 0021     		movs	r1, #0
 14899 0020 0091     		str	r1, [sp]
 14900 0022 6420     		movs	r0, #100
 14901              	.LVL1112:
1323:src/xeq.c     **** }
 14902              		.loc 1 1323 2 is_stmt 0 view .LVU3937
 14903 0024 FFF7FEFF 		bl	set_reg_n_int_sgn
 14904              	.LVL1113:
1323:src/xeq.c     **** }
 14905              		.loc 1 1323 2 view .LVU3938
 14906              	.LBE2691:
 14907              	.LBE2690:
1753:src/xeq.c     **** 
 14908              		.loc 1 1753 1 view .LVU3939
 14909 0028 03B0     		add	sp, sp, #12
 14910              		.cfi_remember_state
 14911              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/cciWh9P3.s 			page 423


 14912              		@ sp needed
 14913 002a 5DF804FB 		ldr	pc, [sp], #4
 14914              	.LVL1114:
 14915              	.L1047:
 14916              		.cfi_restore_state
 14917              	.LBB2692:
 14918              	.LBB2687:
 703:src/xeq.c     **** 		return 4;
 14919              		.loc 1 703 44 view .LVU3940
 14920 002e 054B     		ldr	r3, .L1048+4
 703:src/xeq.c     **** 		return 4;
 14921              		.loc 1 703 41 view .LVU3941
 14922 0030 93F90130 		ldrsb	r3, [r3, #1]
 14923 0034 002B     		cmp	r3, #0
 14924 0036 F0DB     		blt	.L1045
 14925              	.L1043:
 14926 0038 0422     		movs	r2, #4
 14927 003a 0023     		movs	r3, #0
 14928 003c EFE7     		b	.L1042
 14929              	.L1049:
 14930 003e 00BF     		.align	2
 14931              	.L1048:
 14932 0040 00000000 		.word	main_ram
 14933 0044 00000000 		.word	XromParams
 14934              	.LBE2687:
 14935              	.LBE2692:
 14936              		.cfi_endproc
 14937              	.LFE125:
 14939              		.section	.text.get_word_size,"ax",%progbits
 14940              		.align	1
 14941              		.p2align 2,,3
 14942              		.global	get_word_size
 14943              		.syntax unified
 14944              		.thumb
 14945              		.thumb_func
 14946              		.fpu fpv4-sp-d16
 14948              	get_word_size:
 14949              	.LVL1115:
 14950              	.LFB126:
1755:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 14951              		.loc 1 1755 35 is_stmt 1 view -0
 14952              		.cfi_startproc
 14953              		@ args = 0, pretend = 0, frame = 0
 14954              		@ frame_needed = 0, uses_anonymous_args = 0
1756:src/xeq.c     **** }
 14955              		.loc 1 1756 2 view .LVU3943
1755:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 14956              		.loc 1 1755 35 is_stmt 0 view .LVU3944
 14957 0000 00B5     		push	{lr}
 14958              		.cfi_def_cfa_offset 4
 14959              		.cfi_offset 14, -4
 14960 0002 83B0     		sub	sp, sp, #12
 14961              		.cfi_def_cfa_offset 16
1756:src/xeq.c     **** }
 14962              		.loc 1 1756 20 view .LVU3945
 14963 0004 FFF7FEFF 		bl	word_size
 14964              	.LVL1116:
ARM GAS  /tmp/cciWh9P3.s 			page 424


 14965              	.LBB2693:
 14966              	.LBI2693:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14967              		.loc 1 1322 6 is_stmt 1 view .LVU3946
 14968              	.LBB2694:
1323:src/xeq.c     **** }
 14969              		.loc 1 1323 2 view .LVU3947
 14970 0008 0021     		movs	r1, #0
 14971 000a 0246     		mov	r2, r0
 14972 000c C317     		asrs	r3, r0, #31
 14973 000e 0091     		str	r1, [sp]
 14974 0010 6420     		movs	r0, #100
 14975              	.LVL1117:
1323:src/xeq.c     **** }
 14976              		.loc 1 1323 2 is_stmt 0 view .LVU3948
 14977 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 14978              	.LVL1118:
1323:src/xeq.c     **** }
 14979              		.loc 1 1323 2 view .LVU3949
 14980              	.LBE2694:
 14981              	.LBE2693:
1757:src/xeq.c     **** 
 14982              		.loc 1 1757 1 view .LVU3950
 14983 0016 03B0     		add	sp, sp, #12
 14984              		.cfi_def_cfa_offset 4
 14985              		@ sp needed
 14986 0018 5DF804FB 		ldr	pc, [sp], #4
 14987              		.cfi_endproc
 14988              	.LFE126:
 14990              		.section	.text.get_sign_mode,"ax",%progbits
 14991              		.align	1
 14992              		.p2align 2,,3
 14993              		.global	get_sign_mode
 14994              		.syntax unified
 14995              		.thumb
 14996              		.thumb_func
 14997              		.fpu fpv4-sp-d16
 14999              	get_sign_mode:
 15000              	.LVL1119:
 15001              	.LFB127:
1759:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15002              		.loc 1 1759 35 is_stmt 1 view -0
 15003              		.cfi_startproc
 15004              		@ args = 0, pretend = 0, frame = 0
 15005              		@ frame_needed = 0, uses_anonymous_args = 0
1760:src/xeq.c     **** 		0x02,		// 2's complement
 15006              		.loc 1 1760 2 view .LVU3952
1766:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15007              		.loc 1 1766 2 view .LVU3953
1759:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15008              		.loc 1 1759 35 is_stmt 0 view .LVU3954
 15009 0000 00B5     		push	{lr}
 15010              		.cfi_def_cfa_offset 4
 15011              		.cfi_offset 14, -4
 15012 0002 83B0     		sub	sp, sp, #12
 15013              		.cfi_def_cfa_offset 16
1766:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
ARM GAS  /tmp/cciWh9P3.s 			page 425


 15014              		.loc 1 1766 37 view .LVU3955
 15015 0004 FFF7FEFF 		bl	int_mode
 15016              	.LVL1120:
1766:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15017              		.loc 1 1766 22 view .LVU3956
 15018 0008 064B     		ldr	r3, .L1054
 15019 000a 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 15020              	.LVL1121:
1767:src/xeq.c     **** }
 15021              		.loc 1 1767 2 is_stmt 1 view .LVU3957
 15022              	.LBB2695:
 15023              	.LBI2695:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15024              		.loc 1 1322 6 view .LVU3958
 15025              	.LBB2696:
1323:src/xeq.c     **** }
 15026              		.loc 1 1323 2 view .LVU3959
 15027              	.LBE2696:
 15028              	.LBE2695:
1767:src/xeq.c     **** }
 15029              		.loc 1 1767 2 is_stmt 0 view .LVU3960
 15030 000c 03F00302 		and	r2, r3, #3
 15031 0010 03F08003 		and	r3, r3, #128
 15032              	.LVL1122:
1767:src/xeq.c     **** }
 15033              		.loc 1 1767 2 view .LVU3961
 15034 0014 0093     		str	r3, [sp]
 15035              	.LBB2698:
 15036              	.LBB2697:
1323:src/xeq.c     **** }
 15037              		.loc 1 1323 2 view .LVU3962
 15038 0016 6420     		movs	r0, #100
 15039              	.LVL1123:
1323:src/xeq.c     **** }
 15040              		.loc 1 1323 2 view .LVU3963
 15041 0018 0023     		movs	r3, #0
 15042 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 15043              	.LVL1124:
1323:src/xeq.c     **** }
 15044              		.loc 1 1323 2 view .LVU3964
 15045              	.LBE2697:
 15046              	.LBE2698:
1768:src/xeq.c     **** 
 15047              		.loc 1 1768 1 view .LVU3965
 15048 001e 03B0     		add	sp, sp, #12
 15049              		.cfi_def_cfa_offset 4
 15050              		@ sp needed
 15051 0020 5DF804FB 		ldr	pc, [sp], #4
 15052              	.L1055:
 15053              		.align	2
 15054              	.L1054:
 15055 0024 00000000 		.word	.LANCHOR4
 15056              		.cfi_endproc
 15057              	.LFE127:
 15059              		.section	.text.get_base,"ax",%progbits
 15060              		.align	1
 15061              		.p2align 2,,3
ARM GAS  /tmp/cciWh9P3.s 			page 426


 15062              		.global	get_base
 15063              		.syntax unified
 15064              		.thumb
 15065              		.thumb_func
 15066              		.fpu fpv4-sp-d16
 15068              	get_base:
 15069              	.LVL1125:
 15070              	.LFB128:
1770:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 15071              		.loc 1 1770 30 is_stmt 1 view -0
 15072              		.cfi_startproc
 15073              		@ args = 0, pretend = 0, frame = 0
 15074              		@ frame_needed = 0, uses_anonymous_args = 0
1771:src/xeq.c     **** }
 15075              		.loc 1 1771 2 view .LVU3967
1770:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 15076              		.loc 1 1770 30 is_stmt 0 view .LVU3968
 15077 0000 00B5     		push	{lr}
 15078              		.cfi_def_cfa_offset 4
 15079              		.cfi_offset 14, -4
 15080 0002 83B0     		sub	sp, sp, #12
 15081              		.cfi_def_cfa_offset 16
1771:src/xeq.c     **** }
 15082              		.loc 1 1771 20 view .LVU3969
 15083 0004 FFF7FEFF 		bl	int_base
 15084              	.LVL1126:
 15085              	.LBB2699:
 15086              	.LBI2699:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15087              		.loc 1 1322 6 is_stmt 1 view .LVU3970
 15088              	.LBB2700:
1323:src/xeq.c     **** }
 15089              		.loc 1 1323 2 view .LVU3971
 15090 0008 0021     		movs	r1, #0
 15091 000a 0246     		mov	r2, r0
 15092 000c C317     		asrs	r3, r0, #31
 15093 000e 0091     		str	r1, [sp]
 15094 0010 6420     		movs	r0, #100
 15095              	.LVL1127:
1323:src/xeq.c     **** }
 15096              		.loc 1 1323 2 is_stmt 0 view .LVU3972
 15097 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 15098              	.LVL1128:
1323:src/xeq.c     **** }
 15099              		.loc 1 1323 2 view .LVU3973
 15100              	.LBE2700:
 15101              	.LBE2699:
1772:src/xeq.c     **** 
 15102              		.loc 1 1772 1 view .LVU3974
 15103 0016 03B0     		add	sp, sp, #12
 15104              		.cfi_def_cfa_offset 4
 15105              		@ sp needed
 15106 0018 5DF804FB 		ldr	pc, [sp], #4
 15107              		.cfi_endproc
 15108              	.LFE128:
 15110              		.section	.text.DM42_Ticker,"ax",%progbits
 15111              		.align	1
ARM GAS  /tmp/cciWh9P3.s 			page 427


 15112              		.p2align 2,,3
 15113              		.global	DM42_Ticker
 15114              		.syntax unified
 15115              		.thumb
 15116              		.thumb_func
 15117              		.fpu fpv4-sp-d16
 15119              	DM42_Ticker:
 15120              	.LFB129:
1775:src/xeq.c     ****     int f, t;
 15121              		.loc 1 1775 21 is_stmt 1 view -0
 15122              		.cfi_startproc
 15123              		@ args = 0, pretend = 0, frame = 0
 15124              		@ frame_needed = 0, uses_anonymous_args = 0
1776:src/xeq.c     ****     t = get_rtc_ticks();
 15125              		.loc 1 1776 5 view .LVU3976
1777:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 15126              		.loc 1 1777 5 view .LVU3977
1775:src/xeq.c     ****     int f, t;
 15127              		.loc 1 1775 21 is_stmt 0 view .LVU3978
 15128 0000 08B5     		push	{r3, lr}
 15129              		.cfi_def_cfa_offset 8
 15130              		.cfi_offset 3, -8
 15131              		.cfi_offset 14, -4
1777:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 15132              		.loc 1 1777 9 view .LVU3979
 15133 0002 034B     		ldr	r3, .L1060
 15134 0004 9847     		blx	r3
 15135              	.LVL1129:
1778:src/xeq.c     ****     return f;
 15136              		.loc 1 1778 5 is_stmt 1 view .LVU3980
1779:src/xeq.c     ****  }
 15137              		.loc 1 1779 5 view .LVU3981
1778:src/xeq.c     ****     return f;
 15138              		.loc 1 1778 13 is_stmt 0 view .LVU3982
 15139 0006 C0B2     		uxtb	r0, r0
 15140              	.LVL1130:
1778:src/xeq.c     ****     return f;
 15141              		.loc 1 1778 20 view .LVU3983
 15142 0008 00EB8000 		add	r0, r0, r0, lsl #2
1780:src/xeq.c     **** #endif
 15143              		.loc 1 1780 2 view .LVU3984
 15144 000c C009     		lsrs	r0, r0, #7
 15145 000e 08BD     		pop	{r3, pc}
 15146              	.L1061:
 15147              		.align	2
 15148              	.L1060:
 15149 0010 B9040008 		.word	134218937
 15150              		.cfi_endproc
 15151              	.LFE129:
 15153              		.section	.text.op_ticks,"ax",%progbits
 15154              		.align	1
 15155              		.p2align 2,,3
 15156              		.global	op_ticks
 15157              		.syntax unified
 15158              		.thumb
 15159              		.thumb_func
 15160              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cciWh9P3.s 			page 428


 15162              	op_ticks:
 15163              	.LVL1131:
 15164              	.LFB130:
1783:src/xeq.c     **** #if !defined(CONSOLE) && !defined(DM42)
 15165              		.loc 1 1783 30 is_stmt 1 view -0
 15166              		.cfi_startproc
 15167              		@ args = 0, pretend = 0, frame = 0
 15168              		@ frame_needed = 0, uses_anonymous_args = 0
1787:src/xeq.c     **** #else 
 15169              		.loc 1 1787 5 view .LVU3986
 15170              	.LBB2701:
 15171              	.LBI2701:
1775:src/xeq.c     ****     int f, t;
 15172              		.loc 1 1775 6 view .LVU3987
 15173              	.LBB2702:
1776:src/xeq.c     ****     t = get_rtc_ticks();
 15174              		.loc 1 1776 5 view .LVU3988
1777:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 15175              		.loc 1 1777 5 view .LVU3989
 15176              	.LBE2702:
 15177              	.LBE2701:
1783:src/xeq.c     **** #if !defined(CONSOLE) && !defined(DM42)
 15178              		.loc 1 1783 30 is_stmt 0 view .LVU3990
 15179 0000 00B5     		push	{lr}
 15180              		.cfi_def_cfa_offset 4
 15181              		.cfi_offset 14, -4
 15182              	.LBB2706:
 15183              	.LBB2703:
1777:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 15184              		.loc 1 1777 9 view .LVU3991
 15185 0002 084B     		ldr	r3, .L1064
 15186              	.LBE2703:
 15187              	.LBE2706:
1783:src/xeq.c     **** #if !defined(CONSOLE) && !defined(DM42)
 15188              		.loc 1 1783 30 view .LVU3992
 15189 0004 83B0     		sub	sp, sp, #12
 15190              		.cfi_def_cfa_offset 16
 15191              	.LBB2707:
 15192              	.LBB2704:
1777:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 15193              		.loc 1 1777 9 view .LVU3993
 15194 0006 9847     		blx	r3
 15195              	.LVL1132:
1778:src/xeq.c     ****     return f;
 15196              		.loc 1 1778 5 is_stmt 1 view .LVU3994
1779:src/xeq.c     ****  }
 15197              		.loc 1 1779 5 view .LVU3995
1779:src/xeq.c     ****  }
 15198              		.loc 1 1779 5 is_stmt 0 view .LVU3996
 15199              	.LBE2704:
 15200              	.LBE2707:
 15201              	.LBB2708:
 15202              	.LBI2708:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15203              		.loc 1 1322 6 is_stmt 1 view .LVU3997
 15204              	.LBB2709:
1323:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 429


 15205              		.loc 1 1323 2 view .LVU3998
 15206              	.LBE2709:
 15207              	.LBE2708:
 15208              	.LBB2711:
 15209              	.LBB2705:
1778:src/xeq.c     ****     return f;
 15210              		.loc 1 1778 13 is_stmt 0 view .LVU3999
 15211 0008 C0B2     		uxtb	r0, r0
 15212              	.LVL1133:
1778:src/xeq.c     ****     return f;
 15213              		.loc 1 1778 20 view .LVU4000
 15214 000a 00EB8000 		add	r0, r0, r0, lsl #2
1778:src/xeq.c     ****     return f;
 15215              		.loc 1 1778 7 view .LVU4001
 15216 000e C209     		lsrs	r2, r0, #7
 15217              	.LBE2705:
 15218              	.LBE2711:
 15219              	.LBB2712:
 15220              	.LBB2710:
1323:src/xeq.c     **** }
 15221              		.loc 1 1323 2 view .LVU4002
 15222 0010 0021     		movs	r1, #0
 15223 0012 D317     		asrs	r3, r2, #31
 15224 0014 0091     		str	r1, [sp]
 15225 0016 6420     		movs	r0, #100
 15226 0018 FFF7FEFF 		bl	set_reg_n_int_sgn
 15227              	.LVL1134:
1323:src/xeq.c     **** }
 15228              		.loc 1 1323 2 view .LVU4003
 15229              	.LBE2710:
 15230              	.LBE2712:
1795:src/xeq.c     **** 
 15231              		.loc 1 1795 1 view .LVU4004
 15232 001c 03B0     		add	sp, sp, #12
 15233              		.cfi_def_cfa_offset 4
 15234              		@ sp needed
 15235 001e 5DF804FB 		ldr	pc, [sp], #4
 15236              	.L1065:
 15237 0022 00BF     		.align	2
 15238              	.L1064:
 15239 0024 B9040008 		.word	134218937
 15240              		.cfi_endproc
 15241              	.LFE130:
 15243              		.section	.text.op_voltage,"ax",%progbits
 15244              		.align	1
 15245              		.p2align 2,,3
 15246              		.global	op_voltage
 15247              		.syntax unified
 15248              		.thumb
 15249              		.thumb_func
 15250              		.fpu fpv4-sp-d16
 15252              	op_voltage:
 15253              	.LVL1135:
 15254              	.LFB131:
1798:src/xeq.c     **** 	decNumber t, u;
 15255              		.loc 1 1798 32 is_stmt 1 view -0
 15256              		.cfi_startproc
ARM GAS  /tmp/cciWh9P3.s 			page 430


 15257              		@ args = 0, pretend = 0, frame = 72
 15258              		@ frame_needed = 0, uses_anonymous_args = 0
1799:src/xeq.c     **** #ifdef REALBUILD
 15259              		.loc 1 1799 2 view .LVU4006
1803:src/xeq.c     **** 	v = v / 100;
 15260              		.loc 1 1803 2 view .LVU4007
1798:src/xeq.c     **** 	decNumber t, u;
 15261              		.loc 1 1798 32 is_stmt 0 view .LVU4008
 15262 0000 00B5     		push	{lr}
 15263              		.cfi_def_cfa_offset 4
 15264              		.cfi_offset 14, -4
1803:src/xeq.c     **** 	v = v / 100;
 15265              		.loc 1 1803 10 view .LVU4009
 15266 0002 154B     		ldr	r3, .L1070
1798:src/xeq.c     **** 	decNumber t, u;
 15267              		.loc 1 1798 32 view .LVU4010
 15268 0004 95B0     		sub	sp, sp, #84
 15269              		.cfi_def_cfa_offset 88
1803:src/xeq.c     **** 	v = v / 100;
 15270              		.loc 1 1803 10 view .LVU4011
 15271 0006 9847     		blx	r3
 15272              	.LVL1136:
1809:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15273              		.loc 1 1809 6 view .LVU4012
 15274 0008 144B     		ldr	r3, .L1070+4
1804:src/xeq.c     **** #else
 15275              		.loc 1 1804 4 view .LVU4013
 15276 000a 154A     		ldr	r2, .L1070+8
1809:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15277              		.loc 1 1809 6 view .LVU4014
 15278 000c 1B68     		ldr	r3, [r3]
 15279              	.LVL1137:
1804:src/xeq.c     **** #else
 15280              		.loc 1 1804 2 is_stmt 1 view .LVU4015
1809:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15281              		.loc 1 1809 6 is_stmt 0 view .LVU4016
 15282 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1804:src/xeq.c     **** #else
 15283              		.loc 1 1804 4 view .LVU4017
 15284 0012 82FB0012 		smull	r1, r2, r2, r0
1809:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15285              		.loc 1 1809 5 view .LVU4018
 15286 0016 DB07     		lsls	r3, r3, #31
1804:src/xeq.c     **** #else
 15287              		.loc 1 1804 4 view .LVU4019
 15288 0018 4FEAE070 		asr	r0, r0, #31
 15289              	.LVL1138:
1804:src/xeq.c     **** #else
 15290              		.loc 1 1804 4 view .LVU4020
 15291 001c C0EB6212 		rsb	r2, r0, r2, asr #5
 15292              	.LVL1139:
1809:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15293              		.loc 1 1809 2 is_stmt 1 view .LVU4021
1809:src/xeq.c     **** 		setX_int_sgn(v, 0);
 15294              		.loc 1 1809 5 is_stmt 0 view .LVU4022
 15295 0020 08D5     		bpl	.L1067
1810:src/xeq.c     **** 	} else {
ARM GAS  /tmp/cciWh9P3.s 			page 431


 15296              		.loc 1 1810 3 is_stmt 1 view .LVU4023
 15297              	.LVL1140:
 15298              	.LBB2713:
 15299              	.LBI2713:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15300              		.loc 1 1322 6 view .LVU4024
 15301              	.LBB2714:
1323:src/xeq.c     **** }
 15302              		.loc 1 1323 2 view .LVU4025
 15303 0022 0023     		movs	r3, #0
 15304 0024 0093     		str	r3, [sp]
 15305 0026 6420     		movs	r0, #100
 15306 0028 D317     		asrs	r3, r2, #31
 15307 002a FFF7FEFF 		bl	set_reg_n_int_sgn
 15308              	.LVL1141:
1323:src/xeq.c     **** }
 15309              		.loc 1 1323 2 is_stmt 0 view .LVU4026
 15310              	.LBE2714:
 15311              	.LBE2713:
1816:src/xeq.c     **** 
 15312              		.loc 1 1816 1 view .LVU4027
 15313 002e 15B0     		add	sp, sp, #84
 15314              		.cfi_remember_state
 15315              		.cfi_def_cfa_offset 4
 15316              		@ sp needed
 15317 0030 5DF804FB 		ldr	pc, [sp], #4
 15318              	.LVL1142:
 15319              	.L1067:
 15320              		.cfi_restore_state
1812:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
 15321              		.loc 1 1812 3 is_stmt 1 view .LVU4028
 15322 0034 D317     		asrs	r3, r2, #31
 15323 0036 02A8     		add	r0, sp, #8
 15324 0038 FFF7FEFF 		bl	ullint_to_dn
 15325              	.LVL1143:
1813:src/xeq.c     **** 		setX(&u);
 15326              		.loc 1 1813 3 view .LVU4029
 15327 003c 02A9     		add	r1, sp, #8
 15328 003e 4FF0FF32 		mov	r2, #-1
 15329 0042 0BA8     		add	r0, sp, #44
 15330 0044 FFF7FEFF 		bl	dn_mulpow10
 15331              	.LVL1144:
1814:src/xeq.c     **** 	}
 15332              		.loc 1 1814 3 view .LVU4030
 15333              	.LBB2715:
 15334              	.LBI2715:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 15335              		.loc 1 808 6 view .LVU4031
 15336              	.LBB2716:
 809:src/xeq.c     **** }
 15337              		.loc 1 809 2 view .LVU4032
 15338 0048 0BA9     		add	r1, sp, #44
 15339              	.LVL1145:
 809:src/xeq.c     **** }
 15340              		.loc 1 809 2 is_stmt 0 view .LVU4033
 15341 004a 6420     		movs	r0, #100
 15342 004c FFF7FEFF 		bl	setRegister
ARM GAS  /tmp/cciWh9P3.s 			page 432


 15343              	.LVL1146:
 809:src/xeq.c     **** }
 15344              		.loc 1 809 2 view .LVU4034
 15345              	.LBE2716:
 15346              	.LBE2715:
1816:src/xeq.c     **** 
 15347              		.loc 1 1816 1 view .LVU4035
 15348 0050 15B0     		add	sp, sp, #84
 15349              		.cfi_def_cfa_offset 4
 15350              		@ sp needed
 15351 0052 5DF804FB 		ldr	pc, [sp], #4
 15352              	.L1071:
 15353 0056 00BF     		.align	2
 15354              	.L1070:
 15355 0058 F1020008 		.word	134218481
 15356 005c 00000000 		.word	main_ram
 15357 0060 1F85EB51 		.word	1374389535
 15358              		.cfi_endproc
 15359              	.LFE131:
 15361              		.section	.text.free_mem,"ax",%progbits
 15362              		.align	1
 15363              		.p2align 2,,3
 15364              		.global	free_mem
 15365              		.syntax unified
 15366              		.thumb
 15367              		.thumb_func
 15368              		.fpu fpv4-sp-d16
 15370              	free_mem:
 15371              	.LFB132:
1821:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 15372              		.loc 1 1821 20 is_stmt 1 view -0
 15373              		.cfi_startproc
 15374              		@ args = 0, pretend = 0, frame = 0
 15375              		@ frame_needed = 0, uses_anonymous_args = 0
 15376              		@ link register save eliminated.
1822:src/xeq.c     **** }
 15377              		.loc 1 1822 2 view .LVU4037
1822:src/xeq.c     **** }
 15378              		.loc 1 1822 22 is_stmt 0 view .LVU4038
 15379 0000 034A     		ldr	r2, .L1073
1822:src/xeq.c     **** }
 15380              		.loc 1 1822 20 view .LVU4039
 15381 0002 044B     		ldr	r3, .L1073+4
1822:src/xeq.c     **** }
 15382              		.loc 1 1822 22 view .LVU4040
 15383 0004 1268     		ldr	r2, [r2]
1822:src/xeq.c     **** }
 15384              		.loc 1 1822 20 view .LVU4041
 15385 0006 1B68     		ldr	r3, [r3]
1822:src/xeq.c     **** }
 15386              		.loc 1 1822 22 view .LVU4042
 15387 0008 B2F9E207 		ldrsh	r0, [r2, #2018]
1823:src/xeq.c     **** 
 15388              		.loc 1 1823 1 view .LVU4043
 15389 000c 1844     		add	r0, r0, r3
 15390 000e 7047     		bx	lr
 15391              	.L1074:
ARM GAS  /tmp/cciWh9P3.s 			page 433


 15392              		.align	2
 15393              	.L1073:
 15394 0010 00000000 		.word	main_ram
 15395 0014 00000000 		.word	RetStkSize
 15396              		.cfi_endproc
 15397              	.LFE132:
 15399              		.section	.text.free_flash,"ax",%progbits
 15400              		.align	1
 15401              		.p2align 2,,3
 15402              		.global	free_flash
 15403              		.syntax unified
 15404              		.thumb
 15405              		.thumb_func
 15406              		.fpu fpv4-sp-d16
 15408              	free_flash:
 15409              	.LFB133:
1825:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 15410              		.loc 1 1825 22 is_stmt 1 view -0
 15411              		.cfi_startproc
 15412              		@ args = 0, pretend = 0, frame = 0
 15413              		@ frame_needed = 0, uses_anonymous_args = 0
 15414              		@ link register save eliminated.
1826:src/xeq.c     **** }
 15415              		.loc 1 1826 2 view .LVU4045
1826:src/xeq.c     **** }
 15416              		.loc 1 1826 38 is_stmt 0 view .LVU4046
 15417 0000 034B     		ldr	r3, .L1076
 15418 0002 1B68     		ldr	r3, [r3]
 15419 0004 5888     		ldrh	r0, [r3, #2]
1827:src/xeq.c     **** 
 15420              		.loc 1 1827 1 view .LVU4047
 15421 0006 C0F5FF50 		rsb	r0, r0, #8160
 15422 000a 1E30     		adds	r0, r0, #30
 15423 000c 7047     		bx	lr
 15424              	.L1077:
 15425 000e 00BF     		.align	2
 15426              	.L1076:
 15427 0010 00000000 		.word	library_ram
 15428              		.cfi_endproc
 15429              	.LFE133:
 15431              		.section	.text.get_mem,"ax",%progbits
 15432              		.align	1
 15433              		.p2align 2,,3
 15434              		.global	get_mem
 15435              		.syntax unified
 15436              		.thumb
 15437              		.thumb_func
 15438              		.fpu fpv4-sp-d16
 15440              	get_mem:
 15441              	.LVL1147:
 15442              	.LFB134:
1829:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 15443              		.loc 1 1829 29 is_stmt 1 view -0
 15444              		.cfi_startproc
 15445              		@ args = 0, pretend = 0, frame = 0
 15446              		@ frame_needed = 0, uses_anonymous_args = 0
1830:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
ARM GAS  /tmp/cciWh9P3.s 			page 434


 15447              		.loc 1 1830 2 view .LVU4049
1829:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 15448              		.loc 1 1829 29 is_stmt 0 view .LVU4050
 15449 0000 00B5     		push	{lr}
 15450              		.cfi_def_cfa_offset 4
 15451              		.cfi_offset 14, -4
1830:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15452              		.loc 1 1830 2 view .LVU4051
 15453 0002 A928     		cmp	r0, #169
1829:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 15454              		.loc 1 1829 29 view .LVU4052
 15455 0004 83B0     		sub	sp, sp, #12
 15456              		.cfi_def_cfa_offset 16
1830:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15457              		.loc 1 1830 2 view .LVU4053
 15458 0006 23D0     		beq	.L1087
1830:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15459              		.loc 1 1830 2 discriminator 2 view .LVU4054
 15460 0008 AA28     		cmp	r0, #170
 15461 000a 18D0     		beq	.L1088
1830:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 15462              		.loc 1 1830 2 discriminator 5 view .LVU4055
 15463 000c AC28     		cmp	r0, #172
 15464 000e 3CD0     		beq	.L1089
 15465              	.LBB2717:
 15466              	.LBI2717:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 15467              		.loc 1 249 14 is_stmt 1 view .LVU4056
 15468              	.LBE2717:
 250:src/xeq.c     **** }
 15469              		.loc 1 250 2 view .LVU4057
 15470              	.LVL1148:
 15471              	.LBB2726:
 15472              	.LBB2718:
 15473              	.LBI2718:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 15474              		.loc 1 237 14 view .LVU4058
 15475              	.LBB2719:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 15476              		.loc 1 238 2 view .LVU4059
 15477              	.LBB2720:
 15478              	.LBI2720:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15479              		.loc 1 931 5 view .LVU4060
 15480              	.LBB2721:
 932:src/xeq.c     **** }
 15481              		.loc 1 932 2 view .LVU4061
 932:src/xeq.c     **** }
 15482              		.loc 1 932 12 is_stmt 0 view .LVU4062
 15483 0010 224B     		ldr	r3, .L1091
 15484 0012 1A68     		ldr	r2, [r3]
 932:src/xeq.c     **** }
 15485              		.loc 1 932 24 view .LVU4063
 15486 0014 B2F8E817 		ldrh	r1, [r2, #2024]
 15487              	.LBE2721:
 15488              	.LBE2720:
 15489              	.LBB2723:
ARM GAS  /tmp/cciWh9P3.s 			page 435


 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 15490              		.loc 1 239 24 view .LVU4064
 15491 0018 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 15492              	.LBE2723:
 15493              	.LBB2724:
 15494              	.LBB2722:
 932:src/xeq.c     **** }
 15495              		.loc 1 932 24 view .LVU4065
 15496 001c 44F20103 		movw	r3, #16385
 15497              	.LBE2722:
 15498              	.LBE2724:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 15499              		.loc 1 238 5 view .LVU4066
 15500 0020 0B40     		ands	r3, r3, r1
 15501 0022 B3F5804F 		cmp	r3, #16384
 15502              	.LBB2725:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 15503              		.loc 1 239 3 is_stmt 1 view .LVU4067
 15504              	.LVL1149:
 240:src/xeq.c     **** 	}
 15505              		.loc 1 240 3 view .LVU4068
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 15506              		.loc 1 239 13 is_stmt 0 view .LVU4069
 15507 0026 04BF     		itt	eq
 15508 0028 0C3A     		subeq	r2, r2, #12
 15509              	.LVL1150:
 240:src/xeq.c     **** 	}
 15510              		.loc 1 240 67 view .LVU4070
 15511 002a 5210     		asreq	r2, r2, #1
 15512              	.LBE2725:
 243:src/xeq.c     **** }
 15513              		.loc 1 243 3 is_stmt 1 view .LVU4071
 15514 002c 0023     		movs	r3, #0
 15515              	.LVL1151:
 15516              	.L1080:
 243:src/xeq.c     **** }
 15517              		.loc 1 243 3 is_stmt 0 view .LVU4072
 15518              	.LBE2719:
 15519              	.LBE2718:
 15520              	.LBE2726:
 15521              	.LBB2727:
 15522              	.LBI2727:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15523              		.loc 1 1322 6 is_stmt 1 discriminator 10 view .LVU4073
 15524              	.LBB2728:
1323:src/xeq.c     **** }
 15525              		.loc 1 1323 2 discriminator 10 view .LVU4074
 15526 002e 0021     		movs	r1, #0
 15527 0030 0091     		str	r1, [sp]
 15528 0032 6420     		movs	r0, #100
 15529 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 15530              	.LVL1152:
1323:src/xeq.c     **** }
 15531              		.loc 1 1323 2 is_stmt 0 discriminator 10 view .LVU4075
 15532              	.LBE2728:
 15533              	.LBE2727:
1835:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 436


 15534              		.loc 1 1835 1 discriminator 10 view .LVU4076
 15535 0038 03B0     		add	sp, sp, #12
 15536              		.cfi_remember_state
 15537              		.cfi_def_cfa_offset 4
 15538              		@ sp needed
 15539 003a 5DF804FB 		ldr	pc, [sp], #4
 15540              	.LVL1153:
 15541              	.L1088:
 15542              		.cfi_restore_state
 15543              	.LBB2729:
 15544              	.LBI2729:
 229:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 15545              		.loc 1 229 5 is_stmt 1 view .LVU4077
 15546              	.LBE2729:
 230:src/xeq.c     **** }
 15547              		.loc 1 230 2 view .LVU4078
 15548              	.LBB2750:
 15549              	.LBB2730:
 15550              	.LBI2730:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 15551              		.loc 1 221 5 view .LVU4079
 15552              	.LBB2731:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 15553              		.loc 1 222 2 view .LVU4080
 15554              	.LBB2732:
 15555              	.LBI2732:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15556              		.loc 1 931 5 view .LVU4081
 15557              	.LBB2733:
 932:src/xeq.c     **** }
 15558              		.loc 1 932 2 view .LVU4082
 932:src/xeq.c     **** }
 15559              		.loc 1 932 12 is_stmt 0 view .LVU4083
 15560 003e 174B     		ldr	r3, .L1091
 15561 0040 1B68     		ldr	r3, [r3]
 15562              	.LVL1154:
 932:src/xeq.c     **** }
 15563              		.loc 1 932 12 view .LVU4084
 15564              	.LBE2733:
 15565              	.LBE2732:
 223:src/xeq.c     **** }
 15566              		.loc 1 223 2 is_stmt 1 view .LVU4085
 15567              	.LBB2736:
 15568              	.LBI2736:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 15569              		.loc 1 213 5 view .LVU4086
 15570              	.LBB2737:
 214:src/xeq.c     **** }
 15571              		.loc 1 214 2 view .LVU4087
 214:src/xeq.c     **** }
 15572              		.loc 1 214 9 is_stmt 0 view .LVU4088
 15573 0042 B3F9DE27 		ldrsh	r2, [r3, #2014]
 214:src/xeq.c     **** }
 15574              		.loc 1 214 57 view .LVU4089
 15575 0046 002A     		cmp	r2, #0
 15576 0048 0BDB     		blt	.L1090
 15577 004a 0022     		movs	r2, #0
ARM GAS  /tmp/cciWh9P3.s 			page 437


 15578 004c 0023     		movs	r3, #0
 15579              	.LVL1155:
 214:src/xeq.c     **** }
 15580              		.loc 1 214 57 view .LVU4090
 15581 004e EEE7     		b	.L1080
 15582              	.LVL1156:
 15583              	.L1087:
 214:src/xeq.c     **** }
 15584              		.loc 1 214 57 view .LVU4091
 15585              	.LBE2737:
 15586              	.LBE2736:
 15587              	.LBE2731:
 15588              	.LBE2730:
 15589              	.LBE2750:
 15590              	.LBB2751:
 15591              	.LBI2751:
1821:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 15592              		.loc 1 1821 5 is_stmt 1 view .LVU4092
 15593              	.LBB2752:
1822:src/xeq.c     **** }
 15594              		.loc 1 1822 2 view .LVU4093
1822:src/xeq.c     **** }
 15595              		.loc 1 1822 22 is_stmt 0 view .LVU4094
 15596 0050 124A     		ldr	r2, .L1091
1822:src/xeq.c     **** }
 15597              		.loc 1 1822 20 view .LVU4095
 15598 0052 134B     		ldr	r3, .L1091+4
1822:src/xeq.c     **** }
 15599              		.loc 1 1822 22 view .LVU4096
 15600 0054 1268     		ldr	r2, [r2]
1822:src/xeq.c     **** }
 15601              		.loc 1 1822 20 view .LVU4097
 15602 0056 1B68     		ldr	r3, [r3]
1822:src/xeq.c     **** }
 15603              		.loc 1 1822 22 view .LVU4098
 15604 0058 B2F9E227 		ldrsh	r2, [r2, #2018]
1822:src/xeq.c     **** }
 15605              		.loc 1 1822 20 view .LVU4099
 15606 005c 1A44     		add	r2, r2, r3
 15607 005e 0023     		movs	r3, #0
 15608              	.LBE2752:
 15609              	.LBE2751:
 15610 0060 E5E7     		b	.L1080
 15611              	.LVL1157:
 15612              	.L1090:
 15613              	.LBB2753:
 15614              	.LBB2749:
 15615              	.LBB2748:
 15616              	.LBB2742:
 15617              	.LBB2734:
 932:src/xeq.c     **** }
 15618              		.loc 1 932 24 view .LVU4100
 15619 0062 B3F8E807 		ldrh	r0, [r3, #2024]
 15620              	.LVL1158:
 932:src/xeq.c     **** }
 15621              		.loc 1 932 24 view .LVU4101
 15622              	.LBE2734:
ARM GAS  /tmp/cciWh9P3.s 			page 438


 15623              	.LBE2742:
 15624              	.LBB2743:
 15625              	.LBB2738:
 214:src/xeq.c     **** }
 15626              		.loc 1 214 25 view .LVU4102
 15627 0066 0F49     		ldr	r1, .L1091+8
 15628              	.LBE2738:
 15629              	.LBE2743:
 15630              	.LBB2744:
 15631              	.LBB2735:
 932:src/xeq.c     **** }
 15632              		.loc 1 932 24 view .LVU4103
 15633 0068 44F20103 		movw	r3, #16385
 15634              	.LVL1159:
 932:src/xeq.c     **** }
 15635              		.loc 1 932 24 view .LVU4104
 15636              	.LBE2735:
 15637              	.LBE2744:
 15638              	.LBB2745:
 15639              	.LBB2739:
 214:src/xeq.c     **** }
 15640              		.loc 1 214 25 view .LVU4105
 15641 006c 0968     		ldr	r1, [r1]
 15642              	.LBE2739:
 15643              	.LBE2745:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 15644              		.loc 1 222 73 view .LVU4106
 15645 006e 0340     		ands	r3, r3, r0
 15646 0070 A3F58043 		sub	r3, r3, #16384
 15647              	.LBB2746:
 15648              	.LBB2740:
 214:src/xeq.c     **** }
 15649              		.loc 1 214 57 view .LVU4107
 15650 0074 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 15651              	.LBE2740:
 15652              	.LBE2746:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 15653              		.loc 1 222 73 view .LVU4108
 15654 0078 B3FA83F3 		clz	r3, r3
 15655 007c 5B09     		lsrs	r3, r3, #5
 15656 007e 0233     		adds	r3, r3, #2
 15657              	.LBB2747:
 15658              	.LBB2741:
 214:src/xeq.c     **** }
 15659              		.loc 1 214 57 view .LVU4109
 15660 0080 C2F30B02 		ubfx	r2, r2, #0, #12
 15661 0084 1A41     		asrs	r2, r2, r3
 15662 0086 D317     		asrs	r3, r2, #31
 15663 0088 D1E7     		b	.L1080
 15664              	.LVL1160:
 15665              	.L1089:
 214:src/xeq.c     **** }
 15666              		.loc 1 214 57 view .LVU4110
 15667              	.LBE2741:
 15668              	.LBE2747:
 15669              	.LBE2748:
 15670              	.LBE2749:
ARM GAS  /tmp/cciWh9P3.s 			page 439


 15671              	.LBE2753:
 15672              	.LBB2754:
 15673              	.LBI2754:
1825:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 15674              		.loc 1 1825 5 is_stmt 1 view .LVU4111
 15675              	.LBB2755:
1826:src/xeq.c     **** }
 15676              		.loc 1 1826 2 view .LVU4112
1826:src/xeq.c     **** }
 15677              		.loc 1 1826 38 is_stmt 0 view .LVU4113
 15678 008a 074B     		ldr	r3, .L1091+12
 15679 008c 1B68     		ldr	r3, [r3]
 15680 008e 5A88     		ldrh	r2, [r3, #2]
1826:src/xeq.c     **** }
 15681              		.loc 1 1826 27 view .LVU4114
 15682 0090 C2F5FF52 		rsb	r2, r2, #8160
 15683 0094 1E32     		adds	r2, r2, #30
 15684 0096 0023     		movs	r3, #0
 15685              	.LBE2755:
 15686              	.LBE2754:
 15687 0098 C9E7     		b	.L1080
 15688              	.L1092:
 15689 009a 00BF     		.align	2
 15690              	.L1091:
 15691 009c 00000000 		.word	main_ram
 15692 00a0 00000000 		.word	RetStkSize
 15693 00a4 00000000 		.word	RetStk
 15694 00a8 00000000 		.word	library_ram
 15695              		.cfi_endproc
 15696              	.LFE134:
 15698              		.section	.text.cmdputkey,"ax",%progbits
 15699              		.align	1
 15700              		.p2align 2,,3
 15701              		.global	cmdputkey
 15702              		.syntax unified
 15703              		.thumb
 15704              		.thumb_func
 15705              		.fpu fpv4-sp-d16
 15707              	cmdputkey:
 15708              	.LVL1161:
 15709              	.LFB137:
1870:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15710              		.loc 1 1870 1 is_stmt 1 view -0
 15711              		.cfi_startproc
 15712              		@ args = 0, pretend = 0, frame = 0
 15713              		@ frame_needed = 0, uses_anonymous_args = 0
1871:src/xeq.c     **** 
 15714              		.loc 1 1871 2 view .LVU4116
1870:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15715              		.loc 1 1870 1 is_stmt 0 view .LVU4117
 15716 0000 10B5     		push	{r4, lr}
 15717              		.cfi_def_cfa_offset 8
 15718              		.cfi_offset 4, -8
 15719              		.cfi_offset 14, -4
1871:src/xeq.c     **** 
 15720              		.loc 1 1871 16 view .LVU4118
 15721 0002 FFF7FEFF 		bl	get_keycode_from_reg
ARM GAS  /tmp/cciWh9P3.s 			page 440


 15722              	.LVL1162:
1873:src/xeq.c     **** 		set_running_off();
 15723              		.loc 1 1873 2 is_stmt 1 view .LVU4119
1873:src/xeq.c     **** 		set_running_off();
 15724              		.loc 1 1873 5 is_stmt 0 view .LVU4120
 15725 0006 041E     		subs	r4, r0, #0
 15726 0008 00DA     		bge	.L1096
1877:src/xeq.c     **** 
 15727              		.loc 1 1877 1 view .LVU4121
 15728 000a 10BD     		pop	{r4, pc}
 15729              	.L1096:
1874:src/xeq.c     **** 		put_key(c);
 15730              		.loc 1 1874 3 is_stmt 1 view .LVU4122
 15731              	.LBB2756:
 15732              	.LBI2756:
5573:src/xeq.c     **** 	set_running_off_sst();
 15733              		.loc 1 5573 6 view .LVU4123
 15734              	.LBB2757:
5574:src/xeq.c     **** 	State.entryp = 0;
 15735              		.loc 1 5574 2 view .LVU4124
 15736              	.LBB2758:
 15737              	.LBI2758:
5565:src/xeq.c     **** 	Running = 0;
 15738              		.loc 1 5565 6 view .LVU4125
 15739              	.LBB2759:
5566:src/xeq.c     **** }
 15740              		.loc 1 5566 2 view .LVU4126
 15741              	.LBE2759:
 15742              	.LBE2758:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 15743              		.loc 1 5575 15 is_stmt 0 view .LVU4127
 15744 000c 094B     		ldr	r3, .L1097
 15745              	.LBB2762:
 15746              	.LBB2760:
5566:src/xeq.c     **** }
 15747              		.loc 1 5566 10 view .LVU4128
 15748 000e 0A4A     		ldr	r2, .L1097+4
 15749              	.LBE2760:
 15750              	.LBE2762:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 15751              		.loc 1 5575 15 view .LVU4129
 15752 0010 1B68     		ldr	r3, [r3]
 15753              	.LBB2763:
 15754              	.LBB2761:
5566:src/xeq.c     **** }
 15755              		.loc 1 5566 10 view .LVU4130
 15756 0012 0021     		movs	r1, #0
 15757 0014 1160     		str	r1, [r2]
 15758              	.LBE2761:
 15759              	.LBE2763:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 15760              		.loc 1 5575 2 is_stmt 1 view .LVU4131
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 15761              		.loc 1 5575 15 is_stmt 0 view .LVU4132
 15762 0016 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 15763 001a 61F30412 		bfi	r2, r1, #4, #1
 15764              		.loc 1 5576 2 view .LVU4133
ARM GAS  /tmp/cciWh9P3.s 			page 441


 15765 001e 8A20     		movs	r0, #138
 15766              	.LVL1163:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 15767              		.loc 1 5575 15 view .LVU4134
 15768 0020 83F8DD27 		strb	r2, [r3, #2013]
 15769              		.loc 1 5576 2 is_stmt 1 view .LVU4135
 15770 0024 FFF7FEFF 		bl	dot
 15771              	.LVL1164:
 15772              	.LBE2757:
 15773              	.LBE2756:
1875:src/xeq.c     **** 	}
 15774              		.loc 1 1875 3 view .LVU4136
 15775 0028 2046     		mov	r0, r4
1877:src/xeq.c     **** 
 15776              		.loc 1 1877 1 is_stmt 0 view .LVU4137
 15777 002a BDE81040 		pop	{r4, lr}
 15778              		.cfi_restore 14
 15779              		.cfi_restore 4
 15780              		.cfi_def_cfa_offset 0
 15781              	.LVL1165:
1875:src/xeq.c     **** 	}
 15782              		.loc 1 1875 3 view .LVU4138
 15783 002e FFF7FEBF 		b	put_key
 15784              	.LVL1166:
 15785              	.L1098:
1875:src/xeq.c     **** 	}
 15786              		.loc 1 1875 3 view .LVU4139
 15787 0032 00BF     		.align	2
 15788              	.L1097:
 15789 0034 00000000 		.word	main_ram
 15790 0038 00000000 		.word	Running
 15791              		.cfi_endproc
 15792              	.LFE137:
 15794              		.section	.text.cmdkeytype,"ax",%progbits
 15795              		.align	1
 15796              		.p2align 2,,3
 15797              		.global	cmdkeytype
 15798              		.syntax unified
 15799              		.thumb
 15800              		.thumb_func
 15801              		.fpu fpv4-sp-d16
 15803              	cmdkeytype:
 15804              	.LVL1167:
 15805              	.LFB138:
1885:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15806              		.loc 1 1885 1 is_stmt 1 view -0
 15807              		.cfi_startproc
 15808              		@ args = 0, pretend = 0, frame = 48
 15809              		@ frame_needed = 0, uses_anonymous_args = 0
1886:src/xeq.c     **** 	if ( c >= 0 ) {
 15810              		.loc 1 1886 2 view .LVU4141
1885:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 15811              		.loc 1 1885 1 is_stmt 0 view .LVU4142
 15812 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 15813              		.cfi_def_cfa_offset 20
 15814              		.cfi_offset 4, -20
 15815              		.cfi_offset 5, -16
ARM GAS  /tmp/cciWh9P3.s 			page 442


 15816              		.cfi_offset 6, -12
 15817              		.cfi_offset 7, -8
 15818              		.cfi_offset 14, -4
 15819 0002 8FB0     		sub	sp, sp, #60
 15820              		.cfi_def_cfa_offset 80
1886:src/xeq.c     **** 	if ( c >= 0 ) {
 15821              		.loc 1 1886 16 view .LVU4143
 15822 0004 FFF7FEFF 		bl	get_keycode_from_reg
 15823              	.LVL1168:
1887:src/xeq.c     **** 		const char types[] = {
 15824              		.loc 1 1887 2 is_stmt 1 view .LVU4144
1887:src/xeq.c     **** 		const char types[] = {
 15825              		.loc 1 1887 5 is_stmt 0 view .LVU4145
 15826 0008 061E     		subs	r6, r0, #0
 15827 000a 17DB     		blt	.L1099
 15828              	.LBB2764:
1888:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15829              		.loc 1 1888 3 is_stmt 1 view .LVU4146
1888:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15830              		.loc 1 1888 14 is_stmt 0 view .LVU4147
 15831 000c 0E4D     		ldr	r5, .L1107
 15832              	.LBB2765:
 15833              	.LBB2766:
 15834              	.LBB2767:
 15835              	.LBB2768:
 734:src/xeq.c     **** }
 15836              		.loc 1 734 15 view .LVU4148
 15837 000e 0F4F     		ldr	r7, .L1107+4
 15838              	.LBE2768:
 15839              	.LBE2767:
 15840              	.LBE2766:
 15841              	.LBE2765:
1888:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15842              		.loc 1 1888 14 view .LVU4149
 15843 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 15844              	.LVL1169:
1888:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15845              		.loc 1 1888 14 view .LVU4150
 15846 0012 03AC     		add	r4, sp, #12
 15847 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 15848 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 15849 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 15850 001a 95E80700 		ldm	r5, {r0, r1, r2}
 15851              	.LBB2777:
 15852              	.LBB2773:
 15853              	.LBB2771:
 15854              	.LBB2769:
 734:src/xeq.c     **** }
 15855              		.loc 1 734 15 view .LVU4151
 15856 001e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 15857              	.LBE2769:
 15858              	.LBE2771:
 15859              	.LBE2773:
 15860              	.LBE2777:
1888:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15861              		.loc 1 1888 14 view .LVU4152
 15862 0020 03C4     		stmia	r4!, {r0, r1}
ARM GAS  /tmp/cciWh9P3.s 			page 443


 15863              	.LBB2778:
 15864              	.LBB2774:
 738:src/xeq.c     **** 		lift();
 15865              		.loc 1 738 5 view .LVU4153
 15866 0022 5B06     		lsls	r3, r3, #25
 15867              	.LBE2774:
 15868              	.LBE2778:
1888:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 15869              		.loc 1 1888 14 view .LVU4154
 15870 0024 2270     		strb	r2, [r4]
1896:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
 15871              		.loc 1 1896 3 is_stmt 1 view .LVU4155
 15872              	.LBB2779:
 15873              	.LBI2765:
 737:src/xeq.c     **** 	if (get_lift())
 15874              		.loc 1 737 6 view .LVU4156
 15875              	.LBB2775:
 738:src/xeq.c     **** 		lift();
 15876              		.loc 1 738 2 view .LVU4157
 15877              	.LBB2772:
 15878              	.LBI2767:
 733:src/xeq.c     **** 	return State2.state_lift;
 15879              		.loc 1 733 12 view .LVU4158
 15880              	.LBB2770:
 734:src/xeq.c     **** }
 15881              		.loc 1 734 2 view .LVU4159
 15882              	.LBE2770:
 15883              	.LBE2772:
 738:src/xeq.c     **** 		lift();
 15884              		.loc 1 738 5 is_stmt 0 view .LVU4160
 15885 0026 0BD4     		bmi	.L1106
 15886              	.L1101:
 15887              	.LBE2775:
 15888              	.LBE2779:
1897:src/xeq.c     **** 	}
 15889              		.loc 1 1897 3 is_stmt 1 view .LVU4161
 15890              	.LVL1170:
 15891              	.LBB2780:
 15892              	.LBI2780:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15893              		.loc 1 1322 6 view .LVU4162
 15894              	.LBB2781:
1323:src/xeq.c     **** }
 15895              		.loc 1 1323 2 view .LVU4163
 15896              	.LBE2781:
 15897              	.LBE2780:
1897:src/xeq.c     **** 	}
 15898              		.loc 1 1897 21 is_stmt 0 view .LVU4164
 15899 0028 0EAB     		add	r3, sp, #56
 15900 002a 9819     		adds	r0, r3, r6
 15901              	.LBB2783:
 15902              	.LBB2782:
1323:src/xeq.c     **** }
 15903              		.loc 1 1323 2 view .LVU4165
 15904 002c 0021     		movs	r1, #0
 15905 002e 10F82C2C 		ldrb	r2, [r0, #-44]	@ zero_extendqisi2
 15906 0032 0091     		str	r1, [sp]
ARM GAS  /tmp/cciWh9P3.s 			page 444


 15907              	.LVL1171:
1323:src/xeq.c     **** }
 15908              		.loc 1 1323 2 view .LVU4166
 15909 0034 0023     		movs	r3, #0
 15910 0036 6420     		movs	r0, #100
 15911 0038 FFF7FEFF 		bl	set_reg_n_int_sgn
 15912              	.LVL1172:
 15913              	.L1099:
1323:src/xeq.c     **** }
 15914              		.loc 1 1323 2 view .LVU4167
 15915              	.LBE2782:
 15916              	.LBE2783:
 15917              	.LBE2764:
1899:src/xeq.c     **** 
 15918              		.loc 1 1899 1 view .LVU4168
 15919 003c 0FB0     		add	sp, sp, #60
 15920              		.cfi_remember_state
 15921              		.cfi_def_cfa_offset 20
 15922              		@ sp needed
 15923 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 15924              	.LVL1173:
 15925              	.L1106:
 15926              		.cfi_restore_state
 15927              	.LBB2785:
 15928              	.LBB2784:
 15929              	.LBB2776:
 739:src/xeq.c     **** }
 15930              		.loc 1 739 3 is_stmt 1 view .LVU4169
 15931 0040 FFF7FEFF 		bl	lift
 15932              	.LVL1174:
 15933 0044 F0E7     		b	.L1101
 15934              	.L1108:
 15935 0046 00BF     		.align	2
 15936              	.L1107:
 15937 0048 00000000 		.word	.LANCHOR5
 15938 004c 00000000 		.word	StateWhileOn
 15939              	.LBE2776:
 15940              	.LBE2784:
 15941              	.LBE2785:
 15942              		.cfi_endproc
 15943              	.LFE138:
 15945              		.section	.rodata.op_query_xtal.str1.4,"aMS",%progbits,1
 15946              		.align	2
 15947              	.LC2:
 15948 0000 74727565 		.ascii	"true\000"
 15948      00
 15949              		.section	.text.op_query_xtal,"ax",%progbits
 15950              		.align	1
 15951              		.p2align 2,,3
 15952              		.global	op_query_xtal
 15953              		.syntax unified
 15954              		.thumb
 15955              		.thumb_func
 15956              		.fpu fpv4-sp-d16
 15958              	op_query_xtal:
 15959              	.LVL1175:
 15960              	.LFB141:
ARM GAS  /tmp/cciWh9P3.s 			page 445


1919:src/xeq.c     **** 	fin_tst(Xtal);
 15961              		.loc 1 1919 35 view -0
 15962              		.cfi_startproc
 15963              		@ args = 0, pretend = 0, frame = 0
 15964              		@ frame_needed = 0, uses_anonymous_args = 0
 15965              		@ link register save eliminated.
1920:src/xeq.c     **** }
 15966              		.loc 1 1920 2 view .LVU4171
 15967              	.LBB2786:
 15968              	.LBI2786:
2337:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 15969              		.loc 1 2337 6 view .LVU4172
 15970              	.LBB2787:
2338:src/xeq.c     **** 	if (Running || XromRunning) {
 15971              		.loc 1 2338 2 view .LVU4173
2339:src/xeq.c     **** 		if (! a && incpc())
 15972              		.loc 1 2339 2 view .LVU4174
2339:src/xeq.c     **** 		if (! a && incpc())
 15973              		.loc 1 2339 6 is_stmt 0 view .LVU4175
 15974 0000 044A     		ldr	r2, .L1111
2339:src/xeq.c     **** 		if (! a && incpc())
 15975              		.loc 1 2339 14 view .LVU4176
 15976 0002 054B     		ldr	r3, .L1111+4
 15977 0004 1268     		ldr	r2, [r2]
 15978 0006 1B68     		ldr	r3, [r3]
 15979 0008 1343     		orrs	r3, r2, r3
 15980 000a 02D1     		bne	.L1109
2344:src/xeq.c     **** #ifdef INFRARED
 15981              		.loc 1 2344 3 is_stmt 1 view .LVU4177
2344:src/xeq.c     **** #ifdef INFRARED
 15982              		.loc 1 2344 11 is_stmt 0 view .LVU4178
 15983 000c 034B     		ldr	r3, .L1111+8
 15984 000e 044A     		ldr	r2, .L1111+12
 15985 0010 1A60     		str	r2, [r3]
 15986              	.LVL1176:
 15987              	.L1109:
2344:src/xeq.c     **** #ifdef INFRARED
 15988              		.loc 1 2344 11 view .LVU4179
 15989              	.LBE2787:
 15990              	.LBE2786:
1921:src/xeq.c     **** 
 15991              		.loc 1 1921 1 view .LVU4180
 15992 0012 7047     		bx	lr
 15993              	.L1112:
 15994              		.align	2
 15995              	.L1111:
 15996 0014 00000000 		.word	Running
 15997 0018 00000000 		.word	XromRunning
 15998 001c 00000000 		.word	DispMsg
 15999 0020 00000000 		.word	.LC2
 16000              		.cfi_endproc
 16001              	.LFE141:
 16003              		.section	.rodata.op_query_print.str1.4,"aMS",%progbits,1
 16004              		.align	2
 16005              	.LC3:
 16006 0000 66616C73 		.ascii	"false\000"
 16006      6500
ARM GAS  /tmp/cciWh9P3.s 			page 446


 16007              		.section	.text.op_query_print,"ax",%progbits
 16008              		.align	1
 16009              		.p2align 2,,3
 16010              		.global	op_query_print
 16011              		.syntax unified
 16012              		.thumb
 16013              		.thumb_func
 16014              		.fpu fpv4-sp-d16
 16016              	op_query_print:
 16017              	.LVL1177:
 16018              	.LFB142:
1923:src/xeq.c     **** #ifdef INFRARED
 16019              		.loc 1 1923 36 is_stmt 1 view -0
 16020              		.cfi_startproc
 16021              		@ args = 0, pretend = 0, frame = 0
 16022              		@ frame_needed = 0, uses_anonymous_args = 0
 16023              		@ link register save eliminated.
1927:src/xeq.c     **** #endif
 16024              		.loc 1 1927 2 view .LVU4182
 16025              	.LBB2788:
 16026              	.LBI2788:
2337:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 16027              		.loc 1 2337 6 view .LVU4183
 16028              	.LBB2789:
2338:src/xeq.c     **** 	if (Running || XromRunning) {
 16029              		.loc 1 2338 2 view .LVU4184
2339:src/xeq.c     **** 		if (! a && incpc())
 16030              		.loc 1 2339 2 view .LVU4185
2339:src/xeq.c     **** 		if (! a && incpc())
 16031              		.loc 1 2339 6 is_stmt 0 view .LVU4186
 16032 0000 054A     		ldr	r2, .L1116
2339:src/xeq.c     **** 		if (! a && incpc())
 16033              		.loc 1 2339 14 view .LVU4187
 16034 0002 064B     		ldr	r3, .L1116+4
 16035 0004 1268     		ldr	r2, [r2]
 16036 0006 1B68     		ldr	r3, [r3]
 16037 0008 1343     		orrs	r3, r2, r3
 16038 000a 03D1     		bne	.L1115
2344:src/xeq.c     **** #ifdef INFRARED
 16039              		.loc 1 2344 3 is_stmt 1 view .LVU4188
2344:src/xeq.c     **** #ifdef INFRARED
 16040              		.loc 1 2344 11 is_stmt 0 view .LVU4189
 16041 000c 044B     		ldr	r3, .L1116+8
 16042 000e 054A     		ldr	r2, .L1116+12
 16043 0010 1A60     		str	r2, [r3]
 16044              	.LVL1178:
2344:src/xeq.c     **** #ifdef INFRARED
 16045              		.loc 1 2344 11 view .LVU4190
 16046              	.LBE2789:
 16047              	.LBE2788:
1929:src/xeq.c     **** 
 16048              		.loc 1 1929 1 view .LVU4191
 16049 0012 7047     		bx	lr
 16050              	.LVL1179:
 16051              	.L1115:
 16052              	.LBB2791:
 16053              	.LBB2790:
ARM GAS  /tmp/cciWh9P3.s 			page 447


2340:src/xeq.c     **** 			decpc();
 16054              		.loc 1 2340 3 is_stmt 1 view .LVU4192
 16055 0014 FFF7FEBF 		b	fin_tst.part.0
 16056              	.LVL1180:
 16057              	.L1117:
2340:src/xeq.c     **** 			decpc();
 16058              		.loc 1 2340 3 is_stmt 0 view .LVU4193
 16059              		.align	2
 16060              	.L1116:
 16061 0018 00000000 		.word	Running
 16062 001c 00000000 		.word	XromRunning
 16063 0020 00000000 		.word	DispMsg
 16064 0024 00000000 		.word	.LC3
 16065              	.LBE2790:
 16066              	.LBE2791:
 16067              		.cfi_endproc
 16068              	.LFE142:
 16070              		.section	.text.cmdstostk,"ax",%progbits
 16071              		.align	1
 16072              		.p2align 2,,3
 16073              		.global	cmdstostk
 16074              		.syntax unified
 16075              		.thumb
 16076              		.thumb_func
 16077              		.fpu fpv4-sp-d16
 16079              	cmdstostk:
 16080              	.LVL1181:
 16081              	.LFB144:
1942:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16082              		.loc 1 1942 48 is_stmt 1 view -0
 16083              		.cfi_startproc
 16084              		@ args = 0, pretend = 0, frame = 0
 16085              		@ frame_needed = 0, uses_anonymous_args = 0
1943:src/xeq.c     **** 
 16086              		.loc 1 1943 2 view .LVU4195
1942:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16087              		.loc 1 1942 48 is_stmt 0 view .LVU4196
 16088 0000 70B5     		push	{r4, r5, r6, lr}
 16089              		.cfi_def_cfa_offset 16
 16090              		.cfi_offset 4, -16
 16091              		.cfi_offset 5, -12
 16092              		.cfi_offset 6, -8
 16093              		.cfi_offset 14, -4
1942:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16094              		.loc 1 1942 48 view .LVU4197
 16095 0002 0546     		mov	r5, r0
1943:src/xeq.c     **** 
 16096              		.loc 1 1943 13 view .LVU4198
 16097 0004 FFF7FEFF 		bl	check_stack_overlap
 16098              	.LVL1182:
1945:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16099              		.loc 1 1945 2 is_stmt 1 view .LVU4199
1945:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16100              		.loc 1 1945 12 view .LVU4200
1945:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16101              		.loc 1 1945 2 is_stmt 0 view .LVU4201
 16102 0008 031E     		subs	r3, r0, #0
ARM GAS  /tmp/cciWh9P3.s 			page 448


 16103 000a 0ADD     		ble	.L1118
 16104 000c 2C46     		mov	r4, r5
 16105 000e C4F16406 		rsb	r6, r4, #100
 16106 0012 1D44     		add	r5, r5, r3
 16107              	.LVL1183:
 16108              	.L1120:
1946:src/xeq.c     **** }
 16109              		.loc 1 1946 3 is_stmt 1 discriminator 3 view .LVU4202
 16110 0014 3119     		adds	r1, r6, r4
 16111 0016 2046     		mov	r0, r4
 16112 0018 0134     		adds	r4, r4, #1
 16113              	.LVL1184:
1946:src/xeq.c     **** }
 16114              		.loc 1 1946 3 is_stmt 0 discriminator 3 view .LVU4203
 16115 001a FFF7FEFF 		bl	copyreg_n
 16116              	.LVL1185:
1945:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16117              		.loc 1 1945 17 is_stmt 1 discriminator 3 view .LVU4204
1945:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16118              		.loc 1 1945 12 discriminator 3 view .LVU4205
1945:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 16119              		.loc 1 1945 2 is_stmt 0 discriminator 3 view .LVU4206
 16120 001e AC42     		cmp	r4, r5
 16121 0020 F8D1     		bne	.L1120
 16122              	.L1118:
1947:src/xeq.c     **** 
 16123              		.loc 1 1947 1 view .LVU4207
 16124 0022 70BD     		pop	{r4, r5, r6, pc}
 16125              		.cfi_endproc
 16126              	.LFE144:
 16128              		.section	.text.cmdrclstk,"ax",%progbits
 16129              		.align	1
 16130              		.p2align 2,,3
 16131              		.global	cmdrclstk
 16132              		.syntax unified
 16133              		.thumb
 16134              		.thumb_func
 16135              		.fpu fpv4-sp-d16
 16137              	cmdrclstk:
 16138              	.LVL1186:
 16139              	.LFB145:
1949:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16140              		.loc 1 1949 48 is_stmt 1 view -0
 16141              		.cfi_startproc
 16142              		@ args = 0, pretend = 0, frame = 0
 16143              		@ frame_needed = 0, uses_anonymous_args = 0
1950:src/xeq.c     **** 
 16144              		.loc 1 1950 2 view .LVU4209
1949:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16145              		.loc 1 1949 48 is_stmt 0 view .LVU4210
 16146 0000 70B5     		push	{r4, r5, r6, lr}
 16147              		.cfi_def_cfa_offset 16
 16148              		.cfi_offset 4, -16
 16149              		.cfi_offset 5, -12
 16150              		.cfi_offset 6, -8
 16151              		.cfi_offset 14, -4
1949:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
ARM GAS  /tmp/cciWh9P3.s 			page 449


 16152              		.loc 1 1949 48 view .LVU4211
 16153 0002 0646     		mov	r6, r0
1950:src/xeq.c     **** 
 16154              		.loc 1 1950 13 view .LVU4212
 16155 0004 FFF7FEFF 		bl	check_stack_overlap
 16156              	.LVL1187:
1952:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16157              		.loc 1 1952 2 is_stmt 1 view .LVU4213
1952:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16158              		.loc 1 1952 12 view .LVU4214
1952:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16159              		.loc 1 1952 2 is_stmt 0 view .LVU4215
 16160 0008 051E     		subs	r5, r0, #0
 16161 000a 09DD     		ble	.L1123
 16162 000c 6435     		adds	r5, r5, #100
 16163 000e 643E     		subs	r6, r6, #100
 16164              	.LVL1188:
1952:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16165              		.loc 1 1952 2 view .LVU4216
 16166 0010 6424     		movs	r4, #100
 16167              	.LVL1189:
 16168              	.L1125:
1953:src/xeq.c     **** }
 16169              		.loc 1 1953 3 is_stmt 1 discriminator 3 view .LVU4217
 16170 0012 3119     		adds	r1, r6, r4
 16171 0014 2046     		mov	r0, r4
 16172 0016 0134     		adds	r4, r4, #1
 16173              	.LVL1190:
1953:src/xeq.c     **** }
 16174              		.loc 1 1953 3 is_stmt 0 discriminator 3 view .LVU4218
 16175 0018 FFF7FEFF 		bl	copyreg_n
 16176              	.LVL1191:
1952:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16177              		.loc 1 1952 17 is_stmt 1 discriminator 3 view .LVU4219
1952:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16178              		.loc 1 1952 12 discriminator 3 view .LVU4220
1952:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 16179              		.loc 1 1952 2 is_stmt 0 discriminator 3 view .LVU4221
 16180 001c AC42     		cmp	r4, r5
 16181 001e F8D1     		bne	.L1125
 16182              	.LVL1192:
 16183              	.L1123:
1954:src/xeq.c     **** 
 16184              		.loc 1 1954 1 view .LVU4222
 16185 0020 70BD     		pop	{r4, r5, r6, pc}
 16186              		.cfi_endproc
 16187              	.LFE145:
 16189 0022 00BF     		.section	.text.find_opcode_from,"ax",%progbits
 16190              		.align	1
 16191              		.p2align 2,,3
 16192              		.global	find_opcode_from
 16193              		.syntax unified
 16194              		.thumb
 16195              		.thumb_func
 16196              		.fpu fpv4-sp-d16
 16198              	find_opcode_from:
 16199              	.LVL1193:
ARM GAS  /tmp/cciWh9P3.s 			page 450


 16200              	.LFB147:
1987:src/xeq.c     **** 	unsigned short int top;
 16201              		.loc 1 1987 81 is_stmt 1 view -0
 16202              		.cfi_startproc
 16203              		@ args = 0, pretend = 0, frame = 8
 16204              		@ frame_needed = 0, uses_anonymous_args = 0
1987:src/xeq.c     **** 	unsigned short int top;
 16205              		.loc 1 1987 81 is_stmt 0 view .LVU4224
 16206 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 16207              		.cfi_def_cfa_offset 24
 16208              		.cfi_offset 4, -24
 16209              		.cfi_offset 5, -20
 16210              		.cfi_offset 6, -16
 16211              		.cfi_offset 7, -12
 16212              		.cfi_offset 8, -8
 16213              		.cfi_offset 14, -4
1990:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 16214              		.loc 1 1990 12 view .LVU4225
 16215 0004 02F00207 		and	r7, r2, #2
1987:src/xeq.c     **** 	unsigned short int top;
 16216              		.loc 1 1987 81 view .LVU4226
 16217 0008 82B0     		sub	sp, sp, #8
 16218              		.cfi_def_cfa_offset 32
1987:src/xeq.c     **** 	unsigned short int top;
 16219              		.loc 1 1987 81 view .LVU4227
 16220 000a 9046     		mov	r8, r2
 16221 000c 0E46     		mov	r6, r1
1993:src/xeq.c     **** 	count -= top;
 16222              		.loc 1 1993 14 view .LVU4228
 16223 000e 0DF10602 		add	r2, sp, #6
 16224              	.LVL1194:
1993:src/xeq.c     **** 	count -= top;
 16225              		.loc 1 1993 14 view .LVU4229
 16226 0012 3946     		mov	r1, r7
 16227              	.LVL1195:
1987:src/xeq.c     **** 	unsigned short int top;
 16228              		.loc 1 1987 81 view .LVU4230
 16229 0014 0446     		mov	r4, r0
1988:src/xeq.c     **** 	int count;
 16230              		.loc 1 1988 2 is_stmt 1 view .LVU4231
1989:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
 16231              		.loc 1 1989 2 view .LVU4232
1990:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 16232              		.loc 1 1990 2 view .LVU4233
 16233              	.LVL1196:
1991:src/xeq.c     **** 
 16234              		.loc 1 1991 2 view .LVU4234
1993:src/xeq.c     **** 	count -= top;
 16235              		.loc 1 1993 2 view .LVU4235
1993:src/xeq.c     **** 	count -= top;
 16236              		.loc 1 1993 14 is_stmt 0 view .LVU4236
 16237 0016 FFF7FEFF 		bl	find_section_bounds
 16238              	.LVL1197:
1994:src/xeq.c     **** 	while (count--) {
 16239              		.loc 1 1994 8 view .LVU4237
 16240 001a BDF80650 		ldrh	r5, [sp, #6]
1993:src/xeq.c     **** 	count -= top;
ARM GAS  /tmp/cciWh9P3.s 			page 451


 16241              		.loc 1 1993 8 view .LVU4238
 16242 001e 0130     		adds	r0, r0, #1
 16243              	.LVL1198:
1994:src/xeq.c     **** 	while (count--) {
 16244              		.loc 1 1994 2 is_stmt 1 view .LVU4239
1995:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16245              		.loc 1 1995 2 view .LVU4240
1995:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16246              		.loc 1 1995 8 view .LVU4241
1995:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16247              		.loc 1 1995 8 is_stmt 0 view .LVU4242
 16248 0020 451B     		subs	r5, r0, r5
 16249              	.LVL1199:
1995:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16250              		.loc 1 1995 8 view .LVU4243
 16251 0022 05D1     		bne	.L1131
 16252 0024 10E0     		b	.L1129
 16253              	.LVL1200:
 16254              	.L1139:
2001:src/xeq.c     **** 	}
 16255              		.loc 1 2001 8 view .LVU4244
 16256 0026 FFF7FEFF 		bl	do_inc
 16257              	.LVL1201:
1995:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16258              		.loc 1 1995 8 view .LVU4245
 16259 002a 013D     		subs	r5, r5, #1
 16260              	.LVL1202:
2001:src/xeq.c     **** 	}
 16261              		.loc 1 2001 8 view .LVU4246
 16262 002c 0446     		mov	r4, r0
 16263              	.LVL1203:
1995:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16264              		.loc 1 1995 8 is_stmt 1 view .LVU4247
1995:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 16265              		.loc 1 1995 8 is_stmt 0 view .LVU4248
 16266 002e 0BD0     		beq	.L1129
 16267              	.LVL1204:
 16268              	.L1131:
1999:src/xeq.c     **** 			return pc;
 16269              		.loc 1 1999 3 is_stmt 1 view .LVU4249
1999:src/xeq.c     **** 			return pc;
 16270              		.loc 1 1999 7 is_stmt 0 view .LVU4250
 16271 0030 2046     		mov	r0, r4
 16272 0032 FFF7FEFF 		bl	getprog
 16273              	.LVL1205:
2001:src/xeq.c     **** 	}
 16274              		.loc 1 2001 3 is_stmt 1 view .LVU4251
1999:src/xeq.c     **** 			return pc;
 16275              		.loc 1 1999 7 is_stmt 0 view .LVU4252
 16276 0036 0346     		mov	r3, r0
1999:src/xeq.c     **** 			return pc;
 16277              		.loc 1 1999 6 view .LVU4253
 16278 0038 B342     		cmp	r3, r6
2001:src/xeq.c     **** 	}
 16279              		.loc 1 2001 8 view .LVU4254
 16280 003a 3946     		mov	r1, r7
 16281 003c 2046     		mov	r0, r4
ARM GAS  /tmp/cciWh9P3.s 			page 452


1999:src/xeq.c     **** 			return pc;
 16282              		.loc 1 1999 6 view .LVU4255
 16283 003e F2D1     		bne	.L1139
 16284              	.LVL1206:
 16285              	.L1128:
2006:src/xeq.c     **** 
 16286              		.loc 1 2006 1 view .LVU4256
 16287 0040 2046     		mov	r0, r4
 16288 0042 02B0     		add	sp, sp, #8
 16289              		.cfi_remember_state
 16290              		.cfi_def_cfa_offset 24
 16291              		@ sp needed
 16292 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 16293              	.LVL1207:
 16294              	.L1129:
 16295              		.cfi_restore_state
2003:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16296              		.loc 1 2003 2 is_stmt 1 view .LVU4257
2003:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16297              		.loc 1 2003 5 is_stmt 0 view .LVU4258
 16298 0048 18F00104 		ands	r4, r8, #1
 16299 004c F8D0     		beq	.L1128
 16300              	.LBB2798:
 16301              	.LBI2798:
1987:src/xeq.c     **** 	unsigned short int top;
 16302              		.loc 1 1987 14 is_stmt 1 view .LVU4259
 16303              	.LVL1208:
 16304              	.LBB2799:
2004:src/xeq.c     **** 	return 0;
 16305              		.loc 1 2004 3 view .LVU4260
 16306              	.LBB2800:
 16307              	.LBI2800:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16308              		.loc 1 536 5 view .LVU4261
 16309              	.LBB2801:
 537:src/xeq.c     **** 		Error = e;
 16310              		.loc 1 537 2 view .LVU4262
 537:src/xeq.c     **** 		Error = e;
 16311              		.loc 1 537 12 is_stmt 0 view .LVU4263
 16312 004e 074B     		ldr	r3, .L1140
 537:src/xeq.c     **** 		Error = e;
 16313              		.loc 1 537 5 view .LVU4264
 16314 0050 1C68     		ldr	r4, [r3]
 16315 0052 2CB9     		cbnz	r4, .L1133
 16316              	.LVL1209:
 16317              	.LBB2802:
 16318              	.LBI2802:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16319              		.loc 1 536 5 is_stmt 1 view .LVU4265
 16320              	.LBB2803:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 16321              		.loc 1 538 3 view .LVU4266
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 16322              		.loc 1 538 9 is_stmt 0 view .LVU4267
 16323 0054 0622     		movs	r2, #6
 16324              	.LBE2803:
 16325              	.LBE2802:
ARM GAS  /tmp/cciWh9P3.s 			page 453


 16326              	.LBE2801:
 16327              	.LBE2800:
 16328              	.LBE2799:
 16329              	.LBE2798:
2006:src/xeq.c     **** 
 16330              		.loc 1 2006 1 view .LVU4268
 16331 0056 2046     		mov	r0, r4
 16332              	.LBB2809:
 16333              	.LBB2808:
 16334              	.LBB2807:
 16335              	.LBB2806:
 16336              	.LBB2805:
 16337              	.LBB2804:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 16338              		.loc 1 538 9 view .LVU4269
 16339 0058 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 16340              		.loc 1 539 3 is_stmt 1 view .LVU4270
 16341              	.LBE2804:
 16342              	.LBE2805:
 16343              	.LBE2806:
 16344              	.LBE2807:
 16345              	.LBE2808:
 16346              	.LBE2809:
2006:src/xeq.c     **** 
 16347              		.loc 1 2006 1 is_stmt 0 view .LVU4271
 16348 005a 02B0     		add	sp, sp, #8
 16349              		.cfi_remember_state
 16350              		.cfi_def_cfa_offset 24
 16351              		@ sp needed
 16352 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 16353              	.LVL1210:
 16354              	.L1133:
 16355              		.cfi_restore_state
2005:src/xeq.c     **** }
 16356              		.loc 1 2005 9 view .LVU4272
 16357 0060 0024     		movs	r4, #0
 16358              	.LVL1211:
2006:src/xeq.c     **** 
 16359              		.loc 1 2006 1 view .LVU4273
 16360 0062 2046     		mov	r0, r4
 16361 0064 02B0     		add	sp, sp, #8
 16362              		.cfi_def_cfa_offset 24
 16363              		@ sp needed
 16364 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 16365              	.LVL1212:
 16366              	.L1141:
2006:src/xeq.c     **** 
 16367              		.loc 1 2006 1 view .LVU4274
 16368 006a 00BF     		.align	2
 16369              	.L1140:
 16370 006c 00000000 		.word	Error
 16371              		.cfi_endproc
 16372              	.LFE147:
 16374              		.section	.text.find_label_from,"ax",%progbits
 16375              		.align	1
 16376              		.p2align 2,,3
ARM GAS  /tmp/cciWh9P3.s 			page 454


 16377              		.global	find_label_from
 16378              		.syntax unified
 16379              		.thumb
 16380              		.thumb_func
 16381              		.fpu fpv4-sp-d16
 16383              	find_label_from:
 16384              	.LVL1213:
 16385              	.LFB148:
2009:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 16386              		.loc 1 2009 76 is_stmt 1 view -0
 16387              		.cfi_startproc
 16388              		@ args = 0, pretend = 0, frame = 0
 16389              		@ frame_needed = 0, uses_anonymous_args = 0
 16390              		@ link register save eliminated.
2010:src/xeq.c     **** }
 16391              		.loc 1 2010 2 view .LVU4276
2010:src/xeq.c     **** }
 16392              		.loc 1 2010 9 is_stmt 0 view .LVU4277
 16393 0000 41F4C441 		orr	r1, r1, #25088
 16394              	.LVL1214:
2010:src/xeq.c     **** }
 16395              		.loc 1 2010 9 view .LVU4278
 16396 0004 FFF7FEBF 		b	find_opcode_from
 16397              	.LVL1215:
2010:src/xeq.c     **** }
 16398              		.loc 1 2010 9 view .LVU4279
 16399              		.cfi_endproc
 16400              	.LFE148:
 16402              		.section	.text.op_rtn,"ax",%progbits
 16403              		.align	1
 16404              		.p2align 2,,3
 16405              		.global	op_rtn
 16406              		.syntax unified
 16407              		.thumb
 16408              		.thumb_func
 16409              		.fpu fpv4-sp-d16
 16411              	op_rtn:
 16412              	.LVL1216:
 16413              	.LFB151:
2068:src/xeq.c     **** 	if (! Running && ! XromRunning) {
 16414              		.loc 1 2068 28 is_stmt 1 view -0
 16415              		.cfi_startproc
 16416              		@ args = 0, pretend = 0, frame = 0
 16417              		@ frame_needed = 0, uses_anonymous_args = 0
 16418              		@ link register save eliminated.
2069:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16419              		.loc 1 2069 2 view .LVU4281
2069:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16420              		.loc 1 2069 6 is_stmt 0 view .LVU4282
 16421 0000 074A     		ldr	r2, .L1146
2069:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16422              		.loc 1 2069 19 view .LVU4283
 16423 0002 084B     		ldr	r3, .L1146+4
2069:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 16424              		.loc 1 2069 16 view .LVU4284
 16425 0004 1268     		ldr	r2, [r2]
 16426 0006 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 455


 16427 0008 1343     		orrs	r3, r2, r3
 16428 000a 06D0     		beq	.L1145
2074:src/xeq.c     **** }
 16429              		.loc 1 2074 3 is_stmt 1 view .LVU4285
 16430 000c A0F13900 		sub	r0, #57
 16431              	.LVL1217:
2074:src/xeq.c     **** }
 16432              		.loc 1 2074 3 is_stmt 0 view .LVU4286
 16433 0010 B0FA80F0 		clz	r0, r0
 16434 0014 4009     		lsrs	r0, r0, #5
 16435 0016 FFF7FEBF 		b	do_rtn
 16436              	.LVL1218:
 16437              	.L1145:
2071:src/xeq.c     **** 	}
 16438              		.loc 1 2071 3 is_stmt 1 view .LVU4287
 16439 001a FFF7FEBF 		b	clrretstk_pc
 16440              	.LVL1219:
 16441              	.L1147:
2071:src/xeq.c     **** 	}
 16442              		.loc 1 2071 3 is_stmt 0 view .LVU4288
 16443 001e 00BF     		.align	2
 16444              	.L1146:
 16445 0020 00000000 		.word	Running
 16446 0024 00000000 		.word	XromRunning
 16447              		.cfi_endproc
 16448              	.LFE151:
 16450              		.section	.text.op_popusr,"ax",%progbits
 16451              		.align	1
 16452              		.p2align 2,,3
 16453              		.global	op_popusr
 16454              		.syntax unified
 16455              		.thumb
 16456              		.thumb_func
 16457              		.fpu fpv4-sp-d16
 16459              	op_popusr:
 16460              	.LVL1220:
 16461              	.LFB155:
2115:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 16462              		.loc 1 2115 31 is_stmt 1 view -0
 16463              		.cfi_startproc
 16464              		@ args = 0, pretend = 0, frame = 0
 16465              		@ frame_needed = 0, uses_anonymous_args = 0
 16466              		@ link register save eliminated.
2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16467              		.loc 1 2116 2 view .LVU4290
2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16468              		.loc 1 2116 25 is_stmt 0 view .LVU4291
 16469 0000 134A     		ldr	r2, .L1150
2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16470              		.loc 1 2116 24 view .LVU4292
 16471 0002 144B     		ldr	r3, .L1150+4
2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16472              		.loc 1 2116 25 view .LVU4293
 16473 0004 1268     		ldr	r2, [r2]
2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16474              		.loc 1 2116 24 view .LVU4294
 16475 0006 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 456


2115:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 16476              		.loc 1 2115 31 view .LVU4295
 16477 0008 70B4     		push	{r4, r5, r6}
 16478              		.cfi_def_cfa_offset 12
 16479              		.cfi_offset 4, -12
 16480              		.cfi_offset 5, -8
 16481              		.cfi_offset 6, -4
2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16482              		.loc 1 2116 25 view .LVU4296
 16483 000a B2F9E257 		ldrsh	r5, [r2, #2018]
2118:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16484              		.loc 1 2118 13 view .LVU4297
 16485 000e 124E     		ldr	r6, .L1150+8
2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16486              		.loc 1 2116 34 view .LVU4298
 16487 0010 A9B2     		uxth	r1, r5
 16488 0012 4C1C     		adds	r4, r1, #1
 16489 0014 24B2     		sxth	r4, r4
2117:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16490              		.loc 1 2117 34 view .LVU4299
 16491 0016 881C     		adds	r0, r1, #2
 16492              	.LVL1221:
2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16493              		.loc 1 2116 34 view .LVU4300
 16494 0018 A2F8E247 		strh	r4, [r2, #2018]	@ movhi
2117:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16495              		.loc 1 2117 34 view .LVU4301
 16496 001c 00B2     		sxth	r0, r0
2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16497              		.loc 1 2116 24 view .LVU4302
 16498 001e 33F81550 		ldrh	r5, [r3, r5, lsl #1]
2117:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16499              		.loc 1 2117 34 view .LVU4303
 16500 0022 A2F8E207 		strh	r0, [r2, #2018]	@ movhi
2117:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16501              		.loc 1 2117 24 view .LVU4304
 16502 0026 33F91440 		ldrsh	r4, [r3, r4, lsl #1]
2117:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16503              		.loc 1 2117 12 view .LVU4305
 16504 002a A2F8DE47 		strh	r4, [r2, #2014]	@ movhi
2118:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16505              		.loc 1 2118 34 view .LVU4306
 16506 002e 0331     		adds	r1, r1, #3
 16507 0030 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
2119:src/xeq.c     **** }
 16508              		.loc 1 2119 20 view .LVU4307
 16509 0034 33F81420 		ldrh	r2, [r3, r4, lsl #1]
2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16510              		.loc 1 2116 16 view .LVU4308
 16511 0038 0849     		ldr	r1, .L1150+12
2118:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16512              		.loc 1 2118 24 view .LVU4309
 16513 003a 33F81000 		ldrh	r0, [r3, r0, lsl #1]
 16514 003e 3060     		str	r0, [r6]
2119:src/xeq.c     **** }
 16515              		.loc 1 2119 20 view .LVU4310
 16516 0040 22F40052 		bic	r2, r2, #8192
ARM GAS  /tmp/cciWh9P3.s 			page 457


2116:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 16517              		.loc 1 2116 24 view .LVU4311
 16518 0044 0D60     		str	r5, [r1]
2117:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 16519              		.loc 1 2117 2 is_stmt 1 view .LVU4312
2118:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 16520              		.loc 1 2118 2 view .LVU4313
2119:src/xeq.c     **** }
 16521              		.loc 1 2119 2 view .LVU4314
2119:src/xeq.c     **** }
 16522              		.loc 1 2119 20 is_stmt 0 view .LVU4315
 16523 0046 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
2120:src/xeq.c     **** 
 16524              		.loc 1 2120 1 view .LVU4316
 16525 004a 70BC     		pop	{r4, r5, r6}
 16526              		.cfi_restore 6
 16527              		.cfi_restore 5
 16528              		.cfi_restore 4
 16529              		.cfi_def_cfa_offset 0
 16530 004c 7047     		bx	lr
 16531              	.L1151:
 16532 004e 00BF     		.align	2
 16533              	.L1150:
 16534 0050 00000000 		.word	main_ram
 16535 0054 00000000 		.word	RetStk
 16536 0058 00000000 		.word	XromUserPc
 16537 005c 00000000 		.word	UserLocalRegs
 16538              		.cfi_endproc
 16539              	.LFE155:
 16541              		.section	.text.findmultilbl,"ax",%progbits
 16542              		.align	1
 16543              		.p2align 2,,3
 16544              		.global	findmultilbl
 16545              		.syntax unified
 16546              		.thumb
 16547              		.thumb_func
 16548              		.fpu fpv4-sp-d16
 16550              	findmultilbl:
 16551              	.LVL1222:
 16552              	.LFB159:
2148:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16553              		.loc 1 2148 54 is_stmt 1 view -0
 16554              		.cfi_startproc
 16555              		@ args = 0, pretend = 0, frame = 0
 16556              		@ frame_needed = 0, uses_anonymous_args = 0
2149:src/xeq.c     **** 	unsigned int lbl;
 16557              		.loc 1 2149 2 view .LVU4318
2148:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16558              		.loc 1 2148 54 is_stmt 0 view .LVU4319
 16559 0000 38B5     		push	{r3, r4, r5, lr}
 16560              		.cfi_def_cfa_offset 16
 16561              		.cfi_offset 3, -16
 16562              		.cfi_offset 4, -12
 16563              		.cfi_offset 5, -8
 16564              		.cfi_offset 14, -4
2152:src/xeq.c     **** 	if (lbl == 0)
 16565              		.loc 1 2152 8 view .LVU4320
ARM GAS  /tmp/cciWh9P3.s 			page 458


 16566 0002 0022     		movs	r2, #0
2149:src/xeq.c     **** 	unsigned int lbl;
 16567              		.loc 1 2149 15 view .LVU4321
 16568 0004 20F47064 		bic	r4, r0, #3840
 16569              	.LVL1223:
2150:src/xeq.c     **** 
 16570              		.loc 1 2150 2 is_stmt 1 view .LVU4322
2152:src/xeq.c     **** 	if (lbl == 0)
 16571              		.loc 1 2152 2 view .LVU4323
2148:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16572              		.loc 1 2148 54 is_stmt 0 view .LVU4324
 16573 0008 0D46     		mov	r5, r1
2152:src/xeq.c     **** 	if (lbl == 0)
 16574              		.loc 1 2152 8 view .LVU4325
 16575 000a 1046     		mov	r0, r2
 16576              	.LVL1224:
2152:src/xeq.c     **** 	if (lbl == 0)
 16577              		.loc 1 2152 8 view .LVU4326
 16578 000c 2146     		mov	r1, r4
 16579              	.LVL1225:
2152:src/xeq.c     **** 	if (lbl == 0)
 16580              		.loc 1 2152 8 view .LVU4327
 16581 000e FFF7FEFF 		bl	find_opcode_from
 16582              	.LVL1226:
2153:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 16583              		.loc 1 2153 2 is_stmt 1 view .LVU4328
2153:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 16584              		.loc 1 2153 5 is_stmt 0 view .LVU4329
 16585 0012 00B1     		cbz	r0, .L1158
 16586              	.L1152:
2160:src/xeq.c     **** 
 16587              		.loc 1 2160 1 view .LVU4330
 16588 0014 38BD     		pop	{r3, r4, r5, pc}
 16589              	.LVL1227:
 16590              	.L1158:
2154:src/xeq.c     **** 	if (lbl == 0)
 16591              		.loc 1 2154 3 is_stmt 1 view .LVU4331
2154:src/xeq.c     **** 	if (lbl == 0)
 16592              		.loc 1 2154 9 is_stmt 0 view .LVU4332
 16593 0016 0246     		mov	r2, r0
 16594 0018 2146     		mov	r1, r4
 16595 001a 4FF48040 		mov	r0, #16384
 16596              	.LVL1228:
2154:src/xeq.c     **** 	if (lbl == 0)
 16597              		.loc 1 2154 9 view .LVU4333
 16598 001e FFF7FEFF 		bl	find_opcode_from
 16599              	.LVL1229:
2155:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 16600              		.loc 1 2155 2 is_stmt 1 view .LVU4334
2155:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 16601              		.loc 1 2155 5 is_stmt 0 view .LVU4335
 16602 0022 0028     		cmp	r0, #0
 16603 0024 F6D1     		bne	.L1152
2156:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 16604              		.loc 1 2156 3 is_stmt 1 view .LVU4336
2156:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 16605              		.loc 1 2156 9 is_stmt 0 view .LVU4337
ARM GAS  /tmp/cciWh9P3.s 			page 459


 16606 0026 0246     		mov	r2, r0
 16607 0028 2146     		mov	r1, r4
 16608 002a 4FF40040 		mov	r0, #32768
 16609              	.LVL1230:
2156:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 16610              		.loc 1 2156 9 view .LVU4338
 16611 002e FFF7FEFF 		bl	find_opcode_from
 16612              	.LVL1231:
2157:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16613              		.loc 1 2157 2 is_stmt 1 view .LVU4339
2157:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16614              		.loc 1 2157 5 is_stmt 0 view .LVU4340
 16615 0032 0028     		cmp	r0, #0
 16616 0034 EED1     		bne	.L1152
2157:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 16617              		.loc 1 2157 15 discriminator 1 view .LVU4341
 16618 0036 EB07     		lsls	r3, r5, #31
 16619 0038 ECD5     		bpl	.L1152
 16620              	.LBB2816:
 16621              	.LBI2816:
2148:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 16622              		.loc 1 2148 14 is_stmt 1 view .LVU4342
 16623              	.LVL1232:
 16624              	.LBB2817:
2158:src/xeq.c     **** 	return lbl;
 16625              		.loc 1 2158 3 view .LVU4343
 16626              	.LBB2818:
 16627              	.LBI2818:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16628              		.loc 1 536 5 view .LVU4344
 16629              	.LBB2819:
 537:src/xeq.c     **** 		Error = e;
 16630              		.loc 1 537 2 view .LVU4345
 537:src/xeq.c     **** 		Error = e;
 16631              		.loc 1 537 12 is_stmt 0 view .LVU4346
 16632 003a 034B     		ldr	r3, .L1159
 537:src/xeq.c     **** 		Error = e;
 16633              		.loc 1 537 5 view .LVU4347
 16634 003c 1A68     		ldr	r2, [r3]
 16635 003e 002A     		cmp	r2, #0
 16636 0040 E8D1     		bne	.L1152
 16637              	.LVL1233:
 16638              	.LBB2820:
 16639              	.LBI2820:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 16640              		.loc 1 536 5 is_stmt 1 view .LVU4348
 16641              	.LBB2821:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 16642              		.loc 1 538 3 view .LVU4349
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 16643              		.loc 1 538 9 is_stmt 0 view .LVU4350
 16644 0042 0622     		movs	r2, #6
 16645 0044 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 16646              		.loc 1 539 3 is_stmt 1 view .LVU4351
 16647              	.LVL1234:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/cciWh9P3.s 			page 460


 16648              		.loc 1 539 3 is_stmt 0 view .LVU4352
 16649              	.LBE2821:
 16650              	.LBE2820:
 16651              	.LBE2819:
 16652              	.LBE2818:
 16653              	.LBE2817:
 16654              	.LBE2816:
2159:src/xeq.c     **** }
 16655              		.loc 1 2159 2 is_stmt 1 view .LVU4353
2160:src/xeq.c     **** 
 16656              		.loc 1 2160 1 is_stmt 0 view .LVU4354
 16657 0046 38BD     		pop	{r3, r4, r5, pc}
 16658              	.LVL1235:
 16659              	.L1160:
2160:src/xeq.c     **** 
 16660              		.loc 1 2160 1 view .LVU4355
 16661              		.align	2
 16662              	.L1159:
 16663 0048 00000000 		.word	Error
 16664              		.cfi_endproc
 16665              	.LFE159:
 16667              		.section	.text.convC2F,"ax",%progbits
 16668              		.align	1
 16669              		.p2align 2,,3
 16670              		.global	convC2F
 16671              		.syntax unified
 16672              		.thumb
 16673              		.thumb_func
 16674              		.fpu fpv4-sp-d16
 16676              	convC2F:
 16677              	.LVL1236:
 16678              	.LFB167:
2265:src/xeq.c     **** 	decNumber s;
 16679              		.loc 1 2265 54 is_stmt 1 view -0
 16680              		.cfi_startproc
 16681              		@ args = 0, pretend = 0, frame = 40
 16682              		@ frame_needed = 0, uses_anonymous_args = 0
2266:src/xeq.c     **** 
 16683              		.loc 1 2266 2 view .LVU4357
2268:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 16684              		.loc 1 2268 2 view .LVU4358
2265:src/xeq.c     **** 	decNumber s;
 16685              		.loc 1 2265 54 is_stmt 0 view .LVU4359
 16686 0000 10B5     		push	{r4, lr}
 16687              		.cfi_def_cfa_offset 8
 16688              		.cfi_offset 4, -8
 16689              		.cfi_offset 14, -4
 16690 0002 8AB0     		sub	sp, sp, #40
 16691              		.cfi_def_cfa_offset 48
2265:src/xeq.c     **** 	decNumber s;
 16692              		.loc 1 2265 54 view .LVU4360
 16693 0004 0446     		mov	r4, r0
2268:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 16694              		.loc 1 2268 2 view .LVU4361
 16695 0006 054A     		ldr	r2, .L1163
 16696 0008 01A8     		add	r0, sp, #4
 16697              	.LVL1237:
ARM GAS  /tmp/cciWh9P3.s 			page 461


2268:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 16698              		.loc 1 2268 2 view .LVU4362
 16699 000a FFF7FEFF 		bl	dn_multiply
 16700              	.LVL1238:
2269:src/xeq.c     **** }
 16701              		.loc 1 2269 2 is_stmt 1 view .LVU4363
2269:src/xeq.c     **** }
 16702              		.loc 1 2269 9 is_stmt 0 view .LVU4364
 16703 000e 044A     		ldr	r2, .L1163+4
 16704 0010 2046     		mov	r0, r4
 16705 0012 01A9     		add	r1, sp, #4
 16706 0014 FFF7FEFF 		bl	dn_add
 16707              	.LVL1239:
2270:src/xeq.c     **** 
 16708              		.loc 1 2270 1 view .LVU4365
 16709 0018 0AB0     		add	sp, sp, #40
 16710              		.cfi_def_cfa_offset 8
 16711              		@ sp needed
 16712 001a 10BD     		pop	{r4, pc}
 16713              	.LVL1240:
 16714              	.L1164:
2270:src/xeq.c     **** 
 16715              		.loc 1 2270 1 view .LVU4366
 16716              		.align	2
 16717              	.L1163:
 16718 001c 00000000 		.word	const_9on5
 16719 0020 00000000 		.word	const_32
 16720              		.cfi_endproc
 16721              	.LFE167:
 16723              		.section	.text.convF2C,"ax",%progbits
 16724              		.align	1
 16725              		.p2align 2,,3
 16726              		.global	convF2C
 16727              		.syntax unified
 16728              		.thumb
 16729              		.thumb_func
 16730              		.fpu fpv4-sp-d16
 16732              	convF2C:
 16733              	.LVL1241:
 16734              	.LFB168:
2272:src/xeq.c     **** 	decNumber s;
 16735              		.loc 1 2272 54 is_stmt 1 view -0
 16736              		.cfi_startproc
 16737              		@ args = 0, pretend = 0, frame = 40
 16738              		@ frame_needed = 0, uses_anonymous_args = 0
2273:src/xeq.c     **** 
 16739              		.loc 1 2273 2 view .LVU4368
2275:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 16740              		.loc 1 2275 2 view .LVU4369
2272:src/xeq.c     **** 	decNumber s;
 16741              		.loc 1 2272 54 is_stmt 0 view .LVU4370
 16742 0000 10B5     		push	{r4, lr}
 16743              		.cfi_def_cfa_offset 8
 16744              		.cfi_offset 4, -8
 16745              		.cfi_offset 14, -4
 16746 0002 8AB0     		sub	sp, sp, #40
 16747              		.cfi_def_cfa_offset 48
ARM GAS  /tmp/cciWh9P3.s 			page 462


2272:src/xeq.c     **** 	decNumber s;
 16748              		.loc 1 2272 54 view .LVU4371
 16749 0004 0446     		mov	r4, r0
2275:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 16750              		.loc 1 2275 2 view .LVU4372
 16751 0006 054A     		ldr	r2, .L1167
 16752 0008 01A8     		add	r0, sp, #4
 16753              	.LVL1242:
2275:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 16754              		.loc 1 2275 2 view .LVU4373
 16755 000a FFF7FEFF 		bl	dn_subtract
 16756              	.LVL1243:
2276:src/xeq.c     **** }
 16757              		.loc 1 2276 2 is_stmt 1 view .LVU4374
2276:src/xeq.c     **** }
 16758              		.loc 1 2276 9 is_stmt 0 view .LVU4375
 16759 000e 044A     		ldr	r2, .L1167+4
 16760 0010 2046     		mov	r0, r4
 16761 0012 01A9     		add	r1, sp, #4
 16762 0014 FFF7FEFF 		bl	dn_divide
 16763              	.LVL1244:
2277:src/xeq.c     **** 
 16764              		.loc 1 2277 1 view .LVU4376
 16765 0018 0AB0     		add	sp, sp, #40
 16766              		.cfi_def_cfa_offset 8
 16767              		@ sp needed
 16768 001a 10BD     		pop	{r4, pc}
 16769              	.LVL1245:
 16770              	.L1168:
2277:src/xeq.c     **** 
 16771              		.loc 1 2277 1 view .LVU4377
 16772              		.align	2
 16773              	.L1167:
 16774 001c 00000000 		.word	const_32
 16775 0020 00000000 		.word	const_9on5
 16776              		.cfi_endproc
 16777              	.LFE168:
 16779              		.section	.text.convDB2AR,"ax",%progbits
 16780              		.align	1
 16781              		.p2align 2,,3
 16782              		.global	convDB2AR
 16783              		.syntax unified
 16784              		.thumb
 16785              		.thumb_func
 16786              		.fpu fpv4-sp-d16
 16788              	convDB2AR:
 16789              	.LVL1246:
 16790              	.LFB169:
2279:src/xeq.c     **** 	decNumber t;
 16791              		.loc 1 2279 56 is_stmt 1 view -0
 16792              		.cfi_startproc
 16793              		@ args = 0, pretend = 0, frame = 40
 16794              		@ frame_needed = 0, uses_anonymous_args = 0
2280:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
 16795              		.loc 1 2280 2 view .LVU4379
2281:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16796              		.loc 1 2281 2 view .LVU4380
ARM GAS  /tmp/cciWh9P3.s 			page 463


2279:src/xeq.c     **** 	decNumber t;
 16797              		.loc 1 2279 56 is_stmt 0 view .LVU4381
 16798 0000 10B5     		push	{r4, lr}
 16799              		.cfi_def_cfa_offset 8
 16800              		.cfi_offset 4, -8
 16801              		.cfi_offset 14, -4
 16802 0002 8AB0     		sub	sp, sp, #40
 16803              		.cfi_def_cfa_offset 48
2281:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16804              		.loc 1 2281 2 view .LVU4382
 16805 0004 054A     		ldr	r2, .L1171
2279:src/xeq.c     **** 	decNumber t;
 16806              		.loc 1 2279 56 view .LVU4383
 16807 0006 0446     		mov	r4, r0
2281:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16808              		.loc 1 2281 2 view .LVU4384
 16809 0008 01A8     		add	r0, sp, #4
 16810              	.LVL1247:
2281:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16811              		.loc 1 2281 2 view .LVU4385
 16812 000a FFF7FEFF 		bl	dn_multiply
 16813              	.LVL1248:
2282:src/xeq.c     **** }
 16814              		.loc 1 2282 2 is_stmt 1 view .LVU4386
2282:src/xeq.c     **** }
 16815              		.loc 1 2282 9 is_stmt 0 view .LVU4387
 16816 000e 01A9     		add	r1, sp, #4
 16817 0010 2046     		mov	r0, r4
 16818 0012 FFF7FEFF 		bl	decNumberPow10
 16819              	.LVL1249:
2283:src/xeq.c     **** 
 16820              		.loc 1 2283 1 view .LVU4388
 16821 0016 0AB0     		add	sp, sp, #40
 16822              		.cfi_def_cfa_offset 8
 16823              		@ sp needed
 16824 0018 10BD     		pop	{r4, pc}
 16825              	.LVL1250:
 16826              	.L1172:
2283:src/xeq.c     **** 
 16827              		.loc 1 2283 1 view .LVU4389
 16828 001a 00BF     		.align	2
 16829              	.L1171:
 16830 001c 00000000 		.word	const_0_05
 16831              		.cfi_endproc
 16832              	.LFE169:
 16834              		.section	.text.convAR2DB,"ax",%progbits
 16835              		.align	1
 16836              		.p2align 2,,3
 16837              		.global	convAR2DB
 16838              		.syntax unified
 16839              		.thumb
 16840              		.thumb_func
 16841              		.fpu fpv4-sp-d16
 16843              	convAR2DB:
 16844              	.LVL1251:
 16845              	.LFB170:
2285:src/xeq.c     **** 	decNumber t;
ARM GAS  /tmp/cciWh9P3.s 			page 464


 16846              		.loc 1 2285 56 is_stmt 1 view -0
 16847              		.cfi_startproc
 16848              		@ args = 0, pretend = 0, frame = 40
 16849              		@ frame_needed = 0, uses_anonymous_args = 0
2286:src/xeq.c     **** 	dn_log10(&t, x);
 16850              		.loc 1 2286 2 view .LVU4391
2287:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 16851              		.loc 1 2287 2 view .LVU4392
2285:src/xeq.c     **** 	decNumber t;
 16852              		.loc 1 2285 56 is_stmt 0 view .LVU4393
 16853 0000 10B5     		push	{r4, lr}
 16854              		.cfi_def_cfa_offset 8
 16855              		.cfi_offset 4, -8
 16856              		.cfi_offset 14, -4
 16857 0002 8AB0     		sub	sp, sp, #40
 16858              		.cfi_def_cfa_offset 48
2285:src/xeq.c     **** 	decNumber t;
 16859              		.loc 1 2285 56 view .LVU4394
 16860 0004 0446     		mov	r4, r0
2287:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 16861              		.loc 1 2287 2 view .LVU4395
 16862 0006 01A8     		add	r0, sp, #4
 16863              	.LVL1252:
2287:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 16864              		.loc 1 2287 2 view .LVU4396
 16865 0008 FFF7FEFF 		bl	dn_log10
 16866              	.LVL1253:
2288:src/xeq.c     **** }
 16867              		.loc 1 2288 2 is_stmt 1 view .LVU4397
2288:src/xeq.c     **** }
 16868              		.loc 1 2288 9 is_stmt 0 view .LVU4398
 16869 000c 034A     		ldr	r2, .L1175
 16870 000e 2046     		mov	r0, r4
 16871 0010 01A9     		add	r1, sp, #4
 16872 0012 FFF7FEFF 		bl	dn_multiply
 16873              	.LVL1254:
2289:src/xeq.c     **** 
 16874              		.loc 1 2289 1 view .LVU4399
 16875 0016 0AB0     		add	sp, sp, #40
 16876              		.cfi_def_cfa_offset 8
 16877              		@ sp needed
 16878 0018 10BD     		pop	{r4, pc}
 16879              	.LVL1255:
 16880              	.L1176:
2289:src/xeq.c     **** 
 16881              		.loc 1 2289 1 view .LVU4400
 16882 001a 00BF     		.align	2
 16883              	.L1175:
 16884 001c 00000000 		.word	const_20
 16885              		.cfi_endproc
 16886              	.LFE170:
 16888              		.section	.text.convDB2PR,"ax",%progbits
 16889              		.align	1
 16890              		.p2align 2,,3
 16891              		.global	convDB2PR
 16892              		.syntax unified
 16893              		.thumb
ARM GAS  /tmp/cciWh9P3.s 			page 465


 16894              		.thumb_func
 16895              		.fpu fpv4-sp-d16
 16897              	convDB2PR:
 16898              	.LVL1256:
 16899              	.LFB171:
2291:src/xeq.c     **** 	decNumber t;
 16900              		.loc 1 2291 56 is_stmt 1 view -0
 16901              		.cfi_startproc
 16902              		@ args = 0, pretend = 0, frame = 40
 16903              		@ frame_needed = 0, uses_anonymous_args = 0
2292:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
 16904              		.loc 1 2292 2 view .LVU4402
2293:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16905              		.loc 1 2293 2 view .LVU4403
2291:src/xeq.c     **** 	decNumber t;
 16906              		.loc 1 2291 56 is_stmt 0 view .LVU4404
 16907 0000 10B5     		push	{r4, lr}
 16908              		.cfi_def_cfa_offset 8
 16909              		.cfi_offset 4, -8
 16910              		.cfi_offset 14, -4
 16911 0002 8AB0     		sub	sp, sp, #40
 16912              		.cfi_def_cfa_offset 48
2291:src/xeq.c     **** 	decNumber t;
 16913              		.loc 1 2291 56 view .LVU4405
 16914 0004 0446     		mov	r4, r0
2293:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16915              		.loc 1 2293 2 view .LVU4406
 16916 0006 4FF0FF32 		mov	r2, #-1
 16917 000a 01A8     		add	r0, sp, #4
 16918              	.LVL1257:
2293:src/xeq.c     **** 	return decNumberPow10(r, &t);
 16919              		.loc 1 2293 2 view .LVU4407
 16920 000c FFF7FEFF 		bl	dn_mulpow10
 16921              	.LVL1258:
2294:src/xeq.c     **** }
 16922              		.loc 1 2294 2 is_stmt 1 view .LVU4408
2294:src/xeq.c     **** }
 16923              		.loc 1 2294 9 is_stmt 0 view .LVU4409
 16924 0010 01A9     		add	r1, sp, #4
 16925 0012 2046     		mov	r0, r4
 16926 0014 FFF7FEFF 		bl	decNumberPow10
 16927              	.LVL1259:
2295:src/xeq.c     **** 
 16928              		.loc 1 2295 1 view .LVU4410
 16929 0018 0AB0     		add	sp, sp, #40
 16930              		.cfi_def_cfa_offset 8
 16931              		@ sp needed
 16932 001a 10BD     		pop	{r4, pc}
2295:src/xeq.c     **** 
 16933              		.loc 1 2295 1 view .LVU4411
 16934              		.cfi_endproc
 16935              	.LFE171:
 16937              		.section	.text.convPR2DB,"ax",%progbits
 16938              		.align	1
 16939              		.p2align 2,,3
 16940              		.global	convPR2DB
 16941              		.syntax unified
ARM GAS  /tmp/cciWh9P3.s 			page 466


 16942              		.thumb
 16943              		.thumb_func
 16944              		.fpu fpv4-sp-d16
 16946              	convPR2DB:
 16947              	.LVL1260:
 16948              	.LFB172:
2297:src/xeq.c     **** 	decNumber t;
 16949              		.loc 1 2297 56 is_stmt 1 view -0
 16950              		.cfi_startproc
 16951              		@ args = 0, pretend = 0, frame = 40
 16952              		@ frame_needed = 0, uses_anonymous_args = 0
2298:src/xeq.c     **** 	dn_log10(&t, x);
 16953              		.loc 1 2298 2 view .LVU4413
2299:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 16954              		.loc 1 2299 2 view .LVU4414
2297:src/xeq.c     **** 	decNumber t;
 16955              		.loc 1 2297 56 is_stmt 0 view .LVU4415
 16956 0000 10B5     		push	{r4, lr}
 16957              		.cfi_def_cfa_offset 8
 16958              		.cfi_offset 4, -8
 16959              		.cfi_offset 14, -4
 16960 0002 8AB0     		sub	sp, sp, #40
 16961              		.cfi_def_cfa_offset 48
2297:src/xeq.c     **** 	decNumber t;
 16962              		.loc 1 2297 56 view .LVU4416
 16963 0004 0446     		mov	r4, r0
2299:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 16964              		.loc 1 2299 2 view .LVU4417
 16965 0006 01A8     		add	r0, sp, #4
 16966              	.LVL1261:
2299:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 16967              		.loc 1 2299 2 view .LVU4418
 16968 0008 FFF7FEFF 		bl	dn_log10
 16969              	.LVL1262:
2300:src/xeq.c     **** }
 16970              		.loc 1 2300 2 is_stmt 1 view .LVU4419
2300:src/xeq.c     **** }
 16971              		.loc 1 2300 9 is_stmt 0 view .LVU4420
 16972 000c 2046     		mov	r0, r4
 16973 000e 01A9     		add	r1, sp, #4
 16974 0010 0122     		movs	r2, #1
 16975 0012 FFF7FEFF 		bl	dn_mulpow10
 16976              	.LVL1263:
2301:src/xeq.c     **** 
 16977              		.loc 1 2301 1 view .LVU4421
 16978 0016 0AB0     		add	sp, sp, #40
 16979              		.cfi_def_cfa_offset 8
 16980              		@ sp needed
 16981 0018 10BD     		pop	{r4, pc}
2301:src/xeq.c     **** 
 16982              		.loc 1 2301 1 view .LVU4422
 16983              		.cfi_endproc
 16984              	.LFE172:
 16986 001a 00BF     		.section	.text.do_conv,"ax",%progbits
 16987              		.align	1
 16988              		.p2align 2,,3
 16989              		.global	do_conv
ARM GAS  /tmp/cciWh9P3.s 			page 467


 16990              		.syntax unified
 16991              		.thumb
 16992              		.thumb_func
 16993              		.fpu fpv4-sp-d16
 16995              	do_conv:
 16996              	.LVL1264:
 16997              	.LFB173:
2304:src/xeq.c     **** 	decNumber m;
 16998              		.loc 1 2304 66 is_stmt 1 view -0
 16999              		.cfi_startproc
 17000              		@ args = 0, pretend = 0, frame = 40
 17001              		@ frame_needed = 0, uses_anonymous_args = 0
2305:src/xeq.c     **** 	const unsigned int conv = arg / 2;
 17002              		.loc 1 2305 2 view .LVU4424
2306:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 17003              		.loc 1 2306 2 view .LVU4425
2307:src/xeq.c     **** 
 17004              		.loc 1 2307 2 view .LVU4426
2309:src/xeq.c     **** 		decNumberCopy(r, x);
 17005              		.loc 1 2309 2 view .LVU4427
2304:src/xeq.c     **** 	decNumber m;
 17006              		.loc 1 2304 66 is_stmt 0 view .LVU4428
 17007 0000 70B5     		push	{r4, r5, r6, lr}
 17008              		.cfi_def_cfa_offset 16
 17009              		.cfi_offset 4, -16
 17010              		.cfi_offset 5, -12
 17011              		.cfi_offset 6, -8
 17012              		.cfi_offset 14, -4
2309:src/xeq.c     **** 		decNumberCopy(r, x);
 17013              		.loc 1 2309 5 view .LVU4429
 17014 0002 4D29     		cmp	r1, #77
2304:src/xeq.c     **** 	decNumber m;
 17015              		.loc 1 2304 66 view .LVU4430
 17016 0004 8AB0     		sub	sp, sp, #40
 17017              		.cfi_def_cfa_offset 56
2304:src/xeq.c     **** 	decNumber m;
 17018              		.loc 1 2304 66 view .LVU4431
 17019 0006 1546     		mov	r5, r2
2309:src/xeq.c     **** 		decNumberCopy(r, x);
 17020              		.loc 1 2309 5 view .LVU4432
 17021 0008 15D8     		bhi	.L1187
2314:src/xeq.c     **** 
 17022              		.loc 1 2314 2 is_stmt 1 view .LVU4433
 17023 000a 0D4B     		ldr	r3, .L1189
 17024 000c 0646     		mov	r6, r0
2306:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 17025              		.loc 1 2306 21 is_stmt 0 view .LVU4434
 17026 000e 4808     		lsrs	r0, r1, #1
 17027              	.LVL1265:
2306:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 17028              		.loc 1 2306 21 view .LVU4435
 17029 0010 0C46     		mov	r4, r1
2314:src/xeq.c     **** 
 17030              		.loc 1 2314 2 view .LVU4436
 17031 0012 03EB0010 		add	r0, r3, r0, lsl #4
 17032 0016 01A9     		add	r1, sp, #4
 17033              	.LVL1266:
ARM GAS  /tmp/cciWh9P3.s 			page 468


2314:src/xeq.c     **** 
 17034              		.loc 1 2314 2 view .LVU4437
 17035 0018 FFF7FEFF 		bl	decimal64ToNumber
 17036              	.LVL1267:
2316:src/xeq.c     **** 		dn_divide(r, x, &m);
 17037              		.loc 1 2316 2 is_stmt 1 view .LVU4438
2316:src/xeq.c     **** 		dn_divide(r, x, &m);
 17038              		.loc 1 2316 5 is_stmt 0 view .LVU4439
 17039 001c E307     		lsls	r3, r4, #31
2317:src/xeq.c     **** 	else			// imperial to metric
 17040              		.loc 1 2317 3 view .LVU4440
 17041 001e 01AA     		add	r2, sp, #4
 17042 0020 2946     		mov	r1, r5
 17043 0022 3046     		mov	r0, r6
2316:src/xeq.c     **** 		dn_divide(r, x, &m);
 17044              		.loc 1 2316 5 view .LVU4441
 17045 0024 03D5     		bpl	.L1188
2319:src/xeq.c     **** }
 17046              		.loc 1 2319 3 is_stmt 1 view .LVU4442
 17047 0026 FFF7FEFF 		bl	dn_multiply
 17048              	.LVL1268:
2320:src/xeq.c     **** 
 17049              		.loc 1 2320 1 is_stmt 0 view .LVU4443
 17050 002a 0AB0     		add	sp, sp, #40
 17051              		.cfi_remember_state
 17052              		.cfi_def_cfa_offset 16
 17053              		@ sp needed
 17054 002c 70BD     		pop	{r4, r5, r6, pc}
 17055              	.LVL1269:
 17056              	.L1188:
 17057              		.cfi_restore_state
2317:src/xeq.c     **** 	else			// imperial to metric
 17058              		.loc 1 2317 3 is_stmt 1 view .LVU4444
 17059 002e FFF7FEFF 		bl	dn_divide
 17060              	.LVL1270:
2320:src/xeq.c     **** 
 17061              		.loc 1 2320 1 is_stmt 0 view .LVU4445
 17062 0032 0AB0     		add	sp, sp, #40
 17063              		.cfi_remember_state
 17064              		.cfi_def_cfa_offset 16
 17065              		@ sp needed
 17066 0034 70BD     		pop	{r4, r5, r6, pc}
 17067              	.LVL1271:
 17068              	.L1187:
 17069              		.cfi_restore_state
2310:src/xeq.c     **** 		return;
 17070              		.loc 1 2310 3 is_stmt 1 view .LVU4446
 17071 0036 1146     		mov	r1, r2
 17072              	.LVL1272:
2310:src/xeq.c     **** 		return;
 17073              		.loc 1 2310 3 is_stmt 0 view .LVU4447
 17074 0038 FFF7FEFF 		bl	decNumberCopy
 17075              	.LVL1273:
2311:src/xeq.c     **** 	}
 17076              		.loc 1 2311 3 is_stmt 1 view .LVU4448
2320:src/xeq.c     **** 
 17077              		.loc 1 2320 1 is_stmt 0 view .LVU4449
ARM GAS  /tmp/cciWh9P3.s 			page 469


 17078 003c 0AB0     		add	sp, sp, #40
 17079              		.cfi_def_cfa_offset 16
 17080              		@ sp needed
 17081 003e 70BD     		pop	{r4, r5, r6, pc}
 17082              	.LVL1274:
 17083              	.L1190:
2320:src/xeq.c     **** 
 17084              		.loc 1 2320 1 view .LVU4450
 17085              		.align	2
 17086              	.L1189:
 17087 0040 00000000 		.word	cnsts_conv
 17088              		.cfi_endproc
 17089              	.LFE173:
 17091              		.section	.text.cmdconv,"ax",%progbits
 17092              		.align	1
 17093              		.p2align 2,,3
 17094              		.global	cmdconv
 17095              		.syntax unified
 17096              		.thumb
 17097              		.thumb_func
 17098              		.fpu fpv4-sp-d16
 17100              	cmdconv:
 17101              	.LVL1275:
 17102              	.LFB174:
2322:src/xeq.c     **** 	decNumber x, r;
 17103              		.loc 1 2322 46 is_stmt 1 view -0
 17104              		.cfi_startproc
 17105              		@ args = 0, pretend = 0, frame = 72
 17106              		@ frame_needed = 0, uses_anonymous_args = 0
2323:src/xeq.c     **** 
 17107              		.loc 1 2323 2 view .LVU4452
2325:src/xeq.c     **** 		return;
 17108              		.loc 1 2325 2 view .LVU4453
2325:src/xeq.c     **** 		return;
 17109              		.loc 1 2325 6 is_stmt 0 view .LVU4454
 17110 0000 0E4B     		ldr	r3, .L1199
 17111 0002 1B68     		ldr	r3, [r3]
 17112 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2325:src/xeq.c     **** 		return;
 17113              		.loc 1 2325 5 view .LVU4455
 17114 0008 DB07     		lsls	r3, r3, #31
 17115 000a 00D5     		bpl	.L1198
 17116 000c 7047     		bx	lr
 17117              	.L1198:
2322:src/xeq.c     **** 	decNumber x, r;
 17118              		.loc 1 2322 46 view .LVU4456
 17119 000e 10B5     		push	{r4, lr}
 17120              		.cfi_def_cfa_offset 8
 17121              		.cfi_offset 4, -8
 17122              		.cfi_offset 14, -4
 17123 0010 92B0     		sub	sp, sp, #72
 17124              		.cfi_def_cfa_offset 80
 17125 0012 0446     		mov	r4, r0
2328:src/xeq.c     **** 	do_conv(&r, arg, &x);
 17126              		.loc 1 2328 2 is_stmt 1 view .LVU4457
 17127              	.LVL1276:
 17128              	.LBB2822:
ARM GAS  /tmp/cciWh9P3.s 			page 470


 17129              	.LBI2822:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 17130              		.loc 1 804 12 view .LVU4458
 17131              	.LBB2823:
 805:src/xeq.c     **** }
 17132              		.loc 1 805 2 view .LVU4459
 805:src/xeq.c     **** }
 17133              		.loc 1 805 9 is_stmt 0 view .LVU4460
 17134 0014 6421     		movs	r1, #100
 17135              	.LVL1277:
 805:src/xeq.c     **** }
 17136              		.loc 1 805 9 view .LVU4461
 17137 0016 6846     		mov	r0, sp
 17138              	.LVL1278:
 805:src/xeq.c     **** }
 17139              		.loc 1 805 9 view .LVU4462
 17140 0018 FFF7FEFF 		bl	getRegister
 17141              	.LVL1279:
 805:src/xeq.c     **** }
 17142              		.loc 1 805 9 view .LVU4463
 17143              	.LBE2823:
 17144              	.LBE2822:
2329:src/xeq.c     **** 	setlastX();
 17145              		.loc 1 2329 2 is_stmt 1 view .LVU4464
 17146 001c 6A46     		mov	r2, sp
 17147 001e 2146     		mov	r1, r4
 17148 0020 09A8     		add	r0, sp, #36
 17149 0022 FFF7FEFF 		bl	do_conv
 17150              	.LVL1280:
2330:src/xeq.c     **** 	setX(&r);
 17151              		.loc 1 2330 2 view .LVU4465
 17152              	.LBB2824:
 17153              	.LBI2824:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 17154              		.loc 1 772 6 view .LVU4466
 17155              	.LBB2825:
 773:src/xeq.c     **** }
 17156              		.loc 1 773 2 view .LVU4467
 17157 0026 6421     		movs	r1, #100
 17158 0028 6C20     		movs	r0, #108
 17159 002a FFF7FEFF 		bl	copyreg_n
 17160              	.LVL1281:
 17161              	.LBE2825:
 17162              	.LBE2824:
2331:src/xeq.c     **** }
 17163              		.loc 1 2331 2 view .LVU4468
 17164              	.LBB2826:
 17165              	.LBI2826:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 17166              		.loc 1 808 6 view .LVU4469
 17167              	.LBB2827:
 809:src/xeq.c     **** }
 17168              		.loc 1 809 2 view .LVU4470
 17169 002e 09A9     		add	r1, sp, #36
 17170              	.LVL1282:
 809:src/xeq.c     **** }
 17171              		.loc 1 809 2 is_stmt 0 view .LVU4471
ARM GAS  /tmp/cciWh9P3.s 			page 471


 17172 0030 6420     		movs	r0, #100
 17173 0032 FFF7FEFF 		bl	setRegister
 17174              	.LVL1283:
 809:src/xeq.c     **** }
 17175              		.loc 1 809 2 view .LVU4472
 17176              	.LBE2827:
 17177              	.LBE2826:
2332:src/xeq.c     **** 
 17178              		.loc 1 2332 1 view .LVU4473
 17179 0036 12B0     		add	sp, sp, #72
 17180              		.cfi_def_cfa_offset 8
 17181              		@ sp needed
 17182 0038 10BD     		pop	{r4, pc}
 17183              	.LVL1284:
 17184              	.L1200:
2332:src/xeq.c     **** 
 17185              		.loc 1 2332 1 view .LVU4474
 17186 003a 00BF     		.align	2
 17187              	.L1199:
 17188 003c 00000000 		.word	main_ram
 17189              		.cfi_endproc
 17190              	.LFE174:
 17192              		.section	.text.fin_tst,"ax",%progbits
 17193              		.align	1
 17194              		.p2align 2,,3
 17195              		.global	fin_tst
 17196              		.syntax unified
 17197              		.thumb
 17198              		.thumb_func
 17199              		.fpu fpv4-sp-d16
 17201              	fin_tst:
 17202              	.LVL1285:
 17203              	.LFB175:
2337:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 17204              		.loc 1 2337 27 is_stmt 1 view -0
 17205              		.cfi_startproc
 17206              		@ args = 0, pretend = 0, frame = 0
 17207              		@ frame_needed = 0, uses_anonymous_args = 0
 17208              		@ link register save eliminated.
2338:src/xeq.c     **** 	if (Running || XromRunning) {
 17209              		.loc 1 2338 2 view .LVU4476
2338:src/xeq.c     **** 	if (Running || XromRunning) {
 17210              		.loc 1 2338 31 is_stmt 0 view .LVU4477
 17211 0000 30B1     		cbz	r0, .L1208
 17212              	.LVL1286:
2339:src/xeq.c     **** 		if (! a && incpc())
 17213              		.loc 1 2339 2 is_stmt 1 view .LVU4478
2339:src/xeq.c     **** 		if (! a && incpc())
 17214              		.loc 1 2339 14 is_stmt 0 view .LVU4479
 17215 0002 0A4A     		ldr	r2, .L1210
2339:src/xeq.c     **** 		if (! a && incpc())
 17216              		.loc 1 2339 6 view .LVU4480
 17217 0004 0A4B     		ldr	r3, .L1210+4
2339:src/xeq.c     **** 		if (! a && incpc())
 17218              		.loc 1 2339 14 view .LVU4481
 17219 0006 1268     		ldr	r2, [r2]
 17220 0008 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 472


 17221 000a 1343     		orrs	r3, r2, r3
 17222 000c 0CD0     		beq	.L1209
2351:src/xeq.c     **** 
 17223              		.loc 1 2351 1 view .LVU4482
 17224 000e 7047     		bx	lr
 17225              	.LVL1287:
 17226              	.L1208:
2339:src/xeq.c     **** 		if (! a && incpc())
 17227              		.loc 1 2339 2 is_stmt 1 view .LVU4483
2339:src/xeq.c     **** 		if (! a && incpc())
 17228              		.loc 1 2339 14 is_stmt 0 view .LVU4484
 17229 0010 064A     		ldr	r2, .L1210
2339:src/xeq.c     **** 		if (! a && incpc())
 17230              		.loc 1 2339 6 view .LVU4485
 17231 0012 074B     		ldr	r3, .L1210+4
2339:src/xeq.c     **** 		if (! a && incpc())
 17232              		.loc 1 2339 14 view .LVU4486
 17233 0014 1268     		ldr	r2, [r2]
 17234 0016 1B68     		ldr	r3, [r3]
 17235 0018 1343     		orrs	r3, r2, r3
 17236 001a 03D1     		bne	.L1204
2338:src/xeq.c     **** 	if (Running || XromRunning) {
 17237              		.loc 1 2338 31 view .LVU4487
 17238 001c 054B     		ldr	r3, .L1210+8
 17239              	.LVL1288:
 17240              	.L1205:
2344:src/xeq.c     **** #ifdef INFRARED
 17241              		.loc 1 2344 3 is_stmt 1 view .LVU4488
2344:src/xeq.c     **** #ifdef INFRARED
 17242              		.loc 1 2344 11 is_stmt 0 view .LVU4489
 17243 001e 064A     		ldr	r2, .L1210+12
 17244 0020 1360     		str	r3, [r2]
2351:src/xeq.c     **** 
 17245              		.loc 1 2351 1 view .LVU4490
 17246 0022 7047     		bx	lr
 17247              	.LVL1289:
 17248              	.L1204:
2351:src/xeq.c     **** 
 17249              		.loc 1 2351 1 view .LVU4491
 17250 0024 FFF7FEBF 		b	fin_tst.part.0
 17251              	.LVL1290:
 17252              	.L1209:
2338:src/xeq.c     **** 	if (Running || XromRunning) {
 17253              		.loc 1 2338 31 view .LVU4492
 17254 0028 044B     		ldr	r3, .L1210+16
 17255 002a F8E7     		b	.L1205
 17256              	.L1211:
 17257              		.align	2
 17258              	.L1210:
 17259 002c 00000000 		.word	XromRunning
 17260 0030 00000000 		.word	Running
 17261 0034 00000000 		.word	.LC3
 17262 0038 00000000 		.word	DispMsg
 17263 003c 00000000 		.word	.LC2
 17264              		.cfi_endproc
 17265              	.LFE175:
 17267              		.section	.text.check_mode,"ax",%progbits
ARM GAS  /tmp/cciWh9P3.s 			page 473


 17268              		.align	1
 17269              		.p2align 2,,3
 17270              		.global	check_mode
 17271              		.syntax unified
 17272              		.thumb
 17273              		.thumb_func
 17274              		.fpu fpv4-sp-d16
 17276              	check_mode:
 17277              	.LVL1291:
 17278              	.LFB139:
1905:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
 17279              		.loc 1 1905 32 is_stmt 1 view -0
 17280              		.cfi_startproc
 17281              		@ args = 0, pretend = 0, frame = 0
 17282              		@ frame_needed = 0, uses_anonymous_args = 0
 17283              		@ link register save eliminated.
1906:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 17284              		.loc 1 1906 2 view .LVU4494
1907:src/xeq.c     **** 
 17285              		.loc 1 1907 2 view .LVU4495
1906:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 17286              		.loc 1 1906 35 is_stmt 0 view .LVU4496
 17287 0000 084B     		ldr	r3, .L1213
 17288              	.LVL1292:
1906:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 17289              		.loc 1 1906 35 view .LVU4497
 17290 0002 1B68     		ldr	r3, [r3]
 17291              	.LVL1293:
1909:src/xeq.c     **** }
 17292              		.loc 1 1909 2 view .LVU4498
 17293 0004 A0F19F00 		sub	r0, #159
 17294              	.LVL1294:
1909:src/xeq.c     **** }
 17295              		.loc 1 1909 2 view .LVU4499
 17296 0008 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 17297              	.LVL1295:
1909:src/xeq.c     **** }
 17298              		.loc 1 1909 2 is_stmt 1 view .LVU4500
 17299 000c B0FA80F0 		clz	r0, r0
 17300 0010 4009     		lsrs	r0, r0, #5
 17301 0012 03F00103 		and	r3, r3, #1
 17302 0016 C01A     		subs	r0, r0, r3
 17303 0018 B0FA80F0 		clz	r0, r0
 17304 001c 4009     		lsrs	r0, r0, #5
 17305 001e FFF7FEBF 		b	fin_tst
 17306              	.LVL1296:
 17307              	.L1214:
1909:src/xeq.c     **** }
 17308              		.loc 1 1909 2 is_stmt 0 view .LVU4501
 17309 0022 00BF     		.align	2
 17310              	.L1213:
 17311 0024 00000000 		.word	main_ram
 17312              		.cfi_endproc
 17313              	.LFE139:
 17315              		.section	.text.check_dblmode,"ax",%progbits
 17316              		.align	1
 17317              		.p2align 2,,3
ARM GAS  /tmp/cciWh9P3.s 			page 474


 17318              		.global	check_dblmode
 17319              		.syntax unified
 17320              		.thumb
 17321              		.thumb_func
 17322              		.fpu fpv4-sp-d16
 17324              	check_dblmode:
 17325              	.LVL1297:
 17326              	.LFB140:
1915:src/xeq.c     **** 	fin_tst(is_dblmode());
 17327              		.loc 1 1915 35 is_stmt 1 view -0
 17328              		.cfi_startproc
 17329              		@ args = 0, pretend = 0, frame = 0
 17330              		@ frame_needed = 0, uses_anonymous_args = 0
 17331              		@ link register save eliminated.
1916:src/xeq.c     **** }
 17332              		.loc 1 1916 2 view .LVU4503
 17333              	.LBB2828:
 17334              	.LBI2828:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 17335              		.loc 1 931 5 view .LVU4504
 17336              	.LBB2829:
 932:src/xeq.c     **** }
 17337              		.loc 1 932 2 view .LVU4505
 932:src/xeq.c     **** }
 17338              		.loc 1 932 24 is_stmt 0 view .LVU4506
 17339 0000 064B     		ldr	r3, .L1216
 17340 0002 1B68     		ldr	r3, [r3]
 17341 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 17342 0008 44F20100 		movw	r0, #16385
 17343              	.LVL1298:
 932:src/xeq.c     **** }
 17344              		.loc 1 932 24 view .LVU4507
 17345 000c 1840     		ands	r0, r0, r3
 17346              	.LBE2829:
 17347              	.LBE2828:
1916:src/xeq.c     **** }
 17348              		.loc 1 1916 2 view .LVU4508
 17349 000e A0F58040 		sub	r0, r0, #16384
 17350 0012 B0FA80F0 		clz	r0, r0
 17351 0016 4009     		lsrs	r0, r0, #5
 17352 0018 FFF7FEBF 		b	fin_tst
 17353              	.LVL1299:
 17354              	.L1217:
 17355              		.align	2
 17356              	.L1216:
 17357 001c 00000000 		.word	main_ram
 17358              		.cfi_endproc
 17359              	.LFE140:
 17361              		.section	.text.isTop,"ax",%progbits
 17362              		.align	1
 17363              		.p2align 2,,3
 17364              		.global	isTop
 17365              		.syntax unified
 17366              		.thumb
 17367              		.thumb_func
 17368              		.fpu fpv4-sp-d16
 17370              	isTop:
ARM GAS  /tmp/cciWh9P3.s 			page 475


 17371              	.LVL1300:
 17372              	.LFB156:
2123:src/xeq.c     **** 	int top = 0;
 17373              		.loc 1 2123 27 is_stmt 1 view -0
 17374              		.cfi_startproc
 17375              		@ args = 0, pretend = 0, frame = 0
 17376              		@ frame_needed = 0, uses_anonymous_args = 0
 17377              		@ link register save eliminated.
2124:src/xeq.c     **** 
 17378              		.loc 1 2124 2 view .LVU4510
2126:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 17379              		.loc 1 2126 2 view .LVU4511
2126:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 17380              		.loc 1 2126 6 is_stmt 0 view .LVU4512
 17381 0000 0D4B     		ldr	r3, .L1226
 17382 0002 1868     		ldr	r0, [r3]
 17383              	.LVL1301:
2126:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 17384              		.loc 1 2126 5 view .LVU4513
 17385 0004 68B1     		cbz	r0, .L1219
2127:src/xeq.c     **** 	}
 17386              		.loc 1 2127 3 is_stmt 1 view .LVU4514
2127:src/xeq.c     **** 	}
 17387              		.loc 1 2127 9 is_stmt 0 view .LVU4515
 17388 0006 0D4B     		ldr	r3, .L1226+4
 17389 0008 1B68     		ldr	r3, [r3]
 17390              	.LBB2830:
 17391              	.LBB2831:
 214:src/xeq.c     **** }
 17392              		.loc 1 214 9 view .LVU4516
 17393 000a B3F9DE27 		ldrsh	r2, [r3, #2014]
 17394              	.LBE2831:
 17395              	.LBE2830:
2127:src/xeq.c     **** 	}
 17396              		.loc 1 2127 9 view .LVU4517
 17397 000e B3F9E207 		ldrsh	r0, [r3, #2018]
 17398              	.LBB2834:
 17399              	.LBI2830:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 17400              		.loc 1 213 5 is_stmt 1 view .LVU4518
 17401              	.LBB2832:
 214:src/xeq.c     **** }
 17402              		.loc 1 214 2 view .LVU4519
 214:src/xeq.c     **** }
 17403              		.loc 1 214 57 is_stmt 0 view .LVU4520
 17404 0012 002A     		cmp	r2, #0
 17405 0014 07DB     		blt	.L1225
 17406 0016 4FF0FF33 		mov	r3, #-1
 17407              	.L1220:
 17408              	.LBE2832:
 17409              	.LBE2834:
2127:src/xeq.c     **** 	}
 17410              		.loc 1 2127 19 view .LVU4521
 17411 001a 9842     		cmp	r0, r3
 17412 001c B4BF     		ite	lt
 17413 001e 0020     		movlt	r0, #0
 17414 0020 0120     		movge	r0, #1
ARM GAS  /tmp/cciWh9P3.s 			page 476


 17415              	.LVL1302:
 17416              	.L1219:
2129:src/xeq.c     **** }
 17417              		.loc 1 2129 2 is_stmt 1 view .LVU4522
 17418 0022 FFF7FEBF 		b	fin_tst
 17419              	.LVL1303:
 17420              	.L1225:
 17421              	.LBB2835:
 17422              	.LBB2833:
 214:src/xeq.c     **** }
 17423              		.loc 1 214 25 is_stmt 0 view .LVU4523
 17424 0026 064B     		ldr	r3, .L1226+8
 17425 0028 1B68     		ldr	r3, [r3]
 214:src/xeq.c     **** }
 17426              		.loc 1 214 57 view .LVU4524
 17427 002a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 17428 002e C3F30B03 		ubfx	r3, r3, #0, #12
 17429 0032 DB43     		mvns	r3, r3
 17430 0034 F1E7     		b	.L1220
 17431              	.L1227:
 17432 0036 00BF     		.align	2
 17433              	.L1226:
 17434 0038 00000000 		.word	Running
 17435 003c 00000000 		.word	main_ram
 17436 0040 00000000 		.word	RetStk
 17437              	.LBE2833:
 17438              	.LBE2835:
 17439              		.cfi_endproc
 17440              	.LFE156:
 17442              		.section	.text.cmdlblp,"ax",%progbits
 17443              		.align	1
 17444              		.p2align 2,,3
 17445              		.global	cmdlblp
 17446              		.syntax unified
 17447              		.thumb
 17448              		.thumb_func
 17449              		.fpu fpv4-sp-d16
 17451              	cmdlblp:
 17452              	.LVL1304:
 17453              	.LFB157:
2134:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 17454              		.loc 1 2134 46 is_stmt 1 view -0
 17455              		.cfi_startproc
 17456              		@ args = 0, pretend = 0, frame = 0
 17457              		@ frame_needed = 0, uses_anonymous_args = 0
2135:src/xeq.c     **** }
 17458              		.loc 1 2135 2 view .LVU4526
2134:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 17459              		.loc 1 2134 46 is_stmt 0 view .LVU4527
 17460 0000 08B5     		push	{r3, lr}
 17461              		.cfi_def_cfa_offset 8
 17462              		.cfi_offset 3, -8
 17463              		.cfi_offset 14, -4
2135:src/xeq.c     **** }
 17464              		.loc 1 2135 26 view .LVU4528
 17465 0002 084B     		ldr	r3, .L1230
 17466              	.LVL1305:
ARM GAS  /tmp/cciWh9P3.s 			page 477


2135:src/xeq.c     **** }
 17467              		.loc 1 2135 26 view .LVU4529
 17468 0004 1B68     		ldr	r3, [r3]
 17469              	.LVL1306:
 17470              	.LBB2836:
 17471              	.LBI2836:
2009:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 17472              		.loc 1 2009 14 is_stmt 1 view .LVU4530
 17473              	.LBB2837:
2010:src/xeq.c     **** }
 17474              		.loc 1 2010 2 view .LVU4531
2010:src/xeq.c     **** }
 17475              		.loc 1 2010 9 is_stmt 0 view .LVU4532
 17476 0006 40F4C441 		orr	r1, r0, #25088
 17477              	.LVL1307:
2010:src/xeq.c     **** }
 17478              		.loc 1 2010 9 view .LVU4533
 17479 000a 0222     		movs	r2, #2
 17480 000c B3F8E007 		ldrh	r0, [r3, #2016]
 17481              	.LVL1308:
2010:src/xeq.c     **** }
 17482              		.loc 1 2010 9 view .LVU4534
 17483 0010 FFF7FEFF 		bl	find_opcode_from
 17484              	.LVL1309:
2010:src/xeq.c     **** }
 17485              		.loc 1 2010 9 view .LVU4535
 17486              	.LBE2837:
 17487              	.LBE2836:
2135:src/xeq.c     **** }
 17488              		.loc 1 2135 2 view .LVU4536
 17489 0014 0038     		subs	r0, r0, #0
2136:src/xeq.c     **** 
 17490              		.loc 1 2136 1 view .LVU4537
 17491 0016 BDE80840 		pop	{r3, lr}
 17492              		.cfi_restore 14
 17493              		.cfi_restore 3
 17494              		.cfi_def_cfa_offset 0
2135:src/xeq.c     **** }
 17495              		.loc 1 2135 2 view .LVU4538
 17496 001a 18BF     		it	ne
 17497 001c 0120     		movne	r0, #1
 17498 001e FFF7FEBF 		b	fin_tst
 17499              	.LVL1310:
 17500              	.L1231:
 17501 0022 00BF     		.align	2
 17502              	.L1230:
 17503 0024 00000000 		.word	main_ram
 17504              		.cfi_endproc
 17505              	.LFE157:
 17507              		.section	.text.cmdmultilblp,"ax",%progbits
 17508              		.align	1
 17509              		.p2align 2,,3
 17510              		.global	cmdmultilblp
 17511              		.syntax unified
 17512              		.thumb
 17513              		.thumb_func
 17514              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cciWh9P3.s 			page 478


 17516              	cmdmultilblp:
 17517              	.LVL1311:
 17518              	.LFB160:
2163:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 17519              		.loc 1 2163 55 is_stmt 1 view -0
 17520              		.cfi_startproc
 17521              		@ args = 0, pretend = 0, frame = 0
 17522              		@ frame_needed = 0, uses_anonymous_args = 0
2164:src/xeq.c     **** }
 17523              		.loc 1 2164 2 view .LVU4540
2163:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 17524              		.loc 1 2163 55 is_stmt 0 view .LVU4541
 17525 0000 08B5     		push	{r3, lr}
 17526              		.cfi_def_cfa_offset 8
 17527              		.cfi_offset 3, -8
 17528              		.cfi_offset 14, -4
2164:src/xeq.c     **** }
 17529              		.loc 1 2164 10 view .LVU4542
 17530 0002 0021     		movs	r1, #0
 17531              	.LVL1312:
2164:src/xeq.c     **** }
 17532              		.loc 1 2164 10 view .LVU4543
 17533 0004 FFF7FEFF 		bl	findmultilbl
 17534              	.LVL1313:
2164:src/xeq.c     **** }
 17535              		.loc 1 2164 2 view .LVU4544
 17536 0008 0038     		subs	r0, r0, #0
2165:src/xeq.c     **** 
 17537              		.loc 1 2165 1 view .LVU4545
 17538 000a BDE80840 		pop	{r3, lr}
 17539              		.cfi_restore 14
 17540              		.cfi_restore 3
 17541              		.cfi_def_cfa_offset 0
2164:src/xeq.c     **** }
 17542              		.loc 1 2164 2 view .LVU4546
 17543 000e 18BF     		it	ne
 17544 0010 0120     		movne	r0, #1
 17545 0012 FFF7FEBF 		b	fin_tst
 17546              	.LVL1314:
 17547              		.cfi_endproc
 17548              	.LFE160:
 17550 0016 00BF     		.section	.text.cmdkeyp,"ax",%progbits
 17551              		.align	1
 17552              		.p2align 2,,3
 17553              		.global	cmdkeyp
 17554              		.syntax unified
 17555              		.thumb
 17556              		.thumb_func
 17557              		.fpu fpv4-sp-d16
 17559              	cmdkeyp:
 17560              	.LVL1315:
 17561              	.LFB135:
1841:src/xeq.c     **** 	int cond = LastKey == 0;
 17562              		.loc 1 1841 46 is_stmt 1 view -0
 17563              		.cfi_startproc
 17564              		@ args = 0, pretend = 0, frame = 0
 17565              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cciWh9P3.s 			page 479


1842:src/xeq.c     **** 	if (!cond) {
 17566              		.loc 1 1842 2 view .LVU4548
1841:src/xeq.c     **** 	int cond = LastKey == 0;
 17567              		.loc 1 1841 46 is_stmt 0 view .LVU4549
 17568 0000 70B5     		push	{r4, r5, r6, lr}
 17569              		.cfi_def_cfa_offset 16
 17570              		.cfi_offset 4, -16
 17571              		.cfi_offset 5, -12
 17572              		.cfi_offset 6, -8
 17573              		.cfi_offset 14, -4
1842:src/xeq.c     **** 	if (!cond) {
 17574              		.loc 1 1842 13 view .LVU4550
 17575 0002 104B     		ldr	r3, .L1241
 17576 0004 93F91320 		ldrsb	r2, [r3, #19]
1842:src/xeq.c     **** 	if (!cond) {
 17577              		.loc 1 1842 21 view .LVU4551
 17578 0008 002A     		cmp	r2, #0
1841:src/xeq.c     **** 	int cond = LastKey == 0;
 17579              		.loc 1 1841 46 view .LVU4552
 17580 000a 82B0     		sub	sp, sp, #8
 17581              		.cfi_def_cfa_offset 24
1842:src/xeq.c     **** 	if (!cond) {
 17582              		.loc 1 1842 21 view .LVU4553
 17583 000c 0CBF     		ite	eq
 17584 000e 0125     		moveq	r5, #1
 17585 0010 0025     		movne	r5, #0
 17586              	.LVL1316:
1843:src/xeq.c     **** 		int k = LastKey - 1;
 17587              		.loc 1 1843 2 is_stmt 1 view .LVU4554
1843:src/xeq.c     **** 		int k = LastKey - 1;
 17588              		.loc 1 1843 5 is_stmt 0 view .LVU4555
 17589 0012 05D1     		bne	.L1240
1848:src/xeq.c     **** }
 17590              		.loc 1 1848 2 is_stmt 1 view .LVU4556
 17591 0014 2846     		mov	r0, r5
 17592              	.LVL1317:
1849:src/xeq.c     **** 
 17593              		.loc 1 1849 1 is_stmt 0 view .LVU4557
 17594 0016 02B0     		add	sp, sp, #8
 17595              		.cfi_remember_state
 17596              		.cfi_def_cfa_offset 16
 17597              		@ sp needed
 17598 0018 BDE87040 		pop	{r4, r5, r6, lr}
 17599              		.cfi_restore 14
 17600              		.cfi_restore 6
 17601              		.cfi_restore 5
 17602              		.cfi_restore 4
 17603              		.cfi_def_cfa_offset 0
 17604              	.LVL1318:
1848:src/xeq.c     **** }
 17605              		.loc 1 1848 2 view .LVU4558
 17606 001c FFF7FEBF 		b	fin_tst
 17607              	.LVL1319:
 17608              	.L1240:
 17609              		.cfi_restore_state
 17610              	.LBB2838:
1844:src/xeq.c     **** 		LastKey = 0;
ARM GAS  /tmp/cciWh9P3.s 			page 480


 17611              		.loc 1 1844 3 is_stmt 1 view .LVU4559
1845:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 17612              		.loc 1 1845 3 view .LVU4560
 17613 0020 0446     		mov	r4, r0
1845:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 17614              		.loc 1 1845 11 is_stmt 0 view .LVU4561
 17615 0022 0026     		movs	r6, #0
1846:src/xeq.c     **** 	}
 17616              		.loc 1 1846 26 view .LVU4562
 17617 0024 501E     		subs	r0, r2, #1
 17618              	.LVL1320:
1845:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 17619              		.loc 1 1845 11 view .LVU4563
 17620 0026 DE74     		strb	r6, [r3, #19]
1846:src/xeq.c     **** 	}
 17621              		.loc 1 1846 3 is_stmt 1 view .LVU4564
1846:src/xeq.c     **** 	}
 17622              		.loc 1 1846 26 is_stmt 0 view .LVU4565
 17623 0028 FFF7FEFF 		bl	keycode_to_row_column
 17624              	.LVL1321:
1846:src/xeq.c     **** 	}
 17625              		.loc 1 1846 26 view .LVU4566
 17626 002c 0246     		mov	r2, r0
1846:src/xeq.c     **** 	}
 17627              		.loc 1 1846 3 view .LVU4567
 17628 002e 0096     		str	r6, [sp]
 17629 0030 2046     		mov	r0, r4
 17630 0032 D317     		asrs	r3, r2, #31
 17631 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 17632              	.LVL1322:
 17633              	.LBE2838:
1848:src/xeq.c     **** }
 17634              		.loc 1 1848 2 is_stmt 1 view .LVU4568
 17635 0038 2846     		mov	r0, r5
1849:src/xeq.c     **** 
 17636              		.loc 1 1849 1 is_stmt 0 view .LVU4569
 17637 003a 02B0     		add	sp, sp, #8
 17638              		.cfi_def_cfa_offset 16
 17639              		@ sp needed
 17640 003c BDE87040 		pop	{r4, r5, r6, lr}
 17641              		.cfi_restore 14
 17642              		.cfi_restore 6
 17643              		.cfi_restore 5
 17644              		.cfi_restore 4
 17645              		.cfi_def_cfa_offset 0
 17646              	.LVL1323:
1848:src/xeq.c     **** }
 17647              		.loc 1 1848 2 view .LVU4570
 17648 0040 FFF7FEBF 		b	fin_tst
 17649              	.LVL1324:
 17650              	.L1242:
1848:src/xeq.c     **** }
 17651              		.loc 1 1848 2 view .LVU4571
 17652              		.align	2
 17653              	.L1241:
 17654 0044 00000000 		.word	StateWhileOn
 17655              		.cfi_endproc
ARM GAS  /tmp/cciWh9P3.s 			page 481


 17656              	.LFE135:
 17658              		.section	.text.do_tst,"ax",%progbits
 17659              		.align	1
 17660              		.p2align 2,,3
 17661              		.syntax unified
 17662              		.thumb
 17663              		.thumb_func
 17664              		.fpu fpv4-sp-d16
 17666              	do_tst:
 17667              	.LVL1325:
 17668              	.LFB181:
3052:src/xeq.c     **** 	int a = 0;
 17669              		.loc 1 3052 51 is_stmt 1 view -0
 17670              		.cfi_startproc
 17671              		@ args = 0, pretend = 0, frame = 112
 17672              		@ frame_needed = 0, uses_anonymous_args = 0
3053:src/xeq.c     **** 	int iszero, isneg;
 17673              		.loc 1 3053 2 view .LVU4573
3054:src/xeq.c     **** 
 17674              		.loc 1 3054 2 view .LVU4574
3056:src/xeq.c     **** 
 17675              		.loc 1 3056 2 view .LVU4575
 17676              	.LBB2839:
 17677              	.LBI2839:
1145:src/xeq.c     **** 	process_cmdline();
 17678              		.loc 1 1145 6 view .LVU4576
 17679              	.LBB2840:
1146:src/xeq.c     **** 	set_lift();
 17680              		.loc 1 1146 2 view .LVU4577
 17681              	.LBE2840:
 17682              	.LBE2839:
3052:src/xeq.c     **** 	int a = 0;
 17683              		.loc 1 3052 51 is_stmt 0 view .LVU4578
 17684 0000 2DE9D043 		push	{r4, r6, r7, r8, r9, lr}
 17685              		.cfi_def_cfa_offset 24
 17686              		.cfi_offset 4, -24
 17687              		.cfi_offset 6, -20
 17688              		.cfi_offset 7, -16
 17689              		.cfi_offset 8, -12
 17690              		.cfi_offset 9, -8
 17691              		.cfi_offset 14, -4
 17692 0004 9CB0     		sub	sp, sp, #112
 17693              		.cfi_def_cfa_offset 136
3052:src/xeq.c     **** 	int a = 0;
 17694              		.loc 1 3052 51 view .LVU4579
 17695 0006 0C46     		mov	r4, r1
 17696 0008 8046     		mov	r8, r0
 17697              	.LBB2850:
 17698              	.LBB2847:
1146:src/xeq.c     **** 	set_lift();
 17699              		.loc 1 1146 2 view .LVU4580
 17700 000a FFF7FEFF 		bl	process_cmdline
 17701              	.LVL1326:
1147:src/xeq.c     **** }
 17702              		.loc 1 1147 2 is_stmt 1 view .LVU4581
 17703              	.LBB2841:
 17704              	.LBI2841:
ARM GAS  /tmp/cciWh9P3.s 			page 482


 747:src/xeq.c     ****     State2.state_lift = 1;
 17705              		.loc 1 747 6 view .LVU4582
 17706              	.LBB2842:
 748:src/xeq.c     **** }
 17707              		.loc 1 748 5 view .LVU4583
 748:src/xeq.c     **** }
 17708              		.loc 1 748 23 is_stmt 0 view .LVU4584
 17709 000e 544A     		ldr	r2, .L1273
 17710              	.LBE2842:
 17711              	.LBE2841:
 17712              	.LBE2847:
 17713              	.LBE2850:
3058:src/xeq.c     **** 		unsigned long long int xv, yv;
 17714              		.loc 1 3058 6 view .LVU4585
 17715 0010 5449     		ldr	r1, .L1273+4
 17716              	.LBB2851:
 17717              	.LBB2848:
 17718              	.LBB2845:
 17719              	.LBB2843:
 748:src/xeq.c     **** }
 17720              		.loc 1 748 23 view .LVU4586
 17721 0012 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 17722              	.LBE2843:
 17723              	.LBE2845:
 17724              	.LBE2848:
 17725              	.LBE2851:
3058:src/xeq.c     **** 		unsigned long long int xv, yv;
 17726              		.loc 1 3058 6 view .LVU4587
 17727 0014 0968     		ldr	r1, [r1]
 17728              	.LBB2852:
 17729              	.LBB2849:
 17730              	.LBB2846:
 17731              	.LBB2844:
 748:src/xeq.c     **** }
 17732              		.loc 1 748 23 view .LVU4588
 17733 0016 43F04003 		orr	r3, r3, #64
 17734 001a D375     		strb	r3, [r2, #23]
 17735              	.LBE2844:
 17736              	.LBE2846:
 17737              	.LBE2849:
 17738              	.LBE2852:
3058:src/xeq.c     **** 		unsigned long long int xv, yv;
 17739              		.loc 1 3058 2 is_stmt 1 view .LVU4589
3058:src/xeq.c     **** 		unsigned long long int xv, yv;
 17740              		.loc 1 3058 6 is_stmt 0 view .LVU4590
 17741 001c 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
3058:src/xeq.c     **** 		unsigned long long int xv, yv;
 17742              		.loc 1 3058 5 view .LVU4591
 17743 0020 DB07     		lsls	r3, r3, #31
 17744 0022 2CD5     		bpl	.L1244
 17745              	.LBB2853:
3059:src/xeq.c     **** 		int xs, ys;
 17746              		.loc 1 3059 3 is_stmt 1 view .LVU4592
3060:src/xeq.c     **** 
 17747              		.loc 1 3060 3 view .LVU4593
3062:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 17748              		.loc 1 3062 3 view .LVU4594
ARM GAS  /tmp/cciWh9P3.s 			page 483


 17749              	.LBB2854:
 17750              	.LBI2854:
1255:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 17751              		.loc 1 1255 15 view .LVU4595
 17752              	.LBB2855:
1256:src/xeq.c     **** }
 17753              		.loc 1 1256 2 view .LVU4596
1256:src/xeq.c     **** }
 17754              		.loc 1 1256 9 is_stmt 0 view .LVU4597
 17755 0024 6420     		movs	r0, #100
 17756 0026 FFF7FEFF 		bl	get_reg_n_int
 17757              	.LVL1327:
 17758              	.LBE2855:
 17759              	.LBE2854:
3062:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 17760              		.loc 1 3062 8 view .LVU4598
 17761 002a 0AAA     		add	r2, sp, #40
 17762 002c FFF7FEFF 		bl	extract_value
 17763              	.LVL1328:
3063:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 17764              		.loc 1 3063 6 view .LVU4599
 17765 0030 B8F5FA6F 		cmp	r8, #2000
3062:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 17766              		.loc 1 3062 8 view .LVU4600
 17767 0034 0646     		mov	r6, r0
 17768 0036 0F46     		mov	r7, r1
 17769              	.LVL1329:
3063:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 17770              		.loc 1 3063 3 is_stmt 1 view .LVU4601
3063:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 17771              		.loc 1 3063 6 is_stmt 0 view .LVU4602
 17772 0038 51DB     		blt	.L1245
3064:src/xeq.c     **** 			ys = 0;
 17773              		.loc 1 3064 4 is_stmt 1 view .LVU4603
3064:src/xeq.c     **** 			ys = 0;
 17774              		.loc 1 3064 30 is_stmt 0 view .LVU4604
 17775 003a A8F61B08 		subw	r8, r8, #2075
 17776              	.LVL1330:
3064:src/xeq.c     **** 			ys = 0;
 17777              		.loc 1 3064 7 view .LVU4605
 17778 003e 4FEAE879 		asr	r9, r8, #31
 17779              	.LVL1331:
3065:src/xeq.c     **** 		} else
 17780              		.loc 1 3065 4 is_stmt 1 view .LVU4606
 17781 0042 0022     		movs	r2, #0
 17782              	.LVL1332:
 17783              	.L1246:
3069:src/xeq.c     **** 			iszero = 1;
 17784              		.loc 1 3069 3 view .LVU4607
3069:src/xeq.c     **** 			iszero = 1;
 17785              		.loc 1 3069 6 is_stmt 0 view .LVU4608
 17786 0044 56EA0703 		orrs	r3, r6, r7
 17787 0048 40D1     		bne	.L1247
3069:src/xeq.c     **** 			iszero = 1;
 17788              		.loc 1 3069 15 discriminator 1 view .LVU4609
 17789 004a 58EA0903 		orrs	r3, r8, r9
 17790 004e 50D0     		beq	.L1248
ARM GAS  /tmp/cciWh9P3.s 			page 484


 17791              	.L1250:
 17792 0050 0A9B     		ldr	r3, [sp, #40]
3074:src/xeq.c     **** 			if (xs)		// both negative
 17793              		.loc 1 3074 6 view .LVU4610
 17794 0052 9A42     		cmp	r2, r3
3072:src/xeq.c     **** 
 17795              		.loc 1 3072 24 view .LVU4611
 17796 0054 4FF00000 		mov	r0, #0
 17797              	.LVL1333:
3074:src/xeq.c     **** 			if (xs)		// both negative
 17798              		.loc 1 3074 3 is_stmt 1 view .LVU4612
3074:src/xeq.c     **** 			if (xs)		// both negative
 17799              		.loc 1 3074 6 is_stmt 0 view .LVU4613
 17800 0058 50D0     		beq	.L1251
 17801              	.LVL1334:
 17802              	.L1254:
3074:src/xeq.c     **** 			if (xs)		// both negative
 17803              		.loc 1 3074 6 view .LVU4614
 17804              	.LBE2853:
3102:src/xeq.c     **** 	case TST_APX:
 17805              		.loc 1 3102 2 is_stmt 1 view .LVU4615
 17806 005a 062C     		cmp	r4, #6
 17807 005c 30D8     		bhi	.L1260
 17808 005e DFE804F0 		tbb	[pc, r4]
 17809              	.L1262:
 17810 0062 09       		.byte	(.L1259-.L1262)/2
 17811 0063 55       		.byte	(.L1271-.L1262)/2
 17812 0064 09       		.byte	(.L1259-.L1262)/2
 17813 0065 2E       		.byte	(.L1265-.L1262)/2
 17814 0066 64       		.byte	(.L1264-.L1262)/2
 17815 0067 69       		.byte	(.L1263-.L1262)/2
 17816 0068 04       		.byte	(.L1261-.L1262)/2
 17817 0069 00       		.p2align 1
 17818              	.L1261:
3109:src/xeq.c     **** 	default:	a = 0;			break;
 17819              		.loc 1 3109 15 view .LVU4616
3109:src/xeq.c     **** 	default:	a = 0;			break;
 17820              		.loc 1 3109 26 is_stmt 0 view .LVU4617
 17821 006a 002B     		cmp	r3, #0
 17822 006c 67D0     		beq	.L1269
3109:src/xeq.c     **** 	default:	a = 0;			break;
 17823              		.loc 1 3109 26 discriminator 2 view .LVU4618
 17824 006e 0038     		subs	r0, r0, #0
3109:src/xeq.c     **** 	default:	a = 0;			break;
 17825              		.loc 1 3109 26 discriminator 2 view .LVU4619
 17826 0070 18BF     		it	ne
 17827 0072 0120     		movne	r0, #1
 17828              	.LVL1335:
 17829              	.L1259:
3113:src/xeq.c     **** }
 17830              		.loc 1 3113 7 is_stmt 1 view .LVU4620
 17831 0074 FFF7FEFF 		bl	fin_tst
 17832              	.LVL1336:
3114:src/xeq.c     **** 
 17833              		.loc 1 3114 1 is_stmt 0 view .LVU4621
 17834 0078 1CB0     		add	sp, sp, #112
 17835              		.cfi_remember_state
ARM GAS  /tmp/cciWh9P3.s 			page 485


 17836              		.cfi_def_cfa_offset 24
 17837              		@ sp needed
 17838 007a BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 17839              	.LVL1337:
 17840              	.L1244:
 17841              		.cfi_restore_state
 17842              	.LBB2856:
3082:src/xeq.c     **** 
 17843              		.loc 1 3082 3 is_stmt 1 view .LVU4622
3084:src/xeq.c     **** 		if (decNumberIsNaN(&x))
 17844              		.loc 1 3084 3 view .LVU4623
 17845              	.LBB2857:
 17846              	.LBI2857:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 17847              		.loc 1 804 12 view .LVU4624
 17848              	.LBB2858:
 805:src/xeq.c     **** }
 17849              		.loc 1 805 2 view .LVU4625
 805:src/xeq.c     **** }
 17850              		.loc 1 805 9 is_stmt 0 view .LVU4626
 17851 007e 0AA8     		add	r0, sp, #40
 17852              	.LVL1338:
 805:src/xeq.c     **** }
 17853              		.loc 1 805 9 view .LVU4627
 17854 0080 6421     		movs	r1, #100
 17855 0082 FFF7FEFF 		bl	getRegister
 17856              	.LVL1339:
 805:src/xeq.c     **** }
 17857              		.loc 1 805 9 view .LVU4628
 17858              	.LBE2858:
 17859              	.LBE2857:
3085:src/xeq.c     **** 			goto flse;
 17860              		.loc 1 3085 3 is_stmt 1 view .LVU4629
3085:src/xeq.c     **** 			goto flse;
 17861              		.loc 1 3085 6 is_stmt 0 view .LVU4630
 17862 0086 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 17863 008a 13F0300F 		tst	r3, #48
 17864 008e 17D1     		bne	.L1260
3088:src/xeq.c     **** 		if (decNumberIsNaN(&t))
 17865              		.loc 1 3088 3 is_stmt 1 view .LVU4631
 17866 0090 01A8     		add	r0, sp, #4
 17867 0092 4146     		mov	r1, r8
 17868 0094 FFF7FEFF 		bl	getRegister
 17869              	.LVL1340:
3089:src/xeq.c     **** 			goto flse;
 17870              		.loc 1 3089 3 view .LVU4632
3089:src/xeq.c     **** 			goto flse;
 17871              		.loc 1 3089 6 is_stmt 0 view .LVU4633
 17872 0098 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 17873 009c 13F0300F 		tst	r3, #48
 17874 00a0 0ED1     		bne	.L1260
3092:src/xeq.c     **** 			decNumberRnd(&x, &x);
 17875              		.loc 1 3092 3 is_stmt 1 view .LVU4634
3092:src/xeq.c     **** 			decNumberRnd(&x, &x);
 17876              		.loc 1 3092 6 is_stmt 0 view .LVU4635
 17877 00a2 022C     		cmp	r4, #2
 17878 00a4 50D0     		beq	.L1272
ARM GAS  /tmp/cciWh9P3.s 			page 486


 17879              	.L1257:
3097:src/xeq.c     **** 		iszero = dn_eq0(&r);
 17880              		.loc 1 3097 3 is_stmt 1 view .LVU4636
 17881 00a6 01AA     		add	r2, sp, #4
 17882 00a8 0AA9     		add	r1, sp, #40
 17883 00aa 13A8     		add	r0, sp, #76
 17884 00ac FFF7FEFF 		bl	dn_compare
 17885              	.LVL1341:
3098:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 17886              		.loc 1 3098 3 view .LVU4637
3098:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 17887              		.loc 1 3098 12 is_stmt 0 view .LVU4638
 17888 00b0 13A8     		add	r0, sp, #76
 17889 00b2 FFF7FEFF 		bl	dn_eq0
 17890              	.LVL1342:
3099:src/xeq.c     **** 	}
 17891              		.loc 1 3099 11 view .LVU4639
 17892 00b6 9DF95430 		ldrsb	r3, [sp, #84]
 17893              	.LVL1343:
3099:src/xeq.c     **** 	}
 17894              		.loc 1 3099 3 is_stmt 1 view .LVU4640
3099:src/xeq.c     **** 	}
 17895              		.loc 1 3099 11 is_stmt 0 view .LVU4641
 17896 00ba DB0F     		lsrs	r3, r3, #31
 17897              	.LVL1344:
3099:src/xeq.c     **** 	}
 17898              		.loc 1 3099 11 view .LVU4642
 17899 00bc CDE7     		b	.L1254
 17900              	.LVL1345:
 17901              	.L1265:
3099:src/xeq.c     **** 	}
 17902              		.loc 1 3099 11 view .LVU4643
 17903              	.LBE2856:
3106:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 17904              		.loc 1 3106 15 is_stmt 1 view .LVU4644
3106:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 17905              		.loc 1 3106 25 is_stmt 0 view .LVU4645
 17906 00be 2BBB     		cbnz	r3, .L1271
 17907              	.LVL1346:
 17908              	.L1260:
3106:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 17909              		.loc 1 3106 25 view .LVU4646
 17910 00c0 0020     		movs	r0, #0
 17911              	.LVL1347:
3113:src/xeq.c     **** }
 17912              		.loc 1 3113 7 is_stmt 1 view .LVU4647
 17913 00c2 FFF7FEFF 		bl	fin_tst
 17914              	.LVL1348:
3114:src/xeq.c     **** 
 17915              		.loc 1 3114 1 is_stmt 0 view .LVU4648
 17916 00c6 1CB0     		add	sp, sp, #112
 17917              		.cfi_remember_state
 17918              		.cfi_def_cfa_offset 24
 17919              		@ sp needed
 17920 00c8 BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 17921              	.LVL1349:
 17922              	.L1247:
ARM GAS  /tmp/cciWh9P3.s 			page 487


 17923              		.cfi_restore_state
 17924              	.LBB2859:
3072:src/xeq.c     **** 
 17925              		.loc 1 3072 4 is_stmt 1 view .LVU4649
3072:src/xeq.c     **** 
 17926              		.loc 1 3072 24 is_stmt 0 view .LVU4650
 17927 00cc B945     		cmp	r9, r7
 17928 00ce 08BF     		it	eq
 17929 00d0 B045     		cmpeq	r8, r6
 17930 00d2 BDD1     		bne	.L1250
3072:src/xeq.c     **** 
 17931              		.loc 1 3072 31 discriminator 1 view .LVU4651
 17932 00d4 0A9B     		ldr	r3, [sp, #40]
3072:src/xeq.c     **** 
 17933              		.loc 1 3072 24 discriminator 1 view .LVU4652
 17934 00d6 9342     		cmp	r3, r2
 17935 00d8 33D0     		beq	.L1267
3072:src/xeq.c     **** 
 17936              		.loc 1 3072 24 view .LVU4653
 17937 00da 0020     		movs	r0, #0
 17938 00dc BDE7     		b	.L1254
 17939              	.LVL1350:
 17940              	.L1245:
3067:src/xeq.c     **** 
 17941              		.loc 1 3067 4 is_stmt 1 view .LVU4654
3067:src/xeq.c     **** 
 17942              		.loc 1 3067 9 is_stmt 0 view .LVU4655
 17943 00de 4046     		mov	r0, r8
 17944 00e0 FFF7FEFF 		bl	get_reg_n_int
 17945              	.LVL1351:
 17946 00e4 13AA     		add	r2, sp, #76
 17947 00e6 FFF7FEFF 		bl	extract_value
 17948              	.LVL1352:
 17949 00ea 139A     		ldr	r2, [sp, #76]
 17950 00ec 8046     		mov	r8, r0
 17951              	.LVL1353:
3067:src/xeq.c     **** 
 17952              		.loc 1 3067 9 view .LVU4656
 17953 00ee 8946     		mov	r9, r1
 17954              	.LVL1354:
3067:src/xeq.c     **** 
 17955              		.loc 1 3067 9 view .LVU4657
 17956 00f0 A8E7     		b	.L1246
 17957              	.L1248:
3067:src/xeq.c     **** 
 17958              		.loc 1 3067 9 view .LVU4658
 17959 00f2 0A9B     		ldr	r3, [sp, #40]
3074:src/xeq.c     **** 			if (xs)		// both negative
 17960              		.loc 1 3074 6 view .LVU4659
 17961 00f4 9A42     		cmp	r2, r3
3070:src/xeq.c     **** 		else
 17962              		.loc 1 3070 11 view .LVU4660
 17963 00f6 4FF00100 		mov	r0, #1
 17964              	.LVL1355:
3074:src/xeq.c     **** 			if (xs)		// both negative
 17965              		.loc 1 3074 3 is_stmt 1 view .LVU4661
3074:src/xeq.c     **** 			if (xs)		// both negative
ARM GAS  /tmp/cciWh9P3.s 			page 488


 17966              		.loc 1 3074 6 is_stmt 0 view .LVU4662
 17967 00fa AED1     		bne	.L1254
 17968              	.LVL1356:
 17969              	.L1251:
3075:src/xeq.c     **** 				isneg = xv > yv;
 17970              		.loc 1 3075 4 is_stmt 1 view .LVU4663
3075:src/xeq.c     **** 				isneg = xv > yv;
 17971              		.loc 1 3075 7 is_stmt 0 view .LVU4664
 17972 00fc 73B1     		cbz	r3, .L1253
3076:src/xeq.c     **** 			else		// both positive
 17973              		.loc 1 3076 5 is_stmt 1 view .LVU4665
3076:src/xeq.c     **** 			else		// both positive
 17974              		.loc 1 3076 16 is_stmt 0 view .LVU4666
 17975 00fe B945     		cmp	r9, r7
 17976 0100 08BF     		it	eq
 17977 0102 B045     		cmpeq	r8, r6
 17978 0104 34BF     		ite	cc
 17979 0106 0123     		movcc	r3, #1
 17980 0108 0023     		movcs	r3, #0
 17981              	.LVL1357:
3076:src/xeq.c     **** 			else		// both positive
 17982              		.loc 1 3076 16 view .LVU4667
 17983 010a A6E7     		b	.L1254
 17984              	.LVL1358:
 17985              	.L1271:
3076:src/xeq.c     **** 			else		// both positive
 17986              		.loc 1 3076 16 view .LVU4668
 17987              	.LBE2859:
3106:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 17988              		.loc 1 3106 25 discriminator 1 view .LVU4669
 17989 010c B0FA80F0 		clz	r0, r0
 17990              	.LVL1359:
3106:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 17991              		.loc 1 3106 25 discriminator 1 view .LVU4670
 17992 0110 4009     		lsrs	r0, r0, #5
 17993              	.LVL1360:
3113:src/xeq.c     **** }
 17994              		.loc 1 3113 7 is_stmt 1 discriminator 1 view .LVU4671
 17995 0112 FFF7FEFF 		bl	fin_tst
 17996              	.LVL1361:
3114:src/xeq.c     **** 
 17997              		.loc 1 3114 1 is_stmt 0 discriminator 1 view .LVU4672
 17998 0116 1CB0     		add	sp, sp, #112
 17999              		.cfi_remember_state
 18000              		.cfi_def_cfa_offset 24
 18001              		@ sp needed
 18002 0118 BDE8D083 		pop	{r4, r6, r7, r8, r9, pc}
 18003              	.LVL1362:
 18004              	.L1253:
 18005              		.cfi_restore_state
 18006              	.LBB2860:
3078:src/xeq.c     **** 		} else
 18007              		.loc 1 3078 5 is_stmt 1 view .LVU4673
3078:src/xeq.c     **** 		} else
 18008              		.loc 1 3078 16 is_stmt 0 view .LVU4674
 18009 011c 4F45     		cmp	r7, r9
 18010 011e 08BF     		it	eq
ARM GAS  /tmp/cciWh9P3.s 			page 489


 18011 0120 4645     		cmpeq	r6, r8
 18012 0122 34BF     		ite	cc
 18013 0124 0123     		movcc	r3, #1
 18014 0126 0023     		movcs	r3, #0
 18015              	.LVL1363:
3078:src/xeq.c     **** 		} else
 18016              		.loc 1 3078 16 view .LVU4675
 18017 0128 97E7     		b	.L1254
 18018              	.LVL1364:
 18019              	.L1264:
3078:src/xeq.c     **** 		} else
 18020              		.loc 1 3078 16 view .LVU4676
 18021              	.LBE2860:
3107:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 18022              		.loc 1 3107 15 is_stmt 1 discriminator 2 view .LVU4677
3107:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 18023              		.loc 1 3107 25 is_stmt 0 discriminator 2 view .LVU4678
 18024 012a 0343     		orrs	r3, r0, r3
 18025              	.LVL1365:
3107:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 18026              		.loc 1 3107 25 discriminator 2 view .LVU4679
 18027 012c 14BF     		ite	ne
 18028 012e 0120     		movne	r0, #1
 18029              	.LVL1366:
3107:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 18030              		.loc 1 3107 25 discriminator 2 view .LVU4680
 18031 0130 0020     		moveq	r0, #0
 18032 0132 9FE7     		b	.L1259
 18033              	.LVL1367:
 18034              	.L1263:
3108:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 18035              		.loc 1 3108 15 is_stmt 1 discriminator 1 view .LVU4681
3108:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 18036              		.loc 1 3108 26 is_stmt 0 discriminator 1 view .LVU4682
 18037 0134 0343     		orrs	r3, r0, r3
 18038              	.LVL1368:
3108:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 18039              		.loc 1 3108 26 discriminator 1 view .LVU4683
 18040 0136 0CBF     		ite	eq
 18041 0138 0120     		moveq	r0, #1
 18042              	.LVL1369:
3108:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 18043              		.loc 1 3108 26 discriminator 1 view .LVU4684
 18044 013a 0020     		movne	r0, #0
 18045 013c 9AE7     		b	.L1259
 18046              	.LVL1370:
 18047              	.L1269:
3109:src/xeq.c     **** 	default:	a = 0;			break;
 18048              		.loc 1 3109 26 view .LVU4685
 18049 013e 0120     		movs	r0, #1
 18050              	.LVL1371:
3109:src/xeq.c     **** 	default:	a = 0;			break;
 18051              		.loc 1 3109 26 view .LVU4686
 18052 0140 98E7     		b	.L1259
 18053              	.LVL1372:
 18054              	.L1267:
 18055              	.LBB2861:
ARM GAS  /tmp/cciWh9P3.s 			page 490


3109:src/xeq.c     **** 	default:	a = 0;			break;
 18056              		.loc 1 3109 26 view .LVU4687
 18057 0142 1346     		mov	r3, r2
3072:src/xeq.c     **** 
 18058              		.loc 1 3072 24 view .LVU4688
 18059 0144 0120     		movs	r0, #1
 18060 0146 D9E7     		b	.L1251
 18061              	.LVL1373:
 18062              	.L1272:
3072:src/xeq.c     **** 
 18063              		.loc 1 3072 24 view .LVU4689
 18064              	.LBE2861:
 18065              	.LBB2862:
3093:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
 18066              		.loc 1 3093 4 is_stmt 1 view .LVU4690
 18067 0148 0AA9     		add	r1, sp, #40
 18068 014a 0846     		mov	r0, r1
 18069 014c FFF7FEFF 		bl	decNumberRnd
 18070              	.LVL1374:
3094:src/xeq.c     **** 				decNumberRnd(&t, &t);
 18071              		.loc 1 3094 4 view .LVU4691
3094:src/xeq.c     **** 				decNumberRnd(&t, &t);
 18072              		.loc 1 3094 7 is_stmt 0 view .LVU4692
 18073 0150 B8F5FA6F 		cmp	r8, #2000
 18074 0154 A7DA     		bge	.L1257
3095:src/xeq.c     **** 		}
 18075              		.loc 1 3095 5 is_stmt 1 view .LVU4693
 18076 0156 01A9     		add	r1, sp, #4
 18077 0158 0846     		mov	r0, r1
 18078 015a FFF7FEFF 		bl	decNumberRnd
 18079              	.LVL1375:
 18080 015e A2E7     		b	.L1257
 18081              	.L1274:
 18082              		.align	2
 18083              	.L1273:
 18084 0160 00000000 		.word	StateWhileOn
 18085 0164 00000000 		.word	main_ram
 18086              	.LBE2862:
 18087              		.cfi_endproc
 18088              	.LFE181:
 18090              		.section	.text.do_ztst,"ax",%progbits
 18091              		.align	1
 18092              		.p2align 2,,3
 18093              		.syntax unified
 18094              		.thumb
 18095              		.thumb_func
 18096              		.fpu fpv4-sp-d16
 18098              	do_ztst:
 18099              	.LVL1376:
 18100              	.LFB184:
3139:src/xeq.c     **** 	decNumber x, y;
 18101              		.loc 1 3139 79 view -0
 18102              		.cfi_startproc
 18103              		@ args = 0, pretend = 0, frame = 72
 18104              		@ frame_needed = 0, uses_anonymous_args = 0
3140:src/xeq.c     **** 
 18105              		.loc 1 3140 2 view .LVU4695
ARM GAS  /tmp/cciWh9P3.s 			page 491


3142:src/xeq.c     **** 	if (is_intmode()) {
 18106              		.loc 1 3142 2 view .LVU4696
 18107              	.LBB2879:
 18108              	.LBI2879:
1145:src/xeq.c     **** 	process_cmdline();
 18109              		.loc 1 1145 6 view .LVU4697
 18110              	.LBB2880:
1146:src/xeq.c     **** 	set_lift();
 18111              		.loc 1 1146 2 view .LVU4698
 18112              	.LBE2880:
 18113              	.LBE2879:
3139:src/xeq.c     **** 	decNumber x, y;
 18114              		.loc 1 3139 79 is_stmt 0 view .LVU4699
 18115 0000 70B5     		push	{r4, r5, r6, lr}
 18116              		.cfi_def_cfa_offset 16
 18117              		.cfi_offset 4, -16
 18118              		.cfi_offset 5, -12
 18119              		.cfi_offset 6, -8
 18120              		.cfi_offset 14, -4
 18121 0002 92B0     		sub	sp, sp, #72
 18122              		.cfi_def_cfa_offset 88
3139:src/xeq.c     **** 	decNumber x, y;
 18123              		.loc 1 3139 79 view .LVU4700
 18124 0004 0E46     		mov	r6, r1
 18125 0006 1546     		mov	r5, r2
 18126 0008 0446     		mov	r4, r0
 18127              	.LBB2890:
 18128              	.LBB2887:
1146:src/xeq.c     **** 	set_lift();
 18129              		.loc 1 1146 2 view .LVU4701
 18130 000a FFF7FEFF 		bl	process_cmdline
 18131              	.LVL1377:
1147:src/xeq.c     **** }
 18132              		.loc 1 1147 2 is_stmt 1 view .LVU4702
 18133              	.LBB2881:
 18134              	.LBI2881:
 747:src/xeq.c     ****     State2.state_lift = 1;
 18135              		.loc 1 747 6 view .LVU4703
 18136              	.LBB2882:
 748:src/xeq.c     **** }
 18137              		.loc 1 748 5 view .LVU4704
 748:src/xeq.c     **** }
 18138              		.loc 1 748 23 is_stmt 0 view .LVU4705
 18139 000e 274A     		ldr	r2, .L1289
 18140              	.LBE2882:
 18141              	.LBE2881:
 18142              	.LBE2887:
 18143              	.LBE2890:
3143:src/xeq.c     **** 		bad_mode_error();
 18144              		.loc 1 3143 6 view .LVU4706
 18145 0010 2749     		ldr	r1, .L1289+4
 18146              	.LBB2891:
 18147              	.LBB2888:
 18148              	.LBB2885:
 18149              	.LBB2883:
 748:src/xeq.c     **** }
 18150              		.loc 1 748 23 view .LVU4707
ARM GAS  /tmp/cciWh9P3.s 			page 492


 18151 0012 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 18152              	.LBE2883:
 18153              	.LBE2885:
 18154              	.LBE2888:
 18155              	.LBE2891:
3143:src/xeq.c     **** 		bad_mode_error();
 18156              		.loc 1 3143 6 view .LVU4708
 18157 0014 0968     		ldr	r1, [r1]
 18158              	.LBB2892:
 18159              	.LBB2889:
 18160              	.LBB2886:
 18161              	.LBB2884:
 748:src/xeq.c     **** }
 18162              		.loc 1 748 23 view .LVU4709
 18163 0016 43F04003 		orr	r3, r3, #64
 18164 001a D375     		strb	r3, [r2, #23]
 18165              	.LBE2884:
 18166              	.LBE2886:
 18167              	.LBE2889:
 18168              	.LBE2892:
3143:src/xeq.c     **** 		bad_mode_error();
 18169              		.loc 1 3143 2 is_stmt 1 view .LVU4710
3143:src/xeq.c     **** 		bad_mode_error();
 18170              		.loc 1 3143 6 is_stmt 0 view .LVU4711
 18171 001c 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
3143:src/xeq.c     **** 		bad_mode_error();
 18172              		.loc 1 3143 5 view .LVU4712
 18173 0020 DB07     		lsls	r3, r3, #31
 18174 0022 06D5     		bpl	.L1276
3144:src/xeq.c     **** 		return;
 18175              		.loc 1 3144 3 is_stmt 1 view .LVU4713
 18176              	.LBB2893:
 18177              	.LBI2893:
 565:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 18178              		.loc 1 565 6 view .LVU4714
 18179              	.LBE2893:
 566:src/xeq.c     **** }
 18180              		.loc 1 566 2 view .LVU4715
 18181              	.LVL1378:
 18182              	.LBB2898:
 18183              	.LBB2894:
 18184              	.LBI2894:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 18185              		.loc 1 536 5 view .LVU4716
 18186              	.LBB2895:
 537:src/xeq.c     **** 		Error = e;
 18187              		.loc 1 537 2 view .LVU4717
 537:src/xeq.c     **** 		Error = e;
 18188              		.loc 1 537 12 is_stmt 0 view .LVU4718
 18189 0024 234B     		ldr	r3, .L1289+8
 537:src/xeq.c     **** 		Error = e;
 18190              		.loc 1 537 5 view .LVU4719
 18191 0026 1A68     		ldr	r2, [r3]
 18192 0028 0AB9     		cbnz	r2, .L1275
 18193              	.LVL1379:
 18194              	.LBB2896:
 18195              	.LBI2896:
ARM GAS  /tmp/cciWh9P3.s 			page 493


 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 18196              		.loc 1 536 5 is_stmt 1 view .LVU4720
 18197              	.LBB2897:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 18198              		.loc 1 538 3 view .LVU4721
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 18199              		.loc 1 538 9 is_stmt 0 view .LVU4722
 18200 002a 0D22     		movs	r2, #13
 18201 002c 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 18202              		.loc 1 539 3 is_stmt 1 view .LVU4723
 18203              	.LVL1380:
 18204              	.L1275:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 18205              		.loc 1 539 3 is_stmt 0 view .LVU4724
 18206              	.LBE2897:
 18207              	.LBE2896:
 18208              	.LBE2895:
 18209              	.LBE2894:
 18210              	.LBE2898:
3153:src/xeq.c     **** 
 18211              		.loc 1 3153 1 view .LVU4725
 18212 002e 12B0     		add	sp, sp, #72
 18213              		.cfi_remember_state
 18214              		.cfi_def_cfa_offset 16
 18215              		@ sp needed
 18216 0030 70BD     		pop	{r4, r5, r6, pc}
 18217              	.LVL1381:
 18218              	.L1276:
 18219              		.cfi_restore_state
3147:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
 18220              		.loc 1 3147 2 is_stmt 1 view .LVU4726
 18221              	.LBB2899:
 18222              	.LBI2899:
 834:src/xeq.c     **** 	getX(x);
 18223              		.loc 1 834 6 view .LVU4727
 18224              	.LBE2899:
 835:src/xeq.c     **** 	getY(y);
 18225              		.loc 1 835 2 view .LVU4728
 18226              	.LBB2904:
 18227              	.LBB2900:
 18228              	.LBI2900:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18229              		.loc 1 804 12 view .LVU4729
 18230              	.LBB2901:
 805:src/xeq.c     **** }
 18231              		.loc 1 805 2 view .LVU4730
 805:src/xeq.c     **** }
 18232              		.loc 1 805 9 is_stmt 0 view .LVU4731
 18233 0032 6421     		movs	r1, #100
 18234 0034 6846     		mov	r0, sp
 18235 0036 FFF7FEFF 		bl	getRegister
 18236              	.LVL1382:
 805:src/xeq.c     **** }
 18237              		.loc 1 805 9 view .LVU4732
 18238              	.LBE2901:
 18239              	.LBE2900:
ARM GAS  /tmp/cciWh9P3.s 			page 494


 18240              	.LBE2904:
 836:src/xeq.c     **** }
 18241              		.loc 1 836 2 is_stmt 1 view .LVU4733
 18242              	.LBB2905:
 18243              	.LBB2902:
 18244              	.LBI2902:
 812:src/xeq.c     **** 	getRegister(y, regY_idx);
 18245              		.loc 1 812 6 view .LVU4734
 18246              	.LBB2903:
 813:src/xeq.c     **** }
 18247              		.loc 1 813 2 view .LVU4735
 18248 003a 09A8     		add	r0, sp, #36
 18249              	.LVL1383:
 813:src/xeq.c     **** }
 18250              		.loc 1 813 2 is_stmt 0 view .LVU4736
 18251 003c 6521     		movs	r1, #101
 18252 003e FFF7FEFF 		bl	getRegister
 18253              	.LVL1384:
 813:src/xeq.c     **** }
 18254              		.loc 1 813 2 view .LVU4737
 18255              	.LBE2903:
 18256              	.LBE2902:
 18257              	.LBE2905:
3148:src/xeq.c     **** 		fin_tst(0);
 18258              		.loc 1 3148 2 is_stmt 1 view .LVU4738
3148:src/xeq.c     **** 		fin_tst(0);
 18259              		.loc 1 3148 25 is_stmt 0 view .LVU4739
 18260 0042 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 18261 0046 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 18262 004a 1343     		orrs	r3, r3, r2
 18263 004c 13F0300F 		tst	r3, #48
 18264 0050 13D1     		bne	.L1278
3148:src/xeq.c     **** 		fin_tst(0);
 18265              		.loc 1 3148 47 discriminator 2 view .LVU4740
 18266 0052 237A     		ldrb	r3, [r4, #8]	@ zero_extendqisi2
 18267 0054 13F0300F 		tst	r3, #48
 18268 0058 0FD1     		bne	.L1278
3148:src/xeq.c     **** 		fin_tst(0);
 18269              		.loc 1 3148 69 discriminator 3 view .LVU4741
 18270 005a 337A     		ldrb	r3, [r6, #8]	@ zero_extendqisi2
 18271 005c 13F0300F 		tst	r3, #48
 18272 0060 0BD1     		bne	.L1278
3152:src/xeq.c     **** }
 18273              		.loc 1 3152 2 is_stmt 1 view .LVU4742
3152:src/xeq.c     **** }
 18274              		.loc 1 3152 29 is_stmt 0 view .LVU4743
 18275 0062 2146     		mov	r1, r4
 18276 0064 6846     		mov	r0, sp
 18277 0066 FFF7FEFF 		bl	dn_eq
 18278              	.LVL1385:
3152:src/xeq.c     **** }
 18279              		.loc 1 3152 25 view .LVU4744
 18280 006a 003D     		subs	r5, r5, #0
 18281 006c 18BF     		it	ne
 18282 006e 0125     		movne	r5, #1
3152:src/xeq.c     **** }
 18283              		.loc 1 3152 43 view .LVU4745
ARM GAS  /tmp/cciWh9P3.s 			page 495


 18284 0070 90B9     		cbnz	r0, .L1287
 18285              	.L1281:
3152:src/xeq.c     **** }
 18286              		.loc 1 3152 2 discriminator 6 view .LVU4746
 18287 0072 2846     		mov	r0, r5
 18288 0074 FFF7FEFF 		bl	fin_tst
 18289              	.LVL1386:
 18290 0078 D9E7     		b	.L1275
 18291              	.L1278:
3149:src/xeq.c     **** 		return;
 18292              		.loc 1 3149 3 is_stmt 1 view .LVU4747
 18293              	.LVL1387:
 18294              	.LBB2906:
 18295              	.LBI2906:
2337:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18296              		.loc 1 2337 6 view .LVU4748
 18297              	.LBB2907:
2338:src/xeq.c     **** 	if (Running || XromRunning) {
 18298              		.loc 1 2338 2 view .LVU4749
2339:src/xeq.c     **** 		if (! a && incpc())
 18299              		.loc 1 2339 2 view .LVU4750
2339:src/xeq.c     **** 		if (! a && incpc())
 18300              		.loc 1 2339 6 is_stmt 0 view .LVU4751
 18301 007a 0F4A     		ldr	r2, .L1289+12
2339:src/xeq.c     **** 		if (! a && incpc())
 18302              		.loc 1 2339 14 view .LVU4752
 18303 007c 0F4B     		ldr	r3, .L1289+16
 18304 007e 1268     		ldr	r2, [r2]
 18305 0080 1B68     		ldr	r3, [r3]
 18306 0082 1343     		orrs	r3, r2, r3
 18307 0084 04D1     		bne	.L1288
2344:src/xeq.c     **** #ifdef INFRARED
 18308              		.loc 1 2344 3 is_stmt 1 view .LVU4753
2344:src/xeq.c     **** #ifdef INFRARED
 18309              		.loc 1 2344 11 is_stmt 0 view .LVU4754
 18310 0086 0E4B     		ldr	r3, .L1289+20
 18311 0088 0E4A     		ldr	r2, .L1289+24
 18312 008a 1A60     		str	r2, [r3]
 18313              	.LBE2907:
 18314              	.LBE2906:
3153:src/xeq.c     **** 
 18315              		.loc 1 3153 1 view .LVU4755
 18316 008c 12B0     		add	sp, sp, #72
 18317              		.cfi_remember_state
 18318              		.cfi_def_cfa_offset 16
 18319              		@ sp needed
 18320 008e 70BD     		pop	{r4, r5, r6, pc}
 18321              	.LVL1388:
 18322              	.L1288:
 18323              		.cfi_restore_state
 18324              	.LBB2909:
 18325              	.LBB2908:
2340:src/xeq.c     **** 			decpc();
 18326              		.loc 1 2340 3 is_stmt 1 view .LVU4756
 18327 0090 FFF7FEFF 		bl	fin_tst.part.0
 18328              	.LVL1389:
 18329              	.LBE2908:
ARM GAS  /tmp/cciWh9P3.s 			page 496


 18330              	.LBE2909:
3153:src/xeq.c     **** 
 18331              		.loc 1 3153 1 is_stmt 0 view .LVU4757
 18332 0094 12B0     		add	sp, sp, #72
 18333              		.cfi_remember_state
 18334              		.cfi_def_cfa_offset 16
 18335              		@ sp needed
 18336 0096 70BD     		pop	{r4, r5, r6, pc}
 18337              	.LVL1390:
 18338              	.L1287:
 18339              		.cfi_restore_state
3152:src/xeq.c     **** }
 18340              		.loc 1 3152 46 discriminator 1 view .LVU4758
 18341 0098 3146     		mov	r1, r6
 18342 009a 09A8     		add	r0, sp, #36
 18343 009c FFF7FEFF 		bl	dn_eq
 18344              	.LVL1391:
 18345 00a0 0028     		cmp	r0, #0
 18346 00a2 18BF     		it	ne
 18347 00a4 85F00105 		eorne	r5, r5, #1
 18348 00a8 E3E7     		b	.L1281
 18349              	.L1290:
 18350 00aa 00BF     		.align	2
 18351              	.L1289:
 18352 00ac 00000000 		.word	StateWhileOn
 18353 00b0 00000000 		.word	main_ram
 18354 00b4 00000000 		.word	Error
 18355 00b8 00000000 		.word	Running
 18356 00bc 00000000 		.word	XromRunning
 18357 00c0 00000000 		.word	DispMsg
 18358 00c4 00000000 		.word	.LC3
 18359              		.cfi_endproc
 18360              	.LFE184:
 18362              		.section	.text.check_zero,"ax",%progbits
 18363              		.align	1
 18364              		.p2align 2,,3
 18365              		.global	check_zero
 18366              		.syntax unified
 18367              		.thumb
 18368              		.thumb_func
 18369              		.fpu fpv4-sp-d16
 18371              	check_zero:
 18372              	.LVL1392:
 18373              	.LFB182:
3116:src/xeq.c     **** 	int neg;
 18374              		.loc 1 3116 32 is_stmt 1 view -0
 18375              		.cfi_startproc
 18376              		@ args = 0, pretend = 0, frame = 40
 18377              		@ frame_needed = 0, uses_anonymous_args = 0
3117:src/xeq.c     **** 	int zero;
 18378              		.loc 1 3117 2 view .LVU4760
3118:src/xeq.c     **** 
 18379              		.loc 1 3118 2 view .LVU4761
3120:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18380              		.loc 1 3120 2 view .LVU4762
3120:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18381              		.loc 1 3120 6 is_stmt 0 view .LVU4763
ARM GAS  /tmp/cciWh9P3.s 			page 497


 18382 0000 1A4B     		ldr	r3, .L1306
3116:src/xeq.c     **** 	int neg;
 18383              		.loc 1 3116 32 view .LVU4764
 18384 0002 10B5     		push	{r4, lr}
 18385              		.cfi_def_cfa_offset 8
 18386              		.cfi_offset 4, -8
 18387              		.cfi_offset 14, -4
3120:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18388              		.loc 1 3120 6 view .LVU4765
 18389 0004 1B68     		ldr	r3, [r3]
 18390 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3120:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18391              		.loc 1 3120 5 view .LVU4766
 18392 000a DB07     		lsls	r3, r3, #31
3116:src/xeq.c     **** 	int neg;
 18393              		.loc 1 3116 32 view .LVU4767
 18394 000c 8AB0     		sub	sp, sp, #40
 18395              		.cfi_def_cfa_offset 48
3116:src/xeq.c     **** 	int neg;
 18396              		.loc 1 3116 32 view .LVU4768
 18397 000e 0446     		mov	r4, r0
3120:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 18398              		.loc 1 3120 5 view .LVU4769
 18399 0010 15D5     		bpl	.L1292
 18400              	.LBB2910:
3121:src/xeq.c     **** 		zero = (xv == 0);
 18401              		.loc 1 3121 3 is_stmt 1 view .LVU4770
 18402              	.LBB2911:
 18403              	.LBI2911:
1255:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 18404              		.loc 1 1255 15 view .LVU4771
 18405              	.LBB2912:
1256:src/xeq.c     **** }
 18406              		.loc 1 1256 2 view .LVU4772
1256:src/xeq.c     **** }
 18407              		.loc 1 1256 9 is_stmt 0 view .LVU4773
 18408 0012 6420     		movs	r0, #100
 18409              	.LVL1393:
1256:src/xeq.c     **** }
 18410              		.loc 1 1256 9 view .LVU4774
 18411 0014 FFF7FEFF 		bl	get_reg_n_int
 18412              	.LVL1394:
 18413              	.LBE2912:
 18414              	.LBE2911:
3121:src/xeq.c     **** 		zero = (xv == 0);
 18415              		.loc 1 3121 37 view .LVU4775
 18416 0018 6A46     		mov	r2, sp
 18417 001a FFF7FEFF 		bl	extract_value
 18418              	.LVL1395:
3122:src/xeq.c     **** 	} else {
 18419              		.loc 1 3122 3 is_stmt 1 view .LVU4776
3122:src/xeq.c     **** 	} else {
 18420              		.loc 1 3122 14 is_stmt 0 view .LVU4777
 18421 001e 50EA0103 		orrs	r3, r0, r1
 18422 0022 0CBF     		ite	eq
 18423 0024 0120     		moveq	r0, #1
 18424              	.LVL1396:
ARM GAS  /tmp/cciWh9P3.s 			page 498


3122:src/xeq.c     **** 	} else {
 18425              		.loc 1 3122 14 view .LVU4778
 18426 0026 0020     		movne	r0, #0
 18427              	.LVL1397:
3122:src/xeq.c     **** 	} else {
 18428              		.loc 1 3122 14 view .LVU4779
 18429              	.LBE2910:
3129:src/xeq.c     **** 		fin_tst(zero && !neg);
 18430              		.loc 1 3129 2 is_stmt 1 view .LVU4780
3129:src/xeq.c     **** 		fin_tst(zero && !neg);
 18431              		.loc 1 3129 5 is_stmt 0 view .LVU4781
 18432 0028 A12C     		cmp	r4, #161
 18433 002a 15D0     		beq	.L1305
 18434              	.L1294:
3132:src/xeq.c     **** }
 18435              		.loc 1 3132 3 is_stmt 1 view .LVU4782
 18436 002c 18B1     		cbz	r0, .L1297
3132:src/xeq.c     **** }
 18437              		.loc 1 3132 3 is_stmt 0 discriminator 1 view .LVU4783
 18438 002e 0098     		ldr	r0, [sp]
 18439              	.LVL1398:
3132:src/xeq.c     **** }
 18440              		.loc 1 3132 3 discriminator 1 view .LVU4784
 18441 0030 0038     		subs	r0, r0, #0
 18442 0032 18BF     		it	ne
 18443 0034 0120     		movne	r0, #1
 18444              	.L1297:
3132:src/xeq.c     **** }
 18445              		.loc 1 3132 3 discriminator 6 view .LVU4785
 18446 0036 FFF7FEFF 		bl	fin_tst
 18447              	.LVL1399:
3133:src/xeq.c     **** 
 18448              		.loc 1 3133 1 discriminator 6 view .LVU4786
 18449 003a 0AB0     		add	sp, sp, #40
 18450              		.cfi_remember_state
 18451              		.cfi_def_cfa_offset 8
 18452              		@ sp needed
 18453 003c 10BD     		pop	{r4, pc}
 18454              	.LVL1400:
 18455              	.L1292:
 18456              		.cfi_restore_state
 18457              	.LBB2913:
3124:src/xeq.c     **** 		getX(&x);
 18458              		.loc 1 3124 3 is_stmt 1 view .LVU4787
3125:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
 18459              		.loc 1 3125 3 view .LVU4788
 18460              	.LBB2914:
 18461              	.LBI2914:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18462              		.loc 1 804 12 view .LVU4789
 18463              	.LBB2915:
 805:src/xeq.c     **** }
 18464              		.loc 1 805 2 view .LVU4790
 805:src/xeq.c     **** }
 18465              		.loc 1 805 9 is_stmt 0 view .LVU4791
 18466 003e 6421     		movs	r1, #100
 18467 0040 01A8     		add	r0, sp, #4
ARM GAS  /tmp/cciWh9P3.s 			page 499


 18468              	.LVL1401:
 805:src/xeq.c     **** }
 18469              		.loc 1 805 9 view .LVU4792
 18470 0042 FFF7FEFF 		bl	getRegister
 18471              	.LVL1402:
 805:src/xeq.c     **** }
 18472              		.loc 1 805 9 view .LVU4793
 18473              	.LBE2915:
 18474              	.LBE2914:
3126:src/xeq.c     **** 		zero = dn_eq0(&x);
 18475              		.loc 1 3126 3 is_stmt 1 view .LVU4794
3126:src/xeq.c     **** 		zero = dn_eq0(&x);
 18476              		.loc 1 3126 9 is_stmt 0 view .LVU4795
 18477 0046 9DF90C30 		ldrsb	r3, [sp, #12]
3127:src/xeq.c     **** 	}
 18478              		.loc 1 3127 10 view .LVU4796
 18479 004a 01A8     		add	r0, sp, #4
3126:src/xeq.c     **** 		zero = dn_eq0(&x);
 18480              		.loc 1 3126 9 view .LVU4797
 18481 004c DB0F     		lsrs	r3, r3, #31
3126:src/xeq.c     **** 		zero = dn_eq0(&x);
 18482              		.loc 1 3126 7 view .LVU4798
 18483 004e 0093     		str	r3, [sp]
3127:src/xeq.c     **** 	}
 18484              		.loc 1 3127 3 is_stmt 1 view .LVU4799
3127:src/xeq.c     **** 	}
 18485              		.loc 1 3127 10 is_stmt 0 view .LVU4800
 18486 0050 FFF7FEFF 		bl	dn_eq0
 18487              	.LVL1403:
3127:src/xeq.c     **** 	}
 18488              		.loc 1 3127 10 view .LVU4801
 18489              	.LBE2913:
3129:src/xeq.c     **** 		fin_tst(zero && !neg);
 18490              		.loc 1 3129 2 is_stmt 1 view .LVU4802
3129:src/xeq.c     **** 		fin_tst(zero && !neg);
 18491              		.loc 1 3129 5 is_stmt 0 view .LVU4803
 18492 0054 A12C     		cmp	r4, #161
 18493 0056 E9D1     		bne	.L1294
 18494              	.L1305:
3130:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 18495              		.loc 1 3130 3 is_stmt 1 view .LVU4804
 18496 0058 0028     		cmp	r0, #0
 18497 005a ECD0     		beq	.L1297
3130:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 18498              		.loc 1 3130 3 is_stmt 0 discriminator 1 view .LVU4805
 18499 005c 0098     		ldr	r0, [sp]
 18500              	.LVL1404:
3130:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 18501              		.loc 1 3130 3 discriminator 1 view .LVU4806
 18502 005e B0FA80F0 		clz	r0, r0
 18503 0062 4009     		lsrs	r0, r0, #5
3132:src/xeq.c     **** }
 18504              		.loc 1 3132 3 discriminator 1 view .LVU4807
 18505 0064 FFF7FEFF 		bl	fin_tst
 18506              	.LVL1405:
3133:src/xeq.c     **** 
 18507              		.loc 1 3133 1 discriminator 1 view .LVU4808
ARM GAS  /tmp/cciWh9P3.s 			page 500


 18508 0068 0AB0     		add	sp, sp, #40
 18509              		.cfi_def_cfa_offset 8
 18510              		@ sp needed
 18511 006a 10BD     		pop	{r4, pc}
 18512              	.L1307:
 18513              		.align	2
 18514              	.L1306:
 18515 006c 00000000 		.word	main_ram
 18516              		.cfi_endproc
 18517              	.LFE182:
 18519              		.section	.text.cmdtest,"ax",%progbits
 18520              		.align	1
 18521              		.p2align 2,,3
 18522              		.global	cmdtest
 18523              		.syntax unified
 18524              		.thumb
 18525              		.thumb_func
 18526              		.fpu fpv4-sp-d16
 18528              	cmdtest:
 18529              	.LVL1406:
 18530              	.LFB183:
3135:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
 18531              		.loc 1 3135 46 is_stmt 1 view -0
 18532              		.cfi_startproc
 18533              		@ args = 0, pretend = 0, frame = 0
 18534              		@ frame_needed = 0, uses_anonymous_args = 0
 18535              		@ link register save eliminated.
3136:src/xeq.c     **** }
 18536              		.loc 1 3136 2 view .LVU4810
3136:src/xeq.c     **** }
 18537              		.loc 1 3136 31 is_stmt 0 view .LVU4811
 18538 0000 2D39     		subs	r1, r1, #45
 18539              	.LVL1407:
3136:src/xeq.c     **** }
 18540              		.loc 1 3136 2 view .LVU4812
 18541 0002 C9B2     		uxtb	r1, r1
 18542 0004 FFF7FEBF 		b	do_tst
 18543              	.LVL1408:
3136:src/xeq.c     **** }
 18544              		.loc 1 3136 2 view .LVU4813
 18545              		.cfi_endproc
 18546              	.LFE183:
 18548              		.section	.text.cmdztest,"ax",%progbits
 18549              		.align	1
 18550              		.p2align 2,,3
 18551              		.global	cmdztest
 18552              		.syntax unified
 18553              		.thumb
 18554              		.thumb_func
 18555              		.fpu fpv4-sp-d16
 18557              	cmdztest:
 18558              	.LVL1409:
 18559              	.LFB185:
3155:src/xeq.c     **** 	decNumber re, im;
 18560              		.loc 1 3155 47 is_stmt 1 view -0
 18561              		.cfi_startproc
 18562              		@ args = 0, pretend = 0, frame = 72
ARM GAS  /tmp/cciWh9P3.s 			page 501


 18563              		@ frame_needed = 0, uses_anonymous_args = 0
3156:src/xeq.c     **** 	getRegister(&re, arg);
 18564              		.loc 1 3156 2 view .LVU4815
3157:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18565              		.loc 1 3157 2 view .LVU4816
3155:src/xeq.c     **** 	decNumber re, im;
 18566              		.loc 1 3155 47 is_stmt 0 view .LVU4817
 18567 0000 30B5     		push	{r4, r5, lr}
 18568              		.cfi_def_cfa_offset 12
 18569              		.cfi_offset 4, -12
 18570              		.cfi_offset 5, -8
 18571              		.cfi_offset 14, -4
 18572 0002 0546     		mov	r5, r0
 18573 0004 93B0     		sub	sp, sp, #76
 18574              		.cfi_def_cfa_offset 88
3155:src/xeq.c     **** 	decNumber re, im;
 18575              		.loc 1 3155 47 view .LVU4818
 18576 0006 0C46     		mov	r4, r1
3157:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18577              		.loc 1 3157 2 view .LVU4819
 18578 0008 6846     		mov	r0, sp
 18579              	.LVL1410:
3157:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18580              		.loc 1 3157 2 view .LVU4820
 18581 000a 2946     		mov	r1, r5
 18582              	.LVL1411:
3157:src/xeq.c     **** 	getRegister(&im, arg + 1);
 18583              		.loc 1 3157 2 view .LVU4821
 18584 000c FFF7FEFF 		bl	getRegister
 18585              	.LVL1412:
3158:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
 18586              		.loc 1 3158 2 is_stmt 1 view .LVU4822
 18587 0010 691C     		adds	r1, r5, #1
 18588 0012 09A8     		add	r0, sp, #36
 18589 0014 FFF7FEFF 		bl	getRegister
 18590              	.LVL1413:
3159:src/xeq.c     **** }
 18591              		.loc 1 3159 2 view .LVU4823
3159:src/xeq.c     **** }
 18592              		.loc 1 3159 37 is_stmt 0 view .LVU4824
 18593 0018 A4F13402 		sub	r2, r4, #52
3159:src/xeq.c     **** }
 18594              		.loc 1 3159 2 view .LVU4825
 18595 001c D2B2     		uxtb	r2, r2
 18596 001e 09A9     		add	r1, sp, #36
 18597 0020 6846     		mov	r0, sp
 18598 0022 FFF7FEFF 		bl	do_ztst
 18599              	.LVL1414:
3160:src/xeq.c     **** 
 18600              		.loc 1 3160 1 view .LVU4826
 18601 0026 13B0     		add	sp, sp, #76
 18602              		.cfi_def_cfa_offset 12
 18603              		@ sp needed
 18604 0028 30BD     		pop	{r4, r5, pc}
3160:src/xeq.c     **** 
 18605              		.loc 1 3160 1 view .LVU4827
 18606              		.cfi_endproc
ARM GAS  /tmp/cciWh9P3.s 			page 502


 18607              	.LFE185:
 18609 002a 00BF     		.section	.text.cmdlincdec,"ax",%progbits
 18610              		.align	1
 18611              		.p2align 2,,3
 18612              		.global	cmdlincdec
 18613              		.syntax unified
 18614              		.thumb
 18615              		.thumb_func
 18616              		.fpu fpv4-sp-d16
 18618              	cmdlincdec:
 18619              	.LVL1415:
 18620              	.LFB187:
3190:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
 18621              		.loc 1 3190 49 is_stmt 1 view -0
 18622              		.cfi_startproc
 18623              		@ args = 0, pretend = 0, frame = 0
 18624              		@ frame_needed = 0, uses_anonymous_args = 0
 18625              		@ link register save eliminated.
3191:src/xeq.c     **** }
 18626              		.loc 1 3191 2 view .LVU4829
 18627 0000 A1F14101 		sub	r1, #65
 18628              	.LVL1416:
3191:src/xeq.c     **** }
 18629              		.loc 1 3191 2 is_stmt 0 view .LVU4830
 18630 0004 B1FA81F1 		clz	r1, r1
 18631 0008 4909     		lsrs	r1, r1, #5
 18632 000a FFF7FEBF 		b	incdec
 18633              	.LVL1417:
3191:src/xeq.c     **** }
 18634              		.loc 1 3191 2 view .LVU4831
 18635              		.cfi_endproc
 18636              	.LFE187:
 18638 000e 00BF     		.section	.text.cmdloopz,"ax",%progbits
 18639              		.align	1
 18640              		.p2align 2,,3
 18641              		.global	cmdloopz
 18642              		.syntax unified
 18643              		.thumb
 18644              		.thumb_func
 18645              		.fpu fpv4-sp-d16
 18647              	cmdloopz:
 18648              	.LVL1418:
 18649              	.LFB188:
3194:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 18650              		.loc 1 3194 47 is_stmt 1 view -0
 18651              		.cfi_startproc
 18652              		@ args = 0, pretend = 0, frame = 0
 18653              		@ frame_needed = 0, uses_anonymous_args = 0
3195:src/xeq.c     **** }
 18654              		.loc 1 3195 2 view .LVU4833
3194:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 18655              		.loc 1 3194 47 is_stmt 0 view .LVU4834
 18656 0000 08B5     		push	{r3, lr}
 18657              		.cfi_def_cfa_offset 8
 18658              		.cfi_offset 3, -8
 18659              		.cfi_offset 14, -4
3195:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 503


 18660              		.loc 1 3195 2 view .LVU4835
 18661 0002 A1F13F01 		sub	r1, #63
 18662              	.LVL1419:
3195:src/xeq.c     **** }
 18663              		.loc 1 3195 2 view .LVU4836
 18664 0006 B1FA81F1 		clz	r1, r1
 18665 000a 4909     		lsrs	r1, r1, #5
 18666 000c FFF7FEFF 		bl	incdec
 18667              	.LVL1420:
3196:src/xeq.c     **** 
 18668              		.loc 1 3196 1 view .LVU4837
 18669 0010 BDE80840 		pop	{r3, lr}
 18670              		.cfi_restore 14
 18671              		.cfi_restore 3
 18672              		.cfi_def_cfa_offset 0
3195:src/xeq.c     **** }
 18673              		.loc 1 3195 2 view .LVU4838
 18674 0014 FFF7FEBF 		b	fin_tst
 18675              	.LVL1421:
 18676              		.cfi_endproc
 18677              	.LFE188:
 18679              		.section	.text.cmdloop,"ax",%progbits
 18680              		.align	1
 18681              		.p2align 2,,3
 18682              		.global	cmdloop
 18683              		.syntax unified
 18684              		.thumb
 18685              		.thumb_func
 18686              		.fpu fpv4-sp-d16
 18688              	cmdloop:
 18689              	.LVL1422:
 18690              	.LFB189:
3198:src/xeq.c     **** 	if (is_intmode()) {
 18691              		.loc 1 3198 46 is_stmt 1 view -0
 18692              		.cfi_startproc
 18693              		@ args = 0, pretend = 0, frame = 184
 18694              		@ frame_needed = 0, uses_anonymous_args = 0
3199:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18695              		.loc 1 3199 2 view .LVU4840
3199:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18696              		.loc 1 3199 6 is_stmt 0 view .LVU4841
 18697 0000 7C4B     		ldr	r3, .L1354
3198:src/xeq.c     **** 	if (is_intmode()) {
 18698              		.loc 1 3198 46 view .LVU4842
 18699 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 18700              		.cfi_def_cfa_offset 20
 18701              		.cfi_offset 4, -20
 18702              		.cfi_offset 5, -16
 18703              		.cfi_offset 6, -12
 18704              		.cfi_offset 7, -8
 18705              		.cfi_offset 14, -4
3199:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18706              		.loc 1 3199 6 view .LVU4843
 18707 0004 1B68     		ldr	r3, [r3]
 18708 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3199:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18709              		.loc 1 3199 5 view .LVU4844
ARM GAS  /tmp/cciWh9P3.s 			page 504


 18710 000a DB07     		lsls	r3, r3, #31
3198:src/xeq.c     **** 	if (is_intmode()) {
 18711              		.loc 1 3198 46 view .LVU4845
 18712 000c AFB0     		sub	sp, sp, #188
 18713              		.cfi_def_cfa_offset 208
3198:src/xeq.c     **** 	if (is_intmode()) {
 18714              		.loc 1 3198 46 view .LVU4846
 18715 000e 0C46     		mov	r4, r1
 18716 0010 0546     		mov	r5, r0
3199:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 18717              		.loc 1 3199 5 view .LVU4847
 18718 0012 7BD4     		bmi	.L1346
 18719              	.LBB2916:
3221:src/xeq.c     **** 
 18720              		.loc 1 3221 3 is_stmt 1 view .LVU4848
3223:src/xeq.c     **** 
 18721              		.loc 1 3223 3 view .LVU4849
 18722 0014 2946     		mov	r1, r5
 18723              	.LVL1423:
3223:src/xeq.c     **** 
 18724              		.loc 1 3223 3 is_stmt 0 view .LVU4850
 18725 0016 6846     		mov	r0, sp
 18726              	.LVL1424:
3223:src/xeq.c     **** 
 18727              		.loc 1 3223 3 view .LVU4851
 18728 0018 FFF7FEFF 		bl	getRegister
 18729              	.LVL1425:
3227:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
 18730              		.loc 1 3227 3 is_stmt 1 view .LVU4852
 18731 001c 6946     		mov	r1, sp
 18732 001e 12A8     		add	r0, sp, #72
 18733 0020 FFF7FEFF 		bl	dn_abs
 18734              	.LVL1426:
3228:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
 18735              		.loc 1 3228 3 view .LVU4853
 18736 0024 12A9     		add	r1, sp, #72
 18737 0026 1BA8     		add	r0, sp, #108
 18738 0028 FFF7FEFF 		bl	decNumberTrunc
 18739              	.LVL1427:
3229:src/xeq.c     **** 		if (decNumberIsNegative(&x))
 18740              		.loc 1 3229 3 view .LVU4854
 18741 002c 1BAA     		add	r2, sp, #108
 18742 002e 12A9     		add	r1, sp, #72
 18743 0030 24A8     		add	r0, sp, #144
 18744 0032 FFF7FEFF 		bl	dn_subtract
 18745              	.LVL1428:
3230:src/xeq.c     **** 			dn_minus(&n, &n);
 18746              		.loc 1 3230 3 view .LVU4855
3230:src/xeq.c     **** 			dn_minus(&n, &n);
 18747              		.loc 1 3230 6 is_stmt 0 view .LVU4856
 18748 0036 9DF90830 		ldrsb	r3, [sp, #8]
 18749 003a 002B     		cmp	r3, #0
 18750 003c C0F29080 		blt	.L1347
 18751              	.L1324:
3232:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
 18752              		.loc 1 3232 3 is_stmt 1 view .LVU4857
 18753 0040 0322     		movs	r2, #3
ARM GAS  /tmp/cciWh9P3.s 			page 505


 18754 0042 24A9     		add	r1, sp, #144
 18755 0044 09A8     		add	r0, sp, #36
 18756 0046 FFF7FEFF 		bl	dn_mulpow10
 18757              	.LVL1429:
3233:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
 18758              		.loc 1 3233 3 view .LVU4858
 18759 004a 09A9     		add	r1, sp, #36
 18760 004c 12A8     		add	r0, sp, #72
 18761 004e FFF7FEFF 		bl	decNumberTrunc
 18762              	.LVL1430:
3234:src/xeq.c     **** 		dn_mul100(&x, &i);
 18763              		.loc 1 3234 3 view .LVU4859
 18764 0052 09A9     		add	r1, sp, #36
 18765 0054 12AA     		add	r2, sp, #72
 18766 0056 0846     		mov	r0, r1
 18767 0058 FFF7FEFF 		bl	dn_subtract
 18768              	.LVL1431:
3235:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
 18769              		.loc 1 3235 3 view .LVU4860
 18770 005c 09A9     		add	r1, sp, #36
 18771 005e 6846     		mov	r0, sp
 18772 0060 FFF7FEFF 		bl	dn_mul100
 18773              	.LVL1432:
3236:src/xeq.c     **** 		if (dn_eq0(&i))
 18774              		.loc 1 3236 3 view .LVU4861
 18775 0064 6946     		mov	r1, sp
 18776 0066 09A8     		add	r0, sp, #36
 18777 0068 FFF7FEFF 		bl	decNumberTrunc
 18778              	.LVL1433:
3237:src/xeq.c     **** 			dn_1(&i);
 18779              		.loc 1 3237 3 view .LVU4862
3237:src/xeq.c     **** 			dn_1(&i);
 18780              		.loc 1 3237 7 is_stmt 0 view .LVU4863
 18781 006c 09A8     		add	r0, sp, #36
 18782 006e FFF7FEFF 		bl	dn_eq0
 18783              	.LVL1434:
3237:src/xeq.c     **** 			dn_1(&i);
 18784              		.loc 1 3237 6 view .LVU4864
 18785 0072 98BB     		cbnz	r0, .L1348
3240:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18786              		.loc 1 3240 3 is_stmt 1 view .LVU4865
3241:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18787              		.loc 1 3241 4 is_stmt 0 view .LVU4866
 18788 0074 1BA9     		add	r1, sp, #108
3240:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18789              		.loc 1 3240 6 view .LVU4867
 18790 0076 3B2C     		cmp	r4, #59
3241:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18791              		.loc 1 3241 4 view .LVU4868
 18792 0078 09AA     		add	r2, sp, #36
 18793 007a 0846     		mov	r0, r1
3240:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18794              		.loc 1 3240 6 view .LVU4869
 18795 007c 36D0     		beq	.L1326
 18796              	.L1351:
3240:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18797              		.loc 1 3240 22 discriminator 1 view .LVU4870
ARM GAS  /tmp/cciWh9P3.s 			page 506


 18798 007e 3D2C     		cmp	r4, #61
 18799 0080 1DD1     		bne	.L1327
3241:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18800              		.loc 1 3241 4 is_stmt 1 view .LVU4871
 18801 0082 FFF7FEFF 		bl	dn_add
 18802              	.LVL1435:
3242:src/xeq.c     **** 			if (op == RARG_ISE)
 18803              		.loc 1 3242 4 view .LVU4872
 18804 0086 1BAA     		add	r2, sp, #108
 18805 0088 12A9     		add	r1, sp, #72
 18806 008a 6846     		mov	r0, sp
 18807 008c FFF7FEFF 		bl	dn_compare
 18808              	.LVL1436:
3243:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 18809              		.loc 1 3243 4 view .LVU4873
3244:src/xeq.c     **** 			else
 18810              		.loc 1 3244 5 view .LVU4874
3244:src/xeq.c     **** 			else
 18811              		.loc 1 3244 13 is_stmt 0 view .LVU4875
 18812 0090 6846     		mov	r0, sp
 18813 0092 FFF7FEFF 		bl	dn_le0
 18814              	.LVL1437:
3244:src/xeq.c     **** 			else
 18815              		.loc 1 3244 5 view .LVU4876
 18816 0096 B0FA80F0 		clz	r0, r0
 18817 009a 4009     		lsrs	r0, r0, #5
 18818 009c FFF7FEFF 		bl	fin_tst
 18819              	.LVL1438:
 18820              	.L1328:
3257:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 18821              		.loc 1 3257 3 is_stmt 1 view .LVU4877
3257:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 18822              		.loc 1 3257 6 is_stmt 0 view .LVU4878
 18823 00a0 9DF97430 		ldrsb	r3, [sp, #116]
 18824 00a4 002B     		cmp	r3, #0
3258:src/xeq.c     **** 		} else
 18825              		.loc 1 3258 4 view .LVU4879
 18826 00a6 24AA     		add	r2, sp, #144
 18827 00a8 1BA9     		add	r1, sp, #108
 18828 00aa 6846     		mov	r0, sp
3257:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 18829              		.loc 1 3257 6 view .LVU4880
 18830 00ac 55DB     		blt	.L1349
3260:src/xeq.c     **** 		setRegister(arg, &x);
 18831              		.loc 1 3260 4 is_stmt 1 view .LVU4881
 18832 00ae FFF7FEFF 		bl	dn_add
 18833              	.LVL1439:
 18834              	.L1331:
3261:src/xeq.c     **** 	}
 18835              		.loc 1 3261 3 discriminator 2 view .LVU4882
 18836 00b2 6946     		mov	r1, sp
 18837 00b4 2846     		mov	r0, r5
 18838 00b6 FFF7FEFF 		bl	setRegister
 18839              	.LVL1440:
 18840              	.L1314:
3261:src/xeq.c     **** 	}
 18841              		.loc 1 3261 3 is_stmt 0 discriminator 2 view .LVU4883
ARM GAS  /tmp/cciWh9P3.s 			page 507


 18842              	.LBE2916:
3263:src/xeq.c     **** 
 18843              		.loc 1 3263 1 view .LVU4884
 18844 00ba 2FB0     		add	sp, sp, #188
 18845              		.cfi_remember_state
 18846              		.cfi_def_cfa_offset 20
 18847              		@ sp needed
 18848 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 18849              	.LVL1441:
 18850              	.L1327:
 18851              		.cfi_restore_state
 18852              	.LBB2917:
3248:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18853              		.loc 1 3248 4 is_stmt 1 view .LVU4885
 18854 00be FFF7FEFF 		bl	dn_subtract
 18855              	.LVL1442:
3249:src/xeq.c     **** 			if (op == RARG_DSL)
 18856              		.loc 1 3249 4 view .LVU4886
 18857 00c2 1BAA     		add	r2, sp, #108
 18858 00c4 12A9     		add	r1, sp, #72
 18859 00c6 6846     		mov	r0, sp
 18860 00c8 FFF7FEFF 		bl	dn_compare
 18861              	.LVL1443:
3250:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 18862              		.loc 1 3250 4 view .LVU4887
3250:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 18863              		.loc 1 3250 7 is_stmt 0 view .LVU4888
 18864 00cc 3C2C     		cmp	r4, #60
3251:src/xeq.c     **** 			else
 18865              		.loc 1 3251 5 view .LVU4889
 18866 00ce 6846     		mov	r0, sp
3250:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 18867              		.loc 1 3250 7 view .LVU4890
 18868 00d0 6AD0     		beq	.L1350
3253:src/xeq.c     **** 		}
 18869              		.loc 1 3253 5 is_stmt 1 view .LVU4891
 18870 00d2 FFF7FEFF 		bl	dn_lt0
 18871              	.LVL1444:
 18872 00d6 FFF7FEFF 		bl	fin_tst
 18873              	.LVL1445:
 18874 00da E1E7     		b	.L1328
 18875              	.L1348:
3238:src/xeq.c     **** 
 18876              		.loc 1 3238 4 view .LVU4892
 18877 00dc 09A8     		add	r0, sp, #36
 18878 00de FFF7FEFF 		bl	dn_1
 18879              	.LVL1446:
3240:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18880              		.loc 1 3240 3 view .LVU4893
3241:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18881              		.loc 1 3241 4 is_stmt 0 view .LVU4894
 18882 00e2 1BA9     		add	r1, sp, #108
3240:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18883              		.loc 1 3240 6 view .LVU4895
 18884 00e4 3B2C     		cmp	r4, #59
3241:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18885              		.loc 1 3241 4 view .LVU4896
ARM GAS  /tmp/cciWh9P3.s 			page 508


 18886 00e6 09AA     		add	r2, sp, #36
 18887 00e8 0846     		mov	r0, r1
3240:src/xeq.c     **** 			dn_add(&n, &n, &i);
 18888              		.loc 1 3240 6 view .LVU4897
 18889 00ea C8D1     		bne	.L1351
 18890              	.L1326:
3241:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 18891              		.loc 1 3241 4 is_stmt 1 view .LVU4898
 18892 00ec FFF7FEFF 		bl	dn_add
 18893              	.LVL1447:
3242:src/xeq.c     **** 			if (op == RARG_ISE)
 18894              		.loc 1 3242 4 view .LVU4899
 18895 00f0 1BAA     		add	r2, sp, #108
 18896 00f2 12A9     		add	r1, sp, #72
 18897 00f4 6846     		mov	r0, sp
 18898 00f6 FFF7FEFF 		bl	dn_compare
 18899              	.LVL1448:
3243:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 18900              		.loc 1 3243 4 view .LVU4900
3246:src/xeq.c     **** 		} else {
 18901              		.loc 1 3246 5 view .LVU4901
3246:src/xeq.c     **** 		} else {
 18902              		.loc 1 3246 13 is_stmt 0 view .LVU4902
 18903 00fa 6846     		mov	r0, sp
 18904 00fc FFF7FEFF 		bl	dn_lt0
 18905              	.LVL1449:
3246:src/xeq.c     **** 		} else {
 18906              		.loc 1 3246 5 view .LVU4903
 18907 0100 B0FA80F0 		clz	r0, r0
 18908 0104 4009     		lsrs	r0, r0, #5
 18909 0106 FFF7FEFF 		bl	fin_tst
 18910              	.LVL1450:
 18911 010a C9E7     		b	.L1328
 18912              	.LVL1451:
 18913              	.L1346:
3246:src/xeq.c     **** 		} else {
 18914              		.loc 1 3246 5 view .LVU4904
 18915              	.LBE2917:
 18916              	.LBB2918:
3200:src/xeq.c     **** 		int xs;
 18917              		.loc 1 3200 3 is_stmt 1 view .LVU4905
3200:src/xeq.c     **** 		int xs;
 18918              		.loc 1 3200 21 is_stmt 0 view .LVU4906
 18919 010c FFF7FEFF 		bl	get_reg_n_int
 18920              	.LVL1452:
3201:src/xeq.c     **** 		unsigned long long int xv;
 18921              		.loc 1 3201 3 is_stmt 1 view .LVU4907
3202:src/xeq.c     **** 
 18922              		.loc 1 3202 3 view .LVU4908
3204:src/xeq.c     **** 			x = intAdd(x, 1LL);
 18923              		.loc 1 3204 3 view .LVU4909
3204:src/xeq.c     **** 			x = intAdd(x, 1LL);
 18924              		.loc 1 3204 6 is_stmt 0 view .LVU4910
 18925 0110 3B2C     		cmp	r4, #59
3205:src/xeq.c     **** 		else
 18926              		.loc 1 3205 8 view .LVU4911
 18927 0112 4FF00102 		mov	r2, #1
ARM GAS  /tmp/cciWh9P3.s 			page 509


 18928 0116 4FF00003 		mov	r3, #0
3204:src/xeq.c     **** 			x = intAdd(x, 1LL);
 18929              		.loc 1 3204 6 view .LVU4912
 18930 011a 4AD0     		beq	.L1316
3204:src/xeq.c     **** 			x = intAdd(x, 1LL);
 18931              		.loc 1 3204 22 discriminator 1 view .LVU4913
 18932 011c 3D2C     		cmp	r4, #61
 18933 011e 24D1     		bne	.L1352
3205:src/xeq.c     **** 		else
 18934              		.loc 1 3205 4 is_stmt 1 view .LVU4914
3205:src/xeq.c     **** 		else
 18935              		.loc 1 3205 8 is_stmt 0 view .LVU4915
 18936 0120 FFF7FEFF 		bl	intAdd
 18937              	.LVL1453:
3205:src/xeq.c     **** 		else
 18938              		.loc 1 3205 8 view .LVU4916
 18939 0124 0646     		mov	r6, r0
 18940              	.LBB2919:
 18941              	.LBB2920:
1236:src/xeq.c     **** }
 18942              		.loc 1 1236 8 view .LVU4917
 18943 0126 2846     		mov	r0, r5
 18944              	.LBE2920:
 18945              	.LBE2919:
3205:src/xeq.c     **** 		else
 18946              		.loc 1 3205 8 view .LVU4918
 18947 0128 0C46     		mov	r4, r1
 18948              	.LVL1454:
3208:src/xeq.c     **** 
 18949              		.loc 1 3208 3 is_stmt 1 view .LVU4919
3208:src/xeq.c     **** 
 18950              		.loc 1 3208 3 is_stmt 0 view .LVU4920
 18951 012a CDE92461 		strd	r6, r1, [sp, #144]
 18952              	.LVL1455:
 18953              	.LBB2926:
 18954              	.LBI2919:
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 18955              		.loc 1 1235 6 is_stmt 1 view .LVU4921
 18956              	.LBB2921:
1236:src/xeq.c     **** }
 18957              		.loc 1 1236 2 view .LVU4922
1236:src/xeq.c     **** }
 18958              		.loc 1 1236 8 is_stmt 0 view .LVU4923
 18959 012e FFF7FEFF 		bl	get_reg_n
 18960              	.LVL1456:
1236:src/xeq.c     **** }
 18961              		.loc 1 1236 2 view .LVU4924
 18962 0132 24A9     		add	r1, sp, #144
 18963 0134 0822     		movs	r2, #8
 18964 0136 FFF7FEFF 		bl	xcopy
 18965              	.LVL1457:
1236:src/xeq.c     **** }
 18966              		.loc 1 1236 2 view .LVU4925
 18967              	.LBE2921:
 18968              	.LBE2926:
3210:src/xeq.c     **** 		if (op == RARG_ISG)
 18969              		.loc 1 3210 3 is_stmt 1 view .LVU4926
ARM GAS  /tmp/cciWh9P3.s 			page 510


3210:src/xeq.c     **** 		if (op == RARG_ISG)
 18970              		.loc 1 3210 8 is_stmt 0 view .LVU4927
 18971 013a 24AA     		add	r2, sp, #144
 18972 013c 3046     		mov	r0, r6
 18973 013e 2146     		mov	r1, r4
 18974 0140 FFF7FEFF 		bl	extract_value
 18975              	.LVL1458:
3216:src/xeq.c     **** 		else // if (op == RARG_DSL)
 18976              		.loc 1 3216 18 view .LVU4928
 18977 0144 249B     		ldr	r3, [sp, #144]
 18978              	.LVL1459:
3211:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 18979              		.loc 1 3211 3 is_stmt 1 view .LVU4929
3213:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 18980              		.loc 1 3213 8 view .LVU4930
3215:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
 18981              		.loc 1 3215 8 view .LVU4931
3216:src/xeq.c     **** 		else // if (op == RARG_DSL)
 18982              		.loc 1 3216 4 view .LVU4932
 18983 0146 23B1     		cbz	r3, .L1335
3216:src/xeq.c     **** 		else // if (op == RARG_DSL)
 18984              		.loc 1 3216 4 is_stmt 0 discriminator 1 view .LVU4933
 18985 0148 50EA0103 		orrs	r3, r0, r1
 18986 014c 14BF     		ite	ne
 18987 014e 0123     		movne	r3, #1
 18988 0150 0023     		moveq	r3, #0
 18989              	.L1335:
3216:src/xeq.c     **** 		else // if (op == RARG_DSL)
 18990              		.loc 1 3216 4 discriminator 6 view .LVU4934
 18991 0152 1846     		mov	r0, r3
 18992              	.LVL1460:
3216:src/xeq.c     **** 		else // if (op == RARG_DSL)
 18993              		.loc 1 3216 4 discriminator 6 view .LVU4935
 18994 0154 FFF7FEFF 		bl	fin_tst
 18995              	.LVL1461:
 18996 0158 AFE7     		b	.L1314
 18997              	.L1349:
3216:src/xeq.c     **** 		else // if (op == RARG_DSL)
 18998              		.loc 1 3216 4 discriminator 6 view .LVU4936
 18999              	.LBE2918:
 19000              	.LBB2931:
3258:src/xeq.c     **** 		} else
 19001              		.loc 1 3258 4 is_stmt 1 view .LVU4937
 19002 015a FFF7FEFF 		bl	dn_subtract
 19003              	.LVL1462:
 19004 015e A8E7     		b	.L1331
 19005              	.L1347:
3231:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 19006              		.loc 1 3231 4 view .LVU4938
 19007 0160 1BA9     		add	r1, sp, #108
 19008 0162 0846     		mov	r0, r1
 19009 0164 FFF7FEFF 		bl	dn_minus
 19010              	.LVL1463:
 19011 0168 6AE7     		b	.L1324
 19012              	.LVL1464:
 19013              	.L1352:
3231:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
ARM GAS  /tmp/cciWh9P3.s 			page 511


 19014              		.loc 1 3231 4 is_stmt 0 view .LVU4939
 19015              	.LBE2931:
 19016              	.LBB2932:
3207:src/xeq.c     **** 		set_reg_n_int(arg, x);
 19017              		.loc 1 3207 4 is_stmt 1 view .LVU4940
3207:src/xeq.c     **** 		set_reg_n_int(arg, x);
 19018              		.loc 1 3207 8 is_stmt 0 view .LVU4941
 19019 016a FFF7FEFF 		bl	intSubtract
 19020              	.LVL1465:
3207:src/xeq.c     **** 		set_reg_n_int(arg, x);
 19021              		.loc 1 3207 8 view .LVU4942
 19022 016e 0746     		mov	r7, r0
 19023              	.LBB2927:
 19024              	.LBB2922:
1236:src/xeq.c     **** }
 19025              		.loc 1 1236 8 view .LVU4943
 19026 0170 2846     		mov	r0, r5
 19027              	.LBE2922:
 19028              	.LBE2927:
3207:src/xeq.c     **** 		set_reg_n_int(arg, x);
 19029              		.loc 1 3207 8 view .LVU4944
 19030 0172 0E46     		mov	r6, r1
 19031              	.LVL1466:
3208:src/xeq.c     **** 
 19032              		.loc 1 3208 3 is_stmt 1 view .LVU4945
3208:src/xeq.c     **** 
 19033              		.loc 1 3208 3 is_stmt 0 view .LVU4946
 19034 0174 CDE92471 		strd	r7, r1, [sp, #144]
 19035              	.LVL1467:
 19036              	.LBB2928:
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19037              		.loc 1 1235 6 is_stmt 1 view .LVU4947
 19038              	.LBB2923:
1236:src/xeq.c     **** }
 19039              		.loc 1 1236 2 view .LVU4948
1236:src/xeq.c     **** }
 19040              		.loc 1 1236 8 is_stmt 0 view .LVU4949
 19041 0178 FFF7FEFF 		bl	get_reg_n
 19042              	.LVL1468:
1236:src/xeq.c     **** }
 19043              		.loc 1 1236 2 view .LVU4950
 19044 017c 24A9     		add	r1, sp, #144
 19045 017e 0822     		movs	r2, #8
 19046 0180 FFF7FEFF 		bl	xcopy
 19047              	.LVL1469:
1236:src/xeq.c     **** }
 19048              		.loc 1 1236 2 view .LVU4951
 19049              	.LBE2923:
 19050              	.LBE2928:
3210:src/xeq.c     **** 		if (op == RARG_ISG)
 19051              		.loc 1 3210 3 is_stmt 1 view .LVU4952
3210:src/xeq.c     **** 		if (op == RARG_ISG)
 19052              		.loc 1 3210 8 is_stmt 0 view .LVU4953
 19053 0184 24AA     		add	r2, sp, #144
 19054 0186 3846     		mov	r0, r7
 19055 0188 3146     		mov	r1, r6
 19056 018a FFF7FEFF 		bl	extract_value
ARM GAS  /tmp/cciWh9P3.s 			page 512


 19057              	.LVL1470:
3211:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 19058              		.loc 1 3211 3 is_stmt 1 view .LVU4954
3213:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 19059              		.loc 1 3213 8 view .LVU4955
3213:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 19060              		.loc 1 3213 11 is_stmt 0 view .LVU4956
 19061 018e 3A2C     		cmp	r4, #58
3214:src/xeq.c     **** 		else if (op == RARG_ISE)
 19062              		.loc 1 3214 4 view .LVU4957
 19063 0190 249B     		ldr	r3, [sp, #144]
3213:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 19064              		.loc 1 3213 11 view .LVU4958
 19065 0192 25D0     		beq	.L1353
3218:src/xeq.c     **** 		return;
 19066              		.loc 1 3218 4 is_stmt 1 view .LVU4959
 19067 0194 13B3     		cbz	r3, .L1337
 19068              	.LVL1471:
 19069              	.L1345:
3218:src/xeq.c     **** 		return;
 19070              		.loc 1 3218 4 is_stmt 0 discriminator 2 view .LVU4960
 19071 0196 50EA0103 		orrs	r3, r0, r1
 19072 019a 0CBF     		ite	eq
 19073 019c 0120     		moveq	r0, #1
 19074 019e 0020     		movne	r0, #0
 19075              	.L1322:
3218:src/xeq.c     **** 		return;
 19076              		.loc 1 3218 4 discriminator 6 view .LVU4961
 19077 01a0 FFF7FEFF 		bl	fin_tst
 19078              	.LVL1472:
3219:src/xeq.c     **** 	} else {
 19079              		.loc 1 3219 3 is_stmt 1 discriminator 6 view .LVU4962
 19080              	.LBE2932:
3263:src/xeq.c     **** 
 19081              		.loc 1 3263 1 is_stmt 0 discriminator 6 view .LVU4963
 19082 01a4 2FB0     		add	sp, sp, #188
 19083              		.cfi_remember_state
 19084              		.cfi_def_cfa_offset 20
 19085              		@ sp needed
 19086 01a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 19087              	.LVL1473:
 19088              	.L1350:
 19089              		.cfi_restore_state
 19090              	.LBB2933:
3251:src/xeq.c     **** 			else
 19091              		.loc 1 3251 5 is_stmt 1 view .LVU4964
 19092 01a8 FFF7FEFF 		bl	dn_le0
 19093              	.LVL1474:
 19094 01ac FFF7FEFF 		bl	fin_tst
 19095              	.LVL1475:
 19096 01b0 76E7     		b	.L1328
 19097              	.LVL1476:
 19098              	.L1316:
3251:src/xeq.c     **** 			else
 19099              		.loc 1 3251 5 is_stmt 0 view .LVU4965
 19100              	.LBE2933:
 19101              	.LBB2934:
ARM GAS  /tmp/cciWh9P3.s 			page 513


3205:src/xeq.c     **** 		else
 19102              		.loc 1 3205 4 is_stmt 1 view .LVU4966
3205:src/xeq.c     **** 		else
 19103              		.loc 1 3205 8 is_stmt 0 view .LVU4967
 19104 01b2 FFF7FEFF 		bl	intAdd
 19105              	.LVL1477:
3205:src/xeq.c     **** 		else
 19106              		.loc 1 3205 8 view .LVU4968
 19107 01b6 0646     		mov	r6, r0
 19108              	.LBB2929:
 19109              	.LBB2924:
1236:src/xeq.c     **** }
 19110              		.loc 1 1236 8 view .LVU4969
 19111 01b8 2846     		mov	r0, r5
 19112              	.LBE2924:
 19113              	.LBE2929:
3205:src/xeq.c     **** 		else
 19114              		.loc 1 3205 8 view .LVU4970
 19115 01ba 0C46     		mov	r4, r1
 19116              	.LVL1478:
3208:src/xeq.c     **** 
 19117              		.loc 1 3208 3 is_stmt 1 view .LVU4971
3208:src/xeq.c     **** 
 19118              		.loc 1 3208 3 is_stmt 0 view .LVU4972
 19119 01bc CDE92461 		strd	r6, r1, [sp, #144]
 19120              	.LVL1479:
 19121              	.LBB2930:
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19122              		.loc 1 1235 6 is_stmt 1 view .LVU4973
 19123              	.LBB2925:
1236:src/xeq.c     **** }
 19124              		.loc 1 1236 2 view .LVU4974
1236:src/xeq.c     **** }
 19125              		.loc 1 1236 8 is_stmt 0 view .LVU4975
 19126 01c0 FFF7FEFF 		bl	get_reg_n
 19127              	.LVL1480:
1236:src/xeq.c     **** }
 19128              		.loc 1 1236 2 view .LVU4976
 19129 01c4 24A9     		add	r1, sp, #144
 19130 01c6 0822     		movs	r2, #8
 19131 01c8 FFF7FEFF 		bl	xcopy
 19132              	.LVL1481:
1236:src/xeq.c     **** }
 19133              		.loc 1 1236 2 view .LVU4977
 19134              	.LBE2925:
 19135              	.LBE2930:
3210:src/xeq.c     **** 		if (op == RARG_ISG)
 19136              		.loc 1 3210 3 is_stmt 1 view .LVU4978
3210:src/xeq.c     **** 		if (op == RARG_ISG)
 19137              		.loc 1 3210 8 is_stmt 0 view .LVU4979
 19138 01cc 24AA     		add	r2, sp, #144
 19139 01ce 3046     		mov	r0, r6
 19140 01d0 2146     		mov	r1, r4
 19141 01d2 FFF7FEFF 		bl	extract_value
 19142              	.LVL1482:
3212:src/xeq.c     **** 		else if (op == RARG_DSE)
 19143              		.loc 1 3212 4 view .LVU4980
ARM GAS  /tmp/cciWh9P3.s 			page 514


 19144 01d6 249B     		ldr	r3, [sp, #144]
 19145              	.LVL1483:
3211:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 19146              		.loc 1 3211 3 is_stmt 1 view .LVU4981
3212:src/xeq.c     **** 		else if (op == RARG_DSE)
 19147              		.loc 1 3212 4 view .LVU4982
 19148 01d8 002B     		cmp	r3, #0
 19149 01da DCD0     		beq	.L1345
 19150              	.LVL1484:
 19151              	.L1337:
3218:src/xeq.c     **** 		return;
 19152              		.loc 1 3218 4 is_stmt 0 view .LVU4983
 19153 01dc 0120     		movs	r0, #1
 19154 01de DFE7     		b	.L1322
 19155              	.LVL1485:
 19156              	.L1353:
3214:src/xeq.c     **** 		else if (op == RARG_ISE)
 19157              		.loc 1 3214 4 is_stmt 1 view .LVU4984
 19158 01e0 2BB9     		cbnz	r3, .L1336
3214:src/xeq.c     **** 		else if (op == RARG_ISE)
 19159              		.loc 1 3214 4 is_stmt 0 discriminator 1 view .LVU4985
 19160 01e2 50EA0103 		orrs	r3, r0, r1
 19161 01e6 14BF     		ite	ne
 19162 01e8 0120     		movne	r0, #1
 19163              	.LVL1486:
3214:src/xeq.c     **** 		else if (op == RARG_ISE)
 19164              		.loc 1 3214 4 discriminator 1 view .LVU4986
 19165 01ea 0020     		moveq	r0, #0
 19166 01ec D8E7     		b	.L1322
 19167              	.LVL1487:
 19168              	.L1336:
3214:src/xeq.c     **** 		else if (op == RARG_ISE)
 19169              		.loc 1 3214 4 view .LVU4987
 19170 01ee 0020     		movs	r0, #0
 19171              	.LVL1488:
3214:src/xeq.c     **** 		else if (op == RARG_ISE)
 19172              		.loc 1 3214 4 view .LVU4988
 19173 01f0 D6E7     		b	.L1322
 19174              	.L1355:
 19175 01f2 00BF     		.align	2
 19176              	.L1354:
 19177 01f4 00000000 		.word	main_ram
 19178              	.LBE2934:
 19179              		.cfi_endproc
 19180              	.LFE189:
 19182              		.section	.text.op_shift_digit,"ax",%progbits
 19183              		.align	1
 19184              		.p2align 2,,3
 19185              		.global	op_shift_digit
 19186              		.syntax unified
 19187              		.thumb
 19188              		.thumb_func
 19189              		.fpu fpv4-sp-d16
 19191              	op_shift_digit:
 19192              	.LVL1489:
 19193              	.LFB190:
3268:src/xeq.c     **** 	decNumber x;
ARM GAS  /tmp/cciWh9P3.s 			page 515


 19194              		.loc 1 3268 51 is_stmt 1 view -0
 19195              		.cfi_startproc
 19196              		@ args = 0, pretend = 0, frame = 40
 19197              		@ frame_needed = 0, uses_anonymous_args = 0
3269:src/xeq.c     **** 	int adjust = n;
 19198              		.loc 1 3269 2 view .LVU4990
3270:src/xeq.c     **** 
 19199              		.loc 1 3270 2 view .LVU4991
3272:src/xeq.c     **** 		bad_mode_error();
 19200              		.loc 1 3272 6 is_stmt 0 view .LVU4992
 19201 0000 174B     		ldr	r3, .L1365
 19202 0002 1B68     		ldr	r3, [r3]
 19203 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 19204              	.LVL1490:
3272:src/xeq.c     **** 		bad_mode_error();
 19205              		.loc 1 3272 2 is_stmt 1 view .LVU4993
3272:src/xeq.c     **** 		bad_mode_error();
 19206              		.loc 1 3272 5 is_stmt 0 view .LVU4994
 19207 0008 DB07     		lsls	r3, r3, #31
 19208 000a 06D5     		bpl	.L1357
3273:src/xeq.c     **** 		return;
 19209              		.loc 1 3273 3 is_stmt 1 view .LVU4995
 19210              	.LBB2946:
 19211              	.LBI2946:
 565:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 19212              		.loc 1 565 6 view .LVU4996
 19213              	.LBE2946:
 566:src/xeq.c     **** }
 19214              		.loc 1 566 2 view .LVU4997
 19215              	.LVL1491:
 19216              	.LBB2951:
 19217              	.LBB2947:
 19218              	.LBI2947:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19219              		.loc 1 536 5 view .LVU4998
 19220              	.LBB2948:
 537:src/xeq.c     **** 		Error = e;
 19221              		.loc 1 537 2 view .LVU4999
 537:src/xeq.c     **** 		Error = e;
 19222              		.loc 1 537 12 is_stmt 0 view .LVU5000
 19223 000c 154B     		ldr	r3, .L1365+4
 537:src/xeq.c     **** 		Error = e;
 19224              		.loc 1 537 5 view .LVU5001
 19225 000e 1A68     		ldr	r2, [r3]
 19226 0010 12B9     		cbnz	r2, .L1363
 19227              	.LVL1492:
 19228              	.LBB2949:
 19229              	.LBI2949:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19230              		.loc 1 536 5 is_stmt 1 view .LVU5002
 19231              	.LBB2950:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 19232              		.loc 1 538 3 view .LVU5003
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 19233              		.loc 1 538 9 is_stmt 0 view .LVU5004
 19234 0012 0D22     		movs	r2, #13
 19235 0014 1A60     		str	r2, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 516


 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 19236              		.loc 1 539 3 is_stmt 1 view .LVU5005
 19237 0016 7047     		bx	lr
 19238              	.LVL1493:
 19239              	.L1363:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 19240              		.loc 1 539 3 is_stmt 0 view .LVU5006
 19241 0018 7047     		bx	lr
 19242              	.LVL1494:
 19243              	.L1357:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 19244              		.loc 1 539 3 view .LVU5007
 19245              	.LBE2950:
 19246              	.LBE2949:
 19247              	.LBE2948:
 19248              	.LBE2947:
 19249              	.LBE2951:
3276:src/xeq.c     **** 	setlastX();
 19250              		.loc 1 3276 2 is_stmt 1 view .LVU5008
3268:src/xeq.c     **** 	decNumber x;
 19251              		.loc 1 3268 51 is_stmt 0 view .LVU5009
 19252 001a 30B5     		push	{r4, r5, lr}
 19253              		.cfi_def_cfa_offset 12
 19254              		.cfi_offset 4, -12
 19255              		.cfi_offset 5, -8
 19256              		.cfi_offset 14, -4
 19257 001c 8BB0     		sub	sp, sp, #44
 19258              		.cfi_def_cfa_offset 56
 19259              	.LVL1495:
 19260              	.LBB2952:
 19261              	.LBI2952:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19262              		.loc 1 804 12 is_stmt 1 view .LVU5010
 19263              	.LBB2953:
 805:src/xeq.c     **** }
 19264              		.loc 1 805 2 view .LVU5011
 19265 001e 0446     		mov	r4, r0
 19266 0020 0D46     		mov	r5, r1
 805:src/xeq.c     **** }
 19267              		.loc 1 805 9 is_stmt 0 view .LVU5012
 19268 0022 01A8     		add	r0, sp, #4
 19269              	.LVL1496:
 805:src/xeq.c     **** }
 19270              		.loc 1 805 9 view .LVU5013
 19271 0024 6421     		movs	r1, #100
 19272              	.LVL1497:
 805:src/xeq.c     **** }
 19273              		.loc 1 805 9 view .LVU5014
 19274 0026 FFF7FEFF 		bl	getRegister
 19275              	.LVL1498:
 805:src/xeq.c     **** }
 19276              		.loc 1 805 9 view .LVU5015
 19277              	.LBE2953:
 19278              	.LBE2952:
3277:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
 19279              		.loc 1 3277 2 is_stmt 1 view .LVU5016
 19280              	.LBB2954:
ARM GAS  /tmp/cciWh9P3.s 			page 517


 19281              	.LBI2954:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 19282              		.loc 1 772 6 view .LVU5017
 19283              	.LBB2955:
 773:src/xeq.c     **** }
 19284              		.loc 1 773 2 view .LVU5018
 19285 002a 6421     		movs	r1, #100
 19286 002c 6C20     		movs	r0, #108
 19287 002e FFF7FEFF 		bl	copyreg_n
 19288              	.LVL1499:
 19289              	.LBE2955:
 19290              	.LBE2954:
3278:src/xeq.c     **** 		return;
 19291              		.loc 1 3278 2 view .LVU5019
3278:src/xeq.c     **** 		return;
 19292              		.loc 1 3278 5 is_stmt 0 view .LVU5020
 19293 0032 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 19294 0036 13F0700F 		tst	r3, #112
 19295 003a 0ED1     		bne	.L1356
3278:src/xeq.c     **** 		return;
 19296              		.loc 1 3278 32 discriminator 1 view .LVU5021
 19297 003c 01A8     		add	r0, sp, #4
 19298 003e FFF7FEFF 		bl	dn_eq0
 19299              	.LVL1500:
3278:src/xeq.c     **** 		return;
 19300              		.loc 1 3278 29 discriminator 1 view .LVU5022
 19301 0042 50B9     		cbnz	r0, .L1356
3280:src/xeq.c     **** 		adjust = -adjust;
 19302              		.loc 1 3280 5 view .LVU5023
 19303 0044 722D     		cmp	r5, #114
3270:src/xeq.c     **** 
 19304              		.loc 1 3270 6 view .LVU5024
 19305 0046 2046     		mov	r0, r4
3280:src/xeq.c     **** 		adjust = -adjust;
 19306              		.loc 1 3280 2 is_stmt 1 view .LVU5025
3281:src/xeq.c     **** 	x.exponent += adjust;
 19307              		.loc 1 3281 3 view .LVU5026
3281:src/xeq.c     **** 	x.exponent += adjust;
 19308              		.loc 1 3281 10 is_stmt 0 view .LVU5027
 19309 0048 08BF     		it	eq
 19310 004a 6042     		rsbeq	r0, r4, #0
 19311              	.LVL1501:
3282:src/xeq.c     **** 	setX(&x);
 19312              		.loc 1 3282 2 is_stmt 1 view .LVU5028
3282:src/xeq.c     **** 	setX(&x);
 19313              		.loc 1 3282 13 is_stmt 0 view .LVU5029
 19314 004c 029C     		ldr	r4, [sp, #8]
 19315              	.LVL1502:
 19316              	.LBB2956:
 19317              	.LBB2957:
 809:src/xeq.c     **** }
 19318              		.loc 1 809 2 view .LVU5030
 19319 004e 01A9     		add	r1, sp, #4
 19320              	.LBE2957:
 19321              	.LBE2956:
3282:src/xeq.c     **** 	setX(&x);
 19322              		.loc 1 3282 13 view .LVU5031
ARM GAS  /tmp/cciWh9P3.s 			page 518


 19323 0050 0444     		add	r4, r4, r0
 19324              	.LBB2960:
 19325              	.LBB2958:
 809:src/xeq.c     **** }
 19326              		.loc 1 809 2 view .LVU5032
 19327 0052 6420     		movs	r0, #100
 19328              	.LVL1503:
 809:src/xeq.c     **** }
 19329              		.loc 1 809 2 view .LVU5033
 19330              	.LBE2958:
 19331              	.LBE2960:
3282:src/xeq.c     **** 	setX(&x);
 19332              		.loc 1 3282 13 view .LVU5034
 19333 0054 0294     		str	r4, [sp, #8]
3283:src/xeq.c     **** }
 19334              		.loc 1 3283 2 is_stmt 1 view .LVU5035
 19335              	.LVL1504:
 19336              	.LBB2961:
 19337              	.LBI2956:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 19338              		.loc 1 808 6 view .LVU5036
 19339              	.LBB2959:
 809:src/xeq.c     **** }
 19340              		.loc 1 809 2 view .LVU5037
 19341 0056 FFF7FEFF 		bl	setRegister
 19342              	.LVL1505:
 19343              	.L1356:
 809:src/xeq.c     **** }
 19344              		.loc 1 809 2 is_stmt 0 view .LVU5038
 19345              	.LBE2959:
 19346              	.LBE2961:
3284:src/xeq.c     **** 
 19347              		.loc 1 3284 1 view .LVU5039
 19348 005a 0BB0     		add	sp, sp, #44
 19349              		.cfi_def_cfa_offset 12
 19350              		@ sp needed
 19351 005c 30BD     		pop	{r4, r5, pc}
 19352              	.L1366:
 19353 005e 00BF     		.align	2
 19354              	.L1365:
 19355 0060 00000000 		.word	main_ram
 19356 0064 00000000 		.word	Error
 19357              		.cfi_endproc
 19358              	.LFE190:
 19360              		.section	.text.get_user_flag,"ax",%progbits
 19361              		.align	1
 19362              		.p2align 2,,3
 19363              		.global	get_user_flag
 19364              		.syntax unified
 19365              		.thumb
 19366              		.thumb_func
 19367              		.fpu fpv4-sp-d16
 19369              	get_user_flag:
 19370              	.LVL1506:
 19371              	.LFB192:
3317:src/xeq.c     **** 	unsigned short mask;
 19372              		.loc 1 3317 26 is_stmt 1 view -0
ARM GAS  /tmp/cciWh9P3.s 			page 519


 19373              		.cfi_startproc
 19374              		@ args = 0, pretend = 0, frame = 8
 19375              		@ frame_needed = 0, uses_anonymous_args = 0
3318:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 19376              		.loc 1 3318 2 view .LVU5041
3319:src/xeq.c     **** 
 19377              		.loc 1 3319 2 view .LVU5042
3317:src/xeq.c     **** 	unsigned short mask;
 19378              		.loc 1 3317 26 is_stmt 0 view .LVU5043
 19379 0000 00B5     		push	{lr}
 19380              		.cfi_def_cfa_offset 4
 19381              		.cfi_offset 14, -4
 19382 0002 83B0     		sub	sp, sp, #12
 19383              		.cfi_def_cfa_offset 16
3319:src/xeq.c     **** 
 19384              		.loc 1 3319 34 view .LVU5044
 19385 0004 0DF10601 		add	r1, sp, #6
 19386 0008 FFF7FEFF 		bl	flag_word
 19387              	.LVL1507:
3321:src/xeq.c     **** }
 19388              		.loc 1 3321 2 is_stmt 1 view .LVU5045
3321:src/xeq.c     **** }
 19389              		.loc 1 3321 24 is_stmt 0 view .LVU5046
 19390 000c BDF80630 		ldrh	r3, [sp, #6]
 19391 0010 0288     		ldrh	r2, [r0]
 19392 0012 1A42     		tst	r2, r3
3322:src/xeq.c     **** 
 19393              		.loc 1 3322 1 view .LVU5047
 19394 0014 14BF     		ite	ne
 19395 0016 0120     		movne	r0, #1
 19396              	.LVL1508:
3322:src/xeq.c     **** 
 19397              		.loc 1 3322 1 view .LVU5048
 19398 0018 0020     		moveq	r0, #0
 19399 001a 03B0     		add	sp, sp, #12
 19400              		.cfi_def_cfa_offset 4
 19401              		@ sp needed
 19402 001c 5DF804FB 		ldr	pc, [sp], #4
 19403              		.cfi_endproc
 19404              	.LFE192:
 19406              		.section	.text.cmdflag,"ax",%progbits
 19407              		.align	1
 19408              		.p2align 2,,3
 19409              		.global	cmdflag
 19410              		.syntax unified
 19411              		.thumb
 19412              		.thumb_func
 19413              		.fpu fpv4-sp-d16
 19415              	cmdflag:
 19416              	.LVL1509:
 19417              	.LFB194:
3345:src/xeq.c     **** 	unsigned short mask;
 19418              		.loc 1 3345 46 is_stmt 1 view -0
 19419              		.cfi_startproc
 19420              		@ args = 0, pretend = 0, frame = 8
 19421              		@ frame_needed = 0, uses_anonymous_args = 0
3346:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
ARM GAS  /tmp/cciWh9P3.s 			page 520


 19422              		.loc 1 3346 2 view .LVU5050
3347:src/xeq.c     **** 	int flg = *f & mask;
 19423              		.loc 1 3347 2 view .LVU5051
3345:src/xeq.c     **** 	unsigned short mask;
 19424              		.loc 1 3345 46 is_stmt 0 view .LVU5052
 19425 0000 70B5     		push	{r4, r5, r6, lr}
 19426              		.cfi_def_cfa_offset 16
 19427              		.cfi_offset 4, -16
 19428              		.cfi_offset 5, -12
 19429              		.cfi_offset 6, -8
 19430              		.cfi_offset 14, -4
 19431 0002 82B0     		sub	sp, sp, #8
 19432              		.cfi_def_cfa_offset 24
3345:src/xeq.c     **** 	unsigned short mask;
 19433              		.loc 1 3345 46 view .LVU5053
 19434 0004 0C46     		mov	r4, r1
3347:src/xeq.c     **** 	int flg = *f & mask;
 19435              		.loc 1 3347 28 view .LVU5054
 19436 0006 0DF10601 		add	r1, sp, #6
 19437              	.LVL1510:
3345:src/xeq.c     **** 	unsigned short mask;
 19438              		.loc 1 3345 46 view .LVU5055
 19439 000a 0646     		mov	r6, r0
3347:src/xeq.c     **** 	int flg = *f & mask;
 19440              		.loc 1 3347 28 view .LVU5056
 19441 000c FFF7FEFF 		bl	flag_word
 19442              	.LVL1511:
3348:src/xeq.c     **** 
 19443              		.loc 1 3348 15 view .LVU5057
 19444 0010 BDF80620 		ldrh	r2, [sp, #6]
3348:src/xeq.c     **** 
 19445              		.loc 1 3348 12 view .LVU5058
 19446 0014 0388     		ldrh	r3, [r0]
 19447 0016 A4F15101 		sub	r1, r4, #81
3347:src/xeq.c     **** 	int flg = *f & mask;
 19448              		.loc 1 3347 28 view .LVU5059
 19449 001a 0546     		mov	r5, r0
 19450              	.LVL1512:
3348:src/xeq.c     **** 
 19451              		.loc 1 3348 2 is_stmt 1 view .LVU5060
3348:src/xeq.c     **** 
 19452              		.loc 1 3348 6 is_stmt 0 view .LVU5061
 19453 001c 03EA0200 		and	r0, r3, r2
 19454              	.LVL1513:
3350:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
 19455              		.loc 1 3350 2 is_stmt 1 view .LVU5062
 19456 0020 0A29     		cmp	r1, #10
 19457 0022 1AD8     		bhi	.L1369
 19458 0024 DFE801F0 		tbb	[pc, r1]
 19459              	.L1372:
 19460 0028 23       		.byte	(.L1382-.L1372)/2
 19461 0029 0E       		.byte	(.L1381-.L1372)/2
 19462 002a 46       		.byte	(.L1380-.L1372)/2
 19463 002b 29       		.byte	(.L1393-.L1372)/2
 19464 002c 26       		.byte	(.L1378-.L1372)/2
 19465 002d 09       		.byte	(.L1392-.L1372)/2
 19466 002e 1E       		.byte	(.L1391-.L1372)/2
ARM GAS  /tmp/cciWh9P3.s 			page 521


 19467 002f 2D       		.byte	(.L1375-.L1372)/2
 19468 0030 06       		.byte	(.L1374-.L1372)/2
 19469 0031 1B       		.byte	(.L1373-.L1372)/2
 19470 0032 3A       		.byte	(.L1371-.L1372)/2
 19471 0033 00       		.p2align 1
 19472              	.L1374:
3362:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19473              		.loc 1 3362 17 view .LVU5063
 19474 0034 B0FA80F0 		clz	r0, r0
 19475              	.LVL1514:
3362:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19476              		.loc 1 3362 17 is_stmt 0 view .LVU5064
 19477 0038 4009     		lsrs	r0, r0, #5
 19478              	.L1392:
3362:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19479              		.loc 1 3362 17 view .LVU5065
 19480 003a FFF7FEFF 		bl	fin_tst
 19481              	.LVL1515:
3362:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19482              		.loc 1 3362 33 is_stmt 1 view .LVU5066
3362:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 19483              		.loc 1 3362 45 view .LVU5067
3371:src/xeq.c     **** 		*f |= mask;
 19484              		.loc 1 3371 2 view .LVU5068
 19485 003e 2B88     		ldrh	r3, [r5]
 19486 0040 BDF80620 		ldrh	r2, [sp, #6]
 19487              	.LVL1516:
 19488              	.L1381:
3374:src/xeq.c     **** 
 19489              		.loc 1 3374 3 view .LVU5069
3374:src/xeq.c     **** 
 19490              		.loc 1 3374 6 is_stmt 0 view .LVU5070
 19491 0044 23EA0203 		bic	r3, r3, r2
 19492 0048 0021     		movs	r1, #0
 19493              	.L1384:
3376:src/xeq.c     **** 		dot( BIG_EQ, flg );
 19494              		.loc 1 3376 5 view .LVU5071
 19495 004a 682E     		cmp	r6, #104
 19496 004c 2B80     		strh	r3, [r5]	@ movhi
3376:src/xeq.c     **** 		dot( BIG_EQ, flg );
 19497              		.loc 1 3376 2 is_stmt 1 view .LVU5072
3376:src/xeq.c     **** 		dot( BIG_EQ, flg );
 19498              		.loc 1 3376 5 is_stmt 0 view .LVU5073
 19499 004e 04D1     		bne	.L1369
3377:src/xeq.c     **** 		finish_display();
 19500              		.loc 1 3377 3 is_stmt 1 view .LVU5074
 19501 0050 8320     		movs	r0, #131
 19502 0052 FFF7FEFF 		bl	dot
 19503              	.LVL1517:
3378:src/xeq.c     **** 	}
 19504              		.loc 1 3378 3 view .LVU5075
 19505 0056 FFF7FEFF 		bl	finish_display
 19506              	.LVL1518:
 19507              	.L1369:
3380:src/xeq.c     **** 
 19508              		.loc 1 3380 1 is_stmt 0 view .LVU5076
 19509 005a 02B0     		add	sp, sp, #8
ARM GAS  /tmp/cciWh9P3.s 			page 522


 19510              		.cfi_remember_state
 19511              		.cfi_def_cfa_offset 16
 19512              		@ sp needed
 19513 005c 70BD     		pop	{r4, r5, r6, pc}
 19514              	.LVL1519:
 19515              	.L1373:
 19516              		.cfi_restore_state
3363:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19517              		.loc 1 3363 17 is_stmt 1 view .LVU5077
 19518 005e B0FA80F0 		clz	r0, r0
 19519              	.LVL1520:
3363:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19520              		.loc 1 3363 17 is_stmt 0 view .LVU5078
 19521 0062 4009     		lsrs	r0, r0, #5
 19522              	.L1391:
3363:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19523              		.loc 1 3363 17 view .LVU5079
 19524 0064 FFF7FEFF 		bl	fin_tst
 19525              	.LVL1521:
3363:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19526              		.loc 1 3363 33 is_stmt 1 view .LVU5080
3363:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 19527              		.loc 1 3363 45 view .LVU5081
3371:src/xeq.c     **** 		*f |= mask;
 19528              		.loc 1 3371 2 view .LVU5082
 19529 0068 2B88     		ldrh	r3, [r5]
 19530 006a BDF80620 		ldrh	r2, [sp, #6]
 19531              	.LVL1522:
 19532              	.L1382:
3372:src/xeq.c     **** 	else
 19533              		.loc 1 3372 3 view .LVU5083
3372:src/xeq.c     **** 	else
 19534              		.loc 1 3372 6 is_stmt 0 view .LVU5084
 19535 006e 1343     		orrs	r3, r3, r2
 19536 0070 0121     		movs	r1, #1
 19537 0072 EAE7     		b	.L1384
 19538              	.LVL1523:
 19539              	.L1378:
3356:src/xeq.c     **** 
 19540              		.loc 1 3356 16 is_stmt 1 view .LVU5085
 19541 0074 B0FA80F0 		clz	r0, r0
 19542              	.LVL1524:
3356:src/xeq.c     **** 
 19543              		.loc 1 3356 16 is_stmt 0 view .LVU5086
 19544 0078 4009     		lsrs	r0, r0, #5
 19545              	.L1393:
3356:src/xeq.c     **** 
 19546              		.loc 1 3356 16 view .LVU5087
 19547 007a FFF7FEFF 		bl	fin_tst
 19548              	.LVL1525:
3356:src/xeq.c     **** 
 19549              		.loc 1 3356 37 is_stmt 1 view .LVU5088
3380:src/xeq.c     **** 
 19550              		.loc 1 3380 1 is_stmt 0 view .LVU5089
 19551 007e 02B0     		add	sp, sp, #8
 19552              		.cfi_remember_state
 19553              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cciWh9P3.s 			page 523


 19554              		@ sp needed
 19555 0080 70BD     		pop	{r4, r5, r6, pc}
 19556              	.LVL1526:
 19557              	.L1375:
 19558              		.cfi_restore_state
3360:src/xeq.c     **** 
 19559              		.loc 1 3360 17 is_stmt 1 view .LVU5090
3360:src/xeq.c     **** 
 19560              		.loc 1 3360 45 is_stmt 0 view .LVU5091
 19561 0082 B0FA80F4 		clz	r4, r0
 19562 0086 6409     		lsrs	r4, r4, #5
3360:src/xeq.c     **** 
 19563              		.loc 1 3360 17 view .LVU5092
 19564 0088 FFF7FEFF 		bl	fin_tst
 19565              	.LVL1527:
3360:src/xeq.c     **** 
 19566              		.loc 1 3360 31 is_stmt 1 view .LVU5093
3360:src/xeq.c     **** 
 19567              		.loc 1 3360 52 view .LVU5094
3371:src/xeq.c     **** 		*f |= mask;
 19568              		.loc 1 3371 2 view .LVU5095
 19569 008c 2B88     		ldrh	r3, [r5]
 19570 008e BDF80620 		ldrh	r2, [sp, #6]
3371:src/xeq.c     **** 		*f |= mask;
 19571              		.loc 1 3371 5 is_stmt 0 view .LVU5096
 19572 0092 002C     		cmp	r4, #0
 19573 0094 D6D0     		beq	.L1381
 19574              	.L1394:
 19575              	.LVL1528:
3372:src/xeq.c     **** 	else
 19576              		.loc 1 3372 3 is_stmt 1 view .LVU5097
3372:src/xeq.c     **** 	else
 19577              		.loc 1 3372 6 is_stmt 0 view .LVU5098
 19578 0096 1343     		orrs	r3, r3, r2
 19579 0098 0121     		movs	r1, #1
 19580 009a D6E7     		b	.L1384
 19581              	.LVL1529:
 19582              	.L1371:
3364:src/xeq.c     **** 
 19583              		.loc 1 3364 17 is_stmt 1 view .LVU5099
 19584 009c B0FA80F4 		clz	r4, r0
 19585 00a0 6409     		lsrs	r4, r4, #5
 19586 00a2 2046     		mov	r0, r4
 19587              	.LVL1530:
3364:src/xeq.c     **** 
 19588              		.loc 1 3364 17 is_stmt 0 view .LVU5100
 19589 00a4 FFF7FEFF 		bl	fin_tst
 19590              	.LVL1531:
3364:src/xeq.c     **** 
 19591              		.loc 1 3364 33 is_stmt 1 view .LVU5101
3364:src/xeq.c     **** 
 19592              		.loc 1 3364 52 view .LVU5102
 19593 00a8 2B88     		ldrh	r3, [r5]
 19594 00aa BDF80620 		ldrh	r2, [sp, #6]
3371:src/xeq.c     **** 		*f |= mask;
 19595              		.loc 1 3371 2 view .LVU5103
3371:src/xeq.c     **** 		*f |= mask;
ARM GAS  /tmp/cciWh9P3.s 			page 524


 19596              		.loc 1 3371 5 is_stmt 0 view .LVU5104
 19597 00ae 002C     		cmp	r4, #0
 19598 00b0 C8D0     		beq	.L1381
 19599 00b2 F0E7     		b	.L1394
 19600              	.LVL1532:
 19601              	.L1380:
3353:src/xeq.c     **** 
 19602              		.loc 1 3353 16 is_stmt 1 view .LVU5105
3353:src/xeq.c     **** 
 19603              		.loc 1 3353 29 is_stmt 0 view .LVU5106
 19604 00b4 B0FA80F4 		clz	r4, r0
 19605 00b8 6409     		lsrs	r4, r4, #5
 19606              	.LVL1533:
3353:src/xeq.c     **** 
 19607              		.loc 1 3353 38 is_stmt 1 view .LVU5107
3371:src/xeq.c     **** 		*f |= mask;
 19608              		.loc 1 3371 2 view .LVU5108
3371:src/xeq.c     **** 		*f |= mask;
 19609              		.loc 1 3371 5 is_stmt 0 view .LVU5109
 19610 00ba 002C     		cmp	r4, #0
 19611 00bc C2D0     		beq	.L1381
 19612 00be EAE7     		b	.L1394
 19613              		.cfi_endproc
 19614              	.LFE194:
 19616              		.section	.text.put_user_flag,"ax",%progbits
 19617              		.align	1
 19618              		.p2align 2,,3
 19619              		.global	put_user_flag
 19620              		.syntax unified
 19621              		.thumb
 19622              		.thumb_func
 19623              		.fpu fpv4-sp-d16
 19625              	put_user_flag:
 19626              	.LVL1534:
 19627              	.LFB193:
3324:src/xeq.c     **** 	if (f)	set_user_flag(n);
 19628              		.loc 1 3324 34 is_stmt 1 view -0
 19629              		.cfi_startproc
 19630              		@ args = 0, pretend = 0, frame = 0
 19631              		@ frame_needed = 0, uses_anonymous_args = 0
 19632              		@ link register save eliminated.
3325:src/xeq.c     **** 	else	clr_user_flag(n);
 19633              		.loc 1 3325 2 view .LVU5111
3325:src/xeq.c     **** 	else	clr_user_flag(n);
 19634              		.loc 1 3325 5 is_stmt 0 view .LVU5112
 19635 0000 11B1     		cbz	r1, .L1396
3325:src/xeq.c     **** 	else	clr_user_flag(n);
 19636              		.loc 1 3325 9 is_stmt 1 discriminator 1 view .LVU5113
 19637 0002 5121     		movs	r1, #81
 19638              	.LVL1535:
3325:src/xeq.c     **** 	else	clr_user_flag(n);
 19639              		.loc 1 3325 9 is_stmt 0 discriminator 1 view .LVU5114
 19640 0004 FFF7FEBF 		b	cmdflag
 19641              	.LVL1536:
 19642              	.L1396:
3326:src/xeq.c     **** }
 19643              		.loc 1 3326 7 is_stmt 1 view .LVU5115
ARM GAS  /tmp/cciWh9P3.s 			page 525


 19644 0008 5221     		movs	r1, #82
 19645              	.LVL1537:
3326:src/xeq.c     **** }
 19646              		.loc 1 3326 7 is_stmt 0 view .LVU5116
 19647 000a FFF7FEBF 		b	cmdflag
 19648              	.LVL1538:
3326:src/xeq.c     **** }
 19649              		.loc 1 3326 7 view .LVU5117
 19650              		.cfi_endproc
 19651              	.LFE193:
 19653 000e 00BF     		.section	.text.clrflags,"ax",%progbits
 19654              		.align	1
 19655              		.p2align 2,,3
 19656              		.global	clrflags
 19657              		.syntax unified
 19658              		.thumb
 19659              		.thumb_func
 19660              		.fpu fpv4-sp-d16
 19662              	clrflags:
 19663              	.LVL1539:
 19664              	.LFB195:
3384:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 19665              		.loc 1 3384 30 is_stmt 1 view -0
 19666              		.cfi_startproc
 19667              		@ args = 0, pretend = 0, frame = 0
 19668              		@ frame_needed = 0, uses_anonymous_args = 0
3385:src/xeq.c     **** 	if (LocalRegs < 0) {
 19669              		.loc 1 3385 2 view .LVU5119
3384:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 19670              		.loc 1 3384 30 is_stmt 0 view .LVU5120
 19671 0000 10B5     		push	{r4, lr}
 19672              		.cfi_def_cfa_offset 8
 19673              		.cfi_offset 4, -8
 19674              		.cfi_offset 14, -4
3385:src/xeq.c     **** 	if (LocalRegs < 0) {
 19675              		.loc 1 3385 7 view .LVU5121
 19676 0002 0A4C     		ldr	r4, .L1401
 19677 0004 2068     		ldr	r0, [r4]
 19678              	.LVL1540:
3385:src/xeq.c     **** 	if (LocalRegs < 0) {
 19679              		.loc 1 3385 2 view .LVU5122
 19680 0006 0E22     		movs	r2, #14
 19681 0008 00F5FE60 		add	r0, r0, #2032
 19682 000c 0021     		movs	r1, #0
 19683 000e FFF7FEFF 		bl	xset
 19684              	.LVL1541:
3386:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 19685              		.loc 1 3386 2 is_stmt 1 view .LVU5123
3386:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 19686              		.loc 1 3386 6 is_stmt 0 view .LVU5124
 19687 0012 2368     		ldr	r3, [r4]
3386:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 19688              		.loc 1 3386 5 view .LVU5125
 19689 0014 B3F9DE37 		ldrsh	r3, [r3, #2014]
 19690 0018 002B     		cmp	r3, #0
 19691 001a 00DB     		blt	.L1400
3389:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 526


 19692              		.loc 1 3389 1 view .LVU5126
 19693 001c 10BD     		pop	{r4, pc}
 19694              	.L1400:
3387:src/xeq.c     **** 	}
 19695              		.loc 1 3387 3 is_stmt 1 view .LVU5127
3387:src/xeq.c     **** 	}
 19696              		.loc 1 3387 5 is_stmt 0 view .LVU5128
 19697 001e 0021     		movs	r1, #0
 19698 0020 7020     		movs	r0, #112
 19699 0022 FFF7FEFF 		bl	flag_word
 19700              	.LVL1542:
3387:src/xeq.c     **** 	}
 19701              		.loc 1 3387 37 view .LVU5129
 19702 0026 0023     		movs	r3, #0
 19703 0028 0380     		strh	r3, [r0]	@ movhi
3389:src/xeq.c     **** 
 19704              		.loc 1 3389 1 view .LVU5130
 19705 002a 10BD     		pop	{r4, pc}
 19706              	.L1402:
 19707              		.align	2
 19708              	.L1401:
 19709 002c 00000000 		.word	main_ram
 19710              		.cfi_endproc
 19711              	.LFE195:
 19713              		.section	.text.intws,"ax",%progbits
 19714              		.align	1
 19715              		.p2align 2,,3
 19716              		.global	intws
 19717              		.syntax unified
 19718              		.thumb
 19719              		.thumb_func
 19720              		.fpu fpv4-sp-d16
 19722              	intws:
 19723              	.LVL1543:
 19724              	.LFB196:
3394:src/xeq.c     **** 	if (is_intmode()) {
 19725              		.loc 1 3394 44 is_stmt 1 view -0
 19726              		.cfi_startproc
 19727              		@ args = 0, pretend = 0, frame = 8
 19728              		@ frame_needed = 0, uses_anonymous_args = 0
3395:src/xeq.c     **** 		int i, ss = stack_size();
 19729              		.loc 1 3395 2 view .LVU5132
3394:src/xeq.c     **** 	if (is_intmode()) {
 19730              		.loc 1 3394 44 is_stmt 0 view .LVU5133
 19731 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 19732              		.cfi_def_cfa_offset 24
 19733              		.cfi_offset 4, -24
 19734              		.cfi_offset 5, -20
 19735              		.cfi_offset 6, -16
 19736              		.cfi_offset 7, -12
 19737              		.cfi_offset 8, -8
 19738              		.cfi_offset 14, -4
3395:src/xeq.c     **** 		int i, ss = stack_size();
 19739              		.loc 1 3395 6 view .LVU5134
 19740 0004 DFF8E080 		ldr	r8, .L1414+4
 19741 0008 D8F80030 		ldr	r3, [r8]
 19742 000c 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
ARM GAS  /tmp/cciWh9P3.s 			page 527


3395:src/xeq.c     **** 		int i, ss = stack_size();
 19743              		.loc 1 3395 5 view .LVU5135
 19744 0010 D107     		lsls	r1, r2, #31
 19745              	.LVL1544:
3394:src/xeq.c     **** 	if (is_intmode()) {
 19746              		.loc 1 3394 44 view .LVU5136
 19747 0012 82B0     		sub	sp, sp, #8
 19748              		.cfi_def_cfa_offset 32
3395:src/xeq.c     **** 		int i, ss = stack_size();
 19749              		.loc 1 3395 5 view .LVU5137
 19750 0014 53D5     		bpl	.L1404
 19751              	.LBB2962:
3396:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
 19752              		.loc 1 3396 3 is_stmt 1 view .LVU5138
 19753              	.LBB2963:
 19754              	.LBI2963:
 702:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 19755              		.loc 1 702 5 view .LVU5139
 19756              	.LBB2964:
 703:src/xeq.c     **** 		return 4;
 19757              		.loc 1 703 2 view .LVU5140
 703:src/xeq.c     **** 		return 4;
 19758              		.loc 1 703 6 is_stmt 0 view .LVU5141
 19759 0016 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 703:src/xeq.c     **** 		return 4;
 19760              		.loc 1 703 5 view .LVU5142
 19761 001a 1207     		lsls	r2, r2, #28
 19762 001c 58D5     		bpl	.L1408
 19763              	.LBB2965:
 19764              	.LBI2965:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 19765              		.loc 1 181 5 is_stmt 1 view .LVU5143
 19766              	.LBB2966:
 182:src/xeq.c     **** }
 19767              		.loc 1 182 2 view .LVU5144
 182:src/xeq.c     **** }
 19768              		.loc 1 182 9 is_stmt 0 view .LVU5145
 19769 001e B3F8E027 		ldrh	r2, [r3, #2016]
 19770              	.LBE2966:
 19771              	.LBE2965:
 703:src/xeq.c     **** 		return 4;
 19772              		.loc 1 703 27 view .LVU5146
 19773 0022 920B     		lsrs	r2, r2, #14
 19774 0024 032A     		cmp	r2, #3
 19775 0026 55D0     		beq	.L1413
 705:src/xeq.c     **** }
 19776              		.loc 1 705 9 view .LVU5147
 19777 0028 0827     		movs	r7, #8
 19778              	.L1405:
 19779              	.LVL1545:
 705:src/xeq.c     **** }
 19780              		.loc 1 705 9 view .LVU5148
 19781              	.LBE2964:
 19782              	.LBE2963:
3397:src/xeq.c     **** 		long long int v;
 19783              		.loc 1 3397 3 is_stmt 1 view .LVU5149
3397:src/xeq.c     **** 		long long int v;
ARM GAS  /tmp/cciWh9P3.s 			page 528


 19784              		.loc 1 3397 31 is_stmt 0 view .LVU5150
 19785 002a 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 19786 002e 00F03F05 		and	r5, r0, #63
 19787 0032 06F03F06 		and	r6, r6, #63
 19788              	.LVL1546:
3398:src/xeq.c     **** 
 19789              		.loc 1 3398 3 is_stmt 1 view .LVU5151
3400:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19790              		.loc 1 3400 3 view .LVU5152
3400:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19791              		.loc 1 3400 13 view .LVU5153
 19792 0036 6437     		adds	r7, r7, #100
 19793              	.LVL1547:
3397:src/xeq.c     **** 		long long int v;
 19794              		.loc 1 3397 31 is_stmt 0 view .LVU5154
 19795 0038 6424     		movs	r4, #100
 19796              	.LVL1548:
 19797              	.L1406:
3401:src/xeq.c     **** 			UState.int_len = arg;
 19798              		.loc 1 3401 4 is_stmt 1 discriminator 3 view .LVU5155
3401:src/xeq.c     **** 			UState.int_len = arg;
 19799              		.loc 1 3401 8 is_stmt 0 discriminator 3 view .LVU5156
 19800 003a 2046     		mov	r0, r4
 19801 003c FFF7FEFF 		bl	get_reg_n_int
 19802              	.LVL1549:
 19803 0040 FFF7FEFF 		bl	mask_value
 19804              	.LVL1550:
3402:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 19805              		.loc 1 3402 4 is_stmt 1 discriminator 3 view .LVU5157
3402:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 19806              		.loc 1 3402 19 is_stmt 0 discriminator 3 view .LVU5158
 19807 0044 D8F80030 		ldr	r3, [r8]
 19808 0048 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 19809 004c 65F30502 		bfi	r2, r5, #0, #6
 19810 0050 83F8E927 		strb	r2, [r3, #2025]
3403:src/xeq.c     **** 			UState.int_len = oldlen;
 19811              		.loc 1 3403 4 is_stmt 1 discriminator 3 view .LVU5159
 19812 0054 FFF7FEFF 		bl	mask_value
 19813              	.LVL1551:
3403:src/xeq.c     **** 			UState.int_len = oldlen;
 19814              		.loc 1 3403 4 is_stmt 0 discriminator 3 view .LVU5160
 19815 0058 0B46     		mov	r3, r1
 19816 005a 0246     		mov	r2, r0
 19817              	.LBB2968:
 19818              	.LBB2969:
1236:src/xeq.c     **** }
 19819              		.loc 1 1236 8 discriminator 3 view .LVU5161
 19820 005c 2046     		mov	r0, r4
 19821 005e CDE90023 		strd	r2, [sp]
 19822              	.LVL1552:
1236:src/xeq.c     **** }
 19823              		.loc 1 1236 8 discriminator 3 view .LVU5162
 19824              	.LBE2969:
 19825              	.LBI2968:
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19826              		.loc 1 1235 6 is_stmt 1 discriminator 3 view .LVU5163
 19827              	.LBB2970:
ARM GAS  /tmp/cciWh9P3.s 			page 529


1236:src/xeq.c     **** }
 19828              		.loc 1 1236 2 discriminator 3 view .LVU5164
1236:src/xeq.c     **** }
 19829              		.loc 1 1236 8 is_stmt 0 discriminator 3 view .LVU5165
 19830 0062 FFF7FEFF 		bl	get_reg_n
 19831              	.LVL1553:
1236:src/xeq.c     **** }
 19832              		.loc 1 1236 2 discriminator 3 view .LVU5166
 19833 0066 0822     		movs	r2, #8
 19834 0068 6946     		mov	r1, sp
 19835 006a FFF7FEFF 		bl	xcopy
 19836              	.LVL1554:
1236:src/xeq.c     **** }
 19837              		.loc 1 1236 2 discriminator 3 view .LVU5167
 19838              	.LBE2970:
 19839              	.LBE2968:
3404:src/xeq.c     **** 		}
 19840              		.loc 1 3404 4 is_stmt 1 discriminator 3 view .LVU5168
3404:src/xeq.c     **** 		}
 19841              		.loc 1 3404 19 is_stmt 0 discriminator 3 view .LVU5169
 19842 006e D8F80030 		ldr	r3, [r8]
 19843 0072 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 19844 0076 0134     		adds	r4, r4, #1
 19845              	.LVL1555:
3404:src/xeq.c     **** 		}
 19846              		.loc 1 3404 19 discriminator 3 view .LVU5170
 19847 0078 66F30502 		bfi	r2, r6, #0, #6
3400:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19848              		.loc 1 3400 3 discriminator 3 view .LVU5171
 19849 007c BC42     		cmp	r4, r7
3404:src/xeq.c     **** 		}
 19850              		.loc 1 3404 19 discriminator 3 view .LVU5172
 19851 007e 83F8E927 		strb	r2, [r3, #2025]
3400:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19852              		.loc 1 3400 19 is_stmt 1 discriminator 3 view .LVU5173
 19853              	.LVL1556:
3400:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19854              		.loc 1 3400 13 discriminator 3 view .LVU5174
3400:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 19855              		.loc 1 3400 3 is_stmt 0 discriminator 3 view .LVU5175
 19856 0082 DAD1     		bne	.L1406
3406:src/xeq.c     **** 		UState.int_len = arg;
 19857              		.loc 1 3406 3 is_stmt 1 view .LVU5176
3406:src/xeq.c     **** 		UState.int_len = arg;
 19858              		.loc 1 3406 7 is_stmt 0 view .LVU5177
 19859 0084 6C20     		movs	r0, #108
 19860 0086 FFF7FEFF 		bl	get_reg_n_int
 19861              	.LVL1557:
 19862 008a FFF7FEFF 		bl	mask_value
 19863              	.LVL1558:
3407:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 19864              		.loc 1 3407 3 is_stmt 1 view .LVU5178
3407:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 19865              		.loc 1 3407 18 is_stmt 0 view .LVU5179
 19866 008e D8F80030 		ldr	r3, [r8]
 19867 0092 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 19868 0096 65F30502 		bfi	r2, r5, #0, #6
ARM GAS  /tmp/cciWh9P3.s 			page 530


 19869 009a 83F8E927 		strb	r2, [r3, #2025]
3408:src/xeq.c     **** 	} else
 19870              		.loc 1 3408 3 is_stmt 1 view .LVU5180
 19871 009e FFF7FEFF 		bl	mask_value
 19872              	.LVL1559:
3408:src/xeq.c     **** 	} else
 19873              		.loc 1 3408 3 is_stmt 0 view .LVU5181
 19874 00a2 0B46     		mov	r3, r1
 19875 00a4 0246     		mov	r2, r0
 19876              	.LBB2971:
 19877              	.LBB2972:
1236:src/xeq.c     **** }
 19878              		.loc 1 1236 8 view .LVU5182
 19879 00a6 6C20     		movs	r0, #108
 19880 00a8 CDE90023 		strd	r2, [sp]
 19881              	.LVL1560:
1236:src/xeq.c     **** }
 19882              		.loc 1 1236 8 view .LVU5183
 19883              	.LBE2972:
 19884              	.LBI2971:
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 19885              		.loc 1 1235 6 is_stmt 1 view .LVU5184
 19886              	.LBB2973:
1236:src/xeq.c     **** }
 19887              		.loc 1 1236 2 view .LVU5185
1236:src/xeq.c     **** }
 19888              		.loc 1 1236 8 is_stmt 0 view .LVU5186
 19889 00ac FFF7FEFF 		bl	get_reg_n
 19890              	.LVL1561:
1236:src/xeq.c     **** }
 19891              		.loc 1 1236 2 view .LVU5187
 19892 00b0 6946     		mov	r1, sp
 19893 00b2 0822     		movs	r2, #8
 19894 00b4 FFF7FEFF 		bl	xcopy
 19895              	.LVL1562:
1236:src/xeq.c     **** }
 19896              		.loc 1 1236 2 view .LVU5188
 19897              	.LBE2973:
 19898              	.LBE2971:
 19899              	.LBE2962:
3411:src/xeq.c     **** 
 19900              		.loc 1 3411 1 view .LVU5189
 19901 00b8 02B0     		add	sp, sp, #8
 19902              		.cfi_remember_state
 19903              		.cfi_def_cfa_offset 24
 19904              		@ sp needed
 19905 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 19906              	.LVL1563:
 19907              	.L1404:
 19908              		.cfi_restore_state
3410:src/xeq.c     **** }
 19909              		.loc 1 3410 6 is_stmt 1 view .LVU5190
3410:src/xeq.c     **** }
 19910              		.loc 1 3410 21 is_stmt 0 view .LVU5191
 19911 00be 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 19912 00c2 60F30502 		bfi	r2, r0, #0, #6
 19913              	.LVL1564:
ARM GAS  /tmp/cciWh9P3.s 			page 531


3410:src/xeq.c     **** }
 19914              		.loc 1 3410 21 view .LVU5192
 19915 00c6 83F8E927 		strb	r2, [r3, #2025]
3411:src/xeq.c     **** 
 19916              		.loc 1 3411 1 view .LVU5193
 19917 00ca 02B0     		add	sp, sp, #8
 19918              		.cfi_remember_state
 19919              		.cfi_def_cfa_offset 24
 19920              		@ sp needed
 19921 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 19922              	.LVL1565:
 19923              	.L1408:
 19924              		.cfi_restore_state
 19925              	.LBB2975:
 19926              	.LBB2974:
 19927              	.LBB2967:
 704:src/xeq.c     **** 	return 8;
 19928              		.loc 1 704 10 view .LVU5194
 19929 00d0 0427     		movs	r7, #4
 19930 00d2 AAE7     		b	.L1405
 19931              	.L1413:
 703:src/xeq.c     **** 		return 4;
 19932              		.loc 1 703 44 view .LVU5195
 19933 00d4 034A     		ldr	r2, .L1414
 703:src/xeq.c     **** 		return 4;
 19934              		.loc 1 703 41 view .LVU5196
 19935 00d6 92F90120 		ldrsb	r2, [r2, #1]
 704:src/xeq.c     **** 	return 8;
 19936              		.loc 1 704 10 view .LVU5197
 19937 00da 002A     		cmp	r2, #0
 19938 00dc B4BF     		ite	lt
 19939 00de 0827     		movlt	r7, #8
 19940 00e0 0427     		movge	r7, #4
 19941 00e2 A2E7     		b	.L1405
 19942              	.L1415:
 19943              		.align	2
 19944              	.L1414:
 19945 00e4 00000000 		.word	XromParams
 19946 00e8 00000000 		.word	main_ram
 19947              	.LBE2967:
 19948              	.LBE2974:
 19949              	.LBE2975:
 19950              		.cfi_endproc
 19951              	.LFE196:
 19953              		.section	.text.get_maxdenom,"ax",%progbits
 19954              		.align	1
 19955              		.p2align 2,,3
 19956              		.global	get_maxdenom
 19957              		.syntax unified
 19958              		.thumb
 19959              		.thumb_func
 19960              		.fpu fpv4-sp-d16
 19962              	get_maxdenom:
 19963              	.LVL1566:
 19964              	.LFB197:
3417:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
 19965              		.loc 1 3417 33 is_stmt 1 view -0
ARM GAS  /tmp/cciWh9P3.s 			page 532


 19966              		.cfi_startproc
 19967              		@ args = 0, pretend = 0, frame = 0
 19968              		@ frame_needed = 0, uses_anonymous_args = 0
 19969              		@ link register save eliminated.
3418:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 19970              		.loc 1 3418 2 view .LVU5199
3418:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 19971              		.loc 1 3418 32 is_stmt 0 view .LVU5200
 19972 0000 064B     		ldr	r3, .L1418
 19973 0002 1B68     		ldr	r3, [r3]
 19974 0004 D3F8E417 		ldr	r1, [r3, #2020]
3419:src/xeq.c     **** }
 19975              		.loc 1 3419 2 view .LVU5201
 19976 0008 42F20F73 		movw	r3, #9999
3418:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 19977              		.loc 1 3418 32 view .LVU5202
 19978 000c C1F38D11 		ubfx	r1, r1, #6, #14
 19979              	.LVL1567:
3419:src/xeq.c     **** }
 19980              		.loc 1 3419 2 is_stmt 1 view .LVU5203
 19981 0010 0029     		cmp	r1, #0
 19982 0012 08BF     		it	eq
 19983 0014 1946     		moveq	r1, r3
 19984 0016 FFF7FEBF 		b	int_to_dn
 19985              	.LVL1568:
 19986              	.L1419:
3419:src/xeq.c     **** }
 19987              		.loc 1 3419 2 is_stmt 0 view .LVU5204
 19988 001a 00BF     		.align	2
 19989              	.L1418:
 19990 001c 00000000 		.word	main_ram
 19991              		.cfi_endproc
 19992              	.LFE197:
 19994              		.section	.rodata.op_2frac.str1.4,"aMS",%progbits,1
 19995              		.align	2
 19996              	.LC4:
 19997 0000 792F7820 		.ascii	"y/x =\000"
 19997      3D00
 19998 0006 0000     		.align	2
 19999              	.LC5:
 20000 0008 792F7820 		.ascii	"y/x \007\344<\000"
 20000      07E43C00 
 20001              		.align	2
 20002              	.LC6:
 20003 0010 792F7820 		.ascii	"y/x \007\344>\000"
 20003      07E43E00 
 20004              		.section	.text.op_2frac,"ax",%progbits
 20005              		.align	1
 20006              		.p2align 2,,3
 20007              		.global	op_2frac
 20008              		.syntax unified
 20009              		.thumb
 20010              		.thumb_func
 20011              		.fpu fpv4-sp-d16
 20013              	op_2frac:
 20014              	.LVL1569:
 20015              	.LFB198:
ARM GAS  /tmp/cciWh9P3.s 			page 533


3422:src/xeq.c     **** 	decNumber z, n, d, t;
 20016              		.loc 1 3422 30 is_stmt 1 view -0
 20017              		.cfi_startproc
 20018              		@ args = 0, pretend = 0, frame = 144
 20019              		@ frame_needed = 0, uses_anonymous_args = 0
3423:src/xeq.c     **** 
 20020              		.loc 1 3423 2 view .LVU5206
3425:src/xeq.c     **** 		setX_int(1);
 20021              		.loc 1 3425 2 view .LVU5207
3425:src/xeq.c     **** 		setX_int(1);
 20022              		.loc 1 3425 6 is_stmt 0 view .LVU5208
 20023 0000 234B     		ldr	r3, .L1432
3422:src/xeq.c     **** 	decNumber z, n, d, t;
 20024              		.loc 1 3422 30 view .LVU5209
 20025 0002 00B5     		push	{lr}
 20026              		.cfi_def_cfa_offset 4
 20027              		.cfi_offset 14, -4
3425:src/xeq.c     **** 		setX_int(1);
 20028              		.loc 1 3425 6 view .LVU5210
 20029 0004 1B68     		ldr	r3, [r3]
 20030 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3425:src/xeq.c     **** 		setX_int(1);
 20031              		.loc 1 3425 5 view .LVU5211
 20032 000a DA07     		lsls	r2, r3, #31
3422:src/xeq.c     **** 	decNumber z, n, d, t;
 20033              		.loc 1 3422 30 view .LVU5212
 20034 000c A5B0     		sub	sp, sp, #148
 20035              		.cfi_def_cfa_offset 152
3425:src/xeq.c     **** 		setX_int(1);
 20036              		.loc 1 3425 5 view .LVU5213
 20037 000e 2BD4     		bmi	.L1430
3430:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
 20038              		.loc 1 3430 2 is_stmt 1 view .LVU5214
 20039              	.LVL1570:
 20040              	.LBB2976:
 20041              	.LBI2976:
 812:src/xeq.c     **** 	getRegister(y, regY_idx);
 20042              		.loc 1 812 6 view .LVU5215
 20043              	.LBB2977:
 813:src/xeq.c     **** }
 20044              		.loc 1 813 2 view .LVU5216
 20045 0010 6521     		movs	r1, #101
 20046 0012 6846     		mov	r0, sp
 20047              	.LVL1571:
 813:src/xeq.c     **** }
 20048              		.loc 1 813 2 is_stmt 0 view .LVU5217
 20049 0014 FFF7FEFF 		bl	getRegister
 20050              	.LVL1572:
 813:src/xeq.c     **** }
 20051              		.loc 1 813 2 view .LVU5218
 20052              	.LBE2977:
 20053              	.LBE2976:
3431:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
 20054              		.loc 1 3431 2 is_stmt 1 view .LVU5219
 20055 0018 6A46     		mov	r2, sp
 20056 001a 12A9     		add	r1, sp, #72
 20057 001c 09A8     		add	r0, sp, #36
ARM GAS  /tmp/cciWh9P3.s 			page 534


 20058 001e FFF7FEFF 		bl	decNumber2Fraction
 20059              	.LVL1573:
3432:src/xeq.c     **** 	if (State2.runmode) {
 20060              		.loc 1 3432 2 view .LVU5220
 20061              	.LBB2978:
 20062              	.LBI2978:
 839:src/xeq.c     **** 	setX(x);
 20063              		.loc 1 839 6 view .LVU5221
 20064              	.LBE2978:
 840:src/xeq.c     **** 	setY(y);
 20065              		.loc 1 840 2 view .LVU5222
 20066              	.LBB2983:
 20067              	.LBB2979:
 20068              	.LBI2979:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 20069              		.loc 1 808 6 view .LVU5223
 20070              	.LBB2980:
 809:src/xeq.c     **** }
 20071              		.loc 1 809 2 view .LVU5224
 20072 0022 12A9     		add	r1, sp, #72
 20073              	.LVL1574:
 809:src/xeq.c     **** }
 20074              		.loc 1 809 2 is_stmt 0 view .LVU5225
 20075 0024 6420     		movs	r0, #100
 20076 0026 FFF7FEFF 		bl	setRegister
 20077              	.LVL1575:
 809:src/xeq.c     **** }
 20078              		.loc 1 809 2 view .LVU5226
 20079              	.LBE2980:
 20080              	.LBE2979:
 20081              	.LBE2983:
 841:src/xeq.c     **** }
 20082              		.loc 1 841 2 is_stmt 1 view .LVU5227
 20083              	.LBB2984:
 20084              	.LBB2981:
 20085              	.LBI2981:
 816:src/xeq.c     **** 	setRegister(regY_idx, y);
 20086              		.loc 1 816 6 view .LVU5228
 20087              	.LBB2982:
 817:src/xeq.c     **** }
 20088              		.loc 1 817 2 view .LVU5229
 20089 002a 09A9     		add	r1, sp, #36
 20090              	.LVL1576:
 817:src/xeq.c     **** }
 20091              		.loc 1 817 2 is_stmt 0 view .LVU5230
 20092 002c 6520     		movs	r0, #101
 20093 002e FFF7FEFF 		bl	setRegister
 20094              	.LVL1577:
 817:src/xeq.c     **** }
 20095              		.loc 1 817 2 view .LVU5231
 20096              	.LBE2982:
 20097              	.LBE2981:
 20098              	.LBE2984:
3433:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 20099              		.loc 1 3433 2 is_stmt 1 view .LVU5232
3433:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 20100              		.loc 1 3433 6 is_stmt 0 view .LVU5233
ARM GAS  /tmp/cciWh9P3.s 			page 535


 20101 0032 184B     		ldr	r3, .L1432+4
 20102 0034 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3433:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 20103              		.loc 1 3433 5 view .LVU5234
 20104 0036 5B06     		lsls	r3, r3, #25
 20105 0038 02D4     		bmi	.L1431
3449:src/xeq.c     **** 
 20106              		.loc 1 3449 1 view .LVU5235
 20107 003a 25B0     		add	sp, sp, #148
 20108              		.cfi_remember_state
 20109              		.cfi_def_cfa_offset 4
 20110              		@ sp needed
 20111 003c 5DF804FB 		ldr	pc, [sp], #4
 20112              	.L1431:
 20113              		.cfi_restore_state
3434:src/xeq.c     **** 		dn_compare(&n, &t, &z);
 20114              		.loc 1 3434 3 is_stmt 1 view .LVU5236
 20115 0040 12AA     		add	r2, sp, #72
 20116 0042 09A9     		add	r1, sp, #36
 20117 0044 1BA8     		add	r0, sp, #108
 20118 0046 FFF7FEFF 		bl	dn_divide
 20119              	.LVL1578:
3435:src/xeq.c     **** 		if (dn_eq0(&n))
 20120              		.loc 1 3435 3 view .LVU5237
 20121 004a 6A46     		mov	r2, sp
 20122 004c 1BA9     		add	r1, sp, #108
 20123 004e 09A8     		add	r0, sp, #36
 20124 0050 FFF7FEFF 		bl	dn_compare
 20125              	.LVL1579:
3436:src/xeq.c     **** 			DispMsg = "y/x =";
 20126              		.loc 1 3436 3 view .LVU5238
3436:src/xeq.c     **** 			DispMsg = "y/x =";
 20127              		.loc 1 3436 7 is_stmt 0 view .LVU5239
 20128 0054 09A8     		add	r0, sp, #36
 20129 0056 FFF7FEFF 		bl	dn_eq0
 20130              	.LVL1580:
3436:src/xeq.c     **** 			DispMsg = "y/x =";
 20131              		.loc 1 3436 6 view .LVU5240
 20132 005a 60B1     		cbz	r0, .L1424
3437:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 20133              		.loc 1 3437 4 is_stmt 1 view .LVU5241
3437:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 20134              		.loc 1 3437 12 is_stmt 0 view .LVU5242
 20135 005c 0E4B     		ldr	r3, .L1432+8
 20136 005e 0F4A     		ldr	r2, .L1432+12
 20137 0060 1A60     		str	r2, [r3]
3449:src/xeq.c     **** 
 20138              		.loc 1 3449 1 view .LVU5243
 20139 0062 25B0     		add	sp, sp, #148
 20140              		.cfi_remember_state
 20141              		.cfi_def_cfa_offset 4
 20142              		@ sp needed
 20143 0064 5DF804FB 		ldr	pc, [sp], #4
 20144              	.LVL1581:
 20145              	.L1430:
 20146              		.cfi_restore_state
3426:src/xeq.c     **** 		return;
ARM GAS  /tmp/cciWh9P3.s 			page 536


 20147              		.loc 1 3426 3 is_stmt 1 view .LVU5244
 20148 0068 0120     		movs	r0, #1
 20149              	.LVL1582:
3426:src/xeq.c     **** 		return;
 20150              		.loc 1 3426 3 is_stmt 0 view .LVU5245
 20151 006a 0021     		movs	r1, #0
 20152 006c FFF7FEFF 		bl	setX_int
 20153              	.LVL1583:
3427:src/xeq.c     **** 	}
 20154              		.loc 1 3427 3 is_stmt 1 view .LVU5246
3449:src/xeq.c     **** 
 20155              		.loc 1 3449 1 is_stmt 0 view .LVU5247
 20156 0070 25B0     		add	sp, sp, #148
 20157              		.cfi_remember_state
 20158              		.cfi_def_cfa_offset 4
 20159              		@ sp needed
 20160 0072 5DF804FB 		ldr	pc, [sp], #4
 20161              	.L1424:
 20162              		.cfi_restore_state
3438:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 20163              		.loc 1 3438 8 is_stmt 1 view .LVU5248
3438:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 20164              		.loc 1 3438 11 is_stmt 0 view .LVU5249
 20165 0076 9DF92C30 		ldrsb	r3, [sp, #44]
 20166 007a 002B     		cmp	r3, #0
3440:src/xeq.c     **** 		else
 20167              		.loc 1 3440 12 view .LVU5250
 20168 007c B8BF     		it	lt
 20169 007e 084A     		ldrlt	r2, .L1432+16
 20170 0080 054B     		ldr	r3, .L1432+8
3440:src/xeq.c     **** 		else
 20171              		.loc 1 3440 4 is_stmt 1 view .LVU5251
3442:src/xeq.c     **** #else
 20172              		.loc 1 3442 4 view .LVU5252
3442:src/xeq.c     **** #else
 20173              		.loc 1 3442 12 is_stmt 0 view .LVU5253
 20174 0082 A8BF     		it	ge
 20175 0084 074A     		ldrge	r2, .L1432+20
 20176 0086 1A60     		str	r2, [r3]
3449:src/xeq.c     **** 
 20177              		.loc 1 3449 1 view .LVU5254
 20178 0088 25B0     		add	sp, sp, #148
 20179              		.cfi_def_cfa_offset 4
 20180              		@ sp needed
 20181 008a 5DF804FB 		ldr	pc, [sp], #4
 20182              	.L1433:
 20183 008e 00BF     		.align	2
 20184              	.L1432:
 20185 0090 00000000 		.word	main_ram
 20186 0094 00000000 		.word	StateWhileOn
 20187 0098 00000000 		.word	DispMsg
 20188 009c 00000000 		.word	.LC4
 20189 00a0 08000000 		.word	.LC5
 20190 00a4 10000000 		.word	.LC6
 20191              		.cfi_endproc
 20192              	.LFE198:
 20194              		.section	.text.op_fracdenom,"ax",%progbits
ARM GAS  /tmp/cciWh9P3.s 			page 537


 20195              		.align	1
 20196              		.p2align 2,,3
 20197              		.global	op_fracdenom
 20198              		.syntax unified
 20199              		.thumb
 20200              		.thumb_func
 20201              		.fpu fpv4-sp-d16
 20203              	op_fracdenom:
 20204              	.LVL1584:
 20205              	.LFB199:
3451:src/xeq.c     **** 	int s;
 20206              		.loc 1 3451 34 is_stmt 1 view -0
 20207              		.cfi_startproc
 20208              		@ args = 0, pretend = 0, frame = 8
 20209              		@ frame_needed = 0, uses_anonymous_args = 0
3452:src/xeq.c     **** 	unsigned long long int i;
 20210              		.loc 1 3452 2 view .LVU5256
3453:src/xeq.c     **** 
 20211              		.loc 1 3453 2 view .LVU5257
3455:src/xeq.c     **** 	if (i > 9999)
 20212              		.loc 1 3455 2 view .LVU5258
3451:src/xeq.c     **** 	int s;
 20213              		.loc 1 3451 34 is_stmt 0 view .LVU5259
 20214 0000 2DE90048 		push	{fp, lr}
 20215              		.cfi_def_cfa_offset 8
 20216              		.cfi_offset 11, -8
 20217              		.cfi_offset 14, -4
 20218 0004 84B0     		sub	sp, sp, #16
 20219              		.cfi_def_cfa_offset 24
 20220              	.LVL1585:
 20221              	.LBB2985:
 20222              	.LBI2985:
1259:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 20223              		.loc 1 1259 24 is_stmt 1 view .LVU5260
 20224              	.LBB2986:
1260:src/xeq.c     **** }
 20225              		.loc 1 1260 2 view .LVU5261
1260:src/xeq.c     **** }
 20226              		.loc 1 1260 9 is_stmt 0 view .LVU5262
 20227 0006 03A9     		add	r1, sp, #12
 20228              	.LVL1586:
1260:src/xeq.c     **** }
 20229              		.loc 1 1260 9 view .LVU5263
 20230 0008 6420     		movs	r0, #100
 20231              	.LVL1587:
1260:src/xeq.c     **** }
 20232              		.loc 1 1260 9 view .LVU5264
 20233 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 20234              	.LVL1588:
1260:src/xeq.c     **** }
 20235              		.loc 1 1260 9 view .LVU5265
 20236 000e 8C46     		mov	ip, r1
 20237              	.LVL1589:
1260:src/xeq.c     **** }
 20238              		.loc 1 1260 9 view .LVU5266
 20239              	.LBE2986:
 20240              	.LBE2985:
ARM GAS  /tmp/cciWh9P3.s 			page 538


3456:src/xeq.c     **** 		UState.denom_max = 0;
 20241              		.loc 1 3456 5 view .LVU5267
 20242 0010 0021     		movs	r1, #0
 20243              	.LBB2988:
 20244              	.LBB2987:
1260:src/xeq.c     **** }
 20245              		.loc 1 1260 9 view .LVU5268
 20246 0012 8346     		mov	fp, r0
 20247              	.LVL1590:
1260:src/xeq.c     **** }
 20248              		.loc 1 1260 9 view .LVU5269
 20249              	.LBE2987:
 20250              	.LBE2988:
3456:src/xeq.c     **** 		UState.denom_max = 0;
 20251              		.loc 1 3456 2 is_stmt 1 view .LVU5270
3456:src/xeq.c     **** 		UState.denom_max = 0;
 20252              		.loc 1 3456 5 is_stmt 0 view .LVU5271
 20253 0014 6145     		cmp	r1, ip
 20254 0016 42F20F70 		movw	r0, #9999
 20255 001a 08BF     		it	eq
 20256 001c 5845     		cmpeq	r0, fp
 20257 001e 0AD2     		bcs	.L1435
3457:src/xeq.c     **** 	else if (i != 1)
 20258              		.loc 1 3457 3 is_stmt 1 view .LVU5272
3457:src/xeq.c     **** 	else if (i != 1)
 20259              		.loc 1 3457 20 is_stmt 0 view .LVU5273
 20260 0020 174B     		ldr	r3, .L1439
 20261 0022 1B68     		ldr	r3, [r3]
 20262 0024 D3F8E427 		ldr	r2, [r3, #2020]
 20263 0028 6FF39312 		bfc	r2, #6, #14
 20264 002c C3F8E427 		str	r2, [r3, #2020]
3464:src/xeq.c     **** 
 20265              		.loc 1 3464 1 view .LVU5274
 20266 0030 04B0     		add	sp, sp, #16
 20267              		.cfi_remember_state
 20268              		.cfi_def_cfa_offset 8
 20269              		@ sp needed
 20270 0032 BDE80088 		pop	{fp, pc}
 20271              	.LVL1591:
 20272              	.L1435:
 20273              		.cfi_restore_state
3458:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 20274              		.loc 1 3458 7 is_stmt 1 view .LVU5275
3458:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 20275              		.loc 1 3458 10 is_stmt 0 view .LVU5276
 20276 0036 BCF1000F 		cmp	ip, #0
 20277 003a 08BF     		it	eq
 20278 003c BBF1010F 		cmpeq	fp, #1
 20279 0040 0AD0     		beq	.L1437
3459:src/xeq.c     **** 	else {
 20280              		.loc 1 3459 3 is_stmt 1 view .LVU5277
3459:src/xeq.c     **** 	else {
 20281              		.loc 1 3459 20 is_stmt 0 view .LVU5278
 20282 0042 0F4B     		ldr	r3, .L1439
 20283 0044 1B68     		ldr	r3, [r3]
 20284 0046 D3F8E417 		ldr	r1, [r3, #2020]
 20285 004a 6BF39311 		bfi	r1, fp, #6, #14
ARM GAS  /tmp/cciWh9P3.s 			page 539


 20286 004e C3F8E417 		str	r1, [r3, #2020]
3464:src/xeq.c     **** 
 20287              		.loc 1 3464 1 view .LVU5279
 20288 0052 04B0     		add	sp, sp, #16
 20289              		.cfi_remember_state
 20290              		.cfi_def_cfa_offset 8
 20291              		@ sp needed
 20292 0054 BDE80088 		pop	{fp, pc}
 20293              	.LVL1592:
 20294              	.L1437:
 20295              		.cfi_restore_state
3461:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
 20296              		.loc 1 3461 3 is_stmt 1 view .LVU5280
 20297              	.LBB2989:
 20298              	.LBI2989:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 20299              		.loc 1 772 6 view .LVU5281
 20300              	.LBB2990:
 773:src/xeq.c     **** }
 20301              		.loc 1 773 2 view .LVU5282
 20302 0058 6421     		movs	r1, #100
 20303 005a 6C20     		movs	r0, #108
 20304 005c FFF7FEFF 		bl	copyreg_n
 20305              	.LVL1593:
 20306              	.LBE2990:
 20307              	.LBE2989:
3462:src/xeq.c     **** 	}
 20308              		.loc 1 3462 3 view .LVU5283
 20309              	.LBB2991:
 20310              	.LBI2991:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 20311              		.loc 1 1322 6 view .LVU5284
 20312              	.LBB2992:
1323:src/xeq.c     **** }
 20313              		.loc 1 1323 2 view .LVU5285
 20314              	.LBE2992:
 20315              	.LBE2991:
3462:src/xeq.c     **** 	}
 20316              		.loc 1 3462 22 is_stmt 0 view .LVU5286
 20317 0060 074B     		ldr	r3, .L1439
 20318              	.LVL1594:
3462:src/xeq.c     **** 	}
 20319              		.loc 1 3462 22 view .LVU5287
 20320 0062 1B68     		ldr	r3, [r3]
 20321              	.LVL1595:
3462:src/xeq.c     **** 	}
 20322              		.loc 1 3462 22 view .LVU5288
 20323 0064 D3F8E427 		ldr	r2, [r3, #2020]
 20324              	.LBB2995:
 20325              	.LBB2993:
1323:src/xeq.c     **** }
 20326              		.loc 1 1323 2 view .LVU5289
 20327 0068 0021     		movs	r1, #0
 20328              	.LBE2993:
 20329              	.LBE2995:
3462:src/xeq.c     **** 	}
 20330              		.loc 1 3462 22 view .LVU5290
ARM GAS  /tmp/cciWh9P3.s 			page 540


 20331 006a C2F38D12 		ubfx	r2, r2, #6, #14
 20332              	.LBB2996:
 20333              	.LBB2994:
1323:src/xeq.c     **** }
 20334              		.loc 1 1323 2 view .LVU5291
 20335 006e 92B2     		uxth	r2, r2
 20336 0070 0023     		movs	r3, #0
 20337              	.LVL1596:
1323:src/xeq.c     **** }
 20338              		.loc 1 1323 2 view .LVU5292
 20339 0072 0091     		str	r1, [sp]
 20340              	.LVL1597:
1323:src/xeq.c     **** }
 20341              		.loc 1 1323 2 view .LVU5293
 20342 0074 6420     		movs	r0, #100
 20343 0076 FFF7FEFF 		bl	set_reg_n_int_sgn
 20344              	.LVL1598:
1323:src/xeq.c     **** }
 20345              		.loc 1 1323 2 view .LVU5294
 20346              	.LBE2994:
 20347              	.LBE2996:
3464:src/xeq.c     **** 
 20348              		.loc 1 3464 1 view .LVU5295
 20349 007a 04B0     		add	sp, sp, #16
 20350              		.cfi_def_cfa_offset 8
 20351              		@ sp needed
 20352 007c BDE80088 		pop	{fp, pc}
 20353              	.LVL1599:
 20354              	.L1440:
3464:src/xeq.c     **** 
 20355              		.loc 1 3464 1 view .LVU5296
 20356              		.align	2
 20357              	.L1439:
 20358 0080 00000000 		.word	main_ram
 20359              		.cfi_endproc
 20360              	.LFE199:
 20362              		.section	.text.op_float,"ax",%progbits
 20363              		.align	1
 20364              		.p2align 2,,3
 20365              		.global	op_float
 20366              		.syntax unified
 20367              		.thumb
 20368              		.thumb_func
 20369              		.fpu fpv4-sp-d16
 20371              	op_float:
 20372              	.LVL1600:
 20373              	.LFB200:
3472:src/xeq.c     **** 
 20374              		.loc 1 3472 30 is_stmt 1 view -0
 20375              		.cfi_startproc
 20376              		@ args = 0, pretend = 0, frame = 40
 20377              		@ frame_needed = 0, uses_anonymous_args = 0
3474:src/xeq.c     **** 		int i;
 20378              		.loc 1 3474 2 view .LVU5298
3472:src/xeq.c     **** 
 20379              		.loc 1 3472 30 is_stmt 0 view .LVU5299
 20380 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
ARM GAS  /tmp/cciWh9P3.s 			page 541


 20381              		.cfi_def_cfa_offset 28
 20382              		.cfi_offset 4, -28
 20383              		.cfi_offset 5, -24
 20384              		.cfi_offset 6, -20
 20385              		.cfi_offset 7, -16
 20386              		.cfi_offset 8, -12
 20387              		.cfi_offset 9, -8
 20388              		.cfi_offset 14, -4
3474:src/xeq.c     **** 		int i;
 20389              		.loc 1 3474 6 view .LVU5300
 20390 0004 2F4F     		ldr	r7, .L1453
 20391 0006 3B68     		ldr	r3, [r7]
 20392 0008 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3474:src/xeq.c     **** 		int i;
 20393              		.loc 1 3474 5 view .LVU5301
 20394 000c D207     		lsls	r2, r2, #31
3472:src/xeq.c     **** 
 20395              		.loc 1 3472 30 view .LVU5302
 20396 000e 8BB0     		sub	sp, sp, #44
 20397              		.cfi_def_cfa_offset 72
3472:src/xeq.c     **** 
 20398              		.loc 1 3472 30 view .LVU5303
 20399 0010 0646     		mov	r6, r0
3474:src/xeq.c     **** 		int i;
 20400              		.loc 1 3474 5 view .LVU5304
 20401 0012 27D5     		bpl	.L1442
 20402              	.LBB2997:
3475:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
 20403              		.loc 1 3475 3 is_stmt 1 view .LVU5305
3476:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20404              		.loc 1 3476 3 view .LVU5306
3476:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20405              		.loc 1 3476 33 is_stmt 0 view .LVU5307
 20406 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
3476:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20407              		.loc 1 3476 26 view .LVU5308
 20408 0018 2B4A     		ldr	r2, .L1453+4
3476:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20409              		.loc 1 3476 33 view .LVU5309
 20410 001a C3F3C003 		ubfx	r3, r3, #3, #1
3477:src/xeq.c     **** 			if (mask & 1) {
 20411              		.loc 1 3477 10 view .LVU5310
 20412 001e 6424     		movs	r4, #100
3476:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 20413              		.loc 1 3476 7 view .LVU5311
 20414 0020 32F81350 		ldrh	r5, [r2, r3, lsl #1]
 20415              	.LVL1601:
3477:src/xeq.c     **** 			if (mask & 1) {
 20416              		.loc 1 3477 3 is_stmt 1 view .LVU5312
3477:src/xeq.c     **** 			if (mask & 1) {
 20417              		.loc 1 3477 22 view .LVU5313
 20418              	.LBB2998:
 20419              	.LBB2999:
 932:src/xeq.c     **** }
 20420              		.loc 1 932 24 is_stmt 0 view .LVU5314
 20421 0024 44F20108 		movw	r8, #16385
 20422 0028 0CE0     		b	.L1445
ARM GAS  /tmp/cciWh9P3.s 			page 542


 20423              	.LVL1602:
 20424              	.L1443:
 932:src/xeq.c     **** }
 20425              		.loc 1 932 24 view .LVU5315
 20426 002a 3B68     		ldr	r3, [r7]
 20427 002c B3F8E837 		ldrh	r3, [r3, #2024]
 20428              	.LBE2999:
 20429              	.LBE2998:
3482:src/xeq.c     **** 				// expand the other registers which have been left
 20430              		.loc 1 3482 12 view .LVU5316
 20431 0030 08EA0303 		and	r3, r8, r3
 20432 0034 B3F5804F 		cmp	r3, #16384
 20433 0038 32D0     		beq	.L1452
 20434              	.L1444:
3477:src/xeq.c     **** 			if (mask & 1) {
 20435              		.loc 1 3477 37 is_stmt 1 discriminator 2 view .LVU5317
 20436 003a 0134     		adds	r4, r4, #1
 20437              	.LVL1603:
3477:src/xeq.c     **** 			if (mask & 1) {
 20438              		.loc 1 3477 3 is_stmt 0 discriminator 2 view .LVU5318
 20439 003c 702C     		cmp	r4, #112
3477:src/xeq.c     **** 			if (mask & 1) {
 20440              		.loc 1 3477 47 discriminator 2 view .LVU5319
 20441 003e 4FEA6505 		asr	r5, r5, #1
 20442              	.LVL1604:
3477:src/xeq.c     **** 			if (mask & 1) {
 20443              		.loc 1 3477 22 is_stmt 1 discriminator 2 view .LVU5320
3477:src/xeq.c     **** 			if (mask & 1) {
 20444              		.loc 1 3477 3 is_stmt 0 discriminator 2 view .LVU5321
 20445 0042 0FD0     		beq	.L1442
 20446              	.LVL1605:
 20447              	.L1445:
3478:src/xeq.c     **** 				// register belongs to stack
 20448              		.loc 1 3478 4 is_stmt 1 view .LVU5322
3482:src/xeq.c     **** 				// expand the other registers which have been left
 20449              		.loc 1 3482 9 view .LVU5323
 20450              	.LBB3001:
 20451              	.LBI2998:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 20452              		.loc 1 931 5 view .LVU5324
 20453              	.LBB3000:
 932:src/xeq.c     **** }
 20454              		.loc 1 932 2 view .LVU5325
 20455              	.LBE3000:
 20456              	.LBE3001:
3478:src/xeq.c     **** 				// register belongs to stack
 20457              		.loc 1 3478 7 is_stmt 0 view .LVU5326
 20458 0044 EB07     		lsls	r3, r5, #31
 20459 0046 F0D5     		bpl	.L1443
3480:src/xeq.c     **** 			}
 20460              		.loc 1 3480 5 is_stmt 1 view .LVU5327
 20461 0048 A6F1C602 		sub	r2, r6, #198
 20462 004c B2FA82F2 		clz	r2, r2
 20463 0050 2146     		mov	r1, r4
 20464 0052 2046     		mov	r0, r4
 20465 0054 5209     		lsrs	r2, r2, #5
3477:src/xeq.c     **** 			if (mask & 1) {
ARM GAS  /tmp/cciWh9P3.s 			page 543


 20466              		.loc 1 3477 37 is_stmt 0 view .LVU5328
 20467 0056 0134     		adds	r4, r4, #1
 20468              	.LVL1606:
3480:src/xeq.c     **** 			}
 20469              		.loc 1 3480 5 view .LVU5329
 20470 0058 FFF7FEFF 		bl	register_from_int
 20471              	.LVL1607:
3477:src/xeq.c     **** 			if (mask & 1) {
 20472              		.loc 1 3477 37 is_stmt 1 view .LVU5330
3477:src/xeq.c     **** 			if (mask & 1) {
 20473              		.loc 1 3477 3 is_stmt 0 view .LVU5331
 20474 005c 702C     		cmp	r4, #112
3477:src/xeq.c     **** 			if (mask & 1) {
 20475              		.loc 1 3477 47 view .LVU5332
 20476 005e 4FEA6505 		asr	r5, r5, #1
 20477              	.LVL1608:
3477:src/xeq.c     **** 			if (mask & 1) {
 20478              		.loc 1 3477 22 is_stmt 1 view .LVU5333
3477:src/xeq.c     **** 			if (mask & 1) {
 20479              		.loc 1 3477 3 is_stmt 0 view .LVU5334
 20480 0062 EFD1     		bne	.L1445
 20481              	.LVL1609:
 20482              	.L1442:
3477:src/xeq.c     **** 			if (mask & 1) {
 20483              		.loc 1 3477 3 view .LVU5335
 20484              	.LBE2997:
3489:src/xeq.c     **** 		UState.fract = 0;
 20485              		.loc 1 3489 2 is_stmt 1 view .LVU5336
3489:src/xeq.c     **** 		UState.fract = 0;
 20486              		.loc 1 3489 25 is_stmt 0 view .LVU5337
 20487 0064 06F13A03 		add	r3, r6, #58
3489:src/xeq.c     **** 		UState.fract = 0;
 20488              		.loc 1 3489 5 view .LVU5338
 20489 0068 DBB2     		uxtb	r3, r3
 20490 006a 012B     		cmp	r3, #1
 20491 006c 10D9     		bls	.L1446
3490:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20492              		.loc 1 3490 3 is_stmt 1 view .LVU5339
3490:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20493              		.loc 1 3490 16 is_stmt 0 view .LVU5340
 20494 006e 3A68     		ldr	r2, [r7]
3491:src/xeq.c     **** 	}
 20495              		.loc 1 3491 14 view .LVU5341
 20496 0070 164B     		ldr	r3, .L1453+8
3490:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 20497              		.loc 1 3490 16 view .LVU5342
 20498 0072 92F8E617 		ldrb	r1, [r2, #2022]	@ zero_extendqisi2
 20499 0076 6FF34511 		bfc	r1, #5, #1
 20500 007a 82F8E617 		strb	r1, [r2, #2022]
3491:src/xeq.c     **** 	}
 20501              		.loc 1 3491 3 is_stmt 1 view .LVU5343
3491:src/xeq.c     **** 	}
 20502              		.loc 1 3491 35 is_stmt 0 view .LVU5344
 20503 007e A6F15C06 		sub	r6, #92
3491:src/xeq.c     **** 	}
 20504              		.loc 1 3491 14 view .LVU5345
 20505 0082 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
ARM GAS  /tmp/cciWh9P3.s 			page 544


3491:src/xeq.c     **** 	}
 20506              		.loc 1 3491 35 view .LVU5346
 20507 0084 B6FA86F6 		clz	r6, r6
 20508 0088 7609     		lsrs	r6, r6, #5
3491:src/xeq.c     **** 	}
 20509              		.loc 1 3491 14 view .LVU5347
 20510 008a 66F30002 		bfi	r2, r6, #0, #1
 20511 008e DA75     		strb	r2, [r3, #23]
 20512              	.L1446:
3493:src/xeq.c     **** }
 20513              		.loc 1 3493 2 is_stmt 1 view .LVU5348
3493:src/xeq.c     **** }
 20514              		.loc 1 3493 14 is_stmt 0 view .LVU5349
 20515 0090 6420     		movs	r0, #100
 20516 0092 FFF7FEFF 		bl	get_reg_n
 20517              	.LVL1610:
3493:src/xeq.c     **** }
 20518              		.loc 1 3493 12 view .LVU5350
 20519 0096 0E4B     		ldr	r3, .L1453+12
 20520 0098 1860     		str	r0, [r3]
3494:src/xeq.c     **** 
 20521              		.loc 1 3494 1 view .LVU5351
 20522 009a 0BB0     		add	sp, sp, #44
 20523              		.cfi_remember_state
 20524              		.cfi_def_cfa_offset 28
 20525              		@ sp needed
 20526 009c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 20527              	.LVL1611:
 20528              	.L1452:
 20529              		.cfi_restore_state
 20530              	.LBB3004:
3485:src/xeq.c     **** 			}
 20531              		.loc 1 3485 5 is_stmt 1 view .LVU5352
3485:src/xeq.c     **** 			}
 20532              		.loc 1 3485 29 is_stmt 0 view .LVU5353
 20533 00a0 2046     		mov	r0, r4
 20534 00a2 FFF7FEFF 		bl	get_reg_n
 20535              	.LVL1612:
3485:src/xeq.c     **** 			}
 20536              		.loc 1 3485 47 view .LVU5354
 20537 00a6 3B68     		ldr	r3, [r7]
 20538 00a8 03F58663 		add	r3, r3, #1072
3485:src/xeq.c     **** 			}
 20539              		.loc 1 3485 29 view .LVU5355
 20540 00ac 8146     		mov	r9, r0
 20541              	.LVL1613:
 20542              	.LBB3002:
 20543              	.LBI3002:
 644:src/xeq.c     **** 	decNumber temp;
 20544              		.loc 1 644 6 is_stmt 1 view .LVU5356
 20545              	.LBB3003:
 645:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 20546              		.loc 1 645 2 view .LVU5357
 646:src/xeq.c     **** }
 20547              		.loc 1 646 2 view .LVU5358
 646:src/xeq.c     **** }
 20548              		.loc 1 646 27 is_stmt 0 view .LVU5359
ARM GAS  /tmp/cciWh9P3.s 			page 545


 20549 00ae 01A9     		add	r1, sp, #4
 20550 00b0 03EBC400 		add	r0, r3, r4, lsl #3
 20551              	.LVL1614:
 646:src/xeq.c     **** }
 20552              		.loc 1 646 27 view .LVU5360
 20553 00b4 FFF7FEFF 		bl	decimal64ToNumber
 20554              	.LVL1615:
 646:src/xeq.c     **** }
 20555              		.loc 1 646 27 view .LVU5361
 20556 00b8 0146     		mov	r1, r0
 646:src/xeq.c     **** }
 20557              		.loc 1 646 2 view .LVU5362
 20558 00ba 4846     		mov	r0, r9
 20559 00bc FFF7FEFF 		bl	packed128_from_number
 20560              	.LVL1616:
 647:src/xeq.c     **** 
 20561              		.loc 1 647 1 view .LVU5363
 20562 00c0 BBE7     		b	.L1444
 20563              	.L1454:
 20564 00c2 00BF     		.align	2
 20565              	.L1453:
 20566 00c4 00000000 		.word	main_ram
 20567 00c8 00000000 		.word	.LANCHOR3
 20568 00cc 00000000 		.word	StateWhileOn
 20569 00d0 00000000 		.word	StackBase
 20570              	.LBE3003:
 20571              	.LBE3002:
 20572              	.LBE3004:
 20573              		.cfi_endproc
 20574              	.LFE200:
 20576              		.section	.text.cmddisp,"ax",%progbits
 20577              		.align	1
 20578              		.p2align 2,,3
 20579              		.global	cmddisp
 20580              		.syntax unified
 20581              		.thumb
 20582              		.thumb_func
 20583              		.fpu fpv4-sp-d16
 20585              	cmddisp:
 20586              	.LVL1617:
 20587              	.LFB166:
2243:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 20588              		.loc 1 2243 46 is_stmt 1 view -0
 20589              		.cfi_startproc
 20590              		@ args = 0, pretend = 0, frame = 0
 20591              		@ frame_needed = 0, uses_anonymous_args = 0
 20592              		@ link register save eliminated.
2256:src/xeq.c     **** 	if (op != RARG_DISP)
 20593              		.loc 1 2256 2 view .LVU5365
 20594 0000 094B     		ldr	r3, .L1460
 20595 0002 1B68     		ldr	r3, [r3]
2256:src/xeq.c     **** 	if (op != RARG_DISP)
 20596              		.loc 1 2256 18 is_stmt 0 view .LVU5366
 20597 0004 93F8E727 		ldrb	r2, [r3, #2023]	@ zero_extendqisi2
2257:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
 20598              		.loc 1 2257 5 view .LVU5367
 20599 0008 5029     		cmp	r1, #80
ARM GAS  /tmp/cciWh9P3.s 			page 546


2256:src/xeq.c     **** 	if (op != RARG_DISP)
 20600              		.loc 1 2256 18 view .LVU5368
 20601 000a 60F30302 		bfi	r2, r0, #0, #4
 20602              	.LVL1618:
2256:src/xeq.c     **** 	if (op != RARG_DISP)
 20603              		.loc 1 2256 18 view .LVU5369
 20604 000e 83F8E727 		strb	r2, [r3, #2023]
2257:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
 20605              		.loc 1 2257 2 is_stmt 1 view .LVU5370
2257:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
 20606              		.loc 1 2257 5 is_stmt 0 view .LVU5371
 20607 0012 06D0     		beq	.L1456
2258:src/xeq.c     **** #endif
 20608              		.loc 1 2258 3 is_stmt 1 view .LVU5372
2258:src/xeq.c     **** #endif
 20609              		.loc 1 2258 19 is_stmt 0 view .LVU5373
 20610 0014 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
2258:src/xeq.c     **** #endif
 20611              		.loc 1 2258 37 view .LVU5374
 20612 0018 4C39     		subs	r1, r1, #76
 20613              	.LVL1619:
2258:src/xeq.c     **** #endif
 20614              		.loc 1 2258 19 view .LVU5375
 20615 001a 61F38712 		bfi	r2, r1, #6, #2
 20616 001e 83F8E627 		strb	r2, [r3, #2022]
 20617              	.L1456:
2260:src/xeq.c     **** }
 20618              		.loc 1 2260 2 is_stmt 1 view .LVU5376
 20619 0022 5B20     		movs	r0, #91
 20620 0024 FFF7FEBF 		b	op_float
 20621              	.LVL1620:
 20622              	.L1461:
 20623              		.align	2
 20624              	.L1460:
 20625 0028 00000000 		.word	main_ram
 20626              		.cfi_endproc
 20627              	.LFE166:
 20629              		.section	.text.set_int_base,"ax",%progbits
 20630              		.align	1
 20631              		.p2align 2,,3
 20632              		.global	set_int_base
 20633              		.syntax unified
 20634              		.thumb
 20635              		.thumb_func
 20636              		.fpu fpv4-sp-d16
 20638              	set_int_base:
 20639              	.LVL1621:
 20640              	.LFB203:
3522:src/xeq.c     **** 	if (arg < 2) {
 20641              		.loc 1 3522 51 view -0
 20642              		.cfi_startproc
 20643              		@ args = 0, pretend = 0, frame = 0
 20644              		@ frame_needed = 0, uses_anonymous_args = 0
3523:src/xeq.c     **** 		if (arg == 0)
 20645              		.loc 1 3523 2 view .LVU5378
3523:src/xeq.c     **** 		if (arg == 0)
 20646              		.loc 1 3523 5 is_stmt 0 view .LVU5379
ARM GAS  /tmp/cciWh9P3.s 			page 547


 20647 0000 0128     		cmp	r0, #1
3522:src/xeq.c     **** 	if (arg < 2) {
 20648              		.loc 1 3522 51 view .LVU5380
 20649 0002 08B5     		push	{r3, lr}
 20650              		.cfi_def_cfa_offset 8
 20651              		.cfi_offset 3, -8
 20652              		.cfi_offset 14, -4
3523:src/xeq.c     **** 		if (arg == 0)
 20653              		.loc 1 3523 5 view .LVU5381
 20654 0004 0BD9     		bls	.L1467
3529:src/xeq.c     **** }
 20655              		.loc 1 3529 3 is_stmt 1 view .LVU5382
 20656              	.LVL1622:
 20657              	.LBB3005:
 20658              	.LBI3005:
3516:src/xeq.c     **** 	UState.int_base = b - 1;
 20659              		.loc 1 3516 13 view .LVU5383
 20660              	.LBB3006:
3517:src/xeq.c     **** 	if (!is_intmode())
 20661              		.loc 1 3517 2 view .LVU5384
 20662 0006 114B     		ldr	r3, .L1469
 20663 0008 1A68     		ldr	r2, [r3]
3517:src/xeq.c     **** 	if (!is_intmode())
 20664              		.loc 1 3517 18 is_stmt 0 view .LVU5385
 20665 000a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3517:src/xeq.c     **** 	if (!is_intmode())
 20666              		.loc 1 3517 22 view .LVU5386
 20667 000e 0138     		subs	r0, r0, #1
 20668              	.LVL1623:
3517:src/xeq.c     **** 	if (!is_intmode())
 20669              		.loc 1 3517 18 view .LVU5387
 20670 0010 60F30713 		bfi	r3, r0, #4, #4
 20671 0014 82F8E837 		strb	r3, [r2, #2024]
3518:src/xeq.c     **** 		switch_to_int();
 20672              		.loc 1 3518 2 is_stmt 1 view .LVU5388
3518:src/xeq.c     **** 		switch_to_int();
 20673              		.loc 1 3518 5 is_stmt 0 view .LVU5389
 20674 0018 DB07     		lsls	r3, r3, #31
 20675 001a 12D5     		bpl	.L1468
 20676              	.LBE3006:
 20677              	.LBE3005:
3530:src/xeq.c     **** 
 20678              		.loc 1 3530 1 view .LVU5390
 20679 001c 08BD     		pop	{r3, pc}
 20680              	.LVL1624:
 20681              	.L1467:
3524:src/xeq.c     **** 			op_float(OP_FLOAT);
 20682              		.loc 1 3524 3 is_stmt 1 view .LVU5391
3524:src/xeq.c     **** 			op_float(OP_FLOAT);
 20683              		.loc 1 3524 6 is_stmt 0 view .LVU5392
 20684 001e 20B9     		cbnz	r0, .L1464
3525:src/xeq.c     **** 		else
 20685              		.loc 1 3525 4 is_stmt 1 view .LVU5393
3530:src/xeq.c     **** 
 20686              		.loc 1 3530 1 is_stmt 0 view .LVU5394
 20687 0020 BDE80840 		pop	{r3, lr}
 20688              		.cfi_remember_state
ARM GAS  /tmp/cciWh9P3.s 			page 548


 20689              		.cfi_restore 14
 20690              		.cfi_restore 3
 20691              		.cfi_def_cfa_offset 0
3525:src/xeq.c     **** 		else
 20692              		.loc 1 3525 4 view .LVU5395
 20693 0024 5B20     		movs	r0, #91
 20694              	.LVL1625:
3525:src/xeq.c     **** 		else
 20695              		.loc 1 3525 4 view .LVU5396
 20696 0026 FFF7FEBF 		b	op_float
 20697              	.LVL1626:
 20698              	.L1464:
 20699              		.cfi_restore_state
3527:src/xeq.c     **** 	} else
 20700              		.loc 1 3527 4 is_stmt 1 view .LVU5397
 20701              	.LBB3009:
 20702              	.LBI3009:
3533:src/xeq.c     **** 	op_float(OP_FLOAT);
 20703              		.loc 1 3533 6 view .LVU5398
 20704              	.LBB3010:
3534:src/xeq.c     **** 	UState.fract = 1;
 20705              		.loc 1 3534 2 view .LVU5399
 20706 002a 5B20     		movs	r0, #91
 20707              	.LVL1627:
3534:src/xeq.c     **** 	UState.fract = 1;
 20708              		.loc 1 3534 2 is_stmt 0 view .LVU5400
 20709 002c FFF7FEFF 		bl	op_float
 20710              	.LVL1628:
3535:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 20711              		.loc 1 3535 2 is_stmt 1 view .LVU5401
3535:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 20712              		.loc 1 3535 15 is_stmt 0 view .LVU5402
 20713 0030 064B     		ldr	r3, .L1469
 20714 0032 1A68     		ldr	r2, [r3]
 20715 0034 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 20716 0038 43F02003 		orr	r3, r3, #32
 20717 003c 82F8E637 		strb	r3, [r2, #2022]
3536:src/xeq.c     **** 		UState.improperfrac = 1;
 20718              		.loc 1 3536 2 is_stmt 1 view .LVU5403
3538:src/xeq.c     **** 		UState.improperfrac = 0;
 20719              		.loc 1 3538 7 view .LVU5404
 20720              	.LBE3010:
 20721              	.LBE3009:
3530:src/xeq.c     **** 
 20722              		.loc 1 3530 1 is_stmt 0 view .LVU5405
 20723 0040 08BD     		pop	{r3, pc}
 20724              	.LVL1629:
 20725              	.L1468:
 20726              	.LBB3011:
 20727              	.LBB3007:
3519:src/xeq.c     **** }
 20728              		.loc 1 3519 3 is_stmt 1 view .LVU5406
 20729              	.LBE3007:
 20730              	.LBE3011:
3530:src/xeq.c     **** 
 20731              		.loc 1 3530 1 is_stmt 0 view .LVU5407
 20732 0042 BDE80840 		pop	{r3, lr}
ARM GAS  /tmp/cciWh9P3.s 			page 549


 20733              		.cfi_restore 14
 20734              		.cfi_restore 3
 20735              		.cfi_def_cfa_offset 0
 20736              	.LBB3012:
 20737              	.LBB3008:
3519:src/xeq.c     **** }
 20738              		.loc 1 3519 3 view .LVU5408
 20739 0046 FFF7FEBF 		b	switch_to_int
 20740              	.LVL1630:
 20741              	.L1470:
3519:src/xeq.c     **** }
 20742              		.loc 1 3519 3 view .LVU5409
 20743 004a 00BF     		.align	2
 20744              	.L1469:
 20745 004c 00000000 		.word	main_ram
 20746              	.LBE3008:
 20747              	.LBE3012:
 20748              		.cfi_endproc
 20749              	.LFE203:
 20751              		.section	.text.op_fract,"ax",%progbits
 20752              		.align	1
 20753              		.p2align 2,,3
 20754              		.global	op_fract
 20755              		.syntax unified
 20756              		.thumb
 20757              		.thumb_func
 20758              		.fpu fpv4-sp-d16
 20760              	op_fract:
 20761              	.LVL1631:
 20762              	.LFB204:
3533:src/xeq.c     **** 	op_float(OP_FLOAT);
 20763              		.loc 1 3533 30 is_stmt 1 view -0
 20764              		.cfi_startproc
 20765              		@ args = 0, pretend = 0, frame = 0
 20766              		@ frame_needed = 0, uses_anonymous_args = 0
3534:src/xeq.c     **** 	UState.fract = 1;
 20767              		.loc 1 3534 2 view .LVU5411
3533:src/xeq.c     **** 	op_float(OP_FLOAT);
 20768              		.loc 1 3533 30 is_stmt 0 view .LVU5412
 20769 0000 10B5     		push	{r4, lr}
 20770              		.cfi_def_cfa_offset 8
 20771              		.cfi_offset 4, -8
 20772              		.cfi_offset 14, -4
3533:src/xeq.c     **** 	op_float(OP_FLOAT);
 20773              		.loc 1 3533 30 view .LVU5413
 20774 0002 0446     		mov	r4, r0
3534:src/xeq.c     **** 	UState.fract = 1;
 20775              		.loc 1 3534 2 view .LVU5414
 20776 0004 5B20     		movs	r0, #91
 20777              	.LVL1632:
3534:src/xeq.c     **** 	UState.fract = 1;
 20778              		.loc 1 3534 2 view .LVU5415
 20779 0006 FFF7FEFF 		bl	op_float
 20780              	.LVL1633:
3535:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 20781              		.loc 1 3535 2 is_stmt 1 view .LVU5416
 20782 000a 0D4B     		ldr	r3, .L1477
ARM GAS  /tmp/cciWh9P3.s 			page 550


 20783 000c 1B68     		ldr	r3, [r3]
3535:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 20784              		.loc 1 3535 15 is_stmt 0 view .LVU5417
 20785 000e 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
3536:src/xeq.c     **** 		UState.improperfrac = 1;
 20786              		.loc 1 3536 5 view .LVU5418
 20787 0012 4D2C     		cmp	r4, #77
3535:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 20788              		.loc 1 3535 15 view .LVU5419
 20789 0014 42F02002 		orr	r2, r2, #32
 20790 0018 83F8E627 		strb	r2, [r3, #2022]
3536:src/xeq.c     **** 		UState.improperfrac = 1;
 20791              		.loc 1 3536 2 is_stmt 1 view .LVU5420
3536:src/xeq.c     **** 		UState.improperfrac = 1;
 20792              		.loc 1 3536 5 is_stmt 0 view .LVU5421
 20793 001c 09D0     		beq	.L1475
3538:src/xeq.c     **** 		UState.improperfrac = 0;
 20794              		.loc 1 3538 7 is_stmt 1 view .LVU5422
3538:src/xeq.c     **** 		UState.improperfrac = 0;
 20795              		.loc 1 3538 10 is_stmt 0 view .LVU5423
 20796 001e 4E2C     		cmp	r4, #78
 20797 0020 00D0     		beq	.L1476
3540:src/xeq.c     **** 
 20798              		.loc 1 3540 1 view .LVU5424
 20799 0022 10BD     		pop	{r4, pc}
 20800              	.L1476:
3539:src/xeq.c     **** }
 20801              		.loc 1 3539 3 is_stmt 1 view .LVU5425
3539:src/xeq.c     **** }
 20802              		.loc 1 3539 23 is_stmt 0 view .LVU5426
 20803 0024 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 20804 0028 6FF30412 		bfc	r2, #4, #1
 20805 002c 83F8E627 		strb	r2, [r3, #2022]
3540:src/xeq.c     **** 
 20806              		.loc 1 3540 1 view .LVU5427
 20807 0030 10BD     		pop	{r4, pc}
 20808              	.L1475:
3537:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 20809              		.loc 1 3537 3 is_stmt 1 view .LVU5428
3537:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 20810              		.loc 1 3537 23 is_stmt 0 view .LVU5429
 20811 0032 D2B2     		uxtb	r2, r2
 20812 0034 42F01002 		orr	r2, r2, #16
 20813 0038 83F8E627 		strb	r2, [r3, #2022]
3540:src/xeq.c     **** 
 20814              		.loc 1 3540 1 view .LVU5430
 20815 003c 10BD     		pop	{r4, pc}
 20816              	.L1478:
 20817 003e 00BF     		.align	2
 20818              	.L1477:
 20819 0040 00000000 		.word	main_ram
 20820              		.cfi_endproc
 20821              	.LFE204:
 20823              		.section	.text.cmdsavem,"ax",%progbits
 20824              		.align	1
 20825              		.p2align 2,,3
 20826              		.global	cmdsavem
ARM GAS  /tmp/cciWh9P3.s 			page 551


 20827              		.syntax unified
 20828              		.thumb
 20829              		.thumb_func
 20830              		.fpu fpv4-sp-d16
 20832              	cmdsavem:
 20833              	.LVL1634:
 20834              	.LFB205:
3545:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 20835              		.loc 1 3545 47 is_stmt 1 view -0
 20836              		.cfi_startproc
 20837              		@ args = 0, pretend = 0, frame = 0
 20838              		@ frame_needed = 0, uses_anonymous_args = 0
3546:src/xeq.c     **** }
 20839              		.loc 1 3546 2 view .LVU5432
3545:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 20840              		.loc 1 3545 47 is_stmt 0 view .LVU5433
 20841 0000 08B5     		push	{r3, lr}
 20842              		.cfi_def_cfa_offset 8
 20843              		.cfi_offset 3, -8
 20844              		.cfi_offset 14, -4
3546:src/xeq.c     **** }
 20845              		.loc 1 3546 9 view .LVU5434
 20846 0002 FFF7FEFF 		bl	get_reg_n
 20847              	.LVL1635:
3546:src/xeq.c     **** }
 20848              		.loc 1 3546 26 view .LVU5435
 20849 0006 044B     		ldr	r3, .L1481
3546:src/xeq.c     **** }
 20850              		.loc 1 3546 25 view .LVU5436
 20851 0008 1968     		ldr	r1, [r3]
3546:src/xeq.c     **** }
 20852              		.loc 1 3546 2 view .LVU5437
 20853 000a 0822     		movs	r2, #8
3547:src/xeq.c     **** 
 20854              		.loc 1 3547 1 view .LVU5438
 20855 000c BDE80840 		pop	{r3, lr}
 20856              		.cfi_restore 14
 20857              		.cfi_restore 3
 20858              		.cfi_def_cfa_offset 0
3546:src/xeq.c     **** }
 20859              		.loc 1 3546 2 view .LVU5439
 20860 0010 01F2E471 		addw	r1, r1, #2020
 20861 0014 FFF7FEBF 		b	xcopy
 20862              	.LVL1636:
 20863              	.L1482:
 20864              		.align	2
 20865              	.L1481:
 20866 0018 00000000 		.word	main_ram
 20867              		.cfi_endproc
 20868              	.LFE205:
 20870              		.section	.text.set_entry,"ax",%progbits
 20871              		.align	1
 20872              		.p2align 2,,3
 20873              		.global	set_entry
 20874              		.syntax unified
 20875              		.thumb
 20876              		.thumb_func
ARM GAS  /tmp/cciWh9P3.s 			page 552


 20877              		.fpu fpv4-sp-d16
 20879              	set_entry:
 20880              	.LFB208:
3671:src/xeq.c     **** 	if (!Running && !XromRunning)
 20881              		.loc 1 3671 18 is_stmt 1 view -0
 20882              		.cfi_startproc
 20883              		@ args = 0, pretend = 0, frame = 0
 20884              		@ frame_needed = 0, uses_anonymous_args = 0
 20885              		@ link register save eliminated.
3672:src/xeq.c     **** 		State.entryp = 1;
 20886              		.loc 1 3672 2 view .LVU5441
 20887              	.LBB3015:
 20888              	.LBI3015:
3671:src/xeq.c     **** 	if (!Running && !XromRunning)
 20889              		.loc 1 3671 6 view .LVU5442
 20890              	.LBE3015:
3672:src/xeq.c     **** 		State.entryp = 1;
 20891              		.loc 1 3672 6 is_stmt 0 view .LVU5443
 20892 0000 074A     		ldr	r2, .L1485
 20893              	.LBB3017:
 20894              	.LBB3016:
3672:src/xeq.c     **** 		State.entryp = 1;
 20895              		.loc 1 3672 18 view .LVU5444
 20896 0002 084B     		ldr	r3, .L1485+4
3672:src/xeq.c     **** 		State.entryp = 1;
 20897              		.loc 1 3672 15 view .LVU5445
 20898 0004 1268     		ldr	r2, [r2]
 20899 0006 1B68     		ldr	r3, [r3]
 20900 0008 1343     		orrs	r3, r2, r3
 20901 000a 07D1     		bne	.L1483
3673:src/xeq.c     **** }
 20902              		.loc 1 3673 3 is_stmt 1 view .LVU5446
3673:src/xeq.c     **** }
 20903              		.loc 1 3673 16 is_stmt 0 view .LVU5447
 20904 000c 064B     		ldr	r3, .L1485+8
 20905 000e 1A68     		ldr	r2, [r3]
 20906 0010 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 20907 0014 43F01003 		orr	r3, r3, #16
 20908 0018 82F8DD37 		strb	r3, [r2, #2013]
 20909              	.L1483:
 20910              	.LBE3016:
 20911              	.LBE3017:
3674:src/xeq.c     **** 
 20912              		.loc 1 3674 1 view .LVU5448
 20913 001c 7047     		bx	lr
 20914              	.L1486:
 20915 001e 00BF     		.align	2
 20916              	.L1485:
 20917 0020 00000000 		.word	Running
 20918 0024 00000000 		.word	XromRunning
 20919 0028 00000000 		.word	main_ram
 20920              		.cfi_endproc
 20921              	.LFE208:
 20923              		.section	.text.get_trig_mode,"ax",%progbits
 20924              		.align	1
 20925              		.p2align 2,,3
 20926              		.global	get_trig_mode
ARM GAS  /tmp/cciWh9P3.s 			page 553


 20927              		.syntax unified
 20928              		.thumb
 20929              		.thumb_func
 20930              		.fpu fpv4-sp-d16
 20932              	get_trig_mode:
 20933              	.LFB210:
3845:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 20934              		.loc 1 3845 37 is_stmt 1 view -0
 20935              		.cfi_startproc
 20936              		@ args = 0, pretend = 0, frame = 0
 20937              		@ frame_needed = 0, uses_anonymous_args = 0
 20938              		@ link register save eliminated.
3846:src/xeq.c     **** 		return TRIG_RAD;
 20939              		.loc 1 3846 2 view .LVU5450
3846:src/xeq.c     **** 		return TRIG_RAD;
 20940              		.loc 1 3846 6 is_stmt 0 view .LVU5451
 20941 0000 084B     		ldr	r3, .L1491
 20942 0002 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
3846:src/xeq.c     **** 		return TRIG_RAD;
 20943              		.loc 1 3846 5 view .LVU5452
 20944 0004 9B07     		lsls	r3, r3, #30
 20945 0006 0AD4     		bmi	.L1490
3846:src/xeq.c     **** 		return TRIG_RAD;
 20946              		.loc 1 3846 19 discriminator 1 view .LVU5453
 20947 0008 074B     		ldr	r3, .L1491+4
 20948 000a 93F90130 		ldrsb	r3, [r3, #1]
 20949 000e 002B     		cmp	r3, #0
 20950 0010 05DB     		blt	.L1490
3849:src/xeq.c     **** }
 20951              		.loc 1 3849 2 is_stmt 1 view .LVU5454
3849:src/xeq.c     **** }
 20952              		.loc 1 3849 33 is_stmt 0 view .LVU5455
 20953 0012 064B     		ldr	r3, .L1491+8
 20954 0014 1B68     		ldr	r3, [r3]
 20955 0016 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
3849:src/xeq.c     **** }
 20956              		.loc 1 3849 9 view .LVU5456
 20957 001a 8009     		lsrs	r0, r0, #6
 20958 001c 7047     		bx	lr
 20959              	.L1490:
3847:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
 20960              		.loc 1 3847 10 view .LVU5457
 20961 001e 0120     		movs	r0, #1
3850:src/xeq.c     **** 
 20962              		.loc 1 3850 1 view .LVU5458
 20963 0020 7047     		bx	lr
 20964              	.L1492:
 20965 0022 00BF     		.align	2
 20966              	.L1491:
 20967 0024 00000000 		.word	StateWhileOn
 20968 0028 00000000 		.word	XromParams
 20969 002c 00000000 		.word	main_ram
 20970              		.cfi_endproc
 20971              	.LFE210:
 20973              		.section	.text.cmdpause,"ax",%progbits
 20974              		.align	1
 20975              		.p2align 2,,3
ARM GAS  /tmp/cciWh9P3.s 			page 554


 20976              		.global	cmdpause
 20977              		.syntax unified
 20978              		.thumb
 20979              		.thumb_func
 20980              		.fpu fpv4-sp-d16
 20982              	cmdpause:
 20983              	.LVL1637:
 20984              	.LFB212:
3895:src/xeq.c     **** 	display();
 20985              		.loc 1 3895 47 is_stmt 1 view -0
 20986              		.cfi_startproc
 20987              		@ args = 0, pretend = 0, frame = 0
 20988              		@ frame_needed = 0, uses_anonymous_args = 0
3896:src/xeq.c     **** #ifndef CONSOLE
 20989              		.loc 1 3896 2 view .LVU5460
3895:src/xeq.c     **** 	display();
 20990              		.loc 1 3895 47 is_stmt 0 view .LVU5461
 20991 0000 10B5     		push	{r4, lr}
 20992              		.cfi_def_cfa_offset 8
 20993              		.cfi_offset 4, -8
 20994              		.cfi_offset 14, -4
3895:src/xeq.c     **** 	display();
 20995              		.loc 1 3895 47 view .LVU5462
 20996 0002 0446     		mov	r4, r0
3896:src/xeq.c     **** #ifndef CONSOLE
 20997              		.loc 1 3896 2 view .LVU5463
 20998 0004 FFF7FEFF 		bl	display
 20999              	.LVL1638:
3899:src/xeq.c     **** 	GoFast = (arg == 0);
 21000              		.loc 1 3899 2 is_stmt 1 view .LVU5464
3899:src/xeq.c     **** 	GoFast = (arg == 0);
 21001              		.loc 1 3899 8 is_stmt 0 view .LVU5465
 21002 0008 044A     		ldr	r2, .L1495
3900:src/xeq.c     **** #elif (defined) DM42
 21003              		.loc 1 3900 9 view .LVU5466
 21004 000a 0549     		ldr	r1, .L1495+4
3900:src/xeq.c     **** #elif (defined) DM42
 21005              		.loc 1 3900 16 view .LVU5467
 21006 000c B4FA84F3 		clz	r3, r4
3899:src/xeq.c     **** 	GoFast = (arg == 0);
 21007              		.loc 1 3899 8 view .LVU5468
 21008 0010 E4B2     		uxtb	r4, r4
 21009              	.LVL1639:
3900:src/xeq.c     **** #elif (defined) DM42
 21010              		.loc 1 3900 16 view .LVU5469
 21011 0012 5B09     		lsrs	r3, r3, #5
3899:src/xeq.c     **** 	GoFast = (arg == 0);
 21012              		.loc 1 3899 8 view .LVU5470
 21013 0014 1470     		strb	r4, [r2]
3900:src/xeq.c     **** #elif (defined) DM42
 21014              		.loc 1 3900 2 is_stmt 1 view .LVU5471
3900:src/xeq.c     **** #elif (defined) DM42
 21015              		.loc 1 3900 9 is_stmt 0 view .LVU5472
 21016 0016 0B60     		str	r3, [r1]
3911:src/xeq.c     **** 
 21017              		.loc 1 3911 1 view .LVU5473
 21018 0018 10BD     		pop	{r4, pc}
ARM GAS  /tmp/cciWh9P3.s 			page 555


 21019              	.L1496:
 21020 001a 00BF     		.align	2
 21021              	.L1495:
 21022 001c 00000000 		.word	Pause
 21023 0020 00000000 		.word	GoFast
 21024              		.cfi_endproc
 21025              	.LFE212:
 21027              		.section	.text.op_setspeed,"ax",%progbits
 21028              		.align	1
 21029              		.p2align 2,,3
 21030              		.global	op_setspeed
 21031              		.syntax unified
 21032              		.thumb
 21033              		.thumb_func
 21034              		.fpu fpv4-sp-d16
 21036              	op_setspeed:
 21037              	.LVL1640:
 21038              	.LFB213:
3915:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
 21039              		.loc 1 3915 33 is_stmt 1 view -0
 21040              		.cfi_startproc
 21041              		@ args = 0, pretend = 0, frame = 0
 21042              		@ frame_needed = 0, uses_anonymous_args = 0
 21043              		@ link register save eliminated.
3916:src/xeq.c     **** 	update_speed(1);
 21044              		.loc 1 3916 2 view .LVU5475
3916:src/xeq.c     **** 	update_speed(1);
 21045              		.loc 1 3916 20 is_stmt 0 view .LVU5476
 21046 0000 064B     		ldr	r3, .L1498
 21047 0002 1B68     		ldr	r3, [r3]
3916:src/xeq.c     **** 	update_speed(1);
 21048              		.loc 1 3916 42 view .LVU5477
 21049 0004 A0F19A00 		sub	r0, #154
 21050              	.LVL1641:
3916:src/xeq.c     **** 	update_speed(1);
 21051              		.loc 1 3916 20 view .LVU5478
 21052 0008 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
3916:src/xeq.c     **** 	update_speed(1);
 21053              		.loc 1 3916 42 view .LVU5479
 21054 000c B0FA80F0 		clz	r0, r0
 21055 0010 4009     		lsrs	r0, r0, #5
3916:src/xeq.c     **** 	update_speed(1);
 21056              		.loc 1 3916 20 view .LVU5480
 21057 0012 60F3C302 		bfi	r2, r0, #3, #1
 21058 0016 83F8EB27 		strb	r2, [r3, #2027]
3917:src/xeq.c     **** }
 21059              		.loc 1 3917 17 is_stmt 1 view .LVU5481
3918:src/xeq.c     **** 
 21060              		.loc 1 3918 1 is_stmt 0 view .LVU5482
 21061 001a 7047     		bx	lr
 21062              	.L1499:
 21063              		.align	2
 21064              	.L1498:
 21065 001c 00000000 		.word	main_ram
 21066              		.cfi_endproc
 21067              	.LFE213:
 21069              		.section	.text.op_prompt,"ax",%progbits
ARM GAS  /tmp/cciWh9P3.s 			page 556


 21070              		.align	1
 21071              		.p2align 2,,3
 21072              		.global	op_prompt
 21073              		.syntax unified
 21074              		.thumb
 21075              		.thumb_func
 21076              		.fpu fpv4-sp-d16
 21078              	op_prompt:
 21079              	.LVL1642:
 21080              	.LFB214:
3921:src/xeq.c     **** 	set_running_off();
 21081              		.loc 1 3921 31 is_stmt 1 view -0
 21082              		.cfi_startproc
 21083              		@ args = 0, pretend = 0, frame = 0
 21084              		@ frame_needed = 0, uses_anonymous_args = 0
3922:src/xeq.c     **** 	alpha_view_common(regX_idx);
 21085              		.loc 1 3922 2 view .LVU5484
 21086              	.LBB3018:
 21087              	.LBI3018:
5573:src/xeq.c     **** 	set_running_off_sst();
 21088              		.loc 1 5573 6 view .LVU5485
 21089              	.LBB3019:
5574:src/xeq.c     **** 	State.entryp = 0;
 21090              		.loc 1 5574 2 view .LVU5486
 21091              	.LBB3020:
 21092              	.LBI3020:
5565:src/xeq.c     **** 	Running = 0;
 21093              		.loc 1 5565 6 view .LVU5487
 21094              	.LBB3021:
5566:src/xeq.c     **** }
 21095              		.loc 1 5566 2 view .LVU5488
 21096              	.LBE3021:
 21097              	.LBE3020:
 21098              	.LBE3019:
 21099              	.LBE3018:
3921:src/xeq.c     **** 	set_running_off();
 21100              		.loc 1 3921 31 is_stmt 0 view .LVU5489
 21101 0000 08B5     		push	{r3, lr}
 21102              		.cfi_def_cfa_offset 8
 21103              		.cfi_offset 3, -8
 21104              		.cfi_offset 14, -4
 21105              	.LBB3027:
 21106              	.LBB3026:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 21107              		.loc 1 5575 15 view .LVU5490
 21108 0002 094B     		ldr	r3, .L1502
 21109              	.LBB3024:
 21110              	.LBB3022:
5566:src/xeq.c     **** }
 21111              		.loc 1 5566 10 view .LVU5491
 21112 0004 094A     		ldr	r2, .L1502+4
 21113              	.LBE3022:
 21114              	.LBE3024:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 21115              		.loc 1 5575 15 view .LVU5492
 21116 0006 1B68     		ldr	r3, [r3]
 21117              	.LBB3025:
ARM GAS  /tmp/cciWh9P3.s 			page 557


 21118              	.LBB3023:
5566:src/xeq.c     **** }
 21119              		.loc 1 5566 10 view .LVU5493
 21120 0008 0021     		movs	r1, #0
 21121 000a 1160     		str	r1, [r2]
 21122              	.LBE3023:
 21123              	.LBE3025:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 21124              		.loc 1 5575 2 is_stmt 1 view .LVU5494
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 21125              		.loc 1 5575 15 is_stmt 0 view .LVU5495
 21126 000c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 21127 0010 61F30412 		bfi	r2, r1, #4, #1
 21128 0014 83F8DD27 		strb	r2, [r3, #2013]
 21129              		.loc 1 5576 2 is_stmt 1 view .LVU5496
 21130 0018 8A20     		movs	r0, #138
 21131              	.LVL1643:
 21132              		.loc 1 5576 2 is_stmt 0 view .LVU5497
 21133 001a FFF7FEFF 		bl	dot
 21134              	.LVL1644:
 21135              	.LBE3026:
 21136              	.LBE3027:
3923:src/xeq.c     **** }
 21137              		.loc 1 3923 2 is_stmt 1 view .LVU5498
3924:src/xeq.c     **** 
 21138              		.loc 1 3924 1 is_stmt 0 view .LVU5499
 21139 001e BDE80840 		pop	{r3, lr}
 21140              		.cfi_restore 14
 21141              		.cfi_restore 3
 21142              		.cfi_def_cfa_offset 0
3923:src/xeq.c     **** }
 21143              		.loc 1 3923 2 view .LVU5500
 21144 0022 6420     		movs	r0, #100
 21145 0024 FFF7FEBF 		b	alpha_view_common
 21146              	.LVL1645:
 21147              	.L1503:
 21148              		.align	2
 21149              	.L1502:
 21150 0028 00000000 		.word	main_ram
 21151 002c 00000000 		.word	Running
 21152              		.cfi_endproc
 21153              	.LFE214:
 21155              		.section	.text.XisInt,"ax",%progbits
 21156              		.align	1
 21157              		.p2align 2,,3
 21158              		.global	XisInt
 21159              		.syntax unified
 21160              		.thumb
 21161              		.thumb_func
 21162              		.fpu fpv4-sp-d16
 21164              	XisInt:
 21165              	.LVL1646:
 21166              	.LFB215:
3928:src/xeq.c     **** 	decNumber x;
 21167              		.loc 1 3928 28 is_stmt 1 view -0
 21168              		.cfi_startproc
 21169              		@ args = 0, pretend = 0, frame = 40
ARM GAS  /tmp/cciWh9P3.s 			page 558


 21170              		@ frame_needed = 0, uses_anonymous_args = 0
3929:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
 21171              		.loc 1 3929 2 view .LVU5502
3930:src/xeq.c     **** 	if ( is_intmode() )
 21172              		.loc 1 3930 2 view .LVU5503
3931:src/xeq.c     **** 		result = op_int;
 21173              		.loc 1 3931 7 is_stmt 0 view .LVU5504
 21174 0000 164B     		ldr	r3, .L1510
3928:src/xeq.c     **** 	decNumber x;
 21175              		.loc 1 3928 28 view .LVU5505
 21176 0002 30B5     		push	{r4, r5, lr}
 21177              		.cfi_def_cfa_offset 12
 21178              		.cfi_offset 4, -12
 21179              		.cfi_offset 5, -8
 21180              		.cfi_offset 14, -4
3931:src/xeq.c     **** 		result = op_int;
 21181              		.loc 1 3931 7 view .LVU5506
 21182 0004 1B68     		ldr	r3, [r3]
 21183 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3930:src/xeq.c     **** 	if ( is_intmode() )
 21184              		.loc 1 3930 27 view .LVU5507
 21185 000a A0F18704 		sub	r4, r0, #135
 21186 000e B4FA84F4 		clz	r4, r4
3931:src/xeq.c     **** 		result = op_int;
 21187              		.loc 1 3931 5 view .LVU5508
 21188 0012 13F00105 		ands	r5, r3, #1
3928:src/xeq.c     **** 	decNumber x;
 21189              		.loc 1 3928 28 view .LVU5509
 21190 0016 8BB0     		sub	sp, sp, #44
 21191              		.cfi_def_cfa_offset 56
3930:src/xeq.c     **** 	if ( is_intmode() )
 21192              		.loc 1 3930 27 view .LVU5510
 21193 0018 4FEA5414 		lsr	r4, r4, #5
 21194              	.LVL1647:
3931:src/xeq.c     **** 		result = op_int;
 21195              		.loc 1 3931 2 is_stmt 1 view .LVU5511
3931:src/xeq.c     **** 		result = op_int;
 21196              		.loc 1 3931 5 is_stmt 0 view .LVU5512
 21197 001c 04D0     		beq	.L1508
 21198              	.LVL1648:
3937:src/xeq.c     **** }
 21199              		.loc 1 3937 2 is_stmt 1 view .LVU5513
 21200 001e 2046     		mov	r0, r4
 21201              	.LVL1649:
3937:src/xeq.c     **** }
 21202              		.loc 1 3937 2 is_stmt 0 view .LVU5514
 21203 0020 FFF7FEFF 		bl	fin_tst
 21204              	.LVL1650:
3938:src/xeq.c     **** 
 21205              		.loc 1 3938 1 view .LVU5515
 21206 0024 0BB0     		add	sp, sp, #44
 21207              		.cfi_remember_state
 21208              		.cfi_def_cfa_offset 12
 21209              		@ sp needed
 21210 0026 30BD     		pop	{r4, r5, pc}
 21211              	.LVL1651:
 21212              	.L1508:
ARM GAS  /tmp/cciWh9P3.s 			page 559


 21213              		.cfi_restore_state
3933:src/xeq.c     **** 		result = 0;
 21214              		.loc 1 3933 7 is_stmt 1 view .LVU5516
 21215              	.LBB3028:
 21216              	.LBI3028:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21217              		.loc 1 804 12 view .LVU5517
 21218              	.LBB3029:
 805:src/xeq.c     **** }
 21219              		.loc 1 805 2 view .LVU5518
 805:src/xeq.c     **** }
 21220              		.loc 1 805 9 is_stmt 0 view .LVU5519
 21221 0028 01A8     		add	r0, sp, #4
 21222              	.LVL1652:
 805:src/xeq.c     **** }
 21223              		.loc 1 805 9 view .LVU5520
 21224 002a 6421     		movs	r1, #100
 21225 002c FFF7FEFF 		bl	getRegister
 21226              	.LVL1653:
 805:src/xeq.c     **** }
 21227              		.loc 1 805 9 view .LVU5521
 21228              	.LBE3029:
 21229              	.LBE3028:
3933:src/xeq.c     **** 		result = 0;
 21230              		.loc 1 3933 10 view .LVU5522
 21231 0030 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 21232 0032 13F0700F 		tst	r3, #112
 21233 0036 05D0     		beq	.L1509
3934:src/xeq.c     **** 	else
 21234              		.loc 1 3934 10 view .LVU5523
 21235 0038 2C46     		mov	r4, r5
 21236              	.LVL1654:
3937:src/xeq.c     **** }
 21237              		.loc 1 3937 2 is_stmt 1 view .LVU5524
 21238 003a 2046     		mov	r0, r4
 21239 003c FFF7FEFF 		bl	fin_tst
 21240              	.LVL1655:
3938:src/xeq.c     **** 
 21241              		.loc 1 3938 1 is_stmt 0 view .LVU5525
 21242 0040 0BB0     		add	sp, sp, #44
 21243              		.cfi_remember_state
 21244              		.cfi_def_cfa_offset 12
 21245              		@ sp needed
 21246 0042 30BD     		pop	{r4, r5, pc}
 21247              	.LVL1656:
 21248              	.L1509:
 21249              		.cfi_restore_state
3936:src/xeq.c     **** 	fin_tst(result);
 21250              		.loc 1 3936 10 is_stmt 1 view .LVU5526
3936:src/xeq.c     **** 	fin_tst(result);
 21251              		.loc 1 3936 20 is_stmt 0 view .LVU5527
 21252 0044 01A8     		add	r0, sp, #4
 21253 0046 FFF7FEFF 		bl	is_int
 21254              	.LVL1657:
3936:src/xeq.c     **** 	fin_tst(result);
 21255              		.loc 1 3936 31 view .LVU5528
 21256 004a 041B     		subs	r4, r0, r4
ARM GAS  /tmp/cciWh9P3.s 			page 560


 21257              	.LVL1658:
3936:src/xeq.c     **** 	fin_tst(result);
 21258              		.loc 1 3936 31 view .LVU5529
 21259 004c B4FA84F4 		clz	r4, r4
 21260 0050 6409     		lsrs	r4, r4, #5
 21261              	.LVL1659:
3937:src/xeq.c     **** }
 21262              		.loc 1 3937 2 is_stmt 1 view .LVU5530
 21263 0052 2046     		mov	r0, r4
 21264 0054 FFF7FEFF 		bl	fin_tst
 21265              	.LVL1660:
3938:src/xeq.c     **** 
 21266              		.loc 1 3938 1 is_stmt 0 view .LVU5531
 21267 0058 0BB0     		add	sp, sp, #44
 21268              		.cfi_def_cfa_offset 12
 21269              		@ sp needed
 21270 005a 30BD     		pop	{r4, r5, pc}
 21271              	.LVL1661:
 21272              	.L1511:
3938:src/xeq.c     **** 
 21273              		.loc 1 3938 1 view .LVU5532
 21274              		.align	2
 21275              	.L1510:
 21276 005c 00000000 		.word	main_ram
 21277              		.cfi_endproc
 21278              	.LFE215:
 21280              		.section	.text.XisEvenOrOdd,"ax",%progbits
 21281              		.align	1
 21282              		.p2align 2,,3
 21283              		.global	XisEvenOrOdd
 21284              		.syntax unified
 21285              		.thumb
 21286              		.thumb_func
 21287              		.fpu fpv4-sp-d16
 21289              	XisEvenOrOdd:
 21290              	.LVL1662:
 21291              	.LFB216:
3942:src/xeq.c     **** 	decNumber x;
 21292              		.loc 1 3942 34 is_stmt 1 view -0
 21293              		.cfi_startproc
 21294              		@ args = 0, pretend = 0, frame = 40
 21295              		@ frame_needed = 0, uses_anonymous_args = 0
3943:src/xeq.c     **** 	int odd = (op == OP_XisODD);
 21296              		.loc 1 3943 2 view .LVU5534
3944:src/xeq.c     **** 
 21297              		.loc 1 3944 2 view .LVU5535
3946:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21298              		.loc 1 3946 6 is_stmt 0 view .LVU5536
 21299 0000 174B     		ldr	r3, .L1516
3942:src/xeq.c     **** 	decNumber x;
 21300              		.loc 1 3942 34 view .LVU5537
 21301 0002 30B5     		push	{r4, r5, lr}
 21302              		.cfi_def_cfa_offset 12
 21303              		.cfi_offset 4, -12
 21304              		.cfi_offset 5, -8
 21305              		.cfi_offset 14, -4
3946:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
ARM GAS  /tmp/cciWh9P3.s 			page 561


 21306              		.loc 1 3946 6 view .LVU5538
 21307 0004 1B68     		ldr	r3, [r3]
 21308 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3946:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21309              		.loc 1 3946 5 view .LVU5539
 21310 000a DB07     		lsls	r3, r3, #31
3942:src/xeq.c     **** 	decNumber x;
 21311              		.loc 1 3942 34 view .LVU5540
 21312 000c 8BB0     		sub	sp, sp, #44
 21313              		.cfi_def_cfa_offset 56
3942:src/xeq.c     **** 	decNumber x;
 21314              		.loc 1 3942 34 view .LVU5541
 21315 000e 0446     		mov	r4, r0
 21316              	.LVL1663:
3946:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21317              		.loc 1 3946 2 is_stmt 1 view .LVU5542
3946:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 21318              		.loc 1 3946 5 is_stmt 0 view .LVU5543
 21319 0010 15D5     		bpl	.L1513
3947:src/xeq.c     **** 	} else {
 21320              		.loc 1 3947 3 is_stmt 1 view .LVU5544
 21321              	.LBB3030:
 21322              	.LBI3030:
1255:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 21323              		.loc 1 1255 15 view .LVU5545
 21324              	.LBB3031:
1256:src/xeq.c     **** }
 21325              		.loc 1 1256 2 view .LVU5546
1256:src/xeq.c     **** }
 21326              		.loc 1 1256 9 is_stmt 0 view .LVU5547
 21327 0012 6420     		movs	r0, #100
 21328              	.LVL1664:
1256:src/xeq.c     **** }
 21329              		.loc 1 1256 9 view .LVU5548
 21330 0014 FFF7FEFF 		bl	get_reg_n_int
 21331              	.LVL1665:
 21332              	.LBE3031:
 21333              	.LBE3030:
3944:src/xeq.c     **** 
 21334              		.loc 1 3944 16 view .LVU5549
 21335 0018 A4F18A04 		sub	r4, #138
 21336              	.LVL1666:
3947:src/xeq.c     **** 	} else {
 21337              		.loc 1 3947 23 view .LVU5550
 21338 001c 0023     		movs	r3, #0
3944:src/xeq.c     **** 
 21339              		.loc 1 3944 16 view .LVU5551
 21340 001e 0025     		movs	r5, #0
 21341 0020 B4FA84F4 		clz	r4, r4
3947:src/xeq.c     **** 	} else {
 21342              		.loc 1 3947 23 view .LVU5552
 21343 0024 00F00102 		and	r2, r0, #1
3947:src/xeq.c     **** 	} else {
 21344              		.loc 1 3947 3 view .LVU5553
 21345 0028 AB42     		cmp	r3, r5
3944:src/xeq.c     **** 
 21346              		.loc 1 3944 16 view .LVU5554
ARM GAS  /tmp/cciWh9P3.s 			page 562


 21347 002a 4FEA5414 		lsr	r4, r4, #5
3947:src/xeq.c     **** 	} else {
 21348              		.loc 1 3947 3 view .LVU5555
 21349 002e 06BF     		itte	eq
 21350 0030 A242     		cmpeq	r2, r4
 21351 0032 0120     		moveq	r0, #1
 21352 0034 1846     		movne	r0, r3
 21353 0036 FFF7FEFF 		bl	fin_tst
 21354              	.LVL1667:
3951:src/xeq.c     **** 
 21355              		.loc 1 3951 1 view .LVU5556
 21356 003a 0BB0     		add	sp, sp, #44
 21357              		.cfi_remember_state
 21358              		.cfi_def_cfa_offset 12
 21359              		@ sp needed
 21360 003c 30BD     		pop	{r4, r5, pc}
 21361              	.LVL1668:
 21362              	.L1513:
 21363              		.cfi_restore_state
3949:src/xeq.c     **** 	}
 21364              		.loc 1 3949 3 is_stmt 1 view .LVU5557
 21365              	.LBB3032:
 21366              	.LBI3032:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21367              		.loc 1 804 12 view .LVU5558
 21368              	.LBB3033:
 805:src/xeq.c     **** }
 21369              		.loc 1 805 2 view .LVU5559
 805:src/xeq.c     **** }
 21370              		.loc 1 805 9 is_stmt 0 view .LVU5560
 21371 003e 6421     		movs	r1, #100
 21372 0040 01A8     		add	r0, sp, #4
 21373              	.LVL1669:
 805:src/xeq.c     **** }
 21374              		.loc 1 805 9 view .LVU5561
 21375 0042 FFF7FEFF 		bl	getRegister
 21376              	.LVL1670:
 805:src/xeq.c     **** }
 21377              		.loc 1 805 9 view .LVU5562
 21378              	.LBE3033:
 21379              	.LBE3032:
3949:src/xeq.c     **** 	}
 21380              		.loc 1 3949 11 view .LVU5563
 21381 0046 FFF7FEFF 		bl	is_even
 21382              	.LVL1671:
3949:src/xeq.c     **** 	}
 21383              		.loc 1 3949 32 view .LVU5564
 21384 004a 8A3C     		subs	r4, r4, #138
 21385              	.LVL1672:
3949:src/xeq.c     **** 	}
 21386              		.loc 1 3949 32 view .LVU5565
 21387 004c 18BF     		it	ne
 21388 004e 0124     		movne	r4, #1
3949:src/xeq.c     **** 	}
 21389              		.loc 1 3949 3 view .LVU5566
 21390 0050 201A     		subs	r0, r4, r0
 21391 0052 B0FA80F0 		clz	r0, r0
ARM GAS  /tmp/cciWh9P3.s 			page 563


 21392 0056 4009     		lsrs	r0, r0, #5
 21393 0058 FFF7FEFF 		bl	fin_tst
 21394              	.LVL1673:
3951:src/xeq.c     **** 
 21395              		.loc 1 3951 1 view .LVU5567
 21396 005c 0BB0     		add	sp, sp, #44
 21397              		.cfi_def_cfa_offset 12
 21398              		@ sp needed
 21399 005e 30BD     		pop	{r4, r5, pc}
 21400              	.L1517:
 21401              		.align	2
 21402              	.L1516:
 21403 0060 00000000 		.word	main_ram
 21404              		.cfi_endproc
 21405              	.LFE216:
 21407              		.section	.text.XisPrime,"ax",%progbits
 21408              		.align	1
 21409              		.p2align 2,,3
 21410              		.global	XisPrime
 21411              		.syntax unified
 21412              		.thumb
 21413              		.thumb_func
 21414              		.fpu fpv4-sp-d16
 21416              	XisPrime:
 21417              	.LVL1674:
 21418              	.LFB217:
3955:src/xeq.c     **** 	unsigned long long int i;
 21419              		.loc 1 3955 30 is_stmt 1 view -0
 21420              		.cfi_startproc
 21421              		@ args = 0, pretend = 0, frame = 40
 21422              		@ frame_needed = 0, uses_anonymous_args = 0
3956:src/xeq.c     **** 	int sgn;
 21423              		.loc 1 3956 2 view .LVU5569
3957:src/xeq.c     **** 
 21424              		.loc 1 3957 2 view .LVU5570
3959:src/xeq.c     **** 	if (!is_intmode()) {
 21425              		.loc 1 3959 2 view .LVU5571
3955:src/xeq.c     **** 	unsigned long long int i;
 21426              		.loc 1 3955 30 is_stmt 0 view .LVU5572
 21427 0000 70B5     		push	{r4, r5, r6, lr}
 21428              		.cfi_def_cfa_offset 16
 21429              		.cfi_offset 4, -16
 21430              		.cfi_offset 5, -12
 21431              		.cfi_offset 6, -8
 21432              		.cfi_offset 14, -4
 21433 0002 8AB0     		sub	sp, sp, #40
 21434              		.cfi_def_cfa_offset 56
 21435              	.LVL1675:
 21436              	.LBB3034:
 21437              	.LBI3034:
1259:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 21438              		.loc 1 1259 24 is_stmt 1 view .LVU5573
 21439              	.LBB3035:
1260:src/xeq.c     **** }
 21440              		.loc 1 1260 2 view .LVU5574
1260:src/xeq.c     **** }
 21441              		.loc 1 1260 9 is_stmt 0 view .LVU5575
ARM GAS  /tmp/cciWh9P3.s 			page 564


 21442 0004 6946     		mov	r1, sp
 21443 0006 6420     		movs	r0, #100
 21444              	.LVL1676:
1260:src/xeq.c     **** }
 21445              		.loc 1 1260 9 view .LVU5576
 21446 0008 FFF7FEFF 		bl	get_reg_n_int_sgn
 21447              	.LVL1677:
 21448              	.LBE3035:
 21449              	.LBE3034:
3960:src/xeq.c     **** 		decNumber x;
 21450              		.loc 1 3960 6 view .LVU5577
 21451 000c 1B4B     		ldr	r3, .L1528
 21452 000e 1B68     		ldr	r3, [r3]
 21453 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3960:src/xeq.c     **** 		decNumber x;
 21454              		.loc 1 3960 5 view .LVU5578
 21455 0014 13F00104 		ands	r4, r3, #1
 21456              	.LBB3037:
 21457              	.LBB3036:
1260:src/xeq.c     **** }
 21458              		.loc 1 1260 9 view .LVU5579
 21459 0018 0646     		mov	r6, r0
 21460 001a 0D46     		mov	r5, r1
 21461              	.LVL1678:
1260:src/xeq.c     **** }
 21462              		.loc 1 1260 9 view .LVU5580
 21463              	.LBE3036:
 21464              	.LBE3037:
3960:src/xeq.c     **** 		decNumber x;
 21465              		.loc 1 3960 2 is_stmt 1 view .LVU5581
3960:src/xeq.c     **** 		decNumber x;
 21466              		.loc 1 3960 5 is_stmt 0 view .LVU5582
 21467 001c 11D0     		beq	.L1519
 21468 001e 009B     		ldr	r3, [sp]
 21469              	.LVL1679:
 21470              	.L1520:
3970:src/xeq.c     **** }
 21471              		.loc 1 3970 2 is_stmt 1 view .LVU5583
 21472 0020 23B1     		cbz	r3, .L1527
 21473              	.L1525:
3970:src/xeq.c     **** }
 21474              		.loc 1 3970 2 is_stmt 0 view .LVU5584
 21475 0022 0020     		movs	r0, #0
 21476 0024 FFF7FEFF 		bl	fin_tst
 21477              	.LVL1680:
3971:src/xeq.c     **** 
 21478              		.loc 1 3971 1 view .LVU5585
 21479 0028 0AB0     		add	sp, sp, #40
 21480              		.cfi_remember_state
 21481              		.cfi_def_cfa_offset 16
 21482              		@ sp needed
 21483 002a 70BD     		pop	{r4, r5, r6, pc}
 21484              	.L1527:
 21485              		.cfi_restore_state
3970:src/xeq.c     **** }
 21486              		.loc 1 3970 22 discriminator 1 view .LVU5586
 21487 002c 2946     		mov	r1, r5
ARM GAS  /tmp/cciWh9P3.s 			page 565


 21488 002e 3046     		mov	r0, r6
 21489 0030 FFF7FEFF 		bl	isPrime
 21490              	.LVL1681:
3970:src/xeq.c     **** }
 21491              		.loc 1 3970 2 discriminator 1 view .LVU5587
 21492 0034 0038     		subs	r0, r0, #0
 21493 0036 18BF     		it	ne
 21494 0038 0120     		movne	r0, #1
 21495 003a FFF7FEFF 		bl	fin_tst
 21496              	.LVL1682:
3971:src/xeq.c     **** 
 21497              		.loc 1 3971 1 discriminator 1 view .LVU5588
 21498 003e 0AB0     		add	sp, sp, #40
 21499              		.cfi_remember_state
 21500              		.cfi_def_cfa_offset 16
 21501              		@ sp needed
 21502 0040 70BD     		pop	{r4, r5, r6, pc}
 21503              	.LVL1683:
 21504              	.L1519:
 21505              		.cfi_restore_state
 21506              	.LBB3038:
3961:src/xeq.c     **** 
 21507              		.loc 1 3961 3 is_stmt 1 view .LVU5589
3963:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
 21508              		.loc 1 3963 3 view .LVU5590
 21509              	.LBB3039:
 21510              	.LBI3039:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21511              		.loc 1 804 12 view .LVU5591
 21512              	.LBB3040:
 805:src/xeq.c     **** }
 21513              		.loc 1 805 2 view .LVU5592
 805:src/xeq.c     **** }
 21514              		.loc 1 805 9 is_stmt 0 view .LVU5593
 21515 0042 01A8     		add	r0, sp, #4
 21516              	.LVL1684:
 805:src/xeq.c     **** }
 21517              		.loc 1 805 9 view .LVU5594
 21518 0044 6421     		movs	r1, #100
 21519 0046 FFF7FEFF 		bl	getRegister
 21520              	.LVL1685:
 805:src/xeq.c     **** }
 21521              		.loc 1 805 9 view .LVU5595
 21522              	.LBE3040:
 21523              	.LBE3039:
3964:src/xeq.c     **** 			sgn = 1; // not prime
 21524              		.loc 1 3964 3 is_stmt 1 view .LVU5596
3964:src/xeq.c     **** 			sgn = 1; // not prime
 21525              		.loc 1 3964 6 is_stmt 0 view .LVU5597
 21526 004a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 21527 004e 13F0700F 		tst	r3, #112
 21528 0052 06D0     		beq	.L1521
3965:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21529              		.loc 1 3965 4 is_stmt 1 view .LVU5598
3965:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21530              		.loc 1 3965 8 is_stmt 0 view .LVU5599
 21531 0054 0123     		movs	r3, #1
ARM GAS  /tmp/cciWh9P3.s 			page 566


 21532              	.LBE3038:
3970:src/xeq.c     **** }
 21533              		.loc 1 3970 2 view .LVU5600
 21534 0056 2046     		mov	r0, r4
 21535              	.LBB3041:
3965:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21536              		.loc 1 3965 8 view .LVU5601
 21537 0058 0093     		str	r3, [sp]
3965:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 21538              		.loc 1 3965 8 view .LVU5602
 21539              	.LBE3041:
3970:src/xeq.c     **** }
 21540              		.loc 1 3970 2 is_stmt 1 view .LVU5603
 21541 005a FFF7FEFF 		bl	fin_tst
 21542              	.LVL1686:
3971:src/xeq.c     **** 
 21543              		.loc 1 3971 1 is_stmt 0 view .LVU5604
 21544 005e 0AB0     		add	sp, sp, #40
 21545              		.cfi_remember_state
 21546              		.cfi_def_cfa_offset 16
 21547              		@ sp needed
 21548 0060 70BD     		pop	{r4, r5, r6, pc}
 21549              	.L1521:
 21550              		.cfi_restore_state
 21551              	.LBB3042:
3966:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 21552              		.loc 1 3966 8 is_stmt 1 view .LVU5605
3966:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 21553              		.loc 1 3966 12 is_stmt 0 view .LVU5606
 21554 0062 0749     		ldr	r1, .L1528+4
 21555 0064 01A8     		add	r0, sp, #4
 21556 0066 FFF7FEFF 		bl	dn_lt
 21557              	.LVL1687:
 21558 006a 009B     		ldr	r3, [sp]
3966:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 21559              		.loc 1 3966 11 view .LVU5607
 21560 006c 0028     		cmp	r0, #0
 21561 006e D7D1     		bne	.L1520
3968:src/xeq.c     **** 	}
 21562              		.loc 1 3968 4 is_stmt 1 view .LVU5608
 21563              	.LVL1688:
3968:src/xeq.c     **** 	}
 21564              		.loc 1 3968 6 is_stmt 0 view .LVU5609
 21565 0070 4FF0FF36 		mov	r6, #-1
 21566 0074 3546     		mov	r5, r6
3968:src/xeq.c     **** 	}
 21567              		.loc 1 3968 6 view .LVU5610
 21568              	.LBE3042:
3970:src/xeq.c     **** }
 21569              		.loc 1 3970 2 is_stmt 1 view .LVU5611
 21570 0076 002B     		cmp	r3, #0
 21571 0078 D3D1     		bne	.L1525
 21572 007a D7E7     		b	.L1527
 21573              	.L1529:
 21574              		.align	2
 21575              	.L1528:
 21576 007c 00000000 		.word	main_ram
ARM GAS  /tmp/cciWh9P3.s 			page 567


 21577 0080 00000000 		.word	const_2pow64
 21578              		.cfi_endproc
 21579              	.LFE217:
 21581              		.section	.text.isInfinite,"ax",%progbits
 21582              		.align	1
 21583              		.p2align 2,,3
 21584              		.global	isInfinite
 21585              		.syntax unified
 21586              		.thumb
 21587              		.thumb_func
 21588              		.fpu fpv4-sp-d16
 21590              	isInfinite:
 21591              	.LVL1689:
 21592              	.LFB218:
3975:src/xeq.c     **** 	decNumber x;
 21593              		.loc 1 3975 32 view -0
 21594              		.cfi_startproc
 21595              		@ args = 0, pretend = 0, frame = 40
 21596              		@ frame_needed = 0, uses_anonymous_args = 0
3976:src/xeq.c     **** 
 21597              		.loc 1 3976 2 view .LVU5613
3978:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
 21598              		.loc 1 3978 2 view .LVU5614
3975:src/xeq.c     **** 	decNumber x;
 21599              		.loc 1 3975 32 is_stmt 0 view .LVU5615
 21600 0000 00B5     		push	{lr}
 21601              		.cfi_def_cfa_offset 4
 21602              		.cfi_offset 14, -4
 21603 0002 8BB0     		sub	sp, sp, #44
 21604              		.cfi_def_cfa_offset 48
 21605              	.LVL1690:
 21606              	.LBB3043:
 21607              	.LBI3043:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21608              		.loc 1 804 12 is_stmt 1 view .LVU5616
 21609              	.LBB3044:
 805:src/xeq.c     **** }
 21610              		.loc 1 805 2 view .LVU5617
 805:src/xeq.c     **** }
 21611              		.loc 1 805 9 is_stmt 0 view .LVU5618
 21612 0004 6421     		movs	r1, #100
 21613 0006 01A8     		add	r0, sp, #4
 21614              	.LVL1691:
 805:src/xeq.c     **** }
 21615              		.loc 1 805 9 view .LVU5619
 21616 0008 FFF7FEFF 		bl	getRegister
 21617              	.LVL1692:
 805:src/xeq.c     **** }
 21618              		.loc 1 805 9 view .LVU5620
 21619              	.LBE3044:
 21620              	.LBE3043:
3979:src/xeq.c     **** }
 21621              		.loc 1 3979 2 is_stmt 1 view .LVU5621
3979:src/xeq.c     **** }
 21622              		.loc 1 3979 10 is_stmt 0 view .LVU5622
 21623 000c 074B     		ldr	r3, .L1534
 21624 000e 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 568


 21625 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3979:src/xeq.c     **** }
 21626              		.loc 1 3979 2 view .LVU5623
 21627 0014 DB07     		lsls	r3, r3, #31
 21628 0016 56BF     		itet	pl
 21629 0018 9DF80C00 		ldrbpl	r0, [sp, #12]	@ zero_extendqisi2
 21630 001c 0020     		movmi	r0, #0
 21631 001e C0F38010 		ubfxpl	r0, r0, #6, #1
 21632 0022 FFF7FEFF 		bl	fin_tst
 21633              	.LVL1693:
3980:src/xeq.c     **** 
 21634              		.loc 1 3980 1 view .LVU5624
 21635 0026 0BB0     		add	sp, sp, #44
 21636              		.cfi_def_cfa_offset 4
 21637              		@ sp needed
 21638 0028 5DF804FB 		ldr	pc, [sp], #4
 21639              	.L1535:
 21640              		.align	2
 21641              	.L1534:
 21642 002c 00000000 		.word	main_ram
 21643              		.cfi_endproc
 21644              	.LFE218:
 21646              		.section	.text.isNan,"ax",%progbits
 21647              		.align	1
 21648              		.p2align 2,,3
 21649              		.global	isNan
 21650              		.syntax unified
 21651              		.thumb
 21652              		.thumb_func
 21653              		.fpu fpv4-sp-d16
 21655              	isNan:
 21656              	.LVL1694:
 21657              	.LFB219:
3986:src/xeq.c     **** 	decNumber x;
 21658              		.loc 1 3986 27 is_stmt 1 view -0
 21659              		.cfi_startproc
 21660              		@ args = 0, pretend = 0, frame = 40
 21661              		@ frame_needed = 0, uses_anonymous_args = 0
3987:src/xeq.c     **** 
 21662              		.loc 1 3987 2 view .LVU5626
3989:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
 21663              		.loc 1 3989 2 view .LVU5627
3986:src/xeq.c     **** 	decNumber x;
 21664              		.loc 1 3986 27 is_stmt 0 view .LVU5628
 21665 0000 00B5     		push	{lr}
 21666              		.cfi_def_cfa_offset 4
 21667              		.cfi_offset 14, -4
 21668 0002 8BB0     		sub	sp, sp, #44
 21669              		.cfi_def_cfa_offset 48
 21670              	.LVL1695:
 21671              	.LBB3045:
 21672              	.LBI3045:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21673              		.loc 1 804 12 is_stmt 1 view .LVU5629
 21674              	.LBB3046:
 805:src/xeq.c     **** }
 21675              		.loc 1 805 2 view .LVU5630
ARM GAS  /tmp/cciWh9P3.s 			page 569


 805:src/xeq.c     **** }
 21676              		.loc 1 805 9 is_stmt 0 view .LVU5631
 21677 0004 6421     		movs	r1, #100
 21678 0006 01A8     		add	r0, sp, #4
 21679              	.LVL1696:
 805:src/xeq.c     **** }
 21680              		.loc 1 805 9 view .LVU5632
 21681 0008 FFF7FEFF 		bl	getRegister
 21682              	.LVL1697:
 805:src/xeq.c     **** }
 21683              		.loc 1 805 9 view .LVU5633
 21684              	.LBE3046:
 21685              	.LBE3045:
3990:src/xeq.c     **** }
 21686              		.loc 1 3990 2 is_stmt 1 view .LVU5634
3990:src/xeq.c     **** }
 21687              		.loc 1 3990 10 is_stmt 0 view .LVU5635
 21688 000c 0B4B     		ldr	r3, .L1540
 21689 000e 1B68     		ldr	r3, [r3]
 21690 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3990:src/xeq.c     **** }
 21691              		.loc 1 3990 2 view .LVU5636
 21692 0014 DB07     		lsls	r3, r3, #31
 21693 0016 0BD4     		bmi	.L1538
3990:src/xeq.c     **** }
 21694              		.loc 1 3990 2 discriminator 1 view .LVU5637
 21695 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 21696 001c 13F0300F 		tst	r3, #48
 21697 0020 14BF     		ite	ne
 21698 0022 0120     		movne	r0, #1
 21699 0024 0020     		moveq	r0, #0
 21700 0026 FFF7FEFF 		bl	fin_tst
 21701              	.LVL1698:
3991:src/xeq.c     **** 
 21702              		.loc 1 3991 1 discriminator 1 view .LVU5638
 21703 002a 0BB0     		add	sp, sp, #44
 21704              		.cfi_remember_state
 21705              		.cfi_def_cfa_offset 4
 21706              		@ sp needed
 21707 002c 5DF804FB 		ldr	pc, [sp], #4
 21708              	.L1538:
 21709              		.cfi_restore_state
3990:src/xeq.c     **** }
 21710              		.loc 1 3990 2 view .LVU5639
 21711 0030 0020     		movs	r0, #0
 21712 0032 FFF7FEFF 		bl	fin_tst
 21713              	.LVL1699:
3991:src/xeq.c     **** 
 21714              		.loc 1 3991 1 view .LVU5640
 21715 0036 0BB0     		add	sp, sp, #44
 21716              		.cfi_def_cfa_offset 4
 21717              		@ sp needed
 21718 0038 5DF804FB 		ldr	pc, [sp], #4
 21719              	.L1541:
 21720              		.align	2
 21721              	.L1540:
 21722 003c 00000000 		.word	main_ram
ARM GAS  /tmp/cciWh9P3.s 			page 570


 21723              		.cfi_endproc
 21724              	.LFE219:
 21726              		.section	.text.isSpecial,"ax",%progbits
 21727              		.align	1
 21728              		.p2align 2,,3
 21729              		.global	isSpecial
 21730              		.syntax unified
 21731              		.thumb
 21732              		.thumb_func
 21733              		.fpu fpv4-sp-d16
 21735              	isSpecial:
 21736              	.LVL1700:
 21737              	.LFB220:
3993:src/xeq.c     **** 	decNumber x;
 21738              		.loc 1 3993 31 is_stmt 1 view -0
 21739              		.cfi_startproc
 21740              		@ args = 0, pretend = 0, frame = 40
 21741              		@ frame_needed = 0, uses_anonymous_args = 0
3994:src/xeq.c     **** 
 21742              		.loc 1 3994 2 view .LVU5642
3996:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
 21743              		.loc 1 3996 2 view .LVU5643
3993:src/xeq.c     **** 	decNumber x;
 21744              		.loc 1 3993 31 is_stmt 0 view .LVU5644
 21745 0000 00B5     		push	{lr}
 21746              		.cfi_def_cfa_offset 4
 21747              		.cfi_offset 14, -4
 21748 0002 8BB0     		sub	sp, sp, #44
 21749              		.cfi_def_cfa_offset 48
 21750              	.LVL1701:
 21751              	.LBB3047:
 21752              	.LBI3047:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21753              		.loc 1 804 12 is_stmt 1 view .LVU5645
 21754              	.LBB3048:
 805:src/xeq.c     **** }
 21755              		.loc 1 805 2 view .LVU5646
 805:src/xeq.c     **** }
 21756              		.loc 1 805 9 is_stmt 0 view .LVU5647
 21757 0004 6421     		movs	r1, #100
 21758 0006 01A8     		add	r0, sp, #4
 21759              	.LVL1702:
 805:src/xeq.c     **** }
 21760              		.loc 1 805 9 view .LVU5648
 21761 0008 FFF7FEFF 		bl	getRegister
 21762              	.LVL1703:
 805:src/xeq.c     **** }
 21763              		.loc 1 805 9 view .LVU5649
 21764              	.LBE3048:
 21765              	.LBE3047:
3997:src/xeq.c     **** }
 21766              		.loc 1 3997 2 is_stmt 1 view .LVU5650
3997:src/xeq.c     **** }
 21767              		.loc 1 3997 10 is_stmt 0 view .LVU5651
 21768 000c 0B4B     		ldr	r3, .L1546
 21769 000e 1B68     		ldr	r3, [r3]
 21770 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
ARM GAS  /tmp/cciWh9P3.s 			page 571


3997:src/xeq.c     **** }
 21771              		.loc 1 3997 2 view .LVU5652
 21772 0014 DB07     		lsls	r3, r3, #31
 21773 0016 0BD4     		bmi	.L1544
3997:src/xeq.c     **** }
 21774              		.loc 1 3997 2 discriminator 1 view .LVU5653
 21775 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 21776 001c 13F0700F 		tst	r3, #112
 21777 0020 14BF     		ite	ne
 21778 0022 0120     		movne	r0, #1
 21779 0024 0020     		moveq	r0, #0
 21780 0026 FFF7FEFF 		bl	fin_tst
 21781              	.LVL1704:
3998:src/xeq.c     **** 
 21782              		.loc 1 3998 1 discriminator 1 view .LVU5654
 21783 002a 0BB0     		add	sp, sp, #44
 21784              		.cfi_remember_state
 21785              		.cfi_def_cfa_offset 4
 21786              		@ sp needed
 21787 002c 5DF804FB 		ldr	pc, [sp], #4
 21788              	.L1544:
 21789              		.cfi_restore_state
3997:src/xeq.c     **** }
 21790              		.loc 1 3997 2 view .LVU5655
 21791 0030 0020     		movs	r0, #0
 21792 0032 FFF7FEFF 		bl	fin_tst
 21793              	.LVL1705:
3998:src/xeq.c     **** 
 21794              		.loc 1 3998 1 view .LVU5656
 21795 0036 0BB0     		add	sp, sp, #44
 21796              		.cfi_def_cfa_offset 4
 21797              		@ sp needed
 21798 0038 5DF804FB 		ldr	pc, [sp], #4
 21799              	.L1547:
 21800              		.align	2
 21801              	.L1546:
 21802 003c 00000000 		.word	main_ram
 21803              		.cfi_endproc
 21804              	.LFE220:
 21806              		.section	.text.op_entryp,"ax",%progbits
 21807              		.align	1
 21808              		.p2align 2,,3
 21809              		.global	op_entryp
 21810              		.syntax unified
 21811              		.thumb
 21812              		.thumb_func
 21813              		.fpu fpv4-sp-d16
 21815              	op_entryp:
 21816              	.LVL1706:
 21817              	.LFB221:
4000:src/xeq.c     **** 	fin_tst(State.entryp);
 21818              		.loc 1 4000 31 is_stmt 1 view -0
 21819              		.cfi_startproc
 21820              		@ args = 0, pretend = 0, frame = 0
 21821              		@ frame_needed = 0, uses_anonymous_args = 0
 21822              		@ link register save eliminated.
4001:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 572


 21823              		.loc 1 4001 2 view .LVU5658
4001:src/xeq.c     **** }
 21824              		.loc 1 4001 15 is_stmt 0 view .LVU5659
 21825 0000 034B     		ldr	r3, .L1549
 21826 0002 1B68     		ldr	r3, [r3]
 21827 0004 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
 21828              	.LVL1707:
4001:src/xeq.c     **** }
 21829              		.loc 1 4001 2 view .LVU5660
 21830 0008 C0F30010 		ubfx	r0, r0, #4, #1
 21831 000c FFF7FEBF 		b	fin_tst
 21832              	.LVL1708:
 21833              	.L1550:
 21834              		.align	2
 21835              	.L1549:
 21836 0010 00000000 		.word	main_ram
 21837              		.cfi_endproc
 21838              	.LFE221:
 21840              		.section	.text.reg_decode,"ax",%progbits
 21841              		.align	1
 21842              		.p2align 2,,3
 21843              		.global	reg_decode
 21844              		.syntax unified
 21845              		.thumb
 21846              		.thumb_func
 21847              		.fpu fpv4-sp-d16
 21849              	reg_decode:
 21850              	.LVL1709:
 21851              	.LFB222:
4005:src/xeq.c     **** 	decNumber x, y;
 21852              		.loc 1 4005 51 is_stmt 1 view -0
 21853              		.cfi_startproc
 21854              		@ args = 0, pretend = 0, frame = 80
 21855              		@ frame_needed = 0, uses_anonymous_args = 0
4006:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
 21856              		.loc 1 4006 2 view .LVU5662
4007:src/xeq.c     **** 
 21857              		.loc 1 4007 2 view .LVU5663
4009:src/xeq.c     **** 		bad_mode_error();
 21858              		.loc 1 4009 2 view .LVU5664
4005:src/xeq.c     **** 	decNumber x, y;
 21859              		.loc 1 4005 51 is_stmt 0 view .LVU5665
 21860 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 21861              		.cfi_def_cfa_offset 36
 21862              		.cfi_offset 4, -36
 21863              		.cfi_offset 5, -32
 21864              		.cfi_offset 6, -28
 21865              		.cfi_offset 7, -24
 21866              		.cfi_offset 8, -20
 21867              		.cfi_offset 9, -16
 21868              		.cfi_offset 10, -12
 21869              		.cfi_offset 11, -8
 21870              		.cfi_offset 14, -4
4009:src/xeq.c     **** 		bad_mode_error();
 21871              		.loc 1 4009 6 view .LVU5666
 21872 0004 DFF82CA2 		ldr	r10, .L1603+28
 21873 0008 DAF80040 		ldr	r4, [r10]
ARM GAS  /tmp/cciWh9P3.s 			page 573


 21874 000c 94F8E847 		ldrb	r4, [r4, #2024]	@ zero_extendqisi2
4005:src/xeq.c     **** 	decNumber x, y;
 21875              		.loc 1 4005 51 view .LVU5667
 21876 0010 1F46     		mov	r7, r3
4009:src/xeq.c     **** 		bad_mode_error();
 21877              		.loc 1 4009 5 view .LVU5668
 21878 0012 14F00103 		ands	r3, r4, #1
 21879              	.LVL1710:
4005:src/xeq.c     **** 	decNumber x, y;
 21880              		.loc 1 4005 51 view .LVU5669
 21881 0016 95B0     		sub	sp, sp, #84
 21882              		.cfi_def_cfa_offset 120
4009:src/xeq.c     **** 		bad_mode_error();
 21883              		.loc 1 4009 5 view .LVU5670
 21884 0018 0CD0     		beq	.L1552
4010:src/xeq.c     **** 		return 1;
 21885              		.loc 1 4010 3 is_stmt 1 view .LVU5671
 21886              	.LBB3091:
 21887              	.LBI3091:
 565:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 21888              		.loc 1 565 6 view .LVU5672
 21889              	.LBE3091:
 566:src/xeq.c     **** }
 21890              		.loc 1 566 2 view .LVU5673
 21891              	.LVL1711:
 21892              	.LBB3102:
 21893              	.LBB3092:
 21894              	.LBI3092:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21895              		.loc 1 536 5 view .LVU5674
 21896              	.LBB3093:
 537:src/xeq.c     **** 		Error = e;
 21897              		.loc 1 537 2 view .LVU5675
 537:src/xeq.c     **** 		Error = e;
 21898              		.loc 1 537 12 is_stmt 0 view .LVU5676
 21899 001a 7F4B     		ldr	r3, .L1603
 537:src/xeq.c     **** 		Error = e;
 21900              		.loc 1 537 5 view .LVU5677
 21901 001c 1A68     		ldr	r2, [r3]
 21902              	.LVL1712:
 537:src/xeq.c     **** 		Error = e;
 21903              		.loc 1 537 5 view .LVU5678
 21904 001e 1AB1     		cbz	r2, .L1597
 21905              	.LVL1713:
 21906              	.L1580:
 537:src/xeq.c     **** 		Error = e;
 21907              		.loc 1 537 5 view .LVU5679
 21908              	.LBE3093:
 21909              	.LBE3092:
 21910              	.LBE3102:
4011:src/xeq.c     **** 	}
 21911              		.loc 1 4011 10 view .LVU5680
 21912 0020 0120     		movs	r0, #1
4083:src/xeq.c     **** 
 21913              		.loc 1 4083 1 view .LVU5681
 21914 0022 15B0     		add	sp, sp, #84
 21915              		.cfi_remember_state
ARM GAS  /tmp/cciWh9P3.s 			page 574


 21916              		.cfi_def_cfa_offset 36
 21917              		@ sp needed
 21918 0024 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 21919              	.LVL1714:
 21920              	.L1597:
 21921              		.cfi_restore_state
 21922              	.LBB3103:
 21923              	.LBB3100:
 21924              	.LBB3098:
 21925              	.LBB3094:
 21926              	.LBI3094:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21927              		.loc 1 536 5 is_stmt 1 view .LVU5682
 21928              	.LBB3095:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 21929              		.loc 1 538 3 view .LVU5683
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 21930              		.loc 1 538 9 is_stmt 0 view .LVU5684
 21931 0028 0D22     		movs	r2, #13
 21932              	.LBE3095:
 21933              	.LBE3094:
 21934              	.LBE3098:
 21935              	.LBE3100:
 21936              	.LBE3103:
4011:src/xeq.c     **** 	}
 21937              		.loc 1 4011 10 view .LVU5685
 21938 002a 0120     		movs	r0, #1
 21939              	.LVL1715:
 21940              	.LBB3104:
 21941              	.LBB3101:
 21942              	.LBB3099:
 21943              	.LBB3097:
 21944              	.LBB3096:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 21945              		.loc 1 538 9 view .LVU5686
 21946 002c 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 21947              		.loc 1 539 3 is_stmt 1 view .LVU5687
 21948              	.LBE3096:
 21949              	.LBE3097:
 21950              	.LBE3099:
 21951              	.LBE3101:
 21952              	.LBE3104:
4083:src/xeq.c     **** 
 21953              		.loc 1 4083 1 is_stmt 0 view .LVU5688
 21954 002e 15B0     		add	sp, sp, #84
 21955              		.cfi_remember_state
 21956              		.cfi_def_cfa_offset 36
 21957              		@ sp needed
 21958 0030 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 21959              	.LVL1716:
 21960              	.L1552:
 21961              		.cfi_restore_state
4083:src/xeq.c     **** 
 21962              		.loc 1 4083 1 view .LVU5689
 21963 0034 8346     		mov	fp, r0
 21964              	.LVL1717:
ARM GAS  /tmp/cciWh9P3.s 			page 575


4083:src/xeq.c     **** 
 21965              		.loc 1 4083 1 view .LVU5690
 21966 0036 8946     		mov	r9, r1
 21967              	.LVL1718:
 21968              	.LBB3105:
 21969              	.LBB3106:
 21970              	.LBB3107:
 21971              	.LBB3108:
 805:src/xeq.c     **** }
 21972              		.loc 1 805 9 view .LVU5691
 21973 0038 02A8     		add	r0, sp, #8
 21974              	.LVL1719:
 805:src/xeq.c     **** }
 21975              		.loc 1 805 9 view .LVU5692
 21976 003a 6421     		movs	r1, #100
 21977              	.LVL1720:
 805:src/xeq.c     **** }
 21978              		.loc 1 805 9 view .LVU5693
 21979 003c 0193     		str	r3, [sp, #4]
 21980 003e 9046     		mov	r8, r2
 21981              	.LVL1721:
 805:src/xeq.c     **** }
 21982              		.loc 1 805 9 view .LVU5694
 21983              	.LBE3108:
 21984              	.LBE3107:
 21985              	.LBE3106:
 21986              	.LBI3105:
4005:src/xeq.c     **** 	decNumber x, y;
 21987              		.loc 1 4005 5 is_stmt 1 view .LVU5695
 21988              	.LBB3188:
4013:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
 21989              		.loc 1 4013 2 view .LVU5696
 21990              	.LBB3110:
 21991              	.LBI3107:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 21992              		.loc 1 804 12 view .LVU5697
 21993              	.LBB3109:
 805:src/xeq.c     **** }
 21994              		.loc 1 805 2 view .LVU5698
 805:src/xeq.c     **** }
 21995              		.loc 1 805 9 is_stmt 0 view .LVU5699
 21996 0040 FFF7FEFF 		bl	getRegister
 21997              	.LVL1722:
 805:src/xeq.c     **** }
 21998              		.loc 1 805 9 view .LVU5700
 21999              	.LBE3109:
 22000              	.LBE3110:
4014:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
 22001              		.loc 1 4014 2 is_stmt 1 view .LVU5701
 22002 0044 0522     		movs	r2, #5
 22003 0046 02A9     		add	r1, sp, #8
 22004 0048 0BA8     		add	r0, sp, #44
 22005 004a FFF7FEFF 		bl	dn_mulpow10
 22006              	.LVL1723:
4015:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
 22007              		.loc 1 4015 2 view .LVU5702
 22008 004e 0BA9     		add	r1, sp, #44
ARM GAS  /tmp/cciWh9P3.s 			page 576


 22009 0050 02A8     		add	r0, sp, #8
 22010 0052 FFF7FEFF 		bl	decNumberTrunc
 22011              	.LVL1724:
4016:src/xeq.c     **** 
 22012              		.loc 1 4016 2 view .LVU5703
4016:src/xeq.c     **** 
 22013              		.loc 1 4016 9 is_stmt 0 view .LVU5704
 22014 0056 02A8     		add	r0, sp, #8
 22015 0058 FFF7FEFF 		bl	dn_to_int
 22016              	.LVL1725:
4018:src/xeq.c     **** 		if (!flash)
 22017              		.loc 1 4018 2 is_stmt 1 view .LVU5705
4018:src/xeq.c     **** 		if (!flash)
 22018              		.loc 1 4018 5 is_stmt 0 view .LVU5706
 22019 005c 041E     		subs	r4, r0, #0
 22020 005e 35DB     		blt	.L1554
 22021              	.LVL1726:
4026:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22022              		.loc 1 4026 2 is_stmt 1 view .LVU5707
4026:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22023              		.loc 1 4026 8 is_stmt 0 view .LVU5708
 22024 0060 6E4A     		ldr	r2, .L1603+4
4028:src/xeq.c     **** 	rsrc /= 100;			// sss
 22025              		.loc 1 4028 6 view .LVU5709
 22026 0062 6F4E     		ldr	r6, .L1603+8
4032:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22027              		.loc 1 4032 9 view .LVU5710
 22028 0064 6F48     		ldr	r0, .L1603+12
 22029              	.LVL1727:
4026:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22030              		.loc 1 4026 8 view .LVU5711
 22031 0066 82FB0432 		smull	r3, r2, r2, r4
 22032 006a E517     		asrs	r5, r4, #31
4027:src/xeq.c     **** 	num = rsrc % 100;		// nn
 22033              		.loc 1 4027 7 view .LVU5712
 22034 006c C5EBA211 		rsb	r1, r5, r2, asr #6
4028:src/xeq.c     **** 	rsrc /= 100;			// sss
 22035              		.loc 1 4028 6 view .LVU5713
 22036 0070 A6FB0136 		umull	r3, r6, r6, r1
4026:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22037              		.loc 1 4026 8 view .LVU5714
 22038 0074 4FF47A77 		mov	r7, #1000
 22039              	.LVL1728:
4028:src/xeq.c     **** 	rsrc /= 100;			// sss
 22040              		.loc 1 4028 6 view .LVU5715
 22041 0078 7209     		lsrs	r2, r6, #5
4026:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22042              		.loc 1 4026 8 view .LVU5716
 22043 007a 07FB1145 		mls	r5, r7, r1, r4
 22044              	.LVL1729:
4027:src/xeq.c     **** 	num = rsrc % 100;		// nn
 22045              		.loc 1 4027 2 is_stmt 1 view .LVU5717
4028:src/xeq.c     **** 	rsrc /= 100;			// sss
 22046              		.loc 1 4028 2 view .LVU5718
4032:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22047              		.loc 1 4032 9 is_stmt 0 view .LVU5719
 22048 007e 8442     		cmp	r4, r0
ARM GAS  /tmp/cciWh9P3.s 			page 577


4028:src/xeq.c     **** 	rsrc /= 100;			// sss
 22049              		.loc 1 4028 6 view .LVU5720
 22050 0080 4FF06407 		mov	r7, #100
4029:src/xeq.c     **** 
 22051              		.loc 1 4029 7 view .LVU5721
 22052 0084 1646     		mov	r6, r2
4028:src/xeq.c     **** 	rsrc /= 100;			// sss
 22053              		.loc 1 4028 6 view .LVU5722
 22054 0086 07FB1212 		mls	r2, r7, r2, r1
 22055              	.LVL1730:
4029:src/xeq.c     **** 
 22056              		.loc 1 4029 2 is_stmt 1 view .LVU5723
4031:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 22057              		.loc 1 4031 2 view .LVU5724
4032:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22058              		.loc 1 4032 9 is_stmt 0 view .LVU5725
 22059 008a 59DA     		bge	.L1555
 22060 008c 6649     		ldr	r1, .L1603+16
 22061 008e 019B     		ldr	r3, [sp, #4]
 22062 0090 8C42     		cmp	r4, r1
 22063 0092 7ADA     		bge	.L1582
 22064              	.LBB3111:
 22065              	.LBI3111:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 22066              		.loc 1 249 14 is_stmt 1 view .LVU5726
 22067              	.LBE3111:
 22068              	.LBE3188:
 22069              	.LBE3105:
 250:src/xeq.c     **** }
 22070              		.loc 1 250 2 view .LVU5727
 22071              	.LVL1731:
 22072              	.LBB3195:
 22073              	.LBB3189:
 22074              	.LBB3117:
 22075              	.LBB3112:
 22076              	.LBI3112:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 22077              		.loc 1 237 14 view .LVU5728
 22078              	.LBB3113:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22079              		.loc 1 238 2 view .LVU5729
 22080              	.LBB3114:
 22081              	.LBI3114:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22082              		.loc 1 931 5 view .LVU5730
 22083              	.LBB3115:
 932:src/xeq.c     **** }
 22084              		.loc 1 932 2 view .LVU5731
 932:src/xeq.c     **** }
 22085              		.loc 1 932 12 is_stmt 0 view .LVU5732
 22086 0094 DAF80010 		ldr	r1, [r10]
 932:src/xeq.c     **** }
 22087              		.loc 1 932 24 view .LVU5733
 22088 0098 B1F8E807 		ldrh	r0, [r1, #2024]
 22089 009c 44F20103 		movw	r3, #16385
 22090              	.LBE3115:
 22091              	.LBE3114:
ARM GAS  /tmp/cciWh9P3.s 			page 578


 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22092              		.loc 1 238 5 view .LVU5734
 22093 00a0 0340     		ands	r3, r3, r0
 22094 00a2 B3F5804F 		cmp	r3, #16384
 22095              	.LBB3116:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22096              		.loc 1 239 24 view .LVU5735
 22097 00a6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22098              		.loc 1 239 3 is_stmt 1 view .LVU5736
 240:src/xeq.c     **** 	}
 22099              		.loc 1 240 3 view .LVU5737
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22100              		.loc 1 239 13 is_stmt 0 view .LVU5738
 22101 00aa 04BF     		itt	eq
 22102 00ac 0C3B     		subeq	r3, r3, #12
 240:src/xeq.c     **** 	}
 22103              		.loc 1 240 67 view .LVU5739
 22104 00ae 5B10     		asreq	r3, r3, #1
 22105              	.LVL1732:
 22106              	.L1561:
 240:src/xeq.c     **** 	}
 22107              		.loc 1 240 67 view .LVU5740
 22108              	.LBE3116:
 22109              	.LBE3113:
 22110              	.LBE3112:
 22111              	.LBE3117:
4035:src/xeq.c     **** 		goto range_error;
 22112              		.loc 1 4035 5 view .LVU5741
 22113 00b0 B342     		cmp	r3, r6
 22114 00b2 4FF00007 		mov	r7, #0
 22115              	.LVL1733:
4035:src/xeq.c     **** 		goto range_error;
 22116              		.loc 1 4035 2 is_stmt 1 view .LVU5742
4035:src/xeq.c     **** 		goto range_error;
 22117              		.loc 1 4035 5 is_stmt 0 view .LVU5743
 22118 00b6 22DC     		bgt	.L1598
 22119              	.LVL1734:
 22120              	.L1557:
 22121              	.LDL2:
4081:src/xeq.c     **** 	return 1;
 22122              		.loc 1 4081 2 is_stmt 1 view .LVU5744
 22123              	.LBB3118:
 22124              	.LBI3118:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22125              		.loc 1 536 5 view .LVU5745
 22126              	.LBB3119:
 537:src/xeq.c     **** 		Error = e;
 22127              		.loc 1 537 2 view .LVU5746
 537:src/xeq.c     **** 		Error = e;
 22128              		.loc 1 537 12 is_stmt 0 view .LVU5747
 22129 00b8 574B     		ldr	r3, .L1603
 537:src/xeq.c     **** 		Error = e;
 22130              		.loc 1 537 5 view .LVU5748
 22131 00ba 1A68     		ldr	r2, [r3]
 22132 00bc 002A     		cmp	r2, #0
 22133 00be AFD1     		bne	.L1580
ARM GAS  /tmp/cciWh9P3.s 			page 579


 22134              	.LVL1735:
 22135              	.LBB3120:
 22136              	.LBI3120:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22137              		.loc 1 536 5 is_stmt 1 view .LVU5749
 22138              	.LBB3121:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 22139              		.loc 1 538 3 view .LVU5750
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 22140              		.loc 1 538 9 is_stmt 0 view .LVU5751
 22141 00c0 0822     		movs	r2, #8
 22142              	.LBE3121:
 22143              	.LBE3120:
 22144              	.LBE3119:
 22145              	.LBE3118:
4082:src/xeq.c     **** }
 22146              		.loc 1 4082 9 view .LVU5752
 22147 00c2 0120     		movs	r0, #1
 22148              	.LBB3125:
 22149              	.LBB3124:
 22150              	.LBB3123:
 22151              	.LBB3122:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 22152              		.loc 1 538 9 view .LVU5753
 22153 00c4 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 22154              		.loc 1 539 3 is_stmt 1 view .LVU5754
 22155              	.LBE3122:
 22156              	.LBE3123:
 22157              	.LBE3124:
 22158              	.LBE3125:
 22159              	.LBE3189:
 22160              	.LBE3195:
4083:src/xeq.c     **** 
 22161              		.loc 1 4083 1 is_stmt 0 view .LVU5755
 22162 00c6 15B0     		add	sp, sp, #84
 22163              		.cfi_remember_state
 22164              		.cfi_def_cfa_offset 36
 22165              		@ sp needed
 22166 00c8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 22167              	.LVL1736:
 22168              	.L1554:
 22169              		.cfi_restore_state
 22170              	.LBB3196:
 22171              	.LBB3190:
4019:src/xeq.c     **** 			goto range_error;
 22172              		.loc 1 4019 3 is_stmt 1 view .LVU5756
4019:src/xeq.c     **** 			goto range_error;
 22173              		.loc 1 4019 6 is_stmt 0 view .LVU5757
 22174 00cc 002F     		cmp	r7, #0
 22175 00ce F3D0     		beq	.L1557
4021:src/xeq.c     **** 	}
 22176              		.loc 1 4021 3 is_stmt 1 view .LVU5758
4026:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22177              		.loc 1 4026 8 is_stmt 0 view .LVU5759
 22178 00d0 524D     		ldr	r5, .L1603+4
4031:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
ARM GAS  /tmp/cciWh9P3.s 			page 580


 22179              		.loc 1 4031 30 view .LVU5760
 22180 00d2 564A     		ldr	r2, .L1603+20
4028:src/xeq.c     **** 	rsrc /= 100;			// sss
 22181              		.loc 1 4028 6 view .LVU5761
 22182 00d4 524E     		ldr	r6, .L1603+8
4021:src/xeq.c     **** 	}
 22183              		.loc 1 4021 8 view .LVU5762
 22184 00d6 6442     		rsbs	r4, r4, #0
 22185              	.LVL1737:
4026:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22186              		.loc 1 4026 2 is_stmt 1 view .LVU5763
4026:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22187              		.loc 1 4026 8 is_stmt 0 view .LVU5764
 22188 00d8 A5FB0435 		umull	r3, r5, r5, r4
4027:src/xeq.c     **** 	num = rsrc % 100;		// nn
 22189              		.loc 1 4027 7 view .LVU5765
 22190 00dc AB09     		lsrs	r3, r5, #6
4028:src/xeq.c     **** 	rsrc /= 100;			// sss
 22191              		.loc 1 4028 6 view .LVU5766
 22192 00de A6FB0316 		umull	r1, r6, r6, r3
4026:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22193              		.loc 1 4026 8 view .LVU5767
 22194 00e2 4FF47A70 		mov	r0, #1000
4031:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 22195              		.loc 1 4031 30 view .LVU5768
 22196 00e6 1168     		ldr	r1, [r2]
4026:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 22197              		.loc 1 4026 8 view .LVU5769
 22198 00e8 00FB1345 		mls	r5, r0, r3, r4
 22199              	.LVL1738:
4027:src/xeq.c     **** 	num = rsrc % 100;		// nn
 22200              		.loc 1 4027 2 is_stmt 1 view .LVU5770
4028:src/xeq.c     **** 	rsrc /= 100;			// sss
 22201              		.loc 1 4028 2 view .LVU5771
4028:src/xeq.c     **** 	rsrc /= 100;			// sss
 22202              		.loc 1 4028 6 is_stmt 0 view .LVU5772
 22203 00ec 7209     		lsrs	r2, r6, #5
 22204 00ee 6420     		movs	r0, #100
4029:src/xeq.c     **** 
 22205              		.loc 1 4029 7 view .LVU5773
 22206 00f0 1646     		mov	r6, r2
4028:src/xeq.c     **** 	rsrc /= 100;			// sss
 22207              		.loc 1 4028 6 view .LVU5774
 22208 00f2 00FB1232 		mls	r2, r0, r2, r3
 22209              	.LVL1739:
4029:src/xeq.c     **** 
 22210              		.loc 1 4029 2 is_stmt 1 view .LVU5775
4031:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 22211              		.loc 1 4031 2 view .LVU5776
4032:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22212              		.loc 1 4032 9 is_stmt 0 view .LVU5777
 22213 00f6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 22214              	.LVL1740:
 22215              	.L1558:
4035:src/xeq.c     **** 		goto range_error;
 22216              		.loc 1 4035 2 is_stmt 1 view .LVU5778
4035:src/xeq.c     **** 		goto range_error;
ARM GAS  /tmp/cciWh9P3.s 			page 581


 22217              		.loc 1 4035 5 is_stmt 0 view .LVU5779
 22218 00fa B342     		cmp	r3, r6
 22219 00fc DCDD     		ble	.L1557
 22220              	.L1598:
4038:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 22221              		.loc 1 4038 2 is_stmt 1 view .LVU5780
4038:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 22222              		.loc 1 4038 5 is_stmt 0 view .LVU5781
 22223 00fe B8F1000F 		cmp	r8, #0
 22224 0102 25D0     		beq	.L1562
4039:src/xeq.c     **** 
 22225              		.loc 1 4039 3 is_stmt 1 view .LVU5782
4039:src/xeq.c     **** 
 22226              		.loc 1 4039 52 is_stmt 0 view .LVU5783
 22227 0104 6F2D     		cmp	r5, #111
 22228 0106 27DD     		ble	.L1563
 22229              	.LBB3126:
 22230              	.LBI3126:
 229:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 22231              		.loc 1 229 5 is_stmt 1 view .LVU5784
 22232              	.LBE3126:
 22233              	.LBE3190:
 22234              	.LBE3196:
 230:src/xeq.c     **** }
 22235              		.loc 1 230 2 view .LVU5785
 22236              	.LVL1741:
 22237              	.LBB3197:
 22238              	.LBB3191:
 22239              	.LBB3151:
 22240              	.LBB3127:
 22241              	.LBI3127:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 22242              		.loc 1 221 5 view .LVU5786
 22243              	.LBB3128:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22244              		.loc 1 222 2 view .LVU5787
 22245              	.LBB3129:
 22246              	.LBI3129:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22247              		.loc 1 931 5 view .LVU5788
 22248              	.LBB3130:
 932:src/xeq.c     **** }
 22249              		.loc 1 932 2 view .LVU5789
 932:src/xeq.c     **** }
 22250              		.loc 1 932 12 is_stmt 0 view .LVU5790
 22251 0108 DAF80010 		ldr	r1, [r10]
 22252              	.LVL1742:
 932:src/xeq.c     **** }
 22253              		.loc 1 932 12 view .LVU5791
 22254              	.LBE3130:
 22255              	.LBE3129:
 223:src/xeq.c     **** }
 22256              		.loc 1 223 2 is_stmt 1 view .LVU5792
 22257              	.LBB3133:
 22258              	.LBI3133:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 22259              		.loc 1 213 5 view .LVU5793
ARM GAS  /tmp/cciWh9P3.s 			page 582


 22260              	.LBB3134:
 214:src/xeq.c     **** }
 22261              		.loc 1 214 2 view .LVU5794
 214:src/xeq.c     **** }
 22262              		.loc 1 214 9 is_stmt 0 view .LVU5795
 22263 010c B1F9DE07 		ldrsh	r0, [r1, #2014]
 214:src/xeq.c     **** }
 22264              		.loc 1 214 57 view .LVU5796
 22265 0110 0028     		cmp	r0, #0
 22266 0112 69DB     		blt	.L1599
 22267              	.LVL1743:
 214:src/xeq.c     **** }
 22268              		.loc 1 214 57 view .LVU5797
 22269              	.LBE3134:
 22270              	.LBE3133:
 22271              	.LBE3128:
 22272              	.LBE3127:
 22273              	.LBE3151:
4041:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22274              		.loc 1 4041 3 is_stmt 1 view .LVU5798
 22275              	.LBB3152:
 22276              	.LBB3149:
 22277              	.LBB3147:
 22278              	.LBB3140:
 22279              	.LBB3135:
 22280 0114 0021     		movs	r1, #0
 22281              	.LVL1744:
4041:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22282              		.loc 1 4041 3 is_stmt 0 view .LVU5799
 22283              	.LBE3135:
 22284              	.LBE3140:
 22285              	.LBE3147:
 22286              	.LBE3149:
 22287              	.LBE3152:
4041:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22288              		.loc 1 4041 6 view .LVU5800
 22289 0116 82B3     		cbz	r2, .L1565
 22290              	.LVL1745:
 22291              	.L1566:
4060:src/xeq.c     **** 		if (rdest + num > mx_dest)
 22292              		.loc 1 4060 4 is_stmt 1 view .LVU5801
4060:src/xeq.c     **** 		if (rdest + num > mx_dest)
 22293              		.loc 1 4060 12 is_stmt 0 view .LVU5802
 22294 0118 7031     		adds	r1, r1, #112
 22295              	.LVL1746:
 22296              	.L1569:
4061:src/xeq.c     **** 			goto range_error;
 22297              		.loc 1 4061 3 is_stmt 1 view .LVU5803
4061:src/xeq.c     **** 			goto range_error;
 22298              		.loc 1 4061 13 is_stmt 0 view .LVU5804
 22299 011a A818     		adds	r0, r5, r2
4061:src/xeq.c     **** 			goto range_error;
 22300              		.loc 1 4061 6 view .LVU5805
 22301 011c 8842     		cmp	r0, r1
 22302 011e CBDC     		bgt	.L1557
4064:src/xeq.c     **** 	}
 22303              		.loc 1 4064 3 is_stmt 1 view .LVU5806
ARM GAS  /tmp/cciWh9P3.s 			page 583


4064:src/xeq.c     **** 	}
 22304              		.loc 1 4064 6 is_stmt 0 view .LVU5807
 22305 0120 C8F80050 		str	r5, [r8]
 22306 0124 B118     		adds	r1, r6, r2
 22307              	.LVL1747:
 22308              	.L1575:
4071:src/xeq.c     **** 		goto range_error;
 22309              		.loc 1 4071 2 is_stmt 1 view .LVU5808
4071:src/xeq.c     **** 		goto range_error;
 22310              		.loc 1 4071 5 is_stmt 0 view .LVU5809
 22311 0126 8B42     		cmp	r3, r1
 22312 0128 C6DB     		blt	.L1557
 22313              	.L1577:
4075:src/xeq.c     **** 	*n = num;
 22314              		.loc 1 4075 2 is_stmt 1 view .LVU5810
4075:src/xeq.c     **** 	*n = num;
 22315              		.loc 1 4075 37 is_stmt 0 view .LVU5811
 22316 012a 0FB1     		cbz	r7, .L1578
4075:src/xeq.c     **** 	*n = num;
 22317              		.loc 1 4075 37 view .LVU5812
 22318 012c 06F57A76 		add	r6, r6, #1000
 22319              	.LVL1748:
 22320              	.L1578:
4078:src/xeq.c     **** 
 22321              		.loc 1 4078 9 view .LVU5813
 22322 0130 0020     		movs	r0, #0
4075:src/xeq.c     **** 	*n = num;
 22323              		.loc 1 4075 5 view .LVU5814
 22324 0132 CBF80060 		str	r6, [fp]
4076:src/xeq.c     **** 
 22325              		.loc 1 4076 2 is_stmt 1 view .LVU5815
4076:src/xeq.c     **** 
 22326              		.loc 1 4076 5 is_stmt 0 view .LVU5816
 22327 0136 C9F80020 		str	r2, [r9]
4078:src/xeq.c     **** 
 22328              		.loc 1 4078 2 is_stmt 1 view .LVU5817
 22329              	.LBE3191:
 22330              	.LBE3197:
4083:src/xeq.c     **** 
 22331              		.loc 1 4083 1 is_stmt 0 view .LVU5818
 22332 013a 15B0     		add	sp, sp, #84
 22333              		.cfi_remember_state
 22334              		.cfi_def_cfa_offset 36
 22335              		@ sp needed
 22336 013c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 22337              	.LVL1749:
 22338              	.L1555:
 22339              		.cfi_restore_state
 22340              	.LBB3198:
 22341              	.LBB3192:
 22342              	.LBB3153:
 22343              	.LBI3153:
 229:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 22344              		.loc 1 229 5 is_stmt 1 view .LVU5819
 22345              	.LBE3153:
 22346              	.LBE3192:
 22347              	.LBE3198:
ARM GAS  /tmp/cciWh9P3.s 			page 584


 230:src/xeq.c     **** }
 22348              		.loc 1 230 2 view .LVU5820
 22349              	.LBB3199:
 22350              	.LBB3193:
 22351              	.LBB3174:
 22352              	.LBB3154:
 22353              	.LBI3154:
 221:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 22354              		.loc 1 221 5 view .LVU5821
 22355              	.LBB3155:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22356              		.loc 1 222 2 view .LVU5822
 22357              	.LBB3156:
 22358              	.LBI3156:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22359              		.loc 1 931 5 view .LVU5823
 22360              	.LBB3157:
 932:src/xeq.c     **** }
 22361              		.loc 1 932 2 view .LVU5824
 932:src/xeq.c     **** }
 22362              		.loc 1 932 12 is_stmt 0 view .LVU5825
 22363 0140 DAF80030 		ldr	r3, [r10]
 22364              	.LVL1750:
 932:src/xeq.c     **** }
 22365              		.loc 1 932 12 view .LVU5826
 22366              	.LBE3157:
 22367              	.LBE3156:
 223:src/xeq.c     **** }
 22368              		.loc 1 223 2 is_stmt 1 view .LVU5827
 22369              	.LBB3160:
 22370              	.LBI3160:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 22371              		.loc 1 213 5 view .LVU5828
 22372              	.LBB3161:
 214:src/xeq.c     **** }
 22373              		.loc 1 214 2 view .LVU5829
 214:src/xeq.c     **** }
 22374              		.loc 1 214 9 is_stmt 0 view .LVU5830
 22375 0144 B3F9DE17 		ldrsh	r1, [r3, #2014]
 214:src/xeq.c     **** }
 22376              		.loc 1 214 57 view .LVU5831
 22377 0148 0029     		cmp	r1, #0
 22378 014a 38DB     		blt	.L1600
 22379 014c 7023     		movs	r3, #112
 22380              	.LVL1751:
 214:src/xeq.c     **** }
 22381              		.loc 1 214 57 view .LVU5832
 22382 014e AFE7     		b	.L1561
 22383              	.LVL1752:
 22384              	.L1562:
 214:src/xeq.c     **** }
 22385              		.loc 1 214 57 view .LVU5833
 22386              	.LBE3161:
 22387              	.LBE3160:
 22388              	.LBE3155:
 22389              	.LBE3154:
 22390              	.LBE3174:
ARM GAS  /tmp/cciWh9P3.s 			page 585


4067:src/xeq.c     **** 			num = mx_src - rsrc;
 22391              		.loc 1 4067 3 is_stmt 1 view .LVU5834
4067:src/xeq.c     **** 			num = mx_src - rsrc;
 22392              		.loc 1 4067 6 is_stmt 0 view .LVU5835
 22393 0150 002A     		cmp	r2, #0
 22394 0152 32D1     		bne	.L1601
4068:src/xeq.c     **** 		}
 22395              		.loc 1 4068 4 is_stmt 1 view .LVU5836
4068:src/xeq.c     **** 		}
 22396              		.loc 1 4068 8 is_stmt 0 view .LVU5837
 22397 0154 9A1B     		subs	r2, r3, r6
 22398              	.LVL1753:
4071:src/xeq.c     **** 		goto range_error;
 22399              		.loc 1 4071 2 is_stmt 1 view .LVU5838
 22400 0156 E8E7     		b	.L1577
 22401              	.L1563:
 22402              	.LBB3175:
 22403              	.LBI3175:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 22404              		.loc 1 249 14 view .LVU5839
 22405              	.LBE3175:
 22406              	.LBE3193:
 22407              	.LBE3199:
 250:src/xeq.c     **** }
 22408              		.loc 1 250 2 view .LVU5840
 22409              	.LVL1754:
 22410              	.LBB3200:
 22411              	.LBB3194:
 22412              	.LBB3184:
 22413              	.LBB3176:
 22414              	.LBI3176:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 22415              		.loc 1 237 14 view .LVU5841
 22416              	.LBB3177:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22417              		.loc 1 238 2 view .LVU5842
 22418              	.LBB3178:
 22419              	.LBI3178:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22420              		.loc 1 931 5 view .LVU5843
 22421              	.LBB3179:
 932:src/xeq.c     **** }
 22422              		.loc 1 932 2 view .LVU5844
 932:src/xeq.c     **** }
 22423              		.loc 1 932 12 is_stmt 0 view .LVU5845
 22424 0158 DAF80000 		ldr	r0, [r10]
 932:src/xeq.c     **** }
 22425              		.loc 1 932 24 view .LVU5846
 22426 015c B0F8E8C7 		ldrh	ip, [r0, #2024]
 22427 0160 44F20101 		movw	r1, #16385
 22428              	.LBE3179:
 22429              	.LBE3178:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 22430              		.loc 1 238 5 view .LVU5847
 22431 0164 01EA0C01 		and	r1, r1, ip
 22432 0168 B1F5804F 		cmp	r1, #16384
 22433              	.LBB3180:
ARM GAS  /tmp/cciWh9P3.s 			page 586


 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22434              		.loc 1 239 24 view .LVU5848
 22435 016c 90F8CF17 		ldrb	r1, [r0, #1999]	@ zero_extendqisi2
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22436              		.loc 1 239 3 is_stmt 1 view .LVU5849
 240:src/xeq.c     **** 	}
 22437              		.loc 1 240 3 view .LVU5850
 22438              	.LVL1755:
 240:src/xeq.c     **** 	}
 22439              		.loc 1 240 3 is_stmt 0 view .LVU5851
 22440              	.LBE3180:
 22441              	.LBE3177:
 22442              	.LBE3176:
 22443              	.LBE3184:
4041:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22444              		.loc 1 4041 3 is_stmt 1 view .LVU5852
 22445              	.LBB3185:
 22446              	.LBB3183:
 22447              	.LBB3182:
 22448              	.LBB3181:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 22449              		.loc 1 239 13 is_stmt 0 view .LVU5853
 22450 0170 04BF     		itt	eq
 22451 0172 0C39     		subeq	r1, r1, #12
 240:src/xeq.c     **** 	}
 22452              		.loc 1 240 67 view .LVU5854
 22453 0174 4910     		asreq	r1, r1, #1
 22454              	.LBE3181:
 22455              	.LBE3182:
 22456              	.LBE3183:
 22457              	.LBE3185:
4041:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22458              		.loc 1 4041 6 view .LVU5855
 22459 0176 002A     		cmp	r2, #0
 22460 0178 CFD1     		bne	.L1569
 22461              	.L1565:
4043:src/xeq.c     **** 				// source & destination in different memory areas
 22462              		.loc 1 4043 4 is_stmt 1 view .LVU5856
4043:src/xeq.c     **** 				// source & destination in different memory areas
 22463              		.loc 1 4043 7 is_stmt 0 view .LVU5857
 22464 017a 4FB1     		cbz	r7, .L1602
 22465              	.LVL1756:
 22466              	.L1570:
4045:src/xeq.c     **** 			else {
 22467              		.loc 1 4045 5 is_stmt 1 view .LVU5858
4045:src/xeq.c     **** 			else {
 22468              		.loc 1 4045 9 is_stmt 0 view .LVU5859
 22469 017c 8B42     		cmp	r3, r1
 22470 017e 1A46     		mov	r2, r3
 22471 0180 A8BF     		it	ge
 22472 0182 0A46     		movge	r2, r1
 22473              	.LVL1757:
 22474              	.L1572:
4059:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 22475              		.loc 1 4059 3 is_stmt 1 view .LVU5860
4059:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 22476              		.loc 1 4059 6 is_stmt 0 view .LVU5861
ARM GAS  /tmp/cciWh9P3.s 			page 587


 22477 0184 6F2D     		cmp	r5, #111
 22478 0186 C8DD     		ble	.L1569
 22479 0188 C6E7     		b	.L1566
 22480              	.LVL1758:
 22481              	.L1582:
4059:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 22482              		.loc 1 4059 6 view .LVU5862
 22483 018a 1F46     		mov	r7, r3
4032:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 22484              		.loc 1 4032 9 view .LVU5863
 22485 018c 7023     		movs	r3, #112
 22486 018e B4E7     		b	.L1558
 22487              	.LVL1759:
 22488              	.L1602:
4043:src/xeq.c     **** 				// source & destination in different memory areas
 22489              		.loc 1 4043 42 view .LVU5864
 22490 0190 244A     		ldr	r2, .L1603+12
 22491              	.LVL1760:
4043:src/xeq.c     **** 				// source & destination in different memory areas
 22492              		.loc 1 4043 14 view .LVU5865
 22493 0192 9442     		cmp	r4, r2
 22494 0194 B4BF     		ite	lt
 22495 0196 0024     		movlt	r4, #0
 22496 0198 0124     		movge	r4, #1
 22497 019a 6F2D     		cmp	r5, #111
 22498 019c D4BF     		ite	le
 22499 019e 0022     		movle	r2, #0
 22500 01a0 0122     		movgt	r2, #1
 22501 01a2 9442     		cmp	r4, r2
 22502 01a4 EAD1     		bne	.L1570
4047:src/xeq.c     **** 					num = mx_src - rsrc;
 22503              		.loc 1 4047 5 is_stmt 1 view .LVU5866
4047:src/xeq.c     **** 					num = mx_src - rsrc;
 22504              		.loc 1 4047 8 is_stmt 0 view .LVU5867
 22505 01a6 B542     		cmp	r5, r6
4048:src/xeq.c     **** 					q = rsrc - rdest;
 22506              		.loc 1 4048 6 is_stmt 1 view .LVU5868
4052:src/xeq.c     **** 					q = rdest - rsrc;
 22507              		.loc 1 4052 10 is_stmt 0 view .LVU5869
 22508 01a8 A7BF     		ittee	ge
 22509 01aa 4A1B     		subge	r2, r1, r5
4053:src/xeq.c     **** 				}
 22510              		.loc 1 4053 8 view .LVU5870
 22511 01ac A81B     		subge	r0, r5, r6
4048:src/xeq.c     **** 					q = rsrc - rdest;
 22512              		.loc 1 4048 10 view .LVU5871
 22513 01ae 9A1B     		sublt	r2, r3, r6
4049:src/xeq.c     **** 				}
 22514              		.loc 1 4049 6 is_stmt 1 view .LVU5872
4049:src/xeq.c     **** 				}
 22515              		.loc 1 4049 8 is_stmt 0 view .LVU5873
 22516 01b0 701B     		sublt	r0, r6, r5
4052:src/xeq.c     **** 					q = rdest - rsrc;
 22517              		.loc 1 4052 6 is_stmt 1 view .LVU5874
 22518              	.LVL1761:
4053:src/xeq.c     **** 				}
 22519              		.loc 1 4053 6 view .LVU5875
ARM GAS  /tmp/cciWh9P3.s 			page 588


4055:src/xeq.c     **** 					num = q;
 22520              		.loc 1 4055 5 view .LVU5876
 22521 01b2 8242     		cmp	r2, r0
 22522 01b4 A8BF     		it	ge
 22523 01b6 0246     		movge	r2, r0
 22524              	.LVL1762:
4055:src/xeq.c     **** 					num = q;
 22525              		.loc 1 4055 5 is_stmt 0 view .LVU5877
 22526 01b8 E4E7     		b	.L1572
 22527              	.LVL1763:
 22528              	.L1601:
4055:src/xeq.c     **** 					num = q;
 22529              		.loc 1 4055 5 view .LVU5878
 22530 01ba 9119     		adds	r1, r2, r6
 22531 01bc B3E7     		b	.L1575
 22532              	.LVL1764:
 22533              	.L1600:
 22534              	.LBB3186:
 22535              	.LBB3173:
 22536              	.LBB3172:
 22537              	.LBB3166:
 22538              	.LBB3158:
 932:src/xeq.c     **** }
 22539              		.loc 1 932 24 view .LVU5879
 22540 01be B3F8E877 		ldrh	r7, [r3, #2024]
 22541              	.LBE3158:
 22542              	.LBE3166:
 22543              	.LBB3167:
 22544              	.LBB3162:
 214:src/xeq.c     **** }
 22545              		.loc 1 214 25 view .LVU5880
 22546 01c2 1B48     		ldr	r0, .L1603+24
 22547              	.LBE3162:
 22548              	.LBE3167:
 22549              	.LBB3168:
 22550              	.LBB3159:
 932:src/xeq.c     **** }
 22551              		.loc 1 932 24 view .LVU5881
 22552 01c4 44F20103 		movw	r3, #16385
 22553              	.LVL1765:
 932:src/xeq.c     **** }
 22554              		.loc 1 932 24 view .LVU5882
 22555              	.LBE3159:
 22556              	.LBE3168:
 22557              	.LBB3169:
 22558              	.LBB3163:
 214:src/xeq.c     **** }
 22559              		.loc 1 214 25 view .LVU5883
 22560 01c8 0068     		ldr	r0, [r0]
 22561              	.LBE3163:
 22562              	.LBE3169:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22563              		.loc 1 222 73 view .LVU5884
 22564 01ca 3B40     		ands	r3, r3, r7
 22565 01cc A3F58043 		sub	r3, r3, #16384
 22566              	.LBB3170:
 22567              	.LBB3164:
ARM GAS  /tmp/cciWh9P3.s 			page 589


 214:src/xeq.c     **** }
 22568              		.loc 1 214 57 view .LVU5885
 22569 01d0 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 22570              	.LBE3164:
 22571              	.LBE3170:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22572              		.loc 1 222 73 view .LVU5886
 22573 01d4 B3FA83F3 		clz	r3, r3
 22574 01d8 5B09     		lsrs	r3, r3, #5
 22575 01da 0233     		adds	r3, r3, #2
 22576              	.LBB3171:
 22577              	.LBB3165:
 214:src/xeq.c     **** }
 22578              		.loc 1 214 57 view .LVU5887
 22579 01dc C1F30B01 		ubfx	r1, r1, #0, #12
 22580 01e0 41FA03F3 		asr	r3, r1, r3
 22581 01e4 7033     		adds	r3, r3, #112
 22582 01e6 63E7     		b	.L1561
 22583              	.LVL1766:
 22584              	.L1599:
 214:src/xeq.c     **** }
 22585              		.loc 1 214 57 view .LVU5888
 22586              	.LBE3165:
 22587              	.LBE3171:
 22588              	.LBE3172:
 22589              	.LBE3173:
 22590              	.LBE3186:
 22591              	.LBB3187:
 22592              	.LBB3150:
 22593              	.LBB3148:
 22594              	.LBB3141:
 22595              	.LBB3131:
 932:src/xeq.c     **** }
 22596              		.loc 1 932 24 view .LVU5889
 22597 01e8 B1F8E8E7 		ldrh	lr, [r1, #2024]
 22598              	.LBE3131:
 22599              	.LBE3141:
 22600              	.LBB3142:
 22601              	.LBB3136:
 214:src/xeq.c     **** }
 22602              		.loc 1 214 25 view .LVU5890
 22603 01ec DFF840C0 		ldr	ip, .L1603+24
 22604              	.LBE3136:
 22605              	.LBE3142:
 22606              	.LBB3143:
 22607              	.LBB3132:
 932:src/xeq.c     **** }
 22608              		.loc 1 932 24 view .LVU5891
 22609 01f0 44F20101 		movw	r1, #16385
 22610              	.LVL1767:
 932:src/xeq.c     **** }
 22611              		.loc 1 932 24 view .LVU5892
 22612              	.LBE3132:
 22613              	.LBE3143:
 22614              	.LBB3144:
 22615              	.LBB3137:
 214:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 590


 22616              		.loc 1 214 25 view .LVU5893
 22617 01f4 DCF800C0 		ldr	ip, [ip]
 22618              	.LBE3137:
 22619              	.LBE3144:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22620              		.loc 1 222 73 view .LVU5894
 22621 01f8 01EA0E01 		and	r1, r1, lr
 22622 01fc A1F58041 		sub	r1, r1, #16384
 22623              	.LBB3145:
 22624              	.LBB3138:
 214:src/xeq.c     **** }
 22625              		.loc 1 214 57 view .LVU5895
 22626 0200 3CF810C0 		ldrh	ip, [ip, r0, lsl #1]
 22627              	.LBE3138:
 22628              	.LBE3145:
 222:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 22629              		.loc 1 222 73 view .LVU5896
 22630 0204 B1FA81F1 		clz	r1, r1
 22631 0208 4909     		lsrs	r1, r1, #5
 22632 020a 881C     		adds	r0, r1, #2
 22633              	.LBB3146:
 22634              	.LBB3139:
 214:src/xeq.c     **** }
 22635              		.loc 1 214 57 view .LVU5897
 22636 020c CCF30B01 		ubfx	r1, ip, #0, #12
 22637 0210 0141     		asrs	r1, r1, r0
 22638              	.LVL1768:
 214:src/xeq.c     **** }
 22639              		.loc 1 214 57 view .LVU5898
 22640              	.LBE3139:
 22641              	.LBE3146:
 22642              	.LBE3148:
 22643              	.LBE3150:
 22644              	.LBE3187:
4041:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22645              		.loc 1 4041 3 is_stmt 1 view .LVU5899
4041:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 22646              		.loc 1 4041 6 is_stmt 0 view .LVU5900
 22647 0212 002A     		cmp	r2, #0
 22648 0214 B1D0     		beq	.L1565
 22649 0216 7FE7     		b	.L1566
 22650              	.L1604:
 22651              		.align	2
 22652              	.L1603:
 22653 0218 00000000 		.word	Error
 22654 021c D34D6210 		.word	274877907
 22655 0220 1F85EB51 		.word	1374389535
 22656 0224 00E6AA00 		.word	11200000
 22657 0228 80969800 		.word	10000000
 22658 022c 00000000 		.word	backup_ram
 22659 0230 00000000 		.word	RetStk
 22660 0234 00000000 		.word	main_ram
 22661              	.LBE3194:
 22662              	.LBE3200:
 22663              		.cfi_endproc
 22664              	.LFE222:
 22666              		.section	.text.op_regcopy,"ax",%progbits
ARM GAS  /tmp/cciWh9P3.s 			page 591


 22667              		.align	1
 22668              		.p2align 2,,3
 22669              		.global	op_regcopy
 22670              		.syntax unified
 22671              		.thumb
 22672              		.thumb_func
 22673              		.fpu fpv4-sp-d16
 22675              	op_regcopy:
 22676              	.LVL1769:
 22677              	.LFB223:
4085:src/xeq.c     **** 	int s, n, d;
 22678              		.loc 1 4085 32 is_stmt 1 view -0
 22679              		.cfi_startproc
 22680              		@ args = 0, pretend = 0, frame = 16
 22681              		@ frame_needed = 0, uses_anonymous_args = 0
4086:src/xeq.c     **** 
 22682              		.loc 1 4086 2 view .LVU5902
4088:src/xeq.c     **** 		return;
 22683              		.loc 1 4088 2 view .LVU5903
4085:src/xeq.c     **** 	int s, n, d;
 22684              		.loc 1 4085 32 is_stmt 0 view .LVU5904
 22685 0000 10B5     		push	{r4, lr}
 22686              		.cfi_def_cfa_offset 8
 22687              		.cfi_offset 4, -8
 22688              		.cfi_offset 14, -4
 22689 0002 84B0     		sub	sp, sp, #16
 22690              		.cfi_def_cfa_offset 24
4088:src/xeq.c     **** 		return;
 22691              		.loc 1 4088 6 view .LVU5905
 22692 0004 0123     		movs	r3, #1
 22693 0006 03AA     		add	r2, sp, #12
 22694 0008 02A9     		add	r1, sp, #8
 22695 000a 01A8     		add	r0, sp, #4
 22696              	.LVL1770:
4088:src/xeq.c     **** 		return;
 22697              		.loc 1 4088 6 view .LVU5906
 22698 000c FFF7FEFF 		bl	reg_decode
 22699              	.LVL1771:
4088:src/xeq.c     **** 		return;
 22700              		.loc 1 4088 5 view .LVU5907
 22701 0010 B8B9     		cbnz	r0, .L1605
4090:src/xeq.c     **** }
 22702              		.loc 1 4090 2 is_stmt 1 view .LVU5908
 22703 0012 0398     		ldr	r0, [sp, #12]
 22704 0014 FFF7FEFF 		bl	get_reg_n
 22705              	.LVL1772:
 22706 0018 0446     		mov	r4, r0
 22707 001a 0198     		ldr	r0, [sp, #4]
 22708 001c FFF7FEFF 		bl	get_reg_n
 22709              	.LVL1773:
 22710              	.LBB3201:
 22711              	.LBB3202:
 22712              	.LBB3203:
 22713              	.LBB3204:
 932:src/xeq.c     **** }
 22714              		.loc 1 932 24 is_stmt 0 view .LVU5909
 22715 0020 094B     		ldr	r3, .L1610
ARM GAS  /tmp/cciWh9P3.s 			page 592


 22716              	.LBE3204:
 22717              	.LBE3203:
 22718              	.LBE3202:
 22719              	.LBE3201:
4090:src/xeq.c     **** }
 22720              		.loc 1 4090 2 view .LVU5910
 22721 0022 029A     		ldr	r2, [sp, #8]
 22722              	.LVL1774:
 22723              	.LBB3211:
 22724              	.LBB3209:
 22725              	.LBB3207:
 22726              	.LBB3205:
 932:src/xeq.c     **** }
 22727              		.loc 1 932 24 view .LVU5911
 22728 0024 1B68     		ldr	r3, [r3]
 22729 0026 B3F8E817 		ldrh	r1, [r3, #2024]
 22730 002a 44F20103 		movw	r3, #16385
 22731              	.LBE3205:
 22732              	.LBE3207:
1351:src/xeq.c     **** 		n <<= 1;
 22733              		.loc 1 1351 5 view .LVU5912
 22734 002e 0B40     		ands	r3, r3, r1
 22735 0030 B3F5804F 		cmp	r3, #16384
1352:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 22736              		.loc 1 1352 5 view .LVU5913
 22737 0034 08BF     		it	eq
 22738 0036 5200     		lsleq	r2, r2, #1
 22739              	.LBE3209:
 22740              	.LBE3211:
4090:src/xeq.c     **** }
 22741              		.loc 1 4090 2 view .LVU5914
 22742 0038 0146     		mov	r1, r0
 22743              	.LVL1775:
 22744              	.LBB3212:
 22745              	.LBI3201:
1350:src/xeq.c     **** 	if (is_dblmode())
 22746              		.loc 1 1350 6 is_stmt 1 view .LVU5915
 22747              	.LBB3210:
1351:src/xeq.c     **** 		n <<= 1;
 22748              		.loc 1 1351 2 view .LVU5916
 22749              	.LBB3208:
 22750              	.LBI3203:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22751              		.loc 1 931 5 view .LVU5917
 22752              	.LBB3206:
 932:src/xeq.c     **** }
 22753              		.loc 1 932 2 view .LVU5918
 22754              	.LBE3206:
 22755              	.LBE3208:
1352:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 22756              		.loc 1 1352 3 view .LVU5919
1353:src/xeq.c     **** }
 22757              		.loc 1 1353 2 view .LVU5920
 22758 003a D200     		lsls	r2, r2, #3
 22759              	.LVL1776:
1353:src/xeq.c     **** }
 22760              		.loc 1 1353 2 is_stmt 0 view .LVU5921
ARM GAS  /tmp/cciWh9P3.s 			page 593


 22761 003c 2046     		mov	r0, r4
 22762              	.LVL1777:
1353:src/xeq.c     **** }
 22763              		.loc 1 1353 2 view .LVU5922
 22764 003e FFF7FEFF 		bl	xcopy
 22765              	.LVL1778:
 22766              	.L1605:
1353:src/xeq.c     **** }
 22767              		.loc 1 1353 2 view .LVU5923
 22768              	.LBE3210:
 22769              	.LBE3212:
4091:src/xeq.c     **** 
 22770              		.loc 1 4091 1 view .LVU5924
 22771 0042 04B0     		add	sp, sp, #16
 22772              		.cfi_def_cfa_offset 8
 22773              		@ sp needed
 22774 0044 10BD     		pop	{r4, pc}
 22775              	.L1611:
 22776 0046 00BF     		.align	2
 22777              	.L1610:
 22778 0048 00000000 		.word	main_ram
 22779              		.cfi_endproc
 22780              	.LFE223:
 22782              		.section	.text.op_regswap,"ax",%progbits
 22783              		.align	1
 22784              		.p2align 2,,3
 22785              		.global	op_regswap
 22786              		.syntax unified
 22787              		.thumb
 22788              		.thumb_func
 22789              		.fpu fpv4-sp-d16
 22791              	op_regswap:
 22792              	.LVL1779:
 22793              	.LFB224:
4093:src/xeq.c     **** 	int s, n, d, i;
 22794              		.loc 1 4093 32 is_stmt 1 view -0
 22795              		.cfi_startproc
 22796              		@ args = 0, pretend = 0, frame = 16
 22797              		@ frame_needed = 0, uses_anonymous_args = 0
4094:src/xeq.c     **** 
 22798              		.loc 1 4094 2 view .LVU5926
4096:src/xeq.c     **** 		return;
 22799              		.loc 1 4096 2 view .LVU5927
4093:src/xeq.c     **** 	int s, n, d, i;
 22800              		.loc 1 4093 32 is_stmt 0 view .LVU5928
 22801 0000 30B5     		push	{r4, r5, lr}
 22802              		.cfi_def_cfa_offset 12
 22803              		.cfi_offset 4, -12
 22804              		.cfi_offset 5, -8
 22805              		.cfi_offset 14, -4
 22806 0002 85B0     		sub	sp, sp, #20
 22807              		.cfi_def_cfa_offset 32
4096:src/xeq.c     **** 		return;
 22808              		.loc 1 4096 6 view .LVU5929
 22809 0004 0023     		movs	r3, #0
 22810 0006 03AA     		add	r2, sp, #12
 22811 0008 02A9     		add	r1, sp, #8
ARM GAS  /tmp/cciWh9P3.s 			page 594


 22812 000a 01A8     		add	r0, sp, #4
 22813              	.LVL1780:
4096:src/xeq.c     **** 		return;
 22814              		.loc 1 4096 6 view .LVU5930
 22815 000c FFF7FEFF 		bl	reg_decode
 22816              	.LVL1781:
4096:src/xeq.c     **** 		return;
 22817              		.loc 1 4096 5 view .LVU5931
 22818 0010 E8B9     		cbnz	r0, .L1612
4096:src/xeq.c     **** 		return;
 22819              		.loc 1 4096 37 discriminator 1 view .LVU5932
 22820 0012 039B     		ldr	r3, [sp, #12]
 22821 0014 0446     		mov	r4, r0
 22822 0016 0198     		ldr	r0, [sp, #4]
4096:src/xeq.c     **** 		return;
 22823              		.loc 1 4096 32 discriminator 1 view .LVU5933
 22824 0018 9842     		cmp	r0, r3
 22825 001a 18D0     		beq	.L1612
4099:src/xeq.c     **** 			report_err(ERR_RANGE);
 22826              		.loc 1 4099 3 is_stmt 1 view .LVU5934
4099:src/xeq.c     **** 			report_err(ERR_RANGE);
 22827              		.loc 1 4099 19 is_stmt 0 view .LVU5935
 22828 001c 029A     		ldr	r2, [sp, #8]
4099:src/xeq.c     **** 			report_err(ERR_RANGE);
 22829              		.loc 1 4099 6 view .LVU5936
 22830 001e 18DD     		ble	.L1617
4099:src/xeq.c     **** 			report_err(ERR_RANGE);
 22831              		.loc 1 4099 19 discriminator 1 view .LVU5937
 22832 0020 1344     		add	r3, r3, r2
4099:src/xeq.c     **** 			report_err(ERR_RANGE);
 22833              		.loc 1 4099 14 discriminator 1 view .LVU5938
 22834 0022 9842     		cmp	r0, r3
 22835 0024 19DB     		blt	.L1618
 22836              	.L1619:
 22837              	.LVL1782:
4102:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22838              		.loc 1 4102 16 is_stmt 1 discriminator 1 view .LVU5939
4102:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22839              		.loc 1 4102 4 is_stmt 0 discriminator 1 view .LVU5940
 22840 0026 002A     		cmp	r2, #0
 22841 0028 01DC     		bgt	.L1621
 22842 002a 10E0     		b	.L1612
 22843              	.LVL1783:
 22844              	.L1624:
4102:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22845              		.loc 1 4102 4 discriminator 1 view .LVU5941
 22846 002c 0198     		ldr	r0, [sp, #4]
 22847              	.LVL1784:
 22848              	.L1621:
4103:src/xeq.c     **** 		}
 22849              		.loc 1 4103 5 is_stmt 1 discriminator 3 view .LVU5942
 22850 002e 2044     		add	r0, r0, r4
 22851 0030 FFF7FEFF 		bl	get_reg_n
 22852              	.LVL1785:
 22853 0034 039B     		ldr	r3, [sp, #12]
 22854 0036 0546     		mov	r5, r0
 22855 0038 E018     		adds	r0, r4, r3
ARM GAS  /tmp/cciWh9P3.s 			page 595


 22856 003a FFF7FEFF 		bl	get_reg_n
 22857              	.LVL1786:
 22858 003e 0146     		mov	r1, r0
 22859 0040 2846     		mov	r0, r5
 22860 0042 FFF7FEFF 		bl	swap_reg
 22861              	.LVL1787:
4102:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22862              		.loc 1 4102 23 discriminator 3 view .LVU5943
4102:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22863              		.loc 1 4102 4 is_stmt 0 discriminator 3 view .LVU5944
 22864 0046 029B     		ldr	r3, [sp, #8]
4102:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22865              		.loc 1 4102 24 discriminator 3 view .LVU5945
 22866 0048 0134     		adds	r4, r4, #1
 22867              	.LVL1788:
4102:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22868              		.loc 1 4102 16 is_stmt 1 discriminator 3 view .LVU5946
4102:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 22869              		.loc 1 4102 4 is_stmt 0 discriminator 3 view .LVU5947
 22870 004a A342     		cmp	r3, r4
 22871 004c EEDC     		bgt	.L1624
 22872              	.LVL1789:
 22873              	.L1612:
4106:src/xeq.c     **** 
 22874              		.loc 1 4106 1 view .LVU5948
 22875 004e 05B0     		add	sp, sp, #20
 22876              		.cfi_remember_state
 22877              		.cfi_def_cfa_offset 12
 22878              		@ sp needed
 22879 0050 30BD     		pop	{r4, r5, pc}
 22880              	.L1617:
 22881              		.cfi_restore_state
4099:src/xeq.c     **** 			report_err(ERR_RANGE);
 22882              		.loc 1 4099 28 discriminator 3 view .LVU5949
 22883 0052 E8DA     		bge	.L1619
4099:src/xeq.c     **** 			report_err(ERR_RANGE);
 22884              		.loc 1 4099 43 discriminator 4 view .LVU5950
 22885 0054 8118     		adds	r1, r0, r2
4099:src/xeq.c     **** 			report_err(ERR_RANGE);
 22886              		.loc 1 4099 38 discriminator 4 view .LVU5951
 22887 0056 8B42     		cmp	r3, r1
 22888 0058 E5DA     		bge	.L1619
 22889              	.L1618:
4100:src/xeq.c     **** 		else {
 22890              		.loc 1 4100 4 is_stmt 1 view .LVU5952
 22891              	.LVL1790:
 22892              	.LBB3217:
 22893              	.LBI3217:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22894              		.loc 1 536 5 view .LVU5953
 22895              	.LBB3218:
 537:src/xeq.c     **** 		Error = e;
 22896              		.loc 1 537 2 view .LVU5954
 537:src/xeq.c     **** 		Error = e;
 22897              		.loc 1 537 12 is_stmt 0 view .LVU5955
 22898 005a 044B     		ldr	r3, .L1625
 537:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/cciWh9P3.s 			page 596


 22899              		.loc 1 537 5 view .LVU5956
 22900 005c 1A68     		ldr	r2, [r3]
 22901 005e 002A     		cmp	r2, #0
 22902 0060 F5D1     		bne	.L1612
 22903              	.LVL1791:
 22904              	.LBB3219:
 22905              	.LBI3219:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 22906              		.loc 1 536 5 is_stmt 1 view .LVU5957
 22907              	.LBB3220:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 22908              		.loc 1 538 3 view .LVU5958
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 22909              		.loc 1 538 9 is_stmt 0 view .LVU5959
 22910 0062 0822     		movs	r2, #8
 22911 0064 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 22912              		.loc 1 539 3 is_stmt 1 view .LVU5960
 22913              	.LBE3220:
 22914              	.LBE3219:
 22915              	.LBE3218:
 22916              	.LBE3217:
4106:src/xeq.c     **** 
 22917              		.loc 1 4106 1 is_stmt 0 view .LVU5961
 22918 0066 05B0     		add	sp, sp, #20
 22919              		.cfi_def_cfa_offset 12
 22920              		@ sp needed
 22921 0068 30BD     		pop	{r4, r5, pc}
 22922              	.L1626:
 22923 006a 00BF     		.align	2
 22924              	.L1625:
 22925 006c 00000000 		.word	Error
 22926              		.cfi_endproc
 22927              	.LFE224:
 22929              		.section	.text.op_regclr,"ax",%progbits
 22930              		.align	1
 22931              		.p2align 2,,3
 22932              		.global	op_regclr
 22933              		.syntax unified
 22934              		.thumb
 22935              		.thumb_func
 22936              		.fpu fpv4-sp-d16
 22938              	op_regclr:
 22939              	.LVL1792:
 22940              	.LFB225:
4108:src/xeq.c     **** 	int s, n;
 22941              		.loc 1 4108 31 is_stmt 1 view -0
 22942              		.cfi_startproc
 22943              		@ args = 0, pretend = 0, frame = 8
 22944              		@ frame_needed = 0, uses_anonymous_args = 0
4109:src/xeq.c     **** 
 22945              		.loc 1 4109 2 view .LVU5963
4111:src/xeq.c     **** 		return;
 22946              		.loc 1 4111 2 view .LVU5964
4108:src/xeq.c     **** 	int s, n;
 22947              		.loc 1 4108 31 is_stmt 0 view .LVU5965
 22948 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/cciWh9P3.s 			page 597


 22949              		.cfi_def_cfa_offset 8
 22950              		.cfi_offset 4, -8
 22951              		.cfi_offset 14, -4
4111:src/xeq.c     **** 		return;
 22952              		.loc 1 4111 6 view .LVU5966
 22953 0002 0023     		movs	r3, #0
4108:src/xeq.c     **** 	int s, n;
 22954              		.loc 1 4108 31 view .LVU5967
 22955 0004 82B0     		sub	sp, sp, #8
 22956              		.cfi_def_cfa_offset 16
4111:src/xeq.c     **** 		return;
 22957              		.loc 1 4111 6 view .LVU5968
 22958 0006 1A46     		mov	r2, r3
 22959 0008 01A9     		add	r1, sp, #4
 22960 000a 6846     		mov	r0, sp
 22961              	.LVL1793:
4111:src/xeq.c     **** 		return;
 22962              		.loc 1 4111 6 view .LVU5969
 22963 000c FFF7FEFF 		bl	reg_decode
 22964              	.LVL1794:
4111:src/xeq.c     **** 		return;
 22965              		.loc 1 4111 5 view .LVU5970
 22966 0010 A8B9     		cbnz	r0, .L1627
4113:src/xeq.c     **** }
 22967              		.loc 1 4113 2 is_stmt 1 view .LVU5971
 22968 0012 0446     		mov	r4, r0
 22969 0014 0098     		ldr	r0, [sp]
 22970 0016 FFF7FEFF 		bl	get_reg_n
 22971              	.LVL1795:
 22972              	.LBB3221:
 22973              	.LBI3221:
1331:src/xeq.c     **** #if 0
 22974              		.loc 1 1331 6 view .LVU5972
 22975              	.LBB3222:
1346:src/xeq.c     **** #endif
 22976              		.loc 1 1346 2 view .LVU5973
 22977              	.LBB3223:
 22978              	.LBI3223:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 22979              		.loc 1 931 5 view .LVU5974
 22980              	.LBB3224:
 932:src/xeq.c     **** }
 22981              		.loc 1 932 2 view .LVU5975
 932:src/xeq.c     **** }
 22982              		.loc 1 932 24 is_stmt 0 view .LVU5976
 22983 001a 0A4B     		ldr	r3, .L1631
 22984              	.LBE3224:
 22985              	.LBE3223:
1346:src/xeq.c     **** #endif
 22986              		.loc 1 1346 2 view .LVU5977
 22987 001c 019A     		ldr	r2, [sp, #4]
 22988              	.LBB3226:
 22989              	.LBB3225:
 932:src/xeq.c     **** }
 22990              		.loc 1 932 24 view .LVU5978
 22991 001e 1B68     		ldr	r3, [r3]
 22992 0020 B3F8E817 		ldrh	r1, [r3, #2024]
ARM GAS  /tmp/cciWh9P3.s 			page 598


 22993 0024 44F20103 		movw	r3, #16385
 22994 0028 0B40     		ands	r3, r3, r1
 22995 002a A3F58043 		sub	r3, r3, #16384
 22996 002e B3FA83F3 		clz	r3, r3
 22997 0032 5B09     		lsrs	r3, r3, #5
 22998              	.LBE3225:
 22999              	.LBE3226:
1346:src/xeq.c     **** #endif
 23000              		.loc 1 1346 24 view .LVU5979
 23001 0034 0333     		adds	r3, r3, #3
1346:src/xeq.c     **** #endif
 23002              		.loc 1 1346 2 view .LVU5980
 23003 0036 2146     		mov	r1, r4
 23004 0038 9A40     		lsls	r2, r2, r3
 23005 003a FFF7FEFF 		bl	xset
 23006              	.LVL1796:
 23007              	.L1627:
1346:src/xeq.c     **** #endif
 23008              		.loc 1 1346 2 view .LVU5981
 23009              	.LBE3222:
 23010              	.LBE3221:
4114:src/xeq.c     **** 
 23011              		.loc 1 4114 1 view .LVU5982
 23012 003e 02B0     		add	sp, sp, #8
 23013              		.cfi_def_cfa_offset 8
 23014              		@ sp needed
 23015 0040 10BD     		pop	{r4, pc}
 23016              	.L1632:
 23017 0042 00BF     		.align	2
 23018              	.L1631:
 23019 0044 00000000 		.word	main_ram
 23020              		.cfi_endproc
 23021              	.LFE225:
 23023              		.section	.text.op_regsort,"ax",%progbits
 23024              		.align	1
 23025              		.p2align 2,,3
 23026              		.global	op_regsort
 23027              		.syntax unified
 23028              		.thumb
 23029              		.thumb_func
 23030              		.fpu fpv4-sp-d16
 23032              	op_regsort:
 23033              	.LVL1797:
 23034              	.LFB226:
4116:src/xeq.c     **** 	int s, n;
 23035              		.loc 1 4116 32 is_stmt 1 view -0
 23036              		.cfi_startproc
 23037              		@ args = 0, pretend = 0, frame = 160
 23038              		@ frame_needed = 0, uses_anonymous_args = 0
4117:src/xeq.c     **** 	decNumber pivot, a;
 23039              		.loc 1 4117 2 view .LVU5984
4118:src/xeq.c     **** 	int beg[10], end[10], i;
 23040              		.loc 1 4118 2 view .LVU5985
4119:src/xeq.c     **** 
 23041              		.loc 1 4119 2 view .LVU5986
4121:src/xeq.c     **** 		return;
 23042              		.loc 1 4121 2 view .LVU5987
ARM GAS  /tmp/cciWh9P3.s 			page 599


4116:src/xeq.c     **** 	int s, n;
 23043              		.loc 1 4116 32 is_stmt 0 view .LVU5988
 23044 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 23045              		.cfi_def_cfa_offset 28
 23046              		.cfi_offset 4, -28
 23047              		.cfi_offset 5, -24
 23048              		.cfi_offset 6, -20
 23049              		.cfi_offset 7, -16
 23050              		.cfi_offset 8, -12
 23051              		.cfi_offset 9, -8
 23052              		.cfi_offset 14, -4
4121:src/xeq.c     **** 		return;
 23053              		.loc 1 4121 6 view .LVU5989
 23054 0004 0023     		movs	r3, #0
4116:src/xeq.c     **** 	int s, n;
 23055              		.loc 1 4116 32 view .LVU5990
 23056 0006 A9B0     		sub	sp, sp, #164
 23057              		.cfi_def_cfa_offset 192
4121:src/xeq.c     **** 		return;
 23058              		.loc 1 4121 6 view .LVU5991
 23059 0008 1A46     		mov	r2, r3
 23060 000a 01A9     		add	r1, sp, #4
 23061 000c 6846     		mov	r0, sp
 23062              	.LVL1798:
4121:src/xeq.c     **** 		return;
 23063              		.loc 1 4121 6 view .LVU5992
 23064 000e FFF7FEFF 		bl	reg_decode
 23065              	.LVL1799:
4121:src/xeq.c     **** 		return;
 23066              		.loc 1 4121 5 view .LVU5993
 23067 0012 20B9     		cbnz	r0, .L1633
4121:src/xeq.c     **** 		return;
 23068              		.loc 1 4121 39 discriminator 1 view .LVU5994
 23069 0014 DDF80480 		ldr	r8, [sp, #4]
4121:src/xeq.c     **** 		return;
 23070              		.loc 1 4121 34 discriminator 1 view .LVU5995
 23071 0018 B8F1010F 		cmp	r8, #1
 23072 001c 02D1     		bne	.L1657
 23073              	.L1633:
4166:src/xeq.c     **** 
 23074              		.loc 1 4166 1 view .LVU5996
 23075 001e 29B0     		add	sp, sp, #164
 23076              		.cfi_remember_state
 23077              		.cfi_def_cfa_offset 28
 23078              		@ sp needed
 23079 0020 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 23080              	.L1657:
 23081              		.cfi_restore_state
 23082 0024 0646     		mov	r6, r0
4125:src/xeq.c     **** 	end[0] = n;
 23083              		.loc 1 4125 2 is_stmt 1 view .LVU5997
4125:src/xeq.c     **** 	end[0] = n;
 23084              		.loc 1 4125 9 is_stmt 0 view .LVU5998
 23085 0026 1490     		str	r0, [sp, #80]
4126:src/xeq.c     **** 	i = 0;
 23086              		.loc 1 4126 2 is_stmt 1 view .LVU5999
4126:src/xeq.c     **** 	i = 0;
ARM GAS  /tmp/cciWh9P3.s 			page 600


 23087              		.loc 1 4126 9 is_stmt 0 view .LVU6000
 23088 0028 CDF87880 		str	r8, [sp, #120]
4127:src/xeq.c     **** 	while (i>=0) {
 23089              		.loc 1 4127 2 is_stmt 1 view .LVU6001
 23090              	.LVL1800:
4128:src/xeq.c     **** 		int L = beg[i];
 23091              		.loc 1 4128 2 view .LVU6002
4128:src/xeq.c     **** 		int L = beg[i];
 23092              		.loc 1 4128 8 view .LVU6003
4127:src/xeq.c     **** 	while (i>=0) {
 23093              		.loc 1 4127 4 is_stmt 0 view .LVU6004
 23094 002c 0746     		mov	r7, r0
 23095              	.LVL1801:
 23096              	.L1647:
 23097              	.LBB3227:
4129:src/xeq.c     **** 		int R = end[i] - 1;
 23098              		.loc 1 4129 3 is_stmt 1 view .LVU6005
4130:src/xeq.c     **** 		if (L<R) {
 23099              		.loc 1 4130 3 view .LVU6006
4130:src/xeq.c     **** 		if (L<R) {
 23100              		.loc 1 4130 7 is_stmt 0 view .LVU6007
 23101 002e 08F1FF34 		add	r4, r8, #-1
 23102              	.LVL1802:
4131:src/xeq.c     **** 			const int pvt = s + L;
 23103              		.loc 1 4131 3 is_stmt 1 view .LVU6008
4131:src/xeq.c     **** 			const int pvt = s + L;
 23104              		.loc 1 4131 6 is_stmt 0 view .LVU6009
 23105 0032 B442     		cmp	r4, r6
 23106 0034 0CDC     		bgt	.L1658
 23107              	.LVL1803:
 23108              	.L1636:
4164:src/xeq.c     **** 	}
 23109              		.loc 1 4164 4 is_stmt 1 view .LVU6010
 23110              	.LBE3227:
4128:src/xeq.c     **** 		int L = beg[i];
 23111              		.loc 1 4128 8 is_stmt 0 view .LVU6011
 23112 0036 013F     		subs	r7, r7, #1
 23113              	.LVL1804:
4128:src/xeq.c     **** 		int L = beg[i];
 23114              		.loc 1 4128 8 view .LVU6012
 23115 0038 F1D3     		bcc	.L1633
 23116 003a 28AB     		add	r3, sp, #160
 23117 003c 03EB8703 		add	r3, r3, r7, lsl #2
 23118 0040 53F8288C 		ldr	r8, [r3, #-40]
 23119 0044 53F8506C 		ldr	r6, [r3, #-80]
 23120              	.LVL1805:
 23121              	.LBB3230:
4129:src/xeq.c     **** 		int R = end[i] - 1;
 23122              		.loc 1 4129 3 is_stmt 1 view .LVU6013
4130:src/xeq.c     **** 		if (L<R) {
 23123              		.loc 1 4130 3 view .LVU6014
4130:src/xeq.c     **** 		if (L<R) {
 23124              		.loc 1 4130 7 is_stmt 0 view .LVU6015
 23125 0048 08F1FF34 		add	r4, r8, #-1
 23126              	.LVL1806:
4131:src/xeq.c     **** 			const int pvt = s + L;
 23127              		.loc 1 4131 3 is_stmt 1 view .LVU6016
ARM GAS  /tmp/cciWh9P3.s 			page 601


4131:src/xeq.c     **** 			const int pvt = s + L;
 23128              		.loc 1 4131 6 is_stmt 0 view .LVU6017
 23129 004c B442     		cmp	r4, r6
 23130 004e F2DD     		ble	.L1636
 23131              	.LVL1807:
 23132              	.L1658:
 23133              	.LBB3228:
4132:src/xeq.c     **** 			getRegister(&pivot, pvt);
 23134              		.loc 1 4132 4 is_stmt 1 view .LVU6018
4133:src/xeq.c     **** 			while (L<R) {
 23135              		.loc 1 4133 4 view .LVU6019
4132:src/xeq.c     **** 			getRegister(&pivot, pvt);
 23136              		.loc 1 4132 14 is_stmt 0 view .LVU6020
 23137 0050 0099     		ldr	r1, [sp]
4133:src/xeq.c     **** 			while (L<R) {
 23138              		.loc 1 4133 4 view .LVU6021
 23139 0052 02A8     		add	r0, sp, #8
 23140 0054 3144     		add	r1, r1, r6
 23141              	.LVL1808:
4133:src/xeq.c     **** 			while (L<R) {
 23142              		.loc 1 4133 4 view .LVU6022
 23143 0056 FFF7FEFF 		bl	getRegister
 23144              	.LVL1809:
4134:src/xeq.c     **** 				while (L<R) {
 23145              		.loc 1 4134 4 is_stmt 1 view .LVU6023
4134:src/xeq.c     **** 				while (L<R) {
 23146              		.loc 1 4134 10 view .LVU6024
4133:src/xeq.c     **** 			while (L<R) {
 23147              		.loc 1 4133 4 is_stmt 0 view .LVU6025
 23148 005a B146     		mov	r9, r6
 23149              	.L1639:
4136:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
 23150              		.loc 1 4136 6 is_stmt 1 view .LVU6026
 23151 005c 0099     		ldr	r1, [sp]
 23152 005e 0BA8     		add	r0, sp, #44
 23153 0060 2144     		add	r1, r1, r4
 23154 0062 FFF7FEFF 		bl	getRegister
 23155              	.LVL1810:
4137:src/xeq.c     **** 						break;
 23156              		.loc 1 4137 6 view .LVU6027
4137:src/xeq.c     **** 						break;
 23157              		.loc 1 4137 10 is_stmt 0 view .LVU6028
 23158 0066 02A9     		add	r1, sp, #8
 23159 0068 0BA8     		add	r0, sp, #44
 23160 006a FFF7FEFF 		bl	dn_lt
 23161              	.LVL1811:
4139:src/xeq.c     **** 				}
 23162              		.loc 1 4139 6 is_stmt 1 view .LVU6029
4137:src/xeq.c     **** 						break;
 23163              		.loc 1 4137 9 is_stmt 0 view .LVU6030
 23164 006e 00BB     		cbnz	r0, .L1638
4139:src/xeq.c     **** 				}
 23165              		.loc 1 4139 7 view .LVU6031
 23166 0070 013C     		subs	r4, r4, #1
 23167              	.LVL1812:
4135:src/xeq.c     **** 					getRegister(&a, s + R);
 23168              		.loc 1 4135 11 is_stmt 1 view .LVU6032
ARM GAS  /tmp/cciWh9P3.s 			page 602


 23169 0072 4C45     		cmp	r4, r9
 23170 0074 F2DC     		bgt	.L1639
 23171              	.L1640:
 23172              	.LVL1813:
4143:src/xeq.c     **** 					getRegister(&a, s + L);
 23173              		.loc 1 4143 11 is_stmt 0 view .LVU6033
 23174 0076 4D46     		mov	r5, r9
 23175              	.LVL1814:
4134:src/xeq.c     **** 				while (L<R) {
 23176              		.loc 1 4134 10 is_stmt 1 view .LVU6034
 23177              	.L1648:
4152:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
 23178              		.loc 1 4152 4 view .LVU6035
 23179 0078 0098     		ldr	r0, [sp]
 23180 007a 02A9     		add	r1, sp, #8
 23181 007c 2844     		add	r0, r0, r5
 23182 007e FFF7FEFF 		bl	setRegister
 23183              	.LVL1815:
4153:src/xeq.c     **** 				beg[i+1] = beg[i];
 23184              		.loc 1 4153 4 view .LVU6036
4153:src/xeq.c     **** 				beg[i+1] = beg[i];
 23185              		.loc 1 4153 32 is_stmt 0 view .LVU6037
 23186 0082 6B1C     		adds	r3, r5, #1
4153:src/xeq.c     **** 				beg[i+1] = beg[i];
 23187              		.loc 1 4153 28 view .LVU6038
 23188 0084 A8EB0302 		sub	r2, r8, r3
4153:src/xeq.c     **** 				beg[i+1] = beg[i];
 23189              		.loc 1 4153 10 view .LVU6039
 23190 0088 A91B     		subs	r1, r5, r6
4153:src/xeq.c     **** 				beg[i+1] = beg[i];
 23191              		.loc 1 4153 7 view .LVU6040
 23192 008a 9142     		cmp	r1, r2
4154:src/xeq.c     **** 				end[i+1] = L;
 23193              		.loc 1 4154 10 view .LVU6041
 23194 008c 07F10101 		add	r1, r7, #1
4156:src/xeq.c     **** 			} else {
 23195              		.loc 1 4156 12 view .LVU6042
 23196 0090 28AA     		add	r2, sp, #160
 23197 0092 02EB8700 		add	r0, r2, r7, lsl #2
4154:src/xeq.c     **** 				end[i+1] = L;
 23198              		.loc 1 4154 14 view .LVU6043
 23199 0096 02EB8102 		add	r2, r2, r1, lsl #2
 23200 009a 0F46     		mov	r7, r1
 23201              	.LVL1816:
4153:src/xeq.c     **** 				beg[i+1] = beg[i];
 23202              		.loc 1 4153 7 view .LVU6044
 23203 009c 2DDA     		bge	.L1644
4154:src/xeq.c     **** 				end[i+1] = L;
 23204              		.loc 1 4154 5 is_stmt 1 view .LVU6045
4154:src/xeq.c     **** 				end[i+1] = L;
 23205              		.loc 1 4154 14 is_stmt 0 view .LVU6046
 23206 009e 42F8506C 		str	r6, [r2, #-80]
4155:src/xeq.c     **** 				beg[i] = L+1;
 23207              		.loc 1 4155 5 is_stmt 1 view .LVU6047
4156:src/xeq.c     **** 			} else {
 23208              		.loc 1 4156 12 is_stmt 0 view .LVU6048
 23209 00a2 40F8503C 		str	r3, [r0, #-80]
ARM GAS  /tmp/cciWh9P3.s 			page 603


 23210 00a6 52F8506C 		ldr	r6, [r2, #-80]
4155:src/xeq.c     **** 				beg[i] = L+1;
 23211              		.loc 1 4155 14 view .LVU6049
 23212 00aa 42F8285C 		str	r5, [r2, #-40]
4156:src/xeq.c     **** 			} else {
 23213              		.loc 1 4156 5 is_stmt 1 view .LVU6050
 23214 00ae A846     		mov	r8, r5
 23215 00b0 BDE7     		b	.L1647
 23216              	.LVL1817:
 23217              	.L1638:
4141:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 23218              		.loc 1 4141 5 view .LVU6051
4141:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 23219              		.loc 1 4141 8 is_stmt 0 view .LVU6052
 23220 00b2 A145     		cmp	r9, r4
 23221 00b4 DFDA     		bge	.L1640
4142:src/xeq.c     **** 				while (L<R) {
 23222              		.loc 1 4142 6 is_stmt 1 view .LVU6053
 23223 00b6 0098     		ldr	r0, [sp]
4142:src/xeq.c     **** 				while (L<R) {
 23224              		.loc 1 4142 21 is_stmt 0 view .LVU6054
 23225 00b8 09F10105 		add	r5, r9, #1
 23226              	.LVL1818:
4142:src/xeq.c     **** 				while (L<R) {
 23227              		.loc 1 4142 6 view .LVU6055
 23228 00bc 0119     		adds	r1, r0, r4
 23229 00be 4844     		add	r0, r0, r9
 23230 00c0 FFF7FEFF 		bl	copyreg_n
 23231              	.LVL1819:
4143:src/xeq.c     **** 					getRegister(&a, s + L);
 23232              		.loc 1 4143 11 is_stmt 1 view .LVU6056
 23233 00c4 A542     		cmp	r5, r4
 23234 00c6 03DB     		blt	.L1642
 23235 00c8 21E0     		b	.L1649
 23236              	.L1659:
4147:src/xeq.c     **** 				}
 23237              		.loc 1 4147 7 is_stmt 0 view .LVU6057
 23238 00ca 0135     		adds	r5, r5, #1
 23239              	.LVL1820:
4143:src/xeq.c     **** 					getRegister(&a, s + L);
 23240              		.loc 1 4143 11 is_stmt 1 view .LVU6058
 23241 00cc A542     		cmp	r5, r4
 23242 00ce D3D0     		beq	.L1648
 23243              	.L1642:
4144:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
 23244              		.loc 1 4144 6 view .LVU6059
 23245 00d0 0099     		ldr	r1, [sp]
 23246 00d2 0BA8     		add	r0, sp, #44
 23247 00d4 2944     		add	r1, r1, r5
 23248 00d6 FFF7FEFF 		bl	getRegister
 23249              	.LVL1821:
4145:src/xeq.c     **** 						break;
 23250              		.loc 1 4145 6 view .LVU6060
4145:src/xeq.c     **** 						break;
 23251              		.loc 1 4145 10 is_stmt 0 view .LVU6061
 23252 00da 0BA9     		add	r1, sp, #44
 23253 00dc 02A8     		add	r0, sp, #8
ARM GAS  /tmp/cciWh9P3.s 			page 604


 23254 00de FFF7FEFF 		bl	dn_lt
 23255              	.LVL1822:
4147:src/xeq.c     **** 				}
 23256              		.loc 1 4147 6 is_stmt 1 view .LVU6062
4145:src/xeq.c     **** 						break;
 23257              		.loc 1 4145 9 is_stmt 0 view .LVU6063
 23258 00e2 0028     		cmp	r0, #0
 23259 00e4 F1D0     		beq	.L1659
4149:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
 23260              		.loc 1 4149 5 is_stmt 1 view .LVU6064
4150:src/xeq.c     **** 			}
 23261              		.loc 1 4150 6 view .LVU6065
 23262 00e6 0098     		ldr	r0, [sp]
 23263 00e8 4119     		adds	r1, r0, r5
 23264 00ea 2044     		add	r0, r0, r4
4150:src/xeq.c     **** 			}
 23265              		.loc 1 4150 21 is_stmt 0 view .LVU6066
 23266 00ec 013C     		subs	r4, r4, #1
 23267              	.LVL1823:
4150:src/xeq.c     **** 			}
 23268              		.loc 1 4150 6 view .LVU6067
 23269 00ee FFF7FEFF 		bl	copyreg_n
 23270              	.LVL1824:
4134:src/xeq.c     **** 				while (L<R) {
 23271              		.loc 1 4134 10 is_stmt 1 view .LVU6068
 23272 00f2 A542     		cmp	r5, r4
 23273 00f4 C0DA     		bge	.L1648
 23274 00f6 A946     		mov	r9, r5
4135:src/xeq.c     **** 					getRegister(&a, s + R);
 23275              		.loc 1 4135 11 view .LVU6069
 23276 00f8 B0E7     		b	.L1639
 23277              	.LVL1825:
 23278              	.L1644:
4158:src/xeq.c     **** 				end[i+1] = end[i];
 23279              		.loc 1 4158 5 view .LVU6070
4159:src/xeq.c     **** 				end[i] = L;
 23280              		.loc 1 4159 14 is_stmt 0 view .LVU6071
 23281 00fa 42F8288C 		str	r8, [r2, #-40]
4160:src/xeq.c     **** 			}
 23282              		.loc 1 4160 12 view .LVU6072
 23283 00fe 40F8285C 		str	r5, [r0, #-40]
 23284 0102 52F8288C 		ldr	r8, [r2, #-40]
4158:src/xeq.c     **** 				end[i+1] = end[i];
 23285              		.loc 1 4158 14 view .LVU6073
 23286 0106 42F8503C 		str	r3, [r2, #-80]
4159:src/xeq.c     **** 				end[i] = L;
 23287              		.loc 1 4159 5 is_stmt 1 view .LVU6074
4160:src/xeq.c     **** 			}
 23288              		.loc 1 4160 5 view .LVU6075
4162:src/xeq.c     **** 		} else
 23289              		.loc 1 4162 4 view .LVU6076
 23290              	.LVL1826:
4162:src/xeq.c     **** 		} else
 23291              		.loc 1 4162 4 is_stmt 0 view .LVU6077
 23292              	.LBE3228:
 23293              	.LBE3230:
4128:src/xeq.c     **** 		int L = beg[i];
ARM GAS  /tmp/cciWh9P3.s 			page 605


 23294              		.loc 1 4128 8 is_stmt 1 view .LVU6078
 23295              	.LBB3231:
 23296              	.LBB3229:
4160:src/xeq.c     **** 			}
 23297              		.loc 1 4160 12 is_stmt 0 view .LVU6079
 23298 010a 1E46     		mov	r6, r3
 23299 010c 8FE7     		b	.L1647
 23300              	.LVL1827:
 23301              	.L1649:
4143:src/xeq.c     **** 					getRegister(&a, s + L);
 23302              		.loc 1 4143 11 view .LVU6080
 23303 010e A946     		mov	r9, r5
 23304              	.LVL1828:
4143:src/xeq.c     **** 					getRegister(&a, s + L);
 23305              		.loc 1 4143 11 view .LVU6081
 23306 0110 4D46     		mov	r5, r9
 23307              	.LVL1829:
4134:src/xeq.c     **** 				while (L<R) {
 23308              		.loc 1 4134 10 is_stmt 1 view .LVU6082
 23309 0112 B1E7     		b	.L1648
 23310              	.LBE3229:
 23311              	.LBE3231:
 23312              		.cfi_endproc
 23313              	.LFE226:
 23315              		.section	.text.reset_volatile_state,"ax",%progbits
 23316              		.align	1
 23317              		.p2align 2,,3
 23318              		.global	reset_volatile_state
 23319              		.syntax unified
 23320              		.thumb
 23321              		.thumb_func
 23322              		.fpu fpv4-sp-d16
 23324              	reset_volatile_state:
 23325              	.LFB228:
4201:src/xeq.c     **** 	// extern int IntMaxWindow;
 23326              		.loc 1 4201 33 view -0
 23327              		.cfi_startproc
 23328              		@ args = 0, pretend = 0, frame = 0
 23329              		@ frame_needed = 0, uses_anonymous_args = 0
 23330              		@ link register save eliminated.
4204:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 23331              		.loc 1 4204 2 view .LVU6084
4204:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 23332              		.loc 1 4204 16 is_stmt 0 view .LVU6085
 23333 0000 034B     		ldr	r3, .L1661
 23334 0002 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
4205:src/xeq.c     **** }
 23335              		.loc 1 4205 15 view .LVU6086
 23336 0004 0021     		movs	r1, #0
4204:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 23337              		.loc 1 4204 16 view .LVU6087
 23338 0006 6FF3C502 		bfc	r2, #3, #3
 23339 000a 1A75     		strb	r2, [r3, #20]
4205:src/xeq.c     **** }
 23340              		.loc 1 4205 2 is_stmt 1 view .LVU6088
4205:src/xeq.c     **** }
 23341              		.loc 1 4205 15 is_stmt 0 view .LVU6089
ARM GAS  /tmp/cciWh9P3.s 			page 606


 23342 000c 5974     		strb	r1, [r3, #17]
4206:src/xeq.c     **** 
 23343              		.loc 1 4206 1 view .LVU6090
 23344 000e 7047     		bx	lr
 23345              	.L1662:
 23346              		.align	2
 23347              	.L1661:
 23348 0010 00000000 		.word	StateWhileOn
 23349              		.cfi_endproc
 23350              	.LFE228:
 23352              		.section	.rodata.busy.str1.4,"aMS",%progbits,1
 23353              		.align	2
 23354              	.LC7:
 23355 0000 57616974 		.ascii	"Wait...\000"
 23355      2E2E2E00 
 23356              		.section	.text.busy,"ax",%progbits
 23357              		.align	1
 23358              		.p2align 2,,3
 23359              		.global	busy
 23360              		.syntax unified
 23361              		.thumb
 23362              		.thumb_func
 23363              		.fpu fpv4-sp-d16
 23365              	busy:
 23366              	.LFB229:
4213:src/xeq.c     **** 	/*
 23367              		.loc 1 4213 1 is_stmt 1 view -0
 23368              		.cfi_startproc
 23369              		@ args = 0, pretend = 0, frame = 0
 23370              		@ frame_needed = 0, uses_anonymous_args = 0
 23371              		@ link register save eliminated.
4217:src/xeq.c     **** 
 23372              		.loc 1 4217 12 view .LVU6092
4222:src/xeq.c     **** 
 23373              		.loc 1 4222 17 view .LVU6093
4227:src/xeq.c     **** 		Busy = 1;
 23374              		.loc 1 4227 2 view .LVU6094
4227:src/xeq.c     **** 		Busy = 1;
 23375              		.loc 1 4227 6 is_stmt 0 view .LVU6095
 23376 0000 054A     		ldr	r2, .L1666
4227:src/xeq.c     **** 		Busy = 1;
 23377              		.loc 1 4227 15 view .LVU6096
 23378 0002 064B     		ldr	r3, .L1666+4
4227:src/xeq.c     **** 		Busy = 1;
 23379              		.loc 1 4227 12 view .LVU6097
 23380 0004 1168     		ldr	r1, [r2]
 23381 0006 1B68     		ldr	r3, [r3]
 23382 0008 1943     		orrs	r1, r1, r3
 23383 000a 00D0     		beq	.L1665
4231:src/xeq.c     **** 
 23384              		.loc 1 4231 1 view .LVU6098
 23385 000c 7047     		bx	lr
 23386              	.L1665:
 23387              	.LBB3234:
 23388              	.LBI3234:
4212:src/xeq.c     **** {
 23389              		.loc 1 4212 6 is_stmt 1 view .LVU6099
ARM GAS  /tmp/cciWh9P3.s 			page 607


 23390              	.LBB3235:
4228:src/xeq.c     **** 		message("Wait...", NULL);
 23391              		.loc 1 4228 3 view .LVU6100
4228:src/xeq.c     **** 		message("Wait...", NULL);
 23392              		.loc 1 4228 8 is_stmt 0 view .LVU6101
 23393 000e 0123     		movs	r3, #1
4229:src/xeq.c     **** 	}
 23394              		.loc 1 4229 3 view .LVU6102
 23395 0010 0348     		ldr	r0, .L1666+8
4228:src/xeq.c     **** 		message("Wait...", NULL);
 23396              		.loc 1 4228 8 view .LVU6103
 23397 0012 1360     		str	r3, [r2]
4229:src/xeq.c     **** 	}
 23398              		.loc 1 4229 3 is_stmt 1 view .LVU6104
 23399 0014 FFF7FEBF 		b	message
 23400              	.LVL1830:
 23401              	.L1667:
 23402              		.align	2
 23403              	.L1666:
 23404 0018 00000000 		.word	Busy
 23405 001c 00000000 		.word	Running
 23406 0020 00000000 		.word	.LC7
 23407              	.LBE3235:
 23408              	.LBE3234:
 23409              		.cfi_endproc
 23410              	.LFE229:
 23412              		.section	.text.intMonadic,"ax",%progbits
 23413              		.align	1
 23414              		.p2align 2,,3
 23415              		.global	intMonadic
 23416              		.syntax unified
 23417              		.thumb
 23418              		.thumb_func
 23419              		.fpu fpv4-sp-d16
 23421              	intMonadic:
 23422              	.LVL1831:
 23423              	.LFB233:
4309:src/xeq.c     **** 	int s;
 23424              		.loc 1 4309 43 view -0
 23425              		.cfi_startproc
 23426              		@ args = 0, pretend = 0, frame = 80
 23427              		@ frame_needed = 0, uses_anonymous_args = 0
4310:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
 23428              		.loc 1 4310 2 view .LVU6106
4311:src/xeq.c     **** 	decNumber rx, r;
 23429              		.loc 1 4311 2 view .LVU6107
4309:src/xeq.c     **** 	int s;
 23430              		.loc 1 4309 43 is_stmt 0 view .LVU6108
 23431 0000 30B5     		push	{r4, r5, lr}
 23432              		.cfi_def_cfa_offset 12
 23433              		.cfi_offset 4, -12
 23434              		.cfi_offset 5, -8
 23435              		.cfi_offset 14, -4
 23436 0002 95B0     		sub	sp, sp, #84
 23437              		.cfi_def_cfa_offset 96
4311:src/xeq.c     **** 	decNumber rx, r;
 23438              		.loc 1 4311 30 view .LVU6109
ARM GAS  /tmp/cciWh9P3.s 			page 608


 23439 0004 01AA     		add	r2, sp, #4
 23440 0006 FFF7FEFF 		bl	extract_value
 23441              	.LVL1832:
4313:src/xeq.c     **** 
 23442              		.loc 1 4313 19 view .LVU6110
 23443 000a 1E4A     		ldr	r2, .L1683
4315:src/xeq.c     **** 		bad_mode_error();
 23444              		.loc 1 4315 6 view .LVU6111
 23445 000c 1E4B     		ldr	r3, .L1683+4
4313:src/xeq.c     **** 
 23446              		.loc 1 4313 15 view .LVU6112
 23447 000e 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4315:src/xeq.c     **** 		bad_mode_error();
 23448              		.loc 1 4315 6 view .LVU6113
 23449 0010 04EB4404 		add	r4, r4, r4, lsl #1
 23450 0014 53F83440 		ldr	r4, [r3, r4, lsl #3]
 23451              	.LVL1833:
4312:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 23452              		.loc 1 4312 2 is_stmt 1 view .LVU6114
4313:src/xeq.c     **** 
 23453              		.loc 1 4313 2 view .LVU6115
4315:src/xeq.c     **** 		bad_mode_error();
 23454              		.loc 1 4315 2 view .LVU6116
4315:src/xeq.c     **** 		bad_mode_error();
 23455              		.loc 1 4315 5 is_stmt 0 view .LVU6117
 23456 0018 5CB1     		cbz	r4, .L1673
 23457              	.LBB3253:
4318:src/xeq.c     **** #ifndef REALBUILD
 23458              		.loc 1 4318 3 is_stmt 1 view .LVU6118
 23459              	.LVL1834:
4320:src/xeq.c     **** 			bad_mode_error();
 23460              		.loc 1 4320 3 view .LVU6119
 23461              	.LBB3254:
 23462              	.LBI3254:
4247:src/xeq.c     **** {
 23463              		.loc 1 4247 24 view .LVU6120
 23464              	.LBB3255:
4249:src/xeq.c     **** 	if (xp < xrom)
 23465              		.loc 1 4249 2 view .LVU6121
4250:src/xeq.c     **** 		return NULL;
 23466              		.loc 1 4250 5 is_stmt 0 view .LVU6122
 23467 001a 1C4B     		ldr	r3, .L1683+8
4249:src/xeq.c     **** 	if (xp < xrom)
 23468              		.loc 1 4249 59 view .LVU6123
 23469 001c 24F00102 		bic	r2, r4, #1
 23470              	.LVL1835:
4250:src/xeq.c     **** 		return NULL;
 23471              		.loc 1 4250 2 is_stmt 1 view .LVU6124
4250:src/xeq.c     **** 		return NULL;
 23472              		.loc 1 4250 5 is_stmt 0 view .LVU6125
 23473 0020 9A42     		cmp	r2, r3
 23474 0022 10D3     		bcc	.L1672
4254:src/xeq.c     **** 		return NULL;
 23475              		.loc 1 4254 2 is_stmt 1 view .LVU6126
4254:src/xeq.c     **** 		return NULL;
 23476              		.loc 1 4254 17 is_stmt 0 view .LVU6127
 23477 0024 1A4D     		ldr	r5, .L1683+12
ARM GAS  /tmp/cciWh9P3.s 			page 609


 23478 0026 2D88     		ldrh	r5, [r5]
 23479 0028 03EB4503 		add	r3, r3, r5, lsl #1
4254:src/xeq.c     **** 		return NULL;
 23480              		.loc 1 4254 5 view .LVU6128
 23481 002c 9A42     		cmp	r2, r3
 23482 002e 0AD2     		bcs	.L1672
 23483              	.LVL1836:
4254:src/xeq.c     **** 		return NULL;
 23484              		.loc 1 4254 5 view .LVU6129
 23485              	.LBE3255:
 23486              	.LBE3254:
4320:src/xeq.c     **** 			bad_mode_error();
 23487              		.loc 1 4320 6 view .LVU6130
 23488 0030 4AB1     		cbz	r2, .L1672
 23489              	.LVL1837:
 23490              	.L1673:
4320:src/xeq.c     **** 			bad_mode_error();
 23491              		.loc 1 4320 6 view .LVU6131
 23492              	.LBE3253:
4316:src/xeq.c     **** 	else {
 23493              		.loc 1 4316 3 is_stmt 1 view .LVU6132
 23494              	.LBB3264:
 23495              	.LBI3264:
 565:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 23496              		.loc 1 565 6 view .LVU6133
 23497              	.LBE3264:
 566:src/xeq.c     **** }
 23498              		.loc 1 566 2 view .LVU6134
 23499              	.LBB3273:
 23500              	.LBB3265:
 23501              	.LBI3265:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23502              		.loc 1 536 5 view .LVU6135
 23503              	.LBB3266:
 537:src/xeq.c     **** 		Error = e;
 23504              		.loc 1 537 2 view .LVU6136
 537:src/xeq.c     **** 		Error = e;
 23505              		.loc 1 537 12 is_stmt 0 view .LVU6137
 23506 0032 184B     		ldr	r3, .L1683+16
 537:src/xeq.c     **** 		Error = e;
 23507              		.loc 1 537 5 view .LVU6138
 23508 0034 1A68     		ldr	r2, [r3]
 23509 0036 1AB1     		cbz	r2, .L1670
 23510              	.LVL1838:
 23511              	.L1681:
 23512              	.LBB3267:
 23513              	.LBB3268:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 23514              		.loc 1 539 3 is_stmt 1 view .LVU6139
 23515              	.LBE3268:
 23516              	.LBE3267:
 23517              	.LBE3266:
 23518              	.LBE3265:
 23519              	.LBE3273:
4334:src/xeq.c     **** }
 23520              		.loc 1 4334 9 is_stmt 0 view .LVU6140
 23521 0038 0020     		movs	r0, #0
ARM GAS  /tmp/cciWh9P3.s 			page 610


 23522 003a 0146     		mov	r1, r0
4335:src/xeq.c     **** 
 23523              		.loc 1 4335 1 view .LVU6141
 23524 003c 15B0     		add	sp, sp, #84
 23525              		.cfi_remember_state
 23526              		.cfi_def_cfa_offset 12
 23527              		@ sp needed
 23528 003e 30BD     		pop	{r4, r5, pc}
 23529              	.LVL1839:
 23530              	.L1670:
 23531              		.cfi_restore_state
 23532              	.LBB3274:
 23533              	.LBB3272:
 23534              	.LBB3271:
 23535              	.LBB3270:
 23536              	.LBI3267:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23537              		.loc 1 536 5 is_stmt 1 view .LVU6142
 23538              	.LBB3269:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 23539              		.loc 1 538 3 view .LVU6143
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 23540              		.loc 1 538 9 is_stmt 0 view .LVU6144
 23541 0040 0D22     		movs	r2, #13
 23542 0042 1A60     		str	r2, [r3]
 23543 0044 F8E7     		b	.L1681
 23544              	.LVL1840:
 23545              	.L1672:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 23546              		.loc 1 538 9 view .LVU6145
 23547              	.LBE3269:
 23548              	.LBE3270:
 23549              	.LBE3271:
 23550              	.LBE3272:
 23551              	.LBE3274:
 23552              	.LBB3275:
4325:src/xeq.c     **** 			if (s)
 23553              		.loc 1 4325 4 is_stmt 1 view .LVU6146
 23554 0046 0246     		mov	r2, r0
 23555 0048 0B46     		mov	r3, r1
 23556 004a 02A8     		add	r0, sp, #8
 23557              	.LVL1841:
4325:src/xeq.c     **** 			if (s)
 23558              		.loc 1 4325 4 is_stmt 0 view .LVU6147
 23559 004c FFF7FEFF 		bl	ullint_to_dn
 23560              	.LVL1842:
4326:src/xeq.c     **** 				dn_minus(&rx, &rx);
 23561              		.loc 1 4326 4 is_stmt 1 view .LVU6148
4326:src/xeq.c     **** 				dn_minus(&rx, &rx);
 23562              		.loc 1 4326 7 is_stmt 0 view .LVU6149
 23563 0050 019B     		ldr	r3, [sp, #4]
 23564 0052 8BB9     		cbnz	r3, .L1682
 23565              	.L1674:
4328:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23566              		.loc 1 4328 4 is_stmt 1 view .LVU6150
4328:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23567              		.loc 1 4328 16 is_stmt 0 view .LVU6151
ARM GAS  /tmp/cciWh9P3.s 			page 611


 23568 0054 02A9     		add	r1, sp, #8
 23569 0056 0BA8     		add	r0, sp, #44
 23570 0058 A047     		blx	r4
 23571              	.LVL1843:
4328:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23572              		.loc 1 4328 7 view .LVU6152
 23573 005a 40B9     		cbnz	r0, .L1675
4329:src/xeq.c     **** 			else
 23574              		.loc 1 4329 5 is_stmt 1 view .LVU6153
 23575              	.LVL1844:
 23576              	.LBB3256:
 23577              	.LBI3256:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23578              		.loc 1 536 5 view .LVU6154
 23579              	.LBB3257:
 537:src/xeq.c     **** 		Error = e;
 23580              		.loc 1 537 2 view .LVU6155
 537:src/xeq.c     **** 		Error = e;
 23581              		.loc 1 537 12 is_stmt 0 view .LVU6156
 23582 005c 0D4B     		ldr	r3, .L1683+16
 537:src/xeq.c     **** 		Error = e;
 23583              		.loc 1 537 5 view .LVU6157
 23584 005e 1A68     		ldr	r2, [r3]
 23585 0060 002A     		cmp	r2, #0
 23586 0062 E9D1     		bne	.L1681
 23587              	.LVL1845:
 23588              	.LBB3258:
 23589              	.LBI3258:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23590              		.loc 1 536 5 is_stmt 1 view .LVU6158
 23591              	.LBB3259:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 23592              		.loc 1 538 3 view .LVU6159
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 23593              		.loc 1 538 9 is_stmt 0 view .LVU6160
 23594 0064 0122     		movs	r2, #1
 23595              	.LBE3259:
 23596              	.LBE3258:
 23597              	.LBE3257:
 23598              	.LBE3256:
 23599              	.LBE3275:
4334:src/xeq.c     **** }
 23600              		.loc 1 4334 9 view .LVU6161
 23601 0066 0146     		mov	r1, r0
 23602              	.LBB3276:
 23603              	.LBB3263:
 23604              	.LBB3262:
 23605              	.LBB3261:
 23606              	.LBB3260:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 23607              		.loc 1 538 9 view .LVU6162
 23608 0068 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 23609              		.loc 1 539 3 is_stmt 1 view .LVU6163
 23610              	.LBE3260:
 23611              	.LBE3261:
 23612              	.LBE3262:
ARM GAS  /tmp/cciWh9P3.s 			page 612


 23613              	.LBE3263:
 23614              	.LBE3276:
4335:src/xeq.c     **** 
 23615              		.loc 1 4335 1 is_stmt 0 view .LVU6164
 23616 006a 15B0     		add	sp, sp, #84
 23617              		.cfi_remember_state
 23618              		.cfi_def_cfa_offset 12
 23619              		@ sp needed
 23620 006c 30BD     		pop	{r4, r5, pc}
 23621              	.LVL1846:
 23622              	.L1675:
 23623              		.cfi_restore_state
 23624              	.LBB3277:
4331:src/xeq.c     **** 		}
 23625              		.loc 1 4331 5 is_stmt 1 view .LVU6165
4331:src/xeq.c     **** 		}
 23626              		.loc 1 4331 12 is_stmt 0 view .LVU6166
 23627 006e 0BA8     		add	r0, sp, #44
 23628 0070 FFF7FEFF 		bl	intResult
 23629              	.LVL1847:
 23630              	.LBE3277:
4335:src/xeq.c     **** 
 23631              		.loc 1 4335 1 view .LVU6167
 23632 0074 15B0     		add	sp, sp, #84
 23633              		.cfi_remember_state
 23634              		.cfi_def_cfa_offset 12
 23635              		@ sp needed
 23636 0076 30BD     		pop	{r4, r5, pc}
 23637              	.LVL1848:
 23638              	.L1682:
 23639              		.cfi_restore_state
 23640              	.LBB3278:
4327:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
 23641              		.loc 1 4327 5 is_stmt 1 view .LVU6168
 23642 0078 02A9     		add	r1, sp, #8
 23643 007a 0846     		mov	r0, r1
 23644 007c FFF7FEFF 		bl	dn_minus
 23645              	.LVL1849:
 23646 0080 E8E7     		b	.L1674
 23647              	.L1684:
 23648 0082 00BF     		.align	2
 23649              	.L1683:
 23650 0084 00000000 		.word	XeqOpCode
 23651 0088 00000000 		.word	monfuncs
 23652 008c 00000000 		.word	xrom
 23653 0090 00000000 		.word	xrom_size
 23654 0094 00000000 		.word	Error
 23655              	.LBE3278:
 23656              		.cfi_endproc
 23657              	.LFE233:
 23659              		.section	.text.intDyadic,"ax",%progbits
 23660              		.align	1
 23661              		.p2align 2,,3
 23662              		.global	intDyadic
 23663              		.syntax unified
 23664              		.thumb
 23665              		.thumb_func
ARM GAS  /tmp/cciWh9P3.s 			page 613


 23666              		.fpu fpv4-sp-d16
 23668              	intDyadic:
 23669              	.LVL1850:
 23670              	.LFB234:
4340:src/xeq.c     **** 	int sx, sy;
 23671              		.loc 1 4340 59 view -0
 23672              		.cfi_startproc
 23673              		@ args = 0, pretend = 0, frame = 120
 23674              		@ frame_needed = 0, uses_anonymous_args = 0
4341:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 23675              		.loc 1 4341 2 view .LVU6170
4342:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 23676              		.loc 1 4342 2 view .LVU6171
4340:src/xeq.c     **** 	int sx, sy;
 23677              		.loc 1 4340 59 is_stmt 0 view .LVU6172
 23678 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 23679              		.cfi_def_cfa_offset 24
 23680              		.cfi_offset 4, -24
 23681              		.cfi_offset 5, -20
 23682              		.cfi_offset 6, -16
 23683              		.cfi_offset 7, -12
 23684              		.cfi_offset 8, -8
 23685              		.cfi_offset 14, -4
 23686 0004 9EB0     		sub	sp, sp, #120
 23687              		.cfi_def_cfa_offset 144
4340:src/xeq.c     **** 	int sx, sy;
 23688              		.loc 1 4340 59 view .LVU6173
 23689 0006 0546     		mov	r5, r0
 23690 0008 0C46     		mov	r4, r1
4342:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 23691              		.loc 1 4342 30 view .LVU6174
 23692 000a 1046     		mov	r0, r2
 23693              	.LVL1851:
4342:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 23694              		.loc 1 4342 30 view .LVU6175
 23695 000c 1946     		mov	r1, r3
 23696 000e 01AA     		add	r2, sp, #4
 23697              	.LVL1852:
4342:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 23698              		.loc 1 4342 30 view .LVU6176
 23699 0010 FFF7FEFF 		bl	extract_value
 23700              	.LVL1853:
4343:src/xeq.c     **** 	decNumber rx, ry, r;
 23701              		.loc 1 4343 30 view .LVU6177
 23702 0014 02AA     		add	r2, sp, #8
4342:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 23703              		.loc 1 4342 30 view .LVU6178
 23704 0016 0B46     		mov	r3, r1
 23705 0018 0646     		mov	r6, r0
4343:src/xeq.c     **** 	decNumber rx, ry, r;
 23706              		.loc 1 4343 30 view .LVU6179
 23707 001a 2146     		mov	r1, r4
 23708 001c 2846     		mov	r0, r5
4342:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 23709              		.loc 1 4342 30 view .LVU6180
 23710 001e 1D46     		mov	r5, r3
 23711              	.LVL1854:
ARM GAS  /tmp/cciWh9P3.s 			page 614


4343:src/xeq.c     **** 	decNumber rx, ry, r;
 23712              		.loc 1 4343 2 is_stmt 1 view .LVU6181
4343:src/xeq.c     **** 	decNumber rx, ry, r;
 23713              		.loc 1 4343 30 is_stmt 0 view .LVU6182
 23714 0020 FFF7FEFF 		bl	extract_value
 23715              	.LVL1855:
4345:src/xeq.c     **** 
 23716              		.loc 1 4345 19 view .LVU6183
 23717 0024 264A     		ldr	r2, .L1705
4347:src/xeq.c     **** 		bad_mode_error();
 23718              		.loc 1 4347 6 view .LVU6184
 23719 0026 274B     		ldr	r3, .L1705+4
4345:src/xeq.c     **** 
 23720              		.loc 1 4345 15 view .LVU6185
 23721 0028 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4347:src/xeq.c     **** 		bad_mode_error();
 23722              		.loc 1 4347 6 view .LVU6186
 23723 002a 04EB4404 		add	r4, r4, r4, lsl #1
 23724 002e 53F83440 		ldr	r4, [r3, r4, lsl #3]
 23725              	.LVL1856:
4344:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 23726              		.loc 1 4344 2 is_stmt 1 view .LVU6187
4345:src/xeq.c     **** 
 23727              		.loc 1 4345 2 view .LVU6188
4347:src/xeq.c     **** 		bad_mode_error();
 23728              		.loc 1 4347 2 view .LVU6189
4347:src/xeq.c     **** 		bad_mode_error();
 23729              		.loc 1 4347 5 is_stmt 0 view .LVU6190
 23730 0032 6CB1     		cbz	r4, .L1690
 23731              	.LBB3296:
 23732              	.LBB3297:
 23733              	.LBB3298:
4250:src/xeq.c     **** 		return NULL;
 23734              		.loc 1 4250 5 view .LVU6191
 23735 0034 244B     		ldr	r3, .L1705+8
4249:src/xeq.c     **** 	if (xp < xrom)
 23736              		.loc 1 4249 59 view .LVU6192
 23737 0036 24F00102 		bic	r2, r4, #1
 23738              	.LVL1857:
4250:src/xeq.c     **** 		return NULL;
 23739              		.loc 1 4250 5 view .LVU6193
 23740 003a 9A42     		cmp	r2, r3
 23741 003c 0746     		mov	r7, r0
 23742 003e 8846     		mov	r8, r1
 23743              	.LBE3298:
 23744              	.LBE3297:
4350:src/xeq.c     **** 
 23745              		.loc 1 4350 3 is_stmt 1 view .LVU6194
 23746              	.LVL1858:
4353:src/xeq.c     **** 			bad_mode_error();
 23747              		.loc 1 4353 3 view .LVU6195
 23748              	.LBB3300:
 23749              	.LBI3297:
4247:src/xeq.c     **** {
 23750              		.loc 1 4247 24 view .LVU6196
 23751              	.LBB3299:
4249:src/xeq.c     **** 	if (xp < xrom)
ARM GAS  /tmp/cciWh9P3.s 			page 615


 23752              		.loc 1 4249 2 view .LVU6197
4250:src/xeq.c     **** 		return NULL;
 23753              		.loc 1 4250 2 view .LVU6198
4250:src/xeq.c     **** 		return NULL;
 23754              		.loc 1 4250 5 is_stmt 0 view .LVU6199
 23755 0040 11D3     		bcc	.L1689
4254:src/xeq.c     **** 		return NULL;
 23756              		.loc 1 4254 2 is_stmt 1 view .LVU6200
4254:src/xeq.c     **** 		return NULL;
 23757              		.loc 1 4254 17 is_stmt 0 view .LVU6201
 23758 0042 2249     		ldr	r1, .L1705+12
 23759              	.LVL1859:
4254:src/xeq.c     **** 		return NULL;
 23760              		.loc 1 4254 17 view .LVU6202
 23761 0044 0988     		ldrh	r1, [r1]
 23762 0046 03EB4103 		add	r3, r3, r1, lsl #1
4254:src/xeq.c     **** 		return NULL;
 23763              		.loc 1 4254 5 view .LVU6203
 23764 004a 9A42     		cmp	r2, r3
 23765 004c 0BD2     		bcs	.L1689
 23766              	.LVL1860:
4254:src/xeq.c     **** 		return NULL;
 23767              		.loc 1 4254 5 view .LVU6204
 23768              	.LBE3299:
 23769              	.LBE3300:
4353:src/xeq.c     **** 			bad_mode_error();
 23770              		.loc 1 4353 6 view .LVU6205
 23771 004e 52B1     		cbz	r2, .L1689
 23772              	.LVL1861:
 23773              	.L1690:
4353:src/xeq.c     **** 			bad_mode_error();
 23774              		.loc 1 4353 6 view .LVU6206
 23775              	.LBE3296:
4348:src/xeq.c     **** 	else {
 23776              		.loc 1 4348 3 is_stmt 1 view .LVU6207
 23777              	.LBB3309:
 23778              	.LBI3309:
 565:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 23779              		.loc 1 565 6 view .LVU6208
 23780              	.LBE3309:
 566:src/xeq.c     **** }
 23781              		.loc 1 566 2 view .LVU6209
 23782              	.LBB3318:
 23783              	.LBB3310:
 23784              	.LBI3310:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23785              		.loc 1 536 5 view .LVU6210
 23786              	.LBB3311:
 537:src/xeq.c     **** 		Error = e;
 23787              		.loc 1 537 2 view .LVU6211
 537:src/xeq.c     **** 		Error = e;
 23788              		.loc 1 537 12 is_stmt 0 view .LVU6212
 23789 0050 1F4B     		ldr	r3, .L1705+16
 537:src/xeq.c     **** 		Error = e;
 23790              		.loc 1 537 5 view .LVU6213
 23791 0052 1A68     		ldr	r2, [r3]
 23792 0054 22B1     		cbz	r2, .L1687
ARM GAS  /tmp/cciWh9P3.s 			page 616


 23793              	.LVL1862:
 23794              	.L1702:
 23795              	.LBB3312:
 23796              	.LBB3313:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 23797              		.loc 1 539 3 is_stmt 1 view .LVU6214
 23798              	.LBE3313:
 23799              	.LBE3312:
 23800              	.LBE3311:
 23801              	.LBE3310:
 23802              	.LBE3318:
4367:src/xeq.c     **** }
 23803              		.loc 1 4367 9 is_stmt 0 view .LVU6215
 23804 0056 0020     		movs	r0, #0
 23805 0058 0146     		mov	r1, r0
4368:src/xeq.c     **** 
 23806              		.loc 1 4368 1 view .LVU6216
 23807 005a 1EB0     		add	sp, sp, #120
 23808              		.cfi_remember_state
 23809              		.cfi_def_cfa_offset 24
 23810              		@ sp needed
 23811 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 23812              	.LVL1863:
 23813              	.L1687:
 23814              		.cfi_restore_state
 23815              	.LBB3319:
 23816              	.LBB3317:
 23817              	.LBB3316:
 23818              	.LBB3315:
 23819              	.LBI3312:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23820              		.loc 1 536 5 is_stmt 1 view .LVU6217
 23821              	.LBB3314:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 23822              		.loc 1 538 3 view .LVU6218
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 23823              		.loc 1 538 9 is_stmt 0 view .LVU6219
 23824 0060 0D22     		movs	r2, #13
 23825 0062 1A60     		str	r2, [r3]
 23826 0064 F7E7     		b	.L1702
 23827              	.LVL1864:
 23828              	.L1689:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 23829              		.loc 1 538 9 view .LVU6220
 23830              	.LBE3314:
 23831              	.LBE3315:
 23832              	.LBE3316:
 23833              	.LBE3317:
 23834              	.LBE3319:
 23835              	.LBB3320:
4358:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 23836              		.loc 1 4358 4 is_stmt 1 view .LVU6221
 23837 0066 2B46     		mov	r3, r5
 23838 0068 3246     		mov	r2, r6
 23839 006a 03A8     		add	r0, sp, #12
 23840              	.LVL1865:
4358:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
ARM GAS  /tmp/cciWh9P3.s 			page 617


 23841              		.loc 1 4358 4 is_stmt 0 view .LVU6222
 23842 006c FFF7FEFF 		bl	ullint_to_dn
 23843              	.LVL1866:
4358:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 23844              		.loc 1 4358 27 is_stmt 1 view .LVU6223
4358:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 23845              		.loc 1 4358 30 is_stmt 0 view .LVU6224
 23846 0070 019B     		ldr	r3, [sp, #4]
 23847 0072 03BB     		cbnz	r3, .L1703
 23848              	.L1691:
4359:src/xeq.c     **** 
 23849              		.loc 1 4359 4 is_stmt 1 view .LVU6225
 23850 0074 4346     		mov	r3, r8
 23851 0076 3A46     		mov	r2, r7
 23852 0078 0CA8     		add	r0, sp, #48
 23853 007a FFF7FEFF 		bl	ullint_to_dn
 23854              	.LVL1867:
4359:src/xeq.c     **** 
 23855              		.loc 1 4359 27 view .LVU6226
4359:src/xeq.c     **** 
 23856              		.loc 1 4359 30 is_stmt 0 view .LVU6227
 23857 007e 029B     		ldr	r3, [sp, #8]
 23858 0080 A3B9     		cbnz	r3, .L1704
 23859              	.L1692:
4361:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23860              		.loc 1 4361 4 is_stmt 1 view .LVU6228
4361:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23861              		.loc 1 4361 16 is_stmt 0 view .LVU6229
 23862 0082 03AA     		add	r2, sp, #12
 23863 0084 0CA9     		add	r1, sp, #48
 23864 0086 15A8     		add	r0, sp, #84
 23865 0088 A047     		blx	r4
 23866              	.LVL1868:
4361:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 23867              		.loc 1 4361 7 view .LVU6230
 23868 008a 48B9     		cbnz	r0, .L1693
4362:src/xeq.c     **** 			else
 23869              		.loc 1 4362 5 is_stmt 1 view .LVU6231
 23870              	.LVL1869:
 23871              	.LBB3301:
 23872              	.LBI3301:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23873              		.loc 1 536 5 view .LVU6232
 23874              	.LBB3302:
 537:src/xeq.c     **** 		Error = e;
 23875              		.loc 1 537 2 view .LVU6233
 537:src/xeq.c     **** 		Error = e;
 23876              		.loc 1 537 12 is_stmt 0 view .LVU6234
 23877 008c 104B     		ldr	r3, .L1705+16
 537:src/xeq.c     **** 		Error = e;
 23878              		.loc 1 537 5 view .LVU6235
 23879 008e 1A68     		ldr	r2, [r3]
 23880 0090 002A     		cmp	r2, #0
 23881 0092 E0D1     		bne	.L1702
 23882              	.LVL1870:
 23883              	.LBB3303:
 23884              	.LBI3303:
ARM GAS  /tmp/cciWh9P3.s 			page 618


 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23885              		.loc 1 536 5 is_stmt 1 view .LVU6236
 23886              	.LBB3304:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 23887              		.loc 1 538 3 view .LVU6237
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 23888              		.loc 1 538 9 is_stmt 0 view .LVU6238
 23889 0094 0122     		movs	r2, #1
 23890              	.LBE3304:
 23891              	.LBE3303:
 23892              	.LBE3302:
 23893              	.LBE3301:
 23894              	.LBE3320:
4367:src/xeq.c     **** }
 23895              		.loc 1 4367 9 view .LVU6239
 23896 0096 0146     		mov	r1, r0
 23897              	.LBB3321:
 23898              	.LBB3308:
 23899              	.LBB3307:
 23900              	.LBB3306:
 23901              	.LBB3305:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 23902              		.loc 1 538 9 view .LVU6240
 23903 0098 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 23904              		.loc 1 539 3 is_stmt 1 view .LVU6241
 23905              	.LBE3305:
 23906              	.LBE3306:
 23907              	.LBE3307:
 23908              	.LBE3308:
 23909              	.LBE3321:
4368:src/xeq.c     **** 
 23910              		.loc 1 4368 1 is_stmt 0 view .LVU6242
 23911 009a 1EB0     		add	sp, sp, #120
 23912              		.cfi_remember_state
 23913              		.cfi_def_cfa_offset 24
 23914              		@ sp needed
 23915 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 23916              	.LVL1871:
 23917              	.L1693:
 23918              		.cfi_restore_state
 23919              	.LBB3322:
4364:src/xeq.c     **** 		}
 23920              		.loc 1 4364 5 is_stmt 1 view .LVU6243
4364:src/xeq.c     **** 		}
 23921              		.loc 1 4364 12 is_stmt 0 view .LVU6244
 23922 00a0 15A8     		add	r0, sp, #84
 23923 00a2 FFF7FEFF 		bl	intResult
 23924              	.LVL1872:
 23925              	.LBE3322:
4368:src/xeq.c     **** 
 23926              		.loc 1 4368 1 view .LVU6245
 23927 00a6 1EB0     		add	sp, sp, #120
 23928              		.cfi_remember_state
 23929              		.cfi_def_cfa_offset 24
 23930              		@ sp needed
 23931 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/cciWh9P3.s 			page 619


 23932              	.LVL1873:
 23933              	.L1704:
 23934              		.cfi_restore_state
 23935              	.LBB3323:
4359:src/xeq.c     **** 
 23936              		.loc 1 4359 35 is_stmt 1 discriminator 1 view .LVU6246
 23937 00ac 0CA9     		add	r1, sp, #48
 23938 00ae 0846     		mov	r0, r1
 23939 00b0 FFF7FEFF 		bl	dn_minus
 23940              	.LVL1874:
 23941 00b4 E5E7     		b	.L1692
 23942              	.L1703:
4358:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 23943              		.loc 1 4358 35 discriminator 1 view .LVU6247
 23944 00b6 03A9     		add	r1, sp, #12
 23945 00b8 0846     		mov	r0, r1
 23946 00ba FFF7FEFF 		bl	dn_minus
 23947              	.LVL1875:
 23948 00be D9E7     		b	.L1691
 23949              	.L1706:
 23950              		.align	2
 23951              	.L1705:
 23952 00c0 00000000 		.word	XeqOpCode
 23953 00c4 00000000 		.word	dyfuncs
 23954 00c8 00000000 		.word	xrom
 23955 00cc 00000000 		.word	xrom_size
 23956 00d0 00000000 		.word	Error
 23957              	.LBE3323:
 23958              		.cfi_endproc
 23959              	.LFE234:
 23961              		.section	.text.xeq_init_contexts,"ax",%progbits
 23962              		.align	1
 23963              		.p2align 2,,3
 23964              		.global	xeq_init_contexts
 23965              		.syntax unified
 23966              		.thumb
 23967              		.thumb_func
 23968              		.fpu fpv4-sp-d16
 23970              	xeq_init_contexts:
 23971              	.LFB251:
5384:src/xeq.c     **** 	/*
 23972              		.loc 1 5384 30 view -0
 23973              		.cfi_startproc
 23974              		@ args = 0, pretend = 0, frame = 0
 23975              		@ frame_needed = 0, uses_anonymous_args = 0
5388:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
 23976              		.loc 1 5388 2 view .LVU6249
5389:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 23977              		.loc 1 5389 2 view .LVU6250
5384:src/xeq.c     **** 	/*
 23978              		.loc 1 5384 30 is_stmt 0 view .LVU6251
 23979 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 23980              		.cfi_def_cfa_offset 24
 23981              		.cfi_offset 3, -24
 23982              		.cfi_offset 4, -20
 23983              		.cfi_offset 5, -16
 23984              		.cfi_offset 6, -12
ARM GAS  /tmp/cciWh9P3.s 			page 620


 23985              		.cfi_offset 7, -8
 23986              		.cfi_offset 14, -4
5389:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 23987              		.loc 1 5389 17 view .LVU6252
 23988 0002 1D4B     		ldr	r3, .L1712
5392:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 23989              		.loc 1 5392 13 view .LVU6253
 23990 0004 1D4F     		ldr	r7, .L1712+4
5389:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 23991              		.loc 1 5389 17 view .LVU6254
 23992 0006 1A68     		ldr	r2, [r3]
5389:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 23993              		.loc 1 5389 34 view .LVU6255
 23994 0008 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
5390:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 23995              		.loc 1 5390 21 view .LVU6256
 23996 000c 92F8CF17 		ldrb	r1, [r2, #1999]	@ zero_extendqisi2
5392:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 23997              		.loc 1 5392 36 view .LVU6257
 23998 0010 5088     		ldrh	r0, [r2, #2]
5394:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 23999              		.loc 1 5394 34 view .LVU6258
 24000 0012 B2F9E247 		ldrsh	r4, [r2, #2018]
5389:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24001              		.loc 1 5389 59 view .LVU6259
 24002 0016 13F02003 		ands	r3, r3, #32
 24003 001a 18BF     		it	ne
 24004 001c 4623     		movne	r3, #70
5390:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 24005              		.loc 1 5390 19 view .LVU6260
 24006 001e C1F16401 		rsb	r1, r1, #100
5389:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24007              		.loc 1 5389 59 view .LVU6261
 24008 0022 1E46     		mov	r6, r3
5390:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 24009              		.loc 1 5390 36 view .LVU6262
 24010 0024 C3EB8103 		rsb	r3, r3, r1, lsl #2
5393:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 24011              		.loc 1 5393 31 view .LVU6263
 24012 0028 03F50471 		add	r1, r3, #528
 24013 002c 89B2     		uxth	r1, r1
5394:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24014              		.loc 1 5394 21 view .LVU6264
 24015 002e 0D1A     		subs	r5, r1, r0
5391:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24016              		.loc 1 5391 22 view .LVU6265
 24017 0030 03F21623 		addw	r3, r3, #534
5392:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 24018              		.loc 1 5392 34 view .LVU6266
 24019 0034 181A     		subs	r0, r3, r0
5394:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24020              		.loc 1 5394 32 view .LVU6267
 24021 0036 2544     		add	r5, r5, r4
5391:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24022              		.loc 1 5391 11 view .LVU6268
 24023 0038 141D     		adds	r4, r2, #4
5392:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
ARM GAS  /tmp/cciWh9P3.s 			page 621


 24024              		.loc 1 5392 13 view .LVU6269
 24025 003a 3860     		str	r0, [r7]
5391:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24026              		.loc 1 5391 22 view .LVU6270
 24027 003c 04EB4303 		add	r3, r4, r3, lsl #1
5389:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24028              		.loc 1 5389 15 view .LVU6271
 24029 0040 0F48     		ldr	r0, .L1712+8
5391:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24030              		.loc 1 5391 9 view .LVU6272
 24031 0042 104C     		ldr	r4, .L1712+12
5394:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24032              		.loc 1 5394 11 view .LVU6273
 24033 0044 104F     		ldr	r7, .L1712+16
5391:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24034              		.loc 1 5391 9 view .LVU6274
 24035 0046 2360     		str	r3, [r4]
5389:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 24036              		.loc 1 5389 15 view .LVU6275
 24037 0048 0660     		str	r6, [r0]
5390:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 24038              		.loc 1 5390 2 is_stmt 1 view .LVU6276
 24039              	.LVL1876:
5391:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 24040              		.loc 1 5391 2 view .LVU6277
5392:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 24041              		.loc 1 5392 2 view .LVU6278
5393:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 24042              		.loc 1 5393 2 view .LVU6279
5393:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 24043              		.loc 1 5393 10 is_stmt 0 view .LVU6280
 24044 004a 1180     		strh	r1, [r2]	@ movhi
5394:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24045              		.loc 1 5394 2 is_stmt 1 view .LVU6281
5395:src/xeq.c     **** 
 24046              		.loc 1 5395 14 is_stmt 0 view .LVU6282
 24047 004c 6420     		movs	r0, #100
5394:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 24048              		.loc 1 5394 11 view .LVU6283
 24049 004e 3D60     		str	r5, [r7]
5395:src/xeq.c     **** 
 24050              		.loc 1 5395 2 is_stmt 1 view .LVU6284
5395:src/xeq.c     **** 
 24051              		.loc 1 5395 14 is_stmt 0 view .LVU6285
 24052 0050 FFF7FEFF 		bl	get_reg_n
 24053              	.LVL1877:
5401:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 24054              		.loc 1 5401 2 view .LVU6286
 24055 0054 0D4C     		ldr	r4, .L1712+20
5395:src/xeq.c     **** 
 24056              		.loc 1 5395 12 view .LVU6287
 24057 0056 0E4B     		ldr	r3, .L1712+24
5395:src/xeq.c     **** 
 24058              		.loc 1 5395 14 view .LVU6288
 24059 0058 0246     		mov	r2, r0
5401:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 24060              		.loc 1 5401 2 view .LVU6289
ARM GAS  /tmp/cciWh9P3.s 			page 622


 24061 005a 0021     		movs	r1, #0
 24062 005c 2046     		mov	r0, r4
5395:src/xeq.c     **** 
 24063              		.loc 1 5395 12 view .LVU6290
 24064 005e 1A60     		str	r2, [r3]
5401:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 24065              		.loc 1 5401 2 is_stmt 1 view .LVU6291
 24066 0060 FFF7FEFF 		bl	decContextDefault
 24067              	.LVL1878:
5402:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 24068              		.loc 1 5402 2 view .LVU6292
5402:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 24069              		.loc 1 5402 13 is_stmt 0 view .LVU6293
 24070 0064 2723     		movs	r3, #39
5403:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 24071              		.loc 1 5403 10 view .LVU6294
 24072 0066 0B49     		ldr	r1, .L1712+28
5404:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 24073              		.loc 1 5404 10 view .LVU6295
 24074 0068 0B4A     		ldr	r2, .L1712+32
5402:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 24075              		.loc 1 5402 13 view .LVU6296
 24076 006a 2360     		str	r3, [r4]
5403:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 24077              		.loc 1 5403 2 is_stmt 1 view .LVU6297
5405:src/xeq.c     **** }
 24078              		.loc 1 5405 12 is_stmt 0 view .LVU6298
 24079 006c 0323     		movs	r3, #3
 24080 006e 2373     		strb	r3, [r4, #12]
5404:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 24081              		.loc 1 5404 10 view .LVU6299
 24082 0070 C4E90112 		strd	r1, r2, [r4, #4]
5405:src/xeq.c     **** }
 24083              		.loc 1 5405 2 is_stmt 1 view .LVU6300
5406:src/xeq.c     **** 
 24084              		.loc 1 5406 1 is_stmt 0 view .LVU6301
 24085 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 24086              	.L1713:
 24087 0076 00BF     		.align	2
 24088              	.L1712:
 24089 0078 00000000 		.word	main_ram
 24090 007c 00000000 		.word	RetStkSize
 24091 0080 00000000 		.word	SizeStatRegs
 24092 0084 00000000 		.word	RetStk
 24093 0088 00000000 		.word	ProgFree
 24094 008c 00000000 		.word	Ctx
 24095 0090 00000000 		.word	StackBase
 24096 0094 3F420F00 		.word	999999
 24097 0098 C1BDF0FF 		.word	-999999
 24098              		.cfi_endproc
 24099              	.LFE251:
 24101              		.section	.text.plot_check_range,"ax",%progbits
 24102              		.align	1
 24103              		.p2align 2,,3
 24104              		.global	plot_check_range
 24105              		.syntax unified
 24106              		.thumb
ARM GAS  /tmp/cciWh9P3.s 			page 623


 24107              		.thumb_func
 24108              		.fpu fpv4-sp-d16
 24110              	plot_check_range:
 24111              	.LVL1879:
 24112              	.LFB252:
5422:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
 24113              		.loc 1 5422 1 is_stmt 1 view -0
 24114              		.cfi_startproc
 24115              		@ args = 0, pretend = 0, frame = 0
 24116              		@ frame_needed = 0, uses_anonymous_args = 0
5423:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
 24117              		.loc 1 5423 2 view .LVU6303
5422:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
 24118              		.loc 1 5422 1 is_stmt 0 view .LVU6304
 24119 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 24120              		.cfi_def_cfa_offset 24
 24121              		.cfi_offset 3, -24
 24122              		.cfi_offset 4, -20
 24123              		.cfi_offset 5, -16
 24124              		.cfi_offset 6, -12
 24125              		.cfi_offset 7, -8
 24126              		.cfi_offset 14, -4
5422:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
 24127              		.loc 1 5422 1 view .LVU6305
 24128 0002 0D46     		mov	r5, r1
 24129 0004 1446     		mov	r4, r2
 24130 0006 0646     		mov	r6, r0
5423:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
 24131              		.loc 1 5423 39 view .LVU6306
 24132 0008 FFF7FEFF 		bl	get_reg_n
 24133              	.LVL1880:
 24134              	.LBB3339:
 24135              	.LBB3340:
 932:src/xeq.c     **** }
 24136              		.loc 1 932 12 view .LVU6307
 24137 000c 234B     		ldr	r3, .L1733
 24138 000e 1968     		ldr	r1, [r3]
 932:src/xeq.c     **** }
 24139              		.loc 1 932 24 view .LVU6308
 24140 0010 B1F8E827 		ldrh	r2, [r1, #2024]
 24141 0014 44F20103 		movw	r3, #16385
 24142              	.LBE3340:
 24143              	.LBE3339:
5424:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 24144              		.loc 1 5424 28 view .LVU6309
 24145 0018 1340     		ands	r3, r3, r2
 24146              	.LVL1881:
5424:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 24147              		.loc 1 5424 2 is_stmt 1 view .LVU6310
 24148              	.LBB3342:
 24149              	.LBI3339:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24150              		.loc 1 931 5 view .LVU6311
 24151              	.LBB3341:
 932:src/xeq.c     **** }
 24152              		.loc 1 932 2 view .LVU6312
 24153              	.LBE3341:
ARM GAS  /tmp/cciWh9P3.s 			page 624


 24154              	.LBE3342:
5424:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 24155              		.loc 1 5424 28 is_stmt 0 view .LVU6313
 24156 001a B3F5804F 		cmp	r3, #16384
 24157 001e 24D0     		beq	.L1730
 24158              	.LVL1882:
5425:src/xeq.c     **** 	int bytes;
 24159              		.loc 1 5425 2 is_stmt 1 view .LVU6314
5425:src/xeq.c     **** 	int bytes;
 24160              		.loc 1 5425 45 is_stmt 0 view .LVU6315
 24161 0020 632E     		cmp	r6, #99
 24162 0022 18DD     		ble	.L1723
 24163 0024 4FF0020C 		mov	ip, #2
5424:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 24164              		.loc 1 5424 28 view .LVU6316
 24165 0028 0827     		movs	r7, #8
 24166              	.LVL1883:
 24167              	.L1724:
 24168              	.LBB3343:
 24169              	.LBB3344:
 24170              	.LBB3345:
 223:src/xeq.c     **** }
 24171              		.loc 1 223 2 is_stmt 1 view .LVU6317
 24172              	.LBB3346:
 24173              	.LBI3346:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 24174              		.loc 1 213 5 view .LVU6318
 24175              	.LBB3347:
 214:src/xeq.c     **** }
 24176              		.loc 1 214 2 view .LVU6319
 214:src/xeq.c     **** }
 24177              		.loc 1 214 9 is_stmt 0 view .LVU6320
 24178 002a B1F9DE37 		ldrsh	r3, [r1, #2014]
 214:src/xeq.c     **** }
 24179              		.loc 1 214 57 view .LVU6321
 24180 002e 002B     		cmp	r3, #0
 24181 0030 23DB     		blt	.L1731
 24182 0032 7022     		movs	r2, #112
 24183              	.L1718:
 24184              	.LVL1884:
 214:src/xeq.c     **** }
 24185              		.loc 1 214 57 view .LVU6322
 24186              	.LBE3347:
 24187              	.LBE3346:
 24188              	.LBE3345:
 24189              	.LBE3344:
 24190              	.LBE3343:
5426:src/xeq.c     **** 
 24191              		.loc 1 5426 2 is_stmt 1 discriminator 4 view .LVU6323
5428:src/xeq.c     **** 		width = (int) *p;
 24192              		.loc 1 5428 2 discriminator 4 view .LVU6324
5428:src/xeq.c     **** 		width = (int) *p;
 24193              		.loc 1 5428 5 is_stmt 0 discriminator 4 view .LVU6325
 24194 0034 0DB9     		cbnz	r5, .L1720
5429:src/xeq.c     **** 		height = (int) p[ 1 ];
 24195              		.loc 1 5429 3 is_stmt 1 view .LVU6326
5429:src/xeq.c     **** 		height = (int) p[ 1 ];
ARM GAS  /tmp/cciWh9P3.s 			page 625


 24196              		.loc 1 5429 9 is_stmt 0 view .LVU6327
 24197 0036 0578     		ldrb	r5, [r0]	@ zero_extendqisi2
 24198              	.LVL1885:
5430:src/xeq.c     **** 	}
 24199              		.loc 1 5430 3 is_stmt 1 view .LVU6328
5430:src/xeq.c     **** 	}
 24200              		.loc 1 5430 10 is_stmt 0 view .LVU6329
 24201 0038 4478     		ldrb	r4, [r0, #1]	@ zero_extendqisi2
 24202              	.LVL1886:
 24203              	.L1720:
5436:src/xeq.c     **** 
 24204              		.loc 1 5436 2 is_stmt 1 view .LVU6330
5436:src/xeq.c     **** 
 24205              		.loc 1 5436 20 is_stmt 0 view .LVU6331
 24206 003a 04FB05F4 		mul	r4, r4, r5
 24207              	.LVL1887:
5441:src/xeq.c     **** 		report_err( ERR_RANGE );
 24208              		.loc 1 5441 5 view .LVU6332
 24209 003e A62D     		cmp	r5, #166
5436:src/xeq.c     **** 
 24210              		.loc 1 5436 8 view .LVU6333
 24211 0040 04F10204 		add	r4, r4, #2
 24212              	.LVL1888:
5441:src/xeq.c     **** 		report_err( ERR_RANGE );
 24213              		.loc 1 5441 2 is_stmt 1 view .LVU6334
5441:src/xeq.c     **** 		report_err( ERR_RANGE );
 24214              		.loc 1 5441 5 is_stmt 0 view .LVU6335
 24215 0044 0BDC     		bgt	.L1721
5441:src/xeq.c     **** 		report_err( ERR_RANGE );
 24216              		.loc 1 5441 44 discriminator 1 view .LVU6336
 24217 0046 E319     		adds	r3, r4, r7
5441:src/xeq.c     **** 		report_err( ERR_RANGE );
 24218              		.loc 1 5441 48 discriminator 1 view .LVU6337
 24219 0048 013B     		subs	r3, r3, #1
5441:src/xeq.c     **** 		report_err( ERR_RANGE );
 24220              		.loc 1 5441 54 discriminator 1 view .LVU6338
 24221 004a 93FBF7F3 		sdiv	r3, r3, r7
5441:src/xeq.c     **** 		report_err( ERR_RANGE );
 24222              		.loc 1 5441 34 discriminator 1 view .LVU6339
 24223 004e 9C19     		adds	r4, r3, r6
 24224              	.LVL1889:
5441:src/xeq.c     **** 		report_err( ERR_RANGE );
 24225              		.loc 1 5441 27 discriminator 1 view .LVU6340
 24226 0050 9442     		cmp	r4, r2
 24227 0052 04DC     		bgt	.L1721
5446:src/xeq.c     **** 
 24228              		.loc 1 5446 1 view .LVU6341
 24229 0054 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 24230              	.LVL1890:
 24231              	.L1723:
 24232              	.LBB3352:
 24233              	.LBB3353:
 24234              	.LBB3354:
 243:src/xeq.c     **** }
 24235              		.loc 1 243 3 is_stmt 1 view .LVU6342
 24236 0056 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 626


 24237              		.loc 1 243 10 is_stmt 0 view .LVU6343
 24238 005a 0827     		movs	r7, #8
 24239              	.LVL1891:
 243:src/xeq.c     **** }
 24240              		.loc 1 243 10 view .LVU6344
 24241 005c EAE7     		b	.L1718
 24242              	.LVL1892:
 24243              	.L1721:
 243:src/xeq.c     **** }
 24244              		.loc 1 243 10 view .LVU6345
 24245              	.LBE3354:
 24246              	.LBE3353:
 24247              	.LBE3352:
5442:src/xeq.c     **** 		return (unsigned char *) NULL;
 24248              		.loc 1 5442 3 is_stmt 1 view .LVU6346
 24249              	.LBB3363:
 24250              	.LBI3363:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24251              		.loc 1 536 5 view .LVU6347
 24252              	.LBB3364:
 537:src/xeq.c     **** 		Error = e;
 24253              		.loc 1 537 2 view .LVU6348
 537:src/xeq.c     **** 		Error = e;
 24254              		.loc 1 537 12 is_stmt 0 view .LVU6349
 24255 005e 104B     		ldr	r3, .L1733+4
 537:src/xeq.c     **** 		Error = e;
 24256              		.loc 1 537 5 view .LVU6350
 24257 0060 1868     		ldr	r0, [r3]
 24258              	.LVL1893:
 537:src/xeq.c     **** 		Error = e;
 24259              		.loc 1 537 5 view .LVU6351
 24260 0062 C0B9     		cbnz	r0, .L1727
 24261              	.LVL1894:
 24262              	.LBB3365:
 24263              	.LBI3365:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24264              		.loc 1 536 5 is_stmt 1 view .LVU6352
 24265              	.LBB3366:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 24266              		.loc 1 538 3 view .LVU6353
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 24267              		.loc 1 538 9 is_stmt 0 view .LVU6354
 24268 0064 0822     		movs	r2, #8
 24269              	.LVL1895:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 24270              		.loc 1 538 9 view .LVU6355
 24271 0066 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 24272              		.loc 1 539 3 is_stmt 1 view .LVU6356
 24273              	.LBE3366:
 24274              	.LBE3365:
 24275              	.LBE3364:
 24276              	.LBE3363:
5446:src/xeq.c     **** 
 24277              		.loc 1 5446 1 is_stmt 0 view .LVU6357
 24278 0068 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 24279              	.LVL1896:
ARM GAS  /tmp/cciWh9P3.s 			page 627


 24280              	.L1730:
5425:src/xeq.c     **** 	int bytes;
 24281              		.loc 1 5425 2 is_stmt 1 view .LVU6358
5425:src/xeq.c     **** 	int bytes;
 24282              		.loc 1 5425 45 is_stmt 0 view .LVU6359
 24283 006a 632E     		cmp	r6, #99
 24284 006c 0FDC     		bgt	.L1732
 24285              	.LBB3367:
 24286              	.LBI3352:
 249:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 24287              		.loc 1 249 14 is_stmt 1 view .LVU6360
 24288              	.LBE3367:
 250:src/xeq.c     **** }
 24289              		.loc 1 250 2 view .LVU6361
 24290              	.LVL1897:
 24291              	.LBB3368:
 24292              	.LBB3360:
 24293              	.LBI3353:
 237:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 24294              		.loc 1 237 14 view .LVU6362
 24295              	.LBB3357:
 238:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 24296              		.loc 1 238 2 view .LVU6363
 24297              	.LBE3357:
 24298              	.LBE3360:
 24299              	.LBE3368:
 932:src/xeq.c     **** }
 24300              		.loc 1 932 2 view .LVU6364
 24301              	.LBB3369:
 24302              	.LBB3361:
 24303              	.LBB3358:
 24304              	.LBB3355:
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 24305              		.loc 1 239 3 view .LVU6365
 240:src/xeq.c     **** 	}
 24306              		.loc 1 240 3 view .LVU6366
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 24307              		.loc 1 239 24 is_stmt 0 view .LVU6367
 24308 006e 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 239:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 24309              		.loc 1 239 13 view .LVU6368
 24310 0072 0C3A     		subs	r2, r2, #12
 24311              	.LVL1898:
 240:src/xeq.c     **** 	}
 24312              		.loc 1 240 67 view .LVU6369
 24313 0074 5210     		asrs	r2, r2, #1
 24314              	.LVL1899:
 240:src/xeq.c     **** 	}
 24315              		.loc 1 240 67 view .LVU6370
 24316              	.LBE3355:
 24317              	.LBE3358:
 24318              	.LBE3361:
 24319              	.LBE3369:
5424:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 24320              		.loc 1 5424 28 view .LVU6371
 24321 0076 1027     		movs	r7, #16
 24322              	.LBB3370:
ARM GAS  /tmp/cciWh9P3.s 			page 628


 24323              	.LBB3362:
 24324              	.LBB3359:
 24325              	.LBB3356:
 240:src/xeq.c     **** 	}
 24326              		.loc 1 240 56 view .LVU6372
 24327 0078 DCE7     		b	.L1718
 24328              	.LVL1900:
 24329              	.L1731:
 240:src/xeq.c     **** 	}
 24330              		.loc 1 240 56 view .LVU6373
 24331              	.LBE3356:
 24332              	.LBE3359:
 24333              	.LBE3362:
 24334              	.LBE3370:
 24335              	.LBB3371:
 24336              	.LBB3351:
 24337              	.LBB3350:
 24338              	.LBB3349:
 24339              	.LBB3348:
 214:src/xeq.c     **** }
 24340              		.loc 1 214 25 view .LVU6374
 24341 007a 0A4A     		ldr	r2, .L1733+8
 24342 007c 1268     		ldr	r2, [r2]
 214:src/xeq.c     **** }
 24343              		.loc 1 214 57 view .LVU6375
 24344 007e 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 24345 0082 C2F30B02 		ubfx	r2, r2, #0, #12
 24346 0086 42FA0CF2 		asr	r2, r2, ip
 24347 008a 7032     		adds	r2, r2, #112
 24348 008c D2E7     		b	.L1718
 24349              	.LVL1901:
 24350              	.L1732:
 214:src/xeq.c     **** }
 24351              		.loc 1 214 57 view .LVU6376
 24352              	.LBE3348:
 24353              	.LBE3349:
 24354              	.LBE3350:
 24355              	.LBE3351:
 24356              	.LBE3371:
5425:src/xeq.c     **** 	int bytes;
 24357              		.loc 1 5425 45 view .LVU6377
 24358 008e 4FF0030C 		mov	ip, #3
5424:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
 24359              		.loc 1 5424 28 view .LVU6378
 24360 0092 1027     		movs	r7, #16
 24361 0094 C9E7     		b	.L1724
 24362              	.LVL1902:
 24363              	.L1727:
5443:src/xeq.c     **** 	}
 24364              		.loc 1 5443 10 view .LVU6379
 24365 0096 0020     		movs	r0, #0
 24366              	.LVL1903:
5446:src/xeq.c     **** 
 24367              		.loc 1 5446 1 view .LVU6380
 24368 0098 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 24369              	.LVL1904:
 24370              	.L1734:
ARM GAS  /tmp/cciWh9P3.s 			page 629


5446:src/xeq.c     **** 
 24371              		.loc 1 5446 1 view .LVU6381
 24372 009a 00BF     		.align	2
 24373              	.L1733:
 24374 009c 00000000 		.word	main_ram
 24375 00a0 00000000 		.word	Error
 24376 00a4 00000000 		.word	RetStk
 24377              		.cfi_endproc
 24378              	.LFE252:
 24380              		.section	.text.cmdplotdisplay,"ax",%progbits
 24381              		.align	1
 24382              		.p2align 2,,3
 24383              		.global	cmdplotdisplay
 24384              		.syntax unified
 24385              		.thumb
 24386              		.thumb_func
 24387              		.fpu fpv4-sp-d16
 24389              	cmdplotdisplay:
 24390              	.LVL1905:
 24391              	.LFB253:
5452:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
 24392              		.loc 1 5452 1 is_stmt 1 view -0
 24393              		.cfi_startproc
 24394              		@ args = 0, pretend = 0, frame = 0
 24395              		@ frame_needed = 0, uses_anonymous_args = 0
5453:src/xeq.c     **** 		DispPlot = arg + 1;
 24396              		.loc 1 5453 2 view .LVU6383
5453:src/xeq.c     **** 		DispPlot = arg + 1;
 24397              		.loc 1 5453 6 is_stmt 0 view .LVU6384
 24398 0000 0022     		movs	r2, #0
5452:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
 24399              		.loc 1 5452 1 view .LVU6385
 24400 0002 10B5     		push	{r4, lr}
 24401              		.cfi_def_cfa_offset 8
 24402              		.cfi_offset 4, -8
 24403              		.cfi_offset 14, -4
5453:src/xeq.c     **** 		DispPlot = arg + 1;
 24404              		.loc 1 5453 6 view .LVU6386
 24405 0004 1146     		mov	r1, r2
 24406              	.LVL1906:
5452:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
 24407              		.loc 1 5452 1 view .LVU6387
 24408 0006 0446     		mov	r4, r0
5453:src/xeq.c     **** 		DispPlot = arg + 1;
 24409              		.loc 1 5453 6 view .LVU6388
 24410 0008 FFF7FEFF 		bl	plot_check_range
 24411              	.LVL1907:
5453:src/xeq.c     **** 		DispPlot = arg + 1;
 24412              		.loc 1 5453 5 view .LVU6389
 24413 000c 30B1     		cbz	r0, .L1735
5454:src/xeq.c     **** 		frozen_display();
 24414              		.loc 1 5454 3 is_stmt 1 view .LVU6390
5454:src/xeq.c     **** 		frozen_display();
 24415              		.loc 1 5454 12 is_stmt 0 view .LVU6391
 24416 000e 044B     		ldr	r3, .L1738
5454:src/xeq.c     **** 		frozen_display();
 24417              		.loc 1 5454 18 view .LVU6392
ARM GAS  /tmp/cciWh9P3.s 			page 630


 24418 0010 601C     		adds	r0, r4, #1
5457:src/xeq.c     **** 
 24419              		.loc 1 5457 1 view .LVU6393
 24420 0012 BDE81040 		pop	{r4, lr}
 24421              		.cfi_remember_state
 24422              		.cfi_restore 14
 24423              		.cfi_restore 4
 24424              		.cfi_def_cfa_offset 0
 24425              	.LVL1908:
5454:src/xeq.c     **** 		frozen_display();
 24426              		.loc 1 5454 12 view .LVU6394
 24427 0016 1880     		strh	r0, [r3]	@ movhi
5455:src/xeq.c     **** 	}
 24428              		.loc 1 5455 3 is_stmt 1 view .LVU6395
 24429 0018 FFF7FEBF 		b	frozen_display
 24430              	.LVL1909:
 24431              	.L1735:
 24432              		.cfi_restore_state
5457:src/xeq.c     **** 
 24433              		.loc 1 5457 1 is_stmt 0 view .LVU6396
 24434 001c 10BD     		pop	{r4, pc}
 24435              	.LVL1910:
 24436              	.L1739:
5457:src/xeq.c     **** 
 24437              		.loc 1 5457 1 view .LVU6397
 24438 001e 00BF     		.align	2
 24439              	.L1738:
 24440 0020 00000000 		.word	DispPlot
 24441              		.cfi_endproc
 24442              	.LFE253:
 24444              		.section	.text.cmdplotinit,"ax",%progbits
 24445              		.align	1
 24446              		.p2align 2,,3
 24447              		.global	cmdplotinit
 24448              		.syntax unified
 24449              		.thumb
 24450              		.thumb_func
 24451              		.fpu fpv4-sp-d16
 24453              	cmdplotinit:
 24454              	.LVL1911:
 24455              	.LFB254:
5464:src/xeq.c     **** 	int sgnx, sgny;
 24456              		.loc 1 5464 1 is_stmt 1 view -0
 24457              		.cfi_startproc
 24458              		@ args = 0, pretend = 0, frame = 8
 24459              		@ frame_needed = 0, uses_anonymous_args = 0
5465:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
 24460              		.loc 1 5465 2 view .LVU6399
5466:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
 24461              		.loc 1 5466 2 view .LVU6400
5464:src/xeq.c     **** 	int sgnx, sgny;
 24462              		.loc 1 5464 1 is_stmt 0 view .LVU6401
 24463 0000 70B5     		push	{r4, r5, r6, lr}
 24464              		.cfi_def_cfa_offset 16
 24465              		.cfi_offset 4, -16
 24466              		.cfi_offset 5, -12
 24467              		.cfi_offset 6, -8
ARM GAS  /tmp/cciWh9P3.s 			page 631


 24468              		.cfi_offset 14, -4
 24469 0002 82B0     		sub	sp, sp, #8
 24470              		.cfi_def_cfa_offset 24
 24471              	.LVL1912:
 24472              	.LBB3372:
 24473              	.LBI3372:
1259:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 24474              		.loc 1 1259 24 is_stmt 1 view .LVU6402
 24475              	.LBB3373:
1260:src/xeq.c     **** }
 24476              		.loc 1 1260 2 view .LVU6403
 24477              	.LBE3373:
 24478              	.LBE3372:
5464:src/xeq.c     **** 	int sgnx, sgny;
 24479              		.loc 1 5464 1 is_stmt 0 view .LVU6404
 24480 0004 0646     		mov	r6, r0
 24481              	.LBB3376:
 24482              	.LBB3374:
1260:src/xeq.c     **** }
 24483              		.loc 1 1260 9 view .LVU6405
 24484 0006 6946     		mov	r1, sp
 24485              	.LVL1913:
1260:src/xeq.c     **** }
 24486              		.loc 1 1260 9 view .LVU6406
 24487 0008 6420     		movs	r0, #100
 24488              	.LVL1914:
1260:src/xeq.c     **** }
 24489              		.loc 1 1260 9 view .LVU6407
 24490 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 24491              	.LVL1915:
 24492              	.LBE3374:
 24493              	.LBE3376:
5467:src/xeq.c     **** 	unsigned char *p;
 24494              		.loc 1 5467 21 view .LVU6408
 24495 000e 01A9     		add	r1, sp, #4
 24496              	.LBB3377:
 24497              	.LBB3375:
1260:src/xeq.c     **** }
 24498              		.loc 1 1260 9 view .LVU6409
 24499 0010 0546     		mov	r5, r0
 24500              	.LBE3375:
 24501              	.LBE3377:
5467:src/xeq.c     **** 	unsigned char *p;
 24502              		.loc 1 5467 21 view .LVU6410
 24503 0012 6520     		movs	r0, #101
 24504              	.LVL1916:
5467:src/xeq.c     **** 	unsigned char *p;
 24505              		.loc 1 5467 2 is_stmt 1 view .LVU6411
5467:src/xeq.c     **** 	unsigned char *p;
 24506              		.loc 1 5467 21 is_stmt 0 view .LVU6412
 24507 0014 FFF7FEFF 		bl	get_reg_n_int_sgn
 24508              	.LVL1917:
5470:src/xeq.c     **** 		width = PAPER_WIDTH;
 24509              		.loc 1 5470 5 view .LVU6413
 24510 0018 009B     		ldr	r3, [sp]
 24511              	.LVL1918:
5468:src/xeq.c     **** 	
ARM GAS  /tmp/cciWh9P3.s 			page 632


 24512              		.loc 1 5468 2 is_stmt 1 view .LVU6414
5470:src/xeq.c     **** 		width = PAPER_WIDTH;
 24513              		.loc 1 5470 2 view .LVU6415
5470:src/xeq.c     **** 		width = PAPER_WIDTH;
 24514              		.loc 1 5470 5 is_stmt 0 view .LVU6416
 24515 001a B3B9     		cbnz	r3, .L1744
5471:src/xeq.c     **** 	}
 24516              		.loc 1 5471 9 discriminator 1 view .LVU6417
 24517 001c 002D     		cmp	r5, #0
 24518 001e 08BF     		it	eq
 24519 0020 A625     		moveq	r5, #166
 24520              	.LVL1919:
 24521              	.L1741:
5473:src/xeq.c     **** 		height = 1;
 24522              		.loc 1 5473 2 is_stmt 1 view .LVU6418
5473:src/xeq.c     **** 		height = 1;
 24523              		.loc 1 5473 5 is_stmt 0 view .LVU6419
 24524 0022 019B     		ldr	r3, [sp, #4]
 24525 0024 03B9     		cbnz	r3, .L1746
5473:src/xeq.c     **** 		height = 1;
 24526              		.loc 1 5473 12 discriminator 1 view .LVU6420
 24527 0026 90B9     		cbnz	r0, .L1751
 24528              	.L1746:
5474:src/xeq.c     **** 	}
 24529              		.loc 1 5474 10 view .LVU6421
 24530 0028 0124     		movs	r4, #1
 24531              	.LVL1920:
 24532              	.L1742:
5483:src/xeq.c     **** 	if ( p != NULL ) {
 24533              		.loc 1 5483 2 is_stmt 1 view .LVU6422
5483:src/xeq.c     **** 	if ( p != NULL ) {
 24534              		.loc 1 5483 6 is_stmt 0 view .LVU6423
 24535 002a 3046     		mov	r0, r6
 24536 002c 2246     		mov	r2, r4
 24537 002e 2946     		mov	r1, r5
 24538 0030 FFF7FEFF 		bl	plot_check_range
 24539              	.LVL1921:
5484:src/xeq.c     **** 		*p++ = (unsigned char) width;
 24540              		.loc 1 5484 2 is_stmt 1 view .LVU6424
5484:src/xeq.c     **** 		*p++ = (unsigned char) width;
 24541              		.loc 1 5484 5 is_stmt 0 view .LVU6425
 24542 0034 38B1     		cbz	r0, .L1740
5485:src/xeq.c     **** 		*p++ = (unsigned char) height;
 24543              		.loc 1 5485 3 is_stmt 1 view .LVU6426
 24544              	.LVL1922:
5485:src/xeq.c     **** 		*p++ = (unsigned char) height;
 24545              		.loc 1 5485 10 is_stmt 0 view .LVU6427
 24546 0036 0570     		strb	r5, [r0]
5486:src/xeq.c     **** 		xset( p, 0, width * height );
 24547              		.loc 1 5486 3 is_stmt 1 view .LVU6428
 24548              	.LVL1923:
5486:src/xeq.c     **** 		xset( p, 0, width * height );
 24549              		.loc 1 5486 10 is_stmt 0 view .LVU6429
 24550 0038 4470     		strb	r4, [r0, #1]
5487:src/xeq.c     **** 	}
 24551              		.loc 1 5487 3 is_stmt 1 view .LVU6430
 24552 003a 04FB05F2 		mul	r2, r4, r5
ARM GAS  /tmp/cciWh9P3.s 			page 633


 24553 003e 0230     		adds	r0, r0, #2
 24554              	.LVL1924:
5487:src/xeq.c     **** 	}
 24555              		.loc 1 5487 3 is_stmt 0 view .LVU6431
 24556 0040 0021     		movs	r1, #0
 24557 0042 FFF7FEFF 		bl	xset
 24558              	.LVL1925:
 24559              	.L1740:
5489:src/xeq.c     **** 
 24560              		.loc 1 5489 1 view .LVU6432
 24561 0046 02B0     		add	sp, sp, #8
 24562              		.cfi_remember_state
 24563              		.cfi_def_cfa_offset 16
 24564              		@ sp needed
 24565 0048 70BD     		pop	{r4, r5, r6, pc}
 24566              	.LVL1926:
 24567              	.L1744:
 24568              		.cfi_restore_state
5471:src/xeq.c     **** 	}
 24569              		.loc 1 5471 9 view .LVU6433
 24570 004a A625     		movs	r5, #166
 24571              	.LVL1927:
5471:src/xeq.c     **** 	}
 24572              		.loc 1 5471 9 view .LVU6434
 24573 004c E9E7     		b	.L1741
 24574              	.LVL1928:
 24575              	.L1751:
5480:src/xeq.c     **** 	}
 24576              		.loc 1 5480 3 is_stmt 1 view .LVU6435
5480:src/xeq.c     **** 	}
 24577              		.loc 1 5480 21 is_stmt 0 view .LVU6436
 24578 004e C41D     		adds	r4, r0, #7
5480:src/xeq.c     **** 	}
 24579              		.loc 1 5480 10 view .LVU6437
 24580 0050 E410     		asrs	r4, r4, #3
 24581              	.LVL1929:
5480:src/xeq.c     **** 	}
 24582              		.loc 1 5480 10 view .LVU6438
 24583 0052 EAE7     		b	.L1742
 24584              		.cfi_endproc
 24585              	.LFE254:
 24587              		.section	.text.cmdplotdim,"ax",%progbits
 24588              		.align	1
 24589              		.p2align 2,,3
 24590              		.global	cmdplotdim
 24591              		.syntax unified
 24592              		.thumb
 24593              		.thumb_func
 24594              		.fpu fpv4-sp-d16
 24596              	cmdplotdim:
 24597              	.LVL1930:
 24598              	.LFB255:
5495:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24599              		.loc 1 5495 1 is_stmt 1 view -0
 24600              		.cfi_startproc
 24601              		@ args = 0, pretend = 0, frame = 0
 24602              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cciWh9P3.s 			page 634


5496:src/xeq.c     **** 	if ( p != NULL ) {
 24603              		.loc 1 5496 2 view .LVU6440
5495:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24604              		.loc 1 5495 1 is_stmt 0 view .LVU6441
 24605 0000 30B5     		push	{r4, r5, lr}
 24606              		.cfi_def_cfa_offset 12
 24607              		.cfi_offset 4, -12
 24608              		.cfi_offset 5, -8
 24609              		.cfi_offset 14, -4
5496:src/xeq.c     **** 	if ( p != NULL ) {
 24610              		.loc 1 5496 21 view .LVU6442
 24611 0002 0022     		movs	r2, #0
5495:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24612              		.loc 1 5495 1 view .LVU6443
 24613 0004 83B0     		sub	sp, sp, #12
 24614              		.cfi_def_cfa_offset 24
5496:src/xeq.c     **** 	if ( p != NULL ) {
 24615              		.loc 1 5496 21 view .LVU6444
 24616 0006 1146     		mov	r1, r2
 24617              	.LVL1931:
5496:src/xeq.c     **** 	if ( p != NULL ) {
 24618              		.loc 1 5496 21 view .LVU6445
 24619 0008 FFF7FEFF 		bl	plot_check_range
 24620              	.LVL1932:
5497:src/xeq.c     **** 		lift2_if_enabled();
 24621              		.loc 1 5497 2 is_stmt 1 view .LVU6446
5497:src/xeq.c     **** 		lift2_if_enabled();
 24622              		.loc 1 5497 5 is_stmt 0 view .LVU6447
 24623 000c A0B1     		cbz	r0, .L1752
5498:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
 24624              		.loc 1 5498 3 is_stmt 1 view .LVU6448
 24625              	.LBB3378:
 24626              	.LBI3378:
 742:src/xeq.c     **** 	lift_if_enabled();
 24627              		.loc 1 742 13 view .LVU6449
 24628              	.LBB3379:
 743:src/xeq.c     **** 	lift();
 24629              		.loc 1 743 2 view .LVU6450
 24630              	.LBB3380:
 24631              	.LBI3380:
 737:src/xeq.c     **** 	if (get_lift())
 24632              		.loc 1 737 6 view .LVU6451
 24633              	.LBB3381:
 738:src/xeq.c     **** 		lift();
 24634              		.loc 1 738 2 view .LVU6452
 24635              	.LBB3382:
 24636              	.LBI3382:
 733:src/xeq.c     **** 	return State2.state_lift;
 24637              		.loc 1 733 12 view .LVU6453
 24638              	.LBB3383:
 734:src/xeq.c     **** }
 24639              		.loc 1 734 2 view .LVU6454
 734:src/xeq.c     **** }
 24640              		.loc 1 734 15 is_stmt 0 view .LVU6455
 24641 000e 0D4B     		ldr	r3, .L1763
 24642 0010 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 24643              	.LBE3383:
ARM GAS  /tmp/cciWh9P3.s 			page 635


 24644              	.LBE3382:
 738:src/xeq.c     **** 		lift();
 24645              		.loc 1 738 5 view .LVU6456
 24646 0012 5B06     		lsls	r3, r3, #25
 24647 0014 0446     		mov	r4, r0
 24648 0016 11D4     		bmi	.L1762
 24649              	.LVL1933:
 24650              	.L1754:
 738:src/xeq.c     **** 		lift();
 24651              		.loc 1 738 5 view .LVU6457
 24652              	.LBE3381:
 24653              	.LBE3380:
 744:src/xeq.c     **** }
 24654              		.loc 1 744 2 is_stmt 1 view .LVU6458
 24655              	.LBE3379:
 24656              	.LBE3378:
 24657              	.LBB3388:
 24658              	.LBB3389:
1323:src/xeq.c     **** }
 24659              		.loc 1 1323 2 is_stmt 0 view .LVU6459
 24660 0018 0025     		movs	r5, #0
 24661              	.LBE3389:
 24662              	.LBE3388:
 24663              	.LBB3393:
 24664              	.LBB3386:
 744:src/xeq.c     **** }
 24665              		.loc 1 744 2 view .LVU6460
 24666 001a FFF7FEFF 		bl	lift
 24667              	.LVL1934:
 24668              	.LBE3386:
 24669              	.LBE3393:
5499:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
 24670              		.loc 1 5499 3 is_stmt 1 view .LVU6461
 24671              	.LBB3394:
 24672              	.LBI3388:
1322:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 24673              		.loc 1 1322 6 view .LVU6462
 24674              	.LBB3390:
1323:src/xeq.c     **** }
 24675              		.loc 1 1323 2 view .LVU6463
 24676              	.LBE3390:
 24677              	.LBE3394:
5499:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
 24678              		.loc 1 5499 3 is_stmt 0 view .LVU6464
 24679 001e 2278     		ldrb	r2, [r4]	@ zero_extendqisi2
 24680              	.LBB3395:
 24681              	.LBB3391:
1323:src/xeq.c     **** }
 24682              		.loc 1 1323 2 view .LVU6465
 24683 0020 0095     		str	r5, [sp]
 24684              	.LVL1935:
1323:src/xeq.c     **** }
 24685              		.loc 1 1323 2 view .LVU6466
 24686              	.LBE3391:
 24687              	.LBE3395:
5499:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
 24688              		.loc 1 5499 3 view .LVU6467
ARM GAS  /tmp/cciWh9P3.s 			page 636


 24689 0022 0023     		movs	r3, #0
 24690              	.LBB3396:
 24691              	.LBB3392:
1323:src/xeq.c     **** }
 24692              		.loc 1 1323 2 view .LVU6468
 24693 0024 6420     		movs	r0, #100
 24694 0026 FFF7FEFF 		bl	set_reg_n_int_sgn
 24695              	.LVL1936:
1323:src/xeq.c     **** }
 24696              		.loc 1 1323 2 view .LVU6469
 24697              	.LBE3392:
 24698              	.LBE3396:
5500:src/xeq.c     **** 	}
 24699              		.loc 1 5500 3 is_stmt 1 view .LVU6470
5500:src/xeq.c     **** 	}
 24700              		.loc 1 5500 33 is_stmt 0 view .LVU6471
 24701 002a 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
5500:src/xeq.c     **** 	}
 24702              		.loc 1 5500 3 view .LVU6472
 24703 002c 0095     		str	r5, [sp]
5500:src/xeq.c     **** 	}
 24704              		.loc 1 5500 39 view .LVU6473
 24705 002e D200     		lsls	r2, r2, #3
5500:src/xeq.c     **** 	}
 24706              		.loc 1 5500 3 view .LVU6474
 24707 0030 D317     		asrs	r3, r2, #31
 24708 0032 6520     		movs	r0, #101
 24709 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 24710              	.LVL1937:
 24711              	.L1752:
5502:src/xeq.c     **** 
 24712              		.loc 1 5502 1 view .LVU6475
 24713 0038 03B0     		add	sp, sp, #12
 24714              		.cfi_remember_state
 24715              		.cfi_def_cfa_offset 12
 24716              		@ sp needed
 24717 003a 30BD     		pop	{r4, r5, pc}
 24718              	.LVL1938:
 24719              	.L1762:
 24720              		.cfi_restore_state
 24721              	.LBB3397:
 24722              	.LBB3387:
 24723              	.LBB3385:
 24724              	.LBB3384:
 739:src/xeq.c     **** }
 24725              		.loc 1 739 3 is_stmt 1 view .LVU6476
 24726 003c FFF7FEFF 		bl	lift
 24727              	.LVL1939:
 739:src/xeq.c     **** }
 24728              		.loc 1 739 3 is_stmt 0 view .LVU6477
 24729 0040 EAE7     		b	.L1754
 24730              	.L1764:
 24731 0042 00BF     		.align	2
 24732              	.L1763:
 24733 0044 00000000 		.word	StateWhileOn
 24734              	.LBE3384:
 24735              	.LBE3385:
ARM GAS  /tmp/cciWh9P3.s 			page 637


 24736              	.LBE3387:
 24737              	.LBE3397:
 24738              		.cfi_endproc
 24739              	.LFE255:
 24741              		.section	.text.cmdplotpixel,"ax",%progbits
 24742              		.align	1
 24743              		.p2align 2,,3
 24744              		.global	cmdplotpixel
 24745              		.syntax unified
 24746              		.thumb
 24747              		.thumb_func
 24748              		.fpu fpv4-sp-d16
 24750              	cmdplotpixel:
 24751              	.LVL1940:
 24752              	.LFB256:
5510:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24753              		.loc 1 5510 1 is_stmt 1 view -0
 24754              		.cfi_startproc
 24755              		@ args = 0, pretend = 0, frame = 8
 24756              		@ frame_needed = 0, uses_anonymous_args = 0
5511:src/xeq.c     **** 	if ( p != NULL ) {
 24757              		.loc 1 5511 2 view .LVU6479
5510:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24758              		.loc 1 5510 1 is_stmt 0 view .LVU6480
 24759 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 24760              		.cfi_def_cfa_offset 28
 24761              		.cfi_offset 4, -28
 24762              		.cfi_offset 5, -24
 24763              		.cfi_offset 6, -20
 24764              		.cfi_offset 7, -16
 24765              		.cfi_offset 8, -12
 24766              		.cfi_offset 9, -8
 24767              		.cfi_offset 14, -4
5511:src/xeq.c     **** 	if ( p != NULL ) {
 24768              		.loc 1 5511 21 view .LVU6481
 24769 0004 0022     		movs	r2, #0
5510:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24770              		.loc 1 5510 1 view .LVU6482
 24771 0006 83B0     		sub	sp, sp, #12
 24772              		.cfi_def_cfa_offset 40
5510:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
 24773              		.loc 1 5510 1 view .LVU6483
 24774 0008 0E46     		mov	r6, r1
5511:src/xeq.c     **** 	if ( p != NULL ) {
 24775              		.loc 1 5511 21 view .LVU6484
 24776 000a 1146     		mov	r1, r2
 24777              	.LVL1941:
5511:src/xeq.c     **** 	if ( p != NULL ) {
 24778              		.loc 1 5511 21 view .LVU6485
 24779 000c FFF7FEFF 		bl	plot_check_range
 24780              	.LVL1942:
5512:src/xeq.c     **** 		/*
 24781              		.loc 1 5512 2 is_stmt 1 view .LVU6486
5512:src/xeq.c     **** 		/*
 24782              		.loc 1 5512 5 is_stmt 0 view .LVU6487
 24783 0010 50B1     		cbz	r0, .L1765
 24784              	.LBB3398:
ARM GAS  /tmp/cciWh9P3.s 			page 638


5516:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
 24785              		.loc 1 5516 3 is_stmt 1 view .LVU6488
5517:src/xeq.c     **** 		int pix = 0;
 24786              		.loc 1 5517 3 view .LVU6489
 24787 0012 0446     		mov	r4, r0
5517:src/xeq.c     **** 		int pix = 0;
 24788              		.loc 1 5517 37 is_stmt 0 view .LVU6490
 24789 0014 01A9     		add	r1, sp, #4
 24790 0016 6520     		movs	r0, #101
 24791              	.LVL1943:
5517:src/xeq.c     **** 		int pix = 0;
 24792              		.loc 1 5517 37 view .LVU6491
 24793 0018 FFF7FEFF 		bl	get_reg_n_int_sgn
 24794              	.LVL1944:
5519:src/xeq.c     **** 			/*
 24795              		.loc 1 5519 12 view .LVU6492
 24796 001c 019F     		ldr	r7, [sp, #4]
5517:src/xeq.c     **** 		int pix = 0;
 24797              		.loc 1 5517 37 view .LVU6493
 24798 001e 0546     		mov	r5, r0
 24799              	.LVL1945:
5518:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
 24800              		.loc 1 5518 3 is_stmt 1 view .LVU6494
5519:src/xeq.c     **** 			/*
 24801              		.loc 1 5519 3 view .LVU6495
5519:src/xeq.c     **** 			/*
 24802              		.loc 1 5519 6 is_stmt 0 view .LVU6496
 24803 0020 2FB1     		cbz	r7, .L1778
5518:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
 24804              		.loc 1 5518 7 view .LVU6497
 24805 0022 0027     		movs	r7, #0
 24806              	.LVL1946:
 24807              	.L1767:
5543:src/xeq.c     **** 			fin_tst( *p & pix );
 24808              		.loc 1 5543 3 is_stmt 1 view .LVU6498
5543:src/xeq.c     **** 			fin_tst( *p & pix );
 24809              		.loc 1 5543 6 is_stmt 0 view .LVU6499
 24810 0024 972E     		cmp	r6, #151
 24811 0026 27D0     		beq	.L1779
 24812              	.L1765:
5543:src/xeq.c     **** 			fin_tst( *p & pix );
 24813              		.loc 1 5543 6 view .LVU6500
 24814              	.LBE3398:
5547:src/xeq.c     **** #endif
 24815              		.loc 1 5547 1 view .LVU6501
 24816 0028 03B0     		add	sp, sp, #12
 24817              		.cfi_remember_state
 24818              		.cfi_def_cfa_offset 28
 24819              		@ sp needed
 24820 002a BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 24821              	.LVL1947:
 24822              	.L1778:
 24823              		.cfi_restore_state
 24824              	.LBB3406:
5519:src/xeq.c     **** 			/*
 24825              		.loc 1 5519 35 discriminator 1 view .LVU6502
 24826 002e 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
ARM GAS  /tmp/cciWh9P3.s 			page 639


5519:src/xeq.c     **** 			/*
 24827              		.loc 1 5519 17 discriminator 1 view .LVU6503
 24828 0030 B3EBD00F 		cmp	r3, r0, lsr #3
5519:src/xeq.c     **** 			/*
 24829              		.loc 1 5519 26 discriminator 1 view .LVU6504
 24830 0034 4FEAD008 		lsr	r8, r0, #3
5519:src/xeq.c     **** 			/*
 24831              		.loc 1 5519 17 discriminator 1 view .LVU6505
 24832 0038 F4D9     		bls	.L1767
 24833              	.LBB3399:
5523:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
 24834              		.loc 1 5523 4 is_stmt 1 view .LVU6506
 24835              	.LBB3400:
 24836              	.LBB3401:
1260:src/xeq.c     **** }
 24837              		.loc 1 1260 9 is_stmt 0 view .LVU6507
 24838 003a 01A9     		add	r1, sp, #4
 24839 003c 6420     		movs	r0, #100
 24840              	.LVL1948:
1260:src/xeq.c     **** }
 24841              		.loc 1 1260 9 view .LVU6508
 24842              	.LBE3401:
 24843              	.LBE3400:
5523:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
 24844              		.loc 1 5523 40 view .LVU6509
 24845 003e 94F80090 		ldrb	r9, [r4]	@ zero_extendqisi2
 24846              	.LVL1949:
5524:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
 24847              		.loc 1 5524 4 is_stmt 1 view .LVU6510
 24848              	.LBB3403:
 24849              	.LBI3400:
1259:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 24850              		.loc 1 1259 24 view .LVU6511
 24851              	.LBB3402:
1260:src/xeq.c     **** }
 24852              		.loc 1 1260 2 view .LVU6512
1260:src/xeq.c     **** }
 24853              		.loc 1 1260 9 is_stmt 0 view .LVU6513
 24854 0042 FFF7FEFF 		bl	get_reg_n_int_sgn
 24855              	.LVL1950:
1260:src/xeq.c     **** }
 24856              		.loc 1 1260 9 view .LVU6514
 24857              	.LBE3402:
 24858              	.LBE3403:
5525:src/xeq.c     **** 				/*
 24859              		.loc 1 5525 13 view .LVU6515
 24860 0046 019B     		ldr	r3, [sp, #4]
 24861              	.LVL1951:
5525:src/xeq.c     **** 				/*
 24862              		.loc 1 5525 4 is_stmt 1 view .LVU6516
5525:src/xeq.c     **** 				/*
 24863              		.loc 1 5525 7 is_stmt 0 view .LVU6517
 24864 0048 002B     		cmp	r3, #0
 24865 004a EBD1     		bne	.L1767
5525:src/xeq.c     **** 				/*
 24866              		.loc 1 5525 18 discriminator 1 view .LVU6518
 24867 004c 8145     		cmp	r9, r0
ARM GAS  /tmp/cciWh9P3.s 			page 640


 24868 004e E9D9     		bls	.L1767
5529:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
 24869              		.loc 1 5529 5 is_stmt 1 view .LVU6519
5530:src/xeq.c     **** 
 24870              		.loc 1 5530 35 is_stmt 0 view .LVU6520
 24871 0050 09FB0808 		mla	r8, r9, r8, r0
 24872 0054 08F10208 		add	r8, r8, #2
5529:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
 24873              		.loc 1 5529 22 view .LVU6521
 24874 0058 05F00705 		and	r5, r5, #7
 24875              	.LVL1952:
5529:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
 24876              		.loc 1 5529 9 view .LVU6522
 24877 005c 0127     		movs	r7, #1
5532:src/xeq.c     **** 					*p |= pix;
 24878              		.loc 1 5532 8 view .LVU6523
 24879 005e 942E     		cmp	r6, #148
5530:src/xeq.c     **** 
 24880              		.loc 1 5530 7 view .LVU6524
 24881 0060 4444     		add	r4, r4, r8
 24882              	.LVL1953:
5529:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
 24883              		.loc 1 5529 9 view .LVU6525
 24884 0062 07FA05F7 		lsl	r7, r7, r5
 24885              	.LVL1954:
5530:src/xeq.c     **** 
 24886              		.loc 1 5530 5 is_stmt 1 view .LVU6526
5532:src/xeq.c     **** 					*p |= pix;
 24887              		.loc 1 5532 5 view .LVU6527
5532:src/xeq.c     **** 					*p |= pix;
 24888              		.loc 1 5532 8 is_stmt 0 view .LVU6528
 24889 0066 0ED0     		beq	.L1780
5535:src/xeq.c     **** 					*p &= ~pix;
 24890              		.loc 1 5535 10 is_stmt 1 view .LVU6529
5535:src/xeq.c     **** 					*p &= ~pix;
 24891              		.loc 1 5535 13 is_stmt 0 view .LVU6530
 24892 0068 952E     		cmp	r6, #149
 24893 006a 10D0     		beq	.L1781
5538:src/xeq.c     **** 					*p ^= pix;
 24894              		.loc 1 5538 10 is_stmt 1 view .LVU6531
5538:src/xeq.c     **** 					*p ^= pix;
 24895              		.loc 1 5538 13 is_stmt 0 view .LVU6532
 24896 006c 962E     		cmp	r6, #150
 24897 006e D9D1     		bne	.L1767
5539:src/xeq.c     **** 				}
 24898              		.loc 1 5539 6 is_stmt 1 view .LVU6533
5539:src/xeq.c     **** 				}
 24899              		.loc 1 5539 9 is_stmt 0 view .LVU6534
 24900 0070 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 24901 0072 5F40     		eors	r7, r7, r3
 24902              	.LVL1955:
5539:src/xeq.c     **** 				}
 24903              		.loc 1 5539 9 view .LVU6535
 24904 0074 2770     		strb	r7, [r4]
 24905 0076 D7E7     		b	.L1765
 24906              	.LVL1956:
 24907              	.L1779:
ARM GAS  /tmp/cciWh9P3.s 			page 641


5539:src/xeq.c     **** 				}
 24908              		.loc 1 5539 9 view .LVU6536
 24909              	.LBE3399:
5544:src/xeq.c     **** 		}
 24910              		.loc 1 5544 4 is_stmt 1 view .LVU6537
5544:src/xeq.c     **** 		}
 24911              		.loc 1 5544 13 is_stmt 0 view .LVU6538
 24912 0078 2078     		ldrb	r0, [r4]	@ zero_extendqisi2
5544:src/xeq.c     **** 		}
 24913              		.loc 1 5544 4 view .LVU6539
 24914 007a 3840     		ands	r0, r0, r7
 24915 007c FFF7FEFF 		bl	fin_tst
 24916              	.LVL1957:
 24917              	.LBE3406:
5547:src/xeq.c     **** #endif
 24918              		.loc 1 5547 1 view .LVU6540
 24919 0080 03B0     		add	sp, sp, #12
 24920              		.cfi_remember_state
 24921              		.cfi_def_cfa_offset 28
 24922              		@ sp needed
 24923 0082 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 24924              	.LVL1958:
 24925              	.L1780:
 24926              		.cfi_restore_state
 24927              	.LBB3407:
 24928              	.LBB3404:
5533:src/xeq.c     **** 				}
 24929              		.loc 1 5533 6 is_stmt 1 view .LVU6541
5533:src/xeq.c     **** 				}
 24930              		.loc 1 5533 9 is_stmt 0 view .LVU6542
 24931 0086 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 24932 0088 1F43     		orrs	r7, r7, r3
 24933              	.LVL1959:
5533:src/xeq.c     **** 				}
 24934              		.loc 1 5533 9 view .LVU6543
 24935 008a 2770     		strb	r7, [r4]
5533:src/xeq.c     **** 				}
 24936              		.loc 1 5533 9 view .LVU6544
 24937              	.LBE3404:
5543:src/xeq.c     **** 			fin_tst( *p & pix );
 24938              		.loc 1 5543 3 is_stmt 1 view .LVU6545
 24939 008c CCE7     		b	.L1765
 24940              	.LVL1960:
 24941              	.L1781:
 24942              	.LBB3405:
5536:src/xeq.c     **** 				}
 24943              		.loc 1 5536 6 view .LVU6546
5536:src/xeq.c     **** 				}
 24944              		.loc 1 5536 9 is_stmt 0 view .LVU6547
 24945 008e 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 24946 0090 23EA0707 		bic	r7, r3, r7
 24947              	.LVL1961:
5536:src/xeq.c     **** 				}
 24948              		.loc 1 5536 9 view .LVU6548
 24949 0094 2770     		strb	r7, [r4]
 24950 0096 C7E7     		b	.L1765
 24951              	.LBE3405:
ARM GAS  /tmp/cciWh9P3.s 			page 642


 24952              	.LBE3407:
 24953              		.cfi_endproc
 24954              	.LFE256:
 24956              		.section	.text.not_running,"ax",%progbits
 24957              		.align	1
 24958              		.p2align 2,,3
 24959              		.global	not_running
 24960              		.syntax unified
 24961              		.thumb
 24962              		.thumb_func
 24963              		.fpu fpv4-sp-d16
 24965              	not_running:
 24966              	.LFB257:
5554:src/xeq.c     **** 	if ( Running ) {
 24967              		.loc 1 5554 23 is_stmt 1 view -0
 24968              		.cfi_startproc
 24969              		@ args = 0, pretend = 0, frame = 0
 24970              		@ frame_needed = 0, uses_anonymous_args = 0
 24971              		@ link register save eliminated.
5555:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 24972              		.loc 1 5555 2 view .LVU6550
5555:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 24973              		.loc 1 5555 7 is_stmt 0 view .LVU6551
 24974 0000 064B     		ldr	r3, .L1787
5555:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 24975              		.loc 1 5555 5 view .LVU6552
 24976 0002 1B68     		ldr	r3, [r3]
 24977 0004 0BB9     		cbnz	r3, .L1786
5559:src/xeq.c     **** }
 24978              		.loc 1 5559 9 view .LVU6553
 24979 0006 0120     		movs	r0, #1
 24980 0008 7047     		bx	lr
 24981              	.L1786:
5556:src/xeq.c     **** 		return 0;
 24982              		.loc 1 5556 3 is_stmt 1 view .LVU6554
 24983              	.LVL1962:
 24984              	.LBB3412:
 24985              	.LBI3412:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24986              		.loc 1 536 5 view .LVU6555
 24987              	.LBB3413:
 537:src/xeq.c     **** 		Error = e;
 24988              		.loc 1 537 2 view .LVU6556
 537:src/xeq.c     **** 		Error = e;
 24989              		.loc 1 537 12 is_stmt 0 view .LVU6557
 24990 000a 054B     		ldr	r3, .L1787+4
 24991 000c 1868     		ldr	r0, [r3]
 537:src/xeq.c     **** 		Error = e;
 24992              		.loc 1 537 5 view .LVU6558
 24993 000e 10B9     		cbnz	r0, .L1785
 24994              	.LVL1963:
 24995              	.LBB3414:
 24996              	.LBI3414:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24997              		.loc 1 536 5 is_stmt 1 view .LVU6559
 24998              	.LBB3415:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/cciWh9P3.s 			page 643


 24999              		.loc 1 538 3 view .LVU6560
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 25000              		.loc 1 538 9 is_stmt 0 view .LVU6561
 25001 0010 0722     		movs	r2, #7
 25002 0012 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 25003              		.loc 1 539 3 is_stmt 1 view .LVU6562
 25004 0014 7047     		bx	lr
 25005              	.LVL1964:
 25006              	.L1785:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 25007              		.loc 1 539 3 is_stmt 0 view .LVU6563
 25008              	.LBE3415:
 25009              	.LBE3414:
 25010              	.LBE3413:
 25011              	.LBE3412:
5557:src/xeq.c     **** 	}
 25012              		.loc 1 5557 10 view .LVU6564
 25013 0016 0020     		movs	r0, #0
 25014              	.LVL1965:
5560:src/xeq.c     **** 
 25015              		.loc 1 5560 1 view .LVU6565
 25016 0018 7047     		bx	lr
 25017              	.L1788:
 25018 001a 00BF     		.align	2
 25019              	.L1787:
 25020 001c 00000000 		.word	Running
 25021 0020 00000000 		.word	Error
 25022              		.cfi_endproc
 25023              	.LFE257:
 25025              		.section	.text.set_running_off_sst,"ax",%progbits
 25026              		.align	1
 25027              		.p2align 2,,3
 25028              		.global	set_running_off_sst
 25029              		.syntax unified
 25030              		.thumb
 25031              		.thumb_func
 25032              		.fpu fpv4-sp-d16
 25034              	set_running_off_sst:
 25035              	.LFB258:
5565:src/xeq.c     **** 	Running = 0;
 25036              		.loc 1 5565 28 is_stmt 1 view -0
 25037              		.cfi_startproc
 25038              		@ args = 0, pretend = 0, frame = 0
 25039              		@ frame_needed = 0, uses_anonymous_args = 0
 25040              		@ link register save eliminated.
5566:src/xeq.c     **** }
 25041              		.loc 1 5566 2 view .LVU6567
5566:src/xeq.c     **** }
 25042              		.loc 1 5566 10 is_stmt 0 view .LVU6568
 25043 0000 014B     		ldr	r3, .L1790
 25044 0002 0022     		movs	r2, #0
 25045 0004 1A60     		str	r2, [r3]
5567:src/xeq.c     **** 
 25046              		.loc 1 5567 1 view .LVU6569
 25047 0006 7047     		bx	lr
 25048              	.L1791:
ARM GAS  /tmp/cciWh9P3.s 			page 644


 25049              		.align	2
 25050              	.L1790:
 25051 0008 00000000 		.word	Running
 25052              		.cfi_endproc
 25053              	.LFE258:
 25055              		.section	.text.set_running_on_sst,"ax",%progbits
 25056              		.align	1
 25057              		.p2align 2,,3
 25058              		.global	set_running_on_sst
 25059              		.syntax unified
 25060              		.thumb
 25061              		.thumb_func
 25062              		.fpu fpv4-sp-d16
 25064              	set_running_on_sst:
 25065              	.LFB259:
5569:src/xeq.c     **** 	Running = 1;
 25066              		.loc 1 5569 27 is_stmt 1 view -0
 25067              		.cfi_startproc
 25068              		@ args = 0, pretend = 0, frame = 0
 25069              		@ frame_needed = 0, uses_anonymous_args = 0
 25070              		@ link register save eliminated.
5570:src/xeq.c     **** }
 25071              		.loc 1 5570 2 view .LVU6571
5570:src/xeq.c     **** }
 25072              		.loc 1 5570 10 is_stmt 0 view .LVU6572
 25073 0000 014B     		ldr	r3, .L1793
 25074 0002 0122     		movs	r2, #1
 25075 0004 1A60     		str	r2, [r3]
5571:src/xeq.c     **** 
 25076              		.loc 1 5571 1 view .LVU6573
 25077 0006 7047     		bx	lr
 25078              	.L1794:
 25079              		.align	2
 25080              	.L1793:
 25081 0008 00000000 		.word	Running
 25082              		.cfi_endproc
 25083              	.LFE259:
 25085              		.section	.text.set_running_off,"ax",%progbits
 25086              		.align	1
 25087              		.p2align 2,,3
 25088              		.global	set_running_off
 25089              		.syntax unified
 25090              		.thumb
 25091              		.thumb_func
 25092              		.fpu fpv4-sp-d16
 25094              	set_running_off:
 25095              	.LFB260:
5573:src/xeq.c     **** 	set_running_off_sst();
 25096              		.loc 1 5573 24 is_stmt 1 view -0
 25097              		.cfi_startproc
 25098              		@ args = 0, pretend = 0, frame = 0
 25099              		@ frame_needed = 0, uses_anonymous_args = 0
 25100              		@ link register save eliminated.
5574:src/xeq.c     **** 	State.entryp = 0;
 25101              		.loc 1 5574 2 view .LVU6575
 25102              	.LBB3416:
 25103              	.LBI3416:
ARM GAS  /tmp/cciWh9P3.s 			page 645


5565:src/xeq.c     **** 	Running = 0;
 25104              		.loc 1 5565 6 view .LVU6576
 25105              	.LBB3417:
5566:src/xeq.c     **** }
 25106              		.loc 1 5566 2 view .LVU6577
 25107              	.LBE3417:
 25108              	.LBE3416:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 25109              		.loc 1 5575 15 is_stmt 0 view .LVU6578
 25110 0000 064B     		ldr	r3, .L1796
 25111              	.LBB3420:
 25112              	.LBB3418:
5566:src/xeq.c     **** }
 25113              		.loc 1 5566 10 view .LVU6579
 25114 0002 074A     		ldr	r2, .L1796+4
 25115              	.LBE3418:
 25116              	.LBE3420:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 25117              		.loc 1 5575 15 view .LVU6580
 25118 0004 1B68     		ldr	r3, [r3]
 25119              	.LBB3421:
 25120              	.LBB3419:
5566:src/xeq.c     **** }
 25121              		.loc 1 5566 10 view .LVU6581
 25122 0006 0021     		movs	r1, #0
 25123 0008 1160     		str	r1, [r2]
 25124              	.LBE3419:
 25125              	.LBE3421:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 25126              		.loc 1 5575 2 is_stmt 1 view .LVU6582
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 25127              		.loc 1 5575 15 is_stmt 0 view .LVU6583
 25128 000a 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 25129 000e 61F30412 		bfi	r2, r1, #4, #1
 25130 0012 83F8DD27 		strb	r2, [r3, #2013]
 25131              		.loc 1 5576 2 is_stmt 1 view .LVU6584
 25132 0016 8A20     		movs	r0, #138
 25133 0018 FFF7FEBF 		b	dot
 25134              	.LVL1966:
 25135              	.L1797:
 25136              		.align	2
 25137              	.L1796:
 25138 001c 00000000 		.word	main_ram
 25139 0020 00000000 		.word	Running
 25140              		.cfi_endproc
 25141              	.LFE260:
 25143              		.section	.text.set_running_on,"ax",%progbits
 25144              		.align	1
 25145              		.p2align 2,,3
 25146              		.global	set_running_on
 25147              		.syntax unified
 25148              		.thumb
 25149              		.thumb_func
 25150              		.fpu fpv4-sp-d16
 25152              	set_running_on:
 25153              	.LFB261:
5577:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 646


5578:src/xeq.c     **** 
5579:src/xeq.c     **** void set_running_on() {
 25154              		.loc 1 5579 23 view -0
 25155              		.cfi_startproc
 25156              		@ args = 0, pretend = 0, frame = 0
 25157              		@ frame_needed = 0, uses_anonymous_args = 0
5580:src/xeq.c     **** 	update_speed(0);
 25158              		.loc 1 5580 17 view .LVU6586
5581:src/xeq.c     **** 	GoFast = 1;
 25159              		.loc 1 5581 2 view .LVU6587
5579:src/xeq.c     **** 	update_speed(0);
 25160              		.loc 1 5579 23 is_stmt 0 view .LVU6588
 25161 0000 38B5     		push	{r3, r4, r5, lr}
 25162              		.cfi_def_cfa_offset 16
 25163              		.cfi_offset 3, -16
 25164              		.cfi_offset 4, -12
 25165              		.cfi_offset 5, -8
 25166              		.cfi_offset 14, -4
 25167              	.LBB3422:
 25168              	.LBB3423:
 182:src/xeq.c     **** }
 25169              		.loc 1 182 9 view .LVU6589
 25170 0002 0C4B     		ldr	r3, .L1804
 25171              	.LBE3423:
 25172              	.LBE3422:
 25173              		.loc 1 5581 9 view .LVU6590
 25174 0004 0C4D     		ldr	r5, .L1804+4
 25175              	.LBB3427:
 25176              	.LBB3424:
 182:src/xeq.c     **** }
 25177              		.loc 1 182 9 view .LVU6591
 25178 0006 1B68     		ldr	r3, [r3]
 25179              	.LBE3424:
 25180              	.LBE3427:
 25181              	.LBB3428:
 25182              	.LBB3429:
5570:src/xeq.c     **** }
 25183              		.loc 1 5570 10 view .LVU6592
 25184 0008 0C4C     		ldr	r4, .L1804+8
 25185              	.LBE3429:
 25186              	.LBE3428:
 25187              	.LBB3431:
 25188              	.LBB3425:
 182:src/xeq.c     **** }
 25189              		.loc 1 182 9 view .LVU6593
 25190 000a B3F8E037 		ldrh	r3, [r3, #2016]
 25191              	.LBE3425:
 25192              	.LBE3431:
5582:src/xeq.c     **** 	set_running_on_sst();
5583:src/xeq.c     **** 	LastKey = 0;
 25193              		.loc 1 5583 10 view .LVU6594
 25194 000e 0C49     		ldr	r1, .L1804+12
5584:src/xeq.c     **** 	if (!is_xrom())
 25195              		.loc 1 5584 5 view .LVU6595
 25196 0010 9B0B     		lsrs	r3, r3, #14
5581:src/xeq.c     **** 	set_running_on_sst();
 25197              		.loc 1 5581 9 view .LVU6596
ARM GAS  /tmp/cciWh9P3.s 			page 647


 25198 0012 0122     		movs	r2, #1
5583:src/xeq.c     **** 	if (!is_xrom())
 25199              		.loc 1 5583 10 view .LVU6597
 25200 0014 0020     		movs	r0, #0
 25201              		.loc 1 5584 5 view .LVU6598
 25202 0016 032B     		cmp	r3, #3
5581:src/xeq.c     **** 	set_running_on_sst();
 25203              		.loc 1 5581 9 view .LVU6599
 25204 0018 2A60     		str	r2, [r5]
5582:src/xeq.c     **** 	LastKey = 0;
 25205              		.loc 1 5582 2 is_stmt 1 view .LVU6600
 25206              	.LBB3432:
 25207              	.LBI3428:
5569:src/xeq.c     **** 	Running = 1;
 25208              		.loc 1 5569 6 view .LVU6601
 25209              	.LBB3430:
5570:src/xeq.c     **** }
 25210              		.loc 1 5570 2 view .LVU6602
5570:src/xeq.c     **** }
 25211              		.loc 1 5570 10 is_stmt 0 view .LVU6603
 25212 001a 2260     		str	r2, [r4]
 25213              	.LBE3430:
 25214              	.LBE3432:
5583:src/xeq.c     **** 	if (!is_xrom())
 25215              		.loc 1 5583 2 is_stmt 1 view .LVU6604
5583:src/xeq.c     **** 	if (!is_xrom())
 25216              		.loc 1 5583 10 is_stmt 0 view .LVU6605
 25217 001c C874     		strb	r0, [r1, #19]
 25218              		.loc 1 5584 2 is_stmt 1 view .LVU6606
 25219              	.LBB3433:
 25220              	.LBI3422:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 25221              		.loc 1 181 5 view .LVU6607
 25222              	.LBB3426:
 182:src/xeq.c     **** }
 25223              		.loc 1 182 2 view .LVU6608
 25224              	.LBE3426:
 25225              	.LBE3433:
 25226              		.loc 1 5584 5 is_stmt 0 view .LVU6609
 25227 001e 01D0     		beq	.L1799
5585:src/xeq.c     **** 		error_message(ERR_NONE);
 25228              		.loc 1 5585 3 is_stmt 1 view .LVU6610
 25229 0020 FFF7FEFF 		bl	error_message
 25230              	.LVL1967:
 25231              	.L1799:
5586:src/xeq.c     **** 	dot(BEG, 0);
 25232              		.loc 1 5586 2 view .LVU6611
 25233 0024 0021     		movs	r1, #0
 25234 0026 8820     		movs	r0, #136
 25235 0028 FFF7FEFF 		bl	dot
 25236              	.LVL1968:
5587:src/xeq.c     **** 	finish_display();
 25237              		.loc 1 5587 2 view .LVU6612
5588:src/xeq.c     **** }
 25238              		.loc 1 5588 1 is_stmt 0 view .LVU6613
 25239 002c BDE83840 		pop	{r3, r4, r5, lr}
 25240              		.cfi_restore 14
ARM GAS  /tmp/cciWh9P3.s 			page 648


 25241              		.cfi_restore 5
 25242              		.cfi_restore 4
 25243              		.cfi_restore 3
 25244              		.cfi_def_cfa_offset 0
5587:src/xeq.c     **** 	finish_display();
 25245              		.loc 1 5587 2 view .LVU6614
 25246 0030 FFF7FEBF 		b	finish_display
 25247              	.LVL1969:
 25248              	.L1805:
 25249              		.align	2
 25250              	.L1804:
 25251 0034 00000000 		.word	main_ram
 25252 0038 00000000 		.word	GoFast
 25253 003c 00000000 		.word	Running
 25254 0040 00000000 		.word	StateWhileOn
 25255              		.cfi_endproc
 25256              	.LFE261:
 25258              		.section	.text.gsbgto,"ax",%progbits
 25259              		.align	1
 25260              		.p2align 2,,3
 25261              		.syntax unified
 25262              		.thumb
 25263              		.thumb_func
 25264              		.fpu fpv4-sp-d16
 25266              	gsbgto:
 25267              	.LVL1970:
 25268              	.LFB149:
2017:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25269              		.loc 1 2017 66 is_stmt 1 view -0
 25270              		.cfi_startproc
 25271              		@ args = 0, pretend = 0, frame = 0
 25272              		@ frame_needed = 0, uses_anonymous_args = 0
2018:src/xeq.c     **** 	raw_set_pc(pc);
 25273              		.loc 1 2018 2 view .LVU6616
2017:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25274              		.loc 1 2017 66 is_stmt 0 view .LVU6617
 25275 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25276              		.cfi_def_cfa_offset 24
 25277              		.cfi_offset 4, -24
 25278              		.cfi_offset 5, -20
 25279              		.cfi_offset 6, -16
 25280              		.cfi_offset 7, -12
 25281              		.cfi_offset 8, -8
 25282              		.cfi_offset 14, -4
2018:src/xeq.c     **** 	raw_set_pc(pc);
 25283              		.loc 1 2018 39 view .LVU6618
 25284 0004 214F     		ldr	r7, .L1817
 25285 0006 3B68     		ldr	r3, [r7]
2017:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25286              		.loc 1 2017 66 view .LVU6619
 25287 0008 0446     		mov	r4, r0
 25288 000a 0D46     		mov	r5, r1
 25289              	.LBB3442:
 25290              	.LBB3443:
 279:src/xeq.c     **** 	update_program_bounds(0);
 25291              		.loc 1 279 11 view .LVU6620
 25292 000c A3F8E007 		strh	r0, [r3, #2016]	@ movhi
ARM GAS  /tmp/cciWh9P3.s 			page 649


 280:src/xeq.c     **** }
 25293              		.loc 1 280 2 view .LVU6621
 25294 0010 0020     		movs	r0, #0
 25295              	.LVL1971:
 280:src/xeq.c     **** }
 25296              		.loc 1 280 2 view .LVU6622
 25297              	.LBE3443:
 25298              	.LBE3442:
2018:src/xeq.c     **** 	raw_set_pc(pc);
 25299              		.loc 1 2018 27 view .LVU6623
 25300 0012 B3F8EC87 		ldrh	r8, [r3, #2028]
 25301              	.LVL1972:
2019:src/xeq.c     **** 	if (gsb) {
 25302              		.loc 1 2019 2 is_stmt 1 view .LVU6624
 25303              	.LBB3446:
 25304              	.LBI3442:
 278:src/xeq.c     **** 	State.pc = pc;
 25305              		.loc 1 278 13 view .LVU6625
 25306              	.LBB3444:
 279:src/xeq.c     **** 	update_program_bounds(0);
 25307              		.loc 1 279 2 view .LVU6626
 280:src/xeq.c     **** }
 25308              		.loc 1 280 2 view .LVU6627
 25309              	.LBE3444:
 25310              	.LBE3446:
2017:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25311              		.loc 1 2017 66 is_stmt 0 view .LVU6628
 25312 0016 1646     		mov	r6, r2
 25313              	.LBB3447:
 25314              	.LBB3445:
 280:src/xeq.c     **** }
 25315              		.loc 1 280 2 view .LVU6629
 25316 0018 FFF7FEFF 		bl	update_program_bounds
 25317              	.LVL1973:
 280:src/xeq.c     **** }
 25318              		.loc 1 280 2 view .LVU6630
 25319              	.LBE3445:
 25320              	.LBE3447:
2020:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25321              		.loc 1 2020 2 is_stmt 1 view .LVU6631
2020:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25322              		.loc 1 2020 5 is_stmt 0 view .LVU6632
 25323 001c D5B1     		cbz	r5, .L1806
2021:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25324              		.loc 1 2021 3 is_stmt 1 view .LVU6633
2021:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25325              		.loc 1 2021 7 is_stmt 0 view .LVU6634
 25326 001e 1C4B     		ldr	r3, .L1817+4
2021:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25327              		.loc 1 2021 19 view .LVU6635
 25328 0020 1C4A     		ldr	r2, .L1817+8
2021:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25329              		.loc 1 2021 16 view .LVU6636
 25330 0022 1B68     		ldr	r3, [r3]
 25331 0024 1268     		ldr	r2, [r2]
 25332 0026 1343     		orrs	r3, r3, r2
 25333              	.LBB3448:
ARM GAS  /tmp/cciWh9P3.s 			page 650


 25334              	.LBB3449:
1409:src/xeq.c     **** }
 25335              		.loc 1 1409 14 view .LVU6637
 25336 0028 3A68     		ldr	r2, [r7]
 25337              	.LBE3449:
 25338              	.LBE3448:
2021:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25339              		.loc 1 2021 16 view .LVU6638
 25340 002a 1FD0     		beq	.L1809
 25341              	.LVL1974:
 25342              	.L1810:
2029:src/xeq.c     **** 			// Stack is full
 25343              		.loc 1 2029 3 is_stmt 1 view .LVU6639
2029:src/xeq.c     **** 			// Stack is full
 25344              		.loc 1 2029 36 is_stmt 0 view .LVU6640
 25345 002c 1A49     		ldr	r1, .L1817+12
2029:src/xeq.c     **** 			// Stack is full
 25346              		.loc 1 2029 8 view .LVU6641
 25347 002e B2F9E237 		ldrsh	r3, [r2, #2018]
2029:src/xeq.c     **** 			// Stack is full
 25348              		.loc 1 2029 58 view .LVU6642
 25349 0032 91F90110 		ldrsb	r1, [r1, #1]
 25350 0036 0029     		cmp	r1, #0
 25351 0038 A4BF     		itt	ge
 25352 003a 1849     		ldrge	r1, .L1817+16
 25353 003c 0968     		ldrge	r1, [r1]
2029:src/xeq.c     **** 			// Stack is full
 25354              		.loc 1 2029 7 view .LVU6643
 25355 003e C3F10000 		rsb	r0, r3, #0
2029:src/xeq.c     **** 			// Stack is full
 25356              		.loc 1 2029 58 view .LVU6644
 25357 0042 B8BF     		it	lt
 25358 0044 8821     		movlt	r1, #136
2029:src/xeq.c     **** 			// Stack is full
 25359              		.loc 1 2029 6 view .LVU6645
 25360 0046 8842     		cmp	r0, r1
 25361 0048 06DB     		blt	.L1813
2031:src/xeq.c     **** 			// clrretstk();
 25362              		.loc 1 2031 4 is_stmt 1 view .LVU6646
 25363              	.LVL1975:
 25364              	.LBB3451:
 25365              	.LBI3451:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25366              		.loc 1 536 5 view .LVU6647
 25367              	.LBB3452:
 537:src/xeq.c     **** 		Error = e;
 25368              		.loc 1 537 2 view .LVU6648
 537:src/xeq.c     **** 		Error = e;
 25369              		.loc 1 537 12 is_stmt 0 view .LVU6649
 25370 004a 154B     		ldr	r3, .L1817+20
 537:src/xeq.c     **** 		Error = e;
 25371              		.loc 1 537 5 view .LVU6650
 25372 004c 1A68     		ldr	r2, [r3]
 25373 004e 0AB9     		cbnz	r2, .L1806
 25374              	.LVL1976:
 25375              	.LBB3453:
 25376              	.LBI3453:
ARM GAS  /tmp/cciWh9P3.s 			page 651


 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25377              		.loc 1 536 5 is_stmt 1 view .LVU6651
 25378              	.LBB3454:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 25379              		.loc 1 538 3 view .LVU6652
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 25380              		.loc 1 538 9 is_stmt 0 view .LVU6653
 25381 0050 0B22     		movs	r2, #11
 25382 0052 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 25383              		.loc 1 539 3 is_stmt 1 view .LVU6654
 25384              	.LVL1977:
 25385              	.L1806:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 25386              		.loc 1 539 3 is_stmt 0 view .LVU6655
 25387              	.LBE3454:
 25388              	.LBE3453:
 25389              	.LBE3452:
 25390              	.LBE3451:
2039:src/xeq.c     **** 
 25391              		.loc 1 2039 1 view .LVU6656
 25392 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25393              	.LVL1978:
 25394              	.L1813:
2036:src/xeq.c     **** 		}
 25395              		.loc 1 2036 4 is_stmt 1 view .LVU6657
2036:src/xeq.c     **** 		}
 25396              		.loc 1 2036 10 is_stmt 0 view .LVU6658
 25397 0058 1249     		ldr	r1, .L1817+24
2036:src/xeq.c     **** 		}
 25398              		.loc 1 2036 11 view .LVU6659
 25399 005a 013B     		subs	r3, r3, #1
 25400 005c 1BB2     		sxth	r3, r3
2036:src/xeq.c     **** 		}
 25401              		.loc 1 2036 10 view .LVU6660
 25402 005e 0968     		ldr	r1, [r1]
2036:src/xeq.c     **** 		}
 25403              		.loc 1 2036 24 view .LVU6661
 25404 0060 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25405 0064 21F81360 		strh	r6, [r1, r3, lsl #1]	@ movhi
2039:src/xeq.c     **** 
 25406              		.loc 1 2039 1 view .LVU6662
 25407 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25408              	.LVL1979:
 25409              	.L1809:
2023:src/xeq.c     **** 			set_running_on();
 25410              		.loc 1 2023 4 is_stmt 1 view .LVU6663
 25411              	.LBB3455:
 25412              	.LBI3448:
1408:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 25413              		.loc 1 1408 6 view .LVU6664
 25414              	.LBB3450:
1409:src/xeq.c     **** }
 25415              		.loc 1 1409 2 view .LVU6665
1409:src/xeq.c     **** }
 25416              		.loc 1 1409 24 is_stmt 0 view .LVU6666
 25417 006c A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
ARM GAS  /tmp/cciWh9P3.s 			page 652


1409:src/xeq.c     **** }
 25418              		.loc 1 1409 12 view .LVU6667
 25419 0070 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25420              	.LBE3450:
 25421              	.LBE3455:
2024:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 25422              		.loc 1 2024 4 is_stmt 1 view .LVU6668
 25423 0074 FFF7FEFF 		bl	set_running_on
 25424              	.LVL1980:
2025:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25425              		.loc 1 2025 4 view .LVU6669
2025:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25426              		.loc 1 2025 10 is_stmt 0 view .LVU6670
 25427 0078 A30B     		lsrs	r3, r4, #14
2025:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25428              		.loc 1 2025 7 view .LVU6671
 25429 007a 032B     		cmp	r3, #3
2025:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25430              		.loc 1 2025 24 view .LVU6672
 25431 007c 3A68     		ldr	r2, [r7]
2025:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25432              		.loc 1 2025 7 view .LVU6673
 25433 007e D5D0     		beq	.L1810
2025:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25434              		.loc 1 2025 21 discriminator 1 view .LVU6674
 25435 0080 B2F8EC37 		ldrh	r3, [r2, #2028]
 25436 0084 4345     		cmp	r3, r8
 25437 0086 18BF     		it	ne
 25438 0088 2646     		movne	r6, r4
 25439              	.LVL1981:
2025:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25440              		.loc 1 2025 21 discriminator 1 view .LVU6675
 25441 008a CFE7     		b	.L1810
 25442              	.L1818:
 25443              		.align	2
 25444              	.L1817:
 25445 008c 00000000 		.word	main_ram
 25446 0090 00000000 		.word	Running
 25447 0094 00000000 		.word	XromRunning
 25448 0098 00000000 		.word	XromParams
 25449 009c 00000000 		.word	RetStkSize
 25450 00a0 00000000 		.word	Error
 25451 00a4 00000000 		.word	RetStk
 25452              		.cfi_endproc
 25453              	.LFE149:
 25455              		.section	.text.cmdgtocommon,"ax",%progbits
 25456              		.align	1
 25457              		.p2align 2,,3
 25458              		.global	cmdgtocommon
 25459              		.syntax unified
 25460              		.thumb
 25461              		.thumb_func
 25462              		.fpu fpv4-sp-d16
 25464              	cmdgtocommon:
 25465              	.LVL1982:
 25466              	.LFB152:
2079:src/xeq.c     **** 	if (pc == 0)
ARM GAS  /tmp/cciWh9P3.s 			page 653


 25467              		.loc 1 2079 45 is_stmt 1 view -0
 25468              		.cfi_startproc
 25469              		@ args = 0, pretend = 0, frame = 0
 25470              		@ frame_needed = 0, uses_anonymous_args = 0
 25471              		@ link register save eliminated.
2080:src/xeq.c     **** 		set_running_off();
 25472              		.loc 1 2080 2 view .LVU6677
 25473              	.LBB3462:
 25474              	.LBB3463:
 25475              	.LBB3464:
 25476              	.LBB3465:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 25477              		.loc 1 5575 15 is_stmt 0 view .LVU6678
 25478 0000 0A4A     		ldr	r2, .L1821
 25479              	.LBE3465:
 25480              	.LBE3464:
 25481              	.LBE3463:
 25482              	.LBE3462:
2080:src/xeq.c     **** 		set_running_off();
 25483              		.loc 1 2080 5 view .LVU6679
 25484 0002 0B46     		mov	r3, r1
 25485 0004 59B9     		cbnz	r1, .L1820
 25486              	.LBB3473:
 25487              	.LBI3462:
2079:src/xeq.c     **** 	if (pc == 0)
 25488              		.loc 1 2079 6 is_stmt 1 view .LVU6680
 25489              	.LVL1983:
 25490              	.LBB3472:
2081:src/xeq.c     **** 	else
 25491              		.loc 1 2081 3 view .LVU6681
 25492              	.LBB3471:
 25493              	.LBI3464:
5573:src/xeq.c     **** 	set_running_off_sst();
 25494              		.loc 1 5573 6 view .LVU6682
 25495              	.LBB3470:
5574:src/xeq.c     **** 	State.entryp = 0;
 25496              		.loc 1 5574 2 view .LVU6683
 25497              	.LBB3466:
 25498              	.LBI3466:
5565:src/xeq.c     **** 	Running = 0;
 25499              		.loc 1 5565 6 view .LVU6684
 25500              	.LBB3467:
5566:src/xeq.c     **** }
 25501              		.loc 1 5566 2 view .LVU6685
5566:src/xeq.c     **** }
 25502              		.loc 1 5566 10 is_stmt 0 view .LVU6686
 25503 0006 0A48     		ldr	r0, .L1821+4
 25504              	.LVL1984:
5566:src/xeq.c     **** }
 25505              		.loc 1 5566 10 view .LVU6687
 25506              	.LBE3467:
 25507              	.LBE3466:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 25508              		.loc 1 5575 15 view .LVU6688
 25509 0008 1268     		ldr	r2, [r2]
 25510              	.LBB3469:
 25511              	.LBB3468:
ARM GAS  /tmp/cciWh9P3.s 			page 654


5566:src/xeq.c     **** }
 25512              		.loc 1 5566 10 view .LVU6689
 25513 000a 0160     		str	r1, [r0]
 25514              	.LBE3468:
 25515              	.LBE3469:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 25516              		.loc 1 5575 2 is_stmt 1 view .LVU6690
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 25517              		.loc 1 5575 15 is_stmt 0 view .LVU6691
 25518 000c 92F8DD07 		ldrb	r0, [r2, #2013]	@ zero_extendqisi2
 25519 0010 61F30410 		bfi	r0, r1, #4, #1
 25520              	.LVL1985:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 25521              		.loc 1 5575 15 view .LVU6692
 25522 0014 82F8DD07 		strb	r0, [r2, #2013]
5576:src/xeq.c     **** }
 25523              		.loc 1 5576 2 is_stmt 1 view .LVU6693
 25524 0018 8A20     		movs	r0, #138
 25525 001a FFF7FEBF 		b	dot
 25526              	.LVL1986:
 25527              	.L1820:
5576:src/xeq.c     **** }
 25528              		.loc 1 5576 2 is_stmt 0 view .LVU6694
 25529              	.LBE3470:
 25530              	.LBE3471:
 25531              	.LBE3472:
 25532              	.LBE3473:
2083:src/xeq.c     **** }
 25533              		.loc 1 2083 3 is_stmt 1 view .LVU6695
2083:src/xeq.c     **** }
 25534              		.loc 1 2083 19 is_stmt 0 view .LVU6696
 25535 001e 1268     		ldr	r2, [r2]
2083:src/xeq.c     **** }
 25536              		.loc 1 2083 3 view .LVU6697
 25537 0020 0146     		mov	r1, r0
 25538              	.LVL1987:
2083:src/xeq.c     **** }
 25539              		.loc 1 2083 3 view .LVU6698
 25540 0022 B2F8E027 		ldrh	r2, [r2, #2016]
 25541 0026 1846     		mov	r0, r3
 25542              	.LVL1988:
2083:src/xeq.c     **** }
 25543              		.loc 1 2083 3 view .LVU6699
 25544 0028 FFF7FEBF 		b	gsbgto
 25545              	.LVL1989:
 25546              	.L1822:
2083:src/xeq.c     **** }
 25547              		.loc 1 2083 3 view .LVU6700
 25548              		.align	2
 25549              	.L1821:
 25550 002c 00000000 		.word	main_ram
 25551 0030 00000000 		.word	Running
 25552              		.cfi_endproc
 25553              	.LFE152:
 25555              		.section	.text.cmdgto,"ax",%progbits
 25556              		.align	1
 25557              		.p2align 2,,3
ARM GAS  /tmp/cciWh9P3.s 			page 655


 25558              		.global	cmdgto
 25559              		.syntax unified
 25560              		.thumb
 25561              		.thumb_func
 25562              		.fpu fpv4-sp-d16
 25564              	cmdgto:
 25565              	.LVL1990:
 25566              	.LFB158:
2139:src/xeq.c     **** 	unsigned int lbl;
 25567              		.loc 1 2139 45 is_stmt 1 view -0
 25568              		.cfi_startproc
 25569              		@ args = 0, pretend = 0, frame = 0
 25570              		@ frame_needed = 0, uses_anonymous_args = 0
2140:src/xeq.c     **** 	if (is_xrom())
 25571              		.loc 1 2140 2 view .LVU6702
2141:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 25572              		.loc 1 2141 2 view .LVU6703
 25573              	.LBB3474:
 25574              	.LBI3474:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 25575              		.loc 1 181 5 view .LVU6704
 25576              	.LBB3475:
 182:src/xeq.c     **** }
 25577              		.loc 1 182 2 view .LVU6705
 182:src/xeq.c     **** }
 25578              		.loc 1 182 9 is_stmt 0 view .LVU6706
 25579 0000 0E4B     		ldr	r3, .L1827
 25580 0002 1B68     		ldr	r3, [r3]
 25581 0004 B3F8E037 		ldrh	r3, [r3, #2016]
 25582              	.LBE3475:
 25583              	.LBE3474:
2141:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 25584              		.loc 1 2141 5 view .LVU6707
 25585 0008 9A0B     		lsrs	r2, r3, #14
 25586 000a 032A     		cmp	r2, #3
2139:src/xeq.c     **** 	unsigned int lbl;
 25587              		.loc 1 2139 45 view .LVU6708
 25588 000c 10B5     		push	{r4, lr}
 25589              		.cfi_def_cfa_offset 8
 25590              		.cfi_offset 4, -8
 25591              		.cfi_offset 14, -4
2139:src/xeq.c     **** 	unsigned int lbl;
 25592              		.loc 1 2139 45 view .LVU6709
 25593 000e 0C46     		mov	r4, r1
2141:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 25594              		.loc 1 2141 5 view .LVU6710
 25595 0010 0CD1     		bne	.L1824
2142:src/xeq.c     **** 	else
 25596              		.loc 1 2142 3 is_stmt 1 view .LVU6711
2142:src/xeq.c     **** 	else
 25597              		.loc 1 2142 9 is_stmt 0 view .LVU6712
 25598 0012 0B4B     		ldr	r3, .L1827+4
2142:src/xeq.c     **** 	else
 25599              		.loc 1 2142 37 view .LVU6713
 25600 0014 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 25601              	.LVL1991:
2142:src/xeq.c     **** 	else
ARM GAS  /tmp/cciWh9P3.s 			page 656


 25602              		.loc 1 2142 7 view .LVU6714
 25603 0018 41F44041 		orr	r1, r1, #49152
 25604              	.LVL1992:
 25605              	.L1825:
2145:src/xeq.c     **** }
 25606              		.loc 1 2145 2 is_stmt 1 view .LVU6715
 25607 001c B4F14500 		subs	r0, r4, #69
 25608 0020 18BF     		it	ne
 25609 0022 0120     		movne	r0, #1
2146:src/xeq.c     **** 
 25610              		.loc 1 2146 1 is_stmt 0 view .LVU6716
 25611 0024 BDE81040 		pop	{r4, lr}
 25612              		.cfi_remember_state
 25613              		.cfi_restore 14
 25614              		.cfi_restore 4
 25615              		.cfi_def_cfa_offset 0
2145:src/xeq.c     **** }
 25616              		.loc 1 2145 2 view .LVU6717
 25617 0028 FFF7FEBF 		b	cmdgtocommon
 25618              	.LVL1993:
 25619              	.L1824:
 25620              		.cfi_restore_state
2144:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
 25621              		.loc 1 2144 3 is_stmt 1 view .LVU6718
 25622              	.LBB3476:
 25623              	.LBI3476:
2009:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 25624              		.loc 1 2009 14 view .LVU6719
 25625              	.LBB3477:
2010:src/xeq.c     **** }
 25626              		.loc 1 2010 2 view .LVU6720
2010:src/xeq.c     **** }
 25627              		.loc 1 2010 9 is_stmt 0 view .LVU6721
 25628 002c 40F4C441 		orr	r1, r0, #25088
 25629              	.LVL1994:
2010:src/xeq.c     **** }
 25630              		.loc 1 2010 9 view .LVU6722
 25631 0030 0322     		movs	r2, #3
 25632 0032 1846     		mov	r0, r3
 25633              	.LVL1995:
2010:src/xeq.c     **** }
 25634              		.loc 1 2010 9 view .LVU6723
 25635 0034 FFF7FEFF 		bl	find_opcode_from
 25636              	.LVL1996:
2010:src/xeq.c     **** }
 25637              		.loc 1 2010 9 view .LVU6724
 25638 0038 0146     		mov	r1, r0
 25639              	.LVL1997:
2010:src/xeq.c     **** }
 25640              		.loc 1 2010 9 view .LVU6725
 25641 003a EFE7     		b	.L1825
 25642              	.L1828:
 25643              		.align	2
 25644              	.L1827:
 25645 003c 00000000 		.word	main_ram
 25646 0040 00000000 		.word	.LANCHOR6
 25647              	.LBE3477:
ARM GAS  /tmp/cciWh9P3.s 			page 657


 25648              	.LBE3476:
 25649              		.cfi_endproc
 25650              	.LFE158:
 25652              		.section	.text.branchtoalpha,"ax",%progbits
 25653              		.align	1
 25654              		.p2align 2,,3
 25655              		.syntax unified
 25656              		.thumb
 25657              		.thumb_func
 25658              		.fpu fpv4-sp-d16
 25660              	branchtoalpha:
 25661              	.LVL1998:
 25662              	.LFB162:
2181:src/xeq.c     **** 	unsigned int op;
 25663              		.loc 1 2181 51 is_stmt 1 view -0
 25664              		.cfi_startproc
 25665              		@ args = 0, pretend = 0, frame = 0
 25666              		@ frame_needed = 0, uses_anonymous_args = 0
2182:src/xeq.c     **** 
 25667              		.loc 1 2182 2 view .LVU6727
2184:src/xeq.c     **** 	op |= buf[0] & 0xff;
 25668              		.loc 1 2184 2 view .LVU6728
2185:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 25669              		.loc 1 2185 2 view .LVU6729
2186:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 25670              		.loc 1 2186 2 view .LVU6730
2187:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25671              		.loc 1 2187 2 view .LVU6731
2188:src/xeq.c     **** }
 25672              		.loc 1 2188 2 view .LVU6732
2181:src/xeq.c     **** 	unsigned int op;
 25673              		.loc 1 2181 51 is_stmt 0 view .LVU6733
 25674 0000 10B5     		push	{r4, lr}
 25675              		.cfi_def_cfa_offset 8
 25676              		.cfi_offset 4, -8
 25677              		.cfi_offset 14, -4
2187:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25678              		.loc 1 2187 16 view .LVU6734
 25679 0002 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
2186:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 25680              		.loc 1 2186 16 view .LVU6735
 25681 0004 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
2185:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 25682              		.loc 1 2185 15 view .LVU6736
 25683 0006 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
2187:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25684              		.loc 1 2187 24 view .LVU6737
 25685 0008 1B06     		lsls	r3, r3, #24
2187:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 25686              		.loc 1 2187 5 view .LVU6738
 25687 000a 43EA0443 		orr	r3, r3, r4, lsl #16
 25688 000e 1343     		orrs	r3, r3, r2
2181:src/xeq.c     **** 	unsigned int op;
 25689              		.loc 1 2181 51 view .LVU6739
 25690 0010 0446     		mov	r4, r0
2188:src/xeq.c     **** }
 25691              		.loc 1 2188 2 view .LVU6740
ARM GAS  /tmp/cciWh9P3.s 			page 658


 25692 0012 0121     		movs	r1, #1
 25693              	.LVL1999:
2188:src/xeq.c     **** }
 25694              		.loc 1 2188 2 view .LVU6741
 25695 0014 43F47040 		orr	r0, r3, #61440
 25696              	.LVL2000:
2188:src/xeq.c     **** }
 25697              		.loc 1 2188 2 view .LVU6742
 25698 0018 FFF7FEFF 		bl	findmultilbl
 25699              	.LVL2001:
2188:src/xeq.c     **** }
 25700              		.loc 1 2188 2 view .LVU6743
 25701 001c 0146     		mov	r1, r0
 25702 001e 2046     		mov	r0, r4
2189:src/xeq.c     **** 
 25703              		.loc 1 2189 1 view .LVU6744
 25704 0020 BDE81040 		pop	{r4, lr}
 25705              		.cfi_restore 14
 25706              		.cfi_restore 4
 25707              		.cfi_def_cfa_offset 0
 25708              	.LVL2002:
2188:src/xeq.c     **** }
 25709              		.loc 1 2188 2 view .LVU6745
 25710 0024 FFF7FEBF 		b	cmdgtocommon
 25711              	.LVL2003:
2188:src/xeq.c     **** }
 25712              		.loc 1 2188 2 view .LVU6746
 25713              		.cfi_endproc
 25714              	.LFE162:
 25716              		.section	.text.cmdalphagto,"ax",%progbits
 25717              		.align	1
 25718              		.p2align 2,,3
 25719              		.global	cmdalphagto
 25720              		.syntax unified
 25721              		.thumb
 25722              		.thumb_func
 25723              		.fpu fpv4-sp-d16
 25725              	cmdalphagto:
 25726              	.LVL2004:
 25727              	.LFB163:
2191:src/xeq.c     **** 	char buf[14];
 25728              		.loc 1 2191 50 is_stmt 1 view -0
 25729              		.cfi_startproc
 25730              		@ args = 0, pretend = 0, frame = 16
 25731              		@ frame_needed = 0, uses_anonymous_args = 0
2192:src/xeq.c     **** 
 25732              		.loc 1 2192 2 view .LVU6748
2194:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25733              		.loc 1 2194 2 view .LVU6749
2191:src/xeq.c     **** 	char buf[14];
 25734              		.loc 1 2191 50 is_stmt 0 view .LVU6750
 25735 0000 30B5     		push	{r4, r5, lr}
 25736              		.cfi_def_cfa_offset 12
 25737              		.cfi_offset 4, -12
 25738              		.cfi_offset 5, -8
 25739              		.cfi_offset 14, -4
 25740 0002 85B0     		sub	sp, sp, #20
ARM GAS  /tmp/cciWh9P3.s 			page 659


 25741              		.cfi_def_cfa_offset 32
2194:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25742              		.loc 1 2194 2 view .LVU6751
 25743 0004 0E22     		movs	r2, #14
2191:src/xeq.c     **** 	char buf[14];
 25744              		.loc 1 2191 50 view .LVU6752
 25745 0006 0546     		mov	r5, r0
 25746 0008 0C46     		mov	r4, r1
2194:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25747              		.loc 1 2194 2 view .LVU6753
 25748 000a 6846     		mov	r0, sp
 25749              	.LVL2005:
2194:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25750              		.loc 1 2194 2 view .LVU6754
 25751 000c 0021     		movs	r1, #0
 25752              	.LVL2006:
2194:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 25753              		.loc 1 2194 2 view .LVU6755
 25754 000e FFF7FEFF 		bl	xset
 25755              	.LVL2007:
2195:src/xeq.c     **** }
 25756              		.loc 1 2195 2 is_stmt 1 view .LVU6756
 25757 0012 6946     		mov	r1, sp
 25758 0014 2846     		mov	r0, r5
 25759 0016 FFF7FEFF 		bl	alpha_rcl_s
 25760              	.LVL2008:
 25761 001a 0146     		mov	r1, r0
 25762 001c B4F17000 		subs	r0, r4, #112
 25763 0020 18BF     		it	ne
 25764 0022 0120     		movne	r0, #1
 25765 0024 FFF7FEFF 		bl	branchtoalpha
 25766              	.LVL2009:
2196:src/xeq.c     **** 
 25767              		.loc 1 2196 1 is_stmt 0 view .LVU6757
 25768 0028 05B0     		add	sp, sp, #20
 25769              		.cfi_def_cfa_offset 12
 25770              		@ sp needed
 25771 002a 30BD     		pop	{r4, r5, pc}
2196:src/xeq.c     **** 
 25772              		.loc 1 2196 1 view .LVU6758
 25773              		.cfi_endproc
 25774              	.LFE163:
 25776              		.section	.text.op_gtoalpha,"ax",%progbits
 25777              		.align	1
 25778              		.p2align 2,,3
 25779              		.global	op_gtoalpha
 25780              		.syntax unified
 25781              		.thumb
 25782              		.thumb_func
 25783              		.fpu fpv4-sp-d16
 25785              	op_gtoalpha:
 25786              	.LVL2010:
 25787              	.LFB165:
2206:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25788              		.loc 1 2206 33 is_stmt 1 view -0
 25789              		.cfi_startproc
 25790              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cciWh9P3.s 			page 660


 25791              		@ frame_needed = 0, uses_anonymous_args = 0
2207:src/xeq.c     **** }
 25792              		.loc 1 2207 2 view .LVU6760
2206:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25793              		.loc 1 2206 33 is_stmt 0 view .LVU6761
 25794 0000 10B5     		push	{r4, lr}
 25795              		.cfi_def_cfa_offset 8
 25796              		.cfi_offset 4, -8
 25797              		.cfi_offset 14, -4
 25798              	.LBB3480:
 25799              	.LBB3481:
2201:src/xeq.c     **** 	buf[3] = '\0';
 25800              		.loc 1 2201 13 view .LVU6762
 25801 0002 0B4B     		ldr	r3, .L1835
 25802 0004 1968     		ldr	r1, [r3]
 25803              	.LBE3481:
 25804              	.LBE3480:
2206:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25805              		.loc 1 2206 33 view .LVU6763
 25806 0006 82B0     		sub	sp, sp, #8
 25807              		.cfi_def_cfa_offset 16
2206:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 25808              		.loc 1 2206 33 view .LVU6764
 25809 0008 0446     		mov	r4, r0
 25810              	.LVL2011:
 25811              	.LBB3483:
 25812              	.LBI3480:
2198:src/xeq.c     **** 	char buf[4];
 25813              		.loc 1 2198 13 is_stmt 1 view .LVU6765
 25814              	.LBB3482:
2199:src/xeq.c     **** 
 25815              		.loc 1 2199 2 view .LVU6766
2201:src/xeq.c     **** 	buf[3] = '\0';
 25816              		.loc 1 2201 2 view .LVU6767
 25817 000a 0322     		movs	r2, #3
 25818 000c 01F5F661 		add	r1, r1, #1968
 25819 0010 01A8     		add	r0, sp, #4
 25820              	.LVL2012:
2201:src/xeq.c     **** 	buf[3] = '\0';
 25821              		.loc 1 2201 2 is_stmt 0 view .LVU6768
 25822 0012 FFF7FEFF 		bl	xcopy
 25823              	.LVL2013:
2202:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 25824              		.loc 1 2202 2 is_stmt 1 view .LVU6769
2203:src/xeq.c     **** }
 25825              		.loc 1 2203 2 is_stmt 0 view .LVU6770
 25826 0016 B4F19800 		subs	r0, r4, #152
2202:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 25827              		.loc 1 2202 9 view .LVU6771
 25828 001a 4FF00003 		mov	r3, #0
2203:src/xeq.c     **** }
 25829              		.loc 1 2203 2 view .LVU6772
 25830 001e 18BF     		it	ne
 25831 0020 0120     		movne	r0, #1
 25832 0022 01A9     		add	r1, sp, #4
2202:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 25833              		.loc 1 2202 9 view .LVU6773
ARM GAS  /tmp/cciWh9P3.s 			page 661


 25834 0024 8DF80730 		strb	r3, [sp, #7]
2203:src/xeq.c     **** }
 25835              		.loc 1 2203 2 is_stmt 1 view .LVU6774
 25836 0028 FFF7FEFF 		bl	branchtoalpha
 25837              	.LVL2014:
2203:src/xeq.c     **** }
 25838              		.loc 1 2203 2 is_stmt 0 view .LVU6775
 25839              	.LBE3482:
 25840              	.LBE3483:
2208:src/xeq.c     **** 
 25841              		.loc 1 2208 1 view .LVU6776
 25842 002c 02B0     		add	sp, sp, #8
 25843              		.cfi_def_cfa_offset 8
 25844              		@ sp needed
 25845 002e 10BD     		pop	{r4, pc}
 25846              	.L1836:
 25847              		.align	2
 25848              	.L1835:
 25849 0030 00000000 		.word	main_ram
 25850              		.cfi_endproc
 25851              	.LFE165:
 25853              		.section	.text.cmdskip,"ax",%progbits
 25854              		.align	1
 25855              		.p2align 2,,3
 25856              		.global	cmdskip
 25857              		.syntax unified
 25858              		.thumb
 25859              		.thumb_func
 25860              		.fpu fpv4-sp-d16
 25862              	cmdskip:
 25863              	.LVL2015:
 25864              	.LFB176:
2355:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25865              		.loc 1 2355 46 is_stmt 1 view -0
 25866              		.cfi_startproc
 25867              		@ args = 0, pretend = 0, frame = 8
 25868              		@ frame_needed = 0, uses_anonymous_args = 0
2356:src/xeq.c     **** 	unsigned int pc;
 25869              		.loc 1 2356 2 view .LVU6778
2355:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25870              		.loc 1 2355 46 is_stmt 0 view .LVU6779
 25871 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 25872              		.cfi_def_cfa_offset 20
 25873              		.cfi_offset 4, -20
 25874              		.cfi_offset 5, -16
 25875              		.cfi_offset 6, -12
 25876              		.cfi_offset 7, -8
 25877              		.cfi_offset 14, -4
2356:src/xeq.c     **** 	unsigned int pc;
 25878              		.loc 1 2356 30 view .LVU6780
 25879 0002 1D4F     		ldr	r7, .L1861
 25880 0004 3B68     		ldr	r3, [r7]
2359:src/xeq.c     **** 		int sgn;
 25881              		.loc 1 2359 5 view .LVU6781
 25882 0006 9A29     		cmp	r1, #154
2356:src/xeq.c     **** 	unsigned int pc;
 25883              		.loc 1 2356 21 view .LVU6782
ARM GAS  /tmp/cciWh9P3.s 			page 662


 25884 0008 B3F8E067 		ldrh	r6, [r3, #2016]
 25885              	.LVL2016:
2357:src/xeq.c     **** 
 25886              		.loc 1 2357 2 is_stmt 1 view .LVU6783
2359:src/xeq.c     **** 		int sgn;
 25887              		.loc 1 2359 2 view .LVU6784
2355:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25888              		.loc 1 2355 46 is_stmt 0 view .LVU6785
 25889 000c 83B0     		sub	sp, sp, #12
 25890              		.cfi_def_cfa_offset 32
2355:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 25891              		.loc 1 2355 46 view .LVU6786
 25892 000e 0D46     		mov	r5, r1
2359:src/xeq.c     **** 		int sgn;
 25893              		.loc 1 2359 5 view .LVU6787
 25894 0010 22D0     		beq	.L1858
 25895 0012 0446     		mov	r4, r0
 25896              	.LVL2017:
 25897              	.L1838:
2368:src/xeq.c     **** 		pc = origpc + arg;
 25898              		.loc 1 2368 2 is_stmt 1 view .LVU6788
2368:src/xeq.c     **** 		pc = origpc + arg;
 25899              		.loc 1 2368 6 is_stmt 0 view .LVU6789
 25900 0014 B30B     		lsrs	r3, r6, #14
2368:src/xeq.c     **** 		pc = origpc + arg;
 25901              		.loc 1 2368 5 view .LVU6790
 25902 0016 032B     		cmp	r3, #3
 25903 0018 15D0     		beq	.L1859
 25904              	.LVL2018:
 25905              	.L1843:
2371:src/xeq.c     **** 		if (PcWrapped) {
 25906              		.loc 1 2371 28 is_stmt 1 discriminator 2 view .LVU6791
2371:src/xeq.c     **** 		if (PcWrapped) {
 25907              		.loc 1 2371 9 discriminator 2 view .LVU6792
2371:src/xeq.c     **** 		if (PcWrapped) {
 25908              		.loc 1 2371 9 is_stmt 0 discriminator 2 view .LVU6793
 25909 001a 24B1     		cbz	r4, .L1845
2371:src/xeq.c     **** 		if (PcWrapped) {
 25910              		.loc 1 2371 20 discriminator 1 view .LVU6794
 25911 001c FFF7FEFF 		bl	incpc
 25912              	.LVL2019:
 25913 0020 013C     		subs	r4, r4, #1
 25914              	.LVL2020:
2371:src/xeq.c     **** 		if (PcWrapped) {
 25915              		.loc 1 2371 16 discriminator 1 view .LVU6795
 25916 0022 0028     		cmp	r0, #0
 25917 0024 F9D0     		beq	.L1843
 25918              	.LVL2021:
 25919              	.L1845:
2372:src/xeq.c     **** 			report_err(ERR_RANGE);
 25920              		.loc 1 2372 3 is_stmt 1 view .LVU6796
2372:src/xeq.c     **** 			report_err(ERR_RANGE);
 25921              		.loc 1 2372 7 is_stmt 0 view .LVU6797
 25922 0026 154B     		ldr	r3, .L1861+4
2372:src/xeq.c     **** 			report_err(ERR_RANGE);
 25923              		.loc 1 2372 6 view .LVU6798
 25924 0028 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 663


 25925 002a 73B9     		cbnz	r3, .L1860
 25926              	.L1846:
2375:src/xeq.c     **** 	}
 25927              		.loc 1 2375 3 is_stmt 1 view .LVU6799
2375:src/xeq.c     **** 	}
 25928              		.loc 1 2375 8 is_stmt 0 view .LVU6800
 25929 002c 3B68     		ldr	r3, [r7]
2375:src/xeq.c     **** 	}
 25930              		.loc 1 2375 6 view .LVU6801
 25931 002e B3F8E007 		ldrh	r0, [r3, #2016]
 25932              	.LVL2022:
 25933              	.L1844:
2377:src/xeq.c     **** }
 25934              		.loc 1 2377 2 is_stmt 1 view .LVU6802
 25935 0032 A5F13801 		sub	r1, r5, #56
 25936 0036 B1FA81F1 		clz	r1, r1
 25937 003a 3246     		mov	r2, r6
 25938 003c 4909     		lsrs	r1, r1, #5
 25939 003e FFF7FEFF 		bl	gsbgto
 25940              	.LVL2023:
 25941              	.L1837:
2378:src/xeq.c     **** 
 25942              		.loc 1 2378 1 is_stmt 0 view .LVU6803
 25943 0042 03B0     		add	sp, sp, #12
 25944              		.cfi_remember_state
 25945              		.cfi_def_cfa_offset 20
 25946              		@ sp needed
 25947 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 25948              	.LVL2024:
 25949              	.L1859:
 25950              		.cfi_restore_state
2369:src/xeq.c     **** 	else {
 25951              		.loc 1 2369 3 is_stmt 1 view .LVU6804
2369:src/xeq.c     **** 	else {
 25952              		.loc 1 2369 6 is_stmt 0 view .LVU6805
 25953 0046 A019     		adds	r0, r4, r6
 25954              	.LVL2025:
2369:src/xeq.c     **** 	else {
 25955              		.loc 1 2369 6 view .LVU6806
 25956 0048 F3E7     		b	.L1844
 25957              	.LVL2026:
 25958              	.L1860:
2373:src/xeq.c     **** 		}
 25959              		.loc 1 2373 4 is_stmt 1 view .LVU6807
 25960              	.LBB3493:
 25961              	.LBI3493:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25962              		.loc 1 536 5 view .LVU6808
 25963              	.LBB3494:
 537:src/xeq.c     **** 		Error = e;
 25964              		.loc 1 537 2 view .LVU6809
 537:src/xeq.c     **** 		Error = e;
 25965              		.loc 1 537 12 is_stmt 0 view .LVU6810
 25966 004a 0D4B     		ldr	r3, .L1861+8
 537:src/xeq.c     **** 		Error = e;
 25967              		.loc 1 537 5 view .LVU6811
 25968 004c 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 664


 25969 004e 002A     		cmp	r2, #0
 25970 0050 ECD1     		bne	.L1846
 25971              	.LVL2027:
 25972              	.LBB3495:
 25973              	.LBI3495:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25974              		.loc 1 536 5 is_stmt 1 view .LVU6812
 25975              	.LBB3496:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 25976              		.loc 1 538 3 view .LVU6813
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 25977              		.loc 1 538 9 is_stmt 0 view .LVU6814
 25978 0052 0822     		movs	r2, #8
 25979 0054 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 25980              		.loc 1 539 3 is_stmt 1 view .LVU6815
 25981 0056 E9E7     		b	.L1846
 25982              	.LVL2028:
 25983              	.L1858:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 25984              		.loc 1 539 3 is_stmt 0 view .LVU6816
 25985              	.LBE3496:
 25986              	.LBE3495:
 25987              	.LBE3494:
 25988              	.LBE3493:
 25989              	.LBB3497:
2360:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
 25990              		.loc 1 2360 3 is_stmt 1 view .LVU6817
2361:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25991              		.loc 1 2361 3 view .LVU6818
2361:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25992              		.loc 1 2361 15 is_stmt 0 view .LVU6819
 25993 0058 01A9     		add	r1, sp, #4
 25994              	.LVL2029:
2361:src/xeq.c     **** 		if (sgn || arg >= 100) {
 25995              		.loc 1 2361 15 view .LVU6820
 25996 005a FFF7FEFF 		bl	get_reg_n_int_sgn
 25997              	.LVL2030:
2362:src/xeq.c     **** 			report_err(ERR_RANGE);
 25998              		.loc 1 2362 6 view .LVU6821
 25999 005e 019B     		ldr	r3, [sp, #4]
 26000              	.LVL2031:
2362:src/xeq.c     **** 			report_err(ERR_RANGE);
 26001              		.loc 1 2362 3 is_stmt 1 view .LVU6822
2362:src/xeq.c     **** 			report_err(ERR_RANGE);
 26002              		.loc 1 2362 6 is_stmt 0 view .LVU6823
 26003 0060 13B9     		cbnz	r3, .L1839
2362:src/xeq.c     **** 			report_err(ERR_RANGE);
 26004              		.loc 1 2362 11 discriminator 1 view .LVU6824
 26005 0062 6328     		cmp	r0, #99
2361:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26006              		.loc 1 2361 7 discriminator 1 view .LVU6825
 26007 0064 0446     		mov	r4, r0
2362:src/xeq.c     **** 			report_err(ERR_RANGE);
 26008              		.loc 1 2362 11 discriminator 1 view .LVU6826
 26009 0066 D5D9     		bls	.L1838
 26010              	.L1839:
ARM GAS  /tmp/cciWh9P3.s 			page 665


2363:src/xeq.c     **** 			return;
 26011              		.loc 1 2363 4 is_stmt 1 view .LVU6827
 26012              	.LVL2032:
 26013              	.LBB3498:
 26014              	.LBI3498:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26015              		.loc 1 536 5 view .LVU6828
 26016              	.LBB3499:
 537:src/xeq.c     **** 		Error = e;
 26017              		.loc 1 537 2 view .LVU6829
 537:src/xeq.c     **** 		Error = e;
 26018              		.loc 1 537 12 is_stmt 0 view .LVU6830
 26019 0068 054B     		ldr	r3, .L1861+8
 537:src/xeq.c     **** 		Error = e;
 26020              		.loc 1 537 5 view .LVU6831
 26021 006a 1A68     		ldr	r2, [r3]
 26022 006c 002A     		cmp	r2, #0
 26023 006e E8D1     		bne	.L1837
 26024              	.LVL2033:
 26025              	.LBB3500:
 26026              	.LBI3500:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26027              		.loc 1 536 5 is_stmt 1 view .LVU6832
 26028              	.LBB3501:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 26029              		.loc 1 538 3 view .LVU6833
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 26030              		.loc 1 538 9 is_stmt 0 view .LVU6834
 26031 0070 0822     		movs	r2, #8
 26032 0072 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 26033              		.loc 1 539 3 is_stmt 1 view .LVU6835
 26034              	.LVL2034:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 26035              		.loc 1 539 3 is_stmt 0 view .LVU6836
 26036              	.LBE3501:
 26037              	.LBE3500:
 26038              	.LBE3499:
 26039              	.LBE3498:
2364:src/xeq.c     **** 		}
 26040              		.loc 1 2364 4 is_stmt 1 view .LVU6837
 26041 0074 E5E7     		b	.L1837
 26042              	.L1862:
 26043 0076 00BF     		.align	2
 26044              	.L1861:
 26045 0078 00000000 		.word	main_ram
 26046 007c 00000000 		.word	PcWrapped
 26047 0080 00000000 		.word	Error
 26048              	.LBE3497:
 26049              		.cfi_endproc
 26050              	.LFE176:
 26052              		.section	.text.cmdback,"ax",%progbits
 26053              		.align	1
 26054              		.p2align 2,,3
 26055              		.global	cmdback
 26056              		.syntax unified
 26057              		.thumb
ARM GAS  /tmp/cciWh9P3.s 			page 666


 26058              		.thumb_func
 26059              		.fpu fpv4-sp-d16
 26061              	cmdback:
 26062              	.LVL2035:
 26063              	.LFB177:
2381:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26064              		.loc 1 2381 46 view -0
 26065              		.cfi_startproc
 26066              		@ args = 0, pretend = 0, frame = 0
 26067              		@ frame_needed = 0, uses_anonymous_args = 0
2382:src/xeq.c     **** 	unsigned int pc = origpc;
 26068              		.loc 1 2382 2 view .LVU6839
2381:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26069              		.loc 1 2381 46 is_stmt 0 view .LVU6840
 26070 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 26071              		.cfi_def_cfa_offset 24
 26072              		.cfi_offset 3, -24
 26073              		.cfi_offset 4, -20
 26074              		.cfi_offset 5, -16
 26075              		.cfi_offset 6, -12
 26076              		.cfi_offset 7, -8
 26077              		.cfi_offset 14, -4
2382:src/xeq.c     **** 	unsigned int pc = origpc;
 26078              		.loc 1 2382 30 view .LVU6841
 26079 0002 184B     		ldr	r3, .L1882
 26080 0004 1B68     		ldr	r3, [r3]
2382:src/xeq.c     **** 	unsigned int pc = origpc;
 26081              		.loc 1 2382 21 view .LVU6842
 26082 0006 B3F8E067 		ldrh	r6, [r3, #2016]
 26083              	.LVL2036:
2383:src/xeq.c     **** 
 26084              		.loc 1 2383 2 is_stmt 1 view .LVU6843
2385:src/xeq.c     **** 		pc -= arg + 1;
 26085              		.loc 1 2385 2 view .LVU6844
2385:src/xeq.c     **** 		pc -= arg + 1;
 26086              		.loc 1 2385 6 is_stmt 0 view .LVU6845
 26087 000a B30B     		lsrs	r3, r6, #14
2385:src/xeq.c     **** 		pc -= arg + 1;
 26088              		.loc 1 2385 5 view .LVU6846
 26089 000c 032B     		cmp	r3, #3
2381:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26090              		.loc 1 2381 46 view .LVU6847
 26091 000e 0446     		mov	r4, r0
 26092 0010 0D46     		mov	r5, r1
2385:src/xeq.c     **** 		pc -= arg + 1;
 26093              		.loc 1 2385 5 view .LVU6848
 26094 0012 1FD0     		beq	.L1879
2387:src/xeq.c     **** 		if ( Running ) {
 26095              		.loc 1 2387 14 is_stmt 1 view .LVU6849
2387:src/xeq.c     **** 		if ( Running ) {
 26096              		.loc 1 2387 17 is_stmt 0 view .LVU6850
 26097 0014 98B1     		cbz	r0, .L1871
2388:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26098              		.loc 1 2388 3 is_stmt 1 view .LVU6851
2388:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26099              		.loc 1 2388 8 is_stmt 0 view .LVU6852
 26100 0016 144B     		ldr	r3, .L1882+4
ARM GAS  /tmp/cciWh9P3.s 			page 667


2388:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26101              		.loc 1 2388 6 view .LVU6853
 26102 0018 1B68     		ldr	r3, [r3]
 26103 001a F3B9     		cbnz	r3, .L1880
 26104 001c 3046     		mov	r0, r6
 26105              	.LVL2037:
 26106              	.L1866:
2388:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26107              		.loc 1 2388 6 view .LVU6854
 26108 001e 134F     		ldr	r7, .L1882+8
 26109 0020 00E0     		b	.L1868
 26110              	.L1881:
2394:src/xeq.c     **** 		if (PcWrapped) {
 26111              		.loc 1 2394 18 discriminator 1 view .LVU6855
 26112 0022 33B9     		cbnz	r3, .L1869
 26113              	.L1868:
2392:src/xeq.c     **** 			pc = do_dec(pc, 1);
 26114              		.loc 1 2392 3 is_stmt 1 discriminator 2 view .LVU6856
2393:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26115              		.loc 1 2393 4 discriminator 2 view .LVU6857
2393:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26116              		.loc 1 2393 9 is_stmt 0 discriminator 2 view .LVU6858
 26117 0024 0121     		movs	r1, #1
 26118 0026 FFF7FEFF 		bl	do_dec
 26119              	.LVL2038:
2394:src/xeq.c     **** 		if (PcWrapped) {
 26120              		.loc 1 2394 11 is_stmt 1 discriminator 2 view .LVU6859
2394:src/xeq.c     **** 		if (PcWrapped) {
 26121              		.loc 1 2394 3 is_stmt 0 discriminator 2 view .LVU6860
 26122 002a 013C     		subs	r4, r4, #1
 26123              	.LVL2039:
2394:src/xeq.c     **** 		if (PcWrapped) {
 26124              		.loc 1 2394 18 discriminator 2 view .LVU6861
 26125 002c 3B68     		ldr	r3, [r7]
2394:src/xeq.c     **** 		if (PcWrapped) {
 26126              		.loc 1 2394 3 discriminator 2 view .LVU6862
 26127 002e F8D1     		bne	.L1881
2395:src/xeq.c     **** 			report_err(ERR_RANGE);
 26128              		.loc 1 2395 3 is_stmt 1 view .LVU6863
2395:src/xeq.c     **** 			report_err(ERR_RANGE);
 26129              		.loc 1 2395 6 is_stmt 0 view .LVU6864
 26130 0030 33B1     		cbz	r3, .L1865
 26131              	.L1869:
2396:src/xeq.c     **** 			return;
 26132              		.loc 1 2396 4 is_stmt 1 view .LVU6865
 26133              	.LVL2040:
 26134              	.LBB3506:
 26135              	.LBI3506:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26136              		.loc 1 536 5 view .LVU6866
 26137              	.LBB3507:
 537:src/xeq.c     **** 		Error = e;
 26138              		.loc 1 537 2 view .LVU6867
 537:src/xeq.c     **** 		Error = e;
 26139              		.loc 1 537 12 is_stmt 0 view .LVU6868
 26140 0032 0F4B     		ldr	r3, .L1882+12
 537:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/cciWh9P3.s 			page 668


 26141              		.loc 1 537 5 view .LVU6869
 26142 0034 1A68     		ldr	r2, [r3]
 26143 0036 0AB9     		cbnz	r2, .L1863
 26144              	.LVL2041:
 26145              	.LBB3508:
 26146              	.LBI3508:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26147              		.loc 1 536 5 is_stmt 1 view .LVU6870
 26148              	.LBB3509:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 26149              		.loc 1 538 3 view .LVU6871
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 26150              		.loc 1 538 9 is_stmt 0 view .LVU6872
 26151 0038 0822     		movs	r2, #8
 26152 003a 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 26153              		.loc 1 539 3 is_stmt 1 view .LVU6873
 26154              	.LVL2042:
 26155              	.L1863:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 26156              		.loc 1 539 3 is_stmt 0 view .LVU6874
 26157              	.LBE3509:
 26158              	.LBE3508:
 26159              	.LBE3507:
 26160              	.LBE3506:
2401:src/xeq.c     **** 
 26161              		.loc 1 2401 1 view .LVU6875
 26162 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 26163              	.LVL2043:
 26164              	.L1871:
2401:src/xeq.c     **** 
 26165              		.loc 1 2401 1 view .LVU6876
 26166 003e 3046     		mov	r0, r6
 26167              	.LVL2044:
 26168              	.L1865:
2400:src/xeq.c     **** }
 26169              		.loc 1 2400 2 is_stmt 1 view .LVU6877
 26170 0040 A5F13901 		sub	r1, r5, #57
 26171 0044 B1FA81F1 		clz	r1, r1
 26172 0048 3246     		mov	r2, r6
 26173 004a 4909     		lsrs	r1, r1, #5
2401:src/xeq.c     **** 
 26174              		.loc 1 2401 1 is_stmt 0 view .LVU6878
 26175 004c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 26176              		.cfi_remember_state
 26177              		.cfi_restore 14
 26178              		.cfi_restore 7
 26179              		.cfi_restore 6
 26180              		.cfi_restore 5
 26181              		.cfi_restore 4
 26182              		.cfi_restore 3
 26183              		.cfi_def_cfa_offset 0
 26184              	.LVL2045:
2400:src/xeq.c     **** }
 26185              		.loc 1 2400 2 view .LVU6879
 26186 0050 FFF7FEBF 		b	gsbgto
 26187              	.LVL2046:
ARM GAS  /tmp/cciWh9P3.s 			page 669


 26188              	.L1879:
 26189              		.cfi_restore_state
2386:src/xeq.c     ****         else if (arg) {
 26190              		.loc 1 2386 3 is_stmt 1 view .LVU6880
2386:src/xeq.c     ****         else if (arg) {
 26191              		.loc 1 2386 6 is_stmt 0 view .LVU6881
 26192 0054 731E     		subs	r3, r6, #1
 26193 0056 181A     		subs	r0, r3, r0
 26194              	.LVL2047:
2386:src/xeq.c     ****         else if (arg) {
 26195              		.loc 1 2386 6 view .LVU6882
 26196 0058 F2E7     		b	.L1865
 26197              	.LVL2048:
 26198              	.L1880:
2390:src/xeq.c     **** 		}
 26199              		.loc 1 2390 4 is_stmt 1 view .LVU6883
2390:src/xeq.c     **** 		}
 26200              		.loc 1 2390 9 is_stmt 0 view .LVU6884
 26201 005a 0121     		movs	r1, #1
 26202              	.LVL2049:
2390:src/xeq.c     **** 		}
 26203              		.loc 1 2390 9 view .LVU6885
 26204 005c 3046     		mov	r0, r6
 26205              	.LVL2050:
2390:src/xeq.c     **** 		}
 26206              		.loc 1 2390 9 view .LVU6886
 26207 005e FFF7FEFF 		bl	do_dec
 26208              	.LVL2051:
2390:src/xeq.c     **** 		}
 26209              		.loc 1 2390 9 view .LVU6887
 26210 0062 DCE7     		b	.L1866
 26211              	.L1883:
 26212              		.align	2
 26213              	.L1882:
 26214 0064 00000000 		.word	main_ram
 26215 0068 00000000 		.word	Running
 26216 006c 00000000 		.word	PcWrapped
 26217 0070 00000000 		.word	Error
 26218              		.cfi_endproc
 26219              	.LFE177:
 26221              		.section	.text.usergsb_common,"ax",%progbits
 26222              		.align	1
 26223              		.p2align 2,,3
 26224              		.syntax unified
 26225              		.thumb
 26226              		.thumb_func
 26227              		.fpu fpv4-sp-d16
 26229              	usergsb_common:
 26230              	.LVL2052:
 26231              	.LFB153:
2089:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26232              		.loc 1 2089 55 is_stmt 1 view -0
 26233              		.cfi_startproc
 26234              		@ args = 0, pretend = 0, frame = 0
 26235              		@ frame_needed = 0, uses_anonymous_args = 0
2090:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26236              		.loc 1 2090 2 view .LVU6889
ARM GAS  /tmp/cciWh9P3.s 			page 670


2089:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26237              		.loc 1 2089 55 is_stmt 0 view .LVU6890
 26238 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 26239              		.cfi_def_cfa_offset 24
 26240              		.cfi_offset 4, -24
 26241              		.cfi_offset 5, -20
 26242              		.cfi_offset 6, -16
 26243              		.cfi_offset 7, -12
 26244              		.cfi_offset 8, -8
 26245              		.cfi_offset 14, -4
2090:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26246              		.loc 1 2090 26 view .LVU6891
 26247 0004 1C4D     		ldr	r5, .L1888
2091:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26248              		.loc 1 2091 2 view .LVU6892
 26249 0006 1D4F     		ldr	r7, .L1888+4
2090:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26250              		.loc 1 2090 26 view .LVU6893
 26251 0008 2B68     		ldr	r3, [r5]
2091:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26252              		.loc 1 2091 2 view .LVU6894
 26253 000a 3A68     		ldr	r2, [r7]
2090:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26254              		.loc 1 2090 21 view .LVU6895
 26255 000c B3F8E047 		ldrh	r4, [r3, #2016]
 26256              	.LVL2053:
2091:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26257              		.loc 1 2091 2 is_stmt 1 view .LVU6896
2093:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26258              		.loc 1 2093 2 is_stmt 0 view .LVU6897
 26259 0010 DFF87480 		ldr	r8, .L1888+16
2089:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26260              		.loc 1 2089 55 view .LVU6898
 26261 0014 0646     		mov	r6, r0
2091:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26262              		.loc 1 2091 2 view .LVU6899
 26263 0016 0121     		movs	r1, #1
 26264 0018 2046     		mov	r0, r4
 26265              	.LVL2054:
2091:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26266              		.loc 1 2091 2 view .LVU6900
 26267 001a FFF7FEFF 		bl	gsbgto
 26268              	.LVL2055:
2092:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26269              		.loc 1 2092 2 is_stmt 1 view .LVU6901
2092:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26270              		.loc 1 2092 16 is_stmt 0 view .LVU6902
 26271 001e 2B68     		ldr	r3, [r5]
2092:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26272              		.loc 1 2092 2 view .LVU6903
 26273 0020 2046     		mov	r0, r4
 26274 0022 B3F9DE27 		ldrsh	r2, [r3, #2014]
 26275 0026 0121     		movs	r1, #1
 26276 0028 FFF7FEFF 		bl	gsbgto
 26277              	.LVL2056:
2093:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26278              		.loc 1 2093 2 is_stmt 1 view .LVU6904
ARM GAS  /tmp/cciWh9P3.s 			page 671


 26279 002c 2046     		mov	r0, r4
 26280 002e D8F80020 		ldr	r2, [r8]
 26281 0032 0121     		movs	r1, #1
 26282 0034 FFF7FEFF 		bl	gsbgto
 26283              	.LVL2057:
2094:src/xeq.c     **** 
 26284              		.loc 1 2094 2 view .LVU6905
 26285 0038 2246     		mov	r2, r4
 26286 003a 3046     		mov	r0, r6
 26287 003c 0121     		movs	r1, #1
 26288 003e FFF7FEFF 		bl	gsbgto
 26289              	.LVL2058:
2096:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26290              		.loc 1 2096 2 view .LVU6906
2097:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26291              		.loc 1 2097 9 is_stmt 0 view .LVU6907
 26292 0042 2A68     		ldr	r2, [r5]
2097:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26293              		.loc 1 2097 20 view .LVU6908
 26294 0044 0E4B     		ldr	r3, .L1888+8
 26295 0046 B2F9DE07 		ldrsh	r0, [r2, #2014]
 26296 004a 1968     		ldr	r1, [r3]
2099:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26297              		.loc 1 2099 6 view .LVU6909
 26298 004c 0D4C     		ldr	r4, .L1888+12
 26299              	.LVL2059:
2097:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26300              		.loc 1 2097 20 view .LVU6910
 26301 004e 31F81030 		ldrh	r3, [r1, r0, lsl #1]
2099:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26302              		.loc 1 2099 5 view .LVU6911
 26303 0052 2468     		ldr	r4, [r4]
2098:src/xeq.c     **** 	if (! Running)
 26304              		.loc 1 2098 12 view .LVU6912
 26305 0054 D8F80050 		ldr	r5, [r8]
2096:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26306              		.loc 1 2096 13 view .LVU6913
 26307 0058 0026     		movs	r6, #0
2097:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26308              		.loc 1 2097 20 view .LVU6914
 26309 005a 43F40053 		orr	r3, r3, #8192
2096:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26310              		.loc 1 2096 13 view .LVU6915
 26311 005e 3E60     		str	r6, [r7]
2097:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26312              		.loc 1 2097 2 is_stmt 1 view .LVU6916
2097:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26313              		.loc 1 2097 20 is_stmt 0 view .LVU6917
 26314 0060 21F81030 		strh	r3, [r1, r0, lsl #1]	@ movhi
2098:src/xeq.c     **** 	if (! Running)
 26315              		.loc 1 2098 2 is_stmt 1 view .LVU6918
2098:src/xeq.c     **** 	if (! Running)
 26316              		.loc 1 2098 12 is_stmt 0 view .LVU6919
 26317 0064 A2F8DE57 		strh	r5, [r2, #2014]	@ movhi
2099:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26318              		.loc 1 2099 2 is_stmt 1 view .LVU6920
2099:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
ARM GAS  /tmp/cciWh9P3.s 			page 672


 26319              		.loc 1 2099 5 is_stmt 0 view .LVU6921
 26320 0068 0CB1     		cbz	r4, .L1887
2102:src/xeq.c     **** 
 26321              		.loc 1 2102 1 view .LVU6922
 26322 006a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 26323              	.L1887:
2100:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26324              		.loc 1 2100 3 is_stmt 1 view .LVU6923
2102:src/xeq.c     **** 
 26325              		.loc 1 2102 1 is_stmt 0 view .LVU6924
 26326 006e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 26327              		.cfi_restore 14
 26328              		.cfi_restore 8
 26329              		.cfi_restore 7
 26330              		.cfi_restore 6
 26331              		.cfi_restore 5
 26332              		.cfi_restore 4
 26333              		.cfi_def_cfa_offset 0
2100:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26334              		.loc 1 2100 3 view .LVU6925
 26335 0072 FFF7FEBF 		b	set_running_on
 26336              	.LVL2060:
 26337              	.L1889:
 26338 0076 00BF     		.align	2
 26339              	.L1888:
 26340 0078 00000000 		.word	main_ram
 26341 007c 00000000 		.word	XromUserPc
 26342 0080 00000000 		.word	RetStk
 26343 0084 00000000 		.word	Running
 26344 0088 00000000 		.word	UserLocalRegs
 26345              		.cfi_endproc
 26346              	.LFE153:
 26348              		.section	.text.do_usergsb,"ax",%progbits
 26349              		.align	1
 26350              		.p2align 2,,3
 26351              		.global	do_usergsb
 26352              		.syntax unified
 26353              		.thumb
 26354              		.thumb_func
 26355              		.fpu fpv4-sp-d16
 26357              	do_usergsb:
 26358              	.LVL2061:
 26359              	.LFB154:
2108:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26360              		.loc 1 2108 32 is_stmt 1 view -0
 26361              		.cfi_startproc
 26362              		@ args = 0, pretend = 0, frame = 0
 26363              		@ frame_needed = 0, uses_anonymous_args = 0
2109:src/xeq.c     ****         fill(OP_FILL);
 26364              		.loc 1 2109 2 view .LVU6927
2108:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26365              		.loc 1 2108 32 is_stmt 0 view .LVU6928
 26366 0000 08B5     		push	{r3, lr}
 26367              		.cfi_def_cfa_offset 8
 26368              		.cfi_offset 3, -8
 26369              		.cfi_offset 14, -4
2109:src/xeq.c     ****         fill(OP_FILL);
ARM GAS  /tmp/cciWh9P3.s 			page 673


 26370              		.loc 1 2109 2 view .LVU6929
 26371 0002 044B     		ldr	r3, .L1892
 26372 0004 1888     		ldrh	r0, [r3]
 26373              	.LVL2062:
2109:src/xeq.c     ****         fill(OP_FILL);
 26374              		.loc 1 2109 2 view .LVU6930
 26375 0006 FFF7FEFF 		bl	usergsb_common
 26376              	.LVL2063:
2110:src/xeq.c     **** }
 26377              		.loc 1 2110 9 is_stmt 1 view .LVU6931
2111:src/xeq.c     **** 
 26378              		.loc 1 2111 1 is_stmt 0 view .LVU6932
 26379 000a BDE80840 		pop	{r3, lr}
 26380              		.cfi_restore 14
 26381              		.cfi_restore 3
 26382              		.cfi_def_cfa_offset 0
2110:src/xeq.c     **** }
 26383              		.loc 1 2110 9 view .LVU6933
 26384 000e 0C20     		movs	r0, #12
 26385 0010 FFF7FEBF 		b	fill
 26386              	.LVL2064:
 26387              	.L1893:
 26388              		.align	2
 26389              	.L1892:
 26390 0014 00000000 		.word	XromUserPc
 26391              		.cfi_endproc
 26392              	.LFE154:
 26394              		.section	.text.cmdmultigto,"ax",%progbits
 26395              		.align	1
 26396              		.p2align 2,,3
 26397              		.global	cmdmultigto
 26398              		.syntax unified
 26399              		.thumb
 26400              		.thumb_func
 26401              		.fpu fpv4-sp-d16
 26403              	cmdmultigto:
 26404              	.LVL2065:
 26405              	.LFB161:
2167:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26406              		.loc 1 2167 54 is_stmt 1 view -0
 26407              		.cfi_startproc
 26408              		@ args = 0, pretend = 0, frame = 0
 26409              		@ frame_needed = 0, uses_anonymous_args = 0
2168:src/xeq.c     **** 		// In XROM the command behaves differently!
 26410              		.loc 1 2168 2 view .LVU6935
2168:src/xeq.c     **** 		// In XROM the command behaves differently!
 26411              		.loc 1 2168 5 is_stmt 0 view .LVU6936
 26412 0000 0229     		cmp	r1, #2
2167:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26413              		.loc 1 2167 54 view .LVU6937
 26414 0002 10B5     		push	{r4, lr}
 26415              		.cfi_def_cfa_offset 8
 26416              		.cfi_offset 4, -8
 26417              		.cfi_offset 14, -4
2167:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26418              		.loc 1 2167 54 view .LVU6938
 26419 0004 0346     		mov	r3, r0
ARM GAS  /tmp/cciWh9P3.s 			page 674


 26420 0006 0C46     		mov	r4, r1
2168:src/xeq.c     **** 		// In XROM the command behaves differently!
 26421              		.loc 1 2168 5 view .LVU6939
 26422 0008 06D1     		bne	.L1895
 26423              	.LBB3510:
 26424              	.LBI3510:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 26425              		.loc 1 181 5 is_stmt 1 view .LVU6940
 26426              	.LBB3511:
 182:src/xeq.c     **** }
 26427              		.loc 1 182 2 view .LVU6941
 182:src/xeq.c     **** }
 26428              		.loc 1 182 9 is_stmt 0 view .LVU6942
 26429 000a 104A     		ldr	r2, .L1899
 26430 000c 1268     		ldr	r2, [r2]
 26431 000e B2F8E027 		ldrh	r2, [r2, #2016]
 26432              	.LBE3511:
 26433              	.LBE3510:
2168:src/xeq.c     **** 		// In XROM the command behaves differently!
 26434              		.loc 1 2168 22 view .LVU6943
 26435 0012 920B     		lsrs	r2, r2, #14
 26436 0014 032A     		cmp	r2, #3
 26437 0016 0BD0     		beq	.L1898
 26438              	.L1895:
2177:src/xeq.c     **** 	}
 26439              		.loc 1 2177 3 is_stmt 1 view .LVU6944
 26440 0018 0121     		movs	r1, #1
 26441              	.LVL2066:
2177:src/xeq.c     **** 	}
 26442              		.loc 1 2177 3 is_stmt 0 view .LVU6945
 26443 001a 1846     		mov	r0, r3
 26444              	.LVL2067:
2177:src/xeq.c     **** 	}
 26445              		.loc 1 2177 3 view .LVU6946
 26446 001c FFF7FEFF 		bl	findmultilbl
 26447              	.LVL2068:
2177:src/xeq.c     **** 	}
 26448              		.loc 1 2177 3 view .LVU6947
 26449 0020 0146     		mov	r1, r0
 26450 0022 E01E     		subs	r0, r4, #3
 26451 0024 18BF     		it	ne
 26452 0026 0120     		movne	r0, #1
2179:src/xeq.c     **** 
 26453              		.loc 1 2179 1 view .LVU6948
 26454 0028 BDE81040 		pop	{r4, lr}
 26455              		.cfi_remember_state
 26456              		.cfi_restore 14
 26457              		.cfi_restore 4
 26458              		.cfi_def_cfa_offset 0
2177:src/xeq.c     **** 	}
 26459              		.loc 1 2177 3 view .LVU6949
 26460 002c FFF7FEBF 		b	cmdgtocommon
 26461              	.LVL2069:
 26462              	.L1898:
 26463              		.cfi_restore_state
 26464              	.LBB3512:
2170:src/xeq.c     **** 		if (target != 0)
ARM GAS  /tmp/cciWh9P3.s 			page 675


 26465              		.loc 1 2170 3 is_stmt 1 view .LVU6950
2170:src/xeq.c     **** 		if (target != 0)
 26466              		.loc 1 2170 31 is_stmt 0 view .LVU6951
 26467 0030 0021     		movs	r1, #0
 26468              	.LVL2070:
2170:src/xeq.c     **** 		if (target != 0)
 26469              		.loc 1 2170 31 view .LVU6952
 26470 0032 FFF7FEFF 		bl	findmultilbl
 26471              	.LVL2071:
2170:src/xeq.c     **** 		if (target != 0)
 26472              		.loc 1 2170 22 view .LVU6953
 26473 0036 80B2     		uxth	r0, r0
 26474              	.LVL2072:
2171:src/xeq.c     **** 			usergsb_common(target); 
 26475              		.loc 1 2171 3 is_stmt 1 view .LVU6954
2171:src/xeq.c     **** 			usergsb_common(target); 
 26476              		.loc 1 2171 6 is_stmt 0 view .LVU6955
 26477 0038 18B1     		cbz	r0, .L1896
2172:src/xeq.c     **** 		else
 26478              		.loc 1 2172 4 is_stmt 1 view .LVU6956
 26479              	.LBE3512:
2179:src/xeq.c     **** 
 26480              		.loc 1 2179 1 is_stmt 0 view .LVU6957
 26481 003a BDE81040 		pop	{r4, lr}
 26482              		.cfi_remember_state
 26483              		.cfi_restore 14
 26484              		.cfi_restore 4
 26485              		.cfi_def_cfa_offset 0
 26486              	.LBB3513:
2172:src/xeq.c     **** 		else
 26487              		.loc 1 2172 4 view .LVU6958
 26488 003e FFF7FEBF 		b	usergsb_common
 26489              	.LVL2073:
 26490              	.L1896:
 26491              		.cfi_restore_state
2174:src/xeq.c     **** 	}
 26492              		.loc 1 2174 4 is_stmt 1 view .LVU6959
 26493              	.LBE3513:
2179:src/xeq.c     **** 
 26494              		.loc 1 2179 1 is_stmt 0 view .LVU6960
 26495 0042 BDE81040 		pop	{r4, lr}
 26496              		.cfi_restore 14
 26497              		.cfi_restore 4
 26498              		.cfi_def_cfa_offset 0
 26499              	.LBB3514:
2174:src/xeq.c     **** 	}
 26500              		.loc 1 2174 4 view .LVU6961
 26501 0046 FFF7FEBF 		b	incpc
 26502              	.LVL2074:
 26503              	.L1900:
2174:src/xeq.c     **** 	}
 26504              		.loc 1 2174 4 view .LVU6962
 26505 004a 00BF     		.align	2
 26506              	.L1899:
 26507 004c 00000000 		.word	main_ram
 26508              	.LBE3514:
 26509              		.cfi_endproc
ARM GAS  /tmp/cciWh9P3.s 			page 676


 26510              	.LFE161:
 26512              		.section	.text.store_a_to_d,"ax",%progbits
 26513              		.align	1
 26514              		.p2align 2,,3
 26515              		.global	store_a_to_d
 26516              		.syntax unified
 26517              		.thumb
 26518              		.thumb_func
 26519              		.fpu fpv4-sp-d16
 26521              	store_a_to_d:
 26522              	.LVL2075:
 26523              	.LFB262:
5589:src/xeq.c     **** 
5590:src/xeq.c     **** /* Command to stash registers A through D into volatile RAM and to restore them
5591:src/xeq.c     ****  * again.
5592:src/xeq.c     ****  */
5593:src/xeq.c     **** void store_a_to_d(enum nilop op) {
 26524              		.loc 1 5593 34 is_stmt 1 view -0
 26525              		.cfi_startproc
 26526              		@ args = 0, pretend = 0, frame = 0
 26527              		@ frame_needed = 0, uses_anonymous_args = 0
5594:src/xeq.c     **** 	const void *src = XromA2D;
 26528              		.loc 1 5594 2 view .LVU6964
5595:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 26529              		.loc 1 5595 2 view .LVU6965
5593:src/xeq.c     **** 	const void *src = XromA2D;
 26530              		.loc 1 5593 34 is_stmt 0 view .LVU6966
 26531 0000 10B5     		push	{r4, lr}
 26532              		.cfi_def_cfa_offset 8
 26533              		.cfi_offset 4, -8
 26534              		.cfi_offset 14, -4
5593:src/xeq.c     **** 	const void *src = XromA2D;
 26535              		.loc 1 5593 34 view .LVU6967
 26536 0002 0446     		mov	r4, r0
 26537              		.loc 1 5595 15 view .LVU6968
 26538 0004 6820     		movs	r0, #104
 26539              	.LVL2076:
 26540              		.loc 1 5595 15 view .LVU6969
 26541 0006 FFF7FEFF 		bl	get_reg_n
 26542              	.LVL2077:
5596:src/xeq.c     **** 
5597:src/xeq.c     **** 	if (op == OP_SAVEA2D) {
 26543              		.loc 1 5597 2 is_stmt 1 view .LVU6970
 26544              		.loc 1 5597 5 is_stmt 0 view .LVU6971
 26545 000a 802C     		cmp	r4, #128
5598:src/xeq.c     **** 		src = dest;
 26546              		.loc 1 5598 7 view .LVU6972
 26547 000c 08BF     		it	eq
 26548 000e 0146     		moveq	r1, r0
5599:src/xeq.c     **** 		dest = XromA2D;
5600:src/xeq.c     **** 	}
5601:src/xeq.c     **** 	xcopy(dest, src, sizeof(REGISTER) * 4);
5602:src/xeq.c     **** }
 26549              		.loc 1 5602 1 view .LVU6973
 26550 0010 BDE81040 		pop	{r4, lr}
 26551              		.cfi_restore 14
 26552              		.cfi_restore 4
ARM GAS  /tmp/cciWh9P3.s 			page 677


 26553              		.cfi_def_cfa_offset 0
5599:src/xeq.c     **** 		dest = XromA2D;
 26554              		.loc 1 5599 8 view .LVU6974
 26555 0014 0CBF     		ite	eq
 26556 0016 0248     		ldreq	r0, .L1905
 26557              	.LVL2078:
5594:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 26558              		.loc 1 5594 14 view .LVU6975
 26559 0018 0149     		ldrne	r1, .L1905
 26560              	.LVL2079:
5601:src/xeq.c     **** }
 26561              		.loc 1 5601 2 is_stmt 1 view .LVU6976
 26562 001a 4022     		movs	r2, #64
 26563 001c FFF7FEBF 		b	xcopy
 26564              	.LVL2080:
 26565              	.L1906:
5601:src/xeq.c     **** }
 26566              		.loc 1 5601 2 is_stmt 0 view .LVU6977
 26567              		.align	2
 26568              	.L1905:
 26569 0020 00000000 		.word	XromA2D
 26570              		.cfi_endproc
 26571              	.LFE262:
 26573              		.section	.text.cmdlocr,"ax",%progbits
 26574              		.align	1
 26575              		.p2align 2,,3
 26576              		.global	cmdlocr
 26577              		.syntax unified
 26578              		.thumb
 26579              		.thumb_func
 26580              		.fpu fpv4-sp-d16
 26582              	cmdlocr:
 26583              	.LVL2081:
 26584              	.LFB263:
5603:src/xeq.c     **** 
5604:src/xeq.c     **** /*
5605:src/xeq.c     ****  *  Command to support local variables.
5606:src/xeq.c     ****  *  A stack frame is constructed:
5607:src/xeq.c     ****  *	marker including size of frame,
5608:src/xeq.c     ****  *	register + flag area.
5609:src/xeq.c     ****  *  Registers must reside on even stack positions
5610:src/xeq.c     ****  *  so the flag word is either at the top or at the bottom of the frame.
5611:src/xeq.c     ****  */
5612:src/xeq.c     **** void cmdlocr(unsigned int arg, enum rarg op) {
 26585              		.loc 1 5612 46 is_stmt 1 view -0
 26586              		.cfi_startproc
 26587              		@ args = 0, pretend = 0, frame = 0
 26588              		@ frame_needed = 0, uses_anonymous_args = 0
5613:src/xeq.c     **** 	short int sp = RetStkPtr;
 26589              		.loc 1 5613 2 view .LVU6979
5612:src/xeq.c     **** 	short int sp = RetStkPtr;
 26590              		.loc 1 5612 46 is_stmt 0 view .LVU6980
 26591 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 26592              		.cfi_def_cfa_offset 40
 26593              		.cfi_offset 3, -40
 26594              		.cfi_offset 4, -36
 26595              		.cfi_offset 5, -32
ARM GAS  /tmp/cciWh9P3.s 			page 678


 26596              		.cfi_offset 6, -28
 26597              		.cfi_offset 7, -24
 26598              		.cfi_offset 8, -20
 26599              		.cfi_offset 9, -16
 26600              		.cfi_offset 10, -12
 26601              		.cfi_offset 11, -8
 26602              		.cfi_offset 14, -4
 26603              		.loc 1 5613 17 view .LVU6981
 26604 0004 554F     		ldr	r7, .L1927
 26605 0006 3C68     		ldr	r4, [r7]
 26606              	.LBB3524:
 26607              	.LBB3525:
 932:src/xeq.c     **** }
 26608              		.loc 1 932 24 view .LVU6982
 26609 0008 B4F8E827 		ldrh	r2, [r4, #2024]
 26610              	.LBE3525:
 26611              	.LBE3524:
 26612              		.loc 1 5613 12 view .LVU6983
 26613 000c B4F9E267 		ldrsh	r6, [r4, #2018]
 26614              	.LVL2082:
5614:src/xeq.c     **** 	int size = (arg << (is_dblmode() ? 3 : 2)) + 2;
 26615              		.loc 1 5614 2 is_stmt 1 view .LVU6984
 26616              	.LBB3527:
 26617              	.LBI3524:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 26618              		.loc 1 931 5 view .LVU6985
 26619              	.LBB3526:
 932:src/xeq.c     **** }
 26620              		.loc 1 932 2 view .LVU6986
 932:src/xeq.c     **** }
 26621              		.loc 1 932 24 is_stmt 0 view .LVU6987
 26622 0010 44F20103 		movw	r3, #16385
 26623              	.LBE3526:
 26624              	.LBE3527:
 26625              		.loc 1 5614 39 view .LVU6988
 26626 0014 1340     		ands	r3, r3, r2
 26627 0016 B3F5804F 		cmp	r3, #16384
 26628 001a 0CBF     		ite	eq
 26629 001c 0325     		moveq	r5, #3
 26630 001e 0225     		movne	r5, #2
 26631              		.loc 1 5614 18 view .LVU6989
 26632 0020 A840     		lsls	r0, r0, r5
 26633              	.LVL2083:
 26634              		.loc 1 5614 45 view .LVU6990
 26635 0022 851C     		adds	r5, r0, #2
 26636              	.LVL2084:
5615:src/xeq.c     **** 	const unsigned short marker = LOCAL_MARKER | size;
 26637              		.loc 1 5615 2 is_stmt 1 view .LVU6991
 26638              		.loc 1 5615 45 is_stmt 0 view .LVU6992
 26639 0024 1FFA85F8 		uxth	r8, r5
 26640              	.LVL2085:
5616:src/xeq.c     **** 	int old_size = 0;
 26641              		.loc 1 5616 2 is_stmt 1 view .LVU6993
5617:src/xeq.c     **** 	short unsigned int old_flags = 0;
 26642              		.loc 1 5617 2 view .LVU6994
5618:src/xeq.c     **** 
5619:src/xeq.c     **** 	if (sp != 0 && sp == LocalRegs) {
ARM GAS  /tmp/cciWh9P3.s 			page 679


 26643              		.loc 1 5619 2 view .LVU6995
 26644              		.loc 1 5619 5 is_stmt 0 view .LVU6996
 26645 0028 7EB9     		cbnz	r6, .L1909
 26646              	.LVL2086:
5620:src/xeq.c     **** 		// resize required
5621:src/xeq.c     **** 		old_size = local_levels();
5622:src/xeq.c     **** 		sp += old_size;
5623:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5624:src/xeq.c     **** 	}
5625:src/xeq.c     **** 	// compute space needed
5626:src/xeq.c     **** 	sp -= size;
 26647              		.loc 1 5626 2 is_stmt 1 view .LVU6997
5627:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26648              		.loc 1 5627 10 is_stmt 0 view .LVU6998
 26649 002a 4D4B     		ldr	r3, .L1927+4
5626:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26650              		.loc 1 5626 5 view .LVU6999
 26651 002c C8F10004 		rsb	r4, r8, #0
 26652              		.loc 1 5627 5 view .LVU7000
 26653 0030 1B68     		ldr	r3, [r3]
5626:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26654              		.loc 1 5626 5 view .LVU7001
 26655 0032 24B2     		sxth	r4, r4
 26656              	.LVL2087:
 26657              		.loc 1 5627 2 is_stmt 1 view .LVU7002
 26658              		.loc 1 5627 6 is_stmt 0 view .LVU7003
 26659 0034 6242     		rsbs	r2, r4, #0
 26660              		.loc 1 5627 5 view .LVU7004
 26661 0036 9A42     		cmp	r2, r3
 26662 0038 42DC     		bgt	.L1915
 26663 003a 4FEA4409 		lsl	r9, r4, #1
 26664 003e DFF828B1 		ldr	fp, .L1927+12
 26665 0042 4FEA450A 		lsl	r10, r5, #1
 26666 0046 4B46     		mov	r3, r9
 26667 0048 13E0     		b	.L1913
 26668              	.LVL2088:
 26669              	.L1909:
5619:src/xeq.c     **** 		// resize required
 26670              		.loc 1 5619 23 discriminator 1 view .LVU7005
 26671 004a B4F9DE47 		ldrsh	r4, [r4, #2014]
5619:src/xeq.c     **** 		// resize required
 26672              		.loc 1 5619 14 discriminator 1 view .LVU7006
 26673 004e B442     		cmp	r4, r6
 26674 0050 28D0     		beq	.L1914
5626:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26675              		.loc 1 5626 2 is_stmt 1 view .LVU7007
 26676              		.loc 1 5627 10 is_stmt 0 view .LVU7008
 26677 0052 434B     		ldr	r3, .L1927+4
5626:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26678              		.loc 1 5626 5 view .LVU7009
 26679 0054 A6EB0804 		sub	r4, r6, r8
 26680              		.loc 1 5627 5 view .LVU7010
 26681 0058 1B68     		ldr	r3, [r3]
5626:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26682              		.loc 1 5626 5 view .LVU7011
 26683 005a 24B2     		sxth	r4, r4
 26684              	.LVL2089:
ARM GAS  /tmp/cciWh9P3.s 			page 680


 26685              		.loc 1 5627 2 is_stmt 1 view .LVU7012
 26686              		.loc 1 5627 6 is_stmt 0 view .LVU7013
 26687 005c 6242     		rsbs	r2, r4, #0
 26688              		.loc 1 5627 5 view .LVU7014
 26689 005e 9A42     		cmp	r2, r3
 26690 0060 2EDC     		bgt	.L1915
 26691 0062 4FEA4409 		lsl	r9, r4, #1
 26692 0066 DFF800B1 		ldr	fp, .L1927+12
 26693 006a 4FEA450A 		lsl	r10, r5, #1
 26694 006e 4B46     		mov	r3, r9
5617:src/xeq.c     **** 
 26695              		.loc 1 5617 21 view .LVU7015
 26696 0070 0026     		movs	r6, #0
 26697              	.LVL2090:
 26698              	.L1913:
5628:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
5629:src/xeq.c     **** 		return;
5630:src/xeq.c     **** 	}
5631:src/xeq.c     **** 	if ( old_size > 0 ) {
5632:src/xeq.c     **** 		// move previous contents to new destination
5633:src/xeq.c     **** 		int n;
5634:src/xeq.c     **** 		if (size > old_size) {
5635:src/xeq.c     **** 			n = old_size;
5636:src/xeq.c     **** 			size -= old_size;
5637:src/xeq.c     **** 		}
5638:src/xeq.c     **** 		else {
5639:src/xeq.c     **** 			n = size;
5640:src/xeq.c     **** 			size = 0;
5641:src/xeq.c     **** 		}
5642:src/xeq.c     **** 		xcopy(RetStk + sp, RetStk + LocalRegs, n + n);
5643:src/xeq.c     **** 	}
5644:src/xeq.c     **** 	// fill the rest with 0
5645:src/xeq.c     **** 	xset(RetStk + sp + old_size, 0, size + size);
 26699              		.loc 1 5645 2 is_stmt 1 view .LVU7016
 26700              		.loc 1 5645 19 is_stmt 0 view .LVU7017
 26701 0072 DBF80000 		ldr	r0, [fp]
 26702              		.loc 1 5645 2 view .LVU7018
 26703 0076 5246     		mov	r2, r10
 26704 0078 1844     		add	r0, r0, r3
 26705 007a 0021     		movs	r1, #0
 26706 007c FFF7FEFF 		bl	xset
 26707              	.LVL2091:
5646:src/xeq.c     **** 
5647:src/xeq.c     **** 	// set marker, pointers and flags
5648:src/xeq.c     **** 	RetStk[sp] = marker;
 26708              		.loc 1 5648 2 is_stmt 1 view .LVU7019
5649:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 26709              		.loc 1 5649 14 is_stmt 0 view .LVU7020
 26710 0080 3B68     		ldr	r3, [r7]
5648:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 26711              		.loc 1 5648 13 view .LVU7021
 26712 0082 DBF80020 		ldr	r2, [fp]
5615:src/xeq.c     **** 	int old_size = 0;
 26713              		.loc 1 5615 23 view .LVU7022
 26714 0086 48F48058 		orr	r8, r8, #4096
 26715              	.LVL2092:
5648:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
ARM GAS  /tmp/cciWh9P3.s 			page 681


 26716              		.loc 1 5648 13 view .LVU7023
 26717 008a 22F80980 		strh	r8, [r2, r9]	@ movhi
 26718              		.loc 1 5649 2 is_stmt 1 view .LVU7024
5650:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 26719              		.loc 1 5650 3 is_stmt 0 view .LVU7025
 26720 008e 0021     		movs	r1, #0
5649:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 26721              		.loc 1 5649 24 view .LVU7026
 26722 0090 A3F8DE47 		strh	r4, [r3, #2014]	@ movhi
5649:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 26723              		.loc 1 5649 12 view .LVU7027
 26724 0094 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
 26725              		.loc 1 5650 2 is_stmt 1 view .LVU7028
 26726              		.loc 1 5650 3 is_stmt 0 view .LVU7029
 26727 0098 7020     		movs	r0, #112
 26728 009a FFF7FEFF 		bl	flag_word
 26729              	.LVL2093:
 26730              		.loc 1 5650 36 view .LVU7030
 26731 009e 0680     		strh	r6, [r0]	@ movhi
 26732              	.L1907:
5651:src/xeq.c     **** }
 26733              		.loc 1 5651 1 view .LVU7031
 26734 00a0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 26735              	.LVL2094:
 26736              	.L1914:
5621:src/xeq.c     **** 		sp += old_size;
 26737              		.loc 1 5621 3 is_stmt 1 view .LVU7032
 26738              	.LBB3528:
 26739              	.LBI3528:
 213:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 26740              		.loc 1 213 5 view .LVU7033
 26741              	.LBB3529:
 214:src/xeq.c     **** }
 26742              		.loc 1 214 2 view .LVU7034
 214:src/xeq.c     **** }
 26743              		.loc 1 214 57 is_stmt 0 view .LVU7035
 26744 00a4 002C     		cmp	r4, #0
 26745 00a6 13DB     		blt	.L1924
 214:src/xeq.c     **** }
 26746              		.loc 1 214 57 view .LVU7036
 26747              	.LBE3529:
 26748              	.LBE3528:
5622:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26749              		.loc 1 5622 3 is_stmt 1 view .LVU7037
 26750              	.LVL2095:
5623:src/xeq.c     **** 	}
 26751              		.loc 1 5623 3 view .LVU7038
5623:src/xeq.c     **** 	}
 26752              		.loc 1 5623 16 is_stmt 0 view .LVU7039
 26753 00a8 0021     		movs	r1, #0
 26754              	.LVL2096:
5623:src/xeq.c     **** 	}
 26755              		.loc 1 5623 16 view .LVU7040
 26756 00aa 7020     		movs	r0, #112
 26757 00ac FFF7FEFF 		bl	flag_word
 26758              	.LVL2097:
5627:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
ARM GAS  /tmp/cciWh9P3.s 			page 682


 26759              		.loc 1 5627 10 view .LVU7041
 26760 00b0 2B4B     		ldr	r3, .L1927+4
5626:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26761              		.loc 1 5626 5 view .LVU7042
 26762 00b2 A4EB0804 		sub	r4, r4, r8
 26763              	.LVL2098:
5627:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26764              		.loc 1 5627 5 view .LVU7043
 26765 00b6 1B68     		ldr	r3, [r3]
5626:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26766              		.loc 1 5626 5 view .LVU7044
 26767 00b8 24B2     		sxth	r4, r4
5627:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26768              		.loc 1 5627 6 view .LVU7045
 26769 00ba 6242     		rsbs	r2, r4, #0
 26770              	.LVL2099:
5626:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26771              		.loc 1 5626 2 is_stmt 1 view .LVU7046
5627:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26772              		.loc 1 5627 2 view .LVU7047
5627:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26773              		.loc 1 5627 5 is_stmt 0 view .LVU7048
 26774 00bc 9A42     		cmp	r2, r3
 26775 00be 3EDD     		ble	.L1925
 26776              	.LVL2100:
 26777              	.L1915:
5628:src/xeq.c     **** 		return;
 26778              		.loc 1 5628 3 is_stmt 1 view .LVU7049
 26779              	.LBB3531:
 26780              	.LBI3531:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26781              		.loc 1 536 5 view .LVU7050
 26782              	.LBB3532:
 537:src/xeq.c     **** 		Error = e;
 26783              		.loc 1 537 2 view .LVU7051
 537:src/xeq.c     **** 		Error = e;
 26784              		.loc 1 537 12 is_stmt 0 view .LVU7052
 26785 00c0 284B     		ldr	r3, .L1927+8
 537:src/xeq.c     **** 		Error = e;
 26786              		.loc 1 537 5 view .LVU7053
 26787 00c2 1A68     		ldr	r2, [r3]
 26788 00c4 002A     		cmp	r2, #0
 26789 00c6 EBD1     		bne	.L1907
 26790              	.LVL2101:
 26791              	.LBB3533:
 26792              	.LBI3533:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26793              		.loc 1 536 5 is_stmt 1 view .LVU7054
 26794              	.LBB3534:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 26795              		.loc 1 538 3 view .LVU7055
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 26796              		.loc 1 538 9 is_stmt 0 view .LVU7056
 26797 00c8 0B22     		movs	r2, #11
 26798 00ca 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 26799              		.loc 1 539 3 is_stmt 1 view .LVU7057
ARM GAS  /tmp/cciWh9P3.s 			page 683


 26800              	.LBE3534:
 26801              	.LBE3533:
 26802              	.LBE3532:
 26803              	.LBE3531:
 26804              		.loc 1 5651 1 is_stmt 0 view .LVU7058
 26805 00cc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 26806              	.LVL2102:
 26807              	.L1924:
 26808              	.LBB3535:
 26809              	.LBB3530:
 214:src/xeq.c     **** }
 26810              		.loc 1 214 25 view .LVU7059
 26811 00d0 DFF894B0 		ldr	fp, .L1927+12
 26812 00d4 DBF80030 		ldr	r3, [fp]
 26813 00d8 33F81490 		ldrh	r9, [r3, r4, lsl #1]
 26814 00dc C9F30B09 		ubfx	r9, r9, #0, #12
 26815              	.LVL2103:
 214:src/xeq.c     **** }
 26816              		.loc 1 214 25 view .LVU7060
 26817              	.LBE3530:
 26818              	.LBE3535:
5622:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26819              		.loc 1 5622 3 is_stmt 1 view .LVU7061
5622:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26820              		.loc 1 5622 6 is_stmt 0 view .LVU7062
 26821 00e0 4C44     		add	r4, r4, r9
5623:src/xeq.c     **** 	}
 26822              		.loc 1 5623 16 view .LVU7063
 26823 00e2 0021     		movs	r1, #0
 26824              	.LVL2104:
5623:src/xeq.c     **** 	}
 26825              		.loc 1 5623 16 view .LVU7064
 26826 00e4 7020     		movs	r0, #112
 26827 00e6 FFF7FEFF 		bl	flag_word
 26828              	.LVL2105:
5622:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 26829              		.loc 1 5622 6 view .LVU7065
 26830 00ea A4B2     		uxth	r4, r4
 26831              	.LVL2106:
5623:src/xeq.c     **** 	}
 26832              		.loc 1 5623 3 is_stmt 1 view .LVU7066
5627:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26833              		.loc 1 5627 10 is_stmt 0 view .LVU7067
 26834 00ec 1C4B     		ldr	r3, .L1927+4
5623:src/xeq.c     **** 	}
 26835              		.loc 1 5623 13 view .LVU7068
 26836 00ee 0688     		ldrh	r6, [r0]
 26837              	.LVL2107:
5626:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26838              		.loc 1 5626 2 is_stmt 1 view .LVU7069
5627:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26839              		.loc 1 5627 5 is_stmt 0 view .LVU7070
 26840 00f0 1B68     		ldr	r3, [r3]
5626:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26841              		.loc 1 5626 5 view .LVU7071
 26842 00f2 A4EB0804 		sub	r4, r4, r8
 26843              	.LVL2108:
ARM GAS  /tmp/cciWh9P3.s 			page 684


5626:src/xeq.c     **** 	if (-sp > RetStkSize) {
 26844              		.loc 1 5626 5 view .LVU7072
 26845 00f6 24B2     		sxth	r4, r4
 26846              	.LVL2109:
5627:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26847              		.loc 1 5627 2 is_stmt 1 view .LVU7073
5627:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26848              		.loc 1 5627 6 is_stmt 0 view .LVU7074
 26849 00f8 6242     		rsbs	r2, r4, #0
5627:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 26850              		.loc 1 5627 5 view .LVU7075
 26851 00fa 9A42     		cmp	r2, r3
 26852 00fc E0DC     		bgt	.L1915
5631:src/xeq.c     **** 		// move previous contents to new destination
 26853              		.loc 1 5631 2 is_stmt 1 view .LVU7076
5631:src/xeq.c     **** 		// move previous contents to new destination
 26854              		.loc 1 5631 5 is_stmt 0 view .LVU7077
 26855 00fe B9F1000F 		cmp	r9, #0
 26856 0102 25D0     		beq	.L1926
 26857              	.LBB3536:
5633:src/xeq.c     **** 		if (size > old_size) {
 26858              		.loc 1 5633 3 is_stmt 1 view .LVU7078
5634:src/xeq.c     **** 			n = old_size;
 26859              		.loc 1 5634 3 view .LVU7079
5642:src/xeq.c     **** 	}
 26860              		.loc 1 5642 31 is_stmt 0 view .LVU7080
 26861 0104 3B68     		ldr	r3, [r7]
5642:src/xeq.c     **** 	}
 26862              		.loc 1 5642 3 view .LVU7081
 26863 0106 DBF80000 		ldr	r0, [fp]
5642:src/xeq.c     **** 	}
 26864              		.loc 1 5642 29 view .LVU7082
 26865 010a B3F9DE17 		ldrsh	r1, [r3, #2014]
5634:src/xeq.c     **** 			n = old_size;
 26866              		.loc 1 5634 6 view .LVU7083
 26867 010e 4D45     		cmp	r5, r9
5635:src/xeq.c     **** 			size -= old_size;
 26868              		.loc 1 5635 4 is_stmt 1 view .LVU7084
 26869              	.LVL2110:
5636:src/xeq.c     **** 		}
 26870              		.loc 1 5636 4 view .LVU7085
5636:src/xeq.c     **** 		}
 26871              		.loc 1 5636 9 is_stmt 0 view .LVU7086
 26872 0110 C2BF     		ittt	gt
 26873 0112 A5EB0905 		subgt	r5, r5, r9
 26874              	.LVL2111:
5636:src/xeq.c     **** 		}
 26875              		.loc 1 5636 9 view .LVU7087
 26876 0116 4FEA450A 		lslgt	r10, r5, #1
 26877 011a 4D46     		movgt	r5, r9
 26878              	.LVL2112:
5642:src/xeq.c     **** 	}
 26879              		.loc 1 5642 3 is_stmt 1 view .LVU7088
 26880 011c 00EB4101 		add	r1, r0, r1, lsl #1
 26881 0120 4FEA4502 		lsl	r2, r5, #1
 26882 0124 00EB4400 		add	r0, r0, r4, lsl #1
 26883 0128 D8BF     		it	le
ARM GAS  /tmp/cciWh9P3.s 			page 685


 26884 012a 4FF0000A 		movle	r10, #0
 26885 012e FFF7FEFF 		bl	xcopy
 26886              	.LVL2113:
 26887 0132 04EB0903 		add	r3, r4, r9
 26888 0136 5B00     		lsls	r3, r3, #1
5642:src/xeq.c     **** 	}
 26889              		.loc 1 5642 16 is_stmt 0 view .LVU7089
 26890 0138 4FEA4409 		lsl	r9, r4, #1
 26891              	.LVL2114:
5642:src/xeq.c     **** 	}
 26892              		.loc 1 5642 16 view .LVU7090
 26893 013c 99E7     		b	.L1913
 26894              	.LVL2115:
 26895              	.L1925:
5642:src/xeq.c     **** 	}
 26896              		.loc 1 5642 16 view .LVU7091
 26897 013e 4FEA4409 		lsl	r9, r4, #1
 26898              	.LBE3536:
5623:src/xeq.c     **** 	}
 26899              		.loc 1 5623 13 view .LVU7092
 26900 0142 0688     		ldrh	r6, [r0]
 26901 0144 DFF820B0 		ldr	fp, .L1927+12
 26902 0148 4FEA450A 		lsl	r10, r5, #1
 26903 014c 4B46     		mov	r3, r9
 26904 014e 90E7     		b	.L1913
 26905              	.LVL2116:
 26906              	.L1926:
5623:src/xeq.c     **** 	}
 26907              		.loc 1 5623 13 view .LVU7093
 26908 0150 4FEA4409 		lsl	r9, r4, #1
 26909              	.LVL2117:
5623:src/xeq.c     **** 	}
 26910              		.loc 1 5623 13 view .LVU7094
 26911 0154 4FEA450A 		lsl	r10, r5, #1
5631:src/xeq.c     **** 		// move previous contents to new destination
 26912              		.loc 1 5631 5 view .LVU7095
 26913 0158 4B46     		mov	r3, r9
 26914 015a 8AE7     		b	.L1913
 26915              	.L1928:
 26916              		.align	2
 26917              	.L1927:
 26918 015c 00000000 		.word	main_ram
 26919 0160 00000000 		.word	RetStkSize
 26920 0164 00000000 		.word	Error
 26921 0168 00000000 		.word	RetStk
 26922              		.cfi_endproc
 26923              	.LFE263:
 26925              		.section	.text.cmdxout,"ax",%progbits
 26926              		.align	1
 26927              		.p2align 2,,3
 26928              		.global	cmdxout
 26929              		.syntax unified
 26930              		.thumb
 26931              		.thumb_func
 26932              		.fpu fpv4-sp-d16
 26934              	cmdxout:
 26935              	.LVL2118:
ARM GAS  /tmp/cciWh9P3.s 			page 686


 26936              	.LFB265:
5652:src/xeq.c     **** 
5653:src/xeq.c     **** 
5654:src/xeq.c     **** /*
5655:src/xeq.c     ****  *  xIN: Setup an environment for XROM based math routines:
5656:src/xeq.c     ****  *
5657:src/xeq.c     ****  *  - 12 Private double precision stack & special registers X to K
5658:src/xeq.c     ****  *  - private return stack for local flags & registers
5659:src/xeq.c     ****  *  - 6 system flags
5660:src/xeq.c     ****  *
5661:src/xeq.c     ****  *  Argument:
5662:src/xeq.c     ****  *      noLocals - bit 7
5663:src/xeq.c     ****  *      out      - bits 4..5
5664:src/xeq.c     ****  *      in       - bits 2..4		
5665:src/xeq.c     ****  *      setLastX - bit 1
5666:src/xeq.c     ****  *      complex  - bit 0
5667:src/xeq.c     ****  *
5668:src/xeq.c     ****  *  Local flags:
5669:src/xeq.c     ****  *      .00 to .09 are free for general use.
5670:src/xeq.c     ****  *	.10 - stack_depth as previously set by user, don't touch it!
5671:src/xeq.c     ****  *	.11 - mode_double as previously set by user, don't touch it!
5672:src/xeq.c     ****  *      .12 - complex, from argument, can be modified.
5673:src/xeq.c     ****  *	.13 - setLastX, from argumment, can be modified.
5674:src/xeq.c     ****  *	.14 - state_lift as desired on exit, set to 1 by default, can be modified.
5675:src/xeq.c     ****  *      .15 - reserved, indicates that xIN is active, set to 1, don't touch it!
5676:src/xeq.c     ****  *
5677:src/xeq.c     ****  *  If the call is repeated only the argument values are reevaluated.
5678:src/xeq.c     ****  */
5679:src/xeq.c     **** void cmdxin(unsigned int arg, enum rarg op) {
5680:src/xeq.c     **** 
5681:src/xeq.c     **** 	int i;
5682:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5683:src/xeq.c     **** 	REGISTER *previousLocals = NULL;
5684:src/xeq.c     **** 	unsigned short previousFlags = 0;
5685:src/xeq.c     **** 	int num_locals = 0;
5686:src/xeq.c     **** #endif
5687:src/xeq.c     **** #ifndef REALBUILD
5688:src/xeq.c     **** 	/* This should never happen in a real build but it causes havoc writing
5689:src/xeq.c     **** 	 * xrom code, so trap it here.
5690:src/xeq.c     **** 	 */
5691:src/xeq.c     **** 	if (XromFlags.xIN) {
5692:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5693:src/xeq.c     **** 		return;
5694:src/xeq.c     **** 	}
5695:src/xeq.c     **** #endif
5696:src/xeq.c     **** 
5697:src/xeq.c     **** 	// Setup the XromLocal and XromParams structures in volatile RAM
5698:src/xeq.c     **** 	// fill with 0
5699:src/xeq.c     **** 	xset(&XromLocal, 0, sizeof(XromLocal));
5700:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
5701:src/xeq.c     **** 
5702:src/xeq.c     **** 	// Flags
5703:src/xeq.c     **** 	XromFlags.state_lift_in = get_lift();
5704:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
5705:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
5706:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
5707:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
ARM GAS  /tmp/cciWh9P3.s 			page 687


5708:src/xeq.c     **** 	XromFlags.state_lift = 1;
5709:src/xeq.c     **** 	XromFlags.xIN = 1;
5710:src/xeq.c     **** 
5711:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5712:src/xeq.c     **** 	// Save pointers to original local data
5713:src/xeq.c     **** 	if ((arg & 0x80) != 0 && LocalRegs < 0) {
5714:src/xeq.c     **** 		XromFlags.copyLocals = 1;
5715:src/xeq.c     **** 		previousFlags = *flag_word(LOCAL_FLAG_BASE, NULL);
5716:src/xeq.c     **** 		previousLocals = get_reg_n(LOCAL_REG_BASE);
5717:src/xeq.c     **** 		num_locals = local_regs();
5718:src/xeq.c     **** 	}
5719:src/xeq.c     **** #endif
5720:src/xeq.c     **** 	// Establish local return stack
5721:src/xeq.c     **** 	XromUserRetStk = RetStk;
5722:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
5723:src/xeq.c     **** 
5724:src/xeq.c     **** 	RetStk = XromRetStk;
5725:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5726:src/xeq.c     **** 	RetStkPtr = 0;			// Locals will be allocated later
5727:src/xeq.c     **** #else
5728:src/xeq.c     **** 	LocalRegs = RetStkPtr = -2;	// Allocate just the local flags
5729:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
5730:src/xeq.c     **** #endif
5731:src/xeq.c     **** 
5732:src/xeq.c     **** 	// Parse the argument into fields
5733:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5734:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x20) != 0;
5735:src/xeq.c     **** 	XromFlags.complex = (arg & 0x40) != 0;
5736:src/xeq.c     **** 	XromIn = (arg & 0x1f) % 5;
5737:src/xeq.c     **** 	XromOut = (arg & 0x1f) / 5;
5738:src/xeq.c     **** #else
5739:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x40) != 0;
5740:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
5741:src/xeq.c     **** 	XromIn = (arg & 0x7);
5742:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
5743:src/xeq.c     **** #endif
5744:src/xeq.c     **** 	if (XromFlags.complex) {
5745:src/xeq.c     **** 		// Complex arguments are always in pairs
5746:src/xeq.c     **** 		XromIn <<= 1;
5747:src/xeq.c     **** 		XromOut <<= 1;
5748:src/xeq.c     **** 	}
5749:src/xeq.c     **** 
5750:src/xeq.c     ****         UState.rounding_mode = 0;
5751:src/xeq.c     **** 
5752:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5753:src/xeq.c     **** 	// Allocate the local frame
5754:src/xeq.c     **** 	LocalRegs = 0;
5755:src/xeq.c     **** 	UState.mode_double = 1;		// Needed to allocate enough registers
5756:src/xeq.c     **** 	cmdlocr(num_locals, RARG_LOCR);
5757:src/xeq.c     **** 	if (XromFlags.copyLocals)
5758:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = previousFlags;
5759:src/xeq.c     **** #endif
5760:src/xeq.c     **** 	// Switch to double precision mode
5761:src/xeq.c     **** 	if (XromFlags.mode_int) {
5762:src/xeq.c     **** 		// Convert integers to decimal128
5763:src/xeq.c     **** #ifndef ENABLE_COPYLOCALS
5764:src/xeq.c     **** 		UState.mode_double = 1;
ARM GAS  /tmp/cciWh9P3.s 			page 688


5765:src/xeq.c     **** #endif
5766:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
5767:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
5768:src/xeq.c     **** 	}
5769:src/xeq.c     **** 	else if (XromFlags.mode_double) {
5770:src/xeq.c     **** 		// No conversion necessary
5771:src/xeq.c     **** 		xcopy(XromStack, StackBase, sizeof(XromStack));
5772:src/xeq.c     **** 		StackBase = XromStack;
5773:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5774:src/xeq.c     **** 		if (XromFlags.copyLocals)
5775:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), previousLocals, num_locals);
5776:src/xeq.c     **** #endif
5777:src/xeq.c     **** 	}
5778:src/xeq.c     **** 	else {
5779:src/xeq.c     **** 		// Convert decimal64 to decinal128
5780:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5781:src/xeq.c     **** 		UState.mode_double = 0;		// This was the original state before xIN
5782:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
5783:src/xeq.c     **** 		if (XromFlags.copyLocals) {
5784:src/xeq.c     **** 			decimal64  *src  = &(previousLocals->s);
5785:src/xeq.c     **** 			decimal128 *dest = &(get_reg_n(LOCAL_REG_BASE)->d);
5786:src/xeq.c     **** 			while (num_locals--)
5787:src/xeq.c     **** 				packed128_from_packed(dest++, src++);
5788:src/xeq.c     **** 		}
5789:src/xeq.c     **** #else
5790:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
5791:src/xeq.c     **** #endif
5792:src/xeq.c     **** 	}
5793:src/xeq.c     **** 
5794:src/xeq.c     **** 	// Set stack size to 8 and turn on stack_lift
5795:src/xeq.c     **** 	set_lift();
5796:src/xeq.c     **** 	UState.stack_depth = 1;
5797:src/xeq.c     **** 
5798:src/xeq.c     **** 	// check for any NaNs in input
5799:src/xeq.c     **** 	for (i = 0; i < XromIn; ++i) {
5800:src/xeq.c     **** 		decNumber x;
5801:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
5802:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
5803:src/xeq.c     **** 			// domain error
5804:src/xeq.c     **** 			if (get_user_flag(NAN_FLAG)) {
5805:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
5806:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
5807:src/xeq.c     **** 				// Early exit of routine
5808:src/xeq.c     **** 				cmdxout(0, RARG_XROM_OUT);
5809:src/xeq.c     **** 			} 
5810:src/xeq.c     **** 			else
5811:src/xeq.c     **** 				report_err(ERR_DOMAIN);	// this will do all the cleanup
5812:src/xeq.c     **** 			return;
5813:src/xeq.c     **** 		}
5814:src/xeq.c     **** 	}
5815:src/xeq.c     **** }
5816:src/xeq.c     **** 
5817:src/xeq.c     **** /*
5818:src/xeq.c     ****  *  xOUT: Return from an XROM routine that has previously called xIN
5819:src/xeq.c     ****  *  Argument:
5820:src/xeq.c     ****  *     bit 0 set - do a RTN+1
5821:src/xeq.c     ****  *     bit 1 set - leave I alone even with a complex result
ARM GAS  /tmp/cciWh9P3.s 			page 689


5822:src/xeq.c     ****  */
5823:src/xeq.c     **** void cmdxout(unsigned int arg, enum rarg op) {
 26937              		.loc 1 5823 46 is_stmt 1 view -0
 26938              		.cfi_startproc
 26939              		@ args = 0, pretend = 0, frame = 56
 26940              		@ frame_needed = 0, uses_anonymous_args = 0
5824:src/xeq.c     **** 	int i, dbl, intm;
 26941              		.loc 1 5824 2 view .LVU7097
5825:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5826:src/xeq.c     **** 	unsigned short flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5827:src/xeq.c     **** 	REGISTER *locals = get_reg_n(LOCAL_REG_BASE);
5828:src/xeq.c     **** 	int num_locals = local_regs();
5829:src/xeq.c     **** #endif
5830:src/xeq.c     **** #ifndef REALBUILD
5831:src/xeq.c     **** 	// shouldn't happen in final build
5832:src/xeq.c     **** 	if (! XromFlags.xIN) {
 26942              		.loc 1 5832 2 view .LVU7098
5823:src/xeq.c     **** 	int i, dbl, intm;
 26943              		.loc 1 5823 46 is_stmt 0 view .LVU7099
 26944 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 26945              		.cfi_def_cfa_offset 36
 26946              		.cfi_offset 4, -36
 26947              		.cfi_offset 5, -32
 26948              		.cfi_offset 6, -28
 26949              		.cfi_offset 7, -24
 26950              		.cfi_offset 8, -20
 26951              		.cfi_offset 9, -16
 26952              		.cfi_offset 10, -12
 26953              		.cfi_offset 11, -8
 26954              		.cfi_offset 14, -4
 26955              		.loc 1 5832 6 view .LVU7100
 26956 0004 774C     		ldr	r4, .L1975
 26957              		.loc 1 5832 5 view .LVU7101
 26958 0006 94F90130 		ldrsb	r3, [r4, #1]
 26959 000a 002B     		cmp	r3, #0
5823:src/xeq.c     **** 	int i, dbl, intm;
 26960              		.loc 1 5823 46 view .LVU7102
 26961 000c 8FB0     		sub	sp, sp, #60
 26962              		.cfi_def_cfa_offset 96
 26963              		.loc 1 5832 5 view .LVU7103
 26964 000e 07DB     		blt	.L1930
5833:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 26965              		.loc 1 5833 3 is_stmt 1 view .LVU7104
 26966              	.LVL2119:
 26967              	.LBB3560:
 26968              	.LBI3560:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26969              		.loc 1 536 5 view .LVU7105
 26970              	.LBB3561:
 537:src/xeq.c     **** 		Error = e;
 26971              		.loc 1 537 2 view .LVU7106
 537:src/xeq.c     **** 		Error = e;
 26972              		.loc 1 537 12 is_stmt 0 view .LVU7107
 26973 0010 754B     		ldr	r3, .L1975+4
 537:src/xeq.c     **** 		Error = e;
 26974              		.loc 1 537 5 view .LVU7108
 26975 0012 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 690


 26976 0014 0AB9     		cbnz	r2, .L1929
 26977              	.LVL2120:
 26978              	.LBB3562:
 26979              	.LBI3562:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26980              		.loc 1 536 5 is_stmt 1 view .LVU7109
 26981              	.LBB3563:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 26982              		.loc 1 538 3 view .LVU7110
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 26983              		.loc 1 538 9 is_stmt 0 view .LVU7111
 26984 0016 0722     		movs	r2, #7
 26985 0018 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 26986              		.loc 1 539 3 is_stmt 1 view .LVU7112
 26987              	.LVL2121:
 26988              	.L1929:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 26989              		.loc 1 539 3 is_stmt 0 view .LVU7113
 26990              	.LBE3563:
 26991              	.LBE3562:
 26992              	.LBE3561:
 26993              	.LBE3560:
5834:src/xeq.c     **** 		return;
5835:src/xeq.c     **** 	}
5836:src/xeq.c     **** #endif
5837:src/xeq.c     **** 	// End special handling
5838:src/xeq.c     **** 	XromFlags.xIN = 0;
5839:src/xeq.c     **** 
5840:src/xeq.c     **** 	// Restore the global return stack
5841:src/xeq.c     **** 	RetStk = XromUserRetStk;
5842:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
5843:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
5844:src/xeq.c     **** 
5845:src/xeq.c     **** 	// RTN or RTN+1 depending on bit 0 of argument
5846:src/xeq.c     **** 	do_rtn(arg & 1);
5847:src/xeq.c     **** 
5848:src/xeq.c     **** 	// Switch back to user stack settings
5849:src/xeq.c     **** 	dbl = UState.mode_double = XromFlags.mode_double;
5850:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
5851:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
5852:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
5853:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5854:src/xeq.c     **** 
5855:src/xeq.c     **** 	// Last X handling and complex flag
5856:src/xeq.c     **** 	if (XromFlags.setLastX) {
5857:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
5858:src/xeq.c     **** 			setlastXY();
5859:src/xeq.c     **** 		else
5860:src/xeq.c     **** 			setlastX();
5861:src/xeq.c     **** 	}
5862:src/xeq.c     **** 
5863:src/xeq.c     **** 	// Move the stack according to the in/out fields
5864:src/xeq.c     **** 	i = (int) XromOut - (int) XromIn;
5865:src/xeq.c     **** 	if (XromFlags.complex) {
5866:src/xeq.c     **** 		set_was_complex();
5867:src/xeq.c     **** 		while (i < 0) {
ARM GAS  /tmp/cciWh9P3.s 			page 691


5868:src/xeq.c     **** 			// different stack handling in complex mode
5869:src/xeq.c     **** 			// more to consume then to push back
5870:src/xeq.c     **** 			lower2();
5871:src/xeq.c     **** 			i += 2;
5872:src/xeq.c     **** 		}
5873:src/xeq.c     **** 	}
5874:src/xeq.c     **** 	else {
5875:src/xeq.c     **** 		while (i < 0) {
5876:src/xeq.c     **** 			// more to consume then to push back
5877:src/xeq.c     **** 			lower();	
5878:src/xeq.c     **** 			++i;
5879:src/xeq.c     **** 		}
5880:src/xeq.c     **** 	}
5881:src/xeq.c     **** 	if (i > 0) {
5882:src/xeq.c     **** 		// more to push back then to consume
5883:src/xeq.c     **** 		if (! XromFlags.state_lift_in)
5884:src/xeq.c     **** 			--i;
5885:src/xeq.c     **** 		while (i > 0) {
5886:src/xeq.c     **** 			lift();
5887:src/xeq.c     **** 			--i;
5888:src/xeq.c     **** 		}
5889:src/xeq.c     **** 	}
5890:src/xeq.c     **** 	State2.state_lift = XromFlags.state_lift;
5891:src/xeq.c     **** 
5892:src/xeq.c     **** 	// Copy results
5893:src/xeq.c     **** 	i = XromOut;
5894:src/xeq.c     **** 	if (intm) {
5895:src/xeq.c     **** 		while (i--) {
5896:src/xeq.c     **** 			decNumber r;
5897:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
5898:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
5899:src/xeq.c     **** 		}
5900:src/xeq.c     **** 	}
5901:src/xeq.c     **** 	else if (dbl) {
5902:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
5903:src/xeq.c     **** 	}
5904:src/xeq.c     **** 	else {
5905:src/xeq.c     **** 		while (i--)
5906:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
5907:src/xeq.c     **** 	}
5908:src/xeq.c     **** 
5909:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5910:src/xeq.c     **** 	// Copy back local data
5911:src/xeq.c     **** 	if (XromFlags.copyLocals) {
5912:src/xeq.c     **** 		i = local_regs();
5913:src/xeq.c     **** 		num_locals = i < num_locals ? i : num_locals; 
5914:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = flags;
5915:src/xeq.c     **** 		if (intm) {
5916:src/xeq.c     **** 			// not used
5917:src/xeq.c     **** 		}
5918:src/xeq.c     **** 		else if (dbl) {
5919:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), locals, num_locals);
5920:src/xeq.c     **** 		}
5921:src/xeq.c     **** 		else {
5922:src/xeq.c     **** 			decimal64  *dest = &(get_reg_n(LOCAL_REG_BASE)->s);
5923:src/xeq.c     **** 			decimal128 *src  = &(locals->d);
5924:src/xeq.c     **** 			while (num_locals--)
ARM GAS  /tmp/cciWh9P3.s 			page 692


5925:src/xeq.c     **** 				packed_from_packed128(dest++, src++);
5926:src/xeq.c     **** 		}
5927:src/xeq.c     **** 	}
5928:src/xeq.c     **** #endif
5929:src/xeq.c     **** }
 26994              		.loc 1 5929 1 view .LVU7114
 26995 001a 0FB0     		add	sp, sp, #60
 26996              		.cfi_remember_state
 26997              		.cfi_def_cfa_offset 36
 26998              		@ sp needed
 26999 001c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27000              	.LVL2122:
 27001              	.L1930:
 27002              		.cfi_restore_state
 27003              	.LBB3564:
 27004              	.LBB3565:
5842:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27005              		.loc 1 5842 2 view .LVU7115
 27006 0020 724F     		ldr	r7, .L1975+8
5843:src/xeq.c     **** 
 27007              		.loc 1 5843 12 view .LVU7116
 27008 0022 7349     		ldr	r1, .L1975+12
 27009              	.LVL2123:
5842:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27010              		.loc 1 5842 2 view .LVU7117
 27011 0024 3A68     		ldr	r2, [r7]
5838:src/xeq.c     **** 
 27012              		.loc 1 5838 16 view .LVU7118
 27013 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5842:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27014              		.loc 1 5842 12 view .LVU7119
 27015 0028 A689     		ldrh	r6, [r4, #12]
 27016 002a A2F8E267 		strh	r6, [r2, #2018]	@ movhi
 27017 002e 0546     		mov	r5, r0
 27018              	.LVL2124:
5842:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27019              		.loc 1 5842 12 view .LVU7120
 27020              	.LBE3565:
 27021              	.LBI3564:
5823:src/xeq.c     **** 	int i, dbl, intm;
 27022              		.loc 1 5823 6 is_stmt 1 view .LVU7121
 27023              	.LBB3594:
5838:src/xeq.c     **** 
 27024              		.loc 1 5838 2 view .LVU7122
5843:src/xeq.c     **** 
 27025              		.loc 1 5843 12 is_stmt 0 view .LVU7123
 27026 0030 0868     		ldr	r0, [r1]
 27027              	.LVL2125:
5841:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27028              		.loc 1 5841 9 view .LVU7124
 27029 0032 7049     		ldr	r1, .L1975+16
5843:src/xeq.c     **** 
 27030              		.loc 1 5843 12 view .LVU7125
 27031 0034 A2F8DE07 		strh	r0, [r2, #2014]	@ movhi
5838:src/xeq.c     **** 
 27032              		.loc 1 5838 16 view .LVU7126
 27033 0038 6FF3C713 		bfc	r3, #7, #1
ARM GAS  /tmp/cciWh9P3.s 			page 693


5841:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27034              		.loc 1 5841 9 view .LVU7127
 27035 003c A268     		ldr	r2, [r4, #8]
 27036 003e 0A60     		str	r2, [r1]
5846:src/xeq.c     **** 
 27037              		.loc 1 5846 2 view .LVU7128
 27038 0040 05F00100 		and	r0, r5, #1
5838:src/xeq.c     **** 
 27039              		.loc 1 5838 16 view .LVU7129
 27040 0044 6370     		strb	r3, [r4, #1]
5841:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27041              		.loc 1 5841 2 is_stmt 1 view .LVU7130
5842:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27042              		.loc 1 5842 2 view .LVU7131
5843:src/xeq.c     **** 
 27043              		.loc 1 5843 2 view .LVU7132
5846:src/xeq.c     **** 
 27044              		.loc 1 5846 2 view .LVU7133
 27045 0046 FFF7FEFF 		bl	do_rtn
 27046              	.LVL2126:
5849:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27047              		.loc 1 5849 2 view .LVU7134
5849:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27048              		.loc 1 5849 38 is_stmt 0 view .LVU7135
 27049 004a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5849:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27050              		.loc 1 5849 8 view .LVU7136
 27051 004c 3868     		ldr	r0, [r7]
5851:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27052              		.loc 1 5851 41 view .LVU7137
 27053 004e A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
5850:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27054              		.loc 1 5850 21 view .LVU7138
 27055 0050 D0F8E827 		ldr	r2, [r0, #2024]
5853:src/xeq.c     **** 
 27056              		.loc 1 5853 12 view .LVU7139
 27057 0054 DFF8ACA1 		ldr	r10, .L1975+32
5849:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27058              		.loc 1 5849 38 view .LVU7140
 27059 0058 C3F3C009 		ubfx	r9, r3, #3, #1
 27060              	.LVL2127:
5850:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27061              		.loc 1 5850 2 is_stmt 1 view .LVU7141
5850:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27062              		.loc 1 5850 32 is_stmt 0 view .LVU7142
 27063 005c 03F00108 		and	r8, r3, #1
 27064              	.LVL2128:
5851:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27065              		.loc 1 5851 9 is_stmt 1 view .LVU7143
5852:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 27066              		.loc 1 5852 2 view .LVU7144
5850:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27067              		.loc 1 5850 21 is_stmt 0 view .LVU7145
 27068 0060 C3F38001 		ubfx	r1, r3, #2, #1
 27069 0064 48EA8933 		orr	r3, r8, r9, lsl #14
 27070              	.LVL2129:
5850:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
ARM GAS  /tmp/cciWh9P3.s 			page 694


 27071              		.loc 1 5850 21 view .LVU7146
 27072 0068 43EAC143 		orr	r3, r3, r1, lsl #19
 27073 006c 6249     		ldr	r1, .L1975+20
 27074 006e 06F00706 		and	r6, r6, #7
 27075 0072 1140     		ands	r1, r1, r2
 27076 0074 43EA0673 		orr	r3, r3, r6, lsl #28
 27077 0078 0B43     		orrs	r3, r3, r1
 27078 007a C0F8E837 		str	r3, [r0, #2024]
5853:src/xeq.c     **** 
 27079              		.loc 1 5853 2 is_stmt 1 view .LVU7147
5853:src/xeq.c     **** 
 27080              		.loc 1 5853 14 is_stmt 0 view .LVU7148
 27081 007e 6420     		movs	r0, #100
 27082 0080 FFF7FEFF 		bl	get_reg_n
 27083              	.LVL2130:
5856:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27084              		.loc 1 5856 6 view .LVU7149
 27085 0084 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
5853:src/xeq.c     **** 
 27086              		.loc 1 5853 12 view .LVU7150
 27087 0086 CAF80000 		str	r0, [r10]
5856:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27088              		.loc 1 5856 2 is_stmt 1 view .LVU7151
5856:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27089              		.loc 1 5856 5 is_stmt 0 view .LVU7152
 27090 008a 9606     		lsls	r6, r2, #26
 27091 008c 09D5     		bpl	.L1933
5857:src/xeq.c     **** 			setlastXY();
 27092              		.loc 1 5857 3 is_stmt 1 view .LVU7153
5857:src/xeq.c     **** 			setlastXY();
 27093              		.loc 1 5857 6 is_stmt 0 view .LVU7154
 27094 008e D006     		lsls	r0, r2, #27
 27095 0090 02D5     		bpl	.L1934
5857:src/xeq.c     **** 			setlastXY();
 27096              		.loc 1 5857 25 view .LVU7155
 27097 0092 A907     		lsls	r1, r5, #30
 27098 0094 40F19F80 		bpl	.L1971
 27099              	.L1934:
5860:src/xeq.c     **** 	}
 27100              		.loc 1 5860 4 is_stmt 1 view .LVU7156
 27101              	.LBB3566:
 27102              	.LBI3566:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 27103              		.loc 1 772 6 view .LVU7157
 27104              	.LBB3567:
 773:src/xeq.c     **** }
 27105              		.loc 1 773 2 view .LVU7158
 27106 0098 6421     		movs	r1, #100
 27107 009a 6C20     		movs	r0, #108
 27108 009c FFF7FEFF 		bl	copyreg_n
 27109              	.LVL2131:
 27110 00a0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27111              	.L1933:
 27112              	.LBE3567:
 27113              	.LBE3566:
5864:src/xeq.c     **** 	if (XromFlags.complex) {
 27114              		.loc 1 5864 2 view .LVU7159
ARM GAS  /tmp/cciWh9P3.s 			page 695


5864:src/xeq.c     **** 	if (XromFlags.complex) {
 27115              		.loc 1 5864 6 is_stmt 0 view .LVU7160
 27116 00a2 94F805B0 		ldrb	fp, [r4, #5]	@ zero_extendqisi2
5864:src/xeq.c     **** 	if (XromFlags.complex) {
 27117              		.loc 1 5864 22 view .LVU7161
 27118 00a6 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
5865:src/xeq.c     **** 		set_was_complex();
 27119              		.loc 1 5865 5 view .LVU7162
 27120 00a8 D206     		lsls	r2, r2, #27
5864:src/xeq.c     **** 	if (XromFlags.complex) {
 27121              		.loc 1 5864 4 view .LVU7163
 27122 00aa ABEB030B 		sub	fp, fp, r3
 27123              	.LVL2132:
5865:src/xeq.c     **** 		set_was_complex();
 27124              		.loc 1 5865 2 is_stmt 1 view .LVU7164
5865:src/xeq.c     **** 		set_was_complex();
 27125              		.loc 1 5865 5 is_stmt 0 view .LVU7165
 27126 00ae 2BD5     		bpl	.L1972
5866:src/xeq.c     **** 		while (i < 0) {
 27127              		.loc 1 5866 3 is_stmt 1 view .LVU7166
 27128              	.LBB3568:
 27129              	.LBI3568:
 529:src/xeq.c     **** 	State2.wascomplex = 1;
 27130              		.loc 1 529 13 view .LVU7167
 27131              	.LBB3569:
 530:src/xeq.c     **** }
 27132              		.loc 1 530 2 view .LVU7168
 530:src/xeq.c     **** }
 27133              		.loc 1 530 20 is_stmt 0 view .LVU7169
 27134 00b0 524E     		ldr	r6, .L1975+24
 27135 00b2 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 27136 00b4 0121     		movs	r1, #1
 27137 00b6 61F38712 		bfi	r2, r1, #6, #2
 27138              	.LBE3569:
 27139              	.LBE3568:
5867:src/xeq.c     **** 			// different stack handling in complex mode
 27140              		.loc 1 5867 9 view .LVU7170
 27141 00ba BBF1000F 		cmp	fp, #0
 27142              	.LBB3571:
 27143              	.LBB3570:
 530:src/xeq.c     **** }
 27144              		.loc 1 530 20 view .LVU7171
 27145 00be 3275     		strb	r2, [r6, #20]
 530:src/xeq.c     **** }
 27146              		.loc 1 530 20 view .LVU7172
 27147              	.LBE3570:
 27148              	.LBE3571:
5867:src/xeq.c     **** 			// different stack handling in complex mode
 27149              		.loc 1 5867 9 is_stmt 1 view .LVU7173
 27150 00c0 13DA     		bge	.L1937
 27151 00c2 6FEA0B03 		mvn	r3, fp
 27152 00c6 23F00105 		bic	r5, r3, #1
 27153              	.LVL2133:
5867:src/xeq.c     **** 			// different stack handling in complex mode
 27154              		.loc 1 5867 9 is_stmt 0 view .LVU7174
 27155 00ca 0093     		str	r3, [sp]
 27156 00cc 0BF10203 		add	r3, fp, #2
ARM GAS  /tmp/cciWh9P3.s 			page 696


 27157 00d0 0193     		str	r3, [sp, #4]
 27158 00d2 1D44     		add	r5, r5, r3
 27159              	.L1938:
5870:src/xeq.c     **** 			i += 2;
 27160              		.loc 1 5870 4 is_stmt 1 view .LVU7175
5871:src/xeq.c     **** 		}
 27161              		.loc 1 5871 6 is_stmt 0 view .LVU7176
 27162 00d4 0BF1020B 		add	fp, fp, #2
 27163              	.LVL2134:
5870:src/xeq.c     **** 			i += 2;
 27164              		.loc 1 5870 4 view .LVU7177
 27165 00d8 FFF7FEFF 		bl	lower2
 27166              	.LVL2135:
5871:src/xeq.c     **** 		}
 27167              		.loc 1 5871 4 is_stmt 1 view .LVU7178
5867:src/xeq.c     **** 			// different stack handling in complex mode
 27168              		.loc 1 5867 9 view .LVU7179
 27169 00dc AB45     		cmp	fp, r5
 27170 00de F9D1     		bne	.L1938
 27171 00e0 009B     		ldr	r3, [sp]
 27172 00e2 23F0010B 		bic	fp, r3, #1
 27173              	.LVL2136:
5867:src/xeq.c     **** 			// different stack handling in complex mode
 27174              		.loc 1 5867 9 is_stmt 0 view .LVU7180
 27175 00e6 019B     		ldr	r3, [sp, #4]
 27176 00e8 9B44     		add	fp, fp, r3
 27177              	.L1937:
 27178              	.LVL2137:
5881:src/xeq.c     **** 		// more to push back then to consume
 27179              		.loc 1 5881 2 is_stmt 1 view .LVU7181
5881:src/xeq.c     **** 		// more to push back then to consume
 27180              		.loc 1 5881 5 is_stmt 0 view .LVU7182
 27181 00ea BBF1000F 		cmp	fp, #0
 27182 00ee 14D0     		beq	.L1939
5883:src/xeq.c     **** 			--i;
 27183              		.loc 1 5883 3 is_stmt 1 view .LVU7183
5883:src/xeq.c     **** 			--i;
 27184              		.loc 1 5883 7 is_stmt 0 view .LVU7184
 27185 00f0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
5883:src/xeq.c     **** 			--i;
 27186              		.loc 1 5883 6 view .LVU7185
 27187 00f2 9307     		lsls	r3, r2, #30
 27188 00f4 02D4     		bmi	.L1944
5884:src/xeq.c     **** 		while (i > 0) {
 27189              		.loc 1 5884 4 is_stmt 1 view .LVU7186
 27190              	.LVL2138:
5885:src/xeq.c     **** 			lift();
 27191              		.loc 1 5885 9 view .LVU7187
 27192 00f6 BBF1010B 		subs	fp, fp, #1
 27193              	.LVL2139:
5885:src/xeq.c     **** 			lift();
 27194              		.loc 1 5885 9 is_stmt 0 view .LVU7188
 27195 00fa 0ED0     		beq	.L1939
 27196              	.L1944:
5886:src/xeq.c     **** 			--i;
 27197              		.loc 1 5886 4 is_stmt 1 view .LVU7189
 27198 00fc FFF7FEFF 		bl	lift
ARM GAS  /tmp/cciWh9P3.s 			page 697


 27199              	.LVL2140:
5887:src/xeq.c     **** 		}
 27200              		.loc 1 5887 4 view .LVU7190
5885:src/xeq.c     **** 			lift();
 27201              		.loc 1 5885 9 view .LVU7191
 27202 0100 BBF1010B 		subs	fp, fp, #1
 27203              	.LVL2141:
5885:src/xeq.c     **** 			lift();
 27204              		.loc 1 5885 9 is_stmt 0 view .LVU7192
 27205 0104 FAD1     		bne	.L1944
 27206 0106 08E0     		b	.L1939
 27207              	.LVL2142:
 27208              	.L1972:
5875:src/xeq.c     **** 			// more to consume then to push back
 27209              		.loc 1 5875 9 is_stmt 1 view .LVU7193
 27210 0108 BBF1000F 		cmp	fp, #0
 27211 010c 67DA     		bge	.L1973
 27212              	.L1936:
5877:src/xeq.c     **** 			++i;
 27213              		.loc 1 5877 4 view .LVU7194
 27214 010e FFF7FEFF 		bl	lower
 27215              	.LVL2143:
5878:src/xeq.c     **** 		}
 27216              		.loc 1 5878 4 view .LVU7195
5875:src/xeq.c     **** 			// more to consume then to push back
 27217              		.loc 1 5875 9 view .LVU7196
 27218 0112 1BF1010B 		adds	fp, fp, #1
 27219              	.LVL2144:
5875:src/xeq.c     **** 			// more to consume then to push back
 27220              		.loc 1 5875 9 is_stmt 0 view .LVU7197
 27221 0116 FAD1     		bne	.L1936
 27222 0118 384E     		ldr	r6, .L1975+24
 27223              	.LVL2145:
 27224              	.L1939:
5890:src/xeq.c     **** 
 27225              		.loc 1 5890 2 is_stmt 1 view .LVU7198
5890:src/xeq.c     **** 
 27226              		.loc 1 5890 31 is_stmt 0 view .LVU7199
 27227 011a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
5890:src/xeq.c     **** 
 27228              		.loc 1 5890 20 view .LVU7200
 27229 011c F27D     		ldrb	r2, [r6, #23]	@ zero_extendqisi2
5893:src/xeq.c     **** 	if (intm) {
 27230              		.loc 1 5893 4 view .LVU7201
 27231 011e 6479     		ldrb	r4, [r4, #5]	@ zero_extendqisi2
5890:src/xeq.c     **** 
 27232              		.loc 1 5890 31 view .LVU7202
 27233 0120 C3F38013 		ubfx	r3, r3, #6, #1
5890:src/xeq.c     **** 
 27234              		.loc 1 5890 20 view .LVU7203
 27235 0124 63F38612 		bfi	r2, r3, #6, #1
 27236 0128 F275     		strb	r2, [r6, #23]
5893:src/xeq.c     **** 	if (intm) {
 27237              		.loc 1 5893 2 is_stmt 1 view .LVU7204
 27238              	.LVL2146:
5894:src/xeq.c     **** 		while (i--) {
 27239              		.loc 1 5894 2 view .LVU7205
ARM GAS  /tmp/cciWh9P3.s 			page 698


5894:src/xeq.c     **** 		while (i--) {
 27240              		.loc 1 5894 5 is_stmt 0 view .LVU7206
 27241 012a B8F1000F 		cmp	r8, #0
 27242 012e 23D0     		beq	.L1974
5895:src/xeq.c     **** 			decNumber r;
 27243              		.loc 1 5895 9 is_stmt 1 view .LVU7207
5895:src/xeq.c     **** 			decNumber r;
 27244              		.loc 1 5895 11 is_stmt 0 view .LVU7208
 27245 0130 631E     		subs	r3, r4, #1
 27246              	.LVL2147:
5895:src/xeq.c     **** 			decNumber r;
 27247              		.loc 1 5895 9 view .LVU7209
 27248 0132 002C     		cmp	r4, #0
 27249 0134 3FF471AF 		beq	.L1929
 27250 0138 314D     		ldr	r5, .L1975+28
 27251 013a 6334     		adds	r4, r4, #99
 27252 013c 05EB0315 		add	r5, r5, r3, lsl #4
 27253 0140 05AE     		add	r6, sp, #20
 27254              	.LVL2148:
 27255              	.L1946:
 27256              	.LBB3572:
5896:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
 27257              		.loc 1 5896 4 is_stmt 1 view .LVU7210
5897:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
 27258              		.loc 1 5897 4 view .LVU7211
 27259 0142 3146     		mov	r1, r6
 27260 0144 2846     		mov	r0, r5
 27261 0146 FFF7FEFF 		bl	decimal128ToNumber
 27262              	.LVL2149:
5898:src/xeq.c     **** 		}
 27263              		.loc 1 5898 4 view .LVU7212
 27264 014a 3046     		mov	r0, r6
 27265 014c FFF7FEFF 		bl	intResult
 27266              	.LVL2150:
5898:src/xeq.c     **** 		}
 27267              		.loc 1 5898 4 is_stmt 0 view .LVU7213
 27268 0150 0246     		mov	r2, r0
 27269 0152 0B46     		mov	r3, r1
 27270              	.LBB3573:
 27271              	.LBB3574:
1236:src/xeq.c     **** }
 27272              		.loc 1 1236 8 view .LVU7214
 27273 0154 2046     		mov	r0, r4
 27274 0156 CDE90223 		strd	r2, [sp, #8]
 27275              	.LVL2151:
1236:src/xeq.c     **** }
 27276              		.loc 1 1236 8 view .LVU7215
 27277              	.LBE3574:
 27278              	.LBI3573:
1235:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 27279              		.loc 1 1235 6 is_stmt 1 view .LVU7216
 27280              	.LBB3575:
1236:src/xeq.c     **** }
 27281              		.loc 1 1236 2 view .LVU7217
1236:src/xeq.c     **** }
 27282              		.loc 1 1236 8 is_stmt 0 view .LVU7218
 27283 015a FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/cciWh9P3.s 			page 699


 27284              	.LVL2152:
1236:src/xeq.c     **** }
 27285              		.loc 1 1236 2 view .LVU7219
 27286 015e 0822     		movs	r2, #8
 27287 0160 013C     		subs	r4, r4, #1
 27288              	.LVL2153:
1236:src/xeq.c     **** }
 27289              		.loc 1 1236 2 view .LVU7220
 27290 0162 0DEB0201 		add	r1, sp, r2
 27291 0166 FFF7FEFF 		bl	xcopy
 27292              	.LVL2154:
1236:src/xeq.c     **** }
 27293              		.loc 1 1236 2 view .LVU7221
 27294              	.LBE3575:
 27295              	.LBE3573:
 27296              	.LBE3572:
5895:src/xeq.c     **** 			decNumber r;
 27297              		.loc 1 5895 9 is_stmt 1 view .LVU7222
 27298 016a 632C     		cmp	r4, #99
 27299 016c A5F11005 		sub	r5, r5, #16
 27300 0170 E7D1     		bne	.L1946
 27301              	.LBE3594:
 27302              	.LBE3564:
 27303              		.loc 1 5929 1 is_stmt 0 view .LVU7223
 27304 0172 0FB0     		add	sp, sp, #60
 27305              		.cfi_remember_state
 27306              		.cfi_def_cfa_offset 36
 27307              		@ sp needed
 27308 0174 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27309              	.LVL2155:
 27310              	.L1974:
 27311              		.cfi_restore_state
 27312              	.LBB3596:
 27313              	.LBB3595:
5901:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27314              		.loc 1 5901 7 is_stmt 1 view .LVU7224
5901:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27315              		.loc 1 5901 10 is_stmt 0 view .LVU7225
 27316 0178 B9F1000F 		cmp	r9, #0
 27317 017c 1AD1     		bne	.L1947
5905:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27318              		.loc 1 5905 9 is_stmt 1 view .LVU7226
5905:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27319              		.loc 1 5905 11 is_stmt 0 view .LVU7227
 27320 017e 631E     		subs	r3, r4, #1
 27321              	.LVL2156:
5905:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27322              		.loc 1 5905 9 view .LVU7228
 27323 0180 002C     		cmp	r4, #0
 27324 0182 3FF44AAF 		beq	.L1929
 27325 0186 1E4F     		ldr	r7, .L1975+28
 27326 0188 6334     		adds	r4, r4, #99
 27327 018a 07EB0317 		add	r7, r7, r3, lsl #4
 27328 018e 05AE     		add	r6, sp, #20
 27329              	.LVL2157:
 27330              	.L1950:
5906:src/xeq.c     **** 	}
ARM GAS  /tmp/cciWh9P3.s 			page 700


 27331              		.loc 1 5906 4 is_stmt 1 view .LVU7229
 27332              	.LBB3576:
 27333              	.LBI3576:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27334              		.loc 1 708 11 view .LVU7230
 27335              	.LBB3577:
 709:src/xeq.c     **** }
 27336              		.loc 1 709 2 view .LVU7231
 709:src/xeq.c     **** }
 27337              		.loc 1 709 9 is_stmt 0 view .LVU7232
 27338 0190 2046     		mov	r0, r4
 27339 0192 FFF7FEFF 		bl	get_reg_n
 27340              	.LVL2158:
 27341              	.LBE3577:
 27342              	.LBE3576:
 27343              	.LBB3579:
 27344              	.LBB3580:
 640:src/xeq.c     **** }
 27345              		.loc 1 640 24 view .LVU7233
 27346 0196 3146     		mov	r1, r6
 27347              	.LBE3580:
 27348              	.LBE3579:
 27349              	.LBB3582:
 27350              	.LBB3578:
 709:src/xeq.c     **** }
 27351              		.loc 1 709 9 view .LVU7234
 27352 0198 0546     		mov	r5, r0
 27353              	.LVL2159:
 709:src/xeq.c     **** }
 27354              		.loc 1 709 9 view .LVU7235
 27355              	.LBE3578:
 27356              	.LBE3582:
 27357              	.LBB3583:
 27358              	.LBI3579:
 638:src/xeq.c     **** 	decNumber temp;
 27359              		.loc 1 638 6 is_stmt 1 view .LVU7236
 27360              	.LBB3581:
 639:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 27361              		.loc 1 639 2 view .LVU7237
 640:src/xeq.c     **** }
 27362              		.loc 1 640 2 view .LVU7238
 640:src/xeq.c     **** }
 27363              		.loc 1 640 24 is_stmt 0 view .LVU7239
 27364 019a 3846     		mov	r0, r7
 27365              	.LVL2160:
 640:src/xeq.c     **** }
 27366              		.loc 1 640 24 view .LVU7240
 27367 019c FFF7FEFF 		bl	decimal128ToNumber
 27368              	.LVL2161:
 27369 01a0 013C     		subs	r4, r4, #1
 27370              	.LVL2162:
 640:src/xeq.c     **** }
 27371              		.loc 1 640 24 view .LVU7241
 27372 01a2 0146     		mov	r1, r0
 640:src/xeq.c     **** }
 27373              		.loc 1 640 2 view .LVU7242
 27374 01a4 2846     		mov	r0, r5
ARM GAS  /tmp/cciWh9P3.s 			page 701


 27375 01a6 FFF7FEFF 		bl	packed_from_number
 27376              	.LVL2163:
 640:src/xeq.c     **** }
 27377              		.loc 1 640 2 view .LVU7243
 27378              	.LBE3581:
 27379              	.LBE3583:
5905:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27380              		.loc 1 5905 9 is_stmt 1 view .LVU7244
5905:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27381              		.loc 1 5905 9 is_stmt 0 view .LVU7245
 27382 01aa 632C     		cmp	r4, #99
 27383 01ac A7F11007 		sub	r7, r7, #16
 27384 01b0 EED1     		bne	.L1950
 27385 01b2 32E7     		b	.L1929
 27386              	.LVL2164:
 27387              	.L1947:
5902:src/xeq.c     **** 	}
 27388              		.loc 1 5902 3 is_stmt 1 view .LVU7246
 27389              	.LBB3584:
 27390              	.LBB3585:
 27391              	.LBB3586:
 27392              	.LBB3587:
 932:src/xeq.c     **** }
 27393              		.loc 1 932 24 is_stmt 0 view .LVU7247
 27394 01b4 3B68     		ldr	r3, [r7]
 27395              	.LBE3587:
 27396              	.LBE3586:
 27397              	.LBE3585:
 27398              	.LBE3584:
5902:src/xeq.c     **** 	}
 27399              		.loc 1 5902 3 view .LVU7248
 27400 01b6 DAF80000 		ldr	r0, [r10]
 27401              	.LVL2165:
 27402              	.LBB3593:
 27403              	.LBI3584:
1350:src/xeq.c     **** 	if (is_dblmode())
 27404              		.loc 1 1350 6 is_stmt 1 view .LVU7249
 27405              	.LBB3592:
1351:src/xeq.c     **** 		n <<= 1;
 27406              		.loc 1 1351 2 view .LVU7250
 27407              	.LBB3590:
 27408              	.LBI3586:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27409              		.loc 1 931 5 view .LVU7251
 27410              	.LBB3588:
 932:src/xeq.c     **** }
 27411              		.loc 1 932 2 view .LVU7252
 932:src/xeq.c     **** }
 27412              		.loc 1 932 24 is_stmt 0 view .LVU7253
 27413 01ba B3F8E827 		ldrh	r2, [r3, #2024]
 27414              	.LBE3588:
 27415              	.LBE3590:
1353:src/xeq.c     **** }
 27416              		.loc 1 1353 2 view .LVU7254
 27417 01be 1049     		ldr	r1, .L1975+28
 27418              	.LBB3591:
 27419              	.LBB3589:
ARM GAS  /tmp/cciWh9P3.s 			page 702


 932:src/xeq.c     **** }
 27420              		.loc 1 932 24 view .LVU7255
 27421 01c0 44F20103 		movw	r3, #16385
 27422              	.LBE3589:
 27423              	.LBE3591:
1351:src/xeq.c     **** 		n <<= 1;
 27424              		.loc 1 1351 5 view .LVU7256
 27425 01c4 1340     		ands	r3, r3, r2
 27426 01c6 B3F5804F 		cmp	r3, #16384
1352:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 27427              		.loc 1 1352 3 is_stmt 1 view .LVU7257
1352:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 27428              		.loc 1 1352 5 is_stmt 0 view .LVU7258
 27429 01ca 08BF     		it	eq
 27430 01cc 6400     		lsleq	r4, r4, #1
 27431              	.LVL2166:
1353:src/xeq.c     **** }
 27432              		.loc 1 1353 2 is_stmt 1 view .LVU7259
 27433 01ce E200     		lsls	r2, r4, #3
 27434 01d0 FFF7FEFF 		bl	xcopy
 27435              	.LVL2167:
1354:src/xeq.c     **** 
 27436              		.loc 1 1354 1 is_stmt 0 view .LVU7260
 27437 01d4 21E7     		b	.L1929
 27438              	.LVL2168:
 27439              	.L1971:
1354:src/xeq.c     **** 
 27440              		.loc 1 1354 1 view .LVU7261
 27441              	.LBE3592:
 27442              	.LBE3593:
5858:src/xeq.c     **** 		else
 27443              		.loc 1 5858 4 is_stmt 1 view .LVU7262
 27444 01d6 FFF7FEFF 		bl	setlastXY
 27445              	.LVL2169:
 27446 01da 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27447 01dc 61E7     		b	.L1933
 27448              	.LVL2170:
 27449              	.L1973:
5858:src/xeq.c     **** 		else
 27450              		.loc 1 5858 4 is_stmt 0 view .LVU7263
 27451 01de 074E     		ldr	r6, .L1975+24
 27452 01e0 83E7     		b	.L1937
 27453              	.L1976:
 27454 01e2 00BF     		.align	2
 27455              	.L1975:
 27456 01e4 00000000 		.word	XromParams
 27457 01e8 00000000 		.word	Error
 27458 01ec 00000000 		.word	main_ram
 27459 01f0 00000000 		.word	UserLocalRegs
 27460 01f4 00000000 		.word	RetStk
 27461 01f8 FEBFF78F 		.word	-1879588866
 27462 01fc 00000000 		.word	StateWhileOn
 27463 0200 00000000 		.word	XromLocal
 27464 0204 00000000 		.word	StackBase
 27465              	.LBE3595:
 27466              	.LBE3596:
 27467              		.cfi_endproc
ARM GAS  /tmp/cciWh9P3.s 			page 703


 27468              	.LFE265:
 27470              		.section	.text.cmdconverged,"ax",%progbits
 27471              		.align	1
 27472              		.p2align 2,,3
 27473              		.global	cmdconverged
 27474              		.syntax unified
 27475              		.thumb
 27476              		.thumb_func
 27477              		.fpu fpv4-sp-d16
 27479              	cmdconverged:
 27480              	.LVL2171:
 27481              	.LFB266:
5930:src/xeq.c     **** 
5931:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5932:src/xeq.c     **** /*
5933:src/xeq.c     ****  *  Allow access to command argument from XROM
5934:src/xeq.c     ****  */
5935:src/xeq.c     **** void cmdxarg(unsigned int arg, enum rarg op) {
5936:src/xeq.c     **** 	set_reg_n_int_sgn(arg, XromArg, 0);
5937:src/xeq.c     **** }
5938:src/xeq.c     **** #endif
5939:src/xeq.c     **** 
5940:src/xeq.c     **** 
5941:src/xeq.c     **** /* A slightly obtuse command to check for convergence.
5942:src/xeq.c     ****  * Arguments are organised bitwise in this form:
5943:src/xeq.c     ****  *
5944:src/xeq.c     ****  *	SMMTT
5945:src/xeq.c     ****  *
5946:src/xeq.c     ****  * where:
5947:src/xeq.c     ****  *	TT is the tolerance parameter:
5948:src/xeq.c     ****  *
5949:src/xeq.c     ****  *	  	0	1e-14 tolerance
5950:src/xeq.c     ****  *	  	1	1e-24 tolerance
5951:src/xeq.c     ****  *	  	2	1e-32 tolerance
5952:src/xeq.c     ****  *	  	3	choose the best tolerance for the current modes
5953:src/xeq.c     ****  *			for user mode this means 0 for single precision and 2 for double precision
5954:src/xeq.c     ****  *
5955:src/xeq.c     ****  *	MM is the mode parameter:
5956:src/xeq.c     ****  *	  	0	compare real X & Y relatively
5957:src/xeq.c     ****  *	  	1	compare real X & Y absolutely
5958:src/xeq.c     ****  *	  	2	compare complex X/Y & Z/T for absolute difference
5959:src/xeq.c     ****  *	  	3	compare real X & Y relatively
5960:src/xeq.c     ****  *
5961:src/xeq.c     ****  *	S is the special number validation:
5962:src/xeq.c     ****  *		0	Nan & infinities are considered converged
5963:src/xeq.c     ****  *		1	NaN & infinities are not considered converged
5964:src/xeq.c     ****  *
5965:src/xeq.c     ****  * In integer mode, the arguemnt is completely ignored and an equality
5966:src/xeq.c     ****  * comparision is undertaken instead.
5967:src/xeq.c     ****  */
5968:src/xeq.c     **** static const decNumber * const convergence_tolerances[3] = {
5969:src/xeq.c     **** 	&const_1e_14, &const_1e_24, &const_1e_32
5970:src/xeq.c     **** };
5971:src/xeq.c     **** 
5972:src/xeq.c     **** void cmdconverged(unsigned int arg, enum rarg cmd) {
 27482              		.loc 1 5972 52 is_stmt 1 view -0
 27483              		.cfi_startproc
ARM GAS  /tmp/cciWh9P3.s 			page 704


 27484              		@ args = 0, pretend = 0, frame = 216
 27485              		@ frame_needed = 0, uses_anonymous_args = 0
5973:src/xeq.c     **** 	const decNumber *tolerance;
 27486              		.loc 1 5973 2 view .LVU7265
5974:src/xeq.c     **** 	unsigned int tol = arg & 3;
 27487              		.loc 1 5974 2 view .LVU7266
5975:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
5976:src/xeq.c     **** 	const int specials = arg & 0x10;
5977:src/xeq.c     **** 	const int complex = mode == 2;
5978:src/xeq.c     **** 	const int absolute = mode == 1;
5979:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
5980:src/xeq.c     **** 	int res;
5981:src/xeq.c     **** 
5982:src/xeq.c     **** 	if (is_intmode()) {
 27488              		.loc 1 5982 6 is_stmt 0 view .LVU7267
 27489 0000 374B     		ldr	r3, .L1992
5972:src/xeq.c     **** 	const decNumber *tolerance;
 27490              		.loc 1 5972 52 view .LVU7268
 27491 0002 70B5     		push	{r4, r5, r6, lr}
 27492              		.cfi_def_cfa_offset 16
 27493              		.cfi_offset 4, -16
 27494              		.cfi_offset 5, -12
 27495              		.cfi_offset 6, -8
 27496              		.cfi_offset 14, -4
 27497              		.loc 1 5982 6 view .LVU7269
 27498 0004 1A68     		ldr	r2, [r3]
 27499 0006 92F8E817 		ldrb	r1, [r2, #2024]	@ zero_extendqisi2
 27500              	.LVL2172:
5975:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
 27501              		.loc 1 5975 2 is_stmt 1 view .LVU7270
5976:src/xeq.c     **** 	const int complex = mode == 2;
 27502              		.loc 1 5976 2 view .LVU7271
5977:src/xeq.c     **** 	const int absolute = mode == 1;
 27503              		.loc 1 5977 2 view .LVU7272
5978:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
 27504              		.loc 1 5978 2 view .LVU7273
5979:src/xeq.c     **** 	int res;
 27505              		.loc 1 5979 2 view .LVU7274
5980:src/xeq.c     **** 
 27506              		.loc 1 5980 2 view .LVU7275
 27507              		.loc 1 5982 2 view .LVU7276
 27508              		.loc 1 5982 5 is_stmt 0 view .LVU7277
 27509 000a CB07     		lsls	r3, r1, #31
5972:src/xeq.c     **** 	const decNumber *tolerance;
 27510              		.loc 1 5972 52 view .LVU7278
 27511 000c B8B0     		sub	sp, sp, #224
 27512              		.cfi_def_cfa_offset 240
 27513              		.loc 1 5982 5 view .LVU7279
 27514 000e 35D4     		bmi	.L1988
 27515 0010 00F00303 		and	r3, r0, #3
 27516              	.LVL2173:
5983:src/xeq.c     **** 		do_tst(regY_idx, TST_EQ);
5984:src/xeq.c     **** 		return;
5985:src/xeq.c     **** 	}
5986:src/xeq.c     **** 
5987:src/xeq.c     **** 	if (tol == 3) {
 27517              		.loc 1 5987 5 view .LVU7280
ARM GAS  /tmp/cciWh9P3.s 			page 705


 27518 0014 032B     		cmp	r3, #3
 27519 0016 0446     		mov	r4, r0
 27520 0018 00F01005 		and	r5, r0, #16
 27521              	.LVL2174:
 27522              		.loc 1 5987 2 is_stmt 1 view .LVU7281
 27523              		.loc 1 5987 5 is_stmt 0 view .LVU7282
 27524 001c 24D0     		beq	.L1980
 27525 001e 314A     		ldr	r2, .L1992+4
 27526 0020 52F82360 		ldr	r6, [r2, r3, lsl #2]
 27527              	.LVL2175:
 27528              	.L1981:
5988:src/xeq.c     **** 		if (is_dblmode())
5989:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
5990:src/xeq.c     **** 		else
5991:src/xeq.c     **** 			tol = 0;
5992:src/xeq.c     **** 	}
5993:src/xeq.c     **** 	tolerance = convergence_tolerances[tol];
 27529              		.loc 1 5993 2 is_stmt 1 view .LVU7283
5994:src/xeq.c     **** 
5995:src/xeq.c     **** 	getXYZT(&x, &y, &z, &t);
 27530              		.loc 1 5995 2 view .LVU7284
 27531              	.LBB3597:
 27532              	.LBI3597:
 856:src/xeq.c     **** 	getXYZ(x, y, z);
 27533              		.loc 1 856 6 view .LVU7285
 27534              	.LBB3598:
 857:src/xeq.c     **** 	getT(t);
 27535              		.loc 1 857 2 view .LVU7286
 27536 0024 1DAA     		add	r2, sp, #116
 27537              	.LVL2176:
 857:src/xeq.c     **** 	getT(t);
 27538              		.loc 1 857 2 is_stmt 0 view .LVU7287
 27539 0026 14A9     		add	r1, sp, #80
 27540              	.LVL2177:
 857:src/xeq.c     **** 	getT(t);
 27541              		.loc 1 857 2 view .LVU7288
 27542 0028 0BA8     		add	r0, sp, #44
 27543              	.LVL2178:
 857:src/xeq.c     **** 	getT(t);
 27544              		.loc 1 857 2 view .LVU7289
 27545 002a FFF7FEFF 		bl	getXYZ
 27546              	.LVL2179:
 858:src/xeq.c     **** }
 27547              		.loc 1 858 2 is_stmt 1 view .LVU7290
 27548              	.LBB3599:
 27549              	.LBI3599:
 830:src/xeq.c     **** 	getRegister(t, regT_idx);
 27550              		.loc 1 830 13 view .LVU7291
 27551              	.LBB3600:
 831:src/xeq.c     **** }
 27552              		.loc 1 831 2 view .LVU7292
 27553 002e 02A8     		add	r0, sp, #8
 27554              	.LVL2180:
 831:src/xeq.c     **** }
 27555              		.loc 1 831 2 is_stmt 0 view .LVU7293
 27556 0030 6721     		movs	r1, #103
 27557 0032 FFF7FEFF 		bl	getRegister
ARM GAS  /tmp/cciWh9P3.s 			page 706


 27558              	.LVL2181:
 831:src/xeq.c     **** }
 27559              		.loc 1 831 2 view .LVU7294
 27560              	.LBE3600:
 27561              	.LBE3599:
 27562              	.LBE3598:
 27563              	.LBE3597:
5996:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || decNumberIsSpecial(&y))
 27564              		.loc 1 5996 2 is_stmt 1 view .LVU7295
 27565              		.loc 1 5996 29 is_stmt 0 view .LVU7296
 27566 0036 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 27567 003a 9DF85820 		ldrb	r2, [sp, #88]	@ zero_extendqisi2
 27568 003e 1343     		orrs	r3, r3, r2
 27569 0040 13F0700F 		tst	r3, #112
 27570 0044 0BD1     		bne	.L1982
5975:src/xeq.c     **** 	const int specials = arg & 0x10;
 27571              		.loc 1 5975 21 view .LVU7297
 27572 0046 C4F38104 		ubfx	r4, r4, #2, #2
 27573              	.LVL2182:
5997:src/xeq.c     **** 		res = specials;
5998:src/xeq.c     **** 	else if (complex) {
 27574              		.loc 1 5998 7 is_stmt 1 view .LVU7298
 27575              		.loc 1 5998 10 is_stmt 0 view .LVU7299
 27576 004a 022C     		cmp	r4, #2
 27577 004c 26D0     		beq	.L1989
5999:src/xeq.c     **** 		if (decNumberIsSpecial(&z) || decNumberIsSpecial(&t))
6000:src/xeq.c     **** 			res = specials;
6001:src/xeq.c     **** 		else {
6002:src/xeq.c     **** 			cmplxSubtract(&a, &b, &x, &y, &z, &t);
6003:src/xeq.c     **** 			cmplxR(&x, &a, &b);
6004:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
6005:src/xeq.c     **** 		}
6006:src/xeq.c     **** 	} else {
6007:src/xeq.c     **** 		if (absolute)
 27578              		.loc 1 6007 3 is_stmt 1 view .LVU7300
 27579              		.loc 1 6007 6 is_stmt 0 view .LVU7301
 27580 004e 012C     		cmp	r4, #1
6008:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 27581              		.loc 1 6008 10 view .LVU7302
 27582 0050 3246     		mov	r2, r6
 27583 0052 14A9     		add	r1, sp, #80
 27584 0054 0BA8     		add	r0, sp, #44
6007:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 27585              		.loc 1 6007 6 view .LVU7303
 27586 0056 3ED0     		beq	.L1990
6009:src/xeq.c     **** 		else
6010:src/xeq.c     **** 			res = relative_error(&x, &y, tolerance);
 27587              		.loc 1 6010 4 is_stmt 1 view .LVU7304
 27588              		.loc 1 6010 10 is_stmt 0 view .LVU7305
 27589 0058 FFF7FEFF 		bl	relative_error
 27590              	.LVL2183:
 27591 005c 0546     		mov	r5, r0
 27592              	.LVL2184:
 27593              	.L1982:
6011:src/xeq.c     **** 	}
6012:src/xeq.c     **** 	fin_tst(res);
 27594              		.loc 1 6012 2 is_stmt 1 discriminator 1 view .LVU7306
ARM GAS  /tmp/cciWh9P3.s 			page 707


 27595 005e 2846     		mov	r0, r5
 27596 0060 FFF7FEFF 		bl	fin_tst
 27597              	.LVL2185:
6013:src/xeq.c     **** }
 27598              		.loc 1 6013 1 is_stmt 0 discriminator 1 view .LVU7307
 27599 0064 38B0     		add	sp, sp, #224
 27600              		.cfi_remember_state
 27601              		.cfi_def_cfa_offset 16
 27602              		@ sp needed
 27603 0066 70BD     		pop	{r4, r5, r6, pc}
 27604              	.LVL2186:
 27605              	.L1980:
 27606              		.cfi_restore_state
5988:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 27607              		.loc 1 5988 3 is_stmt 1 view .LVU7308
 27608              	.LBB3601:
 27609              	.LBI3601:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27610              		.loc 1 931 5 view .LVU7309
 27611              	.LBB3602:
 932:src/xeq.c     **** }
 27612              		.loc 1 932 2 view .LVU7310
 932:src/xeq.c     **** }
 27613              		.loc 1 932 24 is_stmt 0 view .LVU7311
 27614 0068 B2F8E827 		ldrh	r2, [r2, #2024]
 27615 006c 44F20103 		movw	r3, #16385
 27616              	.LVL2187:
 932:src/xeq.c     **** }
 27617              		.loc 1 932 24 view .LVU7312
 27618              	.LBE3602:
 27619              	.LBE3601:
5988:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 27620              		.loc 1 5988 6 view .LVU7313
 27621 0070 1340     		ands	r3, r3, r2
 27622 0072 B3F5804F 		cmp	r3, #16384
 27623 0076 07D0     		beq	.L1991
 27624 0078 1B4E     		ldr	r6, .L1992+8
 27625 007a D3E7     		b	.L1981
 27626              	.LVL2188:
 27627              	.L1988:
5983:src/xeq.c     **** 		return;
 27628              		.loc 1 5983 3 is_stmt 1 view .LVU7314
 27629 007c 0021     		movs	r1, #0
 27630 007e 6520     		movs	r0, #101
 27631              	.LVL2189:
5983:src/xeq.c     **** 		return;
 27632              		.loc 1 5983 3 is_stmt 0 view .LVU7315
 27633 0080 FFF7FEFF 		bl	do_tst
 27634              	.LVL2190:
5984:src/xeq.c     **** 	}
 27635              		.loc 1 5984 3 is_stmt 1 view .LVU7316
 27636              		.loc 1 6013 1 is_stmt 0 view .LVU7317
 27637 0084 38B0     		add	sp, sp, #224
 27638              		.cfi_remember_state
 27639              		.cfi_def_cfa_offset 16
 27640              		@ sp needed
 27641 0086 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/cciWh9P3.s 			page 708


 27642              	.LVL2191:
 27643              	.L1991:
 27644              		.cfi_restore_state
5989:src/xeq.c     **** 		else
 27645              		.loc 1 5989 4 is_stmt 1 view .LVU7318
5989:src/xeq.c     **** 		else
 27646              		.loc 1 5989 27 is_stmt 0 view .LVU7319
 27647 0088 184B     		ldr	r3, .L1992+12
5989:src/xeq.c     **** 		else
 27648              		.loc 1 5989 57 view .LVU7320
 27649 008a 194E     		ldr	r6, .L1992+16
5989:src/xeq.c     **** 		else
 27650              		.loc 1 5989 27 view .LVU7321
 27651 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
5989:src/xeq.c     **** 		else
 27652              		.loc 1 5989 57 view .LVU7322
 27653 008e 194A     		ldr	r2, .L1992+20
 27654 0090 03F08803 		and	r3, r3, #136
 27655 0094 802B     		cmp	r3, #128
 27656 0096 08BF     		it	eq
 27657 0098 1646     		moveq	r6, r2
 27658 009a C3E7     		b	.L1981
 27659              	.LVL2192:
 27660              	.L1989:
5999:src/xeq.c     **** 			res = specials;
 27661              		.loc 1 5999 3 is_stmt 1 view .LVU7323
5999:src/xeq.c     **** 			res = specials;
 27662              		.loc 1 5999 30 is_stmt 0 view .LVU7324
 27663 009c 9DF87C30 		ldrb	r3, [sp, #124]	@ zero_extendqisi2
 27664 00a0 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 27665 00a4 1343     		orrs	r3, r3, r2
 27666 00a6 13F0700F 		tst	r3, #112
 27667 00aa D8D1     		bne	.L1982
6002:src/xeq.c     **** 			cmplxR(&x, &a, &b);
 27668              		.loc 1 6002 4 is_stmt 1 view .LVU7325
 27669 00ac 02AB     		add	r3, sp, #8
 27670 00ae 0193     		str	r3, [sp, #4]
 27671 00b0 1DAB     		add	r3, sp, #116
 27672 00b2 0093     		str	r3, [sp]
 27673 00b4 2FA9     		add	r1, sp, #188
 27674 00b6 14AB     		add	r3, sp, #80
 27675 00b8 26A8     		add	r0, sp, #152
 27676 00ba 0BAA     		add	r2, sp, #44
 27677 00bc FFF7FEFF 		bl	cmplxSubtract
 27678              	.LVL2193:
6003:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
 27679              		.loc 1 6003 4 view .LVU7326
 27680 00c0 2FAA     		add	r2, sp, #188
 27681 00c2 26A9     		add	r1, sp, #152
 27682 00c4 0BA8     		add	r0, sp, #44
 27683 00c6 FFF7FEFF 		bl	cmplxR
 27684              	.LVL2194:
6004:src/xeq.c     **** 		}
 27685              		.loc 1 6004 4 view .LVU7327
6004:src/xeq.c     **** 		}
 27686              		.loc 1 6004 10 is_stmt 0 view .LVU7328
 27687 00ca 3146     		mov	r1, r6
ARM GAS  /tmp/cciWh9P3.s 			page 709


 27688 00cc 0BA8     		add	r0, sp, #44
 27689 00ce FFF7FEFF 		bl	dn_lt
 27690              	.LVL2195:
 27691 00d2 0546     		mov	r5, r0
 27692              	.LVL2196:
6004:src/xeq.c     **** 		}
 27693              		.loc 1 6004 10 view .LVU7329
 27694 00d4 C3E7     		b	.L1982
 27695              	.LVL2197:
 27696              	.L1990:
6008:src/xeq.c     **** 		else
 27697              		.loc 1 6008 4 is_stmt 1 view .LVU7330
6008:src/xeq.c     **** 		else
 27698              		.loc 1 6008 10 is_stmt 0 view .LVU7331
 27699 00d6 FFF7FEFF 		bl	absolute_error
 27700              	.LVL2198:
 27701 00da 0546     		mov	r5, r0
 27702              	.LVL2199:
6008:src/xeq.c     **** 		else
 27703              		.loc 1 6008 10 view .LVU7332
 27704 00dc BFE7     		b	.L1982
 27705              	.L1993:
 27706 00de 00BF     		.align	2
 27707              	.L1992:
 27708 00e0 00000000 		.word	main_ram
 27709 00e4 00000000 		.word	.LANCHOR7
 27710 00e8 00000000 		.word	const_1e_14
 27711 00ec 00000000 		.word	XromParams
 27712 00f0 00000000 		.word	const_1e_32
 27713 00f4 00000000 		.word	const_1e_24
 27714              		.cfi_endproc
 27715              	.LFE266:
 27717              		.section	.text.cmdshuffle,"ax",%progbits
 27718              		.align	1
 27719              		.p2align 2,,3
 27720              		.global	cmdshuffle
 27721              		.syntax unified
 27722              		.thumb
 27723              		.thumb_func
 27724              		.fpu fpv4-sp-d16
 27726              	cmdshuffle:
 27727              	.LVL2200:
 27728              	.LFB267:
6014:src/xeq.c     **** 
6015:src/xeq.c     **** void cmdshuffle(unsigned int arg, enum rarg cmd) {
 27729              		.loc 1 6015 50 is_stmt 1 view -0
 27730              		.cfi_startproc
 27731              		@ args = 0, pretend = 0, frame = 64
 27732              		@ frame_needed = 0, uses_anonymous_args = 0
6016:src/xeq.c     **** 	REGISTER xyzt[4];
 27733              		.loc 1 6016 2 view .LVU7334
6017:src/xeq.c     **** 	int i;
 27734              		.loc 1 6017 2 view .LVU7335
6018:src/xeq.c     **** 
6019:src/xeq.c     **** 	set_lift();
 27735              		.loc 1 6019 2 view .LVU7336
 27736              	.LBB3603:
ARM GAS  /tmp/cciWh9P3.s 			page 710


 27737              	.LBI3603:
 747:src/xeq.c     ****     State2.state_lift = 1;
 27738              		.loc 1 747 6 view .LVU7337
 27739              	.LBB3604:
 748:src/xeq.c     **** }
 27740              		.loc 1 748 5 view .LVU7338
 27741              	.LBE3604:
 27742              	.LBE3603:
6015:src/xeq.c     **** 	REGISTER xyzt[4];
 27743              		.loc 1 6015 50 is_stmt 0 view .LVU7339
 27744 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 27745              		.cfi_def_cfa_offset 24
 27746              		.cfi_offset 4, -24
 27747              		.cfi_offset 5, -20
 27748              		.cfi_offset 6, -16
 27749              		.cfi_offset 7, -12
 27750              		.cfi_offset 8, -8
 27751              		.cfi_offset 14, -4
 27752              	.LBB3609:
 27753              	.LBB3605:
 748:src/xeq.c     **** }
 27754              		.loc 1 748 23 view .LVU7340
 27755 0004 1F4A     		ldr	r2, .L2004
 27756 0006 204E     		ldr	r6, .L2004+4
 27757 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 27758              	.LBE3605:
 27759              	.LBE3609:
6015:src/xeq.c     **** 	REGISTER xyzt[4];
 27760              		.loc 1 6015 50 view .LVU7341
 27761 000a 90B0     		sub	sp, sp, #64
 27762              		.cfi_def_cfa_offset 88
 27763              	.LBB3610:
 27764              	.LBB3606:
 748:src/xeq.c     **** }
 27765              		.loc 1 748 23 view .LVU7342
 27766 000c 43F04003 		orr	r3, r3, #64
 27767              	.LBE3606:
 27768              	.LBE3610:
6015:src/xeq.c     **** 	REGISTER xyzt[4];
 27769              		.loc 1 6015 50 view .LVU7343
 27770 0010 0546     		mov	r5, r0
 27771              	.LBB3611:
 27772              	.LBB3607:
 748:src/xeq.c     **** }
 27773              		.loc 1 748 23 view .LVU7344
 27774 0012 D375     		strb	r3, [r2, #23]
 27775              	.LBE3607:
 27776              	.LBE3611:
6020:src/xeq.c     **** 	for (i=0; i<4; i++)
 27777              		.loc 1 6020 2 is_stmt 1 view .LVU7345
 27778              	.LVL2201:
 27779              		.loc 1 6020 12 view .LVU7346
 27780 0014 6F46     		mov	r7, sp
 27781              	.LBB3612:
 27782              	.LBB3608:
 748:src/xeq.c     **** }
 27783              		.loc 1 748 23 is_stmt 0 view .LVU7347
ARM GAS  /tmp/cciWh9P3.s 			page 711


 27784 0016 6424     		movs	r4, #100
 27785              	.LBE3608:
 27786              	.LBE3612:
 27787              	.LBB3613:
 27788              	.LBB3614:
 27789              	.LBB3615:
 27790              	.LBB3616:
 932:src/xeq.c     **** }
 27791              		.loc 1 932 24 view .LVU7348
 27792 0018 44F20108 		movw	r8, #16385
 27793              	.LVL2202:
 27794              	.L1996:
 932:src/xeq.c     **** }
 27795              		.loc 1 932 24 view .LVU7349
 27796              	.LBE3616:
 27797              	.LBE3615:
 27798              	.LBE3614:
 27799              	.LBE3613:
6021:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27800              		.loc 1 6021 3 is_stmt 1 discriminator 3 view .LVU7350
 27801              	.LBB3623:
 27802              	.LBI3623:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27803              		.loc 1 708 11 discriminator 3 view .LVU7351
 27804              	.LBB3624:
 709:src/xeq.c     **** }
 27805              		.loc 1 709 2 discriminator 3 view .LVU7352
 709:src/xeq.c     **** }
 27806              		.loc 1 709 9 is_stmt 0 discriminator 3 view .LVU7353
 27807 001c 2046     		mov	r0, r4
 27808 001e FFF7FEFF 		bl	get_reg_n
 27809              	.LVL2203:
 709:src/xeq.c     **** }
 27810              		.loc 1 709 9 discriminator 3 view .LVU7354
 27811              	.LBE3624:
 27812              	.LBE3623:
 27813              	.LBB3626:
 27814              	.LBB3621:
 27815              	.LBB3619:
 27816              	.LBB3617:
 932:src/xeq.c     **** }
 27817              		.loc 1 932 24 discriminator 3 view .LVU7355
 27818 0022 3368     		ldr	r3, [r6]
 27819 0024 B3F8E837 		ldrh	r3, [r3, #2024]
 27820              	.LBE3617:
 27821              	.LBE3619:
 717:src/xeq.c     **** }
 27822              		.loc 1 717 2 discriminator 3 view .LVU7356
 27823 0028 08EA0303 		and	r3, r8, r3
 27824 002c B3F5804F 		cmp	r3, #16384
 27825              	.LBE3621:
 27826              	.LBE3626:
 27827              	.LBB3627:
 27828              	.LBB3625:
 709:src/xeq.c     **** }
 27829              		.loc 1 709 9 discriminator 3 view .LVU7357
 27830 0030 0146     		mov	r1, r0
ARM GAS  /tmp/cciWh9P3.s 			page 712


 27831              	.LVL2204:
 709:src/xeq.c     **** }
 27832              		.loc 1 709 9 discriminator 3 view .LVU7358
 27833              	.LBE3625:
 27834              	.LBE3627:
 27835              	.LBB3628:
 27836              	.LBI3613:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 27837              		.loc 1 716 6 is_stmt 1 discriminator 3 view .LVU7359
 27838              	.LBB3622:
 717:src/xeq.c     **** }
 27839              		.loc 1 717 2 discriminator 3 view .LVU7360
 27840              	.LBB3620:
 27841              	.LBI3615:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27842              		.loc 1 931 5 discriminator 3 view .LVU7361
 27843              	.LBB3618:
 932:src/xeq.c     **** }
 27844              		.loc 1 932 2 discriminator 3 view .LVU7362
 27845              	.LBE3618:
 27846              	.LBE3620:
 717:src/xeq.c     **** }
 27847              		.loc 1 717 2 is_stmt 0 discriminator 3 view .LVU7363
 27848 0032 0CBF     		ite	eq
 27849 0034 1022     		moveq	r2, #16
 27850 0036 0822     		movne	r2, #8
 27851 0038 3846     		mov	r0, r7
 27852              	.LVL2205:
 717:src/xeq.c     **** }
 27853              		.loc 1 717 2 discriminator 3 view .LVU7364
 27854 003a 0134     		adds	r4, r4, #1
 27855              	.LVL2206:
 717:src/xeq.c     **** }
 27856              		.loc 1 717 2 discriminator 3 view .LVU7365
 27857 003c FFF7FEFF 		bl	xcopy
 27858              	.LVL2207:
 717:src/xeq.c     **** }
 27859              		.loc 1 717 2 discriminator 3 view .LVU7366
 27860              	.LBE3622:
 27861              	.LBE3628:
6020:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27862              		.loc 1 6020 17 is_stmt 1 discriminator 3 view .LVU7367
6020:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27863              		.loc 1 6020 12 discriminator 3 view .LVU7368
6020:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 27864              		.loc 1 6020 2 is_stmt 0 discriminator 3 view .LVU7369
 27865 0040 682C     		cmp	r4, #104
 27866 0042 07F11007 		add	r7, r7, #16
 27867 0046 E9D1     		bne	.L1996
 27868 0048 6424     		movs	r4, #100
 27869              	.LBB3629:
 27870              	.LBB3630:
 27871              	.LBB3631:
 27872              	.LBB3632:
 932:src/xeq.c     **** }
 27873              		.loc 1 932 24 view .LVU7370
 27874 004a 44F20107 		movw	r7, #16385
ARM GAS  /tmp/cciWh9P3.s 			page 713


 27875              	.L1998:
 27876              	.LVL2208:
 932:src/xeq.c     **** }
 27877              		.loc 1 932 24 view .LVU7371
 27878              	.LBE3632:
 27879              	.LBE3631:
 27880              	.LBE3630:
 27881              	.LBE3629:
6022:src/xeq.c     **** 
6023:src/xeq.c     **** 	for (i=0; i<4; i++) {
6024:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27882              		.loc 1 6024 3 is_stmt 1 view .LVU7372
 27883              	.LBB3639:
 27884              	.LBI3639:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27885              		.loc 1 708 11 view .LVU7373
 27886              	.LBB3640:
 709:src/xeq.c     **** }
 27887              		.loc 1 709 2 view .LVU7374
 709:src/xeq.c     **** }
 27888              		.loc 1 709 9 is_stmt 0 view .LVU7375
 27889 004e 2046     		mov	r0, r4
 27890 0050 FFF7FEFF 		bl	get_reg_n
 27891              	.LVL2209:
 709:src/xeq.c     **** }
 27892              		.loc 1 709 9 view .LVU7376
 27893              	.LBE3640:
 27894              	.LBE3639:
 27895              	.LBB3641:
 27896              	.LBB3637:
 27897              	.LBB3635:
 27898              	.LBB3633:
 932:src/xeq.c     **** }
 27899              		.loc 1 932 24 view .LVU7377
 27900 0054 3368     		ldr	r3, [r6]
 27901 0056 B3F8E837 		ldrh	r3, [r3, #2024]
 27902              	.LBE3633:
 27903              	.LBE3635:
 717:src/xeq.c     **** }
 27904              		.loc 1 717 2 view .LVU7378
 27905 005a 3B40     		ands	r3, r3, r7
 27906 005c B3F5804F 		cmp	r3, #16384
 27907              	.LBE3637:
 27908              	.LBE3641:
 27909              		.loc 1 6024 36 view .LVU7379
 27910 0060 05F00301 		and	r1, r5, #3
 27911              	.LVL2210:
 27912              	.LBB3642:
 27913              	.LBI3629:
 716:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 27914              		.loc 1 716 6 is_stmt 1 view .LVU7380
 27915              	.LBB3638:
 717:src/xeq.c     **** }
 27916              		.loc 1 717 2 view .LVU7381
 27917              	.LBB3636:
 27918              	.LBI3631:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/cciWh9P3.s 			page 714


 27919              		.loc 1 931 5 view .LVU7382
 27920              	.LBB3634:
 932:src/xeq.c     **** }
 27921              		.loc 1 932 2 view .LVU7383
 27922              	.LBE3634:
 27923              	.LBE3636:
 717:src/xeq.c     **** }
 27924              		.loc 1 717 2 is_stmt 0 view .LVU7384
 27925 0064 0CBF     		ite	eq
 27926 0066 1022     		moveq	r2, #16
 27927 0068 0822     		movne	r2, #8
 27928 006a 0134     		adds	r4, r4, #1
 27929              	.LVL2211:
 717:src/xeq.c     **** }
 27930              		.loc 1 717 2 view .LVU7385
 27931 006c 0DEB0111 		add	r1, sp, r1, lsl #4
 27932              	.LVL2212:
 717:src/xeq.c     **** }
 27933              		.loc 1 717 2 view .LVU7386
 27934 0070 FFF7FEFF 		bl	xcopy
 27935              	.LVL2213:
 717:src/xeq.c     **** }
 27936              		.loc 1 717 2 view .LVU7387
 27937              	.LBE3638:
 27938              	.LBE3642:
6025:src/xeq.c     **** 		arg >>= 2;
 27939              		.loc 1 6025 3 is_stmt 1 view .LVU7388
6023:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27940              		.loc 1 6023 2 is_stmt 0 view .LVU7389
 27941 0074 682C     		cmp	r4, #104
 27942              		.loc 1 6025 7 view .LVU7390
 27943 0076 4FEA9505 		lsr	r5, r5, #2
 27944              	.LVL2214:
6023:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27945              		.loc 1 6023 17 is_stmt 1 view .LVU7391
6023:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27946              		.loc 1 6023 12 view .LVU7392
6023:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 27947              		.loc 1 6023 2 is_stmt 0 view .LVU7393
 27948 007a E8D1     		bne	.L1998
6026:src/xeq.c     **** 	}
6027:src/xeq.c     **** }
 27949              		.loc 1 6027 1 view .LVU7394
 27950 007c 10B0     		add	sp, sp, #64
 27951              		.cfi_def_cfa_offset 24
 27952              		@ sp needed
 27953 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 27954              	.LVL2215:
 27955              	.L2005:
 27956              		.loc 1 6027 1 view .LVU7395
 27957 0082 00BF     		.align	2
 27958              	.L2004:
 27959 0084 00000000 		.word	StateWhileOn
 27960 0088 00000000 		.word	main_ram
 27961              		.cfi_endproc
 27962              	.LFE267:
 27964              		.section	.text.cmdmode,"ax",%progbits
ARM GAS  /tmp/cciWh9P3.s 			page 715


 27965              		.align	1
 27966              		.p2align 2,,3
 27967              		.global	cmdmode
 27968              		.syntax unified
 27969              		.thumb
 27970              		.thumb_func
 27971              		.fpu fpv4-sp-d16
 27973              	cmdmode:
 27974              	.LVL2216:
 27975              	.LFB268:
6028:src/xeq.c     **** 
6029:src/xeq.c     **** /*
6030:src/xeq.c     ****  *  Toggle UState mode bits from XROM
6031:src/xeq.c     ****  */
6032:src/xeq.c     **** void cmdmode(unsigned int arg, enum rarg cmd) {
 27976              		.loc 1 6032 47 is_stmt 1 view -0
 27977              		.cfi_startproc
 27978              		@ args = 0, pretend = 0, frame = 0
 27979              		@ frame_needed = 0, uses_anonymous_args = 0
 27980              		@ link register save eliminated.
6033:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 27981              		.loc 1 6033 2 view .LVU7397
6032:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 27982              		.loc 1 6032 47 is_stmt 0 view .LVU7398
 27983 0000 30B4     		push	{r4, r5}
 27984              		.cfi_def_cfa_offset 8
 27985              		.cfi_offset 4, -8
 27986              		.cfi_offset 5, -4
6034:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 27987              		.loc 1 6034 62 view .LVU7399
 27988 0002 134D     		ldr	r5, .L2011
6033:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 27989              		.loc 1 6033 35 view .LVU7400
 27990 0004 0122     		movs	r2, #1
 27991 0006 A0F12003 		sub	r3, r0, #32
 27992 000a C0F12004 		rsb	r4, r0, #32
 27993 000e 02FA03F3 		lsl	r3, r2, r3
 27994 0012 22FA04F4 		lsr	r4, r2, r4
 27995 0016 8240     		lsls	r2, r2, r0
 27996              		.loc 1 6034 62 view .LVU7401
 27997 0018 2868     		ldr	r0, [r5]
 27998              	.LVL2217:
6035:src/xeq.c     **** 
6036:src/xeq.c     **** 	if (cmd == RARG_MODE_SET)
 27999              		.loc 1 6036 5 view .LVU7402
 28000 001a 8129     		cmp	r1, #129
6037:src/xeq.c     **** 		*mode |= bit;
 28001              		.loc 1 6037 9 view .LVU7403
 28002 001c D0F8E457 		ldr	r5, [r0, #2020]
6033:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 28003              		.loc 1 6033 35 view .LVU7404
 28004 0020 43EA0403 		orr	r3, r3, r4
 28005              	.LVL2218:
6034:src/xeq.c     **** 
 28006              		.loc 1 6034 2 is_stmt 1 view .LVU7405
6036:src/xeq.c     **** 		*mode |= bit;
 28007              		.loc 1 6036 2 view .LVU7406
ARM GAS  /tmp/cciWh9P3.s 			page 716


 28008              		.loc 1 6037 9 is_stmt 0 view .LVU7407
 28009 0024 00F2E471 		addw	r1, r0, #2020
 28010              	.LVL2219:
6036:src/xeq.c     **** 		*mode |= bit;
 28011              		.loc 1 6036 5 view .LVU7408
 28012 0028 0AD0     		beq	.L2010
6038:src/xeq.c     **** 	else
6039:src/xeq.c     **** 		*mode &= ~bit;
 28013              		.loc 1 6039 3 is_stmt 1 view .LVU7409
 28014              		.loc 1 6039 9 is_stmt 0 view .LVU7410
 28015 002a D0F8E847 		ldr	r4, [r0, #2024]
 28016 002e 25EA0202 		bic	r2, r5, r2
 28017              	.LVL2220:
 28018              		.loc 1 6039 9 view .LVU7411
 28019 0032 24EA0303 		bic	r3, r4, r3
 28020              	.LVL2221:
 28021              		.loc 1 6039 9 view .LVU7412
 28022 0036 C0F8E427 		str	r2, [r0, #2020]
6040:src/xeq.c     **** }
 28023              		.loc 1 6040 1 view .LVU7413
 28024 003a 30BC     		pop	{r4, r5}
 28025              		.cfi_remember_state
 28026              		.cfi_restore 5
 28027              		.cfi_restore 4
 28028              		.cfi_def_cfa_offset 0
 28029 003c 4B60     		str	r3, [r1, #4]
 28030 003e 7047     		bx	lr
 28031              	.LVL2222:
 28032              	.L2010:
 28033              		.cfi_restore_state
6037:src/xeq.c     **** 	else
 28034              		.loc 1 6037 3 is_stmt 1 view .LVU7414
6037:src/xeq.c     **** 	else
 28035              		.loc 1 6037 9 is_stmt 0 view .LVU7415
 28036 0040 4C68     		ldr	r4, [r1, #4]
 28037 0042 2A43     		orrs	r2, r2, r5
 28038              	.LVL2223:
6037:src/xeq.c     **** 	else
 28039              		.loc 1 6037 9 view .LVU7416
 28040 0044 2343     		orrs	r3, r3, r4
 28041              	.LVL2224:
6037:src/xeq.c     **** 	else
 28042              		.loc 1 6037 9 view .LVU7417
 28043 0046 C0F8E427 		str	r2, [r0, #2020]
 28044              		.loc 1 6040 1 view .LVU7418
 28045 004a 30BC     		pop	{r4, r5}
 28046              		.cfi_restore 5
 28047              		.cfi_restore 4
 28048              		.cfi_def_cfa_offset 0
 28049 004c 4B60     		str	r3, [r1, #4]
 28050 004e 7047     		bx	lr
 28051              	.L2012:
 28052              		.align	2
 28053              	.L2011:
 28054 0050 00000000 		.word	main_ram
 28055              		.cfi_endproc
 28056              	.LFE268:
ARM GAS  /tmp/cciWh9P3.s 			page 717


 28058              		.section	.text.cmdlpop,"ax",%progbits
 28059              		.align	1
 28060              		.p2align 2,,3
 28061              		.global	cmdlpop
 28062              		.syntax unified
 28063              		.thumb
 28064              		.thumb_func
 28065              		.fpu fpv4-sp-d16
 28067              	cmdlpop:
 28068              	.LVL2225:
 28069              	.LFB269:
6041:src/xeq.c     **** 
6042:src/xeq.c     **** /*
6043:src/xeq.c     ****  *  Undo the effect of LOCL by popping the current local frame.
6044:src/xeq.c     ****  *  Needs to be executed from the same level that has established the frame.
6045:src/xeq.c     ****  */
6046:src/xeq.c     **** void cmdlpop(enum nilop op) {
 28070              		.loc 1 6046 29 is_stmt 1 view -0
 28071              		.cfi_startproc
 28072              		@ args = 0, pretend = 0, frame = 0
 28073              		@ frame_needed = 0, uses_anonymous_args = 0
6047:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28074              		.loc 1 6047 2 view .LVU7420
6046:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28075              		.loc 1 6046 29 is_stmt 0 view .LVU7421
 28076 0000 10B5     		push	{r4, lr}
 28077              		.cfi_def_cfa_offset 8
 28078              		.cfi_offset 4, -8
 28079              		.cfi_offset 14, -4
 28080              		.loc 1 6047 6 view .LVU7422
 28081 0002 0C4C     		ldr	r4, .L2017
 28082 0004 2368     		ldr	r3, [r4]
 28083 0006 B3F9DE17 		ldrsh	r1, [r3, #2014]
 28084              		.loc 1 6047 5 view .LVU7423
 28085 000a B3F9E227 		ldrsh	r2, [r3, #2018]
 28086 000e 8A42     		cmp	r2, r1
 28087 0010 05D0     		beq	.L2014
6048:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28088              		.loc 1 6048 3 is_stmt 1 view .LVU7424
 28089              	.LVL2226:
 28090              	.LBB3647:
 28091              	.LBI3647:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28092              		.loc 1 536 5 view .LVU7425
 28093              	.LBB3648:
 537:src/xeq.c     **** 		Error = e;
 28094              		.loc 1 537 2 view .LVU7426
 537:src/xeq.c     **** 		Error = e;
 28095              		.loc 1 537 12 is_stmt 0 view .LVU7427
 28096 0012 094B     		ldr	r3, .L2017+4
 537:src/xeq.c     **** 		Error = e;
 28097              		.loc 1 537 5 view .LVU7428
 28098 0014 1A68     		ldr	r2, [r3]
 28099 0016 0AB9     		cbnz	r2, .L2013
 28100              	.LVL2227:
 28101              	.LBB3649:
 28102              	.LBI3649:
ARM GAS  /tmp/cciWh9P3.s 			page 718


 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28103              		.loc 1 536 5 is_stmt 1 view .LVU7429
 28104              	.LBB3650:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 28105              		.loc 1 538 3 view .LVU7430
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 28106              		.loc 1 538 9 is_stmt 0 view .LVU7431
 28107 0018 0722     		movs	r2, #7
 28108 001a 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 28109              		.loc 1 539 3 is_stmt 1 view .LVU7432
 28110              	.LVL2228:
 28111              	.L2013:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 28112              		.loc 1 539 3 is_stmt 0 view .LVU7433
 28113              	.LBE3650:
 28114              	.LBE3649:
 28115              	.LBE3648:
 28116              	.LBE3647:
6049:src/xeq.c     **** 		return;
6050:src/xeq.c     **** 	}
6051:src/xeq.c     **** 	RetStkPtr = LocalRegs;
6052:src/xeq.c     **** 	retstk_up();
6053:src/xeq.c     **** 	--RetStkPtr;
6054:src/xeq.c     **** }
 28117              		.loc 1 6054 1 view .LVU7434
 28118 001c 10BD     		pop	{r4, pc}
 28119              	.LVL2229:
 28120              	.L2014:
6051:src/xeq.c     **** 	retstk_up();
 28121              		.loc 1 6051 2 is_stmt 1 view .LVU7435
6051:src/xeq.c     **** 	retstk_up();
 28122              		.loc 1 6051 12 is_stmt 0 view .LVU7436
 28123 001e A3F8E227 		strh	r2, [r3, #2018]	@ movhi
6052:src/xeq.c     **** 	--RetStkPtr;
 28124              		.loc 1 6052 2 is_stmt 1 view .LVU7437
 28125 0022 FFF7FEFF 		bl	retstk_up
 28126              	.LVL2230:
6053:src/xeq.c     **** }
 28127              		.loc 1 6053 2 view .LVU7438
6053:src/xeq.c     **** }
 28128              		.loc 1 6053 4 is_stmt 0 view .LVU7439
 28129 0026 2268     		ldr	r2, [r4]
6053:src/xeq.c     **** }
 28130              		.loc 1 6053 2 view .LVU7440
 28131 0028 B2F8E237 		ldrh	r3, [r2, #2018]
 28132 002c 013B     		subs	r3, r3, #1
 28133 002e A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 28134              		.loc 1 6054 1 view .LVU7441
 28135 0032 10BD     		pop	{r4, pc}
 28136              	.L2018:
 28137              		.align	2
 28138              	.L2017:
 28139 0034 00000000 		.word	main_ram
 28140 0038 00000000 		.word	Error
 28141              		.cfi_endproc
 28142              	.LFE269:
ARM GAS  /tmp/cciWh9P3.s 			page 719


 28144              		.section	.text.cmdregs,"ax",%progbits
 28145              		.align	1
 28146              		.p2align 2,,3
 28147              		.global	cmdregs
 28148              		.syntax unified
 28149              		.thumb
 28150              		.thumb_func
 28151              		.fpu fpv4-sp-d16
 28153              	cmdregs:
 28154              	.LVL2231:
 28155              	.LFB270:
6055:src/xeq.c     **** 
6056:src/xeq.c     **** /*
6057:src/xeq.c     ****  *  Reduce the number of global registers in favour of local data on the return stack
6058:src/xeq.c     ****  */
6059:src/xeq.c     **** void cmdregs(unsigned int arg, enum rarg op) {
 28156              		.loc 1 6059 46 is_stmt 1 view -0
 28157              		.cfi_startproc
 28158              		@ args = 0, pretend = 0, frame = 0
 28159              		@ frame_needed = 0, uses_anonymous_args = 0
6060:src/xeq.c     **** 	int distance;
 28160              		.loc 1 6060 2 view .LVU7443
6061:src/xeq.c     **** 	int length;
 28161              		.loc 1 6061 2 view .LVU7444
6062:src/xeq.c     **** 
6063:src/xeq.c     **** 	if (is_dblmode()) {
 28162              		.loc 1 6063 2 view .LVU7445
 28163              	.LBB3657:
 28164              	.LBI3657:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28165              		.loc 1 931 5 view .LVU7446
 28166              	.LBB3658:
 932:src/xeq.c     **** }
 28167              		.loc 1 932 2 view .LVU7447
 28168              	.LBE3658:
 28169              	.LBE3657:
6059:src/xeq.c     **** 	int distance;
 28170              		.loc 1 6059 46 is_stmt 0 view .LVU7448
 28171 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28172              		.cfi_def_cfa_offset 24
 28173              		.cfi_offset 4, -24
 28174              		.cfi_offset 5, -20
 28175              		.cfi_offset 6, -16
 28176              		.cfi_offset 7, -12
 28177              		.cfi_offset 8, -8
 28178              		.cfi_offset 14, -4
 28179              	.LBB3660:
 28180              	.LBB3659:
 932:src/xeq.c     **** }
 28181              		.loc 1 932 12 view .LVU7449
 28182 0004 294F     		ldr	r7, .L2035
 28183 0006 3A68     		ldr	r2, [r7]
 932:src/xeq.c     **** }
 28184              		.loc 1 932 24 view .LVU7450
 28185 0008 B2F8E817 		ldrh	r1, [r2, #2024]
 28186              	.LVL2232:
 932:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 720


 28187              		.loc 1 932 24 view .LVU7451
 28188 000c 44F20103 		movw	r3, #16385
 28189              	.LBE3659:
 28190              	.LBE3660:
 28191              		.loc 1 6063 5 view .LVU7452
 28192 0010 0B40     		ands	r3, r3, r1
 28193 0012 B3F5804F 		cmp	r3, #16384
6059:src/xeq.c     **** 	int distance;
 28194              		.loc 1 6059 46 view .LVU7453
 28195 0016 0446     		mov	r4, r0
 28196              		.loc 1 6063 5 view .LVU7454
 28197 0018 36D0     		beq	.L2031
6064:src/xeq.c     **** 		// DP register length 16 bytes
6065:src/xeq.c     **** 		length = (arg << 4); 
6066:src/xeq.c     **** 		// We need additional room for lettered registers
6067:src/xeq.c     **** 		arg = (arg << 1) + STACK_SIZE + EXTRA_REG;
6068:src/xeq.c     **** 	}
6069:src/xeq.c     **** 	else {
6070:src/xeq.c     **** 		if (UState.mode_double && arg < STACK_SIZE + EXTRA_REG) {
 28198              		.loc 1 6070 3 is_stmt 1 view .LVU7455
 28199              		.loc 1 6070 7 is_stmt 0 view .LVU7456
 28200 001a 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 28201              		.loc 1 6070 6 view .LVU7457
 28202 001e 5B06     		lsls	r3, r3, #25
 28203 0020 29D4     		bmi	.L2032
 28204              	.L2022:
6071:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
6072:src/xeq.c     **** 			// We must not release the space needed for the DP lettered registers
6073:src/xeq.c     **** 			report_err(ERR_RANGE);
6074:src/xeq.c     **** 			return;
6075:src/xeq.c     **** 		}
6076:src/xeq.c     **** 		// register length 8 bytes
6077:src/xeq.c     **** 		length = (arg << 3);
 28205              		.loc 1 6077 3 is_stmt 1 view .LVU7458
 28206              		.loc 1 6077 17 is_stmt 0 view .LVU7459
 28207 0022 4FEAC408 		lsl	r8, r4, #3
 28208              	.LVL2233:
 28209              	.L2021:
6078:src/xeq.c     **** 	}
6079:src/xeq.c     **** 	distance = NumRegs - arg;
 28210              		.loc 1 6079 2 is_stmt 1 view .LVU7460
 28211              		.loc 1 6079 13 is_stmt 0 view .LVU7461
 28212 0026 92F8CF57 		ldrb	r5, [r2, #1999]	@ zero_extendqisi2
 28213              		.loc 1 6079 21 view .LVU7462
 28214 002a 2D1B     		subs	r5, r5, r4
 28215              	.LVL2234:
6080:src/xeq.c     **** 	
6081:src/xeq.c     **** 	// Move return stack, check for room
6082:src/xeq.c     **** 	if (move_retstk(distance << 2))
 28216              		.loc 1 6082 2 is_stmt 1 view .LVU7463
 28217              		.loc 1 6082 6 is_stmt 0 view .LVU7464
 28218 002c A800     		lsls	r0, r5, #2
 28219 002e FFF7FEFF 		bl	move_retstk
 28220              	.LVL2235:
 28221              		.loc 1 6082 5 view .LVU7465
 28222 0032 0646     		mov	r6, r0
 28223 0034 08B1     		cbz	r0, .L2033
ARM GAS  /tmp/cciWh9P3.s 			page 721


 28224              	.LVL2236:
 28225              	.L2019:
6083:src/xeq.c     **** 		return;
6084:src/xeq.c     **** 	
6085:src/xeq.c     **** 	// Move register contents, including the statistics registers
6086:src/xeq.c     **** 	xcopy((unsigned short *)(Regs + TOPREALREG - arg)     - SizeStatRegs,
6087:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
6088:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
6089:src/xeq.c     **** 
6090:src/xeq.c     **** 	// Clear the left space
6091:src/xeq.c     **** 	if (distance < 0)
6092:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
6093:src/xeq.c     **** 	NumRegs = arg;
6094:src/xeq.c     **** }
 28226              		.loc 1 6094 1 view .LVU7466
 28227 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28228              	.LVL2237:
 28229              	.L2033:
6086:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28230              		.loc 1 6086 2 is_stmt 1 view .LVU7467
6086:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28231              		.loc 1 6086 27 is_stmt 0 view .LVU7468
 28232 003a 3B68     		ldr	r3, [r7]
6086:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28233              		.loc 1 6086 56 view .LVU7469
 28234 003c 1C4A     		ldr	r2, .L2035+4
6087:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28235              		.loc 1 6087 45 view .LVU7470
 28236 003e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
6086:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28237              		.loc 1 6086 56 view .LVU7471
 28238 0042 1268     		ldr	r2, [r2]
6087:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28239              		.loc 1 6087 45 view .LVU7472
 28240 0044 C1F16401 		rsb	r1, r1, #100
6086:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28241              		.loc 1 6086 45 view .LVU7473
 28242 0048 C4F16400 		rsb	r0, r4, #100
6086:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28243              		.loc 1 6086 27 view .LVU7474
 28244 004c 03F58663 		add	r3, r3, #1072
6087:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28245              		.loc 1 6087 56 view .LVU7475
 28246 0050 C2EB8101 		rsb	r1, r2, r1, lsl #2
6086:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28247              		.loc 1 6086 56 view .LVU7476
 28248 0054 C2EB8000 		rsb	r0, r2, r0, lsl #2
6086:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28249              		.loc 1 6086 2 view .LVU7477
 28250 0058 03EB4101 		add	r1, r3, r1, lsl #1
 28251 005c 08EB4202 		add	r2, r8, r2, lsl #1
 28252 0060 03EB4000 		add	r0, r3, r0, lsl #1
 28253 0064 FFF7FEFF 		bl	xcopy
 28254              	.LVL2238:
6091:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28255              		.loc 1 6091 2 is_stmt 1 view .LVU7478
6091:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
ARM GAS  /tmp/cciWh9P3.s 			page 722


 28256              		.loc 1 6091 5 is_stmt 0 view .LVU7479
 28257 0068 002D     		cmp	r5, #0
 28258 006a 13DB     		blt	.L2034
 28259              	.L2026:
6093:src/xeq.c     **** }
 28260              		.loc 1 6093 2 is_stmt 1 view .LVU7480
6093:src/xeq.c     **** }
 28261              		.loc 1 6093 10 is_stmt 0 view .LVU7481
 28262 006c 3B68     		ldr	r3, [r7]
 28263 006e 83F8CF47 		strb	r4, [r3, #1999]
 28264              		.loc 1 6094 1 view .LVU7482
 28265 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28266              	.LVL2239:
 28267              	.L2032:
6070:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
 28268              		.loc 1 6070 26 discriminator 1 view .LVU7483
 28269 0076 0B28     		cmp	r0, #11
 28270 0078 D3D8     		bhi	.L2022
6073:src/xeq.c     **** 			return;
 28271              		.loc 1 6073 4 is_stmt 1 view .LVU7484
 28272              	.LVL2240:
 28273              	.LBB3661:
 28274              	.LBI3661:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28275              		.loc 1 536 5 view .LVU7485
 28276              	.LBB3662:
 537:src/xeq.c     **** 		Error = e;
 28277              		.loc 1 537 2 view .LVU7486
 537:src/xeq.c     **** 		Error = e;
 28278              		.loc 1 537 12 is_stmt 0 view .LVU7487
 28279 007a 0E4B     		ldr	r3, .L2035+8
 537:src/xeq.c     **** 		Error = e;
 28280              		.loc 1 537 5 view .LVU7488
 28281 007c 1A68     		ldr	r2, [r3]
 28282 007e 002A     		cmp	r2, #0
 28283 0080 D9D1     		bne	.L2019
 28284              	.LVL2241:
 28285              	.LBB3663:
 28286              	.LBI3663:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28287              		.loc 1 536 5 is_stmt 1 view .LVU7489
 28288              	.LBB3664:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 28289              		.loc 1 538 3 view .LVU7490
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 28290              		.loc 1 538 9 is_stmt 0 view .LVU7491
 28291 0082 0822     		movs	r2, #8
 28292 0084 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 28293              		.loc 1 539 3 is_stmt 1 view .LVU7492
 28294 0086 D6E7     		b	.L2019
 28295              	.LVL2242:
 28296              	.L2031:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 28297              		.loc 1 539 3 is_stmt 0 view .LVU7493
 28298              	.LBE3664:
 28299              	.LBE3663:
ARM GAS  /tmp/cciWh9P3.s 			page 723


 28300              	.LBE3662:
 28301              	.LBE3661:
6065:src/xeq.c     **** 		// We need additional room for lettered registers
 28302              		.loc 1 6065 3 is_stmt 1 view .LVU7494
6067:src/xeq.c     **** 	}
 28303              		.loc 1 6067 14 is_stmt 0 view .LVU7495
 28304 0088 4300     		lsls	r3, r0, #1
6065:src/xeq.c     **** 		// We need additional room for lettered registers
 28305              		.loc 1 6065 17 view .LVU7496
 28306 008a 4FEA0018 		lsl	r8, r0, #4
 28307              	.LVL2243:
6067:src/xeq.c     **** 	}
 28308              		.loc 1 6067 3 is_stmt 1 view .LVU7497
6067:src/xeq.c     **** 	}
 28309              		.loc 1 6067 7 is_stmt 0 view .LVU7498
 28310 008e 03F10C04 		add	r4, r3, #12
 28311              	.LVL2244:
6067:src/xeq.c     **** 	}
 28312              		.loc 1 6067 7 view .LVU7499
 28313 0092 C8E7     		b	.L2021
 28314              	.LVL2245:
 28315              	.L2034:
6092:src/xeq.c     **** 	NumRegs = arg;
 28316              		.loc 1 6092 3 is_stmt 1 view .LVU7500
6092:src/xeq.c     **** 	NumRegs = arg;
 28317              		.loc 1 6092 8 is_stmt 0 view .LVU7501
 28318 0094 3868     		ldr	r0, [r7]
6092:src/xeq.c     **** 	NumRegs = arg;
 28319              		.loc 1 6092 41 view .LVU7502
 28320 0096 6A42     		rsbs	r2, r5, #0
6092:src/xeq.c     **** 	NumRegs = arg;
 28321              		.loc 1 6092 26 view .LVU7503
 28322 0098 00EBC500 		add	r0, r0, r5, lsl #3
6092:src/xeq.c     **** 	NumRegs = arg;
 28323              		.loc 1 6092 3 view .LVU7504
 28324 009c 3146     		mov	r1, r6
 28325 009e D200     		lsls	r2, r2, #3
 28326 00a0 00F5EA60 		add	r0, r0, #1872
 28327 00a4 FFF7FEFF 		bl	xset
 28328              	.LVL2246:
 28329 00a8 E0E7     		b	.L2026
 28330              	.L2036:
 28331 00aa 00BF     		.align	2
 28332              	.L2035:
 28333 00ac 00000000 		.word	main_ram
 28334 00b0 00000000 		.word	SizeStatRegs
 28335 00b4 00000000 		.word	Error
 28336              		.cfi_endproc
 28337              	.LFE270:
 28339              		.section	.text.op_double,"ax",%progbits
 28340              		.align	1
 28341              		.p2align 2,,3
 28342              		.global	op_double
 28343              		.syntax unified
 28344              		.thumb
 28345              		.thumb_func
 28346              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cciWh9P3.s 			page 724


 28348              	op_double:
 28349              	.LVL2247:
 28350              	.LFB211:
3852:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28351              		.loc 1 3852 31 is_stmt 1 view -0
 28352              		.cfi_startproc
 28353              		@ args = 0, pretend = 0, frame = 40
 28354              		@ frame_needed = 0, uses_anonymous_args = 0
3853:src/xeq.c     **** 	const int intm = is_intmode();
 28355              		.loc 1 3853 2 view .LVU7506
3852:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28356              		.loc 1 3852 31 is_stmt 0 view .LVU7507
 28357 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28358              		.cfi_def_cfa_offset 24
 28359              		.cfi_offset 4, -24
 28360              		.cfi_offset 5, -20
 28361              		.cfi_offset 6, -16
 28362              		.cfi_offset 7, -12
 28363              		.cfi_offset 8, -8
 28364              		.cfi_offset 14, -4
3854:src/xeq.c     **** 	int i;
 28365              		.loc 1 3854 19 view .LVU7508
 28366 0004 454E     		ldr	r6, .L2065
 28367 0006 3368     		ldr	r3, [r6]
3857:src/xeq.c     **** 		// Mode switch
 28368              		.loc 1 3857 5 view .LVU7509
 28369 0008 A0F1B104 		sub	r4, r0, #177
3857:src/xeq.c     **** 		// Mode switch
 28370              		.loc 1 3857 19 view .LVU7510
 28371 000c 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
3854:src/xeq.c     **** 	int i;
 28372              		.loc 1 3854 19 view .LVU7511
 28373 0010 93F8E887 		ldrb	r8, [r3, #2024]	@ zero_extendqisi2
 28374              	.LVL2248:
3854:src/xeq.c     **** 	int i;
 28375              		.loc 1 3854 2 is_stmt 1 view .LVU7512
3857:src/xeq.c     **** 		// Mode switch
 28376              		.loc 1 3857 5 is_stmt 0 view .LVU7513
 28377 0014 B4FA84F4 		clz	r4, r4
 28378 0018 C2F38011 		ubfx	r1, r2, #6, #1
 28379 001c 6409     		lsrs	r4, r4, #5
 28380 001e 8C42     		cmp	r4, r1
3852:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28381              		.loc 1 3852 31 view .LVU7514
 28382 0020 8AB0     		sub	sp, sp, #40
 28383              		.cfi_def_cfa_offset 64
3854:src/xeq.c     **** 	int i;
 28384              		.loc 1 3854 12 view .LVU7515
 28385 0022 08F00108 		and	r8, r8, #1
 28386              	.LVL2249:
3855:src/xeq.c     **** 
 28387              		.loc 1 3855 2 is_stmt 1 view .LVU7516
3857:src/xeq.c     **** 		// Mode switch
 28388              		.loc 1 3857 2 view .LVU7517
3857:src/xeq.c     **** 		// Mode switch
 28389              		.loc 1 3857 5 is_stmt 0 view .LVU7518
 28390 0026 41D0     		beq	.L2038
ARM GAS  /tmp/cciWh9P3.s 			page 725


3859:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28391              		.loc 1 3859 3 is_stmt 1 view .LVU7519
3859:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28392              		.loc 1 3859 6 is_stmt 0 view .LVU7520
 28393 0028 B128     		cmp	r0, #177
 28394 002a 4AD0     		beq	.L2063
3877:src/xeq.c     **** 				// Convert X to K to single precision
 28395              		.loc 1 3877 4 is_stmt 1 view .LVU7521
3877:src/xeq.c     **** 				// Convert X to K to single precision
 28396              		.loc 1 3877 7 is_stmt 0 view .LVU7522
 28397 002c B8F1000F 		cmp	r8, #0
 28398 0030 25D1     		bne	.L2046
 28399 0032 6F24     		movs	r4, #111
 28400 0034 01AF     		add	r7, sp, #4
 28401              	.LVL2250:
 28402              	.L2048:
3881:src/xeq.c     **** 			}
 28403              		.loc 1 3881 6 is_stmt 1 discriminator 3 view .LVU7523
3881:src/xeq.c     **** 			}
 28404              		.loc 1 3881 28 is_stmt 0 discriminator 3 view .LVU7524
 28405 0036 03F58663 		add	r3, r3, #1072
 28406              	.LBB3665:
 28407              	.LBB3666:
 709:src/xeq.c     **** }
 28408              		.loc 1 709 9 discriminator 3 view .LVU7525
 28409 003a 2046     		mov	r0, r4
 28410              	.LBE3666:
 28411              	.LBE3665:
3881:src/xeq.c     **** 			}
 28412              		.loc 1 3881 6 discriminator 3 view .LVU7526
 28413 003c 03EBC405 		add	r5, r3, r4, lsl #3
 28414              	.LVL2251:
 28415              	.LBB3668:
 28416              	.LBI3665:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28417              		.loc 1 708 11 is_stmt 1 discriminator 3 view .LVU7527
 28418              	.LBB3667:
 709:src/xeq.c     **** }
 28419              		.loc 1 709 2 discriminator 3 view .LVU7528
 709:src/xeq.c     **** }
 28420              		.loc 1 709 9 is_stmt 0 discriminator 3 view .LVU7529
 28421 0040 FFF7FEFF 		bl	get_reg_n
 28422              	.LVL2252:
 709:src/xeq.c     **** }
 28423              		.loc 1 709 9 discriminator 3 view .LVU7530
 28424              	.LBE3667:
 28425              	.LBE3668:
 28426              	.LBB3669:
 28427              	.LBI3669:
 638:src/xeq.c     **** 	decNumber temp;
 28428              		.loc 1 638 6 is_stmt 1 discriminator 3 view .LVU7531
 28429              	.LBB3670:
 639:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 28430              		.loc 1 639 2 discriminator 3 view .LVU7532
 640:src/xeq.c     **** }
 28431              		.loc 1 640 2 discriminator 3 view .LVU7533
 640:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 726


 28432              		.loc 1 640 24 is_stmt 0 discriminator 3 view .LVU7534
 28433 0044 3946     		mov	r1, r7
 28434 0046 FFF7FEFF 		bl	decimal128ToNumber
 28435              	.LVL2253:
 640:src/xeq.c     **** }
 28436              		.loc 1 640 24 discriminator 3 view .LVU7535
 28437 004a 013C     		subs	r4, r4, #1
 28438              	.LVL2254:
 640:src/xeq.c     **** }
 28439              		.loc 1 640 24 discriminator 3 view .LVU7536
 28440 004c 0146     		mov	r1, r0
 640:src/xeq.c     **** }
 28441              		.loc 1 640 2 discriminator 3 view .LVU7537
 28442 004e 2846     		mov	r0, r5
 28443 0050 FFF7FEFF 		bl	packed_from_number
 28444              	.LVL2255:
 640:src/xeq.c     **** }
 28445              		.loc 1 640 2 discriminator 3 view .LVU7538
 28446              	.LBE3670:
 28447              	.LBE3669:
3880:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28448              		.loc 1 3880 50 is_stmt 1 discriminator 3 view .LVU7539
3880:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28449              		.loc 1 3880 42 discriminator 3 view .LVU7540
3880:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28450              		.loc 1 3880 5 is_stmt 0 discriminator 3 view .LVU7541
 28451 0054 632C     		cmp	r4, #99
 28452 0056 3368     		ldr	r3, [r6]
 28453 0058 EDD1     		bne	.L2048
3883:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28454              		.loc 1 3883 4 is_stmt 1 view .LVU7542
3883:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28455              		.loc 1 3883 23 is_stmt 0 view .LVU7543
 28456 005a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
3884:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28457              		.loc 1 3884 7 view .LVU7544
 28458 005e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
3883:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28459              		.loc 1 3883 23 view .LVU7545
 28460 0062 6FF38612 		bfc	r2, #6, #1
3884:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28461              		.loc 1 3884 7 view .LVU7546
 28462 0066 6429     		cmp	r1, #100
3883:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28463              		.loc 1 3883 23 view .LVU7547
 28464 0068 83F8E927 		strb	r2, [r3, #2025]
3884:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28465              		.loc 1 3884 4 is_stmt 1 view .LVU7548
3884:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28466              		.loc 1 3884 7 is_stmt 0 view .LVU7549
 28467 006c 1AD8     		bhi	.L2051
 28468              	.LVL2256:
 28469              	.L2060:
3888:src/xeq.c     **** 	if (intm) {
 28470              		.loc 1 3888 2 is_stmt 1 view .LVU7550
3888:src/xeq.c     **** 	if (intm) {
 28471              		.loc 1 3888 14 is_stmt 0 view .LVU7551
ARM GAS  /tmp/cciWh9P3.s 			page 727


 28472 006e 6420     		movs	r0, #100
 28473 0070 FFF7FEFF 		bl	get_reg_n
 28474              	.LVL2257:
3888:src/xeq.c     **** 	if (intm) {
 28475              		.loc 1 3888 12 view .LVU7552
 28476 0074 2A4B     		ldr	r3, .L2065+4
 28477 0076 1860     		str	r0, [r3]
3889:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28478              		.loc 1 3889 2 is_stmt 1 view .LVU7553
 28479              	.L2037:
3893:src/xeq.c     **** 
 28480              		.loc 1 3893 1 is_stmt 0 view .LVU7554
 28481 0078 0AB0     		add	sp, sp, #40
 28482              		.cfi_remember_state
 28483              		.cfi_def_cfa_offset 24
 28484              		@ sp needed
 28485 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28486              	.LVL2258:
 28487              	.L2046:
 28488              		.cfi_restore_state
3883:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28489              		.loc 1 3883 4 is_stmt 1 view .LVU7555
3884:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28490              		.loc 1 3884 7 is_stmt 0 view .LVU7556
 28491 007e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
3883:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28492              		.loc 1 3883 23 view .LVU7557
 28493 0082 6FF38612 		bfc	r2, #6, #1
3884:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28494              		.loc 1 3884 7 view .LVU7558
 28495 0086 6429     		cmp	r1, #100
3883:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28496              		.loc 1 3883 23 view .LVU7559
 28497 0088 83F8E927 		strb	r2, [r3, #2025]
3884:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28498              		.loc 1 3884 4 is_stmt 1 view .LVU7560
3884:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28499              		.loc 1 3884 7 is_stmt 0 view .LVU7561
 28500 008c 0AD8     		bhi	.L2051
 28501              	.LVL2259:
 28502              	.L2059:
3888:src/xeq.c     **** 	if (intm) {
 28503              		.loc 1 3888 2 is_stmt 1 view .LVU7562
3888:src/xeq.c     **** 	if (intm) {
 28504              		.loc 1 3888 14 is_stmt 0 view .LVU7563
 28505 008e 6420     		movs	r0, #100
 28506 0090 FFF7FEFF 		bl	get_reg_n
 28507              	.LVL2260:
3888:src/xeq.c     **** 	if (intm) {
 28508              		.loc 1 3888 12 view .LVU7564
 28509 0094 224B     		ldr	r3, .L2065+4
 28510 0096 1860     		str	r0, [r3]
3889:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28511              		.loc 1 3889 2 is_stmt 1 view .LVU7565
 28512              	.L2050:
3891:src/xeq.c     **** 	}
 28513              		.loc 1 3891 3 view .LVU7566
ARM GAS  /tmp/cciWh9P3.s 			page 728


 28514 0098 C620     		movs	r0, #198
 28515 009a FFF7FEFF 		bl	op_float
 28516              	.LVL2261:
3893:src/xeq.c     **** 
 28517              		.loc 1 3893 1 is_stmt 0 view .LVU7567
 28518 009e 0AB0     		add	sp, sp, #40
 28519              		.cfi_remember_state
 28520              		.cfi_def_cfa_offset 24
 28521              		@ sp needed
 28522 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28523              	.LVL2262:
 28524              	.L2051:
 28525              		.cfi_restore_state
3885:src/xeq.c     **** 		}
 28526              		.loc 1 3885 5 is_stmt 1 view .LVU7568
 28527 00a4 7D21     		movs	r1, #125
 28528 00a6 6420     		movs	r0, #100
 28529 00a8 FFF7FEFF 		bl	cmdregs
 28530              	.LVL2263:
 28531              	.L2038:
3888:src/xeq.c     **** 	if (intm) {
 28532              		.loc 1 3888 2 view .LVU7569
3888:src/xeq.c     **** 	if (intm) {
 28533              		.loc 1 3888 14 is_stmt 0 view .LVU7570
 28534 00ac 6420     		movs	r0, #100
 28535 00ae FFF7FEFF 		bl	get_reg_n
 28536              	.LVL2264:
3888:src/xeq.c     **** 	if (intm) {
 28537              		.loc 1 3888 12 view .LVU7571
 28538 00b2 1B4B     		ldr	r3, .L2065+4
 28539 00b4 1860     		str	r0, [r3]
3889:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28540              		.loc 1 3889 2 is_stmt 1 view .LVU7572
3889:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28541              		.loc 1 3889 5 is_stmt 0 view .LVU7573
 28542 00b6 B8F1000F 		cmp	r8, #0
 28543 00ba EDD1     		bne	.L2050
3893:src/xeq.c     **** 
 28544              		.loc 1 3893 1 view .LVU7574
 28545 00bc 0AB0     		add	sp, sp, #40
 28546              		.cfi_remember_state
 28547              		.cfi_def_cfa_offset 24
 28548              		@ sp needed
 28549 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28550              	.LVL2265:
 28551              	.L2063:
 28552              		.cfi_restore_state
3860:src/xeq.c     **** 				// Need space for double precision stack
 28553              		.loc 1 3860 4 is_stmt 1 view .LVU7575
3860:src/xeq.c     **** 				// Need space for double precision stack
 28554              		.loc 1 3860 7 is_stmt 0 view .LVU7576
 28555 00c2 93F8CF27 		ldrb	r2, [r3, #1999]	@ zero_extendqisi2
 28556 00c6 0B2A     		cmp	r2, #11
 28557 00c8 1ED9     		bls	.L2064
 28558              	.LVL2266:
 28559              	.L2040:
3868:src/xeq.c     **** 			if (! intm) {
ARM GAS  /tmp/cciWh9P3.s 			page 729


 28560              		.loc 1 3868 4 is_stmt 1 view .LVU7577
3868:src/xeq.c     **** 			if (! intm) {
 28561              		.loc 1 3868 23 is_stmt 0 view .LVU7578
 28562 00ca 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 28563 00ce 42F04002 		orr	r2, r2, #64
 28564 00d2 83F8E927 		strb	r2, [r3, #2025]
3869:src/xeq.c     **** 				// Convert X to K to double precision
 28565              		.loc 1 3869 4 is_stmt 1 view .LVU7579
3869:src/xeq.c     **** 				// Convert X to K to double precision
 28566              		.loc 1 3869 7 is_stmt 0 view .LVU7580
 28567 00d6 B8F1000F 		cmp	r8, #0
 28568 00da D8D1     		bne	.L2059
 28569 00dc 6424     		movs	r4, #100
 28570 00de 01AF     		add	r7, sp, #4
 28571              	.L2044:
 28572              	.LVL2267:
3873:src/xeq.c     **** 			}
 28573              		.loc 1 3873 6 is_stmt 1 view .LVU7581
 28574              	.LBB3671:
 28575              	.LBI3671:
 708:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28576              		.loc 1 708 11 view .LVU7582
 28577              	.LBB3672:
 709:src/xeq.c     **** }
 28578              		.loc 1 709 2 view .LVU7583
 709:src/xeq.c     **** }
 28579              		.loc 1 709 9 is_stmt 0 view .LVU7584
 28580 00e0 2046     		mov	r0, r4
 28581 00e2 FFF7FEFF 		bl	get_reg_n
 28582              	.LVL2268:
 28583              	.LBE3672:
 28584              	.LBE3671:
3873:src/xeq.c     **** 			}
 28585              		.loc 1 3873 48 view .LVU7585
 28586 00e6 3368     		ldr	r3, [r6]
 28587 00e8 03F58663 		add	r3, r3, #1072
 28588              	.LBB3674:
 28589              	.LBB3673:
 709:src/xeq.c     **** }
 28590              		.loc 1 709 9 view .LVU7586
 28591 00ec 0546     		mov	r5, r0
 28592              	.LVL2269:
 709:src/xeq.c     **** }
 28593              		.loc 1 709 9 view .LVU7587
 28594              	.LBE3673:
 28595              	.LBE3674:
 28596              	.LBB3675:
 28597              	.LBI3675:
 644:src/xeq.c     **** 	decNumber temp;
 28598              		.loc 1 644 6 is_stmt 1 view .LVU7588
 28599              	.LBB3676:
 645:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 28600              		.loc 1 645 2 view .LVU7589
 646:src/xeq.c     **** }
 28601              		.loc 1 646 2 view .LVU7590
 646:src/xeq.c     **** }
 28602              		.loc 1 646 27 is_stmt 0 view .LVU7591
ARM GAS  /tmp/cciWh9P3.s 			page 730


 28603 00ee 3946     		mov	r1, r7
 28604 00f0 03EBC400 		add	r0, r3, r4, lsl #3
 28605              	.LVL2270:
 646:src/xeq.c     **** }
 28606              		.loc 1 646 27 view .LVU7592
 28607 00f4 FFF7FEFF 		bl	decimal64ToNumber
 28608              	.LVL2271:
 646:src/xeq.c     **** }
 28609              		.loc 1 646 27 view .LVU7593
 28610 00f8 0134     		adds	r4, r4, #1
 28611              	.LVL2272:
 646:src/xeq.c     **** }
 28612              		.loc 1 646 27 view .LVU7594
 28613 00fa 0146     		mov	r1, r0
 646:src/xeq.c     **** }
 28614              		.loc 1 646 2 view .LVU7595
 28615 00fc 2846     		mov	r0, r5
 28616 00fe FFF7FEFF 		bl	packed128_from_number
 28617              	.LVL2273:
 646:src/xeq.c     **** }
 28618              		.loc 1 646 2 view .LVU7596
 28619              	.LBE3676:
 28620              	.LBE3675:
3872:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 28621              		.loc 1 3872 45 is_stmt 1 view .LVU7597
3872:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 28622              		.loc 1 3872 17 view .LVU7598
3872:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 28623              		.loc 1 3872 5 is_stmt 0 view .LVU7599
 28624 0102 702C     		cmp	r4, #112
 28625 0104 ECD1     		bne	.L2044
 28626 0106 B2E7     		b	.L2060
 28627              	.LVL2274:
 28628              	.L2064:
3862:src/xeq.c     **** 				if (Error) {
 28629              		.loc 1 3862 5 is_stmt 1 view .LVU7600
 28630 0108 7D21     		movs	r1, #125
 28631 010a 0C20     		movs	r0, #12
 28632              	.LVL2275:
3862:src/xeq.c     **** 				if (Error) {
 28633              		.loc 1 3862 5 is_stmt 0 view .LVU7601
 28634 010c FFF7FEFF 		bl	cmdregs
 28635              	.LVL2276:
3863:src/xeq.c     **** 					return;
 28636              		.loc 1 3863 5 is_stmt 1 view .LVU7602
3863:src/xeq.c     **** 					return;
 28637              		.loc 1 3863 9 is_stmt 0 view .LVU7603
 28638 0110 044B     		ldr	r3, .L2065+8
3863:src/xeq.c     **** 					return;
 28639              		.loc 1 3863 8 view .LVU7604
 28640 0112 1B68     		ldr	r3, [r3]
 28641 0114 002B     		cmp	r3, #0
 28642 0116 AFD1     		bne	.L2037
 28643 0118 3368     		ldr	r3, [r6]
 28644 011a D6E7     		b	.L2040
 28645              	.L2066:
 28646              		.align	2
ARM GAS  /tmp/cciWh9P3.s 			page 731


 28647              	.L2065:
 28648 011c 00000000 		.word	main_ram
 28649 0120 00000000 		.word	StackBase
 28650 0124 00000000 		.word	Error
 28651              		.cfi_endproc
 28652              	.LFE211:
 28654              		.section	.text.cmdrestm,"ax",%progbits
 28655              		.align	1
 28656              		.p2align 2,,3
 28657              		.global	cmdrestm
 28658              		.syntax unified
 28659              		.thumb
 28660              		.thumb_func
 28661              		.fpu fpv4-sp-d16
 28663              	cmdrestm:
 28664              	.LVL2277:
 28665              	.LFB206:
3549:src/xeq.c     **** 	const int dbl = is_dblmode();
 28666              		.loc 1 3549 47 is_stmt 1 view -0
 28667              		.cfi_startproc
 28668              		@ args = 0, pretend = 0, frame = 0
 28669              		@ frame_needed = 0, uses_anonymous_args = 0
3550:src/xeq.c     **** 	const int intm = is_intmode();
 28670              		.loc 1 3550 2 view .LVU7606
 28671              	.LBB3677:
 28672              	.LBI3677:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28673              		.loc 1 931 5 view .LVU7607
 28674              	.LBB3678:
 932:src/xeq.c     **** }
 28675              		.loc 1 932 2 view .LVU7608
 28676              	.LBE3678:
 28677              	.LBE3677:
3549:src/xeq.c     **** 	const int dbl = is_dblmode();
 28678              		.loc 1 3549 47 is_stmt 0 view .LVU7609
 28679 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 28680              		.cfi_def_cfa_offset 24
 28681              		.cfi_offset 3, -24
 28682              		.cfi_offset 4, -20
 28683              		.cfi_offset 5, -16
 28684              		.cfi_offset 6, -12
 28685              		.cfi_offset 7, -8
 28686              		.cfi_offset 14, -4
 28687              	.LBB3686:
 28688              	.LBB3679:
 932:src/xeq.c     **** }
 28689              		.loc 1 932 12 view .LVU7610
 28690 0002 294F     		ldr	r7, .L2075
 28691 0004 3D68     		ldr	r5, [r7]
 28692              	.LBE3679:
 28693              	.LBE3686:
3551:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 28694              		.loc 1 3551 19 view .LVU7611
 28695 0006 95F8E847 		ldrb	r4, [r5, #2024]	@ zero_extendqisi2
 28696              	.LBB3687:
 28697              	.LBB3680:
 932:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 732


 28698              		.loc 1 932 24 view .LVU7612
 28699 000a B5F8E867 		ldrh	r6, [r5, #2024]
 28700              	.LVL2278:
 932:src/xeq.c     **** }
 28701              		.loc 1 932 24 view .LVU7613
 28702              	.LBE3680:
 28703              	.LBE3687:
3551:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 28704              		.loc 1 3551 2 is_stmt 1 view .LVU7614
3552:src/xeq.c     **** 
 28705              		.loc 1 3552 18 is_stmt 0 view .LVU7615
 28706 000e FFF7FEFF 		bl	get_reg_n
 28707              	.LVL2279:
3552:src/xeq.c     **** 
 28708              		.loc 1 3552 2 view .LVU7616
 28709 0012 0822     		movs	r2, #8
3552:src/xeq.c     **** 
 28710              		.loc 1 3552 18 view .LVU7617
 28711 0014 0146     		mov	r1, r0
3552:src/xeq.c     **** 
 28712              		.loc 1 3552 2 view .LVU7618
 28713 0016 05F2E470 		addw	r0, r5, #2020
 28714 001a FFF7FEFF 		bl	xcopy
 28715              	.LVL2280:
3555:src/xeq.c     **** 		UState.contrast = 6;
 28716              		.loc 1 3555 7 view .LVU7619
 28717 001e 3B68     		ldr	r3, [r7]
3555:src/xeq.c     **** 		UState.contrast = 6;
 28718              		.loc 1 3555 23 view .LVU7620
 28719 0020 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
3555:src/xeq.c     **** 		UState.contrast = 6;
 28720              		.loc 1 3555 5 view .LVU7621
 28721 0024 1107     		lsls	r1, r2, #28
3551:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 28722              		.loc 1 3551 19 view .LVU7622
 28723 0026 04F00104 		and	r4, r4, #1
 28724              	.LVL2281:
3552:src/xeq.c     **** 
 28725              		.loc 1 3552 2 is_stmt 1 view .LVU7623
3555:src/xeq.c     **** 		UState.contrast = 6;
 28726              		.loc 1 3555 2 view .LVU7624
3555:src/xeq.c     **** 		UState.contrast = 6;
 28727              		.loc 1 3555 5 is_stmt 0 view .LVU7625
 28728 002a 04D1     		bne	.L2068
3556:src/xeq.c     **** 
 28729              		.loc 1 3556 3 is_stmt 1 view .LVU7626
3556:src/xeq.c     **** 
 28730              		.loc 1 3556 19 is_stmt 0 view .LVU7627
 28731 002c 0621     		movs	r1, #6
 28732 002e 61F30302 		bfi	r2, r1, #0, #4
 28733 0032 83F8E427 		strb	r2, [r3, #2020]
 28734              	.L2068:
3558:src/xeq.c     **** 		// Switch back to decimal or integer mode
 28735              		.loc 1 3558 2 is_stmt 1 view .LVU7628
3558:src/xeq.c     **** 		// Switch back to decimal or integer mode
 28736              		.loc 1 3558 14 is_stmt 0 view .LVU7629
 28737 0036 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
ARM GAS  /tmp/cciWh9P3.s 			page 733


3558:src/xeq.c     **** 		// Switch back to decimal or integer mode
 28738              		.loc 1 3558 5 view .LVU7630
 28739 003a 02F00101 		and	r1, r2, #1
 28740 003e A142     		cmp	r1, r4
 28741 0040 08D0     		beq	.L2069
3560:src/xeq.c     **** 		if (intm)
 28742              		.loc 1 3560 3 is_stmt 1 view .LVU7631
3560:src/xeq.c     **** 		if (intm)
 28743              		.loc 1 3560 15 is_stmt 0 view .LVU7632
 28744 0042 64F30002 		bfi	r2, r4, #0, #1
 28745 0046 83F8E827 		strb	r2, [r3, #2024]
3561:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 28746              		.loc 1 3561 3 is_stmt 1 view .LVU7633
3561:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 28747              		.loc 1 3561 6 is_stmt 0 view .LVU7634
 28748 004a 4CB3     		cbz	r4, .L2070
3562:src/xeq.c     **** 		else
 28749              		.loc 1 3562 4 is_stmt 1 view .LVU7635
 28750 004c C720     		movs	r0, #199
 28751 004e FFF7FEFF 		bl	op_float
 28752              	.LVL2282:
 28753 0052 3B68     		ldr	r3, [r7]
 28754              	.L2069:
3566:src/xeq.c     **** 		// Switch back to double/single precision
 28755              		.loc 1 3566 2 view .LVU7636
3566:src/xeq.c     **** 		// Switch back to double/single precision
 28756              		.loc 1 3566 6 is_stmt 0 view .LVU7637
 28757 0054 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3566:src/xeq.c     **** 		// Switch back to double/single precision
 28758              		.loc 1 3566 5 view .LVU7638
 28759 0058 D207     		lsls	r2, r2, #31
 28760 005a 20D4     		bmi	.L2067
 28761              	.LBB3688:
 28762              	.LBB3689:
 932:src/xeq.c     **** }
 28763              		.loc 1 932 24 view .LVU7639
 28764 005c B3F8E827 		ldrh	r2, [r3, #2024]
 28765              	.LBE3689:
 28766              	.LBE3688:
 28767              	.LBB3692:
 28768              	.LBB3681:
 28769 0060 44F20101 		movw	r1, #16385
 28770              	.LBE3681:
 28771              	.LBE3692:
 28772              	.LBB3693:
 28773              	.LBB3690:
 28774 0064 0A40     		ands	r2, r2, r1
 28775              	.LBE3690:
 28776              	.LBE3693:
 28777              	.LBB3694:
 28778              	.LBB3682:
 28779 0066 0E40     		ands	r6, r6, r1
 28780              	.LVL2283:
 932:src/xeq.c     **** }
 28781              		.loc 1 932 24 view .LVU7640
 28782              	.LBE3682:
 28783              	.LBE3694:
ARM GAS  /tmp/cciWh9P3.s 			page 734


3566:src/xeq.c     **** 		// Switch back to double/single precision
 28784              		.loc 1 3566 21 view .LVU7641
 28785 0068 A2F58042 		sub	r2, r2, #16384
 28786              	.LBB3695:
 28787              	.LBB3683:
 932:src/xeq.c     **** }
 28788              		.loc 1 932 24 view .LVU7642
 28789 006c A6F58041 		sub	r1, r6, #16384
 28790              	.LBE3683:
 28791              	.LBE3695:
3566:src/xeq.c     **** 		// Switch back to double/single precision
 28792              		.loc 1 3566 21 view .LVU7643
 28793 0070 B2FA82F2 		clz	r2, r2
 28794              	.LBB3696:
 28795              	.LBB3684:
 932:src/xeq.c     **** }
 28796              		.loc 1 932 24 view .LVU7644
 28797 0074 B1FA81F1 		clz	r1, r1
 28798              	.LBE3684:
 28799              	.LBE3696:
3566:src/xeq.c     **** 		// Switch back to double/single precision
 28800              		.loc 1 3566 21 view .LVU7645
 28801 0078 5209     		lsrs	r2, r2, #5
 28802              	.LBB3697:
 28803              	.LBB3685:
 932:src/xeq.c     **** }
 28804              		.loc 1 932 24 view .LVU7646
 28805 007a 4909     		lsrs	r1, r1, #5
 28806              	.LBE3685:
 28807              	.LBE3697:
 28808              	.LBB3698:
 28809              	.LBI3688:
 931:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28810              		.loc 1 931 5 is_stmt 1 view .LVU7647
 28811              	.LBB3691:
 932:src/xeq.c     **** }
 28812              		.loc 1 932 2 view .LVU7648
 28813              	.LBE3691:
 28814              	.LBE3698:
3566:src/xeq.c     **** 		// Switch back to double/single precision
 28815              		.loc 1 3566 21 is_stmt 0 view .LVU7649
 28816 007c 8A42     		cmp	r2, r1
 28817 007e 0ED0     		beq	.L2067
3568:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 28818              		.loc 1 3568 3 is_stmt 1 view .LVU7650
3568:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 28819              		.loc 1 3568 22 is_stmt 0 view .LVU7651
 28820 0080 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 28821 0084 61F38612 		bfi	r2, r1, #6, #1
3569:src/xeq.c     **** 	}
 28822              		.loc 1 3569 3 view .LVU7652
 28823 0088 B6F5804F 		cmp	r6, #16384
3568:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 28824              		.loc 1 3568 22 view .LVU7653
 28825 008c 83F8E927 		strb	r2, [r3, #2025]
3569:src/xeq.c     **** 	}
 28826              		.loc 1 3569 3 is_stmt 1 view .LVU7654
ARM GAS  /tmp/cciWh9P3.s 			page 735


3571:src/xeq.c     **** #endif
 28827              		.loc 1 3571 1 is_stmt 0 view .LVU7655
 28828 0090 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 28829              		.cfi_remember_state
 28830              		.cfi_restore 14
 28831              		.cfi_restore 7
 28832              		.cfi_restore 6
 28833              		.cfi_restore 5
 28834              		.cfi_restore 4
 28835              		.cfi_restore 3
 28836              		.cfi_def_cfa_offset 0
3569:src/xeq.c     **** 	}
 28837              		.loc 1 3569 3 view .LVU7656
 28838 0094 0CBF     		ite	eq
 28839 0096 B220     		moveq	r0, #178
 28840 0098 B120     		movne	r0, #177
 28841 009a FFF7FEBF 		b	op_double
 28842              	.LVL2284:
 28843              	.L2067:
 28844              		.cfi_restore_state
3571:src/xeq.c     **** #endif
 28845              		.loc 1 3571 1 view .LVU7657
 28846 009e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 28847              	.LVL2285:
 28848              	.L2070:
3564:src/xeq.c     **** 	}
 28849              		.loc 1 3564 4 is_stmt 1 view .LVU7658
 28850 00a0 FFF7FEFF 		bl	switch_to_int
 28851              	.LVL2286:
 28852 00a4 3B68     		ldr	r3, [r7]
 28853 00a6 D5E7     		b	.L2069
 28854              	.L2076:
 28855              		.align	2
 28856              	.L2075:
 28857 00a8 00000000 		.word	main_ram
 28858              		.cfi_endproc
 28859              	.LFE206:
 28861              		.section	.text.cmdxin,"ax",%progbits
 28862              		.align	1
 28863              		.p2align 2,,3
 28864              		.global	cmdxin
 28865              		.syntax unified
 28866              		.thumb
 28867              		.thumb_func
 28868              		.fpu fpv4-sp-d16
 28870              	cmdxin:
 28871              	.LVL2287:
 28872              	.LFB264:
5679:src/xeq.c     **** 
 28873              		.loc 1 5679 45 view -0
 28874              		.cfi_startproc
 28875              		@ args = 0, pretend = 0, frame = 40
 28876              		@ frame_needed = 0, uses_anonymous_args = 0
5681:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 28877              		.loc 1 5681 2 view .LVU7660
5691:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28878              		.loc 1 5691 2 view .LVU7661
ARM GAS  /tmp/cciWh9P3.s 			page 736


5679:src/xeq.c     **** 
 28879              		.loc 1 5679 45 is_stmt 0 view .LVU7662
 28880 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 28881              		.cfi_def_cfa_offset 32
 28882              		.cfi_offset 4, -32
 28883              		.cfi_offset 5, -28
 28884              		.cfi_offset 6, -24
 28885              		.cfi_offset 7, -20
 28886              		.cfi_offset 8, -16
 28887              		.cfi_offset 9, -12
 28888              		.cfi_offset 10, -8
 28889              		.cfi_offset 14, -4
5691:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28890              		.loc 1 5691 6 view .LVU7663
 28891 0004 6A4D     		ldr	r5, .L2106
5691:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28892              		.loc 1 5691 5 view .LVU7664
 28893 0006 95F90130 		ldrsb	r3, [r5, #1]
 28894 000a 002B     		cmp	r3, #0
5679:src/xeq.c     **** 
 28895              		.loc 1 5679 45 view .LVU7665
 28896 000c 8AB0     		sub	sp, sp, #40
 28897              		.cfi_def_cfa_offset 72
5691:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28898              		.loc 1 5691 5 view .LVU7666
 28899 000e C0F2AD80 		blt	.L2103
5699:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28900              		.loc 1 5699 2 is_stmt 1 view .LVU7667
 28901 0012 684E     		ldr	r6, .L2106+4
5704:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28902              		.loc 1 5704 26 is_stmt 0 view .LVU7668
 28903 0014 684F     		ldr	r7, .L2106+8
 28904              	.LBB3714:
 28905              	.LBB3715:
 734:src/xeq.c     **** }
 28906              		.loc 1 734 15 view .LVU7669
 28907 0016 DFF8B481 		ldr	r8, .L2106+28
 28908 001a 0446     		mov	r4, r0
 28909              	.LBE3715:
 28910              	.LBE3714:
5699:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28911              		.loc 1 5699 2 view .LVU7670
 28912 001c 4FF4E872 		mov	r2, #464
 28913 0020 0021     		movs	r1, #0
 28914              	.LVL2288:
5699:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28915              		.loc 1 5699 2 view .LVU7671
 28916 0022 3046     		mov	r0, r6
 28917              	.LVL2289:
5699:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 28918              		.loc 1 5699 2 view .LVU7672
 28919 0024 FFF7FEFF 		bl	xset
 28920              	.LVL2290:
5700:src/xeq.c     **** 
 28921              		.loc 1 5700 2 is_stmt 1 view .LVU7673
 28922 0028 1022     		movs	r2, #16
 28923 002a 0021     		movs	r1, #0
ARM GAS  /tmp/cciWh9P3.s 			page 737


 28924 002c 2846     		mov	r0, r5
 28925 002e FFF7FEFF 		bl	xset
 28926              	.LVL2291:
5703:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
 28927              		.loc 1 5703 2 view .LVU7674
 28928              	.LBB3719:
 28929              	.LBI3714:
 733:src/xeq.c     **** 	return State2.state_lift;
 28930              		.loc 1 733 12 view .LVU7675
 28931              	.LBB3716:
 734:src/xeq.c     **** }
 28932              		.loc 1 734 2 view .LVU7676
 28933              	.LBE3716:
 28934              	.LBE3719:
5704:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28935              		.loc 1 5704 26 is_stmt 0 view .LVU7677
 28936 0032 3A68     		ldr	r2, [r7]
 28937              	.LBB3720:
 28938              	.LBB3717:
 734:src/xeq.c     **** }
 28939              		.loc 1 734 15 view .LVU7678
 28940 0034 98F817E0 		ldrb	lr, [r8, #23]	@ zero_extendqisi2
 28941              	.LBE3717:
 28942              	.LBE3720:
5706:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28943              		.loc 1 5706 29 view .LVU7679
 28944 0038 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
5704:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28945              		.loc 1 5704 32 view .LVU7680
 28946 003c 92F8EAC7 		ldrb	ip, [r2, #2026]	@ zero_extendqisi2
5705:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 28947              		.loc 1 5705 32 view .LVU7681
 28948 0040 92F8E907 		ldrb	r0, [r2, #2025]	@ zero_extendqisi2
5707:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28949              		.loc 1 5707 41 view .LVU7682
 28950 0044 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
5722:src/xeq.c     **** 
 28951              		.loc 1 5722 20 view .LVU7683
 28952 0048 B2F8E2A7 		ldrh	r10, [r2, #2018]
 28953 004c A5F80CA0 		strh	r10, [r5, #12]	@ movhi
5706:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28954              		.loc 1 5706 29 view .LVU7684
 28955 0050 03F00103 		and	r3, r3, #1
 28956              	.LBB3721:
 28957              	.LBB3718:
 734:src/xeq.c     **** }
 28958              		.loc 1 734 15 view .LVU7685
 28959 0054 CEF3801E 		ubfx	lr, lr, #6, #1
 28960              	.LBE3718:
 28961              	.LBE3721:
5704:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 28962              		.loc 1 5704 2 is_stmt 1 view .LVU7686
5706:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28963              		.loc 1 5706 21 is_stmt 0 view .LVU7687
 28964 0058 63F03F03 		orn	r3, r3, #63
 28965 005c 43EA4E03 		orr	r3, r3, lr, lsl #1
5704:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
ARM GAS  /tmp/cciWh9P3.s 			page 738


 28966              		.loc 1 5704 32 view .LVU7688
 28967 0060 CCF3C00C 		ubfx	ip, ip, #3, #1
5705:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 28968              		.loc 1 5705 2 is_stmt 1 view .LVU7689
5706:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28969              		.loc 1 5706 21 is_stmt 0 view .LVU7690
 28970 0064 43EA8C03 		orr	r3, r3, ip, lsl #2
5705:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 28971              		.loc 1 5705 32 view .LVU7691
 28972 0068 C0F38010 		ubfx	r0, r0, #6, #1
5706:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28973              		.loc 1 5706 2 is_stmt 1 view .LVU7692
5707:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28974              		.loc 1 5707 9 view .LVU7693
5740:src/xeq.c     **** 	XromIn = (arg & 0x7);
 28975              		.loc 1 5740 35 is_stmt 0 view .LVU7694
 28976 006c C4F3C01C 		ubfx	ip, r4, #7, #1
5707:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28977              		.loc 1 5707 33 view .LVU7695
 28978 0070 95F802E0 		ldrb	lr, [r5, #2]	@ zero_extendqisi2
5706:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28979              		.loc 1 5706 21 view .LVU7696
 28980 0074 43EAC003 		orr	r3, r3, r0, lsl #3
5739:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 28981              		.loc 1 5739 36 view .LVU7697
 28982 0078 C4F38019 		ubfx	r9, r4, #6, #1
5721:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28983              		.loc 1 5721 17 view .LVU7698
 28984 007c 4F48     		ldr	r0, .L2106+12
5706:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28985              		.loc 1 5706 21 view .LVU7699
 28986 007e 43EA0C13 		orr	r3, r3, ip, lsl #4
5707:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28987              		.loc 1 5707 41 view .LVU7700
 28988 0082 C1F30211 		ubfx	r1, r1, #4, #3
5708:src/xeq.c     **** 	XromFlags.xIN = 1;
 28989              		.loc 1 5708 2 is_stmt 1 view .LVU7701
5709:src/xeq.c     **** 
 28990              		.loc 1 5709 2 view .LVU7702
5721:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 28991              		.loc 1 5721 2 view .LVU7703
5706:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 28992              		.loc 1 5706 21 is_stmt 0 view .LVU7704
 28993 0086 43EA4913 		orr	r3, r3, r9, lsl #5
5707:src/xeq.c     **** 	XromFlags.state_lift = 1;
 28994              		.loc 1 5707 33 view .LVU7705
 28995 008a 61F3020E 		bfi	lr, r1, #0, #3
5729:src/xeq.c     **** #endif
 28996              		.loc 1 5729 17 view .LVU7706
 28997 008e 41F2020C 		movw	ip, #4098
5728:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 28998              		.loc 1 5728 24 view .LVU7707
 28999 0092 4FF6FE71 		movw	r1, #65534
5721:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29000              		.loc 1 5721 17 view .LVU7708
 29001 0096 D0F80090 		ldr	r9, [r0]
5729:src/xeq.c     **** #endif
ARM GAS  /tmp/cciWh9P3.s 			page 739


 29002              		.loc 1 5729 17 view .LVU7709
 29003 009a A6F8CCC1 		strh	ip, [r6, #460]	@ movhi
5706:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29004              		.loc 1 5706 21 view .LVU7710
 29005 009e 6B70     		strb	r3, [r5, #1]
5744:src/xeq.c     **** 		// Complex arguments are always in pairs
 29006              		.loc 1 5744 6 view .LVU7711
 29007 00a0 5FFA83FC 		uxtb	ip, r3
5707:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29008              		.loc 1 5707 33 view .LVU7712
 29009 00a4 85F802E0 		strb	lr, [r5, #2]
5728:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29010              		.loc 1 5728 24 view .LVU7713
 29011 00a8 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
5724:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29012              		.loc 1 5724 9 view .LVU7714
 29013 00ac 06F5E87E 		add	lr, r6, #464
5728:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29014              		.loc 1 5728 12 view .LVU7715
 29015 00b0 A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
5744:src/xeq.c     **** 		// Complex arguments are always in pairs
 29016              		.loc 1 5744 5 view .LVU7716
 29017 00b4 DB06     		lsls	r3, r3, #27
5741:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29018              		.loc 1 5741 16 view .LVU7717
 29019 00b6 04F00701 		and	r1, r4, #7
5742:src/xeq.c     **** #endif
 29020              		.loc 1 5742 24 view .LVU7718
 29021 00ba C4F3C204 		ubfx	r4, r4, #3, #3
 29022              	.LVL2292:
5724:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29023              		.loc 1 5724 9 view .LVU7719
 29024 00be C0F800E0 		str	lr, [r0]
5721:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29025              		.loc 1 5721 17 view .LVU7720
 29026 00c2 C5F80890 		str	r9, [r5, #8]
5722:src/xeq.c     **** 
 29027              		.loc 1 5722 2 is_stmt 1 view .LVU7721
5724:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29028              		.loc 1 5724 2 view .LVU7722
5728:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29029              		.loc 1 5728 2 view .LVU7723
5729:src/xeq.c     **** #endif
 29030              		.loc 1 5729 2 view .LVU7724
5739:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29031              		.loc 1 5739 2 view .LVU7725
5740:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29032              		.loc 1 5740 2 view .LVU7726
5741:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29033              		.loc 1 5741 2 view .LVU7727
5741:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29034              		.loc 1 5741 9 is_stmt 0 view .LVU7728
 29035 00c6 2971     		strb	r1, [r5, #4]
5742:src/xeq.c     **** #endif
 29036              		.loc 1 5742 2 is_stmt 1 view .LVU7729
5742:src/xeq.c     **** #endif
 29037              		.loc 1 5742 10 is_stmt 0 view .LVU7730
ARM GAS  /tmp/cciWh9P3.s 			page 740


 29038 00c8 6C71     		strb	r4, [r5, #5]
5744:src/xeq.c     **** 		// Complex arguments are always in pairs
 29039              		.loc 1 5744 2 is_stmt 1 view .LVU7731
5744:src/xeq.c     **** 		// Complex arguments are always in pairs
 29040              		.loc 1 5744 5 is_stmt 0 view .LVU7732
 29041 00ca 03D5     		bpl	.L2081
5746:src/xeq.c     **** 		XromOut <<= 1;
 29042              		.loc 1 5746 3 is_stmt 1 view .LVU7733
5746:src/xeq.c     **** 		XromOut <<= 1;
 29043              		.loc 1 5746 10 is_stmt 0 view .LVU7734
 29044 00cc 4900     		lsls	r1, r1, #1
5747:src/xeq.c     **** 	}
 29045              		.loc 1 5747 11 view .LVU7735
 29046 00ce 6400     		lsls	r4, r4, #1
5746:src/xeq.c     **** 		XromOut <<= 1;
 29047              		.loc 1 5746 10 view .LVU7736
 29048 00d0 2971     		strb	r1, [r5, #4]
5747:src/xeq.c     **** 	}
 29049              		.loc 1 5747 3 is_stmt 1 view .LVU7737
5747:src/xeq.c     **** 	}
 29050              		.loc 1 5747 11 is_stmt 0 view .LVU7738
 29051 00d2 6C71     		strb	r4, [r5, #5]
 29052              	.L2081:
5750:src/xeq.c     **** 
 29053              		.loc 1 5750 9 is_stmt 1 view .LVU7739
5750:src/xeq.c     **** 
 29054              		.loc 1 5750 30 is_stmt 0 view .LVU7740
 29055 00d4 92F8EB37 		ldrb	r3, [r2, #2027]	@ zero_extendqisi2
5761:src/xeq.c     **** 		// Convert integers to decimal128
 29056              		.loc 1 5761 5 view .LVU7741
 29057 00d8 1CF0010F 		tst	ip, #1
5750:src/xeq.c     **** 
 29058              		.loc 1 5750 30 view .LVU7742
 29059 00dc 6FF30613 		bfc	r3, #4, #3
 29060 00e0 82F8EB37 		strb	r3, [r2, #2027]
5761:src/xeq.c     **** 		// Convert integers to decimal128
 29061              		.loc 1 5761 2 is_stmt 1 view .LVU7743
5761:src/xeq.c     **** 		// Convert integers to decimal128
 29062              		.loc 1 5761 5 is_stmt 0 view .LVU7744
 29063 00e4 52D1     		bne	.L2104
5769:src/xeq.c     **** 		// No conversion necessary
 29064              		.loc 1 5769 7 is_stmt 1 view .LVU7745
5769:src/xeq.c     **** 		// No conversion necessary
 29065              		.loc 1 5769 10 is_stmt 0 view .LVU7746
 29066 00e6 1CF0080F 		tst	ip, #8
 29067 00ea 47D1     		bne	.L2105
5790:src/xeq.c     **** #endif
 29068              		.loc 1 5790 3 is_stmt 1 view .LVU7747
 29069 00ec B120     		movs	r0, #177
 29070 00ee FFF7FEFF 		bl	op_double
 29071              	.LVL2293:
 29072              	.L2083:
5795:src/xeq.c     **** 	UState.stack_depth = 1;
 29073              		.loc 1 5795 2 view .LVU7748
 29074              	.LBB3722:
 29075              	.LBI3722:
 747:src/xeq.c     ****     State2.state_lift = 1;
ARM GAS  /tmp/cciWh9P3.s 			page 741


 29076              		.loc 1 747 6 view .LVU7749
 29077              	.LBB3723:
 748:src/xeq.c     **** }
 29078              		.loc 1 748 5 view .LVU7750
 748:src/xeq.c     **** }
 29079              		.loc 1 748 23 is_stmt 0 view .LVU7751
 29080 00f2 98F81730 		ldrb	r3, [r8, #23]	@ zero_extendqisi2
 29081              	.LBE3723:
 29082              	.LBE3722:
5796:src/xeq.c     **** 
 29083              		.loc 1 5796 21 view .LVU7752
 29084 00f6 3A68     		ldr	r2, [r7]
 29085              	.LBB3725:
 29086              	.LBB3724:
 748:src/xeq.c     **** }
 29087              		.loc 1 748 23 view .LVU7753
 29088 00f8 43F04003 		orr	r3, r3, #64
 29089 00fc 88F81730 		strb	r3, [r8, #23]
 29090              	.LBE3724:
 29091              	.LBE3725:
5796:src/xeq.c     **** 
 29092              		.loc 1 5796 2 is_stmt 1 view .LVU7754
5796:src/xeq.c     **** 
 29093              		.loc 1 5796 21 is_stmt 0 view .LVU7755
 29094 0100 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 29095 0104 43F00803 		orr	r3, r3, #8
 29096 0108 82F8EA37 		strb	r3, [r2, #2026]
5799:src/xeq.c     **** 		decNumber x;
 29097              		.loc 1 5799 2 is_stmt 1 view .LVU7756
 29098              	.LVL2294:
5799:src/xeq.c     **** 		decNumber x;
 29099              		.loc 1 5799 14 view .LVU7757
5799:src/xeq.c     **** 		decNumber x;
 29100              		.loc 1 5799 2 is_stmt 0 view .LVU7758
 29101 010c 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 29102 010e 93B3     		cbz	r3, .L2077
5799:src/xeq.c     **** 		decNumber x;
 29103              		.loc 1 5799 9 view .LVU7759
 29104 0110 0024     		movs	r4, #0
 29105 0112 02E0     		b	.L2090
 29106              	.LVL2295:
 29107              	.L2085:
5799:src/xeq.c     **** 		decNumber x;
 29108              		.loc 1 5799 18 view .LVU7760
 29109 0114 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
5799:src/xeq.c     **** 		decNumber x;
 29110              		.loc 1 5799 2 view .LVU7761
 29111 0116 A342     		cmp	r3, r4
 29112 0118 2DDD     		ble	.L2077
 29113              	.LVL2296:
 29114              	.L2090:
 29115              	.LBB3726:
5800:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
 29116              		.loc 1 5800 3 is_stmt 1 view .LVU7762
5801:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29117              		.loc 1 5801 3 view .LVU7763
5801:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
ARM GAS  /tmp/cciWh9P3.s 			page 742


 29118              		.loc 1 5801 7 is_stmt 0 view .LVU7764
 29119 011a 04F16401 		add	r1, r4, #100
 29120 011e 01A8     		add	r0, sp, #4
 29121 0120 FFF7FEFF 		bl	getRegister
 29122              	.LVL2297:
 29123              	.LBE3726:
5799:src/xeq.c     **** 		decNumber x;
 29124              		.loc 1 5799 26 is_stmt 1 view .LVU7765
 29125              	.LBB3733:
5801:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29126              		.loc 1 5801 6 is_stmt 0 view .LVU7766
 29127 0124 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 29128 0126 13F0300F 		tst	r3, #48
 29129              	.LBE3733:
5799:src/xeq.c     **** 		decNumber x;
 29130              		.loc 1 5799 26 view .LVU7767
 29131 012a 04F10104 		add	r4, r4, #1
 29132              	.LVL2298:
5799:src/xeq.c     **** 		decNumber x;
 29133              		.loc 1 5799 14 is_stmt 1 view .LVU7768
 29134              	.LBB3734:
5801:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29135              		.loc 1 5801 6 is_stmt 0 view .LVU7769
 29136 012e F1D0     		beq	.L2085
5804:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29137              		.loc 1 5804 4 is_stmt 1 view .LVU7770
 29138              	.LVL2299:
 29139              	.LBB3727:
 29140              	.LBI3727:
3317:src/xeq.c     **** 	unsigned short mask;
 29141              		.loc 1 3317 5 view .LVU7771
 29142              	.LBB3728:
3318:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 29143              		.loc 1 3318 2 view .LVU7772
3319:src/xeq.c     **** 
 29144              		.loc 1 3319 2 view .LVU7773
3319:src/xeq.c     **** 
 29145              		.loc 1 3319 34 is_stmt 0 view .LVU7774
 29146 0130 0DF10201 		add	r1, sp, #2
 29147 0134 6B20     		movs	r0, #107
 29148 0136 FFF7FEFF 		bl	flag_word
 29149              	.LVL2300:
3321:src/xeq.c     **** }
 29150              		.loc 1 3321 2 is_stmt 1 view .LVU7775
3321:src/xeq.c     **** }
 29151              		.loc 1 3321 24 is_stmt 0 view .LVU7776
 29152 013a BDF80230 		ldrh	r3, [sp, #2]
 29153 013e 0288     		ldrh	r2, [r0]
 29154              	.LBE3728:
 29155              	.LBE3727:
5804:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29156              		.loc 1 5804 7 view .LVU7777
 29157 0140 1A42     		tst	r2, r3
 29158 0142 2DD0     		beq	.L2086
 29159              	.LVL2301:
5805:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29160              		.loc 1 5805 17 is_stmt 1 view .LVU7778
ARM GAS  /tmp/cciWh9P3.s 			page 743


5805:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29161              		.loc 1 5805 5 is_stmt 0 view .LVU7779
 29162 0144 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 29163 0146 53B1     		cbz	r3, .L2087
5806:src/xeq.c     **** 				// Early exit of routine
 29164              		.loc 1 5806 6 view .LVU7780
 29165 0148 1D4E     		ldr	r6, .L2106+16
5805:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29166              		.loc 1 5805 12 view .LVU7781
 29167 014a 0024     		movs	r4, #0
 29168              	.LVL2302:
 29169              	.L2088:
5806:src/xeq.c     **** 				// Early exit of routine
 29170              		.loc 1 5806 6 is_stmt 1 discriminator 3 view .LVU7782
 29171 014c 04F16400 		add	r0, r4, #100
 29172 0150 3146     		mov	r1, r6
 29173 0152 FFF7FEFF 		bl	setRegister
 29174              	.LVL2303:
5805:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29175              		.loc 1 5805 30 discriminator 3 view .LVU7783
5805:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29176              		.loc 1 5805 21 is_stmt 0 discriminator 3 view .LVU7784
 29177 0156 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
5805:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29178              		.loc 1 5805 30 discriminator 3 view .LVU7785
 29179 0158 0134     		adds	r4, r4, #1
 29180              	.LVL2304:
5805:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29181              		.loc 1 5805 17 is_stmt 1 discriminator 3 view .LVU7786
5805:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29182              		.loc 1 5805 5 is_stmt 0 discriminator 3 view .LVU7787
 29183 015a A342     		cmp	r3, r4
 29184 015c F6DC     		bgt	.L2088
 29185              	.LVL2305:
 29186              	.L2087:
5808:src/xeq.c     **** 			} 
 29187              		.loc 1 5808 5 is_stmt 1 view .LVU7788
 29188 015e 8421     		movs	r1, #132
 29189 0160 0020     		movs	r0, #0
 29190 0162 FFF7FEFF 		bl	cmdxout
 29191              	.LVL2306:
 29192              	.LBE3734:
5815:src/xeq.c     **** 
 29193              		.loc 1 5815 1 is_stmt 0 view .LVU7789
 29194 0166 0AB0     		add	sp, sp, #40
 29195              		.cfi_remember_state
 29196              		.cfi_def_cfa_offset 32
 29197              		@ sp needed
 29198 0168 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 29199              	.LVL2307:
 29200              	.L2103:
 29201              		.cfi_restore_state
5692:src/xeq.c     **** 		return;
 29202              		.loc 1 5692 3 is_stmt 1 view .LVU7790
 29203              	.LBB3735:
 29204              	.LBI3735:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/cciWh9P3.s 			page 744


 29205              		.loc 1 536 5 view .LVU7791
 29206              	.LBB3736:
 537:src/xeq.c     **** 		Error = e;
 29207              		.loc 1 537 2 view .LVU7792
 537:src/xeq.c     **** 		Error = e;
 29208              		.loc 1 537 12 is_stmt 0 view .LVU7793
 29209 016c 154B     		ldr	r3, .L2106+20
 537:src/xeq.c     **** 		Error = e;
 29210              		.loc 1 537 5 view .LVU7794
 29211 016e 1A68     		ldr	r2, [r3]
 29212 0170 0AB9     		cbnz	r2, .L2077
 29213              	.LVL2308:
 29214              	.LBB3737:
 29215              	.LBI3737:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29216              		.loc 1 536 5 is_stmt 1 view .LVU7795
 29217              	.LBB3738:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 29218              		.loc 1 538 3 view .LVU7796
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 29219              		.loc 1 538 9 is_stmt 0 view .LVU7797
 29220 0172 0722     		movs	r2, #7
 29221 0174 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 29222              		.loc 1 539 3 is_stmt 1 view .LVU7798
 29223              	.LVL2309:
 29224              	.L2077:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 29225              		.loc 1 539 3 is_stmt 0 view .LVU7799
 29226              	.LBE3738:
 29227              	.LBE3737:
 29228              	.LBE3736:
 29229              	.LBE3735:
5815:src/xeq.c     **** 
 29230              		.loc 1 5815 1 view .LVU7800
 29231 0176 0AB0     		add	sp, sp, #40
 29232              		.cfi_remember_state
 29233              		.cfi_def_cfa_offset 32
 29234              		@ sp needed
 29235 0178 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 29236              	.L2105:
 29237              		.cfi_restore_state
5771:src/xeq.c     **** 		StackBase = XromStack;
 29238              		.loc 1 5771 3 is_stmt 1 view .LVU7801
 29239 017c 124C     		ldr	r4, .L2106+24
 29240 017e 0D48     		ldr	r0, .L2106+4
 29241 0180 2168     		ldr	r1, [r4]
 29242 0182 C022     		movs	r2, #192
 29243 0184 FFF7FEFF 		bl	xcopy
 29244              	.LVL2310:
5772:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29245              		.loc 1 5772 3 view .LVU7802
5772:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29246              		.loc 1 5772 13 is_stmt 0 view .LVU7803
 29247 0188 2660     		str	r6, [r4]
 29248 018a B2E7     		b	.L2083
 29249              	.L2104:
ARM GAS  /tmp/cciWh9P3.s 			page 745


5764:src/xeq.c     **** #endif
 29250              		.loc 1 5764 3 is_stmt 1 view .LVU7804
5764:src/xeq.c     **** #endif
 29251              		.loc 1 5764 22 is_stmt 0 view .LVU7805
 29252 018c 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 29253 0190 43F04003 		orr	r3, r3, #64
 29254 0194 82F8E937 		strb	r3, [r2, #2025]
5766:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
 29255              		.loc 1 5766 3 is_stmt 1 view .LVU7806
 29256 0198 C620     		movs	r0, #198
 29257 019a FFF7FEFF 		bl	op_float
 29258              	.LVL2311:
 29259 019e A8E7     		b	.L2083
 29260              	.LVL2312:
 29261              	.L2086:
 29262              	.LBB3739:
5811:src/xeq.c     **** 			return;
 29263              		.loc 1 5811 5 view .LVU7807
 29264              	.LBB3729:
 29265              	.LBI3729:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29266              		.loc 1 536 5 view .LVU7808
 29267              	.LBB3730:
 537:src/xeq.c     **** 		Error = e;
 29268              		.loc 1 537 2 view .LVU7809
 537:src/xeq.c     **** 		Error = e;
 29269              		.loc 1 537 12 is_stmt 0 view .LVU7810
 29270 01a0 084B     		ldr	r3, .L2106+20
 537:src/xeq.c     **** 		Error = e;
 29271              		.loc 1 537 5 view .LVU7811
 29272 01a2 1A68     		ldr	r2, [r3]
 29273 01a4 002A     		cmp	r2, #0
 29274 01a6 E6D1     		bne	.L2077
 29275              	.LVL2313:
 29276              	.LBB3731:
 29277              	.LBI3731:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29278              		.loc 1 536 5 is_stmt 1 view .LVU7812
 29279              	.LBB3732:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 29280              		.loc 1 538 3 view .LVU7813
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 29281              		.loc 1 538 9 is_stmt 0 view .LVU7814
 29282 01a8 0122     		movs	r2, #1
 29283 01aa 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 29284              		.loc 1 539 3 is_stmt 1 view .LVU7815
 29285              	.LVL2314:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 29286              		.loc 1 539 3 is_stmt 0 view .LVU7816
 29287              	.LBE3732:
 29288              	.LBE3731:
 29289              	.LBE3730:
 29290              	.LBE3729:
5812:src/xeq.c     **** 		}
 29291              		.loc 1 5812 4 is_stmt 1 view .LVU7817
 29292 01ac E3E7     		b	.L2077
ARM GAS  /tmp/cciWh9P3.s 			page 746


 29293              	.L2107:
 29294 01ae 00BF     		.align	2
 29295              	.L2106:
 29296 01b0 00000000 		.word	XromParams
 29297 01b4 00000000 		.word	XromLocal
 29298 01b8 00000000 		.word	main_ram
 29299 01bc 00000000 		.word	RetStk
 29300 01c0 00000000 		.word	const_NaN
 29301 01c4 00000000 		.word	Error
 29302 01c8 00000000 		.word	StackBase
 29303 01cc 00000000 		.word	StateWhileOn
 29304              	.LBE3739:
 29305              		.cfi_endproc
 29306              	.LFE264:
 29308              		.section	.rodata.xeq.str1.4,"aMS",%progbits,1
 29309              		.align	2
 29310              	.LC8:
 29311 0000 25303458 		.ascii	"%04X:%s\000"
 29311      3A257300 
 29312              		.section	.text.xeq,"ax",%progbits
 29313              		.align	1
 29314              		.p2align 2,,3
 29315              		.global	xeq
 29316              		.syntax unified
 29317              		.thumb
 29318              		.thumb_func
 29319              		.fpu fpv4-sp-d16
 29321              	xeq:
 29322              	.LVL2315:
 29323              	.LFB244:
5057:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29324              		.loc 1 5057 1 view -0
 29325              		.cfi_startproc
 29326              		@ args = 0, pretend = 0, frame = 416
 29327              		@ frame_needed = 0, uses_anonymous_args = 0
5058:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
 29328              		.loc 1 5058 2 view .LVU7819
5059:src/xeq.c     **** 	const struct _ustate old = UState;
 29329              		.loc 1 5059 2 view .LVU7820
5057:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29330              		.loc 1 5057 1 is_stmt 0 view .LVU7821
 29331 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 29332              		.cfi_def_cfa_offset 36
 29333              		.cfi_offset 4, -36
 29334              		.cfi_offset 5, -32
 29335              		.cfi_offset 6, -28
 29336              		.cfi_offset 7, -24
 29337              		.cfi_offset 8, -20
 29338              		.cfi_offset 9, -16
 29339              		.cfi_offset 10, -12
 29340              		.cfi_offset 11, -8
 29341              		.cfi_offset 14, -4
5059:src/xeq.c     **** 	const struct _ustate old = UState;
 29342              		.loc 1 5059 31 view .LVU7822
 29343 0004 8F4F     		ldr	r7, .L2386
 29344              	.LBB4037:
 29345              	.LBB4038:
ARM GAS  /tmp/cciWh9P3.s 			page 747


 734:src/xeq.c     **** }
 29346              		.loc 1 734 15 view .LVU7823
 29347 0006 904C     		ldr	r4, .L2386+4
 29348              	.LBE4038:
 29349              	.LBE4037:
5059:src/xeq.c     **** 	const struct _ustate old = UState;
 29350              		.loc 1 5059 31 view .LVU7824
 29351 0008 3B68     		ldr	r3, [r7]
 29352              	.LBB4043:
 29353              	.LBB4039:
 734:src/xeq.c     **** }
 29354              		.loc 1 734 15 view .LVU7825
 29355 000a E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 29356              	.LBE4039:
 29357              	.LBE4043:
5062:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29358              		.loc 1 5062 23 view .LVU7826
 29359 000c B3F8E057 		ldrh	r5, [r3, #2016]
5060:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29360              		.loc 1 5060 23 view .LVU7827
 29361 0010 D3F8E817 		ldr	r1, [r3, #2024]
5059:src/xeq.c     **** 	const struct _ustate old = UState;
 29362              		.loc 1 5059 23 view .LVU7828
 29363 0014 B3F8FCB7 		ldrh	fp, [r3, #2044]
 29364              	.LVL2316:
5060:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29365              		.loc 1 5060 2 is_stmt 1 view .LVU7829
5078:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29366              		.loc 1 5078 2 is_stmt 0 view .LVU7830
 29367 0018 DFF85C92 		ldr	r9, .L2386+52
5057:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29368              		.loc 1 5057 1 view .LVU7831
 29369 001c EBB0     		sub	sp, sp, #428
 29370              		.cfi_def_cfa_offset 464
5060:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29371              		.loc 1 5060 23 view .LVU7832
 29372 001e 0AAE     		add	r6, sp, #40
5062:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29373              		.loc 1 5062 23 view .LVU7833
 29374 0020 0395     		str	r5, [sp, #12]
5063:src/xeq.c     **** #ifdef INFRARED
 29375              		.loc 1 5063 12 view .LVU7834
 29376 0022 E569     		ldr	r5, [r4, #28]
 29377 0024 0495     		str	r5, [sp, #16]
5057:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29378              		.loc 1 5057 1 view .LVU7835
 29379 0026 0546     		mov	r5, r0
5060:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29380              		.loc 1 5060 23 view .LVU7836
 29381 0028 D3F8E407 		ldr	r0, [r3, #2020]
 29382              	.LVL2317:
5060:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29383              		.loc 1 5060 23 view .LVU7837
 29384 002c 86E80300 		stm	r6, {r0, r1}
5061:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
 29385              		.loc 1 5061 2 is_stmt 1 view .LVU7838
 29386              	.LBB4044:
ARM GAS  /tmp/cciWh9P3.s 			page 748


 29387              	.LBI4037:
 733:src/xeq.c     **** 	return State2.state_lift;
 29388              		.loc 1 733 12 view .LVU7839
 29389              	.LBB4040:
 734:src/xeq.c     **** }
 29390              		.loc 1 734 2 view .LVU7840
 29391              	.LBE4040:
 29392              	.LBE4044:
5069:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
 29393              		.loc 1 5069 31 is_stmt 0 view .LVU7841
 29394 0030 6FF49F71 		mvn	r1, #318
 29395 0034 6B18     		adds	r3, r5, r1
 29396              	.LBB4045:
 29397              	.LBB4041:
 734:src/xeq.c     **** }
 29398              		.loc 1 734 15 view .LVU7842
 29399 0036 C2F38012 		ubfx	r2, r2, #6, #1
 29400              	.LBE4041:
 29401              	.LBE4045:
5078:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29402              		.loc 1 5078 2 view .LVU7843
 29403 003a 0DF5847A 		add	r10, sp, #264
5069:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
 29404              		.loc 1 5069 5 view .LVU7844
 29405 003e 012B     		cmp	r3, #1
5078:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29406              		.loc 1 5078 2 view .LVU7845
 29407 0040 D9F80010 		ldr	r1, [r9]
 29408              	.LBB4046:
 29409              	.LBB4042:
 734:src/xeq.c     **** }
 29410              		.loc 1 734 15 view .LVU7846
 29411 0044 0292     		str	r2, [sp, #8]
 29412              	.LVL2318:
 734:src/xeq.c     **** }
 29413              		.loc 1 734 15 view .LVU7847
 29414              	.LBE4042:
 29415              	.LBE4046:
5062:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29416              		.loc 1 5062 2 is_stmt 1 view .LVU7848
5063:src/xeq.c     **** #ifdef INFRARED
 29417              		.loc 1 5063 2 view .LVU7849
5069:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
 29418              		.loc 1 5069 2 view .LVU7850
5078:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29419              		.loc 1 5078 2 is_stmt 0 view .LVU7851
 29420 0046 5046     		mov	r0, r10
5069:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
 29421              		.loc 1 5069 5 view .LVU7852
 29422 0048 76D9     		bls	.L2365
5078:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29423              		.loc 1 5078 2 is_stmt 1 view .LVU7853
 29424 004a A022     		movs	r2, #160
 29425 004c FFF7FEFF 		bl	xcopy
 29426              	.LVL2319:
5083:src/xeq.c     **** 		char buf[16];
 29427              		.loc 1 5083 2 view .LVU7854
ARM GAS  /tmp/cciWh9P3.s 			page 749


5083:src/xeq.c     **** 		char buf[16];
 29428              		.loc 1 5083 5 is_stmt 0 view .LVU7855
 29429 0050 94F91730 		ldrsb	r3, [r4, #23]
 29430 0054 002B     		cmp	r3, #0
 29431 0056 57DB     		blt	.L2113
 29432              	.L2114:
5101:src/xeq.c     **** 	State2.wascomplex = 0;
 29433              		.loc 1 5101 2 is_stmt 1 view .LVU7856
5102:src/xeq.c     **** 	if (isDBL(op))
 29434              		.loc 1 5102 20 is_stmt 0 view .LVU7857
 29435 0058 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
5101:src/xeq.c     **** 	State2.wascomplex = 0;
 29436              		.loc 1 5101 7 view .LVU7858
 29437 005a 7C49     		ldr	r1, .L2386+8
 29438 005c 0023     		movs	r3, #0
5102:src/xeq.c     **** 	if (isDBL(op))
 29439              		.loc 1 5102 20 view .LVU7859
 29440 005e 63F38712 		bfi	r2, r3, #6, #2
 29441 0062 2275     		strb	r2, [r4, #20]
5103:src/xeq.c     **** 		multi(op);
 29442              		.loc 1 5103 6 view .LVU7860
 29443 0064 05F47042 		and	r2, r5, #61440
5103:src/xeq.c     **** 		multi(op);
 29444              		.loc 1 5103 5 view .LVU7861
 29445 0068 B2F5704F 		cmp	r2, #61440
5101:src/xeq.c     **** 	State2.wascomplex = 0;
 29446              		.loc 1 5101 7 view .LVU7862
 29447 006c 0B60     		str	r3, [r1]
5102:src/xeq.c     **** 	if (isDBL(op))
 29448              		.loc 1 5102 2 is_stmt 1 view .LVU7863
5103:src/xeq.c     **** 		multi(op);
 29449              		.loc 1 5103 2 view .LVU7864
5103:src/xeq.c     **** 		multi(op);
 29450              		.loc 1 5103 5 is_stmt 0 view .LVU7865
 29451 006e 00F0B780 		beq	.L2366
5105:src/xeq.c     **** 		rargs(op);
 29452              		.loc 1 5105 7 is_stmt 1 view .LVU7866
5105:src/xeq.c     **** 		rargs(op);
 29453              		.loc 1 5105 10 is_stmt 0 view .LVU7867
 29454 0072 7AB9     		cbnz	r2, .L2367
5108:src/xeq.c     **** 		switch (opKIND(op)) {
 29455              		.loc 1 5108 3 is_stmt 1 view .LVU7868
5108:src/xeq.c     **** 		switch (opKIND(op)) {
 29456              		.loc 1 5108 13 is_stmt 0 view .LVU7869
 29457 0074 764A     		ldr	r2, .L2386+12
 29458 0076 C5F30723 		ubfx	r3, r5, #8, #8
5108:src/xeq.c     **** 		switch (opKIND(op)) {
 29459              		.loc 1 5108 15 view .LVU7870
 29460 007a 1580     		strh	r5, [r2]	@ movhi
5109:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 29461              		.loc 1 5109 3 is_stmt 1 view .LVU7871
 29462 007c 062B     		cmp	r3, #6
 29463 007e 00F20981 		bhi	.L2149
 29464 0082 DFE813F0 		tbh	[pc, r3, lsl #1]
 29465              	.L2151:
 29466 0086 A501     		.2byte	(.L2157-.L2151)/2
 29467 0088 6F00     		.2byte	(.L2156-.L2151)/2
ARM GAS  /tmp/cciWh9P3.s 			page 750


 29468 008a 4202     		.2byte	(.L2155-.L2151)/2
 29469 008c FD00     		.2byte	(.L2154-.L2151)/2
 29470 008e 7F02     		.2byte	(.L2153-.L2151)/2
 29471 0090 0A02     		.2byte	(.L2152-.L2151)/2
 29472 0092 D801     		.2byte	(.L2150-.L2151)/2
 29473              		.p2align 1
 29474              	.L2367:
5106:src/xeq.c     **** 	else {
 29475              		.loc 1 5106 3 view .LVU7872
 29476              	.LVL2320:
 29477              	.LBB4047:
 29478              	.LBI4047:
4925:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
 29479              		.loc 1 4925 13 view .LVU7873
 29480              	.LBB4048:
4926:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 29481              		.loc 1 4926 2 view .LVU7874
4927:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29482              		.loc 1 4927 2 view .LVU7875
4927:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29483              		.loc 1 4927 27 is_stmt 0 view .LVU7876
 29484 0094 4FEA1528 		lsr	r8, r5, #8
4929:src/xeq.c     **** 
 29485              		.loc 1 4929 33 view .LVU7877
 29486 0098 6E4A     		ldr	r2, .L2386+16
4931:src/xeq.c     **** 
 29487              		.loc 1 4931 12 view .LVU7878
 29488 009a 6D49     		ldr	r1, .L2386+12
4927:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29489              		.loc 1 4927 27 view .LVU7879
 29490 009c A8F12008 		sub	r8, r8, #32
 29491 00a0 5FFA88F8 		uxtb	r8, r8
 29492              	.LVL2321:
4928:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
 29493              		.loc 1 4928 2 is_stmt 1 view .LVU7880
4929:src/xeq.c     **** 
 29494              		.loc 1 4929 2 view .LVU7881
4929:src/xeq.c     **** 
 29495              		.loc 1 4929 33 is_stmt 0 view .LVU7882
 29496 00a4 02EB0810 		add	r0, r2, r8, lsl #4
4931:src/xeq.c     **** 
 29497              		.loc 1 4931 14 view .LVU7883
 29498 00a8 A1F80080 		strh	r8, [r1]	@ movhi
4929:src/xeq.c     **** 
 29499              		.loc 1 4929 33 view .LVU7884
 29500 00ac 0379     		ldrb	r3, [r0, #4]	@ zero_extendqisi2
 29501 00ae CDE90603 		strd	r0, r3, [sp, #24]
 29502              	.LVL2322:
4931:src/xeq.c     **** 
 29503              		.loc 1 4931 2 is_stmt 1 view .LVU7885
4933:src/xeq.c     **** 
 29504              		.loc 1 4933 2 view .LVU7886
4929:src/xeq.c     **** 
 29505              		.loc 1 4929 33 is_stmt 0 view .LVU7887
 29506 00b2 4FEA0813 		lsl	r3, r8, #4
 29507 00b6 0593     		str	r3, [sp, #20]
4933:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 751


 29508              		.loc 1 4933 2 view .LVU7888
 29509 00b8 FFF7FEFF 		bl	process_cmdline
 29510              	.LVL2323:
4935:src/xeq.c     **** 		illegal(op);
 29511              		.loc 1 4935 2 is_stmt 1 view .LVU7889
4935:src/xeq.c     **** 		illegal(op);
 29512              		.loc 1 4935 5 is_stmt 0 view .LVU7890
 29513 00bc B8F19B0F 		cmp	r8, #155
 29514 00c0 0698     		ldr	r0, [sp, #24]
 29515 00c2 644A     		ldr	r2, .L2386+16
 29516 00c4 00F2E680 		bhi	.L2149
4939:src/xeq.c     **** 		set_lift();
 29517              		.loc 1 4939 2 is_stmt 1 view .LVU7891
4939:src/xeq.c     **** 		set_lift();
 29518              		.loc 1 4939 6 is_stmt 0 view .LVU7892
 29519 00c8 0599     		ldr	r1, [sp, #20]
 29520 00ca 5158     		ldr	r1, [r2, r1]
 29521 00cc 0691     		str	r1, [sp, #24]
4939:src/xeq.c     **** 		set_lift();
 29522              		.loc 1 4939 5 view .LVU7893
 29523 00ce 0029     		cmp	r1, #0
 29524 00d0 00F0AD80 		beq	.L2342
4926:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 29525              		.loc 1 4926 15 view .LVU7894
 29526 00d4 05F07F01 		and	r1, r5, #127
 29527              	.LVL2324:
4944:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 29528              		.loc 1 4944 2 is_stmt 1 view .LVU7895
4944:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 29529              		.loc 1 4944 5 is_stmt 0 view .LVU7896
 29530 00d8 2D06     		lsls	r5, r5, #24
 29531              	.LVL2325:
4944:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 29532              		.loc 1 4944 5 view .LVU7897
 29533 00da 40F1DA82 		bpl	.L2130
4945:src/xeq.c     **** 			// Get the argument by reading a register
 29534              		.loc 1 4945 3 is_stmt 1 view .LVU7898
4945:src/xeq.c     **** 			// Get the argument by reading a register
 29535              		.loc 1 4945 19 is_stmt 0 view .LVU7899
 29536 00de 4579     		ldrb	r5, [r0, #5]	@ zero_extendqisi2
4945:src/xeq.c     **** 			// Get the argument by reading a register
 29537              		.loc 1 4945 6 view .LVU7900
 29538 00e0 EB07     		lsls	r3, r5, #31
 29539 00e2 40F14183 		bpl	.L2131
 29540              	.LBB4049:
4947:src/xeq.c     **** 			unsigned long long int regval;
 29541              		.loc 1 4947 4 is_stmt 1 view .LVU7901
4948:src/xeq.c     **** 
 29542              		.loc 1 4948 4 view .LVU7902
4950:src/xeq.c     **** 				// Invalid register specified for indirect access
 29543              		.loc 1 4950 4 view .LVU7903
4950:src/xeq.c     **** 				// Invalid register specified for indirect access
 29544              		.loc 1 4950 14 is_stmt 0 view .LVU7904
 29545 00e6 0A20     		movs	r0, #10
 29546 00e8 0891     		str	r1, [sp, #32]
 29547 00ea FFF7FEFF 		bl	get_reg_limit
 29548              	.LVL2326:
ARM GAS  /tmp/cciWh9P3.s 			page 752


4950:src/xeq.c     **** 				// Invalid register specified for indirect access
 29549              		.loc 1 4950 7 view .LVU7905
 29550 00ee 0899     		ldr	r1, [sp, #32]
 29551 00f0 8142     		cmp	r1, r0
 29552 00f2 40F2BA82 		bls	.L2132
4952:src/xeq.c     **** 				return;
 29553              		.loc 1 4952 5 is_stmt 1 view .LVU7906
 29554              	.LVL2327:
 29555              	.LBB4050:
 29556              	.LBI4050:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29557              		.loc 1 536 5 view .LVU7907
 29558              	.LBB4051:
 537:src/xeq.c     **** 		Error = e;
 29559              		.loc 1 537 2 view .LVU7908
 537:src/xeq.c     **** 		Error = e;
 29560              		.loc 1 537 12 is_stmt 0 view .LVU7909
 29561 00f6 584B     		ldr	r3, .L2386+20
 29562 00f8 1A68     		ldr	r2, [r3]
 537:src/xeq.c     **** 		Error = e;
 29563              		.loc 1 537 5 view .LVU7910
 29564 00fa 0AB9     		cbnz	r2, .L2134
 29565              	.LVL2328:
 29566              	.LBB4052:
 29567              	.LBI4052:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29568              		.loc 1 536 5 is_stmt 1 view .LVU7911
 29569              	.LBB4053:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 29570              		.loc 1 538 3 view .LVU7912
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 29571              		.loc 1 538 9 is_stmt 0 view .LVU7913
 29572 00fc 0822     		movs	r2, #8
 29573 00fe 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 29574              		.loc 1 539 3 is_stmt 1 view .LVU7914
 29575              	.LVL2329:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 29576              		.loc 1 539 3 is_stmt 0 view .LVU7915
 29577              	.LBE4053:
 29578              	.LBE4052:
 29579              	.LBE4051:
 29580              	.LBE4050:
4953:src/xeq.c     **** 			}
 29581              		.loc 1 4953 5 is_stmt 1 view .LVU7916
4953:src/xeq.c     **** 			}
 29582              		.loc 1 4953 5 is_stmt 0 view .LVU7917
 29583              	.LBE4049:
 29584              	.LBE4048:
 29585              	.LBE4047:
5117:src/xeq.c     **** 		}
 29586              		.loc 1 5117 12 is_stmt 1 view .LVU7918
5127:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29587              		.loc 1 5127 2 view .LVU7919
 29588              	.L2134:
5127:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29589              		.loc 1 5127 2 is_stmt 0 view .LVU7920
ARM GAS  /tmp/cciWh9P3.s 			page 753


 29590 0100 DFF87881 		ldr	r8, .L2386+56
 29591 0104 1046     		mov	r0, r2
 29592 0106 CEE0     		b	.L2247
 29593              	.LVL2330:
 29594              	.L2113:
5083:src/xeq.c     **** 		char buf[16];
 29595              		.loc 1 5083 22 view .LVU7921
 29596 0108 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
5083:src/xeq.c     **** 		char buf[16];
 29597              		.loc 1 5083 19 view .LVU7922
 29598 010a 9B07     		lsls	r3, r3, #30
 29599 010c A4D4     		bmi	.L2114
 29600              	.LBB4078:
5084:src/xeq.c     **** 		if (Running)
 29601              		.loc 1 5084 3 is_stmt 1 view .LVU7923
5085:src/xeq.c     **** 			print_step(op);
 29602              		.loc 1 5085 3 view .LVU7924
5085:src/xeq.c     **** 			print_step(op);
 29603              		.loc 1 5085 7 is_stmt 0 view .LVU7925
 29604 010e DFF86C81 		ldr	r8, .L2386+56
5085:src/xeq.c     **** 			print_step(op);
 29605              		.loc 1 5085 6 view .LVU7926
 29606 0112 D8F80030 		ldr	r3, [r8]
 29607 0116 002B     		cmp	r3, #0
 29608 0118 40F09080 		bne	.L2368
5088:src/xeq.c     **** 		DispMsg = TraceBuffer;
 29609              		.loc 1 5088 4 is_stmt 1 view .LVU7927
 29610 011c 39A9     		add	r1, sp, #228
 29611 011e 2846     		mov	r0, r5
 29612 0120 FFF7FEFF 		bl	prt
 29613              	.LVL2331:
 29614 0124 4D49     		ldr	r1, .L2386+24
 29615 0126 0346     		mov	r3, r0
 29616 0128 2A46     		mov	r2, r5
 29617 012a 4D48     		ldr	r0, .L2386+28
 29618 012c FFF7FEFF 		bl	sprintf
 29619              	.LVL2332:
 29620              	.L2116:
5089:src/xeq.c     **** 	}
 29621              		.loc 1 5089 3 view .LVU7928
5089:src/xeq.c     **** 	}
 29622              		.loc 1 5089 11 is_stmt 0 view .LVU7929
 29623 0130 4C4B     		ldr	r3, .L2386+32
 29624 0132 4B4A     		ldr	r2, .L2386+28
 29625 0134 1A60     		str	r2, [r3]
 29626 0136 8FE7     		b	.L2114
 29627              	.LVL2333:
 29628              	.L2365:
5089:src/xeq.c     **** 	}
 29629              		.loc 1 5089 11 view .LVU7930
 29630              	.LBE4078:
5072:src/xeq.c     **** 		Cmdline[0] = '0';
 29631              		.loc 1 5072 3 is_stmt 1 view .LVU7931
5073:src/xeq.c     **** 		Cmdline[1] = '\0';
 29632              		.loc 1 5073 14 is_stmt 0 view .LVU7932
 29633 0138 3023     		movs	r3, #48
5072:src/xeq.c     **** 		Cmdline[0] = '0';
ARM GAS  /tmp/cciWh9P3.s 			page 754


 29634              		.loc 1 5072 14 view .LVU7933
 29635 013a 4FF00008 		mov	r8, #0
5078:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29636              		.loc 1 5078 2 view .LVU7934
 29637 013e A022     		movs	r2, #160
5073:src/xeq.c     **** 		Cmdline[1] = '\0';
 29638              		.loc 1 5073 14 view .LVU7935
 29639 0140 2384     		strh	r3, [r4, #32]	@ movhi
5072:src/xeq.c     **** 		Cmdline[0] = '0';
 29640              		.loc 1 5072 14 view .LVU7936
 29641 0142 84F81E80 		strb	r8, [r4, #30]
 29642              	.LVL2334:
5073:src/xeq.c     **** 		Cmdline[1] = '\0';
 29643              		.loc 1 5073 3 is_stmt 1 view .LVU7937
5074:src/xeq.c     **** 	}
 29644              		.loc 1 5074 3 view .LVU7938
5078:src/xeq.c     **** #if defined(CONSOLE) && !defined(DM42)
 29645              		.loc 1 5078 2 view .LVU7939
 29646 0146 FFF7FEFF 		bl	xcopy
 29647              	.LVL2335:
5083:src/xeq.c     **** 		char buf[16];
 29648              		.loc 1 5083 2 view .LVU7940
5083:src/xeq.c     **** 		char buf[16];
 29649              		.loc 1 5083 5 is_stmt 0 view .LVU7941
 29650 014a 94F91730 		ldrsb	r3, [r4, #23]
 29651 014e 4345     		cmp	r3, r8
 29652 0150 DADB     		blt	.L2113
5101:src/xeq.c     **** 	State2.wascomplex = 0;
 29653              		.loc 1 5101 2 is_stmt 1 view .LVU7942
5102:src/xeq.c     **** 	if (isDBL(op))
 29654              		.loc 1 5102 20 is_stmt 0 view .LVU7943
 29655 0152 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
5101:src/xeq.c     **** 	State2.wascomplex = 0;
 29656              		.loc 1 5101 7 view .LVU7944
 29657 0154 3D49     		ldr	r1, .L2386+8
5108:src/xeq.c     **** 		switch (opKIND(op)) {
 29658              		.loc 1 5108 13 view .LVU7945
 29659 0156 3E4A     		ldr	r2, .L2386+12
5101:src/xeq.c     **** 	State2.wascomplex = 0;
 29660              		.loc 1 5101 7 view .LVU7946
 29661 0158 C1F80080 		str	r8, [r1]
5102:src/xeq.c     **** 	if (isDBL(op))
 29662              		.loc 1 5102 2 is_stmt 1 view .LVU7947
5102:src/xeq.c     **** 	if (isDBL(op))
 29663              		.loc 1 5102 20 is_stmt 0 view .LVU7948
 29664 015c 68F38713 		bfi	r3, r8, #6, #2
 29665 0160 2375     		strb	r3, [r4, #20]
5103:src/xeq.c     **** 		multi(op);
 29666              		.loc 1 5103 2 is_stmt 1 view .LVU7949
5108:src/xeq.c     **** 		switch (opKIND(op)) {
 29667              		.loc 1 5108 3 view .LVU7950
5108:src/xeq.c     **** 		switch (opKIND(op)) {
 29668              		.loc 1 5108 15 is_stmt 0 view .LVU7951
 29669 0162 1580     		strh	r5, [r2]	@ movhi
5109:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 29670              		.loc 1 5109 3 is_stmt 1 view .LVU7952
 29671              	.L2156:
ARM GAS  /tmp/cciWh9P3.s 			page 755


5111:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
 29672              		.loc 1 5111 18 view .LVU7953
 29673              	.LVL2336:
 29674              	.LBB4079:
 29675              	.LBI4079:
4373:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
 29676              		.loc 1 4373 13 view .LVU7954
 29677              	.LBB4080:
4374:src/xeq.c     **** 
 29678              		.loc 1 4374 2 view .LVU7955
4374:src/xeq.c     **** 
 29679              		.loc 1 4374 21 is_stmt 0 view .LVU7956
 29680 0164 EDB2     		uxtb	r5, r5
 29681              	.LVL2337:
4376:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
 29682              		.loc 1 4376 2 is_stmt 1 view .LVU7957
 29683 0166 FFF7FEFF 		bl	process_cmdline
 29684              	.LVL2338:
4377:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 29685              		.loc 1 4377 2 view .LVU7958
4377:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 29686              		.loc 1 4377 5 is_stmt 0 view .LVU7959
 29687 016a C42D     		cmp	r5, #196
 29688 016c 00F22883 		bhi	.L2192
4378:src/xeq.c     **** 			bad_mode_error();
 29689              		.loc 1 4378 3 is_stmt 1 view .LVU7960
4378:src/xeq.c     **** 			bad_mode_error();
 29690              		.loc 1 4378 7 is_stmt 0 view .LVU7961
 29691 0170 3B68     		ldr	r3, [r7]
 29692 0172 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4378:src/xeq.c     **** 			bad_mode_error();
 29693              		.loc 1 4378 6 view .LVU7962
 29694 0176 13F0010F 		tst	r3, #1
4378:src/xeq.c     **** 			bad_mode_error();
 29695              		.loc 1 4378 23 view .LVU7963
 29696 017a 3B4B     		ldr	r3, .L2386+36
4378:src/xeq.c     **** 			bad_mode_error();
 29697              		.loc 1 4378 6 view .LVU7964
 29698 017c 40F0B084 		bne	.L2333
 29699 0180 2A01     		lsls	r2, r5, #4
 29700              	.L2193:
4380:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 29701              		.loc 1 4380 8 is_stmt 1 view .LVU7965
4380:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 29702              		.loc 1 4380 14 is_stmt 0 view .LVU7966
 29703 0182 53F80280 		ldr	r8, [r3, r2]
 29704 0186 1344     		add	r3, r3, r2
 29705 0188 0593     		str	r3, [sp, #20]
4380:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 29706              		.loc 1 4380 11 view .LVU7967
 29707 018a B8F1000F 		cmp	r8, #0
 29708 018e 14D0     		beq	.L2197
 29709              	.LBB4081:
4381:src/xeq.c     **** 			if (dispatch_xrom(fp))
 29710              		.loc 1 4381 4 is_stmt 1 view .LVU7968
 29711              	.LVL2339:
4382:src/xeq.c     **** 				return;
ARM GAS  /tmp/cciWh9P3.s 			page 756


 29712              		.loc 1 4382 4 view .LVU7969
4382:src/xeq.c     **** 				return;
 29713              		.loc 1 4382 8 is_stmt 0 view .LVU7970
 29714 0190 4046     		mov	r0, r8
 29715 0192 FFF7FEFF 		bl	dispatch_xrom
 29716              	.LVL2340:
4382:src/xeq.c     **** 				return;
 29717              		.loc 1 4382 7 view .LVU7971
 29718 0196 059B     		ldr	r3, [sp, #20]
 29719 0198 0028     		cmp	r0, #0
 29720 019a 40F06382 		bne	.L2121
4385:src/xeq.c     **** 				case 2:	lift_if_enabled();
 29721              		.loc 1 4385 5 is_stmt 1 view .LVU7972
 29722 019e 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 29723 01a0 03F00303 		and	r3, r3, #3
 29724 01a4 012B     		cmp	r3, #1
 29725 01a6 00F0FB84 		beq	.L2199
 29726 01aa 022B     		cmp	r3, #2
 29727 01ac 03D1     		bne	.L2200
4386:src/xeq.c     **** 				case 1:	lift_if_enabled();
 29728              		.loc 1 4386 13 view .LVU7973
 29729              	.LBB4082:
 29730              	.LBI4082:
 737:src/xeq.c     **** 	if (get_lift())
 29731              		.loc 1 737 6 view .LVU7974
 29732              	.LBB4083:
 738:src/xeq.c     **** 		lift();
 29733              		.loc 1 738 2 view .LVU7975
 29734              	.LBB4084:
 29735              	.LBI4084:
 733:src/xeq.c     **** 	return State2.state_lift;
 29736              		.loc 1 733 12 view .LVU7976
 29737              	.LBB4085:
 734:src/xeq.c     **** }
 29738              		.loc 1 734 2 view .LVU7977
 734:src/xeq.c     **** }
 29739              		.loc 1 734 15 is_stmt 0 view .LVU7978
 29740 01ae E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 29741              	.LBE4085:
 29742              	.LBE4084:
 738:src/xeq.c     **** 		lift();
 29743              		.loc 1 738 5 view .LVU7979
 29744 01b0 5B06     		lsls	r3, r3, #25
 29745 01b2 00F1F384 		bmi	.L2369
 29746              	.L2200:
 29747              	.LBE4083:
 29748              	.LBE4082:
4389:src/xeq.c     **** 					break;
 29749              		.loc 1 4389 6 is_stmt 1 view .LVU7980
 29750 01b6 2846     		mov	r0, r5
 29751 01b8 C047     		blx	r8
 29752              	.LVL2341:
4390:src/xeq.c     **** 				}
 29753              		.loc 1 4390 6 view .LVU7981
 29754              	.L2197:
4390:src/xeq.c     **** 				}
 29755              		.loc 1 4390 6 is_stmt 0 view .LVU7982
ARM GAS  /tmp/cciWh9P3.s 			page 757


 29756              	.LBE4081:
4395:src/xeq.c     **** 	if (idx != OP_rCLX)
 29757              		.loc 1 4395 3 is_stmt 1 view .LVU7983
4396:src/xeq.c     **** 		set_lift();
 29758              		.loc 1 4396 2 view .LVU7984
 29759 01ba 274B     		ldr	r3, .L2386+20
4396:src/xeq.c     **** 		set_lift();
 29760              		.loc 1 4396 5 is_stmt 0 view .LVU7985
 29761 01bc 3F2D     		cmp	r5, #63
 29762 01be 1A68     		ldr	r2, [r3]
 29763 01c0 03D0     		beq	.L2124
 29764              	.L2203:
4397:src/xeq.c     **** }
 29765              		.loc 1 4397 3 is_stmt 1 view .LVU7986
 29766              	.LBB4092:
 29767              	.LBI4092:
 747:src/xeq.c     ****     State2.state_lift = 1;
 29768              		.loc 1 747 6 view .LVU7987
 29769              	.LBB4093:
 748:src/xeq.c     **** }
 29770              		.loc 1 748 5 view .LVU7988
 748:src/xeq.c     **** }
 29771              		.loc 1 748 23 is_stmt 0 view .LVU7989
 29772 01c2 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 29773 01c4 41F04001 		orr	r1, r1, #64
 29774 01c8 E175     		strb	r1, [r4, #23]
 29775              	.LVL2342:
 29776              	.L2124:
 748:src/xeq.c     **** }
 29777              		.loc 1 748 23 view .LVU7990
 29778              	.LBE4093:
 29779              	.LBE4092:
 29780              	.LBE4080:
 29781              	.LBE4079:
5117:src/xeq.c     **** 		}
 29782              		.loc 1 5117 12 is_stmt 1 discriminator 1 view .LVU7991
5127:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29783              		.loc 1 5127 2 discriminator 1 view .LVU7992
5127:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 29784              		.loc 1 5127 5 is_stmt 0 discriminator 1 view .LVU7993
 29785 01ca 002A     		cmp	r2, #0
 29786 01cc 98D1     		bne	.L2134
 29787              	.LVL2343:
 29788              	.L2234:
5196:src/xeq.c     **** #ifdef INFRARED
 29789              		.loc 1 5196 2 is_stmt 1 view .LVU7994
 29790              	.LBB4131:
 29791              	.LBI4131:
4201:src/xeq.c     **** 	// extern int IntMaxWindow;
 29792              		.loc 1 4201 6 view .LVU7995
 29793              	.LBB4132:
4204:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 29794              		.loc 1 4204 2 view .LVU7996
4204:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 29795              		.loc 1 4204 16 is_stmt 0 view .LVU7997
 29796 01ce 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4205:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 758


 29797              		.loc 1 4205 15 view .LVU7998
 29798 01d0 0022     		movs	r2, #0
4204:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 29799              		.loc 1 4204 16 view .LVU7999
 29800 01d2 6FF3C503 		bfc	r3, #3, #3
 29801 01d6 2375     		strb	r3, [r4, #20]
4205:src/xeq.c     **** }
 29802              		.loc 1 4205 2 is_stmt 1 view .LVU8000
4205:src/xeq.c     **** }
 29803              		.loc 1 4205 15 is_stmt 0 view .LVU8001
 29804 01d8 6274     		strb	r2, [r4, #17]
 29805              	.LBE4132:
 29806              	.LBE4131:
5201:src/xeq.c     **** 
 29807              		.loc 1 5201 1 view .LVU8002
 29808 01da 6BB0     		add	sp, sp, #428
 29809              		.cfi_remember_state
 29810              		.cfi_def_cfa_offset 36
 29811              		@ sp needed
 29812 01dc BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 29813              	.LVL2344:
 29814              	.L2366:
 29815              		.cfi_restore_state
5104:src/xeq.c     **** 	else if (isRARG(op))
 29816              		.loc 1 5104 3 is_stmt 1 view .LVU8003
 29817              	.LBB4133:
 29818              	.LBI4133:
5021:src/xeq.c     **** 	const int cmd = opDBL(op);
 29819              		.loc 1 5021 13 view .LVU8004
 29820              	.LBB4134:
5022:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 29821              		.loc 1 5022 2 view .LVU8005
5023:src/xeq.c     **** 
 29822              		.loc 1 5023 12 is_stmt 0 view .LVU8006
 29823 01e0 1B4B     		ldr	r3, .L2386+12
5022:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 29824              		.loc 1 5022 12 view .LVU8007
 29825 01e2 C5F30328 		ubfx	r8, r5, #8, #4
 29826              	.LVL2345:
5023:src/xeq.c     **** 
 29827              		.loc 1 5023 2 is_stmt 1 view .LVU8008
5023:src/xeq.c     **** 
 29828              		.loc 1 5023 14 is_stmt 0 view .LVU8009
 29829 01e6 A3F80080 		strh	r8, [r3]	@ movhi
5025:src/xeq.c     **** 
 29830              		.loc 1 5025 2 is_stmt 1 view .LVU8010
 29831              	.LBB4135:
 29832              	.LBI4135:
1145:src/xeq.c     **** 	process_cmdline();
 29833              		.loc 1 1145 6 view .LVU8011
 29834              	.LBB4136:
1146:src/xeq.c     **** 	set_lift();
 29835              		.loc 1 1146 2 view .LVU8012
 29836 01ea FFF7FEFF 		bl	process_cmdline
 29837              	.LVL2346:
1147:src/xeq.c     **** }
 29838              		.loc 1 1147 2 view .LVU8013
ARM GAS  /tmp/cciWh9P3.s 			page 759


 29839              	.LBB4137:
 29840              	.LBI4137:
 747:src/xeq.c     ****     State2.state_lift = 1;
 29841              		.loc 1 747 6 view .LVU8014
 29842              	.LBB4138:
 748:src/xeq.c     **** }
 29843              		.loc 1 748 5 view .LVU8015
 748:src/xeq.c     **** }
 29844              		.loc 1 748 23 is_stmt 0 view .LVU8016
 29845 01ee E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 29846              	.LBE4138:
 29847              	.LBE4137:
 29848              	.LBE4136:
 29849              	.LBE4135:
5027:src/xeq.c     **** 		illegal(op);
 29850              		.loc 1 5027 5 view .LVU8017
 29851 01f0 B8F10A0F 		cmp	r8, #10
 29852              	.LBB4142:
 29853              	.LBB4141:
 29854              	.LBB4140:
 29855              	.LBB4139:
 748:src/xeq.c     **** }
 29856              		.loc 1 748 23 view .LVU8018
 29857 01f4 43F04003 		orr	r3, r3, #64
 29858 01f8 E375     		strb	r3, [r4, #23]
 29859              	.LBE4139:
 29860              	.LBE4140:
 29861              	.LBE4141:
 29862              	.LBE4142:
5027:src/xeq.c     **** 		illegal(op);
 29863              		.loc 1 5027 2 is_stmt 1 view .LVU8019
5027:src/xeq.c     **** 		illegal(op);
 29864              		.loc 1 5027 5 is_stmt 0 view .LVU8020
 29865 01fa 00F30882 		bgt	.L2370
5031:src/xeq.c     **** 		return;
 29866              		.loc 1 5031 2 is_stmt 1 view .LVU8021
5031:src/xeq.c     **** 		return;
 29867              		.loc 1 5031 6 is_stmt 0 view .LVU8022
 29868 01fe 1B4A     		ldr	r2, .L2386+40
 29869 0200 4FEA0813 		lsl	r3, r8, #4
 29870 0204 D258     		ldr	r2, [r2, r3]
5031:src/xeq.c     **** 		return;
 29871              		.loc 1 5031 5 view .LVU8023
 29872 0206 002A     		cmp	r2, #0
 29873 0208 00F02C82 		beq	.L2121
 29874              	.LBB4143:
5034:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 29875              		.loc 1 5034 3 is_stmt 1 view .LVU8024
 29876              	.LVL2347:
5035:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 29877              		.loc 1 5035 3 view .LVU8025
 29878              	.LBB4144:
 29879              	.LBI4144:
4247:src/xeq.c     **** {
 29880              		.loc 1 4247 24 view .LVU8026
 29881              	.LBB4145:
4249:src/xeq.c     **** 	if (xp < xrom)
ARM GAS  /tmp/cciWh9P3.s 			page 760


 29882              		.loc 1 4249 2 view .LVU8027
4250:src/xeq.c     **** 		return NULL;
 29883              		.loc 1 4250 5 is_stmt 0 view .LVU8028
 29884 020c 184B     		ldr	r3, .L2386+44
4249:src/xeq.c     **** 	if (xp < xrom)
 29885              		.loc 1 4249 59 view .LVU8029
 29886 020e 22F00101 		bic	r1, r2, #1
 29887              	.LVL2348:
4250:src/xeq.c     **** 		return NULL;
 29888              		.loc 1 4250 2 is_stmt 1 view .LVU8030
4250:src/xeq.c     **** 		return NULL;
 29889              		.loc 1 4250 5 is_stmt 0 view .LVU8031
 29890 0212 9942     		cmp	r1, r3
 29891 0214 08D3     		bcc	.L2122
4254:src/xeq.c     **** 		return NULL;
 29892              		.loc 1 4254 2 is_stmt 1 view .LVU8032
4254:src/xeq.c     **** 		return NULL;
 29893              		.loc 1 4254 17 is_stmt 0 view .LVU8033
 29894 0216 1748     		ldr	r0, .L2386+48
 29895 0218 0088     		ldrh	r0, [r0]
 29896 021a 03EB4003 		add	r3, r3, r0, lsl #1
4254:src/xeq.c     **** 		return NULL;
 29897              		.loc 1 4254 5 view .LVU8034
 29898 021e 9942     		cmp	r1, r3
 29899 0220 02D2     		bcs	.L2122
 29900              	.LVL2349:
4254:src/xeq.c     **** 		return NULL;
 29901              		.loc 1 4254 5 view .LVU8035
 29902              	.LBE4145:
 29903              	.LBE4144:
5035:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 29904              		.loc 1 5035 6 view .LVU8036
 29905 0222 0029     		cmp	r1, #0
 29906 0224 40F0EC82 		bne	.L2371
 29907              	.L2122:
5045:src/xeq.c     **** 			set_lift();
 29908              		.loc 1 5045 4 is_stmt 1 view .LVU8037
 29909 0228 4146     		mov	r1, r8
 29910 022a 2846     		mov	r0, r5
 29911 022c 9047     		blx	r2
 29912              	.LVL2350:
5046:src/xeq.c     **** 		}
 29913              		.loc 1 5046 4 view .LVU8038
 29914              	.LBB4146:
 29915              	.LBI4146:
 747:src/xeq.c     ****     State2.state_lift = 1;
 29916              		.loc 1 747 6 view .LVU8039
 29917              	.LBB4147:
 748:src/xeq.c     **** }
 29918              		.loc 1 748 5 view .LVU8040
 29919              	.L2342:
 748:src/xeq.c     **** }
 29920              		.loc 1 748 5 is_stmt 0 view .LVU8041
 29921              	.LBE4147:
 29922              	.LBE4146:
 29923              	.LBE4143:
 29924              	.LBE4134:
ARM GAS  /tmp/cciWh9P3.s 			page 761


 29925              	.LBE4133:
 29926              	.LBB4160:
 29927              	.LBB4161:
 29928              	.LBB4162:
3773:src/xeq.c     **** 		}
 29929              		.loc 1 3773 4 is_stmt 1 view .LVU8042
 29930              	.LBB4163:
 29931              	.LBI4163:
 747:src/xeq.c     ****     State2.state_lift = 1;
 29932              		.loc 1 747 6 view .LVU8043
 29933              	.LBB4164:
 748:src/xeq.c     **** }
 29934              		.loc 1 748 5 view .LVU8044
 748:src/xeq.c     **** }
 29935              		.loc 1 748 23 is_stmt 0 view .LVU8045
 29936 022e E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 29937 0230 094B     		ldr	r3, .L2386+20
 29938 0232 42F04002 		orr	r2, r2, #64
 29939 0236 E275     		strb	r2, [r4, #23]
 29940 0238 1A68     		ldr	r2, [r3]
 29941 023a C6E7     		b	.L2124
 29942              	.LVL2351:
 29943              	.L2368:
 748:src/xeq.c     **** }
 29944              		.loc 1 748 23 view .LVU8046
 29945              	.LBE4164:
 29946              	.LBE4163:
 29947              	.LBE4162:
 29948              	.LBE4161:
 29949              	.LBE4160:
 29950              	.LBB4233:
5086:src/xeq.c     **** 		else
 29951              		.loc 1 5086 4 is_stmt 1 view .LVU8047
 29952 023c 2846     		mov	r0, r5
 29953 023e FFF7FEFF 		bl	print_step
 29954              	.LVL2352:
 29955 0242 75E7     		b	.L2116
 29956              	.L2387:
 29957              		.align	2
 29958              	.L2386:
 29959 0244 00000000 		.word	main_ram
 29960 0248 00000000 		.word	StateWhileOn
 29961 024c 00000000 		.word	Busy
 29962 0250 00000000 		.word	XeqOpCode
 29963 0254 00000000 		.word	argcmds
 29964 0258 00000000 		.word	Error
 29965 025c 00000000 		.word	.LC8
 29966 0260 00000000 		.word	TraceBuffer
 29967 0264 00000000 		.word	DispMsg
 29968 0268 00000000 		.word	niladics
 29969 026c 00000000 		.word	multicmds
 29970 0270 00000000 		.word	xrom
 29971 0274 00000000 		.word	xrom_size
 29972 0278 00000000 		.word	StackBase
 29973 027c 00000000 		.word	Running
 29974              	.L2154:
5086:src/xeq.c     **** 		else
ARM GAS  /tmp/cciWh9P3.s 			page 762


 29975              		.loc 1 5086 4 is_stmt 0 view .LVU8048
 29976              	.LBE4233:
5113:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
 29977              		.loc 1 5113 18 is_stmt 1 view .LVU8049
 29978              	.LVL2353:
 29979              	.LBB4234:
 29980              	.LBI4234:
4480:src/xeq.c     **** 
 29981              		.loc 1 4480 13 view .LVU8050
 29982              	.LBB4235:
4482:src/xeq.c     **** 	process_cmdline_set_lift();
 29983              		.loc 1 4482 2 view .LVU8051
4483:src/xeq.c     **** 
 29984              		.loc 1 4483 2 view .LVU8052
 29985              	.LBB4236:
 29986              	.LBI4236:
1145:src/xeq.c     **** 	process_cmdline();
 29987              		.loc 1 1145 6 view .LVU8053
 29988              	.LBB4237:
1146:src/xeq.c     **** 	set_lift();
 29989              		.loc 1 1146 2 view .LVU8054
 29990 0280 FFF7FEFF 		bl	process_cmdline
 29991              	.LVL2354:
1147:src/xeq.c     **** }
 29992              		.loc 1 1147 2 view .LVU8055
 29993              	.LBB4238:
 29994              	.LBI4238:
 747:src/xeq.c     ****     State2.state_lift = 1;
 29995              		.loc 1 747 6 view .LVU8056
 29996              	.LBB4239:
 748:src/xeq.c     **** }
 29997              		.loc 1 748 5 view .LVU8057
 748:src/xeq.c     **** }
 29998              		.loc 1 748 23 is_stmt 0 view .LVU8058
 29999 0284 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30000              	.LBE4239:
 30001              	.LBE4238:
 30002              	.LBE4237:
 30003              	.LBE4236:
4485:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30004              		.loc 1 4485 4 view .LVU8059
 30005 0286 EDB2     		uxtb	r5, r5
 30006              	.LVL2355:
 30007              	.LBB4246:
 30008              	.LBB4244:
 30009              	.LBB4242:
 30010              	.LBB4240:
 748:src/xeq.c     **** }
 30011              		.loc 1 748 23 view .LVU8060
 30012 0288 43F04003 		orr	r3, r3, #64
 30013              	.LBE4240:
 30014              	.LBE4242:
 30015              	.LBE4244:
 30016              	.LBE4246:
4486:src/xeq.c     **** 		if (is_intmode()) {
 30017              		.loc 1 4486 5 view .LVU8061
 30018 028c 2E2D     		cmp	r5, #46
ARM GAS  /tmp/cciWh9P3.s 			page 763


 30019              	.LBB4247:
 30020              	.LBB4245:
 30021              	.LBB4243:
 30022              	.LBB4241:
 748:src/xeq.c     **** }
 30023              		.loc 1 748 23 view .LVU8062
 30024 028e E375     		strb	r3, [r4, #23]
 30025              	.LBE4241:
 30026              	.LBE4243:
 30027              	.LBE4245:
 30028              	.LBE4247:
4485:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30029              		.loc 1 4485 2 is_stmt 1 view .LVU8063
 30030              	.LVL2356:
4486:src/xeq.c     **** 		if (is_intmode()) {
 30031              		.loc 1 4486 2 view .LVU8064
4486:src/xeq.c     **** 		if (is_intmode()) {
 30032              		.loc 1 4486 5 is_stmt 0 view .LVU8065
 30033 0290 40F26D82 		bls	.L2372
 30034              	.LVL2357:
 30035              	.L2149:
4486:src/xeq.c     **** 		if (is_intmode()) {
 30036              		.loc 1 4486 5 view .LVU8066
 30037              	.LBE4235:
 30038              	.LBE4234:
5117:src/xeq.c     **** 		}
 30039              		.loc 1 5117 12 is_stmt 1 view .LVU8067
5117:src/xeq.c     **** 		}
 30040              		.loc 1 5117 12 view .LVU8068
 30041              	.LBB4281:
 30042              	.LBI4281:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30043              		.loc 1 536 5 view .LVU8069
 30044              	.LBB4282:
 537:src/xeq.c     **** 		Error = e;
 30045              		.loc 1 537 2 view .LVU8070
 537:src/xeq.c     **** 		Error = e;
 30046              		.loc 1 537 12 is_stmt 0 view .LVU8071
 30047 0294 B34B     		ldr	r3, .L2388
 30048 0296 1868     		ldr	r0, [r3]
 537:src/xeq.c     **** 		Error = e;
 30049              		.loc 1 537 5 view .LVU8072
 30050 0298 0028     		cmp	r0, #0
 30051 029a 40F0CC81 		bne	.L2350
 30052 029e DFF8E082 		ldr	r8, .L2388+28
 30053              	.LVL2358:
 30054              	.L2128:
 537:src/xeq.c     **** 		Error = e;
 30055              		.loc 1 537 5 view .LVU8073
 30056              	.LBE4282:
 30057              	.LBE4281:
 30058              	.LBB4283:
 30059              	.LBB4157:
 30060              	.LBB4150:
 30061              	.LBB4151:
 30062              	.LBB4152:
 30063              	.LBI4152:
ARM GAS  /tmp/cciWh9P3.s 			page 764


 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30064              		.loc 1 536 5 is_stmt 1 view .LVU8074
 30065              	.LBB4153:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 30066              		.loc 1 538 3 view .LVU8075
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 30067              		.loc 1 538 9 is_stmt 0 view .LVU8076
 30068 02a2 0320     		movs	r0, #3
 30069 02a4 1860     		str	r0, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 30070              		.loc 1 539 3 is_stmt 1 view .LVU8077
 30071              	.LVL2359:
 30072              	.L2247:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 30073              		.loc 1 539 3 is_stmt 0 view .LVU8078
 30074              	.LBE4153:
 30075              	.LBE4152:
 30076              	.LBE4151:
 30077              	.LBE4150:
 30078              	.LBE4157:
 30079              	.LBE4283:
5129:src/xeq.c     **** 		// Repair stack and state
 30080              		.loc 1 5129 3 is_stmt 1 view .LVU8079
 30081 02a6 0593     		str	r3, [sp, #20]
 30082 02a8 FFF7FEFF 		bl	error_message
 30083              	.LVL2360:
5132:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
 30084              		.loc 1 5132 3 view .LVU8080
 30085 02ac 5146     		mov	r1, r10
 30086 02ae A022     		movs	r2, #160
 30087 02b0 D9F80000 		ldr	r0, [r9]
 30088 02b4 FFF7FEFF 		bl	xcopy
 30089              	.LVL2361:
5133:src/xeq.c     **** 		UState = old;
 30090              		.loc 1 5133 3 view .LVU8081
 30091 02b8 3A68     		ldr	r2, [r7]
5135:src/xeq.c     **** 		raw_set_pc(old_pc);
 30092              		.loc 1 5135 21 is_stmt 0 view .LVU8082
 30093 02ba 029B     		ldr	r3, [sp, #8]
5133:src/xeq.c     **** 		UState = old;
 30094              		.loc 1 5133 28 view .LVU8083
 30095 02bc A2F8FCB7 		strh	fp, [r2, #2044]	@ movhi
5134:src/xeq.c     **** 		State2.state_lift = lift;
 30096              		.loc 1 5134 3 is_stmt 1 view .LVU8084
5134:src/xeq.c     **** 		State2.state_lift = lift;
 30097              		.loc 1 5134 10 is_stmt 0 view .LVU8085
 30098 02c0 96E80300 		ldm	r6, {r0, r1}
 30099 02c4 02F2E475 		addw	r5, r2, #2020
 30100 02c8 85E80300 		stm	r5, {r0, r1}
5135:src/xeq.c     **** 		raw_set_pc(old_pc);
 30101              		.loc 1 5135 3 is_stmt 1 view .LVU8086
5135:src/xeq.c     **** 		raw_set_pc(old_pc);
 30102              		.loc 1 5135 21 is_stmt 0 view .LVU8087
 30103 02cc E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 30104 02ce 63F38611 		bfi	r1, r3, #6, #1
 30105              	.LBB4284:
 30106              	.LBB4285:
ARM GAS  /tmp/cciWh9P3.s 			page 765


 279:src/xeq.c     **** 	update_program_bounds(0);
 30107              		.loc 1 279 11 view .LVU8088
 30108 02d2 039B     		ldr	r3, [sp, #12]
 30109              	.LBE4285:
 30110              	.LBE4284:
5135:src/xeq.c     **** 		raw_set_pc(old_pc);
 30111              		.loc 1 5135 21 view .LVU8089
 30112 02d4 E175     		strb	r1, [r4, #23]
5136:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
 30113              		.loc 1 5136 3 is_stmt 1 view .LVU8090
 30114              	.LVL2362:
 30115              	.LBB4287:
 30116              	.LBI4284:
 278:src/xeq.c     **** 	State.pc = pc;
 30117              		.loc 1 278 13 view .LVU8091
 30118              	.LBB4286:
 279:src/xeq.c     **** 	update_program_bounds(0);
 30119              		.loc 1 279 2 view .LVU8092
 280:src/xeq.c     **** }
 30120              		.loc 1 280 2 is_stmt 0 view .LVU8093
 30121 02d6 0020     		movs	r0, #0
 279:src/xeq.c     **** 	update_program_bounds(0);
 30122              		.loc 1 279 11 view .LVU8094
 30123 02d8 A2F8E037 		strh	r3, [r2, #2016]	@ movhi
 280:src/xeq.c     **** }
 30124              		.loc 1 280 2 is_stmt 1 view .LVU8095
 30125 02dc FFF7FEFF 		bl	update_program_bounds
 30126              	.LVL2363:
 280:src/xeq.c     **** }
 30127              		.loc 1 280 2 is_stmt 0 view .LVU8096
 30128              	.LBE4286:
 30129              	.LBE4287:
5137:src/xeq.c     **** 		process_cmdline_set_lift();
 30130              		.loc 1 5137 3 is_stmt 1 view .LVU8097
5137:src/xeq.c     **** 		process_cmdline_set_lift();
 30131              		.loc 1 5137 26 is_stmt 0 view .LVU8098
 30132 02e0 049B     		ldr	r3, [sp, #16]
 30133 02e2 E361     		str	r3, [r4, #28]
5138:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
 30134              		.loc 1 5138 3 is_stmt 1 view .LVU8099
 30135              	.LBB4288:
 30136              	.LBI4288:
1145:src/xeq.c     **** 	process_cmdline();
 30137              		.loc 1 1145 6 view .LVU8100
 30138              	.LBB4289:
1146:src/xeq.c     **** 	set_lift();
 30139              		.loc 1 1146 2 view .LVU8101
 30140 02e4 FFF7FEFF 		bl	process_cmdline
 30141              	.LVL2364:
1147:src/xeq.c     **** }
 30142              		.loc 1 1147 2 view .LVU8102
 30143              	.LBB4290:
 30144              	.LBI4290:
 747:src/xeq.c     ****     State2.state_lift = 1;
 30145              		.loc 1 747 6 view .LVU8103
 30146              	.LBB4291:
 748:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 766


 30147              		.loc 1 748 5 view .LVU8104
 30148              	.LBE4291:
 30149              	.LBE4290:
 30150              	.LBE4289:
 30151              	.LBE4288:
5142:src/xeq.c     **** #ifndef REALBUILD
 30152              		.loc 1 5142 15 is_stmt 0 view .LVU8105
 30153 02e8 9F49     		ldr	r1, .L2388+4
 30154              	.LBB4298:
 30155              	.LBB4296:
 30156              	.LBB4294:
 30157              	.LBB4292:
 748:src/xeq.c     **** }
 30158              		.loc 1 748 23 view .LVU8106
 30159 02ea E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30160              	.LBE4292:
 30161              	.LBE4294:
 30162              	.LBE4296:
 30163              	.LBE4298:
5142:src/xeq.c     **** #ifndef REALBUILD
 30164              		.loc 1 5142 15 view .LVU8107
 30165 02ec 0D68     		ldr	r5, [r1]
 30166 02ee D8F80010 		ldr	r1, [r8]
5141:src/xeq.c     **** 		if (Running || XromRunning) {
 30167              		.loc 1 5141 9 view .LVU8108
 30168 02f2 059B     		ldr	r3, [sp, #20]
 30169              	.LBB4299:
 30170              	.LBB4297:
 30171              	.LBB4295:
 30172              	.LBB4293:
 748:src/xeq.c     **** }
 30173              		.loc 1 748 23 view .LVU8109
 30174 02f4 42F04002 		orr	r2, r2, #64
 30175 02f8 E275     		strb	r2, [r4, #23]
 30176              	.LBE4293:
 30177              	.LBE4295:
 30178              	.LBE4297:
 30179              	.LBE4299:
5141:src/xeq.c     **** 		if (Running || XromRunning) {
 30180              		.loc 1 5141 3 is_stmt 1 view .LVU8110
5141:src/xeq.c     **** 		if (Running || XromRunning) {
 30181              		.loc 1 5141 9 is_stmt 0 view .LVU8111
 30182 02fa 0020     		movs	r0, #0
5142:src/xeq.c     **** #ifndef REALBUILD
 30183              		.loc 1 5142 15 view .LVU8112
 30184 02fc 51EA0502 		orrs	r2, r1, r5
5141:src/xeq.c     **** 		if (Running || XromRunning) {
 30185              		.loc 1 5141 9 view .LVU8113
 30186 0300 1860     		str	r0, [r3]
5142:src/xeq.c     **** #ifndef REALBUILD
 30187              		.loc 1 5142 3 is_stmt 1 view .LVU8114
5142:src/xeq.c     **** #ifndef REALBUILD
 30188              		.loc 1 5142 15 is_stmt 0 view .LVU8115
 30189 0302 3FF464AF 		beq	.L2234
5144:src/xeq.c     **** 				// Special handling for debug environment
 30190              		.loc 1 5144 4 is_stmt 1 view .LVU8116
5144:src/xeq.c     **** 				// Special handling for debug environment
ARM GAS  /tmp/cciWh9P3.s 			page 767


 30191              		.loc 1 5144 7 is_stmt 0 view .LVU8117
 30192 0306 94F91720 		ldrsb	r2, [r4, #23]
 30193 030a 8242     		cmp	r2, r0
 30194 030c C0F2D781 		blt	.L2373
 30195              	.LBB4300:
5166:src/xeq.c     **** 				if (XromFlags.xIN) {
 30196              		.loc 1 5166 5 is_stmt 1 view .LVU8118
5167:src/xeq.c     **** 					// Restore state to before xIN
 30197              		.loc 1 5167 9 is_stmt 0 view .LVU8119
 30198 0310 964E     		ldr	r6, .L2388+8
5166:src/xeq.c     **** 				if (XromFlags.xIN) {
 30199              		.loc 1 5166 29 view .LVU8120
 30200 0312 3968     		ldr	r1, [r7]
5167:src/xeq.c     **** 					// Restore state to before xIN
 30201              		.loc 1 5167 8 view .LVU8121
 30202 0314 96F90120 		ldrsb	r2, [r6, #1]
5166:src/xeq.c     **** 				if (XromFlags.xIN) {
 30203              		.loc 1 5166 24 view .LVU8122
 30204 0318 B1F8E037 		ldrh	r3, [r1, #2016]
 30205              	.LVL2365:
5167:src/xeq.c     **** 					// Restore state to before xIN
 30206              		.loc 1 5167 5 is_stmt 1 view .LVU8123
5167:src/xeq.c     **** 					// Restore state to before xIN
 30207              		.loc 1 5167 8 is_stmt 0 view .LVU8124
 30208 031c 002A     		cmp	r2, #0
 30209 031e 22DA     		bge	.L2242
5169:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30210              		.loc 1 5169 6 is_stmt 1 view .LVU8125
5169:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30211              		.loc 1 5169 20 is_stmt 0 view .LVU8126
 30212 0320 96F801C0 		ldrb	ip, [r6, #1]	@ zero_extendqisi2
5171:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30213              		.loc 1 5171 18 view .LVU8127
 30214 0324 D1F8E857 		ldr	r5, [r1, #2024]
5174:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30215              		.loc 1 5174 13 view .LVU8128
 30216 0328 D6F808E0 		ldr	lr, [r6, #8]
5169:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30217              		.loc 1 5169 20 view .LVU8129
 30218 032c 60F3C71C 		bfi	ip, r0, #7, #1
5171:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30219              		.loc 1 5171 18 view .LVU8130
 30220 0330 CCF3C000 		ubfx	r0, ip, #3, #1
 30221 0334 0CF00102 		and	r2, ip, #1
 30222 0338 42EA8032 		orr	r2, r2, r0, lsl #14
 30223 033c CCF38000 		ubfx	r0, ip, #2, #1
 30224 0340 42EAC042 		orr	r2, r2, r0, lsl #19
 30225 0344 8A48     		ldr	r0, .L2388+12
5169:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30226              		.loc 1 5169 20 view .LVU8131
 30227 0346 86F801C0 		strb	ip, [r6, #1]
5170:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
 30228              		.loc 1 5170 6 is_stmt 1 view .LVU8132
5171:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30229              		.loc 1 5171 6 view .LVU8133
5172:src/xeq.c     **** 					// Restore the global return stack
 30230              		.loc 1 5172 6 view .LVU8134
ARM GAS  /tmp/cciWh9P3.s 			page 768


5171:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30231              		.loc 1 5171 18 is_stmt 0 view .LVU8135
 30232 034a 25F40425 		bic	r5, r5, #540672
 30233 034e 0240     		ands	r2, r2, r0
 30234 0350 25F00105 		bic	r5, r5, #1
5174:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30235              		.loc 1 5174 13 view .LVU8136
 30236 0354 8748     		ldr	r0, .L2388+16
5175:src/xeq.c     **** 				}
 30237              		.loc 1 5175 16 view .LVU8137
 30238 0356 B689     		ldrh	r6, [r6, #12]
5174:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30239              		.loc 1 5174 13 view .LVU8138
 30240 0358 C0F800E0 		str	lr, [r0]
5171:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30241              		.loc 1 5171 18 view .LVU8139
 30242 035c 2A43     		orrs	r2, r2, r5
 30243 035e C1F8E827 		str	r2, [r1, #2024]
5174:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30244              		.loc 1 5174 6 is_stmt 1 view .LVU8140
5175:src/xeq.c     **** 				}
 30245              		.loc 1 5175 6 view .LVU8141
5175:src/xeq.c     **** 				}
 30246              		.loc 1 5175 16 is_stmt 0 view .LVU8142
 30247 0362 A1F8E267 		strh	r6, [r1, #2018]	@ movhi
 30248              	.L2242:
5177:src/xeq.c     **** 					// Leave XROM
 30249              		.loc 1 5177 11 is_stmt 1 view .LVU8143
 30250 0366 9A0B     		lsrs	r2, r3, #14
 30251 0368 032A     		cmp	r2, #3
 30252 036a 1AD1     		bne	.L2243
5181:src/xeq.c     **** 					}
 30253              		.loc 1 5181 10 is_stmt 0 view .LVU8144
 30254 036c 814E     		ldr	r6, .L2388+16
5181:src/xeq.c     **** 					}
 30255              		.loc 1 5181 18 view .LVU8145
 30256 036e 6FF00045 		mvn	r5, #-2147483648
 30257 0372 04E0     		b	.L2246
 30258              	.L2244:
5184:src/xeq.c     **** 				}
 30259              		.loc 1 5184 7 is_stmt 1 view .LVU8146
 30260 0374 0133     		adds	r3, r3, #1
 30261              	.LVL2366:
5184:src/xeq.c     **** 				}
 30262              		.loc 1 5184 7 is_stmt 0 view .LVU8147
 30263 0376 9BB2     		uxth	r3, r3
 30264              	.LVL2367:
5177:src/xeq.c     **** 					// Leave XROM
 30265              		.loc 1 5177 11 is_stmt 1 view .LVU8148
 30266 0378 9A0B     		lsrs	r2, r3, #14
 30267 037a 032A     		cmp	r2, #3
 30268 037c 11D1     		bne	.L2243
 30269              	.L2246:
5179:src/xeq.c     **** 						retstk_up();
 30270              		.loc 1 5179 6 view .LVU8149
5179:src/xeq.c     **** 						retstk_up();
 30271              		.loc 1 5179 9 is_stmt 0 view .LVU8150
ARM GAS  /tmp/cciWh9P3.s 			page 769


 30272 037e B1F9E227 		ldrsh	r2, [r1, #2018]
 30273 0382 002A     		cmp	r2, #0
 30274 0384 F6D0     		beq	.L2244
5180:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
 30275              		.loc 1 5180 7 is_stmt 1 view .LVU8151
 30276 0386 FFF7FEFF 		bl	retstk_up
 30277              	.LVL2368:
5181:src/xeq.c     **** 					}
 30278              		.loc 1 5181 7 view .LVU8152
5181:src/xeq.c     **** 					}
 30279              		.loc 1 5181 19 is_stmt 0 view .LVU8153
 30280 038a 3968     		ldr	r1, [r7]
5181:src/xeq.c     **** 					}
 30281              		.loc 1 5181 10 view .LVU8154
 30282 038c 3368     		ldr	r3, [r6]
5181:src/xeq.c     **** 					}
 30283              		.loc 1 5181 19 view .LVU8155
 30284 038e B1F9E227 		ldrsh	r2, [r1, #2018]
5181:src/xeq.c     **** 					}
 30285              		.loc 1 5181 18 view .LVU8156
 30286 0392 5019     		adds	r0, r2, r5
5181:src/xeq.c     **** 					}
 30287              		.loc 1 5181 10 view .LVU8157
 30288 0394 33F81030 		ldrh	r3, [r3, r0, lsl #1]
 30289              	.LVL2369:
5183:src/xeq.c     **** 						++pc; // compensate for decpc below
 30290              		.loc 1 5183 6 is_stmt 1 view .LVU8158
5183:src/xeq.c     **** 						++pc; // compensate for decpc below
 30291              		.loc 1 5183 9 is_stmt 0 view .LVU8159
 30292 0398 002A     		cmp	r2, #0
 30293 039a EBD0     		beq	.L2244
5177:src/xeq.c     **** 					// Leave XROM
 30294              		.loc 1 5177 11 is_stmt 1 view .LVU8160
 30295 039c 9A0B     		lsrs	r2, r3, #14
 30296 039e 032A     		cmp	r2, #3
 30297 03a0 EDD0     		beq	.L2246
 30298              	.L2243:
5186:src/xeq.c     **** #ifndef REALBUILD
 30299              		.loc 1 5186 5 view .LVU8161
 30300              	.LVL2370:
 30301              	.LBB4301:
 30302              	.LBI4301:
 278:src/xeq.c     **** 	State.pc = pc;
 30303              		.loc 1 278 13 view .LVU8162
 30304              	.LBB4302:
 279:src/xeq.c     **** 	update_program_bounds(0);
 30305              		.loc 1 279 2 view .LVU8163
 279:src/xeq.c     **** 	update_program_bounds(0);
 30306              		.loc 1 279 11 is_stmt 0 view .LVU8164
 30307 03a2 A1F8E037 		strh	r3, [r1, #2016]	@ movhi
 280:src/xeq.c     **** }
 30308              		.loc 1 280 2 is_stmt 1 view .LVU8165
 30309 03a6 0020     		movs	r0, #0
 30310 03a8 FFF7FEFF 		bl	update_program_bounds
 30311              	.LVL2371:
 30312              	.L2237:
 280:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 770


 30313              		.loc 1 280 2 is_stmt 0 view .LVU8166
 30314              	.LBE4302:
 30315              	.LBE4301:
 30316              	.LBE4300:
5190:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
 30317              		.loc 1 5190 4 is_stmt 1 view .LVU8167
 30318 03ac FFF7FEFF 		bl	decpc
 30319              	.LVL2372:
5191:src/xeq.c     **** 
 30320              		.loc 1 5191 4 view .LVU8168
 30321 03b0 FFF7FEFF 		bl	xeq_init_contexts
 30322              	.LVL2373:
5193:src/xeq.c     **** 		}
 30323              		.loc 1 5193 4 view .LVU8169
 30324              	.LBB4303:
 30325              	.LBI4303:
5573:src/xeq.c     **** 	set_running_off_sst();
 30326              		.loc 1 5573 6 view .LVU8170
 30327              	.LBB4304:
5574:src/xeq.c     **** 	State.entryp = 0;
 30328              		.loc 1 5574 2 view .LVU8171
 30329              	.LBB4305:
 30330              	.LBI4305:
5565:src/xeq.c     **** 	Running = 0;
 30331              		.loc 1 5565 6 view .LVU8172
 30332              	.LBB4306:
5566:src/xeq.c     **** }
 30333              		.loc 1 5566 2 view .LVU8173
 30334              	.LBE4306:
 30335              	.LBE4305:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 30336              		.loc 1 5575 15 is_stmt 0 view .LVU8174
 30337 03b4 3B68     		ldr	r3, [r7]
 30338              	.LBB4308:
 30339              	.LBB4307:
5566:src/xeq.c     **** }
 30340              		.loc 1 5566 10 view .LVU8175
 30341 03b6 0021     		movs	r1, #0
 30342 03b8 C8F80010 		str	r1, [r8]
 30343              	.LBE4307:
 30344              	.LBE4308:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 30345              		.loc 1 5575 2 is_stmt 1 view .LVU8176
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 30346              		.loc 1 5575 15 is_stmt 0 view .LVU8177
 30347 03bc 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 30348 03c0 61F30412 		bfi	r2, r1, #4, #1
 30349 03c4 83F8DD27 		strb	r2, [r3, #2013]
5576:src/xeq.c     **** }
 30350              		.loc 1 5576 2 is_stmt 1 view .LVU8178
 30351 03c8 8A20     		movs	r0, #138
 30352 03ca FFF7FEFF 		bl	dot
 30353              	.LVL2374:
5577:src/xeq.c     **** 
 30354              		.loc 1 5577 1 is_stmt 0 view .LVU8179
 30355 03ce FEE6     		b	.L2234
 30356              	.LVL2375:
ARM GAS  /tmp/cciWh9P3.s 			page 771


 30357              	.L2157:
5577:src/xeq.c     **** 
 30358              		.loc 1 5577 1 view .LVU8180
 30359              	.LBE4304:
 30360              	.LBE4303:
5110:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
 30361              		.loc 1 5110 19 is_stmt 1 view .LVU8181
 30362              	.LBB4309:
 30363              	.LBI4160:
3680:src/xeq.c     **** 	int opm = argKIND(op);
 30364              		.loc 1 3680 13 view .LVU8182
 30365              	.LBB4228:
3681:src/xeq.c     **** 
 30366              		.loc 1 3681 2 view .LVU8183
3681:src/xeq.c     **** 
 30367              		.loc 1 3681 6 is_stmt 0 view .LVU8184
 30368 03d0 5FFA85F8 		uxtb	r8, r5
 30369              	.LVL2376:
3683:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 30370              		.loc 1 3683 2 is_stmt 1 view .LVU8185
 30371 03d4 B8F12A0F 		cmp	r8, #42
 30372 03d8 3FF65CAF 		bhi	.L2149
 30373 03dc DFE818F0 		tbh	[pc, r8, lsl #1]
 30374              	.L2160:
 30375 03e0 9902     		.2byte	(.L2171-.L2160)/2
 30376 03e2 1103     		.2byte	(.L2170-.L2160)/2
 30377 03e4 E702     		.2byte	(.L2169-.L2160)/2
 30378 03e6 D502     		.2byte	(.L2168-.L2160)/2
 30379 03e8 A402     		.2byte	(.L2167-.L2160)/2
 30380 03ea 2D02     		.2byte	(.L2166-.L2160)/2
 30381 03ec 2D02     		.2byte	(.L2166-.L2160)/2
 30382 03ee 2D02     		.2byte	(.L2166-.L2160)/2
 30383 03f0 2D02     		.2byte	(.L2166-.L2160)/2
 30384 03f2 2D02     		.2byte	(.L2166-.L2160)/2
 30385 03f4 2D02     		.2byte	(.L2166-.L2160)/2
 30386 03f6 2D02     		.2byte	(.L2166-.L2160)/2
 30387 03f8 2D02     		.2byte	(.L2166-.L2160)/2
 30388 03fa 2D02     		.2byte	(.L2166-.L2160)/2
 30389 03fc 2D02     		.2byte	(.L2166-.L2160)/2
 30390 03fe 2D02     		.2byte	(.L2166-.L2160)/2
 30391 0400 2D02     		.2byte	(.L2166-.L2160)/2
 30392 0402 2D02     		.2byte	(.L2166-.L2160)/2
 30393 0404 2D02     		.2byte	(.L2166-.L2160)/2
 30394 0406 2D02     		.2byte	(.L2166-.L2160)/2
 30395 0408 2D02     		.2byte	(.L2166-.L2160)/2
 30396 040a 8802     		.2byte	(.L2165-.L2160)/2
 30397 040c 8802     		.2byte	(.L2165-.L2160)/2
 30398 040e 5802     		.2byte	(.L2164-.L2160)/2
 30399 0410 5802     		.2byte	(.L2164-.L2160)/2
 30400 0412 5802     		.2byte	(.L2164-.L2160)/2
 30401 0414 5802     		.2byte	(.L2164-.L2160)/2
 30402 0416 5802     		.2byte	(.L2164-.L2160)/2
 30403 0418 5802     		.2byte	(.L2164-.L2160)/2
 30404 041a 5802     		.2byte	(.L2164-.L2160)/2
 30405 041c 3602     		.2byte	(.L2163-.L2160)/2
 30406 041e 3602     		.2byte	(.L2163-.L2160)/2
 30407 0420 3602     		.2byte	(.L2163-.L2160)/2
ARM GAS  /tmp/cciWh9P3.s 			page 772


 30408 0422 3602     		.2byte	(.L2163-.L2160)/2
 30409 0424 3602     		.2byte	(.L2163-.L2160)/2
 30410 0426 3602     		.2byte	(.L2163-.L2160)/2
 30411 0428 3602     		.2byte	(.L2163-.L2160)/2
 30412 042a 7C02     		.2byte	(.L2162-.L2160)/2
 30413 042c 7C02     		.2byte	(.L2162-.L2160)/2
 30414 042e 7002     		.2byte	(.L2161-.L2160)/2
 30415 0430 7002     		.2byte	(.L2161-.L2160)/2
 30416 0432 6402     		.2byte	(.L2159-.L2160)/2
 30417 0434 6402     		.2byte	(.L2159-.L2160)/2
 30418              	.LVL2377:
 30419              		.p2align 1
 30420              	.L2150:
3683:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 30421              		.loc 1 3683 2 is_stmt 0 view .LVU8186
 30422              	.LBE4228:
 30423              	.LBE4309:
5116:src/xeq.c     **** 		default:	illegal(op);
 30424              		.loc 1 5116 19 is_stmt 1 view .LVU8187
 30425              	.LBB4310:
 30426              	.LBI4310:
4523:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
 30427              		.loc 1 4523 13 view .LVU8188
 30428              	.LBB4311:
4524:src/xeq.c     **** 	unsigned int f;
 30429              		.loc 1 4524 2 view .LVU8189
4525:src/xeq.c     **** 
 30430              		.loc 1 4525 2 view .LVU8190
4527:src/xeq.c     **** 
 30431              		.loc 1 4527 2 view .LVU8191
 30432              	.LBB4312:
 30433              	.LBI4312:
1145:src/xeq.c     **** 	process_cmdline();
 30434              		.loc 1 1145 6 view .LVU8192
 30435              	.LBB4313:
1146:src/xeq.c     **** 	set_lift();
 30436              		.loc 1 1146 2 view .LVU8193
 30437 0436 FFF7FEFF 		bl	process_cmdline
 30438              	.LVL2378:
1147:src/xeq.c     **** }
 30439              		.loc 1 1147 2 view .LVU8194
 30440              	.LBB4314:
 30441              	.LBI4314:
 747:src/xeq.c     ****     State2.state_lift = 1;
 30442              		.loc 1 747 6 view .LVU8195
 30443              	.LBB4315:
 748:src/xeq.c     **** }
 30444              		.loc 1 748 5 view .LVU8196
 748:src/xeq.c     **** }
 30445              		.loc 1 748 23 is_stmt 0 view .LVU8197
 30446 043a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30447              	.LBE4315:
 30448              	.LBE4314:
 30449              	.LBE4313:
 30450              	.LBE4312:
4529:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30451              		.loc 1 4529 4 view .LVU8198
ARM GAS  /tmp/cciWh9P3.s 			page 773


 30452 043c EDB2     		uxtb	r5, r5
 30453              	.LVL2379:
 30454              	.LBB4322:
 30455              	.LBB4320:
 30456              	.LBB4318:
 30457              	.LBB4316:
 748:src/xeq.c     **** }
 30458              		.loc 1 748 23 view .LVU8199
 30459 043e 43F04003 		orr	r3, r3, #64
 30460              	.LBE4316:
 30461              	.LBE4318:
 30462              	.LBE4320:
 30463              	.LBE4322:
4530:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 30464              		.loc 1 4530 5 view .LVU8200
 30465 0442 2E2D     		cmp	r5, #46
 30466              	.LBB4323:
 30467              	.LBB4321:
 30468              	.LBB4319:
 30469              	.LBB4317:
 748:src/xeq.c     **** }
 30470              		.loc 1 748 23 view .LVU8201
 30471 0444 E375     		strb	r3, [r4, #23]
 30472              	.LBE4317:
 30473              	.LBE4319:
 30474              	.LBE4321:
 30475              	.LBE4323:
4529:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30476              		.loc 1 4529 2 is_stmt 1 view .LVU8202
 30477              	.LVL2380:
4530:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 30478              		.loc 1 4530 2 view .LVU8203
4530:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 30479              		.loc 1 4530 5 is_stmt 0 view .LVU8204
 30480 0446 00F2EA80 		bhi	.L2230
4531:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 30481              		.loc 1 4531 3 is_stmt 1 view .LVU8205
4531:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 30482              		.loc 1 4531 9 is_stmt 0 view .LVU8206
 30483 044a 4B4B     		ldr	r3, .L2388+20
 30484 044c 05EB4505 		add	r5, r5, r5, lsl #1
 30485              	.LVL2381:
4531:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 30486              		.loc 1 4531 9 view .LVU8207
 30487 0450 03EBC505 		add	r5, r3, r5, lsl #3
 30488 0454 6D68     		ldr	r5, [r5, #4]
4531:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 30489              		.loc 1 4531 6 view .LVU8208
 30490 0456 002D     		cmp	r5, #0
 30491 0458 00F0E082 		beq	.L2231
 30492              	.LBB4324:
4532:src/xeq.c     **** 			if (dispatch_xrom(fp))
 30493              		.loc 1 4532 4 is_stmt 1 view .LVU8209
 30494              	.LVL2382:
4533:src/xeq.c     **** 				return;
 30495              		.loc 1 4533 4 view .LVU8210
4533:src/xeq.c     **** 				return;
ARM GAS  /tmp/cciWh9P3.s 			page 774


 30496              		.loc 1 4533 8 is_stmt 0 view .LVU8211
 30497 045c 2846     		mov	r0, r5
 30498 045e FFF7FEFF 		bl	dispatch_xrom
 30499              	.LVL2383:
4533:src/xeq.c     **** 				return;
 30500              		.loc 1 4533 7 view .LVU8212
 30501 0462 0028     		cmp	r0, #0
 30502 0464 40F0FE80 		bne	.L2121
4536:src/xeq.c     **** 
 30503              		.loc 1 4536 5 is_stmt 1 view .LVU8213
 30504              	.LVL2384:
 30505              	.LBB4325:
 30506              	.LBI4325:
 856:src/xeq.c     **** 	getXYZ(x, y, z);
 30507              		.loc 1 856 6 view .LVU8214
 30508              	.LBB4326:
 857:src/xeq.c     **** 	getT(t);
 30509              		.loc 1 857 2 view .LVU8215
 30510 0468 15AB     		add	r3, sp, #84
 30511              	.LVL2385:
 857:src/xeq.c     **** 	getT(t);
 30512              		.loc 1 857 2 is_stmt 0 view .LVU8216
 30513 046a 0DF13008 		add	r8, sp, #48
 30514              	.LVL2386:
 857:src/xeq.c     **** 	getT(t);
 30515              		.loc 1 857 2 view .LVU8217
 30516 046e 1EAA     		add	r2, sp, #120
 30517              	.LVL2387:
 857:src/xeq.c     **** 	getT(t);
 30518              		.loc 1 857 2 view .LVU8218
 30519 0470 1946     		mov	r1, r3
 30520 0472 4046     		mov	r0, r8
 30521 0474 FFF7FEFF 		bl	getXYZ
 30522              	.LVL2388:
 858:src/xeq.c     **** }
 30523              		.loc 1 858 2 is_stmt 1 view .LVU8219
 30524              	.LBB4327:
 30525              	.LBI4327:
 830:src/xeq.c     **** 	getRegister(t, regT_idx);
 30526              		.loc 1 830 13 view .LVU8220
 30527              	.LBB4328:
 831:src/xeq.c     **** }
 30528              		.loc 1 831 2 view .LVU8221
 30529 0478 27A8     		add	r0, sp, #156
 30530              	.LVL2389:
 831:src/xeq.c     **** }
 30531              		.loc 1 831 2 is_stmt 0 view .LVU8222
 30532 047a 6721     		movs	r1, #103
 30533 047c FFF7FEFF 		bl	getRegister
 30534              	.LVL2390:
 831:src/xeq.c     **** }
 30535              		.loc 1 831 2 view .LVU8223
 30536              	.LBE4328:
 30537              	.LBE4327:
 30538              	.LBE4326:
 30539              	.LBE4325:
4538:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 775


 30540              		.loc 1 4538 5 is_stmt 1 view .LVU8224
 30541 0480 15AB     		add	r3, sp, #84
 30542 0482 1EAA     		add	r2, sp, #120
 30543 0484 39A9     		add	r1, sp, #228
 30544 0486 30A8     		add	r0, sp, #192
 30545 0488 CDE90083 		strd	r8, r3, [sp]
 30546 048c 27AB     		add	r3, sp, #156
 30547 048e A847     		blx	r5
 30548              	.LVL2391:
4540:src/xeq.c     **** 				lower2();
 30549              		.loc 1 4540 5 view .LVU8225
 30550 0490 FFF7FEFF 		bl	setlastXY
 30551              	.LVL2392:
4541:src/xeq.c     **** 				setXY(&xr, &yr);
 30552              		.loc 1 4541 5 view .LVU8226
 30553 0494 FFF7FEFF 		bl	lower2
 30554              	.LVL2393:
 30555 0498 27E0     		b	.L2343
 30556              	.LVL2394:
 30557              	.L2152:
4541:src/xeq.c     **** 				setXY(&xr, &yr);
 30558              		.loc 1 4541 5 is_stmt 0 view .LVU8227
 30559              	.LBE4324:
 30560              	.LBE4311:
 30561              	.LBE4310:
5115:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
 30562              		.loc 1 5115 19 is_stmt 1 view .LVU8228
 30563              	.LBB4357:
 30564              	.LBI4357:
4446:src/xeq.c     **** 	decNumber x, y, rx, ry;
 30565              		.loc 1 4446 13 view .LVU8229
 30566              	.LBB4358:
4447:src/xeq.c     **** 	unsigned int f;
 30567              		.loc 1 4447 2 view .LVU8230
4448:src/xeq.c     **** 
 30568              		.loc 1 4448 2 view .LVU8231
4450:src/xeq.c     **** 
 30569              		.loc 1 4450 2 view .LVU8232
 30570              	.LBB4359:
 30571              	.LBI4359:
1145:src/xeq.c     **** 	process_cmdline();
 30572              		.loc 1 1145 6 view .LVU8233
 30573              	.LBB4360:
1146:src/xeq.c     **** 	set_lift();
 30574              		.loc 1 1146 2 view .LVU8234
 30575 049a FFF7FEFF 		bl	process_cmdline
 30576              	.LVL2395:
1147:src/xeq.c     **** }
 30577              		.loc 1 1147 2 view .LVU8235
 30578              	.LBB4361:
 30579              	.LBI4361:
 747:src/xeq.c     ****     State2.state_lift = 1;
 30580              		.loc 1 747 6 view .LVU8236
 30581              	.LBB4362:
 748:src/xeq.c     **** }
 30582              		.loc 1 748 5 view .LVU8237
 748:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 776


 30583              		.loc 1 748 23 is_stmt 0 view .LVU8238
 30584 049e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30585              	.LBE4362:
 30586              	.LBE4361:
 30587              	.LBE4360:
 30588              	.LBE4359:
4452:src/xeq.c     **** 
 30589              		.loc 1 4452 4 view .LVU8239
 30590 04a0 EDB2     		uxtb	r5, r5
 30591              	.LVL2396:
 30592              	.LBB4369:
 30593              	.LBB4367:
 30594              	.LBB4365:
 30595              	.LBB4363:
 748:src/xeq.c     **** }
 30596              		.loc 1 748 23 view .LVU8240
 30597 04a2 43F04003 		orr	r3, r3, #64
 30598              	.LBE4363:
 30599              	.LBE4365:
 30600              	.LBE4367:
 30601              	.LBE4369:
4454:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 30602              		.loc 1 4454 5 view .LVU8241
 30603 04a6 982D     		cmp	r5, #152
 30604              	.LBB4370:
 30605              	.LBB4368:
 30606              	.LBB4366:
 30607              	.LBB4364:
 748:src/xeq.c     **** }
 30608              		.loc 1 748 23 view .LVU8242
 30609 04a8 E375     		strb	r3, [r4, #23]
 30610              	.LBE4364:
 30611              	.LBE4366:
 30612              	.LBE4368:
 30613              	.LBE4370:
4452:src/xeq.c     **** 
 30614              		.loc 1 4452 2 is_stmt 1 view .LVU8243
 30615              	.LVL2397:
4454:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 30616              		.loc 1 4454 2 view .LVU8244
4454:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 30617              		.loc 1 4454 5 is_stmt 0 view .LVU8245
 30618 04aa 00F2B880 		bhi	.L2230
4455:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30619              		.loc 1 4455 3 is_stmt 1 view .LVU8246
4455:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30620              		.loc 1 4455 9 is_stmt 0 view .LVU8247
 30621 04ae 334B     		ldr	r3, .L2388+24
 30622 04b0 05EB4505 		add	r5, r5, r5, lsl #1
 30623              	.LVL2398:
4455:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30624              		.loc 1 4455 9 view .LVU8248
 30625 04b4 03EBC505 		add	r5, r3, r5, lsl #3
 30626 04b8 6D68     		ldr	r5, [r5, #4]
4455:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 30627              		.loc 1 4455 6 view .LVU8249
 30628 04ba 002D     		cmp	r5, #0
ARM GAS  /tmp/cciWh9P3.s 			page 777


 30629 04bc 00F0AE82 		beq	.L2231
 30630              	.LBB4371:
4456:src/xeq.c     **** 			if (dispatch_xrom(fp))
 30631              		.loc 1 4456 4 is_stmt 1 view .LVU8250
 30632              	.LVL2399:
4457:src/xeq.c     **** 				return;
 30633              		.loc 1 4457 4 view .LVU8251
4457:src/xeq.c     **** 				return;
 30634              		.loc 1 4457 8 is_stmt 0 view .LVU8252
 30635 04c0 2846     		mov	r0, r5
 30636 04c2 FFF7FEFF 		bl	dispatch_xrom
 30637              	.LVL2400:
4457:src/xeq.c     **** 				return;
 30638              		.loc 1 4457 7 view .LVU8253
 30639 04c6 0028     		cmp	r0, #0
 30640 04c8 40F0CC80 		bne	.L2121
4460:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
 30641              		.loc 1 4460 5 is_stmt 1 view .LVU8254
 30642              	.LVL2401:
 30643              	.LBB4372:
 30644              	.LBI4372:
 834:src/xeq.c     **** 	getX(x);
 30645              		.loc 1 834 6 view .LVU8255
 30646              	.LBE4372:
 30647              	.LBE4371:
 30648              	.LBE4358:
 30649              	.LBE4357:
 835:src/xeq.c     **** 	getY(y);
 30650              		.loc 1 835 2 view .LVU8256
 30651              	.LBB4389:
 30652              	.LBB4386:
 30653              	.LBB4383:
 30654              	.LBB4377:
 30655              	.LBB4373:
 30656              	.LBI4373:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 30657              		.loc 1 804 12 view .LVU8257
 30658              	.LBB4374:
 805:src/xeq.c     **** }
 30659              		.loc 1 805 2 view .LVU8258
 805:src/xeq.c     **** }
 30660              		.loc 1 805 9 is_stmt 0 view .LVU8259
 30661 04cc 6421     		movs	r1, #100
 30662 04ce 1EA8     		add	r0, sp, #120
 30663              	.LVL2402:
 805:src/xeq.c     **** }
 30664              		.loc 1 805 9 view .LVU8260
 30665 04d0 FFF7FEFF 		bl	getRegister
 30666              	.LVL2403:
 805:src/xeq.c     **** }
 30667              		.loc 1 805 9 view .LVU8261
 30668              	.LBE4374:
 30669              	.LBE4373:
 30670              	.LBE4377:
 30671              	.LBE4383:
 30672              	.LBE4386:
 30673              	.LBE4389:
ARM GAS  /tmp/cciWh9P3.s 			page 778


 836:src/xeq.c     **** }
 30674              		.loc 1 836 2 is_stmt 1 view .LVU8262
 30675              	.LBB4390:
 30676              	.LBB4387:
 30677              	.LBB4384:
 30678              	.LBB4378:
 30679              	.LBB4375:
 30680              	.LBI4375:
 812:src/xeq.c     **** 	getRegister(y, regY_idx);
 30681              		.loc 1 812 6 view .LVU8263
 30682              	.LBB4376:
 813:src/xeq.c     **** }
 30683              		.loc 1 813 2 view .LVU8264
 30684 04d4 6521     		movs	r1, #101
 30685 04d6 27A8     		add	r0, sp, #156
 30686              	.LVL2404:
 813:src/xeq.c     **** }
 30687              		.loc 1 813 2 is_stmt 0 view .LVU8265
 30688 04d8 FFF7FEFF 		bl	getRegister
 30689              	.LVL2405:
 813:src/xeq.c     **** }
 30690              		.loc 1 813 2 view .LVU8266
 30691              	.LBE4376:
 30692              	.LBE4375:
 30693              	.LBE4378:
4461:src/xeq.c     **** 				setlastXY();
 30694              		.loc 1 4461 5 is_stmt 1 view .LVU8267
 30695 04dc 27AB     		add	r3, sp, #156
 30696 04de 1EAA     		add	r2, sp, #120
 30697 04e0 39A9     		add	r1, sp, #228
 30698 04e2 30A8     		add	r0, sp, #192
 30699 04e4 A847     		blx	r5
 30700              	.LVL2406:
4462:src/xeq.c     **** 				setXY(&rx, &ry);
 30701              		.loc 1 4462 5 view .LVU8268
 30702 04e6 FFF7FEFF 		bl	setlastXY
 30703              	.LVL2407:
4463:src/xeq.c     **** 				set_was_complex();
 30704              		.loc 1 4463 5 view .LVU8269
 30705              	.LBB4379:
 30706              	.LBI4379:
 839:src/xeq.c     **** 	setX(x);
 30707              		.loc 1 839 6 view .LVU8270
 30708              	.LBE4379:
 30709              	.LBE4384:
 30710              	.LBE4387:
 30711              	.LBE4390:
 840:src/xeq.c     **** 	setY(y);
 30712              		.loc 1 840 2 view .LVU8271
 30713              	.LBB4391:
 30714              	.LBB4388:
 30715              	.LBB4385:
 30716              	.LBB4382:
 30717              	.LBB4380:
 30718              	.LBI4380:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 30719              		.loc 1 808 6 view .LVU8272
ARM GAS  /tmp/cciWh9P3.s 			page 779


 30720              	.LBB4381:
 809:src/xeq.c     **** }
 30721              		.loc 1 809 2 view .LVU8273
 30722              	.L2343:
 809:src/xeq.c     **** }
 30723              		.loc 1 809 2 is_stmt 0 view .LVU8274
 30724              	.LBE4381:
 30725              	.LBE4380:
 30726              	.LBE4382:
 30727              	.LBE4385:
 30728              	.LBE4388:
 30729              	.LBE4391:
 30730              	.LBB4392:
 30731              	.LBB4351:
 30732              	.LBB4338:
4542:src/xeq.c     **** 				set_was_complex();
 30733              		.loc 1 4542 5 is_stmt 1 view .LVU8275
 30734              	.LBB4329:
 30735              	.LBI4329:
 839:src/xeq.c     **** 	setX(x);
 30736              		.loc 1 839 6 view .LVU8276
 30737              	.LBE4329:
 30738              	.LBE4338:
 30739              	.LBE4351:
 30740              	.LBE4392:
 840:src/xeq.c     **** 	setY(y);
 30741              		.loc 1 840 2 view .LVU8277
 30742              	.LBB4393:
 30743              	.LBB4352:
 30744              	.LBB4339:
 30745              	.LBB4334:
 30746              	.LBB4330:
 30747              	.LBI4330:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 30748              		.loc 1 808 6 view .LVU8278
 30749              	.LBB4331:
 809:src/xeq.c     **** }
 30750              		.loc 1 809 2 view .LVU8279
 30751 04ea 30A9     		add	r1, sp, #192
 30752              	.LVL2408:
 809:src/xeq.c     **** }
 30753              		.loc 1 809 2 is_stmt 0 view .LVU8280
 30754 04ec 6420     		movs	r0, #100
 30755 04ee FFF7FEFF 		bl	setRegister
 30756              	.LVL2409:
 809:src/xeq.c     **** }
 30757              		.loc 1 809 2 view .LVU8281
 30758              	.LBE4331:
 30759              	.LBE4330:
 30760              	.LBE4334:
 30761              	.LBE4339:
 30762              	.LBE4352:
 30763              	.LBE4393:
 841:src/xeq.c     **** }
 30764              		.loc 1 841 2 is_stmt 1 view .LVU8282
 30765              	.LBB4394:
 30766              	.LBB4353:
ARM GAS  /tmp/cciWh9P3.s 			page 780


 30767              	.LBB4340:
 30768              	.LBB4335:
 30769              	.LBB4332:
 30770              	.LBI4332:
 816:src/xeq.c     **** 	setRegister(regY_idx, y);
 30771              		.loc 1 816 6 view .LVU8283
 30772              	.LBB4333:
 817:src/xeq.c     **** }
 30773              		.loc 1 817 2 view .LVU8284
 30774 04f2 39A9     		add	r1, sp, #228
 30775              	.LVL2410:
 817:src/xeq.c     **** }
 30776              		.loc 1 817 2 is_stmt 0 view .LVU8285
 30777 04f4 6520     		movs	r0, #101
 30778 04f6 FFF7FEFF 		bl	setRegister
 30779              	.LVL2411:
 817:src/xeq.c     **** }
 30780              		.loc 1 817 2 view .LVU8286
 30781              	.LBE4333:
 30782              	.LBE4332:
 30783              	.LBE4335:
4543:src/xeq.c     **** 			}
 30784              		.loc 1 4543 5 is_stmt 1 view .LVU8287
 30785              	.LBB4336:
 30786              	.LBI4336:
 529:src/xeq.c     **** 	State2.wascomplex = 1;
 30787              		.loc 1 529 13 view .LVU8288
 30788              	.LBB4337:
 530:src/xeq.c     **** }
 30789              		.loc 1 530 2 view .LVU8289
 530:src/xeq.c     **** }
 30790              		.loc 1 530 20 is_stmt 0 view .LVU8290
 30791 04fa 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 30792 04fc 194B     		ldr	r3, .L2388
 30793 04fe 0121     		movs	r1, #1
 30794 0500 61F38712 		bfi	r2, r1, #6, #2
 30795 0504 2275     		strb	r2, [r4, #20]
 30796 0506 1A68     		ldr	r2, [r3]
 531:src/xeq.c     **** 
 30797              		.loc 1 531 1 view .LVU8291
 30798 0508 5FE6     		b	.L2124
 30799              	.LVL2412:
 30800              	.L2155:
 531:src/xeq.c     **** 
 30801              		.loc 1 531 1 view .LVU8292
 30802              	.LBE4337:
 30803              	.LBE4336:
 30804              	.LBE4340:
 30805              	.LBE4353:
 30806              	.LBE4394:
5112:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
 30807              		.loc 1 5112 18 is_stmt 1 view .LVU8293
 30808              	.LBB4395:
 30809              	.LBI4395:
4406:src/xeq.c     **** {
 30810              		.loc 1 4406 13 view .LVU8294
 30811              	.LBB4396:
ARM GAS  /tmp/cciWh9P3.s 			page 781


4408:src/xeq.c     **** 	process_cmdline_set_lift();
 30812              		.loc 1 4408 2 view .LVU8295
4409:src/xeq.c     **** 
 30813              		.loc 1 4409 2 view .LVU8296
 30814              	.LBB4397:
 30815              	.LBI4397:
1145:src/xeq.c     **** 	process_cmdline();
 30816              		.loc 1 1145 6 view .LVU8297
 30817              	.LBB4398:
1146:src/xeq.c     **** 	set_lift();
 30818              		.loc 1 1146 2 view .LVU8298
 30819 050a FFF7FEFF 		bl	process_cmdline
 30820              	.LVL2413:
1147:src/xeq.c     **** }
 30821              		.loc 1 1147 2 view .LVU8299
 30822              	.LBB4399:
 30823              	.LBI4399:
 747:src/xeq.c     ****     State2.state_lift = 1;
 30824              		.loc 1 747 6 view .LVU8300
 30825              	.LBB4400:
 748:src/xeq.c     **** }
 30826              		.loc 1 748 5 view .LVU8301
 748:src/xeq.c     **** }
 30827              		.loc 1 748 23 is_stmt 0 view .LVU8302
 30828 050e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30829              	.LBE4400:
 30830              	.LBE4399:
 30831              	.LBE4398:
 30832              	.LBE4397:
4411:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 30833              		.loc 1 4411 4 view .LVU8303
 30834 0510 EDB2     		uxtb	r5, r5
 30835              	.LVL2414:
 30836              	.LBB4407:
 30837              	.LBB4405:
 30838              	.LBB4403:
 30839              	.LBB4401:
 748:src/xeq.c     **** }
 30840              		.loc 1 748 23 view .LVU8304
 30841 0512 43F04003 		orr	r3, r3, #64
 30842              	.LBE4401:
 30843              	.LBE4403:
 30844              	.LBE4405:
 30845              	.LBE4407:
4412:src/xeq.c     **** 		if (is_intmode()) {
 30846              		.loc 1 4412 5 view .LVU8305
 30847 0516 982D     		cmp	r5, #152
 30848              	.LBB4408:
 30849              	.LBB4406:
 30850              	.LBB4404:
 30851              	.LBB4402:
 748:src/xeq.c     **** }
 30852              		.loc 1 748 23 view .LVU8306
 30853 0518 E375     		strb	r3, [r4, #23]
 30854              	.LBE4402:
 30855              	.LBE4404:
 30856              	.LBE4406:
ARM GAS  /tmp/cciWh9P3.s 			page 782


 30857              	.LBE4408:
4411:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 30858              		.loc 1 4411 2 is_stmt 1 view .LVU8307
 30859              	.LVL2415:
4412:src/xeq.c     **** 		if (is_intmode()) {
 30860              		.loc 1 4412 2 view .LVU8308
4412:src/xeq.c     **** 		if (is_intmode()) {
 30861              		.loc 1 4412 5 is_stmt 0 view .LVU8309
 30862 051a 3FF6BBAE 		bhi	.L2149
4413:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30863              		.loc 1 4413 3 is_stmt 1 view .LVU8310
4413:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30864              		.loc 1 4413 7 is_stmt 0 view .LVU8311
 30865 051e 3B68     		ldr	r3, [r7]
 30866 0520 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4413:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30867              		.loc 1 4413 6 view .LVU8312
 30868 0524 D907     		lsls	r1, r3, #31
 30869 0526 40F1BA82 		bpl	.L2206
4414:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30870              		.loc 1 4414 4 is_stmt 1 view .LVU8313
4414:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30871              		.loc 1 4414 10 is_stmt 0 view .LVU8314
 30872 052a 144B     		ldr	r3, .L2388+24
 30873 052c 05EB4505 		add	r5, r5, r5, lsl #1
 30874              	.LVL2416:
4414:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30875              		.loc 1 4414 10 view .LVU8315
 30876 0530 03EBC505 		add	r5, r3, r5, lsl #3
 30877 0534 AD68     		ldr	r5, [r5, #8]
4414:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30878              		.loc 1 4414 7 view .LVU8316
 30879 0536 002D     		cmp	r5, #0
 30880 0538 00F0E181 		beq	.L2223
 30881              	.LBB4409:
4415:src/xeq.c     **** 				if (dispatch_xrom(fp))
 30882              		.loc 1 4415 5 is_stmt 1 view .LVU8317
 30883              	.LVL2417:
4416:src/xeq.c     **** 					return;
 30884              		.loc 1 4416 5 view .LVU8318
4416:src/xeq.c     **** 					return;
 30885              		.loc 1 4416 9 is_stmt 0 view .LVU8319
 30886 053c 2846     		mov	r0, r5
 30887 053e FFF7FEFF 		bl	dispatch_xrom
 30888              	.LVL2418:
4416:src/xeq.c     **** 					return;
 30889              		.loc 1 4416 8 view .LVU8320
 30890 0542 0028     		cmp	r0, #0
 30891 0544 40F08E80 		bne	.L2121
 30892              	.LBB4410:
4419:src/xeq.c     **** 					x = fp(x);
 30893              		.loc 1 4419 6 is_stmt 1 view .LVU8321
 30894              	.LBB4411:
 30895              	.LBI4411:
1255:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 30896              		.loc 1 1255 15 view .LVU8322
 30897              	.LBB4412:
ARM GAS  /tmp/cciWh9P3.s 			page 783


1256:src/xeq.c     **** }
 30898              		.loc 1 1256 2 view .LVU8323
1256:src/xeq.c     **** }
 30899              		.loc 1 1256 9 is_stmt 0 view .LVU8324
 30900 0548 6420     		movs	r0, #100
 30901 054a FFF7FEFF 		bl	get_reg_n_int
 30902              	.LVL2419:
1256:src/xeq.c     **** }
 30903              		.loc 1 1256 9 view .LVU8325
 30904              	.LBE4412:
 30905              	.LBE4411:
4420:src/xeq.c     **** 					setlastX();
 30906              		.loc 1 4420 6 is_stmt 1 view .LVU8326
4420:src/xeq.c     **** 					setlastX();
 30907              		.loc 1 4420 10 is_stmt 0 view .LVU8327
 30908 054e A847     		blx	r5
 30909              	.LVL2420:
4420:src/xeq.c     **** 					setlastX();
 30910              		.loc 1 4420 10 view .LVU8328
 30911 0550 044B     		ldr	r3, .L2388
 30912 0552 0593     		str	r3, [sp, #20]
 30913 0554 8046     		mov	r8, r0
 30914 0556 0D46     		mov	r5, r1
 30915              	.LVL2421:
4421:src/xeq.c     **** 					setX_int(x);
 30916              		.loc 1 4421 6 is_stmt 1 view .LVU8329
 30917              	.LBB4413:
 30918              	.LBI4413:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 30919              		.loc 1 772 6 view .LVU8330
 30920              	.LBB4414:
 773:src/xeq.c     **** }
 30921              		.loc 1 773 2 view .LVU8331
 30922 0558 6C20     		movs	r0, #108
 30923              	.LVL2422:
 773:src/xeq.c     **** }
 30924              		.loc 1 773 2 is_stmt 0 view .LVU8332
 30925 055a 6421     		movs	r1, #100
 30926              	.LVL2423:
 773:src/xeq.c     **** }
 30927              		.loc 1 773 2 view .LVU8333
 30928 055c FFF7FEFF 		bl	copyreg_n
 30929              	.LVL2424:
 30930              	.LBE4414:
 30931              	.LBE4413:
4422:src/xeq.c     **** 				}
 30932              		.loc 1 4422 6 is_stmt 1 view .LVU8334
 30933 0560 4EE0     		b	.L2346
 30934              	.L2389:
 30935 0562 00BF     		.align	2
 30936              	.L2388:
 30937 0564 00000000 		.word	Error
 30938 0568 00000000 		.word	XromRunning
 30939 056c 00000000 		.word	XromParams
 30940 0570 01400800 		.word	540673
 30941 0574 00000000 		.word	RetStk
 30942 0578 00000000 		.word	dyfuncs
ARM GAS  /tmp/cciWh9P3.s 			page 784


 30943 057c 00000000 		.word	monfuncs
 30944 0580 00000000 		.word	Running
 30945              	.LVL2425:
 30946              	.L2153:
4422:src/xeq.c     **** 				}
 30947              		.loc 1 4422 6 is_stmt 0 view .LVU8335
 30948              	.LBE4410:
 30949              	.LBE4409:
 30950              	.LBE4396:
 30951              	.LBE4395:
5114:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
 30952              		.loc 1 5114 18 is_stmt 1 view .LVU8336
 30953              	.LBB4429:
 30954              	.LBI4429:
4555:src/xeq.c     **** 	unsigned int f;
 30955              		.loc 1 4555 13 view .LVU8337
 30956              	.LBB4430:
4556:src/xeq.c     **** 	process_cmdline_set_lift();
 30957              		.loc 1 4556 2 view .LVU8338
4557:src/xeq.c     **** 
 30958              		.loc 1 4557 2 view .LVU8339
 30959              	.LBB4431:
 30960              	.LBI4431:
1145:src/xeq.c     **** 	process_cmdline();
 30961              		.loc 1 1145 6 view .LVU8340
 30962              	.LBB4432:
1146:src/xeq.c     **** 	set_lift();
 30963              		.loc 1 1146 2 view .LVU8341
 30964 0584 FFF7FEFF 		bl	process_cmdline
 30965              	.LVL2426:
1147:src/xeq.c     **** }
 30966              		.loc 1 1147 2 view .LVU8342
 30967              	.LBB4433:
 30968              	.LBI4433:
 747:src/xeq.c     ****     State2.state_lift = 1;
 30969              		.loc 1 747 6 view .LVU8343
 30970              	.LBB4434:
 748:src/xeq.c     **** }
 30971              		.loc 1 748 5 view .LVU8344
 748:src/xeq.c     **** }
 30972              		.loc 1 748 23 is_stmt 0 view .LVU8345
 30973 0588 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30974              	.LBE4434:
 30975              	.LBE4433:
 30976              	.LBE4432:
 30977              	.LBE4431:
4559:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 30978              		.loc 1 4559 4 view .LVU8346
 30979 058a EDB2     		uxtb	r5, r5
 30980              	.LVL2427:
 30981              	.LBB4441:
 30982              	.LBB4439:
 30983              	.LBB4437:
 30984              	.LBB4435:
 748:src/xeq.c     **** }
 30985              		.loc 1 748 23 view .LVU8347
 30986 058c 43F04003 		orr	r3, r3, #64
ARM GAS  /tmp/cciWh9P3.s 			page 785


 30987              	.LBE4435:
 30988              	.LBE4437:
 30989              	.LBE4439:
 30990              	.LBE4441:
4560:src/xeq.c     **** 		if (is_intmode()) {
 30991              		.loc 1 4560 5 view .LVU8348
 30992 0590 0B2D     		cmp	r5, #11
 30993              	.LBB4442:
 30994              	.LBB4440:
 30995              	.LBB4438:
 30996              	.LBB4436:
 748:src/xeq.c     **** }
 30997              		.loc 1 748 23 view .LVU8349
 30998 0592 E375     		strb	r3, [r4, #23]
 30999              	.LBE4436:
 31000              	.LBE4438:
 31001              	.LBE4440:
 31002              	.LBE4442:
4559:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31003              		.loc 1 4559 2 is_stmt 1 view .LVU8350
 31004              	.LVL2428:
4560:src/xeq.c     **** 		if (is_intmode()) {
 31005              		.loc 1 4560 2 view .LVU8351
4560:src/xeq.c     **** 		if (is_intmode()) {
 31006              		.loc 1 4560 5 is_stmt 0 view .LVU8352
 31007 0594 3FF67EAE 		bhi	.L2149
4561:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31008              		.loc 1 4561 3 is_stmt 1 view .LVU8353
4561:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31009              		.loc 1 4561 7 is_stmt 0 view .LVU8354
 31010 0598 3B68     		ldr	r3, [r7]
 31011 059a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4561:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31012              		.loc 1 4561 6 view .LVU8355
 31013 059e DB07     		lsls	r3, r3, #31
 31014 05a0 40F1B682 		bpl	.L2220
4562:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31015              		.loc 1 4562 4 is_stmt 1 view .LVU8356
4562:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31016              		.loc 1 4562 10 is_stmt 0 view .LVU8357
 31017 05a4 AF4B     		ldr	r3, .L2390
 31018 05a6 05EB8505 		add	r5, r5, r5, lsl #2
 31019              	.LVL2429:
4562:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31020              		.loc 1 4562 10 view .LVU8358
 31021 05aa 03EB8505 		add	r5, r3, r5, lsl #2
 31022 05ae 6D68     		ldr	r5, [r5, #4]
4562:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31023              		.loc 1 4562 7 view .LVU8359
 31024 05b0 002D     		cmp	r5, #0
 31025 05b2 00F0A481 		beq	.L2223
 31026              	.LBB4443:
4563:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31027              		.loc 1 4563 5 is_stmt 1 view .LVU8360
 31028              	.LVL2430:
4564:src/xeq.c     **** 					return;
 31029              		.loc 1 4564 5 view .LVU8361
ARM GAS  /tmp/cciWh9P3.s 			page 786


4564:src/xeq.c     **** 					return;
 31030              		.loc 1 4564 9 is_stmt 0 view .LVU8362
 31031 05b6 2846     		mov	r0, r5
 31032 05b8 FFF7FEFF 		bl	dispatch_xrom
 31033              	.LVL2431:
4564:src/xeq.c     **** 					return;
 31034              		.loc 1 4564 8 view .LVU8363
 31035 05bc 0028     		cmp	r0, #0
 31036 05be 51D1     		bne	.L2121
 31037              	.LBB4444:
4567:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 31038              		.loc 1 4567 6 is_stmt 1 view .LVU8364
 31039              	.LBB4445:
 31040              	.LBI4445:
1255:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31041              		.loc 1 1255 15 view .LVU8365
 31042              	.LBB4446:
1256:src/xeq.c     **** }
 31043              		.loc 1 1256 2 view .LVU8366
1256:src/xeq.c     **** }
 31044              		.loc 1 1256 9 is_stmt 0 view .LVU8367
 31045 05c0 6420     		movs	r0, #100
 31046 05c2 FFF7FEFF 		bl	get_reg_n_int
 31047              	.LVL2432:
 31048 05c6 8046     		mov	r8, r0
 31049              	.LVL2433:
1256:src/xeq.c     **** }
 31050              		.loc 1 1256 9 view .LVU8368
 31051              	.LBE4446:
 31052              	.LBE4445:
4568:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31053              		.loc 1 4568 6 is_stmt 1 view .LVU8369
4568:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31054              		.loc 1 4568 24 is_stmt 0 view .LVU8370
 31055 05c8 6520     		movs	r0, #101
 31056              	.LVL2434:
 31057              	.LBB4448:
 31058              	.LBB4447:
1256:src/xeq.c     **** }
 31059              		.loc 1 1256 9 view .LVU8371
 31060 05ca 0591     		str	r1, [sp, #20]
 31061              	.LVL2435:
1256:src/xeq.c     **** }
 31062              		.loc 1 1256 9 view .LVU8372
 31063              	.LBE4447:
 31064              	.LBE4448:
4568:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31065              		.loc 1 4568 24 view .LVU8373
 31066 05cc FFF7FEFF 		bl	get_reg_n_int
 31067              	.LVL2436:
 31068 05d0 0790     		str	r0, [sp, #28]
4569:src/xeq.c     **** 					x = fp(z, y, x);
 31069              		.loc 1 4569 24 view .LVU8374
 31070 05d2 6620     		movs	r0, #102
4568:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31071              		.loc 1 4568 24 view .LVU8375
 31072 05d4 0691     		str	r1, [sp, #24]
ARM GAS  /tmp/cciWh9P3.s 			page 787


 31073              	.LVL2437:
4569:src/xeq.c     **** 					x = fp(z, y, x);
 31074              		.loc 1 4569 6 is_stmt 1 view .LVU8376
4569:src/xeq.c     **** 					x = fp(z, y, x);
 31075              		.loc 1 4569 24 is_stmt 0 view .LVU8377
 31076 05d6 FFF7FEFF 		bl	get_reg_n_int
 31077              	.LVL2438:
4570:src/xeq.c     **** 					setlastX();
 31078              		.loc 1 4570 6 is_stmt 1 view .LVU8378
4570:src/xeq.c     **** 					setlastX();
 31079              		.loc 1 4570 10 is_stmt 0 view .LVU8379
 31080 05da 059B     		ldr	r3, [sp, #20]
 31081 05dc CDF80080 		str	r8, [sp]
 31082 05e0 0193     		str	r3, [sp, #4]
 31083 05e2 DDE90632 		ldrd	r3, r2, [sp, #24]
 31084 05e6 A847     		blx	r5
 31085              	.LVL2439:
4570:src/xeq.c     **** 					setlastX();
 31086              		.loc 1 4570 10 view .LVU8380
 31087 05e8 9F4B     		ldr	r3, .L2390+4
 31088 05ea 0593     		str	r3, [sp, #20]
 31089 05ec 8046     		mov	r8, r0
4570:src/xeq.c     **** 					setlastX();
 31090              		.loc 1 4570 10 view .LVU8381
 31091 05ee 0D46     		mov	r5, r1
 31092              	.LVL2440:
4571:src/xeq.c     **** 					lower();
 31093              		.loc 1 4571 6 is_stmt 1 view .LVU8382
 31094              	.LBB4449:
 31095              	.LBI4449:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31096              		.loc 1 772 6 view .LVU8383
 31097              	.LBB4450:
 773:src/xeq.c     **** }
 31098              		.loc 1 773 2 view .LVU8384
 31099 05f0 6C20     		movs	r0, #108
 31100              	.LVL2441:
 773:src/xeq.c     **** }
 31101              		.loc 1 773 2 is_stmt 0 view .LVU8385
 31102 05f2 6421     		movs	r1, #100
 31103              	.LVL2442:
 773:src/xeq.c     **** }
 31104              		.loc 1 773 2 view .LVU8386
 31105 05f4 FFF7FEFF 		bl	copyreg_n
 31106              	.LVL2443:
 31107              	.LBE4450:
 31108              	.LBE4449:
4572:src/xeq.c     **** 					lower();
 31109              		.loc 1 4572 6 is_stmt 1 view .LVU8387
 31110 05f8 FFF7FEFF 		bl	lower
 31111              	.LVL2444:
 31112              	.L2344:
4573:src/xeq.c     **** 					setX_int(x);
 31113              		.loc 1 4573 6 view .LVU8388
 31114 05fc FFF7FEFF 		bl	lower
 31115              	.LVL2445:
 31116              	.L2346:
ARM GAS  /tmp/cciWh9P3.s 			page 788


4574:src/xeq.c     **** 				}
 31117              		.loc 1 4574 6 view .LVU8389
 31118 0600 4046     		mov	r0, r8
 31119 0602 2946     		mov	r1, r5
 31120 0604 FFF7FEFF 		bl	setX_int
 31121              	.LVL2446:
 31122 0608 059B     		ldr	r3, [sp, #20]
 31123 060a 1A68     		ldr	r2, [r3]
 31124              	.LBE4444:
 31125              	.LBE4443:
 31126 060c DDE5     		b	.L2124
 31127              	.LVL2447:
 31128              	.L2370:
4574:src/xeq.c     **** 				}
 31129              		.loc 1 4574 6 is_stmt 0 view .LVU8390
 31130              	.LBE4430:
 31131              	.LBE4429:
 31132              	.LBB4470:
 31133              	.LBB4158:
5028:src/xeq.c     **** 		return;
 31134              		.loc 1 5028 3 is_stmt 1 view .LVU8391
5028:src/xeq.c     **** 		return;
 31135              		.loc 1 5028 3 view .LVU8392
 31136              	.LBB4155:
 31137              	.LBI4150:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31138              		.loc 1 536 5 view .LVU8393
 31139              	.LBB4154:
 537:src/xeq.c     **** 		Error = e;
 31140              		.loc 1 537 2 view .LVU8394
 537:src/xeq.c     **** 		Error = e;
 31141              		.loc 1 537 12 is_stmt 0 view .LVU8395
 31142 060e 964B     		ldr	r3, .L2390+4
 31143 0610 DFF87882 		ldr	r8, .L2390+40
 31144              	.LVL2448:
 537:src/xeq.c     **** 		Error = e;
 31145              		.loc 1 537 12 view .LVU8396
 31146 0614 1868     		ldr	r0, [r3]
 537:src/xeq.c     **** 		Error = e;
 31147              		.loc 1 537 5 view .LVU8397
 31148 0616 0028     		cmp	r0, #0
 31149 0618 7FF445AE 		bne	.L2247
 31150 061c 41E6     		b	.L2128
 31151              	.LVL2449:
 31152              	.L2230:
 537:src/xeq.c     **** 		Error = e;
 31153              		.loc 1 537 5 view .LVU8398
 31154              	.LBE4154:
 31155              	.LBE4155:
 31156              	.LBE4158:
 31157              	.LBE4470:
 31158              	.LBB4471:
 31159              	.LBB4354:
4548:src/xeq.c     **** }
 31160              		.loc 1 4548 3 is_stmt 1 view .LVU8399
4548:src/xeq.c     **** }
 31161              		.loc 1 4548 3 view .LVU8400
ARM GAS  /tmp/cciWh9P3.s 			page 789


 31162              	.LBB4341:
 31163              	.LBI4341:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31164              		.loc 1 536 5 view .LVU8401
 31165              	.LBB4342:
 537:src/xeq.c     **** 		Error = e;
 31166              		.loc 1 537 2 view .LVU8402
 537:src/xeq.c     **** 		Error = e;
 31167              		.loc 1 537 12 is_stmt 0 view .LVU8403
 31168 061e 924B     		ldr	r3, .L2390+4
 31169 0620 1A68     		ldr	r2, [r3]
 537:src/xeq.c     **** 		Error = e;
 31170              		.loc 1 537 5 view .LVU8404
 31171 0622 002A     		cmp	r2, #0
 31172 0624 7FF46CAD 		bne	.L2134
 31173              	.LVL2450:
 31174              	.LBB4343:
 31175              	.LBI4343:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31176              		.loc 1 536 5 is_stmt 1 view .LVU8405
 31177              	.LBB4344:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 31178              		.loc 1 538 3 view .LVU8406
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 31179              		.loc 1 538 9 is_stmt 0 view .LVU8407
 31180 0628 0322     		movs	r2, #3
 31181 062a 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 31182              		.loc 1 539 3 is_stmt 1 view .LVU8408
 31183              	.LVL2451:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 31184              		.loc 1 539 3 is_stmt 0 view .LVU8409
 31185              	.LBE4344:
 31186              	.LBE4343:
 31187              	.LBE4342:
 31188              	.LBE4341:
4548:src/xeq.c     **** }
 31189              		.loc 1 4548 3 is_stmt 1 view .LVU8410
 31190              	.LBE4354:
 31191              	.LBE4471:
5117:src/xeq.c     **** 		}
 31192              		.loc 1 5117 12 view .LVU8411
5127:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31193              		.loc 1 5127 2 view .LVU8412
 31194 062c 68E5     		b	.L2134
 31195              	.LVL2452:
 31196              	.L2194:
 31197              	.LBB4472:
 31198              	.LBB4126:
4395:src/xeq.c     **** 	if (idx != OP_rCLX)
 31199              		.loc 1 4395 3 view .LVU8413
4396:src/xeq.c     **** 		set_lift();
 31200              		.loc 1 4396 2 view .LVU8414
4396:src/xeq.c     **** 		set_lift();
 31201              		.loc 1 4396 5 is_stmt 0 view .LVU8415
 31202 062e 3F2D     		cmp	r5, #63
 31203 0630 7FF4C7AD 		bne	.L2203
ARM GAS  /tmp/cciWh9P3.s 			page 790


 31204              	.L2196:
 31205              	.LVL2453:
4396:src/xeq.c     **** 		set_lift();
 31206              		.loc 1 4396 5 view .LVU8416
 31207              	.LBE4126:
 31208              	.LBE4472:
5117:src/xeq.c     **** 		}
 31209              		.loc 1 5117 12 is_stmt 1 view .LVU8417
5127:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31210              		.loc 1 5127 2 view .LVU8418
 31211 0634 1046     		mov	r0, r2
 31212              	.L2350:
5127:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31213              		.loc 1 5127 2 is_stmt 0 view .LVU8419
 31214 0636 DFF85482 		ldr	r8, .L2390+40
 31215 063a 34E6     		b	.L2247
 31216              	.LVL2454:
 31217              	.L2141:
 31218              	.LBB4473:
 31219              	.LBB4075:
4983:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31220              		.loc 1 4983 7 is_stmt 1 view .LVU8420
4983:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31221              		.loc 1 4983 23 is_stmt 0 view .LVU8421
 31222 063c 059B     		ldr	r3, [sp, #20]
 31223 063e 1A44     		add	r2, r2, r3
 31224 0640 5379     		ldrb	r3, [r2, #5]	@ zero_extendqisi2
4983:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31225              		.loc 1 4983 10 view .LVU8422
 31226 0642 DB06     		lsls	r3, r3, #27
 31227 0644 00F1CA80 		bmi	.L2374
 31228              	.L2143:
 31229              	.LBB4054:
4989:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 31230              		.loc 1 4989 3 is_stmt 1 view .LVU8423
 31231              	.LVL2455:
4990:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 31232              		.loc 1 4990 3 view .LVU8424
 31233              	.LBB4055:
 31234              	.LBI4055:
4247:src/xeq.c     **** {
 31235              		.loc 1 4247 24 view .LVU8425
 31236              	.LBB4056:
4249:src/xeq.c     **** 	if (xp < xrom)
 31237              		.loc 1 4249 2 view .LVU8426
4249:src/xeq.c     **** 	if (xp < xrom)
 31238              		.loc 1 4249 59 is_stmt 0 view .LVU8427
 31239 0648 069A     		ldr	r2, [sp, #24]
4250:src/xeq.c     **** 		return NULL;
 31240              		.loc 1 4250 5 view .LVU8428
 31241 064a 884B     		ldr	r3, .L2390+8
4249:src/xeq.c     **** 	if (xp < xrom)
 31242              		.loc 1 4249 59 view .LVU8429
 31243 064c 22F00102 		bic	r2, r2, #1
 31244              	.LVL2456:
4250:src/xeq.c     **** 		return NULL;
 31245              		.loc 1 4250 2 is_stmt 1 view .LVU8430
ARM GAS  /tmp/cciWh9P3.s 			page 791


4250:src/xeq.c     **** 		return NULL;
 31246              		.loc 1 4250 5 is_stmt 0 view .LVU8431
 31247 0650 9A42     		cmp	r2, r3
 31248 0652 63D2     		bcs	.L2375
 31249              	.LVL2457:
 31250              	.L2145:
4250:src/xeq.c     **** 		return NULL;
 31251              		.loc 1 4250 5 view .LVU8432
 31252              	.LBE4056:
 31253              	.LBE4055:
5012:src/xeq.c     **** 		}
 31254              		.loc 1 5012 4 is_stmt 1 view .LVU8433
 31255 0654 0846     		mov	r0, r1
 31256 0656 069B     		ldr	r3, [sp, #24]
 31257 0658 4146     		mov	r1, r8
 31258              	.LVL2458:
5012:src/xeq.c     **** 		}
 31259              		.loc 1 5012 4 is_stmt 0 view .LVU8434
 31260 065a 9847     		blx	r3
 31261              	.LVL2459:
5014:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31262              		.loc 1 5014 3 is_stmt 1 view .LVU8435
5014:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31263              		.loc 1 5014 6 is_stmt 0 view .LVU8436
 31264 065c B8F1840F 		cmp	r8, #132
 31265 0660 7FF4E5AD 		bne	.L2342
 31266              	.LVL2460:
 31267              	.L2121:
5014:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31268              		.loc 1 5014 6 view .LVU8437
 31269 0664 804B     		ldr	r3, .L2390+4
 31270 0666 1A68     		ldr	r2, [r3]
 31271 0668 AFE5     		b	.L2124
 31272              	.LVL2461:
 31273              	.L2132:
5014:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31274              		.loc 1 5014 6 view .LVU8438
 31275              	.LBE4054:
 31276              	.LBB4065:
4955:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31277              		.loc 1 4955 4 is_stmt 1 view .LVU8439
4955:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31278              		.loc 1 4955 13 is_stmt 0 view .LVU8440
 31279 066a 0846     		mov	r0, r1
 31280 066c 39A9     		add	r1, sp, #228
 31281              	.LVL2462:
4955:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31282              		.loc 1 4955 13 view .LVU8441
 31283 066e FFF7FEFF 		bl	get_reg_n_int_sgn
 31284              	.LVL2463:
4956:src/xeq.c     **** 				goto range;
 31285              		.loc 1 4956 16 view .LVU8442
 31286 0672 0023     		movs	r3, #0
 31287 0674 0891     		str	r1, [sp, #32]
 31288              	.LVL2464:
4956:src/xeq.c     **** 				goto range;
 31289              		.loc 1 4956 16 view .LVU8443
ARM GAS  /tmp/cciWh9P3.s 			page 792


 31290 0676 0993     		str	r3, [sp, #36]
 31291              	.LVL2465:
4956:src/xeq.c     **** 				goto range;
 31292              		.loc 1 4956 4 is_stmt 1 view .LVU8444
4956:src/xeq.c     **** 				goto range;
 31293              		.loc 1 4956 7 is_stmt 0 view .LVU8445
 31294 0678 DDE90823 		ldrd	r2, [sp, #32]
 31295 067c 1343     		orrs	r3, r2, r3
 31296 067e 15D1     		bne	.L2136
4958:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31297              		.loc 1 4958 4 is_stmt 1 view .LVU8446
4959:src/xeq.c     **** 				// negative arguments address local registers or flags
 31298              		.loc 1 4959 7 is_stmt 0 view .LVU8447
 31299 0680 15F0080F 		tst	r5, #8
 31300 0684 7A4A     		ldr	r2, .L2390+12
4958:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31301              		.loc 1 4958 8 view .LVU8448
 31302 0686 0146     		mov	r1, r0
 31303              	.LVL2466:
4959:src/xeq.c     **** 				// negative arguments address local registers or flags
 31304              		.loc 1 4959 4 is_stmt 1 view .LVU8449
4959:src/xeq.c     **** 				// negative arguments address local registers or flags
 31305              		.loc 1 4959 7 is_stmt 0 view .LVU8450
 31306 0688 03D0     		beq	.L2130
4959:src/xeq.c     **** 				// negative arguments address local registers or flags
 31307              		.loc 1 4959 27 view .LVU8451
 31308 068a 399B     		ldr	r3, [sp, #228]
 31309 068c 0BB1     		cbz	r3, .L2130
4961:src/xeq.c     **** 			}
 31310              		.loc 1 4961 5 is_stmt 1 view .LVU8452
4961:src/xeq.c     **** 			}
 31311              		.loc 1 4961 9 is_stmt 0 view .LVU8453
 31312 068e 00F17001 		add	r1, r0, #112
 31313              	.LVL2467:
 31314              	.L2130:
4961:src/xeq.c     **** 			}
 31315              		.loc 1 4961 9 view .LVU8454
 31316              	.LBE4065:
4969:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31317              		.loc 1 4969 2 is_stmt 1 view .LVU8455
4969:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31318              		.loc 1 4969 18 is_stmt 0 view .LVU8456
 31319 0692 059B     		ldr	r3, [sp, #20]
 31320 0694 D318     		adds	r3, r2, r3
 31321 0696 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
4969:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31322              		.loc 1 4969 5 view .LVU8457
 31323 0698 9D07     		lsls	r5, r3, #30
 31324 069a 35D5     		bpl	.L2138
4971:src/xeq.c     **** 	}
 31325              		.loc 1 4971 3 is_stmt 1 view .LVU8458
4971:src/xeq.c     **** 	}
 31326              		.loc 1 4971 9 is_stmt 0 view .LVU8459
 31327 069c 4046     		mov	r0, r8
 31328 069e 0791     		str	r1, [sp, #28]
 31329              	.LVL2468:
4971:src/xeq.c     **** 	}
ARM GAS  /tmp/cciWh9P3.s 			page 793


 31330              		.loc 1 4971 9 view .LVU8460
 31331 06a0 FFF7FEFF 		bl	get_reg_limit
 31332              	.LVL2469:
4971:src/xeq.c     **** 	}
 31333              		.loc 1 4971 9 view .LVU8461
 31334 06a4 0799     		ldr	r1, [sp, #28]
 31335 06a6 724A     		ldr	r2, .L2390+12
 31336              	.LVL2470:
 31337              	.L2139:
4979:src/xeq.c     **** 		// Argument is too large
 31338              		.loc 1 4979 2 is_stmt 1 view .LVU8462
4979:src/xeq.c     **** 		// Argument is too large
 31339              		.loc 1 4979 5 is_stmt 0 view .LVU8463
 31340 06a8 8142     		cmp	r1, r0
 31341 06aa C7D9     		bls	.L2141
 31342              	.LVL2471:
 31343              	.L2136:
4981:src/xeq.c     **** 	}
 31344              		.loc 1 4981 9 is_stmt 1 view .LVU8464
 31345              	.LBB4066:
 31346              	.LBI4066:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31347              		.loc 1 536 5 view .LVU8465
 31348              	.LBB4067:
 537:src/xeq.c     **** 		Error = e;
 31349              		.loc 1 537 2 view .LVU8466
 537:src/xeq.c     **** 		Error = e;
 31350              		.loc 1 537 12 is_stmt 0 view .LVU8467
 31351 06ac 6E4B     		ldr	r3, .L2390+4
 31352 06ae 1868     		ldr	r0, [r3]
 537:src/xeq.c     **** 		Error = e;
 31353              		.loc 1 537 5 view .LVU8468
 31354 06b0 0028     		cmp	r0, #0
 31355 06b2 C0D1     		bne	.L2350
 31356              	.LVL2472:
 31357              	.LBB4068:
 31358              	.LBI4068:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31359              		.loc 1 536 5 is_stmt 1 view .LVU8469
 31360              	.LBB4069:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 31361              		.loc 1 538 3 view .LVU8470
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 31362              		.loc 1 538 9 is_stmt 0 view .LVU8471
 31363 06b4 0820     		movs	r0, #8
 31364 06b6 DFF8D481 		ldr	r8, .L2390+40
 31365              	.LVL2473:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 31366              		.loc 1 538 9 view .LVU8472
 31367 06ba 1860     		str	r0, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 31368              		.loc 1 539 3 is_stmt 1 view .LVU8473
 31369 06bc F3E5     		b	.L2247
 31370              	.LVL2474:
 31371              	.L2373:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 31372              		.loc 1 539 3 is_stmt 0 view .LVU8474
ARM GAS  /tmp/cciWh9P3.s 			page 794


 31373              	.LBE4069:
 31374              	.LBE4068:
 31375              	.LBE4067:
 31376              	.LBE4066:
 31377              	.LBE4075:
 31378              	.LBE4473:
5146:src/xeq.c     **** 					// Restore the global return stack
 31379              		.loc 1 5146 5 is_stmt 1 view .LVU8475
5146:src/xeq.c     **** 					// Restore the global return stack
 31380              		.loc 1 5146 9 is_stmt 0 view .LVU8476
 31381 06be 6D4D     		ldr	r5, .L2390+16
5146:src/xeq.c     **** 					// Restore the global return stack
 31382              		.loc 1 5146 8 view .LVU8477
 31383 06c0 95F90110 		ldrsb	r1, [r5, #1]
5146:src/xeq.c     **** 					// Restore the global return stack
 31384              		.loc 1 5146 9 view .LVU8478
 31385 06c4 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
5146:src/xeq.c     **** 					// Restore the global return stack
 31386              		.loc 1 5146 8 view .LVU8479
 31387 06c6 8142     		cmp	r1, r0
 31388 06c8 BFF670AE 		bge	.L2237
5148:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31389              		.loc 1 5148 6 is_stmt 1 view .LVU8480
5148:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31390              		.loc 1 5148 13 is_stmt 0 view .LVU8481
 31391 06cc 6A49     		ldr	r1, .L2390+20
5149:src/xeq.c     **** 					// Restore private stack to normal stack
 31392              		.loc 1 5149 6 view .LVU8482
 31393 06ce D7F800C0 		ldr	ip, [r7]
5148:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31394              		.loc 1 5148 13 view .LVU8483
 31395 06d2 AE68     		ldr	r6, [r5, #8]
 31396 06d4 0E60     		str	r6, [r1]
5149:src/xeq.c     **** 					// Restore private stack to normal stack
 31397              		.loc 1 5149 6 is_stmt 1 view .LVU8484
5151:src/xeq.c     **** 						// Need space for double precision stack
 31398              		.loc 1 5151 9 is_stmt 0 view .LVU8485
 31399 06d6 12F00809 		ands	r9, r2, #8
5149:src/xeq.c     **** 					// Restore private stack to normal stack
 31400              		.loc 1 5149 16 view .LVU8486
 31401 06da A989     		ldrh	r1, [r5, #12]
 31402 06dc ACF8E217 		strh	r1, [ip, #2018]	@ movhi
5151:src/xeq.c     **** 						// Need space for double precision stack
 31403              		.loc 1 5151 6 is_stmt 1 view .LVU8487
5151:src/xeq.c     **** 						// Need space for double precision stack
 31404              		.loc 1 5151 9 is_stmt 0 view .LVU8488
 31405 06e0 00F0A581 		beq	.L2238
5155:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31406              		.loc 1 5155 6 is_stmt 1 view .LVU8489
5155:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31407              		.loc 1 5155 20 is_stmt 0 view .LVU8490
 31408 06e4 60F3C712 		bfi	r2, r0, #7, #1
 31409 06e8 6A70     		strb	r2, [r5, #1]
5156:src/xeq.c     **** 						UState.mode_double = 1;
 31410              		.loc 1 5156 6 is_stmt 1 view .LVU8491
 31411              	.L2239:
5157:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
ARM GAS  /tmp/cciWh9P3.s 			page 795


 31412              		.loc 1 5157 7 view .LVU8492
5157:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 31413              		.loc 1 5157 26 is_stmt 0 view .LVU8493
 31414 06ea 3A68     		ldr	r2, [r7]
 31415 06ec 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 31416 06f0 43F04003 		orr	r3, r3, #64
 31417 06f4 82F8E937 		strb	r3, [r2, #2025]
 31418              	.LVL2475:
5158:src/xeq.c     **** 					}
 31419              		.loc 1 5158 7 is_stmt 1 view .LVU8494
5158:src/xeq.c     **** 					}
 31420              		.loc 1 5158 13 is_stmt 0 view .LVU8495
 31421 06f8 6420     		movs	r0, #100
 31422 06fa FFF7FEFF 		bl	get_reg_n
 31423              	.LVL2476:
5158:src/xeq.c     **** 					}
 31424              		.loc 1 5158 7 view .LVU8496
 31425 06fe 5F49     		ldr	r1, .L2390+24
 31426 0700 C022     		movs	r2, #192
 31427 0702 FFF7FEFF 		bl	xcopy
 31428              	.LVL2477:
 31429 0706 51E6     		b	.L2237
 31430              	.LVL2478:
 31431              	.L2138:
 31432              	.LBB4474:
 31433              	.LBB4076:
4973:src/xeq.c     **** 		if (LocalRegs == 0)
 31434              		.loc 1 4973 7 is_stmt 1 view .LVU8497
4973:src/xeq.c     **** 		if (LocalRegs == 0)
 31435              		.loc 1 4973 10 is_stmt 0 view .LVU8498
 31436 0708 5D06     		lsls	r5, r3, #25
 31437 070a 65D5     		bpl	.L2376
4974:src/xeq.c     **** 			lim = NUMFLG - 1;
 31438              		.loc 1 4974 3 is_stmt 1 view .LVU8499
4974:src/xeq.c     **** 			lim = NUMFLG - 1;
 31439              		.loc 1 4974 7 is_stmt 0 view .LVU8500
 31440 070c 3B68     		ldr	r3, [r7]
4974:src/xeq.c     **** 			lim = NUMFLG - 1;
 31441              		.loc 1 4974 6 view .LVU8501
 31442 070e B3F9DE37 		ldrsh	r3, [r3, #2014]
4977:src/xeq.c     **** 	}
 31443              		.loc 1 4977 8 view .LVU8502
 31444 0712 002B     		cmp	r3, #0
 31445 0714 0CBF     		ite	eq
 31446 0716 6F20     		moveq	r0, #111
 31447 0718 7F20     		movne	r0, #127
 31448 071a C5E7     		b	.L2139
 31449              	.LVL2479:
 31450              	.L2375:
 31451              	.LBB4070:
 31452              	.LBB4058:
 31453              	.LBB4057:
4254:src/xeq.c     **** 		return NULL;
 31454              		.loc 1 4254 2 is_stmt 1 view .LVU8503
4254:src/xeq.c     **** 		return NULL;
 31455              		.loc 1 4254 17 is_stmt 0 view .LVU8504
 31456 071c 5848     		ldr	r0, .L2390+28
ARM GAS  /tmp/cciWh9P3.s 			page 796


 31457              	.LVL2480:
4254:src/xeq.c     **** 		return NULL;
 31458              		.loc 1 4254 17 view .LVU8505
 31459 071e 0088     		ldrh	r0, [r0]
 31460 0720 03EB4003 		add	r3, r3, r0, lsl #1
4254:src/xeq.c     **** 		return NULL;
 31461              		.loc 1 4254 5 view .LVU8506
 31462 0724 9A42     		cmp	r2, r3
 31463 0726 95D2     		bcs	.L2145
 31464              	.LVL2481:
4254:src/xeq.c     **** 		return NULL;
 31465              		.loc 1 4254 5 view .LVU8507
 31466              	.LBE4057:
 31467              	.LBE4058:
4990:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 31468              		.loc 1 4990 6 view .LVU8508
 31469 0728 002A     		cmp	r2, #0
 31470 072a 93D0     		beq	.L2145
5002:src/xeq.c     **** 			if (XromUserPc == 0)
 31471              		.loc 1 5002 4 is_stmt 1 view .LVU8509
 31472              	.LVL2482:
 31473              	.LBB4059:
 31474              	.LBI4059:
2009:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 31475              		.loc 1 2009 14 view .LVU8510
 31476              	.LBB4060:
2010:src/xeq.c     **** }
 31477              		.loc 1 2010 2 view .LVU8511
 31478              	.LBE4060:
 31479              	.LBE4059:
5002:src/xeq.c     **** 			if (XromUserPc == 0)
 31480              		.loc 1 5002 33 is_stmt 0 view .LVU8512
 31481 072c 3B68     		ldr	r3, [r7]
 31482              	.LBB4062:
 31483              	.LBB4061:
2010:src/xeq.c     **** }
 31484              		.loc 1 2010 9 view .LVU8513
 31485 072e 41F4C441 		orr	r1, r1, #25088
 31486              	.LVL2483:
2010:src/xeq.c     **** }
 31487              		.loc 1 2010 9 view .LVU8514
 31488 0732 B3F8E007 		ldrh	r0, [r3, #2016]
 31489 0736 0322     		movs	r2, #3
 31490 0738 FFF7FEFF 		bl	find_opcode_from
 31491              	.LVL2484:
2010:src/xeq.c     **** }
 31492              		.loc 1 2010 9 view .LVU8515
 31493              	.LBE4061:
 31494              	.LBE4062:
5002:src/xeq.c     **** 			if (XromUserPc == 0)
 31495              		.loc 1 5002 15 view .LVU8516
 31496 073c 514B     		ldr	r3, .L2390+32
 31497              	.LVL2485:
5002:src/xeq.c     **** 			if (XromUserPc == 0)
 31498              		.loc 1 5002 15 view .LVU8517
 31499 073e 1860     		str	r0, [r3]
5003:src/xeq.c     **** 				return;
ARM GAS  /tmp/cciWh9P3.s 			page 797


 31500              		.loc 1 5003 4 is_stmt 1 view .LVU8518
5003:src/xeq.c     **** 				return;
 31501              		.loc 1 5003 7 is_stmt 0 view .LVU8519
 31502 0740 0028     		cmp	r0, #0
 31503 0742 8FD0     		beq	.L2121
5005:src/xeq.c     **** 				clrretstk();
 31504              		.loc 1 5005 4 is_stmt 1 view .LVU8520
5005:src/xeq.c     **** 				clrretstk();
 31505              		.loc 1 5005 8 is_stmt 0 view .LVU8521
 31506 0744 DFF84481 		ldr	r8, .L2390+40
 31507              	.LVL2486:
5005:src/xeq.c     **** 				clrretstk();
 31508              		.loc 1 5005 7 view .LVU8522
 31509 0748 D8F80030 		ldr	r3, [r8]
 31510 074c 23B9     		cbnz	r3, .L2147
5006:src/xeq.c     **** #endif
 31511              		.loc 1 5006 5 is_stmt 1 view .LVU8523
 31512              	.LBB4063:
 31513              	.LBI4063:
1408:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 31514              		.loc 1 1408 6 view .LVU8524
 31515              	.LBB4064:
1409:src/xeq.c     **** }
 31516              		.loc 1 1409 2 view .LVU8525
1409:src/xeq.c     **** }
 31517              		.loc 1 1409 14 is_stmt 0 view .LVU8526
 31518 074e 3A68     		ldr	r2, [r7]
1409:src/xeq.c     **** }
 31519              		.loc 1 1409 24 view .LVU8527
 31520 0750 A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1409:src/xeq.c     **** }
 31521              		.loc 1 1409 12 view .LVU8528
 31522 0754 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 31523              	.L2147:
 31524              	.LBE4064:
 31525              	.LBE4063:
5008:src/xeq.c     **** 			return;
 31526              		.loc 1 5008 4 is_stmt 1 view .LVU8529
 31527 0758 434B     		ldr	r3, .L2390+4
 31528 075a 0698     		ldr	r0, [sp, #24]
 31529 075c 0593     		str	r3, [sp, #20]
 31530 075e FFF7FEFF 		bl	dispatch_xrom
 31531              	.LVL2487:
5009:src/xeq.c     **** 		}
 31532              		.loc 1 5009 4 view .LVU8530
 31533 0762 059B     		ldr	r3, [sp, #20]
 31534 0764 1A68     		ldr	r2, [r3]
 31535 0766 30E5     		b	.L2124
 31536              	.LVL2488:
 31537              	.L2131:
5009:src/xeq.c     **** 		}
 31538              		.loc 1 5009 4 is_stmt 0 view .LVU8531
 31539              	.LBE4070:
4966:src/xeq.c     **** 		}
 31540              		.loc 1 4966 4 is_stmt 1 view .LVU8532
4966:src/xeq.c     **** 		}
 31541              		.loc 1 4966 8 is_stmt 0 view .LVU8533
ARM GAS  /tmp/cciWh9P3.s 			page 798


 31542 0768 41F08001 		orr	r1, r1, #128
 31543              	.LVL2489:
4966:src/xeq.c     **** 		}
 31544              		.loc 1 4966 8 view .LVU8534
 31545 076c 91E7     		b	.L2130
 31546              	.LVL2490:
 31547              	.L2372:
4966:src/xeq.c     **** 		}
 31548              		.loc 1 4966 8 view .LVU8535
 31549              	.LBE4076:
 31550              	.LBE4474:
 31551              	.LBB4475:
 31552              	.LBB4276:
4487:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 31553              		.loc 1 4487 3 is_stmt 1 view .LVU8536
4487:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 31554              		.loc 1 4487 7 is_stmt 0 view .LVU8537
 31555 076e 3B68     		ldr	r3, [r7]
 31556 0770 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4487:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 31557              		.loc 1 4487 6 view .LVU8538
 31558 0774 DA07     		lsls	r2, r3, #31
 31559 0776 40F16381 		bpl	.L2213
4488:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31560              		.loc 1 4488 4 is_stmt 1 view .LVU8539
4488:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31561              		.loc 1 4488 10 is_stmt 0 view .LVU8540
 31562 077a 434B     		ldr	r3, .L2390+36
 31563 077c 05EB4505 		add	r5, r5, r5, lsl #1
 31564              	.LVL2491:
4488:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31565              		.loc 1 4488 10 view .LVU8541
 31566 0780 03EBC505 		add	r5, r3, r5, lsl #3
 31567 0784 AD68     		ldr	r5, [r5, #8]
4488:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 31568              		.loc 1 4488 7 view .LVU8542
 31569 0786 002D     		cmp	r5, #0
 31570 0788 00F0B980 		beq	.L2223
 31571              	.LBB4248:
4489:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31572              		.loc 1 4489 5 is_stmt 1 view .LVU8543
 31573              	.LVL2492:
4490:src/xeq.c     **** 					return;
 31574              		.loc 1 4490 5 view .LVU8544
4490:src/xeq.c     **** 					return;
 31575              		.loc 1 4490 9 is_stmt 0 view .LVU8545
 31576 078c 2846     		mov	r0, r5
 31577 078e FFF7FEFF 		bl	dispatch_xrom
 31578              	.LVL2493:
4490:src/xeq.c     **** 					return;
 31579              		.loc 1 4490 8 view .LVU8546
 31580 0792 0028     		cmp	r0, #0
 31581 0794 7FF466AF 		bne	.L2121
 31582              	.LBB4249:
4493:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 31583              		.loc 1 4493 6 is_stmt 1 view .LVU8547
 31584              	.LBB4250:
ARM GAS  /tmp/cciWh9P3.s 			page 799


 31585              	.LBI4250:
1255:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31586              		.loc 1 1255 15 view .LVU8548
 31587              	.LBB4251:
1256:src/xeq.c     **** }
 31588              		.loc 1 1256 2 view .LVU8549
1256:src/xeq.c     **** }
 31589              		.loc 1 1256 9 is_stmt 0 view .LVU8550
 31590 0798 6420     		movs	r0, #100
 31591 079a FFF7FEFF 		bl	get_reg_n_int
 31592              	.LVL2494:
 31593 079e 0690     		str	r0, [sp, #24]
 31594              	.LBE4251:
 31595              	.LBE4250:
4494:src/xeq.c     **** 					x = fp(y, x);
 31596              		.loc 1 4494 24 view .LVU8551
 31597 07a0 6520     		movs	r0, #101
 31598              	.LBB4253:
 31599              	.LBB4252:
1256:src/xeq.c     **** }
 31600              		.loc 1 1256 9 view .LVU8552
 31601 07a2 0591     		str	r1, [sp, #20]
 31602              	.LVL2495:
1256:src/xeq.c     **** }
 31603              		.loc 1 1256 9 view .LVU8553
 31604              	.LBE4252:
 31605              	.LBE4253:
4494:src/xeq.c     **** 					x = fp(y, x);
 31606              		.loc 1 4494 6 is_stmt 1 view .LVU8554
4494:src/xeq.c     **** 					x = fp(y, x);
 31607              		.loc 1 4494 24 is_stmt 0 view .LVU8555
 31608 07a4 FFF7FEFF 		bl	get_reg_n_int
 31609              	.LVL2496:
4495:src/xeq.c     **** 					setlastX();
 31610              		.loc 1 4495 6 is_stmt 1 view .LVU8556
4495:src/xeq.c     **** 					setlastX();
 31611              		.loc 1 4495 10 is_stmt 0 view .LVU8557
 31612 07a8 DDE90532 		ldrd	r3, r2, [sp, #20]
 31613 07ac A847     		blx	r5
 31614              	.LVL2497:
4495:src/xeq.c     **** 					setlastX();
 31615              		.loc 1 4495 10 view .LVU8558
 31616 07ae 2E4B     		ldr	r3, .L2390+4
 31617 07b0 0593     		str	r3, [sp, #20]
 31618              	.LVL2498:
4495:src/xeq.c     **** 					setlastX();
 31619              		.loc 1 4495 10 view .LVU8559
 31620 07b2 8046     		mov	r8, r0
 31621 07b4 0D46     		mov	r5, r1
 31622              	.LVL2499:
4496:src/xeq.c     **** 					lower();
 31623              		.loc 1 4496 6 is_stmt 1 view .LVU8560
 31624              	.LBB4254:
 31625              	.LBI4254:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31626              		.loc 1 772 6 view .LVU8561
 31627              	.LBB4255:
ARM GAS  /tmp/cciWh9P3.s 			page 800


 773:src/xeq.c     **** }
 31628              		.loc 1 773 2 view .LVU8562
 31629 07b6 6C20     		movs	r0, #108
 31630              	.LVL2500:
 773:src/xeq.c     **** }
 31631              		.loc 1 773 2 is_stmt 0 view .LVU8563
 31632 07b8 6421     		movs	r1, #100
 31633              	.LVL2501:
 773:src/xeq.c     **** }
 31634              		.loc 1 773 2 view .LVU8564
 31635 07ba FFF7FEFF 		bl	copyreg_n
 31636              	.LVL2502:
 31637              	.LBE4255:
 31638              	.LBE4254:
4497:src/xeq.c     **** 					setX_int(x);
 31639              		.loc 1 4497 6 is_stmt 1 view .LVU8565
 31640 07be 1DE7     		b	.L2344
 31641              	.LVL2503:
 31642              	.L2192:
4497:src/xeq.c     **** 					setX_int(x);
 31643              		.loc 1 4497 6 is_stmt 0 view .LVU8566
 31644              	.LBE4249:
 31645              	.LBE4248:
 31646              	.LBE4276:
 31647              	.LBE4475:
 31648              	.LBB4476:
 31649              	.LBB4127:
4395:src/xeq.c     **** 	if (idx != OP_rCLX)
 31650              		.loc 1 4395 3 is_stmt 1 view .LVU8567
4395:src/xeq.c     **** 	if (idx != OP_rCLX)
 31651              		.loc 1 4395 3 view .LVU8568
 31652              	.LBB4098:
 31653              	.LBI4098:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31654              		.loc 1 536 5 view .LVU8569
 31655              	.LBB4099:
 537:src/xeq.c     **** 		Error = e;
 31656              		.loc 1 537 2 view .LVU8570
 537:src/xeq.c     **** 		Error = e;
 31657              		.loc 1 537 12 is_stmt 0 view .LVU8571
 31658 07c0 294B     		ldr	r3, .L2390+4
 31659 07c2 1A68     		ldr	r2, [r3]
 537:src/xeq.c     **** 		Error = e;
 31660              		.loc 1 537 5 view .LVU8572
 31661 07c4 002A     		cmp	r2, #0
 31662 07c6 7FF4FCAC 		bne	.L2203
 31663              	.LVL2504:
 31664              	.LBB4100:
 31665              	.LBI4100:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31666              		.loc 1 536 5 is_stmt 1 view .LVU8573
 31667              	.LBB4101:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 31668              		.loc 1 538 3 view .LVU8574
 31669              	.LBE4101:
 31670              	.LBE4100:
 31671              	.LBE4099:
ARM GAS  /tmp/cciWh9P3.s 			page 801


 31672              	.LBE4098:
 31673              	.LBB4108:
 31674              	.LBB4094:
 748:src/xeq.c     **** }
 31675              		.loc 1 748 23 is_stmt 0 view .LVU8575
 31676 07ca E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 31677              	.LBE4094:
 31678              	.LBE4108:
 31679              	.LBB4109:
 31680              	.LBB4106:
 31681              	.LBB4104:
 31682              	.LBB4102:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 31683              		.loc 1 538 9 view .LVU8576
 31684 07cc 0322     		movs	r2, #3
 31685              	.LBE4102:
 31686              	.LBE4104:
 31687              	.LBE4106:
 31688              	.LBE4109:
 31689              	.LBB4110:
 31690              	.LBB4095:
 748:src/xeq.c     **** }
 31691              		.loc 1 748 23 view .LVU8577
 31692 07ce 41F04001 		orr	r1, r1, #64
 31693 07d2 E175     		strb	r1, [r4, #23]
 31694              	.LBE4095:
 31695              	.LBE4110:
 31696              	.LBB4111:
 31697              	.LBB4107:
 31698              	.LBB4105:
 31699              	.LBB4103:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 31700              		.loc 1 538 9 view .LVU8578
 31701 07d4 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 31702              		.loc 1 539 3 is_stmt 1 view .LVU8579
 31703              	.LVL2505:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 31704              		.loc 1 539 3 is_stmt 0 view .LVU8580
 31705              	.LBE4103:
 31706              	.LBE4105:
 31707              	.LBE4107:
 31708              	.LBE4111:
4397:src/xeq.c     **** }
 31709              		.loc 1 4397 3 is_stmt 1 view .LVU8581
 31710              	.LBB4112:
 747:src/xeq.c     ****     State2.state_lift = 1;
 31711              		.loc 1 747 6 view .LVU8582
 31712              	.LBB4096:
 748:src/xeq.c     **** }
 31713              		.loc 1 748 5 view .LVU8583
 748:src/xeq.c     **** }
 31714              		.loc 1 748 5 is_stmt 0 view .LVU8584
 31715              	.LBE4096:
 31716              	.LBE4112:
 31717              	.LBE4127:
 31718              	.LBE4476:
ARM GAS  /tmp/cciWh9P3.s 			page 802


5117:src/xeq.c     **** 		}
 31719              		.loc 1 5117 12 is_stmt 1 view .LVU8585
5127:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31720              		.loc 1 5127 2 view .LVU8586
 31721 07d6 93E4     		b	.L2134
 31722              	.LVL2506:
 31723              	.L2376:
 31724              	.LBB4477:
 31725              	.LBB4077:
4929:src/xeq.c     **** 
 31726              		.loc 1 4929 15 is_stmt 0 view .LVU8587
 31727 07d8 0798     		ldr	r0, [sp, #28]
 31728 07da 65E7     		b	.L2139
 31729              	.LVL2507:
 31730              	.L2374:
4983:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31731              		.loc 1 4983 30 view .LVU8588
 31732 07dc A1F16303 		sub	r3, r1, #99
 31733 07e0 0C2B     		cmp	r3, #12
 31734 07e2 3FF631AF 		bhi	.L2143
4983:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31735              		.loc 1 4983 69 view .LVU8589
 31736 07e6 CD07     		lsls	r5, r1, #31
 31737 07e8 7FF52EAF 		bpl	.L2143
4985:src/xeq.c     **** 	}
 31738              		.loc 1 4985 3 is_stmt 1 view .LVU8590
 31739              	.LVL2508:
 31740              	.LBB4071:
 31741              	.LBI4071:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31742              		.loc 1 536 5 view .LVU8591
 31743              	.LBB4072:
 537:src/xeq.c     **** 		Error = e;
 31744              		.loc 1 537 2 view .LVU8592
 537:src/xeq.c     **** 		Error = e;
 31745              		.loc 1 537 12 is_stmt 0 view .LVU8593
 31746 07ec 1E4B     		ldr	r3, .L2390+4
 31747 07ee 1868     		ldr	r0, [r3]
 31748              	.LVL2509:
 537:src/xeq.c     **** 		Error = e;
 31749              		.loc 1 537 5 view .LVU8594
 31750 07f0 0028     		cmp	r0, #0
 31751 07f2 7FF420AF 		bne	.L2350
 31752              	.LVL2510:
 31753              	.LBB4073:
 31754              	.LBI4073:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31755              		.loc 1 536 5 is_stmt 1 view .LVU8595
 31756              	.LBB4074:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 31757              		.loc 1 538 3 view .LVU8596
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 31758              		.loc 1 538 9 is_stmt 0 view .LVU8597
 31759 07f6 0720     		movs	r0, #7
 31760 07f8 DFF89080 		ldr	r8, .L2390+40
 31761              	.LVL2511:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/cciWh9P3.s 			page 803


 31762              		.loc 1 538 9 view .LVU8598
 31763 07fc 1860     		str	r0, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 31764              		.loc 1 539 3 is_stmt 1 view .LVU8599
 31765 07fe 52E5     		b	.L2247
 31766              	.LVL2512:
 31767              	.L2371:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 31768              		.loc 1 539 3 is_stmt 0 view .LVU8600
 31769              	.LBE4074:
 31770              	.LBE4073:
 31771              	.LBE4072:
 31772              	.LBE4071:
 31773              	.LBE4077:
 31774              	.LBE4477:
 31775              	.LBB4478:
 31776              	.LBB4159:
 31777              	.LBB4156:
5036:src/xeq.c     **** 			if (XromUserPc != 0) {
 31778              		.loc 1 5036 4 is_stmt 1 view .LVU8601
5036:src/xeq.c     **** 			if (XromUserPc != 0) {
 31779              		.loc 1 5036 17 is_stmt 0 view .LVU8602
 31780 0800 2846     		mov	r0, r5
 31781 0802 0121     		movs	r1, #1
 31782 0804 0592     		str	r2, [sp, #20]
 31783 0806 FFF7FEFF 		bl	findmultilbl
 31784              	.LVL2513:
5036:src/xeq.c     **** 			if (XromUserPc != 0) {
 31785              		.loc 1 5036 15 view .LVU8603
 31786 080a 1E4B     		ldr	r3, .L2390+32
5037:src/xeq.c     **** 				if (! Running)
 31787              		.loc 1 5037 7 view .LVU8604
 31788 080c 059A     		ldr	r2, [sp, #20]
5036:src/xeq.c     **** 			if (XromUserPc != 0) {
 31789              		.loc 1 5036 15 view .LVU8605
 31790 080e 1860     		str	r0, [r3]
5037:src/xeq.c     **** 				if (! Running)
 31791              		.loc 1 5037 4 is_stmt 1 view .LVU8606
5037:src/xeq.c     **** 				if (! Running)
 31792              		.loc 1 5037 7 is_stmt 0 view .LVU8607
 31793 0810 0028     		cmp	r0, #0
 31794 0812 3FF427AF 		beq	.L2121
 31795              	.LVL2514:
5038:src/xeq.c     **** 					clrretstk();
 31796              		.loc 1 5038 5 is_stmt 1 view .LVU8608
5038:src/xeq.c     **** 					clrretstk();
 31797              		.loc 1 5038 9 is_stmt 0 view .LVU8609
 31798 0816 DFF87480 		ldr	r8, .L2390+40
 31799              	.LVL2515:
5038:src/xeq.c     **** 					clrretstk();
 31800              		.loc 1 5038 8 view .LVU8610
 31801 081a D8F80030 		ldr	r3, [r8]
 31802 081e 23B9     		cbnz	r3, .L2125
5039:src/xeq.c     **** 				dispatch_xrom(fp);
 31803              		.loc 1 5039 6 is_stmt 1 view .LVU8611
 31804              	.LBB4148:
 31805              	.LBI4148:
ARM GAS  /tmp/cciWh9P3.s 			page 804


1408:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 31806              		.loc 1 1408 6 view .LVU8612
 31807              	.LBB4149:
1409:src/xeq.c     **** }
 31808              		.loc 1 1409 2 view .LVU8613
1409:src/xeq.c     **** }
 31809              		.loc 1 1409 14 is_stmt 0 view .LVU8614
 31810 0820 3968     		ldr	r1, [r7]
1409:src/xeq.c     **** }
 31811              		.loc 1 1409 24 view .LVU8615
 31812 0822 A1F8DE37 		strh	r3, [r1, #2014]	@ movhi
1409:src/xeq.c     **** }
 31813              		.loc 1 1409 12 view .LVU8616
 31814 0826 A1F8E237 		strh	r3, [r1, #2018]	@ movhi
 31815              	.L2125:
1409:src/xeq.c     **** }
 31816              		.loc 1 1409 12 view .LVU8617
 31817              	.LBE4149:
 31818              	.LBE4148:
5040:src/xeq.c     **** 			}
 31819              		.loc 1 5040 5 is_stmt 1 view .LVU8618
 31820 082a 0F4B     		ldr	r3, .L2390+4
 31821 082c 0593     		str	r3, [sp, #20]
 31822              	.LVL2516:
5040:src/xeq.c     **** 			}
 31823              		.loc 1 5040 5 is_stmt 0 view .LVU8619
 31824 082e 1046     		mov	r0, r2
 31825 0830 FFF7FEFF 		bl	dispatch_xrom
 31826              	.LVL2517:
 31827 0834 059B     		ldr	r3, [sp, #20]
 31828 0836 1A68     		ldr	r2, [r3]
 31829 0838 C7E4     		b	.L2124
 31830              	.LVL2518:
 31831              	.L2166:
5040:src/xeq.c     **** 			}
 31832              		.loc 1 5040 5 view .LVU8620
 31833              	.LBE4156:
 31834              	.LBE4159:
 31835              	.LBE4478:
 31836              	.LBB4479:
 31837              	.LBB4229:
3690:src/xeq.c     **** 		break;
 31838              		.loc 1 3690 3 is_stmt 1 view .LVU8621
 31839 083a 0B4B     		ldr	r3, .L2390+4
 31840 083c 0593     		str	r3, [sp, #20]
 31841 083e A8F10500 		sub	r0, r8, #5
 31842 0842 FFF7FEFF 		bl	digit
 31843              	.LVL2519:
3691:src/xeq.c     **** 
 31844              		.loc 1 3691 3 view .LVU8622
 31845 0846 059B     		ldr	r3, [sp, #20]
 31846 0848 1A68     		ldr	r2, [r3]
 31847 084a BEE4     		b	.L2124
 31848              	.L2163:
3831:src/xeq.c     **** 		break;
 31849              		.loc 1 3831 3 view .LVU8623
3831:src/xeq.c     **** 		break;
ARM GAS  /tmp/cciWh9P3.s 			page 805


 31850              		.loc 1 3831 53 is_stmt 0 view .LVU8624
 31851 084c A5F11E01 		sub	r1, r5, #30
 31852 0850 054B     		ldr	r3, .L2390+4
 31853 0852 0593     		str	r3, [sp, #20]
3831:src/xeq.c     **** 		break;
 31854              		.loc 1 3831 3 view .LVU8625
 31855 0854 C9B2     		uxtb	r1, r1
 31856 0856 40F61C00 		movw	r0, #2076
 31857 085a FFF7FEFF 		bl	do_tst
 31858              	.LVL2520:
3832:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
 31859              		.loc 1 3832 3 is_stmt 1 view .LVU8626
 31860 085e 059B     		ldr	r3, [sp, #20]
 31861 0860 1A68     		ldr	r2, [r3]
 31862 0862 B2E4     		b	.L2124
 31863              	.L2391:
 31864              		.align	2
 31865              	.L2390:
 31866 0864 00000000 		.word	trifuncs
 31867 0868 00000000 		.word	Error
 31868 086c 00000000 		.word	xrom
 31869 0870 00000000 		.word	argcmds
 31870 0874 00000000 		.word	XromParams
 31871 0878 00000000 		.word	RetStk
 31872 087c 00000000 		.word	XromLocal
 31873 0880 00000000 		.word	xrom_size
 31874 0884 00000000 		.word	XromUserPc
 31875 0888 00000000 		.word	dyfuncs
 31876 088c 00000000 		.word	Running
 31877              	.L2164:
3822:src/xeq.c     **** 		break;
 31878              		.loc 1 3822 3 view .LVU8627
3822:src/xeq.c     **** 		break;
 31879              		.loc 1 3822 54 is_stmt 0 view .LVU8628
 31880 0890 A5F11701 		sub	r1, r5, #23
 31881 0894 BA4B     		ldr	r3, .L2392
 31882 0896 0593     		str	r3, [sp, #20]
3822:src/xeq.c     **** 		break;
 31883              		.loc 1 3822 3 view .LVU8629
 31884 0898 C9B2     		uxtb	r1, r1
 31885 089a 40F61B00 		movw	r0, #2075
 31886 089e FFF7FEFF 		bl	do_tst
 31887              	.LVL2521:
3823:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 31888              		.loc 1 3823 3 is_stmt 1 view .LVU8630
 31889 08a2 059B     		ldr	r3, [sp, #20]
 31890 08a4 1A68     		ldr	r2, [r3]
 31891 08a6 90E4     		b	.L2124
 31892              	.L2159:
3837:src/xeq.c     **** 		break;
 31893              		.loc 1 3837 3 view .LVU8631
3837:src/xeq.c     **** 		break;
 31894              		.loc 1 3837 49 is_stmt 0 view .LVU8632
 31895 08a8 A5F12902 		sub	r2, r5, #41
 31896 08ac B44B     		ldr	r3, .L2392
3837:src/xeq.c     **** 		break;
 31897              		.loc 1 3837 3 view .LVU8633
ARM GAS  /tmp/cciWh9P3.s 			page 806


 31898 08ae B549     		ldr	r1, .L2392+4
 31899 08b0 B548     		ldr	r0, .L2392+8
 31900 08b2 0593     		str	r3, [sp, #20]
 31901 08b4 D2B2     		uxtb	r2, r2
 31902 08b6 FFF7FEFF 		bl	do_ztst
 31903              	.LVL2522:
3838:src/xeq.c     **** 
 31904              		.loc 1 3838 3 is_stmt 1 view .LVU8634
 31905 08ba 059B     		ldr	r3, [sp, #20]
 31906 08bc 1A68     		ldr	r2, [r3]
 31907 08be 84E4     		b	.L2124
 31908              	.L2161:
3834:src/xeq.c     **** 		break;
 31909              		.loc 1 3834 3 view .LVU8635
3834:src/xeq.c     **** 		break;
 31910              		.loc 1 3834 49 is_stmt 0 view .LVU8636
 31911 08c0 A5F12702 		sub	r2, r5, #39
 31912 08c4 AE4B     		ldr	r3, .L2392
3834:src/xeq.c     **** 		break;
 31913              		.loc 1 3834 3 view .LVU8637
 31914 08c6 B049     		ldr	r1, .L2392+8
 31915 08c8 AE48     		ldr	r0, .L2392+4
 31916 08ca 0593     		str	r3, [sp, #20]
 31917 08cc D2B2     		uxtb	r2, r2
 31918 08ce FFF7FEFF 		bl	do_ztst
 31919              	.LVL2523:
3835:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
 31920              		.loc 1 3835 3 is_stmt 1 view .LVU8638
 31921 08d2 059B     		ldr	r3, [sp, #20]
 31922 08d4 1A68     		ldr	r2, [r3]
 31923 08d6 78E4     		b	.L2124
 31924              	.L2162:
3825:src/xeq.c     **** 		break;
 31925              		.loc 1 3825 3 view .LVU8639
 31926 08d8 AB49     		ldr	r1, .L2392+8
 31927 08da A94B     		ldr	r3, .L2392
 31928 08dc 0593     		str	r3, [sp, #20]
3825:src/xeq.c     **** 		break;
 31929              		.loc 1 3825 49 is_stmt 0 view .LVU8640
 31930 08de A5F12502 		sub	r2, r5, #37
3825:src/xeq.c     **** 		break;
 31931              		.loc 1 3825 3 view .LVU8641
 31932 08e2 D2B2     		uxtb	r2, r2
 31933 08e4 0846     		mov	r0, r1
 31934 08e6 FFF7FEFF 		bl	do_ztst
 31935              	.LVL2524:
3826:src/xeq.c     **** 
 31936              		.loc 1 3826 3 is_stmt 1 view .LVU8642
 31937 08ea 059B     		ldr	r3, [sp, #20]
 31938 08ec 1A68     		ldr	r2, [r3]
 31939 08ee 6CE4     		b	.L2124
 31940              	.L2165:
3804:src/xeq.c     **** 			bad_mode_error();
 31941              		.loc 1 3804 3 view .LVU8643
3804:src/xeq.c     **** 			bad_mode_error();
 31942              		.loc 1 3804 7 is_stmt 0 view .LVU8644
 31943 08f0 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/cciWh9P3.s 			page 807


 31944 08f2 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3804:src/xeq.c     **** 			bad_mode_error();
 31945              		.loc 1 3804 6 view .LVU8645
 31946 08f6 13F00105 		ands	r5, r3, #1
 31947              	.LVL2525:
3804:src/xeq.c     **** 			bad_mode_error();
 31948              		.loc 1 3804 6 view .LVU8646
 31949 08fa 00F09781 		beq	.L2188
 31950              	.LVL2526:
 31951              	.L2223:
3804:src/xeq.c     **** 			bad_mode_error();
 31952              		.loc 1 3804 6 view .LVU8647
 31953              	.LBE4229:
 31954              	.LBE4479:
 31955              	.LBB4480:
 31956              	.LBB4465:
4594:src/xeq.c     **** 		}
 31957              		.loc 1 4594 5 is_stmt 1 view .LVU8648
 31958              	.LBB4451:
 31959              	.LBI4451:
 565:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 31960              		.loc 1 565 6 view .LVU8649
 31961              	.LBE4451:
 31962              	.LBE4465:
 31963              	.LBE4480:
 566:src/xeq.c     **** }
 31964              		.loc 1 566 2 view .LVU8650
 31965              	.LBB4481:
 31966              	.LBB4466:
 31967              	.LBB4454:
 31968              	.LBB4452:
 31969              	.LBI4452:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31970              		.loc 1 536 5 view .LVU8651
 31971              	.LBB4453:
 537:src/xeq.c     **** 		Error = e;
 31972              		.loc 1 537 2 view .LVU8652
 537:src/xeq.c     **** 		Error = e;
 31973              		.loc 1 537 12 is_stmt 0 view .LVU8653
 31974 08fe A04B     		ldr	r3, .L2392
 31975 0900 1868     		ldr	r0, [r3]
 537:src/xeq.c     **** 		Error = e;
 31976              		.loc 1 537 5 view .LVU8654
 31977 0902 0028     		cmp	r0, #0
 31978 0904 7FF497AE 		bne	.L2350
 31979              	.LVL2527:
 537:src/xeq.c     **** 		Error = e;
 31980              		.loc 1 537 5 view .LVU8655
 31981              	.LBE4453:
 31982              	.LBE4452:
 31983              	.LBE4454:
 31984              	.LBE4466:
 31985              	.LBE4481:
 31986              	.LBB4482:
 31987              	.LBB4230:
 31988              	.LBB4169:
 31989              	.LBB4170:
ARM GAS  /tmp/cciWh9P3.s 			page 808


 31990              	.LBB4171:
 31991              	.LBB4172:
 31992              	.LBI4172:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31993              		.loc 1 536 5 is_stmt 1 view .LVU8656
 31994              	.LBB4173:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 31995              		.loc 1 538 3 view .LVU8657
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 31996              		.loc 1 538 9 is_stmt 0 view .LVU8658
 31997 0908 0D20     		movs	r0, #13
 31998 090a DFF88C82 		ldr	r8, .L2392+24
 31999 090e 1860     		str	r0, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 32000              		.loc 1 539 3 is_stmt 1 view .LVU8659
 32001 0910 C9E4     		b	.L2247
 32002              	.LVL2528:
 32003              	.L2171:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 32004              		.loc 1 539 3 is_stmt 0 view .LVU8660
 32005              	.LBE4173:
 32006              	.LBE4172:
 32007              	.LBE4171:
 32008              	.LBE4170:
 32009              	.LBE4169:
3797:src/xeq.c     **** 		lift();
 32010              		.loc 1 3797 3 is_stmt 1 view .LVU8661
 32011 0912 FFF7FEFF 		bl	process_cmdline
 32012              	.LVL2529:
3798:src/xeq.c     **** 		clr_lift();
 32013              		.loc 1 3798 3 view .LVU8662
 32014 0916 FFF7FEFF 		bl	lift
 32015              	.LVL2530:
3799:src/xeq.c     **** 		break;
 32016              		.loc 1 3799 3 view .LVU8663
 32017              	.LBB4174:
 32018              	.LBI4174:
 751:src/xeq.c     ****     State2.state_lift = 0;
 32019              		.loc 1 751 13 view .LVU8664
 32020              	.LBB4175:
 752:src/xeq.c     **** }
 32021              		.loc 1 752 5 view .LVU8665
 752:src/xeq.c     **** }
 32022              		.loc 1 752 23 is_stmt 0 view .LVU8666
 32023 091a E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 32024 091c 984B     		ldr	r3, .L2392
 32025 091e 6FF38612 		bfc	r2, #6, #1
 32026 0922 E275     		strb	r2, [r4, #23]
 32027 0924 1A68     		ldr	r2, [r3]
 753:src/xeq.c     **** 
 32028              		.loc 1 753 1 view .LVU8667
 32029 0926 50E4     		b	.L2124
 32030              	.L2167:
 32031              	.LBE4175:
 32032              	.LBE4174:
3694:src/xeq.c     **** 			break;
 32033              		.loc 1 3694 3 is_stmt 1 view .LVU8668
ARM GAS  /tmp/cciWh9P3.s 			page 809


3694:src/xeq.c     **** 			break;
 32034              		.loc 1 3694 7 is_stmt 0 view .LVU8669
 32035 0928 3B68     		ldr	r3, [r7]
 32036 092a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3694:src/xeq.c     **** 			break;
 32037              		.loc 1 3694 6 view .LVU8670
 32038 092e D807     		lsls	r0, r3, #31
 32039 0930 3FF598AE 		bmi	.L2121
3701:src/xeq.c     **** #  else
 32040              		.loc 1 3701 3 is_stmt 1 view .LVU8671
3701:src/xeq.c     **** #  else
 32041              		.loc 1 3701 7 is_stmt 0 view .LVU8672
 32042 0934 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
3701:src/xeq.c     **** #  else
 32043              		.loc 1 3701 6 view .LVU8673
 32044 0936 012B     		cmp	r3, #1
 32045 0938 3FF694AE 		bhi	.L2121
3701:src/xeq.c     **** #  else
 32046              		.loc 1 3701 22 view .LVU8674
 32047 093c 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 32048 093e 002A     		cmp	r2, #0
 32049 0940 7FF490AE 		bne	.L2121
3701:src/xeq.c     **** #  else
 32050              		.loc 1 3701 59 view .LVU8675
 32051 0944 002B     		cmp	r3, #0
3701:src/xeq.c     **** #  else
 32052              		.loc 1 3701 40 view .LVU8676
 32053 0946 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3701:src/xeq.c     **** #  else
 32054              		.loc 1 3701 59 view .LVU8677
 32055 0948 0CBF     		ite	eq
 32056 094a 0C22     		moveq	r2, #12
 32057 094c 0E22     		movne	r2, #14
3701:src/xeq.c     **** #  else
 32058              		.loc 1 3701 37 view .LVU8678
 32059 094e 9342     		cmp	r3, r2
 32060 0950 BFF688AE 		bge	.L2121
3705:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
 32061              		.loc 1 3705 4 is_stmt 1 view .LVU8679
3705:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
 32062              		.loc 1 3705 7 is_stmt 0 view .LVU8680
 32063 0954 002B     		cmp	r3, #0
 32064 0956 00F0E581 		beq	.L2174
3705:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
 32065              		.loc 1 3705 37 view .LVU8681
 32066 095a 2344     		add	r3, r3, r4
3706:src/xeq.c     **** #endif
 32067              		.loc 1 3706 29 view .LVU8682
 32068 095c DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 32069 095e 2D3B     		subs	r3, r3, #45
 32070 0960 012B     		cmp	r3, #1
 32071 0962 40F2DF81 		bls	.L2174
 32072              	.L2175:
3709:src/xeq.c     **** 			append_cmdline('.');
 32073              		.loc 1 3709 4 is_stmt 1 view .LVU8683
 32074              	.LBB4176:
 32075              	.LBB4177:
ARM GAS  /tmp/cciWh9P3.s 			page 810


2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32076              		.loc 1 2407 10 is_stmt 0 view .LVU8684
 32077 0966 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32078              	.LBE4177:
 32079              	.LBE4176:
3709:src/xeq.c     **** 			append_cmdline('.');
 32080              		.loc 1 3709 14 view .LVU8685
 32081 0968 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 32082              	.LBB4181:
 32083              	.LBB4178:
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32084              		.loc 1 2407 23 view .LVU8686
 32085 096a 5A1C     		adds	r2, r3, #1
 32086 096c D2B2     		uxtb	r2, r2
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32087              		.loc 1 2407 27 view .LVU8687
 32088 096e 2344     		add	r3, r3, r4
2408:src/xeq.c     **** }
 32089              		.loc 1 2408 25 view .LVU8688
 32090 0970 A018     		adds	r0, r4, r2
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32091              		.loc 1 2407 23 view .LVU8689
 32092 0972 2277     		strb	r2, [r4, #28]
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32093              		.loc 1 2407 27 view .LVU8690
 32094 0974 2E22     		movs	r2, #46
 32095 0976 83F82020 		strb	r2, [r3, #32]
 32096 097a 814B     		ldr	r3, .L2392
2408:src/xeq.c     **** }
 32097              		.loc 1 2408 25 view .LVU8691
 32098 097c 0022     		movs	r2, #0
 32099              	.LBE4178:
 32100              	.LBE4181:
3709:src/xeq.c     **** 			append_cmdline('.');
 32101              		.loc 1 3709 14 view .LVU8692
 32102 097e 0131     		adds	r1, r1, #1
 32103              	.LBB4182:
 32104              	.LBB4179:
2408:src/xeq.c     **** }
 32105              		.loc 1 2408 25 view .LVU8693
 32106 0980 80F82020 		strb	r2, [r0, #32]
 32107              	.LBE4179:
 32108              	.LBE4182:
3709:src/xeq.c     **** 			append_cmdline('.');
 32109              		.loc 1 3709 14 view .LVU8694
 32110 0984 A177     		strb	r1, [r4, #30]
3710:src/xeq.c     **** 		}
 32111              		.loc 1 3710 4 is_stmt 1 view .LVU8695
 32112              	.LVL2531:
 32113              	.LBB4183:
 32114              	.LBI4176:
2406:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32115              		.loc 1 2406 13 view .LVU8696
 32116              	.LBB4180:
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32117              		.loc 1 2407 2 view .LVU8697
2408:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 811


 32118              		.loc 1 2408 2 view .LVU8698
 32119 0986 1A68     		ldr	r2, [r3]
2409:src/xeq.c     **** 
 32120              		.loc 1 2409 1 is_stmt 0 view .LVU8699
 32121 0988 1FE4     		b	.L2124
 32122              	.LVL2532:
 32123              	.L2168:
2409:src/xeq.c     **** 
 32124              		.loc 1 2409 1 view .LVU8700
 32125              	.LBE4180:
 32126              	.LBE4183:
3762:src/xeq.c     **** 			cmdlinechs();
 32127              		.loc 1 3762 3 is_stmt 1 view .LVU8701
3762:src/xeq.c     **** 			cmdlinechs();
 32128              		.loc 1 3762 7 is_stmt 0 view .LVU8702
 32129 098a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3762:src/xeq.c     **** 			cmdlinechs();
 32130              		.loc 1 3762 6 view .LVU8703
 32131 098c 002A     		cmp	r2, #0
 32132 098e 40F03281 		bne	.L2377
3764:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32133              		.loc 1 3764 8 is_stmt 1 view .LVU8704
3764:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32134              		.loc 1 3764 12 is_stmt 0 view .LVU8705
 32135 0992 3B68     		ldr	r3, [r7]
 32136 0994 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3764:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32137              		.loc 1 3764 11 view .LVU8706
 32138 0998 DA07     		lsls	r2, r3, #31
 32139 099a 40F11E81 		bpl	.L2183
3765:src/xeq.c     **** 			set_lift();
 32140              		.loc 1 3765 4 is_stmt 1 view .LVU8707
 32141              	.LBB4184:
 32142              	.LBI4184:
1255:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32143              		.loc 1 1255 15 view .LVU8708
 32144              	.LBB4185:
1256:src/xeq.c     **** }
 32145              		.loc 1 1256 2 view .LVU8709
1256:src/xeq.c     **** }
 32146              		.loc 1 1256 9 is_stmt 0 view .LVU8710
 32147 099e 6420     		movs	r0, #100
 32148 09a0 FFF7FEFF 		bl	get_reg_n_int
 32149              	.LVL2533:
 32150              	.LBE4185:
 32151              	.LBE4184:
3765:src/xeq.c     **** 			set_lift();
 32152              		.loc 1 3765 4 view .LVU8711
 32153 09a4 FFF7FEFF 		bl	intChs
 32154              	.LVL2534:
 32155 09a8 FFF7FEFF 		bl	setX_int
 32156              	.LVL2535:
3766:src/xeq.c     **** 		} else {
 32157              		.loc 1 3766 4 is_stmt 1 view .LVU8712
 32158              	.LBB4186:
 32159              	.LBI4186:
 747:src/xeq.c     ****     State2.state_lift = 1;
ARM GAS  /tmp/cciWh9P3.s 			page 812


 32160              		.loc 1 747 6 view .LVU8713
 32161              	.LBB4187:
 748:src/xeq.c     **** }
 32162              		.loc 1 748 5 view .LVU8714
 32163 09ac 3FE4     		b	.L2342
 32164              	.L2169:
 32165              	.LBE4187:
 32166              	.LBE4186:
3715:src/xeq.c     **** 			break;
 32167              		.loc 1 3715 3 view .LVU8715
 32168              	.LBB4188:
3723:src/xeq.c     **** #endif
 32169              		.loc 1 3723 4 view .LVU8716
 32170              	.LVL2536:
3726:src/xeq.c     **** 				if (eex_pi) {
 32171              		.loc 1 3726 4 view .LVU8717
3726:src/xeq.c     **** 				if (eex_pi) {
 32172              		.loc 1 3726 7 is_stmt 0 view .LVU8718
 32173 09ae A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 32174 09b0 022B     		cmp	r3, #2
 32175 09b2 3FF457AE 		beq	.L2121
 32176              	.LBE4188:
3715:src/xeq.c     **** 			break;
 32177              		.loc 1 3715 7 view .LVU8719
 32178 09b6 3A68     		ldr	r2, [r7]
 32179              	.LBB4191:
3741:src/xeq.c     **** 				break;
 32180              		.loc 1 3741 4 is_stmt 1 view .LVU8720
3741:src/xeq.c     **** 				break;
 32181              		.loc 1 3741 7 is_stmt 0 view .LVU8721
 32182 09b8 617F     		ldrb	r1, [r4, #29]	@ zero_extendqisi2
 32183              	.LBE4191:
3715:src/xeq.c     **** 			break;
 32184              		.loc 1 3715 7 view .LVU8722
 32185 09ba 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 32186 09be 03F00103 		and	r3, r3, #1
 32187              	.LBB4192:
3741:src/xeq.c     **** 				break;
 32188              		.loc 1 3741 7 view .LVU8723
 32189 09c2 0B43     		orrs	r3, r3, r1
 32190 09c4 7FF44EAE 		bne	.L2121
3741:src/xeq.c     **** 				break;
 32191              		.loc 1 3741 22 view .LVU8724
 32192 09c8 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3741:src/xeq.c     **** 				break;
 32193              		.loc 1 3741 19 view .LVU8725
 32194 09ca 122B     		cmp	r3, #18
 32195 09cc 3FF64AAE 		bhi	.L2121
3743:src/xeq.c     **** 				// empty command line: enter pi
 32196              		.loc 1 3743 4 is_stmt 1 view .LVU8726
3751:src/xeq.c     **** 				break;
 32197              		.loc 1 3751 4 view .LVU8727
3751:src/xeq.c     **** 				break;
 32198              		.loc 1 3751 8 is_stmt 0 view .LVU8728
 32199 09d0 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
3751:src/xeq.c     **** 				break;
 32200              		.loc 1 3751 7 view .LVU8729
ARM GAS  /tmp/cciWh9P3.s 			page 813


 32201 09d4 9106     		lsls	r1, r2, #26
 32202 09d6 3FF545AE 		bmi	.L2121
3754:src/xeq.c     **** 				digit(1);
 32203              		.loc 1 3754 4 is_stmt 1 view .LVU8730
3754:src/xeq.c     **** 				digit(1);
 32204              		.loc 1 3754 7 is_stmt 0 view .LVU8731
 32205 09da 002B     		cmp	r3, #0
 32206 09dc 00F0A681 		beq	.L2378
 32207              	.L2176:
3756:src/xeq.c     **** 			append_cmdline('E');
 32208              		.loc 1 3756 4 is_stmt 1 view .LVU8732
3756:src/xeq.c     **** 			append_cmdline('E');
 32209              		.loc 1 3756 17 is_stmt 0 view .LVU8733
 32210 09e0 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3756:src/xeq.c     **** 			append_cmdline('E');
 32211              		.loc 1 3756 15 view .LVU8734
 32212 09e2 6377     		strb	r3, [r4, #29]
3757:src/xeq.c     **** 		}
 32213              		.loc 1 3757 4 is_stmt 1 view .LVU8735
 32214              	.LVL2537:
 32215              	.LBB4189:
 32216              	.LBI4189:
2406:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32217              		.loc 1 2406 13 view .LVU8736
 32218              	.LBB4190:
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32219              		.loc 1 2407 2 view .LVU8737
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32220              		.loc 1 2407 23 is_stmt 0 view .LVU8738
 32221 09e4 591C     		adds	r1, r3, #1
 32222 09e6 C9B2     		uxtb	r1, r1
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32223              		.loc 1 2407 27 view .LVU8739
 32224 09e8 E218     		adds	r2, r4, r3
2408:src/xeq.c     **** }
 32225              		.loc 1 2408 25 view .LVU8740
 32226 09ea 6018     		adds	r0, r4, r1
 32227 09ec 644B     		ldr	r3, .L2392
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32228              		.loc 1 2407 23 view .LVU8741
 32229 09ee 2177     		strb	r1, [r4, #28]
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32230              		.loc 1 2407 27 view .LVU8742
 32231 09f0 4521     		movs	r1, #69
 32232 09f2 82F82010 		strb	r1, [r2, #32]
2408:src/xeq.c     **** }
 32233              		.loc 1 2408 2 is_stmt 1 view .LVU8743
2408:src/xeq.c     **** }
 32234              		.loc 1 2408 25 is_stmt 0 view .LVU8744
 32235 09f6 0022     		movs	r2, #0
 32236 09f8 80F82020 		strb	r2, [r0, #32]
 32237 09fc 1A68     		ldr	r2, [r3]
2409:src/xeq.c     **** 
 32238              		.loc 1 2409 1 view .LVU8745
 32239 09fe FFF7E4BB 		b	.L2124
 32240              	.LVL2538:
 32241              	.L2170:
ARM GAS  /tmp/cciWh9P3.s 			page 814


2409:src/xeq.c     **** 
 32242              		.loc 1 2409 1 view .LVU8746
 32243              	.LBE4190:
 32244              	.LBE4189:
 32245              	.LBE4192:
3778:src/xeq.c     **** 			illegal(op);
 32246              		.loc 1 3778 3 is_stmt 1 view .LVU8747
3778:src/xeq.c     **** 			illegal(op);
 32247              		.loc 1 3778 7 is_stmt 0 view .LVU8748
 32248 0a02 DFF89481 		ldr	r8, .L2392+24
 32249              	.LVL2539:
3778:src/xeq.c     **** 			illegal(op);
 32250              		.loc 1 3778 6 view .LVU8749
 32251 0a06 D8F80020 		ldr	r2, [r8]
 32252 0a0a 002A     		cmp	r2, #0
 32253 0a0c 00F0D080 		beq	.L2184
3779:src/xeq.c     **** 		else if (CmdLineLength) {
 32254              		.loc 1 3779 4 is_stmt 1 view .LVU8750
3779:src/xeq.c     **** 		else if (CmdLineLength) {
 32255              		.loc 1 3779 4 view .LVU8751
 32256              	.LVL2540:
 32257              	.LBB4193:
 32258              	.LBI4193:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32259              		.loc 1 536 5 view .LVU8752
 32260              	.LBB4194:
 537:src/xeq.c     **** 		Error = e;
 32261              		.loc 1 537 2 view .LVU8753
 537:src/xeq.c     **** 		Error = e;
 32262              		.loc 1 537 12 is_stmt 0 view .LVU8754
 32263 0a10 5B4B     		ldr	r3, .L2392
 32264 0a12 1868     		ldr	r0, [r3]
 537:src/xeq.c     **** 		Error = e;
 32265              		.loc 1 537 5 view .LVU8755
 32266 0a14 0028     		cmp	r0, #0
 32267 0a16 3FF444AC 		beq	.L2128
 32268 0a1a 44E4     		b	.L2247
 32269              	.LVL2541:
 32270              	.L2231:
 537:src/xeq.c     **** 		Error = e;
 32271              		.loc 1 537 5 view .LVU8756
 32272              	.LBE4194:
 32273              	.LBE4193:
 32274              	.LBE4230:
 32275              	.LBE4482:
 32276              	.LBB4483:
 32277              	.LBB4355:
4546:src/xeq.c     **** 	} else
 32278              		.loc 1 4546 4 is_stmt 1 view .LVU8757
 32279              	.LBB4345:
 32280              	.LBI4345:
 565:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 32281              		.loc 1 565 6 view .LVU8758
 32282              	.LBE4345:
 32283              	.LBE4355:
 32284              	.LBE4483:
 566:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 815


 32285              		.loc 1 566 2 view .LVU8759
 32286              	.LBB4484:
 32287              	.LBB4356:
 32288              	.LBB4350:
 32289              	.LBB4346:
 32290              	.LBI4346:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32291              		.loc 1 536 5 view .LVU8760
 32292              	.LBB4347:
 537:src/xeq.c     **** 		Error = e;
 32293              		.loc 1 537 2 view .LVU8761
 537:src/xeq.c     **** 		Error = e;
 32294              		.loc 1 537 12 is_stmt 0 view .LVU8762
 32295 0a1c 584B     		ldr	r3, .L2392
 32296 0a1e 1A68     		ldr	r2, [r3]
 537:src/xeq.c     **** 		Error = e;
 32297              		.loc 1 537 5 view .LVU8763
 32298 0a20 002A     		cmp	r2, #0
 32299 0a22 7FF46DAB 		bne	.L2134
 32300              	.LVL2542:
 32301              	.LBB4348:
 32302              	.LBI4348:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32303              		.loc 1 536 5 is_stmt 1 view .LVU8764
 32304              	.LBB4349:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 32305              		.loc 1 538 3 view .LVU8765
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 32306              		.loc 1 538 9 is_stmt 0 view .LVU8766
 32307 0a26 0D22     		movs	r2, #13
 32308 0a28 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 32309              		.loc 1 539 3 is_stmt 1 view .LVU8767
 32310              	.LVL2543:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 32311              		.loc 1 539 3 is_stmt 0 view .LVU8768
 32312              	.LBE4349:
 32313              	.LBE4348:
 32314              	.LBE4347:
 32315              	.LBE4346:
 32316              	.LBE4350:
4548:src/xeq.c     **** }
 32317              		.loc 1 4548 3 is_stmt 1 view .LVU8769
 32318              	.LBE4356:
 32319              	.LBE4484:
5117:src/xeq.c     **** 		}
 32320              		.loc 1 5117 12 view .LVU8770
5127:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 32321              		.loc 1 5127 2 view .LVU8771
 32322 0a2a FFF769BB 		b	.L2134
 32323              	.L2238:
5151:src/xeq.c     **** 						// Need space for double precision stack
 32324              		.loc 1 5151 34 is_stmt 0 discriminator 1 view .LVU8772
 32325 0a2e 9CF8CF17 		ldrb	r1, [ip, #1999]	@ zero_extendqisi2
 32326 0a32 0B29     		cmp	r1, #11
 32327 0a34 40F29280 		bls	.L2240
5155:src/xeq.c     **** 					if (Error == ERR_NONE) {
ARM GAS  /tmp/cciWh9P3.s 			page 816


 32328              		.loc 1 5155 6 is_stmt 1 view .LVU8773
5155:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32329              		.loc 1 5155 20 is_stmt 0 view .LVU8774
 32330 0a38 69F3C712 		bfi	r2, r9, #7, #1
 32331 0a3c 6A70     		strb	r2, [r5, #1]
5156:src/xeq.c     **** 						UState.mode_double = 1;
 32332              		.loc 1 5156 6 is_stmt 1 view .LVU8775
 32333 0a3e 54E6     		b	.L2239
 32334              	.LVL2544:
 32335              	.L2213:
 32336              	.LBB4485:
 32337              	.LBB4277:
4503:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 32338              		.loc 1 4503 4 view .LVU8776
4503:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 32339              		.loc 1 4503 10 is_stmt 0 view .LVU8777
 32340 0a40 524B     		ldr	r3, .L2392+12
 32341 0a42 05EB4505 		add	r5, r5, r5, lsl #1
 32342              	.LVL2545:
4503:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 32343              		.loc 1 4503 10 view .LVU8778
 32344 0a46 53F83550 		ldr	r5, [r3, r5, lsl #3]
4503:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 32345              		.loc 1 4503 7 view .LVU8779
 32346 0a4a 002D     		cmp	r5, #0
 32347 0a4c 3FF457AF 		beq	.L2223
 32348              	.LBB4256:
4504:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32349              		.loc 1 4504 5 is_stmt 1 view .LVU8780
 32350              	.LVL2546:
4505:src/xeq.c     **** 					return;
 32351              		.loc 1 4505 5 view .LVU8781
4505:src/xeq.c     **** 					return;
 32352              		.loc 1 4505 9 is_stmt 0 view .LVU8782
 32353 0a50 2846     		mov	r0, r5
 32354 0a52 FFF7FEFF 		bl	dispatch_xrom
 32355              	.LVL2547:
4505:src/xeq.c     **** 					return;
 32356              		.loc 1 4505 8 view .LVU8783
 32357 0a56 0028     		cmp	r0, #0
 32358 0a58 7FF404AE 		bne	.L2121
 32359              	.LBB4257:
4508:src/xeq.c     **** 					getXY(&x, &y);
 32360              		.loc 1 4508 6 is_stmt 1 view .LVU8784
4509:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
 32361              		.loc 1 4509 6 view .LVU8785
 32362              	.LVL2548:
 32363              	.LBB4258:
 32364              	.LBI4258:
 834:src/xeq.c     **** 	getX(x);
 32365              		.loc 1 834 6 view .LVU8786
 32366              	.LBE4258:
 32367              	.LBE4257:
 32368              	.LBE4256:
 32369              	.LBE4277:
 32370              	.LBE4485:
 835:src/xeq.c     **** 	getY(y);
ARM GAS  /tmp/cciWh9P3.s 			page 817


 32371              		.loc 1 835 2 view .LVU8787
 32372              	.LBB4486:
 32373              	.LBB4278:
 32374              	.LBB4273:
 32375              	.LBB4270:
 32376              	.LBB4265:
 32377              	.LBB4259:
 32378              	.LBI4259:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 32379              		.loc 1 804 12 view .LVU8788
 32380              	.LBB4260:
 805:src/xeq.c     **** }
 32381              		.loc 1 805 2 view .LVU8789
 805:src/xeq.c     **** }
 32382              		.loc 1 805 9 is_stmt 0 view .LVU8790
 32383 0a5c 6421     		movs	r1, #100
 32384 0a5e 27A8     		add	r0, sp, #156
 32385              	.LVL2549:
 805:src/xeq.c     **** }
 32386              		.loc 1 805 9 view .LVU8791
 32387 0a60 FFF7FEFF 		bl	getRegister
 32388              	.LVL2550:
 805:src/xeq.c     **** }
 32389              		.loc 1 805 9 view .LVU8792
 32390              	.LBE4260:
 32391              	.LBE4259:
 32392              	.LBE4265:
 32393              	.LBE4270:
 32394              	.LBE4273:
 32395              	.LBE4278:
 32396              	.LBE4486:
 836:src/xeq.c     **** }
 32397              		.loc 1 836 2 is_stmt 1 view .LVU8793
 32398              	.LBB4487:
 32399              	.LBB4279:
 32400              	.LBB4274:
 32401              	.LBB4271:
 32402              	.LBB4266:
 32403              	.LBB4261:
 32404              	.LBI4261:
 812:src/xeq.c     **** 	getRegister(y, regY_idx);
 32405              		.loc 1 812 6 view .LVU8794
 32406              	.LBB4262:
 813:src/xeq.c     **** }
 32407              		.loc 1 813 2 view .LVU8795
 32408              	.LBE4262:
 32409              	.LBE4261:
 32410              	.LBE4266:
4510:src/xeq.c     **** 						set_NaN(&r);
 32411              		.loc 1 4510 18 is_stmt 0 view .LVU8796
 32412 0a64 0DF1E408 		add	r8, sp, #228
 32413              	.LBB4267:
 32414              	.LBB4264:
 32415              	.LBB4263:
 813:src/xeq.c     **** }
 32416              		.loc 1 813 2 view .LVU8797
 32417 0a68 6521     		movs	r1, #101
ARM GAS  /tmp/cciWh9P3.s 			page 818


 32418 0a6a 30A8     		add	r0, sp, #192
 32419              	.LVL2551:
 813:src/xeq.c     **** }
 32420              		.loc 1 813 2 view .LVU8798
 32421 0a6c FFF7FEFF 		bl	getRegister
 32422              	.LVL2552:
 813:src/xeq.c     **** }
 32423              		.loc 1 813 2 view .LVU8799
 32424              	.LBE4263:
 32425              	.LBE4264:
 32426              	.LBE4267:
4510:src/xeq.c     **** 						set_NaN(&r);
 32427              		.loc 1 4510 6 is_stmt 1 view .LVU8800
4510:src/xeq.c     **** 						set_NaN(&r);
 32428              		.loc 1 4510 18 is_stmt 0 view .LVU8801
 32429 0a70 27AA     		add	r2, sp, #156
 32430 0a72 30A9     		add	r1, sp, #192
 32431 0a74 4046     		mov	r0, r8
 32432 0a76 A847     		blx	r5
 32433              	.LVL2553:
4510:src/xeq.c     **** 						set_NaN(&r);
 32434              		.loc 1 4510 9 view .LVU8802
 32435 0a78 0028     		cmp	r0, #0
 32436 0a7a 00F0F780 		beq	.L2379
 32437              	.L2218:
4512:src/xeq.c     **** 					lower();
 32438              		.loc 1 4512 6 is_stmt 1 view .LVU8803
 32439              	.LBB4268:
 32440              	.LBI4268:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32441              		.loc 1 772 6 view .LVU8804
 32442              	.LBB4269:
 773:src/xeq.c     **** }
 32443              		.loc 1 773 2 view .LVU8805
 32444 0a7e 404B     		ldr	r3, .L2392
 32445 0a80 0593     		str	r3, [sp, #20]
 32446 0a82 6421     		movs	r1, #100
 32447 0a84 6C20     		movs	r0, #108
 32448 0a86 FFF7FEFF 		bl	copyreg_n
 32449              	.LVL2554:
 32450              	.LBE4269:
 32451              	.LBE4268:
4513:src/xeq.c     **** 					setX(&r);
 32452              		.loc 1 4513 6 view .LVU8806
 32453              	.L2345:
4513:src/xeq.c     **** 					setX(&r);
 32454              		.loc 1 4513 6 is_stmt 0 view .LVU8807
 32455              	.LBE4271:
 32456              	.LBE4274:
 32457              	.LBE4279:
 32458              	.LBE4487:
 32459              	.LBB4488:
 32460              	.LBB4467:
 32461              	.LBB4455:
 32462              	.LBB4456:
4590:src/xeq.c     **** 					setX(&r);
 32463              		.loc 1 4590 6 is_stmt 1 view .LVU8808
ARM GAS  /tmp/cciWh9P3.s 			page 819


 32464 0a8a FFF7FEFF 		bl	lower
 32465              	.LVL2555:
 32466              	.L2347:
4591:src/xeq.c     **** 				}
 32467              		.loc 1 4591 6 view .LVU8809
 32468              	.LBB4457:
 32469              	.LBI4457:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 32470              		.loc 1 808 6 view .LVU8810
 32471              	.LBB4458:
 809:src/xeq.c     **** }
 32472              		.loc 1 809 2 view .LVU8811
 32473 0a8e 4146     		mov	r1, r8
 32474 0a90 6420     		movs	r0, #100
 32475 0a92 FFF7FEFF 		bl	setRegister
 32476              	.LVL2556:
 809:src/xeq.c     **** }
 32477              		.loc 1 809 2 is_stmt 0 view .LVU8812
 32478 0a96 059B     		ldr	r3, [sp, #20]
 32479 0a98 1A68     		ldr	r2, [r3]
 32480              	.LBE4458:
 32481              	.LBE4457:
 32482              	.LBE4456:
 32483              	.LBE4455:
 32484 0a9a FFF796BB 		b	.L2124
 32485              	.LVL2557:
 32486              	.L2206:
 809:src/xeq.c     **** }
 32487              		.loc 1 809 2 view .LVU8813
 32488              	.LBE4467:
 32489              	.LBE4488:
 32490              	.LBB4489:
 32491              	.LBB4427:
4427:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 32492              		.loc 1 4427 4 is_stmt 1 view .LVU8814
4427:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 32493              		.loc 1 4427 10 is_stmt 0 view .LVU8815
 32494 0a9e 3C4B     		ldr	r3, .L2392+16
 32495 0aa0 05EB4505 		add	r5, r5, r5, lsl #1
 32496              	.LVL2558:
4427:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 32497              		.loc 1 4427 10 view .LVU8816
 32498 0aa4 53F83550 		ldr	r5, [r3, r5, lsl #3]
4427:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 32499              		.loc 1 4427 7 view .LVU8817
 32500 0aa8 002D     		cmp	r5, #0
 32501 0aaa 3FF428AF 		beq	.L2223
 32502              	.LBB4415:
4428:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32503              		.loc 1 4428 5 is_stmt 1 view .LVU8818
 32504              	.LVL2559:
4429:src/xeq.c     **** 					return;
 32505              		.loc 1 4429 5 view .LVU8819
4429:src/xeq.c     **** 					return;
 32506              		.loc 1 4429 9 is_stmt 0 view .LVU8820
 32507 0aae 2846     		mov	r0, r5
 32508 0ab0 FFF7FEFF 		bl	dispatch_xrom
ARM GAS  /tmp/cciWh9P3.s 			page 820


 32509              	.LVL2560:
4429:src/xeq.c     **** 					return;
 32510              		.loc 1 4429 8 view .LVU8821
 32511 0ab4 0028     		cmp	r0, #0
 32512 0ab6 7FF4D5AD 		bne	.L2121
 32513              	.LBB4416:
4432:src/xeq.c     **** 					getX(&x);
 32514              		.loc 1 4432 6 is_stmt 1 view .LVU8822
4433:src/xeq.c     **** 					if (NULL == fp(&r, &x))
 32515              		.loc 1 4433 6 view .LVU8823
 32516              	.LVL2561:
 32517              	.LBB4417:
 32518              	.LBI4417:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 32519              		.loc 1 804 12 view .LVU8824
 32520              	.LBB4418:
 805:src/xeq.c     **** }
 32521              		.loc 1 805 2 view .LVU8825
 805:src/xeq.c     **** }
 32522              		.loc 1 805 9 is_stmt 0 view .LVU8826
 32523 0aba 6421     		movs	r1, #100
 32524 0abc 30A8     		add	r0, sp, #192
 32525              	.LVL2562:
 805:src/xeq.c     **** }
 32526              		.loc 1 805 9 view .LVU8827
 32527              	.LBE4418:
 32528              	.LBE4417:
4434:src/xeq.c     **** 						set_NaN(&r);
 32529              		.loc 1 4434 18 view .LVU8828
 32530 0abe 0DF1E408 		add	r8, sp, #228
 32531              	.LBB4420:
 32532              	.LBB4419:
 805:src/xeq.c     **** }
 32533              		.loc 1 805 9 view .LVU8829
 32534 0ac2 FFF7FEFF 		bl	getRegister
 32535              	.LVL2563:
 805:src/xeq.c     **** }
 32536              		.loc 1 805 9 view .LVU8830
 32537              	.LBE4419:
 32538              	.LBE4420:
4434:src/xeq.c     **** 						set_NaN(&r);
 32539              		.loc 1 4434 6 is_stmt 1 view .LVU8831
4434:src/xeq.c     **** 						set_NaN(&r);
 32540              		.loc 1 4434 18 is_stmt 0 view .LVU8832
 32541 0ac6 30A9     		add	r1, sp, #192
 32542 0ac8 4046     		mov	r0, r8
 32543 0aca A847     		blx	r5
 32544              	.LVL2564:
4434:src/xeq.c     **** 						set_NaN(&r);
 32545              		.loc 1 4434 9 view .LVU8833
 32546 0acc 0028     		cmp	r0, #0
 32547 0ace 00F0C580 		beq	.L2380
 32548              	.L2211:
4436:src/xeq.c     **** 					setX(&r);
 32549              		.loc 1 4436 6 is_stmt 1 view .LVU8834
 32550              	.LBB4421:
 32551              	.LBI4421:
ARM GAS  /tmp/cciWh9P3.s 			page 821


 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32552              		.loc 1 772 6 view .LVU8835
 32553              	.LBB4422:
 773:src/xeq.c     **** }
 32554              		.loc 1 773 2 view .LVU8836
 32555 0ad2 2B4B     		ldr	r3, .L2392
 32556 0ad4 0593     		str	r3, [sp, #20]
 32557 0ad6 6421     		movs	r1, #100
 32558 0ad8 6C20     		movs	r0, #108
 32559 0ada FFF7FEFF 		bl	copyreg_n
 32560              	.LVL2565:
 32561              	.LBE4422:
 32562              	.LBE4421:
4437:src/xeq.c     **** 				}
 32563              		.loc 1 4437 6 view .LVU8837
 32564              	.LBB4423:
 32565              	.LBI4423:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 32566              		.loc 1 808 6 view .LVU8838
 32567              	.LBB4424:
 809:src/xeq.c     **** }
 32568              		.loc 1 809 2 view .LVU8839
 32569 0ade D6E7     		b	.L2347
 32570              	.LVL2566:
 32571              	.L2333:
 809:src/xeq.c     **** }
 32572              		.loc 1 809 2 is_stmt 0 view .LVU8840
 32573              	.LBE4424:
 32574              	.LBE4423:
 32575              	.LBE4416:
 32576              	.LBE4415:
 32577              	.LBE4427:
 32578              	.LBE4489:
 32579              	.LBB4490:
 32580              	.LBB4128:
4378:src/xeq.c     **** 			bad_mode_error();
 32581              		.loc 1 4378 23 view .LVU8841
 32582 0ae0 03EB0511 		add	r1, r3, r5, lsl #4
 32583 0ae4 2A01     		lsls	r2, r5, #4
4378:src/xeq.c     **** 			bad_mode_error();
 32584              		.loc 1 4378 20 view .LVU8842
 32585 0ae6 91F90410 		ldrsb	r1, [r1, #4]
 32586 0aea 0029     		cmp	r1, #0
 32587 0aec BFF649AB 		bge	.L2193
4379:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
 32588              		.loc 1 4379 4 is_stmt 1 view .LVU8843
 32589              	.LBB4113:
 32590              	.LBI4113:
 565:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 32591              		.loc 1 565 6 view .LVU8844
 32592              	.LBE4113:
 32593              	.LBE4128:
 32594              	.LBE4490:
 566:src/xeq.c     **** }
 32595              		.loc 1 566 2 view .LVU8845
 32596              	.LVL2567:
 32597              	.LBB4491:
ARM GAS  /tmp/cciWh9P3.s 			page 822


 32598              	.LBB4129:
 32599              	.LBB4122:
 32600              	.LBB4114:
 32601              	.LBI4114:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32602              		.loc 1 536 5 view .LVU8846
 32603              	.LBB4115:
 537:src/xeq.c     **** 		Error = e;
 32604              		.loc 1 537 2 view .LVU8847
 537:src/xeq.c     **** 		Error = e;
 32605              		.loc 1 537 12 is_stmt 0 view .LVU8848
 32606 0af0 234B     		ldr	r3, .L2392
 32607 0af2 1A68     		ldr	r2, [r3]
 537:src/xeq.c     **** 		Error = e;
 32608              		.loc 1 537 5 view .LVU8849
 32609 0af4 002A     		cmp	r2, #0
 32610 0af6 7FF49AAD 		bne	.L2194
 32611              	.LVL2568:
 32612              	.LBB4116:
 32613              	.LBI4116:
 536:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32614              		.loc 1 536 5 is_stmt 1 view .LVU8850
 32615              	.LBB4117:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 32616              		.loc 1 538 3 view .LVU8851
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 32617              		.loc 1 538 9 is_stmt 0 view .LVU8852
 32618 0afa 0D22     		movs	r2, #13
 32619              	.LBE4117:
 32620              	.LBE4116:
 32621              	.LBE4115:
 32622              	.LBE4114:
 32623              	.LBE4122:
4396:src/xeq.c     **** 		set_lift();
 32624              		.loc 1 4396 5 view .LVU8853
 32625 0afc 3F2D     		cmp	r5, #63
 32626              	.LBB4123:
 32627              	.LBB4121:
 32628              	.LBB4120:
 32629              	.LBB4119:
 32630              	.LBB4118:
 538:src/xeq.c     **** 		if (e == ERR_NONE) {
 32631              		.loc 1 538 9 view .LVU8854
 32632 0afe 1A60     		str	r2, [r3]
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 32633              		.loc 1 539 3 is_stmt 1 view .LVU8855
 32634              	.LVL2569:
 539:src/xeq.c     **** 			error_message(e); // "Running Program"
 32635              		.loc 1 539 3 is_stmt 0 view .LVU8856
 32636              	.LBE4118:
 32637              	.LBE4119:
 32638              	.LBE4120:
 32639              	.LBE4121:
 32640              	.LBE4123:
4395:src/xeq.c     **** 	if (idx != OP_rCLX)
 32641              		.loc 1 4395 3 is_stmt 1 view .LVU8857
4396:src/xeq.c     **** 		set_lift();
ARM GAS  /tmp/cciWh9P3.s 			page 823


 32642              		.loc 1 4396 2 view .LVU8858
4396:src/xeq.c     **** 		set_lift();
 32643              		.loc 1 4396 5 is_stmt 0 view .LVU8859
 32644 0b00 3FF498AD 		beq	.L2196
4397:src/xeq.c     **** }
 32645              		.loc 1 4397 3 is_stmt 1 view .LVU8860
 32646              	.LBB4124:
 747:src/xeq.c     ****     State2.state_lift = 1;
 32647              		.loc 1 747 6 view .LVU8861
 32648              	.LBB4097:
 748:src/xeq.c     **** }
 32649              		.loc 1 748 5 view .LVU8862
 748:src/xeq.c     **** }
 32650              		.loc 1 748 23 is_stmt 0 view .LVU8863
 32651 0b04 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 32652 0b06 41F04001 		orr	r1, r1, #64
 32653 0b0a E175     		strb	r1, [r4, #23]
 32654              	.LVL2570:
 748:src/xeq.c     **** }
 32655              		.loc 1 748 23 view .LVU8864
 32656              	.LBE4097:
 32657              	.LBE4124:
 32658              	.LBE4129:
 32659              	.LBE4491:
5117:src/xeq.c     **** 		}
 32660              		.loc 1 5117 12 is_stmt 1 view .LVU8865
5127:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 32661              		.loc 1 5127 2 view .LVU8866
 32662 0b0c FFF7F8BA 		b	.L2134
 32663              	.LVL2571:
 32664              	.L2220:
 32665              	.LBB4492:
 32666              	.LBB4468:
4579:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32667              		.loc 1 4579 4 view .LVU8867
4579:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32668              		.loc 1 4579 10 is_stmt 0 view .LVU8868
 32669 0b10 204B     		ldr	r3, .L2392+20
 32670 0b12 05EB8505 		add	r5, r5, r5, lsl #2
 32671              	.LVL2572:
4579:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32672              		.loc 1 4579 10 view .LVU8869
 32673 0b16 53F82550 		ldr	r5, [r3, r5, lsl #2]
4579:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 32674              		.loc 1 4579 7 view .LVU8870
 32675 0b1a 002D     		cmp	r5, #0
 32676 0b1c 3FF4EFAE 		beq	.L2223
 32677              	.LBB4463:
4580:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32678              		.loc 1 4580 5 is_stmt 1 view .LVU8871
 32679              	.LVL2573:
4581:src/xeq.c     **** 					return;
 32680              		.loc 1 4581 5 view .LVU8872
4581:src/xeq.c     **** 					return;
 32681              		.loc 1 4581 9 is_stmt 0 view .LVU8873
 32682 0b20 2846     		mov	r0, r5
 32683 0b22 FFF7FEFF 		bl	dispatch_xrom
ARM GAS  /tmp/cciWh9P3.s 			page 824


 32684              	.LVL2574:
4581:src/xeq.c     **** 					return;
 32685              		.loc 1 4581 8 view .LVU8874
 32686 0b26 0028     		cmp	r0, #0
 32687 0b28 7FF49CAD 		bne	.L2121
 32688              	.LBB4461:
4584:src/xeq.c     **** 					getXYZ(&x, &y, &z);
 32689              		.loc 1 4584 6 is_stmt 1 view .LVU8875
4585:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 32690              		.loc 1 4585 6 view .LVU8876
 32691 0b2c 30AA     		add	r2, sp, #192
 32692 0b2e 27A9     		add	r1, sp, #156
 32693 0b30 1EA8     		add	r0, sp, #120
4586:src/xeq.c     **** 						set_NaN(&r);
 32694              		.loc 1 4586 18 is_stmt 0 view .LVU8877
 32695 0b32 0DF1E408 		add	r8, sp, #228
4585:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 32696              		.loc 1 4585 6 view .LVU8878
 32697 0b36 FFF7FEFF 		bl	getXYZ
 32698              	.LVL2575:
4586:src/xeq.c     **** 						set_NaN(&r);
 32699              		.loc 1 4586 6 is_stmt 1 view .LVU8879
4586:src/xeq.c     **** 						set_NaN(&r);
 32700              		.loc 1 4586 18 is_stmt 0 view .LVU8880
 32701 0b3a 1EAB     		add	r3, sp, #120
 32702 0b3c 27AA     		add	r2, sp, #156
 32703 0b3e 30A9     		add	r1, sp, #192
 32704 0b40 4046     		mov	r0, r8
 32705 0b42 A847     		blx	r5
 32706              	.LVL2576:
4586:src/xeq.c     **** 						set_NaN(&r);
 32707              		.loc 1 4586 9 view .LVU8881
 32708 0b44 0028     		cmp	r0, #0
 32709 0b46 00F08D80 		beq	.L2381
 32710              	.L2225:
4588:src/xeq.c     **** 					lower();
 32711              		.loc 1 4588 6 is_stmt 1 view .LVU8882
 32712              	.LBB4459:
 32713              	.LBI4459:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32714              		.loc 1 772 6 view .LVU8883
 32715              	.LBB4460:
 773:src/xeq.c     **** }
 32716              		.loc 1 773 2 view .LVU8884
 32717 0b4a 0D4B     		ldr	r3, .L2392
 32718 0b4c 0593     		str	r3, [sp, #20]
 32719 0b4e 6421     		movs	r1, #100
 32720 0b50 6C20     		movs	r0, #108
 32721 0b52 FFF7FEFF 		bl	copyreg_n
 32722              	.LVL2577:
 32723              	.LBE4460:
 32724              	.LBE4459:
4589:src/xeq.c     **** 					lower();
 32725              		.loc 1 4589 6 view .LVU8885
 32726 0b56 FFF7FEFF 		bl	lower
 32727              	.LVL2578:
 32728 0b5a 96E7     		b	.L2345
ARM GAS  /tmp/cciWh9P3.s 			page 825


 32729              	.LVL2579:
 32730              	.L2240:
4589:src/xeq.c     **** 					lower();
 32731              		.loc 1 4589 6 is_stmt 0 view .LVU8886
 32732              	.LBE4461:
 32733              	.LBE4463:
 32734              	.LBE4468:
 32735              	.LBE4492:
5153:src/xeq.c     **** 					}
 32736              		.loc 1 5153 7 is_stmt 1 view .LVU8887
 32737 0b5c 7D21     		movs	r1, #125
 32738 0b5e 0C20     		movs	r0, #12
 32739 0b60 0293     		str	r3, [sp, #8]
 32740 0b62 FFF7FEFF 		bl	cmdregs
 32741              	.LVL2580:
 32742 0b66 029B     		ldr	r3, [sp, #8]
5155:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32743              		.loc 1 5155 20 is_stmt 0 view .LVU8888
 32744 0b68 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 32745 0b6a 1968     		ldr	r1, [r3]
5155:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32746              		.loc 1 5155 6 is_stmt 1 view .LVU8889
5155:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32747              		.loc 1 5155 20 is_stmt 0 view .LVU8890
 32748 0b6c 69F3C712 		bfi	r2, r9, #7, #1
 32749 0b70 6A70     		strb	r2, [r5, #1]
5156:src/xeq.c     **** 						UState.mode_double = 1;
 32750              		.loc 1 5156 6 is_stmt 1 view .LVU8891
5156:src/xeq.c     **** 						UState.mode_double = 1;
 32751              		.loc 1 5156 9 is_stmt 0 view .LVU8892
 32752 0b72 0029     		cmp	r1, #0
 32753 0b74 3FF4B9AD 		beq	.L2239
5161:src/xeq.c     **** 				}
 32754              		.loc 1 5161 7 is_stmt 1 view .LVU8893
5161:src/xeq.c     **** 				}
 32755              		.loc 1 5161 13 is_stmt 0 view .LVU8894
 32756 0b78 C3F80090 		str	r9, [r3]
 32757 0b7c 16E4     		b	.L2237
 32758              	.L2393:
 32759 0b7e 00BF     		.align	2
 32760              	.L2392:
 32761 0b80 00000000 		.word	Error
 32762 0b84 00000000 		.word	const_1
 32763 0b88 00000000 		.word	const_0
 32764 0b8c 00000000 		.word	dyfuncs
 32765 0b90 00000000 		.word	monfuncs
 32766 0b94 00000000 		.word	trifuncs
 32767 0b98 00000000 		.word	Running
 32768              	.LVL2581:
 32769              	.L2369:
 32770              	.LBB4493:
 32771              	.LBB4130:
 32772              	.LBB4125:
 32773              	.LBB4087:
 32774              	.LBB4086:
 739:src/xeq.c     **** }
 32775              		.loc 1 739 3 is_stmt 1 view .LVU8895
ARM GAS  /tmp/cciWh9P3.s 			page 826


 32776 0b9c FFF7FEFF 		bl	lift
 32777              	.LVL2582:
 32778              	.L2199:
 32779              	.LBE4086:
 32780              	.LBE4087:
4387:src/xeq.c     **** 				default:
 32781              		.loc 1 4387 13 view .LVU8896
 32782              	.LBB4088:
 32783              	.LBI4088:
 737:src/xeq.c     **** 	if (get_lift())
 32784              		.loc 1 737 6 view .LVU8897
 32785              	.LBB4089:
 738:src/xeq.c     **** 		lift();
 32786              		.loc 1 738 2 view .LVU8898
 32787              	.LBB4090:
 32788              	.LBI4090:
 733:src/xeq.c     **** 	return State2.state_lift;
 32789              		.loc 1 733 12 view .LVU8899
 32790              	.LBB4091:
 734:src/xeq.c     **** }
 32791              		.loc 1 734 2 view .LVU8900
 734:src/xeq.c     **** }
 32792              		.loc 1 734 15 is_stmt 0 view .LVU8901
 32793 0ba0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32794              	.LBE4091:
 32795              	.LBE4090:
 738:src/xeq.c     **** 		lift();
 32796              		.loc 1 738 5 view .LVU8902
 32797 0ba2 5806     		lsls	r0, r3, #25
 32798 0ba4 7FF507AB 		bpl	.L2200
 739:src/xeq.c     **** }
 32799              		.loc 1 739 3 is_stmt 1 view .LVU8903
 32800 0ba8 FFF7FEFF 		bl	lift
 32801              	.LVL2583:
 32802 0bac FFF703BB 		b	.L2200
 32803              	.LVL2584:
 32804              	.L2184:
 739:src/xeq.c     **** }
 32805              		.loc 1 739 3 is_stmt 0 view .LVU8904
 32806              	.LBE4089:
 32807              	.LBE4088:
 32808              	.LBE4125:
 32809              	.LBE4130:
 32810              	.LBE4493:
 32811              	.LBB4494:
 32812              	.LBB4231:
3780:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32813              		.loc 1 3780 8 is_stmt 1 view .LVU8905
3780:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32814              		.loc 1 3780 12 is_stmt 0 view .LVU8906
 32815 0bb0 257F     		ldrb	r5, [r4, #28]	@ zero_extendqisi2
 32816              	.LVL2585:
3780:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32817              		.loc 1 3780 11 view .LVU8907
 32818 0bb2 002D     		cmp	r5, #0
 32819 0bb4 5ED0     		beq	.L2185
3787:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
ARM GAS  /tmp/cciWh9P3.s 			page 827


 32820              		.loc 1 3787 4 is_stmt 1 view .LVU8908
3787:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 32821              		.loc 1 3787 17 is_stmt 0 view .LVU8909
 32822 0bb6 6B1E     		subs	r3, r5, #1
 32823 0bb8 DBB2     		uxtb	r3, r3
3788:src/xeq.c     **** 				CmdLineEex = 0;
 32824              		.loc 1 3788 15 view .LVU8910
 32825 0bba E118     		adds	r1, r4, r3
3787:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 32826              		.loc 1 3787 17 view .LVU8911
 32827 0bbc 2377     		strb	r3, [r4, #28]
3788:src/xeq.c     **** 				CmdLineEex = 0;
 32828              		.loc 1 3788 4 is_stmt 1 view .LVU8912
3788:src/xeq.c     **** 				CmdLineEex = 0;
 32829              		.loc 1 3788 15 is_stmt 0 view .LVU8913
 32830 0bbe 91F82030 		ldrb	r3, [r1, #32]	@ zero_extendqisi2
3788:src/xeq.c     **** 				CmdLineEex = 0;
 32831              		.loc 1 3788 7 view .LVU8914
 32832 0bc2 452B     		cmp	r3, #69
 32833 0bc4 7ED0     		beq	.L2382
3790:src/xeq.c     **** 				CmdLineDot--;
 32834              		.loc 1 3790 9 is_stmt 1 view .LVU8915
3790:src/xeq.c     **** 				CmdLineDot--;
 32835              		.loc 1 3790 12 is_stmt 0 view .LVU8916
 32836 0bc6 2E2B     		cmp	r3, #46
 32837 0bc8 7FF44CAD 		bne	.L2121
3791:src/xeq.c     **** 		} else
 32838              		.loc 1 3791 5 is_stmt 1 view .LVU8917
3791:src/xeq.c     **** 		} else
 32839              		.loc 1 3791 15 is_stmt 0 view .LVU8918
 32840 0bcc A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 32841 0bce 624B     		ldr	r3, .L2394
 32842 0bd0 013A     		subs	r2, r2, #1
 32843 0bd2 A277     		strb	r2, [r4, #30]
 32844 0bd4 1A68     		ldr	r2, [r3]
 32845 0bd6 FFF7F8BA 		b	.L2124
 32846              	.LVL2586:
 32847              	.L2183:
 32848              	.LBB4195:
3768:src/xeq.c     **** 
 32849              		.loc 1 3768 4 is_stmt 1 view .LVU8919
3770:src/xeq.c     **** 			dn_minus(&r, &x);
 32850              		.loc 1 3770 4 view .LVU8920
 32851              	.LBB4165:
 32852              	.LBI4165:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 32853              		.loc 1 804 12 view .LVU8921
 32854              	.LBB4166:
 805:src/xeq.c     **** }
 32855              		.loc 1 805 2 view .LVU8922
 805:src/xeq.c     **** }
 32856              		.loc 1 805 9 is_stmt 0 view .LVU8923
 32857 0bda 30A8     		add	r0, sp, #192
 32858              	.LVL2587:
 805:src/xeq.c     **** }
 32859              		.loc 1 805 9 view .LVU8924
 32860 0bdc 6421     		movs	r1, #100
ARM GAS  /tmp/cciWh9P3.s 			page 828


 32861 0bde FFF7FEFF 		bl	getRegister
 32862              	.LVL2588:
 805:src/xeq.c     **** }
 32863              		.loc 1 805 9 view .LVU8925
 32864              	.LBE4166:
 32865              	.LBE4165:
3771:src/xeq.c     **** 			setX(&r);
 32866              		.loc 1 3771 4 is_stmt 1 view .LVU8926
 32867 0be2 30A9     		add	r1, sp, #192
 32868 0be4 39A8     		add	r0, sp, #228
 32869 0be6 FFF7FEFF 		bl	dn_minus
 32870              	.LVL2589:
3772:src/xeq.c     **** 			set_lift();
 32871              		.loc 1 3772 4 view .LVU8927
 32872              	.LBB4167:
 32873              	.LBI4167:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 32874              		.loc 1 808 6 view .LVU8928
 32875              	.LBB4168:
 809:src/xeq.c     **** }
 32876              		.loc 1 809 2 view .LVU8929
 32877 0bea 39A9     		add	r1, sp, #228
 32878              	.LVL2590:
 809:src/xeq.c     **** }
 32879              		.loc 1 809 2 is_stmt 0 view .LVU8930
 32880 0bec 6420     		movs	r0, #100
 32881 0bee FFF7FEFF 		bl	setRegister
 32882              	.LVL2591:
 809:src/xeq.c     **** }
 32883              		.loc 1 809 2 view .LVU8931
 32884 0bf2 FFF71CBB 		b	.L2342
 32885              	.LVL2592:
 32886              	.L2377:
 809:src/xeq.c     **** }
 32887              		.loc 1 809 2 view .LVU8932
 32888              	.LBE4168:
 32889              	.LBE4167:
 32890              	.LBE4195:
3763:src/xeq.c     **** 		else if (is_intmode()) {
 32891              		.loc 1 3763 4 is_stmt 1 view .LVU8933
 32892              	.LBB4196:
 32893              	.LBI4196:
3006:src/xeq.c     **** 	if (CmdLineEex) {
 32894              		.loc 1 3006 13 view .LVU8934
 32895              	.LBB4197:
3007:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32896              		.loc 1 3007 2 view .LVU8935
3007:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32897              		.loc 1 3007 6 is_stmt 0 view .LVU8936
 32898 0bf6 94F81DE0 		ldrb	lr, [r4, #29]	@ zero_extendqisi2
3007:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 32899              		.loc 1 3007 5 view .LVU8937
 32900 0bfa BEF1000F 		cmp	lr, #0
 32901 0bfe 47D0     		beq	.L2178
 32902              	.LBB4198:
3018:src/xeq.c     **** 		if (CmdLineLength <= pos) {
 32903              		.loc 1 3018 3 is_stmt 1 view .LVU8938
ARM GAS  /tmp/cciWh9P3.s 			page 829


3018:src/xeq.c     **** 		if (CmdLineLength <= pos) {
 32904              		.loc 1 3018 39 is_stmt 0 view .LVU8939
 32905 0c00 0EF1010C 		add	ip, lr, #1
 32906              	.LVL2593:
3019:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
 32907              		.loc 1 3019 3 is_stmt 1 view .LVU8940
3019:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
 32908              		.loc 1 3019 6 is_stmt 0 view .LVU8941
 32909 0c04 9445     		cmp	ip, r2
 32910 0c06 62D3     		bcc	.L2179
3020:src/xeq.c     **** 				append_cmdline('-');
 32911              		.loc 1 3020 4 is_stmt 1 view .LVU8942
3020:src/xeq.c     **** 				append_cmdline('-');
 32912              		.loc 1 3020 7 is_stmt 0 view .LVU8943
 32913 0c08 122A     		cmp	r2, #18
 32914 0c0a 3FF62BAD 		bhi	.L2121
3021:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
 32915              		.loc 1 3021 5 is_stmt 1 view .LVU8944
 32916              	.LVL2594:
 32917              	.LBB4199:
 32918              	.LBI4199:
2406:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32919              		.loc 1 2406 13 view .LVU8945
 32920              	.LBB4200:
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32921              		.loc 1 2407 2 view .LVU8946
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32922              		.loc 1 2407 23 is_stmt 0 view .LVU8947
 32923 0c0e 511C     		adds	r1, r2, #1
 32924 0c10 C9B2     		uxtb	r1, r1
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32925              		.loc 1 2407 27 view .LVU8948
 32926 0c12 2244     		add	r2, r2, r4
2408:src/xeq.c     **** }
 32927              		.loc 1 2408 25 view .LVU8949
 32928 0c14 6018     		adds	r0, r4, r1
 32929 0c16 504B     		ldr	r3, .L2394
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32930              		.loc 1 2407 23 view .LVU8950
 32931 0c18 2177     		strb	r1, [r4, #28]
2407:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32932              		.loc 1 2407 27 view .LVU8951
 32933 0c1a 2D21     		movs	r1, #45
 32934 0c1c 82F82010 		strb	r1, [r2, #32]
2408:src/xeq.c     **** }
 32935              		.loc 1 2408 2 is_stmt 1 view .LVU8952
2408:src/xeq.c     **** }
 32936              		.loc 1 2408 25 is_stmt 0 view .LVU8953
 32937 0c20 0022     		movs	r2, #0
 32938 0c22 80F82020 		strb	r2, [r0, #32]
 32939 0c26 1A68     		ldr	r2, [r3]
2409:src/xeq.c     **** 
 32940              		.loc 1 2409 1 view .LVU8954
 32941 0c28 FFF7CFBA 		b	.L2124
 32942              	.LVL2595:
 32943              	.L2188:
2409:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 830


 32944              		.loc 1 2409 1 view .LVU8955
 32945              	.LBE4200:
 32946              	.LBE4199:
 32947              	.LBE4198:
 32948              	.LBE4197:
 32949              	.LBE4196:
3808:src/xeq.c     **** 		clr_lift();
 32950              		.loc 1 3808 3 is_stmt 1 view .LVU8956
 32951 0c2c FFF7FEFF 		bl	process_cmdline
 32952              	.LVL2596:
3809:src/xeq.c     **** 		setlastX();
 32953              		.loc 1 3809 3 view .LVU8957
 32954              	.LBB4206:
 32955              	.LBI4206:
 751:src/xeq.c     ****     State2.state_lift = 0;
 32956              		.loc 1 751 13 view .LVU8958
 32957              	.LBB4207:
 752:src/xeq.c     **** }
 32958              		.loc 1 752 5 view .LVU8959
 752:src/xeq.c     **** }
 32959              		.loc 1 752 23 is_stmt 0 view .LVU8960
 32960 0c30 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32961              	.LBE4207:
 32962              	.LBE4206:
 32963              	.LBB4210:
 32964              	.LBB4211:
 773:src/xeq.c     **** }
 32965              		.loc 1 773 2 view .LVU8961
 32966 0c32 6421     		movs	r1, #100
 32967              	.LBE4211:
 32968              	.LBE4210:
 32969              	.LBB4214:
 32970              	.LBB4208:
 752:src/xeq.c     **** }
 32971              		.loc 1 752 23 view .LVU8962
 32972 0c34 65F38613 		bfi	r3, r5, #6, #1
 32973              	.LBE4208:
 32974              	.LBE4214:
 32975              	.LBB4215:
 32976              	.LBB4212:
 773:src/xeq.c     **** }
 32977              		.loc 1 773 2 view .LVU8963
 32978 0c38 6C20     		movs	r0, #108
 32979              	.LBE4212:
 32980              	.LBE4215:
 32981              	.LBB4216:
 32982              	.LBB4209:
 752:src/xeq.c     **** }
 32983              		.loc 1 752 23 view .LVU8964
 32984 0c3a E375     		strb	r3, [r4, #23]
 32985              	.LBE4209:
 32986              	.LBE4216:
3810:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
 32987              		.loc 1 3810 3 is_stmt 1 view .LVU8965
 32988              	.LBB4217:
 32989              	.LBI4210:
 772:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
ARM GAS  /tmp/cciWh9P3.s 			page 831


 32990              		.loc 1 772 6 view .LVU8966
 32991              	.LBB4213:
 773:src/xeq.c     **** }
 32992              		.loc 1 773 2 view .LVU8967
 32993 0c3c FFF7FEFF 		bl	copyreg_n
 32994              	.LVL2597:
 32995              	.LBE4213:
 32996              	.LBE4217:
3811:src/xeq.c     **** 			sigma_plus();
 32997              		.loc 1 3811 3 view .LVU8968
3811:src/xeq.c     **** 			sigma_plus();
 32998              		.loc 1 3811 6 is_stmt 0 view .LVU8969
 32999 0c40 B8F1150F 		cmp	r8, #21
 33000 0c44 3BD0     		beq	.L2383
3814:src/xeq.c     **** 		sigma_val(OP_sigmaN);
 33001              		.loc 1 3814 4 is_stmt 1 view .LVU8970
 33002 0c46 FFF7FEFF 		bl	sigma_minus
 33003              	.LVL2598:
 33004              	.L2191:
3815:src/xeq.c     **** 		break;
 33005              		.loc 1 3815 3 view .LVU8971
 33006 0c4a 434B     		ldr	r3, .L2394
 33007 0c4c 0593     		str	r3, [sp, #20]
 33008 0c4e 1D20     		movs	r0, #29
 33009 0c50 FFF7FEFF 		bl	sigma_val
 33010              	.LVL2599:
3816:src/xeq.c     **** 
 33011              		.loc 1 3816 3 view .LVU8972
 33012 0c54 059B     		ldr	r3, [sp, #20]
 33013 0c56 1A68     		ldr	r2, [r3]
 33014 0c58 FFF7B7BA 		b	.L2124
 33015              	.LVL2600:
 33016              	.L2380:
3816:src/xeq.c     **** 
 33017              		.loc 1 3816 3 is_stmt 0 view .LVU8973
 33018              	.LBE4231:
 33019              	.LBE4494:
 33020              	.LBB4495:
 33021              	.LBB4428:
 33022              	.LBB4426:
 33023              	.LBB4425:
4435:src/xeq.c     **** 					setlastX();
 33024              		.loc 1 4435 7 is_stmt 1 view .LVU8974
 33025 0c5c 4046     		mov	r0, r8
 33026 0c5e FFF7FEFF 		bl	set_NaN
 33027              	.LVL2601:
 33028 0c62 36E7     		b	.L2211
 33029              	.LVL2602:
 33030              	.L2381:
4435:src/xeq.c     **** 					setlastX();
 33031              		.loc 1 4435 7 is_stmt 0 view .LVU8975
 33032              	.LBE4425:
 33033              	.LBE4426:
 33034              	.LBE4428:
 33035              	.LBE4495:
 33036              	.LBB4496:
 33037              	.LBB4469:
ARM GAS  /tmp/cciWh9P3.s 			page 832


 33038              	.LBB4464:
 33039              	.LBB4462:
4587:src/xeq.c     **** 					setlastX();
 33040              		.loc 1 4587 7 is_stmt 1 view .LVU8976
 33041 0c64 4046     		mov	r0, r8
 33042 0c66 FFF7FEFF 		bl	set_NaN
 33043              	.LVL2603:
 33044 0c6a 6EE7     		b	.L2225
 33045              	.LVL2604:
 33046              	.L2379:
4587:src/xeq.c     **** 					setlastX();
 33047              		.loc 1 4587 7 is_stmt 0 view .LVU8977
 33048              	.LBE4462:
 33049              	.LBE4464:
 33050              	.LBE4469:
 33051              	.LBE4496:
 33052              	.LBB4497:
 33053              	.LBB4280:
 33054              	.LBB4275:
 33055              	.LBB4272:
4511:src/xeq.c     **** 					setlastX();
 33056              		.loc 1 4511 7 is_stmt 1 view .LVU8978
 33057 0c6c 4046     		mov	r0, r8
 33058 0c6e FFF7FEFF 		bl	set_NaN
 33059              	.LVL2605:
 33060 0c72 04E7     		b	.L2218
 33061              	.LVL2606:
 33062              	.L2185:
4511:src/xeq.c     **** 					setlastX();
 33063              		.loc 1 4511 7 is_stmt 0 view .LVU8979
 33064              	.LBE4272:
 33065              	.LBE4275:
 33066              	.LBE4280:
 33067              	.LBE4497:
 33068              	.LBB4498:
 33069              	.LBB4232:
3793:src/xeq.c     **** 		break;
 33070              		.loc 1 3793 4 is_stmt 1 view .LVU8980
 33071              	.LBB4218:
 33072              	.LBI4218:
1371:src/xeq.c     **** 	zero_X();
 33073              		.loc 1 1371 6 view .LVU8981
 33074              	.LBB4219:
1372:src/xeq.c     **** 	clr_lift();
 33075              		.loc 1 1372 2 view .LVU8982
 33076              	.LBB4220:
 33077              	.LBI4220:
1363:src/xeq.c     **** 	set_zero(StackBase);
 33078              		.loc 1 1363 6 view .LVU8983
 33079              	.LBB4221:
1364:src/xeq.c     **** }
 33080              		.loc 1 1364 2 view .LVU8984
 33081 0c74 384B     		ldr	r3, .L2394
 33082 0c76 D9F80000 		ldr	r0, [r9]
 33083 0c7a 0593     		str	r3, [sp, #20]
 33084 0c7c FFF7FEFF 		bl	set_zero
 33085              	.LVL2607:
ARM GAS  /tmp/cciWh9P3.s 			page 833


 33086              	.LBE4221:
 33087              	.LBE4220:
1373:src/xeq.c     **** }
 33088              		.loc 1 1373 2 view .LVU8985
 33089              	.LBB4222:
 33090              	.LBI4222:
 751:src/xeq.c     ****     State2.state_lift = 0;
 33091              		.loc 1 751 13 view .LVU8986
 33092              	.LBB4223:
 752:src/xeq.c     **** }
 33093              		.loc 1 752 5 view .LVU8987
 752:src/xeq.c     **** }
 33094              		.loc 1 752 23 is_stmt 0 view .LVU8988
 33095 0c80 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 33096 0c82 059B     		ldr	r3, [sp, #20]
 33097 0c84 65F38612 		bfi	r2, r5, #6, #1
 33098 0c88 E275     		strb	r2, [r4, #23]
 33099 0c8a 1A68     		ldr	r2, [r3]
 33100              	.LBE4223:
 33101              	.LBE4222:
1374:src/xeq.c     **** 
 33102              		.loc 1 1374 1 view .LVU8989
 33103 0c8c FFF79DBA 		b	.L2124
 33104              	.LVL2608:
 33105              	.L2178:
1374:src/xeq.c     **** 
 33106              		.loc 1 1374 1 view .LVU8990
 33107              	.LBE4219:
 33108              	.LBE4218:
 33109              	.LBB4224:
 33110              	.LBB4203:
3038:src/xeq.c     **** 			if (CmdLineLength > 1)
 33111              		.loc 1 3038 3 is_stmt 1 view .LVU8991
3038:src/xeq.c     **** 			if (CmdLineLength > 1)
 33112              		.loc 1 3038 6 is_stmt 0 view .LVU8992
 33113 0c90 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 33114 0c94 2D2B     		cmp	r3, #45
 33115 0c96 38D0     		beq	.L2384
3042:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33116              		.loc 1 3042 10 is_stmt 1 view .LVU8993
3042:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33117              		.loc 1 3042 13 is_stmt 0 view .LVU8994
 33118 0c98 122A     		cmp	r2, #18
 33119 0c9a 3FF6E3AC 		bhi	.L2121
3043:src/xeq.c     **** 			Cmdline[0] = '-';
 33120              		.loc 1 3043 4 is_stmt 1 view .LVU8995
 33121 0c9e 2F49     		ldr	r1, .L2394+4
 33122 0ca0 2D4B     		ldr	r3, .L2394
 33123 0ca2 0593     		str	r3, [sp, #20]
 33124 0ca4 481C     		adds	r0, r1, #1
 33125 0ca6 FFF7FEFF 		bl	xcopy
 33126              	.LVL2609:
3044:src/xeq.c     **** 			CmdLineLength++;
 33127              		.loc 1 3044 4 view .LVU8996
3045:src/xeq.c     **** 		}
 33128              		.loc 1 3045 17 is_stmt 0 view .LVU8997
 33129 0caa 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
ARM GAS  /tmp/cciWh9P3.s 			page 834


 33130 0cac 059B     		ldr	r3, [sp, #20]
 33131 0cae 0131     		adds	r1, r1, #1
3044:src/xeq.c     **** 			CmdLineLength++;
 33132              		.loc 1 3044 15 view .LVU8998
 33133 0cb0 2D20     		movs	r0, #45
 33134 0cb2 1A68     		ldr	r2, [r3]
3045:src/xeq.c     **** 		}
 33135              		.loc 1 3045 17 view .LVU8999
 33136 0cb4 2177     		strb	r1, [r4, #28]
3044:src/xeq.c     **** 			CmdLineLength++;
 33137              		.loc 1 3044 15 view .LVU9000
 33138 0cb6 84F82000 		strb	r0, [r4, #32]
3045:src/xeq.c     **** 		}
 33139              		.loc 1 3045 4 is_stmt 1 view .LVU9001
 33140 0cba FFF786BA 		b	.L2124
 33141              	.LVL2610:
 33142              	.L2383:
3045:src/xeq.c     **** 		}
 33143              		.loc 1 3045 4 is_stmt 0 view .LVU9002
 33144              	.LBE4203:
 33145              	.LBE4224:
3812:src/xeq.c     **** 		else
 33146              		.loc 1 3812 4 is_stmt 1 view .LVU9003
 33147 0cbe FFF7FEFF 		bl	sigma_plus
 33148              	.LVL2611:
 33149 0cc2 C2E7     		b	.L2191
 33150              	.LVL2612:
 33151              	.L2382:
3789:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33152              		.loc 1 3789 5 view .LVU9004
 33153 0cc4 244B     		ldr	r3, .L2394
3789:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33154              		.loc 1 3789 16 is_stmt 0 view .LVU9005
 33155 0cc6 6277     		strb	r2, [r4, #29]
 33156 0cc8 1A68     		ldr	r2, [r3]
 33157 0cca FFF77EBA 		b	.L2124
 33158              	.LVL2613:
 33159              	.L2179:
 33160              	.LBB4225:
 33161              	.LBB4204:
 33162              	.LBB4201:
3022:src/xeq.c     **** 			if (CmdLineLength != pos)
 33163              		.loc 1 3022 10 is_stmt 1 view .LVU9006
3022:src/xeq.c     **** 			if (CmdLineLength != pos)
 33164              		.loc 1 3022 21 is_stmt 0 view .LVU9007
 33165 0cce 04EB0C05 		add	r5, r4, ip
 33166              	.LVL2614:
3022:src/xeq.c     **** 			if (CmdLineLength != pos)
 33167              		.loc 1 3022 13 view .LVU9008
 33168 0cd2 95F82030 		ldrb	r3, [r5, #32]	@ zero_extendqisi2
 33169 0cd6 2D2B     		cmp	r3, #45
 33170 0cd8 2CD0     		beq	.L2385
3026:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
 33171              		.loc 1 3026 10 is_stmt 1 view .LVU9009
3026:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
 33172              		.loc 1 3026 13 is_stmt 0 view .LVU9010
 33173 0cda 122A     		cmp	r2, #18
ARM GAS  /tmp/cciWh9P3.s 			page 835


 33174 0cdc 3FF6C2AC 		bhi	.L2121
3027:src/xeq.c     **** 			Cmdline[pos] = '-';
 33175              		.loc 1 3027 4 is_stmt 1 view .LVU9011
 33176 0ce0 1E49     		ldr	r1, .L2394+4
 33177 0ce2 1D4B     		ldr	r3, .L2394
 33178 0ce4 0593     		str	r3, [sp, #20]
3027:src/xeq.c     **** 			Cmdline[pos] = '-';
 33179              		.loc 1 3027 21 is_stmt 0 view .LVU9012
 33180 0ce6 0EF10200 		add	r0, lr, #2
3027:src/xeq.c     **** 			Cmdline[pos] = '-';
 33181              		.loc 1 3027 4 view .LVU9013
 33182 0cea A2EB0C02 		sub	r2, r2, ip
 33183 0cee 0844     		add	r0, r0, r1
 33184 0cf0 6144     		add	r1, r1, ip
 33185 0cf2 FFF7FEFF 		bl	xcopy
 33186              	.LVL2615:
3028:src/xeq.c     **** 			CmdLineLength++;
 33187              		.loc 1 3028 4 is_stmt 1 view .LVU9014
3029:src/xeq.c     **** 		}
 33188              		.loc 1 3029 17 is_stmt 0 view .LVU9015
 33189 0cf6 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 33190 0cf8 059B     		ldr	r3, [sp, #20]
 33191 0cfa 0131     		adds	r1, r1, #1
3028:src/xeq.c     **** 			CmdLineLength++;
 33192              		.loc 1 3028 17 view .LVU9016
 33193 0cfc 2D20     		movs	r0, #45
 33194 0cfe 1A68     		ldr	r2, [r3]
3029:src/xeq.c     **** 		}
 33195              		.loc 1 3029 17 view .LVU9017
 33196 0d00 2177     		strb	r1, [r4, #28]
3028:src/xeq.c     **** 			CmdLineLength++;
 33197              		.loc 1 3028 17 view .LVU9018
 33198 0d02 85F82000 		strb	r0, [r5, #32]
3029:src/xeq.c     **** 		}
 33199              		.loc 1 3029 4 is_stmt 1 view .LVU9019
 33200 0d06 FFF760BA 		b	.L2124
 33201              	.LVL2616:
 33202              	.L2384:
3029:src/xeq.c     **** 		}
 33203              		.loc 1 3029 4 is_stmt 0 view .LVU9020
 33204              	.LBE4201:
3039:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33205              		.loc 1 3039 4 is_stmt 1 view .LVU9021
3039:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33206              		.loc 1 3039 7 is_stmt 0 view .LVU9022
 33207 0d0a 012A     		cmp	r2, #1
 33208 0d0c 03D9     		bls	.L2182
3040:src/xeq.c     **** 			CmdLineLength--;
 33209              		.loc 1 3040 5 is_stmt 1 view .LVU9023
 33210 0d0e 1449     		ldr	r1, .L2394+8
 33211 0d10 481E     		subs	r0, r1, #1
 33212 0d12 FFF7FEFF 		bl	xcopy
 33213              	.LVL2617:
 33214              	.L2182:
3041:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33215              		.loc 1 3041 4 view .LVU9024
3041:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
ARM GAS  /tmp/cciWh9P3.s 			page 836


 33216              		.loc 1 3041 17 is_stmt 0 view .LVU9025
 33217 0d16 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 33218 0d18 0F4B     		ldr	r3, .L2394
 33219 0d1a 013A     		subs	r2, r2, #1
 33220 0d1c 2277     		strb	r2, [r4, #28]
 33221 0d1e 1A68     		ldr	r2, [r3]
 33222 0d20 FFF753BA 		b	.L2124
 33223              	.L2174:
 33224              	.LBE4204:
 33225              	.LBE4225:
3708:src/xeq.c     **** 			CmdLineDot++;
 33226              		.loc 1 3708 5 is_stmt 1 view .LVU9026
 33227 0d24 0020     		movs	r0, #0
 33228 0d26 FFF7FEFF 		bl	digit
 33229              	.LVL2618:
 33230 0d2a 1CE6     		b	.L2175
 33231              	.LVL2619:
 33232              	.L2378:
 33233              	.LBB4226:
3755:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 33234              		.loc 1 3755 5 view .LVU9027
 33235 0d2c 0120     		movs	r0, #1
 33236 0d2e FFF7FEFF 		bl	digit
 33237              	.LVL2620:
 33238 0d32 55E6     		b	.L2176
 33239              	.LVL2621:
 33240              	.L2385:
3755:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 33241              		.loc 1 3755 5 is_stmt 0 view .LVU9028
 33242              	.LBE4226:
 33243              	.LBB4227:
 33244              	.LBB4205:
 33245              	.LBB4202:
3023:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
 33246              		.loc 1 3023 4 is_stmt 1 view .LVU9029
3024:src/xeq.c     **** 			CmdLineLength--;
 33247              		.loc 1 3024 5 view .LVU9030
 33248 0d34 0948     		ldr	r0, .L2394+4
 33249 0d36 084B     		ldr	r3, .L2394
 33250 0d38 0593     		str	r3, [sp, #20]
3024:src/xeq.c     **** 			CmdLineLength--;
 33251              		.loc 1 3024 40 is_stmt 0 view .LVU9031
 33252 0d3a 0EF10201 		add	r1, lr, #2
3024:src/xeq.c     **** 			CmdLineLength--;
 33253              		.loc 1 3024 5 view .LVU9032
 33254 0d3e 0144     		add	r1, r1, r0
 33255 0d40 A2EB0C02 		sub	r2, r2, ip
 33256 0d44 6044     		add	r0, r0, ip
 33257 0d46 FFF7FEFF 		bl	xcopy
 33258              	.LVL2622:
3025:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33259              		.loc 1 3025 4 is_stmt 1 view .LVU9033
3025:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33260              		.loc 1 3025 17 is_stmt 0 view .LVU9034
 33261 0d4a 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 33262 0d4c 059B     		ldr	r3, [sp, #20]
 33263 0d4e 0139     		subs	r1, r1, #1
ARM GAS  /tmp/cciWh9P3.s 			page 837


 33264 0d50 1A68     		ldr	r2, [r3]
 33265 0d52 2177     		strb	r1, [r4, #28]
 33266 0d54 FFF739BA 		b	.L2124
 33267              	.L2395:
 33268              		.align	2
 33269              	.L2394:
 33270 0d58 00000000 		.word	Error
 33271 0d5c 20000000 		.word	StateWhileOn+32
 33272 0d60 21000000 		.word	StateWhileOn+33
 33273              	.LBE4202:
 33274              	.LBE4205:
 33275              	.LBE4227:
 33276              	.LBE4232:
 33277              	.LBE4498:
 33278              		.cfi_endproc
 33279              	.LFE244:
 33281              		.section	.text.xeq_single,"ax",%progbits
 33282              		.align	1
 33283              		.p2align 2,,3
 33284              		.syntax unified
 33285              		.thumb
 33286              		.thumb_func
 33287              		.fpu fpv4-sp-d16
 33289              	xeq_single:
 33290              	.LFB245:
5205:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 33291              		.loc 1 5205 30 is_stmt 1 view -0
 33292              		.cfi_startproc
 33293              		@ args = 0, pretend = 0, frame = 0
 33294              		@ frame_needed = 0, uses_anonymous_args = 0
5206:src/xeq.c     **** 
 33295              		.loc 1 5206 2 view .LVU9036
5206:src/xeq.c     **** 
 33296              		.loc 1 5206 28 is_stmt 0 view .LVU9037
 33297 0000 074B     		ldr	r3, .L2398
 33298 0002 1B68     		ldr	r3, [r3]
5205:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 33299              		.loc 1 5205 30 view .LVU9038
 33300 0004 10B5     		push	{r4, lr}
 33301              		.cfi_def_cfa_offset 8
 33302              		.cfi_offset 4, -8
 33303              		.cfi_offset 14, -4
5206:src/xeq.c     **** 
 33304              		.loc 1 5206 20 view .LVU9039
 33305 0006 B3F8E007 		ldrh	r0, [r3, #2016]
 33306 000a FFF7FEFF 		bl	getprog
 33307              	.LVL2623:
 33308 000e 0446     		mov	r4, r0
 33309              	.LVL2624:
5208:src/xeq.c     **** 	xeq(op);
 33310              		.loc 1 5208 2 is_stmt 1 view .LVU9040
 33311 0010 FFF7FEFF 		bl	incpc
 33312              	.LVL2625:
5209:src/xeq.c     **** }
 33313              		.loc 1 5209 2 view .LVU9041
 33314 0014 2046     		mov	r0, r4
5210:src/xeq.c     **** 
ARM GAS  /tmp/cciWh9P3.s 			page 838


 33315              		.loc 1 5210 1 is_stmt 0 view .LVU9042
 33316 0016 BDE81040 		pop	{r4, lr}
 33317              		.cfi_restore 14
 33318              		.cfi_restore 4
 33319              		.cfi_def_cfa_offset 0
 33320              	.LVL2626:
5209:src/xeq.c     **** }
 33321              		.loc 1 5209 2 view .LVU9043
 33322 001a FFF7FEBF 		b	xeq
 33323              	.LVL2627:
 33324              	.L2399:
5209:src/xeq.c     **** }
 33325              		.loc 1 5209 2 view .LVU9044
 33326 001e 00BF     		.align	2
 33327              	.L2398:
 33328 0020 00000000 		.word	main_ram
 33329              		.cfi_endproc
 33330              	.LFE245:
 33332              		.section	.text.xeq_xrom2,"ax",%progbits
 33333              		.align	1
 33334              		.p2align 2,,3
 33335              		.syntax unified
 33336              		.thumb
 33337              		.thumb_func
 33338              		.fpu fpv4-sp-d16
 33340              	xeq_xrom2:
 33341              	.LFB246:
5217:src/xeq.c     **** #endif
 33342              		.loc 1 5217 29 is_stmt 1 view -0
 33343              		.cfi_startproc
 33344              		@ args = 0, pretend = 0, frame = 0
 33345              		@ frame_needed = 0, uses_anonymous_args = 0
5219:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
 33346              		.loc 1 5219 2 view .LVU9046
 33347              	.LVL2628:
5224:src/xeq.c     **** #else
 33348              		.loc 1 5224 2 view .LVU9047
5224:src/xeq.c     **** #else
 33349              		.loc 1 5224 8 view .LVU9048
5217:src/xeq.c     **** #endif
 33350              		.loc 1 5217 29 is_stmt 0 view .LVU9049
 33351 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 33352              		.cfi_def_cfa_offset 32
 33353              		.cfi_offset 4, -32
 33354              		.cfi_offset 5, -28
 33355              		.cfi_offset 6, -24
 33356              		.cfi_offset 7, -20
 33357              		.cfi_offset 8, -16
 33358              		.cfi_offset 9, -12
 33359              		.cfi_offset 10, -8
 33360              		.cfi_offset 14, -4
5224:src/xeq.c     **** #else
 33361              		.loc 1 5224 10 view .LVU9050
 33362 0004 1A4D     		ldr	r5, .L2412
 33363 0006 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5224:src/xeq.c     **** #else
 33364              		.loc 1 5224 8 view .LVU9051
ARM GAS  /tmp/cciWh9P3.s 			page 839


 33365 0008 53BB     		cbnz	r3, .L2400
 33366 000a DFF87080 		ldr	r8, .L2412+12
5228:src/xeq.c     **** 		xeq_single();
 33367              		.loc 1 5228 15 view .LVU9052
 33368 000e 194F     		ldr	r7, .L2412+4
 33369              	.LBB4505:
 33370              	.LBB4506:
4227:src/xeq.c     **** 		Busy = 1;
 33371              		.loc 1 4227 6 view .LVU9053
 33372 0010 DFF86CA0 		ldr	r10, .L2412+16
4227:src/xeq.c     **** 		Busy = 1;
 33373              		.loc 1 4227 15 view .LVU9054
 33374 0014 DFF86C90 		ldr	r9, .L2412+20
 33375 0018 03F0FF04 		and	r4, r3, #255
 33376              	.LVL2629:
 33377              	.L2401:
4227:src/xeq.c     **** 		Busy = 1;
 33378              		.loc 1 4227 15 view .LVU9055
 33379              	.LBE4506:
 33380              	.LBE4505:
5228:src/xeq.c     **** 		xeq_single();
 33381              		.loc 1 5228 3 is_stmt 1 view .LVU9056
 33382              	.LBB4513:
 33383              	.LBI4513:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 33384              		.loc 1 181 5 view .LVU9057
 33385              	.LBB4514:
 182:src/xeq.c     **** }
 33386              		.loc 1 182 2 view .LVU9058
 182:src/xeq.c     **** }
 33387              		.loc 1 182 9 is_stmt 0 view .LVU9059
 33388 001c D8F80020 		ldr	r2, [r8]
 33389 0020 B2F8E037 		ldrh	r3, [r2, #2016]
 33390              	.LBE4514:
 33391              	.LBE4513:
5224:src/xeq.c     **** #else
 33392              		.loc 1 5224 18 view .LVU9060
 33393 0024 9B0B     		lsrs	r3, r3, #14
5228:src/xeq.c     **** 		xeq_single();
 33394              		.loc 1 5228 15 view .LVU9061
 33395 0026 0126     		movs	r6, #1
5224:src/xeq.c     **** #else
 33396              		.loc 1 5224 18 view .LVU9062
 33397 0028 032B     		cmp	r3, #3
5231:src/xeq.c     **** 			busy();
 33398              		.loc 1 5231 6 view .LVU9063
 33399 002a 3444     		add	r4, r4, r6
 33400              	.LVL2630:
5224:src/xeq.c     **** #else
 33401              		.loc 1 5224 18 view .LVU9064
 33402 002c 18D1     		bne	.L2400
5224:src/xeq.c     **** #else
 33403              		.loc 1 5224 31 discriminator 2 view .LVU9065
 33404 002e B2F9E237 		ldrsh	r3, [r2, #2018]
 33405 0032 ABB1     		cbz	r3, .L2400
5228:src/xeq.c     **** 		xeq_single();
 33406              		.loc 1 5228 15 view .LVU9066
ARM GAS  /tmp/cciWh9P3.s 			page 840


 33407 0034 3E60     		str	r6, [r7]
5229:src/xeq.c     **** 		XromRunning = 0;
 33408              		.loc 1 5229 3 is_stmt 1 view .LVU9067
 33409 0036 FFF7FEFF 		bl	xeq_single
 33410              	.LVL2631:
5230:src/xeq.c     **** 		if ((++count & 31) == 0)
 33411              		.loc 1 5230 3 view .LVU9068
 33412              	.LBB4515:
 33413              	.LBB4509:
4227:src/xeq.c     **** 		Busy = 1;
 33414              		.loc 1 4227 12 is_stmt 0 view .LVU9069
 33415 003a D9F80030 		ldr	r3, [r9]
 33416 003e DAF80010 		ldr	r1, [r10]
 33417 0042 1943     		orrs	r1, r1, r3
 33418              	.LBE4509:
 33419              	.LBE4515:
5231:src/xeq.c     **** 			busy();
 33420              		.loc 1 5231 16 view .LVU9070
 33421 0044 04F01F03 		and	r3, r4, #31
5230:src/xeq.c     **** 		if ((++count & 31) == 0)
 33422              		.loc 1 5230 15 view .LVU9071
 33423 0048 0022     		movs	r2, #0
 33424              	.LBB4516:
 33425              	.LBB4510:
4227:src/xeq.c     **** 		Busy = 1;
 33426              		.loc 1 4227 12 view .LVU9072
 33427 004a 1943     		orrs	r1, r1, r3
 33428              	.LBE4510:
 33429              	.LBE4516:
5230:src/xeq.c     **** 		if ((++count & 31) == 0)
 33430              		.loc 1 5230 15 view .LVU9073
 33431 004c 3A60     		str	r2, [r7]
5231:src/xeq.c     **** 			busy();
 33432              		.loc 1 5231 3 is_stmt 1 view .LVU9074
 33433              	.LVL2632:
5232:src/xeq.c     **** #ifdef DM42
 33434              		.loc 1 5232 4 view .LVU9075
 33435              	.LBB4517:
 33436              	.LBI4505:
4212:src/xeq.c     **** {
 33437              		.loc 1 4212 6 view .LVU9076
 33438              	.LBB4511:
4217:src/xeq.c     **** 
 33439              		.loc 1 4217 12 view .LVU9077
4222:src/xeq.c     **** 
 33440              		.loc 1 4222 17 view .LVU9078
4227:src/xeq.c     **** 		Busy = 1;
 33441              		.loc 1 4227 2 view .LVU9079
4227:src/xeq.c     **** 		Busy = 1;
 33442              		.loc 1 4227 12 is_stmt 0 view .LVU9080
 33443 004e 09D0     		beq	.L2411
 33444              	.L2402:
 33445              	.LBE4511:
 33446              	.LBE4517:
5234:src/xeq.c     **** #else
 33447              		.loc 1 5234 3 is_stmt 1 view .LVU9081
5240:src/xeq.c     **** 		}
ARM GAS  /tmp/cciWh9P3.s 			page 841


 33448              		.loc 1 5240 4 view .LVU9082
5224:src/xeq.c     **** #else
 33449              		.loc 1 5224 8 view .LVU9083
5234:src/xeq.c     **** #else
 33450              		.loc 1 5234 7 is_stmt 0 view .LVU9084
 33451 0050 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
5224:src/xeq.c     **** #else
 33452              		.loc 1 5224 10 view .LVU9085
 33453 0052 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5234:src/xeq.c     **** #else
 33454              		.loc 1 5234 6 view .LVU9086
 33455 0054 12B1     		cbz	r2, .L2403
5240:src/xeq.c     **** 		}
 33456              		.loc 1 5240 12 view .LVU9087
 33457 0056 0122     		movs	r2, #1
 33458 0058 C9F80020 		str	r2, [r9]
 33459              	.L2403:
5224:src/xeq.c     **** #else
 33460              		.loc 1 5224 8 view .LVU9088
 33461 005c 002B     		cmp	r3, #0
 33462 005e DDD0     		beq	.L2401
 33463              	.LVL2633:
 33464              	.L2400:
5243:src/xeq.c     **** 
 33465              		.loc 1 5243 1 view .LVU9089
 33466 0060 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 33467              	.LVL2634:
 33468              	.L2411:
 33469              	.LBB4518:
 33470              	.LBB4512:
 33471              	.LBB4507:
 33472              	.LBI4507:
4212:src/xeq.c     **** {
 33473              		.loc 1 4212 6 is_stmt 1 view .LVU9090
 33474              	.LBB4508:
4228:src/xeq.c     **** 		message("Wait...", NULL);
 33475              		.loc 1 4228 3 view .LVU9091
4229:src/xeq.c     **** 	}
 33476              		.loc 1 4229 3 is_stmt 0 view .LVU9092
 33477 0064 0448     		ldr	r0, .L2412+8
4228:src/xeq.c     **** 		message("Wait...", NULL);
 33478              		.loc 1 4228 8 view .LVU9093
 33479 0066 CAF80060 		str	r6, [r10]
4229:src/xeq.c     **** 	}
 33480              		.loc 1 4229 3 is_stmt 1 view .LVU9094
 33481 006a FFF7FEFF 		bl	message
 33482              	.LVL2635:
4231:src/xeq.c     **** 
 33483              		.loc 1 4231 1 is_stmt 0 view .LVU9095
 33484 006e EFE7     		b	.L2402
 33485              	.L2413:
 33486              		.align	2
 33487              	.L2412:
 33488 0070 00000000 		.word	Pause
 33489 0074 00000000 		.word	XromRunning
 33490 0078 00000000 		.word	.LC7
 33491 007c 00000000 		.word	main_ram
ARM GAS  /tmp/cciWh9P3.s 			page 842


 33492 0080 00000000 		.word	Busy
 33493 0084 00000000 		.word	Running
 33494              	.LBE4508:
 33495              	.LBE4507:
 33496              	.LBE4512:
 33497              	.LBE4518:
 33498              		.cfi_endproc
 33499              	.LFE246:
 33501              		.section	.text.xeq_xrom,"ax",%progbits
 33502              		.align	1
 33503              		.p2align 2,,3
 33504              		.global	xeq_xrom
 33505              		.syntax unified
 33506              		.thumb
 33507              		.thumb_func
 33508              		.fpu fpv4-sp-d16
 33510              	xeq_xrom:
 33511              	.LFB247:
5246:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 33512              		.loc 1 5246 21 is_stmt 1 view -0
 33513              		.cfi_startproc
 33514              		@ args = 0, pretend = 0, frame = 0
 33515              		@ frame_needed = 0, uses_anonymous_args = 0
 33516              		@ link register save eliminated.
5248:src/xeq.c     **** 		xeq_xrom2();
 33517              		.loc 1 5248 2 view .LVU9097
5248:src/xeq.c     **** 		xeq_xrom2();
 33518              		.loc 1 5248 6 is_stmt 0 view .LVU9098
 33519 0000 034B     		ldr	r3, .L2417
5248:src/xeq.c     **** 		xeq_xrom2();
 33520              		.loc 1 5248 5 view .LVU9099
 33521 0002 93F91730 		ldrsb	r3, [r3, #23]
 33522 0006 002B     		cmp	r3, #0
 33523 0008 00DA     		bge	.L2416
5250:src/xeq.c     **** #endif
 33524              		.loc 1 5250 1 view .LVU9100
 33525 000a 7047     		bx	lr
 33526              	.L2416:
5249:src/xeq.c     **** }
 33527              		.loc 1 5249 3 is_stmt 1 view .LVU9101
 33528 000c FFF7FEBF 		b	xeq_xrom2
 33529              	.LVL2636:
 33530              	.L2418:
 33531              		.align	2
 33532              	.L2417:
 33533 0010 00000000 		.word	StateWhileOn
 33534              		.cfi_endproc
 33535              	.LFE247:
 33537              		.section	.text.dispatch_xrom,"ax",%progbits
 33538              		.align	1
 33539              		.p2align 2,,3
 33540              		.syntax unified
 33541              		.thumb
 33542              		.thumb_func
 33543              		.fpu fpv4-sp-d16
 33545              	dispatch_xrom:
 33546              	.LVL2637:
ARM GAS  /tmp/cciWh9P3.s 			page 843


 33547              	.LFB231:
4264:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 33548              		.loc 1 4264 1 view -0
 33549              		.cfi_startproc
 33550              		@ args = 0, pretend = 0, frame = 0
 33551              		@ frame_needed = 0, uses_anonymous_args = 0
4265:src/xeq.c     **** 	if (xp == NULL)
 33552              		.loc 1 4265 2 view .LVU9103
 33553              	.LBB4519:
 33554              	.LBI4519:
4247:src/xeq.c     **** {
 33555              		.loc 1 4247 24 view .LVU9104
 33556              	.LBB4520:
4249:src/xeq.c     **** 	if (xp < xrom)
 33557              		.loc 1 4249 2 view .LVU9105
4250:src/xeq.c     **** 		return NULL;
 33558              		.loc 1 4250 5 is_stmt 0 view .LVU9106
 33559 0000 1649     		ldr	r1, .L2430
4249:src/xeq.c     **** 	if (xp < xrom)
 33560              		.loc 1 4249 59 view .LVU9107
 33561 0002 20F00100 		bic	r0, r0, #1
 33562              	.LVL2638:
4250:src/xeq.c     **** 		return NULL;
 33563              		.loc 1 4250 2 is_stmt 1 view .LVU9108
4250:src/xeq.c     **** 		return NULL;
 33564              		.loc 1 4250 5 is_stmt 0 view .LVU9109
 33565 0006 8842     		cmp	r0, r1
 33566 0008 22D3     		bcc	.L2422
4254:src/xeq.c     **** 		return NULL;
 33567              		.loc 1 4254 2 is_stmt 1 view .LVU9110
4254:src/xeq.c     **** 		return NULL;
 33568              		.loc 1 4254 17 is_stmt 0 view .LVU9111
 33569 000a 154B     		ldr	r3, .L2430+4
 33570 000c 1B88     		ldrh	r3, [r3]
 33571 000e 01EB4303 		add	r3, r1, r3, lsl #1
4254:src/xeq.c     **** 		return NULL;
 33572              		.loc 1 4254 5 view .LVU9112
 33573 0012 9842     		cmp	r0, r3
 33574 0014 1CD2     		bcs	.L2422
 33575              	.LVL2639:
4254:src/xeq.c     **** 		return NULL;
 33576              		.loc 1 4254 5 view .LVU9113
 33577              	.LBE4520:
 33578              	.LBE4519:
4266:src/xeq.c     **** 		return 0;
 33579              		.loc 1 4266 2 is_stmt 1 view .LVU9114
4266:src/xeq.c     **** 		return 0;
 33580              		.loc 1 4266 5 is_stmt 0 view .LVU9115
 33581 0016 D0B1     		cbz	r0, .L2426
4269:src/xeq.c     **** 	XromRunning = 1;
 33582              		.loc 1 4269 2 is_stmt 1 view .LVU9116
4269:src/xeq.c     **** 	XromRunning = 1;
 33583              		.loc 1 4269 18 is_stmt 0 view .LVU9117
 33584 0018 124B     		ldr	r3, .L2430+8
 33585 001a 1B68     		ldr	r3, [r3]
4264:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 33586              		.loc 1 4264 1 view .LVU9118
ARM GAS  /tmp/cciWh9P3.s 			page 844


 33587 001c 70B5     		push	{r4, r5, r6, lr}
 33588              		.cfi_def_cfa_offset 16
 33589              		.cfi_offset 4, -16
 33590              		.cfi_offset 5, -12
 33591              		.cfi_offset 6, -8
 33592              		.cfi_offset 14, -4
4271:src/xeq.c     **** 	xeq_xrom();
 33593              		.loc 1 4271 9 view .LVU9119
 33594 001e 401A     		subs	r0, r0, r1
 33595              	.LVL2640:
4269:src/xeq.c     **** 	XromRunning = 1;
 33596              		.loc 1 4269 16 view .LVU9120
 33597 0020 114C     		ldr	r4, .L2430+12
4269:src/xeq.c     **** 	XromRunning = 1;
 33598              		.loc 1 4269 18 view .LVU9121
 33599 0022 B3F9DE67 		ldrsh	r6, [r3, #2014]
 33600 0026 2660     		str	r6, [r4]
4270:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33601              		.loc 1 4270 2 is_stmt 1 view .LVU9122
4271:src/xeq.c     **** 	xeq_xrom();
 33602              		.loc 1 4271 9 is_stmt 0 view .LVU9123
 33603 0028 4010     		asrs	r0, r0, #1
 33604              	.LVL2641:
4270:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33605              		.loc 1 4270 14 view .LVU9124
 33606 002a 0124     		movs	r4, #1
 33607 002c 0F4D     		ldr	r5, .L2430+16
4271:src/xeq.c     **** 	xeq_xrom();
 33608              		.loc 1 4271 2 view .LVU9125
 33609 002e B3F8E027 		ldrh	r2, [r3, #2016]
4270:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 33610              		.loc 1 4270 14 view .LVU9126
 33611 0032 2C60     		str	r4, [r5]
4271:src/xeq.c     **** 	xeq_xrom();
 33612              		.loc 1 4271 2 is_stmt 1 view .LVU9127
4271:src/xeq.c     **** 	xeq_xrom();
 33613              		.loc 1 4271 9 is_stmt 0 view .LVU9128
 33614 0034 0130     		adds	r0, r0, #1
4271:src/xeq.c     **** 	xeq_xrom();
 33615              		.loc 1 4271 2 view .LVU9129
 33616 0036 40F44040 		orr	r0, r0, #49152
 33617 003a 2146     		mov	r1, r4
 33618 003c FFF7FEFF 		bl	gsbgto
 33619              	.LVL2642:
4272:src/xeq.c     **** 	return 1;
 33620              		.loc 1 4272 2 is_stmt 1 view .LVU9130
 33621              	.LBB4521:
 33622              	.LBI4521:
5246:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 33623              		.loc 1 5246 6 view .LVU9131
 33624              	.LBB4522:
5248:src/xeq.c     **** 		xeq_xrom2();
 33625              		.loc 1 5248 2 view .LVU9132
5248:src/xeq.c     **** 		xeq_xrom2();
 33626              		.loc 1 5248 6 is_stmt 0 view .LVU9133
 33627 0040 0B4B     		ldr	r3, .L2430+20
5248:src/xeq.c     **** 		xeq_xrom2();
ARM GAS  /tmp/cciWh9P3.s 			page 845


 33628              		.loc 1 5248 5 view .LVU9134
 33629 0042 93F91730 		ldrsb	r3, [r3, #23]
 33630 0046 002B     		cmp	r3, #0
 33631 0048 04DA     		bge	.L2429
 33632              	.LBE4522:
 33633              	.LBE4521:
4273:src/xeq.c     **** }
 33634              		.loc 1 4273 9 view .LVU9135
 33635 004a 2046     		mov	r0, r4
 33636              	.LVL2643:
4274:src/xeq.c     **** 
 33637              		.loc 1 4274 1 view .LVU9136
 33638 004c 70BD     		pop	{r4, r5, r6, pc}
 33639              	.LVL2644:
 33640              	.L2426:
 33641              		.cfi_def_cfa_offset 0
 33642              		.cfi_restore 4
 33643              		.cfi_restore 5
 33644              		.cfi_restore 6
 33645              		.cfi_restore 14
4274:src/xeq.c     **** 
 33646              		.loc 1 4274 1 view .LVU9137
 33647 004e 7047     		bx	lr
 33648              	.LVL2645:
 33649              	.L2422:
4267:src/xeq.c     **** 	// set_lift();
 33650              		.loc 1 4267 10 view .LVU9138
 33651 0050 0020     		movs	r0, #0
 33652              	.LVL2646:
4267:src/xeq.c     **** 	// set_lift();
 33653              		.loc 1 4267 10 view .LVU9139
 33654 0052 7047     		bx	lr
 33655              	.LVL2647:
 33656              	.L2429:
 33657              		.cfi_def_cfa_offset 16
 33658              		.cfi_offset 4, -16
 33659              		.cfi_offset 5, -12
 33660              		.cfi_offset 6, -8
 33661              		.cfi_offset 14, -4
 33662              	.LBB4524:
 33663              	.LBB4523:
5249:src/xeq.c     **** }
 33664              		.loc 1 5249 3 is_stmt 1 view .LVU9140
 33665 0054 FFF7FEFF 		bl	xeq_xrom2
 33666              	.LVL2648:
 33667              	.LBE4523:
 33668              	.LBE4524:
4273:src/xeq.c     **** }
 33669              		.loc 1 4273 9 is_stmt 0 view .LVU9141
 33670 0058 2046     		mov	r0, r4
4274:src/xeq.c     **** 
 33671              		.loc 1 4274 1 view .LVU9142
 33672 005a 70BD     		pop	{r4, r5, r6, pc}
 33673              	.L2431:
 33674              		.align	2
 33675              	.L2430:
 33676 005c 00000000 		.word	xrom
ARM GAS  /tmp/cciWh9P3.s 			page 846


 33677 0060 00000000 		.word	xrom_size
 33678 0064 00000000 		.word	main_ram
 33679 0068 00000000 		.word	UserLocalRegs
 33680 006c 00000000 		.word	XromRunning
 33681 0070 00000000 		.word	StateWhileOn
 33682              		.cfi_endproc
 33683              	.LFE231:
 33685              		.section	.text.op_rs,"ax",%progbits
 33686              		.align	1
 33687              		.p2align 2,,3
 33688              		.global	op_rs
 33689              		.syntax unified
 33690              		.thumb
 33691              		.thumb_func
 33692              		.fpu fpv4-sp-d16
 33694              	op_rs:
 33695              	.LVL2649:
 33696              	.LFB250:
5356:src/xeq.c     **** #ifndef REALBUILD
 33697              		.loc 1 5356 27 is_stmt 1 view -0
 33698              		.cfi_startproc
 33699              		@ args = 0, pretend = 0, frame = 0
 33700              		@ frame_needed = 0, uses_anonymous_args = 0
5360:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 33701              		.loc 1 5360 2 view .LVU9144
 33702              	.LBB4525:
 33703              	.LBI4525:
 181:src/xeq.c     **** 	return isXROM(state_pc());
 33704              		.loc 1 181 5 view .LVU9145
 33705              	.LBB4526:
 182:src/xeq.c     **** }
 33706              		.loc 1 182 2 view .LVU9146
 33707              	.LBE4526:
 33708              	.LBE4525:
5356:src/xeq.c     **** #ifndef REALBUILD
 33709              		.loc 1 5356 27 is_stmt 0 view .LVU9147
 33710 0000 10B5     		push	{r4, lr}
 33711              		.cfi_def_cfa_offset 8
 33712              		.cfi_offset 4, -8
 33713              		.cfi_offset 14, -4
 33714              	.LBB4528:
 33715              	.LBB4527:
 182:src/xeq.c     **** }
 33716              		.loc 1 182 9 view .LVU9148
 33717 0002 1D4C     		ldr	r4, .L2442
 33718 0004 2268     		ldr	r2, [r4]
 33719 0006 B2F8E037 		ldrh	r3, [r2, #2016]
 33720              	.LBE4527:
 33721              	.LBE4528:
5360:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 33722              		.loc 1 5360 5 view .LVU9149
 33723 000a 9B0B     		lsrs	r3, r3, #14
 33724 000c 032B     		cmp	r3, #3
 33725 000e 20D0     		beq	.L2441
5370:src/xeq.c     **** 		set_running_off();
 33726              		.loc 1 5370 2 is_stmt 1 view .LVU9150
5370:src/xeq.c     **** 		set_running_off();
ARM GAS  /tmp/cciWh9P3.s 			page 847


 33727              		.loc 1 5370 6 is_stmt 0 view .LVU9151
 33728 0010 1A4B     		ldr	r3, .L2442+4
5370:src/xeq.c     **** 		set_running_off();
 33729              		.loc 1 5370 5 view .LVU9152
 33730 0012 1968     		ldr	r1, [r3]
 33731 0014 61B1     		cbz	r1, .L2436
5371:src/xeq.c     **** 	else {
 33732              		.loc 1 5371 3 is_stmt 1 view .LVU9153
 33733              	.LBB4529:
 33734              	.LBI4529:
5573:src/xeq.c     **** 	set_running_off_sst();
 33735              		.loc 1 5573 6 view .LVU9154
 33736              	.LBB4530:
5574:src/xeq.c     **** 	State.entryp = 0;
 33737              		.loc 1 5574 2 view .LVU9155
 33738              	.LBB4531:
 33739              	.LBI4531:
5565:src/xeq.c     **** 	Running = 0;
 33740              		.loc 1 5565 6 view .LVU9156
 33741              	.LBB4532:
5566:src/xeq.c     **** }
 33742              		.loc 1 5566 2 view .LVU9157
5566:src/xeq.c     **** }
 33743              		.loc 1 5566 10 is_stmt 0 view .LVU9158
 33744 0016 0021     		movs	r1, #0
 33745 0018 1960     		str	r1, [r3]
 33746              	.LBE4532:
 33747              	.LBE4531:
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 33748              		.loc 1 5575 2 is_stmt 1 view .LVU9159
5575:src/xeq.c     **** 	dot( RCL_annun, 0);
 33749              		.loc 1 5575 15 is_stmt 0 view .LVU9160
 33750 001a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 33751 001e 61F30413 		bfi	r3, r1, #4, #1
 33752 0022 82F8DD37 		strb	r3, [r2, #2013]
5576:src/xeq.c     **** }
 33753              		.loc 1 5576 2 is_stmt 1 view .LVU9161
 33754              	.LBE4530:
 33755              	.LBE4529:
5377:src/xeq.c     **** 
 33756              		.loc 1 5377 1 is_stmt 0 view .LVU9162
 33757 0026 BDE81040 		pop	{r4, lr}
 33758              		.cfi_remember_state
 33759              		.cfi_restore 14
 33760              		.cfi_restore 4
 33761              		.cfi_def_cfa_offset 0
 33762              	.LBB4534:
 33763              	.LBB4533:
5576:src/xeq.c     **** }
 33764              		.loc 1 5576 2 view .LVU9163
 33765 002a 8A20     		movs	r0, #138
 33766              	.LVL2650:
5576:src/xeq.c     **** }
 33767              		.loc 1 5576 2 view .LVU9164
 33768 002c FFF7FEBF 		b	dot
 33769              	.LVL2651:
 33770              	.L2436:
ARM GAS  /tmp/cciWh9P3.s 			page 848


 33771              		.cfi_restore_state
5576:src/xeq.c     **** }
 33772              		.loc 1 5576 2 view .LVU9165
 33773              	.LBE4533:
 33774              	.LBE4534:
5373:src/xeq.c     **** 		if (RetStkPtr == 0)
 33775              		.loc 1 5373 3 is_stmt 1 view .LVU9166
 33776 0030 FFF7FEFF 		bl	set_running_on
 33777              	.LVL2652:
5374:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 33778              		.loc 1 5374 3 view .LVU9167
5374:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 33779              		.loc 1 5374 7 is_stmt 0 view .LVU9168
 33780 0034 2368     		ldr	r3, [r4]
5374:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 33781              		.loc 1 5374 6 view .LVU9169
 33782 0036 B3F9E227 		ldrsh	r2, [r3, #2018]
 33783 003a 4AB9     		cbnz	r2, .L2432
5375:src/xeq.c     **** 	}
 33784              		.loc 1 5375 4 is_stmt 1 view .LVU9170
5375:src/xeq.c     **** 	}
 33785              		.loc 1 5375 10 is_stmt 0 view .LVU9171
 33786 003c 104A     		ldr	r2, .L2442+8
5375:src/xeq.c     **** 	}
 33787              		.loc 1 5375 26 view .LVU9172
 33788 003e B3F8E017 		ldrh	r1, [r3, #2016]
5375:src/xeq.c     **** 	}
 33789              		.loc 1 5375 10 view .LVU9173
 33790 0042 1268     		ldr	r2, [r2]
5375:src/xeq.c     **** 	}
 33791              		.loc 1 5375 24 view .LVU9174
 33792 0044 4FF6FF70 		movw	r0, #65535
 33793 0048 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 33794 004c 22F8021C 		strh	r1, [r2, #-2]	@ movhi
 33795              	.L2432:
5377:src/xeq.c     **** 
 33796              		.loc 1 5377 1 view .LVU9175
 33797 0050 10BD     		pop	{r4, pc}
 33798              	.LVL2653:
 33799              	.L2441:
5361:src/xeq.c     **** 			Running = XromRunning = 0;
 33800              		.loc 1 5361 3 is_stmt 1 view .LVU9176
5361:src/xeq.c     **** 			Running = XromRunning = 0;
 33801              		.loc 1 5361 7 is_stmt 0 view .LVU9177
 33802 0052 0C4B     		ldr	r3, .L2442+12
5361:src/xeq.c     **** 			Running = XromRunning = 0;
 33803              		.loc 1 5361 6 view .LVU9178
 33804 0054 93F91730 		ldrsb	r3, [r3, #23]
 33805 0058 002B     		cmp	r3, #0
 33806 005a 09DA     		bge	.L2434
5361:src/xeq.c     **** 			Running = XromRunning = 0;
 33807              		.loc 1 5361 24 discriminator 1 view .LVU9179
 33808 005c 074B     		ldr	r3, .L2442+4
5361:src/xeq.c     **** 			Running = XromRunning = 0;
 33809              		.loc 1 5361 32 discriminator 1 view .LVU9180
 33810 005e 0A4A     		ldr	r2, .L2442+16
 33811 0060 1868     		ldr	r0, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 849


 33812              	.LVL2654:
5361:src/xeq.c     **** 			Running = XromRunning = 0;
 33813              		.loc 1 5361 32 discriminator 1 view .LVU9181
 33814 0062 1168     		ldr	r1, [r2]
 33815 0064 0143     		orrs	r1, r0, r1
 33816 0066 03D0     		beq	.L2434
5362:src/xeq.c     **** 		}
 33817              		.loc 1 5362 4 is_stmt 1 view .LVU9182
5362:src/xeq.c     **** 		}
 33818              		.loc 1 5362 26 is_stmt 0 view .LVU9183
 33819 0068 0021     		movs	r1, #0
 33820 006a 1160     		str	r1, [r2]
5362:src/xeq.c     **** 		}
 33821              		.loc 1 5362 12 view .LVU9184
 33822 006c 1960     		str	r1, [r3]
5377:src/xeq.c     **** 
 33823              		.loc 1 5377 1 view .LVU9185
 33824 006e 10BD     		pop	{r4, pc}
 33825              	.L2434:
5365:src/xeq.c     **** 		}
 33826              		.loc 1 5365 4 is_stmt 1 view .LVU9186
5377:src/xeq.c     **** 
 33827              		.loc 1 5377 1 is_stmt 0 view .LVU9187
 33828 0070 BDE81040 		pop	{r4, lr}
 33829              		.cfi_restore 14
 33830              		.cfi_restore 4
 33831              		.cfi_def_cfa_offset 0
5365:src/xeq.c     **** 		}
 33832              		.loc 1 5365 4 view .LVU9188
 33833 0074 FFF7FEBF 		b	xeq_xrom2
 33834              	.LVL2655:
 33835              	.L2443:
 33836              		.align	2
 33837              	.L2442:
 33838 0078 00000000 		.word	main_ram
 33839 007c 00000000 		.word	Running
 33840 0080 00000000 		.word	RetStk
 33841 0084 00000000 		.word	StateWhileOn
 33842 0088 00000000 		.word	XromRunning
 33843              		.cfi_endproc
 33844              	.LFE250:
 33846              		.section	.text.xeqprog,"ax",%progbits
 33847              		.align	1
 33848              		.p2align 2,,3
 33849              		.global	xeqprog
 33850              		.syntax unified
 33851              		.thumb
 33852              		.thumb_func
 33853              		.fpu fpv4-sp-d16
 33855              	xeqprog:
 33856              	.LFB248:
5264:src/xeq.c     **** 	int state = 0;
 33857              		.loc 1 5264 1 is_stmt 1 view -0
 33858              		.cfi_startproc
 33859              		@ args = 0, pretend = 0, frame = 0
 33860              		@ frame_needed = 0, uses_anonymous_args = 0
5265:src/xeq.c     **** #ifdef DM42
ARM GAS  /tmp/cciWh9P3.s 			page 850


 33861              		.loc 1 5265 2 view .LVU9190
 33862              	.LVL2656:
5267:src/xeq.c     **** #else
 33863              		.loc 1 5267 2 view .LVU9191
5264:src/xeq.c     **** 	int state = 0;
 33864              		.loc 1 5264 1 is_stmt 0 view .LVU9192
 33865 0000 38B5     		push	{r3, r4, r5, lr}
 33866              		.cfi_def_cfa_offset 16
 33867              		.cfi_offset 3, -16
 33868              		.cfi_offset 4, -12
 33869              		.cfi_offset 5, -8
 33870              		.cfi_offset 14, -4
5267:src/xeq.c     **** #else
 33871              		.loc 1 5267 7 view .LVU9193
 33872 0002 1D4C     		ldr	r4, .L2469
 33873 0004 1D4D     		ldr	r5, .L2469+4
5267:src/xeq.c     **** #else
 33874              		.loc 1 5267 5 view .LVU9194
 33875 0006 2368     		ldr	r3, [r4]
 33876 0008 0BB9     		cbnz	r3, .L2445
5267:src/xeq.c     **** #else
 33877              		.loc 1 5267 15 discriminator 1 view .LVU9195
 33878 000a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 33879 000c E3B1     		cbz	r3, .L2450
 33880              	.L2445:
 33881              	.LBB4535:
5273:src/xeq.c     **** #else
 33882              		.loc 1 5273 4 is_stmt 1 view .LVU9196
 33883              	.LBB4536:
 33884              	.LBI4536:
1775:src/xeq.c     ****     int f, t;
 33885              		.loc 1 1775 6 view .LVU9197
 33886              	.LBB4537:
1776:src/xeq.c     ****     t = get_rtc_ticks();
 33887              		.loc 1 1776 5 view .LVU9198
1777:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 33888              		.loc 1 1777 5 view .LVU9199
1777:src/xeq.c     ****     f = ((t & 0xff)*10)>>8; // tenths of a second;
 33889              		.loc 1 1777 9 is_stmt 0 view .LVU9200
 33890 000e 1C4B     		ldr	r3, .L2469+8
 33891 0010 9847     		blx	r3
 33892              	.LVL2657:
1778:src/xeq.c     ****     return f;
 33893              		.loc 1 1778 5 is_stmt 1 view .LVU9201
1779:src/xeq.c     ****  }
 33894              		.loc 1 1779 5 view .LVU9202
1779:src/xeq.c     ****  }
 33895              		.loc 1 1779 5 is_stmt 0 view .LVU9203
 33896              	.LBE4537:
 33897              	.LBE4536:
5277:src/xeq.c     **** #else
 33898              		.loc 1 5277 3 is_stmt 1 view .LVU9204
5281:src/xeq.c     **** 		finish_display();
 33899              		.loc 1 5281 3 view .LVU9205
 33900              	.LBB4539:
 33901              	.LBB4538:
1778:src/xeq.c     ****     return f;
ARM GAS  /tmp/cciWh9P3.s 			page 851


 33902              		.loc 1 1778 13 is_stmt 0 view .LVU9206
 33903 0012 C1B2     		uxtb	r1, r0
1778:src/xeq.c     ****     return f;
 33904              		.loc 1 1778 20 view .LVU9207
 33905 0014 01EB8101 		add	r1, r1, r1, lsl #2
 33906              	.LBE4538:
 33907              	.LBE4539:
5281:src/xeq.c     **** 		finish_display();
 33908              		.loc 1 5281 3 view .LVU9208
 33909 0018 B1F5207F 		cmp	r1, #640
 33910 001c 2CBF     		ite	cs
 33911 001e 0021     		movcs	r1, #0
 33912 0020 0121     		movcc	r1, #1
 33913 0022 8A20     		movs	r0, #138
 33914              	.LVL2658:
5281:src/xeq.c     **** 		finish_display();
 33915              		.loc 1 5281 3 view .LVU9209
 33916 0024 FFF7FEFF 		bl	dot
 33917              	.LVL2659:
5282:src/xeq.c     **** #ifdef DM42
 33918              		.loc 1 5282 3 is_stmt 1 view .LVU9210
 33919 0028 FFF7FEFF 		bl	finish_display
 33920              	.LVL2660:
5284:src/xeq.c     **** #else		  
 33921              		.loc 1 5284 3 view .LVU9211
5284:src/xeq.c     **** #else		  
 33922              		.loc 1 5284 9 is_stmt 0 view .LVU9212
 33923 002c 06E0     		b	.L2447
 33924              	.L2467:
5284:src/xeq.c     **** #else		  
 33925              		.loc 1 5284 19 discriminator 1 view .LVU9213
 33926 002e 2368     		ldr	r3, [r4]
 33927 0030 53B1     		cbz	r3, .L2450
5288:src/xeq.c     **** 			if (is_key_pressed()) {
 33928              		.loc 1 5288 5 view .LVU9214
 33929 0032 FFF7FEFF 		bl	xeq_single
 33930              	.LVL2661:
5289:src/xeq.c     **** 				// Key press or heart beat
 33931              		.loc 1 5289 4 is_stmt 1 view .LVU9215
5289:src/xeq.c     **** 				// Key press or heart beat
 33932              		.loc 1 5289 8 is_stmt 0 view .LVU9216
 33933 0036 FFF7FEFF 		bl	is_key_pressed
 33934              	.LVL2662:
5289:src/xeq.c     **** 				// Key press or heart beat
 33935              		.loc 1 5289 7 view .LVU9217
 33936 003a 10B9     		cbnz	r0, .L2448
 33937              	.L2447:
5288:src/xeq.c     **** 			if (is_key_pressed()) {
 33938              		.loc 1 5288 5 is_stmt 1 view .LVU9218
5284:src/xeq.c     **** #else		  
 33939              		.loc 1 5284 9 view .LVU9219
5284:src/xeq.c     **** #else		  
 33940              		.loc 1 5284 10 is_stmt 0 view .LVU9220
 33941 003c 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5284:src/xeq.c     **** #else		  
 33942              		.loc 1 5284 9 view .LVU9221
 33943 003e 002B     		cmp	r3, #0
ARM GAS  /tmp/cciWh9P3.s 			page 852


 33944 0040 F5D0     		beq	.L2467
 33945              	.L2448:
 33946              	.LBE4535:
5297:src/xeq.c     **** #else
 33947              		.loc 1 5297 2 is_stmt 1 view .LVU9222
5297:src/xeq.c     **** #else
 33948              		.loc 1 5297 5 is_stmt 0 view .LVU9223
 33949 0042 2368     		ldr	r3, [r4]
 33950 0044 03B1     		cbz	r3, .L2450
 33951              	.L2444:
5314:src/xeq.c     **** 
 33952              		.loc 1 5314 1 view .LVU9224
 33953 0046 38BD     		pop	{r3, r4, r5, pc}
 33954              	.L2450:
5297:src/xeq.c     **** #else
 33955              		.loc 1 5297 2 is_stmt 1 view .LVU9225
5297:src/xeq.c     **** #else
 33956              		.loc 1 5297 19 is_stmt 0 view .LVU9226
 33957 0048 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5297:src/xeq.c     **** #else
 33958              		.loc 1 5297 16 view .LVU9227
 33959 004a 002B     		cmp	r3, #0
 33960 004c FBD1     		bne	.L2444
5302:src/xeq.c     **** 		ShowRPN = 1;	// display() may turn it off again
 33961              		.loc 1 5302 3 is_stmt 1 view .LVU9228
5303:src/xeq.c     **** 		display();
 33962              		.loc 1 5303 11 is_stmt 0 view .LVU9229
 33963 004e 0D4C     		ldr	r4, .L2469+12
5302:src/xeq.c     **** 		ShowRPN = 1;	// display() may turn it off again
 33964              		.loc 1 5302 3 view .LVU9230
 33965 0050 8A20     		movs	r0, #138
 33966 0052 FFF7FEFF 		bl	clr_dot
 33967              	.LVL2663:
5303:src/xeq.c     **** 		display();
 33968              		.loc 1 5303 3 is_stmt 1 view .LVU9231
5303:src/xeq.c     **** 		display();
 33969              		.loc 1 5303 11 is_stmt 0 view .LVU9232
 33970 0056 0123     		movs	r3, #1
 33971 0058 2360     		str	r3, [r4]
5304:src/xeq.c     **** 		if (ShowRPN) {
 33972              		.loc 1 5304 3 is_stmt 1 view .LVU9233
 33973 005a FFF7FEFF 		bl	display
 33974              	.LVL2664:
5305:src/xeq.c     **** 			set_dot(RPN);
 33975              		.loc 1 5305 3 view .LVU9234
5305:src/xeq.c     **** 			set_dot(RPN);
 33976              		.loc 1 5305 6 is_stmt 0 view .LVU9235
 33977 005e 2368     		ldr	r3, [r4]
 33978 0060 1BB9     		cbnz	r3, .L2468
 33979              	.L2452:
5311:src/xeq.c     **** #endif
 33980              		.loc 1 5311 8 is_stmt 1 view .LVU9236
5311:src/xeq.c     **** #endif
 33981              		.loc 1 5311 20 is_stmt 0 view .LVU9237
 33982 0062 094B     		ldr	r3, .L2469+16
 33983 0064 0122     		movs	r2, #1
 33984 0066 1A60     		str	r2, [r3]
ARM GAS  /tmp/cciWh9P3.s 			page 853


5314:src/xeq.c     **** 
 33985              		.loc 1 5314 1 view .LVU9238
 33986 0068 38BD     		pop	{r3, r4, r5, pc}
 33987              	.L2468:
5306:src/xeq.c     **** 			finish_display();
 33988              		.loc 1 5306 4 is_stmt 1 view .LVU9239
 33989 006a 8D20     		movs	r0, #141
 33990 006c FFF7FEFF 		bl	set_dot
 33991              	.LVL2665:
5307:src/xeq.c     **** 		}
 33992              		.loc 1 5307 4 view .LVU9240
 33993 0070 FFF7FEFF 		bl	finish_display
 33994              	.LVL2666:
 33995 0074 F5E7     		b	.L2452
 33996              	.L2470:
 33997 0076 00BF     		.align	2
 33998              	.L2469:
 33999 0078 00000000 		.word	Running
 34000 007c 00000000 		.word	Pause
 34001 0080 B9040008 		.word	134218937
 34002 0084 00000000 		.word	ShowRPN
 34003 0088 00000000 		.word	JustStopped
 34004              		.cfi_endproc
 34005              	.LFE248:
 34007              		.section	.text.xeq_sst_bst,"ax",%progbits
 34008              		.align	1
 34009              		.p2align 2,,3
 34010              		.global	xeq_sst_bst
 34011              		.syntax unified
 34012              		.thumb
 34013              		.thumb_func
 34014              		.fpu fpv4-sp-d16
 34016              	xeq_sst_bst:
 34017              	.LVL2667:
 34018              	.LFB249:
5319:src/xeq.c     **** 	opcode op;
 34019              		.loc 1 5319 1 view -0
 34020              		.cfi_startproc
 34021              		@ args = 0, pretend = 0, frame = 0
 34022              		@ frame_needed = 0, uses_anonymous_args = 0
5320:src/xeq.c     **** 
 34023              		.loc 1 5320 2 view .LVU9242
5322:src/xeq.c     **** 	if (kind == -1)
 34024              		.loc 1 5322 2 view .LVU9243
 34025              	.LBB4540:
 34026              	.LBI4540:
4201:src/xeq.c     **** 	// extern int IntMaxWindow;
 34027              		.loc 1 4201 6 view .LVU9244
 34028              	.LBB4541:
4204:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34029              		.loc 1 4204 2 view .LVU9245
 34030              	.LBE4541:
 34031              	.LBE4540:
5319:src/xeq.c     **** 	opcode op;
 34032              		.loc 1 5319 1 is_stmt 0 view .LVU9246
 34033 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 34034              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cciWh9P3.s 			page 854


 34035              		.cfi_offset 4, -24
 34036              		.cfi_offset 5, -20
 34037              		.cfi_offset 6, -16
 34038              		.cfi_offset 7, -12
 34039              		.cfi_offset 8, -8
 34040              		.cfi_offset 14, -4
 34041              	.LBB4544:
 34042              	.LBB4542:
4204:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34043              		.loc 1 4204 16 view .LVU9247
 34044 0004 254C     		ldr	r4, .L2484
 34045 0006 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4205:src/xeq.c     **** }
 34046              		.loc 1 4205 15 view .LVU9248
 34047 0008 0026     		movs	r6, #0
4204:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34048              		.loc 1 4204 16 view .LVU9249
 34049 000a 6FF3C503 		bfc	r3, #3, #3
 34050              	.LBE4542:
 34051              	.LBE4544:
5323:src/xeq.c     **** 		decpc();
 34052              		.loc 1 5323 5 view .LVU9250
 34053 000e 411C     		adds	r1, r0, #1
 34054              	.LBB4545:
 34055              	.LBB4543:
4204:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34056              		.loc 1 4204 16 view .LVU9251
 34057 0010 2375     		strb	r3, [r4, #20]
4205:src/xeq.c     **** }
 34058              		.loc 1 4205 2 is_stmt 1 view .LVU9252
4205:src/xeq.c     **** }
 34059              		.loc 1 4205 15 is_stmt 0 view .LVU9253
 34060 0012 6674     		strb	r6, [r4, #17]
 34061              	.LBE4543:
 34062              	.LBE4545:
5323:src/xeq.c     **** 		decpc();
 34063              		.loc 1 5323 2 is_stmt 1 view .LVU9254
5323:src/xeq.c     **** 		decpc();
 34064              		.loc 1 5323 5 is_stmt 0 view .LVU9255
 34065 0014 30D0     		beq	.L2480
5326:src/xeq.c     **** 		// Display the step
 34066              		.loc 1 5326 2 is_stmt 1 view .LVU9256
5326:src/xeq.c     **** 		// Display the step
 34067              		.loc 1 5326 6 is_stmt 0 view .LVU9257
 34068 0016 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5326:src/xeq.c     **** 		// Display the step
 34069              		.loc 1 5326 5 view .LVU9258
 34070 0018 5B06     		lsls	r3, r3, #25
 34071 001a 0546     		mov	r5, r0
 34072 001c 08D4     		bmi	.L2481
5345:src/xeq.c     **** 		// Key down in program mode
 34073              		.loc 1 5345 7 is_stmt 1 view .LVU9259
5345:src/xeq.c     **** 		// Key down in program mode
 34074              		.loc 1 5345 10 is_stmt 0 view .LVU9260
 34075 001e 08B1     		cbz	r0, .L2482
 34076              	.LVL2668:
 34077              	.L2471:
ARM GAS  /tmp/cciWh9P3.s 			page 855


5350:src/xeq.c     **** 
 34078              		.loc 1 5350 1 view .LVU9261
 34079 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34080              	.LVL2669:
 34081              	.L2482:
5347:src/xeq.c     **** 		OpCode = 0;
 34082              		.loc 1 5347 3 is_stmt 1 view .LVU9262
 34083 0024 FFF7FEFF 		bl	incpc
 34084              	.LVL2670:
5348:src/xeq.c     **** 	}
 34085              		.loc 1 5348 3 view .LVU9263
5348:src/xeq.c     **** 	}
 34086              		.loc 1 5348 10 is_stmt 0 view .LVU9264
 34087 0028 1D4B     		ldr	r3, .L2484+4
 34088 002a 1D60     		str	r5, [r3]
5350:src/xeq.c     **** 
 34089              		.loc 1 5350 1 view .LVU9265
 34090 002c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34091              	.LVL2671:
 34092              	.L2481:
5328:src/xeq.c     **** 		print_step(op);
 34093              		.loc 1 5328 3 is_stmt 1 view .LVU9266
5328:src/xeq.c     **** 		print_step(op);
 34094              		.loc 1 5328 16 is_stmt 0 view .LVU9267
 34095 0030 1C4B     		ldr	r3, .L2484+8
 34096 0032 1B68     		ldr	r3, [r3]
5328:src/xeq.c     **** 		print_step(op);
 34097              		.loc 1 5328 8 view .LVU9268
 34098 0034 B3F8E007 		ldrh	r0, [r3, #2016]
 34099              	.LVL2672:
5328:src/xeq.c     **** 		print_step(op);
 34100              		.loc 1 5328 8 view .LVU9269
 34101 0038 FFF7FEFF 		bl	getprog
 34102              	.LVL2673:
 34103 003c 0746     		mov	r7, r0
 34104              	.LVL2674:
5329:src/xeq.c     **** 		if (kind == 1) {
 34105              		.loc 1 5329 3 is_stmt 1 view .LVU9270
 34106 003e FFF7FEFF 		bl	print_step
 34107              	.LVL2675:
5330:src/xeq.c     **** 			// Execute the step on key up
 34108              		.loc 1 5330 3 view .LVU9271
5330:src/xeq.c     **** 			// Execute the step on key up
 34109              		.loc 1 5330 6 is_stmt 0 view .LVU9272
 34110 0042 012D     		cmp	r5, #1
 34111 0044 ECD1     		bne	.L2471
5333:src/xeq.c     **** #endif
 34112              		.loc 1 5333 4 is_stmt 1 view .LVU9273
5333:src/xeq.c     **** #endif
 34113              		.loc 1 5333 15 is_stmt 0 view .LVU9274
 34114 0046 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34115              	.LBB4546:
 34116              	.LBB4547:
5570:src/xeq.c     **** }
 34117              		.loc 1 5570 10 view .LVU9275
 34118 0048 DFF85C80 		ldr	r8, .L2484+12
 34119              	.LBE4547:
ARM GAS  /tmp/cciWh9P3.s 			page 856


 34120              	.LBE4546:
5333:src/xeq.c     **** #endif
 34121              		.loc 1 5333 15 view .LVU9276
 34122 004c 43F00203 		orr	r3, r3, #2
 34123 0050 2376     		strb	r3, [r4, #24]
5335:src/xeq.c     **** 			incpc();
 34124              		.loc 1 5335 4 is_stmt 1 view .LVU9277
 34125              	.LBB4549:
 34126              	.LBI4546:
5569:src/xeq.c     **** 	Running = 1;
 34127              		.loc 1 5569 6 view .LVU9278
 34128              	.LBB4548:
5570:src/xeq.c     **** }
 34129              		.loc 1 5570 2 view .LVU9279
5570:src/xeq.c     **** }
 34130              		.loc 1 5570 10 is_stmt 0 view .LVU9280
 34131 0052 C8F80050 		str	r5, [r8]
 34132              	.LBE4548:
 34133              	.LBE4549:
5336:src/xeq.c     **** 			xeq(op);
 34134              		.loc 1 5336 4 is_stmt 1 view .LVU9281
 34135 0056 FFF7FEFF 		bl	incpc
 34136              	.LVL2676:
5337:src/xeq.c     **** #ifndef REALBUILD
 34137              		.loc 1 5337 4 view .LVU9282
 34138 005a 3846     		mov	r0, r7
 34139 005c FFF7FEFF 		bl	xeq
 34140              	.LVL2677:
5339:src/xeq.c     **** #endif
 34141              		.loc 1 5339 4 view .LVU9283
5339:src/xeq.c     **** #endif
 34142              		.loc 1 5339 15 is_stmt 0 view .LVU9284
 34143 0060 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34144              	.LBB4550:
 34145              	.LBB4551:
5248:src/xeq.c     **** 		xeq_xrom2();
 34146              		.loc 1 5248 5 view .LVU9285
 34147 0062 94F91720 		ldrsb	r2, [r4, #23]
 34148              	.LBE4551:
 34149              	.LBE4550:
5339:src/xeq.c     **** #endif
 34150              		.loc 1 5339 15 view .LVU9286
 34151 0066 66F34103 		bfi	r3, r6, #1, #1
 34152              	.LBB4555:
 34153              	.LBB4552:
5248:src/xeq.c     **** 		xeq_xrom2();
 34154              		.loc 1 5248 5 view .LVU9287
 34155 006a 002A     		cmp	r2, #0
 34156              	.LBE4552:
 34157              	.LBE4555:
5339:src/xeq.c     **** #endif
 34158              		.loc 1 5339 15 view .LVU9288
 34159 006c 2376     		strb	r3, [r4, #24]
5341:src/xeq.c     **** 			set_running_off_sst();
 34160              		.loc 1 5341 4 is_stmt 1 view .LVU9289
 34161              	.LBB4556:
 34162              	.LBI4550:
ARM GAS  /tmp/cciWh9P3.s 			page 857


5246:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34163              		.loc 1 5246 6 view .LVU9290
 34164              	.LBB4553:
5248:src/xeq.c     **** 		xeq_xrom2();
 34165              		.loc 1 5248 2 view .LVU9291
5248:src/xeq.c     **** 		xeq_xrom2();
 34166              		.loc 1 5248 5 is_stmt 0 view .LVU9292
 34167 006e 12DA     		bge	.L2483
 34168              	.L2478:
 34169              	.LBE4553:
 34170              	.LBE4556:
5342:src/xeq.c     **** 		}
 34171              		.loc 1 5342 4 is_stmt 1 view .LVU9293
 34172              	.LBB4557:
 34173              	.LBI4557:
5565:src/xeq.c     **** 	Running = 0;
 34174              		.loc 1 5565 6 view .LVU9294
 34175              	.LBB4558:
5566:src/xeq.c     **** }
 34176              		.loc 1 5566 2 view .LVU9295
5566:src/xeq.c     **** }
 34177              		.loc 1 5566 10 is_stmt 0 view .LVU9296
 34178 0070 0023     		movs	r3, #0
 34179 0072 C8F80030 		str	r3, [r8]
5567:src/xeq.c     **** 
 34180              		.loc 1 5567 1 view .LVU9297
 34181 0076 D3E7     		b	.L2471
 34182              	.LVL2678:
 34183              	.L2480:
5567:src/xeq.c     **** 
 34184              		.loc 1 5567 1 view .LVU9298
 34185              	.LBE4558:
 34186              	.LBE4557:
5324:src/xeq.c     **** 
 34187              		.loc 1 5324 3 is_stmt 1 view .LVU9299
 34188 0078 FFF7FEFF 		bl	decpc
 34189              	.LVL2679:
5326:src/xeq.c     **** 		// Display the step
 34190              		.loc 1 5326 2 view .LVU9300
5326:src/xeq.c     **** 		// Display the step
 34191              		.loc 1 5326 6 is_stmt 0 view .LVU9301
 34192 007c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5326:src/xeq.c     **** 		// Display the step
 34193              		.loc 1 5326 5 view .LVU9302
 34194 007e 5A06     		lsls	r2, r3, #25
 34195 0080 CED5     		bpl	.L2471
5328:src/xeq.c     **** 		print_step(op);
 34196              		.loc 1 5328 3 is_stmt 1 view .LVU9303
5328:src/xeq.c     **** 		print_step(op);
 34197              		.loc 1 5328 16 is_stmt 0 view .LVU9304
 34198 0082 084B     		ldr	r3, .L2484+8
 34199 0084 1B68     		ldr	r3, [r3]
5328:src/xeq.c     **** 		print_step(op);
 34200              		.loc 1 5328 8 view .LVU9305
 34201 0086 B3F8E007 		ldrh	r0, [r3, #2016]
 34202 008a FFF7FEFF 		bl	getprog
 34203              	.LVL2680:
ARM GAS  /tmp/cciWh9P3.s 			page 858


5329:src/xeq.c     **** 		if (kind == 1) {
 34204              		.loc 1 5329 3 is_stmt 1 view .LVU9306
5350:src/xeq.c     **** 
 34205              		.loc 1 5350 1 is_stmt 0 view .LVU9307
 34206 008e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 34207              		.cfi_remember_state
 34208              		.cfi_restore 14
 34209              		.cfi_restore 8
 34210              		.cfi_restore 7
 34211              		.cfi_restore 6
 34212              		.cfi_restore 5
 34213              		.cfi_restore 4
 34214              		.cfi_def_cfa_offset 0
5329:src/xeq.c     **** 		if (kind == 1) {
 34215              		.loc 1 5329 3 view .LVU9308
 34216 0092 FFF7FEBF 		b	print_step
 34217              	.LVL2681:
 34218              	.L2483:
 34219              		.cfi_restore_state
 34220              	.LBB4559:
 34221              	.LBB4554:
5249:src/xeq.c     **** }
 34222              		.loc 1 5249 3 is_stmt 1 view .LVU9309
 34223 0096 FFF7FEFF 		bl	xeq_xrom2
 34224              	.LVL2682:
 34225 009a E9E7     		b	.L2478
 34226              	.L2485:
 34227              		.align	2
 34228              	.L2484:
 34229 009c 00000000 		.word	StateWhileOn
 34230 00a0 00000000 		.word	OpCode
 34231 00a4 00000000 		.word	main_ram
 34232 00a8 00000000 		.word	Running
 34233              	.LBE4554:
 34234              	.LBE4559:
 34235              		.cfi_endproc
 34236              	.LFE249:
 34238              		.section	.text.init_34s,"ax",%progbits
 34239              		.align	1
 34240              		.p2align 2,,3
 34241              		.global	init_34s
 34242              		.syntax unified
 34243              		.thumb
 34244              		.thumb_func
 34245              		.fpu fpv4-sp-d16
 34247              	init_34s:
 34248              	.LFB271:
6095:src/xeq.c     **** 
6096:src/xeq.c     **** 
6097:src/xeq.c     **** /*
6098:src/xeq.c     ****  *  Debugging output for the console version
6099:src/xeq.c     ****  */
6100:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(WP34STEST)
6101:src/xeq.c     **** extern unsigned char remap_chars(unsigned char ch);
6102:src/xeq.c     **** 
6103:src/xeq.c     **** static int compare(s_opcode a1, s_opcode a2, int cata) {
6104:src/xeq.c     **** 	char b1[16], b2[16];
ARM GAS  /tmp/cciWh9P3.s 			page 859


6105:src/xeq.c     **** 	const unsigned char *s1, *s2;
6106:src/xeq.c     **** 	int i;
6107:src/xeq.c     **** 
6108:src/xeq.c     **** 	xset(b1, 0, sizeof(b1));
6109:src/xeq.c     **** 	xset(b2, 0, sizeof(b2));
6110:src/xeq.c     **** 	s1 = (unsigned char *)catcmd(a1, b1);
6111:src/xeq.c     **** 	s2 = (unsigned char *)catcmd(a2, b2);
6112:src/xeq.c     **** 	if (*s1 == COMPLEX_PREFIX) s1++;
6113:src/xeq.c     **** 	if (*s2 == COMPLEX_PREFIX) s2++;
6114:src/xeq.c     **** 
6115:src/xeq.c     **** 	for (i=0;;i++) {
6116:src/xeq.c     **** 		unsigned char c1 = *s1++;
6117:src/xeq.c     **** 		unsigned char c2 = *s2++;
6118:src/xeq.c     **** 		c1 = remap_chars(c1);
6119:src/xeq.c     **** 		c2 = remap_chars(c2);
6120:src/xeq.c     **** 
6121:src/xeq.c     **** 		if (c1 != c2) {
6122:src/xeq.c     **** 			if (c1 > c2) {
6123:src/xeq.c     **** 				return 1;
6124:src/xeq.c     **** 			}
6125:src/xeq.c     **** 			return 0;
6126:src/xeq.c     **** 		} else if (c1 == '\0')
6127:src/xeq.c     **** 			break;
6128:src/xeq.c     **** 	}
6129:src/xeq.c     **** 	return 0;
6130:src/xeq.c     **** }
6131:src/xeq.c     **** 
6132:src/xeq.c     **** static void check_cat(const enum catalogues cata, const char *name) {
6133:src/xeq.c     **** 	int i;
6134:src/xeq.c     **** 	char b1[16], b2[16];
6135:src/xeq.c     **** 	const int oldcata = State2.catalogue;
6136:src/xeq.c     **** 	int n;
6137:src/xeq.c     **** 
6138:src/xeq.c     **** 	State2.catalogue = cata;
6139:src/xeq.c     **** 	n = current_catalogue_max();
6140:src/xeq.c     **** 	for (i=1; i<n; i++) {
6141:src/xeq.c     **** 		opcode cold = current_catalogue(i-1);
6142:src/xeq.c     **** 		opcode c = current_catalogue(i);
6143:src/xeq.c     **** 		if (compare(cold, c, cata))
6144:src/xeq.c     **** 			error("catalogue %s row %04x / %04x  %d / %d: %04o / %04o (%s / %s)", name, cold, c, i-1, i,
6145:src/xeq.c     **** 					0xff & cold, 0xff & c,
6146:src/xeq.c     **** 					catcmd(cold, b1), catcmd(c, b2));
6147:src/xeq.c     **** 	}
6148:src/xeq.c     **** 	State2.catalogue = oldcata;
6149:src/xeq.c     **** }
6150:src/xeq.c     **** 
6151:src/xeq.c     **** static void check_const_cat(void) {
6152:src/xeq.c     **** 	int i;
6153:src/xeq.c     **** 	char b1[16], b2[16];
6154:src/xeq.c     **** 	char p1[64], p2[64];
6155:src/xeq.c     **** 
6156:src/xeq.c     **** 	for (i=1; i<NUM_CONSTS_CAT; i++) {
6157:src/xeq.c     **** 		if (compare(CONST(i-1), CONST(i), 0)) {
6158:src/xeq.c     **** 			prettify(catcmd(CONST(i-1), b1), p1, 0);
6159:src/xeq.c     **** 			prettify(catcmd(CONST(i), b2), p2, 0);
6160:src/xeq.c     **** 			error("constants row %d / %d: %s / %s", i, i+1, p1, p2);
6161:src/xeq.c     **** 		}
ARM GAS  /tmp/cciWh9P3.s 			page 860


6162:src/xeq.c     **** 	}
6163:src/xeq.c     **** }
6164:src/xeq.c     **** 
6165:src/xeq.c     **** static void bad_table(const char *t, int row, const char *n, int nlen) {
6166:src/xeq.c     **** 	char buf[64], name[20];
6167:src/xeq.c     **** 	int i;
6168:src/xeq.c     **** 
6169:src/xeq.c     **** 	for (i=0; i<nlen; i++)
6170:src/xeq.c     **** 		name[i] = n[i];
6171:src/xeq.c     **** 	name[nlen] = '\0';
6172:src/xeq.c     **** 	prettify(name, buf, 0);
6173:src/xeq.c     **** 	error("%s table row %d: %6s", t, row, buf);
6174:src/xeq.c     **** }
6175:src/xeq.c     **** 
6176:src/xeq.c     **** #endif
6177:src/xeq.c     **** 
6178:src/xeq.c     **** /* Main initialisation routine that sets things up for us.
6179:src/xeq.c     ****  * Returns a nonzero result if it has cleared ram.
6180:src/xeq.c     ****  */
6181:src/xeq.c     **** int init_34s(void)
6182:src/xeq.c     **** {
 34249              		.loc 1 6182 1 view -0
 34250              		.cfi_startproc
 34251              		@ args = 0, pretend = 0, frame = 0
 34252              		@ frame_needed = 0, uses_anonymous_args = 0
6183:src/xeq.c     **** 	const int cleared = checksum_all();
 34253              		.loc 1 6183 2 view .LVU9311
6182:src/xeq.c     **** 	const int cleared = checksum_all();
 34254              		.loc 1 6182 1 is_stmt 0 view .LVU9312
 34255 0000 10B5     		push	{r4, lr}
 34256              		.cfi_def_cfa_offset 8
 34257              		.cfi_offset 4, -8
 34258              		.cfi_offset 14, -4
 34259              		.loc 1 6183 22 view .LVU9313
 34260 0002 FFF7FEFF 		bl	checksum_ram
 34261              	.LVL2683:
6184:src/xeq.c     **** 	if (cleared) {
 34262              		.loc 1 6184 2 is_stmt 1 view .LVU9314
 34263              		.loc 1 6184 5 is_stmt 0 view .LVU9315
 34264 0006 0446     		mov	r4, r0
 34265 0008 58B9     		cbnz	r0, .L2492
 34266              	.LVL2684:
 34267              	.L2487:
6185:src/xeq.c     **** 		reset();
6186:src/xeq.c     **** 	}
6187:src/xeq.c     **** 	init_state();
 34268              		.loc 1 6187 2 is_stmt 1 view .LVU9316
 34269 000a FFF7FEFF 		bl	init_state
 34270              	.LVL2685:
6188:src/xeq.c     **** 	xeq_init_contexts();
 34271              		.loc 1 6188 2 view .LVU9317
 34272 000e FFF7FEFF 		bl	xeq_init_contexts
 34273              	.LVL2686:
6189:src/xeq.c     **** 	ShowRPN = 1;
 34274              		.loc 1 6189 2 view .LVU9318
 34275              		.loc 1 6189 10 is_stmt 0 view .LVU9319
 34276 0012 054B     		ldr	r3, .L2493
ARM GAS  /tmp/cciWh9P3.s 			page 861


 34277 0014 0122     		movs	r2, #1
6190:src/xeq.c     **** 	set_dot(RPN);
 34278              		.loc 1 6190 2 view .LVU9320
 34279 0016 8D20     		movs	r0, #141
6189:src/xeq.c     **** 	ShowRPN = 1;
 34280              		.loc 1 6189 10 view .LVU9321
 34281 0018 1A60     		str	r2, [r3]
 34282              		.loc 1 6190 2 is_stmt 1 view .LVU9322
 34283 001a FFF7FEFF 		bl	set_dot
 34284              	.LVL2687:
6191:src/xeq.c     **** 
6192:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
6193:src/xeq.c     **** 	StopWatchRunning = 0;
6194:src/xeq.c     **** #endif
6195:src/xeq.c     **** #if defined(CONSOLE) && !defined(WP34STEST) && defined(DEBUG)
6196:src/xeq.c     **** 	{
6197:src/xeq.c     **** 		int i;
6198:src/xeq.c     **** 	/* Sanity check the function table indices.
6199:src/xeq.c     **** 	 * These indicies must correspond exactly with the enum definition.
6200:src/xeq.c     **** 	 * This code validates that this is true and prints error messages
6201:src/xeq.c     **** 	 * if it isn't.
6202:src/xeq.c     **** 	 */
6203:src/xeq.c     **** 	for (i=0; i<NUM_MONADIC; i++)
6204:src/xeq.c     **** 		if (monfuncs[i].n != i)
6205:src/xeq.c     **** 			bad_table("monadic function", i, monfuncs[i].fname, NAME_LEN);
6206:src/xeq.c     **** 	for (i=0; i<NUM_DYADIC; i++)
6207:src/xeq.c     **** 		if (dyfuncs[i].n != i)
6208:src/xeq.c     **** 			bad_table("dyadic function", i, dyfuncs[i].fname, NAME_LEN);
6209:src/xeq.c     **** 	for (i=0; i<NUM_TRIADIC; i++)
6210:src/xeq.c     **** 		if (trifuncs[i].n != i)
6211:src/xeq.c     **** 			bad_table("triadic function", i, trifuncs[i].fname, NAME_LEN);
6212:src/xeq.c     **** 	for (i=0; i<NUM_NILADIC; i++)
6213:src/xeq.c     **** 		if (niladics[i].n != i)
6214:src/xeq.c     **** 			bad_table("niladic function", i, niladics[i].nname, NAME_LEN);
6215:src/xeq.c     **** 	for (i=0; i<NUM_RARG; i++)
6216:src/xeq.c     **** 		if (argcmds[i].n != i)
6217:src/xeq.c     **** 			bad_table("argument command", i, argcmds[i].cmd, NAME_LEN);
6218:src/xeq.c     **** 	for (i=0; i<NUM_MULTI; i++)
6219:src/xeq.c     **** 		if (multicmds[i].n != i)
6220:src/xeq.c     **** 			bad_table("multi command", i, multicmds[i].cmd, NAME_LEN);
6221:src/xeq.c     **** 	check_const_cat();
6222:src/xeq.c     **** 	check_cat(CATALOGUE_COMPLEX, "complex");
6223:src/xeq.c     **** 	check_cat(CATALOGUE_STATS, "statistics");
6224:src/xeq.c     **** 	check_cat(CATALOGUE_SUMS, "summations");
6225:src/xeq.c     **** 	check_cat(CATALOGUE_PROB, "probability");
6226:src/xeq.c     **** 	check_cat(CATALOGUE_PROG, "programme");
6227:src/xeq.c     **** 	check_cat(CATALOGUE_MODE, "mode");
6228:src/xeq.c     **** 	check_cat(CATALOGUE_TEST, "tests");
6229:src/xeq.c     **** 	check_cat(CATALOGUE_INT, "int");
6230:src/xeq.c     **** 	check_cat(CATALOGUE_MATRIX, "matrix");
6231:src/xeq.c     **** 	/*
6232:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA, "alpha");
6233:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_LETTERS, "alpha special upper case letters");
6234:src/xeq.c     **** 	// check_cat(CATALOGUE_ALPHA_LETTERS_LOWER, "alpha special lower letters");
6235:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SUBSCRIPTS, "alpha subscripts");
6236:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SYMBOLS, "alpha symbols");
6237:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_COMPARES, "alpha compares");
ARM GAS  /tmp/cciWh9P3.s 			page 862


6238:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_ARROWS, "alpha arrows");
6239:src/xeq.c     **** 	*/
6240:src/xeq.c     **** 	check_cat(CATALOGUE_CONV, "conversion");
6241:src/xeq.c     **** 	check_cat(CATALOGUE_NORMAL, "float");
6242:src/xeq.c     **** #ifdef INCLUDE_INTERNAL_CATALOGUE
6243:src/xeq.c     **** 	check_cat(CATALOGUE_INTERNAL, "internal");
6244:src/xeq.c     **** #endif
6245:src/xeq.c     ****         if (sizeof(unsigned long long int) != sizeof(UState))
6246:src/xeq.c     ****             error("sizeof register (%u) != sizeof user state (%u)\n", sizeof(unsigned long long int
6247:src/xeq.c     **** 	}
6248:src/xeq.c     **** #endif
6249:src/xeq.c     **** 	return cleared;
 34285              		.loc 1 6249 2 view .LVU9323
6250:src/xeq.c     **** }
 34286              		.loc 1 6250 1 is_stmt 0 view .LVU9324
 34287 001e 2046     		mov	r0, r4
 34288 0020 10BD     		pop	{r4, pc}
 34289              	.LVL2688:
 34290              	.L2492:
6185:src/xeq.c     **** 	}
 34291              		.loc 1 6185 3 is_stmt 1 view .LVU9325
 34292 0022 FFF7FEFF 		bl	reset
 34293              	.LVL2689:
6185:src/xeq.c     **** 	}
 34294              		.loc 1 6185 3 is_stmt 0 view .LVU9326
 34295 0026 F0E7     		b	.L2487
 34296              	.L2494:
 34297              		.align	2
 34298              	.L2493:
 34299 0028 00000000 		.word	ShowRPN
 34300              		.cfi_endproc
 34301              	.LFE271:
 34303              		.section	.rodata.paste_raw_x.str1.4,"aMS",%progbits,1
 34304              		.align	2
 34305              	.LC9:
 34306 0000 0D0A0920 		.ascii	"\015\012\011 :;\000"
 34306      3A3B00
 34307              		.section	.text.paste_raw_x,"ax",%progbits
 34308              		.align	1
 34309              		.p2align 2,,3
 34310              		.global	paste_raw_x
 34311              		.syntax unified
 34312              		.thumb
 34313              		.thumb_func
 34314              		.fpu fpv4-sp-d16
 34316              	paste_raw_x:
 34317              	.LVL2690:
 34318              	.LFB272:
6251:src/xeq.c     **** 
6252:src/xeq.c     **** #ifndef REALBUILD
6253:src/xeq.c     **** 
6254:src/xeq.c     **** #include "string.h"
6255:src/xeq.c     **** 
6256:src/xeq.c     **** void paste_raw_x(const char *in)
6257:src/xeq.c     **** {
 34319              		.loc 1 6257 1 is_stmt 1 view -0
 34320              		.cfi_startproc
ARM GAS  /tmp/cciWh9P3.s 			page 863


 34321              		@ args = 0, pretend = 0, frame = 40
 34322              		@ frame_needed = 0, uses_anonymous_args = 0
6258:src/xeq.c     **** 	char *buffer = strdup( in );
 34323              		.loc 1 6258 2 view .LVU9328
6257:src/xeq.c     **** 	char *buffer = strdup( in );
 34324              		.loc 1 6257 1 is_stmt 0 view .LVU9329
 34325 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 34326              		.cfi_def_cfa_offset 32
 34327              		.cfi_offset 4, -32
 34328              		.cfi_offset 5, -28
 34329              		.cfi_offset 6, -24
 34330              		.cfi_offset 7, -20
 34331              		.cfi_offset 8, -16
 34332              		.cfi_offset 9, -12
 34333              		.cfi_offset 10, -8
 34334              		.cfi_offset 14, -4
 34335 0004 8AB0     		sub	sp, sp, #40
 34336              		.cfi_def_cfa_offset 72
 34337              		.loc 1 6258 17 view .LVU9330
 34338 0006 FFF7FEFF 		bl	strdup
 34339              	.LVL2691:
6259:src/xeq.c     **** 
6260:src/xeq.c     **** 	if ( buffer ) {
 34340              		.loc 1 6260 2 is_stmt 1 view .LVU9331
 34341              		.loc 1 6260 5 is_stmt 0 view .LVU9332
 34342 000a 0028     		cmp	r0, #0
 34343 000c 5BD0     		beq	.L2496
 34344              	.LBB4560:
6261:src/xeq.c     **** 		static const char *delim = "\r\n\t :;";
 34345              		.loc 1 6261 3 is_stmt 1 view .LVU9333
6262:src/xeq.c     **** 		char *p = strtok( buffer, delim );
 34346              		.loc 1 6262 3 view .LVU9334
 34347              		.loc 1 6262 13 is_stmt 0 view .LVU9335
 34348 000e 3749     		ldr	r1, .L2526
 34349 0010 8146     		mov	r9, r0
 34350 0012 FFF7FEFF 		bl	strtok
 34351              	.LVL2692:
 34352              		.loc 1 6262 13 view .LVU9336
 34353 0016 0446     		mov	r4, r0
 34354              	.LVL2693:
6263:src/xeq.c     **** 		process_cmdline();
 34355              		.loc 1 6263 3 is_stmt 1 view .LVU9337
 34356 0018 FFF7FEFF 		bl	process_cmdline
 34357              	.LVL2694:
6264:src/xeq.c     **** 		while ( p ) {
 34358              		.loc 1 6264 3 view .LVU9338
 34359              		.loc 1 6264 9 view .LVU9339
 34360 001c 002C     		cmp	r4, #0
 34361 001e 4FD0     		beq	.L2504
 34362 0020 334E     		ldr	r6, .L2526+4
 34363              	.LBB4561:
 34364              	.LBB4562:
6265:src/xeq.c     **** 			char *pp = strchr( p, ',' );
6266:src/xeq.c     **** 			if ( pp ) {
6267:src/xeq.c     **** 				*pp = '.';
6268:src/xeq.c     **** 			}
6269:src/xeq.c     **** 			if (is_intmode()) {
ARM GAS  /tmp/cciWh9P3.s 			page 864


6270:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
6271:src/xeq.c     **** 				lift_if_enabled();
6272:src/xeq.c     **** 				set_lift();
6273:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
6274:src/xeq.c     **** 			} else {
6275:src/xeq.c     **** 				decNumber x;
6276:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 34365              		.loc 1 6276 5 is_stmt 0 view .LVU9340
 34366 0022 DFF8D880 		ldr	r8, .L2526+16
 34367              	.LBB4563:
 34368              	.LBB4564:
 34369              	.LBB4565:
 34370              	.LBB4566:
 734:src/xeq.c     **** }
 34371              		.loc 1 734 15 view .LVU9341
 34372 0026 334D     		ldr	r5, .L2526+8
 34373              	.LBE4566:
 34374              	.LBE4565:
 34375              	.LBE4564:
 34376              	.LBE4563:
 34377              	.LBE4562:
6277:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
6278:src/xeq.c     **** 					lift_if_enabled();
6279:src/xeq.c     **** 					set_lift();
6280:src/xeq.c     **** 					setX(&x);
6281:src/xeq.c     **** 				}
6282:src/xeq.c     **** 				else {
6283:src/xeq.c     **** 					error_message(Error);
6284:src/xeq.c     **** 					Error = 0;
6285:src/xeq.c     **** 					break;
6286:src/xeq.c     **** 				}
6287:src/xeq.c     **** 			}
6288:src/xeq.c     **** 			p = strtok( NULL, delim );
 34378              		.loc 1 6288 8 view .LVU9342
 34379 0028 304F     		ldr	r7, .L2526
 34380 002a 21E0     		b	.L2505
 34381              	.LVL2695:
 34382              	.L2524:
 34383              	.LBB4585:
6270:src/xeq.c     **** 				lift_if_enabled();
 34384              		.loc 1 6270 5 is_stmt 1 view .LVU9343
6270:src/xeq.c     **** 				lift_if_enabled();
 34385              		.loc 1 6270 31 is_stmt 0 view .LVU9344
 34386 002c 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 34387              	.LBB4586:
 34388              	.LBB4587:
 34389              	.LBB4588:
 34390              	.LBB4589:
 734:src/xeq.c     **** }
 34391              		.loc 1 734 15 view .LVU9345
 34392 0030 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34393              	.LBE4589:
 34394              	.LBE4588:
 34395              	.LBE4587:
 34396              	.LBE4586:
6270:src/xeq.c     **** 				lift_if_enabled();
 34397              		.loc 1 6270 31 view .LVU9346
ARM GAS  /tmp/cciWh9P3.s 			page 865


 34398 0032 AAF12D0A 		sub	r10, r10, #45
 34399 0036 BAFA8AFA 		clz	r10, r10
 34400              	.LBB4595:
 34401              	.LBB4592:
 738:src/xeq.c     **** 		lift();
 34402              		.loc 1 738 5 view .LVU9347
 34403 003a 5A06     		lsls	r2, r3, #25
 34404              	.LBE4592:
 34405              	.LBE4595:
6270:src/xeq.c     **** 				lift_if_enabled();
 34406              		.loc 1 6270 31 view .LVU9348
 34407 003c 4FEA5A1A 		lsr	r10, r10, #5
 34408              	.LVL2696:
6271:src/xeq.c     **** 				set_lift();
 34409              		.loc 1 6271 5 is_stmt 1 view .LVU9349
 34410              	.LBB4596:
 34411              	.LBI4586:
 737:src/xeq.c     **** 	if (get_lift())
 34412              		.loc 1 737 6 view .LVU9350
 34413              	.LBB4593:
 738:src/xeq.c     **** 		lift();
 34414              		.loc 1 738 2 view .LVU9351
 34415              	.LBB4591:
 34416              	.LBI4588:
 733:src/xeq.c     **** 	return State2.state_lift;
 34417              		.loc 1 733 12 view .LVU9352
 34418              	.LBB4590:
 734:src/xeq.c     **** }
 34419              		.loc 1 734 2 view .LVU9353
 34420              	.LBE4590:
 34421              	.LBE4591:
 738:src/xeq.c     **** 		lift();
 34422              		.loc 1 738 5 is_stmt 0 view .LVU9354
 34423 0040 46D4     		bmi	.L2523
 34424              	.LVL2697:
 34425              	.L2500:
 738:src/xeq.c     **** 		lift();
 34426              		.loc 1 738 5 view .LVU9355
 34427              	.LBE4593:
 34428              	.LBE4596:
6272:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
 34429              		.loc 1 6272 5 is_stmt 1 view .LVU9356
 34430              	.LBB4597:
 34431              	.LBI4597:
 747:src/xeq.c     ****     State2.state_lift = 1;
 34432              		.loc 1 747 6 view .LVU9357
 34433              	.LBB4598:
 748:src/xeq.c     **** }
 34434              		.loc 1 748 5 view .LVU9358
 748:src/xeq.c     **** }
 34435              		.loc 1 748 23 is_stmt 0 view .LVU9359
 34436 0042 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34437 0044 43F04003 		orr	r3, r3, #64
 34438 0048 EB75     		strb	r3, [r5, #23]
 34439              	.LBE4598:
 34440              	.LBE4597:
6273:src/xeq.c     **** 			} else {
ARM GAS  /tmp/cciWh9P3.s 			page 866


 34441              		.loc 1 6273 5 is_stmt 1 view .LVU9360
6273:src/xeq.c     **** 			} else {
 34442              		.loc 1 6273 50 is_stmt 0 view .LVU9361
 34443 004a FFF7FEFF 		bl	int_base
 34444              	.LVL2698:
6273:src/xeq.c     **** 			} else {
 34445              		.loc 1 6273 37 view .LVU9362
 34446 004e 5444     		add	r4, r4, r10
 34447              	.LVL2699:
6273:src/xeq.c     **** 			} else {
 34448              		.loc 1 6273 50 view .LVU9363
 34449 0050 0246     		mov	r2, r0
6273:src/xeq.c     **** 			} else {
 34450              		.loc 1 6273 5 view .LVU9364
 34451 0052 0021     		movs	r1, #0
 34452 0054 2046     		mov	r0, r4
 34453 0056 FFF7FEFF 		bl	strtoull
 34454              	.LVL2700:
 34455 005a 5246     		mov	r2, r10
 34456 005c FFF7FEFF 		bl	build_value
 34457              	.LVL2701:
 34458 0060 FFF7FEFF 		bl	setX_int
 34459              	.LVL2702:
 34460              	.LBE4585:
 34461              		.loc 1 6288 4 is_stmt 1 view .LVU9365
 34462              		.loc 1 6288 8 is_stmt 0 view .LVU9366
 34463 0064 3946     		mov	r1, r7
 34464 0066 0020     		movs	r0, #0
 34465 0068 FFF7FEFF 		bl	strtok
 34466              	.LVL2703:
 34467              		.loc 1 6288 8 view .LVU9367
 34468              	.LBE4561:
6264:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 34469              		.loc 1 6264 9 is_stmt 1 view .LVU9368
 34470 006c 0446     		mov	r4, r0
 34471 006e 38B3     		cbz	r0, .L2504
 34472              	.LVL2704:
 34473              	.L2505:
 34474              	.LBB4603:
6265:src/xeq.c     **** 			if ( pp ) {
 34475              		.loc 1 6265 4 view .LVU9369
6265:src/xeq.c     **** 			if ( pp ) {
 34476              		.loc 1 6265 15 is_stmt 0 view .LVU9370
 34477 0070 2C21     		movs	r1, #44
 34478 0072 2046     		mov	r0, r4
 34479 0074 FFF7FEFF 		bl	strchr
 34480              	.LVL2705:
6266:src/xeq.c     **** 				*pp = '.';
 34481              		.loc 1 6266 4 is_stmt 1 view .LVU9371
6266:src/xeq.c     **** 				*pp = '.';
 34482              		.loc 1 6266 7 is_stmt 0 view .LVU9372
 34483 0078 08B1     		cbz	r0, .L2498
6267:src/xeq.c     **** 			}
 34484              		.loc 1 6267 5 is_stmt 1 view .LVU9373
6267:src/xeq.c     **** 			}
 34485              		.loc 1 6267 9 is_stmt 0 view .LVU9374
 34486 007a 2E23     		movs	r3, #46
ARM GAS  /tmp/cciWh9P3.s 			page 867


 34487 007c 0370     		strb	r3, [r0]
 34488              	.L2498:
6269:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34489              		.loc 1 6269 4 is_stmt 1 view .LVU9375
6269:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34490              		.loc 1 6269 8 is_stmt 0 view .LVU9376
 34491 007e 3368     		ldr	r3, [r6]
 34492 0080 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
6269:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34493              		.loc 1 6269 7 view .LVU9377
 34494 0084 13F0010A 		ands	r10, r3, #1
 34495 0088 D0D1     		bne	.L2524
 34496              	.LBB4600:
6275:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 34497              		.loc 1 6275 5 is_stmt 1 view .LVU9378
6276:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 34498              		.loc 1 6276 5 view .LVU9379
 34499 008a 2146     		mov	r1, r4
 34500 008c 01A8     		add	r0, sp, #4
 34501              	.LVL2706:
6276:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 34502              		.loc 1 6276 5 is_stmt 0 view .LVU9380
 34503 008e 4246     		mov	r2, r8
 34504 0090 FFF7FEFF 		bl	decNumberFromString
 34505              	.LVL2707:
6277:src/xeq.c     **** 					lift_if_enabled();
 34506              		.loc 1 6277 5 is_stmt 1 view .LVU9381
6277:src/xeq.c     **** 					lift_if_enabled();
 34507              		.loc 1 6277 11 is_stmt 0 view .LVU9382
 34508 0094 01A8     		add	r0, sp, #4
 34509 0096 FFF7FEFF 		bl	check_special
 34510              	.LVL2708:
6277:src/xeq.c     **** 					lift_if_enabled();
 34511              		.loc 1 6277 8 view .LVU9383
 34512 009a F8B9     		cbnz	r0, .L2502
6278:src/xeq.c     **** 					set_lift();
 34513              		.loc 1 6278 6 is_stmt 1 view .LVU9384
 34514              	.LBB4571:
 34515              	.LBI4563:
 737:src/xeq.c     **** 	if (get_lift())
 34516              		.loc 1 737 6 view .LVU9385
 34517              	.LBB4569:
 738:src/xeq.c     **** 		lift();
 34518              		.loc 1 738 2 view .LVU9386
 34519              	.LBB4568:
 34520              	.LBI4565:
 733:src/xeq.c     **** 	return State2.state_lift;
 34521              		.loc 1 733 12 view .LVU9387
 34522              	.LBB4567:
 734:src/xeq.c     **** }
 34523              		.loc 1 734 2 view .LVU9388
 734:src/xeq.c     **** }
 34524              		.loc 1 734 15 is_stmt 0 view .LVU9389
 34525 009c EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34526              	.LBE4567:
 34527              	.LBE4568:
 738:src/xeq.c     **** 		lift();
ARM GAS  /tmp/cciWh9P3.s 			page 868


 34528              		.loc 1 738 5 view .LVU9390
 34529 009e 5B06     		lsls	r3, r3, #25
 34530 00a0 19D4     		bmi	.L2525
 34531              	.L2503:
 34532              	.LBE4569:
 34533              	.LBE4571:
6279:src/xeq.c     **** 					setX(&x);
 34534              		.loc 1 6279 6 is_stmt 1 view .LVU9391
 34535              	.LBB4572:
 34536              	.LBI4572:
 747:src/xeq.c     ****     State2.state_lift = 1;
 34537              		.loc 1 747 6 view .LVU9392
 34538              	.LBB4573:
 748:src/xeq.c     **** }
 34539              		.loc 1 748 5 view .LVU9393
 748:src/xeq.c     **** }
 34540              		.loc 1 748 23 is_stmt 0 view .LVU9394
 34541 00a2 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34542              	.LBE4573:
 34543              	.LBE4572:
 34544              	.LBB4576:
 34545              	.LBB4577:
 809:src/xeq.c     **** }
 34546              		.loc 1 809 2 view .LVU9395
 34547 00a4 01A9     		add	r1, sp, #4
 34548              	.LBE4577:
 34549              	.LBE4576:
 34550              	.LBB4580:
 34551              	.LBB4574:
 748:src/xeq.c     **** }
 34552              		.loc 1 748 23 view .LVU9396
 34553 00a6 43F04003 		orr	r3, r3, #64
 34554              	.LBE4574:
 34555              	.LBE4580:
 34556              	.LBB4581:
 34557              	.LBB4578:
 809:src/xeq.c     **** }
 34558              		.loc 1 809 2 view .LVU9397
 34559 00aa 6420     		movs	r0, #100
 34560              	.LBE4578:
 34561              	.LBE4581:
 34562              	.LBB4582:
 34563              	.LBB4575:
 748:src/xeq.c     **** }
 34564              		.loc 1 748 23 view .LVU9398
 34565 00ac EB75     		strb	r3, [r5, #23]
 34566              	.LBE4575:
 34567              	.LBE4582:
6280:src/xeq.c     **** 				}
 34568              		.loc 1 6280 6 is_stmt 1 view .LVU9399
 34569              	.LVL2709:
 34570              	.LBB4583:
 34571              	.LBI4576:
 808:src/xeq.c     **** 	setRegister(regX_idx, x);
 34572              		.loc 1 808 6 view .LVU9400
 34573              	.LBB4579:
 809:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 869


 34574              		.loc 1 809 2 view .LVU9401
 34575 00ae FFF7FEFF 		bl	setRegister
 34576              	.LVL2710:
 809:src/xeq.c     **** }
 34577              		.loc 1 809 2 is_stmt 0 view .LVU9402
 34578              	.LBE4579:
 34579              	.LBE4583:
 34580              	.LBE4600:
 34581              		.loc 1 6288 4 is_stmt 1 view .LVU9403
 34582              		.loc 1 6288 8 is_stmt 0 view .LVU9404
 34583 00b2 3946     		mov	r1, r7
 34584 00b4 0020     		movs	r0, #0
 34585 00b6 FFF7FEFF 		bl	strtok
 34586              	.LVL2711:
 34587              		.loc 1 6288 8 view .LVU9405
 34588              	.LBE4603:
6264:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 34589              		.loc 1 6264 9 is_stmt 1 view .LVU9406
 34590 00ba 0446     		mov	r4, r0
 34591 00bc 0028     		cmp	r0, #0
 34592 00be D7D1     		bne	.L2505
 34593              	.LVL2712:
 34594              	.L2504:
6289:src/xeq.c     **** 		}
6290:src/xeq.c     **** 		free( buffer );
 34595              		.loc 1 6290 3 view .LVU9407
 34596 00c0 4846     		mov	r0, r9
 34597 00c2 FFF7FEFF 		bl	free
 34598              	.LVL2713:
 34599              	.L2496:
 34600              		.loc 1 6290 3 is_stmt 0 view .LVU9408
 34601              	.LBE4560:
6291:src/xeq.c     **** 	}
6292:src/xeq.c     **** 	display();
 34602              		.loc 1 6292 2 is_stmt 1 view .LVU9409
 34603 00c6 FFF7FEFF 		bl	display
 34604              	.LVL2714:
6293:src/xeq.c     **** }
 34605              		.loc 1 6293 1 is_stmt 0 view .LVU9410
 34606 00ca 0AB0     		add	sp, sp, #40
 34607              		.cfi_remember_state
 34608              		.cfi_def_cfa_offset 32
 34609              		@ sp needed
 34610 00cc BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 34611              	.LVL2715:
 34612              	.L2523:
 34613              		.cfi_restore_state
 34614              	.LBB4605:
 34615              	.LBB4604:
 34616              	.LBB4601:
 34617              	.LBB4599:
 34618              	.LBB4594:
 739:src/xeq.c     **** }
 34619              		.loc 1 739 3 is_stmt 1 view .LVU9411
 34620 00d0 FFF7FEFF 		bl	lift
 34621              	.LVL2716:
 739:src/xeq.c     **** }
ARM GAS  /tmp/cciWh9P3.s 			page 870


 34622              		.loc 1 739 3 is_stmt 0 view .LVU9412
 34623 00d4 B5E7     		b	.L2500
 34624              	.LVL2717:
 34625              	.L2525:
 739:src/xeq.c     **** }
 34626              		.loc 1 739 3 view .LVU9413
 34627              	.LBE4594:
 34628              	.LBE4599:
 34629              	.LBE4601:
 34630              	.LBB4602:
 34631              	.LBB4584:
 34632              	.LBB4570:
 739:src/xeq.c     **** }
 34633              		.loc 1 739 3 is_stmt 1 view .LVU9414
 34634 00d6 FFF7FEFF 		bl	lift
 34635              	.LVL2718:
 34636 00da E2E7     		b	.L2503
 34637              	.L2502:
 34638              	.LBE4570:
 34639              	.LBE4584:
6283:src/xeq.c     **** 					Error = 0;
 34640              		.loc 1 6283 6 view .LVU9415
 34641 00dc 064C     		ldr	r4, .L2526+12
 34642              	.LVL2719:
6283:src/xeq.c     **** 					Error = 0;
 34643              		.loc 1 6283 6 is_stmt 0 view .LVU9416
 34644 00de 2068     		ldr	r0, [r4]
 34645 00e0 FFF7FEFF 		bl	error_message
 34646              	.LVL2720:
6284:src/xeq.c     **** 					break;
 34647              		.loc 1 6284 6 is_stmt 1 view .LVU9417
6284:src/xeq.c     **** 					break;
 34648              		.loc 1 6284 12 is_stmt 0 view .LVU9418
 34649 00e4 C4F800A0 		str	r10, [r4]
6285:src/xeq.c     **** 				}
 34650              		.loc 1 6285 6 is_stmt 1 view .LVU9419
 34651 00e8 EAE7     		b	.L2504
 34652              	.L2527:
 34653 00ea 00BF     		.align	2
 34654              	.L2526:
 34655 00ec 00000000 		.word	.LC9
 34656 00f0 00000000 		.word	main_ram
 34657 00f4 00000000 		.word	StateWhileOn
 34658 00f8 00000000 		.word	Error
 34659 00fc 00000000 		.word	Ctx
 34660              	.LBE4602:
 34661              	.LBE4604:
 34662              	.LBE4605:
 34663              		.cfi_endproc
 34664              	.LFE272:
 34666              		.global	__aeabi_uldivmod
 34667              		.section	.rodata.fill_buffer_from_raw_x.str1.4,"aMS",%progbits,1
 34668              		.align	2
 34669              	.LC10:
 34670 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 34670      34353637 
 34670      38394142 
ARM GAS  /tmp/cciWh9P3.s 			page 871


 34670      43444546 
 34670      00
 34671              		.section	.text.fill_buffer_from_raw_x,"ax",%progbits
 34672              		.align	1
 34673              		.p2align 2,,3
 34674              		.global	fill_buffer_from_raw_x
 34675              		.syntax unified
 34676              		.thumb
 34677              		.thumb_func
 34678              		.fpu fpv4-sp-d16
 34680              	fill_buffer_from_raw_x:
 34681              	.LVL2721:
 34682              	.LFB273:
6294:src/xeq.c     **** 
6295:src/xeq.c     **** char* fill_buffer_from_raw_x(char *buffer)
6296:src/xeq.c     **** {
 34683              		.loc 1 6296 1 view -0
 34684              		.cfi_startproc
 34685              		@ args = 0, pretend = 0, frame = 40
 34686              		@ frame_needed = 0, uses_anonymous_args = 0
6297:src/xeq.c     **** 	process_cmdline();
 34687              		.loc 1 6297 2 view .LVU9421
6296:src/xeq.c     **** 	process_cmdline();
 34688              		.loc 1 6296 1 is_stmt 0 view .LVU9422
 34689 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 34690              		.cfi_def_cfa_offset 36
 34691              		.cfi_offset 4, -36
 34692              		.cfi_offset 5, -32
 34693              		.cfi_offset 6, -28
 34694              		.cfi_offset 7, -24
 34695              		.cfi_offset 8, -20
 34696              		.cfi_offset 9, -16
 34697              		.cfi_offset 10, -12
 34698              		.cfi_offset 11, -8
 34699              		.cfi_offset 14, -4
6298:src/xeq.c     **** 	if (is_intmode()) {
 34700              		.loc 1 6298 6 view .LVU9423
 34701 0004 2C4D     		ldr	r5, .L2547
6296:src/xeq.c     **** 	process_cmdline();
 34702              		.loc 1 6296 1 view .LVU9424
 34703 0006 8BB0     		sub	sp, sp, #44
 34704              		.cfi_def_cfa_offset 80
6296:src/xeq.c     **** 	process_cmdline();
 34705              		.loc 1 6296 1 view .LVU9425
 34706 0008 0446     		mov	r4, r0
6297:src/xeq.c     **** 	process_cmdline();
 34707              		.loc 1 6297 2 view .LVU9426
 34708 000a FFF7FEFF 		bl	process_cmdline
 34709              	.LVL2722:
 34710              		.loc 1 6298 2 is_stmt 1 view .LVU9427
 34711              		.loc 1 6298 6 is_stmt 0 view .LVU9428
 34712 000e 2B68     		ldr	r3, [r5]
 34713 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 34714              		.loc 1 6298 5 view .LVU9429
 34715 0014 DA07     		lsls	r2, r3, #31
 34716 0016 2CD5     		bpl	.L2529
 34717              	.LBB4606:
ARM GAS  /tmp/cciWh9P3.s 			page 872


6299:src/xeq.c     **** 		int sgn;
 34718              		.loc 1 6299 3 is_stmt 1 view .LVU9430
6300:src/xeq.c     **** 		unsigned long long int x = extract_value(get_reg_n_int(regX_idx), &sgn);
 34719              		.loc 1 6300 3 view .LVU9431
 34720              		.loc 1 6300 30 is_stmt 0 view .LVU9432
 34721 0018 6420     		movs	r0, #100
 34722 001a FFF7FEFF 		bl	get_reg_n_int
 34723              	.LVL2723:
 34724 001e 01AA     		add	r2, sp, #4
 34725 0020 FFF7FEFF 		bl	extract_value
 34726              	.LVL2724:
 34727 0024 0646     		mov	r6, r0
 34728 0026 0F46     		mov	r7, r1
 34729              	.LVL2725:
6301:src/xeq.c     **** 		const int base = int_base();
 34730              		.loc 1 6301 3 is_stmt 1 view .LVU9433
 34731              		.loc 1 6301 20 is_stmt 0 view .LVU9434
 34732 0028 FFF7FEFF 		bl	int_base
 34733              	.LVL2726:
6302:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
6303:src/xeq.c     **** 
6304:src/xeq.c     **** 		*p-- = '\0';
 34734              		.loc 1 6304 8 view .LVU9435
 34735 002c 0023     		movs	r3, #0
 34736              	.LVL2727:
6302:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
 34737              		.loc 1 6302 3 is_stmt 1 view .LVU9436
 34738              		.loc 1 6304 3 view .LVU9437
 34739              		.loc 1 6304 8 is_stmt 0 view .LVU9438
 34740 002e E370     		strb	r3, [r4, #3]
6305:src/xeq.c     **** 		if (x == 0)
 34741              		.loc 1 6305 3 is_stmt 1 view .LVU9439
 34742              		.loc 1 6305 6 is_stmt 0 view .LVU9440
 34743 0030 56EA0703 		orrs	r3, r6, r7
 34744 0034 35D0     		beq	.L2545
 34745 0036 214D     		ldr	r5, .L2547+4
6304:src/xeq.c     **** 		if (x == 0)
 34746              		.loc 1 6304 5 view .LVU9441
 34747 0038 0234     		adds	r4, r4, #2
 34748              	.LVL2728:
6304:src/xeq.c     **** 		if (x == 0)
 34749              		.loc 1 6304 5 view .LVU9442
 34750 003a 8046     		mov	r8, r0
 34751 003c 4FEAE079 		asr	r9, r0, #31
 34752              	.LVL2729:
 34753              	.L2532:
 34754              	.LBB4607:
6306:src/xeq.c     **** 			*p-- = '0'; 
6307:src/xeq.c     **** 		else {
6308:src/xeq.c     **** 			while (x != 0) {
6309:src/xeq.c     **** 				const int n = x % base;
 34755              		.loc 1 6309 5 is_stmt 1 view .LVU9443
 34756 0040 3046     		mov	r0, r6
 34757 0042 3946     		mov	r1, r7
 34758 0044 4246     		mov	r2, r8
 34759 0046 4B46     		mov	r3, r9
 34760 0048 FFF7FEFF 		bl	__aeabi_uldivmod
ARM GAS  /tmp/cciWh9P3.s 			page 873


 34761              	.LVL2730:
6310:src/xeq.c     **** 				x /= base;
 34762              		.loc 1 6310 5 view .LVU9444
 34763 004c BB46     		mov	fp, r7
 34764 004e B246     		mov	r10, r6
 34765              	.LBE4607:
6308:src/xeq.c     **** 				const int n = x % base;
 34766              		.loc 1 6308 10 is_stmt 0 view .LVU9445
 34767 0050 CB45     		cmp	fp, r9
 34768              	.LBB4608:
6311:src/xeq.c     **** 				*p-- = n["0123456789ABCDEF"];
 34769              		.loc 1 6311 10 view .LVU9446
 34770 0052 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 34771 0054 04F80139 		strb	r3, [r4], #-1
 34772              	.LVL2731:
 34773              		.loc 1 6311 10 view .LVU9447
 34774              	.LBE4608:
6308:src/xeq.c     **** 				const int n = x % base;
 34775              		.loc 1 6308 10 view .LVU9448
 34776 0058 08BF     		it	eq
 34777 005a C245     		cmpeq	r10, r8
 34778              	.LBB4609:
6310:src/xeq.c     **** 				x /= base;
 34779              		.loc 1 6310 7 view .LVU9449
 34780 005c 0646     		mov	r6, r0
 34781              	.LVL2732:
6310:src/xeq.c     **** 				x /= base;
 34782              		.loc 1 6310 7 view .LVU9450
 34783 005e 0F46     		mov	r7, r1
 34784              	.LVL2733:
 34785              		.loc 1 6311 5 is_stmt 1 view .LVU9451
 34786              		.loc 1 6311 5 is_stmt 0 view .LVU9452
 34787              	.LBE4609:
6308:src/xeq.c     **** 				const int n = x % base;
 34788              		.loc 1 6308 10 is_stmt 1 view .LVU9453
 34789 0060 EED2     		bcs	.L2532
6312:src/xeq.c     **** 			}
6313:src/xeq.c     **** 		}
6314:src/xeq.c     **** 		if (sgn)
 34790              		.loc 1 6314 3 view .LVU9454
 34791              		.loc 1 6314 6 is_stmt 0 view .LVU9455
 34792 0062 019B     		ldr	r3, [sp, #4]
 34793 0064 1BB3     		cbz	r3, .L2533
 34794              	.LVL2734:
 34795              	.L2546:
6315:src/xeq.c     **** 			*p = '-';
 34796              		.loc 1 6315 4 is_stmt 1 view .LVU9456
 34797              		.loc 1 6315 7 is_stmt 0 view .LVU9457
 34798 0066 2D23     		movs	r3, #45
 34799 0068 2370     		strb	r3, [r4]
 34800              	.LVL2735:
 34801              	.L2528:
 34802              		.loc 1 6315 7 view .LVU9458
 34803              	.LBE4606:
6316:src/xeq.c     **** 		else
6317:src/xeq.c     **** 			p++;
6318:src/xeq.c     **** 		return p;
ARM GAS  /tmp/cciWh9P3.s 			page 874


6319:src/xeq.c     **** 	} else {
6320:src/xeq.c     **** 		decNumber x;
6321:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
6322:src/xeq.c     **** 		if (UState.fraccomma) {
6323:src/xeq.c     **** 			char *p = strchr(buffer, '.');
6324:src/xeq.c     **** 			if (p != NULL)
6325:src/xeq.c     **** 				*p = ',';
6326:src/xeq.c     **** 		}
6327:src/xeq.c     **** 
6328:src/xeq.c     **** 		return buffer;
6329:src/xeq.c     **** 	}
6330:src/xeq.c     **** }
 34804              		.loc 1 6330 1 view .LVU9459
 34805 006a 2046     		mov	r0, r4
 34806 006c 0BB0     		add	sp, sp, #44
 34807              		.cfi_remember_state
 34808              		.cfi_def_cfa_offset 36
 34809              		@ sp needed
 34810 006e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 34811              	.LVL2736:
 34812              	.L2529:
 34813              		.cfi_restore_state
 34814              	.LBB4610:
6320:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
 34815              		.loc 1 6320 3 is_stmt 1 view .LVU9460
6321:src/xeq.c     **** 		if (UState.fraccomma) {
 34816              		.loc 1 6321 3 view .LVU9461
 34817              	.LBB4611:
 34818              	.LBI4611:
 804:src/xeq.c     **** 	return getRegister(x, regX_idx);
 34819              		.loc 1 804 12 view .LVU9462
 34820              	.LBB4612:
 805:src/xeq.c     **** }
 34821              		.loc 1 805 2 view .LVU9463
 805:src/xeq.c     **** }
 34822              		.loc 1 805 9 is_stmt 0 view .LVU9464
 34823 0072 6421     		movs	r1, #100
 34824 0074 01A8     		add	r0, sp, #4
 34825              	.LVL2737:
 805:src/xeq.c     **** }
 34826              		.loc 1 805 9 view .LVU9465
 34827 0076 FFF7FEFF 		bl	getRegister
 34828              	.LVL2738:
 805:src/xeq.c     **** }
 34829              		.loc 1 805 9 view .LVU9466
 34830              	.LBE4612:
 34831              	.LBE4611:
6321:src/xeq.c     **** 		if (UState.fraccomma) {
 34832              		.loc 1 6321 3 view .LVU9467
 34833 007a 2146     		mov	r1, r4
 34834 007c FFF7FEFF 		bl	decNumberToString
 34835              	.LVL2739:
6322:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 34836              		.loc 1 6322 3 is_stmt 1 view .LVU9468
6322:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 34837              		.loc 1 6322 7 is_stmt 0 view .LVU9469
 34838 0080 2B68     		ldr	r3, [r5]
ARM GAS  /tmp/cciWh9P3.s 			page 875


 34839 0082 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
6322:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 34840              		.loc 1 6322 6 view .LVU9470
 34841 0086 9B06     		lsls	r3, r3, #26
 34842 0088 EFD5     		bpl	.L2528
 34843              	.LBB4613:
6323:src/xeq.c     **** 			if (p != NULL)
 34844              		.loc 1 6323 4 is_stmt 1 view .LVU9471
6323:src/xeq.c     **** 			if (p != NULL)
 34845              		.loc 1 6323 14 is_stmt 0 view .LVU9472
 34846 008a 2E21     		movs	r1, #46
 34847 008c 2046     		mov	r0, r4
 34848 008e FFF7FEFF 		bl	strchr
 34849              	.LVL2740:
6324:src/xeq.c     **** 				*p = ',';
 34850              		.loc 1 6324 4 is_stmt 1 view .LVU9473
6324:src/xeq.c     **** 				*p = ',';
 34851              		.loc 1 6324 7 is_stmt 0 view .LVU9474
 34852 0092 0028     		cmp	r0, #0
 34853 0094 E9D0     		beq	.L2528
6325:src/xeq.c     **** 		}
 34854              		.loc 1 6325 5 is_stmt 1 view .LVU9475
6325:src/xeq.c     **** 		}
 34855              		.loc 1 6325 8 is_stmt 0 view .LVU9476
 34856 0096 2C23     		movs	r3, #44
 34857 0098 0370     		strb	r3, [r0]
 34858              	.LBE4613:
6328:src/xeq.c     **** 	}
 34859              		.loc 1 6328 3 is_stmt 1 view .LVU9477
 34860              	.LBE4610:
 34861              		.loc 1 6330 1 is_stmt 0 view .LVU9478
 34862 009a 2046     		mov	r0, r4
 34863              	.LVL2741:
 34864              		.loc 1 6330 1 view .LVU9479
 34865 009c 0BB0     		add	sp, sp, #44
 34866              		.cfi_remember_state
 34867              		.cfi_def_cfa_offset 36
 34868              		@ sp needed
 34869 009e BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 34870              	.LVL2742:
 34871              	.L2545:
 34872              		.cfi_restore_state
 34873              	.LBB4614:
6306:src/xeq.c     **** 		else {
 34874              		.loc 1 6306 4 is_stmt 1 view .LVU9480
6306:src/xeq.c     **** 		else {
 34875              		.loc 1 6306 9 is_stmt 0 view .LVU9481
 34876 00a2 3023     		movs	r3, #48
 34877 00a4 A370     		strb	r3, [r4, #2]
6314:src/xeq.c     **** 			*p = '-';
 34878              		.loc 1 6314 6 view .LVU9482
 34879 00a6 019B     		ldr	r3, [sp, #4]
6306:src/xeq.c     **** 		else {
 34880              		.loc 1 6306 6 view .LVU9483
 34881 00a8 0134     		adds	r4, r4, #1
 34882              	.LVL2743:
6314:src/xeq.c     **** 			*p = '-';
ARM GAS  /tmp/cciWh9P3.s 			page 876


 34883              		.loc 1 6314 3 is_stmt 1 view .LVU9484
6314:src/xeq.c     **** 			*p = '-';
 34884              		.loc 1 6314 6 is_stmt 0 view .LVU9485
 34885 00aa 002B     		cmp	r3, #0
 34886 00ac DBD1     		bne	.L2546
 34887              	.LVL2744:
 34888              	.L2533:
6317:src/xeq.c     **** 		return p;
 34889              		.loc 1 6317 4 is_stmt 1 view .LVU9486
6317:src/xeq.c     **** 		return p;
 34890              		.loc 1 6317 5 is_stmt 0 view .LVU9487
 34891 00ae 0134     		adds	r4, r4, #1
 34892              	.LVL2745:
6318:src/xeq.c     **** 	} else {
 34893              		.loc 1 6318 3 is_stmt 1 view .LVU9488
 34894              	.LBE4614:
 34895              		.loc 1 6330 1 is_stmt 0 view .LVU9489
 34896 00b0 2046     		mov	r0, r4
 34897 00b2 0BB0     		add	sp, sp, #44
 34898              		.cfi_def_cfa_offset 36
 34899              		@ sp needed
 34900 00b4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 34901              	.LVL2746:
 34902              	.L2548:
 34903              		.loc 1 6330 1 view .LVU9490
 34904              		.align	2
 34905              	.L2547:
 34906 00b8 00000000 		.word	main_ram
 34907 00bc 00000000 		.word	.LC10
 34908              		.cfi_endproc
 34909              	.LFE273:
 34911              		.comm	RectPolConv,4,4
 34912              		.comm	StackBase,4,4
 34913              		.comm	RetStk,4,4
 34914              		.comm	ProgFree,4,4
 34915              		.comm	RetStkSize,4,4
 34916              		.comm	TraceBuffer,25,4
 34917              		.comm	Ctx,24,4
 34918              		.comm	UserLocalRegs,4,4
 34919              		.comm	XromUserPc,4,4
 34920              		.comm	ShowRegister,4,4
 34921              		.comm	XeqOpCode,2,2
 34922              		.comm	PcWrapped,4,4
 34923              		.comm	Error,4,4
 34924              		.comm	Busy,4,4
 34925              		.comm	Pause,1,1
 34926              		.comm	JustStopped,4,4
 34927              		.comm	XromRunning,4,4
 34928              		.comm	Running,4,4
 34929              		.global	xrom_targets
 34930              		.section	.rodata
 34931              		.align	2
 34932              		.set	.LANCHOR5,. + 0
 34933              	.LC1:
 34934 0000 0C0C0C0C 		.ascii	"\014\014\014\014\014\014\014\014\014\013\013\013\014"
 34934      0C0C0C0C 
 34934      0C0B0B0B 
ARM GAS  /tmp/cciWh9P3.s 			page 877


 34934      0C
 34935 000d 0C0A0A0C 		.ascii	"\014\012\012\014\014\014\007\010\011\014\014\014\004"
 34935      0C0C0708 
 34935      090C0C0C 
 34935      04
 34936 001a 05060C0C 		.ascii	"\005\006\014\014\014\001\002\003\014\014\014\000\012"
 34936      0C010203 
 34936      0C0C0C00 
 34936      0A
 34937 0027 0C0C     		.ascii	"\014\014"
 34938              		.section	.bss.result.11352,"aw",%nobits
 34939              		.align	2
 34940              		.set	.LANCHOR2,. + 0
 34943              	result.11352:
 34944 0000 00000000 		.space	16
 34944      00000000 
 34944      00000000 
 34944      00000000 
 34945              		.section	.data.RegionTab,"aw"
 34946              		.align	2
 34947              		.set	.LANCHOR0,. + 0
 34950              	RegionTab:
 34951 0000 00000000 		.word	0
 34952 0004 00000000 		.word	0
 34953 0008 00000000 		.word	0
 34954 000c 00000000 		.word	xrom
 34955              		.section	.rodata.StackRegMask,"a"
 34956              		.align	2
 34957              		.set	.LANCHOR3,. + 0
 34960              	StackRegMask:
 34961 0000 0F01     		.short	271
 34962 0002 FF01     		.short	511
 34963              		.section	.rodata.convergence_tolerances,"a"
 34964              		.align	2
 34965              		.set	.LANCHOR7,. + 0
 34968              	convergence_tolerances:
 34969 0000 00000000 		.word	const_1e_14
 34970 0004 00000000 		.word	const_1e_24
 34971 0008 00000000 		.word	const_1e_32
 34972              		.section	.rodata.modes.11092,"a"
 34973              		.align	2
 34974              		.set	.LANCHOR1,. + 0
 34977              	modes.11092:
 34978 0000 03020401 		.ascii	"\003\002\004\001\005\000\006"
 34978      050006
 34979              		.section	.rodata.modes.11562,"a"
 34980              		.align	2
 34981              		.set	.LANCHOR4,. + 0
 34984              	modes.11562:
 34985 0000 02010081 		.ascii	"\002\001\000\201"
 34986              		.section	.rodata.xrom_targets,"a"
 34987              		.align	2
 34988              		.set	.LANCHOR6,. + 0
 34991              	xrom_targets:
 34992 0000 9107     		.short	1937
 34993 0002 B70B     		.short	2999
 34994 0004 4602     		.short	582
ARM GAS  /tmp/cciWh9P3.s 			page 878


 34995 0006 4402     		.short	580
 34996 0008 420A     		.short	2626
 34997 000a 340A     		.short	2612
 34998 000c 100C     		.short	3088
 34999 000e 9C05     		.short	1436
 35000 0010 3B0A     		.short	2619
 35001 0012 5A06     		.short	1626
 35002 0014 6F06     		.short	1647
 35003 0016 6B06     		.short	1643
 35004 0018 6406     		.short	1636
 35005 001a 390A     		.short	2617
 35006 001c 7206     		.short	1650
 35007 001e 7506     		.short	1653
 35008 0020 7706     		.short	1655
 35009 0022 5D06     		.short	1629
 35010 0024 5707     		.short	1879
 35011 0026 4F08     		.short	2127
 35012 0028 EB05     		.short	1515
 35013 002a 0405     		.short	1284
 35014 002c 2907     		.short	1833
 35015 002e 8205     		.short	1410
 35016 0030 9A05     		.short	1434
 35017 0032 EC05     		.short	1516
 35018              		.text
 35019              	.Letext0:
 35020              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 35021              		.file 3 "dmcp/dmcp.h"
 35022              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 35023              		.file 5 "/usr/include/newlib/sys/_types.h"
 35024              		.file 6 "/usr/include/newlib/sys/reent.h"
 35025              		.file 7 "/usr/include/newlib/sys/lock.h"
 35026              		.file 8 "/usr/include/newlib/stdlib.h"
 35027              		.file 9 "src/decNumber/decContext.h"
 35028              		.file 10 "src/decNumber/decNumber.h"
 35029              		.file 11 "src/decNumber/decimal64.h"
 35030              		.file 12 "src/decNumber/decimal128.h"
 35031              		.file 13 "src/xeq.h"
 35032              		.file 14 "src/data.h"
 35033              		.file 15 "src/storage.h"
 35034              		.file 16 "src/stats.h"
 35035              		.file 17 "src/display.h"
 35036              		.file 18 "src/consts.h"
 35037              		.file 19 "src/xrom.h"
 35038              		.file 20 "src/pretty.h"
 35039              		.file 21 "src/xrom_targets.c"
 35040              		.file 22 "src/int.h"
 35041              		.file 23 "/usr/include/newlib/string.h"
 35042              		.file 24 "src/lcd.h"
 35043              		.file 25 "src/decn.h"
 35044              		.file 26 "src/complex.h"
 35045              		.file 27 "/usr/include/newlib/stdio.h"
 35046              		.file 28 "src/alpha.h"
ARM GAS  /tmp/cciWh9P3.s 			page 879


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xeq.c
     /tmp/cciWh9P3.s:18     .text.find_section_bounds:0000000000000000 $t
     /tmp/cciWh9P3.s:26     .text.find_section_bounds:0000000000000000 find_section_bounds
     /tmp/cciWh9P3.s:164    .text.find_section_bounds:0000000000000068 $d
     /tmp/cciWh9P3.s:172    .text.reg_address:0000000000000000 $t
     /tmp/cciWh9P3.s:179    .text.reg_address:0000000000000000 reg_address
     /tmp/cciWh9P3.s:293    .text.reg_address:0000000000000058 $d
     /tmp/cciWh9P3.s:300    .text.retstk_up:0000000000000000 $t
     /tmp/cciWh9P3.s:307    .text.retstk_up:0000000000000000 retstk_up
     /tmp/cciWh9P3.s:440    .text.retstk_up:000000000000006c $d
                            *COM*:0000000000000004 RetStk
     /tmp/cciWh9P3.s:447    .text.flag_word:0000000000000000 $t
     /tmp/cciWh9P3.s:454    .text.flag_word:0000000000000000 flag_word
     /tmp/cciWh9P3.s:574    .text.flag_word:000000000000006c $d
     /tmp/cciWh9P3.s:581    .text.set_zero:0000000000000000 $t
     /tmp/cciWh9P3.s:588    .text.set_zero:0000000000000000 set_zero
     /tmp/cciWh9P3.s:627    .text.set_zero:0000000000000020 $d
     /tmp/cciWh9P3.s:634    .text.intResult:0000000000000000 $t
     /tmp/cciWh9P3.s:641    .text.intResult:0000000000000000 intResult
     /tmp/cciWh9P3.s:841    .text.intResult:00000000000000a4 $d
                            *COM*:0000000000000004 Error
     /tmp/cciWh9P3.s:847    .text.check_stack_overlap:0000000000000000 $t
     /tmp/cciWh9P3.s:854    .text.check_stack_overlap:0000000000000000 check_stack_overlap
     /tmp/cciWh9P3.s:1068   .text.check_stack_overlap:0000000000000068 $d
     /tmp/cciWh9P3.s:1075   .text.is_xrom:0000000000000000 $t
     /tmp/cciWh9P3.s:1083   .text.is_xrom:0000000000000000 is_xrom
     /tmp/cciWh9P3.s:1104   .text.is_xrom:0000000000000018 $d
     /tmp/cciWh9P3.s:1109   .text.move_retstk:0000000000000000 $t
     /tmp/cciWh9P3.s:1117   .text.move_retstk:0000000000000000 move_retstk
     /tmp/cciWh9P3.s:1300   .text.move_retstk:000000000000006c $d
                            *COM*:0000000000000004 RetStkSize
     /tmp/cciWh9P3.s:1309   .text.local_levels:0000000000000000 $t
     /tmp/cciWh9P3.s:1317   .text.local_levels:0000000000000000 local_levels
     /tmp/cciWh9P3.s:1346   .text.local_levels:0000000000000020 $d
     /tmp/cciWh9P3.s:1352   .text.local_regs_rarg:0000000000000000 $t
     /tmp/cciWh9P3.s:1360   .text.local_regs_rarg:0000000000000000 local_regs_rarg
     /tmp/cciWh9P3.s:1460   .text.local_regs_rarg:0000000000000058 $d
     /tmp/cciWh9P3.s:1466   .text.get_reg_limit:0000000000000000 $t
     /tmp/cciWh9P3.s:1473   .text.get_reg_limit:0000000000000000 get_reg_limit
     /tmp/cciWh9P3.s:1711   .text.get_reg_limit:00000000000000b0 $d
     /tmp/cciWh9P3.s:1720   .text.local_regs:0000000000000000 $t
     /tmp/cciWh9P3.s:1728   .text.local_regs:0000000000000000 local_regs
     /tmp/cciWh9P3.s:1826   .text.local_regs:0000000000000038 $d
     /tmp/cciWh9P3.s:1836   .text.global_regs_rarg:0000000000000000 $t
     /tmp/cciWh9P3.s:1844   .text.global_regs_rarg:0000000000000000 global_regs_rarg
     /tmp/cciWh9P3.s:1917   .text.global_regs_rarg:000000000000003c $d
     /tmp/cciWh9P3.s:1922   .text.global_regs:0000000000000000 $t
     /tmp/cciWh9P3.s:1930   .text.global_regs:0000000000000000 global_regs
     /tmp/cciWh9P3.s:1988   .text.global_regs:0000000000000020 $d
     /tmp/cciWh9P3.s:1993   .text.version:0000000000000000 $t
     /tmp/cciWh9P3.s:2001   .text.version:0000000000000000 version
     /tmp/cciWh9P3.s:2032   .text.version:0000000000000018 $d
     /tmp/cciWh9P3.s:2037   .text.cmd_off:0000000000000000 $t
     /tmp/cciWh9P3.s:2045   .text.cmd_off:0000000000000000 cmd_off
     /tmp/cciWh9P3.s:2061   .text.init_RegionTab:0000000000000000 $t
     /tmp/cciWh9P3.s:2069   .text.init_RegionTab:0000000000000000 init_RegionTab
ARM GAS  /tmp/cciWh9P3.s 			page 880


     /tmp/cciWh9P3.s:2107   .text.init_RegionTab:000000000000001c $d
     /tmp/cciWh9P3.s:2115   .text.sizeLIB:0000000000000000 $t
     /tmp/cciWh9P3.s:2123   .text.sizeLIB:0000000000000000 sizeLIB
     /tmp/cciWh9P3.s:2157   .text.sizeLIB:0000000000000018 $d
     /tmp/cciWh9P3.s:2163   .text.getprog:0000000000000000 $t
     /tmp/cciWh9P3.s:2171   .text.getprog:0000000000000000 getprog
     /tmp/cciWh9P3.s:2275   .text.getprog:0000000000000048 $d
     /tmp/cciWh9P3.s:2283   .text.get_current_prog:0000000000000000 $t
     /tmp/cciWh9P3.s:2291   .text.get_current_prog:0000000000000000 get_current_prog
     /tmp/cciWh9P3.s:2323   .text.get_current_prog:0000000000000020 $d
     /tmp/cciWh9P3.s:2329   .text.do_inc:0000000000000000 $t
     /tmp/cciWh9P3.s:2337   .text.do_inc:0000000000000000 do_inc
     /tmp/cciWh9P3.s:2417   .text.do_inc:0000000000000044 $d
                            *COM*:0000000000000004 PcWrapped
     /tmp/cciWh9P3.s:2422   .text.user_pc.part.0:0000000000000000 $t
     /tmp/cciWh9P3.s:2429   .text.user_pc.part.0:0000000000000000 user_pc.part.0
     /tmp/cciWh9P3.s:2499   .text.user_pc.part.0:0000000000000034 $d
     /tmp/cciWh9P3.s:2504   .rodata.print_step.str1.4:0000000000000000 $d
     /tmp/cciWh9P3.s:2508   .text.print_step:0000000000000000 $t
     /tmp/cciWh9P3.s:2515   .text.print_step:0000000000000000 print_step
     /tmp/cciWh9P3.s:2684   .text.print_step:0000000000000098 $d
                            *COM*:0000000000000019 TraceBuffer
     /tmp/cciWh9P3.s:2695   .text.do_dec:0000000000000000 $t
     /tmp/cciWh9P3.s:2703   .text.do_dec:0000000000000000 do_dec
     /tmp/cciWh9P3.s:2785   .text.do_dec:0000000000000048 $d
     /tmp/cciWh9P3.s:2790   .text.update_program_bounds:0000000000000000 $t
     /tmp/cciWh9P3.s:2798   .text.update_program_bounds:0000000000000000 update_program_bounds
     /tmp/cciWh9P3.s:2951   .text.update_program_bounds:000000000000008c $d
     /tmp/cciWh9P3.s:2958   .text.set_pc:0000000000000000 $t
     /tmp/cciWh9P3.s:2966   .text.set_pc:0000000000000000 set_pc
     /tmp/cciWh9P3.s:3200   .text.set_pc:00000000000000a4 $d
     /tmp/cciWh9P3.s:3209   .text.incpc:0000000000000000 $t
     /tmp/cciWh9P3.s:3217   .text.incpc:0000000000000000 incpc
     /tmp/cciWh9P3.s:3271   .text.incpc:0000000000000024 $d
     /tmp/cciWh9P3.s:3277   .text.decpc:0000000000000000 $t
     /tmp/cciWh9P3.s:3285   .text.decpc:0000000000000000 decpc
     /tmp/cciWh9P3.s:3340   .text.decpc:0000000000000024 $d
     /tmp/cciWh9P3.s:3347   .text.fin_tst.part.0:0000000000000000 $t
     /tmp/cciWh9P3.s:3354   .text.fin_tst.part.0:0000000000000000 fin_tst.part.0
     /tmp/cciWh9P3.s:3387   .text.do_rtn:0000000000000000 $t
     /tmp/cciWh9P3.s:3394   .text.do_rtn:0000000000000000 do_rtn
     /tmp/cciWh9P3.s:3572   .text.do_rtn:000000000000008c $d
                            *COM*:0000000000000004 Running
     /tmp/cciWh9P3.s:3581   .text.user_pc:0000000000000000 $t
     /tmp/cciWh9P3.s:3589   .text.user_pc:0000000000000000 user_pc
     /tmp/cciWh9P3.s:3621   .text.find_user_pc:0000000000000000 $t
     /tmp/cciWh9P3.s:3629   .text.find_user_pc:0000000000000000 find_user_pc
     /tmp/cciWh9P3.s:3737   .text.find_user_pc:000000000000004c $d
     /tmp/cciWh9P3.s:3743   .text.report_err:0000000000000000 $t
     /tmp/cciWh9P3.s:3751   .text.report_err:0000000000000000 report_err
     /tmp/cciWh9P3.s:3810   .text.report_err:000000000000001c $d
     /tmp/cciWh9P3.s:3815   .text.report_warn:0000000000000000 $t
     /tmp/cciWh9P3.s:3823   .text.report_warn:0000000000000000 report_warn
     /tmp/cciWh9P3.s:3943   .text.report_warn:0000000000000048 $d
     /tmp/cciWh9P3.s:3952   .text.bad_mode_error:0000000000000000 $t
     /tmp/cciWh9P3.s:3960   .text.bad_mode_error:0000000000000000 bad_mode_error
     /tmp/cciWh9P3.s:4001   .text.bad_mode_error:000000000000000c $d
ARM GAS  /tmp/cciWh9P3.s 			page 881


     /tmp/cciWh9P3.s:4006   .text.cmderr:0000000000000000 $t
     /tmp/cciWh9P3.s:4014   .text.cmderr:0000000000000000 cmderr
     /tmp/cciWh9P3.s:4071   .text.cmderr:0000000000000010 $d
     /tmp/cciWh9P3.s:4080   .text.cmdmsg:0000000000000000 $t
     /tmp/cciWh9P3.s:4088   .text.cmdmsg:0000000000000000 cmdmsg
     /tmp/cciWh9P3.s:4104   .text.rarg_roundingmode:0000000000000000 $t
     /tmp/cciWh9P3.s:4112   .text.rarg_roundingmode:0000000000000000 rarg_roundingmode
     /tmp/cciWh9P3.s:4134   .text.rarg_roundingmode:0000000000000014 $d
     /tmp/cciWh9P3.s:4139   .text.packed_from_number:0000000000000000 $t
     /tmp/cciWh9P3.s:4147   .text.packed_from_number:0000000000000000 packed_from_number
     /tmp/cciWh9P3.s:4214   .text.packed_from_number:0000000000000034 $d
     /tmp/cciWh9P3.s:4220   .text.packed128_from_number:0000000000000000 $t
     /tmp/cciWh9P3.s:4228   .text.packed128_from_number:0000000000000000 packed128_from_number
     /tmp/cciWh9P3.s:4295   .text.packed128_from_number:0000000000000034 $d
     /tmp/cciWh9P3.s:4301   .text.check_special:0000000000000000 $t
     /tmp/cciWh9P3.s:4308   .text.check_special:0000000000000000 check_special
     /tmp/cciWh9P3.s:4535   .text.check_special:00000000000000a0 $d
     /tmp/cciWh9P3.s:4541   .text.packed_from_packed128:0000000000000000 $t
     /tmp/cciWh9P3.s:4549   .text.packed_from_packed128:0000000000000000 packed_from_packed128
     /tmp/cciWh9P3.s:4592   .text.packed128_from_packed:0000000000000000 $t
     /tmp/cciWh9P3.s:4600   .text.packed128_from_packed:0000000000000000 packed128_from_packed
     /tmp/cciWh9P3.s:4643   .text.stack_size:0000000000000000 $t
     /tmp/cciWh9P3.s:4651   .text.stack_size:0000000000000000 stack_size
     /tmp/cciWh9P3.s:4702   .text.stack_size:0000000000000030 $d
     /tmp/cciWh9P3.s:4708   .text.copyreg:0000000000000000 $t
     /tmp/cciWh9P3.s:4716   .text.copyreg:0000000000000000 copyreg
     /tmp/cciWh9P3.s:4749   .text.copyreg:000000000000001c $d
     /tmp/cciWh9P3.s:4754   .text.set_lift:0000000000000000 $t
     /tmp/cciWh9P3.s:4762   .text.set_lift:0000000000000000 set_lift
     /tmp/cciWh9P3.s:4780   .text.set_lift:000000000000000c $d
     /tmp/cciWh9P3.s:4785   .text.is_dblmode:0000000000000000 $t
     /tmp/cciWh9P3.s:4793   .text.is_dblmode:0000000000000000 is_dblmode
     /tmp/cciWh9P3.s:4815   .text.is_dblmode:000000000000001c $d
     /tmp/cciWh9P3.s:4820   .text.is_usrdblmode:0000000000000000 $t
     /tmp/cciWh9P3.s:4828   .text.is_usrdblmode:0000000000000000 is_usrdblmode
     /tmp/cciWh9P3.s:4870   .text.is_usrdblmode:000000000000002c $d
     /tmp/cciWh9P3.s:4876   .text.s_to_i:0000000000000000 $t
     /tmp/cciWh9P3.s:4884   .text.s_to_i:0000000000000000 s_to_i
     /tmp/cciWh9P3.s:5032   .text.digit:0000000000000000 $t
     /tmp/cciWh9P3.s:5039   .text.digit:0000000000000000 digit
     /tmp/cciWh9P3.s:5608   .text.digit:000000000000018c $d
     /tmp/cciWh9P3.s:5617   .text.s_to_ull:0000000000000000 $t
     /tmp/cciWh9P3.s:5625   .text.s_to_ull:0000000000000000 s_to_ull
     /tmp/cciWh9P3.s:5719   .text.get_cmdline:0000000000000000 $t
     /tmp/cciWh9P3.s:5727   .text.get_cmdline:0000000000000000 get_cmdline
     /tmp/cciWh9P3.s:5755   .text.get_cmdline:0000000000000014 $d
     /tmp/cciWh9P3.s:5760   .text.is_bad_cmdline:0000000000000000 $t
     /tmp/cciWh9P3.s:5768   .text.is_bad_cmdline:0000000000000000 is_bad_cmdline
     /tmp/cciWh9P3.s:5843   .text.is_bad_cmdline:000000000000003c $d
     /tmp/cciWh9P3.s:5848   .text.get_flash_reg_n:0000000000000000 $t
     /tmp/cciWh9P3.s:5856   .text.get_flash_reg_n:0000000000000000 get_flash_reg_n
     /tmp/cciWh9P3.s:5883   .text.get_flash_reg_n:000000000000001c $d
     /tmp/cciWh9P3.s:5888   .text.get_const:0000000000000000 $t
     /tmp/cciWh9P3.s:5896   .text.get_const:0000000000000000 get_const
     /tmp/cciWh9P3.s:6044   .text.get_const:0000000000000074 $d
     /tmp/cciWh9P3.s:6052   .text.get_reg_n:0000000000000000 $t
     /tmp/cciWh9P3.s:6060   .text.get_reg_n:0000000000000000 get_reg_n
ARM GAS  /tmp/cciWh9P3.s 			page 882


     /tmp/cciWh9P3.s:6280   .text.get_reg_n:00000000000000a8 $d
     /tmp/cciWh9P3.s:6287   .text.get_stack:0000000000000000 $t
     /tmp/cciWh9P3.s:6295   .text.get_stack:0000000000000000 get_stack
     /tmp/cciWh9P3.s:6315   .text.lift:0000000000000000 $t
     /tmp/cciWh9P3.s:6323   .text.lift:0000000000000000 lift
     /tmp/cciWh9P3.s:6502   .text.lift:0000000000000064 $d
     /tmp/cciWh9P3.s:6510   .text.lift_if_enabled:0000000000000000 $t
     /tmp/cciWh9P3.s:6518   .text.lift_if_enabled:0000000000000000 lift_if_enabled
     /tmp/cciWh9P3.s:6548   .text.lift_if_enabled:0000000000000010 $d
     /tmp/cciWh9P3.s:6553   .text.lower:0000000000000000 $t
     /tmp/cciWh9P3.s:6560   .text.lower:0000000000000000 lower
     /tmp/cciWh9P3.s:6742   .text.lower:000000000000006c $d
     /tmp/cciWh9P3.s:6750   .text.get_stack_top:0000000000000000 $t
     /tmp/cciWh9P3.s:6757   .text.get_stack_top:0000000000000000 get_stack_top
     /tmp/cciWh9P3.s:6842   .text.get_stack_top:0000000000000034 $d
     /tmp/cciWh9P3.s:6850   .text.roll_down:0000000000000000 $t
     /tmp/cciWh9P3.s:6858   .text.roll_down:0000000000000000 roll_down
     /tmp/cciWh9P3.s:6976   .text.roll_down:000000000000004c $d
                            *COM*:0000000000000004 StackBase
     /tmp/cciWh9P3.s:6982   .text.cpx_roll_down:0000000000000000 $t
     /tmp/cciWh9P3.s:6990   .text.cpx_roll_down:0000000000000000 cpx_roll_down
     /tmp/cciWh9P3.s:7032   .text.cpx_roll_down:000000000000001c $d
     /tmp/cciWh9P3.s:7037   .text.roll_up:0000000000000000 $t
     /tmp/cciWh9P3.s:7045   .text.roll_up:0000000000000000 roll_up
     /tmp/cciWh9P3.s:7172   .text.roll_up:000000000000004c $d
     /tmp/cciWh9P3.s:7178   .text.cpx_roll_up:0000000000000000 $t
     /tmp/cciWh9P3.s:7186   .text.cpx_roll_up:0000000000000000 cpx_roll_up
     /tmp/cciWh9P3.s:7228   .text.cpx_roll_up:000000000000001c $d
     /tmp/cciWh9P3.s:7233   .text.fill:0000000000000000 $t
     /tmp/cciWh9P3.s:7241   .text.fill:0000000000000000 fill
     /tmp/cciWh9P3.s:7396   .text.fill:0000000000000064 $d
     /tmp/cciWh9P3.s:7405   .text.lower2:0000000000000000 $t
     /tmp/cciWh9P3.s:7412   .text.lower2:0000000000000000 lower2
     /tmp/cciWh9P3.s:7594   .text.lower2:000000000000006c $d
     /tmp/cciWh9P3.s:7602   .text.drop:0000000000000000 $t
     /tmp/cciWh9P3.s:7610   .text.drop:0000000000000000 drop
     /tmp/cciWh9P3.s:7653   .text.drop:000000000000001c $d
     /tmp/cciWh9P3.s:7658   .text.copyreg_n:0000000000000000 $t
     /tmp/cciWh9P3.s:7666   .text.copyreg_n:0000000000000000 copyreg_n
     /tmp/cciWh9P3.s:7750   .text.copyreg_n:0000000000000038 $d
     /tmp/cciWh9P3.s:7757   .text.setlastX:0000000000000000 $t
     /tmp/cciWh9P3.s:7765   .text.setlastX:0000000000000000 setlastX
     /tmp/cciWh9P3.s:7781   .text.setlastXY:0000000000000000 $t
     /tmp/cciWh9P3.s:7788   .text.setlastXY:0000000000000000 setlastXY
     /tmp/cciWh9P3.s:7831   .text.getRegister:0000000000000000 $t
     /tmp/cciWh9P3.s:7839   .text.getRegister:0000000000000000 getRegister
     /tmp/cciWh9P3.s:7901   .text.getRegister:0000000000000030 $d
     /tmp/cciWh9P3.s:7906   .text.getX:0000000000000000 $t
     /tmp/cciWh9P3.s:7914   .text.getX:0000000000000000 getX
     /tmp/cciWh9P3.s:7932   .text.getY:0000000000000000 $t
     /tmp/cciWh9P3.s:7940   .text.getY:0000000000000000 getY
     /tmp/cciWh9P3.s:7957   .text.getXY:0000000000000000 $t
     /tmp/cciWh9P3.s:7965   .text.getXY:0000000000000000 getXY
     /tmp/cciWh9P3.s:8026   .text.getXYZ:0000000000000000 $t
     /tmp/cciWh9P3.s:8034   .text.getXYZ:0000000000000000 getXYZ
     /tmp/cciWh9P3.s:8127   .text.getYZ:0000000000000000 $t
     /tmp/cciWh9P3.s:8135   .text.getYZ:0000000000000000 getYZ
ARM GAS  /tmp/cciWh9P3.s 			page 883


     /tmp/cciWh9P3.s:8196   .text.getXYZT:0000000000000000 $t
     /tmp/cciWh9P3.s:8204   .text.getXYZT:0000000000000000 getXYZT
     /tmp/cciWh9P3.s:8250   .text.storcl_op:0000000000000000 $t
     /tmp/cciWh9P3.s:8257   .text.storcl_op:0000000000000000 storcl_op
     /tmp/cciWh9P3.s:8331   .text.storcl_op:000000000000002c $d
     /tmp/cciWh9P3.s:8338   .text.storcl_op:0000000000000032 $t
     /tmp/cciWh9P3.s:8450   .text.storcl_cop:0000000000000000 $t
     /tmp/cciWh9P3.s:8457   .text.storcl_cop:0000000000000000 storcl_cop
     /tmp/cciWh9P3.s:8567   .text.storcl_cop:0000000000000040 $d
     /tmp/cciWh9P3.s:8572   .text.storcl_cop:0000000000000044 $t
     /tmp/cciWh9P3.s:8685   .text.cpx_enter:0000000000000000 $t
     /tmp/cciWh9P3.s:8693   .text.cpx_enter:0000000000000000 cpx_enter
     /tmp/cciWh9P3.s:8783   .text.cpx_enter:0000000000000048 $d
     /tmp/cciWh9P3.s:8789   .text.cpx_fill:0000000000000000 $t
     /tmp/cciWh9P3.s:8797   .text.cpx_fill:0000000000000000 cpx_fill
     /tmp/cciWh9P3.s:8998   .text.cpx_fill:0000000000000084 $d
     /tmp/cciWh9P3.s:9008   .text.setRegister:0000000000000000 $t
     /tmp/cciWh9P3.s:9016   .text.setRegister:0000000000000000 setRegister
     /tmp/cciWh9P3.s:9111   .text.setRegister:000000000000004c $d
                            *COM*:0000000000000018 Ctx
     /tmp/cciWh9P3.s:9117   .text.setX:0000000000000000 $t
     /tmp/cciWh9P3.s:9125   .text.setX:0000000000000000 setX
     /tmp/cciWh9P3.s:9147   .text.rarg_round:0000000000000000 $t
     /tmp/cciWh9P3.s:9155   .text.rarg_round:0000000000000000 rarg_round
     /tmp/cciWh9P3.s:9336   .text.rarg_round:0000000000000064 $d
     /tmp/cciWh9P3.s:9343   .text.setY:0000000000000000 $t
     /tmp/cciWh9P3.s:9351   .text.setY:0000000000000000 setY
     /tmp/cciWh9P3.s:9373   .text.setXY:0000000000000000 $t
     /tmp/cciWh9P3.s:9381   .text.setXY:0000000000000000 setXY
     /tmp/cciWh9P3.s:9445   .text.get_reg_n_int:0000000000000000 $t
     /tmp/cciWh9P3.s:9453   .text.get_reg_n_int:0000000000000000 get_reg_n_int
     /tmp/cciWh9P3.s:9490   .text.storcl_intop:0000000000000000 $t
     /tmp/cciWh9P3.s:9497   .text.storcl_intop:0000000000000000 storcl_intop
     /tmp/cciWh9P3.s:9589   .text.storcl_intop:0000000000000038 $d
     /tmp/cciWh9P3.s:9595   .text.storcl_intop:000000000000003e $t
     /tmp/cciWh9P3.s:9697   .text.incdec:0000000000000000 $t
     /tmp/cciWh9P3.s:9704   .text.incdec:0000000000000000 incdec
     /tmp/cciWh9P3.s:9885   .text.incdec:0000000000000094 $d
     /tmp/cciWh9P3.s:9892   .text.set_reg_n_int:0000000000000000 $t
     /tmp/cciWh9P3.s:9900   .text.set_reg_n_int:0000000000000000 set_reg_n_int
     /tmp/cciWh9P3.s:9933   .text.get_reg_n_int_sgn:0000000000000000 $t
     /tmp/cciWh9P3.s:9941   .text.get_reg_n_int_sgn:0000000000000000 get_reg_n_int_sgn
     /tmp/cciWh9P3.s:10021  .text.get_reg_n_int_sgn:0000000000000034 $d
     /tmp/cciWh9P3.s:10026  .text.get_keycode_from_reg:0000000000000000 $t
     /tmp/cciWh9P3.s:10033  .text.get_keycode_from_reg:0000000000000000 get_keycode_from_reg
     /tmp/cciWh9P3.s:10113  .text.get_keycode_from_reg:000000000000002c $d
     /tmp/cciWh9P3.s:10118  .text.getX_int:0000000000000000 $t
     /tmp/cciWh9P3.s:10126  .text.getX_int:0000000000000000 getX_int
     /tmp/cciWh9P3.s:10142  .text.getX_int_sgn:0000000000000000 $t
     /tmp/cciWh9P3.s:10150  .text.getX_int_sgn:0000000000000000 getX_int_sgn
     /tmp/cciWh9P3.s:10172  .text.set_reg_n_int_sgn:0000000000000000 $t
     /tmp/cciWh9P3.s:10180  .text.set_reg_n_int_sgn:0000000000000000 set_reg_n_int_sgn
     /tmp/cciWh9P3.s:10306  .text.set_reg_n_int_sgn:0000000000000060 $d
     /tmp/cciWh9P3.s:10312  .text.op_roundingmode:0000000000000000 $t
     /tmp/cciWh9P3.s:10320  .text.op_roundingmode:0000000000000000 op_roundingmode
     /tmp/cciWh9P3.s:10384  .text.op_roundingmode:0000000000000024 $d
     /tmp/cciWh9P3.s:10389  .text.register_from_int:0000000000000000 $t
ARM GAS  /tmp/cciWh9P3.s 			page 884


     /tmp/cciWh9P3.s:10396  .text.register_from_int:0000000000000000 register_from_int
     /tmp/cciWh9P3.s:10493  .text.register_from_int:000000000000005c $d
     /tmp/cciWh9P3.s:10499  .text.int_from_register:0000000000000000 $t
     /tmp/cciWh9P3.s:10506  .text.int_from_register:0000000000000000 int_from_register
     /tmp/cciWh9P3.s:10577  .text.int_from_register:0000000000000044 $d
     /tmp/cciWh9P3.s:10582  .text.switch_to_int:0000000000000000 $t
     /tmp/cciWh9P3.s:10589  .text.switch_to_int:0000000000000000 switch_to_int
     /tmp/cciWh9P3.s:10740  .text.switch_to_int:0000000000000078 $d
     /tmp/cciWh9P3.s:10748  .text.process_cmdline:0000000000000000 $t
     /tmp/cciWh9P3.s:10756  .text.process_cmdline:0000000000000000 process_cmdline
     /tmp/cciWh9P3.s:11376  .text.process_cmdline:000000000000022c $d
                            *COM*:0000000000000004 XromRunning
     /tmp/cciWh9P3.s:11386  .text.process_cmdline_set_lift:0000000000000000 $t
     /tmp/cciWh9P3.s:11394  .text.process_cmdline_set_lift:0000000000000000 process_cmdline_set_lift
     /tmp/cciWh9P3.s:11427  .text.process_cmdline_set_lift:0000000000000014 $d
     /tmp/cciWh9P3.s:11432  .text.setX_int:0000000000000000 $t
     /tmp/cciWh9P3.s:11440  .text.setX_int:0000000000000000 setX_int
     /tmp/cciWh9P3.s:11491  .text.do_rcl:0000000000000000 $t
     /tmp/cciWh9P3.s:11498  .text.do_rcl:0000000000000000 do_rcl
     /tmp/cciWh9P3.s:11836  .text.do_rcl:00000000000000cc $d
     /tmp/cciWh9P3.s:11847  .text.setX_int_sgn:0000000000000000 $t
     /tmp/cciWh9P3.s:11855  .text.setX_int_sgn:0000000000000000 setX_int_sgn
     /tmp/cciWh9P3.s:11889  .text.zero_regs:0000000000000000 $t
     /tmp/cciWh9P3.s:11897  .text.zero_regs:0000000000000000 zero_regs
     /tmp/cciWh9P3.s:11935  .text.zero_regs:0000000000000024 $d
     /tmp/cciWh9P3.s:11940  .text.move_regs:0000000000000000 $t
     /tmp/cciWh9P3.s:11948  .text.move_regs:0000000000000000 move_regs
     /tmp/cciWh9P3.s:12001  .text.move_regs:0000000000000024 $d
     /tmp/cciWh9P3.s:12006  .text.zero_X:0000000000000000 $t
     /tmp/cciWh9P3.s:12014  .text.zero_X:0000000000000000 zero_X
     /tmp/cciWh9P3.s:12029  .text.zero_X:0000000000000008 $d
     /tmp/cciWh9P3.s:12034  .text.zero_Y:0000000000000000 $t
     /tmp/cciWh9P3.s:12042  .text.zero_Y:0000000000000000 zero_Y
     /tmp/cciWh9P3.s:12070  .text.clrx:0000000000000000 $t
     /tmp/cciWh9P3.s:12078  .text.clrx:0000000000000000 clrx
     /tmp/cciWh9P3.s:12127  .text.clrx:0000000000000018 $d
     /tmp/cciWh9P3.s:12133  .text.clrstk:0000000000000000 $t
     /tmp/cciWh9P3.s:12141  .text.clrstk:0000000000000000 clrstk
     /tmp/cciWh9P3.s:12266  .text.clrstk:000000000000005c $d
     /tmp/cciWh9P3.s:12276  .text.clrreg:0000000000000000 $t
     /tmp/cciWh9P3.s:12284  .text.clrreg:0000000000000000 clrreg
     /tmp/cciWh9P3.s:12720  .text.clrreg:000000000000010c $d
     /tmp/cciWh9P3.s:12730  .text.clrretstk:0000000000000000 $t
     /tmp/cciWh9P3.s:12738  .text.clrretstk:0000000000000000 clrretstk
     /tmp/cciWh9P3.s:12759  .text.clrretstk:0000000000000010 $d
     /tmp/cciWh9P3.s:12764  .text.clrretstk_pc:0000000000000000 $t
     /tmp/cciWh9P3.s:12772  .text.clrretstk_pc:0000000000000000 clrretstk_pc
     /tmp/cciWh9P3.s:12837  .text.clrretstk_pc:0000000000000020 $d
     /tmp/cciWh9P3.s:12842  .text.cmdconst:0000000000000000 $t
     /tmp/cciWh9P3.s:12850  .text.cmdconst:0000000000000000 cmdconst
     /tmp/cciWh9P3.s:13173  .text.cmdconst:00000000000000bc $d
     /tmp/cciWh9P3.s:13181  .text.cmdsto:0000000000000000 $t
     /tmp/cciWh9P3.s:13189  .text.cmdsto:0000000000000000 cmdsto
     /tmp/cciWh9P3.s:13379  .text.cmdsto:0000000000000078 $d
     /tmp/cciWh9P3.s:13385  .text.cmdrcl:0000000000000000 $t
     /tmp/cciWh9P3.s:13393  .text.cmdrcl:0000000000000000 cmdrcl
     /tmp/cciWh9P3.s:13409  .text.cmdcsto:0000000000000000 $t
ARM GAS  /tmp/cciWh9P3.s 			page 885


     /tmp/cciWh9P3.s:13417  .text.cmdcsto:0000000000000000 cmdcsto
     /tmp/cciWh9P3.s:13694  .text.cmdcsto:00000000000000c0 $d
     /tmp/cciWh9P3.s:13702  .text.cmdcrcl:0000000000000000 $t
     /tmp/cciWh9P3.s:13710  .text.cmdcrcl:0000000000000000 cmdcrcl
     /tmp/cciWh9P3.s:14183  .text.cmdcrcl:0000000000000108 $d
     /tmp/cciWh9P3.s:14198  .text.cmdircl:0000000000000000 $t
     /tmp/cciWh9P3.s:14206  .text.cmdircl:0000000000000000 cmdircl
     /tmp/cciWh9P3.s:14250  .text.cmdircl:000000000000001c $d
     /tmp/cciWh9P3.s:14255  .text.cmdrrcl:0000000000000000 $t
     /tmp/cciWh9P3.s:14263  .text.cmdrrcl:0000000000000000 cmdrrcl
     /tmp/cciWh9P3.s:14421  .text.cmdrrcl:0000000000000080 $d
     /tmp/cciWh9P3.s:14431  .text.swap_reg:0000000000000000 $t
     /tmp/cciWh9P3.s:14439  .text.swap_reg:0000000000000000 swap_reg
     /tmp/cciWh9P3.s:14580  .text.swap_reg:0000000000000060 $d
     /tmp/cciWh9P3.s:14585  .text.cmdswap:0000000000000000 $t
     /tmp/cciWh9P3.s:14593  .text.cmdswap:0000000000000000 cmdswap
     /tmp/cciWh9P3.s:14722  .text.cmdswap:0000000000000088 $d
     /tmp/cciWh9P3.s:14727  .text.cmdview:0000000000000000 $t
     /tmp/cciWh9P3.s:14735  .text.cmdview:0000000000000000 cmdview
     /tmp/cciWh9P3.s:14819  .text.cmdview:0000000000000050 $d
                            *COM*:0000000000000004 ShowRegister
     /tmp/cciWh9P3.s:14826  .text.get_stack_size:0000000000000000 $t
     /tmp/cciWh9P3.s:14834  .text.get_stack_size:0000000000000000 get_stack_size
     /tmp/cciWh9P3.s:14932  .text.get_stack_size:0000000000000040 $d
     /tmp/cciWh9P3.s:14940  .text.get_word_size:0000000000000000 $t
     /tmp/cciWh9P3.s:14948  .text.get_word_size:0000000000000000 get_word_size
     /tmp/cciWh9P3.s:14991  .text.get_sign_mode:0000000000000000 $t
     /tmp/cciWh9P3.s:14999  .text.get_sign_mode:0000000000000000 get_sign_mode
     /tmp/cciWh9P3.s:15055  .text.get_sign_mode:0000000000000024 $d
     /tmp/cciWh9P3.s:15060  .text.get_base:0000000000000000 $t
     /tmp/cciWh9P3.s:15068  .text.get_base:0000000000000000 get_base
     /tmp/cciWh9P3.s:15111  .text.DM42_Ticker:0000000000000000 $t
     /tmp/cciWh9P3.s:15119  .text.DM42_Ticker:0000000000000000 DM42_Ticker
     /tmp/cciWh9P3.s:15149  .text.DM42_Ticker:0000000000000010 $d
     /tmp/cciWh9P3.s:15154  .text.op_ticks:0000000000000000 $t
     /tmp/cciWh9P3.s:15162  .text.op_ticks:0000000000000000 op_ticks
     /tmp/cciWh9P3.s:15239  .text.op_ticks:0000000000000024 $d
     /tmp/cciWh9P3.s:15244  .text.op_voltage:0000000000000000 $t
     /tmp/cciWh9P3.s:15252  .text.op_voltage:0000000000000000 op_voltage
     /tmp/cciWh9P3.s:15355  .text.op_voltage:0000000000000058 $d
     /tmp/cciWh9P3.s:15362  .text.free_mem:0000000000000000 $t
     /tmp/cciWh9P3.s:15370  .text.free_mem:0000000000000000 free_mem
     /tmp/cciWh9P3.s:15394  .text.free_mem:0000000000000010 $d
     /tmp/cciWh9P3.s:15400  .text.free_flash:0000000000000000 $t
     /tmp/cciWh9P3.s:15408  .text.free_flash:0000000000000000 free_flash
     /tmp/cciWh9P3.s:15427  .text.free_flash:0000000000000010 $d
     /tmp/cciWh9P3.s:15432  .text.get_mem:0000000000000000 $t
     /tmp/cciWh9P3.s:15440  .text.get_mem:0000000000000000 get_mem
     /tmp/cciWh9P3.s:15691  .text.get_mem:000000000000009c $d
     /tmp/cciWh9P3.s:15699  .text.cmdputkey:0000000000000000 $t
     /tmp/cciWh9P3.s:15707  .text.cmdputkey:0000000000000000 cmdputkey
     /tmp/cciWh9P3.s:15789  .text.cmdputkey:0000000000000034 $d
     /tmp/cciWh9P3.s:15795  .text.cmdkeytype:0000000000000000 $t
     /tmp/cciWh9P3.s:15803  .text.cmdkeytype:0000000000000000 cmdkeytype
     /tmp/cciWh9P3.s:15937  .text.cmdkeytype:0000000000000048 $d
     /tmp/cciWh9P3.s:15946  .rodata.op_query_xtal.str1.4:0000000000000000 $d
     /tmp/cciWh9P3.s:15950  .text.op_query_xtal:0000000000000000 $t
ARM GAS  /tmp/cciWh9P3.s 			page 886


     /tmp/cciWh9P3.s:15958  .text.op_query_xtal:0000000000000000 op_query_xtal
     /tmp/cciWh9P3.s:15996  .text.op_query_xtal:0000000000000014 $d
     /tmp/cciWh9P3.s:16004  .rodata.op_query_print.str1.4:0000000000000000 $d
     /tmp/cciWh9P3.s:16008  .text.op_query_print:0000000000000000 $t
     /tmp/cciWh9P3.s:16016  .text.op_query_print:0000000000000000 op_query_print
     /tmp/cciWh9P3.s:16061  .text.op_query_print:0000000000000018 $d
     /tmp/cciWh9P3.s:16071  .text.cmdstostk:0000000000000000 $t
     /tmp/cciWh9P3.s:16079  .text.cmdstostk:0000000000000000 cmdstostk
     /tmp/cciWh9P3.s:16129  .text.cmdrclstk:0000000000000000 $t
     /tmp/cciWh9P3.s:16137  .text.cmdrclstk:0000000000000000 cmdrclstk
     /tmp/cciWh9P3.s:16190  .text.find_opcode_from:0000000000000000 $t
     /tmp/cciWh9P3.s:16198  .text.find_opcode_from:0000000000000000 find_opcode_from
     /tmp/cciWh9P3.s:16370  .text.find_opcode_from:000000000000006c $d
     /tmp/cciWh9P3.s:16375  .text.find_label_from:0000000000000000 $t
     /tmp/cciWh9P3.s:16383  .text.find_label_from:0000000000000000 find_label_from
     /tmp/cciWh9P3.s:16403  .text.op_rtn:0000000000000000 $t
     /tmp/cciWh9P3.s:16411  .text.op_rtn:0000000000000000 op_rtn
     /tmp/cciWh9P3.s:16445  .text.op_rtn:0000000000000020 $d
     /tmp/cciWh9P3.s:16451  .text.op_popusr:0000000000000000 $t
     /tmp/cciWh9P3.s:16459  .text.op_popusr:0000000000000000 op_popusr
     /tmp/cciWh9P3.s:16534  .text.op_popusr:0000000000000050 $d
                            *COM*:0000000000000004 XromUserPc
                            *COM*:0000000000000004 UserLocalRegs
     /tmp/cciWh9P3.s:16542  .text.findmultilbl:0000000000000000 $t
     /tmp/cciWh9P3.s:16550  .text.findmultilbl:0000000000000000 findmultilbl
     /tmp/cciWh9P3.s:16663  .text.findmultilbl:0000000000000048 $d
     /tmp/cciWh9P3.s:16668  .text.convC2F:0000000000000000 $t
     /tmp/cciWh9P3.s:16676  .text.convC2F:0000000000000000 convC2F
     /tmp/cciWh9P3.s:16718  .text.convC2F:000000000000001c $d
     /tmp/cciWh9P3.s:16724  .text.convF2C:0000000000000000 $t
     /tmp/cciWh9P3.s:16732  .text.convF2C:0000000000000000 convF2C
     /tmp/cciWh9P3.s:16774  .text.convF2C:000000000000001c $d
     /tmp/cciWh9P3.s:16780  .text.convDB2AR:0000000000000000 $t
     /tmp/cciWh9P3.s:16788  .text.convDB2AR:0000000000000000 convDB2AR
     /tmp/cciWh9P3.s:16830  .text.convDB2AR:000000000000001c $d
     /tmp/cciWh9P3.s:16835  .text.convAR2DB:0000000000000000 $t
     /tmp/cciWh9P3.s:16843  .text.convAR2DB:0000000000000000 convAR2DB
     /tmp/cciWh9P3.s:16884  .text.convAR2DB:000000000000001c $d
     /tmp/cciWh9P3.s:16889  .text.convDB2PR:0000000000000000 $t
     /tmp/cciWh9P3.s:16897  .text.convDB2PR:0000000000000000 convDB2PR
     /tmp/cciWh9P3.s:16938  .text.convPR2DB:0000000000000000 $t
     /tmp/cciWh9P3.s:16946  .text.convPR2DB:0000000000000000 convPR2DB
     /tmp/cciWh9P3.s:16987  .text.do_conv:0000000000000000 $t
     /tmp/cciWh9P3.s:16995  .text.do_conv:0000000000000000 do_conv
     /tmp/cciWh9P3.s:17087  .text.do_conv:0000000000000040 $d
     /tmp/cciWh9P3.s:17092  .text.cmdconv:0000000000000000 $t
     /tmp/cciWh9P3.s:17100  .text.cmdconv:0000000000000000 cmdconv
     /tmp/cciWh9P3.s:17188  .text.cmdconv:000000000000003c $d
     /tmp/cciWh9P3.s:17193  .text.fin_tst:0000000000000000 $t
     /tmp/cciWh9P3.s:17201  .text.fin_tst:0000000000000000 fin_tst
     /tmp/cciWh9P3.s:17259  .text.fin_tst:000000000000002c $d
     /tmp/cciWh9P3.s:17268  .text.check_mode:0000000000000000 $t
     /tmp/cciWh9P3.s:17276  .text.check_mode:0000000000000000 check_mode
     /tmp/cciWh9P3.s:17311  .text.check_mode:0000000000000024 $d
     /tmp/cciWh9P3.s:17316  .text.check_dblmode:0000000000000000 $t
     /tmp/cciWh9P3.s:17324  .text.check_dblmode:0000000000000000 check_dblmode
     /tmp/cciWh9P3.s:17357  .text.check_dblmode:000000000000001c $d
ARM GAS  /tmp/cciWh9P3.s 			page 887


     /tmp/cciWh9P3.s:17362  .text.isTop:0000000000000000 $t
     /tmp/cciWh9P3.s:17370  .text.isTop:0000000000000000 isTop
     /tmp/cciWh9P3.s:17434  .text.isTop:0000000000000038 $d
     /tmp/cciWh9P3.s:17443  .text.cmdlblp:0000000000000000 $t
     /tmp/cciWh9P3.s:17451  .text.cmdlblp:0000000000000000 cmdlblp
     /tmp/cciWh9P3.s:17503  .text.cmdlblp:0000000000000024 $d
     /tmp/cciWh9P3.s:17508  .text.cmdmultilblp:0000000000000000 $t
     /tmp/cciWh9P3.s:17516  .text.cmdmultilblp:0000000000000000 cmdmultilblp
     /tmp/cciWh9P3.s:17551  .text.cmdkeyp:0000000000000000 $t
     /tmp/cciWh9P3.s:17559  .text.cmdkeyp:0000000000000000 cmdkeyp
     /tmp/cciWh9P3.s:17654  .text.cmdkeyp:0000000000000044 $d
     /tmp/cciWh9P3.s:17659  .text.do_tst:0000000000000000 $t
     /tmp/cciWh9P3.s:17666  .text.do_tst:0000000000000000 do_tst
     /tmp/cciWh9P3.s:17810  .text.do_tst:0000000000000062 $d
     /tmp/cciWh9P3.s:18084  .text.do_tst:0000000000000160 $d
     /tmp/cciWh9P3.s:18091  .text.do_ztst:0000000000000000 $t
     /tmp/cciWh9P3.s:18098  .text.do_ztst:0000000000000000 do_ztst
     /tmp/cciWh9P3.s:18352  .text.do_ztst:00000000000000ac $d
     /tmp/cciWh9P3.s:18363  .text.check_zero:0000000000000000 $t
     /tmp/cciWh9P3.s:18371  .text.check_zero:0000000000000000 check_zero
     /tmp/cciWh9P3.s:18515  .text.check_zero:000000000000006c $d
     /tmp/cciWh9P3.s:18520  .text.cmdtest:0000000000000000 $t
     /tmp/cciWh9P3.s:18528  .text.cmdtest:0000000000000000 cmdtest
     /tmp/cciWh9P3.s:18549  .text.cmdztest:0000000000000000 $t
     /tmp/cciWh9P3.s:18557  .text.cmdztest:0000000000000000 cmdztest
     /tmp/cciWh9P3.s:18610  .text.cmdlincdec:0000000000000000 $t
     /tmp/cciWh9P3.s:18618  .text.cmdlincdec:0000000000000000 cmdlincdec
     /tmp/cciWh9P3.s:18639  .text.cmdloopz:0000000000000000 $t
     /tmp/cciWh9P3.s:18647  .text.cmdloopz:0000000000000000 cmdloopz
     /tmp/cciWh9P3.s:18680  .text.cmdloop:0000000000000000 $t
     /tmp/cciWh9P3.s:18688  .text.cmdloop:0000000000000000 cmdloop
     /tmp/cciWh9P3.s:19177  .text.cmdloop:00000000000001f4 $d
     /tmp/cciWh9P3.s:19183  .text.op_shift_digit:0000000000000000 $t
     /tmp/cciWh9P3.s:19191  .text.op_shift_digit:0000000000000000 op_shift_digit
     /tmp/cciWh9P3.s:19355  .text.op_shift_digit:0000000000000060 $d
     /tmp/cciWh9P3.s:19361  .text.get_user_flag:0000000000000000 $t
     /tmp/cciWh9P3.s:19369  .text.get_user_flag:0000000000000000 get_user_flag
     /tmp/cciWh9P3.s:19407  .text.cmdflag:0000000000000000 $t
     /tmp/cciWh9P3.s:19415  .text.cmdflag:0000000000000000 cmdflag
     /tmp/cciWh9P3.s:19460  .text.cmdflag:0000000000000028 $d
     /tmp/cciWh9P3.s:19617  .text.put_user_flag:0000000000000000 $t
     /tmp/cciWh9P3.s:19625  .text.put_user_flag:0000000000000000 put_user_flag
     /tmp/cciWh9P3.s:19654  .text.clrflags:0000000000000000 $t
     /tmp/cciWh9P3.s:19662  .text.clrflags:0000000000000000 clrflags
     /tmp/cciWh9P3.s:19709  .text.clrflags:000000000000002c $d
     /tmp/cciWh9P3.s:19714  .text.intws:0000000000000000 $t
     /tmp/cciWh9P3.s:19722  .text.intws:0000000000000000 intws
     /tmp/cciWh9P3.s:19945  .text.intws:00000000000000e4 $d
     /tmp/cciWh9P3.s:19954  .text.get_maxdenom:0000000000000000 $t
     /tmp/cciWh9P3.s:19962  .text.get_maxdenom:0000000000000000 get_maxdenom
     /tmp/cciWh9P3.s:19990  .text.get_maxdenom:000000000000001c $d
     /tmp/cciWh9P3.s:19995  .rodata.op_2frac.str1.4:0000000000000000 $d
     /tmp/cciWh9P3.s:20005  .text.op_2frac:0000000000000000 $t
     /tmp/cciWh9P3.s:20013  .text.op_2frac:0000000000000000 op_2frac
     /tmp/cciWh9P3.s:20185  .text.op_2frac:0000000000000090 $d
     /tmp/cciWh9P3.s:20195  .text.op_fracdenom:0000000000000000 $t
     /tmp/cciWh9P3.s:20203  .text.op_fracdenom:0000000000000000 op_fracdenom
ARM GAS  /tmp/cciWh9P3.s 			page 888


     /tmp/cciWh9P3.s:20358  .text.op_fracdenom:0000000000000080 $d
     /tmp/cciWh9P3.s:20363  .text.op_float:0000000000000000 $t
     /tmp/cciWh9P3.s:20371  .text.op_float:0000000000000000 op_float
     /tmp/cciWh9P3.s:20566  .text.op_float:00000000000000c4 $d
     /tmp/cciWh9P3.s:20577  .text.cmddisp:0000000000000000 $t
     /tmp/cciWh9P3.s:20585  .text.cmddisp:0000000000000000 cmddisp
     /tmp/cciWh9P3.s:20625  .text.cmddisp:0000000000000028 $d
     /tmp/cciWh9P3.s:20630  .text.set_int_base:0000000000000000 $t
     /tmp/cciWh9P3.s:20638  .text.set_int_base:0000000000000000 set_int_base
     /tmp/cciWh9P3.s:20745  .text.set_int_base:000000000000004c $d
     /tmp/cciWh9P3.s:20752  .text.op_fract:0000000000000000 $t
     /tmp/cciWh9P3.s:20760  .text.op_fract:0000000000000000 op_fract
     /tmp/cciWh9P3.s:20819  .text.op_fract:0000000000000040 $d
     /tmp/cciWh9P3.s:20824  .text.cmdsavem:0000000000000000 $t
     /tmp/cciWh9P3.s:20832  .text.cmdsavem:0000000000000000 cmdsavem
     /tmp/cciWh9P3.s:20866  .text.cmdsavem:0000000000000018 $d
     /tmp/cciWh9P3.s:20871  .text.set_entry:0000000000000000 $t
     /tmp/cciWh9P3.s:20879  .text.set_entry:0000000000000000 set_entry
     /tmp/cciWh9P3.s:20917  .text.set_entry:0000000000000020 $d
     /tmp/cciWh9P3.s:20924  .text.get_trig_mode:0000000000000000 $t
     /tmp/cciWh9P3.s:20932  .text.get_trig_mode:0000000000000000 get_trig_mode
     /tmp/cciWh9P3.s:20967  .text.get_trig_mode:0000000000000024 $d
     /tmp/cciWh9P3.s:20974  .text.cmdpause:0000000000000000 $t
     /tmp/cciWh9P3.s:20982  .text.cmdpause:0000000000000000 cmdpause
     /tmp/cciWh9P3.s:21022  .text.cmdpause:000000000000001c $d
                            *COM*:0000000000000001 Pause
     /tmp/cciWh9P3.s:21028  .text.op_setspeed:0000000000000000 $t
     /tmp/cciWh9P3.s:21036  .text.op_setspeed:0000000000000000 op_setspeed
     /tmp/cciWh9P3.s:21065  .text.op_setspeed:000000000000001c $d
     /tmp/cciWh9P3.s:21070  .text.op_prompt:0000000000000000 $t
     /tmp/cciWh9P3.s:21078  .text.op_prompt:0000000000000000 op_prompt
     /tmp/cciWh9P3.s:21150  .text.op_prompt:0000000000000028 $d
     /tmp/cciWh9P3.s:21156  .text.XisInt:0000000000000000 $t
     /tmp/cciWh9P3.s:21164  .text.XisInt:0000000000000000 XisInt
     /tmp/cciWh9P3.s:21276  .text.XisInt:000000000000005c $d
     /tmp/cciWh9P3.s:21281  .text.XisEvenOrOdd:0000000000000000 $t
     /tmp/cciWh9P3.s:21289  .text.XisEvenOrOdd:0000000000000000 XisEvenOrOdd
     /tmp/cciWh9P3.s:21403  .text.XisEvenOrOdd:0000000000000060 $d
     /tmp/cciWh9P3.s:21408  .text.XisPrime:0000000000000000 $t
     /tmp/cciWh9P3.s:21416  .text.XisPrime:0000000000000000 XisPrime
     /tmp/cciWh9P3.s:21576  .text.XisPrime:000000000000007c $d
     /tmp/cciWh9P3.s:21582  .text.isInfinite:0000000000000000 $t
     /tmp/cciWh9P3.s:21590  .text.isInfinite:0000000000000000 isInfinite
     /tmp/cciWh9P3.s:21642  .text.isInfinite:000000000000002c $d
     /tmp/cciWh9P3.s:21647  .text.isNan:0000000000000000 $t
     /tmp/cciWh9P3.s:21655  .text.isNan:0000000000000000 isNan
     /tmp/cciWh9P3.s:21722  .text.isNan:000000000000003c $d
     /tmp/cciWh9P3.s:21727  .text.isSpecial:0000000000000000 $t
     /tmp/cciWh9P3.s:21735  .text.isSpecial:0000000000000000 isSpecial
     /tmp/cciWh9P3.s:21802  .text.isSpecial:000000000000003c $d
     /tmp/cciWh9P3.s:21807  .text.op_entryp:0000000000000000 $t
     /tmp/cciWh9P3.s:21815  .text.op_entryp:0000000000000000 op_entryp
     /tmp/cciWh9P3.s:21836  .text.op_entryp:0000000000000010 $d
     /tmp/cciWh9P3.s:21841  .text.reg_decode:0000000000000000 $t
     /tmp/cciWh9P3.s:21849  .text.reg_decode:0000000000000000 reg_decode
     /tmp/cciWh9P3.s:22653  .text.reg_decode:0000000000000218 $d
     /tmp/cciWh9P3.s:22667  .text.op_regcopy:0000000000000000 $t
ARM GAS  /tmp/cciWh9P3.s 			page 889


     /tmp/cciWh9P3.s:22675  .text.op_regcopy:0000000000000000 op_regcopy
     /tmp/cciWh9P3.s:22778  .text.op_regcopy:0000000000000048 $d
     /tmp/cciWh9P3.s:22783  .text.op_regswap:0000000000000000 $t
     /tmp/cciWh9P3.s:22791  .text.op_regswap:0000000000000000 op_regswap
     /tmp/cciWh9P3.s:22925  .text.op_regswap:000000000000006c $d
     /tmp/cciWh9P3.s:22930  .text.op_regclr:0000000000000000 $t
     /tmp/cciWh9P3.s:22938  .text.op_regclr:0000000000000000 op_regclr
     /tmp/cciWh9P3.s:23019  .text.op_regclr:0000000000000044 $d
     /tmp/cciWh9P3.s:23024  .text.op_regsort:0000000000000000 $t
     /tmp/cciWh9P3.s:23032  .text.op_regsort:0000000000000000 op_regsort
     /tmp/cciWh9P3.s:23316  .text.reset_volatile_state:0000000000000000 $t
     /tmp/cciWh9P3.s:23324  .text.reset_volatile_state:0000000000000000 reset_volatile_state
     /tmp/cciWh9P3.s:23348  .text.reset_volatile_state:0000000000000010 $d
     /tmp/cciWh9P3.s:23353  .rodata.busy.str1.4:0000000000000000 $d
     /tmp/cciWh9P3.s:23357  .text.busy:0000000000000000 $t
     /tmp/cciWh9P3.s:23365  .text.busy:0000000000000000 busy
     /tmp/cciWh9P3.s:23404  .text.busy:0000000000000018 $d
                            *COM*:0000000000000004 Busy
     /tmp/cciWh9P3.s:23413  .text.intMonadic:0000000000000000 $t
     /tmp/cciWh9P3.s:23421  .text.intMonadic:0000000000000000 intMonadic
     /tmp/cciWh9P3.s:23650  .text.intMonadic:0000000000000084 $d
                            *COM*:0000000000000002 XeqOpCode
     /tmp/cciWh9P3.s:23660  .text.intDyadic:0000000000000000 $t
     /tmp/cciWh9P3.s:23668  .text.intDyadic:0000000000000000 intDyadic
     /tmp/cciWh9P3.s:23952  .text.intDyadic:00000000000000c0 $d
     /tmp/cciWh9P3.s:23962  .text.xeq_init_contexts:0000000000000000 $t
     /tmp/cciWh9P3.s:23970  .text.xeq_init_contexts:0000000000000000 xeq_init_contexts
     /tmp/cciWh9P3.s:24089  .text.xeq_init_contexts:0000000000000078 $d
                            *COM*:0000000000000004 ProgFree
     /tmp/cciWh9P3.s:24102  .text.plot_check_range:0000000000000000 $t
     /tmp/cciWh9P3.s:24110  .text.plot_check_range:0000000000000000 plot_check_range
     /tmp/cciWh9P3.s:24374  .text.plot_check_range:000000000000009c $d
     /tmp/cciWh9P3.s:24381  .text.cmdplotdisplay:0000000000000000 $t
     /tmp/cciWh9P3.s:24389  .text.cmdplotdisplay:0000000000000000 cmdplotdisplay
     /tmp/cciWh9P3.s:24440  .text.cmdplotdisplay:0000000000000020 $d
     /tmp/cciWh9P3.s:24445  .text.cmdplotinit:0000000000000000 $t
     /tmp/cciWh9P3.s:24453  .text.cmdplotinit:0000000000000000 cmdplotinit
     /tmp/cciWh9P3.s:24588  .text.cmdplotdim:0000000000000000 $t
     /tmp/cciWh9P3.s:24596  .text.cmdplotdim:0000000000000000 cmdplotdim
     /tmp/cciWh9P3.s:24733  .text.cmdplotdim:0000000000000044 $d
     /tmp/cciWh9P3.s:24742  .text.cmdplotpixel:0000000000000000 $t
     /tmp/cciWh9P3.s:24750  .text.cmdplotpixel:0000000000000000 cmdplotpixel
     /tmp/cciWh9P3.s:24957  .text.not_running:0000000000000000 $t
     /tmp/cciWh9P3.s:24965  .text.not_running:0000000000000000 not_running
     /tmp/cciWh9P3.s:25020  .text.not_running:000000000000001c $d
     /tmp/cciWh9P3.s:25026  .text.set_running_off_sst:0000000000000000 $t
     /tmp/cciWh9P3.s:25034  .text.set_running_off_sst:0000000000000000 set_running_off_sst
     /tmp/cciWh9P3.s:25051  .text.set_running_off_sst:0000000000000008 $d
     /tmp/cciWh9P3.s:25056  .text.set_running_on_sst:0000000000000000 $t
     /tmp/cciWh9P3.s:25064  .text.set_running_on_sst:0000000000000000 set_running_on_sst
     /tmp/cciWh9P3.s:25081  .text.set_running_on_sst:0000000000000008 $d
     /tmp/cciWh9P3.s:25086  .text.set_running_off:0000000000000000 $t
     /tmp/cciWh9P3.s:25094  .text.set_running_off:0000000000000000 set_running_off
     /tmp/cciWh9P3.s:25138  .text.set_running_off:000000000000001c $d
     /tmp/cciWh9P3.s:25144  .text.set_running_on:0000000000000000 $t
     /tmp/cciWh9P3.s:25152  .text.set_running_on:0000000000000000 set_running_on
     /tmp/cciWh9P3.s:25251  .text.set_running_on:0000000000000034 $d
ARM GAS  /tmp/cciWh9P3.s 			page 890


     /tmp/cciWh9P3.s:25259  .text.gsbgto:0000000000000000 $t
     /tmp/cciWh9P3.s:25266  .text.gsbgto:0000000000000000 gsbgto
     /tmp/cciWh9P3.s:25445  .text.gsbgto:000000000000008c $d
     /tmp/cciWh9P3.s:25456  .text.cmdgtocommon:0000000000000000 $t
     /tmp/cciWh9P3.s:25464  .text.cmdgtocommon:0000000000000000 cmdgtocommon
     /tmp/cciWh9P3.s:25550  .text.cmdgtocommon:000000000000002c $d
     /tmp/cciWh9P3.s:25556  .text.cmdgto:0000000000000000 $t
     /tmp/cciWh9P3.s:25564  .text.cmdgto:0000000000000000 cmdgto
     /tmp/cciWh9P3.s:25645  .text.cmdgto:000000000000003c $d
     /tmp/cciWh9P3.s:25653  .text.branchtoalpha:0000000000000000 $t
     /tmp/cciWh9P3.s:25660  .text.branchtoalpha:0000000000000000 branchtoalpha
     /tmp/cciWh9P3.s:25717  .text.cmdalphagto:0000000000000000 $t
     /tmp/cciWh9P3.s:25725  .text.cmdalphagto:0000000000000000 cmdalphagto
     /tmp/cciWh9P3.s:25777  .text.op_gtoalpha:0000000000000000 $t
     /tmp/cciWh9P3.s:25785  .text.op_gtoalpha:0000000000000000 op_gtoalpha
     /tmp/cciWh9P3.s:25849  .text.op_gtoalpha:0000000000000030 $d
     /tmp/cciWh9P3.s:25854  .text.cmdskip:0000000000000000 $t
     /tmp/cciWh9P3.s:25862  .text.cmdskip:0000000000000000 cmdskip
     /tmp/cciWh9P3.s:26045  .text.cmdskip:0000000000000078 $d
     /tmp/cciWh9P3.s:26053  .text.cmdback:0000000000000000 $t
     /tmp/cciWh9P3.s:26061  .text.cmdback:0000000000000000 cmdback
     /tmp/cciWh9P3.s:26214  .text.cmdback:0000000000000064 $d
     /tmp/cciWh9P3.s:26222  .text.usergsb_common:0000000000000000 $t
     /tmp/cciWh9P3.s:26229  .text.usergsb_common:0000000000000000 usergsb_common
     /tmp/cciWh9P3.s:26340  .text.usergsb_common:0000000000000078 $d
     /tmp/cciWh9P3.s:26349  .text.do_usergsb:0000000000000000 $t
     /tmp/cciWh9P3.s:26357  .text.do_usergsb:0000000000000000 do_usergsb
     /tmp/cciWh9P3.s:26390  .text.do_usergsb:0000000000000014 $d
     /tmp/cciWh9P3.s:26395  .text.cmdmultigto:0000000000000000 $t
     /tmp/cciWh9P3.s:26403  .text.cmdmultigto:0000000000000000 cmdmultigto
     /tmp/cciWh9P3.s:26507  .text.cmdmultigto:000000000000004c $d
     /tmp/cciWh9P3.s:26513  .text.store_a_to_d:0000000000000000 $t
     /tmp/cciWh9P3.s:26521  .text.store_a_to_d:0000000000000000 store_a_to_d
     /tmp/cciWh9P3.s:26569  .text.store_a_to_d:0000000000000020 $d
     /tmp/cciWh9P3.s:26574  .text.cmdlocr:0000000000000000 $t
     /tmp/cciWh9P3.s:26582  .text.cmdlocr:0000000000000000 cmdlocr
     /tmp/cciWh9P3.s:26918  .text.cmdlocr:000000000000015c $d
     /tmp/cciWh9P3.s:26926  .text.cmdxout:0000000000000000 $t
     /tmp/cciWh9P3.s:26934  .text.cmdxout:0000000000000000 cmdxout
     /tmp/cciWh9P3.s:27456  .text.cmdxout:00000000000001e4 $d
     /tmp/cciWh9P3.s:27471  .text.cmdconverged:0000000000000000 $t
     /tmp/cciWh9P3.s:27479  .text.cmdconverged:0000000000000000 cmdconverged
     /tmp/cciWh9P3.s:27708  .text.cmdconverged:00000000000000e0 $d
     /tmp/cciWh9P3.s:27718  .text.cmdshuffle:0000000000000000 $t
     /tmp/cciWh9P3.s:27726  .text.cmdshuffle:0000000000000000 cmdshuffle
     /tmp/cciWh9P3.s:27959  .text.cmdshuffle:0000000000000084 $d
     /tmp/cciWh9P3.s:27965  .text.cmdmode:0000000000000000 $t
     /tmp/cciWh9P3.s:27973  .text.cmdmode:0000000000000000 cmdmode
     /tmp/cciWh9P3.s:28054  .text.cmdmode:0000000000000050 $d
     /tmp/cciWh9P3.s:28059  .text.cmdlpop:0000000000000000 $t
     /tmp/cciWh9P3.s:28067  .text.cmdlpop:0000000000000000 cmdlpop
     /tmp/cciWh9P3.s:28139  .text.cmdlpop:0000000000000034 $d
     /tmp/cciWh9P3.s:28145  .text.cmdregs:0000000000000000 $t
     /tmp/cciWh9P3.s:28153  .text.cmdregs:0000000000000000 cmdregs
     /tmp/cciWh9P3.s:28333  .text.cmdregs:00000000000000ac $d
     /tmp/cciWh9P3.s:28340  .text.op_double:0000000000000000 $t
     /tmp/cciWh9P3.s:28348  .text.op_double:0000000000000000 op_double
ARM GAS  /tmp/cciWh9P3.s 			page 891


     /tmp/cciWh9P3.s:28648  .text.op_double:000000000000011c $d
     /tmp/cciWh9P3.s:28655  .text.cmdrestm:0000000000000000 $t
     /tmp/cciWh9P3.s:28663  .text.cmdrestm:0000000000000000 cmdrestm
     /tmp/cciWh9P3.s:28857  .text.cmdrestm:00000000000000a8 $d
     /tmp/cciWh9P3.s:28862  .text.cmdxin:0000000000000000 $t
     /tmp/cciWh9P3.s:28870  .text.cmdxin:0000000000000000 cmdxin
     /tmp/cciWh9P3.s:29296  .text.cmdxin:00000000000001b0 $d
     /tmp/cciWh9P3.s:29309  .rodata.xeq.str1.4:0000000000000000 $d
     /tmp/cciWh9P3.s:29313  .text.xeq:0000000000000000 $t
     /tmp/cciWh9P3.s:29321  .text.xeq:0000000000000000 xeq
     /tmp/cciWh9P3.s:29466  .text.xeq:0000000000000086 $d
     /tmp/cciWh9P3.s:29473  .text.xeq:0000000000000094 $t
     /tmp/cciWh9P3.s:33545  .text.dispatch_xrom:0000000000000000 dispatch_xrom
     /tmp/cciWh9P3.s:29959  .text.xeq:0000000000000244 $d
     /tmp/cciWh9P3.s:29990  .text.xeq:0000000000000280 $t
     /tmp/cciWh9P3.s:30375  .text.xeq:00000000000003e0 $d
     /tmp/cciWh9P3.s:30419  .text.xeq:0000000000000436 $t
     /tmp/cciWh9P3.s:30937  .text.xeq:0000000000000564 $d
     /tmp/cciWh9P3.s:30964  .text.xeq:0000000000000584 $t
     /tmp/cciWh9P3.s:31866  .text.xeq:0000000000000864 $d
     /tmp/cciWh9P3.s:31880  .text.xeq:0000000000000890 $t
     /tmp/cciWh9P3.s:32761  .text.xeq:0000000000000b80 $d
     /tmp/cciWh9P3.s:32776  .text.xeq:0000000000000b9c $t
     /tmp/cciWh9P3.s:33270  .text.xeq:0000000000000d58 $d
     /tmp/cciWh9P3.s:33282  .text.xeq_single:0000000000000000 $t
     /tmp/cciWh9P3.s:33289  .text.xeq_single:0000000000000000 xeq_single
     /tmp/cciWh9P3.s:33328  .text.xeq_single:0000000000000020 $d
     /tmp/cciWh9P3.s:33333  .text.xeq_xrom2:0000000000000000 $t
     /tmp/cciWh9P3.s:33340  .text.xeq_xrom2:0000000000000000 xeq_xrom2
     /tmp/cciWh9P3.s:33488  .text.xeq_xrom2:0000000000000070 $d
     /tmp/cciWh9P3.s:33502  .text.xeq_xrom:0000000000000000 $t
     /tmp/cciWh9P3.s:33510  .text.xeq_xrom:0000000000000000 xeq_xrom
     /tmp/cciWh9P3.s:33533  .text.xeq_xrom:0000000000000010 $d
     /tmp/cciWh9P3.s:33538  .text.dispatch_xrom:0000000000000000 $t
     /tmp/cciWh9P3.s:33676  .text.dispatch_xrom:000000000000005c $d
     /tmp/cciWh9P3.s:33686  .text.op_rs:0000000000000000 $t
     /tmp/cciWh9P3.s:33694  .text.op_rs:0000000000000000 op_rs
     /tmp/cciWh9P3.s:33838  .text.op_rs:0000000000000078 $d
     /tmp/cciWh9P3.s:33847  .text.xeqprog:0000000000000000 $t
     /tmp/cciWh9P3.s:33855  .text.xeqprog:0000000000000000 xeqprog
     /tmp/cciWh9P3.s:33999  .text.xeqprog:0000000000000078 $d
                            *COM*:0000000000000004 JustStopped
     /tmp/cciWh9P3.s:34008  .text.xeq_sst_bst:0000000000000000 $t
     /tmp/cciWh9P3.s:34016  .text.xeq_sst_bst:0000000000000000 xeq_sst_bst
     /tmp/cciWh9P3.s:34229  .text.xeq_sst_bst:000000000000009c $d
     /tmp/cciWh9P3.s:34239  .text.init_34s:0000000000000000 $t
     /tmp/cciWh9P3.s:34247  .text.init_34s:0000000000000000 init_34s
     /tmp/cciWh9P3.s:34299  .text.init_34s:0000000000000028 $d
     /tmp/cciWh9P3.s:34304  .rodata.paste_raw_x.str1.4:0000000000000000 $d
     /tmp/cciWh9P3.s:34308  .text.paste_raw_x:0000000000000000 $t
     /tmp/cciWh9P3.s:34316  .text.paste_raw_x:0000000000000000 paste_raw_x
     /tmp/cciWh9P3.s:34655  .text.paste_raw_x:00000000000000ec $d
     /tmp/cciWh9P3.s:34668  .rodata.fill_buffer_from_raw_x.str1.4:0000000000000000 $d
     /tmp/cciWh9P3.s:34672  .text.fill_buffer_from_raw_x:0000000000000000 $t
     /tmp/cciWh9P3.s:34680  .text.fill_buffer_from_raw_x:0000000000000000 fill_buffer_from_raw_x
     /tmp/cciWh9P3.s:34906  .text.fill_buffer_from_raw_x:00000000000000b8 $d
                            *COM*:0000000000000004 RectPolConv
ARM GAS  /tmp/cciWh9P3.s 			page 892


     /tmp/cciWh9P3.s:34991  .rodata.xrom_targets:0000000000000000 xrom_targets
     /tmp/cciWh9P3.s:34931  .rodata:0000000000000000 $d
     /tmp/cciWh9P3.s:34939  .bss.result.11352:0000000000000000 $d
     /tmp/cciWh9P3.s:34943  .bss.result.11352:0000000000000000 result.11352
     /tmp/cciWh9P3.s:34946  .data.RegionTab:0000000000000000 $d
     /tmp/cciWh9P3.s:34950  .data.RegionTab:0000000000000000 RegionTab
     /tmp/cciWh9P3.s:34956  .rodata.StackRegMask:0000000000000000 $d
     /tmp/cciWh9P3.s:34960  .rodata.StackRegMask:0000000000000000 StackRegMask
     /tmp/cciWh9P3.s:34964  .rodata.convergence_tolerances:0000000000000000 $d
     /tmp/cciWh9P3.s:34968  .rodata.convergence_tolerances:0000000000000000 convergence_tolerances
     /tmp/cciWh9P3.s:34973  .rodata.modes.11092:0000000000000000 $d
     /tmp/cciWh9P3.s:34977  .rodata.modes.11092:0000000000000000 modes.11092
     /tmp/cciWh9P3.s:34980  .rodata.modes.11562:0000000000000000 $d
     /tmp/cciWh9P3.s:34984  .rodata.modes.11562:0000000000000000 modes.11562
     /tmp/cciWh9P3.s:34987  .rodata.xrom_targets:0000000000000000 $d
     /tmp/cciWh9P3.s:17817  .text.do_tst:0000000000000069 $d
     /tmp/cciWh9P3.s:17817  .text.do_tst:000000000000006a $t
     /tmp/cciWh9P3.s:19471  .text.cmdflag:0000000000000033 $d
     /tmp/cciWh9P3.s:19471  .text.cmdflag:0000000000000034 $t

UNDEFINED SYMBOLS
StateWhileOn
main_ram
xrom_size
XromParams
XromLocal
xset
decNumberRoundDigits
decNumberTrunc
dn_eq
set_carry
dn_to_ull
dn_abs
check_overflow
set_overflow
build_value
dn_lt
const_2pow64
xcopy
argcmds
display
shutdown
library_ram
backup_ram
scopy
num_arg_0
prt
scopy_char
DispMsg
dot
error_message
JustDisplayed
ShowRPN
decContextDefault
decimal64FromNumber
decimal128FromNumber
decimal64ToNumber
ARM GAS  /tmp/cciWh9P3.s 			page 893


decimal128ToNumber
int_base
reset_shift
cnsts
cnsts_d128
cnsts_d64
dn_max
dn_add
dn_subtract
dn_multiply
dn_divide
dn_min
cmplxDivide
cmplxAdd
cmplxSubtract
cmplxMultiply
decNumberNormalize
decNumberRoundDecimals
intMax
intAdd
intSubtract
intMultiply
intDivide
intMin
extract_value
dn_dec
dn_eq0
dn_inc
row_column_to_keycode
ullint_to_dn
dn_minus
find_char
decNumberFromString
word_size
int_mode
dn_mulpow10
put_key
const_9on5
const_32
decNumberPow10
const_0_05
dn_log10
const_20
decNumberCopy
cnsts_conv
keycode_to_row_column
dn_compare
decNumberRnd
dn_mul100
dn_le0
dn_lt0
dn_1
finish_display
mask_value
int_to_dn
decNumber2Fraction
GoFast
ARM GAS  /tmp/cciWh9P3.s 			page 894


alpha_view_common
is_int
is_even
isPrime
dn_to_int
message
monfuncs
xrom
dyfuncs
SizeStatRegs
frozen_display
DispPlot
alpha_rcl_s
XromA2D
relative_error
cmplxR
absolute_error
const_1e_14
const_1e_32
const_1e_24
const_NaN
sprintf
niladics
multicmds
trifuncs
intChs
const_1
const_0
sigma_minus
sigma_val
set_NaN
sigma_plus
is_key_pressed
clr_dot
set_dot
OpCode
checksum_ram
init_state
reset
strdup
strtok
strtoull
strchr
free
__aeabi_uldivmod
decNumberToString

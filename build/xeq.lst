ARM GAS  /tmp/ccaPnj5t.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xeq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.find_section_bounds,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	find_section_bounds:
  27              	.LVL0:
  28              	.LFB19:
  29              		.file 1 "src/xeq.c"
   1:src/xeq.c     **** /* This file is part of 34S.
   2:src/xeq.c     ****  * 
   3:src/xeq.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/xeq.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/xeq.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/xeq.c     ****  * (at your option) any later version.
   7:src/xeq.c     ****  * 
   8:src/xeq.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/xeq.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/xeq.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/xeq.c     ****  * GNU General Public License for more details.
  12:src/xeq.c     ****  * 
  13:src/xeq.c     ****  * You should have received a copy of the GNU General Public License
  14:src/xeq.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/xeq.c     ****  */
  16:src/xeq.c     **** 
  17:src/xeq.c     **** #ifndef REALBUILD
  18:src/xeq.c     **** 
  19:src/xeq.c     **** #if defined(WIN32) && !defined(QTGUI) && !defined(IOS) && !defined(__GNUC__) && !defined(DM42)
  20:src/xeq.c     **** 
  21:src/xeq.c     **** #include <stdlib.h>  // sleep
  22:src/xeq.c     **** #include "win32.h"
  23:src/xeq.c     **** #define sleep _sleep
  24:src/xeq.c     **** #define strtoull _strtoui64
  25:src/xeq.c     **** 
  26:src/xeq.c     **** #else
  27:src/xeq.c     **** 
  28:src/xeq.c     **** #ifdef DM42
  29:src/xeq.c     **** #include "dmcp.h"
ARM GAS  /tmp/ccaPnj5t.s 			page 2


  30:src/xeq.c     **** #else
  31:src/xeq.c     **** #include <unistd.h>
  32:src/xeq.c     **** #include <sys/time.h>
  33:src/xeq.c     **** extern unsigned long long strtoull(const char *, char **, int);
  34:src/xeq.c     **** #endif
  35:src/xeq.c     **** 
  36:src/xeq.c     **** #endif
  37:src/xeq.c     **** 
  38:src/xeq.c     **** #include <stdio.h>   // (s)printf
  39:src/xeq.c     **** #include <string.h>
  40:src/xeq.c     **** #include <stdlib.h>
  41:src/xeq.c     **** 
  42:src/xeq.c     **** #endif // not REALBUILD
  43:src/xeq.c     **** 
  44:src/xeq.c     **** #ifdef IOS
  45:src/xeq.c     **** #include <stdarg.h>
  46:src/xeq.c     **** #endif
  47:src/xeq.c     **** 
  48:src/xeq.c     **** #if __GNUC__ >= 4 && __GNUC_MINOR__ >= 6
  49:src/xeq.c     **** #define GNUC_POP_ERROR
  50:src/xeq.c     **** #pragma GCC diagnostic push
  51:src/xeq.c     **** #pragma GCC diagnostic ignored "-Warray-bounds"
  52:src/xeq.c     **** #endif
  53:src/xeq.c     **** 
  54:src/xeq.c     **** #define XEQ_INTERNAL 1
  55:src/xeq.c     **** #define DM42SAFE
  56:src/xeq.c     **** #include "xeq.h"
  57:src/xeq.c     **** #ifdef DM42
  58:src/xeq.c     **** #include "keys.h"
  59:src/xeq.c     **** #endif
  60:src/xeq.c     **** #include "storage.h"
  61:src/xeq.c     **** #include "decn.h"
  62:src/xeq.c     **** #include "complex.h"
  63:src/xeq.c     **** #include "stats.h"
  64:src/xeq.c     **** #include "display.h"
  65:src/xeq.c     **** #include "consts.h"
  66:src/xeq.c     **** #include "int.h"
  67:src/xeq.c     **** #include "date.h"
  68:src/xeq.c     **** #include "lcd.h"
  69:src/xeq.c     **** #include "xrom.h"
  70:src/xeq.c     **** #include "alpha.h"
  71:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
  72:src/xeq.c     **** #include "stopwatch.h"
  73:src/xeq.c     **** #endif
  74:src/xeq.c     **** #ifndef DM42
  75:src/xeq.c     **** #include "printer.h"
  76:src/xeq.c     **** #endif
  77:src/xeq.c     **** #undef DM42SAFE
  78:src/xeq.c     **** 
  79:src/xeq.c     **** #include "pretty.h"
  80:src/xeq.c     **** 
  81:src/xeq.c     **** 
  82:src/xeq.c     **** #include "xrom_targets.c"	// Generated by PP
  83:src/xeq.c     **** 
  84:src/xeq.c     **** /* Define the number of program Ticks that must elapse between flashing the
  85:src/xeq.c     ****  * RCL annunciator.
  86:src/xeq.c     ****  */
ARM GAS  /tmp/ccaPnj5t.s 			page 3


  87:src/xeq.c     **** #define TICKS_PER_FLASH	(5)
  88:src/xeq.c     **** 
  89:src/xeq.c     **** /*
  90:src/xeq.c     ****  *  A program is running
  91:src/xeq.c     ****  */
  92:src/xeq.c     **** FLAG Running;
  93:src/xeq.c     **** FLAG XromRunning;
  94:src/xeq.c     **** 
  95:src/xeq.c     **** #ifndef CONSOLE
  96:src/xeq.c     **** /*
  97:src/xeq.c     ****  *  A program has just stopped
  98:src/xeq.c     ****  */
  99:src/xeq.c     **** FLAG JustStopped;
 100:src/xeq.c     **** #endif
 101:src/xeq.c     **** 
 102:src/xeq.c     **** /*
 103:src/xeq.c     ****  *  Count down counter for a programmed pause
 104:src/xeq.c     ****  */
 105:src/xeq.c     **** volatile unsigned char Pause;
 106:src/xeq.c     **** 
 107:src/xeq.c     **** /*
 108:src/xeq.c     ****  *  Some long running function has called busy();
 109:src/xeq.c     ****  */
 110:src/xeq.c     **** FLAG Busy;
 111:src/xeq.c     **** 
 112:src/xeq.c     **** /*
 113:src/xeq.c     ****  *  Error code
 114:src/xeq.c     ****  */
 115:src/xeq.c     **** SMALL_INT Error;
 116:src/xeq.c     **** 
 117:src/xeq.c     **** /*
 118:src/xeq.c     ****  *  Indication of PC wrap around
 119:src/xeq.c     ****  */
 120:src/xeq.c     **** FLAG PcWrapped;
 121:src/xeq.c     **** 
 122:src/xeq.c     **** /*
 123:src/xeq.c     ****  *  Currently executed function
 124:src/xeq.c     ****  */
 125:src/xeq.c     **** s_opcode XeqOpCode;
 126:src/xeq.c     **** 
 127:src/xeq.c     **** /*
 128:src/xeq.c     ****  *  Temporary display (not X)
 129:src/xeq.c     ****  */
 130:src/xeq.c     **** SMALL_INT ShowRegister;
 131:src/xeq.c     **** 
 132:src/xeq.c     **** /*
 133:src/xeq.c     ****  *  User code being called from XROM
 134:src/xeq.c     ****  */
 135:src/xeq.c     **** SMALL_INT XromUserPc;
 136:src/xeq.c     **** SMALL_INT UserLocalRegs;
 137:src/xeq.c     **** 
 138:src/xeq.c     **** /* We need various different math contexts.
 139:src/xeq.c     ****  * More efficient to define these globally and reuse them as needed.
 140:src/xeq.c     ****  */
 141:src/xeq.c     **** decContext Ctx;
 142:src/xeq.c     **** 
 143:src/xeq.c     **** /*
ARM GAS  /tmp/ccaPnj5t.s 			page 4


 144:src/xeq.c     ****  * A buffer for instruction display
 145:src/xeq.c     ****  */
 146:src/xeq.c     **** char TraceBuffer[25];
 147:src/xeq.c     **** 
 148:src/xeq.c     **** /*
 149:src/xeq.c     ****  *  Total Size of the return stack
 150:src/xeq.c     ****  */
 151:src/xeq.c     **** SMALL_INT RetStkSize;
 152:src/xeq.c     **** 
 153:src/xeq.c     **** /*
 154:src/xeq.c     ****  *  Number of remaining program steps
 155:src/xeq.c     ****  */
 156:src/xeq.c     **** SMALL_INT ProgFree;
 157:src/xeq.c     **** 
 158:src/xeq.c     **** /*
 159:src/xeq.c     ****  * The actual top of the return stack
 160:src/xeq.c     ****  */
 161:src/xeq.c     **** unsigned short *RetStk;
 162:src/xeq.c     **** 
 163:src/xeq.c     **** /*
 164:src/xeq.c     ****  *  The location of the RPN stack
 165:src/xeq.c     ****  */
 166:src/xeq.c     **** REGISTER *StackBase;
 167:src/xeq.c     **** 
 168:src/xeq.c     **** #ifdef INFRARED
 169:src/xeq.c     **** /*
 170:src/xeq.c     ****  *  Is tracing active?
 171:src/xeq.c     ****  */
 172:src/xeq.c     **** FLAG Tracing;
 173:src/xeq.c     **** #endif
 174:src/xeq.c     **** 
 175:src/xeq.c     **** /*
 176:src/xeq.c     **** *	Indicates that a coordinate converstion has just happened
 177:src/xeq.c     **** */
 178:src/xeq.c     **** #ifdef RP_PREFIX
 179:src/xeq.c     **** SMALL_INT RectPolConv; // 1 - R->P just done; 2 - P->R just done
 180:src/xeq.c     **** #endif
 181:src/xeq.c     **** 
 182:src/xeq.c     **** /*
 183:src/xeq.c     ****  *  Check if the current PC is in XROM
 184:src/xeq.c     ****  */
 185:src/xeq.c     **** int is_xrom(void) {
 186:src/xeq.c     **** 	return isXROM(state_pc());
 187:src/xeq.c     **** }
 188:src/xeq.c     **** 
 189:src/xeq.c     **** /*
 190:src/xeq.c     ****  *  Shift the return stack.
 191:src/xeq.c     ****  *  The distance is in levels.
 192:src/xeq.c     ****  *  If argument is negative, return stack will shrink.
 193:src/xeq.c     ****  *  Returns 1 if unsuccessful (error is set)
 194:src/xeq.c     ****  */
 195:src/xeq.c     **** int move_retstk(int distance)
 196:src/xeq.c     **** {
 197:src/xeq.c     **** #ifndef REALBUILD
 198:src/xeq.c     **** 	// Sanity check
 199:src/xeq.c     **** 	if (XromFlags.xIN) {
 200:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
ARM GAS  /tmp/ccaPnj5t.s 			page 5


 201:src/xeq.c     **** 		return 1;
 202:src/xeq.c     **** 	}
 203:src/xeq.c     **** #endif
 204:src/xeq.c     **** 	if (RetStkSize + RetStkPtr + distance < 0) {
 205:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 206:src/xeq.c     **** 		return 1;
 207:src/xeq.c     **** 	}
 208:src/xeq.c     **** 	xcopy(RetStk + RetStkPtr + distance, RetStk + RetStkPtr, (-RetStkPtr) << 1);
 209:src/xeq.c     **** 	RetStk += distance;
 210:src/xeq.c     **** 	RetStkSize += distance;
 211:src/xeq.c     **** 	return 0;
 212:src/xeq.c     **** }
 213:src/xeq.c     **** 
 214:src/xeq.c     **** /*
 215:src/xeq.c     ****  *  How many stack levels with local data have we?
 216:src/xeq.c     ****  */
 217:src/xeq.c     **** int local_levels(void) {
 218:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 219:src/xeq.c     **** }
 220:src/xeq.c     **** 
 221:src/xeq.c     **** /*
 222:src/xeq.c     ****  *  How many local registers have we?
 223:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 224:src/xeq.c     ****  */
 225:src/xeq.c     **** int local_regs_rarg(enum rarg op) {
 226:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 227:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 228:src/xeq.c     **** }
 229:src/xeq.c     **** 
 230:src/xeq.c     **** /*
 231:src/xeq.c     ****  *  How many local registers have we?
 232:src/xeq.c     ****  */
 233:src/xeq.c     **** int local_regs(void) {
 234:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 235:src/xeq.c     **** }
 236:src/xeq.c     **** 
 237:src/xeq.c     **** /*
 238:src/xeq.c     ****  *  How many global registers have we?
 239:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 240:src/xeq.c     ****  */
 241:src/xeq.c     **** unsigned int global_regs_rarg(enum rarg op) {
 242:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 243:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 244:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 245:src/xeq.c     **** 	}
 246:src/xeq.c     **** 	else
 247:src/xeq.c     **** 		return NumRegs;
 248:src/xeq.c     **** }
 249:src/xeq.c     **** 
 250:src/xeq.c     **** /*
 251:src/xeq.c     ****  *  How many global registers have we?
 252:src/xeq.c     ****  */
 253:src/xeq.c     **** unsigned int global_regs(void) {
 254:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 255:src/xeq.c     **** }
 256:src/xeq.c     **** 
 257:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 6


 258:src/xeq.c     **** #if defined(CONSOLE)
 259:src/xeq.c     **** // Console screen only
 260:src/xeq.c     **** unsigned int get_local_flags(void) {
 261:src/xeq.c     **** 	if (LocalRegs == 0)
 262:src/xeq.c     **** 		return 0;
 263:src/xeq.c     **** 	return RetStk[LocalRegs + 1];
 264:src/xeq.c     **** }
 265:src/xeq.c     **** #endif
 266:src/xeq.c     **** 
 267:src/xeq.c     **** void version(enum nilop op) {
 268:src/xeq.c     **** 	State2.version = 1;
 269:src/xeq.c     **** 	if (!State2.runmode)
 270:src/xeq.c     **** 		display();
 271:src/xeq.c     **** }
 272:src/xeq.c     **** 
 273:src/xeq.c     **** void cmd_off(enum nilop op) {
 274:src/xeq.c     **** 	shutdown();
 275:src/xeq.c     **** }
 276:src/xeq.c     **** 
 277:src/xeq.c     **** #ifndef state_pc
 278:src/xeq.c     **** unsigned int state_pc(void) {
 279:src/xeq.c     **** 	return State.pc;	
 280:src/xeq.c     **** }
 281:src/xeq.c     **** #endif
 282:src/xeq.c     **** static void raw_set_pc(unsigned int pc) {
 283:src/xeq.c     **** 	State.pc = pc;
 284:src/xeq.c     **** 	update_program_bounds(0);
 285:src/xeq.c     **** }
 286:src/xeq.c     **** 
 287:src/xeq.c     **** /*
 288:src/xeq.c     ****  *  Where do the program regions start?
 289:src/xeq.c     ****  */
 290:src/xeq.c     **** #ifdef DM42
 291:src/xeq.c     **** static s_opcode * RegionTab[] = {
 292:src/xeq.c     **** 	NULL,
 293:src/xeq.c     **** 	NULL,
 294:src/xeq.c     **** 	NULL,
 295:src/xeq.c     **** 	xrom
 296:src/xeq.c     **** };
 297:src/xeq.c     **** void init_RegionTab (void) {
 298:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 299:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 300:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 301:src/xeq.c     **** }
 302:src/xeq.c     **** #else
 303:src/xeq.c     **** static const s_opcode *const RegionTab[] = {
 304:src/xeq.c     **** 	Prog,
 305:src/xeq.c     **** 	UserFlash.prog,
 306:src/xeq.c     **** 	BackupFlash._prog,
 307:src/xeq.c     **** 	xrom
 308:src/xeq.c     **** };
 309:src/xeq.c     **** #endif
 310:src/xeq.c     **** /*
 311:src/xeq.c     ****  *  Size of a program segment
 312:src/xeq.c     ****  */
 313:src/xeq.c     **** int sizeLIB(int region) {
 314:src/xeq.c     **** 	if (region == REGION_XROM)
ARM GAS  /tmp/ccaPnj5t.s 			page 7


 315:src/xeq.c     **** 		return xrom_size;
 316:src/xeq.c     **** 	else
 317:src/xeq.c     **** 		return (int)RegionTab[region][-1];
 318:src/xeq.c     **** }
 319:src/xeq.c     **** 
 320:src/xeq.c     **** 
 321:src/xeq.c     **** /*
 322:src/xeq.c     ****  *  Get an opcode, check for double length codes
 323:src/xeq.c     ****  */
 324:src/xeq.c     **** static opcode get_opcode( const s_opcode *loc )
 325:src/xeq.c     **** {
 326:src/xeq.c     **** 	opcode r = *loc;
 327:src/xeq.c     **** 	if ( isDBL(r) ) {
 328:src/xeq.c     **** 		r |= loc[1] << 16;
 329:src/xeq.c     **** 	}
 330:src/xeq.c     **** 	return r;
 331:src/xeq.c     **** }
 332:src/xeq.c     **** 
 333:src/xeq.c     **** 
 334:src/xeq.c     **** /* 
 335:src/xeq.c     ****  * Return the program memory location specified.
 336:src/xeq.c     ****  */
 337:src/xeq.c     **** opcode getprog(unsigned int pc) {
 338:src/xeq.c     **** 
 339:src/xeq.c     **** 	const int region = nLIB(pc);
 340:src/xeq.c     **** 	int offset = offsetLIB(pc);
 341:src/xeq.c     **** 
 342:src/xeq.c     **** 	if (offset < 0 || offset >= sizeLIB(region))
 343:src/xeq.c     **** 		return OP_NIL | OP_END;
 344:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 345:src/xeq.c     **** }
 346:src/xeq.c     **** 
 347:src/xeq.c     **** 
 348:src/xeq.c     **** /* 
 349:src/xeq.c     ****  * Return the physical start-address of the current program
 350:src/xeq.c     ****  */
 351:src/xeq.c     **** const s_opcode *get_current_prog(void) {
 352:src/xeq.c     **** 
 353:src/xeq.c     **** 	const int region = nLIB(ProgBegin);
 354:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 355:src/xeq.c     **** }
 356:src/xeq.c     **** 
 357:src/xeq.c     **** 
 358:src/xeq.c     **** /*
 359:src/xeq.c     ****  *  Set PC with sanity check
 360:src/xeq.c     ****  */
 361:src/xeq.c     **** void set_pc(unsigned int pc) {
 362:src/xeq.c     **** 	if (isRAM(pc)) {
 363:src/xeq.c     **** 		if (pc > ProgSize)
 364:src/xeq.c     **** 			pc = ProgSize;
 365:src/xeq.c     **** 		if (pc > 1 && isDBL(Prog_1[pc - 1]))
 366:src/xeq.c     **** 			pc--;
 367:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 368:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 369:src/xeq.c     **** 		if (pc > n - 1)
 370:src/xeq.c     **** 			pc = n - 1;
 371:src/xeq.c     **** 		if (pc > startLIB(pc) && isDBL(getprog(pc - 1)))
ARM GAS  /tmp/ccaPnj5t.s 			page 8


 372:src/xeq.c     **** 			--pc;
 373:src/xeq.c     **** 	}
 374:src/xeq.c     **** 	raw_set_pc(pc);
 375:src/xeq.c     **** }
 376:src/xeq.c     **** 
 377:src/xeq.c     **** 
 378:src/xeq.c     **** 
 379:src/xeq.c     **** /* Locate the beginning and end of a section from a PC that points anywhere within
 380:src/xeq.c     ****  */
 381:src/xeq.c     **** static unsigned short int find_section_bounds(const unsigned int pc, const int endp, unsigned short
  30              		.loc 1 381 119 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 382:src/xeq.c     **** 	unsigned short int top, bottom;
  35              		.loc 1 382 2 view .LVU1
 383:src/xeq.c     **** 
 384:src/xeq.c     **** 	if (endp && State2.runmode) { 
  36              		.loc 1 384 2 view .LVU2
  37              		.loc 1 384 5 is_stmt 0 view .LVU3
  38 0000 71B1     		cbz	r1, .L2
  39              		.loc 1 384 11 discriminator 1 view .LVU4
  40 0002 194B     		ldr	r3, .L14
  41 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
  42 0006 5B06     		lsls	r3, r3, #25
  43 0008 0AD5     		bpl	.L2
 385:src/xeq.c     **** 		// Use the current program as bounds
 386:src/xeq.c     **** 		top = ProgBegin;
  44              		.loc 1 386 3 is_stmt 1 view .LVU5
  45              		.loc 1 386 9 is_stmt 0 view .LVU6
  46 000a 184B     		ldr	r3, .L14+4
  47 000c 1968     		ldr	r1, [r3]
  48              	.LVL1:
 387:src/xeq.c     **** 		bottom = ProgEnd;
  49              		.loc 1 387 3 is_stmt 1 view .LVU7
  50 000e B1F8EC37 		ldrh	r3, [r1, #2028]
  51              		.loc 1 387 10 is_stmt 0 view .LVU8
  52 0012 B1F8EE07 		ldrh	r0, [r1, #2030]
  53              	.LVL2:
 388:src/xeq.c     **** 		if (top == 0)
  54              		.loc 1 388 3 is_stmt 1 view .LVU9
  55 0016 012B     		cmp	r3, #1
  56 0018 38BF     		it	cc
  57 001a 0123     		movcc	r3, #1
  58              	.LVL3:
 389:src/xeq.c     **** 			top = 1;
 390:src/xeq.c     **** 	}
 391:src/xeq.c     **** 	else if (isXROM(pc)) {
 392:src/xeq.c     **** 		top = addrXROM(1);
 393:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 394:src/xeq.c     **** 	} 
 395:src/xeq.c     **** 	else if (isLIB(pc)) {
 396:src/xeq.c     **** 		top = startLIB(pc);
 397:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
 398:src/xeq.c     **** 	}
 399:src/xeq.c     **** 	else {
ARM GAS  /tmp/ccaPnj5t.s 			page 9


 400:src/xeq.c     **** 		top = State2.runmode;  // step 001 if not entering a program
 401:src/xeq.c     **** 		bottom = ProgSize;
 402:src/xeq.c     **** 	}
 403:src/xeq.c     **** 	*p_top = top;
  59              		.loc 1 403 2 view .LVU10
  60              		.loc 1 403 9 is_stmt 0 view .LVU11
  61 001c 1380     		strh	r3, [r2]	@ movhi
 404:src/xeq.c     **** 	return bottom;
  62              		.loc 1 404 2 is_stmt 1 view .LVU12
 405:src/xeq.c     **** }
  63              		.loc 1 405 1 is_stmt 0 view .LVU13
  64 001e 7047     		bx	lr
  65              	.LVL4:
  66              	.L2:
 391:src/xeq.c     **** 		top = addrXROM(1);
  67              		.loc 1 391 7 is_stmt 1 view .LVU14
 391:src/xeq.c     **** 		top = addrXROM(1);
  68              		.loc 1 391 11 is_stmt 0 view .LVU15
  69 0020 830B     		lsrs	r3, r0, #14
 391:src/xeq.c     **** 		top = addrXROM(1);
  70              		.loc 1 391 10 view .LVU16
  71 0022 032B     		cmp	r3, #3
  72 0024 0FD0     		beq	.L13
 395:src/xeq.c     **** 		top = startLIB(pc);
  73              		.loc 1 395 7 is_stmt 1 view .LVU17
 395:src/xeq.c     **** 		top = startLIB(pc);
  74              		.loc 1 395 10 is_stmt 0 view .LVU18
  75 0026 10F4404F 		tst	r0, #49152
  76 002a 14D0     		beq	.L5
 396:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  77              		.loc 1 396 3 is_stmt 1 view .LVU19
  78              	.LBB1307:
  79              	.LBB1308:
 317:src/xeq.c     **** }
  80              		.loc 1 317 24 is_stmt 0 view .LVU20
  81 002c 1049     		ldr	r1, .L14+8
  82              	.LVL5:
 317:src/xeq.c     **** }
  83              		.loc 1 317 32 view .LVU21
  84 002e 51F82330 		ldr	r3, [r1, r3, lsl #2]
  85              	.LBE1308:
  86              	.LBE1307:
 397:src/xeq.c     **** 	}
  87              		.loc 1 397 10 view .LVU22
  88 0032 33F8021C 		ldrh	r1, [r3, #-2]
 396:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  89              		.loc 1 396 9 view .LVU23
  90 0036 00F44043 		and	r3, r0, #49152
 397:src/xeq.c     **** 	}
  91              		.loc 1 397 10 view .LVU24
  92 003a 5818     		adds	r0, r3, r1
  93              	.LVL6:
 396:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  94              		.loc 1 396 7 view .LVU25
  95 003c 0133     		adds	r3, r3, #1
  96 003e 9BB2     		uxth	r3, r3
  97              	.LVL7:
ARM GAS  /tmp/ccaPnj5t.s 			page 10


 397:src/xeq.c     **** 	}
  98              		.loc 1 397 3 is_stmt 1 view .LVU26
  99              	.LBB1310:
 100              	.LBI1307:
 313:src/xeq.c     **** 	if (region == REGION_XROM)
 101              		.loc 1 313 5 view .LVU27
 102              	.LBB1309:
 314:src/xeq.c     **** 		return xrom_size;
 103              		.loc 1 314 2 view .LVU28
 317:src/xeq.c     **** }
 104              		.loc 1 317 3 view .LVU29
 317:src/xeq.c     **** }
 105              		.loc 1 317 3 is_stmt 0 view .LVU30
 106              	.LBE1309:
 107              	.LBE1310:
 397:src/xeq.c     **** 	}
 108              		.loc 1 397 10 view .LVU31
 109 0040 80B2     		uxth	r0, r0
 110              	.LVL8:
 403:src/xeq.c     **** 	return bottom;
 111              		.loc 1 403 2 is_stmt 1 view .LVU32
 403:src/xeq.c     **** 	return bottom;
 112              		.loc 1 403 9 is_stmt 0 view .LVU33
 113 0042 1380     		strh	r3, [r2]	@ movhi
 404:src/xeq.c     **** }
 114              		.loc 1 404 2 is_stmt 1 view .LVU34
 115              		.loc 1 405 1 is_stmt 0 view .LVU35
 116 0044 7047     		bx	lr
 117              	.LVL9:
 118              	.L13:
 392:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 119              		.loc 1 392 3 is_stmt 1 view .LVU36
 393:src/xeq.c     **** 	} 
 120              		.loc 1 393 3 view .LVU37
 393:src/xeq.c     **** 	} 
 121              		.loc 1 393 10 is_stmt 0 view .LVU38
 122 0046 0B4B     		ldr	r3, .L14+12
 123 0048 1888     		ldrh	r0, [r3]
 124              	.LVL10:
 392:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 125              		.loc 1 392 7 view .LVU39
 126 004a 4CF20103 		movw	r3, #49153
 393:src/xeq.c     **** 	} 
 127              		.loc 1 393 10 view .LVU40
 128 004e 40F44040 		orr	r0, r0, #49152
 129              	.LVL11:
 403:src/xeq.c     **** 	return bottom;
 130              		.loc 1 403 2 is_stmt 1 view .LVU41
 403:src/xeq.c     **** 	return bottom;
 131              		.loc 1 403 9 is_stmt 0 view .LVU42
 132 0052 1380     		strh	r3, [r2]	@ movhi
 404:src/xeq.c     **** }
 133              		.loc 1 404 2 is_stmt 1 view .LVU43
 134              		.loc 1 405 1 is_stmt 0 view .LVU44
 135 0054 7047     		bx	lr
 136              	.LVL12:
 137              	.L5:
ARM GAS  /tmp/ccaPnj5t.s 			page 11


 400:src/xeq.c     **** 		bottom = ProgSize;
 138              		.loc 1 400 3 is_stmt 1 view .LVU45
 400:src/xeq.c     **** 		bottom = ProgSize;
 139              		.loc 1 400 15 is_stmt 0 view .LVU46
 140 0056 044B     		ldr	r3, .L14
 401:src/xeq.c     **** 	}
 141              		.loc 1 401 10 view .LVU47
 142 0058 0449     		ldr	r1, .L14+4
 143              	.LVL13:
 400:src/xeq.c     **** 		bottom = ProgSize;
 144              		.loc 1 400 15 view .LVU48
 145 005a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 401:src/xeq.c     **** 	}
 146              		.loc 1 401 10 view .LVU49
 147 005c 0968     		ldr	r1, [r1]
 400:src/xeq.c     **** 		bottom = ProgSize;
 148              		.loc 1 400 7 view .LVU50
 149 005e C3F38013 		ubfx	r3, r3, #6, #1
 150              	.LVL14:
 401:src/xeq.c     **** 	}
 151              		.loc 1 401 3 is_stmt 1 view .LVU51
 401:src/xeq.c     **** 	}
 152              		.loc 1 401 10 is_stmt 0 view .LVU52
 153 0062 4888     		ldrh	r0, [r1, #2]
 154              	.LVL15:
 403:src/xeq.c     **** 	return bottom;
 155              		.loc 1 403 2 is_stmt 1 view .LVU53
 403:src/xeq.c     **** 	return bottom;
 156              		.loc 1 403 9 is_stmt 0 view .LVU54
 157 0064 1380     		strh	r3, [r2]	@ movhi
 404:src/xeq.c     **** }
 158              		.loc 1 404 2 is_stmt 1 view .LVU55
 159              		.loc 1 405 1 is_stmt 0 view .LVU56
 160 0066 7047     		bx	lr
 161              	.L15:
 162              		.align	2
 163              	.L14:
 164 0068 00000000 		.word	StateWhileOn
 165 006c 00000000 		.word	main_ram
 166 0070 00000000 		.word	.LANCHOR0
 167 0074 00000000 		.word	xrom_size
 168              		.cfi_endproc
 169              	.LFE19:
 171              		.section	.text.reg_address,"ax",%progbits
 172              		.align	1
 173              		.p2align 2,,3
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	reg_address:
 180              	.LVL16:
 181              	.LFB89:
 406:src/xeq.c     **** 
 407:src/xeq.c     **** 
 408:src/xeq.c     **** /* Increment the passed PC.  Account for wrap around but nothing else.
 409:src/xeq.c     ****  * Return the updated PC.
ARM GAS  /tmp/ccaPnj5t.s 			page 12


 410:src/xeq.c     ****  * Set PcWrapped on wrap around
 411:src/xeq.c     ****  */
 412:src/xeq.c     **** unsigned int do_inc(const unsigned int pc, int endp) {
 413:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 414:src/xeq.c     **** 	unsigned short int top = 0;
 415:src/xeq.c     **** 	unsigned short int bottom = 0;
 416:src/xeq.c     **** 
 417:src/xeq.c     **** 	PcWrapped = 0;
 418:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 419:src/xeq.c     **** 
 420:src/xeq.c     **** 	if (npc > bottom) {
 421:src/xeq.c     **** 		PcWrapped = 1;
 422:src/xeq.c     **** 		return top;
 423:src/xeq.c     **** 	}
 424:src/xeq.c     **** 	return npc;
 425:src/xeq.c     **** }
 426:src/xeq.c     **** 
 427:src/xeq.c     **** /* Decrement the passed PC.  Account for wrap around but nothing else.
 428:src/xeq.c     ****  * Return the updated PC.
 429:src/xeq.c     ****  * Set PcWrapped on wrap around
 430:src/xeq.c     ****  */
 431:src/xeq.c     **** unsigned int do_dec(unsigned int pc, int endp) {
 432:src/xeq.c     **** 	unsigned short int top = 0;
 433:src/xeq.c     **** 	unsigned short int bottom = 0;
 434:src/xeq.c     **** 
 435:src/xeq.c     **** 	PcWrapped = 0;
 436:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 437:src/xeq.c     **** 
 438:src/xeq.c     **** 	if (pc <= top) {
 439:src/xeq.c     **** 		PcWrapped = 1;
 440:src/xeq.c     **** 		pc = bottom;
 441:src/xeq.c     **** 	}
 442:src/xeq.c     **** 	else
 443:src/xeq.c     **** 		--pc;
 444:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 445:src/xeq.c     **** 		--pc;
 446:src/xeq.c     **** 	return pc;
 447:src/xeq.c     **** }
 448:src/xeq.c     **** 
 449:src/xeq.c     **** /* Increment the PC keeping account of wrapping around and stopping
 450:src/xeq.c     ****  * programs on such.  Return non-zero if we wrapped.
 451:src/xeq.c     ****  */
 452:src/xeq.c     **** int incpc(void) {
 453:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 454:src/xeq.c     **** 	return PcWrapped;
 455:src/xeq.c     **** }
 456:src/xeq.c     **** 
 457:src/xeq.c     **** void decpc(void) {
 458:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 459:src/xeq.c     **** }
 460:src/xeq.c     **** 
 461:src/xeq.c     **** /*
 462:src/xeq.c     ****  * Update the pointers to the current program delimited by END statements
 463:src/xeq.c     ****  */
 464:src/xeq.c     **** void update_program_bounds(const int force) {
 465:src/xeq.c     **** 	unsigned int pc = state_pc();
 466:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
ARM GAS  /tmp/ccaPnj5t.s 			page 13


 467:src/xeq.c     **** 		State.pc = pc = 1;
 468:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 469:src/xeq.c     **** 		return;
 470:src/xeq.c     **** 	for (PcWrapped = 0; !PcWrapped; pc = do_inc(pc, 0)) {
 471:src/xeq.c     **** 		ProgEnd = pc;
 472:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 473:src/xeq.c     **** 			break;
 474:src/xeq.c     **** 		}
 475:src/xeq.c     **** 	}
 476:src/xeq.c     **** 	for (pc = state_pc();;) {
 477:src/xeq.c     **** 		const unsigned int opc = pc;
 478:src/xeq.c     **** 		pc = do_dec(opc, 0);
 479:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 480:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 481:src/xeq.c     **** 			break;
 482:src/xeq.c     **** 		}
 483:src/xeq.c     **** 	}
 484:src/xeq.c     **** }
 485:src/xeq.c     **** 
 486:src/xeq.c     **** /* Determine where in program space the PC really is
 487:src/xeq.c     ****  */
 488:src/xeq.c     **** unsigned int user_pc(unsigned int pc) {
 489:src/xeq.c     **** 	unsigned int n = 1;
 490:src/xeq.c     **** 	unsigned int base;
 491:src/xeq.c     **** 
 492:src/xeq.c     **** #ifndef REALBUILD
 493:src/xeq.c     **** 	if (pc == 0 || isXROM(pc))
 494:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 495:src/xeq.c     **** #else
 496:src/xeq.c     **** 	if (pc == 0)
 497:src/xeq.c     **** 		return 0;
 498:src/xeq.c     **** #endif
 499:src/xeq.c     **** 	base = startLIB(pc);
 500:src/xeq.c     **** 	while (base < pc) {
 501:src/xeq.c     **** 		base = do_inc(base, 0);
 502:src/xeq.c     **** 		if (PcWrapped)
 503:src/xeq.c     **** 			return n;
 504:src/xeq.c     **** 		++n;
 505:src/xeq.c     **** 	}
 506:src/xeq.c     **** 	return n;
 507:src/xeq.c     **** }
 508:src/xeq.c     **** 
 509:src/xeq.c     **** /* Given a target user PC, figure out the real matching PC
 510:src/xeq.c     ****  */
 511:src/xeq.c     **** unsigned int find_user_pc(unsigned int target) {
 512:src/xeq.c     **** 	unsigned int upc = state_pc();
 513:src/xeq.c     **** 	const int libp = isLIB(upc);
 514:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 515:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 516:src/xeq.c     **** #ifndef REALBUILD
 517:src/xeq.c     **** 	if (isXROM(upc))
 518:src/xeq.c     **** 		return addrXROM(target);
 519:src/xeq.c     **** #endif
 520:src/xeq.c     **** 	while (n++ < target) {
 521:src/xeq.c     **** 		const unsigned int oldbase = base;
 522:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 523:src/xeq.c     **** 		if (PcWrapped)
ARM GAS  /tmp/ccaPnj5t.s 			page 14


 524:src/xeq.c     **** 			return oldbase;
 525:src/xeq.c     **** 	}
 526:src/xeq.c     **** 	return base;
 527:src/xeq.c     **** }
 528:src/xeq.c     **** 
 529:src/xeq.c     **** 
 530:src/xeq.c     **** /* Set a flag to indicate that a complex operation has taken place
 531:src/xeq.c     ****  * The flag disappears with the next command executed.
 532:src/xeq.c     ****  */
 533:src/xeq.c     **** static void set_was_complex(void) {
 534:src/xeq.c     **** 	State2.wascomplex = 1;
 535:src/xeq.c     **** }
 536:src/xeq.c     **** 
 537:src/xeq.c     **** 
 538:src/xeq.c     **** /* Produce an error and stop
 539:src/xeq.c     ****  */
 540:src/xeq.c     **** int report_err(const unsigned int e) {
 541:src/xeq.c     **** 	if (Error == ERR_NONE) {
 542:src/xeq.c     **** 		Error = e;
 543:src/xeq.c     **** 		if (e == ERR_NONE) {
 544:src/xeq.c     **** 			error_message(e); // "Running Program"
 545:src/xeq.c     **** 			return 0;
 546:src/xeq.c     **** 		}
 547:src/xeq.c     **** 	}
 548:src/xeq.c     **** 	return 1;
 549:src/xeq.c     **** }
 550:src/xeq.c     **** 
 551:src/xeq.c     **** 
 552:src/xeq.c     **** /* Display a warning
 553:src/xeq.c     ****  */
 554:src/xeq.c     **** int report_warn(const unsigned int e) {
 555:src/xeq.c     **** 	if (Running) {
 556:src/xeq.c     **** 		return report_err(e);
 557:src/xeq.c     **** 	}
 558:src/xeq.c     **** 	error_message(e);
 559:src/xeq.c     **** #ifndef CONSOLE
 560:src/xeq.c     **** 	State2.disp_freeze = 0;
 561:src/xeq.c     **** 	JustDisplayed = 1;
 562:src/xeq.c     **** 	ShowRPN = 1;
 563:src/xeq.c     **** #endif
 564:src/xeq.c     **** 	return e != ERR_NONE;
 565:src/xeq.c     **** }
 566:src/xeq.c     **** 
 567:src/xeq.c     **** 
 568:src/xeq.c     **** /* Doing something in the wrong mode */
 569:src/xeq.c     **** void bad_mode_error(void) {
 570:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 571:src/xeq.c     **** }
 572:src/xeq.c     **** 
 573:src/xeq.c     **** 
 574:src/xeq.c     **** /* User command to produce an error */
 575:src/xeq.c     **** void cmderr(unsigned int arg, enum rarg op) {
 576:src/xeq.c     **** 	report_err(arg);
 577:src/xeq.c     **** }
 578:src/xeq.c     **** 
 579:src/xeq.c     **** 
 580:src/xeq.c     **** /* User command to display a warning */
ARM GAS  /tmp/ccaPnj5t.s 			page 15


 581:src/xeq.c     **** void cmdmsg(unsigned int arg, enum rarg op) {
 582:src/xeq.c     **** 	error_message(arg);
 583:src/xeq.c     **** }
 584:src/xeq.c     **** 
 585:src/xeq.c     **** 
 586:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE)
 587:src/xeq.c     **** #include <stdlib.h>
 588:src/xeq.c     **** static void error(const char *fmt, ...) {
 589:src/xeq.c     **** 	va_list ap;
 590:src/xeq.c     **** 	va_start(ap, fmt);
 591:src/xeq.c     **** 	vprintf(fmt, ap);
 592:src/xeq.c     **** 	va_end(ap);
 593:src/xeq.c     **** 	putchar('\n');
 594:src/xeq.c     **** 	exit(1);
 595:src/xeq.c     **** }
 596:src/xeq.c     **** 
 597:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); printf("illegal opcode 0x%08x\n", op); } while (
 598:src/xeq.c     **** #else
 599:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); } while (0)
 600:src/xeq.c     **** #endif
 601:src/xeq.c     **** 
 602:src/xeq.c     **** /* Real rounding mode access routine
 603:src/xeq.c     ****  */
 604:src/xeq.c     **** static enum rounding get_rounding_mode() {
 605:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 606:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 607:src/xeq.c     **** 		DEC_ROUND_UP, DEC_ROUND_DOWN,
 608:src/xeq.c     **** 		DEC_ROUND_CEILING, DEC_ROUND_FLOOR
 609:src/xeq.c     **** 	};
 610:src/xeq.c     **** 	return (enum rounding) modes[UState.rounding_mode];
 611:src/xeq.c     **** }
 612:src/xeq.c     **** 
 613:src/xeq.c     **** void op_roundingmode(enum nilop op) {
 614:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 615:src/xeq.c     **** }
 616:src/xeq.c     **** 
 617:src/xeq.c     **** void rarg_roundingmode(unsigned int arg, enum rarg op) {
 618:src/xeq.c     **** 	UState.rounding_mode = arg;
 619:src/xeq.c     **** }
 620:src/xeq.c     **** 
 621:src/xeq.c     **** 
 622:src/xeq.c     **** /* Pack a number into our DPD register format
 623:src/xeq.c     ****  */
 624:src/xeq.c     **** 
 625:src/xeq.c     **** void packed_from_number(decimal64 *r, const decNumber *x) {
 626:src/xeq.c     **** 	decContext ctx64;
 627:src/xeq.c     **** 
 628:src/xeq.c     **** 	decContextDefault(&ctx64, DEC_INIT_DECIMAL64);
 629:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 630:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 631:src/xeq.c     **** }
 632:src/xeq.c     **** 
 633:src/xeq.c     **** void packed128_from_number(decimal128 *r, const decNumber *x) {
 634:src/xeq.c     **** 	decContext ctx128;
 635:src/xeq.c     **** 
 636:src/xeq.c     **** 	decContextDefault(&ctx128, DEC_INIT_DECIMAL128);
 637:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
ARM GAS  /tmp/ccaPnj5t.s 			page 16


 638:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 639:src/xeq.c     **** }
 640:src/xeq.c     **** 
 641:src/xeq.c     **** // Repack a decimal128 to decimal64
 642:src/xeq.c     **** void packed_from_packed128(decimal64 *r, const decimal128 *s) {
 643:src/xeq.c     **** 	decNumber temp;
 644:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 645:src/xeq.c     **** }
 646:src/xeq.c     **** 
 647:src/xeq.c     **** // Repack a decimal64 to decimal128
 648:src/xeq.c     **** void packed128_from_packed(decimal128 *r, const decimal64 *s) {
 649:src/xeq.c     **** 	decNumber temp;
 650:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 651:src/xeq.c     **** }
 652:src/xeq.c     **** 
 653:src/xeq.c     **** /*
 654:src/xeq.c     ****  *  User command to round to a specific number of digits
 655:src/xeq.c     ****  */
 656:src/xeq.c     **** void rarg_round(unsigned int arg, enum rarg op) {
 657:src/xeq.c     **** 	decNumber res, x;
 658:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 659:src/xeq.c     **** 
 660:src/xeq.c     **** 	if (is_intmode()) {
 661:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 662:src/xeq.c     **** 		return;
 663:src/xeq.c     **** 	}
 664:src/xeq.c     **** 
 665:src/xeq.c     **** 	setlastX();
 666:src/xeq.c     **** 	getX(&x);
 667:src/xeq.c     **** 	if (op == RARG_ROUND)
 668:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 669:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 670:src/xeq.c     **** 		decNumberRoundDecimals(&res, &x, arg, rm);
 671:src/xeq.c     **** 	setX(&res);
 672:src/xeq.c     **** }
 673:src/xeq.c     **** 
 674:src/xeq.c     **** /* Check if a value is bogus and error out if so.
 675:src/xeq.c     ****  * A value is bogus if it is infinite, NaN *and* flag D is not set.
 676:src/xeq.c     ****  * If flag D is set, these values are allowed through just fine.
 677:src/xeq.c     ****  */
 678:src/xeq.c     **** static int check_special(const decNumber *x) {
 679:src/xeq.c     **** 	decNumber y;
 680:src/xeq.c     **** 	decimal64 z;
 681:src/xeq.c     **** 	decimal128 d;
 682:src/xeq.c     **** 	if (is_dblmode()) {
 683:src/xeq.c     **** 		packed128_from_number(&d, x);
 684:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 685:src/xeq.c     **** 	}
 686:src/xeq.c     **** 	else 
 687:src/xeq.c     **** 	{
 688:src/xeq.c     **** 		packed_from_number(&z, x);
 689:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 690:src/xeq.c     **** 	}
 691:src/xeq.c     **** 	if (decNumberIsSpecial(&y)) {
 692:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 693:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 694:src/xeq.c     **** 				report_err(ERR_DOMAIN);
ARM GAS  /tmp/ccaPnj5t.s 			page 17


 695:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 696:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 697:src/xeq.c     **** 			else
 698:src/xeq.c     **** 				report_err(ERR_INFINITY);
 699:src/xeq.c     **** 			return 1;
 700:src/xeq.c     **** 		}
 701:src/xeq.c     **** 	}
 702:src/xeq.c     **** 	return 0;
 703:src/xeq.c     **** }
 704:src/xeq.c     **** 
 705:src/xeq.c     **** 
 706:src/xeq.c     **** int stack_size(void) {
 707:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 708:src/xeq.c     **** 		return 4;
 709:src/xeq.c     **** 	return 8;
 710:src/xeq.c     **** }
 711:src/xeq.c     **** 
 712:src/xeq.c     **** REGISTER *get_stack(int pos) {
 713:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 714:src/xeq.c     **** }
 715:src/xeq.c     **** 
 716:src/xeq.c     **** static REGISTER *get_stack_top(void) {
 717:src/xeq.c     **** 	return get_stack(stack_size()-1);
 718:src/xeq.c     **** }
 719:src/xeq.c     **** 
 720:src/xeq.c     **** void copyreg(REGISTER *d, const REGISTER *s) {
 721:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 722:src/xeq.c     **** }
 723:src/xeq.c     **** 
 724:src/xeq.c     **** void copyreg_n(int d, int s) {
 725:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 726:src/xeq.c     **** }
 727:src/xeq.c     **** 
 728:src/xeq.c     **** /* Lift the stack one level.
 729:src/xeq.c     ****  */
 730:src/xeq.c     **** void lift(void) {
 731:src/xeq.c     **** 	const int n = stack_size();
 732:src/xeq.c     **** 	int i;
 733:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 734:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 735:src/xeq.c     **** }
 736:src/xeq.c     **** 
 737:src/xeq.c     **** static int get_lift(void) {
 738:src/xeq.c     **** 	return State2.state_lift;
 739:src/xeq.c     **** }
 740:src/xeq.c     **** 
 741:src/xeq.c     **** void lift_if_enabled(void) {
 742:src/xeq.c     **** 	if (get_lift())
 743:src/xeq.c     **** 		lift();
 744:src/xeq.c     **** }
 745:src/xeq.c     **** 
 746:src/xeq.c     **** static void lift2_if_enabled(void) {
 747:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 748:src/xeq.c     **** 	lift_if_enabled();
 749:src/xeq.c     **** 	if (C_LOCKED) {
 750:src/xeq.c     **** 		lift_if_enabled();
 751:src/xeq.c     **** 	}
ARM GAS  /tmp/ccaPnj5t.s 			page 18


 752:src/xeq.c     **** 	else {
 753:src/xeq.c     **** 		lift();
 754:src/xeq.c     **** 	}
 755:src/xeq.c     **** #else
 756:src/xeq.c     **** 	lift_if_enabled();
 757:src/xeq.c     **** 	lift();
 758:src/xeq.c     **** #endif
 759:src/xeq.c     **** }
 760:src/xeq.c     **** 
 761:src/xeq.c     **** void set_lift(void) {
 762:src/xeq.c     ****     State2.state_lift = 1;
 763:src/xeq.c     **** }
 764:src/xeq.c     **** 
 765:src/xeq.c     **** static void clr_lift(void) {
 766:src/xeq.c     ****     State2.state_lift = 0;
 767:src/xeq.c     **** }
 768:src/xeq.c     **** 
 769:src/xeq.c     **** static void lower(void) {
 770:src/xeq.c     **** 	const int n = stack_size();
 771:src/xeq.c     **** 	int i;
 772:src/xeq.c     **** 
 773:src/xeq.c     **** 	for (i=1; i<n; i++)
 774:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 775:src/xeq.c     **** }
 776:src/xeq.c     **** 
 777:src/xeq.c     **** static void lower2(void) {
 778:src/xeq.c     **** 	const int n = stack_size();
 779:src/xeq.c     **** 	int i;
 780:src/xeq.c     **** 
 781:src/xeq.c     **** 	for (i=2; i<n; i++)
 782:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 783:src/xeq.c     **** }
 784:src/xeq.c     **** 
 785:src/xeq.c     **** 
 786:src/xeq.c     **** void setlastX(void) {
 787:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 788:src/xeq.c     **** }
 789:src/xeq.c     **** 
 790:src/xeq.c     **** static void setlastXY(void) {
 791:src/xeq.c     **** 	setlastX();
 792:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 793:src/xeq.c     **** }
 794:src/xeq.c     **** 
 795:src/xeq.c     **** 
 796:src/xeq.c     **** decNumber *getRegister(decNumber *r, int index) {
 797:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 798:src/xeq.c     **** 	if (is_dblmode())
 799:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 800:src/xeq.c     **** 	else
 801:src/xeq.c     **** 		decimal64ToNumber(&(reg->s), r);
 802:src/xeq.c     **** 	return r;
 803:src/xeq.c     **** }
 804:src/xeq.c     **** 
 805:src/xeq.c     **** void setRegister(int index, const decNumber *x) {
 806:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 807:src/xeq.c     **** 	decNumber dn;
 808:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 19


 809:src/xeq.c     **** 	if (! check_special(x)) {	/* This correctly deals with infinities and NaN based on flag D */
 810:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 811:src/xeq.c     **** 		if (is_dblmode())
 812:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 813:src/xeq.c     **** 		else
 814:src/xeq.c     **** 			packed_from_number(&(reg->s), &dn);
 815:src/xeq.c     **** 	}
 816:src/xeq.c     **** }
 817:src/xeq.c     **** 
 818:src/xeq.c     **** decNumber *getX(decNumber *x) {
 819:src/xeq.c     **** 	return getRegister(x, regX_idx);
 820:src/xeq.c     **** }
 821:src/xeq.c     **** 
 822:src/xeq.c     **** void setX(const decNumber *x) {
 823:src/xeq.c     **** 	setRegister(regX_idx, x);
 824:src/xeq.c     **** }
 825:src/xeq.c     **** 
 826:src/xeq.c     **** void getY(decNumber *y) {
 827:src/xeq.c     **** 	getRegister(y, regY_idx);
 828:src/xeq.c     **** }
 829:src/xeq.c     **** 
 830:src/xeq.c     **** void setY(const decNumber *y) {
 831:src/xeq.c     **** 	setRegister(regY_idx, y);
 832:src/xeq.c     **** }
 833:src/xeq.c     **** 
 834:src/xeq.c     **** static void getZ(decNumber *z) {
 835:src/xeq.c     **** 	getRegister(z, regZ_idx);
 836:src/xeq.c     **** }
 837:src/xeq.c     **** 
 838:src/xeq.c     **** #if 0
 839:src/xeq.c     **** static void setZ(const decNumber *z) {
 840:src/xeq.c     **** 	setRegister(regZ_idx, z);
 841:src/xeq.c     **** }
 842:src/xeq.c     **** #endif
 843:src/xeq.c     **** 
 844:src/xeq.c     **** static void getT(decNumber *t) {
 845:src/xeq.c     **** 	getRegister(t, regT_idx);
 846:src/xeq.c     **** }
 847:src/xeq.c     **** 
 848:src/xeq.c     **** void getXY(decNumber *x, decNumber *y) {
 849:src/xeq.c     **** 	getX(x);
 850:src/xeq.c     **** 	getY(y);
 851:src/xeq.c     **** }
 852:src/xeq.c     **** 
 853:src/xeq.c     **** void setXY(const decNumber *x, const decNumber *y) {
 854:src/xeq.c     **** 	setX(x);
 855:src/xeq.c     **** 	setY(y);
 856:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 857:src/xeq.c     **** 	CLEAR_POLAR_READY;
 858:src/xeq.c     **** #endif
 859:src/xeq.c     **** }
 860:src/xeq.c     **** 
 861:src/xeq.c     **** void getXYZ(decNumber *x, decNumber *y, decNumber *z) {
 862:src/xeq.c     **** 	getXY(x, y);
 863:src/xeq.c     **** 	getZ(z);
 864:src/xeq.c     **** }
 865:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 20


 866:src/xeq.c     **** #if 0
 867:src/xeq.c     **** void setXYZ(const decNumber *x, const decNumber *y, const decNumber *z) {
 868:src/xeq.c     **** 	setXY(x, y);
 869:src/xeq.c     **** 	setZ(z);
 870:src/xeq.c     **** }
 871:src/xeq.c     **** #endif
 872:src/xeq.c     **** 
 873:src/xeq.c     **** void getXYZT(decNumber *x, decNumber *y, decNumber *z, decNumber *t) {
 874:src/xeq.c     **** 	getXYZ(x, y, z);
 875:src/xeq.c     **** 	getT(t);
 876:src/xeq.c     **** }
 877:src/xeq.c     **** 
 878:src/xeq.c     **** void getYZ(decNumber *y, decNumber *z) {
 879:src/xeq.c     **** 	getY(y);
 880:src/xeq.c     **** 	getZ(z);
 881:src/xeq.c     **** }
 882:src/xeq.c     **** 
 883:src/xeq.c     **** void roll_down(enum nilop op) {
 884:src/xeq.c     **** 	REGISTER r;
 885:src/xeq.c     **** 	copyreg(&r, StackBase);
 886:src/xeq.c     **** 	lower();
 887:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 888:src/xeq.c     **** }
 889:src/xeq.c     **** 
 890:src/xeq.c     **** void roll_up(enum nilop op) {
 891:src/xeq.c     **** 	REGISTER r;
 892:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 893:src/xeq.c     **** 	lift();
 894:src/xeq.c     **** 	copyreg(StackBase, &r);
 895:src/xeq.c     **** }
 896:src/xeq.c     **** 
 897:src/xeq.c     **** void cpx_roll_down(enum nilop op) {
 898:src/xeq.c     **** 	roll_down(OP_RDOWN);
 899:src/xeq.c     **** 	roll_down(OP_RDOWN);
 900:src/xeq.c     **** 	set_was_complex();
 901:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 902:src/xeq.c     **** 	CLEAR_POLAR_READY;
 903:src/xeq.c     **** #endif
 904:src/xeq.c     **** }
 905:src/xeq.c     **** 
 906:src/xeq.c     **** void cpx_roll_up(enum nilop op) {
 907:src/xeq.c     **** 	roll_up(OP_RUP);
 908:src/xeq.c     **** 	roll_up(OP_RUP);
 909:src/xeq.c     **** 	set_was_complex();
 910:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 911:src/xeq.c     **** 	CLEAR_POLAR_READY;
 912:src/xeq.c     **** #endif
 913:src/xeq.c     **** }
 914:src/xeq.c     **** 
 915:src/xeq.c     **** void cpx_enter(enum nilop op) {
 916:src/xeq.c     **** #ifdef ENTRY_RPN
 917:src/xeq.c     **** 	if(	State2.state_lift || (XromRunning || Running) ) {
 918:src/xeq.c     **** //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same exception
 919:src/xeq.c     **** 		lift();
 920:src/xeq.c     **** 		lift();
 921:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 922:src/xeq.c     **** 		set_was_complex();
ARM GAS  /tmp/ccaPnj5t.s 			page 21


 923:src/xeq.c     **** 	}
 924:src/xeq.c     **** #else
 925:src/xeq.c     **** 	lift();
 926:src/xeq.c     **** 	lift();
 927:src/xeq.c     **** 	copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 928:src/xeq.c     **** 	set_was_complex();
 929:src/xeq.c     **** #endif
 930:src/xeq.c     **** }
 931:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 932:src/xeq.c     **** 
 933:src/xeq.c     **** void convert_regK ( enum trig_modes i ) { // needed to change the displayed angular part in polar m
 934:src/xeq.c     **** 	decNumber k;
 935:src/xeq.c     **** 
 936:src/xeq.c     **** 	enum trig_modes j = get_trig_mode();
 937:src/xeq.c     **** 	if (i==j) return; // no mode change
 938:src/xeq.c     **** 	getRegister(&k, regK_idx);
 939:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 940:src/xeq.c     **** 		case TRIG_DEG:
 941:src/xeq.c     **** 			dn_divide(&k, &k, &const_360);
 942:src/xeq.c     **** 			break;
 943:src/xeq.c     **** 		case TRIG_RAD:
 944:src/xeq.c     **** 			dn_divide(&k, &k, &const_2PI);
 945:src/xeq.c     **** 			break;
 946:src/xeq.c     **** 		case TRIG_GRAD:
 947:src/xeq.c     **** 			dn_divide(&k, &k, &const_400);
 948:src/xeq.c     **** 		default:;
 949:src/xeq.c     **** 	}
 950:src/xeq.c     **** 	switch (i) { // convert to new angular units
 951:src/xeq.c     **** 		case TRIG_DEG:
 952:src/xeq.c     **** 			dn_multiply(&k, &k, &const_360);
 953:src/xeq.c     **** 			break;
 954:src/xeq.c     **** 		case TRIG_RAD:
 955:src/xeq.c     **** 			dn_multiply(&k, &k, &const_2PI);
 956:src/xeq.c     **** 			break;
 957:src/xeq.c     **** 		case TRIG_GRAD:
 958:src/xeq.c     **** 			dn_multiply(&k, &k, &const_400);
 959:src/xeq.c     **** 		default:;
 960:src/xeq.c     **** 	}
 961:src/xeq.c     **** 	setRegister(regK_idx, &k);
 962:src/xeq.c     **** }
 963:src/xeq.c     **** 
 964:src/xeq.c     **** void finish_cpx_entry ( int lift );
 965:src/xeq.c     **** void stack_begin ( int zero_y ); // defined in keys.c - needed so it can be called here
 966:src/xeq.c     **** 
 967:src/xeq.c     **** void cpx_pi (enum nilop op) {
 968:src/xeq.c     **** 	switch (op) {
 969:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 970:src/xeq.c     **** 		if (!REAL_FLAG && !IMAG_FLAG) {
 971:src/xeq.c     **** 			stack_begin( 1 );
 972:src/xeq.c     **** 			SET_REAL;
 973:src/xeq.c     **** 		}
 974:src/xeq.c     **** 		copyreg(StackBase, get_const(OP_PI, is_dblmode()));
 975:src/xeq.c     **** 		break;
 976:src/xeq.c     **** 	case OP_PIB: // command line present - multiplies contents by pi
 977:src/xeq.c     **** 		State2.state_lift = 0;
 978:src/xeq.c     **** 		process_cmdline();
 979:src/xeq.c     **** 		State2.state_lift = 0;
ARM GAS  /tmp/ccaPnj5t.s 			page 22


 980:src/xeq.c     **** 		{
 981:src/xeq.c     **** 			decNumber r;
 982:src/xeq.c     **** 			getX(&r);
 983:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 984:src/xeq.c     **** 			setX(&r);
 985:src/xeq.c     **** 		}
 986:src/xeq.c     **** 	default:;
 987:src/xeq.c     **** 	}
 988:src/xeq.c     **** 	CLEAR_POLAR_READY;
 989:src/xeq.c     **** }
 990:src/xeq.c     **** 
 991:src/xeq.c     **** void cpx_nop(enum nilop op) { // miscellaneous complex operations
 992:src/xeq.c     ****   //  print_debug(1,cur_shift());
 993:src/xeq.c     ****   reset_shift();
 994:src/xeq.c     ****   //  print_debug(2,cur_shift());
 995:src/xeq.c     **** 	switch (op) {
 996:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
 997:src/xeq.c     **** 	        SET_CPX_YES;
 998:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 999:src/xeq.c     **** 		CLEAR_IMAG;
1000:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
1001:src/xeq.c     **** 		return;
1002:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
1003:src/xeq.c     **** 		if (UState.stack_depth) { // save prior stack size 
1004:src/xeq.c     **** 			INIT_8;
1005:src/xeq.c     **** 		}
1006:src/xeq.c     **** 		else {
1007:src/xeq.c     **** 			INIT_4;
1008:src/xeq.c     **** 		}
1009:src/xeq.c     **** 		LOCK_C;
1010:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
1011:src/xeq.c     **** #ifdef DM42
1012:src/xeq.c     **** 		set_menu(M_C_Lock);
1013:src/xeq.c     **** 		display_current_menu();
1014:src/xeq.c     **** #endif
1015:src/xeq.c     **** 		break;
1016:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
1017:src/xeq.c     **** 		if (!C_LOCKED) { 
1018:src/xeq.c     **** 			SET_CPX_NO;
1019:src/xeq.c     **** 			UNLOCK_C; //just in case
1020:src/xeq.c     **** 			return;
1021:src/xeq.c     **** 		}
1022:src/xeq.c     **** 		SET_CPX_NO;
1023:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
1024:src/xeq.c     **** 		finish_cpx_entry(1);
1025:src/xeq.c     **** 		UNLOCK_C;
1026:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
1027:src/xeq.c     **** 		State2.wascomplex = 0;
1028:src/xeq.c     **** #ifdef DM42
1029:src/xeq.c     **** 		set_default_menu();
1030:src/xeq.c     **** 		display_current_menu();
1031:src/xeq.c     **** #endif
1032:src/xeq.c     **** 		return;
1033:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
1034:src/xeq.c     **** 		{
1035:src/xeq.c     **** 		decNumber y;
1036:src/xeq.c     **** 		getY(&y);
ARM GAS  /tmp/ccaPnj5t.s 			page 23


1037:src/xeq.c     **** 		dn_minus(&y, &y);
1038:src/xeq.c     **** 		setY(&y);
1039:src/xeq.c     **** 		}
1040:src/xeq.c     **** 		break;
1041:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
1042:src/xeq.c     **** 		{
1043:src/xeq.c     **** 		decNumber x;
1044:src/xeq.c     **** 		getX(&x);
1045:src/xeq.c     **** 		dn_minus(&x, &x);
1046:src/xeq.c     **** 		setX(&x);
1047:src/xeq.c     **** 		}
1048:src/xeq.c     **** 		break;
1049:src/xeq.c     **** 	case OP_C_IM: // zero real part
1050:src/xeq.c     **** 		zero_X();
1051:src/xeq.c     **** 		break;
1052:src/xeq.c     **** 	case OP_C_RE: // zero imag part
1053:src/xeq.c     **** 		zero_Y();
1054:src/xeq.c     **** 		break;
1055:src/xeq.c     **** 	case OP_CPXI: // use i to display complex numbers
1056:src/xeq.c     **** 		SET_CPX_I;
1057:src/xeq.c     **** 		break;
1058:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
1059:src/xeq.c     **** 		SET_CPX_J;
1060:src/xeq.c     **** 		break;
1061:src/xeq.c     **** 	default:;
1062:src/xeq.c     **** 	}
1063:src/xeq.c     **** 	set_was_complex();
1064:src/xeq.c     **** 	CLEAR_POLAR_READY;
1065:src/xeq.c     **** }
1066:src/xeq.c     **** #endif
1067:src/xeq.c     **** 
1068:src/xeq.c     **** void cpx_fill(enum nilop op) {
1069:src/xeq.c     **** 	const int n = stack_size();
1070:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
1071:src/xeq.c     **** 	int i;
1072:src/xeq.c     **** 
1073:src/xeq.c     **** 	for (i=2; i<n; i++)
1074:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
1075:src/xeq.c     **** 	set_was_complex();
1076:src/xeq.c     **** }
1077:src/xeq.c     **** 
1078:src/xeq.c     **** void fill(enum nilop op) {
1079:src/xeq.c     **** 	const int n = stack_size();
1080:src/xeq.c     **** 	int i;
1081:src/xeq.c     **** 
1082:src/xeq.c     **** 	for (i=1; i<n; i++)
1083:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
1084:src/xeq.c     **** }
1085:src/xeq.c     **** 
1086:src/xeq.c     **** void drop(enum nilop op) {
1087:src/xeq.c     **** 	if (op == OP_DROPXY) {
1088:src/xeq.c     **** 		lower2();
1089:src/xeq.c     **** 		set_was_complex();
1090:src/xeq.c     **** 	} else
1091:src/xeq.c     **** 		lower();
1092:src/xeq.c     **** }
1093:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 24


1094:src/xeq.c     **** #ifndef is_intmode
1095:src/xeq.c     **** int is_intmode(void) {
1096:src/xeq.c     **** 	return UState.intm;
1097:src/xeq.c     **** }
1098:src/xeq.c     **** #endif
1099:src/xeq.c     **** 
1100:src/xeq.c     **** int is_dblmode(void) {
1101:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
1102:src/xeq.c     **** }
1103:src/xeq.c     **** 
1104:src/xeq.c     **** int is_usrdblmode(void) {
1105:src/xeq.c     **** 	if (XromFlags.xIN)
1106:src/xeq.c     **** 		return XromFlags.mode_double;
1107:src/xeq.c     **** 	return is_dblmode();
1108:src/xeq.c     **** }
1109:src/xeq.c     **** 
1110:src/xeq.c     **** /* Convert a possibly signed string to an integer
1111:src/xeq.c     ****  */
1112:src/xeq.c     **** int s_to_i(const char *s) {
1113:src/xeq.c     **** 	int x = 0;
1114:src/xeq.c     **** 	int neg;
1115:src/xeq.c     **** 
1116:src/xeq.c     **** 	if (*s == '-') {
1117:src/xeq.c     **** 		s++;
1118:src/xeq.c     **** 		neg = 1;
1119:src/xeq.c     **** 	} else {
1120:src/xeq.c     **** 		if (*s == '+')
1121:src/xeq.c     **** 			s++;
1122:src/xeq.c     **** 		neg = 0;
1123:src/xeq.c     **** 	}
1124:src/xeq.c     **** 
1125:src/xeq.c     **** 	for (;;) {
1126:src/xeq.c     **** 		const char c = *s++;
1127:src/xeq.c     **** 
1128:src/xeq.c     **** 		if (c < '0' || c > '9')
1129:src/xeq.c     **** 			break;
1130:src/xeq.c     **** 		x = 10 * x + (c - '0');
1131:src/xeq.c     **** 	}
1132:src/xeq.c     **** 	if (neg)
1133:src/xeq.c     **** 		return -x;
1134:src/xeq.c     **** 	return x;
1135:src/xeq.c     **** }
1136:src/xeq.c     **** 
1137:src/xeq.c     **** /* Convert a string in the given base to an unsigned integer
1138:src/xeq.c     ****  */
1139:src/xeq.c     **** unsigned long long int s_to_ull(const char *s, unsigned int base) {
1140:src/xeq.c     **** 	unsigned long long int x = 0;
1141:src/xeq.c     **** 
1142:src/xeq.c     **** 	for (;;) {
1143:src/xeq.c     **** 		unsigned int n;
1144:src/xeq.c     **** 		const char c = *s++;
1145:src/xeq.c     **** 
1146:src/xeq.c     **** 		if (c >= '0' && c <= '9')
1147:src/xeq.c     **** 			n = c - '0';
1148:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
1149:src/xeq.c     **** 			n = c - 'A' + 10;
1150:src/xeq.c     **** 		else
ARM GAS  /tmp/ccaPnj5t.s 			page 25


1151:src/xeq.c     **** 			break;
1152:src/xeq.c     **** 		if (n >= base)
1153:src/xeq.c     **** 			break;
1154:src/xeq.c     **** 		x = x * base + n;
1155:src/xeq.c     **** 	}
1156:src/xeq.c     **** 	return x;
1157:src/xeq.c     **** }
1158:src/xeq.c     **** 
1159:src/xeq.c     **** const char *get_cmdline(void) {
1160:src/xeq.c     **** 	if (CmdLineLength) {
1161:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
1162:src/xeq.c     **** 		return Cmdline;
1163:src/xeq.c     **** 	}
1164:src/xeq.c     **** 	return NULL;
1165:src/xeq.c     **** }
1166:src/xeq.c     **** 
1167:src/xeq.c     **** #if 0
1168:src/xeq.c     **** static int fract_convert_number(decNumber *x, const char *s) {
1169:src/xeq.c     **** 	if (*s == '\0') {
1170:src/xeq.c     **** 		report_err(ERR_DOMAIN);
1171:src/xeq.c     **** 		return 1;
1172:src/xeq.c     **** 	}
1173:src/xeq.c     **** 	decNumberFromString(x, s, &Ctx);
1174:src/xeq.c     **** 	return check_special(x);
1175:src/xeq.c     **** }
1176:src/xeq.c     **** #endif
1177:src/xeq.c     **** 
1178:src/xeq.c     **** /* Return 1 if the command line contains an error and also set an appropriate
1179:src/xeq.c     ****  * error message.
1180:src/xeq.c     ****  */
1181:src/xeq.c     **** int is_bad_cmdline(void)
1182:src/xeq.c     **** {
1183:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
1184:src/xeq.c     **** 	if (CmdLineDot == 2) {
1185:src/xeq.c     **** 		char *p;
1186:src/xeq.c     **** 
1187:src/xeq.c     **** 		// Check if there's a non-zero digit after the last decimal mark
1188:src/xeq.c     **** 		p = Cmdline + CmdLineLength;
1189:src/xeq.c     **** 		for (;;) {
1190:src/xeq.c     **** 			p--;
1191:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
1192:src/xeq.c     **** 				return 0;
1193:src/xeq.c     **** 			if (*p == '.')
1194:src/xeq.c     **** 				break;
1195:src/xeq.c     **** 		}
1196:src/xeq.c     **** 
1197:src/xeq.c     **** 		reset_shift();
1198:src/xeq.c     **** 		error_message(ERR_DOMAIN);
1199:src/xeq.c     **** 		State2.invalid_disp = 1;
1200:src/xeq.c     **** 		return 1;
1201:src/xeq.c     **** 	}
1202:src/xeq.c     **** #endif
1203:src/xeq.c     **** 	return 0;
1204:src/xeq.c     **** }
1205:src/xeq.c     **** 
1206:src/xeq.c     **** /* Process the command line if any
1207:src/xeq.c     ****  */
ARM GAS  /tmp/ccaPnj5t.s 			page 26


1208:src/xeq.c     **** void process_cmdline(void) {
1209:src/xeq.c     **** 	decNumber a, b, x, t;
1210:src/xeq.c     **** 
1211:src/xeq.c     **** 	if (CmdLineLength) {
1212:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
1213:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
1214:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1215:src/xeq.c     **** 		char cmdline[CMDLINELEN + 2];
1216:src/xeq.c     **** #else
1217:src/xeq.c     **** 		char cmdline[CMDLINELEN + 1];
1218:src/xeq.c     **** #endif
1219:src/xeq.c     **** 
1220:src/xeq.c     **** 		xcopy(cmdline, Cmdline, CMDLINELEN + 1);
1221:src/xeq.c     **** 
1222:src/xeq.c     **** 		cmdline[CmdLineLength] = '\0';
1223:src/xeq.c     **** 		if (!is_intmode()) {
1224:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1225:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E' || cmdline[CmdLineLength-1] == 'D')
1226:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1227:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
1228:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
1229:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
1230:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
1231:src/xeq.c     **** 			}
1232:src/xeq.c     **** #else
1233:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E')
1234:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1235:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
1236:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
1237:src/xeq.c     **** #endif
1238:src/xeq.c     **** 			if (0
1239:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
1240:src/xeq.c     **** 			    || CmdLineEex
1241:src/xeq.c     **** #endif
1242:src/xeq.c     **** #if FRACTION_MODE_INPUT & 4
1243:src/xeq.c     **** 			    || cmdlinedot == 1
1244:src/xeq.c     **** #endif
1245:src/xeq.c     **** 			   )
1246:src/xeq.c     **** 				UState.fract = 0;
1247:src/xeq.c     **** 		}
1248:src/xeq.c     **** 		CmdLineLength = 0;
1249:src/xeq.c     **** 		lift_if_enabled();
1250:src/xeq.c     **** 		set_lift();
1251:src/xeq.c     **** 		CmdLineDot = 0;
1252:src/xeq.c     **** 		CmdLineEex = 0;
1253:src/xeq.c     **** 		if (is_intmode()) {
1254:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
1255:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
1256:src/xeq.c     **** 			setX_int_sgn(x, sgn);
1257:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
1258:src/xeq.c     **** 			char *d0, *d1, *d2;
1259:src/xeq.c     **** 			int neg;
1260:src/xeq.c     **** 
1261:src/xeq.c     **** 			if (bad_cmdline)
1262:src/xeq.c     **** 				return;
1263:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 8)
1264:src/xeq.c     **** 			UState.fract = 1;
ARM GAS  /tmp/ccaPnj5t.s 			page 27


1265:src/xeq.c     **** #endif
1266:src/xeq.c     **** 			if (cmdline[0] == '-') {
1267:src/xeq.c     **** 				neg = 1;
1268:src/xeq.c     **** 				d0 = cmdline+1;
1269:src/xeq.c     **** 			} else {
1270:src/xeq.c     **** 				neg = 0;
1271:src/xeq.c     **** 				d0 = cmdline;
1272:src/xeq.c     **** 			}
1273:src/xeq.c     **** 			d1 = find_char(d0, '.');
1274:src/xeq.c     **** 			*d1++ = '\0';
1275:src/xeq.c     **** 			d2 = find_char(d1, '.');
1276:src/xeq.c     **** 			*d2++ = '\0';
1277:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
1278:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
1279:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1280:src/xeq.c     **** 			if (d2 == d1+1) { // ND change starts here; if dots are adjacent...
1281:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
1282:src/xeq.c     **** 				decNumberZero(&x); // and zero x
1283:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
1284:src/xeq.c     **** 				UState.improperfrac = 1;
1285:src/xeq.c     **** #endif
1286:src/xeq.c     **** 			}
1287:src/xeq.c     **** 			else
1288:src/xeq.c     **** #endif
1289:src/xeq.c     **** 			{
1290:src/xeq.c     **** 				decNumberFromString(&a, d1, &Ctx);
1291:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1292:src/xeq.c     **** 				UState.improperfrac = 0;
1293:src/xeq.c     **** #endif
1294:src/xeq.c     **** 			}
1295:src/xeq.c     **** 			dn_divide(&t, &a, &b);
1296:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
1297:src/xeq.c     **** 			if (!decNumberIsSpecial(&t))
1298:src/xeq.c     **** #endif
1299:src/xeq.c     **** 				dn_add(&x, &x, &t);
1300:src/xeq.c     **** 			if (neg)
1301:src/xeq.c     **** 				dn_minus(&x, &x);
1302:src/xeq.c     **** 			setX(&x);
1303:src/xeq.c     **** 		} else {
1304:src/xeq.c     **** 			decNumberFromString(&x, cmdline, &Ctx);
1305:src/xeq.c     **** 			setX(&x);
1306:src/xeq.c     **** 		}
1307:src/xeq.c     **** 		set_entry();
1308:src/xeq.c     **** #ifndef DM42
1309:src/xeq.c     **** 		print_trace( TRACE_DATA_ENTRY, 1 );
1310:src/xeq.c     **** #endif
1311:src/xeq.c     **** 	}
1312:src/xeq.c     **** }
1313:src/xeq.c     **** 
1314:src/xeq.c     **** void process_cmdline_set_lift(void) {
1315:src/xeq.c     **** 	process_cmdline();
1316:src/xeq.c     **** 	set_lift();
1317:src/xeq.c     **** }
1318:src/xeq.c     **** 
1319:src/xeq.c     **** 
1320:src/xeq.c     **** /*
1321:src/xeq.c     ****  *  Return a pointer to a numbered register.
ARM GAS  /tmp/ccaPnj5t.s 			page 28


1322:src/xeq.c     ****  *  If locals are enabled and a non existent local register
1323:src/xeq.c     ****  *  is accessed, the respective global register is returned.
1324:src/xeq.c     ****  *  Error checking must be done outside this routine.
1325:src/xeq.c     ****  *  We force the beginning of the local registers on an even stack position.
1326:src/xeq.c     ****  *  This ensures 32 bit alignment of the decima64 object.
1327:src/xeq.c     ****  */
1328:src/xeq.c     **** /*
1329:src/xeq.c     ****  *  If working in double precision, register numbers must be remapped
1330:src/xeq.c     ****  */
1331:src/xeq.c     **** static decimal64 *reg_address(int n, decimal64 *const regs, decimal64 *const named_regs) {
 182              		.loc 1 1331 90 is_stmt 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
1332:src/xeq.c     **** 	const int dbl = is_dblmode();
 187              		.loc 1 1332 2 view .LVU58
 188              	.LBB1311:
 189              	.LBI1311:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 190              		.loc 1 1100 5 view .LVU59
 191              	.LBB1312:
1101:src/xeq.c     **** }
 192              		.loc 1 1101 2 view .LVU60
1101:src/xeq.c     **** }
 193              		.loc 1 1101 24 is_stmt 0 view .LVU61
 194 0000 154B     		ldr	r3, .L25
 195 0002 1B68     		ldr	r3, [r3]
 196              	.LBE1312:
 197              	.LBE1311:
1331:src/xeq.c     **** 	const int dbl = is_dblmode();
 198              		.loc 1 1331 90 view .LVU62
 199 0004 10B4     		push	{r4}
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 4, -4
 202              	.LBB1315:
 203              	.LBB1313:
1101:src/xeq.c     **** }
 204              		.loc 1 1101 24 view .LVU63
 205 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 206              	.LBE1313:
 207              	.LBE1315:
1333:src/xeq.c     **** 
1334:src/xeq.c     **** 	if (n < regX_idx)
 208              		.loc 1 1334 5 view .LVU64
 209 000a 6328     		cmp	r0, #99
 210              	.LBB1316:
 211              	.LBB1314:
1101:src/xeq.c     **** }
 212              		.loc 1 1101 24 view .LVU65
 213 000c 44F20103 		movw	r3, #16385
 214 0010 03EA0403 		and	r3, r3, r4
 215              	.LVL17:
1101:src/xeq.c     **** }
 216              		.loc 1 1101 24 view .LVU66
 217              	.LBE1314:
 218              	.LBE1316:
ARM GAS  /tmp/ccaPnj5t.s 			page 29


 219              		.loc 1 1334 2 is_stmt 1 view .LVU67
 220              		.loc 1 1334 5 is_stmt 0 view .LVU68
 221 0014 10DD     		ble	.L23
1335:src/xeq.c     **** 		return regs + n + (dbl ? n : 0);
1336:src/xeq.c     **** 
1337:src/xeq.c     **** 	n -= regX_idx;
 222              		.loc 1 1337 2 is_stmt 1 view .LVU69
1338:src/xeq.c     **** 	// Lettered register
1339:src/xeq.c     **** 	if (XromFlags.xIN)
 223              		.loc 1 1339 6 is_stmt 0 view .LVU70
 224 0016 1149     		ldr	r1, .L25+4
 225              	.LVL18:
 226              		.loc 1 1339 5 view .LVU71
 227 0018 91F90140 		ldrsb	r4, [r1, #1]
 228 001c 002C     		cmp	r4, #0
1337:src/xeq.c     **** 	// Lettered register
 229              		.loc 1 1337 4 view .LVU72
 230 001e A0F16401 		sub	r1, r0, #100
 231              	.LVL19:
 232              		.loc 1 1339 2 is_stmt 1 view .LVU73
 233              		.loc 1 1339 5 is_stmt 0 view .LVU74
 234 0022 13DB     		blt	.L24
1340:src/xeq.c     **** 		return (decimal64 *) (XromStack + n);
1341:src/xeq.c     **** 	if (dbl)
 235              		.loc 1 1341 2 is_stmt 1 view .LVU75
 236              		.loc 1 1341 5 is_stmt 0 view .LVU76
 237 0024 B3F5804F 		cmp	r3, #16384
1342:src/xeq.c     **** 		n = (n << 1) - STACK_SIZE - EXTRA_REG;
 238              		.loc 1 1342 3 is_stmt 1 view .LVU77
 239              		.loc 1 1342 10 is_stmt 0 view .LVU78
 240 0028 04BF     		itt	eq
 241 002a 4900     		lsleq	r1, r1, #1
 242              	.LVL20:
 243              		.loc 1 1342 5 view .LVU79
 244 002c 0C39     		subeq	r1, r1, #12
 245              	.LVL21:
1343:src/xeq.c     **** 	return named_regs + n;
 246              		.loc 1 1343 2 is_stmt 1 view .LVU80
 247              		.loc 1 1343 20 is_stmt 0 view .LVU81
 248 002e 02EBC100 		add	r0, r2, r1, lsl #3
1344:src/xeq.c     **** }
 249              		.loc 1 1344 1 view .LVU82
 250 0032 5DF8044B 		ldr	r4, [sp], #4
 251              		.cfi_remember_state
 252              		.cfi_restore 4
 253              		.cfi_def_cfa_offset 0
 254 0036 7047     		bx	lr
 255              	.LVL22:
 256              	.L23:
 257              		.cfi_restore_state
1335:src/xeq.c     **** 
 258              		.loc 1 1335 3 is_stmt 1 view .LVU83
1335:src/xeq.c     **** 
 259              		.loc 1 1335 19 is_stmt 0 view .LVU84
 260 0038 B3F5804F 		cmp	r3, #16384
1335:src/xeq.c     **** 
 261              		.loc 1 1335 15 view .LVU85
ARM GAS  /tmp/ccaPnj5t.s 			page 30


 262 003c 4FEAC002 		lsl	r2, r0, #3
 263              	.LVL23:
1335:src/xeq.c     **** 
 264              		.loc 1 1335 15 view .LVU86
 265 0040 08BF     		it	eq
 266 0042 0201     		lsleq	r2, r0, #4
1335:src/xeq.c     **** 
 267              		.loc 1 1335 19 view .LVU87
 268 0044 8818     		adds	r0, r1, r2
 269              	.LVL24:
 270              		.loc 1 1344 1 view .LVU88
 271 0046 5DF8044B 		ldr	r4, [sp], #4
 272              		.cfi_remember_state
 273              		.cfi_restore 4
 274              		.cfi_def_cfa_offset 0
 275 004a 7047     		bx	lr
 276              	.LVL25:
 277              	.L24:
 278              		.cfi_restore_state
1340:src/xeq.c     **** 	if (dbl)
 279              		.loc 1 1340 3 is_stmt 1 view .LVU89
1340:src/xeq.c     **** 	if (dbl)
 280              		.loc 1 1340 10 is_stmt 0 view .LVU90
 281 004c 0448     		ldr	r0, .L25+8
 282              		.loc 1 1344 1 view .LVU91
 283 004e 5DF8044B 		ldr	r4, [sp], #4
 284              		.cfi_restore 4
 285              		.cfi_def_cfa_offset 0
1340:src/xeq.c     **** 	if (dbl)
 286              		.loc 1 1340 10 view .LVU92
 287 0052 00EB0110 		add	r0, r0, r1, lsl #4
 288              		.loc 1 1344 1 view .LVU93
 289 0056 7047     		bx	lr
 290              	.L26:
 291              		.align	2
 292              	.L25:
 293 0058 00000000 		.word	main_ram
 294 005c 00000000 		.word	XromParams
 295 0060 00000000 		.word	XromLocal
 296              		.cfi_endproc
 297              	.LFE89:
 299              		.section	.text.retstk_up,"ax",%progbits
 300              		.align	1
 301              		.p2align 2,,3
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	retstk_up:
 308              	.LFB149:
1345:src/xeq.c     **** 
1346:src/xeq.c     **** REGISTER *get_reg_n(int n) {
1347:src/xeq.c     **** 	const int dbl = is_dblmode();
1348:src/xeq.c     **** 
1349:src/xeq.c     **** 	if (n >= CONST_REG_BASE) {
1350:src/xeq.c     **** 		n -= CONST_REG_BASE;
1351:src/xeq.c     **** 		return get_const(n, dbl);
ARM GAS  /tmp/ccaPnj5t.s 			page 31


1352:src/xeq.c     **** 	}
1353:src/xeq.c     **** 	if (n >= FLASH_REG_BASE)
1354:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
1355:src/xeq.c     **** 
1356:src/xeq.c     **** 	if (n >= LOCAL_REG_BASE && local_regs() > 0) {
1357:src/xeq.c     **** 		// local register on the return stack
1358:src/xeq.c     **** 		n -= LOCAL_REG_BASE;
1359:src/xeq.c     **** 		if (dbl)
1360:src/xeq.c     **** 			n <<= 1;
1361:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
1362:src/xeq.c     **** 	}
1363:src/xeq.c     **** 	return (REGISTER *) reg_address(n, Regs + TOPREALREG - NumRegs, Regs + regX_idx);
1364:src/xeq.c     **** }
1365:src/xeq.c     **** 
1366:src/xeq.c     **** 
1367:src/xeq.c     **** REGISTER *get_flash_reg_n(int n) {
1368:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
1369:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
1370:src/xeq.c     **** }
1371:src/xeq.c     **** 
1372:src/xeq.c     **** 
1373:src/xeq.c     **** /*
1374:src/xeq.c     ****  *  Get a constatnt by index and mode
1375:src/xeq.c     ****  *  In case of a conversion, a private copy is returned
1376:src/xeq.c     ****  */
1377:src/xeq.c     **** REGISTER *get_const(int index, int dbl)
1378:src/xeq.c     **** {
1379:src/xeq.c     **** 	static REGISTER result;
1380:src/xeq.c     **** 	const int i = cnsts[index].index;
1381:src/xeq.c     **** 	if (dbl) {
1382:src/xeq.c     **** 		if (i <= 1 || i >= 128)
1383:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
1384:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
1385:src/xeq.c     **** 	}
1386:src/xeq.c     **** 	else {
1387:src/xeq.c     **** 		if (i < 128)
1388:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
1389:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
1390:src/xeq.c     **** 	}
1391:src/xeq.c     **** 	return &result;
1392:src/xeq.c     **** }
1393:src/xeq.c     **** 
1394:src/xeq.c     **** 
1395:src/xeq.c     **** /*  Some conversion routines to take decimals and produce integers
1396:src/xeq.c     ****  *  This is for opaque storage, no conversion takes place.
1397:src/xeq.c     ****  */
1398:src/xeq.c     **** long long int get_reg_n_int(int index) {
1399:src/xeq.c     **** 	long long int ll;
1400:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
1401:src/xeq.c     **** 	return ll;
1402:src/xeq.c     **** }
1403:src/xeq.c     **** 
1404:src/xeq.c     **** void set_reg_n_int(int index, long long int ll) {
1405:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
1406:src/xeq.c     **** }
1407:src/xeq.c     **** 
1408:src/xeq.c     **** /* Get an integer from a register
ARM GAS  /tmp/ccaPnj5t.s 			page 32


1409:src/xeq.c     ****  */
1410:src/xeq.c     **** unsigned long long int get_reg_n_int_sgn(int index, int *sgn) {
1411:src/xeq.c     **** 	if (is_intmode()) {
1412:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
1413:src/xeq.c     **** 	} else {
1414:src/xeq.c     **** 		decNumber n;
1415:src/xeq.c     **** 
1416:src/xeq.c     **** 		getRegister(&n, index);
1417:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
1418:src/xeq.c     **** 	}
1419:src/xeq.c     **** }
1420:src/xeq.c     **** 
1421:src/xeq.c     **** 
1422:src/xeq.c     **** /* Get an integer from X
1423:src/xeq.c     ****  */
1424:src/xeq.c     **** long long int getX_int(void) {
1425:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
1426:src/xeq.c     **** }
1427:src/xeq.c     **** 
1428:src/xeq.c     **** unsigned long long int getX_int_sgn(int *sgn) {
1429:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
1430:src/xeq.c     **** }
1431:src/xeq.c     **** 
1432:src/xeq.c     **** /*
1433:src/xeq.c     ****  *  Forced conversion from real to intger
1434:src/xeq.c     ****  *  Leaves integer mode active on return!
1435:src/xeq.c     ****  */
1436:src/xeq.c     **** static void int_from_register(int out, int in) {
1437:src/xeq.c     **** 	int sgn;
1438:src/xeq.c     **** 	unsigned long long int val;
1439:src/xeq.c     **** 	
1440:src/xeq.c     **** 	UState.intm = 0;	// Force real mode access
1441:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1442:src/xeq.c     **** 
1443:src/xeq.c     **** 	UState.intm = 1;	// Force integer access
1444:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1445:src/xeq.c     **** }
1446:src/xeq.c     **** 
1447:src/xeq.c     **** /* Put an integer into a register
1448:src/xeq.c     ****  */
1449:src/xeq.c     **** void set_reg_n_int_sgn(int index, unsigned long long int val, int sgn) {
1450:src/xeq.c     **** 	if (is_intmode()) {
1451:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
1452:src/xeq.c     **** 	} else {
1453:src/xeq.c     **** 		decNumber t;
1454:src/xeq.c     **** 
1455:src/xeq.c     **** 		ullint_to_dn(&t, val);
1456:src/xeq.c     **** 		if (sgn)
1457:src/xeq.c     **** 			dn_minus(&t, &t);
1458:src/xeq.c     **** 		setRegister(index, &t);
1459:src/xeq.c     **** 	}
1460:src/xeq.c     **** }
1461:src/xeq.c     **** 
1462:src/xeq.c     **** /* 
1463:src/xeq.c     ****  *  Forced conversion from integer to register format.
1464:src/xeq.c     ****  *  Leaves integer mode off after conversion.
1465:src/xeq.c     ****  *  Destination may be in XROM register space
ARM GAS  /tmp/ccaPnj5t.s 			page 33


1466:src/xeq.c     ****  */
1467:src/xeq.c     **** static void register_from_int(int out, int in, int called_from_xin) {
1468:src/xeq.c     **** 	int sgn;
1469:src/xeq.c     **** 	unsigned long long int val;
1470:src/xeq.c     **** 	const int xin = XromFlags.xIN;
1471:src/xeq.c     **** 	
1472:src/xeq.c     **** 	if (called_from_xin)
1473:src/xeq.c     **** 		XromFlags.xIN = 0;
1474:src/xeq.c     **** 	UState.intm = 1;
1475:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1476:src/xeq.c     **** 
1477:src/xeq.c     **** 	XromFlags.xIN = xin;
1478:src/xeq.c     **** 	UState.intm = 0;
1479:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1480:src/xeq.c     **** }
1481:src/xeq.c     **** 
1482:src/xeq.c     **** 
1483:src/xeq.c     **** /* Put an integer into X
1484:src/xeq.c     ****  * Integer registers are always single precision!
1485:src/xeq.c     ****  */
1486:src/xeq.c     **** void setX_int(long long int val) {
1487:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
1488:src/xeq.c     **** }
1489:src/xeq.c     **** 
1490:src/xeq.c     **** 
1491:src/xeq.c     **** void setX_int_sgn(unsigned long long int val, int sgn) {
1492:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
1493:src/xeq.c     **** }
1494:src/xeq.c     **** 
1495:src/xeq.c     **** 
1496:src/xeq.c     **** 
1497:src/xeq.c     **** /*
1498:src/xeq.c     ****  *  Set the register value explicitely
1499:src/xeq.c     ****  */
1500:src/xeq.c     **** void zero_regs(REGISTER *dest, int n) {
1501:src/xeq.c     **** #if 0
1502:src/xeq.c     **** 	if (is_intmode())
1503:src/xeq.c     **** 		xset(dest, 0, n << 3);
1504:src/xeq.c     **** 	else {
1505:src/xeq.c     **** 		REGISTER *const zero = get_reg_n(CONST_REG_BASE + OP_ZERO);
1506:src/xeq.c     **** 		const int reg_size = is_dblmode() ? sizeof(decimal128) : sizeof(decimal64);
1507:src/xeq.c     **** 		char *d = (char *) dest;
1508:src/xeq.c     **** 		int i;
1509:src/xeq.c     **** 		for (i = 0; i < n; ++i, d += reg_size)
1510:src/xeq.c     **** 			copyreg((REGISTER *) d, zero);
1511:src/xeq.c     **** 	}
1512:src/xeq.c     **** #else
1513:src/xeq.c     **** 	// This works for all modes
1514:src/xeq.c     **** 	// no it doesn't -- it leaves varying values of zero around
1515:src/xeq.c     **** 	xset(dest, 0, n << (3 + is_dblmode()));
1516:src/xeq.c     **** #endif
1517:src/xeq.c     **** }
1518:src/xeq.c     **** 
1519:src/xeq.c     **** void move_regs(REGISTER *dest, REGISTER *src, int n) {
1520:src/xeq.c     **** 	if (is_dblmode())
1521:src/xeq.c     **** 		n <<= 1;
1522:src/xeq.c     **** 	xcopy(dest, src, n << 3);
ARM GAS  /tmp/ccaPnj5t.s 			page 34


1523:src/xeq.c     **** }
1524:src/xeq.c     **** 
1525:src/xeq.c     **** 
1526:src/xeq.c     **** /* Zero a register
1527:src/xeq.c     ****  */
1528:src/xeq.c     **** static void set_zero(REGISTER *x) {
1529:src/xeq.c     **** 	zero_regs(x, 1);
1530:src/xeq.c     **** }
1531:src/xeq.c     **** 
1532:src/xeq.c     **** void zero_X(void) {
1533:src/xeq.c     **** 	set_zero(StackBase);
1534:src/xeq.c     **** }
1535:src/xeq.c     **** 
1536:src/xeq.c     **** void zero_Y(void) {
1537:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
1538:src/xeq.c     **** }
1539:src/xeq.c     **** 
1540:src/xeq.c     **** void clrx(enum nilop op) {
1541:src/xeq.c     **** 	zero_X();
1542:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1543:src/xeq.c     **** 	if (C_LOCKED) {
1544:src/xeq.c     **** 		zero_Y();
1545:src/xeq.c     **** 		if (POLAR_DISPLAY) {
1546:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
1547:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
1548:src/xeq.c     **** 		}
1549:src/xeq.c     **** 		CLEAR_REAL;
1550:src/xeq.c     **** 		CLEAR_IMAG;
1551:src/xeq.c     **** 	}
1552:src/xeq.c     **** #endif
1553:src/xeq.c     **** 	clr_lift();
1554:src/xeq.c     **** }
1555:src/xeq.c     **** 
1556:src/xeq.c     **** /* Zero out the stack
1557:src/xeq.c     ****  */
1558:src/xeq.c     **** void clrstk(enum nilop op) {
1559:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
1560:src/xeq.c     **** 	set_lift();
1561:src/xeq.c     **** }
1562:src/xeq.c     **** 
1563:src/xeq.c     **** 
1564:src/xeq.c     **** /* Zero out all registers excluding the stack and lastx
1565:src/xeq.c     ****  */	
1566:src/xeq.c     **** void clrreg(enum nilop op) {
1567:src/xeq.c     **** 	const int local = local_regs();
1568:src/xeq.c     **** 	process_cmdline_set_lift();
1569:src/xeq.c     **** 
1570:src/xeq.c     **** 	// erase register memory
1571:src/xeq.c     **** 	zero_regs(get_reg_n(0), global_regs());
1572:src/xeq.c     **** 
1573:src/xeq.c     **** 	// Clear A, B, C & D if they aren't part of the stack
1574:src/xeq.c     **** 	if (stack_size() != 8)
1575:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
1576:src/xeq.c     **** 
1577:src/xeq.c     **** 	// Clear J & K but not I and L since they are last X.
1578:src/xeq.c     **** 	zero_regs(get_reg_n(regJ_idx), 2);
1579:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 35


1580:src/xeq.c     **** 	// erase local registers but keep them allocated
1581:src/xeq.c     **** 	if (local)
1582:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
1583:src/xeq.c     **** }
1584:src/xeq.c     **** 
1585:src/xeq.c     **** 
1586:src/xeq.c     **** /* Clear the subroutine return stack
1587:src/xeq.c     ****  */
1588:src/xeq.c     **** void clrretstk(void) {
1589:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
1590:src/xeq.c     **** }
1591:src/xeq.c     **** 
1592:src/xeq.c     **** void clrretstk_pc(void) {
1593:src/xeq.c     **** 	clrretstk();
1594:src/xeq.c     **** 	raw_set_pc(0);
1595:src/xeq.c     **** 	update_program_bounds(1);
1596:src/xeq.c     **** }
1597:src/xeq.c     **** 
1598:src/xeq.c     **** 
1599:src/xeq.c     **** /*
1600:src/xeq.c     ****  *  Command to allow access to constants and small integers
1601:src/xeq.c     ****  */
1602:src/xeq.c     **** void cmdconst(unsigned int arg, enum rarg op) {
1603:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
1604:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX || op == RARG_IND_CONST_CMPLX) {
1605:src/xeq.c     **** #else
1606:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX) {
1607:src/xeq.c     **** #endif
1608:src/xeq.c     **** 		lift2_if_enabled();
1609:src/xeq.c     **** 		zero_Y();
1610:src/xeq.c     **** 		set_was_complex();
1611:src/xeq.c     **** 	} else
1612:src/xeq.c     **** 		lift_if_enabled();
1613:src/xeq.c     **** 
1614:src/xeq.c     **** 	if (op == RARG_INTNUM || op == RARG_INTNUM_CMPLX)
1615:src/xeq.c     **** 		setX_int_sgn(arg, 0);
1616:src/xeq.c     **** 	else if (is_intmode())
1617:src/xeq.c     **** 		bad_mode_error();
1618:src/xeq.c     **** 	else 
1619:src/xeq.c     **** 		copyreg(StackBase, get_const(arg, is_dblmode()));
1620:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1621:src/xeq.c     **** 	CLEAR_POLAR_READY;
1622:src/xeq.c     **** #endif
1623:src/xeq.c     **** }
1624:src/xeq.c     **** 
1625:src/xeq.c     **** 
1626:src/xeq.c     **** /* Store/recall code here.
1627:src/xeq.c     ****  * These two are pretty much the same so we define some utility routines first.
1628:src/xeq.c     ****  */
1629:src/xeq.c     **** 
1630:src/xeq.c     **** /* Do a basic STO/RCL arithmetic operation.
1631:src/xeq.c     ****  */
1632:src/xeq.c     **** static int storcl_op(unsigned short opr, int index, decNumber *r, int rev) {
1633:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
1634:src/xeq.c     **** 
1635:src/xeq.c     **** 	getX(x);
1636:src/xeq.c     **** 	getRegister(y, index);
ARM GAS  /tmp/ccaPnj5t.s 			page 36


1637:src/xeq.c     **** 	if (rev) {
1638:src/xeq.c     **** 		x = y;
1639:src/xeq.c     **** 		y = &a;
1640:src/xeq.c     **** 	}
1641:src/xeq.c     **** 
1642:src/xeq.c     **** 	switch (opr) {
1643:src/xeq.c     **** 	case 1:
1644:src/xeq.c     **** 		dn_add(r, y, x);
1645:src/xeq.c     **** 		break;
1646:src/xeq.c     **** 	case 2:
1647:src/xeq.c     **** 		dn_subtract(r, y, x);
1648:src/xeq.c     **** 		break;
1649:src/xeq.c     **** 	case 3:
1650:src/xeq.c     **** 		dn_multiply(r, y, x);
1651:src/xeq.c     **** 		break;
1652:src/xeq.c     **** 	case 4:
1653:src/xeq.c     **** 		dn_divide(r, y, x);
1654:src/xeq.c     **** 		break;
1655:src/xeq.c     **** 	case 5:
1656:src/xeq.c     **** 		dn_min(r, y, x);
1657:src/xeq.c     **** 		break;
1658:src/xeq.c     **** 	case 6:
1659:src/xeq.c     **** 		dn_max(r, y, x);
1660:src/xeq.c     **** 		break;
1661:src/xeq.c     **** 	default:
1662:src/xeq.c     **** 		return 1;
1663:src/xeq.c     **** 	}
1664:src/xeq.c     **** 	return 0;
1665:src/xeq.c     **** }
1666:src/xeq.c     **** 
1667:src/xeq.c     **** static int storcl_intop(unsigned short opr, int index, long long int *r, int rev) {
1668:src/xeq.c     **** 	long long int x, y;
1669:src/xeq.c     **** 
1670:src/xeq.c     **** 	x = getX_int();
1671:src/xeq.c     **** 	y = get_reg_n_int(index);
1672:src/xeq.c     **** 
1673:src/xeq.c     **** 	if (rev) {
1674:src/xeq.c     **** 		const long long int t = x;
1675:src/xeq.c     **** 		x = y;
1676:src/xeq.c     **** 		y = t;
1677:src/xeq.c     **** 	}
1678:src/xeq.c     **** 
1679:src/xeq.c     **** 	switch (opr) {
1680:src/xeq.c     **** 	case 1:
1681:src/xeq.c     **** 		*r = intAdd(y, x);
1682:src/xeq.c     **** 		break;
1683:src/xeq.c     **** 	case 2:
1684:src/xeq.c     **** 		*r = intSubtract(y, x);
1685:src/xeq.c     **** 		break;
1686:src/xeq.c     **** 	case 3:
1687:src/xeq.c     **** 		*r = intMultiply(y, x);
1688:src/xeq.c     **** 		break;
1689:src/xeq.c     **** 	case 4:
1690:src/xeq.c     **** 		*r = intDivide(y, x);
1691:src/xeq.c     **** 		break;
1692:src/xeq.c     **** 	case 5:
1693:src/xeq.c     **** 		*r = intMin(y, x);
ARM GAS  /tmp/ccaPnj5t.s 			page 37


1694:src/xeq.c     **** 		break;
1695:src/xeq.c     **** 	case 6:
1696:src/xeq.c     **** 		*r = intMax(y, x);
1697:src/xeq.c     **** 		break;
1698:src/xeq.c     **** 	default:
1699:src/xeq.c     **** 		return 1;
1700:src/xeq.c     **** 	}
1701:src/xeq.c     **** 	return 0;
1702:src/xeq.c     **** }
1703:src/xeq.c     **** 
1704:src/xeq.c     **** /* We've got a STO operation to do.
1705:src/xeq.c     ****  */
1706:src/xeq.c     **** void cmdsto(unsigned int arg, enum rarg op) {
1707:src/xeq.c     **** 	if (op == RARG_STO) {
1708:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
1709:src/xeq.c     **** 	} else {
1710:src/xeq.c     **** 		if (is_intmode()) {
1711:src/xeq.c     **** 			long long int r;
1712:src/xeq.c     **** 
1713:src/xeq.c     **** 			if (storcl_intop(op - RARG_STO, arg, &r, 0))
1714:src/xeq.c     **** 				illegal(op);
1715:src/xeq.c     **** 			set_reg_n_int(arg, r);
1716:src/xeq.c     **** 		} else {
1717:src/xeq.c     **** 			decNumber r;
1718:src/xeq.c     **** 
1719:src/xeq.c     **** 			if (storcl_op(op - RARG_STO, arg, &r, 0))
1720:src/xeq.c     **** 				illegal(op);
1721:src/xeq.c     **** 			setRegister(arg, &r);
1722:src/xeq.c     **** 		}
1723:src/xeq.c     **** 	}
1724:src/xeq.c     **** }
1725:src/xeq.c     **** 
1726:src/xeq.c     **** /* We've got a RCL operation to do.
1727:src/xeq.c     ****  */
1728:src/xeq.c     **** static void do_rcl(int index, enum rarg op) {
1729:src/xeq.c     **** 	if (op == RARG_RCL) {
1730:src/xeq.c     **** 		REGISTER temp;
1731:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
1732:src/xeq.c     **** 		lift_if_enabled();
1733:src/xeq.c     **** 		copyreg(StackBase, &temp);
1734:src/xeq.c     **** 	} else {
1735:src/xeq.c     **** 		if (is_intmode()) {
1736:src/xeq.c     **** 			long long int r;
1737:src/xeq.c     **** 
1738:src/xeq.c     **** 			if (storcl_intop(op - RARG_RCL, index, &r, 1))
1739:src/xeq.c     **** 				illegal(op);
1740:src/xeq.c     **** 			setlastX();
1741:src/xeq.c     **** 			setX_int(r);
1742:src/xeq.c     **** 		} else {
1743:src/xeq.c     **** 			decNumber r;
1744:src/xeq.c     **** 
1745:src/xeq.c     **** 			if (storcl_op(op - RARG_RCL, index, &r, 1))
1746:src/xeq.c     **** 				illegal(op);
1747:src/xeq.c     **** 			setlastX();
1748:src/xeq.c     **** 			setX(&r);
1749:src/xeq.c     **** 		}
1750:src/xeq.c     **** 	}
ARM GAS  /tmp/ccaPnj5t.s 			page 38


1751:src/xeq.c     **** }
1752:src/xeq.c     **** 
1753:src/xeq.c     **** void cmdrcl(unsigned int arg, enum rarg op) {
1754:src/xeq.c     **** 	do_rcl(arg, op);
1755:src/xeq.c     **** }
1756:src/xeq.c     **** 
1757:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1758:src/xeq.c     **** void cmdflashrcl(unsigned int arg, enum rarg op) {
1759:src/xeq.c     **** 	do_rcl(FLASH_REG_BASE + arg, op - RARG_FLRCL + RARG_RCL);
1760:src/xeq.c     **** }
1761:src/xeq.c     **** #endif
1762:src/xeq.c     **** 
1763:src/xeq.c     **** /* And the complex equivalents for the above.
1764:src/xeq.c     ****  * We pair registers arg & arg+1 to provide a complex number
1765:src/xeq.c     ****  */
1766:src/xeq.c     **** static int storcl_cop(unsigned short opr, int index, decNumber *r1, decNumber *r2, int rev) {
1767:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
1768:src/xeq.c     **** 
1769:src/xeq.c     **** 	getXY(x + 0, x + 1);
1770:src/xeq.c     **** 	getRegister(y + 0, index);
1771:src/xeq.c     **** 	getRegister(y + 1, index + 1);
1772:src/xeq.c     **** 
1773:src/xeq.c     **** 	if (rev) {
1774:src/xeq.c     **** 		x = y;
1775:src/xeq.c     **** 		y = a;
1776:src/xeq.c     **** 	}
1777:src/xeq.c     **** 
1778:src/xeq.c     **** 	switch (opr) {
1779:src/xeq.c     **** 	case 1:
1780:src/xeq.c     **** 		cmplxAdd(r1, r2, y + 0, y + 1, x + 0, x + 1);
1781:src/xeq.c     **** 		break;
1782:src/xeq.c     **** 	case 2:
1783:src/xeq.c     **** 		cmplxSubtract(r1, r2, y + 0, y + 1, x + 0, x + 1);
1784:src/xeq.c     **** 		break;
1785:src/xeq.c     **** 	case 3:
1786:src/xeq.c     **** 		cmplxMultiply(r1, r2, y + 0, y + 1, x + 0, x + 1);
1787:src/xeq.c     **** 		break;
1788:src/xeq.c     **** 	case 4:
1789:src/xeq.c     **** 		cmplxDivide(r1, r2, y + 0, y + 1, x + 0, x + 1);
1790:src/xeq.c     **** 		break;
1791:src/xeq.c     **** 	default:
1792:src/xeq.c     **** 		return 1;
1793:src/xeq.c     **** 	}
1794:src/xeq.c     **** 	return 0;
1795:src/xeq.c     **** }
1796:src/xeq.c     **** 
1797:src/xeq.c     **** 
1798:src/xeq.c     **** void cmdcsto(unsigned int arg, enum rarg op) {
1799:src/xeq.c     **** 	decNumber r1, r2;
1800:src/xeq.c     **** 	REGISTER *t1, *t2;
1801:src/xeq.c     **** 
1802:src/xeq.c     **** 	t1 = get_reg_n(arg);
1803:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
1804:src/xeq.c     **** 
1805:src/xeq.c     **** 	if (op == RARG_CSTO) {
1806:src/xeq.c     **** 		copyreg(t1, StackBase);
1807:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
ARM GAS  /tmp/ccaPnj5t.s 			page 39


1808:src/xeq.c     **** 	} else {
1809:src/xeq.c     **** 		if (is_intmode())
1810:src/xeq.c     **** 			bad_mode_error();
1811:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
1812:src/xeq.c     **** 			illegal(op);
1813:src/xeq.c     **** 		else {
1814:src/xeq.c     **** 			setRegister(arg, &r1);
1815:src/xeq.c     **** 			setRegister(arg + 1, &r2);
1816:src/xeq.c     **** 		}
1817:src/xeq.c     **** 	}
1818:src/xeq.c     **** 	set_was_complex();
1819:src/xeq.c     **** }
1820:src/xeq.c     **** 
1821:src/xeq.c     **** static void do_crcl(int index, enum rarg op) {
1822:src/xeq.c     **** 	decNumber r1, r2;
1823:src/xeq.c     **** 
1824:src/xeq.c     **** 	if (op == RARG_CRCL) {
1825:src/xeq.c     **** 		REGISTER x, y;
1826:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
1827:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
1828:src/xeq.c     **** 		lift2_if_enabled();
1829:src/xeq.c     **** 		copyreg(StackBase, &x);
1830:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
1831:src/xeq.c     **** 	} else {
1832:src/xeq.c     **** 		if (is_intmode())
1833:src/xeq.c     **** 			bad_mode_error();
1834:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
1835:src/xeq.c     **** 			illegal(op);
1836:src/xeq.c     **** 		else {
1837:src/xeq.c     **** 			setlastXY();
1838:src/xeq.c     **** 			setXY(&r1, &r2);
1839:src/xeq.c     **** 		}
1840:src/xeq.c     **** 	}
1841:src/xeq.c     **** 	set_was_complex();
1842:src/xeq.c     **** }
1843:src/xeq.c     **** 
1844:src/xeq.c     **** void cmdcrcl(unsigned int arg, enum rarg op) {
1845:src/xeq.c     **** 	do_crcl(arg, op);
1846:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1847:src/xeq.c     **** 	CLEAR_POLAR_READY;
1848:src/xeq.c     **** #endif
1849:src/xeq.c     **** }
1850:src/xeq.c     **** 
1851:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1852:src/xeq.c     **** void cmdflashcrcl(unsigned int arg, enum rarg op) {
1853:src/xeq.c     **** 	do_crcl(FLASH_REG_BASE + arg, op - RARG_FLCRCL + RARG_CRCL);
1854:src/xeq.c     **** }
1855:src/xeq.c     **** #endif
1856:src/xeq.c     **** 
1857:src/xeq.c     **** /*
1858:src/xeq.c     ****  *  "Alien" RCL commands to convert registers originally stored in a different format
1859:src/xeq.c     ****  */
1860:src/xeq.c     **** // RCL of an integer value
1861:src/xeq.c     **** void cmdircl(unsigned int arg, enum rarg op) {
1862:src/xeq.c     **** 	if (is_intmode())
1863:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
1864:src/xeq.c     **** 	else
ARM GAS  /tmp/ccaPnj5t.s 			page 40


1865:src/xeq.c     **** 		register_from_int(regX_idx, arg, 0);
1866:src/xeq.c     **** }
1867:src/xeq.c     **** 
1868:src/xeq.c     **** // RCL of a single or double precision real value
1869:src/xeq.c     **** void cmdrrcl(unsigned int arg, enum rarg op) {
1870:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
1871:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
1872:src/xeq.c     **** 
1873:src/xeq.c     **** 	if (rcl_dbl && arg >= regX_idx && arg <= regK_idx) {
1874:src/xeq.c     **** 		// dRCL is not valid for lettered registers
1875:src/xeq.c     **** 		report_err(ERR_RANGE);
1876:src/xeq.c     **** 		return;
1877:src/xeq.c     **** 	}
1878:src/xeq.c     **** 
1879:src/xeq.c     **** 	UState.mode_double = rcl_dbl; // Force reading in requested format
1880:src/xeq.c     **** 	if (is_intmode()) {
1881:src/xeq.c     **** 		int_from_register(regX_idx, arg);
1882:src/xeq.c     **** 		UState.mode_double = was_dbl;
1883:src/xeq.c     **** 	}
1884:src/xeq.c     **** 	else {
1885:src/xeq.c     **** 		decNumber x;
1886:src/xeq.c     **** 		getRegister(&x, arg);
1887:src/xeq.c     **** 
1888:src/xeq.c     **** 		UState.mode_double = was_dbl; // Force access in original mode
1889:src/xeq.c     **** 		setX(&x);
1890:src/xeq.c     **** 	}
1891:src/xeq.c     **** }
1892:src/xeq.c     **** 
1893:src/xeq.c     **** 
1894:src/xeq.c     **** /* SWAP x with the specified register
1895:src/xeq.c     ****  */
1896:src/xeq.c     **** void swap_reg(REGISTER *a, REGISTER *b) {
1897:src/xeq.c     **** 	REGISTER t;
1898:src/xeq.c     **** 
1899:src/xeq.c     **** 	copyreg(&t, a);
1900:src/xeq.c     **** 	copyreg(a, b);
1901:src/xeq.c     **** 	copyreg(b, &t);
1902:src/xeq.c     **** }
1903:src/xeq.c     **** 
1904:src/xeq.c     **** void cmdswap(unsigned int arg, enum rarg op) {
1905:src/xeq.c     **** 	int idx;
1906:src/xeq.c     **** 
1907:src/xeq.c     **** 	if (op == RARG_CSWAPX)
1908:src/xeq.c     **** 		idx = regX_idx;
1909:src/xeq.c     **** 	else if (op == RARG_CSWAPZ)
1910:src/xeq.c     **** 		idx = regZ_idx;
1911:src/xeq.c     **** 	else
1912:src/xeq.c     **** 		idx = regX_idx + (int)(op - RARG_SWAPX);
1913:src/xeq.c     **** 
1914:src/xeq.c     **** 	swap_reg(get_reg_n(idx), get_reg_n(arg));
1915:src/xeq.c     **** 
1916:src/xeq.c     **** 	if (op >= RARG_CSWAPX) {
1917:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
1918:src/xeq.c     **** 		set_was_complex();
1919:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1920:src/xeq.c     **** 	CLEAR_POLAR_READY;
1921:src/xeq.c     **** #endif
ARM GAS  /tmp/ccaPnj5t.s 			page 41


1922:src/xeq.c     **** 	}
1923:src/xeq.c     **** }
1924:src/xeq.c     **** 
1925:src/xeq.c     **** 
1926:src/xeq.c     **** /* View a specified register
1927:src/xeq.c     ****  */
1928:src/xeq.c     **** void cmdview(unsigned int arg, enum rarg op) {
1929:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
1930:src/xeq.c     **** 
1931:src/xeq.c     **** 	State2.wascomplex = cmplx;
1932:src/xeq.c     **** 	ShowRegister = arg;
1933:src/xeq.c     **** 	State2.disp_freeze = 0;
1934:src/xeq.c     **** 	display();
1935:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
1936:src/xeq.c     **** }
1937:src/xeq.c     **** 
1938:src/xeq.c     **** 
1939:src/xeq.c     **** /* Get the stack size */
1940:src/xeq.c     **** void get_stack_size(enum nilop op) {
1941:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
1942:src/xeq.c     **** }
1943:src/xeq.c     **** 
1944:src/xeq.c     **** void get_word_size(enum nilop op) {
1945:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
1946:src/xeq.c     **** }
1947:src/xeq.c     **** 
1948:src/xeq.c     **** void get_sign_mode(enum nilop op) {
1949:src/xeq.c     **** 	static const unsigned char modes[4] = {
1950:src/xeq.c     **** 		0x02,		// 2's complement
1951:src/xeq.c     **** 		0x01,		// 1's complement
1952:src/xeq.c     **** 		0x00,		// unsigned
1953:src/xeq.c     **** 		0x81		// sign and mantissa
1954:src/xeq.c     **** 	};
1955:src/xeq.c     **** 	const unsigned char v = modes[(int)int_mode()];
1956:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
1957:src/xeq.c     **** }
1958:src/xeq.c     **** 
1959:src/xeq.c     **** void get_base(enum nilop op) {
1960:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
1961:src/xeq.c     **** }
1962:src/xeq.c     **** 
1963:src/xeq.c     **** #ifdef DM42
1964:src/xeq.c     ****  long int DM42_Ticker () {
1965:src/xeq.c     ****     long int f, t;
1966:src/xeq.c     ****     t = get_rtc_ticks();
1967:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
1968:src/xeq.c     ****     return f;
1969:src/xeq.c     ****  }
1970:src/xeq.c     **** #endif
1971:src/xeq.c     **** /* Get the current ticker value */
1972:src/xeq.c     **** void op_ticks(enum nilop op) {
1973:src/xeq.c     **** #if !defined(CONSOLE)
1974:src/xeq.c     ****     setX_int_sgn(Ticker, 0);
1975:src/xeq.c     **** #else 
1976:src/xeq.c     ****     struct timeval tv;
1977:src/xeq.c     ****     long long int t;
1978:src/xeq.c     ****     gettimeofday(&tv, NULL);
ARM GAS  /tmp/ccaPnj5t.s 			page 42


1979:src/xeq.c     ****     t = tv.tv_sec * 10 + tv.tv_usec / 100000;
1980:src/xeq.c     ****     setX_int_sgn(t, 0);
1981:src/xeq.c     **** #endif
1982:src/xeq.c     **** }
1983:src/xeq.c     **** 
1984:src/xeq.c     **** /* Display the battery voltage */
1985:src/xeq.c     **** void op_voltage(enum nilop op) {
1986:src/xeq.c     **** 	decNumber t, u;
1987:src/xeq.c     **** #ifdef REALBUILD
1988:src/xeq.c     **** 	unsigned long long int v = 19 + Voltage;
1989:src/xeq.c     **** #elif defined(DM42)
1990:src/xeq.c     **** 	int v = get_vbat();
1991:src/xeq.c     **** 	v = v / 100;
1992:src/xeq.c     **** #else
1993:src/xeq.c     **** 	unsigned long long int v = 32;
1994:src/xeq.c     **** #endif
1995:src/xeq.c     **** 
1996:src/xeq.c     **** 	if (is_intmode()) {
1997:src/xeq.c     **** 		setX_int_sgn(v, 0);
1998:src/xeq.c     **** 	} else {
1999:src/xeq.c     **** 		ullint_to_dn(&t, v);
2000:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
2001:src/xeq.c     **** 		setX(&u);
2002:src/xeq.c     **** 	}
2003:src/xeq.c     **** }
2004:src/xeq.c     **** 
2005:src/xeq.c     **** /*
2006:src/xeq.c     ****  *  Commands to determine free memory
2007:src/xeq.c     ****  */
2008:src/xeq.c     **** int free_mem(void) {
2009:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
2010:src/xeq.c     **** }
2011:src/xeq.c     **** 
2012:src/xeq.c     **** int free_flash(void) {
2013:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
2014:src/xeq.c     **** }
2015:src/xeq.c     **** 
2016:src/xeq.c     **** void get_mem(enum nilop op) {
2017:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
2018:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
2019:src/xeq.c     **** 		 op == OP_FLASHQ ? free_flash() :
2020:src/xeq.c     **** 		 global_regs(),
2021:src/xeq.c     **** 		 0);
2022:src/xeq.c     **** }
2023:src/xeq.c     **** 
2024:src/xeq.c     **** 
2025:src/xeq.c     **** /* Check if a keystroke is pending in the buffer, if so return it to the specified
2026:src/xeq.c     ****  * register, if not skip the next step.
2027:src/xeq.c     ****  */
2028:src/xeq.c     **** void cmdkeyp(unsigned int arg, enum rarg op) {
2029:src/xeq.c     **** 	int cond = LastKey == 0;
2030:src/xeq.c     **** 	if (!cond) {
2031:src/xeq.c     **** 		int k = LastKey - 1;
2032:src/xeq.c     **** 		LastKey = 0;
2033:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
2034:src/xeq.c     **** 	}
2035:src/xeq.c     **** 	fin_tst(cond);
ARM GAS  /tmp/ccaPnj5t.s 			page 43


2036:src/xeq.c     **** }
2037:src/xeq.c     **** 
2038:src/xeq.c     **** /*
2039:src/xeq.c     ****  *  Get a key code from a register and translate it from row/colum to internal
2040:src/xeq.c     ****  *  Check for valid arguments
2041:src/xeq.c     ****  */
2042:src/xeq.c     **** static int get_keycode_from_reg(unsigned int n)
2043:src/xeq.c     **** {
2044:src/xeq.c     **** 	int sgn;
2045:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
2046:src/xeq.c     **** 	if ( c < 0 )
2047:src/xeq.c     **** 		report_err(ERR_RANGE);
2048:src/xeq.c     **** 	return c;
2049:src/xeq.c     **** }
2050:src/xeq.c     **** 
2051:src/xeq.c     **** /*
2052:src/xeq.c     ****  *  Take a row/column key code and feed it to the keyboard buffer
2053:src/xeq.c     ****  *  This stops program execution first to make sure, the key is not
2054:src/xeq.c     ****  *  read in by KEY? again.
2055:src/xeq.c     ****  */
2056:src/xeq.c     **** void cmdputkey(unsigned int arg, enum rarg op)
2057:src/xeq.c     **** {
2058:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2059:src/xeq.c     **** 
2060:src/xeq.c     **** 	if (c >= 0) {
2061:src/xeq.c     **** 		set_running_off();
2062:src/xeq.c     **** 		put_key(c);
2063:src/xeq.c     **** 	}
2064:src/xeq.c     **** }
2065:src/xeq.c     **** 
2066:src/xeq.c     **** /*
2067:src/xeq.c     ****  *  Return the type of the keycode in register n
2068:src/xeq.c     ****  *  returns 0-9 for digits, 10 for ., +/-, EEX, 11 for f,g,h, 12 for all other keys.
2069:src/xeq.c     ****  *  Invalid codes produce an error.
2070:src/xeq.c     ****  */
2071:src/xeq.c     **** void cmdkeytype(unsigned int arg, enum rarg op)
2072:src/xeq.c     **** {
2073:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2074:src/xeq.c     **** 	if ( c >= 0 ) {
2075:src/xeq.c     **** 		const char types[] = {
2076:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
2077:src/xeq.c     **** 			12, 12, 12, 11, 11, 11,
2078:src/xeq.c     **** 			12, 12, 10, 10, 12, 12,
2079:src/xeq.c     **** 			12,  7,  8,  9, 12, 12,
2080:src/xeq.c     **** 			12,  4,  5,  6, 12, 12,
2081:src/xeq.c     **** 			12,  1,  2,  3, 12, 12,
2082:src/xeq.c     **** 			12,  0, 10, 12, 12 };
2083:src/xeq.c     **** 		lift_if_enabled();
2084:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
2085:src/xeq.c     **** 	}
2086:src/xeq.c     **** }
2087:src/xeq.c     **** 
2088:src/xeq.c     **** 
2089:src/xeq.c     **** /* Check which operating mode we're in -- integer or real -- they both
2090:src/xeq.c     ****  * vector through this routine.
2091:src/xeq.c     ****  */
2092:src/xeq.c     **** void check_mode(enum nilop op) {
ARM GAS  /tmp/ccaPnj5t.s 			page 44


2093:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
2094:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
2095:src/xeq.c     **** 
2096:src/xeq.c     **** 	fin_tst(intmode == desired);
2097:src/xeq.c     **** }
2098:src/xeq.c     **** 
2099:src/xeq.c     **** 
2100:src/xeq.c     **** /* Check if DBLON is active
2101:src/xeq.c     ****  */
2102:src/xeq.c     **** void check_dblmode(enum nilop op) {
2103:src/xeq.c     **** 	fin_tst(is_dblmode());
2104:src/xeq.c     **** }
2105:src/xeq.c     **** 
2106:src/xeq.c     **** void op_query_xtal(enum nilop op) {
2107:src/xeq.c     **** 	fin_tst(Xtal);
2108:src/xeq.c     **** }
2109:src/xeq.c     **** 
2110:src/xeq.c     **** void op_query_print(enum nilop op) {
2111:src/xeq.c     **** #ifdef INFRARED
2112:src/xeq.c     **** 	fin_tst(1);
2113:src/xeq.c     **** #else
2114:src/xeq.c     **** 	fin_tst(0);
2115:src/xeq.c     **** #endif
2116:src/xeq.c     **** }
2117:src/xeq.c     **** 
2118:src/xeq.c     **** /* Save and restore the entire stack to sequential registers */
2119:src/xeq.c     **** static int check_stack_overlap(unsigned int arg) {
2120:src/xeq.c     **** 	const int n = stack_size();
2121:src/xeq.c     **** 
2122:src/xeq.c     **** 	if (arg + n <= global_regs() || arg >= NUMREG) {
2123:src/xeq.c     **** 		return n;
2124:src/xeq.c     **** 	}
2125:src/xeq.c     **** 	report_err(ERR_STK_CLASH);
2126:src/xeq.c     **** 	return 0;
2127:src/xeq.c     **** }
2128:src/xeq.c     **** 
2129:src/xeq.c     **** void cmdstostk(unsigned int arg, enum rarg op) {
2130:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2131:src/xeq.c     **** 
2132:src/xeq.c     **** 	for (i=0; i<n; i++)
2133:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
2134:src/xeq.c     **** }
2135:src/xeq.c     **** 
2136:src/xeq.c     **** void cmdrclstk(unsigned int arg, enum rarg op) {
2137:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2138:src/xeq.c     **** 
2139:src/xeq.c     **** 	for (i=0; i<n; i++)
2140:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
2141:src/xeq.c     **** }
2142:src/xeq.c     **** 
2143:src/xeq.c     **** 
2144:src/xeq.c     **** /*
2145:src/xeq.c     ****  *  Move up the return stack, skipping any local variables
2146:src/xeq.c     ****  */
2147:src/xeq.c     **** static void retstk_up(void)
2148:src/xeq.c     **** {
 309              		.loc 1 2148 1 is_stmt 1 view -0
ARM GAS  /tmp/ccaPnj5t.s 			page 45


 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
2149:src/xeq.c     **** 	if (RetStkPtr < 0) {
 314              		.loc 1 2149 2 view .LVU95
 315              		.loc 1 2149 6 is_stmt 0 view .LVU96
 316 0000 1A4B     		ldr	r3, .L39
2148:src/xeq.c     **** 	if (RetStkPtr < 0) {
 317              		.loc 1 2148 1 view .LVU97
 318 0002 70B4     		push	{r4, r5, r6}
 319              		.cfi_def_cfa_offset 12
 320              		.cfi_offset 4, -12
 321              		.cfi_offset 5, -8
 322              		.cfi_offset 6, -4
 323              		.loc 1 2149 6 view .LVU98
 324 0004 1C68     		ldr	r4, [r3]
 325 0006 B4F9E227 		ldrsh	r2, [r4, #2018]
 326              		.loc 1 2149 5 view .LVU99
 327 000a 002A     		cmp	r2, #0
 328 000c 01DB     		blt	.L37
 329              	.L27:
2150:src/xeq.c     **** 		int sp = RetStkPtr++;
2151:src/xeq.c     **** 		unsigned int s = RetStk[sp++];
2152:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
2153:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
2154:src/xeq.c     **** 			RetStkPtr = sp;
2155:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
2156:src/xeq.c     **** 			LocalRegs = 0;
2157:src/xeq.c     **** 			while (sp < 0) {
2158:src/xeq.c     **** 				s = RetStk[sp];
2159:src/xeq.c     **** 				if (isLOCAL(s)) {
2160:src/xeq.c     **** 					LocalRegs = sp;
2161:src/xeq.c     **** 					break;
2162:src/xeq.c     **** 				}
2163:src/xeq.c     **** 				++sp;
2164:src/xeq.c     **** 				if (isHIDDEN(s))
2165:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
2166:src/xeq.c     **** 			}
2167:src/xeq.c     **** 		}
2168:src/xeq.c     **** 	}
2169:src/xeq.c     **** }
 330              		.loc 1 2169 1 view .LVU100
 331 000e 70BC     		pop	{r4, r5, r6}
 332              		.cfi_remember_state
 333              		.cfi_restore 6
 334              		.cfi_restore 5
 335              		.cfi_restore 4
 336              		.cfi_def_cfa_offset 0
 337 0010 7047     		bx	lr
 338              	.L37:
 339              		.cfi_restore_state
 340              	.LBB1317:
2150:src/xeq.c     **** 		int sp = RetStkPtr++;
 341              		.loc 1 2150 3 is_stmt 1 view .LVU101
2151:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 342              		.loc 1 2151 26 is_stmt 0 view .LVU102
ARM GAS  /tmp/ccaPnj5t.s 			page 46


 343 0012 174B     		ldr	r3, .L39+4
2150:src/xeq.c     **** 		int sp = RetStkPtr++;
 344              		.loc 1 2150 21 view .LVU103
 345 0014 511C     		adds	r1, r2, #1
2151:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 346              		.loc 1 2151 26 view .LVU104
 347 0016 1D68     		ldr	r5, [r3]
2150:src/xeq.c     **** 		int sp = RetStkPtr++;
 348              		.loc 1 2150 21 view .LVU105
 349 0018 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
 350              	.LVL26:
2151:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 351              		.loc 1 2151 3 is_stmt 1 view .LVU106
2151:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 352              		.loc 1 2151 26 is_stmt 0 view .LVU107
 353 001c 35F81230 		ldrh	r3, [r5, r2, lsl #1]
 354              	.LVL27:
2152:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 355              		.loc 1 2152 3 is_stmt 1 view .LVU108
2152:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 356              		.loc 1 2152 7 is_stmt 0 view .LVU109
 357 0020 1A0B     		lsrs	r2, r3, #12
 358              	.LVL28:
2152:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 359              		.loc 1 2152 6 view .LVU110
 360 0022 22F00202 		bic	r2, r2, #2
 361 0026 012A     		cmp	r2, #1
 362 0028 F1D1     		bne	.L27
2153:src/xeq.c     **** 			RetStkPtr = sp;
 363              		.loc 1 2153 4 is_stmt 1 view .LVU111
2153:src/xeq.c     **** 			RetStkPtr = sp;
 364              		.loc 1 2153 10 is_stmt 0 view .LVU112
 365 002a C3F30B03 		ubfx	r3, r3, #0, #12
 366              	.LVL29:
2153:src/xeq.c     **** 			RetStkPtr = sp;
 367              		.loc 1 2153 7 view .LVU113
 368 002e 0B44     		add	r3, r3, r1
 369              	.LVL30:
2154:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 370              		.loc 1 2154 4 is_stmt 1 view .LVU114
2156:src/xeq.c     **** 			while (sp < 0) {
 371              		.loc 1 2156 14 is_stmt 0 view .LVU115
 372 0030 0022     		movs	r2, #0
2154:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 373              		.loc 1 2154 14 view .LVU116
 374 0032 A4F8E237 		strh	r3, [r4, #2018]	@ movhi
 375              	.LVL31:
2156:src/xeq.c     **** 			while (sp < 0) {
 376              		.loc 1 2156 4 is_stmt 1 view .LVU117
2156:src/xeq.c     **** 			while (sp < 0) {
 377              		.loc 1 2156 14 is_stmt 0 view .LVU118
 378 0036 A4F8DE27 		strh	r2, [r4, #2014]	@ movhi
2157:src/xeq.c     **** 				s = RetStk[sp];
 379              		.loc 1 2157 4 is_stmt 1 view .LVU119
 380 003a 6FF00046 		mvn	r6, #-2147483648
 381              	.L31:
2157:src/xeq.c     **** 				s = RetStk[sp];
ARM GAS  /tmp/ccaPnj5t.s 			page 47


 382              		.loc 1 2157 4 is_stmt 0 view .LVU120
 383 003e 9919     		adds	r1, r3, r6
 384 0040 05EB4101 		add	r1, r5, r1, lsl #1
 385 0044 03E0     		b	.L33
 386              	.LVL32:
 387              	.L32:
2164:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 388              		.loc 1 2164 8 view .LVU121
 389 0046 032A     		cmp	r2, #3
2163:src/xeq.c     **** 				if (isHIDDEN(s))
 390              		.loc 1 2163 5 view .LVU122
 391 0048 03F10103 		add	r3, r3, #1
 392              	.LVL33:
2164:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 393              		.loc 1 2164 5 is_stmt 1 view .LVU123
2164:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 394              		.loc 1 2164 8 is_stmt 0 view .LVU124
 395 004c 0AD0     		beq	.L38
 396              	.LVL34:
 397              	.L33:
2158:src/xeq.c     **** 				if (isLOCAL(s)) {
 398              		.loc 1 2158 5 is_stmt 1 view .LVU125
2163:src/xeq.c     **** 				if (isHIDDEN(s))
 399              		.loc 1 2163 5 view .LVU126
2157:src/xeq.c     **** 				s = RetStk[sp];
 400              		.loc 1 2157 10 view .LVU127
 401 004e 002B     		cmp	r3, #0
 402 0050 DDDA     		bge	.L27
2158:src/xeq.c     **** 				if (isLOCAL(s)) {
 403              		.loc 1 2158 15 is_stmt 0 view .LVU128
 404 0052 31F8020F 		ldrh	r0, [r1, #2]!
 405              	.LVL35:
2159:src/xeq.c     **** 					LocalRegs = sp;
 406              		.loc 1 2159 5 is_stmt 1 view .LVU129
2159:src/xeq.c     **** 					LocalRegs = sp;
 407              		.loc 1 2159 9 is_stmt 0 view .LVU130
 408 0056 020B     		lsrs	r2, r0, #12
2159:src/xeq.c     **** 					LocalRegs = sp;
 409              		.loc 1 2159 8 view .LVU131
 410 0058 012A     		cmp	r2, #1
 411 005a F4D1     		bne	.L32
2160:src/xeq.c     **** 					break;
 412              		.loc 1 2160 6 is_stmt 1 view .LVU132
2160:src/xeq.c     **** 					break;
 413              		.loc 1 2160 16 is_stmt 0 view .LVU133
 414 005c A4F8DE37 		strh	r3, [r4, #2014]	@ movhi
2161:src/xeq.c     **** 				}
 415              		.loc 1 2161 6 is_stmt 1 view .LVU134
 416              	.LBE1317:
 417              		.loc 1 2169 1 is_stmt 0 view .LVU135
 418 0060 70BC     		pop	{r4, r5, r6}
 419              		.cfi_remember_state
 420              		.cfi_restore 6
 421              		.cfi_restore 5
 422              		.cfi_restore 4
 423              		.cfi_def_cfa_offset 0
 424 0062 7047     		bx	lr
ARM GAS  /tmp/ccaPnj5t.s 			page 48


 425              	.L38:
 426              		.cfi_restore_state
 427              	.LBB1318:
2165:src/xeq.c     **** 			}
 428              		.loc 1 2165 6 is_stmt 1 view .LVU136
2165:src/xeq.c     **** 			}
 429              		.loc 1 2165 12 is_stmt 0 view .LVU137
 430 0064 C0F30B00 		ubfx	r0, r0, #0, #12
 431              	.LVL36:
2165:src/xeq.c     **** 			}
 432              		.loc 1 2165 9 view .LVU138
 433 0068 0344     		add	r3, r3, r0
 434              	.LVL37:
2165:src/xeq.c     **** 			}
 435              		.loc 1 2165 9 view .LVU139
 436 006a E8E7     		b	.L31
 437              	.L40:
 438              		.align	2
 439              	.L39:
 440 006c 00000000 		.word	main_ram
 441 0070 00000000 		.word	RetStk
 442              	.LBE1318:
 443              		.cfi_endproc
 444              	.LFE149:
 446              		.section	.text.flag_word,"ax",%progbits
 447              		.align	1
 448              		.p2align 2,,3
 449              		.syntax unified
 450              		.thumb
 451              		.thumb_func
 452              		.fpu fpv4-sp-d16
 454              	flag_word:
 455              	.LVL38:
 456              	.LFB196:
2170:src/xeq.c     **** 
2171:src/xeq.c     **** 
2172:src/xeq.c     **** /* Search from the given position for the specified numeric label.
2173:src/xeq.c     ****  */
2174:src/xeq.c     **** unsigned int find_opcode_from(unsigned int pc, const opcode l, const int flags) {
2175:src/xeq.c     **** 	unsigned short int top;
2176:src/xeq.c     **** 	int count;
2177:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
2178:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
2179:src/xeq.c     **** 
2180:src/xeq.c     **** 	count = 1 + find_section_bounds(pc, endp, &top);
2181:src/xeq.c     **** 	count -= top;
2182:src/xeq.c     **** 	while (count--) {
2183:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
2184:src/xeq.c     **** 		// If we don't find the label, we may search a little too far if many double word
2185:src/xeq.c     **** 		// instructions are in the code, but this doesn't do any harm.
2186:src/xeq.c     **** 		if (getprog(pc) == l)
2187:src/xeq.c     **** 			return pc;
2188:src/xeq.c     **** 		pc = do_inc(pc, endp);
2189:src/xeq.c     **** 	}
2190:src/xeq.c     **** 	if (errp)
2191:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2192:src/xeq.c     **** 	return 0;
ARM GAS  /tmp/ccaPnj5t.s 			page 49


2193:src/xeq.c     **** }
2194:src/xeq.c     **** 
2195:src/xeq.c     **** 
2196:src/xeq.c     **** unsigned int find_label_from(unsigned int pc, unsigned int arg, int flags) {
2197:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
2198:src/xeq.c     **** }
2199:src/xeq.c     **** 
2200:src/xeq.c     **** 
2201:src/xeq.c     **** 
2202:src/xeq.c     **** /* Handle a GTO/GSB instruction
2203:src/xeq.c     ****  */
2204:src/xeq.c     **** static void gsbgto(unsigned int pc, int gsb, unsigned int oldpc) {
2205:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
2206:src/xeq.c     **** 	raw_set_pc(pc);
2207:src/xeq.c     **** 	if (gsb) {
2208:src/xeq.c     **** 		if (!Running && !XromRunning) {
2209:src/xeq.c     **** 			// XEQ or hot key from keyboard
2210:src/xeq.c     **** 			clrretstk();
2211:src/xeq.c     **** 			set_running_on();
2212:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
2213:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
2214:src/xeq.c     **** 				oldpc = pc;
2215:src/xeq.c     **** 		}
2216:src/xeq.c     **** 		if (-RetStkPtr >= (XromFlags.xIN ? XROM_RET_STACK_SIZE : RetStkSize)) {
2217:src/xeq.c     **** 			// Stack is full
2218:src/xeq.c     **** 			report_err(ERR_RAM_FULL);
2219:src/xeq.c     **** 			// clrretstk();
2220:src/xeq.c     **** 		}
2221:src/xeq.c     **** 		else {
2222:src/xeq.c     **** 			// Push PC on return stack
2223:src/xeq.c     **** 			RetStk[--RetStkPtr] = oldpc;
2224:src/xeq.c     **** 		}
2225:src/xeq.c     **** 	}
2226:src/xeq.c     **** }
2227:src/xeq.c     **** 
2228:src/xeq.c     **** // Handle a RTN
2229:src/xeq.c     **** static void do_rtn(int plus1) {
2230:src/xeq.c     **** 	unsigned short pc;
2231:src/xeq.c     **** 
2232:src/xeq.c     **** 	if (RetStkPtr >= 0) {
2233:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
2234:src/xeq.c     **** 		clrretstk();
2235:src/xeq.c     **** 		raw_set_pc(ProgBegin);
2236:src/xeq.c     **** 	}
2237:src/xeq.c     **** 	else {
2238:src/xeq.c     **** 		// Normal RTN within program
2239:src/xeq.c     **** 		// Pop any LOCALS off the stack, increment sp
2240:src/xeq.c     **** 		retstk_up();
2241:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
2242:src/xeq.c     **** 		raw_set_pc(pc);
2243:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
2244:src/xeq.c     **** 		if (plus1 && getprog(pc) != (OP_NIL | OP_POPUSR))
2245:src/xeq.c     **** 			if (incpc())
2246:src/xeq.c     **** 				decpc();
2247:src/xeq.c     **** 	}
2248:src/xeq.c     **** 	if (RetStkPtr == 0) {
2249:src/xeq.c     **** 		// RTN with empty stack stops
ARM GAS  /tmp/ccaPnj5t.s 			page 50


2250:src/xeq.c     **** 		set_running_off();
2251:src/xeq.c     **** 	}
2252:src/xeq.c     **** }
2253:src/xeq.c     **** 
2254:src/xeq.c     **** // RTN and RTN+1
2255:src/xeq.c     **** void op_rtn(enum nilop op) {
2256:src/xeq.c     **** 	if (! Running && ! XromRunning) {
2257:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
2258:src/xeq.c     **** 		clrretstk_pc();
2259:src/xeq.c     **** 	}
2260:src/xeq.c     **** 	else
2261:src/xeq.c     **** 		do_rtn(op == OP_RTNp1 ? 1 : 0);
2262:src/xeq.c     **** }
2263:src/xeq.c     **** 
2264:src/xeq.c     **** 
2265:src/xeq.c     **** // Called by XEQ, GTO and CAT browser
2266:src/xeq.c     **** void cmdgtocommon(int gsb, unsigned int pc) {
2267:src/xeq.c     **** 	if (pc == 0)
2268:src/xeq.c     **** 		set_running_off();
2269:src/xeq.c     **** 	else
2270:src/xeq.c     **** 		gsbgto(pc, gsb, state_pc());
2271:src/xeq.c     **** }
2272:src/xeq.c     **** 
2273:src/xeq.c     **** 
2274:src/xeq.c     **** // Common part of XEQUSR and XEQ'...' from XROM
2275:src/xeq.c     **** // Command pushes 4 values on stack, needs to be followed by POPUSR
2276:src/xeq.c     **** static void usergsb_common(unsigned short int target) {
2277:src/xeq.c     **** 	const unsigned int pc = state_pc();
2278:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
2279:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
2280:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
2281:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
2282:src/xeq.c     **** 
2283:src/xeq.c     **** 	XromUserPc = 0;			     // Hide information irrelevant to user code
2284:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
2285:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
2286:src/xeq.c     **** 	if (! Running)
2287:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
2288:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
2289:src/xeq.c     **** }
2290:src/xeq.c     **** 
2291:src/xeq.c     **** 
2292:src/xeq.c     **** // XEQUSR
2293:src/xeq.c     **** // Command fills the stack and calls the user's code.
2294:src/xeq.c     **** // Needs to be followed by POPUSR
2295:src/xeq.c     **** void do_usergsb(enum nilop op) {
2296:src/xeq.c     **** 	usergsb_common(XromUserPc);
2297:src/xeq.c     ****         fill(OP_FILL);
2298:src/xeq.c     **** }
2299:src/xeq.c     **** 
2300:src/xeq.c     **** 
2301:src/xeq.c     **** // POPUSR
2302:src/xeq.c     **** void op_popusr(enum nilop op) {
2303:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
2304:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
2305:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
2306:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
ARM GAS  /tmp/ccaPnj5t.s 			page 51


2307:src/xeq.c     **** }
2308:src/xeq.c     **** 
2309:src/xeq.c     **** /* Tests if the user program is at the top level */
2310:src/xeq.c     **** void isTop(enum nilop op) {
2311:src/xeq.c     **** 	int top = 0;
2312:src/xeq.c     **** 
2313:src/xeq.c     **** 	if (Running) {
2314:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
2315:src/xeq.c     **** 	}
2316:src/xeq.c     **** 	fin_tst(top);
2317:src/xeq.c     **** }
2318:src/xeq.c     **** 
2319:src/xeq.c     **** 
2320:src/xeq.c     **** // LBL?
2321:src/xeq.c     **** void cmdlblp(unsigned int arg, enum rarg op) {
2322:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
2323:src/xeq.c     **** }
2324:src/xeq.c     **** 
2325:src/xeq.c     **** 
2326:src/xeq.c     **** void cmdgto(unsigned int arg, enum rarg op) {
2327:src/xeq.c     **** 	unsigned int lbl;
2328:src/xeq.c     **** 	if (is_xrom())
2329:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
2330:src/xeq.c     **** 	else
2331:src/xeq.c     **** 		lbl = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
2332:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
2333:src/xeq.c     **** }
2334:src/xeq.c     **** 
2335:src/xeq.c     **** unsigned int findmultilbl(const opcode o, int flags) {
2336:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
2337:src/xeq.c     **** 	unsigned int lbl;
2338:src/xeq.c     **** 
2339:src/xeq.c     **** 	lbl = find_opcode_from(0, dest, 0);					// RAM
2340:src/xeq.c     **** 	if (lbl == 0)
2341:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
2342:src/xeq.c     **** 	if (lbl == 0)
2343:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
2344:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
2345:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2346:src/xeq.c     **** 	return lbl;
2347:src/xeq.c     **** }
2348:src/xeq.c     **** 
2349:src/xeq.c     **** // LBL?'...'
2350:src/xeq.c     **** void cmdmultilblp(const opcode o, enum multiops mopr) {
2351:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
2352:src/xeq.c     **** }
2353:src/xeq.c     **** 
2354:src/xeq.c     **** void cmdmultigto(const opcode o, enum multiops mopr) {
2355:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
2356:src/xeq.c     **** 		// In XROM the command behaves differently!
2357:src/xeq.c     **** 		unsigned short int target = findmultilbl(o, 0);
2358:src/xeq.c     **** 		if (target != 0)
2359:src/xeq.c     **** 			usergsb_common(target); 
2360:src/xeq.c     **** 		else
2361:src/xeq.c     **** 			incpc();
2362:src/xeq.c     **** 	}
2363:src/xeq.c     **** 	else {
ARM GAS  /tmp/ccaPnj5t.s 			page 52


2364:src/xeq.c     **** 		cmdgtocommon(mopr != DBL_GTO, findmultilbl(o, FIND_OP_ERROR));
2365:src/xeq.c     **** 	}
2366:src/xeq.c     **** }
2367:src/xeq.c     **** 
2368:src/xeq.c     **** static void branchtoalpha(int is_gsb, char buf[]) {
2369:src/xeq.c     **** 	unsigned int op;
2370:src/xeq.c     **** 
2371:src/xeq.c     **** 	op = OP_DBL + (DBL_LBL << DBL_SHIFT);
2372:src/xeq.c     **** 	op |= buf[0] & 0xff;
2373:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
2374:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
2375:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
2376:src/xeq.c     **** }
2377:src/xeq.c     **** 
2378:src/xeq.c     **** void cmdalphagto(unsigned int arg, enum rarg op) {
2379:src/xeq.c     **** 	char buf[14];
2380:src/xeq.c     **** 
2381:src/xeq.c     **** 	xset(buf, '\0', sizeof(buf));
2382:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
2383:src/xeq.c     **** }
2384:src/xeq.c     **** 
2385:src/xeq.c     **** static void do_branchalpha(int is_gsb) {
2386:src/xeq.c     **** 	char buf[4];
2387:src/xeq.c     **** 
2388:src/xeq.c     **** 	xcopy(buf, Alpha, 3);
2389:src/xeq.c     **** 	buf[3] = '\0';
2390:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
2391:src/xeq.c     **** }
2392:src/xeq.c     **** 
2393:src/xeq.c     **** void op_gtoalpha(enum nilop op) {
2394:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
2395:src/xeq.c     **** }
2396:src/xeq.c     **** 
2397:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2398:src/xeq.c     **** int get_dispmode_digs(int *pdigs)
2399:src/xeq.c     **** {
2400:src/xeq.c     **** 	int dispmode = UState.dispmode;
2401:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
2402:src/xeq.c     **** 
2403:src/xeq.c     **** 	if (dispdigs >= 12) {
2404:src/xeq.c     **** 		dispdigs -= 12;
2405:src/xeq.c     **** 		dispmode += 4;
2406:src/xeq.c     **** 		if (dispmode >= 6) {
2407:src/xeq.c     **** 			dispmode -= 2;
2408:src/xeq.c     **** 			dispdigs += 4;
2409:src/xeq.c     **** 		}
2410:src/xeq.c     **** 	}
2411:src/xeq.c     **** 	*pdigs = dispdigs;
2412:src/xeq.c     **** 	return dispmode;
2413:src/xeq.c     **** }
2414:src/xeq.c     **** 
2415:src/xeq.c     **** void set_dispmode_digs(int dispmode, int dispdigs)
2416:src/xeq.c     **** {
2417:src/xeq.c     **** 	if (dispmode >= 4) {
2418:src/xeq.c     **** 		dispmode -= 4;
2419:src/xeq.c     **** 		dispdigs += 12;
2420:src/xeq.c     **** 		if (dispdigs >= 16) {
ARM GAS  /tmp/ccaPnj5t.s 			page 53


2421:src/xeq.c     **** 			dispdigs -= 4;
2422:src/xeq.c     **** 			dispmode += 2;
2423:src/xeq.c     **** 		}
2424:src/xeq.c     **** 	}
2425:src/xeq.c     **** 	UState.dispmode = dispmode;
2426:src/xeq.c     **** 	UState.dispdigs = dispdigs;
2427:src/xeq.c     **** }
2428:src/xeq.c     **** #endif
2429:src/xeq.c     **** 
2430:src/xeq.c     **** void cmddisp(unsigned int arg, enum rarg op) {
2431:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2432:src/xeq.c     **** 	int dispdigs;
2433:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
2434:src/xeq.c     **** #ifdef DM42
2435:src/xeq.c     **** 	switch (op) {
2436:src/xeq.c     **** 	case RARG_STD:
2437:src/xeq.c     **** 	  dispmode = MODE_STD;
2438:src/xeq.c     **** 	  break;
2439:src/xeq.c     **** 	case RARG_FIX:
2440:src/xeq.c     **** 	  dispmode = MODE_FIX;
2441:src/xeq.c     **** 	  break;
2442:src/xeq.c     **** 	case RARG_SCI:
2443:src/xeq.c     **** 	  dispmode = MODE_SCI;
2444:src/xeq.c     **** 	  break;
2445:src/xeq.c     **** 	case RARG_ENG:
2446:src/xeq.c     **** 	  dispmode = MODE_ENG;
2447:src/xeq.c     **** 	  break;
2448:src/xeq.c     **** 	case RARG_SIG:
2449:src/xeq.c     **** 	  dispmode = MODE_SIG;
2450:src/xeq.c     **** 	  break;
2451:src/xeq.c     **** 	case RARG_SIG0:
2452:src/xeq.c     **** 	  dispmode = MODE_SIG0;
2453:src/xeq.c     **** 	  break;
2454:src/xeq.c     **** 	default:;
2455:src/xeq.c     **** 	}
2456:src/xeq.c     **** 	if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2457:src/xeq.c     **** 	  report_err(ERR_RANGE);
2458:src/xeq.c     **** 	  return;
2459:src/xeq.c     **** 	}
2460:src/xeq.c     **** #else	
2461:src/xeq.c     **** 	if (op != RARG_DISP)
2462:src/xeq.c     **** 		dispmode = (op - RARG_STD) + MODE_STD;
2463:src/xeq.c     **** 	else if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2464:src/xeq.c     **** 		report_err(ERR_RANGE);
2465:src/xeq.c     **** 		return;
2466:src/xeq.c     **** 	}
2467:src/xeq.c     **** #endif
2468:src/xeq.c     **** 	set_dispmode_digs(dispmode, arg);
2469:src/xeq.c     **** #else
2470:src/xeq.c     **** 	UState.dispdigs = arg;
2471:src/xeq.c     **** 	if (op != RARG_DISP)
2472:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
2473:src/xeq.c     **** #endif
2474:src/xeq.c     **** 	op_float(OP_FLOAT);
2475:src/xeq.c     **** }
2476:src/xeq.c     **** 
2477:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 54


2478:src/xeq.c     **** /* Metric / Imperial conversion code */
2479:src/xeq.c     **** decNumber *convC2F(decNumber *r, const decNumber *x) {
2480:src/xeq.c     **** 	decNumber s;
2481:src/xeq.c     **** 
2482:src/xeq.c     **** 	dn_multiply(&s, x, &const_9on5);
2483:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
2484:src/xeq.c     **** }
2485:src/xeq.c     **** 
2486:src/xeq.c     **** decNumber *convF2C(decNumber *r, const decNumber *x) {
2487:src/xeq.c     **** 	decNumber s;
2488:src/xeq.c     **** 
2489:src/xeq.c     **** 	dn_subtract(&s, x, &const_32);
2490:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
2491:src/xeq.c     **** }
2492:src/xeq.c     **** 
2493:src/xeq.c     **** decNumber *convDB2AR(decNumber *r, const decNumber *x) {
2494:src/xeq.c     **** 	decNumber t;
2495:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
2496:src/xeq.c     **** 	return decNumberPow10(r, &t);
2497:src/xeq.c     **** }
2498:src/xeq.c     **** 
2499:src/xeq.c     **** decNumber *convAR2DB(decNumber *r, const decNumber *x) {
2500:src/xeq.c     **** 	decNumber t;
2501:src/xeq.c     **** 	dn_log10(&t, x);
2502:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
2503:src/xeq.c     **** }
2504:src/xeq.c     **** 
2505:src/xeq.c     **** decNumber *convDB2PR(decNumber *r, const decNumber *x) {
2506:src/xeq.c     **** 	decNumber t;
2507:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
2508:src/xeq.c     **** 	return decNumberPow10(r, &t);
2509:src/xeq.c     **** }
2510:src/xeq.c     **** 
2511:src/xeq.c     **** decNumber *convPR2DB(decNumber *r, const decNumber *x) {
2512:src/xeq.c     **** 	decNumber t;
2513:src/xeq.c     **** 	dn_log10(&t, x);
2514:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
2515:src/xeq.c     **** }
2516:src/xeq.c     **** 
2517:src/xeq.c     **** /* Scale conversions */
2518:src/xeq.c     **** void do_conv(decNumber *r, unsigned int arg, const decNumber *x) {
2519:src/xeq.c     **** 	decNumber m;
2520:src/xeq.c     **** 	const unsigned int conv = arg / 2;
2521:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
2522:src/xeq.c     **** 
2523:src/xeq.c     **** 	if (conv > NUM_CONSTS_CONV) {
2524:src/xeq.c     **** 		decNumberCopy(r, x);
2525:src/xeq.c     **** 		return;
2526:src/xeq.c     **** 	}
2527:src/xeq.c     **** 
2528:src/xeq.c     **** 	decimal64ToNumber(&CONSTANT_CONV(conv), &m);
2529:src/xeq.c     **** 
2530:src/xeq.c     **** 	if (dirn == 0)		// metric to imperial
2531:src/xeq.c     **** 		dn_divide(r, x, &m);
2532:src/xeq.c     **** 	else			// imperial to metric
2533:src/xeq.c     **** 		dn_multiply(r, x, &m);
2534:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 55


2535:src/xeq.c     **** 
2536:src/xeq.c     **** void cmdconv(unsigned int arg, enum rarg op) {
2537:src/xeq.c     **** 	decNumber x, r;
2538:src/xeq.c     **** 
2539:src/xeq.c     **** 	if (is_intmode())
2540:src/xeq.c     **** 		return;
2541:src/xeq.c     **** 
2542:src/xeq.c     **** 	getX(&x);
2543:src/xeq.c     **** 	do_conv(&r, arg, &x);
2544:src/xeq.c     **** 	setlastX();
2545:src/xeq.c     **** 	setX(&r);
2546:src/xeq.c     **** }
2547:src/xeq.c     **** 
2548:src/xeq.c     **** /*  Finish up a test -- if the value is non-zero, the test passes.
2549:src/xeq.c     ****  *  If it is zero, the test fails.
2550:src/xeq.c     ****  */
2551:src/xeq.c     **** void fin_tst(const int a) {
2552:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
2553:src/xeq.c     **** 	if (Running || XromRunning) {
2554:src/xeq.c     **** 		if (! a && incpc())
2555:src/xeq.c     **** 			decpc();
2556:src/xeq.c     **** 	}
2557:src/xeq.c     **** 	else
2558:src/xeq.c     **** 		DispMsg = msg;
2559:src/xeq.c     **** #ifdef INFRARED
2560:src/xeq.c     **** 	if (Tracing) {
2561:src/xeq.c     **** 		print_justified( msg );
2562:src/xeq.c     **** 		Tracing = 0;
2563:src/xeq.c     **** 	}
2564:src/xeq.c     **** #endif
2565:src/xeq.c     **** }
2566:src/xeq.c     **** 
2567:src/xeq.c     **** 
2568:src/xeq.c     **** /* Skip a number of instructions forwards */
2569:src/xeq.c     **** void cmdskip(unsigned int arg, enum rarg op) {
2570:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2571:src/xeq.c     **** 	unsigned int pc;
2572:src/xeq.c     **** 
2573:src/xeq.c     **** 	if (op == RARG_CASE) {
2574:src/xeq.c     **** 		int sgn;
2575:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
2576:src/xeq.c     **** 		if (sgn || arg >= 100) {
2577:src/xeq.c     **** 			report_err(ERR_RANGE);
2578:src/xeq.c     **** 			return;
2579:src/xeq.c     **** 		}
2580:src/xeq.c     **** 	}
2581:src/xeq.c     **** 
2582:src/xeq.c     **** 	if (isXROM(origpc))
2583:src/xeq.c     **** 		pc = origpc + arg;
2584:src/xeq.c     **** 	else {
2585:src/xeq.c     **** 		while (arg-- && !incpc());
2586:src/xeq.c     **** 		if (PcWrapped) {
2587:src/xeq.c     **** 			report_err(ERR_RANGE);
2588:src/xeq.c     **** 		}
2589:src/xeq.c     **** 		pc = state_pc();
2590:src/xeq.c     **** 	}
2591:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSF, origpc);
ARM GAS  /tmp/ccaPnj5t.s 			page 56


2592:src/xeq.c     **** }
2593:src/xeq.c     **** 
2594:src/xeq.c     **** /* Skip backwards */
2595:src/xeq.c     **** void cmdback(unsigned int arg, enum rarg op) {
2596:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2597:src/xeq.c     **** 	unsigned int pc = origpc;
2598:src/xeq.c     **** 
2599:src/xeq.c     **** 	if (isXROM(origpc))
2600:src/xeq.c     **** 		pc -= arg + 1;
2601:src/xeq.c     ****         else if (arg) {
2602:src/xeq.c     **** 		if ( Running ) {
2603:src/xeq.c     **** 			// Handles the case properly that we are on last step
2604:src/xeq.c     **** 			pc = do_dec(pc, 1);
2605:src/xeq.c     **** 		}
2606:src/xeq.c     **** 		do {
2607:src/xeq.c     **** 			pc = do_dec(pc, 1);
2608:src/xeq.c     **** 		} while (--arg && !PcWrapped);
2609:src/xeq.c     **** 		if (PcWrapped) {
2610:src/xeq.c     **** 			report_err(ERR_RANGE);
2611:src/xeq.c     **** 			return;
2612:src/xeq.c     **** 		}
2613:src/xeq.c     **** 	}
2614:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSB, origpc);
2615:src/xeq.c     **** }
2616:src/xeq.c     **** 
2617:src/xeq.c     **** 
2618:src/xeq.c     **** /* Append a character to the command line
2619:src/xeq.c     ****  */
2620:src/xeq.c     **** static void append_cmdline(char c) {
2621:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
2622:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
2623:src/xeq.c     **** }
2624:src/xeq.c     **** 
2625:src/xeq.c     **** /* Make sure exponent stays within allowed limits.
2626:src/xeq.c     ****  * was_digit_entered: 0: sign was changed
2627:src/xeq.c     ****  *                    1: new digit was entered
2628:src/xeq.c     ****  */
2629:src/xeq.c     **** static void exponent_adjusted(int was_digit_entered)
2630:src/xeq.c     **** {
2631:src/xeq.c     **** 	const int dbl = is_dblmode();
2632:src/xeq.c     **** 	int i;
2633:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
2634:src/xeq.c     **** 	const int neg_type_dc = get_reg_n_int_sgn(0, &i);
2635:src/xeq.c     **** #else
2636:src/xeq.c     **** 	const int neg_type_dc = SP_NEG_EXP_ENTRY_TYPE_DC;
2637:src/xeq.c     **** #endif
2638:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DC == -1
2639:src/xeq.c     **** 	const int neg_lim_dc = get_reg_n_int_sgn(1, &i);
2640:src/xeq.c     **** #else
2641:src/xeq.c     **** 	const int neg_lim_dc = SP_NEG_EXP_ENTRY_LIMIT_DC;
2642:src/xeq.c     **** #endif
2643:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DS == -1
2644:src/xeq.c     **** 	const int neg_type_ds = get_reg_n_int_sgn(2, &i);
2645:src/xeq.c     **** #else
2646:src/xeq.c     **** 	const int neg_type_ds = SP_NEG_EXP_ENTRY_TYPE_DS;
2647:src/xeq.c     **** #endif
2648:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DS == -1
ARM GAS  /tmp/ccaPnj5t.s 			page 57


2649:src/xeq.c     **** 	const int neg_lim_ds = get_reg_n_int_sgn(3, &i);
2650:src/xeq.c     **** #else
2651:src/xeq.c     **** 	const int neg_lim_ds = SP_NEG_EXP_ENTRY_LIMIT_DS;
2652:src/xeq.c     **** #endif
2653:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DC == -1
2654:src/xeq.c     **** 	const int pos_type_dc = get_reg_n_int_sgn(4, &i);
2655:src/xeq.c     **** #else
2656:src/xeq.c     **** 	const int pos_type_dc = SP_POS_EXP_ENTRY_TYPE_DC;
2657:src/xeq.c     **** #endif
2658:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DC == -1
2659:src/xeq.c     **** 	const int pos_lim_dc = get_reg_n_int_sgn(5, &i);
2660:src/xeq.c     **** #else
2661:src/xeq.c     **** 	const int pos_lim_dc = SP_POS_EXP_ENTRY_LIMIT_DC;
2662:src/xeq.c     **** #endif
2663:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DS == -1
2664:src/xeq.c     **** 	const int pos_type_ds = get_reg_n_int_sgn(6, &i);
2665:src/xeq.c     **** #else
2666:src/xeq.c     **** 	const int pos_type_ds = SP_POS_EXP_ENTRY_TYPE_DS;
2667:src/xeq.c     **** #endif
2668:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DS == -1
2669:src/xeq.c     **** 	const int pos_lim_ds = get_reg_n_int_sgn(7, &i);
2670:src/xeq.c     **** #else
2671:src/xeq.c     **** 	const int pos_lim_ds = SP_POS_EXP_ENTRY_LIMIT_DS;
2672:src/xeq.c     **** #endif
2673:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1
2674:src/xeq.c     **** 	const int exp_chs_dc = get_reg_n_int_sgn(8, &i);
2675:src/xeq.c     **** #else
2676:src/xeq.c     **** 	const int exp_chs_dc = SP_EXP_ENTRY_CHS_DC;
2677:src/xeq.c     **** #endif
2678:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DS == -1
2679:src/xeq.c     **** 	const int exp_chs_ds = get_reg_n_int_sgn(9, &i);
2680:src/xeq.c     **** #else
2681:src/xeq.c     **** 	const int exp_chs_ds = SP_EXP_ENTRY_CHS_DS;
2682:src/xeq.c     **** #endif
2683:src/xeq.c     **** 	const int dp_neg_type_dc = DP_NEG_EXP_ENTRY_TYPE_DC;
2684:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
2685:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
2686:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
2687:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
2688:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
2689:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
2690:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
2691:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
2692:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
2693:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2694:src/xeq.c     **** 	const int large_exp_entry = 1;
2695:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
2696:src/xeq.c     **** #else
2697:src/xeq.c     **** 	const int large_exp_entry = 0;
2698:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
2699:src/xeq.c     **** #endif
2700:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1 || SP_NEG_EXP_ENTRY_TYPE_DC != SP_NEG_EXP_ENTRY_TYPE_DS \
2701:src/xeq.c     ****     || SP_NEG_EXP_ENTRY_LIMIT_DC == -1 || SP_NEG_EXP_ENTRY_LIMIT_DC != SP_NEG_EXP_ENTRY_LIMIT_DS \
2702:src/xeq.c     ****     || SP_POS_EXP_ENTRY_TYPE_DC == -1 || SP_POS_EXP_ENTRY_TYPE_DC != SP_POS_EXP_ENTRY_TYPE_DS \
2703:src/xeq.c     ****     || SP_POS_EXP_ENTRY_LIMIT_DC == -1 || SP_POS_EXP_ENTRY_LIMIT_DC != SP_POS_EXP_ENTRY_LIMIT_DS \
2704:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC != SP_EXP_ENTRY_CHS_DS \
2705:src/xeq.c     ****     || SP_EXP_ENTRY_ZERO_DC == -1 || SP_EXP_ENTRY_ZERO_DC != SP_EXP_ENTRY_ZERO_DS \
ARM GAS  /tmp/ccaPnj5t.s 			page 58


2706:src/xeq.c     ****     || ((DP_NEG_EXP_ENTRY_TYPE_DC != DP_NEG_EXP_ENTRY_TYPE_DS \
2707:src/xeq.c     ****          || DP_NEG_EXP_ENTRY_LIMIT_DC != DP_NEG_EXP_ENTRY_LIMIT_DS \
2708:src/xeq.c     ****          || DP_POS_EXP_ENTRY_TYPE_DC != DP_POS_EXP_ENTRY_TYPE_DS \
2709:src/xeq.c     ****          || DP_POS_EXP_ENTRY_LIMIT_DC != DP_POS_EXP_ENTRY_LIMIT_DS \
2710:src/xeq.c     ****          || DP_EXP_ENTRY_CHS_DC != DP_EXP_ENTRY_CHS_DS \
2711:src/xeq.c     ****          || DP_EXP_ENTRY_ZERO_DC != DP_EXP_ENTRY_ZERO_DS) && defined(LARGE_EXPONENT_ENTRY))
2712:src/xeq.c     **** 	const int flag_D = get_user_flag(NAN_FLAG);
2713:src/xeq.c     **** #else
2714:src/xeq.c     **** 	const int flag_D = 0;
2715:src/xeq.c     **** #endif
2716:src/xeq.c     **** #ifndef SHIFT_EXPONENT
2717:src/xeq.c     **** 	int negative;
2718:src/xeq.c     **** #endif
2719:src/xeq.c     **** 	int emax;
2720:src/xeq.c     **** 
2721:src/xeq.c     **** 	/* Figure out the range limit for the exponent */
2722:src/xeq.c     **** 	if (!large_exp_entry && dbl) {
2723:src/xeq.c     **** 		emax = 999;
2724:src/xeq.c     **** 	}
2725:src/xeq.c     **** 	else {
2726:src/xeq.c     **** 		int emax_plus, emax_minus;
2727:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
2728:src/xeq.c     **** 
2729:src/xeq.c     **** 		if ((neg_type_dc >= 1 && neg_type_dc <= 9)
2730:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
2731:src/xeq.c     **** 		    || (pos_type_dc >= 1 && pos_type_dc <= 3)
2732:src/xeq.c     **** 		    || (pos_type_ds >= 1 && pos_type_ds <= 3)
2733:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2734:src/xeq.c     **** 		    || (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9)
2735:src/xeq.c     **** 		    || (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9)
2736:src/xeq.c     **** 		    || (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2737:src/xeq.c     **** 		    || (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2738:src/xeq.c     **** #endif
2739:src/xeq.c     **** 		   ) {
2740:src/xeq.c     **** 			// Exponent limits have to be calculated at run-time
2741:src/xeq.c     **** 
2742:src/xeq.c     **** 			for (i = 0; i < CmdLineLength; ++i) {
2743:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2744:src/xeq.c     **** 				if (Cmdline[i] == 'E' || Cmdline[i] == 'D')
2745:src/xeq.c     **** #else
2746:src/xeq.c     **** 				if (Cmdline[i] == 'E')
2747:src/xeq.c     **** #endif
2748:src/xeq.c     **** 					break;
2749:src/xeq.c     **** 				else if (Cmdline[i] == '.')
2750:src/xeq.c     **** 					dot = i;
2751:src/xeq.c     **** 				else if (Cmdline[i] != '0') {
2752:src/xeq.c     **** 					last_nonzero = i - (dot != 0);
2753:src/xeq.c     **** 					if (first_nonzero < 0)
2754:src/xeq.c     **** 						first_nonzero = i - (dot != 0);
2755:src/xeq.c     **** 				}
2756:src/xeq.c     **** 			}
2757:src/xeq.c     **** 			if (first_nonzero < 0) { // Mantissa is zero.
2758:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DC == -1
2759:src/xeq.c     **** 				const int zero_dc = (get_user_flag(1) << 1) | get_user_flag(0);
2760:src/xeq.c     **** #else
2761:src/xeq.c     **** 				const int zero_dc = SP_EXP_ENTRY_ZERO_DC;
2762:src/xeq.c     **** #endif
ARM GAS  /tmp/ccaPnj5t.s 			page 59


2763:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DS == -1
2764:src/xeq.c     **** 				const int zero_ds = (get_user_flag(3) << 1) | get_user_flag(2);
2765:src/xeq.c     **** #else
2766:src/xeq.c     **** 				const int zero_ds = SP_EXP_ENTRY_ZERO_DS;
2767:src/xeq.c     **** #endif
2768:src/xeq.c     **** 				const int dp_zero_dc = DP_EXP_ENTRY_ZERO_DC;
2769:src/xeq.c     **** 				const int dp_zero_ds = DP_EXP_ENTRY_ZERO_DS;
2770:src/xeq.c     **** 
2771:src/xeq.c     **** 				if (large_exp_entry && dbl) {
2772:src/xeq.c     **** 					if ((dp_zero_dc == 1 && dp_zero_ds == 1)
2773:src/xeq.c     **** 					    || (dp_zero_dc == 1 && !flag_D)
2774:src/xeq.c     **** 					    || (dp_zero_ds == 1 && flag_D)) {
2775:src/xeq.c     **** 						// Double precision: Allow any exponent
2776:src/xeq.c     **** 						// within configured limits if any.
2777:src/xeq.c     **** 						emax_plus = emax_minus = 9999;
2778:src/xeq.c     **** 						goto check_limits;
2779:src/xeq.c     **** 					}
2780:src/xeq.c     **** 					else if ((dp_zero_dc == 2 && dp_zero_ds == 2)
2781:src/xeq.c     **** 					         || (dp_zero_dc == 2 && !flag_D)
2782:src/xeq.c     **** 					         || (dp_zero_ds == 2 && flag_D)) {
2783:src/xeq.c     **** 						// Double precision: Allow any exponent
2784:src/xeq.c     **** 						// even outside of configured limits.
2785:src/xeq.c     **** 						emax = 9999;
2786:src/xeq.c     **** 						goto do_not_check_limits;
2787:src/xeq.c     **** 					}
2788:src/xeq.c     **** 					goto zero_has_one_significant_digit;
2789:src/xeq.c     **** 				}
2790:src/xeq.c     **** 				if ((zero_dc == 1 && zero_ds == 1)
2791:src/xeq.c     **** 				    || (zero_dc == 1 && !flag_D)
2792:src/xeq.c     **** 				    || (zero_ds == 1 && flag_D)) {
2793:src/xeq.c     **** 					// Allow any exponent within configured limits if any.
2794:src/xeq.c     **** 					emax_plus = emax_minus = 999;
2795:src/xeq.c     **** 					goto check_limits;
2796:src/xeq.c     **** 				}
2797:src/xeq.c     **** 				else if ((zero_dc == 2 && zero_ds == 2)
2798:src/xeq.c     **** 				         || (zero_dc == 2 && !flag_D)
2799:src/xeq.c     **** 				         || (zero_ds == 2 && flag_D)) {
2800:src/xeq.c     **** 					// Allow any exponent even outside of configured limits.
2801:src/xeq.c     **** 					emax = 999;
2802:src/xeq.c     **** 					goto do_not_check_limits;
2803:src/xeq.c     **** 				}
2804:src/xeq.c     **** 				else {
2805:src/xeq.c     **** zero_has_one_significant_digit:
2806:src/xeq.c     **** 					// Treat zero as if it had one significant digit.
2807:src/xeq.c     **** 					first_nonzero = 0;
2808:src/xeq.c     **** 					dot = 1;
2809:src/xeq.c     **** 				}
2810:src/xeq.c     **** 			}
2811:src/xeq.c     **** 			else if (dot == 0)
2812:src/xeq.c     **** 				dot = i;
2813:src/xeq.c     **** 		}
2814:src/xeq.c     **** 
2815:src/xeq.c     **** 		if (large_exp_entry && dbl) {
2816:src/xeq.c     **** 			// Double precision mode
2817:src/xeq.c     **** 			if (flag_D && dp_neg_type_dc != dp_neg_type_ds) {
2818:src/xeq.c     **** 				if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 3) {
2819:src/xeq.c     **** 					// Don't allow denormal numbers
ARM GAS  /tmp/ccaPnj5t.s 			page 60


2820:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2821:src/xeq.c     **** 				}
2822:src/xeq.c     **** 				else if (dp_neg_type_ds >= 4 && dp_neg_type_ds <= 6) {
2823:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2824:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2825:src/xeq.c     **** 				}
2826:src/xeq.c     **** 				else if (dp_neg_type_ds >= 7 && dp_neg_type_ds <= 9) {
2827:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2828:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2829:src/xeq.c     **** 				}
2830:src/xeq.c     **** 				else {
2831:src/xeq.c     **** 					// Fixed limit
2832:src/xeq.c     **** 					emax_minus = dp_neg_lim_ds;
2833:src/xeq.c     **** 				}
2834:src/xeq.c     **** 			}
2835:src/xeq.c     **** 			else {
2836:src/xeq.c     **** 				if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 3) {
2837:src/xeq.c     **** 					// Don't allow denormal numbers
2838:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2839:src/xeq.c     **** 				}
2840:src/xeq.c     **** 				else if (dp_neg_type_dc >= 4 && dp_neg_type_dc <= 6) {
2841:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2842:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2843:src/xeq.c     **** 				}
2844:src/xeq.c     **** 				else if (dp_neg_type_dc >= 7 && dp_neg_type_dc <= 9) {
2845:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2846:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2847:src/xeq.c     **** 				}
2848:src/xeq.c     **** 				else {
2849:src/xeq.c     **** 					// Fixed limit
2850:src/xeq.c     **** 					emax_minus = dp_neg_lim_dc;
2851:src/xeq.c     **** 				}
2852:src/xeq.c     **** 			}
2853:src/xeq.c     **** 
2854:src/xeq.c     **** 			if (flag_D && dp_pos_type_dc != dp_pos_type_ds) {
2855:src/xeq.c     **** 				if (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2856:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2857:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2858:src/xeq.c     **** 				else
2859:src/xeq.c     **** 					// Fixed limit
2860:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2861:src/xeq.c     **** 			}
2862:src/xeq.c     **** 			else {
2863:src/xeq.c     **** 				if (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2864:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2865:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2866:src/xeq.c     **** 				else
2867:src/xeq.c     **** 					// Fixed limit
2868:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2869:src/xeq.c     **** 			}
2870:src/xeq.c     **** 
2871:src/xeq.c     **** 			goto check_limits;
2872:src/xeq.c     **** 		}
2873:src/xeq.c     **** 
2874:src/xeq.c     **** 		if (flag_D && neg_type_dc != neg_type_ds) {
2875:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
2876:src/xeq.c     **** 				// Don't allow denormal numbers
ARM GAS  /tmp/ccaPnj5t.s 			page 61


2877:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2878:src/xeq.c     **** 			}
2879:src/xeq.c     **** 			else if (neg_type_ds >= 4 && neg_type_ds <= 6) {
2880:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2881:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2882:src/xeq.c     **** 			}
2883:src/xeq.c     **** 			else if (neg_type_ds >= 7 && neg_type_ds <= 9) {
2884:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2885:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2886:src/xeq.c     **** 			}
2887:src/xeq.c     **** 			else {
2888:src/xeq.c     **** 				// Fixed limit
2889:src/xeq.c     **** 				emax_minus = neg_lim_ds;
2890:src/xeq.c     **** 			}
2891:src/xeq.c     **** 		}
2892:src/xeq.c     **** 		else {
2893:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 3) {
2894:src/xeq.c     **** 				// Don't allow denormal numbers
2895:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2896:src/xeq.c     **** 			}
2897:src/xeq.c     **** 			else if (neg_type_dc >= 4 && neg_type_dc <= 6) {
2898:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2899:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2900:src/xeq.c     **** 			}
2901:src/xeq.c     **** 			else if (neg_type_dc >= 7 && neg_type_dc <= 9) {
2902:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2903:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2904:src/xeq.c     **** 			}
2905:src/xeq.c     **** 			else {
2906:src/xeq.c     **** 				// Fixed limit
2907:src/xeq.c     **** 				emax_minus = neg_lim_dc;
2908:src/xeq.c     **** 			}
2909:src/xeq.c     **** 		}
2910:src/xeq.c     **** 
2911:src/xeq.c     **** 		if (flag_D && pos_type_dc != pos_type_ds) {
2912:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
2913:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2914:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2915:src/xeq.c     **** 			else
2916:src/xeq.c     **** 				// Fixed limit
2917:src/xeq.c     **** 				emax_plus = pos_lim_ds;
2918:src/xeq.c     **** 		}
2919:src/xeq.c     **** 		else {
2920:src/xeq.c     **** 			if (pos_type_dc >= 1 && pos_type_dc <= 3)
2921:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2922:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2923:src/xeq.c     **** 			else
2924:src/xeq.c     **** 				// Fixed limit
2925:src/xeq.c     **** 				emax_plus = pos_lim_dc;
2926:src/xeq.c     **** 		}
2927:src/xeq.c     **** 
2928:src/xeq.c     **** check_limits:
2929:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2930:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
2931:src/xeq.c     **** 		    && (dp_neg_type_ds != neg_type_ds || dp_neg_lim_ds != neg_lim_ds)) {
2932:src/xeq.c     **** 			if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9) {
2933:src/xeq.c     **** 				if (dp_neg_type_ds % 3 == 2) { // low limit
ARM GAS  /tmp/ccaPnj5t.s 			page 62


2934:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_ds)
2935:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2936:src/xeq.c     **** 				}
2937:src/xeq.c     **** 				else if (dp_neg_type_ds % 3 == 0) { // high limit
2938:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_ds)
2939:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2940:src/xeq.c     **** 				}
2941:src/xeq.c     **** 			}
2942:src/xeq.c     **** 			if (dp_neg_lim_ds < 0 && emax_minus < 0)
2943:src/xeq.c     **** 				emax_minus = 0;
2944:src/xeq.c     **** 		}
2945:src/xeq.c     **** 		else if (large_exp_entry && dbl
2946:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
2947:src/xeq.c     **** 		                         && dp_neg_lim_dc == dp_neg_lim_ds))
2948:src/xeq.c     **** 		         && (dp_neg_type_dc != neg_type_dc || dp_neg_lim_dc != neg_lim_dc)) {
2949:src/xeq.c     **** 			if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9) {
2950:src/xeq.c     **** 				if (dp_neg_type_dc % 3 == 2) { // low limit
2951:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_dc)
2952:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2953:src/xeq.c     **** 				}
2954:src/xeq.c     **** 				else if (dp_neg_type_dc % 3 == 0) { // high limit
2955:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_dc)
2956:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2957:src/xeq.c     **** 				}
2958:src/xeq.c     **** 			}
2959:src/xeq.c     **** 			if (dp_neg_lim_dc < 0 && emax_minus < 0)
2960:src/xeq.c     **** 				emax_minus = 0;
2961:src/xeq.c     **** 		}
2962:src/xeq.c     **** 		else if (flag_D && (neg_type_dc != neg_type_ds || neg_lim_dc != neg_lim_ds)) {
2963:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
2964:src/xeq.c     **** 				if (neg_type_ds % 3 == 2) { // low limit
2965:src/xeq.c     **** 					if (emax_minus > neg_lim_ds)
2966:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2967:src/xeq.c     **** 				}
2968:src/xeq.c     **** 				else if (neg_type_ds % 3 == 0) { // high limit
2969:src/xeq.c     **** 					if (emax_minus < neg_lim_ds)
2970:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2971:src/xeq.c     **** 				}
2972:src/xeq.c     **** 			}
2973:src/xeq.c     **** 			if (neg_lim_ds < 0 && emax_minus < 0)
2974:src/xeq.c     **** 				emax_minus = 0;
2975:src/xeq.c     **** 		}
2976:src/xeq.c     **** 		else {
2977:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 9) {
2978:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
2979:src/xeq.c     **** 					if (emax_minus > neg_lim_dc)
2980:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2981:src/xeq.c     **** 				}
2982:src/xeq.c     **** 				else if (neg_type_dc % 3 == 0) { // high limit
2983:src/xeq.c     **** 					if (emax_minus < neg_lim_dc)
2984:src/xeq.c     **** 						emax_minus = neg_lim_dc;
2985:src/xeq.c     **** 				}
2986:src/xeq.c     **** 			}
2987:src/xeq.c     **** 			if (neg_lim_dc < 0 && emax_minus < 0)
2988:src/xeq.c     **** 				emax_minus = 0;
2989:src/xeq.c     **** 		}
2990:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 63


2991:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2992:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
2993:src/xeq.c     **** 		    && (dp_pos_type_ds != pos_type_ds || dp_pos_lim_ds != pos_lim_ds)) {
2994:src/xeq.c     **** 			if (dp_pos_type_ds == 2) { // low limit
2995:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_ds)
2996:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2997:src/xeq.c     **** 			}
2998:src/xeq.c     **** 			else if (dp_pos_type_ds == 3) { // high limit
2999:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_ds)
3000:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
3001:src/xeq.c     **** 			}
3002:src/xeq.c     **** 			if (dp_pos_lim_ds < 0 && emax_plus < 0)
3003:src/xeq.c     **** 				emax_plus = 0;
3004:src/xeq.c     **** 		}
3005:src/xeq.c     **** 		else if (large_exp_entry && dbl
3006:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
3007:src/xeq.c     **** 		                         && dp_pos_lim_dc == dp_pos_lim_ds))
3008:src/xeq.c     **** 		         && (dp_pos_type_dc != pos_type_dc || dp_pos_lim_dc != pos_lim_dc)) {
3009:src/xeq.c     **** 			if (dp_pos_type_dc == 2) { // low limit
3010:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_dc)
3011:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3012:src/xeq.c     **** 			}
3013:src/xeq.c     **** 			else if (dp_pos_type_dc == 3) { // high limit
3014:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_dc)
3015:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3016:src/xeq.c     **** 			}
3017:src/xeq.c     **** 			if (dp_pos_lim_dc < 0 && emax_plus < 0)
3018:src/xeq.c     **** 				emax_plus = 0;
3019:src/xeq.c     **** 		}
3020:src/xeq.c     **** 		else if (flag_D && (pos_type_dc != pos_type_ds || pos_lim_dc != pos_lim_ds)) {
3021:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
3022:src/xeq.c     **** 				if (emax_plus < pos_lim_ds)
3023:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3024:src/xeq.c     **** 			}
3025:src/xeq.c     **** 			else if (pos_type_ds == 3) { // high limit
3026:src/xeq.c     **** 				if (emax_plus > pos_lim_ds)
3027:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3028:src/xeq.c     **** 			}
3029:src/xeq.c     **** 			if (pos_lim_ds < 0 && emax_plus < 0)
3030:src/xeq.c     **** 				emax_plus = 0;
3031:src/xeq.c     **** 		}
3032:src/xeq.c     **** 		else {
3033:src/xeq.c     **** 			if (pos_type_dc == 2) { // low limit
3034:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
3035:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3036:src/xeq.c     **** 			}
3037:src/xeq.c     **** 			else if (pos_type_dc == 3) { // high limit
3038:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
3039:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3040:src/xeq.c     **** 			}
3041:src/xeq.c     **** 			if (pos_lim_dc < 0 && emax_plus < 0)
3042:src/xeq.c     **** 				emax_plus = 0;
3043:src/xeq.c     **** 		}
3044:src/xeq.c     **** 
3045:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
3046:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
3047:src/xeq.c     **** 		    && (dp_exp_chs_ds != exp_chs_ds)) {
ARM GAS  /tmp/ccaPnj5t.s 			page 64


3048:src/xeq.c     **** 			if (dp_exp_chs_ds == 0) {
3049:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3050:src/xeq.c     **** 				if (emax_minus < emax_plus)
3051:src/xeq.c     **** 					emax = emax_minus;
3052:src/xeq.c     **** 				else
3053:src/xeq.c     **** 					emax = emax_plus;
3054:src/xeq.c     **** 			}
3055:src/xeq.c     **** 			else if (dp_exp_chs_ds == 3) {
3056:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3057:src/xeq.c     **** 				if (emax_minus > emax_plus)
3058:src/xeq.c     **** 					emax = emax_minus;
3059:src/xeq.c     **** 				else
3060:src/xeq.c     **** 					emax = emax_plus;
3061:src/xeq.c     **** 			}
3062:src/xeq.c     **** 			else {
3063:src/xeq.c     **** 				if (dp_exp_chs_ds == 2 && !was_digit_entered)
3064:src/xeq.c     **** 					return;
3065:src/xeq.c     **** 				if (*p == 'D')
3066:src/xeq.c     **** 					emax = emax_minus;
3067:src/xeq.c     **** 				else
3068:src/xeq.c     **** 					emax = emax_plus;
3069:src/xeq.c     **** 			}
3070:src/xeq.c     **** 		}
3071:src/xeq.c     **** 		else if (large_exp_entry && dbl
3072:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
3073:src/xeq.c     **** 		         && (dp_exp_chs_dc != exp_chs_dc)) {
3074:src/xeq.c     **** 			if (dp_exp_chs_dc == 0) {
3075:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3076:src/xeq.c     **** 				if (emax_minus < emax_plus)
3077:src/xeq.c     **** 					emax = emax_minus;
3078:src/xeq.c     **** 				else
3079:src/xeq.c     **** 					emax = emax_plus;
3080:src/xeq.c     **** 			}
3081:src/xeq.c     **** 			else if (dp_exp_chs_dc == 3) {
3082:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3083:src/xeq.c     **** 				if (emax_minus > emax_plus)
3084:src/xeq.c     **** 					emax = emax_minus;
3085:src/xeq.c     **** 				else
3086:src/xeq.c     **** 					emax = emax_plus;
3087:src/xeq.c     **** 			}
3088:src/xeq.c     **** 			else {
3089:src/xeq.c     **** 				if (dp_exp_chs_dc == 2 && !was_digit_entered)
3090:src/xeq.c     **** 					return;
3091:src/xeq.c     **** 				if (*p == 'D')
3092:src/xeq.c     **** 					emax = emax_minus;
3093:src/xeq.c     **** 				else
3094:src/xeq.c     **** 					emax = emax_plus;
3095:src/xeq.c     **** 			}
3096:src/xeq.c     **** 		}
3097:src/xeq.c     **** 		else if (flag_D && exp_chs_dc != exp_chs_ds) {
3098:src/xeq.c     **** 			if (exp_chs_ds == 0) {
3099:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3100:src/xeq.c     **** 				if (emax_minus < emax_plus)
3101:src/xeq.c     **** 					emax = emax_minus;
3102:src/xeq.c     **** 				else
3103:src/xeq.c     **** 					emax = emax_plus;
3104:src/xeq.c     **** 			}
ARM GAS  /tmp/ccaPnj5t.s 			page 65


3105:src/xeq.c     **** 			else if (exp_chs_ds == 3) {
3106:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3107:src/xeq.c     **** 				if (emax_minus > emax_plus)
3108:src/xeq.c     **** 					emax = emax_minus;
3109:src/xeq.c     **** 				else
3110:src/xeq.c     **** 					emax = emax_plus;
3111:src/xeq.c     **** 			}
3112:src/xeq.c     **** 			else {
3113:src/xeq.c     **** 				if (exp_chs_ds == 2 && !was_digit_entered)
3114:src/xeq.c     **** 					return;
3115:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3116:src/xeq.c     **** 				if (*p == 'D')
3117:src/xeq.c     **** #else
3118:src/xeq.c     **** 				if (*p == '-')
3119:src/xeq.c     **** #endif
3120:src/xeq.c     **** 					emax = emax_minus;
3121:src/xeq.c     **** 				else
3122:src/xeq.c     **** 					emax = emax_plus;
3123:src/xeq.c     **** 			}
3124:src/xeq.c     **** 		}
3125:src/xeq.c     **** 		else {
3126:src/xeq.c     **** 			if (exp_chs_dc == 0) {
3127:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3128:src/xeq.c     **** 				if (emax_minus < emax_plus)
3129:src/xeq.c     **** 					emax = emax_minus;
3130:src/xeq.c     **** 				else
3131:src/xeq.c     **** 					emax = emax_plus;
3132:src/xeq.c     **** 			}
3133:src/xeq.c     **** 			else if (exp_chs_dc == 3) {
3134:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3135:src/xeq.c     **** 				if (emax_minus > emax_plus)
3136:src/xeq.c     **** 					emax = emax_minus;
3137:src/xeq.c     **** 				else
3138:src/xeq.c     **** 					emax = emax_plus;
3139:src/xeq.c     **** 			}
3140:src/xeq.c     **** 			else {
3141:src/xeq.c     **** 				if (exp_chs_dc == 2 && !was_digit_entered)
3142:src/xeq.c     **** 					return;
3143:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3144:src/xeq.c     **** 				if (*p == 'D')
3145:src/xeq.c     **** #else
3146:src/xeq.c     **** 				if (*p == '-')
3147:src/xeq.c     **** #endif
3148:src/xeq.c     **** 					emax = emax_minus;
3149:src/xeq.c     **** 				else
3150:src/xeq.c     **** 					emax = emax_plus;
3151:src/xeq.c     **** 			}
3152:src/xeq.c     **** 		}
3153:src/xeq.c     **** 	}
3154:src/xeq.c     **** 
3155:src/xeq.c     **** do_not_check_limits:
3156:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3157:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3158:src/xeq.c     **** 	p++;
3159:src/xeq.c     **** #  else
3160:src/xeq.c     **** 	if (*p == '-')
3161:src/xeq.c     **** 		p++;
ARM GAS  /tmp/ccaPnj5t.s 			page 66


3162:src/xeq.c     **** #  endif
3163:src/xeq.c     **** 	/* Check if the current exponent exceeds the range.
3164:src/xeq.c     **** 	 * If so, shift it back until it doesn't.
3165:src/xeq.c     **** 	 * Also remove leading zeros.
3166:src/xeq.c     **** 	 */
3167:src/xeq.c     **** 	while (s_to_i(p) > emax || *p == '0') {
3168:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
3169:src/xeq.c     **** 			p[i] = p[i + 1];
3170:src/xeq.c     **** 		CmdLineLength--;
3171:src/xeq.c     **** 	}
3172:src/xeq.c     **** #else
3173:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3174:src/xeq.c     **** 	negative = (*p == 'D');
3175:src/xeq.c     **** 	p++;
3176:src/xeq.c     **** #  else
3177:src/xeq.c     **** 	if (*p == '-') {
3178:src/xeq.c     **** 		p++;
3179:src/xeq.c     **** 		negative = 1;
3180:src/xeq.c     **** 	}
3181:src/xeq.c     **** 	else negative = 0;
3182:src/xeq.c     **** #  endif
3183:src/xeq.c     **** 	// Display a warning if the exponent is out of range.
3184:src/xeq.c     **** 	if ((i = s_to_i(p)) > emax) {
3185:src/xeq.c     **** 		if (was_digit_entered) {
3186:src/xeq.c     **** 			CmdLineLength--;
3187:src/xeq.c     **** 			if (large_exp_entry && dbl ? i > 9999 : i > 999) {
3188:src/xeq.c     **** 				report_warn(ERR_TOO_LONG);
3189:src/xeq.c     **** 				return;
3190:src/xeq.c     **** 			}
3191:src/xeq.c     **** 		}
3192:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3193:src/xeq.c     **** 		else if (('D' | 1) == 'E')
3194:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3195:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3196:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3197:src/xeq.c     **** 		else
3198:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3199:src/xeq.c     **** #  else
3200:src/xeq.c     **** 		else if (negative) {
3201:src/xeq.c     **** 			scopy(p - 1, p);
3202:src/xeq.c     **** 			CmdLineLength--;
3203:src/xeq.c     **** 		}
3204:src/xeq.c     **** 		else {
3205:src/xeq.c     **** 			xcopy(p + 1, p, CMDLINELEN - 1 - CmdLineEex);
3206:src/xeq.c     **** 			*p = '-';
3207:src/xeq.c     **** 			CmdLineLength++;
3208:src/xeq.c     **** 		}
3209:src/xeq.c     **** #  endif
3210:src/xeq.c     **** 		if (negative)
3211:src/xeq.c     **** 			report_warn(ERR_TOO_SMALL);
3212:src/xeq.c     **** 		else
3213:src/xeq.c     **** 			report_warn(ERR_TOO_BIG);
3214:src/xeq.c     **** 	}
3215:src/xeq.c     **** #endif
3216:src/xeq.c     **** }
3217:src/xeq.c     **** 
3218:src/xeq.c     **** /* We've encountered a CHS while entering the command line.
ARM GAS  /tmp/ccaPnj5t.s 			page 67


3219:src/xeq.c     ****  */
3220:src/xeq.c     **** static void cmdlinechs(void) {
3221:src/xeq.c     **** 	if (CmdLineEex) {
3222:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3223:src/xeq.c     **** 		// 'D' instead of 'E' indicates a negative exponent.
3224:src/xeq.c     **** 		// Four-digit exponents wouldn't fit into Cmdline if we used 'E-'.
3225:src/xeq.c     **** 		if (('D' | 1) == 'E')
3226:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3227:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3228:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3229:src/xeq.c     **** 		else
3230:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3231:src/xeq.c     **** #else
3232:src/xeq.c     **** 		const unsigned int pos = CmdLineEex + 1;
3233:src/xeq.c     **** 		if (CmdLineLength <= pos) {
3234:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
3235:src/xeq.c     **** 				append_cmdline('-');
3236:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
3237:src/xeq.c     **** 			if (CmdLineLength != pos)
3238:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
3239:src/xeq.c     **** 			CmdLineLength--;
3240:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3241:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
3242:src/xeq.c     **** 			Cmdline[pos] = '-';
3243:src/xeq.c     **** 			CmdLineLength++;
3244:src/xeq.c     **** 		}
3245:src/xeq.c     **** #endif
3246:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC == 1 \
3247:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DS == -1 || SP_EXP_ENTRY_CHS_DS == 1 \
3248:src/xeq.c     ****     || ((DP_EXP_ENTRY_CHS_DC == 1 || DP_EXP_ENTRY_CHS_DS == 1) && defined(LARGE_EXPONENT_ENTRY))
3249:src/xeq.c     **** 		exponent_adjusted(0);
3250:src/xeq.c     **** #endif
3251:src/xeq.c     **** 	} else {
3252:src/xeq.c     **** 		if (Cmdline[0] == '-') {
3253:src/xeq.c     **** 			if (CmdLineLength > 1)
3254:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
3255:src/xeq.c     **** 			CmdLineLength--;
3256:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3257:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
3258:src/xeq.c     **** 			Cmdline[0] = '-';
3259:src/xeq.c     **** 			CmdLineLength++;
3260:src/xeq.c     **** 		}
3261:src/xeq.c     **** 	}
3262:src/xeq.c     **** }
3263:src/xeq.c     **** 
3264:src/xeq.c     **** /* Execute a tests command
3265:src/xeq.c     ****  */
3266:src/xeq.c     **** static void do_tst(int cmp, const enum tst_op op) {
3267:src/xeq.c     **** 	int a = 0;
3268:src/xeq.c     **** 	int iszero, isneg;
3269:src/xeq.c     **** 
3270:src/xeq.c     **** 	process_cmdline_set_lift();
3271:src/xeq.c     **** 
3272:src/xeq.c     **** 	if (is_intmode()) {
3273:src/xeq.c     **** 		unsigned long long int xv, yv;
3274:src/xeq.c     **** 		int xs, ys;
3275:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 68


3276:src/xeq.c     **** 		xv = extract_value(getX_int(), &xs);
3277:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
3278:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
3279:src/xeq.c     **** 			ys = 0;
3280:src/xeq.c     **** 		} else
3281:src/xeq.c     **** 			yv = extract_value(get_reg_n_int(cmp), &ys);
3282:src/xeq.c     **** 
3283:src/xeq.c     **** 		if (xv == 0 && yv == 0)
3284:src/xeq.c     **** 			iszero = 1;
3285:src/xeq.c     **** 		else
3286:src/xeq.c     **** 			iszero = (xv == yv) && (xs == ys);
3287:src/xeq.c     **** 
3288:src/xeq.c     **** 		if (xs == ys) {		// same sign
3289:src/xeq.c     **** 			if (xs)		// both negative
3290:src/xeq.c     **** 				isneg = xv > yv;
3291:src/xeq.c     **** 			else		// both positive
3292:src/xeq.c     **** 				isneg = xv < yv;
3293:src/xeq.c     **** 		} else
3294:src/xeq.c     **** 			isneg = xs;	// opposite signs
3295:src/xeq.c     **** 	} else {
3296:src/xeq.c     **** 		decNumber t, x, r;
3297:src/xeq.c     **** 
3298:src/xeq.c     **** 		getX(&x);
3299:src/xeq.c     **** 		if (decNumberIsNaN(&x))
3300:src/xeq.c     **** 			goto flse;
3301:src/xeq.c     **** 
3302:src/xeq.c     **** 		getRegister(&t, cmp);
3303:src/xeq.c     **** 		if (decNumberIsNaN(&t))
3304:src/xeq.c     **** 			goto flse;
3305:src/xeq.c     **** 
3306:src/xeq.c     **** 		if (op == TST_APX) {
3307:src/xeq.c     **** 			decNumberRnd(&x, &x);
3308:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
3309:src/xeq.c     **** 				decNumberRnd(&t, &t);
3310:src/xeq.c     **** 		}
3311:src/xeq.c     **** 		dn_compare(&r, &x, &t);
3312:src/xeq.c     **** 		iszero = dn_eq0(&r);
3313:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
3314:src/xeq.c     **** 	}
3315:src/xeq.c     **** 
3316:src/xeq.c     **** 	switch (op) {
3317:src/xeq.c     **** 	case TST_APX:
3318:src/xeq.c     **** 	case TST_EQ:	a = iszero;		break;
3319:src/xeq.c     **** 	case TST_NE:	a = !iszero;		break;
3320:src/xeq.c     **** 	case TST_LT:	a = isneg && !iszero;	break;
3321:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
3322:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
3323:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
3324:src/xeq.c     **** 	default:	a = 0;			break;
3325:src/xeq.c     **** 	}
3326:src/xeq.c     **** 
3327:src/xeq.c     **** flse:	fin_tst(a);
3328:src/xeq.c     **** }
3329:src/xeq.c     **** 
3330:src/xeq.c     **** void check_zero(enum nilop op) {
3331:src/xeq.c     **** 	int neg;
3332:src/xeq.c     **** 	int zero;
ARM GAS  /tmp/ccaPnj5t.s 			page 69


3333:src/xeq.c     **** 
3334:src/xeq.c     **** 	if (is_intmode()) {
3335:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
3336:src/xeq.c     **** 		zero = (xv == 0);
3337:src/xeq.c     **** 	} else {
3338:src/xeq.c     **** 		decNumber x;
3339:src/xeq.c     **** 		getX(&x);
3340:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
3341:src/xeq.c     **** 		zero = dn_eq0(&x);
3342:src/xeq.c     **** 	}
3343:src/xeq.c     **** 	if (op == OP_Xeq_pos0)
3344:src/xeq.c     **** 		fin_tst(zero && !neg);
3345:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
3346:src/xeq.c     **** 		fin_tst(zero && neg);
3347:src/xeq.c     **** }
3348:src/xeq.c     **** 
3349:src/xeq.c     **** void cmdtest(unsigned int arg, enum rarg op) {
3350:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
3351:src/xeq.c     **** }
3352:src/xeq.c     **** 
3353:src/xeq.c     **** static void do_ztst(const decNumber *re, const decNumber *im, enum tst_op op) {
3354:src/xeq.c     **** 	decNumber x, y;
3355:src/xeq.c     **** 
3356:src/xeq.c     **** 	process_cmdline_set_lift();
3357:src/xeq.c     **** 	if (is_intmode()) {
3358:src/xeq.c     **** 		bad_mode_error();
3359:src/xeq.c     **** 		return;
3360:src/xeq.c     **** 	}
3361:src/xeq.c     **** 	getXY(&x, &y);
3362:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
3363:src/xeq.c     **** 		fin_tst(0);
3364:src/xeq.c     **** 		return;
3365:src/xeq.c     **** 	}
3366:src/xeq.c     **** 	fin_tst((op == TST_EQ) == (dn_eq(&x, re) && dn_eq(&y, im)));
3367:src/xeq.c     **** }
3368:src/xeq.c     **** 
3369:src/xeq.c     **** void cmdztest(unsigned int arg, enum rarg op) {
3370:src/xeq.c     **** 	decNumber re, im;
3371:src/xeq.c     **** 	getRegister(&re, arg);
3372:src/xeq.c     **** 	getRegister(&im, arg + 1);
3373:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
3374:src/xeq.c     **** }
3375:src/xeq.c     **** 
3376:src/xeq.c     **** static int incdec(unsigned int arg, int inc) {
3377:src/xeq.c     **** 	if (is_intmode()) {
3378:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3379:src/xeq.c     **** 		int xs;
3380:src/xeq.c     **** 		unsigned long long int xv;
3381:src/xeq.c     **** 
3382:src/xeq.c     **** 		if (inc)
3383:src/xeq.c     **** 			x = intAdd(x, 1LL);
3384:src/xeq.c     **** 		else
3385:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3386:src/xeq.c     **** 		set_reg_n_int(arg, x);
3387:src/xeq.c     **** 
3388:src/xeq.c     **** 		xv = extract_value(x, &xs);
3389:src/xeq.c     **** 		return xv != 0;
ARM GAS  /tmp/ccaPnj5t.s 			page 70


3390:src/xeq.c     **** 	} else {
3391:src/xeq.c     **** 		decNumber x, y;
3392:src/xeq.c     **** 
3393:src/xeq.c     **** 		getRegister(&x, arg);
3394:src/xeq.c     **** 		if (inc)
3395:src/xeq.c     **** 			dn_inc(&x);
3396:src/xeq.c     **** 		else
3397:src/xeq.c     **** 			dn_dec(&x);
3398:src/xeq.c     **** 		setRegister(arg, &x);
3399:src/xeq.c     **** 		decNumberTrunc(&y, &x);
3400:src/xeq.c     **** 		return ! dn_eq0(&y);
3401:src/xeq.c     **** 	}
3402:src/xeq.c     **** }
3403:src/xeq.c     **** 
3404:src/xeq.c     **** void cmdlincdec(unsigned int arg, enum rarg op) {
3405:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
3406:src/xeq.c     **** }
3407:src/xeq.c     **** 
3408:src/xeq.c     **** void cmdloopz(unsigned int arg, enum rarg op) {
3409:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
3410:src/xeq.c     **** }
3411:src/xeq.c     **** 
3412:src/xeq.c     **** void cmdloop(unsigned int arg, enum rarg op) {
3413:src/xeq.c     **** 	if (is_intmode()) {
3414:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3415:src/xeq.c     **** 		int xs;
3416:src/xeq.c     **** 		unsigned long long int xv;
3417:src/xeq.c     **** 
3418:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE)
3419:src/xeq.c     **** 			x = intAdd(x, 1LL);
3420:src/xeq.c     **** 		else
3421:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3422:src/xeq.c     **** 		set_reg_n_int(arg, x);
3423:src/xeq.c     **** 
3424:src/xeq.c     **** 		xv = extract_value(x, &xs);
3425:src/xeq.c     **** 		if (op == RARG_ISG)
3426:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
3427:src/xeq.c     **** 		else if (op == RARG_DSE)
3428:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
3429:src/xeq.c     **** 		else if (op == RARG_ISE)
3430:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
3431:src/xeq.c     **** 		else // if (op == RARG_DSL)
3432:src/xeq.c     **** 			fin_tst(! (xs != 0 && xv > 0));		// < 0
3433:src/xeq.c     **** 		return;
3434:src/xeq.c     **** 	} else {
3435:src/xeq.c     **** 		decNumber x, i, f, n, u;
3436:src/xeq.c     **** 
3437:src/xeq.c     **** 		getRegister(&x, arg);
3438:src/xeq.c     **** 
3439:src/xeq.c     **** 		// Break the number into the important bits
3440:src/xeq.c     **** 		// nnnnn.fffii
3441:src/xeq.c     **** 		dn_abs(&f, &x);
3442:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
3443:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
3444:src/xeq.c     **** 		if (decNumberIsNegative(&x))
3445:src/xeq.c     **** 			dn_minus(&n, &n);
3446:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
ARM GAS  /tmp/ccaPnj5t.s 			page 71


3447:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
3448:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
3449:src/xeq.c     **** 		dn_mul100(&x, &i);
3450:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
3451:src/xeq.c     **** 		if (dn_eq0(&i))
3452:src/xeq.c     **** 			dn_1(&i);
3453:src/xeq.c     **** 
3454:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE) {
3455:src/xeq.c     **** 			dn_add(&n, &n, &i);
3456:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3457:src/xeq.c     **** 			if (op == RARG_ISE)
3458:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
3459:src/xeq.c     **** 			else
3460:src/xeq.c     **** 				fin_tst(dn_ge0(&x));
3461:src/xeq.c     **** 		} else {
3462:src/xeq.c     **** 			dn_subtract(&n, &n, &i);
3463:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3464:src/xeq.c     **** 			if (op == RARG_DSL)
3465:src/xeq.c     **** 				fin_tst(dn_le0(&x));
3466:src/xeq.c     **** 			else
3467:src/xeq.c     **** 				fin_tst(dn_lt0(&x));
3468:src/xeq.c     **** 		}
3469:src/xeq.c     **** 
3470:src/xeq.c     **** 		// Finally rebuild the result
3471:src/xeq.c     **** 		if (decNumberIsNegative(&n)) {
3472:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
3473:src/xeq.c     **** 		} else
3474:src/xeq.c     **** 			dn_add(&x, &n, &u);
3475:src/xeq.c     **** 		setRegister(arg, &x);
3476:src/xeq.c     **** 	}
3477:src/xeq.c     **** }
3478:src/xeq.c     **** 
3479:src/xeq.c     **** 
3480:src/xeq.c     **** /* Shift a real number by 10 to the specified power
3481:src/xeq.c     ****  */
3482:src/xeq.c     **** void op_shift_digit(unsigned int n, enum rarg op) {
3483:src/xeq.c     **** 	decNumber x;
3484:src/xeq.c     **** 	int adjust = n;
3485:src/xeq.c     **** 
3486:src/xeq.c     **** 	if (is_intmode()) {
3487:src/xeq.c     **** 		bad_mode_error();
3488:src/xeq.c     **** 		return;
3489:src/xeq.c     **** 	}
3490:src/xeq.c     **** 	getX(&x);
3491:src/xeq.c     **** 	setlastX();
3492:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
3493:src/xeq.c     **** 		return;
3494:src/xeq.c     **** 	if (op == RARG_SRD)
3495:src/xeq.c     **** 		adjust = -adjust;
3496:src/xeq.c     **** 	x.exponent += adjust;
3497:src/xeq.c     **** 	setX(&x);
3498:src/xeq.c     **** }
3499:src/xeq.c     **** 
3500:src/xeq.c     **** 
3501:src/xeq.c     **** /* Return a pointer to the byte with the indicated flag in it.
3502:src/xeq.c     ****  * also return a byte with the relevant bit mask set up.
3503:src/xeq.c     ****  * Also, handle local flags.
ARM GAS  /tmp/ccaPnj5t.s 			page 72


3504:src/xeq.c     ****  */
3505:src/xeq.c     **** static unsigned short int *flag_word(int n, unsigned short int *mask) {
 457              		.loc 1 3505 71 is_stmt 1 view -0
 458              		.cfi_startproc
 459              		@ args = 0, pretend = 0, frame = 0
 460              		@ frame_needed = 0, uses_anonymous_args = 0
 461              		@ link register save eliminated.
3506:src/xeq.c     **** 	unsigned short int *p;
 462              		.loc 1 3506 2 view .LVU141
3507:src/xeq.c     **** 
3508:src/xeq.c     **** 	if (n >= LOCAL_FLAG_BASE) {
 463              		.loc 1 3508 2 view .LVU142
 464              		.loc 1 3508 5 is_stmt 0 view .LVU143
 465 0000 6F28     		cmp	r0, #111
3505:src/xeq.c     **** 	unsigned short int *p;
 466              		.loc 1 3505 71 view .LVU144
 467 0002 10B4     		push	{r4}
 468              		.cfi_def_cfa_offset 4
 469              		.cfi_offset 4, -4
 470              		.loc 1 3508 5 view .LVU145
 471 0004 29DD     		ble	.L42
3509:src/xeq.c     **** 		n -= LOCAL_FLAG_BASE;
 472              		.loc 1 3509 3 is_stmt 1 view .LVU146
 473              		.loc 1 3509 5 is_stmt 0 view .LVU147
 474 0006 7038     		subs	r0, r0, #112
 475              	.LVL39:
3510:src/xeq.c     **** 		if (n > XROM_SYSTEM_FLAG_BASE && XromFlags.xIN) {
 476              		.loc 1 3510 3 is_stmt 1 view .LVU148
 477              		.loc 1 3510 6 is_stmt 0 view .LVU149
 478 0008 0828     		cmp	r0, #8
 479 000a 04DD     		ble	.L43
 480              		.loc 1 3510 33 discriminator 1 view .LVU150
 481 000c 174B     		ldr	r3, .L54
 482 000e 93F90120 		ldrsb	r2, [r3, #1]
 483 0012 002A     		cmp	r2, #0
 484 0014 15DB     		blt	.L44
 485              	.L43:
3511:src/xeq.c     **** 			// XROM special
3512:src/xeq.c     **** 			p = &XromFlagWord;
3513:src/xeq.c     **** 		}
3514:src/xeq.c     **** 		else if (LocalRegs & 1) {
 486              		.loc 1 3514 8 is_stmt 1 view .LVU151
 487              		.loc 1 3514 12 is_stmt 0 view .LVU152
 488 0016 164B     		ldr	r3, .L54+4
 489 0018 1B68     		ldr	r3, [r3]
 490 001a B3F9DE27 		ldrsh	r2, [r3, #2014]
3515:src/xeq.c     **** 			// Odd frame: flags are at end of frame
3516:src/xeq.c     **** 			p = RetStk + LocalRegs + local_levels() - 1;
 491              		.loc 1 3516 44 view .LVU153
 492 001e 154B     		ldr	r3, .L54+8
3514:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 493              		.loc 1 3514 11 view .LVU154
 494 0020 D407     		lsls	r4, r2, #31
 495              		.loc 1 3516 44 view .LVU155
 496 0022 1B68     		ldr	r3, [r3]
3514:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 497              		.loc 1 3514 11 view .LVU156
ARM GAS  /tmp/ccaPnj5t.s 			page 73


 498 0024 1ED5     		bpl	.L45
 499              		.loc 1 3516 4 is_stmt 1 view .LVU157
 500              	.LBB1319:
 501              	.LBI1319:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 502              		.loc 1 217 5 view .LVU158
 503              	.LBB1320:
 218:src/xeq.c     **** }
 504              		.loc 1 218 2 view .LVU159
 218:src/xeq.c     **** }
 505              		.loc 1 218 57 is_stmt 0 view .LVU160
 506 0026 002A     		cmp	r2, #0
 507 0028 B8BF     		it	lt
 508 002a 33F81240 		ldrhlt	r4, [r3, r2, lsl #1]
 509              	.LBE1320:
 510              	.LBE1319:
 511              		.loc 1 3516 44 view .LVU161
 512 002e 02F10042 		add	r2, r2, #-2147483648
 513 0032 B4BF     		ite	lt
 514 0034 C4F30B04 		ubfxlt	r4, r4, #0, #12
 515              	.LBB1322:
 516              	.LBB1321:
 517 0038 0024     		movge	r4, #0
 518              	.LBE1321:
 519              	.LBE1322:
 520 003a 013A     		subs	r2, r2, #1
 521 003c 2244     		add	r2, r2, r4
 522              		.loc 1 3516 6 view .LVU162
 523 003e 03EB4203 		add	r3, r3, r2, lsl #1
 524              	.LVL40:
 525              	.L44:
3517:src/xeq.c     **** 		}
3518:src/xeq.c     **** 		else {
3519:src/xeq.c     **** 			// Even frame: Flags are at beginning of frame
3520:src/xeq.c     **** 			p = RetStk + LocalRegs + 1;
3521:src/xeq.c     **** 		}
3522:src/xeq.c     **** 	}
3523:src/xeq.c     **** 	else
3524:src/xeq.c     **** 		p = UserFlags;
3525:src/xeq.c     **** 
3526:src/xeq.c     **** 	if (mask != NULL)
 526              		.loc 1 3526 2 is_stmt 1 view .LVU163
 527              		.loc 1 3526 5 is_stmt 0 view .LVU164
 528 0042 21B1     		cbz	r1, .L47
3527:src/xeq.c     **** 		*mask = 1 << (n & 15);
 529              		.loc 1 3527 3 is_stmt 1 view .LVU165
 530              		.loc 1 3527 19 is_stmt 0 view .LVU166
 531 0044 00F00F04 		and	r4, r0, #15
 532              		.loc 1 3527 13 view .LVU167
 533 0048 0122     		movs	r2, #1
 534 004a A240     		lsls	r2, r2, r4
 535              		.loc 1 3527 9 view .LVU168
 536 004c 0A80     		strh	r2, [r1]	@ movhi
 537              	.L47:
3528:src/xeq.c     **** 	return p + (n >> 4);
 538              		.loc 1 3528 2 is_stmt 1 view .LVU169
 539              		.loc 1 3528 16 is_stmt 0 view .LVU170
ARM GAS  /tmp/ccaPnj5t.s 			page 74


 540 004e 0011     		asrs	r0, r0, #4
 541              	.LVL41:
3529:src/xeq.c     **** }
 542              		.loc 1 3529 1 view .LVU171
 543 0050 03EB4000 		add	r0, r3, r0, lsl #1
 544 0054 5DF8044B 		ldr	r4, [sp], #4
 545              		.cfi_remember_state
 546              		.cfi_restore 4
 547              		.cfi_def_cfa_offset 0
 548 0058 7047     		bx	lr
 549              	.LVL42:
 550              	.L42:
 551              		.cfi_restore_state
3524:src/xeq.c     **** 
 552              		.loc 1 3524 3 is_stmt 1 view .LVU172
3524:src/xeq.c     **** 
 553              		.loc 1 3524 7 is_stmt 0 view .LVU173
 554 005a 054B     		ldr	r3, .L54+4
3524:src/xeq.c     **** 
 555              		.loc 1 3524 5 view .LVU174
 556 005c 1B68     		ldr	r3, [r3]
 557 005e 03F5FE63 		add	r3, r3, #2032
 558              	.LVL43:
3524:src/xeq.c     **** 
 559              		.loc 1 3524 5 view .LVU175
 560 0062 EEE7     		b	.L44
 561              	.LVL44:
 562              	.L45:
3520:src/xeq.c     **** 		}
 563              		.loc 1 3520 4 is_stmt 1 view .LVU176
3520:src/xeq.c     **** 		}
 564              		.loc 1 3520 27 is_stmt 0 view .LVU177
 565 0064 0132     		adds	r2, r2, #1
3520:src/xeq.c     **** 		}
 566              		.loc 1 3520 6 view .LVU178
 567 0066 03EB4203 		add	r3, r3, r2, lsl #1
 568              	.LVL45:
3520:src/xeq.c     **** 		}
 569              		.loc 1 3520 6 view .LVU179
 570 006a EAE7     		b	.L44
 571              	.L55:
 572              		.align	2
 573              	.L54:
 574 006c 00000000 		.word	XromParams
 575 0070 00000000 		.word	main_ram
 576 0074 00000000 		.word	RetStk
 577              		.cfi_endproc
 578              	.LFE196:
 580              		.section	.text.set_zero,"ax",%progbits
 581              		.align	1
 582              		.p2align 2,,3
 583              		.syntax unified
 584              		.thumb
 585              		.thumb_func
 586              		.fpu fpv4-sp-d16
 588              	set_zero:
 589              	.LVL46:
ARM GAS  /tmp/ccaPnj5t.s 			page 75


 590              	.LFB105:
1528:src/xeq.c     **** 	zero_regs(x, 1);
 591              		.loc 1 1528 35 is_stmt 1 view -0
 592              		.cfi_startproc
 593              		@ args = 0, pretend = 0, frame = 0
 594              		@ frame_needed = 0, uses_anonymous_args = 0
 595              		@ link register save eliminated.
1529:src/xeq.c     **** }
 596              		.loc 1 1529 2 view .LVU181
 597              	.LBB1323:
 598              	.LBI1323:
1500:src/xeq.c     **** #if 0
 599              		.loc 1 1500 6 view .LVU182
 600              	.LBB1324:
1515:src/xeq.c     **** #endif
 601              		.loc 1 1515 2 view .LVU183
 602              	.LBB1325:
 603              	.LBI1325:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 604              		.loc 1 1100 5 view .LVU184
 605              	.LBB1326:
1101:src/xeq.c     **** }
 606              		.loc 1 1101 2 view .LVU185
1101:src/xeq.c     **** }
 607              		.loc 1 1101 24 is_stmt 0 view .LVU186
 608 0000 074B     		ldr	r3, .L57
 609 0002 1B68     		ldr	r3, [r3]
 610 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 611 0008 44F20102 		movw	r2, #16385
 612 000c 1A40     		ands	r2, r2, r3
 613              	.LBE1326:
 614              	.LBE1325:
1515:src/xeq.c     **** #endif
 615              		.loc 1 1515 2 view .LVU187
 616 000e B2F5804F 		cmp	r2, #16384
 617 0012 0CBF     		ite	eq
 618 0014 1022     		moveq	r2, #16
 619 0016 0822     		movne	r2, #8
 620 0018 0021     		movs	r1, #0
 621 001a FFF7FEBF 		b	xset
 622              	.LVL47:
 623              	.L58:
1515:src/xeq.c     **** #endif
 624              		.loc 1 1515 2 view .LVU188
 625 001e 00BF     		.align	2
 626              	.L57:
 627 0020 00000000 		.word	main_ram
 628              	.LBE1324:
 629              	.LBE1323:
 630              		.cfi_endproc
 631              	.LFE105:
 633              		.section	.text.intResult,"ax",%progbits
 634              		.align	1
 635              		.p2align 2,,3
 636              		.syntax unified
 637              		.thumb
 638              		.thumb_func
ARM GAS  /tmp/ccaPnj5t.s 			page 76


 639              		.fpu fpv4-sp-d16
 641              	intResult:
 642              	.LVL48:
 643              	.LFB237:
3530:src/xeq.c     **** 
3531:src/xeq.c     **** int get_user_flag(int n) {
3532:src/xeq.c     **** 	unsigned short mask;
3533:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
3534:src/xeq.c     **** 
3535:src/xeq.c     **** 	return (*f & mask)? 1 : 0;
3536:src/xeq.c     **** }
3537:src/xeq.c     **** 
3538:src/xeq.c     **** void put_user_flag(int n, int f) {
3539:src/xeq.c     **** 	if (f)	set_user_flag(n);
3540:src/xeq.c     **** 	else	clr_user_flag(n);
3541:src/xeq.c     **** }
3542:src/xeq.c     **** 
3543:src/xeq.c     **** #ifndef set_user_flag
3544:src/xeq.c     **** void set_user_flag(int n) {
3545:src/xeq.c     **** 	unsigned short mask;
3546:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3547:src/xeq.c     **** 
3548:src/xeq.c     **** 	*f |= mask;
3549:src/xeq.c     **** }
3550:src/xeq.c     **** 
3551:src/xeq.c     **** void clr_user_flag(int n) {
3552:src/xeq.c     **** 	unsigned short mask;
3553:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3554:src/xeq.c     **** 
3555:src/xeq.c     **** 	*f &= ~mask;
3556:src/xeq.c     **** }
3557:src/xeq.c     **** #endif
3558:src/xeq.c     **** 
3559:src/xeq.c     **** void cmdflag(unsigned int arg, enum rarg op) {
3560:src/xeq.c     **** 	unsigned short mask;
3561:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
3562:src/xeq.c     **** 	int flg = *f & mask;
3563:src/xeq.c     **** 
3564:src/xeq.c     **** 	switch (op) {
3565:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
3566:src/xeq.c     **** 	case RARG_CF:	flg = 0;			   break;
3567:src/xeq.c     **** 	case RARG_FF:	flg = flg? 0 : 1;		   break;
3568:src/xeq.c     **** 
3569:src/xeq.c     **** 	case RARG_FS:	fin_tst(flg);			   return;
3570:src/xeq.c     **** 	case RARG_FC:	fin_tst(! flg);			   return;
3571:src/xeq.c     **** 
3572:src/xeq.c     **** 	case RARG_FSC:	fin_tst(flg); flg = 0;		   break;
3573:src/xeq.c     **** 	case RARG_FSS:	fin_tst(flg); flg = 1;		   break;
3574:src/xeq.c     **** 	case RARG_FSF:	fin_tst(flg); flg = flg ? 0 : 1;   break;
3575:src/xeq.c     **** 
3576:src/xeq.c     **** 	case RARG_FCC:	fin_tst(! flg);	flg = 0;	   break;
3577:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
3578:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
3579:src/xeq.c     **** 
3580:src/xeq.c     **** 	default:
3581:src/xeq.c     **** 		return;
3582:src/xeq.c     **** 	}
ARM GAS  /tmp/ccaPnj5t.s 			page 77


3583:src/xeq.c     **** 
3584:src/xeq.c     **** 	// And write the value back
3585:src/xeq.c     **** 	if (flg)
3586:src/xeq.c     **** 		*f |= mask;
3587:src/xeq.c     **** 	else
3588:src/xeq.c     **** 		*f &= ~mask;
3589:src/xeq.c     **** 
3590:src/xeq.c     **** 	if ( arg == A_FLAG ) {
3591:src/xeq.c     **** 		dot( BIG_EQ, flg );
3592:src/xeq.c     **** 		finish_display(); // BIG_EQ
3593:src/xeq.c     **** 	}
3594:src/xeq.c     **** }
3595:src/xeq.c     **** 
3596:src/xeq.c     **** /* Reset all flags to off/false
3597:src/xeq.c     ****  */
3598:src/xeq.c     **** void clrflags(enum nilop op) {
3599:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
3600:src/xeq.c     **** 	if (LocalRegs < 0) {
3601:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
3602:src/xeq.c     **** 	}
3603:src/xeq.c     **** }
3604:src/xeq.c     **** 
3605:src/xeq.c     **** 
3606:src/xeq.c     **** /* Integer word size
3607:src/xeq.c     ****  */
3608:src/xeq.c     **** void intws(unsigned int arg, enum rarg op) {
3609:src/xeq.c     **** 	if (is_intmode()) {
3610:src/xeq.c     **** 		int i, ss = stack_size();
3611:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
3612:src/xeq.c     **** 		long long int v;
3613:src/xeq.c     **** 
3614:src/xeq.c     **** 		for (i=0; i<ss; i++) {
3615:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
3616:src/xeq.c     **** 			UState.int_len = arg;
3617:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
3618:src/xeq.c     **** 			UState.int_len = oldlen;
3619:src/xeq.c     **** 		}
3620:src/xeq.c     **** 		v = mask_value(get_reg_n_int(regL_idx));
3621:src/xeq.c     **** 		UState.int_len = arg;
3622:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
3623:src/xeq.c     **** 	} else
3624:src/xeq.c     **** 	    UState.int_len = arg;
3625:src/xeq.c     **** }
3626:src/xeq.c     **** 
3627:src/xeq.c     **** 
3628:src/xeq.c     **** /* Convert from a real to a fraction
3629:src/xeq.c     ****  */
3630:src/xeq.c     **** 
3631:src/xeq.c     **** void get_maxdenom(decNumber *d) {
3632:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
3633:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
3634:src/xeq.c     **** }
3635:src/xeq.c     **** 
3636:src/xeq.c     **** void op_2frac(enum nilop op) {
3637:src/xeq.c     **** 	decNumber z, n, d, t;
3638:src/xeq.c     **** 
3639:src/xeq.c     **** 	if (UState.intm) {
ARM GAS  /tmp/ccaPnj5t.s 			page 78


3640:src/xeq.c     **** 		setX_int(1);
3641:src/xeq.c     **** 		return;
3642:src/xeq.c     **** 	}
3643:src/xeq.c     **** 
3644:src/xeq.c     **** 	getY(&z);			// Stack has been lifted already
3645:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
3646:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
3647:src/xeq.c     **** 	if (State2.runmode) {
3648:src/xeq.c     **** 		dn_divide(&t, &n, &d);
3649:src/xeq.c     **** 		dn_compare(&n, &t, &z);
3650:src/xeq.c     **** 		if (dn_eq0(&n))
3651:src/xeq.c     **** 			DispMsg = "y/x =";
3652:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
3653:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
3654:src/xeq.c     **** 			DispMsg = "y/x \007\344<";
3655:src/xeq.c     **** 		else
3656:src/xeq.c     **** 			DispMsg = "y/x \007\344>";
3657:src/xeq.c     **** #else
3658:src/xeq.c     **** 			DispMsg = "y/x <";
3659:src/xeq.c     **** 		else
3660:src/xeq.c     **** 			DispMsg = "y/x >";
3661:src/xeq.c     **** #endif
3662:src/xeq.c     **** 	}
3663:src/xeq.c     **** }
3664:src/xeq.c     **** 
3665:src/xeq.c     **** void op_fracdenom(enum nilop op) {
3666:src/xeq.c     **** 	int s;
3667:src/xeq.c     **** 	unsigned long long int i;
3668:src/xeq.c     **** 
3669:src/xeq.c     **** 	i = getX_int_sgn(&s);
3670:src/xeq.c     **** 	if (i > 9999)
3671:src/xeq.c     **** 		UState.denom_max = 0;
3672:src/xeq.c     **** 	else if (i != 1)
3673:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
3674:src/xeq.c     **** 	else {
3675:src/xeq.c     **** 		setlastX();
3676:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
3677:src/xeq.c     **** 	}
3678:src/xeq.c     **** }
3679:src/xeq.c     **** 
3680:src/xeq.c     **** 
3681:src/xeq.c     **** /*  Switching from an integer mode to real mode
3682:src/xeq.c     ****  *  We convert the stack and LastX 
3683:src/xeq.c     ****  */
3684:src/xeq.c     **** static const unsigned short int StackRegMask[] = { 0x10f, 0x1ff };
3685:src/xeq.c     **** 
3686:src/xeq.c     **** void op_float(enum nilop op) {
3687:src/xeq.c     **** 
3688:src/xeq.c     **** 	if (is_intmode()) {
3689:src/xeq.c     **** 		int i;
3690:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
3691:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
3692:src/xeq.c     **** 			if (mask & 1) {
3693:src/xeq.c     **** 				// register belongs to stack
3694:src/xeq.c     **** 				register_from_int(i, i, op == OP_FLOAT_XIN);
3695:src/xeq.c     **** 			}
3696:src/xeq.c     **** 			else if (is_dblmode()) {
ARM GAS  /tmp/ccaPnj5t.s 			page 79


3697:src/xeq.c     **** 				// expand the other registers which have been left
3698:src/xeq.c     **** 				// in decimal64 format by the integer mode switch
3699:src/xeq.c     **** 				packed128_from_packed(&(get_reg_n(i)->d), Regs + i);
3700:src/xeq.c     **** 			}
3701:src/xeq.c     **** 		}
3702:src/xeq.c     **** 	}
3703:src/xeq.c     **** 	if (op != OP_FLOAT_XIN && op != OP_FLOAT_RCLM) {
3704:src/xeq.c     **** 		UState.fract = 0;
3705:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
3706:src/xeq.c     **** 	}
3707:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3708:src/xeq.c     **** }
3709:src/xeq.c     **** 
3710:src/xeq.c     **** /*  Switch to integer mode.
3711:src/xeq.c     ****  *  We convert the stack and LastX
3712:src/xeq.c     ****  */
3713:src/xeq.c     **** static void switch_to_int(void) {
3714:src/xeq.c     **** 	int i;
3715:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
3716:src/xeq.c     **** 	const int dbl = is_dblmode();
3717:src/xeq.c     **** 
3718:src/xeq.c     **** 	for (i = regK_idx; i >= regX_idx; --i, mask <<= 1) {
3719:src/xeq.c     **** 		if (mask & 0x800) {
3720:src/xeq.c     **** 			// register belongs to stack
3721:src/xeq.c     **** 			int_from_register(i, i);
3722:src/xeq.c     **** 		}
3723:src/xeq.c     **** 		else if (dbl) {
3724:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
3725:src/xeq.c     **** 			packed_from_packed128(Regs + i, &(get_reg_n(i)->d));
3726:src/xeq.c     **** 		}
3727:src/xeq.c     **** 	}
3728:src/xeq.c     **** }
3729:src/xeq.c     **** 
3730:src/xeq.c     **** static void set_base(unsigned int b) {
3731:src/xeq.c     **** 	UState.int_base = b - 1;
3732:src/xeq.c     **** 	if (!is_intmode())
3733:src/xeq.c     **** 		switch_to_int();
3734:src/xeq.c     **** }
3735:src/xeq.c     **** 
3736:src/xeq.c     **** void set_int_base(unsigned int arg, enum rarg op) {
3737:src/xeq.c     **** 	if (arg < 2) {
3738:src/xeq.c     **** 		if (arg == 0)
3739:src/xeq.c     **** 			op_float(OP_FLOAT);
3740:src/xeq.c     **** 		else
3741:src/xeq.c     **** 			op_fract(OP_FRACT);
3742:src/xeq.c     **** 	} else
3743:src/xeq.c     **** 		set_base(arg);
3744:src/xeq.c     **** }
3745:src/xeq.c     **** 
3746:src/xeq.c     **** 
3747:src/xeq.c     **** void op_fract(enum nilop op) {
3748:src/xeq.c     **** 	op_float(OP_FLOAT);
3749:src/xeq.c     **** 	UState.fract = 1;
3750:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
3751:src/xeq.c     **** 		UState.improperfrac = 1;
3752:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
3753:src/xeq.c     **** 		UState.improperfrac = 0;
ARM GAS  /tmp/ccaPnj5t.s 			page 80


3754:src/xeq.c     **** }
3755:src/xeq.c     **** 
3756:src/xeq.c     **** #ifdef INCLUDE_USER_MODE
3757:src/xeq.c     **** /* Save and restore user state.
3758:src/xeq.c     ****  */
3759:src/xeq.c     **** void cmdsavem(unsigned int arg, enum rarg op) {
3760:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
3761:src/xeq.c     **** }
3762:src/xeq.c     **** 
3763:src/xeq.c     **** void cmdrestm(unsigned int arg, enum rarg op) {
3764:src/xeq.c     **** 	const int dbl = is_dblmode();
3765:src/xeq.c     **** 	const int intm = is_intmode();
3766:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
3767:src/xeq.c     **** 
3768:src/xeq.c     **** 	// Fix things
3769:src/xeq.c     **** 	if ( UState.contrast == 0 )
3770:src/xeq.c     **** 		UState.contrast = 6;
3771:src/xeq.c     **** 
3772:src/xeq.c     **** 	if (intm != is_intmode()) {
3773:src/xeq.c     **** 		// Switch back to decimal or integer mode
3774:src/xeq.c     **** 		UState.intm = intm;
3775:src/xeq.c     **** 		if (intm)
3776:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
3777:src/xeq.c     **** 		else
3778:src/xeq.c     **** 			switch_to_int();
3779:src/xeq.c     **** 	}
3780:src/xeq.c     **** 	if (! is_intmode() && dbl != is_dblmode()) {
3781:src/xeq.c     **** 		// Switch back to double/single precision
3782:src/xeq.c     **** 		UState.mode_double = dbl;
3783:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
3784:src/xeq.c     **** 	}
3785:src/xeq.c     **** }
3786:src/xeq.c     **** #endif
3787:src/xeq.c     **** 
3788:src/xeq.c     **** /* Process a single digit.
3789:src/xeq.c     ****  */
3790:src/xeq.c     **** #if 0 // unused
3791:src/xeq.c     **** static int is_digit(const char c) {
3792:src/xeq.c     **** 	if (c >= '0' && c <= '9')
3793:src/xeq.c     **** 		return 1;
3794:src/xeq.c     **** 	return 0;
3795:src/xeq.c     **** }
3796:src/xeq.c     **** 
3797:src/xeq.c     **** static int is_xdigit(const char c) {
3798:src/xeq.c     **** 	if (is_digit(c) || (c >= 'A' && c <= 'F'))
3799:src/xeq.c     **** 		return 1;
3800:src/xeq.c     **** 	return 0;
3801:src/xeq.c     **** }
3802:src/xeq.c     **** #endif
3803:src/xeq.c     **** 
3804:src/xeq.c     **** static void digit(unsigned int c) {
3805:src/xeq.c     **** 	const int intm = is_intmode();
3806:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
3807:src/xeq.c     **** 
3808:src/xeq.c     **** 	if (Cmdline[0] == '-')
3809:src/xeq.c     **** 		lim++;
3810:src/xeq.c     **** 	if (intm) {
ARM GAS  /tmp/ccaPnj5t.s 			page 81


3811:src/xeq.c     **** 		if (c >= int_base()) {
3812:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3813:src/xeq.c     **** 			return;
3814:src/xeq.c     **** 		}
3815:src/xeq.c     **** 	} else {
3816:src/xeq.c     **** 		if (c >= 10) {
3817:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3818:src/xeq.c     **** 			return;
3819:src/xeq.c     **** 		}
3820:src/xeq.c     **** 
3821:src/xeq.c     **** 		if (CmdLineEex) {
3822:src/xeq.c     **** 			lim = CMDLINELEN;
3823:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3824:src/xeq.c     **** 			if (CmdLineLength >= lim) {
3825:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
3826:src/xeq.c     **** 
3827:src/xeq.c     **** 				if (*p == '-')
3828:src/xeq.c     **** 					p++;
3829:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
3830:src/xeq.c     **** 					p[0] = p[1];
3831:src/xeq.c     **** 					p++;
3832:src/xeq.c     **** 				}
3833:src/xeq.c     **** 				CmdLineLength--;
3834:src/xeq.c     **** 			}
3835:src/xeq.c     **** #endif
3836:src/xeq.c     **** 		}
3837:src/xeq.c     **** 		else {
3838:src/xeq.c     **** 			lim += CmdLineDot;
3839:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
3840:src/xeq.c     **** 			if (CmdLineDot >= 2) {
3841:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
3842:src/xeq.c     **** 				// Make space for the minus sign
3843:src/xeq.c     **** 				lim = CMDLINELEN - (Cmdline[0] != '-');
3844:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3845:src/xeq.c     **** 				lim += 1 + (find_char(Cmdline, '.')[1] == '.');
3846:src/xeq.c     **** #  else
3847:src/xeq.c     **** 				lim++;
3848:src/xeq.c     **** #  endif
3849:src/xeq.c     **** 			}
3850:src/xeq.c     **** #endif
3851:src/xeq.c     **** 		}
3852:src/xeq.c     **** 	}
3853:src/xeq.c     **** 	if (CmdLineLength >= lim
3854:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
3855:src/xeq.c     **** 		report_warn(ERR_TOO_LONG);
3856:src/xeq.c     **** 		return;
3857:src/xeq.c     **** 	}
3858:src/xeq.c     **** 
3859:src/xeq.c     **** 	if (c >= 10)
3860:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
3861:src/xeq.c     **** 	else {
3862:src/xeq.c     **** 		// Leading zeros in the exponent aren't visible to the user,
3863:src/xeq.c     **** 		// and they're removed automatically if digits are shifted,
3864:src/xeq.c     **** 		// so it's more consistent if they can't be entered, either.
3865:src/xeq.c     **** 		if (c == 0 && CmdLineEex) {
3866:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
3867:src/xeq.c     **** 				return;
ARM GAS  /tmp/ccaPnj5t.s 			page 82


3868:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3869:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'D')
3870:src/xeq.c     **** 				return;
3871:src/xeq.c     **** #else
3872:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == '-')
3873:src/xeq.c     **** 				return;
3874:src/xeq.c     **** #endif
3875:src/xeq.c     **** 		}
3876:src/xeq.c     **** 
3877:src/xeq.c     **** 		append_cmdline(c + '0');
3878:src/xeq.c     **** 
3879:src/xeq.c     **** 		if (CmdLineEex)
3880:src/xeq.c     **** 			exponent_adjusted(1);
3881:src/xeq.c     **** 	}
3882:src/xeq.c     **** }
3883:src/xeq.c     **** 
3884:src/xeq.c     **** 
3885:src/xeq.c     **** void set_entry() {
3886:src/xeq.c     **** 	if (!Running && !XromRunning)
3887:src/xeq.c     **** 		State.entryp = 1;
3888:src/xeq.c     **** }
3889:src/xeq.c     **** 
3890:src/xeq.c     **** 
3891:src/xeq.c     **** /* Decode and process the specials.  These are niladic functions and
3892:src/xeq.c     ****  * commands with non-standard stack operation.
3893:src/xeq.c     ****  */
3894:src/xeq.c     **** static void specials(const opcode op) {
3895:src/xeq.c     **** 	int opm = argKIND(op);
3896:src/xeq.c     **** 
3897:src/xeq.c     **** 	switch (opm) {
3898:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
3899:src/xeq.c     **** 	case OP_3:	case OP_4:	case OP_5:
3900:src/xeq.c     **** 	case OP_6:	case OP_7:	case OP_8:
3901:src/xeq.c     **** 	case OP_9:	case OP_A:	case OP_B:
3902:src/xeq.c     **** 	case OP_C:	case OP_D:	case OP_E:
3903:src/xeq.c     **** 	case OP_F:
3904:src/xeq.c     **** 		digit(opm - OP_0);
3905:src/xeq.c     **** 		break;
3906:src/xeq.c     **** 
3907:src/xeq.c     **** 	case OP_DOT:
3908:src/xeq.c     **** 		if (is_intmode())
3909:src/xeq.c     **** 			break;
3910:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3911:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 13 + CmdLineDot) {
3912:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
3913:src/xeq.c     **** #else
3914:src/xeq.c     **** #  if defined(PRETTY_FRACTION_ENTRY)
3915:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + 2*CmdLineDot) {
3916:src/xeq.c     **** #  else
3917:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + CmdLineDot) {
3918:src/xeq.c     **** #  endif
3919:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '.'
3920:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
3921:src/xeq.c     **** #endif
3922:src/xeq.c     **** 				digit(0);
3923:src/xeq.c     **** 			CmdLineDot++;
3924:src/xeq.c     **** 			append_cmdline('.');
ARM GAS  /tmp/ccaPnj5t.s 			page 83


3925:src/xeq.c     **** 		}
3926:src/xeq.c     **** 		break;
3927:src/xeq.c     **** 
3928:src/xeq.c     **** 	case OP_EEX:
3929:src/xeq.c     **** 		if (is_intmode())
3930:src/xeq.c     **** 			break;
3931:src/xeq.c     **** 		else {
3932:src/xeq.c     **** #if INCLUDE_EEX_PI == 2
3933:src/xeq.c     **** 			const int eex_pi = 1;
3934:src/xeq.c     **** #elif INCLUDE_EEX_PI == 1
3935:src/xeq.c     **** 			const int eex_pi = get_user_flag(regL_idx);
3936:src/xeq.c     **** #else
3937:src/xeq.c     **** 			const int eex_pi = 0;
3938:src/xeq.c     **** #endif
3939:src/xeq.c     **** 
3940:src/xeq.c     **** 			if (CmdLineDot == 2) {
3941:src/xeq.c     **** 				if (eex_pi) {
3942:src/xeq.c     **** 					// fraction entered (two dots); execute ENTER and enter pi
3943:src/xeq.c     **** 					if (is_bad_cmdline()) {
3944:src/xeq.c     **** 						if (Running || XromRunning)
3945:src/xeq.c     **** 							report_err(ERR_DOMAIN);
3946:src/xeq.c     **** 						break;
3947:src/xeq.c     **** 					}
3948:src/xeq.c     **** 					process_cmdline();
3949:src/xeq.c     **** 					lift();
3950:src/xeq.c     **** 					copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3951:src/xeq.c     **** 					set_lift();
3952:src/xeq.c     **** 				}
3953:src/xeq.c     **** 				break;
3954:src/xeq.c     **** 			}
3955:src/xeq.c     **** 			if (CmdLineEex || CmdLineLength >= CMDLINELEN)
3956:src/xeq.c     **** 				break;
3957:src/xeq.c     **** 			if (eex_pi && CmdLineLength == 0) {
3958:src/xeq.c     **** 				// empty command line: enter pi
3959:src/xeq.c     **** 				lift_if_enabled();
3960:src/xeq.c     **** 				copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3961:src/xeq.c     **** 				set_lift();
3962:src/xeq.c     **** 				break;
3963:src/xeq.c     **** 			}
3964:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 1)
3965:src/xeq.c     **** 			if (UState.fract)
3966:src/xeq.c     **** 				break;
3967:src/xeq.c     **** #endif
3968:src/xeq.c     **** 			if (CmdLineLength == 0)
3969:src/xeq.c     **** 				digit(1);
3970:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
3971:src/xeq.c     **** 			append_cmdline('E');
3972:src/xeq.c     **** 		}
3973:src/xeq.c     **** 		break;
3974:src/xeq.c     **** 
3975:src/xeq.c     **** 	case OP_CHS:
3976:src/xeq.c     **** 		if (CmdLineLength)
3977:src/xeq.c     **** 			cmdlinechs();
3978:src/xeq.c     **** 		else if (is_intmode()) {
3979:src/xeq.c     **** 			setX_int(intChs(getX_int()));
3980:src/xeq.c     **** 			set_lift();
3981:src/xeq.c     **** 		} else {
ARM GAS  /tmp/ccaPnj5t.s 			page 84


3982:src/xeq.c     **** 			decNumber x, r;
3983:src/xeq.c     **** 
3984:src/xeq.c     **** 			getX(&x);
3985:src/xeq.c     **** 			dn_minus(&r, &x);
3986:src/xeq.c     **** 			setX(&r);
3987:src/xeq.c     **** 			set_lift();
3988:src/xeq.c     **** 		}
3989:src/xeq.c     **** 		break;
3990:src/xeq.c     **** 
3991:src/xeq.c     **** 	case OP_CLX:
3992:src/xeq.c     **** 		if (Running)
3993:src/xeq.c     **** 			illegal(op);
3994:src/xeq.c     **** 		else if (CmdLineLength) {
3995:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3996:src/xeq.c     **** 			if (CmdLineEex != 0 && Cmdline[CmdLineLength-1] == 'D') {
3997:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
3998:src/xeq.c     **** 				break;
3999:src/xeq.c     **** 			}
4000:src/xeq.c     **** #endif
4001:src/xeq.c     **** 			CmdLineLength--;
4002:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
4003:src/xeq.c     **** 				CmdLineEex = 0;
4004:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
4005:src/xeq.c     **** 				CmdLineDot--;
4006:src/xeq.c     **** 		} else
4007:src/xeq.c     **** 			clrx(OP_rCLX);
4008:src/xeq.c     **** 		break;
4009:src/xeq.c     **** 
4010:src/xeq.c     **** 	case OP_ENTER:
4011:src/xeq.c     **** #ifdef ENTRY_RPN
4012:src/xeq.c     **** 		if (CmdLineLength && !(XromRunning || Running) ) { 
4013:src/xeq.c     **** //exclude stack lift if there is something in the input line AND if NOT running code i.e. Xrom or p
4014:src/xeq.c     **** 			process_cmdline();     //JM
4015:src/xeq.c     **** 		} else {                       //JM
4016:src/xeq.c     **** 			process_cmdline();
4017:src/xeq.c     **** 			lift();
4018:src/xeq.c     **** 			if ( (XromRunning || Running) ) {//JMTEST Explicitly including standard functionality if code is
4019:src/xeq.c     **** 				clr_lift();
4020:src/xeq.c     **** 			}   
4021:src/xeq.c     **** 		}                              //JM
4022:src/xeq.c     **** #else
4023:src/xeq.c     **** 		process_cmdline();
4024:src/xeq.c     **** 		lift();
4025:src/xeq.c     **** 		clr_lift();
4026:src/xeq.c     **** #endif
4027:src/xeq.c     **** 		break;
4028:src/xeq.c     **** 
4029:src/xeq.c     **** 	case OP_SIGMAPLUS:
4030:src/xeq.c     **** 	case OP_SIGMAMINUS:
4031:src/xeq.c     **** 		if (is_intmode()) {
4032:src/xeq.c     **** 			bad_mode_error();
4033:src/xeq.c     **** 			break;
4034:src/xeq.c     **** 		}
4035:src/xeq.c     **** 		process_cmdline();
4036:src/xeq.c     **** 		clr_lift();
4037:src/xeq.c     **** 		setlastX();
4038:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
ARM GAS  /tmp/ccaPnj5t.s 			page 85


4039:src/xeq.c     **** 			sigma_plus();
4040:src/xeq.c     **** 		else
4041:src/xeq.c     **** 			sigma_minus();
4042:src/xeq.c     **** 		sigma_val(OP_sigmaN);
4043:src/xeq.c     **** 		break;
4044:src/xeq.c     **** 
4045:src/xeq.c     **** 	// Conditional tests vs registers....
4046:src/xeq.c     **** 	case OP_Xeq0:	case OP_Xlt0:	case OP_Xgt0:
4047:src/xeq.c     **** 	case OP_Xne0:	case OP_Xle0:	case OP_Xge0:
4048:src/xeq.c     **** 	case OP_Xapx0:
4049:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ZERO, (enum tst_op)(opm - OP_Xeq0));
4050:src/xeq.c     **** 		break;
4051:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
4052:src/xeq.c     **** 		do_ztst(&const_0, &const_0, (enum tst_op)(opm - OP_Zeq0));
4053:src/xeq.c     **** 		break;
4054:src/xeq.c     **** 
4055:src/xeq.c     **** 	case OP_Xeq1:	case OP_Xlt1:	case OP_Xgt1:
4056:src/xeq.c     **** 	case OP_Xne1:	case OP_Xle1:	case OP_Xge1:
4057:src/xeq.c     **** 	case OP_Xapx1:
4058:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ONE, (enum tst_op)(opm - OP_Xeq1));
4059:src/xeq.c     **** 		break;
4060:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
4061:src/xeq.c     **** 		do_ztst(&const_1, &const_0, (enum tst_op)(opm - OP_Zeq1));
4062:src/xeq.c     **** 		break;
4063:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
4064:src/xeq.c     **** 		do_ztst(&const_0, &const_1, (enum tst_op)(opm - OP_Zeqi));
4065:src/xeq.c     **** 		break;
4066:src/xeq.c     **** 
4067:src/xeq.c     **** 	default:
4068:src/xeq.c     **** 		illegal(op);
4069:src/xeq.c     **** 	}
4070:src/xeq.c     **** }
4071:src/xeq.c     **** 
4072:src/xeq.c     **** enum trig_modes get_trig_mode(void) {
4073:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
4074:src/xeq.c     **** 		return TRIG_RAD;
4075:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
4076:src/xeq.c     **** 	return (enum trig_modes) UState.trigmode;
4077:src/xeq.c     **** }
4078:src/xeq.c     **** 
4079:src/xeq.c     **** void op_double(enum nilop op) {
4080:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
4081:src/xeq.c     **** 	const int intm = is_intmode();
4082:src/xeq.c     **** 	int i;
4083:src/xeq.c     **** 
4084:src/xeq.c     **** 	if (dbl != UState.mode_double) {
4085:src/xeq.c     **** 		// Mode switch
4086:src/xeq.c     **** 		if (dbl) {
4087:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
4088:src/xeq.c     **** 				// Need space for double precision stack
4089:src/xeq.c     **** 				cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
4090:src/xeq.c     **** 				if (Error) {
4091:src/xeq.c     **** 					return;
4092:src/xeq.c     **** 				}
4093:src/xeq.c     **** 			}
4094:src/xeq.c     **** 
4095:src/xeq.c     **** 			UState.mode_double = 1;
ARM GAS  /tmp/ccaPnj5t.s 			page 86


4096:src/xeq.c     **** 			if (! intm) {
4097:src/xeq.c     **** 				// Convert X to K to double precision
4098:src/xeq.c     **** 				// Avoid this in integer mode
4099:src/xeq.c     **** 				for (i = 0; i < STACK_SIZE + EXTRA_REG; ++i)
4100:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
4101:src/xeq.c     **** 			}
4102:src/xeq.c     **** 		}
4103:src/xeq.c     **** 		else {
4104:src/xeq.c     **** 			if (! intm) {
4105:src/xeq.c     **** 				// Convert X to K to single precision
4106:src/xeq.c     **** 				// Avoid this in integer mode
4107:src/xeq.c     **** 				for (i = STACK_SIZE + EXTRA_REG - 1; i >= 0; --i)
4108:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
4109:src/xeq.c     **** 			}
4110:src/xeq.c     **** 			UState.mode_double = 0;
4111:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
4112:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
4113:src/xeq.c     **** 		}
4114:src/xeq.c     **** 	}
4115:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
4116:src/xeq.c     **** 	if (intm) {
4117:src/xeq.c     **** 		// Do the necessary conversions from integer mode
4118:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
4119:src/xeq.c     **** 	}
4120:src/xeq.c     **** }
4121:src/xeq.c     **** 
4122:src/xeq.c     **** void cmdpause(unsigned int arg, enum rarg op) {
4123:src/xeq.c     **** 	display();
4124:src/xeq.c     **** #ifndef CONSOLE
4125:src/xeq.c     **** 	// decremented in the low level heartbeat
4126:src/xeq.c     **** 	Pause = arg;
4127:src/xeq.c     **** 	GoFast = (arg == 0);
4128:src/xeq.c     **** #elif 0
4129:src/xeq.c     **** 	start_pause(arg);
4130:src/xeq.c     **** #else	
4131:src/xeq.c     **** #if defined(WIN32) && !defined(__GNUC__)
4132:src/xeq.c     **** #pragma warning(disable:4996)
4133:src/xeq.c     **** 	sleep(arg/10);
4134:src/xeq.c     **** #else
4135:src/xeq.c     **** 	usleep(arg * 100000);
4136:src/xeq.c     **** #endif
4137:src/xeq.c     **** #endif
4138:src/xeq.c     **** }
4139:src/xeq.c     **** 
4140:src/xeq.c     **** 
4141:src/xeq.c     **** 
4142:src/xeq.c     **** void op_setspeed(enum nilop op) {
4143:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
4144:src/xeq.c     **** 	update_speed(1);
4145:src/xeq.c     **** }
4146:src/xeq.c     **** 
4147:src/xeq.c     **** 
4148:src/xeq.c     **** void op_prompt(enum nilop op) {
4149:src/xeq.c     **** 	set_running_off();
4150:src/xeq.c     **** 	alpha_view_common(regX_idx);
4151:src/xeq.c     **** }
4152:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 87


4153:src/xeq.c     **** /* Test if a number is an integer or fractional */
4154:src/xeq.c     **** /* Special numbers are neither */
4155:src/xeq.c     **** void XisInt(enum nilop op) {
4156:src/xeq.c     **** 	decNumber x;
4157:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
4158:src/xeq.c     **** 	if ( is_intmode() )
4159:src/xeq.c     **** 		result = op_int;
4160:src/xeq.c     **** 	else if (decNumberIsSpecial(getX(&x)))
4161:src/xeq.c     **** 		result = 0;
4162:src/xeq.c     **** 	else
4163:src/xeq.c     **** 	        result = (is_int(&x) == op_int);
4164:src/xeq.c     **** 	fin_tst(result);
4165:src/xeq.c     **** }
4166:src/xeq.c     **** 
4167:src/xeq.c     **** /* Test if a number is an even or odd integer */
4168:src/xeq.c     **** /* fractional or special values are neither even nor odd */
4169:src/xeq.c     **** void XisEvenOrOdd(enum nilop op) {
4170:src/xeq.c     **** 	decNumber x;
4171:src/xeq.c     **** 	int odd = (op == OP_XisODD);
4172:src/xeq.c     **** 
4173:src/xeq.c     **** 	if (is_intmode()) {
4174:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
4175:src/xeq.c     **** 	} else {
4176:src/xeq.c     **** 		fin_tst(is_even(getX(&x)) == !odd);
4177:src/xeq.c     **** 	}
4178:src/xeq.c     **** }
4179:src/xeq.c     **** 
4180:src/xeq.c     **** 
4181:src/xeq.c     **** /* Test if a number is prime */
4182:src/xeq.c     **** void XisPrime(enum nilop op) {
4183:src/xeq.c     **** 	unsigned long long int i;
4184:src/xeq.c     **** 	int sgn;
4185:src/xeq.c     **** 
4186:src/xeq.c     **** 	i = getX_int_sgn(&sgn);
4187:src/xeq.c     **** 	if (!is_intmode()) {
4188:src/xeq.c     **** 		decNumber x;
4189:src/xeq.c     **** 
4190:src/xeq.c     **** 		getX(&x);
4191:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
4192:src/xeq.c     **** 			sgn = 1; // not prime
4193:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
4194:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
4195:src/xeq.c     **** 			i = 0xFFFFFFFFFFFFFFFFull;
4196:src/xeq.c     **** 	}
4197:src/xeq.c     **** 	fin_tst(sgn == 0 && isPrime(i));
4198:src/xeq.c     **** }
4199:src/xeq.c     **** 
4200:src/xeq.c     **** /* Test is a number is infinite.
4201:src/xeq.c     ****  */
4202:src/xeq.c     **** void isInfinite(enum nilop op) {
4203:src/xeq.c     **** 	decNumber x;
4204:src/xeq.c     **** 
4205:src/xeq.c     **** 	getX(&x);
4206:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
4207:src/xeq.c     **** }
4208:src/xeq.c     **** 
4209:src/xeq.c     **** /* Test for NaN.
ARM GAS  /tmp/ccaPnj5t.s 			page 88


4210:src/xeq.c     ****  * this could be done by testing x != x, but having a special command
4211:src/xeq.c     ****  * for it reads easier.
4212:src/xeq.c     ****  */
4213:src/xeq.c     **** void isNan(enum nilop op) {
4214:src/xeq.c     **** 	decNumber x;
4215:src/xeq.c     **** 
4216:src/xeq.c     **** 	getX(&x);
4217:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
4218:src/xeq.c     **** }
4219:src/xeq.c     **** 
4220:src/xeq.c     **** void isSpecial(enum nilop op) {
4221:src/xeq.c     **** 	decNumber x;
4222:src/xeq.c     **** 
4223:src/xeq.c     **** 	getX(&x);
4224:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
4225:src/xeq.c     **** }
4226:src/xeq.c     **** 
4227:src/xeq.c     **** void op_entryp(enum nilop op) {
4228:src/xeq.c     **** 	fin_tst(State.entryp);
4229:src/xeq.c     **** }
4230:src/xeq.c     **** 
4231:src/xeq.c     **** /* Bulk register operations */
4232:src/xeq.c     **** int reg_decode(int *s, int *n, int *d, int flash) {
4233:src/xeq.c     **** 	decNumber x, y;
4234:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
4235:src/xeq.c     **** 
4236:src/xeq.c     **** 	if (is_intmode()) {
4237:src/xeq.c     **** 		bad_mode_error();
4238:src/xeq.c     **** 		return 1;
4239:src/xeq.c     **** 	}
4240:src/xeq.c     **** 	getX(&x);			// sss.nnddd~
4241:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
4242:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
4243:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
4244:src/xeq.c     **** 
4245:src/xeq.c     **** 	if (rsrc < 0) {
4246:src/xeq.c     **** 		if (!flash)
4247:src/xeq.c     **** 			goto range_error;
4248:src/xeq.c     **** 		rsrc = -rsrc;
4249:src/xeq.c     **** 	}
4250:src/xeq.c     **** 	else
4251:src/xeq.c     **** 		flash = 0;
4252:src/xeq.c     **** 
4253:src/xeq.c     **** 	rdest = rsrc % 1000;		// ddd
4254:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
4255:src/xeq.c     **** 	num = rsrc % 100;		// nn
4256:src/xeq.c     **** 	rsrc /= 100;			// sss
4257:src/xeq.c     **** 
4258:src/xeq.c     **** 	mx_src = flash ? BackupFlash._numregs
4259:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
4260:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
4261:src/xeq.c     **** 	       : global_regs();
4262:src/xeq.c     **** 	if (rsrc >= mx_src)
4263:src/xeq.c     **** 		goto range_error;
4264:src/xeq.c     **** 
4265:src/xeq.c     **** 	if (d != NULL) {
4266:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
ARM GAS  /tmp/ccaPnj5t.s 			page 89


4267:src/xeq.c     **** 
4268:src/xeq.c     **** 		if (num == 0) {
4269:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
4270:src/xeq.c     **** 			if (flash || (rsrc >= LOCAL_REG_BASE) != (rdest >= LOCAL_REG_BASE))
4271:src/xeq.c     **** 				// source & destination in different memory areas
4272:src/xeq.c     **** 				num = mx_dest < mx_src ? mx_dest : mx_src;
4273:src/xeq.c     **** 			else {
4274:src/xeq.c     **** 				if (rsrc > rdest) {
4275:src/xeq.c     **** 					num = mx_src - rsrc;
4276:src/xeq.c     **** 					q = rsrc - rdest;
4277:src/xeq.c     **** 				}
4278:src/xeq.c     **** 				else {
4279:src/xeq.c     **** 					num = mx_dest - rdest;
4280:src/xeq.c     **** 					q = rdest - rsrc;
4281:src/xeq.c     **** 				}
4282:src/xeq.c     **** 				if (num > q)
4283:src/xeq.c     **** 					num = q;
4284:src/xeq.c     **** 			}
4285:src/xeq.c     **** 		}
4286:src/xeq.c     **** 		if (rdest >= LOCAL_REG_BASE)
4287:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
4288:src/xeq.c     **** 		if (rdest + num > mx_dest)
4289:src/xeq.c     **** 			goto range_error;
4290:src/xeq.c     **** 		// Set pointer
4291:src/xeq.c     **** 		*d = rdest;
4292:src/xeq.c     **** 	}
4293:src/xeq.c     **** 	else {
4294:src/xeq.c     **** 		if (num == 0) {
4295:src/xeq.c     **** 			num = mx_src - rsrc;
4296:src/xeq.c     **** 		}
4297:src/xeq.c     **** 	}
4298:src/xeq.c     **** 	if (rsrc + num > mx_src)
4299:src/xeq.c     **** 		goto range_error;
4300:src/xeq.c     **** 
4301:src/xeq.c     **** 	// Now point to the correct source register
4302:src/xeq.c     **** 	*s = flash ? FLASH_REG_BASE + rsrc : rsrc;
4303:src/xeq.c     **** 	*n = num;
4304:src/xeq.c     **** 
4305:src/xeq.c     **** 	return 0;
4306:src/xeq.c     **** 
4307:src/xeq.c     **** range_error:
4308:src/xeq.c     **** 	report_err(ERR_RANGE);
4309:src/xeq.c     **** 	return 1;
4310:src/xeq.c     **** }
4311:src/xeq.c     **** 
4312:src/xeq.c     **** void op_regcopy(enum nilop op) {
4313:src/xeq.c     **** 	int s, n, d;
4314:src/xeq.c     **** 
4315:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 1))
4316:src/xeq.c     **** 		return;
4317:src/xeq.c     **** 	move_regs(get_reg_n(d), get_reg_n(s), n);
4318:src/xeq.c     **** }
4319:src/xeq.c     **** 
4320:src/xeq.c     **** void op_regswap(enum nilop op) {
4321:src/xeq.c     **** 	int s, n, d, i;
4322:src/xeq.c     **** 
4323:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 0) || s == d)
ARM GAS  /tmp/ccaPnj5t.s 			page 90


4324:src/xeq.c     **** 		return;
4325:src/xeq.c     **** 	else {
4326:src/xeq.c     **** 		if ((s > d && d + n > s) || (d > s && s + n > d))
4327:src/xeq.c     **** 			report_err(ERR_RANGE);
4328:src/xeq.c     **** 		else {
4329:src/xeq.c     **** 			for (i = 0; i < n; i++)
4330:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
4331:src/xeq.c     **** 		}
4332:src/xeq.c     **** 	}
4333:src/xeq.c     **** }
4334:src/xeq.c     **** 
4335:src/xeq.c     **** void op_regclr(enum nilop op) {
4336:src/xeq.c     **** 	int s, n;
4337:src/xeq.c     **** 
4338:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0))
4339:src/xeq.c     **** 		return;
4340:src/xeq.c     **** 	zero_regs(get_reg_n(s), n);
4341:src/xeq.c     **** }
4342:src/xeq.c     **** 
4343:src/xeq.c     **** void op_regsort(enum nilop op) {
4344:src/xeq.c     **** 	int s, n;
4345:src/xeq.c     **** 	decNumber pivot, a;
4346:src/xeq.c     **** 	int beg[10], end[10], i;
4347:src/xeq.c     **** 
4348:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0) || n == 1)
4349:src/xeq.c     **** 		return;
4350:src/xeq.c     **** 
4351:src/xeq.c     **** 	/* Non-recursive quicksort */
4352:src/xeq.c     **** 	beg[0] = 0;
4353:src/xeq.c     **** 	end[0] = n;
4354:src/xeq.c     **** 	i = 0;
4355:src/xeq.c     **** 	while (i>=0) {
4356:src/xeq.c     **** 		int L = beg[i];
4357:src/xeq.c     **** 		int R = end[i] - 1;
4358:src/xeq.c     **** 		if (L<R) {
4359:src/xeq.c     **** 			const int pvt = s + L;
4360:src/xeq.c     **** 			getRegister(&pivot, pvt);
4361:src/xeq.c     **** 			while (L<R) {
4362:src/xeq.c     **** 				while (L<R) {
4363:src/xeq.c     **** 					getRegister(&a, s + R);
4364:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
4365:src/xeq.c     **** 						break;
4366:src/xeq.c     **** 					R--;
4367:src/xeq.c     **** 				}
4368:src/xeq.c     **** 				if (L<R)
4369:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
4370:src/xeq.c     **** 				while (L<R) {
4371:src/xeq.c     **** 					getRegister(&a, s + L);
4372:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
4373:src/xeq.c     **** 						break;
4374:src/xeq.c     **** 					L++;
4375:src/xeq.c     **** 				}
4376:src/xeq.c     **** 				if (L<R)
4377:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
4378:src/xeq.c     **** 			}
4379:src/xeq.c     **** 			setRegister(s + L, &pivot);
4380:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
ARM GAS  /tmp/ccaPnj5t.s 			page 91


4381:src/xeq.c     **** 				beg[i+1] = beg[i];
4382:src/xeq.c     **** 				end[i+1] = L;
4383:src/xeq.c     **** 				beg[i] = L+1;
4384:src/xeq.c     **** 			} else {
4385:src/xeq.c     **** 				beg[i+1] = L+1;
4386:src/xeq.c     **** 				end[i+1] = end[i];
4387:src/xeq.c     **** 				end[i] = L;
4388:src/xeq.c     **** 			}
4389:src/xeq.c     **** 			i++;
4390:src/xeq.c     **** 		} else
4391:src/xeq.c     **** 			i--;
4392:src/xeq.c     **** 	}
4393:src/xeq.c     **** }
4394:src/xeq.c     **** 
4395:src/xeq.c     **** 
4396:src/xeq.c     **** 
4397:src/xeq.c     **** /* Print a single program step nicely.
4398:src/xeq.c     ****  */
4399:src/xeq.c     **** static void print_step(const opcode op) {
4400:src/xeq.c     **** 	char buf[16];
4401:src/xeq.c     **** 	const unsigned int pc = state_pc();
4402:src/xeq.c     **** 	char *p = TraceBuffer;
4403:src/xeq.c     **** 
4404:src/xeq.c     **** 	if (isXROM(pc)) {
4405:src/xeq.c     **** 		*p++ = 'x';
4406:src/xeq.c     **** 	} else if (isLIB(pc)) {
4407:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
4408:src/xeq.c     **** 		*p++ = ' ';
4409:src/xeq.c     **** 	}
4410:src/xeq.c     **** 	if (pc == 0)
4411:src/xeq.c     **** 		scopy(p, "000:");
4412:src/xeq.c     **** 	else {
4413:src/xeq.c     **** 		p = num_arg_0(p, user_pc(pc), 3);
4414:src/xeq.c     **** 		*p++ = ':';
4415:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
4416:src/xeq.c     **** 		if (*p == '?')
4417:src/xeq.c     **** 			*p = '\0';
4418:src/xeq.c     **** 	}
4419:src/xeq.c     **** 	State2.disp_small = 1;
4420:src/xeq.c     **** 	DispMsg = TraceBuffer;
4421:src/xeq.c     **** }
4422:src/xeq.c     **** 
4423:src/xeq.c     **** 
4424:src/xeq.c     **** /* When stuff gets done, there are some bits of state that need
4425:src/xeq.c     ****  * to be reset -- SHOW, ->base change the display mode until something
4426:src/xeq.c     ****  * happens.  This should be called on that something.
4427:src/xeq.c     ****  */
4428:src/xeq.c     **** void reset_volatile_state(void) {
4429:src/xeq.c     **** 	// extern int IntMaxWindow;
4430:src/xeq.c     **** 	// IntMaxWindow = 0;
4431:src/xeq.c     **** 	State2.window = 0;
4432:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
4433:src/xeq.c     **** }
4434:src/xeq.c     **** 
4435:src/xeq.c     **** 
4436:src/xeq.c     **** /*
4437:src/xeq.c     ****  *  Called by any long running function
ARM GAS  /tmp/ccaPnj5t.s 			page 92


4438:src/xeq.c     ****  */
4439:src/xeq.c     **** void busy(void)
4440:src/xeq.c     **** {
4441:src/xeq.c     **** 	/*
4442:src/xeq.c     **** 	 *  Serve the hardware watch dog
4443:src/xeq.c     **** 	 */
4444:src/xeq.c     **** 	watchdog();
4445:src/xeq.c     **** 
4446:src/xeq.c     **** 	/*
4447:src/xeq.c     **** 	 *  Increase the speed
4448:src/xeq.c     **** 	 */
4449:src/xeq.c     **** 	update_speed(1);
4450:src/xeq.c     **** 
4451:src/xeq.c     **** 	/*
4452:src/xeq.c     **** 	 *  Indicate busy state to the user
4453:src/xeq.c     **** 	 */
4454:src/xeq.c     **** 	if (!Busy && !Running) {
4455:src/xeq.c     **** 		Busy = 1;
4456:src/xeq.c     **** 		message("Wait...", NULL);
4457:src/xeq.c     **** 	}
4458:src/xeq.c     **** }
4459:src/xeq.c     **** 
4460:src/xeq.c     **** /***************************************************************************
4461:src/xeq.c     ****  * Function dispatchers.
4462:src/xeq.c     ****  */
4463:src/xeq.c     **** 
4464:src/xeq.c     **** /*
4465:src/xeq.c     ****  *  Check for a call into XROM space.
4466:src/xeq.c     ****  *  Fix the pointer alignment on the go.
4467:src/xeq.c     ****  */
4468:src/xeq.c     **** #ifdef REALBUILD
4469:src/xeq.c     **** typedef unsigned long uintptr_t;
4470:src/xeq.c     **** #else
4471:src/xeq.c     **** #include <stdint.h>
4472:src/xeq.c     **** #endif
4473:src/xeq.c     **** 
4474:src/xeq.c     **** static const s_opcode *check_for_xrom_address(void *fp)
4475:src/xeq.c     **** {
4476:src/xeq.c     **** 	const s_opcode *xp = (const s_opcode *) ((uintptr_t ) fp & ~1);
4477:src/xeq.c     **** 	if (xp < xrom)
4478:src/xeq.c     **** 		return NULL;
4479:src/xeq.c     **** #ifndef REALBUILD
4480:src/xeq.c     **** 	// On the device, XROM is at the end so this is not needed
4481:src/xeq.c     **** 	if (xp >= xrom + xrom_size)
4482:src/xeq.c     **** 		return NULL;
4483:src/xeq.c     **** #endif
4484:src/xeq.c     **** 	return xp;
4485:src/xeq.c     **** }
4486:src/xeq.c     **** 
4487:src/xeq.c     **** /*
4488:src/xeq.c     ****  *  Check for a call into XROM space and dispatch it.
4489:src/xeq.c     ****  */
4490:src/xeq.c     **** static int dispatch_xrom(void *fp)
4491:src/xeq.c     **** {
4492:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
4493:src/xeq.c     **** 	if (xp == NULL)
4494:src/xeq.c     **** 		return 0;
ARM GAS  /tmp/ccaPnj5t.s 			page 93


4495:src/xeq.c     **** 	// set_lift();
4496:src/xeq.c     **** 	UserLocalRegs = LocalRegs;
4497:src/xeq.c     **** 	XromRunning = 1;
4498:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
4499:src/xeq.c     **** 	xeq_xrom();
4500:src/xeq.c     **** 	return 1;
4501:src/xeq.c     **** }
4502:src/xeq.c     **** 
4503:src/xeq.c     **** /*
4504:src/xeq.c     ****  *  Return an integer result from a decimal value, setting flags properly
4505:src/xeq.c     ****  */
4506:src/xeq.c     **** static long long int intResult(decNumber *r) {
 644              		.loc 1 4506 46 is_stmt 1 view -0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 80
 647              		@ frame_needed = 0, uses_anonymous_args = 0
4507:src/xeq.c     **** 	unsigned long long int i;
 648              		.loc 1 4507 2 view .LVU190
4508:src/xeq.c     **** 	int s;
 649              		.loc 1 4508 2 view .LVU191
4509:src/xeq.c     **** 	decNumber ri, t;
 650              		.loc 1 4509 2 view .LVU192
4510:src/xeq.c     **** 
4511:src/xeq.c     **** 	decNumberRoundDigits(&t, r, 25, DEC_ROUND_HALF_EVEN);
 651              		.loc 1 4511 2 view .LVU193
4506:src/xeq.c     **** 	unsigned long long int i;
 652              		.loc 1 4506 46 is_stmt 0 view .LVU194
 653 0000 30B5     		push	{r4, r5, lr}
 654              		.cfi_def_cfa_offset 12
 655              		.cfi_offset 4, -12
 656              		.cfi_offset 5, -8
 657              		.cfi_offset 14, -4
 658 0002 95B0     		sub	sp, sp, #84
 659              		.cfi_def_cfa_offset 96
 660              		.loc 1 4511 2 view .LVU195
 661 0004 0323     		movs	r3, #3
 662 0006 1922     		movs	r2, #25
4506:src/xeq.c     **** 	unsigned long long int i;
 663              		.loc 1 4506 46 view .LVU196
 664 0008 0146     		mov	r1, r0
 665              		.loc 1 4511 2 view .LVU197
 666 000a 0BA8     		add	r0, sp, #44
 667              	.LVL49:
 668              		.loc 1 4511 2 view .LVU198
 669 000c FFF7FEFF 		bl	decNumberRoundDigits
 670              	.LVL50:
4512:src/xeq.c     **** 	decNumberTrunc(&ri, &t);
 671              		.loc 1 4512 2 is_stmt 1 view .LVU199
 672 0010 0BA9     		add	r1, sp, #44
 673 0012 02A8     		add	r0, sp, #8
 674 0014 FFF7FEFF 		bl	decNumberTrunc
 675              	.LVL51:
4513:src/xeq.c     **** 	set_carry(dn_eq(&ri, &t) ? 0 : 1);
 676              		.loc 1 4513 2 view .LVU200
 677              		.loc 1 4513 12 is_stmt 0 view .LVU201
 678 0018 0BA9     		add	r1, sp, #44
 679 001a 02A8     		add	r0, sp, #8
ARM GAS  /tmp/ccaPnj5t.s 			page 94


 680 001c FFF7FEFF 		bl	dn_eq
 681              	.LVL52:
 682              		.loc 1 4513 2 view .LVU202
 683 0020 B0FA80F0 		clz	r0, r0
 684 0024 4009     		lsrs	r0, r0, #5
 685 0026 FFF7FEFF 		bl	set_carry
 686              	.LVL53:
4514:src/xeq.c     **** 
4515:src/xeq.c     **** 	if (decNumberIsNaN(&t)) {
 687              		.loc 1 4515 2 is_stmt 1 view .LVU203
 688              		.loc 1 4515 6 is_stmt 0 view .LVU204
 689 002a 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 690              		.loc 1 4515 5 view .LVU205
 691 002e 13F0300F 		tst	r3, #48
 692 0032 22D1     		bne	.L67
4516:src/xeq.c     **** 		report_err(ERR_DOMAIN);
4517:src/xeq.c     **** 		return 0;
4518:src/xeq.c     **** 	}
4519:src/xeq.c     **** 	if (decNumberIsSpecial(&t)) {
 693              		.loc 1 4519 2 is_stmt 1 view .LVU206
 694              		.loc 1 4519 5 is_stmt 0 view .LVU207
 695 0034 13F0700F 		tst	r3, #112
 696 0038 18D1     		bne	.L68
4520:src/xeq.c     **** 		set_overflow(1);
4521:src/xeq.c     **** 		return 0;
4522:src/xeq.c     **** 	}
4523:src/xeq.c     **** 	i = dn_to_ull(&ri, &s);
 697              		.loc 1 4523 2 is_stmt 1 view .LVU208
 698              		.loc 1 4523 6 is_stmt 0 view .LVU209
 699 003a 02A8     		add	r0, sp, #8
 700 003c 01A9     		add	r1, sp, #4
 701 003e FFF7FEFF 		bl	dn_to_ull
 702              	.LVL54:
 703 0042 0C46     		mov	r4, r1
4524:src/xeq.c     **** 	dn_abs(&t, &t);
 704              		.loc 1 4524 2 view .LVU210
 705 0044 0BA9     		add	r1, sp, #44
4523:src/xeq.c     **** 	dn_abs(&t, &t);
 706              		.loc 1 4523 6 view .LVU211
 707 0046 0546     		mov	r5, r0
 708              	.LVL55:
 709              		.loc 1 4524 2 is_stmt 1 view .LVU212
 710 0048 0846     		mov	r0, r1
 711              	.LVL56:
 712              		.loc 1 4524 2 is_stmt 0 view .LVU213
 713 004a FFF7FEFF 		bl	dn_abs
 714              	.LVL57:
4525:src/xeq.c     **** 	set_overflow(check_overflow(i) || dn_ge(&t, &const_2pow64));
 715              		.loc 1 4525 2 is_stmt 1 view .LVU214
 716              		.loc 1 4525 15 is_stmt 0 view .LVU215
 717 004e 2846     		mov	r0, r5
 718 0050 2146     		mov	r1, r4
 719 0052 FFF7FEFF 		bl	check_overflow
 720              	.LVL58:
 721              		.loc 1 4525 2 view .LVU216
 722 0056 E8B1     		cbz	r0, .L69
 723 0058 0120     		movs	r0, #1
ARM GAS  /tmp/ccaPnj5t.s 			page 95


 724              	.L63:
 725              		.loc 1 4525 2 discriminator 6 view .LVU217
 726 005a FFF7FEFF 		bl	set_overflow
 727              	.LVL59:
4526:src/xeq.c     **** 	return build_value(i, s);
 728              		.loc 1 4526 2 is_stmt 1 discriminator 6 view .LVU218
 729              		.loc 1 4526 9 is_stmt 0 discriminator 6 view .LVU219
 730 005e 019A     		ldr	r2, [sp, #4]
 731 0060 2846     		mov	r0, r5
 732 0062 2146     		mov	r1, r4
 733 0064 FFF7FEFF 		bl	build_value
 734              	.LVL60:
4527:src/xeq.c     **** }
 735              		.loc 1 4527 1 discriminator 6 view .LVU220
 736 0068 15B0     		add	sp, sp, #84
 737              		.cfi_remember_state
 738              		.cfi_def_cfa_offset 12
 739              		@ sp needed
 740 006a 30BD     		pop	{r4, r5, pc}
 741              	.LVL61:
 742              	.L68:
 743              		.cfi_restore_state
4520:src/xeq.c     **** 		return 0;
 744              		.loc 1 4520 3 is_stmt 1 view .LVU221
 745 006c 0120     		movs	r0, #1
 746 006e FFF7FEFF 		bl	set_overflow
 747              	.LVL62:
4521:src/xeq.c     **** 	}
 748              		.loc 1 4521 3 view .LVU222
4521:src/xeq.c     **** 	}
 749              		.loc 1 4521 10 is_stmt 0 view .LVU223
 750 0072 0020     		movs	r0, #0
 751 0074 0146     		mov	r1, r0
 752              		.loc 1 4527 1 view .LVU224
 753 0076 15B0     		add	sp, sp, #84
 754              		.cfi_remember_state
 755              		.cfi_def_cfa_offset 12
 756              		@ sp needed
 757 0078 30BD     		pop	{r4, r5, pc}
 758              	.L67:
 759              		.cfi_restore_state
4516:src/xeq.c     **** 		return 0;
 760              		.loc 1 4516 3 is_stmt 1 view .LVU225
 761              	.LVL63:
 762              	.LBB1331:
 763              	.LBI1331:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 764              		.loc 1 540 5 view .LVU226
 765              	.LBB1332:
 541:src/xeq.c     **** 		Error = e;
 766              		.loc 1 541 2 view .LVU227
 541:src/xeq.c     **** 		Error = e;
 767              		.loc 1 541 12 is_stmt 0 view .LVU228
 768 007a 0A4B     		ldr	r3, .L70
 541:src/xeq.c     **** 		Error = e;
 769              		.loc 1 541 5 view .LVU229
 770 007c 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccaPnj5t.s 			page 96


 771 007e 2AB9     		cbnz	r2, .L64
 772              	.LVL64:
 773              	.LBB1333:
 774              	.LBI1333:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 775              		.loc 1 540 5 is_stmt 1 view .LVU230
 776              	.LBB1334:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 777              		.loc 1 542 3 view .LVU231
 778              	.LBE1334:
 779              	.LBE1333:
 780              	.LBE1332:
 781              	.LBE1331:
4517:src/xeq.c     **** 	}
 782              		.loc 1 4517 10 is_stmt 0 view .LVU232
 783 0080 0020     		movs	r0, #0
 784              	.LBB1341:
 785              	.LBB1339:
 786              	.LBB1337:
 787              	.LBB1335:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 788              		.loc 1 542 9 view .LVU233
 789 0082 0122     		movs	r2, #1
 790              	.LBE1335:
 791              	.LBE1337:
 792              	.LBE1339:
 793              	.LBE1341:
4517:src/xeq.c     **** 	}
 794              		.loc 1 4517 10 view .LVU234
 795 0084 0146     		mov	r1, r0
 796              	.LBB1342:
 797              	.LBB1340:
 798              	.LBB1338:
 799              	.LBB1336:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 800              		.loc 1 542 9 view .LVU235
 801 0086 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 802              		.loc 1 543 3 is_stmt 1 view .LVU236
 803              	.LBE1336:
 804              	.LBE1338:
 805              	.LBE1340:
 806              	.LBE1342:
 807              		.loc 1 4527 1 is_stmt 0 view .LVU237
 808 0088 15B0     		add	sp, sp, #84
 809              		.cfi_remember_state
 810              		.cfi_def_cfa_offset 12
 811              		@ sp needed
 812 008a 30BD     		pop	{r4, r5, pc}
 813              	.LVL65:
 814              	.L64:
 815              		.cfi_restore_state
4517:src/xeq.c     **** 	}
 816              		.loc 1 4517 10 view .LVU238
 817 008c 0020     		movs	r0, #0
 818 008e 0146     		mov	r1, r0
 819              	.LVL66:
ARM GAS  /tmp/ccaPnj5t.s 			page 97


 820              		.loc 1 4527 1 view .LVU239
 821 0090 15B0     		add	sp, sp, #84
 822              		.cfi_remember_state
 823              		.cfi_def_cfa_offset 12
 824              		@ sp needed
 825 0092 30BD     		pop	{r4, r5, pc}
 826              	.LVL67:
 827              	.L69:
 828              		.cfi_restore_state
4525:src/xeq.c     **** 	return build_value(i, s);
 829              		.loc 1 4525 36 discriminator 2 view .LVU240
 830 0094 0449     		ldr	r1, .L70+4
 831 0096 0BA8     		add	r0, sp, #44
 832 0098 FFF7FEFF 		bl	dn_lt
 833              	.LVL68:
4525:src/xeq.c     **** 	return build_value(i, s);
 834              		.loc 1 4525 2 discriminator 2 view .LVU241
 835 009c B0FA80F0 		clz	r0, r0
 836 00a0 4009     		lsrs	r0, r0, #5
 837 00a2 DAE7     		b	.L63
 838              	.L71:
 839              		.align	2
 840              	.L70:
 841 00a4 00000000 		.word	Error
 842 00a8 00000000 		.word	const_2pow64
 843              		.cfi_endproc
 844              	.LFE237:
 846              		.section	.text.check_stack_overlap,"ax",%progbits
 847              		.align	1
 848              		.p2align 2,,3
 849              		.syntax unified
 850              		.thumb
 851              		.thumb_func
 852              		.fpu fpv4-sp-d16
 854              	check_stack_overlap:
 855              	.LVL69:
 856              	.LFB146:
2119:src/xeq.c     **** 	const int n = stack_size();
 857              		.loc 1 2119 50 is_stmt 1 view -0
 858              		.cfi_startproc
 859              		@ args = 0, pretend = 0, frame = 0
 860              		@ frame_needed = 0, uses_anonymous_args = 0
 861              		@ link register save eliminated.
2120:src/xeq.c     **** 
 862              		.loc 1 2120 2 view .LVU243
 863              	.LBB1369:
 864              	.LBI1369:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 865              		.loc 1 706 5 view .LVU244
 866              	.LBB1370:
 707:src/xeq.c     **** 		return 4;
 867              		.loc 1 707 2 view .LVU245
 707:src/xeq.c     **** 		return 4;
 868              		.loc 1 707 8 is_stmt 0 view .LVU246
 869 0000 194B     		ldr	r3, .L83
 870 0002 1A68     		ldr	r2, [r3]
 707:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccaPnj5t.s 			page 98


 871              		.loc 1 707 6 view .LVU247
 872 0004 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 873              		.loc 1 707 5 view .LVU248
 874 0008 1B07     		lsls	r3, r3, #28
 875              	.LBE1370:
 876              	.LBE1369:
2119:src/xeq.c     **** 	const int n = stack_size();
 877              		.loc 1 2119 50 view .LVU249
 878 000a 30B4     		push	{r4, r5}
 879              		.cfi_def_cfa_offset 8
 880              		.cfi_offset 4, -8
 881              		.cfi_offset 5, -4
 882              	.LBB1375:
 883              	.LBB1373:
 707:src/xeq.c     **** 		return 4;
 884              		.loc 1 707 5 view .LVU250
 885 000c 25D5     		bpl	.L77
 886              	.LBB1371:
 887              	.LBI1371:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 888              		.loc 1 185 5 is_stmt 1 view .LVU251
 889              	.LBB1372:
 186:src/xeq.c     **** }
 890              		.loc 1 186 2 view .LVU252
 186:src/xeq.c     **** }
 891              		.loc 1 186 9 is_stmt 0 view .LVU253
 892 000e B2F8E037 		ldrh	r3, [r2, #2016]
 893              	.LBE1372:
 894              	.LBE1371:
 707:src/xeq.c     **** 		return 4;
 895              		.loc 1 707 27 view .LVU254
 896 0012 9B0B     		lsrs	r3, r3, #14
 897 0014 032B     		cmp	r3, #3
 898 0016 1BD0     		beq	.L82
 899              	.L79:
 900 0018 0823     		movs	r3, #8
 709:src/xeq.c     **** }
 901              		.loc 1 709 9 view .LVU255
 902 001a 1C46     		mov	r4, r3
 903              	.L73:
 904              	.LVL70:
 709:src/xeq.c     **** }
 905              		.loc 1 709 9 view .LVU256
 906              	.LBE1373:
 907              	.LBE1375:
2122:src/xeq.c     **** 		return n;
 908              		.loc 1 2122 2 is_stmt 1 view .LVU257
 909              	.LBB1376:
 910              	.LBB1377:
 911              	.LBB1378:
 912              	.LBB1379:
 913              	.LBB1380:
1101:src/xeq.c     **** }
 914              		.loc 1 1101 24 is_stmt 0 view .LVU258
 915 001c B2F8E857 		ldrh	r5, [r2, #2024]
 916              	.LBE1380:
ARM GAS  /tmp/ccaPnj5t.s 			page 99


 917              	.LBE1379:
 918              	.LBB1383:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 919              		.loc 1 243 24 view .LVU259
 920 0020 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 921              	.LBE1383:
 922              	.LBB1384:
 923              	.LBB1381:
1101:src/xeq.c     **** }
 924              		.loc 1 1101 24 view .LVU260
 925 0024 44F20101 		movw	r1, #16385
 926              	.LBE1381:
 927              	.LBE1384:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 928              		.loc 1 242 5 view .LVU261
 929 0028 2940     		ands	r1, r1, r5
 930 002a B1F5804F 		cmp	r1, #16384
 931              	.LBB1385:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 932              		.loc 1 243 13 view .LVU262
 933 002e 08BF     		it	eq
 934 0030 0C3A     		subeq	r2, r2, #12
 935              	.LBE1385:
 936              	.LBE1378:
 937              	.LBE1377:
 938              	.LBE1376:
2122:src/xeq.c     **** 		return n;
 939              		.loc 1 2122 10 view .LVU263
 940 0032 0344     		add	r3, r3, r0
 941              	.LBB1390:
 942              	.LBI1376:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 943              		.loc 1 253 14 is_stmt 1 view .LVU264
 944              	.LBE1390:
 254:src/xeq.c     **** }
 945              		.loc 1 254 2 view .LVU265
 946              	.LVL71:
 947              	.LBB1391:
 948              	.LBB1389:
 949              	.LBI1377:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 950              		.loc 1 241 14 view .LVU266
 951              	.LBB1388:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 952              		.loc 1 242 2 view .LVU267
 953              	.LBB1386:
 954              	.LBI1379:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 955              		.loc 1 1100 5 view .LVU268
 956              	.LBB1382:
1101:src/xeq.c     **** }
 957              		.loc 1 1101 2 view .LVU269
 958              	.LBE1382:
 959              	.LBE1386:
 960              	.LBB1387:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 961              		.loc 1 243 3 view .LVU270
ARM GAS  /tmp/ccaPnj5t.s 			page 100


 244:src/xeq.c     **** 	}
 962              		.loc 1 244 3 view .LVU271
 244:src/xeq.c     **** 	}
 963              		.loc 1 244 67 is_stmt 0 view .LVU272
 964 0034 08BF     		it	eq
 965 0036 5210     		asreq	r2, r2, #1
 966              	.LVL72:
 244:src/xeq.c     **** 	}
 967              		.loc 1 244 67 view .LVU273
 968              	.LBE1387:
 969              	.LBE1388:
 970              	.LBE1389:
 971              	.LBE1391:
2122:src/xeq.c     **** 		return n;
 972              		.loc 1 2122 5 view .LVU274
 973 0038 9342     		cmp	r3, r2
 974 003a 06D9     		bls	.L72
2122:src/xeq.c     **** 		return n;
 975              		.loc 1 2122 31 discriminator 1 view .LVU275
 976 003c 6F28     		cmp	r0, #111
 977 003e 04D8     		bhi	.L72
 978              	.LBB1392:
 979              	.LBI1392:
2119:src/xeq.c     **** 	const int n = stack_size();
 980              		.loc 1 2119 12 is_stmt 1 view .LVU276
 981              	.LVL73:
 982              	.LBB1393:
2125:src/xeq.c     **** 	return 0;
 983              		.loc 1 2125 2 view .LVU277
 984              	.LBB1394:
 985              	.LBI1394:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 986              		.loc 1 540 5 view .LVU278
 987              	.LBB1395:
 541:src/xeq.c     **** 		Error = e;
 988              		.loc 1 541 2 view .LVU279
 541:src/xeq.c     **** 		Error = e;
 989              		.loc 1 541 12 is_stmt 0 view .LVU280
 990 0040 0A4B     		ldr	r3, .L83+4
 991 0042 1C68     		ldr	r4, [r3]
 992              	.LVL74:
 541:src/xeq.c     **** 		Error = e;
 993              		.loc 1 541 5 view .LVU281
 994 0044 64B9     		cbnz	r4, .L80
 995              	.LVL75:
 996              	.LBB1396:
 997              	.LBI1396:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 998              		.loc 1 540 5 is_stmt 1 view .LVU282
 999              	.LBB1397:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1000              		.loc 1 542 3 view .LVU283
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1001              		.loc 1 542 9 is_stmt 0 view .LVU284
 1002 0046 0C22     		movs	r2, #12
 1003 0048 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccaPnj5t.s 			page 101


 1004              		.loc 1 543 3 is_stmt 1 view .LVU285
 1005              	.LVL76:
 1006              	.L72:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 1007              		.loc 1 543 3 is_stmt 0 view .LVU286
 1008              	.LBE1397:
 1009              	.LBE1396:
 1010              	.LBE1395:
 1011              	.LBE1394:
 1012              	.LBE1393:
 1013              	.LBE1392:
2127:src/xeq.c     **** 
 1014              		.loc 1 2127 1 view .LVU287
 1015 004a 2046     		mov	r0, r4
 1016              	.LVL77:
2127:src/xeq.c     **** 
 1017              		.loc 1 2127 1 view .LVU288
 1018 004c 30BC     		pop	{r4, r5}
 1019              		.cfi_remember_state
 1020              		.cfi_restore 5
 1021              		.cfi_restore 4
 1022              		.cfi_def_cfa_offset 0
 1023 004e 7047     		bx	lr
 1024              	.LVL78:
 1025              	.L82:
 1026              		.cfi_restore_state
 1027              	.LBB1401:
 1028              	.LBB1374:
 707:src/xeq.c     **** 		return 4;
 1029              		.loc 1 707 44 view .LVU289
 1030 0050 074B     		ldr	r3, .L83+8
 707:src/xeq.c     **** 		return 4;
 1031              		.loc 1 707 41 view .LVU290
 1032 0052 93F90130 		ldrsb	r3, [r3, #1]
 1033 0056 002B     		cmp	r3, #0
 1034 0058 DEDB     		blt	.L79
 1035              	.L77:
 1036 005a 0423     		movs	r3, #4
 708:src/xeq.c     **** 	return 8;
 1037              		.loc 1 708 10 view .LVU291
 1038 005c 1C46     		mov	r4, r3
 1039 005e DDE7     		b	.L73
 1040              	.LVL79:
 1041              	.L80:
 708:src/xeq.c     **** 	return 8;
 1042              		.loc 1 708 10 view .LVU292
 1043              	.LBE1374:
 1044              	.LBE1401:
 1045              	.LBB1402:
 1046              	.LBB1400:
 1047              	.LBB1399:
 1048              	.LBB1398:
 1049 0060 0024     		movs	r4, #0
 1050              	.LVL80:
 708:src/xeq.c     **** 	return 8;
 1051              		.loc 1 708 10 view .LVU293
 1052              	.LBE1398:
ARM GAS  /tmp/ccaPnj5t.s 			page 102


 1053              	.LBE1399:
 1054              	.LBE1400:
 1055              	.LBE1402:
2127:src/xeq.c     **** 
 1056              		.loc 1 2127 1 view .LVU294
 1057 0062 2046     		mov	r0, r4
 1058              	.LVL81:
2127:src/xeq.c     **** 
 1059              		.loc 1 2127 1 view .LVU295
 1060 0064 30BC     		pop	{r4, r5}
 1061              		.cfi_restore 5
 1062              		.cfi_restore 4
 1063              		.cfi_def_cfa_offset 0
 1064 0066 7047     		bx	lr
 1065              	.L84:
 1066              		.align	2
 1067              	.L83:
 1068 0068 00000000 		.word	main_ram
 1069 006c 00000000 		.word	Error
 1070 0070 00000000 		.word	XromParams
 1071              		.cfi_endproc
 1072              	.LFE146:
 1074              		.section	.text.is_xrom,"ax",%progbits
 1075              		.align	1
 1076              		.p2align 2,,3
 1077              		.global	is_xrom
 1078              		.syntax unified
 1079              		.thumb
 1080              		.thumb_func
 1081              		.fpu fpv4-sp-d16
 1083              	is_xrom:
 1084              	.LFB3:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 1085              		.loc 1 185 19 is_stmt 1 view -0
 1086              		.cfi_startproc
 1087              		@ args = 0, pretend = 0, frame = 0
 1088              		@ frame_needed = 0, uses_anonymous_args = 0
 1089              		@ link register save eliminated.
 186:src/xeq.c     **** }
 1090              		.loc 1 186 2 view .LVU297
 186:src/xeq.c     **** }
 1091              		.loc 1 186 9 is_stmt 0 view .LVU298
 1092 0000 054B     		ldr	r3, .L86
 1093 0002 1B68     		ldr	r3, [r3]
 1094 0004 B3F8E007 		ldrh	r0, [r3, #2016]
 1095 0008 800B     		lsrs	r0, r0, #14
 187:src/xeq.c     **** 
 1096              		.loc 1 187 1 view .LVU299
 1097 000a A0F10300 		sub	r0, #3
 1098 000e B0FA80F0 		clz	r0, r0
 1099 0012 4009     		lsrs	r0, r0, #5
 1100 0014 7047     		bx	lr
 1101              	.L87:
 1102 0016 00BF     		.align	2
 1103              	.L86:
 1104 0018 00000000 		.word	main_ram
 1105              		.cfi_endproc
ARM GAS  /tmp/ccaPnj5t.s 			page 103


 1106              	.LFE3:
 1108              		.section	.text.move_retstk,"ax",%progbits
 1109              		.align	1
 1110              		.p2align 2,,3
 1111              		.global	move_retstk
 1112              		.syntax unified
 1113              		.thumb
 1114              		.thumb_func
 1115              		.fpu fpv4-sp-d16
 1117              	move_retstk:
 1118              	.LVL82:
 1119              	.LFB4:
 196:src/xeq.c     **** #ifndef REALBUILD
 1120              		.loc 1 196 1 is_stmt 1 view -0
 1121              		.cfi_startproc
 1122              		@ args = 0, pretend = 0, frame = 0
 1123              		@ frame_needed = 0, uses_anonymous_args = 0
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1124              		.loc 1 199 2 view .LVU301
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1125              		.loc 1 199 6 is_stmt 0 view .LVU302
 1126 0000 1A4B     		ldr	r3, .L99
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1127              		.loc 1 199 5 view .LVU303
 1128 0002 93F90130 		ldrsb	r3, [r3, #1]
 1129 0006 002B     		cmp	r3, #0
 1130 0008 25DB     		blt	.L97
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1131              		.loc 1 204 2 is_stmt 1 view .LVU304
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1132              		.loc 1 204 19 is_stmt 0 view .LVU305
 1133 000a 194B     		ldr	r3, .L99+4
 196:src/xeq.c     **** #ifndef REALBUILD
 1134              		.loc 1 196 1 view .LVU306
 1135 000c 70B5     		push	{r4, r5, r6, lr}
 1136              		.cfi_def_cfa_offset 16
 1137              		.cfi_offset 4, -16
 1138              		.cfi_offset 5, -12
 1139              		.cfi_offset 6, -8
 1140              		.cfi_offset 14, -4
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1141              		.loc 1 204 19 view .LVU307
 1142 000e 1A68     		ldr	r2, [r3]
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1143              		.loc 1 204 17 view .LVU308
 1144 0010 184D     		ldr	r5, .L99+8
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1145              		.loc 1 204 19 view .LVU309
 1146 0012 B2F9E217 		ldrsh	r1, [r2, #2018]
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1147              		.loc 1 204 17 view .LVU310
 1148 0016 2B68     		ldr	r3, [r5]
 1149 0018 0B44     		add	r3, r3, r1
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1150              		.loc 1 204 5 view .LVU311
 1151 001a C342     		cmn	r3, r0
 1152 001c 0446     		mov	r4, r0
ARM GAS  /tmp/ccaPnj5t.s 			page 104


 1153 001e 13D4     		bmi	.L98
 208:src/xeq.c     **** 	RetStk += distance;
 1154              		.loc 1 208 2 is_stmt 1 view .LVU312
 1155 0020 154E     		ldr	r6, .L99+12
 1156 0022 3368     		ldr	r3, [r6]
 208:src/xeq.c     **** 	RetStk += distance;
 1157              		.loc 1 208 27 is_stmt 0 view .LVU313
 1158 0024 0818     		adds	r0, r1, r0
 1159              	.LVL83:
 208:src/xeq.c     **** 	RetStk += distance;
 1160              		.loc 1 208 60 view .LVU314
 1161 0026 4A42     		rsbs	r2, r1, #0
 208:src/xeq.c     **** 	RetStk += distance;
 1162              		.loc 1 208 2 view .LVU315
 1163 0028 03EB4000 		add	r0, r3, r0, lsl #1
 1164 002c 03EB4101 		add	r1, r3, r1, lsl #1
 1165 0030 5200     		lsls	r2, r2, #1
 1166 0032 FFF7FEFF 		bl	xcopy
 1167              	.LVL84:
 209:src/xeq.c     **** 	RetStkSize += distance;
 1168              		.loc 1 209 2 is_stmt 1 view .LVU316
 209:src/xeq.c     **** 	RetStkSize += distance;
 1169              		.loc 1 209 9 is_stmt 0 view .LVU317
 1170 0036 3368     		ldr	r3, [r6]
 210:src/xeq.c     **** 	return 0;
 1171              		.loc 1 210 13 view .LVU318
 1172 0038 2868     		ldr	r0, [r5]
 209:src/xeq.c     **** 	RetStkSize += distance;
 1173              		.loc 1 209 9 view .LVU319
 1174 003a 03EB4403 		add	r3, r3, r4, lsl #1
 210:src/xeq.c     **** 	return 0;
 1175              		.loc 1 210 13 view .LVU320
 1176 003e 2044     		add	r0, r0, r4
 1177 0040 2860     		str	r0, [r5]
 209:src/xeq.c     **** 	RetStkSize += distance;
 1178              		.loc 1 209 9 view .LVU321
 1179 0042 3360     		str	r3, [r6]
 210:src/xeq.c     **** 	return 0;
 1180              		.loc 1 210 2 is_stmt 1 view .LVU322
 211:src/xeq.c     **** }
 1181              		.loc 1 211 2 view .LVU323
 211:src/xeq.c     **** }
 1182              		.loc 1 211 9 is_stmt 0 view .LVU324
 1183 0044 0020     		movs	r0, #0
 212:src/xeq.c     **** 
 1184              		.loc 1 212 1 view .LVU325
 1185 0046 70BD     		pop	{r4, r5, r6, pc}
 1186              	.LVL85:
 1187              	.L98:
 205:src/xeq.c     **** 		return 1;
 1188              		.loc 1 205 3 is_stmt 1 view .LVU326
 1189              	.LBB1415:
 1190              	.LBI1415:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1191              		.loc 1 540 5 view .LVU327
 1192              	.LBB1416:
 541:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccaPnj5t.s 			page 105


 1193              		.loc 1 541 2 view .LVU328
 541:src/xeq.c     **** 		Error = e;
 1194              		.loc 1 541 12 is_stmt 0 view .LVU329
 1195 0048 0C4B     		ldr	r3, .L99+16
 541:src/xeq.c     **** 		Error = e;
 1196              		.loc 1 541 5 view .LVU330
 1197 004a 1A68     		ldr	r2, [r3]
 1198 004c 52B9     		cbnz	r2, .L93
 1199              	.LVL86:
 1200              	.LBB1417:
 1201              	.LBI1417:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1202              		.loc 1 540 5 is_stmt 1 view .LVU331
 1203              	.LBB1418:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1204              		.loc 1 542 3 view .LVU332
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1205              		.loc 1 542 9 is_stmt 0 view .LVU333
 1206 004e 0B22     		movs	r2, #11
 1207 0050 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 1208              		.loc 1 543 3 is_stmt 1 view .LVU334
 1209              	.LBE1418:
 1210              	.LBE1417:
 1211              	.LBE1416:
 1212              	.LBE1415:
 206:src/xeq.c     **** 	}
 1213              		.loc 1 206 10 is_stmt 0 view .LVU335
 1214 0052 0120     		movs	r0, #1
 1215              	.LVL87:
 212:src/xeq.c     **** 
 1216              		.loc 1 212 1 view .LVU336
 1217 0054 70BD     		pop	{r4, r5, r6, pc}
 1218              	.LVL88:
 1219              	.L97:
 1220              		.cfi_def_cfa_offset 0
 1221              		.cfi_restore 4
 1222              		.cfi_restore 5
 1223              		.cfi_restore 6
 1224              		.cfi_restore 14
 1225              	.LBB1420:
 1226              	.LBI1420:
 195:src/xeq.c     **** {
 1227              		.loc 1 195 5 is_stmt 1 view .LVU337
 195:src/xeq.c     **** {
 1228              		.loc 1 195 5 is_stmt 0 view .LVU338
 1229              	.LBE1420:
 200:src/xeq.c     **** 		return 1;
 1230              		.loc 1 200 3 is_stmt 1 view .LVU339
 1231              	.LBB1427:
 1232              	.LBB1421:
 1233              	.LBI1421:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1234              		.loc 1 540 5 view .LVU340
 1235              	.LBB1422:
 541:src/xeq.c     **** 		Error = e;
 1236              		.loc 1 541 2 view .LVU341
ARM GAS  /tmp/ccaPnj5t.s 			page 106


 541:src/xeq.c     **** 		Error = e;
 1237              		.loc 1 541 12 is_stmt 0 view .LVU342
 1238 0056 094B     		ldr	r3, .L99+16
 541:src/xeq.c     **** 		Error = e;
 1239              		.loc 1 541 5 view .LVU343
 1240 0058 1A68     		ldr	r2, [r3]
 1241 005a 2AB9     		cbnz	r2, .L92
 1242              	.LVL89:
 1243              	.LBB1423:
 1244              	.LBI1423:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1245              		.loc 1 540 5 is_stmt 1 view .LVU344
 1246              	.LBB1424:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1247              		.loc 1 542 3 view .LVU345
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1248              		.loc 1 542 9 is_stmt 0 view .LVU346
 1249 005c 0722     		movs	r2, #7
 1250 005e 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 1251              		.loc 1 543 3 is_stmt 1 view .LVU347
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1252              		.loc 1 542 9 is_stmt 0 view .LVU348
 1253 0060 0120     		movs	r0, #1
 1254              	.LVL90:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1255              		.loc 1 542 9 view .LVU349
 1256 0062 7047     		bx	lr
 1257              	.LVL91:
 1258              	.L93:
 1259              		.cfi_def_cfa_offset 16
 1260              		.cfi_offset 4, -16
 1261              		.cfi_offset 5, -12
 1262              		.cfi_offset 6, -8
 1263              		.cfi_offset 14, -4
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1264              		.loc 1 542 9 view .LVU350
 1265              	.LBE1424:
 1266              	.LBE1423:
 1267              	.LBE1422:
 1268              	.LBE1421:
 1269              	.LBE1427:
 1270              	.LBB1428:
 1271              	.LBB1419:
 1272 0064 0120     		movs	r0, #1
 1273              	.LVL92:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 1274              		.loc 1 542 9 view .LVU351
 1275              	.LBE1419:
 1276              	.LBE1428:
 212:src/xeq.c     **** 
 1277              		.loc 1 212 1 view .LVU352
 1278 0066 70BD     		pop	{r4, r5, r6, pc}
 1279              	.LVL93:
 1280              	.L92:
 1281              		.cfi_def_cfa_offset 0
 1282              		.cfi_restore 4
ARM GAS  /tmp/ccaPnj5t.s 			page 107


 1283              		.cfi_restore 5
 1284              		.cfi_restore 6
 1285              		.cfi_restore 14
 1286              	.LBB1429:
 1287              	.LBB1426:
 1288              	.LBB1425:
 212:src/xeq.c     **** 
 1289              		.loc 1 212 1 view .LVU353
 1290 0068 0120     		movs	r0, #1
 1291              	.LVL94:
 212:src/xeq.c     **** 
 1292              		.loc 1 212 1 view .LVU354
 1293              	.LBE1425:
 1294              	.LBE1426:
 1295              	.LBE1429:
 1296 006a 7047     		bx	lr
 1297              	.L100:
 1298              		.align	2
 1299              	.L99:
 1300 006c 00000000 		.word	XromParams
 1301 0070 00000000 		.word	main_ram
 1302 0074 00000000 		.word	RetStkSize
 1303 0078 00000000 		.word	RetStk
 1304 007c 00000000 		.word	Error
 1305              		.cfi_endproc
 1306              	.LFE4:
 1308              		.section	.text.local_levels,"ax",%progbits
 1309              		.align	1
 1310              		.p2align 2,,3
 1311              		.global	local_levels
 1312              		.syntax unified
 1313              		.thumb
 1314              		.thumb_func
 1315              		.fpu fpv4-sp-d16
 1317              	local_levels:
 1318              	.LFB5:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1319              		.loc 1 217 24 is_stmt 1 view -0
 1320              		.cfi_startproc
 1321              		@ args = 0, pretend = 0, frame = 0
 1322              		@ frame_needed = 0, uses_anonymous_args = 0
 1323              		@ link register save eliminated.
 218:src/xeq.c     **** }
 1324              		.loc 1 218 2 view .LVU356
 218:src/xeq.c     **** }
 1325              		.loc 1 218 9 is_stmt 0 view .LVU357
 1326 0000 074B     		ldr	r3, .L105
 1327 0002 1B68     		ldr	r3, [r3]
 1328 0004 B3F9DE37 		ldrsh	r3, [r3, #2014]
 218:src/xeq.c     **** }
 1329              		.loc 1 218 57 view .LVU358
 1330 0008 002B     		cmp	r3, #0
 1331 000a 01DB     		blt	.L104
 1332 000c 0020     		movs	r0, #0
 219:src/xeq.c     **** 
 1333              		.loc 1 219 1 view .LVU359
 1334 000e 7047     		bx	lr
ARM GAS  /tmp/ccaPnj5t.s 			page 108


 1335              	.L104:
 218:src/xeq.c     **** }
 1336              		.loc 1 218 25 discriminator 1 view .LVU360
 1337 0010 044A     		ldr	r2, .L105+4
 1338 0012 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 1339              		.loc 1 218 57 discriminator 1 view .LVU361
 1340 0014 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 1341 0018 C0F30B00 		ubfx	r0, r0, #0, #12
 1342 001c 7047     		bx	lr
 1343              	.L106:
 1344 001e 00BF     		.align	2
 1345              	.L105:
 1346 0020 00000000 		.word	main_ram
 1347 0024 00000000 		.word	RetStk
 1348              		.cfi_endproc
 1349              	.LFE5:
 1351              		.section	.text.local_regs_rarg,"ax",%progbits
 1352              		.align	1
 1353              		.p2align 2,,3
 1354              		.global	local_regs_rarg
 1355              		.syntax unified
 1356              		.thumb
 1357              		.thumb_func
 1358              		.fpu fpv4-sp-d16
 1360              	local_regs_rarg:
 1361              	.LVL95:
 1362              	.LFB6:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1363              		.loc 1 225 35 is_stmt 1 view -0
 1364              		.cfi_startproc
 1365              		@ args = 0, pretend = 0, frame = 0
 1366              		@ frame_needed = 0, uses_anonymous_args = 0
 1367              		@ link register save eliminated.
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1368              		.loc 1 226 2 view .LVU363
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1369              		.loc 1 226 53 is_stmt 0 view .LVU364
 1370 0000 A0F17E03 		sub	r3, r0, #126
 1371 0004 012B     		cmp	r3, #1
 1372 0006 144B     		ldr	r3, .L116
 1373 0008 23D9     		bls	.L113
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1374              		.loc 1 226 53 discriminator 1 view .LVU365
 1375 000a 8028     		cmp	r0, #128
 1376 000c 11D0     		beq	.L114
 1377              	.LBB1430:
 1378              	.LBI1430:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1379              		.loc 1 1100 5 is_stmt 1 view .LVU366
 1380              	.LBB1431:
1101:src/xeq.c     **** }
 1381              		.loc 1 1101 2 view .LVU367
1101:src/xeq.c     **** }
 1382              		.loc 1 1101 12 is_stmt 0 view .LVU368
 1383 000e 1B68     		ldr	r3, [r3]
1101:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 109


 1384              		.loc 1 1101 24 view .LVU369
 1385 0010 B3F8E827 		ldrh	r2, [r3, #2024]
 1386 0014 44F20100 		movw	r0, #16385
 1387              	.LVL96:
1101:src/xeq.c     **** }
 1388              		.loc 1 1101 24 view .LVU370
 1389              	.LBE1431:
 1390              	.LBE1430:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1391              		.loc 1 226 73 view .LVU371
 1392 0018 1040     		ands	r0, r0, r2
 1393 001a A0F58040 		sub	r0, r0, #16384
 1394 001e B0FA80F0 		clz	r0, r0
 1395 0022 4009     		lsrs	r0, r0, #5
 1396 0024 0230     		adds	r0, r0, #2
 1397              	.L109:
 227:src/xeq.c     **** }
 1398              		.loc 1 227 2 is_stmt 1 discriminator 8 view .LVU372
 1399              	.LBB1432:
 1400              	.LBI1432:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1401              		.loc 1 217 5 discriminator 8 view .LVU373
 1402              	.LBB1433:
 218:src/xeq.c     **** }
 1403              		.loc 1 218 2 discriminator 8 view .LVU374
 218:src/xeq.c     **** }
 1404              		.loc 1 218 9 is_stmt 0 discriminator 8 view .LVU375
 1405 0026 B3F9DE37 		ldrsh	r3, [r3, #2014]
 218:src/xeq.c     **** }
 1406              		.loc 1 218 57 discriminator 8 view .LVU376
 1407 002a 002B     		cmp	r3, #0
 1408 002c 08DB     		blt	.L115
 1409              	.L112:
 1410 002e 0020     		movs	r0, #0
 1411              	.LBE1433:
 1412              	.LBE1432:
 228:src/xeq.c     **** 
 1413              		.loc 1 228 1 view .LVU377
 1414 0030 7047     		bx	lr
 1415              	.LVL97:
 1416              	.L114:
 228:src/xeq.c     **** 
 1417              		.loc 1 228 1 view .LVU378
 1418 0032 1B68     		ldr	r3, [r3]
 227:src/xeq.c     **** }
 1419              		.loc 1 227 2 is_stmt 1 view .LVU379
 1420              	.LBB1436:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1421              		.loc 1 217 5 view .LVU380
 1422              	.LBB1434:
 218:src/xeq.c     **** }
 1423              		.loc 1 218 2 view .LVU381
 218:src/xeq.c     **** }
 1424              		.loc 1 218 9 is_stmt 0 view .LVU382
 1425 0034 B3F9DE37 		ldrsh	r3, [r3, #2014]
 218:src/xeq.c     **** }
 1426              		.loc 1 218 57 view .LVU383
ARM GAS  /tmp/ccaPnj5t.s 			page 110


 1427 0038 002B     		cmp	r3, #0
 1428              	.LBE1434:
 1429              	.LBE1436:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1430              		.loc 1 226 53 view .LVU384
 1431 003a 4FF00300 		mov	r0, #3
 1432              	.LVL98:
 1433              	.LBB1437:
 1434              	.LBB1435:
 218:src/xeq.c     **** }
 1435              		.loc 1 218 57 view .LVU385
 1436 003e F6DA     		bge	.L112
 1437              	.L115:
 218:src/xeq.c     **** }
 1438              		.loc 1 218 25 view .LVU386
 1439 0040 064A     		ldr	r2, .L116+4
 1440 0042 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 1441              		.loc 1 218 57 view .LVU387
 1442 0044 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1443 0048 C3F30B03 		ubfx	r3, r3, #0, #12
 1444 004c 43FA00F0 		asr	r0, r3, r0
 1445 0050 7047     		bx	lr
 1446              	.LVL99:
 1447              	.L113:
 218:src/xeq.c     **** }
 1448              		.loc 1 218 57 view .LVU388
 1449 0052 1B68     		ldr	r3, [r3]
 1450              	.LBE1435:
 1451              	.LBE1437:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1452              		.loc 1 226 53 view .LVU389
 1453 0054 0220     		movs	r0, #2
 1454              	.LVL100:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1455              		.loc 1 226 53 view .LVU390
 1456 0056 E6E7     		b	.L109
 1457              	.L117:
 1458              		.align	2
 1459              	.L116:
 1460 0058 00000000 		.word	main_ram
 1461 005c 00000000 		.word	RetStk
 1462              		.cfi_endproc
 1463              	.LFE6:
 1465              		.section	.text.get_reg_limit,"ax",%progbits
 1466              		.align	1
 1467              		.p2align 2,,3
 1468              		.syntax unified
 1469              		.thumb
 1470              		.thumb_func
 1471              		.fpu fpv4-sp-d16
 1473              	get_reg_limit:
 1474              	.LVL101:
 1475              	.LFB246:
4528:src/xeq.c     **** 
4529:src/xeq.c     **** 
4530:src/xeq.c     **** #ifndef UNIVERSAL_DISPATCH
ARM GAS  /tmp/ccaPnj5t.s 			page 111


4531:src/xeq.c     **** 
4532:src/xeq.c     **** 
4533:src/xeq.c     **** /*
4534:src/xeq.c     ****  *  Call a monadic function by reusing the decimal code for integer mode
4535:src/xeq.c     ****  */
4536:src/xeq.c     **** long long int intMonadic(long long int x) {
4537:src/xeq.c     **** 	int s;
4538:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
4539:src/xeq.c     **** 	decNumber rx, r;
4540:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4541:src/xeq.c     **** 
4542:src/xeq.c     **** 	if (isNULL(monfuncs[f].mondreal))
4543:src/xeq.c     **** 		bad_mode_error();
4544:src/xeq.c     **** 	else {
4545:src/xeq.c     **** 		FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4546:src/xeq.c     **** #ifndef REALBUILD
4547:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4548:src/xeq.c     **** 			bad_mode_error();
4549:src/xeq.c     **** 		else 
4550:src/xeq.c     **** #endif
4551:src/xeq.c     **** 		{
4552:src/xeq.c     **** 			ullint_to_dn(&rx, vx);
4553:src/xeq.c     **** 			if (s)
4554:src/xeq.c     **** 				dn_minus(&rx, &rx);
4555:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
4556:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4557:src/xeq.c     **** 			else
4558:src/xeq.c     **** 				return intResult(&r);
4559:src/xeq.c     **** 		}
4560:src/xeq.c     **** 	}
4561:src/xeq.c     **** 	return 0;
4562:src/xeq.c     **** }
4563:src/xeq.c     **** 
4564:src/xeq.c     **** /*
4565:src/xeq.c     ****  *  Call a dyadic function by reusing the decimal code for integer mode
4566:src/xeq.c     ****  */
4567:src/xeq.c     **** long long int intDyadic(long long int y, long long int x) {
4568:src/xeq.c     **** 	int sx, sy;
4569:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4570:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
4571:src/xeq.c     **** 	decNumber rx, ry, r;
4572:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4573:src/xeq.c     **** 
4574:src/xeq.c     **** 	if (isNULL(dyfuncs[f].dydreal))
4575:src/xeq.c     **** 		bad_mode_error();
4576:src/xeq.c     **** 	else {
4577:src/xeq.c     **** 		FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4578:src/xeq.c     **** 
4579:src/xeq.c     **** #ifndef REALBUILD
4580:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4581:src/xeq.c     **** 			bad_mode_error();
4582:src/xeq.c     **** 		else 
4583:src/xeq.c     **** #endif
4584:src/xeq.c     **** 		{
4585:src/xeq.c     **** 			ullint_to_dn(&rx, vx);	if (sx) dn_minus(&rx, &rx);
4586:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
4587:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 112


4588:src/xeq.c     **** 			if (NULL == fp(&r, &ry, &rx))
4589:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4590:src/xeq.c     **** 			else
4591:src/xeq.c     **** 				return intResult(&r);
4592:src/xeq.c     **** 		}
4593:src/xeq.c     **** 	}
4594:src/xeq.c     **** 	return 0;
4595:src/xeq.c     **** }
4596:src/xeq.c     **** 
4597:src/xeq.c     **** 
4598:src/xeq.c     **** /* Dispatch routine for niladic functions.
4599:src/xeq.c     ****  */
4600:src/xeq.c     **** static void niladic(const opcode op) {
4601:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
4602:src/xeq.c     **** 
4603:src/xeq.c     **** 	process_cmdline();
4604:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
4605:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
4606:src/xeq.c     **** 			bad_mode_error();
4607:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
4608:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
4609:src/xeq.c     **** 			if (dispatch_xrom(fp))
4610:src/xeq.c     **** 				return;
4611:src/xeq.c     **** 			else {
4612:src/xeq.c     **** 				switch (NILADIC_NUMRESULTS(niladics[idx])) {
4613:src/xeq.c     **** 				case 2:	lift_if_enabled();
4614:src/xeq.c     **** 				case 1:	lift_if_enabled();
4615:src/xeq.c     **** 				default:
4616:src/xeq.c     **** 					fp((enum nilop)idx);
4617:src/xeq.c     **** 					break;
4618:src/xeq.c     **** 				}
4619:src/xeq.c     **** 			}
4620:src/xeq.c     **** 		}
4621:src/xeq.c     **** 	} else
4622:src/xeq.c     **** 		illegal(op);
4623:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
4624:src/xeq.c     **** #ifdef ENTRY_RPN
4625:src/xeq.c     **** 	if (idx != OP_rCLX) // in entry_rpn mode, lift must be on after enter so the second part below isn
4626:src/xeq.c     **** #else
4627:src/xeq.c     **** 	if ( (idx != OP_rCLX) && ( ((idx != OP_CENTER) ) && (C_LOCKED) ) ) // don't turn on lift after CEN
4628:src/xeq.c     **** #endif
4629:src/xeq.c     **** #else
4630:src/xeq.c     **** 	if (idx != OP_rCLX) // normally, just don't turn on lift after CLX
4631:src/xeq.c     **** #endif
4632:src/xeq.c     **** 		set_lift();
4633:src/xeq.c     **** }
4634:src/xeq.c     **** 
4635:src/xeq.c     **** 
4636:src/xeq.c     **** /* Dispatch routine for monadic operations.
4637:src/xeq.c     ****  * Since these functions take an argument from the X register, save it in
4638:src/xeq.c     ****  * lastx and then replace it with their result, we can factor out the common
4639:src/xeq.c     ****  * stack manipulatin code.
4640:src/xeq.c     ****  */
4641:src/xeq.c     **** static void monadic(const opcode op)
4642:src/xeq.c     **** {
4643:src/xeq.c     **** 	unsigned int f;
4644:src/xeq.c     **** 	process_cmdline_set_lift();
ARM GAS  /tmp/ccaPnj5t.s 			page 113


4645:src/xeq.c     **** 
4646:src/xeq.c     **** 	f = argKIND(op);
4647:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4648:src/xeq.c     **** 		if (is_intmode()) {
4649:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
4650:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
4651:src/xeq.c     **** 				if (dispatch_xrom(fp))
4652:src/xeq.c     **** 					return;
4653:src/xeq.c     **** 				else {
4654:src/xeq.c     **** 					long long int x = getX_int();
4655:src/xeq.c     **** 					x = fp(x);
4656:src/xeq.c     **** 					setlastX();
4657:src/xeq.c     **** 					setX_int(x);
4658:src/xeq.c     **** 				}
4659:src/xeq.c     **** 			} else
4660:src/xeq.c     **** 				bad_mode_error();
4661:src/xeq.c     **** 		} else {
4662:src/xeq.c     **** 			if (! isNULL(monfuncs[f].mondreal)) {
4663:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4664:src/xeq.c     **** 				if (dispatch_xrom(fp))
4665:src/xeq.c     **** 					return;
4666:src/xeq.c     **** 				else {
4667:src/xeq.c     **** 					decNumber x, r;
4668:src/xeq.c     **** 					getX(&x);
4669:src/xeq.c     **** 					if (NULL == fp(&r, &x))
4670:src/xeq.c     **** 						set_NaN(&r);
4671:src/xeq.c     **** 					setlastX();
4672:src/xeq.c     **** 					setX(&r);
4673:src/xeq.c     **** 				}
4674:src/xeq.c     **** 			} else
4675:src/xeq.c     **** 				bad_mode_error();
4676:src/xeq.c     **** 		}
4677:src/xeq.c     **** 	} else
4678:src/xeq.c     **** 		illegal(op);
4679:src/xeq.c     **** }
4680:src/xeq.c     **** 
4681:src/xeq.c     **** static void monadic_cmplex(const opcode op) {
4682:src/xeq.c     **** 	decNumber x, y, rx, ry;
4683:src/xeq.c     **** 	unsigned int f;
4684:src/xeq.c     **** 
4685:src/xeq.c     **** 	process_cmdline_set_lift();
4686:src/xeq.c     **** 
4687:src/xeq.c     **** 	f = argKIND(op);
4688:src/xeq.c     **** 
4689:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4690:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
4691:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
4692:src/xeq.c     **** 			if (dispatch_xrom(fp))
4693:src/xeq.c     **** 				return;
4694:src/xeq.c     **** 			else {
4695:src/xeq.c     **** 				getXY(&x, &y);
4696:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
4697:src/xeq.c     **** 				setlastXY();
4698:src/xeq.c     **** 				setXY(&rx, &ry);
4699:src/xeq.c     **** 				set_was_complex();
4700:src/xeq.c     **** 			}
4701:src/xeq.c     **** 		} else
ARM GAS  /tmp/ccaPnj5t.s 			page 114


4702:src/xeq.c     **** 			bad_mode_error();
4703:src/xeq.c     **** 	} else
4704:src/xeq.c     **** 		illegal(op);
4705:src/xeq.c     **** }
4706:src/xeq.c     **** 
4707:src/xeq.c     **** /***************************************************************************
4708:src/xeq.c     ****  * Dyadic function handling.
4709:src/xeq.c     ****  */
4710:src/xeq.c     **** 
4711:src/xeq.c     **** /* Dispatch routine for dyadic operations.
4712:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4713:src/xeq.c     ****  * common stack manipulation.
4714:src/xeq.c     ****  */
4715:src/xeq.c     **** static void dyadic(const opcode op) {
4716:src/xeq.c     **** 
4717:src/xeq.c     **** 	unsigned int f;
4718:src/xeq.c     **** 	process_cmdline_set_lift();
4719:src/xeq.c     **** 
4720:src/xeq.c     **** 	f = argKIND(op);
4721:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4722:src/xeq.c     **** 		if (is_intmode()) {
4723:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
4724:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
4725:src/xeq.c     **** 				if (dispatch_xrom(fp))
4726:src/xeq.c     **** 					return;
4727:src/xeq.c     **** 				else {
4728:src/xeq.c     **** 					long long int x = getX_int();
4729:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4730:src/xeq.c     **** 					x = fp(y, x);
4731:src/xeq.c     **** 					setlastX();
4732:src/xeq.c     **** 					lower();
4733:src/xeq.c     **** 					setX_int(x);
4734:src/xeq.c     **** 				}
4735:src/xeq.c     **** 			} else
4736:src/xeq.c     **** 				bad_mode_error();
4737:src/xeq.c     **** 		} else {
4738:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydreal)) {
4739:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4740:src/xeq.c     **** 				if (dispatch_xrom(fp))
4741:src/xeq.c     **** 					return;
4742:src/xeq.c     **** 				else {
4743:src/xeq.c     **** 					decNumber x, y, r;
4744:src/xeq.c     **** 					getXY(&x, &y);
4745:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
4746:src/xeq.c     **** 						set_NaN(&r);
4747:src/xeq.c     **** 					setlastX();
4748:src/xeq.c     **** 					lower();
4749:src/xeq.c     **** 					setX(&r);
4750:src/xeq.c     **** 				}
4751:src/xeq.c     **** 			} else
4752:src/xeq.c     **** 				bad_mode_error();
4753:src/xeq.c     **** 		}
4754:src/xeq.c     **** 	} else
4755:src/xeq.c     **** 		illegal(op);
4756:src/xeq.c     **** }
4757:src/xeq.c     **** 
4758:src/xeq.c     **** static void dyadic_cmplex(const opcode op) {
ARM GAS  /tmp/ccaPnj5t.s 			page 115


4759:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
4760:src/xeq.c     **** 	unsigned int f;
4761:src/xeq.c     **** 
4762:src/xeq.c     **** 	process_cmdline_set_lift();
4763:src/xeq.c     **** 
4764:src/xeq.c     **** 	f = argKIND(op);
4765:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4766:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
4767:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
4768:src/xeq.c     **** 			if (dispatch_xrom(fp))
4769:src/xeq.c     **** 				return;
4770:src/xeq.c     **** 			else {
4771:src/xeq.c     **** 				getXYZT(&x1, &y1, &x2, &y2);
4772:src/xeq.c     **** 
4773:src/xeq.c     **** 				fp(&xr, &yr, &x2, &y2, &x1, &y1);
4774:src/xeq.c     **** 
4775:src/xeq.c     **** 				setlastXY();
4776:src/xeq.c     **** 				lower2();
4777:src/xeq.c     **** 				setXY(&xr, &yr);
4778:src/xeq.c     **** 				set_was_complex();
4779:src/xeq.c     **** 			}
4780:src/xeq.c     **** 		} else
4781:src/xeq.c     **** 			bad_mode_error();
4782:src/xeq.c     **** 	} else
4783:src/xeq.c     **** 		illegal(op);
4784:src/xeq.c     **** }
4785:src/xeq.c     **** 
4786:src/xeq.c     **** /* Dispatch routine for triadic operations.
4787:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4788:src/xeq.c     ****  * common stack manipulation.
4789:src/xeq.c     ****  */
4790:src/xeq.c     **** static void triadic(const opcode op) {
4791:src/xeq.c     **** 	unsigned int f;
4792:src/xeq.c     **** 	process_cmdline_set_lift();
4793:src/xeq.c     **** 
4794:src/xeq.c     **** 	f = argKIND(op);
4795:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
4796:src/xeq.c     **** 		if (is_intmode()) {
4797:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
4798:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
4799:src/xeq.c     **** 				if (dispatch_xrom(fp))
4800:src/xeq.c     **** 					return;
4801:src/xeq.c     **** 				else {
4802:src/xeq.c     **** 					long long int x = getX_int();
4803:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4804:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
4805:src/xeq.c     **** 					x = fp(z, y, x);
4806:src/xeq.c     **** 					setlastX();
4807:src/xeq.c     **** 					lower();
4808:src/xeq.c     **** 					lower();
4809:src/xeq.c     **** 					setX_int(x);
4810:src/xeq.c     **** 				}
4811:src/xeq.c     **** 			} else
4812:src/xeq.c     **** 				bad_mode_error();
4813:src/xeq.c     **** 		} else {
4814:src/xeq.c     **** 			if (! isNULL(trifuncs[f].trireal)) {
4815:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
ARM GAS  /tmp/ccaPnj5t.s 			page 116


4816:src/xeq.c     **** 				if (dispatch_xrom(fp))
4817:src/xeq.c     **** 					return;
4818:src/xeq.c     **** 				else {
4819:src/xeq.c     **** 					decNumber x, y, z, r;
4820:src/xeq.c     **** 					getXYZ(&x, &y, &z);
4821:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
4822:src/xeq.c     **** 						set_NaN(&r);
4823:src/xeq.c     **** 					setlastX();
4824:src/xeq.c     **** 					lower();
4825:src/xeq.c     **** 					lower();
4826:src/xeq.c     **** 					setX(&r);
4827:src/xeq.c     **** 				}
4828:src/xeq.c     **** 			} else
4829:src/xeq.c     **** 				bad_mode_error();
4830:src/xeq.c     **** 		}
4831:src/xeq.c     **** 	} else
4832:src/xeq.c     **** 		illegal(op);
4833:src/xeq.c     **** }
4834:src/xeq.c     **** 
4835:src/xeq.c     **** 
4836:src/xeq.c     **** #else // UNIVERSAL_DISPATCH
4837:src/xeq.c     **** 
4838:src/xeq.c     **** 
4839:src/xeq.c     **** /*
4840:src/xeq.c     ****  *  Call functions by reusing the decimal code for integer mode
4841:src/xeq.c     ****  */
4842:src/xeq.c     **** static long long int universal_dispatch_int(long long int y, long long int x, unsigned int dyadic)
4843:src/xeq.c     **** {
4844:src/xeq.c     **** 	int sx, sy;
4845:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4846:src/xeq.c     **** 	unsigned long long int vy;
4847:src/xeq.c     **** 	decNumber rx, ry, r;
4848:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4849:src/xeq.c     **** 	void (*function_pointer)(void);
4850:src/xeq.c     **** 
4851:src/xeq.c     **** #ifdef SHORT_POINTERS
4852:src/xeq.c     **** 	unsigned short compact_pointer;
4853:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4854:src/xeq.c     **** #else
4855:src/xeq.c     **** 	void (*compact_pointer)(void);
4856:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4857:src/xeq.c     **** #endif
4858:src/xeq.c     **** 
4859:src/xeq.c     **** 	if (dyadic) {
4860:src/xeq.c     **** 		vy = extract_value(y, &sy);
4861:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4862:src/xeq.c     **** 	}
4863:src/xeq.c     **** 	else {
4864:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4865:src/xeq.c     **** 	}
4866:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4867:src/xeq.c     **** 		bad_mode_error();
4868:src/xeq.c     **** 	}
4869:src/xeq.c     **** 	else {
4870:src/xeq.c     **** 		function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4871:src/xeq.c     **** #ifndef REALBUILD
4872:src/xeq.c     **** 		if (check_for_xrom_address(function_pointer) != NULL) {
ARM GAS  /tmp/ccaPnj5t.s 			page 117


4873:src/xeq.c     **** 			bad_mode_error();
4874:src/xeq.c     **** 		}
4875:src/xeq.c     **** 		else
4876:src/xeq.c     **** #endif
4877:src/xeq.c     **** 		{
4878:src/xeq.c     **** 			void *result;
4879:src/xeq.c     **** 
4880:src/xeq.c     **** 			ullint_to_dn(&rx, vx);		if (sx) dn_minus(&rx, &rx);
4881:src/xeq.c     **** 			if (dyadic) {
4882:src/xeq.c     **** 				ullint_to_dn(&ry, vy);		if (sy) dn_minus(&ry, &ry);
4883:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r, &ry, &rx);
4884:src/xeq.c     **** 			}
4885:src/xeq.c     **** 			else {
4886:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r, &rx);
4887:src/xeq.c     **** 			}
4888:src/xeq.c     **** 			if (NULL == result) {
4889:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4890:src/xeq.c     **** 			}
4891:src/xeq.c     **** 			else {
4892:src/xeq.c     **** 				return intResult(&r);
4893:src/xeq.c     **** 			}
4894:src/xeq.c     **** 		}
4895:src/xeq.c     **** 	}
4896:src/xeq.c     **** 	return 0;
4897:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4898:src/xeq.c     **** }
4899:src/xeq.c     **** 
4900:src/xeq.c     **** 
4901:src/xeq.c     **** long long int intMonadic(long long int x)
4902:src/xeq.c     **** {
4903:src/xeq.c     **** 	return universal_dispatch_int(0, x, 0);
4904:src/xeq.c     **** }
4905:src/xeq.c     **** 
4906:src/xeq.c     **** long long int intDyadic(long long int y, long long int x)
4907:src/xeq.c     **** {
4908:src/xeq.c     **** 	return universal_dispatch_int(y, x, 1);
4909:src/xeq.c     **** }
4910:src/xeq.c     **** 
4911:src/xeq.c     **** 
4912:src/xeq.c     **** /*
4913:src/xeq.c     ****  *  Universal dispatch function for niladic, monadic, dyadic and triadic functions, both real and c
4914:src/xeq.c     ****  */
4915:src/xeq.c     **** static void universal_dispatch(const opcode op, const unsigned int operands, const unsigned int com
4916:src/xeq.c     **** {
4917:src/xeq.c     **** 	const int intmode = is_intmode();
4918:src/xeq.c     **** 	volatile long long int ix; // declared volatile to avoid bogus warning about variable possibly bei
4919:src/xeq.c     **** 	const unsigned int f = argKIND(op);
4920:src/xeq.c     **** 	void (*function_pointer)(void);
4921:src/xeq.c     **** 
4922:src/xeq.c     **** #ifdef SHORT_POINTERS
4923:src/xeq.c     **** 	unsigned short compact_pointer;
4924:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4925:src/xeq.c     **** #else
4926:src/xeq.c     **** 	void (*compact_pointer)(void);
4927:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4928:src/xeq.c     **** #endif
4929:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 118


4930:src/xeq.c     **** 	process_cmdline();
4931:src/xeq.c     **** 	if (operands != 0) {
4932:src/xeq.c     **** 		set_lift();
4933:src/xeq.c     **** 	}
4934:src/xeq.c     **** 	switch (operands) {
4935:src/xeq.c     **** 	default:
4936:src/xeq.c     **** 	case 0:
4937:src/xeq.c     **** 		if (f >= NUM_NILADIC) {
4938:src/xeq.c     **** illegal:
4939:src/xeq.c     **** 			illegal(op);
4940:src/xeq.c     **** 			goto finish_niladic;
4941:src/xeq.c     **** 		}
4942:src/xeq.c     **** 		if (intmode && NILADIC_NOTINT(niladics[f])) {
4943:src/xeq.c     **** 			goto bad_mode;
4944:src/xeq.c     **** 		}
4945:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)niladics[f].niladicf;
4946:src/xeq.c     **** 		break;
4947:src/xeq.c     **** 
4948:src/xeq.c     **** 	case 1:
4949:src/xeq.c     **** 		if (f >= NUM_MONADIC)
4950:src/xeq.c     **** 			goto illegal;
4951:src/xeq.c     **** 		if (intmode)
4952:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].monint;
4953:src/xeq.c     **** 		else if (complex)
4954:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondcmplx;
4955:src/xeq.c     **** 		else
4956:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4957:src/xeq.c     **** 		break;
4958:src/xeq.c     **** 
4959:src/xeq.c     **** 	case 2:
4960:src/xeq.c     **** 		if (f >= NUM_DYADIC)
4961:src/xeq.c     **** 			goto illegal;
4962:src/xeq.c     **** 		if (intmode)
4963:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydint;
4964:src/xeq.c     **** 		else if (complex)
4965:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydcmplx;
4966:src/xeq.c     **** 		else
4967:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4968:src/xeq.c     **** 		break;
4969:src/xeq.c     **** 
4970:src/xeq.c     **** 	case 3:
4971:src/xeq.c     **** 		if (f >= NUM_TRIADIC)
4972:src/xeq.c     **** 			goto illegal;
4973:src/xeq.c     **** 		if (intmode)
4974:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].triint;
4975:src/xeq.c     **** 		else
4976:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].trireal;
4977:src/xeq.c     **** 		break;
4978:src/xeq.c     **** 	}
4979:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4980:src/xeq.c     **** 		if (operands != 0) {
4981:src/xeq.c     **** 			// The original niladic() function doesn't invoke
4982:src/xeq.c     **** 			// bad_mode_error() if the function pointer is null.
4983:src/xeq.c     **** 			// TODO:  Verify that this behavior is really needed.
4984:src/xeq.c     **** bad_mode:
4985:src/xeq.c     **** 			bad_mode_error();
4986:src/xeq.c     **** 		}
ARM GAS  /tmp/ccaPnj5t.s 			page 119


4987:src/xeq.c     **** 		goto finish_niladic;
4988:src/xeq.c     **** 	}
4989:src/xeq.c     **** 	function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4990:src/xeq.c     **** 	if (dispatch_xrom(function_pointer)) {
4991:src/xeq.c     **** 		return;
4992:src/xeq.c     **** 	}
4993:src/xeq.c     **** 	if (operands == 0) {
4994:src/xeq.c     **** 		switch (NILADIC_NUMRESULTS(niladics[f])) {
4995:src/xeq.c     **** 		case 2:		lift_if_enabled(); // fall through
4996:src/xeq.c     **** 		case 1:		lift_if_enabled(); break;
4997:src/xeq.c     **** 		}
4998:src/xeq.c     **** 		((FP_NILADIC)function_pointer)((enum nilop)f);
4999:src/xeq.c     **** finish_niladic:
5000:src/xeq.c     **** 		// If an error occurred, we end up here even if a non-niladic function was called.
5001:src/xeq.c     **** 		// set_lift() is always called for non-niladic functions so calling it again does no harm.
5002:src/xeq.c     **** 		if (f != OP_rCLX) {
5003:src/xeq.c     **** 			set_lift();
5004:src/xeq.c     **** 		}
5005:src/xeq.c     **** 	}
5006:src/xeq.c     **** 	else if (intmode) {
5007:src/xeq.c     **** 		long long int iy;
5008:src/xeq.c     **** 		long long int iz;
5009:src/xeq.c     **** 
5010:src/xeq.c     **** 		ix = getX_int();
5011:src/xeq.c     **** 		iy = get_reg_n_int(regY_idx);
5012:src/xeq.c     **** 		switch (operands) {
5013:src/xeq.c     **** 		default:
5014:src/xeq.c     **** 		case 1:
5015:src/xeq.c     **** 			ix = ((FP_MONADIC_INT)function_pointer)(ix);
5016:src/xeq.c     **** 			break;
5017:src/xeq.c     **** 
5018:src/xeq.c     **** 		case 2:
5019:src/xeq.c     **** 			ix = ((FP_DYADIC_INT)function_pointer)(iy, ix);
5020:src/xeq.c     **** 			break;
5021:src/xeq.c     **** 
5022:src/xeq.c     **** 		case 3:
5023:src/xeq.c     **** 			iz = get_reg_n_int(regZ_idx);
5024:src/xeq.c     **** 			ix = ((FP_TRIADIC_INT)function_pointer)(iz, iy, ix);
5025:src/xeq.c     **** 			break;
5026:src/xeq.c     **** 		}
5027:src/xeq.c     **** 		goto finish_x;
5028:src/xeq.c     **** 	}
5029:src/xeq.c     **** 	else {
5030:src/xeq.c     **** 		decNumber x, y, z, t, r1;
5031:src/xeq.c     **** 
5032:src/xeq.c     **** 		if (operands + complex <= 2) {
5033:src/xeq.c     **** 			getXY(&x, &y);
5034:src/xeq.c     **** 		}
5035:src/xeq.c     **** 		else {
5036:src/xeq.c     **** 			getXYZT(&x, &y, &z, &t);
5037:src/xeq.c     **** 		}
5038:src/xeq.c     **** 
5039:src/xeq.c     **** 		if (complex) {
5040:src/xeq.c     **** 			decNumber r2;
5041:src/xeq.c     **** 
5042:src/xeq.c     **** 			if (operands == 1) {
5043:src/xeq.c     **** 				((FP_MONADIC_CMPLX)function_pointer)(&r1, &r2, &x, &y);
ARM GAS  /tmp/ccaPnj5t.s 			page 120


5044:src/xeq.c     **** 			}
5045:src/xeq.c     **** 			else {
5046:src/xeq.c     **** 				((FP_DYADIC_CMPLX)function_pointer)(&r1, &r2, &z, &t, &x, &y);
5047:src/xeq.c     **** 			}
5048:src/xeq.c     **** 			setlastXY();
5049:src/xeq.c     **** 			if (operands != 1) {
5050:src/xeq.c     **** 				lower2();
5051:src/xeq.c     **** 			}
5052:src/xeq.c     **** 			setXY(&r1, &r2);
5053:src/xeq.c     **** 			set_was_complex();
5054:src/xeq.c     **** 		}
5055:src/xeq.c     **** 		else { // real
5056:src/xeq.c     **** 			void *result;
5057:src/xeq.c     **** 
5058:src/xeq.c     **** 			switch (operands) {
5059:src/xeq.c     **** 			default:
5060:src/xeq.c     **** 			case 1:
5061:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r1, &x);
5062:src/xeq.c     **** 				break;
5063:src/xeq.c     **** 
5064:src/xeq.c     **** 			case 2:
5065:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r1, &y, &x);
5066:src/xeq.c     **** 				break;
5067:src/xeq.c     **** 
5068:src/xeq.c     **** 			case 3:
5069:src/xeq.c     **** 				result = ((FP_TRIADIC_REAL)function_pointer)(&r1, &z, &y, &x);
5070:src/xeq.c     **** 				break;
5071:src/xeq.c     **** 			}
5072:src/xeq.c     **** 			if (NULL == result) {
5073:src/xeq.c     **** 				set_NaN(&r1);
5074:src/xeq.c     **** 			}
5075:src/xeq.c     **** finish_x:
5076:src/xeq.c     **** 			setlastX();
5077:src/xeq.c     **** 			switch (operands) {
5078:src/xeq.c     **** 			case 3:		lower(); // fall through
5079:src/xeq.c     **** 			case 2:		lower(); break;
5080:src/xeq.c     **** 			}
5081:src/xeq.c     **** 			if (!intmode) {
5082:src/xeq.c     **** 				setX(&r1);
5083:src/xeq.c     **** 			}
5084:src/xeq.c     **** 			else {
5085:src/xeq.c     **** 				setX_int(ix);
5086:src/xeq.c     **** 			}
5087:src/xeq.c     **** 		}
5088:src/xeq.c     **** 	}
5089:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
5090:src/xeq.c     **** }
5091:src/xeq.c     **** 
5092:src/xeq.c     **** 
5093:src/xeq.c     **** static void niladic(const opcode op)
5094:src/xeq.c     **** {
5095:src/xeq.c     **** 	universal_dispatch(op, 0, 0);
5096:src/xeq.c     **** }
5097:src/xeq.c     **** 
5098:src/xeq.c     **** static void monadic(const opcode op)
5099:src/xeq.c     **** {
5100:src/xeq.c     **** 	universal_dispatch(op, 1, 0);
ARM GAS  /tmp/ccaPnj5t.s 			page 121


5101:src/xeq.c     **** }
5102:src/xeq.c     **** 
5103:src/xeq.c     **** static void monadic_cmplex(const opcode op)
5104:src/xeq.c     **** {
5105:src/xeq.c     **** 	universal_dispatch(op, 1, 1);
5106:src/xeq.c     **** }
5107:src/xeq.c     **** 
5108:src/xeq.c     **** static void dyadic(const opcode op)
5109:src/xeq.c     **** {
5110:src/xeq.c     **** 	universal_dispatch(op, 2, 0);
5111:src/xeq.c     **** }
5112:src/xeq.c     **** 
5113:src/xeq.c     **** static void dyadic_cmplex(const opcode op)
5114:src/xeq.c     **** {
5115:src/xeq.c     **** 	universal_dispatch(op, 2, 1);
5116:src/xeq.c     **** }
5117:src/xeq.c     **** 
5118:src/xeq.c     **** static void triadic(const opcode op)
5119:src/xeq.c     **** {
5120:src/xeq.c     **** 	universal_dispatch(op, 3, 0);
5121:src/xeq.c     **** }
5122:src/xeq.c     **** 
5123:src/xeq.c     **** 
5124:src/xeq.c     **** #endif // UNIVERSAL_DISPATCH
5125:src/xeq.c     **** 
5126:src/xeq.c     **** 
5127:src/xeq.c     **** /*
5128:src/xeq.c     ****  *  Helper to check the maximum allowed register number, 
5129:src/xeq.c     ****  *  depending on command flags and current allocation.
5130:src/xeq.c     ****  *  This needs to be seperate because its called twice for indirect arguments
5131:src/xeq.c     ****  */
5132:src/xeq.c     **** static unsigned int get_reg_limit(unsigned int cmd, unsigned int arg)
5133:src/xeq.c     **** {
 1476              		.loc 1 5133 1 is_stmt 1 view -0
 1477              		.cfi_startproc
 1478              		@ args = 0, pretend = 0, frame = 0
 1479              		@ frame_needed = 0, uses_anonymous_args = 0
5134:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1480              		.loc 1 5134 2 view .LVU392
5135:src/xeq.c     **** 
5136:src/xeq.c     **** 	if (arg < TOPREALREG) {
 1481              		.loc 1 5136 2 view .LVU393
 1482              		.loc 1 5136 5 is_stmt 0 view .LVU394
 1483 0000 6329     		cmp	r1, #99
5133:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1484              		.loc 1 5133 1 view .LVU395
 1485 0002 38B5     		push	{r3, r4, r5, lr}
 1486              		.cfi_def_cfa_offset 16
 1487              		.cfi_offset 3, -16
 1488              		.cfi_offset 4, -12
 1489              		.cfi_offset 5, -8
 1490              		.cfi_offset 14, -4
5133:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1491              		.loc 1 5133 1 view .LVU396
 1492 0004 0446     		mov	r4, r0
 1493              		.loc 1 5136 5 view .LVU397
 1494 0006 16D8     		bhi	.L119
ARM GAS  /tmp/ccaPnj5t.s 			page 122


5137:src/xeq.c     **** 		// Range checking for registers against variable boundary
5138:src/xeq.c     **** 		lim = global_regs_rarg((enum rarg) cmd) - 1;
 1495              		.loc 1 5138 3 is_stmt 1 view .LVU398
 1496              	.LVL102:
 1497              	.LBB1438:
 1498              	.LBI1438:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1499              		.loc 1 241 14 view .LVU399
 1500              	.LBB1439:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1501              		.loc 1 242 2 view .LVU400
 1502              	.LBB1440:
 1503              	.LBI1440:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1504              		.loc 1 1100 5 view .LVU401
 1505              	.LBB1441:
1101:src/xeq.c     **** }
 1506              		.loc 1 1101 2 view .LVU402
1101:src/xeq.c     **** }
 1507              		.loc 1 1101 12 is_stmt 0 view .LVU403
 1508 0008 294B     		ldr	r3, .L139
 1509 000a 1A68     		ldr	r2, [r3]
1101:src/xeq.c     **** }
 1510              		.loc 1 1101 24 view .LVU404
 1511 000c B2F8E817 		ldrh	r1, [r2, #2024]
 1512              	.LVL103:
1101:src/xeq.c     **** }
 1513              		.loc 1 1101 24 view .LVU405
 1514 0010 44F20103 		movw	r3, #16385
 1515              	.LBE1441:
 1516              	.LBE1440:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1517              		.loc 1 242 5 view .LVU406
 1518 0014 0B40     		ands	r3, r3, r1
 1519 0016 B3F5804F 		cmp	r3, #16384
 1520 001a 2ED0     		beq	.L120
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1521              		.loc 1 242 19 view .LVU407
 1522 001c 8028     		cmp	r0, #128
 1523 001e 39D0     		beq	.L136
 247:src/xeq.c     **** }
 1524              		.loc 1 247 3 is_stmt 1 view .LVU408
 247:src/xeq.c     **** }
 1525              		.loc 1 247 10 is_stmt 0 view .LVU409
 1526 0020 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1527              	.LVL104:
 1528              	.L124:
 247:src/xeq.c     **** }
 1529              		.loc 1 247 10 view .LVU410
 1530 0024 2349     		ldr	r1, .L139+4
 1531              	.LBE1439:
 1532              	.LBE1438:
 1533              		.loc 1 5138 7 view .LVU411
 1534 0026 0138     		subs	r0, r0, #1
 1535              	.LVL105:
 1536              		.loc 1 5138 7 view .LVU412
 1537 0028 2501     		lsls	r5, r4, #4
ARM GAS  /tmp/ccaPnj5t.s 			page 123


 1538              	.LVL106:
 1539              	.L125:
5139:src/xeq.c     **** 	}
5140:src/xeq.c     **** 	else if (argcmds[cmd].local) {
5141:src/xeq.c     **** 		// Range checking for local registers
5142:src/xeq.c     **** 		lim = NUMREG - 1 + local_regs_rarg((enum rarg) cmd);
5143:src/xeq.c     **** 	}
5144:src/xeq.c     **** 	if (argcmds[cmd].cmplx) {
 1540              		.loc 1 5144 2 is_stmt 1 view .LVU413
 1541              		.loc 1 5144 18 is_stmt 0 view .LVU414
 1542 002a 2944     		add	r1, r1, r5
 1543 002c 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
 1544              		.loc 1 5144 5 view .LVU415
 1545 002e D906     		lsls	r1, r3, #27
 1546 0030 10D5     		bpl	.L126
 1547              	.L137:
5145:src/xeq.c     **** 		// one short of the last avialable register for complex access
5146:src/xeq.c     **** 		--lim;
 1548              		.loc 1 5146 3 is_stmt 1 view .LVU416
 1549 0032 0138     		subs	r0, r0, #1
 1550              	.LVL107:
 1551              	.L118:
5147:src/xeq.c     **** 	}
5148:src/xeq.c     **** 	else if (cmd == RARG_STOSTK || cmd == RARG_RCLSTK) {
5149:src/xeq.c     **** 		// avoid stack clash error in these commands
5150:src/xeq.c     **** 		lim -= stack_size() - 1;
5151:src/xeq.c     **** 	}
5152:src/xeq.c     **** 	return lim;
5153:src/xeq.c     **** }
 1552              		.loc 1 5153 1 is_stmt 0 view .LVU417
 1553 0034 38BD     		pop	{r3, r4, r5, pc}
 1554              	.LVL108:
 1555              	.L119:
5140:src/xeq.c     **** 		// Range checking for local registers
 1556              		.loc 1 5140 7 is_stmt 1 view .LVU418
5140:src/xeq.c     **** 		// Range checking for local registers
 1557              		.loc 1 5140 23 is_stmt 0 view .LVU419
 1558 0036 1F49     		ldr	r1, .L139+4
 1559              	.LVL109:
5140:src/xeq.c     **** 		// Range checking for local registers
 1560              		.loc 1 5140 23 view .LVU420
 1561 0038 01EB0013 		add	r3, r1, r0, lsl #4
 1562 003c 0501     		lsls	r5, r0, #4
 1563 003e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
5140:src/xeq.c     **** 		// Range checking for local registers
 1564              		.loc 1 5140 10 view .LVU421
 1565 0040 1807     		lsls	r0, r3, #28
 1566              	.LVL110:
5140:src/xeq.c     **** 		// Range checking for local registers
 1567              		.loc 1 5140 10 view .LVU422
 1568 0042 18D5     		bpl	.L130
5142:src/xeq.c     **** 	}
 1569              		.loc 1 5142 3 is_stmt 1 view .LVU423
5142:src/xeq.c     **** 	}
 1570              		.loc 1 5142 22 is_stmt 0 view .LVU424
 1571 0044 E0B2     		uxtb	r0, r4
 1572 0046 FFF7FEFF 		bl	local_regs_rarg
ARM GAS  /tmp/ccaPnj5t.s 			page 124


 1573              	.LVL111:
5144:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1574              		.loc 1 5144 18 view .LVU425
 1575 004a 2944     		add	r1, r1, r5
5142:src/xeq.c     **** 	}
 1576              		.loc 1 5142 20 view .LVU426
 1577 004c 6F30     		adds	r0, r0, #111
 1578              	.LVL112:
5144:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1579              		.loc 1 5144 2 is_stmt 1 view .LVU427
5144:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1580              		.loc 1 5144 18 is_stmt 0 view .LVU428
 1581 004e 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
5144:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1582              		.loc 1 5144 5 view .LVU429
 1583 0050 D906     		lsls	r1, r3, #27
 1584 0052 EED4     		bmi	.L137
 1585              	.L126:
5148:src/xeq.c     **** 		// avoid stack clash error in these commands
 1586              		.loc 1 5148 7 is_stmt 1 view .LVU430
5148:src/xeq.c     **** 		// avoid stack clash error in these commands
 1587              		.loc 1 5148 30 is_stmt 0 view .LVU431
 1588 0054 223C     		subs	r4, r4, #34
 1589              	.LVL113:
5148:src/xeq.c     **** 		// avoid stack clash error in these commands
 1590              		.loc 1 5148 10 view .LVU432
 1591 0056 012C     		cmp	r4, #1
 1592 0058 ECD8     		bhi	.L118
5150:src/xeq.c     **** 	}
 1593              		.loc 1 5150 3 is_stmt 1 view .LVU433
 1594              	.LBB1446:
 1595              	.LBI1446:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 1596              		.loc 1 706 5 view .LVU434
 1597              	.LBB1447:
 707:src/xeq.c     **** 		return 4;
 1598              		.loc 1 707 2 view .LVU435
 707:src/xeq.c     **** 		return 4;
 1599              		.loc 1 707 8 is_stmt 0 view .LVU436
 1600 005a 154B     		ldr	r3, .L139
 1601 005c 1B68     		ldr	r3, [r3]
 707:src/xeq.c     **** 		return 4;
 1602              		.loc 1 707 6 view .LVU437
 1603 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 1604              		.loc 1 707 5 view .LVU438
 1605 0062 1207     		lsls	r2, r2, #28
 1606 0064 14D5     		bpl	.L131
 1607              	.LBB1448:
 1608              	.LBI1448:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 1609              		.loc 1 185 5 is_stmt 1 view .LVU439
 1610              	.LBB1449:
 186:src/xeq.c     **** }
 1611              		.loc 1 186 2 view .LVU440
 186:src/xeq.c     **** }
 1612              		.loc 1 186 9 is_stmt 0 view .LVU441
ARM GAS  /tmp/ccaPnj5t.s 			page 125


 1613 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 1614              	.LBE1449:
 1615              	.LBE1448:
 707:src/xeq.c     **** 		return 4;
 1616              		.loc 1 707 27 view .LVU442
 1617 006a 9B0B     		lsrs	r3, r3, #14
 1618 006c 032B     		cmp	r3, #3
 1619 006e 16D0     		beq	.L138
 1620 0070 0723     		movs	r3, #7
 1621              	.L128:
 1622              	.LBE1447:
 1623              	.LBE1446:
5150:src/xeq.c     **** 	}
 1624              		.loc 1 5150 7 view .LVU443
 1625 0072 C01A     		subs	r0, r0, r3
 1626              	.LVL114:
5152:src/xeq.c     **** }
 1627              		.loc 1 5152 2 is_stmt 1 view .LVU444
 1628              		.loc 1 5153 1 is_stmt 0 view .LVU445
 1629 0074 38BD     		pop	{r3, r4, r5, pc}
 1630              	.LVL115:
 1631              	.L130:
5134:src/xeq.c     **** 
 1632              		.loc 1 5134 15 view .LVU446
 1633 0076 7020     		movs	r0, #112
 1634 0078 D7E7     		b	.L125
 1635              	.LVL116:
 1636              	.L120:
 1637              	.LBB1452:
 1638              	.LBB1444:
 1639              	.LBB1442:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1640              		.loc 1 243 3 is_stmt 1 view .LVU447
 244:src/xeq.c     **** 	}
 1641              		.loc 1 244 26 is_stmt 0 view .LVU448
 1642 007a A4F17E03 		sub	r3, r4, #126
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1643              		.loc 1 243 24 view .LVU449
 1644 007e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1645              	.LVL117:
 244:src/xeq.c     **** 	}
 1646              		.loc 1 244 56 view .LVU450
 1647 0082 DBB2     		uxtb	r3, r3
 1648 0084 012B     		cmp	r3, #1
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1649              		.loc 1 243 13 view .LVU451
 1650 0086 A0F10C00 		sub	r0, r0, #12
 1651              	.LVL118:
 244:src/xeq.c     **** 	}
 1652              		.loc 1 244 3 is_stmt 1 view .LVU452
 244:src/xeq.c     **** 	}
 1653              		.loc 1 244 56 is_stmt 0 view .LVU453
 1654 008a CBD9     		bls	.L124
 244:src/xeq.c     **** 	}
 1655              		.loc 1 244 67 view .LVU454
 1656 008c 4010     		asrs	r0, r0, #1
 1657              	.LVL119:
ARM GAS  /tmp/ccaPnj5t.s 			page 126


 244:src/xeq.c     **** 	}
 1658              		.loc 1 244 67 view .LVU455
 1659 008e C9E7     		b	.L124
 1660              	.LVL120:
 1661              	.L131:
 244:src/xeq.c     **** 	}
 1662              		.loc 1 244 67 view .LVU456
 1663              	.LBE1442:
 1664              	.LBE1444:
 1665              	.LBE1452:
 1666              	.LBB1453:
 1667              	.LBB1450:
 1668 0090 0323     		movs	r3, #3
 1669 0092 EEE7     		b	.L128
 1670              	.LVL121:
 1671              	.L136:
 244:src/xeq.c     **** 	}
 1672              		.loc 1 244 67 view .LVU457
 1673              	.LBE1450:
 1674              	.LBE1453:
 1675              	.LBB1454:
 1676              	.LBB1445:
 1677              	.LBB1443:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1678              		.loc 1 243 3 is_stmt 1 view .LVU458
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1679              		.loc 1 243 24 is_stmt 0 view .LVU459
 1680 0094 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1681              	.LVL122:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1682              		.loc 1 243 13 view .LVU460
 1683 0098 0C38     		subs	r0, r0, #12
 1684              	.LVL123:
 244:src/xeq.c     **** 	}
 1685              		.loc 1 244 3 is_stmt 1 view .LVU461
 244:src/xeq.c     **** 	}
 1686              		.loc 1 244 67 is_stmt 0 view .LVU462
 1687 009a 4010     		asrs	r0, r0, #1
 1688              	.LVL124:
 244:src/xeq.c     **** 	}
 1689              		.loc 1 244 67 view .LVU463
 1690 009c C2E7     		b	.L124
 1691              	.LVL125:
 1692              	.L138:
 244:src/xeq.c     **** 	}
 1693              		.loc 1 244 67 view .LVU464
 1694              	.LBE1443:
 1695              	.LBE1445:
 1696              	.LBE1454:
 1697              	.LBB1455:
 1698              	.LBB1451:
 707:src/xeq.c     **** 		return 4;
 1699              		.loc 1 707 44 view .LVU465
 1700 009e 064B     		ldr	r3, .L139+8
 707:src/xeq.c     **** 		return 4;
 1701              		.loc 1 707 41 view .LVU466
 1702 00a0 93F90130 		ldrsb	r3, [r3, #1]
ARM GAS  /tmp/ccaPnj5t.s 			page 127


 1703 00a4 002B     		cmp	r3, #0
 1704 00a6 B4BF     		ite	lt
 1705 00a8 0723     		movlt	r3, #7
 1706 00aa 0323     		movge	r3, #3
 1707 00ac E1E7     		b	.L128
 1708              	.L140:
 1709 00ae 00BF     		.align	2
 1710              	.L139:
 1711 00b0 00000000 		.word	main_ram
 1712 00b4 00000000 		.word	argcmds
 1713 00b8 00000000 		.word	XromParams
 1714              	.LBE1451:
 1715              	.LBE1455:
 1716              		.cfi_endproc
 1717              	.LFE246:
 1719              		.section	.text.local_regs,"ax",%progbits
 1720              		.align	1
 1721              		.p2align 2,,3
 1722              		.global	local_regs
 1723              		.syntax unified
 1724              		.thumb
 1725              		.thumb_func
 1726              		.fpu fpv4-sp-d16
 1728              	local_regs:
 1729              	.LFB7:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 1730              		.loc 1 233 22 is_stmt 1 view -0
 1731              		.cfi_startproc
 1732              		@ args = 0, pretend = 0, frame = 0
 1733              		@ frame_needed = 0, uses_anonymous_args = 0
 1734              		@ link register save eliminated.
 234:src/xeq.c     **** }
 1735              		.loc 1 234 2 view .LVU468
 1736              	.LVL126:
 1737              	.LBB1456:
 1738              	.LBI1456:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1739              		.loc 1 225 5 view .LVU469
 1740              	.LBB1457:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1741              		.loc 1 226 2 view .LVU470
 1742              	.LBB1458:
 1743              	.LBI1458:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1744              		.loc 1 1100 5 view .LVU471
 1745              	.LBB1459:
1101:src/xeq.c     **** }
 1746              		.loc 1 1101 2 view .LVU472
1101:src/xeq.c     **** }
 1747              		.loc 1 1101 12 is_stmt 0 view .LVU473
 1748 0000 0D4B     		ldr	r3, .L145
 1749 0002 1B68     		ldr	r3, [r3]
 1750              	.LVL127:
1101:src/xeq.c     **** }
 1751              		.loc 1 1101 12 view .LVU474
 1752              	.LBE1459:
 1753              	.LBE1458:
ARM GAS  /tmp/ccaPnj5t.s 			page 128


 227:src/xeq.c     **** }
 1754              		.loc 1 227 2 is_stmt 1 view .LVU475
 1755              	.LBB1462:
 1756              	.LBI1462:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1757              		.loc 1 217 5 view .LVU476
 1758              	.LBB1463:
 218:src/xeq.c     **** }
 1759              		.loc 1 218 2 view .LVU477
 218:src/xeq.c     **** }
 1760              		.loc 1 218 9 is_stmt 0 view .LVU478
 1761 0004 B3F9DE27 		ldrsh	r2, [r3, #2014]
 218:src/xeq.c     **** }
 1762              		.loc 1 218 57 view .LVU479
 1763 0008 002A     		cmp	r2, #0
 1764 000a 01DB     		blt	.L144
 1765 000c 0020     		movs	r0, #0
 1766              	.LVL128:
 218:src/xeq.c     **** }
 1767              		.loc 1 218 57 view .LVU480
 1768              	.LBE1463:
 1769              	.LBE1462:
 1770              	.LBE1457:
 1771              	.LBE1456:
 235:src/xeq.c     **** 
 1772              		.loc 1 235 1 view .LVU481
 1773 000e 7047     		bx	lr
 1774              	.LVL129:
 1775              	.L144:
 1776              	.LBB1475:
 1777              	.LBB1474:
 1778              	.LBB1468:
 1779              	.LBB1460:
1101:src/xeq.c     **** }
 1780              		.loc 1 1101 24 view .LVU482
 1781 0010 B3F8E807 		ldrh	r0, [r3, #2024]
 1782              	.LBE1460:
 1783              	.LBE1468:
 1784              	.LBB1469:
 1785              	.LBB1464:
 218:src/xeq.c     **** }
 1786              		.loc 1 218 25 view .LVU483
 1787 0014 0949     		ldr	r1, .L145+4
 1788              	.LBE1464:
 1789              	.LBE1469:
 1790              	.LBB1470:
 1791              	.LBB1461:
1101:src/xeq.c     **** }
 1792              		.loc 1 1101 24 view .LVU484
 1793 0016 44F20103 		movw	r3, #16385
 1794              	.LVL130:
1101:src/xeq.c     **** }
 1795              		.loc 1 1101 24 view .LVU485
 1796              	.LBE1461:
 1797              	.LBE1470:
 1798              	.LBB1471:
 1799              	.LBB1465:
ARM GAS  /tmp/ccaPnj5t.s 			page 129


 218:src/xeq.c     **** }
 1800              		.loc 1 218 25 view .LVU486
 1801 001a 0968     		ldr	r1, [r1]
 1802              	.LBE1465:
 1803              	.LBE1471:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1804              		.loc 1 226 73 view .LVU487
 1805 001c 0340     		ands	r3, r3, r0
 1806 001e A3F58043 		sub	r3, r3, #16384
 1807              	.LBB1472:
 1808              	.LBB1466:
 218:src/xeq.c     **** }
 1809              		.loc 1 218 57 view .LVU488
 1810 0022 31F81200 		ldrh	r0, [r1, r2, lsl #1]
 1811              	.LBE1466:
 1812              	.LBE1472:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1813              		.loc 1 226 73 view .LVU489
 1814 0026 B3FA83F3 		clz	r3, r3
 1815 002a 5B09     		lsrs	r3, r3, #5
 1816 002c 0233     		adds	r3, r3, #2
 1817              	.LBB1473:
 1818              	.LBB1467:
 218:src/xeq.c     **** }
 1819              		.loc 1 218 57 view .LVU490
 1820 002e C0F30B00 		ubfx	r0, r0, #0, #12
 1821 0032 1841     		asrs	r0, r0, r3
 1822 0034 7047     		bx	lr
 1823              	.L146:
 1824 0036 00BF     		.align	2
 1825              	.L145:
 1826 0038 00000000 		.word	main_ram
 1827 003c 00000000 		.word	RetStk
 1828              	.LBE1467:
 1829              	.LBE1473:
 1830              	.LBE1474:
 1831              	.LBE1475:
 1832              		.cfi_endproc
 1833              	.LFE7:
 1835              		.section	.text.global_regs_rarg,"ax",%progbits
 1836              		.align	1
 1837              		.p2align 2,,3
 1838              		.global	global_regs_rarg
 1839              		.syntax unified
 1840              		.thumb
 1841              		.thumb_func
 1842              		.fpu fpv4-sp-d16
 1844              	global_regs_rarg:
 1845              	.LVL131:
 1846              	.LFB8:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1847              		.loc 1 241 45 is_stmt 1 view -0
 1848              		.cfi_startproc
 1849              		@ args = 0, pretend = 0, frame = 0
 1850              		@ frame_needed = 0, uses_anonymous_args = 0
 1851              		@ link register save eliminated.
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
ARM GAS  /tmp/ccaPnj5t.s 			page 130


 1852              		.loc 1 242 2 view .LVU492
 1853              	.LBB1476:
 1854              	.LBI1476:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1855              		.loc 1 1100 5 view .LVU493
 1856              	.LBB1477:
1101:src/xeq.c     **** }
 1857              		.loc 1 1101 2 view .LVU494
1101:src/xeq.c     **** }
 1858              		.loc 1 1101 12 is_stmt 0 view .LVU495
 1859 0000 0E4B     		ldr	r3, .L156
 1860 0002 1A68     		ldr	r2, [r3]
1101:src/xeq.c     **** }
 1861              		.loc 1 1101 24 view .LVU496
 1862 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1863 0008 44F20103 		movw	r3, #16385
 1864              	.LBE1477:
 1865              	.LBE1476:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1866              		.loc 1 242 5 view .LVU497
 1867 000c 0B40     		ands	r3, r3, r1
 1868 000e B3F5804F 		cmp	r3, #16384
 1869 0012 09D0     		beq	.L148
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1870              		.loc 1 242 19 discriminator 1 view .LVU498
 1871 0014 8028     		cmp	r0, #128
 1872 0016 02D0     		beq	.L155
 247:src/xeq.c     **** }
 1873              		.loc 1 247 3 is_stmt 1 view .LVU499
 247:src/xeq.c     **** }
 1874              		.loc 1 247 10 is_stmt 0 view .LVU500
 1875 0018 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1876              	.LVL132:
 247:src/xeq.c     **** }
 1877              		.loc 1 247 10 view .LVU501
 1878 001c 7047     		bx	lr
 1879              	.LVL133:
 1880              	.L155:
 1881              	.LBB1478:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1882              		.loc 1 243 3 is_stmt 1 view .LVU502
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1883              		.loc 1 243 24 is_stmt 0 view .LVU503
 1884 001e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1885              	.LVL134:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1886              		.loc 1 243 13 view .LVU504
 1887 0022 0C38     		subs	r0, r0, #12
 1888              	.LVL135:
 244:src/xeq.c     **** 	}
 1889              		.loc 1 244 3 is_stmt 1 view .LVU505
 1890              	.L153:
 244:src/xeq.c     **** 	}
 1891              		.loc 1 244 67 is_stmt 0 discriminator 1 view .LVU506
 1892 0024 4010     		asrs	r0, r0, #1
 1893              	.LVL136:
 244:src/xeq.c     **** 	}
ARM GAS  /tmp/ccaPnj5t.s 			page 131


 1894              		.loc 1 244 67 discriminator 1 view .LVU507
 1895 0026 7047     		bx	lr
 1896              	.LVL137:
 1897              	.L148:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1898              		.loc 1 243 3 is_stmt 1 view .LVU508
 244:src/xeq.c     **** 	}
 1899              		.loc 1 244 56 is_stmt 0 view .LVU509
 1900 0028 A0F17E03 		sub	r3, r0, #126
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1901              		.loc 1 243 24 view .LVU510
 1902 002c 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 244:src/xeq.c     **** 	}
 1903              		.loc 1 244 56 view .LVU511
 1904 0030 012B     		cmp	r3, #1
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1905              		.loc 1 243 13 view .LVU512
 1906 0032 A2F10C00 		sub	r0, r2, #12
 1907              	.LVL138:
 244:src/xeq.c     **** 	}
 1908              		.loc 1 244 3 is_stmt 1 view .LVU513
 244:src/xeq.c     **** 	}
 1909              		.loc 1 244 56 is_stmt 0 view .LVU514
 1910 0036 F5D8     		bhi	.L153
 1911              	.LBE1478:
 248:src/xeq.c     **** 
 1912              		.loc 1 248 1 view .LVU515
 1913 0038 7047     		bx	lr
 1914              	.L157:
 1915 003a 00BF     		.align	2
 1916              	.L156:
 1917 003c 00000000 		.word	main_ram
 1918              		.cfi_endproc
 1919              	.LFE8:
 1921              		.section	.text.global_regs,"ax",%progbits
 1922              		.align	1
 1923              		.p2align 2,,3
 1924              		.global	global_regs
 1925              		.syntax unified
 1926              		.thumb
 1927              		.thumb_func
 1928              		.fpu fpv4-sp-d16
 1930              	global_regs:
 1931              	.LFB9:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 1932              		.loc 1 253 32 is_stmt 1 view -0
 1933              		.cfi_startproc
 1934              		@ args = 0, pretend = 0, frame = 0
 1935              		@ frame_needed = 0, uses_anonymous_args = 0
 1936              		@ link register save eliminated.
 254:src/xeq.c     **** }
 1937              		.loc 1 254 2 view .LVU517
 1938              	.LVL139:
 1939              	.LBB1479:
 1940              	.LBI1479:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1941              		.loc 1 241 14 view .LVU518
ARM GAS  /tmp/ccaPnj5t.s 			page 132


 1942              	.LBB1480:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1943              		.loc 1 242 2 view .LVU519
 1944              	.LBB1481:
 1945              	.LBI1481:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1946              		.loc 1 1100 5 view .LVU520
 1947              	.LBB1482:
1101:src/xeq.c     **** }
 1948              		.loc 1 1101 2 view .LVU521
1101:src/xeq.c     **** }
 1949              		.loc 1 1101 12 is_stmt 0 view .LVU522
 1950 0000 074B     		ldr	r3, .L161
 1951 0002 1A68     		ldr	r2, [r3]
1101:src/xeq.c     **** }
 1952              		.loc 1 1101 24 view .LVU523
 1953 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1954              	.LBE1482:
 1955              	.LBE1481:
 1956              	.LBB1484:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1957              		.loc 1 243 24 view .LVU524
 1958 0008 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1959              	.LBE1484:
 1960              	.LBB1485:
 1961              	.LBB1483:
1101:src/xeq.c     **** }
 1962              		.loc 1 1101 24 view .LVU525
 1963 000c 44F20103 		movw	r3, #16385
 1964              	.LBE1483:
 1965              	.LBE1485:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1966              		.loc 1 242 5 view .LVU526
 1967 0010 0B40     		ands	r3, r3, r1
 1968 0012 B3F5804F 		cmp	r3, #16384
 1969              	.LBB1486:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1970              		.loc 1 243 3 is_stmt 1 view .LVU527
 244:src/xeq.c     **** 	}
 1971              		.loc 1 244 3 view .LVU528
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1972              		.loc 1 243 13 is_stmt 0 view .LVU529
 1973 0016 04BF     		itt	eq
 1974 0018 0C38     		subeq	r0, r0, #12
 244:src/xeq.c     **** 	}
 1975              		.loc 1 244 67 view .LVU530
 1976 001a 4010     		asreq	r0, r0, #1
 1977              	.LBE1486:
 247:src/xeq.c     **** }
 1978              		.loc 1 247 3 is_stmt 1 view .LVU531
 1979              	.LVL140:
 247:src/xeq.c     **** }
 1980              		.loc 1 247 3 is_stmt 0 view .LVU532
 1981              	.LBE1480:
 1982              	.LBE1479:
 255:src/xeq.c     **** 
 1983              		.loc 1 255 1 view .LVU533
ARM GAS  /tmp/ccaPnj5t.s 			page 133


 1984 001c 7047     		bx	lr
 1985              	.L162:
 1986 001e 00BF     		.align	2
 1987              	.L161:
 1988 0020 00000000 		.word	main_ram
 1989              		.cfi_endproc
 1990              	.LFE9:
 1992              		.section	.text.version,"ax",%progbits
 1993              		.align	1
 1994              		.p2align 2,,3
 1995              		.global	version
 1996              		.syntax unified
 1997              		.thumb
 1998              		.thumb_func
 1999              		.fpu fpv4-sp-d16
 2001              	version:
 2002              	.LVL141:
 2003              	.LFB10:
 267:src/xeq.c     **** 	State2.version = 1;
 2004              		.loc 1 267 29 is_stmt 1 view -0
 2005              		.cfi_startproc
 2006              		@ args = 0, pretend = 0, frame = 0
 2007              		@ frame_needed = 0, uses_anonymous_args = 0
 2008              		@ link register save eliminated.
 268:src/xeq.c     **** 	if (!State2.runmode)
 2009              		.loc 1 268 2 view .LVU535
 268:src/xeq.c     **** 	if (!State2.runmode)
 2010              		.loc 1 268 17 is_stmt 0 view .LVU536
 2011 0000 054B     		ldr	r3, .L166
 2012 0002 5A7D     		ldrb	r2, [r3, #21]	@ zero_extendqisi2
 269:src/xeq.c     **** 		display();
 2013              		.loc 1 269 6 view .LVU537
 2014 0004 997D     		ldrb	r1, [r3, #22]	@ zero_extendqisi2
 268:src/xeq.c     **** 	if (!State2.runmode)
 2015              		.loc 1 268 17 view .LVU538
 2016 0006 42F01002 		orr	r2, r2, #16
 2017 000a 5A75     		strb	r2, [r3, #21]
 269:src/xeq.c     **** 		display();
 2018              		.loc 1 269 2 is_stmt 1 view .LVU539
 269:src/xeq.c     **** 		display();
 2019              		.loc 1 269 5 is_stmt 0 view .LVU540
 2020 000c 4B06     		lsls	r3, r1, #25
 2021 000e 00D5     		bpl	.L165
 271:src/xeq.c     **** 
 2022              		.loc 1 271 1 view .LVU541
 2023 0010 7047     		bx	lr
 2024              	.L165:
 270:src/xeq.c     **** }
 2025              		.loc 1 270 3 is_stmt 1 view .LVU542
 2026 0012 FFF7FEBF 		b	display
 2027              	.LVL142:
 2028              	.L167:
 270:src/xeq.c     **** }
 2029              		.loc 1 270 3 is_stmt 0 view .LVU543
 2030 0016 00BF     		.align	2
 2031              	.L166:
 2032 0018 00000000 		.word	StateWhileOn
ARM GAS  /tmp/ccaPnj5t.s 			page 134


 2033              		.cfi_endproc
 2034              	.LFE10:
 2036              		.section	.text.cmd_off,"ax",%progbits
 2037              		.align	1
 2038              		.p2align 2,,3
 2039              		.global	cmd_off
 2040              		.syntax unified
 2041              		.thumb
 2042              		.thumb_func
 2043              		.fpu fpv4-sp-d16
 2045              	cmd_off:
 2046              	.LVL143:
 2047              	.LFB11:
 273:src/xeq.c     **** 	shutdown();
 2048              		.loc 1 273 29 is_stmt 1 view -0
 2049              		.cfi_startproc
 2050              		@ args = 0, pretend = 0, frame = 0
 2051              		@ frame_needed = 0, uses_anonymous_args = 0
 2052              		@ link register save eliminated.
 274:src/xeq.c     **** }
 2053              		.loc 1 274 2 view .LVU545
 2054 0000 FFF7FEBF 		b	shutdown
 2055              	.LVL144:
 274:src/xeq.c     **** }
 2056              		.loc 1 274 2 is_stmt 0 view .LVU546
 2057              		.cfi_endproc
 2058              	.LFE11:
 2060              		.section	.text.init_RegionTab,"ax",%progbits
 2061              		.align	1
 2062              		.p2align 2,,3
 2063              		.global	init_RegionTab
 2064              		.syntax unified
 2065              		.thumb
 2066              		.thumb_func
 2067              		.fpu fpv4-sp-d16
 2069              	init_RegionTab:
 2070              	.LFB13:
 297:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 2071              		.loc 1 297 28 is_stmt 1 view -0
 2072              		.cfi_startproc
 2073              		@ args = 0, pretend = 0, frame = 0
 2074              		@ frame_needed = 0, uses_anonymous_args = 0
 2075              		@ link register save eliminated.
 298:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2076              		.loc 1 298 3 view .LVU548
 298:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2077              		.loc 1 298 30 is_stmt 0 view .LVU549
 2078 0000 0649     		ldr	r1, .L170
 299:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2079              		.loc 1 299 30 view .LVU550
 2080 0002 074A     		ldr	r2, .L170+4
 300:src/xeq.c     **** }
 2081              		.loc 1 300 30 view .LVU551
 2082 0004 074B     		ldr	r3, .L170+8
 298:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2083              		.loc 1 298 30 view .LVU552
 2084 0006 0868     		ldr	r0, [r1]
ARM GAS  /tmp/ccaPnj5t.s 			page 135


 299:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2085              		.loc 1 299 30 view .LVU553
 2086 0008 1168     		ldr	r1, [r2]
 300:src/xeq.c     **** }
 2087              		.loc 1 300 30 view .LVU554
 2088 000a 1A68     		ldr	r2, [r3]
 298:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2089              		.loc 1 298 16 view .LVU555
 2090 000c 064B     		ldr	r3, .L170+12
 298:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2091              		.loc 1 298 30 view .LVU556
 2092 000e 0430     		adds	r0, r0, #4
 299:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2093              		.loc 1 299 30 view .LVU557
 2094 0010 0431     		adds	r1, r1, #4
 300:src/xeq.c     **** }
 2095              		.loc 1 300 30 view .LVU558
 2096 0012 0432     		adds	r2, r2, #4
 299:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2097              		.loc 1 299 16 view .LVU559
 2098 0014 C3E90001 		strd	r0, r1, [r3]
 300:src/xeq.c     **** }
 2099              		.loc 1 300 3 is_stmt 1 view .LVU560
 300:src/xeq.c     **** }
 2100              		.loc 1 300 16 is_stmt 0 view .LVU561
 2101 0018 9A60     		str	r2, [r3, #8]
 301:src/xeq.c     **** #else
 2102              		.loc 1 301 1 view .LVU562
 2103 001a 7047     		bx	lr
 2104              	.L171:
 2105              		.align	2
 2106              	.L170:
 2107 001c 00000000 		.word	main_ram
 2108 0020 00000000 		.word	library_ram
 2109 0024 00000000 		.word	backup_ram
 2110 0028 00000000 		.word	.LANCHOR0
 2111              		.cfi_endproc
 2112              	.LFE13:
 2114              		.section	.text.sizeLIB,"ax",%progbits
 2115              		.align	1
 2116              		.p2align 2,,3
 2117              		.global	sizeLIB
 2118              		.syntax unified
 2119              		.thumb
 2120              		.thumb_func
 2121              		.fpu fpv4-sp-d16
 2123              	sizeLIB:
 2124              	.LVL145:
 2125              	.LFB14:
 313:src/xeq.c     **** 	if (region == REGION_XROM)
 2126              		.loc 1 313 25 is_stmt 1 view -0
 2127              		.cfi_startproc
 2128              		@ args = 0, pretend = 0, frame = 0
 2129              		@ frame_needed = 0, uses_anonymous_args = 0
 2130              		@ link register save eliminated.
 314:src/xeq.c     **** 		return xrom_size;
 2131              		.loc 1 314 2 view .LVU564
ARM GAS  /tmp/ccaPnj5t.s 			page 136


 314:src/xeq.c     **** 		return xrom_size;
 2132              		.loc 1 314 5 is_stmt 0 view .LVU565
 2133 0000 0328     		cmp	r0, #3
 2134 0002 05D0     		beq	.L175
 317:src/xeq.c     **** }
 2135              		.loc 1 317 3 is_stmt 1 view .LVU566
 317:src/xeq.c     **** }
 2136              		.loc 1 317 24 is_stmt 0 view .LVU567
 2137 0004 044B     		ldr	r3, .L176
 317:src/xeq.c     **** }
 2138              		.loc 1 317 32 view .LVU568
 2139 0006 53F82030 		ldr	r3, [r3, r0, lsl #2]
 317:src/xeq.c     **** }
 2140              		.loc 1 317 10 view .LVU569
 2141 000a 33F8020C 		ldrh	r0, [r3, #-2]
 2142              	.LVL146:
 318:src/xeq.c     **** 
 2143              		.loc 1 318 1 view .LVU570
 2144 000e 7047     		bx	lr
 2145              	.LVL147:
 2146              	.L175:
 315:src/xeq.c     **** 	else
 2147              		.loc 1 315 3 is_stmt 1 view .LVU571
 315:src/xeq.c     **** 	else
 2148              		.loc 1 315 10 is_stmt 0 view .LVU572
 2149 0010 024B     		ldr	r3, .L176+4
 2150 0012 1888     		ldrh	r0, [r3]
 2151              	.LVL148:
 315:src/xeq.c     **** 	else
 2152              		.loc 1 315 10 view .LVU573
 2153 0014 7047     		bx	lr
 2154              	.L177:
 2155 0016 00BF     		.align	2
 2156              	.L176:
 2157 0018 00000000 		.word	.LANCHOR0
 2158 001c 00000000 		.word	xrom_size
 2159              		.cfi_endproc
 2160              	.LFE14:
 2162              		.section	.text.getprog,"ax",%progbits
 2163              		.align	1
 2164              		.p2align 2,,3
 2165              		.global	getprog
 2166              		.syntax unified
 2167              		.thumb
 2168              		.thumb_func
 2169              		.fpu fpv4-sp-d16
 2171              	getprog:
 2172              	.LVL149:
 2173              	.LFB16:
 337:src/xeq.c     **** 
 2174              		.loc 1 337 33 is_stmt 1 view -0
 2175              		.cfi_startproc
 2176              		@ args = 0, pretend = 0, frame = 0
 2177              		@ frame_needed = 0, uses_anonymous_args = 0
 2178              		@ link register save eliminated.
 339:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2179              		.loc 1 339 2 view .LVU575
ARM GAS  /tmp/ccaPnj5t.s 			page 137


 340:src/xeq.c     **** 
 2180              		.loc 1 340 15 is_stmt 0 view .LVU576
 2181 0000 C0F30D02 		ubfx	r2, r0, #0, #14
 2182 0004 531E     		subs	r3, r2, #1
 339:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2183              		.loc 1 339 21 view .LVU577
 2184 0006 800B     		lsrs	r0, r0, #14
 2185              	.LVL150:
 340:src/xeq.c     **** 
 2186              		.loc 1 340 2 is_stmt 1 view .LVU578
 342:src/xeq.c     **** 		return OP_NIL | OP_END;
 2187              		.loc 1 342 2 view .LVU579
 342:src/xeq.c     **** 		return OP_NIL | OP_END;
 2188              		.loc 1 342 5 is_stmt 0 view .LVU580
 2189 0008 BAB1     		cbz	r2, .L184
 2190              	.LVL151:
 2191              	.LBB1487:
 2192              	.LBI1487:
 313:src/xeq.c     **** 	if (region == REGION_XROM)
 2193              		.loc 1 313 5 is_stmt 1 view .LVU581
 2194              	.LBB1488:
 314:src/xeq.c     **** 		return xrom_size;
 2195              		.loc 1 314 2 view .LVU582
 314:src/xeq.c     **** 		return xrom_size;
 2196              		.loc 1 314 5 is_stmt 0 view .LVU583
 2197 000a 0328     		cmp	r0, #3
 2198 000c 18D0     		beq	.L185
 317:src/xeq.c     **** }
 2199              		.loc 1 317 3 is_stmt 1 view .LVU584
 317:src/xeq.c     **** }
 2200              		.loc 1 317 24 is_stmt 0 view .LVU585
 2201 000e 0E4A     		ldr	r2, .L187
 317:src/xeq.c     **** }
 2202              		.loc 1 317 32 view .LVU586
 2203 0010 52F82020 		ldr	r2, [r2, r0, lsl #2]
 317:src/xeq.c     **** }
 2204              		.loc 1 317 10 view .LVU587
 2205 0014 32F8022C 		ldrh	r2, [r2, #-2]
 2206              	.L181:
 2207              	.LVL152:
 317:src/xeq.c     **** }
 2208              		.loc 1 317 10 view .LVU588
 2209              	.LBE1488:
 2210              	.LBE1487:
 342:src/xeq.c     **** 		return OP_NIL | OP_END;
 2211              		.loc 1 342 17 view .LVU589
 2212 0018 9342     		cmp	r3, r2
 2213 001a 0EDA     		bge	.L184
 344:src/xeq.c     **** }
 2214              		.loc 1 344 2 is_stmt 1 view .LVU590
 344:src/xeq.c     **** }
 2215              		.loc 1 344 29 is_stmt 0 view .LVU591
 2216 001c 0A4A     		ldr	r2, .L187
 344:src/xeq.c     **** }
 2217              		.loc 1 344 38 view .LVU592
 2218 001e 52F82020 		ldr	r2, [r2, r0, lsl #2]
 2219              	.LBB1490:
ARM GAS  /tmp/ccaPnj5t.s 			page 138


 2220              	.LBB1491:
 326:src/xeq.c     **** 	if ( isDBL(r) ) {
 2221              		.loc 1 326 13 view .LVU593
 2222 0022 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 2223              	.LVL153:
 327:src/xeq.c     **** 		r |= loc[1] << 16;
 2224              		.loc 1 327 5 view .LVU594
 2225 0026 00F47041 		and	r1, r0, #61440
 2226 002a B1F5704F 		cmp	r1, #61440
 2227              	.LBE1491:
 2228              	.LBE1490:
 344:src/xeq.c     **** }
 2229              		.loc 1 344 38 view .LVU595
 2230 002e 02EB4303 		add	r3, r2, r3, lsl #1
 2231              	.LVL154:
 2232              	.LBB1494:
 2233              	.LBI1490:
 324:src/xeq.c     **** {
 2234              		.loc 1 324 15 is_stmt 1 view .LVU596
 2235              	.LBB1492:
 326:src/xeq.c     **** 	if ( isDBL(r) ) {
 2236              		.loc 1 326 2 view .LVU597
 327:src/xeq.c     **** 		r |= loc[1] << 16;
 2237              		.loc 1 327 2 view .LVU598
 327:src/xeq.c     **** 		r |= loc[1] << 16;
 2238              		.loc 1 327 5 is_stmt 0 view .LVU599
 2239 0032 00D0     		beq	.L186
 2240              	.LBE1492:
 2241              	.LBE1494:
 345:src/xeq.c     **** 
 2242              		.loc 1 345 1 view .LVU600
 2243 0034 7047     		bx	lr
 2244              	.L186:
 2245              	.LBB1495:
 2246              	.LBB1493:
 328:src/xeq.c     **** 	}
 2247              		.loc 1 328 3 is_stmt 1 view .LVU601
 328:src/xeq.c     **** 	}
 2248              		.loc 1 328 5 is_stmt 0 view .LVU602
 2249 0036 1868     		ldr	r0, [r3]	@ unaligned
 2250              	.LVL155:
 328:src/xeq.c     **** 	}
 2251              		.loc 1 328 5 view .LVU603
 2252 0038 7047     		bx	lr
 2253              	.LVL156:
 2254              	.L184:
 328:src/xeq.c     **** 	}
 2255              		.loc 1 328 5 view .LVU604
 2256              	.LBE1493:
 2257              	.LBE1495:
 343:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 2258              		.loc 1 343 10 view .LVU605
 2259 003a 4FF49D70 		mov	r0, #314
 2260              	.LVL157:
 345:src/xeq.c     **** 
 2261              		.loc 1 345 1 view .LVU606
 2262 003e 7047     		bx	lr
ARM GAS  /tmp/ccaPnj5t.s 			page 139


 2263              	.LVL158:
 2264              	.L185:
 2265              	.LBB1496:
 2266              	.LBB1489:
 315:src/xeq.c     **** 	else
 2267              		.loc 1 315 3 is_stmt 1 view .LVU607
 315:src/xeq.c     **** 	else
 2268              		.loc 1 315 10 is_stmt 0 view .LVU608
 2269 0040 024A     		ldr	r2, .L187+4
 2270 0042 1288     		ldrh	r2, [r2]
 2271 0044 E8E7     		b	.L181
 2272              	.L188:
 2273 0046 00BF     		.align	2
 2274              	.L187:
 2275 0048 00000000 		.word	.LANCHOR0
 2276 004c 00000000 		.word	xrom_size
 2277              	.LBE1489:
 2278              	.LBE1496:
 2279              		.cfi_endproc
 2280              	.LFE16:
 2282              		.section	.text.get_current_prog,"ax",%progbits
 2283              		.align	1
 2284              		.p2align 2,,3
 2285              		.global	get_current_prog
 2286              		.syntax unified
 2287              		.thumb
 2288              		.thumb_func
 2289              		.fpu fpv4-sp-d16
 2291              	get_current_prog:
 2292              	.LFB17:
 351:src/xeq.c     **** 
 2293              		.loc 1 351 40 is_stmt 1 view -0
 2294              		.cfi_startproc
 2295              		@ args = 0, pretend = 0, frame = 0
 2296              		@ frame_needed = 0, uses_anonymous_args = 0
 2297              		@ link register save eliminated.
 353:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2298              		.loc 1 353 2 view .LVU610
 353:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2299              		.loc 1 353 21 is_stmt 0 view .LVU611
 2300 0000 074B     		ldr	r3, .L190
 354:src/xeq.c     **** }
 2301              		.loc 1 354 18 view .LVU612
 2302 0002 084A     		ldr	r2, .L190+4
 353:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2303              		.loc 1 353 21 view .LVU613
 2304 0004 1B68     		ldr	r3, [r3]
 2305 0006 B3F8EC37 		ldrh	r3, [r3, #2028]
 2306              	.LVL159:
 354:src/xeq.c     **** }
 2307              		.loc 1 354 2 is_stmt 1 view .LVU614
 353:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2308              		.loc 1 353 12 is_stmt 0 view .LVU615
 2309 000a 990B     		lsrs	r1, r3, #14
 354:src/xeq.c     **** }
 2310              		.loc 1 354 27 view .LVU616
 2311 000c C3F30D03 		ubfx	r3, r3, #0, #14
ARM GAS  /tmp/ccaPnj5t.s 			page 140


 2312              	.LVL160:
 354:src/xeq.c     **** }
 2313              		.loc 1 354 27 view .LVU617
 2314 0010 52F82100 		ldr	r0, [r2, r1, lsl #2]
 2315 0014 03F10043 		add	r3, r3, #-2147483648
 2316 0018 013B     		subs	r3, r3, #1
 355:src/xeq.c     **** 
 2317              		.loc 1 355 1 view .LVU618
 2318 001a 00EB4300 		add	r0, r0, r3, lsl #1
 2319 001e 7047     		bx	lr
 2320              	.L191:
 2321              		.align	2
 2322              	.L190:
 2323 0020 00000000 		.word	main_ram
 2324 0024 00000000 		.word	.LANCHOR0
 2325              		.cfi_endproc
 2326              	.LFE17:
 2328              		.section	.text.do_inc,"ax",%progbits
 2329              		.align	1
 2330              		.p2align 2,,3
 2331              		.global	do_inc
 2332              		.syntax unified
 2333              		.thumb
 2334              		.thumb_func
 2335              		.fpu fpv4-sp-d16
 2337              	do_inc:
 2338              	.LVL161:
 2339              	.LFB20:
 412:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2340              		.loc 1 412 54 is_stmt 1 view -0
 2341              		.cfi_startproc
 2342              		@ args = 0, pretend = 0, frame = 16
 2343              		@ frame_needed = 0, uses_anonymous_args = 0
 413:src/xeq.c     **** 	unsigned short int top = 0;
 2344              		.loc 1 413 2 view .LVU620
 412:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2345              		.loc 1 412 54 is_stmt 0 view .LVU621
 2346 0000 70B5     		push	{r4, r5, r6, lr}
 2347              		.cfi_def_cfa_offset 16
 2348              		.cfi_offset 4, -16
 2349              		.cfi_offset 5, -12
 2350              		.cfi_offset 6, -8
 2351              		.cfi_offset 14, -4
 2352 0002 84B0     		sub	sp, sp, #16
 2353              		.cfi_def_cfa_offset 32
 412:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2354              		.loc 1 412 54 view .LVU622
 2355 0004 0546     		mov	r5, r0
 2356 0006 0191     		str	r1, [sp, #4]
 413:src/xeq.c     **** 	unsigned short int top = 0;
 2357              		.loc 1 413 42 view .LVU623
 2358 0008 FFF7FEFF 		bl	getprog
 2359              	.LVL162:
 417:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2360              		.loc 1 417 12 view .LVU624
 2361 000c 0D4E     		ldr	r6, .L196
 418:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 141


 2362              		.loc 1 418 11 view .LVU625
 2363 000e 0199     		ldr	r1, [sp, #4]
 413:src/xeq.c     **** 	unsigned short int top = 0;
 2364              		.loc 1 413 42 view .LVU626
 2365 0010 00F47040 		and	r0, r0, #61440
 413:src/xeq.c     **** 	unsigned short int top = 0;
 2366              		.loc 1 413 27 view .LVU627
 2367 0014 6C1C     		adds	r4, r5, #1
 414:src/xeq.c     **** 	unsigned short int bottom = 0;
 2368              		.loc 1 414 21 view .LVU628
 2369 0016 0023     		movs	r3, #0
 413:src/xeq.c     **** 	unsigned short int top = 0;
 2370              		.loc 1 413 27 view .LVU629
 2371 0018 B0F5704F 		cmp	r0, #61440
 2372 001c 08BF     		it	eq
 2373 001e 0134     		addeq	r4, r4, #1
 418:src/xeq.c     **** 
 2374              		.loc 1 418 11 view .LVU630
 2375 0020 0DF10E02 		add	r2, sp, #14
 2376 0024 2846     		mov	r0, r5
 417:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2377              		.loc 1 417 12 view .LVU631
 2378 0026 3360     		str	r3, [r6]
 414:src/xeq.c     **** 	unsigned short int bottom = 0;
 2379              		.loc 1 414 21 view .LVU632
 2380 0028 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 418:src/xeq.c     **** 
 2381              		.loc 1 418 11 view .LVU633
 2382 002c FFF7FEFF 		bl	find_section_bounds
 2383              	.LVL163:
 413:src/xeq.c     **** 	unsigned short int top = 0;
 2384              		.loc 1 413 27 view .LVU634
 2385 0030 A4B2     		uxth	r4, r4
 2386              	.LVL164:
 414:src/xeq.c     **** 	unsigned short int bottom = 0;
 2387              		.loc 1 414 2 is_stmt 1 view .LVU635
 415:src/xeq.c     **** 
 2388              		.loc 1 415 2 view .LVU636
 417:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2389              		.loc 1 417 2 view .LVU637
 418:src/xeq.c     **** 
 2390              		.loc 1 418 2 view .LVU638
 420:src/xeq.c     **** 		PcWrapped = 1;
 2391              		.loc 1 420 2 view .LVU639
 420:src/xeq.c     **** 		PcWrapped = 1;
 2392              		.loc 1 420 5 is_stmt 0 view .LVU640
 2393 0032 8442     		cmp	r4, r0
 421:src/xeq.c     **** 		return top;
 2394              		.loc 1 421 3 is_stmt 1 view .LVU641
 422:src/xeq.c     **** 	}
 2395              		.loc 1 422 10 is_stmt 0 view .LVU642
 2396 0034 85BF     		ittet	hi
 2397 0036 BDF80E00 		ldrhhi	r0, [sp, #14]
 2398              	.LVL165:
 421:src/xeq.c     **** 		return top;
 2399              		.loc 1 421 13 view .LVU643
 2400 003a 0123     		movhi	r3, #1
ARM GAS  /tmp/ccaPnj5t.s 			page 142


 424:src/xeq.c     **** }
 2401              		.loc 1 424 9 view .LVU644
 2402 003c 2046     		movls	r0, r4
 421:src/xeq.c     **** 		return top;
 2403              		.loc 1 421 13 view .LVU645
 2404 003e 3360     		strhi	r3, [r6]
 422:src/xeq.c     **** 	}
 2405              		.loc 1 422 3 is_stmt 1 view .LVU646
 424:src/xeq.c     **** }
 2406              		.loc 1 424 2 view .LVU647
 425:src/xeq.c     **** 
 2407              		.loc 1 425 1 is_stmt 0 view .LVU648
 2408 0040 04B0     		add	sp, sp, #16
 2409              		.cfi_def_cfa_offset 16
 2410              		@ sp needed
 2411 0042 70BD     		pop	{r4, r5, r6, pc}
 2412              	.LVL166:
 2413              	.L197:
 425:src/xeq.c     **** 
 2414              		.loc 1 425 1 view .LVU649
 2415              		.align	2
 2416              	.L196:
 2417 0044 00000000 		.word	PcWrapped
 2418              		.cfi_endproc
 2419              	.LFE20:
 2421              		.section	.text.user_pc.part.0,"ax",%progbits
 2422              		.align	1
 2423              		.p2align 2,,3
 2424              		.syntax unified
 2425              		.thumb
 2426              		.thumb_func
 2427              		.fpu fpv4-sp-d16
 2429              	user_pc.part.0:
 2430              	.LVL167:
 2431              	.LFB274:
 488:src/xeq.c     **** 	unsigned int n = 1;
 2432              		.loc 1 488 14 is_stmt 1 view -0
 2433              		.cfi_startproc
 2434              		@ args = 0, pretend = 0, frame = 0
 2435              		@ frame_needed = 0, uses_anonymous_args = 0
 499:src/xeq.c     **** 	while (base < pc) {
 2436              		.loc 1 499 2 view .LVU651
 499:src/xeq.c     **** 	while (base < pc) {
 2437              		.loc 1 499 9 is_stmt 0 view .LVU652
 2438 0000 20F47F53 		bic	r3, r0, #16320
 2439 0004 23F03F03 		bic	r3, r3, #63
 488:src/xeq.c     **** 	unsigned int n = 1;
 2440              		.loc 1 488 14 view .LVU653
 2441 0008 70B5     		push	{r4, r5, r6, lr}
 2442              		.cfi_def_cfa_offset 16
 2443              		.cfi_offset 4, -16
 2444              		.cfi_offset 5, -12
 2445              		.cfi_offset 6, -8
 2446              		.cfi_offset 14, -4
 488:src/xeq.c     **** 	unsigned int n = 1;
 2447              		.loc 1 488 14 view .LVU654
 2448 000a 0546     		mov	r5, r0
ARM GAS  /tmp/ccaPnj5t.s 			page 143


 499:src/xeq.c     **** 	while (base < pc) {
 2449              		.loc 1 499 7 view .LVU655
 2450 000c 581C     		adds	r0, r3, #1
 2451              	.LVL168:
 500:src/xeq.c     **** 		base = do_inc(base, 0);
 2452              		.loc 1 500 2 is_stmt 1 view .LVU656
 500:src/xeq.c     **** 		base = do_inc(base, 0);
 2453              		.loc 1 500 8 view .LVU657
 2454 000e 8542     		cmp	r5, r0
 2455 0010 0ED9     		bls	.L201
 2456 0012 084E     		ldr	r6, .L205
 489:src/xeq.c     **** 	unsigned int base;
 2457              		.loc 1 489 15 is_stmt 0 view .LVU658
 2458 0014 0124     		movs	r4, #1
 2459 0016 03E0     		b	.L200
 2460              	.LVL169:
 2461              	.L204:
 500:src/xeq.c     **** 		base = do_inc(base, 0);
 2462              		.loc 1 500 8 view .LVU659
 2463 0018 8542     		cmp	r5, r0
 504:src/xeq.c     **** 	}
 2464              		.loc 1 504 3 view .LVU660
 2465 001a 04F10104 		add	r4, r4, #1
 2466              	.LVL170:
 500:src/xeq.c     **** 		base = do_inc(base, 0);
 2467              		.loc 1 500 8 is_stmt 1 view .LVU661
 2468 001e 05D9     		bls	.L198
 2469              	.LVL171:
 2470              	.L200:
 501:src/xeq.c     **** 		if (PcWrapped)
 2471              		.loc 1 501 3 view .LVU662
 501:src/xeq.c     **** 		if (PcWrapped)
 2472              		.loc 1 501 10 is_stmt 0 view .LVU663
 2473 0020 0021     		movs	r1, #0
 2474 0022 FFF7FEFF 		bl	do_inc
 2475              	.LVL172:
 504:src/xeq.c     **** 	}
 2476              		.loc 1 504 3 is_stmt 1 view .LVU664
 502:src/xeq.c     **** 			return n;
 2477              		.loc 1 502 6 is_stmt 0 view .LVU665
 2478 0026 3368     		ldr	r3, [r6]
 2479              	.LVL173:
 502:src/xeq.c     **** 			return n;
 2480              		.loc 1 502 3 is_stmt 1 view .LVU666
 502:src/xeq.c     **** 			return n;
 2481              		.loc 1 502 6 is_stmt 0 view .LVU667
 2482 0028 002B     		cmp	r3, #0
 2483 002a F5D0     		beq	.L204
 2484              	.LVL174:
 2485              	.L198:
 507:src/xeq.c     **** 
 2486              		.loc 1 507 1 view .LVU668
 2487 002c 2046     		mov	r0, r4
 2488              	.LVL175:
 507:src/xeq.c     **** 
 2489              		.loc 1 507 1 view .LVU669
 2490 002e 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccaPnj5t.s 			page 144


 2491              	.LVL176:
 2492              	.L201:
 489:src/xeq.c     **** 	unsigned int base;
 2493              		.loc 1 489 15 view .LVU670
 2494 0030 0124     		movs	r4, #1
 2495 0032 FBE7     		b	.L198
 2496              	.L206:
 2497              		.align	2
 2498              	.L205:
 2499 0034 00000000 		.word	PcWrapped
 2500              		.cfi_endproc
 2501              	.LFE274:
 2503              		.section	.rodata.print_step.str1.4,"aMS",%progbits,1
 2504              		.align	2
 2505              	.LC0:
 2506 0000 3030303A 		.ascii	"000:\000"
 2506      00
 2507              		.section	.text.print_step,"ax",%progbits
 2508              		.align	1
 2509              		.p2align 2,,3
 2510              		.syntax unified
 2511              		.thumb
 2512              		.thumb_func
 2513              		.fpu fpv4-sp-d16
 2515              	print_step:
 2516              	.LVL177:
 2517              	.LFB232:
4399:src/xeq.c     **** 	char buf[16];
 2518              		.loc 1 4399 41 is_stmt 1 view -0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 16
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
4400:src/xeq.c     **** 	const unsigned int pc = state_pc();
 2522              		.loc 1 4400 2 view .LVU672
4401:src/xeq.c     **** 	char *p = TraceBuffer;
 2523              		.loc 1 4401 2 view .LVU673
4401:src/xeq.c     **** 	char *p = TraceBuffer;
 2524              		.loc 1 4401 26 is_stmt 0 view .LVU674
 2525 0000 254B     		ldr	r3, .L221
 2526 0002 1B68     		ldr	r3, [r3]
4399:src/xeq.c     **** 	char buf[16];
 2527              		.loc 1 4399 41 view .LVU675
 2528 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 2529              		.cfi_def_cfa_offset 20
 2530              		.cfi_offset 4, -20
 2531              		.cfi_offset 5, -16
 2532              		.cfi_offset 6, -12
 2533              		.cfi_offset 7, -8
 2534              		.cfi_offset 14, -4
4401:src/xeq.c     **** 	char *p = TraceBuffer;
 2535              		.loc 1 4401 26 view .LVU676
 2536 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 2537              	.LVL178:
4402:src/xeq.c     **** 
 2538              		.loc 1 4402 2 is_stmt 1 view .LVU677
4404:src/xeq.c     **** 		*p++ = 'x';
 2539              		.loc 1 4404 2 view .LVU678
ARM GAS  /tmp/ccaPnj5t.s 			page 145


4404:src/xeq.c     **** 		*p++ = 'x';
 2540              		.loc 1 4404 6 is_stmt 0 view .LVU679
 2541 000a A10B     		lsrs	r1, r4, #14
4404:src/xeq.c     **** 		*p++ = 'x';
 2542              		.loc 1 4404 5 view .LVU680
 2543 000c 0329     		cmp	r1, #3
4399:src/xeq.c     **** 	char buf[16];
 2544              		.loc 1 4399 41 view .LVU681
 2545 000e 85B0     		sub	sp, sp, #20
 2546              		.cfi_def_cfa_offset 40
4399:src/xeq.c     **** 	char buf[16];
 2547              		.loc 1 4399 41 view .LVU682
 2548 0010 0546     		mov	r5, r0
4404:src/xeq.c     **** 		*p++ = 'x';
 2549              		.loc 1 4404 5 view .LVU683
 2550 0012 39D0     		beq	.L218
4406:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2551              		.loc 1 4406 9 is_stmt 1 view .LVU684
4406:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2552              		.loc 1 4406 12 is_stmt 0 view .LVU685
 2553 0014 14F4404F 		tst	r4, #49152
 2554 0018 0FD1     		bne	.L219
4402:src/xeq.c     **** 
 2555              		.loc 1 4402 8 view .LVU686
 2556 001a 204E     		ldr	r6, .L221+4
 2557 001c 3746     		mov	r7, r6
 2558              	.LVL179:
4410:src/xeq.c     **** 		scopy(p, "000:");
 2559              		.loc 1 4410 2 is_stmt 1 view .LVU687
4410:src/xeq.c     **** 		scopy(p, "000:");
 2560              		.loc 1 4410 5 is_stmt 0 view .LVU688
 2561 001e BCB9     		cbnz	r4, .L220
 2562              	.LVL180:
 2563              	.L212:
4411:src/xeq.c     **** 	else {
 2564              		.loc 1 4411 3 is_stmt 1 view .LVU689
 2565 0020 1F49     		ldr	r1, .L221+8
 2566 0022 3846     		mov	r0, r7
 2567 0024 FFF7FEFF 		bl	scopy
 2568              	.LVL181:
 2569              	.L211:
4419:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2570              		.loc 1 4419 2 view .LVU690
4419:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2571              		.loc 1 4419 20 is_stmt 0 view .LVU691
 2572 0028 1E4A     		ldr	r2, .L221+12
4420:src/xeq.c     **** }
 2573              		.loc 1 4420 10 view .LVU692
 2574 002a 1F49     		ldr	r1, .L221+16
4419:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2575              		.loc 1 4419 20 view .LVU693
 2576 002c 937D     		ldrb	r3, [r2, #22]	@ zero_extendqisi2
4420:src/xeq.c     **** }
 2577              		.loc 1 4420 10 view .LVU694
 2578 002e 0E60     		str	r6, [r1]
4419:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2579              		.loc 1 4419 20 view .LVU695
ARM GAS  /tmp/ccaPnj5t.s 			page 146


 2580 0030 43F08003 		orr	r3, r3, #128
 2581 0034 9375     		strb	r3, [r2, #22]
4420:src/xeq.c     **** }
 2582              		.loc 1 4420 2 is_stmt 1 view .LVU696
4421:src/xeq.c     **** 
 2583              		.loc 1 4421 1 is_stmt 0 view .LVU697
 2584 0036 05B0     		add	sp, sp, #20
 2585              		.cfi_remember_state
 2586              		.cfi_def_cfa_offset 20
 2587              		@ sp needed
 2588 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
 2589              	.LVL182:
 2590              	.L219:
 2591              		.cfi_restore_state
4407:src/xeq.c     **** 		*p++ = ' ';
 2592              		.loc 1 4407 3 is_stmt 1 view .LVU698
4407:src/xeq.c     **** 		*p++ = ' ';
 2593              		.loc 1 4407 7 is_stmt 0 view .LVU699
 2594 003a 1848     		ldr	r0, .L221+4
 2595              	.LVL183:
4407:src/xeq.c     **** 		*p++ = ' ';
 2596              		.loc 1 4407 7 view .LVU700
 2597 003c 0122     		movs	r2, #1
 2598 003e 0646     		mov	r6, r0
 2599 0040 FFF7FEFF 		bl	num_arg_0
 2600              	.LVL184:
4408:src/xeq.c     **** 	}
 2601              		.loc 1 4408 3 is_stmt 1 view .LVU701
4408:src/xeq.c     **** 	}
 2602              		.loc 1 4408 5 is_stmt 0 view .LVU702
 2603 0044 0746     		mov	r7, r0
 2604              	.LVL185:
4408:src/xeq.c     **** 	}
 2605              		.loc 1 4408 8 view .LVU703
 2606 0046 2023     		movs	r3, #32
 2607 0048 07F8013B 		strb	r3, [r7], #1
 2608              	.LVL186:
4410:src/xeq.c     **** 		scopy(p, "000:");
 2609              		.loc 1 4410 2 is_stmt 1 view .LVU704
4410:src/xeq.c     **** 		scopy(p, "000:");
 2610              		.loc 1 4410 5 is_stmt 0 view .LVU705
 2611 004c 002C     		cmp	r4, #0
 2612 004e E7D0     		beq	.L212
 2613              	.L220:
 2614              	.LVL187:
 2615              	.LBB1497:
 2616              	.LBB1498:
4410:src/xeq.c     **** 		scopy(p, "000:");
 2617              		.loc 1 4410 5 view .LVU706
 2618 0050 2046     		mov	r0, r4
 2619 0052 FFF7FEFF 		bl	user_pc.part.0
 2620              	.LVL188:
 2621 0056 0146     		mov	r1, r0
 2622              	.L209:
4410:src/xeq.c     **** 		scopy(p, "000:");
 2623              		.loc 1 4410 5 view .LVU707
 2624              	.LBE1498:
ARM GAS  /tmp/ccaPnj5t.s 			page 147


 2625              	.LBE1497:
4413:src/xeq.c     **** 		*p++ = ':';
 2626              		.loc 1 4413 7 view .LVU708
 2627 0058 0322     		movs	r2, #3
 2628 005a 3846     		mov	r0, r7
 2629 005c FFF7FEFF 		bl	num_arg_0
 2630              	.LVL189:
4414:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2631              		.loc 1 4414 8 view .LVU709
 2632 0060 0746     		mov	r7, r0
 2633 0062 3A23     		movs	r3, #58
 2634 0064 07F8013B 		strb	r3, [r7], #1
4413:src/xeq.c     **** 		*p++ = ':';
 2635              		.loc 1 4413 7 view .LVU710
 2636 0068 0446     		mov	r4, r0
 2637              	.LVL190:
4414:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2638              		.loc 1 4414 3 is_stmt 1 view .LVU711
4415:src/xeq.c     **** 		if (*p == '?')
 2639              		.loc 1 4415 3 view .LVU712
 2640 006a 6946     		mov	r1, sp
 2641 006c 2846     		mov	r0, r5
 2642 006e FFF7FEFF 		bl	prt
 2643              	.LVL191:
 2644 0072 0022     		movs	r2, #0
 2645 0074 0146     		mov	r1, r0
 2646 0076 3846     		mov	r0, r7
 2647 0078 FFF7FEFF 		bl	scopy_char
 2648              	.LVL192:
4416:src/xeq.c     **** 			*p = '\0';
 2649              		.loc 1 4416 3 view .LVU713
4416:src/xeq.c     **** 			*p = '\0';
 2650              		.loc 1 4416 6 is_stmt 0 view .LVU714
 2651 007c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2652 007e 3F2B     		cmp	r3, #63
4417:src/xeq.c     **** 	}
 2653              		.loc 1 4417 4 is_stmt 1 view .LVU715
4417:src/xeq.c     **** 	}
 2654              		.loc 1 4417 7 is_stmt 0 view .LVU716
 2655 0080 04BF     		itt	eq
 2656 0082 0023     		moveq	r3, #0
 2657 0084 6370     		strbeq	r3, [r4, #1]
 2658 0086 CFE7     		b	.L211
 2659              	.LVL193:
 2660              	.L218:
4405:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2661              		.loc 1 4405 3 is_stmt 1 view .LVU717
4405:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2662              		.loc 1 4405 8 is_stmt 0 view .LVU718
 2663 0088 044E     		ldr	r6, .L221+4
 2664 008a 3746     		mov	r7, r6
 2665 008c 7823     		movs	r3, #120
 2666 008e 07F8013B 		strb	r3, [r7], #1
4410:src/xeq.c     **** 		scopy(p, "000:");
 2667              		.loc 1 4410 2 is_stmt 1 view .LVU719
4413:src/xeq.c     **** 		*p++ = ':';
 2668              		.loc 1 4413 3 view .LVU720
ARM GAS  /tmp/ccaPnj5t.s 			page 148


 2669              	.LBB1500:
 2670              	.LBI1497:
 488:src/xeq.c     **** 	unsigned int n = 1;
 2671              		.loc 1 488 14 view .LVU721
 2672              	.LBB1499:
 489:src/xeq.c     **** 	unsigned int base;
 2673              		.loc 1 489 2 view .LVU722
 2674              	.LVL194:
 490:src/xeq.c     **** 
 2675              		.loc 1 490 2 view .LVU723
 493:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 2676              		.loc 1 493 2 view .LVU724
 494:src/xeq.c     **** #else
 2677              		.loc 1 494 3 view .LVU725
 494:src/xeq.c     **** #else
 2678              		.loc 1 494 24 is_stmt 0 view .LVU726
 2679 0092 C4F30D01 		ubfx	r1, r4, #0, #14
 2680 0096 DFE7     		b	.L209
 2681              	.L222:
 2682              		.align	2
 2683              	.L221:
 2684 0098 00000000 		.word	main_ram
 2685 009c 00000000 		.word	TraceBuffer
 2686 00a0 00000000 		.word	.LC0
 2687 00a4 00000000 		.word	StateWhileOn
 2688 00a8 00000000 		.word	DispMsg
 2689              	.LBE1499:
 2690              	.LBE1500:
 2691              		.cfi_endproc
 2692              	.LFE232:
 2694              		.section	.text.do_dec,"ax",%progbits
 2695              		.align	1
 2696              		.p2align 2,,3
 2697              		.global	do_dec
 2698              		.syntax unified
 2699              		.thumb
 2700              		.thumb_func
 2701              		.fpu fpv4-sp-d16
 2703              	do_dec:
 2704              	.LVL195:
 2705              	.LFB21:
 431:src/xeq.c     **** 	unsigned short int top = 0;
 2706              		.loc 1 431 48 is_stmt 1 view -0
 2707              		.cfi_startproc
 2708              		@ args = 0, pretend = 0, frame = 8
 2709              		@ frame_needed = 0, uses_anonymous_args = 0
 432:src/xeq.c     **** 	unsigned short int bottom = 0;
 2710              		.loc 1 432 2 view .LVU728
 431:src/xeq.c     **** 	unsigned short int top = 0;
 2711              		.loc 1 431 48 is_stmt 0 view .LVU729
 2712 0000 70B5     		push	{r4, r5, r6, lr}
 2713              		.cfi_def_cfa_offset 16
 2714              		.cfi_offset 4, -16
 2715              		.cfi_offset 5, -12
 2716              		.cfi_offset 6, -8
 2717              		.cfi_offset 14, -4
 435:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
ARM GAS  /tmp/ccaPnj5t.s 			page 149


 2718              		.loc 1 435 12 view .LVU730
 2719 0002 114E     		ldr	r6, .L228
 431:src/xeq.c     **** 	unsigned short int top = 0;
 2720              		.loc 1 431 48 view .LVU731
 2721 0004 82B0     		sub	sp, sp, #8
 2722              		.cfi_def_cfa_offset 24
 432:src/xeq.c     **** 	unsigned short int bottom = 0;
 2723              		.loc 1 432 21 view .LVU732
 2724 0006 0023     		movs	r3, #0
 436:src/xeq.c     **** 
 2725              		.loc 1 436 11 view .LVU733
 2726 0008 0DF10602 		add	r2, sp, #6
 431:src/xeq.c     **** 	unsigned short int top = 0;
 2727              		.loc 1 431 48 view .LVU734
 2728 000c 0546     		mov	r5, r0
 435:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2729              		.loc 1 435 12 view .LVU735
 2730 000e 3360     		str	r3, [r6]
 432:src/xeq.c     **** 	unsigned short int bottom = 0;
 2731              		.loc 1 432 21 view .LVU736
 2732 0010 ADF80630 		strh	r3, [sp, #6]	@ movhi
 433:src/xeq.c     **** 
 2733              		.loc 1 433 2 is_stmt 1 view .LVU737
 2734              	.LVL196:
 435:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2735              		.loc 1 435 2 view .LVU738
 436:src/xeq.c     **** 
 2736              		.loc 1 436 2 view .LVU739
 436:src/xeq.c     **** 
 2737              		.loc 1 436 11 is_stmt 0 view .LVU740
 2738 0014 FFF7FEFF 		bl	find_section_bounds
 2739              	.LVL197:
 438:src/xeq.c     **** 		PcWrapped = 1;
 2740              		.loc 1 438 9 view .LVU741
 2741 0018 BDF80630 		ldrh	r3, [sp, #6]
 2742              	.LVL198:
 438:src/xeq.c     **** 		PcWrapped = 1;
 2743              		.loc 1 438 2 is_stmt 1 view .LVU742
 438:src/xeq.c     **** 		PcWrapped = 1;
 2744              		.loc 1 438 5 is_stmt 0 view .LVU743
 2745 001c AB42     		cmp	r3, r5
 439:src/xeq.c     **** 		pc = bottom;
 2746              		.loc 1 439 13 view .LVU744
 2747 001e 25BF     		ittet	cs
 2748 0020 0122     		movcs	r2, #1
 2749 0022 0446     		movcs	r4, r0
 439:src/xeq.c     **** 		pc = bottom;
 2750              		.loc 1 439 3 is_stmt 1 view .LVU745
 443:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2751              		.loc 1 443 3 is_stmt 0 view .LVU746
 2752 0024 05F1FF34 		addcc	r4, r5, #-1
 439:src/xeq.c     **** 		pc = bottom;
 2753              		.loc 1 439 13 view .LVU747
 2754 0028 3260     		strcs	r2, [r6]
 440:src/xeq.c     **** 	}
 2755              		.loc 1 440 3 is_stmt 1 view .LVU748
 2756              	.LVL199:
ARM GAS  /tmp/ccaPnj5t.s 			page 150


 443:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2757              		.loc 1 443 3 view .LVU749
 444:src/xeq.c     **** 		--pc;
 2758              		.loc 1 444 2 view .LVU750
 444:src/xeq.c     **** 		--pc;
 2759              		.loc 1 444 5 is_stmt 0 view .LVU751
 2760 002a A342     		cmp	r3, r4
 2761 002c 09D2     		bcs	.L223
 444:src/xeq.c     **** 		--pc;
 2762              		.loc 1 444 18 discriminator 1 view .LVU752
 2763 002e 651E     		subs	r5, r4, #1
 2764 0030 2846     		mov	r0, r5
 2765              	.LVL200:
 444:src/xeq.c     **** 		--pc;
 2766              		.loc 1 444 18 discriminator 1 view .LVU753
 2767 0032 FFF7FEFF 		bl	getprog
 2768              	.LVL201:
 2769 0036 00F47040 		and	r0, r0, #61440
 445:src/xeq.c     **** 	return pc;
 2770              		.loc 1 445 3 discriminator 1 view .LVU754
 2771 003a B0F5704F 		cmp	r0, #61440
 2772 003e 08BF     		it	eq
 2773 0040 2C46     		moveq	r4, r5
 2774              	.LVL202:
 2775              	.L223:
 447:src/xeq.c     **** 
 2776              		.loc 1 447 1 view .LVU755
 2777 0042 2046     		mov	r0, r4
 2778 0044 02B0     		add	sp, sp, #8
 2779              		.cfi_def_cfa_offset 16
 2780              		@ sp needed
 2781 0046 70BD     		pop	{r4, r5, r6, pc}
 2782              	.L229:
 2783              		.align	2
 2784              	.L228:
 2785 0048 00000000 		.word	PcWrapped
 2786              		.cfi_endproc
 2787              	.LFE21:
 2789              		.section	.text.update_program_bounds,"ax",%progbits
 2790              		.align	1
 2791              		.p2align 2,,3
 2792              		.global	update_program_bounds
 2793              		.syntax unified
 2794              		.thumb
 2795              		.thumb_func
 2796              		.fpu fpv4-sp-d16
 2798              	update_program_bounds:
 2799              	.LVL203:
 2800              	.LFB24:
 464:src/xeq.c     **** 	unsigned int pc = state_pc();
 2801              		.loc 1 464 45 is_stmt 1 view -0
 2802              		.cfi_startproc
 2803              		@ args = 0, pretend = 0, frame = 0
 2804              		@ frame_needed = 0, uses_anonymous_args = 0
 465:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2805              		.loc 1 465 2 view .LVU757
 464:src/xeq.c     **** 	unsigned int pc = state_pc();
ARM GAS  /tmp/ccaPnj5t.s 			page 151


 2806              		.loc 1 464 45 is_stmt 0 view .LVU758
 2807 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2808              		.cfi_def_cfa_offset 24
 2809              		.cfi_offset 3, -24
 2810              		.cfi_offset 4, -20
 2811              		.cfi_offset 5, -16
 2812              		.cfi_offset 6, -12
 2813              		.cfi_offset 7, -8
 2814              		.cfi_offset 14, -4
 465:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2815              		.loc 1 465 20 view .LVU759
 2816 0002 224F     		ldr	r7, .L251
 2817 0004 3D68     		ldr	r5, [r7]
 465:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2818              		.loc 1 465 15 view .LVU760
 2819 0006 B5F8E047 		ldrh	r4, [r5, #2016]
 2820              	.LVL204:
 466:src/xeq.c     **** 		State.pc = pc = 1;
 2821              		.loc 1 466 2 is_stmt 1 view .LVU761
 466:src/xeq.c     **** 		State.pc = pc = 1;
 2822              		.loc 1 466 5 is_stmt 0 view .LVU762
 2823 000a 34B9     		cbnz	r4, .L231
 466:src/xeq.c     **** 		State.pc = pc = 1;
 2824              		.loc 1 466 14 discriminator 1 view .LVU763
 2825 000c 204B     		ldr	r3, .L251+4
 2826 000e 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2827 0010 5B06     		lsls	r3, r3, #25
 467:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2828              		.loc 1 467 3 is_stmt 1 discriminator 1 view .LVU764
 2829              	.LVL205:
 467:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2830              		.loc 1 467 12 is_stmt 0 discriminator 1 view .LVU765
 2831 0012 44BF     		itt	mi
 2832 0014 0124     		movmi	r4, #1
 2833 0016 A5F8E047 		strhmi	r4, [r5, #2016]	@ movhi
 2834              	.LVL206:
 2835              	.L231:
 468:src/xeq.c     **** 		return;
 2836              		.loc 1 468 2 is_stmt 1 view .LVU766
 468:src/xeq.c     **** 		return;
 2837              		.loc 1 468 5 is_stmt 0 view .LVU767
 2838 001a 18B9     		cbnz	r0, .L232
 468:src/xeq.c     **** 		return;
 2839              		.loc 1 468 23 discriminator 1 view .LVU768
 2840 001c B5F8EC37 		ldrh	r3, [r5, #2028]
 468:src/xeq.c     **** 		return;
 2841              		.loc 1 468 14 discriminator 1 view .LVU769
 2842 0020 A342     		cmp	r3, r4
 2843 0022 2DD9     		bls	.L248
 2844              	.L232:
 470:src/xeq.c     **** 		ProgEnd = pc;
 2845              		.loc 1 470 2 is_stmt 1 view .LVU770
 470:src/xeq.c     **** 		ProgEnd = pc;
 2846              		.loc 1 470 17 is_stmt 0 view .LVU771
 2847 0024 1B4E     		ldr	r6, .L251+8
 2848 0026 0023     		movs	r3, #0
 2849 0028 3360     		str	r3, [r6]
ARM GAS  /tmp/ccaPnj5t.s 			page 152


 470:src/xeq.c     **** 		ProgEnd = pc;
 2850              		.loc 1 470 22 is_stmt 1 view .LVU772
 2851 002a 05E0     		b	.L236
 2852              	.LVL207:
 2853              	.L249:
 470:src/xeq.c     **** 		ProgEnd = pc;
 2854              		.loc 1 470 39 is_stmt 0 discriminator 2 view .LVU773
 2855 002c FFF7FEFF 		bl	do_inc
 2856              	.LVL208:
 470:src/xeq.c     **** 		ProgEnd = pc;
 2857              		.loc 1 470 2 discriminator 2 view .LVU774
 2858 0030 3368     		ldr	r3, [r6]
 2859 0032 3D68     		ldr	r5, [r7]
 470:src/xeq.c     **** 		ProgEnd = pc;
 2860              		.loc 1 470 39 discriminator 2 view .LVU775
 2861 0034 0446     		mov	r4, r0
 2862              	.LVL209:
 470:src/xeq.c     **** 		ProgEnd = pc;
 2863              		.loc 1 470 22 is_stmt 1 discriminator 2 view .LVU776
 470:src/xeq.c     **** 		ProgEnd = pc;
 2864              		.loc 1 470 2 is_stmt 0 discriminator 2 view .LVU777
 2865 0036 5BB9     		cbnz	r3, .L234
 2866              	.LVL210:
 2867              	.L236:
 471:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2868              		.loc 1 471 3 is_stmt 1 view .LVU778
 471:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2869              		.loc 1 471 11 is_stmt 0 view .LVU779
 2870 0038 A5F8EE47 		strh	r4, [r5, #2030]	@ movhi
 472:src/xeq.c     **** 			break;
 2871              		.loc 1 472 3 is_stmt 1 view .LVU780
 472:src/xeq.c     **** 			break;
 2872              		.loc 1 472 7 is_stmt 0 view .LVU781
 2873 003c 2046     		mov	r0, r4
 2874 003e FFF7FEFF 		bl	getprog
 2875              	.LVL211:
 470:src/xeq.c     **** 		ProgEnd = pc;
 2876              		.loc 1 470 34 is_stmt 1 view .LVU782
 472:src/xeq.c     **** 			break;
 2877              		.loc 1 472 7 is_stmt 0 view .LVU783
 2878 0042 0346     		mov	r3, r0
 472:src/xeq.c     **** 			break;
 2879              		.loc 1 472 6 view .LVU784
 2880 0044 B3F59D7F 		cmp	r3, #314
 470:src/xeq.c     **** 		ProgEnd = pc;
 2881              		.loc 1 470 39 view .LVU785
 2882 0048 4FF00001 		mov	r1, #0
 2883 004c 2046     		mov	r0, r4
 472:src/xeq.c     **** 			break;
 2884              		.loc 1 472 6 view .LVU786
 2885 004e EDD1     		bne	.L249
 2886              	.LVL212:
 2887              	.L234:
 476:src/xeq.c     **** 		const unsigned int opc = pc;
 2888              		.loc 1 476 2 is_stmt 1 view .LVU787
 476:src/xeq.c     **** 		const unsigned int opc = pc;
 2889              		.loc 1 476 10 is_stmt 0 view .LVU788
ARM GAS  /tmp/ccaPnj5t.s 			page 153


 2890 0050 B5F8E047 		ldrh	r4, [r5, #2016]
 2891              	.LVL213:
 476:src/xeq.c     **** 		const unsigned int opc = pc;
 2892              		.loc 1 476 10 view .LVU789
 2893 0054 04E0     		b	.L238
 2894              	.LVL214:
 2895              	.L250:
 2896              	.LBB1501:
 479:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2897              		.loc 1 479 20 discriminator 1 view .LVU790
 2898 0056 FFF7FEFF 		bl	getprog
 2899              	.LVL215:
 479:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2900              		.loc 1 479 17 discriminator 1 view .LVU791
 2901 005a B0F59D7F 		cmp	r0, #314
 2902 005e 08D0     		beq	.L237
 2903              	.LVL216:
 2904              	.L238:
 477:src/xeq.c     **** 		pc = do_dec(opc, 0);
 2905              		.loc 1 477 3 is_stmt 1 view .LVU792
 478:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2906              		.loc 1 478 3 view .LVU793
 478:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2907              		.loc 1 478 8 is_stmt 0 view .LVU794
 2908 0060 2046     		mov	r0, r4
 2909 0062 0021     		movs	r1, #0
 2910 0064 FFF7FEFF 		bl	do_dec
 2911              	.LVL217:
 479:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2912              		.loc 1 479 6 view .LVU795
 2913 0068 3368     		ldr	r3, [r6]
 2914 006a 2546     		mov	r5, r4
 478:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2915              		.loc 1 478 8 view .LVU796
 2916 006c 0446     		mov	r4, r0
 2917              	.LVL218:
 479:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2918              		.loc 1 479 3 is_stmt 1 view .LVU797
 479:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2919              		.loc 1 479 6 is_stmt 0 view .LVU798
 2920 006e 002B     		cmp	r3, #0
 2921 0070 F1D0     		beq	.L250
 2922              	.LVL219:
 2923              	.L237:
 480:src/xeq.c     **** 			break;
 2924              		.loc 1 480 4 is_stmt 1 view .LVU799
 480:src/xeq.c     **** 			break;
 2925              		.loc 1 480 14 is_stmt 0 view .LVU800
 2926 0072 3B68     		ldr	r3, [r7]
 2927 0074 012D     		cmp	r5, #1
 2928 0076 38BF     		it	cc
 2929 0078 0125     		movcc	r5, #1
 2930              	.LVL220:
 480:src/xeq.c     **** 			break;
 2931              		.loc 1 480 14 view .LVU801
 2932 007a A3F8EC57 		strh	r5, [r3, #2028]	@ movhi
 481:src/xeq.c     **** 		}
ARM GAS  /tmp/ccaPnj5t.s 			page 154


 2933              		.loc 1 481 4 is_stmt 1 view .LVU802
 2934              	.LBE1501:
 484:src/xeq.c     **** 
 2935              		.loc 1 484 1 is_stmt 0 view .LVU803
 2936 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2937              	.LVL221:
 2938              	.L248:
 468:src/xeq.c     **** 		return;
 2939              		.loc 1 468 42 discriminator 2 view .LVU804
 2940 0080 B5F8EE37 		ldrh	r3, [r5, #2030]
 468:src/xeq.c     **** 		return;
 2941              		.loc 1 468 33 discriminator 2 view .LVU805
 2942 0084 A342     		cmp	r3, r4
 2943 0086 CDD3     		bcc	.L232
 484:src/xeq.c     **** 
 2944              		.loc 1 484 1 view .LVU806
 2945 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2946              	.LVL222:
 2947              	.L252:
 484:src/xeq.c     **** 
 2948              		.loc 1 484 1 view .LVU807
 2949 008a 00BF     		.align	2
 2950              	.L251:
 2951 008c 00000000 		.word	main_ram
 2952 0090 00000000 		.word	StateWhileOn
 2953 0094 00000000 		.word	PcWrapped
 2954              		.cfi_endproc
 2955              	.LFE24:
 2957              		.section	.text.set_pc,"ax",%progbits
 2958              		.align	1
 2959              		.p2align 2,,3
 2960              		.global	set_pc
 2961              		.syntax unified
 2962              		.thumb
 2963              		.thumb_func
 2964              		.fpu fpv4-sp-d16
 2966              	set_pc:
 2967              	.LVL223:
 2968              	.LFB18:
 361:src/xeq.c     **** 	if (isRAM(pc)) {
 2969              		.loc 1 361 30 is_stmt 1 view -0
 2970              		.cfi_startproc
 2971              		@ args = 0, pretend = 0, frame = 0
 2972              		@ frame_needed = 0, uses_anonymous_args = 0
 362:src/xeq.c     **** 		if (pc > ProgSize)
 2973              		.loc 1 362 2 view .LVU809
 362:src/xeq.c     **** 		if (pc > ProgSize)
 2974              		.loc 1 362 5 is_stmt 0 view .LVU810
 2975 0000 10F4704F 		tst	r0, #61440
 361:src/xeq.c     **** 	if (isRAM(pc)) {
 2976              		.loc 1 361 30 view .LVU811
 2977 0004 38B5     		push	{r3, r4, r5, lr}
 2978              		.cfi_def_cfa_offset 16
 2979              		.cfi_offset 3, -16
 2980              		.cfi_offset 4, -12
 2981              		.cfi_offset 5, -8
 2982              		.cfi_offset 14, -4
ARM GAS  /tmp/ccaPnj5t.s 			page 155


 361:src/xeq.c     **** 	if (isRAM(pc)) {
 2983              		.loc 1 361 30 view .LVU812
 2984 0006 0446     		mov	r4, r0
 362:src/xeq.c     **** 		if (pc > ProgSize)
 2985              		.loc 1 362 5 view .LVU813
 2986 0008 15D1     		bne	.L254
 363:src/xeq.c     **** 			pc = ProgSize;
 2987              		.loc 1 363 3 is_stmt 1 view .LVU814
 363:src/xeq.c     **** 			pc = ProgSize;
 2988              		.loc 1 363 12 is_stmt 0 view .LVU815
 2989 000a 264B     		ldr	r3, .L262
 2990 000c 1B68     		ldr	r3, [r3]
 2991 000e 5A88     		ldrh	r2, [r3, #2]
 2992 0010 9042     		cmp	r0, r2
 2993 0012 28BF     		it	cs
 2994 0014 1446     		movcs	r4, r2
 2995              	.LVL224:
 365:src/xeq.c     **** 			pc--;
 2996              		.loc 1 365 3 is_stmt 1 view .LVU816
 365:src/xeq.c     **** 			pc--;
 2997              		.loc 1 365 6 is_stmt 0 view .LVU817
 2998 0016 012C     		cmp	r4, #1
 2999 0018 06D9     		bls	.L255
 365:src/xeq.c     **** 			pc--;
 3000              		.loc 1 365 14 discriminator 1 view .LVU818
 3001 001a 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 3002 001e 02F47042 		and	r2, r2, #61440
 3003 0022 B2F5704F 		cmp	r2, #61440
 3004 0026 35D0     		beq	.L261
 3005              	.L255:
 374:src/xeq.c     **** }
 3006              		.loc 1 374 2 is_stmt 1 view .LVU819
 3007              	.LVL225:
 3008              	.LBB1502:
 3009              	.LBI1502:
 282:src/xeq.c     **** 	State.pc = pc;
 3010              		.loc 1 282 13 view .LVU820
 3011              	.LBB1503:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3012              		.loc 1 283 2 view .LVU821
 283:src/xeq.c     **** 	update_program_bounds(0);
 3013              		.loc 1 283 11 is_stmt 0 view .LVU822
 3014 0028 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3015              		.loc 1 284 2 is_stmt 1 view .LVU823
 3016 002c 0020     		movs	r0, #0
 3017              	.LBE1503:
 3018              	.LBE1502:
 375:src/xeq.c     **** 
 3019              		.loc 1 375 1 is_stmt 0 view .LVU824
 3020 002e BDE83840 		pop	{r3, r4, r5, lr}
 3021              		.cfi_remember_state
 3022              		.cfi_restore 14
 3023              		.cfi_restore 5
 3024              		.cfi_restore 4
 3025              		.cfi_restore 3
 3026              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccaPnj5t.s 			page 156


 3027              	.LVL226:
 3028              	.LBB1511:
 3029              	.LBB1504:
 284:src/xeq.c     **** }
 3030              		.loc 1 284 2 view .LVU825
 3031 0032 FFF7FEBF 		b	update_program_bounds
 3032              	.LVL227:
 3033              	.L254:
 3034              		.cfi_restore_state
 284:src/xeq.c     **** }
 3035              		.loc 1 284 2 view .LVU826
 3036              	.LBE1504:
 3037              	.LBE1511:
 367:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3038              		.loc 1 367 9 is_stmt 1 view .LVU827
 367:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3039              		.loc 1 367 14 is_stmt 0 view .LVU828
 3040 0036 820B     		lsrs	r2, r0, #14
 367:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3041              		.loc 1 367 12 view .LVU829
 3042 0038 032A     		cmp	r2, #3
 3043 003a 22D0     		beq	.L260
 3044              	.LBB1512:
 368:src/xeq.c     **** 		if (pc > n - 1)
 3045              		.loc 1 368 3 is_stmt 1 view .LVU830
 3046              	.LVL228:
 3047              	.LBB1513:
 3048              	.LBI1513:
 313:src/xeq.c     **** 	if (region == REGION_XROM)
 3049              		.loc 1 313 5 view .LVU831
 3050              	.LBB1514:
 314:src/xeq.c     **** 		return xrom_size;
 3051              		.loc 1 314 2 view .LVU832
 317:src/xeq.c     **** }
 3052              		.loc 1 317 3 view .LVU833
 317:src/xeq.c     **** }
 3053              		.loc 1 317 24 is_stmt 0 view .LVU834
 3054 003c 1A49     		ldr	r1, .L262+4
 3055              	.LBE1514:
 3056              	.LBE1513:
 368:src/xeq.c     **** 		if (pc > n - 1)
 3057              		.loc 1 368 26 view .LVU835
 3058 003e 1B4B     		ldr	r3, .L262+8
 3059              	.LBB1516:
 3060              	.LBB1515:
 317:src/xeq.c     **** }
 3061              		.loc 1 317 32 view .LVU836
 3062 0040 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3063              	.LBE1515:
 3064              	.LBE1516:
 368:src/xeq.c     **** 		if (pc > n - 1)
 3065              		.loc 1 368 39 view .LVU837
 3066 0044 32F8022C 		ldrh	r2, [r2, #-2]
 368:src/xeq.c     **** 		if (pc > n - 1)
 3067              		.loc 1 368 26 view .LVU838
 3068 0048 00EA0301 		and	r1, r0, r3
 368:src/xeq.c     **** 		if (pc > n - 1)
ARM GAS  /tmp/ccaPnj5t.s 			page 157


 3069              		.loc 1 368 39 view .LVU839
 3070 004c 0A44     		add	r2, r2, r1
 3071              	.LVL229:
 369:src/xeq.c     **** 			pc = n - 1;
 3072              		.loc 1 369 3 is_stmt 1 view .LVU840
 3073 004e 9042     		cmp	r0, r2
 3074 0050 28BF     		it	cs
 3075 0052 1446     		movcs	r4, r2
 3076              	.LVL230:
 371:src/xeq.c     **** 			--pc;
 3077              		.loc 1 371 3 view .LVU841
 371:src/xeq.c     **** 			--pc;
 3078              		.loc 1 371 12 is_stmt 0 view .LVU842
 3079 0054 2340     		ands	r3, r3, r4
 3080 0056 0133     		adds	r3, r3, #1
 371:src/xeq.c     **** 			--pc;
 3081              		.loc 1 371 6 view .LVU843
 3082 0058 A342     		cmp	r3, r4
 3083 005a 12D2     		bcs	.L260
 371:src/xeq.c     **** 			--pc;
 3084              		.loc 1 371 28 discriminator 1 view .LVU844
 3085 005c 651E     		subs	r5, r4, #1
 3086 005e 2846     		mov	r0, r5
 3087 0060 FFF7FEFF 		bl	getprog
 3088              	.LVL231:
 371:src/xeq.c     **** 			--pc;
 3089              		.loc 1 371 28 discriminator 1 view .LVU845
 3090 0064 0F4B     		ldr	r3, .L262
 3091 0066 00F47040 		and	r0, r0, #61440
 3092 006a 1B68     		ldr	r3, [r3]
 371:src/xeq.c     **** 			--pc;
 3093              		.loc 1 371 25 discriminator 1 view .LVU846
 3094 006c B0F5704F 		cmp	r0, #61440
 372:src/xeq.c     **** 	}
 3095              		.loc 1 372 4 is_stmt 1 discriminator 1 view .LVU847
 3096              	.LVL232:
 372:src/xeq.c     **** 	}
 3097              		.loc 1 372 4 is_stmt 0 discriminator 1 view .LVU848
 3098 0070 08BF     		it	eq
 3099 0072 2C46     		moveq	r4, r5
 3100              	.LVL233:
 372:src/xeq.c     **** 	}
 3101              		.loc 1 372 4 discriminator 1 view .LVU849
 3102              	.LBE1512:
 374:src/xeq.c     **** }
 3103              		.loc 1 374 2 is_stmt 1 discriminator 1 view .LVU850
 3104              	.LBB1517:
 282:src/xeq.c     **** 	State.pc = pc;
 3105              		.loc 1 282 13 discriminator 1 view .LVU851
 3106              	.LBB1505:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3107              		.loc 1 283 2 discriminator 1 view .LVU852
 283:src/xeq.c     **** 	update_program_bounds(0);
 3108              		.loc 1 283 11 is_stmt 0 discriminator 1 view .LVU853
 3109 0074 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3110              		.loc 1 284 2 is_stmt 1 discriminator 1 view .LVU854
ARM GAS  /tmp/ccaPnj5t.s 			page 158


 3111 0078 0020     		movs	r0, #0
 3112              	.LBE1505:
 3113              	.LBE1517:
 375:src/xeq.c     **** 
 3114              		.loc 1 375 1 is_stmt 0 discriminator 1 view .LVU855
 3115 007a BDE83840 		pop	{r3, r4, r5, lr}
 3116              		.cfi_remember_state
 3117              		.cfi_restore 14
 3118              		.cfi_restore 5
 3119              		.cfi_restore 4
 3120              		.cfi_restore 3
 3121              		.cfi_def_cfa_offset 0
 3122              	.LVL234:
 3123              	.LBB1518:
 3124              	.LBB1506:
 284:src/xeq.c     **** }
 3125              		.loc 1 284 2 discriminator 1 view .LVU856
 3126 007e FFF7FEBF 		b	update_program_bounds
 3127              	.LVL235:
 3128              	.L260:
 3129              		.cfi_restore_state
 284:src/xeq.c     **** }
 3130              		.loc 1 284 2 discriminator 1 view .LVU857
 3131 0082 084B     		ldr	r3, .L262
 3132 0084 1B68     		ldr	r3, [r3]
 284:src/xeq.c     **** }
 3133              		.loc 1 284 2 discriminator 1 view .LVU858
 3134              	.LBE1506:
 3135              	.LBE1518:
 374:src/xeq.c     **** }
 3136              		.loc 1 374 2 is_stmt 1 view .LVU859
 3137              	.LVL236:
 3138              	.LBB1519:
 282:src/xeq.c     **** 	State.pc = pc;
 3139              		.loc 1 282 13 view .LVU860
 3140              	.LBB1507:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3141              		.loc 1 283 2 view .LVU861
 284:src/xeq.c     **** }
 3142              		.loc 1 284 2 is_stmt 0 view .LVU862
 3143 0086 0020     		movs	r0, #0
 283:src/xeq.c     **** 	update_program_bounds(0);
 3144              		.loc 1 283 11 view .LVU863
 3145 0088 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3146              		.loc 1 284 2 is_stmt 1 view .LVU864
 3147              	.LBE1507:
 3148              	.LBE1519:
 375:src/xeq.c     **** 
 3149              		.loc 1 375 1 is_stmt 0 view .LVU865
 3150 008c BDE83840 		pop	{r3, r4, r5, lr}
 3151              		.cfi_remember_state
 3152              		.cfi_restore 14
 3153              		.cfi_restore 5
 3154              		.cfi_restore 4
 3155              		.cfi_restore 3
 3156              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccaPnj5t.s 			page 159


 3157              	.LVL237:
 3158              	.LBB1520:
 3159              	.LBB1508:
 284:src/xeq.c     **** }
 3160              		.loc 1 284 2 view .LVU866
 3161 0090 FFF7FEBF 		b	update_program_bounds
 3162              	.LVL238:
 3163              	.L261:
 3164              		.cfi_restore_state
 284:src/xeq.c     **** }
 3165              		.loc 1 284 2 view .LVU867
 3166              	.LBE1508:
 3167              	.LBE1520:
 366:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3168              		.loc 1 366 4 is_stmt 1 view .LVU868
 366:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3169              		.loc 1 366 6 is_stmt 0 view .LVU869
 3170 0094 013C     		subs	r4, r4, #1
 3171              	.LVL239:
 374:src/xeq.c     **** }
 3172              		.loc 1 374 2 is_stmt 1 view .LVU870
 3173              	.LBB1521:
 282:src/xeq.c     **** 	State.pc = pc;
 3174              		.loc 1 282 13 view .LVU871
 3175              	.LBB1509:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3176              		.loc 1 283 2 view .LVU872
 283:src/xeq.c     **** 	update_program_bounds(0);
 3177              		.loc 1 283 11 is_stmt 0 view .LVU873
 3178 0096 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3179              		.loc 1 284 2 is_stmt 1 view .LVU874
 3180 009a 0020     		movs	r0, #0
 3181              	.LBE1509:
 3182              	.LBE1521:
 375:src/xeq.c     **** 
 3183              		.loc 1 375 1 is_stmt 0 view .LVU875
 3184 009c BDE83840 		pop	{r3, r4, r5, lr}
 3185              		.cfi_restore 14
 3186              		.cfi_restore 5
 3187              		.cfi_restore 4
 3188              		.cfi_restore 3
 3189              		.cfi_def_cfa_offset 0
 3190              	.LVL240:
 3191              	.LBB1522:
 3192              	.LBB1510:
 284:src/xeq.c     **** }
 3193              		.loc 1 284 2 view .LVU876
 3194 00a0 FFF7FEBF 		b	update_program_bounds
 3195              	.LVL241:
 3196              	.L263:
 284:src/xeq.c     **** }
 3197              		.loc 1 284 2 view .LVU877
 3198              		.align	2
 3199              	.L262:
 3200 00a4 00000000 		.word	main_ram
 3201 00a8 00000000 		.word	.LANCHOR0
ARM GAS  /tmp/ccaPnj5t.s 			page 160


 3202 00ac 00C0FFFF 		.word	-16384
 3203              	.LBE1510:
 3204              	.LBE1522:
 3205              		.cfi_endproc
 3206              	.LFE18:
 3208              		.section	.text.incpc,"ax",%progbits
 3209              		.align	1
 3210              		.p2align 2,,3
 3211              		.global	incpc
 3212              		.syntax unified
 3213              		.thumb
 3214              		.thumb_func
 3215              		.fpu fpv4-sp-d16
 3217              	incpc:
 3218              	.LFB22:
 452:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3219              		.loc 1 452 17 is_stmt 1 view -0
 3220              		.cfi_startproc
 3221              		@ args = 0, pretend = 0, frame = 0
 3222              		@ frame_needed = 0, uses_anonymous_args = 0
 453:src/xeq.c     **** 	return PcWrapped;
 3223              		.loc 1 453 2 view .LVU879
 452:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3224              		.loc 1 452 17 is_stmt 0 view .LVU880
 3225 0000 10B5     		push	{r4, lr}
 3226              		.cfi_def_cfa_offset 8
 3227              		.cfi_offset 4, -8
 3228              		.cfi_offset 14, -4
 453:src/xeq.c     **** 	return PcWrapped;
 3229              		.loc 1 453 20 view .LVU881
 3230 0002 084C     		ldr	r4, .L266
 3231 0004 2368     		ldr	r3, [r4]
 453:src/xeq.c     **** 	return PcWrapped;
 3232              		.loc 1 453 2 view .LVU882
 3233 0006 0121     		movs	r1, #1
 3234 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3235 000c FFF7FEFF 		bl	do_inc
 3236              	.LVL242:
 3237              	.LBB1523:
 3238              	.LBB1524:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3239              		.loc 1 283 11 view .LVU883
 3240 0010 2368     		ldr	r3, [r4]
 3241              	.LBE1524:
 3242              	.LBE1523:
 453:src/xeq.c     **** 	return PcWrapped;
 3243              		.loc 1 453 2 view .LVU884
 3244 0012 0246     		mov	r2, r0
 3245              	.LVL243:
 3246              	.LBB1526:
 3247              	.LBI1523:
 282:src/xeq.c     **** 	State.pc = pc;
 3248              		.loc 1 282 13 is_stmt 1 view .LVU885
 3249              	.LBB1525:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3250              		.loc 1 283 2 view .LVU886
 283:src/xeq.c     **** 	update_program_bounds(0);
ARM GAS  /tmp/ccaPnj5t.s 			page 161


 3251              		.loc 1 283 11 is_stmt 0 view .LVU887
 3252 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3253              		.loc 1 284 2 is_stmt 1 view .LVU888
 3254 0018 0020     		movs	r0, #0
 3255              	.LVL244:
 284:src/xeq.c     **** }
 3256              		.loc 1 284 2 is_stmt 0 view .LVU889
 3257 001a FFF7FEFF 		bl	update_program_bounds
 3258              	.LVL245:
 284:src/xeq.c     **** }
 3259              		.loc 1 284 2 view .LVU890
 3260              	.LBE1525:
 3261              	.LBE1526:
 454:src/xeq.c     **** }
 3262              		.loc 1 454 2 is_stmt 1 view .LVU891
 454:src/xeq.c     **** }
 3263              		.loc 1 454 9 is_stmt 0 view .LVU892
 3264 001e 024B     		ldr	r3, .L266+4
 455:src/xeq.c     **** 
 3265              		.loc 1 455 1 view .LVU893
 3266 0020 1868     		ldr	r0, [r3]
 3267 0022 10BD     		pop	{r4, pc}
 3268              	.L267:
 3269              		.align	2
 3270              	.L266:
 3271 0024 00000000 		.word	main_ram
 3272 0028 00000000 		.word	PcWrapped
 3273              		.cfi_endproc
 3274              	.LFE22:
 3276              		.section	.text.decpc,"ax",%progbits
 3277              		.align	1
 3278              		.p2align 2,,3
 3279              		.global	decpc
 3280              		.syntax unified
 3281              		.thumb
 3282              		.thumb_func
 3283              		.fpu fpv4-sp-d16
 3285              	decpc:
 3286              	.LFB23:
 457:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3287              		.loc 1 457 18 is_stmt 1 view -0
 3288              		.cfi_startproc
 3289              		@ args = 0, pretend = 0, frame = 0
 3290              		@ frame_needed = 0, uses_anonymous_args = 0
 458:src/xeq.c     **** }
 3291              		.loc 1 458 2 view .LVU895
 457:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3292              		.loc 1 457 18 is_stmt 0 view .LVU896
 3293 0000 10B5     		push	{r4, lr}
 3294              		.cfi_def_cfa_offset 8
 3295              		.cfi_offset 4, -8
 3296              		.cfi_offset 14, -4
 458:src/xeq.c     **** }
 3297              		.loc 1 458 20 view .LVU897
 3298 0002 084C     		ldr	r4, .L270
 3299 0004 2368     		ldr	r3, [r4]
ARM GAS  /tmp/ccaPnj5t.s 			page 162


 458:src/xeq.c     **** }
 3300              		.loc 1 458 2 view .LVU898
 3301 0006 0121     		movs	r1, #1
 3302 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3303 000c FFF7FEFF 		bl	do_dec
 3304              	.LVL246:
 3305              	.LBB1527:
 3306              	.LBB1528:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3307              		.loc 1 283 11 view .LVU899
 3308 0010 2368     		ldr	r3, [r4]
 3309              	.LBE1528:
 3310              	.LBE1527:
 458:src/xeq.c     **** }
 3311              		.loc 1 458 2 view .LVU900
 3312 0012 0246     		mov	r2, r0
 3313              	.LVL247:
 3314              	.LBB1531:
 3315              	.LBI1527:
 282:src/xeq.c     **** 	State.pc = pc;
 3316              		.loc 1 282 13 is_stmt 1 view .LVU901
 3317              	.LBB1529:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3318              		.loc 1 283 2 view .LVU902
 3319              	.LBE1529:
 3320              	.LBE1531:
 459:src/xeq.c     **** 
 3321              		.loc 1 459 1 is_stmt 0 view .LVU903
 3322 0014 BDE81040 		pop	{r4, lr}
 3323              		.cfi_restore 14
 3324              		.cfi_restore 4
 3325              		.cfi_def_cfa_offset 0
 3326              	.LBB1532:
 3327              	.LBB1530:
 284:src/xeq.c     **** }
 3328              		.loc 1 284 2 view .LVU904
 3329 0018 0020     		movs	r0, #0
 3330              	.LVL248:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3331              		.loc 1 283 11 view .LVU905
 3332 001a A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3333              		.loc 1 284 2 is_stmt 1 view .LVU906
 3334 001e FFF7FEBF 		b	update_program_bounds
 3335              	.LVL249:
 3336              	.L271:
 284:src/xeq.c     **** }
 3337              		.loc 1 284 2 is_stmt 0 view .LVU907
 3338 0022 00BF     		.align	2
 3339              	.L270:
 3340 0024 00000000 		.word	main_ram
 3341              	.LBE1530:
 3342              	.LBE1532:
 3343              		.cfi_endproc
 3344              	.LFE23:
 3346              		.section	.text.fin_tst.part.0,"ax",%progbits
 3347              		.align	1
ARM GAS  /tmp/ccaPnj5t.s 			page 163


 3348              		.p2align 2,,3
 3349              		.syntax unified
 3350              		.thumb
 3351              		.thumb_func
 3352              		.fpu fpv4-sp-d16
 3354              	fin_tst.part.0:
 3355              	.LFB284:
2551:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3356              		.loc 1 2551 6 is_stmt 1 view -0
 3357              		.cfi_startproc
 3358              		@ args = 0, pretend = 0, frame = 0
 3359              		@ frame_needed = 0, uses_anonymous_args = 0
 3360              	.LVL250:
2551:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 3361              		.loc 1 2551 6 is_stmt 0 view .LVU909
 3362 0000 08B5     		push	{r3, lr}
 3363              		.cfi_def_cfa_offset 8
 3364              		.cfi_offset 3, -8
 3365              		.cfi_offset 14, -4
2554:src/xeq.c     **** 			decpc();
 3366              		.loc 1 2554 14 view .LVU910
 3367 0002 FFF7FEFF 		bl	incpc
 3368              	.LVL251:
2554:src/xeq.c     **** 			decpc();
 3369              		.loc 1 2554 11 view .LVU911
 3370 0006 00B9     		cbnz	r0, .L275
2565:src/xeq.c     **** 
 3371              		.loc 1 2565 1 view .LVU912
 3372 0008 08BD     		pop	{r3, pc}
 3373              	.L275:
2555:src/xeq.c     **** 	}
 3374              		.loc 1 2555 4 is_stmt 1 view .LVU913
2565:src/xeq.c     **** 
 3375              		.loc 1 2565 1 is_stmt 0 view .LVU914
 3376 000a BDE80840 		pop	{r3, lr}
 3377              		.cfi_restore 14
 3378              		.cfi_restore 3
 3379              		.cfi_def_cfa_offset 0
2555:src/xeq.c     **** 	}
 3380              		.loc 1 2555 4 view .LVU915
 3381 000e FFF7FEBF 		b	decpc
 3382              	.LVL252:
 3383              		.cfi_endproc
 3384              	.LFE284:
 3386 0012 00BF     		.section	.text.do_rtn,"ax",%progbits
 3387              		.align	1
 3388              		.p2align 2,,3
 3389              		.syntax unified
 3390              		.thumb
 3391              		.thumb_func
 3392              		.fpu fpv4-sp-d16
 3394              	do_rtn:
 3395              	.LVL253:
 3396              	.LFB153:
2229:src/xeq.c     **** 	unsigned short pc;
 3397              		.loc 1 2229 31 is_stmt 1 view -0
 3398              		.cfi_startproc
ARM GAS  /tmp/ccaPnj5t.s 			page 164


 3399              		@ args = 0, pretend = 0, frame = 0
 3400              		@ frame_needed = 0, uses_anonymous_args = 0
2230:src/xeq.c     **** 
 3401              		.loc 1 2230 2 view .LVU917
2232:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3402              		.loc 1 2232 2 view .LVU918
2229:src/xeq.c     **** 	unsigned short pc;
 3403              		.loc 1 2229 31 is_stmt 0 view .LVU919
 3404 0000 70B5     		push	{r4, r5, r6, lr}
 3405              		.cfi_def_cfa_offset 16
 3406              		.cfi_offset 4, -16
 3407              		.cfi_offset 5, -12
 3408              		.cfi_offset 6, -8
 3409              		.cfi_offset 14, -4
2232:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3410              		.loc 1 2232 6 view .LVU920
 3411 0002 224C     		ldr	r4, .L290
 3412 0004 2368     		ldr	r3, [r4]
2232:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3413              		.loc 1 2232 5 view .LVU921
 3414 0006 B3F9E227 		ldrsh	r2, [r3, #2018]
 3415 000a 002A     		cmp	r2, #0
 3416 000c 0FDB     		blt	.L277
2234:src/xeq.c     **** 		raw_set_pc(ProgBegin);
 3417              		.loc 1 2234 3 is_stmt 1 view .LVU922
 3418              	.LBB1533:
 3419              	.LBI1533:
1588:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 3420              		.loc 1 1588 6 view .LVU923
 3421              	.LBB1534:
1589:src/xeq.c     **** }
 3422              		.loc 1 1589 2 view .LVU924
1589:src/xeq.c     **** }
 3423              		.loc 1 1589 24 is_stmt 0 view .LVU925
 3424 000e 0020     		movs	r0, #0
 3425              	.LVL254:
1589:src/xeq.c     **** }
 3426              		.loc 1 1589 24 view .LVU926
 3427              	.LBE1534:
 3428              	.LBE1533:
 3429              	.LBB1536:
 3430              	.LBB1537:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3431              		.loc 1 283 11 view .LVU927
 3432 0010 B3F8EC27 		ldrh	r2, [r3, #2028]
 3433              	.LBE1537:
 3434              	.LBE1536:
 3435              	.LBB1539:
 3436              	.LBB1535:
1589:src/xeq.c     **** }
 3437              		.loc 1 1589 24 view .LVU928
 3438 0014 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
1589:src/xeq.c     **** }
 3439              		.loc 1 1589 12 view .LVU929
 3440 0018 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 3441              	.LBE1535:
 3442              	.LBE1539:
ARM GAS  /tmp/ccaPnj5t.s 			page 165


2235:src/xeq.c     **** 	}
 3443              		.loc 1 2235 3 is_stmt 1 view .LVU930
 3444              	.LVL255:
 3445              	.LBB1540:
 3446              	.LBI1536:
 282:src/xeq.c     **** 	State.pc = pc;
 3447              		.loc 1 282 13 view .LVU931
 3448              	.LBB1538:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3449              		.loc 1 283 2 view .LVU932
 283:src/xeq.c     **** 	update_program_bounds(0);
 3450              		.loc 1 283 11 is_stmt 0 view .LVU933
 3451 001c A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3452              		.loc 1 284 2 is_stmt 1 view .LVU934
 3453 0020 FFF7FEFF 		bl	update_program_bounds
 3454              	.LVL256:
 3455              	.L278:
 284:src/xeq.c     **** }
 3456              		.loc 1 284 2 is_stmt 0 view .LVU935
 3457              	.LBE1538:
 3458              	.LBE1540:
2248:src/xeq.c     **** 		// RTN with empty stack stops
 3459              		.loc 1 2248 2 is_stmt 1 view .LVU936
2248:src/xeq.c     **** 		// RTN with empty stack stops
 3460              		.loc 1 2248 6 is_stmt 0 view .LVU937
 3461 0024 2368     		ldr	r3, [r4]
2248:src/xeq.c     **** 		// RTN with empty stack stops
 3462              		.loc 1 2248 5 view .LVU938
 3463 0026 B3F9E217 		ldrsh	r1, [r3, #2018]
 3464 002a 09B3     		cbz	r1, .L289
2252:src/xeq.c     **** 
 3465              		.loc 1 2252 1 view .LVU939
 3466 002c 70BD     		pop	{r4, r5, r6, pc}
 3467              	.LVL257:
 3468              	.L277:
2240:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
 3469              		.loc 1 2240 3 is_stmt 1 view .LVU940
 3470 002e 0546     		mov	r5, r0
 3471 0030 FFF7FEFF 		bl	retstk_up
 3472              	.LVL258:
2241:src/xeq.c     **** 		raw_set_pc(pc);
 3473              		.loc 1 2241 3 view .LVU941
2241:src/xeq.c     **** 		raw_set_pc(pc);
 3474              		.loc 1 2241 15 is_stmt 0 view .LVU942
 3475 0034 2268     		ldr	r2, [r4]
2241:src/xeq.c     **** 		raw_set_pc(pc);
 3476              		.loc 1 2241 6 view .LVU943
 3477 0036 1649     		ldr	r1, .L290+4
2241:src/xeq.c     **** 		raw_set_pc(pc);
 3478              		.loc 1 2241 14 view .LVU944
 3479 0038 B2F9E237 		ldrsh	r3, [r2, #2018]
2241:src/xeq.c     **** 		raw_set_pc(pc);
 3480              		.loc 1 2241 6 view .LVU945
 3481 003c 0968     		ldr	r1, [r1]
2241:src/xeq.c     **** 		raw_set_pc(pc);
 3482              		.loc 1 2241 14 view .LVU946
ARM GAS  /tmp/ccaPnj5t.s 			page 166


 3483 003e 03F10043 		add	r3, r3, #-2147483648
 3484 0042 013B     		subs	r3, r3, #1
 3485              	.LBB1541:
 3486              	.LBB1542:
 284:src/xeq.c     **** }
 3487              		.loc 1 284 2 view .LVU947
 3488 0044 0020     		movs	r0, #0
 3489              	.LBE1542:
 3490              	.LBE1541:
2241:src/xeq.c     **** 		raw_set_pc(pc);
 3491              		.loc 1 2241 6 view .LVU948
 3492 0046 31F81360 		ldrh	r6, [r1, r3, lsl #1]
 3493              	.LVL259:
2242:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
 3494              		.loc 1 2242 3 is_stmt 1 view .LVU949
 3495              	.LBB1544:
 3496              	.LBI1541:
 282:src/xeq.c     **** 	State.pc = pc;
 3497              		.loc 1 282 13 view .LVU950
 3498              	.LBB1543:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3499              		.loc 1 283 2 view .LVU951
 283:src/xeq.c     **** 	update_program_bounds(0);
 3500              		.loc 1 283 11 is_stmt 0 view .LVU952
 3501 004a A2F8E067 		strh	r6, [r2, #2016]	@ movhi
 284:src/xeq.c     **** }
 3502              		.loc 1 284 2 is_stmt 1 view .LVU953
 3503 004e FFF7FEFF 		bl	update_program_bounds
 3504              	.LVL260:
 284:src/xeq.c     **** }
 3505              		.loc 1 284 2 is_stmt 0 view .LVU954
 3506              	.LBE1543:
 3507              	.LBE1544:
2244:src/xeq.c     **** 			if (incpc())
 3508              		.loc 1 2244 3 is_stmt 1 view .LVU955
2244:src/xeq.c     **** 			if (incpc())
 3509              		.loc 1 2244 6 is_stmt 0 view .LVU956
 3510 0052 002D     		cmp	r5, #0
 3511 0054 E6D0     		beq	.L278
2244:src/xeq.c     **** 			if (incpc())
 3512              		.loc 1 2244 16 discriminator 1 view .LVU957
 3513 0056 3046     		mov	r0, r6
 3514 0058 FFF7FEFF 		bl	getprog
 3515              	.LVL261:
2244:src/xeq.c     **** 			if (incpc())
 3516              		.loc 1 2244 13 discriminator 1 view .LVU958
 3517 005c B0F5C17F 		cmp	r0, #386
 3518 0060 E0D0     		beq	.L278
2245:src/xeq.c     **** 				decpc();
 3519              		.loc 1 2245 4 is_stmt 1 view .LVU959
2245:src/xeq.c     **** 				decpc();
 3520              		.loc 1 2245 8 is_stmt 0 view .LVU960
 3521 0062 FFF7FEFF 		bl	incpc
 3522              	.LVL262:
2245:src/xeq.c     **** 				decpc();
 3523              		.loc 1 2245 7 view .LVU961
 3524 0066 0028     		cmp	r0, #0
ARM GAS  /tmp/ccaPnj5t.s 			page 167


 3525 0068 DCD0     		beq	.L278
2246:src/xeq.c     **** 	}
 3526              		.loc 1 2246 5 is_stmt 1 view .LVU962
 3527 006a FFF7FEFF 		bl	decpc
 3528              	.LVL263:
 3529 006e D9E7     		b	.L278
 3530              	.LVL264:
 3531              	.L289:
2250:src/xeq.c     **** 	}
 3532              		.loc 1 2250 3 view .LVU963
 3533              	.LBB1545:
 3534              	.LBI1545:
5154:src/xeq.c     **** 
5155:src/xeq.c     **** 
5156:src/xeq.c     **** /* Handle a command that takes an argument.  The argument is encoded
5157:src/xeq.c     ****  * in the low order bits of the opcode.  We also have to take
5158:src/xeq.c     ****  * account of the indirection flag and various limits.
5159:src/xeq.c     ****  */
5160:src/xeq.c     **** static void rargs(const opcode op) {
5161:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
5162:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
5163:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
5164:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
5165:src/xeq.c     **** 
5166:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5167:src/xeq.c     **** 
5168:src/xeq.c     **** 	process_cmdline();
5169:src/xeq.c     **** 
5170:src/xeq.c     **** 	if (cmd >= NUM_RARG) {
5171:src/xeq.c     **** 		illegal(op);
5172:src/xeq.c     **** 		return;
5173:src/xeq.c     **** 	}
5174:src/xeq.c     **** 	if (isNULL(argcmds[cmd].f)) {
5175:src/xeq.c     **** 		set_lift();
5176:src/xeq.c     **** 		return;
5177:src/xeq.c     **** 	}
5178:src/xeq.c     **** 
5179:src/xeq.c     **** 	if (ind) {
5180:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
5181:src/xeq.c     **** 			// Get the argument by reading a register
5182:src/xeq.c     **** 			int sgn;
5183:src/xeq.c     **** 			unsigned long long int regval;
5184:src/xeq.c     **** 
5185:src/xeq.c     **** 			if (arg > get_reg_limit(RARG_RCL, arg)) {
5186:src/xeq.c     **** 				// Invalid register specified for indirect access
5187:src/xeq.c     **** 				report_err(ERR_RANGE);
5188:src/xeq.c     **** 				return;
5189:src/xeq.c     **** 			}
5190:src/xeq.c     **** 			regval = get_reg_n_int_sgn(arg, &sgn);
5191:src/xeq.c     **** 			if ((regval >> 32) != 0)
5192:src/xeq.c     **** 				goto range;
5193:src/xeq.c     **** 			arg = (unsigned int) regval;
5194:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
5195:src/xeq.c     **** 				// negative arguments address local registers or flags
5196:src/xeq.c     **** 				arg = LOCAL_REG_BASE + arg;
5197:src/xeq.c     **** 			}
5198:src/xeq.c     **** 		} 
ARM GAS  /tmp/ccaPnj5t.s 			page 168


5199:src/xeq.c     **** 		else {
5200:src/xeq.c     **** 			// put the top bit back in
5201:src/xeq.c     **** 			arg |= RARG_IND;
5202:src/xeq.c     **** 		}
5203:src/xeq.c     **** 	}
5204:src/xeq.c     **** 	if (argcmds[cmd].reg) {
5205:src/xeq.c     **** 		// Range checking for registers against variable boundary
5206:src/xeq.c     **** 		lim = get_reg_limit(cmd, arg);
5207:src/xeq.c     **** 	}
5208:src/xeq.c     **** 	else if (argcmds[cmd].flag) {
5209:src/xeq.c     **** 		if (LocalRegs == 0)
5210:src/xeq.c     **** 			lim = NUMFLG - 1;
5211:src/xeq.c     **** 		else 
5212:src/xeq.c     **** 			lim = LOCAL_FLAG_BASE + MAX_LOCAL_DIRECT - 1;
5213:src/xeq.c     **** 	}
5214:src/xeq.c     **** 	if (arg > lim) {
5215:src/xeq.c     **** 		// Argument is too large
5216:src/xeq.c     **** range:		report_err(ERR_RANGE);
5217:src/xeq.c     **** 	}
5218:src/xeq.c     **** 	else if (argcmds[cmd].cmplx && arg >= TOPREALREG-1 && arg < NUMREG && (arg & 1)) {
5219:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
5220:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5221:src/xeq.c     **** 	}
5222:src/xeq.c     **** 	else {
5223:src/xeq.c     **** 		// Dispatch the command
5224:src/xeq.c     **** 		FP_RARG fp = (FP_RARG) EXPAND_ADDRESS(argcmds[cmd].f);
5225:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5226:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5227:src/xeq.c     **** 			if (argcmds[cmd].label) {
5228:src/xeq.c     **** 				XromUserPc = find_label_from(state_pc(), arg, 0);
5229:src/xeq.c     **** 				if (XromUserPc == 0)
5230:src/xeq.c     **** 					return;
5231:src/xeq.c     **** 				if (! Running)
5232:src/xeq.c     **** 					clrretstk();
5233:src/xeq.c     **** 			}
5234:src/xeq.c     **** 			else
5235:src/xeq.c     **** 				XromArg = (unsigned char) arg;
5236:src/xeq.c     **** #else
5237:src/xeq.c     **** 			XromUserPc = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
5238:src/xeq.c     **** 			if (XromUserPc == 0)
5239:src/xeq.c     **** 				return;
5240:src/xeq.c     **** 			if (! Running)
5241:src/xeq.c     **** 				clrretstk();
5242:src/xeq.c     **** #endif
5243:src/xeq.c     **** 			dispatch_xrom(fp);
5244:src/xeq.c     **** 			return;
5245:src/xeq.c     **** 		}
5246:src/xeq.c     **** 		else {
5247:src/xeq.c     **** 			fp(arg, (enum rarg)cmd);
5248:src/xeq.c     **** 		}
5249:src/xeq.c     **** 		if (cmd != RARG_XROM_OUT) {
5250:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
5251:src/xeq.c     **** 			set_lift();
5252:src/xeq.c     **** 		}
5253:src/xeq.c     **** 	}
5254:src/xeq.c     **** }
5255:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 169


5256:src/xeq.c     **** static void multi(const opcode op) {
5257:src/xeq.c     **** 	const int cmd = opDBL(op);
5258:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5259:src/xeq.c     **** 
5260:src/xeq.c     **** 	process_cmdline_set_lift();
5261:src/xeq.c     **** 
5262:src/xeq.c     **** 	if (cmd >= NUM_MULTI) {
5263:src/xeq.c     **** 		illegal(op);
5264:src/xeq.c     **** 		return;
5265:src/xeq.c     **** 	}
5266:src/xeq.c     **** 	if (isNULL(multicmds[cmd].f))	// LBL does nothing
5267:src/xeq.c     **** 		return;
5268:src/xeq.c     **** 	else {
5269:src/xeq.c     **** 		FP_MULTI fp = (FP_MULTI) EXPAND_ADDRESS(multicmds[cmd].f);
5270:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5271:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
5272:src/xeq.c     **** 			if (XromUserPc != 0) {
5273:src/xeq.c     **** 				if (! Running)
5274:src/xeq.c     **** 					clrretstk();
5275:src/xeq.c     **** 				dispatch_xrom(fp);
5276:src/xeq.c     **** 			}
5277:src/xeq.c     **** 			return;
5278:src/xeq.c     **** 		}
5279:src/xeq.c     **** 		else {
5280:src/xeq.c     **** 			fp(op, (enum multiops)cmd);
5281:src/xeq.c     **** 			set_lift();
5282:src/xeq.c     **** 		}
5283:src/xeq.c     **** 	}
5284:src/xeq.c     **** }
5285:src/xeq.c     **** 
5286:src/xeq.c     **** 
5287:src/xeq.c     **** 
5288:src/xeq.c     **** /* Main dispatch routine that decodes the top level of the opcode and
5289:src/xeq.c     ****  * goes to the appropriate lower level dispatch routine.
5290:src/xeq.c     ****  */
5291:src/xeq.c     **** void xeq(opcode op) 
5292:src/xeq.c     **** {
5293:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
5294:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
5295:src/xeq.c     **** 	const struct _ustate old = UState;
5296:src/xeq.c     **** 	const unsigned char lift = get_lift();
5297:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
5298:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
5299:src/xeq.c     **** #ifdef INFRARED
5300:src/xeq.c     **** 	int tracing;
5301:src/xeq.c     **** #endif
5302:src/xeq.c     **** 
5303:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
5304:src/xeq.c     **** 	if (op == (OP_NIL | OP_rCLX) || op == (OP_NIL | OP_CLSTK)) {
5305:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
5306:src/xeq.c     **** 		// valid input so no error message will be generated.
5307:src/xeq.c     **** 		CmdLineDot = 0;
5308:src/xeq.c     **** 		Cmdline[0] = '0';
5309:src/xeq.c     **** 		Cmdline[1] = '\0';
5310:src/xeq.c     **** 	}
5311:src/xeq.c     **** #endif
5312:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 170


5313:src/xeq.c     **** 	xcopy(save, StackBase, sizeof(save));
5314:src/xeq.c     **** #if defined(CONSOLE)
5315:src/xeq.c     **** 	instruction_count++;
5316:src/xeq.c     **** #endif
5317:src/xeq.c     **** #ifndef REALBUILD
5318:src/xeq.c     **** 	if (State2.trace && ! State2.sst) {
5319:src/xeq.c     **** 		char buf[16];
5320:src/xeq.c     **** 		if (Running)
5321:src/xeq.c     **** 			print_step(op);
5322:src/xeq.c     **** 		else
5323:src/xeq.c     **** 			sprintf(TraceBuffer, "%04X:%s", op, prt(op, buf));
5324:src/xeq.c     **** 		DispMsg = TraceBuffer;
5325:src/xeq.c     **** 	}
5326:src/xeq.c     **** #endif
5327:src/xeq.c     **** #ifdef INFRARED
5328:src/xeq.c     **** #ifdef REALBUILD
5329:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && ! is_xrom() && State2.runmode;
5330:src/xeq.c     **** #else
5331:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && (! is_xrom() || State2.trace) && State2.runmode;
5332:src/xeq.c     **** #endif
5333:src/xeq.c     **** 	Tracing = tracing;
5334:src/xeq.c     **** 	print_trace( op, 0 );
5335:src/xeq.c     **** #endif
5336:src/xeq.c     **** 	Busy = 0;
5337:src/xeq.c     **** 	State2.wascomplex = 0;
5338:src/xeq.c     **** 	if (isDBL(op))
5339:src/xeq.c     **** 		multi(op);
5340:src/xeq.c     **** 	else if (isRARG(op))
5341:src/xeq.c     **** 		rargs(op);
5342:src/xeq.c     **** 	else {
5343:src/xeq.c     **** 		XeqOpCode = (s_opcode) op;
5344:src/xeq.c     **** 		switch (opKIND(op)) {
5345:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
5346:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
5347:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
5348:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
5349:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
5350:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
5351:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
5352:src/xeq.c     **** 		default:	illegal(op);
5353:src/xeq.c     **** 		}
5354:src/xeq.c     **** 	}
5355:src/xeq.c     **** #if INTERRUPT_XROM_TICKS > 0
5356:src/xeq.c     **** 	if (OnKeyTicks >= INTERRUPT_XROM_TICKS) {
5357:src/xeq.c     **** 		report_err(ERR_INTERRUPTED);
5358:src/xeq.c     **** 		while (get_key() >= 0) { } // Empty keyboard buffer
5359:src/xeq.c     **** 	}
5360:src/xeq.c     **** #endif
5361:src/xeq.c     **** 
5362:src/xeq.c     **** 	if (Error != ERR_NONE) {
5363:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
5364:src/xeq.c     **** 		error_message( Error );
5365:src/xeq.c     **** 		// Repair stack and state
5366:src/xeq.c     **** 		// Clear return stack
5367:src/xeq.c     **** 		xcopy(StackBase, save, sizeof(save));
5368:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
5369:src/xeq.c     **** 		UState = old;
ARM GAS  /tmp/ccaPnj5t.s 			page 171


5370:src/xeq.c     **** 		State2.state_lift = lift;
5371:src/xeq.c     **** 		raw_set_pc(old_pc);
5372:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
5373:src/xeq.c     **** 		process_cmdline_set_lift();
5374:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
5375:src/xeq.c     **** 		// wrong with the command line, e.g. it had a partially entered fraction
5376:src/xeq.c     **** 		Error = ERR_NONE;
5377:src/xeq.c     **** 		if (Running || XromRunning) {
5378:src/xeq.c     **** #ifndef REALBUILD
5379:src/xeq.c     **** 			if (State2.trace ) {
5380:src/xeq.c     **** 				// Special handling for debug environment
5381:src/xeq.c     **** 				if (XromFlags.xIN) {
5382:src/xeq.c     **** 					// Restore the global return stack
5383:src/xeq.c     **** 					RetStk = XromUserRetStk;
5384:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5385:src/xeq.c     **** 					// Restore private stack to normal stack
5386:src/xeq.c     **** 					if (! XromFlags.mode_double && NumRegs < STACK_SIZE + EXTRA_REG) {
5387:src/xeq.c     **** 						// Need space for double precision stack
5388:src/xeq.c     **** 						cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
5389:src/xeq.c     **** 					}
5390:src/xeq.c     **** 					XromFlags.xIN = 0;		// Clear flag before get_reg_n!
5391:src/xeq.c     **** 					if (Error == ERR_NONE) {
5392:src/xeq.c     **** 						UState.mode_double = 1;
5393:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
5394:src/xeq.c     **** 					}
5395:src/xeq.c     **** 					else
5396:src/xeq.c     **** 						Error = ERR_NONE;	// Not enough RAM, can't restore
5397:src/xeq.c     **** 				}
5398:src/xeq.c     **** 			}
5399:src/xeq.c     **** 			else {
5400:src/xeq.c     **** #endif
5401:src/xeq.c     **** 				unsigned short int pc = state_pc();
5402:src/xeq.c     **** 				if (XromFlags.xIN) {
5403:src/xeq.c     **** 					// Restore state to before xIN
5404:src/xeq.c     **** 					XromFlags.xIN = 0;
5405:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
5406:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
5407:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
5408:src/xeq.c     **** 					// Restore the global return stack
5409:src/xeq.c     **** 					RetStk = XromUserRetStk;
5410:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5411:src/xeq.c     **** 				}
5412:src/xeq.c     **** 				while (isXROM(pc)) {
5413:src/xeq.c     **** 					// Leave XROM
5414:src/xeq.c     **** 					if (RetStkPtr != 0) {
5415:src/xeq.c     **** 						retstk_up();
5416:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
5417:src/xeq.c     **** 					}
5418:src/xeq.c     **** 					if (RetStkPtr == 0)
5419:src/xeq.c     **** 						++pc; // compensate for decpc below
5420:src/xeq.c     **** 				}
5421:src/xeq.c     **** 				raw_set_pc(pc);
5422:src/xeq.c     **** #ifndef REALBUILD
5423:src/xeq.c     **** 			}
5424:src/xeq.c     **** #endif
5425:src/xeq.c     **** 			decpc();		// Back to error instruction
5426:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
ARM GAS  /tmp/ccaPnj5t.s 			page 172


5427:src/xeq.c     **** 
5428:src/xeq.c     **** 			set_running_off();
5429:src/xeq.c     **** 		}
5430:src/xeq.c     **** 	} 
5431:src/xeq.c     **** 	reset_volatile_state();
5432:src/xeq.c     **** #ifdef INFRARED
5433:src/xeq.c     **** 	Tracing = tracing;
5434:src/xeq.c     **** 	print_trace( op, 1 );
5435:src/xeq.c     **** #endif
5436:src/xeq.c     **** }
5437:src/xeq.c     **** 
5438:src/xeq.c     **** /* Execute a single step and return.
5439:src/xeq.c     ****  */
5440:src/xeq.c     **** static void xeq_single(void) {
5441:src/xeq.c     **** 	const opcode op = getprog(state_pc());
5442:src/xeq.c     **** 
5443:src/xeq.c     **** 	incpc();
5444:src/xeq.c     **** 	xeq(op);
5445:src/xeq.c     **** }
5446:src/xeq.c     **** 
5447:src/xeq.c     **** /* Continue execution trough xrom code
5448:src/xeq.c     ****  */
5449:src/xeq.c     **** #ifdef REALBUILD
5450:src/xeq.c     **** void xeq_xrom(void) {
5451:src/xeq.c     **** #else
5452:src/xeq.c     **** static void xeq_xrom2(void) {
5453:src/xeq.c     **** #endif
5454:src/xeq.c     **** 	int count = 0;
5455:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
5456:src/xeq.c     **** 	 * we break free.
5457:src/xeq.c     **** 	 */
5458:src/xeq.c     **** 	  while (!Pause && is_xrom() && RetStkPtr != 0) {
5459:src/xeq.c     **** 		XromRunning = 1;
5460:src/xeq.c     **** 		xeq_single();
5461:src/xeq.c     **** 		XromRunning = 0;
5462:src/xeq.c     **** 		if ((++count & 31) == 0)
5463:src/xeq.c     **** 			busy();
5464:src/xeq.c     **** 		  if (Pause)
5465:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
5466:src/xeq.c     **** 			// Switch to Running mode to force continued execution.
5467:src/xeq.c     **** 			Running = 1;
5468:src/xeq.c     **** 		
5469:src/xeq.c     **** 	}
5470:src/xeq.c     **** }
5471:src/xeq.c     **** 
5472:src/xeq.c     **** #ifndef REALBUILD
5473:src/xeq.c     **** void xeq_xrom(void) {
5474:src/xeq.c     **** 	// We split the routine in two parts for debugging only
5475:src/xeq.c     **** 	if (! State2.trace)
5476:src/xeq.c     **** 		xeq_xrom2();
5477:src/xeq.c     **** }
5478:src/xeq.c     **** #endif
5479:src/xeq.c     **** 
5480:src/xeq.c     **** /* Check to see if we're running a program and if so execute it
5481:src/xeq.c     ****  * for a while.
5482:src/xeq.c     ****  *
5483:src/xeq.c     ****  */
ARM GAS  /tmp/ccaPnj5t.s 			page 173


5484:src/xeq.c     **** 
5485:src/xeq.c     **** /*
5486:src/xeq.c     **** 'Pause' is true if Pause is non-zero, i.e., if the pause is still running.
5487:src/xeq.c     **** */
5488:src/xeq.c     ****  void xeqprog(void) 
5489:src/xeq.c     ****  {
5490:src/xeq.c     ****    int state = 0;
5491:src/xeq.c     ****    if (Running || Pause) {
5492:src/xeq.c     **** 
5493:src/xeq.c     **** #if !(defined(CONSOLE)) && !(defined(DM42))
5494:src/xeq.c     ****      long long last_ticker = Ticker;
5495:src/xeq.c     ****      state = ((int) last_ticker % (2*TICKS_PER_FLASH) < TICKS_PER_FLASH);
5496:src/xeq.c     **** #else
5497:src/xeq.c     ****      state = 1;
5498:src/xeq.c     **** #endif
5499:src/xeq.c     ****      
5500:src/xeq.c     ****      //     print_debug(100,state);
5501:src/xeq.c     ****      dot(RCL_annun, state);
5502:src/xeq.c     ****      finish_RPN(); // RPN
5503:src/xeq.c     **** 
5504:src/xeq.c     ****      while (! Pause && Running) {
5505:src/xeq.c     ****        xeq_single();
5506:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
5507:src/xeq.c     ****        if (is_key_pressed())
5508:src/xeq.c     **** 	 {
5509:src/xeq.c     **** 	 // Key press or heart beat
5510:src/xeq.c     **** 	 // Note: DM42 doesn't have real heart beat so no flash
5511:src/xeq.c     **** 	 // xeq_xrom(); // Already done by dispatch_xrom()
5512:src/xeq.c     **** 	 break;
5513:src/xeq.c     ****        }
5514:src/xeq.c     ****      }
5515:src/xeq.c     ****    }
5516:src/xeq.c     ****    if (! Running && ! Pause) {	  
5517:src/xeq.c     ****      // Program has terminated
5518:src/xeq.c     ****      clr_dot(RCL_annun);
5519:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
5520:src/xeq.c     ****      display();
5521:src/xeq.c     ****      if (ShowRPN) {
5522:src/xeq.c     ****        set_dot(RPN);
5523:src/xeq.c     ****        finish_RPN(); // RPN
5524:src/xeq.c     ****      }
5525:src/xeq.c     **** #ifndef CONSOLE
5526:src/xeq.c     ****      // Avoid accidental restart with R/S or APD after program ends
5527:src/xeq.c     ****      JustStopped = 1;
5528:src/xeq.c     **** #endif
5529:src/xeq.c     ****    }
5530:src/xeq.c     ****  }
5531:src/xeq.c     **** 
5532:src/xeq.c     **** /* Single step and back step routine
5533:src/xeq.c     ****  */
5534:src/xeq.c     **** void xeq_sst_bst(int kind) 
5535:src/xeq.c     **** {
5536:src/xeq.c     **** 	opcode op;
5537:src/xeq.c     **** 
5538:src/xeq.c     **** 	reset_volatile_state();
5539:src/xeq.c     **** 	if (kind == -1)
5540:src/xeq.c     **** 		decpc();
ARM GAS  /tmp/ccaPnj5t.s 			page 174


5541:src/xeq.c     **** 
5542:src/xeq.c     **** 	if (State2.runmode) {
5543:src/xeq.c     **** 		// Display the step
5544:src/xeq.c     **** 		op = getprog(state_pc());
5545:src/xeq.c     **** 		print_step(op);
5546:src/xeq.c     **** 		if (kind == 1) {
5547:src/xeq.c     **** 			// Execute the step on key up
5548:src/xeq.c     **** #ifndef REALBUILD
5549:src/xeq.c     **** 			State2.sst = 1;
5550:src/xeq.c     **** #endif
5551:src/xeq.c     **** 			set_running_on_sst();
5552:src/xeq.c     **** 			incpc();
5553:src/xeq.c     **** 			xeq(op);
5554:src/xeq.c     **** #ifndef REALBUILD
5555:src/xeq.c     **** 			State2.sst = 0;
5556:src/xeq.c     **** #endif
5557:src/xeq.c     **** 			xeq_xrom();  // necessary for code called from XROM
5558:src/xeq.c     **** 			set_running_off_sst();
5559:src/xeq.c     **** 		}
5560:src/xeq.c     **** 	}
5561:src/xeq.c     **** 	else if (kind == 0) {
5562:src/xeq.c     **** 		// Key down in program mode
5563:src/xeq.c     **** 		incpc();
5564:src/xeq.c     **** 		OpCode = 0;
5565:src/xeq.c     **** 	}
5566:src/xeq.c     **** }
5567:src/xeq.c     **** 
5568:src/xeq.c     **** 
5569:src/xeq.c     **** /*
5570:src/xeq.c     ****  *  User command to start or stop execution
5571:src/xeq.c     ****  */
5572:src/xeq.c     **** void op_rs(enum nilop op) {
5573:src/xeq.c     **** #ifndef REALBUILD
5574:src/xeq.c     **** 	// This is for debugging purposes only
5575:src/xeq.c     **** 	// STOP does not appear in XROM normally
5576:src/xeq.c     **** 	if (is_xrom()) {
5577:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
5578:src/xeq.c     **** 			Running = XromRunning = 0;
5579:src/xeq.c     **** 		}
5580:src/xeq.c     **** 		else {
5581:src/xeq.c     **** 			xeq_xrom2();
5582:src/xeq.c     **** 		}
5583:src/xeq.c     **** 		return;
5584:src/xeq.c     **** 	}
5585:src/xeq.c     **** #endif
5586:src/xeq.c     **** 	if (Running)
5587:src/xeq.c     **** 		set_running_off();
5588:src/xeq.c     **** 	else {
5589:src/xeq.c     **** 		set_running_on();
5590:src/xeq.c     **** 		if (RetStkPtr == 0)
5591:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
5592:src/xeq.c     **** 	}
5593:src/xeq.c     **** }
5594:src/xeq.c     **** 
5595:src/xeq.c     **** 
5596:src/xeq.c     **** /* 
5597:src/xeq.c     ****  *  The following needs to be done each time before any user input is processed.
ARM GAS  /tmp/ccaPnj5t.s 			page 175


5598:src/xeq.c     ****  *  On the hardware, RAM is volatile and these pointers and structures need valid values!
5599:src/xeq.c     ****  */
5600:src/xeq.c     **** void xeq_init_contexts(void) {
5601:src/xeq.c     **** 	/*
5602:src/xeq.c     **** 	 *  Compute the sizes of the various memory portions
5603:src/xeq.c     **** 	 */
5604:src/xeq.c     **** 	short int s;
5605:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
5606:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
5607:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
5608:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
5609:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
5610:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
5611:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5612:src/xeq.c     **** 
5613:src/xeq.c     **** 	/*
5614:src/xeq.c     **** 	 *  Initialise our standard contexts.
5615:src/xeq.c     **** 	 *  We bump the digits for internal calculations.
5616:src/xeq.c     **** 	 */
5617:src/xeq.c     **** 	decContextDefault(&Ctx, DEC_INIT_BASE);
5618:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
5619:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
5620:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
5621:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
5622:src/xeq.c     **** }
5623:src/xeq.c     **** 
5624:src/xeq.c     **** 
5625:src/xeq.c     **** 
5626:src/xeq.c     **** #ifdef INCLUDE_PLOTTING
5627:src/xeq.c     **** /*
5628:src/xeq.c     ****  *  Plotting commands
5629:src/xeq.c     ****  *
5630:src/xeq.c     ****  *  The plot buffer is a range of registers that is treated as pixel data
5631:src/xeq.c     ****  *  The first byte contains the length of the buffer in columns (bytes)
5632:src/xeq.c     ****  */
5633:src/xeq.c     **** 
5634:src/xeq.c     **** /*
5635:src/xeq.c     ****  *  Check register range and return a pointer to the plot data.
5636:src/xeq.c     ****  */
5637:src/xeq.c     **** unsigned char *plot_check_range( int arg, int width, int height )
5638:src/xeq.c     **** {
5639:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
5640:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
5641:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
5642:src/xeq.c     **** 	int bytes;
5643:src/xeq.c     **** 
5644:src/xeq.c     **** 	if ( width == 0 ) {
5645:src/xeq.c     **** 		width = (int) *p;
5646:src/xeq.c     **** 		height = (int) p[ 1 ];
5647:src/xeq.c     **** 	}
5648:src/xeq.c     **** 
5649:src/xeq.c     **** 	/*
5650:src/xeq.c     **** 	 *  Compute total number of bytes
5651:src/xeq.c     **** 	 */
5652:src/xeq.c     **** 	bytes = 2 + width * height;
5653:src/xeq.c     **** 
5654:src/xeq.c     **** 	/*
ARM GAS  /tmp/ccaPnj5t.s 			page 176


5655:src/xeq.c     **** 	 *  Check if we have enough room
5656:src/xeq.c     **** 	 */
5657:src/xeq.c     **** 	if ( width > PAPER_WIDTH || arg + ( bytes + n - 1 ) / n > lim ) {
5658:src/xeq.c     **** 		report_err( ERR_RANGE );
5659:src/xeq.c     **** 		return (unsigned char *) NULL;
5660:src/xeq.c     **** 	}
5661:src/xeq.c     **** 	return p;
5662:src/xeq.c     **** }
5663:src/xeq.c     **** 
5664:src/xeq.c     **** /*
5665:src/xeq.c     ****  * Set up for graphical object display.
5666:src/xeq.c     ****  */
5667:src/xeq.c     **** void cmdplotdisplay( unsigned int arg, enum rarg op )
5668:src/xeq.c     **** {
5669:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
5670:src/xeq.c     **** 		DispPlot = arg + 1;
5671:src/xeq.c     **** 		frozen_display();
5672:src/xeq.c     **** 	}
5673:src/xeq.c     **** }
5674:src/xeq.c     **** 
5675:src/xeq.c     **** /*
5676:src/xeq.c     ****  *  Initialize a block of registers to act as a buffer for plotting
5677:src/xeq.c     ****  *  X contains the maximum width (<= 0 is default: 166)
5678:src/xeq.c     ****  */
5679:src/xeq.c     **** void cmdplotinit( unsigned int arg, enum rarg op )
5680:src/xeq.c     **** {
5681:src/xeq.c     **** 	int sgnx, sgny;
5682:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
5683:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
5684:src/xeq.c     **** 	unsigned char *p;
5685:src/xeq.c     **** 	
5686:src/xeq.c     **** 	if ( sgnx || width == 0 ) {
5687:src/xeq.c     **** 		width = PAPER_WIDTH;
5688:src/xeq.c     **** 	}
5689:src/xeq.c     **** 	if ( sgny || height == 0 ) {
5690:src/xeq.c     **** 		height = 1;
5691:src/xeq.c     **** 	}
5692:src/xeq.c     **** 	else {
5693:src/xeq.c     **** 		/*
5694:src/xeq.c     **** 		 *  Make height count the byte rows
5695:src/xeq.c     **** 		 */
5696:src/xeq.c     **** 		height = ( height + 7 ) >> 3;
5697:src/xeq.c     **** 	}
5698:src/xeq.c     **** 
5699:src/xeq.c     **** 	p = plot_check_range( arg, width, height );
5700:src/xeq.c     **** 	if ( p != NULL ) {
5701:src/xeq.c     **** 		*p++ = (unsigned char) width;
5702:src/xeq.c     **** 		*p++ = (unsigned char) height;
5703:src/xeq.c     **** 		xset( p, 0, width * height );
5704:src/xeq.c     **** 	}
5705:src/xeq.c     **** }
5706:src/xeq.c     **** 
5707:src/xeq.c     **** /*
5708:src/xeq.c     ****  *  Return the width and height of the plotting block
5709:src/xeq.c     ****  */
5710:src/xeq.c     **** void cmdplotdim( unsigned int arg, enum rarg op )
5711:src/xeq.c     **** {
ARM GAS  /tmp/ccaPnj5t.s 			page 177


5712:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5713:src/xeq.c     **** 	if ( p != NULL ) {
5714:src/xeq.c     **** 		lift2_if_enabled();
5715:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
5716:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
5717:src/xeq.c     **** 	}
5718:src/xeq.c     **** }
5719:src/xeq.c     **** 
5720:src/xeq.c     **** /*
5721:src/xeq.c     ****  *  All pixel related commands
5722:src/xeq.c     ****  *  X is the horizontal position 0..width
5723:src/xeq.c     ****  *  Y is the vertical position 0..7
5724:src/xeq.c     ****  */
5725:src/xeq.c     **** void cmdplotpixel( unsigned int arg, enum rarg op )
5726:src/xeq.c     **** {
5727:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5728:src/xeq.c     **** 	if ( p != NULL ) {
5729:src/xeq.c     **** 		/*
5730:src/xeq.c     **** 		 *  Get row from Y
5731:src/xeq.c     **** 		 */
5732:src/xeq.c     **** 		int sgn;
5733:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
5734:src/xeq.c     **** 		int pix = 0;
5735:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
5736:src/xeq.c     **** 			/*
5737:src/xeq.c     **** 			 *  Row is OK, get column from X
5738:src/xeq.c     **** 			 */
5739:src/xeq.c     **** 			unsigned int width = (unsigned int) *p;
5740:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
5741:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
5742:src/xeq.c     **** 				/*
5743:src/xeq.c     **** 				 *  Modify the bit in the correct byte
5744:src/xeq.c     **** 				 */
5745:src/xeq.c     **** 				pix = 1 << ( row & 7 );
5746:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
5747:src/xeq.c     **** 
5748:src/xeq.c     **** 				if ( op == RARG_PLOT_SETPIX ) {
5749:src/xeq.c     **** 					*p |= pix;
5750:src/xeq.c     **** 				}
5751:src/xeq.c     **** 				else if ( op == RARG_PLOT_CLRPIX ) {
5752:src/xeq.c     **** 					*p &= ~pix;
5753:src/xeq.c     **** 				}
5754:src/xeq.c     **** 				else if ( op == RARG_PLOT_FLIPPIX ) {
5755:src/xeq.c     **** 					*p ^= pix;
5756:src/xeq.c     **** 				}
5757:src/xeq.c     **** 			}
5758:src/xeq.c     **** 		}
5759:src/xeq.c     **** 		if ( op == RARG_PLOT_ISSET ) {
5760:src/xeq.c     **** 			fin_tst( *p & pix );
5761:src/xeq.c     **** 		}
5762:src/xeq.c     **** 	}
5763:src/xeq.c     **** }
5764:src/xeq.c     **** #endif
5765:src/xeq.c     **** 
5766:src/xeq.c     **** 
5767:src/xeq.c     **** /*
5768:src/xeq.c     ****  *  We don't allow some commands from a running program
ARM GAS  /tmp/ccaPnj5t.s 			page 178


5769:src/xeq.c     ****  */
5770:src/xeq.c     **** int not_running(void) {
5771:src/xeq.c     **** 	if ( Running ) {
5772:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5773:src/xeq.c     **** 		return 0;
5774:src/xeq.c     **** 	}
5775:src/xeq.c     **** 	return 1;
5776:src/xeq.c     **** }
5777:src/xeq.c     **** 
5778:src/xeq.c     **** /*
5779:src/xeq.c     ****  *  Handle the Running Flag
5780:src/xeq.c     ****  */
5781:src/xeq.c     **** void set_running_off_sst() {
5782:src/xeq.c     **** 	Running = 0;
5783:src/xeq.c     **** }
5784:src/xeq.c     **** 
5785:src/xeq.c     **** void set_running_on_sst() {
5786:src/xeq.c     **** 	Running = 1;
5787:src/xeq.c     **** }
5788:src/xeq.c     **** 
5789:src/xeq.c     **** void set_running_off() {
 3535              		.loc 1 5789 6 view .LVU964
 3536              	.LBB1546:
5790:src/xeq.c     **** 	set_running_off_sst();
 3537              		.loc 1 5790 2 view .LVU965
 3538              	.LBB1547:
 3539              	.LBI1547:
5781:src/xeq.c     **** 	Running = 0;
 3540              		.loc 1 5781 6 view .LVU966
 3541              	.LBB1548:
5782:src/xeq.c     **** }
 3542              		.loc 1 5782 2 view .LVU967
5782:src/xeq.c     **** }
 3543              		.loc 1 5782 10 is_stmt 0 view .LVU968
 3544 0070 084A     		ldr	r2, .L290+8
 3545 0072 1160     		str	r1, [r2]
 3546              	.LBE1548:
 3547              	.LBE1547:
5791:src/xeq.c     **** 	State.entryp = 0;
 3548              		.loc 1 5791 2 is_stmt 1 view .LVU969
 3549              		.loc 1 5791 15 is_stmt 0 view .LVU970
 3550 0074 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 3551 0078 61F30412 		bfi	r2, r1, #4, #1
 3552 007c 83F8DD27 		strb	r2, [r3, #2013]
5792:src/xeq.c     **** 	dot( RCL_annun, 0);
 3553              		.loc 1 5792 2 is_stmt 1 view .LVU971
 3554              	.LBE1546:
 3555              	.LBE1545:
2252:src/xeq.c     **** 
 3556              		.loc 1 2252 1 is_stmt 0 view .LVU972
 3557 0080 BDE87040 		pop	{r4, r5, r6, lr}
 3558              		.cfi_restore 14
 3559              		.cfi_restore 6
 3560              		.cfi_restore 5
 3561              		.cfi_restore 4
 3562              		.cfi_def_cfa_offset 0
 3563              	.LBB1550:
ARM GAS  /tmp/ccaPnj5t.s 			page 179


 3564              	.LBB1549:
 3565              		.loc 1 5792 2 view .LVU973
 3566 0084 8A20     		movs	r0, #138
 3567 0086 FFF7FEBF 		b	dot
 3568              	.LVL265:
 3569              	.L291:
 3570 008a 00BF     		.align	2
 3571              	.L290:
 3572 008c 00000000 		.word	main_ram
 3573 0090 00000000 		.word	RetStk
 3574 0094 00000000 		.word	Running
 3575              	.LBE1549:
 3576              	.LBE1550:
 3577              		.cfi_endproc
 3578              	.LFE153:
 3580              		.section	.text.user_pc,"ax",%progbits
 3581              		.align	1
 3582              		.p2align 2,,3
 3583              		.global	user_pc
 3584              		.syntax unified
 3585              		.thumb
 3586              		.thumb_func
 3587              		.fpu fpv4-sp-d16
 3589              	user_pc:
 3590              	.LVL266:
 3591              	.LFB25:
 488:src/xeq.c     **** 	unsigned int n = 1;
 3592              		.loc 1 488 39 is_stmt 1 view -0
 3593              		.cfi_startproc
 3594              		@ args = 0, pretend = 0, frame = 0
 3595              		@ frame_needed = 0, uses_anonymous_args = 0
 3596              		@ link register save eliminated.
 489:src/xeq.c     **** 	unsigned int base;
 3597              		.loc 1 489 2 view .LVU975
 490:src/xeq.c     **** 
 3598              		.loc 1 490 2 view .LVU976
 493:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3599              		.loc 1 493 2 view .LVU977
 493:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3600              		.loc 1 493 5 is_stmt 0 view .LVU978
 3601 0000 0346     		mov	r3, r0
 3602 0002 20B1     		cbz	r0, .L293
 493:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3603              		.loc 1 493 17 discriminator 1 view .LVU979
 3604 0004 820B     		lsrs	r2, r0, #14
 493:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3605              		.loc 1 493 14 discriminator 1 view .LVU980
 3606 0006 032A     		cmp	r2, #3
 3607 0008 01D0     		beq	.L293
 3608 000a FFF7FEBF 		b	user_pc.part.0
 3609              	.LVL267:
 3610              	.L293:
 494:src/xeq.c     **** #else
 3611              		.loc 1 494 3 is_stmt 1 view .LVU981
 494:src/xeq.c     **** #else
 3612              		.loc 1 494 24 is_stmt 0 view .LVU982
 3613 000e C3F30D00 		ubfx	r0, r3, #0, #14
ARM GAS  /tmp/ccaPnj5t.s 			page 180


 3614              	.LVL268:
 507:src/xeq.c     **** 
 3615              		.loc 1 507 1 view .LVU983
 3616 0012 7047     		bx	lr
 3617              		.cfi_endproc
 3618              	.LFE25:
 3620              		.section	.text.find_user_pc,"ax",%progbits
 3621              		.align	1
 3622              		.p2align 2,,3
 3623              		.global	find_user_pc
 3624              		.syntax unified
 3625              		.thumb
 3626              		.thumb_func
 3627              		.fpu fpv4-sp-d16
 3629              	find_user_pc:
 3630              	.LVL269:
 3631              	.LFB26:
 511:src/xeq.c     **** 	unsigned int upc = state_pc();
 3632              		.loc 1 511 48 is_stmt 1 view -0
 3633              		.cfi_startproc
 3634              		@ args = 0, pretend = 0, frame = 0
 3635              		@ frame_needed = 0, uses_anonymous_args = 0
 512:src/xeq.c     **** 	const int libp = isLIB(upc);
 3636              		.loc 1 512 2 view .LVU985
 511:src/xeq.c     **** 	unsigned int upc = state_pc();
 3637              		.loc 1 511 48 is_stmt 0 view .LVU986
 3638 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3639              		.cfi_def_cfa_offset 24
 3640              		.cfi_offset 3, -24
 3641              		.cfi_offset 4, -20
 3642              		.cfi_offset 5, -16
 3643              		.cfi_offset 6, -12
 3644              		.cfi_offset 7, -8
 3645              		.cfi_offset 14, -4
 512:src/xeq.c     **** 	const int libp = isLIB(upc);
 3646              		.loc 1 512 21 view .LVU987
 3647 0002 124B     		ldr	r3, .L309
 3648 0004 1B68     		ldr	r3, [r3]
 3649 0006 B3F8E037 		ldrh	r3, [r3, #2016]
 3650              	.LVL270:
 513:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 3651              		.loc 1 513 2 is_stmt 1 view .LVU988
 514:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3652              		.loc 1 514 2 view .LVU989
 514:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3653              		.loc 1 514 43 is_stmt 0 view .LVU990
 3654 000a 13F44044 		ands	r4, r3, #49152
 3655              	.LVL271:
 514:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3656              		.loc 1 514 43 view .LVU991
 3657 000e 1ABF     		itte	ne
 3658 0010 03F44045 		andne	r5, r3, #49152
 3659 0014 0135     		addne	r5, r5, #1
 3660 0016 2546     		moveq	r5, r4
 3661              	.LVL272:
 515:src/xeq.c     **** #ifndef REALBUILD
 3662              		.loc 1 515 2 is_stmt 1 view .LVU992
ARM GAS  /tmp/ccaPnj5t.s 			page 181


 517:src/xeq.c     **** 		return addrXROM(target);
 3663              		.loc 1 517 6 is_stmt 0 view .LVU993
 3664 0018 9B0B     		lsrs	r3, r3, #14
 3665              	.LVL273:
 515:src/xeq.c     **** #ifndef REALBUILD
 3666              		.loc 1 515 28 view .LVU994
 3667 001a 003C     		subs	r4, r4, #0
 515:src/xeq.c     **** #ifndef REALBUILD
 3668              		.loc 1 515 28 view .LVU995
 3669 001c 18BF     		it	ne
 3670 001e 0124     		movne	r4, #1
 3671              	.LVL274:
 517:src/xeq.c     **** 		return addrXROM(target);
 3672              		.loc 1 517 2 is_stmt 1 view .LVU996
 517:src/xeq.c     **** 		return addrXROM(target);
 3673              		.loc 1 517 5 is_stmt 0 view .LVU997
 3674 0020 032B     		cmp	r3, #3
 511:src/xeq.c     **** 	unsigned int upc = state_pc();
 3675              		.loc 1 511 48 view .LVU998
 3676 0022 0646     		mov	r6, r0
 517:src/xeq.c     **** 		return addrXROM(target);
 3677              		.loc 1 517 5 view .LVU999
 3678 0024 0ED0     		beq	.L307
 3679              	.LBB1551:
 523:src/xeq.c     **** 			return oldbase;
 3680              		.loc 1 523 7 view .LVU1000
 3681 0026 0A4F     		ldr	r7, .L309+4
 3682 0028 05E0     		b	.L302
 3683              	.LVL275:
 3684              	.L304:
 522:src/xeq.c     **** 		if (PcWrapped)
 3685              		.loc 1 522 10 view .LVU1001
 3686 002a FFF7FEFF 		bl	do_inc
 3687              	.LVL276:
 523:src/xeq.c     **** 			return oldbase;
 3688              		.loc 1 523 6 view .LVU1002
 3689 002e 3B68     		ldr	r3, [r7]
 3690              	.LVL277:
 523:src/xeq.c     **** 			return oldbase;
 3691              		.loc 1 523 3 is_stmt 1 view .LVU1003
 3692 0030 0134     		adds	r4, r4, #1
 3693              	.LVL278:
 523:src/xeq.c     **** 			return oldbase;
 3694              		.loc 1 523 6 is_stmt 0 view .LVU1004
 3695 0032 2BB9     		cbnz	r3, .L300
 522:src/xeq.c     **** 		if (PcWrapped)
 3696              		.loc 1 522 10 view .LVU1005
 3697 0034 0546     		mov	r5, r0
 3698              	.LVL279:
 3699              	.L302:
 521:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 3700              		.loc 1 521 3 is_stmt 1 view .LVU1006
 522:src/xeq.c     **** 		if (PcWrapped)
 3701              		.loc 1 522 3 view .LVU1007
 522:src/xeq.c     **** 		if (PcWrapped)
 3702              		.loc 1 522 3 is_stmt 0 view .LVU1008
 3703              	.LBE1551:
ARM GAS  /tmp/ccaPnj5t.s 			page 182


 520:src/xeq.c     **** 		const unsigned int oldbase = base;
 3704              		.loc 1 520 8 is_stmt 1 view .LVU1009
 520:src/xeq.c     **** 		const unsigned int oldbase = base;
 3705              		.loc 1 520 8 is_stmt 0 view .LVU1010
 3706 0036 A642     		cmp	r6, r4
 3707              	.LBB1552:
 522:src/xeq.c     **** 		if (PcWrapped)
 3708              		.loc 1 522 10 view .LVU1011
 3709 0038 2846     		mov	r0, r5
 3710 003a 4FF00001 		mov	r1, #0
 3711              	.LBE1552:
 520:src/xeq.c     **** 		const unsigned int oldbase = base;
 3712              		.loc 1 520 8 view .LVU1012
 3713 003e F4D8     		bhi	.L304
 3714              	.LVL280:
 3715              	.L300:
 527:src/xeq.c     **** 
 3716              		.loc 1 527 1 view .LVU1013
 3717 0040 2846     		mov	r0, r5
 3718              	.LVL281:
 527:src/xeq.c     **** 
 3719              		.loc 1 527 1 view .LVU1014
 3720 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3721              	.LVL282:
 3722              	.L307:
 518:src/xeq.c     **** #endif
 3723              		.loc 1 518 3 is_stmt 1 view .LVU1015
 518:src/xeq.c     **** #endif
 3724              		.loc 1 518 10 is_stmt 0 view .LVU1016
 3725 0044 40F44045 		orr	r5, r0, #49152
 3726              	.LVL283:
 527:src/xeq.c     **** 
 3727              		.loc 1 527 1 view .LVU1017
 3728 0048 2846     		mov	r0, r5
 3729              	.LVL284:
 527:src/xeq.c     **** 
 3730              		.loc 1 527 1 view .LVU1018
 3731 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3732              	.LVL285:
 3733              	.L310:
 527:src/xeq.c     **** 
 3734              		.loc 1 527 1 view .LVU1019
 3735              		.align	2
 3736              	.L309:
 3737 004c 00000000 		.word	main_ram
 3738 0050 00000000 		.word	PcWrapped
 3739              		.cfi_endproc
 3740              	.LFE26:
 3742              		.section	.text.report_err,"ax",%progbits
 3743              		.align	1
 3744              		.p2align 2,,3
 3745              		.global	report_err
 3746              		.syntax unified
 3747              		.thumb
 3748              		.thumb_func
 3749              		.fpu fpv4-sp-d16
 3751              	report_err:
ARM GAS  /tmp/ccaPnj5t.s 			page 183


 3752              	.LVL286:
 3753              	.LFB28:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3754              		.loc 1 540 38 is_stmt 1 view -0
 3755              		.cfi_startproc
 3756              		@ args = 0, pretend = 0, frame = 0
 3757              		@ frame_needed = 0, uses_anonymous_args = 0
 541:src/xeq.c     **** 		Error = e;
 3758              		.loc 1 541 2 view .LVU1021
 541:src/xeq.c     **** 		Error = e;
 3759              		.loc 1 541 12 is_stmt 0 view .LVU1022
 3760 0000 064A     		ldr	r2, .L317
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3761              		.loc 1 540 38 view .LVU1023
 3762 0002 10B5     		push	{r4, lr}
 3763              		.cfi_def_cfa_offset 8
 3764              		.cfi_offset 4, -8
 3765              		.cfi_offset 14, -4
 541:src/xeq.c     **** 		Error = e;
 3766              		.loc 1 541 12 view .LVU1024
 3767 0004 1468     		ldr	r4, [r2]
 541:src/xeq.c     **** 		Error = e;
 3768              		.loc 1 541 5 view .LVU1025
 3769 0006 0CB9     		cbnz	r4, .L314
 3770              	.LVL287:
 3771              	.LBB1555:
 3772              	.LBI1555:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3773              		.loc 1 540 5 is_stmt 1 view .LVU1026
 3774              	.LBB1556:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 3775              		.loc 1 542 3 view .LVU1027
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 3776              		.loc 1 542 9 is_stmt 0 view .LVU1028
 3777 0008 1060     		str	r0, [r2]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3778              		.loc 1 543 3 is_stmt 1 view .LVU1029
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3779              		.loc 1 543 6 is_stmt 0 view .LVU1030
 3780 000a 10B1     		cbz	r0, .L316
 3781              	.LVL288:
 3782              	.L314:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3783              		.loc 1 543 6 view .LVU1031
 3784              	.LBE1556:
 3785              	.LBE1555:
 548:src/xeq.c     **** }
 3786              		.loc 1 548 9 view .LVU1032
 3787 000c 0124     		movs	r4, #1
 549:src/xeq.c     **** 
 3788              		.loc 1 549 1 view .LVU1033
 3789 000e 2046     		mov	r0, r4
 3790              	.LVL289:
 549:src/xeq.c     **** 
 3791              		.loc 1 549 1 view .LVU1034
 3792 0010 10BD     		pop	{r4, pc}
 3793              	.LVL290:
ARM GAS  /tmp/ccaPnj5t.s 			page 184


 3794              	.L316:
 3795              	.LBB1558:
 3796              	.LBB1557:
 544:src/xeq.c     **** 			return 0;
 3797              		.loc 1 544 4 is_stmt 1 view .LVU1035
 3798 0012 FFF7FEFF 		bl	error_message
 3799              	.LVL291:
 545:src/xeq.c     **** 		}
 3800              		.loc 1 545 4 view .LVU1036
 545:src/xeq.c     **** 		}
 3801              		.loc 1 545 4 is_stmt 0 view .LVU1037
 3802              	.LBE1557:
 3803              	.LBE1558:
 549:src/xeq.c     **** 
 3804              		.loc 1 549 1 view .LVU1038
 3805 0016 2046     		mov	r0, r4
 3806 0018 10BD     		pop	{r4, pc}
 3807              	.L318:
 3808 001a 00BF     		.align	2
 3809              	.L317:
 3810 001c 00000000 		.word	Error
 3811              		.cfi_endproc
 3812              	.LFE28:
 3814              		.section	.text.report_warn,"ax",%progbits
 3815              		.align	1
 3816              		.p2align 2,,3
 3817              		.global	report_warn
 3818              		.syntax unified
 3819              		.thumb
 3820              		.thumb_func
 3821              		.fpu fpv4-sp-d16
 3823              	report_warn:
 3824              	.LVL292:
 3825              	.LFB29:
 554:src/xeq.c     **** 	if (Running) {
 3826              		.loc 1 554 39 is_stmt 1 view -0
 3827              		.cfi_startproc
 3828              		@ args = 0, pretend = 0, frame = 0
 3829              		@ frame_needed = 0, uses_anonymous_args = 0
 555:src/xeq.c     **** 		return report_err(e);
 3830              		.loc 1 555 2 view .LVU1040
 555:src/xeq.c     **** 		return report_err(e);
 3831              		.loc 1 555 6 is_stmt 0 view .LVU1041
 3832 0000 114B     		ldr	r3, .L325
 554:src/xeq.c     **** 	if (Running) {
 3833              		.loc 1 554 39 view .LVU1042
 3834 0002 70B5     		push	{r4, r5, r6, lr}
 3835              		.cfi_def_cfa_offset 16
 3836              		.cfi_offset 4, -16
 3837              		.cfi_offset 5, -12
 3838              		.cfi_offset 6, -8
 3839              		.cfi_offset 14, -4
 555:src/xeq.c     **** 		return report_err(e);
 3840              		.loc 1 555 5 view .LVU1043
 3841 0004 1D68     		ldr	r5, [r3]
 554:src/xeq.c     **** 	if (Running) {
 3842              		.loc 1 554 39 view .LVU1044
ARM GAS  /tmp/ccaPnj5t.s 			page 185


 3843 0006 0446     		mov	r4, r0
 555:src/xeq.c     **** 		return report_err(e);
 3844              		.loc 1 555 5 view .LVU1045
 3845 0008 5DB1     		cbz	r5, .L320
 556:src/xeq.c     **** 	}
 3846              		.loc 1 556 3 is_stmt 1 view .LVU1046
 3847              	.LVL293:
 3848              	.LBB1567:
 3849              	.LBI1567:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3850              		.loc 1 540 5 view .LVU1047
 3851              	.LBB1568:
 541:src/xeq.c     **** 		Error = e;
 3852              		.loc 1 541 2 view .LVU1048
 541:src/xeq.c     **** 		Error = e;
 3853              		.loc 1 541 12 is_stmt 0 view .LVU1049
 3854 000a 104B     		ldr	r3, .L325+4
 3855 000c 1D68     		ldr	r5, [r3]
 541:src/xeq.c     **** 		Error = e;
 3856              		.loc 1 541 5 view .LVU1050
 3857 000e 15B1     		cbz	r5, .L321
 3858              	.L323:
 548:src/xeq.c     **** }
 3859              		.loc 1 548 9 view .LVU1051
 3860 0010 0125     		movs	r5, #1
 3861              	.LVL294:
 3862              	.L319:
 548:src/xeq.c     **** }
 3863              		.loc 1 548 9 view .LVU1052
 3864              	.LBE1568:
 3865              	.LBE1567:
 565:src/xeq.c     **** 
 3866              		.loc 1 565 1 view .LVU1053
 3867 0012 2846     		mov	r0, r5
 3868 0014 70BD     		pop	{r4, r5, r6, pc}
 3869              	.LVL295:
 3870              	.L321:
 3871              	.LBB1572:
 3872              	.LBB1571:
 3873              	.LBB1569:
 3874              	.LBI1569:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3875              		.loc 1 540 5 is_stmt 1 view .LVU1054
 3876              	.LBB1570:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 3877              		.loc 1 542 3 view .LVU1055
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 3878              		.loc 1 542 9 is_stmt 0 view .LVU1056
 3879 0016 1860     		str	r0, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3880              		.loc 1 543 3 is_stmt 1 view .LVU1057
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3881              		.loc 1 543 6 is_stmt 0 view .LVU1058
 3882 0018 0028     		cmp	r0, #0
 3883 001a F9D1     		bne	.L323
 544:src/xeq.c     **** 			return 0;
 3884              		.loc 1 544 4 is_stmt 1 view .LVU1059
ARM GAS  /tmp/ccaPnj5t.s 			page 186


 3885 001c FFF7FEFF 		bl	error_message
 3886              	.LVL296:
 545:src/xeq.c     **** 		}
 3887              		.loc 1 545 4 view .LVU1060
 545:src/xeq.c     **** 		}
 3888              		.loc 1 545 11 is_stmt 0 view .LVU1061
 3889 0020 F7E7     		b	.L319
 3890              	.LVL297:
 3891              	.L320:
 545:src/xeq.c     **** 		}
 3892              		.loc 1 545 11 view .LVU1062
 3893              	.LBE1570:
 3894              	.LBE1569:
 3895              	.LBE1571:
 3896              	.LBE1572:
 3897              	.LBB1573:
 3898              	.LBI1573:
 554:src/xeq.c     **** 	if (Running) {
 3899              		.loc 1 554 5 is_stmt 1 view .LVU1063
 3900              	.LBB1574:
 558:src/xeq.c     **** #ifndef CONSOLE
 3901              		.loc 1 558 2 view .LVU1064
 3902 0022 FFF7FEFF 		bl	error_message
 3903              	.LVL298:
 560:src/xeq.c     **** 	JustDisplayed = 1;
 3904              		.loc 1 560 2 view .LVU1065
 560:src/xeq.c     **** 	JustDisplayed = 1;
 3905              		.loc 1 560 21 is_stmt 0 view .LVU1066
 3906 0026 0A4A     		ldr	r2, .L325+8
 561:src/xeq.c     **** 	ShowRPN = 1;
 3907              		.loc 1 561 16 view .LVU1067
 3908 0028 0A4E     		ldr	r6, .L325+12
 560:src/xeq.c     **** 	JustDisplayed = 1;
 3909              		.loc 1 560 21 view .LVU1068
 3910 002a D17D     		ldrb	r1, [r2, #23]	@ zero_extendqisi2
 562:src/xeq.c     **** #endif
 3911              		.loc 1 562 10 view .LVU1069
 3912 002c 0A48     		ldr	r0, .L325+16
 560:src/xeq.c     **** 	JustDisplayed = 1;
 3913              		.loc 1 560 21 view .LVU1070
 3914 002e 65F30411 		bfi	r1, r5, #4, #1
 564:src/xeq.c     **** }
 3915              		.loc 1 564 11 view .LVU1071
 3916 0032 251E     		subs	r5, r4, #0
 561:src/xeq.c     **** 	ShowRPN = 1;
 3917              		.loc 1 561 16 view .LVU1072
 3918 0034 4FF00103 		mov	r3, #1
 560:src/xeq.c     **** 	JustDisplayed = 1;
 3919              		.loc 1 560 21 view .LVU1073
 3920 0038 D175     		strb	r1, [r2, #23]
 561:src/xeq.c     **** 	ShowRPN = 1;
 3921              		.loc 1 561 2 is_stmt 1 view .LVU1074
 564:src/xeq.c     **** }
 3922              		.loc 1 564 11 is_stmt 0 view .LVU1075
 3923 003a 18BF     		it	ne
 3924 003c 0125     		movne	r5, #1
 562:src/xeq.c     **** #endif
ARM GAS  /tmp/ccaPnj5t.s 			page 187


 3925              		.loc 1 562 10 view .LVU1076
 3926 003e 0360     		str	r3, [r0]
 561:src/xeq.c     **** 	ShowRPN = 1;
 3927              		.loc 1 561 16 view .LVU1077
 3928 0040 3360     		str	r3, [r6]
 562:src/xeq.c     **** #endif
 3929              		.loc 1 562 2 is_stmt 1 view .LVU1078
 564:src/xeq.c     **** }
 3930              		.loc 1 564 2 view .LVU1079
 3931              	.LVL299:
 564:src/xeq.c     **** }
 3932              		.loc 1 564 2 is_stmt 0 view .LVU1080
 3933              	.LBE1574:
 3934              	.LBE1573:
 565:src/xeq.c     **** 
 3935              		.loc 1 565 1 view .LVU1081
 3936 0042 2846     		mov	r0, r5
 3937 0044 70BD     		pop	{r4, r5, r6, pc}
 3938              	.LVL300:
 3939              	.L326:
 565:src/xeq.c     **** 
 3940              		.loc 1 565 1 view .LVU1082
 3941 0046 00BF     		.align	2
 3942              	.L325:
 3943 0048 00000000 		.word	Running
 3944 004c 00000000 		.word	Error
 3945 0050 00000000 		.word	StateWhileOn
 3946 0054 00000000 		.word	JustDisplayed
 3947 0058 00000000 		.word	ShowRPN
 3948              		.cfi_endproc
 3949              	.LFE29:
 3951              		.section	.text.bad_mode_error,"ax",%progbits
 3952              		.align	1
 3953              		.p2align 2,,3
 3954              		.global	bad_mode_error
 3955              		.syntax unified
 3956              		.thumb
 3957              		.thumb_func
 3958              		.fpu fpv4-sp-d16
 3960              	bad_mode_error:
 3961              	.LFB30:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 3962              		.loc 1 569 27 is_stmt 1 view -0
 3963              		.cfi_startproc
 3964              		@ args = 0, pretend = 0, frame = 0
 3965              		@ frame_needed = 0, uses_anonymous_args = 0
 3966              		@ link register save eliminated.
 570:src/xeq.c     **** }
 3967              		.loc 1 570 2 view .LVU1084
 3968              	.LVL301:
 3969              	.LBB1579:
 3970              	.LBI1579:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3971              		.loc 1 540 5 view .LVU1085
 3972              	.LBB1580:
 541:src/xeq.c     **** 		Error = e;
 3973              		.loc 1 541 2 view .LVU1086
ARM GAS  /tmp/ccaPnj5t.s 			page 188


 541:src/xeq.c     **** 		Error = e;
 3974              		.loc 1 541 12 is_stmt 0 view .LVU1087
 3975 0000 024B     		ldr	r3, .L329
 541:src/xeq.c     **** 		Error = e;
 3976              		.loc 1 541 5 view .LVU1088
 3977 0002 1A68     		ldr	r2, [r3]
 3978 0004 0AB9     		cbnz	r2, .L327
 3979              	.LVL302:
 3980              	.LBB1581:
 3981              	.LBI1581:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3982              		.loc 1 540 5 is_stmt 1 view .LVU1089
 3983              	.LBB1582:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 3984              		.loc 1 542 3 view .LVU1090
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 3985              		.loc 1 542 9 is_stmt 0 view .LVU1091
 3986 0006 0D22     		movs	r2, #13
 3987 0008 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3988              		.loc 1 543 3 is_stmt 1 view .LVU1092
 3989              	.LVL303:
 3990              	.L327:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 3991              		.loc 1 543 3 is_stmt 0 view .LVU1093
 3992              	.LBE1582:
 3993              	.LBE1581:
 3994              	.LBE1580:
 3995              	.LBE1579:
 571:src/xeq.c     **** 
 3996              		.loc 1 571 1 view .LVU1094
 3997 000a 7047     		bx	lr
 3998              	.L330:
 3999              		.align	2
 4000              	.L329:
 4001 000c 00000000 		.word	Error
 4002              		.cfi_endproc
 4003              	.LFE30:
 4005              		.section	.text.cmderr,"ax",%progbits
 4006              		.align	1
 4007              		.p2align 2,,3
 4008              		.global	cmderr
 4009              		.syntax unified
 4010              		.thumb
 4011              		.thumb_func
 4012              		.fpu fpv4-sp-d16
 4014              	cmderr:
 4015              	.LVL304:
 4016              	.LFB31:
 575:src/xeq.c     **** 	report_err(arg);
 4017              		.loc 1 575 45 is_stmt 1 view -0
 4018              		.cfi_startproc
 4019              		@ args = 0, pretend = 0, frame = 0
 4020              		@ frame_needed = 0, uses_anonymous_args = 0
 4021              		@ link register save eliminated.
 576:src/xeq.c     **** }
 4022              		.loc 1 576 2 view .LVU1096
ARM GAS  /tmp/ccaPnj5t.s 			page 189


 4023              	.LBB1587:
 4024              	.LBB1588:
 541:src/xeq.c     **** 		Error = e;
 4025              		.loc 1 541 12 is_stmt 0 view .LVU1097
 4026 0000 034A     		ldr	r2, .L336
 541:src/xeq.c     **** 		Error = e;
 4027              		.loc 1 541 5 view .LVU1098
 4028 0002 1168     		ldr	r1, [r2]
 4029              	.LVL305:
 541:src/xeq.c     **** 		Error = e;
 4030              		.loc 1 541 5 view .LVU1099
 4031              	.LBE1588:
 4032              	.LBI1587:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4033              		.loc 1 540 5 is_stmt 1 view .LVU1100
 4034              	.LBB1593:
 541:src/xeq.c     **** 		Error = e;
 4035              		.loc 1 541 2 view .LVU1101
 541:src/xeq.c     **** 		Error = e;
 4036              		.loc 1 541 5 is_stmt 0 view .LVU1102
 4037 0004 09B9     		cbnz	r1, .L331
 4038              	.LVL306:
 4039              	.LBB1589:
 4040              	.LBI1589:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4041              		.loc 1 540 5 is_stmt 1 view .LVU1103
 4042              	.LBB1590:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4043              		.loc 1 542 3 view .LVU1104
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4044              		.loc 1 542 9 is_stmt 0 view .LVU1105
 4045 0006 1060     		str	r0, [r2]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4046              		.loc 1 543 3 is_stmt 1 view .LVU1106
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4047              		.loc 1 543 6 is_stmt 0 view .LVU1107
 4048 0008 00B1     		cbz	r0, .L335
 4049              	.LVL307:
 4050              	.L331:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4051              		.loc 1 543 6 view .LVU1108
 4052              	.LBE1590:
 4053              	.LBE1589:
 4054              	.LBE1593:
 4055              	.LBE1587:
 577:src/xeq.c     **** 
 4056              		.loc 1 577 1 view .LVU1109
 4057 000a 7047     		bx	lr
 4058              	.LVL308:
 4059              	.L335:
 4060              	.LBB1595:
 4061              	.LBB1594:
 4062              	.LBB1592:
 4063              	.LBB1591:
 544:src/xeq.c     **** 			return 0;
 4064              		.loc 1 544 4 is_stmt 1 view .LVU1110
 4065 000c FFF7FEBF 		b	error_message
ARM GAS  /tmp/ccaPnj5t.s 			page 190


 4066              	.LVL309:
 4067              	.L337:
 544:src/xeq.c     **** 			return 0;
 4068              		.loc 1 544 4 is_stmt 0 view .LVU1111
 4069              		.align	2
 4070              	.L336:
 4071 0010 00000000 		.word	Error
 4072              	.LBE1591:
 4073              	.LBE1592:
 4074              	.LBE1594:
 4075              	.LBE1595:
 4076              		.cfi_endproc
 4077              	.LFE31:
 4079              		.section	.text.cmdmsg,"ax",%progbits
 4080              		.align	1
 4081              		.p2align 2,,3
 4082              		.global	cmdmsg
 4083              		.syntax unified
 4084              		.thumb
 4085              		.thumb_func
 4086              		.fpu fpv4-sp-d16
 4088              	cmdmsg:
 4089              	.LVL310:
 4090              	.LFB32:
 581:src/xeq.c     **** 	error_message(arg);
 4091              		.loc 1 581 45 is_stmt 1 view -0
 4092              		.cfi_startproc
 4093              		@ args = 0, pretend = 0, frame = 0
 4094              		@ frame_needed = 0, uses_anonymous_args = 0
 4095              		@ link register save eliminated.
 582:src/xeq.c     **** }
 4096              		.loc 1 582 2 view .LVU1113
 4097 0000 FFF7FEBF 		b	error_message
 4098              	.LVL311:
 582:src/xeq.c     **** }
 4099              		.loc 1 582 2 is_stmt 0 view .LVU1114
 4100              		.cfi_endproc
 4101              	.LFE32:
 4103              		.section	.text.rarg_roundingmode,"ax",%progbits
 4104              		.align	1
 4105              		.p2align 2,,3
 4106              		.global	rarg_roundingmode
 4107              		.syntax unified
 4108              		.thumb
 4109              		.thumb_func
 4110              		.fpu fpv4-sp-d16
 4112              	rarg_roundingmode:
 4113              	.LVL312:
 4114              	.LFB35:
 617:src/xeq.c     **** 	UState.rounding_mode = arg;
 4115              		.loc 1 617 56 is_stmt 1 view -0
 4116              		.cfi_startproc
 4117              		@ args = 0, pretend = 0, frame = 0
 4118              		@ frame_needed = 0, uses_anonymous_args = 0
 4119              		@ link register save eliminated.
 618:src/xeq.c     **** }
 4120              		.loc 1 618 2 view .LVU1116
ARM GAS  /tmp/ccaPnj5t.s 			page 191


 618:src/xeq.c     **** }
 4121              		.loc 1 618 23 is_stmt 0 view .LVU1117
 4122 0000 044B     		ldr	r3, .L340
 4123 0002 1B68     		ldr	r3, [r3]
 4124 0004 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 4125 0008 60F30612 		bfi	r2, r0, #4, #3
 4126              	.LVL313:
 618:src/xeq.c     **** }
 4127              		.loc 1 618 23 view .LVU1118
 4128 000c 83F8EB27 		strb	r2, [r3, #2027]
 619:src/xeq.c     **** 
 4129              		.loc 1 619 1 view .LVU1119
 4130 0010 7047     		bx	lr
 4131              	.L341:
 4132 0012 00BF     		.align	2
 4133              	.L340:
 4134 0014 00000000 		.word	main_ram
 4135              		.cfi_endproc
 4136              	.LFE35:
 4138              		.section	.text.packed_from_number,"ax",%progbits
 4139              		.align	1
 4140              		.p2align 2,,3
 4141              		.global	packed_from_number
 4142              		.syntax unified
 4143              		.thumb
 4144              		.thumb_func
 4145              		.fpu fpv4-sp-d16
 4147              	packed_from_number:
 4148              	.LVL314:
 4149              	.LFB36:
 625:src/xeq.c     **** 	decContext ctx64;
 4150              		.loc 1 625 59 is_stmt 1 view -0
 4151              		.cfi_startproc
 4152              		@ args = 0, pretend = 0, frame = 24
 4153              		@ frame_needed = 0, uses_anonymous_args = 0
 626:src/xeq.c     **** 
 4154              		.loc 1 626 2 view .LVU1121
 628:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4155              		.loc 1 628 2 view .LVU1122
 625:src/xeq.c     **** 	decContext ctx64;
 4156              		.loc 1 625 59 is_stmt 0 view .LVU1123
 4157 0000 70B5     		push	{r4, r5, r6, lr}
 4158              		.cfi_def_cfa_offset 16
 4159              		.cfi_offset 4, -16
 4160              		.cfi_offset 5, -12
 4161              		.cfi_offset 6, -8
 4162              		.cfi_offset 14, -4
 4163 0002 86B0     		sub	sp, sp, #24
 4164              		.cfi_def_cfa_offset 40
 625:src/xeq.c     **** 	decContext ctx64;
 4165              		.loc 1 625 59 view .LVU1124
 4166 0004 0446     		mov	r4, r0
 4167 0006 0D46     		mov	r5, r1
 628:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4168              		.loc 1 628 2 view .LVU1125
 4169 0008 6846     		mov	r0, sp
 4170              	.LVL315:
ARM GAS  /tmp/ccaPnj5t.s 			page 192


 628:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4171              		.loc 1 628 2 view .LVU1126
 4172 000a 4021     		movs	r1, #64
 4173              	.LVL316:
 628:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4174              		.loc 1 628 2 view .LVU1127
 4175 000c FFF7FEFF 		bl	decContextDefault
 4176              	.LVL317:
 629:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4177              		.loc 1 629 2 is_stmt 1 view .LVU1128
 4178              	.LBB1596:
 4179              	.LBI1596:
 604:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4180              		.loc 1 604 22 view .LVU1129
 4181              	.LBB1597:
 605:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4182              		.loc 1 605 2 view .LVU1130
 610:src/xeq.c     **** }
 4183              		.loc 1 610 2 view .LVU1131
 610:src/xeq.c     **** }
 4184              		.loc 1 610 37 is_stmt 0 view .LVU1132
 4185 0010 084B     		ldr	r3, .L344
 610:src/xeq.c     **** }
 4186              		.loc 1 610 9 view .LVU1133
 4187 0012 094E     		ldr	r6, .L344+4
 610:src/xeq.c     **** }
 4188              		.loc 1 610 37 view .LVU1134
 4189 0014 1B68     		ldr	r3, [r3]
 4190 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4191 001a C3F30213 		ubfx	r3, r3, #4, #3
 4192              	.LBE1597:
 4193              	.LBE1596:
 630:src/xeq.c     **** }
 4194              		.loc 1 630 2 view .LVU1135
 4195 001e 2946     		mov	r1, r5
 629:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4196              		.loc 1 629 14 view .LVU1136
 4197 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4198 0022 8DF80C30 		strb	r3, [sp, #12]
 630:src/xeq.c     **** }
 4199              		.loc 1 630 2 is_stmt 1 view .LVU1137
 4200 0026 2046     		mov	r0, r4
 4201 0028 6A46     		mov	r2, sp
 4202 002a FFF7FEFF 		bl	decimal64FromNumber
 4203              	.LVL318:
 631:src/xeq.c     **** 
 4204              		.loc 1 631 1 is_stmt 0 view .LVU1138
 4205 002e 06B0     		add	sp, sp, #24
 4206              		.cfi_def_cfa_offset 16
 4207              		@ sp needed
 4208 0030 70BD     		pop	{r4, r5, r6, pc}
 4209              	.LVL319:
 4210              	.L345:
 631:src/xeq.c     **** 
 4211              		.loc 1 631 1 view .LVU1139
 4212 0032 00BF     		.align	2
 4213              	.L344:
ARM GAS  /tmp/ccaPnj5t.s 			page 193


 4214 0034 00000000 		.word	main_ram
 4215 0038 00000000 		.word	.LANCHOR1
 4216              		.cfi_endproc
 4217              	.LFE36:
 4219              		.section	.text.packed128_from_number,"ax",%progbits
 4220              		.align	1
 4221              		.p2align 2,,3
 4222              		.global	packed128_from_number
 4223              		.syntax unified
 4224              		.thumb
 4225              		.thumb_func
 4226              		.fpu fpv4-sp-d16
 4228              	packed128_from_number:
 4229              	.LVL320:
 4230              	.LFB37:
 633:src/xeq.c     **** 	decContext ctx128;
 4231              		.loc 1 633 63 is_stmt 1 view -0
 4232              		.cfi_startproc
 4233              		@ args = 0, pretend = 0, frame = 24
 4234              		@ frame_needed = 0, uses_anonymous_args = 0
 634:src/xeq.c     **** 
 4235              		.loc 1 634 2 view .LVU1141
 636:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4236              		.loc 1 636 2 view .LVU1142
 633:src/xeq.c     **** 	decContext ctx128;
 4237              		.loc 1 633 63 is_stmt 0 view .LVU1143
 4238 0000 70B5     		push	{r4, r5, r6, lr}
 4239              		.cfi_def_cfa_offset 16
 4240              		.cfi_offset 4, -16
 4241              		.cfi_offset 5, -12
 4242              		.cfi_offset 6, -8
 4243              		.cfi_offset 14, -4
 4244 0002 86B0     		sub	sp, sp, #24
 4245              		.cfi_def_cfa_offset 40
 633:src/xeq.c     **** 	decContext ctx128;
 4246              		.loc 1 633 63 view .LVU1144
 4247 0004 0446     		mov	r4, r0
 4248 0006 0D46     		mov	r5, r1
 636:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4249              		.loc 1 636 2 view .LVU1145
 4250 0008 6846     		mov	r0, sp
 4251              	.LVL321:
 636:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4252              		.loc 1 636 2 view .LVU1146
 4253 000a 8021     		movs	r1, #128
 4254              	.LVL322:
 636:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4255              		.loc 1 636 2 view .LVU1147
 4256 000c FFF7FEFF 		bl	decContextDefault
 4257              	.LVL323:
 637:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4258              		.loc 1 637 2 is_stmt 1 view .LVU1148
 4259              	.LBB1598:
 4260              	.LBI1598:
 604:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4261              		.loc 1 604 22 view .LVU1149
 4262              	.LBB1599:
ARM GAS  /tmp/ccaPnj5t.s 			page 194


 605:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4263              		.loc 1 605 2 view .LVU1150
 610:src/xeq.c     **** }
 4264              		.loc 1 610 2 view .LVU1151
 610:src/xeq.c     **** }
 4265              		.loc 1 610 37 is_stmt 0 view .LVU1152
 4266 0010 084B     		ldr	r3, .L348
 610:src/xeq.c     **** }
 4267              		.loc 1 610 9 view .LVU1153
 4268 0012 094E     		ldr	r6, .L348+4
 610:src/xeq.c     **** }
 4269              		.loc 1 610 37 view .LVU1154
 4270 0014 1B68     		ldr	r3, [r3]
 4271 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4272 001a C3F30213 		ubfx	r3, r3, #4, #3
 4273              	.LBE1599:
 4274              	.LBE1598:
 638:src/xeq.c     **** }
 4275              		.loc 1 638 2 view .LVU1155
 4276 001e 2946     		mov	r1, r5
 637:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4277              		.loc 1 637 15 view .LVU1156
 4278 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4279 0022 8DF80C30 		strb	r3, [sp, #12]
 638:src/xeq.c     **** }
 4280              		.loc 1 638 2 is_stmt 1 view .LVU1157
 4281 0026 2046     		mov	r0, r4
 4282 0028 6A46     		mov	r2, sp
 4283 002a FFF7FEFF 		bl	decimal128FromNumber
 4284              	.LVL324:
 639:src/xeq.c     **** 
 4285              		.loc 1 639 1 is_stmt 0 view .LVU1158
 4286 002e 06B0     		add	sp, sp, #24
 4287              		.cfi_def_cfa_offset 16
 4288              		@ sp needed
 4289 0030 70BD     		pop	{r4, r5, r6, pc}
 4290              	.LVL325:
 4291              	.L349:
 639:src/xeq.c     **** 
 4292              		.loc 1 639 1 view .LVU1159
 4293 0032 00BF     		.align	2
 4294              	.L348:
 4295 0034 00000000 		.word	main_ram
 4296 0038 00000000 		.word	.LANCHOR1
 4297              		.cfi_endproc
 4298              	.LFE37:
 4300              		.section	.text.check_special,"ax",%progbits
 4301              		.align	1
 4302              		.p2align 2,,3
 4303              		.syntax unified
 4304              		.thumb
 4305              		.thumb_func
 4306              		.fpu fpv4-sp-d16
 4308              	check_special:
 4309              	.LVL326:
 4310              	.LFB41:
 678:src/xeq.c     **** 	decNumber y;
ARM GAS  /tmp/ccaPnj5t.s 			page 195


 4311              		.loc 1 678 46 is_stmt 1 view -0
 4312              		.cfi_startproc
 4313              		@ args = 0, pretend = 0, frame = 64
 4314              		@ frame_needed = 0, uses_anonymous_args = 0
 679:src/xeq.c     **** 	decimal64 z;
 4315              		.loc 1 679 2 view .LVU1161
 680:src/xeq.c     **** 	decimal128 d;
 4316              		.loc 1 680 2 view .LVU1162
 681:src/xeq.c     **** 	if (is_dblmode()) {
 4317              		.loc 1 681 2 view .LVU1163
 682:src/xeq.c     **** 		packed128_from_number(&d, x);
 4318              		.loc 1 682 2 view .LVU1164
 4319              	.LBB1616:
 4320              	.LBI1616:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4321              		.loc 1 1100 5 view .LVU1165
 4322              	.LBB1617:
1101:src/xeq.c     **** }
 4323              		.loc 1 1101 2 view .LVU1166
1101:src/xeq.c     **** }
 4324              		.loc 1 1101 24 is_stmt 0 view .LVU1167
 4325 0000 274B     		ldr	r3, .L364
 4326 0002 1B68     		ldr	r3, [r3]
 4327              	.LBE1617:
 4328              	.LBE1616:
 678:src/xeq.c     **** 	decNumber y;
 4329              		.loc 1 678 46 view .LVU1168
 4330 0004 00B5     		push	{lr}
 4331              		.cfi_def_cfa_offset 4
 4332              		.cfi_offset 14, -4
 4333              	.LBB1619:
 4334              	.LBB1618:
1101:src/xeq.c     **** }
 4335              		.loc 1 1101 24 view .LVU1169
 4336 0006 B3F8E827 		ldrh	r2, [r3, #2024]
 4337 000a 44F20103 		movw	r3, #16385
 4338              	.LBE1618:
 4339              	.LBE1619:
 682:src/xeq.c     **** 		packed128_from_number(&d, x);
 4340              		.loc 1 682 5 view .LVU1170
 4341 000e 1340     		ands	r3, r3, r2
 4342 0010 B3F5804F 		cmp	r3, #16384
 678:src/xeq.c     **** 	decNumber y;
 4343              		.loc 1 678 46 view .LVU1171
 4344 0014 91B0     		sub	sp, sp, #68
 4345              		.cfi_def_cfa_offset 72
 678:src/xeq.c     **** 	decNumber y;
 4346              		.loc 1 678 46 view .LVU1172
 4347 0016 0146     		mov	r1, r0
 682:src/xeq.c     **** 		packed128_from_number(&d, x);
 4348              		.loc 1 682 5 view .LVU1173
 4349 0018 0FD0     		beq	.L362
 688:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4350              		.loc 1 688 3 is_stmt 1 view .LVU1174
 4351 001a 01A8     		add	r0, sp, #4
 4352              	.LVL327:
 688:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
ARM GAS  /tmp/ccaPnj5t.s 			page 196


 4353              		.loc 1 688 3 is_stmt 0 view .LVU1175
 4354 001c FFF7FEFF 		bl	packed_from_number
 4355              	.LVL328:
 689:src/xeq.c     **** 	}
 4356              		.loc 1 689 3 is_stmt 1 view .LVU1176
 4357 0020 01A8     		add	r0, sp, #4
 4358 0022 07A9     		add	r1, sp, #28
 4359 0024 FFF7FEFF 		bl	decimal64ToNumber
 4360              	.LVL329:
 691:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4361              		.loc 1 691 2 view .LVU1177
 691:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4362              		.loc 1 691 5 is_stmt 0 view .LVU1178
 4363 0028 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4364 002c 13F0700F 		tst	r3, #112
 4365 0030 0FD1     		bne	.L353
 4366              	.L355:
 702:src/xeq.c     **** }
 4367              		.loc 1 702 9 view .LVU1179
 4368 0032 0020     		movs	r0, #0
 4369              	.L350:
 703:src/xeq.c     **** 
 4370              		.loc 1 703 1 view .LVU1180
 4371 0034 11B0     		add	sp, sp, #68
 4372              		.cfi_remember_state
 4373              		.cfi_def_cfa_offset 4
 4374              		@ sp needed
 4375 0036 5DF804FB 		ldr	pc, [sp], #4
 4376              	.LVL330:
 4377              	.L362:
 4378              		.cfi_restore_state
 683:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4379              		.loc 1 683 3 is_stmt 1 view .LVU1181
 4380 003a 03A8     		add	r0, sp, #12
 4381              	.LVL331:
 683:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4382              		.loc 1 683 3 is_stmt 0 view .LVU1182
 4383 003c FFF7FEFF 		bl	packed128_from_number
 4384              	.LVL332:
 684:src/xeq.c     **** 	}
 4385              		.loc 1 684 3 is_stmt 1 view .LVU1183
 4386 0040 03A8     		add	r0, sp, #12
 4387 0042 07A9     		add	r1, sp, #28
 4388 0044 FFF7FEFF 		bl	decimal128ToNumber
 4389              	.LVL333:
 691:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4390              		.loc 1 691 2 view .LVU1184
 691:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4391              		.loc 1 691 5 is_stmt 0 view .LVU1185
 4392 0048 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4393 004c 13F0700F 		tst	r3, #112
 4394 0050 EFD0     		beq	.L355
 4395              	.L353:
 692:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4396              		.loc 1 692 3 is_stmt 1 view .LVU1186
 4397              	.LVL334:
 4398              	.LBB1620:
ARM GAS  /tmp/ccaPnj5t.s 			page 197


 4399              	.LBI1620:
3531:src/xeq.c     **** 	unsigned short mask;
 4400              		.loc 1 3531 5 view .LVU1187
 4401              	.LBB1621:
3532:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 4402              		.loc 1 3532 2 view .LVU1188
3533:src/xeq.c     **** 
 4403              		.loc 1 3533 2 view .LVU1189
3533:src/xeq.c     **** 
 4404              		.loc 1 3533 34 is_stmt 0 view .LVU1190
 4405 0052 0DF10201 		add	r1, sp, #2
 4406 0056 6B20     		movs	r0, #107
 4407 0058 FFF7FEFF 		bl	flag_word
 4408              	.LVL335:
3535:src/xeq.c     **** }
 4409              		.loc 1 3535 2 is_stmt 1 view .LVU1191
3535:src/xeq.c     **** }
 4410              		.loc 1 3535 24 is_stmt 0 view .LVU1192
 4411 005c BDF80230 		ldrh	r3, [sp, #2]
 4412 0060 0288     		ldrh	r2, [r0]
 4413              	.LBE1621:
 4414              	.LBE1620:
 692:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4415              		.loc 1 692 6 view .LVU1193
 4416 0062 1A42     		tst	r2, r3
 4417 0064 E5D1     		bne	.L355
 693:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4418              		.loc 1 693 4 is_stmt 1 view .LVU1194
 693:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4419              		.loc 1 693 8 is_stmt 0 view .LVU1195
 4420 0066 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 693:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4421              		.loc 1 693 7 view .LVU1196
 4422 006a 13F0300F 		tst	r3, #48
 4423 006e 06D0     		beq	.L356
 694:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 4424              		.loc 1 694 5 is_stmt 1 view .LVU1197
 4425              	.LVL336:
 4426              	.LBB1622:
 4427              	.LBI1622:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4428              		.loc 1 540 5 view .LVU1198
 4429              	.LBB1623:
 541:src/xeq.c     **** 		Error = e;
 4430              		.loc 1 541 2 view .LVU1199
 541:src/xeq.c     **** 		Error = e;
 4431              		.loc 1 541 12 is_stmt 0 view .LVU1200
 4432 0070 0C4B     		ldr	r3, .L364+4
 541:src/xeq.c     **** 		Error = e;
 4433              		.loc 1 541 5 view .LVU1201
 4434 0072 1A68     		ldr	r2, [r3]
 4435              	.LBB1624:
 4436              	.LBB1625:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4437              		.loc 1 542 9 view .LVU1202
 4438 0074 0120     		movs	r0, #1
 4439              	.LBE1625:
ARM GAS  /tmp/ccaPnj5t.s 			page 198


 4440              	.LBE1624:
 541:src/xeq.c     **** 		Error = e;
 4441              		.loc 1 541 5 view .LVU1203
 4442 0076 002A     		cmp	r2, #0
 4443 0078 DCD1     		bne	.L350
 4444              	.LVL337:
 4445              	.LBB1627:
 4446              	.LBI1624:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4447              		.loc 1 540 5 is_stmt 1 view .LVU1204
 4448              	.LBB1626:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4449              		.loc 1 542 3 view .LVU1205
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4450              		.loc 1 542 9 is_stmt 0 view .LVU1206
 4451 007a 1860     		str	r0, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4452              		.loc 1 543 3 is_stmt 1 view .LVU1207
 4453 007c DAE7     		b	.L350
 4454              	.LVL338:
 4455              	.L356:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4456              		.loc 1 543 3 is_stmt 0 view .LVU1208
 4457              	.LBE1626:
 4458              	.LBE1627:
 4459              	.LBE1623:
 4460              	.LBE1622:
 695:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4461              		.loc 1 695 9 is_stmt 1 view .LVU1209
 695:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4462              		.loc 1 695 12 is_stmt 0 view .LVU1210
 4463 007e 13F0800F 		tst	r3, #128
 4464              	.LBB1628:
 4465              	.LBB1629:
 541:src/xeq.c     **** 		Error = e;
 4466              		.loc 1 541 12 view .LVU1211
 4467 0082 084B     		ldr	r3, .L364+4
 541:src/xeq.c     **** 		Error = e;
 4468              		.loc 1 541 5 view .LVU1212
 4469 0084 1A68     		ldr	r2, [r3]
 4470              	.LBE1629:
 4471              	.LBE1628:
 695:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4472              		.loc 1 695 12 view .LVU1213
 4473 0086 04D1     		bne	.L363
 698:src/xeq.c     **** 			return 1;
 4474              		.loc 1 698 5 is_stmt 1 view .LVU1214
 4475              	.LVL339:
 4476              	.LBB1633:
 4477              	.LBI1633:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4478              		.loc 1 540 5 view .LVU1215
 4479              	.LBB1634:
 541:src/xeq.c     **** 		Error = e;
 4480              		.loc 1 541 2 view .LVU1216
 541:src/xeq.c     **** 		Error = e;
 4481              		.loc 1 541 5 is_stmt 0 view .LVU1217
ARM GAS  /tmp/ccaPnj5t.s 			page 199


 4482 0088 42B9     		cbnz	r2, .L360
 4483              	.LVL340:
 4484              	.LBB1635:
 4485              	.LBI1635:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4486              		.loc 1 540 5 is_stmt 1 view .LVU1218
 4487              	.LBB1636:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4488              		.loc 1 542 3 view .LVU1219
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4489              		.loc 1 542 9 is_stmt 0 view .LVU1220
 4490 008a 0422     		movs	r2, #4
 4491 008c 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4492              		.loc 1 543 3 is_stmt 1 view .LVU1221
 4493              	.LBE1636:
 4494              	.LBE1635:
 4495              	.LBE1634:
 4496              	.LBE1633:
 699:src/xeq.c     **** 		}
 4497              		.loc 1 699 11 is_stmt 0 view .LVU1222
 4498 008e 0120     		movs	r0, #1
 4499 0090 D0E7     		b	.L350
 4500              	.LVL341:
 4501              	.L363:
 696:src/xeq.c     **** 			else
 4502              		.loc 1 696 5 is_stmt 1 view .LVU1223
 4503              	.LBB1637:
 4504              	.LBI1628:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4505              		.loc 1 540 5 view .LVU1224
 4506              	.LBB1632:
 541:src/xeq.c     **** 		Error = e;
 4507              		.loc 1 541 2 view .LVU1225
 541:src/xeq.c     **** 		Error = e;
 4508              		.loc 1 541 5 is_stmt 0 view .LVU1226
 4509 0092 1AB9     		cbnz	r2, .L360
 4510              	.LVL342:
 4511              	.LBB1630:
 4512              	.LBI1630:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4513              		.loc 1 540 5 is_stmt 1 view .LVU1227
 4514              	.LBB1631:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4515              		.loc 1 542 3 view .LVU1228
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 4516              		.loc 1 542 9 is_stmt 0 view .LVU1229
 4517 0094 0522     		movs	r2, #5
 4518 0096 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 4519              		.loc 1 543 3 is_stmt 1 view .LVU1230
 4520              	.LBE1631:
 4521              	.LBE1630:
 4522              	.LBE1632:
 4523              	.LBE1637:
 699:src/xeq.c     **** 		}
 4524              		.loc 1 699 11 is_stmt 0 view .LVU1231
ARM GAS  /tmp/ccaPnj5t.s 			page 200


 4525 0098 0120     		movs	r0, #1
 4526 009a CBE7     		b	.L350
 4527              	.LVL343:
 4528              	.L360:
 699:src/xeq.c     **** 		}
 4529              		.loc 1 699 11 view .LVU1232
 4530 009c 0120     		movs	r0, #1
 4531 009e C9E7     		b	.L350
 4532              	.L365:
 4533              		.align	2
 4534              	.L364:
 4535 00a0 00000000 		.word	main_ram
 4536 00a4 00000000 		.word	Error
 4537              		.cfi_endproc
 4538              	.LFE41:
 4540              		.section	.text.packed_from_packed128,"ax",%progbits
 4541              		.align	1
 4542              		.p2align 2,,3
 4543              		.global	packed_from_packed128
 4544              		.syntax unified
 4545              		.thumb
 4546              		.thumb_func
 4547              		.fpu fpv4-sp-d16
 4549              	packed_from_packed128:
 4550              	.LVL344:
 4551              	.LFB38:
 642:src/xeq.c     **** 	decNumber temp;
 4552              		.loc 1 642 63 is_stmt 1 view -0
 4553              		.cfi_startproc
 4554              		@ args = 0, pretend = 0, frame = 40
 4555              		@ frame_needed = 0, uses_anonymous_args = 0
 643:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 4556              		.loc 1 643 2 view .LVU1234
 644:src/xeq.c     **** }
 4557              		.loc 1 644 2 view .LVU1235
 642:src/xeq.c     **** 	decNumber temp;
 4558              		.loc 1 642 63 is_stmt 0 view .LVU1236
 4559 0000 10B5     		push	{r4, lr}
 4560              		.cfi_def_cfa_offset 8
 4561              		.cfi_offset 4, -8
 4562              		.cfi_offset 14, -4
 4563 0002 8AB0     		sub	sp, sp, #40
 4564              		.cfi_def_cfa_offset 48
 642:src/xeq.c     **** 	decNumber temp;
 4565              		.loc 1 642 63 view .LVU1237
 4566 0004 0446     		mov	r4, r0
 644:src/xeq.c     **** }
 4567              		.loc 1 644 24 view .LVU1238
 4568 0006 0846     		mov	r0, r1
 4569              	.LVL345:
 644:src/xeq.c     **** }
 4570              		.loc 1 644 24 view .LVU1239
 4571 0008 01A9     		add	r1, sp, #4
 4572              	.LVL346:
 644:src/xeq.c     **** }
 4573              		.loc 1 644 24 view .LVU1240
 4574 000a FFF7FEFF 		bl	decimal128ToNumber
ARM GAS  /tmp/ccaPnj5t.s 			page 201


 4575              	.LVL347:
 644:src/xeq.c     **** }
 4576              		.loc 1 644 24 view .LVU1241
 4577 000e 0146     		mov	r1, r0
 644:src/xeq.c     **** }
 4578              		.loc 1 644 2 view .LVU1242
 4579 0010 2046     		mov	r0, r4
 4580 0012 FFF7FEFF 		bl	packed_from_number
 4581              	.LVL348:
 645:src/xeq.c     **** 
 4582              		.loc 1 645 1 view .LVU1243
 4583 0016 0AB0     		add	sp, sp, #40
 4584              		.cfi_def_cfa_offset 8
 4585              		@ sp needed
 4586 0018 10BD     		pop	{r4, pc}
 645:src/xeq.c     **** 
 4587              		.loc 1 645 1 view .LVU1244
 4588              		.cfi_endproc
 4589              	.LFE38:
 4591 001a 00BF     		.section	.text.packed128_from_packed,"ax",%progbits
 4592              		.align	1
 4593              		.p2align 2,,3
 4594              		.global	packed128_from_packed
 4595              		.syntax unified
 4596              		.thumb
 4597              		.thumb_func
 4598              		.fpu fpv4-sp-d16
 4600              	packed128_from_packed:
 4601              	.LVL349:
 4602              	.LFB39:
 648:src/xeq.c     **** 	decNumber temp;
 4603              		.loc 1 648 63 is_stmt 1 view -0
 4604              		.cfi_startproc
 4605              		@ args = 0, pretend = 0, frame = 40
 4606              		@ frame_needed = 0, uses_anonymous_args = 0
 649:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 4607              		.loc 1 649 2 view .LVU1246
 650:src/xeq.c     **** }
 4608              		.loc 1 650 2 view .LVU1247
 648:src/xeq.c     **** 	decNumber temp;
 4609              		.loc 1 648 63 is_stmt 0 view .LVU1248
 4610 0000 10B5     		push	{r4, lr}
 4611              		.cfi_def_cfa_offset 8
 4612              		.cfi_offset 4, -8
 4613              		.cfi_offset 14, -4
 4614 0002 8AB0     		sub	sp, sp, #40
 4615              		.cfi_def_cfa_offset 48
 648:src/xeq.c     **** 	decNumber temp;
 4616              		.loc 1 648 63 view .LVU1249
 4617 0004 0446     		mov	r4, r0
 650:src/xeq.c     **** }
 4618              		.loc 1 650 27 view .LVU1250
 4619 0006 0846     		mov	r0, r1
 4620              	.LVL350:
 650:src/xeq.c     **** }
 4621              		.loc 1 650 27 view .LVU1251
 4622 0008 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccaPnj5t.s 			page 202


 4623              	.LVL351:
 650:src/xeq.c     **** }
 4624              		.loc 1 650 27 view .LVU1252
 4625 000a FFF7FEFF 		bl	decimal64ToNumber
 4626              	.LVL352:
 650:src/xeq.c     **** }
 4627              		.loc 1 650 27 view .LVU1253
 4628 000e 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 4629              		.loc 1 650 2 view .LVU1254
 4630 0010 2046     		mov	r0, r4
 4631 0012 FFF7FEFF 		bl	packed128_from_number
 4632              	.LVL353:
 651:src/xeq.c     **** 
 4633              		.loc 1 651 1 view .LVU1255
 4634 0016 0AB0     		add	sp, sp, #40
 4635              		.cfi_def_cfa_offset 8
 4636              		@ sp needed
 4637 0018 10BD     		pop	{r4, pc}
 651:src/xeq.c     **** 
 4638              		.loc 1 651 1 view .LVU1256
 4639              		.cfi_endproc
 4640              	.LFE39:
 4642 001a 00BF     		.section	.text.stack_size,"ax",%progbits
 4643              		.align	1
 4644              		.p2align 2,,3
 4645              		.global	stack_size
 4646              		.syntax unified
 4647              		.thumb
 4648              		.thumb_func
 4649              		.fpu fpv4-sp-d16
 4651              	stack_size:
 4652              	.LFB42:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 4653              		.loc 1 706 22 is_stmt 1 view -0
 4654              		.cfi_startproc
 4655              		@ args = 0, pretend = 0, frame = 0
 4656              		@ frame_needed = 0, uses_anonymous_args = 0
 4657              		@ link register save eliminated.
 707:src/xeq.c     **** 		return 4;
 4658              		.loc 1 707 2 view .LVU1258
 707:src/xeq.c     **** 		return 4;
 4659              		.loc 1 707 8 is_stmt 0 view .LVU1259
 4660 0000 0B4B     		ldr	r3, .L376
 4661 0002 1B68     		ldr	r3, [r3]
 707:src/xeq.c     **** 		return 4;
 4662              		.loc 1 707 6 view .LVU1260
 4663 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 4664              		.loc 1 707 5 view .LVU1261
 4665 0008 1207     		lsls	r2, r2, #28
 4666 000a 0ED5     		bpl	.L372
 4667              	.LBB1638:
 4668              	.LBI1638:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 4669              		.loc 1 185 5 is_stmt 1 view .LVU1262
 4670              	.LBB1639:
ARM GAS  /tmp/ccaPnj5t.s 			page 203


 186:src/xeq.c     **** }
 4671              		.loc 1 186 2 view .LVU1263
 186:src/xeq.c     **** }
 4672              		.loc 1 186 9 is_stmt 0 view .LVU1264
 4673 000c B3F8E037 		ldrh	r3, [r3, #2016]
 4674              	.LBE1639:
 4675              	.LBE1638:
 707:src/xeq.c     **** 		return 4;
 4676              		.loc 1 707 27 view .LVU1265
 4677 0010 9B0B     		lsrs	r3, r3, #14
 4678 0012 032B     		cmp	r3, #3
 4679 0014 01D0     		beq	.L375
 709:src/xeq.c     **** }
 4680              		.loc 1 709 9 view .LVU1266
 4681 0016 0820     		movs	r0, #8
 710:src/xeq.c     **** 
 4682              		.loc 1 710 1 view .LVU1267
 4683 0018 7047     		bx	lr
 4684              	.L375:
 707:src/xeq.c     **** 		return 4;
 4685              		.loc 1 707 44 discriminator 2 view .LVU1268
 4686 001a 064B     		ldr	r3, .L376+4
 707:src/xeq.c     **** 		return 4;
 4687              		.loc 1 707 41 discriminator 2 view .LVU1269
 4688 001c 93F90130 		ldrsb	r3, [r3, #1]
 4689 0020 002B     		cmp	r3, #0
 708:src/xeq.c     **** 	return 8;
 4690              		.loc 1 708 10 discriminator 2 view .LVU1270
 4691 0022 B4BF     		ite	lt
 4692 0024 0820     		movlt	r0, #8
 4693 0026 0420     		movge	r0, #4
 4694 0028 7047     		bx	lr
 4695              	.L372:
 708:src/xeq.c     **** 	return 8;
 4696              		.loc 1 708 10 view .LVU1271
 4697 002a 0420     		movs	r0, #4
 4698 002c 7047     		bx	lr
 4699              	.L377:
 4700 002e 00BF     		.align	2
 4701              	.L376:
 4702 0030 00000000 		.word	main_ram
 4703 0034 00000000 		.word	XromParams
 4704              		.cfi_endproc
 4705              	.LFE42:
 4707              		.section	.text.copyreg,"ax",%progbits
 4708              		.align	1
 4709              		.p2align 2,,3
 4710              		.global	copyreg
 4711              		.syntax unified
 4712              		.thumb
 4713              		.thumb_func
 4714              		.fpu fpv4-sp-d16
 4716              	copyreg:
 4717              	.LVL354:
 4718              	.LFB45:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 4719              		.loc 1 720 46 is_stmt 1 view -0
ARM GAS  /tmp/ccaPnj5t.s 			page 204


 4720              		.cfi_startproc
 4721              		@ args = 0, pretend = 0, frame = 0
 4722              		@ frame_needed = 0, uses_anonymous_args = 0
 4723              		@ link register save eliminated.
 721:src/xeq.c     **** }
 4724              		.loc 1 721 2 view .LVU1273
 4725              	.LBB1640:
 4726              	.LBI1640:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4727              		.loc 1 1100 5 view .LVU1274
 4728              	.LBB1641:
1101:src/xeq.c     **** }
 4729              		.loc 1 1101 2 view .LVU1275
1101:src/xeq.c     **** }
 4730              		.loc 1 1101 24 is_stmt 0 view .LVU1276
 4731 0000 064B     		ldr	r3, .L381
 4732 0002 1B68     		ldr	r3, [r3]
 4733 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 4734 0008 44F20103 		movw	r3, #16385
 4735              	.LBE1641:
 4736              	.LBE1640:
 721:src/xeq.c     **** }
 4737              		.loc 1 721 2 view .LVU1277
 4738 000c 1340     		ands	r3, r3, r2
 4739 000e B3F5804F 		cmp	r3, #16384
 4740 0012 0CBF     		ite	eq
 4741 0014 1022     		moveq	r2, #16
 4742 0016 0822     		movne	r2, #8
 4743 0018 FFF7FEBF 		b	xcopy
 4744              	.LVL355:
 4745              	.L382:
 721:src/xeq.c     **** }
 4746              		.loc 1 721 2 view .LVU1278
 4747              		.align	2
 4748              	.L381:
 4749 001c 00000000 		.word	main_ram
 4750              		.cfi_endproc
 4751              	.LFE45:
 4753              		.section	.text.set_lift,"ax",%progbits
 4754              		.align	1
 4755              		.p2align 2,,3
 4756              		.global	set_lift
 4757              		.syntax unified
 4758              		.thumb
 4759              		.thumb_func
 4760              		.fpu fpv4-sp-d16
 4762              	set_lift:
 4763              	.LFB51:
 761:src/xeq.c     ****     State2.state_lift = 1;
 4764              		.loc 1 761 21 is_stmt 1 view -0
 4765              		.cfi_startproc
 4766              		@ args = 0, pretend = 0, frame = 0
 4767              		@ frame_needed = 0, uses_anonymous_args = 0
 4768              		@ link register save eliminated.
 762:src/xeq.c     **** }
 4769              		.loc 1 762 5 view .LVU1280
 762:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 205


 4770              		.loc 1 762 23 is_stmt 0 view .LVU1281
 4771 0000 024A     		ldr	r2, .L384
 4772 0002 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 4773 0004 43F04003 		orr	r3, r3, #64
 4774 0008 D375     		strb	r3, [r2, #23]
 763:src/xeq.c     **** 
 4775              		.loc 1 763 1 view .LVU1282
 4776 000a 7047     		bx	lr
 4777              	.L385:
 4778              		.align	2
 4779              	.L384:
 4780 000c 00000000 		.word	StateWhileOn
 4781              		.cfi_endproc
 4782              	.LFE51:
 4784              		.section	.text.is_dblmode,"ax",%progbits
 4785              		.align	1
 4786              		.p2align 2,,3
 4787              		.global	is_dblmode
 4788              		.syntax unified
 4789              		.thumb
 4790              		.thumb_func
 4791              		.fpu fpv4-sp-d16
 4793              	is_dblmode:
 4794              	.LFB81:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4795              		.loc 1 1100 22 is_stmt 1 view -0
 4796              		.cfi_startproc
 4797              		@ args = 0, pretend = 0, frame = 0
 4798              		@ frame_needed = 0, uses_anonymous_args = 0
 4799              		@ link register save eliminated.
1101:src/xeq.c     **** }
 4800              		.loc 1 1101 2 view .LVU1284
1101:src/xeq.c     **** }
 4801              		.loc 1 1101 24 is_stmt 0 view .LVU1285
 4802 0000 064B     		ldr	r3, .L387
 4803 0002 1B68     		ldr	r3, [r3]
 4804 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 4805 0008 44F20100 		movw	r0, #16385
 4806 000c 1840     		ands	r0, r0, r3
1102:src/xeq.c     **** 
 4807              		.loc 1 1102 1 view .LVU1286
 4808 000e A0F58040 		sub	r0, r0, #16384
 4809 0012 B0FA80F0 		clz	r0, r0
 4810 0016 4009     		lsrs	r0, r0, #5
 4811 0018 7047     		bx	lr
 4812              	.L388:
 4813 001a 00BF     		.align	2
 4814              	.L387:
 4815 001c 00000000 		.word	main_ram
 4816              		.cfi_endproc
 4817              	.LFE81:
 4819              		.section	.text.is_usrdblmode,"ax",%progbits
 4820              		.align	1
 4821              		.p2align 2,,3
 4822              		.global	is_usrdblmode
 4823              		.syntax unified
 4824              		.thumb
ARM GAS  /tmp/ccaPnj5t.s 			page 206


 4825              		.thumb_func
 4826              		.fpu fpv4-sp-d16
 4828              	is_usrdblmode:
 4829              	.LFB82:
1104:src/xeq.c     **** 	if (XromFlags.xIN)
 4830              		.loc 1 1104 25 is_stmt 1 view -0
 4831              		.cfi_startproc
 4832              		@ args = 0, pretend = 0, frame = 0
 4833              		@ frame_needed = 0, uses_anonymous_args = 0
 4834              		@ link register save eliminated.
1105:src/xeq.c     **** 		return XromFlags.mode_double;
 4835              		.loc 1 1105 2 view .LVU1288
1105:src/xeq.c     **** 		return XromFlags.mode_double;
 4836              		.loc 1 1105 6 is_stmt 0 view .LVU1289
 4837 0000 0A4B     		ldr	r3, .L393
1105:src/xeq.c     **** 		return XromFlags.mode_double;
 4838              		.loc 1 1105 5 view .LVU1290
 4839 0002 93F90120 		ldrsb	r2, [r3, #1]
 4840 0006 002A     		cmp	r2, #0
 4841 0008 0CDB     		blt	.L392
1107:src/xeq.c     **** }
 4842              		.loc 1 1107 2 is_stmt 1 view .LVU1291
 4843              	.LBB1642:
 4844              	.LBI1642:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4845              		.loc 1 1100 5 view .LVU1292
 4846              	.LBB1643:
1101:src/xeq.c     **** }
 4847              		.loc 1 1101 2 view .LVU1293
1101:src/xeq.c     **** }
 4848              		.loc 1 1101 24 is_stmt 0 view .LVU1294
 4849 000a 094B     		ldr	r3, .L393+4
 4850 000c 1B68     		ldr	r3, [r3]
 4851 000e B3F8E837 		ldrh	r3, [r3, #2024]
 4852 0012 44F20100 		movw	r0, #16385
 4853 0016 1840     		ands	r0, r0, r3
 4854 0018 A0F58040 		sub	r0, r0, #16384
 4855 001c B0FA80F0 		clz	r0, r0
 4856 0020 4009     		lsrs	r0, r0, #5
 4857              	.LBE1643:
 4858              	.LBE1642:
1108:src/xeq.c     **** 
 4859              		.loc 1 1108 1 view .LVU1295
 4860 0022 7047     		bx	lr
 4861              	.L392:
1106:src/xeq.c     **** 	return is_dblmode();
 4862              		.loc 1 1106 3 is_stmt 1 view .LVU1296
1106:src/xeq.c     **** 	return is_dblmode();
 4863              		.loc 1 1106 19 is_stmt 0 view .LVU1297
 4864 0024 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4865 0026 C0F3C000 		ubfx	r0, r0, #3, #1
 4866 002a 7047     		bx	lr
 4867              	.L394:
 4868              		.align	2
 4869              	.L393:
 4870 002c 00000000 		.word	XromParams
 4871 0030 00000000 		.word	main_ram
ARM GAS  /tmp/ccaPnj5t.s 			page 207


 4872              		.cfi_endproc
 4873              	.LFE82:
 4875              		.section	.text.s_to_i,"ax",%progbits
 4876              		.align	1
 4877              		.p2align 2,,3
 4878              		.global	s_to_i
 4879              		.syntax unified
 4880              		.thumb
 4881              		.thumb_func
 4882              		.fpu fpv4-sp-d16
 4884              	s_to_i:
 4885              	.LVL356:
 4886              	.LFB83:
1112:src/xeq.c     **** 	int x = 0;
 4887              		.loc 1 1112 27 is_stmt 1 view -0
 4888              		.cfi_startproc
 4889              		@ args = 0, pretend = 0, frame = 0
 4890              		@ frame_needed = 0, uses_anonymous_args = 0
 4891              		@ link register save eliminated.
1113:src/xeq.c     **** 	int neg;
 4892              		.loc 1 1113 2 view .LVU1299
1114:src/xeq.c     **** 
 4893              		.loc 1 1114 2 view .LVU1300
1116:src/xeq.c     **** 		s++;
 4894              		.loc 1 1116 2 view .LVU1301
1112:src/xeq.c     **** 	int x = 0;
 4895              		.loc 1 1112 27 is_stmt 0 view .LVU1302
 4896 0000 10B4     		push	{r4}
 4897              		.cfi_def_cfa_offset 4
 4898              		.cfi_offset 4, -4
1116:src/xeq.c     **** 		s++;
 4899              		.loc 1 1116 6 view .LVU1303
 4900 0002 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
1116:src/xeq.c     **** 		s++;
 4901              		.loc 1 1116 5 view .LVU1304
 4902 0004 2D29     		cmp	r1, #45
 4903 0006 26D0     		beq	.L411
1120:src/xeq.c     **** 			s++;
 4904              		.loc 1 1120 3 is_stmt 1 view .LVU1305
1120:src/xeq.c     **** 			s++;
 4905              		.loc 1 1120 6 is_stmt 0 view .LVU1306
 4906 0008 2B29     		cmp	r1, #43
 4907 000a 18D0     		beq	.L399
 4908              	.LVL357:
1125:src/xeq.c     **** 		const char c = *s++;
 4909              		.loc 1 1125 2 is_stmt 1 view .LVU1307
 4910              	.LBB1644:
1126:src/xeq.c     **** 
 4911              		.loc 1 1126 3 view .LVU1308
1128:src/xeq.c     **** 			break;
 4912              		.loc 1 1128 15 is_stmt 0 view .LVU1309
 4913 000c A1F13003 		sub	r3, r1, #48
1128:src/xeq.c     **** 			break;
 4914              		.loc 1 1128 6 view .LVU1310
 4915 0010 D9B2     		uxtb	r1, r3
 4916 0012 0929     		cmp	r1, #9
1126:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 208


 4917              		.loc 1 1126 20 view .LVU1311
 4918 0014 00F10102 		add	r2, r0, #1
 4919              	.LVL358:
1128:src/xeq.c     **** 			break;
 4920              		.loc 1 1128 3 is_stmt 1 view .LVU1312
1128:src/xeq.c     **** 			break;
 4921              		.loc 1 1128 6 is_stmt 0 view .LVU1313
 4922 0018 19D8     		bhi	.L404
 4923              	.LVL359:
 4924              	.L410:
1128:src/xeq.c     **** 			break;
 4925              		.loc 1 1128 6 view .LVU1314
 4926              	.LBE1644:
1122:src/xeq.c     **** 	}
 4927              		.loc 1 1122 7 view .LVU1315
 4928 001a 0024     		movs	r4, #0
 4929              	.LVL360:
 4930              	.L398:
1122:src/xeq.c     **** 	}
 4931              		.loc 1 1122 7 view .LVU1316
 4932 001c 0020     		movs	r0, #0
 4933              	.LVL361:
 4934              	.L401:
 4935              	.LBB1645:
1130:src/xeq.c     **** 	}
 4936              		.loc 1 1130 3 is_stmt 1 view .LVU1317
1126:src/xeq.c     **** 
 4937              		.loc 1 1126 14 is_stmt 0 view .LVU1318
 4938 001e 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 4939              	.LVL362:
1130:src/xeq.c     **** 	}
 4940              		.loc 1 1130 10 view .LVU1319
 4941 0022 00EB8000 		add	r0, r0, r0, lsl #2
 4942              	.LVL363:
1130:src/xeq.c     **** 	}
 4943              		.loc 1 1130 5 view .LVU1320
 4944 0026 03EB4000 		add	r0, r3, r0, lsl #1
 4945              	.LVL364:
1130:src/xeq.c     **** 	}
 4946              		.loc 1 1130 5 view .LVU1321
 4947              	.LBE1645:
1125:src/xeq.c     **** 		const char c = *s++;
 4948              		.loc 1 1125 8 is_stmt 1 view .LVU1322
1125:src/xeq.c     **** 		const char c = *s++;
 4949              		.loc 1 1125 2 view .LVU1323
 4950              	.LBB1646:
1126:src/xeq.c     **** 
 4951              		.loc 1 1126 3 view .LVU1324
1128:src/xeq.c     **** 			break;
 4952              		.loc 1 1128 3 view .LVU1325
1128:src/xeq.c     **** 			break;
 4953              		.loc 1 1128 15 is_stmt 0 view .LVU1326
 4954 002a A1F13003 		sub	r3, r1, #48
1128:src/xeq.c     **** 			break;
 4955              		.loc 1 1128 6 view .LVU1327
 4956 002e D9B2     		uxtb	r1, r3
 4957 0030 0929     		cmp	r1, #9
ARM GAS  /tmp/ccaPnj5t.s 			page 209


 4958 0032 F4D9     		bls	.L401
 4959              	.LBE1646:
1132:src/xeq.c     **** 		return -x;
 4960              		.loc 1 1132 2 is_stmt 1 view .LVU1328
1132:src/xeq.c     **** 		return -x;
 4961              		.loc 1 1132 5 is_stmt 0 view .LVU1329
 4962 0034 04B1     		cbz	r4, .L395
 4963 0036 4042     		rsbs	r0, r0, #0
 4964              	.LVL365:
 4965              	.L395:
1135:src/xeq.c     **** 
 4966              		.loc 1 1135 1 view .LVU1330
 4967 0038 5DF8044B 		ldr	r4, [sp], #4
 4968              		.cfi_remember_state
 4969              		.cfi_restore 4
 4970              		.cfi_def_cfa_offset 0
 4971 003c 7047     		bx	lr
 4972              	.LVL366:
 4973              	.L399:
 4974              		.cfi_restore_state
1121:src/xeq.c     **** 		neg = 0;
 4975              		.loc 1 1121 4 is_stmt 1 view .LVU1331
1125:src/xeq.c     **** 		const char c = *s++;
 4976              		.loc 1 1125 2 view .LVU1332
 4977              	.LBB1647:
1126:src/xeq.c     **** 
 4978              		.loc 1 1126 3 view .LVU1333
1126:src/xeq.c     **** 
 4979              		.loc 1 1126 14 is_stmt 0 view .LVU1334
 4980 003e 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1128:src/xeq.c     **** 			break;
 4981              		.loc 1 1128 15 view .LVU1335
 4982 0040 A1F13003 		sub	r3, r1, #48
1128:src/xeq.c     **** 			break;
 4983              		.loc 1 1128 6 view .LVU1336
 4984 0044 D9B2     		uxtb	r1, r3
 4985 0046 0929     		cmp	r1, #9
1126:src/xeq.c     **** 
 4986              		.loc 1 1126 20 view .LVU1337
 4987 0048 00F10202 		add	r2, r0, #2
 4988              	.LVL367:
1128:src/xeq.c     **** 			break;
 4989              		.loc 1 1128 3 is_stmt 1 view .LVU1338
1128:src/xeq.c     **** 			break;
 4990              		.loc 1 1128 6 is_stmt 0 view .LVU1339
 4991 004c E5D9     		bls	.L410
 4992              	.LVL368:
 4993              	.L404:
1128:src/xeq.c     **** 			break;
 4994              		.loc 1 1128 6 view .LVU1340
 4995 004e 0020     		movs	r0, #0
 4996              	.LBE1647:
1135:src/xeq.c     **** 
 4997              		.loc 1 1135 1 view .LVU1341
 4998 0050 5DF8044B 		ldr	r4, [sp], #4
 4999              		.cfi_remember_state
 5000              		.cfi_restore 4
ARM GAS  /tmp/ccaPnj5t.s 			page 210


 5001              		.cfi_def_cfa_offset 0
 5002 0054 7047     		bx	lr
 5003              	.LVL369:
 5004              	.L411:
 5005              		.cfi_restore_state
1117:src/xeq.c     **** 		neg = 1;
 5006              		.loc 1 1117 3 is_stmt 1 view .LVU1342
1118:src/xeq.c     **** 	} else {
 5007              		.loc 1 1118 3 view .LVU1343
1125:src/xeq.c     **** 		const char c = *s++;
 5008              		.loc 1 1125 2 view .LVU1344
 5009              	.LBB1648:
1126:src/xeq.c     **** 
 5010              		.loc 1 1126 3 view .LVU1345
1126:src/xeq.c     **** 
 5011              		.loc 1 1126 14 is_stmt 0 view .LVU1346
 5012 0056 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1128:src/xeq.c     **** 			break;
 5013              		.loc 1 1128 15 view .LVU1347
 5014 0058 A1F13003 		sub	r3, r1, #48
1128:src/xeq.c     **** 			break;
 5015              		.loc 1 1128 6 view .LVU1348
 5016 005c D9B2     		uxtb	r1, r3
 5017 005e 0929     		cmp	r1, #9
1126:src/xeq.c     **** 
 5018              		.loc 1 1126 20 view .LVU1349
 5019 0060 00F10202 		add	r2, r0, #2
 5020              	.LVL370:
1128:src/xeq.c     **** 			break;
 5021              		.loc 1 1128 3 is_stmt 1 view .LVU1350
1128:src/xeq.c     **** 			break;
 5022              		.loc 1 1128 6 is_stmt 0 view .LVU1351
 5023 0064 F3D8     		bhi	.L404
 5024              	.LBE1648:
1118:src/xeq.c     **** 	} else {
 5025              		.loc 1 1118 7 view .LVU1352
 5026 0066 0124     		movs	r4, #1
 5027 0068 D8E7     		b	.L398
 5028              		.cfi_endproc
 5029              	.LFE83:
 5031 006a 00BF     		.section	.text.digit,"ax",%progbits
 5032              		.align	1
 5033              		.p2align 2,,3
 5034              		.syntax unified
 5035              		.thumb
 5036              		.thumb_func
 5037              		.fpu fpv4-sp-d16
 5039              	digit:
 5040              	.LVL371:
 5041              	.LFB212:
3804:src/xeq.c     **** 	const int intm = is_intmode();
 5042              		.loc 1 3804 35 is_stmt 1 view -0
 5043              		.cfi_startproc
 5044              		@ args = 0, pretend = 0, frame = 0
 5045              		@ frame_needed = 0, uses_anonymous_args = 0
3805:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5046              		.loc 1 3805 2 view .LVU1354
ARM GAS  /tmp/ccaPnj5t.s 			page 211


3804:src/xeq.c     **** 	const int intm = is_intmode();
 5047              		.loc 1 3804 35 is_stmt 0 view .LVU1355
 5048 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5049              		.cfi_def_cfa_offset 24
 5050              		.cfi_offset 3, -24
 5051              		.cfi_offset 4, -20
 5052              		.cfi_offset 5, -16
 5053              		.cfi_offset 6, -12
 5054              		.cfi_offset 7, -8
 5055              		.cfi_offset 14, -4
3805:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5056              		.loc 1 3805 19 view .LVU1356
 5057 0002 604E     		ldr	r6, .L458
3808:src/xeq.c     **** 		lim++;
 5058              		.loc 1 3808 13 view .LVU1357
 5059 0004 604C     		ldr	r4, .L458+4
3805:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5060              		.loc 1 3805 19 view .LVU1358
 5061 0006 3368     		ldr	r3, [r6]
3808:src/xeq.c     **** 		lim++;
 5062              		.loc 1 3808 13 view .LVU1359
 5063 0008 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
3805:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5064              		.loc 1 3805 19 view .LVU1360
 5065 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 5066              	.LVL372:
3806:src/xeq.c     **** 
 5067              		.loc 1 3806 2 is_stmt 1 view .LVU1361
3808:src/xeq.c     **** 		lim++;
 5068              		.loc 1 3808 2 view .LVU1362
3809:src/xeq.c     **** 	if (intm) {
 5069              		.loc 1 3809 6 is_stmt 0 view .LVU1363
 5070 0010 2D2A     		cmp	r2, #45
 5071 0012 14BF     		ite	ne
 5072 0014 0C27     		movne	r7, #12
 5073 0016 0D27     		moveq	r7, #13
 5074              	.LVL373:
3810:src/xeq.c     **** 		if (c >= int_base()) {
 5075              		.loc 1 3810 2 is_stmt 1 view .LVU1364
3810:src/xeq.c     **** 		if (c >= int_base()) {
 5076              		.loc 1 3810 5 is_stmt 0 view .LVU1365
 5077 0018 DB07     		lsls	r3, r3, #31
 5078              	.LVL374:
3804:src/xeq.c     **** 	const int intm = is_intmode();
 5079              		.loc 1 3804 35 view .LVU1366
 5080 001a 0546     		mov	r5, r0
3810:src/xeq.c     **** 		if (c >= int_base()) {
 5081              		.loc 1 3810 5 view .LVU1367
 5082 001c 79D4     		bmi	.L455
3816:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5083              		.loc 1 3816 3 is_stmt 1 view .LVU1368
3816:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5084              		.loc 1 3816 6 is_stmt 0 view .LVU1369
 5085 001e 0928     		cmp	r0, #9
 5086 0020 00F28C80 		bhi	.L416
3821:src/xeq.c     **** 			lim = CMDLINELEN;
 5087              		.loc 1 3821 3 is_stmt 1 view .LVU1370
ARM GAS  /tmp/ccaPnj5t.s 			page 212


3821:src/xeq.c     **** 			lim = CMDLINELEN;
 5088              		.loc 1 3821 7 is_stmt 0 view .LVU1371
 5089 0024 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3821:src/xeq.c     **** 			lim = CMDLINELEN;
 5090              		.loc 1 3821 6 view .LVU1372
 5091 0026 002B     		cmp	r3, #0
 5092 0028 65D0     		beq	.L417
3822:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5093              		.loc 1 3822 4 is_stmt 1 view .LVU1373
 5094              	.LVL375:
3824:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5095              		.loc 1 3824 4 view .LVU1374
3824:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5096              		.loc 1 3824 8 is_stmt 0 view .LVU1375
 5097 002a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3824:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5098              		.loc 1 3824 7 view .LVU1376
 5099 002c 122A     		cmp	r2, #18
 5100 002e 40F29980 		bls	.L441
 5101              	.LBB1659:
3825:src/xeq.c     **** 
 5102              		.loc 1 3825 5 is_stmt 1 view .LVU1377
3827:src/xeq.c     **** 					p++;
 5103              		.loc 1 3827 9 is_stmt 0 view .LVU1378
 5104 0032 E118     		adds	r1, r4, r3
3825:src/xeq.c     **** 
 5105              		.loc 1 3825 11 view .LVU1379
 5106 0034 2133     		adds	r3, r3, #33
3827:src/xeq.c     **** 					p++;
 5107              		.loc 1 3827 8 view .LVU1380
 5108 0036 91F82110 		ldrb	r1, [r1, #33]	@ zero_extendqisi2
3825:src/xeq.c     **** 
 5109              		.loc 1 3825 11 view .LVU1381
 5110 003a 2344     		add	r3, r3, r4
 5111              	.LVL376:
3827:src/xeq.c     **** 					p++;
 5112              		.loc 1 3827 5 is_stmt 1 view .LVU1382
3827:src/xeq.c     **** 					p++;
 5113              		.loc 1 3827 8 is_stmt 0 view .LVU1383
 5114 003c 2D29     		cmp	r1, #45
3828:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5115              		.loc 1 3828 6 is_stmt 1 view .LVU1384
3829:src/xeq.c     **** 					p[0] = p[1];
 5116              		.loc 1 3829 11 is_stmt 0 view .LVU1385
 5117 003e 5349     		ldr	r1, .L458+8
3828:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5118              		.loc 1 3828 7 view .LVU1386
 5119 0040 08BF     		it	eq
 5120 0042 0133     		addeq	r3, r3, #1
 5121              	.LVL377:
3829:src/xeq.c     **** 					p[0] = p[1];
 5122              		.loc 1 3829 11 is_stmt 1 view .LVU1387
 5123 0044 8B42     		cmp	r3, r1
 5124 0046 05D2     		bcs	.L420
 5125              	.LVL378:
 5126              	.L421:
3830:src/xeq.c     **** 					p++;
ARM GAS  /tmp/ccaPnj5t.s 			page 213


 5127              		.loc 1 3830 6 view .LVU1388
3830:src/xeq.c     **** 					p++;
 5128              		.loc 1 3830 11 is_stmt 0 view .LVU1389
 5129 0048 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5130 004a 03F8012B 		strb	r2, [r3], #1
 5131              	.LVL379:
3831:src/xeq.c     **** 				}
 5132              		.loc 1 3831 6 is_stmt 1 view .LVU1390
3829:src/xeq.c     **** 					p[0] = p[1];
 5133              		.loc 1 3829 11 view .LVU1391
 5134 004e 8B42     		cmp	r3, r1
 5135 0050 FAD1     		bne	.L421
 5136 0052 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5137              	.L420:
3833:src/xeq.c     **** 			}
 5138              		.loc 1 3833 5 view .LVU1392
3833:src/xeq.c     **** 			}
 5139              		.loc 1 3833 18 is_stmt 0 view .LVU1393
 5140 0054 013A     		subs	r2, r2, #1
 5141 0056 D2B2     		uxtb	r2, r2
 5142              	.LBE1659:
3822:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5143              		.loc 1 3822 8 view .LVU1394
 5144 0058 1323     		movs	r3, #19
 5145              	.LVL380:
3853:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5146              		.loc 1 3853 2 is_stmt 1 view .LVU1395
3853:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5147              		.loc 1 3853 5 is_stmt 0 view .LVU1396
 5148 005a 9342     		cmp	r3, r2
 5149              	.LBB1660:
3833:src/xeq.c     **** 			}
 5150              		.loc 1 3833 18 view .LVU1397
 5151 005c 2277     		strb	r2, [r4, #28]
 5152              	.LBE1660:
3853:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5153              		.loc 1 3853 5 view .LVU1398
 5154 005e 53DD     		ble	.L438
 5155              	.LVL381:
 5156              	.L425:
3865:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5157              		.loc 1 3865 3 is_stmt 1 view .LVU1399
3865:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5158              		.loc 1 3865 6 is_stmt 0 view .LVU1400
 5159 0060 002D     		cmp	r5, #0
 5160 0062 70D1     		bne	.L427
3865:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5161              		.loc 1 3865 17 discriminator 1 view .LVU1401
 5162 0064 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3865:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5163              		.loc 1 3865 14 discriminator 1 view .LVU1402
 5164 0066 002B     		cmp	r3, #0
 5165 0068 00F08180 		beq	.L428
3866:src/xeq.c     **** 				return;
 5166              		.loc 1 3866 4 is_stmt 1 view .LVU1403
3869:src/xeq.c     **** 				return;
 5167              		.loc 1 3869 4 view .LVU1404
ARM GAS  /tmp/ccaPnj5t.s 			page 214


3866:src/xeq.c     **** 				return;
 5168              		.loc 1 3866 15 is_stmt 0 view .LVU1405
 5169 006c A018     		adds	r0, r4, r2
3869:src/xeq.c     **** 				return;
 5170              		.loc 1 3869 7 view .LVU1406
 5171 006e C17F     		ldrb	r1, [r0, #31]	@ zero_extendqisi2
 5172 0070 4439     		subs	r1, r1, #68
 5173 0072 0129     		cmp	r1, #1
 5174 0074 3ED9     		bls	.L412
3877:src/xeq.c     **** 
 5175              		.loc 1 3877 3 is_stmt 1 view .LVU1407
 5176              	.LVL382:
 5177              	.LBB1661:
 5178              	.LBI1661:
2620:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5179              		.loc 1 2620 13 view .LVU1408
 5180              	.LBB1662:
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5181              		.loc 1 2621 2 view .LVU1409
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5182              		.loc 1 2621 23 is_stmt 0 view .LVU1410
 5183 0076 0132     		adds	r2, r2, #1
 5184 0078 D2B2     		uxtb	r2, r2
2622:src/xeq.c     **** }
 5185              		.loc 1 2622 25 view .LVU1411
 5186 007a A118     		adds	r1, r4, r2
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5187              		.loc 1 2621 27 view .LVU1412
 5188 007c 3027     		movs	r7, #48
 5189 007e 80F82070 		strb	r7, [r0, #32]
2622:src/xeq.c     **** }
 5190              		.loc 1 2622 2 is_stmt 1 view .LVU1413
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5191              		.loc 1 2621 23 is_stmt 0 view .LVU1414
 5192 0082 2277     		strb	r2, [r4, #28]
2622:src/xeq.c     **** }
 5193              		.loc 1 2622 25 view .LVU1415
 5194 0084 81F82050 		strb	r5, [r1, #32]
 5195              	.LVL383:
2622:src/xeq.c     **** }
 5196              		.loc 1 2622 25 view .LVU1416
 5197              	.LBE1662:
 5198              	.LBE1661:
3879:src/xeq.c     **** 			exponent_adjusted(1);
 5199              		.loc 1 3879 3 is_stmt 1 view .LVU1417
 5200              	.L439:
 5201              	.L431:
 5202              	.L432:
3880:src/xeq.c     **** 	}
 5203              		.loc 1 3880 4 view .LVU1418
 5204              	.LBB1667:
 5205              	.LBI1667:
2629:src/xeq.c     **** {
 5206              		.loc 1 2629 13 view .LVU1419
 5207              	.LBB1668:
2631:src/xeq.c     **** 	int i;
 5208              		.loc 1 2631 2 view .LVU1420
ARM GAS  /tmp/ccaPnj5t.s 			page 215


 5209              	.LBB1669:
 5210              	.LBI1669:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5211              		.loc 1 1100 5 view .LVU1421
 5212              	.LBB1670:
1101:src/xeq.c     **** }
 5213              		.loc 1 1101 2 view .LVU1422
1101:src/xeq.c     **** }
 5214              		.loc 1 1101 2 is_stmt 0 view .LVU1423
 5215              	.LBE1670:
 5216              	.LBE1669:
2632:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
 5217              		.loc 1 2632 2 is_stmt 1 view .LVU1424
2636:src/xeq.c     **** #endif
 5218              		.loc 1 2636 2 view .LVU1425
2641:src/xeq.c     **** #endif
 5219              		.loc 1 2641 2 view .LVU1426
2646:src/xeq.c     **** #endif
 5220              		.loc 1 2646 2 view .LVU1427
2651:src/xeq.c     **** #endif
 5221              		.loc 1 2651 2 view .LVU1428
2656:src/xeq.c     **** #endif
 5222              		.loc 1 2656 2 view .LVU1429
2661:src/xeq.c     **** #endif
 5223              		.loc 1 2661 2 view .LVU1430
2666:src/xeq.c     **** #endif
 5224              		.loc 1 2666 2 view .LVU1431
2671:src/xeq.c     **** #endif
 5225              		.loc 1 2671 2 view .LVU1432
2676:src/xeq.c     **** #endif
 5226              		.loc 1 2676 2 view .LVU1433
2681:src/xeq.c     **** #endif
 5227              		.loc 1 2681 2 view .LVU1434
2683:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
 5228              		.loc 1 2683 2 view .LVU1435
2684:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
 5229              		.loc 1 2684 2 view .LVU1436
2685:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
 5230              		.loc 1 2685 2 view .LVU1437
2686:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
 5231              		.loc 1 2686 2 view .LVU1438
2687:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
 5232              		.loc 1 2687 2 view .LVU1439
2688:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
 5233              		.loc 1 2688 2 view .LVU1440
2689:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
 5234              		.loc 1 2689 2 view .LVU1441
2690:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
 5235              		.loc 1 2690 2 view .LVU1442
2691:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
 5236              		.loc 1 2691 2 view .LVU1443
2692:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 5237              		.loc 1 2692 2 view .LVU1444
2694:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
 5238              		.loc 1 2694 2 view .LVU1445
2695:src/xeq.c     **** #else
 5239              		.loc 1 2695 2 view .LVU1446
ARM GAS  /tmp/ccaPnj5t.s 			page 216


 5240              	.LBB1673:
 5241              	.LBB1671:
1101:src/xeq.c     **** }
 5242              		.loc 1 1101 24 is_stmt 0 view .LVU1447
 5243 0088 3268     		ldr	r2, [r6]
 5244 008a B2F8E807 		ldrh	r0, [r2, #2024]
 5245              	.LBE1671:
 5246              	.LBE1673:
 5247              	.LBB1674:
3144:src/xeq.c     **** #else
 5248              		.loc 1 3144 9 view .LVU1448
 5249 008e E118     		adds	r1, r4, r3
 5250              	.LBE1674:
2695:src/xeq.c     **** #else
 5251              		.loc 1 2695 8 view .LVU1449
 5252 0090 03F12005 		add	r5, r3, #32
 5253              	.LBB1675:
 5254              	.LBB1672:
1101:src/xeq.c     **** }
 5255              		.loc 1 1101 24 view .LVU1450
 5256 0094 44F20102 		movw	r2, #16385
 5257              	.LBE1672:
 5258              	.LBE1675:
 5259              	.LBB1676:
2815:src/xeq.c     **** 			// Double precision mode
 5260              		.loc 1 2815 6 view .LVU1451
 5261 0098 0240     		ands	r2, r2, r0
 5262              	.LBE1676:
2695:src/xeq.c     **** #else
 5263              		.loc 1 2695 8 view .LVU1452
 5264 009a 2544     		add	r5, r5, r4
 5265              	.LVL384:
2714:src/xeq.c     **** #endif
 5266              		.loc 1 2714 2 is_stmt 1 view .LVU1453
2719:src/xeq.c     **** 
 5267              		.loc 1 2719 2 view .LVU1454
2722:src/xeq.c     **** 		emax = 999;
 5268              		.loc 1 2722 2 view .LVU1455
 5269              	.LBB1677:
2726:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
 5270              		.loc 1 2726 3 view .LVU1456
2727:src/xeq.c     **** 
 5271              		.loc 1 2727 3 view .LVU1457
2729:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
 5272              		.loc 1 2729 3 view .LVU1458
2815:src/xeq.c     **** 			// Double precision mode
 5273              		.loc 1 2815 3 view .LVU1459
2850:src/xeq.c     **** 				}
 5274              		.loc 1 2850 17 is_stmt 0 view .LVU1460
 5275 009c B2F5804F 		cmp	r2, #16384
3144:src/xeq.c     **** #else
 5276              		.loc 1 3144 8 view .LVU1461
 5277 00a0 91F82010 		ldrb	r1, [r1, #32]	@ zero_extendqisi2
2850:src/xeq.c     **** 				}
 5278              		.loc 1 2850 17 view .LVU1462
 5279 00a4 41F2FF72 		movw	r2, #6143
 5280              	.LBE1677:
ARM GAS  /tmp/ccaPnj5t.s 			page 217


3158:src/xeq.c     **** #  else
 5281              		.loc 1 3158 3 view .LVU1463
 5282 00a8 05F10107 		add	r7, r5, #1
 5283              	.LBB1678:
2850:src/xeq.c     **** 				}
 5284              		.loc 1 2850 17 view .LVU1464
 5285 00ac 18BF     		it	ne
 5286 00ae 4FF4C072 		movne	r2, #384
 5287 00b2 40F27F16 		movw	r6, #383
 5288              	.LVL385:
2850:src/xeq.c     **** 				}
 5289              		.loc 1 2850 17 view .LVU1465
 5290              	.LBE1678:
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5291              		.loc 1 3167 9 view .LVU1466
 5292 00b6 3846     		mov	r0, r7
 5293              	.LBB1679:
2850:src/xeq.c     **** 				}
 5294              		.loc 1 2850 17 view .LVU1467
 5295 00b8 04BF     		itt	eq
 5296 00ba 1646     		moveq	r6, r2
 5297              	.LVL386:
2850:src/xeq.c     **** 				}
 5298              		.loc 1 2850 17 view .LVU1468
 5299 00bc 4FF4C052 		moveq	r2, #6144
 5300              	.LVL387:
2929:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
 5301              		.loc 1 2929 3 is_stmt 1 view .LVU1469
2945:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
 5302              		.loc 1 2945 8 view .LVU1470
2991:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
 5303              		.loc 1 2991 3 view .LVU1471
3005:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
 5304              		.loc 1 3005 8 view .LVU1472
3045:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
 5305              		.loc 1 3045 3 view .LVU1473
3071:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
 5306              		.loc 1 3071 8 view .LVU1474
3097:src/xeq.c     **** 			if (exp_chs_ds == 0) {
 5307              		.loc 1 3097 8 view .LVU1475
3126:src/xeq.c     **** 				// Limit exponents so sign change is always legal
 5308              		.loc 1 3126 4 view .LVU1476
3133:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
 5309              		.loc 1 3133 9 view .LVU1477
3141:src/xeq.c     **** 					return;
 5310              		.loc 1 3141 5 view .LVU1478
3144:src/xeq.c     **** #else
 5311              		.loc 1 3144 5 view .LVU1479
3150:src/xeq.c     **** 			}
 5312              		.loc 1 3150 11 is_stmt 0 view .LVU1480
 5313 00c0 4429     		cmp	r1, #68
 5314 00c2 18BF     		it	ne
 5315 00c4 1646     		movne	r6, r2
 5316              	.LVL388:
3150:src/xeq.c     **** 			}
 5317              		.loc 1 3150 11 view .LVU1481
 5318              	.LBE1679:
ARM GAS  /tmp/ccaPnj5t.s 			page 218


3158:src/xeq.c     **** #  else
 5319              		.loc 1 3158 2 is_stmt 1 view .LVU1482
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5320              		.loc 1 3167 2 view .LVU1483
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5321              		.loc 1 3167 8 view .LVU1484
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5322              		.loc 1 3167 9 is_stmt 0 view .LVU1485
 5323 00c6 FFF7FEFF 		bl	s_to_i
 5324              	.LVL389:
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5325              		.loc 1 3167 8 view .LVU1486
 5326 00ca B042     		cmp	r0, r6
3168:src/xeq.c     **** 			p[i] = p[i + 1];
 5327              		.loc 1 3168 3 view .LVU1487
 5328 00cc 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5329              		.loc 1 3167 8 view .LVU1488
 5330 00ce 0FDD     		ble	.L435
 5331              	.L456:
 5332              	.LVL390:
3168:src/xeq.c     **** 			p[i] = p[i + 1];
 5333              		.loc 1 3168 15 is_stmt 1 view .LVU1489
3168:src/xeq.c     **** 			p[i] = p[i + 1];
 5334              		.loc 1 3168 3 is_stmt 0 view .LVU1490
 5335 00d0 2BB1     		cbz	r3, .L437
 5336              	.LVL391:
 5337              	.L444:
3168:src/xeq.c     **** 			p[i] = p[i + 1];
 5338              		.loc 1 3168 3 view .LVU1491
 5339 00d2 3B46     		mov	r3, r7
 5340              	.L434:
3169:src/xeq.c     **** 		CmdLineLength--;
 5341              		.loc 1 3169 4 is_stmt 1 view .LVU1492
3169:src/xeq.c     **** 		CmdLineLength--;
 5342              		.loc 1 3169 9 is_stmt 0 view .LVU1493
 5343 00d4 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5344 00d6 1A70     		strb	r2, [r3]
3168:src/xeq.c     **** 			p[i] = p[i + 1];
 5345              		.loc 1 3168 29 is_stmt 1 view .LVU1494
3168:src/xeq.c     **** 			p[i] = p[i + 1];
 5346              		.loc 1 3168 15 view .LVU1495
3168:src/xeq.c     **** 			p[i] = p[i + 1];
 5347              		.loc 1 3168 3 is_stmt 0 view .LVU1496
 5348 00d8 0133     		adds	r3, r3, #1
 5349 00da 002A     		cmp	r2, #0
 5350 00dc FAD1     		bne	.L434
 5351              	.L437:
3170:src/xeq.c     **** 	}
 5352              		.loc 1 3170 3 is_stmt 1 view .LVU1497
3170:src/xeq.c     **** 	}
 5353              		.loc 1 3170 16 is_stmt 0 view .LVU1498
 5354 00de 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5355              		.loc 1 3167 9 view .LVU1499
 5356 00e0 3846     		mov	r0, r7
3170:src/xeq.c     **** 	}
ARM GAS  /tmp/ccaPnj5t.s 			page 219


 5357              		.loc 1 3170 16 view .LVU1500
 5358 00e2 013B     		subs	r3, r3, #1
 5359 00e4 2377     		strb	r3, [r4, #28]
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5360              		.loc 1 3167 8 is_stmt 1 view .LVU1501
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5361              		.loc 1 3167 9 is_stmt 0 view .LVU1502
 5362 00e6 FFF7FEFF 		bl	s_to_i
 5363              	.LVL392:
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5364              		.loc 1 3167 8 view .LVU1503
 5365 00ea B042     		cmp	r0, r6
3168:src/xeq.c     **** 			p[i] = p[i + 1];
 5366              		.loc 1 3168 3 view .LVU1504
 5367 00ec 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5368              		.loc 1 3167 8 view .LVU1505
 5369 00ee EFDC     		bgt	.L456
 5370              	.L435:
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5371              		.loc 1 3167 26 view .LVU1506
 5372 00f0 302B     		cmp	r3, #48
 5373 00f2 EED0     		beq	.L444
 5374              	.LVL393:
 5375              	.L412:
3167:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5376              		.loc 1 3167 26 view .LVU1507
 5377              	.LBE1668:
 5378              	.LBE1667:
3882:src/xeq.c     **** 
 5379              		.loc 1 3882 1 view .LVU1508
 5380 00f4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5381              	.LVL394:
 5382              	.L417:
3838:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5383              		.loc 1 3838 4 is_stmt 1 view .LVU1509
3838:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5384              		.loc 1 3838 11 is_stmt 0 view .LVU1510
 5385 00f6 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5386              	.LVL395:
3840:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5387              		.loc 1 3840 4 is_stmt 1 view .LVU1511
3840:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5388              		.loc 1 3840 7 is_stmt 0 view .LVU1512
 5389 00f8 012B     		cmp	r3, #1
 5390 00fa 35D9     		bls	.L457
3843:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5391              		.loc 1 3843 5 is_stmt 1 view .LVU1513
3843:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5392              		.loc 1 3843 22 is_stmt 0 view .LVU1514
 5393 00fc 2D2A     		cmp	r2, #45
 5394 00fe 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5395 0100 30D0     		beq	.L441
 5396 0102 1223     		movs	r3, #18
 5397              	.LVL396:
 5398              	.L418:
3853:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
ARM GAS  /tmp/ccaPnj5t.s 			page 220


 5399              		.loc 1 3853 2 is_stmt 1 view .LVU1515
3853:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5400              		.loc 1 3853 5 is_stmt 0 view .LVU1516
 5401 0104 9342     		cmp	r3, r2
 5402 0106 ABDC     		bgt	.L425
 5403              	.LVL397:
 5404              	.L438:
3855:src/xeq.c     **** 		return;
 5405              		.loc 1 3855 3 is_stmt 1 view .LVU1517
3882:src/xeq.c     **** 
 5406              		.loc 1 3882 1 is_stmt 0 view .LVU1518
 5407 0108 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5408              		.cfi_remember_state
 5409              		.cfi_restore 14
 5410              		.cfi_restore 7
 5411              		.cfi_restore 6
 5412              		.cfi_restore 5
 5413              		.cfi_restore 4
 5414              		.cfi_restore 3
 5415              		.cfi_def_cfa_offset 0
 5416              	.LVL398:
3855:src/xeq.c     **** 		return;
 5417              		.loc 1 3855 3 view .LVU1519
 5418 010c 0A20     		movs	r0, #10
 5419 010e FFF7FEBF 		b	report_warn
 5420              	.LVL399:
 5421              	.L455:
 5422              		.cfi_restore_state
3811:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5423              		.loc 1 3811 3 is_stmt 1 view .LVU1520
3811:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5424              		.loc 1 3811 12 is_stmt 0 view .LVU1521
 5425 0112 FFF7FEFF 		bl	int_base
 5426              	.LVL400:
3811:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5427              		.loc 1 3811 6 view .LVU1522
 5428 0116 A842     		cmp	r0, r5
 5429 0118 10D9     		bls	.L416
3853:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5430              		.loc 1 3853 2 is_stmt 1 view .LVU1523
3853:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5431              		.loc 1 3853 6 is_stmt 0 view .LVU1524
 5432 011a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3853:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5433              		.loc 1 3853 5 view .LVU1525
 5434 011c BA42     		cmp	r2, r7
 5435 011e F3DA     		bge	.L438
3859:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5436              		.loc 1 3859 2 is_stmt 1 view .LVU1526
3859:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5437              		.loc 1 3859 5 is_stmt 0 view .LVU1527
 5438 0120 092D     		cmp	r5, #9
 5439 0122 9DD9     		bls	.L425
3860:src/xeq.c     **** 	else {
 5440              		.loc 1 3860 3 is_stmt 1 view .LVU1528
 5441              	.LVL401:
 5442              	.LBB1680:
ARM GAS  /tmp/ccaPnj5t.s 			page 221


 5443              	.LBI1680:
2620:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5444              		.loc 1 2620 13 view .LVU1529
 5445              	.LBB1681:
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5446              		.loc 1 2621 2 view .LVU1530
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5447              		.loc 1 2621 23 is_stmt 0 view .LVU1531
 5448 0124 531C     		adds	r3, r2, #1
 5449 0126 DBB2     		uxtb	r3, r3
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5450              		.loc 1 2621 27 view .LVU1532
 5451 0128 2244     		add	r2, r2, r4
2622:src/xeq.c     **** }
 5452              		.loc 1 2622 25 view .LVU1533
 5453 012a E118     		adds	r1, r4, r3
 5454              	.LBE1681:
 5455              	.LBE1680:
3860:src/xeq.c     **** 	else {
 5456              		.loc 1 3860 3 view .LVU1534
 5457 012c 3735     		adds	r5, r5, #55
 5458              	.LVL402:
 5459              	.LBB1683:
 5460              	.LBB1682:
2622:src/xeq.c     **** }
 5461              		.loc 1 2622 25 view .LVU1535
 5462 012e 0026     		movs	r6, #0
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5463              		.loc 1 2621 27 view .LVU1536
 5464 0130 82F82050 		strb	r5, [r2, #32]
2622:src/xeq.c     **** }
 5465              		.loc 1 2622 2 is_stmt 1 view .LVU1537
2622:src/xeq.c     **** }
 5466              		.loc 1 2622 25 is_stmt 0 view .LVU1538
 5467 0134 81F82060 		strb	r6, [r1, #32]
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5468              		.loc 1 2621 23 view .LVU1539
 5469 0138 2377     		strb	r3, [r4, #28]
 5470              	.LBE1682:
 5471              	.LBE1683:
3882:src/xeq.c     **** 
 5472              		.loc 1 3882 1 view .LVU1540
 5473 013a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5474              	.LVL403:
 5475              	.L416:
3812:src/xeq.c     **** 			return;
 5476              		.loc 1 3812 4 is_stmt 1 view .LVU1541
3882:src/xeq.c     **** 
 5477              		.loc 1 3882 1 is_stmt 0 view .LVU1542
 5478 013c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5479              		.cfi_remember_state
 5480              		.cfi_restore 14
 5481              		.cfi_restore 7
 5482              		.cfi_restore 6
 5483              		.cfi_restore 5
 5484              		.cfi_restore 4
 5485              		.cfi_restore 3
ARM GAS  /tmp/ccaPnj5t.s 			page 222


 5486              		.cfi_def_cfa_offset 0
 5487              	.LVL404:
3812:src/xeq.c     **** 			return;
 5488              		.loc 1 3812 4 view .LVU1543
 5489 0140 0920     		movs	r0, #9
 5490 0142 FFF7FEBF 		b	report_warn
 5491              	.LVL405:
 5492              	.L427:
 5493              		.cfi_restore_state
3877:src/xeq.c     **** 
 5494              		.loc 1 3877 3 is_stmt 1 view .LVU1544
 5495              	.LBB1684:
2620:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5496              		.loc 1 2620 13 view .LVU1545
 5497              	.LBB1663:
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5498              		.loc 1 2621 2 view .LVU1546
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5499              		.loc 1 2621 23 is_stmt 0 view .LVU1547
 5500 0146 511C     		adds	r1, r2, #1
 5501 0148 C9B2     		uxtb	r1, r1
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5502              		.loc 1 2621 27 view .LVU1548
 5503 014a 2244     		add	r2, r2, r4
2622:src/xeq.c     **** }
 5504              		.loc 1 2622 25 view .LVU1549
 5505 014c 6718     		adds	r7, r4, r1
 5506              	.LBE1663:
 5507              	.LBE1684:
3877:src/xeq.c     **** 
 5508              		.loc 1 3877 3 view .LVU1550
 5509 014e 3035     		adds	r5, r5, #48
 5510              	.LVL406:
3879:src/xeq.c     **** 			exponent_adjusted(1);
 5511              		.loc 1 3879 7 view .LVU1551
 5512 0150 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 5513              	.LBB1685:
 5514              	.LBB1664:
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5515              		.loc 1 2621 27 view .LVU1552
 5516 0152 82F82050 		strb	r5, [r2, #32]
2622:src/xeq.c     **** }
 5517              		.loc 1 2622 2 is_stmt 1 view .LVU1553
2622:src/xeq.c     **** }
 5518              		.loc 1 2622 25 is_stmt 0 view .LVU1554
 5519 0156 0022     		movs	r2, #0
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5520              		.loc 1 2621 23 view .LVU1555
 5521 0158 2177     		strb	r1, [r4, #28]
2622:src/xeq.c     **** }
 5522              		.loc 1 2622 25 view .LVU1556
 5523 015a 87F82020 		strb	r2, [r7, #32]
2622:src/xeq.c     **** }
 5524              		.loc 1 2622 25 view .LVU1557
 5525              	.LBE1664:
 5526              	.LBE1685:
3879:src/xeq.c     **** 			exponent_adjusted(1);
ARM GAS  /tmp/ccaPnj5t.s 			page 223


 5527              		.loc 1 3879 3 is_stmt 1 view .LVU1558
3879:src/xeq.c     **** 			exponent_adjusted(1);
 5528              		.loc 1 3879 6 is_stmt 0 view .LVU1559
 5529 015e 002B     		cmp	r3, #0
 5530 0160 92D1     		bne	.L439
3882:src/xeq.c     **** 
 5531              		.loc 1 3882 1 view .LVU1560
 5532 0162 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5533              	.LVL407:
 5534              	.L441:
3822:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5535              		.loc 1 3822 8 view .LVU1561
 5536 0164 1323     		movs	r3, #19
 5537 0166 CDE7     		b	.L418
 5538              	.LVL408:
 5539              	.L457:
3822:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5540              		.loc 1 3822 8 view .LVU1562
 5541 0168 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3838:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5542              		.loc 1 3838 8 view .LVU1563
 5543 016a 3B44     		add	r3, r3, r7
 5544              	.LVL409:
3838:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5545              		.loc 1 3838 8 view .LVU1564
 5546 016c CAE7     		b	.L418
 5547              	.LVL410:
 5548              	.L428:
3877:src/xeq.c     **** 
 5549              		.loc 1 3877 3 is_stmt 1 view .LVU1565
 5550              	.LBB1686:
2620:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5551              		.loc 1 2620 13 view .LVU1566
 5552              	.LBB1665:
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5553              		.loc 1 2621 2 view .LVU1567
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5554              		.loc 1 2621 23 is_stmt 0 view .LVU1568
 5555 016e 531C     		adds	r3, r2, #1
 5556 0170 DBB2     		uxtb	r3, r3
2622:src/xeq.c     **** }
 5557              		.loc 1 2622 25 view .LVU1569
 5558 0172 E118     		adds	r1, r4, r3
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5559              		.loc 1 2621 27 view .LVU1570
 5560 0174 2244     		add	r2, r2, r4
 5561 0176 3020     		movs	r0, #48
 5562 0178 82F82000 		strb	r0, [r2, #32]
2622:src/xeq.c     **** }
 5563              		.loc 1 2622 2 is_stmt 1 view .LVU1571
2622:src/xeq.c     **** }
 5564              		.loc 1 2622 25 is_stmt 0 view .LVU1572
 5565 017c 81F82050 		strb	r5, [r1, #32]
 5566              	.LVL411:
2622:src/xeq.c     **** }
 5567              		.loc 1 2622 25 view .LVU1573
 5568              	.LBE1665:
ARM GAS  /tmp/ccaPnj5t.s 			page 224


 5569              	.LBE1686:
3879:src/xeq.c     **** 			exponent_adjusted(1);
 5570              		.loc 1 3879 3 is_stmt 1 view .LVU1574
 5571              	.LBB1687:
 5572              	.LBB1666:
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5573              		.loc 1 2621 23 is_stmt 0 view .LVU1575
 5574 0180 2377     		strb	r3, [r4, #28]
 5575              	.LBE1666:
 5576              	.LBE1687:
3882:src/xeq.c     **** 
 5577              		.loc 1 3882 1 view .LVU1576
 5578 0182 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5579              	.LVL412:
 5580              	.L459:
3882:src/xeq.c     **** 
 5581              		.loc 1 3882 1 view .LVU1577
 5582              		.align	2
 5583              	.L458:
 5584 0184 00000000 		.word	main_ram
 5585 0188 00000000 		.word	StateWhileOn
 5586 018c 33000000 		.word	StateWhileOn+51
 5587              		.cfi_endproc
 5588              	.LFE212:
 5590              		.section	.text.s_to_ull,"ax",%progbits
 5591              		.align	1
 5592              		.p2align 2,,3
 5593              		.global	s_to_ull
 5594              		.syntax unified
 5595              		.thumb
 5596              		.thumb_func
 5597              		.fpu fpv4-sp-d16
 5599              	s_to_ull:
 5600              	.LVL413:
 5601              	.LFB84:
1139:src/xeq.c     **** 	unsigned long long int x = 0;
 5602              		.loc 1 1139 67 is_stmt 1 view -0
 5603              		.cfi_startproc
 5604              		@ args = 0, pretend = 0, frame = 0
 5605              		@ frame_needed = 0, uses_anonymous_args = 0
 5606              		@ link register save eliminated.
1140:src/xeq.c     **** 
 5607              		.loc 1 1140 2 view .LVU1579
1139:src/xeq.c     **** 	unsigned long long int x = 0;
 5608              		.loc 1 1139 67 is_stmt 0 view .LVU1580
 5609 0000 F0B4     		push	{r4, r5, r6, r7}
 5610              		.cfi_def_cfa_offset 16
 5611              		.cfi_offset 4, -16
 5612              		.cfi_offset 5, -12
 5613              		.cfi_offset 6, -8
 5614              		.cfi_offset 7, -4
1140:src/xeq.c     **** 
 5615              		.loc 1 1140 25 view .LVU1581
 5616 0002 0026     		movs	r6, #0
 5617 0004 0027     		movs	r7, #0
 5618 0006 02E0     		b	.L464
 5619              	.LVL414:
ARM GAS  /tmp/ccaPnj5t.s 			page 225


 5620              	.L466:
 5621              	.LBB1688:
1154:src/xeq.c     **** 	}
 5622              		.loc 1 1154 5 view .LVU1582
 5623 0008 E618     		adds	r6, r4, r3
 5624              	.LVL415:
1154:src/xeq.c     **** 	}
 5625              		.loc 1 1154 5 view .LVU1583
 5626 000a 45F10007 		adc	r7, r5, #0
 5627              	.LVL416:
1154:src/xeq.c     **** 	}
 5628              		.loc 1 1154 5 view .LVU1584
 5629              	.LBE1688:
1142:src/xeq.c     **** 		unsigned int n;
 5630              		.loc 1 1142 8 is_stmt 1 view .LVU1585
 5631              	.L464:
1142:src/xeq.c     **** 		unsigned int n;
 5632              		.loc 1 1142 2 view .LVU1586
 5633              	.LBB1689:
1143:src/xeq.c     **** 		const char c = *s++;
 5634              		.loc 1 1143 3 view .LVU1587
1144:src/xeq.c     **** 
 5635              		.loc 1 1144 3 view .LVU1588
1147:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 5636              		.loc 1 1147 4 view .LVU1589
1148:src/xeq.c     **** 			n = c - 'A' + 10;
 5637              		.loc 1 1148 8 view .LVU1590
1149:src/xeq.c     **** 		else
 5638              		.loc 1 1149 4 view .LVU1591
1144:src/xeq.c     **** 
 5639              		.loc 1 1144 14 is_stmt 0 view .LVU1592
 5640 000e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5641              	.LVL417:
1146:src/xeq.c     **** 			n = c - '0';
 5642              		.loc 1 1146 3 is_stmt 1 view .LVU1593
1146:src/xeq.c     **** 			n = c - '0';
 5643              		.loc 1 1146 16 is_stmt 0 view .LVU1594
 5644 0012 A2F13003 		sub	r3, r2, #48
1146:src/xeq.c     **** 			n = c - '0';
 5645              		.loc 1 1146 6 view .LVU1595
 5646 0016 DCB2     		uxtb	r4, r3
 5647 0018 092C     		cmp	r4, #9
1148:src/xeq.c     **** 			n = c - 'A' + 10;
 5648              		.loc 1 1148 11 view .LVU1596
 5649 001a A2F14105 		sub	r5, r2, #65
1146:src/xeq.c     **** 			n = c - '0';
 5650              		.loc 1 1146 6 view .LVU1597
 5651 001e 03D9     		bls	.L462
1148:src/xeq.c     **** 			n = c - 'A' + 10;
 5652              		.loc 1 1148 11 view .LVU1598
 5653 0020 052D     		cmp	r5, #5
 5654 0022 07D8     		bhi	.L460
1149:src/xeq.c     **** 		else
 5655              		.loc 1 1149 16 view .LVU1599
 5656 0024 A2F13703 		sub	r3, r2, #55
 5657              	.LVL418:
 5658              	.L462:
ARM GAS  /tmp/ccaPnj5t.s 			page 226


1152:src/xeq.c     **** 			break;
 5659              		.loc 1 1152 3 is_stmt 1 view .LVU1600
1154:src/xeq.c     **** 	}
 5660              		.loc 1 1154 3 view .LVU1601
1154:src/xeq.c     **** 	}
 5661              		.loc 1 1154 9 is_stmt 0 view .LVU1602
 5662 0028 A1FB0645 		umull	r4, r5, r1, r6
1152:src/xeq.c     **** 			break;
 5663              		.loc 1 1152 6 view .LVU1603
 5664 002c 8B42     		cmp	r3, r1
1154:src/xeq.c     **** 	}
 5665              		.loc 1 1154 9 view .LVU1604
 5666 002e 01FB0755 		mla	r5, r1, r7, r5
1152:src/xeq.c     **** 			break;
 5667              		.loc 1 1152 6 view .LVU1605
 5668 0032 E9D3     		bcc	.L466
 5669              	.LVL419:
 5670              	.L460:
1152:src/xeq.c     **** 			break;
 5671              		.loc 1 1152 6 view .LVU1606
 5672              	.LBE1689:
1157:src/xeq.c     **** 
 5673              		.loc 1 1157 1 view .LVU1607
 5674 0034 3046     		mov	r0, r6
 5675              	.LVL420:
1157:src/xeq.c     **** 
 5676              		.loc 1 1157 1 view .LVU1608
 5677 0036 3946     		mov	r1, r7
 5678              	.LVL421:
1157:src/xeq.c     **** 
 5679              		.loc 1 1157 1 view .LVU1609
 5680 0038 F0BC     		pop	{r4, r5, r6, r7}
 5681              		.cfi_restore 7
 5682              		.cfi_restore 6
 5683              		.cfi_restore 5
 5684              		.cfi_restore 4
 5685              		.cfi_def_cfa_offset 0
 5686              	.LVL422:
1157:src/xeq.c     **** 
 5687              		.loc 1 1157 1 view .LVU1610
 5688 003a 7047     		bx	lr
 5689              		.cfi_endproc
 5690              	.LFE84:
 5692              		.section	.text.get_cmdline,"ax",%progbits
 5693              		.align	1
 5694              		.p2align 2,,3
 5695              		.global	get_cmdline
 5696              		.syntax unified
 5697              		.thumb
 5698              		.thumb_func
 5699              		.fpu fpv4-sp-d16
 5701              	get_cmdline:
 5702              	.LFB85:
1159:src/xeq.c     **** 	if (CmdLineLength) {
 5703              		.loc 1 1159 31 is_stmt 1 view -0
 5704              		.cfi_startproc
 5705              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccaPnj5t.s 			page 227


 5706              		@ frame_needed = 0, uses_anonymous_args = 0
 5707              		@ link register save eliminated.
1160:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5708              		.loc 1 1160 2 view .LVU1612
1160:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5709              		.loc 1 1160 6 is_stmt 0 view .LVU1613
 5710 0000 044B     		ldr	r3, .L470
 5711 0002 187F     		ldrb	r0, [r3, #28]	@ zero_extendqisi2
1160:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5712              		.loc 1 1160 5 view .LVU1614
 5713 0004 28B1     		cbz	r0, .L467
1161:src/xeq.c     **** 		return Cmdline;
 5714              		.loc 1 1161 3 is_stmt 1 view .LVU1615
1161:src/xeq.c     **** 		return Cmdline;
 5715              		.loc 1 1161 26 is_stmt 0 view .LVU1616
 5716 0006 1A18     		adds	r2, r3, r0
 5717 0008 0021     		movs	r1, #0
1162:src/xeq.c     **** 	}
 5718              		.loc 1 1162 10 view .LVU1617
 5719 000a 03F12000 		add	r0, r3, #32
1161:src/xeq.c     **** 		return Cmdline;
 5720              		.loc 1 1161 26 view .LVU1618
 5721 000e 82F82010 		strb	r1, [r2, #32]
1162:src/xeq.c     **** 	}
 5722              		.loc 1 1162 3 is_stmt 1 view .LVU1619
 5723              	.L467:
1165:src/xeq.c     **** 
 5724              		.loc 1 1165 1 is_stmt 0 view .LVU1620
 5725 0012 7047     		bx	lr
 5726              	.L471:
 5727              		.align	2
 5728              	.L470:
 5729 0014 00000000 		.word	StateWhileOn
 5730              		.cfi_endproc
 5731              	.LFE85:
 5733              		.section	.text.is_bad_cmdline,"ax",%progbits
 5734              		.align	1
 5735              		.p2align 2,,3
 5736              		.global	is_bad_cmdline
 5737              		.syntax unified
 5738              		.thumb
 5739              		.thumb_func
 5740              		.fpu fpv4-sp-d16
 5742              	is_bad_cmdline:
 5743              	.LFB86:
1182:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5744              		.loc 1 1182 1 is_stmt 1 view -0
 5745              		.cfi_startproc
 5746              		@ args = 0, pretend = 0, frame = 0
 5747              		@ frame_needed = 0, uses_anonymous_args = 0
 5748              		@ link register save eliminated.
1203:src/xeq.c     **** }
 5749              		.loc 1 1203 2 view .LVU1622
1204:src/xeq.c     **** 
 5750              		.loc 1 1204 1 is_stmt 0 view .LVU1623
 5751 0000 0020     		movs	r0, #0
 5752 0002 7047     		bx	lr
ARM GAS  /tmp/ccaPnj5t.s 			page 228


 5753              		.cfi_endproc
 5754              	.LFE86:
 5756              		.section	.text.get_flash_reg_n,"ax",%progbits
 5757              		.align	1
 5758              		.p2align 2,,3
 5759              		.global	get_flash_reg_n
 5760              		.syntax unified
 5761              		.thumb
 5762              		.thumb_func
 5763              		.fpu fpv4-sp-d16
 5765              	get_flash_reg_n:
 5766              	.LVL423:
 5767              	.LFB91:
1367:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 5768              		.loc 1 1367 34 is_stmt 1 view -0
 5769              		.cfi_startproc
 5770              		@ args = 0, pretend = 0, frame = 0
 5771              		@ frame_needed = 0, uses_anonymous_args = 0
 5772              		@ link register save eliminated.
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5773              		.loc 1 1368 2 view .LVU1625
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5774              		.loc 1 1368 37 is_stmt 0 view .LVU1626
 5775 0000 064B     		ldr	r3, .L474
 5776 0002 1A68     		ldr	r2, [r3]
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5777              		.loc 1 1368 68 view .LVU1627
 5778 0004 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5779              		.loc 1 1368 37 view .LVU1628
 5780 0008 02F22C41 		addw	r1, r2, #1068
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5781              		.loc 1 1368 68 view .LVU1629
 5782 000c C3F16403 		rsb	r3, r3, #100
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5783              		.loc 1 1368 22 view .LVU1630
 5784 0010 01EBC301 		add	r1, r1, r3, lsl #3
 5785 0014 02F24C72 		addw	r2, r2, #1868
 5786 0018 FFF7FEBF 		b	reg_address
 5787              	.LVL424:
 5788              	.L475:
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5789              		.loc 1 1368 22 view .LVU1631
 5790              		.align	2
 5791              	.L474:
 5792 001c 00000000 		.word	backup_ram
 5793              		.cfi_endproc
 5794              	.LFE91:
 5796              		.section	.text.get_const,"ax",%progbits
 5797              		.align	1
 5798              		.p2align 2,,3
 5799              		.global	get_const
 5800              		.syntax unified
 5801              		.thumb
 5802              		.thumb_func
 5803              		.fpu fpv4-sp-d16
 5805              	get_const:
ARM GAS  /tmp/ccaPnj5t.s 			page 229


 5806              	.LVL425:
 5807              	.LFB92:
1378:src/xeq.c     **** 	static REGISTER result;
 5808              		.loc 1 1378 1 is_stmt 1 view -0
 5809              		.cfi_startproc
 5810              		@ args = 0, pretend = 0, frame = 40
 5811              		@ frame_needed = 0, uses_anonymous_args = 0
1379:src/xeq.c     **** 	const int i = cnsts[index].index;
 5812              		.loc 1 1379 2 view .LVU1633
1380:src/xeq.c     **** 	if (dbl) {
 5813              		.loc 1 1380 2 view .LVU1634
1378:src/xeq.c     **** 	static REGISTER result;
 5814              		.loc 1 1378 1 is_stmt 0 view .LVU1635
 5815 0000 00B5     		push	{lr}
 5816              		.cfi_def_cfa_offset 4
 5817              		.cfi_offset 14, -4
1380:src/xeq.c     **** 	if (dbl) {
 5818              		.loc 1 1380 28 view .LVU1636
 5819 0002 1C4B     		ldr	r3, .L482
 5820 0004 00EB4000 		add	r0, r0, r0, lsl #1
 5821              	.LVL426:
1378:src/xeq.c     **** 	static REGISTER result;
 5822              		.loc 1 1378 1 view .LVU1637
 5823 0008 8BB0     		sub	sp, sp, #44
 5824              		.cfi_def_cfa_offset 48
1380:src/xeq.c     **** 	if (dbl) {
 5825              		.loc 1 1380 28 view .LVU1638
 5826 000a 13F82030 		ldrb	r3, [r3, r0, lsl #2]	@ zero_extendqisi2
 5827              	.LVL427:
1381:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5828              		.loc 1 1381 2 is_stmt 1 view .LVU1639
1381:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5829              		.loc 1 1381 5 is_stmt 0 view .LVU1640
 5830 000e 51B1     		cbz	r1, .L477
1382:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5831              		.loc 1 1382 3 is_stmt 1 view .LVU1641
1382:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5832              		.loc 1 1382 14 is_stmt 0 view .LVU1642
 5833 0010 9A1E     		subs	r2, r3, #2
1382:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5834              		.loc 1 1382 6 view .LVU1643
 5835 0012 7D2A     		cmp	r2, #125
 5836 0014 0FD9     		bls	.L478
1383:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5837              		.loc 1 1383 4 is_stmt 1 view .LVU1644
1383:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5838              		.loc 1 1383 11 is_stmt 0 view .LVU1645
 5839 0016 184A     		ldr	r2, .L482+4
1383:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5840              		.loc 1 1383 36 view .LVU1646
 5841 0018 03F07F00 		and	r0, r3, #127
1383:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5842              		.loc 1 1383 11 view .LVU1647
 5843 001c 02EB0010 		add	r0, r2, r0, lsl #4
1392:src/xeq.c     **** 
 5844              		.loc 1 1392 1 view .LVU1648
 5845 0020 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/ccaPnj5t.s 			page 230


 5846              		.cfi_remember_state
 5847              		.cfi_def_cfa_offset 4
 5848              		@ sp needed
 5849 0022 5DF804FB 		ldr	pc, [sp], #4
 5850              	.L477:
 5851              		.cfi_restore_state
1387:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5852              		.loc 1 1387 3 is_stmt 1 view .LVU1649
1387:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5853              		.loc 1 1387 6 is_stmt 0 view .LVU1650
 5854 0026 1A06     		lsls	r2, r3, #24
 5855 0028 13D4     		bmi	.L480
1388:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5856              		.loc 1 1388 4 is_stmt 1 view .LVU1651
1388:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5857              		.loc 1 1388 11 is_stmt 0 view .LVU1652
 5858 002a 1448     		ldr	r0, .L482+8
 5859 002c 00EBC300 		add	r0, r0, r3, lsl #3
1392:src/xeq.c     **** 
 5860              		.loc 1 1392 1 view .LVU1653
 5861 0030 0BB0     		add	sp, sp, #44
 5862              		.cfi_remember_state
 5863              		.cfi_def_cfa_offset 4
 5864              		@ sp needed
 5865 0032 5DF804FB 		ldr	pc, [sp], #4
 5866              	.L478:
 5867              		.cfi_restore_state
1384:src/xeq.c     **** 	}
 5868              		.loc 1 1384 3 is_stmt 1 view .LVU1654
 5869              	.LVL428:
 5870              	.LBB1690:
 5871              	.LBI1690:
 648:src/xeq.c     **** 	decNumber temp;
 5872              		.loc 1 648 6 view .LVU1655
 5873              	.LBB1691:
 649:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 5874              		.loc 1 649 2 view .LVU1656
 650:src/xeq.c     **** }
 5875              		.loc 1 650 2 view .LVU1657
 5876              	.LBE1691:
 5877              	.LBE1690:
1384:src/xeq.c     **** 	}
 5878              		.loc 1 1384 3 is_stmt 0 view .LVU1658
 5879 0036 1148     		ldr	r0, .L482+8
 5880              	.LBB1693:
 5881              	.LBB1692:
 650:src/xeq.c     **** }
 5882              		.loc 1 650 27 view .LVU1659
 5883 0038 01A9     		add	r1, sp, #4
 5884              	.LVL429:
 650:src/xeq.c     **** }
 5885              		.loc 1 650 27 view .LVU1660
 5886 003a 00EBC300 		add	r0, r0, r3, lsl #3
 5887 003e FFF7FEFF 		bl	decimal64ToNumber
 5888              	.LVL430:
 650:src/xeq.c     **** }
 5889              		.loc 1 650 27 view .LVU1661
ARM GAS  /tmp/ccaPnj5t.s 			page 231


 5890 0042 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 5891              		.loc 1 650 2 view .LVU1662
 5892 0044 0E48     		ldr	r0, .L482+12
 5893 0046 FFF7FEFF 		bl	packed128_from_number
 5894              	.LVL431:
 5895              	.LBE1692:
 5896              	.LBE1693:
1391:src/xeq.c     **** }
 5897              		.loc 1 1391 9 view .LVU1663
 5898 004a 0D48     		ldr	r0, .L482+12
1392:src/xeq.c     **** 
 5899              		.loc 1 1392 1 view .LVU1664
 5900 004c 0BB0     		add	sp, sp, #44
 5901              		.cfi_remember_state
 5902              		.cfi_def_cfa_offset 4
 5903              		@ sp needed
 5904 004e 5DF804FB 		ldr	pc, [sp], #4
 5905              	.LVL432:
 5906              	.L480:
 5907              		.cfi_restore_state
1389:src/xeq.c     **** 	}
 5908              		.loc 1 1389 3 is_stmt 1 view .LVU1665
 5909              	.LBB1694:
 5910              	.LBI1694:
 642:src/xeq.c     **** 	decNumber temp;
 5911              		.loc 1 642 6 view .LVU1666
 5912              	.LBB1695:
 643:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 5913              		.loc 1 643 2 view .LVU1667
 644:src/xeq.c     **** }
 5914              		.loc 1 644 2 view .LVU1668
 5915              	.LBE1695:
 5916              	.LBE1694:
1389:src/xeq.c     **** 	}
 5917              		.loc 1 1389 3 is_stmt 0 view .LVU1669
 5918 0052 0948     		ldr	r0, .L482+4
1389:src/xeq.c     **** 	}
 5919              		.loc 1 1389 55 view .LVU1670
 5920 0054 03F18053 		add	r3, r3, #268435456
 5921              	.LVL433:
1389:src/xeq.c     **** 	}
 5922              		.loc 1 1389 55 view .LVU1671
 5923 0058 803B     		subs	r3, r3, #128
 5924              	.LVL434:
 5925              	.LBB1697:
 5926              	.LBB1696:
 644:src/xeq.c     **** }
 5927              		.loc 1 644 24 view .LVU1672
 5928 005a 00EB0310 		add	r0, r0, r3, lsl #4
 5929 005e 01A9     		add	r1, sp, #4
 5930              	.LVL435:
 644:src/xeq.c     **** }
 5931              		.loc 1 644 24 view .LVU1673
 5932 0060 FFF7FEFF 		bl	decimal128ToNumber
 5933              	.LVL436:
 644:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 232


 5934              		.loc 1 644 24 view .LVU1674
 5935 0064 0146     		mov	r1, r0
 644:src/xeq.c     **** }
 5936              		.loc 1 644 2 view .LVU1675
 5937 0066 0648     		ldr	r0, .L482+12
 5938 0068 FFF7FEFF 		bl	packed_from_number
 5939              	.LVL437:
 5940              	.LBE1696:
 5941              	.LBE1697:
1391:src/xeq.c     **** }
 5942              		.loc 1 1391 9 view .LVU1676
 5943 006c 0448     		ldr	r0, .L482+12
 5944              	.LVL438:
1392:src/xeq.c     **** 
 5945              		.loc 1 1392 1 view .LVU1677
 5946 006e 0BB0     		add	sp, sp, #44
 5947              		.cfi_def_cfa_offset 4
 5948              		@ sp needed
 5949 0070 5DF804FB 		ldr	pc, [sp], #4
 5950              	.L483:
 5951              		.align	2
 5952              	.L482:
 5953 0074 00000000 		.word	cnsts
 5954 0078 00000000 		.word	cnsts_d128
 5955 007c 00000000 		.word	cnsts_d64
 5956 0080 00000000 		.word	.LANCHOR2
 5957              		.cfi_endproc
 5958              	.LFE92:
 5960              		.section	.text.get_reg_n,"ax",%progbits
 5961              		.align	1
 5962              		.p2align 2,,3
 5963              		.global	get_reg_n
 5964              		.syntax unified
 5965              		.thumb
 5966              		.thumb_func
 5967              		.fpu fpv4-sp-d16
 5969              	get_reg_n:
 5970              	.LVL439:
 5971              	.LFB90:
1346:src/xeq.c     **** 	const int dbl = is_dblmode();
 5972              		.loc 1 1346 28 is_stmt 1 view -0
 5973              		.cfi_startproc
 5974              		@ args = 0, pretend = 0, frame = 0
 5975              		@ frame_needed = 0, uses_anonymous_args = 0
 5976              		@ link register save eliminated.
1347:src/xeq.c     **** 
 5977              		.loc 1 1347 2 view .LVU1679
 5978              	.LBB1698:
 5979              	.LBI1698:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5980              		.loc 1 1100 5 view .LVU1680
 5981              	.LBB1699:
1101:src/xeq.c     **** }
 5982              		.loc 1 1101 2 view .LVU1681
1101:src/xeq.c     **** }
 5983              		.loc 1 1101 12 is_stmt 0 view .LVU1682
 5984 0000 294B     		ldr	r3, .L499
ARM GAS  /tmp/ccaPnj5t.s 			page 233


 5985 0002 1A68     		ldr	r2, [r3]
1101:src/xeq.c     **** }
 5986              		.loc 1 1101 24 view .LVU1683
 5987 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 5988 0008 44F20103 		movw	r3, #16385
 5989 000c 0B40     		ands	r3, r3, r1
 5990 000e A3F58041 		sub	r1, r3, #16384
 5991 0012 B1FA81F1 		clz	r1, r1
 5992              	.LBE1699:
 5993              	.LBE1698:
1349:src/xeq.c     **** 		n -= CONST_REG_BASE;
 5994              		.loc 1 1349 5 view .LVU1684
 5995 0016 B0F5FA6F 		cmp	r0, #2000
 5996              	.LBB1701:
 5997              	.LBB1700:
1101:src/xeq.c     **** }
 5998              		.loc 1 1101 24 view .LVU1685
 5999 001a 4FEA5111 		lsr	r1, r1, #5
 6000              	.LVL440:
1101:src/xeq.c     **** }
 6001              		.loc 1 1101 24 view .LVU1686
 6002              	.LBE1700:
 6003              	.LBE1701:
1349:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6004              		.loc 1 1349 2 is_stmt 1 view .LVU1687
1349:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6005              		.loc 1 1349 5 is_stmt 0 view .LVU1688
 6006 001e 26DA     		bge	.L496
1353:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6007              		.loc 1 1353 2 is_stmt 1 view .LVU1689
1353:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6008              		.loc 1 1353 5 is_stmt 0 view .LVU1690
 6009 0020 B0F57A7F 		cmp	r0, #1000
 6010 0024 13DA     		bge	.L497
1356:src/xeq.c     **** 		// local register on the return stack
 6011              		.loc 1 1356 2 is_stmt 1 view .LVU1691
1356:src/xeq.c     **** 		// local register on the return stack
 6012              		.loc 1 1356 5 is_stmt 0 view .LVU1692
 6013 0026 6F28     		cmp	r0, #111
1346:src/xeq.c     **** 	const int dbl = is_dblmode();
 6014              		.loc 1 1346 28 view .LVU1693
 6015 0028 70B4     		push	{r4, r5, r6}
 6016              		.cfi_def_cfa_offset 12
 6017              		.cfi_offset 4, -12
 6018              		.cfi_offset 5, -8
 6019              		.cfi_offset 6, -4
1356:src/xeq.c     **** 		// local register on the return stack
 6020              		.loc 1 1356 5 view .LVU1694
 6021 002a 03DD     		ble	.L487
 6022              	.LBB1702:
 6023              	.LBI1702:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 6024              		.loc 1 233 5 is_stmt 1 view .LVU1695
 6025              	.LBE1702:
 234:src/xeq.c     **** }
 6026              		.loc 1 234 2 view .LVU1696
 6027              	.LVL441:
ARM GAS  /tmp/ccaPnj5t.s 			page 234


 6028              	.LBB1715:
 6029              	.LBB1703:
 6030              	.LBI1703:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 6031              		.loc 1 225 5 view .LVU1697
 6032              	.LBB1704:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 6033              		.loc 1 226 2 view .LVU1698
 6034              	.LBE1704:
 6035              	.LBE1703:
 6036              	.LBE1715:
1101:src/xeq.c     **** }
 6037              		.loc 1 1101 2 view .LVU1699
 6038              	.LBB1716:
 6039              	.LBB1713:
 6040              	.LBB1711:
 227:src/xeq.c     **** }
 6041              		.loc 1 227 2 view .LVU1700
 6042              	.LBB1705:
 6043              	.LBI1705:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 6044              		.loc 1 217 5 view .LVU1701
 6045              	.LBB1706:
 218:src/xeq.c     **** }
 6046              		.loc 1 218 2 view .LVU1702
 218:src/xeq.c     **** }
 6047              		.loc 1 218 9 is_stmt 0 view .LVU1703
 6048 002c B2F9DE47 		ldrsh	r4, [r2, #2014]
 218:src/xeq.c     **** }
 6049              		.loc 1 218 57 view .LVU1704
 6050 0030 002C     		cmp	r4, #0
 6051 0032 20DB     		blt	.L498
 6052              	.LVL442:
 6053              	.L487:
 218:src/xeq.c     **** }
 6054              		.loc 1 218 57 view .LVU1705
 6055              	.LBE1706:
 6056              	.LBE1705:
 6057              	.LBE1711:
 6058              	.LBE1713:
 6059              	.LBE1716:
1363:src/xeq.c     **** }
 6060              		.loc 1 1363 2 is_stmt 1 view .LVU1706
1363:src/xeq.c     **** }
 6061              		.loc 1 1363 55 is_stmt 0 view .LVU1707
 6062 0034 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
 6063              	.LVL443:
1363:src/xeq.c     **** }
 6064              		.loc 1 1363 37 view .LVU1708
 6065 0038 02F22C41 		addw	r1, r2, #1068
1363:src/xeq.c     **** }
 6066              		.loc 1 1363 55 view .LVU1709
 6067 003c C3F16403 		rsb	r3, r3, #100
1364:src/xeq.c     **** 
 6068              		.loc 1 1364 1 view .LVU1710
 6069 0040 70BC     		pop	{r4, r5, r6}
 6070              		.cfi_restore 6
ARM GAS  /tmp/ccaPnj5t.s 			page 235


 6071              		.cfi_restore 5
 6072              		.cfi_restore 4
 6073              		.cfi_def_cfa_offset 0
1363:src/xeq.c     **** }
 6074              		.loc 1 1363 22 view .LVU1711
 6075 0042 01EBC301 		add	r1, r1, r3, lsl #3
 6076 0046 02F24C72 		addw	r2, r2, #1868
 6077              	.LVL444:
1363:src/xeq.c     **** }
 6078              		.loc 1 1363 22 view .LVU1712
 6079 004a FFF7FEBF 		b	reg_address
 6080              	.LVL445:
 6081              	.L497:
1354:src/xeq.c     **** 
 6082              		.loc 1 1354 3 is_stmt 1 view .LVU1713
 6083              	.LBB1717:
 6084              	.LBI1717:
1367:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 6085              		.loc 1 1367 11 view .LVU1714
 6086              	.LBB1718:
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6087              		.loc 1 1368 2 view .LVU1715
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6088              		.loc 1 1368 37 is_stmt 0 view .LVU1716
 6089 004e 174B     		ldr	r3, .L499+4
 6090 0050 1A68     		ldr	r2, [r3]
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6091              		.loc 1 1368 68 view .LVU1717
 6092 0052 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6093              		.loc 1 1368 37 view .LVU1718
 6094 0056 02F22C41 		addw	r1, r2, #1068
 6095              	.LVL446:
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6096              		.loc 1 1368 68 view .LVU1719
 6097 005a C3F16403 		rsb	r3, r3, #100
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6098              		.loc 1 1368 22 view .LVU1720
 6099 005e A0F57A70 		sub	r0, r0, #1000
 6100              	.LVL447:
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6101              		.loc 1 1368 22 view .LVU1721
 6102 0062 01EBC301 		add	r1, r1, r3, lsl #3
 6103 0066 02F24C72 		addw	r2, r2, #1868
 6104 006a FFF7FEBF 		b	reg_address
 6105              	.LVL448:
 6106              	.L496:
1368:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6107              		.loc 1 1368 22 view .LVU1722
 6108              	.LBE1718:
 6109              	.LBE1717:
1350:src/xeq.c     **** 		return get_const(n, dbl);
 6110              		.loc 1 1350 3 is_stmt 1 view .LVU1723
1351:src/xeq.c     **** 	}
 6111              		.loc 1 1351 3 view .LVU1724
1351:src/xeq.c     **** 	}
 6112              		.loc 1 1351 10 is_stmt 0 view .LVU1725
ARM GAS  /tmp/ccaPnj5t.s 			page 236


 6113 006e A0F5FA60 		sub	r0, r0, #2000
 6114              	.LVL449:
1351:src/xeq.c     **** 	}
 6115              		.loc 1 1351 10 view .LVU1726
 6116 0072 FFF7FEBF 		b	get_const
 6117              	.LVL450:
 6118              	.L498:
 6119              		.cfi_def_cfa_offset 12
 6120              		.cfi_offset 4, -12
 6121              		.cfi_offset 5, -8
 6122              		.cfi_offset 6, -4
 6123              	.LBB1719:
 6124              	.LBB1714:
 6125              	.LBB1712:
 6126              	.LBB1709:
 6127              	.LBB1707:
 218:src/xeq.c     **** }
 6128              		.loc 1 218 25 view .LVU1727
 6129 0076 0E4D     		ldr	r5, .L499+8
 6130 0078 2D68     		ldr	r5, [r5]
 6131              	.LVL451:
 218:src/xeq.c     **** }
 6132              		.loc 1 218 57 view .LVU1728
 6133 007a 35F81460 		ldrh	r6, [r5, r4, lsl #1]
 6134              	.LBE1707:
 6135              	.LBE1709:
 227:src/xeq.c     **** }
 6136              		.loc 1 227 30 view .LVU1729
 6137 007e 0231     		adds	r1, r1, #2
 6138              	.LVL452:
 6139              	.LBB1710:
 6140              	.LBB1708:
 218:src/xeq.c     **** }
 6141              		.loc 1 218 57 view .LVU1730
 6142 0080 C6F30B06 		ubfx	r6, r6, #0, #12
 6143              	.LBE1708:
 6144              	.LBE1710:
 6145              	.LBE1712:
 6146              	.LBE1714:
 6147              	.LBE1719:
1356:src/xeq.c     **** 		// local register on the return stack
 6148              		.loc 1 1356 26 view .LVU1731
 6149 0084 56FA01F1 		asrs	r1, r6, r1
 6150              	.LVL453:
1356:src/xeq.c     **** 		// local register on the return stack
 6151              		.loc 1 1356 26 view .LVU1732
 6152 0088 D4D0     		beq	.L487
1358:src/xeq.c     **** 		if (dbl)
 6153              		.loc 1 1358 3 is_stmt 1 view .LVU1733
1358:src/xeq.c     **** 		if (dbl)
 6154              		.loc 1 1358 5 is_stmt 0 view .LVU1734
 6155 008a 7038     		subs	r0, r0, #112
 6156              	.LVL454:
1359:src/xeq.c     **** 			n <<= 1;
 6157              		.loc 1 1359 3 is_stmt 1 view .LVU1735
1359:src/xeq.c     **** 			n <<= 1;
 6158              		.loc 1 1359 6 is_stmt 0 view .LVU1736
ARM GAS  /tmp/ccaPnj5t.s 			page 237


 6159 008c B3F5804F 		cmp	r3, #16384
1360:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6160              		.loc 1 1360 4 is_stmt 1 view .LVU1737
1360:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6161              		.loc 1 1360 6 is_stmt 0 view .LVU1738
 6162 0090 08BF     		it	eq
 6163 0092 4000     		lsleq	r0, r0, #1
 6164              	.LVL455:
1361:src/xeq.c     **** 	}
 6165              		.loc 1 1361 3 is_stmt 1 view .LVU1739
1361:src/xeq.c     **** 	}
 6166              		.loc 1 1361 67 is_stmt 0 view .LVU1740
 6167 0094 0234     		adds	r4, r4, #2
1361:src/xeq.c     **** 	}
 6168              		.loc 1 1361 48 view .LVU1741
 6169 0096 24F00104 		bic	r4, r4, #1
1361:src/xeq.c     **** 	}
 6170              		.loc 1 1361 83 view .LVU1742
 6171 009a C000     		lsls	r0, r0, #3
 6172              	.LVL456:
1361:src/xeq.c     **** 	}
 6173              		.loc 1 1361 10 view .LVU1743
 6174 009c 0223     		movs	r3, #2
 6175              	.LVL457:
1361:src/xeq.c     **** 	}
 6176              		.loc 1 1361 10 view .LVU1744
 6177 009e 14FB0300 		smlabb	r0, r4, r3, r0
 6178 00a2 2844     		add	r0, r0, r5
1364:src/xeq.c     **** 
 6179              		.loc 1 1364 1 view .LVU1745
 6180 00a4 70BC     		pop	{r4, r5, r6}
 6181              		.cfi_restore 6
 6182              		.cfi_restore 5
 6183              		.cfi_restore 4
 6184              		.cfi_def_cfa_offset 0
 6185 00a6 7047     		bx	lr
 6186              	.L500:
 6187              		.align	2
 6188              	.L499:
 6189 00a8 00000000 		.word	main_ram
 6190 00ac 00000000 		.word	backup_ram
 6191 00b0 00000000 		.word	RetStk
 6192              		.cfi_endproc
 6193              	.LFE90:
 6195              		.section	.text.get_stack,"ax",%progbits
 6196              		.align	1
 6197              		.p2align 2,,3
 6198              		.global	get_stack
 6199              		.syntax unified
 6200              		.thumb
 6201              		.thumb_func
 6202              		.fpu fpv4-sp-d16
 6204              	get_stack:
 6205              	.LVL458:
 6206              	.LFB43:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6207              		.loc 1 712 30 is_stmt 1 view -0
ARM GAS  /tmp/ccaPnj5t.s 			page 238


 6208              		.cfi_startproc
 6209              		@ args = 0, pretend = 0, frame = 0
 6210              		@ frame_needed = 0, uses_anonymous_args = 0
 6211              		@ link register save eliminated.
 713:src/xeq.c     **** }
 6212              		.loc 1 713 2 view .LVU1747
 713:src/xeq.c     **** }
 6213              		.loc 1 713 9 is_stmt 0 view .LVU1748
 6214 0000 6430     		adds	r0, r0, #100
 6215              	.LVL459:
 713:src/xeq.c     **** }
 6216              		.loc 1 713 9 view .LVU1749
 6217 0002 FFF7FEBF 		b	get_reg_n
 6218              	.LVL460:
 713:src/xeq.c     **** }
 6219              		.loc 1 713 9 view .LVU1750
 6220              		.cfi_endproc
 6221              	.LFE43:
 6223 0006 00BF     		.section	.text.lift,"ax",%progbits
 6224              		.align	1
 6225              		.p2align 2,,3
 6226              		.global	lift
 6227              		.syntax unified
 6228              		.thumb
 6229              		.thumb_func
 6230              		.fpu fpv4-sp-d16
 6232              	lift:
 6233              	.LFB47:
 730:src/xeq.c     **** 	const int n = stack_size();
 6234              		.loc 1 730 17 is_stmt 1 view -0
 6235              		.cfi_startproc
 6236              		@ args = 0, pretend = 0, frame = 0
 6237              		@ frame_needed = 0, uses_anonymous_args = 0
 731:src/xeq.c     **** 	int i;
 6238              		.loc 1 731 2 view .LVU1752
 6239              	.LBB1720:
 6240              	.LBI1720:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6241              		.loc 1 706 5 view .LVU1753
 6242              	.LBB1721:
 707:src/xeq.c     **** 		return 4;
 6243              		.loc 1 707 2 view .LVU1754
 6244              	.LBE1721:
 6245              	.LBE1720:
 730:src/xeq.c     **** 	const int n = stack_size();
 6246              		.loc 1 730 17 is_stmt 0 view .LVU1755
 6247 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 6248              		.cfi_def_cfa_offset 24
 6249              		.cfi_offset 3, -24
 6250              		.cfi_offset 4, -20
 6251              		.cfi_offset 5, -16
 6252              		.cfi_offset 6, -12
 6253              		.cfi_offset 7, -8
 6254              		.cfi_offset 14, -4
 6255              	.LBB1726:
 6256              	.LBB1724:
 707:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccaPnj5t.s 			page 239


 6257              		.loc 1 707 8 view .LVU1756
 6258 0002 184E     		ldr	r6, .L513
 6259 0004 3368     		ldr	r3, [r6]
 707:src/xeq.c     **** 		return 4;
 6260              		.loc 1 707 6 view .LVU1757
 6261 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 6262              		.loc 1 707 5 view .LVU1758
 6263 000a 1207     		lsls	r2, r2, #28
 6264 000c 28D5     		bpl	.L506
 6265              	.LBB1722:
 6266              	.LBI1722:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6267              		.loc 1 185 5 is_stmt 1 view .LVU1759
 6268              	.LBB1723:
 186:src/xeq.c     **** }
 6269              		.loc 1 186 2 view .LVU1760
 186:src/xeq.c     **** }
 6270              		.loc 1 186 9 is_stmt 0 view .LVU1761
 6271 000e B3F8E037 		ldrh	r3, [r3, #2016]
 6272              	.LBE1723:
 6273              	.LBE1722:
 707:src/xeq.c     **** 		return 4;
 6274              		.loc 1 707 27 view .LVU1762
 6275 0012 9B0B     		lsrs	r3, r3, #14
 6276 0014 032B     		cmp	r3, #3
 6277 0016 1BD0     		beq	.L512
 6278 0018 0724     		movs	r4, #7
 6279              	.L503:
 6280              	.LBE1724:
 6281              	.LBE1726:
 732:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 6282              		.loc 1 732 2 is_stmt 1 view .LVU1763
 733:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6283              		.loc 1 733 2 view .LVU1764
 733:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6284              		.loc 1 733 14 view .LVU1765
 6285 001a 6434     		adds	r4, r4, #100
 6286              	.LBB1727:
 6287              	.LBB1728:
 6288              	.LBB1729:
 6289              	.LBB1730:
1101:src/xeq.c     **** }
 6290              		.loc 1 1101 24 is_stmt 0 view .LVU1766
 6291 001c 44F20107 		movw	r7, #16385
 6292              	.L505:
 6293              	.LVL461:
1101:src/xeq.c     **** }
 6294              		.loc 1 1101 24 view .LVU1767
 6295              	.LBE1730:
 6296              	.LBE1729:
 6297              	.LBE1728:
 6298              	.LBE1727:
 734:src/xeq.c     **** }
 6299              		.loc 1 734 3 is_stmt 1 view .LVU1768
 6300              	.LBB1737:
 6301              	.LBI1737:
ARM GAS  /tmp/ccaPnj5t.s 			page 240


 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6302              		.loc 1 712 11 view .LVU1769
 6303              	.LBB1738:
 713:src/xeq.c     **** }
 6304              		.loc 1 713 2 view .LVU1770
 713:src/xeq.c     **** }
 6305              		.loc 1 713 9 is_stmt 0 view .LVU1771
 6306 0020 2046     		mov	r0, r4
 6307 0022 FFF7FEFF 		bl	get_reg_n
 6308              	.LVL462:
 6309              	.LBE1738:
 6310              	.LBE1737:
 6311              	.LBB1740:
 6312              	.LBB1741:
 6313 0026 013C     		subs	r4, r4, #1
 6314              	.LVL463:
 713:src/xeq.c     **** }
 6315              		.loc 1 713 9 view .LVU1772
 6316              	.LBE1741:
 6317              	.LBE1740:
 6318              	.LBB1745:
 6319              	.LBB1739:
 6320 0028 0546     		mov	r5, r0
 6321              	.LBE1739:
 6322              	.LBE1745:
 6323              	.LBB1746:
 6324              	.LBB1742:
 6325 002a 2046     		mov	r0, r4
 6326              	.LVL464:
 713:src/xeq.c     **** }
 6327              		.loc 1 713 9 view .LVU1773
 6328              	.LBE1742:
 6329              	.LBI1740:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6330              		.loc 1 712 11 is_stmt 1 view .LVU1774
 6331              	.LBB1743:
 713:src/xeq.c     **** }
 6332              		.loc 1 713 2 view .LVU1775
 713:src/xeq.c     **** }
 6333              		.loc 1 713 9 is_stmt 0 view .LVU1776
 6334 002c FFF7FEFF 		bl	get_reg_n
 6335              	.LVL465:
 713:src/xeq.c     **** }
 6336              		.loc 1 713 9 view .LVU1777
 6337              	.LBE1743:
 6338              	.LBE1746:
 6339              	.LBB1747:
 6340              	.LBB1735:
 6341              	.LBB1733:
 6342              	.LBB1731:
1101:src/xeq.c     **** }
 6343              		.loc 1 1101 24 view .LVU1778
 6344 0030 3368     		ldr	r3, [r6]
 6345 0032 B3F8E837 		ldrh	r3, [r3, #2024]
 6346              	.LBE1731:
 6347              	.LBE1733:
 721:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 241


 6348              		.loc 1 721 2 view .LVU1779
 6349 0036 3B40     		ands	r3, r3, r7
 6350 0038 B3F5804F 		cmp	r3, #16384
 6351              	.LBE1735:
 6352              	.LBE1747:
 6353              	.LBB1748:
 6354              	.LBB1744:
 713:src/xeq.c     **** }
 6355              		.loc 1 713 9 view .LVU1780
 6356 003c 0146     		mov	r1, r0
 6357              	.LVL466:
 713:src/xeq.c     **** }
 6358              		.loc 1 713 9 view .LVU1781
 6359              	.LBE1744:
 6360              	.LBE1748:
 6361              	.LBB1749:
 6362              	.LBI1727:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6363              		.loc 1 720 6 is_stmt 1 view .LVU1782
 6364              	.LBB1736:
 721:src/xeq.c     **** }
 6365              		.loc 1 721 2 view .LVU1783
 6366              	.LBB1734:
 6367              	.LBI1729:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6368              		.loc 1 1100 5 view .LVU1784
 6369              	.LBB1732:
1101:src/xeq.c     **** }
 6370              		.loc 1 1101 2 view .LVU1785
 6371              	.LBE1732:
 6372              	.LBE1734:
 721:src/xeq.c     **** }
 6373              		.loc 1 721 2 is_stmt 0 view .LVU1786
 6374 003e 0CBF     		ite	eq
 6375 0040 1022     		moveq	r2, #16
 6376 0042 0822     		movne	r2, #8
 6377 0044 2846     		mov	r0, r5
 6378              	.LVL467:
 721:src/xeq.c     **** }
 6379              		.loc 1 721 2 view .LVU1787
 6380 0046 FFF7FEFF 		bl	xcopy
 6381              	.LVL468:
 721:src/xeq.c     **** }
 6382              		.loc 1 721 2 view .LVU1788
 6383              	.LBE1736:
 6384              	.LBE1749:
 733:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6385              		.loc 1 733 19 is_stmt 1 view .LVU1789
 733:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6386              		.loc 1 733 14 view .LVU1790
 733:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6387              		.loc 1 733 2 is_stmt 0 view .LVU1791
 6388 004a 642C     		cmp	r4, #100
 6389 004c E8D1     		bne	.L505
 735:src/xeq.c     **** 
 6390              		.loc 1 735 1 view .LVU1792
 6391 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccaPnj5t.s 			page 242


 6392              	.LVL469:
 6393              	.L512:
 6394              	.LBB1750:
 6395              	.LBB1725:
 707:src/xeq.c     **** 		return 4;
 6396              		.loc 1 707 44 view .LVU1793
 6397 0050 054B     		ldr	r3, .L513+4
 707:src/xeq.c     **** 		return 4;
 6398              		.loc 1 707 41 view .LVU1794
 6399 0052 93F90130 		ldrsb	r3, [r3, #1]
 6400 0056 002B     		cmp	r3, #0
 6401 0058 B4BF     		ite	lt
 6402 005a 0724     		movlt	r4, #7
 6403 005c 0324     		movge	r4, #3
 6404 005e DCE7     		b	.L503
 6405              	.L506:
 6406 0060 0324     		movs	r4, #3
 6407 0062 DAE7     		b	.L503
 6408              	.L514:
 6409              		.align	2
 6410              	.L513:
 6411 0064 00000000 		.word	main_ram
 6412 0068 00000000 		.word	XromParams
 6413              	.LBE1725:
 6414              	.LBE1750:
 6415              		.cfi_endproc
 6416              	.LFE47:
 6418              		.section	.text.lift_if_enabled,"ax",%progbits
 6419              		.align	1
 6420              		.p2align 2,,3
 6421              		.global	lift_if_enabled
 6422              		.syntax unified
 6423              		.thumb
 6424              		.thumb_func
 6425              		.fpu fpv4-sp-d16
 6427              	lift_if_enabled:
 6428              	.LFB49:
 741:src/xeq.c     **** 	if (get_lift())
 6429              		.loc 1 741 28 is_stmt 1 view -0
 6430              		.cfi_startproc
 6431              		@ args = 0, pretend = 0, frame = 0
 6432              		@ frame_needed = 0, uses_anonymous_args = 0
 6433              		@ link register save eliminated.
 742:src/xeq.c     **** 		lift();
 6434              		.loc 1 742 2 view .LVU1796
 6435              	.LBB1751:
 6436              	.LBI1751:
 737:src/xeq.c     **** 	return State2.state_lift;
 6437              		.loc 1 737 12 view .LVU1797
 6438              	.LBB1752:
 738:src/xeq.c     **** }
 6439              		.loc 1 738 2 view .LVU1798
 738:src/xeq.c     **** }
 6440              		.loc 1 738 15 is_stmt 0 view .LVU1799
 6441 0000 034B     		ldr	r3, .L518
 6442 0002 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 6443              	.LBE1752:
ARM GAS  /tmp/ccaPnj5t.s 			page 243


 6444              	.LBE1751:
 742:src/xeq.c     **** 		lift();
 6445              		.loc 1 742 5 view .LVU1800
 6446 0004 5B06     		lsls	r3, r3, #25
 6447 0006 00D4     		bmi	.L517
 744:src/xeq.c     **** 
 6448              		.loc 1 744 1 view .LVU1801
 6449 0008 7047     		bx	lr
 6450              	.L517:
 743:src/xeq.c     **** }
 6451              		.loc 1 743 3 is_stmt 1 view .LVU1802
 6452 000a FFF7FEBF 		b	lift
 6453              	.LVL470:
 6454              	.L519:
 6455 000e 00BF     		.align	2
 6456              	.L518:
 6457 0010 00000000 		.word	StateWhileOn
 6458              		.cfi_endproc
 6459              	.LFE49:
 6461              		.section	.text.lift2_if_enabled,"ax",%progbits
 6462              		.align	1
 6463              		.p2align 2,,3
 6464              		.syntax unified
 6465              		.thumb
 6466              		.thumb_func
 6467              		.fpu fpv4-sp-d16
 6469              	lift2_if_enabled:
 6470              	.LFB50:
 746:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6471              		.loc 1 746 36 view -0
 6472              		.cfi_startproc
 6473              		@ args = 0, pretend = 0, frame = 0
 6474              		@ frame_needed = 0, uses_anonymous_args = 0
 748:src/xeq.c     **** 	if (C_LOCKED) {
 6475              		.loc 1 748 2 view .LVU1804
 6476              	.LBB1767:
 6477              	.LBI1767:
 741:src/xeq.c     **** 	if (get_lift())
 6478              		.loc 1 741 6 view .LVU1805
 6479              	.LBB1768:
 742:src/xeq.c     **** 		lift();
 6480              		.loc 1 742 2 view .LVU1806
 6481              	.LBB1769:
 6482              	.LBI1769:
 737:src/xeq.c     **** 	return State2.state_lift;
 6483              		.loc 1 737 12 view .LVU1807
 6484              	.LBB1770:
 738:src/xeq.c     **** }
 6485              		.loc 1 738 2 view .LVU1808
 6486              	.LBE1770:
 6487              	.LBE1769:
 6488              	.LBE1768:
 6489              	.LBE1767:
 746:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6490              		.loc 1 746 36 is_stmt 0 view .LVU1809
 6491 0000 10B5     		push	{r4, lr}
 6492              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccaPnj5t.s 			page 244


 6493              		.cfi_offset 4, -8
 6494              		.cfi_offset 14, -4
 6495              	.LBB1775:
 6496              	.LBB1773:
 6497              	.LBB1772:
 6498              	.LBB1771:
 738:src/xeq.c     **** }
 6499              		.loc 1 738 15 view .LVU1810
 6500 0002 0F4C     		ldr	r4, .L531
 6501 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6502              	.LBE1771:
 6503              	.LBE1772:
 742:src/xeq.c     **** 		lift();
 6504              		.loc 1 742 5 view .LVU1811
 6505 0006 5A06     		lsls	r2, r3, #25
 6506 0008 08D4     		bmi	.L530
 6507              	.LBE1773:
 6508              	.LBE1775:
 749:src/xeq.c     **** 		lift_if_enabled();
 6509              		.loc 1 749 2 is_stmt 1 view .LVU1812
 749:src/xeq.c     **** 		lift_if_enabled();
 6510              		.loc 1 749 6 is_stmt 0 view .LVU1813
 6511 000a 0E4B     		ldr	r3, .L531+4
 6512 000c 1B68     		ldr	r3, [r3]
 6513 000e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 749:src/xeq.c     **** 		lift_if_enabled();
 6514              		.loc 1 749 5 view .LVU1814
 6515 0012 03F04103 		and	r3, r3, #65
 6516 0016 412B     		cmp	r3, #65
 6517 0018 0DD1     		bne	.L523
 6518              	.L520:
 759:src/xeq.c     **** 
 6519              		.loc 1 759 1 view .LVU1815
 6520 001a 10BD     		pop	{r4, pc}
 6521              	.L530:
 6522              	.LBB1776:
 6523              	.LBB1774:
 743:src/xeq.c     **** }
 6524              		.loc 1 743 3 is_stmt 1 view .LVU1816
 6525 001c FFF7FEFF 		bl	lift
 6526              	.LVL471:
 6527              	.LBE1774:
 6528              	.LBE1776:
 749:src/xeq.c     **** 		lift_if_enabled();
 6529              		.loc 1 749 2 view .LVU1817
 749:src/xeq.c     **** 		lift_if_enabled();
 6530              		.loc 1 749 6 is_stmt 0 view .LVU1818
 6531 0020 084B     		ldr	r3, .L531+4
 6532 0022 1B68     		ldr	r3, [r3]
 6533 0024 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
 749:src/xeq.c     **** 		lift_if_enabled();
 6534              		.loc 1 749 5 view .LVU1819
 6535 0028 03F04103 		and	r3, r3, #65
 6536 002c 412B     		cmp	r3, #65
 6537 002e 02D1     		bne	.L523
 6538              	.LBB1777:
 6539              	.LBI1777:
ARM GAS  /tmp/ccaPnj5t.s 			page 245


 746:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6540              		.loc 1 746 13 is_stmt 1 view .LVU1820
 6541              	.LBE1777:
 750:src/xeq.c     **** 	}
 6542              		.loc 1 750 3 view .LVU1821
 6543              	.LBB1784:
 6544              	.LBB1778:
 6545              	.LBI1778:
 741:src/xeq.c     **** 	if (get_lift())
 6546              		.loc 1 741 6 view .LVU1822
 6547              	.LBB1779:
 742:src/xeq.c     **** 		lift();
 6548              		.loc 1 742 2 view .LVU1823
 6549              	.LBB1780:
 6550              	.LBI1780:
 737:src/xeq.c     **** 	return State2.state_lift;
 6551              		.loc 1 737 12 view .LVU1824
 6552              	.LBB1781:
 738:src/xeq.c     **** }
 6553              		.loc 1 738 2 view .LVU1825
 738:src/xeq.c     **** }
 6554              		.loc 1 738 15 is_stmt 0 view .LVU1826
 6555 0030 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6556              	.LBE1781:
 6557              	.LBE1780:
 742:src/xeq.c     **** 		lift();
 6558              		.loc 1 742 5 view .LVU1827
 6559 0032 5B06     		lsls	r3, r3, #25
 6560 0034 F1D5     		bpl	.L520
 6561              	.L523:
 743:src/xeq.c     **** }
 6562              		.loc 1 743 3 is_stmt 1 view .LVU1828
 6563              	.LBE1779:
 6564              	.LBE1778:
 6565              	.LBE1784:
 759:src/xeq.c     **** 
 6566              		.loc 1 759 1 is_stmt 0 view .LVU1829
 6567 0036 BDE81040 		pop	{r4, lr}
 6568              		.cfi_restore 14
 6569              		.cfi_restore 4
 6570              		.cfi_def_cfa_offset 0
 6571              	.LBB1785:
 6572              	.LBB1783:
 6573              	.LBB1782:
 743:src/xeq.c     **** }
 6574              		.loc 1 743 3 view .LVU1830
 6575 003a FFF7FEBF 		b	lift
 6576              	.LVL472:
 6577              	.L532:
 6578 003e 00BF     		.align	2
 6579              	.L531:
 6580 0040 00000000 		.word	StateWhileOn
 6581 0044 00000000 		.word	main_ram
 6582              	.LBE1782:
 6583              	.LBE1783:
 6584              	.LBE1785:
 6585              		.cfi_endproc
ARM GAS  /tmp/ccaPnj5t.s 			page 246


 6586              	.LFE50:
 6588              		.section	.text.lower,"ax",%progbits
 6589              		.align	1
 6590              		.p2align 2,,3
 6591              		.syntax unified
 6592              		.thumb
 6593              		.thumb_func
 6594              		.fpu fpv4-sp-d16
 6596              	lower:
 6597              	.LFB53:
 769:src/xeq.c     **** 	const int n = stack_size();
 6598              		.loc 1 769 25 is_stmt 1 view -0
 6599              		.cfi_startproc
 6600              		@ args = 0, pretend = 0, frame = 0
 6601              		@ frame_needed = 0, uses_anonymous_args = 0
 770:src/xeq.c     **** 	int i;
 6602              		.loc 1 770 2 view .LVU1832
 6603              	.LBB1786:
 6604              	.LBI1786:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6605              		.loc 1 706 5 view .LVU1833
 6606              	.LBB1787:
 707:src/xeq.c     **** 		return 4;
 6607              		.loc 1 707 2 view .LVU1834
 6608              	.LBE1787:
 6609              	.LBE1786:
 769:src/xeq.c     **** 	const int n = stack_size();
 6610              		.loc 1 769 25 is_stmt 0 view .LVU1835
 6611 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6612              		.cfi_def_cfa_offset 24
 6613              		.cfi_offset 4, -24
 6614              		.cfi_offset 5, -20
 6615              		.cfi_offset 6, -16
 6616              		.cfi_offset 7, -12
 6617              		.cfi_offset 8, -8
 6618              		.cfi_offset 14, -4
 6619              	.LBB1793:
 6620              	.LBB1790:
 707:src/xeq.c     **** 		return 4;
 6621              		.loc 1 707 8 view .LVU1836
 6622 0004 194F     		ldr	r7, .L544
 6623 0006 3B68     		ldr	r3, [r7]
 707:src/xeq.c     **** 		return 4;
 6624              		.loc 1 707 6 view .LVU1837
 6625 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 6626              		.loc 1 707 5 view .LVU1838
 6627 000c 1207     		lsls	r2, r2, #28
 6628 000e 2BD5     		bpl	.L537
 6629              	.LBB1788:
 6630              	.LBI1788:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6631              		.loc 1 185 5 is_stmt 1 view .LVU1839
 6632              	.LBB1789:
 186:src/xeq.c     **** }
 6633              		.loc 1 186 2 view .LVU1840
 186:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 247


 6634              		.loc 1 186 9 is_stmt 0 view .LVU1841
 6635 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 6636              	.LBE1789:
 6637              	.LBE1788:
 707:src/xeq.c     **** 		return 4;
 6638              		.loc 1 707 27 view .LVU1842
 6639 0014 9B0B     		lsrs	r3, r3, #14
 6640 0016 032B     		cmp	r3, #3
 6641 0018 1ED0     		beq	.L543
 709:src/xeq.c     **** }
 6642              		.loc 1 709 9 view .LVU1843
 6643 001a 0826     		movs	r6, #8
 6644              	.L534:
 6645              	.LVL473:
 709:src/xeq.c     **** }
 6646              		.loc 1 709 9 view .LVU1844
 6647              	.LBE1790:
 6648              	.LBE1793:
 771:src/xeq.c     **** 
 6649              		.loc 1 771 2 is_stmt 1 view .LVU1845
 773:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6650              		.loc 1 773 2 view .LVU1846
 773:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6651              		.loc 1 773 12 view .LVU1847
 6652 001c 6336     		adds	r6, r6, #99
 6653              	.LVL474:
 6654              	.LBB1794:
 6655              	.LBB1791:
 708:src/xeq.c     **** 	return 8;
 6656              		.loc 1 708 10 is_stmt 0 view .LVU1848
 6657 001e 6424     		movs	r4, #100
 6658              	.LBE1791:
 6659              	.LBE1794:
 6660              	.LBB1795:
 6661              	.LBB1796:
 6662              	.LBB1797:
 6663              	.LBB1798:
1101:src/xeq.c     **** }
 6664              		.loc 1 1101 24 view .LVU1849
 6665 0020 44F20108 		movw	r8, #16385
 6666              	.LVL475:
 6667              	.L536:
1101:src/xeq.c     **** }
 6668              		.loc 1 1101 24 view .LVU1850
 6669              	.LBE1798:
 6670              	.LBE1797:
 6671              	.LBE1796:
 6672              	.LBE1795:
 774:src/xeq.c     **** }
 6673              		.loc 1 774 3 is_stmt 1 discriminator 3 view .LVU1851
 6674              	.LBB1805:
 6675              	.LBI1805:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6676              		.loc 1 712 11 discriminator 3 view .LVU1852
 6677              	.LBB1806:
 713:src/xeq.c     **** }
 6678              		.loc 1 713 2 discriminator 3 view .LVU1853
ARM GAS  /tmp/ccaPnj5t.s 			page 248


 713:src/xeq.c     **** }
 6679              		.loc 1 713 9 is_stmt 0 discriminator 3 view .LVU1854
 6680 0024 2046     		mov	r0, r4
 6681 0026 FFF7FEFF 		bl	get_reg_n
 6682              	.LVL476:
 6683 002a 0134     		adds	r4, r4, #1
 6684              	.LVL477:
 713:src/xeq.c     **** }
 6685              		.loc 1 713 9 discriminator 3 view .LVU1855
 6686 002c 0546     		mov	r5, r0
 6687              	.LBE1806:
 6688              	.LBE1805:
 6689              	.LBB1807:
 6690              	.LBB1808:
 6691 002e 2046     		mov	r0, r4
 6692              	.LVL478:
 713:src/xeq.c     **** }
 6693              		.loc 1 713 9 discriminator 3 view .LVU1856
 6694              	.LBE1808:
 6695              	.LBI1807:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6696              		.loc 1 712 11 is_stmt 1 discriminator 3 view .LVU1857
 6697              	.LBB1809:
 713:src/xeq.c     **** }
 6698              		.loc 1 713 2 discriminator 3 view .LVU1858
 713:src/xeq.c     **** }
 6699              		.loc 1 713 9 is_stmt 0 discriminator 3 view .LVU1859
 6700 0030 FFF7FEFF 		bl	get_reg_n
 6701              	.LVL479:
 713:src/xeq.c     **** }
 6702              		.loc 1 713 9 discriminator 3 view .LVU1860
 6703              	.LBE1809:
 6704              	.LBE1807:
 6705              	.LBB1811:
 6706              	.LBB1803:
 6707              	.LBB1801:
 6708              	.LBB1799:
1101:src/xeq.c     **** }
 6709              		.loc 1 1101 24 discriminator 3 view .LVU1861
 6710 0034 3B68     		ldr	r3, [r7]
 6711 0036 B3F8E837 		ldrh	r3, [r3, #2024]
 6712              	.LBE1799:
 6713              	.LBE1801:
 721:src/xeq.c     **** }
 6714              		.loc 1 721 2 discriminator 3 view .LVU1862
 6715 003a 08EA0303 		and	r3, r8, r3
 6716 003e B3F5804F 		cmp	r3, #16384
 6717              	.LBE1803:
 6718              	.LBE1811:
 6719              	.LBB1812:
 6720              	.LBB1810:
 713:src/xeq.c     **** }
 6721              		.loc 1 713 9 discriminator 3 view .LVU1863
 6722 0042 0146     		mov	r1, r0
 6723              	.LVL480:
 713:src/xeq.c     **** }
 6724              		.loc 1 713 9 discriminator 3 view .LVU1864
ARM GAS  /tmp/ccaPnj5t.s 			page 249


 6725              	.LBE1810:
 6726              	.LBE1812:
 6727              	.LBB1813:
 6728              	.LBI1795:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6729              		.loc 1 720 6 is_stmt 1 discriminator 3 view .LVU1865
 6730              	.LBB1804:
 721:src/xeq.c     **** }
 6731              		.loc 1 721 2 discriminator 3 view .LVU1866
 6732              	.LBB1802:
 6733              	.LBI1797:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6734              		.loc 1 1100 5 discriminator 3 view .LVU1867
 6735              	.LBB1800:
1101:src/xeq.c     **** }
 6736              		.loc 1 1101 2 discriminator 3 view .LVU1868
 6737              	.LBE1800:
 6738              	.LBE1802:
 721:src/xeq.c     **** }
 6739              		.loc 1 721 2 is_stmt 0 discriminator 3 view .LVU1869
 6740 0044 0CBF     		ite	eq
 6741 0046 1022     		moveq	r2, #16
 6742 0048 0822     		movne	r2, #8
 6743 004a 2846     		mov	r0, r5
 6744              	.LVL481:
 721:src/xeq.c     **** }
 6745              		.loc 1 721 2 discriminator 3 view .LVU1870
 6746 004c FFF7FEFF 		bl	xcopy
 6747              	.LVL482:
 721:src/xeq.c     **** }
 6748              		.loc 1 721 2 discriminator 3 view .LVU1871
 6749              	.LBE1804:
 6750              	.LBE1813:
 773:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6751              		.loc 1 773 17 is_stmt 1 discriminator 3 view .LVU1872
 773:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6752              		.loc 1 773 12 discriminator 3 view .LVU1873
 773:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6753              		.loc 1 773 2 is_stmt 0 discriminator 3 view .LVU1874
 6754 0050 B442     		cmp	r4, r6
 6755 0052 E7D1     		bne	.L536
 775:src/xeq.c     **** 
 6756              		.loc 1 775 1 view .LVU1875
 6757 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6758              	.LVL483:
 6759              	.L543:
 6760              	.LBB1814:
 6761              	.LBB1792:
 707:src/xeq.c     **** 		return 4;
 6762              		.loc 1 707 44 view .LVU1876
 6763 0058 054B     		ldr	r3, .L544+4
 707:src/xeq.c     **** 		return 4;
 6764              		.loc 1 707 41 view .LVU1877
 6765 005a 93F90130 		ldrsb	r3, [r3, #1]
 708:src/xeq.c     **** 	return 8;
 6766              		.loc 1 708 10 view .LVU1878
 6767 005e 002B     		cmp	r3, #0
ARM GAS  /tmp/ccaPnj5t.s 			page 250


 6768 0060 B4BF     		ite	lt
 6769 0062 0826     		movlt	r6, #8
 6770 0064 0426     		movge	r6, #4
 6771 0066 D9E7     		b	.L534
 6772              	.L537:
 6773 0068 0426     		movs	r6, #4
 6774 006a D7E7     		b	.L534
 6775              	.L545:
 6776              		.align	2
 6777              	.L544:
 6778 006c 00000000 		.word	main_ram
 6779 0070 00000000 		.word	XromParams
 6780              	.LBE1792:
 6781              	.LBE1814:
 6782              		.cfi_endproc
 6783              	.LFE53:
 6785              		.section	.text.get_stack_top,"ax",%progbits
 6786              		.align	1
 6787              		.p2align 2,,3
 6788              		.syntax unified
 6789              		.thumb
 6790              		.thumb_func
 6791              		.fpu fpv4-sp-d16
 6793              	get_stack_top:
 6794              	.LFB44:
 716:src/xeq.c     **** 	return get_stack(stack_size()-1);
 6795              		.loc 1 716 38 is_stmt 1 view -0
 6796              		.cfi_startproc
 6797              		@ args = 0, pretend = 0, frame = 0
 6798              		@ frame_needed = 0, uses_anonymous_args = 0
 6799              		@ link register save eliminated.
 717:src/xeq.c     **** }
 6800              		.loc 1 717 2 view .LVU1880
 6801              	.LBB1815:
 6802              	.LBI1815:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6803              		.loc 1 706 5 view .LVU1881
 6804              	.LBB1816:
 707:src/xeq.c     **** 		return 4;
 6805              		.loc 1 707 2 view .LVU1882
 707:src/xeq.c     **** 		return 4;
 6806              		.loc 1 707 8 is_stmt 0 view .LVU1883
 6807 0000 0C4B     		ldr	r3, .L552
 6808 0002 1B68     		ldr	r3, [r3]
 707:src/xeq.c     **** 		return 4;
 6809              		.loc 1 707 6 view .LVU1884
 6810 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 6811              		.loc 1 707 5 view .LVU1885
 6812 0008 1207     		lsls	r2, r2, #28
 6813 000a 10D5     		bpl	.L548
 6814              	.LBB1817:
 6815              	.LBI1817:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6816              		.loc 1 185 5 is_stmt 1 view .LVU1886
 6817              	.LBB1818:
 186:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 251


 6818              		.loc 1 186 2 view .LVU1887
 186:src/xeq.c     **** }
 6819              		.loc 1 186 9 is_stmt 0 view .LVU1888
 6820 000c B3F8E037 		ldrh	r3, [r3, #2016]
 6821              	.LBE1818:
 6822              	.LBE1817:
 707:src/xeq.c     **** 		return 4;
 6823              		.loc 1 707 27 view .LVU1889
 6824 0010 9B0B     		lsrs	r3, r3, #14
 6825 0012 032B     		cmp	r3, #3
 6826 0014 02D0     		beq	.L551
 6827 0016 6B20     		movs	r0, #107
 6828              	.LBE1816:
 6829              	.LBE1815:
 6830              	.LBB1821:
 6831              	.LBI1821:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6832              		.loc 1 712 11 is_stmt 1 view .LVU1890
 6833              	.LBB1822:
 713:src/xeq.c     **** }
 6834              		.loc 1 713 2 view .LVU1891
 713:src/xeq.c     **** }
 6835              		.loc 1 713 9 is_stmt 0 view .LVU1892
 6836 0018 FFF7FEBF 		b	get_reg_n
 6837              	.LVL484:
 6838              	.L551:
 6839              	.LBE1822:
 6840              	.LBE1821:
 6841              	.LBB1825:
 6842              	.LBB1819:
 707:src/xeq.c     **** 		return 4;
 6843              		.loc 1 707 44 view .LVU1893
 6844 001c 064B     		ldr	r3, .L552+4
 707:src/xeq.c     **** 		return 4;
 6845              		.loc 1 707 41 view .LVU1894
 6846 001e 93F90130 		ldrsb	r3, [r3, #1]
 6847 0022 002B     		cmp	r3, #0
 6848 0024 B4BF     		ite	lt
 6849 0026 6B20     		movlt	r0, #107
 6850 0028 6720     		movge	r0, #103
 6851              	.LBE1819:
 6852              	.LBE1825:
 6853              	.LBB1826:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6854              		.loc 1 712 11 is_stmt 1 view .LVU1895
 6855              	.LBB1823:
 713:src/xeq.c     **** }
 6856              		.loc 1 713 2 view .LVU1896
 713:src/xeq.c     **** }
 6857              		.loc 1 713 9 is_stmt 0 view .LVU1897
 6858 002a FFF7FEBF 		b	get_reg_n
 6859              	.LVL485:
 6860              	.L548:
 6861              	.LBE1823:
 6862              	.LBE1826:
 6863              	.LBB1827:
 6864              	.LBB1820:
ARM GAS  /tmp/ccaPnj5t.s 			page 252


 6865 002e 6720     		movs	r0, #103
 6866              	.LBE1820:
 6867              	.LBE1827:
 6868              	.LBB1828:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6869              		.loc 1 712 11 is_stmt 1 view .LVU1898
 6870              	.LBB1824:
 713:src/xeq.c     **** }
 6871              		.loc 1 713 2 view .LVU1899
 713:src/xeq.c     **** }
 6872              		.loc 1 713 9 is_stmt 0 view .LVU1900
 6873 0030 FFF7FEBF 		b	get_reg_n
 6874              	.LVL486:
 6875              	.L553:
 6876              		.align	2
 6877              	.L552:
 6878 0034 00000000 		.word	main_ram
 6879 0038 00000000 		.word	XromParams
 6880              	.LBE1824:
 6881              	.LBE1828:
 6882              		.cfi_endproc
 6883              	.LFE44:
 6885              		.section	.text.roll_down,"ax",%progbits
 6886              		.align	1
 6887              		.p2align 2,,3
 6888              		.global	roll_down
 6889              		.syntax unified
 6890              		.thumb
 6891              		.thumb_func
 6892              		.fpu fpv4-sp-d16
 6894              	roll_down:
 6895              	.LVL487:
 6896              	.LFB70:
 883:src/xeq.c     **** 	REGISTER r;
 6897              		.loc 1 883 31 is_stmt 1 view -0
 6898              		.cfi_startproc
 6899              		@ args = 0, pretend = 0, frame = 16
 6900              		@ frame_needed = 0, uses_anonymous_args = 0
 884:src/xeq.c     **** 	copyreg(&r, StackBase);
 6901              		.loc 1 884 2 view .LVU1902
 885:src/xeq.c     **** 	lower();
 6902              		.loc 1 885 2 view .LVU1903
 883:src/xeq.c     **** 	REGISTER r;
 6903              		.loc 1 883 31 is_stmt 0 view .LVU1904
 6904 0000 30B5     		push	{r4, r5, lr}
 6905              		.cfi_def_cfa_offset 12
 6906              		.cfi_offset 4, -12
 6907              		.cfi_offset 5, -8
 6908              		.cfi_offset 14, -4
 6909              	.LBB1829:
 6910              	.LBB1830:
 6911              	.LBB1831:
 6912              	.LBB1832:
1101:src/xeq.c     **** }
 6913              		.loc 1 1101 24 view .LVU1905
 6914 0002 124D     		ldr	r5, .L560
 6915              	.LBE1832:
ARM GAS  /tmp/ccaPnj5t.s 			page 253


 6916              	.LBE1831:
 6917              	.LBE1830:
 6918              	.LBE1829:
 885:src/xeq.c     **** 	lower();
 6919              		.loc 1 885 2 view .LVU1906
 6920 0004 124A     		ldr	r2, .L560+4
 6921              	.LBB1841:
 6922              	.LBB1839:
 6923              	.LBB1836:
 6924              	.LBB1833:
1101:src/xeq.c     **** }
 6925              		.loc 1 1101 24 view .LVU1907
 6926 0006 2B68     		ldr	r3, [r5]
 6927              	.LBE1833:
 6928              	.LBE1836:
 721:src/xeq.c     **** }
 6929              		.loc 1 721 2 view .LVU1908
 6930 0008 1168     		ldr	r1, [r2]
 6931              	.LBB1837:
 6932              	.LBB1834:
1101:src/xeq.c     **** }
 6933              		.loc 1 1101 24 view .LVU1909
 6934 000a B3F8E837 		ldrh	r3, [r3, #2024]
 6935 000e 44F20104 		movw	r4, #16385
 6936              	.LBE1834:
 6937              	.LBE1837:
 721:src/xeq.c     **** }
 6938              		.loc 1 721 2 view .LVU1910
 6939 0012 2340     		ands	r3, r3, r4
 6940              	.LBE1839:
 6941              	.LBE1841:
 883:src/xeq.c     **** 	REGISTER r;
 6942              		.loc 1 883 31 view .LVU1911
 6943 0014 85B0     		sub	sp, sp, #20
 6944              		.cfi_def_cfa_offset 32
 6945              	.LVL488:
 6946              	.LBB1842:
 6947              	.LBI1829:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6948              		.loc 1 720 6 is_stmt 1 view .LVU1912
 6949              	.LBB1840:
 721:src/xeq.c     **** }
 6950              		.loc 1 721 2 view .LVU1913
 6951              	.LBB1838:
 6952              	.LBI1831:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6953              		.loc 1 1100 5 view .LVU1914
 6954              	.LBB1835:
1101:src/xeq.c     **** }
 6955              		.loc 1 1101 2 view .LVU1915
 6956              	.LBE1835:
 6957              	.LBE1838:
 721:src/xeq.c     **** }
 6958              		.loc 1 721 2 is_stmt 0 view .LVU1916
 6959 0016 B3F5804F 		cmp	r3, #16384
 6960 001a 0CBF     		ite	eq
 6961 001c 1022     		moveq	r2, #16
ARM GAS  /tmp/ccaPnj5t.s 			page 254


 6962 001e 0822     		movne	r2, #8
 6963 0020 6846     		mov	r0, sp
 6964              	.LVL489:
 721:src/xeq.c     **** }
 6965              		.loc 1 721 2 view .LVU1917
 6966 0022 FFF7FEFF 		bl	xcopy
 6967              	.LVL490:
 721:src/xeq.c     **** }
 6968              		.loc 1 721 2 view .LVU1918
 6969              	.LBE1840:
 6970              	.LBE1842:
 886:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 6971              		.loc 1 886 2 is_stmt 1 view .LVU1919
 6972 0026 FFF7FEFF 		bl	lower
 6973              	.LVL491:
 887:src/xeq.c     **** }
 6974              		.loc 1 887 2 view .LVU1920
 6975 002a FFF7FEFF 		bl	get_stack_top
 6976              	.LVL492:
 6977              	.LBB1843:
 6978              	.LBI1843:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6979              		.loc 1 720 6 view .LVU1921
 6980              	.LBB1844:
 721:src/xeq.c     **** }
 6981              		.loc 1 721 2 view .LVU1922
 6982              	.LBB1845:
 6983              	.LBI1845:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6984              		.loc 1 1100 5 view .LVU1923
 6985              	.LBB1846:
1101:src/xeq.c     **** }
 6986              		.loc 1 1101 2 view .LVU1924
1101:src/xeq.c     **** }
 6987              		.loc 1 1101 24 is_stmt 0 view .LVU1925
 6988 002e 2B68     		ldr	r3, [r5]
 6989 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 6990              	.LBE1846:
 6991              	.LBE1845:
 721:src/xeq.c     **** }
 6992              		.loc 1 721 2 view .LVU1926
 6993 0034 1C40     		ands	r4, r4, r3
 6994 0036 B4F5804F 		cmp	r4, #16384
 6995 003a 6946     		mov	r1, sp
 6996 003c 0CBF     		ite	eq
 6997 003e 1022     		moveq	r2, #16
 6998 0040 0822     		movne	r2, #8
 6999 0042 FFF7FEFF 		bl	xcopy
 7000              	.LVL493:
 721:src/xeq.c     **** }
 7001              		.loc 1 721 2 view .LVU1927
 7002              	.LBE1844:
 7003              	.LBE1843:
 888:src/xeq.c     **** 
 7004              		.loc 1 888 1 view .LVU1928
 7005 0046 05B0     		add	sp, sp, #20
 7006              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccaPnj5t.s 			page 255


 7007              		@ sp needed
 7008 0048 30BD     		pop	{r4, r5, pc}
 7009              	.L561:
 7010 004a 00BF     		.align	2
 7011              	.L560:
 7012 004c 00000000 		.word	main_ram
 7013 0050 00000000 		.word	StackBase
 7014              		.cfi_endproc
 7015              	.LFE70:
 7017              		.section	.text.cpx_roll_down,"ax",%progbits
 7018              		.align	1
 7019              		.p2align 2,,3
 7020              		.global	cpx_roll_down
 7021              		.syntax unified
 7022              		.thumb
 7023              		.thumb_func
 7024              		.fpu fpv4-sp-d16
 7026              	cpx_roll_down:
 7027              	.LVL494:
 7028              	.LFB72:
 897:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7029              		.loc 1 897 35 is_stmt 1 view -0
 7030              		.cfi_startproc
 7031              		@ args = 0, pretend = 0, frame = 0
 7032              		@ frame_needed = 0, uses_anonymous_args = 0
 898:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7033              		.loc 1 898 2 view .LVU1930
 897:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7034              		.loc 1 897 35 is_stmt 0 view .LVU1931
 7035 0000 08B5     		push	{r3, lr}
 7036              		.cfi_def_cfa_offset 8
 7037              		.cfi_offset 3, -8
 7038              		.cfi_offset 14, -4
 898:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7039              		.loc 1 898 2 view .LVU1932
 7040 0002 0720     		movs	r0, #7
 7041              	.LVL495:
 898:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7042              		.loc 1 898 2 view .LVU1933
 7043 0004 FFF7FEFF 		bl	roll_down
 7044              	.LVL496:
 899:src/xeq.c     **** 	set_was_complex();
 7045              		.loc 1 899 2 is_stmt 1 view .LVU1934
 7046 0008 0720     		movs	r0, #7
 7047 000a FFF7FEFF 		bl	roll_down
 7048              	.LVL497:
 900:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7049              		.loc 1 900 2 view .LVU1935
 7050              	.LBB1847:
 7051              	.LBI1847:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 7052              		.loc 1 533 13 view .LVU1936
 7053              	.LBB1848:
 534:src/xeq.c     **** }
 7054              		.loc 1 534 2 view .LVU1937
 534:src/xeq.c     **** }
 7055              		.loc 1 534 20 is_stmt 0 view .LVU1938
ARM GAS  /tmp/ccaPnj5t.s 			page 256


 7056 000e 074B     		ldr	r3, .L564
 7057              	.LBE1848:
 7058              	.LBE1847:
 902:src/xeq.c     **** #endif
 7059              		.loc 1 902 2 view .LVU1939
 7060 0010 074A     		ldr	r2, .L564+4
 7061              	.LBB1851:
 7062              	.LBB1849:
 534:src/xeq.c     **** }
 7063              		.loc 1 534 20 view .LVU1940
 7064 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7065              	.LBE1849:
 7066              	.LBE1851:
 902:src/xeq.c     **** #endif
 7067              		.loc 1 902 2 view .LVU1941
 7068 0014 1268     		ldr	r2, [r2]
 7069              	.LBB1852:
 7070              	.LBB1850:
 534:src/xeq.c     **** }
 7071              		.loc 1 534 20 view .LVU1942
 7072 0016 0120     		movs	r0, #1
 7073 0018 60F38711 		bfi	r1, r0, #6, #2
 7074 001c 1975     		strb	r1, [r3, #20]
 7075              	.LBE1850:
 7076              	.LBE1852:
 902:src/xeq.c     **** #endif
 7077              		.loc 1 902 2 is_stmt 1 view .LVU1943
 7078 001e 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 7079 0022 0343     		orrs	r3, r3, r0
 7080 0024 82F8AD37 		strb	r3, [r2, #1965]
 904:src/xeq.c     **** 
 7081              		.loc 1 904 1 is_stmt 0 view .LVU1944
 7082 0028 08BD     		pop	{r3, pc}
 7083              	.L565:
 7084 002a 00BF     		.align	2
 7085              	.L564:
 7086 002c 00000000 		.word	StateWhileOn
 7087 0030 00000000 		.word	main_ram
 7088              		.cfi_endproc
 7089              	.LFE72:
 7091              		.section	.text.roll_up,"ax",%progbits
 7092              		.align	1
 7093              		.p2align 2,,3
 7094              		.global	roll_up
 7095              		.syntax unified
 7096              		.thumb
 7097              		.thumb_func
 7098              		.fpu fpv4-sp-d16
 7100              	roll_up:
 7101              	.LVL498:
 7102              	.LFB71:
 890:src/xeq.c     **** 	REGISTER r;
 7103              		.loc 1 890 29 is_stmt 1 view -0
 7104              		.cfi_startproc
 7105              		@ args = 0, pretend = 0, frame = 16
 7106              		@ frame_needed = 0, uses_anonymous_args = 0
 891:src/xeq.c     **** 	copyreg(&r, get_stack_top());
ARM GAS  /tmp/ccaPnj5t.s 			page 257


 7107              		.loc 1 891 2 view .LVU1946
 892:src/xeq.c     **** 	lift();
 7108              		.loc 1 892 2 view .LVU1947
 890:src/xeq.c     **** 	REGISTER r;
 7109              		.loc 1 890 29 is_stmt 0 view .LVU1948
 7110 0000 30B5     		push	{r4, r5, lr}
 7111              		.cfi_def_cfa_offset 12
 7112              		.cfi_offset 4, -12
 7113              		.cfi_offset 5, -8
 7114              		.cfi_offset 14, -4
 7115              	.LBB1853:
 7116              	.LBB1854:
 7117              	.LBB1855:
 7118              	.LBB1856:
1101:src/xeq.c     **** }
 7119              		.loc 1 1101 24 view .LVU1949
 7120 0002 124D     		ldr	r5, .L572
 7121              	.LBE1856:
 7122              	.LBE1855:
 7123              	.LBE1854:
 7124              	.LBE1853:
 890:src/xeq.c     **** 	REGISTER r;
 7125              		.loc 1 890 29 view .LVU1950
 7126 0004 85B0     		sub	sp, sp, #20
 7127              		.cfi_def_cfa_offset 32
 892:src/xeq.c     **** 	lift();
 7128              		.loc 1 892 14 view .LVU1951
 7129 0006 FFF7FEFF 		bl	get_stack_top
 7130              	.LVL499:
 7131              	.LBB1863:
 7132              	.LBB1861:
 7133              	.LBB1859:
 7134              	.LBB1857:
1101:src/xeq.c     **** }
 7135              		.loc 1 1101 24 view .LVU1952
 7136 000a 2B68     		ldr	r3, [r5]
 7137 000c B3F8E837 		ldrh	r3, [r3, #2024]
 7138 0010 44F20104 		movw	r4, #16385
 7139              	.LBE1857:
 7140              	.LBE1859:
 721:src/xeq.c     **** }
 7141              		.loc 1 721 2 view .LVU1953
 7142 0014 2340     		ands	r3, r3, r4
 7143 0016 B3F5804F 		cmp	r3, #16384
 7144              	.LBE1861:
 7145              	.LBE1863:
 892:src/xeq.c     **** 	lift();
 7146              		.loc 1 892 14 view .LVU1954
 7147 001a 0146     		mov	r1, r0
 7148              	.LVL500:
 7149              	.LBB1864:
 7150              	.LBI1853:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7151              		.loc 1 720 6 is_stmt 1 view .LVU1955
 7152              	.LBB1862:
 721:src/xeq.c     **** }
 7153              		.loc 1 721 2 view .LVU1956
ARM GAS  /tmp/ccaPnj5t.s 			page 258


 7154              	.LBB1860:
 7155              	.LBI1855:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7156              		.loc 1 1100 5 view .LVU1957
 7157              	.LBB1858:
1101:src/xeq.c     **** }
 7158              		.loc 1 1101 2 view .LVU1958
 7159              	.LBE1858:
 7160              	.LBE1860:
 721:src/xeq.c     **** }
 7161              		.loc 1 721 2 is_stmt 0 view .LVU1959
 7162 001c 0CBF     		ite	eq
 7163 001e 1022     		moveq	r2, #16
 7164 0020 0822     		movne	r2, #8
 7165 0022 6846     		mov	r0, sp
 7166              	.LVL501:
 721:src/xeq.c     **** }
 7167              		.loc 1 721 2 view .LVU1960
 7168 0024 FFF7FEFF 		bl	xcopy
 7169              	.LVL502:
 721:src/xeq.c     **** }
 7170              		.loc 1 721 2 view .LVU1961
 7171              	.LBE1862:
 7172              	.LBE1864:
 893:src/xeq.c     **** 	copyreg(StackBase, &r);
 7173              		.loc 1 893 2 is_stmt 1 view .LVU1962
 7174 0028 FFF7FEFF 		bl	lift
 7175              	.LVL503:
 894:src/xeq.c     **** }
 7176              		.loc 1 894 2 view .LVU1963
 7177              	.LBB1865:
 7178              	.LBB1866:
 7179              	.LBB1867:
 7180              	.LBB1868:
1101:src/xeq.c     **** }
 7181              		.loc 1 1101 24 is_stmt 0 view .LVU1964
 7182 002c 2B68     		ldr	r3, [r5]
 7183              	.LBE1868:
 7184              	.LBE1867:
 7185              	.LBE1866:
 7186              	.LBE1865:
 894:src/xeq.c     **** }
 7187              		.loc 1 894 2 view .LVU1965
 7188 002e 084A     		ldr	r2, .L572+4
 7189              	.LVL504:
 7190              	.LBB1872:
 7191              	.LBI1865:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7192              		.loc 1 720 6 is_stmt 1 view .LVU1966
 7193              	.LBB1871:
 721:src/xeq.c     **** }
 7194              		.loc 1 721 2 view .LVU1967
 7195              	.LBB1870:
 7196              	.LBI1867:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7197              		.loc 1 1100 5 view .LVU1968
 7198              	.LBB1869:
ARM GAS  /tmp/ccaPnj5t.s 			page 259


1101:src/xeq.c     **** }
 7199              		.loc 1 1101 2 view .LVU1969
1101:src/xeq.c     **** }
 7200              		.loc 1 1101 24 is_stmt 0 view .LVU1970
 7201 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7202              	.LBE1869:
 7203              	.LBE1870:
 721:src/xeq.c     **** }
 7204              		.loc 1 721 2 view .LVU1971
 7205 0034 1068     		ldr	r0, [r2]
 7206 0036 1C40     		ands	r4, r4, r3
 7207 0038 B4F5804F 		cmp	r4, #16384
 7208 003c 6946     		mov	r1, sp
 7209 003e 0CBF     		ite	eq
 7210 0040 1022     		moveq	r2, #16
 7211              	.LVL505:
 721:src/xeq.c     **** }
 7212              		.loc 1 721 2 view .LVU1972
 7213 0042 0822     		movne	r2, #8
 7214 0044 FFF7FEFF 		bl	xcopy
 7215              	.LVL506:
 721:src/xeq.c     **** }
 7216              		.loc 1 721 2 view .LVU1973
 7217              	.LBE1871:
 7218              	.LBE1872:
 895:src/xeq.c     **** 
 7219              		.loc 1 895 1 view .LVU1974
 7220 0048 05B0     		add	sp, sp, #20
 7221              		.cfi_def_cfa_offset 12
 7222              		@ sp needed
 7223 004a 30BD     		pop	{r4, r5, pc}
 7224              	.L573:
 7225              		.align	2
 7226              	.L572:
 7227 004c 00000000 		.word	main_ram
 7228 0050 00000000 		.word	StackBase
 7229              		.cfi_endproc
 7230              	.LFE71:
 7232              		.section	.text.cpx_roll_up,"ax",%progbits
 7233              		.align	1
 7234              		.p2align 2,,3
 7235              		.global	cpx_roll_up
 7236              		.syntax unified
 7237              		.thumb
 7238              		.thumb_func
 7239              		.fpu fpv4-sp-d16
 7241              	cpx_roll_up:
 7242              	.LVL507:
 7243              	.LFB73:
 906:src/xeq.c     **** 	roll_up(OP_RUP);
 7244              		.loc 1 906 33 is_stmt 1 view -0
 7245              		.cfi_startproc
 7246              		@ args = 0, pretend = 0, frame = 0
 7247              		@ frame_needed = 0, uses_anonymous_args = 0
 907:src/xeq.c     **** 	roll_up(OP_RUP);
 7248              		.loc 1 907 2 view .LVU1976
 906:src/xeq.c     **** 	roll_up(OP_RUP);
ARM GAS  /tmp/ccaPnj5t.s 			page 260


 7249              		.loc 1 906 33 is_stmt 0 view .LVU1977
 7250 0000 08B5     		push	{r3, lr}
 7251              		.cfi_def_cfa_offset 8
 7252              		.cfi_offset 3, -8
 7253              		.cfi_offset 14, -4
 907:src/xeq.c     **** 	roll_up(OP_RUP);
 7254              		.loc 1 907 2 view .LVU1978
 7255 0002 0820     		movs	r0, #8
 7256              	.LVL508:
 907:src/xeq.c     **** 	roll_up(OP_RUP);
 7257              		.loc 1 907 2 view .LVU1979
 7258 0004 FFF7FEFF 		bl	roll_up
 7259              	.LVL509:
 908:src/xeq.c     **** 	set_was_complex();
 7260              		.loc 1 908 2 is_stmt 1 view .LVU1980
 7261 0008 0820     		movs	r0, #8
 7262 000a FFF7FEFF 		bl	roll_up
 7263              	.LVL510:
 909:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7264              		.loc 1 909 2 view .LVU1981
 7265              	.LBB1873:
 7266              	.LBI1873:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 7267              		.loc 1 533 13 view .LVU1982
 7268              	.LBB1874:
 534:src/xeq.c     **** }
 7269              		.loc 1 534 2 view .LVU1983
 534:src/xeq.c     **** }
 7270              		.loc 1 534 20 is_stmt 0 view .LVU1984
 7271 000e 074B     		ldr	r3, .L576
 7272              	.LBE1874:
 7273              	.LBE1873:
 911:src/xeq.c     **** #endif
 7274              		.loc 1 911 2 view .LVU1985
 7275 0010 074A     		ldr	r2, .L576+4
 7276              	.LBB1877:
 7277              	.LBB1875:
 534:src/xeq.c     **** }
 7278              		.loc 1 534 20 view .LVU1986
 7279 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7280              	.LBE1875:
 7281              	.LBE1877:
 911:src/xeq.c     **** #endif
 7282              		.loc 1 911 2 view .LVU1987
 7283 0014 1268     		ldr	r2, [r2]
 7284              	.LBB1878:
 7285              	.LBB1876:
 534:src/xeq.c     **** }
 7286              		.loc 1 534 20 view .LVU1988
 7287 0016 0120     		movs	r0, #1
 7288 0018 60F38711 		bfi	r1, r0, #6, #2
 7289 001c 1975     		strb	r1, [r3, #20]
 7290              	.LBE1876:
 7291              	.LBE1878:
 911:src/xeq.c     **** #endif
 7292              		.loc 1 911 2 is_stmt 1 view .LVU1989
 7293 001e 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
ARM GAS  /tmp/ccaPnj5t.s 			page 261


 7294 0022 0343     		orrs	r3, r3, r0
 7295 0024 82F8AD37 		strb	r3, [r2, #1965]
 913:src/xeq.c     **** 
 7296              		.loc 1 913 1 is_stmt 0 view .LVU1990
 7297 0028 08BD     		pop	{r3, pc}
 7298              	.L577:
 7299 002a 00BF     		.align	2
 7300              	.L576:
 7301 002c 00000000 		.word	StateWhileOn
 7302 0030 00000000 		.word	main_ram
 7303              		.cfi_endproc
 7304              	.LFE73:
 7306              		.section	.text.fill,"ax",%progbits
 7307              		.align	1
 7308              		.p2align 2,,3
 7309              		.global	fill
 7310              		.syntax unified
 7311              		.thumb
 7312              		.thumb_func
 7313              		.fpu fpv4-sp-d16
 7315              	fill:
 7316              	.LVL511:
 7317              	.LFB79:
1078:src/xeq.c     **** 	const int n = stack_size();
 7318              		.loc 1 1078 26 is_stmt 1 view -0
 7319              		.cfi_startproc
 7320              		@ args = 0, pretend = 0, frame = 0
 7321              		@ frame_needed = 0, uses_anonymous_args = 0
1079:src/xeq.c     **** 	int i;
 7322              		.loc 1 1079 2 view .LVU1992
 7323              	.LBB1879:
 7324              	.LBI1879:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7325              		.loc 1 706 5 view .LVU1993
 7326              	.LBB1880:
 707:src/xeq.c     **** 		return 4;
 7327              		.loc 1 707 2 view .LVU1994
 7328              	.LBE1880:
 7329              	.LBE1879:
1078:src/xeq.c     **** 	const int n = stack_size();
 7330              		.loc 1 1078 26 is_stmt 0 view .LVU1995
 7331 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7332              		.cfi_def_cfa_offset 24
 7333              		.cfi_offset 4, -24
 7334              		.cfi_offset 5, -20
 7335              		.cfi_offset 6, -16
 7336              		.cfi_offset 7, -12
 7337              		.cfi_offset 8, -8
 7338              		.cfi_offset 14, -4
 7339              	.LBB1886:
 7340              	.LBB1883:
 707:src/xeq.c     **** 		return 4;
 7341              		.loc 1 707 8 view .LVU1996
 7342 0004 174E     		ldr	r6, .L589
 7343 0006 3368     		ldr	r3, [r6]
 707:src/xeq.c     **** 		return 4;
 7344              		.loc 1 707 6 view .LVU1997
ARM GAS  /tmp/ccaPnj5t.s 			page 262


 7345 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 7346              		.loc 1 707 5 view .LVU1998
 7347 000c 1207     		lsls	r2, r2, #28
 7348 000e 27D5     		bpl	.L582
 7349              	.LBB1881:
 7350              	.LBI1881:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 7351              		.loc 1 185 5 is_stmt 1 view .LVU1999
 7352              	.LBB1882:
 186:src/xeq.c     **** }
 7353              		.loc 1 186 2 view .LVU2000
 186:src/xeq.c     **** }
 7354              		.loc 1 186 9 is_stmt 0 view .LVU2001
 7355 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7356              	.LBE1882:
 7357              	.LBE1881:
 707:src/xeq.c     **** 		return 4;
 7358              		.loc 1 707 27 view .LVU2002
 7359 0014 9B0B     		lsrs	r3, r3, #14
 7360 0016 032B     		cmp	r3, #3
 7361 0018 1AD0     		beq	.L588
 709:src/xeq.c     **** }
 7362              		.loc 1 709 9 view .LVU2003
 7363 001a 0825     		movs	r5, #8
 7364              	.L579:
 7365              	.LVL512:
 709:src/xeq.c     **** }
 7366              		.loc 1 709 9 view .LVU2004
 7367              	.LBE1883:
 7368              	.LBE1886:
1080:src/xeq.c     **** 
 7369              		.loc 1 1080 2 is_stmt 1 view .LVU2005
1082:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7370              		.loc 1 1082 2 view .LVU2006
1082:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7371              		.loc 1 1082 12 view .LVU2007
 7372 001c 124F     		ldr	r7, .L589+4
 7373 001e 6435     		adds	r5, r5, #100
 7374              	.LVL513:
 7375              	.LBB1887:
 7376              	.LBB1884:
 708:src/xeq.c     **** 	return 8;
 7377              		.loc 1 708 10 is_stmt 0 view .LVU2008
 7378 0020 6524     		movs	r4, #101
 7379              	.LBE1884:
 7380              	.LBE1887:
 7381              	.LBB1888:
 7382              	.LBB1889:
 7383              	.LBB1890:
 7384              	.LBB1891:
1101:src/xeq.c     **** }
 7385              		.loc 1 1101 24 view .LVU2009
 7386 0022 44F20108 		movw	r8, #16385
 7387              	.LVL514:
 7388              	.L581:
1101:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 263


 7389              		.loc 1 1101 24 view .LVU2010
 7390              	.LBE1891:
 7391              	.LBE1890:
 7392              	.LBE1889:
 7393              	.LBE1888:
1083:src/xeq.c     **** }
 7394              		.loc 1 1083 3 is_stmt 1 view .LVU2011
 7395              	.LBB1897:
 7396              	.LBI1897:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7397              		.loc 1 712 11 view .LVU2012
 7398              	.LBB1898:
 713:src/xeq.c     **** }
 7399              		.loc 1 713 2 view .LVU2013
 713:src/xeq.c     **** }
 7400              		.loc 1 713 9 is_stmt 0 view .LVU2014
 7401 0026 2046     		mov	r0, r4
 7402 0028 FFF7FEFF 		bl	get_reg_n
 7403              	.LVL515:
 713:src/xeq.c     **** }
 7404              		.loc 1 713 9 view .LVU2015
 7405              	.LBE1898:
 7406              	.LBE1897:
 7407              	.LBB1899:
 7408              	.LBI1888:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7409              		.loc 1 720 6 is_stmt 1 view .LVU2016
 7410              	.LBB1896:
 721:src/xeq.c     **** }
 7411              		.loc 1 721 2 view .LVU2017
 7412              	.LBB1894:
 7413              	.LBI1890:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7414              		.loc 1 1100 5 view .LVU2018
 7415              	.LBB1892:
1101:src/xeq.c     **** }
 7416              		.loc 1 1101 2 view .LVU2019
1101:src/xeq.c     **** }
 7417              		.loc 1 1101 24 is_stmt 0 view .LVU2020
 7418 002c 3368     		ldr	r3, [r6]
 7419              	.LBE1892:
 7420              	.LBE1894:
 721:src/xeq.c     **** }
 7421              		.loc 1 721 2 view .LVU2021
 7422 002e 3968     		ldr	r1, [r7]
 7423              	.LBB1895:
 7424              	.LBB1893:
1101:src/xeq.c     **** }
 7425              		.loc 1 1101 24 view .LVU2022
 7426 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7427              	.LBE1893:
 7428              	.LBE1895:
 721:src/xeq.c     **** }
 7429              		.loc 1 721 2 view .LVU2023
 7430 0034 08EA0303 		and	r3, r8, r3
 7431 0038 B3F5804F 		cmp	r3, #16384
 7432 003c 0CBF     		ite	eq
ARM GAS  /tmp/ccaPnj5t.s 			page 264


 7433 003e 1022     		moveq	r2, #16
 7434 0040 0822     		movne	r2, #8
 7435 0042 0134     		adds	r4, r4, #1
 7436              	.LVL516:
 721:src/xeq.c     **** }
 7437              		.loc 1 721 2 view .LVU2024
 7438 0044 FFF7FEFF 		bl	xcopy
 7439              	.LVL517:
 721:src/xeq.c     **** }
 7440              		.loc 1 721 2 view .LVU2025
 7441              	.LBE1896:
 7442              	.LBE1899:
1082:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7443              		.loc 1 1082 17 is_stmt 1 view .LVU2026
1082:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7444              		.loc 1 1082 12 view .LVU2027
1082:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7445              		.loc 1 1082 2 is_stmt 0 view .LVU2028
 7446 0048 AC42     		cmp	r4, r5
 7447 004a ECD1     		bne	.L581
1084:src/xeq.c     **** 
 7448              		.loc 1 1084 1 view .LVU2029
 7449 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7450              	.LVL518:
 7451              	.L588:
 7452              	.LBB1900:
 7453              	.LBB1885:
 707:src/xeq.c     **** 		return 4;
 7454              		.loc 1 707 44 view .LVU2030
 7455 0050 064B     		ldr	r3, .L589+8
 707:src/xeq.c     **** 		return 4;
 7456              		.loc 1 707 41 view .LVU2031
 7457 0052 93F90130 		ldrsb	r3, [r3, #1]
 708:src/xeq.c     **** 	return 8;
 7458              		.loc 1 708 10 view .LVU2032
 7459 0056 002B     		cmp	r3, #0
 7460 0058 B4BF     		ite	lt
 7461 005a 0825     		movlt	r5, #8
 7462 005c 0425     		movge	r5, #4
 7463 005e DDE7     		b	.L579
 7464              	.L582:
 7465 0060 0425     		movs	r5, #4
 7466 0062 DBE7     		b	.L579
 7467              	.L590:
 7468              		.align	2
 7469              	.L589:
 7470 0064 00000000 		.word	main_ram
 7471 0068 00000000 		.word	StackBase
 7472 006c 00000000 		.word	XromParams
 7473              	.LBE1885:
 7474              	.LBE1900:
 7475              		.cfi_endproc
 7476              	.LFE79:
 7478              		.section	.text.lower2,"ax",%progbits
 7479              		.align	1
 7480              		.p2align 2,,3
 7481              		.syntax unified
ARM GAS  /tmp/ccaPnj5t.s 			page 265


 7482              		.thumb
 7483              		.thumb_func
 7484              		.fpu fpv4-sp-d16
 7486              	lower2:
 7487              	.LFB54:
 777:src/xeq.c     **** 	const int n = stack_size();
 7488              		.loc 1 777 26 is_stmt 1 view -0
 7489              		.cfi_startproc
 7490              		@ args = 0, pretend = 0, frame = 0
 7491              		@ frame_needed = 0, uses_anonymous_args = 0
 778:src/xeq.c     **** 	int i;
 7492              		.loc 1 778 2 view .LVU2034
 7493              	.LBB1901:
 7494              	.LBI1901:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7495              		.loc 1 706 5 view .LVU2035
 7496              	.LBB1902:
 707:src/xeq.c     **** 		return 4;
 7497              		.loc 1 707 2 view .LVU2036
 7498              	.LBE1902:
 7499              	.LBE1901:
 777:src/xeq.c     **** 	const int n = stack_size();
 7500              		.loc 1 777 26 is_stmt 0 view .LVU2037
 7501 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7502              		.cfi_def_cfa_offset 24
 7503              		.cfi_offset 4, -24
 7504              		.cfi_offset 5, -20
 7505              		.cfi_offset 6, -16
 7506              		.cfi_offset 7, -12
 7507              		.cfi_offset 8, -8
 7508              		.cfi_offset 14, -4
 7509              	.LBB1908:
 7510              	.LBB1905:
 707:src/xeq.c     **** 		return 4;
 7511              		.loc 1 707 8 view .LVU2038
 7512 0004 194F     		ldr	r7, .L602
 7513 0006 3B68     		ldr	r3, [r7]
 707:src/xeq.c     **** 		return 4;
 7514              		.loc 1 707 6 view .LVU2039
 7515 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 7516              		.loc 1 707 5 view .LVU2040
 7517 000c 1207     		lsls	r2, r2, #28
 7518 000e 2BD5     		bpl	.L595
 7519              	.LBB1903:
 7520              	.LBI1903:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 7521              		.loc 1 185 5 is_stmt 1 view .LVU2041
 7522              	.LBB1904:
 186:src/xeq.c     **** }
 7523              		.loc 1 186 2 view .LVU2042
 186:src/xeq.c     **** }
 7524              		.loc 1 186 9 is_stmt 0 view .LVU2043
 7525 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7526              	.LBE1904:
 7527              	.LBE1903:
 707:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/ccaPnj5t.s 			page 266


 7528              		.loc 1 707 27 view .LVU2044
 7529 0014 9B0B     		lsrs	r3, r3, #14
 7530 0016 032B     		cmp	r3, #3
 7531 0018 1ED0     		beq	.L601
 709:src/xeq.c     **** }
 7532              		.loc 1 709 9 view .LVU2045
 7533 001a 0826     		movs	r6, #8
 7534              	.L592:
 7535              	.LVL519:
 709:src/xeq.c     **** }
 7536              		.loc 1 709 9 view .LVU2046
 7537              	.LBE1905:
 7538              	.LBE1908:
 779:src/xeq.c     **** 
 7539              		.loc 1 779 2 is_stmt 1 view .LVU2047
 781:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7540              		.loc 1 781 2 view .LVU2048
 781:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7541              		.loc 1 781 12 view .LVU2049
 7542 001c 6236     		adds	r6, r6, #98
 7543              	.LVL520:
 7544              	.LBB1909:
 7545              	.LBB1906:
 708:src/xeq.c     **** 	return 8;
 7546              		.loc 1 708 10 is_stmt 0 view .LVU2050
 7547 001e 6424     		movs	r4, #100
 7548              	.LBE1906:
 7549              	.LBE1909:
 7550              	.LBB1910:
 7551              	.LBB1911:
 7552              	.LBB1912:
 7553              	.LBB1913:
1101:src/xeq.c     **** }
 7554              		.loc 1 1101 24 view .LVU2051
 7555 0020 44F20108 		movw	r8, #16385
 7556              	.LVL521:
 7557              	.L594:
1101:src/xeq.c     **** }
 7558              		.loc 1 1101 24 view .LVU2052
 7559              	.LBE1913:
 7560              	.LBE1912:
 7561              	.LBE1911:
 7562              	.LBE1910:
 782:src/xeq.c     **** }
 7563              		.loc 1 782 3 is_stmt 1 discriminator 3 view .LVU2053
 7564              	.LBB1920:
 7565              	.LBI1920:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7566              		.loc 1 712 11 discriminator 3 view .LVU2054
 7567              	.LBB1921:
 713:src/xeq.c     **** }
 7568              		.loc 1 713 2 discriminator 3 view .LVU2055
 713:src/xeq.c     **** }
 7569              		.loc 1 713 9 is_stmt 0 discriminator 3 view .LVU2056
 7570 0024 2046     		mov	r0, r4
 7571 0026 FFF7FEFF 		bl	get_reg_n
 7572              	.LVL522:
ARM GAS  /tmp/ccaPnj5t.s 			page 267


 7573 002a 0546     		mov	r5, r0
 7574              	.LBE1921:
 7575              	.LBE1920:
 7576              	.LBB1922:
 7577              	.LBB1923:
 7578 002c A01C     		adds	r0, r4, #2
 7579              	.LVL523:
 713:src/xeq.c     **** }
 7580              		.loc 1 713 9 discriminator 3 view .LVU2057
 7581              	.LBE1923:
 7582              	.LBI1922:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7583              		.loc 1 712 11 is_stmt 1 discriminator 3 view .LVU2058
 7584              	.LBB1924:
 713:src/xeq.c     **** }
 7585              		.loc 1 713 2 discriminator 3 view .LVU2059
 713:src/xeq.c     **** }
 7586              		.loc 1 713 9 is_stmt 0 discriminator 3 view .LVU2060
 7587 002e FFF7FEFF 		bl	get_reg_n
 7588              	.LVL524:
 713:src/xeq.c     **** }
 7589              		.loc 1 713 9 discriminator 3 view .LVU2061
 7590              	.LBE1924:
 7591              	.LBE1922:
 7592              	.LBB1926:
 7593              	.LBB1918:
 7594              	.LBB1916:
 7595              	.LBB1914:
1101:src/xeq.c     **** }
 7596              		.loc 1 1101 24 discriminator 3 view .LVU2062
 7597 0032 3B68     		ldr	r3, [r7]
 7598 0034 B3F8E837 		ldrh	r3, [r3, #2024]
 7599              	.LBE1914:
 7600              	.LBE1916:
 721:src/xeq.c     **** }
 7601              		.loc 1 721 2 discriminator 3 view .LVU2063
 7602 0038 08EA0303 		and	r3, r8, r3
 7603 003c B3F5804F 		cmp	r3, #16384
 7604              	.LBE1918:
 7605              	.LBE1926:
 7606              	.LBB1927:
 7607              	.LBB1925:
 713:src/xeq.c     **** }
 7608              		.loc 1 713 9 discriminator 3 view .LVU2064
 7609 0040 0146     		mov	r1, r0
 7610              	.LVL525:
 713:src/xeq.c     **** }
 7611              		.loc 1 713 9 discriminator 3 view .LVU2065
 7612              	.LBE1925:
 7613              	.LBE1927:
 7614              	.LBB1928:
 7615              	.LBI1910:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7616              		.loc 1 720 6 is_stmt 1 discriminator 3 view .LVU2066
 7617              	.LBB1919:
 721:src/xeq.c     **** }
 7618              		.loc 1 721 2 discriminator 3 view .LVU2067
ARM GAS  /tmp/ccaPnj5t.s 			page 268


 7619              	.LBB1917:
 7620              	.LBI1912:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7621              		.loc 1 1100 5 discriminator 3 view .LVU2068
 7622              	.LBB1915:
1101:src/xeq.c     **** }
 7623              		.loc 1 1101 2 discriminator 3 view .LVU2069
 7624              	.LBE1915:
 7625              	.LBE1917:
 721:src/xeq.c     **** }
 7626              		.loc 1 721 2 is_stmt 0 discriminator 3 view .LVU2070
 7627 0042 0CBF     		ite	eq
 7628 0044 1022     		moveq	r2, #16
 7629 0046 0822     		movne	r2, #8
 7630 0048 2846     		mov	r0, r5
 7631              	.LVL526:
 721:src/xeq.c     **** }
 7632              		.loc 1 721 2 discriminator 3 view .LVU2071
 7633 004a 0134     		adds	r4, r4, #1
 7634              	.LVL527:
 721:src/xeq.c     **** }
 7635              		.loc 1 721 2 discriminator 3 view .LVU2072
 7636 004c FFF7FEFF 		bl	xcopy
 7637              	.LVL528:
 721:src/xeq.c     **** }
 7638              		.loc 1 721 2 discriminator 3 view .LVU2073
 7639              	.LBE1919:
 7640              	.LBE1928:
 781:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7641              		.loc 1 781 17 is_stmt 1 discriminator 3 view .LVU2074
 781:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7642              		.loc 1 781 12 discriminator 3 view .LVU2075
 781:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7643              		.loc 1 781 2 is_stmt 0 discriminator 3 view .LVU2076
 7644 0050 B442     		cmp	r4, r6
 7645 0052 E7D1     		bne	.L594
 783:src/xeq.c     **** 
 7646              		.loc 1 783 1 view .LVU2077
 7647 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7648              	.LVL529:
 7649              	.L601:
 7650              	.LBB1929:
 7651              	.LBB1907:
 707:src/xeq.c     **** 		return 4;
 7652              		.loc 1 707 44 view .LVU2078
 7653 0058 054B     		ldr	r3, .L602+4
 707:src/xeq.c     **** 		return 4;
 7654              		.loc 1 707 41 view .LVU2079
 7655 005a 93F90130 		ldrsb	r3, [r3, #1]
 708:src/xeq.c     **** 	return 8;
 7656              		.loc 1 708 10 view .LVU2080
 7657 005e 002B     		cmp	r3, #0
 7658 0060 B4BF     		ite	lt
 7659 0062 0826     		movlt	r6, #8
 7660 0064 0426     		movge	r6, #4
 7661 0066 D9E7     		b	.L592
 7662              	.L595:
ARM GAS  /tmp/ccaPnj5t.s 			page 269


 7663 0068 0426     		movs	r6, #4
 7664 006a D7E7     		b	.L592
 7665              	.L603:
 7666              		.align	2
 7667              	.L602:
 7668 006c 00000000 		.word	main_ram
 7669 0070 00000000 		.word	XromParams
 7670              	.LBE1907:
 7671              	.LBE1929:
 7672              		.cfi_endproc
 7673              	.LFE54:
 7675              		.section	.text.drop,"ax",%progbits
 7676              		.align	1
 7677              		.p2align 2,,3
 7678              		.global	drop
 7679              		.syntax unified
 7680              		.thumb
 7681              		.thumb_func
 7682              		.fpu fpv4-sp-d16
 7684              	drop:
 7685              	.LVL530:
 7686              	.LFB80:
1086:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7687              		.loc 1 1086 26 is_stmt 1 view -0
 7688              		.cfi_startproc
 7689              		@ args = 0, pretend = 0, frame = 0
 7690              		@ frame_needed = 0, uses_anonymous_args = 0
1087:src/xeq.c     **** 		lower2();
 7691              		.loc 1 1087 2 view .LVU2082
1087:src/xeq.c     **** 		lower2();
 7692              		.loc 1 1087 5 is_stmt 0 view .LVU2083
 7693 0000 0F28     		cmp	r0, #15
 7694 0002 01D0     		beq	.L611
1091:src/xeq.c     **** }
 7695              		.loc 1 1091 3 is_stmt 1 view .LVU2084
 7696 0004 FFF7FEBF 		b	lower
 7697              	.LVL531:
 7698              	.L611:
1088:src/xeq.c     **** 		set_was_complex();
 7699              		.loc 1 1088 3 view .LVU2085
1086:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7700              		.loc 1 1086 26 is_stmt 0 view .LVU2086
 7701 0008 08B5     		push	{r3, lr}
 7702              		.cfi_def_cfa_offset 8
 7703              		.cfi_offset 3, -8
 7704              		.cfi_offset 14, -4
1088:src/xeq.c     **** 		set_was_complex();
 7705              		.loc 1 1088 3 view .LVU2087
 7706 000a FFF7FEFF 		bl	lower2
 7707              	.LVL532:
1089:src/xeq.c     **** 	} else
 7708              		.loc 1 1089 3 is_stmt 1 view .LVU2088
 7709              	.LBB1930:
 7710              	.LBI1930:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 7711              		.loc 1 533 13 view .LVU2089
 7712              	.LBB1931:
ARM GAS  /tmp/ccaPnj5t.s 			page 270


 534:src/xeq.c     **** }
 7713              		.loc 1 534 2 view .LVU2090
 534:src/xeq.c     **** }
 7714              		.loc 1 534 20 is_stmt 0 view .LVU2091
 7715 000e 034B     		ldr	r3, .L612
 7716 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7717 0012 0121     		movs	r1, #1
 7718 0014 61F38712 		bfi	r2, r1, #6, #2
 7719 0018 1A75     		strb	r2, [r3, #20]
 7720              	.LBE1931:
 7721              	.LBE1930:
1092:src/xeq.c     **** 
 7722              		.loc 1 1092 1 view .LVU2092
 7723 001a 08BD     		pop	{r3, pc}
 7724              	.L613:
 7725              		.align	2
 7726              	.L612:
 7727 001c 00000000 		.word	StateWhileOn
 7728              		.cfi_endproc
 7729              	.LFE80:
 7731              		.section	.text.copyreg_n,"ax",%progbits
 7732              		.align	1
 7733              		.p2align 2,,3
 7734              		.global	copyreg_n
 7735              		.syntax unified
 7736              		.thumb
 7737              		.thumb_func
 7738              		.fpu fpv4-sp-d16
 7740              	copyreg_n:
 7741              	.LVL533:
 7742              	.LFB46:
 724:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7743              		.loc 1 724 30 is_stmt 1 view -0
 7744              		.cfi_startproc
 7745              		@ args = 0, pretend = 0, frame = 0
 7746              		@ frame_needed = 0, uses_anonymous_args = 0
 725:src/xeq.c     **** }
 7747              		.loc 1 725 2 view .LVU2094
 724:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7748              		.loc 1 724 30 is_stmt 0 view .LVU2095
 7749 0000 38B5     		push	{r3, r4, r5, lr}
 7750              		.cfi_def_cfa_offset 16
 7751              		.cfi_offset 3, -16
 7752              		.cfi_offset 4, -12
 7753              		.cfi_offset 5, -8
 7754              		.cfi_offset 14, -4
 724:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7755              		.loc 1 724 30 view .LVU2096
 7756 0002 0D46     		mov	r5, r1
 725:src/xeq.c     **** }
 7757              		.loc 1 725 2 view .LVU2097
 7758 0004 FFF7FEFF 		bl	get_reg_n
 7759              	.LVL534:
 725:src/xeq.c     **** }
 7760              		.loc 1 725 2 view .LVU2098
 7761 0008 0446     		mov	r4, r0
 725:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 271


 7762              		.loc 1 725 24 view .LVU2099
 7763 000a 2846     		mov	r0, r5
 7764 000c FFF7FEFF 		bl	get_reg_n
 7765              	.LVL535:
 7766              	.LBB1932:
 7767              	.LBB1933:
 7768              	.LBB1934:
 7769              	.LBB1935:
1101:src/xeq.c     **** }
 7770              		.loc 1 1101 24 view .LVU2100
 7771 0010 094B     		ldr	r3, .L618
 7772 0012 1B68     		ldr	r3, [r3]
 7773 0014 B3F8E827 		ldrh	r2, [r3, #2024]
 7774 0018 44F20103 		movw	r3, #16385
 7775              	.LBE1935:
 7776              	.LBE1934:
 721:src/xeq.c     **** }
 7777              		.loc 1 721 2 view .LVU2101
 7778 001c 1340     		ands	r3, r3, r2
 7779 001e B3F5804F 		cmp	r3, #16384
 7780              	.LBE1933:
 7781              	.LBE1932:
 725:src/xeq.c     **** }
 7782              		.loc 1 725 24 view .LVU2102
 7783 0022 0146     		mov	r1, r0
 7784              	.LVL536:
 7785              	.LBB1940:
 7786              	.LBI1932:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7787              		.loc 1 720 6 is_stmt 1 view .LVU2103
 7788              	.LBB1938:
 721:src/xeq.c     **** }
 7789              		.loc 1 721 2 view .LVU2104
 7790              	.LBB1937:
 7791              	.LBI1934:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7792              		.loc 1 1100 5 view .LVU2105
 7793              	.LBB1936:
1101:src/xeq.c     **** }
 7794              		.loc 1 1101 2 view .LVU2106
 7795              	.LBE1936:
 7796              	.LBE1937:
 721:src/xeq.c     **** }
 7797              		.loc 1 721 2 is_stmt 0 view .LVU2107
 7798 0024 08BF     		it	eq
 7799 0026 1022     		moveq	r2, #16
 7800 0028 2046     		mov	r0, r4
 7801              	.LVL537:
 721:src/xeq.c     **** }
 7802              		.loc 1 721 2 view .LVU2108
 7803 002a 18BF     		it	ne
 7804 002c 0822     		movne	r2, #8
 7805              	.LBE1938:
 7806              	.LBE1940:
 726:src/xeq.c     **** 
 7807              		.loc 1 726 1 view .LVU2109
 7808 002e BDE83840 		pop	{r3, r4, r5, lr}
ARM GAS  /tmp/ccaPnj5t.s 			page 272


 7809              		.cfi_restore 14
 7810              		.cfi_restore 5
 7811              		.cfi_restore 4
 7812              		.cfi_restore 3
 7813              		.cfi_def_cfa_offset 0
 7814              	.LVL538:
 7815              	.LBB1941:
 7816              	.LBB1939:
 721:src/xeq.c     **** }
 7817              		.loc 1 721 2 view .LVU2110
 7818 0032 FFF7FEBF 		b	xcopy
 7819              	.LVL539:
 7820              	.L619:
 721:src/xeq.c     **** }
 7821              		.loc 1 721 2 view .LVU2111
 7822 0036 00BF     		.align	2
 7823              	.L618:
 7824 0038 00000000 		.word	main_ram
 7825              	.LBE1939:
 7826              	.LBE1941:
 7827              		.cfi_endproc
 7828              	.LFE46:
 7830              		.section	.text.setlastX,"ax",%progbits
 7831              		.align	1
 7832              		.p2align 2,,3
 7833              		.global	setlastX
 7834              		.syntax unified
 7835              		.thumb
 7836              		.thumb_func
 7837              		.fpu fpv4-sp-d16
 7839              	setlastX:
 7840              	.LFB55:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7841              		.loc 1 786 21 is_stmt 1 view -0
 7842              		.cfi_startproc
 7843              		@ args = 0, pretend = 0, frame = 0
 7844              		@ frame_needed = 0, uses_anonymous_args = 0
 7845              		@ link register save eliminated.
 787:src/xeq.c     **** }
 7846              		.loc 1 787 2 view .LVU2113
 7847 0000 6421     		movs	r1, #100
 7848 0002 6C20     		movs	r0, #108
 7849 0004 FFF7FEBF 		b	copyreg_n
 7850              	.LVL540:
 7851              		.cfi_endproc
 7852              	.LFE55:
 7854              		.section	.text.setlastXY,"ax",%progbits
 7855              		.align	1
 7856              		.p2align 2,,3
 7857              		.syntax unified
 7858              		.thumb
 7859              		.thumb_func
 7860              		.fpu fpv4-sp-d16
 7862              	setlastXY:
 7863              	.LFB56:
 790:src/xeq.c     **** 	setlastX();
 7864              		.loc 1 790 29 view -0
ARM GAS  /tmp/ccaPnj5t.s 			page 273


 7865              		.cfi_startproc
 7866              		@ args = 0, pretend = 0, frame = 0
 7867              		@ frame_needed = 0, uses_anonymous_args = 0
 791:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 7868              		.loc 1 791 2 view .LVU2115
 7869              	.LBB1942:
 7870              	.LBI1942:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7871              		.loc 1 786 6 view .LVU2116
 7872              	.LBB1943:
 787:src/xeq.c     **** }
 7873              		.loc 1 787 2 view .LVU2117
 7874              	.LBE1943:
 7875              	.LBE1942:
 790:src/xeq.c     **** 	setlastX();
 7876              		.loc 1 790 29 is_stmt 0 view .LVU2118
 7877 0000 08B5     		push	{r3, lr}
 7878              		.cfi_def_cfa_offset 8
 7879              		.cfi_offset 3, -8
 7880              		.cfi_offset 14, -4
 7881              	.LBB1945:
 7882              	.LBB1944:
 787:src/xeq.c     **** }
 7883              		.loc 1 787 2 view .LVU2119
 7884 0002 6421     		movs	r1, #100
 7885 0004 6C20     		movs	r0, #108
 7886 0006 FFF7FEFF 		bl	copyreg_n
 7887              	.LVL541:
 7888              	.LBE1944:
 7889              	.LBE1945:
 792:src/xeq.c     **** }
 7890              		.loc 1 792 2 is_stmt 1 view .LVU2120
 793:src/xeq.c     **** 
 7891              		.loc 1 793 1 is_stmt 0 view .LVU2121
 7892 000a BDE80840 		pop	{r3, lr}
 7893              		.cfi_restore 14
 7894              		.cfi_restore 3
 7895              		.cfi_def_cfa_offset 0
 792:src/xeq.c     **** }
 7896              		.loc 1 792 2 view .LVU2122
 7897 000e 6521     		movs	r1, #101
 7898 0010 6D20     		movs	r0, #109
 7899 0012 FFF7FEBF 		b	copyreg_n
 7900              	.LVL542:
 7901              		.cfi_endproc
 7902              	.LFE56:
 7904 0016 00BF     		.section	.text.getRegister,"ax",%progbits
 7905              		.align	1
 7906              		.p2align 2,,3
 7907              		.global	getRegister
 7908              		.syntax unified
 7909              		.thumb
 7910              		.thumb_func
 7911              		.fpu fpv4-sp-d16
 7913              	getRegister:
 7914              	.LVL543:
 7915              	.LFB57:
ARM GAS  /tmp/ccaPnj5t.s 			page 274


 796:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7916              		.loc 1 796 49 is_stmt 1 view -0
 7917              		.cfi_startproc
 7918              		@ args = 0, pretend = 0, frame = 0
 7919              		@ frame_needed = 0, uses_anonymous_args = 0
 797:src/xeq.c     **** 	if (is_dblmode())
 7920              		.loc 1 797 2 view .LVU2124
 796:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7921              		.loc 1 796 49 is_stmt 0 view .LVU2125
 7922 0000 10B5     		push	{r4, lr}
 7923              		.cfi_def_cfa_offset 8
 7924              		.cfi_offset 4, -8
 7925              		.cfi_offset 14, -4
 796:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7926              		.loc 1 796 49 view .LVU2126
 7927 0002 0446     		mov	r4, r0
 797:src/xeq.c     **** 	if (is_dblmode())
 7928              		.loc 1 797 30 view .LVU2127
 7929 0004 0846     		mov	r0, r1
 7930              	.LVL544:
 797:src/xeq.c     **** 	if (is_dblmode())
 7931              		.loc 1 797 30 view .LVU2128
 7932 0006 FFF7FEFF 		bl	get_reg_n
 7933              	.LVL545:
 798:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7934              		.loc 1 798 2 is_stmt 1 view .LVU2129
 7935              	.LBB1946:
 7936              	.LBI1946:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7937              		.loc 1 1100 5 view .LVU2130
 7938              	.LBB1947:
1101:src/xeq.c     **** }
 7939              		.loc 1 1101 2 view .LVU2131
1101:src/xeq.c     **** }
 7940              		.loc 1 1101 24 is_stmt 0 view .LVU2132
 7941 000a 094B     		ldr	r3, .L628
 7942 000c 1B68     		ldr	r3, [r3]
 7943 000e B3F8E827 		ldrh	r2, [r3, #2024]
 7944 0012 44F20103 		movw	r3, #16385
 7945              	.LBE1947:
 7946              	.LBE1946:
 798:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7947              		.loc 1 798 5 view .LVU2133
 7948 0016 1340     		ands	r3, r3, r2
 7949 0018 B3F5804F 		cmp	r3, #16384
 799:src/xeq.c     **** 	else
 7950              		.loc 1 799 3 view .LVU2134
 7951 001c 2146     		mov	r1, r4
 798:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7952              		.loc 1 798 5 view .LVU2135
 7953 001e 03D0     		beq	.L627
 801:src/xeq.c     **** 	return r;
 7954              		.loc 1 801 3 is_stmt 1 view .LVU2136
 7955 0020 FFF7FEFF 		bl	decimal64ToNumber
 7956              	.LVL546:
 802:src/xeq.c     **** }
 7957              		.loc 1 802 2 view .LVU2137
ARM GAS  /tmp/ccaPnj5t.s 			page 275


 803:src/xeq.c     **** 
 7958              		.loc 1 803 1 is_stmt 0 view .LVU2138
 7959 0024 2046     		mov	r0, r4
 7960 0026 10BD     		pop	{r4, pc}
 7961              	.LVL547:
 7962              	.L627:
 799:src/xeq.c     **** 	else
 7963              		.loc 1 799 3 is_stmt 1 view .LVU2139
 7964 0028 FFF7FEFF 		bl	decimal128ToNumber
 7965              	.LVL548:
 802:src/xeq.c     **** }
 7966              		.loc 1 802 2 view .LVU2140
 803:src/xeq.c     **** 
 7967              		.loc 1 803 1 is_stmt 0 view .LVU2141
 7968 002c 2046     		mov	r0, r4
 7969 002e 10BD     		pop	{r4, pc}
 7970              	.LVL549:
 7971              	.L629:
 803:src/xeq.c     **** 
 7972              		.loc 1 803 1 view .LVU2142
 7973              		.align	2
 7974              	.L628:
 7975 0030 00000000 		.word	main_ram
 7976              		.cfi_endproc
 7977              	.LFE57:
 7979              		.section	.text.getX,"ax",%progbits
 7980              		.align	1
 7981              		.p2align 2,,3
 7982              		.global	getX
 7983              		.syntax unified
 7984              		.thumb
 7985              		.thumb_func
 7986              		.fpu fpv4-sp-d16
 7988              	getX:
 7989              	.LVL550:
 7990              	.LFB59:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 7991              		.loc 1 818 31 is_stmt 1 view -0
 7992              		.cfi_startproc
 7993              		@ args = 0, pretend = 0, frame = 0
 7994              		@ frame_needed = 0, uses_anonymous_args = 0
 7995              		@ link register save eliminated.
 819:src/xeq.c     **** }
 7996              		.loc 1 819 2 view .LVU2144
 819:src/xeq.c     **** }
 7997              		.loc 1 819 9 is_stmt 0 view .LVU2145
 7998 0000 6421     		movs	r1, #100
 7999 0002 FFF7FEBF 		b	getRegister
 8000              	.LVL551:
 819:src/xeq.c     **** }
 8001              		.loc 1 819 9 view .LVU2146
 8002              		.cfi_endproc
 8003              	.LFE59:
 8005 0006 00BF     		.section	.text.getY,"ax",%progbits
 8006              		.align	1
 8007              		.p2align 2,,3
 8008              		.global	getY
ARM GAS  /tmp/ccaPnj5t.s 			page 276


 8009              		.syntax unified
 8010              		.thumb
 8011              		.thumb_func
 8012              		.fpu fpv4-sp-d16
 8014              	getY:
 8015              	.LVL552:
 8016              	.LFB61:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 8017              		.loc 1 826 25 is_stmt 1 view -0
 8018              		.cfi_startproc
 8019              		@ args = 0, pretend = 0, frame = 0
 8020              		@ frame_needed = 0, uses_anonymous_args = 0
 8021              		@ link register save eliminated.
 827:src/xeq.c     **** }
 8022              		.loc 1 827 2 view .LVU2148
 8023 0000 6521     		movs	r1, #101
 8024 0002 FFF7FEBF 		b	getRegister
 8025              	.LVL553:
 827:src/xeq.c     **** }
 8026              		.loc 1 827 2 is_stmt 0 view .LVU2149
 8027              		.cfi_endproc
 8028              	.LFE61:
 8030 0006 00BF     		.section	.text.getXY,"ax",%progbits
 8031              		.align	1
 8032              		.p2align 2,,3
 8033              		.global	getXY
 8034              		.syntax unified
 8035              		.thumb
 8036              		.thumb_func
 8037              		.fpu fpv4-sp-d16
 8039              	getXY:
 8040              	.LVL554:
 8041              	.LFB65:
 848:src/xeq.c     **** 	getX(x);
 8042              		.loc 1 848 40 is_stmt 1 view -0
 8043              		.cfi_startproc
 8044              		@ args = 0, pretend = 0, frame = 0
 8045              		@ frame_needed = 0, uses_anonymous_args = 0
 849:src/xeq.c     **** 	getY(y);
 8046              		.loc 1 849 2 view .LVU2151
 8047              	.LBB1948:
 8048              	.LBI1948:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8049              		.loc 1 818 12 view .LVU2152
 8050              	.LBB1949:
 819:src/xeq.c     **** }
 8051              		.loc 1 819 2 view .LVU2153
 8052              	.LBE1949:
 8053              	.LBE1948:
 848:src/xeq.c     **** 	getX(x);
 8054              		.loc 1 848 40 is_stmt 0 view .LVU2154
 8055 0000 10B5     		push	{r4, lr}
 8056              		.cfi_def_cfa_offset 8
 8057              		.cfi_offset 4, -8
 8058              		.cfi_offset 14, -4
 848:src/xeq.c     **** 	getX(x);
 8059              		.loc 1 848 40 view .LVU2155
ARM GAS  /tmp/ccaPnj5t.s 			page 277


 8060 0002 0C46     		mov	r4, r1
 8061              	.LBB1951:
 8062              	.LBB1950:
 819:src/xeq.c     **** }
 8063              		.loc 1 819 9 view .LVU2156
 8064 0004 6421     		movs	r1, #100
 8065              	.LVL555:
 819:src/xeq.c     **** }
 8066              		.loc 1 819 9 view .LVU2157
 8067 0006 FFF7FEFF 		bl	getRegister
 8068              	.LVL556:
 819:src/xeq.c     **** }
 8069              		.loc 1 819 9 view .LVU2158
 8070              	.LBE1950:
 8071              	.LBE1951:
 850:src/xeq.c     **** }
 8072              		.loc 1 850 2 is_stmt 1 view .LVU2159
 8073              	.LBB1952:
 8074              	.LBI1952:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 8075              		.loc 1 826 6 view .LVU2160
 8076              	.LBB1953:
 827:src/xeq.c     **** }
 8077              		.loc 1 827 2 view .LVU2161
 8078 000a 2046     		mov	r0, r4
 8079 000c 6521     		movs	r1, #101
 8080              	.LBE1953:
 8081              	.LBE1952:
 851:src/xeq.c     **** 
 8082              		.loc 1 851 1 is_stmt 0 view .LVU2162
 8083 000e BDE81040 		pop	{r4, lr}
 8084              		.cfi_restore 14
 8085              		.cfi_restore 4
 8086              		.cfi_def_cfa_offset 0
 8087              	.LVL557:
 8088              	.LBB1955:
 8089              	.LBB1954:
 827:src/xeq.c     **** }
 8090              		.loc 1 827 2 view .LVU2163
 8091 0012 FFF7FEBF 		b	getRegister
 8092              	.LVL558:
 827:src/xeq.c     **** }
 8093              		.loc 1 827 2 view .LVU2164
 8094              	.LBE1954:
 8095              	.LBE1955:
 8096              		.cfi_endproc
 8097              	.LFE65:
 8099 0016 00BF     		.section	.text.getXYZ,"ax",%progbits
 8100              		.align	1
 8101              		.p2align 2,,3
 8102              		.global	getXYZ
 8103              		.syntax unified
 8104              		.thumb
 8105              		.thumb_func
 8106              		.fpu fpv4-sp-d16
 8108              	getXYZ:
 8109              	.LVL559:
ARM GAS  /tmp/ccaPnj5t.s 			page 278


 8110              	.LFB67:
 861:src/xeq.c     **** 	getXY(x, y);
 8111              		.loc 1 861 55 is_stmt 1 view -0
 8112              		.cfi_startproc
 8113              		@ args = 0, pretend = 0, frame = 0
 8114              		@ frame_needed = 0, uses_anonymous_args = 0
 862:src/xeq.c     **** 	getZ(z);
 8115              		.loc 1 862 2 view .LVU2166
 861:src/xeq.c     **** 	getXY(x, y);
 8116              		.loc 1 861 55 is_stmt 0 view .LVU2167
 8117 0000 38B5     		push	{r3, r4, r5, lr}
 8118              		.cfi_def_cfa_offset 16
 8119              		.cfi_offset 3, -16
 8120              		.cfi_offset 4, -12
 8121              		.cfi_offset 5, -8
 8122              		.cfi_offset 14, -4
 861:src/xeq.c     **** 	getXY(x, y);
 8123              		.loc 1 861 55 view .LVU2168
 8124 0002 0D46     		mov	r5, r1
 8125              	.LVL560:
 8126              	.LBB1956:
 8127              	.LBI1956:
 848:src/xeq.c     **** 	getX(x);
 8128              		.loc 1 848 6 is_stmt 1 view .LVU2169
 8129              	.LBE1956:
 849:src/xeq.c     **** 	getY(y);
 8130              		.loc 1 849 2 view .LVU2170
 8131              	.LBB1963:
 8132              	.LBB1957:
 8133              	.LBI1957:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8134              		.loc 1 818 12 view .LVU2171
 8135              	.LBB1958:
 819:src/xeq.c     **** }
 8136              		.loc 1 819 2 view .LVU2172
 819:src/xeq.c     **** }
 8137              		.loc 1 819 9 is_stmt 0 view .LVU2173
 8138 0004 6421     		movs	r1, #100
 8139              	.LVL561:
 819:src/xeq.c     **** }
 8140              		.loc 1 819 9 view .LVU2174
 8141              	.LBE1958:
 8142              	.LBE1957:
 8143              	.LBE1963:
 861:src/xeq.c     **** 	getXY(x, y);
 8144              		.loc 1 861 55 view .LVU2175
 8145 0006 1446     		mov	r4, r2
 8146              	.LBB1964:
 8147              	.LBB1960:
 8148              	.LBB1959:
 819:src/xeq.c     **** }
 8149              		.loc 1 819 9 view .LVU2176
 8150 0008 FFF7FEFF 		bl	getRegister
 8151              	.LVL562:
 819:src/xeq.c     **** }
 8152              		.loc 1 819 9 view .LVU2177
 8153              	.LBE1959:
ARM GAS  /tmp/ccaPnj5t.s 			page 279


 8154              	.LBE1960:
 8155              	.LBE1964:
 850:src/xeq.c     **** }
 8156              		.loc 1 850 2 is_stmt 1 view .LVU2178
 8157              	.LBB1965:
 8158              	.LBB1961:
 8159              	.LBI1961:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 8160              		.loc 1 826 6 view .LVU2179
 8161              	.LBB1962:
 827:src/xeq.c     **** }
 8162              		.loc 1 827 2 view .LVU2180
 8163 000c 2846     		mov	r0, r5
 8164 000e 6521     		movs	r1, #101
 8165 0010 FFF7FEFF 		bl	getRegister
 8166              	.LVL563:
 827:src/xeq.c     **** }
 8167              		.loc 1 827 2 is_stmt 0 view .LVU2181
 8168              	.LBE1962:
 8169              	.LBE1961:
 8170              	.LBE1965:
 863:src/xeq.c     **** }
 8171              		.loc 1 863 2 is_stmt 1 view .LVU2182
 8172              	.LBB1966:
 8173              	.LBI1966:
 834:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8174              		.loc 1 834 13 view .LVU2183
 8175              	.LBB1967:
 835:src/xeq.c     **** }
 8176              		.loc 1 835 2 view .LVU2184
 8177 0014 2046     		mov	r0, r4
 8178 0016 6621     		movs	r1, #102
 8179              	.LBE1967:
 8180              	.LBE1966:
 864:src/xeq.c     **** 
 8181              		.loc 1 864 1 is_stmt 0 view .LVU2185
 8182 0018 BDE83840 		pop	{r3, r4, r5, lr}
 8183              		.cfi_restore 14
 8184              		.cfi_restore 5
 8185              		.cfi_restore 4
 8186              		.cfi_restore 3
 8187              		.cfi_def_cfa_offset 0
 8188              	.LVL564:
 8189              	.LBB1969:
 8190              	.LBB1968:
 835:src/xeq.c     **** }
 8191              		.loc 1 835 2 view .LVU2186
 8192 001c FFF7FEBF 		b	getRegister
 8193              	.LVL565:
 835:src/xeq.c     **** }
 8194              		.loc 1 835 2 view .LVU2187
 8195              	.LBE1968:
 8196              	.LBE1969:
 8197              		.cfi_endproc
 8198              	.LFE67:
 8200              		.section	.text.getYZ,"ax",%progbits
 8201              		.align	1
ARM GAS  /tmp/ccaPnj5t.s 			page 280


 8202              		.p2align 2,,3
 8203              		.global	getYZ
 8204              		.syntax unified
 8205              		.thumb
 8206              		.thumb_func
 8207              		.fpu fpv4-sp-d16
 8209              	getYZ:
 8210              	.LVL566:
 8211              	.LFB69:
 878:src/xeq.c     **** 	getY(y);
 8212              		.loc 1 878 40 is_stmt 1 view -0
 8213              		.cfi_startproc
 8214              		@ args = 0, pretend = 0, frame = 0
 8215              		@ frame_needed = 0, uses_anonymous_args = 0
 879:src/xeq.c     **** 	getZ(z);
 8216              		.loc 1 879 2 view .LVU2189
 8217              	.LBB1970:
 8218              	.LBI1970:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 8219              		.loc 1 826 6 view .LVU2190
 8220              	.LBB1971:
 827:src/xeq.c     **** }
 8221              		.loc 1 827 2 view .LVU2191
 8222              	.LBE1971:
 8223              	.LBE1970:
 878:src/xeq.c     **** 	getY(y);
 8224              		.loc 1 878 40 is_stmt 0 view .LVU2192
 8225 0000 10B5     		push	{r4, lr}
 8226              		.cfi_def_cfa_offset 8
 8227              		.cfi_offset 4, -8
 8228              		.cfi_offset 14, -4
 878:src/xeq.c     **** 	getY(y);
 8229              		.loc 1 878 40 view .LVU2193
 8230 0002 0C46     		mov	r4, r1
 8231              	.LBB1973:
 8232              	.LBB1972:
 827:src/xeq.c     **** }
 8233              		.loc 1 827 2 view .LVU2194
 8234 0004 6521     		movs	r1, #101
 8235              	.LVL567:
 827:src/xeq.c     **** }
 8236              		.loc 1 827 2 view .LVU2195
 8237 0006 FFF7FEFF 		bl	getRegister
 8238              	.LVL568:
 827:src/xeq.c     **** }
 8239              		.loc 1 827 2 view .LVU2196
 8240              	.LBE1972:
 8241              	.LBE1973:
 880:src/xeq.c     **** }
 8242              		.loc 1 880 2 is_stmt 1 view .LVU2197
 8243              	.LBB1974:
 8244              	.LBI1974:
 834:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8245              		.loc 1 834 13 view .LVU2198
 8246              	.LBB1975:
 835:src/xeq.c     **** }
 8247              		.loc 1 835 2 view .LVU2199
ARM GAS  /tmp/ccaPnj5t.s 			page 281


 8248 000a 2046     		mov	r0, r4
 8249 000c 6621     		movs	r1, #102
 8250              	.LBE1975:
 8251              	.LBE1974:
 881:src/xeq.c     **** 
 8252              		.loc 1 881 1 is_stmt 0 view .LVU2200
 8253 000e BDE81040 		pop	{r4, lr}
 8254              		.cfi_restore 14
 8255              		.cfi_restore 4
 8256              		.cfi_def_cfa_offset 0
 8257              	.LVL569:
 8258              	.LBB1977:
 8259              	.LBB1976:
 835:src/xeq.c     **** }
 8260              		.loc 1 835 2 view .LVU2201
 8261 0012 FFF7FEBF 		b	getRegister
 8262              	.LVL570:
 835:src/xeq.c     **** }
 8263              		.loc 1 835 2 view .LVU2202
 8264              	.LBE1976:
 8265              	.LBE1977:
 8266              		.cfi_endproc
 8267              	.LFE69:
 8269 0016 00BF     		.section	.text.getXYZT,"ax",%progbits
 8270              		.align	1
 8271              		.p2align 2,,3
 8272              		.global	getXYZT
 8273              		.syntax unified
 8274              		.thumb
 8275              		.thumb_func
 8276              		.fpu fpv4-sp-d16
 8278              	getXYZT:
 8279              	.LVL571:
 8280              	.LFB68:
 873:src/xeq.c     **** 	getXYZ(x, y, z);
 8281              		.loc 1 873 70 is_stmt 1 view -0
 8282              		.cfi_startproc
 8283              		@ args = 0, pretend = 0, frame = 0
 8284              		@ frame_needed = 0, uses_anonymous_args = 0
 874:src/xeq.c     **** 	getT(t);
 8285              		.loc 1 874 2 view .LVU2204
 873:src/xeq.c     **** 	getXYZ(x, y, z);
 8286              		.loc 1 873 70 is_stmt 0 view .LVU2205
 8287 0000 10B5     		push	{r4, lr}
 8288              		.cfi_def_cfa_offset 8
 8289              		.cfi_offset 4, -8
 8290              		.cfi_offset 14, -4
 873:src/xeq.c     **** 	getXYZ(x, y, z);
 8291              		.loc 1 873 70 view .LVU2206
 8292 0002 1C46     		mov	r4, r3
 874:src/xeq.c     **** 	getT(t);
 8293              		.loc 1 874 2 view .LVU2207
 8294 0004 FFF7FEFF 		bl	getXYZ
 8295              	.LVL572:
 875:src/xeq.c     **** }
 8296              		.loc 1 875 2 is_stmt 1 view .LVU2208
 8297              	.LBB1978:
ARM GAS  /tmp/ccaPnj5t.s 			page 282


 8298              	.LBI1978:
 844:src/xeq.c     **** 	getRegister(t, regT_idx);
 8299              		.loc 1 844 13 view .LVU2209
 8300              	.LBB1979:
 845:src/xeq.c     **** }
 8301              		.loc 1 845 2 view .LVU2210
 8302 0008 2046     		mov	r0, r4
 8303 000a 6721     		movs	r1, #103
 8304              	.LBE1979:
 8305              	.LBE1978:
 876:src/xeq.c     **** 
 8306              		.loc 1 876 1 is_stmt 0 view .LVU2211
 8307 000c BDE81040 		pop	{r4, lr}
 8308              		.cfi_restore 14
 8309              		.cfi_restore 4
 8310              		.cfi_def_cfa_offset 0
 8311              	.LVL573:
 8312              	.LBB1981:
 8313              	.LBB1980:
 845:src/xeq.c     **** }
 8314              		.loc 1 845 2 view .LVU2212
 8315 0010 FFF7FEBF 		b	getRegister
 8316              	.LVL574:
 845:src/xeq.c     **** }
 8317              		.loc 1 845 2 view .LVU2213
 8318              	.LBE1980:
 8319              	.LBE1981:
 8320              		.cfi_endproc
 8321              	.LFE68:
 8323              		.section	.text.storcl_op,"ax",%progbits
 8324              		.align	1
 8325              		.p2align 2,,3
 8326              		.syntax unified
 8327              		.thumb
 8328              		.thumb_func
 8329              		.fpu fpv4-sp-d16
 8331              	storcl_op:
 8332              	.LVL575:
 8333              	.LFB114:
1632:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8334              		.loc 1 1632 76 is_stmt 1 view -0
 8335              		.cfi_startproc
 8336              		@ args = 0, pretend = 0, frame = 72
 8337              		@ frame_needed = 0, uses_anonymous_args = 0
1633:src/xeq.c     **** 
 8338              		.loc 1 1633 2 view .LVU2215
1632:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8339              		.loc 1 1632 76 is_stmt 0 view .LVU2216
 8340 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8341              		.cfi_def_cfa_offset 20
 8342              		.cfi_offset 4, -20
 8343              		.cfi_offset 5, -16
 8344              		.cfi_offset 6, -12
 8345              		.cfi_offset 7, -8
 8346              		.cfi_offset 14, -4
 8347 0002 93B0     		sub	sp, sp, #76
 8348              		.cfi_def_cfa_offset 96
ARM GAS  /tmp/ccaPnj5t.s 			page 283


 8349              	.LVL576:
1635:src/xeq.c     **** 	getRegister(y, index);
 8350              		.loc 1 1635 2 is_stmt 1 view .LVU2217
 8351              	.LBB1982:
 8352              	.LBI1982:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8353              		.loc 1 818 12 view .LVU2218
 8354              	.LBB1983:
 819:src/xeq.c     **** }
 8355              		.loc 1 819 2 view .LVU2219
 8356              	.LBE1983:
 8357              	.LBE1982:
1632:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8358              		.loc 1 1632 76 is_stmt 0 view .LVU2220
 8359 0004 0E46     		mov	r6, r1
 8360 0006 0446     		mov	r4, r0
 8361              	.LBB1986:
 8362              	.LBB1984:
 819:src/xeq.c     **** }
 8363              		.loc 1 819 9 view .LVU2221
 8364 0008 6421     		movs	r1, #100
 8365              	.LVL577:
 819:src/xeq.c     **** }
 8366              		.loc 1 819 9 view .LVU2222
 8367 000a 6846     		mov	r0, sp
 8368              	.LVL578:
 819:src/xeq.c     **** }
 8369              		.loc 1 819 9 view .LVU2223
 8370              	.LBE1984:
 8371              	.LBE1986:
1632:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8372              		.loc 1 1632 76 view .LVU2224
 8373 000c 1D46     		mov	r5, r3
 8374 000e 1746     		mov	r7, r2
 8375              	.LBB1987:
 8376              	.LBB1985:
 819:src/xeq.c     **** }
 8377              		.loc 1 819 9 view .LVU2225
 8378 0010 FFF7FEFF 		bl	getRegister
 8379              	.LVL579:
 819:src/xeq.c     **** }
 8380              		.loc 1 819 9 view .LVU2226
 8381              	.LBE1985:
 8382              	.LBE1987:
1636:src/xeq.c     **** 	if (rev) {
 8383              		.loc 1 1636 2 is_stmt 1 view .LVU2227
 8384 0014 3146     		mov	r1, r6
 8385 0016 09A8     		add	r0, sp, #36
 8386              	.LVL580:
1636:src/xeq.c     **** 	if (rev) {
 8387              		.loc 1 1636 2 is_stmt 0 view .LVU2228
 8388 0018 FFF7FEFF 		bl	getRegister
 8389              	.LVL581:
1637:src/xeq.c     **** 		x = y;
 8390              		.loc 1 1637 2 is_stmt 1 view .LVU2229
1637:src/xeq.c     **** 		x = y;
 8391              		.loc 1 1637 5 is_stmt 0 view .LVU2230
ARM GAS  /tmp/ccaPnj5t.s 			page 284


 8392 001c 4DB1     		cbz	r5, .L650
1639:src/xeq.c     **** 	}
 8393              		.loc 1 1639 5 view .LVU2231
 8394 001e 6946     		mov	r1, sp
1638:src/xeq.c     **** 		y = &a;
 8395              		.loc 1 1638 5 view .LVU2232
 8396 0020 09AA     		add	r2, sp, #36
 8397              	.LVL582:
 8398              	.L641:
1642:src/xeq.c     **** 	case 1:
 8399              		.loc 1 1642 2 is_stmt 1 view .LVU2233
 8400 0022 601E     		subs	r0, r4, #1
 8401 0024 0528     		cmp	r0, #5
 8402 0026 2BD8     		bhi	.L651
 8403 0028 DFE800F0 		tbb	[pc, r0]
 8404              	.L644:
 8405 002c 0C       		.byte	(.L649-.L644)/2
 8406 002d 12       		.byte	(.L648-.L644)/2
 8407 002e 18       		.byte	(.L647-.L644)/2
 8408 002f 1E       		.byte	(.L646-.L644)/2
 8409 0030 24       		.byte	(.L645-.L644)/2
 8410 0031 06       		.byte	(.L643-.L644)/2
 8411              	.LVL583:
 8412              		.p2align 1
 8413              	.L650:
1633:src/xeq.c     **** 
 8414              		.loc 1 1633 28 is_stmt 0 view .LVU2234
 8415 0032 09A9     		add	r1, sp, #36
 8416              	.LVL584:
1633:src/xeq.c     **** 
 8417              		.loc 1 1633 19 view .LVU2235
 8418 0034 6A46     		mov	r2, sp
 8419 0036 F4E7     		b	.L641
 8420              	.LVL585:
 8421              	.L643:
1659:src/xeq.c     **** 		break;
 8422              		.loc 1 1659 3 is_stmt 1 view .LVU2236
 8423 0038 3846     		mov	r0, r7
 8424 003a FFF7FEFF 		bl	dn_max
 8425              	.LVL586:
1660:src/xeq.c     **** 	default:
 8426              		.loc 1 1660 3 view .LVU2237
1664:src/xeq.c     **** }
 8427              		.loc 1 1664 9 is_stmt 0 view .LVU2238
 8428 003e 0020     		movs	r0, #0
 8429              	.L640:
1665:src/xeq.c     **** 
 8430              		.loc 1 1665 1 view .LVU2239
 8431 0040 13B0     		add	sp, sp, #76
 8432              		.cfi_remember_state
 8433              		.cfi_def_cfa_offset 20
 8434              		@ sp needed
 8435 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 8436              	.LVL587:
 8437              	.L649:
 8438              		.cfi_restore_state
1644:src/xeq.c     **** 		break;
ARM GAS  /tmp/ccaPnj5t.s 			page 285


 8439              		.loc 1 1644 3 is_stmt 1 view .LVU2240
 8440 0044 3846     		mov	r0, r7
 8441 0046 FFF7FEFF 		bl	dn_add
 8442              	.LVL588:
1645:src/xeq.c     **** 	case 2:
 8443              		.loc 1 1645 3 view .LVU2241
1664:src/xeq.c     **** }
 8444              		.loc 1 1664 9 is_stmt 0 view .LVU2242
 8445 004a 0020     		movs	r0, #0
1665:src/xeq.c     **** 
 8446              		.loc 1 1665 1 view .LVU2243
 8447 004c 13B0     		add	sp, sp, #76
 8448              		.cfi_remember_state
 8449              		.cfi_def_cfa_offset 20
 8450              		@ sp needed
 8451 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 8452              	.LVL589:
 8453              	.L648:
 8454              		.cfi_restore_state
1647:src/xeq.c     **** 		break;
 8455              		.loc 1 1647 3 is_stmt 1 view .LVU2244
 8456 0050 3846     		mov	r0, r7
 8457 0052 FFF7FEFF 		bl	dn_subtract
 8458              	.LVL590:
1648:src/xeq.c     **** 	case 3:
 8459              		.loc 1 1648 3 view .LVU2245
1664:src/xeq.c     **** }
 8460              		.loc 1 1664 9 is_stmt 0 view .LVU2246
 8461 0056 0020     		movs	r0, #0
1665:src/xeq.c     **** 
 8462              		.loc 1 1665 1 view .LVU2247
 8463 0058 13B0     		add	sp, sp, #76
 8464              		.cfi_remember_state
 8465              		.cfi_def_cfa_offset 20
 8466              		@ sp needed
 8467 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 8468              	.LVL591:
 8469              	.L647:
 8470              		.cfi_restore_state
1650:src/xeq.c     **** 		break;
 8471              		.loc 1 1650 3 is_stmt 1 view .LVU2248
 8472 005c 3846     		mov	r0, r7
 8473 005e FFF7FEFF 		bl	dn_multiply
 8474              	.LVL592:
1651:src/xeq.c     **** 	case 4:
 8475              		.loc 1 1651 3 view .LVU2249
1664:src/xeq.c     **** }
 8476              		.loc 1 1664 9 is_stmt 0 view .LVU2250
 8477 0062 0020     		movs	r0, #0
1665:src/xeq.c     **** 
 8478              		.loc 1 1665 1 view .LVU2251
 8479 0064 13B0     		add	sp, sp, #76
 8480              		.cfi_remember_state
 8481              		.cfi_def_cfa_offset 20
 8482              		@ sp needed
 8483 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 8484              	.LVL593:
ARM GAS  /tmp/ccaPnj5t.s 			page 286


 8485              	.L646:
 8486              		.cfi_restore_state
1653:src/xeq.c     **** 		break;
 8487              		.loc 1 1653 3 is_stmt 1 view .LVU2252
 8488 0068 3846     		mov	r0, r7
 8489 006a FFF7FEFF 		bl	dn_divide
 8490              	.LVL594:
1654:src/xeq.c     **** 	case 5:
 8491              		.loc 1 1654 3 view .LVU2253
1664:src/xeq.c     **** }
 8492              		.loc 1 1664 9 is_stmt 0 view .LVU2254
 8493 006e 0020     		movs	r0, #0
1665:src/xeq.c     **** 
 8494              		.loc 1 1665 1 view .LVU2255
 8495 0070 13B0     		add	sp, sp, #76
 8496              		.cfi_remember_state
 8497              		.cfi_def_cfa_offset 20
 8498              		@ sp needed
 8499 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 8500              	.LVL595:
 8501              	.L645:
 8502              		.cfi_restore_state
1656:src/xeq.c     **** 		break;
 8503              		.loc 1 1656 3 is_stmt 1 view .LVU2256
 8504 0074 3846     		mov	r0, r7
 8505 0076 FFF7FEFF 		bl	dn_min
 8506              	.LVL596:
1657:src/xeq.c     **** 	case 6:
 8507              		.loc 1 1657 3 view .LVU2257
1664:src/xeq.c     **** }
 8508              		.loc 1 1664 9 is_stmt 0 view .LVU2258
 8509 007a 0020     		movs	r0, #0
1665:src/xeq.c     **** 
 8510              		.loc 1 1665 1 view .LVU2259
 8511 007c 13B0     		add	sp, sp, #76
 8512              		.cfi_def_cfa_offset 20
 8513              		@ sp needed
 8514 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 8515              	.LVL597:
 8516              	.L651:
1664:src/xeq.c     **** }
 8517              		.loc 1 1664 9 view .LVU2260
 8518 0080 0120     		movs	r0, #1
 8519 0082 DDE7     		b	.L640
 8520              		.cfi_endproc
 8521              	.LFE114:
 8523              		.section	.text.storcl_cop,"ax",%progbits
 8524              		.align	1
 8525              		.p2align 2,,3
 8526              		.syntax unified
 8527              		.thumb
 8528              		.thumb_func
 8529              		.fpu fpv4-sp-d16
 8531              	storcl_cop:
 8532              	.LVL598:
 8533              	.LFB119:
1766:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
ARM GAS  /tmp/ccaPnj5t.s 			page 287


 8534              		.loc 1 1766 93 is_stmt 1 view -0
 8535              		.cfi_startproc
 8536              		@ args = 4, pretend = 0, frame = 144
 8537              		@ frame_needed = 0, uses_anonymous_args = 0
1767:src/xeq.c     **** 
 8538              		.loc 1 1767 2 view .LVU2262
1766:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8539              		.loc 1 1766 93 is_stmt 0 view .LVU2263
 8540 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8541              		.cfi_def_cfa_offset 24
 8542              		.cfi_offset 4, -24
 8543              		.cfi_offset 5, -20
 8544              		.cfi_offset 6, -16
 8545              		.cfi_offset 7, -12
 8546              		.cfi_offset 8, -8
 8547              		.cfi_offset 14, -4
 8548 0004 A6B0     		sub	sp, sp, #152
 8549              		.cfi_def_cfa_offset 176
 8550              	.LVL599:
1769:src/xeq.c     **** 	getRegister(y + 0, index);
 8551              		.loc 1 1769 2 is_stmt 1 view .LVU2264
 8552              	.LBB1988:
 8553              	.LBI1988:
 848:src/xeq.c     **** 	getX(x);
 8554              		.loc 1 848 6 view .LVU2265
 8555              	.LBE1988:
 849:src/xeq.c     **** 	getY(y);
 8556              		.loc 1 849 2 view .LVU2266
 8557              	.LBB1997:
 8558              	.LBB1989:
 8559              	.LBI1989:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8560              		.loc 1 818 12 view .LVU2267
 8561              	.LBB1990:
 819:src/xeq.c     **** }
 8562              		.loc 1 819 2 view .LVU2268
 8563              	.LBE1990:
 8564              	.LBE1989:
 8565              	.LBE1997:
1766:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8566              		.loc 1 1766 93 is_stmt 0 view .LVU2269
 8567 0006 0D46     		mov	r5, r1
 8568 0008 0446     		mov	r4, r0
 8569              	.LBB1998:
 8570              	.LBB1993:
 8571              	.LBB1991:
 819:src/xeq.c     **** }
 8572              		.loc 1 819 9 view .LVU2270
 8573 000a 6421     		movs	r1, #100
 8574              	.LVL600:
 819:src/xeq.c     **** }
 8575              		.loc 1 819 9 view .LVU2271
 8576 000c 02A8     		add	r0, sp, #8
 8577              	.LVL601:
 819:src/xeq.c     **** }
 8578              		.loc 1 819 9 view .LVU2272
 8579              	.LBE1991:
ARM GAS  /tmp/ccaPnj5t.s 			page 288


 8580              	.LBE1993:
 8581              	.LBE1998:
1766:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8582              		.loc 1 1766 93 view .LVU2273
 8583 000e 9046     		mov	r8, r2
 8584 0010 1E46     		mov	r6, r3
 8585 0012 2C9F     		ldr	r7, [sp, #176]
 8586              	.LBB1999:
 8587              	.LBB1994:
 8588              	.LBB1992:
 819:src/xeq.c     **** }
 8589              		.loc 1 819 9 view .LVU2274
 8590 0014 FFF7FEFF 		bl	getRegister
 8591              	.LVL602:
 819:src/xeq.c     **** }
 8592              		.loc 1 819 9 view .LVU2275
 8593              	.LBE1992:
 8594              	.LBE1994:
 8595              	.LBE1999:
 850:src/xeq.c     **** }
 8596              		.loc 1 850 2 is_stmt 1 view .LVU2276
 8597              	.LBB2000:
 8598              	.LBB1995:
 8599              	.LBI1995:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 8600              		.loc 1 826 6 view .LVU2277
 8601              	.LBB1996:
 827:src/xeq.c     **** }
 8602              		.loc 1 827 2 view .LVU2278
 8603 0018 6521     		movs	r1, #101
 8604 001a 0BA8     		add	r0, sp, #44
 8605              	.LVL603:
 827:src/xeq.c     **** }
 8606              		.loc 1 827 2 is_stmt 0 view .LVU2279
 8607 001c FFF7FEFF 		bl	getRegister
 8608              	.LVL604:
 827:src/xeq.c     **** }
 8609              		.loc 1 827 2 view .LVU2280
 8610              	.LBE1996:
 8611              	.LBE1995:
 8612              	.LBE2000:
1770:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8613              		.loc 1 1770 2 is_stmt 1 view .LVU2281
 8614 0020 2946     		mov	r1, r5
 8615 0022 14A8     		add	r0, sp, #80
 8616              	.LVL605:
1770:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8617              		.loc 1 1770 2 is_stmt 0 view .LVU2282
 8618 0024 FFF7FEFF 		bl	getRegister
 8619              	.LVL606:
1771:src/xeq.c     **** 
 8620              		.loc 1 1771 2 is_stmt 1 view .LVU2283
 8621 0028 691C     		adds	r1, r5, #1
 8622 002a 1DA8     		add	r0, sp, #116
 8623 002c FFF7FEFF 		bl	getRegister
 8624              	.LVL607:
1773:src/xeq.c     **** 		x = y;
ARM GAS  /tmp/ccaPnj5t.s 			page 289


 8625              		.loc 1 1773 2 view .LVU2284
1773:src/xeq.c     **** 		x = y;
 8626              		.loc 1 1773 5 is_stmt 0 view .LVU2285
 8627 0030 47B1     		cbz	r7, .L661
1775:src/xeq.c     **** 	}
 8628              		.loc 1 1775 5 view .LVU2286
 8629 0032 02AA     		add	r2, sp, #8
 8630              	.LVL608:
1774:src/xeq.c     **** 		y = a;
 8631              		.loc 1 1774 5 view .LVU2287
 8632 0034 14A9     		add	r1, sp, #80
 8633              	.LVL609:
 8634              	.L654:
1778:src/xeq.c     **** 	case 1:
 8635              		.loc 1 1778 2 is_stmt 1 view .LVU2288
 8636 0036 601E     		subs	r0, r4, #1
 8637 0038 0328     		cmp	r0, #3
 8638 003a 3ED8     		bhi	.L662
 8639 003c DFE800F0 		tbb	[pc, r0]
 8640              	.L657:
 8641 0040 13       		.byte	(.L660-.L657)/2
 8642 0041 21       		.byte	(.L659-.L657)/2
 8643 0042 2F       		.byte	(.L658-.L657)/2
 8644 0043 05       		.byte	(.L656-.L657)/2
 8645              	.LVL610:
 8646              		.p2align 1
 8647              	.L661:
1767:src/xeq.c     **** 
 8648              		.loc 1 1767 33 is_stmt 0 view .LVU2289
 8649 0044 14AA     		add	r2, sp, #80
 8650              	.LVL611:
1767:src/xeq.c     **** 
 8651              		.loc 1 1767 25 view .LVU2290
 8652 0046 02A9     		add	r1, sp, #8
 8653              	.LVL612:
1767:src/xeq.c     **** 
 8654              		.loc 1 1767 25 view .LVU2291
 8655 0048 F5E7     		b	.L654
 8656              	.L656:
1789:src/xeq.c     **** 		break;
 8657              		.loc 1 1789 3 is_stmt 1 view .LVU2292
1789:src/xeq.c     **** 		break;
 8658              		.loc 1 1789 46 is_stmt 0 view .LVU2293
 8659 004a 01F12403 		add	r3, r1, #36
1789:src/xeq.c     **** 		break;
 8660              		.loc 1 1789 3 view .LVU2294
 8661 004e CDE90013 		strd	r1, r3, [sp]
 8662 0052 4046     		mov	r0, r8
 8663 0054 3146     		mov	r1, r6
 8664              	.LVL613:
1789:src/xeq.c     **** 		break;
 8665              		.loc 1 1789 3 view .LVU2295
 8666 0056 02F12403 		add	r3, r2, #36
 8667 005a FFF7FEFF 		bl	cmplxDivide
 8668              	.LVL614:
1790:src/xeq.c     **** 	default:
 8669              		.loc 1 1790 3 is_stmt 1 view .LVU2296
ARM GAS  /tmp/ccaPnj5t.s 			page 290


1794:src/xeq.c     **** }
 8670              		.loc 1 1794 9 is_stmt 0 view .LVU2297
 8671 005e 0020     		movs	r0, #0
 8672              	.L653:
1795:src/xeq.c     **** 
 8673              		.loc 1 1795 1 view .LVU2298
 8674 0060 26B0     		add	sp, sp, #152
 8675              		.cfi_remember_state
 8676              		.cfi_def_cfa_offset 24
 8677              		@ sp needed
 8678 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8679              	.LVL615:
 8680              	.L660:
 8681              		.cfi_restore_state
1780:src/xeq.c     **** 		break;
 8682              		.loc 1 1780 3 is_stmt 1 view .LVU2299
1780:src/xeq.c     **** 		break;
 8683              		.loc 1 1780 43 is_stmt 0 view .LVU2300
 8684 0066 01F12403 		add	r3, r1, #36
1780:src/xeq.c     **** 		break;
 8685              		.loc 1 1780 3 view .LVU2301
 8686 006a CDE90013 		strd	r1, r3, [sp]
 8687 006e 4046     		mov	r0, r8
 8688 0070 3146     		mov	r1, r6
 8689              	.LVL616:
1780:src/xeq.c     **** 		break;
 8690              		.loc 1 1780 3 view .LVU2302
 8691 0072 02F12403 		add	r3, r2, #36
 8692 0076 FFF7FEFF 		bl	cmplxAdd
 8693              	.LVL617:
1781:src/xeq.c     **** 	case 2:
 8694              		.loc 1 1781 3 is_stmt 1 view .LVU2303
1794:src/xeq.c     **** }
 8695              		.loc 1 1794 9 is_stmt 0 view .LVU2304
 8696 007a 0020     		movs	r0, #0
1795:src/xeq.c     **** 
 8697              		.loc 1 1795 1 view .LVU2305
 8698 007c 26B0     		add	sp, sp, #152
 8699              		.cfi_remember_state
 8700              		.cfi_def_cfa_offset 24
 8701              		@ sp needed
 8702 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8703              	.LVL618:
 8704              	.L659:
 8705              		.cfi_restore_state
1783:src/xeq.c     **** 		break;
 8706              		.loc 1 1783 3 is_stmt 1 view .LVU2306
1783:src/xeq.c     **** 		break;
 8707              		.loc 1 1783 48 is_stmt 0 view .LVU2307
 8708 0082 01F12403 		add	r3, r1, #36
1783:src/xeq.c     **** 		break;
 8709              		.loc 1 1783 3 view .LVU2308
 8710 0086 CDE90013 		strd	r1, r3, [sp]
 8711 008a 4046     		mov	r0, r8
 8712 008c 3146     		mov	r1, r6
 8713              	.LVL619:
1783:src/xeq.c     **** 		break;
ARM GAS  /tmp/ccaPnj5t.s 			page 291


 8714              		.loc 1 1783 3 view .LVU2309
 8715 008e 02F12403 		add	r3, r2, #36
 8716 0092 FFF7FEFF 		bl	cmplxSubtract
 8717              	.LVL620:
1784:src/xeq.c     **** 	case 3:
 8718              		.loc 1 1784 3 is_stmt 1 view .LVU2310
1794:src/xeq.c     **** }
 8719              		.loc 1 1794 9 is_stmt 0 view .LVU2311
 8720 0096 0020     		movs	r0, #0
1795:src/xeq.c     **** 
 8721              		.loc 1 1795 1 view .LVU2312
 8722 0098 26B0     		add	sp, sp, #152
 8723              		.cfi_remember_state
 8724              		.cfi_def_cfa_offset 24
 8725              		@ sp needed
 8726 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8727              	.LVL621:
 8728              	.L658:
 8729              		.cfi_restore_state
1786:src/xeq.c     **** 		break;
 8730              		.loc 1 1786 3 is_stmt 1 view .LVU2313
1786:src/xeq.c     **** 		break;
 8731              		.loc 1 1786 48 is_stmt 0 view .LVU2314
 8732 009e 01F12403 		add	r3, r1, #36
1786:src/xeq.c     **** 		break;
 8733              		.loc 1 1786 3 view .LVU2315
 8734 00a2 CDE90013 		strd	r1, r3, [sp]
 8735 00a6 4046     		mov	r0, r8
 8736 00a8 3146     		mov	r1, r6
 8737              	.LVL622:
1786:src/xeq.c     **** 		break;
 8738              		.loc 1 1786 3 view .LVU2316
 8739 00aa 02F12403 		add	r3, r2, #36
 8740 00ae FFF7FEFF 		bl	cmplxMultiply
 8741              	.LVL623:
1787:src/xeq.c     **** 	case 4:
 8742              		.loc 1 1787 3 is_stmt 1 view .LVU2317
1794:src/xeq.c     **** }
 8743              		.loc 1 1794 9 is_stmt 0 view .LVU2318
 8744 00b2 0020     		movs	r0, #0
1795:src/xeq.c     **** 
 8745              		.loc 1 1795 1 view .LVU2319
 8746 00b4 26B0     		add	sp, sp, #152
 8747              		.cfi_def_cfa_offset 24
 8748              		@ sp needed
 8749 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8750              	.LVL624:
 8751              	.L662:
1794:src/xeq.c     **** }
 8752              		.loc 1 1794 9 view .LVU2320
 8753 00ba 0120     		movs	r0, #1
 8754 00bc D0E7     		b	.L653
 8755              		.cfi_endproc
 8756              	.LFE119:
 8758 00be 00BF     		.section	.text.cpx_enter,"ax",%progbits
 8759              		.align	1
 8760              		.p2align 2,,3
ARM GAS  /tmp/ccaPnj5t.s 			page 292


 8761              		.global	cpx_enter
 8762              		.syntax unified
 8763              		.thumb
 8764              		.thumb_func
 8765              		.fpu fpv4-sp-d16
 8767              	cpx_enter:
 8768              	.LVL625:
 8769              	.LFB74:
 915:src/xeq.c     **** #ifdef ENTRY_RPN
 8770              		.loc 1 915 31 is_stmt 1 view -0
 8771              		.cfi_startproc
 8772              		@ args = 0, pretend = 0, frame = 0
 8773              		@ frame_needed = 0, uses_anonymous_args = 0
 925:src/xeq.c     **** 	lift();
 8774              		.loc 1 925 2 view .LVU2322
 915:src/xeq.c     **** #ifdef ENTRY_RPN
 8775              		.loc 1 915 31 is_stmt 0 view .LVU2323
 8776 0000 10B5     		push	{r4, lr}
 8777              		.cfi_def_cfa_offset 8
 8778              		.cfi_offset 4, -8
 8779              		.cfi_offset 14, -4
 925:src/xeq.c     **** 	lift();
 8780              		.loc 1 925 2 view .LVU2324
 8781 0002 FFF7FEFF 		bl	lift
 8782              	.LVL626:
 926:src/xeq.c     **** 	copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 8783              		.loc 1 926 2 is_stmt 1 view .LVU2325
 8784 0006 FFF7FEFF 		bl	lift
 8785              	.LVL627:
 927:src/xeq.c     **** 	set_was_complex();
 8786              		.loc 1 927 2 view .LVU2326
 8787 000a 6520     		movs	r0, #101
 8788 000c FFF7FEFF 		bl	get_reg_n
 8789              	.LVL628:
 8790 0010 0446     		mov	r4, r0
 927:src/xeq.c     **** 	set_was_complex();
 8791              		.loc 1 927 31 is_stmt 0 view .LVU2327
 8792 0012 6720     		movs	r0, #103
 8793 0014 FFF7FEFF 		bl	get_reg_n
 8794              	.LVL629:
 8795              	.LBB2001:
 8796              	.LBB2002:
 8797              	.LBB2003:
 8798              	.LBB2004:
1101:src/xeq.c     **** }
 8799              		.loc 1 1101 24 view .LVU2328
 8800 0018 0B4B     		ldr	r3, .L668
 8801 001a 1B68     		ldr	r3, [r3]
 8802 001c B3F8E827 		ldrh	r2, [r3, #2024]
 8803 0020 44F20103 		movw	r3, #16385
 8804              	.LBE2004:
 8805              	.LBE2003:
 721:src/xeq.c     **** }
 8806              		.loc 1 721 2 view .LVU2329
 8807 0024 1340     		ands	r3, r3, r2
 8808 0026 B3F5804F 		cmp	r3, #16384
 8809              	.LBE2002:
ARM GAS  /tmp/ccaPnj5t.s 			page 293


 8810              	.LBE2001:
 927:src/xeq.c     **** 	set_was_complex();
 8811              		.loc 1 927 31 view .LVU2330
 8812 002a 0146     		mov	r1, r0
 8813              	.LVL630:
 8814              	.LBB2008:
 8815              	.LBI2001:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8816              		.loc 1 720 6 is_stmt 1 view .LVU2331
 8817              	.LBB2007:
 721:src/xeq.c     **** }
 8818              		.loc 1 721 2 view .LVU2332
 8819              	.LBB2006:
 8820              	.LBI2003:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8821              		.loc 1 1100 5 view .LVU2333
 8822              	.LBB2005:
1101:src/xeq.c     **** }
 8823              		.loc 1 1101 2 view .LVU2334
 8824              	.LBE2005:
 8825              	.LBE2006:
 721:src/xeq.c     **** }
 8826              		.loc 1 721 2 is_stmt 0 view .LVU2335
 8827 002c 0CBF     		ite	eq
 8828 002e 1022     		moveq	r2, #16
 8829 0030 0822     		movne	r2, #8
 8830 0032 2046     		mov	r0, r4
 8831              	.LVL631:
 721:src/xeq.c     **** }
 8832              		.loc 1 721 2 view .LVU2336
 8833 0034 FFF7FEFF 		bl	xcopy
 8834              	.LVL632:
 721:src/xeq.c     **** }
 8835              		.loc 1 721 2 view .LVU2337
 8836              	.LBE2007:
 8837              	.LBE2008:
 928:src/xeq.c     **** #endif
 8838              		.loc 1 928 2 is_stmt 1 view .LVU2338
 8839              	.LBB2009:
 8840              	.LBI2009:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 8841              		.loc 1 533 13 view .LVU2339
 8842              	.LBB2010:
 534:src/xeq.c     **** }
 8843              		.loc 1 534 2 view .LVU2340
 534:src/xeq.c     **** }
 8844              		.loc 1 534 20 is_stmt 0 view .LVU2341
 8845 0038 044B     		ldr	r3, .L668+4
 8846 003a 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 8847 003c 0121     		movs	r1, #1
 8848 003e 61F38712 		bfi	r2, r1, #6, #2
 8849 0042 1A75     		strb	r2, [r3, #20]
 8850              	.LBE2010:
 8851              	.LBE2009:
 930:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 8852              		.loc 1 930 1 view .LVU2342
 8853 0044 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccaPnj5t.s 			page 294


 8854              	.L669:
 8855 0046 00BF     		.align	2
 8856              	.L668:
 8857 0048 00000000 		.word	main_ram
 8858 004c 00000000 		.word	StateWhileOn
 8859              		.cfi_endproc
 8860              	.LFE74:
 8862              		.section	.text.cpx_fill,"ax",%progbits
 8863              		.align	1
 8864              		.p2align 2,,3
 8865              		.global	cpx_fill
 8866              		.syntax unified
 8867              		.thumb
 8868              		.thumb_func
 8869              		.fpu fpv4-sp-d16
 8871              	cpx_fill:
 8872              	.LVL633:
 8873              	.LFB78:
1068:src/xeq.c     **** 	const int n = stack_size();
 8874              		.loc 1 1068 30 is_stmt 1 view -0
 8875              		.cfi_startproc
 8876              		@ args = 0, pretend = 0, frame = 0
 8877              		@ frame_needed = 0, uses_anonymous_args = 0
1069:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 8878              		.loc 1 1069 2 view .LVU2344
 8879              	.LBB2011:
 8880              	.LBI2011:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 8881              		.loc 1 706 5 view .LVU2345
 8882              	.LBB2012:
 707:src/xeq.c     **** 		return 4;
 8883              		.loc 1 707 2 view .LVU2346
 8884              	.LBE2012:
 8885              	.LBE2011:
1068:src/xeq.c     **** 	const int n = stack_size();
 8886              		.loc 1 1068 30 is_stmt 0 view .LVU2347
 8887 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 8888              		.cfi_def_cfa_offset 32
 8889              		.cfi_offset 3, -32
 8890              		.cfi_offset 4, -28
 8891              		.cfi_offset 5, -24
 8892              		.cfi_offset 6, -20
 8893              		.cfi_offset 7, -16
 8894              		.cfi_offset 8, -12
 8895              		.cfi_offset 9, -8
 8896              		.cfi_offset 14, -4
 8897              	.LBB2017:
 8898              	.LBB2015:
 707:src/xeq.c     **** 		return 4;
 8899              		.loc 1 707 8 view .LVU2348
 8900 0004 1F4D     		ldr	r5, .L683
 8901 0006 2B68     		ldr	r3, [r5]
 707:src/xeq.c     **** 		return 4;
 8902              		.loc 1 707 6 view .LVU2349
 8903 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 8904              		.loc 1 707 5 view .LVU2350
ARM GAS  /tmp/ccaPnj5t.s 			page 295


 8905 000c 1207     		lsls	r2, r2, #28
 8906 000e 37D5     		bpl	.L675
 8907              	.LBB2013:
 8908              	.LBI2013:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 8909              		.loc 1 185 5 is_stmt 1 view .LVU2351
 8910              	.LBB2014:
 186:src/xeq.c     **** }
 8911              		.loc 1 186 2 view .LVU2352
 186:src/xeq.c     **** }
 8912              		.loc 1 186 9 is_stmt 0 view .LVU2353
 8913 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 8914              	.LBE2014:
 8915              	.LBE2013:
 707:src/xeq.c     **** 		return 4;
 8916              		.loc 1 707 27 view .LVU2354
 8917 0014 9B0B     		lsrs	r3, r3, #14
 8918 0016 032B     		cmp	r3, #3
 8919 0018 2AD0     		beq	.L682
 709:src/xeq.c     **** }
 8920              		.loc 1 709 9 view .LVU2355
 8921 001a 0827     		movs	r7, #8
 8922              	.L671:
 8923              	.LVL634:
 709:src/xeq.c     **** }
 8924              		.loc 1 709 9 view .LVU2356
 8925              	.LBE2015:
 8926              	.LBE2017:
1070:src/xeq.c     **** 	int i;
 8927              		.loc 1 1070 2 is_stmt 1 view .LVU2357
1070:src/xeq.c     **** 	int i;
 8928              		.loc 1 1070 22 is_stmt 0 view .LVU2358
 8929 001c 6520     		movs	r0, #101
 8930              	.LVL635:
1070:src/xeq.c     **** 	int i;
 8931              		.loc 1 1070 22 view .LVU2359
 8932 001e FFF7FEFF 		bl	get_reg_n
 8933              	.LVL636:
1074:src/xeq.c     **** 	set_was_complex();
 8934              		.loc 1 1074 3 view .LVU2360
 8935 0022 DFF86C90 		ldr	r9, .L683+12
1070:src/xeq.c     **** 	int i;
 8936              		.loc 1 1070 22 view .LVU2361
 8937 0026 8046     		mov	r8, r0
 8938              	.LVL637:
1071:src/xeq.c     **** 
 8939              		.loc 1 1071 2 is_stmt 1 view .LVU2362
1073:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8940              		.loc 1 1073 2 view .LVU2363
1073:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8941              		.loc 1 1073 12 view .LVU2364
1073:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8942              		.loc 1 1073 8 is_stmt 0 view .LVU2365
 8943 0028 0224     		movs	r4, #2
 8944              	.LBB2018:
 8945              	.LBB2019:
 8946              	.LBB2020:
ARM GAS  /tmp/ccaPnj5t.s 			page 296


 8947              	.LBB2021:
1101:src/xeq.c     **** }
 8948              		.loc 1 1101 24 view .LVU2366
 8949 002a 44F20106 		movw	r6, #16385
 8950              	.LVL638:
 8951              	.L674:
1101:src/xeq.c     **** }
 8952              		.loc 1 1101 24 view .LVU2367
 8953              	.LBE2021:
 8954              	.LBE2020:
 8955              	.LBE2019:
 8956              	.LBE2018:
1074:src/xeq.c     **** 	set_was_complex();
 8957              		.loc 1 1074 3 is_stmt 1 view .LVU2368
 8958              	.LBB2032:
 8959              	.LBI2032:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 8960              		.loc 1 712 11 view .LVU2369
 8961              	.LBB2033:
 713:src/xeq.c     **** }
 8962              		.loc 1 713 2 view .LVU2370
 713:src/xeq.c     **** }
 8963              		.loc 1 713 9 is_stmt 0 view .LVU2371
 8964 002e 04F16400 		add	r0, r4, #100
 8965 0032 FFF7FEFF 		bl	get_reg_n
 8966              	.LVL639:
 713:src/xeq.c     **** }
 8967              		.loc 1 713 9 view .LVU2372
 8968              	.LBE2033:
 8969              	.LBE2032:
1074:src/xeq.c     **** 	set_was_complex();
 8970              		.loc 1 1074 3 view .LVU2373
 8971 0036 E307     		lsls	r3, r4, #31
 8972              	.LBB2034:
 8973              	.LBB2028:
 8974              	.LBB2025:
 8975              	.LBB2022:
1101:src/xeq.c     **** }
 8976              		.loc 1 1101 24 view .LVU2374
 8977 0038 2B68     		ldr	r3, [r5]
 8978              	.LBE2022:
 8979              	.LBE2025:
 8980              	.LBE2028:
 8981              	.LBE2034:
1074:src/xeq.c     **** 	set_was_complex();
 8982              		.loc 1 1074 3 view .LVU2375
 8983 003a 58BF     		it	pl
 8984 003c D9F80010 		ldrpl	r1, [r9]
 8985              	.LBB2035:
 8986              	.LBB2029:
 8987              	.LBB2026:
 8988              	.LBB2023:
1101:src/xeq.c     **** }
 8989              		.loc 1 1101 24 view .LVU2376
 8990 0040 B3F8E837 		ldrh	r3, [r3, #2024]
 8991              	.LBE2023:
 8992              	.LBE2026:
ARM GAS  /tmp/ccaPnj5t.s 			page 297


 721:src/xeq.c     **** }
 8993              		.loc 1 721 2 view .LVU2377
 8994 0044 03EA0603 		and	r3, r3, r6
 8995              	.LBE2029:
 8996              	.LBE2035:
1074:src/xeq.c     **** 	set_was_complex();
 8997              		.loc 1 1074 3 view .LVU2378
 8998 0048 48BF     		it	mi
 8999 004a 4146     		movmi	r1, r8
 9000              	.LVL640:
 9001              	.LBB2036:
 9002              	.LBI2018:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 9003              		.loc 1 720 6 is_stmt 1 view .LVU2379
 9004              	.LBB2030:
 721:src/xeq.c     **** }
 9005              		.loc 1 721 2 view .LVU2380
 9006              	.LBB2027:
 9007              	.LBI2020:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9008              		.loc 1 1100 5 view .LVU2381
 9009              	.LBB2024:
1101:src/xeq.c     **** }
 9010              		.loc 1 1101 2 view .LVU2382
 9011              	.LBE2024:
 9012              	.LBE2027:
 721:src/xeq.c     **** }
 9013              		.loc 1 721 2 is_stmt 0 view .LVU2383
 9014 004c B3F5804F 		cmp	r3, #16384
 9015 0050 0CBF     		ite	eq
 9016 0052 1022     		moveq	r2, #16
 9017 0054 0822     		movne	r2, #8
 9018              	.LBE2030:
 9019              	.LBE2036:
1073:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9020              		.loc 1 1073 18 view .LVU2384
 9021 0056 0134     		adds	r4, r4, #1
 9022              	.LVL641:
 9023              	.LBB2037:
 9024              	.LBB2031:
 721:src/xeq.c     **** }
 9025              		.loc 1 721 2 view .LVU2385
 9026 0058 FFF7FEFF 		bl	xcopy
 9027              	.LVL642:
 721:src/xeq.c     **** }
 9028              		.loc 1 721 2 view .LVU2386
 9029              	.LBE2031:
 9030              	.LBE2037:
1073:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9031              		.loc 1 1073 17 is_stmt 1 view .LVU2387
1073:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9032              		.loc 1 1073 12 view .LVU2388
1073:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9033              		.loc 1 1073 2 is_stmt 0 view .LVU2389
 9034 005c BC42     		cmp	r4, r7
 9035 005e E6D1     		bne	.L674
1075:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 298


 9036              		.loc 1 1075 2 is_stmt 1 view .LVU2390
 9037              	.LBB2038:
 9038              	.LBI2038:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 9039              		.loc 1 533 13 view .LVU2391
 9040              	.LBB2039:
 534:src/xeq.c     **** }
 9041              		.loc 1 534 2 view .LVU2392
 534:src/xeq.c     **** }
 9042              		.loc 1 534 20 is_stmt 0 view .LVU2393
 9043 0060 094B     		ldr	r3, .L683+4
 9044 0062 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 9045 0064 0121     		movs	r1, #1
 9046 0066 61F38712 		bfi	r2, r1, #6, #2
 9047 006a 1A75     		strb	r2, [r3, #20]
 9048              	.LBE2039:
 9049              	.LBE2038:
1076:src/xeq.c     **** 
 9050              		.loc 1 1076 1 view .LVU2394
 9051 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9052              	.LVL643:
 9053              	.L682:
 9054              	.LBB2040:
 9055              	.LBB2016:
 707:src/xeq.c     **** 		return 4;
 9056              		.loc 1 707 44 view .LVU2395
 9057 0070 064B     		ldr	r3, .L683+8
 707:src/xeq.c     **** 		return 4;
 9058              		.loc 1 707 41 view .LVU2396
 9059 0072 93F90130 		ldrsb	r3, [r3, #1]
 708:src/xeq.c     **** 	return 8;
 9060              		.loc 1 708 10 view .LVU2397
 9061 0076 002B     		cmp	r3, #0
 9062 0078 B4BF     		ite	lt
 9063 007a 0827     		movlt	r7, #8
 9064 007c 0427     		movge	r7, #4
 9065 007e CDE7     		b	.L671
 9066              	.L675:
 9067 0080 0427     		movs	r7, #4
 9068 0082 CBE7     		b	.L671
 9069              	.L684:
 9070              		.align	2
 9071              	.L683:
 9072 0084 00000000 		.word	main_ram
 9073 0088 00000000 		.word	StateWhileOn
 9074 008c 00000000 		.word	XromParams
 9075 0090 00000000 		.word	StackBase
 9076              	.LBE2016:
 9077              	.LBE2040:
 9078              		.cfi_endproc
 9079              	.LFE78:
 9081              		.section	.text.setRegister,"ax",%progbits
 9082              		.align	1
 9083              		.p2align 2,,3
 9084              		.global	setRegister
 9085              		.syntax unified
 9086              		.thumb
ARM GAS  /tmp/ccaPnj5t.s 			page 299


 9087              		.thumb_func
 9088              		.fpu fpv4-sp-d16
 9090              	setRegister:
 9091              	.LVL644:
 9092              	.LFB58:
 805:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9093              		.loc 1 805 49 is_stmt 1 view -0
 9094              		.cfi_startproc
 9095              		@ args = 0, pretend = 0, frame = 40
 9096              		@ frame_needed = 0, uses_anonymous_args = 0
 806:src/xeq.c     **** 	decNumber dn;
 9097              		.loc 1 806 2 view .LVU2399
 805:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9098              		.loc 1 805 49 is_stmt 0 view .LVU2400
 9099 0000 30B5     		push	{r4, r5, lr}
 9100              		.cfi_def_cfa_offset 12
 9101              		.cfi_offset 4, -12
 9102              		.cfi_offset 5, -8
 9103              		.cfi_offset 14, -4
 9104 0002 8BB0     		sub	sp, sp, #44
 9105              		.cfi_def_cfa_offset 56
 805:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9106              		.loc 1 805 49 view .LVU2401
 9107 0004 0C46     		mov	r4, r1
 806:src/xeq.c     **** 	decNumber dn;
 9108              		.loc 1 806 24 view .LVU2402
 9109 0006 FFF7FEFF 		bl	get_reg_n
 9110              	.LVL645:
 806:src/xeq.c     **** 	decNumber dn;
 9111              		.loc 1 806 24 view .LVU2403
 9112 000a 0546     		mov	r5, r0
 809:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9113              		.loc 1 809 8 view .LVU2404
 9114 000c 2046     		mov	r0, r4
 9115              	.LVL646:
 807:src/xeq.c     **** 
 9116              		.loc 1 807 2 is_stmt 1 view .LVU2405
 809:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9117              		.loc 1 809 2 view .LVU2406
 809:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9118              		.loc 1 809 8 is_stmt 0 view .LVU2407
 9119 000e FFF7FEFF 		bl	check_special
 9120              	.LVL647:
 809:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9121              		.loc 1 809 5 view .LVU2408
 9122 0012 08B1     		cbz	r0, .L689
 816:src/xeq.c     **** 
 9123              		.loc 1 816 1 view .LVU2409
 9124 0014 0BB0     		add	sp, sp, #44
 9125              		.cfi_remember_state
 9126              		.cfi_def_cfa_offset 12
 9127              		@ sp needed
 9128 0016 30BD     		pop	{r4, r5, pc}
 9129              	.LVL648:
 9130              	.L689:
 9131              		.cfi_restore_state
 810:src/xeq.c     **** 		if (is_dblmode())
ARM GAS  /tmp/ccaPnj5t.s 			page 300


 9132              		.loc 1 810 3 is_stmt 1 view .LVU2410
 9133 0018 0C4A     		ldr	r2, .L691
 9134 001a 2146     		mov	r1, r4
 9135 001c 01A8     		add	r0, sp, #4
 9136 001e FFF7FEFF 		bl	decNumberNormalize
 9137              	.LVL649:
 811:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9138              		.loc 1 811 3 view .LVU2411
 9139              	.LBB2041:
 9140              	.LBI2041:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9141              		.loc 1 1100 5 view .LVU2412
 9142              	.LBB2042:
1101:src/xeq.c     **** }
 9143              		.loc 1 1101 2 view .LVU2413
1101:src/xeq.c     **** }
 9144              		.loc 1 1101 24 is_stmt 0 view .LVU2414
 9145 0022 0B4B     		ldr	r3, .L691+4
 9146 0024 1B68     		ldr	r3, [r3]
 9147 0026 B3F8E827 		ldrh	r2, [r3, #2024]
 9148 002a 44F20103 		movw	r3, #16385
 9149              	.LBE2042:
 9150              	.LBE2041:
 811:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9151              		.loc 1 811 6 view .LVU2415
 9152 002e 1340     		ands	r3, r3, r2
 9153 0030 B3F5804F 		cmp	r3, #16384
 812:src/xeq.c     **** 		else
 9154              		.loc 1 812 4 view .LVU2416
 9155 0034 01A9     		add	r1, sp, #4
 9156 0036 2846     		mov	r0, r5
 811:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9157              		.loc 1 811 6 view .LVU2417
 9158 0038 03D0     		beq	.L690
 9159              	.LVL650:
 814:src/xeq.c     **** 	}
 9160              		.loc 1 814 4 is_stmt 1 view .LVU2418
 9161 003a FFF7FEFF 		bl	packed_from_number
 9162              	.LVL651:
 816:src/xeq.c     **** 
 9163              		.loc 1 816 1 is_stmt 0 view .LVU2419
 9164 003e 0BB0     		add	sp, sp, #44
 9165              		.cfi_remember_state
 9166              		.cfi_def_cfa_offset 12
 9167              		@ sp needed
 9168 0040 30BD     		pop	{r4, r5, pc}
 9169              	.LVL652:
 9170              	.L690:
 9171              		.cfi_restore_state
 812:src/xeq.c     **** 		else
 9172              		.loc 1 812 4 is_stmt 1 view .LVU2420
 9173 0042 FFF7FEFF 		bl	packed128_from_number
 9174              	.LVL653:
 816:src/xeq.c     **** 
 9175              		.loc 1 816 1 is_stmt 0 view .LVU2421
 9176 0046 0BB0     		add	sp, sp, #44
 9177              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccaPnj5t.s 			page 301


 9178              		@ sp needed
 9179 0048 30BD     		pop	{r4, r5, pc}
 9180              	.LVL654:
 9181              	.L692:
 816:src/xeq.c     **** 
 9182              		.loc 1 816 1 view .LVU2422
 9183 004a 00BF     		.align	2
 9184              	.L691:
 9185 004c 00000000 		.word	Ctx
 9186 0050 00000000 		.word	main_ram
 9187              		.cfi_endproc
 9188              	.LFE58:
 9190              		.section	.text.setX,"ax",%progbits
 9191              		.align	1
 9192              		.p2align 2,,3
 9193              		.global	setX
 9194              		.syntax unified
 9195              		.thumb
 9196              		.thumb_func
 9197              		.fpu fpv4-sp-d16
 9199              	setX:
 9200              	.LVL655:
 9201              	.LFB60:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 9202              		.loc 1 822 31 is_stmt 1 view -0
 9203              		.cfi_startproc
 9204              		@ args = 0, pretend = 0, frame = 0
 9205              		@ frame_needed = 0, uses_anonymous_args = 0
 9206              		@ link register save eliminated.
 823:src/xeq.c     **** }
 9207              		.loc 1 823 2 view .LVU2424
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 9208              		.loc 1 822 31 is_stmt 0 view .LVU2425
 9209 0000 0146     		mov	r1, r0
 823:src/xeq.c     **** }
 9210              		.loc 1 823 2 view .LVU2426
 9211 0002 6420     		movs	r0, #100
 9212              	.LVL656:
 823:src/xeq.c     **** }
 9213              		.loc 1 823 2 view .LVU2427
 9214 0004 FFF7FEBF 		b	setRegister
 9215              	.LVL657:
 823:src/xeq.c     **** }
 9216              		.loc 1 823 2 view .LVU2428
 9217              		.cfi_endproc
 9218              	.LFE60:
 9220              		.section	.text.rarg_round,"ax",%progbits
 9221              		.align	1
 9222              		.p2align 2,,3
 9223              		.global	rarg_round
 9224              		.syntax unified
 9225              		.thumb
 9226              		.thumb_func
 9227              		.fpu fpv4-sp-d16
 9229              	rarg_round:
 9230              	.LVL658:
 9231              	.LFB40:
ARM GAS  /tmp/ccaPnj5t.s 			page 302


 656:src/xeq.c     **** 	decNumber res, x;
 9232              		.loc 1 656 49 is_stmt 1 view -0
 9233              		.cfi_startproc
 9234              		@ args = 0, pretend = 0, frame = 80
 9235              		@ frame_needed = 0, uses_anonymous_args = 0
 657:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 9236              		.loc 1 657 2 view .LVU2430
 658:src/xeq.c     **** 
 9237              		.loc 1 658 2 view .LVU2431
 9238              	.LBB2055:
 9239              	.LBI2055:
 604:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 9240              		.loc 1 604 22 view .LVU2432
 9241              	.LBB2056:
 605:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 9242              		.loc 1 605 2 view .LVU2433
 610:src/xeq.c     **** }
 9243              		.loc 1 610 2 view .LVU2434
 610:src/xeq.c     **** }
 9244              		.loc 1 610 31 is_stmt 0 view .LVU2435
 9245 0000 184B     		ldr	r3, .L702
 9246              	.LBE2056:
 9247              	.LBE2055:
 656:src/xeq.c     **** 	decNumber res, x;
 9248              		.loc 1 656 49 view .LVU2436
 9249 0002 70B5     		push	{r4, r5, r6, lr}
 9250              		.cfi_def_cfa_offset 16
 9251              		.cfi_offset 4, -16
 9252              		.cfi_offset 5, -12
 9253              		.cfi_offset 6, -8
 9254              		.cfi_offset 14, -4
 9255              	.LBB2059:
 9256              	.LBB2057:
 610:src/xeq.c     **** }
 9257              		.loc 1 610 31 view .LVU2437
 9258 0004 1B68     		ldr	r3, [r3]
 9259              	.LVL659:
 610:src/xeq.c     **** }
 9260              		.loc 1 610 31 view .LVU2438
 9261              	.LBE2057:
 9262              	.LBE2059:
 660:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9263              		.loc 1 660 2 is_stmt 1 view .LVU2439
 660:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9264              		.loc 1 660 6 is_stmt 0 view .LVU2440
 9265 0006 93F8E857 		ldrb	r5, [r3, #2024]	@ zero_extendqisi2
 660:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9266              		.loc 1 660 5 view .LVU2441
 9267 000a EA07     		lsls	r2, r5, #31
 656:src/xeq.c     **** 	decNumber res, x;
 9268              		.loc 1 656 49 view .LVU2442
 9269 000c 94B0     		sub	sp, sp, #80
 9270              		.cfi_def_cfa_offset 96
 660:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9271              		.loc 1 660 5 view .LVU2443
 9272 000e 06D5     		bpl	.L695
 661:src/xeq.c     **** 		return;
ARM GAS  /tmp/ccaPnj5t.s 			page 303


 9273              		.loc 1 661 3 is_stmt 1 view .LVU2444
 9274              	.LVL660:
 9275              	.LBB2060:
 9276              	.LBI2060:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9277              		.loc 1 540 5 view .LVU2445
 9278              	.LBB2061:
 541:src/xeq.c     **** 		Error = e;
 9279              		.loc 1 541 2 view .LVU2446
 541:src/xeq.c     **** 		Error = e;
 9280              		.loc 1 541 12 is_stmt 0 view .LVU2447
 9281 0010 154B     		ldr	r3, .L702+4
 9282              	.LVL661:
 541:src/xeq.c     **** 		Error = e;
 9283              		.loc 1 541 5 view .LVU2448
 9284 0012 1A68     		ldr	r2, [r3]
 9285 0014 0AB9     		cbnz	r2, .L694
 9286              	.LVL662:
 9287              	.LBB2062:
 9288              	.LBI2062:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9289              		.loc 1 540 5 is_stmt 1 view .LVU2449
 9290              	.LBB2063:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 9291              		.loc 1 542 3 view .LVU2450
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 9292              		.loc 1 542 9 is_stmt 0 view .LVU2451
 9293 0016 0D22     		movs	r2, #13
 9294 0018 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 9295              		.loc 1 543 3 is_stmt 1 view .LVU2452
 9296              	.LVL663:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 9297              		.loc 1 543 3 is_stmt 0 view .LVU2453
 9298              	.LBE2063:
 9299              	.LBE2062:
 9300              	.LBE2061:
 9301              	.LBE2060:
 662:src/xeq.c     **** 	}
 9302              		.loc 1 662 3 is_stmt 1 view .LVU2454
 9303              	.L694:
 672:src/xeq.c     **** 
 9304              		.loc 1 672 1 is_stmt 0 view .LVU2455
 9305 001a 14B0     		add	sp, sp, #80
 9306              		.cfi_remember_state
 9307              		.cfi_def_cfa_offset 16
 9308              		@ sp needed
 9309 001c 70BD     		pop	{r4, r5, r6, pc}
 9310              	.LVL664:
 9311              	.L695:
 9312              		.cfi_restore_state
 9313              	.LBB2064:
 9314              	.LBB2058:
 610:src/xeq.c     **** }
 9315              		.loc 1 610 37 view .LVU2456
 9316 001e 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 9317              	.LVL665:
ARM GAS  /tmp/ccaPnj5t.s 			page 304


 610:src/xeq.c     **** }
 9318              		.loc 1 610 9 view .LVU2457
 9319 0022 124A     		ldr	r2, .L702+8
 610:src/xeq.c     **** }
 9320              		.loc 1 610 37 view .LVU2458
 9321 0024 C3F30213 		ubfx	r3, r3, #4, #3
 9322 0028 0C46     		mov	r4, r1
 610:src/xeq.c     **** }
 9323              		.loc 1 610 9 view .LVU2459
 9324 002a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9325 002c 0193     		str	r3, [sp, #4]
 9326              	.LBE2058:
 9327              	.LBE2064:
 665:src/xeq.c     **** 	getX(&x);
 9328              		.loc 1 665 2 is_stmt 1 view .LVU2460
 9329              	.LBB2065:
 9330              	.LBI2065:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 9331              		.loc 1 786 6 view .LVU2461
 9332              	.LBB2066:
 787:src/xeq.c     **** }
 9333              		.loc 1 787 2 view .LVU2462
 9334 002e 0646     		mov	r6, r0
 9335 0030 6421     		movs	r1, #100
 9336              	.LVL666:
 787:src/xeq.c     **** }
 9337              		.loc 1 787 2 is_stmt 0 view .LVU2463
 9338 0032 6C20     		movs	r0, #108
 9339              	.LVL667:
 787:src/xeq.c     **** }
 9340              		.loc 1 787 2 view .LVU2464
 9341 0034 FFF7FEFF 		bl	copyreg_n
 9342              	.LVL668:
 787:src/xeq.c     **** }
 9343              		.loc 1 787 2 view .LVU2465
 9344              	.LBE2066:
 9345              	.LBE2065:
 666:src/xeq.c     **** 	if (op == RARG_ROUND)
 9346              		.loc 1 666 2 is_stmt 1 view .LVU2466
 9347              	.LBB2067:
 9348              	.LBI2067:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9349              		.loc 1 818 12 view .LVU2467
 9350              	.LBB2068:
 819:src/xeq.c     **** }
 9351              		.loc 1 819 2 view .LVU2468
 819:src/xeq.c     **** }
 9352              		.loc 1 819 9 is_stmt 0 view .LVU2469
 9353 0038 6421     		movs	r1, #100
 9354 003a 0BA8     		add	r0, sp, #44
 9355              	.LVL669:
 819:src/xeq.c     **** }
 9356              		.loc 1 819 9 view .LVU2470
 9357 003c FFF7FEFF 		bl	getRegister
 9358              	.LVL670:
 819:src/xeq.c     **** }
 9359              		.loc 1 819 9 view .LVU2471
ARM GAS  /tmp/ccaPnj5t.s 			page 305


 9360              	.LBE2068:
 9361              	.LBE2067:
 667:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9362              		.loc 1 667 2 is_stmt 1 view .LVU2472
 667:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9363              		.loc 1 667 5 is_stmt 0 view .LVU2473
 9364 0040 752C     		cmp	r4, #117
 668:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9365              		.loc 1 668 3 view .LVU2474
 9366 0042 02AC     		add	r4, sp, #8
 667:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9367              		.loc 1 667 5 view .LVU2475
 9368 0044 019B     		ldr	r3, [sp, #4]
 668:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9369              		.loc 1 668 3 view .LVU2476
 9370 0046 3246     		mov	r2, r6
 9371 0048 0BA9     		add	r1, sp, #44
 9372 004a 2046     		mov	r0, r4
 667:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9373              		.loc 1 667 5 view .LVU2477
 9374 004c 07D0     		beq	.L701
 9375              	.LVL671:
 670:src/xeq.c     **** 	setX(&res);
 9376              		.loc 1 670 3 is_stmt 1 view .LVU2478
 9377 004e FFF7FEFF 		bl	decNumberRoundDecimals
 9378              	.LVL672:
 9379              	.L699:
 671:src/xeq.c     **** }
 9380              		.loc 1 671 2 view .LVU2479
 9381              	.LBB2069:
 9382              	.LBI2069:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 9383              		.loc 1 822 6 view .LVU2480
 9384              	.LBB2070:
 823:src/xeq.c     **** }
 9385              		.loc 1 823 2 view .LVU2481
 9386 0052 2146     		mov	r1, r4
 9387 0054 6420     		movs	r0, #100
 9388 0056 FFF7FEFF 		bl	setRegister
 9389              	.LVL673:
 823:src/xeq.c     **** }
 9390              		.loc 1 823 2 is_stmt 0 view .LVU2482
 9391              	.LBE2070:
 9392              	.LBE2069:
 672:src/xeq.c     **** 
 9393              		.loc 1 672 1 view .LVU2483
 9394 005a 14B0     		add	sp, sp, #80
 9395              		.cfi_remember_state
 9396              		.cfi_def_cfa_offset 16
 9397              		@ sp needed
 9398 005c 70BD     		pop	{r4, r5, r6, pc}
 9399              	.LVL674:
 9400              	.L701:
 9401              		.cfi_restore_state
 668:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9402              		.loc 1 668 3 is_stmt 1 view .LVU2484
 9403 005e FFF7FEFF 		bl	decNumberRoundDigits
ARM GAS  /tmp/ccaPnj5t.s 			page 306


 9404              	.LVL675:
 668:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9405              		.loc 1 668 3 is_stmt 0 view .LVU2485
 9406 0062 F6E7     		b	.L699
 9407              	.L703:
 9408              		.align	2
 9409              	.L702:
 9410 0064 00000000 		.word	main_ram
 9411 0068 00000000 		.word	Error
 9412 006c 00000000 		.word	.LANCHOR1
 9413              		.cfi_endproc
 9414              	.LFE40:
 9416              		.section	.text.setY,"ax",%progbits
 9417              		.align	1
 9418              		.p2align 2,,3
 9419              		.global	setY
 9420              		.syntax unified
 9421              		.thumb
 9422              		.thumb_func
 9423              		.fpu fpv4-sp-d16
 9425              	setY:
 9426              	.LVL676:
 9427              	.LFB62:
 830:src/xeq.c     **** 	setRegister(regY_idx, y);
 9428              		.loc 1 830 31 is_stmt 1 view -0
 9429              		.cfi_startproc
 9430              		@ args = 0, pretend = 0, frame = 0
 9431              		@ frame_needed = 0, uses_anonymous_args = 0
 9432              		@ link register save eliminated.
 831:src/xeq.c     **** }
 9433              		.loc 1 831 2 view .LVU2487
 830:src/xeq.c     **** 	setRegister(regY_idx, y);
 9434              		.loc 1 830 31 is_stmt 0 view .LVU2488
 9435 0000 0146     		mov	r1, r0
 831:src/xeq.c     **** }
 9436              		.loc 1 831 2 view .LVU2489
 9437 0002 6520     		movs	r0, #101
 9438              	.LVL677:
 831:src/xeq.c     **** }
 9439              		.loc 1 831 2 view .LVU2490
 9440 0004 FFF7FEBF 		b	setRegister
 9441              	.LVL678:
 831:src/xeq.c     **** }
 9442              		.loc 1 831 2 view .LVU2491
 9443              		.cfi_endproc
 9444              	.LFE62:
 9446              		.section	.text.setXY,"ax",%progbits
 9447              		.align	1
 9448              		.p2align 2,,3
 9449              		.global	setXY
 9450              		.syntax unified
 9451              		.thumb
 9452              		.thumb_func
 9453              		.fpu fpv4-sp-d16
 9455              	setXY:
 9456              	.LVL679:
 9457              	.LFB66:
ARM GAS  /tmp/ccaPnj5t.s 			page 307


 853:src/xeq.c     **** 	setX(x);
 9458              		.loc 1 853 52 is_stmt 1 view -0
 9459              		.cfi_startproc
 9460              		@ args = 0, pretend = 0, frame = 0
 9461              		@ frame_needed = 0, uses_anonymous_args = 0
 854:src/xeq.c     **** 	setY(y);
 9462              		.loc 1 854 2 view .LVU2493
 9463              	.LBB2071:
 9464              	.LBI2071:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 9465              		.loc 1 822 6 view .LVU2494
 9466              	.LBB2072:
 823:src/xeq.c     **** }
 9467              		.loc 1 823 2 view .LVU2495
 9468              	.LBE2072:
 9469              	.LBE2071:
 853:src/xeq.c     **** 	setX(x);
 9470              		.loc 1 853 52 is_stmt 0 view .LVU2496
 9471 0000 10B5     		push	{r4, lr}
 9472              		.cfi_def_cfa_offset 8
 9473              		.cfi_offset 4, -8
 9474              		.cfi_offset 14, -4
 853:src/xeq.c     **** 	setX(x);
 9475              		.loc 1 853 52 view .LVU2497
 9476 0002 0C46     		mov	r4, r1
 9477              	.LBB2074:
 9478              	.LBB2073:
 823:src/xeq.c     **** }
 9479              		.loc 1 823 2 view .LVU2498
 9480 0004 0146     		mov	r1, r0
 9481              	.LVL680:
 823:src/xeq.c     **** }
 9482              		.loc 1 823 2 view .LVU2499
 9483 0006 6420     		movs	r0, #100
 9484              	.LVL681:
 823:src/xeq.c     **** }
 9485              		.loc 1 823 2 view .LVU2500
 9486 0008 FFF7FEFF 		bl	setRegister
 9487              	.LVL682:
 823:src/xeq.c     **** }
 9488              		.loc 1 823 2 view .LVU2501
 9489              	.LBE2073:
 9490              	.LBE2074:
 855:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 9491              		.loc 1 855 2 is_stmt 1 view .LVU2502
 9492              	.LBB2075:
 9493              	.LBI2075:
 830:src/xeq.c     **** 	setRegister(regY_idx, y);
 9494              		.loc 1 830 6 view .LVU2503
 9495              	.LBB2076:
 831:src/xeq.c     **** }
 9496              		.loc 1 831 2 view .LVU2504
 9497 000c 2146     		mov	r1, r4
 9498 000e 6520     		movs	r0, #101
 9499 0010 FFF7FEFF 		bl	setRegister
 9500              	.LVL683:
 831:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 308


 9501              		.loc 1 831 2 is_stmt 0 view .LVU2505
 9502              	.LBE2076:
 9503              	.LBE2075:
 857:src/xeq.c     **** #endif
 9504              		.loc 1 857 2 is_stmt 1 view .LVU2506
 9505 0014 044B     		ldr	r3, .L707
 9506 0016 1A68     		ldr	r2, [r3]
 9507 0018 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 9508 001c 43F00103 		orr	r3, r3, #1
 9509 0020 82F8AD37 		strb	r3, [r2, #1965]
 859:src/xeq.c     **** 
 9510              		.loc 1 859 1 is_stmt 0 view .LVU2507
 9511 0024 10BD     		pop	{r4, pc}
 9512              	.LVL684:
 9513              	.L708:
 859:src/xeq.c     **** 
 9514              		.loc 1 859 1 view .LVU2508
 9515 0026 00BF     		.align	2
 9516              	.L707:
 9517 0028 00000000 		.word	main_ram
 9518              		.cfi_endproc
 9519              	.LFE66:
 9521              		.section	.text.convert_regK,"ax",%progbits
 9522              		.align	1
 9523              		.p2align 2,,3
 9524              		.global	convert_regK
 9525              		.syntax unified
 9526              		.thumb
 9527              		.thumb_func
 9528              		.fpu fpv4-sp-d16
 9530              	convert_regK:
 9531              	.LVL685:
 9532              	.LFB75:
 933:src/xeq.c     **** 	decNumber k;
 9533              		.loc 1 933 41 is_stmt 1 view -0
 9534              		.cfi_startproc
 9535              		@ args = 0, pretend = 0, frame = 40
 9536              		@ frame_needed = 0, uses_anonymous_args = 0
 934:src/xeq.c     **** 
 9537              		.loc 1 934 2 view .LVU2510
 936:src/xeq.c     **** 	if (i==j) return; // no mode change
 9538              		.loc 1 936 2 view .LVU2511
 9539              	.LBB2077:
 9540              	.LBI2077:
4072:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 9541              		.loc 1 4072 17 view .LVU2512
 9542              	.LBB2078:
4073:src/xeq.c     **** 		return TRIG_RAD;
 9543              		.loc 1 4073 2 view .LVU2513
 9544              	.LBE2078:
 9545              	.LBE2077:
 933:src/xeq.c     **** 	decNumber k;
 9546              		.loc 1 933 41 is_stmt 0 view .LVU2514
 9547 0000 70B5     		push	{r4, r5, r6, lr}
 9548              		.cfi_def_cfa_offset 16
 9549              		.cfi_offset 4, -16
 9550              		.cfi_offset 5, -12
ARM GAS  /tmp/ccaPnj5t.s 			page 309


 9551              		.cfi_offset 6, -8
 9552              		.cfi_offset 14, -4
 9553              	.LBB2082:
 9554              	.LBB2079:
4073:src/xeq.c     **** 		return TRIG_RAD;
 9555              		.loc 1 4073 6 view .LVU2515
 9556 0002 2A4B     		ldr	r3, .L730
 9557 0004 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4073:src/xeq.c     **** 		return TRIG_RAD;
 9558              		.loc 1 4073 5 view .LVU2516
 9559 0006 9B07     		lsls	r3, r3, #30
 9560              	.LBE2079:
 9561              	.LBE2082:
 933:src/xeq.c     **** 	decNumber k;
 9562              		.loc 1 933 41 view .LVU2517
 9563 0008 8AB0     		sub	sp, sp, #40
 9564              		.cfi_def_cfa_offset 56
 933:src/xeq.c     **** 	decNumber k;
 9565              		.loc 1 933 41 view .LVU2518
 9566 000a 0446     		mov	r4, r0
 9567              	.LBB2083:
 9568              	.LBB2080:
4073:src/xeq.c     **** 		return TRIG_RAD;
 9569              		.loc 1 4073 5 view .LVU2519
 9570 000c 27D4     		bmi	.L713
4073:src/xeq.c     **** 		return TRIG_RAD;
 9571              		.loc 1 4073 19 view .LVU2520
 9572 000e 284B     		ldr	r3, .L730+4
 9573 0010 93F90130 		ldrsb	r3, [r3, #1]
 9574 0014 002B     		cmp	r3, #0
 9575 0016 22DB     		blt	.L713
4076:src/xeq.c     **** }
 9576              		.loc 1 4076 2 is_stmt 1 view .LVU2521
4076:src/xeq.c     **** }
 9577              		.loc 1 4076 33 is_stmt 0 view .LVU2522
 9578 0018 264B     		ldr	r3, .L730+8
 9579 001a 1B68     		ldr	r3, [r3]
 9580 001c 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 9581              	.LBE2080:
 9582              	.LBE2083:
 937:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9583              		.loc 1 937 5 view .LVU2523
 9584 0020 B0EB931F 		cmp	r0, r3, lsr #6
 9585              	.LBB2084:
 9586              	.LBB2081:
4076:src/xeq.c     **** }
 9587              		.loc 1 4076 33 view .LVU2524
 9588 0024 4FEA9316 		lsr	r6, r3, #6
 9589              	.LVL686:
4076:src/xeq.c     **** }
 9590              		.loc 1 4076 33 view .LVU2525
 9591              	.LBE2081:
 9592              	.LBE2084:
 937:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9593              		.loc 1 937 2 is_stmt 1 view .LVU2526
 937:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9594              		.loc 1 937 5 is_stmt 0 view .LVU2527
ARM GAS  /tmp/ccaPnj5t.s 			page 310


 9595 0028 17D0     		beq	.L709
 938:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9596              		.loc 1 938 2 is_stmt 1 view .LVU2528
 9597 002a 01AD     		add	r5, sp, #4
 9598 002c 2846     		mov	r0, r5
 9599              	.LVL687:
 938:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9600              		.loc 1 938 2 is_stmt 0 view .LVU2529
 9601 002e 6F21     		movs	r1, #111
 9602 0030 FFF7FEFF 		bl	getRegister
 9603              	.LVL688:
 939:src/xeq.c     **** 		case TRIG_DEG:
 9604              		.loc 1 939 2 is_stmt 1 view .LVU2530
 9605 0034 012E     		cmp	r6, #1
 9606 0036 19D0     		beq	.L712
 9607 0038 022E     		cmp	r6, #2
 9608 003a 24D0     		beq	.L716
 9609 003c 26B9     		cbnz	r6, .L717
 941:src/xeq.c     **** 			break;
 9610              		.loc 1 941 4 view .LVU2531
 9611 003e 1E4A     		ldr	r2, .L730+12
 9612 0040 2946     		mov	r1, r5
 9613 0042 2846     		mov	r0, r5
 9614 0044 FFF7FEFF 		bl	dn_divide
 9615              	.LVL689:
 942:src/xeq.c     **** 		case TRIG_RAD:
 9616              		.loc 1 942 4 view .LVU2532
 9617              	.L717:
 948:src/xeq.c     **** 	}
 9618              		.loc 1 948 11 view .LVU2533
 950:src/xeq.c     **** 		case TRIG_DEG:
 9619              		.loc 1 950 2 view .LVU2534
 9620 0048 012C     		cmp	r4, #1
 9621 004a 16D0     		beq	.L718
 9622              	.L729:
 950:src/xeq.c     **** 		case TRIG_DEG:
 9623              		.loc 1 950 2 is_stmt 0 view .LVU2535
 9624 004c 022C     		cmp	r4, #2
 9625 004e 20D0     		beq	.L719
 9626 0050 2CB3     		cbz	r4, .L728
 9627              	.L720:
 959:src/xeq.c     **** 	}
 9628              		.loc 1 959 11 is_stmt 1 view .LVU2536
 961:src/xeq.c     **** }
 9629              		.loc 1 961 2 view .LVU2537
 9630 0052 2946     		mov	r1, r5
 9631 0054 6F20     		movs	r0, #111
 9632 0056 FFF7FEFF 		bl	setRegister
 9633              	.LVL690:
 9634              	.L709:
 962:src/xeq.c     **** 
 9635              		.loc 1 962 1 is_stmt 0 view .LVU2538
 9636 005a 0AB0     		add	sp, sp, #40
 9637              		.cfi_remember_state
 9638              		.cfi_def_cfa_offset 16
 9639              		@ sp needed
 9640 005c 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccaPnj5t.s 			page 311


 9641              	.LVL691:
 9642              	.L713:
 9643              		.cfi_restore_state
 937:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9644              		.loc 1 937 2 is_stmt 1 view .LVU2539
 937:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9645              		.loc 1 937 5 is_stmt 0 view .LVU2540
 9646 005e 012C     		cmp	r4, #1
 9647 0060 FBD0     		beq	.L709
 938:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9648              		.loc 1 938 2 is_stmt 1 view .LVU2541
 9649 0062 01AD     		add	r5, sp, #4
 9650 0064 2846     		mov	r0, r5
 9651              	.LVL692:
 938:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9652              		.loc 1 938 2 is_stmt 0 view .LVU2542
 9653 0066 6F21     		movs	r1, #111
 9654 0068 FFF7FEFF 		bl	getRegister
 9655              	.LVL693:
 939:src/xeq.c     **** 		case TRIG_DEG:
 9656              		.loc 1 939 2 is_stmt 1 view .LVU2543
 9657              	.L712:
 944:src/xeq.c     **** 			break;
 9658              		.loc 1 944 4 view .LVU2544
 9659 006c 134A     		ldr	r2, .L730+16
 9660 006e 2946     		mov	r1, r5
 9661 0070 2846     		mov	r0, r5
 9662 0072 FFF7FEFF 		bl	dn_divide
 9663              	.LVL694:
 945:src/xeq.c     **** 		case TRIG_GRAD:
 9664              		.loc 1 945 4 view .LVU2545
 948:src/xeq.c     **** 	}
 9665              		.loc 1 948 11 view .LVU2546
 950:src/xeq.c     **** 		case TRIG_DEG:
 9666              		.loc 1 950 2 view .LVU2547
 9667 0076 012C     		cmp	r4, #1
 9668 0078 E8D1     		bne	.L729
 9669              	.L718:
 955:src/xeq.c     **** 			break;
 9670              		.loc 1 955 4 view .LVU2548
 9671 007a 104A     		ldr	r2, .L730+16
 9672 007c 2946     		mov	r1, r5
 9673 007e 2846     		mov	r0, r5
 9674 0080 FFF7FEFF 		bl	dn_multiply
 9675              	.LVL695:
 956:src/xeq.c     **** 		case TRIG_GRAD:
 9676              		.loc 1 956 4 view .LVU2549
 9677 0084 E5E7     		b	.L720
 9678              	.L716:
 947:src/xeq.c     **** 		default:;
 9679              		.loc 1 947 4 view .LVU2550
 9680 0086 0E4A     		ldr	r2, .L730+20
 9681 0088 2946     		mov	r1, r5
 9682 008a 2846     		mov	r0, r5
 9683 008c FFF7FEFF 		bl	dn_divide
 9684              	.LVL696:
 9685 0090 DAE7     		b	.L717
ARM GAS  /tmp/ccaPnj5t.s 			page 312


 9686              	.L719:
 958:src/xeq.c     **** 		default:;
 9687              		.loc 1 958 4 view .LVU2551
 9688 0092 0B4A     		ldr	r2, .L730+20
 9689 0094 2946     		mov	r1, r5
 9690 0096 2846     		mov	r0, r5
 9691 0098 FFF7FEFF 		bl	dn_multiply
 9692              	.LVL697:
 9693 009c D9E7     		b	.L720
 9694              	.L728:
 952:src/xeq.c     **** 			break;
 9695              		.loc 1 952 4 view .LVU2552
 9696 009e 064A     		ldr	r2, .L730+12
 9697 00a0 2946     		mov	r1, r5
 9698 00a2 2846     		mov	r0, r5
 9699 00a4 FFF7FEFF 		bl	dn_multiply
 9700              	.LVL698:
 953:src/xeq.c     **** 		case TRIG_RAD:
 9701              		.loc 1 953 4 view .LVU2553
 9702 00a8 D3E7     		b	.L720
 9703              	.L731:
 9704 00aa 00BF     		.align	2
 9705              	.L730:
 9706 00ac 00000000 		.word	StateWhileOn
 9707 00b0 00000000 		.word	XromParams
 9708 00b4 00000000 		.word	main_ram
 9709 00b8 00000000 		.word	const_360
 9710 00bc 00000000 		.word	const_2PI
 9711 00c0 00000000 		.word	const_400
 9712              		.cfi_endproc
 9713              	.LFE75:
 9715              		.section	.text.cpx_nop,"ax",%progbits
 9716              		.align	1
 9717              		.p2align 2,,3
 9718              		.global	cpx_nop
 9719              		.syntax unified
 9720              		.thumb
 9721              		.thumb_func
 9722              		.fpu fpv4-sp-d16
 9724              	cpx_nop:
 9725              	.LVL699:
 9726              	.LFB77:
 991:src/xeq.c     ****   //  print_debug(1,cur_shift());
 9727              		.loc 1 991 29 view -0
 9728              		.cfi_startproc
 9729              		@ args = 0, pretend = 0, frame = 40
 9730              		@ frame_needed = 0, uses_anonymous_args = 0
 993:src/xeq.c     ****   //  print_debug(2,cur_shift());
 9731              		.loc 1 993 3 view .LVU2555
 991:src/xeq.c     ****   //  print_debug(1,cur_shift());
 9732              		.loc 1 991 29 is_stmt 0 view .LVU2556
 9733 0000 10B5     		push	{r4, lr}
 9734              		.cfi_def_cfa_offset 8
 9735              		.cfi_offset 4, -8
 9736              		.cfi_offset 14, -4
 9737 0002 0446     		mov	r4, r0
 9738 0004 8AB0     		sub	sp, sp, #40
ARM GAS  /tmp/ccaPnj5t.s 			page 313


 9739              		.cfi_def_cfa_offset 48
 993:src/xeq.c     ****   //  print_debug(2,cur_shift());
 9740              		.loc 1 993 3 view .LVU2557
 9741 0006 FFF7FEFF 		bl	reset_shift
 9742              	.LVL700:
 995:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
 9743              		.loc 1 995 2 is_stmt 1 view .LVU2558
 9744 000a A4F1C100 		sub	r0, r4, #193
 9745 000e 0B28     		cmp	r0, #11
 9746 0010 13D8     		bhi	.L750
 9747 0012 DFE800F0 		tbb	[pc, r0]
 9748              	.L735:
 9749 0016 21       		.byte	(.L744-.L735)/2
 9750 0017 3B       		.byte	(.L748-.L735)/2
 9751 0018 06       		.byte	(.L742-.L735)/2
 9752 0019 59       		.byte	(.L741-.L735)/2
 9753 001a 68       		.byte	(.L740-.L735)/2
 9754 001b 70       		.byte	(.L739-.L735)/2
 9755 001c 12       		.byte	(.L750-.L735)/2
 9756 001d 12       		.byte	(.L750-.L735)/2
 9757 001e 77       		.byte	(.L738-.L735)/2
 9758 001f 80       		.byte	(.L737-.L735)/2
 9759 0020 89       		.byte	(.L736-.L735)/2
 9760 0021 94       		.byte	(.L734-.L735)/2
 9761              		.p2align 1
 9762              	.L742:
 9763              	.LBB2085:
1035:src/xeq.c     **** 		getY(&y);
 9764              		.loc 1 1035 3 view .LVU2559
1036:src/xeq.c     **** 		dn_minus(&y, &y);
 9765              		.loc 1 1036 3 view .LVU2560
 9766              	.LVL701:
 9767              	.LBB2086:
 9768              	.LBI2086:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 9769              		.loc 1 826 6 view .LVU2561
 9770              	.LBB2087:
 827:src/xeq.c     **** }
 9771              		.loc 1 827 2 view .LVU2562
 9772 0022 6521     		movs	r1, #101
 9773 0024 01A8     		add	r0, sp, #4
 9774              	.LVL702:
 827:src/xeq.c     **** }
 9775              		.loc 1 827 2 is_stmt 0 view .LVU2563
 9776 0026 FFF7FEFF 		bl	getRegister
 9777              	.LVL703:
 827:src/xeq.c     **** }
 9778              		.loc 1 827 2 view .LVU2564
 9779              	.LBE2087:
 9780              	.LBE2086:
1037:src/xeq.c     **** 		setY(&y);
 9781              		.loc 1 1037 3 is_stmt 1 view .LVU2565
 9782 002a 01A9     		add	r1, sp, #4
 9783 002c 0846     		mov	r0, r1
 9784 002e FFF7FEFF 		bl	dn_minus
 9785              	.LVL704:
1038:src/xeq.c     **** 		}
ARM GAS  /tmp/ccaPnj5t.s 			page 314


 9786              		.loc 1 1038 3 view .LVU2566
 9787              	.LBB2088:
 9788              	.LBI2088:
 830:src/xeq.c     **** 	setRegister(regY_idx, y);
 9789              		.loc 1 830 6 view .LVU2567
 9790              	.LBB2089:
 831:src/xeq.c     **** }
 9791              		.loc 1 831 2 view .LVU2568
 9792 0032 01A9     		add	r1, sp, #4
 9793              	.LVL705:
 831:src/xeq.c     **** }
 9794              		.loc 1 831 2 is_stmt 0 view .LVU2569
 9795 0034 6520     		movs	r0, #101
 9796 0036 FFF7FEFF 		bl	setRegister
 9797              	.LVL706:
 9798              	.L750:
 831:src/xeq.c     **** }
 9799              		.loc 1 831 2 view .LVU2570
 9800              	.LBE2089:
 9801              	.LBE2088:
 9802              	.LBE2085:
1040:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
 9803              		.loc 1 1040 3 is_stmt 1 view .LVU2571
 9804 003a 4A4B     		ldr	r3, .L751
 9805 003c 1A68     		ldr	r2, [r3]
 9806              	.L745:
1061:src/xeq.c     **** 	}
 9807              		.loc 1 1061 10 view .LVU2572
1063:src/xeq.c     **** 	CLEAR_POLAR_READY;
 9808              		.loc 1 1063 2 view .LVU2573
 9809              	.LBB2090:
 9810              	.LBI2090:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 9811              		.loc 1 533 13 view .LVU2574
 9812              	.LBB2091:
 534:src/xeq.c     **** }
 9813              		.loc 1 534 2 view .LVU2575
 534:src/xeq.c     **** }
 9814              		.loc 1 534 20 is_stmt 0 view .LVU2576
 9815 003e 4A4B     		ldr	r3, .L751+4
 9816 0040 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 9817 0042 0120     		movs	r0, #1
 9818 0044 60F38711 		bfi	r1, r0, #6, #2
 9819 0048 1975     		strb	r1, [r3, #20]
 9820              	.LBE2091:
 9821              	.LBE2090:
1064:src/xeq.c     **** }
 9822              		.loc 1 1064 2 is_stmt 1 view .LVU2577
 9823 004a 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 9824 004e 0343     		orrs	r3, r3, r0
 9825 0050 82F8AD37 		strb	r3, [r2, #1965]
 9826              	.L732:
1065:src/xeq.c     **** #endif
 9827              		.loc 1 1065 1 is_stmt 0 view .LVU2578
 9828 0054 0AB0     		add	sp, sp, #40
 9829              		.cfi_remember_state
 9830              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccaPnj5t.s 			page 315


 9831              		@ sp needed
 9832 0056 10BD     		pop	{r4, pc}
 9833              	.L744:
 9834              		.cfi_restore_state
1003:src/xeq.c     **** 			INIT_8;
 9835              		.loc 1 1003 3 is_stmt 1 view .LVU2579
1003:src/xeq.c     **** 			INIT_8;
 9836              		.loc 1 1003 7 is_stmt 0 view .LVU2580
 9837 0058 424C     		ldr	r4, .L751
 9838 005a 2268     		ldr	r2, [r4]
1009:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9839              		.loc 1 1009 3 is_stmt 1 view .LVU2581
1003:src/xeq.c     **** 			INIT_8;
 9840              		.loc 1 1003 6 is_stmt 0 view .LVU2582
 9841 005c 92F8EA17 		ldrb	r1, [r2, #2026]	@ zero_extendqisi2
1009:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9842              		.loc 1 1009 3 view .LVU2583
 9843 0060 92F8AC07 		ldrb	r0, [r2, #1964]	@ zero_extendqisi2
 9844 0064 01F00803 		and	r3, r1, #8
 9845 0068 20F00900 		bic	r0, r0, #9
 9846 006c 43F00103 		orr	r3, r3, #1
 9847 0070 0343     		orrs	r3, r3, r0
1010:src/xeq.c     **** #ifdef DM42
 9848              		.loc 1 1010 22 view .LVU2584
 9849 0072 41F00801 		orr	r1, r1, #8
 9850 0076 82F8EA17 		strb	r1, [r2, #2026]
1009:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9851              		.loc 1 1009 3 view .LVU2585
 9852 007a 82F8AC37 		strb	r3, [r2, #1964]
1010:src/xeq.c     **** #ifdef DM42
 9853              		.loc 1 1010 3 is_stmt 1 view .LVU2586
1012:src/xeq.c     **** 		display_current_menu();
 9854              		.loc 1 1012 3 view .LVU2587
 9855 007e 1120     		movs	r0, #17
 9856 0080 FFF7FEFF 		bl	set_menu
 9857              	.LVL707:
1013:src/xeq.c     **** #endif
 9858              		.loc 1 1013 3 view .LVU2588
 9859 0084 FFF7FEFF 		bl	display_current_menu
 9860              	.LVL708:
1015:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
 9861              		.loc 1 1015 3 view .LVU2589
 9862 0088 2268     		ldr	r2, [r4]
 9863 008a D8E7     		b	.L745
 9864              	.L748:
 9865 008c 354C     		ldr	r4, .L751
 9866              	.L743:
1024:src/xeq.c     **** 		UNLOCK_C;
 9867              		.loc 1 1024 3 view .LVU2590
 9868 008e 0120     		movs	r0, #1
 9869 0090 FFF7FEFF 		bl	finish_cpx_entry
 9870              	.LVL709:
1025:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9871              		.loc 1 1025 3 view .LVU2591
 9872 0094 2368     		ldr	r3, [r4]
1027:src/xeq.c     **** #ifdef DM42
 9873              		.loc 1 1027 21 is_stmt 0 view .LVU2592
ARM GAS  /tmp/ccaPnj5t.s 			page 316


 9874 0096 3449     		ldr	r1, .L751+4
1025:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9875              		.loc 1 1025 3 view .LVU2593
 9876 0098 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
1026:src/xeq.c     **** 		State2.wascomplex = 0;
 9877              		.loc 1 1026 22 view .LVU2594
 9878 009c 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
1025:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9879              		.loc 1 1025 3 view .LVU2595
 9880 00a0 6FF30002 		bfc	r2, #0, #1
1026:src/xeq.c     **** 		State2.wascomplex = 0;
 9881              		.loc 1 1026 22 view .LVU2596
 9882 00a4 C2F3C004 		ubfx	r4, r2, #3, #1
 9883 00a8 64F3C300 		bfi	r0, r4, #3, #1
 9884 00ac 83F8EA07 		strb	r0, [r3, #2026]
1027:src/xeq.c     **** #ifdef DM42
 9885              		.loc 1 1027 21 view .LVU2597
 9886 00b0 087D     		ldrb	r0, [r1, #20]	@ zero_extendqisi2
1025:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9887              		.loc 1 1025 3 view .LVU2598
 9888 00b2 83F8AC27 		strb	r2, [r3, #1964]
1026:src/xeq.c     **** 		State2.wascomplex = 0;
 9889              		.loc 1 1026 3 is_stmt 1 view .LVU2599
1027:src/xeq.c     **** #ifdef DM42
 9890              		.loc 1 1027 3 view .LVU2600
1027:src/xeq.c     **** #ifdef DM42
 9891              		.loc 1 1027 21 is_stmt 0 view .LVU2601
 9892 00b6 6FF38710 		bfc	r0, #6, #2
 9893 00ba 0875     		strb	r0, [r1, #20]
1029:src/xeq.c     **** 		display_current_menu();
 9894              		.loc 1 1029 3 is_stmt 1 view .LVU2602
 9895 00bc FFF7FEFF 		bl	set_default_menu
 9896              	.LVL710:
1030:src/xeq.c     **** #endif
 9897              		.loc 1 1030 3 view .LVU2603
 9898 00c0 FFF7FEFF 		bl	display_current_menu
 9899              	.LVL711:
1032:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
 9900              		.loc 1 1032 3 view .LVU2604
1065:src/xeq.c     **** #endif
 9901              		.loc 1 1065 1 is_stmt 0 view .LVU2605
 9902 00c4 0AB0     		add	sp, sp, #40
 9903              		.cfi_remember_state
 9904              		.cfi_def_cfa_offset 8
 9905              		@ sp needed
 9906 00c6 10BD     		pop	{r4, pc}
 9907              	.L741:
 9908              		.cfi_restore_state
 9909              	.LBB2092:
1043:src/xeq.c     **** 		getX(&x);
 9910              		.loc 1 1043 3 is_stmt 1 view .LVU2606
1044:src/xeq.c     **** 		dn_minus(&x, &x);
 9911              		.loc 1 1044 3 view .LVU2607
 9912              	.LVL712:
 9913              	.LBB2093:
 9914              	.LBI2093:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
ARM GAS  /tmp/ccaPnj5t.s 			page 317


 9915              		.loc 1 818 12 view .LVU2608
 9916              	.LBB2094:
 819:src/xeq.c     **** }
 9917              		.loc 1 819 2 view .LVU2609
 819:src/xeq.c     **** }
 9918              		.loc 1 819 9 is_stmt 0 view .LVU2610
 9919 00c8 6421     		movs	r1, #100
 9920 00ca 01A8     		add	r0, sp, #4
 9921              	.LVL713:
 819:src/xeq.c     **** }
 9922              		.loc 1 819 9 view .LVU2611
 9923 00cc FFF7FEFF 		bl	getRegister
 9924              	.LVL714:
 819:src/xeq.c     **** }
 9925              		.loc 1 819 9 view .LVU2612
 9926              	.LBE2094:
 9927              	.LBE2093:
1045:src/xeq.c     **** 		setX(&x);
 9928              		.loc 1 1045 3 is_stmt 1 view .LVU2613
 9929 00d0 01A9     		add	r1, sp, #4
 9930 00d2 0846     		mov	r0, r1
 9931 00d4 FFF7FEFF 		bl	dn_minus
 9932              	.LVL715:
1046:src/xeq.c     **** 		}
 9933              		.loc 1 1046 3 view .LVU2614
 9934              	.LBB2095:
 9935              	.LBI2095:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 9936              		.loc 1 822 6 view .LVU2615
 9937              	.LBB2096:
 823:src/xeq.c     **** }
 9938              		.loc 1 823 2 view .LVU2616
 9939 00d8 01A9     		add	r1, sp, #4
 9940              	.LVL716:
 823:src/xeq.c     **** }
 9941              		.loc 1 823 2 is_stmt 0 view .LVU2617
 9942 00da 6420     		movs	r0, #100
 9943 00dc FFF7FEFF 		bl	setRegister
 9944              	.LVL717:
 823:src/xeq.c     **** }
 9945              		.loc 1 823 2 view .LVU2618
 9946              	.LBE2096:
 9947              	.LBE2095:
 9948              	.LBE2092:
1048:src/xeq.c     **** 	case OP_C_IM: // zero real part
 9949              		.loc 1 1048 3 is_stmt 1 view .LVU2619
 9950 00e0 204B     		ldr	r3, .L751
 9951 00e2 1A68     		ldr	r2, [r3]
 9952 00e4 ABE7     		b	.L745
 9953              	.L740:
1053:src/xeq.c     **** 		break;
 9954              		.loc 1 1053 3 view .LVU2620
 9955              	.LBB2097:
 9956              	.LBI2097:
1536:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 9957              		.loc 1 1536 6 view .LVU2621
 9958              	.LBB2098:
ARM GAS  /tmp/ccaPnj5t.s 			page 318


1537:src/xeq.c     **** }
 9959              		.loc 1 1537 2 view .LVU2622
 9960 00e6 6520     		movs	r0, #101
 9961 00e8 FFF7FEFF 		bl	get_reg_n
 9962              	.LVL718:
 9963 00ec FFF7FEFF 		bl	set_zero
 9964              	.LVL719:
 9965 00f0 1C4B     		ldr	r3, .L751
 9966 00f2 1A68     		ldr	r2, [r3]
1538:src/xeq.c     **** 
 9967              		.loc 1 1538 1 is_stmt 0 view .LVU2623
 9968 00f4 A3E7     		b	.L745
 9969              	.L739:
 9970              	.LBE2098:
 9971              	.LBE2097:
1050:src/xeq.c     **** 		break;
 9972              		.loc 1 1050 3 is_stmt 1 view .LVU2624
 9973              	.LBB2099:
 9974              	.LBI2099:
1532:src/xeq.c     **** 	set_zero(StackBase);
 9975              		.loc 1 1532 6 view .LVU2625
 9976              	.LBB2100:
1533:src/xeq.c     **** }
 9977              		.loc 1 1533 2 view .LVU2626
 9978 00f6 1D4B     		ldr	r3, .L751+8
 9979 00f8 1868     		ldr	r0, [r3]
 9980 00fa FFF7FEFF 		bl	set_zero
 9981              	.LVL720:
 9982 00fe 194B     		ldr	r3, .L751
 9983 0100 1A68     		ldr	r2, [r3]
1534:src/xeq.c     **** 
 9984              		.loc 1 1534 1 is_stmt 0 view .LVU2627
 9985 0102 9CE7     		b	.L745
 9986              	.L738:
 9987              	.LBE2100:
 9988              	.LBE2099:
1056:src/xeq.c     **** 		break;
 9989              		.loc 1 1056 3 is_stmt 1 view .LVU2628
 9990 0104 174B     		ldr	r3, .L751
 9991 0106 1A68     		ldr	r2, [r3]
 9992 0108 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 9993 010c 6FF34513 		bfc	r3, #5, #1
 9994 0110 82F8AC37 		strb	r3, [r2, #1964]
1057:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
 9995              		.loc 1 1057 3 view .LVU2629
 9996 0114 93E7     		b	.L745
 9997              	.L737:
1059:src/xeq.c     **** 		break;
 9998              		.loc 1 1059 3 view .LVU2630
 9999 0116 134B     		ldr	r3, .L751
 10000 0118 1A68     		ldr	r2, [r3]
 10001 011a 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 10002 011e 43F02003 		orr	r3, r3, #32
 10003 0122 82F8AC37 		strb	r3, [r2, #1964]
1060:src/xeq.c     **** 	default:;
 10004              		.loc 1 1060 3 view .LVU2631
 10005 0126 8AE7     		b	.L745
ARM GAS  /tmp/ccaPnj5t.s 			page 319


 10006              	.L736:
 997:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10007              		.loc 1 997 10 view .LVU2632
 10008 0128 0E4B     		ldr	r3, .L751
 10009 012a 1A68     		ldr	r2, [r3]
 998:src/xeq.c     **** 		CLEAR_IMAG;
 10010              		.loc 1 998 3 view .LVU2633
 999:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
 10011              		.loc 1 999 3 view .LVU2634
1000:src/xeq.c     **** 		return;
 10012              		.loc 1 1000 3 view .LVU2635
 998:src/xeq.c     **** 		CLEAR_IMAG;
 10013              		.loc 1 998 3 is_stmt 0 view .LVU2636
 10014 012c 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
 10015 0130 03F03903 		and	r3, r3, #57
 10016 0134 43F04003 		orr	r3, r3, #64
 10017 0138 82F8AC37 		strb	r3, [r2, #1964]
1001:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
 10018              		.loc 1 1001 3 is_stmt 1 view .LVU2637
 10019 013c 8AE7     		b	.L732
 10020              	.L734:
1017:src/xeq.c     **** 			SET_CPX_NO;
 10021              		.loc 1 1017 3 view .LVU2638
1017:src/xeq.c     **** 			SET_CPX_NO;
 10022              		.loc 1 1017 8 is_stmt 0 view .LVU2639
 10023 013e 094C     		ldr	r4, .L751
 10024 0140 2268     		ldr	r2, [r4]
1017:src/xeq.c     **** 			SET_CPX_NO;
 10025              		.loc 1 1017 7 view .LVU2640
 10026 0142 92F8AC37 		ldrb	r3, [r2, #1964]	@ zero_extendqisi2
1017:src/xeq.c     **** 			SET_CPX_NO;
 10027              		.loc 1 1017 6 view .LVU2641
 10028 0146 03F04101 		and	r1, r3, #65
 10029 014a 4129     		cmp	r1, #65
 10030 014c 04D0     		beq	.L747
1018:src/xeq.c     **** 			UNLOCK_C; //just in case
 10031              		.loc 1 1018 4 is_stmt 1 view .LVU2642
1019:src/xeq.c     **** 			return;
 10032              		.loc 1 1019 4 view .LVU2643
 10033 014e 23F04103 		bic	r3, r3, #65
 10034 0152 82F8AC37 		strb	r3, [r2, #1964]
1020:src/xeq.c     **** 		}
 10035              		.loc 1 1020 4 view .LVU2644
 10036 0156 7DE7     		b	.L732
 10037              	.L747:
1022:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
 10038              		.loc 1 1022 3 view .LVU2645
 10039 0158 6FF38613 		bfc	r3, #6, #1
 10040 015c 82F8AC37 		strb	r3, [r2, #1964]
 10041 0160 95E7     		b	.L743
 10042              	.L752:
 10043 0162 00BF     		.align	2
 10044              	.L751:
 10045 0164 00000000 		.word	main_ram
 10046 0168 00000000 		.word	StateWhileOn
 10047 016c 00000000 		.word	StackBase
 10048              		.cfi_endproc
ARM GAS  /tmp/ccaPnj5t.s 			page 320


 10049              	.LFE77:
 10051              		.section	.text.get_reg_n_int,"ax",%progbits
 10052              		.align	1
 10053              		.p2align 2,,3
 10054              		.global	get_reg_n_int
 10055              		.syntax unified
 10056              		.thumb
 10057              		.thumb_func
 10058              		.fpu fpv4-sp-d16
 10060              	get_reg_n_int:
 10061              	.LVL721:
 10062              	.LFB93:
1398:src/xeq.c     **** 	long long int ll;
 10063              		.loc 1 1398 40 view -0
 10064              		.cfi_startproc
 10065              		@ args = 0, pretend = 0, frame = 8
 10066              		@ frame_needed = 0, uses_anonymous_args = 0
1399:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
 10067              		.loc 1 1399 2 view .LVU2647
1400:src/xeq.c     **** 	return ll;
 10068              		.loc 1 1400 2 view .LVU2648
1398:src/xeq.c     **** 	long long int ll;
 10069              		.loc 1 1398 40 is_stmt 0 view .LVU2649
 10070 0000 00B5     		push	{lr}
 10071              		.cfi_def_cfa_offset 4
 10072              		.cfi_offset 14, -4
 10073 0002 83B0     		sub	sp, sp, #12
 10074              		.cfi_def_cfa_offset 16
1400:src/xeq.c     **** 	return ll;
 10075              		.loc 1 1400 13 view .LVU2650
 10076 0004 FFF7FEFF 		bl	get_reg_n
 10077              	.LVL722:
1400:src/xeq.c     **** 	return ll;
 10078              		.loc 1 1400 2 view .LVU2651
 10079 0008 0822     		movs	r2, #8
1400:src/xeq.c     **** 	return ll;
 10080              		.loc 1 1400 13 view .LVU2652
 10081 000a 0146     		mov	r1, r0
1400:src/xeq.c     **** 	return ll;
 10082              		.loc 1 1400 2 view .LVU2653
 10083 000c 6846     		mov	r0, sp
 10084 000e FFF7FEFF 		bl	xcopy
 10085              	.LVL723:
1401:src/xeq.c     **** }
 10086              		.loc 1 1401 2 is_stmt 1 view .LVU2654
1402:src/xeq.c     **** 
 10087              		.loc 1 1402 1 is_stmt 0 view .LVU2655
 10088 0012 DDE90001 		ldrd	r0, [sp]
 10089 0016 03B0     		add	sp, sp, #12
 10090              		.cfi_def_cfa_offset 4
 10091              		@ sp needed
 10092 0018 5DF804FB 		ldr	pc, [sp], #4
 10093              		.cfi_endproc
 10094              	.LFE93:
 10096              		.section	.text.storcl_intop,"ax",%progbits
 10097              		.align	1
 10098              		.p2align 2,,3
ARM GAS  /tmp/ccaPnj5t.s 			page 321


 10099              		.syntax unified
 10100              		.thumb
 10101              		.thumb_func
 10102              		.fpu fpv4-sp-d16
 10104              	storcl_intop:
 10105              	.LVL724:
 10106              	.LFB115:
1667:src/xeq.c     **** 	long long int x, y;
 10107              		.loc 1 1667 83 is_stmt 1 view -0
 10108              		.cfi_startproc
 10109              		@ args = 0, pretend = 0, frame = 0
 10110              		@ frame_needed = 0, uses_anonymous_args = 0
1668:src/xeq.c     **** 
 10111              		.loc 1 1668 2 view .LVU2657
1670:src/xeq.c     **** 	y = get_reg_n_int(index);
 10112              		.loc 1 1670 2 view .LVU2658
 10113              	.LBB2101:
 10114              	.LBI2101:
1424:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10115              		.loc 1 1424 15 view .LVU2659
 10116              	.LBB2102:
1425:src/xeq.c     **** }
 10117              		.loc 1 1425 2 view .LVU2660
 10118              	.LBE2102:
 10119              	.LBE2101:
1667:src/xeq.c     **** 	long long int x, y;
 10120              		.loc 1 1667 83 is_stmt 0 view .LVU2661
 10121 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 10122              		.cfi_def_cfa_offset 32
 10123              		.cfi_offset 3, -32
 10124              		.cfi_offset 4, -28
 10125              		.cfi_offset 5, -24
 10126              		.cfi_offset 6, -20
 10127              		.cfi_offset 7, -16
 10128              		.cfi_offset 8, -12
 10129              		.cfi_offset 9, -8
 10130              		.cfi_offset 14, -4
1667:src/xeq.c     **** 	long long int x, y;
 10131              		.loc 1 1667 83 view .LVU2662
 10132 0004 0446     		mov	r4, r0
 10133              	.LBB2106:
 10134              	.LBB2103:
1425:src/xeq.c     **** }
 10135              		.loc 1 1425 9 view .LVU2663
 10136 0006 6420     		movs	r0, #100
 10137              	.LVL725:
1425:src/xeq.c     **** }
 10138              		.loc 1 1425 9 view .LVU2664
 10139              	.LBE2103:
 10140              	.LBE2106:
1667:src/xeq.c     **** 	long long int x, y;
 10141              		.loc 1 1667 83 view .LVU2665
 10142 0008 8946     		mov	r9, r1
 10143 000a 9846     		mov	r8, r3
 10144 000c 1646     		mov	r6, r2
 10145              	.LBB2107:
 10146              	.LBB2104:
ARM GAS  /tmp/ccaPnj5t.s 			page 322


1425:src/xeq.c     **** }
 10147              		.loc 1 1425 9 view .LVU2666
 10148 000e FFF7FEFF 		bl	get_reg_n_int
 10149              	.LVL726:
1425:src/xeq.c     **** }
 10150              		.loc 1 1425 9 view .LVU2667
 10151 0012 0746     		mov	r7, r0
 10152              	.LBE2104:
 10153              	.LBE2107:
1671:src/xeq.c     **** 
 10154              		.loc 1 1671 6 view .LVU2668
 10155 0014 4846     		mov	r0, r9
 10156              	.LBB2108:
 10157              	.LBB2105:
1425:src/xeq.c     **** }
 10158              		.loc 1 1425 9 view .LVU2669
 10159 0016 0D46     		mov	r5, r1
 10160              	.LVL727:
1425:src/xeq.c     **** }
 10161              		.loc 1 1425 9 view .LVU2670
 10162              	.LBE2105:
 10163              	.LBE2108:
1671:src/xeq.c     **** 
 10164              		.loc 1 1671 2 is_stmt 1 view .LVU2671
1671:src/xeq.c     **** 
 10165              		.loc 1 1671 6 is_stmt 0 view .LVU2672
 10166 0018 FFF7FEFF 		bl	get_reg_n_int
 10167              	.LVL728:
1673:src/xeq.c     **** 		const long long int t = x;
 10168              		.loc 1 1673 2 is_stmt 1 view .LVU2673
1673:src/xeq.c     **** 		const long long int t = x;
 10169              		.loc 1 1673 5 is_stmt 0 view .LVU2674
 10170 001c B8F1000F 		cmp	r8, #0
 10171 0020 05D0     		beq	.L756
 10172 0022 3A46     		mov	r2, r7
 10173 0024 2B46     		mov	r3, r5
 10174              	.LBB2109:
1675:src/xeq.c     **** 		y = t;
 10175              		.loc 1 1675 5 view .LVU2675
 10176 0026 0746     		mov	r7, r0
 10177              	.LVL729:
1675:src/xeq.c     **** 		y = t;
 10178              		.loc 1 1675 5 view .LVU2676
 10179 0028 0D46     		mov	r5, r1
 10180              	.LVL730:
1676:src/xeq.c     **** 	}
 10181              		.loc 1 1676 5 view .LVU2677
 10182 002a 1046     		mov	r0, r2
 10183              	.LVL731:
1676:src/xeq.c     **** 	}
 10184              		.loc 1 1676 5 view .LVU2678
 10185 002c 1946     		mov	r1, r3
 10186              	.LVL732:
 10187              	.L756:
1676:src/xeq.c     **** 	}
 10188              		.loc 1 1676 5 view .LVU2679
 10189              	.LBE2109:
ARM GAS  /tmp/ccaPnj5t.s 			page 323


1679:src/xeq.c     **** 	case 1:
 10190              		.loc 1 1679 2 is_stmt 1 view .LVU2680
 10191 002e 013C     		subs	r4, r4, #1
 10192 0030 052C     		cmp	r4, #5
 10193 0032 3AD8     		bhi	.L765
 10194 0034 DFE804F0 		tbb	[pc, r4]
 10195              	.L759:
 10196 0038 0C       		.byte	(.L764-.L759)/2
 10197 0039 15       		.byte	(.L763-.L759)/2
 10198 003a 1E       		.byte	(.L762-.L759)/2
 10199 003b 27       		.byte	(.L761-.L759)/2
 10200 003c 30       		.byte	(.L760-.L759)/2
 10201 003d 03       		.byte	(.L758-.L759)/2
 10202              		.p2align 1
 10203              	.L758:
1696:src/xeq.c     **** 		break;
 10204              		.loc 1 1696 3 view .LVU2681
1696:src/xeq.c     **** 		break;
 10205              		.loc 1 1696 8 is_stmt 0 view .LVU2682
 10206 003e 3A46     		mov	r2, r7
 10207 0040 2B46     		mov	r3, r5
 10208 0042 FFF7FEFF 		bl	intMax
 10209              	.LVL733:
1696:src/xeq.c     **** 		break;
 10210              		.loc 1 1696 6 view .LVU2683
 10211 0046 C6E90001 		strd	r0, [r6]
1697:src/xeq.c     **** 	default:
 10212              		.loc 1 1697 3 is_stmt 1 view .LVU2684
1701:src/xeq.c     **** }
 10213              		.loc 1 1701 9 is_stmt 0 view .LVU2685
 10214 004a 0020     		movs	r0, #0
 10215              	.L755:
1702:src/xeq.c     **** 
 10216              		.loc 1 1702 1 view .LVU2686
 10217 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10218              	.LVL734:
 10219              	.L764:
1681:src/xeq.c     **** 		break;
 10220              		.loc 1 1681 3 is_stmt 1 view .LVU2687
1681:src/xeq.c     **** 		break;
 10221              		.loc 1 1681 8 is_stmt 0 view .LVU2688
 10222 0050 3A46     		mov	r2, r7
 10223 0052 2B46     		mov	r3, r5
 10224 0054 FFF7FEFF 		bl	intAdd
 10225              	.LVL735:
1681:src/xeq.c     **** 		break;
 10226              		.loc 1 1681 6 view .LVU2689
 10227 0058 C6E90001 		strd	r0, [r6]
1682:src/xeq.c     **** 	case 2:
 10228              		.loc 1 1682 3 is_stmt 1 view .LVU2690
1701:src/xeq.c     **** }
 10229              		.loc 1 1701 9 is_stmt 0 view .LVU2691
 10230 005c 0020     		movs	r0, #0
1702:src/xeq.c     **** 
 10231              		.loc 1 1702 1 view .LVU2692
 10232 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10233              	.LVL736:
ARM GAS  /tmp/ccaPnj5t.s 			page 324


 10234              	.L763:
1684:src/xeq.c     **** 		break;
 10235              		.loc 1 1684 3 is_stmt 1 view .LVU2693
1684:src/xeq.c     **** 		break;
 10236              		.loc 1 1684 8 is_stmt 0 view .LVU2694
 10237 0062 3A46     		mov	r2, r7
 10238 0064 2B46     		mov	r3, r5
 10239 0066 FFF7FEFF 		bl	intSubtract
 10240              	.LVL737:
1684:src/xeq.c     **** 		break;
 10241              		.loc 1 1684 6 view .LVU2695
 10242 006a C6E90001 		strd	r0, [r6]
1685:src/xeq.c     **** 	case 3:
 10243              		.loc 1 1685 3 is_stmt 1 view .LVU2696
1701:src/xeq.c     **** }
 10244              		.loc 1 1701 9 is_stmt 0 view .LVU2697
 10245 006e 0020     		movs	r0, #0
1702:src/xeq.c     **** 
 10246              		.loc 1 1702 1 view .LVU2698
 10247 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10248              	.LVL738:
 10249              	.L762:
1687:src/xeq.c     **** 		break;
 10250              		.loc 1 1687 3 is_stmt 1 view .LVU2699
1687:src/xeq.c     **** 		break;
 10251              		.loc 1 1687 8 is_stmt 0 view .LVU2700
 10252 0074 3A46     		mov	r2, r7
 10253 0076 2B46     		mov	r3, r5
 10254 0078 FFF7FEFF 		bl	intMultiply
 10255              	.LVL739:
1687:src/xeq.c     **** 		break;
 10256              		.loc 1 1687 6 view .LVU2701
 10257 007c C6E90001 		strd	r0, [r6]
1688:src/xeq.c     **** 	case 4:
 10258              		.loc 1 1688 3 is_stmt 1 view .LVU2702
1701:src/xeq.c     **** }
 10259              		.loc 1 1701 9 is_stmt 0 view .LVU2703
 10260 0080 0020     		movs	r0, #0
1702:src/xeq.c     **** 
 10261              		.loc 1 1702 1 view .LVU2704
 10262 0082 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10263              	.LVL740:
 10264              	.L761:
1690:src/xeq.c     **** 		break;
 10265              		.loc 1 1690 3 is_stmt 1 view .LVU2705
1690:src/xeq.c     **** 		break;
 10266              		.loc 1 1690 8 is_stmt 0 view .LVU2706
 10267 0086 3A46     		mov	r2, r7
 10268 0088 2B46     		mov	r3, r5
 10269 008a FFF7FEFF 		bl	intDivide
 10270              	.LVL741:
1690:src/xeq.c     **** 		break;
 10271              		.loc 1 1690 6 view .LVU2707
 10272 008e C6E90001 		strd	r0, [r6]
1691:src/xeq.c     **** 	case 5:
 10273              		.loc 1 1691 3 is_stmt 1 view .LVU2708
1701:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 325


 10274              		.loc 1 1701 9 is_stmt 0 view .LVU2709
 10275 0092 0020     		movs	r0, #0
1702:src/xeq.c     **** 
 10276              		.loc 1 1702 1 view .LVU2710
 10277 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10278              	.LVL742:
 10279              	.L760:
1693:src/xeq.c     **** 		break;
 10280              		.loc 1 1693 3 is_stmt 1 view .LVU2711
1693:src/xeq.c     **** 		break;
 10281              		.loc 1 1693 8 is_stmt 0 view .LVU2712
 10282 0098 3A46     		mov	r2, r7
 10283 009a 2B46     		mov	r3, r5
 10284 009c FFF7FEFF 		bl	intMin
 10285              	.LVL743:
1693:src/xeq.c     **** 		break;
 10286              		.loc 1 1693 6 view .LVU2713
 10287 00a0 C6E90001 		strd	r0, [r6]
1694:src/xeq.c     **** 	case 6:
 10288              		.loc 1 1694 3 is_stmt 1 view .LVU2714
1701:src/xeq.c     **** }
 10289              		.loc 1 1701 9 is_stmt 0 view .LVU2715
 10290 00a4 0020     		movs	r0, #0
1702:src/xeq.c     **** 
 10291              		.loc 1 1702 1 view .LVU2716
 10292 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10293              	.LVL744:
 10294              	.L765:
1701:src/xeq.c     **** }
 10295              		.loc 1 1701 9 view .LVU2717
 10296 00aa 0120     		movs	r0, #1
 10297              	.LVL745:
1701:src/xeq.c     **** }
 10298              		.loc 1 1701 9 view .LVU2718
 10299 00ac CEE7     		b	.L755
 10300              		.cfi_endproc
 10301              	.LFE115:
 10303 00ae 00BF     		.section	.text.incdec,"ax",%progbits
 10304              		.align	1
 10305              		.p2align 2,,3
 10306              		.syntax unified
 10307              		.thumb
 10308              		.thumb_func
 10309              		.fpu fpv4-sp-d16
 10311              	incdec:
 10312              	.LVL746:
 10313              	.LFB191:
3376:src/xeq.c     **** 	if (is_intmode()) {
 10314              		.loc 1 3376 46 is_stmt 1 view -0
 10315              		.cfi_startproc
 10316              		@ args = 0, pretend = 0, frame = 80
 10317              		@ frame_needed = 0, uses_anonymous_args = 0
3377:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10318              		.loc 1 3377 2 view .LVU2720
3377:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10319              		.loc 1 3377 6 is_stmt 0 view .LVU2721
 10320 0000 244B     		ldr	r3, .L780
ARM GAS  /tmp/ccaPnj5t.s 			page 326


3376:src/xeq.c     **** 	if (is_intmode()) {
 10321              		.loc 1 3376 46 view .LVU2722
 10322 0002 70B5     		push	{r4, r5, r6, lr}
 10323              		.cfi_def_cfa_offset 16
 10324              		.cfi_offset 4, -16
 10325              		.cfi_offset 5, -12
 10326              		.cfi_offset 6, -8
 10327              		.cfi_offset 14, -4
3377:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10328              		.loc 1 3377 6 view .LVU2723
 10329 0004 1B68     		ldr	r3, [r3]
 10330 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3377:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10331              		.loc 1 3377 5 view .LVU2724
 10332 000a DB07     		lsls	r3, r3, #31
3376:src/xeq.c     **** 	if (is_intmode()) {
 10333              		.loc 1 3376 46 view .LVU2725
 10334 000c 94B0     		sub	sp, sp, #80
 10335              		.cfi_def_cfa_offset 96
3376:src/xeq.c     **** 	if (is_intmode()) {
 10336              		.loc 1 3376 46 view .LVU2726
 10337 000e 0D46     		mov	r5, r1
 10338 0010 0446     		mov	r4, r0
3377:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10339              		.loc 1 3377 5 view .LVU2727
 10340 0012 1ED5     		bpl	.L771
 10341              	.LVL747:
 10342              	.LBB2117:
 10343              	.LBI2117:
3376:src/xeq.c     **** 	if (is_intmode()) {
 10344              		.loc 1 3376 12 is_stmt 1 view .LVU2728
 10345              	.LBB2118:
3378:src/xeq.c     **** 		int xs;
 10346              		.loc 1 3378 3 view .LVU2729
3378:src/xeq.c     **** 		int xs;
 10347              		.loc 1 3378 21 is_stmt 0 view .LVU2730
 10348 0014 FFF7FEFF 		bl	get_reg_n_int
 10349              	.LVL748:
3379:src/xeq.c     **** 		unsigned long long int xv;
 10350              		.loc 1 3379 3 is_stmt 1 view .LVU2731
3380:src/xeq.c     **** 
 10351              		.loc 1 3380 3 view .LVU2732
3382:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10352              		.loc 1 3382 3 view .LVU2733
3383:src/xeq.c     **** 		else
 10353              		.loc 1 3383 8 is_stmt 0 view .LVU2734
 10354 0018 0122     		movs	r2, #1
 10355 001a 0023     		movs	r3, #0
3382:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10356              		.loc 1 3382 6 view .LVU2735
 10357 001c 002D     		cmp	r5, #0
 10358 001e 33D1     		bne	.L778
3385:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10359              		.loc 1 3385 4 is_stmt 1 view .LVU2736
3385:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10360              		.loc 1 3385 8 is_stmt 0 view .LVU2737
 10361 0020 FFF7FEFF 		bl	intSubtract
ARM GAS  /tmp/ccaPnj5t.s 			page 327


 10362              	.LVL749:
3385:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10363              		.loc 1 3385 8 view .LVU2738
 10364 0024 0646     		mov	r6, r0
 10365 0026 0D46     		mov	r5, r1
 10366              	.LVL750:
 10367              	.L773:
3386:src/xeq.c     **** 
 10368              		.loc 1 3386 3 is_stmt 1 view .LVU2739
 10369              	.LBB2119:
 10370              	.LBB2120:
1405:src/xeq.c     **** }
 10371              		.loc 1 1405 8 is_stmt 0 view .LVU2740
 10372 0028 2046     		mov	r0, r4
 10373 002a CDE90A65 		strd	r6, r5, [sp, #40]
 10374              	.LVL751:
1405:src/xeq.c     **** }
 10375              		.loc 1 1405 8 view .LVU2741
 10376              	.LBE2120:
 10377              	.LBI2119:
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10378              		.loc 1 1404 6 is_stmt 1 view .LVU2742
 10379              	.LBB2121:
1405:src/xeq.c     **** }
 10380              		.loc 1 1405 2 view .LVU2743
1405:src/xeq.c     **** }
 10381              		.loc 1 1405 8 is_stmt 0 view .LVU2744
 10382 002e FFF7FEFF 		bl	get_reg_n
 10383              	.LVL752:
1405:src/xeq.c     **** }
 10384              		.loc 1 1405 2 view .LVU2745
 10385 0032 0AA9     		add	r1, sp, #40
 10386 0034 0822     		movs	r2, #8
 10387 0036 FFF7FEFF 		bl	xcopy
 10388              	.LVL753:
1405:src/xeq.c     **** }
 10389              		.loc 1 1405 2 view .LVU2746
 10390              	.LBE2121:
 10391              	.LBE2119:
3388:src/xeq.c     **** 		return xv != 0;
 10392              		.loc 1 3388 3 is_stmt 1 view .LVU2747
3388:src/xeq.c     **** 		return xv != 0;
 10393              		.loc 1 3388 8 is_stmt 0 view .LVU2748
 10394 003a 0AAA     		add	r2, sp, #40
 10395 003c 3046     		mov	r0, r6
 10396 003e 2946     		mov	r1, r5
 10397 0040 FFF7FEFF 		bl	extract_value
 10398              	.LVL754:
3389:src/xeq.c     **** 	} else {
 10399              		.loc 1 3389 3 is_stmt 1 view .LVU2749
3389:src/xeq.c     **** 	} else {
 10400              		.loc 1 3389 13 is_stmt 0 view .LVU2750
 10401 0044 50EA0103 		orrs	r3, r0, r1
 10402 0048 14BF     		ite	ne
 10403 004a 0120     		movne	r0, #1
 10404              	.LVL755:
3389:src/xeq.c     **** 	} else {
ARM GAS  /tmp/ccaPnj5t.s 			page 328


 10405              		.loc 1 3389 13 view .LVU2751
 10406 004c 0020     		moveq	r0, #0
 10407              	.LVL756:
3389:src/xeq.c     **** 	} else {
 10408              		.loc 1 3389 13 view .LVU2752
 10409              	.LBE2118:
 10410              	.LBE2117:
3402:src/xeq.c     **** 
 10411              		.loc 1 3402 1 view .LVU2753
 10412 004e 14B0     		add	sp, sp, #80
 10413              		.cfi_remember_state
 10414              		.cfi_def_cfa_offset 16
 10415              		@ sp needed
 10416 0050 70BD     		pop	{r4, r5, r6, pc}
 10417              	.LVL757:
 10418              	.L771:
 10419              		.cfi_restore_state
 10420              	.LBB2123:
3391:src/xeq.c     **** 
 10421              		.loc 1 3391 3 is_stmt 1 view .LVU2754
3393:src/xeq.c     **** 		if (inc)
 10422              		.loc 1 3393 3 view .LVU2755
 10423 0052 01A8     		add	r0, sp, #4
 10424              	.LVL758:
3393:src/xeq.c     **** 		if (inc)
 10425              		.loc 1 3393 3 is_stmt 0 view .LVU2756
 10426 0054 2146     		mov	r1, r4
 10427              	.LVL759:
3393:src/xeq.c     **** 		if (inc)
 10428              		.loc 1 3393 3 view .LVU2757
 10429 0056 FFF7FEFF 		bl	getRegister
 10430              	.LVL760:
3394:src/xeq.c     **** 			dn_inc(&x);
 10431              		.loc 1 3394 3 is_stmt 1 view .LVU2758
3395:src/xeq.c     **** 		else
 10432              		.loc 1 3395 4 is_stmt 0 view .LVU2759
 10433 005a 01A8     		add	r0, sp, #4
3394:src/xeq.c     **** 			dn_inc(&x);
 10434              		.loc 1 3394 6 view .LVU2760
 10435 005c 8DB9     		cbnz	r5, .L779
3397:src/xeq.c     **** 		setRegister(arg, &x);
 10436              		.loc 1 3397 4 is_stmt 1 view .LVU2761
 10437 005e FFF7FEFF 		bl	dn_dec
 10438              	.LVL761:
 10439              	.L776:
3398:src/xeq.c     **** 		decNumberTrunc(&y, &x);
 10440              		.loc 1 3398 3 view .LVU2762
 10441 0062 2046     		mov	r0, r4
 10442 0064 01A9     		add	r1, sp, #4
 10443 0066 FFF7FEFF 		bl	setRegister
 10444              	.LVL762:
3399:src/xeq.c     **** 		return ! dn_eq0(&y);
 10445              		.loc 1 3399 3 view .LVU2763
 10446 006a 01A9     		add	r1, sp, #4
 10447 006c 0AA8     		add	r0, sp, #40
 10448 006e FFF7FEFF 		bl	decNumberTrunc
 10449              	.LVL763:
ARM GAS  /tmp/ccaPnj5t.s 			page 329


3400:src/xeq.c     **** 	}
 10450              		.loc 1 3400 3 view .LVU2764
3400:src/xeq.c     **** 	}
 10451              		.loc 1 3400 12 is_stmt 0 view .LVU2765
 10452 0072 0AA8     		add	r0, sp, #40
 10453 0074 FFF7FEFF 		bl	dn_eq0
 10454              	.LVL764:
3400:src/xeq.c     **** 	}
 10455              		.loc 1 3400 10 view .LVU2766
 10456 0078 B0FA80F0 		clz	r0, r0
 10457 007c 4009     		lsrs	r0, r0, #5
 10458              	.LBE2123:
3402:src/xeq.c     **** 
 10459              		.loc 1 3402 1 view .LVU2767
 10460 007e 14B0     		add	sp, sp, #80
 10461              		.cfi_remember_state
 10462              		.cfi_def_cfa_offset 16
 10463              		@ sp needed
 10464 0080 70BD     		pop	{r4, r5, r6, pc}
 10465              	.LVL765:
 10466              	.L779:
 10467              		.cfi_restore_state
 10468              	.LBB2124:
3395:src/xeq.c     **** 		else
 10469              		.loc 1 3395 4 is_stmt 1 view .LVU2768
 10470 0082 FFF7FEFF 		bl	dn_inc
 10471              	.LVL766:
 10472 0086 ECE7     		b	.L776
 10473              	.LVL767:
 10474              	.L778:
3395:src/xeq.c     **** 		else
 10475              		.loc 1 3395 4 is_stmt 0 view .LVU2769
 10476              	.LBE2124:
 10477              	.LBB2125:
 10478              	.LBB2122:
3383:src/xeq.c     **** 		else
 10479              		.loc 1 3383 4 is_stmt 1 view .LVU2770
3383:src/xeq.c     **** 		else
 10480              		.loc 1 3383 8 is_stmt 0 view .LVU2771
 10481 0088 FFF7FEFF 		bl	intAdd
 10482              	.LVL768:
3383:src/xeq.c     **** 		else
 10483              		.loc 1 3383 8 view .LVU2772
 10484 008c 0646     		mov	r6, r0
 10485 008e 0D46     		mov	r5, r1
 10486              	.LVL769:
3383:src/xeq.c     **** 		else
 10487              		.loc 1 3383 8 view .LVU2773
 10488 0090 CAE7     		b	.L773
 10489              	.L781:
 10490 0092 00BF     		.align	2
 10491              	.L780:
 10492 0094 00000000 		.word	main_ram
 10493              	.LBE2122:
 10494              	.LBE2125:
 10495              		.cfi_endproc
 10496              	.LFE191:
ARM GAS  /tmp/ccaPnj5t.s 			page 330


 10498              		.section	.text.set_reg_n_int,"ax",%progbits
 10499              		.align	1
 10500              		.p2align 2,,3
 10501              		.global	set_reg_n_int
 10502              		.syntax unified
 10503              		.thumb
 10504              		.thumb_func
 10505              		.fpu fpv4-sp-d16
 10507              	set_reg_n_int:
 10508              	.LVL770:
 10509              	.LFB94:
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10510              		.loc 1 1404 49 is_stmt 1 view -0
 10511              		.cfi_startproc
 10512              		@ args = 0, pretend = 0, frame = 8
 10513              		@ frame_needed = 0, uses_anonymous_args = 0
1405:src/xeq.c     **** }
 10514              		.loc 1 1405 2 view .LVU2775
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10515              		.loc 1 1404 49 is_stmt 0 view .LVU2776
 10516 0000 00B5     		push	{lr}
 10517              		.cfi_def_cfa_offset 4
 10518              		.cfi_offset 14, -4
 10519 0002 83B0     		sub	sp, sp, #12
 10520              		.cfi_def_cfa_offset 16
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10521              		.loc 1 1404 49 view .LVU2777
 10522 0004 CDE90023 		strd	r2, [sp]
1405:src/xeq.c     **** }
 10523              		.loc 1 1405 8 view .LVU2778
 10524 0008 FFF7FEFF 		bl	get_reg_n
 10525              	.LVL771:
1405:src/xeq.c     **** }
 10526              		.loc 1 1405 2 view .LVU2779
 10527 000c 0822     		movs	r2, #8
 10528 000e 6946     		mov	r1, sp
 10529 0010 FFF7FEFF 		bl	xcopy
 10530              	.LVL772:
1406:src/xeq.c     **** 
 10531              		.loc 1 1406 1 view .LVU2780
 10532 0014 03B0     		add	sp, sp, #12
 10533              		.cfi_def_cfa_offset 4
 10534              		@ sp needed
 10535 0016 5DF804FB 		ldr	pc, [sp], #4
 10536              		.cfi_endproc
 10537              	.LFE94:
 10539 001a 00BF     		.section	.text.get_reg_n_int_sgn,"ax",%progbits
 10540              		.align	1
 10541              		.p2align 2,,3
 10542              		.global	get_reg_n_int_sgn
 10543              		.syntax unified
 10544              		.thumb
 10545              		.thumb_func
 10546              		.fpu fpv4-sp-d16
 10548              	get_reg_n_int_sgn:
 10549              	.LVL773:
 10550              	.LFB95:
ARM GAS  /tmp/ccaPnj5t.s 			page 331


1410:src/xeq.c     **** 	if (is_intmode()) {
 10551              		.loc 1 1410 63 is_stmt 1 view -0
 10552              		.cfi_startproc
 10553              		@ args = 0, pretend = 0, frame = 40
 10554              		@ frame_needed = 0, uses_anonymous_args = 0
1411:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10555              		.loc 1 1411 2 view .LVU2782
1411:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10556              		.loc 1 1411 6 is_stmt 0 view .LVU2783
 10557 0000 0C4B     		ldr	r3, .L788
1410:src/xeq.c     **** 	if (is_intmode()) {
 10558              		.loc 1 1410 63 view .LVU2784
 10559 0002 10B5     		push	{r4, lr}
 10560              		.cfi_def_cfa_offset 8
 10561              		.cfi_offset 4, -8
 10562              		.cfi_offset 14, -4
1411:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10563              		.loc 1 1411 6 view .LVU2785
 10564 0004 1B68     		ldr	r3, [r3]
 10565 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1411:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10566              		.loc 1 1411 5 view .LVU2786
 10567 000a DB07     		lsls	r3, r3, #31
1410:src/xeq.c     **** 	if (is_intmode()) {
 10568              		.loc 1 1410 63 view .LVU2787
 10569 000c 8AB0     		sub	sp, sp, #40
 10570              		.cfi_def_cfa_offset 48
1410:src/xeq.c     **** 	if (is_intmode()) {
 10571              		.loc 1 1410 63 view .LVU2788
 10572 000e 0C46     		mov	r4, r1
1411:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10573              		.loc 1 1411 5 view .LVU2789
 10574 0010 06D5     		bpl	.L785
 10575              	.LVL774:
 10576              	.LBB2130:
 10577              	.LBI2130:
1410:src/xeq.c     **** 	if (is_intmode()) {
 10578              		.loc 1 1410 24 is_stmt 1 view .LVU2790
 10579              	.LBB2131:
1412:src/xeq.c     **** 	} else {
 10580              		.loc 1 1412 3 view .LVU2791
1412:src/xeq.c     **** 	} else {
 10581              		.loc 1 1412 10 is_stmt 0 view .LVU2792
 10582 0012 FFF7FEFF 		bl	get_reg_n_int
 10583              	.LVL775:
1412:src/xeq.c     **** 	} else {
 10584              		.loc 1 1412 10 view .LVU2793
 10585 0016 2246     		mov	r2, r4
 10586 0018 FFF7FEFF 		bl	extract_value
 10587              	.LVL776:
1412:src/xeq.c     **** 	} else {
 10588              		.loc 1 1412 10 view .LVU2794
 10589              	.LBE2131:
 10590              	.LBE2130:
1419:src/xeq.c     **** 
 10591              		.loc 1 1419 1 view .LVU2795
 10592 001c 0AB0     		add	sp, sp, #40
ARM GAS  /tmp/ccaPnj5t.s 			page 332


 10593              		.cfi_remember_state
 10594              		.cfi_def_cfa_offset 8
 10595              		@ sp needed
 10596 001e 10BD     		pop	{r4, pc}
 10597              	.LVL777:
 10598              	.L785:
 10599              		.cfi_restore_state
1419:src/xeq.c     **** 
 10600              		.loc 1 1419 1 view .LVU2796
 10601 0020 0146     		mov	r1, r0
 10602              	.LVL778:
 10603              	.LBB2132:
1414:src/xeq.c     **** 
 10604              		.loc 1 1414 3 is_stmt 1 view .LVU2797
1416:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10605              		.loc 1 1416 3 view .LVU2798
 10606 0022 01A8     		add	r0, sp, #4
 10607              	.LVL779:
1416:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10608              		.loc 1 1416 3 is_stmt 0 view .LVU2799
 10609 0024 FFF7FEFF 		bl	getRegister
 10610              	.LVL780:
1417:src/xeq.c     **** 	}
 10611              		.loc 1 1417 3 is_stmt 1 view .LVU2800
1417:src/xeq.c     **** 	}
 10612              		.loc 1 1417 10 is_stmt 0 view .LVU2801
 10613 0028 2146     		mov	r1, r4
 10614 002a 01A8     		add	r0, sp, #4
 10615 002c FFF7FEFF 		bl	dn_to_ull
 10616              	.LVL781:
 10617              	.LBE2132:
1419:src/xeq.c     **** 
 10618              		.loc 1 1419 1 view .LVU2802
 10619 0030 0AB0     		add	sp, sp, #40
 10620              		.cfi_def_cfa_offset 8
 10621              		@ sp needed
 10622 0032 10BD     		pop	{r4, pc}
 10623              	.LVL782:
 10624              	.L789:
1419:src/xeq.c     **** 
 10625              		.loc 1 1419 1 view .LVU2803
 10626              		.align	2
 10627              	.L788:
 10628 0034 00000000 		.word	main_ram
 10629              		.cfi_endproc
 10630              	.LFE95:
 10632              		.section	.text.get_keycode_from_reg,"ax",%progbits
 10633              		.align	1
 10634              		.p2align 2,,3
 10635              		.syntax unified
 10636              		.thumb
 10637              		.thumb_func
 10638              		.fpu fpv4-sp-d16
 10640              	get_keycode_from_reg:
 10641              	.LVL783:
 10642              	.LFB139:
2043:src/xeq.c     **** 	int sgn;
ARM GAS  /tmp/ccaPnj5t.s 			page 333


 10643              		.loc 1 2043 1 is_stmt 1 view -0
 10644              		.cfi_startproc
 10645              		@ args = 0, pretend = 0, frame = 8
 10646              		@ frame_needed = 0, uses_anonymous_args = 0
2044:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
 10647              		.loc 1 2044 2 view .LVU2805
2045:src/xeq.c     **** 	if ( c < 0 )
 10648              		.loc 1 2045 2 view .LVU2806
2043:src/xeq.c     **** 	int sgn;
 10649              		.loc 1 2043 1 is_stmt 0 view .LVU2807
 10650 0000 00B5     		push	{lr}
 10651              		.cfi_def_cfa_offset 4
 10652              		.cfi_offset 14, -4
 10653 0002 83B0     		sub	sp, sp, #12
 10654              		.cfi_def_cfa_offset 16
2045:src/xeq.c     **** 	if ( c < 0 )
 10655              		.loc 1 2045 44 view .LVU2808
 10656 0004 01A9     		add	r1, sp, #4
 10657 0006 FFF7FEFF 		bl	get_reg_n_int_sgn
 10658              	.LVL784:
2045:src/xeq.c     **** 	if ( c < 0 )
 10659              		.loc 1 2045 16 view .LVU2809
 10660 000a FFF7FEFF 		bl	row_column_to_keycode
 10661              	.LVL785:
2046:src/xeq.c     **** 		report_err(ERR_RANGE);
 10662              		.loc 1 2046 2 is_stmt 1 view .LVU2810
2046:src/xeq.c     **** 		report_err(ERR_RANGE);
 10663              		.loc 1 2046 5 is_stmt 0 view .LVU2811
 10664 000e 0028     		cmp	r0, #0
2046:src/xeq.c     **** 		report_err(ERR_RANGE);
 10665              		.loc 1 2046 5 view .LVU2812
 10666 0010 02DB     		blt	.L793
 10667              	.L790:
2049:src/xeq.c     **** 
 10668              		.loc 1 2049 1 view .LVU2813
 10669 0012 03B0     		add	sp, sp, #12
 10670              		.cfi_remember_state
 10671              		.cfi_def_cfa_offset 4
 10672              		@ sp needed
 10673 0014 5DF804FB 		ldr	pc, [sp], #4
 10674              	.L793:
 10675              		.cfi_restore_state
 10676              	.LBB2139:
 10677              	.LBI2139:
2042:src/xeq.c     **** {
 10678              		.loc 1 2042 12 is_stmt 1 view .LVU2814
 10679              	.LVL786:
 10680              	.LBB2140:
2047:src/xeq.c     **** 	return c;
 10681              		.loc 1 2047 3 view .LVU2815
 10682              	.LBB2141:
 10683              	.LBI2141:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10684              		.loc 1 540 5 view .LVU2816
 10685              	.LBB2142:
 541:src/xeq.c     **** 		Error = e;
 10686              		.loc 1 541 2 view .LVU2817
ARM GAS  /tmp/ccaPnj5t.s 			page 334


 541:src/xeq.c     **** 		Error = e;
 10687              		.loc 1 541 12 is_stmt 0 view .LVU2818
 10688 0018 044B     		ldr	r3, .L794
 541:src/xeq.c     **** 		Error = e;
 10689              		.loc 1 541 5 view .LVU2819
 10690 001a 1A68     		ldr	r2, [r3]
 10691 001c 002A     		cmp	r2, #0
 10692 001e F8D1     		bne	.L790
 10693              	.LVL787:
 10694              	.LBB2143:
 10695              	.LBI2143:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10696              		.loc 1 540 5 is_stmt 1 view .LVU2820
 10697              	.LBB2144:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 10698              		.loc 1 542 3 view .LVU2821
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 10699              		.loc 1 542 9 is_stmt 0 view .LVU2822
 10700 0020 0822     		movs	r2, #8
 10701 0022 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 10702              		.loc 1 543 3 is_stmt 1 view .LVU2823
 10703              	.LVL788:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 10704              		.loc 1 543 3 is_stmt 0 view .LVU2824
 10705              	.LBE2144:
 10706              	.LBE2143:
 10707              	.LBE2142:
 10708              	.LBE2141:
 10709              	.LBE2140:
 10710              	.LBE2139:
2048:src/xeq.c     **** }
 10711              		.loc 1 2048 2 is_stmt 1 view .LVU2825
2049:src/xeq.c     **** 
 10712              		.loc 1 2049 1 is_stmt 0 view .LVU2826
 10713 0024 03B0     		add	sp, sp, #12
 10714              		.cfi_def_cfa_offset 4
 10715              		@ sp needed
 10716 0026 5DF804FB 		ldr	pc, [sp], #4
 10717              	.L795:
 10718 002a 00BF     		.align	2
 10719              	.L794:
 10720 002c 00000000 		.word	Error
 10721              		.cfi_endproc
 10722              	.LFE139:
 10724              		.section	.text.getX_int,"ax",%progbits
 10725              		.align	1
 10726              		.p2align 2,,3
 10727              		.global	getX_int
 10728              		.syntax unified
 10729              		.thumb
 10730              		.thumb_func
 10731              		.fpu fpv4-sp-d16
 10733              	getX_int:
 10734              	.LFB96:
1424:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10735              		.loc 1 1424 30 is_stmt 1 view -0
ARM GAS  /tmp/ccaPnj5t.s 			page 335


 10736              		.cfi_startproc
 10737              		@ args = 0, pretend = 0, frame = 0
 10738              		@ frame_needed = 0, uses_anonymous_args = 0
 10739              		@ link register save eliminated.
1425:src/xeq.c     **** }
 10740              		.loc 1 1425 2 view .LVU2828
1425:src/xeq.c     **** }
 10741              		.loc 1 1425 9 is_stmt 0 view .LVU2829
 10742 0000 6420     		movs	r0, #100
 10743 0002 FFF7FEBF 		b	get_reg_n_int
 10744              	.LVL789:
 10745              		.cfi_endproc
 10746              	.LFE96:
 10748 0006 00BF     		.section	.text.getX_int_sgn,"ax",%progbits
 10749              		.align	1
 10750              		.p2align 2,,3
 10751              		.global	getX_int_sgn
 10752              		.syntax unified
 10753              		.thumb
 10754              		.thumb_func
 10755              		.fpu fpv4-sp-d16
 10757              	getX_int_sgn:
 10758              	.LVL790:
 10759              	.LFB97:
1428:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10760              		.loc 1 1428 47 is_stmt 1 view -0
 10761              		.cfi_startproc
 10762              		@ args = 0, pretend = 0, frame = 0
 10763              		@ frame_needed = 0, uses_anonymous_args = 0
 10764              		@ link register save eliminated.
1429:src/xeq.c     **** }
 10765              		.loc 1 1429 2 view .LVU2831
1428:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10766              		.loc 1 1428 47 is_stmt 0 view .LVU2832
 10767 0000 0146     		mov	r1, r0
1429:src/xeq.c     **** }
 10768              		.loc 1 1429 9 view .LVU2833
 10769 0002 6420     		movs	r0, #100
 10770              	.LVL791:
1429:src/xeq.c     **** }
 10771              		.loc 1 1429 9 view .LVU2834
 10772 0004 FFF7FEBF 		b	get_reg_n_int_sgn
 10773              	.LVL792:
1429:src/xeq.c     **** }
 10774              		.loc 1 1429 9 view .LVU2835
 10775              		.cfi_endproc
 10776              	.LFE97:
 10778              		.section	.text.set_reg_n_int_sgn,"ax",%progbits
 10779              		.align	1
 10780              		.p2align 2,,3
 10781              		.global	set_reg_n_int_sgn
 10782              		.syntax unified
 10783              		.thumb
 10784              		.thumb_func
 10785              		.fpu fpv4-sp-d16
 10787              	set_reg_n_int_sgn:
 10788              	.LVL793:
ARM GAS  /tmp/ccaPnj5t.s 			page 336


 10789              	.LFB99:
1449:src/xeq.c     **** 	if (is_intmode()) {
 10790              		.loc 1 1449 72 is_stmt 1 view -0
 10791              		.cfi_startproc
 10792              		@ args = 4, pretend = 0, frame = 40
 10793              		@ frame_needed = 0, uses_anonymous_args = 0
1450:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10794              		.loc 1 1450 2 view .LVU2837
1450:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10795              		.loc 1 1450 6 is_stmt 0 view .LVU2838
 10796 0000 1749     		ldr	r1, .L808
1449:src/xeq.c     **** 	if (is_intmode()) {
 10797              		.loc 1 1449 72 view .LVU2839
 10798 0002 30B5     		push	{r4, r5, lr}
 10799              		.cfi_def_cfa_offset 12
 10800              		.cfi_offset 4, -12
 10801              		.cfi_offset 5, -8
 10802              		.cfi_offset 14, -4
1450:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10803              		.loc 1 1450 6 view .LVU2840
 10804 0004 0968     		ldr	r1, [r1]
 10805 0006 91F8E857 		ldrb	r5, [r1, #2024]	@ zero_extendqisi2
1450:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10806              		.loc 1 1450 5 view .LVU2841
 10807 000a E907     		lsls	r1, r5, #31
1449:src/xeq.c     **** 	if (is_intmode()) {
 10808              		.loc 1 1449 72 view .LVU2842
 10809 000c 8BB0     		sub	sp, sp, #44
 10810              		.cfi_def_cfa_offset 56
1449:src/xeq.c     **** 	if (is_intmode()) {
 10811              		.loc 1 1449 72 view .LVU2843
 10812 000e 0446     		mov	r4, r0
1450:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10813              		.loc 1 1450 5 view .LVU2844
 10814 0010 11D5     		bpl	.L799
 10815              	.LVL794:
1450:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10816              		.loc 1 1450 5 view .LVU2845
 10817 0012 1046     		mov	r0, r2
 10818              	.LVL795:
1450:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10819              		.loc 1 1450 5 view .LVU2846
 10820 0014 1946     		mov	r1, r3
 10821              	.LVL796:
 10822              	.LBB2151:
 10823              	.LBI2151:
1449:src/xeq.c     **** 	if (is_intmode()) {
 10824              		.loc 1 1449 6 is_stmt 1 view .LVU2847
 10825              	.LBB2152:
1451:src/xeq.c     **** 	} else {
 10826              		.loc 1 1451 3 view .LVU2848
 10827 0016 0E9A     		ldr	r2, [sp, #56]
 10828              	.LVL797:
1451:src/xeq.c     **** 	} else {
 10829              		.loc 1 1451 3 is_stmt 0 view .LVU2849
 10830 0018 FFF7FEFF 		bl	build_value
 10831              	.LVL798:
ARM GAS  /tmp/ccaPnj5t.s 			page 337


1451:src/xeq.c     **** 	} else {
 10832              		.loc 1 1451 3 view .LVU2850
 10833 001c 0B46     		mov	r3, r1
 10834 001e 0246     		mov	r2, r0
 10835              	.LBB2153:
 10836              	.LBB2154:
1405:src/xeq.c     **** }
 10837              		.loc 1 1405 8 view .LVU2851
 10838 0020 2046     		mov	r0, r4
 10839 0022 CDE90023 		strd	r2, [sp]
 10840              	.LVL799:
1405:src/xeq.c     **** }
 10841              		.loc 1 1405 8 view .LVU2852
 10842              	.LBE2154:
 10843              	.LBI2153:
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10844              		.loc 1 1404 6 is_stmt 1 view .LVU2853
 10845              	.LBB2155:
1405:src/xeq.c     **** }
 10846              		.loc 1 1405 2 view .LVU2854
1405:src/xeq.c     **** }
 10847              		.loc 1 1405 8 is_stmt 0 view .LVU2855
 10848 0026 FFF7FEFF 		bl	get_reg_n
 10849              	.LVL800:
1405:src/xeq.c     **** }
 10850              		.loc 1 1405 2 view .LVU2856
 10851 002a 0822     		movs	r2, #8
 10852 002c 6946     		mov	r1, sp
 10853 002e FFF7FEFF 		bl	xcopy
 10854              	.LVL801:
1405:src/xeq.c     **** }
 10855              		.loc 1 1405 2 view .LVU2857
 10856              	.LBE2155:
 10857              	.LBE2153:
 10858              	.LBE2152:
 10859              	.LBE2151:
1460:src/xeq.c     **** 
 10860              		.loc 1 1460 1 view .LVU2858
 10861 0032 0BB0     		add	sp, sp, #44
 10862              		.cfi_remember_state
 10863              		.cfi_def_cfa_offset 12
 10864              		@ sp needed
 10865 0034 30BD     		pop	{r4, r5, pc}
 10866              	.LVL802:
 10867              	.L799:
 10868              		.cfi_restore_state
 10869              	.LBB2156:
1453:src/xeq.c     **** 
 10870              		.loc 1 1453 3 is_stmt 1 view .LVU2859
1455:src/xeq.c     **** 		if (sgn)
 10871              		.loc 1 1455 3 view .LVU2860
 10872 0036 6846     		mov	r0, sp
 10873              	.LVL803:
1455:src/xeq.c     **** 		if (sgn)
 10874              		.loc 1 1455 3 is_stmt 0 view .LVU2861
 10875 0038 FFF7FEFF 		bl	ullint_to_dn
 10876              	.LVL804:
ARM GAS  /tmp/ccaPnj5t.s 			page 338


1456:src/xeq.c     **** 			dn_minus(&t, &t);
 10877              		.loc 1 1456 3 is_stmt 1 view .LVU2862
1456:src/xeq.c     **** 			dn_minus(&t, &t);
 10878              		.loc 1 1456 6 is_stmt 0 view .LVU2863
 10879 003c 0E9B     		ldr	r3, [sp, #56]
 10880 003e 2BB9     		cbnz	r3, .L806
1458:src/xeq.c     **** 	}
 10881              		.loc 1 1458 3 is_stmt 1 view .LVU2864
 10882 0040 6946     		mov	r1, sp
 10883 0042 2046     		mov	r0, r4
 10884 0044 FFF7FEFF 		bl	setRegister
 10885              	.LVL805:
 10886              	.L807:
1458:src/xeq.c     **** 	}
 10887              		.loc 1 1458 3 is_stmt 0 view .LVU2865
 10888              	.LBE2156:
1460:src/xeq.c     **** 
 10889              		.loc 1 1460 1 view .LVU2866
 10890 0048 0BB0     		add	sp, sp, #44
 10891              		.cfi_remember_state
 10892              		.cfi_def_cfa_offset 12
 10893              		@ sp needed
 10894 004a 30BD     		pop	{r4, r5, pc}
 10895              	.LVL806:
 10896              	.L806:
 10897              		.cfi_restore_state
 10898              	.LBB2157:
1457:src/xeq.c     **** 		setRegister(index, &t);
 10899              		.loc 1 1457 4 is_stmt 1 view .LVU2867
 10900 004c 6946     		mov	r1, sp
 10901 004e 6846     		mov	r0, sp
 10902 0050 FFF7FEFF 		bl	dn_minus
 10903              	.LVL807:
1458:src/xeq.c     **** 	}
 10904              		.loc 1 1458 3 view .LVU2868
 10905 0054 6946     		mov	r1, sp
 10906 0056 2046     		mov	r0, r4
 10907 0058 FFF7FEFF 		bl	setRegister
 10908              	.LVL808:
 10909 005c F4E7     		b	.L807
 10910              	.L809:
 10911 005e 00BF     		.align	2
 10912              	.L808:
 10913 0060 00000000 		.word	main_ram
 10914              	.LBE2157:
 10915              		.cfi_endproc
 10916              	.LFE99:
 10918              		.section	.text.op_roundingmode,"ax",%progbits
 10919              		.align	1
 10920              		.p2align 2,,3
 10921              		.global	op_roundingmode
 10922              		.syntax unified
 10923              		.thumb
 10924              		.thumb_func
 10925              		.fpu fpv4-sp-d16
 10927              	op_roundingmode:
 10928              	.LVL809:
ARM GAS  /tmp/ccaPnj5t.s 			page 339


 10929              	.LFB34:
 613:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10930              		.loc 1 613 37 view -0
 10931              		.cfi_startproc
 10932              		@ args = 0, pretend = 0, frame = 0
 10933              		@ frame_needed = 0, uses_anonymous_args = 0
 614:src/xeq.c     **** }
 10934              		.loc 1 614 2 view .LVU2870
 10935              	.LBB2158:
 10936              	.LBI2158:
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 10937              		.loc 1 1491 6 view .LVU2871
 10938              	.LBB2159:
1492:src/xeq.c     **** }
 10939              		.loc 1 1492 2 view .LVU2872
 10940              	.LBE2159:
 10941              	.LBE2158:
 613:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10942              		.loc 1 613 37 is_stmt 0 view .LVU2873
 10943 0000 00B5     		push	{lr}
 10944              		.cfi_def_cfa_offset 4
 10945              		.cfi_offset 14, -4
 614:src/xeq.c     **** }
 10946              		.loc 1 614 21 view .LVU2874
 10947 0002 084B     		ldr	r3, .L812
 10948              	.LVL810:
 614:src/xeq.c     **** }
 10949              		.loc 1 614 21 view .LVU2875
 10950 0004 1B68     		ldr	r3, [r3]
 10951              	.LVL811:
 614:src/xeq.c     **** }
 10952              		.loc 1 614 21 view .LVU2876
 10953 0006 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 613:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 10954              		.loc 1 613 37 view .LVU2877
 10955 000a 83B0     		sub	sp, sp, #12
 10956              		.cfi_def_cfa_offset 16
 10957              	.LBB2162:
 10958              	.LBB2160:
1492:src/xeq.c     **** }
 10959              		.loc 1 1492 2 view .LVU2878
 10960 000c 0021     		movs	r1, #0
 10961              	.LBE2160:
 10962              	.LBE2162:
 614:src/xeq.c     **** }
 10963              		.loc 1 614 21 view .LVU2879
 10964 000e C2F30212 		ubfx	r2, r2, #4, #3
 10965              	.LBB2163:
 10966              	.LBB2161:
1492:src/xeq.c     **** }
 10967              		.loc 1 1492 2 view .LVU2880
 10968 0012 D2B2     		uxtb	r2, r2
 10969 0014 0023     		movs	r3, #0
 10970              	.LVL812:
1492:src/xeq.c     **** }
 10971              		.loc 1 1492 2 view .LVU2881
 10972 0016 0091     		str	r1, [sp]
ARM GAS  /tmp/ccaPnj5t.s 			page 340


 10973              	.LVL813:
1492:src/xeq.c     **** }
 10974              		.loc 1 1492 2 view .LVU2882
 10975 0018 6420     		movs	r0, #100
 10976              	.LVL814:
1492:src/xeq.c     **** }
 10977              		.loc 1 1492 2 view .LVU2883
 10978 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 10979              	.LVL815:
1492:src/xeq.c     **** }
 10980              		.loc 1 1492 2 view .LVU2884
 10981              	.LBE2161:
 10982              	.LBE2163:
 615:src/xeq.c     **** 
 10983              		.loc 1 615 1 view .LVU2885
 10984 001e 03B0     		add	sp, sp, #12
 10985              		.cfi_def_cfa_offset 4
 10986              		@ sp needed
 10987 0020 5DF804FB 		ldr	pc, [sp], #4
 10988              	.L813:
 10989              		.align	2
 10990              	.L812:
 10991 0024 00000000 		.word	main_ram
 10992              		.cfi_endproc
 10993              	.LFE34:
 10995              		.section	.text.register_from_int,"ax",%progbits
 10996              		.align	1
 10997              		.p2align 2,,3
 10998              		.syntax unified
 10999              		.thumb
 11000              		.thumb_func
 11001              		.fpu fpv4-sp-d16
 11003              	register_from_int:
 11004              	.LVL816:
 11005              	.LFB100:
1467:src/xeq.c     **** 	int sgn;
 11006              		.loc 1 1467 69 is_stmt 1 view -0
 11007              		.cfi_startproc
 11008              		@ args = 0, pretend = 0, frame = 8
 11009              		@ frame_needed = 0, uses_anonymous_args = 0
1468:src/xeq.c     **** 	unsigned long long int val;
 11010              		.loc 1 1468 2 view .LVU2887
1469:src/xeq.c     **** 	const int xin = XromFlags.xIN;
 11011              		.loc 1 1469 2 view .LVU2888
1470:src/xeq.c     **** 	
 11012              		.loc 1 1470 2 view .LVU2889
1467:src/xeq.c     **** 	int sgn;
 11013              		.loc 1 1467 69 is_stmt 0 view .LVU2890
 11014 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 11015              		.cfi_def_cfa_offset 28
 11016              		.cfi_offset 4, -28
 11017              		.cfi_offset 5, -24
 11018              		.cfi_offset 6, -20
 11019              		.cfi_offset 7, -16
 11020              		.cfi_offset 8, -12
 11021              		.cfi_offset 9, -8
 11022              		.cfi_offset 14, -4
ARM GAS  /tmp/ccaPnj5t.s 			page 341


1470:src/xeq.c     **** 	
 11023              		.loc 1 1470 27 view .LVU2891
 11024 0004 154C     		ldr	r4, .L820
 11025 0006 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
1467:src/xeq.c     **** 	int sgn;
 11026              		.loc 1 1467 69 view .LVU2892
 11027 0008 0546     		mov	r5, r0
 11028 000a 85B0     		sub	sp, sp, #20
 11029              		.cfi_def_cfa_offset 48
1467:src/xeq.c     **** 	int sgn;
 11030              		.loc 1 1467 69 view .LVU2893
 11031 000c 0846     		mov	r0, r1
 11032              	.LVL817:
1470:src/xeq.c     **** 	
 11033              		.loc 1 1470 27 view .LVU2894
 11034 000e DE09     		lsrs	r6, r3, #7
 11035              	.LVL818:
1472:src/xeq.c     **** 		XromFlags.xIN = 0;
 11036              		.loc 1 1472 2 is_stmt 1 view .LVU2895
1472:src/xeq.c     **** 		XromFlags.xIN = 0;
 11037              		.loc 1 1472 5 is_stmt 0 view .LVU2896
 11038 0010 12B1     		cbz	r2, .L815
1473:src/xeq.c     **** 	UState.intm = 1;
 11039              		.loc 1 1473 3 is_stmt 1 view .LVU2897
1473:src/xeq.c     **** 	UState.intm = 1;
 11040              		.loc 1 1473 17 is_stmt 0 view .LVU2898
 11041 0012 6FF3C713 		bfc	r3, #7, #1
 11042              	.LVL819:
1473:src/xeq.c     **** 	UState.intm = 1;
 11043              		.loc 1 1473 17 view .LVU2899
 11044 0016 6370     		strb	r3, [r4, #1]
 11045              	.LVL820:
 11046              	.L815:
1474:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11047              		.loc 1 1474 2 is_stmt 1 view .LVU2900
1474:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11048              		.loc 1 1474 14 is_stmt 0 view .LVU2901
 11049 0018 114F     		ldr	r7, .L820+4
 11050 001a 3A68     		ldr	r2, [r7]
 11051              	.LVL821:
1474:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11052              		.loc 1 1474 14 view .LVU2902
 11053 001c 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 11054 0020 43F00103 		orr	r3, r3, #1
 11055 0024 82F8E837 		strb	r3, [r2, #2024]
1475:src/xeq.c     **** 
 11056              		.loc 1 1475 2 is_stmt 1 view .LVU2903
1475:src/xeq.c     **** 
 11057              		.loc 1 1475 8 is_stmt 0 view .LVU2904
 11058 0028 03A9     		add	r1, sp, #12
 11059              	.LVL822:
1475:src/xeq.c     **** 
 11060              		.loc 1 1475 8 view .LVU2905
 11061 002a FFF7FEFF 		bl	get_reg_n_int_sgn
 11062              	.LVL823:
1477:src/xeq.c     **** 	UState.intm = 0;
 11063              		.loc 1 1477 16 view .LVU2906
ARM GAS  /tmp/ccaPnj5t.s 			page 342


 11064 002e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
1478:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11065              		.loc 1 1478 14 view .LVU2907
 11066 0030 3B68     		ldr	r3, [r7]
1477:src/xeq.c     **** 	UState.intm = 0;
 11067              		.loc 1 1477 16 view .LVU2908
 11068 0032 66F3C712 		bfi	r2, r6, #7, #1
 11069 0036 6270     		strb	r2, [r4, #1]
1475:src/xeq.c     **** 
 11070              		.loc 1 1475 8 view .LVU2909
 11071 0038 8946     		mov	r9, r1
1478:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11072              		.loc 1 1478 14 view .LVU2910
 11073 003a 93F8E817 		ldrb	r1, [r3, #2024]	@ zero_extendqisi2
 11074 003e 6FF30001 		bfc	r1, #0, #1
 11075 0042 83F8E817 		strb	r1, [r3, #2024]
1479:src/xeq.c     **** }
 11076              		.loc 1 1479 2 view .LVU2911
 11077 0046 039B     		ldr	r3, [sp, #12]
 11078 0048 0093     		str	r3, [sp]
1475:src/xeq.c     **** 
 11079              		.loc 1 1475 8 view .LVU2912
 11080 004a 8046     		mov	r8, r0
 11081              	.LVL824:
1477:src/xeq.c     **** 	UState.intm = 0;
 11082              		.loc 1 1477 2 is_stmt 1 view .LVU2913
1478:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11083              		.loc 1 1478 2 view .LVU2914
1479:src/xeq.c     **** }
 11084              		.loc 1 1479 2 view .LVU2915
 11085 004c 4246     		mov	r2, r8
 11086 004e 4B46     		mov	r3, r9
 11087 0050 2846     		mov	r0, r5
 11088 0052 FFF7FEFF 		bl	set_reg_n_int_sgn
 11089              	.LVL825:
1480:src/xeq.c     **** 
 11090              		.loc 1 1480 1 is_stmt 0 view .LVU2916
 11091 0056 05B0     		add	sp, sp, #20
 11092              		.cfi_def_cfa_offset 28
 11093              		@ sp needed
 11094 0058 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 11095              	.LVL826:
 11096              	.L821:
1480:src/xeq.c     **** 
 11097              		.loc 1 1480 1 view .LVU2917
 11098              		.align	2
 11099              	.L820:
 11100 005c 00000000 		.word	XromParams
 11101 0060 00000000 		.word	main_ram
 11102              		.cfi_endproc
 11103              	.LFE100:
 11105              		.section	.text.int_from_register,"ax",%progbits
 11106              		.align	1
 11107              		.p2align 2,,3
 11108              		.syntax unified
 11109              		.thumb
 11110              		.thumb_func
ARM GAS  /tmp/ccaPnj5t.s 			page 343


 11111              		.fpu fpv4-sp-d16
 11113              	int_from_register:
 11114              	.LVL827:
 11115              	.LFB98:
1436:src/xeq.c     **** 	int sgn;
 11116              		.loc 1 1436 48 is_stmt 1 view -0
 11117              		.cfi_startproc
 11118              		@ args = 0, pretend = 0, frame = 8
 11119              		@ frame_needed = 0, uses_anonymous_args = 0
1437:src/xeq.c     **** 	unsigned long long int val;
 11120              		.loc 1 1437 2 view .LVU2919
1438:src/xeq.c     **** 	
 11121              		.loc 1 1438 2 view .LVU2920
1440:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11122              		.loc 1 1440 2 view .LVU2921
1436:src/xeq.c     **** 	int sgn;
 11123              		.loc 1 1436 48 is_stmt 0 view .LVU2922
 11124 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11125              		.cfi_def_cfa_offset 20
 11126              		.cfi_offset 4, -20
 11127              		.cfi_offset 5, -16
 11128              		.cfi_offset 6, -12
 11129              		.cfi_offset 7, -8
 11130              		.cfi_offset 14, -4
1440:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11131              		.loc 1 1440 14 view .LVU2923
 11132 0002 104D     		ldr	r5, .L824
 11133 0004 2B68     		ldr	r3, [r5]
 11134 0006 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1436:src/xeq.c     **** 	int sgn;
 11135              		.loc 1 1436 48 view .LVU2924
 11136 000a 85B0     		sub	sp, sp, #20
 11137              		.cfi_def_cfa_offset 40
1440:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11138              		.loc 1 1440 14 view .LVU2925
 11139 000c 6FF30002 		bfc	r2, #0, #1
1436:src/xeq.c     **** 	int sgn;
 11140              		.loc 1 1436 48 view .LVU2926
 11141 0010 0446     		mov	r4, r0
1440:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11142              		.loc 1 1440 14 view .LVU2927
 11143 0012 83F8E827 		strb	r2, [r3, #2024]
1441:src/xeq.c     **** 
 11144              		.loc 1 1441 2 is_stmt 1 view .LVU2928
1441:src/xeq.c     **** 
 11145              		.loc 1 1441 8 is_stmt 0 view .LVU2929
 11146 0016 0846     		mov	r0, r1
 11147              	.LVL828:
1441:src/xeq.c     **** 
 11148              		.loc 1 1441 8 view .LVU2930
 11149 0018 03A9     		add	r1, sp, #12
 11150              	.LVL829:
1441:src/xeq.c     **** 
 11151              		.loc 1 1441 8 view .LVU2931
 11152 001a FFF7FEFF 		bl	get_reg_n_int_sgn
 11153              	.LVL830:
1441:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 344


 11154              		.loc 1 1441 8 view .LVU2932
 11155 001e 0F46     		mov	r7, r1
1443:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11156              		.loc 1 1443 14 view .LVU2933
 11157 0020 2968     		ldr	r1, [r5]
 11158 0022 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
 11159 0026 43F00103 		orr	r3, r3, #1
 11160 002a 81F8E837 		strb	r3, [r1, #2024]
1444:src/xeq.c     **** }
 11161              		.loc 1 1444 2 view .LVU2934
 11162 002e 039B     		ldr	r3, [sp, #12]
 11163 0030 0093     		str	r3, [sp]
1441:src/xeq.c     **** 
 11164              		.loc 1 1441 8 view .LVU2935
 11165 0032 0646     		mov	r6, r0
 11166              	.LVL831:
1443:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11167              		.loc 1 1443 2 is_stmt 1 view .LVU2936
1444:src/xeq.c     **** }
 11168              		.loc 1 1444 2 view .LVU2937
 11169 0034 3246     		mov	r2, r6
 11170 0036 2046     		mov	r0, r4
 11171 0038 3B46     		mov	r3, r7
 11172 003a FFF7FEFF 		bl	set_reg_n_int_sgn
 11173              	.LVL832:
1445:src/xeq.c     **** 
 11174              		.loc 1 1445 1 is_stmt 0 view .LVU2938
 11175 003e 05B0     		add	sp, sp, #20
 11176              		.cfi_def_cfa_offset 20
 11177              		@ sp needed
 11178 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 11179              	.LVL833:
 11180              	.L825:
1445:src/xeq.c     **** 
 11181              		.loc 1 1445 1 view .LVU2939
 11182 0042 00BF     		.align	2
 11183              	.L824:
 11184 0044 00000000 		.word	main_ram
 11185              		.cfi_endproc
 11186              	.LFE98:
 11188              		.section	.text.switch_to_int,"ax",%progbits
 11189              		.align	1
 11190              		.p2align 2,,3
 11191              		.syntax unified
 11192              		.thumb
 11193              		.thumb_func
 11194              		.fpu fpv4-sp-d16
 11196              	switch_to_int:
 11197              	.LFB206:
3713:src/xeq.c     **** 	int i;
 11198              		.loc 1 3713 33 is_stmt 1 view -0
 11199              		.cfi_startproc
 11200              		@ args = 0, pretend = 0, frame = 40
 11201              		@ frame_needed = 0, uses_anonymous_args = 0
3714:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
 11202              		.loc 1 3714 2 view .LVU2941
3715:src/xeq.c     **** 	const int dbl = is_dblmode();
ARM GAS  /tmp/ccaPnj5t.s 			page 345


 11203              		.loc 1 3715 2 view .LVU2942
3713:src/xeq.c     **** 	int i;
 11204              		.loc 1 3713 33 is_stmt 0 view .LVU2943
 11205 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 11206              		.cfi_def_cfa_offset 24
 11207              		.cfi_offset 4, -24
 11208              		.cfi_offset 5, -20
 11209              		.cfi_offset 6, -16
 11210              		.cfi_offset 7, -12
 11211              		.cfi_offset 8, -8
 11212              		.cfi_offset 14, -4
3715:src/xeq.c     **** 	const int dbl = is_dblmode();
 11213              		.loc 1 3715 26 view .LVU2944
 11214 0004 DFF87480 		ldr	r8, .L834+4
3715:src/xeq.c     **** 	const int dbl = is_dblmode();
 11215              		.loc 1 3715 25 view .LVU2945
 11216 0008 1B49     		ldr	r1, .L834
3715:src/xeq.c     **** 	const int dbl = is_dblmode();
 11217              		.loc 1 3715 26 view .LVU2946
 11218 000a D8F80020 		ldr	r2, [r8]
3715:src/xeq.c     **** 	const int dbl = is_dblmode();
 11219              		.loc 1 3715 32 view .LVU2947
 11220 000e 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 11221              	.LBB2164:
 11222              	.LBB2165:
1101:src/xeq.c     **** }
 11223              		.loc 1 1101 24 view .LVU2948
 11224 0012 B2F8E827 		ldrh	r2, [r2, #2024]
 11225              	.LBE2165:
 11226              	.LBE2164:
3715:src/xeq.c     **** 	const int dbl = is_dblmode();
 11227              		.loc 1 3715 32 view .LVU2949
 11228 0016 C3F3C003 		ubfx	r3, r3, #3, #1
 11229              	.LBB2169:
 11230              	.LBB2166:
1101:src/xeq.c     **** }
 11231              		.loc 1 1101 24 view .LVU2950
 11232 001a 44F20106 		movw	r6, #16385
 11233              	.LBE2166:
 11234              	.LBE2169:
3715:src/xeq.c     **** 	const int dbl = is_dblmode();
 11235              		.loc 1 3715 6 view .LVU2951
 11236 001e 31F81350 		ldrh	r5, [r1, r3, lsl #1]
 11237              	.LVL834:
3716:src/xeq.c     **** 
 11238              		.loc 1 3716 2 is_stmt 1 view .LVU2952
 11239              	.LBB2170:
 11240              	.LBI2164:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11241              		.loc 1 1100 5 view .LVU2953
 11242              	.LBB2167:
1101:src/xeq.c     **** }
 11243              		.loc 1 1101 2 view .LVU2954
 11244              	.LBE2167:
 11245              	.LBE2170:
3713:src/xeq.c     **** 	int i;
 11246              		.loc 1 3713 33 is_stmt 0 view .LVU2955
ARM GAS  /tmp/ccaPnj5t.s 			page 346


 11247 0022 8AB0     		sub	sp, sp, #40
 11248              		.cfi_def_cfa_offset 64
 11249              	.LBB2171:
 11250              	.LBB2168:
1101:src/xeq.c     **** }
 11251              		.loc 1 1101 24 view .LVU2956
 11252 0024 1640     		ands	r6, r6, r2
 11253              	.LVL835:
1101:src/xeq.c     **** }
 11254              		.loc 1 1101 24 view .LVU2957
 11255              	.LBE2168:
 11256              	.LBE2171:
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11257              		.loc 1 3718 2 is_stmt 1 view .LVU2958
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11258              		.loc 1 3718 21 view .LVU2959
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11259              		.loc 1 3718 9 is_stmt 0 view .LVU2960
 11260 0026 6F24     		movs	r4, #111
 11261 0028 07E0     		b	.L829
 11262              	.LVL836:
 11263              	.L827:
3723:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11264              		.loc 1 3723 11 view .LVU2961
 11265 002a B6F5804F 		cmp	r6, #16384
 11266 002e 12D0     		beq	.L832
 11267              	.L828:
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11268              		.loc 1 3718 36 is_stmt 1 discriminator 2 view .LVU2962
 11269 0030 013C     		subs	r4, r4, #1
 11270              	.LVL837:
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11271              		.loc 1 3718 2 is_stmt 0 discriminator 2 view .LVU2963
 11272 0032 632C     		cmp	r4, #99
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11273              		.loc 1 3718 46 discriminator 2 view .LVU2964
 11274 0034 4FEA4505 		lsl	r5, r5, #1
 11275              	.LVL838:
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11276              		.loc 1 3718 21 is_stmt 1 discriminator 2 view .LVU2965
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11277              		.loc 1 3718 2 is_stmt 0 discriminator 2 view .LVU2966
 11278 0038 0AD0     		beq	.L833
 11279              	.LVL839:
 11280              	.L829:
3719:src/xeq.c     **** 			// register belongs to stack
 11281              		.loc 1 3719 3 is_stmt 1 view .LVU2967
3723:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11282              		.loc 1 3723 8 view .LVU2968
3719:src/xeq.c     **** 			// register belongs to stack
 11283              		.loc 1 3719 6 is_stmt 0 view .LVU2969
 11284 003a 2B05     		lsls	r3, r5, #20
 11285 003c F5D5     		bpl	.L827
3721:src/xeq.c     **** 		}
 11286              		.loc 1 3721 4 is_stmt 1 view .LVU2970
 11287 003e 2146     		mov	r1, r4
 11288 0040 2046     		mov	r0, r4
ARM GAS  /tmp/ccaPnj5t.s 			page 347


3718:src/xeq.c     **** 		if (mask & 0x800) {
 11289              		.loc 1 3718 36 is_stmt 0 view .LVU2971
 11290 0042 013C     		subs	r4, r4, #1
 11291              	.LVL840:
3721:src/xeq.c     **** 		}
 11292              		.loc 1 3721 4 view .LVU2972
 11293 0044 FFF7FEFF 		bl	int_from_register
 11294              	.LVL841:
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11295              		.loc 1 3718 36 is_stmt 1 view .LVU2973
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11296              		.loc 1 3718 2 is_stmt 0 view .LVU2974
 11297 0048 632C     		cmp	r4, #99
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11298              		.loc 1 3718 46 view .LVU2975
 11299 004a 4FEA4505 		lsl	r5, r5, #1
 11300              	.LVL842:
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11301              		.loc 1 3718 21 is_stmt 1 view .LVU2976
3718:src/xeq.c     **** 		if (mask & 0x800) {
 11302              		.loc 1 3718 2 is_stmt 0 view .LVU2977
 11303 004e F4D1     		bne	.L829
 11304              	.L833:
3728:src/xeq.c     **** 
 11305              		.loc 1 3728 1 view .LVU2978
 11306 0050 0AB0     		add	sp, sp, #40
 11307              		.cfi_remember_state
 11308              		.cfi_def_cfa_offset 24
 11309              		@ sp needed
 11310 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11311              	.LVL843:
 11312              	.L832:
 11313              		.cfi_restore_state
3725:src/xeq.c     **** 		}
 11314              		.loc 1 3725 4 is_stmt 1 view .LVU2979
3725:src/xeq.c     **** 		}
 11315              		.loc 1 3725 26 is_stmt 0 view .LVU2980
 11316 0056 D8F80030 		ldr	r3, [r8]
3725:src/xeq.c     **** 		}
 11317              		.loc 1 3725 38 view .LVU2981
 11318 005a 2046     		mov	r0, r4
3725:src/xeq.c     **** 		}
 11319              		.loc 1 3725 26 view .LVU2982
 11320 005c 03F22C43 		addw	r3, r3, #1068
3725:src/xeq.c     **** 		}
 11321              		.loc 1 3725 4 view .LVU2983
 11322 0060 03EBC407 		add	r7, r3, r4, lsl #3
3725:src/xeq.c     **** 		}
 11323              		.loc 1 3725 38 view .LVU2984
 11324 0064 FFF7FEFF 		bl	get_reg_n
 11325              	.LVL844:
 11326              	.LBB2172:
 11327              	.LBI2172:
 642:src/xeq.c     **** 	decNumber temp;
 11328              		.loc 1 642 6 is_stmt 1 view .LVU2985
 11329              	.LBB2173:
 643:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
ARM GAS  /tmp/ccaPnj5t.s 			page 348


 11330              		.loc 1 643 2 view .LVU2986
 644:src/xeq.c     **** }
 11331              		.loc 1 644 2 view .LVU2987
 644:src/xeq.c     **** }
 11332              		.loc 1 644 24 is_stmt 0 view .LVU2988
 11333 0068 01A9     		add	r1, sp, #4
 11334 006a FFF7FEFF 		bl	decimal128ToNumber
 11335              	.LVL845:
 644:src/xeq.c     **** }
 11336              		.loc 1 644 24 view .LVU2989
 11337 006e 0146     		mov	r1, r0
 644:src/xeq.c     **** }
 11338              		.loc 1 644 2 view .LVU2990
 11339 0070 3846     		mov	r0, r7
 11340 0072 FFF7FEFF 		bl	packed_from_number
 11341              	.LVL846:
 645:src/xeq.c     **** 
 11342              		.loc 1 645 1 view .LVU2991
 11343 0076 DBE7     		b	.L828
 11344              	.L835:
 11345              		.align	2
 11346              	.L834:
 11347 0078 00000000 		.word	.LANCHOR3
 11348 007c 00000000 		.word	main_ram
 11349              	.LBE2173:
 11350              	.LBE2172:
 11351              		.cfi_endproc
 11352              	.LFE206:
 11354              		.section	.text.process_cmdline.part.0,"ax",%progbits
 11355              		.align	1
 11356              		.p2align 2,,3
 11357              		.syntax unified
 11358              		.thumb
 11359              		.thumb_func
 11360              		.fpu fpv4-sp-d16
 11362              	process_cmdline.part.0:
 11363              	.LFB288:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 11364              		.loc 1 1208 6 is_stmt 1 view -0
 11365              		.cfi_startproc
 11366              		@ args = 0, pretend = 0, frame = 168
 11367              		@ frame_needed = 0, uses_anonymous_args = 0
 11368              	.LBB2196:
1212:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
 11369              		.loc 1 1212 3 view .LVU2993
 11370              	.LBE2196:
1203:src/xeq.c     **** }
 11371              		.loc 1 1203 2 view .LVU2994
 11372              	.LVL847:
 11373              	.LBB2240:
1213:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11374              		.loc 1 1213 3 view .LVU2995
 11375              	.LBE2240:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 11376              		.loc 1 1208 6 is_stmt 0 view .LVU2996
 11377 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 11378              		.cfi_def_cfa_offset 32
ARM GAS  /tmp/ccaPnj5t.s 			page 349


 11379              		.cfi_offset 4, -32
 11380              		.cfi_offset 5, -28
 11381              		.cfi_offset 6, -24
 11382              		.cfi_offset 7, -20
 11383              		.cfi_offset 8, -16
 11384              		.cfi_offset 9, -12
 11385              		.cfi_offset 10, -8
 11386              		.cfi_offset 14, -4
 11387              	.LBB2241:
1213:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11388              		.loc 1 1213 35 view .LVU2997
 11389 0004 8D4C     		ldr	r4, .L875
1223:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11390              		.loc 1 1223 7 view .LVU2998
 11391 0006 DFF84482 		ldr	r8, .L875+16
1213:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11392              		.loc 1 1213 22 view .LVU2999
 11393 000a A57F     		ldrb	r5, [r4, #30]	@ zero_extendqisi2
 11394              	.LVL848:
1215:src/xeq.c     **** #else
 11395              		.loc 1 1215 3 is_stmt 1 view .LVU3000
1220:src/xeq.c     **** 
 11396              		.loc 1 1220 3 view .LVU3001
 11397              	.LBE2241:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 11398              		.loc 1 1208 6 is_stmt 0 view .LVU3002
 11399 000c ACB0     		sub	sp, sp, #176
 11400              		.cfi_def_cfa_offset 208
 11401              	.LBB2242:
1220:src/xeq.c     **** 
 11402              		.loc 1 1220 3 view .LVU3003
 11403 000e 04F12001 		add	r1, r4, #32
 11404 0012 1422     		movs	r2, #20
 11405 0014 02A8     		add	r0, sp, #8
 11406 0016 FFF7FEFF 		bl	xcopy
 11407              	.LVL849:
1222:src/xeq.c     **** 		if (!is_intmode()) {
 11408              		.loc 1 1222 3 is_stmt 1 view .LVU3004
1223:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11409              		.loc 1 1223 7 is_stmt 0 view .LVU3005
 11410 001a D8F80020 		ldr	r2, [r8]
1222:src/xeq.c     **** 		if (!is_intmode()) {
 11411              		.loc 1 1222 11 view .LVU3006
 11412 001e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
1223:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11413              		.loc 1 1223 7 view .LVU3007
 11414 0020 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1222:src/xeq.c     **** 		if (!is_intmode()) {
 11415              		.loc 1 1222 26 view .LVU3008
 11416 0024 2CA9     		add	r1, sp, #176
 11417 0026 1944     		add	r1, r1, r3
 11418 0028 0020     		movs	r0, #0
1223:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11419              		.loc 1 1223 6 view .LVU3009
 11420 002a 12F00102 		ands	r2, r2, #1
1222:src/xeq.c     **** 		if (!is_intmode()) {
 11421              		.loc 1 1222 26 view .LVU3010
ARM GAS  /tmp/ccaPnj5t.s 			page 350


 11422 002e 01F8A80C 		strb	r0, [r1, #-168]
1223:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11423              		.loc 1 1223 3 is_stmt 1 view .LVU3011
1223:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11424              		.loc 1 1223 6 is_stmt 0 view .LVU3012
 11425 0032 16D1     		bne	.L838
1225:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11426              		.loc 1 1225 4 is_stmt 1 view .LVU3013
1225:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11427              		.loc 1 1225 15 is_stmt 0 view .LVU3014
 11428 0034 2CA9     		add	r1, sp, #176
1225:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11429              		.loc 1 1225 29 view .LVU3015
 11430 0036 013B     		subs	r3, r3, #1
1225:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11431              		.loc 1 1225 15 view .LVU3016
 11432 0038 0B44     		add	r3, r3, r1
1225:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11433              		.loc 1 1225 40 view .LVU3017
 11434 003a 13F8A81C 		ldrb	r1, [r3, #-168]	@ zero_extendqisi2
1225:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11435              		.loc 1 1225 7 view .LVU3018
 11436 003e 4439     		subs	r1, r1, #68
 11437 0040 0129     		cmp	r1, #1
 11438 0042 40F28B80 		bls	.L866
1227:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11439              		.loc 1 1227 9 is_stmt 1 view .LVU3019
1227:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11440              		.loc 1 1227 21 is_stmt 0 view .LVU3020
 11441 0046 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1227:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11442              		.loc 1 1227 20 view .LVU3021
 11443 0048 2CAB     		add	r3, sp, #176
 11444 004a 1344     		add	r3, r3, r2
1227:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11445              		.loc 1 1227 12 view .LVU3022
 11446 004c 13F8A83C 		ldrb	r3, [r3, #-168]	@ zero_extendqisi2
 11447 0050 442B     		cmp	r3, #68
 11448 0052 00F0D080 		beq	.L867
 11449              	.L840:
1238:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11450              		.loc 1 1238 4 is_stmt 1 view .LVU3023
1238:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11451              		.loc 1 1238 7 is_stmt 0 view .LVU3024
 11452 0056 002A     		cmp	r2, #0
 11453 0058 40F08680 		bne	.L841
 11454              	.L872:
1243:src/xeq.c     **** #endif
 11455              		.loc 1 1243 8 view .LVU3025
 11456 005c 012D     		cmp	r5, #1
 11457 005e 00F08380 		beq	.L841
 11458              	.L838:
1248:src/xeq.c     **** 		lift_if_enabled();
 11459              		.loc 1 1248 3 is_stmt 1 view .LVU3026
 11460              	.LBB2197:
 11461              	.LBB2198:
 11462              	.LBB2199:
ARM GAS  /tmp/ccaPnj5t.s 			page 351


 11463              	.LBB2200:
 738:src/xeq.c     **** }
 11464              		.loc 1 738 15 is_stmt 0 view .LVU3027
 11465 0062 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11466              	.LBE2200:
 11467              	.LBE2199:
 11468              	.LBE2198:
 11469              	.LBE2197:
1248:src/xeq.c     **** 		lift_if_enabled();
 11470              		.loc 1 1248 17 view .LVU3028
 11471 0064 0022     		movs	r2, #0
 11472              	.LBB2212:
 11473              	.LBB2207:
 742:src/xeq.c     **** 		lift();
 11474              		.loc 1 742 5 view .LVU3029
 11475 0066 5B06     		lsls	r3, r3, #25
 11476              	.LBE2207:
 11477              	.LBE2212:
1248:src/xeq.c     **** 		lift_if_enabled();
 11478              		.loc 1 1248 17 view .LVU3030
 11479 0068 2277     		strb	r2, [r4, #28]
1249:src/xeq.c     **** 		set_lift();
 11480              		.loc 1 1249 3 is_stmt 1 view .LVU3031
 11481              	.LBB2213:
 11482              	.LBI2197:
 741:src/xeq.c     **** 	if (get_lift())
 11483              		.loc 1 741 6 view .LVU3032
 11484              	.LBB2208:
 742:src/xeq.c     **** 		lift();
 11485              		.loc 1 742 2 view .LVU3033
 11486              	.LBB2204:
 11487              	.LBI2199:
 737:src/xeq.c     **** 	return State2.state_lift;
 11488              		.loc 1 737 12 view .LVU3034
 11489              	.LBB2201:
 738:src/xeq.c     **** }
 11490              		.loc 1 738 2 view .LVU3035
 11491              	.LBE2201:
 11492              	.LBE2204:
 742:src/xeq.c     **** 		lift();
 11493              		.loc 1 742 5 is_stmt 0 view .LVU3036
 11494 006a 00F18B80 		bmi	.L868
 11495              	.L843:
 11496              	.LBE2208:
 11497              	.LBE2213:
1250:src/xeq.c     **** 		CmdLineDot = 0;
 11498              		.loc 1 1250 3 is_stmt 1 view .LVU3037
 11499              	.LBB2214:
 11500              	.LBI2214:
 761:src/xeq.c     ****     State2.state_lift = 1;
 11501              		.loc 1 761 6 view .LVU3038
 11502              	.LBB2215:
 762:src/xeq.c     **** }
 11503              		.loc 1 762 5 view .LVU3039
 762:src/xeq.c     **** }
 11504              		.loc 1 762 23 is_stmt 0 view .LVU3040
 11505 006e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/ccaPnj5t.s 			page 352


 11506              	.LBE2215:
 11507              	.LBE2214:
1253:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11508              		.loc 1 1253 7 view .LVU3041
 11509 0070 D8F80010 		ldr	r1, [r8]
 11510              	.LBB2217:
 11511              	.LBB2216:
 762:src/xeq.c     **** }
 11512              		.loc 1 762 23 view .LVU3042
 11513 0074 43F04003 		orr	r3, r3, #64
 11514 0078 E375     		strb	r3, [r4, #23]
 11515              	.LBE2216:
 11516              	.LBE2217:
1251:src/xeq.c     **** 		CmdLineEex = 0;
 11517              		.loc 1 1251 3 is_stmt 1 view .LVU3043
1253:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11518              		.loc 1 1253 7 is_stmt 0 view .LVU3044
 11519 007a 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
1251:src/xeq.c     **** 		CmdLineEex = 0;
 11520              		.loc 1 1251 14 view .LVU3045
 11521 007e 0022     		movs	r2, #0
1253:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11522              		.loc 1 1253 6 view .LVU3046
 11523 0080 13F00103 		ands	r3, r3, #1
1251:src/xeq.c     **** 		CmdLineEex = 0;
 11524              		.loc 1 1251 14 view .LVU3047
 11525 0084 A277     		strb	r2, [r4, #30]
1252:src/xeq.c     **** 		if (is_intmode()) {
 11526              		.loc 1 1252 3 is_stmt 1 view .LVU3048
1252:src/xeq.c     **** 		if (is_intmode()) {
 11527              		.loc 1 1252 14 is_stmt 0 view .LVU3049
 11528 0086 6277     		strb	r2, [r4, #29]
1253:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11529              		.loc 1 1253 3 is_stmt 1 view .LVU3050
1253:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11530              		.loc 1 1253 6 is_stmt 0 view .LVU3051
 11531 0088 7FD1     		bne	.L869
1257:src/xeq.c     **** 			char *d0, *d1, *d2;
 11532              		.loc 1 1257 10 is_stmt 1 view .LVU3052
1257:src/xeq.c     **** 			char *d0, *d1, *d2;
 11533              		.loc 1 1257 13 is_stmt 0 view .LVU3053
 11534 008a 022D     		cmp	r5, #2
 11535 008c 4CD1     		bne	.L850
 11536              	.LBB2218:
1258:src/xeq.c     **** 			int neg;
 11537              		.loc 1 1258 4 is_stmt 1 view .LVU3054
1259:src/xeq.c     **** 
 11538              		.loc 1 1259 4 view .LVU3055
1261:src/xeq.c     **** 				return;
 11539              		.loc 1 1261 4 view .LVU3056
1264:src/xeq.c     **** #endif
 11540              		.loc 1 1264 4 view .LVU3057
1264:src/xeq.c     **** #endif
 11541              		.loc 1 1264 17 is_stmt 0 view .LVU3058
 11542 008e 91F8E627 		ldrb	r2, [r1, #2022]	@ zero_extendqisi2
 11543 0092 42F02002 		orr	r2, r2, #32
 11544 0096 81F8E627 		strb	r2, [r1, #2022]
ARM GAS  /tmp/ccaPnj5t.s 			page 353


1266:src/xeq.c     **** 				neg = 1;
 11545              		.loc 1 1266 4 is_stmt 1 view .LVU3059
1266:src/xeq.c     **** 				neg = 1;
 11546              		.loc 1 1266 7 is_stmt 0 view .LVU3060
 11547 009a 9DF80820 		ldrb	r2, [sp, #8]	@ zero_extendqisi2
 11548 009e 2D2A     		cmp	r2, #45
1271:src/xeq.c     **** 			}
 11549              		.loc 1 1271 8 view .LVU3061
 11550 00a0 14BF     		ite	ne
 11551 00a2 02AD     		addne	r5, sp, #8
 11552              	.LVL850:
1268:src/xeq.c     **** 			} else {
 11553              		.loc 1 1268 8 view .LVU3062
 11554 00a4 0DF10905 		addeq	r5, sp, #9
1273:src/xeq.c     **** 			*d1++ = '\0';
 11555              		.loc 1 1273 9 view .LVU3063
 11556 00a8 4FF02E01 		mov	r1, #46
 11557 00ac 2846     		mov	r0, r5
1270:src/xeq.c     **** 				d0 = cmdline;
 11558              		.loc 1 1270 9 view .LVU3064
 11559 00ae 14BF     		ite	ne
 11560 00b0 1C46     		movne	r4, r3
1267:src/xeq.c     **** 				d0 = cmdline+1;
 11561              		.loc 1 1267 9 view .LVU3065
 11562 00b2 0124     		moveq	r4, #1
 11563              	.LVL851:
1273:src/xeq.c     **** 			*d1++ = '\0';
 11564              		.loc 1 1273 4 is_stmt 1 view .LVU3066
1273:src/xeq.c     **** 			*d1++ = '\0';
 11565              		.loc 1 1273 9 is_stmt 0 view .LVU3067
 11566 00b4 FFF7FEFF 		bl	find_char
 11567              	.LVL852:
1274:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11568              		.loc 1 1274 4 is_stmt 1 view .LVU3068
1274:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11569              		.loc 1 1274 10 is_stmt 0 view .LVU3069
 11570 00b8 8146     		mov	r9, r0
 11571 00ba 4FF0000A 		mov	r10, #0
1274:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11572              		.loc 1 1274 7 view .LVU3070
 11573 00be 461C     		adds	r6, r0, #1
 11574              	.LVL853:
1274:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11575              		.loc 1 1274 10 view .LVU3071
 11576 00c0 09F802AB 		strb	r10, [r9], #2
1275:src/xeq.c     **** 			*d2++ = '\0';
 11577              		.loc 1 1275 4 is_stmt 1 view .LVU3072
1275:src/xeq.c     **** 			*d2++ = '\0';
 11578              		.loc 1 1275 9 is_stmt 0 view .LVU3073
 11579 00c4 2E21     		movs	r1, #46
 11580 00c6 3046     		mov	r0, r6
 11581 00c8 FFF7FEFF 		bl	find_char
 11582              	.LVL854:
1276:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11583              		.loc 1 1276 4 is_stmt 1 view .LVU3074
1276:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11584              		.loc 1 1276 7 is_stmt 0 view .LVU3075
ARM GAS  /tmp/ccaPnj5t.s 			page 354


 11585 00cc 0746     		mov	r7, r0
 11586              	.LVL855:
1277:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11587              		.loc 1 1277 4 view .LVU3076
 11588 00ce 5C4A     		ldr	r2, .L875+4
1276:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11589              		.loc 1 1276 10 view .LVU3077
 11590 00d0 07F801AB 		strb	r10, [r7], #1
 11591              	.LVL856:
1277:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11592              		.loc 1 1277 4 is_stmt 1 view .LVU3078
 11593 00d4 11A8     		add	r0, sp, #68
 11594 00d6 3946     		mov	r1, r7
 11595 00d8 FFF7FEFF 		bl	decNumberFromString
 11596              	.LVL857:
1278:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11597              		.loc 1 1278 4 view .LVU3079
 11598 00dc 2946     		mov	r1, r5
 11599 00de 584A     		ldr	r2, .L875+4
 11600 00e0 1AA8     		add	r0, sp, #104
 11601 00e2 FFF7FEFF 		bl	decNumberFromString
 11602              	.LVL858:
1280:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11603              		.loc 1 1280 4 view .LVU3080
1280:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11604              		.loc 1 1280 7 is_stmt 0 view .LVU3081
 11605 00e6 4F45     		cmp	r7, r9
1281:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11606              		.loc 1 1281 5 view .LVU3082
 11607 00e8 08AD     		add	r5, sp, #32
 11608              	.LVL859:
1280:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11609              		.loc 1 1280 7 view .LVU3083
 11610 00ea 00F09780 		beq	.L870
1290:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11611              		.loc 1 1290 5 is_stmt 1 view .LVU3084
 11612 00ee 544A     		ldr	r2, .L875+4
 11613 00f0 3146     		mov	r1, r6
 11614 00f2 2846     		mov	r0, r5
 11615 00f4 FFF7FEFF 		bl	decNumberFromString
 11616              	.LVL860:
1292:src/xeq.c     **** #endif
 11617              		.loc 1 1292 5 view .LVU3085
1292:src/xeq.c     **** #endif
 11618              		.loc 1 1292 25 is_stmt 0 view .LVU3086
 11619 00f8 D8F80030 		ldr	r3, [r8]
 11620 00fc 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11621 0100 6AF30412 		bfi	r2, r10, #4, #1
 11622 0104 83F8E627 		strb	r2, [r3, #2022]
 11623              	.L853:
1295:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
 11624              		.loc 1 1295 4 is_stmt 1 view .LVU3087
 11625 0108 11AA     		add	r2, sp, #68
 11626 010a 2946     		mov	r1, r5
 11627 010c 23A8     		add	r0, sp, #140
 11628 010e FFF7FEFF 		bl	dn_divide
 11629              	.LVL861:
ARM GAS  /tmp/ccaPnj5t.s 			page 355


1297:src/xeq.c     **** #endif
 11630              		.loc 1 1297 4 view .LVU3088
1297:src/xeq.c     **** #endif
 11631              		.loc 1 1297 7 is_stmt 0 view .LVU3089
 11632 0112 9DF89430 		ldrb	r3, [sp, #148]	@ zero_extendqisi2
 11633 0116 13F0700F 		tst	r3, #112
 11634 011a 64D0     		beq	.L871
1300:src/xeq.c     **** 				dn_minus(&x, &x);
 11635              		.loc 1 1300 4 is_stmt 1 view .LVU3090
1300:src/xeq.c     **** 				dn_minus(&x, &x);
 11636              		.loc 1 1300 7 is_stmt 0 view .LVU3091
 11637 011c 4CB1     		cbz	r4, .L865
 11638              	.L874:
1301:src/xeq.c     **** 			setX(&x);
 11639              		.loc 1 1301 5 is_stmt 1 view .LVU3092
 11640 011e 1AA9     		add	r1, sp, #104
 11641 0120 0846     		mov	r0, r1
 11642 0122 FFF7FEFF 		bl	dn_minus
 11643              	.LVL862:
1302:src/xeq.c     **** 		} else {
 11644              		.loc 1 1302 4 view .LVU3093
 11645              	.LBB2219:
 11646              	.LBI2219:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 11647              		.loc 1 822 6 view .LVU3094
 11648              	.LBB2220:
 823:src/xeq.c     **** }
 11649              		.loc 1 823 2 view .LVU3095
 11650 0126 04E0     		b	.L865
 11651              	.LVL863:
 11652              	.L850:
 823:src/xeq.c     **** }
 11653              		.loc 1 823 2 is_stmt 0 view .LVU3096
 11654              	.LBE2220:
 11655              	.LBE2219:
 11656              	.LBE2218:
1304:src/xeq.c     **** 			setX(&x);
 11657              		.loc 1 1304 4 is_stmt 1 view .LVU3097
 11658 0128 454A     		ldr	r2, .L875+4
 11659 012a 02A9     		add	r1, sp, #8
 11660 012c 1AA8     		add	r0, sp, #104
 11661 012e FFF7FEFF 		bl	decNumberFromString
 11662              	.LVL864:
 11663              	.L865:
1305:src/xeq.c     **** 		}
 11664              		.loc 1 1305 4 view .LVU3098
 11665              	.LBB2221:
 11666              	.LBI2221:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 11667              		.loc 1 822 6 view .LVU3099
 11668              	.LBB2222:
 823:src/xeq.c     **** }
 11669              		.loc 1 823 2 view .LVU3100
 11670 0132 1AA9     		add	r1, sp, #104
 11671              	.LVL865:
 823:src/xeq.c     **** }
 11672              		.loc 1 823 2 is_stmt 0 view .LVU3101
ARM GAS  /tmp/ccaPnj5t.s 			page 356


 11673 0134 6420     		movs	r0, #100
 11674 0136 FFF7FEFF 		bl	setRegister
 11675              	.LVL866:
 11676              	.L849:
 823:src/xeq.c     **** }
 11677              		.loc 1 823 2 view .LVU3102
 11678              	.LBE2222:
 11679              	.LBE2221:
1307:src/xeq.c     **** #ifndef DM42
 11680              		.loc 1 1307 3 is_stmt 1 view .LVU3103
 11681              	.LBB2223:
 11682              	.LBI2223:
3885:src/xeq.c     **** 	if (!Running && !XromRunning)
 11683              		.loc 1 3885 6 view .LVU3104
 11684              	.LBB2224:
3886:src/xeq.c     **** 		State.entryp = 1;
 11685              		.loc 1 3886 2 view .LVU3105
 11686              	.LBB2225:
 11687              	.LBI2225:
3885:src/xeq.c     **** 	if (!Running && !XromRunning)
 11688              		.loc 1 3885 6 view .LVU3106
 11689              	.LBE2225:
3886:src/xeq.c     **** 		State.entryp = 1;
 11690              		.loc 1 3886 6 is_stmt 0 view .LVU3107
 11691 013a 424A     		ldr	r2, .L875+8
 11692              	.LBB2227:
 11693              	.LBB2226:
3886:src/xeq.c     **** 		State.entryp = 1;
 11694              		.loc 1 3886 18 view .LVU3108
 11695 013c 424B     		ldr	r3, .L875+12
3886:src/xeq.c     **** 		State.entryp = 1;
 11696              		.loc 1 3886 15 view .LVU3109
 11697 013e 1268     		ldr	r2, [r2]
 11698 0140 1B68     		ldr	r3, [r3]
 11699 0142 1343     		orrs	r3, r2, r3
 11700 0144 07D1     		bne	.L836
3887:src/xeq.c     **** }
 11701              		.loc 1 3887 3 is_stmt 1 view .LVU3110
3887:src/xeq.c     **** }
 11702              		.loc 1 3887 16 is_stmt 0 view .LVU3111
 11703 0146 D8F80020 		ldr	r2, [r8]
 11704 014a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 11705 014e 43F01003 		orr	r3, r3, #16
 11706 0152 82F8DD37 		strb	r3, [r2, #2013]
 11707              	.L836:
 11708              	.LBE2226:
 11709              	.LBE2227:
 11710              	.LBE2224:
 11711              	.LBE2223:
 11712              	.LBE2242:
1312:src/xeq.c     **** 
 11713              		.loc 1 1312 1 view .LVU3112
 11714 0156 2CB0     		add	sp, sp, #176
 11715              		.cfi_remember_state
 11716              		.cfi_def_cfa_offset 32
 11717              		@ sp needed
 11718 0158 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
ARM GAS  /tmp/ccaPnj5t.s 			page 357


 11719              	.LVL867:
 11720              	.L866:
 11721              		.cfi_restore_state
 11722              	.LBB2243:
1226:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11723              		.loc 1 1226 5 is_stmt 1 view .LVU3113
1226:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11724              		.loc 1 1226 30 is_stmt 0 view .LVU3114
 11725 015c 03F8A82C 		strb	r2, [r3, #-168]
 11726 0160 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1238:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11727              		.loc 1 1238 4 is_stmt 1 view .LVU3115
1238:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11728              		.loc 1 1238 7 is_stmt 0 view .LVU3116
 11729 0162 002A     		cmp	r2, #0
 11730 0164 3FF47AAF 		beq	.L872
 11731              	.L841:
1246:src/xeq.c     **** 		}
 11732              		.loc 1 1246 5 is_stmt 1 view .LVU3117
1246:src/xeq.c     **** 		}
 11733              		.loc 1 1246 18 is_stmt 0 view .LVU3118
 11734 0168 D8F80030 		ldr	r3, [r8]
 11735 016c 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11736 0170 6FF34512 		bfc	r2, #5, #1
 11737 0174 83F8E627 		strb	r2, [r3, #2022]
1248:src/xeq.c     **** 		lift_if_enabled();
 11738              		.loc 1 1248 3 is_stmt 1 view .LVU3119
 11739              	.LBB2228:
 11740              	.LBB2209:
 11741              	.LBB2205:
 11742              	.LBB2202:
 738:src/xeq.c     **** }
 11743              		.loc 1 738 15 is_stmt 0 view .LVU3120
 11744 0178 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11745              	.LBE2202:
 11746              	.LBE2205:
 11747              	.LBE2209:
 11748              	.LBE2228:
1248:src/xeq.c     **** 		lift_if_enabled();
 11749              		.loc 1 1248 17 view .LVU3121
 11750 017a 0022     		movs	r2, #0
 11751              	.LBB2229:
 11752              	.LBB2210:
 742:src/xeq.c     **** 		lift();
 11753              		.loc 1 742 5 view .LVU3122
 11754 017c 5B06     		lsls	r3, r3, #25
 11755              	.LBE2210:
 11756              	.LBE2229:
1248:src/xeq.c     **** 		lift_if_enabled();
 11757              		.loc 1 1248 17 view .LVU3123
 11758 017e 2277     		strb	r2, [r4, #28]
1249:src/xeq.c     **** 		set_lift();
 11759              		.loc 1 1249 3 is_stmt 1 view .LVU3124
 11760              	.LBB2230:
 741:src/xeq.c     **** 	if (get_lift())
 11761              		.loc 1 741 6 view .LVU3125
 11762              	.LBB2211:
ARM GAS  /tmp/ccaPnj5t.s 			page 358


 742:src/xeq.c     **** 		lift();
 11763              		.loc 1 742 2 view .LVU3126
 11764              	.LBB2206:
 737:src/xeq.c     **** 	return State2.state_lift;
 11765              		.loc 1 737 12 view .LVU3127
 11766              	.LBB2203:
 738:src/xeq.c     **** }
 11767              		.loc 1 738 2 view .LVU3128
 11768              	.LBE2203:
 11769              	.LBE2206:
 742:src/xeq.c     **** 		lift();
 11770              		.loc 1 742 5 is_stmt 0 view .LVU3129
 11771 0180 7FF575AF 		bpl	.L843
 11772              	.L868:
 743:src/xeq.c     **** }
 11773              		.loc 1 743 3 is_stmt 1 view .LVU3130
 11774 0184 FFF7FEFF 		bl	lift
 11775              	.LVL868:
 11776 0188 71E7     		b	.L843
 11777              	.L869:
 11778              	.LBE2211:
 11779              	.LBE2230:
 11780              	.LBB2231:
1254:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11781              		.loc 1 1254 4 view .LVU3131
1254:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11782              		.loc 1 1254 41 is_stmt 0 view .LVU3132
 11783 018a 9DF80890 		ldrb	r9, [sp, #8]	@ zero_extendqisi2
 11784 018e A9F12D09 		sub	r9, r9, #45
 11785 0192 B9FA89F9 		clz	r9, r9
1255:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11786              		.loc 1 1255 31 view .LVU3133
 11787 0196 FFF7FEFF 		bl	int_base
 11788              	.LVL869:
1254:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11789              		.loc 1 1254 41 view .LVU3134
 11790 019a 4FEA5919 		lsr	r9, r9, #5
 11791              	.LVL870:
1255:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11792              		.loc 1 1255 4 is_stmt 1 view .LVU3135
1255:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11793              		.loc 1 1255 31 is_stmt 0 view .LVU3136
 11794 019e 02AB     		add	r3, sp, #8
 11795 01a0 03EB0902 		add	r2, r3, r9
 11796              	.LVL871:
 11797              	.LBB2232:
 11798              	.LBI2232:
1139:src/xeq.c     **** 	unsigned long long int x = 0;
 11799              		.loc 1 1139 24 is_stmt 1 view .LVU3137
 11800              	.LBB2233:
1140:src/xeq.c     **** 
 11801              		.loc 1 1140 2 view .LVU3138
1140:src/xeq.c     **** 
 11802              		.loc 1 1140 25 is_stmt 0 view .LVU3139
 11803 01a4 0026     		movs	r6, #0
 11804 01a6 0027     		movs	r7, #0
 11805 01a8 02E0     		b	.L848
ARM GAS  /tmp/ccaPnj5t.s 			page 359


 11806              	.LVL872:
 11807              	.L873:
 11808              	.LBB2234:
1154:src/xeq.c     **** 	}
 11809              		.loc 1 1154 5 view .LVU3140
 11810 01aa E618     		adds	r6, r4, r3
 11811              	.LVL873:
1154:src/xeq.c     **** 	}
 11812              		.loc 1 1154 5 view .LVU3141
 11813 01ac 45F10007 		adc	r7, r5, #0
 11814              	.LVL874:
1154:src/xeq.c     **** 	}
 11815              		.loc 1 1154 5 view .LVU3142
 11816              	.LBE2234:
1142:src/xeq.c     **** 		unsigned int n;
 11817              		.loc 1 1142 8 is_stmt 1 view .LVU3143
 11818              	.L848:
1142:src/xeq.c     **** 		unsigned int n;
 11819              		.loc 1 1142 2 view .LVU3144
 11820              	.LBB2235:
1143:src/xeq.c     **** 		const char c = *s++;
 11821              		.loc 1 1143 3 view .LVU3145
1144:src/xeq.c     **** 
 11822              		.loc 1 1144 3 view .LVU3146
1147:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 11823              		.loc 1 1147 4 view .LVU3147
1148:src/xeq.c     **** 			n = c - 'A' + 10;
 11824              		.loc 1 1148 8 view .LVU3148
1149:src/xeq.c     **** 		else
 11825              		.loc 1 1149 4 view .LVU3149
1144:src/xeq.c     **** 
 11826              		.loc 1 1144 14 is_stmt 0 view .LVU3150
 11827 01b0 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 11828              	.LVL875:
1146:src/xeq.c     **** 			n = c - '0';
 11829              		.loc 1 1146 3 is_stmt 1 view .LVU3151
1146:src/xeq.c     **** 			n = c - '0';
 11830              		.loc 1 1146 16 is_stmt 0 view .LVU3152
 11831 01b4 A1F13003 		sub	r3, r1, #48
1146:src/xeq.c     **** 			n = c - '0';
 11832              		.loc 1 1146 6 view .LVU3153
 11833 01b8 DCB2     		uxtb	r4, r3
 11834 01ba 092C     		cmp	r4, #9
1148:src/xeq.c     **** 			n = c - 'A' + 10;
 11835              		.loc 1 1148 11 view .LVU3154
 11836 01bc A1F14105 		sub	r5, r1, #65
1146:src/xeq.c     **** 			n = c - '0';
 11837              		.loc 1 1146 6 view .LVU3155
 11838 01c0 03D9     		bls	.L846
1148:src/xeq.c     **** 			n = c - 'A' + 10;
 11839              		.loc 1 1148 11 view .LVU3156
 11840 01c2 052D     		cmp	r5, #5
 11841 01c4 07D8     		bhi	.L847
1149:src/xeq.c     **** 		else
 11842              		.loc 1 1149 16 view .LVU3157
 11843 01c6 A1F13703 		sub	r3, r1, #55
 11844              	.LVL876:
ARM GAS  /tmp/ccaPnj5t.s 			page 360


 11845              	.L846:
1152:src/xeq.c     **** 			break;
 11846              		.loc 1 1152 3 is_stmt 1 view .LVU3158
1154:src/xeq.c     **** 	}
 11847              		.loc 1 1154 3 view .LVU3159
1154:src/xeq.c     **** 	}
 11848              		.loc 1 1154 9 is_stmt 0 view .LVU3160
 11849 01ca A0FB0645 		umull	r4, r5, r0, r6
1152:src/xeq.c     **** 			break;
 11850              		.loc 1 1152 6 view .LVU3161
 11851 01ce 9842     		cmp	r0, r3
1154:src/xeq.c     **** 	}
 11852              		.loc 1 1154 9 view .LVU3162
 11853 01d0 00FB0755 		mla	r5, r0, r7, r5
1152:src/xeq.c     **** 			break;
 11854              		.loc 1 1152 6 view .LVU3163
 11855 01d4 E9D8     		bhi	.L873
 11856              	.LVL877:
 11857              	.L847:
1152:src/xeq.c     **** 			break;
 11858              		.loc 1 1152 6 view .LVU3164
 11859              	.LBE2235:
1156:src/xeq.c     **** }
 11860              		.loc 1 1156 2 is_stmt 1 view .LVU3165
1156:src/xeq.c     **** }
 11861              		.loc 1 1156 2 is_stmt 0 view .LVU3166
 11862              	.LBE2233:
 11863              	.LBE2232:
1256:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
 11864              		.loc 1 1256 4 is_stmt 1 view .LVU3167
 11865              	.LBB2236:
 11866              	.LBI2236:
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11867              		.loc 1 1491 6 view .LVU3168
 11868              	.LBB2237:
1492:src/xeq.c     **** }
 11869              		.loc 1 1492 2 view .LVU3169
 11870 01d6 CDF80090 		str	r9, [sp]
 11871 01da 3246     		mov	r2, r6
 11872 01dc 3B46     		mov	r3, r7
 11873 01de 6420     		movs	r0, #100
 11874 01e0 FFF7FEFF 		bl	set_reg_n_int_sgn
 11875              	.LVL878:
1493:src/xeq.c     **** 
 11876              		.loc 1 1493 1 is_stmt 0 view .LVU3170
 11877 01e4 A9E7     		b	.L849
 11878              	.LVL879:
 11879              	.L871:
1493:src/xeq.c     **** 
 11880              		.loc 1 1493 1 view .LVU3171
 11881              	.LBE2237:
 11882              	.LBE2236:
 11883              	.LBE2231:
 11884              	.LBB2238:
1299:src/xeq.c     **** 			if (neg)
 11885              		.loc 1 1299 5 is_stmt 1 view .LVU3172
 11886 01e6 1AA9     		add	r1, sp, #104
ARM GAS  /tmp/ccaPnj5t.s 			page 361


 11887 01e8 23AA     		add	r2, sp, #140
 11888 01ea 0846     		mov	r0, r1
 11889 01ec FFF7FEFF 		bl	dn_add
 11890              	.LVL880:
1300:src/xeq.c     **** 				dn_minus(&x, &x);
 11891              		.loc 1 1300 4 view .LVU3173
1300:src/xeq.c     **** 				dn_minus(&x, &x);
 11892              		.loc 1 1300 7 is_stmt 0 view .LVU3174
 11893 01f0 002C     		cmp	r4, #0
 11894 01f2 9ED0     		beq	.L865
 11895 01f4 93E7     		b	.L874
 11896              	.LVL881:
 11897              	.L867:
1300:src/xeq.c     **** 				dn_minus(&x, &x);
 11898              		.loc 1 1300 7 view .LVU3175
 11899              	.LBE2238:
1228:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11900              		.loc 1 1228 5 is_stmt 1 view .LVU3176
 11901 01f6 02AB     		add	r3, sp, #8
1228:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11902              		.loc 1 1228 58 is_stmt 0 view .LVU3177
 11903 01f8 511C     		adds	r1, r2, #1
1228:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11904              		.loc 1 1228 32 view .LVU3178
 11905 01fa 901C     		adds	r0, r2, #2
1228:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11906              		.loc 1 1228 5 view .LVU3179
 11907 01fc 1944     		add	r1, r1, r3
 11908 01fe 1844     		add	r0, r0, r3
 11909 0200 C2F11202 		rsb	r2, r2, #18
 11910 0204 FFF7FEFF 		bl	xcopy
 11911              	.LVL882:
1229:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11912              		.loc 1 1229 5 is_stmt 1 view .LVU3180
1229:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11913              		.loc 1 1229 13 is_stmt 0 view .LVU3181
 11914 0208 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1229:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11915              		.loc 1 1229 25 view .LVU3182
 11916 020a 2CAB     		add	r3, sp, #176
 11917 020c 1344     		add	r3, r3, r2
 11918 020e 4520     		movs	r0, #69
1230:src/xeq.c     **** 			}
 11919              		.loc 1 1230 29 view .LVU3183
 11920 0210 2D21     		movs	r1, #45
1229:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11921              		.loc 1 1229 25 view .LVU3184
 11922 0212 03F8A80C 		strb	r0, [r3, #-168]
1230:src/xeq.c     **** 			}
 11923              		.loc 1 1230 5 is_stmt 1 view .LVU3185
1230:src/xeq.c     **** 			}
 11924              		.loc 1 1230 29 is_stmt 0 view .LVU3186
 11925 0216 03F8A71C 		strb	r1, [r3, #-167]
 11926 021a 1CE7     		b	.L840
 11927              	.LVL883:
 11928              	.L870:
 11929              	.LBB2239:
ARM GAS  /tmp/ccaPnj5t.s 			page 362


1281:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11930              		.loc 1 1281 5 is_stmt 1 view .LVU3187
 11931 021c 1AA9     		add	r1, sp, #104
 11932 021e 2846     		mov	r0, r5
 11933 0220 FFF7FEFF 		bl	decNumberCopy
 11934              	.LVL884:
1282:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
 11935              		.loc 1 1282 5 view .LVU3188
 11936 0224 1AA8     		add	r0, sp, #104
 11937 0226 FFF7FEFF 		bl	decNumberZero
 11938              	.LVL885:
1284:src/xeq.c     **** #endif
 11939              		.loc 1 1284 5 view .LVU3189
1284:src/xeq.c     **** #endif
 11940              		.loc 1 1284 25 is_stmt 0 view .LVU3190
 11941 022a D8F80020 		ldr	r2, [r8]
 11942 022e 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 11943 0232 43F01003 		orr	r3, r3, #16
 11944 0236 82F8E637 		strb	r3, [r2, #2022]
 11945 023a 65E7     		b	.L853
 11946              	.L876:
 11947              		.align	2
 11948              	.L875:
 11949 023c 00000000 		.word	StateWhileOn
 11950 0240 00000000 		.word	Ctx
 11951 0244 00000000 		.word	Running
 11952 0248 00000000 		.word	XromRunning
 11953 024c 00000000 		.word	main_ram
 11954              	.LBE2239:
 11955              	.LBE2243:
 11956              		.cfi_endproc
 11957              	.LFE288:
 11959              		.section	.text.process_cmdline,"ax",%progbits
 11960              		.align	1
 11961              		.p2align 2,,3
 11962              		.global	process_cmdline
 11963              		.syntax unified
 11964              		.thumb
 11965              		.thumb_func
 11966              		.fpu fpv4-sp-d16
 11968              	process_cmdline:
 11969              	.LFB87:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 11970              		.loc 1 1208 28 is_stmt 1 view -0
 11971              		.cfi_startproc
 11972              		@ args = 0, pretend = 0, frame = 0
 11973              		@ frame_needed = 0, uses_anonymous_args = 0
 11974              		@ link register save eliminated.
1209:src/xeq.c     **** 
 11975              		.loc 1 1209 2 view .LVU3192
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 11976              		.loc 1 1211 2 view .LVU3193
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 11977              		.loc 1 1211 6 is_stmt 0 view .LVU3194
 11978 0000 024B     		ldr	r3, .L880
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 11979              		.loc 1 1211 5 view .LVU3195
ARM GAS  /tmp/ccaPnj5t.s 			page 363


 11980 0002 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 11981 0004 03B9     		cbnz	r3, .L879
1312:src/xeq.c     **** 
 11982              		.loc 1 1312 1 view .LVU3196
 11983 0006 7047     		bx	lr
 11984              	.L879:
 11985 0008 FFF7FEBF 		b	process_cmdline.part.0
 11986              	.LVL886:
 11987              	.L881:
 11988              		.align	2
 11989              	.L880:
 11990 000c 00000000 		.word	StateWhileOn
 11991              		.cfi_endproc
 11992              	.LFE87:
 11994              		.section	.text.cpx_pi,"ax",%progbits
 11995              		.align	1
 11996              		.p2align 2,,3
 11997              		.global	cpx_pi
 11998              		.syntax unified
 11999              		.thumb
 12000              		.thumb_func
 12001              		.fpu fpv4-sp-d16
 12003              	cpx_pi:
 12004              	.LVL887:
 12005              	.LFB76:
 967:src/xeq.c     **** 	switch (op) {
 12006              		.loc 1 967 29 is_stmt 1 view -0
 12007              		.cfi_startproc
 12008              		@ args = 0, pretend = 0, frame = 40
 12009              		@ frame_needed = 0, uses_anonymous_args = 0
 968:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12010              		.loc 1 968 2 view .LVU3198
 967:src/xeq.c     **** 	switch (op) {
 12011              		.loc 1 967 29 is_stmt 0 view .LVU3199
 12012 0000 70B5     		push	{r4, r5, r6, lr}
 12013              		.cfi_def_cfa_offset 16
 12014              		.cfi_offset 4, -16
 12015              		.cfi_offset 5, -12
 12016              		.cfi_offset 6, -8
 12017              		.cfi_offset 14, -4
 968:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12018              		.loc 1 968 2 view .LVU3200
 12019 0002 C728     		cmp	r0, #199
 967:src/xeq.c     **** 	switch (op) {
 12020              		.loc 1 967 29 view .LVU3201
 12021 0004 8AB0     		sub	sp, sp, #40
 12022              		.cfi_def_cfa_offset 56
 968:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12023              		.loc 1 968 2 view .LVU3202
 12024 0006 26D0     		beq	.L883
 12025 0008 C828     		cmp	r0, #200
 12026 000a 1AD1     		bne	.L894
 977:src/xeq.c     **** 		process_cmdline();
 12027              		.loc 1 977 3 is_stmt 1 view .LVU3203
 977:src/xeq.c     **** 		process_cmdline();
 12028              		.loc 1 977 21 is_stmt 0 view .LVU3204
 12029 000c 2B4D     		ldr	r5, .L897
ARM GAS  /tmp/ccaPnj5t.s 			page 364


 12030 000e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12031              	.LBB2244:
 12032              	.LBB2245:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12033              		.loc 1 1211 5 view .LVU3205
 12034 0010 2A7F     		ldrb	r2, [r5, #28]	@ zero_extendqisi2
 12035              	.LBE2245:
 12036              	.LBE2244:
 977:src/xeq.c     **** 		process_cmdline();
 12037              		.loc 1 977 21 view .LVU3206
 12038 0012 6FF38613 		bfc	r3, #6, #1
 12039 0016 EB75     		strb	r3, [r5, #23]
 978:src/xeq.c     **** 		State2.state_lift = 0;
 12040              		.loc 1 978 3 is_stmt 1 view .LVU3207
 12041              	.LBB2248:
 12042              	.LBI2244:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 12043              		.loc 1 1208 6 view .LVU3208
 12044              	.LBB2246:
1209:src/xeq.c     **** 
 12045              		.loc 1 1209 2 view .LVU3209
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12046              		.loc 1 1211 2 view .LVU3210
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12047              		.loc 1 1211 5 is_stmt 0 view .LVU3211
 12048 0018 002A     		cmp	r2, #0
 12049 001a 41D1     		bne	.L895
 12050              	.LVL888:
 12051              	.L888:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12052              		.loc 1 1211 5 view .LVU3212
 12053              	.LBE2246:
 12054              	.LBE2248:
 979:src/xeq.c     **** 		{
 12055              		.loc 1 979 3 is_stmt 1 view .LVU3213
 979:src/xeq.c     **** 		{
 12056              		.loc 1 979 21 is_stmt 0 view .LVU3214
 12057 001c EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12058 001e 284C     		ldr	r4, .L897+4
 12059 0020 6FF38613 		bfc	r3, #6, #1
 12060 0024 EB75     		strb	r3, [r5, #23]
 12061              	.LBB2249:
 981:src/xeq.c     **** 			getX(&r);
 12062              		.loc 1 981 4 is_stmt 1 view .LVU3215
 982:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 12063              		.loc 1 982 4 view .LVU3216
 12064              	.LVL889:
 12065              	.LBB2250:
 12066              	.LBI2250:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 12067              		.loc 1 818 12 view .LVU3217
 12068              	.LBB2251:
 819:src/xeq.c     **** }
 12069              		.loc 1 819 2 view .LVU3218
 819:src/xeq.c     **** }
 12070              		.loc 1 819 9 is_stmt 0 view .LVU3219
 12071 0026 01A8     		add	r0, sp, #4
ARM GAS  /tmp/ccaPnj5t.s 			page 365


 12072              	.LVL890:
 819:src/xeq.c     **** }
 12073              		.loc 1 819 9 view .LVU3220
 12074 0028 6421     		movs	r1, #100
 12075 002a FFF7FEFF 		bl	getRegister
 12076              	.LVL891:
 819:src/xeq.c     **** }
 12077              		.loc 1 819 9 view .LVU3221
 12078              	.LBE2251:
 12079              	.LBE2250:
 983:src/xeq.c     **** 			setX(&r);
 12080              		.loc 1 983 4 is_stmt 1 view .LVU3222
 12081 002e 01AA     		add	r2, sp, #4
 12082 0030 2449     		ldr	r1, .L897+8
 12083 0032 1046     		mov	r0, r2
 12084 0034 FFF7FEFF 		bl	dn_multiply
 12085              	.LVL892:
 984:src/xeq.c     **** 		}
 12086              		.loc 1 984 4 view .LVU3223
 12087              	.LBB2252:
 12088              	.LBI2252:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 12089              		.loc 1 822 6 view .LVU3224
 12090              	.LBB2253:
 823:src/xeq.c     **** }
 12091              		.loc 1 823 2 view .LVU3225
 12092 0038 01A9     		add	r1, sp, #4
 12093              	.LVL893:
 823:src/xeq.c     **** }
 12094              		.loc 1 823 2 is_stmt 0 view .LVU3226
 12095 003a 6420     		movs	r0, #100
 12096 003c FFF7FEFF 		bl	setRegister
 12097              	.LVL894:
 823:src/xeq.c     **** }
 12098              		.loc 1 823 2 view .LVU3227
 12099 0040 00E0     		b	.L885
 12100              	.LVL895:
 12101              	.L894:
 823:src/xeq.c     **** }
 12102              		.loc 1 823 2 view .LVU3228
 12103 0042 1F4C     		ldr	r4, .L897+4
 12104              	.LVL896:
 12105              	.L885:
 823:src/xeq.c     **** }
 12106              		.loc 1 823 2 view .LVU3229
 12107              	.LBE2253:
 12108              	.LBE2252:
 12109              	.LBE2249:
 986:src/xeq.c     **** 	}
 12110              		.loc 1 986 10 is_stmt 1 view .LVU3230
 988:src/xeq.c     **** }
 12111              		.loc 1 988 2 view .LVU3231
 12112 0044 2268     		ldr	r2, [r4]
 12113 0046 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 12114 004a 43F00103 		orr	r3, r3, #1
 12115 004e 82F8AD37 		strb	r3, [r2, #1965]
 989:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 366


 12116              		.loc 1 989 1 is_stmt 0 view .LVU3232
 12117 0052 0AB0     		add	sp, sp, #40
 12118              		.cfi_remember_state
 12119              		.cfi_def_cfa_offset 16
 12120              		@ sp needed
 12121 0054 70BD     		pop	{r4, r5, r6, pc}
 12122              	.LVL897:
 12123              	.L883:
 12124              		.cfi_restore_state
 970:src/xeq.c     **** 			stack_begin( 1 );
 12125              		.loc 1 970 3 is_stmt 1 view .LVU3233
 970:src/xeq.c     **** 			stack_begin( 1 );
 12126              		.loc 1 970 8 is_stmt 0 view .LVU3234
 12127 0056 1A4C     		ldr	r4, .L897+4
 12128 0058 2368     		ldr	r3, [r4]
 970:src/xeq.c     **** 			stack_begin( 1 );
 12129              		.loc 1 970 18 view .LVU3235
 12130 005a 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 970:src/xeq.c     **** 			stack_begin( 1 );
 12131              		.loc 1 970 6 view .LVU3236
 12132 005e 12F0060F 		tst	r2, #6
 12133 0062 20D0     		beq	.L896
 12134              	.LVL898:
 12135              	.L886:
 974:src/xeq.c     **** 		break;
 12136              		.loc 1 974 3 is_stmt 1 view .LVU3237
 12137              	.LBB2254:
 12138              	.LBB2255:
1101:src/xeq.c     **** }
 12139              		.loc 1 1101 24 is_stmt 0 view .LVU3238
 12140 0064 B3F8E817 		ldrh	r1, [r3, #2024]
 12141              	.LBE2255:
 12142              	.LBE2254:
 974:src/xeq.c     **** 		break;
 12143              		.loc 1 974 3 view .LVU3239
 12144 0068 174B     		ldr	r3, .L897+12
 12145              	.LBB2258:
 12146              	.LBB2256:
1101:src/xeq.c     **** }
 12147              		.loc 1 1101 24 view .LVU3240
 12148 006a 44F20105 		movw	r5, #16385
 12149 006e 2940     		ands	r1, r1, r5
 12150              	.LBE2256:
 12151              	.LBE2258:
 974:src/xeq.c     **** 		break;
 12152              		.loc 1 974 22 view .LVU3241
 12153 0070 A1F58041 		sub	r1, r1, #16384
 12154 0074 B1FA81F1 		clz	r1, r1
 12155 0078 4909     		lsrs	r1, r1, #5
 12156 007a 6620     		movs	r0, #102
 974:src/xeq.c     **** 		break;
 12157              		.loc 1 974 3 view .LVU3242
 12158 007c 1E68     		ldr	r6, [r3]
 12159              	.LBB2259:
 12160              	.LBI2254:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12161              		.loc 1 1100 5 is_stmt 1 view .LVU3243
ARM GAS  /tmp/ccaPnj5t.s 			page 367


 12162              	.LBB2257:
1101:src/xeq.c     **** }
 12163              		.loc 1 1101 2 view .LVU3244
 12164              	.LBE2257:
 12165              	.LBE2259:
 974:src/xeq.c     **** 		break;
 12166              		.loc 1 974 22 is_stmt 0 view .LVU3245
 12167 007e FFF7FEFF 		bl	get_const
 12168              	.LVL899:
 12169              	.LBB2260:
 12170              	.LBB2261:
 12171              	.LBB2262:
 12172              	.LBB2263:
1101:src/xeq.c     **** }
 12173              		.loc 1 1101 24 view .LVU3246
 12174 0082 2368     		ldr	r3, [r4]
 12175 0084 B3F8E837 		ldrh	r3, [r3, #2024]
 12176              	.LBE2263:
 12177              	.LBE2262:
 721:src/xeq.c     **** }
 12178              		.loc 1 721 2 view .LVU3247
 12179 0088 1D40     		ands	r5, r5, r3
 12180 008a B5F5804F 		cmp	r5, #16384
 12181              	.LBE2261:
 12182              	.LBE2260:
 974:src/xeq.c     **** 		break;
 12183              		.loc 1 974 22 view .LVU3248
 12184 008e 0146     		mov	r1, r0
 12185              	.LVL900:
 12186              	.LBB2267:
 12187              	.LBI2260:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12188              		.loc 1 720 6 is_stmt 1 view .LVU3249
 12189              	.LBB2266:
 721:src/xeq.c     **** }
 12190              		.loc 1 721 2 view .LVU3250
 12191              	.LBB2265:
 12192              	.LBI2262:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12193              		.loc 1 1100 5 view .LVU3251
 12194              	.LBB2264:
1101:src/xeq.c     **** }
 12195              		.loc 1 1101 2 view .LVU3252
 12196              	.LBE2264:
 12197              	.LBE2265:
 721:src/xeq.c     **** }
 12198              		.loc 1 721 2 is_stmt 0 view .LVU3253
 12199 0090 08BF     		it	eq
 12200 0092 1022     		moveq	r2, #16
 12201 0094 3046     		mov	r0, r6
 12202              	.LVL901:
 721:src/xeq.c     **** }
 12203              		.loc 1 721 2 view .LVU3254
 12204 0096 18BF     		it	ne
 12205 0098 0822     		movne	r2, #8
 12206 009a FFF7FEFF 		bl	xcopy
 12207              	.LVL902:
ARM GAS  /tmp/ccaPnj5t.s 			page 368


 722:src/xeq.c     **** 
 12208              		.loc 1 722 1 view .LVU3255
 12209 009e D1E7     		b	.L885
 12210              	.LVL903:
 12211              	.L895:
 722:src/xeq.c     **** 
 12212              		.loc 1 722 1 view .LVU3256
 12213              	.LBE2266:
 12214              	.LBE2267:
 12215              	.LBB2268:
 12216              	.LBB2247:
 12217 00a0 FFF7FEFF 		bl	process_cmdline.part.0
 12218              	.LVL904:
 722:src/xeq.c     **** 
 12219              		.loc 1 722 1 view .LVU3257
 12220 00a4 BAE7     		b	.L888
 12221              	.LVL905:
 12222              	.L896:
 722:src/xeq.c     **** 
 12223              		.loc 1 722 1 view .LVU3258
 12224              	.LBE2247:
 12225              	.LBE2268:
 971:src/xeq.c     **** 			SET_REAL;
 12226              		.loc 1 971 4 is_stmt 1 view .LVU3259
 12227 00a6 0120     		movs	r0, #1
 12228              	.LVL906:
 971:src/xeq.c     **** 			SET_REAL;
 12229              		.loc 1 971 4 is_stmt 0 view .LVU3260
 12230 00a8 FFF7FEFF 		bl	stack_begin
 12231              	.LVL907:
 972:src/xeq.c     **** 		}
 12232              		.loc 1 972 4 is_stmt 1 view .LVU3261
 12233 00ac 2368     		ldr	r3, [r4]
 12234 00ae 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 12235 00b2 42F00202 		orr	r2, r2, #2
 12236 00b6 83F8AC27 		strb	r2, [r3, #1964]
 12237 00ba D3E7     		b	.L886
 12238              	.L898:
 12239              		.align	2
 12240              	.L897:
 12241 00bc 00000000 		.word	StateWhileOn
 12242 00c0 00000000 		.word	main_ram
 12243 00c4 00000000 		.word	const_PI
 12244 00c8 00000000 		.word	StackBase
 12245              		.cfi_endproc
 12246              	.LFE76:
 12248              		.section	.text.process_cmdline_set_lift,"ax",%progbits
 12249              		.align	1
 12250              		.p2align 2,,3
 12251              		.global	process_cmdline_set_lift
 12252              		.syntax unified
 12253              		.thumb
 12254              		.thumb_func
 12255              		.fpu fpv4-sp-d16
 12257              	process_cmdline_set_lift:
 12258              	.LFB88:
1314:src/xeq.c     **** 	process_cmdline();
ARM GAS  /tmp/ccaPnj5t.s 			page 369


 12259              		.loc 1 1314 37 view -0
 12260              		.cfi_startproc
 12261              		@ args = 0, pretend = 0, frame = 0
 12262              		@ frame_needed = 0, uses_anonymous_args = 0
1315:src/xeq.c     **** 	set_lift();
 12263              		.loc 1 1315 2 view .LVU3263
 12264              	.LBB2269:
 12265              	.LBI2269:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 12266              		.loc 1 1208 6 view .LVU3264
 12267              	.LBB2270:
1209:src/xeq.c     **** 
 12268              		.loc 1 1209 2 view .LVU3265
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12269              		.loc 1 1211 2 view .LVU3266
 12270              	.LBE2270:
 12271              	.LBE2269:
1314:src/xeq.c     **** 	process_cmdline();
 12272              		.loc 1 1314 37 is_stmt 0 view .LVU3267
 12273 0000 10B5     		push	{r4, lr}
 12274              		.cfi_def_cfa_offset 8
 12275              		.cfi_offset 4, -8
 12276              		.cfi_offset 14, -4
 12277              	.LBB2273:
 12278              	.LBB2271:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12279              		.loc 1 1211 6 view .LVU3268
 12280 0002 074C     		ldr	r4, .L906
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12281              		.loc 1 1211 5 view .LVU3269
 12282 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 12283 0006 23B9     		cbnz	r3, .L905
 12284              	.LBE2271:
 12285              	.LBE2273:
1316:src/xeq.c     **** }
 12286              		.loc 1 1316 2 is_stmt 1 view .LVU3270
 12287              	.LBB2274:
 12288              	.LBI2274:
 761:src/xeq.c     ****     State2.state_lift = 1;
 12289              		.loc 1 761 6 view .LVU3271
 12290              	.LBB2275:
 762:src/xeq.c     **** }
 12291              		.loc 1 762 5 view .LVU3272
 762:src/xeq.c     **** }
 12292              		.loc 1 762 23 is_stmt 0 view .LVU3273
 12293 0008 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12294 000a 43F04003 		orr	r3, r3, #64
 12295 000e E375     		strb	r3, [r4, #23]
 12296              	.LBE2275:
 12297              	.LBE2274:
1317:src/xeq.c     **** 
 12298              		.loc 1 1317 1 view .LVU3274
 12299 0010 10BD     		pop	{r4, pc}
 12300              	.L905:
 12301              	.LBB2277:
 12302              	.LBB2272:
 12303 0012 FFF7FEFF 		bl	process_cmdline.part.0
ARM GAS  /tmp/ccaPnj5t.s 			page 370


 12304              	.LVL908:
 12305              	.LBE2272:
 12306              	.LBE2277:
1316:src/xeq.c     **** }
 12307              		.loc 1 1316 2 is_stmt 1 view .LVU3275
 12308              	.LBB2278:
 761:src/xeq.c     ****     State2.state_lift = 1;
 12309              		.loc 1 761 6 view .LVU3276
 12310              	.LBB2276:
 762:src/xeq.c     **** }
 12311              		.loc 1 762 5 view .LVU3277
 762:src/xeq.c     **** }
 12312              		.loc 1 762 23 is_stmt 0 view .LVU3278
 12313 0016 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12314 0018 43F04003 		orr	r3, r3, #64
 12315 001c E375     		strb	r3, [r4, #23]
 12316              	.LBE2276:
 12317              	.LBE2278:
1317:src/xeq.c     **** 
 12318              		.loc 1 1317 1 view .LVU3279
 12319 001e 10BD     		pop	{r4, pc}
 12320              	.L907:
 12321              		.align	2
 12322              	.L906:
 12323 0020 00000000 		.word	StateWhileOn
 12324              		.cfi_endproc
 12325              	.LFE88:
 12327              		.section	.text.setX_int,"ax",%progbits
 12328              		.align	1
 12329              		.p2align 2,,3
 12330              		.global	setX_int
 12331              		.syntax unified
 12332              		.thumb
 12333              		.thumb_func
 12334              		.fpu fpv4-sp-d16
 12336              	setX_int:
 12337              	.LVL909:
 12338              	.LFB101:
1486:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12339              		.loc 1 1486 34 is_stmt 1 view -0
 12340              		.cfi_startproc
 12341              		@ args = 0, pretend = 0, frame = 8
 12342              		@ frame_needed = 0, uses_anonymous_args = 0
1487:src/xeq.c     **** }
 12343              		.loc 1 1487 2 view .LVU3281
1486:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12344              		.loc 1 1486 34 is_stmt 0 view .LVU3282
 12345 0000 00B5     		push	{lr}
 12346              		.cfi_def_cfa_offset 4
 12347              		.cfi_offset 14, -4
 12348 0002 0B46     		mov	r3, r1
 12349 0004 83B0     		sub	sp, sp, #12
 12350              		.cfi_def_cfa_offset 16
1486:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12351              		.loc 1 1486 34 view .LVU3283
 12352 0006 0246     		mov	r2, r0
 12353              	.LBB2279:
ARM GAS  /tmp/ccaPnj5t.s 			page 371


 12354              	.LBB2280:
1405:src/xeq.c     **** }
 12355              		.loc 1 1405 8 view .LVU3284
 12356 0008 6420     		movs	r0, #100
 12357              	.LVL910:
1405:src/xeq.c     **** }
 12358              		.loc 1 1405 8 view .LVU3285
 12359 000a CDE90023 		strd	r2, [sp]
 12360              	.LVL911:
1405:src/xeq.c     **** }
 12361              		.loc 1 1405 8 view .LVU3286
 12362              	.LBE2280:
 12363              	.LBI2279:
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 12364              		.loc 1 1404 6 is_stmt 1 view .LVU3287
 12365              	.LBB2281:
1405:src/xeq.c     **** }
 12366              		.loc 1 1405 2 view .LVU3288
1405:src/xeq.c     **** }
 12367              		.loc 1 1405 8 is_stmt 0 view .LVU3289
 12368 000e FFF7FEFF 		bl	get_reg_n
 12369              	.LVL912:
1405:src/xeq.c     **** }
 12370              		.loc 1 1405 2 view .LVU3290
 12371 0012 0822     		movs	r2, #8
 12372 0014 6946     		mov	r1, sp
 12373 0016 FFF7FEFF 		bl	xcopy
 12374              	.LVL913:
1405:src/xeq.c     **** }
 12375              		.loc 1 1405 2 view .LVU3291
 12376              	.LBE2281:
 12377              	.LBE2279:
1488:src/xeq.c     **** 
 12378              		.loc 1 1488 1 view .LVU3292
 12379 001a 03B0     		add	sp, sp, #12
 12380              		.cfi_def_cfa_offset 4
 12381              		@ sp needed
 12382 001c 5DF804FB 		ldr	pc, [sp], #4
 12383              		.cfi_endproc
 12384              	.LFE101:
 12386              		.section	.text.do_rcl,"ax",%progbits
 12387              		.align	1
 12388              		.p2align 2,,3
 12389              		.syntax unified
 12390              		.thumb
 12391              		.thumb_func
 12392              		.fpu fpv4-sp-d16
 12394              	do_rcl:
 12395              	.LVL914:
 12396              	.LFB117:
1728:src/xeq.c     **** 	if (op == RARG_RCL) {
 12397              		.loc 1 1728 45 is_stmt 1 view -0
 12398              		.cfi_startproc
 12399              		@ args = 0, pretend = 0, frame = 40
 12400              		@ frame_needed = 0, uses_anonymous_args = 0
1729:src/xeq.c     **** 		REGISTER temp;
 12401              		.loc 1 1729 2 view .LVU3294
ARM GAS  /tmp/ccaPnj5t.s 			page 372


1728:src/xeq.c     **** 	if (op == RARG_RCL) {
 12402              		.loc 1 1728 45 is_stmt 0 view .LVU3295
 12403 0000 30B5     		push	{r4, r5, lr}
 12404              		.cfi_def_cfa_offset 12
 12405              		.cfi_offset 4, -12
 12406              		.cfi_offset 5, -8
 12407              		.cfi_offset 14, -4
1729:src/xeq.c     **** 		REGISTER temp;
 12408              		.loc 1 1729 5 view .LVU3296
 12409 0002 0A29     		cmp	r1, #10
1728:src/xeq.c     **** 	if (op == RARG_RCL) {
 12410              		.loc 1 1728 45 view .LVU3297
 12411 0004 8BB0     		sub	sp, sp, #44
 12412              		.cfi_def_cfa_offset 56
1728:src/xeq.c     **** 	if (op == RARG_RCL) {
 12413              		.loc 1 1728 45 view .LVU3298
 12414 0006 0B46     		mov	r3, r1
1729:src/xeq.c     **** 		REGISTER temp;
 12415              		.loc 1 1729 5 view .LVU3299
 12416 0008 33D0     		beq	.L931
1735:src/xeq.c     **** 			long long int r;
 12417              		.loc 1 1735 3 is_stmt 1 view .LVU3300
1735:src/xeq.c     **** 			long long int r;
 12418              		.loc 1 1735 7 is_stmt 0 view .LVU3301
 12419 000a 304A     		ldr	r2, .L933
 12420 000c 1268     		ldr	r2, [r2]
 12421 000e 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1735:src/xeq.c     **** 			long long int r;
 12422              		.loc 1 1735 6 view .LVU3302
 12423 0012 D207     		lsls	r2, r2, #31
 12424 0014 0146     		mov	r1, r0
 12425              	.LVL915:
 12426              	.LBB2311:
1738:src/xeq.c     **** 				illegal(op);
 12427              		.loc 1 1738 8 view .LVU3303
 12428 0016 A3F10A03 		sub	r3, r3, #10
 12429              	.LBE2311:
1735:src/xeq.c     **** 			long long int r;
 12430              		.loc 1 1735 6 view .LVU3304
 12431 001a 14D5     		bpl	.L916
 12432              	.LBB2318:
1736:src/xeq.c     **** 
 12433              		.loc 1 1736 4 is_stmt 1 view .LVU3305
1738:src/xeq.c     **** 				illegal(op);
 12434              		.loc 1 1738 4 view .LVU3306
1738:src/xeq.c     **** 				illegal(op);
 12435              		.loc 1 1738 8 is_stmt 0 view .LVU3307
 12436 001c 98B2     		uxth	r0, r3
 12437              	.LVL916:
1738:src/xeq.c     **** 				illegal(op);
 12438              		.loc 1 1738 8 view .LVU3308
 12439 001e 6A46     		mov	r2, sp
 12440 0020 0123     		movs	r3, #1
 12441 0022 FFF7FEFF 		bl	storcl_intop
 12442              	.LVL917:
1738:src/xeq.c     **** 				illegal(op);
 12443              		.loc 1 1738 7 view .LVU3309
ARM GAS  /tmp/ccaPnj5t.s 			page 373


 12444 0026 20B1     		cbz	r0, .L917
1739:src/xeq.c     **** 			setlastX();
 12445              		.loc 1 1739 5 is_stmt 1 view .LVU3310
1739:src/xeq.c     **** 			setlastX();
 12446              		.loc 1 1739 5 view .LVU3311
 12447              	.LVL918:
 12448              	.LBB2312:
 12449              	.LBI2312:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12450              		.loc 1 540 5 view .LVU3312
 12451              	.LBB2313:
 541:src/xeq.c     **** 		Error = e;
 12452              		.loc 1 541 2 view .LVU3313
 541:src/xeq.c     **** 		Error = e;
 12453              		.loc 1 541 12 is_stmt 0 view .LVU3314
 12454 0028 294B     		ldr	r3, .L933+4
 541:src/xeq.c     **** 		Error = e;
 12455              		.loc 1 541 5 view .LVU3315
 12456 002a 1A68     		ldr	r2, [r3]
 12457 002c 0AB9     		cbnz	r2, .L917
 12458              	.LVL919:
 12459              	.LBB2314:
 12460              	.LBI2314:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12461              		.loc 1 540 5 is_stmt 1 view .LVU3316
 12462              	.LBB2315:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 12463              		.loc 1 542 3 view .LVU3317
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 12464              		.loc 1 542 9 is_stmt 0 view .LVU3318
 12465 002e 0322     		movs	r2, #3
 12466 0030 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 12467              		.loc 1 543 3 is_stmt 1 view .LVU3319
 12468              	.LVL920:
 12469              	.L917:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 12470              		.loc 1 543 3 is_stmt 0 view .LVU3320
 12471              	.LBE2315:
 12472              	.LBE2314:
 12473              	.LBE2313:
 12474              	.LBE2312:
1739:src/xeq.c     **** 			setlastX();
 12475              		.loc 1 1739 5 is_stmt 1 discriminator 1 view .LVU3321
1740:src/xeq.c     **** 			setX_int(r);
 12476              		.loc 1 1740 4 discriminator 1 view .LVU3322
 12477              	.LBB2316:
 12478              	.LBI2316:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12479              		.loc 1 786 6 discriminator 1 view .LVU3323
 12480              	.LBB2317:
 787:src/xeq.c     **** }
 12481              		.loc 1 787 2 discriminator 1 view .LVU3324
 12482 0032 6421     		movs	r1, #100
 12483 0034 6C20     		movs	r0, #108
 12484 0036 FFF7FEFF 		bl	copyreg_n
 12485              	.LVL921:
ARM GAS  /tmp/ccaPnj5t.s 			page 374


 12486              	.LBE2317:
 12487              	.LBE2316:
1741:src/xeq.c     **** 		} else {
 12488              		.loc 1 1741 4 discriminator 1 view .LVU3325
 12489 003a DDE90001 		ldrd	r0, [sp]
 12490 003e FFF7FEFF 		bl	setX_int
 12491              	.LVL922:
 12492              	.LBE2318:
1751:src/xeq.c     **** 
 12493              		.loc 1 1751 1 is_stmt 0 discriminator 1 view .LVU3326
 12494 0042 0BB0     		add	sp, sp, #44
 12495              		.cfi_remember_state
 12496              		.cfi_def_cfa_offset 12
 12497              		@ sp needed
 12498 0044 30BD     		pop	{r4, r5, pc}
 12499              	.LVL923:
 12500              	.L916:
 12501              		.cfi_restore_state
 12502              	.LBB2319:
1743:src/xeq.c     **** 
 12503              		.loc 1 1743 4 is_stmt 1 view .LVU3327
1745:src/xeq.c     **** 				illegal(op);
 12504              		.loc 1 1745 4 view .LVU3328
1745:src/xeq.c     **** 				illegal(op);
 12505              		.loc 1 1745 8 is_stmt 0 view .LVU3329
 12506 0046 6C46     		mov	r4, sp
 12507 0048 98B2     		uxth	r0, r3
 12508              	.LVL924:
1745:src/xeq.c     **** 				illegal(op);
 12509              		.loc 1 1745 8 view .LVU3330
 12510 004a 2246     		mov	r2, r4
 12511 004c 0123     		movs	r3, #1
 12512 004e FFF7FEFF 		bl	storcl_op
 12513              	.LVL925:
1745:src/xeq.c     **** 				illegal(op);
 12514              		.loc 1 1745 7 view .LVU3331
 12515 0052 20B1     		cbz	r0, .L918
1746:src/xeq.c     **** 			setlastX();
 12516              		.loc 1 1746 5 is_stmt 1 view .LVU3332
1746:src/xeq.c     **** 			setlastX();
 12517              		.loc 1 1746 5 view .LVU3333
 12518              	.LVL926:
 12519              	.LBB2320:
 12520              	.LBI2320:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12521              		.loc 1 540 5 view .LVU3334
 12522              	.LBB2321:
 541:src/xeq.c     **** 		Error = e;
 12523              		.loc 1 541 2 view .LVU3335
 541:src/xeq.c     **** 		Error = e;
 12524              		.loc 1 541 12 is_stmt 0 view .LVU3336
 12525 0054 1E4B     		ldr	r3, .L933+4
 541:src/xeq.c     **** 		Error = e;
 12526              		.loc 1 541 5 view .LVU3337
 12527 0056 1A68     		ldr	r2, [r3]
 12528 0058 0AB9     		cbnz	r2, .L918
 12529              	.LVL927:
ARM GAS  /tmp/ccaPnj5t.s 			page 375


 12530              	.LBB2322:
 12531              	.LBI2322:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12532              		.loc 1 540 5 is_stmt 1 view .LVU3338
 12533              	.LBB2323:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 12534              		.loc 1 542 3 view .LVU3339
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 12535              		.loc 1 542 9 is_stmt 0 view .LVU3340
 12536 005a 0322     		movs	r2, #3
 12537 005c 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 12538              		.loc 1 543 3 is_stmt 1 view .LVU3341
 12539              	.LVL928:
 12540              	.L918:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 12541              		.loc 1 543 3 is_stmt 0 view .LVU3342
 12542              	.LBE2323:
 12543              	.LBE2322:
 12544              	.LBE2321:
 12545              	.LBE2320:
1746:src/xeq.c     **** 			setlastX();
 12546              		.loc 1 1746 5 is_stmt 1 discriminator 1 view .LVU3343
1747:src/xeq.c     **** 			setX(&r);
 12547              		.loc 1 1747 4 discriminator 1 view .LVU3344
 12548              	.LBB2324:
 12549              	.LBI2324:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12550              		.loc 1 786 6 discriminator 1 view .LVU3345
 12551              	.LBB2325:
 787:src/xeq.c     **** }
 12552              		.loc 1 787 2 discriminator 1 view .LVU3346
 12553 005e 6421     		movs	r1, #100
 12554 0060 6C20     		movs	r0, #108
 12555 0062 FFF7FEFF 		bl	copyreg_n
 12556              	.LVL929:
 12557              	.LBE2325:
 12558              	.LBE2324:
1748:src/xeq.c     **** 		}
 12559              		.loc 1 1748 4 discriminator 1 view .LVU3347
 12560              	.LBB2326:
 12561              	.LBI2326:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 12562              		.loc 1 822 6 discriminator 1 view .LVU3348
 12563              	.LBB2327:
 823:src/xeq.c     **** }
 12564              		.loc 1 823 2 discriminator 1 view .LVU3349
 12565 0066 2146     		mov	r1, r4
 12566 0068 6420     		movs	r0, #100
 12567 006a FFF7FEFF 		bl	setRegister
 12568              	.LVL930:
 823:src/xeq.c     **** }
 12569              		.loc 1 823 2 is_stmt 0 discriminator 1 view .LVU3350
 12570              	.LBE2327:
 12571              	.LBE2326:
 12572              	.LBE2319:
1751:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 376


 12573              		.loc 1 1751 1 discriminator 1 view .LVU3351
 12574 006e 0BB0     		add	sp, sp, #44
 12575              		.cfi_remember_state
 12576              		.cfi_def_cfa_offset 12
 12577              		@ sp needed
 12578 0070 30BD     		pop	{r4, r5, pc}
 12579              	.LVL931:
 12580              	.L931:
 12581              		.cfi_restore_state
 12582              	.LBB2328:
1730:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
 12583              		.loc 1 1730 3 is_stmt 1 view .LVU3352
1731:src/xeq.c     **** 		lift_if_enabled();
 12584              		.loc 1 1731 3 view .LVU3353
 12585              	.LBB2329:
 12586              	.LBB2330:
 12587              	.LBB2331:
 12588              	.LBB2332:
1101:src/xeq.c     **** }
 12589              		.loc 1 1101 24 is_stmt 0 view .LVU3354
 12590 0072 164D     		ldr	r5, .L933
 12591              	.LBE2332:
 12592              	.LBE2331:
 12593              	.LBE2330:
 12594              	.LBE2329:
1731:src/xeq.c     **** 		lift_if_enabled();
 12595              		.loc 1 1731 18 view .LVU3355
 12596 0074 FFF7FEFF 		bl	get_reg_n
 12597              	.LVL932:
 12598              	.LBB2339:
 12599              	.LBB2337:
 12600              	.LBB2335:
 12601              	.LBB2333:
1101:src/xeq.c     **** }
 12602              		.loc 1 1101 24 view .LVU3356
 12603 0078 2B68     		ldr	r3, [r5]
 12604 007a B3F8E827 		ldrh	r2, [r3, #2024]
 12605 007e 44F20103 		movw	r3, #16385
 12606              	.LBE2333:
 12607              	.LBE2335:
 721:src/xeq.c     **** }
 12608              		.loc 1 721 2 view .LVU3357
 12609 0082 1340     		ands	r3, r3, r2
 12610 0084 B3F5804F 		cmp	r3, #16384
 12611 0088 6C46     		mov	r4, sp
 12612              	.LBE2337:
 12613              	.LBE2339:
1731:src/xeq.c     **** 		lift_if_enabled();
 12614              		.loc 1 1731 18 view .LVU3358
 12615 008a 0146     		mov	r1, r0
 12616              	.LVL933:
 12617              	.LBB2340:
 12618              	.LBI2329:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12619              		.loc 1 720 6 is_stmt 1 view .LVU3359
 12620              	.LBB2338:
 721:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 377


 12621              		.loc 1 721 2 view .LVU3360
 12622              	.LBB2336:
 12623              	.LBI2331:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12624              		.loc 1 1100 5 view .LVU3361
 12625              	.LBB2334:
1101:src/xeq.c     **** }
 12626              		.loc 1 1101 2 view .LVU3362
 12627              	.LBE2334:
 12628              	.LBE2336:
 721:src/xeq.c     **** }
 12629              		.loc 1 721 2 is_stmt 0 view .LVU3363
 12630 008c 0CBF     		ite	eq
 12631 008e 1022     		moveq	r2, #16
 12632 0090 0822     		movne	r2, #8
 12633 0092 2046     		mov	r0, r4
 12634              	.LVL934:
 721:src/xeq.c     **** }
 12635              		.loc 1 721 2 view .LVU3364
 12636 0094 FFF7FEFF 		bl	xcopy
 12637              	.LVL935:
 721:src/xeq.c     **** }
 12638              		.loc 1 721 2 view .LVU3365
 12639              	.LBE2338:
 12640              	.LBE2340:
1732:src/xeq.c     **** 		copyreg(StackBase, &temp);
 12641              		.loc 1 1732 3 is_stmt 1 view .LVU3366
 12642              	.LBB2341:
 12643              	.LBI2341:
 741:src/xeq.c     **** 	if (get_lift())
 12644              		.loc 1 741 6 view .LVU3367
 12645              	.LBB2342:
 742:src/xeq.c     **** 		lift();
 12646              		.loc 1 742 2 view .LVU3368
 12647              	.LBB2343:
 12648              	.LBI2343:
 737:src/xeq.c     **** 	return State2.state_lift;
 12649              		.loc 1 737 12 view .LVU3369
 12650              	.LBB2344:
 738:src/xeq.c     **** }
 12651              		.loc 1 738 2 view .LVU3370
 738:src/xeq.c     **** }
 12652              		.loc 1 738 15 is_stmt 0 view .LVU3371
 12653 0098 0E4B     		ldr	r3, .L933+8
 12654 009a DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 12655              	.LBE2344:
 12656              	.LBE2343:
 742:src/xeq.c     **** 		lift();
 12657              		.loc 1 742 5 view .LVU3372
 12658 009c 5906     		lsls	r1, r3, #25
 12659 009e 11D4     		bmi	.L932
 12660              	.L913:
 12661              	.LBE2342:
 12662              	.LBE2341:
1733:src/xeq.c     **** 	} else {
 12663              		.loc 1 1733 3 is_stmt 1 view .LVU3373
 12664              	.LBB2346:
ARM GAS  /tmp/ccaPnj5t.s 			page 378


 12665              	.LBB2347:
 12666              	.LBB2348:
 12667              	.LBB2349:
1101:src/xeq.c     **** }
 12668              		.loc 1 1101 24 is_stmt 0 view .LVU3374
 12669 00a0 2A68     		ldr	r2, [r5]
 12670              	.LBE2349:
 12671              	.LBE2348:
 12672              	.LBE2347:
 12673              	.LBE2346:
1733:src/xeq.c     **** 	} else {
 12674              		.loc 1 1733 3 view .LVU3375
 12675 00a2 0D4B     		ldr	r3, .L933+12
 12676              	.LVL936:
 12677              	.LBB2355:
 12678              	.LBI2346:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12679              		.loc 1 720 6 is_stmt 1 view .LVU3376
 12680              	.LBB2354:
 721:src/xeq.c     **** }
 12681              		.loc 1 721 2 view .LVU3377
 12682              	.LBB2352:
 12683              	.LBI2348:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12684              		.loc 1 1100 5 view .LVU3378
 12685              	.LBB2350:
1101:src/xeq.c     **** }
 12686              		.loc 1 1101 2 view .LVU3379
1101:src/xeq.c     **** }
 12687              		.loc 1 1101 24 is_stmt 0 view .LVU3380
 12688 00a4 B2F8E827 		ldrh	r2, [r2, #2024]
 12689              	.LBE2350:
 12690              	.LBE2352:
 721:src/xeq.c     **** }
 12691              		.loc 1 721 2 view .LVU3381
 12692 00a8 1868     		ldr	r0, [r3]
 12693              	.LBB2353:
 12694              	.LBB2351:
1101:src/xeq.c     **** }
 12695              		.loc 1 1101 24 view .LVU3382
 12696 00aa 44F20103 		movw	r3, #16385
 12697              	.LVL937:
1101:src/xeq.c     **** }
 12698              		.loc 1 1101 24 view .LVU3383
 12699              	.LBE2351:
 12700              	.LBE2353:
 721:src/xeq.c     **** }
 12701              		.loc 1 721 2 view .LVU3384
 12702 00ae 1340     		ands	r3, r3, r2
 12703 00b0 B3F5804F 		cmp	r3, #16384
 12704 00b4 2146     		mov	r1, r4
 12705 00b6 0CBF     		ite	eq
 12706 00b8 1022     		moveq	r2, #16
 12707 00ba 0822     		movne	r2, #8
 12708 00bc FFF7FEFF 		bl	xcopy
 12709              	.LVL938:
 721:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 379


 12710              		.loc 1 721 2 view .LVU3385
 12711              	.LBE2354:
 12712              	.LBE2355:
 12713              	.LBE2328:
1751:src/xeq.c     **** 
 12714              		.loc 1 1751 1 view .LVU3386
 12715 00c0 0BB0     		add	sp, sp, #44
 12716              		.cfi_remember_state
 12717              		.cfi_def_cfa_offset 12
 12718              		@ sp needed
 12719 00c2 30BD     		pop	{r4, r5, pc}
 12720              	.L932:
 12721              		.cfi_restore_state
 12722              	.LBB2357:
 12723              	.LBB2356:
 12724              	.LBB2345:
 743:src/xeq.c     **** }
 12725              		.loc 1 743 3 is_stmt 1 view .LVU3387
 12726 00c4 FFF7FEFF 		bl	lift
 12727              	.LVL939:
 12728 00c8 EAE7     		b	.L913
 12729              	.L934:
 12730 00ca 00BF     		.align	2
 12731              	.L933:
 12732 00cc 00000000 		.word	main_ram
 12733 00d0 00000000 		.word	Error
 12734 00d4 00000000 		.word	StateWhileOn
 12735 00d8 00000000 		.word	StackBase
 12736              	.LBE2345:
 12737              	.LBE2356:
 12738              	.LBE2357:
 12739              		.cfi_endproc
 12740              	.LFE117:
 12742              		.section	.text.setX_int_sgn,"ax",%progbits
 12743              		.align	1
 12744              		.p2align 2,,3
 12745              		.global	setX_int_sgn
 12746              		.syntax unified
 12747              		.thumb
 12748              		.thumb_func
 12749              		.fpu fpv4-sp-d16
 12751              	setX_int_sgn:
 12752              	.LVL940:
 12753              	.LFB102:
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12754              		.loc 1 1491 56 view -0
 12755              		.cfi_startproc
 12756              		@ args = 0, pretend = 0, frame = 0
 12757              		@ frame_needed = 0, uses_anonymous_args = 0
1492:src/xeq.c     **** }
 12758              		.loc 1 1492 2 view .LVU3389
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12759              		.loc 1 1491 56 is_stmt 0 view .LVU3390
 12760 0000 00B5     		push	{lr}
 12761              		.cfi_def_cfa_offset 4
 12762              		.cfi_offset 14, -4
 12763 0002 83B0     		sub	sp, sp, #12
ARM GAS  /tmp/ccaPnj5t.s 			page 380


 12764              		.cfi_def_cfa_offset 16
1492:src/xeq.c     **** }
 12765              		.loc 1 1492 2 view .LVU3391
 12766 0004 0B46     		mov	r3, r1
 12767 0006 0092     		str	r2, [sp]
 12768 0008 0246     		mov	r2, r0
 12769              	.LVL941:
1492:src/xeq.c     **** }
 12770              		.loc 1 1492 2 view .LVU3392
 12771 000a 6420     		movs	r0, #100
 12772              	.LVL942:
1492:src/xeq.c     **** }
 12773              		.loc 1 1492 2 view .LVU3393
 12774 000c FFF7FEFF 		bl	set_reg_n_int_sgn
 12775              	.LVL943:
1493:src/xeq.c     **** 
 12776              		.loc 1 1493 1 view .LVU3394
 12777 0010 03B0     		add	sp, sp, #12
 12778              		.cfi_def_cfa_offset 4
 12779              		@ sp needed
 12780 0012 5DF804FB 		ldr	pc, [sp], #4
 12781              		.cfi_endproc
 12782              	.LFE102:
 12784 0016 00BF     		.section	.text.zero_regs,"ax",%progbits
 12785              		.align	1
 12786              		.p2align 2,,3
 12787              		.global	zero_regs
 12788              		.syntax unified
 12789              		.thumb
 12790              		.thumb_func
 12791              		.fpu fpv4-sp-d16
 12793              	zero_regs:
 12794              	.LVL944:
 12795              	.LFB103:
1500:src/xeq.c     **** #if 0
 12796              		.loc 1 1500 39 is_stmt 1 view -0
 12797              		.cfi_startproc
 12798              		@ args = 0, pretend = 0, frame = 0
 12799              		@ frame_needed = 0, uses_anonymous_args = 0
 12800              		@ link register save eliminated.
1515:src/xeq.c     **** #endif
 12801              		.loc 1 1515 2 view .LVU3396
 12802              	.LBB2358:
 12803              	.LBI2358:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12804              		.loc 1 1100 5 view .LVU3397
 12805              	.LBB2359:
1101:src/xeq.c     **** }
 12806              		.loc 1 1101 2 view .LVU3398
1101:src/xeq.c     **** }
 12807              		.loc 1 1101 24 is_stmt 0 view .LVU3399
 12808 0000 084B     		ldr	r3, .L938
 12809 0002 1B68     		ldr	r3, [r3]
 12810 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 12811 0008 44F20103 		movw	r3, #16385
 12812 000c 1340     		ands	r3, r3, r2
 12813 000e A3F58043 		sub	r3, r3, #16384
ARM GAS  /tmp/ccaPnj5t.s 			page 381


 12814 0012 B3FA83F3 		clz	r3, r3
 12815 0016 5B09     		lsrs	r3, r3, #5
 12816              	.LBE2359:
 12817              	.LBE2358:
1515:src/xeq.c     **** #endif
 12818              		.loc 1 1515 24 view .LVU3400
 12819 0018 0333     		adds	r3, r3, #3
1515:src/xeq.c     **** #endif
 12820              		.loc 1 1515 2 view .LVU3401
 12821 001a 01FA03F2 		lsl	r2, r1, r3
 12822 001e 0021     		movs	r1, #0
 12823              	.LVL945:
1515:src/xeq.c     **** #endif
 12824              		.loc 1 1515 2 view .LVU3402
 12825 0020 FFF7FEBF 		b	xset
 12826              	.LVL946:
 12827              	.L939:
1515:src/xeq.c     **** #endif
 12828              		.loc 1 1515 2 view .LVU3403
 12829              		.align	2
 12830              	.L938:
 12831 0024 00000000 		.word	main_ram
 12832              		.cfi_endproc
 12833              	.LFE103:
 12835              		.section	.text.move_regs,"ax",%progbits
 12836              		.align	1
 12837              		.p2align 2,,3
 12838              		.global	move_regs
 12839              		.syntax unified
 12840              		.thumb
 12841              		.thumb_func
 12842              		.fpu fpv4-sp-d16
 12844              	move_regs:
 12845              	.LVL947:
 12846              	.LFB104:
1519:src/xeq.c     **** 	if (is_dblmode())
 12847              		.loc 1 1519 54 is_stmt 1 view -0
 12848              		.cfi_startproc
 12849              		@ args = 0, pretend = 0, frame = 0
 12850              		@ frame_needed = 0, uses_anonymous_args = 0
 12851              		@ link register save eliminated.
1520:src/xeq.c     **** 		n <<= 1;
 12852              		.loc 1 1520 2 view .LVU3405
 12853              	.LBB2360:
 12854              	.LBI2360:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12855              		.loc 1 1100 5 view .LVU3406
 12856              	.LBB2361:
1101:src/xeq.c     **** }
 12857              		.loc 1 1101 2 view .LVU3407
1101:src/xeq.c     **** }
 12858              		.loc 1 1101 24 is_stmt 0 view .LVU3408
 12859 0000 084B     		ldr	r3, .L943
 12860 0002 1B68     		ldr	r3, [r3]
 12861              	.LBE2361:
 12862              	.LBE2360:
1519:src/xeq.c     **** 	if (is_dblmode())
ARM GAS  /tmp/ccaPnj5t.s 			page 382


 12863              		.loc 1 1519 54 view .LVU3409
 12864 0004 10B4     		push	{r4}
 12865              		.cfi_def_cfa_offset 4
 12866              		.cfi_offset 4, -4
 12867              	.LBB2363:
 12868              	.LBB2362:
1101:src/xeq.c     **** }
 12869              		.loc 1 1101 24 view .LVU3410
 12870 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 12871 000a 44F20103 		movw	r3, #16385
 12872              	.LBE2362:
 12873              	.LBE2363:
1520:src/xeq.c     **** 		n <<= 1;
 12874              		.loc 1 1520 5 view .LVU3411
 12875 000e 2340     		ands	r3, r3, r4
 12876 0010 B3F5804F 		cmp	r3, #16384
1521:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12877              		.loc 1 1521 3 is_stmt 1 view .LVU3412
1521:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12878              		.loc 1 1521 5 is_stmt 0 view .LVU3413
 12879 0014 08BF     		it	eq
 12880 0016 5200     		lsleq	r2, r2, #1
 12881              	.LVL948:
1522:src/xeq.c     **** }
 12882              		.loc 1 1522 2 is_stmt 1 view .LVU3414
1523:src/xeq.c     **** 
 12883              		.loc 1 1523 1 is_stmt 0 view .LVU3415
 12884 0018 5DF8044B 		ldr	r4, [sp], #4
 12885              		.cfi_restore 4
 12886              		.cfi_def_cfa_offset 0
1522:src/xeq.c     **** }
 12887              		.loc 1 1522 2 view .LVU3416
 12888 001c D200     		lsls	r2, r2, #3
 12889              	.LVL949:
1522:src/xeq.c     **** }
 12890              		.loc 1 1522 2 view .LVU3417
 12891 001e FFF7FEBF 		b	xcopy
 12892              	.LVL950:
 12893              	.L944:
1522:src/xeq.c     **** }
 12894              		.loc 1 1522 2 view .LVU3418
 12895 0022 00BF     		.align	2
 12896              	.L943:
 12897 0024 00000000 		.word	main_ram
 12898              		.cfi_endproc
 12899              	.LFE104:
 12901              		.section	.text.zero_X,"ax",%progbits
 12902              		.align	1
 12903              		.p2align 2,,3
 12904              		.global	zero_X
 12905              		.syntax unified
 12906              		.thumb
 12907              		.thumb_func
 12908              		.fpu fpv4-sp-d16
 12910              	zero_X:
 12911              	.LFB106:
1532:src/xeq.c     **** 	set_zero(StackBase);
ARM GAS  /tmp/ccaPnj5t.s 			page 383


 12912              		.loc 1 1532 19 is_stmt 1 view -0
 12913              		.cfi_startproc
 12914              		@ args = 0, pretend = 0, frame = 0
 12915              		@ frame_needed = 0, uses_anonymous_args = 0
 12916              		@ link register save eliminated.
1533:src/xeq.c     **** }
 12917              		.loc 1 1533 2 view .LVU3420
 12918 0000 014B     		ldr	r3, .L946
 12919 0002 1868     		ldr	r0, [r3]
 12920 0004 FFF7FEBF 		b	set_zero
 12921              	.LVL951:
 12922              	.L947:
 12923              		.align	2
 12924              	.L946:
 12925 0008 00000000 		.word	StackBase
 12926              		.cfi_endproc
 12927              	.LFE106:
 12929              		.section	.text.zero_Y,"ax",%progbits
 12930              		.align	1
 12931              		.p2align 2,,3
 12932              		.global	zero_Y
 12933              		.syntax unified
 12934              		.thumb
 12935              		.thumb_func
 12936              		.fpu fpv4-sp-d16
 12938              	zero_Y:
 12939              	.LFB107:
1536:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12940              		.loc 1 1536 19 view -0
 12941              		.cfi_startproc
 12942              		@ args = 0, pretend = 0, frame = 0
 12943              		@ frame_needed = 0, uses_anonymous_args = 0
1537:src/xeq.c     **** }
 12944              		.loc 1 1537 2 view .LVU3422
1536:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 12945              		.loc 1 1536 19 is_stmt 0 view .LVU3423
 12946 0000 08B5     		push	{r3, lr}
 12947              		.cfi_def_cfa_offset 8
 12948              		.cfi_offset 3, -8
 12949              		.cfi_offset 14, -4
1537:src/xeq.c     **** }
 12950              		.loc 1 1537 2 view .LVU3424
 12951 0002 6520     		movs	r0, #101
 12952 0004 FFF7FEFF 		bl	get_reg_n
 12953              	.LVL952:
1538:src/xeq.c     **** 
 12954              		.loc 1 1538 1 view .LVU3425
 12955 0008 BDE80840 		pop	{r3, lr}
 12956              		.cfi_restore 14
 12957              		.cfi_restore 3
 12958              		.cfi_def_cfa_offset 0
1537:src/xeq.c     **** }
 12959              		.loc 1 1537 2 view .LVU3426
 12960 000c FFF7FEBF 		b	set_zero
 12961              	.LVL953:
 12962              		.cfi_endproc
 12963              	.LFE107:
ARM GAS  /tmp/ccaPnj5t.s 			page 384


 12965              		.section	.text.clrx,"ax",%progbits
 12966              		.align	1
 12967              		.p2align 2,,3
 12968              		.global	clrx
 12969              		.syntax unified
 12970              		.thumb
 12971              		.thumb_func
 12972              		.fpu fpv4-sp-d16
 12974              	clrx:
 12975              	.LVL954:
 12976              	.LFB108:
1540:src/xeq.c     **** 	zero_X();
 12977              		.loc 1 1540 26 is_stmt 1 view -0
 12978              		.cfi_startproc
 12979              		@ args = 0, pretend = 0, frame = 0
 12980              		@ frame_needed = 0, uses_anonymous_args = 0
1541:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 12981              		.loc 1 1541 2 view .LVU3428
 12982              	.LBB2364:
 12983              	.LBI2364:
1532:src/xeq.c     **** 	set_zero(StackBase);
 12984              		.loc 1 1532 6 view .LVU3429
 12985              	.LBB2365:
1533:src/xeq.c     **** }
 12986              		.loc 1 1533 2 view .LVU3430
 12987 0000 1A4B     		ldr	r3, .L956
 12988              	.LBE2365:
 12989              	.LBE2364:
1540:src/xeq.c     **** 	zero_X();
 12990              		.loc 1 1540 26 is_stmt 0 view .LVU3431
 12991 0002 10B5     		push	{r4, lr}
 12992              		.cfi_def_cfa_offset 8
 12993              		.cfi_offset 4, -8
 12994              		.cfi_offset 14, -4
1543:src/xeq.c     **** 		zero_Y();
 12995              		.loc 1 1543 6 view .LVU3432
 12996 0004 1A4C     		ldr	r4, .L956+4
 12997              	.LBB2367:
 12998              	.LBB2366:
1533:src/xeq.c     **** }
 12999              		.loc 1 1533 2 view .LVU3433
 13000 0006 1868     		ldr	r0, [r3]
 13001              	.LVL955:
1533:src/xeq.c     **** }
 13002              		.loc 1 1533 2 view .LVU3434
 13003 0008 FFF7FEFF 		bl	set_zero
 13004              	.LVL956:
 13005              	.LBE2366:
 13006              	.LBE2367:
1543:src/xeq.c     **** 		zero_Y();
 13007              		.loc 1 1543 2 is_stmt 1 view .LVU3435
1543:src/xeq.c     **** 		zero_Y();
 13008              		.loc 1 1543 6 is_stmt 0 view .LVU3436
 13009 000c 2368     		ldr	r3, [r4]
 13010 000e 93F8AC37 		ldrb	r3, [r3, #1964]	@ zero_extendqisi2
1543:src/xeq.c     **** 		zero_Y();
 13011              		.loc 1 1543 5 view .LVU3437
ARM GAS  /tmp/ccaPnj5t.s 			page 385


 13012 0012 03F04103 		and	r3, r3, #65
 13013 0016 412B     		cmp	r3, #65
 13014 0018 05D0     		beq	.L954
1553:src/xeq.c     **** }
 13015              		.loc 1 1553 2 is_stmt 1 view .LVU3438
 13016              	.LBB2368:
 13017              	.LBI2368:
 765:src/xeq.c     ****     State2.state_lift = 0;
 13018              		.loc 1 765 13 view .LVU3439
 13019              	.LBB2369:
 766:src/xeq.c     **** }
 13020              		.loc 1 766 5 view .LVU3440
 766:src/xeq.c     **** }
 13021              		.loc 1 766 23 is_stmt 0 view .LVU3441
 13022 001a 164B     		ldr	r3, .L956+8
 13023 001c DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13024 001e 6FF38612 		bfc	r2, #6, #1
 13025 0022 DA75     		strb	r2, [r3, #23]
 13026              	.LBE2369:
 13027              	.LBE2368:
1554:src/xeq.c     **** 
 13028              		.loc 1 1554 1 view .LVU3442
 13029 0024 10BD     		pop	{r4, pc}
 13030              	.L954:
1544:src/xeq.c     **** 		if (POLAR_DISPLAY) {
 13031              		.loc 1 1544 3 is_stmt 1 view .LVU3443
 13032              	.LBB2371:
 13033              	.LBI2371:
1536:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 13034              		.loc 1 1536 6 view .LVU3444
 13035              	.LBB2372:
1537:src/xeq.c     **** }
 13036              		.loc 1 1537 2 view .LVU3445
 13037 0026 6520     		movs	r0, #101
 13038 0028 FFF7FEFF 		bl	get_reg_n
 13039              	.LVL957:
 13040 002c FFF7FEFF 		bl	set_zero
 13041              	.LVL958:
 13042              	.LBE2372:
 13043              	.LBE2371:
1545:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13044              		.loc 1 1545 3 view .LVU3446
1545:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13045              		.loc 1 1545 7 is_stmt 0 view .LVU3447
 13046 0030 2368     		ldr	r3, [r4]
1545:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13047              		.loc 1 1545 6 view .LVU3448
 13048 0032 93F9AC27 		ldrsb	r2, [r3, #1964]
 13049 0036 002A     		cmp	r2, #0
 13050 0038 0BDB     		blt	.L955
 13051              	.L952:
1549:src/xeq.c     **** 		CLEAR_IMAG;
 13052              		.loc 1 1549 3 is_stmt 1 view .LVU3449
1550:src/xeq.c     **** 	}
 13053              		.loc 1 1550 3 view .LVU3450
1549:src/xeq.c     **** 		CLEAR_IMAG;
 13054              		.loc 1 1549 3 is_stmt 0 view .LVU3451
ARM GAS  /tmp/ccaPnj5t.s 			page 386


 13055 003a 93F8AC27 		ldrb	r2, [r3, #1964]	@ zero_extendqisi2
 13056 003e 22F00602 		bic	r2, r2, #6
 13057 0042 83F8AC27 		strb	r2, [r3, #1964]
1553:src/xeq.c     **** }
 13058              		.loc 1 1553 2 is_stmt 1 view .LVU3452
 13059              	.LBB2373:
 765:src/xeq.c     ****     State2.state_lift = 0;
 13060              		.loc 1 765 13 view .LVU3453
 13061              	.LBB2370:
 766:src/xeq.c     **** }
 13062              		.loc 1 766 5 view .LVU3454
 766:src/xeq.c     **** }
 13063              		.loc 1 766 23 is_stmt 0 view .LVU3455
 13064 0046 0B4B     		ldr	r3, .L956+8
 13065 0048 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13066 004a 6FF38612 		bfc	r2, #6, #1
 13067 004e DA75     		strb	r2, [r3, #23]
 13068              	.LBE2370:
 13069              	.LBE2373:
1554:src/xeq.c     **** 
 13070              		.loc 1 1554 1 view .LVU3456
 13071 0050 10BD     		pop	{r4, pc}
 13072              	.L955:
1546:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
 13073              		.loc 1 1546 4 is_stmt 1 view .LVU3457
 13074 0052 6E20     		movs	r0, #110
 13075 0054 FFF7FEFF 		bl	get_reg_n
 13076              	.LVL959:
 13077 0058 FFF7FEFF 		bl	set_zero
 13078              	.LVL960:
1547:src/xeq.c     **** 		}
 13079              		.loc 1 1547 4 view .LVU3458
 13080 005c 6F20     		movs	r0, #111
 13081 005e FFF7FEFF 		bl	get_reg_n
 13082              	.LVL961:
 13083 0062 FFF7FEFF 		bl	set_zero
 13084              	.LVL962:
 13085 0066 2368     		ldr	r3, [r4]
 13086 0068 E7E7     		b	.L952
 13087              	.L957:
 13088 006a 00BF     		.align	2
 13089              	.L956:
 13090 006c 00000000 		.word	StackBase
 13091 0070 00000000 		.word	main_ram
 13092 0074 00000000 		.word	StateWhileOn
 13093              		.cfi_endproc
 13094              	.LFE108:
 13096              		.section	.text.clrstk,"ax",%progbits
 13097              		.align	1
 13098              		.p2align 2,,3
 13099              		.global	clrstk
 13100              		.syntax unified
 13101              		.thumb
 13102              		.thumb_func
 13103              		.fpu fpv4-sp-d16
 13105              	clrstk:
 13106              	.LVL963:
ARM GAS  /tmp/ccaPnj5t.s 			page 387


 13107              	.LFB109:
1558:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13108              		.loc 1 1558 28 view -0
 13109              		.cfi_startproc
 13110              		@ args = 0, pretend = 0, frame = 0
 13111              		@ frame_needed = 0, uses_anonymous_args = 0
1559:src/xeq.c     **** 	set_lift();
 13112              		.loc 1 1559 2 view .LVU3460
1558:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13113              		.loc 1 1558 28 is_stmt 0 view .LVU3461
 13114 0000 08B5     		push	{r3, lr}
 13115              		.cfi_def_cfa_offset 8
 13116              		.cfi_offset 3, -8
 13117              		.cfi_offset 14, -4
 13118              	.LBB2374:
 13119              	.LBB2375:
 707:src/xeq.c     **** 		return 4;
 13120              		.loc 1 707 8 view .LVU3462
 13121 0002 164B     		ldr	r3, .L965
 13122              	.LBE2375:
 13123              	.LBE2374:
1559:src/xeq.c     **** 	set_lift();
 13124              		.loc 1 1559 2 view .LVU3463
 13125 0004 164A     		ldr	r2, .L965+4
 13126              	.LBB2381:
 13127              	.LBB2378:
 707:src/xeq.c     **** 		return 4;
 13128              		.loc 1 707 8 view .LVU3464
 13129 0006 1B68     		ldr	r3, [r3]
 13130              	.LBE2378:
 13131              	.LBE2381:
1559:src/xeq.c     **** 	set_lift();
 13132              		.loc 1 1559 2 view .LVU3465
 13133 0008 1068     		ldr	r0, [r2]
 13134              	.LVL964:
 13135              	.LBB2382:
 13136              	.LBI2374:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13137              		.loc 1 706 5 is_stmt 1 view .LVU3466
 13138              	.LBB2379:
 707:src/xeq.c     **** 		return 4;
 13139              		.loc 1 707 2 view .LVU3467
 707:src/xeq.c     **** 		return 4;
 13140              		.loc 1 707 6 is_stmt 0 view .LVU3468
 13141 000a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 13142              		.loc 1 707 5 view .LVU3469
 13143 000e 1207     		lsls	r2, r2, #28
 13144 0010 22D5     		bpl	.L960
 13145              	.LBB2376:
 13146              	.LBI2376:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 13147              		.loc 1 185 5 is_stmt 1 view .LVU3470
 13148              	.LBB2377:
 186:src/xeq.c     **** }
 13149              		.loc 1 186 2 view .LVU3471
 186:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 388


 13150              		.loc 1 186 9 is_stmt 0 view .LVU3472
 13151 0012 B3F8E027 		ldrh	r2, [r3, #2016]
 13152              	.LBE2377:
 13153              	.LBE2376:
 707:src/xeq.c     **** 		return 4;
 13154              		.loc 1 707 27 view .LVU3473
 13155 0016 920B     		lsrs	r2, r2, #14
 13156 0018 032A     		cmp	r2, #3
 13157 001a 15D0     		beq	.L964
 709:src/xeq.c     **** }
 13158              		.loc 1 709 9 view .LVU3474
 13159 001c 0822     		movs	r2, #8
 13160              	.L959:
 13161              	.LVL965:
 709:src/xeq.c     **** }
 13162              		.loc 1 709 9 view .LVU3475
 13163              	.LBE2379:
 13164              	.LBE2382:
 13165              	.LBB2383:
 13166              	.LBI2383:
1500:src/xeq.c     **** #if 0
 13167              		.loc 1 1500 6 is_stmt 1 view .LVU3476
 13168              	.LBB2384:
1515:src/xeq.c     **** #endif
 13169              		.loc 1 1515 2 view .LVU3477
 13170              	.LBB2385:
 13171              	.LBI2385:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13172              		.loc 1 1100 5 view .LVU3478
 13173              	.LBB2386:
1101:src/xeq.c     **** }
 13174              		.loc 1 1101 2 view .LVU3479
1101:src/xeq.c     **** }
 13175              		.loc 1 1101 24 is_stmt 0 view .LVU3480
 13176 001e B3F8E817 		ldrh	r1, [r3, #2024]
 13177 0022 44F20103 		movw	r3, #16385
 13178 0026 0B40     		ands	r3, r3, r1
 13179 0028 A3F58043 		sub	r3, r3, #16384
 13180 002c B3FA83F3 		clz	r3, r3
 13181 0030 5B09     		lsrs	r3, r3, #5
 13182              	.LBE2386:
 13183              	.LBE2385:
1515:src/xeq.c     **** #endif
 13184              		.loc 1 1515 24 view .LVU3481
 13185 0032 0333     		adds	r3, r3, #3
1515:src/xeq.c     **** #endif
 13186              		.loc 1 1515 2 view .LVU3482
 13187 0034 9A40     		lsls	r2, r2, r3
 13188              	.LVL966:
1515:src/xeq.c     **** #endif
 13189              		.loc 1 1515 2 view .LVU3483
 13190 0036 0021     		movs	r1, #0
 13191 0038 FFF7FEFF 		bl	xset
 13192              	.LVL967:
1515:src/xeq.c     **** #endif
 13193              		.loc 1 1515 2 view .LVU3484
 13194              	.LBE2384:
ARM GAS  /tmp/ccaPnj5t.s 			page 389


 13195              	.LBE2383:
1560:src/xeq.c     **** }
 13196              		.loc 1 1560 2 is_stmt 1 view .LVU3485
 13197              	.LBB2387:
 13198              	.LBI2387:
 761:src/xeq.c     ****     State2.state_lift = 1;
 13199              		.loc 1 761 6 view .LVU3486
 13200              	.LBB2388:
 762:src/xeq.c     **** }
 13201              		.loc 1 762 5 view .LVU3487
 762:src/xeq.c     **** }
 13202              		.loc 1 762 23 is_stmt 0 view .LVU3488
 13203 003c 094A     		ldr	r2, .L965+8
 13204 003e D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 13205 0040 43F04003 		orr	r3, r3, #64
 13206 0044 D375     		strb	r3, [r2, #23]
 13207              	.LBE2388:
 13208              	.LBE2387:
1561:src/xeq.c     **** 
 13209              		.loc 1 1561 1 view .LVU3489
 13210 0046 08BD     		pop	{r3, pc}
 13211              	.L964:
 13212              	.LBB2389:
 13213              	.LBB2380:
 707:src/xeq.c     **** 		return 4;
 13214              		.loc 1 707 44 view .LVU3490
 13215 0048 074A     		ldr	r2, .L965+12
 707:src/xeq.c     **** 		return 4;
 13216              		.loc 1 707 41 view .LVU3491
 13217 004a 92F90120 		ldrsb	r2, [r2, #1]
 13218 004e 002A     		cmp	r2, #0
 708:src/xeq.c     **** 	return 8;
 13219              		.loc 1 708 10 view .LVU3492
 13220 0050 B4BF     		ite	lt
 13221 0052 0822     		movlt	r2, #8
 13222 0054 0422     		movge	r2, #4
 13223 0056 E2E7     		b	.L959
 13224              	.L960:
 13225 0058 0422     		movs	r2, #4
 13226 005a E0E7     		b	.L959
 13227              	.L966:
 13228              		.align	2
 13229              	.L965:
 13230 005c 00000000 		.word	main_ram
 13231 0060 00000000 		.word	StackBase
 13232 0064 00000000 		.word	StateWhileOn
 13233 0068 00000000 		.word	XromParams
 13234              	.LBE2380:
 13235              	.LBE2389:
 13236              		.cfi_endproc
 13237              	.LFE109:
 13239              		.section	.text.clrreg,"ax",%progbits
 13240              		.align	1
 13241              		.p2align 2,,3
 13242              		.global	clrreg
 13243              		.syntax unified
 13244              		.thumb
ARM GAS  /tmp/ccaPnj5t.s 			page 390


 13245              		.thumb_func
 13246              		.fpu fpv4-sp-d16
 13248              	clrreg:
 13249              	.LVL968:
 13250              	.LFB110:
1566:src/xeq.c     **** 	const int local = local_regs();
 13251              		.loc 1 1566 28 is_stmt 1 view -0
 13252              		.cfi_startproc
 13253              		@ args = 0, pretend = 0, frame = 0
 13254              		@ frame_needed = 0, uses_anonymous_args = 0
1567:src/xeq.c     **** 	process_cmdline_set_lift();
 13255              		.loc 1 1567 2 view .LVU3494
 13256              	.LBB2390:
 13257              	.LBI2390:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 13258              		.loc 1 233 5 view .LVU3495
 13259              	.LBE2390:
 234:src/xeq.c     **** }
 13260              		.loc 1 234 2 view .LVU3496
 13261              	.LBB2421:
 13262              	.LBB2391:
 13263              	.LBI2391:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 13264              		.loc 1 225 5 view .LVU3497
 13265              	.LBB2392:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13266              		.loc 1 226 2 view .LVU3498
 13267              	.LBB2393:
 13268              	.LBI2393:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13269              		.loc 1 1100 5 view .LVU3499
 13270              	.LBB2394:
1101:src/xeq.c     **** }
 13271              		.loc 1 1101 2 view .LVU3500
 13272              	.LBE2394:
 13273              	.LBE2393:
 13274              	.LBE2392:
 13275              	.LBE2391:
 13276              	.LBE2421:
1566:src/xeq.c     **** 	const int local = local_regs();
 13277              		.loc 1 1566 28 is_stmt 0 view .LVU3501
 13278 0000 70B5     		push	{r4, r5, r6, lr}
 13279              		.cfi_def_cfa_offset 16
 13280              		.cfi_offset 4, -16
 13281              		.cfi_offset 5, -12
 13282              		.cfi_offset 6, -8
 13283              		.cfi_offset 14, -4
 13284              	.LBB2422:
 13285              	.LBB2417:
 13286              	.LBB2413:
 13287              	.LBB2398:
 13288              	.LBB2395:
1101:src/xeq.c     **** }
 13289              		.loc 1 1101 12 view .LVU3502
 13290 0002 464C     		ldr	r4, .L987
 13291 0004 2368     		ldr	r3, [r4]
 13292              	.LVL969:
ARM GAS  /tmp/ccaPnj5t.s 			page 391


1101:src/xeq.c     **** }
 13293              		.loc 1 1101 12 view .LVU3503
 13294              	.LBE2395:
 13295              	.LBE2398:
 227:src/xeq.c     **** }
 13296              		.loc 1 227 2 is_stmt 1 view .LVU3504
 13297              	.LBB2399:
 13298              	.LBI2399:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 13299              		.loc 1 217 5 view .LVU3505
 13300              	.LBB2400:
 218:src/xeq.c     **** }
 13301              		.loc 1 218 2 view .LVU3506
 218:src/xeq.c     **** }
 13302              		.loc 1 218 9 is_stmt 0 view .LVU3507
 13303 0006 B3F9DE27 		ldrsh	r2, [r3, #2014]
 218:src/xeq.c     **** }
 13304              		.loc 1 218 57 view .LVU3508
 13305 000a 002A     		cmp	r2, #0
 13306 000c 58DB     		blt	.L983
 13307              	.LVL970:
 218:src/xeq.c     **** }
 13308              		.loc 1 218 57 view .LVU3509
 13309              	.LBE2400:
 13310              	.LBE2399:
 13311              	.LBE2413:
 13312              	.LBE2417:
 13313              	.LBE2422:
1568:src/xeq.c     **** 
 13314              		.loc 1 1568 2 is_stmt 1 view .LVU3510
 13315              	.LBB2423:
 13316              	.LBI2423:
1314:src/xeq.c     **** 	process_cmdline();
 13317              		.loc 1 1314 6 view .LVU3511
 13318              	.LBE2423:
1315:src/xeq.c     **** 	set_lift();
 13319              		.loc 1 1315 2 view .LVU3512
 13320              	.LBB2434:
 13321              	.LBB2424:
 13322              	.LBI2424:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 13323              		.loc 1 1208 6 view .LVU3513
 13324              	.LBB2425:
1209:src/xeq.c     **** 
 13325              		.loc 1 1209 2 view .LVU3514
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13326              		.loc 1 1211 2 view .LVU3515
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13327              		.loc 1 1211 6 is_stmt 0 view .LVU3516
 13328 000e 444D     		ldr	r5, .L987+4
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13329              		.loc 1 1211 5 view .LVU3517
 13330 0010 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13331              	.LVL971:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13332              		.loc 1 1211 5 view .LVU3518
 13333              	.LBE2425:
ARM GAS  /tmp/ccaPnj5t.s 			page 392


 13334              	.LBE2424:
 13335              	.LBE2434:
 13336              	.LBB2435:
 13337              	.LBB2418:
 13338              	.LBB2414:
 13339              	.LBB2406:
 13340              	.LBB2401:
 13341 0012 0026     		movs	r6, #0
 13342              	.LBE2401:
 13343              	.LBE2406:
 13344              	.LBE2414:
 13345              	.LBE2418:
 13346              	.LBE2435:
 13347              	.LBB2436:
 13348              	.LBB2429:
 13349              	.LBB2426:
 13350 0014 002B     		cmp	r3, #0
 13351 0016 69D1     		bne	.L984
 13352              	.LVL972:
 13353              	.L969:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13354              		.loc 1 1211 5 view .LVU3519
 13355              	.LBE2426:
 13356              	.LBE2429:
 13357              	.LBE2436:
1316:src/xeq.c     **** }
 13358              		.loc 1 1316 2 is_stmt 1 view .LVU3520
 13359              	.LBB2437:
 13360              	.LBB2430:
 13361              	.LBI2430:
 761:src/xeq.c     ****     State2.state_lift = 1;
 13362              		.loc 1 761 6 view .LVU3521
 13363              	.LBB2431:
 762:src/xeq.c     **** }
 13364              		.loc 1 762 5 view .LVU3522
 762:src/xeq.c     **** }
 13365              		.loc 1 762 23 is_stmt 0 view .LVU3523
 13366 0018 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 13367 001a 43F04003 		orr	r3, r3, #64
 13368 001e EB75     		strb	r3, [r5, #23]
 13369              	.LBE2431:
 13370              	.LBE2430:
 13371              	.LBE2437:
1571:src/xeq.c     **** 
 13372              		.loc 1 1571 2 is_stmt 1 view .LVU3524
 13373 0020 0020     		movs	r0, #0
 13374 0022 FFF7FEFF 		bl	get_reg_n
 13375              	.LVL973:
 13376              	.LBB2438:
 13377              	.LBB2439:
 13378              	.LBB2440:
 13379              	.LBB2441:
 13380              	.LBB2442:
1101:src/xeq.c     **** }
 13381              		.loc 1 1101 12 is_stmt 0 view .LVU3525
 13382 0026 2168     		ldr	r1, [r4]
1101:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 393


 13383              		.loc 1 1101 24 view .LVU3526
 13384 0028 B1F8E827 		ldrh	r2, [r1, #2024]
 13385 002c 44F20103 		movw	r3, #16385
 13386 0030 1340     		ands	r3, r3, r2
 13387              	.LBE2442:
 13388              	.LBE2441:
 13389              	.LBE2440:
 13390              	.LBE2439:
 13391              	.LBI2438:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 13392              		.loc 1 253 14 is_stmt 1 view .LVU3527
 13393              	.LBE2438:
 254:src/xeq.c     **** }
 13394              		.loc 1 254 2 view .LVU3528
 13395              	.LVL974:
 13396              	.LBB2457:
 13397              	.LBB2453:
 13398              	.LBI2439:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 13399              		.loc 1 241 14 view .LVU3529
 13400              	.LBB2449:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13401              		.loc 1 242 2 view .LVU3530
 13402              	.LBB2444:
 13403              	.LBI2441:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13404              		.loc 1 1100 5 view .LVU3531
 13405              	.LBB2443:
1101:src/xeq.c     **** }
 13406              		.loc 1 1101 2 view .LVU3532
 13407              	.LBE2443:
 13408              	.LBE2444:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13409              		.loc 1 242 5 is_stmt 0 view .LVU3533
 13410 0032 B3F5804F 		cmp	r3, #16384
 13411              	.LBB2445:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13412              		.loc 1 243 3 is_stmt 1 view .LVU3534
 244:src/xeq.c     **** 	}
 13413              		.loc 1 244 3 view .LVU3535
 13414              	.LVL975:
 244:src/xeq.c     **** 	}
 13415              		.loc 1 244 3 is_stmt 0 view .LVU3536
 13416              	.LBE2445:
 13417              	.LBE2449:
 13418              	.LBE2453:
 13419              	.LBE2457:
 13420              	.LBB2458:
 13421              	.LBI2458:
1500:src/xeq.c     **** #if 0
 13422              		.loc 1 1500 6 is_stmt 1 view .LVU3537
 13423              	.LBB2459:
1515:src/xeq.c     **** #endif
 13424              		.loc 1 1515 2 view .LVU3538
 13425              	.LBB2460:
 13426              	.LBI2460:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/ccaPnj5t.s 			page 394


 13427              		.loc 1 1100 5 view .LVU3539
 13428              	.LBB2461:
1101:src/xeq.c     **** }
 13429              		.loc 1 1101 2 view .LVU3540
 13430              	.LBE2461:
 13431              	.LBE2460:
 13432              	.LBE2459:
 13433              	.LBE2458:
 13434              	.LBB2469:
 13435              	.LBB2454:
 13436              	.LBB2450:
 13437              	.LBB2446:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13438              		.loc 1 243 24 is_stmt 0 view .LVU3541
 13439 0036 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 13440              	.LBE2446:
 13441              	.LBE2450:
 13442              	.LBE2454:
 13443              	.LBE2469:
 13444              	.LBB2470:
 13445              	.LBB2466:
 13446              	.LBB2464:
 13447              	.LBB2462:
1101:src/xeq.c     **** }
 13448              		.loc 1 1101 24 view .LVU3542
 13449 003a A3F58043 		sub	r3, r3, #16384
 13450 003e B3FA83F3 		clz	r3, r3
 13451              	.LBE2462:
 13452              	.LBE2464:
 13453              	.LBE2466:
 13454              	.LBE2470:
 13455              	.LBB2471:
 13456              	.LBB2455:
 13457              	.LBB2451:
 13458              	.LBB2447:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13459              		.loc 1 243 13 view .LVU3543
 13460 0042 08BF     		it	eq
 13461 0044 0C3A     		subeq	r2, r2, #12
 13462              	.LBE2447:
 13463              	.LBE2451:
 13464              	.LBE2455:
 13465              	.LBE2471:
 13466              	.LBB2472:
 13467              	.LBB2467:
 13468              	.LBB2465:
 13469              	.LBB2463:
1101:src/xeq.c     **** }
 13470              		.loc 1 1101 24 view .LVU3544
 13471 0046 4FEA5313 		lsr	r3, r3, #5
 13472              	.LBE2463:
 13473              	.LBE2465:
 13474              	.LBE2467:
 13475              	.LBE2472:
 13476              	.LBB2473:
 13477              	.LBB2456:
 13478              	.LBB2452:
ARM GAS  /tmp/ccaPnj5t.s 			page 395


 13479              	.LBB2448:
 244:src/xeq.c     **** 	}
 13480              		.loc 1 244 67 view .LVU3545
 13481 004a 08BF     		it	eq
 13482 004c 5210     		asreq	r2, r2, #1
 13483              	.LBE2448:
 13484              	.LBE2452:
 13485              	.LBE2456:
 13486              	.LBE2473:
 13487              	.LBB2474:
 13488              	.LBB2468:
1515:src/xeq.c     **** #endif
 13489              		.loc 1 1515 24 view .LVU3546
 13490 004e 0333     		adds	r3, r3, #3
1515:src/xeq.c     **** #endif
 13491              		.loc 1 1515 2 view .LVU3547
 13492 0050 9A40     		lsls	r2, r2, r3
 13493 0052 0021     		movs	r1, #0
 13494 0054 FFF7FEFF 		bl	xset
 13495              	.LVL976:
1515:src/xeq.c     **** #endif
 13496              		.loc 1 1515 2 view .LVU3548
 13497              	.LBE2468:
 13498              	.LBE2474:
1574:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
 13499              		.loc 1 1574 2 is_stmt 1 view .LVU3549
 13500              	.LBB2475:
 13501              	.LBI2475:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13502              		.loc 1 706 5 view .LVU3550
 13503              	.LBB2476:
 707:src/xeq.c     **** 		return 4;
 13504              		.loc 1 707 2 view .LVU3551
 707:src/xeq.c     **** 		return 4;
 13505              		.loc 1 707 8 is_stmt 0 view .LVU3552
 13506 0058 2368     		ldr	r3, [r4]
 707:src/xeq.c     **** 		return 4;
 13507              		.loc 1 707 6 view .LVU3553
 13508 005a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 13509              		.loc 1 707 5 view .LVU3554
 13510 005e 1207     		lsls	r2, r2, #28
 13511 0060 1CD5     		bpl	.L972
 13512              	.LBB2477:
 13513              	.LBI2477:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 13514              		.loc 1 185 5 is_stmt 1 view .LVU3555
 13515              	.LBB2478:
 186:src/xeq.c     **** }
 13516              		.loc 1 186 2 view .LVU3556
 186:src/xeq.c     **** }
 13517              		.loc 1 186 9 is_stmt 0 view .LVU3557
 13518 0062 B3F8E037 		ldrh	r3, [r3, #2016]
 13519              	.LBE2478:
 13520              	.LBE2477:
 707:src/xeq.c     **** 		return 4;
 13521              		.loc 1 707 27 view .LVU3558
ARM GAS  /tmp/ccaPnj5t.s 			page 396


 13522 0066 9B0B     		lsrs	r3, r3, #14
 13523 0068 032B     		cmp	r3, #3
 13524 006a 12D0     		beq	.L985
 13525              	.L973:
 13526              	.LBE2476:
 13527              	.LBE2475:
1578:src/xeq.c     **** 
 13528              		.loc 1 1578 2 is_stmt 1 view .LVU3559
 13529 006c 6E20     		movs	r0, #110
 13530 006e FFF7FEFF 		bl	get_reg_n
 13531              	.LVL977:
 13532              	.LBB2480:
 13533              	.LBI2480:
1500:src/xeq.c     **** #if 0
 13534              		.loc 1 1500 6 view .LVU3560
 13535              	.LBB2481:
1515:src/xeq.c     **** #endif
 13536              		.loc 1 1515 2 view .LVU3561
 13537              	.LBB2482:
 13538              	.LBI2482:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13539              		.loc 1 1100 5 view .LVU3562
 13540              	.LBB2483:
1101:src/xeq.c     **** }
 13541              		.loc 1 1101 2 view .LVU3563
1101:src/xeq.c     **** }
 13542              		.loc 1 1101 24 is_stmt 0 view .LVU3564
 13543 0072 2368     		ldr	r3, [r4]
 13544 0074 B3F8E827 		ldrh	r2, [r3, #2024]
 13545 0078 44F20105 		movw	r5, #16385
 13546 007c 2A40     		ands	r2, r2, r5
 13547              	.LBE2483:
 13548              	.LBE2482:
1515:src/xeq.c     **** #endif
 13549              		.loc 1 1515 2 view .LVU3565
 13550 007e B2F5804F 		cmp	r2, #16384
 13551 0082 0CBF     		ite	eq
 13552 0084 2022     		moveq	r2, #32
 13553 0086 1022     		movne	r2, #16
 13554 0088 0021     		movs	r1, #0
 13555 008a FFF7FEFF 		bl	xset
 13556              	.LVL978:
1515:src/xeq.c     **** #endif
 13557              		.loc 1 1515 2 view .LVU3566
 13558              	.LBE2481:
 13559              	.LBE2480:
1581:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13560              		.loc 1 1581 2 is_stmt 1 view .LVU3567
1581:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13561              		.loc 1 1581 5 is_stmt 0 view .LVU3568
 13562 008e 86BB     		cbnz	r6, .L986
1583:src/xeq.c     **** 
 13563              		.loc 1 1583 1 view .LVU3569
 13564 0090 70BD     		pop	{r4, r5, r6, pc}
 13565              	.L985:
 13566              	.LBB2484:
 13567              	.LBB2479:
ARM GAS  /tmp/ccaPnj5t.s 			page 397


 707:src/xeq.c     **** 		return 4;
 13568              		.loc 1 707 44 view .LVU3570
 13569 0092 244B     		ldr	r3, .L987+8
 707:src/xeq.c     **** 		return 4;
 13570              		.loc 1 707 41 view .LVU3571
 13571 0094 93F90130 		ldrsb	r3, [r3, #1]
 13572 0098 002B     		cmp	r3, #0
 13573 009a E7DB     		blt	.L973
 13574              	.L972:
 708:src/xeq.c     **** 	return 8;
 13575              		.loc 1 708 3 is_stmt 1 view .LVU3572
 13576              	.LBE2479:
 13577              	.LBE2484:
1575:src/xeq.c     **** 
 13578              		.loc 1 1575 3 view .LVU3573
 13579 009c 6820     		movs	r0, #104
 13580 009e FFF7FEFF 		bl	get_reg_n
 13581              	.LVL979:
 13582              	.LBB2485:
 13583              	.LBI2485:
1500:src/xeq.c     **** #if 0
 13584              		.loc 1 1500 6 view .LVU3574
 13585              	.LBB2486:
1515:src/xeq.c     **** #endif
 13586              		.loc 1 1515 2 view .LVU3575
 13587              	.LBB2487:
 13588              	.LBI2487:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13589              		.loc 1 1100 5 view .LVU3576
 13590              	.LBB2488:
1101:src/xeq.c     **** }
 13591              		.loc 1 1101 2 view .LVU3577
1101:src/xeq.c     **** }
 13592              		.loc 1 1101 24 is_stmt 0 view .LVU3578
 13593 00a2 2368     		ldr	r3, [r4]
 13594 00a4 B3F8E837 		ldrh	r3, [r3, #2024]
 13595 00a8 44F20102 		movw	r2, #16385
 13596 00ac 1A40     		ands	r2, r2, r3
 13597              	.LBE2488:
 13598              	.LBE2487:
1515:src/xeq.c     **** #endif
 13599              		.loc 1 1515 2 view .LVU3579
 13600 00ae B2F5804F 		cmp	r2, #16384
 13601 00b2 0CBF     		ite	eq
 13602 00b4 4022     		moveq	r2, #64
 13603 00b6 2022     		movne	r2, #32
 13604 00b8 0021     		movs	r1, #0
 13605 00ba FFF7FEFF 		bl	xset
 13606              	.LVL980:
1517:src/xeq.c     **** 
 13607              		.loc 1 1517 1 view .LVU3580
 13608 00be D5E7     		b	.L973
 13609              	.LVL981:
 13610              	.L983:
1517:src/xeq.c     **** 
 13611              		.loc 1 1517 1 view .LVU3581
 13612              	.LBE2486:
ARM GAS  /tmp/ccaPnj5t.s 			page 398


 13613              	.LBE2485:
 13614              	.LBB2489:
 13615              	.LBB2419:
 13616              	.LBB2415:
 13617              	.LBB2407:
 13618              	.LBB2396:
1101:src/xeq.c     **** }
 13619              		.loc 1 1101 24 view .LVU3582
 13620 00c0 B3F8E867 		ldrh	r6, [r3, #2024]
 13621              	.LBE2396:
 13622              	.LBE2407:
 13623              	.LBB2408:
 13624              	.LBB2402:
 218:src/xeq.c     **** }
 13625              		.loc 1 218 25 view .LVU3583
 13626 00c4 1849     		ldr	r1, .L987+12
 13627              	.LBE2402:
 13628              	.LBE2408:
 13629              	.LBE2415:
 13630              	.LBE2419:
 13631              	.LBE2489:
 13632              	.LBB2490:
 13633              	.LBB2432:
 13634              	.LBB2427:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13635              		.loc 1 1211 6 view .LVU3584
 13636 00c6 164D     		ldr	r5, .L987+4
 13637              	.LBE2427:
 13638              	.LBE2432:
 13639              	.LBE2490:
 13640              	.LBB2491:
 13641              	.LBB2420:
 13642              	.LBB2416:
 13643              	.LBB2409:
 13644              	.LBB2403:
 218:src/xeq.c     **** }
 13645              		.loc 1 218 25 view .LVU3585
 13646 00c8 0968     		ldr	r1, [r1]
 13647              	.LBE2403:
 13648              	.LBE2409:
 13649              	.LBB2410:
 13650              	.LBB2397:
1101:src/xeq.c     **** }
 13651              		.loc 1 1101 24 view .LVU3586
 13652 00ca 44F20103 		movw	r3, #16385
 13653              	.LVL982:
1101:src/xeq.c     **** }
 13654              		.loc 1 1101 24 view .LVU3587
 13655              	.LBE2397:
 13656              	.LBE2410:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13657              		.loc 1 226 73 view .LVU3588
 13658 00ce 3340     		ands	r3, r3, r6
 13659 00d0 A3F58043 		sub	r3, r3, #16384
 13660              	.LBB2411:
 13661              	.LBB2404:
 218:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 399


 13662              		.loc 1 218 57 view .LVU3589
 13663 00d4 31F81260 		ldrh	r6, [r1, r2, lsl #1]
 13664              	.LBE2404:
 13665              	.LBE2411:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13666              		.loc 1 226 73 view .LVU3590
 13667 00d8 B3FA83F3 		clz	r3, r3
 13668 00dc 5B09     		lsrs	r3, r3, #5
 13669 00de 0233     		adds	r3, r3, #2
 13670              	.LBB2412:
 13671              	.LBB2405:
 218:src/xeq.c     **** }
 13672              		.loc 1 218 57 view .LVU3591
 13673 00e0 C6F30B06 		ubfx	r6, r6, #0, #12
 13674 00e4 1E41     		asrs	r6, r6, r3
 13675              	.LVL983:
 218:src/xeq.c     **** }
 13676              		.loc 1 218 57 view .LVU3592
 13677              	.LBE2405:
 13678              	.LBE2412:
 13679              	.LBE2416:
 13680              	.LBE2420:
 13681              	.LBE2491:
1568:src/xeq.c     **** 
 13682              		.loc 1 1568 2 is_stmt 1 view .LVU3593
 13683              	.LBB2492:
1314:src/xeq.c     **** 	process_cmdline();
 13684              		.loc 1 1314 6 view .LVU3594
 13685              	.LBE2492:
1315:src/xeq.c     **** 	set_lift();
 13686              		.loc 1 1315 2 view .LVU3595
 13687              	.LBB2493:
 13688              	.LBB2433:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 13689              		.loc 1 1208 6 view .LVU3596
 13690              	.LBB2428:
1209:src/xeq.c     **** 
 13691              		.loc 1 1209 2 view .LVU3597
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13692              		.loc 1 1211 2 view .LVU3598
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13693              		.loc 1 1211 5 is_stmt 0 view .LVU3599
 13694 00e6 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13695 00e8 002B     		cmp	r3, #0
 13696 00ea 95D0     		beq	.L969
 13697              	.L984:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13698              		.loc 1 1211 5 view .LVU3600
 13699 00ec FFF7FEFF 		bl	process_cmdline.part.0
 13700              	.LVL984:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13701              		.loc 1 1211 5 view .LVU3601
 13702 00f0 92E7     		b	.L969
 13703              	.L986:
 13704              	.LBE2428:
 13705              	.LBE2433:
 13706              	.LBE2493:
ARM GAS  /tmp/ccaPnj5t.s 			page 400


1582:src/xeq.c     **** }
 13707              		.loc 1 1582 3 is_stmt 1 view .LVU3602
 13708 00f2 7020     		movs	r0, #112
 13709 00f4 FFF7FEFF 		bl	get_reg_n
 13710              	.LVL985:
 13711              	.LBB2494:
 13712              	.LBI2494:
1500:src/xeq.c     **** #if 0
 13713              		.loc 1 1500 6 view .LVU3603
 13714              	.LBB2495:
1515:src/xeq.c     **** #endif
 13715              		.loc 1 1515 2 view .LVU3604
 13716              	.LBB2496:
 13717              	.LBI2496:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13718              		.loc 1 1100 5 view .LVU3605
 13719              	.LBB2497:
1101:src/xeq.c     **** }
 13720              		.loc 1 1101 2 view .LVU3606
1101:src/xeq.c     **** }
 13721              		.loc 1 1101 24 is_stmt 0 view .LVU3607
 13722 00f8 2368     		ldr	r3, [r4]
 13723 00fa B3F8E827 		ldrh	r2, [r3, #2024]
 13724 00fe 2A40     		ands	r2, r2, r5
 13725 0100 A2F58042 		sub	r2, r2, #16384
 13726 0104 B2FA82F2 		clz	r2, r2
 13727 0108 5209     		lsrs	r2, r2, #5
 13728              	.LBE2497:
 13729              	.LBE2496:
1515:src/xeq.c     **** #endif
 13730              		.loc 1 1515 24 view .LVU3608
 13731 010a 0332     		adds	r2, r2, #3
1515:src/xeq.c     **** #endif
 13732              		.loc 1 1515 2 view .LVU3609
 13733 010c 06FA02F2 		lsl	r2, r6, r2
 13734 0110 0021     		movs	r1, #0
 13735              	.LBE2495:
 13736              	.LBE2494:
1583:src/xeq.c     **** 
 13737              		.loc 1 1583 1 view .LVU3610
 13738 0112 BDE87040 		pop	{r4, r5, r6, lr}
 13739              		.cfi_restore 14
 13740              		.cfi_restore 6
 13741              		.cfi_restore 5
 13742              		.cfi_restore 4
 13743              		.cfi_def_cfa_offset 0
 13744              	.LBB2499:
 13745              	.LBB2498:
1515:src/xeq.c     **** #endif
 13746              		.loc 1 1515 2 view .LVU3611
 13747 0116 FFF7FEBF 		b	xset
 13748              	.LVL986:
 13749              	.L988:
1515:src/xeq.c     **** #endif
 13750              		.loc 1 1515 2 view .LVU3612
 13751 011a 00BF     		.align	2
 13752              	.L987:
ARM GAS  /tmp/ccaPnj5t.s 			page 401


 13753 011c 00000000 		.word	main_ram
 13754 0120 00000000 		.word	StateWhileOn
 13755 0124 00000000 		.word	XromParams
 13756 0128 00000000 		.word	RetStk
 13757              	.LBE2498:
 13758              	.LBE2499:
 13759              		.cfi_endproc
 13760              	.LFE110:
 13762              		.section	.text.clrretstk,"ax",%progbits
 13763              		.align	1
 13764              		.p2align 2,,3
 13765              		.global	clrretstk
 13766              		.syntax unified
 13767              		.thumb
 13768              		.thumb_func
 13769              		.fpu fpv4-sp-d16
 13771              	clrretstk:
 13772              	.LFB111:
1588:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13773              		.loc 1 1588 22 is_stmt 1 view -0
 13774              		.cfi_startproc
 13775              		@ args = 0, pretend = 0, frame = 0
 13776              		@ frame_needed = 0, uses_anonymous_args = 0
 13777              		@ link register save eliminated.
1589:src/xeq.c     **** }
 13778              		.loc 1 1589 2 view .LVU3614
1589:src/xeq.c     **** }
 13779              		.loc 1 1589 14 is_stmt 0 view .LVU3615
 13780 0000 034B     		ldr	r3, .L990
 13781 0002 1B68     		ldr	r3, [r3]
1589:src/xeq.c     **** }
 13782              		.loc 1 1589 24 view .LVU3616
 13783 0004 0022     		movs	r2, #0
 13784 0006 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1589:src/xeq.c     **** }
 13785              		.loc 1 1589 12 view .LVU3617
 13786 000a A3F8E227 		strh	r2, [r3, #2018]	@ movhi
1590:src/xeq.c     **** 
 13787              		.loc 1 1590 1 view .LVU3618
 13788 000e 7047     		bx	lr
 13789              	.L991:
 13790              		.align	2
 13791              	.L990:
 13792 0010 00000000 		.word	main_ram
 13793              		.cfi_endproc
 13794              	.LFE111:
 13796              		.section	.text.clrretstk_pc,"ax",%progbits
 13797              		.align	1
 13798              		.p2align 2,,3
 13799              		.global	clrretstk_pc
 13800              		.syntax unified
 13801              		.thumb
 13802              		.thumb_func
 13803              		.fpu fpv4-sp-d16
 13805              	clrretstk_pc:
 13806              	.LFB112:
1592:src/xeq.c     **** 	clrretstk();
ARM GAS  /tmp/ccaPnj5t.s 			page 402


 13807              		.loc 1 1592 25 is_stmt 1 view -0
 13808              		.cfi_startproc
 13809              		@ args = 0, pretend = 0, frame = 0
 13810              		@ frame_needed = 0, uses_anonymous_args = 0
1593:src/xeq.c     **** 	raw_set_pc(0);
 13811              		.loc 1 1593 2 view .LVU3620
 13812              	.LBB2500:
 13813              	.LBI2500:
1588:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13814              		.loc 1 1588 6 view .LVU3621
 13815              	.LBB2501:
1589:src/xeq.c     **** }
 13816              		.loc 1 1589 2 view .LVU3622
 13817              	.LBE2501:
 13818              	.LBE2500:
1592:src/xeq.c     **** 	clrretstk();
 13819              		.loc 1 1592 25 is_stmt 0 view .LVU3623
 13820 0000 08B5     		push	{r3, lr}
 13821              		.cfi_def_cfa_offset 8
 13822              		.cfi_offset 3, -8
 13823              		.cfi_offset 14, -4
 13824              	.LBB2504:
 13825              	.LBB2502:
1589:src/xeq.c     **** }
 13826              		.loc 1 1589 14 view .LVU3624
 13827 0002 074B     		ldr	r3, .L994
 13828 0004 1B68     		ldr	r3, [r3]
 13829              	.LBE2502:
 13830              	.LBE2504:
1594:src/xeq.c     **** 	update_program_bounds(1);
 13831              		.loc 1 1594 2 is_stmt 1 view .LVU3625
 13832              	.LVL987:
 13833              	.LBB2505:
 13834              	.LBI2505:
 282:src/xeq.c     **** 	State.pc = pc;
 13835              		.loc 1 282 13 view .LVU3626
 13836              	.LBB2506:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13837              		.loc 1 283 2 view .LVU3627
 13838              	.LBE2506:
 13839              	.LBE2505:
 13840              	.LBB2508:
 13841              	.LBB2503:
1589:src/xeq.c     **** }
 13842              		.loc 1 1589 24 is_stmt 0 view .LVU3628
 13843 0006 0020     		movs	r0, #0
 13844 0008 A3F8DE07 		strh	r0, [r3, #2014]	@ movhi
 13845              	.LBE2503:
 13846              	.LBE2508:
 13847              	.LBB2509:
 13848              	.LBB2507:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13849              		.loc 1 283 11 view .LVU3629
 13850 000c C3F8E007 		str	r0, [r3, #2016]
 284:src/xeq.c     **** }
 13851              		.loc 1 284 2 is_stmt 1 view .LVU3630
 13852 0010 FFF7FEFF 		bl	update_program_bounds
ARM GAS  /tmp/ccaPnj5t.s 			page 403


 13853              	.LVL988:
 284:src/xeq.c     **** }
 13854              		.loc 1 284 2 is_stmt 0 view .LVU3631
 13855              	.LBE2507:
 13856              	.LBE2509:
1595:src/xeq.c     **** }
 13857              		.loc 1 1595 2 is_stmt 1 view .LVU3632
1596:src/xeq.c     **** 
 13858              		.loc 1 1596 1 is_stmt 0 view .LVU3633
 13859 0014 BDE80840 		pop	{r3, lr}
 13860              		.cfi_restore 14
 13861              		.cfi_restore 3
 13862              		.cfi_def_cfa_offset 0
1595:src/xeq.c     **** }
 13863              		.loc 1 1595 2 view .LVU3634
 13864 0018 0120     		movs	r0, #1
 13865 001a FFF7FEBF 		b	update_program_bounds
 13866              	.LVL989:
 13867              	.L995:
 13868 001e 00BF     		.align	2
 13869              	.L994:
 13870 0020 00000000 		.word	main_ram
 13871              		.cfi_endproc
 13872              	.LFE112:
 13874              		.section	.text.cmdconst,"ax",%progbits
 13875              		.align	1
 13876              		.p2align 2,,3
 13877              		.global	cmdconst
 13878              		.syntax unified
 13879              		.thumb
 13880              		.thumb_func
 13881              		.fpu fpv4-sp-d16
 13883              	cmdconst:
 13884              	.LVL990:
 13885              	.LFB113:
1602:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13886              		.loc 1 1602 47 is_stmt 1 view -0
 13887              		.cfi_startproc
 13888              		@ args = 0, pretend = 0, frame = 0
 13889              		@ frame_needed = 0, uses_anonymous_args = 0
1604:src/xeq.c     **** #else
 13890              		.loc 1 1604 2 view .LVU3636
1602:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13891              		.loc 1 1602 47 is_stmt 0 view .LVU3637
 13892 0000 70B5     		push	{r4, r5, r6, lr}
 13893              		.cfi_def_cfa_offset 16
 13894              		.cfi_offset 4, -16
 13895              		.cfi_offset 5, -12
 13896              		.cfi_offset 6, -8
 13897              		.cfi_offset 14, -4
1604:src/xeq.c     **** #else
 13898              		.loc 1 1604 5 view .LVU3638
 13899 0002 01F0FD03 		and	r3, r1, #253
 13900 0006 882B     		cmp	r3, #136
1602:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13901              		.loc 1 1602 47 view .LVU3639
 13902 0008 82B0     		sub	sp, sp, #8
ARM GAS  /tmp/ccaPnj5t.s 			page 404


 13903              		.cfi_def_cfa_offset 24
1602:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13904              		.loc 1 1602 47 view .LVU3640
 13905 000a 0C46     		mov	r4, r1
 13906 000c 0546     		mov	r5, r0
1604:src/xeq.c     **** #else
 13907              		.loc 1 1604 5 view .LVU3641
 13908 000e 1CD0     		beq	.L997
1604:src/xeq.c     **** #else
 13909              		.loc 1 1604 30 discriminator 1 view .LVU3642
 13910 0010 0129     		cmp	r1, #1
 13911 0012 1AD0     		beq	.L997
1612:src/xeq.c     **** 
 13912              		.loc 1 1612 3 is_stmt 1 view .LVU3643
 13913              	.LBB2531:
 13914              	.LBI2531:
 741:src/xeq.c     **** 	if (get_lift())
 13915              		.loc 1 741 6 view .LVU3644
 13916              	.LBB2532:
 742:src/xeq.c     **** 		lift();
 13917              		.loc 1 742 2 view .LVU3645
 13918              	.LBB2533:
 13919              	.LBI2533:
 737:src/xeq.c     **** 	return State2.state_lift;
 13920              		.loc 1 737 12 view .LVU3646
 13921              	.LBB2534:
 738:src/xeq.c     **** }
 13922              		.loc 1 738 2 view .LVU3647
 738:src/xeq.c     **** }
 13923              		.loc 1 738 15 is_stmt 0 view .LVU3648
 13924 0014 2B4B     		ldr	r3, .L1014
 13925 0016 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 13926              	.LBE2534:
 13927              	.LBE2533:
 742:src/xeq.c     **** 		lift();
 13928              		.loc 1 742 5 view .LVU3649
 13929 0018 5906     		lsls	r1, r3, #25
 13930              	.LVL991:
 742:src/xeq.c     **** 		lift();
 13931              		.loc 1 742 5 view .LVU3650
 13932 001a 4FD4     		bmi	.L1012
 13933              	.LVL992:
 13934              	.L999:
 742:src/xeq.c     **** 		lift();
 13935              		.loc 1 742 5 view .LVU3651
 13936              	.LBE2532:
 13937              	.LBE2531:
1614:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 13938              		.loc 1 1614 2 is_stmt 1 view .LVU3652
1614:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 13939              		.loc 1 1614 24 is_stmt 0 view .LVU3653
 13940 001c 7934     		adds	r4, r4, #121
1614:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 13941              		.loc 1 1614 5 view .LVU3654
 13942 001e E4B2     		uxtb	r4, r4
 13943 0020 012C     		cmp	r4, #1
 13944 0022 23D9     		bls	.L1013
ARM GAS  /tmp/ccaPnj5t.s 			page 405


 13945              	.L1000:
1616:src/xeq.c     **** 		bad_mode_error();
 13946              		.loc 1 1616 7 is_stmt 1 view .LVU3655
1616:src/xeq.c     **** 		bad_mode_error();
 13947              		.loc 1 1616 11 is_stmt 0 view .LVU3656
 13948 0024 284C     		ldr	r4, .L1014+4
 13949 0026 2368     		ldr	r3, [r4]
 13950 0028 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1616:src/xeq.c     **** 		bad_mode_error();
 13951              		.loc 1 1616 10 view .LVU3657
 13952 002c D207     		lsls	r2, r2, #31
 13953 002e 26D5     		bpl	.L1002
1617:src/xeq.c     **** 	else 
 13954              		.loc 1 1617 3 is_stmt 1 view .LVU3658
 13955              	.LBB2536:
 13956              	.LBI2536:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 13957              		.loc 1 569 6 view .LVU3659
 13958              	.LBE2536:
 570:src/xeq.c     **** }
 13959              		.loc 1 570 2 view .LVU3660
 13960              	.LVL993:
 13961              	.LBB2541:
 13962              	.LBB2537:
 13963              	.LBI2537:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13964              		.loc 1 540 5 view .LVU3661
 13965              	.LBB2538:
 541:src/xeq.c     **** 		Error = e;
 13966              		.loc 1 541 2 view .LVU3662
 541:src/xeq.c     **** 		Error = e;
 13967              		.loc 1 541 12 is_stmt 0 view .LVU3663
 13968 0030 264A     		ldr	r2, .L1014+8
 541:src/xeq.c     **** 		Error = e;
 13969              		.loc 1 541 5 view .LVU3664
 13970 0032 1168     		ldr	r1, [r2]
 13971 0034 09B9     		cbnz	r1, .L1001
 13972              	.LVL994:
 13973              	.LBB2539:
 13974              	.LBI2539:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 13975              		.loc 1 540 5 is_stmt 1 view .LVU3665
 13976              	.LBB2540:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 13977              		.loc 1 542 3 view .LVU3666
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 13978              		.loc 1 542 9 is_stmt 0 view .LVU3667
 13979 0036 0D21     		movs	r1, #13
 13980 0038 1160     		str	r1, [r2]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 13981              		.loc 1 543 3 is_stmt 1 view .LVU3668
 13982              	.LVL995:
 13983              	.L1001:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 13984              		.loc 1 543 3 is_stmt 0 view .LVU3669
 13985              	.LBE2540:
 13986              	.LBE2539:
ARM GAS  /tmp/ccaPnj5t.s 			page 406


 13987              	.LBE2538:
 13988              	.LBE2537:
 13989              	.LBE2541:
1621:src/xeq.c     **** #endif
 13990              		.loc 1 1621 2 is_stmt 1 view .LVU3670
 13991 003a 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 13992 003e 42F00102 		orr	r2, r2, #1
 13993 0042 83F8AD27 		strb	r2, [r3, #1965]
1623:src/xeq.c     **** 
 13994              		.loc 1 1623 1 is_stmt 0 view .LVU3671
 13995 0046 02B0     		add	sp, sp, #8
 13996              		.cfi_remember_state
 13997              		.cfi_def_cfa_offset 16
 13998              		@ sp needed
 13999 0048 70BD     		pop	{r4, r5, r6, pc}
 14000              	.LVL996:
 14001              	.L997:
 14002              		.cfi_restore_state
1608:src/xeq.c     **** 		zero_Y();
 14003              		.loc 1 1608 3 is_stmt 1 view .LVU3672
 14004 004a FFF7FEFF 		bl	lift2_if_enabled
 14005              	.LVL997:
1609:src/xeq.c     **** 		set_was_complex();
 14006              		.loc 1 1609 3 view .LVU3673
 14007              	.LBB2542:
 14008              	.LBI2542:
1536:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 14009              		.loc 1 1536 6 view .LVU3674
 14010              	.LBB2543:
1537:src/xeq.c     **** }
 14011              		.loc 1 1537 2 view .LVU3675
 14012 004e 6520     		movs	r0, #101
 14013 0050 FFF7FEFF 		bl	get_reg_n
 14014              	.LVL998:
 14015 0054 FFF7FEFF 		bl	set_zero
 14016              	.LVL999:
 14017              	.LBE2543:
 14018              	.LBE2542:
1610:src/xeq.c     **** 	} else
 14019              		.loc 1 1610 3 view .LVU3676
 14020              	.LBB2544:
 14021              	.LBI2544:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 14022              		.loc 1 533 13 view .LVU3677
 14023              	.LBB2545:
 534:src/xeq.c     **** }
 14024              		.loc 1 534 2 view .LVU3678
 534:src/xeq.c     **** }
 14025              		.loc 1 534 20 is_stmt 0 view .LVU3679
 14026 0058 1A4B     		ldr	r3, .L1014
 14027              	.LBE2545:
 14028              	.LBE2544:
1614:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14029              		.loc 1 1614 24 view .LVU3680
 14030 005a 7934     		adds	r4, r4, #121
 14031              	.LBB2549:
 14032              	.LBB2546:
ARM GAS  /tmp/ccaPnj5t.s 			page 407


 534:src/xeq.c     **** }
 14033              		.loc 1 534 20 view .LVU3681
 14034 005c 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14035 005e 0121     		movs	r1, #1
 14036              	.LBE2546:
 14037              	.LBE2549:
1614:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14038              		.loc 1 1614 5 view .LVU3682
 14039 0060 E4B2     		uxtb	r4, r4
 14040              	.LBB2550:
 14041              	.LBB2547:
 534:src/xeq.c     **** }
 14042              		.loc 1 534 20 view .LVU3683
 14043 0062 61F38712 		bfi	r2, r1, #6, #2
 14044              	.LBE2547:
 14045              	.LBE2550:
1614:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14046              		.loc 1 1614 5 view .LVU3684
 14047 0066 012C     		cmp	r4, #1
 14048              	.LBB2551:
 14049              	.LBB2548:
 534:src/xeq.c     **** }
 14050              		.loc 1 534 20 view .LVU3685
 14051 0068 1A75     		strb	r2, [r3, #20]
 14052              	.LBE2548:
 14053              	.LBE2551:
1614:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14054              		.loc 1 1614 2 is_stmt 1 view .LVU3686
1614:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14055              		.loc 1 1614 5 is_stmt 0 view .LVU3687
 14056 006a DBD8     		bhi	.L1000
 14057              	.L1013:
1615:src/xeq.c     **** 	else if (is_intmode())
 14058              		.loc 1 1615 3 is_stmt 1 view .LVU3688
 14059              	.LVL1000:
 14060              	.LBB2552:
 14061              	.LBI2552:
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14062              		.loc 1 1491 6 view .LVU3689
 14063              	.LBB2553:
1492:src/xeq.c     **** }
 14064              		.loc 1 1492 2 view .LVU3690
 14065              	.LBE2553:
 14066              	.LBE2552:
1615:src/xeq.c     **** 	else if (is_intmode())
 14067              		.loc 1 1615 3 is_stmt 0 view .LVU3691
 14068 006c 0023     		movs	r3, #0
 14069              	.LBB2555:
 14070              	.LBB2554:
1492:src/xeq.c     **** }
 14071              		.loc 1 1492 2 view .LVU3692
 14072 006e 0093     		str	r3, [sp]
 14073 0070 2A46     		mov	r2, r5
 14074 0072 6420     		movs	r0, #100
 14075 0074 FFF7FEFF 		bl	set_reg_n_int_sgn
 14076              	.LVL1001:
 14077 0078 134B     		ldr	r3, .L1014+4
ARM GAS  /tmp/ccaPnj5t.s 			page 408


 14078 007a 1B68     		ldr	r3, [r3]
1493:src/xeq.c     **** 
 14079              		.loc 1 1493 1 view .LVU3693
 14080 007c DDE7     		b	.L1001
 14081              	.LVL1002:
 14082              	.L1002:
1493:src/xeq.c     **** 
 14083              		.loc 1 1493 1 view .LVU3694
 14084              	.LBE2554:
 14085              	.LBE2555:
1619:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14086              		.loc 1 1619 3 is_stmt 1 view .LVU3695
 14087              	.LBB2556:
 14088              	.LBB2557:
1101:src/xeq.c     **** }
 14089              		.loc 1 1101 24 is_stmt 0 view .LVU3696
 14090 007e B3F8E817 		ldrh	r1, [r3, #2024]
 14091              	.LBE2557:
 14092              	.LBE2556:
1619:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14093              		.loc 1 1619 3 view .LVU3697
 14094 0082 134B     		ldr	r3, .L1014+12
 14095              	.LBB2560:
 14096              	.LBB2558:
1101:src/xeq.c     **** }
 14097              		.loc 1 1101 24 view .LVU3698
 14098 0084 44F20106 		movw	r6, #16385
 14099 0088 3140     		ands	r1, r1, r6
 14100              	.LBE2558:
 14101              	.LBE2560:
1619:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14102              		.loc 1 1619 22 view .LVU3699
 14103 008a A1F58041 		sub	r1, r1, #16384
 14104 008e B1FA81F1 		clz	r1, r1
 14105 0092 2846     		mov	r0, r5
 14106 0094 4909     		lsrs	r1, r1, #5
1619:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14107              		.loc 1 1619 3 view .LVU3700
 14108 0096 1D68     		ldr	r5, [r3]
 14109              	.LVL1003:
 14110              	.LBB2561:
 14111              	.LBI2556:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14112              		.loc 1 1100 5 is_stmt 1 view .LVU3701
 14113              	.LBB2559:
1101:src/xeq.c     **** }
 14114              		.loc 1 1101 2 view .LVU3702
 14115              	.LBE2559:
 14116              	.LBE2561:
1619:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14117              		.loc 1 1619 22 is_stmt 0 view .LVU3703
 14118 0098 FFF7FEFF 		bl	get_const
 14119              	.LVL1004:
 14120              	.LBB2562:
 14121              	.LBB2563:
 14122              	.LBB2564:
 14123              	.LBB2565:
ARM GAS  /tmp/ccaPnj5t.s 			page 409


1101:src/xeq.c     **** }
 14124              		.loc 1 1101 24 view .LVU3704
 14125 009c 2368     		ldr	r3, [r4]
 14126 009e B3F8E837 		ldrh	r3, [r3, #2024]
 14127              	.LBE2565:
 14128              	.LBE2564:
 721:src/xeq.c     **** }
 14129              		.loc 1 721 2 view .LVU3705
 14130 00a2 1E40     		ands	r6, r6, r3
 14131 00a4 B6F5804F 		cmp	r6, #16384
 14132              	.LBE2563:
 14133              	.LBE2562:
1619:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14134              		.loc 1 1619 22 view .LVU3706
 14135 00a8 0146     		mov	r1, r0
 14136              	.LVL1005:
 14137              	.LBB2569:
 14138              	.LBI2562:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14139              		.loc 1 720 6 is_stmt 1 view .LVU3707
 14140              	.LBB2568:
 721:src/xeq.c     **** }
 14141              		.loc 1 721 2 view .LVU3708
 14142              	.LBB2567:
 14143              	.LBI2564:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14144              		.loc 1 1100 5 view .LVU3709
 14145              	.LBB2566:
1101:src/xeq.c     **** }
 14146              		.loc 1 1101 2 view .LVU3710
 14147              	.LBE2566:
 14148              	.LBE2567:
 721:src/xeq.c     **** }
 14149              		.loc 1 721 2 is_stmt 0 view .LVU3711
 14150 00aa 08BF     		it	eq
 14151 00ac 1022     		moveq	r2, #16
 14152 00ae 2846     		mov	r0, r5
 14153              	.LVL1006:
 721:src/xeq.c     **** }
 14154              		.loc 1 721 2 view .LVU3712
 14155 00b0 18BF     		it	ne
 14156 00b2 0822     		movne	r2, #8
 14157 00b4 FFF7FEFF 		bl	xcopy
 14158              	.LVL1007:
 721:src/xeq.c     **** }
 14159              		.loc 1 721 2 view .LVU3713
 14160 00b8 2368     		ldr	r3, [r4]
 722:src/xeq.c     **** 
 14161              		.loc 1 722 1 view .LVU3714
 14162 00ba BEE7     		b	.L1001
 14163              	.LVL1008:
 14164              	.L1012:
 722:src/xeq.c     **** 
 14165              		.loc 1 722 1 view .LVU3715
 14166              	.LBE2568:
 14167              	.LBE2569:
 14168              	.LBB2570:
ARM GAS  /tmp/ccaPnj5t.s 			page 410


 14169              	.LBB2535:
 743:src/xeq.c     **** }
 14170              		.loc 1 743 3 is_stmt 1 view .LVU3716
 14171 00bc FFF7FEFF 		bl	lift
 14172              	.LVL1009:
 743:src/xeq.c     **** }
 14173              		.loc 1 743 3 is_stmt 0 view .LVU3717
 14174 00c0 ACE7     		b	.L999
 14175              	.L1015:
 14176 00c2 00BF     		.align	2
 14177              	.L1014:
 14178 00c4 00000000 		.word	StateWhileOn
 14179 00c8 00000000 		.word	main_ram
 14180 00cc 00000000 		.word	Error
 14181 00d0 00000000 		.word	StackBase
 14182              	.LBE2535:
 14183              	.LBE2570:
 14184              		.cfi_endproc
 14185              	.LFE113:
 14187              		.section	.text.cmdsto,"ax",%progbits
 14188              		.align	1
 14189              		.p2align 2,,3
 14190              		.global	cmdsto
 14191              		.syntax unified
 14192              		.thumb
 14193              		.thumb_func
 14194              		.fpu fpv4-sp-d16
 14196              	cmdsto:
 14197              	.LVL1010:
 14198              	.LFB116:
1706:src/xeq.c     **** 	if (op == RARG_STO) {
 14199              		.loc 1 1706 45 is_stmt 1 view -0
 14200              		.cfi_startproc
 14201              		@ args = 0, pretend = 0, frame = 48
 14202              		@ frame_needed = 0, uses_anonymous_args = 0
1707:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14203              		.loc 1 1707 2 view .LVU3719
1706:src/xeq.c     **** 	if (op == RARG_STO) {
 14204              		.loc 1 1706 45 is_stmt 0 view .LVU3720
 14205 0000 10B5     		push	{r4, lr}
 14206              		.cfi_def_cfa_offset 8
 14207              		.cfi_offset 4, -8
 14208              		.cfi_offset 14, -4
1707:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14209              		.loc 1 1707 5 view .LVU3721
 14210 0002 0329     		cmp	r1, #3
1706:src/xeq.c     **** 	if (op == RARG_STO) {
 14211              		.loc 1 1706 45 view .LVU3722
 14212 0004 8CB0     		sub	sp, sp, #48
 14213              		.cfi_def_cfa_offset 56
1707:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14214              		.loc 1 1707 5 view .LVU3723
 14215 0006 32D0     		beq	.L1029
1710:src/xeq.c     **** 			long long int r;
 14216              		.loc 1 1710 3 is_stmt 1 view .LVU3724
1710:src/xeq.c     **** 			long long int r;
 14217              		.loc 1 1710 7 is_stmt 0 view .LVU3725
ARM GAS  /tmp/ccaPnj5t.s 			page 411


 14218 0008 1B4B     		ldr	r3, .L1030
 14219 000a 1B68     		ldr	r3, [r3]
 14220 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 14221              	.LBB2583:
1713:src/xeq.c     **** 				illegal(op);
 14222              		.loc 1 1713 8 view .LVU3726
 14223 0010 0339     		subs	r1, r1, #3
 14224              	.LVL1011:
1713:src/xeq.c     **** 				illegal(op);
 14225              		.loc 1 1713 8 view .LVU3727
 14226              	.LBE2583:
1710:src/xeq.c     **** 			long long int r;
 14227              		.loc 1 1710 6 view .LVU3728
 14228 0012 13F00103 		ands	r3, r3, #1
 14229 0016 0446     		mov	r4, r0
 14230              	.LBB2591:
1713:src/xeq.c     **** 				illegal(op);
 14231              		.loc 1 1713 8 view .LVU3729
 14232 0018 88B2     		uxth	r0, r1
 14233              	.LVL1012:
1713:src/xeq.c     **** 				illegal(op);
 14234              		.loc 1 1713 8 view .LVU3730
 14235              	.LBE2591:
1710:src/xeq.c     **** 			long long int r;
 14236              		.loc 1 1710 6 view .LVU3731
 14237 001a 18D0     		beq	.L1019
 14238              	.LBB2592:
1711:src/xeq.c     **** 
 14239              		.loc 1 1711 4 is_stmt 1 view .LVU3732
1713:src/xeq.c     **** 				illegal(op);
 14240              		.loc 1 1713 4 view .LVU3733
1713:src/xeq.c     **** 				illegal(op);
 14241              		.loc 1 1713 8 is_stmt 0 view .LVU3734
 14242 001c 0023     		movs	r3, #0
 14243 001e 6A46     		mov	r2, sp
 14244 0020 2146     		mov	r1, r4
 14245 0022 FFF7FEFF 		bl	storcl_intop
 14246              	.LVL1013:
1713:src/xeq.c     **** 				illegal(op);
 14247              		.loc 1 1713 7 view .LVU3735
 14248 0026 20B1     		cbz	r0, .L1020
1714:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14249              		.loc 1 1714 5 is_stmt 1 view .LVU3736
1714:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14250              		.loc 1 1714 5 view .LVU3737
 14251              	.LVL1014:
 14252              	.LBB2584:
 14253              	.LBI2584:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14254              		.loc 1 540 5 view .LVU3738
 14255              	.LBB2585:
 541:src/xeq.c     **** 		Error = e;
 14256              		.loc 1 541 2 view .LVU3739
 541:src/xeq.c     **** 		Error = e;
 14257              		.loc 1 541 12 is_stmt 0 view .LVU3740
 14258 0028 144B     		ldr	r3, .L1030+4
 541:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccaPnj5t.s 			page 412


 14259              		.loc 1 541 5 view .LVU3741
 14260 002a 1A68     		ldr	r2, [r3]
 14261 002c 0AB9     		cbnz	r2, .L1020
 14262              	.LVL1015:
 14263              	.LBB2586:
 14264              	.LBI2586:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14265              		.loc 1 540 5 is_stmt 1 view .LVU3742
 14266              	.LBB2587:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14267              		.loc 1 542 3 view .LVU3743
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14268              		.loc 1 542 9 is_stmt 0 view .LVU3744
 14269 002e 0322     		movs	r2, #3
 14270 0030 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14271              		.loc 1 543 3 is_stmt 1 view .LVU3745
 14272              	.LVL1016:
 14273              	.L1020:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14274              		.loc 1 543 3 is_stmt 0 view .LVU3746
 14275              	.LBE2587:
 14276              	.LBE2586:
 14277              	.LBE2585:
 14278              	.LBE2584:
1714:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14279              		.loc 1 1714 5 is_stmt 1 discriminator 1 view .LVU3747
1715:src/xeq.c     **** 		} else {
 14280              		.loc 1 1715 4 discriminator 1 view .LVU3748
1715:src/xeq.c     **** 		} else {
 14281              		.loc 1 1715 4 is_stmt 0 discriminator 1 view .LVU3749
 14282 0032 DDE90023 		ldrd	r2, [sp]
 14283              	.LBB2588:
 14284              	.LBB2589:
1405:src/xeq.c     **** }
 14285              		.loc 1 1405 8 discriminator 1 view .LVU3750
 14286 0036 2046     		mov	r0, r4
 14287 0038 CDE90223 		strd	r2, [sp, #8]
 14288              	.LVL1017:
1405:src/xeq.c     **** }
 14289              		.loc 1 1405 8 discriminator 1 view .LVU3751
 14290              	.LBE2589:
 14291              	.LBI2588:
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 14292              		.loc 1 1404 6 is_stmt 1 discriminator 1 view .LVU3752
 14293              	.LBB2590:
1405:src/xeq.c     **** }
 14294              		.loc 1 1405 2 discriminator 1 view .LVU3753
1405:src/xeq.c     **** }
 14295              		.loc 1 1405 8 is_stmt 0 discriminator 1 view .LVU3754
 14296 003c FFF7FEFF 		bl	get_reg_n
 14297              	.LVL1018:
1405:src/xeq.c     **** }
 14298              		.loc 1 1405 2 discriminator 1 view .LVU3755
 14299 0040 0822     		movs	r2, #8
 14300 0042 0DEB0201 		add	r1, sp, r2
 14301 0046 FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/ccaPnj5t.s 			page 413


 14302              	.LVL1019:
1405:src/xeq.c     **** }
 14303              		.loc 1 1405 2 discriminator 1 view .LVU3756
 14304              	.LBE2590:
 14305              	.LBE2588:
 14306              	.LBE2592:
1724:src/xeq.c     **** 
 14307              		.loc 1 1724 1 discriminator 1 view .LVU3757
 14308 004a 0CB0     		add	sp, sp, #48
 14309              		.cfi_remember_state
 14310              		.cfi_def_cfa_offset 8
 14311              		@ sp needed
 14312 004c 10BD     		pop	{r4, pc}
 14313              	.LVL1020:
 14314              	.L1019:
 14315              		.cfi_restore_state
 14316              	.LBB2593:
1717:src/xeq.c     **** 
 14317              		.loc 1 1717 4 is_stmt 1 view .LVU3758
1719:src/xeq.c     **** 				illegal(op);
 14318              		.loc 1 1719 4 view .LVU3759
1719:src/xeq.c     **** 				illegal(op);
 14319              		.loc 1 1719 8 is_stmt 0 view .LVU3760
 14320 004e 02AA     		add	r2, sp, #8
 14321 0050 2146     		mov	r1, r4
 14322 0052 FFF7FEFF 		bl	storcl_op
 14323              	.LVL1021:
1719:src/xeq.c     **** 				illegal(op);
 14324              		.loc 1 1719 7 view .LVU3761
 14325 0056 20B1     		cbz	r0, .L1021
1720:src/xeq.c     **** 			setRegister(arg, &r);
 14326              		.loc 1 1720 5 is_stmt 1 view .LVU3762
1720:src/xeq.c     **** 			setRegister(arg, &r);
 14327              		.loc 1 1720 5 view .LVU3763
 14328              	.LVL1022:
 14329              	.LBB2594:
 14330              	.LBI2594:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14331              		.loc 1 540 5 view .LVU3764
 14332              	.LBB2595:
 541:src/xeq.c     **** 		Error = e;
 14333              		.loc 1 541 2 view .LVU3765
 541:src/xeq.c     **** 		Error = e;
 14334              		.loc 1 541 12 is_stmt 0 view .LVU3766
 14335 0058 084B     		ldr	r3, .L1030+4
 541:src/xeq.c     **** 		Error = e;
 14336              		.loc 1 541 5 view .LVU3767
 14337 005a 1A68     		ldr	r2, [r3]
 14338 005c 0AB9     		cbnz	r2, .L1021
 14339              	.LVL1023:
 14340              	.LBB2596:
 14341              	.LBI2596:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14342              		.loc 1 540 5 is_stmt 1 view .LVU3768
 14343              	.LBB2597:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14344              		.loc 1 542 3 view .LVU3769
ARM GAS  /tmp/ccaPnj5t.s 			page 414


 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14345              		.loc 1 542 9 is_stmt 0 view .LVU3770
 14346 005e 0322     		movs	r2, #3
 14347 0060 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14348              		.loc 1 543 3 is_stmt 1 view .LVU3771
 14349              	.LVL1024:
 14350              	.L1021:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14351              		.loc 1 543 3 is_stmt 0 view .LVU3772
 14352              	.LBE2597:
 14353              	.LBE2596:
 14354              	.LBE2595:
 14355              	.LBE2594:
1720:src/xeq.c     **** 			setRegister(arg, &r);
 14356              		.loc 1 1720 5 is_stmt 1 discriminator 1 view .LVU3773
1721:src/xeq.c     **** 		}
 14357              		.loc 1 1721 4 discriminator 1 view .LVU3774
 14358 0062 02A9     		add	r1, sp, #8
 14359 0064 2046     		mov	r0, r4
 14360 0066 FFF7FEFF 		bl	setRegister
 14361              	.LVL1025:
 14362              	.LBE2593:
1724:src/xeq.c     **** 
 14363              		.loc 1 1724 1 is_stmt 0 discriminator 1 view .LVU3775
 14364 006a 0CB0     		add	sp, sp, #48
 14365              		.cfi_remember_state
 14366              		.cfi_def_cfa_offset 8
 14367              		@ sp needed
 14368 006c 10BD     		pop	{r4, pc}
 14369              	.LVL1026:
 14370              	.L1029:
 14371              		.cfi_restore_state
1708:src/xeq.c     **** 	} else {
 14372              		.loc 1 1708 3 is_stmt 1 view .LVU3776
 14373 006e 6421     		movs	r1, #100
 14374              	.LVL1027:
1708:src/xeq.c     **** 	} else {
 14375              		.loc 1 1708 3 is_stmt 0 view .LVU3777
 14376 0070 FFF7FEFF 		bl	copyreg_n
 14377              	.LVL1028:
1724:src/xeq.c     **** 
 14378              		.loc 1 1724 1 view .LVU3778
 14379 0074 0CB0     		add	sp, sp, #48
 14380              		.cfi_def_cfa_offset 8
 14381              		@ sp needed
 14382 0076 10BD     		pop	{r4, pc}
 14383              	.L1031:
 14384              		.align	2
 14385              	.L1030:
 14386 0078 00000000 		.word	main_ram
 14387 007c 00000000 		.word	Error
 14388              		.cfi_endproc
 14389              	.LFE116:
 14391              		.section	.text.cmdrcl,"ax",%progbits
 14392              		.align	1
 14393              		.p2align 2,,3
ARM GAS  /tmp/ccaPnj5t.s 			page 415


 14394              		.global	cmdrcl
 14395              		.syntax unified
 14396              		.thumb
 14397              		.thumb_func
 14398              		.fpu fpv4-sp-d16
 14400              	cmdrcl:
 14401              	.LVL1029:
 14402              	.LFB118:
1753:src/xeq.c     **** 	do_rcl(arg, op);
 14403              		.loc 1 1753 45 is_stmt 1 view -0
 14404              		.cfi_startproc
 14405              		@ args = 0, pretend = 0, frame = 0
 14406              		@ frame_needed = 0, uses_anonymous_args = 0
 14407              		@ link register save eliminated.
1754:src/xeq.c     **** }
 14408              		.loc 1 1754 2 view .LVU3780
 14409 0000 FFF7FEBF 		b	do_rcl
 14410              	.LVL1030:
1754:src/xeq.c     **** }
 14411              		.loc 1 1754 2 is_stmt 0 view .LVU3781
 14412              		.cfi_endproc
 14413              	.LFE118:
 14415              		.section	.text.cmdcsto,"ax",%progbits
 14416              		.align	1
 14417              		.p2align 2,,3
 14418              		.global	cmdcsto
 14419              		.syntax unified
 14420              		.thumb
 14421              		.thumb_func
 14422              		.fpu fpv4-sp-d16
 14424              	cmdcsto:
 14425              	.LVL1031:
 14426              	.LFB120:
1798:src/xeq.c     **** 	decNumber r1, r2;
 14427              		.loc 1 1798 46 is_stmt 1 view -0
 14428              		.cfi_startproc
 14429              		@ args = 0, pretend = 0, frame = 72
 14430              		@ frame_needed = 0, uses_anonymous_args = 0
1799:src/xeq.c     **** 	REGISTER *t1, *t2;
 14431              		.loc 1 1799 2 view .LVU3783
1800:src/xeq.c     **** 
 14432              		.loc 1 1800 2 view .LVU3784
1802:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14433              		.loc 1 1802 2 view .LVU3785
1798:src/xeq.c     **** 	decNumber r1, r2;
 14434              		.loc 1 1798 46 is_stmt 0 view .LVU3786
 14435 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 14436              		.cfi_def_cfa_offset 24
 14437              		.cfi_offset 4, -24
 14438              		.cfi_offset 5, -20
 14439              		.cfi_offset 6, -16
 14440              		.cfi_offset 7, -12
 14441              		.cfi_offset 8, -8
 14442              		.cfi_offset 14, -4
 14443 0004 94B0     		sub	sp, sp, #80
 14444              		.cfi_def_cfa_offset 104
1798:src/xeq.c     **** 	decNumber r1, r2;
ARM GAS  /tmp/ccaPnj5t.s 			page 416


 14445              		.loc 1 1798 46 view .LVU3787
 14446 0006 0C46     		mov	r4, r1
1803:src/xeq.c     **** 
 14447              		.loc 1 1803 21 view .LVU3788
 14448 0008 461C     		adds	r6, r0, #1
1798:src/xeq.c     **** 	decNumber r1, r2;
 14449              		.loc 1 1798 46 view .LVU3789
 14450 000a 0546     		mov	r5, r0
1802:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14451              		.loc 1 1802 7 view .LVU3790
 14452 000c FFF7FEFF 		bl	get_reg_n
 14453              	.LVL1032:
1802:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14454              		.loc 1 1802 7 view .LVU3791
 14455 0010 8046     		mov	r8, r0
1803:src/xeq.c     **** 
 14456              		.loc 1 1803 7 view .LVU3792
 14457 0012 3046     		mov	r0, r6
 14458              	.LVL1033:
1803:src/xeq.c     **** 
 14459              		.loc 1 1803 2 is_stmt 1 view .LVU3793
1803:src/xeq.c     **** 
 14460              		.loc 1 1803 7 is_stmt 0 view .LVU3794
 14461 0014 FFF7FEFF 		bl	get_reg_n
 14462              	.LVL1034:
1805:src/xeq.c     **** 		copyreg(t1, StackBase);
 14463              		.loc 1 1805 2 is_stmt 1 view .LVU3795
1805:src/xeq.c     **** 		copyreg(t1, StackBase);
 14464              		.loc 1 1805 5 is_stmt 0 view .LVU3796
 14465 0018 152C     		cmp	r4, #21
 14466 001a 24D0     		beq	.L1045
1809:src/xeq.c     **** 			bad_mode_error();
 14467              		.loc 1 1809 3 is_stmt 1 view .LVU3797
1809:src/xeq.c     **** 			bad_mode_error();
 14468              		.loc 1 1809 7 is_stmt 0 view .LVU3798
 14469 001c 284B     		ldr	r3, .L1046
 14470 001e 1B68     		ldr	r3, [r3]
 14471 0020 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1809:src/xeq.c     **** 			bad_mode_error();
 14472              		.loc 1 1809 6 view .LVU3799
 14473 0024 13F00103 		ands	r3, r3, #1
 14474 0028 0DD0     		beq	.L1038
1810:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
 14475              		.loc 1 1810 4 is_stmt 1 view .LVU3800
 14476              	.LBB2617:
 14477              	.LBI2617:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14478              		.loc 1 569 6 view .LVU3801
 14479              	.LBE2617:
 570:src/xeq.c     **** }
 14480              		.loc 1 570 2 view .LVU3802
 14481              	.LVL1035:
 14482              	.LBB2622:
 14483              	.LBB2618:
 14484              	.LBI2618:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14485              		.loc 1 540 5 view .LVU3803
ARM GAS  /tmp/ccaPnj5t.s 			page 417


 14486              	.LBB2619:
 541:src/xeq.c     **** 		Error = e;
 14487              		.loc 1 541 2 view .LVU3804
 541:src/xeq.c     **** 		Error = e;
 14488              		.loc 1 541 12 is_stmt 0 view .LVU3805
 14489 002a 264B     		ldr	r3, .L1046+4
 541:src/xeq.c     **** 		Error = e;
 14490              		.loc 1 541 5 view .LVU3806
 14491 002c 1A68     		ldr	r2, [r3]
 14492 002e 0AB9     		cbnz	r2, .L1037
 14493              	.LVL1036:
 14494              	.LBB2620:
 14495              	.LBI2620:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14496              		.loc 1 540 5 is_stmt 1 view .LVU3807
 14497              	.LBB2621:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14498              		.loc 1 542 3 view .LVU3808
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14499              		.loc 1 542 9 is_stmt 0 view .LVU3809
 14500 0030 0D22     		movs	r2, #13
 14501 0032 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14502              		.loc 1 543 3 is_stmt 1 view .LVU3810
 14503              	.LVL1037:
 14504              	.L1037:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14505              		.loc 1 543 3 is_stmt 0 view .LVU3811
 14506              	.LBE2621:
 14507              	.LBE2620:
 14508              	.LBE2619:
 14509              	.LBE2618:
 14510              	.LBE2622:
1818:src/xeq.c     **** }
 14511              		.loc 1 1818 2 is_stmt 1 view .LVU3812
 14512              	.LBB2623:
 14513              	.LBI2623:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 14514              		.loc 1 533 13 view .LVU3813
 14515              	.LBB2624:
 534:src/xeq.c     **** }
 14516              		.loc 1 534 2 view .LVU3814
 534:src/xeq.c     **** }
 14517              		.loc 1 534 20 is_stmt 0 view .LVU3815
 14518 0034 244B     		ldr	r3, .L1046+8
 14519 0036 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14520 0038 0121     		movs	r1, #1
 14521 003a 61F38712 		bfi	r2, r1, #6, #2
 14522 003e 1A75     		strb	r2, [r3, #20]
 14523              	.LBE2624:
 14524              	.LBE2623:
1819:src/xeq.c     **** 
 14525              		.loc 1 1819 1 view .LVU3816
 14526 0040 14B0     		add	sp, sp, #80
 14527              		.cfi_remember_state
 14528              		.cfi_def_cfa_offset 24
 14529              		@ sp needed
ARM GAS  /tmp/ccaPnj5t.s 			page 418


 14530 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 14531              	.LVL1038:
 14532              	.L1038:
 14533              		.cfi_restore_state
1811:src/xeq.c     **** 			illegal(op);
 14534              		.loc 1 1811 8 is_stmt 1 view .LVU3817
1811:src/xeq.c     **** 			illegal(op);
 14535              		.loc 1 1811 12 is_stmt 0 view .LVU3818
 14536 0046 153C     		subs	r4, r4, #21
 14537 0048 0093     		str	r3, [sp]
 14538 004a A0B2     		uxth	r0, r4
 14539              	.LVL1039:
1811:src/xeq.c     **** 			illegal(op);
 14540              		.loc 1 1811 12 view .LVU3819
 14541 004c 0BAB     		add	r3, sp, #44
 14542 004e 02AA     		add	r2, sp, #8
 14543 0050 2946     		mov	r1, r5
 14544 0052 FFF7FEFF 		bl	storcl_cop
 14545              	.LVL1040:
1811:src/xeq.c     **** 			illegal(op);
 14546              		.loc 1 1811 11 view .LVU3820
 14547 0056 50B3     		cbz	r0, .L1040
1812:src/xeq.c     **** 		else {
 14548              		.loc 1 1812 4 is_stmt 1 view .LVU3821
1812:src/xeq.c     **** 		else {
 14549              		.loc 1 1812 4 view .LVU3822
 14550              	.LVL1041:
 14551              	.LBB2625:
 14552              	.LBI2625:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14553              		.loc 1 540 5 view .LVU3823
 14554              	.LBB2626:
 541:src/xeq.c     **** 		Error = e;
 14555              		.loc 1 541 2 view .LVU3824
 541:src/xeq.c     **** 		Error = e;
 14556              		.loc 1 541 12 is_stmt 0 view .LVU3825
 14557 0058 1A4B     		ldr	r3, .L1046+4
 541:src/xeq.c     **** 		Error = e;
 14558              		.loc 1 541 5 view .LVU3826
 14559 005a 1A68     		ldr	r2, [r3]
 14560 005c 002A     		cmp	r2, #0
 14561 005e E9D1     		bne	.L1037
 14562              	.LVL1042:
 14563              	.LBB2627:
 14564              	.LBI2627:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14565              		.loc 1 540 5 is_stmt 1 view .LVU3827
 14566              	.LBB2628:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14567              		.loc 1 542 3 view .LVU3828
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14568              		.loc 1 542 9 is_stmt 0 view .LVU3829
 14569 0060 0322     		movs	r2, #3
 14570 0062 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14571              		.loc 1 543 3 is_stmt 1 view .LVU3830
 14572 0064 E6E7     		b	.L1037
ARM GAS  /tmp/ccaPnj5t.s 			page 419


 14573              	.LVL1043:
 14574              	.L1045:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14575              		.loc 1 543 3 is_stmt 0 view .LVU3831
 14576              	.LBE2628:
 14577              	.LBE2627:
 14578              	.LBE2626:
 14579              	.LBE2625:
1806:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14580              		.loc 1 1806 3 is_stmt 1 view .LVU3832
 14581              	.LBB2629:
 14582              	.LBB2630:
 14583              	.LBB2631:
 14584              	.LBB2632:
1101:src/xeq.c     **** }
 14585              		.loc 1 1101 24 is_stmt 0 view .LVU3833
 14586 0066 164D     		ldr	r5, .L1046
 14587              	.LVL1044:
1101:src/xeq.c     **** }
 14588              		.loc 1 1101 24 view .LVU3834
 14589              	.LBE2632:
 14590              	.LBE2631:
 14591              	.LBE2630:
 14592              	.LBE2629:
1806:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14593              		.loc 1 1806 3 view .LVU3835
 14594 0068 184A     		ldr	r2, .L1046+12
 14595              	.LVL1045:
 14596              	.LBB2638:
 14597              	.LBI2629:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14598              		.loc 1 720 6 is_stmt 1 view .LVU3836
 14599              	.LBB2637:
 721:src/xeq.c     **** }
 14600              		.loc 1 721 2 view .LVU3837
 14601              	.LBB2635:
 14602              	.LBI2631:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14603              		.loc 1 1100 5 view .LVU3838
 14604              	.LBB2633:
1101:src/xeq.c     **** }
 14605              		.loc 1 1101 2 view .LVU3839
1101:src/xeq.c     **** }
 14606              		.loc 1 1101 24 is_stmt 0 view .LVU3840
 14607 006a 2B68     		ldr	r3, [r5]
 14608              	.LBE2633:
 14609              	.LBE2635:
 721:src/xeq.c     **** }
 14610              		.loc 1 721 2 view .LVU3841
 14611 006c 1168     		ldr	r1, [r2]
 14612              	.LBB2636:
 14613              	.LBB2634:
1101:src/xeq.c     **** }
 14614              		.loc 1 1101 24 view .LVU3842
 14615 006e B3F8E837 		ldrh	r3, [r3, #2024]
 14616 0072 44F20104 		movw	r4, #16385
 14617              	.LBE2634:
ARM GAS  /tmp/ccaPnj5t.s 			page 420


 14618              	.LBE2636:
 721:src/xeq.c     **** }
 14619              		.loc 1 721 2 view .LVU3843
 14620 0076 2340     		ands	r3, r3, r4
 14621 0078 B3F5804F 		cmp	r3, #16384
 14622 007c 0CBF     		ite	eq
 14623 007e 1022     		moveq	r2, #16
 14624              	.LVL1046:
 721:src/xeq.c     **** }
 14625              		.loc 1 721 2 view .LVU3844
 14626 0080 0822     		movne	r2, #8
 14627 0082 0746     		mov	r7, r0
 14628 0084 4046     		mov	r0, r8
 14629              	.LVL1047:
 721:src/xeq.c     **** }
 14630              		.loc 1 721 2 view .LVU3845
 14631 0086 FFF7FEFF 		bl	xcopy
 14632              	.LVL1048:
 721:src/xeq.c     **** }
 14633              		.loc 1 721 2 view .LVU3846
 14634              	.LBE2637:
 14635              	.LBE2638:
1807:src/xeq.c     **** 	} else {
 14636              		.loc 1 1807 3 is_stmt 1 view .LVU3847
1807:src/xeq.c     **** 	} else {
 14637              		.loc 1 1807 15 is_stmt 0 view .LVU3848
 14638 008a 6520     		movs	r0, #101
 14639 008c FFF7FEFF 		bl	get_reg_n
 14640              	.LVL1049:
 14641              	.LBB2639:
 14642              	.LBB2640:
 14643              	.LBB2641:
 14644              	.LBB2642:
1101:src/xeq.c     **** }
 14645              		.loc 1 1101 24 view .LVU3849
 14646 0090 2B68     		ldr	r3, [r5]
 14647 0092 B3F8E837 		ldrh	r3, [r3, #2024]
 14648              	.LBE2642:
 14649              	.LBE2641:
 721:src/xeq.c     **** }
 14650              		.loc 1 721 2 view .LVU3850
 14651 0096 1C40     		ands	r4, r4, r3
 14652 0098 B4F5804F 		cmp	r4, #16384
 14653              	.LBE2640:
 14654              	.LBE2639:
1807:src/xeq.c     **** 	} else {
 14655              		.loc 1 1807 15 view .LVU3851
 14656 009c 0146     		mov	r1, r0
 14657              	.LVL1050:
 14658              	.LBB2646:
 14659              	.LBI2639:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14660              		.loc 1 720 6 is_stmt 1 view .LVU3852
 14661              	.LBB2645:
 721:src/xeq.c     **** }
 14662              		.loc 1 721 2 view .LVU3853
 14663              	.LBB2644:
ARM GAS  /tmp/ccaPnj5t.s 			page 421


 14664              	.LBI2641:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14665              		.loc 1 1100 5 view .LVU3854
 14666              	.LBB2643:
1101:src/xeq.c     **** }
 14667              		.loc 1 1101 2 view .LVU3855
 14668              	.LBE2643:
 14669              	.LBE2644:
 721:src/xeq.c     **** }
 14670              		.loc 1 721 2 is_stmt 0 view .LVU3856
 14671 009e 08BF     		it	eq
 14672 00a0 1022     		moveq	r2, #16
 14673 00a2 3846     		mov	r0, r7
 14674              	.LVL1051:
 721:src/xeq.c     **** }
 14675              		.loc 1 721 2 view .LVU3857
 14676 00a4 18BF     		it	ne
 14677 00a6 0822     		movne	r2, #8
 14678 00a8 FFF7FEFF 		bl	xcopy
 14679              	.LVL1052:
 722:src/xeq.c     **** 
 14680              		.loc 1 722 1 view .LVU3858
 14681 00ac C2E7     		b	.L1037
 14682              	.LVL1053:
 14683              	.L1040:
 722:src/xeq.c     **** 
 14684              		.loc 1 722 1 view .LVU3859
 14685              	.LBE2645:
 14686              	.LBE2646:
1814:src/xeq.c     **** 			setRegister(arg + 1, &r2);
 14687              		.loc 1 1814 4 is_stmt 1 view .LVU3860
 14688 00ae 02A9     		add	r1, sp, #8
 14689 00b0 2846     		mov	r0, r5
 14690 00b2 FFF7FEFF 		bl	setRegister
 14691              	.LVL1054:
1815:src/xeq.c     **** 		}
 14692              		.loc 1 1815 4 view .LVU3861
 14693 00b6 0BA9     		add	r1, sp, #44
 14694 00b8 3046     		mov	r0, r6
 14695 00ba FFF7FEFF 		bl	setRegister
 14696              	.LVL1055:
 14697 00be B9E7     		b	.L1037
 14698              	.L1047:
 14699              		.align	2
 14700              	.L1046:
 14701 00c0 00000000 		.word	main_ram
 14702 00c4 00000000 		.word	Error
 14703 00c8 00000000 		.word	StateWhileOn
 14704 00cc 00000000 		.word	StackBase
 14705              		.cfi_endproc
 14706              	.LFE120:
 14708              		.section	.text.cmdcrcl,"ax",%progbits
 14709              		.align	1
 14710              		.p2align 2,,3
 14711              		.global	cmdcrcl
 14712              		.syntax unified
 14713              		.thumb
ARM GAS  /tmp/ccaPnj5t.s 			page 422


 14714              		.thumb_func
 14715              		.fpu fpv4-sp-d16
 14717              	cmdcrcl:
 14718              	.LVL1056:
 14719              	.LFB122:
1844:src/xeq.c     **** 	do_crcl(arg, op);
 14720              		.loc 1 1844 46 view -0
 14721              		.cfi_startproc
 14722              		@ args = 0, pretend = 0, frame = 72
 14723              		@ frame_needed = 0, uses_anonymous_args = 0
1845:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14724              		.loc 1 1845 2 view .LVU3863
1844:src/xeq.c     **** 	do_crcl(arg, op);
 14725              		.loc 1 1844 46 is_stmt 0 view .LVU3864
 14726 0000 70B5     		push	{r4, r5, r6, lr}
 14727              		.cfi_def_cfa_offset 16
 14728              		.cfi_offset 4, -16
 14729              		.cfi_offset 5, -12
 14730              		.cfi_offset 6, -8
 14731              		.cfi_offset 14, -4
 14732              	.LBB2677:
 14733              	.LBB2678:
1824:src/xeq.c     **** 		REGISTER x, y;
 14734              		.loc 1 1824 5 view .LVU3865
 14735 0002 1A29     		cmp	r1, #26
 14736              	.LBE2678:
 14737              	.LBE2677:
1844:src/xeq.c     **** 	do_crcl(arg, op);
 14738              		.loc 1 1844 46 view .LVU3866
 14739 0004 94B0     		sub	sp, sp, #80
 14740              		.cfi_def_cfa_offset 96
1844:src/xeq.c     **** 	do_crcl(arg, op);
 14741              		.loc 1 1844 46 view .LVU3867
 14742 0006 0446     		mov	r4, r0
 14743              	.LVL1057:
 14744              	.LBB2727:
 14745              	.LBI2677:
1821:src/xeq.c     **** 	decNumber r1, r2;
 14746              		.loc 1 1821 13 is_stmt 1 view .LVU3868
 14747              	.LBB2724:
1822:src/xeq.c     **** 
 14748              		.loc 1 1822 2 view .LVU3869
1824:src/xeq.c     **** 		REGISTER x, y;
 14749              		.loc 1 1824 2 view .LVU3870
1824:src/xeq.c     **** 		REGISTER x, y;
 14750              		.loc 1 1824 5 is_stmt 0 view .LVU3871
 14751 0008 2AD0     		beq	.L1064
1832:src/xeq.c     **** 			bad_mode_error();
 14752              		.loc 1 1832 3 is_stmt 1 view .LVU3872
1832:src/xeq.c     **** 			bad_mode_error();
 14753              		.loc 1 1832 7 is_stmt 0 view .LVU3873
 14754 000a 3B4D     		ldr	r5, .L1065
 14755 000c 2B68     		ldr	r3, [r5]
 14756 000e 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1832:src/xeq.c     **** 			bad_mode_error();
 14757              		.loc 1 1832 6 view .LVU3874
 14758 0012 D207     		lsls	r2, r2, #31
ARM GAS  /tmp/ccaPnj5t.s 			page 423


 14759 0014 11D5     		bpl	.L1055
1833:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
 14760              		.loc 1 1833 4 is_stmt 1 view .LVU3875
 14761              	.LBB2679:
 14762              	.LBI2679:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14763              		.loc 1 569 6 view .LVU3876
 14764              	.LBE2679:
 14765              	.LBE2724:
 14766              	.LBE2727:
 570:src/xeq.c     **** }
 14767              		.loc 1 570 2 view .LVU3877
 14768              	.LVL1058:
 14769              	.LBB2728:
 14770              	.LBB2725:
 14771              	.LBB2684:
 14772              	.LBB2680:
 14773              	.LBI2680:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14774              		.loc 1 540 5 view .LVU3878
 14775              	.LBB2681:
 541:src/xeq.c     **** 		Error = e;
 14776              		.loc 1 541 2 view .LVU3879
 541:src/xeq.c     **** 		Error = e;
 14777              		.loc 1 541 12 is_stmt 0 view .LVU3880
 14778 0016 394A     		ldr	r2, .L1065+4
 541:src/xeq.c     **** 		Error = e;
 14779              		.loc 1 541 5 view .LVU3881
 14780 0018 1168     		ldr	r1, [r2]
 14781              	.LVL1059:
 541:src/xeq.c     **** 		Error = e;
 14782              		.loc 1 541 5 view .LVU3882
 14783 001a 09B9     		cbnz	r1, .L1054
 14784              	.LVL1060:
 14785              	.LBB2682:
 14786              	.LBI2682:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14787              		.loc 1 540 5 is_stmt 1 view .LVU3883
 14788              	.LBB2683:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14789              		.loc 1 542 3 view .LVU3884
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14790              		.loc 1 542 9 is_stmt 0 view .LVU3885
 14791 001c 0D21     		movs	r1, #13
 14792 001e 1160     		str	r1, [r2]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14793              		.loc 1 543 3 is_stmt 1 view .LVU3886
 14794              	.LVL1061:
 14795              	.L1054:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14796              		.loc 1 543 3 is_stmt 0 view .LVU3887
 14797              	.LBE2683:
 14798              	.LBE2682:
 14799              	.LBE2681:
 14800              	.LBE2680:
 14801              	.LBE2684:
1841:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 424


 14802              		.loc 1 1841 2 is_stmt 1 view .LVU3888
 14803              	.LBB2685:
 14804              	.LBI2685:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 14805              		.loc 1 533 13 view .LVU3889
 14806              	.LBB2686:
 534:src/xeq.c     **** }
 14807              		.loc 1 534 2 view .LVU3890
 534:src/xeq.c     **** }
 14808              		.loc 1 534 20 is_stmt 0 view .LVU3891
 14809 0020 374A     		ldr	r2, .L1065+8
 14810 0022 117D     		ldrb	r1, [r2, #20]	@ zero_extendqisi2
 14811 0024 0120     		movs	r0, #1
 14812 0026 60F38711 		bfi	r1, r0, #6, #2
 14813 002a 1175     		strb	r1, [r2, #20]
 14814              	.LVL1062:
 534:src/xeq.c     **** }
 14815              		.loc 1 534 20 view .LVU3892
 14816              	.LBE2686:
 14817              	.LBE2685:
 14818              	.LBE2725:
 14819              	.LBE2728:
1847:src/xeq.c     **** #endif
 14820              		.loc 1 1847 2 is_stmt 1 view .LVU3893
 14821 002c 93F8AD27 		ldrb	r2, [r3, #1965]	@ zero_extendqisi2
 14822 0030 0243     		orrs	r2, r2, r0
 14823 0032 83F8AD27 		strb	r2, [r3, #1965]
1849:src/xeq.c     **** 
 14824              		.loc 1 1849 1 is_stmt 0 view .LVU3894
 14825 0036 14B0     		add	sp, sp, #80
 14826              		.cfi_remember_state
 14827              		.cfi_def_cfa_offset 16
 14828              		@ sp needed
 14829 0038 70BD     		pop	{r4, r5, r6, pc}
 14830              	.LVL1063:
 14831              	.L1055:
 14832              		.cfi_restore_state
 14833              	.LBB2729:
 14834              	.LBB2726:
1834:src/xeq.c     **** 			illegal(op);
 14835              		.loc 1 1834 8 is_stmt 1 view .LVU3895
1834:src/xeq.c     **** 			illegal(op);
 14836              		.loc 1 1834 12 is_stmt 0 view .LVU3896
 14837 003a 1A39     		subs	r1, r1, #26
 14838              	.LVL1064:
1834:src/xeq.c     **** 			illegal(op);
 14839              		.loc 1 1834 12 view .LVU3897
 14840 003c 0126     		movs	r6, #1
 14841 003e 88B2     		uxth	r0, r1
 14842              	.LVL1065:
1834:src/xeq.c     **** 			illegal(op);
 14843              		.loc 1 1834 12 view .LVU3898
 14844 0040 0BAB     		add	r3, sp, #44
 14845 0042 2146     		mov	r1, r4
 14846 0044 02AA     		add	r2, sp, #8
 14847 0046 0096     		str	r6, [sp]
 14848 0048 FFF7FEFF 		bl	storcl_cop
ARM GAS  /tmp/ccaPnj5t.s 			page 425


 14849              	.LVL1066:
1834:src/xeq.c     **** 			illegal(op);
 14850              		.loc 1 1834 11 view .LVU3899
 14851 004c 0028     		cmp	r0, #0
 14852 004e 4AD0     		beq	.L1056
1835:src/xeq.c     **** 		else {
 14853              		.loc 1 1835 4 is_stmt 1 view .LVU3900
1835:src/xeq.c     **** 		else {
 14854              		.loc 1 1835 4 view .LVU3901
 14855              	.LVL1067:
 14856              	.LBB2687:
 14857              	.LBI2687:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14858              		.loc 1 540 5 view .LVU3902
 14859              	.LBB2688:
 541:src/xeq.c     **** 		Error = e;
 14860              		.loc 1 541 2 view .LVU3903
 541:src/xeq.c     **** 		Error = e;
 14861              		.loc 1 541 12 is_stmt 0 view .LVU3904
 14862 0050 2A4A     		ldr	r2, .L1065+4
 541:src/xeq.c     **** 		Error = e;
 14863              		.loc 1 541 5 view .LVU3905
 14864 0052 1368     		ldr	r3, [r2]
 14865 0054 002B     		cmp	r3, #0
 14866 0056 4CD1     		bne	.L1063
 14867              	.LVL1068:
 14868              	.LBB2689:
 14869              	.LBI2689:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14870              		.loc 1 540 5 is_stmt 1 view .LVU3906
 14871              	.LBB2690:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14872              		.loc 1 542 3 view .LVU3907
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 14873              		.loc 1 542 9 is_stmt 0 view .LVU3908
 14874 0058 0321     		movs	r1, #3
 14875 005a 2B68     		ldr	r3, [r5]
 14876 005c 1160     		str	r1, [r2]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14877              		.loc 1 543 3 is_stmt 1 view .LVU3909
 14878 005e DFE7     		b	.L1054
 14879              	.LVL1069:
 14880              	.L1064:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 14881              		.loc 1 543 3 is_stmt 0 view .LVU3910
 14882              	.LBE2690:
 14883              	.LBE2689:
 14884              	.LBE2688:
 14885              	.LBE2687:
 14886              	.LBB2691:
1825:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
 14887              		.loc 1 1825 3 is_stmt 1 view .LVU3911
1826:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14888              		.loc 1 1826 3 view .LVU3912
 14889              	.LBB2692:
 14890              	.LBB2693:
 14891              	.LBB2694:
ARM GAS  /tmp/ccaPnj5t.s 			page 426


 14892              	.LBB2695:
1101:src/xeq.c     **** }
 14893              		.loc 1 1101 24 is_stmt 0 view .LVU3913
 14894 0060 254E     		ldr	r6, .L1065
 14895              	.LBE2695:
 14896              	.LBE2694:
 14897              	.LBE2693:
 14898              	.LBE2692:
1826:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14899              		.loc 1 1826 15 view .LVU3914
 14900 0062 FFF7FEFF 		bl	get_reg_n
 14901              	.LVL1070:
 14902              	.LBB2702:
 14903              	.LBB2700:
 14904              	.LBB2698:
 14905              	.LBB2696:
1101:src/xeq.c     **** }
 14906              		.loc 1 1101 24 view .LVU3915
 14907 0066 3368     		ldr	r3, [r6]
 14908 0068 B3F8E837 		ldrh	r3, [r3, #2024]
 14909 006c 44F20105 		movw	r5, #16385
 14910              	.LBE2696:
 14911              	.LBE2698:
 721:src/xeq.c     **** }
 14912              		.loc 1 721 2 view .LVU3916
 14913 0070 2B40     		ands	r3, r3, r5
 14914 0072 B3F5804F 		cmp	r3, #16384
 14915 0076 0CBF     		ite	eq
 14916 0078 1022     		moveq	r2, #16
 14917 007a 0822     		movne	r2, #8
 14918              	.LBE2700:
 14919              	.LBE2702:
1826:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14920              		.loc 1 1826 15 view .LVU3917
 14921 007c 0146     		mov	r1, r0
 14922              	.LVL1071:
 14923              	.LBB2703:
 14924              	.LBI2692:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14925              		.loc 1 720 6 is_stmt 1 view .LVU3918
 14926              	.LBB2701:
 721:src/xeq.c     **** }
 14927              		.loc 1 721 2 view .LVU3919
 14928              	.LBB2699:
 14929              	.LBI2694:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14930              		.loc 1 1100 5 view .LVU3920
 14931              	.LBB2697:
1101:src/xeq.c     **** }
 14932              		.loc 1 1101 2 view .LVU3921
 14933              	.LBE2697:
 14934              	.LBE2699:
 721:src/xeq.c     **** }
 14935              		.loc 1 721 2 is_stmt 0 view .LVU3922
 14936 007e 02A8     		add	r0, sp, #8
 14937              	.LVL1072:
 721:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 427


 14938              		.loc 1 721 2 view .LVU3923
 14939 0080 FFF7FEFF 		bl	xcopy
 14940              	.LVL1073:
 721:src/xeq.c     **** }
 14941              		.loc 1 721 2 view .LVU3924
 14942              	.LBE2701:
 14943              	.LBE2703:
1827:src/xeq.c     **** 		lift2_if_enabled();
 14944              		.loc 1 1827 3 is_stmt 1 view .LVU3925
1827:src/xeq.c     **** 		lift2_if_enabled();
 14945              		.loc 1 1827 15 is_stmt 0 view .LVU3926
 14946 0084 601C     		adds	r0, r4, #1
 14947 0086 FFF7FEFF 		bl	get_reg_n
 14948              	.LVL1074:
 14949              	.LBB2704:
 14950              	.LBB2705:
 14951              	.LBB2706:
 14952              	.LBB2707:
1101:src/xeq.c     **** }
 14953              		.loc 1 1101 24 view .LVU3927
 14954 008a 3368     		ldr	r3, [r6]
 14955 008c B3F8E837 		ldrh	r3, [r3, #2024]
 14956              	.LBE2707:
 14957              	.LBE2706:
 721:src/xeq.c     **** }
 14958              		.loc 1 721 2 view .LVU3928
 14959 0090 2B40     		ands	r3, r3, r5
 14960 0092 B3F5804F 		cmp	r3, #16384
 14961              	.LBE2705:
 14962              	.LBE2704:
1827:src/xeq.c     **** 		lift2_if_enabled();
 14963              		.loc 1 1827 15 view .LVU3929
 14964 0096 0146     		mov	r1, r0
 14965              	.LVL1075:
 14966              	.LBB2711:
 14967              	.LBI2704:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14968              		.loc 1 720 6 is_stmt 1 view .LVU3930
 14969              	.LBB2710:
 721:src/xeq.c     **** }
 14970              		.loc 1 721 2 view .LVU3931
 14971              	.LBB2709:
 14972              	.LBI2706:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14973              		.loc 1 1100 5 view .LVU3932
 14974              	.LBB2708:
1101:src/xeq.c     **** }
 14975              		.loc 1 1101 2 view .LVU3933
 14976              	.LBE2708:
 14977              	.LBE2709:
 721:src/xeq.c     **** }
 14978              		.loc 1 721 2 is_stmt 0 view .LVU3934
 14979 0098 0CBF     		ite	eq
 14980 009a 1022     		moveq	r2, #16
 14981 009c 0822     		movne	r2, #8
 14982 009e 0BA8     		add	r0, sp, #44
 14983              	.LVL1076:
ARM GAS  /tmp/ccaPnj5t.s 			page 428


 721:src/xeq.c     **** }
 14984              		.loc 1 721 2 view .LVU3935
 14985 00a0 FFF7FEFF 		bl	xcopy
 14986              	.LVL1077:
 721:src/xeq.c     **** }
 14987              		.loc 1 721 2 view .LVU3936
 14988              	.LBE2710:
 14989              	.LBE2711:
1828:src/xeq.c     **** 		copyreg(StackBase, &x);
 14990              		.loc 1 1828 3 is_stmt 1 view .LVU3937
 14991 00a4 FFF7FEFF 		bl	lift2_if_enabled
 14992              	.LVL1078:
1829:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 14993              		.loc 1 1829 3 view .LVU3938
 14994              	.LBB2712:
 14995              	.LBB2713:
 14996              	.LBB2714:
 14997              	.LBB2715:
1101:src/xeq.c     **** }
 14998              		.loc 1 1101 24 is_stmt 0 view .LVU3939
 14999 00a8 3368     		ldr	r3, [r6]
 15000              	.LBE2715:
 15001              	.LBE2714:
 15002              	.LBE2713:
 15003              	.LBE2712:
1829:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 15004              		.loc 1 1829 3 view .LVU3940
 15005 00aa 164A     		ldr	r2, .L1065+12
 15006              	.LVL1079:
 15007              	.LBB2719:
 15008              	.LBI2712:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15009              		.loc 1 720 6 is_stmt 1 view .LVU3941
 15010              	.LBB2718:
 721:src/xeq.c     **** }
 15011              		.loc 1 721 2 view .LVU3942
 15012              	.LBB2717:
 15013              	.LBI2714:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15014              		.loc 1 1100 5 view .LVU3943
 15015              	.LBB2716:
1101:src/xeq.c     **** }
 15016              		.loc 1 1101 2 view .LVU3944
1101:src/xeq.c     **** }
 15017              		.loc 1 1101 24 is_stmt 0 view .LVU3945
 15018 00ac B3F8E837 		ldrh	r3, [r3, #2024]
 15019              	.LBE2716:
 15020              	.LBE2717:
 721:src/xeq.c     **** }
 15021              		.loc 1 721 2 view .LVU3946
 15022 00b0 1068     		ldr	r0, [r2]
 15023 00b2 2B40     		ands	r3, r3, r5
 15024 00b4 B3F5804F 		cmp	r3, #16384
 15025 00b8 0CBF     		ite	eq
 15026 00ba 1022     		moveq	r2, #16
 15027              	.LVL1080:
 721:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 429


 15028              		.loc 1 721 2 view .LVU3947
 15029 00bc 0822     		movne	r2, #8
 15030 00be 02A9     		add	r1, sp, #8
 15031              	.LVL1081:
 721:src/xeq.c     **** }
 15032              		.loc 1 721 2 view .LVU3948
 15033 00c0 FFF7FEFF 		bl	xcopy
 15034              	.LVL1082:
 721:src/xeq.c     **** }
 15035              		.loc 1 721 2 view .LVU3949
 15036              	.LBE2718:
 15037              	.LBE2719:
1830:src/xeq.c     **** 	} else {
 15038              		.loc 1 1830 3 is_stmt 1 view .LVU3950
 15039 00c4 6520     		movs	r0, #101
 15040 00c6 FFF7FEFF 		bl	get_reg_n
 15041              	.LVL1083:
 15042              	.LBB2720:
 15043              	.LBI2720:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15044              		.loc 1 720 6 view .LVU3951
 15045              	.LBB2721:
 721:src/xeq.c     **** }
 15046              		.loc 1 721 2 view .LVU3952
 15047              	.LBB2722:
 15048              	.LBI2722:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15049              		.loc 1 1100 5 view .LVU3953
 15050              	.LBB2723:
1101:src/xeq.c     **** }
 15051              		.loc 1 1101 2 view .LVU3954
1101:src/xeq.c     **** }
 15052              		.loc 1 1101 24 is_stmt 0 view .LVU3955
 15053 00ca 3368     		ldr	r3, [r6]
 15054 00cc B3F8E837 		ldrh	r3, [r3, #2024]
 15055              	.LBE2723:
 15056              	.LBE2722:
 721:src/xeq.c     **** }
 15057              		.loc 1 721 2 view .LVU3956
 15058 00d0 1D40     		ands	r5, r5, r3
 15059 00d2 B5F5804F 		cmp	r5, #16384
 15060 00d6 0BA9     		add	r1, sp, #44
 15061              	.LVL1084:
 721:src/xeq.c     **** }
 15062              		.loc 1 721 2 view .LVU3957
 15063 00d8 0CBF     		ite	eq
 15064 00da 1022     		moveq	r2, #16
 15065 00dc 0822     		movne	r2, #8
 15066 00de FFF7FEFF 		bl	xcopy
 15067              	.LVL1085:
 721:src/xeq.c     **** }
 15068              		.loc 1 721 2 view .LVU3958
 15069 00e2 3368     		ldr	r3, [r6]
 15070              	.LBE2721:
 15071              	.LBE2720:
 15072              	.LBE2691:
 15073 00e4 9CE7     		b	.L1054
ARM GAS  /tmp/ccaPnj5t.s 			page 430


 15074              	.L1056:
1837:src/xeq.c     **** 			setXY(&r1, &r2);
 15075              		.loc 1 1837 4 is_stmt 1 view .LVU3959
 15076 00e6 FFF7FEFF 		bl	setlastXY
 15077              	.LVL1086:
1838:src/xeq.c     **** 		}
 15078              		.loc 1 1838 4 view .LVU3960
 15079 00ea 0BA9     		add	r1, sp, #44
 15080 00ec 02A8     		add	r0, sp, #8
 15081 00ee FFF7FEFF 		bl	setXY
 15082              	.LVL1087:
 15083              	.L1063:
 15084 00f2 2B68     		ldr	r3, [r5]
 15085 00f4 94E7     		b	.L1054
 15086              	.L1066:
 15087 00f6 00BF     		.align	2
 15088              	.L1065:
 15089 00f8 00000000 		.word	main_ram
 15090 00fc 00000000 		.word	Error
 15091 0100 00000000 		.word	StateWhileOn
 15092 0104 00000000 		.word	StackBase
 15093              	.LBE2726:
 15094              	.LBE2729:
 15095              		.cfi_endproc
 15096              	.LFE122:
 15098              		.section	.text.cmdircl,"ax",%progbits
 15099              		.align	1
 15100              		.p2align 2,,3
 15101              		.global	cmdircl
 15102              		.syntax unified
 15103              		.thumb
 15104              		.thumb_func
 15105              		.fpu fpv4-sp-d16
 15107              	cmdircl:
 15108              	.LVL1088:
 15109              	.LFB123:
1861:src/xeq.c     **** 	if (is_intmode())
 15110              		.loc 1 1861 46 view -0
 15111              		.cfi_startproc
 15112              		@ args = 0, pretend = 0, frame = 0
 15113              		@ frame_needed = 0, uses_anonymous_args = 0
 15114              		@ link register save eliminated.
1862:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15115              		.loc 1 1862 2 view .LVU3962
1862:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15116              		.loc 1 1862 6 is_stmt 0 view .LVU3963
 15117 0000 064B     		ldr	r3, .L1069
 15118 0002 1B68     		ldr	r3, [r3]
 15119 0004 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1862:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15120              		.loc 1 1862 5 view .LVU3964
 15121 0008 12F00102 		ands	r2, r2, #1
1861:src/xeq.c     **** 	if (is_intmode())
 15122              		.loc 1 1861 46 view .LVU3965
 15123 000c 0146     		mov	r1, r0
 15124              	.LVL1089:
1862:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
ARM GAS  /tmp/ccaPnj5t.s 			page 431


 15125              		.loc 1 1862 5 view .LVU3966
 15126 000e 02D0     		beq	.L1068
1863:src/xeq.c     **** 	else
 15127              		.loc 1 1863 3 is_stmt 1 view .LVU3967
 15128              	.LVL1090:
 15129              	.LBB2730:
 15130              	.LBI2730:
1753:src/xeq.c     **** 	do_rcl(arg, op);
 15131              		.loc 1 1753 6 view .LVU3968
 15132              	.LBB2731:
1754:src/xeq.c     **** }
 15133              		.loc 1 1754 2 view .LVU3969
 15134 0010 0A21     		movs	r1, #10
 15135 0012 FFF7FEBF 		b	do_rcl
 15136              	.LVL1091:
 15137              	.L1068:
1754:src/xeq.c     **** }
 15138              		.loc 1 1754 2 is_stmt 0 view .LVU3970
 15139              	.LBE2731:
 15140              	.LBE2730:
1865:src/xeq.c     **** }
 15141              		.loc 1 1865 3 is_stmt 1 view .LVU3971
 15142 0016 6420     		movs	r0, #100
 15143              	.LVL1092:
1865:src/xeq.c     **** }
 15144              		.loc 1 1865 3 is_stmt 0 view .LVU3972
 15145 0018 FFF7FEBF 		b	register_from_int
 15146              	.LVL1093:
 15147              	.L1070:
1865:src/xeq.c     **** }
 15148              		.loc 1 1865 3 view .LVU3973
 15149              		.align	2
 15150              	.L1069:
 15151 001c 00000000 		.word	main_ram
 15152              		.cfi_endproc
 15153              	.LFE123:
 15155              		.section	.text.cmdrrcl,"ax",%progbits
 15156              		.align	1
 15157              		.p2align 2,,3
 15158              		.global	cmdrrcl
 15159              		.syntax unified
 15160              		.thumb
 15161              		.thumb_func
 15162              		.fpu fpv4-sp-d16
 15164              	cmdrrcl:
 15165              	.LVL1094:
 15166              	.LFB124:
1869:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15167              		.loc 1 1869 46 is_stmt 1 view -0
 15168              		.cfi_startproc
 15169              		@ args = 0, pretend = 0, frame = 40
 15170              		@ frame_needed = 0, uses_anonymous_args = 0
1870:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15171              		.loc 1 1870 2 view .LVU3975
1869:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15172              		.loc 1 1869 46 is_stmt 0 view .LVU3976
 15173 0000 70B5     		push	{r4, r5, r6, lr}
ARM GAS  /tmp/ccaPnj5t.s 			page 432


 15174              		.cfi_def_cfa_offset 16
 15175              		.cfi_offset 4, -16
 15176              		.cfi_offset 5, -12
 15177              		.cfi_offset 6, -8
 15178              		.cfi_offset 14, -4
1870:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15179              		.loc 1 1870 22 view .LVU3977
 15180 0002 1F4C     		ldr	r4, .L1078
 15181 0004 2368     		ldr	r3, [r4]
1870:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15182              		.loc 1 1870 28 view .LVU3978
 15183 0006 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1871:src/xeq.c     **** 
 15184              		.loc 1 1871 26 view .LVU3979
 15185 000a 8029     		cmp	r1, #128
1869:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15186              		.loc 1 1869 46 view .LVU3980
 15187 000c 8AB0     		sub	sp, sp, #40
 15188              		.cfi_def_cfa_offset 56
1870:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15189              		.loc 1 1870 28 view .LVU3981
 15190 000e C2F38015 		ubfx	r5, r2, #6, #1
 15191              	.LVL1095:
1871:src/xeq.c     **** 
 15192              		.loc 1 1871 2 is_stmt 1 view .LVU3982
1871:src/xeq.c     **** 
 15193              		.loc 1 1871 26 is_stmt 0 view .LVU3983
 15194 0012 0CBF     		ite	eq
 15195 0014 0121     		moveq	r1, #1
 15196              	.LVL1096:
1871:src/xeq.c     **** 
 15197              		.loc 1 1871 26 view .LVU3984
 15198 0016 0021     		movne	r1, #0
 15199              	.LVL1097:
1873:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15200              		.loc 1 1873 2 is_stmt 1 view .LVU3985
1873:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15201              		.loc 1 1873 5 is_stmt 0 view .LVU3986
 15202 0018 26D0     		beq	.L1076
 15203              	.LVL1098:
 15204              	.L1072:
1879:src/xeq.c     **** 	if (is_intmode()) {
 15205              		.loc 1 1879 2 is_stmt 1 view .LVU3987
1879:src/xeq.c     **** 	if (is_intmode()) {
 15206              		.loc 1 1879 21 is_stmt 0 view .LVU3988
 15207 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1880:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15208              		.loc 1 1880 6 view .LVU3989
 15209 001e 93F8E867 		ldrb	r6, [r3, #2024]	@ zero_extendqisi2
1879:src/xeq.c     **** 	if (is_intmode()) {
 15210              		.loc 1 1879 21 view .LVU3990
 15211 0022 61F38612 		bfi	r2, r1, #6, #1
 15212 0026 83F8E927 		strb	r2, [r3, #2025]
 15213              	.LVL1099:
1880:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15214              		.loc 1 1880 2 is_stmt 1 view .LVU3991
1880:src/xeq.c     **** 		int_from_register(regX_idx, arg);
ARM GAS  /tmp/ccaPnj5t.s 			page 433


 15215              		.loc 1 1880 5 is_stmt 0 view .LVU3992
 15216 002a F307     		lsls	r3, r6, #31
1881:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15217              		.loc 1 1881 3 view .LVU3993
 15218 002c 0146     		mov	r1, r0
 15219              	.LVL1100:
1880:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15220              		.loc 1 1880 5 view .LVU3994
 15221 002e 0FD4     		bmi	.L1077
 15222              	.LBB2739:
1885:src/xeq.c     **** 		getRegister(&x, arg);
 15223              		.loc 1 1885 3 is_stmt 1 view .LVU3995
1886:src/xeq.c     **** 
 15224              		.loc 1 1886 3 view .LVU3996
 15225 0030 01A8     		add	r0, sp, #4
 15226              	.LVL1101:
1886:src/xeq.c     **** 
 15227              		.loc 1 1886 3 is_stmt 0 view .LVU3997
 15228 0032 FFF7FEFF 		bl	getRegister
 15229              	.LVL1102:
1888:src/xeq.c     **** 		setX(&x);
 15230              		.loc 1 1888 3 is_stmt 1 view .LVU3998
1888:src/xeq.c     **** 		setX(&x);
 15231              		.loc 1 1888 22 is_stmt 0 view .LVU3999
 15232 0036 2368     		ldr	r3, [r4]
 15233 0038 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15234 003c 65F38612 		bfi	r2, r5, #6, #1
 15235              	.LBB2740:
 15236              	.LBB2741:
 823:src/xeq.c     **** }
 15237              		.loc 1 823 2 view .LVU4000
 15238 0040 01A9     		add	r1, sp, #4
 15239              	.LBE2741:
 15240              	.LBE2740:
1888:src/xeq.c     **** 		setX(&x);
 15241              		.loc 1 1888 22 view .LVU4001
 15242 0042 83F8E927 		strb	r2, [r3, #2025]
1889:src/xeq.c     **** 	}
 15243              		.loc 1 1889 3 is_stmt 1 view .LVU4002
 15244              	.LVL1103:
 15245              	.LBB2743:
 15246              	.LBI2740:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 15247              		.loc 1 822 6 view .LVU4003
 15248              	.LBB2742:
 823:src/xeq.c     **** }
 15249              		.loc 1 823 2 view .LVU4004
 15250 0046 6420     		movs	r0, #100
 15251 0048 FFF7FEFF 		bl	setRegister
 15252              	.LVL1104:
 15253              	.L1071:
 823:src/xeq.c     **** }
 15254              		.loc 1 823 2 is_stmt 0 view .LVU4005
 15255              	.LBE2742:
 15256              	.LBE2743:
 15257              	.LBE2739:
1891:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 434


 15258              		.loc 1 1891 1 view .LVU4006
 15259 004c 0AB0     		add	sp, sp, #40
 15260              		.cfi_remember_state
 15261              		.cfi_def_cfa_offset 16
 15262              		@ sp needed
 15263 004e 70BD     		pop	{r4, r5, r6, pc}
 15264              	.LVL1105:
 15265              	.L1077:
 15266              		.cfi_restore_state
1881:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15267              		.loc 1 1881 3 is_stmt 1 view .LVU4007
 15268 0050 6420     		movs	r0, #100
 15269              	.LVL1106:
1881:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15270              		.loc 1 1881 3 is_stmt 0 view .LVU4008
 15271 0052 FFF7FEFF 		bl	int_from_register
 15272              	.LVL1107:
1882:src/xeq.c     **** 	}
 15273              		.loc 1 1882 3 is_stmt 1 view .LVU4009
1882:src/xeq.c     **** 	}
 15274              		.loc 1 1882 22 is_stmt 0 view .LVU4010
 15275 0056 2368     		ldr	r3, [r4]
 15276 0058 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15277 005c 65F38612 		bfi	r2, r5, #6, #1
 15278 0060 83F8E927 		strb	r2, [r3, #2025]
1891:src/xeq.c     **** 
 15279              		.loc 1 1891 1 view .LVU4011
 15280 0064 0AB0     		add	sp, sp, #40
 15281              		.cfi_remember_state
 15282              		.cfi_def_cfa_offset 16
 15283              		@ sp needed
 15284 0066 70BD     		pop	{r4, r5, r6, pc}
 15285              	.LVL1108:
 15286              	.L1076:
 15287              		.cfi_restore_state
1873:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15288              		.loc 1 1873 14 discriminator 1 view .LVU4012
 15289 0068 A0F16402 		sub	r2, r0, #100
 15290              	.LVL1109:
1873:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15291              		.loc 1 1873 14 discriminator 1 view .LVU4013
 15292 006c 0B2A     		cmp	r2, #11
 15293 006e D4D8     		bhi	.L1072
1875:src/xeq.c     **** 		return;
 15294              		.loc 1 1875 3 is_stmt 1 view .LVU4014
 15295              	.LVL1110:
 15296              	.LBB2744:
 15297              	.LBI2744:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15298              		.loc 1 540 5 view .LVU4015
 15299              	.LBB2745:
 541:src/xeq.c     **** 		Error = e;
 15300              		.loc 1 541 2 view .LVU4016
 541:src/xeq.c     **** 		Error = e;
 15301              		.loc 1 541 12 is_stmt 0 view .LVU4017
 15302 0070 044B     		ldr	r3, .L1078+4
 15303              	.LVL1111:
ARM GAS  /tmp/ccaPnj5t.s 			page 435


 541:src/xeq.c     **** 		Error = e;
 15304              		.loc 1 541 5 view .LVU4018
 15305 0072 1A68     		ldr	r2, [r3]
 15306 0074 002A     		cmp	r2, #0
 15307 0076 E9D1     		bne	.L1071
 15308              	.LVL1112:
 15309              	.LBB2746:
 15310              	.LBI2746:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15311              		.loc 1 540 5 is_stmt 1 view .LVU4019
 15312              	.LBB2747:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 15313              		.loc 1 542 3 view .LVU4020
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 15314              		.loc 1 542 9 is_stmt 0 view .LVU4021
 15315 0078 0822     		movs	r2, #8
 15316 007a 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 15317              		.loc 1 543 3 is_stmt 1 view .LVU4022
 15318 007c E6E7     		b	.L1071
 15319              	.L1079:
 15320 007e 00BF     		.align	2
 15321              	.L1078:
 15322 0080 00000000 		.word	main_ram
 15323 0084 00000000 		.word	Error
 15324              	.LBE2747:
 15325              	.LBE2746:
 15326              	.LBE2745:
 15327              	.LBE2744:
 15328              		.cfi_endproc
 15329              	.LFE124:
 15331              		.section	.text.swap_reg,"ax",%progbits
 15332              		.align	1
 15333              		.p2align 2,,3
 15334              		.global	swap_reg
 15335              		.syntax unified
 15336              		.thumb
 15337              		.thumb_func
 15338              		.fpu fpv4-sp-d16
 15340              	swap_reg:
 15341              	.LVL1113:
 15342              	.LFB125:
1896:src/xeq.c     **** 	REGISTER t;
 15343              		.loc 1 1896 41 view -0
 15344              		.cfi_startproc
 15345              		@ args = 0, pretend = 0, frame = 16
 15346              		@ frame_needed = 0, uses_anonymous_args = 0
1897:src/xeq.c     **** 
 15347              		.loc 1 1897 2 view .LVU4024
1899:src/xeq.c     **** 	copyreg(a, b);
 15348              		.loc 1 1899 2 view .LVU4025
1896:src/xeq.c     **** 	REGISTER t;
 15349              		.loc 1 1896 41 is_stmt 0 view .LVU4026
 15350 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 15351              		.cfi_def_cfa_offset 20
 15352              		.cfi_offset 4, -20
 15353              		.cfi_offset 5, -16
ARM GAS  /tmp/ccaPnj5t.s 			page 436


 15354              		.cfi_offset 6, -12
 15355              		.cfi_offset 7, -8
 15356              		.cfi_offset 14, -4
 15357              	.LBB2748:
 15358              	.LBB2749:
 15359              	.LBB2750:
 15360              	.LBB2751:
1101:src/xeq.c     **** }
 15361              		.loc 1 1101 24 view .LVU4027
 15362 0002 174F     		ldr	r7, .L1088
 15363 0004 3B68     		ldr	r3, [r7]
 15364 0006 B3F8E837 		ldrh	r3, [r3, #2024]
 15365 000a 44F20104 		movw	r4, #16385
 15366              	.LBE2751:
 15367              	.LBE2750:
 721:src/xeq.c     **** }
 15368              		.loc 1 721 2 view .LVU4028
 15369 000e 2340     		ands	r3, r3, r4
 15370              	.LBE2749:
 15371              	.LBE2748:
1896:src/xeq.c     **** 	REGISTER t;
 15372              		.loc 1 1896 41 view .LVU4029
 15373 0010 85B0     		sub	sp, sp, #20
 15374              		.cfi_def_cfa_offset 40
 15375              	.LVL1114:
 15376              	.LBB2756:
 15377              	.LBB2754:
 721:src/xeq.c     **** }
 15378              		.loc 1 721 2 view .LVU4030
 15379 0012 B3F5804F 		cmp	r3, #16384
 15380 0016 0CBF     		ite	eq
 15381 0018 1022     		moveq	r2, #16
 15382 001a 0822     		movne	r2, #8
 15383              	.LBE2754:
 15384              	.LBE2756:
1896:src/xeq.c     **** 	REGISTER t;
 15385              		.loc 1 1896 41 view .LVU4031
 15386 001c 0D46     		mov	r5, r1
 15387 001e 0646     		mov	r6, r0
 15388              	.LVL1115:
 15389              	.LBB2757:
 15390              	.LBI2748:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15391              		.loc 1 720 6 is_stmt 1 view .LVU4032
 15392              	.LBB2755:
 721:src/xeq.c     **** }
 15393              		.loc 1 721 2 view .LVU4033
 15394              	.LBB2753:
 15395              	.LBI2750:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15396              		.loc 1 1100 5 view .LVU4034
 15397              	.LBB2752:
1101:src/xeq.c     **** }
 15398              		.loc 1 1101 2 view .LVU4035
 15399              	.LBE2752:
 15400              	.LBE2753:
 721:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 437


 15401              		.loc 1 721 2 is_stmt 0 view .LVU4036
 15402 0020 0146     		mov	r1, r0
 15403              	.LVL1116:
 721:src/xeq.c     **** }
 15404              		.loc 1 721 2 view .LVU4037
 15405 0022 6846     		mov	r0, sp
 15406              	.LVL1117:
 721:src/xeq.c     **** }
 15407              		.loc 1 721 2 view .LVU4038
 15408 0024 FFF7FEFF 		bl	xcopy
 15409              	.LVL1118:
 721:src/xeq.c     **** }
 15410              		.loc 1 721 2 view .LVU4039
 15411              	.LBE2755:
 15412              	.LBE2757:
1900:src/xeq.c     **** 	copyreg(b, &t);
 15413              		.loc 1 1900 2 is_stmt 1 view .LVU4040
 15414              	.LBB2758:
 15415              	.LBI2758:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15416              		.loc 1 720 6 view .LVU4041
 15417              	.LBB2759:
 721:src/xeq.c     **** }
 15418              		.loc 1 721 2 view .LVU4042
 15419              	.LBB2760:
 15420              	.LBI2760:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15421              		.loc 1 1100 5 view .LVU4043
 15422              	.LBB2761:
1101:src/xeq.c     **** }
 15423              		.loc 1 1101 2 view .LVU4044
1101:src/xeq.c     **** }
 15424              		.loc 1 1101 24 is_stmt 0 view .LVU4045
 15425 0028 3B68     		ldr	r3, [r7]
 15426 002a B3F8E837 		ldrh	r3, [r3, #2024]
 15427              	.LBE2761:
 15428              	.LBE2760:
 721:src/xeq.c     **** }
 15429              		.loc 1 721 2 view .LVU4046
 15430 002e 2340     		ands	r3, r3, r4
 15431 0030 B3F5804F 		cmp	r3, #16384
 15432 0034 0CBF     		ite	eq
 15433 0036 1022     		moveq	r2, #16
 15434 0038 0822     		movne	r2, #8
 15435 003a 2946     		mov	r1, r5
 15436 003c 3046     		mov	r0, r6
 15437 003e FFF7FEFF 		bl	xcopy
 15438              	.LVL1119:
 721:src/xeq.c     **** }
 15439              		.loc 1 721 2 view .LVU4047
 15440              	.LBE2759:
 15441              	.LBE2758:
1901:src/xeq.c     **** }
 15442              		.loc 1 1901 2 is_stmt 1 view .LVU4048
 15443              	.LBB2762:
 15444              	.LBI2762:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
ARM GAS  /tmp/ccaPnj5t.s 			page 438


 15445              		.loc 1 720 6 view .LVU4049
 15446              	.LBB2763:
 721:src/xeq.c     **** }
 15447              		.loc 1 721 2 view .LVU4050
 15448              	.LBB2764:
 15449              	.LBI2764:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15450              		.loc 1 1100 5 view .LVU4051
 15451              	.LBB2765:
1101:src/xeq.c     **** }
 15452              		.loc 1 1101 2 view .LVU4052
1101:src/xeq.c     **** }
 15453              		.loc 1 1101 24 is_stmt 0 view .LVU4053
 15454 0042 3B68     		ldr	r3, [r7]
 15455 0044 B3F8E837 		ldrh	r3, [r3, #2024]
 15456              	.LBE2765:
 15457              	.LBE2764:
 721:src/xeq.c     **** }
 15458              		.loc 1 721 2 view .LVU4054
 15459 0048 1C40     		ands	r4, r4, r3
 15460 004a B4F5804F 		cmp	r4, #16384
 15461 004e 2846     		mov	r0, r5
 15462 0050 6946     		mov	r1, sp
 15463 0052 0CBF     		ite	eq
 15464 0054 1022     		moveq	r2, #16
 15465 0056 0822     		movne	r2, #8
 15466 0058 FFF7FEFF 		bl	xcopy
 15467              	.LVL1120:
 721:src/xeq.c     **** }
 15468              		.loc 1 721 2 view .LVU4055
 15469              	.LBE2763:
 15470              	.LBE2762:
1902:src/xeq.c     **** 
 15471              		.loc 1 1902 1 view .LVU4056
 15472 005c 05B0     		add	sp, sp, #20
 15473              		.cfi_def_cfa_offset 20
 15474              		@ sp needed
 15475 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 15476              	.LVL1121:
 15477              	.L1089:
1902:src/xeq.c     **** 
 15478              		.loc 1 1902 1 view .LVU4057
 15479              		.align	2
 15480              	.L1088:
 15481 0060 00000000 		.word	main_ram
 15482              		.cfi_endproc
 15483              	.LFE125:
 15485              		.section	.text.cmdswap,"ax",%progbits
 15486              		.align	1
 15487              		.p2align 2,,3
 15488              		.global	cmdswap
 15489              		.syntax unified
 15490              		.thumb
 15491              		.thumb_func
 15492              		.fpu fpv4-sp-d16
 15494              	cmdswap:
 15495              	.LVL1122:
ARM GAS  /tmp/ccaPnj5t.s 			page 439


 15496              	.LFB126:
1904:src/xeq.c     **** 	int idx;
 15497              		.loc 1 1904 46 is_stmt 1 view -0
 15498              		.cfi_startproc
 15499              		@ args = 0, pretend = 0, frame = 0
 15500              		@ frame_needed = 0, uses_anonymous_args = 0
1905:src/xeq.c     **** 
 15501              		.loc 1 1905 2 view .LVU4059
1907:src/xeq.c     **** 		idx = regX_idx;
 15502              		.loc 1 1907 2 view .LVU4060
1907:src/xeq.c     **** 		idx = regX_idx;
 15503              		.loc 1 1907 5 is_stmt 0 view .LVU4061
 15504 0000 1F29     		cmp	r1, #31
1904:src/xeq.c     **** 	int idx;
 15505              		.loc 1 1904 46 view .LVU4062
 15506 0002 70B5     		push	{r4, r5, r6, lr}
 15507              		.cfi_def_cfa_offset 16
 15508              		.cfi_offset 4, -16
 15509              		.cfi_offset 5, -12
 15510              		.cfi_offset 6, -8
 15511              		.cfi_offset 14, -4
1904:src/xeq.c     **** 	int idx;
 15512              		.loc 1 1904 46 view .LVU4063
 15513 0004 0546     		mov	r5, r0
1907:src/xeq.c     **** 		idx = regX_idx;
 15514              		.loc 1 1907 5 view .LVU4064
 15515 0006 11D0     		beq	.L1091
1909:src/xeq.c     **** 		idx = regZ_idx;
 15516              		.loc 1 1909 10 view .LVU4065
 15517 0008 2029     		cmp	r1, #32
 15518 000a 0C46     		mov	r4, r1
1909:src/xeq.c     **** 		idx = regZ_idx;
 15519              		.loc 1 1909 7 is_stmt 1 view .LVU4066
1909:src/xeq.c     **** 		idx = regZ_idx;
 15520              		.loc 1 1909 10 is_stmt 0 view .LVU4067
 15521 000c 32D0     		beq	.L1092
1912:src/xeq.c     **** 
 15522              		.loc 1 1912 3 is_stmt 1 view .LVU4068
 15523              	.LVL1123:
1914:src/xeq.c     **** 
 15524              		.loc 1 1914 2 view .LVU4069
 15525 000e 01F15300 		add	r0, r1, #83
 15526              	.LVL1124:
1914:src/xeq.c     **** 
 15527              		.loc 1 1914 2 is_stmt 0 view .LVU4070
 15528 0012 FFF7FEFF 		bl	get_reg_n
 15529              	.LVL1125:
1914:src/xeq.c     **** 
 15530              		.loc 1 1914 2 view .LVU4071
 15531 0016 0646     		mov	r6, r0
 15532 0018 2846     		mov	r0, r5
 15533 001a FFF7FEFF 		bl	get_reg_n
 15534              	.LVL1126:
 15535 001e 0146     		mov	r1, r0
 15536 0020 3046     		mov	r0, r6
 15537 0022 FFF7FEFF 		bl	swap_reg
 15538              	.LVL1127:
ARM GAS  /tmp/ccaPnj5t.s 			page 440


1916:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15539              		.loc 1 1916 2 is_stmt 1 view .LVU4072
1916:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15540              		.loc 1 1916 5 is_stmt 0 view .LVU4073
 15541 0026 1E2C     		cmp	r4, #30
 15542 0028 31D8     		bhi	.L1096
1923:src/xeq.c     **** 
 15543              		.loc 1 1923 1 view .LVU4074
 15544 002a 70BD     		pop	{r4, r5, r6, pc}
 15545              	.LVL1128:
 15546              	.L1091:
1914:src/xeq.c     **** 
 15547              		.loc 1 1914 2 is_stmt 1 view .LVU4075
 15548 002c 6420     		movs	r0, #100
 15549              	.LVL1129:
1914:src/xeq.c     **** 
 15550              		.loc 1 1914 2 is_stmt 0 view .LVU4076
 15551 002e FFF7FEFF 		bl	get_reg_n
 15552              	.LVL1130:
1914:src/xeq.c     **** 
 15553              		.loc 1 1914 2 view .LVU4077
 15554 0032 0446     		mov	r4, r0
 15555 0034 2846     		mov	r0, r5
 15556 0036 FFF7FEFF 		bl	get_reg_n
 15557              	.LVL1131:
 15558 003a 0146     		mov	r1, r0
 15559 003c 2046     		mov	r0, r4
 15560 003e FFF7FEFF 		bl	swap_reg
 15561              	.LVL1132:
1916:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15562              		.loc 1 1916 2 is_stmt 1 view .LVU4078
1914:src/xeq.c     **** 
 15563              		.loc 1 1914 2 is_stmt 0 view .LVU4079
 15564 0042 6520     		movs	r0, #101
 15565              	.LVL1133:
 15566              	.L1094:
1917:src/xeq.c     **** 		set_was_complex();
 15567              		.loc 1 1917 3 is_stmt 1 view .LVU4080
 15568 0044 FFF7FEFF 		bl	get_reg_n
 15569              	.LVL1134:
 15570 0048 0446     		mov	r4, r0
 15571 004a 681C     		adds	r0, r5, #1
 15572 004c FFF7FEFF 		bl	get_reg_n
 15573              	.LVL1135:
 15574 0050 0146     		mov	r1, r0
 15575 0052 2046     		mov	r0, r4
 15576 0054 FFF7FEFF 		bl	swap_reg
 15577              	.LVL1136:
1918:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 15578              		.loc 1 1918 3 view .LVU4081
 15579              	.LBB2766:
 15580              	.LBI2766:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 15581              		.loc 1 533 13 view .LVU4082
 15582              	.LBB2767:
 534:src/xeq.c     **** }
 15583              		.loc 1 534 2 view .LVU4083
ARM GAS  /tmp/ccaPnj5t.s 			page 441


 534:src/xeq.c     **** }
 15584              		.loc 1 534 20 is_stmt 0 view .LVU4084
 15585 0058 0E4B     		ldr	r3, .L1097
 15586              	.LBE2767:
 15587              	.LBE2766:
1920:src/xeq.c     **** #endif
 15588              		.loc 1 1920 2 view .LVU4085
 15589 005a 0F4A     		ldr	r2, .L1097+4
 15590              	.LBB2770:
 15591              	.LBB2768:
 534:src/xeq.c     **** }
 15592              		.loc 1 534 20 view .LVU4086
 15593 005c 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 15594              	.LBE2768:
 15595              	.LBE2770:
1920:src/xeq.c     **** #endif
 15596              		.loc 1 1920 2 view .LVU4087
 15597 005e 1268     		ldr	r2, [r2]
 15598              	.LBB2771:
 15599              	.LBB2769:
 534:src/xeq.c     **** }
 15600              		.loc 1 534 20 view .LVU4088
 15601 0060 0120     		movs	r0, #1
 15602 0062 60F38711 		bfi	r1, r0, #6, #2
 15603 0066 1975     		strb	r1, [r3, #20]
 15604              	.LBE2769:
 15605              	.LBE2771:
1920:src/xeq.c     **** #endif
 15606              		.loc 1 1920 2 is_stmt 1 view .LVU4089
 15607 0068 92F8AD37 		ldrb	r3, [r2, #1965]	@ zero_extendqisi2
 15608 006c 0343     		orrs	r3, r3, r0
 15609 006e 82F8AD37 		strb	r3, [r2, #1965]
1923:src/xeq.c     **** 
 15610              		.loc 1 1923 1 is_stmt 0 view .LVU4090
 15611 0072 70BD     		pop	{r4, r5, r6, pc}
 15612              	.LVL1137:
 15613              	.L1092:
1914:src/xeq.c     **** 
 15614              		.loc 1 1914 2 is_stmt 1 view .LVU4091
 15615 0074 6620     		movs	r0, #102
 15616              	.LVL1138:
1914:src/xeq.c     **** 
 15617              		.loc 1 1914 2 is_stmt 0 view .LVU4092
 15618 0076 FFF7FEFF 		bl	get_reg_n
 15619              	.LVL1139:
1914:src/xeq.c     **** 
 15620              		.loc 1 1914 2 view .LVU4093
 15621 007a 0446     		mov	r4, r0
 15622 007c 2846     		mov	r0, r5
 15623 007e FFF7FEFF 		bl	get_reg_n
 15624              	.LVL1140:
 15625 0082 0146     		mov	r1, r0
 15626 0084 2046     		mov	r0, r4
 15627 0086 FFF7FEFF 		bl	swap_reg
 15628              	.LVL1141:
1916:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15629              		.loc 1 1916 2 is_stmt 1 view .LVU4094
ARM GAS  /tmp/ccaPnj5t.s 			page 442


1914:src/xeq.c     **** 
 15630              		.loc 1 1914 2 is_stmt 0 view .LVU4095
 15631 008a 6720     		movs	r0, #103
 15632 008c DAE7     		b	.L1094
 15633              	.LVL1142:
 15634              	.L1096:
1914:src/xeq.c     **** 
 15635              		.loc 1 1914 2 view .LVU4096
 15636 008e 04F15400 		add	r0, r4, #84
 15637 0092 D7E7     		b	.L1094
 15638              	.L1098:
 15639              		.align	2
 15640              	.L1097:
 15641 0094 00000000 		.word	StateWhileOn
 15642 0098 00000000 		.word	main_ram
 15643              		.cfi_endproc
 15644              	.LFE126:
 15646              		.section	.text.cmdview,"ax",%progbits
 15647              		.align	1
 15648              		.p2align 2,,3
 15649              		.global	cmdview
 15650              		.syntax unified
 15651              		.thumb
 15652              		.thumb_func
 15653              		.fpu fpv4-sp-d16
 15655              	cmdview:
 15656              	.LVL1143:
 15657              	.LFB127:
1928:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15658              		.loc 1 1928 46 is_stmt 1 view -0
 15659              		.cfi_startproc
 15660              		@ args = 0, pretend = 0, frame = 0
 15661              		@ frame_needed = 0, uses_anonymous_args = 0
1929:src/xeq.c     **** 
 15662              		.loc 1 1929 2 view .LVU4098
1928:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15663              		.loc 1 1928 46 is_stmt 0 view .LVU4099
 15664 0000 70B5     		push	{r4, r5, r6, lr}
 15665              		.cfi_def_cfa_offset 16
 15666              		.cfi_offset 4, -16
 15667              		.cfi_offset 5, -12
 15668              		.cfi_offset 6, -8
 15669              		.cfi_offset 14, -4
1931:src/xeq.c     **** 	ShowRegister = arg;
 15670              		.loc 1 1931 20 view .LVU4100
 15671 0002 134D     		ldr	r5, .L1105
1932:src/xeq.c     **** 	State2.disp_freeze = 0;
 15672              		.loc 1 1932 15 view .LVU4101
 15673 0004 134A     		ldr	r2, .L1105+4
1931:src/xeq.c     **** 	ShowRegister = arg;
 15674              		.loc 1 1931 20 view .LVU4102
 15675 0006 6B69     		ldr	r3, [r5, #20]
1932:src/xeq.c     **** 	State2.disp_freeze = 0;
 15676              		.loc 1 1932 15 view .LVU4103
 15677 0008 1060     		str	r0, [r2]
1928:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15678              		.loc 1 1928 46 view .LVU4104
ARM GAS  /tmp/ccaPnj5t.s 			page 443


 15679 000a 0E46     		mov	r6, r1
 15680              	.LVL1144:
1931:src/xeq.c     **** 	ShowRegister = arg;
 15681              		.loc 1 1931 2 is_stmt 1 view .LVU4105
1932:src/xeq.c     **** 	State2.disp_freeze = 0;
 15682              		.loc 1 1932 2 view .LVU4106
1933:src/xeq.c     **** 	display();
 15683              		.loc 1 1933 2 view .LVU4107
1929:src/xeq.c     **** 
 15684              		.loc 1 1929 41 is_stmt 0 view .LVU4108
 15685 000c A1F18C01 		sub	r1, #140
 15686              	.LVL1145:
1931:src/xeq.c     **** 	ShowRegister = arg;
 15687              		.loc 1 1931 20 view .LVU4109
 15688 0010 23F08053 		bic	r3, r3, #268435456
1929:src/xeq.c     **** 
 15689              		.loc 1 1929 41 view .LVU4110
 15690 0014 B1FA81F1 		clz	r1, r1
 15691 0018 4909     		lsrs	r1, r1, #5
1931:src/xeq.c     **** 	ShowRegister = arg;
 15692              		.loc 1 1931 20 view .LVU4111
 15693 001a 23F0C003 		bic	r3, r3, #192
 15694 001e 43EA8113 		orr	r3, r3, r1, lsl #6
1928:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15695              		.loc 1 1928 46 view .LVU4112
 15696 0022 0446     		mov	r4, r0
1931:src/xeq.c     **** 	ShowRegister = arg;
 15697              		.loc 1 1931 20 view .LVU4113
 15698 0024 6B61     		str	r3, [r5, #20]
1934:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
 15699              		.loc 1 1934 2 is_stmt 1 view .LVU4114
 15700 0026 FFF7FEFF 		bl	display
 15701              	.LVL1146:
1935:src/xeq.c     **** }
 15702              		.loc 1 1935 2 view .LVU4115
1935:src/xeq.c     **** }
 15703              		.loc 1 1935 40 is_stmt 0 view .LVU4116
 15704 002a 8C2E     		cmp	r6, #140
 15705 002c 02D0     		beq	.L1102
1935:src/xeq.c     **** }
 15706              		.loc 1 1935 29 discriminator 2 view .LVU4117
 15707 002e 0A4B     		ldr	r3, .L1105+8
 15708 0030 1B68     		ldr	r3, [r3]
 15709 0032 2BB1     		cbz	r3, .L1104
 15710              	.L1102:
1935:src/xeq.c     **** }
 15711              		.loc 1 1935 21 view .LVU4118
 15712 0034 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 15713 0036 0124     		movs	r4, #1
 15714              	.LVL1147:
1935:src/xeq.c     **** }
 15715              		.loc 1 1935 21 view .LVU4119
 15716 0038 64F30413 		bfi	r3, r4, #4, #1
 15717 003c EB75     		strb	r3, [r5, #23]
1936:src/xeq.c     **** 
 15718              		.loc 1 1936 1 view .LVU4120
 15719 003e 70BD     		pop	{r4, r5, r6, pc}
ARM GAS  /tmp/ccaPnj5t.s 			page 444


 15720              	.LVL1148:
 15721              	.L1104:
1935:src/xeq.c     **** }
 15722              		.loc 1 1935 21 discriminator 4 view .LVU4121
 15723 0040 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
1935:src/xeq.c     **** }
 15724              		.loc 1 1935 40 discriminator 4 view .LVU4122
 15725 0042 643C     		subs	r4, r4, #100
 15726              	.LVL1149:
1935:src/xeq.c     **** }
 15727              		.loc 1 1935 40 discriminator 4 view .LVU4123
 15728 0044 18BF     		it	ne
 15729 0046 0124     		movne	r4, #1
 15730              	.LVL1150:
1935:src/xeq.c     **** }
 15731              		.loc 1 1935 21 discriminator 4 view .LVU4124
 15732 0048 64F30413 		bfi	r3, r4, #4, #1
 15733 004c EB75     		strb	r3, [r5, #23]
1936:src/xeq.c     **** 
 15734              		.loc 1 1936 1 discriminator 4 view .LVU4125
 15735 004e 70BD     		pop	{r4, r5, r6, pc}
 15736              	.L1106:
 15737              		.align	2
 15738              	.L1105:
 15739 0050 00000000 		.word	StateWhileOn
 15740 0054 00000000 		.word	ShowRegister
 15741 0058 00000000 		.word	Running
 15742              		.cfi_endproc
 15743              	.LFE127:
 15745              		.section	.text.get_stack_size,"ax",%progbits
 15746              		.align	1
 15747              		.p2align 2,,3
 15748              		.global	get_stack_size
 15749              		.syntax unified
 15750              		.thumb
 15751              		.thumb_func
 15752              		.fpu fpv4-sp-d16
 15754              	get_stack_size:
 15755              	.LVL1151:
 15756              	.LFB128:
1940:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15757              		.loc 1 1940 36 is_stmt 1 view -0
 15758              		.cfi_startproc
 15759              		@ args = 0, pretend = 0, frame = 0
 15760              		@ frame_needed = 0, uses_anonymous_args = 0
1941:src/xeq.c     **** }
 15761              		.loc 1 1941 2 view .LVU4127
 15762              	.LBB2772:
 15763              	.LBI2772:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 15764              		.loc 1 706 5 view .LVU4128
 15765              	.LBB2773:
 707:src/xeq.c     **** 		return 4;
 15766              		.loc 1 707 2 view .LVU4129
 707:src/xeq.c     **** 		return 4;
 15767              		.loc 1 707 8 is_stmt 0 view .LVU4130
 15768 0000 0F4B     		ldr	r3, .L1114
ARM GAS  /tmp/ccaPnj5t.s 			page 445


 15769              	.LBE2773:
 15770              	.LBE2772:
1940:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15771              		.loc 1 1940 36 view .LVU4131
 15772 0002 00B5     		push	{lr}
 15773              		.cfi_def_cfa_offset 4
 15774              		.cfi_offset 14, -4
 15775              	.LBB2779:
 15776              	.LBB2776:
 707:src/xeq.c     **** 		return 4;
 15777              		.loc 1 707 8 view .LVU4132
 15778 0004 1B68     		ldr	r3, [r3]
 707:src/xeq.c     **** 		return 4;
 15779              		.loc 1 707 6 view .LVU4133
 15780 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 15781              		.loc 1 707 5 view .LVU4134
 15782 000a 1207     		lsls	r2, r2, #28
 15783              	.LBE2776:
 15784              	.LBE2779:
1940:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15785              		.loc 1 1940 36 view .LVU4135
 15786 000c 83B0     		sub	sp, sp, #12
 15787              		.cfi_def_cfa_offset 16
 15788              	.LBB2780:
 15789              	.LBB2777:
 707:src/xeq.c     **** 		return 4;
 15790              		.loc 1 707 5 view .LVU4136
 15791 000e 13D5     		bpl	.L1109
 15792              	.LBB2774:
 15793              	.LBI2774:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 15794              		.loc 1 185 5 is_stmt 1 view .LVU4137
 15795              	.LBB2775:
 186:src/xeq.c     **** }
 15796              		.loc 1 186 2 view .LVU4138
 186:src/xeq.c     **** }
 15797              		.loc 1 186 9 is_stmt 0 view .LVU4139
 15798 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 15799              	.LBE2775:
 15800              	.LBE2774:
 707:src/xeq.c     **** 		return 4;
 15801              		.loc 1 707 27 view .LVU4140
 15802 0014 9B0B     		lsrs	r3, r3, #14
 15803 0016 032B     		cmp	r3, #3
 15804 0018 09D0     		beq	.L1113
 15805              	.L1111:
 15806 001a 0822     		movs	r2, #8
 15807 001c 0023     		movs	r3, #0
 15808              	.L1108:
 15809              	.LVL1152:
 707:src/xeq.c     **** 		return 4;
 15810              		.loc 1 707 27 view .LVU4141
 15811              	.LBE2777:
 15812              	.LBE2780:
 15813              	.LBB2781:
 15814              	.LBI2781:
ARM GAS  /tmp/ccaPnj5t.s 			page 446


1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15815              		.loc 1 1491 6 is_stmt 1 view .LVU4142
 15816              	.LBB2782:
1492:src/xeq.c     **** }
 15817              		.loc 1 1492 2 view .LVU4143
 15818 001e 0021     		movs	r1, #0
 15819 0020 0091     		str	r1, [sp]
 15820 0022 6420     		movs	r0, #100
 15821              	.LVL1153:
1492:src/xeq.c     **** }
 15822              		.loc 1 1492 2 is_stmt 0 view .LVU4144
 15823 0024 FFF7FEFF 		bl	set_reg_n_int_sgn
 15824              	.LVL1154:
1492:src/xeq.c     **** }
 15825              		.loc 1 1492 2 view .LVU4145
 15826              	.LBE2782:
 15827              	.LBE2781:
1942:src/xeq.c     **** 
 15828              		.loc 1 1942 1 view .LVU4146
 15829 0028 03B0     		add	sp, sp, #12
 15830              		.cfi_remember_state
 15831              		.cfi_def_cfa_offset 4
 15832              		@ sp needed
 15833 002a 5DF804FB 		ldr	pc, [sp], #4
 15834              	.LVL1155:
 15835              	.L1113:
 15836              		.cfi_restore_state
 15837              	.LBB2783:
 15838              	.LBB2778:
 707:src/xeq.c     **** 		return 4;
 15839              		.loc 1 707 44 view .LVU4147
 15840 002e 054B     		ldr	r3, .L1114+4
 707:src/xeq.c     **** 		return 4;
 15841              		.loc 1 707 41 view .LVU4148
 15842 0030 93F90130 		ldrsb	r3, [r3, #1]
 15843 0034 002B     		cmp	r3, #0
 15844 0036 F0DB     		blt	.L1111
 15845              	.L1109:
 15846 0038 0422     		movs	r2, #4
 15847 003a 0023     		movs	r3, #0
 15848 003c EFE7     		b	.L1108
 15849              	.L1115:
 15850 003e 00BF     		.align	2
 15851              	.L1114:
 15852 0040 00000000 		.word	main_ram
 15853 0044 00000000 		.word	XromParams
 15854              	.LBE2778:
 15855              	.LBE2783:
 15856              		.cfi_endproc
 15857              	.LFE128:
 15859              		.section	.text.get_word_size,"ax",%progbits
 15860              		.align	1
 15861              		.p2align 2,,3
 15862              		.global	get_word_size
 15863              		.syntax unified
 15864              		.thumb
 15865              		.thumb_func
ARM GAS  /tmp/ccaPnj5t.s 			page 447


 15866              		.fpu fpv4-sp-d16
 15868              	get_word_size:
 15869              	.LVL1156:
 15870              	.LFB129:
1944:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15871              		.loc 1 1944 35 is_stmt 1 view -0
 15872              		.cfi_startproc
 15873              		@ args = 0, pretend = 0, frame = 0
 15874              		@ frame_needed = 0, uses_anonymous_args = 0
1945:src/xeq.c     **** }
 15875              		.loc 1 1945 2 view .LVU4150
1944:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15876              		.loc 1 1944 35 is_stmt 0 view .LVU4151
 15877 0000 00B5     		push	{lr}
 15878              		.cfi_def_cfa_offset 4
 15879              		.cfi_offset 14, -4
 15880 0002 83B0     		sub	sp, sp, #12
 15881              		.cfi_def_cfa_offset 16
1945:src/xeq.c     **** }
 15882              		.loc 1 1945 20 view .LVU4152
 15883 0004 FFF7FEFF 		bl	word_size
 15884              	.LVL1157:
 15885              	.LBB2784:
 15886              	.LBI2784:
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15887              		.loc 1 1491 6 is_stmt 1 view .LVU4153
 15888              	.LBB2785:
1492:src/xeq.c     **** }
 15889              		.loc 1 1492 2 view .LVU4154
 15890 0008 0021     		movs	r1, #0
 15891 000a 0246     		mov	r2, r0
 15892 000c C317     		asrs	r3, r0, #31
 15893 000e 0091     		str	r1, [sp]
 15894 0010 6420     		movs	r0, #100
 15895              	.LVL1158:
1492:src/xeq.c     **** }
 15896              		.loc 1 1492 2 is_stmt 0 view .LVU4155
 15897 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 15898              	.LVL1159:
1492:src/xeq.c     **** }
 15899              		.loc 1 1492 2 view .LVU4156
 15900              	.LBE2785:
 15901              	.LBE2784:
1946:src/xeq.c     **** 
 15902              		.loc 1 1946 1 view .LVU4157
 15903 0016 03B0     		add	sp, sp, #12
 15904              		.cfi_def_cfa_offset 4
 15905              		@ sp needed
 15906 0018 5DF804FB 		ldr	pc, [sp], #4
 15907              		.cfi_endproc
 15908              	.LFE129:
 15910              		.section	.text.get_sign_mode,"ax",%progbits
 15911              		.align	1
 15912              		.p2align 2,,3
 15913              		.global	get_sign_mode
 15914              		.syntax unified
 15915              		.thumb
ARM GAS  /tmp/ccaPnj5t.s 			page 448


 15916              		.thumb_func
 15917              		.fpu fpv4-sp-d16
 15919              	get_sign_mode:
 15920              	.LVL1160:
 15921              	.LFB130:
1948:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15922              		.loc 1 1948 35 is_stmt 1 view -0
 15923              		.cfi_startproc
 15924              		@ args = 0, pretend = 0, frame = 0
 15925              		@ frame_needed = 0, uses_anonymous_args = 0
1949:src/xeq.c     **** 		0x02,		// 2's complement
 15926              		.loc 1 1949 2 view .LVU4159
1955:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15927              		.loc 1 1955 2 view .LVU4160
1948:src/xeq.c     **** 	static const unsigned char modes[4] = {
 15928              		.loc 1 1948 35 is_stmt 0 view .LVU4161
 15929 0000 00B5     		push	{lr}
 15930              		.cfi_def_cfa_offset 4
 15931              		.cfi_offset 14, -4
 15932 0002 83B0     		sub	sp, sp, #12
 15933              		.cfi_def_cfa_offset 16
1955:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15934              		.loc 1 1955 37 view .LVU4162
 15935 0004 FFF7FEFF 		bl	int_mode
 15936              	.LVL1161:
1955:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 15937              		.loc 1 1955 22 view .LVU4163
 15938 0008 064B     		ldr	r3, .L1120
 15939 000a 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 15940              	.LVL1162:
1956:src/xeq.c     **** }
 15941              		.loc 1 1956 2 is_stmt 1 view .LVU4164
 15942              	.LBB2786:
 15943              	.LBI2786:
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15944              		.loc 1 1491 6 view .LVU4165
 15945              	.LBB2787:
1492:src/xeq.c     **** }
 15946              		.loc 1 1492 2 view .LVU4166
 15947              	.LBE2787:
 15948              	.LBE2786:
1956:src/xeq.c     **** }
 15949              		.loc 1 1956 2 is_stmt 0 view .LVU4167
 15950 000c 03F00302 		and	r2, r3, #3
 15951 0010 03F08003 		and	r3, r3, #128
 15952              	.LVL1163:
1956:src/xeq.c     **** }
 15953              		.loc 1 1956 2 view .LVU4168
 15954 0014 0093     		str	r3, [sp]
 15955              	.LBB2789:
 15956              	.LBB2788:
1492:src/xeq.c     **** }
 15957              		.loc 1 1492 2 view .LVU4169
 15958 0016 6420     		movs	r0, #100
 15959              	.LVL1164:
1492:src/xeq.c     **** }
 15960              		.loc 1 1492 2 view .LVU4170
ARM GAS  /tmp/ccaPnj5t.s 			page 449


 15961 0018 0023     		movs	r3, #0
 15962 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 15963              	.LVL1165:
1492:src/xeq.c     **** }
 15964              		.loc 1 1492 2 view .LVU4171
 15965              	.LBE2788:
 15966              	.LBE2789:
1957:src/xeq.c     **** 
 15967              		.loc 1 1957 1 view .LVU4172
 15968 001e 03B0     		add	sp, sp, #12
 15969              		.cfi_def_cfa_offset 4
 15970              		@ sp needed
 15971 0020 5DF804FB 		ldr	pc, [sp], #4
 15972              	.L1121:
 15973              		.align	2
 15974              	.L1120:
 15975 0024 00000000 		.word	.LANCHOR4
 15976              		.cfi_endproc
 15977              	.LFE130:
 15979              		.section	.text.get_base,"ax",%progbits
 15980              		.align	1
 15981              		.p2align 2,,3
 15982              		.global	get_base
 15983              		.syntax unified
 15984              		.thumb
 15985              		.thumb_func
 15986              		.fpu fpv4-sp-d16
 15988              	get_base:
 15989              	.LVL1166:
 15990              	.LFB131:
1959:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 15991              		.loc 1 1959 30 is_stmt 1 view -0
 15992              		.cfi_startproc
 15993              		@ args = 0, pretend = 0, frame = 0
 15994              		@ frame_needed = 0, uses_anonymous_args = 0
1960:src/xeq.c     **** }
 15995              		.loc 1 1960 2 view .LVU4174
1959:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 15996              		.loc 1 1959 30 is_stmt 0 view .LVU4175
 15997 0000 00B5     		push	{lr}
 15998              		.cfi_def_cfa_offset 4
 15999              		.cfi_offset 14, -4
 16000 0002 83B0     		sub	sp, sp, #12
 16001              		.cfi_def_cfa_offset 16
1960:src/xeq.c     **** }
 16002              		.loc 1 1960 20 view .LVU4176
 16003 0004 FFF7FEFF 		bl	int_base
 16004              	.LVL1167:
 16005              	.LBB2790:
 16006              	.LBI2790:
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16007              		.loc 1 1491 6 is_stmt 1 view .LVU4177
 16008              	.LBB2791:
1492:src/xeq.c     **** }
 16009              		.loc 1 1492 2 view .LVU4178
 16010 0008 0021     		movs	r1, #0
 16011 000a 0246     		mov	r2, r0
ARM GAS  /tmp/ccaPnj5t.s 			page 450


 16012 000c C317     		asrs	r3, r0, #31
 16013 000e 0091     		str	r1, [sp]
 16014 0010 6420     		movs	r0, #100
 16015              	.LVL1168:
1492:src/xeq.c     **** }
 16016              		.loc 1 1492 2 is_stmt 0 view .LVU4179
 16017 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 16018              	.LVL1169:
1492:src/xeq.c     **** }
 16019              		.loc 1 1492 2 view .LVU4180
 16020              	.LBE2791:
 16021              	.LBE2790:
1961:src/xeq.c     **** 
 16022              		.loc 1 1961 1 view .LVU4181
 16023 0016 03B0     		add	sp, sp, #12
 16024              		.cfi_def_cfa_offset 4
 16025              		@ sp needed
 16026 0018 5DF804FB 		ldr	pc, [sp], #4
 16027              		.cfi_endproc
 16028              	.LFE131:
 16030              		.section	.text.DM42_Ticker,"ax",%progbits
 16031              		.align	1
 16032              		.p2align 2,,3
 16033              		.global	DM42_Ticker
 16034              		.syntax unified
 16035              		.thumb
 16036              		.thumb_func
 16037              		.fpu fpv4-sp-d16
 16039              	DM42_Ticker:
 16040              	.LFB132:
1964:src/xeq.c     ****     long int f, t;
 16041              		.loc 1 1964 26 is_stmt 1 view -0
 16042              		.cfi_startproc
 16043              		@ args = 0, pretend = 0, frame = 0
 16044              		@ frame_needed = 0, uses_anonymous_args = 0
1965:src/xeq.c     ****     t = get_rtc_ticks();
 16045              		.loc 1 1965 5 view .LVU4183
1966:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16046              		.loc 1 1966 5 view .LVU4184
1964:src/xeq.c     ****     long int f, t;
 16047              		.loc 1 1964 26 is_stmt 0 view .LVU4185
 16048 0000 08B5     		push	{r3, lr}
 16049              		.cfi_def_cfa_offset 8
 16050              		.cfi_offset 3, -8
 16051              		.cfi_offset 14, -4
1966:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16052              		.loc 1 1966 9 view .LVU4186
 16053 0002 044B     		ldr	r3, .L1126
 16054 0004 9847     		blx	r3
 16055              	.LVL1170:
1967:src/xeq.c     ****     return f;
 16056              		.loc 1 1967 5 is_stmt 1 view .LVU4187
1968:src/xeq.c     ****  }
 16057              		.loc 1 1968 5 view .LVU4188
1967:src/xeq.c     ****     return f;
 16058              		.loc 1 1967 13 is_stmt 0 view .LVU4189
 16059 0006 C0F31300 		ubfx	r0, r0, #0, #20
ARM GAS  /tmp/ccaPnj5t.s 			page 451


 16060              	.LVL1171:
1967:src/xeq.c     ****     return f;
 16061              		.loc 1 1967 23 view .LVU4190
 16062 000a 00EB8000 		add	r0, r0, r0, lsl #2
1969:src/xeq.c     **** #endif
 16063              		.loc 1 1969 2 view .LVU4191
 16064 000e C009     		lsrs	r0, r0, #7
 16065 0010 08BD     		pop	{r3, pc}
 16066              	.L1127:
 16067 0012 00BF     		.align	2
 16068              	.L1126:
 16069 0014 B9040008 		.word	134218937
 16070              		.cfi_endproc
 16071              	.LFE132:
 16073              		.section	.text.op_ticks,"ax",%progbits
 16074              		.align	1
 16075              		.p2align 2,,3
 16076              		.global	op_ticks
 16077              		.syntax unified
 16078              		.thumb
 16079              		.thumb_func
 16080              		.fpu fpv4-sp-d16
 16082              	op_ticks:
 16083              	.LVL1172:
 16084              	.LFB133:
1972:src/xeq.c     **** #if !defined(CONSOLE)
 16085              		.loc 1 1972 30 is_stmt 1 view -0
 16086              		.cfi_startproc
 16087              		@ args = 0, pretend = 0, frame = 0
 16088              		@ frame_needed = 0, uses_anonymous_args = 0
1974:src/xeq.c     **** #else 
 16089              		.loc 1 1974 5 view .LVU4193
 16090              	.LBB2792:
 16091              	.LBI2792:
1964:src/xeq.c     ****     long int f, t;
 16092              		.loc 1 1964 11 view .LVU4194
 16093              	.LBB2793:
1965:src/xeq.c     ****     t = get_rtc_ticks();
 16094              		.loc 1 1965 5 view .LVU4195
1966:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16095              		.loc 1 1966 5 view .LVU4196
 16096              	.LBE2793:
 16097              	.LBE2792:
1972:src/xeq.c     **** #if !defined(CONSOLE)
 16098              		.loc 1 1972 30 is_stmt 0 view .LVU4197
 16099 0000 00B5     		push	{lr}
 16100              		.cfi_def_cfa_offset 4
 16101              		.cfi_offset 14, -4
 16102              	.LBB2797:
 16103              	.LBB2794:
1966:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16104              		.loc 1 1966 9 view .LVU4198
 16105 0002 084B     		ldr	r3, .L1130
 16106              	.LBE2794:
 16107              	.LBE2797:
1972:src/xeq.c     **** #if !defined(CONSOLE)
 16108              		.loc 1 1972 30 view .LVU4199
ARM GAS  /tmp/ccaPnj5t.s 			page 452


 16109 0004 83B0     		sub	sp, sp, #12
 16110              		.cfi_def_cfa_offset 16
 16111              	.LBB2798:
 16112              	.LBB2795:
1966:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16113              		.loc 1 1966 9 view .LVU4200
 16114 0006 9847     		blx	r3
 16115              	.LVL1173:
1967:src/xeq.c     ****     return f;
 16116              		.loc 1 1967 5 is_stmt 1 view .LVU4201
1968:src/xeq.c     ****  }
 16117              		.loc 1 1968 5 view .LVU4202
1968:src/xeq.c     ****  }
 16118              		.loc 1 1968 5 is_stmt 0 view .LVU4203
 16119              	.LBE2795:
 16120              	.LBE2798:
 16121              	.LBB2799:
 16122              	.LBI2799:
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16123              		.loc 1 1491 6 is_stmt 1 view .LVU4204
 16124              	.LBB2800:
1492:src/xeq.c     **** }
 16125              		.loc 1 1492 2 view .LVU4205
 16126              	.LBE2800:
 16127              	.LBE2799:
 16128              	.LBB2802:
 16129              	.LBB2796:
1967:src/xeq.c     ****     return f;
 16130              		.loc 1 1967 13 is_stmt 0 view .LVU4206
 16131 0008 C0F31300 		ubfx	r0, r0, #0, #20
 16132              	.LVL1174:
1967:src/xeq.c     ****     return f;
 16133              		.loc 1 1967 23 view .LVU4207
 16134 000c 00EB8000 		add	r0, r0, r0, lsl #2
1967:src/xeq.c     ****     return f;
 16135              		.loc 1 1967 7 view .LVU4208
 16136 0010 C209     		lsrs	r2, r0, #7
 16137              	.LBE2796:
 16138              	.LBE2802:
 16139              	.LBB2803:
 16140              	.LBB2801:
1492:src/xeq.c     **** }
 16141              		.loc 1 1492 2 view .LVU4209
 16142 0012 0021     		movs	r1, #0
 16143 0014 D317     		asrs	r3, r2, #31
 16144 0016 0091     		str	r1, [sp]
 16145 0018 6420     		movs	r0, #100
 16146 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 16147              	.LVL1175:
1492:src/xeq.c     **** }
 16148              		.loc 1 1492 2 view .LVU4210
 16149              	.LBE2801:
 16150              	.LBE2803:
1982:src/xeq.c     **** 
 16151              		.loc 1 1982 1 view .LVU4211
 16152 001e 03B0     		add	sp, sp, #12
 16153              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccaPnj5t.s 			page 453


 16154              		@ sp needed
 16155 0020 5DF804FB 		ldr	pc, [sp], #4
 16156              	.L1131:
 16157              		.align	2
 16158              	.L1130:
 16159 0024 B9040008 		.word	134218937
 16160              		.cfi_endproc
 16161              	.LFE133:
 16163              		.section	.text.op_voltage,"ax",%progbits
 16164              		.align	1
 16165              		.p2align 2,,3
 16166              		.global	op_voltage
 16167              		.syntax unified
 16168              		.thumb
 16169              		.thumb_func
 16170              		.fpu fpv4-sp-d16
 16172              	op_voltage:
 16173              	.LVL1176:
 16174              	.LFB134:
1985:src/xeq.c     **** 	decNumber t, u;
 16175              		.loc 1 1985 32 is_stmt 1 view -0
 16176              		.cfi_startproc
 16177              		@ args = 0, pretend = 0, frame = 72
 16178              		@ frame_needed = 0, uses_anonymous_args = 0
1986:src/xeq.c     **** #ifdef REALBUILD
 16179              		.loc 1 1986 2 view .LVU4213
1990:src/xeq.c     **** 	v = v / 100;
 16180              		.loc 1 1990 2 view .LVU4214
1985:src/xeq.c     **** 	decNumber t, u;
 16181              		.loc 1 1985 32 is_stmt 0 view .LVU4215
 16182 0000 00B5     		push	{lr}
 16183              		.cfi_def_cfa_offset 4
 16184              		.cfi_offset 14, -4
1990:src/xeq.c     **** 	v = v / 100;
 16185              		.loc 1 1990 10 view .LVU4216
 16186 0002 154B     		ldr	r3, .L1136
1985:src/xeq.c     **** 	decNumber t, u;
 16187              		.loc 1 1985 32 view .LVU4217
 16188 0004 95B0     		sub	sp, sp, #84
 16189              		.cfi_def_cfa_offset 88
1990:src/xeq.c     **** 	v = v / 100;
 16190              		.loc 1 1990 10 view .LVU4218
 16191 0006 9847     		blx	r3
 16192              	.LVL1177:
1996:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16193              		.loc 1 1996 6 view .LVU4219
 16194 0008 144B     		ldr	r3, .L1136+4
1991:src/xeq.c     **** #else
 16195              		.loc 1 1991 4 view .LVU4220
 16196 000a 154A     		ldr	r2, .L1136+8
1996:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16197              		.loc 1 1996 6 view .LVU4221
 16198 000c 1B68     		ldr	r3, [r3]
 16199              	.LVL1178:
1991:src/xeq.c     **** #else
 16200              		.loc 1 1991 2 is_stmt 1 view .LVU4222
1996:src/xeq.c     **** 		setX_int_sgn(v, 0);
ARM GAS  /tmp/ccaPnj5t.s 			page 454


 16201              		.loc 1 1996 6 is_stmt 0 view .LVU4223
 16202 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1991:src/xeq.c     **** #else
 16203              		.loc 1 1991 4 view .LVU4224
 16204 0012 82FB0012 		smull	r1, r2, r2, r0
1996:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16205              		.loc 1 1996 5 view .LVU4225
 16206 0016 DB07     		lsls	r3, r3, #31
1991:src/xeq.c     **** #else
 16207              		.loc 1 1991 4 view .LVU4226
 16208 0018 4FEAE070 		asr	r0, r0, #31
 16209              	.LVL1179:
1991:src/xeq.c     **** #else
 16210              		.loc 1 1991 4 view .LVU4227
 16211 001c C0EB6212 		rsb	r2, r0, r2, asr #5
 16212              	.LVL1180:
1996:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16213              		.loc 1 1996 2 is_stmt 1 view .LVU4228
1996:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16214              		.loc 1 1996 5 is_stmt 0 view .LVU4229
 16215 0020 08D5     		bpl	.L1133
1997:src/xeq.c     **** 	} else {
 16216              		.loc 1 1997 3 is_stmt 1 view .LVU4230
 16217              	.LVL1181:
 16218              	.LBB2804:
 16219              	.LBI2804:
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16220              		.loc 1 1491 6 view .LVU4231
 16221              	.LBB2805:
1492:src/xeq.c     **** }
 16222              		.loc 1 1492 2 view .LVU4232
 16223 0022 0023     		movs	r3, #0
 16224 0024 0093     		str	r3, [sp]
 16225 0026 6420     		movs	r0, #100
 16226 0028 D317     		asrs	r3, r2, #31
 16227 002a FFF7FEFF 		bl	set_reg_n_int_sgn
 16228              	.LVL1182:
1492:src/xeq.c     **** }
 16229              		.loc 1 1492 2 is_stmt 0 view .LVU4233
 16230              	.LBE2805:
 16231              	.LBE2804:
2003:src/xeq.c     **** 
 16232              		.loc 1 2003 1 view .LVU4234
 16233 002e 15B0     		add	sp, sp, #84
 16234              		.cfi_remember_state
 16235              		.cfi_def_cfa_offset 4
 16236              		@ sp needed
 16237 0030 5DF804FB 		ldr	pc, [sp], #4
 16238              	.LVL1183:
 16239              	.L1133:
 16240              		.cfi_restore_state
1999:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
 16241              		.loc 1 1999 3 is_stmt 1 view .LVU4235
 16242 0034 D317     		asrs	r3, r2, #31
 16243 0036 02A8     		add	r0, sp, #8
 16244 0038 FFF7FEFF 		bl	ullint_to_dn
 16245              	.LVL1184:
ARM GAS  /tmp/ccaPnj5t.s 			page 455


2000:src/xeq.c     **** 		setX(&u);
 16246              		.loc 1 2000 3 view .LVU4236
 16247 003c 02A9     		add	r1, sp, #8
 16248 003e 4FF0FF32 		mov	r2, #-1
 16249 0042 0BA8     		add	r0, sp, #44
 16250 0044 FFF7FEFF 		bl	dn_mulpow10
 16251              	.LVL1185:
2001:src/xeq.c     **** 	}
 16252              		.loc 1 2001 3 view .LVU4237
 16253              	.LBB2806:
 16254              	.LBI2806:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 16255              		.loc 1 822 6 view .LVU4238
 16256              	.LBB2807:
 823:src/xeq.c     **** }
 16257              		.loc 1 823 2 view .LVU4239
 16258 0048 0BA9     		add	r1, sp, #44
 16259              	.LVL1186:
 823:src/xeq.c     **** }
 16260              		.loc 1 823 2 is_stmt 0 view .LVU4240
 16261 004a 6420     		movs	r0, #100
 16262 004c FFF7FEFF 		bl	setRegister
 16263              	.LVL1187:
 823:src/xeq.c     **** }
 16264              		.loc 1 823 2 view .LVU4241
 16265              	.LBE2807:
 16266              	.LBE2806:
2003:src/xeq.c     **** 
 16267              		.loc 1 2003 1 view .LVU4242
 16268 0050 15B0     		add	sp, sp, #84
 16269              		.cfi_def_cfa_offset 4
 16270              		@ sp needed
 16271 0052 5DF804FB 		ldr	pc, [sp], #4
 16272              	.L1137:
 16273 0056 00BF     		.align	2
 16274              	.L1136:
 16275 0058 F1020008 		.word	134218481
 16276 005c 00000000 		.word	main_ram
 16277 0060 1F85EB51 		.word	1374389535
 16278              		.cfi_endproc
 16279              	.LFE134:
 16281              		.section	.text.free_mem,"ax",%progbits
 16282              		.align	1
 16283              		.p2align 2,,3
 16284              		.global	free_mem
 16285              		.syntax unified
 16286              		.thumb
 16287              		.thumb_func
 16288              		.fpu fpv4-sp-d16
 16290              	free_mem:
 16291              	.LFB135:
2008:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16292              		.loc 1 2008 20 is_stmt 1 view -0
 16293              		.cfi_startproc
 16294              		@ args = 0, pretend = 0, frame = 0
 16295              		@ frame_needed = 0, uses_anonymous_args = 0
 16296              		@ link register save eliminated.
ARM GAS  /tmp/ccaPnj5t.s 			page 456


2009:src/xeq.c     **** }
 16297              		.loc 1 2009 2 view .LVU4244
2009:src/xeq.c     **** }
 16298              		.loc 1 2009 22 is_stmt 0 view .LVU4245
 16299 0000 034A     		ldr	r2, .L1139
2009:src/xeq.c     **** }
 16300              		.loc 1 2009 20 view .LVU4246
 16301 0002 044B     		ldr	r3, .L1139+4
2009:src/xeq.c     **** }
 16302              		.loc 1 2009 22 view .LVU4247
 16303 0004 1268     		ldr	r2, [r2]
2009:src/xeq.c     **** }
 16304              		.loc 1 2009 20 view .LVU4248
 16305 0006 1B68     		ldr	r3, [r3]
2009:src/xeq.c     **** }
 16306              		.loc 1 2009 22 view .LVU4249
 16307 0008 B2F9E207 		ldrsh	r0, [r2, #2018]
2010:src/xeq.c     **** 
 16308              		.loc 1 2010 1 view .LVU4250
 16309 000c 1844     		add	r0, r0, r3
 16310 000e 7047     		bx	lr
 16311              	.L1140:
 16312              		.align	2
 16313              	.L1139:
 16314 0010 00000000 		.word	main_ram
 16315 0014 00000000 		.word	RetStkSize
 16316              		.cfi_endproc
 16317              	.LFE135:
 16319              		.section	.text.free_flash,"ax",%progbits
 16320              		.align	1
 16321              		.p2align 2,,3
 16322              		.global	free_flash
 16323              		.syntax unified
 16324              		.thumb
 16325              		.thumb_func
 16326              		.fpu fpv4-sp-d16
 16328              	free_flash:
 16329              	.LFB136:
2012:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16330              		.loc 1 2012 22 is_stmt 1 view -0
 16331              		.cfi_startproc
 16332              		@ args = 0, pretend = 0, frame = 0
 16333              		@ frame_needed = 0, uses_anonymous_args = 0
 16334              		@ link register save eliminated.
2013:src/xeq.c     **** }
 16335              		.loc 1 2013 2 view .LVU4252
2013:src/xeq.c     **** }
 16336              		.loc 1 2013 38 is_stmt 0 view .LVU4253
 16337 0000 034B     		ldr	r3, .L1142
 16338 0002 1B68     		ldr	r3, [r3]
 16339 0004 5888     		ldrh	r0, [r3, #2]
2014:src/xeq.c     **** 
 16340              		.loc 1 2014 1 view .LVU4254
 16341 0006 C0F5FF50 		rsb	r0, r0, #8160
 16342 000a 1E30     		adds	r0, r0, #30
 16343 000c 7047     		bx	lr
 16344              	.L1143:
ARM GAS  /tmp/ccaPnj5t.s 			page 457


 16345 000e 00BF     		.align	2
 16346              	.L1142:
 16347 0010 00000000 		.word	library_ram
 16348              		.cfi_endproc
 16349              	.LFE136:
 16351              		.section	.text.get_mem,"ax",%progbits
 16352              		.align	1
 16353              		.p2align 2,,3
 16354              		.global	get_mem
 16355              		.syntax unified
 16356              		.thumb
 16357              		.thumb_func
 16358              		.fpu fpv4-sp-d16
 16360              	get_mem:
 16361              	.LVL1188:
 16362              	.LFB137:
2016:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16363              		.loc 1 2016 29 is_stmt 1 view -0
 16364              		.cfi_startproc
 16365              		@ args = 0, pretend = 0, frame = 0
 16366              		@ frame_needed = 0, uses_anonymous_args = 0
2017:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16367              		.loc 1 2017 2 view .LVU4256
2016:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16368              		.loc 1 2016 29 is_stmt 0 view .LVU4257
 16369 0000 00B5     		push	{lr}
 16370              		.cfi_def_cfa_offset 4
 16371              		.cfi_offset 14, -4
2017:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16372              		.loc 1 2017 2 view .LVU4258
 16373 0002 A928     		cmp	r0, #169
2016:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16374              		.loc 1 2016 29 view .LVU4259
 16375 0004 83B0     		sub	sp, sp, #12
 16376              		.cfi_def_cfa_offset 16
2017:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16377              		.loc 1 2017 2 view .LVU4260
 16378 0006 23D0     		beq	.L1153
2017:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16379              		.loc 1 2017 2 discriminator 2 view .LVU4261
 16380 0008 AA28     		cmp	r0, #170
 16381 000a 18D0     		beq	.L1154
2017:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16382              		.loc 1 2017 2 discriminator 5 view .LVU4262
 16383 000c AC28     		cmp	r0, #172
 16384 000e 3CD0     		beq	.L1155
 16385              	.LBB2808:
 16386              	.LBI2808:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 16387              		.loc 1 253 14 is_stmt 1 view .LVU4263
 16388              	.LBE2808:
 254:src/xeq.c     **** }
 16389              		.loc 1 254 2 view .LVU4264
 16390              	.LVL1189:
 16391              	.LBB2817:
 16392              	.LBB2809:
 16393              	.LBI2809:
ARM GAS  /tmp/ccaPnj5t.s 			page 458


 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 16394              		.loc 1 241 14 view .LVU4265
 16395              	.LBB2810:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16396              		.loc 1 242 2 view .LVU4266
 16397              	.LBB2811:
 16398              	.LBI2811:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16399              		.loc 1 1100 5 view .LVU4267
 16400              	.LBB2812:
1101:src/xeq.c     **** }
 16401              		.loc 1 1101 2 view .LVU4268
1101:src/xeq.c     **** }
 16402              		.loc 1 1101 12 is_stmt 0 view .LVU4269
 16403 0010 224B     		ldr	r3, .L1157
 16404 0012 1A68     		ldr	r2, [r3]
1101:src/xeq.c     **** }
 16405              		.loc 1 1101 24 view .LVU4270
 16406 0014 B2F8E817 		ldrh	r1, [r2, #2024]
 16407              	.LBE2812:
 16408              	.LBE2811:
 16409              	.LBB2814:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16410              		.loc 1 243 24 view .LVU4271
 16411 0018 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 16412              	.LBE2814:
 16413              	.LBB2815:
 16414              	.LBB2813:
1101:src/xeq.c     **** }
 16415              		.loc 1 1101 24 view .LVU4272
 16416 001c 44F20103 		movw	r3, #16385
 16417              	.LBE2813:
 16418              	.LBE2815:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16419              		.loc 1 242 5 view .LVU4273
 16420 0020 0B40     		ands	r3, r3, r1
 16421 0022 B3F5804F 		cmp	r3, #16384
 16422              	.LBB2816:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16423              		.loc 1 243 3 is_stmt 1 view .LVU4274
 16424              	.LVL1190:
 244:src/xeq.c     **** 	}
 16425              		.loc 1 244 3 view .LVU4275
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16426              		.loc 1 243 13 is_stmt 0 view .LVU4276
 16427 0026 04BF     		itt	eq
 16428 0028 0C3A     		subeq	r2, r2, #12
 16429              	.LVL1191:
 244:src/xeq.c     **** 	}
 16430              		.loc 1 244 67 view .LVU4277
 16431 002a 5210     		asreq	r2, r2, #1
 16432              	.LBE2816:
 247:src/xeq.c     **** }
 16433              		.loc 1 247 3 is_stmt 1 view .LVU4278
 16434 002c 0023     		movs	r3, #0
 16435              	.LVL1192:
 16436              	.L1146:
ARM GAS  /tmp/ccaPnj5t.s 			page 459


 247:src/xeq.c     **** }
 16437              		.loc 1 247 3 is_stmt 0 view .LVU4279
 16438              	.LBE2810:
 16439              	.LBE2809:
 16440              	.LBE2817:
 16441              	.LBB2818:
 16442              	.LBI2818:
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16443              		.loc 1 1491 6 is_stmt 1 discriminator 10 view .LVU4280
 16444              	.LBB2819:
1492:src/xeq.c     **** }
 16445              		.loc 1 1492 2 discriminator 10 view .LVU4281
 16446 002e 0021     		movs	r1, #0
 16447 0030 0091     		str	r1, [sp]
 16448 0032 6420     		movs	r0, #100
 16449 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 16450              	.LVL1193:
1492:src/xeq.c     **** }
 16451              		.loc 1 1492 2 is_stmt 0 discriminator 10 view .LVU4282
 16452              	.LBE2819:
 16453              	.LBE2818:
2022:src/xeq.c     **** 
 16454              		.loc 1 2022 1 discriminator 10 view .LVU4283
 16455 0038 03B0     		add	sp, sp, #12
 16456              		.cfi_remember_state
 16457              		.cfi_def_cfa_offset 4
 16458              		@ sp needed
 16459 003a 5DF804FB 		ldr	pc, [sp], #4
 16460              	.LVL1194:
 16461              	.L1154:
 16462              		.cfi_restore_state
 16463              	.LBB2820:
 16464              	.LBI2820:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 16465              		.loc 1 233 5 is_stmt 1 view .LVU4284
 16466              	.LBE2820:
 234:src/xeq.c     **** }
 16467              		.loc 1 234 2 view .LVU4285
 16468              	.LBB2841:
 16469              	.LBB2821:
 16470              	.LBI2821:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 16471              		.loc 1 225 5 view .LVU4286
 16472              	.LBB2822:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16473              		.loc 1 226 2 view .LVU4287
 16474              	.LBB2823:
 16475              	.LBI2823:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16476              		.loc 1 1100 5 view .LVU4288
 16477              	.LBB2824:
1101:src/xeq.c     **** }
 16478              		.loc 1 1101 2 view .LVU4289
1101:src/xeq.c     **** }
 16479              		.loc 1 1101 12 is_stmt 0 view .LVU4290
 16480 003e 174B     		ldr	r3, .L1157
 16481 0040 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/ccaPnj5t.s 			page 460


 16482              	.LVL1195:
1101:src/xeq.c     **** }
 16483              		.loc 1 1101 12 view .LVU4291
 16484              	.LBE2824:
 16485              	.LBE2823:
 227:src/xeq.c     **** }
 16486              		.loc 1 227 2 is_stmt 1 view .LVU4292
 16487              	.LBB2827:
 16488              	.LBI2827:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 16489              		.loc 1 217 5 view .LVU4293
 16490              	.LBB2828:
 218:src/xeq.c     **** }
 16491              		.loc 1 218 2 view .LVU4294
 218:src/xeq.c     **** }
 16492              		.loc 1 218 9 is_stmt 0 view .LVU4295
 16493 0042 B3F9DE27 		ldrsh	r2, [r3, #2014]
 218:src/xeq.c     **** }
 16494              		.loc 1 218 57 view .LVU4296
 16495 0046 002A     		cmp	r2, #0
 16496 0048 0BDB     		blt	.L1156
 16497 004a 0022     		movs	r2, #0
 16498 004c 0023     		movs	r3, #0
 16499              	.LVL1196:
 218:src/xeq.c     **** }
 16500              		.loc 1 218 57 view .LVU4297
 16501 004e EEE7     		b	.L1146
 16502              	.LVL1197:
 16503              	.L1153:
 218:src/xeq.c     **** }
 16504              		.loc 1 218 57 view .LVU4298
 16505              	.LBE2828:
 16506              	.LBE2827:
 16507              	.LBE2822:
 16508              	.LBE2821:
 16509              	.LBE2841:
 16510              	.LBB2842:
 16511              	.LBI2842:
2008:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16512              		.loc 1 2008 5 is_stmt 1 view .LVU4299
 16513              	.LBB2843:
2009:src/xeq.c     **** }
 16514              		.loc 1 2009 2 view .LVU4300
2009:src/xeq.c     **** }
 16515              		.loc 1 2009 22 is_stmt 0 view .LVU4301
 16516 0050 124A     		ldr	r2, .L1157
2009:src/xeq.c     **** }
 16517              		.loc 1 2009 20 view .LVU4302
 16518 0052 134B     		ldr	r3, .L1157+4
2009:src/xeq.c     **** }
 16519              		.loc 1 2009 22 view .LVU4303
 16520 0054 1268     		ldr	r2, [r2]
2009:src/xeq.c     **** }
 16521              		.loc 1 2009 20 view .LVU4304
 16522 0056 1B68     		ldr	r3, [r3]
2009:src/xeq.c     **** }
 16523              		.loc 1 2009 22 view .LVU4305
ARM GAS  /tmp/ccaPnj5t.s 			page 461


 16524 0058 B2F9E227 		ldrsh	r2, [r2, #2018]
2009:src/xeq.c     **** }
 16525              		.loc 1 2009 20 view .LVU4306
 16526 005c 1A44     		add	r2, r2, r3
 16527 005e 0023     		movs	r3, #0
 16528              	.LBE2843:
 16529              	.LBE2842:
 16530 0060 E5E7     		b	.L1146
 16531              	.LVL1198:
 16532              	.L1156:
 16533              	.LBB2844:
 16534              	.LBB2840:
 16535              	.LBB2839:
 16536              	.LBB2833:
 16537              	.LBB2825:
1101:src/xeq.c     **** }
 16538              		.loc 1 1101 24 view .LVU4307
 16539 0062 B3F8E807 		ldrh	r0, [r3, #2024]
 16540              	.LVL1199:
1101:src/xeq.c     **** }
 16541              		.loc 1 1101 24 view .LVU4308
 16542              	.LBE2825:
 16543              	.LBE2833:
 16544              	.LBB2834:
 16545              	.LBB2829:
 218:src/xeq.c     **** }
 16546              		.loc 1 218 25 view .LVU4309
 16547 0066 0F49     		ldr	r1, .L1157+8
 16548              	.LBE2829:
 16549              	.LBE2834:
 16550              	.LBB2835:
 16551              	.LBB2826:
1101:src/xeq.c     **** }
 16552              		.loc 1 1101 24 view .LVU4310
 16553 0068 44F20103 		movw	r3, #16385
 16554              	.LVL1200:
1101:src/xeq.c     **** }
 16555              		.loc 1 1101 24 view .LVU4311
 16556              	.LBE2826:
 16557              	.LBE2835:
 16558              	.LBB2836:
 16559              	.LBB2830:
 218:src/xeq.c     **** }
 16560              		.loc 1 218 25 view .LVU4312
 16561 006c 0968     		ldr	r1, [r1]
 16562              	.LBE2830:
 16563              	.LBE2836:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16564              		.loc 1 226 73 view .LVU4313
 16565 006e 0340     		ands	r3, r3, r0
 16566 0070 A3F58043 		sub	r3, r3, #16384
 16567              	.LBB2837:
 16568              	.LBB2831:
 218:src/xeq.c     **** }
 16569              		.loc 1 218 57 view .LVU4314
 16570 0074 31F81220 		ldrh	r2, [r1, r2, lsl #1]
 16571              	.LBE2831:
ARM GAS  /tmp/ccaPnj5t.s 			page 462


 16572              	.LBE2837:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16573              		.loc 1 226 73 view .LVU4315
 16574 0078 B3FA83F3 		clz	r3, r3
 16575 007c 5B09     		lsrs	r3, r3, #5
 16576 007e 0233     		adds	r3, r3, #2
 16577              	.LBB2838:
 16578              	.LBB2832:
 218:src/xeq.c     **** }
 16579              		.loc 1 218 57 view .LVU4316
 16580 0080 C2F30B02 		ubfx	r2, r2, #0, #12
 16581 0084 1A41     		asrs	r2, r2, r3
 16582 0086 D317     		asrs	r3, r2, #31
 16583 0088 D1E7     		b	.L1146
 16584              	.LVL1201:
 16585              	.L1155:
 218:src/xeq.c     **** }
 16586              		.loc 1 218 57 view .LVU4317
 16587              	.LBE2832:
 16588              	.LBE2838:
 16589              	.LBE2839:
 16590              	.LBE2840:
 16591              	.LBE2844:
 16592              	.LBB2845:
 16593              	.LBI2845:
2012:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16594              		.loc 1 2012 5 is_stmt 1 view .LVU4318
 16595              	.LBB2846:
2013:src/xeq.c     **** }
 16596              		.loc 1 2013 2 view .LVU4319
2013:src/xeq.c     **** }
 16597              		.loc 1 2013 38 is_stmt 0 view .LVU4320
 16598 008a 074B     		ldr	r3, .L1157+12
 16599 008c 1B68     		ldr	r3, [r3]
 16600 008e 5A88     		ldrh	r2, [r3, #2]
2013:src/xeq.c     **** }
 16601              		.loc 1 2013 27 view .LVU4321
 16602 0090 C2F5FF52 		rsb	r2, r2, #8160
 16603 0094 1E32     		adds	r2, r2, #30
 16604 0096 0023     		movs	r3, #0
 16605              	.LBE2846:
 16606              	.LBE2845:
 16607 0098 C9E7     		b	.L1146
 16608              	.L1158:
 16609 009a 00BF     		.align	2
 16610              	.L1157:
 16611 009c 00000000 		.word	main_ram
 16612 00a0 00000000 		.word	RetStkSize
 16613 00a4 00000000 		.word	RetStk
 16614 00a8 00000000 		.word	library_ram
 16615              		.cfi_endproc
 16616              	.LFE137:
 16618              		.section	.text.cmdputkey,"ax",%progbits
 16619              		.align	1
 16620              		.p2align 2,,3
 16621              		.global	cmdputkey
 16622              		.syntax unified
ARM GAS  /tmp/ccaPnj5t.s 			page 463


 16623              		.thumb
 16624              		.thumb_func
 16625              		.fpu fpv4-sp-d16
 16627              	cmdputkey:
 16628              	.LVL1202:
 16629              	.LFB140:
2057:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16630              		.loc 1 2057 1 is_stmt 1 view -0
 16631              		.cfi_startproc
 16632              		@ args = 0, pretend = 0, frame = 0
 16633              		@ frame_needed = 0, uses_anonymous_args = 0
2058:src/xeq.c     **** 
 16634              		.loc 1 2058 2 view .LVU4323
2057:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16635              		.loc 1 2057 1 is_stmt 0 view .LVU4324
 16636 0000 10B5     		push	{r4, lr}
 16637              		.cfi_def_cfa_offset 8
 16638              		.cfi_offset 4, -8
 16639              		.cfi_offset 14, -4
2058:src/xeq.c     **** 
 16640              		.loc 1 2058 16 view .LVU4325
 16641 0002 FFF7FEFF 		bl	get_keycode_from_reg
 16642              	.LVL1203:
2060:src/xeq.c     **** 		set_running_off();
 16643              		.loc 1 2060 2 is_stmt 1 view .LVU4326
2060:src/xeq.c     **** 		set_running_off();
 16644              		.loc 1 2060 5 is_stmt 0 view .LVU4327
 16645 0006 041E     		subs	r4, r0, #0
 16646 0008 00DA     		bge	.L1162
2064:src/xeq.c     **** 
 16647              		.loc 1 2064 1 view .LVU4328
 16648 000a 10BD     		pop	{r4, pc}
 16649              	.L1162:
2061:src/xeq.c     **** 		put_key(c);
 16650              		.loc 1 2061 3 is_stmt 1 view .LVU4329
 16651              	.LBB2847:
 16652              	.LBI2847:
5789:src/xeq.c     **** 	set_running_off_sst();
 16653              		.loc 1 5789 6 view .LVU4330
 16654              	.LBB2848:
5790:src/xeq.c     **** 	State.entryp = 0;
 16655              		.loc 1 5790 2 view .LVU4331
 16656              	.LBB2849:
 16657              	.LBI2849:
5781:src/xeq.c     **** 	Running = 0;
 16658              		.loc 1 5781 6 view .LVU4332
 16659              	.LBB2850:
5782:src/xeq.c     **** }
 16660              		.loc 1 5782 2 view .LVU4333
 16661              	.LBE2850:
 16662              	.LBE2849:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 16663              		.loc 1 5791 15 is_stmt 0 view .LVU4334
 16664 000c 094B     		ldr	r3, .L1163
 16665              	.LBB2853:
 16666              	.LBB2851:
5782:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 464


 16667              		.loc 1 5782 10 view .LVU4335
 16668 000e 0A4A     		ldr	r2, .L1163+4
 16669              	.LBE2851:
 16670              	.LBE2853:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 16671              		.loc 1 5791 15 view .LVU4336
 16672 0010 1B68     		ldr	r3, [r3]
 16673              	.LBB2854:
 16674              	.LBB2852:
5782:src/xeq.c     **** }
 16675              		.loc 1 5782 10 view .LVU4337
 16676 0012 0021     		movs	r1, #0
 16677 0014 1160     		str	r1, [r2]
 16678              	.LBE2852:
 16679              	.LBE2854:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 16680              		.loc 1 5791 2 is_stmt 1 view .LVU4338
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 16681              		.loc 1 5791 15 is_stmt 0 view .LVU4339
 16682 0016 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 16683 001a 61F30412 		bfi	r2, r1, #4, #1
 16684              		.loc 1 5792 2 view .LVU4340
 16685 001e 8A20     		movs	r0, #138
 16686              	.LVL1204:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 16687              		.loc 1 5791 15 view .LVU4341
 16688 0020 83F8DD27 		strb	r2, [r3, #2013]
 16689              		.loc 1 5792 2 is_stmt 1 view .LVU4342
 16690 0024 FFF7FEFF 		bl	dot
 16691              	.LVL1205:
 16692              	.LBE2848:
 16693              	.LBE2847:
2062:src/xeq.c     **** 	}
 16694              		.loc 1 2062 3 view .LVU4343
 16695 0028 2046     		mov	r0, r4
2064:src/xeq.c     **** 
 16696              		.loc 1 2064 1 is_stmt 0 view .LVU4344
 16697 002a BDE81040 		pop	{r4, lr}
 16698              		.cfi_restore 14
 16699              		.cfi_restore 4
 16700              		.cfi_def_cfa_offset 0
 16701              	.LVL1206:
2062:src/xeq.c     **** 	}
 16702              		.loc 1 2062 3 view .LVU4345
 16703 002e FFF7FEBF 		b	put_key
 16704              	.LVL1207:
 16705              	.L1164:
2062:src/xeq.c     **** 	}
 16706              		.loc 1 2062 3 view .LVU4346
 16707 0032 00BF     		.align	2
 16708              	.L1163:
 16709 0034 00000000 		.word	main_ram
 16710 0038 00000000 		.word	Running
 16711              		.cfi_endproc
 16712              	.LFE140:
 16714              		.section	.text.cmdkeytype,"ax",%progbits
 16715              		.align	1
ARM GAS  /tmp/ccaPnj5t.s 			page 465


 16716              		.p2align 2,,3
 16717              		.global	cmdkeytype
 16718              		.syntax unified
 16719              		.thumb
 16720              		.thumb_func
 16721              		.fpu fpv4-sp-d16
 16723              	cmdkeytype:
 16724              	.LVL1208:
 16725              	.LFB141:
2072:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16726              		.loc 1 2072 1 is_stmt 1 view -0
 16727              		.cfi_startproc
 16728              		@ args = 0, pretend = 0, frame = 48
 16729              		@ frame_needed = 0, uses_anonymous_args = 0
2073:src/xeq.c     **** 	if ( c >= 0 ) {
 16730              		.loc 1 2073 2 view .LVU4348
2072:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16731              		.loc 1 2072 1 is_stmt 0 view .LVU4349
 16732 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 16733              		.cfi_def_cfa_offset 20
 16734              		.cfi_offset 4, -20
 16735              		.cfi_offset 5, -16
 16736              		.cfi_offset 6, -12
 16737              		.cfi_offset 7, -8
 16738              		.cfi_offset 14, -4
 16739 0002 8FB0     		sub	sp, sp, #60
 16740              		.cfi_def_cfa_offset 80
2073:src/xeq.c     **** 	if ( c >= 0 ) {
 16741              		.loc 1 2073 16 view .LVU4350
 16742 0004 FFF7FEFF 		bl	get_keycode_from_reg
 16743              	.LVL1209:
2074:src/xeq.c     **** 		const char types[] = {
 16744              		.loc 1 2074 2 is_stmt 1 view .LVU4351
2074:src/xeq.c     **** 		const char types[] = {
 16745              		.loc 1 2074 5 is_stmt 0 view .LVU4352
 16746 0008 061E     		subs	r6, r0, #0
 16747 000a 17DB     		blt	.L1165
 16748              	.LBB2855:
2075:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16749              		.loc 1 2075 3 is_stmt 1 view .LVU4353
2075:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16750              		.loc 1 2075 14 is_stmt 0 view .LVU4354
 16751 000c 0E4D     		ldr	r5, .L1173
 16752              	.LBB2856:
 16753              	.LBB2857:
 16754              	.LBB2858:
 16755              	.LBB2859:
 738:src/xeq.c     **** }
 16756              		.loc 1 738 15 view .LVU4355
 16757 000e 0F4F     		ldr	r7, .L1173+4
 16758              	.LBE2859:
 16759              	.LBE2858:
 16760              	.LBE2857:
 16761              	.LBE2856:
2075:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16762              		.loc 1 2075 14 view .LVU4356
 16763 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
ARM GAS  /tmp/ccaPnj5t.s 			page 466


 16764              	.LVL1210:
2075:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16765              		.loc 1 2075 14 view .LVU4357
 16766 0012 03AC     		add	r4, sp, #12
 16767 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16768 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16769 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16770 001a 95E80700 		ldm	r5, {r0, r1, r2}
 16771              	.LBB2868:
 16772              	.LBB2864:
 16773              	.LBB2862:
 16774              	.LBB2860:
 738:src/xeq.c     **** }
 16775              		.loc 1 738 15 view .LVU4358
 16776 001e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 16777              	.LBE2860:
 16778              	.LBE2862:
 16779              	.LBE2864:
 16780              	.LBE2868:
2075:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16781              		.loc 1 2075 14 view .LVU4359
 16782 0020 03C4     		stmia	r4!, {r0, r1}
 16783              	.LBB2869:
 16784              	.LBB2865:
 742:src/xeq.c     **** 		lift();
 16785              		.loc 1 742 5 view .LVU4360
 16786 0022 5B06     		lsls	r3, r3, #25
 16787              	.LBE2865:
 16788              	.LBE2869:
2075:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16789              		.loc 1 2075 14 view .LVU4361
 16790 0024 2270     		strb	r2, [r4]
2083:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
 16791              		.loc 1 2083 3 is_stmt 1 view .LVU4362
 16792              	.LBB2870:
 16793              	.LBI2856:
 741:src/xeq.c     **** 	if (get_lift())
 16794              		.loc 1 741 6 view .LVU4363
 16795              	.LBB2866:
 742:src/xeq.c     **** 		lift();
 16796              		.loc 1 742 2 view .LVU4364
 16797              	.LBB2863:
 16798              	.LBI2858:
 737:src/xeq.c     **** 	return State2.state_lift;
 16799              		.loc 1 737 12 view .LVU4365
 16800              	.LBB2861:
 738:src/xeq.c     **** }
 16801              		.loc 1 738 2 view .LVU4366
 16802              	.LBE2861:
 16803              	.LBE2863:
 742:src/xeq.c     **** 		lift();
 16804              		.loc 1 742 5 is_stmt 0 view .LVU4367
 16805 0026 0BD4     		bmi	.L1172
 16806              	.L1167:
 16807              	.LBE2866:
 16808              	.LBE2870:
2084:src/xeq.c     **** 	}
ARM GAS  /tmp/ccaPnj5t.s 			page 467


 16809              		.loc 1 2084 3 is_stmt 1 view .LVU4368
 16810              	.LVL1211:
 16811              	.LBB2871:
 16812              	.LBI2871:
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16813              		.loc 1 1491 6 view .LVU4369
 16814              	.LBB2872:
1492:src/xeq.c     **** }
 16815              		.loc 1 1492 2 view .LVU4370
 16816              	.LBE2872:
 16817              	.LBE2871:
2084:src/xeq.c     **** 	}
 16818              		.loc 1 2084 21 is_stmt 0 view .LVU4371
 16819 0028 0EAB     		add	r3, sp, #56
 16820 002a 9819     		adds	r0, r3, r6
 16821              	.LBB2874:
 16822              	.LBB2873:
1492:src/xeq.c     **** }
 16823              		.loc 1 1492 2 view .LVU4372
 16824 002c 0021     		movs	r1, #0
 16825 002e 10F82C2C 		ldrb	r2, [r0, #-44]	@ zero_extendqisi2
 16826 0032 0091     		str	r1, [sp]
 16827              	.LVL1212:
1492:src/xeq.c     **** }
 16828              		.loc 1 1492 2 view .LVU4373
 16829 0034 0023     		movs	r3, #0
 16830 0036 6420     		movs	r0, #100
 16831 0038 FFF7FEFF 		bl	set_reg_n_int_sgn
 16832              	.LVL1213:
 16833              	.L1165:
1492:src/xeq.c     **** }
 16834              		.loc 1 1492 2 view .LVU4374
 16835              	.LBE2873:
 16836              	.LBE2874:
 16837              	.LBE2855:
2086:src/xeq.c     **** 
 16838              		.loc 1 2086 1 view .LVU4375
 16839 003c 0FB0     		add	sp, sp, #60
 16840              		.cfi_remember_state
 16841              		.cfi_def_cfa_offset 20
 16842              		@ sp needed
 16843 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 16844              	.LVL1214:
 16845              	.L1172:
 16846              		.cfi_restore_state
 16847              	.LBB2876:
 16848              	.LBB2875:
 16849              	.LBB2867:
 743:src/xeq.c     **** }
 16850              		.loc 1 743 3 is_stmt 1 view .LVU4376
 16851 0040 FFF7FEFF 		bl	lift
 16852              	.LVL1215:
 16853 0044 F0E7     		b	.L1167
 16854              	.L1174:
 16855 0046 00BF     		.align	2
 16856              	.L1173:
 16857 0048 00000000 		.word	.LANCHOR5
ARM GAS  /tmp/ccaPnj5t.s 			page 468


 16858 004c 00000000 		.word	StateWhileOn
 16859              	.LBE2867:
 16860              	.LBE2875:
 16861              	.LBE2876:
 16862              		.cfi_endproc
 16863              	.LFE141:
 16865              		.section	.rodata.op_query_xtal.str1.4,"aMS",%progbits,1
 16866              		.align	2
 16867              	.LC2:
 16868 0000 74727565 		.ascii	"true\000"
 16868      00
 16869              		.section	.text.op_query_xtal,"ax",%progbits
 16870              		.align	1
 16871              		.p2align 2,,3
 16872              		.global	op_query_xtal
 16873              		.syntax unified
 16874              		.thumb
 16875              		.thumb_func
 16876              		.fpu fpv4-sp-d16
 16878              	op_query_xtal:
 16879              	.LVL1216:
 16880              	.LFB144:
2106:src/xeq.c     **** 	fin_tst(Xtal);
 16881              		.loc 1 2106 35 view -0
 16882              		.cfi_startproc
 16883              		@ args = 0, pretend = 0, frame = 0
 16884              		@ frame_needed = 0, uses_anonymous_args = 0
 16885              		@ link register save eliminated.
2107:src/xeq.c     **** }
 16886              		.loc 1 2107 2 view .LVU4378
 16887              	.LBB2877:
 16888              	.LBI2877:
2551:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 16889              		.loc 1 2551 6 view .LVU4379
 16890              	.LBB2878:
2552:src/xeq.c     **** 	if (Running || XromRunning) {
 16891              		.loc 1 2552 2 view .LVU4380
2553:src/xeq.c     **** 		if (! a && incpc())
 16892              		.loc 1 2553 2 view .LVU4381
2553:src/xeq.c     **** 		if (! a && incpc())
 16893              		.loc 1 2553 6 is_stmt 0 view .LVU4382
 16894 0000 044A     		ldr	r2, .L1177
2553:src/xeq.c     **** 		if (! a && incpc())
 16895              		.loc 1 2553 14 view .LVU4383
 16896 0002 054B     		ldr	r3, .L1177+4
 16897 0004 1268     		ldr	r2, [r2]
 16898 0006 1B68     		ldr	r3, [r3]
 16899 0008 1343     		orrs	r3, r2, r3
 16900 000a 02D1     		bne	.L1175
2558:src/xeq.c     **** #ifdef INFRARED
 16901              		.loc 1 2558 3 is_stmt 1 view .LVU4384
2558:src/xeq.c     **** #ifdef INFRARED
 16902              		.loc 1 2558 11 is_stmt 0 view .LVU4385
 16903 000c 034B     		ldr	r3, .L1177+8
 16904 000e 044A     		ldr	r2, .L1177+12
 16905 0010 1A60     		str	r2, [r3]
 16906              	.LVL1217:
ARM GAS  /tmp/ccaPnj5t.s 			page 469


 16907              	.L1175:
2558:src/xeq.c     **** #ifdef INFRARED
 16908              		.loc 1 2558 11 view .LVU4386
 16909              	.LBE2878:
 16910              	.LBE2877:
2108:src/xeq.c     **** 
 16911              		.loc 1 2108 1 view .LVU4387
 16912 0012 7047     		bx	lr
 16913              	.L1178:
 16914              		.align	2
 16915              	.L1177:
 16916 0014 00000000 		.word	Running
 16917 0018 00000000 		.word	XromRunning
 16918 001c 00000000 		.word	DispMsg
 16919 0020 00000000 		.word	.LC2
 16920              		.cfi_endproc
 16921              	.LFE144:
 16923              		.section	.rodata.op_query_print.str1.4,"aMS",%progbits,1
 16924              		.align	2
 16925              	.LC3:
 16926 0000 66616C73 		.ascii	"false\000"
 16926      6500
 16927              		.section	.text.op_query_print,"ax",%progbits
 16928              		.align	1
 16929              		.p2align 2,,3
 16930              		.global	op_query_print
 16931              		.syntax unified
 16932              		.thumb
 16933              		.thumb_func
 16934              		.fpu fpv4-sp-d16
 16936              	op_query_print:
 16937              	.LVL1218:
 16938              	.LFB145:
2110:src/xeq.c     **** #ifdef INFRARED
 16939              		.loc 1 2110 36 is_stmt 1 view -0
 16940              		.cfi_startproc
 16941              		@ args = 0, pretend = 0, frame = 0
 16942              		@ frame_needed = 0, uses_anonymous_args = 0
 16943              		@ link register save eliminated.
2114:src/xeq.c     **** #endif
 16944              		.loc 1 2114 2 view .LVU4389
 16945              	.LBB2879:
 16946              	.LBI2879:
2551:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 16947              		.loc 1 2551 6 view .LVU4390
 16948              	.LBB2880:
2552:src/xeq.c     **** 	if (Running || XromRunning) {
 16949              		.loc 1 2552 2 view .LVU4391
2553:src/xeq.c     **** 		if (! a && incpc())
 16950              		.loc 1 2553 2 view .LVU4392
2553:src/xeq.c     **** 		if (! a && incpc())
 16951              		.loc 1 2553 6 is_stmt 0 view .LVU4393
 16952 0000 054A     		ldr	r2, .L1182
2553:src/xeq.c     **** 		if (! a && incpc())
 16953              		.loc 1 2553 14 view .LVU4394
 16954 0002 064B     		ldr	r3, .L1182+4
 16955 0004 1268     		ldr	r2, [r2]
ARM GAS  /tmp/ccaPnj5t.s 			page 470


 16956 0006 1B68     		ldr	r3, [r3]
 16957 0008 1343     		orrs	r3, r2, r3
 16958 000a 03D1     		bne	.L1181
2558:src/xeq.c     **** #ifdef INFRARED
 16959              		.loc 1 2558 3 is_stmt 1 view .LVU4395
2558:src/xeq.c     **** #ifdef INFRARED
 16960              		.loc 1 2558 11 is_stmt 0 view .LVU4396
 16961 000c 044B     		ldr	r3, .L1182+8
 16962 000e 054A     		ldr	r2, .L1182+12
 16963 0010 1A60     		str	r2, [r3]
 16964              	.LVL1219:
2558:src/xeq.c     **** #ifdef INFRARED
 16965              		.loc 1 2558 11 view .LVU4397
 16966              	.LBE2880:
 16967              	.LBE2879:
2116:src/xeq.c     **** 
 16968              		.loc 1 2116 1 view .LVU4398
 16969 0012 7047     		bx	lr
 16970              	.LVL1220:
 16971              	.L1181:
 16972              	.LBB2882:
 16973              	.LBB2881:
2554:src/xeq.c     **** 			decpc();
 16974              		.loc 1 2554 3 is_stmt 1 view .LVU4399
 16975 0014 FFF7FEBF 		b	fin_tst.part.0
 16976              	.LVL1221:
 16977              	.L1183:
2554:src/xeq.c     **** 			decpc();
 16978              		.loc 1 2554 3 is_stmt 0 view .LVU4400
 16979              		.align	2
 16980              	.L1182:
 16981 0018 00000000 		.word	Running
 16982 001c 00000000 		.word	XromRunning
 16983 0020 00000000 		.word	DispMsg
 16984 0024 00000000 		.word	.LC3
 16985              	.LBE2881:
 16986              	.LBE2882:
 16987              		.cfi_endproc
 16988              	.LFE145:
 16990              		.section	.text.cmdstostk,"ax",%progbits
 16991              		.align	1
 16992              		.p2align 2,,3
 16993              		.global	cmdstostk
 16994              		.syntax unified
 16995              		.thumb
 16996              		.thumb_func
 16997              		.fpu fpv4-sp-d16
 16999              	cmdstostk:
 17000              	.LVL1222:
 17001              	.LFB147:
2129:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17002              		.loc 1 2129 48 is_stmt 1 view -0
 17003              		.cfi_startproc
 17004              		@ args = 0, pretend = 0, frame = 0
 17005              		@ frame_needed = 0, uses_anonymous_args = 0
2130:src/xeq.c     **** 
 17006              		.loc 1 2130 2 view .LVU4402
ARM GAS  /tmp/ccaPnj5t.s 			page 471


2129:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17007              		.loc 1 2129 48 is_stmt 0 view .LVU4403
 17008 0000 70B5     		push	{r4, r5, r6, lr}
 17009              		.cfi_def_cfa_offset 16
 17010              		.cfi_offset 4, -16
 17011              		.cfi_offset 5, -12
 17012              		.cfi_offset 6, -8
 17013              		.cfi_offset 14, -4
2129:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17014              		.loc 1 2129 48 view .LVU4404
 17015 0002 0546     		mov	r5, r0
2130:src/xeq.c     **** 
 17016              		.loc 1 2130 13 view .LVU4405
 17017 0004 FFF7FEFF 		bl	check_stack_overlap
 17018              	.LVL1223:
2132:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17019              		.loc 1 2132 2 is_stmt 1 view .LVU4406
2132:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17020              		.loc 1 2132 12 view .LVU4407
2132:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17021              		.loc 1 2132 2 is_stmt 0 view .LVU4408
 17022 0008 031E     		subs	r3, r0, #0
 17023 000a 0ADD     		ble	.L1184
 17024 000c 2C46     		mov	r4, r5
 17025 000e C4F16406 		rsb	r6, r4, #100
 17026 0012 1D44     		add	r5, r5, r3
 17027              	.LVL1224:
 17028              	.L1186:
2133:src/xeq.c     **** }
 17029              		.loc 1 2133 3 is_stmt 1 discriminator 3 view .LVU4409
 17030 0014 3119     		adds	r1, r6, r4
 17031 0016 2046     		mov	r0, r4
 17032 0018 0134     		adds	r4, r4, #1
 17033              	.LVL1225:
2133:src/xeq.c     **** }
 17034              		.loc 1 2133 3 is_stmt 0 discriminator 3 view .LVU4410
 17035 001a FFF7FEFF 		bl	copyreg_n
 17036              	.LVL1226:
2132:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17037              		.loc 1 2132 17 is_stmt 1 discriminator 3 view .LVU4411
2132:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17038              		.loc 1 2132 12 discriminator 3 view .LVU4412
2132:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17039              		.loc 1 2132 2 is_stmt 0 discriminator 3 view .LVU4413
 17040 001e AC42     		cmp	r4, r5
 17041 0020 F8D1     		bne	.L1186
 17042              	.L1184:
2134:src/xeq.c     **** 
 17043              		.loc 1 2134 1 view .LVU4414
 17044 0022 70BD     		pop	{r4, r5, r6, pc}
 17045              		.cfi_endproc
 17046              	.LFE147:
 17048              		.section	.text.cmdrclstk,"ax",%progbits
 17049              		.align	1
 17050              		.p2align 2,,3
 17051              		.global	cmdrclstk
 17052              		.syntax unified
ARM GAS  /tmp/ccaPnj5t.s 			page 472


 17053              		.thumb
 17054              		.thumb_func
 17055              		.fpu fpv4-sp-d16
 17057              	cmdrclstk:
 17058              	.LVL1227:
 17059              	.LFB148:
2136:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17060              		.loc 1 2136 48 is_stmt 1 view -0
 17061              		.cfi_startproc
 17062              		@ args = 0, pretend = 0, frame = 0
 17063              		@ frame_needed = 0, uses_anonymous_args = 0
2137:src/xeq.c     **** 
 17064              		.loc 1 2137 2 view .LVU4416
2136:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17065              		.loc 1 2136 48 is_stmt 0 view .LVU4417
 17066 0000 70B5     		push	{r4, r5, r6, lr}
 17067              		.cfi_def_cfa_offset 16
 17068              		.cfi_offset 4, -16
 17069              		.cfi_offset 5, -12
 17070              		.cfi_offset 6, -8
 17071              		.cfi_offset 14, -4
2136:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17072              		.loc 1 2136 48 view .LVU4418
 17073 0002 0646     		mov	r6, r0
2137:src/xeq.c     **** 
 17074              		.loc 1 2137 13 view .LVU4419
 17075 0004 FFF7FEFF 		bl	check_stack_overlap
 17076              	.LVL1228:
2139:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17077              		.loc 1 2139 2 is_stmt 1 view .LVU4420
2139:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17078              		.loc 1 2139 12 view .LVU4421
2139:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17079              		.loc 1 2139 2 is_stmt 0 view .LVU4422
 17080 0008 051E     		subs	r5, r0, #0
 17081 000a 09DD     		ble	.L1189
 17082 000c 6435     		adds	r5, r5, #100
 17083 000e 643E     		subs	r6, r6, #100
 17084              	.LVL1229:
2139:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17085              		.loc 1 2139 2 view .LVU4423
 17086 0010 6424     		movs	r4, #100
 17087              	.LVL1230:
 17088              	.L1191:
2140:src/xeq.c     **** }
 17089              		.loc 1 2140 3 is_stmt 1 discriminator 3 view .LVU4424
 17090 0012 3119     		adds	r1, r6, r4
 17091 0014 2046     		mov	r0, r4
 17092 0016 0134     		adds	r4, r4, #1
 17093              	.LVL1231:
2140:src/xeq.c     **** }
 17094              		.loc 1 2140 3 is_stmt 0 discriminator 3 view .LVU4425
 17095 0018 FFF7FEFF 		bl	copyreg_n
 17096              	.LVL1232:
2139:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17097              		.loc 1 2139 17 is_stmt 1 discriminator 3 view .LVU4426
2139:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
ARM GAS  /tmp/ccaPnj5t.s 			page 473


 17098              		.loc 1 2139 12 discriminator 3 view .LVU4427
2139:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17099              		.loc 1 2139 2 is_stmt 0 discriminator 3 view .LVU4428
 17100 001c AC42     		cmp	r4, r5
 17101 001e F8D1     		bne	.L1191
 17102              	.LVL1233:
 17103              	.L1189:
2141:src/xeq.c     **** 
 17104              		.loc 1 2141 1 view .LVU4429
 17105 0020 70BD     		pop	{r4, r5, r6, pc}
 17106              		.cfi_endproc
 17107              	.LFE148:
 17109 0022 00BF     		.section	.text.find_opcode_from,"ax",%progbits
 17110              		.align	1
 17111              		.p2align 2,,3
 17112              		.global	find_opcode_from
 17113              		.syntax unified
 17114              		.thumb
 17115              		.thumb_func
 17116              		.fpu fpv4-sp-d16
 17118              	find_opcode_from:
 17119              	.LVL1234:
 17120              	.LFB150:
2174:src/xeq.c     **** 	unsigned short int top;
 17121              		.loc 1 2174 81 is_stmt 1 view -0
 17122              		.cfi_startproc
 17123              		@ args = 0, pretend = 0, frame = 8
 17124              		@ frame_needed = 0, uses_anonymous_args = 0
2174:src/xeq.c     **** 	unsigned short int top;
 17125              		.loc 1 2174 81 is_stmt 0 view .LVU4431
 17126 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 17127              		.cfi_def_cfa_offset 24
 17128              		.cfi_offset 4, -24
 17129              		.cfi_offset 5, -20
 17130              		.cfi_offset 6, -16
 17131              		.cfi_offset 7, -12
 17132              		.cfi_offset 8, -8
 17133              		.cfi_offset 14, -4
2177:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17134              		.loc 1 2177 12 view .LVU4432
 17135 0004 02F00207 		and	r7, r2, #2
2174:src/xeq.c     **** 	unsigned short int top;
 17136              		.loc 1 2174 81 view .LVU4433
 17137 0008 82B0     		sub	sp, sp, #8
 17138              		.cfi_def_cfa_offset 32
2174:src/xeq.c     **** 	unsigned short int top;
 17139              		.loc 1 2174 81 view .LVU4434
 17140 000a 9046     		mov	r8, r2
 17141 000c 0E46     		mov	r6, r1
2180:src/xeq.c     **** 	count -= top;
 17142              		.loc 1 2180 14 view .LVU4435
 17143 000e 0DF10602 		add	r2, sp, #6
 17144              	.LVL1235:
2180:src/xeq.c     **** 	count -= top;
 17145              		.loc 1 2180 14 view .LVU4436
 17146 0012 3946     		mov	r1, r7
 17147              	.LVL1236:
ARM GAS  /tmp/ccaPnj5t.s 			page 474


2174:src/xeq.c     **** 	unsigned short int top;
 17148              		.loc 1 2174 81 view .LVU4437
 17149 0014 0446     		mov	r4, r0
2175:src/xeq.c     **** 	int count;
 17150              		.loc 1 2175 2 is_stmt 1 view .LVU4438
2176:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
 17151              		.loc 1 2176 2 view .LVU4439
2177:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17152              		.loc 1 2177 2 view .LVU4440
 17153              	.LVL1237:
2178:src/xeq.c     **** 
 17154              		.loc 1 2178 2 view .LVU4441
2180:src/xeq.c     **** 	count -= top;
 17155              		.loc 1 2180 2 view .LVU4442
2180:src/xeq.c     **** 	count -= top;
 17156              		.loc 1 2180 14 is_stmt 0 view .LVU4443
 17157 0016 FFF7FEFF 		bl	find_section_bounds
 17158              	.LVL1238:
2181:src/xeq.c     **** 	while (count--) {
 17159              		.loc 1 2181 8 view .LVU4444
 17160 001a BDF80650 		ldrh	r5, [sp, #6]
2180:src/xeq.c     **** 	count -= top;
 17161              		.loc 1 2180 8 view .LVU4445
 17162 001e 0130     		adds	r0, r0, #1
 17163              	.LVL1239:
2181:src/xeq.c     **** 	while (count--) {
 17164              		.loc 1 2181 2 is_stmt 1 view .LVU4446
2182:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17165              		.loc 1 2182 2 view .LVU4447
2182:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17166              		.loc 1 2182 8 view .LVU4448
2182:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17167              		.loc 1 2182 8 is_stmt 0 view .LVU4449
 17168 0020 451B     		subs	r5, r0, r5
 17169              	.LVL1240:
2182:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17170              		.loc 1 2182 8 view .LVU4450
 17171 0022 05D1     		bne	.L1197
 17172 0024 10E0     		b	.L1195
 17173              	.LVL1241:
 17174              	.L1205:
2188:src/xeq.c     **** 	}
 17175              		.loc 1 2188 8 view .LVU4451
 17176 0026 FFF7FEFF 		bl	do_inc
 17177              	.LVL1242:
2182:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17178              		.loc 1 2182 8 view .LVU4452
 17179 002a 013D     		subs	r5, r5, #1
 17180              	.LVL1243:
2188:src/xeq.c     **** 	}
 17181              		.loc 1 2188 8 view .LVU4453
 17182 002c 0446     		mov	r4, r0
 17183              	.LVL1244:
2182:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17184              		.loc 1 2182 8 is_stmt 1 view .LVU4454
2182:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17185              		.loc 1 2182 8 is_stmt 0 view .LVU4455
ARM GAS  /tmp/ccaPnj5t.s 			page 475


 17186 002e 0BD0     		beq	.L1195
 17187              	.LVL1245:
 17188              	.L1197:
2186:src/xeq.c     **** 			return pc;
 17189              		.loc 1 2186 3 is_stmt 1 view .LVU4456
2186:src/xeq.c     **** 			return pc;
 17190              		.loc 1 2186 7 is_stmt 0 view .LVU4457
 17191 0030 2046     		mov	r0, r4
 17192 0032 FFF7FEFF 		bl	getprog
 17193              	.LVL1246:
2188:src/xeq.c     **** 	}
 17194              		.loc 1 2188 3 is_stmt 1 view .LVU4458
2186:src/xeq.c     **** 			return pc;
 17195              		.loc 1 2186 7 is_stmt 0 view .LVU4459
 17196 0036 0346     		mov	r3, r0
2186:src/xeq.c     **** 			return pc;
 17197              		.loc 1 2186 6 view .LVU4460
 17198 0038 B342     		cmp	r3, r6
2188:src/xeq.c     **** 	}
 17199              		.loc 1 2188 8 view .LVU4461
 17200 003a 3946     		mov	r1, r7
 17201 003c 2046     		mov	r0, r4
2186:src/xeq.c     **** 			return pc;
 17202              		.loc 1 2186 6 view .LVU4462
 17203 003e F2D1     		bne	.L1205
 17204              	.LVL1247:
 17205              	.L1194:
2193:src/xeq.c     **** 
 17206              		.loc 1 2193 1 view .LVU4463
 17207 0040 2046     		mov	r0, r4
 17208 0042 02B0     		add	sp, sp, #8
 17209              		.cfi_remember_state
 17210              		.cfi_def_cfa_offset 24
 17211              		@ sp needed
 17212 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17213              	.LVL1248:
 17214              	.L1195:
 17215              		.cfi_restore_state
2190:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17216              		.loc 1 2190 2 is_stmt 1 view .LVU4464
2190:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17217              		.loc 1 2190 5 is_stmt 0 view .LVU4465
 17218 0048 18F00104 		ands	r4, r8, #1
 17219 004c F8D0     		beq	.L1194
 17220              	.LBB2889:
 17221              	.LBI2889:
2174:src/xeq.c     **** 	unsigned short int top;
 17222              		.loc 1 2174 14 is_stmt 1 view .LVU4466
 17223              	.LVL1249:
 17224              	.LBB2890:
2191:src/xeq.c     **** 	return 0;
 17225              		.loc 1 2191 3 view .LVU4467
 17226              	.LBB2891:
 17227              	.LBI2891:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17228              		.loc 1 540 5 view .LVU4468
 17229              	.LBB2892:
ARM GAS  /tmp/ccaPnj5t.s 			page 476


 541:src/xeq.c     **** 		Error = e;
 17230              		.loc 1 541 2 view .LVU4469
 541:src/xeq.c     **** 		Error = e;
 17231              		.loc 1 541 12 is_stmt 0 view .LVU4470
 17232 004e 074B     		ldr	r3, .L1206
 541:src/xeq.c     **** 		Error = e;
 17233              		.loc 1 541 5 view .LVU4471
 17234 0050 1C68     		ldr	r4, [r3]
 17235 0052 2CB9     		cbnz	r4, .L1199
 17236              	.LVL1250:
 17237              	.LBB2893:
 17238              	.LBI2893:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17239              		.loc 1 540 5 is_stmt 1 view .LVU4472
 17240              	.LBB2894:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 17241              		.loc 1 542 3 view .LVU4473
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 17242              		.loc 1 542 9 is_stmt 0 view .LVU4474
 17243 0054 0622     		movs	r2, #6
 17244              	.LBE2894:
 17245              	.LBE2893:
 17246              	.LBE2892:
 17247              	.LBE2891:
 17248              	.LBE2890:
 17249              	.LBE2889:
2193:src/xeq.c     **** 
 17250              		.loc 1 2193 1 view .LVU4475
 17251 0056 2046     		mov	r0, r4
 17252              	.LBB2900:
 17253              	.LBB2899:
 17254              	.LBB2898:
 17255              	.LBB2897:
 17256              	.LBB2896:
 17257              	.LBB2895:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 17258              		.loc 1 542 9 view .LVU4476
 17259 0058 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 17260              		.loc 1 543 3 is_stmt 1 view .LVU4477
 17261              	.LBE2895:
 17262              	.LBE2896:
 17263              	.LBE2897:
 17264              	.LBE2898:
 17265              	.LBE2899:
 17266              	.LBE2900:
2193:src/xeq.c     **** 
 17267              		.loc 1 2193 1 is_stmt 0 view .LVU4478
 17268 005a 02B0     		add	sp, sp, #8
 17269              		.cfi_remember_state
 17270              		.cfi_def_cfa_offset 24
 17271              		@ sp needed
 17272 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17273              	.LVL1251:
 17274              	.L1199:
 17275              		.cfi_restore_state
2192:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 477


 17276              		.loc 1 2192 9 view .LVU4479
 17277 0060 0024     		movs	r4, #0
 17278              	.LVL1252:
2193:src/xeq.c     **** 
 17279              		.loc 1 2193 1 view .LVU4480
 17280 0062 2046     		mov	r0, r4
 17281 0064 02B0     		add	sp, sp, #8
 17282              		.cfi_def_cfa_offset 24
 17283              		@ sp needed
 17284 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17285              	.LVL1253:
 17286              	.L1207:
2193:src/xeq.c     **** 
 17287              		.loc 1 2193 1 view .LVU4481
 17288 006a 00BF     		.align	2
 17289              	.L1206:
 17290 006c 00000000 		.word	Error
 17291              		.cfi_endproc
 17292              	.LFE150:
 17294              		.section	.text.find_label_from,"ax",%progbits
 17295              		.align	1
 17296              		.p2align 2,,3
 17297              		.global	find_label_from
 17298              		.syntax unified
 17299              		.thumb
 17300              		.thumb_func
 17301              		.fpu fpv4-sp-d16
 17303              	find_label_from:
 17304              	.LVL1254:
 17305              	.LFB151:
2196:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 17306              		.loc 1 2196 76 is_stmt 1 view -0
 17307              		.cfi_startproc
 17308              		@ args = 0, pretend = 0, frame = 0
 17309              		@ frame_needed = 0, uses_anonymous_args = 0
 17310              		@ link register save eliminated.
2197:src/xeq.c     **** }
 17311              		.loc 1 2197 2 view .LVU4483
2197:src/xeq.c     **** }
 17312              		.loc 1 2197 9 is_stmt 0 view .LVU4484
 17313 0000 41F4C441 		orr	r1, r1, #25088
 17314              	.LVL1255:
2197:src/xeq.c     **** }
 17315              		.loc 1 2197 9 view .LVU4485
 17316 0004 FFF7FEBF 		b	find_opcode_from
 17317              	.LVL1256:
2197:src/xeq.c     **** }
 17318              		.loc 1 2197 9 view .LVU4486
 17319              		.cfi_endproc
 17320              	.LFE151:
 17322              		.section	.text.op_rtn,"ax",%progbits
 17323              		.align	1
 17324              		.p2align 2,,3
 17325              		.global	op_rtn
 17326              		.syntax unified
 17327              		.thumb
 17328              		.thumb_func
ARM GAS  /tmp/ccaPnj5t.s 			page 478


 17329              		.fpu fpv4-sp-d16
 17331              	op_rtn:
 17332              	.LVL1257:
 17333              	.LFB154:
2255:src/xeq.c     **** 	if (! Running && ! XromRunning) {
 17334              		.loc 1 2255 28 is_stmt 1 view -0
 17335              		.cfi_startproc
 17336              		@ args = 0, pretend = 0, frame = 0
 17337              		@ frame_needed = 0, uses_anonymous_args = 0
 17338              		@ link register save eliminated.
2256:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17339              		.loc 1 2256 2 view .LVU4488
2256:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17340              		.loc 1 2256 6 is_stmt 0 view .LVU4489
 17341 0000 074A     		ldr	r2, .L1212
2256:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17342              		.loc 1 2256 19 view .LVU4490
 17343 0002 084B     		ldr	r3, .L1212+4
2256:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17344              		.loc 1 2256 16 view .LVU4491
 17345 0004 1268     		ldr	r2, [r2]
 17346 0006 1B68     		ldr	r3, [r3]
 17347 0008 1343     		orrs	r3, r2, r3
 17348 000a 06D0     		beq	.L1211
2261:src/xeq.c     **** }
 17349              		.loc 1 2261 3 is_stmt 1 view .LVU4492
 17350 000c A0F13900 		sub	r0, #57
 17351              	.LVL1258:
2261:src/xeq.c     **** }
 17352              		.loc 1 2261 3 is_stmt 0 view .LVU4493
 17353 0010 B0FA80F0 		clz	r0, r0
 17354 0014 4009     		lsrs	r0, r0, #5
 17355 0016 FFF7FEBF 		b	do_rtn
 17356              	.LVL1259:
 17357              	.L1211:
2258:src/xeq.c     **** 	}
 17358              		.loc 1 2258 3 is_stmt 1 view .LVU4494
 17359 001a FFF7FEBF 		b	clrretstk_pc
 17360              	.LVL1260:
 17361              	.L1213:
2258:src/xeq.c     **** 	}
 17362              		.loc 1 2258 3 is_stmt 0 view .LVU4495
 17363 001e 00BF     		.align	2
 17364              	.L1212:
 17365 0020 00000000 		.word	Running
 17366 0024 00000000 		.word	XromRunning
 17367              		.cfi_endproc
 17368              	.LFE154:
 17370              		.section	.text.op_popusr,"ax",%progbits
 17371              		.align	1
 17372              		.p2align 2,,3
 17373              		.global	op_popusr
 17374              		.syntax unified
 17375              		.thumb
 17376              		.thumb_func
 17377              		.fpu fpv4-sp-d16
 17379              	op_popusr:
ARM GAS  /tmp/ccaPnj5t.s 			page 479


 17380              	.LVL1261:
 17381              	.LFB158:
2302:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17382              		.loc 1 2302 31 is_stmt 1 view -0
 17383              		.cfi_startproc
 17384              		@ args = 0, pretend = 0, frame = 0
 17385              		@ frame_needed = 0, uses_anonymous_args = 0
 17386              		@ link register save eliminated.
2303:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17387              		.loc 1 2303 2 view .LVU4497
2303:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17388              		.loc 1 2303 25 is_stmt 0 view .LVU4498
 17389 0000 134A     		ldr	r2, .L1216
2303:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17390              		.loc 1 2303 24 view .LVU4499
 17391 0002 144B     		ldr	r3, .L1216+4
2303:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17392              		.loc 1 2303 25 view .LVU4500
 17393 0004 1268     		ldr	r2, [r2]
2303:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17394              		.loc 1 2303 24 view .LVU4501
 17395 0006 1B68     		ldr	r3, [r3]
2302:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17396              		.loc 1 2302 31 view .LVU4502
 17397 0008 70B4     		push	{r4, r5, r6}
 17398              		.cfi_def_cfa_offset 12
 17399              		.cfi_offset 4, -12
 17400              		.cfi_offset 5, -8
 17401              		.cfi_offset 6, -4
2303:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17402              		.loc 1 2303 25 view .LVU4503
 17403 000a B2F9E257 		ldrsh	r5, [r2, #2018]
2305:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17404              		.loc 1 2305 13 view .LVU4504
 17405 000e 124E     		ldr	r6, .L1216+8
2303:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17406              		.loc 1 2303 34 view .LVU4505
 17407 0010 A9B2     		uxth	r1, r5
 17408 0012 4C1C     		adds	r4, r1, #1
 17409 0014 24B2     		sxth	r4, r4
2304:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17410              		.loc 1 2304 34 view .LVU4506
 17411 0016 881C     		adds	r0, r1, #2
 17412              	.LVL1262:
2303:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17413              		.loc 1 2303 34 view .LVU4507
 17414 0018 A2F8E247 		strh	r4, [r2, #2018]	@ movhi
2304:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17415              		.loc 1 2304 34 view .LVU4508
 17416 001c 00B2     		sxth	r0, r0
2303:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17417              		.loc 1 2303 24 view .LVU4509
 17418 001e 33F81550 		ldrh	r5, [r3, r5, lsl #1]
2304:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17419              		.loc 1 2304 34 view .LVU4510
 17420 0022 A2F8E207 		strh	r0, [r2, #2018]	@ movhi
2304:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
ARM GAS  /tmp/ccaPnj5t.s 			page 480


 17421              		.loc 1 2304 24 view .LVU4511
 17422 0026 33F91440 		ldrsh	r4, [r3, r4, lsl #1]
2304:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17423              		.loc 1 2304 12 view .LVU4512
 17424 002a A2F8DE47 		strh	r4, [r2, #2014]	@ movhi
2305:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17425              		.loc 1 2305 34 view .LVU4513
 17426 002e 0331     		adds	r1, r1, #3
 17427 0030 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
2306:src/xeq.c     **** }
 17428              		.loc 1 2306 20 view .LVU4514
 17429 0034 33F81420 		ldrh	r2, [r3, r4, lsl #1]
2303:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17430              		.loc 1 2303 16 view .LVU4515
 17431 0038 0849     		ldr	r1, .L1216+12
2305:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17432              		.loc 1 2305 24 view .LVU4516
 17433 003a 33F81000 		ldrh	r0, [r3, r0, lsl #1]
 17434 003e 3060     		str	r0, [r6]
2306:src/xeq.c     **** }
 17435              		.loc 1 2306 20 view .LVU4517
 17436 0040 22F40052 		bic	r2, r2, #8192
2303:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17437              		.loc 1 2303 24 view .LVU4518
 17438 0044 0D60     		str	r5, [r1]
2304:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17439              		.loc 1 2304 2 is_stmt 1 view .LVU4519
2305:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17440              		.loc 1 2305 2 view .LVU4520
2306:src/xeq.c     **** }
 17441              		.loc 1 2306 2 view .LVU4521
2306:src/xeq.c     **** }
 17442              		.loc 1 2306 20 is_stmt 0 view .LVU4522
 17443 0046 23F81420 		strh	r2, [r3, r4, lsl #1]	@ movhi
2307:src/xeq.c     **** 
 17444              		.loc 1 2307 1 view .LVU4523
 17445 004a 70BC     		pop	{r4, r5, r6}
 17446              		.cfi_restore 6
 17447              		.cfi_restore 5
 17448              		.cfi_restore 4
 17449              		.cfi_def_cfa_offset 0
 17450 004c 7047     		bx	lr
 17451              	.L1217:
 17452 004e 00BF     		.align	2
 17453              	.L1216:
 17454 0050 00000000 		.word	main_ram
 17455 0054 00000000 		.word	RetStk
 17456 0058 00000000 		.word	XromUserPc
 17457 005c 00000000 		.word	UserLocalRegs
 17458              		.cfi_endproc
 17459              	.LFE158:
 17461              		.section	.text.findmultilbl,"ax",%progbits
 17462              		.align	1
 17463              		.p2align 2,,3
 17464              		.global	findmultilbl
 17465              		.syntax unified
 17466              		.thumb
ARM GAS  /tmp/ccaPnj5t.s 			page 481


 17467              		.thumb_func
 17468              		.fpu fpv4-sp-d16
 17470              	findmultilbl:
 17471              	.LVL1263:
 17472              	.LFB162:
2335:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17473              		.loc 1 2335 54 is_stmt 1 view -0
 17474              		.cfi_startproc
 17475              		@ args = 0, pretend = 0, frame = 0
 17476              		@ frame_needed = 0, uses_anonymous_args = 0
2336:src/xeq.c     **** 	unsigned int lbl;
 17477              		.loc 1 2336 2 view .LVU4525
2335:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17478              		.loc 1 2335 54 is_stmt 0 view .LVU4526
 17479 0000 38B5     		push	{r3, r4, r5, lr}
 17480              		.cfi_def_cfa_offset 16
 17481              		.cfi_offset 3, -16
 17482              		.cfi_offset 4, -12
 17483              		.cfi_offset 5, -8
 17484              		.cfi_offset 14, -4
2339:src/xeq.c     **** 	if (lbl == 0)
 17485              		.loc 1 2339 8 view .LVU4527
 17486 0002 0022     		movs	r2, #0
2336:src/xeq.c     **** 	unsigned int lbl;
 17487              		.loc 1 2336 15 view .LVU4528
 17488 0004 20F47064 		bic	r4, r0, #3840
 17489              	.LVL1264:
2337:src/xeq.c     **** 
 17490              		.loc 1 2337 2 is_stmt 1 view .LVU4529
2339:src/xeq.c     **** 	if (lbl == 0)
 17491              		.loc 1 2339 2 view .LVU4530
2335:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17492              		.loc 1 2335 54 is_stmt 0 view .LVU4531
 17493 0008 0D46     		mov	r5, r1
2339:src/xeq.c     **** 	if (lbl == 0)
 17494              		.loc 1 2339 8 view .LVU4532
 17495 000a 1046     		mov	r0, r2
 17496              	.LVL1265:
2339:src/xeq.c     **** 	if (lbl == 0)
 17497              		.loc 1 2339 8 view .LVU4533
 17498 000c 2146     		mov	r1, r4
 17499              	.LVL1266:
2339:src/xeq.c     **** 	if (lbl == 0)
 17500              		.loc 1 2339 8 view .LVU4534
 17501 000e FFF7FEFF 		bl	find_opcode_from
 17502              	.LVL1267:
2340:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17503              		.loc 1 2340 2 is_stmt 1 view .LVU4535
2340:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17504              		.loc 1 2340 5 is_stmt 0 view .LVU4536
 17505 0012 00B1     		cbz	r0, .L1224
 17506              	.L1218:
2347:src/xeq.c     **** 
 17507              		.loc 1 2347 1 view .LVU4537
 17508 0014 38BD     		pop	{r3, r4, r5, pc}
 17509              	.LVL1268:
 17510              	.L1224:
ARM GAS  /tmp/ccaPnj5t.s 			page 482


2341:src/xeq.c     **** 	if (lbl == 0)
 17511              		.loc 1 2341 3 is_stmt 1 view .LVU4538
2341:src/xeq.c     **** 	if (lbl == 0)
 17512              		.loc 1 2341 9 is_stmt 0 view .LVU4539
 17513 0016 0246     		mov	r2, r0
 17514 0018 2146     		mov	r1, r4
 17515 001a 4FF48040 		mov	r0, #16384
 17516              	.LVL1269:
2341:src/xeq.c     **** 	if (lbl == 0)
 17517              		.loc 1 2341 9 view .LVU4540
 17518 001e FFF7FEFF 		bl	find_opcode_from
 17519              	.LVL1270:
2342:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17520              		.loc 1 2342 2 is_stmt 1 view .LVU4541
2342:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17521              		.loc 1 2342 5 is_stmt 0 view .LVU4542
 17522 0022 0028     		cmp	r0, #0
 17523 0024 F6D1     		bne	.L1218
2343:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17524              		.loc 1 2343 3 is_stmt 1 view .LVU4543
2343:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17525              		.loc 1 2343 9 is_stmt 0 view .LVU4544
 17526 0026 0246     		mov	r2, r0
 17527 0028 2146     		mov	r1, r4
 17528 002a 4FF40040 		mov	r0, #32768
 17529              	.LVL1271:
2343:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17530              		.loc 1 2343 9 view .LVU4545
 17531 002e FFF7FEFF 		bl	find_opcode_from
 17532              	.LVL1272:
2344:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17533              		.loc 1 2344 2 is_stmt 1 view .LVU4546
2344:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17534              		.loc 1 2344 5 is_stmt 0 view .LVU4547
 17535 0032 0028     		cmp	r0, #0
 17536 0034 EED1     		bne	.L1218
2344:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17537              		.loc 1 2344 15 discriminator 1 view .LVU4548
 17538 0036 EB07     		lsls	r3, r5, #31
 17539 0038 ECD5     		bpl	.L1218
 17540              	.LBB2907:
 17541              	.LBI2907:
2335:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17542              		.loc 1 2335 14 is_stmt 1 view .LVU4549
 17543              	.LVL1273:
 17544              	.LBB2908:
2345:src/xeq.c     **** 	return lbl;
 17545              		.loc 1 2345 3 view .LVU4550
 17546              	.LBB2909:
 17547              	.LBI2909:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17548              		.loc 1 540 5 view .LVU4551
 17549              	.LBB2910:
 541:src/xeq.c     **** 		Error = e;
 17550              		.loc 1 541 2 view .LVU4552
 541:src/xeq.c     **** 		Error = e;
 17551              		.loc 1 541 12 is_stmt 0 view .LVU4553
ARM GAS  /tmp/ccaPnj5t.s 			page 483


 17552 003a 034B     		ldr	r3, .L1225
 541:src/xeq.c     **** 		Error = e;
 17553              		.loc 1 541 5 view .LVU4554
 17554 003c 1A68     		ldr	r2, [r3]
 17555 003e 002A     		cmp	r2, #0
 17556 0040 E8D1     		bne	.L1218
 17557              	.LVL1274:
 17558              	.LBB2911:
 17559              	.LBI2911:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17560              		.loc 1 540 5 is_stmt 1 view .LVU4555
 17561              	.LBB2912:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 17562              		.loc 1 542 3 view .LVU4556
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 17563              		.loc 1 542 9 is_stmt 0 view .LVU4557
 17564 0042 0622     		movs	r2, #6
 17565 0044 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 17566              		.loc 1 543 3 is_stmt 1 view .LVU4558
 17567              	.LVL1275:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 17568              		.loc 1 543 3 is_stmt 0 view .LVU4559
 17569              	.LBE2912:
 17570              	.LBE2911:
 17571              	.LBE2910:
 17572              	.LBE2909:
 17573              	.LBE2908:
 17574              	.LBE2907:
2346:src/xeq.c     **** }
 17575              		.loc 1 2346 2 is_stmt 1 view .LVU4560
2347:src/xeq.c     **** 
 17576              		.loc 1 2347 1 is_stmt 0 view .LVU4561
 17577 0046 38BD     		pop	{r3, r4, r5, pc}
 17578              	.LVL1276:
 17579              	.L1226:
2347:src/xeq.c     **** 
 17580              		.loc 1 2347 1 view .LVU4562
 17581              		.align	2
 17582              	.L1225:
 17583 0048 00000000 		.word	Error
 17584              		.cfi_endproc
 17585              	.LFE162:
 17587              		.section	.text.get_dispmode_digs,"ax",%progbits
 17588              		.align	1
 17589              		.p2align 2,,3
 17590              		.global	get_dispmode_digs
 17591              		.syntax unified
 17592              		.thumb
 17593              		.thumb_func
 17594              		.fpu fpv4-sp-d16
 17596              	get_dispmode_digs:
 17597              	.LVL1277:
 17598              	.LFB169:
2399:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17599              		.loc 1 2399 1 is_stmt 1 view -0
 17600              		.cfi_startproc
ARM GAS  /tmp/ccaPnj5t.s 			page 484


 17601              		@ args = 0, pretend = 0, frame = 0
 17602              		@ frame_needed = 0, uses_anonymous_args = 0
 17603              		@ link register save eliminated.
2400:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17604              		.loc 1 2400 2 view .LVU4564
2400:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17605              		.loc 1 2400 17 is_stmt 0 view .LVU4565
 17606 0000 0A4B     		ldr	r3, .L1230
 17607 0002 1A68     		ldr	r2, [r3]
2401:src/xeq.c     **** 
 17608              		.loc 1 2401 23 view .LVU4566
 17609 0004 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
2400:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17610              		.loc 1 2400 23 view .LVU4567
 17611 0008 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
2401:src/xeq.c     **** 
 17612              		.loc 1 2401 6 view .LVU4568
 17613 000c 03F00F03 		and	r3, r3, #15
2403:src/xeq.c     **** 		dispdigs -= 12;
 17614              		.loc 1 2403 5 view .LVU4569
 17615 0010 0B2B     		cmp	r3, #11
2399:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17616              		.loc 1 2399 1 view .LVU4570
 17617 0012 0146     		mov	r1, r0
2400:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17618              		.loc 1 2400 6 view .LVU4571
 17619 0014 4FEA9210 		lsr	r0, r2, #6
 17620              	.LVL1278:
2401:src/xeq.c     **** 
 17621              		.loc 1 2401 2 is_stmt 1 view .LVU4572
2403:src/xeq.c     **** 		dispdigs -= 12;
 17622              		.loc 1 2403 2 view .LVU4573
2403:src/xeq.c     **** 		dispdigs -= 12;
 17623              		.loc 1 2403 5 is_stmt 0 view .LVU4574
 17624 0018 06DD     		ble	.L1228
2404:src/xeq.c     **** 		dispmode += 4;
 17625              		.loc 1 2404 3 is_stmt 1 view .LVU4575
 17626              	.LVL1279:
2405:src/xeq.c     **** 		if (dispmode >= 6) {
 17627              		.loc 1 2405 3 view .LVU4576
2405:src/xeq.c     **** 		if (dispmode >= 6) {
 17628              		.loc 1 2405 12 is_stmt 0 view .LVU4577
 17629 001a 021D     		adds	r2, r0, #4
 17630              	.LVL1280:
2406:src/xeq.c     **** 			dispmode -= 2;
 17631              		.loc 1 2406 3 is_stmt 1 view .LVU4578
2406:src/xeq.c     **** 			dispmode -= 2;
 17632              		.loc 1 2406 6 is_stmt 0 view .LVU4579
 17633 001c 052A     		cmp	r2, #5
2404:src/xeq.c     **** 		dispmode += 4;
 17634              		.loc 1 2404 12 view .LVU4580
 17635 001e D9BF     		ittee	le
 17636 0020 0C3B     		suble	r3, r3, #12
 17637              	.LVL1281:
2404:src/xeq.c     **** 		dispmode += 4;
 17638              		.loc 1 2404 12 view .LVU4581
 17639 0022 1046     		movle	r0, r2
ARM GAS  /tmp/ccaPnj5t.s 			page 485


2407:src/xeq.c     **** 			dispdigs += 4;
 17640              		.loc 1 2407 4 is_stmt 1 view .LVU4582
2407:src/xeq.c     **** 			dispdigs += 4;
 17641              		.loc 1 2407 13 is_stmt 0 view .LVU4583
 17642 0024 0230     		addgt	r0, r0, #2
 17643              	.LVL1282:
2408:src/xeq.c     **** 		}
 17644              		.loc 1 2408 4 is_stmt 1 view .LVU4584
2408:src/xeq.c     **** 		}
 17645              		.loc 1 2408 13 is_stmt 0 view .LVU4585
 17646 0026 083B     		subgt	r3, r3, #8
 17647              	.LVL1283:
 17648              	.L1228:
2411:src/xeq.c     **** 	return dispmode;
 17649              		.loc 1 2411 2 is_stmt 1 view .LVU4586
2411:src/xeq.c     **** 	return dispmode;
 17650              		.loc 1 2411 9 is_stmt 0 view .LVU4587
 17651 0028 0B60     		str	r3, [r1]
2412:src/xeq.c     **** }
 17652              		.loc 1 2412 2 is_stmt 1 view .LVU4588
2413:src/xeq.c     **** 
 17653              		.loc 1 2413 1 is_stmt 0 view .LVU4589
 17654 002a 7047     		bx	lr
 17655              	.L1231:
 17656              		.align	2
 17657              	.L1230:
 17658 002c 00000000 		.word	main_ram
 17659              		.cfi_endproc
 17660              	.LFE169:
 17662              		.section	.text.set_dispmode_digs,"ax",%progbits
 17663              		.align	1
 17664              		.p2align 2,,3
 17665              		.global	set_dispmode_digs
 17666              		.syntax unified
 17667              		.thumb
 17668              		.thumb_func
 17669              		.fpu fpv4-sp-d16
 17671              	set_dispmode_digs:
 17672              	.LVL1284:
 17673              	.LFB170:
2416:src/xeq.c     **** 	if (dispmode >= 4) {
 17674              		.loc 1 2416 1 is_stmt 1 view -0
 17675              		.cfi_startproc
 17676              		@ args = 0, pretend = 0, frame = 0
 17677              		@ frame_needed = 0, uses_anonymous_args = 0
 17678              		@ link register save eliminated.
2417:src/xeq.c     **** 		dispmode -= 4;
 17679              		.loc 1 2417 2 view .LVU4591
2417:src/xeq.c     **** 		dispmode -= 4;
 17680              		.loc 1 2417 5 is_stmt 0 view .LVU4592
 17681 0000 0328     		cmp	r0, #3
 17682 0002 07DD     		ble	.L1233
2418:src/xeq.c     **** 		dispdigs += 12;
 17683              		.loc 1 2418 3 is_stmt 1 view .LVU4593
 17684              	.LVL1285:
2419:src/xeq.c     **** 		if (dispdigs >= 16) {
 17685              		.loc 1 2419 3 view .LVU4594
ARM GAS  /tmp/ccaPnj5t.s 			page 486


2419:src/xeq.c     **** 		if (dispdigs >= 16) {
 17686              		.loc 1 2419 12 is_stmt 0 view .LVU4595
 17687 0004 01F10C03 		add	r3, r1, #12
 17688              	.LVL1286:
2420:src/xeq.c     **** 			dispdigs -= 4;
 17689              		.loc 1 2420 3 is_stmt 1 view .LVU4596
2420:src/xeq.c     **** 			dispdigs -= 4;
 17690              		.loc 1 2420 6 is_stmt 0 view .LVU4597
 17691 0008 0F2B     		cmp	r3, #15
2418:src/xeq.c     **** 		dispdigs += 12;
 17692              		.loc 1 2418 12 view .LVU4598
 17693 000a D9BF     		ittee	le
 17694 000c 0438     		suble	r0, r0, #4
 17695              	.LVL1287:
2418:src/xeq.c     **** 		dispdigs += 12;
 17696              		.loc 1 2418 12 view .LVU4599
 17697 000e 1946     		movle	r1, r3
2421:src/xeq.c     **** 			dispmode += 2;
 17698              		.loc 1 2421 4 is_stmt 1 view .LVU4600
2421:src/xeq.c     **** 			dispmode += 2;
 17699              		.loc 1 2421 13 is_stmt 0 view .LVU4601
 17700 0010 0831     		addgt	r1, r1, #8
 17701              	.LVL1288:
2422:src/xeq.c     **** 		}
 17702              		.loc 1 2422 4 is_stmt 1 view .LVU4602
2422:src/xeq.c     **** 		}
 17703              		.loc 1 2422 13 is_stmt 0 view .LVU4603
 17704 0012 0238     		subgt	r0, r0, #2
 17705              	.LVL1289:
 17706              	.L1233:
2425:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17707              		.loc 1 2425 2 is_stmt 1 view .LVU4604
 17708 0014 084B     		ldr	r3, .L1235
 17709 0016 1A68     		ldr	r2, [r3]
2426:src/xeq.c     **** }
 17710              		.loc 1 2426 2 view .LVU4605
2425:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17711              		.loc 1 2425 18 is_stmt 0 view .LVU4606
 17712 0018 00F00300 		and	r0, r0, #3
 17713              	.LVL1290:
2425:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17714              		.loc 1 2425 18 view .LVU4607
 17715 001c B2F8E637 		ldrh	r3, [r2, #2022]
 17716 0020 8001     		lsls	r0, r0, #6
 17717 0022 01F00F01 		and	r1, r1, #15
 17718              	.LVL1291:
2425:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17719              		.loc 1 2425 18 view .LVU4608
 17720 0026 40EA0120 		orr	r0, r0, r1, lsl #8
 17721 002a 23F47C63 		bic	r3, r3, #4032
 17722 002e 1843     		orrs	r0, r0, r3
 17723 0030 A2F8E607 		strh	r0, [r2, #2022]	@ movhi
2427:src/xeq.c     **** #endif
 17724              		.loc 1 2427 1 view .LVU4609
 17725 0034 7047     		bx	lr
 17726              	.L1236:
 17727 0036 00BF     		.align	2
ARM GAS  /tmp/ccaPnj5t.s 			page 487


 17728              	.L1235:
 17729 0038 00000000 		.word	main_ram
 17730              		.cfi_endproc
 17731              	.LFE170:
 17733              		.section	.text.convC2F,"ax",%progbits
 17734              		.align	1
 17735              		.p2align 2,,3
 17736              		.global	convC2F
 17737              		.syntax unified
 17738              		.thumb
 17739              		.thumb_func
 17740              		.fpu fpv4-sp-d16
 17742              	convC2F:
 17743              	.LVL1292:
 17744              	.LFB172:
2479:src/xeq.c     **** 	decNumber s;
 17745              		.loc 1 2479 54 is_stmt 1 view -0
 17746              		.cfi_startproc
 17747              		@ args = 0, pretend = 0, frame = 40
 17748              		@ frame_needed = 0, uses_anonymous_args = 0
2480:src/xeq.c     **** 
 17749              		.loc 1 2480 2 view .LVU4611
2482:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17750              		.loc 1 2482 2 view .LVU4612
2479:src/xeq.c     **** 	decNumber s;
 17751              		.loc 1 2479 54 is_stmt 0 view .LVU4613
 17752 0000 10B5     		push	{r4, lr}
 17753              		.cfi_def_cfa_offset 8
 17754              		.cfi_offset 4, -8
 17755              		.cfi_offset 14, -4
 17756 0002 8AB0     		sub	sp, sp, #40
 17757              		.cfi_def_cfa_offset 48
2479:src/xeq.c     **** 	decNumber s;
 17758              		.loc 1 2479 54 view .LVU4614
 17759 0004 0446     		mov	r4, r0
2482:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17760              		.loc 1 2482 2 view .LVU4615
 17761 0006 054A     		ldr	r2, .L1239
 17762 0008 01A8     		add	r0, sp, #4
 17763              	.LVL1293:
2482:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17764              		.loc 1 2482 2 view .LVU4616
 17765 000a FFF7FEFF 		bl	dn_multiply
 17766              	.LVL1294:
2483:src/xeq.c     **** }
 17767              		.loc 1 2483 2 is_stmt 1 view .LVU4617
2483:src/xeq.c     **** }
 17768              		.loc 1 2483 9 is_stmt 0 view .LVU4618
 17769 000e 044A     		ldr	r2, .L1239+4
 17770 0010 2046     		mov	r0, r4
 17771 0012 01A9     		add	r1, sp, #4
 17772 0014 FFF7FEFF 		bl	dn_add
 17773              	.LVL1295:
2484:src/xeq.c     **** 
 17774              		.loc 1 2484 1 view .LVU4619
 17775 0018 0AB0     		add	sp, sp, #40
 17776              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccaPnj5t.s 			page 488


 17777              		@ sp needed
 17778 001a 10BD     		pop	{r4, pc}
 17779              	.LVL1296:
 17780              	.L1240:
2484:src/xeq.c     **** 
 17781              		.loc 1 2484 1 view .LVU4620
 17782              		.align	2
 17783              	.L1239:
 17784 001c 00000000 		.word	const_9on5
 17785 0020 00000000 		.word	const_32
 17786              		.cfi_endproc
 17787              	.LFE172:
 17789              		.section	.text.convF2C,"ax",%progbits
 17790              		.align	1
 17791              		.p2align 2,,3
 17792              		.global	convF2C
 17793              		.syntax unified
 17794              		.thumb
 17795              		.thumb_func
 17796              		.fpu fpv4-sp-d16
 17798              	convF2C:
 17799              	.LVL1297:
 17800              	.LFB173:
2486:src/xeq.c     **** 	decNumber s;
 17801              		.loc 1 2486 54 is_stmt 1 view -0
 17802              		.cfi_startproc
 17803              		@ args = 0, pretend = 0, frame = 40
 17804              		@ frame_needed = 0, uses_anonymous_args = 0
2487:src/xeq.c     **** 
 17805              		.loc 1 2487 2 view .LVU4622
2489:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17806              		.loc 1 2489 2 view .LVU4623
2486:src/xeq.c     **** 	decNumber s;
 17807              		.loc 1 2486 54 is_stmt 0 view .LVU4624
 17808 0000 10B5     		push	{r4, lr}
 17809              		.cfi_def_cfa_offset 8
 17810              		.cfi_offset 4, -8
 17811              		.cfi_offset 14, -4
 17812 0002 8AB0     		sub	sp, sp, #40
 17813              		.cfi_def_cfa_offset 48
2486:src/xeq.c     **** 	decNumber s;
 17814              		.loc 1 2486 54 view .LVU4625
 17815 0004 0446     		mov	r4, r0
2489:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17816              		.loc 1 2489 2 view .LVU4626
 17817 0006 054A     		ldr	r2, .L1243
 17818 0008 01A8     		add	r0, sp, #4
 17819              	.LVL1298:
2489:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17820              		.loc 1 2489 2 view .LVU4627
 17821 000a FFF7FEFF 		bl	dn_subtract
 17822              	.LVL1299:
2490:src/xeq.c     **** }
 17823              		.loc 1 2490 2 is_stmt 1 view .LVU4628
2490:src/xeq.c     **** }
 17824              		.loc 1 2490 9 is_stmt 0 view .LVU4629
 17825 000e 044A     		ldr	r2, .L1243+4
ARM GAS  /tmp/ccaPnj5t.s 			page 489


 17826 0010 2046     		mov	r0, r4
 17827 0012 01A9     		add	r1, sp, #4
 17828 0014 FFF7FEFF 		bl	dn_divide
 17829              	.LVL1300:
2491:src/xeq.c     **** 
 17830              		.loc 1 2491 1 view .LVU4630
 17831 0018 0AB0     		add	sp, sp, #40
 17832              		.cfi_def_cfa_offset 8
 17833              		@ sp needed
 17834 001a 10BD     		pop	{r4, pc}
 17835              	.LVL1301:
 17836              	.L1244:
2491:src/xeq.c     **** 
 17837              		.loc 1 2491 1 view .LVU4631
 17838              		.align	2
 17839              	.L1243:
 17840 001c 00000000 		.word	const_32
 17841 0020 00000000 		.word	const_9on5
 17842              		.cfi_endproc
 17843              	.LFE173:
 17845              		.section	.text.convDB2AR,"ax",%progbits
 17846              		.align	1
 17847              		.p2align 2,,3
 17848              		.global	convDB2AR
 17849              		.syntax unified
 17850              		.thumb
 17851              		.thumb_func
 17852              		.fpu fpv4-sp-d16
 17854              	convDB2AR:
 17855              	.LVL1302:
 17856              	.LFB174:
2493:src/xeq.c     **** 	decNumber t;
 17857              		.loc 1 2493 56 is_stmt 1 view -0
 17858              		.cfi_startproc
 17859              		@ args = 0, pretend = 0, frame = 40
 17860              		@ frame_needed = 0, uses_anonymous_args = 0
2494:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
 17861              		.loc 1 2494 2 view .LVU4633
2495:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17862              		.loc 1 2495 2 view .LVU4634
2493:src/xeq.c     **** 	decNumber t;
 17863              		.loc 1 2493 56 is_stmt 0 view .LVU4635
 17864 0000 10B5     		push	{r4, lr}
 17865              		.cfi_def_cfa_offset 8
 17866              		.cfi_offset 4, -8
 17867              		.cfi_offset 14, -4
 17868 0002 8AB0     		sub	sp, sp, #40
 17869              		.cfi_def_cfa_offset 48
2495:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17870              		.loc 1 2495 2 view .LVU4636
 17871 0004 054A     		ldr	r2, .L1247
2493:src/xeq.c     **** 	decNumber t;
 17872              		.loc 1 2493 56 view .LVU4637
 17873 0006 0446     		mov	r4, r0
2495:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17874              		.loc 1 2495 2 view .LVU4638
 17875 0008 01A8     		add	r0, sp, #4
ARM GAS  /tmp/ccaPnj5t.s 			page 490


 17876              	.LVL1303:
2495:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17877              		.loc 1 2495 2 view .LVU4639
 17878 000a FFF7FEFF 		bl	dn_multiply
 17879              	.LVL1304:
2496:src/xeq.c     **** }
 17880              		.loc 1 2496 2 is_stmt 1 view .LVU4640
2496:src/xeq.c     **** }
 17881              		.loc 1 2496 9 is_stmt 0 view .LVU4641
 17882 000e 01A9     		add	r1, sp, #4
 17883 0010 2046     		mov	r0, r4
 17884 0012 FFF7FEFF 		bl	decNumberPow10
 17885              	.LVL1305:
2497:src/xeq.c     **** 
 17886              		.loc 1 2497 1 view .LVU4642
 17887 0016 0AB0     		add	sp, sp, #40
 17888              		.cfi_def_cfa_offset 8
 17889              		@ sp needed
 17890 0018 10BD     		pop	{r4, pc}
 17891              	.LVL1306:
 17892              	.L1248:
2497:src/xeq.c     **** 
 17893              		.loc 1 2497 1 view .LVU4643
 17894 001a 00BF     		.align	2
 17895              	.L1247:
 17896 001c 00000000 		.word	const_0_05
 17897              		.cfi_endproc
 17898              	.LFE174:
 17900              		.section	.text.convAR2DB,"ax",%progbits
 17901              		.align	1
 17902              		.p2align 2,,3
 17903              		.global	convAR2DB
 17904              		.syntax unified
 17905              		.thumb
 17906              		.thumb_func
 17907              		.fpu fpv4-sp-d16
 17909              	convAR2DB:
 17910              	.LVL1307:
 17911              	.LFB175:
2499:src/xeq.c     **** 	decNumber t;
 17912              		.loc 1 2499 56 is_stmt 1 view -0
 17913              		.cfi_startproc
 17914              		@ args = 0, pretend = 0, frame = 40
 17915              		@ frame_needed = 0, uses_anonymous_args = 0
2500:src/xeq.c     **** 	dn_log10(&t, x);
 17916              		.loc 1 2500 2 view .LVU4645
2501:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17917              		.loc 1 2501 2 view .LVU4646
2499:src/xeq.c     **** 	decNumber t;
 17918              		.loc 1 2499 56 is_stmt 0 view .LVU4647
 17919 0000 10B5     		push	{r4, lr}
 17920              		.cfi_def_cfa_offset 8
 17921              		.cfi_offset 4, -8
 17922              		.cfi_offset 14, -4
 17923 0002 8AB0     		sub	sp, sp, #40
 17924              		.cfi_def_cfa_offset 48
2499:src/xeq.c     **** 	decNumber t;
ARM GAS  /tmp/ccaPnj5t.s 			page 491


 17925              		.loc 1 2499 56 view .LVU4648
 17926 0004 0446     		mov	r4, r0
2501:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17927              		.loc 1 2501 2 view .LVU4649
 17928 0006 01A8     		add	r0, sp, #4
 17929              	.LVL1308:
2501:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17930              		.loc 1 2501 2 view .LVU4650
 17931 0008 FFF7FEFF 		bl	dn_log10
 17932              	.LVL1309:
2502:src/xeq.c     **** }
 17933              		.loc 1 2502 2 is_stmt 1 view .LVU4651
2502:src/xeq.c     **** }
 17934              		.loc 1 2502 9 is_stmt 0 view .LVU4652
 17935 000c 034A     		ldr	r2, .L1251
 17936 000e 2046     		mov	r0, r4
 17937 0010 01A9     		add	r1, sp, #4
 17938 0012 FFF7FEFF 		bl	dn_multiply
 17939              	.LVL1310:
2503:src/xeq.c     **** 
 17940              		.loc 1 2503 1 view .LVU4653
 17941 0016 0AB0     		add	sp, sp, #40
 17942              		.cfi_def_cfa_offset 8
 17943              		@ sp needed
 17944 0018 10BD     		pop	{r4, pc}
 17945              	.LVL1311:
 17946              	.L1252:
2503:src/xeq.c     **** 
 17947              		.loc 1 2503 1 view .LVU4654
 17948 001a 00BF     		.align	2
 17949              	.L1251:
 17950 001c 00000000 		.word	const_20
 17951              		.cfi_endproc
 17952              	.LFE175:
 17954              		.section	.text.convDB2PR,"ax",%progbits
 17955              		.align	1
 17956              		.p2align 2,,3
 17957              		.global	convDB2PR
 17958              		.syntax unified
 17959              		.thumb
 17960              		.thumb_func
 17961              		.fpu fpv4-sp-d16
 17963              	convDB2PR:
 17964              	.LVL1312:
 17965              	.LFB176:
2505:src/xeq.c     **** 	decNumber t;
 17966              		.loc 1 2505 56 is_stmt 1 view -0
 17967              		.cfi_startproc
 17968              		@ args = 0, pretend = 0, frame = 40
 17969              		@ frame_needed = 0, uses_anonymous_args = 0
2506:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
 17970              		.loc 1 2506 2 view .LVU4656
2507:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17971              		.loc 1 2507 2 view .LVU4657
2505:src/xeq.c     **** 	decNumber t;
 17972              		.loc 1 2505 56 is_stmt 0 view .LVU4658
 17973 0000 10B5     		push	{r4, lr}
ARM GAS  /tmp/ccaPnj5t.s 			page 492


 17974              		.cfi_def_cfa_offset 8
 17975              		.cfi_offset 4, -8
 17976              		.cfi_offset 14, -4
 17977 0002 8AB0     		sub	sp, sp, #40
 17978              		.cfi_def_cfa_offset 48
2505:src/xeq.c     **** 	decNumber t;
 17979              		.loc 1 2505 56 view .LVU4659
 17980 0004 0446     		mov	r4, r0
2507:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17981              		.loc 1 2507 2 view .LVU4660
 17982 0006 4FF0FF32 		mov	r2, #-1
 17983 000a 01A8     		add	r0, sp, #4
 17984              	.LVL1313:
2507:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17985              		.loc 1 2507 2 view .LVU4661
 17986 000c FFF7FEFF 		bl	dn_mulpow10
 17987              	.LVL1314:
2508:src/xeq.c     **** }
 17988              		.loc 1 2508 2 is_stmt 1 view .LVU4662
2508:src/xeq.c     **** }
 17989              		.loc 1 2508 9 is_stmt 0 view .LVU4663
 17990 0010 01A9     		add	r1, sp, #4
 17991 0012 2046     		mov	r0, r4
 17992 0014 FFF7FEFF 		bl	decNumberPow10
 17993              	.LVL1315:
2509:src/xeq.c     **** 
 17994              		.loc 1 2509 1 view .LVU4664
 17995 0018 0AB0     		add	sp, sp, #40
 17996              		.cfi_def_cfa_offset 8
 17997              		@ sp needed
 17998 001a 10BD     		pop	{r4, pc}
2509:src/xeq.c     **** 
 17999              		.loc 1 2509 1 view .LVU4665
 18000              		.cfi_endproc
 18001              	.LFE176:
 18003              		.section	.text.convPR2DB,"ax",%progbits
 18004              		.align	1
 18005              		.p2align 2,,3
 18006              		.global	convPR2DB
 18007              		.syntax unified
 18008              		.thumb
 18009              		.thumb_func
 18010              		.fpu fpv4-sp-d16
 18012              	convPR2DB:
 18013              	.LVL1316:
 18014              	.LFB177:
2511:src/xeq.c     **** 	decNumber t;
 18015              		.loc 1 2511 56 is_stmt 1 view -0
 18016              		.cfi_startproc
 18017              		@ args = 0, pretend = 0, frame = 40
 18018              		@ frame_needed = 0, uses_anonymous_args = 0
2512:src/xeq.c     **** 	dn_log10(&t, x);
 18019              		.loc 1 2512 2 view .LVU4667
2513:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18020              		.loc 1 2513 2 view .LVU4668
2511:src/xeq.c     **** 	decNumber t;
 18021              		.loc 1 2511 56 is_stmt 0 view .LVU4669
ARM GAS  /tmp/ccaPnj5t.s 			page 493


 18022 0000 10B5     		push	{r4, lr}
 18023              		.cfi_def_cfa_offset 8
 18024              		.cfi_offset 4, -8
 18025              		.cfi_offset 14, -4
 18026 0002 8AB0     		sub	sp, sp, #40
 18027              		.cfi_def_cfa_offset 48
2511:src/xeq.c     **** 	decNumber t;
 18028              		.loc 1 2511 56 view .LVU4670
 18029 0004 0446     		mov	r4, r0
2513:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18030              		.loc 1 2513 2 view .LVU4671
 18031 0006 01A8     		add	r0, sp, #4
 18032              	.LVL1317:
2513:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18033              		.loc 1 2513 2 view .LVU4672
 18034 0008 FFF7FEFF 		bl	dn_log10
 18035              	.LVL1318:
2514:src/xeq.c     **** }
 18036              		.loc 1 2514 2 is_stmt 1 view .LVU4673
2514:src/xeq.c     **** }
 18037              		.loc 1 2514 9 is_stmt 0 view .LVU4674
 18038 000c 2046     		mov	r0, r4
 18039 000e 01A9     		add	r1, sp, #4
 18040 0010 0122     		movs	r2, #1
 18041 0012 FFF7FEFF 		bl	dn_mulpow10
 18042              	.LVL1319:
2515:src/xeq.c     **** 
 18043              		.loc 1 2515 1 view .LVU4675
 18044 0016 0AB0     		add	sp, sp, #40
 18045              		.cfi_def_cfa_offset 8
 18046              		@ sp needed
 18047 0018 10BD     		pop	{r4, pc}
2515:src/xeq.c     **** 
 18048              		.loc 1 2515 1 view .LVU4676
 18049              		.cfi_endproc
 18050              	.LFE177:
 18052 001a 00BF     		.section	.text.do_conv,"ax",%progbits
 18053              		.align	1
 18054              		.p2align 2,,3
 18055              		.global	do_conv
 18056              		.syntax unified
 18057              		.thumb
 18058              		.thumb_func
 18059              		.fpu fpv4-sp-d16
 18061              	do_conv:
 18062              	.LVL1320:
 18063              	.LFB178:
2518:src/xeq.c     **** 	decNumber m;
 18064              		.loc 1 2518 66 is_stmt 1 view -0
 18065              		.cfi_startproc
 18066              		@ args = 0, pretend = 0, frame = 40
 18067              		@ frame_needed = 0, uses_anonymous_args = 0
2519:src/xeq.c     **** 	const unsigned int conv = arg / 2;
 18068              		.loc 1 2519 2 view .LVU4678
2520:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18069              		.loc 1 2520 2 view .LVU4679
2521:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 494


 18070              		.loc 1 2521 2 view .LVU4680
2523:src/xeq.c     **** 		decNumberCopy(r, x);
 18071              		.loc 1 2523 2 view .LVU4681
2518:src/xeq.c     **** 	decNumber m;
 18072              		.loc 1 2518 66 is_stmt 0 view .LVU4682
 18073 0000 70B5     		push	{r4, r5, r6, lr}
 18074              		.cfi_def_cfa_offset 16
 18075              		.cfi_offset 4, -16
 18076              		.cfi_offset 5, -12
 18077              		.cfi_offset 6, -8
 18078              		.cfi_offset 14, -4
2523:src/xeq.c     **** 		decNumberCopy(r, x);
 18079              		.loc 1 2523 5 view .LVU4683
 18080 0002 4D29     		cmp	r1, #77
2518:src/xeq.c     **** 	decNumber m;
 18081              		.loc 1 2518 66 view .LVU4684
 18082 0004 8AB0     		sub	sp, sp, #40
 18083              		.cfi_def_cfa_offset 56
2518:src/xeq.c     **** 	decNumber m;
 18084              		.loc 1 2518 66 view .LVU4685
 18085 0006 1546     		mov	r5, r2
2523:src/xeq.c     **** 		decNumberCopy(r, x);
 18086              		.loc 1 2523 5 view .LVU4686
 18087 0008 15D8     		bhi	.L1263
2528:src/xeq.c     **** 
 18088              		.loc 1 2528 2 is_stmt 1 view .LVU4687
 18089 000a 0D4B     		ldr	r3, .L1265
 18090 000c 0646     		mov	r6, r0
2520:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18091              		.loc 1 2520 21 is_stmt 0 view .LVU4688
 18092 000e 4808     		lsrs	r0, r1, #1
 18093              	.LVL1321:
2520:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18094              		.loc 1 2520 21 view .LVU4689
 18095 0010 0C46     		mov	r4, r1
2528:src/xeq.c     **** 
 18096              		.loc 1 2528 2 view .LVU4690
 18097 0012 03EB0010 		add	r0, r3, r0, lsl #4
 18098 0016 01A9     		add	r1, sp, #4
 18099              	.LVL1322:
2528:src/xeq.c     **** 
 18100              		.loc 1 2528 2 view .LVU4691
 18101 0018 FFF7FEFF 		bl	decimal64ToNumber
 18102              	.LVL1323:
2530:src/xeq.c     **** 		dn_divide(r, x, &m);
 18103              		.loc 1 2530 2 is_stmt 1 view .LVU4692
2530:src/xeq.c     **** 		dn_divide(r, x, &m);
 18104              		.loc 1 2530 5 is_stmt 0 view .LVU4693
 18105 001c E307     		lsls	r3, r4, #31
2531:src/xeq.c     **** 	else			// imperial to metric
 18106              		.loc 1 2531 3 view .LVU4694
 18107 001e 01AA     		add	r2, sp, #4
 18108 0020 2946     		mov	r1, r5
 18109 0022 3046     		mov	r0, r6
2530:src/xeq.c     **** 		dn_divide(r, x, &m);
 18110              		.loc 1 2530 5 view .LVU4695
 18111 0024 03D5     		bpl	.L1264
ARM GAS  /tmp/ccaPnj5t.s 			page 495


2533:src/xeq.c     **** }
 18112              		.loc 1 2533 3 is_stmt 1 view .LVU4696
 18113 0026 FFF7FEFF 		bl	dn_multiply
 18114              	.LVL1324:
2534:src/xeq.c     **** 
 18115              		.loc 1 2534 1 is_stmt 0 view .LVU4697
 18116 002a 0AB0     		add	sp, sp, #40
 18117              		.cfi_remember_state
 18118              		.cfi_def_cfa_offset 16
 18119              		@ sp needed
 18120 002c 70BD     		pop	{r4, r5, r6, pc}
 18121              	.LVL1325:
 18122              	.L1264:
 18123              		.cfi_restore_state
2531:src/xeq.c     **** 	else			// imperial to metric
 18124              		.loc 1 2531 3 is_stmt 1 view .LVU4698
 18125 002e FFF7FEFF 		bl	dn_divide
 18126              	.LVL1326:
2534:src/xeq.c     **** 
 18127              		.loc 1 2534 1 is_stmt 0 view .LVU4699
 18128 0032 0AB0     		add	sp, sp, #40
 18129              		.cfi_remember_state
 18130              		.cfi_def_cfa_offset 16
 18131              		@ sp needed
 18132 0034 70BD     		pop	{r4, r5, r6, pc}
 18133              	.LVL1327:
 18134              	.L1263:
 18135              		.cfi_restore_state
2524:src/xeq.c     **** 		return;
 18136              		.loc 1 2524 3 is_stmt 1 view .LVU4700
 18137 0036 1146     		mov	r1, r2
 18138              	.LVL1328:
2524:src/xeq.c     **** 		return;
 18139              		.loc 1 2524 3 is_stmt 0 view .LVU4701
 18140 0038 FFF7FEFF 		bl	decNumberCopy
 18141              	.LVL1329:
2525:src/xeq.c     **** 	}
 18142              		.loc 1 2525 3 is_stmt 1 view .LVU4702
2534:src/xeq.c     **** 
 18143              		.loc 1 2534 1 is_stmt 0 view .LVU4703
 18144 003c 0AB0     		add	sp, sp, #40
 18145              		.cfi_def_cfa_offset 16
 18146              		@ sp needed
 18147 003e 70BD     		pop	{r4, r5, r6, pc}
 18148              	.LVL1330:
 18149              	.L1266:
2534:src/xeq.c     **** 
 18150              		.loc 1 2534 1 view .LVU4704
 18151              		.align	2
 18152              	.L1265:
 18153 0040 00000000 		.word	cnsts_conv
 18154              		.cfi_endproc
 18155              	.LFE178:
 18157              		.section	.text.cmdconv,"ax",%progbits
 18158              		.align	1
 18159              		.p2align 2,,3
 18160              		.global	cmdconv
ARM GAS  /tmp/ccaPnj5t.s 			page 496


 18161              		.syntax unified
 18162              		.thumb
 18163              		.thumb_func
 18164              		.fpu fpv4-sp-d16
 18166              	cmdconv:
 18167              	.LVL1331:
 18168              	.LFB179:
2536:src/xeq.c     **** 	decNumber x, r;
 18169              		.loc 1 2536 46 is_stmt 1 view -0
 18170              		.cfi_startproc
 18171              		@ args = 0, pretend = 0, frame = 72
 18172              		@ frame_needed = 0, uses_anonymous_args = 0
2537:src/xeq.c     **** 
 18173              		.loc 1 2537 2 view .LVU4706
2539:src/xeq.c     **** 		return;
 18174              		.loc 1 2539 2 view .LVU4707
2539:src/xeq.c     **** 		return;
 18175              		.loc 1 2539 6 is_stmt 0 view .LVU4708
 18176 0000 0E4B     		ldr	r3, .L1275
 18177 0002 1B68     		ldr	r3, [r3]
 18178 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2539:src/xeq.c     **** 		return;
 18179              		.loc 1 2539 5 view .LVU4709
 18180 0008 DB07     		lsls	r3, r3, #31
 18181 000a 00D5     		bpl	.L1274
 18182 000c 7047     		bx	lr
 18183              	.L1274:
2536:src/xeq.c     **** 	decNumber x, r;
 18184              		.loc 1 2536 46 view .LVU4710
 18185 000e 10B5     		push	{r4, lr}
 18186              		.cfi_def_cfa_offset 8
 18187              		.cfi_offset 4, -8
 18188              		.cfi_offset 14, -4
 18189 0010 92B0     		sub	sp, sp, #72
 18190              		.cfi_def_cfa_offset 80
 18191 0012 0446     		mov	r4, r0
2542:src/xeq.c     **** 	do_conv(&r, arg, &x);
 18192              		.loc 1 2542 2 is_stmt 1 view .LVU4711
 18193              	.LVL1332:
 18194              	.LBB2913:
 18195              	.LBI2913:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18196              		.loc 1 818 12 view .LVU4712
 18197              	.LBB2914:
 819:src/xeq.c     **** }
 18198              		.loc 1 819 2 view .LVU4713
 819:src/xeq.c     **** }
 18199              		.loc 1 819 9 is_stmt 0 view .LVU4714
 18200 0014 6421     		movs	r1, #100
 18201              	.LVL1333:
 819:src/xeq.c     **** }
 18202              		.loc 1 819 9 view .LVU4715
 18203 0016 6846     		mov	r0, sp
 18204              	.LVL1334:
 819:src/xeq.c     **** }
 18205              		.loc 1 819 9 view .LVU4716
 18206 0018 FFF7FEFF 		bl	getRegister
ARM GAS  /tmp/ccaPnj5t.s 			page 497


 18207              	.LVL1335:
 819:src/xeq.c     **** }
 18208              		.loc 1 819 9 view .LVU4717
 18209              	.LBE2914:
 18210              	.LBE2913:
2543:src/xeq.c     **** 	setlastX();
 18211              		.loc 1 2543 2 is_stmt 1 view .LVU4718
 18212 001c 6A46     		mov	r2, sp
 18213 001e 2146     		mov	r1, r4
 18214 0020 09A8     		add	r0, sp, #36
 18215 0022 FFF7FEFF 		bl	do_conv
 18216              	.LVL1336:
2544:src/xeq.c     **** 	setX(&r);
 18217              		.loc 1 2544 2 view .LVU4719
 18218              	.LBB2915:
 18219              	.LBI2915:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 18220              		.loc 1 786 6 view .LVU4720
 18221              	.LBB2916:
 787:src/xeq.c     **** }
 18222              		.loc 1 787 2 view .LVU4721
 18223 0026 6421     		movs	r1, #100
 18224 0028 6C20     		movs	r0, #108
 18225 002a FFF7FEFF 		bl	copyreg_n
 18226              	.LVL1337:
 18227              	.LBE2916:
 18228              	.LBE2915:
2545:src/xeq.c     **** }
 18229              		.loc 1 2545 2 view .LVU4722
 18230              	.LBB2917:
 18231              	.LBI2917:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 18232              		.loc 1 822 6 view .LVU4723
 18233              	.LBB2918:
 823:src/xeq.c     **** }
 18234              		.loc 1 823 2 view .LVU4724
 18235 002e 09A9     		add	r1, sp, #36
 18236              	.LVL1338:
 823:src/xeq.c     **** }
 18237              		.loc 1 823 2 is_stmt 0 view .LVU4725
 18238 0030 6420     		movs	r0, #100
 18239 0032 FFF7FEFF 		bl	setRegister
 18240              	.LVL1339:
 823:src/xeq.c     **** }
 18241              		.loc 1 823 2 view .LVU4726
 18242              	.LBE2918:
 18243              	.LBE2917:
2546:src/xeq.c     **** 
 18244              		.loc 1 2546 1 view .LVU4727
 18245 0036 12B0     		add	sp, sp, #72
 18246              		.cfi_def_cfa_offset 8
 18247              		@ sp needed
 18248 0038 10BD     		pop	{r4, pc}
 18249              	.LVL1340:
 18250              	.L1276:
2546:src/xeq.c     **** 
 18251              		.loc 1 2546 1 view .LVU4728
ARM GAS  /tmp/ccaPnj5t.s 			page 498


 18252 003a 00BF     		.align	2
 18253              	.L1275:
 18254 003c 00000000 		.word	main_ram
 18255              		.cfi_endproc
 18256              	.LFE179:
 18258              		.section	.text.fin_tst,"ax",%progbits
 18259              		.align	1
 18260              		.p2align 2,,3
 18261              		.global	fin_tst
 18262              		.syntax unified
 18263              		.thumb
 18264              		.thumb_func
 18265              		.fpu fpv4-sp-d16
 18267              	fin_tst:
 18268              	.LVL1341:
 18269              	.LFB180:
2551:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18270              		.loc 1 2551 27 is_stmt 1 view -0
 18271              		.cfi_startproc
 18272              		@ args = 0, pretend = 0, frame = 0
 18273              		@ frame_needed = 0, uses_anonymous_args = 0
 18274              		@ link register save eliminated.
2552:src/xeq.c     **** 	if (Running || XromRunning) {
 18275              		.loc 1 2552 2 view .LVU4730
2552:src/xeq.c     **** 	if (Running || XromRunning) {
 18276              		.loc 1 2552 31 is_stmt 0 view .LVU4731
 18277 0000 30B1     		cbz	r0, .L1284
 18278              	.LVL1342:
2553:src/xeq.c     **** 		if (! a && incpc())
 18279              		.loc 1 2553 2 is_stmt 1 view .LVU4732
2553:src/xeq.c     **** 		if (! a && incpc())
 18280              		.loc 1 2553 14 is_stmt 0 view .LVU4733
 18281 0002 0A4A     		ldr	r2, .L1286
2553:src/xeq.c     **** 		if (! a && incpc())
 18282              		.loc 1 2553 6 view .LVU4734
 18283 0004 0A4B     		ldr	r3, .L1286+4
2553:src/xeq.c     **** 		if (! a && incpc())
 18284              		.loc 1 2553 14 view .LVU4735
 18285 0006 1268     		ldr	r2, [r2]
 18286 0008 1B68     		ldr	r3, [r3]
 18287 000a 1343     		orrs	r3, r2, r3
 18288 000c 0CD0     		beq	.L1285
2565:src/xeq.c     **** 
 18289              		.loc 1 2565 1 view .LVU4736
 18290 000e 7047     		bx	lr
 18291              	.LVL1343:
 18292              	.L1284:
2553:src/xeq.c     **** 		if (! a && incpc())
 18293              		.loc 1 2553 2 is_stmt 1 view .LVU4737
2553:src/xeq.c     **** 		if (! a && incpc())
 18294              		.loc 1 2553 14 is_stmt 0 view .LVU4738
 18295 0010 064A     		ldr	r2, .L1286
2553:src/xeq.c     **** 		if (! a && incpc())
 18296              		.loc 1 2553 6 view .LVU4739
 18297 0012 074B     		ldr	r3, .L1286+4
2553:src/xeq.c     **** 		if (! a && incpc())
 18298              		.loc 1 2553 14 view .LVU4740
ARM GAS  /tmp/ccaPnj5t.s 			page 499


 18299 0014 1268     		ldr	r2, [r2]
 18300 0016 1B68     		ldr	r3, [r3]
 18301 0018 1343     		orrs	r3, r2, r3
 18302 001a 03D1     		bne	.L1280
2552:src/xeq.c     **** 	if (Running || XromRunning) {
 18303              		.loc 1 2552 31 view .LVU4741
 18304 001c 054B     		ldr	r3, .L1286+8
 18305              	.LVL1344:
 18306              	.L1281:
2558:src/xeq.c     **** #ifdef INFRARED
 18307              		.loc 1 2558 3 is_stmt 1 view .LVU4742
2558:src/xeq.c     **** #ifdef INFRARED
 18308              		.loc 1 2558 11 is_stmt 0 view .LVU4743
 18309 001e 064A     		ldr	r2, .L1286+12
 18310 0020 1360     		str	r3, [r2]
2565:src/xeq.c     **** 
 18311              		.loc 1 2565 1 view .LVU4744
 18312 0022 7047     		bx	lr
 18313              	.LVL1345:
 18314              	.L1280:
2565:src/xeq.c     **** 
 18315              		.loc 1 2565 1 view .LVU4745
 18316 0024 FFF7FEBF 		b	fin_tst.part.0
 18317              	.LVL1346:
 18318              	.L1285:
2552:src/xeq.c     **** 	if (Running || XromRunning) {
 18319              		.loc 1 2552 31 view .LVU4746
 18320 0028 044B     		ldr	r3, .L1286+16
 18321 002a F8E7     		b	.L1281
 18322              	.L1287:
 18323              		.align	2
 18324              	.L1286:
 18325 002c 00000000 		.word	XromRunning
 18326 0030 00000000 		.word	Running
 18327 0034 00000000 		.word	.LC3
 18328 0038 00000000 		.word	DispMsg
 18329 003c 00000000 		.word	.LC2
 18330              		.cfi_endproc
 18331              	.LFE180:
 18333              		.section	.text.check_mode,"ax",%progbits
 18334              		.align	1
 18335              		.p2align 2,,3
 18336              		.global	check_mode
 18337              		.syntax unified
 18338              		.thumb
 18339              		.thumb_func
 18340              		.fpu fpv4-sp-d16
 18342              	check_mode:
 18343              	.LVL1347:
 18344              	.LFB142:
2092:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
 18345              		.loc 1 2092 32 is_stmt 1 view -0
 18346              		.cfi_startproc
 18347              		@ args = 0, pretend = 0, frame = 0
 18348              		@ frame_needed = 0, uses_anonymous_args = 0
 18349              		@ link register save eliminated.
2093:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
ARM GAS  /tmp/ccaPnj5t.s 			page 500


 18350              		.loc 1 2093 2 view .LVU4748
2094:src/xeq.c     **** 
 18351              		.loc 1 2094 2 view .LVU4749
2093:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18352              		.loc 1 2093 35 is_stmt 0 view .LVU4750
 18353 0000 084B     		ldr	r3, .L1289
 18354              	.LVL1348:
2093:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18355              		.loc 1 2093 35 view .LVU4751
 18356 0002 1B68     		ldr	r3, [r3]
 18357              	.LVL1349:
2096:src/xeq.c     **** }
 18358              		.loc 1 2096 2 view .LVU4752
 18359 0004 A0F19F00 		sub	r0, #159
 18360              	.LVL1350:
2096:src/xeq.c     **** }
 18361              		.loc 1 2096 2 view .LVU4753
 18362 0008 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 18363              	.LVL1351:
2096:src/xeq.c     **** }
 18364              		.loc 1 2096 2 is_stmt 1 view .LVU4754
 18365 000c B0FA80F0 		clz	r0, r0
 18366 0010 4009     		lsrs	r0, r0, #5
 18367 0012 03F00103 		and	r3, r3, #1
 18368 0016 C01A     		subs	r0, r0, r3
 18369 0018 B0FA80F0 		clz	r0, r0
 18370 001c 4009     		lsrs	r0, r0, #5
 18371 001e FFF7FEBF 		b	fin_tst
 18372              	.LVL1352:
 18373              	.L1290:
2096:src/xeq.c     **** }
 18374              		.loc 1 2096 2 is_stmt 0 view .LVU4755
 18375 0022 00BF     		.align	2
 18376              	.L1289:
 18377 0024 00000000 		.word	main_ram
 18378              		.cfi_endproc
 18379              	.LFE142:
 18381              		.section	.text.check_dblmode,"ax",%progbits
 18382              		.align	1
 18383              		.p2align 2,,3
 18384              		.global	check_dblmode
 18385              		.syntax unified
 18386              		.thumb
 18387              		.thumb_func
 18388              		.fpu fpv4-sp-d16
 18390              	check_dblmode:
 18391              	.LVL1353:
 18392              	.LFB143:
2102:src/xeq.c     **** 	fin_tst(is_dblmode());
 18393              		.loc 1 2102 35 is_stmt 1 view -0
 18394              		.cfi_startproc
 18395              		@ args = 0, pretend = 0, frame = 0
 18396              		@ frame_needed = 0, uses_anonymous_args = 0
 18397              		@ link register save eliminated.
2103:src/xeq.c     **** }
 18398              		.loc 1 2103 2 view .LVU4757
 18399              	.LBB2919:
ARM GAS  /tmp/ccaPnj5t.s 			page 501


 18400              	.LBI2919:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 18401              		.loc 1 1100 5 view .LVU4758
 18402              	.LBB2920:
1101:src/xeq.c     **** }
 18403              		.loc 1 1101 2 view .LVU4759
1101:src/xeq.c     **** }
 18404              		.loc 1 1101 24 is_stmt 0 view .LVU4760
 18405 0000 064B     		ldr	r3, .L1292
 18406 0002 1B68     		ldr	r3, [r3]
 18407 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 18408 0008 44F20100 		movw	r0, #16385
 18409              	.LVL1354:
1101:src/xeq.c     **** }
 18410              		.loc 1 1101 24 view .LVU4761
 18411 000c 1840     		ands	r0, r0, r3
 18412              	.LBE2920:
 18413              	.LBE2919:
2103:src/xeq.c     **** }
 18414              		.loc 1 2103 2 view .LVU4762
 18415 000e A0F58040 		sub	r0, r0, #16384
 18416 0012 B0FA80F0 		clz	r0, r0
 18417 0016 4009     		lsrs	r0, r0, #5
 18418 0018 FFF7FEBF 		b	fin_tst
 18419              	.LVL1355:
 18420              	.L1293:
 18421              		.align	2
 18422              	.L1292:
 18423 001c 00000000 		.word	main_ram
 18424              		.cfi_endproc
 18425              	.LFE143:
 18427              		.section	.text.isTop,"ax",%progbits
 18428              		.align	1
 18429              		.p2align 2,,3
 18430              		.global	isTop
 18431              		.syntax unified
 18432              		.thumb
 18433              		.thumb_func
 18434              		.fpu fpv4-sp-d16
 18436              	isTop:
 18437              	.LVL1356:
 18438              	.LFB159:
2310:src/xeq.c     **** 	int top = 0;
 18439              		.loc 1 2310 27 is_stmt 1 view -0
 18440              		.cfi_startproc
 18441              		@ args = 0, pretend = 0, frame = 0
 18442              		@ frame_needed = 0, uses_anonymous_args = 0
 18443              		@ link register save eliminated.
2311:src/xeq.c     **** 
 18444              		.loc 1 2311 2 view .LVU4764
2313:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18445              		.loc 1 2313 2 view .LVU4765
2313:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18446              		.loc 1 2313 6 is_stmt 0 view .LVU4766
 18447 0000 0D4B     		ldr	r3, .L1302
 18448 0002 1868     		ldr	r0, [r3]
 18449              	.LVL1357:
ARM GAS  /tmp/ccaPnj5t.s 			page 502


2313:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18450              		.loc 1 2313 5 view .LVU4767
 18451 0004 68B1     		cbz	r0, .L1295
2314:src/xeq.c     **** 	}
 18452              		.loc 1 2314 3 is_stmt 1 view .LVU4768
2314:src/xeq.c     **** 	}
 18453              		.loc 1 2314 9 is_stmt 0 view .LVU4769
 18454 0006 0D4B     		ldr	r3, .L1302+4
 18455 0008 1B68     		ldr	r3, [r3]
 18456              	.LBB2921:
 18457              	.LBB2922:
 218:src/xeq.c     **** }
 18458              		.loc 1 218 9 view .LVU4770
 18459 000a B3F9DE27 		ldrsh	r2, [r3, #2014]
 18460              	.LBE2922:
 18461              	.LBE2921:
2314:src/xeq.c     **** 	}
 18462              		.loc 1 2314 9 view .LVU4771
 18463 000e B3F9E207 		ldrsh	r0, [r3, #2018]
 18464              	.LBB2925:
 18465              	.LBI2921:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 18466              		.loc 1 217 5 is_stmt 1 view .LVU4772
 18467              	.LBB2923:
 218:src/xeq.c     **** }
 18468              		.loc 1 218 2 view .LVU4773
 218:src/xeq.c     **** }
 18469              		.loc 1 218 57 is_stmt 0 view .LVU4774
 18470 0012 002A     		cmp	r2, #0
 18471 0014 07DB     		blt	.L1301
 18472 0016 4FF0FF33 		mov	r3, #-1
 18473              	.L1296:
 18474              	.LBE2923:
 18475              	.LBE2925:
2314:src/xeq.c     **** 	}
 18476              		.loc 1 2314 19 view .LVU4775
 18477 001a 9842     		cmp	r0, r3
 18478 001c B4BF     		ite	lt
 18479 001e 0020     		movlt	r0, #0
 18480 0020 0120     		movge	r0, #1
 18481              	.LVL1358:
 18482              	.L1295:
2316:src/xeq.c     **** }
 18483              		.loc 1 2316 2 is_stmt 1 view .LVU4776
 18484 0022 FFF7FEBF 		b	fin_tst
 18485              	.LVL1359:
 18486              	.L1301:
 18487              	.LBB2926:
 18488              	.LBB2924:
 218:src/xeq.c     **** }
 18489              		.loc 1 218 25 is_stmt 0 view .LVU4777
 18490 0026 064B     		ldr	r3, .L1302+8
 18491 0028 1B68     		ldr	r3, [r3]
 218:src/xeq.c     **** }
 18492              		.loc 1 218 57 view .LVU4778
 18493 002a 33F81230 		ldrh	r3, [r3, r2, lsl #1]
 18494 002e C3F30B03 		ubfx	r3, r3, #0, #12
ARM GAS  /tmp/ccaPnj5t.s 			page 503


 18495 0032 DB43     		mvns	r3, r3
 18496 0034 F1E7     		b	.L1296
 18497              	.L1303:
 18498 0036 00BF     		.align	2
 18499              	.L1302:
 18500 0038 00000000 		.word	Running
 18501 003c 00000000 		.word	main_ram
 18502 0040 00000000 		.word	RetStk
 18503              	.LBE2924:
 18504              	.LBE2926:
 18505              		.cfi_endproc
 18506              	.LFE159:
 18508              		.section	.text.cmdlblp,"ax",%progbits
 18509              		.align	1
 18510              		.p2align 2,,3
 18511              		.global	cmdlblp
 18512              		.syntax unified
 18513              		.thumb
 18514              		.thumb_func
 18515              		.fpu fpv4-sp-d16
 18517              	cmdlblp:
 18518              	.LVL1360:
 18519              	.LFB160:
2321:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18520              		.loc 1 2321 46 is_stmt 1 view -0
 18521              		.cfi_startproc
 18522              		@ args = 0, pretend = 0, frame = 0
 18523              		@ frame_needed = 0, uses_anonymous_args = 0
2322:src/xeq.c     **** }
 18524              		.loc 1 2322 2 view .LVU4780
2321:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18525              		.loc 1 2321 46 is_stmt 0 view .LVU4781
 18526 0000 08B5     		push	{r3, lr}
 18527              		.cfi_def_cfa_offset 8
 18528              		.cfi_offset 3, -8
 18529              		.cfi_offset 14, -4
2322:src/xeq.c     **** }
 18530              		.loc 1 2322 26 view .LVU4782
 18531 0002 084B     		ldr	r3, .L1306
 18532              	.LVL1361:
2322:src/xeq.c     **** }
 18533              		.loc 1 2322 26 view .LVU4783
 18534 0004 1B68     		ldr	r3, [r3]
 18535              	.LVL1362:
 18536              	.LBB2927:
 18537              	.LBI2927:
2196:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 18538              		.loc 1 2196 14 is_stmt 1 view .LVU4784
 18539              	.LBB2928:
2197:src/xeq.c     **** }
 18540              		.loc 1 2197 2 view .LVU4785
2197:src/xeq.c     **** }
 18541              		.loc 1 2197 9 is_stmt 0 view .LVU4786
 18542 0006 40F4C441 		orr	r1, r0, #25088
 18543              	.LVL1363:
2197:src/xeq.c     **** }
 18544              		.loc 1 2197 9 view .LVU4787
ARM GAS  /tmp/ccaPnj5t.s 			page 504


 18545 000a 0222     		movs	r2, #2
 18546 000c B3F8E007 		ldrh	r0, [r3, #2016]
 18547              	.LVL1364:
2197:src/xeq.c     **** }
 18548              		.loc 1 2197 9 view .LVU4788
 18549 0010 FFF7FEFF 		bl	find_opcode_from
 18550              	.LVL1365:
2197:src/xeq.c     **** }
 18551              		.loc 1 2197 9 view .LVU4789
 18552              	.LBE2928:
 18553              	.LBE2927:
2322:src/xeq.c     **** }
 18554              		.loc 1 2322 2 view .LVU4790
 18555 0014 0038     		subs	r0, r0, #0
2323:src/xeq.c     **** 
 18556              		.loc 1 2323 1 view .LVU4791
 18557 0016 BDE80840 		pop	{r3, lr}
 18558              		.cfi_restore 14
 18559              		.cfi_restore 3
 18560              		.cfi_def_cfa_offset 0
2322:src/xeq.c     **** }
 18561              		.loc 1 2322 2 view .LVU4792
 18562 001a 18BF     		it	ne
 18563 001c 0120     		movne	r0, #1
 18564 001e FFF7FEBF 		b	fin_tst
 18565              	.LVL1366:
 18566              	.L1307:
 18567 0022 00BF     		.align	2
 18568              	.L1306:
 18569 0024 00000000 		.word	main_ram
 18570              		.cfi_endproc
 18571              	.LFE160:
 18573              		.section	.text.cmdmultilblp,"ax",%progbits
 18574              		.align	1
 18575              		.p2align 2,,3
 18576              		.global	cmdmultilblp
 18577              		.syntax unified
 18578              		.thumb
 18579              		.thumb_func
 18580              		.fpu fpv4-sp-d16
 18582              	cmdmultilblp:
 18583              	.LVL1367:
 18584              	.LFB163:
2350:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18585              		.loc 1 2350 55 is_stmt 1 view -0
 18586              		.cfi_startproc
 18587              		@ args = 0, pretend = 0, frame = 0
 18588              		@ frame_needed = 0, uses_anonymous_args = 0
2351:src/xeq.c     **** }
 18589              		.loc 1 2351 2 view .LVU4794
2350:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18590              		.loc 1 2350 55 is_stmt 0 view .LVU4795
 18591 0000 08B5     		push	{r3, lr}
 18592              		.cfi_def_cfa_offset 8
 18593              		.cfi_offset 3, -8
 18594              		.cfi_offset 14, -4
2351:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 505


 18595              		.loc 1 2351 10 view .LVU4796
 18596 0002 0021     		movs	r1, #0
 18597              	.LVL1368:
2351:src/xeq.c     **** }
 18598              		.loc 1 2351 10 view .LVU4797
 18599 0004 FFF7FEFF 		bl	findmultilbl
 18600              	.LVL1369:
2351:src/xeq.c     **** }
 18601              		.loc 1 2351 2 view .LVU4798
 18602 0008 0038     		subs	r0, r0, #0
2352:src/xeq.c     **** 
 18603              		.loc 1 2352 1 view .LVU4799
 18604 000a BDE80840 		pop	{r3, lr}
 18605              		.cfi_restore 14
 18606              		.cfi_restore 3
 18607              		.cfi_def_cfa_offset 0
2351:src/xeq.c     **** }
 18608              		.loc 1 2351 2 view .LVU4800
 18609 000e 18BF     		it	ne
 18610 0010 0120     		movne	r0, #1
 18611 0012 FFF7FEBF 		b	fin_tst
 18612              	.LVL1370:
 18613              		.cfi_endproc
 18614              	.LFE163:
 18616 0016 00BF     		.section	.text.cmdkeyp,"ax",%progbits
 18617              		.align	1
 18618              		.p2align 2,,3
 18619              		.global	cmdkeyp
 18620              		.syntax unified
 18621              		.thumb
 18622              		.thumb_func
 18623              		.fpu fpv4-sp-d16
 18625              	cmdkeyp:
 18626              	.LVL1371:
 18627              	.LFB138:
2028:src/xeq.c     **** 	int cond = LastKey == 0;
 18628              		.loc 1 2028 46 is_stmt 1 view -0
 18629              		.cfi_startproc
 18630              		@ args = 0, pretend = 0, frame = 0
 18631              		@ frame_needed = 0, uses_anonymous_args = 0
2029:src/xeq.c     **** 	if (!cond) {
 18632              		.loc 1 2029 2 view .LVU4802
2028:src/xeq.c     **** 	int cond = LastKey == 0;
 18633              		.loc 1 2028 46 is_stmt 0 view .LVU4803
 18634 0000 70B5     		push	{r4, r5, r6, lr}
 18635              		.cfi_def_cfa_offset 16
 18636              		.cfi_offset 4, -16
 18637              		.cfi_offset 5, -12
 18638              		.cfi_offset 6, -8
 18639              		.cfi_offset 14, -4
2029:src/xeq.c     **** 	if (!cond) {
 18640              		.loc 1 2029 13 view .LVU4804
 18641 0002 104B     		ldr	r3, .L1317
 18642 0004 93F91320 		ldrsb	r2, [r3, #19]
2029:src/xeq.c     **** 	if (!cond) {
 18643              		.loc 1 2029 21 view .LVU4805
 18644 0008 002A     		cmp	r2, #0
ARM GAS  /tmp/ccaPnj5t.s 			page 506


2028:src/xeq.c     **** 	int cond = LastKey == 0;
 18645              		.loc 1 2028 46 view .LVU4806
 18646 000a 82B0     		sub	sp, sp, #8
 18647              		.cfi_def_cfa_offset 24
2029:src/xeq.c     **** 	if (!cond) {
 18648              		.loc 1 2029 21 view .LVU4807
 18649 000c 0CBF     		ite	eq
 18650 000e 0125     		moveq	r5, #1
 18651 0010 0025     		movne	r5, #0
 18652              	.LVL1372:
2030:src/xeq.c     **** 		int k = LastKey - 1;
 18653              		.loc 1 2030 2 is_stmt 1 view .LVU4808
2030:src/xeq.c     **** 		int k = LastKey - 1;
 18654              		.loc 1 2030 5 is_stmt 0 view .LVU4809
 18655 0012 05D1     		bne	.L1316
2035:src/xeq.c     **** }
 18656              		.loc 1 2035 2 is_stmt 1 view .LVU4810
 18657 0014 2846     		mov	r0, r5
 18658              	.LVL1373:
2036:src/xeq.c     **** 
 18659              		.loc 1 2036 1 is_stmt 0 view .LVU4811
 18660 0016 02B0     		add	sp, sp, #8
 18661              		.cfi_remember_state
 18662              		.cfi_def_cfa_offset 16
 18663              		@ sp needed
 18664 0018 BDE87040 		pop	{r4, r5, r6, lr}
 18665              		.cfi_restore 14
 18666              		.cfi_restore 6
 18667              		.cfi_restore 5
 18668              		.cfi_restore 4
 18669              		.cfi_def_cfa_offset 0
 18670              	.LVL1374:
2035:src/xeq.c     **** }
 18671              		.loc 1 2035 2 view .LVU4812
 18672 001c FFF7FEBF 		b	fin_tst
 18673              	.LVL1375:
 18674              	.L1316:
 18675              		.cfi_restore_state
 18676              	.LBB2929:
2031:src/xeq.c     **** 		LastKey = 0;
 18677              		.loc 1 2031 3 is_stmt 1 view .LVU4813
2032:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18678              		.loc 1 2032 3 view .LVU4814
 18679 0020 0446     		mov	r4, r0
2032:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18680              		.loc 1 2032 11 is_stmt 0 view .LVU4815
 18681 0022 0026     		movs	r6, #0
2033:src/xeq.c     **** 	}
 18682              		.loc 1 2033 26 view .LVU4816
 18683 0024 501E     		subs	r0, r2, #1
 18684              	.LVL1376:
2032:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18685              		.loc 1 2032 11 view .LVU4817
 18686 0026 DE74     		strb	r6, [r3, #19]
2033:src/xeq.c     **** 	}
 18687              		.loc 1 2033 3 is_stmt 1 view .LVU4818
2033:src/xeq.c     **** 	}
ARM GAS  /tmp/ccaPnj5t.s 			page 507


 18688              		.loc 1 2033 26 is_stmt 0 view .LVU4819
 18689 0028 FFF7FEFF 		bl	keycode_to_row_column
 18690              	.LVL1377:
2033:src/xeq.c     **** 	}
 18691              		.loc 1 2033 26 view .LVU4820
 18692 002c 0246     		mov	r2, r0
2033:src/xeq.c     **** 	}
 18693              		.loc 1 2033 3 view .LVU4821
 18694 002e 0096     		str	r6, [sp]
 18695 0030 2046     		mov	r0, r4
 18696 0032 D317     		asrs	r3, r2, #31
 18697 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 18698              	.LVL1378:
 18699              	.LBE2929:
2035:src/xeq.c     **** }
 18700              		.loc 1 2035 2 is_stmt 1 view .LVU4822
 18701 0038 2846     		mov	r0, r5
2036:src/xeq.c     **** 
 18702              		.loc 1 2036 1 is_stmt 0 view .LVU4823
 18703 003a 02B0     		add	sp, sp, #8
 18704              		.cfi_def_cfa_offset 16
 18705              		@ sp needed
 18706 003c BDE87040 		pop	{r4, r5, r6, lr}
 18707              		.cfi_restore 14
 18708              		.cfi_restore 6
 18709              		.cfi_restore 5
 18710              		.cfi_restore 4
 18711              		.cfi_def_cfa_offset 0
 18712              	.LVL1379:
2035:src/xeq.c     **** }
 18713              		.loc 1 2035 2 view .LVU4824
 18714 0040 FFF7FEBF 		b	fin_tst
 18715              	.LVL1380:
 18716              	.L1318:
2035:src/xeq.c     **** }
 18717              		.loc 1 2035 2 view .LVU4825
 18718              		.align	2
 18719              	.L1317:
 18720 0044 00000000 		.word	StateWhileOn
 18721              		.cfi_endproc
 18722              	.LFE138:
 18724              		.section	.text.do_tst,"ax",%progbits
 18725              		.align	1
 18726              		.p2align 2,,3
 18727              		.syntax unified
 18728              		.thumb
 18729              		.thumb_func
 18730              		.fpu fpv4-sp-d16
 18732              	do_tst:
 18733              	.LVL1381:
 18734              	.LFB186:
3266:src/xeq.c     **** 	int a = 0;
 18735              		.loc 1 3266 51 is_stmt 1 view -0
 18736              		.cfi_startproc
 18737              		@ args = 0, pretend = 0, frame = 112
 18738              		@ frame_needed = 0, uses_anonymous_args = 0
3267:src/xeq.c     **** 	int iszero, isneg;
ARM GAS  /tmp/ccaPnj5t.s 			page 508


 18739              		.loc 1 3267 2 view .LVU4827
3268:src/xeq.c     **** 
 18740              		.loc 1 3268 2 view .LVU4828
3270:src/xeq.c     **** 
 18741              		.loc 1 3270 2 view .LVU4829
 18742              	.LBB2930:
 18743              	.LBI2930:
1314:src/xeq.c     **** 	process_cmdline();
 18744              		.loc 1 1314 6 view .LVU4830
 18745              	.LBE2930:
1315:src/xeq.c     **** 	set_lift();
 18746              		.loc 1 1315 2 view .LVU4831
 18747              	.LBB2945:
 18748              	.LBB2931:
 18749              	.LBI2931:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 18750              		.loc 1 1208 6 view .LVU4832
 18751              	.LBB2932:
1209:src/xeq.c     **** 
 18752              		.loc 1 1209 2 view .LVU4833
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18753              		.loc 1 1211 2 view .LVU4834
 18754              	.LBE2932:
 18755              	.LBE2931:
 18756              	.LBE2945:
3266:src/xeq.c     **** 	int a = 0;
 18757              		.loc 1 3266 51 is_stmt 0 view .LVU4835
 18758 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 18759              		.cfi_def_cfa_offset 28
 18760              		.cfi_offset 4, -28
 18761              		.cfi_offset 5, -24
 18762              		.cfi_offset 6, -20
 18763              		.cfi_offset 7, -16
 18764              		.cfi_offset 8, -12
 18765              		.cfi_offset 9, -8
 18766              		.cfi_offset 14, -4
 18767              	.LBB2946:
 18768              	.LBB2936:
 18769              	.LBB2933:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18770              		.loc 1 1211 6 view .LVU4836
 18771 0004 584D     		ldr	r5, .L1354
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18772              		.loc 1 1211 5 view .LVU4837
 18773 0006 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 18774              	.LBE2933:
 18775              	.LBE2936:
 18776              	.LBE2946:
3266:src/xeq.c     **** 	int a = 0;
 18777              		.loc 1 3266 51 view .LVU4838
 18778 0008 9DB0     		sub	sp, sp, #116
 18779              		.cfi_def_cfa_offset 144
3266:src/xeq.c     **** 	int a = 0;
 18780              		.loc 1 3266 51 view .LVU4839
 18781 000a 8046     		mov	r8, r0
 18782 000c 0C46     		mov	r4, r1
 18783              	.LBB2947:
ARM GAS  /tmp/ccaPnj5t.s 			page 509


 18784              	.LBB2937:
 18785              	.LBB2934:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18786              		.loc 1 1211 5 view .LVU4840
 18787 000e 002B     		cmp	r3, #0
 18788 0010 5DD1     		bne	.L1352
 18789              	.LVL1382:
 18790              	.L1320:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18791              		.loc 1 1211 5 view .LVU4841
 18792              	.LBE2934:
 18793              	.LBE2937:
 18794              	.LBE2947:
1316:src/xeq.c     **** }
 18795              		.loc 1 1316 2 is_stmt 1 view .LVU4842
 18796              	.LBB2948:
 18797              	.LBB2938:
 18798              	.LBI2938:
 761:src/xeq.c     ****     State2.state_lift = 1;
 18799              		.loc 1 761 6 view .LVU4843
 18800              	.LBB2939:
 762:src/xeq.c     **** }
 18801              		.loc 1 762 5 view .LVU4844
 762:src/xeq.c     **** }
 18802              		.loc 1 762 23 is_stmt 0 view .LVU4845
 18803 0012 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 18804              	.LBE2939:
 18805              	.LBE2938:
 18806              	.LBE2948:
3272:src/xeq.c     **** 		unsigned long long int xv, yv;
 18807              		.loc 1 3272 6 view .LVU4846
 18808 0014 554A     		ldr	r2, .L1354+4
 18809              	.LBB2949:
 18810              	.LBB2942:
 18811              	.LBB2940:
 762:src/xeq.c     **** }
 18812              		.loc 1 762 23 view .LVU4847
 18813 0016 43F04003 		orr	r3, r3, #64
 18814              	.LBE2940:
 18815              	.LBE2942:
 18816              	.LBE2949:
3272:src/xeq.c     **** 		unsigned long long int xv, yv;
 18817              		.loc 1 3272 6 view .LVU4848
 18818 001a 1268     		ldr	r2, [r2]
 18819              	.LBB2950:
 18820              	.LBB2943:
 18821              	.LBB2941:
 762:src/xeq.c     **** }
 18822              		.loc 1 762 23 view .LVU4849
 18823 001c EB75     		strb	r3, [r5, #23]
 18824              	.LBE2941:
 18825              	.LBE2943:
 18826              	.LBE2950:
3272:src/xeq.c     **** 		unsigned long long int xv, yv;
 18827              		.loc 1 3272 2 is_stmt 1 view .LVU4850
3272:src/xeq.c     **** 		unsigned long long int xv, yv;
 18828              		.loc 1 3272 6 is_stmt 0 view .LVU4851
ARM GAS  /tmp/ccaPnj5t.s 			page 510


 18829 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3272:src/xeq.c     **** 		unsigned long long int xv, yv;
 18830              		.loc 1 3272 5 view .LVU4852
 18831 0022 DB07     		lsls	r3, r3, #31
 18832 0024 2CD5     		bpl	.L1321
 18833              	.LBB2951:
3273:src/xeq.c     **** 		int xs, ys;
 18834              		.loc 1 3273 3 is_stmt 1 view .LVU4853
3274:src/xeq.c     **** 
 18835              		.loc 1 3274 3 view .LVU4854
3276:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18836              		.loc 1 3276 3 view .LVU4855
 18837              	.LBB2952:
 18838              	.LBI2952:
1424:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 18839              		.loc 1 1424 15 view .LVU4856
 18840              	.LBB2953:
1425:src/xeq.c     **** }
 18841              		.loc 1 1425 2 view .LVU4857
1425:src/xeq.c     **** }
 18842              		.loc 1 1425 9 is_stmt 0 view .LVU4858
 18843 0026 6420     		movs	r0, #100
 18844 0028 FFF7FEFF 		bl	get_reg_n_int
 18845              	.LVL1383:
 18846              	.LBE2953:
 18847              	.LBE2952:
3276:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18848              		.loc 1 3276 8 view .LVU4859
 18849 002c 0AAA     		add	r2, sp, #40
 18850 002e FFF7FEFF 		bl	extract_value
 18851              	.LVL1384:
3277:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18852              		.loc 1 3277 6 view .LVU4860
 18853 0032 B8F5FA6F 		cmp	r8, #2000
3276:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18854              		.loc 1 3276 8 view .LVU4861
 18855 0036 0646     		mov	r6, r0
 18856 0038 0F46     		mov	r7, r1
 18857              	.LVL1385:
3277:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18858              		.loc 1 3277 3 is_stmt 1 view .LVU4862
3277:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18859              		.loc 1 3277 6 is_stmt 0 view .LVU4863
 18860 003a 54DB     		blt	.L1322
3278:src/xeq.c     **** 			ys = 0;
 18861              		.loc 1 3278 4 is_stmt 1 view .LVU4864
3278:src/xeq.c     **** 			ys = 0;
 18862              		.loc 1 3278 30 is_stmt 0 view .LVU4865
 18863 003c A8F61B08 		subw	r8, r8, #2075
 18864              	.LVL1386:
3278:src/xeq.c     **** 			ys = 0;
 18865              		.loc 1 3278 7 view .LVU4866
 18866 0040 4FEAE879 		asr	r9, r8, #31
 18867              	.LVL1387:
3279:src/xeq.c     **** 		} else
 18868              		.loc 1 3279 4 is_stmt 1 view .LVU4867
 18869 0044 0022     		movs	r2, #0
ARM GAS  /tmp/ccaPnj5t.s 			page 511


 18870              	.LVL1388:
 18871              	.L1323:
3283:src/xeq.c     **** 			iszero = 1;
 18872              		.loc 1 3283 3 view .LVU4868
3283:src/xeq.c     **** 			iszero = 1;
 18873              		.loc 1 3283 6 is_stmt 0 view .LVU4869
 18874 0046 56EA0703 		orrs	r3, r6, r7
 18875 004a 43D1     		bne	.L1324
3283:src/xeq.c     **** 			iszero = 1;
 18876              		.loc 1 3283 15 discriminator 1 view .LVU4870
 18877 004c 58EA0903 		orrs	r3, r8, r9
 18878 0050 53D0     		beq	.L1325
 18879              	.L1327:
 18880 0052 0A9B     		ldr	r3, [sp, #40]
3288:src/xeq.c     **** 			if (xs)		// both negative
 18881              		.loc 1 3288 6 view .LVU4871
 18882 0054 9A42     		cmp	r2, r3
3286:src/xeq.c     **** 
 18883              		.loc 1 3286 24 view .LVU4872
 18884 0056 4FF00000 		mov	r0, #0
 18885              	.LVL1389:
3288:src/xeq.c     **** 			if (xs)		// both negative
 18886              		.loc 1 3288 3 is_stmt 1 view .LVU4873
3288:src/xeq.c     **** 			if (xs)		// both negative
 18887              		.loc 1 3288 6 is_stmt 0 view .LVU4874
 18888 005a 53D0     		beq	.L1328
 18889              	.LVL1390:
 18890              	.L1331:
3288:src/xeq.c     **** 			if (xs)		// both negative
 18891              		.loc 1 3288 6 view .LVU4875
 18892              	.LBE2951:
3316:src/xeq.c     **** 	case TST_APX:
 18893              		.loc 1 3316 2 is_stmt 1 view .LVU4876
 18894 005c 062C     		cmp	r4, #6
 18895 005e 30D8     		bhi	.L1337
 18896 0060 DFE804F0 		tbb	[pc, r4]
 18897              	.L1339:
 18898 0064 09       		.byte	(.L1336-.L1339)/2
 18899 0065 58       		.byte	(.L1351-.L1339)/2
 18900 0066 09       		.byte	(.L1336-.L1339)/2
 18901 0067 2E       		.byte	(.L1342-.L1339)/2
 18902 0068 67       		.byte	(.L1341-.L1339)/2
 18903 0069 6C       		.byte	(.L1340-.L1339)/2
 18904 006a 04       		.byte	(.L1338-.L1339)/2
 18905 006b 00       		.p2align 1
 18906              	.L1338:
3323:src/xeq.c     **** 	default:	a = 0;			break;
 18907              		.loc 1 3323 15 view .LVU4877
3323:src/xeq.c     **** 	default:	a = 0;			break;
 18908              		.loc 1 3323 26 is_stmt 0 view .LVU4878
 18909 006c 002B     		cmp	r3, #0
 18910 006e 6AD0     		beq	.L1346
3323:src/xeq.c     **** 	default:	a = 0;			break;
 18911              		.loc 1 3323 26 discriminator 2 view .LVU4879
 18912 0070 0038     		subs	r0, r0, #0
3323:src/xeq.c     **** 	default:	a = 0;			break;
 18913              		.loc 1 3323 26 discriminator 2 view .LVU4880
ARM GAS  /tmp/ccaPnj5t.s 			page 512


 18914 0072 18BF     		it	ne
 18915 0074 0120     		movne	r0, #1
 18916              	.LVL1391:
 18917              	.L1336:
3327:src/xeq.c     **** }
 18918              		.loc 1 3327 7 is_stmt 1 view .LVU4881
 18919 0076 FFF7FEFF 		bl	fin_tst
 18920              	.LVL1392:
3328:src/xeq.c     **** 
 18921              		.loc 1 3328 1 is_stmt 0 view .LVU4882
 18922 007a 1DB0     		add	sp, sp, #116
 18923              		.cfi_remember_state
 18924              		.cfi_def_cfa_offset 28
 18925              		@ sp needed
 18926 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 18927              	.LVL1393:
 18928              	.L1321:
 18929              		.cfi_restore_state
 18930              	.LBB2954:
3296:src/xeq.c     **** 
 18931              		.loc 1 3296 3 is_stmt 1 view .LVU4883
3298:src/xeq.c     **** 		if (decNumberIsNaN(&x))
 18932              		.loc 1 3298 3 view .LVU4884
 18933              	.LBB2955:
 18934              	.LBI2955:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18935              		.loc 1 818 12 view .LVU4885
 18936              	.LBB2956:
 819:src/xeq.c     **** }
 18937              		.loc 1 819 2 view .LVU4886
 819:src/xeq.c     **** }
 18938              		.loc 1 819 9 is_stmt 0 view .LVU4887
 18939 0080 0AA8     		add	r0, sp, #40
 18940              	.LVL1394:
 819:src/xeq.c     **** }
 18941              		.loc 1 819 9 view .LVU4888
 18942 0082 6421     		movs	r1, #100
 18943 0084 FFF7FEFF 		bl	getRegister
 18944              	.LVL1395:
 819:src/xeq.c     **** }
 18945              		.loc 1 819 9 view .LVU4889
 18946              	.LBE2956:
 18947              	.LBE2955:
3299:src/xeq.c     **** 			goto flse;
 18948              		.loc 1 3299 3 is_stmt 1 view .LVU4890
3299:src/xeq.c     **** 			goto flse;
 18949              		.loc 1 3299 6 is_stmt 0 view .LVU4891
 18950 0088 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 18951 008c 13F0300F 		tst	r3, #48
 18952 0090 17D1     		bne	.L1337
3302:src/xeq.c     **** 		if (decNumberIsNaN(&t))
 18953              		.loc 1 3302 3 is_stmt 1 view .LVU4892
 18954 0092 01A8     		add	r0, sp, #4
 18955 0094 4146     		mov	r1, r8
 18956 0096 FFF7FEFF 		bl	getRegister
 18957              	.LVL1396:
3303:src/xeq.c     **** 			goto flse;
ARM GAS  /tmp/ccaPnj5t.s 			page 513


 18958              		.loc 1 3303 3 view .LVU4893
3303:src/xeq.c     **** 			goto flse;
 18959              		.loc 1 3303 6 is_stmt 0 view .LVU4894
 18960 009a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 18961 009e 13F0300F 		tst	r3, #48
 18962 00a2 0ED1     		bne	.L1337
3306:src/xeq.c     **** 			decNumberRnd(&x, &x);
 18963              		.loc 1 3306 3 is_stmt 1 view .LVU4895
3306:src/xeq.c     **** 			decNumberRnd(&x, &x);
 18964              		.loc 1 3306 6 is_stmt 0 view .LVU4896
 18965 00a4 022C     		cmp	r4, #2
 18966 00a6 53D0     		beq	.L1353
 18967              	.L1334:
3311:src/xeq.c     **** 		iszero = dn_eq0(&r);
 18968              		.loc 1 3311 3 is_stmt 1 view .LVU4897
 18969 00a8 01AA     		add	r2, sp, #4
 18970 00aa 0AA9     		add	r1, sp, #40
 18971 00ac 13A8     		add	r0, sp, #76
 18972 00ae FFF7FEFF 		bl	dn_compare
 18973              	.LVL1397:
3312:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 18974              		.loc 1 3312 3 view .LVU4898
3312:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 18975              		.loc 1 3312 12 is_stmt 0 view .LVU4899
 18976 00b2 13A8     		add	r0, sp, #76
 18977 00b4 FFF7FEFF 		bl	dn_eq0
 18978              	.LVL1398:
3313:src/xeq.c     **** 	}
 18979              		.loc 1 3313 11 view .LVU4900
 18980 00b8 9DF95430 		ldrsb	r3, [sp, #84]
 18981              	.LVL1399:
3313:src/xeq.c     **** 	}
 18982              		.loc 1 3313 3 is_stmt 1 view .LVU4901
3313:src/xeq.c     **** 	}
 18983              		.loc 1 3313 11 is_stmt 0 view .LVU4902
 18984 00bc DB0F     		lsrs	r3, r3, #31
 18985              	.LVL1400:
3313:src/xeq.c     **** 	}
 18986              		.loc 1 3313 11 view .LVU4903
 18987 00be CDE7     		b	.L1331
 18988              	.LVL1401:
 18989              	.L1342:
3313:src/xeq.c     **** 	}
 18990              		.loc 1 3313 11 view .LVU4904
 18991              	.LBE2954:
3320:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18992              		.loc 1 3320 15 is_stmt 1 view .LVU4905
3320:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18993              		.loc 1 3320 25 is_stmt 0 view .LVU4906
 18994 00c0 43BB     		cbnz	r3, .L1351
 18995              	.LVL1402:
 18996              	.L1337:
3320:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 18997              		.loc 1 3320 25 view .LVU4907
 18998 00c2 0020     		movs	r0, #0
 18999              	.LVL1403:
3327:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 514


 19000              		.loc 1 3327 7 is_stmt 1 view .LVU4908
 19001 00c4 FFF7FEFF 		bl	fin_tst
 19002              	.LVL1404:
3328:src/xeq.c     **** 
 19003              		.loc 1 3328 1 is_stmt 0 view .LVU4909
 19004 00c8 1DB0     		add	sp, sp, #116
 19005              		.cfi_remember_state
 19006              		.cfi_def_cfa_offset 28
 19007              		@ sp needed
 19008 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19009              	.LVL1405:
 19010              	.L1352:
 19011              		.cfi_restore_state
 19012              	.LBB2957:
 19013              	.LBB2944:
 19014              	.LBB2935:
3328:src/xeq.c     **** 
 19015              		.loc 1 3328 1 view .LVU4910
 19016 00ce FFF7FEFF 		bl	process_cmdline.part.0
 19017              	.LVL1406:
3328:src/xeq.c     **** 
 19018              		.loc 1 3328 1 view .LVU4911
 19019 00d2 9EE7     		b	.L1320
 19020              	.LVL1407:
 19021              	.L1324:
3328:src/xeq.c     **** 
 19022              		.loc 1 3328 1 view .LVU4912
 19023              	.LBE2935:
 19024              	.LBE2944:
 19025              	.LBE2957:
 19026              	.LBB2958:
3286:src/xeq.c     **** 
 19027              		.loc 1 3286 4 is_stmt 1 view .LVU4913
3286:src/xeq.c     **** 
 19028              		.loc 1 3286 24 is_stmt 0 view .LVU4914
 19029 00d4 B945     		cmp	r9, r7
 19030 00d6 08BF     		it	eq
 19031 00d8 B045     		cmpeq	r8, r6
 19032 00da BAD1     		bne	.L1327
3286:src/xeq.c     **** 
 19033              		.loc 1 3286 31 discriminator 1 view .LVU4915
 19034 00dc 0A9B     		ldr	r3, [sp, #40]
3286:src/xeq.c     **** 
 19035              		.loc 1 3286 24 discriminator 1 view .LVU4916
 19036 00de 9342     		cmp	r3, r2
 19037 00e0 33D0     		beq	.L1344
3286:src/xeq.c     **** 
 19038              		.loc 1 3286 24 view .LVU4917
 19039 00e2 0020     		movs	r0, #0
 19040 00e4 BAE7     		b	.L1331
 19041              	.LVL1408:
 19042              	.L1322:
3281:src/xeq.c     **** 
 19043              		.loc 1 3281 4 is_stmt 1 view .LVU4918
3281:src/xeq.c     **** 
 19044              		.loc 1 3281 9 is_stmt 0 view .LVU4919
 19045 00e6 4046     		mov	r0, r8
ARM GAS  /tmp/ccaPnj5t.s 			page 515


 19046 00e8 FFF7FEFF 		bl	get_reg_n_int
 19047              	.LVL1409:
 19048 00ec 13AA     		add	r2, sp, #76
 19049 00ee FFF7FEFF 		bl	extract_value
 19050              	.LVL1410:
 19051 00f2 139A     		ldr	r2, [sp, #76]
 19052 00f4 8046     		mov	r8, r0
 19053              	.LVL1411:
3281:src/xeq.c     **** 
 19054              		.loc 1 3281 9 view .LVU4920
 19055 00f6 8946     		mov	r9, r1
 19056              	.LVL1412:
3281:src/xeq.c     **** 
 19057              		.loc 1 3281 9 view .LVU4921
 19058 00f8 A5E7     		b	.L1323
 19059              	.L1325:
3281:src/xeq.c     **** 
 19060              		.loc 1 3281 9 view .LVU4922
 19061 00fa 0A9B     		ldr	r3, [sp, #40]
3288:src/xeq.c     **** 			if (xs)		// both negative
 19062              		.loc 1 3288 6 view .LVU4923
 19063 00fc 9A42     		cmp	r2, r3
3284:src/xeq.c     **** 		else
 19064              		.loc 1 3284 11 view .LVU4924
 19065 00fe 4FF00100 		mov	r0, #1
 19066              	.LVL1413:
3288:src/xeq.c     **** 			if (xs)		// both negative
 19067              		.loc 1 3288 3 is_stmt 1 view .LVU4925
3288:src/xeq.c     **** 			if (xs)		// both negative
 19068              		.loc 1 3288 6 is_stmt 0 view .LVU4926
 19069 0102 ABD1     		bne	.L1331
 19070              	.LVL1414:
 19071              	.L1328:
3289:src/xeq.c     **** 				isneg = xv > yv;
 19072              		.loc 1 3289 4 is_stmt 1 view .LVU4927
3289:src/xeq.c     **** 				isneg = xv > yv;
 19073              		.loc 1 3289 7 is_stmt 0 view .LVU4928
 19074 0104 73B1     		cbz	r3, .L1330
3290:src/xeq.c     **** 			else		// both positive
 19075              		.loc 1 3290 5 is_stmt 1 view .LVU4929
3290:src/xeq.c     **** 			else		// both positive
 19076              		.loc 1 3290 16 is_stmt 0 view .LVU4930
 19077 0106 B945     		cmp	r9, r7
 19078 0108 08BF     		it	eq
 19079 010a B045     		cmpeq	r8, r6
 19080 010c 34BF     		ite	cc
 19081 010e 0123     		movcc	r3, #1
 19082 0110 0023     		movcs	r3, #0
 19083              	.LVL1415:
3290:src/xeq.c     **** 			else		// both positive
 19084              		.loc 1 3290 16 view .LVU4931
 19085 0112 A3E7     		b	.L1331
 19086              	.LVL1416:
 19087              	.L1351:
3290:src/xeq.c     **** 			else		// both positive
 19088              		.loc 1 3290 16 view .LVU4932
 19089              	.LBE2958:
ARM GAS  /tmp/ccaPnj5t.s 			page 516


3320:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19090              		.loc 1 3320 25 discriminator 1 view .LVU4933
 19091 0114 B0FA80F0 		clz	r0, r0
 19092              	.LVL1417:
3320:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19093              		.loc 1 3320 25 discriminator 1 view .LVU4934
 19094 0118 4009     		lsrs	r0, r0, #5
 19095              	.LVL1418:
3327:src/xeq.c     **** }
 19096              		.loc 1 3327 7 is_stmt 1 discriminator 1 view .LVU4935
 19097 011a FFF7FEFF 		bl	fin_tst
 19098              	.LVL1419:
3328:src/xeq.c     **** 
 19099              		.loc 1 3328 1 is_stmt 0 discriminator 1 view .LVU4936
 19100 011e 1DB0     		add	sp, sp, #116
 19101              		.cfi_remember_state
 19102              		.cfi_def_cfa_offset 28
 19103              		@ sp needed
 19104 0120 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19105              	.LVL1420:
 19106              	.L1330:
 19107              		.cfi_restore_state
 19108              	.LBB2959:
3292:src/xeq.c     **** 		} else
 19109              		.loc 1 3292 5 is_stmt 1 view .LVU4937
3292:src/xeq.c     **** 		} else
 19110              		.loc 1 3292 16 is_stmt 0 view .LVU4938
 19111 0124 4F45     		cmp	r7, r9
 19112 0126 08BF     		it	eq
 19113 0128 4645     		cmpeq	r6, r8
 19114 012a 34BF     		ite	cc
 19115 012c 0123     		movcc	r3, #1
 19116 012e 0023     		movcs	r3, #0
 19117              	.LVL1421:
3292:src/xeq.c     **** 		} else
 19118              		.loc 1 3292 16 view .LVU4939
 19119 0130 94E7     		b	.L1331
 19120              	.LVL1422:
 19121              	.L1341:
3292:src/xeq.c     **** 		} else
 19122              		.loc 1 3292 16 view .LVU4940
 19123              	.LBE2959:
3321:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19124              		.loc 1 3321 15 is_stmt 1 discriminator 2 view .LVU4941
3321:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19125              		.loc 1 3321 25 is_stmt 0 discriminator 2 view .LVU4942
 19126 0132 0343     		orrs	r3, r0, r3
 19127              	.LVL1423:
3321:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19128              		.loc 1 3321 25 discriminator 2 view .LVU4943
 19129 0134 14BF     		ite	ne
 19130 0136 0120     		movne	r0, #1
 19131              	.LVL1424:
3321:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19132              		.loc 1 3321 25 discriminator 2 view .LVU4944
 19133 0138 0020     		moveq	r0, #0
 19134 013a 9CE7     		b	.L1336
ARM GAS  /tmp/ccaPnj5t.s 			page 517


 19135              	.LVL1425:
 19136              	.L1340:
3322:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19137              		.loc 1 3322 15 is_stmt 1 discriminator 1 view .LVU4945
3322:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19138              		.loc 1 3322 26 is_stmt 0 discriminator 1 view .LVU4946
 19139 013c 0343     		orrs	r3, r0, r3
 19140              	.LVL1426:
3322:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19141              		.loc 1 3322 26 discriminator 1 view .LVU4947
 19142 013e 0CBF     		ite	eq
 19143 0140 0120     		moveq	r0, #1
 19144              	.LVL1427:
3322:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19145              		.loc 1 3322 26 discriminator 1 view .LVU4948
 19146 0142 0020     		movne	r0, #0
 19147 0144 97E7     		b	.L1336
 19148              	.LVL1428:
 19149              	.L1346:
3323:src/xeq.c     **** 	default:	a = 0;			break;
 19150              		.loc 1 3323 26 view .LVU4949
 19151 0146 0120     		movs	r0, #1
 19152              	.LVL1429:
3323:src/xeq.c     **** 	default:	a = 0;			break;
 19153              		.loc 1 3323 26 view .LVU4950
 19154 0148 95E7     		b	.L1336
 19155              	.LVL1430:
 19156              	.L1344:
 19157              	.LBB2960:
3323:src/xeq.c     **** 	default:	a = 0;			break;
 19158              		.loc 1 3323 26 view .LVU4951
 19159 014a 1346     		mov	r3, r2
3286:src/xeq.c     **** 
 19160              		.loc 1 3286 24 view .LVU4952
 19161 014c 0120     		movs	r0, #1
 19162 014e D9E7     		b	.L1328
 19163              	.LVL1431:
 19164              	.L1353:
3286:src/xeq.c     **** 
 19165              		.loc 1 3286 24 view .LVU4953
 19166              	.LBE2960:
 19167              	.LBB2961:
3307:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
 19168              		.loc 1 3307 4 is_stmt 1 view .LVU4954
 19169 0150 0AA9     		add	r1, sp, #40
 19170 0152 0846     		mov	r0, r1
 19171 0154 FFF7FEFF 		bl	decNumberRnd
 19172              	.LVL1432:
3308:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19173              		.loc 1 3308 4 view .LVU4955
3308:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19174              		.loc 1 3308 7 is_stmt 0 view .LVU4956
 19175 0158 B8F5FA6F 		cmp	r8, #2000
 19176 015c A4DA     		bge	.L1334
3309:src/xeq.c     **** 		}
 19177              		.loc 1 3309 5 is_stmt 1 view .LVU4957
 19178 015e 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccaPnj5t.s 			page 518


 19179 0160 0846     		mov	r0, r1
 19180 0162 FFF7FEFF 		bl	decNumberRnd
 19181              	.LVL1433:
 19182 0166 9FE7     		b	.L1334
 19183              	.L1355:
 19184              		.align	2
 19185              	.L1354:
 19186 0168 00000000 		.word	StateWhileOn
 19187 016c 00000000 		.word	main_ram
 19188              	.LBE2961:
 19189              		.cfi_endproc
 19190              	.LFE186:
 19192              		.section	.text.do_ztst,"ax",%progbits
 19193              		.align	1
 19194              		.p2align 2,,3
 19195              		.syntax unified
 19196              		.thumb
 19197              		.thumb_func
 19198              		.fpu fpv4-sp-d16
 19200              	do_ztst:
 19201              	.LVL1434:
 19202              	.LFB189:
3353:src/xeq.c     **** 	decNumber x, y;
 19203              		.loc 1 3353 79 view -0
 19204              		.cfi_startproc
 19205              		@ args = 0, pretend = 0, frame = 72
 19206              		@ frame_needed = 0, uses_anonymous_args = 0
3354:src/xeq.c     **** 
 19207              		.loc 1 3354 2 view .LVU4959
3356:src/xeq.c     **** 	if (is_intmode()) {
 19208              		.loc 1 3356 2 view .LVU4960
 19209              	.LBB2979:
 19210              	.LBI2979:
1314:src/xeq.c     **** 	process_cmdline();
 19211              		.loc 1 1314 6 view .LVU4961
 19212              	.LBE2979:
1315:src/xeq.c     **** 	set_lift();
 19213              		.loc 1 1315 2 view .LVU4962
 19214              	.LBB2994:
 19215              	.LBB2980:
 19216              	.LBI2980:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 19217              		.loc 1 1208 6 view .LVU4963
 19218              	.LBB2981:
1209:src/xeq.c     **** 
 19219              		.loc 1 1209 2 view .LVU4964
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19220              		.loc 1 1211 2 view .LVU4965
 19221              	.LBE2981:
 19222              	.LBE2980:
 19223              	.LBE2994:
3353:src/xeq.c     **** 	decNumber x, y;
 19224              		.loc 1 3353 79 is_stmt 0 view .LVU4966
 19225 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 19226              		.cfi_def_cfa_offset 20
 19227              		.cfi_offset 4, -20
 19228              		.cfi_offset 5, -16
ARM GAS  /tmp/ccaPnj5t.s 			page 519


 19229              		.cfi_offset 6, -12
 19230              		.cfi_offset 7, -8
 19231              		.cfi_offset 14, -4
 19232              	.LBB2995:
 19233              	.LBB2985:
 19234              	.LBB2982:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19235              		.loc 1 1211 6 view .LVU4967
 19236 0002 2C4C     		ldr	r4, .L1375
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19237              		.loc 1 1211 5 view .LVU4968
 19238 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 19239              	.LBE2982:
 19240              	.LBE2985:
 19241              	.LBE2995:
3353:src/xeq.c     **** 	decNumber x, y;
 19242              		.loc 1 3353 79 view .LVU4969
 19243 0006 93B0     		sub	sp, sp, #76
 19244              		.cfi_def_cfa_offset 96
3353:src/xeq.c     **** 	decNumber x, y;
 19245              		.loc 1 3353 79 view .LVU4970
 19246 0008 0546     		mov	r5, r0
 19247 000a 0F46     		mov	r7, r1
 19248 000c 1646     		mov	r6, r2
 19249              	.LBB2996:
 19250              	.LBB2986:
 19251              	.LBB2983:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19252              		.loc 1 1211 5 view .LVU4971
 19253 000e 002B     		cmp	r3, #0
 19254 0010 3FD1     		bne	.L1372
 19255              	.LVL1435:
 19256              	.L1357:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19257              		.loc 1 1211 5 view .LVU4972
 19258              	.LBE2983:
 19259              	.LBE2986:
 19260              	.LBE2996:
1316:src/xeq.c     **** }
 19261              		.loc 1 1316 2 is_stmt 1 view .LVU4973
 19262              	.LBB2997:
 19263              	.LBB2987:
 19264              	.LBI2987:
 761:src/xeq.c     ****     State2.state_lift = 1;
 19265              		.loc 1 761 6 view .LVU4974
 19266              	.LBB2988:
 762:src/xeq.c     **** }
 19267              		.loc 1 762 5 view .LVU4975
 762:src/xeq.c     **** }
 19268              		.loc 1 762 23 is_stmt 0 view .LVU4976
 19269 0012 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 19270              	.LBE2988:
 19271              	.LBE2987:
 19272              	.LBE2997:
3357:src/xeq.c     **** 		bad_mode_error();
 19273              		.loc 1 3357 6 view .LVU4977
 19274 0014 284A     		ldr	r2, .L1375+4
ARM GAS  /tmp/ccaPnj5t.s 			page 520


 19275              	.LBB2998:
 19276              	.LBB2991:
 19277              	.LBB2989:
 762:src/xeq.c     **** }
 19278              		.loc 1 762 23 view .LVU4978
 19279 0016 43F04003 		orr	r3, r3, #64
 19280              	.LBE2989:
 19281              	.LBE2991:
 19282              	.LBE2998:
3357:src/xeq.c     **** 		bad_mode_error();
 19283              		.loc 1 3357 6 view .LVU4979
 19284 001a 1268     		ldr	r2, [r2]
 19285              	.LBB2999:
 19286              	.LBB2992:
 19287              	.LBB2990:
 762:src/xeq.c     **** }
 19288              		.loc 1 762 23 view .LVU4980
 19289 001c E375     		strb	r3, [r4, #23]
 19290              	.LBE2990:
 19291              	.LBE2992:
 19292              	.LBE2999:
3357:src/xeq.c     **** 		bad_mode_error();
 19293              		.loc 1 3357 2 is_stmt 1 view .LVU4981
3357:src/xeq.c     **** 		bad_mode_error();
 19294              		.loc 1 3357 6 is_stmt 0 view .LVU4982
 19295 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3357:src/xeq.c     **** 		bad_mode_error();
 19296              		.loc 1 3357 5 view .LVU4983
 19297 0022 DB07     		lsls	r3, r3, #31
 19298 0024 06D5     		bpl	.L1358
3358:src/xeq.c     **** 		return;
 19299              		.loc 1 3358 3 is_stmt 1 view .LVU4984
 19300              	.LBB3000:
 19301              	.LBI3000:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 19302              		.loc 1 569 6 view .LVU4985
 19303              	.LBE3000:
 570:src/xeq.c     **** }
 19304              		.loc 1 570 2 view .LVU4986
 19305              	.LVL1436:
 19306              	.LBB3005:
 19307              	.LBB3001:
 19308              	.LBI3001:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19309              		.loc 1 540 5 view .LVU4987
 19310              	.LBB3002:
 541:src/xeq.c     **** 		Error = e;
 19311              		.loc 1 541 2 view .LVU4988
 541:src/xeq.c     **** 		Error = e;
 19312              		.loc 1 541 12 is_stmt 0 view .LVU4989
 19313 0026 254B     		ldr	r3, .L1375+8
 541:src/xeq.c     **** 		Error = e;
 19314              		.loc 1 541 5 view .LVU4990
 19315 0028 1A68     		ldr	r2, [r3]
 19316 002a 0AB9     		cbnz	r2, .L1356
 19317              	.LVL1437:
 19318              	.LBB3003:
ARM GAS  /tmp/ccaPnj5t.s 			page 521


 19319              	.LBI3003:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19320              		.loc 1 540 5 is_stmt 1 view .LVU4991
 19321              	.LBB3004:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 19322              		.loc 1 542 3 view .LVU4992
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 19323              		.loc 1 542 9 is_stmt 0 view .LVU4993
 19324 002c 0D22     		movs	r2, #13
 19325 002e 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 19326              		.loc 1 543 3 is_stmt 1 view .LVU4994
 19327              	.LVL1438:
 19328              	.L1356:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 19329              		.loc 1 543 3 is_stmt 0 view .LVU4995
 19330              	.LBE3004:
 19331              	.LBE3003:
 19332              	.LBE3002:
 19333              	.LBE3001:
 19334              	.LBE3005:
3367:src/xeq.c     **** 
 19335              		.loc 1 3367 1 view .LVU4996
 19336 0030 13B0     		add	sp, sp, #76
 19337              		.cfi_remember_state
 19338              		.cfi_def_cfa_offset 20
 19339              		@ sp needed
 19340 0032 F0BD     		pop	{r4, r5, r6, r7, pc}
 19341              	.LVL1439:
 19342              	.L1358:
 19343              		.cfi_restore_state
3361:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
 19344              		.loc 1 3361 2 is_stmt 1 view .LVU4997
 19345              	.LBB3006:
 19346              	.LBI3006:
 848:src/xeq.c     **** 	getX(x);
 19347              		.loc 1 848 6 view .LVU4998
 19348              	.LBE3006:
 849:src/xeq.c     **** 	getY(y);
 19349              		.loc 1 849 2 view .LVU4999
 19350              	.LBB3011:
 19351              	.LBB3007:
 19352              	.LBI3007:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19353              		.loc 1 818 12 view .LVU5000
 19354              	.LBB3008:
 819:src/xeq.c     **** }
 19355              		.loc 1 819 2 view .LVU5001
 819:src/xeq.c     **** }
 19356              		.loc 1 819 9 is_stmt 0 view .LVU5002
 19357 0034 6421     		movs	r1, #100
 19358 0036 6846     		mov	r0, sp
 19359 0038 FFF7FEFF 		bl	getRegister
 19360              	.LVL1440:
 819:src/xeq.c     **** }
 19361              		.loc 1 819 9 view .LVU5003
 19362              	.LBE3008:
ARM GAS  /tmp/ccaPnj5t.s 			page 522


 19363              	.LBE3007:
 19364              	.LBE3011:
 850:src/xeq.c     **** }
 19365              		.loc 1 850 2 is_stmt 1 view .LVU5004
 19366              	.LBB3012:
 19367              	.LBB3009:
 19368              	.LBI3009:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 19369              		.loc 1 826 6 view .LVU5005
 19370              	.LBB3010:
 827:src/xeq.c     **** }
 19371              		.loc 1 827 2 view .LVU5006
 19372 003c 09A8     		add	r0, sp, #36
 19373              	.LVL1441:
 827:src/xeq.c     **** }
 19374              		.loc 1 827 2 is_stmt 0 view .LVU5007
 19375 003e 6521     		movs	r1, #101
 19376 0040 FFF7FEFF 		bl	getRegister
 19377              	.LVL1442:
 827:src/xeq.c     **** }
 19378              		.loc 1 827 2 view .LVU5008
 19379              	.LBE3010:
 19380              	.LBE3009:
 19381              	.LBE3012:
3362:src/xeq.c     **** 		fin_tst(0);
 19382              		.loc 1 3362 2 is_stmt 1 view .LVU5009
3362:src/xeq.c     **** 		fin_tst(0);
 19383              		.loc 1 3362 25 is_stmt 0 view .LVU5010
 19384 0044 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 19385 0048 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 19386 004c 1343     		orrs	r3, r3, r2
 19387 004e 13F0300F 		tst	r3, #48
 19388 0052 13D1     		bne	.L1360
3362:src/xeq.c     **** 		fin_tst(0);
 19389              		.loc 1 3362 47 discriminator 2 view .LVU5011
 19390 0054 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 19391 0056 13F0300F 		tst	r3, #48
 19392 005a 0FD1     		bne	.L1360
3362:src/xeq.c     **** 		fin_tst(0);
 19393              		.loc 1 3362 69 discriminator 3 view .LVU5012
 19394 005c 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 19395 005e 13F0300F 		tst	r3, #48
 19396 0062 0BD1     		bne	.L1360
3366:src/xeq.c     **** }
 19397              		.loc 1 3366 2 is_stmt 1 view .LVU5013
3366:src/xeq.c     **** }
 19398              		.loc 1 3366 29 is_stmt 0 view .LVU5014
 19399 0064 2946     		mov	r1, r5
 19400 0066 6846     		mov	r0, sp
 19401 0068 FFF7FEFF 		bl	dn_eq
 19402              	.LVL1443:
3366:src/xeq.c     **** }
 19403              		.loc 1 3366 25 view .LVU5015
 19404 006c 003E     		subs	r6, r6, #0
 19405 006e 18BF     		it	ne
 19406 0070 0126     		movne	r6, #1
3366:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 523


 19407              		.loc 1 3366 43 view .LVU5016
 19408 0072 A8B9     		cbnz	r0, .L1373
 19409              	.L1363:
3366:src/xeq.c     **** }
 19410              		.loc 1 3366 2 discriminator 6 view .LVU5017
 19411 0074 3046     		mov	r0, r6
 19412 0076 FFF7FEFF 		bl	fin_tst
 19413              	.LVL1444:
 19414 007a D9E7     		b	.L1356
 19415              	.L1360:
3363:src/xeq.c     **** 		return;
 19416              		.loc 1 3363 3 is_stmt 1 view .LVU5018
 19417              	.LVL1445:
 19418              	.LBB3013:
 19419              	.LBI3013:
2551:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 19420              		.loc 1 2551 6 view .LVU5019
 19421              	.LBB3014:
2552:src/xeq.c     **** 	if (Running || XromRunning) {
 19422              		.loc 1 2552 2 view .LVU5020
2553:src/xeq.c     **** 		if (! a && incpc())
 19423              		.loc 1 2553 2 view .LVU5021
2553:src/xeq.c     **** 		if (! a && incpc())
 19424              		.loc 1 2553 6 is_stmt 0 view .LVU5022
 19425 007c 104A     		ldr	r2, .L1375+12
2553:src/xeq.c     **** 		if (! a && incpc())
 19426              		.loc 1 2553 14 view .LVU5023
 19427 007e 114B     		ldr	r3, .L1375+16
 19428 0080 1268     		ldr	r2, [r2]
 19429 0082 1B68     		ldr	r3, [r3]
 19430 0084 1343     		orrs	r3, r2, r3
 19431 0086 07D1     		bne	.L1374
2558:src/xeq.c     **** #ifdef INFRARED
 19432              		.loc 1 2558 3 is_stmt 1 view .LVU5024
2558:src/xeq.c     **** #ifdef INFRARED
 19433              		.loc 1 2558 11 is_stmt 0 view .LVU5025
 19434 0088 0F4B     		ldr	r3, .L1375+20
 19435 008a 104A     		ldr	r2, .L1375+24
 19436 008c 1A60     		str	r2, [r3]
 19437              	.LBE3014:
 19438              	.LBE3013:
3367:src/xeq.c     **** 
 19439              		.loc 1 3367 1 view .LVU5026
 19440 008e 13B0     		add	sp, sp, #76
 19441              		.cfi_remember_state
 19442              		.cfi_def_cfa_offset 20
 19443              		@ sp needed
 19444 0090 F0BD     		pop	{r4, r5, r6, r7, pc}
 19445              	.LVL1446:
 19446              	.L1372:
 19447              		.cfi_restore_state
 19448              	.LBB3016:
 19449              	.LBB2993:
 19450              	.LBB2984:
3367:src/xeq.c     **** 
 19451              		.loc 1 3367 1 view .LVU5027
 19452 0092 FFF7FEFF 		bl	process_cmdline.part.0
ARM GAS  /tmp/ccaPnj5t.s 			page 524


 19453              	.LVL1447:
3367:src/xeq.c     **** 
 19454              		.loc 1 3367 1 view .LVU5028
 19455 0096 BCE7     		b	.L1357
 19456              	.LVL1448:
 19457              	.L1374:
3367:src/xeq.c     **** 
 19458              		.loc 1 3367 1 view .LVU5029
 19459              	.LBE2984:
 19460              	.LBE2993:
 19461              	.LBE3016:
 19462              	.LBB3017:
 19463              	.LBB3015:
2554:src/xeq.c     **** 			decpc();
 19464              		.loc 1 2554 3 is_stmt 1 view .LVU5030
 19465 0098 FFF7FEFF 		bl	fin_tst.part.0
 19466              	.LVL1449:
 19467              	.LBE3015:
 19468              	.LBE3017:
3367:src/xeq.c     **** 
 19469              		.loc 1 3367 1 is_stmt 0 view .LVU5031
 19470 009c 13B0     		add	sp, sp, #76
 19471              		.cfi_remember_state
 19472              		.cfi_def_cfa_offset 20
 19473              		@ sp needed
 19474 009e F0BD     		pop	{r4, r5, r6, r7, pc}
 19475              	.LVL1450:
 19476              	.L1373:
 19477              		.cfi_restore_state
3366:src/xeq.c     **** }
 19478              		.loc 1 3366 46 discriminator 1 view .LVU5032
 19479 00a0 3946     		mov	r1, r7
 19480 00a2 09A8     		add	r0, sp, #36
 19481 00a4 FFF7FEFF 		bl	dn_eq
 19482              	.LVL1451:
 19483 00a8 0028     		cmp	r0, #0
 19484 00aa 18BF     		it	ne
 19485 00ac 86F00106 		eorne	r6, r6, #1
 19486 00b0 E0E7     		b	.L1363
 19487              	.L1376:
 19488 00b2 00BF     		.align	2
 19489              	.L1375:
 19490 00b4 00000000 		.word	StateWhileOn
 19491 00b8 00000000 		.word	main_ram
 19492 00bc 00000000 		.word	Error
 19493 00c0 00000000 		.word	Running
 19494 00c4 00000000 		.word	XromRunning
 19495 00c8 00000000 		.word	DispMsg
 19496 00cc 00000000 		.word	.LC3
 19497              		.cfi_endproc
 19498              	.LFE189:
 19500              		.section	.text.check_zero,"ax",%progbits
 19501              		.align	1
 19502              		.p2align 2,,3
 19503              		.global	check_zero
 19504              		.syntax unified
 19505              		.thumb
ARM GAS  /tmp/ccaPnj5t.s 			page 525


 19506              		.thumb_func
 19507              		.fpu fpv4-sp-d16
 19509              	check_zero:
 19510              	.LVL1452:
 19511              	.LFB187:
3330:src/xeq.c     **** 	int neg;
 19512              		.loc 1 3330 32 is_stmt 1 view -0
 19513              		.cfi_startproc
 19514              		@ args = 0, pretend = 0, frame = 40
 19515              		@ frame_needed = 0, uses_anonymous_args = 0
3331:src/xeq.c     **** 	int zero;
 19516              		.loc 1 3331 2 view .LVU5034
3332:src/xeq.c     **** 
 19517              		.loc 1 3332 2 view .LVU5035
3334:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19518              		.loc 1 3334 2 view .LVU5036
3334:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19519              		.loc 1 3334 6 is_stmt 0 view .LVU5037
 19520 0000 1A4B     		ldr	r3, .L1392
3330:src/xeq.c     **** 	int neg;
 19521              		.loc 1 3330 32 view .LVU5038
 19522 0002 10B5     		push	{r4, lr}
 19523              		.cfi_def_cfa_offset 8
 19524              		.cfi_offset 4, -8
 19525              		.cfi_offset 14, -4
3334:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19526              		.loc 1 3334 6 view .LVU5039
 19527 0004 1B68     		ldr	r3, [r3]
 19528 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3334:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19529              		.loc 1 3334 5 view .LVU5040
 19530 000a DB07     		lsls	r3, r3, #31
3330:src/xeq.c     **** 	int neg;
 19531              		.loc 1 3330 32 view .LVU5041
 19532 000c 8AB0     		sub	sp, sp, #40
 19533              		.cfi_def_cfa_offset 48
3330:src/xeq.c     **** 	int neg;
 19534              		.loc 1 3330 32 view .LVU5042
 19535 000e 0446     		mov	r4, r0
3334:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19536              		.loc 1 3334 5 view .LVU5043
 19537 0010 15D5     		bpl	.L1378
 19538              	.LBB3018:
3335:src/xeq.c     **** 		zero = (xv == 0);
 19539              		.loc 1 3335 3 is_stmt 1 view .LVU5044
 19540              	.LBB3019:
 19541              	.LBI3019:
1424:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 19542              		.loc 1 1424 15 view .LVU5045
 19543              	.LBB3020:
1425:src/xeq.c     **** }
 19544              		.loc 1 1425 2 view .LVU5046
1425:src/xeq.c     **** }
 19545              		.loc 1 1425 9 is_stmt 0 view .LVU5047
 19546 0012 6420     		movs	r0, #100
 19547              	.LVL1453:
1425:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 526


 19548              		.loc 1 1425 9 view .LVU5048
 19549 0014 FFF7FEFF 		bl	get_reg_n_int
 19550              	.LVL1454:
 19551              	.LBE3020:
 19552              	.LBE3019:
3335:src/xeq.c     **** 		zero = (xv == 0);
 19553              		.loc 1 3335 37 view .LVU5049
 19554 0018 6A46     		mov	r2, sp
 19555 001a FFF7FEFF 		bl	extract_value
 19556              	.LVL1455:
3336:src/xeq.c     **** 	} else {
 19557              		.loc 1 3336 3 is_stmt 1 view .LVU5050
3336:src/xeq.c     **** 	} else {
 19558              		.loc 1 3336 14 is_stmt 0 view .LVU5051
 19559 001e 50EA0103 		orrs	r3, r0, r1
 19560 0022 0CBF     		ite	eq
 19561 0024 0120     		moveq	r0, #1
 19562              	.LVL1456:
3336:src/xeq.c     **** 	} else {
 19563              		.loc 1 3336 14 view .LVU5052
 19564 0026 0020     		movne	r0, #0
 19565              	.LVL1457:
3336:src/xeq.c     **** 	} else {
 19566              		.loc 1 3336 14 view .LVU5053
 19567              	.LBE3018:
3343:src/xeq.c     **** 		fin_tst(zero && !neg);
 19568              		.loc 1 3343 2 is_stmt 1 view .LVU5054
3343:src/xeq.c     **** 		fin_tst(zero && !neg);
 19569              		.loc 1 3343 5 is_stmt 0 view .LVU5055
 19570 0028 A12C     		cmp	r4, #161
 19571 002a 15D0     		beq	.L1391
 19572              	.L1380:
3346:src/xeq.c     **** }
 19573              		.loc 1 3346 3 is_stmt 1 view .LVU5056
 19574 002c 18B1     		cbz	r0, .L1383
3346:src/xeq.c     **** }
 19575              		.loc 1 3346 3 is_stmt 0 discriminator 1 view .LVU5057
 19576 002e 0098     		ldr	r0, [sp]
 19577              	.LVL1458:
3346:src/xeq.c     **** }
 19578              		.loc 1 3346 3 discriminator 1 view .LVU5058
 19579 0030 0038     		subs	r0, r0, #0
 19580 0032 18BF     		it	ne
 19581 0034 0120     		movne	r0, #1
 19582              	.L1383:
3346:src/xeq.c     **** }
 19583              		.loc 1 3346 3 discriminator 6 view .LVU5059
 19584 0036 FFF7FEFF 		bl	fin_tst
 19585              	.LVL1459:
3347:src/xeq.c     **** 
 19586              		.loc 1 3347 1 discriminator 6 view .LVU5060
 19587 003a 0AB0     		add	sp, sp, #40
 19588              		.cfi_remember_state
 19589              		.cfi_def_cfa_offset 8
 19590              		@ sp needed
 19591 003c 10BD     		pop	{r4, pc}
 19592              	.LVL1460:
ARM GAS  /tmp/ccaPnj5t.s 			page 527


 19593              	.L1378:
 19594              		.cfi_restore_state
 19595              	.LBB3021:
3338:src/xeq.c     **** 		getX(&x);
 19596              		.loc 1 3338 3 is_stmt 1 view .LVU5061
3339:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
 19597              		.loc 1 3339 3 view .LVU5062
 19598              	.LBB3022:
 19599              	.LBI3022:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19600              		.loc 1 818 12 view .LVU5063
 19601              	.LBB3023:
 819:src/xeq.c     **** }
 19602              		.loc 1 819 2 view .LVU5064
 819:src/xeq.c     **** }
 19603              		.loc 1 819 9 is_stmt 0 view .LVU5065
 19604 003e 6421     		movs	r1, #100
 19605 0040 01A8     		add	r0, sp, #4
 19606              	.LVL1461:
 819:src/xeq.c     **** }
 19607              		.loc 1 819 9 view .LVU5066
 19608 0042 FFF7FEFF 		bl	getRegister
 19609              	.LVL1462:
 819:src/xeq.c     **** }
 19610              		.loc 1 819 9 view .LVU5067
 19611              	.LBE3023:
 19612              	.LBE3022:
3340:src/xeq.c     **** 		zero = dn_eq0(&x);
 19613              		.loc 1 3340 3 is_stmt 1 view .LVU5068
3340:src/xeq.c     **** 		zero = dn_eq0(&x);
 19614              		.loc 1 3340 9 is_stmt 0 view .LVU5069
 19615 0046 9DF90C30 		ldrsb	r3, [sp, #12]
3341:src/xeq.c     **** 	}
 19616              		.loc 1 3341 10 view .LVU5070
 19617 004a 01A8     		add	r0, sp, #4
3340:src/xeq.c     **** 		zero = dn_eq0(&x);
 19618              		.loc 1 3340 9 view .LVU5071
 19619 004c DB0F     		lsrs	r3, r3, #31
3340:src/xeq.c     **** 		zero = dn_eq0(&x);
 19620              		.loc 1 3340 7 view .LVU5072
 19621 004e 0093     		str	r3, [sp]
3341:src/xeq.c     **** 	}
 19622              		.loc 1 3341 3 is_stmt 1 view .LVU5073
3341:src/xeq.c     **** 	}
 19623              		.loc 1 3341 10 is_stmt 0 view .LVU5074
 19624 0050 FFF7FEFF 		bl	dn_eq0
 19625              	.LVL1463:
3341:src/xeq.c     **** 	}
 19626              		.loc 1 3341 10 view .LVU5075
 19627              	.LBE3021:
3343:src/xeq.c     **** 		fin_tst(zero && !neg);
 19628              		.loc 1 3343 2 is_stmt 1 view .LVU5076
3343:src/xeq.c     **** 		fin_tst(zero && !neg);
 19629              		.loc 1 3343 5 is_stmt 0 view .LVU5077
 19630 0054 A12C     		cmp	r4, #161
 19631 0056 E9D1     		bne	.L1380
 19632              	.L1391:
ARM GAS  /tmp/ccaPnj5t.s 			page 528


3344:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19633              		.loc 1 3344 3 is_stmt 1 view .LVU5078
 19634 0058 0028     		cmp	r0, #0
 19635 005a ECD0     		beq	.L1383
3344:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19636              		.loc 1 3344 3 is_stmt 0 discriminator 1 view .LVU5079
 19637 005c 0098     		ldr	r0, [sp]
 19638              	.LVL1464:
3344:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19639              		.loc 1 3344 3 discriminator 1 view .LVU5080
 19640 005e B0FA80F0 		clz	r0, r0
 19641 0062 4009     		lsrs	r0, r0, #5
3346:src/xeq.c     **** }
 19642              		.loc 1 3346 3 discriminator 1 view .LVU5081
 19643 0064 FFF7FEFF 		bl	fin_tst
 19644              	.LVL1465:
3347:src/xeq.c     **** 
 19645              		.loc 1 3347 1 discriminator 1 view .LVU5082
 19646 0068 0AB0     		add	sp, sp, #40
 19647              		.cfi_def_cfa_offset 8
 19648              		@ sp needed
 19649 006a 10BD     		pop	{r4, pc}
 19650              	.L1393:
 19651              		.align	2
 19652              	.L1392:
 19653 006c 00000000 		.word	main_ram
 19654              		.cfi_endproc
 19655              	.LFE187:
 19657              		.section	.text.cmdtest,"ax",%progbits
 19658              		.align	1
 19659              		.p2align 2,,3
 19660              		.global	cmdtest
 19661              		.syntax unified
 19662              		.thumb
 19663              		.thumb_func
 19664              		.fpu fpv4-sp-d16
 19666              	cmdtest:
 19667              	.LVL1466:
 19668              	.LFB188:
3349:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
 19669              		.loc 1 3349 46 is_stmt 1 view -0
 19670              		.cfi_startproc
 19671              		@ args = 0, pretend = 0, frame = 0
 19672              		@ frame_needed = 0, uses_anonymous_args = 0
 19673              		@ link register save eliminated.
3350:src/xeq.c     **** }
 19674              		.loc 1 3350 2 view .LVU5084
3350:src/xeq.c     **** }
 19675              		.loc 1 3350 31 is_stmt 0 view .LVU5085
 19676 0000 2D39     		subs	r1, r1, #45
 19677              	.LVL1467:
3350:src/xeq.c     **** }
 19678              		.loc 1 3350 2 view .LVU5086
 19679 0002 C9B2     		uxtb	r1, r1
 19680 0004 FFF7FEBF 		b	do_tst
 19681              	.LVL1468:
3350:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 529


 19682              		.loc 1 3350 2 view .LVU5087
 19683              		.cfi_endproc
 19684              	.LFE188:
 19686              		.section	.text.cmdztest,"ax",%progbits
 19687              		.align	1
 19688              		.p2align 2,,3
 19689              		.global	cmdztest
 19690              		.syntax unified
 19691              		.thumb
 19692              		.thumb_func
 19693              		.fpu fpv4-sp-d16
 19695              	cmdztest:
 19696              	.LVL1469:
 19697              	.LFB190:
3369:src/xeq.c     **** 	decNumber re, im;
 19698              		.loc 1 3369 47 is_stmt 1 view -0
 19699              		.cfi_startproc
 19700              		@ args = 0, pretend = 0, frame = 72
 19701              		@ frame_needed = 0, uses_anonymous_args = 0
3370:src/xeq.c     **** 	getRegister(&re, arg);
 19702              		.loc 1 3370 2 view .LVU5089
3371:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19703              		.loc 1 3371 2 view .LVU5090
3369:src/xeq.c     **** 	decNumber re, im;
 19704              		.loc 1 3369 47 is_stmt 0 view .LVU5091
 19705 0000 30B5     		push	{r4, r5, lr}
 19706              		.cfi_def_cfa_offset 12
 19707              		.cfi_offset 4, -12
 19708              		.cfi_offset 5, -8
 19709              		.cfi_offset 14, -4
 19710 0002 0546     		mov	r5, r0
 19711 0004 93B0     		sub	sp, sp, #76
 19712              		.cfi_def_cfa_offset 88
3369:src/xeq.c     **** 	decNumber re, im;
 19713              		.loc 1 3369 47 view .LVU5092
 19714 0006 0C46     		mov	r4, r1
3371:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19715              		.loc 1 3371 2 view .LVU5093
 19716 0008 6846     		mov	r0, sp
 19717              	.LVL1470:
3371:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19718              		.loc 1 3371 2 view .LVU5094
 19719 000a 2946     		mov	r1, r5
 19720              	.LVL1471:
3371:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19721              		.loc 1 3371 2 view .LVU5095
 19722 000c FFF7FEFF 		bl	getRegister
 19723              	.LVL1472:
3372:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
 19724              		.loc 1 3372 2 is_stmt 1 view .LVU5096
 19725 0010 691C     		adds	r1, r5, #1
 19726 0012 09A8     		add	r0, sp, #36
 19727 0014 FFF7FEFF 		bl	getRegister
 19728              	.LVL1473:
3373:src/xeq.c     **** }
 19729              		.loc 1 3373 2 view .LVU5097
3373:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 530


 19730              		.loc 1 3373 37 is_stmt 0 view .LVU5098
 19731 0018 A4F13402 		sub	r2, r4, #52
3373:src/xeq.c     **** }
 19732              		.loc 1 3373 2 view .LVU5099
 19733 001c D2B2     		uxtb	r2, r2
 19734 001e 09A9     		add	r1, sp, #36
 19735 0020 6846     		mov	r0, sp
 19736 0022 FFF7FEFF 		bl	do_ztst
 19737              	.LVL1474:
3374:src/xeq.c     **** 
 19738              		.loc 1 3374 1 view .LVU5100
 19739 0026 13B0     		add	sp, sp, #76
 19740              		.cfi_def_cfa_offset 12
 19741              		@ sp needed
 19742 0028 30BD     		pop	{r4, r5, pc}
3374:src/xeq.c     **** 
 19743              		.loc 1 3374 1 view .LVU5101
 19744              		.cfi_endproc
 19745              	.LFE190:
 19747 002a 00BF     		.section	.text.cmdlincdec,"ax",%progbits
 19748              		.align	1
 19749              		.p2align 2,,3
 19750              		.global	cmdlincdec
 19751              		.syntax unified
 19752              		.thumb
 19753              		.thumb_func
 19754              		.fpu fpv4-sp-d16
 19756              	cmdlincdec:
 19757              	.LVL1475:
 19758              	.LFB192:
3404:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
 19759              		.loc 1 3404 49 is_stmt 1 view -0
 19760              		.cfi_startproc
 19761              		@ args = 0, pretend = 0, frame = 0
 19762              		@ frame_needed = 0, uses_anonymous_args = 0
 19763              		@ link register save eliminated.
3405:src/xeq.c     **** }
 19764              		.loc 1 3405 2 view .LVU5103
 19765 0000 A1F14101 		sub	r1, #65
 19766              	.LVL1476:
3405:src/xeq.c     **** }
 19767              		.loc 1 3405 2 is_stmt 0 view .LVU5104
 19768 0004 B1FA81F1 		clz	r1, r1
 19769 0008 4909     		lsrs	r1, r1, #5
 19770 000a FFF7FEBF 		b	incdec
 19771              	.LVL1477:
3405:src/xeq.c     **** }
 19772              		.loc 1 3405 2 view .LVU5105
 19773              		.cfi_endproc
 19774              	.LFE192:
 19776 000e 00BF     		.section	.text.cmdloopz,"ax",%progbits
 19777              		.align	1
 19778              		.p2align 2,,3
 19779              		.global	cmdloopz
 19780              		.syntax unified
 19781              		.thumb
 19782              		.thumb_func
ARM GAS  /tmp/ccaPnj5t.s 			page 531


 19783              		.fpu fpv4-sp-d16
 19785              	cmdloopz:
 19786              	.LVL1478:
 19787              	.LFB193:
3408:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19788              		.loc 1 3408 47 is_stmt 1 view -0
 19789              		.cfi_startproc
 19790              		@ args = 0, pretend = 0, frame = 0
 19791              		@ frame_needed = 0, uses_anonymous_args = 0
3409:src/xeq.c     **** }
 19792              		.loc 1 3409 2 view .LVU5107
3408:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19793              		.loc 1 3408 47 is_stmt 0 view .LVU5108
 19794 0000 08B5     		push	{r3, lr}
 19795              		.cfi_def_cfa_offset 8
 19796              		.cfi_offset 3, -8
 19797              		.cfi_offset 14, -4
3409:src/xeq.c     **** }
 19798              		.loc 1 3409 2 view .LVU5109
 19799 0002 A1F13F01 		sub	r1, #63
 19800              	.LVL1479:
3409:src/xeq.c     **** }
 19801              		.loc 1 3409 2 view .LVU5110
 19802 0006 B1FA81F1 		clz	r1, r1
 19803 000a 4909     		lsrs	r1, r1, #5
 19804 000c FFF7FEFF 		bl	incdec
 19805              	.LVL1480:
3410:src/xeq.c     **** 
 19806              		.loc 1 3410 1 view .LVU5111
 19807 0010 BDE80840 		pop	{r3, lr}
 19808              		.cfi_restore 14
 19809              		.cfi_restore 3
 19810              		.cfi_def_cfa_offset 0
3409:src/xeq.c     **** }
 19811              		.loc 1 3409 2 view .LVU5112
 19812 0014 FFF7FEBF 		b	fin_tst
 19813              	.LVL1481:
 19814              		.cfi_endproc
 19815              	.LFE193:
 19817              		.section	.text.cmdloop,"ax",%progbits
 19818              		.align	1
 19819              		.p2align 2,,3
 19820              		.global	cmdloop
 19821              		.syntax unified
 19822              		.thumb
 19823              		.thumb_func
 19824              		.fpu fpv4-sp-d16
 19826              	cmdloop:
 19827              	.LVL1482:
 19828              	.LFB194:
3412:src/xeq.c     **** 	if (is_intmode()) {
 19829              		.loc 1 3412 46 is_stmt 1 view -0
 19830              		.cfi_startproc
 19831              		@ args = 0, pretend = 0, frame = 184
 19832              		@ frame_needed = 0, uses_anonymous_args = 0
3413:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19833              		.loc 1 3413 2 view .LVU5114
ARM GAS  /tmp/ccaPnj5t.s 			page 532


3413:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19834              		.loc 1 3413 6 is_stmt 0 view .LVU5115
 19835 0000 7C4B     		ldr	r3, .L1440
3412:src/xeq.c     **** 	if (is_intmode()) {
 19836              		.loc 1 3412 46 view .LVU5116
 19837 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 19838              		.cfi_def_cfa_offset 20
 19839              		.cfi_offset 4, -20
 19840              		.cfi_offset 5, -16
 19841              		.cfi_offset 6, -12
 19842              		.cfi_offset 7, -8
 19843              		.cfi_offset 14, -4
3413:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19844              		.loc 1 3413 6 view .LVU5117
 19845 0004 1B68     		ldr	r3, [r3]
 19846 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3413:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19847              		.loc 1 3413 5 view .LVU5118
 19848 000a DB07     		lsls	r3, r3, #31
3412:src/xeq.c     **** 	if (is_intmode()) {
 19849              		.loc 1 3412 46 view .LVU5119
 19850 000c AFB0     		sub	sp, sp, #188
 19851              		.cfi_def_cfa_offset 208
3412:src/xeq.c     **** 	if (is_intmode()) {
 19852              		.loc 1 3412 46 view .LVU5120
 19853 000e 0C46     		mov	r4, r1
 19854 0010 0546     		mov	r5, r0
3413:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19855              		.loc 1 3413 5 view .LVU5121
 19856 0012 7BD4     		bmi	.L1432
 19857              	.LBB3024:
3435:src/xeq.c     **** 
 19858              		.loc 1 3435 3 is_stmt 1 view .LVU5122
3437:src/xeq.c     **** 
 19859              		.loc 1 3437 3 view .LVU5123
 19860 0014 2946     		mov	r1, r5
 19861              	.LVL1483:
3437:src/xeq.c     **** 
 19862              		.loc 1 3437 3 is_stmt 0 view .LVU5124
 19863 0016 6846     		mov	r0, sp
 19864              	.LVL1484:
3437:src/xeq.c     **** 
 19865              		.loc 1 3437 3 view .LVU5125
 19866 0018 FFF7FEFF 		bl	getRegister
 19867              	.LVL1485:
3441:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
 19868              		.loc 1 3441 3 is_stmt 1 view .LVU5126
 19869 001c 6946     		mov	r1, sp
 19870 001e 12A8     		add	r0, sp, #72
 19871 0020 FFF7FEFF 		bl	dn_abs
 19872              	.LVL1486:
3442:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
 19873              		.loc 1 3442 3 view .LVU5127
 19874 0024 12A9     		add	r1, sp, #72
 19875 0026 1BA8     		add	r0, sp, #108
 19876 0028 FFF7FEFF 		bl	decNumberTrunc
 19877              	.LVL1487:
ARM GAS  /tmp/ccaPnj5t.s 			page 533


3443:src/xeq.c     **** 		if (decNumberIsNegative(&x))
 19878              		.loc 1 3443 3 view .LVU5128
 19879 002c 1BAA     		add	r2, sp, #108
 19880 002e 12A9     		add	r1, sp, #72
 19881 0030 24A8     		add	r0, sp, #144
 19882 0032 FFF7FEFF 		bl	dn_subtract
 19883              	.LVL1488:
3444:src/xeq.c     **** 			dn_minus(&n, &n);
 19884              		.loc 1 3444 3 view .LVU5129
3444:src/xeq.c     **** 			dn_minus(&n, &n);
 19885              		.loc 1 3444 6 is_stmt 0 view .LVU5130
 19886 0036 9DF90830 		ldrsb	r3, [sp, #8]
 19887 003a 002B     		cmp	r3, #0
 19888 003c C0F29080 		blt	.L1433
 19889              	.L1410:
3446:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
 19890              		.loc 1 3446 3 is_stmt 1 view .LVU5131
 19891 0040 0322     		movs	r2, #3
 19892 0042 24A9     		add	r1, sp, #144
 19893 0044 09A8     		add	r0, sp, #36
 19894 0046 FFF7FEFF 		bl	dn_mulpow10
 19895              	.LVL1489:
3447:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
 19896              		.loc 1 3447 3 view .LVU5132
 19897 004a 09A9     		add	r1, sp, #36
 19898 004c 12A8     		add	r0, sp, #72
 19899 004e FFF7FEFF 		bl	decNumberTrunc
 19900              	.LVL1490:
3448:src/xeq.c     **** 		dn_mul100(&x, &i);
 19901              		.loc 1 3448 3 view .LVU5133
 19902 0052 09A9     		add	r1, sp, #36
 19903 0054 12AA     		add	r2, sp, #72
 19904 0056 0846     		mov	r0, r1
 19905 0058 FFF7FEFF 		bl	dn_subtract
 19906              	.LVL1491:
3449:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
 19907              		.loc 1 3449 3 view .LVU5134
 19908 005c 09A9     		add	r1, sp, #36
 19909 005e 6846     		mov	r0, sp
 19910 0060 FFF7FEFF 		bl	dn_mul100
 19911              	.LVL1492:
3450:src/xeq.c     **** 		if (dn_eq0(&i))
 19912              		.loc 1 3450 3 view .LVU5135
 19913 0064 6946     		mov	r1, sp
 19914 0066 09A8     		add	r0, sp, #36
 19915 0068 FFF7FEFF 		bl	decNumberTrunc
 19916              	.LVL1493:
3451:src/xeq.c     **** 			dn_1(&i);
 19917              		.loc 1 3451 3 view .LVU5136
3451:src/xeq.c     **** 			dn_1(&i);
 19918              		.loc 1 3451 7 is_stmt 0 view .LVU5137
 19919 006c 09A8     		add	r0, sp, #36
 19920 006e FFF7FEFF 		bl	dn_eq0
 19921              	.LVL1494:
3451:src/xeq.c     **** 			dn_1(&i);
 19922              		.loc 1 3451 6 view .LVU5138
 19923 0072 98BB     		cbnz	r0, .L1434
ARM GAS  /tmp/ccaPnj5t.s 			page 534


3454:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19924              		.loc 1 3454 3 is_stmt 1 view .LVU5139
3455:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19925              		.loc 1 3455 4 is_stmt 0 view .LVU5140
 19926 0074 1BA9     		add	r1, sp, #108
3454:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19927              		.loc 1 3454 6 view .LVU5141
 19928 0076 3B2C     		cmp	r4, #59
3455:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19929              		.loc 1 3455 4 view .LVU5142
 19930 0078 09AA     		add	r2, sp, #36
 19931 007a 0846     		mov	r0, r1
3454:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19932              		.loc 1 3454 6 view .LVU5143
 19933 007c 36D0     		beq	.L1412
 19934              	.L1437:
3454:src/xeq.c     **** 			dn_add(&n, &n, &i);
 19935              		.loc 1 3454 22 discriminator 1 view .LVU5144
 19936 007e 3D2C     		cmp	r4, #61
 19937 0080 1DD1     		bne	.L1413
3455:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19938              		.loc 1 3455 4 is_stmt 1 view .LVU5145
 19939 0082 FFF7FEFF 		bl	dn_add
 19940              	.LVL1495:
3456:src/xeq.c     **** 			if (op == RARG_ISE)
 19941              		.loc 1 3456 4 view .LVU5146
 19942 0086 1BAA     		add	r2, sp, #108
 19943 0088 12A9     		add	r1, sp, #72
 19944 008a 6846     		mov	r0, sp
 19945 008c FFF7FEFF 		bl	dn_compare
 19946              	.LVL1496:
3457:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 19947              		.loc 1 3457 4 view .LVU5147
3458:src/xeq.c     **** 			else
 19948              		.loc 1 3458 5 view .LVU5148
3458:src/xeq.c     **** 			else
 19949              		.loc 1 3458 13 is_stmt 0 view .LVU5149
 19950 0090 6846     		mov	r0, sp
 19951 0092 FFF7FEFF 		bl	dn_le0
 19952              	.LVL1497:
3458:src/xeq.c     **** 			else
 19953              		.loc 1 3458 5 view .LVU5150
 19954 0096 B0FA80F0 		clz	r0, r0
 19955 009a 4009     		lsrs	r0, r0, #5
 19956 009c FFF7FEFF 		bl	fin_tst
 19957              	.LVL1498:
 19958              	.L1414:
3471:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 19959              		.loc 1 3471 3 is_stmt 1 view .LVU5151
3471:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 19960              		.loc 1 3471 6 is_stmt 0 view .LVU5152
 19961 00a0 9DF97430 		ldrsb	r3, [sp, #116]
 19962 00a4 002B     		cmp	r3, #0
3472:src/xeq.c     **** 		} else
 19963              		.loc 1 3472 4 view .LVU5153
 19964 00a6 24AA     		add	r2, sp, #144
 19965 00a8 1BA9     		add	r1, sp, #108
ARM GAS  /tmp/ccaPnj5t.s 			page 535


 19966 00aa 6846     		mov	r0, sp
3471:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 19967              		.loc 1 3471 6 view .LVU5154
 19968 00ac 55DB     		blt	.L1435
3474:src/xeq.c     **** 		setRegister(arg, &x);
 19969              		.loc 1 3474 4 is_stmt 1 view .LVU5155
 19970 00ae FFF7FEFF 		bl	dn_add
 19971              	.LVL1499:
 19972              	.L1417:
3475:src/xeq.c     **** 	}
 19973              		.loc 1 3475 3 discriminator 2 view .LVU5156
 19974 00b2 6946     		mov	r1, sp
 19975 00b4 2846     		mov	r0, r5
 19976 00b6 FFF7FEFF 		bl	setRegister
 19977              	.LVL1500:
 19978              	.L1400:
3475:src/xeq.c     **** 	}
 19979              		.loc 1 3475 3 is_stmt 0 discriminator 2 view .LVU5157
 19980              	.LBE3024:
3477:src/xeq.c     **** 
 19981              		.loc 1 3477 1 view .LVU5158
 19982 00ba 2FB0     		add	sp, sp, #188
 19983              		.cfi_remember_state
 19984              		.cfi_def_cfa_offset 20
 19985              		@ sp needed
 19986 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 19987              	.LVL1501:
 19988              	.L1413:
 19989              		.cfi_restore_state
 19990              	.LBB3025:
3462:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 19991              		.loc 1 3462 4 is_stmt 1 view .LVU5159
 19992 00be FFF7FEFF 		bl	dn_subtract
 19993              	.LVL1502:
3463:src/xeq.c     **** 			if (op == RARG_DSL)
 19994              		.loc 1 3463 4 view .LVU5160
 19995 00c2 1BAA     		add	r2, sp, #108
 19996 00c4 12A9     		add	r1, sp, #72
 19997 00c6 6846     		mov	r0, sp
 19998 00c8 FFF7FEFF 		bl	dn_compare
 19999              	.LVL1503:
3464:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20000              		.loc 1 3464 4 view .LVU5161
3464:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20001              		.loc 1 3464 7 is_stmt 0 view .LVU5162
 20002 00cc 3C2C     		cmp	r4, #60
3465:src/xeq.c     **** 			else
 20003              		.loc 1 3465 5 view .LVU5163
 20004 00ce 6846     		mov	r0, sp
3464:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20005              		.loc 1 3464 7 view .LVU5164
 20006 00d0 6AD0     		beq	.L1436
3467:src/xeq.c     **** 		}
 20007              		.loc 1 3467 5 is_stmt 1 view .LVU5165
 20008 00d2 FFF7FEFF 		bl	dn_lt0
 20009              	.LVL1504:
 20010 00d6 FFF7FEFF 		bl	fin_tst
ARM GAS  /tmp/ccaPnj5t.s 			page 536


 20011              	.LVL1505:
 20012 00da E1E7     		b	.L1414
 20013              	.L1434:
3452:src/xeq.c     **** 
 20014              		.loc 1 3452 4 view .LVU5166
 20015 00dc 09A8     		add	r0, sp, #36
 20016 00de FFF7FEFF 		bl	dn_1
 20017              	.LVL1506:
3454:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20018              		.loc 1 3454 3 view .LVU5167
3455:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20019              		.loc 1 3455 4 is_stmt 0 view .LVU5168
 20020 00e2 1BA9     		add	r1, sp, #108
3454:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20021              		.loc 1 3454 6 view .LVU5169
 20022 00e4 3B2C     		cmp	r4, #59
3455:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20023              		.loc 1 3455 4 view .LVU5170
 20024 00e6 09AA     		add	r2, sp, #36
 20025 00e8 0846     		mov	r0, r1
3454:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20026              		.loc 1 3454 6 view .LVU5171
 20027 00ea C8D1     		bne	.L1437
 20028              	.L1412:
3455:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20029              		.loc 1 3455 4 is_stmt 1 view .LVU5172
 20030 00ec FFF7FEFF 		bl	dn_add
 20031              	.LVL1507:
3456:src/xeq.c     **** 			if (op == RARG_ISE)
 20032              		.loc 1 3456 4 view .LVU5173
 20033 00f0 1BAA     		add	r2, sp, #108
 20034 00f2 12A9     		add	r1, sp, #72
 20035 00f4 6846     		mov	r0, sp
 20036 00f6 FFF7FEFF 		bl	dn_compare
 20037              	.LVL1508:
3457:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 20038              		.loc 1 3457 4 view .LVU5174
3460:src/xeq.c     **** 		} else {
 20039              		.loc 1 3460 5 view .LVU5175
3460:src/xeq.c     **** 		} else {
 20040              		.loc 1 3460 13 is_stmt 0 view .LVU5176
 20041 00fa 6846     		mov	r0, sp
 20042 00fc FFF7FEFF 		bl	dn_lt0
 20043              	.LVL1509:
3460:src/xeq.c     **** 		} else {
 20044              		.loc 1 3460 5 view .LVU5177
 20045 0100 B0FA80F0 		clz	r0, r0
 20046 0104 4009     		lsrs	r0, r0, #5
 20047 0106 FFF7FEFF 		bl	fin_tst
 20048              	.LVL1510:
 20049 010a C9E7     		b	.L1414
 20050              	.LVL1511:
 20051              	.L1432:
3460:src/xeq.c     **** 		} else {
 20052              		.loc 1 3460 5 view .LVU5178
 20053              	.LBE3025:
 20054              	.LBB3026:
ARM GAS  /tmp/ccaPnj5t.s 			page 537


3414:src/xeq.c     **** 		int xs;
 20055              		.loc 1 3414 3 is_stmt 1 view .LVU5179
3414:src/xeq.c     **** 		int xs;
 20056              		.loc 1 3414 21 is_stmt 0 view .LVU5180
 20057 010c FFF7FEFF 		bl	get_reg_n_int
 20058              	.LVL1512:
3415:src/xeq.c     **** 		unsigned long long int xv;
 20059              		.loc 1 3415 3 is_stmt 1 view .LVU5181
3416:src/xeq.c     **** 
 20060              		.loc 1 3416 3 view .LVU5182
3418:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20061              		.loc 1 3418 3 view .LVU5183
3418:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20062              		.loc 1 3418 6 is_stmt 0 view .LVU5184
 20063 0110 3B2C     		cmp	r4, #59
3419:src/xeq.c     **** 		else
 20064              		.loc 1 3419 8 view .LVU5185
 20065 0112 4FF00102 		mov	r2, #1
 20066 0116 4FF00003 		mov	r3, #0
3418:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20067              		.loc 1 3418 6 view .LVU5186
 20068 011a 4AD0     		beq	.L1402
3418:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20069              		.loc 1 3418 22 discriminator 1 view .LVU5187
 20070 011c 3D2C     		cmp	r4, #61
 20071 011e 24D1     		bne	.L1438
3419:src/xeq.c     **** 		else
 20072              		.loc 1 3419 4 is_stmt 1 view .LVU5188
3419:src/xeq.c     **** 		else
 20073              		.loc 1 3419 8 is_stmt 0 view .LVU5189
 20074 0120 FFF7FEFF 		bl	intAdd
 20075              	.LVL1513:
3419:src/xeq.c     **** 		else
 20076              		.loc 1 3419 8 view .LVU5190
 20077 0124 0646     		mov	r6, r0
 20078              	.LBB3027:
 20079              	.LBB3028:
1405:src/xeq.c     **** }
 20080              		.loc 1 1405 8 view .LVU5191
 20081 0126 2846     		mov	r0, r5
 20082              	.LBE3028:
 20083              	.LBE3027:
3419:src/xeq.c     **** 		else
 20084              		.loc 1 3419 8 view .LVU5192
 20085 0128 0C46     		mov	r4, r1
 20086              	.LVL1514:
3422:src/xeq.c     **** 
 20087              		.loc 1 3422 3 is_stmt 1 view .LVU5193
3422:src/xeq.c     **** 
 20088              		.loc 1 3422 3 is_stmt 0 view .LVU5194
 20089 012a CDE92461 		strd	r6, r1, [sp, #144]
 20090              	.LVL1515:
 20091              	.LBB3034:
 20092              	.LBI3027:
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20093              		.loc 1 1404 6 is_stmt 1 view .LVU5195
 20094              	.LBB3029:
ARM GAS  /tmp/ccaPnj5t.s 			page 538


1405:src/xeq.c     **** }
 20095              		.loc 1 1405 2 view .LVU5196
1405:src/xeq.c     **** }
 20096              		.loc 1 1405 8 is_stmt 0 view .LVU5197
 20097 012e FFF7FEFF 		bl	get_reg_n
 20098              	.LVL1516:
1405:src/xeq.c     **** }
 20099              		.loc 1 1405 2 view .LVU5198
 20100 0132 24A9     		add	r1, sp, #144
 20101 0134 0822     		movs	r2, #8
 20102 0136 FFF7FEFF 		bl	xcopy
 20103              	.LVL1517:
1405:src/xeq.c     **** }
 20104              		.loc 1 1405 2 view .LVU5199
 20105              	.LBE3029:
 20106              	.LBE3034:
3424:src/xeq.c     **** 		if (op == RARG_ISG)
 20107              		.loc 1 3424 3 is_stmt 1 view .LVU5200
3424:src/xeq.c     **** 		if (op == RARG_ISG)
 20108              		.loc 1 3424 8 is_stmt 0 view .LVU5201
 20109 013a 24AA     		add	r2, sp, #144
 20110 013c 3046     		mov	r0, r6
 20111 013e 2146     		mov	r1, r4
 20112 0140 FFF7FEFF 		bl	extract_value
 20113              	.LVL1518:
3430:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20114              		.loc 1 3430 18 view .LVU5202
 20115 0144 249B     		ldr	r3, [sp, #144]
 20116              	.LVL1519:
3425:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20117              		.loc 1 3425 3 is_stmt 1 view .LVU5203
3427:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20118              		.loc 1 3427 8 view .LVU5204
3429:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
 20119              		.loc 1 3429 8 view .LVU5205
3430:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20120              		.loc 1 3430 4 view .LVU5206
 20121 0146 23B1     		cbz	r3, .L1421
3430:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20122              		.loc 1 3430 4 is_stmt 0 discriminator 1 view .LVU5207
 20123 0148 50EA0103 		orrs	r3, r0, r1
 20124 014c 14BF     		ite	ne
 20125 014e 0123     		movne	r3, #1
 20126 0150 0023     		moveq	r3, #0
 20127              	.L1421:
3430:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20128              		.loc 1 3430 4 discriminator 6 view .LVU5208
 20129 0152 1846     		mov	r0, r3
 20130              	.LVL1520:
3430:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20131              		.loc 1 3430 4 discriminator 6 view .LVU5209
 20132 0154 FFF7FEFF 		bl	fin_tst
 20133              	.LVL1521:
 20134 0158 AFE7     		b	.L1400
 20135              	.L1435:
3430:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20136              		.loc 1 3430 4 discriminator 6 view .LVU5210
ARM GAS  /tmp/ccaPnj5t.s 			page 539


 20137              	.LBE3026:
 20138              	.LBB3039:
3472:src/xeq.c     **** 		} else
 20139              		.loc 1 3472 4 is_stmt 1 view .LVU5211
 20140 015a FFF7FEFF 		bl	dn_subtract
 20141              	.LVL1522:
 20142 015e A8E7     		b	.L1417
 20143              	.L1433:
3445:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20144              		.loc 1 3445 4 view .LVU5212
 20145 0160 1BA9     		add	r1, sp, #108
 20146 0162 0846     		mov	r0, r1
 20147 0164 FFF7FEFF 		bl	dn_minus
 20148              	.LVL1523:
 20149 0168 6AE7     		b	.L1410
 20150              	.LVL1524:
 20151              	.L1438:
3445:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20152              		.loc 1 3445 4 is_stmt 0 view .LVU5213
 20153              	.LBE3039:
 20154              	.LBB3040:
3421:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20155              		.loc 1 3421 4 is_stmt 1 view .LVU5214
3421:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20156              		.loc 1 3421 8 is_stmt 0 view .LVU5215
 20157 016a FFF7FEFF 		bl	intSubtract
 20158              	.LVL1525:
3421:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20159              		.loc 1 3421 8 view .LVU5216
 20160 016e 0746     		mov	r7, r0
 20161              	.LBB3035:
 20162              	.LBB3030:
1405:src/xeq.c     **** }
 20163              		.loc 1 1405 8 view .LVU5217
 20164 0170 2846     		mov	r0, r5
 20165              	.LBE3030:
 20166              	.LBE3035:
3421:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20167              		.loc 1 3421 8 view .LVU5218
 20168 0172 0E46     		mov	r6, r1
 20169              	.LVL1526:
3422:src/xeq.c     **** 
 20170              		.loc 1 3422 3 is_stmt 1 view .LVU5219
3422:src/xeq.c     **** 
 20171              		.loc 1 3422 3 is_stmt 0 view .LVU5220
 20172 0174 CDE92471 		strd	r7, r1, [sp, #144]
 20173              	.LVL1527:
 20174              	.LBB3036:
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20175              		.loc 1 1404 6 is_stmt 1 view .LVU5221
 20176              	.LBB3031:
1405:src/xeq.c     **** }
 20177              		.loc 1 1405 2 view .LVU5222
1405:src/xeq.c     **** }
 20178              		.loc 1 1405 8 is_stmt 0 view .LVU5223
 20179 0178 FFF7FEFF 		bl	get_reg_n
 20180              	.LVL1528:
ARM GAS  /tmp/ccaPnj5t.s 			page 540


1405:src/xeq.c     **** }
 20181              		.loc 1 1405 2 view .LVU5224
 20182 017c 24A9     		add	r1, sp, #144
 20183 017e 0822     		movs	r2, #8
 20184 0180 FFF7FEFF 		bl	xcopy
 20185              	.LVL1529:
1405:src/xeq.c     **** }
 20186              		.loc 1 1405 2 view .LVU5225
 20187              	.LBE3031:
 20188              	.LBE3036:
3424:src/xeq.c     **** 		if (op == RARG_ISG)
 20189              		.loc 1 3424 3 is_stmt 1 view .LVU5226
3424:src/xeq.c     **** 		if (op == RARG_ISG)
 20190              		.loc 1 3424 8 is_stmt 0 view .LVU5227
 20191 0184 24AA     		add	r2, sp, #144
 20192 0186 3846     		mov	r0, r7
 20193 0188 3146     		mov	r1, r6
 20194 018a FFF7FEFF 		bl	extract_value
 20195              	.LVL1530:
3425:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20196              		.loc 1 3425 3 is_stmt 1 view .LVU5228
3427:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20197              		.loc 1 3427 8 view .LVU5229
3427:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20198              		.loc 1 3427 11 is_stmt 0 view .LVU5230
 20199 018e 3A2C     		cmp	r4, #58
3428:src/xeq.c     **** 		else if (op == RARG_ISE)
 20200              		.loc 1 3428 4 view .LVU5231
 20201 0190 249B     		ldr	r3, [sp, #144]
3427:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20202              		.loc 1 3427 11 view .LVU5232
 20203 0192 25D0     		beq	.L1439
3432:src/xeq.c     **** 		return;
 20204              		.loc 1 3432 4 is_stmt 1 view .LVU5233
 20205 0194 13B3     		cbz	r3, .L1423
 20206              	.LVL1531:
 20207              	.L1431:
3432:src/xeq.c     **** 		return;
 20208              		.loc 1 3432 4 is_stmt 0 discriminator 2 view .LVU5234
 20209 0196 50EA0103 		orrs	r3, r0, r1
 20210 019a 0CBF     		ite	eq
 20211 019c 0120     		moveq	r0, #1
 20212 019e 0020     		movne	r0, #0
 20213              	.L1408:
3432:src/xeq.c     **** 		return;
 20214              		.loc 1 3432 4 discriminator 6 view .LVU5235
 20215 01a0 FFF7FEFF 		bl	fin_tst
 20216              	.LVL1532:
3433:src/xeq.c     **** 	} else {
 20217              		.loc 1 3433 3 is_stmt 1 discriminator 6 view .LVU5236
 20218              	.LBE3040:
3477:src/xeq.c     **** 
 20219              		.loc 1 3477 1 is_stmt 0 discriminator 6 view .LVU5237
 20220 01a4 2FB0     		add	sp, sp, #188
 20221              		.cfi_remember_state
 20222              		.cfi_def_cfa_offset 20
 20223              		@ sp needed
ARM GAS  /tmp/ccaPnj5t.s 			page 541


 20224 01a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 20225              	.LVL1533:
 20226              	.L1436:
 20227              		.cfi_restore_state
 20228              	.LBB3041:
3465:src/xeq.c     **** 			else
 20229              		.loc 1 3465 5 is_stmt 1 view .LVU5238
 20230 01a8 FFF7FEFF 		bl	dn_le0
 20231              	.LVL1534:
 20232 01ac FFF7FEFF 		bl	fin_tst
 20233              	.LVL1535:
 20234 01b0 76E7     		b	.L1414
 20235              	.LVL1536:
 20236              	.L1402:
3465:src/xeq.c     **** 			else
 20237              		.loc 1 3465 5 is_stmt 0 view .LVU5239
 20238              	.LBE3041:
 20239              	.LBB3042:
3419:src/xeq.c     **** 		else
 20240              		.loc 1 3419 4 is_stmt 1 view .LVU5240
3419:src/xeq.c     **** 		else
 20241              		.loc 1 3419 8 is_stmt 0 view .LVU5241
 20242 01b2 FFF7FEFF 		bl	intAdd
 20243              	.LVL1537:
3419:src/xeq.c     **** 		else
 20244              		.loc 1 3419 8 view .LVU5242
 20245 01b6 0646     		mov	r6, r0
 20246              	.LBB3037:
 20247              	.LBB3032:
1405:src/xeq.c     **** }
 20248              		.loc 1 1405 8 view .LVU5243
 20249 01b8 2846     		mov	r0, r5
 20250              	.LBE3032:
 20251              	.LBE3037:
3419:src/xeq.c     **** 		else
 20252              		.loc 1 3419 8 view .LVU5244
 20253 01ba 0C46     		mov	r4, r1
 20254              	.LVL1538:
3422:src/xeq.c     **** 
 20255              		.loc 1 3422 3 is_stmt 1 view .LVU5245
3422:src/xeq.c     **** 
 20256              		.loc 1 3422 3 is_stmt 0 view .LVU5246
 20257 01bc CDE92461 		strd	r6, r1, [sp, #144]
 20258              	.LVL1539:
 20259              	.LBB3038:
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20260              		.loc 1 1404 6 is_stmt 1 view .LVU5247
 20261              	.LBB3033:
1405:src/xeq.c     **** }
 20262              		.loc 1 1405 2 view .LVU5248
1405:src/xeq.c     **** }
 20263              		.loc 1 1405 8 is_stmt 0 view .LVU5249
 20264 01c0 FFF7FEFF 		bl	get_reg_n
 20265              	.LVL1540:
1405:src/xeq.c     **** }
 20266              		.loc 1 1405 2 view .LVU5250
 20267 01c4 24A9     		add	r1, sp, #144
ARM GAS  /tmp/ccaPnj5t.s 			page 542


 20268 01c6 0822     		movs	r2, #8
 20269 01c8 FFF7FEFF 		bl	xcopy
 20270              	.LVL1541:
1405:src/xeq.c     **** }
 20271              		.loc 1 1405 2 view .LVU5251
 20272              	.LBE3033:
 20273              	.LBE3038:
3424:src/xeq.c     **** 		if (op == RARG_ISG)
 20274              		.loc 1 3424 3 is_stmt 1 view .LVU5252
3424:src/xeq.c     **** 		if (op == RARG_ISG)
 20275              		.loc 1 3424 8 is_stmt 0 view .LVU5253
 20276 01cc 24AA     		add	r2, sp, #144
 20277 01ce 3046     		mov	r0, r6
 20278 01d0 2146     		mov	r1, r4
 20279 01d2 FFF7FEFF 		bl	extract_value
 20280              	.LVL1542:
3426:src/xeq.c     **** 		else if (op == RARG_DSE)
 20281              		.loc 1 3426 4 view .LVU5254
 20282 01d6 249B     		ldr	r3, [sp, #144]
 20283              	.LVL1543:
3425:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20284              		.loc 1 3425 3 is_stmt 1 view .LVU5255
3426:src/xeq.c     **** 		else if (op == RARG_DSE)
 20285              		.loc 1 3426 4 view .LVU5256
 20286 01d8 002B     		cmp	r3, #0
 20287 01da DCD0     		beq	.L1431
 20288              	.LVL1544:
 20289              	.L1423:
3432:src/xeq.c     **** 		return;
 20290              		.loc 1 3432 4 is_stmt 0 view .LVU5257
 20291 01dc 0120     		movs	r0, #1
 20292 01de DFE7     		b	.L1408
 20293              	.LVL1545:
 20294              	.L1439:
3428:src/xeq.c     **** 		else if (op == RARG_ISE)
 20295              		.loc 1 3428 4 is_stmt 1 view .LVU5258
 20296 01e0 2BB9     		cbnz	r3, .L1422
3428:src/xeq.c     **** 		else if (op == RARG_ISE)
 20297              		.loc 1 3428 4 is_stmt 0 discriminator 1 view .LVU5259
 20298 01e2 50EA0103 		orrs	r3, r0, r1
 20299 01e6 14BF     		ite	ne
 20300 01e8 0120     		movne	r0, #1
 20301              	.LVL1546:
3428:src/xeq.c     **** 		else if (op == RARG_ISE)
 20302              		.loc 1 3428 4 discriminator 1 view .LVU5260
 20303 01ea 0020     		moveq	r0, #0
 20304 01ec D8E7     		b	.L1408
 20305              	.LVL1547:
 20306              	.L1422:
3428:src/xeq.c     **** 		else if (op == RARG_ISE)
 20307              		.loc 1 3428 4 view .LVU5261
 20308 01ee 0020     		movs	r0, #0
 20309              	.LVL1548:
3428:src/xeq.c     **** 		else if (op == RARG_ISE)
 20310              		.loc 1 3428 4 view .LVU5262
 20311 01f0 D6E7     		b	.L1408
 20312              	.L1441:
ARM GAS  /tmp/ccaPnj5t.s 			page 543


 20313 01f2 00BF     		.align	2
 20314              	.L1440:
 20315 01f4 00000000 		.word	main_ram
 20316              	.LBE3042:
 20317              		.cfi_endproc
 20318              	.LFE194:
 20320              		.section	.text.op_shift_digit,"ax",%progbits
 20321              		.align	1
 20322              		.p2align 2,,3
 20323              		.global	op_shift_digit
 20324              		.syntax unified
 20325              		.thumb
 20326              		.thumb_func
 20327              		.fpu fpv4-sp-d16
 20329              	op_shift_digit:
 20330              	.LVL1549:
 20331              	.LFB195:
3482:src/xeq.c     **** 	decNumber x;
 20332              		.loc 1 3482 51 is_stmt 1 view -0
 20333              		.cfi_startproc
 20334              		@ args = 0, pretend = 0, frame = 40
 20335              		@ frame_needed = 0, uses_anonymous_args = 0
3483:src/xeq.c     **** 	int adjust = n;
 20336              		.loc 1 3483 2 view .LVU5264
3484:src/xeq.c     **** 
 20337              		.loc 1 3484 2 view .LVU5265
3486:src/xeq.c     **** 		bad_mode_error();
 20338              		.loc 1 3486 6 is_stmt 0 view .LVU5266
 20339 0000 174B     		ldr	r3, .L1451
 20340 0002 1B68     		ldr	r3, [r3]
 20341 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 20342              	.LVL1550:
3486:src/xeq.c     **** 		bad_mode_error();
 20343              		.loc 1 3486 2 is_stmt 1 view .LVU5267
3486:src/xeq.c     **** 		bad_mode_error();
 20344              		.loc 1 3486 5 is_stmt 0 view .LVU5268
 20345 0008 DB07     		lsls	r3, r3, #31
 20346 000a 06D5     		bpl	.L1443
3487:src/xeq.c     **** 		return;
 20347              		.loc 1 3487 3 is_stmt 1 view .LVU5269
 20348              	.LBB3054:
 20349              	.LBI3054:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 20350              		.loc 1 569 6 view .LVU5270
 20351              	.LBE3054:
 570:src/xeq.c     **** }
 20352              		.loc 1 570 2 view .LVU5271
 20353              	.LVL1551:
 20354              	.LBB3059:
 20355              	.LBB3055:
 20356              	.LBI3055:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20357              		.loc 1 540 5 view .LVU5272
 20358              	.LBB3056:
 541:src/xeq.c     **** 		Error = e;
 20359              		.loc 1 541 2 view .LVU5273
 541:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/ccaPnj5t.s 			page 544


 20360              		.loc 1 541 12 is_stmt 0 view .LVU5274
 20361 000c 154B     		ldr	r3, .L1451+4
 541:src/xeq.c     **** 		Error = e;
 20362              		.loc 1 541 5 view .LVU5275
 20363 000e 1A68     		ldr	r2, [r3]
 20364 0010 12B9     		cbnz	r2, .L1449
 20365              	.LVL1552:
 20366              	.LBB3057:
 20367              	.LBI3057:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20368              		.loc 1 540 5 is_stmt 1 view .LVU5276
 20369              	.LBB3058:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 20370              		.loc 1 542 3 view .LVU5277
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 20371              		.loc 1 542 9 is_stmt 0 view .LVU5278
 20372 0012 0D22     		movs	r2, #13
 20373 0014 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 20374              		.loc 1 543 3 is_stmt 1 view .LVU5279
 20375 0016 7047     		bx	lr
 20376              	.LVL1553:
 20377              	.L1449:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 20378              		.loc 1 543 3 is_stmt 0 view .LVU5280
 20379 0018 7047     		bx	lr
 20380              	.LVL1554:
 20381              	.L1443:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 20382              		.loc 1 543 3 view .LVU5281
 20383              	.LBE3058:
 20384              	.LBE3057:
 20385              	.LBE3056:
 20386              	.LBE3055:
 20387              	.LBE3059:
3490:src/xeq.c     **** 	setlastX();
 20388              		.loc 1 3490 2 is_stmt 1 view .LVU5282
3482:src/xeq.c     **** 	decNumber x;
 20389              		.loc 1 3482 51 is_stmt 0 view .LVU5283
 20390 001a 30B5     		push	{r4, r5, lr}
 20391              		.cfi_def_cfa_offset 12
 20392              		.cfi_offset 4, -12
 20393              		.cfi_offset 5, -8
 20394              		.cfi_offset 14, -4
 20395 001c 8BB0     		sub	sp, sp, #44
 20396              		.cfi_def_cfa_offset 56
 20397              	.LVL1555:
 20398              	.LBB3060:
 20399              	.LBI3060:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 20400              		.loc 1 818 12 is_stmt 1 view .LVU5284
 20401              	.LBB3061:
 819:src/xeq.c     **** }
 20402              		.loc 1 819 2 view .LVU5285
 20403 001e 0446     		mov	r4, r0
 20404 0020 0D46     		mov	r5, r1
 819:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 545


 20405              		.loc 1 819 9 is_stmt 0 view .LVU5286
 20406 0022 01A8     		add	r0, sp, #4
 20407              	.LVL1556:
 819:src/xeq.c     **** }
 20408              		.loc 1 819 9 view .LVU5287
 20409 0024 6421     		movs	r1, #100
 20410              	.LVL1557:
 819:src/xeq.c     **** }
 20411              		.loc 1 819 9 view .LVU5288
 20412 0026 FFF7FEFF 		bl	getRegister
 20413              	.LVL1558:
 819:src/xeq.c     **** }
 20414              		.loc 1 819 9 view .LVU5289
 20415              	.LBE3061:
 20416              	.LBE3060:
3491:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
 20417              		.loc 1 3491 2 is_stmt 1 view .LVU5290
 20418              	.LBB3062:
 20419              	.LBI3062:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 20420              		.loc 1 786 6 view .LVU5291
 20421              	.LBB3063:
 787:src/xeq.c     **** }
 20422              		.loc 1 787 2 view .LVU5292
 20423 002a 6421     		movs	r1, #100
 20424 002c 6C20     		movs	r0, #108
 20425 002e FFF7FEFF 		bl	copyreg_n
 20426              	.LVL1559:
 20427              	.LBE3063:
 20428              	.LBE3062:
3492:src/xeq.c     **** 		return;
 20429              		.loc 1 3492 2 view .LVU5293
3492:src/xeq.c     **** 		return;
 20430              		.loc 1 3492 5 is_stmt 0 view .LVU5294
 20431 0032 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 20432 0036 13F0700F 		tst	r3, #112
 20433 003a 0ED1     		bne	.L1442
3492:src/xeq.c     **** 		return;
 20434              		.loc 1 3492 32 discriminator 1 view .LVU5295
 20435 003c 01A8     		add	r0, sp, #4
 20436 003e FFF7FEFF 		bl	dn_eq0
 20437              	.LVL1560:
3492:src/xeq.c     **** 		return;
 20438              		.loc 1 3492 29 discriminator 1 view .LVU5296
 20439 0042 50B9     		cbnz	r0, .L1442
3494:src/xeq.c     **** 		adjust = -adjust;
 20440              		.loc 1 3494 5 view .LVU5297
 20441 0044 722D     		cmp	r5, #114
3484:src/xeq.c     **** 
 20442              		.loc 1 3484 6 view .LVU5298
 20443 0046 2046     		mov	r0, r4
3494:src/xeq.c     **** 		adjust = -adjust;
 20444              		.loc 1 3494 2 is_stmt 1 view .LVU5299
3495:src/xeq.c     **** 	x.exponent += adjust;
 20445              		.loc 1 3495 3 view .LVU5300
3495:src/xeq.c     **** 	x.exponent += adjust;
 20446              		.loc 1 3495 10 is_stmt 0 view .LVU5301
ARM GAS  /tmp/ccaPnj5t.s 			page 546


 20447 0048 08BF     		it	eq
 20448 004a 6042     		rsbeq	r0, r4, #0
 20449              	.LVL1561:
3496:src/xeq.c     **** 	setX(&x);
 20450              		.loc 1 3496 2 is_stmt 1 view .LVU5302
3496:src/xeq.c     **** 	setX(&x);
 20451              		.loc 1 3496 13 is_stmt 0 view .LVU5303
 20452 004c 029C     		ldr	r4, [sp, #8]
 20453              	.LVL1562:
 20454              	.LBB3064:
 20455              	.LBB3065:
 823:src/xeq.c     **** }
 20456              		.loc 1 823 2 view .LVU5304
 20457 004e 01A9     		add	r1, sp, #4
 20458              	.LBE3065:
 20459              	.LBE3064:
3496:src/xeq.c     **** 	setX(&x);
 20460              		.loc 1 3496 13 view .LVU5305
 20461 0050 0444     		add	r4, r4, r0
 20462              	.LBB3068:
 20463              	.LBB3066:
 823:src/xeq.c     **** }
 20464              		.loc 1 823 2 view .LVU5306
 20465 0052 6420     		movs	r0, #100
 20466              	.LVL1563:
 823:src/xeq.c     **** }
 20467              		.loc 1 823 2 view .LVU5307
 20468              	.LBE3066:
 20469              	.LBE3068:
3496:src/xeq.c     **** 	setX(&x);
 20470              		.loc 1 3496 13 view .LVU5308
 20471 0054 0294     		str	r4, [sp, #8]
3497:src/xeq.c     **** }
 20472              		.loc 1 3497 2 is_stmt 1 view .LVU5309
 20473              	.LVL1564:
 20474              	.LBB3069:
 20475              	.LBI3064:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 20476              		.loc 1 822 6 view .LVU5310
 20477              	.LBB3067:
 823:src/xeq.c     **** }
 20478              		.loc 1 823 2 view .LVU5311
 20479 0056 FFF7FEFF 		bl	setRegister
 20480              	.LVL1565:
 20481              	.L1442:
 823:src/xeq.c     **** }
 20482              		.loc 1 823 2 is_stmt 0 view .LVU5312
 20483              	.LBE3067:
 20484              	.LBE3069:
3498:src/xeq.c     **** 
 20485              		.loc 1 3498 1 view .LVU5313
 20486 005a 0BB0     		add	sp, sp, #44
 20487              		.cfi_def_cfa_offset 12
 20488              		@ sp needed
 20489 005c 30BD     		pop	{r4, r5, pc}
 20490              	.L1452:
 20491 005e 00BF     		.align	2
ARM GAS  /tmp/ccaPnj5t.s 			page 547


 20492              	.L1451:
 20493 0060 00000000 		.word	main_ram
 20494 0064 00000000 		.word	Error
 20495              		.cfi_endproc
 20496              	.LFE195:
 20498              		.section	.text.get_user_flag,"ax",%progbits
 20499              		.align	1
 20500              		.p2align 2,,3
 20501              		.global	get_user_flag
 20502              		.syntax unified
 20503              		.thumb
 20504              		.thumb_func
 20505              		.fpu fpv4-sp-d16
 20507              	get_user_flag:
 20508              	.LVL1566:
 20509              	.LFB197:
3531:src/xeq.c     **** 	unsigned short mask;
 20510              		.loc 1 3531 26 is_stmt 1 view -0
 20511              		.cfi_startproc
 20512              		@ args = 0, pretend = 0, frame = 8
 20513              		@ frame_needed = 0, uses_anonymous_args = 0
3532:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 20514              		.loc 1 3532 2 view .LVU5315
3533:src/xeq.c     **** 
 20515              		.loc 1 3533 2 view .LVU5316
3531:src/xeq.c     **** 	unsigned short mask;
 20516              		.loc 1 3531 26 is_stmt 0 view .LVU5317
 20517 0000 00B5     		push	{lr}
 20518              		.cfi_def_cfa_offset 4
 20519              		.cfi_offset 14, -4
 20520 0002 83B0     		sub	sp, sp, #12
 20521              		.cfi_def_cfa_offset 16
3533:src/xeq.c     **** 
 20522              		.loc 1 3533 34 view .LVU5318
 20523 0004 0DF10601 		add	r1, sp, #6
 20524 0008 FFF7FEFF 		bl	flag_word
 20525              	.LVL1567:
3535:src/xeq.c     **** }
 20526              		.loc 1 3535 2 is_stmt 1 view .LVU5319
3535:src/xeq.c     **** }
 20527              		.loc 1 3535 24 is_stmt 0 view .LVU5320
 20528 000c BDF80630 		ldrh	r3, [sp, #6]
 20529 0010 0288     		ldrh	r2, [r0]
 20530 0012 1A42     		tst	r2, r3
3536:src/xeq.c     **** 
 20531              		.loc 1 3536 1 view .LVU5321
 20532 0014 14BF     		ite	ne
 20533 0016 0120     		movne	r0, #1
 20534              	.LVL1568:
3536:src/xeq.c     **** 
 20535              		.loc 1 3536 1 view .LVU5322
 20536 0018 0020     		moveq	r0, #0
 20537 001a 03B0     		add	sp, sp, #12
 20538              		.cfi_def_cfa_offset 4
 20539              		@ sp needed
 20540 001c 5DF804FB 		ldr	pc, [sp], #4
 20541              		.cfi_endproc
ARM GAS  /tmp/ccaPnj5t.s 			page 548


 20542              	.LFE197:
 20544              		.section	.text.cmdflag,"ax",%progbits
 20545              		.align	1
 20546              		.p2align 2,,3
 20547              		.global	cmdflag
 20548              		.syntax unified
 20549              		.thumb
 20550              		.thumb_func
 20551              		.fpu fpv4-sp-d16
 20553              	cmdflag:
 20554              	.LVL1569:
 20555              	.LFB199:
3559:src/xeq.c     **** 	unsigned short mask;
 20556              		.loc 1 3559 46 is_stmt 1 view -0
 20557              		.cfi_startproc
 20558              		@ args = 0, pretend = 0, frame = 8
 20559              		@ frame_needed = 0, uses_anonymous_args = 0
3560:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
 20560              		.loc 1 3560 2 view .LVU5324
3561:src/xeq.c     **** 	int flg = *f & mask;
 20561              		.loc 1 3561 2 view .LVU5325
3559:src/xeq.c     **** 	unsigned short mask;
 20562              		.loc 1 3559 46 is_stmt 0 view .LVU5326
 20563 0000 70B5     		push	{r4, r5, r6, lr}
 20564              		.cfi_def_cfa_offset 16
 20565              		.cfi_offset 4, -16
 20566              		.cfi_offset 5, -12
 20567              		.cfi_offset 6, -8
 20568              		.cfi_offset 14, -4
 20569 0002 82B0     		sub	sp, sp, #8
 20570              		.cfi_def_cfa_offset 24
3559:src/xeq.c     **** 	unsigned short mask;
 20571              		.loc 1 3559 46 view .LVU5327
 20572 0004 0C46     		mov	r4, r1
3561:src/xeq.c     **** 	int flg = *f & mask;
 20573              		.loc 1 3561 28 view .LVU5328
 20574 0006 0DF10601 		add	r1, sp, #6
 20575              	.LVL1570:
3559:src/xeq.c     **** 	unsigned short mask;
 20576              		.loc 1 3559 46 view .LVU5329
 20577 000a 0646     		mov	r6, r0
3561:src/xeq.c     **** 	int flg = *f & mask;
 20578              		.loc 1 3561 28 view .LVU5330
 20579 000c FFF7FEFF 		bl	flag_word
 20580              	.LVL1571:
3562:src/xeq.c     **** 
 20581              		.loc 1 3562 15 view .LVU5331
 20582 0010 BDF80620 		ldrh	r2, [sp, #6]
3562:src/xeq.c     **** 
 20583              		.loc 1 3562 12 view .LVU5332
 20584 0014 0388     		ldrh	r3, [r0]
 20585 0016 A4F15101 		sub	r1, r4, #81
3561:src/xeq.c     **** 	int flg = *f & mask;
 20586              		.loc 1 3561 28 view .LVU5333
 20587 001a 0546     		mov	r5, r0
 20588              	.LVL1572:
3562:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 549


 20589              		.loc 1 3562 2 is_stmt 1 view .LVU5334
3562:src/xeq.c     **** 
 20590              		.loc 1 3562 6 is_stmt 0 view .LVU5335
 20591 001c 03EA0200 		and	r0, r3, r2
 20592              	.LVL1573:
3564:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
 20593              		.loc 1 3564 2 is_stmt 1 view .LVU5336
 20594 0020 0A29     		cmp	r1, #10
 20595 0022 1AD8     		bhi	.L1455
 20596 0024 DFE801F0 		tbb	[pc, r1]
 20597              	.L1458:
 20598 0028 23       		.byte	(.L1468-.L1458)/2
 20599 0029 0E       		.byte	(.L1467-.L1458)/2
 20600 002a 46       		.byte	(.L1466-.L1458)/2
 20601 002b 29       		.byte	(.L1479-.L1458)/2
 20602 002c 26       		.byte	(.L1464-.L1458)/2
 20603 002d 09       		.byte	(.L1478-.L1458)/2
 20604 002e 1E       		.byte	(.L1477-.L1458)/2
 20605 002f 2D       		.byte	(.L1461-.L1458)/2
 20606 0030 06       		.byte	(.L1460-.L1458)/2
 20607 0031 1B       		.byte	(.L1459-.L1458)/2
 20608 0032 3A       		.byte	(.L1457-.L1458)/2
 20609 0033 00       		.p2align 1
 20610              	.L1460:
3576:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20611              		.loc 1 3576 17 view .LVU5337
 20612 0034 B0FA80F0 		clz	r0, r0
 20613              	.LVL1574:
3576:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20614              		.loc 1 3576 17 is_stmt 0 view .LVU5338
 20615 0038 4009     		lsrs	r0, r0, #5
 20616              	.L1478:
3576:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20617              		.loc 1 3576 17 view .LVU5339
 20618 003a FFF7FEFF 		bl	fin_tst
 20619              	.LVL1575:
3576:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20620              		.loc 1 3576 33 is_stmt 1 view .LVU5340
3576:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20621              		.loc 1 3576 45 view .LVU5341
3585:src/xeq.c     **** 		*f |= mask;
 20622              		.loc 1 3585 2 view .LVU5342
 20623 003e 2B88     		ldrh	r3, [r5]
 20624 0040 BDF80620 		ldrh	r2, [sp, #6]
 20625              	.LVL1576:
 20626              	.L1467:
3588:src/xeq.c     **** 
 20627              		.loc 1 3588 3 view .LVU5343
3588:src/xeq.c     **** 
 20628              		.loc 1 3588 6 is_stmt 0 view .LVU5344
 20629 0044 23EA0203 		bic	r3, r3, r2
 20630 0048 0021     		movs	r1, #0
 20631              	.L1470:
3590:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20632              		.loc 1 3590 5 view .LVU5345
 20633 004a 682E     		cmp	r6, #104
 20634 004c 2B80     		strh	r3, [r5]	@ movhi
ARM GAS  /tmp/ccaPnj5t.s 			page 550


3590:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20635              		.loc 1 3590 2 is_stmt 1 view .LVU5346
3590:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20636              		.loc 1 3590 5 is_stmt 0 view .LVU5347
 20637 004e 04D1     		bne	.L1455
3591:src/xeq.c     **** 		finish_display(); // BIG_EQ
 20638              		.loc 1 3591 3 is_stmt 1 view .LVU5348
 20639 0050 8320     		movs	r0, #131
 20640 0052 FFF7FEFF 		bl	dot
 20641              	.LVL1577:
3592:src/xeq.c     **** 	}
 20642              		.loc 1 3592 3 view .LVU5349
 20643 0056 FFF7FEFF 		bl	finish_display
 20644              	.LVL1578:
 20645              	.L1455:
3594:src/xeq.c     **** 
 20646              		.loc 1 3594 1 is_stmt 0 view .LVU5350
 20647 005a 02B0     		add	sp, sp, #8
 20648              		.cfi_remember_state
 20649              		.cfi_def_cfa_offset 16
 20650              		@ sp needed
 20651 005c 70BD     		pop	{r4, r5, r6, pc}
 20652              	.LVL1579:
 20653              	.L1459:
 20654              		.cfi_restore_state
3577:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20655              		.loc 1 3577 17 is_stmt 1 view .LVU5351
 20656 005e B0FA80F0 		clz	r0, r0
 20657              	.LVL1580:
3577:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20658              		.loc 1 3577 17 is_stmt 0 view .LVU5352
 20659 0062 4009     		lsrs	r0, r0, #5
 20660              	.L1477:
3577:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20661              		.loc 1 3577 17 view .LVU5353
 20662 0064 FFF7FEFF 		bl	fin_tst
 20663              	.LVL1581:
3577:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20664              		.loc 1 3577 33 is_stmt 1 view .LVU5354
3577:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20665              		.loc 1 3577 45 view .LVU5355
3585:src/xeq.c     **** 		*f |= mask;
 20666              		.loc 1 3585 2 view .LVU5356
 20667 0068 2B88     		ldrh	r3, [r5]
 20668 006a BDF80620 		ldrh	r2, [sp, #6]
 20669              	.LVL1582:
 20670              	.L1468:
3586:src/xeq.c     **** 	else
 20671              		.loc 1 3586 3 view .LVU5357
3586:src/xeq.c     **** 	else
 20672              		.loc 1 3586 6 is_stmt 0 view .LVU5358
 20673 006e 1343     		orrs	r3, r3, r2
 20674 0070 0121     		movs	r1, #1
 20675 0072 EAE7     		b	.L1470
 20676              	.LVL1583:
 20677              	.L1464:
3570:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 551


 20678              		.loc 1 3570 16 is_stmt 1 view .LVU5359
 20679 0074 B0FA80F0 		clz	r0, r0
 20680              	.LVL1584:
3570:src/xeq.c     **** 
 20681              		.loc 1 3570 16 is_stmt 0 view .LVU5360
 20682 0078 4009     		lsrs	r0, r0, #5
 20683              	.L1479:
3570:src/xeq.c     **** 
 20684              		.loc 1 3570 16 view .LVU5361
 20685 007a FFF7FEFF 		bl	fin_tst
 20686              	.LVL1585:
3570:src/xeq.c     **** 
 20687              		.loc 1 3570 37 is_stmt 1 view .LVU5362
3594:src/xeq.c     **** 
 20688              		.loc 1 3594 1 is_stmt 0 view .LVU5363
 20689 007e 02B0     		add	sp, sp, #8
 20690              		.cfi_remember_state
 20691              		.cfi_def_cfa_offset 16
 20692              		@ sp needed
 20693 0080 70BD     		pop	{r4, r5, r6, pc}
 20694              	.LVL1586:
 20695              	.L1461:
 20696              		.cfi_restore_state
3574:src/xeq.c     **** 
 20697              		.loc 1 3574 17 is_stmt 1 view .LVU5364
3574:src/xeq.c     **** 
 20698              		.loc 1 3574 45 is_stmt 0 view .LVU5365
 20699 0082 B0FA80F4 		clz	r4, r0
 20700 0086 6409     		lsrs	r4, r4, #5
3574:src/xeq.c     **** 
 20701              		.loc 1 3574 17 view .LVU5366
 20702 0088 FFF7FEFF 		bl	fin_tst
 20703              	.LVL1587:
3574:src/xeq.c     **** 
 20704              		.loc 1 3574 31 is_stmt 1 view .LVU5367
3574:src/xeq.c     **** 
 20705              		.loc 1 3574 52 view .LVU5368
3585:src/xeq.c     **** 		*f |= mask;
 20706              		.loc 1 3585 2 view .LVU5369
 20707 008c 2B88     		ldrh	r3, [r5]
 20708 008e BDF80620 		ldrh	r2, [sp, #6]
3585:src/xeq.c     **** 		*f |= mask;
 20709              		.loc 1 3585 5 is_stmt 0 view .LVU5370
 20710 0092 002C     		cmp	r4, #0
 20711 0094 D6D0     		beq	.L1467
 20712              	.L1480:
 20713              	.LVL1588:
3586:src/xeq.c     **** 	else
 20714              		.loc 1 3586 3 is_stmt 1 view .LVU5371
3586:src/xeq.c     **** 	else
 20715              		.loc 1 3586 6 is_stmt 0 view .LVU5372
 20716 0096 1343     		orrs	r3, r3, r2
 20717 0098 0121     		movs	r1, #1
 20718 009a D6E7     		b	.L1470
 20719              	.LVL1589:
 20720              	.L1457:
3578:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 552


 20721              		.loc 1 3578 17 is_stmt 1 view .LVU5373
 20722 009c B0FA80F4 		clz	r4, r0
 20723 00a0 6409     		lsrs	r4, r4, #5
 20724 00a2 2046     		mov	r0, r4
 20725              	.LVL1590:
3578:src/xeq.c     **** 
 20726              		.loc 1 3578 17 is_stmt 0 view .LVU5374
 20727 00a4 FFF7FEFF 		bl	fin_tst
 20728              	.LVL1591:
3578:src/xeq.c     **** 
 20729              		.loc 1 3578 33 is_stmt 1 view .LVU5375
3578:src/xeq.c     **** 
 20730              		.loc 1 3578 52 view .LVU5376
 20731 00a8 2B88     		ldrh	r3, [r5]
 20732 00aa BDF80620 		ldrh	r2, [sp, #6]
3585:src/xeq.c     **** 		*f |= mask;
 20733              		.loc 1 3585 2 view .LVU5377
3585:src/xeq.c     **** 		*f |= mask;
 20734              		.loc 1 3585 5 is_stmt 0 view .LVU5378
 20735 00ae 002C     		cmp	r4, #0
 20736 00b0 C8D0     		beq	.L1467
 20737 00b2 F0E7     		b	.L1480
 20738              	.LVL1592:
 20739              	.L1466:
3567:src/xeq.c     **** 
 20740              		.loc 1 3567 16 is_stmt 1 view .LVU5379
3567:src/xeq.c     **** 
 20741              		.loc 1 3567 29 is_stmt 0 view .LVU5380
 20742 00b4 B0FA80F4 		clz	r4, r0
 20743 00b8 6409     		lsrs	r4, r4, #5
 20744              	.LVL1593:
3567:src/xeq.c     **** 
 20745              		.loc 1 3567 38 is_stmt 1 view .LVU5381
3585:src/xeq.c     **** 		*f |= mask;
 20746              		.loc 1 3585 2 view .LVU5382
3585:src/xeq.c     **** 		*f |= mask;
 20747              		.loc 1 3585 5 is_stmt 0 view .LVU5383
 20748 00ba 002C     		cmp	r4, #0
 20749 00bc C2D0     		beq	.L1467
 20750 00be EAE7     		b	.L1480
 20751              		.cfi_endproc
 20752              	.LFE199:
 20754              		.section	.text.put_user_flag,"ax",%progbits
 20755              		.align	1
 20756              		.p2align 2,,3
 20757              		.global	put_user_flag
 20758              		.syntax unified
 20759              		.thumb
 20760              		.thumb_func
 20761              		.fpu fpv4-sp-d16
 20763              	put_user_flag:
 20764              	.LVL1594:
 20765              	.LFB198:
3538:src/xeq.c     **** 	if (f)	set_user_flag(n);
 20766              		.loc 1 3538 34 is_stmt 1 view -0
 20767              		.cfi_startproc
 20768              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccaPnj5t.s 			page 553


 20769              		@ frame_needed = 0, uses_anonymous_args = 0
 20770              		@ link register save eliminated.
3539:src/xeq.c     **** 	else	clr_user_flag(n);
 20771              		.loc 1 3539 2 view .LVU5385
3539:src/xeq.c     **** 	else	clr_user_flag(n);
 20772              		.loc 1 3539 5 is_stmt 0 view .LVU5386
 20773 0000 11B1     		cbz	r1, .L1482
3539:src/xeq.c     **** 	else	clr_user_flag(n);
 20774              		.loc 1 3539 9 is_stmt 1 discriminator 1 view .LVU5387
 20775 0002 5121     		movs	r1, #81
 20776              	.LVL1595:
3539:src/xeq.c     **** 	else	clr_user_flag(n);
 20777              		.loc 1 3539 9 is_stmt 0 discriminator 1 view .LVU5388
 20778 0004 FFF7FEBF 		b	cmdflag
 20779              	.LVL1596:
 20780              	.L1482:
3540:src/xeq.c     **** }
 20781              		.loc 1 3540 7 is_stmt 1 view .LVU5389
 20782 0008 5221     		movs	r1, #82
 20783              	.LVL1597:
3540:src/xeq.c     **** }
 20784              		.loc 1 3540 7 is_stmt 0 view .LVU5390
 20785 000a FFF7FEBF 		b	cmdflag
 20786              	.LVL1598:
3540:src/xeq.c     **** }
 20787              		.loc 1 3540 7 view .LVU5391
 20788              		.cfi_endproc
 20789              	.LFE198:
 20791 000e 00BF     		.section	.text.clrflags,"ax",%progbits
 20792              		.align	1
 20793              		.p2align 2,,3
 20794              		.global	clrflags
 20795              		.syntax unified
 20796              		.thumb
 20797              		.thumb_func
 20798              		.fpu fpv4-sp-d16
 20800              	clrflags:
 20801              	.LVL1599:
 20802              	.LFB200:
3598:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20803              		.loc 1 3598 30 is_stmt 1 view -0
 20804              		.cfi_startproc
 20805              		@ args = 0, pretend = 0, frame = 0
 20806              		@ frame_needed = 0, uses_anonymous_args = 0
3599:src/xeq.c     **** 	if (LocalRegs < 0) {
 20807              		.loc 1 3599 2 view .LVU5393
3598:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20808              		.loc 1 3598 30 is_stmt 0 view .LVU5394
 20809 0000 10B5     		push	{r4, lr}
 20810              		.cfi_def_cfa_offset 8
 20811              		.cfi_offset 4, -8
 20812              		.cfi_offset 14, -4
3599:src/xeq.c     **** 	if (LocalRegs < 0) {
 20813              		.loc 1 3599 7 view .LVU5395
 20814 0002 0A4C     		ldr	r4, .L1487
 20815 0004 2068     		ldr	r0, [r4]
 20816              	.LVL1600:
ARM GAS  /tmp/ccaPnj5t.s 			page 554


3599:src/xeq.c     **** 	if (LocalRegs < 0) {
 20817              		.loc 1 3599 2 view .LVU5396
 20818 0006 0E22     		movs	r2, #14
 20819 0008 00F5FE60 		add	r0, r0, #2032
 20820 000c 0021     		movs	r1, #0
 20821 000e FFF7FEFF 		bl	xset
 20822              	.LVL1601:
3600:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20823              		.loc 1 3600 2 is_stmt 1 view .LVU5397
3600:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20824              		.loc 1 3600 6 is_stmt 0 view .LVU5398
 20825 0012 2368     		ldr	r3, [r4]
3600:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20826              		.loc 1 3600 5 view .LVU5399
 20827 0014 B3F9DE37 		ldrsh	r3, [r3, #2014]
 20828 0018 002B     		cmp	r3, #0
 20829 001a 00DB     		blt	.L1486
3603:src/xeq.c     **** 
 20830              		.loc 1 3603 1 view .LVU5400
 20831 001c 10BD     		pop	{r4, pc}
 20832              	.L1486:
3601:src/xeq.c     **** 	}
 20833              		.loc 1 3601 3 is_stmt 1 view .LVU5401
3601:src/xeq.c     **** 	}
 20834              		.loc 1 3601 5 is_stmt 0 view .LVU5402
 20835 001e 0021     		movs	r1, #0
 20836 0020 7020     		movs	r0, #112
 20837 0022 FFF7FEFF 		bl	flag_word
 20838              	.LVL1602:
3601:src/xeq.c     **** 	}
 20839              		.loc 1 3601 37 view .LVU5403
 20840 0026 0023     		movs	r3, #0
 20841 0028 0380     		strh	r3, [r0]	@ movhi
3603:src/xeq.c     **** 
 20842              		.loc 1 3603 1 view .LVU5404
 20843 002a 10BD     		pop	{r4, pc}
 20844              	.L1488:
 20845              		.align	2
 20846              	.L1487:
 20847 002c 00000000 		.word	main_ram
 20848              		.cfi_endproc
 20849              	.LFE200:
 20851              		.section	.text.intws,"ax",%progbits
 20852              		.align	1
 20853              		.p2align 2,,3
 20854              		.global	intws
 20855              		.syntax unified
 20856              		.thumb
 20857              		.thumb_func
 20858              		.fpu fpv4-sp-d16
 20860              	intws:
 20861              	.LVL1603:
 20862              	.LFB201:
3608:src/xeq.c     **** 	if (is_intmode()) {
 20863              		.loc 1 3608 44 is_stmt 1 view -0
 20864              		.cfi_startproc
 20865              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/ccaPnj5t.s 			page 555


 20866              		@ frame_needed = 0, uses_anonymous_args = 0
3609:src/xeq.c     **** 		int i, ss = stack_size();
 20867              		.loc 1 3609 2 view .LVU5406
3608:src/xeq.c     **** 	if (is_intmode()) {
 20868              		.loc 1 3608 44 is_stmt 0 view .LVU5407
 20869 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20870              		.cfi_def_cfa_offset 24
 20871              		.cfi_offset 4, -24
 20872              		.cfi_offset 5, -20
 20873              		.cfi_offset 6, -16
 20874              		.cfi_offset 7, -12
 20875              		.cfi_offset 8, -8
 20876              		.cfi_offset 14, -4
3609:src/xeq.c     **** 		int i, ss = stack_size();
 20877              		.loc 1 3609 6 view .LVU5408
 20878 0004 DFF8E080 		ldr	r8, .L1500+4
 20879 0008 D8F80030 		ldr	r3, [r8]
 20880 000c 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3609:src/xeq.c     **** 		int i, ss = stack_size();
 20881              		.loc 1 3609 5 view .LVU5409
 20882 0010 D107     		lsls	r1, r2, #31
 20883              	.LVL1604:
3608:src/xeq.c     **** 	if (is_intmode()) {
 20884              		.loc 1 3608 44 view .LVU5410
 20885 0012 82B0     		sub	sp, sp, #8
 20886              		.cfi_def_cfa_offset 32
3609:src/xeq.c     **** 		int i, ss = stack_size();
 20887              		.loc 1 3609 5 view .LVU5411
 20888 0014 53D5     		bpl	.L1490
 20889              	.LBB3070:
3610:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
 20890              		.loc 1 3610 3 is_stmt 1 view .LVU5412
 20891              	.LBB3071:
 20892              	.LBI3071:
 706:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 20893              		.loc 1 706 5 view .LVU5413
 20894              	.LBB3072:
 707:src/xeq.c     **** 		return 4;
 20895              		.loc 1 707 2 view .LVU5414
 707:src/xeq.c     **** 		return 4;
 20896              		.loc 1 707 6 is_stmt 0 view .LVU5415
 20897 0016 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 707:src/xeq.c     **** 		return 4;
 20898              		.loc 1 707 5 view .LVU5416
 20899 001a 1207     		lsls	r2, r2, #28
 20900 001c 58D5     		bpl	.L1494
 20901              	.LBB3073:
 20902              	.LBI3073:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 20903              		.loc 1 185 5 is_stmt 1 view .LVU5417
 20904              	.LBB3074:
 186:src/xeq.c     **** }
 20905              		.loc 1 186 2 view .LVU5418
 186:src/xeq.c     **** }
 20906              		.loc 1 186 9 is_stmt 0 view .LVU5419
 20907 001e B3F8E027 		ldrh	r2, [r3, #2016]
 20908              	.LBE3074:
ARM GAS  /tmp/ccaPnj5t.s 			page 556


 20909              	.LBE3073:
 707:src/xeq.c     **** 		return 4;
 20910              		.loc 1 707 27 view .LVU5420
 20911 0022 920B     		lsrs	r2, r2, #14
 20912 0024 032A     		cmp	r2, #3
 20913 0026 55D0     		beq	.L1499
 709:src/xeq.c     **** }
 20914              		.loc 1 709 9 view .LVU5421
 20915 0028 0827     		movs	r7, #8
 20916              	.L1491:
 20917              	.LVL1605:
 709:src/xeq.c     **** }
 20918              		.loc 1 709 9 view .LVU5422
 20919              	.LBE3072:
 20920              	.LBE3071:
3611:src/xeq.c     **** 		long long int v;
 20921              		.loc 1 3611 3 is_stmt 1 view .LVU5423
3611:src/xeq.c     **** 		long long int v;
 20922              		.loc 1 3611 31 is_stmt 0 view .LVU5424
 20923 002a 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 20924 002e 00F03F05 		and	r5, r0, #63
 20925 0032 06F03F06 		and	r6, r6, #63
 20926              	.LVL1606:
3612:src/xeq.c     **** 
 20927              		.loc 1 3612 3 is_stmt 1 view .LVU5425
3614:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20928              		.loc 1 3614 3 view .LVU5426
3614:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20929              		.loc 1 3614 13 view .LVU5427
 20930 0036 6437     		adds	r7, r7, #100
 20931              	.LVL1607:
3611:src/xeq.c     **** 		long long int v;
 20932              		.loc 1 3611 31 is_stmt 0 view .LVU5428
 20933 0038 6424     		movs	r4, #100
 20934              	.LVL1608:
 20935              	.L1492:
3615:src/xeq.c     **** 			UState.int_len = arg;
 20936              		.loc 1 3615 4 is_stmt 1 discriminator 3 view .LVU5429
3615:src/xeq.c     **** 			UState.int_len = arg;
 20937              		.loc 1 3615 8 is_stmt 0 discriminator 3 view .LVU5430
 20938 003a 2046     		mov	r0, r4
 20939 003c FFF7FEFF 		bl	get_reg_n_int
 20940              	.LVL1609:
 20941 0040 FFF7FEFF 		bl	mask_value
 20942              	.LVL1610:
3616:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 20943              		.loc 1 3616 4 is_stmt 1 discriminator 3 view .LVU5431
3616:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 20944              		.loc 1 3616 19 is_stmt 0 discriminator 3 view .LVU5432
 20945 0044 D8F80030 		ldr	r3, [r8]
 20946 0048 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 20947 004c 65F30502 		bfi	r2, r5, #0, #6
 20948 0050 83F8E927 		strb	r2, [r3, #2025]
3617:src/xeq.c     **** 			UState.int_len = oldlen;
 20949              		.loc 1 3617 4 is_stmt 1 discriminator 3 view .LVU5433
 20950 0054 FFF7FEFF 		bl	mask_value
 20951              	.LVL1611:
ARM GAS  /tmp/ccaPnj5t.s 			page 557


3617:src/xeq.c     **** 			UState.int_len = oldlen;
 20952              		.loc 1 3617 4 is_stmt 0 discriminator 3 view .LVU5434
 20953 0058 0B46     		mov	r3, r1
 20954 005a 0246     		mov	r2, r0
 20955              	.LBB3076:
 20956              	.LBB3077:
1405:src/xeq.c     **** }
 20957              		.loc 1 1405 8 discriminator 3 view .LVU5435
 20958 005c 2046     		mov	r0, r4
 20959 005e CDE90023 		strd	r2, [sp]
 20960              	.LVL1612:
1405:src/xeq.c     **** }
 20961              		.loc 1 1405 8 discriminator 3 view .LVU5436
 20962              	.LBE3077:
 20963              	.LBI3076:
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20964              		.loc 1 1404 6 is_stmt 1 discriminator 3 view .LVU5437
 20965              	.LBB3078:
1405:src/xeq.c     **** }
 20966              		.loc 1 1405 2 discriminator 3 view .LVU5438
1405:src/xeq.c     **** }
 20967              		.loc 1 1405 8 is_stmt 0 discriminator 3 view .LVU5439
 20968 0062 FFF7FEFF 		bl	get_reg_n
 20969              	.LVL1613:
1405:src/xeq.c     **** }
 20970              		.loc 1 1405 2 discriminator 3 view .LVU5440
 20971 0066 0822     		movs	r2, #8
 20972 0068 6946     		mov	r1, sp
 20973 006a FFF7FEFF 		bl	xcopy
 20974              	.LVL1614:
1405:src/xeq.c     **** }
 20975              		.loc 1 1405 2 discriminator 3 view .LVU5441
 20976              	.LBE3078:
 20977              	.LBE3076:
3618:src/xeq.c     **** 		}
 20978              		.loc 1 3618 4 is_stmt 1 discriminator 3 view .LVU5442
3618:src/xeq.c     **** 		}
 20979              		.loc 1 3618 19 is_stmt 0 discriminator 3 view .LVU5443
 20980 006e D8F80030 		ldr	r3, [r8]
 20981 0072 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 20982 0076 0134     		adds	r4, r4, #1
 20983              	.LVL1615:
3618:src/xeq.c     **** 		}
 20984              		.loc 1 3618 19 discriminator 3 view .LVU5444
 20985 0078 66F30502 		bfi	r2, r6, #0, #6
3614:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20986              		.loc 1 3614 3 discriminator 3 view .LVU5445
 20987 007c BC42     		cmp	r4, r7
3618:src/xeq.c     **** 		}
 20988              		.loc 1 3618 19 discriminator 3 view .LVU5446
 20989 007e 83F8E927 		strb	r2, [r3, #2025]
3614:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20990              		.loc 1 3614 19 is_stmt 1 discriminator 3 view .LVU5447
 20991              	.LVL1616:
3614:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 20992              		.loc 1 3614 13 discriminator 3 view .LVU5448
3614:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
ARM GAS  /tmp/ccaPnj5t.s 			page 558


 20993              		.loc 1 3614 3 is_stmt 0 discriminator 3 view .LVU5449
 20994 0082 DAD1     		bne	.L1492
3620:src/xeq.c     **** 		UState.int_len = arg;
 20995              		.loc 1 3620 3 is_stmt 1 view .LVU5450
3620:src/xeq.c     **** 		UState.int_len = arg;
 20996              		.loc 1 3620 7 is_stmt 0 view .LVU5451
 20997 0084 6C20     		movs	r0, #108
 20998 0086 FFF7FEFF 		bl	get_reg_n_int
 20999              	.LVL1617:
 21000 008a FFF7FEFF 		bl	mask_value
 21001              	.LVL1618:
3621:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 21002              		.loc 1 3621 3 is_stmt 1 view .LVU5452
3621:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 21003              		.loc 1 3621 18 is_stmt 0 view .LVU5453
 21004 008e D8F80030 		ldr	r3, [r8]
 21005 0092 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21006 0096 65F30502 		bfi	r2, r5, #0, #6
 21007 009a 83F8E927 		strb	r2, [r3, #2025]
3622:src/xeq.c     **** 	} else
 21008              		.loc 1 3622 3 is_stmt 1 view .LVU5454
 21009 009e FFF7FEFF 		bl	mask_value
 21010              	.LVL1619:
3622:src/xeq.c     **** 	} else
 21011              		.loc 1 3622 3 is_stmt 0 view .LVU5455
 21012 00a2 0B46     		mov	r3, r1
 21013 00a4 0246     		mov	r2, r0
 21014              	.LBB3079:
 21015              	.LBB3080:
1405:src/xeq.c     **** }
 21016              		.loc 1 1405 8 view .LVU5456
 21017 00a6 6C20     		movs	r0, #108
 21018 00a8 CDE90023 		strd	r2, [sp]
 21019              	.LVL1620:
1405:src/xeq.c     **** }
 21020              		.loc 1 1405 8 view .LVU5457
 21021              	.LBE3080:
 21022              	.LBI3079:
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 21023              		.loc 1 1404 6 is_stmt 1 view .LVU5458
 21024              	.LBB3081:
1405:src/xeq.c     **** }
 21025              		.loc 1 1405 2 view .LVU5459
1405:src/xeq.c     **** }
 21026              		.loc 1 1405 8 is_stmt 0 view .LVU5460
 21027 00ac FFF7FEFF 		bl	get_reg_n
 21028              	.LVL1621:
1405:src/xeq.c     **** }
 21029              		.loc 1 1405 2 view .LVU5461
 21030 00b0 6946     		mov	r1, sp
 21031 00b2 0822     		movs	r2, #8
 21032 00b4 FFF7FEFF 		bl	xcopy
 21033              	.LVL1622:
1405:src/xeq.c     **** }
 21034              		.loc 1 1405 2 view .LVU5462
 21035              	.LBE3081:
 21036              	.LBE3079:
ARM GAS  /tmp/ccaPnj5t.s 			page 559


 21037              	.LBE3070:
3625:src/xeq.c     **** 
 21038              		.loc 1 3625 1 view .LVU5463
 21039 00b8 02B0     		add	sp, sp, #8
 21040              		.cfi_remember_state
 21041              		.cfi_def_cfa_offset 24
 21042              		@ sp needed
 21043 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21044              	.LVL1623:
 21045              	.L1490:
 21046              		.cfi_restore_state
3624:src/xeq.c     **** }
 21047              		.loc 1 3624 6 is_stmt 1 view .LVU5464
3624:src/xeq.c     **** }
 21048              		.loc 1 3624 21 is_stmt 0 view .LVU5465
 21049 00be 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21050 00c2 60F30502 		bfi	r2, r0, #0, #6
 21051              	.LVL1624:
3624:src/xeq.c     **** }
 21052              		.loc 1 3624 21 view .LVU5466
 21053 00c6 83F8E927 		strb	r2, [r3, #2025]
3625:src/xeq.c     **** 
 21054              		.loc 1 3625 1 view .LVU5467
 21055 00ca 02B0     		add	sp, sp, #8
 21056              		.cfi_remember_state
 21057              		.cfi_def_cfa_offset 24
 21058              		@ sp needed
 21059 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21060              	.LVL1625:
 21061              	.L1494:
 21062              		.cfi_restore_state
 21063              	.LBB3083:
 21064              	.LBB3082:
 21065              	.LBB3075:
 708:src/xeq.c     **** 	return 8;
 21066              		.loc 1 708 10 view .LVU5468
 21067 00d0 0427     		movs	r7, #4
 21068 00d2 AAE7     		b	.L1491
 21069              	.L1499:
 707:src/xeq.c     **** 		return 4;
 21070              		.loc 1 707 44 view .LVU5469
 21071 00d4 034A     		ldr	r2, .L1500
 707:src/xeq.c     **** 		return 4;
 21072              		.loc 1 707 41 view .LVU5470
 21073 00d6 92F90120 		ldrsb	r2, [r2, #1]
 708:src/xeq.c     **** 	return 8;
 21074              		.loc 1 708 10 view .LVU5471
 21075 00da 002A     		cmp	r2, #0
 21076 00dc B4BF     		ite	lt
 21077 00de 0827     		movlt	r7, #8
 21078 00e0 0427     		movge	r7, #4
 21079 00e2 A2E7     		b	.L1491
 21080              	.L1501:
 21081              		.align	2
 21082              	.L1500:
 21083 00e4 00000000 		.word	XromParams
 21084 00e8 00000000 		.word	main_ram
ARM GAS  /tmp/ccaPnj5t.s 			page 560


 21085              	.LBE3075:
 21086              	.LBE3082:
 21087              	.LBE3083:
 21088              		.cfi_endproc
 21089              	.LFE201:
 21091              		.section	.text.get_maxdenom,"ax",%progbits
 21092              		.align	1
 21093              		.p2align 2,,3
 21094              		.global	get_maxdenom
 21095              		.syntax unified
 21096              		.thumb
 21097              		.thumb_func
 21098              		.fpu fpv4-sp-d16
 21100              	get_maxdenom:
 21101              	.LVL1626:
 21102              	.LFB202:
3631:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
 21103              		.loc 1 3631 33 is_stmt 1 view -0
 21104              		.cfi_startproc
 21105              		@ args = 0, pretend = 0, frame = 0
 21106              		@ frame_needed = 0, uses_anonymous_args = 0
 21107              		@ link register save eliminated.
3632:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21108              		.loc 1 3632 2 view .LVU5473
3632:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21109              		.loc 1 3632 32 is_stmt 0 view .LVU5474
 21110 0000 064B     		ldr	r3, .L1504
 21111 0002 1B68     		ldr	r3, [r3]
 21112 0004 D3F8E417 		ldr	r1, [r3, #2020]
3633:src/xeq.c     **** }
 21113              		.loc 1 3633 2 view .LVU5475
 21114 0008 42F20F73 		movw	r3, #9999
3632:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21115              		.loc 1 3632 32 view .LVU5476
 21116 000c C1F38D11 		ubfx	r1, r1, #6, #14
 21117              	.LVL1627:
3633:src/xeq.c     **** }
 21118              		.loc 1 3633 2 is_stmt 1 view .LVU5477
 21119 0010 0029     		cmp	r1, #0
 21120 0012 08BF     		it	eq
 21121 0014 1946     		moveq	r1, r3
 21122 0016 FFF7FEBF 		b	int_to_dn
 21123              	.LVL1628:
 21124              	.L1505:
3633:src/xeq.c     **** }
 21125              		.loc 1 3633 2 is_stmt 0 view .LVU5478
 21126 001a 00BF     		.align	2
 21127              	.L1504:
 21128 001c 00000000 		.word	main_ram
 21129              		.cfi_endproc
 21130              	.LFE202:
 21132              		.section	.rodata.op_2frac.str1.4,"aMS",%progbits,1
 21133              		.align	2
 21134              	.LC4:
 21135 0000 792F7820 		.ascii	"y/x =\000"
 21135      3D00
 21136 0006 0000     		.align	2
ARM GAS  /tmp/ccaPnj5t.s 			page 561


 21137              	.LC5:
 21138 0008 792F7820 		.ascii	"y/x \007\344<\000"
 21138      07E43C00 
 21139              		.align	2
 21140              	.LC6:
 21141 0010 792F7820 		.ascii	"y/x \007\344>\000"
 21141      07E43E00 
 21142              		.section	.text.op_2frac,"ax",%progbits
 21143              		.align	1
 21144              		.p2align 2,,3
 21145              		.global	op_2frac
 21146              		.syntax unified
 21147              		.thumb
 21148              		.thumb_func
 21149              		.fpu fpv4-sp-d16
 21151              	op_2frac:
 21152              	.LVL1629:
 21153              	.LFB203:
3636:src/xeq.c     **** 	decNumber z, n, d, t;
 21154              		.loc 1 3636 30 is_stmt 1 view -0
 21155              		.cfi_startproc
 21156              		@ args = 0, pretend = 0, frame = 144
 21157              		@ frame_needed = 0, uses_anonymous_args = 0
3637:src/xeq.c     **** 
 21158              		.loc 1 3637 2 view .LVU5480
3639:src/xeq.c     **** 		setX_int(1);
 21159              		.loc 1 3639 2 view .LVU5481
3639:src/xeq.c     **** 		setX_int(1);
 21160              		.loc 1 3639 6 is_stmt 0 view .LVU5482
 21161 0000 214B     		ldr	r3, .L1518
3636:src/xeq.c     **** 	decNumber z, n, d, t;
 21162              		.loc 1 3636 30 view .LVU5483
 21163 0002 00B5     		push	{lr}
 21164              		.cfi_def_cfa_offset 4
 21165              		.cfi_offset 14, -4
3639:src/xeq.c     **** 		setX_int(1);
 21166              		.loc 1 3639 6 view .LVU5484
 21167 0004 1B68     		ldr	r3, [r3]
 21168 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3639:src/xeq.c     **** 		setX_int(1);
 21169              		.loc 1 3639 5 view .LVU5485
 21170 000a DA07     		lsls	r2, r3, #31
3636:src/xeq.c     **** 	decNumber z, n, d, t;
 21171              		.loc 1 3636 30 view .LVU5486
 21172 000c A5B0     		sub	sp, sp, #148
 21173              		.cfi_def_cfa_offset 152
3639:src/xeq.c     **** 		setX_int(1);
 21174              		.loc 1 3639 5 view .LVU5487
 21175 000e 27D4     		bmi	.L1516
3644:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
 21176              		.loc 1 3644 2 is_stmt 1 view .LVU5488
 21177              	.LVL1630:
 21178              	.LBB3084:
 21179              	.LBI3084:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 21180              		.loc 1 826 6 view .LVU5489
 21181              	.LBB3085:
ARM GAS  /tmp/ccaPnj5t.s 			page 562


 827:src/xeq.c     **** }
 21182              		.loc 1 827 2 view .LVU5490
 21183 0010 6521     		movs	r1, #101
 21184 0012 6846     		mov	r0, sp
 21185              	.LVL1631:
 827:src/xeq.c     **** }
 21186              		.loc 1 827 2 is_stmt 0 view .LVU5491
 21187 0014 FFF7FEFF 		bl	getRegister
 21188              	.LVL1632:
 827:src/xeq.c     **** }
 21189              		.loc 1 827 2 view .LVU5492
 21190              	.LBE3085:
 21191              	.LBE3084:
3645:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
 21192              		.loc 1 3645 2 is_stmt 1 view .LVU5493
 21193 0018 6A46     		mov	r2, sp
 21194 001a 12A9     		add	r1, sp, #72
 21195 001c 09A8     		add	r0, sp, #36
 21196 001e FFF7FEFF 		bl	decNumber2Fraction
 21197              	.LVL1633:
3646:src/xeq.c     **** 	if (State2.runmode) {
 21198              		.loc 1 3646 2 view .LVU5494
 21199 0022 09A9     		add	r1, sp, #36
 21200 0024 12A8     		add	r0, sp, #72
 21201 0026 FFF7FEFF 		bl	setXY
 21202              	.LVL1634:
3647:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21203              		.loc 1 3647 2 view .LVU5495
3647:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21204              		.loc 1 3647 6 is_stmt 0 view .LVU5496
 21205 002a 184B     		ldr	r3, .L1518+4
 21206 002c 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3647:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21207              		.loc 1 3647 5 view .LVU5497
 21208 002e 5B06     		lsls	r3, r3, #25
 21209 0030 02D4     		bmi	.L1517
3663:src/xeq.c     **** 
 21210              		.loc 1 3663 1 view .LVU5498
 21211 0032 25B0     		add	sp, sp, #148
 21212              		.cfi_remember_state
 21213              		.cfi_def_cfa_offset 4
 21214              		@ sp needed
 21215 0034 5DF804FB 		ldr	pc, [sp], #4
 21216              	.L1517:
 21217              		.cfi_restore_state
3648:src/xeq.c     **** 		dn_compare(&n, &t, &z);
 21218              		.loc 1 3648 3 is_stmt 1 view .LVU5499
 21219 0038 12AA     		add	r2, sp, #72
 21220 003a 09A9     		add	r1, sp, #36
 21221 003c 1BA8     		add	r0, sp, #108
 21222 003e FFF7FEFF 		bl	dn_divide
 21223              	.LVL1635:
3649:src/xeq.c     **** 		if (dn_eq0(&n))
 21224              		.loc 1 3649 3 view .LVU5500
 21225 0042 6A46     		mov	r2, sp
 21226 0044 1BA9     		add	r1, sp, #108
 21227 0046 09A8     		add	r0, sp, #36
ARM GAS  /tmp/ccaPnj5t.s 			page 563


 21228 0048 FFF7FEFF 		bl	dn_compare
 21229              	.LVL1636:
3650:src/xeq.c     **** 			DispMsg = "y/x =";
 21230              		.loc 1 3650 3 view .LVU5501
3650:src/xeq.c     **** 			DispMsg = "y/x =";
 21231              		.loc 1 3650 7 is_stmt 0 view .LVU5502
 21232 004c 09A8     		add	r0, sp, #36
 21233 004e FFF7FEFF 		bl	dn_eq0
 21234              	.LVL1637:
3650:src/xeq.c     **** 			DispMsg = "y/x =";
 21235              		.loc 1 3650 6 view .LVU5503
 21236 0052 60B1     		cbz	r0, .L1510
3651:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21237              		.loc 1 3651 4 is_stmt 1 view .LVU5504
3651:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21238              		.loc 1 3651 12 is_stmt 0 view .LVU5505
 21239 0054 0E4B     		ldr	r3, .L1518+8
 21240 0056 0F4A     		ldr	r2, .L1518+12
 21241 0058 1A60     		str	r2, [r3]
3663:src/xeq.c     **** 
 21242              		.loc 1 3663 1 view .LVU5506
 21243 005a 25B0     		add	sp, sp, #148
 21244              		.cfi_remember_state
 21245              		.cfi_def_cfa_offset 4
 21246              		@ sp needed
 21247 005c 5DF804FB 		ldr	pc, [sp], #4
 21248              	.LVL1638:
 21249              	.L1516:
 21250              		.cfi_restore_state
3640:src/xeq.c     **** 		return;
 21251              		.loc 1 3640 3 is_stmt 1 view .LVU5507
 21252 0060 0120     		movs	r0, #1
 21253              	.LVL1639:
3640:src/xeq.c     **** 		return;
 21254              		.loc 1 3640 3 is_stmt 0 view .LVU5508
 21255 0062 0021     		movs	r1, #0
 21256 0064 FFF7FEFF 		bl	setX_int
 21257              	.LVL1640:
3641:src/xeq.c     **** 	}
 21258              		.loc 1 3641 3 is_stmt 1 view .LVU5509
3663:src/xeq.c     **** 
 21259              		.loc 1 3663 1 is_stmt 0 view .LVU5510
 21260 0068 25B0     		add	sp, sp, #148
 21261              		.cfi_remember_state
 21262              		.cfi_def_cfa_offset 4
 21263              		@ sp needed
 21264 006a 5DF804FB 		ldr	pc, [sp], #4
 21265              	.L1510:
 21266              		.cfi_restore_state
3652:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21267              		.loc 1 3652 8 is_stmt 1 view .LVU5511
3652:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21268              		.loc 1 3652 11 is_stmt 0 view .LVU5512
 21269 006e 9DF92C30 		ldrsb	r3, [sp, #44]
 21270 0072 002B     		cmp	r3, #0
3654:src/xeq.c     **** 		else
 21271              		.loc 1 3654 12 view .LVU5513
ARM GAS  /tmp/ccaPnj5t.s 			page 564


 21272 0074 B8BF     		it	lt
 21273 0076 084A     		ldrlt	r2, .L1518+16
 21274 0078 054B     		ldr	r3, .L1518+8
3654:src/xeq.c     **** 		else
 21275              		.loc 1 3654 4 is_stmt 1 view .LVU5514
3656:src/xeq.c     **** #else
 21276              		.loc 1 3656 4 view .LVU5515
3656:src/xeq.c     **** #else
 21277              		.loc 1 3656 12 is_stmt 0 view .LVU5516
 21278 007a A8BF     		it	ge
 21279 007c 074A     		ldrge	r2, .L1518+20
 21280 007e 1A60     		str	r2, [r3]
3663:src/xeq.c     **** 
 21281              		.loc 1 3663 1 view .LVU5517
 21282 0080 25B0     		add	sp, sp, #148
 21283              		.cfi_def_cfa_offset 4
 21284              		@ sp needed
 21285 0082 5DF804FB 		ldr	pc, [sp], #4
 21286              	.L1519:
 21287 0086 00BF     		.align	2
 21288              	.L1518:
 21289 0088 00000000 		.word	main_ram
 21290 008c 00000000 		.word	StateWhileOn
 21291 0090 00000000 		.word	DispMsg
 21292 0094 00000000 		.word	.LC4
 21293 0098 08000000 		.word	.LC5
 21294 009c 10000000 		.word	.LC6
 21295              		.cfi_endproc
 21296              	.LFE203:
 21298              		.section	.text.op_fracdenom,"ax",%progbits
 21299              		.align	1
 21300              		.p2align 2,,3
 21301              		.global	op_fracdenom
 21302              		.syntax unified
 21303              		.thumb
 21304              		.thumb_func
 21305              		.fpu fpv4-sp-d16
 21307              	op_fracdenom:
 21308              	.LVL1641:
 21309              	.LFB204:
3665:src/xeq.c     **** 	int s;
 21310              		.loc 1 3665 34 is_stmt 1 view -0
 21311              		.cfi_startproc
 21312              		@ args = 0, pretend = 0, frame = 8
 21313              		@ frame_needed = 0, uses_anonymous_args = 0
3666:src/xeq.c     **** 	unsigned long long int i;
 21314              		.loc 1 3666 2 view .LVU5519
3667:src/xeq.c     **** 
 21315              		.loc 1 3667 2 view .LVU5520
3669:src/xeq.c     **** 	if (i > 9999)
 21316              		.loc 1 3669 2 view .LVU5521
3665:src/xeq.c     **** 	int s;
 21317              		.loc 1 3665 34 is_stmt 0 view .LVU5522
 21318 0000 2DE90048 		push	{fp, lr}
 21319              		.cfi_def_cfa_offset 8
 21320              		.cfi_offset 11, -8
 21321              		.cfi_offset 14, -4
ARM GAS  /tmp/ccaPnj5t.s 			page 565


 21322 0004 84B0     		sub	sp, sp, #16
 21323              		.cfi_def_cfa_offset 24
 21324              	.LVL1642:
 21325              	.LBB3086:
 21326              	.LBI3086:
1428:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 21327              		.loc 1 1428 24 is_stmt 1 view .LVU5523
 21328              	.LBB3087:
1429:src/xeq.c     **** }
 21329              		.loc 1 1429 2 view .LVU5524
1429:src/xeq.c     **** }
 21330              		.loc 1 1429 9 is_stmt 0 view .LVU5525
 21331 0006 03A9     		add	r1, sp, #12
 21332              	.LVL1643:
1429:src/xeq.c     **** }
 21333              		.loc 1 1429 9 view .LVU5526
 21334 0008 6420     		movs	r0, #100
 21335              	.LVL1644:
1429:src/xeq.c     **** }
 21336              		.loc 1 1429 9 view .LVU5527
 21337 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 21338              	.LVL1645:
1429:src/xeq.c     **** }
 21339              		.loc 1 1429 9 view .LVU5528
 21340 000e 8C46     		mov	ip, r1
 21341              	.LVL1646:
1429:src/xeq.c     **** }
 21342              		.loc 1 1429 9 view .LVU5529
 21343              	.LBE3087:
 21344              	.LBE3086:
3670:src/xeq.c     **** 		UState.denom_max = 0;
 21345              		.loc 1 3670 5 view .LVU5530
 21346 0010 0021     		movs	r1, #0
 21347              	.LBB3089:
 21348              	.LBB3088:
1429:src/xeq.c     **** }
 21349              		.loc 1 1429 9 view .LVU5531
 21350 0012 8346     		mov	fp, r0
 21351              	.LVL1647:
1429:src/xeq.c     **** }
 21352              		.loc 1 1429 9 view .LVU5532
 21353              	.LBE3088:
 21354              	.LBE3089:
3670:src/xeq.c     **** 		UState.denom_max = 0;
 21355              		.loc 1 3670 2 is_stmt 1 view .LVU5533
3670:src/xeq.c     **** 		UState.denom_max = 0;
 21356              		.loc 1 3670 5 is_stmt 0 view .LVU5534
 21357 0014 6145     		cmp	r1, ip
 21358 0016 42F20F70 		movw	r0, #9999
 21359 001a 08BF     		it	eq
 21360 001c 5845     		cmpeq	r0, fp
 21361 001e 0AD2     		bcs	.L1521
3671:src/xeq.c     **** 	else if (i != 1)
 21362              		.loc 1 3671 3 is_stmt 1 view .LVU5535
3671:src/xeq.c     **** 	else if (i != 1)
 21363              		.loc 1 3671 20 is_stmt 0 view .LVU5536
 21364 0020 174B     		ldr	r3, .L1525
ARM GAS  /tmp/ccaPnj5t.s 			page 566


 21365 0022 1B68     		ldr	r3, [r3]
 21366 0024 D3F8E427 		ldr	r2, [r3, #2020]
 21367 0028 6FF39312 		bfc	r2, #6, #14
 21368 002c C3F8E427 		str	r2, [r3, #2020]
3678:src/xeq.c     **** 
 21369              		.loc 1 3678 1 view .LVU5537
 21370 0030 04B0     		add	sp, sp, #16
 21371              		.cfi_remember_state
 21372              		.cfi_def_cfa_offset 8
 21373              		@ sp needed
 21374 0032 BDE80088 		pop	{fp, pc}
 21375              	.LVL1648:
 21376              	.L1521:
 21377              		.cfi_restore_state
3672:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21378              		.loc 1 3672 7 is_stmt 1 view .LVU5538
3672:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21379              		.loc 1 3672 10 is_stmt 0 view .LVU5539
 21380 0036 BCF1000F 		cmp	ip, #0
 21381 003a 08BF     		it	eq
 21382 003c BBF1010F 		cmpeq	fp, #1
 21383 0040 0AD0     		beq	.L1523
3673:src/xeq.c     **** 	else {
 21384              		.loc 1 3673 3 is_stmt 1 view .LVU5540
3673:src/xeq.c     **** 	else {
 21385              		.loc 1 3673 20 is_stmt 0 view .LVU5541
 21386 0042 0F4B     		ldr	r3, .L1525
 21387 0044 1B68     		ldr	r3, [r3]
 21388 0046 D3F8E417 		ldr	r1, [r3, #2020]
 21389 004a 6BF39311 		bfi	r1, fp, #6, #14
 21390 004e C3F8E417 		str	r1, [r3, #2020]
3678:src/xeq.c     **** 
 21391              		.loc 1 3678 1 view .LVU5542
 21392 0052 04B0     		add	sp, sp, #16
 21393              		.cfi_remember_state
 21394              		.cfi_def_cfa_offset 8
 21395              		@ sp needed
 21396 0054 BDE80088 		pop	{fp, pc}
 21397              	.LVL1649:
 21398              	.L1523:
 21399              		.cfi_restore_state
3675:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
 21400              		.loc 1 3675 3 is_stmt 1 view .LVU5543
 21401              	.LBB3090:
 21402              	.LBI3090:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 21403              		.loc 1 786 6 view .LVU5544
 21404              	.LBB3091:
 787:src/xeq.c     **** }
 21405              		.loc 1 787 2 view .LVU5545
 21406 0058 6421     		movs	r1, #100
 21407 005a 6C20     		movs	r0, #108
 21408 005c FFF7FEFF 		bl	copyreg_n
 21409              	.LVL1650:
 21410              	.LBE3091:
 21411              	.LBE3090:
3676:src/xeq.c     **** 	}
ARM GAS  /tmp/ccaPnj5t.s 			page 567


 21412              		.loc 1 3676 3 view .LVU5546
 21413              	.LBB3092:
 21414              	.LBI3092:
1491:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 21415              		.loc 1 1491 6 view .LVU5547
 21416              	.LBB3093:
1492:src/xeq.c     **** }
 21417              		.loc 1 1492 2 view .LVU5548
 21418              	.LBE3093:
 21419              	.LBE3092:
3676:src/xeq.c     **** 	}
 21420              		.loc 1 3676 22 is_stmt 0 view .LVU5549
 21421 0060 074B     		ldr	r3, .L1525
 21422              	.LVL1651:
3676:src/xeq.c     **** 	}
 21423              		.loc 1 3676 22 view .LVU5550
 21424 0062 1B68     		ldr	r3, [r3]
 21425              	.LVL1652:
3676:src/xeq.c     **** 	}
 21426              		.loc 1 3676 22 view .LVU5551
 21427 0064 D3F8E427 		ldr	r2, [r3, #2020]
 21428              	.LBB3096:
 21429              	.LBB3094:
1492:src/xeq.c     **** }
 21430              		.loc 1 1492 2 view .LVU5552
 21431 0068 0021     		movs	r1, #0
 21432              	.LBE3094:
 21433              	.LBE3096:
3676:src/xeq.c     **** 	}
 21434              		.loc 1 3676 22 view .LVU5553
 21435 006a C2F38D12 		ubfx	r2, r2, #6, #14
 21436              	.LBB3097:
 21437              	.LBB3095:
1492:src/xeq.c     **** }
 21438              		.loc 1 1492 2 view .LVU5554
 21439 006e 92B2     		uxth	r2, r2
 21440 0070 0023     		movs	r3, #0
 21441              	.LVL1653:
1492:src/xeq.c     **** }
 21442              		.loc 1 1492 2 view .LVU5555
 21443 0072 0091     		str	r1, [sp]
 21444              	.LVL1654:
1492:src/xeq.c     **** }
 21445              		.loc 1 1492 2 view .LVU5556
 21446 0074 6420     		movs	r0, #100
 21447 0076 FFF7FEFF 		bl	set_reg_n_int_sgn
 21448              	.LVL1655:
1492:src/xeq.c     **** }
 21449              		.loc 1 1492 2 view .LVU5557
 21450              	.LBE3095:
 21451              	.LBE3097:
3678:src/xeq.c     **** 
 21452              		.loc 1 3678 1 view .LVU5558
 21453 007a 04B0     		add	sp, sp, #16
 21454              		.cfi_def_cfa_offset 8
 21455              		@ sp needed
 21456 007c BDE80088 		pop	{fp, pc}
ARM GAS  /tmp/ccaPnj5t.s 			page 568


 21457              	.LVL1656:
 21458              	.L1526:
3678:src/xeq.c     **** 
 21459              		.loc 1 3678 1 view .LVU5559
 21460              		.align	2
 21461              	.L1525:
 21462 0080 00000000 		.word	main_ram
 21463              		.cfi_endproc
 21464              	.LFE204:
 21466              		.section	.text.op_float,"ax",%progbits
 21467              		.align	1
 21468              		.p2align 2,,3
 21469              		.global	op_float
 21470              		.syntax unified
 21471              		.thumb
 21472              		.thumb_func
 21473              		.fpu fpv4-sp-d16
 21475              	op_float:
 21476              	.LVL1657:
 21477              	.LFB205:
3686:src/xeq.c     **** 
 21478              		.loc 1 3686 30 is_stmt 1 view -0
 21479              		.cfi_startproc
 21480              		@ args = 0, pretend = 0, frame = 40
 21481              		@ frame_needed = 0, uses_anonymous_args = 0
3688:src/xeq.c     **** 		int i;
 21482              		.loc 1 3688 2 view .LVU5561
3686:src/xeq.c     **** 
 21483              		.loc 1 3686 30 is_stmt 0 view .LVU5562
 21484 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 21485              		.cfi_def_cfa_offset 28
 21486              		.cfi_offset 4, -28
 21487              		.cfi_offset 5, -24
 21488              		.cfi_offset 6, -20
 21489              		.cfi_offset 7, -16
 21490              		.cfi_offset 8, -12
 21491              		.cfi_offset 9, -8
 21492              		.cfi_offset 14, -4
3688:src/xeq.c     **** 		int i;
 21493              		.loc 1 3688 6 view .LVU5563
 21494 0004 2F4F     		ldr	r7, .L1539
 21495 0006 3B68     		ldr	r3, [r7]
 21496 0008 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3688:src/xeq.c     **** 		int i;
 21497              		.loc 1 3688 5 view .LVU5564
 21498 000c D207     		lsls	r2, r2, #31
3686:src/xeq.c     **** 
 21499              		.loc 1 3686 30 view .LVU5565
 21500 000e 8BB0     		sub	sp, sp, #44
 21501              		.cfi_def_cfa_offset 72
3686:src/xeq.c     **** 
 21502              		.loc 1 3686 30 view .LVU5566
 21503 0010 0646     		mov	r6, r0
3688:src/xeq.c     **** 		int i;
 21504              		.loc 1 3688 5 view .LVU5567
 21505 0012 27D5     		bpl	.L1528
 21506              	.LBB3098:
ARM GAS  /tmp/ccaPnj5t.s 			page 569


3689:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
 21507              		.loc 1 3689 3 is_stmt 1 view .LVU5568
3690:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21508              		.loc 1 3690 3 view .LVU5569
3690:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21509              		.loc 1 3690 33 is_stmt 0 view .LVU5570
 21510 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
3690:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21511              		.loc 1 3690 26 view .LVU5571
 21512 0018 2B4A     		ldr	r2, .L1539+4
3690:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21513              		.loc 1 3690 33 view .LVU5572
 21514 001a C3F3C003 		ubfx	r3, r3, #3, #1
3691:src/xeq.c     **** 			if (mask & 1) {
 21515              		.loc 1 3691 10 view .LVU5573
 21516 001e 6424     		movs	r4, #100
3690:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21517              		.loc 1 3690 7 view .LVU5574
 21518 0020 32F81350 		ldrh	r5, [r2, r3, lsl #1]
 21519              	.LVL1658:
3691:src/xeq.c     **** 			if (mask & 1) {
 21520              		.loc 1 3691 3 is_stmt 1 view .LVU5575
3691:src/xeq.c     **** 			if (mask & 1) {
 21521              		.loc 1 3691 22 view .LVU5576
 21522              	.LBB3099:
 21523              	.LBB3100:
1101:src/xeq.c     **** }
 21524              		.loc 1 1101 24 is_stmt 0 view .LVU5577
 21525 0024 44F20108 		movw	r8, #16385
 21526 0028 0CE0     		b	.L1531
 21527              	.LVL1659:
 21528              	.L1529:
1101:src/xeq.c     **** }
 21529              		.loc 1 1101 24 view .LVU5578
 21530 002a 3B68     		ldr	r3, [r7]
 21531 002c B3F8E837 		ldrh	r3, [r3, #2024]
 21532              	.LBE3100:
 21533              	.LBE3099:
3696:src/xeq.c     **** 				// expand the other registers which have been left
 21534              		.loc 1 3696 12 view .LVU5579
 21535 0030 08EA0303 		and	r3, r8, r3
 21536 0034 B3F5804F 		cmp	r3, #16384
 21537 0038 32D0     		beq	.L1538
 21538              	.L1530:
3691:src/xeq.c     **** 			if (mask & 1) {
 21539              		.loc 1 3691 37 is_stmt 1 discriminator 2 view .LVU5580
 21540 003a 0134     		adds	r4, r4, #1
 21541              	.LVL1660:
3691:src/xeq.c     **** 			if (mask & 1) {
 21542              		.loc 1 3691 3 is_stmt 0 discriminator 2 view .LVU5581
 21543 003c 702C     		cmp	r4, #112
3691:src/xeq.c     **** 			if (mask & 1) {
 21544              		.loc 1 3691 47 discriminator 2 view .LVU5582
 21545 003e 4FEA6505 		asr	r5, r5, #1
 21546              	.LVL1661:
3691:src/xeq.c     **** 			if (mask & 1) {
 21547              		.loc 1 3691 22 is_stmt 1 discriminator 2 view .LVU5583
ARM GAS  /tmp/ccaPnj5t.s 			page 570


3691:src/xeq.c     **** 			if (mask & 1) {
 21548              		.loc 1 3691 3 is_stmt 0 discriminator 2 view .LVU5584
 21549 0042 0FD0     		beq	.L1528
 21550              	.LVL1662:
 21551              	.L1531:
3692:src/xeq.c     **** 				// register belongs to stack
 21552              		.loc 1 3692 4 is_stmt 1 view .LVU5585
3696:src/xeq.c     **** 				// expand the other registers which have been left
 21553              		.loc 1 3696 9 view .LVU5586
 21554              	.LBB3102:
 21555              	.LBI3099:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 21556              		.loc 1 1100 5 view .LVU5587
 21557              	.LBB3101:
1101:src/xeq.c     **** }
 21558              		.loc 1 1101 2 view .LVU5588
 21559              	.LBE3101:
 21560              	.LBE3102:
3692:src/xeq.c     **** 				// register belongs to stack
 21561              		.loc 1 3692 7 is_stmt 0 view .LVU5589
 21562 0044 EB07     		lsls	r3, r5, #31
 21563 0046 F0D5     		bpl	.L1529
3694:src/xeq.c     **** 			}
 21564              		.loc 1 3694 5 is_stmt 1 view .LVU5590
 21565 0048 A6F1CE02 		sub	r2, r6, #206
 21566 004c B2FA82F2 		clz	r2, r2
 21567 0050 2146     		mov	r1, r4
 21568 0052 2046     		mov	r0, r4
 21569 0054 5209     		lsrs	r2, r2, #5
3691:src/xeq.c     **** 			if (mask & 1) {
 21570              		.loc 1 3691 37 is_stmt 0 view .LVU5591
 21571 0056 0134     		adds	r4, r4, #1
 21572              	.LVL1663:
3694:src/xeq.c     **** 			}
 21573              		.loc 1 3694 5 view .LVU5592
 21574 0058 FFF7FEFF 		bl	register_from_int
 21575              	.LVL1664:
3691:src/xeq.c     **** 			if (mask & 1) {
 21576              		.loc 1 3691 37 is_stmt 1 view .LVU5593
3691:src/xeq.c     **** 			if (mask & 1) {
 21577              		.loc 1 3691 3 is_stmt 0 view .LVU5594
 21578 005c 702C     		cmp	r4, #112
3691:src/xeq.c     **** 			if (mask & 1) {
 21579              		.loc 1 3691 47 view .LVU5595
 21580 005e 4FEA6505 		asr	r5, r5, #1
 21581              	.LVL1665:
3691:src/xeq.c     **** 			if (mask & 1) {
 21582              		.loc 1 3691 22 is_stmt 1 view .LVU5596
3691:src/xeq.c     **** 			if (mask & 1) {
 21583              		.loc 1 3691 3 is_stmt 0 view .LVU5597
 21584 0062 EFD1     		bne	.L1531
 21585              	.LVL1666:
 21586              	.L1528:
3691:src/xeq.c     **** 			if (mask & 1) {
 21587              		.loc 1 3691 3 view .LVU5598
 21588              	.LBE3098:
3703:src/xeq.c     **** 		UState.fract = 0;
ARM GAS  /tmp/ccaPnj5t.s 			page 571


 21589              		.loc 1 3703 2 is_stmt 1 view .LVU5599
3703:src/xeq.c     **** 		UState.fract = 0;
 21590              		.loc 1 3703 25 is_stmt 0 view .LVU5600
 21591 0064 06F13203 		add	r3, r6, #50
3703:src/xeq.c     **** 		UState.fract = 0;
 21592              		.loc 1 3703 5 view .LVU5601
 21593 0068 DBB2     		uxtb	r3, r3
 21594 006a 012B     		cmp	r3, #1
 21595 006c 10D9     		bls	.L1532
3704:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21596              		.loc 1 3704 3 is_stmt 1 view .LVU5602
3704:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21597              		.loc 1 3704 16 is_stmt 0 view .LVU5603
 21598 006e 3A68     		ldr	r2, [r7]
3705:src/xeq.c     **** 	}
 21599              		.loc 1 3705 14 view .LVU5604
 21600 0070 164B     		ldr	r3, .L1539+8
3704:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21601              		.loc 1 3704 16 view .LVU5605
 21602 0072 92F8E617 		ldrb	r1, [r2, #2022]	@ zero_extendqisi2
 21603 0076 6FF34511 		bfc	r1, #5, #1
 21604 007a 82F8E617 		strb	r1, [r2, #2022]
3705:src/xeq.c     **** 	}
 21605              		.loc 1 3705 3 is_stmt 1 view .LVU5606
3705:src/xeq.c     **** 	}
 21606              		.loc 1 3705 35 is_stmt 0 view .LVU5607
 21607 007e A6F15C06 		sub	r6, #92
3705:src/xeq.c     **** 	}
 21608              		.loc 1 3705 14 view .LVU5608
 21609 0082 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
3705:src/xeq.c     **** 	}
 21610              		.loc 1 3705 35 view .LVU5609
 21611 0084 B6FA86F6 		clz	r6, r6
 21612 0088 7609     		lsrs	r6, r6, #5
3705:src/xeq.c     **** 	}
 21613              		.loc 1 3705 14 view .LVU5610
 21614 008a 66F30002 		bfi	r2, r6, #0, #1
 21615 008e DA75     		strb	r2, [r3, #23]
 21616              	.L1532:
3707:src/xeq.c     **** }
 21617              		.loc 1 3707 2 is_stmt 1 view .LVU5611
3707:src/xeq.c     **** }
 21618              		.loc 1 3707 14 is_stmt 0 view .LVU5612
 21619 0090 6420     		movs	r0, #100
 21620 0092 FFF7FEFF 		bl	get_reg_n
 21621              	.LVL1667:
3707:src/xeq.c     **** }
 21622              		.loc 1 3707 12 view .LVU5613
 21623 0096 0E4B     		ldr	r3, .L1539+12
 21624 0098 1860     		str	r0, [r3]
3708:src/xeq.c     **** 
 21625              		.loc 1 3708 1 view .LVU5614
 21626 009a 0BB0     		add	sp, sp, #44
 21627              		.cfi_remember_state
 21628              		.cfi_def_cfa_offset 28
 21629              		@ sp needed
 21630 009c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
ARM GAS  /tmp/ccaPnj5t.s 			page 572


 21631              	.LVL1668:
 21632              	.L1538:
 21633              		.cfi_restore_state
 21634              	.LBB3105:
3699:src/xeq.c     **** 			}
 21635              		.loc 1 3699 5 is_stmt 1 view .LVU5615
3699:src/xeq.c     **** 			}
 21636              		.loc 1 3699 29 is_stmt 0 view .LVU5616
 21637 00a0 2046     		mov	r0, r4
 21638 00a2 FFF7FEFF 		bl	get_reg_n
 21639              	.LVL1669:
3699:src/xeq.c     **** 			}
 21640              		.loc 1 3699 47 view .LVU5617
 21641 00a6 3B68     		ldr	r3, [r7]
 21642 00a8 03F22C43 		addw	r3, r3, #1068
3699:src/xeq.c     **** 			}
 21643              		.loc 1 3699 29 view .LVU5618
 21644 00ac 8146     		mov	r9, r0
 21645              	.LVL1670:
 21646              	.LBB3103:
 21647              	.LBI3103:
 648:src/xeq.c     **** 	decNumber temp;
 21648              		.loc 1 648 6 is_stmt 1 view .LVU5619
 21649              	.LBB3104:
 649:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 21650              		.loc 1 649 2 view .LVU5620
 650:src/xeq.c     **** }
 21651              		.loc 1 650 2 view .LVU5621
 650:src/xeq.c     **** }
 21652              		.loc 1 650 27 is_stmt 0 view .LVU5622
 21653 00ae 01A9     		add	r1, sp, #4
 21654 00b0 03EBC400 		add	r0, r3, r4, lsl #3
 21655              	.LVL1671:
 650:src/xeq.c     **** }
 21656              		.loc 1 650 27 view .LVU5623
 21657 00b4 FFF7FEFF 		bl	decimal64ToNumber
 21658              	.LVL1672:
 650:src/xeq.c     **** }
 21659              		.loc 1 650 27 view .LVU5624
 21660 00b8 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 21661              		.loc 1 650 2 view .LVU5625
 21662 00ba 4846     		mov	r0, r9
 21663 00bc FFF7FEFF 		bl	packed128_from_number
 21664              	.LVL1673:
 651:src/xeq.c     **** 
 21665              		.loc 1 651 1 view .LVU5626
 21666 00c0 BBE7     		b	.L1530
 21667              	.L1540:
 21668 00c2 00BF     		.align	2
 21669              	.L1539:
 21670 00c4 00000000 		.word	main_ram
 21671 00c8 00000000 		.word	.LANCHOR3
 21672 00cc 00000000 		.word	StateWhileOn
 21673 00d0 00000000 		.word	StackBase
 21674              	.LBE3104:
 21675              	.LBE3103:
ARM GAS  /tmp/ccaPnj5t.s 			page 573


 21676              	.LBE3105:
 21677              		.cfi_endproc
 21678              	.LFE205:
 21680              		.section	.text.cmddisp,"ax",%progbits
 21681              		.align	1
 21682              		.p2align 2,,3
 21683              		.global	cmddisp
 21684              		.syntax unified
 21685              		.thumb
 21686              		.thumb_func
 21687              		.fpu fpv4-sp-d16
 21689              	cmddisp:
 21690              	.LVL1674:
 21691              	.LFB171:
2430:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21692              		.loc 1 2430 46 is_stmt 1 view -0
 21693              		.cfi_startproc
 21694              		@ args = 0, pretend = 0, frame = 0
 21695              		@ frame_needed = 0, uses_anonymous_args = 0
 21696              		@ link register save eliminated.
2432:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
 21697              		.loc 1 2432 2 view .LVU5628
2433:src/xeq.c     **** #ifdef DM42
 21698              		.loc 1 2433 2 view .LVU5629
 21699              	.LBB3114:
 21700              	.LBI3114:
2398:src/xeq.c     **** {
 21701              		.loc 1 2398 5 view .LVU5630
 21702              	.LBB3115:
2400:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21703              		.loc 1 2400 2 view .LVU5631
2400:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21704              		.loc 1 2400 17 is_stmt 0 view .LVU5632
 21705 0000 2E4B     		ldr	r3, .L1561
 21706 0002 1A68     		ldr	r2, [r3]
 21707              	.LBE3115:
 21708              	.LBE3114:
2430:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21709              		.loc 1 2430 46 view .LVU5633
 21710 0004 10B4     		push	{r4}
 21711              		.cfi_def_cfa_offset 4
 21712              		.cfi_offset 4, -4
 21713              	.LBB3117:
 21714              	.LBB3116:
2401:src/xeq.c     **** 
 21715              		.loc 1 2401 23 view .LVU5634
 21716 0006 92F8E747 		ldrb	r4, [r2, #2023]	@ zero_extendqisi2
2400:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21717              		.loc 1 2400 23 view .LVU5635
 21718 000a 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
2403:src/xeq.c     **** 		dispdigs -= 12;
 21719              		.loc 1 2403 5 view .LVU5636
 21720 000e 04F00F04 		and	r4, r4, #15
 21721 0012 0B2C     		cmp	r4, #11
2400:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21722              		.loc 1 2400 6 view .LVU5637
 21723 0014 4FEA9313 		lsr	r3, r3, #6
ARM GAS  /tmp/ccaPnj5t.s 			page 574


 21724              	.LVL1675:
2401:src/xeq.c     **** 
 21725              		.loc 1 2401 2 is_stmt 1 view .LVU5638
2403:src/xeq.c     **** 		dispdigs -= 12;
 21726              		.loc 1 2403 2 view .LVU5639
2403:src/xeq.c     **** 		dispdigs -= 12;
 21727              		.loc 1 2403 5 is_stmt 0 view .LVU5640
 21728 0018 04D9     		bls	.L1542
2404:src/xeq.c     **** 		dispmode += 4;
 21729              		.loc 1 2404 3 is_stmt 1 view .LVU5641
 21730              	.LVL1676:
2405:src/xeq.c     **** 		if (dispmode >= 6) {
 21731              		.loc 1 2405 3 view .LVU5642
2405:src/xeq.c     **** 		if (dispmode >= 6) {
 21732              		.loc 1 2405 12 is_stmt 0 view .LVU5643
 21733 001a 1C1D     		adds	r4, r3, #4
 21734              	.LVL1677:
2406:src/xeq.c     **** 			dispmode -= 2;
 21735              		.loc 1 2406 3 is_stmt 1 view .LVU5644
2406:src/xeq.c     **** 			dispmode -= 2;
 21736              		.loc 1 2406 6 is_stmt 0 view .LVU5645
 21737 001c 052C     		cmp	r4, #5
2407:src/xeq.c     **** 			dispdigs += 4;
 21738              		.loc 1 2407 4 is_stmt 1 view .LVU5646
2407:src/xeq.c     **** 			dispdigs += 4;
 21739              		.loc 1 2407 13 is_stmt 0 view .LVU5647
 21740 001e CCBF     		ite	gt
 21741 0020 0233     		addgt	r3, r3, #2
 21742              	.LVL1678:
2408:src/xeq.c     **** 		}
 21743              		.loc 1 2408 4 is_stmt 1 view .LVU5648
2408:src/xeq.c     **** 		}
 21744              		.loc 1 2408 4 is_stmt 0 view .LVU5649
 21745 0022 2346     		movle	r3, r4
 21746              	.LVL1679:
 21747              	.L1542:
2411:src/xeq.c     **** 	return dispmode;
 21748              		.loc 1 2411 2 is_stmt 1 view .LVU5650
2412:src/xeq.c     **** }
 21749              		.loc 1 2412 2 view .LVU5651
2412:src/xeq.c     **** }
 21750              		.loc 1 2412 2 is_stmt 0 view .LVU5652
 21751              	.LBE3116:
 21752              	.LBE3117:
2435:src/xeq.c     **** 	case RARG_STD:
 21753              		.loc 1 2435 2 is_stmt 1 view .LVU5653
 21754 0024 4F29     		cmp	r1, #79
 21755 0026 1DD8     		bhi	.L1543
 21756 0028 4B29     		cmp	r1, #75
 21757 002a 3ED9     		bls	.L1544
 21758 002c 4D39     		subs	r1, r1, #77
 21759              	.LVL1680:
2435:src/xeq.c     **** 	case RARG_STD:
 21760              		.loc 1 2435 2 is_stmt 0 view .LVU5654
 21761 002e 0229     		cmp	r1, #2
 21762 0030 41D8     		bhi	.L1545
 21763 0032 DFE801F0 		tbb	[pc, r1]
ARM GAS  /tmp/ccaPnj5t.s 			page 575


 21764              	.LVL1681:
 21765              	.L1547:
 21766 0036 15       		.byte	(.L1549-.L1547)/2
 21767 0037 02       		.byte	(.L1556-.L1547)/2
 21768 0038 38       		.byte	(.L1546-.L1547)/2
 21769 0039 00       		.p2align 1
 21770              	.L1556:
2435:src/xeq.c     **** 	case RARG_STD:
 21771              		.loc 1 2435 2 view .LVU5655
 21772 003a 0223     		movs	r3, #2
 21773              	.L1548:
2468:src/xeq.c     **** #else
 21774              		.loc 1 2468 2 is_stmt 1 view .LVU5656
 21775 003c 0146     		mov	r1, r0
 21776              	.LVL1682:
 21777              	.LBB3118:
 21778              	.LBI3118:
2415:src/xeq.c     **** {
 21779              		.loc 1 2415 6 view .LVU5657
 21780              	.LBB3119:
2417:src/xeq.c     **** 		dispmode -= 4;
 21781              		.loc 1 2417 2 view .LVU5658
 21782              	.L1553:
2425:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21783              		.loc 1 2425 2 view .LVU5659
2426:src/xeq.c     **** }
 21784              		.loc 1 2426 2 view .LVU5660
2425:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21785              		.loc 1 2425 18 is_stmt 0 view .LVU5661
 21786 003e B2F8E607 		ldrh	r0, [r2, #2022]
 21787              	.LVL1683:
2425:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21788              		.loc 1 2425 18 view .LVU5662
 21789              	.LBE3119:
 21790              	.LBE3118:
2475:src/xeq.c     **** 
 21791              		.loc 1 2475 1 view .LVU5663
 21792 0042 5DF8044B 		ldr	r4, [sp], #4
 21793              		.cfi_remember_state
 21794              		.cfi_restore 4
 21795              		.cfi_def_cfa_offset 0
 21796              	.LBB3123:
 21797              	.LBB3120:
2425:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21798              		.loc 1 2425 18 view .LVU5664
 21799 0046 01F00F01 		and	r1, r1, #15
 21800              	.LVL1684:
2425:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21801              		.loc 1 2425 18 view .LVU5665
 21802 004a 9B01     		lsls	r3, r3, #6
 21803 004c 43EA0123 		orr	r3, r3, r1, lsl #8
 21804 0050 20F47C61 		bic	r1, r0, #4032
 21805 0054 0B43     		orrs	r3, r3, r1
 21806 0056 A2F8E637 		strh	r3, [r2, #2022]	@ movhi
2425:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21807              		.loc 1 2425 18 view .LVU5666
 21808              	.LBE3120:
ARM GAS  /tmp/ccaPnj5t.s 			page 576


 21809              	.LBE3123:
2474:src/xeq.c     **** }
 21810              		.loc 1 2474 2 is_stmt 1 view .LVU5667
 21811 005a 5B20     		movs	r0, #91
 21812 005c FFF7FEBF 		b	op_float
 21813              	.LVL1685:
 21814              	.L1549:
 21815              		.cfi_restore_state
2435:src/xeq.c     **** 	case RARG_STD:
 21816              		.loc 1 2435 2 is_stmt 0 view .LVU5668
 21817 0060 0123     		movs	r3, #1
 21818 0062 EBE7     		b	.L1548
 21819              	.LVL1686:
 21820              	.L1543:
2435:src/xeq.c     **** 	case RARG_STD:
 21821              		.loc 1 2435 2 view .LVU5669
 21822 0064 8D29     		cmp	r1, #141
 21823 0066 0CD0     		beq	.L1557
 21824 0068 8E29     		cmp	r1, #142
 21825 006a 08BF     		it	eq
 21826 006c 0523     		moveq	r3, #5
 21827              	.LVL1687:
2435:src/xeq.c     **** 	case RARG_STD:
 21828              		.loc 1 2435 2 view .LVU5670
 21829 006e 1CD1     		bne	.L1544
 21830              	.LVL1688:
 21831              	.L1550:
2456:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21832              		.loc 1 2456 54 discriminator 1 view .LVU5671
 21833 0070 0728     		cmp	r0, #7
 21834 0072 0AD8     		bhi	.L1560
 21835              	.L1551:
2468:src/xeq.c     **** #else
 21836              		.loc 1 2468 2 is_stmt 1 view .LVU5672
 21837              	.LVL1689:
 21838              	.LBB3124:
2415:src/xeq.c     **** {
 21839              		.loc 1 2415 6 view .LVU5673
 21840              	.LBB3121:
2417:src/xeq.c     **** 		dispmode -= 4;
 21841              		.loc 1 2417 2 view .LVU5674
2418:src/xeq.c     **** 		dispdigs += 12;
 21842              		.loc 1 2418 3 view .LVU5675
2419:src/xeq.c     **** 		if (dispdigs >= 16) {
 21843              		.loc 1 2419 3 view .LVU5676
2419:src/xeq.c     **** 		if (dispdigs >= 16) {
 21844              		.loc 1 2419 12 is_stmt 0 view .LVU5677
 21845 0074 00F10C01 		add	r1, r0, #12
 21846              	.LVL1690:
2420:src/xeq.c     **** 			dispdigs -= 4;
 21847              		.loc 1 2420 3 is_stmt 1 view .LVU5678
2420:src/xeq.c     **** 			dispdigs -= 4;
 21848              		.loc 1 2420 6 is_stmt 0 view .LVU5679
 21849 0078 0F29     		cmp	r1, #15
 21850 007a 0EDC     		bgt	.L1554
2420:src/xeq.c     **** 			dispdigs -= 4;
 21851              		.loc 1 2420 6 view .LVU5680
ARM GAS  /tmp/ccaPnj5t.s 			page 577


 21852 007c 03F00303 		and	r3, r3, #3
 21853              	.LVL1691:
2420:src/xeq.c     **** 			dispdigs -= 4;
 21854              		.loc 1 2420 6 view .LVU5681
 21855 0080 DDE7     		b	.L1553
 21856              	.LVL1692:
 21857              	.L1557:
2420:src/xeq.c     **** 			dispdigs -= 4;
 21858              		.loc 1 2420 6 view .LVU5682
 21859              	.LBE3121:
 21860              	.LBE3124:
2456:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21861              		.loc 1 2456 54 view .LVU5683
 21862 0082 0728     		cmp	r0, #7
2449:src/xeq.c     **** 	  break;
 21863              		.loc 1 2449 13 view .LVU5684
 21864 0084 4FF00403 		mov	r3, #4
 21865              	.LVL1693:
2456:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21866              		.loc 1 2456 54 view .LVU5685
 21867 0088 F4D9     		bls	.L1551
 21868              	.LVL1694:
 21869              	.L1560:
2457:src/xeq.c     **** 	  return;
 21870              		.loc 1 2457 4 is_stmt 1 view .LVU5686
 21871              	.LBB3125:
 21872              	.LBI3125:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21873              		.loc 1 540 5 view .LVU5687
 21874              	.LBB3126:
 541:src/xeq.c     **** 		Error = e;
 21875              		.loc 1 541 2 view .LVU5688
 541:src/xeq.c     **** 		Error = e;
 21876              		.loc 1 541 12 is_stmt 0 view .LVU5689
 21877 008a 0D4B     		ldr	r3, .L1561+4
 21878              	.LVL1695:
 541:src/xeq.c     **** 		Error = e;
 21879              		.loc 1 541 5 view .LVU5690
 21880 008c 1A68     		ldr	r2, [r3]
 21881 008e 0AB9     		cbnz	r2, .L1541
 21882              	.LVL1696:
 21883              	.LBB3127:
 21884              	.LBI3127:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21885              		.loc 1 540 5 is_stmt 1 view .LVU5691
 21886              	.LBB3128:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 21887              		.loc 1 542 3 view .LVU5692
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 21888              		.loc 1 542 9 is_stmt 0 view .LVU5693
 21889 0090 0822     		movs	r2, #8
 21890 0092 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 21891              		.loc 1 543 3 is_stmt 1 view .LVU5694
 21892              	.LVL1697:
 21893              	.L1541:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/ccaPnj5t.s 			page 578


 21894              		.loc 1 543 3 is_stmt 0 view .LVU5695
 21895              	.LBE3128:
 21896              	.LBE3127:
 21897              	.LBE3126:
 21898              	.LBE3125:
2475:src/xeq.c     **** 
 21899              		.loc 1 2475 1 view .LVU5696
 21900 0094 5DF8044B 		ldr	r4, [sp], #4
 21901              		.cfi_remember_state
 21902              		.cfi_restore 4
 21903              		.cfi_def_cfa_offset 0
 21904 0098 7047     		bx	lr
 21905              	.LVL1698:
 21906              	.L1554:
 21907              		.cfi_restore_state
 21908              	.LBB3129:
 21909              	.LBB3122:
2421:src/xeq.c     **** 			dispmode += 2;
 21910              		.loc 1 2421 4 is_stmt 1 view .LVU5697
2422:src/xeq.c     **** 		}
 21911              		.loc 1 2422 13 is_stmt 0 view .LVU5698
 21912 009a 023B     		subs	r3, r3, #2
 21913              	.LVL1699:
2422:src/xeq.c     **** 		}
 21914              		.loc 1 2422 13 view .LVU5699
 21915 009c 03F00303 		and	r3, r3, #3
 21916              	.LVL1700:
2421:src/xeq.c     **** 			dispmode += 2;
 21917              		.loc 1 2421 13 view .LVU5700
 21918 00a0 00F10801 		add	r1, r0, #8
 21919              	.LVL1701:
2422:src/xeq.c     **** 		}
 21920              		.loc 1 2422 4 is_stmt 1 view .LVU5701
2422:src/xeq.c     **** 		}
 21921              		.loc 1 2422 4 is_stmt 0 view .LVU5702
 21922 00a4 CBE7     		b	.L1553
 21923              	.LVL1702:
 21924              	.L1546:
2422:src/xeq.c     **** 		}
 21925              		.loc 1 2422 4 view .LVU5703
 21926              	.LBE3122:
 21927              	.LBE3129:
2446:src/xeq.c     **** 	  break;
 21928              		.loc 1 2446 4 is_stmt 1 view .LVU5704
2447:src/xeq.c     **** 	case RARG_SIG:
 21929              		.loc 1 2447 4 view .LVU5705
 21930 00a6 0323     		movs	r3, #3
 21931 00a8 C8E7     		b	.L1548
 21932              	.LVL1703:
 21933              	.L1544:
2454:src/xeq.c     **** 	}
 21934              		.loc 1 2454 10 view .LVU5706
2456:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21935              		.loc 1 2456 2 view .LVU5707
2456:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21936              		.loc 1 2456 28 is_stmt 0 view .LVU5708
 21937 00aa 191F     		subs	r1, r3, #4
ARM GAS  /tmp/ccaPnj5t.s 			page 579


 21938              	.LVL1704:
2456:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21939              		.loc 1 2456 5 view .LVU5709
 21940 00ac 0129     		cmp	r1, #1
 21941 00ae DFD9     		bls	.L1550
 21942 00b0 03F00303 		and	r3, r3, #3
 21943              	.LVL1705:
2456:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21944              		.loc 1 2456 5 view .LVU5710
 21945 00b4 C2E7     		b	.L1548
 21946              	.LVL1706:
 21947              	.L1545:
2435:src/xeq.c     **** 	case RARG_STD:
 21948              		.loc 1 2435 2 view .LVU5711
 21949 00b6 0023     		movs	r3, #0
 21950 00b8 C0E7     		b	.L1548
 21951              	.L1562:
 21952 00ba 00BF     		.align	2
 21953              	.L1561:
 21954 00bc 00000000 		.word	main_ram
 21955 00c0 00000000 		.word	Error
 21956              		.cfi_endproc
 21957              	.LFE171:
 21959              		.section	.text.set_int_base,"ax",%progbits
 21960              		.align	1
 21961              		.p2align 2,,3
 21962              		.global	set_int_base
 21963              		.syntax unified
 21964              		.thumb
 21965              		.thumb_func
 21966              		.fpu fpv4-sp-d16
 21968              	set_int_base:
 21969              	.LVL1707:
 21970              	.LFB208:
3736:src/xeq.c     **** 	if (arg < 2) {
 21971              		.loc 1 3736 51 is_stmt 1 view -0
 21972              		.cfi_startproc
 21973              		@ args = 0, pretend = 0, frame = 0
 21974              		@ frame_needed = 0, uses_anonymous_args = 0
3737:src/xeq.c     **** 		if (arg == 0)
 21975              		.loc 1 3737 2 view .LVU5713
3737:src/xeq.c     **** 		if (arg == 0)
 21976              		.loc 1 3737 5 is_stmt 0 view .LVU5714
 21977 0000 0128     		cmp	r0, #1
3736:src/xeq.c     **** 	if (arg < 2) {
 21978              		.loc 1 3736 51 view .LVU5715
 21979 0002 08B5     		push	{r3, lr}
 21980              		.cfi_def_cfa_offset 8
 21981              		.cfi_offset 3, -8
 21982              		.cfi_offset 14, -4
3737:src/xeq.c     **** 		if (arg == 0)
 21983              		.loc 1 3737 5 view .LVU5716
 21984 0004 0BD9     		bls	.L1568
3743:src/xeq.c     **** }
 21985              		.loc 1 3743 3 is_stmt 1 view .LVU5717
 21986              	.LVL1708:
 21987              	.LBB3130:
ARM GAS  /tmp/ccaPnj5t.s 			page 580


 21988              	.LBI3130:
3730:src/xeq.c     **** 	UState.int_base = b - 1;
 21989              		.loc 1 3730 13 view .LVU5718
 21990              	.LBB3131:
3731:src/xeq.c     **** 	if (!is_intmode())
 21991              		.loc 1 3731 2 view .LVU5719
 21992 0006 114B     		ldr	r3, .L1570
 21993 0008 1A68     		ldr	r2, [r3]
3731:src/xeq.c     **** 	if (!is_intmode())
 21994              		.loc 1 3731 18 is_stmt 0 view .LVU5720
 21995 000a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3731:src/xeq.c     **** 	if (!is_intmode())
 21996              		.loc 1 3731 22 view .LVU5721
 21997 000e 0138     		subs	r0, r0, #1
 21998              	.LVL1709:
3731:src/xeq.c     **** 	if (!is_intmode())
 21999              		.loc 1 3731 18 view .LVU5722
 22000 0010 60F30713 		bfi	r3, r0, #4, #4
 22001 0014 82F8E837 		strb	r3, [r2, #2024]
3732:src/xeq.c     **** 		switch_to_int();
 22002              		.loc 1 3732 2 is_stmt 1 view .LVU5723
3732:src/xeq.c     **** 		switch_to_int();
 22003              		.loc 1 3732 5 is_stmt 0 view .LVU5724
 22004 0018 DB07     		lsls	r3, r3, #31
 22005 001a 12D5     		bpl	.L1569
 22006              	.LBE3131:
 22007              	.LBE3130:
3744:src/xeq.c     **** 
 22008              		.loc 1 3744 1 view .LVU5725
 22009 001c 08BD     		pop	{r3, pc}
 22010              	.LVL1710:
 22011              	.L1568:
3738:src/xeq.c     **** 			op_float(OP_FLOAT);
 22012              		.loc 1 3738 3 is_stmt 1 view .LVU5726
3738:src/xeq.c     **** 			op_float(OP_FLOAT);
 22013              		.loc 1 3738 6 is_stmt 0 view .LVU5727
 22014 001e 20B9     		cbnz	r0, .L1565
3739:src/xeq.c     **** 		else
 22015              		.loc 1 3739 4 is_stmt 1 view .LVU5728
3744:src/xeq.c     **** 
 22016              		.loc 1 3744 1 is_stmt 0 view .LVU5729
 22017 0020 BDE80840 		pop	{r3, lr}
 22018              		.cfi_remember_state
 22019              		.cfi_restore 14
 22020              		.cfi_restore 3
 22021              		.cfi_def_cfa_offset 0
3739:src/xeq.c     **** 		else
 22022              		.loc 1 3739 4 view .LVU5730
 22023 0024 5B20     		movs	r0, #91
 22024              	.LVL1711:
3739:src/xeq.c     **** 		else
 22025              		.loc 1 3739 4 view .LVU5731
 22026 0026 FFF7FEBF 		b	op_float
 22027              	.LVL1712:
 22028              	.L1565:
 22029              		.cfi_restore_state
3741:src/xeq.c     **** 	} else
ARM GAS  /tmp/ccaPnj5t.s 			page 581


 22030              		.loc 1 3741 4 is_stmt 1 view .LVU5732
 22031              	.LBB3134:
 22032              	.LBI3134:
3747:src/xeq.c     **** 	op_float(OP_FLOAT);
 22033              		.loc 1 3747 6 view .LVU5733
 22034              	.LBB3135:
3748:src/xeq.c     **** 	UState.fract = 1;
 22035              		.loc 1 3748 2 view .LVU5734
 22036 002a 5B20     		movs	r0, #91
 22037              	.LVL1713:
3748:src/xeq.c     **** 	UState.fract = 1;
 22038              		.loc 1 3748 2 is_stmt 0 view .LVU5735
 22039 002c FFF7FEFF 		bl	op_float
 22040              	.LVL1714:
3749:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22041              		.loc 1 3749 2 is_stmt 1 view .LVU5736
3749:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22042              		.loc 1 3749 15 is_stmt 0 view .LVU5737
 22043 0030 064B     		ldr	r3, .L1570
 22044 0032 1A68     		ldr	r2, [r3]
 22045 0034 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 22046 0038 43F02003 		orr	r3, r3, #32
 22047 003c 82F8E637 		strb	r3, [r2, #2022]
3750:src/xeq.c     **** 		UState.improperfrac = 1;
 22048              		.loc 1 3750 2 is_stmt 1 view .LVU5738
3752:src/xeq.c     **** 		UState.improperfrac = 0;
 22049              		.loc 1 3752 7 view .LVU5739
 22050              	.LBE3135:
 22051              	.LBE3134:
3744:src/xeq.c     **** 
 22052              		.loc 1 3744 1 is_stmt 0 view .LVU5740
 22053 0040 08BD     		pop	{r3, pc}
 22054              	.LVL1715:
 22055              	.L1569:
 22056              	.LBB3136:
 22057              	.LBB3132:
3733:src/xeq.c     **** }
 22058              		.loc 1 3733 3 is_stmt 1 view .LVU5741
 22059              	.LBE3132:
 22060              	.LBE3136:
3744:src/xeq.c     **** 
 22061              		.loc 1 3744 1 is_stmt 0 view .LVU5742
 22062 0042 BDE80840 		pop	{r3, lr}
 22063              		.cfi_restore 14
 22064              		.cfi_restore 3
 22065              		.cfi_def_cfa_offset 0
 22066              	.LBB3137:
 22067              	.LBB3133:
3733:src/xeq.c     **** }
 22068              		.loc 1 3733 3 view .LVU5743
 22069 0046 FFF7FEBF 		b	switch_to_int
 22070              	.LVL1716:
 22071              	.L1571:
3733:src/xeq.c     **** }
 22072              		.loc 1 3733 3 view .LVU5744
 22073 004a 00BF     		.align	2
 22074              	.L1570:
ARM GAS  /tmp/ccaPnj5t.s 			page 582


 22075 004c 00000000 		.word	main_ram
 22076              	.LBE3133:
 22077              	.LBE3137:
 22078              		.cfi_endproc
 22079              	.LFE208:
 22081              		.section	.text.op_fract,"ax",%progbits
 22082              		.align	1
 22083              		.p2align 2,,3
 22084              		.global	op_fract
 22085              		.syntax unified
 22086              		.thumb
 22087              		.thumb_func
 22088              		.fpu fpv4-sp-d16
 22090              	op_fract:
 22091              	.LVL1717:
 22092              	.LFB209:
3747:src/xeq.c     **** 	op_float(OP_FLOAT);
 22093              		.loc 1 3747 30 is_stmt 1 view -0
 22094              		.cfi_startproc
 22095              		@ args = 0, pretend = 0, frame = 0
 22096              		@ frame_needed = 0, uses_anonymous_args = 0
3748:src/xeq.c     **** 	UState.fract = 1;
 22097              		.loc 1 3748 2 view .LVU5746
3747:src/xeq.c     **** 	op_float(OP_FLOAT);
 22098              		.loc 1 3747 30 is_stmt 0 view .LVU5747
 22099 0000 10B5     		push	{r4, lr}
 22100              		.cfi_def_cfa_offset 8
 22101              		.cfi_offset 4, -8
 22102              		.cfi_offset 14, -4
3747:src/xeq.c     **** 	op_float(OP_FLOAT);
 22103              		.loc 1 3747 30 view .LVU5748
 22104 0002 0446     		mov	r4, r0
3748:src/xeq.c     **** 	UState.fract = 1;
 22105              		.loc 1 3748 2 view .LVU5749
 22106 0004 5B20     		movs	r0, #91
 22107              	.LVL1718:
3748:src/xeq.c     **** 	UState.fract = 1;
 22108              		.loc 1 3748 2 view .LVU5750
 22109 0006 FFF7FEFF 		bl	op_float
 22110              	.LVL1719:
3749:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22111              		.loc 1 3749 2 is_stmt 1 view .LVU5751
 22112 000a 0D4B     		ldr	r3, .L1578
 22113 000c 1B68     		ldr	r3, [r3]
3749:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22114              		.loc 1 3749 15 is_stmt 0 view .LVU5752
 22115 000e 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
3750:src/xeq.c     **** 		UState.improperfrac = 1;
 22116              		.loc 1 3750 5 view .LVU5753
 22117 0012 4D2C     		cmp	r4, #77
3749:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22118              		.loc 1 3749 15 view .LVU5754
 22119 0014 42F02002 		orr	r2, r2, #32
 22120 0018 83F8E627 		strb	r2, [r3, #2022]
3750:src/xeq.c     **** 		UState.improperfrac = 1;
 22121              		.loc 1 3750 2 is_stmt 1 view .LVU5755
3750:src/xeq.c     **** 		UState.improperfrac = 1;
ARM GAS  /tmp/ccaPnj5t.s 			page 583


 22122              		.loc 1 3750 5 is_stmt 0 view .LVU5756
 22123 001c 09D0     		beq	.L1576
3752:src/xeq.c     **** 		UState.improperfrac = 0;
 22124              		.loc 1 3752 7 is_stmt 1 view .LVU5757
3752:src/xeq.c     **** 		UState.improperfrac = 0;
 22125              		.loc 1 3752 10 is_stmt 0 view .LVU5758
 22126 001e 4E2C     		cmp	r4, #78
 22127 0020 00D0     		beq	.L1577
3754:src/xeq.c     **** 
 22128              		.loc 1 3754 1 view .LVU5759
 22129 0022 10BD     		pop	{r4, pc}
 22130              	.L1577:
3753:src/xeq.c     **** }
 22131              		.loc 1 3753 3 is_stmt 1 view .LVU5760
3753:src/xeq.c     **** }
 22132              		.loc 1 3753 23 is_stmt 0 view .LVU5761
 22133 0024 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 22134 0028 6FF30412 		bfc	r2, #4, #1
 22135 002c 83F8E627 		strb	r2, [r3, #2022]
3754:src/xeq.c     **** 
 22136              		.loc 1 3754 1 view .LVU5762
 22137 0030 10BD     		pop	{r4, pc}
 22138              	.L1576:
3751:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22139              		.loc 1 3751 3 is_stmt 1 view .LVU5763
3751:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22140              		.loc 1 3751 23 is_stmt 0 view .LVU5764
 22141 0032 D2B2     		uxtb	r2, r2
 22142 0034 42F01002 		orr	r2, r2, #16
 22143 0038 83F8E627 		strb	r2, [r3, #2022]
3754:src/xeq.c     **** 
 22144              		.loc 1 3754 1 view .LVU5765
 22145 003c 10BD     		pop	{r4, pc}
 22146              	.L1579:
 22147 003e 00BF     		.align	2
 22148              	.L1578:
 22149 0040 00000000 		.word	main_ram
 22150              		.cfi_endproc
 22151              	.LFE209:
 22153              		.section	.text.cmdsavem,"ax",%progbits
 22154              		.align	1
 22155              		.p2align 2,,3
 22156              		.global	cmdsavem
 22157              		.syntax unified
 22158              		.thumb
 22159              		.thumb_func
 22160              		.fpu fpv4-sp-d16
 22162              	cmdsavem:
 22163              	.LVL1720:
 22164              	.LFB210:
3759:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22165              		.loc 1 3759 47 is_stmt 1 view -0
 22166              		.cfi_startproc
 22167              		@ args = 0, pretend = 0, frame = 0
 22168              		@ frame_needed = 0, uses_anonymous_args = 0
3760:src/xeq.c     **** }
 22169              		.loc 1 3760 2 view .LVU5767
ARM GAS  /tmp/ccaPnj5t.s 			page 584


3759:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22170              		.loc 1 3759 47 is_stmt 0 view .LVU5768
 22171 0000 08B5     		push	{r3, lr}
 22172              		.cfi_def_cfa_offset 8
 22173              		.cfi_offset 3, -8
 22174              		.cfi_offset 14, -4
3760:src/xeq.c     **** }
 22175              		.loc 1 3760 9 view .LVU5769
 22176 0002 FFF7FEFF 		bl	get_reg_n
 22177              	.LVL1721:
3760:src/xeq.c     **** }
 22178              		.loc 1 3760 26 view .LVU5770
 22179 0006 044B     		ldr	r3, .L1582
3760:src/xeq.c     **** }
 22180              		.loc 1 3760 25 view .LVU5771
 22181 0008 1968     		ldr	r1, [r3]
3760:src/xeq.c     **** }
 22182              		.loc 1 3760 2 view .LVU5772
 22183 000a 0822     		movs	r2, #8
3761:src/xeq.c     **** 
 22184              		.loc 1 3761 1 view .LVU5773
 22185 000c BDE80840 		pop	{r3, lr}
 22186              		.cfi_restore 14
 22187              		.cfi_restore 3
 22188              		.cfi_def_cfa_offset 0
3760:src/xeq.c     **** }
 22189              		.loc 1 3760 2 view .LVU5774
 22190 0010 01F2E471 		addw	r1, r1, #2020
 22191 0014 FFF7FEBF 		b	xcopy
 22192              	.LVL1722:
 22193              	.L1583:
 22194              		.align	2
 22195              	.L1582:
 22196 0018 00000000 		.word	main_ram
 22197              		.cfi_endproc
 22198              	.LFE210:
 22200              		.section	.text.set_entry,"ax",%progbits
 22201              		.align	1
 22202              		.p2align 2,,3
 22203              		.global	set_entry
 22204              		.syntax unified
 22205              		.thumb
 22206              		.thumb_func
 22207              		.fpu fpv4-sp-d16
 22209              	set_entry:
 22210              	.LFB213:
3885:src/xeq.c     **** 	if (!Running && !XromRunning)
 22211              		.loc 1 3885 18 is_stmt 1 view -0
 22212              		.cfi_startproc
 22213              		@ args = 0, pretend = 0, frame = 0
 22214              		@ frame_needed = 0, uses_anonymous_args = 0
 22215              		@ link register save eliminated.
3886:src/xeq.c     **** 		State.entryp = 1;
 22216              		.loc 1 3886 2 view .LVU5776
 22217              	.LBB3140:
 22218              	.LBI3140:
3885:src/xeq.c     **** 	if (!Running && !XromRunning)
ARM GAS  /tmp/ccaPnj5t.s 			page 585


 22219              		.loc 1 3885 6 view .LVU5777
 22220              	.LBE3140:
3886:src/xeq.c     **** 		State.entryp = 1;
 22221              		.loc 1 3886 6 is_stmt 0 view .LVU5778
 22222 0000 074A     		ldr	r2, .L1586
 22223              	.LBB3142:
 22224              	.LBB3141:
3886:src/xeq.c     **** 		State.entryp = 1;
 22225              		.loc 1 3886 18 view .LVU5779
 22226 0002 084B     		ldr	r3, .L1586+4
3886:src/xeq.c     **** 		State.entryp = 1;
 22227              		.loc 1 3886 15 view .LVU5780
 22228 0004 1268     		ldr	r2, [r2]
 22229 0006 1B68     		ldr	r3, [r3]
 22230 0008 1343     		orrs	r3, r2, r3
 22231 000a 07D1     		bne	.L1584
3887:src/xeq.c     **** }
 22232              		.loc 1 3887 3 is_stmt 1 view .LVU5781
3887:src/xeq.c     **** }
 22233              		.loc 1 3887 16 is_stmt 0 view .LVU5782
 22234 000c 064B     		ldr	r3, .L1586+8
 22235 000e 1A68     		ldr	r2, [r3]
 22236 0010 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 22237 0014 43F01003 		orr	r3, r3, #16
 22238 0018 82F8DD37 		strb	r3, [r2, #2013]
 22239              	.L1584:
 22240              	.LBE3141:
 22241              	.LBE3142:
3888:src/xeq.c     **** 
 22242              		.loc 1 3888 1 view .LVU5783
 22243 001c 7047     		bx	lr
 22244              	.L1587:
 22245 001e 00BF     		.align	2
 22246              	.L1586:
 22247 0020 00000000 		.word	Running
 22248 0024 00000000 		.word	XromRunning
 22249 0028 00000000 		.word	main_ram
 22250              		.cfi_endproc
 22251              	.LFE213:
 22253              		.section	.text.get_trig_mode,"ax",%progbits
 22254              		.align	1
 22255              		.p2align 2,,3
 22256              		.global	get_trig_mode
 22257              		.syntax unified
 22258              		.thumb
 22259              		.thumb_func
 22260              		.fpu fpv4-sp-d16
 22262              	get_trig_mode:
 22263              	.LFB215:
4072:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 22264              		.loc 1 4072 37 is_stmt 1 view -0
 22265              		.cfi_startproc
 22266              		@ args = 0, pretend = 0, frame = 0
 22267              		@ frame_needed = 0, uses_anonymous_args = 0
 22268              		@ link register save eliminated.
4073:src/xeq.c     **** 		return TRIG_RAD;
 22269              		.loc 1 4073 2 view .LVU5785
ARM GAS  /tmp/ccaPnj5t.s 			page 586


4073:src/xeq.c     **** 		return TRIG_RAD;
 22270              		.loc 1 4073 6 is_stmt 0 view .LVU5786
 22271 0000 084B     		ldr	r3, .L1592
 22272 0002 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4073:src/xeq.c     **** 		return TRIG_RAD;
 22273              		.loc 1 4073 5 view .LVU5787
 22274 0004 9B07     		lsls	r3, r3, #30
 22275 0006 0AD4     		bmi	.L1591
4073:src/xeq.c     **** 		return TRIG_RAD;
 22276              		.loc 1 4073 19 discriminator 1 view .LVU5788
 22277 0008 074B     		ldr	r3, .L1592+4
 22278 000a 93F90130 		ldrsb	r3, [r3, #1]
 22279 000e 002B     		cmp	r3, #0
 22280 0010 05DB     		blt	.L1591
4076:src/xeq.c     **** }
 22281              		.loc 1 4076 2 is_stmt 1 view .LVU5789
4076:src/xeq.c     **** }
 22282              		.loc 1 4076 33 is_stmt 0 view .LVU5790
 22283 0012 064B     		ldr	r3, .L1592+8
 22284 0014 1B68     		ldr	r3, [r3]
 22285 0016 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
4076:src/xeq.c     **** }
 22286              		.loc 1 4076 9 view .LVU5791
 22287 001a 8009     		lsrs	r0, r0, #6
 22288 001c 7047     		bx	lr
 22289              	.L1591:
4074:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
 22290              		.loc 1 4074 10 view .LVU5792
 22291 001e 0120     		movs	r0, #1
4077:src/xeq.c     **** 
 22292              		.loc 1 4077 1 view .LVU5793
 22293 0020 7047     		bx	lr
 22294              	.L1593:
 22295 0022 00BF     		.align	2
 22296              	.L1592:
 22297 0024 00000000 		.word	StateWhileOn
 22298 0028 00000000 		.word	XromParams
 22299 002c 00000000 		.word	main_ram
 22300              		.cfi_endproc
 22301              	.LFE215:
 22303              		.section	.text.cmdpause,"ax",%progbits
 22304              		.align	1
 22305              		.p2align 2,,3
 22306              		.global	cmdpause
 22307              		.syntax unified
 22308              		.thumb
 22309              		.thumb_func
 22310              		.fpu fpv4-sp-d16
 22312              	cmdpause:
 22313              	.LVL1723:
 22314              	.LFB217:
4122:src/xeq.c     **** 	display();
 22315              		.loc 1 4122 47 is_stmt 1 view -0
 22316              		.cfi_startproc
 22317              		@ args = 0, pretend = 0, frame = 0
 22318              		@ frame_needed = 0, uses_anonymous_args = 0
4123:src/xeq.c     **** #ifndef CONSOLE
ARM GAS  /tmp/ccaPnj5t.s 			page 587


 22319              		.loc 1 4123 2 view .LVU5795
4122:src/xeq.c     **** 	display();
 22320              		.loc 1 4122 47 is_stmt 0 view .LVU5796
 22321 0000 10B5     		push	{r4, lr}
 22322              		.cfi_def_cfa_offset 8
 22323              		.cfi_offset 4, -8
 22324              		.cfi_offset 14, -4
4122:src/xeq.c     **** 	display();
 22325              		.loc 1 4122 47 view .LVU5797
 22326 0002 0446     		mov	r4, r0
4123:src/xeq.c     **** #ifndef CONSOLE
 22327              		.loc 1 4123 2 view .LVU5798
 22328 0004 FFF7FEFF 		bl	display
 22329              	.LVL1724:
4126:src/xeq.c     **** 	GoFast = (arg == 0);
 22330              		.loc 1 4126 2 is_stmt 1 view .LVU5799
4126:src/xeq.c     **** 	GoFast = (arg == 0);
 22331              		.loc 1 4126 8 is_stmt 0 view .LVU5800
 22332 0008 044A     		ldr	r2, .L1596
4127:src/xeq.c     **** #elif 0
 22333              		.loc 1 4127 9 view .LVU5801
 22334 000a 0549     		ldr	r1, .L1596+4
4127:src/xeq.c     **** #elif 0
 22335              		.loc 1 4127 16 view .LVU5802
 22336 000c B4FA84F3 		clz	r3, r4
4126:src/xeq.c     **** 	GoFast = (arg == 0);
 22337              		.loc 1 4126 8 view .LVU5803
 22338 0010 E4B2     		uxtb	r4, r4
 22339              	.LVL1725:
4127:src/xeq.c     **** #elif 0
 22340              		.loc 1 4127 16 view .LVU5804
 22341 0012 5B09     		lsrs	r3, r3, #5
4126:src/xeq.c     **** 	GoFast = (arg == 0);
 22342              		.loc 1 4126 8 view .LVU5805
 22343 0014 1470     		strb	r4, [r2]
4127:src/xeq.c     **** #elif 0
 22344              		.loc 1 4127 2 is_stmt 1 view .LVU5806
4127:src/xeq.c     **** #elif 0
 22345              		.loc 1 4127 9 is_stmt 0 view .LVU5807
 22346 0016 0B60     		str	r3, [r1]
4138:src/xeq.c     **** 
 22347              		.loc 1 4138 1 view .LVU5808
 22348 0018 10BD     		pop	{r4, pc}
 22349              	.L1597:
 22350 001a 00BF     		.align	2
 22351              	.L1596:
 22352 001c 00000000 		.word	Pause
 22353 0020 00000000 		.word	GoFast
 22354              		.cfi_endproc
 22355              	.LFE217:
 22357              		.section	.text.op_setspeed,"ax",%progbits
 22358              		.align	1
 22359              		.p2align 2,,3
 22360              		.global	op_setspeed
 22361              		.syntax unified
 22362              		.thumb
 22363              		.thumb_func
ARM GAS  /tmp/ccaPnj5t.s 			page 588


 22364              		.fpu fpv4-sp-d16
 22366              	op_setspeed:
 22367              	.LVL1726:
 22368              	.LFB218:
4142:src/xeq.c     **** 	UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
 22369              		.loc 1 4142 33 is_stmt 1 view -0
 22370              		.cfi_startproc
 22371              		@ args = 0, pretend = 0, frame = 0
 22372              		@ frame_needed = 0, uses_anonymous_args = 0
 22373              		@ link register save eliminated.
4143:src/xeq.c     **** 	update_speed(1);
 22374              		.loc 1 4143 2 view .LVU5810
4143:src/xeq.c     **** 	update_speed(1);
 22375              		.loc 1 4143 20 is_stmt 0 view .LVU5811
 22376 0000 064B     		ldr	r3, .L1599
 22377 0002 1B68     		ldr	r3, [r3]
4143:src/xeq.c     **** 	update_speed(1);
 22378              		.loc 1 4143 42 view .LVU5812
 22379 0004 A0F19A00 		sub	r0, #154
 22380              	.LVL1727:
4143:src/xeq.c     **** 	update_speed(1);
 22381              		.loc 1 4143 20 view .LVU5813
 22382 0008 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
4143:src/xeq.c     **** 	update_speed(1);
 22383              		.loc 1 4143 42 view .LVU5814
 22384 000c B0FA80F0 		clz	r0, r0
 22385 0010 4009     		lsrs	r0, r0, #5
4143:src/xeq.c     **** 	update_speed(1);
 22386              		.loc 1 4143 20 view .LVU5815
 22387 0012 60F3C302 		bfi	r2, r0, #3, #1
 22388 0016 83F8EB27 		strb	r2, [r3, #2027]
4144:src/xeq.c     **** }
 22389              		.loc 1 4144 17 is_stmt 1 view .LVU5816
4145:src/xeq.c     **** 
 22390              		.loc 1 4145 1 is_stmt 0 view .LVU5817
 22391 001a 7047     		bx	lr
 22392              	.L1600:
 22393              		.align	2
 22394              	.L1599:
 22395 001c 00000000 		.word	main_ram
 22396              		.cfi_endproc
 22397              	.LFE218:
 22399              		.section	.text.op_prompt,"ax",%progbits
 22400              		.align	1
 22401              		.p2align 2,,3
 22402              		.global	op_prompt
 22403              		.syntax unified
 22404              		.thumb
 22405              		.thumb_func
 22406              		.fpu fpv4-sp-d16
 22408              	op_prompt:
 22409              	.LVL1728:
 22410              	.LFB219:
4148:src/xeq.c     **** 	set_running_off();
 22411              		.loc 1 4148 31 is_stmt 1 view -0
 22412              		.cfi_startproc
 22413              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccaPnj5t.s 			page 589


 22414              		@ frame_needed = 0, uses_anonymous_args = 0
4149:src/xeq.c     **** 	alpha_view_common(regX_idx);
 22415              		.loc 1 4149 2 view .LVU5819
 22416              	.LBB3143:
 22417              	.LBI3143:
5789:src/xeq.c     **** 	set_running_off_sst();
 22418              		.loc 1 5789 6 view .LVU5820
 22419              	.LBB3144:
5790:src/xeq.c     **** 	State.entryp = 0;
 22420              		.loc 1 5790 2 view .LVU5821
 22421              	.LBB3145:
 22422              	.LBI3145:
5781:src/xeq.c     **** 	Running = 0;
 22423              		.loc 1 5781 6 view .LVU5822
 22424              	.LBB3146:
5782:src/xeq.c     **** }
 22425              		.loc 1 5782 2 view .LVU5823
 22426              	.LBE3146:
 22427              	.LBE3145:
 22428              	.LBE3144:
 22429              	.LBE3143:
4148:src/xeq.c     **** 	set_running_off();
 22430              		.loc 1 4148 31 is_stmt 0 view .LVU5824
 22431 0000 08B5     		push	{r3, lr}
 22432              		.cfi_def_cfa_offset 8
 22433              		.cfi_offset 3, -8
 22434              		.cfi_offset 14, -4
 22435              	.LBB3152:
 22436              	.LBB3151:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 22437              		.loc 1 5791 15 view .LVU5825
 22438 0002 094B     		ldr	r3, .L1603
 22439              	.LBB3149:
 22440              	.LBB3147:
5782:src/xeq.c     **** }
 22441              		.loc 1 5782 10 view .LVU5826
 22442 0004 094A     		ldr	r2, .L1603+4
 22443              	.LBE3147:
 22444              	.LBE3149:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 22445              		.loc 1 5791 15 view .LVU5827
 22446 0006 1B68     		ldr	r3, [r3]
 22447              	.LBB3150:
 22448              	.LBB3148:
5782:src/xeq.c     **** }
 22449              		.loc 1 5782 10 view .LVU5828
 22450 0008 0021     		movs	r1, #0
 22451 000a 1160     		str	r1, [r2]
 22452              	.LBE3148:
 22453              	.LBE3150:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 22454              		.loc 1 5791 2 is_stmt 1 view .LVU5829
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 22455              		.loc 1 5791 15 is_stmt 0 view .LVU5830
 22456 000c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 22457 0010 61F30412 		bfi	r2, r1, #4, #1
 22458 0014 83F8DD27 		strb	r2, [r3, #2013]
ARM GAS  /tmp/ccaPnj5t.s 			page 590


 22459              		.loc 1 5792 2 is_stmt 1 view .LVU5831
 22460 0018 8A20     		movs	r0, #138
 22461              	.LVL1729:
 22462              		.loc 1 5792 2 is_stmt 0 view .LVU5832
 22463 001a FFF7FEFF 		bl	dot
 22464              	.LVL1730:
 22465              	.LBE3151:
 22466              	.LBE3152:
4150:src/xeq.c     **** }
 22467              		.loc 1 4150 2 is_stmt 1 view .LVU5833
4151:src/xeq.c     **** 
 22468              		.loc 1 4151 1 is_stmt 0 view .LVU5834
 22469 001e BDE80840 		pop	{r3, lr}
 22470              		.cfi_restore 14
 22471              		.cfi_restore 3
 22472              		.cfi_def_cfa_offset 0
4150:src/xeq.c     **** }
 22473              		.loc 1 4150 2 view .LVU5835
 22474 0022 6420     		movs	r0, #100
 22475 0024 FFF7FEBF 		b	alpha_view_common
 22476              	.LVL1731:
 22477              	.L1604:
 22478              		.align	2
 22479              	.L1603:
 22480 0028 00000000 		.word	main_ram
 22481 002c 00000000 		.word	Running
 22482              		.cfi_endproc
 22483              	.LFE219:
 22485              		.section	.text.XisInt,"ax",%progbits
 22486              		.align	1
 22487              		.p2align 2,,3
 22488              		.global	XisInt
 22489              		.syntax unified
 22490              		.thumb
 22491              		.thumb_func
 22492              		.fpu fpv4-sp-d16
 22494              	XisInt:
 22495              	.LVL1732:
 22496              	.LFB220:
4155:src/xeq.c     **** 	decNumber x;
 22497              		.loc 1 4155 28 is_stmt 1 view -0
 22498              		.cfi_startproc
 22499              		@ args = 0, pretend = 0, frame = 40
 22500              		@ frame_needed = 0, uses_anonymous_args = 0
4156:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
 22501              		.loc 1 4156 2 view .LVU5837
4157:src/xeq.c     **** 	if ( is_intmode() )
 22502              		.loc 1 4157 2 view .LVU5838
4158:src/xeq.c     **** 		result = op_int;
 22503              		.loc 1 4158 7 is_stmt 0 view .LVU5839
 22504 0000 164B     		ldr	r3, .L1611
4155:src/xeq.c     **** 	decNumber x;
 22505              		.loc 1 4155 28 view .LVU5840
 22506 0002 30B5     		push	{r4, r5, lr}
 22507              		.cfi_def_cfa_offset 12
 22508              		.cfi_offset 4, -12
 22509              		.cfi_offset 5, -8
ARM GAS  /tmp/ccaPnj5t.s 			page 591


 22510              		.cfi_offset 14, -4
4158:src/xeq.c     **** 		result = op_int;
 22511              		.loc 1 4158 7 view .LVU5841
 22512 0004 1B68     		ldr	r3, [r3]
 22513 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4157:src/xeq.c     **** 	if ( is_intmode() )
 22514              		.loc 1 4157 27 view .LVU5842
 22515 000a A0F18704 		sub	r4, r0, #135
 22516 000e B4FA84F4 		clz	r4, r4
4158:src/xeq.c     **** 		result = op_int;
 22517              		.loc 1 4158 5 view .LVU5843
 22518 0012 13F00105 		ands	r5, r3, #1
4155:src/xeq.c     **** 	decNumber x;
 22519              		.loc 1 4155 28 view .LVU5844
 22520 0016 8BB0     		sub	sp, sp, #44
 22521              		.cfi_def_cfa_offset 56
4157:src/xeq.c     **** 	if ( is_intmode() )
 22522              		.loc 1 4157 27 view .LVU5845
 22523 0018 4FEA5414 		lsr	r4, r4, #5
 22524              	.LVL1733:
4158:src/xeq.c     **** 		result = op_int;
 22525              		.loc 1 4158 2 is_stmt 1 view .LVU5846
4158:src/xeq.c     **** 		result = op_int;
 22526              		.loc 1 4158 5 is_stmt 0 view .LVU5847
 22527 001c 04D0     		beq	.L1609
 22528              	.LVL1734:
4164:src/xeq.c     **** }
 22529              		.loc 1 4164 2 is_stmt 1 view .LVU5848
 22530 001e 2046     		mov	r0, r4
 22531              	.LVL1735:
4164:src/xeq.c     **** }
 22532              		.loc 1 4164 2 is_stmt 0 view .LVU5849
 22533 0020 FFF7FEFF 		bl	fin_tst
 22534              	.LVL1736:
4165:src/xeq.c     **** 
 22535              		.loc 1 4165 1 view .LVU5850
 22536 0024 0BB0     		add	sp, sp, #44
 22537              		.cfi_remember_state
 22538              		.cfi_def_cfa_offset 12
 22539              		@ sp needed
 22540 0026 30BD     		pop	{r4, r5, pc}
 22541              	.LVL1737:
 22542              	.L1609:
 22543              		.cfi_restore_state
4160:src/xeq.c     **** 		result = 0;
 22544              		.loc 1 4160 7 is_stmt 1 view .LVU5851
 22545              	.LBB3153:
 22546              	.LBI3153:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22547              		.loc 1 818 12 view .LVU5852
 22548              	.LBB3154:
 819:src/xeq.c     **** }
 22549              		.loc 1 819 2 view .LVU5853
 819:src/xeq.c     **** }
 22550              		.loc 1 819 9 is_stmt 0 view .LVU5854
 22551 0028 01A8     		add	r0, sp, #4
 22552              	.LVL1738:
ARM GAS  /tmp/ccaPnj5t.s 			page 592


 819:src/xeq.c     **** }
 22553              		.loc 1 819 9 view .LVU5855
 22554 002a 6421     		movs	r1, #100
 22555 002c FFF7FEFF 		bl	getRegister
 22556              	.LVL1739:
 819:src/xeq.c     **** }
 22557              		.loc 1 819 9 view .LVU5856
 22558              	.LBE3154:
 22559              	.LBE3153:
4160:src/xeq.c     **** 		result = 0;
 22560              		.loc 1 4160 10 view .LVU5857
 22561 0030 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 22562 0032 13F0700F 		tst	r3, #112
 22563 0036 05D0     		beq	.L1610
4161:src/xeq.c     **** 	else
 22564              		.loc 1 4161 10 view .LVU5858
 22565 0038 2C46     		mov	r4, r5
 22566              	.LVL1740:
4164:src/xeq.c     **** }
 22567              		.loc 1 4164 2 is_stmt 1 view .LVU5859
 22568 003a 2046     		mov	r0, r4
 22569 003c FFF7FEFF 		bl	fin_tst
 22570              	.LVL1741:
4165:src/xeq.c     **** 
 22571              		.loc 1 4165 1 is_stmt 0 view .LVU5860
 22572 0040 0BB0     		add	sp, sp, #44
 22573              		.cfi_remember_state
 22574              		.cfi_def_cfa_offset 12
 22575              		@ sp needed
 22576 0042 30BD     		pop	{r4, r5, pc}
 22577              	.LVL1742:
 22578              	.L1610:
 22579              		.cfi_restore_state
4163:src/xeq.c     **** 	fin_tst(result);
 22580              		.loc 1 4163 10 is_stmt 1 view .LVU5861
4163:src/xeq.c     **** 	fin_tst(result);
 22581              		.loc 1 4163 20 is_stmt 0 view .LVU5862
 22582 0044 01A8     		add	r0, sp, #4
 22583 0046 FFF7FEFF 		bl	is_int
 22584              	.LVL1743:
4163:src/xeq.c     **** 	fin_tst(result);
 22585              		.loc 1 4163 31 view .LVU5863
 22586 004a 041B     		subs	r4, r0, r4
 22587              	.LVL1744:
4163:src/xeq.c     **** 	fin_tst(result);
 22588              		.loc 1 4163 31 view .LVU5864
 22589 004c B4FA84F4 		clz	r4, r4
 22590 0050 6409     		lsrs	r4, r4, #5
 22591              	.LVL1745:
4164:src/xeq.c     **** }
 22592              		.loc 1 4164 2 is_stmt 1 view .LVU5865
 22593 0052 2046     		mov	r0, r4
 22594 0054 FFF7FEFF 		bl	fin_tst
 22595              	.LVL1746:
4165:src/xeq.c     **** 
 22596              		.loc 1 4165 1 is_stmt 0 view .LVU5866
 22597 0058 0BB0     		add	sp, sp, #44
ARM GAS  /tmp/ccaPnj5t.s 			page 593


 22598              		.cfi_def_cfa_offset 12
 22599              		@ sp needed
 22600 005a 30BD     		pop	{r4, r5, pc}
 22601              	.LVL1747:
 22602              	.L1612:
4165:src/xeq.c     **** 
 22603              		.loc 1 4165 1 view .LVU5867
 22604              		.align	2
 22605              	.L1611:
 22606 005c 00000000 		.word	main_ram
 22607              		.cfi_endproc
 22608              	.LFE220:
 22610              		.section	.text.XisEvenOrOdd,"ax",%progbits
 22611              		.align	1
 22612              		.p2align 2,,3
 22613              		.global	XisEvenOrOdd
 22614              		.syntax unified
 22615              		.thumb
 22616              		.thumb_func
 22617              		.fpu fpv4-sp-d16
 22619              	XisEvenOrOdd:
 22620              	.LVL1748:
 22621              	.LFB221:
4169:src/xeq.c     **** 	decNumber x;
 22622              		.loc 1 4169 34 is_stmt 1 view -0
 22623              		.cfi_startproc
 22624              		@ args = 0, pretend = 0, frame = 40
 22625              		@ frame_needed = 0, uses_anonymous_args = 0
4170:src/xeq.c     **** 	int odd = (op == OP_XisODD);
 22626              		.loc 1 4170 2 view .LVU5869
4171:src/xeq.c     **** 
 22627              		.loc 1 4171 2 view .LVU5870
4173:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22628              		.loc 1 4173 6 is_stmt 0 view .LVU5871
 22629 0000 174B     		ldr	r3, .L1617
4169:src/xeq.c     **** 	decNumber x;
 22630              		.loc 1 4169 34 view .LVU5872
 22631 0002 30B5     		push	{r4, r5, lr}
 22632              		.cfi_def_cfa_offset 12
 22633              		.cfi_offset 4, -12
 22634              		.cfi_offset 5, -8
 22635              		.cfi_offset 14, -4
4173:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22636              		.loc 1 4173 6 view .LVU5873
 22637 0004 1B68     		ldr	r3, [r3]
 22638 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4173:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22639              		.loc 1 4173 5 view .LVU5874
 22640 000a DB07     		lsls	r3, r3, #31
4169:src/xeq.c     **** 	decNumber x;
 22641              		.loc 1 4169 34 view .LVU5875
 22642 000c 8BB0     		sub	sp, sp, #44
 22643              		.cfi_def_cfa_offset 56
4169:src/xeq.c     **** 	decNumber x;
 22644              		.loc 1 4169 34 view .LVU5876
 22645 000e 0446     		mov	r4, r0
 22646              	.LVL1749:
ARM GAS  /tmp/ccaPnj5t.s 			page 594


4173:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22647              		.loc 1 4173 2 is_stmt 1 view .LVU5877
4173:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22648              		.loc 1 4173 5 is_stmt 0 view .LVU5878
 22649 0010 15D5     		bpl	.L1614
4174:src/xeq.c     **** 	} else {
 22650              		.loc 1 4174 3 is_stmt 1 view .LVU5879
 22651              	.LBB3155:
 22652              	.LBI3155:
1424:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 22653              		.loc 1 1424 15 view .LVU5880
 22654              	.LBB3156:
1425:src/xeq.c     **** }
 22655              		.loc 1 1425 2 view .LVU5881
1425:src/xeq.c     **** }
 22656              		.loc 1 1425 9 is_stmt 0 view .LVU5882
 22657 0012 6420     		movs	r0, #100
 22658              	.LVL1750:
1425:src/xeq.c     **** }
 22659              		.loc 1 1425 9 view .LVU5883
 22660 0014 FFF7FEFF 		bl	get_reg_n_int
 22661              	.LVL1751:
 22662              	.LBE3156:
 22663              	.LBE3155:
4171:src/xeq.c     **** 
 22664              		.loc 1 4171 16 view .LVU5884
 22665 0018 A4F18A04 		sub	r4, #138
 22666              	.LVL1752:
4174:src/xeq.c     **** 	} else {
 22667              		.loc 1 4174 23 view .LVU5885
 22668 001c 0023     		movs	r3, #0
4171:src/xeq.c     **** 
 22669              		.loc 1 4171 16 view .LVU5886
 22670 001e 0025     		movs	r5, #0
 22671 0020 B4FA84F4 		clz	r4, r4
4174:src/xeq.c     **** 	} else {
 22672              		.loc 1 4174 23 view .LVU5887
 22673 0024 00F00102 		and	r2, r0, #1
4174:src/xeq.c     **** 	} else {
 22674              		.loc 1 4174 3 view .LVU5888
 22675 0028 AB42     		cmp	r3, r5
4171:src/xeq.c     **** 
 22676              		.loc 1 4171 16 view .LVU5889
 22677 002a 4FEA5414 		lsr	r4, r4, #5
4174:src/xeq.c     **** 	} else {
 22678              		.loc 1 4174 3 view .LVU5890
 22679 002e 06BF     		itte	eq
 22680 0030 A242     		cmpeq	r2, r4
 22681 0032 0120     		moveq	r0, #1
 22682 0034 1846     		movne	r0, r3
 22683 0036 FFF7FEFF 		bl	fin_tst
 22684              	.LVL1753:
4178:src/xeq.c     **** 
 22685              		.loc 1 4178 1 view .LVU5891
 22686 003a 0BB0     		add	sp, sp, #44
 22687              		.cfi_remember_state
 22688              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/ccaPnj5t.s 			page 595


 22689              		@ sp needed
 22690 003c 30BD     		pop	{r4, r5, pc}
 22691              	.LVL1754:
 22692              	.L1614:
 22693              		.cfi_restore_state
4176:src/xeq.c     **** 	}
 22694              		.loc 1 4176 3 is_stmt 1 view .LVU5892
 22695              	.LBB3157:
 22696              	.LBI3157:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22697              		.loc 1 818 12 view .LVU5893
 22698              	.LBB3158:
 819:src/xeq.c     **** }
 22699              		.loc 1 819 2 view .LVU5894
 819:src/xeq.c     **** }
 22700              		.loc 1 819 9 is_stmt 0 view .LVU5895
 22701 003e 6421     		movs	r1, #100
 22702 0040 01A8     		add	r0, sp, #4
 22703              	.LVL1755:
 819:src/xeq.c     **** }
 22704              		.loc 1 819 9 view .LVU5896
 22705 0042 FFF7FEFF 		bl	getRegister
 22706              	.LVL1756:
 819:src/xeq.c     **** }
 22707              		.loc 1 819 9 view .LVU5897
 22708              	.LBE3158:
 22709              	.LBE3157:
4176:src/xeq.c     **** 	}
 22710              		.loc 1 4176 11 view .LVU5898
 22711 0046 FFF7FEFF 		bl	is_even
 22712              	.LVL1757:
4176:src/xeq.c     **** 	}
 22713              		.loc 1 4176 32 view .LVU5899
 22714 004a 8A3C     		subs	r4, r4, #138
 22715              	.LVL1758:
4176:src/xeq.c     **** 	}
 22716              		.loc 1 4176 32 view .LVU5900
 22717 004c 18BF     		it	ne
 22718 004e 0124     		movne	r4, #1
4176:src/xeq.c     **** 	}
 22719              		.loc 1 4176 3 view .LVU5901
 22720 0050 201A     		subs	r0, r4, r0
 22721 0052 B0FA80F0 		clz	r0, r0
 22722 0056 4009     		lsrs	r0, r0, #5
 22723 0058 FFF7FEFF 		bl	fin_tst
 22724              	.LVL1759:
4178:src/xeq.c     **** 
 22725              		.loc 1 4178 1 view .LVU5902
 22726 005c 0BB0     		add	sp, sp, #44
 22727              		.cfi_def_cfa_offset 12
 22728              		@ sp needed
 22729 005e 30BD     		pop	{r4, r5, pc}
 22730              	.L1618:
 22731              		.align	2
 22732              	.L1617:
 22733 0060 00000000 		.word	main_ram
 22734              		.cfi_endproc
ARM GAS  /tmp/ccaPnj5t.s 			page 596


 22735              	.LFE221:
 22737              		.section	.text.XisPrime,"ax",%progbits
 22738              		.align	1
 22739              		.p2align 2,,3
 22740              		.global	XisPrime
 22741              		.syntax unified
 22742              		.thumb
 22743              		.thumb_func
 22744              		.fpu fpv4-sp-d16
 22746              	XisPrime:
 22747              	.LVL1760:
 22748              	.LFB222:
4182:src/xeq.c     **** 	unsigned long long int i;
 22749              		.loc 1 4182 30 is_stmt 1 view -0
 22750              		.cfi_startproc
 22751              		@ args = 0, pretend = 0, frame = 40
 22752              		@ frame_needed = 0, uses_anonymous_args = 0
4183:src/xeq.c     **** 	int sgn;
 22753              		.loc 1 4183 2 view .LVU5904
4184:src/xeq.c     **** 
 22754              		.loc 1 4184 2 view .LVU5905
4186:src/xeq.c     **** 	if (!is_intmode()) {
 22755              		.loc 1 4186 2 view .LVU5906
4182:src/xeq.c     **** 	unsigned long long int i;
 22756              		.loc 1 4182 30 is_stmt 0 view .LVU5907
 22757 0000 70B5     		push	{r4, r5, r6, lr}
 22758              		.cfi_def_cfa_offset 16
 22759              		.cfi_offset 4, -16
 22760              		.cfi_offset 5, -12
 22761              		.cfi_offset 6, -8
 22762              		.cfi_offset 14, -4
 22763 0002 8AB0     		sub	sp, sp, #40
 22764              		.cfi_def_cfa_offset 56
 22765              	.LVL1761:
 22766              	.LBB3159:
 22767              	.LBI3159:
1428:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 22768              		.loc 1 1428 24 is_stmt 1 view .LVU5908
 22769              	.LBB3160:
1429:src/xeq.c     **** }
 22770              		.loc 1 1429 2 view .LVU5909
1429:src/xeq.c     **** }
 22771              		.loc 1 1429 9 is_stmt 0 view .LVU5910
 22772 0004 6946     		mov	r1, sp
 22773 0006 6420     		movs	r0, #100
 22774              	.LVL1762:
1429:src/xeq.c     **** }
 22775              		.loc 1 1429 9 view .LVU5911
 22776 0008 FFF7FEFF 		bl	get_reg_n_int_sgn
 22777              	.LVL1763:
 22778              	.LBE3160:
 22779              	.LBE3159:
4187:src/xeq.c     **** 		decNumber x;
 22780              		.loc 1 4187 6 view .LVU5912
 22781 000c 1B4B     		ldr	r3, .L1629
 22782 000e 1B68     		ldr	r3, [r3]
 22783 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
ARM GAS  /tmp/ccaPnj5t.s 			page 597


4187:src/xeq.c     **** 		decNumber x;
 22784              		.loc 1 4187 5 view .LVU5913
 22785 0014 13F00104 		ands	r4, r3, #1
 22786              	.LBB3162:
 22787              	.LBB3161:
1429:src/xeq.c     **** }
 22788              		.loc 1 1429 9 view .LVU5914
 22789 0018 0646     		mov	r6, r0
 22790 001a 0D46     		mov	r5, r1
 22791              	.LVL1764:
1429:src/xeq.c     **** }
 22792              		.loc 1 1429 9 view .LVU5915
 22793              	.LBE3161:
 22794              	.LBE3162:
4187:src/xeq.c     **** 		decNumber x;
 22795              		.loc 1 4187 2 is_stmt 1 view .LVU5916
4187:src/xeq.c     **** 		decNumber x;
 22796              		.loc 1 4187 5 is_stmt 0 view .LVU5917
 22797 001c 11D0     		beq	.L1620
 22798 001e 009B     		ldr	r3, [sp]
 22799              	.LVL1765:
 22800              	.L1621:
4197:src/xeq.c     **** }
 22801              		.loc 1 4197 2 is_stmt 1 view .LVU5918
 22802 0020 23B1     		cbz	r3, .L1628
 22803              	.L1626:
4197:src/xeq.c     **** }
 22804              		.loc 1 4197 2 is_stmt 0 view .LVU5919
 22805 0022 0020     		movs	r0, #0
 22806 0024 FFF7FEFF 		bl	fin_tst
 22807              	.LVL1766:
4198:src/xeq.c     **** 
 22808              		.loc 1 4198 1 view .LVU5920
 22809 0028 0AB0     		add	sp, sp, #40
 22810              		.cfi_remember_state
 22811              		.cfi_def_cfa_offset 16
 22812              		@ sp needed
 22813 002a 70BD     		pop	{r4, r5, r6, pc}
 22814              	.L1628:
 22815              		.cfi_restore_state
4197:src/xeq.c     **** }
 22816              		.loc 1 4197 22 discriminator 1 view .LVU5921
 22817 002c 2946     		mov	r1, r5
 22818 002e 3046     		mov	r0, r6
 22819 0030 FFF7FEFF 		bl	isPrime
 22820              	.LVL1767:
4197:src/xeq.c     **** }
 22821              		.loc 1 4197 2 discriminator 1 view .LVU5922
 22822 0034 0038     		subs	r0, r0, #0
 22823 0036 18BF     		it	ne
 22824 0038 0120     		movne	r0, #1
 22825 003a FFF7FEFF 		bl	fin_tst
 22826              	.LVL1768:
4198:src/xeq.c     **** 
 22827              		.loc 1 4198 1 discriminator 1 view .LVU5923
 22828 003e 0AB0     		add	sp, sp, #40
 22829              		.cfi_remember_state
ARM GAS  /tmp/ccaPnj5t.s 			page 598


 22830              		.cfi_def_cfa_offset 16
 22831              		@ sp needed
 22832 0040 70BD     		pop	{r4, r5, r6, pc}
 22833              	.LVL1769:
 22834              	.L1620:
 22835              		.cfi_restore_state
 22836              	.LBB3163:
4188:src/xeq.c     **** 
 22837              		.loc 1 4188 3 is_stmt 1 view .LVU5924
4190:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
 22838              		.loc 1 4190 3 view .LVU5925
 22839              	.LBB3164:
 22840              	.LBI3164:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22841              		.loc 1 818 12 view .LVU5926
 22842              	.LBB3165:
 819:src/xeq.c     **** }
 22843              		.loc 1 819 2 view .LVU5927
 819:src/xeq.c     **** }
 22844              		.loc 1 819 9 is_stmt 0 view .LVU5928
 22845 0042 01A8     		add	r0, sp, #4
 22846              	.LVL1770:
 819:src/xeq.c     **** }
 22847              		.loc 1 819 9 view .LVU5929
 22848 0044 6421     		movs	r1, #100
 22849 0046 FFF7FEFF 		bl	getRegister
 22850              	.LVL1771:
 819:src/xeq.c     **** }
 22851              		.loc 1 819 9 view .LVU5930
 22852              	.LBE3165:
 22853              	.LBE3164:
4191:src/xeq.c     **** 			sgn = 1; // not prime
 22854              		.loc 1 4191 3 is_stmt 1 view .LVU5931
4191:src/xeq.c     **** 			sgn = 1; // not prime
 22855              		.loc 1 4191 6 is_stmt 0 view .LVU5932
 22856 004a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 22857 004e 13F0700F 		tst	r3, #112
 22858 0052 06D0     		beq	.L1622
4192:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22859              		.loc 1 4192 4 is_stmt 1 view .LVU5933
4192:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22860              		.loc 1 4192 8 is_stmt 0 view .LVU5934
 22861 0054 0123     		movs	r3, #1
 22862              	.LBE3163:
4197:src/xeq.c     **** }
 22863              		.loc 1 4197 2 view .LVU5935
 22864 0056 2046     		mov	r0, r4
 22865              	.LBB3166:
4192:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22866              		.loc 1 4192 8 view .LVU5936
 22867 0058 0093     		str	r3, [sp]
4192:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22868              		.loc 1 4192 8 view .LVU5937
 22869              	.LBE3166:
4197:src/xeq.c     **** }
 22870              		.loc 1 4197 2 is_stmt 1 view .LVU5938
 22871 005a FFF7FEFF 		bl	fin_tst
ARM GAS  /tmp/ccaPnj5t.s 			page 599


 22872              	.LVL1772:
4198:src/xeq.c     **** 
 22873              		.loc 1 4198 1 is_stmt 0 view .LVU5939
 22874 005e 0AB0     		add	sp, sp, #40
 22875              		.cfi_remember_state
 22876              		.cfi_def_cfa_offset 16
 22877              		@ sp needed
 22878 0060 70BD     		pop	{r4, r5, r6, pc}
 22879              	.L1622:
 22880              		.cfi_restore_state
 22881              	.LBB3167:
4193:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22882              		.loc 1 4193 8 is_stmt 1 view .LVU5940
4193:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22883              		.loc 1 4193 12 is_stmt 0 view .LVU5941
 22884 0062 0749     		ldr	r1, .L1629+4
 22885 0064 01A8     		add	r0, sp, #4
 22886 0066 FFF7FEFF 		bl	dn_lt
 22887              	.LVL1773:
 22888 006a 009B     		ldr	r3, [sp]
4193:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22889              		.loc 1 4193 11 view .LVU5942
 22890 006c 0028     		cmp	r0, #0
 22891 006e D7D1     		bne	.L1621
4195:src/xeq.c     **** 	}
 22892              		.loc 1 4195 4 is_stmt 1 view .LVU5943
 22893              	.LVL1774:
4195:src/xeq.c     **** 	}
 22894              		.loc 1 4195 6 is_stmt 0 view .LVU5944
 22895 0070 4FF0FF36 		mov	r6, #-1
 22896 0074 3546     		mov	r5, r6
4195:src/xeq.c     **** 	}
 22897              		.loc 1 4195 6 view .LVU5945
 22898              	.LBE3167:
4197:src/xeq.c     **** }
 22899              		.loc 1 4197 2 is_stmt 1 view .LVU5946
 22900 0076 002B     		cmp	r3, #0
 22901 0078 D3D1     		bne	.L1626
 22902 007a D7E7     		b	.L1628
 22903              	.L1630:
 22904              		.align	2
 22905              	.L1629:
 22906 007c 00000000 		.word	main_ram
 22907 0080 00000000 		.word	const_2pow64
 22908              		.cfi_endproc
 22909              	.LFE222:
 22911              		.section	.text.isInfinite,"ax",%progbits
 22912              		.align	1
 22913              		.p2align 2,,3
 22914              		.global	isInfinite
 22915              		.syntax unified
 22916              		.thumb
 22917              		.thumb_func
 22918              		.fpu fpv4-sp-d16
 22920              	isInfinite:
 22921              	.LVL1775:
 22922              	.LFB223:
ARM GAS  /tmp/ccaPnj5t.s 			page 600


4202:src/xeq.c     **** 	decNumber x;
 22923              		.loc 1 4202 32 view -0
 22924              		.cfi_startproc
 22925              		@ args = 0, pretend = 0, frame = 40
 22926              		@ frame_needed = 0, uses_anonymous_args = 0
4203:src/xeq.c     **** 
 22927              		.loc 1 4203 2 view .LVU5948
4205:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
 22928              		.loc 1 4205 2 view .LVU5949
4202:src/xeq.c     **** 	decNumber x;
 22929              		.loc 1 4202 32 is_stmt 0 view .LVU5950
 22930 0000 00B5     		push	{lr}
 22931              		.cfi_def_cfa_offset 4
 22932              		.cfi_offset 14, -4
 22933 0002 8BB0     		sub	sp, sp, #44
 22934              		.cfi_def_cfa_offset 48
 22935              	.LVL1776:
 22936              	.LBB3168:
 22937              	.LBI3168:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22938              		.loc 1 818 12 is_stmt 1 view .LVU5951
 22939              	.LBB3169:
 819:src/xeq.c     **** }
 22940              		.loc 1 819 2 view .LVU5952
 819:src/xeq.c     **** }
 22941              		.loc 1 819 9 is_stmt 0 view .LVU5953
 22942 0004 6421     		movs	r1, #100
 22943 0006 01A8     		add	r0, sp, #4
 22944              	.LVL1777:
 819:src/xeq.c     **** }
 22945              		.loc 1 819 9 view .LVU5954
 22946 0008 FFF7FEFF 		bl	getRegister
 22947              	.LVL1778:
 819:src/xeq.c     **** }
 22948              		.loc 1 819 9 view .LVU5955
 22949              	.LBE3169:
 22950              	.LBE3168:
4206:src/xeq.c     **** }
 22951              		.loc 1 4206 2 is_stmt 1 view .LVU5956
4206:src/xeq.c     **** }
 22952              		.loc 1 4206 10 is_stmt 0 view .LVU5957
 22953 000c 074B     		ldr	r3, .L1635
 22954 000e 1B68     		ldr	r3, [r3]
 22955 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4206:src/xeq.c     **** }
 22956              		.loc 1 4206 2 view .LVU5958
 22957 0014 DB07     		lsls	r3, r3, #31
 22958 0016 56BF     		itet	pl
 22959 0018 9DF80C00 		ldrbpl	r0, [sp, #12]	@ zero_extendqisi2
 22960 001c 0020     		movmi	r0, #0
 22961 001e C0F38010 		ubfxpl	r0, r0, #6, #1
 22962 0022 FFF7FEFF 		bl	fin_tst
 22963              	.LVL1779:
4207:src/xeq.c     **** 
 22964              		.loc 1 4207 1 view .LVU5959
 22965 0026 0BB0     		add	sp, sp, #44
 22966              		.cfi_def_cfa_offset 4
ARM GAS  /tmp/ccaPnj5t.s 			page 601


 22967              		@ sp needed
 22968 0028 5DF804FB 		ldr	pc, [sp], #4
 22969              	.L1636:
 22970              		.align	2
 22971              	.L1635:
 22972 002c 00000000 		.word	main_ram
 22973              		.cfi_endproc
 22974              	.LFE223:
 22976              		.section	.text.isNan,"ax",%progbits
 22977              		.align	1
 22978              		.p2align 2,,3
 22979              		.global	isNan
 22980              		.syntax unified
 22981              		.thumb
 22982              		.thumb_func
 22983              		.fpu fpv4-sp-d16
 22985              	isNan:
 22986              	.LVL1780:
 22987              	.LFB224:
4213:src/xeq.c     **** 	decNumber x;
 22988              		.loc 1 4213 27 is_stmt 1 view -0
 22989              		.cfi_startproc
 22990              		@ args = 0, pretend = 0, frame = 40
 22991              		@ frame_needed = 0, uses_anonymous_args = 0
4214:src/xeq.c     **** 
 22992              		.loc 1 4214 2 view .LVU5961
4216:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
 22993              		.loc 1 4216 2 view .LVU5962
4213:src/xeq.c     **** 	decNumber x;
 22994              		.loc 1 4213 27 is_stmt 0 view .LVU5963
 22995 0000 00B5     		push	{lr}
 22996              		.cfi_def_cfa_offset 4
 22997              		.cfi_offset 14, -4
 22998 0002 8BB0     		sub	sp, sp, #44
 22999              		.cfi_def_cfa_offset 48
 23000              	.LVL1781:
 23001              	.LBB3170:
 23002              	.LBI3170:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23003              		.loc 1 818 12 is_stmt 1 view .LVU5964
 23004              	.LBB3171:
 819:src/xeq.c     **** }
 23005              		.loc 1 819 2 view .LVU5965
 819:src/xeq.c     **** }
 23006              		.loc 1 819 9 is_stmt 0 view .LVU5966
 23007 0004 6421     		movs	r1, #100
 23008 0006 01A8     		add	r0, sp, #4
 23009              	.LVL1782:
 819:src/xeq.c     **** }
 23010              		.loc 1 819 9 view .LVU5967
 23011 0008 FFF7FEFF 		bl	getRegister
 23012              	.LVL1783:
 819:src/xeq.c     **** }
 23013              		.loc 1 819 9 view .LVU5968
 23014              	.LBE3171:
 23015              	.LBE3170:
4217:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 602


 23016              		.loc 1 4217 2 is_stmt 1 view .LVU5969
4217:src/xeq.c     **** }
 23017              		.loc 1 4217 10 is_stmt 0 view .LVU5970
 23018 000c 0B4B     		ldr	r3, .L1641
 23019 000e 1B68     		ldr	r3, [r3]
 23020 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4217:src/xeq.c     **** }
 23021              		.loc 1 4217 2 view .LVU5971
 23022 0014 DB07     		lsls	r3, r3, #31
 23023 0016 0BD4     		bmi	.L1639
4217:src/xeq.c     **** }
 23024              		.loc 1 4217 2 discriminator 1 view .LVU5972
 23025 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23026 001c 13F0300F 		tst	r3, #48
 23027 0020 14BF     		ite	ne
 23028 0022 0120     		movne	r0, #1
 23029 0024 0020     		moveq	r0, #0
 23030 0026 FFF7FEFF 		bl	fin_tst
 23031              	.LVL1784:
4218:src/xeq.c     **** 
 23032              		.loc 1 4218 1 discriminator 1 view .LVU5973
 23033 002a 0BB0     		add	sp, sp, #44
 23034              		.cfi_remember_state
 23035              		.cfi_def_cfa_offset 4
 23036              		@ sp needed
 23037 002c 5DF804FB 		ldr	pc, [sp], #4
 23038              	.L1639:
 23039              		.cfi_restore_state
4217:src/xeq.c     **** }
 23040              		.loc 1 4217 2 view .LVU5974
 23041 0030 0020     		movs	r0, #0
 23042 0032 FFF7FEFF 		bl	fin_tst
 23043              	.LVL1785:
4218:src/xeq.c     **** 
 23044              		.loc 1 4218 1 view .LVU5975
 23045 0036 0BB0     		add	sp, sp, #44
 23046              		.cfi_def_cfa_offset 4
 23047              		@ sp needed
 23048 0038 5DF804FB 		ldr	pc, [sp], #4
 23049              	.L1642:
 23050              		.align	2
 23051              	.L1641:
 23052 003c 00000000 		.word	main_ram
 23053              		.cfi_endproc
 23054              	.LFE224:
 23056              		.section	.text.isSpecial,"ax",%progbits
 23057              		.align	1
 23058              		.p2align 2,,3
 23059              		.global	isSpecial
 23060              		.syntax unified
 23061              		.thumb
 23062              		.thumb_func
 23063              		.fpu fpv4-sp-d16
 23065              	isSpecial:
 23066              	.LVL1786:
 23067              	.LFB225:
4220:src/xeq.c     **** 	decNumber x;
ARM GAS  /tmp/ccaPnj5t.s 			page 603


 23068              		.loc 1 4220 31 is_stmt 1 view -0
 23069              		.cfi_startproc
 23070              		@ args = 0, pretend = 0, frame = 40
 23071              		@ frame_needed = 0, uses_anonymous_args = 0
4221:src/xeq.c     **** 
 23072              		.loc 1 4221 2 view .LVU5977
4223:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
 23073              		.loc 1 4223 2 view .LVU5978
4220:src/xeq.c     **** 	decNumber x;
 23074              		.loc 1 4220 31 is_stmt 0 view .LVU5979
 23075 0000 00B5     		push	{lr}
 23076              		.cfi_def_cfa_offset 4
 23077              		.cfi_offset 14, -4
 23078 0002 8BB0     		sub	sp, sp, #44
 23079              		.cfi_def_cfa_offset 48
 23080              	.LVL1787:
 23081              	.LBB3172:
 23082              	.LBI3172:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23083              		.loc 1 818 12 is_stmt 1 view .LVU5980
 23084              	.LBB3173:
 819:src/xeq.c     **** }
 23085              		.loc 1 819 2 view .LVU5981
 819:src/xeq.c     **** }
 23086              		.loc 1 819 9 is_stmt 0 view .LVU5982
 23087 0004 6421     		movs	r1, #100
 23088 0006 01A8     		add	r0, sp, #4
 23089              	.LVL1788:
 819:src/xeq.c     **** }
 23090              		.loc 1 819 9 view .LVU5983
 23091 0008 FFF7FEFF 		bl	getRegister
 23092              	.LVL1789:
 819:src/xeq.c     **** }
 23093              		.loc 1 819 9 view .LVU5984
 23094              	.LBE3173:
 23095              	.LBE3172:
4224:src/xeq.c     **** }
 23096              		.loc 1 4224 2 is_stmt 1 view .LVU5985
4224:src/xeq.c     **** }
 23097              		.loc 1 4224 10 is_stmt 0 view .LVU5986
 23098 000c 0B4B     		ldr	r3, .L1647
 23099 000e 1B68     		ldr	r3, [r3]
 23100 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4224:src/xeq.c     **** }
 23101              		.loc 1 4224 2 view .LVU5987
 23102 0014 DB07     		lsls	r3, r3, #31
 23103 0016 0BD4     		bmi	.L1645
4224:src/xeq.c     **** }
 23104              		.loc 1 4224 2 discriminator 1 view .LVU5988
 23105 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23106 001c 13F0700F 		tst	r3, #112
 23107 0020 14BF     		ite	ne
 23108 0022 0120     		movne	r0, #1
 23109 0024 0020     		moveq	r0, #0
 23110 0026 FFF7FEFF 		bl	fin_tst
 23111              	.LVL1790:
4225:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 604


 23112              		.loc 1 4225 1 discriminator 1 view .LVU5989
 23113 002a 0BB0     		add	sp, sp, #44
 23114              		.cfi_remember_state
 23115              		.cfi_def_cfa_offset 4
 23116              		@ sp needed
 23117 002c 5DF804FB 		ldr	pc, [sp], #4
 23118              	.L1645:
 23119              		.cfi_restore_state
4224:src/xeq.c     **** }
 23120              		.loc 1 4224 2 view .LVU5990
 23121 0030 0020     		movs	r0, #0
 23122 0032 FFF7FEFF 		bl	fin_tst
 23123              	.LVL1791:
4225:src/xeq.c     **** 
 23124              		.loc 1 4225 1 view .LVU5991
 23125 0036 0BB0     		add	sp, sp, #44
 23126              		.cfi_def_cfa_offset 4
 23127              		@ sp needed
 23128 0038 5DF804FB 		ldr	pc, [sp], #4
 23129              	.L1648:
 23130              		.align	2
 23131              	.L1647:
 23132 003c 00000000 		.word	main_ram
 23133              		.cfi_endproc
 23134              	.LFE225:
 23136              		.section	.text.op_entryp,"ax",%progbits
 23137              		.align	1
 23138              		.p2align 2,,3
 23139              		.global	op_entryp
 23140              		.syntax unified
 23141              		.thumb
 23142              		.thumb_func
 23143              		.fpu fpv4-sp-d16
 23145              	op_entryp:
 23146              	.LVL1792:
 23147              	.LFB226:
4227:src/xeq.c     **** 	fin_tst(State.entryp);
 23148              		.loc 1 4227 31 is_stmt 1 view -0
 23149              		.cfi_startproc
 23150              		@ args = 0, pretend = 0, frame = 0
 23151              		@ frame_needed = 0, uses_anonymous_args = 0
 23152              		@ link register save eliminated.
4228:src/xeq.c     **** }
 23153              		.loc 1 4228 2 view .LVU5993
4228:src/xeq.c     **** }
 23154              		.loc 1 4228 15 is_stmt 0 view .LVU5994
 23155 0000 034B     		ldr	r3, .L1650
 23156 0002 1B68     		ldr	r3, [r3]
 23157 0004 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
 23158              	.LVL1793:
4228:src/xeq.c     **** }
 23159              		.loc 1 4228 2 view .LVU5995
 23160 0008 C0F30010 		ubfx	r0, r0, #4, #1
 23161 000c FFF7FEBF 		b	fin_tst
 23162              	.LVL1794:
 23163              	.L1651:
 23164              		.align	2
ARM GAS  /tmp/ccaPnj5t.s 			page 605


 23165              	.L1650:
 23166 0010 00000000 		.word	main_ram
 23167              		.cfi_endproc
 23168              	.LFE226:
 23170              		.section	.text.reg_decode,"ax",%progbits
 23171              		.align	1
 23172              		.p2align 2,,3
 23173              		.global	reg_decode
 23174              		.syntax unified
 23175              		.thumb
 23176              		.thumb_func
 23177              		.fpu fpv4-sp-d16
 23179              	reg_decode:
 23180              	.LVL1795:
 23181              	.LFB227:
4232:src/xeq.c     **** 	decNumber x, y;
 23182              		.loc 1 4232 51 is_stmt 1 view -0
 23183              		.cfi_startproc
 23184              		@ args = 0, pretend = 0, frame = 80
 23185              		@ frame_needed = 0, uses_anonymous_args = 0
4233:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
 23186              		.loc 1 4233 2 view .LVU5997
4234:src/xeq.c     **** 
 23187              		.loc 1 4234 2 view .LVU5998
4236:src/xeq.c     **** 		bad_mode_error();
 23188              		.loc 1 4236 2 view .LVU5999
4232:src/xeq.c     **** 	decNumber x, y;
 23189              		.loc 1 4232 51 is_stmt 0 view .LVU6000
 23190 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 23191              		.cfi_def_cfa_offset 36
 23192              		.cfi_offset 4, -36
 23193              		.cfi_offset 5, -32
 23194              		.cfi_offset 6, -28
 23195              		.cfi_offset 7, -24
 23196              		.cfi_offset 8, -20
 23197              		.cfi_offset 9, -16
 23198              		.cfi_offset 10, -12
 23199              		.cfi_offset 11, -8
 23200              		.cfi_offset 14, -4
4236:src/xeq.c     **** 		bad_mode_error();
 23201              		.loc 1 4236 6 view .LVU6001
 23202 0004 DFF82CA2 		ldr	r10, .L1704+28
 23203 0008 DAF80040 		ldr	r4, [r10]
 23204 000c 94F8E847 		ldrb	r4, [r4, #2024]	@ zero_extendqisi2
4232:src/xeq.c     **** 	decNumber x, y;
 23205              		.loc 1 4232 51 view .LVU6002
 23206 0010 1F46     		mov	r7, r3
4236:src/xeq.c     **** 		bad_mode_error();
 23207              		.loc 1 4236 5 view .LVU6003
 23208 0012 14F00103 		ands	r3, r4, #1
 23209              	.LVL1796:
4232:src/xeq.c     **** 	decNumber x, y;
 23210              		.loc 1 4232 51 view .LVU6004
 23211 0016 95B0     		sub	sp, sp, #84
 23212              		.cfi_def_cfa_offset 120
4236:src/xeq.c     **** 		bad_mode_error();
 23213              		.loc 1 4236 5 view .LVU6005
ARM GAS  /tmp/ccaPnj5t.s 			page 606


 23214 0018 0CD0     		beq	.L1653
4237:src/xeq.c     **** 		return 1;
 23215              		.loc 1 4237 3 is_stmt 1 view .LVU6006
 23216              	.LBB3216:
 23217              	.LBI3216:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 23218              		.loc 1 569 6 view .LVU6007
 23219              	.LBE3216:
 570:src/xeq.c     **** }
 23220              		.loc 1 570 2 view .LVU6008
 23221              	.LVL1797:
 23222              	.LBB3227:
 23223              	.LBB3217:
 23224              	.LBI3217:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23225              		.loc 1 540 5 view .LVU6009
 23226              	.LBB3218:
 541:src/xeq.c     **** 		Error = e;
 23227              		.loc 1 541 2 view .LVU6010
 541:src/xeq.c     **** 		Error = e;
 23228              		.loc 1 541 12 is_stmt 0 view .LVU6011
 23229 001a 7F4B     		ldr	r3, .L1704
 541:src/xeq.c     **** 		Error = e;
 23230              		.loc 1 541 5 view .LVU6012
 23231 001c 1A68     		ldr	r2, [r3]
 23232              	.LVL1798:
 541:src/xeq.c     **** 		Error = e;
 23233              		.loc 1 541 5 view .LVU6013
 23234 001e 1AB1     		cbz	r2, .L1698
 23235              	.LVL1799:
 23236              	.L1681:
 541:src/xeq.c     **** 		Error = e;
 23237              		.loc 1 541 5 view .LVU6014
 23238              	.LBE3218:
 23239              	.LBE3217:
 23240              	.LBE3227:
4238:src/xeq.c     **** 	}
 23241              		.loc 1 4238 10 view .LVU6015
 23242 0020 0120     		movs	r0, #1
4310:src/xeq.c     **** 
 23243              		.loc 1 4310 1 view .LVU6016
 23244 0022 15B0     		add	sp, sp, #84
 23245              		.cfi_remember_state
 23246              		.cfi_def_cfa_offset 36
 23247              		@ sp needed
 23248 0024 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23249              	.LVL1800:
 23250              	.L1698:
 23251              		.cfi_restore_state
 23252              	.LBB3228:
 23253              	.LBB3225:
 23254              	.LBB3223:
 23255              	.LBB3219:
 23256              	.LBI3219:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23257              		.loc 1 540 5 is_stmt 1 view .LVU6017
 23258              	.LBB3220:
ARM GAS  /tmp/ccaPnj5t.s 			page 607


 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 23259              		.loc 1 542 3 view .LVU6018
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 23260              		.loc 1 542 9 is_stmt 0 view .LVU6019
 23261 0028 0D22     		movs	r2, #13
 23262              	.LBE3220:
 23263              	.LBE3219:
 23264              	.LBE3223:
 23265              	.LBE3225:
 23266              	.LBE3228:
4238:src/xeq.c     **** 	}
 23267              		.loc 1 4238 10 view .LVU6020
 23268 002a 0120     		movs	r0, #1
 23269              	.LVL1801:
 23270              	.LBB3229:
 23271              	.LBB3226:
 23272              	.LBB3224:
 23273              	.LBB3222:
 23274              	.LBB3221:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 23275              		.loc 1 542 9 view .LVU6021
 23276 002c 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 23277              		.loc 1 543 3 is_stmt 1 view .LVU6022
 23278              	.LBE3221:
 23279              	.LBE3222:
 23280              	.LBE3224:
 23281              	.LBE3226:
 23282              	.LBE3229:
4310:src/xeq.c     **** 
 23283              		.loc 1 4310 1 is_stmt 0 view .LVU6023
 23284 002e 15B0     		add	sp, sp, #84
 23285              		.cfi_remember_state
 23286              		.cfi_def_cfa_offset 36
 23287              		@ sp needed
 23288 0030 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23289              	.LVL1802:
 23290              	.L1653:
 23291              		.cfi_restore_state
4310:src/xeq.c     **** 
 23292              		.loc 1 4310 1 view .LVU6024
 23293 0034 8346     		mov	fp, r0
 23294              	.LVL1803:
4310:src/xeq.c     **** 
 23295              		.loc 1 4310 1 view .LVU6025
 23296 0036 8946     		mov	r9, r1
 23297              	.LVL1804:
 23298              	.LBB3230:
 23299              	.LBB3231:
 23300              	.LBB3232:
 23301              	.LBB3233:
 819:src/xeq.c     **** }
 23302              		.loc 1 819 9 view .LVU6026
 23303 0038 02A8     		add	r0, sp, #8
 23304              	.LVL1805:
 819:src/xeq.c     **** }
 23305              		.loc 1 819 9 view .LVU6027
ARM GAS  /tmp/ccaPnj5t.s 			page 608


 23306 003a 6421     		movs	r1, #100
 23307              	.LVL1806:
 819:src/xeq.c     **** }
 23308              		.loc 1 819 9 view .LVU6028
 23309 003c 0193     		str	r3, [sp, #4]
 23310 003e 9046     		mov	r8, r2
 23311              	.LVL1807:
 819:src/xeq.c     **** }
 23312              		.loc 1 819 9 view .LVU6029
 23313              	.LBE3233:
 23314              	.LBE3232:
 23315              	.LBE3231:
 23316              	.LBI3230:
4232:src/xeq.c     **** 	decNumber x, y;
 23317              		.loc 1 4232 5 is_stmt 1 view .LVU6030
 23318              	.LBB3313:
4240:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
 23319              		.loc 1 4240 2 view .LVU6031
 23320              	.LBB3235:
 23321              	.LBI3232:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23322              		.loc 1 818 12 view .LVU6032
 23323              	.LBB3234:
 819:src/xeq.c     **** }
 23324              		.loc 1 819 2 view .LVU6033
 819:src/xeq.c     **** }
 23325              		.loc 1 819 9 is_stmt 0 view .LVU6034
 23326 0040 FFF7FEFF 		bl	getRegister
 23327              	.LVL1808:
 819:src/xeq.c     **** }
 23328              		.loc 1 819 9 view .LVU6035
 23329              	.LBE3234:
 23330              	.LBE3235:
4241:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
 23331              		.loc 1 4241 2 is_stmt 1 view .LVU6036
 23332 0044 0522     		movs	r2, #5
 23333 0046 02A9     		add	r1, sp, #8
 23334 0048 0BA8     		add	r0, sp, #44
 23335 004a FFF7FEFF 		bl	dn_mulpow10
 23336              	.LVL1809:
4242:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
 23337              		.loc 1 4242 2 view .LVU6037
 23338 004e 0BA9     		add	r1, sp, #44
 23339 0050 02A8     		add	r0, sp, #8
 23340 0052 FFF7FEFF 		bl	decNumberTrunc
 23341              	.LVL1810:
4243:src/xeq.c     **** 
 23342              		.loc 1 4243 2 view .LVU6038
4243:src/xeq.c     **** 
 23343              		.loc 1 4243 9 is_stmt 0 view .LVU6039
 23344 0056 02A8     		add	r0, sp, #8
 23345 0058 FFF7FEFF 		bl	dn_to_int
 23346              	.LVL1811:
4245:src/xeq.c     **** 		if (!flash)
 23347              		.loc 1 4245 2 is_stmt 1 view .LVU6040
4245:src/xeq.c     **** 		if (!flash)
 23348              		.loc 1 4245 5 is_stmt 0 view .LVU6041
ARM GAS  /tmp/ccaPnj5t.s 			page 609


 23349 005c 041E     		subs	r4, r0, #0
 23350 005e 35DB     		blt	.L1655
 23351              	.LVL1812:
4253:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23352              		.loc 1 4253 2 is_stmt 1 view .LVU6042
4253:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23353              		.loc 1 4253 8 is_stmt 0 view .LVU6043
 23354 0060 6E4A     		ldr	r2, .L1704+4
4255:src/xeq.c     **** 	rsrc /= 100;			// sss
 23355              		.loc 1 4255 6 view .LVU6044
 23356 0062 6F4E     		ldr	r6, .L1704+8
4259:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23357              		.loc 1 4259 9 view .LVU6045
 23358 0064 6F48     		ldr	r0, .L1704+12
 23359              	.LVL1813:
4253:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23360              		.loc 1 4253 8 view .LVU6046
 23361 0066 82FB0432 		smull	r3, r2, r2, r4
 23362 006a E517     		asrs	r5, r4, #31
4254:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23363              		.loc 1 4254 7 view .LVU6047
 23364 006c C5EBA211 		rsb	r1, r5, r2, asr #6
4255:src/xeq.c     **** 	rsrc /= 100;			// sss
 23365              		.loc 1 4255 6 view .LVU6048
 23366 0070 A6FB0136 		umull	r3, r6, r6, r1
4253:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23367              		.loc 1 4253 8 view .LVU6049
 23368 0074 4FF47A77 		mov	r7, #1000
 23369              	.LVL1814:
4255:src/xeq.c     **** 	rsrc /= 100;			// sss
 23370              		.loc 1 4255 6 view .LVU6050
 23371 0078 7209     		lsrs	r2, r6, #5
4253:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23372              		.loc 1 4253 8 view .LVU6051
 23373 007a 07FB1145 		mls	r5, r7, r1, r4
 23374              	.LVL1815:
4254:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23375              		.loc 1 4254 2 is_stmt 1 view .LVU6052
4255:src/xeq.c     **** 	rsrc /= 100;			// sss
 23376              		.loc 1 4255 2 view .LVU6053
4259:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23377              		.loc 1 4259 9 is_stmt 0 view .LVU6054
 23378 007e 8442     		cmp	r4, r0
4255:src/xeq.c     **** 	rsrc /= 100;			// sss
 23379              		.loc 1 4255 6 view .LVU6055
 23380 0080 4FF06407 		mov	r7, #100
4256:src/xeq.c     **** 
 23381              		.loc 1 4256 7 view .LVU6056
 23382 0084 1646     		mov	r6, r2
4255:src/xeq.c     **** 	rsrc /= 100;			// sss
 23383              		.loc 1 4255 6 view .LVU6057
 23384 0086 07FB1212 		mls	r2, r7, r2, r1
 23385              	.LVL1816:
4256:src/xeq.c     **** 
 23386              		.loc 1 4256 2 is_stmt 1 view .LVU6058
4258:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23387              		.loc 1 4258 2 view .LVU6059
ARM GAS  /tmp/ccaPnj5t.s 			page 610


4259:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23388              		.loc 1 4259 9 is_stmt 0 view .LVU6060
 23389 008a 59DA     		bge	.L1656
 23390 008c 6649     		ldr	r1, .L1704+16
 23391 008e 019B     		ldr	r3, [sp, #4]
 23392 0090 8C42     		cmp	r4, r1
 23393 0092 7ADA     		bge	.L1683
 23394              	.LBB3236:
 23395              	.LBI3236:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23396              		.loc 1 253 14 is_stmt 1 view .LVU6061
 23397              	.LBE3236:
 23398              	.LBE3313:
 23399              	.LBE3230:
 254:src/xeq.c     **** }
 23400              		.loc 1 254 2 view .LVU6062
 23401              	.LVL1817:
 23402              	.LBB3320:
 23403              	.LBB3314:
 23404              	.LBB3242:
 23405              	.LBB3237:
 23406              	.LBI3237:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23407              		.loc 1 241 14 view .LVU6063
 23408              	.LBB3238:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23409              		.loc 1 242 2 view .LVU6064
 23410              	.LBB3239:
 23411              	.LBI3239:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23412              		.loc 1 1100 5 view .LVU6065
 23413              	.LBB3240:
1101:src/xeq.c     **** }
 23414              		.loc 1 1101 2 view .LVU6066
1101:src/xeq.c     **** }
 23415              		.loc 1 1101 12 is_stmt 0 view .LVU6067
 23416 0094 DAF80010 		ldr	r1, [r10]
1101:src/xeq.c     **** }
 23417              		.loc 1 1101 24 view .LVU6068
 23418 0098 B1F8E807 		ldrh	r0, [r1, #2024]
 23419 009c 44F20103 		movw	r3, #16385
 23420              	.LBE3240:
 23421              	.LBE3239:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23422              		.loc 1 242 5 view .LVU6069
 23423 00a0 0340     		ands	r3, r3, r0
 23424 00a2 B3F5804F 		cmp	r3, #16384
 23425              	.LBB3241:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23426              		.loc 1 243 24 view .LVU6070
 23427 00a6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23428              		.loc 1 243 3 is_stmt 1 view .LVU6071
 244:src/xeq.c     **** 	}
 23429              		.loc 1 244 3 view .LVU6072
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23430              		.loc 1 243 13 is_stmt 0 view .LVU6073
ARM GAS  /tmp/ccaPnj5t.s 			page 611


 23431 00aa 04BF     		itt	eq
 23432 00ac 0C3B     		subeq	r3, r3, #12
 244:src/xeq.c     **** 	}
 23433              		.loc 1 244 67 view .LVU6074
 23434 00ae 5B10     		asreq	r3, r3, #1
 23435              	.LVL1818:
 23436              	.L1662:
 244:src/xeq.c     **** 	}
 23437              		.loc 1 244 67 view .LVU6075
 23438              	.LBE3241:
 23439              	.LBE3238:
 23440              	.LBE3237:
 23441              	.LBE3242:
4262:src/xeq.c     **** 		goto range_error;
 23442              		.loc 1 4262 5 view .LVU6076
 23443 00b0 B342     		cmp	r3, r6
 23444 00b2 4FF00007 		mov	r7, #0
 23445              	.LVL1819:
4262:src/xeq.c     **** 		goto range_error;
 23446              		.loc 1 4262 2 is_stmt 1 view .LVU6077
4262:src/xeq.c     **** 		goto range_error;
 23447              		.loc 1 4262 5 is_stmt 0 view .LVU6078
 23448 00b6 22DC     		bgt	.L1699
 23449              	.LVL1820:
 23450              	.L1658:
 23451              	.LDL1:
4308:src/xeq.c     **** 	return 1;
 23452              		.loc 1 4308 2 is_stmt 1 view .LVU6079
 23453              	.LBB3243:
 23454              	.LBI3243:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23455              		.loc 1 540 5 view .LVU6080
 23456              	.LBB3244:
 541:src/xeq.c     **** 		Error = e;
 23457              		.loc 1 541 2 view .LVU6081
 541:src/xeq.c     **** 		Error = e;
 23458              		.loc 1 541 12 is_stmt 0 view .LVU6082
 23459 00b8 574B     		ldr	r3, .L1704
 541:src/xeq.c     **** 		Error = e;
 23460              		.loc 1 541 5 view .LVU6083
 23461 00ba 1A68     		ldr	r2, [r3]
 23462 00bc 002A     		cmp	r2, #0
 23463 00be AFD1     		bne	.L1681
 23464              	.LVL1821:
 23465              	.LBB3245:
 23466              	.LBI3245:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23467              		.loc 1 540 5 is_stmt 1 view .LVU6084
 23468              	.LBB3246:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 23469              		.loc 1 542 3 view .LVU6085
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 23470              		.loc 1 542 9 is_stmt 0 view .LVU6086
 23471 00c0 0822     		movs	r2, #8
 23472              	.LBE3246:
 23473              	.LBE3245:
 23474              	.LBE3244:
ARM GAS  /tmp/ccaPnj5t.s 			page 612


 23475              	.LBE3243:
4309:src/xeq.c     **** }
 23476              		.loc 1 4309 9 view .LVU6087
 23477 00c2 0120     		movs	r0, #1
 23478              	.LBB3250:
 23479              	.LBB3249:
 23480              	.LBB3248:
 23481              	.LBB3247:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 23482              		.loc 1 542 9 view .LVU6088
 23483 00c4 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 23484              		.loc 1 543 3 is_stmt 1 view .LVU6089
 23485              	.LBE3247:
 23486              	.LBE3248:
 23487              	.LBE3249:
 23488              	.LBE3250:
 23489              	.LBE3314:
 23490              	.LBE3320:
4310:src/xeq.c     **** 
 23491              		.loc 1 4310 1 is_stmt 0 view .LVU6090
 23492 00c6 15B0     		add	sp, sp, #84
 23493              		.cfi_remember_state
 23494              		.cfi_def_cfa_offset 36
 23495              		@ sp needed
 23496 00c8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23497              	.LVL1822:
 23498              	.L1655:
 23499              		.cfi_restore_state
 23500              	.LBB3321:
 23501              	.LBB3315:
4246:src/xeq.c     **** 			goto range_error;
 23502              		.loc 1 4246 3 is_stmt 1 view .LVU6091
4246:src/xeq.c     **** 			goto range_error;
 23503              		.loc 1 4246 6 is_stmt 0 view .LVU6092
 23504 00cc 002F     		cmp	r7, #0
 23505 00ce F3D0     		beq	.L1658
4248:src/xeq.c     **** 	}
 23506              		.loc 1 4248 3 is_stmt 1 view .LVU6093
4253:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23507              		.loc 1 4253 8 is_stmt 0 view .LVU6094
 23508 00d0 524D     		ldr	r5, .L1704+4
4258:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23509              		.loc 1 4258 30 view .LVU6095
 23510 00d2 564A     		ldr	r2, .L1704+20
4255:src/xeq.c     **** 	rsrc /= 100;			// sss
 23511              		.loc 1 4255 6 view .LVU6096
 23512 00d4 524E     		ldr	r6, .L1704+8
4248:src/xeq.c     **** 	}
 23513              		.loc 1 4248 8 view .LVU6097
 23514 00d6 6442     		rsbs	r4, r4, #0
 23515              	.LVL1823:
4253:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23516              		.loc 1 4253 2 is_stmt 1 view .LVU6098
4253:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23517              		.loc 1 4253 8 is_stmt 0 view .LVU6099
 23518 00d8 A5FB0435 		umull	r3, r5, r5, r4
ARM GAS  /tmp/ccaPnj5t.s 			page 613


4254:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23519              		.loc 1 4254 7 view .LVU6100
 23520 00dc AB09     		lsrs	r3, r5, #6
4255:src/xeq.c     **** 	rsrc /= 100;			// sss
 23521              		.loc 1 4255 6 view .LVU6101
 23522 00de A6FB0316 		umull	r1, r6, r6, r3
4253:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23523              		.loc 1 4253 8 view .LVU6102
 23524 00e2 4FF47A70 		mov	r0, #1000
4258:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23525              		.loc 1 4258 30 view .LVU6103
 23526 00e6 1168     		ldr	r1, [r2]
4253:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23527              		.loc 1 4253 8 view .LVU6104
 23528 00e8 00FB1345 		mls	r5, r0, r3, r4
 23529              	.LVL1824:
4254:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23530              		.loc 1 4254 2 is_stmt 1 view .LVU6105
4255:src/xeq.c     **** 	rsrc /= 100;			// sss
 23531              		.loc 1 4255 2 view .LVU6106
4255:src/xeq.c     **** 	rsrc /= 100;			// sss
 23532              		.loc 1 4255 6 is_stmt 0 view .LVU6107
 23533 00ec 7209     		lsrs	r2, r6, #5
 23534 00ee 6420     		movs	r0, #100
4256:src/xeq.c     **** 
 23535              		.loc 1 4256 7 view .LVU6108
 23536 00f0 1646     		mov	r6, r2
4255:src/xeq.c     **** 	rsrc /= 100;			// sss
 23537              		.loc 1 4255 6 view .LVU6109
 23538 00f2 00FB1232 		mls	r2, r0, r2, r3
 23539              	.LVL1825:
4256:src/xeq.c     **** 
 23540              		.loc 1 4256 2 is_stmt 1 view .LVU6110
4258:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23541              		.loc 1 4258 2 view .LVU6111
4259:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23542              		.loc 1 4259 9 is_stmt 0 view .LVU6112
 23543 00f6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 23544              	.LVL1826:
 23545              	.L1659:
4262:src/xeq.c     **** 		goto range_error;
 23546              		.loc 1 4262 2 is_stmt 1 view .LVU6113
4262:src/xeq.c     **** 		goto range_error;
 23547              		.loc 1 4262 5 is_stmt 0 view .LVU6114
 23548 00fa B342     		cmp	r3, r6
 23549 00fc DCDD     		ble	.L1658
 23550              	.L1699:
4265:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23551              		.loc 1 4265 2 is_stmt 1 view .LVU6115
4265:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23552              		.loc 1 4265 5 is_stmt 0 view .LVU6116
 23553 00fe B8F1000F 		cmp	r8, #0
 23554 0102 25D0     		beq	.L1663
4266:src/xeq.c     **** 
 23555              		.loc 1 4266 3 is_stmt 1 view .LVU6117
4266:src/xeq.c     **** 
 23556              		.loc 1 4266 52 is_stmt 0 view .LVU6118
ARM GAS  /tmp/ccaPnj5t.s 			page 614


 23557 0104 6F2D     		cmp	r5, #111
 23558 0106 27DD     		ble	.L1664
 23559              	.LBB3251:
 23560              	.LBI3251:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23561              		.loc 1 233 5 is_stmt 1 view .LVU6119
 23562              	.LBE3251:
 23563              	.LBE3315:
 23564              	.LBE3321:
 234:src/xeq.c     **** }
 23565              		.loc 1 234 2 view .LVU6120
 23566              	.LVL1827:
 23567              	.LBB3322:
 23568              	.LBB3316:
 23569              	.LBB3276:
 23570              	.LBB3252:
 23571              	.LBI3252:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23572              		.loc 1 225 5 view .LVU6121
 23573              	.LBB3253:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23574              		.loc 1 226 2 view .LVU6122
 23575              	.LBB3254:
 23576              	.LBI3254:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23577              		.loc 1 1100 5 view .LVU6123
 23578              	.LBB3255:
1101:src/xeq.c     **** }
 23579              		.loc 1 1101 2 view .LVU6124
1101:src/xeq.c     **** }
 23580              		.loc 1 1101 12 is_stmt 0 view .LVU6125
 23581 0108 DAF80010 		ldr	r1, [r10]
 23582              	.LVL1828:
1101:src/xeq.c     **** }
 23583              		.loc 1 1101 12 view .LVU6126
 23584              	.LBE3255:
 23585              	.LBE3254:
 227:src/xeq.c     **** }
 23586              		.loc 1 227 2 is_stmt 1 view .LVU6127
 23587              	.LBB3258:
 23588              	.LBI3258:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23589              		.loc 1 217 5 view .LVU6128
 23590              	.LBB3259:
 218:src/xeq.c     **** }
 23591              		.loc 1 218 2 view .LVU6129
 218:src/xeq.c     **** }
 23592              		.loc 1 218 9 is_stmt 0 view .LVU6130
 23593 010c B1F9DE07 		ldrsh	r0, [r1, #2014]
 218:src/xeq.c     **** }
 23594              		.loc 1 218 57 view .LVU6131
 23595 0110 0028     		cmp	r0, #0
 23596 0112 69DB     		blt	.L1700
 23597              	.LVL1829:
 218:src/xeq.c     **** }
 23598              		.loc 1 218 57 view .LVU6132
 23599              	.LBE3259:
ARM GAS  /tmp/ccaPnj5t.s 			page 615


 23600              	.LBE3258:
 23601              	.LBE3253:
 23602              	.LBE3252:
 23603              	.LBE3276:
4268:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23604              		.loc 1 4268 3 is_stmt 1 view .LVU6133
 23605              	.LBB3277:
 23606              	.LBB3274:
 23607              	.LBB3272:
 23608              	.LBB3265:
 23609              	.LBB3260:
 23610 0114 0021     		movs	r1, #0
 23611              	.LVL1830:
4268:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23612              		.loc 1 4268 3 is_stmt 0 view .LVU6134
 23613              	.LBE3260:
 23614              	.LBE3265:
 23615              	.LBE3272:
 23616              	.LBE3274:
 23617              	.LBE3277:
4268:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23618              		.loc 1 4268 6 view .LVU6135
 23619 0116 82B3     		cbz	r2, .L1666
 23620              	.LVL1831:
 23621              	.L1667:
4287:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23622              		.loc 1 4287 4 is_stmt 1 view .LVU6136
4287:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23623              		.loc 1 4287 12 is_stmt 0 view .LVU6137
 23624 0118 7031     		adds	r1, r1, #112
 23625              	.LVL1832:
 23626              	.L1670:
4288:src/xeq.c     **** 			goto range_error;
 23627              		.loc 1 4288 3 is_stmt 1 view .LVU6138
4288:src/xeq.c     **** 			goto range_error;
 23628              		.loc 1 4288 13 is_stmt 0 view .LVU6139
 23629 011a A818     		adds	r0, r5, r2
4288:src/xeq.c     **** 			goto range_error;
 23630              		.loc 1 4288 6 view .LVU6140
 23631 011c 8842     		cmp	r0, r1
 23632 011e CBDC     		bgt	.L1658
4291:src/xeq.c     **** 	}
 23633              		.loc 1 4291 3 is_stmt 1 view .LVU6141
4291:src/xeq.c     **** 	}
 23634              		.loc 1 4291 6 is_stmt 0 view .LVU6142
 23635 0120 C8F80050 		str	r5, [r8]
 23636 0124 B118     		adds	r1, r6, r2
 23637              	.LVL1833:
 23638              	.L1676:
4298:src/xeq.c     **** 		goto range_error;
 23639              		.loc 1 4298 2 is_stmt 1 view .LVU6143
4298:src/xeq.c     **** 		goto range_error;
 23640              		.loc 1 4298 5 is_stmt 0 view .LVU6144
 23641 0126 8B42     		cmp	r3, r1
 23642 0128 C6DB     		blt	.L1658
 23643              	.L1678:
4302:src/xeq.c     **** 	*n = num;
ARM GAS  /tmp/ccaPnj5t.s 			page 616


 23644              		.loc 1 4302 2 is_stmt 1 view .LVU6145
4302:src/xeq.c     **** 	*n = num;
 23645              		.loc 1 4302 37 is_stmt 0 view .LVU6146
 23646 012a 0FB1     		cbz	r7, .L1679
4302:src/xeq.c     **** 	*n = num;
 23647              		.loc 1 4302 37 view .LVU6147
 23648 012c 06F57A76 		add	r6, r6, #1000
 23649              	.LVL1834:
 23650              	.L1679:
4305:src/xeq.c     **** 
 23651              		.loc 1 4305 9 view .LVU6148
 23652 0130 0020     		movs	r0, #0
4302:src/xeq.c     **** 	*n = num;
 23653              		.loc 1 4302 5 view .LVU6149
 23654 0132 CBF80060 		str	r6, [fp]
4303:src/xeq.c     **** 
 23655              		.loc 1 4303 2 is_stmt 1 view .LVU6150
4303:src/xeq.c     **** 
 23656              		.loc 1 4303 5 is_stmt 0 view .LVU6151
 23657 0136 C9F80020 		str	r2, [r9]
4305:src/xeq.c     **** 
 23658              		.loc 1 4305 2 is_stmt 1 view .LVU6152
 23659              	.LBE3316:
 23660              	.LBE3322:
4310:src/xeq.c     **** 
 23661              		.loc 1 4310 1 is_stmt 0 view .LVU6153
 23662 013a 15B0     		add	sp, sp, #84
 23663              		.cfi_remember_state
 23664              		.cfi_def_cfa_offset 36
 23665              		@ sp needed
 23666 013c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23667              	.LVL1835:
 23668              	.L1656:
 23669              		.cfi_restore_state
 23670              	.LBB3323:
 23671              	.LBB3317:
 23672              	.LBB3278:
 23673              	.LBI3278:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23674              		.loc 1 233 5 is_stmt 1 view .LVU6154
 23675              	.LBE3278:
 23676              	.LBE3317:
 23677              	.LBE3323:
 234:src/xeq.c     **** }
 23678              		.loc 1 234 2 view .LVU6155
 23679              	.LBB3324:
 23680              	.LBB3318:
 23681              	.LBB3299:
 23682              	.LBB3279:
 23683              	.LBI3279:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23684              		.loc 1 225 5 view .LVU6156
 23685              	.LBB3280:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23686              		.loc 1 226 2 view .LVU6157
 23687              	.LBB3281:
 23688              	.LBI3281:
ARM GAS  /tmp/ccaPnj5t.s 			page 617


1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23689              		.loc 1 1100 5 view .LVU6158
 23690              	.LBB3282:
1101:src/xeq.c     **** }
 23691              		.loc 1 1101 2 view .LVU6159
1101:src/xeq.c     **** }
 23692              		.loc 1 1101 12 is_stmt 0 view .LVU6160
 23693 0140 DAF80030 		ldr	r3, [r10]
 23694              	.LVL1836:
1101:src/xeq.c     **** }
 23695              		.loc 1 1101 12 view .LVU6161
 23696              	.LBE3282:
 23697              	.LBE3281:
 227:src/xeq.c     **** }
 23698              		.loc 1 227 2 is_stmt 1 view .LVU6162
 23699              	.LBB3285:
 23700              	.LBI3285:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23701              		.loc 1 217 5 view .LVU6163
 23702              	.LBB3286:
 218:src/xeq.c     **** }
 23703              		.loc 1 218 2 view .LVU6164
 218:src/xeq.c     **** }
 23704              		.loc 1 218 9 is_stmt 0 view .LVU6165
 23705 0144 B3F9DE17 		ldrsh	r1, [r3, #2014]
 218:src/xeq.c     **** }
 23706              		.loc 1 218 57 view .LVU6166
 23707 0148 0029     		cmp	r1, #0
 23708 014a 38DB     		blt	.L1701
 23709 014c 7023     		movs	r3, #112
 23710              	.LVL1837:
 218:src/xeq.c     **** }
 23711              		.loc 1 218 57 view .LVU6167
 23712 014e AFE7     		b	.L1662
 23713              	.LVL1838:
 23714              	.L1663:
 218:src/xeq.c     **** }
 23715              		.loc 1 218 57 view .LVU6168
 23716              	.LBE3286:
 23717              	.LBE3285:
 23718              	.LBE3280:
 23719              	.LBE3279:
 23720              	.LBE3299:
4294:src/xeq.c     **** 			num = mx_src - rsrc;
 23721              		.loc 1 4294 3 is_stmt 1 view .LVU6169
4294:src/xeq.c     **** 			num = mx_src - rsrc;
 23722              		.loc 1 4294 6 is_stmt 0 view .LVU6170
 23723 0150 002A     		cmp	r2, #0
 23724 0152 32D1     		bne	.L1702
4295:src/xeq.c     **** 		}
 23725              		.loc 1 4295 4 is_stmt 1 view .LVU6171
4295:src/xeq.c     **** 		}
 23726              		.loc 1 4295 8 is_stmt 0 view .LVU6172
 23727 0154 9A1B     		subs	r2, r3, r6
 23728              	.LVL1839:
4298:src/xeq.c     **** 		goto range_error;
 23729              		.loc 1 4298 2 is_stmt 1 view .LVU6173
ARM GAS  /tmp/ccaPnj5t.s 			page 618


 23730 0156 E8E7     		b	.L1678
 23731              	.L1664:
 23732              	.LBB3300:
 23733              	.LBI3300:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23734              		.loc 1 253 14 view .LVU6174
 23735              	.LBE3300:
 23736              	.LBE3318:
 23737              	.LBE3324:
 254:src/xeq.c     **** }
 23738              		.loc 1 254 2 view .LVU6175
 23739              	.LVL1840:
 23740              	.LBB3325:
 23741              	.LBB3319:
 23742              	.LBB3309:
 23743              	.LBB3301:
 23744              	.LBI3301:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23745              		.loc 1 241 14 view .LVU6176
 23746              	.LBB3302:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23747              		.loc 1 242 2 view .LVU6177
 23748              	.LBB3303:
 23749              	.LBI3303:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23750              		.loc 1 1100 5 view .LVU6178
 23751              	.LBB3304:
1101:src/xeq.c     **** }
 23752              		.loc 1 1101 2 view .LVU6179
1101:src/xeq.c     **** }
 23753              		.loc 1 1101 12 is_stmt 0 view .LVU6180
 23754 0158 DAF80000 		ldr	r0, [r10]
1101:src/xeq.c     **** }
 23755              		.loc 1 1101 24 view .LVU6181
 23756 015c B0F8E8C7 		ldrh	ip, [r0, #2024]
 23757 0160 44F20101 		movw	r1, #16385
 23758              	.LBE3304:
 23759              	.LBE3303:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23760              		.loc 1 242 5 view .LVU6182
 23761 0164 01EA0C01 		and	r1, r1, ip
 23762 0168 B1F5804F 		cmp	r1, #16384
 23763              	.LBB3305:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23764              		.loc 1 243 24 view .LVU6183
 23765 016c 90F8CF17 		ldrb	r1, [r0, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23766              		.loc 1 243 3 is_stmt 1 view .LVU6184
 244:src/xeq.c     **** 	}
 23767              		.loc 1 244 3 view .LVU6185
 23768              	.LVL1841:
 244:src/xeq.c     **** 	}
 23769              		.loc 1 244 3 is_stmt 0 view .LVU6186
 23770              	.LBE3305:
 23771              	.LBE3302:
 23772              	.LBE3301:
 23773              	.LBE3309:
ARM GAS  /tmp/ccaPnj5t.s 			page 619


4268:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23774              		.loc 1 4268 3 is_stmt 1 view .LVU6187
 23775              	.LBB3310:
 23776              	.LBB3308:
 23777              	.LBB3307:
 23778              	.LBB3306:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23779              		.loc 1 243 13 is_stmt 0 view .LVU6188
 23780 0170 04BF     		itt	eq
 23781 0172 0C39     		subeq	r1, r1, #12
 244:src/xeq.c     **** 	}
 23782              		.loc 1 244 67 view .LVU6189
 23783 0174 4910     		asreq	r1, r1, #1
 23784              	.LBE3306:
 23785              	.LBE3307:
 23786              	.LBE3308:
 23787              	.LBE3310:
4268:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23788              		.loc 1 4268 6 view .LVU6190
 23789 0176 002A     		cmp	r2, #0
 23790 0178 CFD1     		bne	.L1670
 23791              	.L1666:
4270:src/xeq.c     **** 				// source & destination in different memory areas
 23792              		.loc 1 4270 4 is_stmt 1 view .LVU6191
4270:src/xeq.c     **** 				// source & destination in different memory areas
 23793              		.loc 1 4270 7 is_stmt 0 view .LVU6192
 23794 017a 4FB1     		cbz	r7, .L1703
 23795              	.LVL1842:
 23796              	.L1671:
4272:src/xeq.c     **** 			else {
 23797              		.loc 1 4272 5 is_stmt 1 view .LVU6193
4272:src/xeq.c     **** 			else {
 23798              		.loc 1 4272 9 is_stmt 0 view .LVU6194
 23799 017c 8B42     		cmp	r3, r1
 23800 017e 1A46     		mov	r2, r3
 23801 0180 A8BF     		it	ge
 23802 0182 0A46     		movge	r2, r1
 23803              	.LVL1843:
 23804              	.L1673:
4286:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23805              		.loc 1 4286 3 is_stmt 1 view .LVU6195
4286:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23806              		.loc 1 4286 6 is_stmt 0 view .LVU6196
 23807 0184 6F2D     		cmp	r5, #111
 23808 0186 C8DD     		ble	.L1670
 23809 0188 C6E7     		b	.L1667
 23810              	.LVL1844:
 23811              	.L1683:
4286:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23812              		.loc 1 4286 6 view .LVU6197
 23813 018a 1F46     		mov	r7, r3
4259:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23814              		.loc 1 4259 9 view .LVU6198
 23815 018c 7023     		movs	r3, #112
 23816 018e B4E7     		b	.L1659
 23817              	.LVL1845:
 23818              	.L1703:
ARM GAS  /tmp/ccaPnj5t.s 			page 620


4270:src/xeq.c     **** 				// source & destination in different memory areas
 23819              		.loc 1 4270 42 view .LVU6199
 23820 0190 244A     		ldr	r2, .L1704+12
 23821              	.LVL1846:
4270:src/xeq.c     **** 				// source & destination in different memory areas
 23822              		.loc 1 4270 14 view .LVU6200
 23823 0192 9442     		cmp	r4, r2
 23824 0194 B4BF     		ite	lt
 23825 0196 0024     		movlt	r4, #0
 23826 0198 0124     		movge	r4, #1
 23827 019a 6F2D     		cmp	r5, #111
 23828 019c D4BF     		ite	le
 23829 019e 0022     		movle	r2, #0
 23830 01a0 0122     		movgt	r2, #1
 23831 01a2 9442     		cmp	r4, r2
 23832 01a4 EAD1     		bne	.L1671
4274:src/xeq.c     **** 					num = mx_src - rsrc;
 23833              		.loc 1 4274 5 is_stmt 1 view .LVU6201
4274:src/xeq.c     **** 					num = mx_src - rsrc;
 23834              		.loc 1 4274 8 is_stmt 0 view .LVU6202
 23835 01a6 B542     		cmp	r5, r6
4275:src/xeq.c     **** 					q = rsrc - rdest;
 23836              		.loc 1 4275 6 is_stmt 1 view .LVU6203
4279:src/xeq.c     **** 					q = rdest - rsrc;
 23837              		.loc 1 4279 10 is_stmt 0 view .LVU6204
 23838 01a8 A7BF     		ittee	ge
 23839 01aa 4A1B     		subge	r2, r1, r5
4280:src/xeq.c     **** 				}
 23840              		.loc 1 4280 8 view .LVU6205
 23841 01ac A81B     		subge	r0, r5, r6
4275:src/xeq.c     **** 					q = rsrc - rdest;
 23842              		.loc 1 4275 10 view .LVU6206
 23843 01ae 9A1B     		sublt	r2, r3, r6
4276:src/xeq.c     **** 				}
 23844              		.loc 1 4276 6 is_stmt 1 view .LVU6207
4276:src/xeq.c     **** 				}
 23845              		.loc 1 4276 8 is_stmt 0 view .LVU6208
 23846 01b0 701B     		sublt	r0, r6, r5
4279:src/xeq.c     **** 					q = rdest - rsrc;
 23847              		.loc 1 4279 6 is_stmt 1 view .LVU6209
 23848              	.LVL1847:
4280:src/xeq.c     **** 				}
 23849              		.loc 1 4280 6 view .LVU6210
4282:src/xeq.c     **** 					num = q;
 23850              		.loc 1 4282 5 view .LVU6211
 23851 01b2 8242     		cmp	r2, r0
 23852 01b4 A8BF     		it	ge
 23853 01b6 0246     		movge	r2, r0
 23854              	.LVL1848:
4282:src/xeq.c     **** 					num = q;
 23855              		.loc 1 4282 5 is_stmt 0 view .LVU6212
 23856 01b8 E4E7     		b	.L1673
 23857              	.LVL1849:
 23858              	.L1702:
4282:src/xeq.c     **** 					num = q;
 23859              		.loc 1 4282 5 view .LVU6213
 23860 01ba 9119     		adds	r1, r2, r6
ARM GAS  /tmp/ccaPnj5t.s 			page 621


 23861 01bc B3E7     		b	.L1676
 23862              	.LVL1850:
 23863              	.L1701:
 23864              	.LBB3311:
 23865              	.LBB3298:
 23866              	.LBB3297:
 23867              	.LBB3291:
 23868              	.LBB3283:
1101:src/xeq.c     **** }
 23869              		.loc 1 1101 24 view .LVU6214
 23870 01be B3F8E877 		ldrh	r7, [r3, #2024]
 23871              	.LBE3283:
 23872              	.LBE3291:
 23873              	.LBB3292:
 23874              	.LBB3287:
 218:src/xeq.c     **** }
 23875              		.loc 1 218 25 view .LVU6215
 23876 01c2 1B48     		ldr	r0, .L1704+24
 23877              	.LBE3287:
 23878              	.LBE3292:
 23879              	.LBB3293:
 23880              	.LBB3284:
1101:src/xeq.c     **** }
 23881              		.loc 1 1101 24 view .LVU6216
 23882 01c4 44F20103 		movw	r3, #16385
 23883              	.LVL1851:
1101:src/xeq.c     **** }
 23884              		.loc 1 1101 24 view .LVU6217
 23885              	.LBE3284:
 23886              	.LBE3293:
 23887              	.LBB3294:
 23888              	.LBB3288:
 218:src/xeq.c     **** }
 23889              		.loc 1 218 25 view .LVU6218
 23890 01c8 0068     		ldr	r0, [r0]
 23891              	.LBE3288:
 23892              	.LBE3294:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23893              		.loc 1 226 73 view .LVU6219
 23894 01ca 3B40     		ands	r3, r3, r7
 23895 01cc A3F58043 		sub	r3, r3, #16384
 23896              	.LBB3295:
 23897              	.LBB3289:
 218:src/xeq.c     **** }
 23898              		.loc 1 218 57 view .LVU6220
 23899 01d0 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 23900              	.LBE3289:
 23901              	.LBE3295:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23902              		.loc 1 226 73 view .LVU6221
 23903 01d4 B3FA83F3 		clz	r3, r3
 23904 01d8 5B09     		lsrs	r3, r3, #5
 23905 01da 0233     		adds	r3, r3, #2
 23906              	.LBB3296:
 23907              	.LBB3290:
 218:src/xeq.c     **** }
 23908              		.loc 1 218 57 view .LVU6222
ARM GAS  /tmp/ccaPnj5t.s 			page 622


 23909 01dc C1F30B01 		ubfx	r1, r1, #0, #12
 23910 01e0 41FA03F3 		asr	r3, r1, r3
 23911 01e4 7033     		adds	r3, r3, #112
 23912 01e6 63E7     		b	.L1662
 23913              	.LVL1852:
 23914              	.L1700:
 218:src/xeq.c     **** }
 23915              		.loc 1 218 57 view .LVU6223
 23916              	.LBE3290:
 23917              	.LBE3296:
 23918              	.LBE3297:
 23919              	.LBE3298:
 23920              	.LBE3311:
 23921              	.LBB3312:
 23922              	.LBB3275:
 23923              	.LBB3273:
 23924              	.LBB3266:
 23925              	.LBB3256:
1101:src/xeq.c     **** }
 23926              		.loc 1 1101 24 view .LVU6224
 23927 01e8 B1F8E8E7 		ldrh	lr, [r1, #2024]
 23928              	.LBE3256:
 23929              	.LBE3266:
 23930              	.LBB3267:
 23931              	.LBB3261:
 218:src/xeq.c     **** }
 23932              		.loc 1 218 25 view .LVU6225
 23933 01ec DFF840C0 		ldr	ip, .L1704+24
 23934              	.LBE3261:
 23935              	.LBE3267:
 23936              	.LBB3268:
 23937              	.LBB3257:
1101:src/xeq.c     **** }
 23938              		.loc 1 1101 24 view .LVU6226
 23939 01f0 44F20101 		movw	r1, #16385
 23940              	.LVL1853:
1101:src/xeq.c     **** }
 23941              		.loc 1 1101 24 view .LVU6227
 23942              	.LBE3257:
 23943              	.LBE3268:
 23944              	.LBB3269:
 23945              	.LBB3262:
 218:src/xeq.c     **** }
 23946              		.loc 1 218 25 view .LVU6228
 23947 01f4 DCF800C0 		ldr	ip, [ip]
 23948              	.LBE3262:
 23949              	.LBE3269:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23950              		.loc 1 226 73 view .LVU6229
 23951 01f8 01EA0E01 		and	r1, r1, lr
 23952 01fc A1F58041 		sub	r1, r1, #16384
 23953              	.LBB3270:
 23954              	.LBB3263:
 218:src/xeq.c     **** }
 23955              		.loc 1 218 57 view .LVU6230
 23956 0200 3CF810C0 		ldrh	ip, [ip, r0, lsl #1]
 23957              	.LBE3263:
ARM GAS  /tmp/ccaPnj5t.s 			page 623


 23958              	.LBE3270:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23959              		.loc 1 226 73 view .LVU6231
 23960 0204 B1FA81F1 		clz	r1, r1
 23961 0208 4909     		lsrs	r1, r1, #5
 23962 020a 881C     		adds	r0, r1, #2
 23963              	.LBB3271:
 23964              	.LBB3264:
 218:src/xeq.c     **** }
 23965              		.loc 1 218 57 view .LVU6232
 23966 020c CCF30B01 		ubfx	r1, ip, #0, #12
 23967 0210 0141     		asrs	r1, r1, r0
 23968              	.LVL1854:
 218:src/xeq.c     **** }
 23969              		.loc 1 218 57 view .LVU6233
 23970              	.LBE3264:
 23971              	.LBE3271:
 23972              	.LBE3273:
 23973              	.LBE3275:
 23974              	.LBE3312:
4268:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23975              		.loc 1 4268 3 is_stmt 1 view .LVU6234
4268:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23976              		.loc 1 4268 6 is_stmt 0 view .LVU6235
 23977 0212 002A     		cmp	r2, #0
 23978 0214 B1D0     		beq	.L1666
 23979 0216 7FE7     		b	.L1667
 23980              	.L1705:
 23981              		.align	2
 23982              	.L1704:
 23983 0218 00000000 		.word	Error
 23984 021c D34D6210 		.word	274877907
 23985 0220 1F85EB51 		.word	1374389535
 23986 0224 00E6AA00 		.word	11200000
 23987 0228 80969800 		.word	10000000
 23988 022c 00000000 		.word	backup_ram
 23989 0230 00000000 		.word	RetStk
 23990 0234 00000000 		.word	main_ram
 23991              	.LBE3319:
 23992              	.LBE3325:
 23993              		.cfi_endproc
 23994              	.LFE227:
 23996              		.section	.text.op_regcopy,"ax",%progbits
 23997              		.align	1
 23998              		.p2align 2,,3
 23999              		.global	op_regcopy
 24000              		.syntax unified
 24001              		.thumb
 24002              		.thumb_func
 24003              		.fpu fpv4-sp-d16
 24005              	op_regcopy:
 24006              	.LVL1855:
 24007              	.LFB228:
4312:src/xeq.c     **** 	int s, n, d;
 24008              		.loc 1 4312 32 is_stmt 1 view -0
 24009              		.cfi_startproc
 24010              		@ args = 0, pretend = 0, frame = 16
ARM GAS  /tmp/ccaPnj5t.s 			page 624


 24011              		@ frame_needed = 0, uses_anonymous_args = 0
4313:src/xeq.c     **** 
 24012              		.loc 1 4313 2 view .LVU6237
4315:src/xeq.c     **** 		return;
 24013              		.loc 1 4315 2 view .LVU6238
4312:src/xeq.c     **** 	int s, n, d;
 24014              		.loc 1 4312 32 is_stmt 0 view .LVU6239
 24015 0000 10B5     		push	{r4, lr}
 24016              		.cfi_def_cfa_offset 8
 24017              		.cfi_offset 4, -8
 24018              		.cfi_offset 14, -4
 24019 0002 84B0     		sub	sp, sp, #16
 24020              		.cfi_def_cfa_offset 24
4315:src/xeq.c     **** 		return;
 24021              		.loc 1 4315 6 view .LVU6240
 24022 0004 0123     		movs	r3, #1
 24023 0006 03AA     		add	r2, sp, #12
 24024 0008 02A9     		add	r1, sp, #8
 24025 000a 01A8     		add	r0, sp, #4
 24026              	.LVL1856:
4315:src/xeq.c     **** 		return;
 24027              		.loc 1 4315 6 view .LVU6241
 24028 000c FFF7FEFF 		bl	reg_decode
 24029              	.LVL1857:
4315:src/xeq.c     **** 		return;
 24030              		.loc 1 4315 5 view .LVU6242
 24031 0010 B8B9     		cbnz	r0, .L1706
4317:src/xeq.c     **** }
 24032              		.loc 1 4317 2 is_stmt 1 view .LVU6243
 24033 0012 0398     		ldr	r0, [sp, #12]
 24034 0014 FFF7FEFF 		bl	get_reg_n
 24035              	.LVL1858:
 24036 0018 0446     		mov	r4, r0
 24037 001a 0198     		ldr	r0, [sp, #4]
 24038 001c FFF7FEFF 		bl	get_reg_n
 24039              	.LVL1859:
 24040              	.LBB3326:
 24041              	.LBB3327:
 24042              	.LBB3328:
 24043              	.LBB3329:
1101:src/xeq.c     **** }
 24044              		.loc 1 1101 24 is_stmt 0 view .LVU6244
 24045 0020 094B     		ldr	r3, .L1711
 24046              	.LBE3329:
 24047              	.LBE3328:
 24048              	.LBE3327:
 24049              	.LBE3326:
4317:src/xeq.c     **** }
 24050              		.loc 1 4317 2 view .LVU6245
 24051 0022 029A     		ldr	r2, [sp, #8]
 24052              	.LVL1860:
 24053              	.LBB3336:
 24054              	.LBB3334:
 24055              	.LBB3332:
 24056              	.LBB3330:
1101:src/xeq.c     **** }
 24057              		.loc 1 1101 24 view .LVU6246
ARM GAS  /tmp/ccaPnj5t.s 			page 625


 24058 0024 1B68     		ldr	r3, [r3]
 24059 0026 B3F8E817 		ldrh	r1, [r3, #2024]
 24060 002a 44F20103 		movw	r3, #16385
 24061              	.LBE3330:
 24062              	.LBE3332:
1520:src/xeq.c     **** 		n <<= 1;
 24063              		.loc 1 1520 5 view .LVU6247
 24064 002e 0B40     		ands	r3, r3, r1
 24065 0030 B3F5804F 		cmp	r3, #16384
1521:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24066              		.loc 1 1521 5 view .LVU6248
 24067 0034 08BF     		it	eq
 24068 0036 5200     		lsleq	r2, r2, #1
 24069              	.LBE3334:
 24070              	.LBE3336:
4317:src/xeq.c     **** }
 24071              		.loc 1 4317 2 view .LVU6249
 24072 0038 0146     		mov	r1, r0
 24073              	.LVL1861:
 24074              	.LBB3337:
 24075              	.LBI3326:
1519:src/xeq.c     **** 	if (is_dblmode())
 24076              		.loc 1 1519 6 is_stmt 1 view .LVU6250
 24077              	.LBB3335:
1520:src/xeq.c     **** 		n <<= 1;
 24078              		.loc 1 1520 2 view .LVU6251
 24079              	.LBB3333:
 24080              	.LBI3328:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24081              		.loc 1 1100 5 view .LVU6252
 24082              	.LBB3331:
1101:src/xeq.c     **** }
 24083              		.loc 1 1101 2 view .LVU6253
 24084              	.LBE3331:
 24085              	.LBE3333:
1521:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24086              		.loc 1 1521 3 view .LVU6254
1522:src/xeq.c     **** }
 24087              		.loc 1 1522 2 view .LVU6255
 24088 003a D200     		lsls	r2, r2, #3
 24089              	.LVL1862:
1522:src/xeq.c     **** }
 24090              		.loc 1 1522 2 is_stmt 0 view .LVU6256
 24091 003c 2046     		mov	r0, r4
 24092              	.LVL1863:
1522:src/xeq.c     **** }
 24093              		.loc 1 1522 2 view .LVU6257
 24094 003e FFF7FEFF 		bl	xcopy
 24095              	.LVL1864:
 24096              	.L1706:
1522:src/xeq.c     **** }
 24097              		.loc 1 1522 2 view .LVU6258
 24098              	.LBE3335:
 24099              	.LBE3337:
4318:src/xeq.c     **** 
 24100              		.loc 1 4318 1 view .LVU6259
 24101 0042 04B0     		add	sp, sp, #16
ARM GAS  /tmp/ccaPnj5t.s 			page 626


 24102              		.cfi_def_cfa_offset 8
 24103              		@ sp needed
 24104 0044 10BD     		pop	{r4, pc}
 24105              	.L1712:
 24106 0046 00BF     		.align	2
 24107              	.L1711:
 24108 0048 00000000 		.word	main_ram
 24109              		.cfi_endproc
 24110              	.LFE228:
 24112              		.section	.text.op_regswap,"ax",%progbits
 24113              		.align	1
 24114              		.p2align 2,,3
 24115              		.global	op_regswap
 24116              		.syntax unified
 24117              		.thumb
 24118              		.thumb_func
 24119              		.fpu fpv4-sp-d16
 24121              	op_regswap:
 24122              	.LVL1865:
 24123              	.LFB229:
4320:src/xeq.c     **** 	int s, n, d, i;
 24124              		.loc 1 4320 32 is_stmt 1 view -0
 24125              		.cfi_startproc
 24126              		@ args = 0, pretend = 0, frame = 16
 24127              		@ frame_needed = 0, uses_anonymous_args = 0
4321:src/xeq.c     **** 
 24128              		.loc 1 4321 2 view .LVU6261
4323:src/xeq.c     **** 		return;
 24129              		.loc 1 4323 2 view .LVU6262
4320:src/xeq.c     **** 	int s, n, d, i;
 24130              		.loc 1 4320 32 is_stmt 0 view .LVU6263
 24131 0000 30B5     		push	{r4, r5, lr}
 24132              		.cfi_def_cfa_offset 12
 24133              		.cfi_offset 4, -12
 24134              		.cfi_offset 5, -8
 24135              		.cfi_offset 14, -4
 24136 0002 85B0     		sub	sp, sp, #20
 24137              		.cfi_def_cfa_offset 32
4323:src/xeq.c     **** 		return;
 24138              		.loc 1 4323 6 view .LVU6264
 24139 0004 0023     		movs	r3, #0
 24140 0006 03AA     		add	r2, sp, #12
 24141 0008 02A9     		add	r1, sp, #8
 24142 000a 01A8     		add	r0, sp, #4
 24143              	.LVL1866:
4323:src/xeq.c     **** 		return;
 24144              		.loc 1 4323 6 view .LVU6265
 24145 000c FFF7FEFF 		bl	reg_decode
 24146              	.LVL1867:
4323:src/xeq.c     **** 		return;
 24147              		.loc 1 4323 5 view .LVU6266
 24148 0010 E8B9     		cbnz	r0, .L1713
4323:src/xeq.c     **** 		return;
 24149              		.loc 1 4323 37 discriminator 1 view .LVU6267
 24150 0012 039B     		ldr	r3, [sp, #12]
 24151 0014 0446     		mov	r4, r0
 24152 0016 0198     		ldr	r0, [sp, #4]
ARM GAS  /tmp/ccaPnj5t.s 			page 627


4323:src/xeq.c     **** 		return;
 24153              		.loc 1 4323 32 discriminator 1 view .LVU6268
 24154 0018 9842     		cmp	r0, r3
 24155 001a 18D0     		beq	.L1713
4326:src/xeq.c     **** 			report_err(ERR_RANGE);
 24156              		.loc 1 4326 3 is_stmt 1 view .LVU6269
4326:src/xeq.c     **** 			report_err(ERR_RANGE);
 24157              		.loc 1 4326 19 is_stmt 0 view .LVU6270
 24158 001c 029A     		ldr	r2, [sp, #8]
4326:src/xeq.c     **** 			report_err(ERR_RANGE);
 24159              		.loc 1 4326 6 view .LVU6271
 24160 001e 18DD     		ble	.L1718
4326:src/xeq.c     **** 			report_err(ERR_RANGE);
 24161              		.loc 1 4326 19 discriminator 1 view .LVU6272
 24162 0020 1344     		add	r3, r3, r2
4326:src/xeq.c     **** 			report_err(ERR_RANGE);
 24163              		.loc 1 4326 14 discriminator 1 view .LVU6273
 24164 0022 9842     		cmp	r0, r3
 24165 0024 19DB     		blt	.L1719
 24166              	.L1720:
 24167              	.LVL1868:
4329:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24168              		.loc 1 4329 16 is_stmt 1 discriminator 1 view .LVU6274
4329:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24169              		.loc 1 4329 4 is_stmt 0 discriminator 1 view .LVU6275
 24170 0026 002A     		cmp	r2, #0
 24171 0028 01DC     		bgt	.L1722
 24172 002a 10E0     		b	.L1713
 24173              	.LVL1869:
 24174              	.L1725:
4329:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24175              		.loc 1 4329 4 discriminator 1 view .LVU6276
 24176 002c 0198     		ldr	r0, [sp, #4]
 24177              	.LVL1870:
 24178              	.L1722:
4330:src/xeq.c     **** 		}
 24179              		.loc 1 4330 5 is_stmt 1 discriminator 3 view .LVU6277
 24180 002e 2044     		add	r0, r0, r4
 24181 0030 FFF7FEFF 		bl	get_reg_n
 24182              	.LVL1871:
 24183 0034 039B     		ldr	r3, [sp, #12]
 24184 0036 0546     		mov	r5, r0
 24185 0038 E018     		adds	r0, r4, r3
 24186 003a FFF7FEFF 		bl	get_reg_n
 24187              	.LVL1872:
 24188 003e 0146     		mov	r1, r0
 24189 0040 2846     		mov	r0, r5
 24190 0042 FFF7FEFF 		bl	swap_reg
 24191              	.LVL1873:
4329:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24192              		.loc 1 4329 23 discriminator 3 view .LVU6278
4329:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24193              		.loc 1 4329 4 is_stmt 0 discriminator 3 view .LVU6279
 24194 0046 029B     		ldr	r3, [sp, #8]
4329:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24195              		.loc 1 4329 24 discriminator 3 view .LVU6280
 24196 0048 0134     		adds	r4, r4, #1
ARM GAS  /tmp/ccaPnj5t.s 			page 628


 24197              	.LVL1874:
4329:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24198              		.loc 1 4329 16 is_stmt 1 discriminator 3 view .LVU6281
4329:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24199              		.loc 1 4329 4 is_stmt 0 discriminator 3 view .LVU6282
 24200 004a A342     		cmp	r3, r4
 24201 004c EEDC     		bgt	.L1725
 24202              	.LVL1875:
 24203              	.L1713:
4333:src/xeq.c     **** 
 24204              		.loc 1 4333 1 view .LVU6283
 24205 004e 05B0     		add	sp, sp, #20
 24206              		.cfi_remember_state
 24207              		.cfi_def_cfa_offset 12
 24208              		@ sp needed
 24209 0050 30BD     		pop	{r4, r5, pc}
 24210              	.L1718:
 24211              		.cfi_restore_state
4326:src/xeq.c     **** 			report_err(ERR_RANGE);
 24212              		.loc 1 4326 28 discriminator 3 view .LVU6284
 24213 0052 E8DA     		bge	.L1720
4326:src/xeq.c     **** 			report_err(ERR_RANGE);
 24214              		.loc 1 4326 43 discriminator 4 view .LVU6285
 24215 0054 8118     		adds	r1, r0, r2
4326:src/xeq.c     **** 			report_err(ERR_RANGE);
 24216              		.loc 1 4326 38 discriminator 4 view .LVU6286
 24217 0056 8B42     		cmp	r3, r1
 24218 0058 E5DA     		bge	.L1720
 24219              	.L1719:
4327:src/xeq.c     **** 		else {
 24220              		.loc 1 4327 4 is_stmt 1 view .LVU6287
 24221              	.LVL1876:
 24222              	.LBB3342:
 24223              	.LBI3342:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24224              		.loc 1 540 5 view .LVU6288
 24225              	.LBB3343:
 541:src/xeq.c     **** 		Error = e;
 24226              		.loc 1 541 2 view .LVU6289
 541:src/xeq.c     **** 		Error = e;
 24227              		.loc 1 541 12 is_stmt 0 view .LVU6290
 24228 005a 044B     		ldr	r3, .L1726
 541:src/xeq.c     **** 		Error = e;
 24229              		.loc 1 541 5 view .LVU6291
 24230 005c 1A68     		ldr	r2, [r3]
 24231 005e 002A     		cmp	r2, #0
 24232 0060 F5D1     		bne	.L1713
 24233              	.LVL1877:
 24234              	.LBB3344:
 24235              	.LBI3344:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24236              		.loc 1 540 5 is_stmt 1 view .LVU6292
 24237              	.LBB3345:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24238              		.loc 1 542 3 view .LVU6293
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24239              		.loc 1 542 9 is_stmt 0 view .LVU6294
ARM GAS  /tmp/ccaPnj5t.s 			page 629


 24240 0062 0822     		movs	r2, #8
 24241 0064 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 24242              		.loc 1 543 3 is_stmt 1 view .LVU6295
 24243              	.LBE3345:
 24244              	.LBE3344:
 24245              	.LBE3343:
 24246              	.LBE3342:
4333:src/xeq.c     **** 
 24247              		.loc 1 4333 1 is_stmt 0 view .LVU6296
 24248 0066 05B0     		add	sp, sp, #20
 24249              		.cfi_def_cfa_offset 12
 24250              		@ sp needed
 24251 0068 30BD     		pop	{r4, r5, pc}
 24252              	.L1727:
 24253 006a 00BF     		.align	2
 24254              	.L1726:
 24255 006c 00000000 		.word	Error
 24256              		.cfi_endproc
 24257              	.LFE229:
 24259              		.section	.text.op_regclr,"ax",%progbits
 24260              		.align	1
 24261              		.p2align 2,,3
 24262              		.global	op_regclr
 24263              		.syntax unified
 24264              		.thumb
 24265              		.thumb_func
 24266              		.fpu fpv4-sp-d16
 24268              	op_regclr:
 24269              	.LVL1878:
 24270              	.LFB230:
4335:src/xeq.c     **** 	int s, n;
 24271              		.loc 1 4335 31 is_stmt 1 view -0
 24272              		.cfi_startproc
 24273              		@ args = 0, pretend = 0, frame = 8
 24274              		@ frame_needed = 0, uses_anonymous_args = 0
4336:src/xeq.c     **** 
 24275              		.loc 1 4336 2 view .LVU6298
4338:src/xeq.c     **** 		return;
 24276              		.loc 1 4338 2 view .LVU6299
4335:src/xeq.c     **** 	int s, n;
 24277              		.loc 1 4335 31 is_stmt 0 view .LVU6300
 24278 0000 10B5     		push	{r4, lr}
 24279              		.cfi_def_cfa_offset 8
 24280              		.cfi_offset 4, -8
 24281              		.cfi_offset 14, -4
4338:src/xeq.c     **** 		return;
 24282              		.loc 1 4338 6 view .LVU6301
 24283 0002 0023     		movs	r3, #0
4335:src/xeq.c     **** 	int s, n;
 24284              		.loc 1 4335 31 view .LVU6302
 24285 0004 82B0     		sub	sp, sp, #8
 24286              		.cfi_def_cfa_offset 16
4338:src/xeq.c     **** 		return;
 24287              		.loc 1 4338 6 view .LVU6303
 24288 0006 1A46     		mov	r2, r3
 24289 0008 01A9     		add	r1, sp, #4
ARM GAS  /tmp/ccaPnj5t.s 			page 630


 24290 000a 6846     		mov	r0, sp
 24291              	.LVL1879:
4338:src/xeq.c     **** 		return;
 24292              		.loc 1 4338 6 view .LVU6304
 24293 000c FFF7FEFF 		bl	reg_decode
 24294              	.LVL1880:
4338:src/xeq.c     **** 		return;
 24295              		.loc 1 4338 5 view .LVU6305
 24296 0010 A8B9     		cbnz	r0, .L1728
4340:src/xeq.c     **** }
 24297              		.loc 1 4340 2 is_stmt 1 view .LVU6306
 24298 0012 0446     		mov	r4, r0
 24299 0014 0098     		ldr	r0, [sp]
 24300 0016 FFF7FEFF 		bl	get_reg_n
 24301              	.LVL1881:
 24302              	.LBB3346:
 24303              	.LBI3346:
1500:src/xeq.c     **** #if 0
 24304              		.loc 1 1500 6 view .LVU6307
 24305              	.LBB3347:
1515:src/xeq.c     **** #endif
 24306              		.loc 1 1515 2 view .LVU6308
 24307              	.LBB3348:
 24308              	.LBI3348:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24309              		.loc 1 1100 5 view .LVU6309
 24310              	.LBB3349:
1101:src/xeq.c     **** }
 24311              		.loc 1 1101 2 view .LVU6310
1101:src/xeq.c     **** }
 24312              		.loc 1 1101 24 is_stmt 0 view .LVU6311
 24313 001a 0A4B     		ldr	r3, .L1732
 24314              	.LBE3349:
 24315              	.LBE3348:
1515:src/xeq.c     **** #endif
 24316              		.loc 1 1515 2 view .LVU6312
 24317 001c 019A     		ldr	r2, [sp, #4]
 24318              	.LBB3351:
 24319              	.LBB3350:
1101:src/xeq.c     **** }
 24320              		.loc 1 1101 24 view .LVU6313
 24321 001e 1B68     		ldr	r3, [r3]
 24322 0020 B3F8E817 		ldrh	r1, [r3, #2024]
 24323 0024 44F20103 		movw	r3, #16385
 24324 0028 0B40     		ands	r3, r3, r1
 24325 002a A3F58043 		sub	r3, r3, #16384
 24326 002e B3FA83F3 		clz	r3, r3
 24327 0032 5B09     		lsrs	r3, r3, #5
 24328              	.LBE3350:
 24329              	.LBE3351:
1515:src/xeq.c     **** #endif
 24330              		.loc 1 1515 24 view .LVU6314
 24331 0034 0333     		adds	r3, r3, #3
1515:src/xeq.c     **** #endif
 24332              		.loc 1 1515 2 view .LVU6315
 24333 0036 2146     		mov	r1, r4
 24334 0038 9A40     		lsls	r2, r2, r3
ARM GAS  /tmp/ccaPnj5t.s 			page 631


 24335 003a FFF7FEFF 		bl	xset
 24336              	.LVL1882:
 24337              	.L1728:
1515:src/xeq.c     **** #endif
 24338              		.loc 1 1515 2 view .LVU6316
 24339              	.LBE3347:
 24340              	.LBE3346:
4341:src/xeq.c     **** 
 24341              		.loc 1 4341 1 view .LVU6317
 24342 003e 02B0     		add	sp, sp, #8
 24343              		.cfi_def_cfa_offset 8
 24344              		@ sp needed
 24345 0040 10BD     		pop	{r4, pc}
 24346              	.L1733:
 24347 0042 00BF     		.align	2
 24348              	.L1732:
 24349 0044 00000000 		.word	main_ram
 24350              		.cfi_endproc
 24351              	.LFE230:
 24353              		.section	.text.op_regsort,"ax",%progbits
 24354              		.align	1
 24355              		.p2align 2,,3
 24356              		.global	op_regsort
 24357              		.syntax unified
 24358              		.thumb
 24359              		.thumb_func
 24360              		.fpu fpv4-sp-d16
 24362              	op_regsort:
 24363              	.LVL1883:
 24364              	.LFB231:
4343:src/xeq.c     **** 	int s, n;
 24365              		.loc 1 4343 32 is_stmt 1 view -0
 24366              		.cfi_startproc
 24367              		@ args = 0, pretend = 0, frame = 160
 24368              		@ frame_needed = 0, uses_anonymous_args = 0
4344:src/xeq.c     **** 	decNumber pivot, a;
 24369              		.loc 1 4344 2 view .LVU6319
4345:src/xeq.c     **** 	int beg[10], end[10], i;
 24370              		.loc 1 4345 2 view .LVU6320
4346:src/xeq.c     **** 
 24371              		.loc 1 4346 2 view .LVU6321
4348:src/xeq.c     **** 		return;
 24372              		.loc 1 4348 2 view .LVU6322
4343:src/xeq.c     **** 	int s, n;
 24373              		.loc 1 4343 32 is_stmt 0 view .LVU6323
 24374 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 24375              		.cfi_def_cfa_offset 28
 24376              		.cfi_offset 4, -28
 24377              		.cfi_offset 5, -24
 24378              		.cfi_offset 6, -20
 24379              		.cfi_offset 7, -16
 24380              		.cfi_offset 8, -12
 24381              		.cfi_offset 9, -8
 24382              		.cfi_offset 14, -4
4348:src/xeq.c     **** 		return;
 24383              		.loc 1 4348 6 view .LVU6324
 24384 0004 0023     		movs	r3, #0
ARM GAS  /tmp/ccaPnj5t.s 			page 632


4343:src/xeq.c     **** 	int s, n;
 24385              		.loc 1 4343 32 view .LVU6325
 24386 0006 A9B0     		sub	sp, sp, #164
 24387              		.cfi_def_cfa_offset 192
4348:src/xeq.c     **** 		return;
 24388              		.loc 1 4348 6 view .LVU6326
 24389 0008 1A46     		mov	r2, r3
 24390 000a 01A9     		add	r1, sp, #4
 24391 000c 6846     		mov	r0, sp
 24392              	.LVL1884:
4348:src/xeq.c     **** 		return;
 24393              		.loc 1 4348 6 view .LVU6327
 24394 000e FFF7FEFF 		bl	reg_decode
 24395              	.LVL1885:
4348:src/xeq.c     **** 		return;
 24396              		.loc 1 4348 5 view .LVU6328
 24397 0012 20B9     		cbnz	r0, .L1734
4348:src/xeq.c     **** 		return;
 24398              		.loc 1 4348 39 discriminator 1 view .LVU6329
 24399 0014 DDF80480 		ldr	r8, [sp, #4]
4348:src/xeq.c     **** 		return;
 24400              		.loc 1 4348 34 discriminator 1 view .LVU6330
 24401 0018 B8F1010F 		cmp	r8, #1
 24402 001c 02D1     		bne	.L1758
 24403              	.L1734:
4393:src/xeq.c     **** 
 24404              		.loc 1 4393 1 view .LVU6331
 24405 001e 29B0     		add	sp, sp, #164
 24406              		.cfi_remember_state
 24407              		.cfi_def_cfa_offset 28
 24408              		@ sp needed
 24409 0020 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 24410              	.L1758:
 24411              		.cfi_restore_state
 24412 0024 0646     		mov	r6, r0
4352:src/xeq.c     **** 	end[0] = n;
 24413              		.loc 1 4352 2 is_stmt 1 view .LVU6332
4352:src/xeq.c     **** 	end[0] = n;
 24414              		.loc 1 4352 9 is_stmt 0 view .LVU6333
 24415 0026 1490     		str	r0, [sp, #80]
4353:src/xeq.c     **** 	i = 0;
 24416              		.loc 1 4353 2 is_stmt 1 view .LVU6334
4353:src/xeq.c     **** 	i = 0;
 24417              		.loc 1 4353 9 is_stmt 0 view .LVU6335
 24418 0028 CDF87880 		str	r8, [sp, #120]
4354:src/xeq.c     **** 	while (i>=0) {
 24419              		.loc 1 4354 2 is_stmt 1 view .LVU6336
 24420              	.LVL1886:
4355:src/xeq.c     **** 		int L = beg[i];
 24421              		.loc 1 4355 2 view .LVU6337
4355:src/xeq.c     **** 		int L = beg[i];
 24422              		.loc 1 4355 8 view .LVU6338
4354:src/xeq.c     **** 	while (i>=0) {
 24423              		.loc 1 4354 4 is_stmt 0 view .LVU6339
 24424 002c 0746     		mov	r7, r0
 24425              	.LVL1887:
 24426              	.L1748:
ARM GAS  /tmp/ccaPnj5t.s 			page 633


 24427              	.LBB3352:
4356:src/xeq.c     **** 		int R = end[i] - 1;
 24428              		.loc 1 4356 3 is_stmt 1 view .LVU6340
4357:src/xeq.c     **** 		if (L<R) {
 24429              		.loc 1 4357 3 view .LVU6341
4357:src/xeq.c     **** 		if (L<R) {
 24430              		.loc 1 4357 7 is_stmt 0 view .LVU6342
 24431 002e 08F1FF34 		add	r4, r8, #-1
 24432              	.LVL1888:
4358:src/xeq.c     **** 			const int pvt = s + L;
 24433              		.loc 1 4358 3 is_stmt 1 view .LVU6343
4358:src/xeq.c     **** 			const int pvt = s + L;
 24434              		.loc 1 4358 6 is_stmt 0 view .LVU6344
 24435 0032 B442     		cmp	r4, r6
 24436 0034 0CDC     		bgt	.L1759
 24437              	.LVL1889:
 24438              	.L1737:
4391:src/xeq.c     **** 	}
 24439              		.loc 1 4391 4 is_stmt 1 view .LVU6345
 24440              	.LBE3352:
4355:src/xeq.c     **** 		int L = beg[i];
 24441              		.loc 1 4355 8 is_stmt 0 view .LVU6346
 24442 0036 013F     		subs	r7, r7, #1
 24443              	.LVL1890:
4355:src/xeq.c     **** 		int L = beg[i];
 24444              		.loc 1 4355 8 view .LVU6347
 24445 0038 F1D3     		bcc	.L1734
 24446 003a 28AB     		add	r3, sp, #160
 24447 003c 03EB8703 		add	r3, r3, r7, lsl #2
 24448 0040 53F8288C 		ldr	r8, [r3, #-40]
 24449 0044 53F8506C 		ldr	r6, [r3, #-80]
 24450              	.LVL1891:
 24451              	.LBB3355:
4356:src/xeq.c     **** 		int R = end[i] - 1;
 24452              		.loc 1 4356 3 is_stmt 1 view .LVU6348
4357:src/xeq.c     **** 		if (L<R) {
 24453              		.loc 1 4357 3 view .LVU6349
4357:src/xeq.c     **** 		if (L<R) {
 24454              		.loc 1 4357 7 is_stmt 0 view .LVU6350
 24455 0048 08F1FF34 		add	r4, r8, #-1
 24456              	.LVL1892:
4358:src/xeq.c     **** 			const int pvt = s + L;
 24457              		.loc 1 4358 3 is_stmt 1 view .LVU6351
4358:src/xeq.c     **** 			const int pvt = s + L;
 24458              		.loc 1 4358 6 is_stmt 0 view .LVU6352
 24459 004c B442     		cmp	r4, r6
 24460 004e F2DD     		ble	.L1737
 24461              	.LVL1893:
 24462              	.L1759:
 24463              	.LBB3353:
4359:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24464              		.loc 1 4359 4 is_stmt 1 view .LVU6353
4360:src/xeq.c     **** 			while (L<R) {
 24465              		.loc 1 4360 4 view .LVU6354
4359:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24466              		.loc 1 4359 14 is_stmt 0 view .LVU6355
 24467 0050 0099     		ldr	r1, [sp]
ARM GAS  /tmp/ccaPnj5t.s 			page 634


4360:src/xeq.c     **** 			while (L<R) {
 24468              		.loc 1 4360 4 view .LVU6356
 24469 0052 02A8     		add	r0, sp, #8
 24470 0054 3144     		add	r1, r1, r6
 24471              	.LVL1894:
4360:src/xeq.c     **** 			while (L<R) {
 24472              		.loc 1 4360 4 view .LVU6357
 24473 0056 FFF7FEFF 		bl	getRegister
 24474              	.LVL1895:
4361:src/xeq.c     **** 				while (L<R) {
 24475              		.loc 1 4361 4 is_stmt 1 view .LVU6358
4361:src/xeq.c     **** 				while (L<R) {
 24476              		.loc 1 4361 10 view .LVU6359
4360:src/xeq.c     **** 			while (L<R) {
 24477              		.loc 1 4360 4 is_stmt 0 view .LVU6360
 24478 005a B146     		mov	r9, r6
 24479              	.L1740:
4363:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
 24480              		.loc 1 4363 6 is_stmt 1 view .LVU6361
 24481 005c 0099     		ldr	r1, [sp]
 24482 005e 0BA8     		add	r0, sp, #44
 24483 0060 2144     		add	r1, r1, r4
 24484 0062 FFF7FEFF 		bl	getRegister
 24485              	.LVL1896:
4364:src/xeq.c     **** 						break;
 24486              		.loc 1 4364 6 view .LVU6362
4364:src/xeq.c     **** 						break;
 24487              		.loc 1 4364 10 is_stmt 0 view .LVU6363
 24488 0066 02A9     		add	r1, sp, #8
 24489 0068 0BA8     		add	r0, sp, #44
 24490 006a FFF7FEFF 		bl	dn_lt
 24491              	.LVL1897:
4366:src/xeq.c     **** 				}
 24492              		.loc 1 4366 6 is_stmt 1 view .LVU6364
4364:src/xeq.c     **** 						break;
 24493              		.loc 1 4364 9 is_stmt 0 view .LVU6365
 24494 006e 00BB     		cbnz	r0, .L1739
4366:src/xeq.c     **** 				}
 24495              		.loc 1 4366 7 view .LVU6366
 24496 0070 013C     		subs	r4, r4, #1
 24497              	.LVL1898:
4362:src/xeq.c     **** 					getRegister(&a, s + R);
 24498              		.loc 1 4362 11 is_stmt 1 view .LVU6367
 24499 0072 4C45     		cmp	r4, r9
 24500 0074 F2DC     		bgt	.L1740
 24501              	.L1741:
 24502              	.LVL1899:
4370:src/xeq.c     **** 					getRegister(&a, s + L);
 24503              		.loc 1 4370 11 is_stmt 0 view .LVU6368
 24504 0076 4D46     		mov	r5, r9
 24505              	.LVL1900:
4361:src/xeq.c     **** 				while (L<R) {
 24506              		.loc 1 4361 10 is_stmt 1 view .LVU6369
 24507              	.L1749:
4379:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
 24508              		.loc 1 4379 4 view .LVU6370
 24509 0078 0098     		ldr	r0, [sp]
ARM GAS  /tmp/ccaPnj5t.s 			page 635


 24510 007a 02A9     		add	r1, sp, #8
 24511 007c 2844     		add	r0, r0, r5
 24512 007e FFF7FEFF 		bl	setRegister
 24513              	.LVL1901:
4380:src/xeq.c     **** 				beg[i+1] = beg[i];
 24514              		.loc 1 4380 4 view .LVU6371
4380:src/xeq.c     **** 				beg[i+1] = beg[i];
 24515              		.loc 1 4380 32 is_stmt 0 view .LVU6372
 24516 0082 6B1C     		adds	r3, r5, #1
4380:src/xeq.c     **** 				beg[i+1] = beg[i];
 24517              		.loc 1 4380 28 view .LVU6373
 24518 0084 A8EB0302 		sub	r2, r8, r3
4380:src/xeq.c     **** 				beg[i+1] = beg[i];
 24519              		.loc 1 4380 10 view .LVU6374
 24520 0088 A91B     		subs	r1, r5, r6
4380:src/xeq.c     **** 				beg[i+1] = beg[i];
 24521              		.loc 1 4380 7 view .LVU6375
 24522 008a 9142     		cmp	r1, r2
4381:src/xeq.c     **** 				end[i+1] = L;
 24523              		.loc 1 4381 10 view .LVU6376
 24524 008c 07F10101 		add	r1, r7, #1
4383:src/xeq.c     **** 			} else {
 24525              		.loc 1 4383 12 view .LVU6377
 24526 0090 28AA     		add	r2, sp, #160
 24527 0092 02EB8700 		add	r0, r2, r7, lsl #2
4381:src/xeq.c     **** 				end[i+1] = L;
 24528              		.loc 1 4381 14 view .LVU6378
 24529 0096 02EB8102 		add	r2, r2, r1, lsl #2
 24530 009a 0F46     		mov	r7, r1
 24531              	.LVL1902:
4380:src/xeq.c     **** 				beg[i+1] = beg[i];
 24532              		.loc 1 4380 7 view .LVU6379
 24533 009c 2DDA     		bge	.L1745
4381:src/xeq.c     **** 				end[i+1] = L;
 24534              		.loc 1 4381 5 is_stmt 1 view .LVU6380
4381:src/xeq.c     **** 				end[i+1] = L;
 24535              		.loc 1 4381 14 is_stmt 0 view .LVU6381
 24536 009e 42F8506C 		str	r6, [r2, #-80]
4382:src/xeq.c     **** 				beg[i] = L+1;
 24537              		.loc 1 4382 5 is_stmt 1 view .LVU6382
4383:src/xeq.c     **** 			} else {
 24538              		.loc 1 4383 12 is_stmt 0 view .LVU6383
 24539 00a2 40F8503C 		str	r3, [r0, #-80]
 24540 00a6 52F8506C 		ldr	r6, [r2, #-80]
4382:src/xeq.c     **** 				beg[i] = L+1;
 24541              		.loc 1 4382 14 view .LVU6384
 24542 00aa 42F8285C 		str	r5, [r2, #-40]
4383:src/xeq.c     **** 			} else {
 24543              		.loc 1 4383 5 is_stmt 1 view .LVU6385
 24544 00ae A846     		mov	r8, r5
 24545 00b0 BDE7     		b	.L1748
 24546              	.LVL1903:
 24547              	.L1739:
4368:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24548              		.loc 1 4368 5 view .LVU6386
4368:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24549              		.loc 1 4368 8 is_stmt 0 view .LVU6387
ARM GAS  /tmp/ccaPnj5t.s 			page 636


 24550 00b2 A145     		cmp	r9, r4
 24551 00b4 DFDA     		bge	.L1741
4369:src/xeq.c     **** 				while (L<R) {
 24552              		.loc 1 4369 6 is_stmt 1 view .LVU6388
 24553 00b6 0098     		ldr	r0, [sp]
4369:src/xeq.c     **** 				while (L<R) {
 24554              		.loc 1 4369 21 is_stmt 0 view .LVU6389
 24555 00b8 09F10105 		add	r5, r9, #1
 24556              	.LVL1904:
4369:src/xeq.c     **** 				while (L<R) {
 24557              		.loc 1 4369 6 view .LVU6390
 24558 00bc 0119     		adds	r1, r0, r4
 24559 00be 4844     		add	r0, r0, r9
 24560 00c0 FFF7FEFF 		bl	copyreg_n
 24561              	.LVL1905:
4370:src/xeq.c     **** 					getRegister(&a, s + L);
 24562              		.loc 1 4370 11 is_stmt 1 view .LVU6391
 24563 00c4 A542     		cmp	r5, r4
 24564 00c6 03DB     		blt	.L1743
 24565 00c8 21E0     		b	.L1750
 24566              	.L1760:
4374:src/xeq.c     **** 				}
 24567              		.loc 1 4374 7 is_stmt 0 view .LVU6392
 24568 00ca 0135     		adds	r5, r5, #1
 24569              	.LVL1906:
4370:src/xeq.c     **** 					getRegister(&a, s + L);
 24570              		.loc 1 4370 11 is_stmt 1 view .LVU6393
 24571 00cc A542     		cmp	r5, r4
 24572 00ce D3D0     		beq	.L1749
 24573              	.L1743:
4371:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
 24574              		.loc 1 4371 6 view .LVU6394
 24575 00d0 0099     		ldr	r1, [sp]
 24576 00d2 0BA8     		add	r0, sp, #44
 24577 00d4 2944     		add	r1, r1, r5
 24578 00d6 FFF7FEFF 		bl	getRegister
 24579              	.LVL1907:
4372:src/xeq.c     **** 						break;
 24580              		.loc 1 4372 6 view .LVU6395
4372:src/xeq.c     **** 						break;
 24581              		.loc 1 4372 10 is_stmt 0 view .LVU6396
 24582 00da 0BA9     		add	r1, sp, #44
 24583 00dc 02A8     		add	r0, sp, #8
 24584 00de FFF7FEFF 		bl	dn_lt
 24585              	.LVL1908:
4374:src/xeq.c     **** 				}
 24586              		.loc 1 4374 6 is_stmt 1 view .LVU6397
4372:src/xeq.c     **** 						break;
 24587              		.loc 1 4372 9 is_stmt 0 view .LVU6398
 24588 00e2 0028     		cmp	r0, #0
 24589 00e4 F1D0     		beq	.L1760
4376:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
 24590              		.loc 1 4376 5 is_stmt 1 view .LVU6399
4377:src/xeq.c     **** 			}
 24591              		.loc 1 4377 6 view .LVU6400
 24592 00e6 0098     		ldr	r0, [sp]
 24593 00e8 4119     		adds	r1, r0, r5
ARM GAS  /tmp/ccaPnj5t.s 			page 637


 24594 00ea 2044     		add	r0, r0, r4
4377:src/xeq.c     **** 			}
 24595              		.loc 1 4377 21 is_stmt 0 view .LVU6401
 24596 00ec 013C     		subs	r4, r4, #1
 24597              	.LVL1909:
4377:src/xeq.c     **** 			}
 24598              		.loc 1 4377 6 view .LVU6402
 24599 00ee FFF7FEFF 		bl	copyreg_n
 24600              	.LVL1910:
4361:src/xeq.c     **** 				while (L<R) {
 24601              		.loc 1 4361 10 is_stmt 1 view .LVU6403
 24602 00f2 A542     		cmp	r5, r4
 24603 00f4 C0DA     		bge	.L1749
 24604 00f6 A946     		mov	r9, r5
4362:src/xeq.c     **** 					getRegister(&a, s + R);
 24605              		.loc 1 4362 11 view .LVU6404
 24606 00f8 B0E7     		b	.L1740
 24607              	.LVL1911:
 24608              	.L1745:
4385:src/xeq.c     **** 				end[i+1] = end[i];
 24609              		.loc 1 4385 5 view .LVU6405
4386:src/xeq.c     **** 				end[i] = L;
 24610              		.loc 1 4386 14 is_stmt 0 view .LVU6406
 24611 00fa 42F8288C 		str	r8, [r2, #-40]
4387:src/xeq.c     **** 			}
 24612              		.loc 1 4387 12 view .LVU6407
 24613 00fe 40F8285C 		str	r5, [r0, #-40]
 24614 0102 52F8288C 		ldr	r8, [r2, #-40]
4385:src/xeq.c     **** 				end[i+1] = end[i];
 24615              		.loc 1 4385 14 view .LVU6408
 24616 0106 42F8503C 		str	r3, [r2, #-80]
4386:src/xeq.c     **** 				end[i] = L;
 24617              		.loc 1 4386 5 is_stmt 1 view .LVU6409
4387:src/xeq.c     **** 			}
 24618              		.loc 1 4387 5 view .LVU6410
4389:src/xeq.c     **** 		} else
 24619              		.loc 1 4389 4 view .LVU6411
 24620              	.LVL1912:
4389:src/xeq.c     **** 		} else
 24621              		.loc 1 4389 4 is_stmt 0 view .LVU6412
 24622              	.LBE3353:
 24623              	.LBE3355:
4355:src/xeq.c     **** 		int L = beg[i];
 24624              		.loc 1 4355 8 is_stmt 1 view .LVU6413
 24625              	.LBB3356:
 24626              	.LBB3354:
4387:src/xeq.c     **** 			}
 24627              		.loc 1 4387 12 is_stmt 0 view .LVU6414
 24628 010a 1E46     		mov	r6, r3
 24629 010c 8FE7     		b	.L1748
 24630              	.LVL1913:
 24631              	.L1750:
4370:src/xeq.c     **** 					getRegister(&a, s + L);
 24632              		.loc 1 4370 11 view .LVU6415
 24633 010e A946     		mov	r9, r5
 24634              	.LVL1914:
4370:src/xeq.c     **** 					getRegister(&a, s + L);
ARM GAS  /tmp/ccaPnj5t.s 			page 638


 24635              		.loc 1 4370 11 view .LVU6416
 24636 0110 4D46     		mov	r5, r9
 24637              	.LVL1915:
4361:src/xeq.c     **** 				while (L<R) {
 24638              		.loc 1 4361 10 is_stmt 1 view .LVU6417
 24639 0112 B1E7     		b	.L1749
 24640              	.LBE3354:
 24641              	.LBE3356:
 24642              		.cfi_endproc
 24643              	.LFE231:
 24645              		.section	.text.reset_volatile_state,"ax",%progbits
 24646              		.align	1
 24647              		.p2align 2,,3
 24648              		.global	reset_volatile_state
 24649              		.syntax unified
 24650              		.thumb
 24651              		.thumb_func
 24652              		.fpu fpv4-sp-d16
 24654              	reset_volatile_state:
 24655              	.LFB233:
4428:src/xeq.c     **** 	// extern int IntMaxWindow;
 24656              		.loc 1 4428 33 view -0
 24657              		.cfi_startproc
 24658              		@ args = 0, pretend = 0, frame = 0
 24659              		@ frame_needed = 0, uses_anonymous_args = 0
 24660              		@ link register save eliminated.
4431:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24661              		.loc 1 4431 2 view .LVU6419
4431:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24662              		.loc 1 4431 16 is_stmt 0 view .LVU6420
 24663 0000 034B     		ldr	r3, .L1762
 24664 0002 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
4432:src/xeq.c     **** }
 24665              		.loc 1 4432 15 view .LVU6421
 24666 0004 0021     		movs	r1, #0
4431:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24667              		.loc 1 4431 16 view .LVU6422
 24668 0006 6FF3C502 		bfc	r2, #3, #3
 24669 000a 1A75     		strb	r2, [r3, #20]
4432:src/xeq.c     **** }
 24670              		.loc 1 4432 2 is_stmt 1 view .LVU6423
4432:src/xeq.c     **** }
 24671              		.loc 1 4432 15 is_stmt 0 view .LVU6424
 24672 000c 5974     		strb	r1, [r3, #17]
4433:src/xeq.c     **** 
 24673              		.loc 1 4433 1 view .LVU6425
 24674 000e 7047     		bx	lr
 24675              	.L1763:
 24676              		.align	2
 24677              	.L1762:
 24678 0010 00000000 		.word	StateWhileOn
 24679              		.cfi_endproc
 24680              	.LFE233:
 24682              		.section	.rodata.busy.str1.4,"aMS",%progbits,1
 24683              		.align	2
 24684              	.LC7:
 24685 0000 57616974 		.ascii	"Wait...\000"
ARM GAS  /tmp/ccaPnj5t.s 			page 639


 24685      2E2E2E00 
 24686              		.section	.text.busy,"ax",%progbits
 24687              		.align	1
 24688              		.p2align 2,,3
 24689              		.global	busy
 24690              		.syntax unified
 24691              		.thumb
 24692              		.thumb_func
 24693              		.fpu fpv4-sp-d16
 24695              	busy:
 24696              	.LFB234:
4440:src/xeq.c     **** 	/*
 24697              		.loc 1 4440 1 is_stmt 1 view -0
 24698              		.cfi_startproc
 24699              		@ args = 0, pretend = 0, frame = 0
 24700              		@ frame_needed = 0, uses_anonymous_args = 0
 24701              		@ link register save eliminated.
4444:src/xeq.c     **** 
 24702              		.loc 1 4444 12 view .LVU6427
4449:src/xeq.c     **** 
 24703              		.loc 1 4449 17 view .LVU6428
4454:src/xeq.c     **** 		Busy = 1;
 24704              		.loc 1 4454 2 view .LVU6429
4454:src/xeq.c     **** 		Busy = 1;
 24705              		.loc 1 4454 6 is_stmt 0 view .LVU6430
 24706 0000 054A     		ldr	r2, .L1767
4454:src/xeq.c     **** 		Busy = 1;
 24707              		.loc 1 4454 15 view .LVU6431
 24708 0002 064B     		ldr	r3, .L1767+4
4454:src/xeq.c     **** 		Busy = 1;
 24709              		.loc 1 4454 12 view .LVU6432
 24710 0004 1168     		ldr	r1, [r2]
 24711 0006 1B68     		ldr	r3, [r3]
 24712 0008 1943     		orrs	r1, r1, r3
 24713 000a 00D0     		beq	.L1766
4458:src/xeq.c     **** 
 24714              		.loc 1 4458 1 view .LVU6433
 24715 000c 7047     		bx	lr
 24716              	.L1766:
 24717              	.LBB3359:
 24718              	.LBI3359:
4439:src/xeq.c     **** {
 24719              		.loc 1 4439 6 is_stmt 1 view .LVU6434
 24720              	.LBB3360:
4455:src/xeq.c     **** 		message("Wait...", NULL);
 24721              		.loc 1 4455 3 view .LVU6435
4455:src/xeq.c     **** 		message("Wait...", NULL);
 24722              		.loc 1 4455 8 is_stmt 0 view .LVU6436
 24723 000e 0123     		movs	r3, #1
4456:src/xeq.c     **** 	}
 24724              		.loc 1 4456 3 view .LVU6437
 24725 0010 0348     		ldr	r0, .L1767+8
4455:src/xeq.c     **** 		message("Wait...", NULL);
 24726              		.loc 1 4455 8 view .LVU6438
 24727 0012 1360     		str	r3, [r2]
4456:src/xeq.c     **** 	}
 24728              		.loc 1 4456 3 is_stmt 1 view .LVU6439
ARM GAS  /tmp/ccaPnj5t.s 			page 640


 24729 0014 FFF7FEBF 		b	message
 24730              	.LVL1916:
 24731              	.L1768:
 24732              		.align	2
 24733              	.L1767:
 24734 0018 00000000 		.word	Busy
 24735 001c 00000000 		.word	Running
 24736 0020 00000000 		.word	.LC7
 24737              	.LBE3360:
 24738              	.LBE3359:
 24739              		.cfi_endproc
 24740              	.LFE234:
 24742              		.section	.text.intMonadic,"ax",%progbits
 24743              		.align	1
 24744              		.p2align 2,,3
 24745              		.global	intMonadic
 24746              		.syntax unified
 24747              		.thumb
 24748              		.thumb_func
 24749              		.fpu fpv4-sp-d16
 24751              	intMonadic:
 24752              	.LVL1917:
 24753              	.LFB238:
4536:src/xeq.c     **** 	int s;
 24754              		.loc 1 4536 43 view -0
 24755              		.cfi_startproc
 24756              		@ args = 0, pretend = 0, frame = 80
 24757              		@ frame_needed = 0, uses_anonymous_args = 0
4537:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
 24758              		.loc 1 4537 2 view .LVU6441
4538:src/xeq.c     **** 	decNumber rx, r;
 24759              		.loc 1 4538 2 view .LVU6442
4536:src/xeq.c     **** 	int s;
 24760              		.loc 1 4536 43 is_stmt 0 view .LVU6443
 24761 0000 30B5     		push	{r4, r5, lr}
 24762              		.cfi_def_cfa_offset 12
 24763              		.cfi_offset 4, -12
 24764              		.cfi_offset 5, -8
 24765              		.cfi_offset 14, -4
 24766 0002 95B0     		sub	sp, sp, #84
 24767              		.cfi_def_cfa_offset 96
4538:src/xeq.c     **** 	decNumber rx, r;
 24768              		.loc 1 4538 30 view .LVU6444
 24769 0004 01AA     		add	r2, sp, #4
 24770 0006 FFF7FEFF 		bl	extract_value
 24771              	.LVL1918:
4540:src/xeq.c     **** 
 24772              		.loc 1 4540 19 view .LVU6445
 24773 000a 1E4A     		ldr	r2, .L1784
4542:src/xeq.c     **** 		bad_mode_error();
 24774              		.loc 1 4542 6 view .LVU6446
 24775 000c 1E4B     		ldr	r3, .L1784+4
4540:src/xeq.c     **** 
 24776              		.loc 1 4540 15 view .LVU6447
 24777 000e 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4542:src/xeq.c     **** 		bad_mode_error();
 24778              		.loc 1 4542 6 view .LVU6448
ARM GAS  /tmp/ccaPnj5t.s 			page 641


 24779 0010 04EB4404 		add	r4, r4, r4, lsl #1
 24780 0014 53F83440 		ldr	r4, [r3, r4, lsl #3]
 24781              	.LVL1919:
4539:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 24782              		.loc 1 4539 2 is_stmt 1 view .LVU6449
4540:src/xeq.c     **** 
 24783              		.loc 1 4540 2 view .LVU6450
4542:src/xeq.c     **** 		bad_mode_error();
 24784              		.loc 1 4542 2 view .LVU6451
4542:src/xeq.c     **** 		bad_mode_error();
 24785              		.loc 1 4542 5 is_stmt 0 view .LVU6452
 24786 0018 5CB1     		cbz	r4, .L1774
 24787              	.LBB3378:
4545:src/xeq.c     **** #ifndef REALBUILD
 24788              		.loc 1 4545 3 is_stmt 1 view .LVU6453
 24789              	.LVL1920:
4547:src/xeq.c     **** 			bad_mode_error();
 24790              		.loc 1 4547 3 view .LVU6454
 24791              	.LBB3379:
 24792              	.LBI3379:
4474:src/xeq.c     **** {
 24793              		.loc 1 4474 24 view .LVU6455
 24794              	.LBB3380:
4476:src/xeq.c     **** 	if (xp < xrom)
 24795              		.loc 1 4476 2 view .LVU6456
4477:src/xeq.c     **** 		return NULL;
 24796              		.loc 1 4477 5 is_stmt 0 view .LVU6457
 24797 001a 1C4B     		ldr	r3, .L1784+8
4476:src/xeq.c     **** 	if (xp < xrom)
 24798              		.loc 1 4476 59 view .LVU6458
 24799 001c 24F00102 		bic	r2, r4, #1
 24800              	.LVL1921:
4477:src/xeq.c     **** 		return NULL;
 24801              		.loc 1 4477 2 is_stmt 1 view .LVU6459
4477:src/xeq.c     **** 		return NULL;
 24802              		.loc 1 4477 5 is_stmt 0 view .LVU6460
 24803 0020 9A42     		cmp	r2, r3
 24804 0022 10D3     		bcc	.L1773
4481:src/xeq.c     **** 		return NULL;
 24805              		.loc 1 4481 2 is_stmt 1 view .LVU6461
4481:src/xeq.c     **** 		return NULL;
 24806              		.loc 1 4481 17 is_stmt 0 view .LVU6462
 24807 0024 1A4D     		ldr	r5, .L1784+12
 24808 0026 2D88     		ldrh	r5, [r5]
 24809 0028 03EB4503 		add	r3, r3, r5, lsl #1
4481:src/xeq.c     **** 		return NULL;
 24810              		.loc 1 4481 5 view .LVU6463
 24811 002c 9A42     		cmp	r2, r3
 24812 002e 0AD2     		bcs	.L1773
 24813              	.LVL1922:
4481:src/xeq.c     **** 		return NULL;
 24814              		.loc 1 4481 5 view .LVU6464
 24815              	.LBE3380:
 24816              	.LBE3379:
4547:src/xeq.c     **** 			bad_mode_error();
 24817              		.loc 1 4547 6 view .LVU6465
 24818 0030 4AB1     		cbz	r2, .L1773
ARM GAS  /tmp/ccaPnj5t.s 			page 642


 24819              	.LVL1923:
 24820              	.L1774:
4547:src/xeq.c     **** 			bad_mode_error();
 24821              		.loc 1 4547 6 view .LVU6466
 24822              	.LBE3378:
4543:src/xeq.c     **** 	else {
 24823              		.loc 1 4543 3 is_stmt 1 view .LVU6467
 24824              	.LBB3389:
 24825              	.LBI3389:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 24826              		.loc 1 569 6 view .LVU6468
 24827              	.LBE3389:
 570:src/xeq.c     **** }
 24828              		.loc 1 570 2 view .LVU6469
 24829              	.LBB3398:
 24830              	.LBB3390:
 24831              	.LBI3390:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24832              		.loc 1 540 5 view .LVU6470
 24833              	.LBB3391:
 541:src/xeq.c     **** 		Error = e;
 24834              		.loc 1 541 2 view .LVU6471
 541:src/xeq.c     **** 		Error = e;
 24835              		.loc 1 541 12 is_stmt 0 view .LVU6472
 24836 0032 184B     		ldr	r3, .L1784+16
 541:src/xeq.c     **** 		Error = e;
 24837              		.loc 1 541 5 view .LVU6473
 24838 0034 1A68     		ldr	r2, [r3]
 24839 0036 1AB1     		cbz	r2, .L1771
 24840              	.LVL1924:
 24841              	.L1782:
 24842              	.LBB3392:
 24843              	.LBB3393:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 24844              		.loc 1 543 3 is_stmt 1 view .LVU6474
 24845              	.LBE3393:
 24846              	.LBE3392:
 24847              	.LBE3391:
 24848              	.LBE3390:
 24849              	.LBE3398:
4561:src/xeq.c     **** }
 24850              		.loc 1 4561 9 is_stmt 0 view .LVU6475
 24851 0038 0020     		movs	r0, #0
 24852 003a 0146     		mov	r1, r0
4562:src/xeq.c     **** 
 24853              		.loc 1 4562 1 view .LVU6476
 24854 003c 15B0     		add	sp, sp, #84
 24855              		.cfi_remember_state
 24856              		.cfi_def_cfa_offset 12
 24857              		@ sp needed
 24858 003e 30BD     		pop	{r4, r5, pc}
 24859              	.LVL1925:
 24860              	.L1771:
 24861              		.cfi_restore_state
 24862              	.LBB3399:
 24863              	.LBB3397:
 24864              	.LBB3396:
ARM GAS  /tmp/ccaPnj5t.s 			page 643


 24865              	.LBB3395:
 24866              	.LBI3392:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24867              		.loc 1 540 5 is_stmt 1 view .LVU6477
 24868              	.LBB3394:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24869              		.loc 1 542 3 view .LVU6478
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24870              		.loc 1 542 9 is_stmt 0 view .LVU6479
 24871 0040 0D22     		movs	r2, #13
 24872 0042 1A60     		str	r2, [r3]
 24873 0044 F8E7     		b	.L1782
 24874              	.LVL1926:
 24875              	.L1773:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24876              		.loc 1 542 9 view .LVU6480
 24877              	.LBE3394:
 24878              	.LBE3395:
 24879              	.LBE3396:
 24880              	.LBE3397:
 24881              	.LBE3399:
 24882              	.LBB3400:
4552:src/xeq.c     **** 			if (s)
 24883              		.loc 1 4552 4 is_stmt 1 view .LVU6481
 24884 0046 0246     		mov	r2, r0
 24885 0048 0B46     		mov	r3, r1
 24886 004a 02A8     		add	r0, sp, #8
 24887              	.LVL1927:
4552:src/xeq.c     **** 			if (s)
 24888              		.loc 1 4552 4 is_stmt 0 view .LVU6482
 24889 004c FFF7FEFF 		bl	ullint_to_dn
 24890              	.LVL1928:
4553:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24891              		.loc 1 4553 4 is_stmt 1 view .LVU6483
4553:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24892              		.loc 1 4553 7 is_stmt 0 view .LVU6484
 24893 0050 019B     		ldr	r3, [sp, #4]
 24894 0052 8BB9     		cbnz	r3, .L1783
 24895              	.L1775:
4555:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24896              		.loc 1 4555 4 is_stmt 1 view .LVU6485
4555:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24897              		.loc 1 4555 16 is_stmt 0 view .LVU6486
 24898 0054 02A9     		add	r1, sp, #8
 24899 0056 0BA8     		add	r0, sp, #44
 24900 0058 A047     		blx	r4
 24901              	.LVL1929:
4555:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24902              		.loc 1 4555 7 view .LVU6487
 24903 005a 40B9     		cbnz	r0, .L1776
4556:src/xeq.c     **** 			else
 24904              		.loc 1 4556 5 is_stmt 1 view .LVU6488
 24905              	.LVL1930:
 24906              	.LBB3381:
 24907              	.LBI3381:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24908              		.loc 1 540 5 view .LVU6489
ARM GAS  /tmp/ccaPnj5t.s 			page 644


 24909              	.LBB3382:
 541:src/xeq.c     **** 		Error = e;
 24910              		.loc 1 541 2 view .LVU6490
 541:src/xeq.c     **** 		Error = e;
 24911              		.loc 1 541 12 is_stmt 0 view .LVU6491
 24912 005c 0D4B     		ldr	r3, .L1784+16
 541:src/xeq.c     **** 		Error = e;
 24913              		.loc 1 541 5 view .LVU6492
 24914 005e 1A68     		ldr	r2, [r3]
 24915 0060 002A     		cmp	r2, #0
 24916 0062 E9D1     		bne	.L1782
 24917              	.LVL1931:
 24918              	.LBB3383:
 24919              	.LBI3383:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24920              		.loc 1 540 5 is_stmt 1 view .LVU6493
 24921              	.LBB3384:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24922              		.loc 1 542 3 view .LVU6494
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24923              		.loc 1 542 9 is_stmt 0 view .LVU6495
 24924 0064 0122     		movs	r2, #1
 24925              	.LBE3384:
 24926              	.LBE3383:
 24927              	.LBE3382:
 24928              	.LBE3381:
 24929              	.LBE3400:
4561:src/xeq.c     **** }
 24930              		.loc 1 4561 9 view .LVU6496
 24931 0066 0146     		mov	r1, r0
 24932              	.LBB3401:
 24933              	.LBB3388:
 24934              	.LBB3387:
 24935              	.LBB3386:
 24936              	.LBB3385:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 24937              		.loc 1 542 9 view .LVU6497
 24938 0068 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 24939              		.loc 1 543 3 is_stmt 1 view .LVU6498
 24940              	.LBE3385:
 24941              	.LBE3386:
 24942              	.LBE3387:
 24943              	.LBE3388:
 24944              	.LBE3401:
4562:src/xeq.c     **** 
 24945              		.loc 1 4562 1 is_stmt 0 view .LVU6499
 24946 006a 15B0     		add	sp, sp, #84
 24947              		.cfi_remember_state
 24948              		.cfi_def_cfa_offset 12
 24949              		@ sp needed
 24950 006c 30BD     		pop	{r4, r5, pc}
 24951              	.LVL1932:
 24952              	.L1776:
 24953              		.cfi_restore_state
 24954              	.LBB3402:
4558:src/xeq.c     **** 		}
ARM GAS  /tmp/ccaPnj5t.s 			page 645


 24955              		.loc 1 4558 5 is_stmt 1 view .LVU6500
4558:src/xeq.c     **** 		}
 24956              		.loc 1 4558 12 is_stmt 0 view .LVU6501
 24957 006e 0BA8     		add	r0, sp, #44
 24958 0070 FFF7FEFF 		bl	intResult
 24959              	.LVL1933:
 24960              	.LBE3402:
4562:src/xeq.c     **** 
 24961              		.loc 1 4562 1 view .LVU6502
 24962 0074 15B0     		add	sp, sp, #84
 24963              		.cfi_remember_state
 24964              		.cfi_def_cfa_offset 12
 24965              		@ sp needed
 24966 0076 30BD     		pop	{r4, r5, pc}
 24967              	.LVL1934:
 24968              	.L1783:
 24969              		.cfi_restore_state
 24970              	.LBB3403:
4554:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
 24971              		.loc 1 4554 5 is_stmt 1 view .LVU6503
 24972 0078 02A9     		add	r1, sp, #8
 24973 007a 0846     		mov	r0, r1
 24974 007c FFF7FEFF 		bl	dn_minus
 24975              	.LVL1935:
 24976 0080 E8E7     		b	.L1775
 24977              	.L1785:
 24978 0082 00BF     		.align	2
 24979              	.L1784:
 24980 0084 00000000 		.word	XeqOpCode
 24981 0088 00000000 		.word	monfuncs
 24982 008c 00000000 		.word	xrom
 24983 0090 00000000 		.word	xrom_size
 24984 0094 00000000 		.word	Error
 24985              	.LBE3403:
 24986              		.cfi_endproc
 24987              	.LFE238:
 24989              		.section	.text.intDyadic,"ax",%progbits
 24990              		.align	1
 24991              		.p2align 2,,3
 24992              		.global	intDyadic
 24993              		.syntax unified
 24994              		.thumb
 24995              		.thumb_func
 24996              		.fpu fpv4-sp-d16
 24998              	intDyadic:
 24999              	.LVL1936:
 25000              	.LFB239:
4567:src/xeq.c     **** 	int sx, sy;
 25001              		.loc 1 4567 59 view -0
 25002              		.cfi_startproc
 25003              		@ args = 0, pretend = 0, frame = 120
 25004              		@ frame_needed = 0, uses_anonymous_args = 0
4568:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 25005              		.loc 1 4568 2 view .LVU6505
4569:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25006              		.loc 1 4569 2 view .LVU6506
4567:src/xeq.c     **** 	int sx, sy;
ARM GAS  /tmp/ccaPnj5t.s 			page 646


 25007              		.loc 1 4567 59 is_stmt 0 view .LVU6507
 25008 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25009              		.cfi_def_cfa_offset 24
 25010              		.cfi_offset 4, -24
 25011              		.cfi_offset 5, -20
 25012              		.cfi_offset 6, -16
 25013              		.cfi_offset 7, -12
 25014              		.cfi_offset 8, -8
 25015              		.cfi_offset 14, -4
 25016 0004 9EB0     		sub	sp, sp, #120
 25017              		.cfi_def_cfa_offset 144
4567:src/xeq.c     **** 	int sx, sy;
 25018              		.loc 1 4567 59 view .LVU6508
 25019 0006 0546     		mov	r5, r0
 25020 0008 0C46     		mov	r4, r1
4569:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25021              		.loc 1 4569 30 view .LVU6509
 25022 000a 1046     		mov	r0, r2
 25023              	.LVL1937:
4569:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25024              		.loc 1 4569 30 view .LVU6510
 25025 000c 1946     		mov	r1, r3
 25026 000e 01AA     		add	r2, sp, #4
 25027              	.LVL1938:
4569:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25028              		.loc 1 4569 30 view .LVU6511
 25029 0010 FFF7FEFF 		bl	extract_value
 25030              	.LVL1939:
4570:src/xeq.c     **** 	decNumber rx, ry, r;
 25031              		.loc 1 4570 30 view .LVU6512
 25032 0014 02AA     		add	r2, sp, #8
4569:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25033              		.loc 1 4569 30 view .LVU6513
 25034 0016 0B46     		mov	r3, r1
 25035 0018 0646     		mov	r6, r0
4570:src/xeq.c     **** 	decNumber rx, ry, r;
 25036              		.loc 1 4570 30 view .LVU6514
 25037 001a 2146     		mov	r1, r4
 25038 001c 2846     		mov	r0, r5
4569:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25039              		.loc 1 4569 30 view .LVU6515
 25040 001e 1D46     		mov	r5, r3
 25041              	.LVL1940:
4570:src/xeq.c     **** 	decNumber rx, ry, r;
 25042              		.loc 1 4570 2 is_stmt 1 view .LVU6516
4570:src/xeq.c     **** 	decNumber rx, ry, r;
 25043              		.loc 1 4570 30 is_stmt 0 view .LVU6517
 25044 0020 FFF7FEFF 		bl	extract_value
 25045              	.LVL1941:
4572:src/xeq.c     **** 
 25046              		.loc 1 4572 19 view .LVU6518
 25047 0024 264A     		ldr	r2, .L1806
4574:src/xeq.c     **** 		bad_mode_error();
 25048              		.loc 1 4574 6 view .LVU6519
 25049 0026 274B     		ldr	r3, .L1806+4
4572:src/xeq.c     **** 
 25050              		.loc 1 4572 15 view .LVU6520
ARM GAS  /tmp/ccaPnj5t.s 			page 647


 25051 0028 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4574:src/xeq.c     **** 		bad_mode_error();
 25052              		.loc 1 4574 6 view .LVU6521
 25053 002a 04EB4404 		add	r4, r4, r4, lsl #1
 25054 002e 53F83440 		ldr	r4, [r3, r4, lsl #3]
 25055              	.LVL1942:
4571:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 25056              		.loc 1 4571 2 is_stmt 1 view .LVU6522
4572:src/xeq.c     **** 
 25057              		.loc 1 4572 2 view .LVU6523
4574:src/xeq.c     **** 		bad_mode_error();
 25058              		.loc 1 4574 2 view .LVU6524
4574:src/xeq.c     **** 		bad_mode_error();
 25059              		.loc 1 4574 5 is_stmt 0 view .LVU6525
 25060 0032 6CB1     		cbz	r4, .L1791
 25061              	.LBB3421:
 25062              	.LBB3422:
 25063              	.LBB3423:
4477:src/xeq.c     **** 		return NULL;
 25064              		.loc 1 4477 5 view .LVU6526
 25065 0034 244B     		ldr	r3, .L1806+8
4476:src/xeq.c     **** 	if (xp < xrom)
 25066              		.loc 1 4476 59 view .LVU6527
 25067 0036 24F00102 		bic	r2, r4, #1
 25068              	.LVL1943:
4477:src/xeq.c     **** 		return NULL;
 25069              		.loc 1 4477 5 view .LVU6528
 25070 003a 9A42     		cmp	r2, r3
 25071 003c 0746     		mov	r7, r0
 25072 003e 8846     		mov	r8, r1
 25073              	.LBE3423:
 25074              	.LBE3422:
4577:src/xeq.c     **** 
 25075              		.loc 1 4577 3 is_stmt 1 view .LVU6529
 25076              	.LVL1944:
4580:src/xeq.c     **** 			bad_mode_error();
 25077              		.loc 1 4580 3 view .LVU6530
 25078              	.LBB3425:
 25079              	.LBI3422:
4474:src/xeq.c     **** {
 25080              		.loc 1 4474 24 view .LVU6531
 25081              	.LBB3424:
4476:src/xeq.c     **** 	if (xp < xrom)
 25082              		.loc 1 4476 2 view .LVU6532
4477:src/xeq.c     **** 		return NULL;
 25083              		.loc 1 4477 2 view .LVU6533
4477:src/xeq.c     **** 		return NULL;
 25084              		.loc 1 4477 5 is_stmt 0 view .LVU6534
 25085 0040 11D3     		bcc	.L1790
4481:src/xeq.c     **** 		return NULL;
 25086              		.loc 1 4481 2 is_stmt 1 view .LVU6535
4481:src/xeq.c     **** 		return NULL;
 25087              		.loc 1 4481 17 is_stmt 0 view .LVU6536
 25088 0042 2249     		ldr	r1, .L1806+12
 25089              	.LVL1945:
4481:src/xeq.c     **** 		return NULL;
 25090              		.loc 1 4481 17 view .LVU6537
ARM GAS  /tmp/ccaPnj5t.s 			page 648


 25091 0044 0988     		ldrh	r1, [r1]
 25092 0046 03EB4103 		add	r3, r3, r1, lsl #1
4481:src/xeq.c     **** 		return NULL;
 25093              		.loc 1 4481 5 view .LVU6538
 25094 004a 9A42     		cmp	r2, r3
 25095 004c 0BD2     		bcs	.L1790
 25096              	.LVL1946:
4481:src/xeq.c     **** 		return NULL;
 25097              		.loc 1 4481 5 view .LVU6539
 25098              	.LBE3424:
 25099              	.LBE3425:
4580:src/xeq.c     **** 			bad_mode_error();
 25100              		.loc 1 4580 6 view .LVU6540
 25101 004e 52B1     		cbz	r2, .L1790
 25102              	.LVL1947:
 25103              	.L1791:
4580:src/xeq.c     **** 			bad_mode_error();
 25104              		.loc 1 4580 6 view .LVU6541
 25105              	.LBE3421:
4575:src/xeq.c     **** 	else {
 25106              		.loc 1 4575 3 is_stmt 1 view .LVU6542
 25107              	.LBB3434:
 25108              	.LBI3434:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 25109              		.loc 1 569 6 view .LVU6543
 25110              	.LBE3434:
 570:src/xeq.c     **** }
 25111              		.loc 1 570 2 view .LVU6544
 25112              	.LBB3443:
 25113              	.LBB3435:
 25114              	.LBI3435:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25115              		.loc 1 540 5 view .LVU6545
 25116              	.LBB3436:
 541:src/xeq.c     **** 		Error = e;
 25117              		.loc 1 541 2 view .LVU6546
 541:src/xeq.c     **** 		Error = e;
 25118              		.loc 1 541 12 is_stmt 0 view .LVU6547
 25119 0050 1F4B     		ldr	r3, .L1806+16
 541:src/xeq.c     **** 		Error = e;
 25120              		.loc 1 541 5 view .LVU6548
 25121 0052 1A68     		ldr	r2, [r3]
 25122 0054 22B1     		cbz	r2, .L1788
 25123              	.LVL1948:
 25124              	.L1803:
 25125              	.LBB3437:
 25126              	.LBB3438:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 25127              		.loc 1 543 3 is_stmt 1 view .LVU6549
 25128              	.LBE3438:
 25129              	.LBE3437:
 25130              	.LBE3436:
 25131              	.LBE3435:
 25132              	.LBE3443:
4594:src/xeq.c     **** }
 25133              		.loc 1 4594 9 is_stmt 0 view .LVU6550
 25134 0056 0020     		movs	r0, #0
ARM GAS  /tmp/ccaPnj5t.s 			page 649


 25135 0058 0146     		mov	r1, r0
4595:src/xeq.c     **** 
 25136              		.loc 1 4595 1 view .LVU6551
 25137 005a 1EB0     		add	sp, sp, #120
 25138              		.cfi_remember_state
 25139              		.cfi_def_cfa_offset 24
 25140              		@ sp needed
 25141 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25142              	.LVL1949:
 25143              	.L1788:
 25144              		.cfi_restore_state
 25145              	.LBB3444:
 25146              	.LBB3442:
 25147              	.LBB3441:
 25148              	.LBB3440:
 25149              	.LBI3437:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25150              		.loc 1 540 5 is_stmt 1 view .LVU6552
 25151              	.LBB3439:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25152              		.loc 1 542 3 view .LVU6553
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25153              		.loc 1 542 9 is_stmt 0 view .LVU6554
 25154 0060 0D22     		movs	r2, #13
 25155 0062 1A60     		str	r2, [r3]
 25156 0064 F7E7     		b	.L1803
 25157              	.LVL1950:
 25158              	.L1790:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25159              		.loc 1 542 9 view .LVU6555
 25160              	.LBE3439:
 25161              	.LBE3440:
 25162              	.LBE3441:
 25163              	.LBE3442:
 25164              	.LBE3444:
 25165              	.LBB3445:
4585:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25166              		.loc 1 4585 4 is_stmt 1 view .LVU6556
 25167 0066 2B46     		mov	r3, r5
 25168 0068 3246     		mov	r2, r6
 25169 006a 03A8     		add	r0, sp, #12
 25170              	.LVL1951:
4585:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25171              		.loc 1 4585 4 is_stmt 0 view .LVU6557
 25172 006c FFF7FEFF 		bl	ullint_to_dn
 25173              	.LVL1952:
4585:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25174              		.loc 1 4585 27 is_stmt 1 view .LVU6558
4585:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25175              		.loc 1 4585 30 is_stmt 0 view .LVU6559
 25176 0070 019B     		ldr	r3, [sp, #4]
 25177 0072 03BB     		cbnz	r3, .L1804
 25178              	.L1792:
4586:src/xeq.c     **** 
 25179              		.loc 1 4586 4 is_stmt 1 view .LVU6560
 25180 0074 4346     		mov	r3, r8
 25181 0076 3A46     		mov	r2, r7
ARM GAS  /tmp/ccaPnj5t.s 			page 650


 25182 0078 0CA8     		add	r0, sp, #48
 25183 007a FFF7FEFF 		bl	ullint_to_dn
 25184              	.LVL1953:
4586:src/xeq.c     **** 
 25185              		.loc 1 4586 27 view .LVU6561
4586:src/xeq.c     **** 
 25186              		.loc 1 4586 30 is_stmt 0 view .LVU6562
 25187 007e 029B     		ldr	r3, [sp, #8]
 25188 0080 A3B9     		cbnz	r3, .L1805
 25189              	.L1793:
4588:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25190              		.loc 1 4588 4 is_stmt 1 view .LVU6563
4588:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25191              		.loc 1 4588 16 is_stmt 0 view .LVU6564
 25192 0082 03AA     		add	r2, sp, #12
 25193 0084 0CA9     		add	r1, sp, #48
 25194 0086 15A8     		add	r0, sp, #84
 25195 0088 A047     		blx	r4
 25196              	.LVL1954:
4588:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25197              		.loc 1 4588 7 view .LVU6565
 25198 008a 48B9     		cbnz	r0, .L1794
4589:src/xeq.c     **** 			else
 25199              		.loc 1 4589 5 is_stmt 1 view .LVU6566
 25200              	.LVL1955:
 25201              	.LBB3426:
 25202              	.LBI3426:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25203              		.loc 1 540 5 view .LVU6567
 25204              	.LBB3427:
 541:src/xeq.c     **** 		Error = e;
 25205              		.loc 1 541 2 view .LVU6568
 541:src/xeq.c     **** 		Error = e;
 25206              		.loc 1 541 12 is_stmt 0 view .LVU6569
 25207 008c 104B     		ldr	r3, .L1806+16
 541:src/xeq.c     **** 		Error = e;
 25208              		.loc 1 541 5 view .LVU6570
 25209 008e 1A68     		ldr	r2, [r3]
 25210 0090 002A     		cmp	r2, #0
 25211 0092 E0D1     		bne	.L1803
 25212              	.LVL1956:
 25213              	.LBB3428:
 25214              	.LBI3428:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25215              		.loc 1 540 5 is_stmt 1 view .LVU6571
 25216              	.LBB3429:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25217              		.loc 1 542 3 view .LVU6572
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25218              		.loc 1 542 9 is_stmt 0 view .LVU6573
 25219 0094 0122     		movs	r2, #1
 25220              	.LBE3429:
 25221              	.LBE3428:
 25222              	.LBE3427:
 25223              	.LBE3426:
 25224              	.LBE3445:
4594:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 651


 25225              		.loc 1 4594 9 view .LVU6574
 25226 0096 0146     		mov	r1, r0
 25227              	.LBB3446:
 25228              	.LBB3433:
 25229              	.LBB3432:
 25230              	.LBB3431:
 25231              	.LBB3430:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25232              		.loc 1 542 9 view .LVU6575
 25233 0098 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 25234              		.loc 1 543 3 is_stmt 1 view .LVU6576
 25235              	.LBE3430:
 25236              	.LBE3431:
 25237              	.LBE3432:
 25238              	.LBE3433:
 25239              	.LBE3446:
4595:src/xeq.c     **** 
 25240              		.loc 1 4595 1 is_stmt 0 view .LVU6577
 25241 009a 1EB0     		add	sp, sp, #120
 25242              		.cfi_remember_state
 25243              		.cfi_def_cfa_offset 24
 25244              		@ sp needed
 25245 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25246              	.LVL1957:
 25247              	.L1794:
 25248              		.cfi_restore_state
 25249              	.LBB3447:
4591:src/xeq.c     **** 		}
 25250              		.loc 1 4591 5 is_stmt 1 view .LVU6578
4591:src/xeq.c     **** 		}
 25251              		.loc 1 4591 12 is_stmt 0 view .LVU6579
 25252 00a0 15A8     		add	r0, sp, #84
 25253 00a2 FFF7FEFF 		bl	intResult
 25254              	.LVL1958:
 25255              	.LBE3447:
4595:src/xeq.c     **** 
 25256              		.loc 1 4595 1 view .LVU6580
 25257 00a6 1EB0     		add	sp, sp, #120
 25258              		.cfi_remember_state
 25259              		.cfi_def_cfa_offset 24
 25260              		@ sp needed
 25261 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25262              	.LVL1959:
 25263              	.L1805:
 25264              		.cfi_restore_state
 25265              	.LBB3448:
4586:src/xeq.c     **** 
 25266              		.loc 1 4586 35 is_stmt 1 discriminator 1 view .LVU6581
 25267 00ac 0CA9     		add	r1, sp, #48
 25268 00ae 0846     		mov	r0, r1
 25269 00b0 FFF7FEFF 		bl	dn_minus
 25270              	.LVL1960:
 25271 00b4 E5E7     		b	.L1793
 25272              	.L1804:
4585:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25273              		.loc 1 4585 35 discriminator 1 view .LVU6582
ARM GAS  /tmp/ccaPnj5t.s 			page 652


 25274 00b6 03A9     		add	r1, sp, #12
 25275 00b8 0846     		mov	r0, r1
 25276 00ba FFF7FEFF 		bl	dn_minus
 25277              	.LVL1961:
 25278 00be D9E7     		b	.L1792
 25279              	.L1807:
 25280              		.align	2
 25281              	.L1806:
 25282 00c0 00000000 		.word	XeqOpCode
 25283 00c4 00000000 		.word	dyfuncs
 25284 00c8 00000000 		.word	xrom
 25285 00cc 00000000 		.word	xrom_size
 25286 00d0 00000000 		.word	Error
 25287              	.LBE3448:
 25288              		.cfi_endproc
 25289              	.LFE239:
 25291              		.section	.text.xeq_init_contexts,"ax",%progbits
 25292              		.align	1
 25293              		.p2align 2,,3
 25294              		.global	xeq_init_contexts
 25295              		.syntax unified
 25296              		.thumb
 25297              		.thumb_func
 25298              		.fpu fpv4-sp-d16
 25300              	xeq_init_contexts:
 25301              	.LFB256:
5600:src/xeq.c     **** 	/*
 25302              		.loc 1 5600 30 view -0
 25303              		.cfi_startproc
 25304              		@ args = 0, pretend = 0, frame = 0
 25305              		@ frame_needed = 0, uses_anonymous_args = 0
5604:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
 25306              		.loc 1 5604 2 view .LVU6584
5605:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25307              		.loc 1 5605 2 view .LVU6585
5600:src/xeq.c     **** 	/*
 25308              		.loc 1 5600 30 is_stmt 0 view .LVU6586
 25309 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 25310              		.cfi_def_cfa_offset 24
 25311              		.cfi_offset 3, -24
 25312              		.cfi_offset 4, -20
 25313              		.cfi_offset 5, -16
 25314              		.cfi_offset 6, -12
 25315              		.cfi_offset 7, -8
 25316              		.cfi_offset 14, -4
5605:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25317              		.loc 1 5605 17 view .LVU6587
 25318 0002 1D4B     		ldr	r3, .L1813
5608:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25319              		.loc 1 5608 13 view .LVU6588
 25320 0004 1D4F     		ldr	r7, .L1813+4
5605:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25321              		.loc 1 5605 17 view .LVU6589
 25322 0006 1A68     		ldr	r2, [r3]
5605:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25323              		.loc 1 5605 34 view .LVU6590
 25324 0008 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
ARM GAS  /tmp/ccaPnj5t.s 			page 653


5606:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25325              		.loc 1 5606 21 view .LVU6591
 25326 000c 92F8CF17 		ldrb	r1, [r2, #1999]	@ zero_extendqisi2
5608:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25327              		.loc 1 5608 36 view .LVU6592
 25328 0010 5088     		ldrh	r0, [r2, #2]
5610:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25329              		.loc 1 5610 34 view .LVU6593
 25330 0012 B2F9E247 		ldrsh	r4, [r2, #2018]
5605:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25331              		.loc 1 5605 59 view .LVU6594
 25332 0016 13F02003 		ands	r3, r3, #32
 25333 001a 18BF     		it	ne
 25334 001c 4623     		movne	r3, #70
5606:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25335              		.loc 1 5606 19 view .LVU6595
 25336 001e C1F16401 		rsb	r1, r1, #100
5605:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25337              		.loc 1 5605 59 view .LVU6596
 25338 0022 1E46     		mov	r6, r3
5606:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25339              		.loc 1 5606 36 view .LVU6597
 25340 0024 C3EB8103 		rsb	r3, r3, r1, lsl #2
5609:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25341              		.loc 1 5609 31 view .LVU6598
 25342 0028 03F20E21 		addw	r1, r3, #526
 25343 002c 89B2     		uxth	r1, r1
5610:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25344              		.loc 1 5610 21 view .LVU6599
 25345 002e 0D1A     		subs	r5, r1, r0
5607:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25346              		.loc 1 5607 22 view .LVU6600
 25347 0030 03F50573 		add	r3, r3, #532
5608:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25348              		.loc 1 5608 34 view .LVU6601
 25349 0034 181A     		subs	r0, r3, r0
5610:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25350              		.loc 1 5610 32 view .LVU6602
 25351 0036 2544     		add	r5, r5, r4
5607:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25352              		.loc 1 5607 11 view .LVU6603
 25353 0038 141D     		adds	r4, r2, #4
5608:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25354              		.loc 1 5608 13 view .LVU6604
 25355 003a 3860     		str	r0, [r7]
5607:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25356              		.loc 1 5607 22 view .LVU6605
 25357 003c 04EB4303 		add	r3, r4, r3, lsl #1
5605:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25358              		.loc 1 5605 15 view .LVU6606
 25359 0040 0F48     		ldr	r0, .L1813+8
5607:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25360              		.loc 1 5607 9 view .LVU6607
 25361 0042 104C     		ldr	r4, .L1813+12
5610:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25362              		.loc 1 5610 11 view .LVU6608
 25363 0044 104F     		ldr	r7, .L1813+16
ARM GAS  /tmp/ccaPnj5t.s 			page 654


5607:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25364              		.loc 1 5607 9 view .LVU6609
 25365 0046 2360     		str	r3, [r4]
5605:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25366              		.loc 1 5605 15 view .LVU6610
 25367 0048 0660     		str	r6, [r0]
5606:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25368              		.loc 1 5606 2 is_stmt 1 view .LVU6611
 25369              	.LVL1962:
5607:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25370              		.loc 1 5607 2 view .LVU6612
5608:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25371              		.loc 1 5608 2 view .LVU6613
5609:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25372              		.loc 1 5609 2 view .LVU6614
5609:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25373              		.loc 1 5609 10 is_stmt 0 view .LVU6615
 25374 004a 1180     		strh	r1, [r2]	@ movhi
5610:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25375              		.loc 1 5610 2 is_stmt 1 view .LVU6616
5611:src/xeq.c     **** 
 25376              		.loc 1 5611 14 is_stmt 0 view .LVU6617
 25377 004c 6420     		movs	r0, #100
5610:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25378              		.loc 1 5610 11 view .LVU6618
 25379 004e 3D60     		str	r5, [r7]
5611:src/xeq.c     **** 
 25380              		.loc 1 5611 2 is_stmt 1 view .LVU6619
5611:src/xeq.c     **** 
 25381              		.loc 1 5611 14 is_stmt 0 view .LVU6620
 25382 0050 FFF7FEFF 		bl	get_reg_n
 25383              	.LVL1963:
5617:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25384              		.loc 1 5617 2 view .LVU6621
 25385 0054 0D4C     		ldr	r4, .L1813+20
5611:src/xeq.c     **** 
 25386              		.loc 1 5611 12 view .LVU6622
 25387 0056 0E4B     		ldr	r3, .L1813+24
5611:src/xeq.c     **** 
 25388              		.loc 1 5611 14 view .LVU6623
 25389 0058 0246     		mov	r2, r0
5617:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25390              		.loc 1 5617 2 view .LVU6624
 25391 005a 0021     		movs	r1, #0
 25392 005c 2046     		mov	r0, r4
5611:src/xeq.c     **** 
 25393              		.loc 1 5611 12 view .LVU6625
 25394 005e 1A60     		str	r2, [r3]
5617:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25395              		.loc 1 5617 2 is_stmt 1 view .LVU6626
 25396 0060 FFF7FEFF 		bl	decContextDefault
 25397              	.LVL1964:
5618:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25398              		.loc 1 5618 2 view .LVU6627
5618:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25399              		.loc 1 5618 13 is_stmt 0 view .LVU6628
 25400 0064 2723     		movs	r3, #39
ARM GAS  /tmp/ccaPnj5t.s 			page 655


5619:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25401              		.loc 1 5619 10 view .LVU6629
 25402 0066 0B49     		ldr	r1, .L1813+28
5620:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25403              		.loc 1 5620 10 view .LVU6630
 25404 0068 0B4A     		ldr	r2, .L1813+32
5618:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25405              		.loc 1 5618 13 view .LVU6631
 25406 006a 2360     		str	r3, [r4]
5619:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25407              		.loc 1 5619 2 is_stmt 1 view .LVU6632
5621:src/xeq.c     **** }
 25408              		.loc 1 5621 12 is_stmt 0 view .LVU6633
 25409 006c 0323     		movs	r3, #3
 25410 006e 2373     		strb	r3, [r4, #12]
5620:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25411              		.loc 1 5620 10 view .LVU6634
 25412 0070 C4E90112 		strd	r1, r2, [r4, #4]
5621:src/xeq.c     **** }
 25413              		.loc 1 5621 2 is_stmt 1 view .LVU6635
5622:src/xeq.c     **** 
 25414              		.loc 1 5622 1 is_stmt 0 view .LVU6636
 25415 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25416              	.L1814:
 25417 0076 00BF     		.align	2
 25418              	.L1813:
 25419 0078 00000000 		.word	main_ram
 25420 007c 00000000 		.word	RetStkSize
 25421 0080 00000000 		.word	SizeStatRegs
 25422 0084 00000000 		.word	RetStk
 25423 0088 00000000 		.word	ProgFree
 25424 008c 00000000 		.word	Ctx
 25425 0090 00000000 		.word	StackBase
 25426 0094 3F420F00 		.word	999999
 25427 0098 C1BDF0FF 		.word	-999999
 25428              		.cfi_endproc
 25429              	.LFE256:
 25431              		.section	.text.not_running,"ax",%progbits
 25432              		.align	1
 25433              		.p2align 2,,3
 25434              		.global	not_running
 25435              		.syntax unified
 25436              		.thumb
 25437              		.thumb_func
 25438              		.fpu fpv4-sp-d16
 25440              	not_running:
 25441              	.LFB257:
5770:src/xeq.c     **** 	if ( Running ) {
 25442              		.loc 1 5770 23 is_stmt 1 view -0
 25443              		.cfi_startproc
 25444              		@ args = 0, pretend = 0, frame = 0
 25445              		@ frame_needed = 0, uses_anonymous_args = 0
 25446              		@ link register save eliminated.
5771:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25447              		.loc 1 5771 2 view .LVU6638
5771:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25448              		.loc 1 5771 7 is_stmt 0 view .LVU6639
ARM GAS  /tmp/ccaPnj5t.s 			page 656


 25449 0000 064B     		ldr	r3, .L1820
5771:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25450              		.loc 1 5771 5 view .LVU6640
 25451 0002 1B68     		ldr	r3, [r3]
 25452 0004 0BB9     		cbnz	r3, .L1819
5775:src/xeq.c     **** }
 25453              		.loc 1 5775 9 view .LVU6641
 25454 0006 0120     		movs	r0, #1
 25455 0008 7047     		bx	lr
 25456              	.L1819:
5772:src/xeq.c     **** 		return 0;
 25457              		.loc 1 5772 3 is_stmt 1 view .LVU6642
 25458              	.LVL1965:
 25459              	.LBB3453:
 25460              	.LBI3453:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25461              		.loc 1 540 5 view .LVU6643
 25462              	.LBB3454:
 541:src/xeq.c     **** 		Error = e;
 25463              		.loc 1 541 2 view .LVU6644
 541:src/xeq.c     **** 		Error = e;
 25464              		.loc 1 541 12 is_stmt 0 view .LVU6645
 25465 000a 054B     		ldr	r3, .L1820+4
 25466 000c 1868     		ldr	r0, [r3]
 541:src/xeq.c     **** 		Error = e;
 25467              		.loc 1 541 5 view .LVU6646
 25468 000e 10B9     		cbnz	r0, .L1818
 25469              	.LVL1966:
 25470              	.LBB3455:
 25471              	.LBI3455:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25472              		.loc 1 540 5 is_stmt 1 view .LVU6647
 25473              	.LBB3456:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25474              		.loc 1 542 3 view .LVU6648
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25475              		.loc 1 542 9 is_stmt 0 view .LVU6649
 25476 0010 0722     		movs	r2, #7
 25477 0012 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 25478              		.loc 1 543 3 is_stmt 1 view .LVU6650
 25479 0014 7047     		bx	lr
 25480              	.LVL1967:
 25481              	.L1818:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 25482              		.loc 1 543 3 is_stmt 0 view .LVU6651
 25483              	.LBE3456:
 25484              	.LBE3455:
 25485              	.LBE3454:
 25486              	.LBE3453:
5773:src/xeq.c     **** 	}
 25487              		.loc 1 5773 10 view .LVU6652
 25488 0016 0020     		movs	r0, #0
 25489              	.LVL1968:
5776:src/xeq.c     **** 
 25490              		.loc 1 5776 1 view .LVU6653
 25491 0018 7047     		bx	lr
ARM GAS  /tmp/ccaPnj5t.s 			page 657


 25492              	.L1821:
 25493 001a 00BF     		.align	2
 25494              	.L1820:
 25495 001c 00000000 		.word	Running
 25496 0020 00000000 		.word	Error
 25497              		.cfi_endproc
 25498              	.LFE257:
 25500              		.section	.text.set_running_off_sst,"ax",%progbits
 25501              		.align	1
 25502              		.p2align 2,,3
 25503              		.global	set_running_off_sst
 25504              		.syntax unified
 25505              		.thumb
 25506              		.thumb_func
 25507              		.fpu fpv4-sp-d16
 25509              	set_running_off_sst:
 25510              	.LFB258:
5781:src/xeq.c     **** 	Running = 0;
 25511              		.loc 1 5781 28 is_stmt 1 view -0
 25512              		.cfi_startproc
 25513              		@ args = 0, pretend = 0, frame = 0
 25514              		@ frame_needed = 0, uses_anonymous_args = 0
 25515              		@ link register save eliminated.
5782:src/xeq.c     **** }
 25516              		.loc 1 5782 2 view .LVU6655
5782:src/xeq.c     **** }
 25517              		.loc 1 5782 10 is_stmt 0 view .LVU6656
 25518 0000 014B     		ldr	r3, .L1823
 25519 0002 0022     		movs	r2, #0
 25520 0004 1A60     		str	r2, [r3]
5783:src/xeq.c     **** 
 25521              		.loc 1 5783 1 view .LVU6657
 25522 0006 7047     		bx	lr
 25523              	.L1824:
 25524              		.align	2
 25525              	.L1823:
 25526 0008 00000000 		.word	Running
 25527              		.cfi_endproc
 25528              	.LFE258:
 25530              		.section	.text.set_running_on_sst,"ax",%progbits
 25531              		.align	1
 25532              		.p2align 2,,3
 25533              		.global	set_running_on_sst
 25534              		.syntax unified
 25535              		.thumb
 25536              		.thumb_func
 25537              		.fpu fpv4-sp-d16
 25539              	set_running_on_sst:
 25540              	.LFB259:
5785:src/xeq.c     **** 	Running = 1;
 25541              		.loc 1 5785 27 is_stmt 1 view -0
 25542              		.cfi_startproc
 25543              		@ args = 0, pretend = 0, frame = 0
 25544              		@ frame_needed = 0, uses_anonymous_args = 0
 25545              		@ link register save eliminated.
5786:src/xeq.c     **** }
 25546              		.loc 1 5786 2 view .LVU6659
ARM GAS  /tmp/ccaPnj5t.s 			page 658


5786:src/xeq.c     **** }
 25547              		.loc 1 5786 10 is_stmt 0 view .LVU6660
 25548 0000 014B     		ldr	r3, .L1826
 25549 0002 0122     		movs	r2, #1
 25550 0004 1A60     		str	r2, [r3]
5787:src/xeq.c     **** 
 25551              		.loc 1 5787 1 view .LVU6661
 25552 0006 7047     		bx	lr
 25553              	.L1827:
 25554              		.align	2
 25555              	.L1826:
 25556 0008 00000000 		.word	Running
 25557              		.cfi_endproc
 25558              	.LFE259:
 25560              		.section	.text.set_running_off,"ax",%progbits
 25561              		.align	1
 25562              		.p2align 2,,3
 25563              		.global	set_running_off
 25564              		.syntax unified
 25565              		.thumb
 25566              		.thumb_func
 25567              		.fpu fpv4-sp-d16
 25569              	set_running_off:
 25570              	.LFB260:
5789:src/xeq.c     **** 	set_running_off_sst();
 25571              		.loc 1 5789 24 is_stmt 1 view -0
 25572              		.cfi_startproc
 25573              		@ args = 0, pretend = 0, frame = 0
 25574              		@ frame_needed = 0, uses_anonymous_args = 0
 25575              		@ link register save eliminated.
5790:src/xeq.c     **** 	State.entryp = 0;
 25576              		.loc 1 5790 2 view .LVU6663
 25577              	.LBB3457:
 25578              	.LBI3457:
5781:src/xeq.c     **** 	Running = 0;
 25579              		.loc 1 5781 6 view .LVU6664
 25580              	.LBB3458:
5782:src/xeq.c     **** }
 25581              		.loc 1 5782 2 view .LVU6665
 25582              	.LBE3458:
 25583              	.LBE3457:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 25584              		.loc 1 5791 15 is_stmt 0 view .LVU6666
 25585 0000 064B     		ldr	r3, .L1829
 25586              	.LBB3461:
 25587              	.LBB3459:
5782:src/xeq.c     **** }
 25588              		.loc 1 5782 10 view .LVU6667
 25589 0002 074A     		ldr	r2, .L1829+4
 25590              	.LBE3459:
 25591              	.LBE3461:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 25592              		.loc 1 5791 15 view .LVU6668
 25593 0004 1B68     		ldr	r3, [r3]
 25594              	.LBB3462:
 25595              	.LBB3460:
5782:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 659


 25596              		.loc 1 5782 10 view .LVU6669
 25597 0006 0021     		movs	r1, #0
 25598 0008 1160     		str	r1, [r2]
 25599              	.LBE3460:
 25600              	.LBE3462:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 25601              		.loc 1 5791 2 is_stmt 1 view .LVU6670
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 25602              		.loc 1 5791 15 is_stmt 0 view .LVU6671
 25603 000a 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 25604 000e 61F30412 		bfi	r2, r1, #4, #1
 25605 0012 83F8DD27 		strb	r2, [r3, #2013]
 25606              		.loc 1 5792 2 is_stmt 1 view .LVU6672
 25607 0016 8A20     		movs	r0, #138
 25608 0018 FFF7FEBF 		b	dot
 25609              	.LVL1969:
 25610              	.L1830:
 25611              		.align	2
 25612              	.L1829:
 25613 001c 00000000 		.word	main_ram
 25614 0020 00000000 		.word	Running
 25615              		.cfi_endproc
 25616              	.LFE260:
 25618              		.section	.text.set_running_on,"ax",%progbits
 25619              		.align	1
 25620              		.p2align 2,,3
 25621              		.global	set_running_on
 25622              		.syntax unified
 25623              		.thumb
 25624              		.thumb_func
 25625              		.fpu fpv4-sp-d16
 25627              	set_running_on:
 25628              	.LFB261:
5793:src/xeq.c     **** }
5794:src/xeq.c     **** 
5795:src/xeq.c     **** void set_running_on() {
 25629              		.loc 1 5795 23 view -0
 25630              		.cfi_startproc
 25631              		@ args = 0, pretend = 0, frame = 0
 25632              		@ frame_needed = 0, uses_anonymous_args = 0
5796:src/xeq.c     **** 	update_speed(0);
 25633              		.loc 1 5796 17 view .LVU6674
5797:src/xeq.c     **** 	GoFast = 1;
 25634              		.loc 1 5797 2 view .LVU6675
5795:src/xeq.c     **** 	update_speed(0);
 25635              		.loc 1 5795 23 is_stmt 0 view .LVU6676
 25636 0000 38B5     		push	{r3, r4, r5, lr}
 25637              		.cfi_def_cfa_offset 16
 25638              		.cfi_offset 3, -16
 25639              		.cfi_offset 4, -12
 25640              		.cfi_offset 5, -8
 25641              		.cfi_offset 14, -4
 25642              	.LBB3463:
 25643              	.LBB3464:
 186:src/xeq.c     **** }
 25644              		.loc 1 186 9 view .LVU6677
 25645 0002 0C4B     		ldr	r3, .L1837
ARM GAS  /tmp/ccaPnj5t.s 			page 660


 25646              	.LBE3464:
 25647              	.LBE3463:
 25648              		.loc 1 5797 9 view .LVU6678
 25649 0004 0C4D     		ldr	r5, .L1837+4
 25650              	.LBB3468:
 25651              	.LBB3465:
 186:src/xeq.c     **** }
 25652              		.loc 1 186 9 view .LVU6679
 25653 0006 1B68     		ldr	r3, [r3]
 25654              	.LBE3465:
 25655              	.LBE3468:
 25656              	.LBB3469:
 25657              	.LBB3470:
5786:src/xeq.c     **** }
 25658              		.loc 1 5786 10 view .LVU6680
 25659 0008 0C4C     		ldr	r4, .L1837+8
 25660              	.LBE3470:
 25661              	.LBE3469:
 25662              	.LBB3472:
 25663              	.LBB3466:
 186:src/xeq.c     **** }
 25664              		.loc 1 186 9 view .LVU6681
 25665 000a B3F8E037 		ldrh	r3, [r3, #2016]
 25666              	.LBE3466:
 25667              	.LBE3472:
5798:src/xeq.c     **** 	set_running_on_sst();
5799:src/xeq.c     **** 	LastKey = 0;
 25668              		.loc 1 5799 10 view .LVU6682
 25669 000e 0C49     		ldr	r1, .L1837+12
5800:src/xeq.c     **** 	if (!is_xrom())
 25670              		.loc 1 5800 5 view .LVU6683
 25671 0010 9B0B     		lsrs	r3, r3, #14
5797:src/xeq.c     **** 	set_running_on_sst();
 25672              		.loc 1 5797 9 view .LVU6684
 25673 0012 0122     		movs	r2, #1
5799:src/xeq.c     **** 	if (!is_xrom())
 25674              		.loc 1 5799 10 view .LVU6685
 25675 0014 0020     		movs	r0, #0
 25676              		.loc 1 5800 5 view .LVU6686
 25677 0016 032B     		cmp	r3, #3
5797:src/xeq.c     **** 	set_running_on_sst();
 25678              		.loc 1 5797 9 view .LVU6687
 25679 0018 2A60     		str	r2, [r5]
5798:src/xeq.c     **** 	LastKey = 0;
 25680              		.loc 1 5798 2 is_stmt 1 view .LVU6688
 25681              	.LBB3473:
 25682              	.LBI3469:
5785:src/xeq.c     **** 	Running = 1;
 25683              		.loc 1 5785 6 view .LVU6689
 25684              	.LBB3471:
5786:src/xeq.c     **** }
 25685              		.loc 1 5786 2 view .LVU6690
5786:src/xeq.c     **** }
 25686              		.loc 1 5786 10 is_stmt 0 view .LVU6691
 25687 001a 2260     		str	r2, [r4]
 25688              	.LBE3471:
 25689              	.LBE3473:
ARM GAS  /tmp/ccaPnj5t.s 			page 661


5799:src/xeq.c     **** 	if (!is_xrom())
 25690              		.loc 1 5799 2 is_stmt 1 view .LVU6692
5799:src/xeq.c     **** 	if (!is_xrom())
 25691              		.loc 1 5799 10 is_stmt 0 view .LVU6693
 25692 001c C874     		strb	r0, [r1, #19]
 25693              		.loc 1 5800 2 is_stmt 1 view .LVU6694
 25694              	.LBB3474:
 25695              	.LBI3463:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 25696              		.loc 1 185 5 view .LVU6695
 25697              	.LBB3467:
 186:src/xeq.c     **** }
 25698              		.loc 1 186 2 view .LVU6696
 25699              	.LBE3467:
 25700              	.LBE3474:
 25701              		.loc 1 5800 5 is_stmt 0 view .LVU6697
 25702 001e 01D0     		beq	.L1832
5801:src/xeq.c     **** 		error_message(ERR_NONE);
 25703              		.loc 1 5801 3 is_stmt 1 view .LVU6698
 25704 0020 FFF7FEFF 		bl	error_message
 25705              	.LVL1970:
 25706              	.L1832:
5802:src/xeq.c     **** 	dot(BEG, 0);
 25707              		.loc 1 5802 2 view .LVU6699
 25708 0024 0021     		movs	r1, #0
 25709 0026 8820     		movs	r0, #136
 25710 0028 FFF7FEFF 		bl	dot
 25711              	.LVL1971:
5803:src/xeq.c     **** 	finish_display(); // BEG
 25712              		.loc 1 5803 2 view .LVU6700
5804:src/xeq.c     **** }
 25713              		.loc 1 5804 1 is_stmt 0 view .LVU6701
 25714 002c BDE83840 		pop	{r3, r4, r5, lr}
 25715              		.cfi_restore 14
 25716              		.cfi_restore 5
 25717              		.cfi_restore 4
 25718              		.cfi_restore 3
 25719              		.cfi_def_cfa_offset 0
5803:src/xeq.c     **** 	finish_display(); // BEG
 25720              		.loc 1 5803 2 view .LVU6702
 25721 0030 FFF7FEBF 		b	finish_display
 25722              	.LVL1972:
 25723              	.L1838:
 25724              		.align	2
 25725              	.L1837:
 25726 0034 00000000 		.word	main_ram
 25727 0038 00000000 		.word	GoFast
 25728 003c 00000000 		.word	Running
 25729 0040 00000000 		.word	StateWhileOn
 25730              		.cfi_endproc
 25731              	.LFE261:
 25733              		.section	.text.gsbgto,"ax",%progbits
 25734              		.align	1
 25735              		.p2align 2,,3
 25736              		.syntax unified
 25737              		.thumb
 25738              		.thumb_func
ARM GAS  /tmp/ccaPnj5t.s 			page 662


 25739              		.fpu fpv4-sp-d16
 25741              	gsbgto:
 25742              	.LVL1973:
 25743              	.LFB152:
2204:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25744              		.loc 1 2204 66 is_stmt 1 view -0
 25745              		.cfi_startproc
 25746              		@ args = 0, pretend = 0, frame = 0
 25747              		@ frame_needed = 0, uses_anonymous_args = 0
2205:src/xeq.c     **** 	raw_set_pc(pc);
 25748              		.loc 1 2205 2 view .LVU6704
2204:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25749              		.loc 1 2204 66 is_stmt 0 view .LVU6705
 25750 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25751              		.cfi_def_cfa_offset 24
 25752              		.cfi_offset 4, -24
 25753              		.cfi_offset 5, -20
 25754              		.cfi_offset 6, -16
 25755              		.cfi_offset 7, -12
 25756              		.cfi_offset 8, -8
 25757              		.cfi_offset 14, -4
2205:src/xeq.c     **** 	raw_set_pc(pc);
 25758              		.loc 1 2205 39 view .LVU6706
 25759 0004 214F     		ldr	r7, .L1850
 25760 0006 3B68     		ldr	r3, [r7]
2204:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25761              		.loc 1 2204 66 view .LVU6707
 25762 0008 0446     		mov	r4, r0
 25763 000a 0D46     		mov	r5, r1
 25764              	.LBB3483:
 25765              	.LBB3484:
 283:src/xeq.c     **** 	update_program_bounds(0);
 25766              		.loc 1 283 11 view .LVU6708
 25767 000c A3F8E007 		strh	r0, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 25768              		.loc 1 284 2 view .LVU6709
 25769 0010 0020     		movs	r0, #0
 25770              	.LVL1974:
 284:src/xeq.c     **** }
 25771              		.loc 1 284 2 view .LVU6710
 25772              	.LBE3484:
 25773              	.LBE3483:
2205:src/xeq.c     **** 	raw_set_pc(pc);
 25774              		.loc 1 2205 27 view .LVU6711
 25775 0012 B3F8EC87 		ldrh	r8, [r3, #2028]
 25776              	.LVL1975:
2206:src/xeq.c     **** 	if (gsb) {
 25777              		.loc 1 2206 2 is_stmt 1 view .LVU6712
 25778              	.LBB3487:
 25779              	.LBI3483:
 282:src/xeq.c     **** 	State.pc = pc;
 25780              		.loc 1 282 13 view .LVU6713
 25781              	.LBB3485:
 283:src/xeq.c     **** 	update_program_bounds(0);
 25782              		.loc 1 283 2 view .LVU6714
 284:src/xeq.c     **** }
 25783              		.loc 1 284 2 view .LVU6715
ARM GAS  /tmp/ccaPnj5t.s 			page 663


 25784              	.LBE3485:
 25785              	.LBE3487:
2204:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25786              		.loc 1 2204 66 is_stmt 0 view .LVU6716
 25787 0016 1646     		mov	r6, r2
 25788              	.LBB3488:
 25789              	.LBB3486:
 284:src/xeq.c     **** }
 25790              		.loc 1 284 2 view .LVU6717
 25791 0018 FFF7FEFF 		bl	update_program_bounds
 25792              	.LVL1976:
 284:src/xeq.c     **** }
 25793              		.loc 1 284 2 view .LVU6718
 25794              	.LBE3486:
 25795              	.LBE3488:
2207:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25796              		.loc 1 2207 2 is_stmt 1 view .LVU6719
2207:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25797              		.loc 1 2207 5 is_stmt 0 view .LVU6720
 25798 001c D5B1     		cbz	r5, .L1839
2208:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25799              		.loc 1 2208 3 is_stmt 1 view .LVU6721
2208:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25800              		.loc 1 2208 7 is_stmt 0 view .LVU6722
 25801 001e 1C4B     		ldr	r3, .L1850+4
2208:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25802              		.loc 1 2208 19 view .LVU6723
 25803 0020 1C4A     		ldr	r2, .L1850+8
2208:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25804              		.loc 1 2208 16 view .LVU6724
 25805 0022 1B68     		ldr	r3, [r3]
 25806 0024 1268     		ldr	r2, [r2]
 25807 0026 1343     		orrs	r3, r3, r2
 25808              	.LBB3489:
 25809              	.LBB3490:
1589:src/xeq.c     **** }
 25810              		.loc 1 1589 14 view .LVU6725
 25811 0028 3A68     		ldr	r2, [r7]
 25812              	.LBE3490:
 25813              	.LBE3489:
2208:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25814              		.loc 1 2208 16 view .LVU6726
 25815 002a 1FD0     		beq	.L1842
 25816              	.LVL1977:
 25817              	.L1843:
2216:src/xeq.c     **** 			// Stack is full
 25818              		.loc 1 2216 3 is_stmt 1 view .LVU6727
2216:src/xeq.c     **** 			// Stack is full
 25819              		.loc 1 2216 36 is_stmt 0 view .LVU6728
 25820 002c 1A49     		ldr	r1, .L1850+12
2216:src/xeq.c     **** 			// Stack is full
 25821              		.loc 1 2216 8 view .LVU6729
 25822 002e B2F9E237 		ldrsh	r3, [r2, #2018]
2216:src/xeq.c     **** 			// Stack is full
 25823              		.loc 1 2216 58 view .LVU6730
 25824 0032 91F90110 		ldrsb	r1, [r1, #1]
 25825 0036 0029     		cmp	r1, #0
ARM GAS  /tmp/ccaPnj5t.s 			page 664


 25826 0038 A4BF     		itt	ge
 25827 003a 1849     		ldrge	r1, .L1850+16
 25828 003c 0968     		ldrge	r1, [r1]
2216:src/xeq.c     **** 			// Stack is full
 25829              		.loc 1 2216 7 view .LVU6731
 25830 003e C3F10000 		rsb	r0, r3, #0
2216:src/xeq.c     **** 			// Stack is full
 25831              		.loc 1 2216 58 view .LVU6732
 25832 0042 B8BF     		it	lt
 25833 0044 8821     		movlt	r1, #136
2216:src/xeq.c     **** 			// Stack is full
 25834              		.loc 1 2216 6 view .LVU6733
 25835 0046 8842     		cmp	r0, r1
 25836 0048 06DB     		blt	.L1846
2218:src/xeq.c     **** 			// clrretstk();
 25837              		.loc 1 2218 4 is_stmt 1 view .LVU6734
 25838              	.LVL1978:
 25839              	.LBB3492:
 25840              	.LBI3492:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25841              		.loc 1 540 5 view .LVU6735
 25842              	.LBB3493:
 541:src/xeq.c     **** 		Error = e;
 25843              		.loc 1 541 2 view .LVU6736
 541:src/xeq.c     **** 		Error = e;
 25844              		.loc 1 541 12 is_stmt 0 view .LVU6737
 25845 004a 154B     		ldr	r3, .L1850+20
 541:src/xeq.c     **** 		Error = e;
 25846              		.loc 1 541 5 view .LVU6738
 25847 004c 1A68     		ldr	r2, [r3]
 25848 004e 0AB9     		cbnz	r2, .L1839
 25849              	.LVL1979:
 25850              	.LBB3494:
 25851              	.LBI3494:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25852              		.loc 1 540 5 is_stmt 1 view .LVU6739
 25853              	.LBB3495:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25854              		.loc 1 542 3 view .LVU6740
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 25855              		.loc 1 542 9 is_stmt 0 view .LVU6741
 25856 0050 0B22     		movs	r2, #11
 25857 0052 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 25858              		.loc 1 543 3 is_stmt 1 view .LVU6742
 25859              	.LVL1980:
 25860              	.L1839:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 25861              		.loc 1 543 3 is_stmt 0 view .LVU6743
 25862              	.LBE3495:
 25863              	.LBE3494:
 25864              	.LBE3493:
 25865              	.LBE3492:
2226:src/xeq.c     **** 
 25866              		.loc 1 2226 1 view .LVU6744
 25867 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25868              	.LVL1981:
ARM GAS  /tmp/ccaPnj5t.s 			page 665


 25869              	.L1846:
2223:src/xeq.c     **** 		}
 25870              		.loc 1 2223 4 is_stmt 1 view .LVU6745
2223:src/xeq.c     **** 		}
 25871              		.loc 1 2223 10 is_stmt 0 view .LVU6746
 25872 0058 1249     		ldr	r1, .L1850+24
2223:src/xeq.c     **** 		}
 25873              		.loc 1 2223 11 view .LVU6747
 25874 005a 013B     		subs	r3, r3, #1
 25875 005c 1BB2     		sxth	r3, r3
2223:src/xeq.c     **** 		}
 25876              		.loc 1 2223 10 view .LVU6748
 25877 005e 0968     		ldr	r1, [r1]
2223:src/xeq.c     **** 		}
 25878              		.loc 1 2223 24 view .LVU6749
 25879 0060 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25880 0064 21F81360 		strh	r6, [r1, r3, lsl #1]	@ movhi
2226:src/xeq.c     **** 
 25881              		.loc 1 2226 1 view .LVU6750
 25882 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25883              	.LVL1982:
 25884              	.L1842:
2210:src/xeq.c     **** 			set_running_on();
 25885              		.loc 1 2210 4 is_stmt 1 view .LVU6751
 25886              	.LBB3496:
 25887              	.LBI3489:
1588:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 25888              		.loc 1 1588 6 view .LVU6752
 25889              	.LBB3491:
1589:src/xeq.c     **** }
 25890              		.loc 1 1589 2 view .LVU6753
1589:src/xeq.c     **** }
 25891              		.loc 1 1589 24 is_stmt 0 view .LVU6754
 25892 006c A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1589:src/xeq.c     **** }
 25893              		.loc 1 1589 12 view .LVU6755
 25894 0070 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25895              	.LBE3491:
 25896              	.LBE3496:
2211:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 25897              		.loc 1 2211 4 is_stmt 1 view .LVU6756
 25898 0074 FFF7FEFF 		bl	set_running_on
 25899              	.LVL1983:
2212:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25900              		.loc 1 2212 4 view .LVU6757
2212:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25901              		.loc 1 2212 10 is_stmt 0 view .LVU6758
 25902 0078 A30B     		lsrs	r3, r4, #14
2212:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25903              		.loc 1 2212 7 view .LVU6759
 25904 007a 032B     		cmp	r3, #3
2212:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25905              		.loc 1 2212 24 view .LVU6760
 25906 007c 3A68     		ldr	r2, [r7]
2212:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25907              		.loc 1 2212 7 view .LVU6761
 25908 007e D5D0     		beq	.L1843
ARM GAS  /tmp/ccaPnj5t.s 			page 666


2212:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25909              		.loc 1 2212 21 discriminator 1 view .LVU6762
 25910 0080 B2F8EC37 		ldrh	r3, [r2, #2028]
 25911 0084 4345     		cmp	r3, r8
 25912 0086 18BF     		it	ne
 25913 0088 2646     		movne	r6, r4
 25914              	.LVL1984:
2212:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25915              		.loc 1 2212 21 discriminator 1 view .LVU6763
 25916 008a CFE7     		b	.L1843
 25917              	.L1851:
 25918              		.align	2
 25919              	.L1850:
 25920 008c 00000000 		.word	main_ram
 25921 0090 00000000 		.word	Running
 25922 0094 00000000 		.word	XromRunning
 25923 0098 00000000 		.word	XromParams
 25924 009c 00000000 		.word	RetStkSize
 25925 00a0 00000000 		.word	Error
 25926 00a4 00000000 		.word	RetStk
 25927              		.cfi_endproc
 25928              	.LFE152:
 25930              		.section	.text.cmdgtocommon,"ax",%progbits
 25931              		.align	1
 25932              		.p2align 2,,3
 25933              		.global	cmdgtocommon
 25934              		.syntax unified
 25935              		.thumb
 25936              		.thumb_func
 25937              		.fpu fpv4-sp-d16
 25939              	cmdgtocommon:
 25940              	.LVL1985:
 25941              	.LFB155:
2266:src/xeq.c     **** 	if (pc == 0)
 25942              		.loc 1 2266 45 is_stmt 1 view -0
 25943              		.cfi_startproc
 25944              		@ args = 0, pretend = 0, frame = 0
 25945              		@ frame_needed = 0, uses_anonymous_args = 0
 25946              		@ link register save eliminated.
2267:src/xeq.c     **** 		set_running_off();
 25947              		.loc 1 2267 2 view .LVU6765
 25948              	.LBB3503:
 25949              	.LBB3504:
 25950              	.LBB3505:
 25951              	.LBB3506:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 25952              		.loc 1 5791 15 is_stmt 0 view .LVU6766
 25953 0000 0A4A     		ldr	r2, .L1854
 25954              	.LBE3506:
 25955              	.LBE3505:
 25956              	.LBE3504:
 25957              	.LBE3503:
2267:src/xeq.c     **** 		set_running_off();
 25958              		.loc 1 2267 5 view .LVU6767
 25959 0002 0B46     		mov	r3, r1
 25960 0004 59B9     		cbnz	r1, .L1853
 25961              	.LBB3514:
ARM GAS  /tmp/ccaPnj5t.s 			page 667


 25962              	.LBI3503:
2266:src/xeq.c     **** 	if (pc == 0)
 25963              		.loc 1 2266 6 is_stmt 1 view .LVU6768
 25964              	.LVL1986:
 25965              	.LBB3513:
2268:src/xeq.c     **** 	else
 25966              		.loc 1 2268 3 view .LVU6769
 25967              	.LBB3512:
 25968              	.LBI3505:
5789:src/xeq.c     **** 	set_running_off_sst();
 25969              		.loc 1 5789 6 view .LVU6770
 25970              	.LBB3511:
5790:src/xeq.c     **** 	State.entryp = 0;
 25971              		.loc 1 5790 2 view .LVU6771
 25972              	.LBB3507:
 25973              	.LBI3507:
5781:src/xeq.c     **** 	Running = 0;
 25974              		.loc 1 5781 6 view .LVU6772
 25975              	.LBB3508:
5782:src/xeq.c     **** }
 25976              		.loc 1 5782 2 view .LVU6773
5782:src/xeq.c     **** }
 25977              		.loc 1 5782 10 is_stmt 0 view .LVU6774
 25978 0006 0A48     		ldr	r0, .L1854+4
 25979              	.LVL1987:
5782:src/xeq.c     **** }
 25980              		.loc 1 5782 10 view .LVU6775
 25981              	.LBE3508:
 25982              	.LBE3507:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 25983              		.loc 1 5791 15 view .LVU6776
 25984 0008 1268     		ldr	r2, [r2]
 25985              	.LBB3510:
 25986              	.LBB3509:
5782:src/xeq.c     **** }
 25987              		.loc 1 5782 10 view .LVU6777
 25988 000a 0160     		str	r1, [r0]
 25989              	.LBE3509:
 25990              	.LBE3510:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 25991              		.loc 1 5791 2 is_stmt 1 view .LVU6778
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 25992              		.loc 1 5791 15 is_stmt 0 view .LVU6779
 25993 000c 92F8DD07 		ldrb	r0, [r2, #2013]	@ zero_extendqisi2
 25994 0010 61F30410 		bfi	r0, r1, #4, #1
 25995              	.LVL1988:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 25996              		.loc 1 5791 15 view .LVU6780
 25997 0014 82F8DD07 		strb	r0, [r2, #2013]
5792:src/xeq.c     **** }
 25998              		.loc 1 5792 2 is_stmt 1 view .LVU6781
 25999 0018 8A20     		movs	r0, #138
 26000 001a FFF7FEBF 		b	dot
 26001              	.LVL1989:
 26002              	.L1853:
5792:src/xeq.c     **** }
 26003              		.loc 1 5792 2 is_stmt 0 view .LVU6782
ARM GAS  /tmp/ccaPnj5t.s 			page 668


 26004              	.LBE3511:
 26005              	.LBE3512:
 26006              	.LBE3513:
 26007              	.LBE3514:
2270:src/xeq.c     **** }
 26008              		.loc 1 2270 3 is_stmt 1 view .LVU6783
2270:src/xeq.c     **** }
 26009              		.loc 1 2270 19 is_stmt 0 view .LVU6784
 26010 001e 1268     		ldr	r2, [r2]
2270:src/xeq.c     **** }
 26011              		.loc 1 2270 3 view .LVU6785
 26012 0020 0146     		mov	r1, r0
 26013              	.LVL1990:
2270:src/xeq.c     **** }
 26014              		.loc 1 2270 3 view .LVU6786
 26015 0022 B2F8E027 		ldrh	r2, [r2, #2016]
 26016 0026 1846     		mov	r0, r3
 26017              	.LVL1991:
2270:src/xeq.c     **** }
 26018              		.loc 1 2270 3 view .LVU6787
 26019 0028 FFF7FEBF 		b	gsbgto
 26020              	.LVL1992:
 26021              	.L1855:
2270:src/xeq.c     **** }
 26022              		.loc 1 2270 3 view .LVU6788
 26023              		.align	2
 26024              	.L1854:
 26025 002c 00000000 		.word	main_ram
 26026 0030 00000000 		.word	Running
 26027              		.cfi_endproc
 26028              	.LFE155:
 26030              		.section	.text.cmdgto,"ax",%progbits
 26031              		.align	1
 26032              		.p2align 2,,3
 26033              		.global	cmdgto
 26034              		.syntax unified
 26035              		.thumb
 26036              		.thumb_func
 26037              		.fpu fpv4-sp-d16
 26039              	cmdgto:
 26040              	.LVL1993:
 26041              	.LFB161:
2326:src/xeq.c     **** 	unsigned int lbl;
 26042              		.loc 1 2326 45 is_stmt 1 view -0
 26043              		.cfi_startproc
 26044              		@ args = 0, pretend = 0, frame = 0
 26045              		@ frame_needed = 0, uses_anonymous_args = 0
2327:src/xeq.c     **** 	if (is_xrom())
 26046              		.loc 1 2327 2 view .LVU6790
2328:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26047              		.loc 1 2328 2 view .LVU6791
 26048              	.LBB3515:
 26049              	.LBI3515:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 26050              		.loc 1 185 5 view .LVU6792
 26051              	.LBB3516:
 186:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 669


 26052              		.loc 1 186 2 view .LVU6793
 186:src/xeq.c     **** }
 26053              		.loc 1 186 9 is_stmt 0 view .LVU6794
 26054 0000 0E4B     		ldr	r3, .L1860
 26055 0002 1B68     		ldr	r3, [r3]
 26056 0004 B3F8E037 		ldrh	r3, [r3, #2016]
 26057              	.LBE3516:
 26058              	.LBE3515:
2328:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26059              		.loc 1 2328 5 view .LVU6795
 26060 0008 9A0B     		lsrs	r2, r3, #14
 26061 000a 032A     		cmp	r2, #3
2326:src/xeq.c     **** 	unsigned int lbl;
 26062              		.loc 1 2326 45 view .LVU6796
 26063 000c 10B5     		push	{r4, lr}
 26064              		.cfi_def_cfa_offset 8
 26065              		.cfi_offset 4, -8
 26066              		.cfi_offset 14, -4
2326:src/xeq.c     **** 	unsigned int lbl;
 26067              		.loc 1 2326 45 view .LVU6797
 26068 000e 0C46     		mov	r4, r1
2328:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26069              		.loc 1 2328 5 view .LVU6798
 26070 0010 0CD1     		bne	.L1857
2329:src/xeq.c     **** 	else
 26071              		.loc 1 2329 3 is_stmt 1 view .LVU6799
2329:src/xeq.c     **** 	else
 26072              		.loc 1 2329 9 is_stmt 0 view .LVU6800
 26073 0012 0B4B     		ldr	r3, .L1860+4
2329:src/xeq.c     **** 	else
 26074              		.loc 1 2329 37 view .LVU6801
 26075 0014 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 26076              	.LVL1994:
2329:src/xeq.c     **** 	else
 26077              		.loc 1 2329 7 view .LVU6802
 26078 0018 41F44041 		orr	r1, r1, #49152
 26079              	.LVL1995:
 26080              	.L1858:
2332:src/xeq.c     **** }
 26081              		.loc 1 2332 2 is_stmt 1 view .LVU6803
 26082 001c B4F14500 		subs	r0, r4, #69
 26083 0020 18BF     		it	ne
 26084 0022 0120     		movne	r0, #1
2333:src/xeq.c     **** 
 26085              		.loc 1 2333 1 is_stmt 0 view .LVU6804
 26086 0024 BDE81040 		pop	{r4, lr}
 26087              		.cfi_remember_state
 26088              		.cfi_restore 14
 26089              		.cfi_restore 4
 26090              		.cfi_def_cfa_offset 0
2332:src/xeq.c     **** }
 26091              		.loc 1 2332 2 view .LVU6805
 26092 0028 FFF7FEBF 		b	cmdgtocommon
 26093              	.LVL1996:
 26094              	.L1857:
 26095              		.cfi_restore_state
2331:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
ARM GAS  /tmp/ccaPnj5t.s 			page 670


 26096              		.loc 1 2331 3 is_stmt 1 view .LVU6806
 26097              	.LBB3517:
 26098              	.LBI3517:
2196:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 26099              		.loc 1 2196 14 view .LVU6807
 26100              	.LBB3518:
2197:src/xeq.c     **** }
 26101              		.loc 1 2197 2 view .LVU6808
2197:src/xeq.c     **** }
 26102              		.loc 1 2197 9 is_stmt 0 view .LVU6809
 26103 002c 40F4C441 		orr	r1, r0, #25088
 26104              	.LVL1997:
2197:src/xeq.c     **** }
 26105              		.loc 1 2197 9 view .LVU6810
 26106 0030 0322     		movs	r2, #3
 26107 0032 1846     		mov	r0, r3
 26108              	.LVL1998:
2197:src/xeq.c     **** }
 26109              		.loc 1 2197 9 view .LVU6811
 26110 0034 FFF7FEFF 		bl	find_opcode_from
 26111              	.LVL1999:
2197:src/xeq.c     **** }
 26112              		.loc 1 2197 9 view .LVU6812
 26113 0038 0146     		mov	r1, r0
 26114              	.LVL2000:
2197:src/xeq.c     **** }
 26115              		.loc 1 2197 9 view .LVU6813
 26116 003a EFE7     		b	.L1858
 26117              	.L1861:
 26118              		.align	2
 26119              	.L1860:
 26120 003c 00000000 		.word	main_ram
 26121 0040 00000000 		.word	.LANCHOR6
 26122              	.LBE3518:
 26123              	.LBE3517:
 26124              		.cfi_endproc
 26125              	.LFE161:
 26127              		.section	.text.branchtoalpha,"ax",%progbits
 26128              		.align	1
 26129              		.p2align 2,,3
 26130              		.syntax unified
 26131              		.thumb
 26132              		.thumb_func
 26133              		.fpu fpv4-sp-d16
 26135              	branchtoalpha:
 26136              	.LVL2001:
 26137              	.LFB165:
2368:src/xeq.c     **** 	unsigned int op;
 26138              		.loc 1 2368 51 is_stmt 1 view -0
 26139              		.cfi_startproc
 26140              		@ args = 0, pretend = 0, frame = 0
 26141              		@ frame_needed = 0, uses_anonymous_args = 0
2369:src/xeq.c     **** 
 26142              		.loc 1 2369 2 view .LVU6815
2371:src/xeq.c     **** 	op |= buf[0] & 0xff;
 26143              		.loc 1 2371 2 view .LVU6816
2372:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
ARM GAS  /tmp/ccaPnj5t.s 			page 671


 26144              		.loc 1 2372 2 view .LVU6817
2373:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 26145              		.loc 1 2373 2 view .LVU6818
2374:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26146              		.loc 1 2374 2 view .LVU6819
2375:src/xeq.c     **** }
 26147              		.loc 1 2375 2 view .LVU6820
2368:src/xeq.c     **** 	unsigned int op;
 26148              		.loc 1 2368 51 is_stmt 0 view .LVU6821
 26149 0000 10B5     		push	{r4, lr}
 26150              		.cfi_def_cfa_offset 8
 26151              		.cfi_offset 4, -8
 26152              		.cfi_offset 14, -4
2374:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26153              		.loc 1 2374 16 view .LVU6822
 26154 0002 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
2373:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 26155              		.loc 1 2373 16 view .LVU6823
 26156 0004 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
2372:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 26157              		.loc 1 2372 15 view .LVU6824
 26158 0006 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
2374:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26159              		.loc 1 2374 24 view .LVU6825
 26160 0008 1B06     		lsls	r3, r3, #24
2374:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26161              		.loc 1 2374 5 view .LVU6826
 26162 000a 43EA0443 		orr	r3, r3, r4, lsl #16
 26163 000e 1343     		orrs	r3, r3, r2
2368:src/xeq.c     **** 	unsigned int op;
 26164              		.loc 1 2368 51 view .LVU6827
 26165 0010 0446     		mov	r4, r0
2375:src/xeq.c     **** }
 26166              		.loc 1 2375 2 view .LVU6828
 26167 0012 0121     		movs	r1, #1
 26168              	.LVL2002:
2375:src/xeq.c     **** }
 26169              		.loc 1 2375 2 view .LVU6829
 26170 0014 43F47040 		orr	r0, r3, #61440
 26171              	.LVL2003:
2375:src/xeq.c     **** }
 26172              		.loc 1 2375 2 view .LVU6830
 26173 0018 FFF7FEFF 		bl	findmultilbl
 26174              	.LVL2004:
2375:src/xeq.c     **** }
 26175              		.loc 1 2375 2 view .LVU6831
 26176 001c 0146     		mov	r1, r0
 26177 001e 2046     		mov	r0, r4
2376:src/xeq.c     **** 
 26178              		.loc 1 2376 1 view .LVU6832
 26179 0020 BDE81040 		pop	{r4, lr}
 26180              		.cfi_restore 14
 26181              		.cfi_restore 4
 26182              		.cfi_def_cfa_offset 0
 26183              	.LVL2005:
2375:src/xeq.c     **** }
 26184              		.loc 1 2375 2 view .LVU6833
ARM GAS  /tmp/ccaPnj5t.s 			page 672


 26185 0024 FFF7FEBF 		b	cmdgtocommon
 26186              	.LVL2006:
2375:src/xeq.c     **** }
 26187              		.loc 1 2375 2 view .LVU6834
 26188              		.cfi_endproc
 26189              	.LFE165:
 26191              		.section	.text.cmdalphagto,"ax",%progbits
 26192              		.align	1
 26193              		.p2align 2,,3
 26194              		.global	cmdalphagto
 26195              		.syntax unified
 26196              		.thumb
 26197              		.thumb_func
 26198              		.fpu fpv4-sp-d16
 26200              	cmdalphagto:
 26201              	.LVL2007:
 26202              	.LFB166:
2378:src/xeq.c     **** 	char buf[14];
 26203              		.loc 1 2378 50 is_stmt 1 view -0
 26204              		.cfi_startproc
 26205              		@ args = 0, pretend = 0, frame = 16
 26206              		@ frame_needed = 0, uses_anonymous_args = 0
2379:src/xeq.c     **** 
 26207              		.loc 1 2379 2 view .LVU6836
2381:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26208              		.loc 1 2381 2 view .LVU6837
2378:src/xeq.c     **** 	char buf[14];
 26209              		.loc 1 2378 50 is_stmt 0 view .LVU6838
 26210 0000 30B5     		push	{r4, r5, lr}
 26211              		.cfi_def_cfa_offset 12
 26212              		.cfi_offset 4, -12
 26213              		.cfi_offset 5, -8
 26214              		.cfi_offset 14, -4
 26215 0002 85B0     		sub	sp, sp, #20
 26216              		.cfi_def_cfa_offset 32
2381:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26217              		.loc 1 2381 2 view .LVU6839
 26218 0004 0E22     		movs	r2, #14
2378:src/xeq.c     **** 	char buf[14];
 26219              		.loc 1 2378 50 view .LVU6840
 26220 0006 0546     		mov	r5, r0
 26221 0008 0C46     		mov	r4, r1
2381:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26222              		.loc 1 2381 2 view .LVU6841
 26223 000a 6846     		mov	r0, sp
 26224              	.LVL2008:
2381:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26225              		.loc 1 2381 2 view .LVU6842
 26226 000c 0021     		movs	r1, #0
 26227              	.LVL2009:
2381:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26228              		.loc 1 2381 2 view .LVU6843
 26229 000e FFF7FEFF 		bl	xset
 26230              	.LVL2010:
2382:src/xeq.c     **** }
 26231              		.loc 1 2382 2 is_stmt 1 view .LVU6844
 26232 0012 6946     		mov	r1, sp
ARM GAS  /tmp/ccaPnj5t.s 			page 673


 26233 0014 2846     		mov	r0, r5
 26234 0016 FFF7FEFF 		bl	alpha_rcl_s
 26235              	.LVL2011:
 26236 001a 0146     		mov	r1, r0
 26237 001c B4F17000 		subs	r0, r4, #112
 26238 0020 18BF     		it	ne
 26239 0022 0120     		movne	r0, #1
 26240 0024 FFF7FEFF 		bl	branchtoalpha
 26241              	.LVL2012:
2383:src/xeq.c     **** 
 26242              		.loc 1 2383 1 is_stmt 0 view .LVU6845
 26243 0028 05B0     		add	sp, sp, #20
 26244              		.cfi_def_cfa_offset 12
 26245              		@ sp needed
 26246 002a 30BD     		pop	{r4, r5, pc}
2383:src/xeq.c     **** 
 26247              		.loc 1 2383 1 view .LVU6846
 26248              		.cfi_endproc
 26249              	.LFE166:
 26251              		.section	.text.op_gtoalpha,"ax",%progbits
 26252              		.align	1
 26253              		.p2align 2,,3
 26254              		.global	op_gtoalpha
 26255              		.syntax unified
 26256              		.thumb
 26257              		.thumb_func
 26258              		.fpu fpv4-sp-d16
 26260              	op_gtoalpha:
 26261              	.LVL2013:
 26262              	.LFB168:
2393:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26263              		.loc 1 2393 33 is_stmt 1 view -0
 26264              		.cfi_startproc
 26265              		@ args = 0, pretend = 0, frame = 8
 26266              		@ frame_needed = 0, uses_anonymous_args = 0
2394:src/xeq.c     **** }
 26267              		.loc 1 2394 2 view .LVU6848
2393:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26268              		.loc 1 2393 33 is_stmt 0 view .LVU6849
 26269 0000 10B5     		push	{r4, lr}
 26270              		.cfi_def_cfa_offset 8
 26271              		.cfi_offset 4, -8
 26272              		.cfi_offset 14, -4
 26273              	.LBB3521:
 26274              	.LBB3522:
2388:src/xeq.c     **** 	buf[3] = '\0';
 26275              		.loc 1 2388 13 view .LVU6850
 26276 0002 0B4B     		ldr	r3, .L1868
 26277 0004 1968     		ldr	r1, [r3]
 26278              	.LBE3522:
 26279              	.LBE3521:
2393:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26280              		.loc 1 2393 33 view .LVU6851
 26281 0006 82B0     		sub	sp, sp, #8
 26282              		.cfi_def_cfa_offset 16
2393:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26283              		.loc 1 2393 33 view .LVU6852
ARM GAS  /tmp/ccaPnj5t.s 			page 674


 26284 0008 0446     		mov	r4, r0
 26285              	.LVL2014:
 26286              	.LBB3524:
 26287              	.LBI3521:
2385:src/xeq.c     **** 	char buf[4];
 26288              		.loc 1 2385 13 is_stmt 1 view .LVU6853
 26289              	.LBB3523:
2386:src/xeq.c     **** 
 26290              		.loc 1 2386 2 view .LVU6854
2388:src/xeq.c     **** 	buf[3] = '\0';
 26291              		.loc 1 2388 2 view .LVU6855
 26292 000a 0322     		movs	r2, #3
 26293 000c 01F5F661 		add	r1, r1, #1968
 26294 0010 01A8     		add	r0, sp, #4
 26295              	.LVL2015:
2388:src/xeq.c     **** 	buf[3] = '\0';
 26296              		.loc 1 2388 2 is_stmt 0 view .LVU6856
 26297 0012 FFF7FEFF 		bl	xcopy
 26298              	.LVL2016:
2389:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26299              		.loc 1 2389 2 is_stmt 1 view .LVU6857
2390:src/xeq.c     **** }
 26300              		.loc 1 2390 2 is_stmt 0 view .LVU6858
 26301 0016 B4F19800 		subs	r0, r4, #152
2389:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26302              		.loc 1 2389 9 view .LVU6859
 26303 001a 4FF00003 		mov	r3, #0
2390:src/xeq.c     **** }
 26304              		.loc 1 2390 2 view .LVU6860
 26305 001e 18BF     		it	ne
 26306 0020 0120     		movne	r0, #1
 26307 0022 01A9     		add	r1, sp, #4
2389:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26308              		.loc 1 2389 9 view .LVU6861
 26309 0024 8DF80730 		strb	r3, [sp, #7]
2390:src/xeq.c     **** }
 26310              		.loc 1 2390 2 is_stmt 1 view .LVU6862
 26311 0028 FFF7FEFF 		bl	branchtoalpha
 26312              	.LVL2017:
2390:src/xeq.c     **** }
 26313              		.loc 1 2390 2 is_stmt 0 view .LVU6863
 26314              	.LBE3523:
 26315              	.LBE3524:
2395:src/xeq.c     **** 
 26316              		.loc 1 2395 1 view .LVU6864
 26317 002c 02B0     		add	sp, sp, #8
 26318              		.cfi_def_cfa_offset 8
 26319              		@ sp needed
 26320 002e 10BD     		pop	{r4, pc}
 26321              	.L1869:
 26322              		.align	2
 26323              	.L1868:
 26324 0030 00000000 		.word	main_ram
 26325              		.cfi_endproc
 26326              	.LFE168:
 26328              		.section	.text.cmdskip,"ax",%progbits
 26329              		.align	1
ARM GAS  /tmp/ccaPnj5t.s 			page 675


 26330              		.p2align 2,,3
 26331              		.global	cmdskip
 26332              		.syntax unified
 26333              		.thumb
 26334              		.thumb_func
 26335              		.fpu fpv4-sp-d16
 26337              	cmdskip:
 26338              	.LVL2018:
 26339              	.LFB181:
2569:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26340              		.loc 1 2569 46 is_stmt 1 view -0
 26341              		.cfi_startproc
 26342              		@ args = 0, pretend = 0, frame = 8
 26343              		@ frame_needed = 0, uses_anonymous_args = 0
2570:src/xeq.c     **** 	unsigned int pc;
 26344              		.loc 1 2570 2 view .LVU6866
2569:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26345              		.loc 1 2569 46 is_stmt 0 view .LVU6867
 26346 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 26347              		.cfi_def_cfa_offset 20
 26348              		.cfi_offset 4, -20
 26349              		.cfi_offset 5, -16
 26350              		.cfi_offset 6, -12
 26351              		.cfi_offset 7, -8
 26352              		.cfi_offset 14, -4
2570:src/xeq.c     **** 	unsigned int pc;
 26353              		.loc 1 2570 30 view .LVU6868
 26354 0002 1D4F     		ldr	r7, .L1894
 26355 0004 3B68     		ldr	r3, [r7]
2573:src/xeq.c     **** 		int sgn;
 26356              		.loc 1 2573 5 view .LVU6869
 26357 0006 8B29     		cmp	r1, #139
2570:src/xeq.c     **** 	unsigned int pc;
 26358              		.loc 1 2570 21 view .LVU6870
 26359 0008 B3F8E067 		ldrh	r6, [r3, #2016]
 26360              	.LVL2019:
2571:src/xeq.c     **** 
 26361              		.loc 1 2571 2 is_stmt 1 view .LVU6871
2573:src/xeq.c     **** 		int sgn;
 26362              		.loc 1 2573 2 view .LVU6872
2569:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26363              		.loc 1 2569 46 is_stmt 0 view .LVU6873
 26364 000c 83B0     		sub	sp, sp, #12
 26365              		.cfi_def_cfa_offset 32
2569:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26366              		.loc 1 2569 46 view .LVU6874
 26367 000e 0D46     		mov	r5, r1
2573:src/xeq.c     **** 		int sgn;
 26368              		.loc 1 2573 5 view .LVU6875
 26369 0010 22D0     		beq	.L1891
 26370 0012 0446     		mov	r4, r0
 26371              	.LVL2020:
 26372              	.L1871:
2582:src/xeq.c     **** 		pc = origpc + arg;
 26373              		.loc 1 2582 2 is_stmt 1 view .LVU6876
2582:src/xeq.c     **** 		pc = origpc + arg;
 26374              		.loc 1 2582 6 is_stmt 0 view .LVU6877
ARM GAS  /tmp/ccaPnj5t.s 			page 676


 26375 0014 B30B     		lsrs	r3, r6, #14
2582:src/xeq.c     **** 		pc = origpc + arg;
 26376              		.loc 1 2582 5 view .LVU6878
 26377 0016 032B     		cmp	r3, #3
 26378 0018 15D0     		beq	.L1892
 26379              	.LVL2021:
 26380              	.L1876:
2585:src/xeq.c     **** 		if (PcWrapped) {
 26381              		.loc 1 2585 28 is_stmt 1 discriminator 2 view .LVU6879
2585:src/xeq.c     **** 		if (PcWrapped) {
 26382              		.loc 1 2585 9 discriminator 2 view .LVU6880
2585:src/xeq.c     **** 		if (PcWrapped) {
 26383              		.loc 1 2585 9 is_stmt 0 discriminator 2 view .LVU6881
 26384 001a 24B1     		cbz	r4, .L1878
2585:src/xeq.c     **** 		if (PcWrapped) {
 26385              		.loc 1 2585 20 discriminator 1 view .LVU6882
 26386 001c FFF7FEFF 		bl	incpc
 26387              	.LVL2022:
 26388 0020 013C     		subs	r4, r4, #1
 26389              	.LVL2023:
2585:src/xeq.c     **** 		if (PcWrapped) {
 26390              		.loc 1 2585 16 discriminator 1 view .LVU6883
 26391 0022 0028     		cmp	r0, #0
 26392 0024 F9D0     		beq	.L1876
 26393              	.LVL2024:
 26394              	.L1878:
2586:src/xeq.c     **** 			report_err(ERR_RANGE);
 26395              		.loc 1 2586 3 is_stmt 1 view .LVU6884
2586:src/xeq.c     **** 			report_err(ERR_RANGE);
 26396              		.loc 1 2586 7 is_stmt 0 view .LVU6885
 26397 0026 154B     		ldr	r3, .L1894+4
2586:src/xeq.c     **** 			report_err(ERR_RANGE);
 26398              		.loc 1 2586 6 view .LVU6886
 26399 0028 1B68     		ldr	r3, [r3]
 26400 002a 73B9     		cbnz	r3, .L1893
 26401              	.L1879:
2589:src/xeq.c     **** 	}
 26402              		.loc 1 2589 3 is_stmt 1 view .LVU6887
2589:src/xeq.c     **** 	}
 26403              		.loc 1 2589 8 is_stmt 0 view .LVU6888
 26404 002c 3B68     		ldr	r3, [r7]
2589:src/xeq.c     **** 	}
 26405              		.loc 1 2589 6 view .LVU6889
 26406 002e B3F8E007 		ldrh	r0, [r3, #2016]
 26407              	.LVL2025:
 26408              	.L1877:
2591:src/xeq.c     **** }
 26409              		.loc 1 2591 2 is_stmt 1 view .LVU6890
 26410 0032 A5F13801 		sub	r1, r5, #56
 26411 0036 B1FA81F1 		clz	r1, r1
 26412 003a 3246     		mov	r2, r6
 26413 003c 4909     		lsrs	r1, r1, #5
 26414 003e FFF7FEFF 		bl	gsbgto
 26415              	.LVL2026:
 26416              	.L1870:
2592:src/xeq.c     **** 
 26417              		.loc 1 2592 1 is_stmt 0 view .LVU6891
ARM GAS  /tmp/ccaPnj5t.s 			page 677


 26418 0042 03B0     		add	sp, sp, #12
 26419              		.cfi_remember_state
 26420              		.cfi_def_cfa_offset 20
 26421              		@ sp needed
 26422 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 26423              	.LVL2027:
 26424              	.L1892:
 26425              		.cfi_restore_state
2583:src/xeq.c     **** 	else {
 26426              		.loc 1 2583 3 is_stmt 1 view .LVU6892
2583:src/xeq.c     **** 	else {
 26427              		.loc 1 2583 6 is_stmt 0 view .LVU6893
 26428 0046 A019     		adds	r0, r4, r6
 26429              	.LVL2028:
2583:src/xeq.c     **** 	else {
 26430              		.loc 1 2583 6 view .LVU6894
 26431 0048 F3E7     		b	.L1877
 26432              	.LVL2029:
 26433              	.L1893:
2587:src/xeq.c     **** 		}
 26434              		.loc 1 2587 4 is_stmt 1 view .LVU6895
 26435              	.LBB3534:
 26436              	.LBI3534:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26437              		.loc 1 540 5 view .LVU6896
 26438              	.LBB3535:
 541:src/xeq.c     **** 		Error = e;
 26439              		.loc 1 541 2 view .LVU6897
 541:src/xeq.c     **** 		Error = e;
 26440              		.loc 1 541 12 is_stmt 0 view .LVU6898
 26441 004a 0D4B     		ldr	r3, .L1894+8
 541:src/xeq.c     **** 		Error = e;
 26442              		.loc 1 541 5 view .LVU6899
 26443 004c 1A68     		ldr	r2, [r3]
 26444 004e 002A     		cmp	r2, #0
 26445 0050 ECD1     		bne	.L1879
 26446              	.LVL2030:
 26447              	.LBB3536:
 26448              	.LBI3536:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26449              		.loc 1 540 5 is_stmt 1 view .LVU6900
 26450              	.LBB3537:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 26451              		.loc 1 542 3 view .LVU6901
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 26452              		.loc 1 542 9 is_stmt 0 view .LVU6902
 26453 0052 0822     		movs	r2, #8
 26454 0054 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 26455              		.loc 1 543 3 is_stmt 1 view .LVU6903
 26456 0056 E9E7     		b	.L1879
 26457              	.LVL2031:
 26458              	.L1891:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 26459              		.loc 1 543 3 is_stmt 0 view .LVU6904
 26460              	.LBE3537:
 26461              	.LBE3536:
ARM GAS  /tmp/ccaPnj5t.s 			page 678


 26462              	.LBE3535:
 26463              	.LBE3534:
 26464              	.LBB3538:
2574:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
 26465              		.loc 1 2574 3 is_stmt 1 view .LVU6905
2575:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26466              		.loc 1 2575 3 view .LVU6906
2575:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26467              		.loc 1 2575 15 is_stmt 0 view .LVU6907
 26468 0058 01A9     		add	r1, sp, #4
 26469              	.LVL2032:
2575:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26470              		.loc 1 2575 15 view .LVU6908
 26471 005a FFF7FEFF 		bl	get_reg_n_int_sgn
 26472              	.LVL2033:
2576:src/xeq.c     **** 			report_err(ERR_RANGE);
 26473              		.loc 1 2576 6 view .LVU6909
 26474 005e 019B     		ldr	r3, [sp, #4]
 26475              	.LVL2034:
2576:src/xeq.c     **** 			report_err(ERR_RANGE);
 26476              		.loc 1 2576 3 is_stmt 1 view .LVU6910
2576:src/xeq.c     **** 			report_err(ERR_RANGE);
 26477              		.loc 1 2576 6 is_stmt 0 view .LVU6911
 26478 0060 13B9     		cbnz	r3, .L1872
2576:src/xeq.c     **** 			report_err(ERR_RANGE);
 26479              		.loc 1 2576 11 discriminator 1 view .LVU6912
 26480 0062 6328     		cmp	r0, #99
2575:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26481              		.loc 1 2575 7 discriminator 1 view .LVU6913
 26482 0064 0446     		mov	r4, r0
2576:src/xeq.c     **** 			report_err(ERR_RANGE);
 26483              		.loc 1 2576 11 discriminator 1 view .LVU6914
 26484 0066 D5D9     		bls	.L1871
 26485              	.L1872:
2577:src/xeq.c     **** 			return;
 26486              		.loc 1 2577 4 is_stmt 1 view .LVU6915
 26487              	.LVL2035:
 26488              	.LBB3539:
 26489              	.LBI3539:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26490              		.loc 1 540 5 view .LVU6916
 26491              	.LBB3540:
 541:src/xeq.c     **** 		Error = e;
 26492              		.loc 1 541 2 view .LVU6917
 541:src/xeq.c     **** 		Error = e;
 26493              		.loc 1 541 12 is_stmt 0 view .LVU6918
 26494 0068 054B     		ldr	r3, .L1894+8
 541:src/xeq.c     **** 		Error = e;
 26495              		.loc 1 541 5 view .LVU6919
 26496 006a 1A68     		ldr	r2, [r3]
 26497 006c 002A     		cmp	r2, #0
 26498 006e E8D1     		bne	.L1870
 26499              	.LVL2036:
 26500              	.LBB3541:
 26501              	.LBI3541:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26502              		.loc 1 540 5 is_stmt 1 view .LVU6920
ARM GAS  /tmp/ccaPnj5t.s 			page 679


 26503              	.LBB3542:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 26504              		.loc 1 542 3 view .LVU6921
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 26505              		.loc 1 542 9 is_stmt 0 view .LVU6922
 26506 0070 0822     		movs	r2, #8
 26507 0072 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 26508              		.loc 1 543 3 is_stmt 1 view .LVU6923
 26509              	.LVL2037:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 26510              		.loc 1 543 3 is_stmt 0 view .LVU6924
 26511              	.LBE3542:
 26512              	.LBE3541:
 26513              	.LBE3540:
 26514              	.LBE3539:
2578:src/xeq.c     **** 		}
 26515              		.loc 1 2578 4 is_stmt 1 view .LVU6925
 26516 0074 E5E7     		b	.L1870
 26517              	.L1895:
 26518 0076 00BF     		.align	2
 26519              	.L1894:
 26520 0078 00000000 		.word	main_ram
 26521 007c 00000000 		.word	PcWrapped
 26522 0080 00000000 		.word	Error
 26523              	.LBE3538:
 26524              		.cfi_endproc
 26525              	.LFE181:
 26527              		.section	.text.cmdback,"ax",%progbits
 26528              		.align	1
 26529              		.p2align 2,,3
 26530              		.global	cmdback
 26531              		.syntax unified
 26532              		.thumb
 26533              		.thumb_func
 26534              		.fpu fpv4-sp-d16
 26536              	cmdback:
 26537              	.LVL2038:
 26538              	.LFB182:
2595:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26539              		.loc 1 2595 46 view -0
 26540              		.cfi_startproc
 26541              		@ args = 0, pretend = 0, frame = 0
 26542              		@ frame_needed = 0, uses_anonymous_args = 0
2596:src/xeq.c     **** 	unsigned int pc = origpc;
 26543              		.loc 1 2596 2 view .LVU6927
2595:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26544              		.loc 1 2595 46 is_stmt 0 view .LVU6928
 26545 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 26546              		.cfi_def_cfa_offset 24
 26547              		.cfi_offset 3, -24
 26548              		.cfi_offset 4, -20
 26549              		.cfi_offset 5, -16
 26550              		.cfi_offset 6, -12
 26551              		.cfi_offset 7, -8
 26552              		.cfi_offset 14, -4
2596:src/xeq.c     **** 	unsigned int pc = origpc;
ARM GAS  /tmp/ccaPnj5t.s 			page 680


 26553              		.loc 1 2596 30 view .LVU6929
 26554 0002 184B     		ldr	r3, .L1915
 26555 0004 1B68     		ldr	r3, [r3]
2596:src/xeq.c     **** 	unsigned int pc = origpc;
 26556              		.loc 1 2596 21 view .LVU6930
 26557 0006 B3F8E067 		ldrh	r6, [r3, #2016]
 26558              	.LVL2039:
2597:src/xeq.c     **** 
 26559              		.loc 1 2597 2 is_stmt 1 view .LVU6931
2599:src/xeq.c     **** 		pc -= arg + 1;
 26560              		.loc 1 2599 2 view .LVU6932
2599:src/xeq.c     **** 		pc -= arg + 1;
 26561              		.loc 1 2599 6 is_stmt 0 view .LVU6933
 26562 000a B30B     		lsrs	r3, r6, #14
2599:src/xeq.c     **** 		pc -= arg + 1;
 26563              		.loc 1 2599 5 view .LVU6934
 26564 000c 032B     		cmp	r3, #3
2595:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26565              		.loc 1 2595 46 view .LVU6935
 26566 000e 0446     		mov	r4, r0
 26567 0010 0D46     		mov	r5, r1
2599:src/xeq.c     **** 		pc -= arg + 1;
 26568              		.loc 1 2599 5 view .LVU6936
 26569 0012 1FD0     		beq	.L1912
2601:src/xeq.c     **** 		if ( Running ) {
 26570              		.loc 1 2601 14 is_stmt 1 view .LVU6937
2601:src/xeq.c     **** 		if ( Running ) {
 26571              		.loc 1 2601 17 is_stmt 0 view .LVU6938
 26572 0014 98B1     		cbz	r0, .L1904
2602:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26573              		.loc 1 2602 3 is_stmt 1 view .LVU6939
2602:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26574              		.loc 1 2602 8 is_stmt 0 view .LVU6940
 26575 0016 144B     		ldr	r3, .L1915+4
2602:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26576              		.loc 1 2602 6 view .LVU6941
 26577 0018 1B68     		ldr	r3, [r3]
 26578 001a F3B9     		cbnz	r3, .L1913
 26579 001c 3046     		mov	r0, r6
 26580              	.LVL2040:
 26581              	.L1899:
2602:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26582              		.loc 1 2602 6 view .LVU6942
 26583 001e 134F     		ldr	r7, .L1915+8
 26584 0020 00E0     		b	.L1901
 26585              	.L1914:
2608:src/xeq.c     **** 		if (PcWrapped) {
 26586              		.loc 1 2608 18 discriminator 1 view .LVU6943
 26587 0022 33B9     		cbnz	r3, .L1902
 26588              	.L1901:
2606:src/xeq.c     **** 			pc = do_dec(pc, 1);
 26589              		.loc 1 2606 3 is_stmt 1 discriminator 2 view .LVU6944
2607:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26590              		.loc 1 2607 4 discriminator 2 view .LVU6945
2607:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26591              		.loc 1 2607 9 is_stmt 0 discriminator 2 view .LVU6946
 26592 0024 0121     		movs	r1, #1
ARM GAS  /tmp/ccaPnj5t.s 			page 681


 26593 0026 FFF7FEFF 		bl	do_dec
 26594              	.LVL2041:
2608:src/xeq.c     **** 		if (PcWrapped) {
 26595              		.loc 1 2608 11 is_stmt 1 discriminator 2 view .LVU6947
2608:src/xeq.c     **** 		if (PcWrapped) {
 26596              		.loc 1 2608 3 is_stmt 0 discriminator 2 view .LVU6948
 26597 002a 013C     		subs	r4, r4, #1
 26598              	.LVL2042:
2608:src/xeq.c     **** 		if (PcWrapped) {
 26599              		.loc 1 2608 18 discriminator 2 view .LVU6949
 26600 002c 3B68     		ldr	r3, [r7]
2608:src/xeq.c     **** 		if (PcWrapped) {
 26601              		.loc 1 2608 3 discriminator 2 view .LVU6950
 26602 002e F8D1     		bne	.L1914
2609:src/xeq.c     **** 			report_err(ERR_RANGE);
 26603              		.loc 1 2609 3 is_stmt 1 view .LVU6951
2609:src/xeq.c     **** 			report_err(ERR_RANGE);
 26604              		.loc 1 2609 6 is_stmt 0 view .LVU6952
 26605 0030 33B1     		cbz	r3, .L1898
 26606              	.L1902:
2610:src/xeq.c     **** 			return;
 26607              		.loc 1 2610 4 is_stmt 1 view .LVU6953
 26608              	.LVL2043:
 26609              	.LBB3547:
 26610              	.LBI3547:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26611              		.loc 1 540 5 view .LVU6954
 26612              	.LBB3548:
 541:src/xeq.c     **** 		Error = e;
 26613              		.loc 1 541 2 view .LVU6955
 541:src/xeq.c     **** 		Error = e;
 26614              		.loc 1 541 12 is_stmt 0 view .LVU6956
 26615 0032 0F4B     		ldr	r3, .L1915+12
 541:src/xeq.c     **** 		Error = e;
 26616              		.loc 1 541 5 view .LVU6957
 26617 0034 1A68     		ldr	r2, [r3]
 26618 0036 0AB9     		cbnz	r2, .L1896
 26619              	.LVL2044:
 26620              	.LBB3549:
 26621              	.LBI3549:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26622              		.loc 1 540 5 is_stmt 1 view .LVU6958
 26623              	.LBB3550:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 26624              		.loc 1 542 3 view .LVU6959
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 26625              		.loc 1 542 9 is_stmt 0 view .LVU6960
 26626 0038 0822     		movs	r2, #8
 26627 003a 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 26628              		.loc 1 543 3 is_stmt 1 view .LVU6961
 26629              	.LVL2045:
 26630              	.L1896:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 26631              		.loc 1 543 3 is_stmt 0 view .LVU6962
 26632              	.LBE3550:
 26633              	.LBE3549:
ARM GAS  /tmp/ccaPnj5t.s 			page 682


 26634              	.LBE3548:
 26635              	.LBE3547:
2615:src/xeq.c     **** 
 26636              		.loc 1 2615 1 view .LVU6963
 26637 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 26638              	.LVL2046:
 26639              	.L1904:
2615:src/xeq.c     **** 
 26640              		.loc 1 2615 1 view .LVU6964
 26641 003e 3046     		mov	r0, r6
 26642              	.LVL2047:
 26643              	.L1898:
2614:src/xeq.c     **** }
 26644              		.loc 1 2614 2 is_stmt 1 view .LVU6965
 26645 0040 A5F13901 		sub	r1, r5, #57
 26646 0044 B1FA81F1 		clz	r1, r1
 26647 0048 3246     		mov	r2, r6
 26648 004a 4909     		lsrs	r1, r1, #5
2615:src/xeq.c     **** 
 26649              		.loc 1 2615 1 is_stmt 0 view .LVU6966
 26650 004c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 26651              		.cfi_remember_state
 26652              		.cfi_restore 14
 26653              		.cfi_restore 7
 26654              		.cfi_restore 6
 26655              		.cfi_restore 5
 26656              		.cfi_restore 4
 26657              		.cfi_restore 3
 26658              		.cfi_def_cfa_offset 0
 26659              	.LVL2048:
2614:src/xeq.c     **** }
 26660              		.loc 1 2614 2 view .LVU6967
 26661 0050 FFF7FEBF 		b	gsbgto
 26662              	.LVL2049:
 26663              	.L1912:
 26664              		.cfi_restore_state
2600:src/xeq.c     ****         else if (arg) {
 26665              		.loc 1 2600 3 is_stmt 1 view .LVU6968
2600:src/xeq.c     ****         else if (arg) {
 26666              		.loc 1 2600 6 is_stmt 0 view .LVU6969
 26667 0054 731E     		subs	r3, r6, #1
 26668 0056 181A     		subs	r0, r3, r0
 26669              	.LVL2050:
2600:src/xeq.c     ****         else if (arg) {
 26670              		.loc 1 2600 6 view .LVU6970
 26671 0058 F2E7     		b	.L1898
 26672              	.LVL2051:
 26673              	.L1913:
2604:src/xeq.c     **** 		}
 26674              		.loc 1 2604 4 is_stmt 1 view .LVU6971
2604:src/xeq.c     **** 		}
 26675              		.loc 1 2604 9 is_stmt 0 view .LVU6972
 26676 005a 0121     		movs	r1, #1
 26677              	.LVL2052:
2604:src/xeq.c     **** 		}
 26678              		.loc 1 2604 9 view .LVU6973
 26679 005c 3046     		mov	r0, r6
ARM GAS  /tmp/ccaPnj5t.s 			page 683


 26680              	.LVL2053:
2604:src/xeq.c     **** 		}
 26681              		.loc 1 2604 9 view .LVU6974
 26682 005e FFF7FEFF 		bl	do_dec
 26683              	.LVL2054:
2604:src/xeq.c     **** 		}
 26684              		.loc 1 2604 9 view .LVU6975
 26685 0062 DCE7     		b	.L1899
 26686              	.L1916:
 26687              		.align	2
 26688              	.L1915:
 26689 0064 00000000 		.word	main_ram
 26690 0068 00000000 		.word	Running
 26691 006c 00000000 		.word	PcWrapped
 26692 0070 00000000 		.word	Error
 26693              		.cfi_endproc
 26694              	.LFE182:
 26696              		.section	.text.usergsb_common,"ax",%progbits
 26697              		.align	1
 26698              		.p2align 2,,3
 26699              		.syntax unified
 26700              		.thumb
 26701              		.thumb_func
 26702              		.fpu fpv4-sp-d16
 26704              	usergsb_common:
 26705              	.LVL2055:
 26706              	.LFB156:
2276:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26707              		.loc 1 2276 55 is_stmt 1 view -0
 26708              		.cfi_startproc
 26709              		@ args = 0, pretend = 0, frame = 0
 26710              		@ frame_needed = 0, uses_anonymous_args = 0
2277:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26711              		.loc 1 2277 2 view .LVU6977
2276:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26712              		.loc 1 2276 55 is_stmt 0 view .LVU6978
 26713 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 26714              		.cfi_def_cfa_offset 24
 26715              		.cfi_offset 4, -24
 26716              		.cfi_offset 5, -20
 26717              		.cfi_offset 6, -16
 26718              		.cfi_offset 7, -12
 26719              		.cfi_offset 8, -8
 26720              		.cfi_offset 14, -4
2277:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26721              		.loc 1 2277 26 view .LVU6979
 26722 0004 1C4D     		ldr	r5, .L1921
2278:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26723              		.loc 1 2278 2 view .LVU6980
 26724 0006 1D4F     		ldr	r7, .L1921+4
2277:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26725              		.loc 1 2277 26 view .LVU6981
 26726 0008 2B68     		ldr	r3, [r5]
2278:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26727              		.loc 1 2278 2 view .LVU6982
 26728 000a 3A68     		ldr	r2, [r7]
2277:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
ARM GAS  /tmp/ccaPnj5t.s 			page 684


 26729              		.loc 1 2277 21 view .LVU6983
 26730 000c B3F8E047 		ldrh	r4, [r3, #2016]
 26731              	.LVL2056:
2278:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26732              		.loc 1 2278 2 is_stmt 1 view .LVU6984
2280:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26733              		.loc 1 2280 2 is_stmt 0 view .LVU6985
 26734 0010 DFF87480 		ldr	r8, .L1921+16
2276:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26735              		.loc 1 2276 55 view .LVU6986
 26736 0014 0646     		mov	r6, r0
2278:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26737              		.loc 1 2278 2 view .LVU6987
 26738 0016 0121     		movs	r1, #1
 26739 0018 2046     		mov	r0, r4
 26740              	.LVL2057:
2278:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26741              		.loc 1 2278 2 view .LVU6988
 26742 001a FFF7FEFF 		bl	gsbgto
 26743              	.LVL2058:
2279:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26744              		.loc 1 2279 2 is_stmt 1 view .LVU6989
2279:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26745              		.loc 1 2279 16 is_stmt 0 view .LVU6990
 26746 001e 2B68     		ldr	r3, [r5]
2279:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26747              		.loc 1 2279 2 view .LVU6991
 26748 0020 2046     		mov	r0, r4
 26749 0022 B3F9DE27 		ldrsh	r2, [r3, #2014]
 26750 0026 0121     		movs	r1, #1
 26751 0028 FFF7FEFF 		bl	gsbgto
 26752              	.LVL2059:
2280:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26753              		.loc 1 2280 2 is_stmt 1 view .LVU6992
 26754 002c 2046     		mov	r0, r4
 26755 002e D8F80020 		ldr	r2, [r8]
 26756 0032 0121     		movs	r1, #1
 26757 0034 FFF7FEFF 		bl	gsbgto
 26758              	.LVL2060:
2281:src/xeq.c     **** 
 26759              		.loc 1 2281 2 view .LVU6993
 26760 0038 2246     		mov	r2, r4
 26761 003a 3046     		mov	r0, r6
 26762 003c 0121     		movs	r1, #1
 26763 003e FFF7FEFF 		bl	gsbgto
 26764              	.LVL2061:
2283:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26765              		.loc 1 2283 2 view .LVU6994
2284:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26766              		.loc 1 2284 9 is_stmt 0 view .LVU6995
 26767 0042 2A68     		ldr	r2, [r5]
2284:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26768              		.loc 1 2284 20 view .LVU6996
 26769 0044 0E4B     		ldr	r3, .L1921+8
 26770 0046 B2F9DE07 		ldrsh	r0, [r2, #2014]
 26771 004a 1968     		ldr	r1, [r3]
2286:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
ARM GAS  /tmp/ccaPnj5t.s 			page 685


 26772              		.loc 1 2286 6 view .LVU6997
 26773 004c 0D4C     		ldr	r4, .L1921+12
 26774              	.LVL2062:
2284:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26775              		.loc 1 2284 20 view .LVU6998
 26776 004e 31F81030 		ldrh	r3, [r1, r0, lsl #1]
2286:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26777              		.loc 1 2286 5 view .LVU6999
 26778 0052 2468     		ldr	r4, [r4]
2285:src/xeq.c     **** 	if (! Running)
 26779              		.loc 1 2285 12 view .LVU7000
 26780 0054 D8F80050 		ldr	r5, [r8]
2283:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26781              		.loc 1 2283 13 view .LVU7001
 26782 0058 0026     		movs	r6, #0
2284:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26783              		.loc 1 2284 20 view .LVU7002
 26784 005a 43F40053 		orr	r3, r3, #8192
2283:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26785              		.loc 1 2283 13 view .LVU7003
 26786 005e 3E60     		str	r6, [r7]
2284:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26787              		.loc 1 2284 2 is_stmt 1 view .LVU7004
2284:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26788              		.loc 1 2284 20 is_stmt 0 view .LVU7005
 26789 0060 21F81030 		strh	r3, [r1, r0, lsl #1]	@ movhi
2285:src/xeq.c     **** 	if (! Running)
 26790              		.loc 1 2285 2 is_stmt 1 view .LVU7006
2285:src/xeq.c     **** 	if (! Running)
 26791              		.loc 1 2285 12 is_stmt 0 view .LVU7007
 26792 0064 A2F8DE57 		strh	r5, [r2, #2014]	@ movhi
2286:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26793              		.loc 1 2286 2 is_stmt 1 view .LVU7008
2286:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26794              		.loc 1 2286 5 is_stmt 0 view .LVU7009
 26795 0068 0CB1     		cbz	r4, .L1920
2289:src/xeq.c     **** 
 26796              		.loc 1 2289 1 view .LVU7010
 26797 006a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 26798              	.L1920:
2287:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26799              		.loc 1 2287 3 is_stmt 1 view .LVU7011
2289:src/xeq.c     **** 
 26800              		.loc 1 2289 1 is_stmt 0 view .LVU7012
 26801 006e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 26802              		.cfi_restore 14
 26803              		.cfi_restore 8
 26804              		.cfi_restore 7
 26805              		.cfi_restore 6
 26806              		.cfi_restore 5
 26807              		.cfi_restore 4
 26808              		.cfi_def_cfa_offset 0
2287:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26809              		.loc 1 2287 3 view .LVU7013
 26810 0072 FFF7FEBF 		b	set_running_on
 26811              	.LVL2063:
 26812              	.L1922:
ARM GAS  /tmp/ccaPnj5t.s 			page 686


 26813 0076 00BF     		.align	2
 26814              	.L1921:
 26815 0078 00000000 		.word	main_ram
 26816 007c 00000000 		.word	XromUserPc
 26817 0080 00000000 		.word	RetStk
 26818 0084 00000000 		.word	Running
 26819 0088 00000000 		.word	UserLocalRegs
 26820              		.cfi_endproc
 26821              	.LFE156:
 26823              		.section	.text.do_usergsb,"ax",%progbits
 26824              		.align	1
 26825              		.p2align 2,,3
 26826              		.global	do_usergsb
 26827              		.syntax unified
 26828              		.thumb
 26829              		.thumb_func
 26830              		.fpu fpv4-sp-d16
 26832              	do_usergsb:
 26833              	.LVL2064:
 26834              	.LFB157:
2295:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26835              		.loc 1 2295 32 is_stmt 1 view -0
 26836              		.cfi_startproc
 26837              		@ args = 0, pretend = 0, frame = 0
 26838              		@ frame_needed = 0, uses_anonymous_args = 0
2296:src/xeq.c     ****         fill(OP_FILL);
 26839              		.loc 1 2296 2 view .LVU7015
2295:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26840              		.loc 1 2295 32 is_stmt 0 view .LVU7016
 26841 0000 08B5     		push	{r3, lr}
 26842              		.cfi_def_cfa_offset 8
 26843              		.cfi_offset 3, -8
 26844              		.cfi_offset 14, -4
2296:src/xeq.c     ****         fill(OP_FILL);
 26845              		.loc 1 2296 2 view .LVU7017
 26846 0002 044B     		ldr	r3, .L1925
 26847 0004 1888     		ldrh	r0, [r3]
 26848              	.LVL2065:
2296:src/xeq.c     ****         fill(OP_FILL);
 26849              		.loc 1 2296 2 view .LVU7018
 26850 0006 FFF7FEFF 		bl	usergsb_common
 26851              	.LVL2066:
2297:src/xeq.c     **** }
 26852              		.loc 1 2297 9 is_stmt 1 view .LVU7019
2298:src/xeq.c     **** 
 26853              		.loc 1 2298 1 is_stmt 0 view .LVU7020
 26854 000a BDE80840 		pop	{r3, lr}
 26855              		.cfi_restore 14
 26856              		.cfi_restore 3
 26857              		.cfi_def_cfa_offset 0
2297:src/xeq.c     **** }
 26858              		.loc 1 2297 9 view .LVU7021
 26859 000e 0C20     		movs	r0, #12
 26860 0010 FFF7FEBF 		b	fill
 26861              	.LVL2067:
 26862              	.L1926:
 26863              		.align	2
ARM GAS  /tmp/ccaPnj5t.s 			page 687


 26864              	.L1925:
 26865 0014 00000000 		.word	XromUserPc
 26866              		.cfi_endproc
 26867              	.LFE157:
 26869              		.section	.text.cmdmultigto,"ax",%progbits
 26870              		.align	1
 26871              		.p2align 2,,3
 26872              		.global	cmdmultigto
 26873              		.syntax unified
 26874              		.thumb
 26875              		.thumb_func
 26876              		.fpu fpv4-sp-d16
 26878              	cmdmultigto:
 26879              	.LVL2068:
 26880              	.LFB164:
2354:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26881              		.loc 1 2354 54 is_stmt 1 view -0
 26882              		.cfi_startproc
 26883              		@ args = 0, pretend = 0, frame = 0
 26884              		@ frame_needed = 0, uses_anonymous_args = 0
2355:src/xeq.c     **** 		// In XROM the command behaves differently!
 26885              		.loc 1 2355 2 view .LVU7023
2355:src/xeq.c     **** 		// In XROM the command behaves differently!
 26886              		.loc 1 2355 5 is_stmt 0 view .LVU7024
 26887 0000 0229     		cmp	r1, #2
2354:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26888              		.loc 1 2354 54 view .LVU7025
 26889 0002 10B5     		push	{r4, lr}
 26890              		.cfi_def_cfa_offset 8
 26891              		.cfi_offset 4, -8
 26892              		.cfi_offset 14, -4
2354:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26893              		.loc 1 2354 54 view .LVU7026
 26894 0004 0346     		mov	r3, r0
 26895 0006 0C46     		mov	r4, r1
2355:src/xeq.c     **** 		// In XROM the command behaves differently!
 26896              		.loc 1 2355 5 view .LVU7027
 26897 0008 06D1     		bne	.L1928
 26898              	.LBB3551:
 26899              	.LBI3551:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 26900              		.loc 1 185 5 is_stmt 1 view .LVU7028
 26901              	.LBB3552:
 186:src/xeq.c     **** }
 26902              		.loc 1 186 2 view .LVU7029
 186:src/xeq.c     **** }
 26903              		.loc 1 186 9 is_stmt 0 view .LVU7030
 26904 000a 104A     		ldr	r2, .L1932
 26905 000c 1268     		ldr	r2, [r2]
 26906 000e B2F8E027 		ldrh	r2, [r2, #2016]
 26907              	.LBE3552:
 26908              	.LBE3551:
2355:src/xeq.c     **** 		// In XROM the command behaves differently!
 26909              		.loc 1 2355 22 view .LVU7031
 26910 0012 920B     		lsrs	r2, r2, #14
 26911 0014 032A     		cmp	r2, #3
 26912 0016 0BD0     		beq	.L1931
ARM GAS  /tmp/ccaPnj5t.s 			page 688


 26913              	.L1928:
2364:src/xeq.c     **** 	}
 26914              		.loc 1 2364 3 is_stmt 1 view .LVU7032
 26915 0018 0121     		movs	r1, #1
 26916              	.LVL2069:
2364:src/xeq.c     **** 	}
 26917              		.loc 1 2364 3 is_stmt 0 view .LVU7033
 26918 001a 1846     		mov	r0, r3
 26919              	.LVL2070:
2364:src/xeq.c     **** 	}
 26920              		.loc 1 2364 3 view .LVU7034
 26921 001c FFF7FEFF 		bl	findmultilbl
 26922              	.LVL2071:
2364:src/xeq.c     **** 	}
 26923              		.loc 1 2364 3 view .LVU7035
 26924 0020 0146     		mov	r1, r0
 26925 0022 E01E     		subs	r0, r4, #3
 26926 0024 18BF     		it	ne
 26927 0026 0120     		movne	r0, #1
2366:src/xeq.c     **** 
 26928              		.loc 1 2366 1 view .LVU7036
 26929 0028 BDE81040 		pop	{r4, lr}
 26930              		.cfi_remember_state
 26931              		.cfi_restore 14
 26932              		.cfi_restore 4
 26933              		.cfi_def_cfa_offset 0
2364:src/xeq.c     **** 	}
 26934              		.loc 1 2364 3 view .LVU7037
 26935 002c FFF7FEBF 		b	cmdgtocommon
 26936              	.LVL2072:
 26937              	.L1931:
 26938              		.cfi_restore_state
 26939              	.LBB3553:
2357:src/xeq.c     **** 		if (target != 0)
 26940              		.loc 1 2357 3 is_stmt 1 view .LVU7038
2357:src/xeq.c     **** 		if (target != 0)
 26941              		.loc 1 2357 31 is_stmt 0 view .LVU7039
 26942 0030 0021     		movs	r1, #0
 26943              	.LVL2073:
2357:src/xeq.c     **** 		if (target != 0)
 26944              		.loc 1 2357 31 view .LVU7040
 26945 0032 FFF7FEFF 		bl	findmultilbl
 26946              	.LVL2074:
2357:src/xeq.c     **** 		if (target != 0)
 26947              		.loc 1 2357 22 view .LVU7041
 26948 0036 80B2     		uxth	r0, r0
 26949              	.LVL2075:
2358:src/xeq.c     **** 			usergsb_common(target); 
 26950              		.loc 1 2358 3 is_stmt 1 view .LVU7042
2358:src/xeq.c     **** 			usergsb_common(target); 
 26951              		.loc 1 2358 6 is_stmt 0 view .LVU7043
 26952 0038 18B1     		cbz	r0, .L1929
2359:src/xeq.c     **** 		else
 26953              		.loc 1 2359 4 is_stmt 1 view .LVU7044
 26954              	.LBE3553:
2366:src/xeq.c     **** 
 26955              		.loc 1 2366 1 is_stmt 0 view .LVU7045
ARM GAS  /tmp/ccaPnj5t.s 			page 689


 26956 003a BDE81040 		pop	{r4, lr}
 26957              		.cfi_remember_state
 26958              		.cfi_restore 14
 26959              		.cfi_restore 4
 26960              		.cfi_def_cfa_offset 0
 26961              	.LBB3554:
2359:src/xeq.c     **** 		else
 26962              		.loc 1 2359 4 view .LVU7046
 26963 003e FFF7FEBF 		b	usergsb_common
 26964              	.LVL2076:
 26965              	.L1929:
 26966              		.cfi_restore_state
2361:src/xeq.c     **** 	}
 26967              		.loc 1 2361 4 is_stmt 1 view .LVU7047
 26968              	.LBE3554:
2366:src/xeq.c     **** 
 26969              		.loc 1 2366 1 is_stmt 0 view .LVU7048
 26970 0042 BDE81040 		pop	{r4, lr}
 26971              		.cfi_restore 14
 26972              		.cfi_restore 4
 26973              		.cfi_def_cfa_offset 0
 26974              	.LBB3555:
2361:src/xeq.c     **** 	}
 26975              		.loc 1 2361 4 view .LVU7049
 26976 0046 FFF7FEBF 		b	incpc
 26977              	.LVL2077:
 26978              	.L1933:
2361:src/xeq.c     **** 	}
 26979              		.loc 1 2361 4 view .LVU7050
 26980 004a 00BF     		.align	2
 26981              	.L1932:
 26982 004c 00000000 		.word	main_ram
 26983              	.LBE3555:
 26984              		.cfi_endproc
 26985              	.LFE164:
 26987              		.section	.text.store_a_to_d,"ax",%progbits
 26988              		.align	1
 26989              		.p2align 2,,3
 26990              		.global	store_a_to_d
 26991              		.syntax unified
 26992              		.thumb
 26993              		.thumb_func
 26994              		.fpu fpv4-sp-d16
 26996              	store_a_to_d:
 26997              	.LVL2078:
 26998              	.LFB262:
5805:src/xeq.c     **** 
5806:src/xeq.c     **** /* Command to stash registers A through D into volatile RAM and to restore them
5807:src/xeq.c     ****  * again.
5808:src/xeq.c     ****  */
5809:src/xeq.c     **** void store_a_to_d(enum nilop op) {
 26999              		.loc 1 5809 34 is_stmt 1 view -0
 27000              		.cfi_startproc
 27001              		@ args = 0, pretend = 0, frame = 0
 27002              		@ frame_needed = 0, uses_anonymous_args = 0
5810:src/xeq.c     **** 	const void *src = XromA2D;
 27003              		.loc 1 5810 2 view .LVU7052
ARM GAS  /tmp/ccaPnj5t.s 			page 690


5811:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27004              		.loc 1 5811 2 view .LVU7053
5809:src/xeq.c     **** 	const void *src = XromA2D;
 27005              		.loc 1 5809 34 is_stmt 0 view .LVU7054
 27006 0000 10B5     		push	{r4, lr}
 27007              		.cfi_def_cfa_offset 8
 27008              		.cfi_offset 4, -8
 27009              		.cfi_offset 14, -4
5809:src/xeq.c     **** 	const void *src = XromA2D;
 27010              		.loc 1 5809 34 view .LVU7055
 27011 0002 0446     		mov	r4, r0
 27012              		.loc 1 5811 15 view .LVU7056
 27013 0004 6820     		movs	r0, #104
 27014              	.LVL2079:
 27015              		.loc 1 5811 15 view .LVU7057
 27016 0006 FFF7FEFF 		bl	get_reg_n
 27017              	.LVL2080:
5812:src/xeq.c     **** 
5813:src/xeq.c     **** 	if (op == OP_SAVEA2D) {
 27018              		.loc 1 5813 2 is_stmt 1 view .LVU7058
 27019              		.loc 1 5813 5 is_stmt 0 view .LVU7059
 27020 000a 802C     		cmp	r4, #128
5814:src/xeq.c     **** 		src = dest;
 27021              		.loc 1 5814 7 view .LVU7060
 27022 000c 08BF     		it	eq
 27023 000e 0146     		moveq	r1, r0
5815:src/xeq.c     **** 		dest = XromA2D;
5816:src/xeq.c     **** 	}
5817:src/xeq.c     **** 	xcopy(dest, src, sizeof(REGISTER) * 4);
5818:src/xeq.c     **** }
 27024              		.loc 1 5818 1 view .LVU7061
 27025 0010 BDE81040 		pop	{r4, lr}
 27026              		.cfi_restore 14
 27027              		.cfi_restore 4
 27028              		.cfi_def_cfa_offset 0
5815:src/xeq.c     **** 		dest = XromA2D;
 27029              		.loc 1 5815 8 view .LVU7062
 27030 0014 0CBF     		ite	eq
 27031 0016 0248     		ldreq	r0, .L1938
 27032              	.LVL2081:
5810:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27033              		.loc 1 5810 14 view .LVU7063
 27034 0018 0149     		ldrne	r1, .L1938
 27035              	.LVL2082:
5817:src/xeq.c     **** }
 27036              		.loc 1 5817 2 is_stmt 1 view .LVU7064
 27037 001a 4022     		movs	r2, #64
 27038 001c FFF7FEBF 		b	xcopy
 27039              	.LVL2083:
 27040              	.L1939:
5817:src/xeq.c     **** }
 27041              		.loc 1 5817 2 is_stmt 0 view .LVU7065
 27042              		.align	2
 27043              	.L1938:
 27044 0020 00000000 		.word	XromA2D
 27045              		.cfi_endproc
 27046              	.LFE262:
ARM GAS  /tmp/ccaPnj5t.s 			page 691


 27048              		.section	.text.cmdlocr,"ax",%progbits
 27049              		.align	1
 27050              		.p2align 2,,3
 27051              		.global	cmdlocr
 27052              		.syntax unified
 27053              		.thumb
 27054              		.thumb_func
 27055              		.fpu fpv4-sp-d16
 27057              	cmdlocr:
 27058              	.LVL2084:
 27059              	.LFB263:
5819:src/xeq.c     **** 
5820:src/xeq.c     **** /*
5821:src/xeq.c     ****  *  Command to support local variables.
5822:src/xeq.c     ****  *  A stack frame is constructed:
5823:src/xeq.c     ****  *	marker including size of frame,
5824:src/xeq.c     ****  *	register + flag area.
5825:src/xeq.c     ****  *  Registers must reside on even stack positions
5826:src/xeq.c     ****  *  so the flag word is either at the top or at the bottom of the frame.
5827:src/xeq.c     ****  */
5828:src/xeq.c     **** void cmdlocr(unsigned int arg, enum rarg op) {
 27060              		.loc 1 5828 46 is_stmt 1 view -0
 27061              		.cfi_startproc
 27062              		@ args = 0, pretend = 0, frame = 0
 27063              		@ frame_needed = 0, uses_anonymous_args = 0
5829:src/xeq.c     **** 	short int sp = RetStkPtr;
 27064              		.loc 1 5829 2 view .LVU7067
5828:src/xeq.c     **** 	short int sp = RetStkPtr;
 27065              		.loc 1 5828 46 is_stmt 0 view .LVU7068
 27066 0000 2DE9F84F 		push	{r3, r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27067              		.cfi_def_cfa_offset 40
 27068              		.cfi_offset 3, -40
 27069              		.cfi_offset 4, -36
 27070              		.cfi_offset 5, -32
 27071              		.cfi_offset 6, -28
 27072              		.cfi_offset 7, -24
 27073              		.cfi_offset 8, -20
 27074              		.cfi_offset 9, -16
 27075              		.cfi_offset 10, -12
 27076              		.cfi_offset 11, -8
 27077              		.cfi_offset 14, -4
 27078              		.loc 1 5829 17 view .LVU7069
 27079 0004 554F     		ldr	r7, .L1960
 27080 0006 3C68     		ldr	r4, [r7]
 27081              	.LBB3565:
 27082              	.LBB3566:
1101:src/xeq.c     **** }
 27083              		.loc 1 1101 24 view .LVU7070
 27084 0008 B4F8E827 		ldrh	r2, [r4, #2024]
 27085              	.LBE3566:
 27086              	.LBE3565:
 27087              		.loc 1 5829 12 view .LVU7071
 27088 000c B4F9E267 		ldrsh	r6, [r4, #2018]
 27089              	.LVL2085:
5830:src/xeq.c     **** 	int size = (arg << (is_dblmode() ? 3 : 2)) + 2;
 27090              		.loc 1 5830 2 is_stmt 1 view .LVU7072
 27091              	.LBB3568:
ARM GAS  /tmp/ccaPnj5t.s 			page 692


 27092              	.LBI3565:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27093              		.loc 1 1100 5 view .LVU7073
 27094              	.LBB3567:
1101:src/xeq.c     **** }
 27095              		.loc 1 1101 2 view .LVU7074
1101:src/xeq.c     **** }
 27096              		.loc 1 1101 24 is_stmt 0 view .LVU7075
 27097 0010 44F20103 		movw	r3, #16385
 27098              	.LBE3567:
 27099              	.LBE3568:
 27100              		.loc 1 5830 39 view .LVU7076
 27101 0014 1340     		ands	r3, r3, r2
 27102 0016 B3F5804F 		cmp	r3, #16384
 27103 001a 0CBF     		ite	eq
 27104 001c 0325     		moveq	r5, #3
 27105 001e 0225     		movne	r5, #2
 27106              		.loc 1 5830 18 view .LVU7077
 27107 0020 A840     		lsls	r0, r0, r5
 27108              	.LVL2086:
 27109              		.loc 1 5830 45 view .LVU7078
 27110 0022 851C     		adds	r5, r0, #2
 27111              	.LVL2087:
5831:src/xeq.c     **** 	const unsigned short marker = LOCAL_MARKER | size;
 27112              		.loc 1 5831 2 is_stmt 1 view .LVU7079
 27113              		.loc 1 5831 45 is_stmt 0 view .LVU7080
 27114 0024 1FFA85F8 		uxth	r8, r5
 27115              	.LVL2088:
5832:src/xeq.c     **** 	int old_size = 0;
 27116              		.loc 1 5832 2 is_stmt 1 view .LVU7081
5833:src/xeq.c     **** 	short unsigned int old_flags = 0;
 27117              		.loc 1 5833 2 view .LVU7082
5834:src/xeq.c     **** 
5835:src/xeq.c     **** 	if (sp != 0 && sp == LocalRegs) {
 27118              		.loc 1 5835 2 view .LVU7083
 27119              		.loc 1 5835 5 is_stmt 0 view .LVU7084
 27120 0028 7EB9     		cbnz	r6, .L1942
 27121              	.LVL2089:
5836:src/xeq.c     **** 		// resize required
5837:src/xeq.c     **** 		old_size = local_levels();
5838:src/xeq.c     **** 		sp += old_size;
5839:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5840:src/xeq.c     **** 	}
5841:src/xeq.c     **** 	// compute space needed
5842:src/xeq.c     **** 	sp -= size;
 27122              		.loc 1 5842 2 is_stmt 1 view .LVU7085
5843:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27123              		.loc 1 5843 10 is_stmt 0 view .LVU7086
 27124 002a 4D4B     		ldr	r3, .L1960+4
5842:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27125              		.loc 1 5842 5 view .LVU7087
 27126 002c C8F10004 		rsb	r4, r8, #0
 27127              		.loc 1 5843 5 view .LVU7088
 27128 0030 1B68     		ldr	r3, [r3]
5842:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27129              		.loc 1 5842 5 view .LVU7089
 27130 0032 24B2     		sxth	r4, r4
ARM GAS  /tmp/ccaPnj5t.s 			page 693


 27131              	.LVL2090:
 27132              		.loc 1 5843 2 is_stmt 1 view .LVU7090
 27133              		.loc 1 5843 6 is_stmt 0 view .LVU7091
 27134 0034 6242     		rsbs	r2, r4, #0
 27135              		.loc 1 5843 5 view .LVU7092
 27136 0036 9A42     		cmp	r2, r3
 27137 0038 42DC     		bgt	.L1948
 27138 003a 4FEA4409 		lsl	r9, r4, #1
 27139 003e DFF828B1 		ldr	fp, .L1960+12
 27140 0042 4FEA450A 		lsl	r10, r5, #1
 27141 0046 4B46     		mov	r3, r9
 27142 0048 13E0     		b	.L1946
 27143              	.LVL2091:
 27144              	.L1942:
5835:src/xeq.c     **** 		// resize required
 27145              		.loc 1 5835 23 discriminator 1 view .LVU7093
 27146 004a B4F9DE47 		ldrsh	r4, [r4, #2014]
5835:src/xeq.c     **** 		// resize required
 27147              		.loc 1 5835 14 discriminator 1 view .LVU7094
 27148 004e B442     		cmp	r4, r6
 27149 0050 28D0     		beq	.L1947
5842:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27150              		.loc 1 5842 2 is_stmt 1 view .LVU7095
 27151              		.loc 1 5843 10 is_stmt 0 view .LVU7096
 27152 0052 434B     		ldr	r3, .L1960+4
5842:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27153              		.loc 1 5842 5 view .LVU7097
 27154 0054 A6EB0804 		sub	r4, r6, r8
 27155              		.loc 1 5843 5 view .LVU7098
 27156 0058 1B68     		ldr	r3, [r3]
5842:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27157              		.loc 1 5842 5 view .LVU7099
 27158 005a 24B2     		sxth	r4, r4
 27159              	.LVL2092:
 27160              		.loc 1 5843 2 is_stmt 1 view .LVU7100
 27161              		.loc 1 5843 6 is_stmt 0 view .LVU7101
 27162 005c 6242     		rsbs	r2, r4, #0
 27163              		.loc 1 5843 5 view .LVU7102
 27164 005e 9A42     		cmp	r2, r3
 27165 0060 2EDC     		bgt	.L1948
 27166 0062 4FEA4409 		lsl	r9, r4, #1
 27167 0066 DFF800B1 		ldr	fp, .L1960+12
 27168 006a 4FEA450A 		lsl	r10, r5, #1
 27169 006e 4B46     		mov	r3, r9
5833:src/xeq.c     **** 
 27170              		.loc 1 5833 21 view .LVU7103
 27171 0070 0026     		movs	r6, #0
 27172              	.LVL2093:
 27173              	.L1946:
5844:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
5845:src/xeq.c     **** 		return;
5846:src/xeq.c     **** 	}
5847:src/xeq.c     **** 	if ( old_size > 0 ) {
5848:src/xeq.c     **** 		// move previous contents to new destination
5849:src/xeq.c     **** 		int n;
5850:src/xeq.c     **** 		if (size > old_size) {
5851:src/xeq.c     **** 			n = old_size;
ARM GAS  /tmp/ccaPnj5t.s 			page 694


5852:src/xeq.c     **** 			size -= old_size;
5853:src/xeq.c     **** 		}
5854:src/xeq.c     **** 		else {
5855:src/xeq.c     **** 			n = size;
5856:src/xeq.c     **** 			size = 0;
5857:src/xeq.c     **** 		}
5858:src/xeq.c     **** 		xcopy(RetStk + sp, RetStk + LocalRegs, n + n);
5859:src/xeq.c     **** 	}
5860:src/xeq.c     **** 	// fill the rest with 0
5861:src/xeq.c     **** 	xset(RetStk + sp + old_size, 0, size + size);
 27174              		.loc 1 5861 2 is_stmt 1 view .LVU7104
 27175              		.loc 1 5861 19 is_stmt 0 view .LVU7105
 27176 0072 DBF80000 		ldr	r0, [fp]
 27177              		.loc 1 5861 2 view .LVU7106
 27178 0076 5246     		mov	r2, r10
 27179 0078 1844     		add	r0, r0, r3
 27180 007a 0021     		movs	r1, #0
 27181 007c FFF7FEFF 		bl	xset
 27182              	.LVL2094:
5862:src/xeq.c     **** 
5863:src/xeq.c     **** 	// set marker, pointers and flags
5864:src/xeq.c     **** 	RetStk[sp] = marker;
 27183              		.loc 1 5864 2 is_stmt 1 view .LVU7107
5865:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27184              		.loc 1 5865 14 is_stmt 0 view .LVU7108
 27185 0080 3B68     		ldr	r3, [r7]
5864:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27186              		.loc 1 5864 13 view .LVU7109
 27187 0082 DBF80020 		ldr	r2, [fp]
5831:src/xeq.c     **** 	int old_size = 0;
 27188              		.loc 1 5831 23 view .LVU7110
 27189 0086 48F48058 		orr	r8, r8, #4096
 27190              	.LVL2095:
5864:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27191              		.loc 1 5864 13 view .LVU7111
 27192 008a 22F80980 		strh	r8, [r2, r9]	@ movhi
 27193              		.loc 1 5865 2 is_stmt 1 view .LVU7112
5866:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27194              		.loc 1 5866 3 is_stmt 0 view .LVU7113
 27195 008e 0021     		movs	r1, #0
5865:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27196              		.loc 1 5865 24 view .LVU7114
 27197 0090 A3F8DE47 		strh	r4, [r3, #2014]	@ movhi
5865:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27198              		.loc 1 5865 12 view .LVU7115
 27199 0094 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
 27200              		.loc 1 5866 2 is_stmt 1 view .LVU7116
 27201              		.loc 1 5866 3 is_stmt 0 view .LVU7117
 27202 0098 7020     		movs	r0, #112
 27203 009a FFF7FEFF 		bl	flag_word
 27204              	.LVL2096:
 27205              		.loc 1 5866 36 view .LVU7118
 27206 009e 0680     		strh	r6, [r0]	@ movhi
 27207              	.L1940:
5867:src/xeq.c     **** }
 27208              		.loc 1 5867 1 view .LVU7119
 27209 00a0 BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
ARM GAS  /tmp/ccaPnj5t.s 			page 695


 27210              	.LVL2097:
 27211              	.L1947:
5837:src/xeq.c     **** 		sp += old_size;
 27212              		.loc 1 5837 3 is_stmt 1 view .LVU7120
 27213              	.LBB3569:
 27214              	.LBI3569:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 27215              		.loc 1 217 5 view .LVU7121
 27216              	.LBB3570:
 218:src/xeq.c     **** }
 27217              		.loc 1 218 2 view .LVU7122
 218:src/xeq.c     **** }
 27218              		.loc 1 218 57 is_stmt 0 view .LVU7123
 27219 00a4 002C     		cmp	r4, #0
 27220 00a6 13DB     		blt	.L1957
 218:src/xeq.c     **** }
 27221              		.loc 1 218 57 view .LVU7124
 27222              	.LBE3570:
 27223              	.LBE3569:
5838:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27224              		.loc 1 5838 3 is_stmt 1 view .LVU7125
 27225              	.LVL2098:
5839:src/xeq.c     **** 	}
 27226              		.loc 1 5839 3 view .LVU7126
5839:src/xeq.c     **** 	}
 27227              		.loc 1 5839 16 is_stmt 0 view .LVU7127
 27228 00a8 0021     		movs	r1, #0
 27229              	.LVL2099:
5839:src/xeq.c     **** 	}
 27230              		.loc 1 5839 16 view .LVU7128
 27231 00aa 7020     		movs	r0, #112
 27232 00ac FFF7FEFF 		bl	flag_word
 27233              	.LVL2100:
5843:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27234              		.loc 1 5843 10 view .LVU7129
 27235 00b0 2B4B     		ldr	r3, .L1960+4
5842:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27236              		.loc 1 5842 5 view .LVU7130
 27237 00b2 A4EB0804 		sub	r4, r4, r8
 27238              	.LVL2101:
5843:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27239              		.loc 1 5843 5 view .LVU7131
 27240 00b6 1B68     		ldr	r3, [r3]
5842:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27241              		.loc 1 5842 5 view .LVU7132
 27242 00b8 24B2     		sxth	r4, r4
5843:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27243              		.loc 1 5843 6 view .LVU7133
 27244 00ba 6242     		rsbs	r2, r4, #0
 27245              	.LVL2102:
5842:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27246              		.loc 1 5842 2 is_stmt 1 view .LVU7134
5843:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27247              		.loc 1 5843 2 view .LVU7135
5843:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27248              		.loc 1 5843 5 is_stmt 0 view .LVU7136
 27249 00bc 9A42     		cmp	r2, r3
ARM GAS  /tmp/ccaPnj5t.s 			page 696


 27250 00be 3EDD     		ble	.L1958
 27251              	.LVL2103:
 27252              	.L1948:
5844:src/xeq.c     **** 		return;
 27253              		.loc 1 5844 3 is_stmt 1 view .LVU7137
 27254              	.LBB3572:
 27255              	.LBI3572:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27256              		.loc 1 540 5 view .LVU7138
 27257              	.LBB3573:
 541:src/xeq.c     **** 		Error = e;
 27258              		.loc 1 541 2 view .LVU7139
 541:src/xeq.c     **** 		Error = e;
 27259              		.loc 1 541 12 is_stmt 0 view .LVU7140
 27260 00c0 284B     		ldr	r3, .L1960+8
 541:src/xeq.c     **** 		Error = e;
 27261              		.loc 1 541 5 view .LVU7141
 27262 00c2 1A68     		ldr	r2, [r3]
 27263 00c4 002A     		cmp	r2, #0
 27264 00c6 EBD1     		bne	.L1940
 27265              	.LVL2104:
 27266              	.LBB3574:
 27267              	.LBI3574:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27268              		.loc 1 540 5 is_stmt 1 view .LVU7142
 27269              	.LBB3575:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 27270              		.loc 1 542 3 view .LVU7143
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 27271              		.loc 1 542 9 is_stmt 0 view .LVU7144
 27272 00c8 0B22     		movs	r2, #11
 27273 00ca 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 27274              		.loc 1 543 3 is_stmt 1 view .LVU7145
 27275              	.LBE3575:
 27276              	.LBE3574:
 27277              	.LBE3573:
 27278              	.LBE3572:
 27279              		.loc 1 5867 1 is_stmt 0 view .LVU7146
 27280 00cc BDE8F88F 		pop	{r3, r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27281              	.LVL2105:
 27282              	.L1957:
 27283              	.LBB3576:
 27284              	.LBB3571:
 218:src/xeq.c     **** }
 27285              		.loc 1 218 25 view .LVU7147
 27286 00d0 DFF894B0 		ldr	fp, .L1960+12
 27287 00d4 DBF80030 		ldr	r3, [fp]
 27288 00d8 33F81490 		ldrh	r9, [r3, r4, lsl #1]
 27289 00dc C9F30B09 		ubfx	r9, r9, #0, #12
 27290              	.LVL2106:
 218:src/xeq.c     **** }
 27291              		.loc 1 218 25 view .LVU7148
 27292              	.LBE3571:
 27293              	.LBE3576:
5838:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27294              		.loc 1 5838 3 is_stmt 1 view .LVU7149
ARM GAS  /tmp/ccaPnj5t.s 			page 697


5838:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27295              		.loc 1 5838 6 is_stmt 0 view .LVU7150
 27296 00e0 4C44     		add	r4, r4, r9
5839:src/xeq.c     **** 	}
 27297              		.loc 1 5839 16 view .LVU7151
 27298 00e2 0021     		movs	r1, #0
 27299              	.LVL2107:
5839:src/xeq.c     **** 	}
 27300              		.loc 1 5839 16 view .LVU7152
 27301 00e4 7020     		movs	r0, #112
 27302 00e6 FFF7FEFF 		bl	flag_word
 27303              	.LVL2108:
5838:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27304              		.loc 1 5838 6 view .LVU7153
 27305 00ea A4B2     		uxth	r4, r4
 27306              	.LVL2109:
5839:src/xeq.c     **** 	}
 27307              		.loc 1 5839 3 is_stmt 1 view .LVU7154
5843:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27308              		.loc 1 5843 10 is_stmt 0 view .LVU7155
 27309 00ec 1C4B     		ldr	r3, .L1960+4
5839:src/xeq.c     **** 	}
 27310              		.loc 1 5839 13 view .LVU7156
 27311 00ee 0688     		ldrh	r6, [r0]
 27312              	.LVL2110:
5842:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27313              		.loc 1 5842 2 is_stmt 1 view .LVU7157
5843:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27314              		.loc 1 5843 5 is_stmt 0 view .LVU7158
 27315 00f0 1B68     		ldr	r3, [r3]
5842:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27316              		.loc 1 5842 5 view .LVU7159
 27317 00f2 A4EB0804 		sub	r4, r4, r8
 27318              	.LVL2111:
5842:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27319              		.loc 1 5842 5 view .LVU7160
 27320 00f6 24B2     		sxth	r4, r4
 27321              	.LVL2112:
5843:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27322              		.loc 1 5843 2 is_stmt 1 view .LVU7161
5843:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27323              		.loc 1 5843 6 is_stmt 0 view .LVU7162
 27324 00f8 6242     		rsbs	r2, r4, #0
5843:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27325              		.loc 1 5843 5 view .LVU7163
 27326 00fa 9A42     		cmp	r2, r3
 27327 00fc E0DC     		bgt	.L1948
5847:src/xeq.c     **** 		// move previous contents to new destination
 27328              		.loc 1 5847 2 is_stmt 1 view .LVU7164
5847:src/xeq.c     **** 		// move previous contents to new destination
 27329              		.loc 1 5847 5 is_stmt 0 view .LVU7165
 27330 00fe B9F1000F 		cmp	r9, #0
 27331 0102 25D0     		beq	.L1959
 27332              	.LBB3577:
5849:src/xeq.c     **** 		if (size > old_size) {
 27333              		.loc 1 5849 3 is_stmt 1 view .LVU7166
5850:src/xeq.c     **** 			n = old_size;
ARM GAS  /tmp/ccaPnj5t.s 			page 698


 27334              		.loc 1 5850 3 view .LVU7167
5858:src/xeq.c     **** 	}
 27335              		.loc 1 5858 31 is_stmt 0 view .LVU7168
 27336 0104 3B68     		ldr	r3, [r7]
5858:src/xeq.c     **** 	}
 27337              		.loc 1 5858 3 view .LVU7169
 27338 0106 DBF80000 		ldr	r0, [fp]
5858:src/xeq.c     **** 	}
 27339              		.loc 1 5858 29 view .LVU7170
 27340 010a B3F9DE17 		ldrsh	r1, [r3, #2014]
5850:src/xeq.c     **** 			n = old_size;
 27341              		.loc 1 5850 6 view .LVU7171
 27342 010e 4D45     		cmp	r5, r9
5851:src/xeq.c     **** 			size -= old_size;
 27343              		.loc 1 5851 4 is_stmt 1 view .LVU7172
 27344              	.LVL2113:
5852:src/xeq.c     **** 		}
 27345              		.loc 1 5852 4 view .LVU7173
5852:src/xeq.c     **** 		}
 27346              		.loc 1 5852 9 is_stmt 0 view .LVU7174
 27347 0110 C2BF     		ittt	gt
 27348 0112 A5EB0905 		subgt	r5, r5, r9
 27349              	.LVL2114:
5852:src/xeq.c     **** 		}
 27350              		.loc 1 5852 9 view .LVU7175
 27351 0116 4FEA450A 		lslgt	r10, r5, #1
 27352 011a 4D46     		movgt	r5, r9
 27353              	.LVL2115:
5858:src/xeq.c     **** 	}
 27354              		.loc 1 5858 3 is_stmt 1 view .LVU7176
 27355 011c 00EB4101 		add	r1, r0, r1, lsl #1
 27356 0120 4FEA4502 		lsl	r2, r5, #1
 27357 0124 00EB4400 		add	r0, r0, r4, lsl #1
 27358 0128 D8BF     		it	le
 27359 012a 4FF0000A 		movle	r10, #0
 27360 012e FFF7FEFF 		bl	xcopy
 27361              	.LVL2116:
 27362 0132 04EB0903 		add	r3, r4, r9
 27363 0136 5B00     		lsls	r3, r3, #1
5858:src/xeq.c     **** 	}
 27364              		.loc 1 5858 16 is_stmt 0 view .LVU7177
 27365 0138 4FEA4409 		lsl	r9, r4, #1
 27366              	.LVL2117:
5858:src/xeq.c     **** 	}
 27367              		.loc 1 5858 16 view .LVU7178
 27368 013c 99E7     		b	.L1946
 27369              	.LVL2118:
 27370              	.L1958:
5858:src/xeq.c     **** 	}
 27371              		.loc 1 5858 16 view .LVU7179
 27372 013e 4FEA4409 		lsl	r9, r4, #1
 27373              	.LBE3577:
5839:src/xeq.c     **** 	}
 27374              		.loc 1 5839 13 view .LVU7180
 27375 0142 0688     		ldrh	r6, [r0]
 27376 0144 DFF820B0 		ldr	fp, .L1960+12
 27377 0148 4FEA450A 		lsl	r10, r5, #1
ARM GAS  /tmp/ccaPnj5t.s 			page 699


 27378 014c 4B46     		mov	r3, r9
 27379 014e 90E7     		b	.L1946
 27380              	.LVL2119:
 27381              	.L1959:
5839:src/xeq.c     **** 	}
 27382              		.loc 1 5839 13 view .LVU7181
 27383 0150 4FEA4409 		lsl	r9, r4, #1
 27384              	.LVL2120:
5839:src/xeq.c     **** 	}
 27385              		.loc 1 5839 13 view .LVU7182
 27386 0154 4FEA450A 		lsl	r10, r5, #1
5847:src/xeq.c     **** 		// move previous contents to new destination
 27387              		.loc 1 5847 5 view .LVU7183
 27388 0158 4B46     		mov	r3, r9
 27389 015a 8AE7     		b	.L1946
 27390              	.L1961:
 27391              		.align	2
 27392              	.L1960:
 27393 015c 00000000 		.word	main_ram
 27394 0160 00000000 		.word	RetStkSize
 27395 0164 00000000 		.word	Error
 27396 0168 00000000 		.word	RetStk
 27397              		.cfi_endproc
 27398              	.LFE263:
 27400              		.section	.text.cmdxout,"ax",%progbits
 27401              		.align	1
 27402              		.p2align 2,,3
 27403              		.global	cmdxout
 27404              		.syntax unified
 27405              		.thumb
 27406              		.thumb_func
 27407              		.fpu fpv4-sp-d16
 27409              	cmdxout:
 27410              	.LVL2121:
 27411              	.LFB265:
5868:src/xeq.c     **** 
5869:src/xeq.c     **** 
5870:src/xeq.c     **** /*
5871:src/xeq.c     ****  *  xIN: Setup an environment for XROM based math routines:
5872:src/xeq.c     ****  *
5873:src/xeq.c     ****  *  - 12 Private double precision stack & special registers X to K
5874:src/xeq.c     ****  *  - private return stack for local flags & registers
5875:src/xeq.c     ****  *  - 6 system flags
5876:src/xeq.c     ****  *
5877:src/xeq.c     ****  *  Argument:
5878:src/xeq.c     ****  *      noLocals - bit 7
5879:src/xeq.c     ****  *      out      - bits 4..5
5880:src/xeq.c     ****  *      in       - bits 2..4		
5881:src/xeq.c     ****  *      setLastX - bit 1
5882:src/xeq.c     ****  *      complex  - bit 0
5883:src/xeq.c     ****  *
5884:src/xeq.c     ****  *  Local flags:
5885:src/xeq.c     ****  *      .00 to .09 are free for general use.
5886:src/xeq.c     ****  *	.10 - stack_depth as previously set by user, don't touch it!
5887:src/xeq.c     ****  *	.11 - mode_double as previously set by user, don't touch it!
5888:src/xeq.c     ****  *      .12 - complex, from argument, can be modified.
5889:src/xeq.c     ****  *	.13 - setLastX, from argumment, can be modified.
ARM GAS  /tmp/ccaPnj5t.s 			page 700


5890:src/xeq.c     ****  *	.14 - state_lift as desired on exit, set to 1 by default, can be modified.
5891:src/xeq.c     ****  *      .15 - reserved, indicates that xIN is active, set to 1, don't touch it!
5892:src/xeq.c     ****  *
5893:src/xeq.c     ****  *  If the call is repeated only the argument values are reevaluated.
5894:src/xeq.c     ****  */
5895:src/xeq.c     **** void cmdxin(unsigned int arg, enum rarg op) {
5896:src/xeq.c     **** 
5897:src/xeq.c     **** 	int i;
5898:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5899:src/xeq.c     **** 	REGISTER *previousLocals = NULL;
5900:src/xeq.c     **** 	unsigned short previousFlags = 0;
5901:src/xeq.c     **** 	int num_locals = 0;
5902:src/xeq.c     **** #endif
5903:src/xeq.c     **** #ifndef REALBUILD
5904:src/xeq.c     **** 	/* This should never happen in a real build but it causes havoc writing
5905:src/xeq.c     **** 	 * xrom code, so trap it here.
5906:src/xeq.c     **** 	 */
5907:src/xeq.c     **** 	if (XromFlags.xIN) {
5908:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5909:src/xeq.c     **** 		return;
5910:src/xeq.c     **** 	}
5911:src/xeq.c     **** #endif
5912:src/xeq.c     **** 
5913:src/xeq.c     **** 	// Setup the XromLocal and XromParams structures in volatile RAM
5914:src/xeq.c     **** 	// fill with 0
5915:src/xeq.c     **** 	xset(&XromLocal, 0, sizeof(XromLocal));
5916:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
5917:src/xeq.c     **** 
5918:src/xeq.c     **** 	// Flags
5919:src/xeq.c     **** 	XromFlags.state_lift_in = get_lift();
5920:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
5921:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
5922:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
5923:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
5924:src/xeq.c     **** 	XromFlags.state_lift = 1;
5925:src/xeq.c     **** 	XromFlags.xIN = 1;
5926:src/xeq.c     **** 
5927:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5928:src/xeq.c     **** 	// Save pointers to original local data
5929:src/xeq.c     **** 	if ((arg & 0x80) != 0 && LocalRegs < 0) {
5930:src/xeq.c     **** 		XromFlags.copyLocals = 1;
5931:src/xeq.c     **** 		previousFlags = *flag_word(LOCAL_FLAG_BASE, NULL);
5932:src/xeq.c     **** 		previousLocals = get_reg_n(LOCAL_REG_BASE);
5933:src/xeq.c     **** 		num_locals = local_regs();
5934:src/xeq.c     **** 	}
5935:src/xeq.c     **** #endif
5936:src/xeq.c     **** 	// Establish local return stack
5937:src/xeq.c     **** 	XromUserRetStk = RetStk;
5938:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
5939:src/xeq.c     **** 
5940:src/xeq.c     **** 	RetStk = XromRetStk;
5941:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5942:src/xeq.c     **** 	RetStkPtr = 0;			// Locals will be allocated later
5943:src/xeq.c     **** #else
5944:src/xeq.c     **** 	LocalRegs = RetStkPtr = -2;	// Allocate just the local flags
5945:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
5946:src/xeq.c     **** #endif
ARM GAS  /tmp/ccaPnj5t.s 			page 701


5947:src/xeq.c     **** 
5948:src/xeq.c     **** 	// Parse the argument into fields
5949:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5950:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x20) != 0;
5951:src/xeq.c     **** 	XromFlags.complex = (arg & 0x40) != 0;
5952:src/xeq.c     **** 	XromIn = (arg & 0x1f) % 5;
5953:src/xeq.c     **** 	XromOut = (arg & 0x1f) / 5;
5954:src/xeq.c     **** #else
5955:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x40) != 0;
5956:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
5957:src/xeq.c     **** 	XromIn = (arg & 0x7);
5958:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
5959:src/xeq.c     **** #endif
5960:src/xeq.c     **** 	if (XromFlags.complex) {
5961:src/xeq.c     **** 		// Complex arguments are always in pairs
5962:src/xeq.c     **** 		XromIn <<= 1;
5963:src/xeq.c     **** 		XromOut <<= 1;
5964:src/xeq.c     **** 	}
5965:src/xeq.c     **** 
5966:src/xeq.c     ****         UState.rounding_mode = 0;
5967:src/xeq.c     **** 
5968:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5969:src/xeq.c     **** 	// Allocate the local frame
5970:src/xeq.c     **** 	LocalRegs = 0;
5971:src/xeq.c     **** 	UState.mode_double = 1;		// Needed to allocate enough registers
5972:src/xeq.c     **** 	cmdlocr(num_locals, RARG_LOCR);
5973:src/xeq.c     **** 	if (XromFlags.copyLocals)
5974:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = previousFlags;
5975:src/xeq.c     **** #endif
5976:src/xeq.c     **** 	// Switch to double precision mode
5977:src/xeq.c     **** 	if (XromFlags.mode_int) {
5978:src/xeq.c     **** 		// Convert integers to decimal128
5979:src/xeq.c     **** #ifndef ENABLE_COPYLOCALS
5980:src/xeq.c     **** 		UState.mode_double = 1;
5981:src/xeq.c     **** #endif
5982:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
5983:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
5984:src/xeq.c     **** 	}
5985:src/xeq.c     **** 	else if (XromFlags.mode_double) {
5986:src/xeq.c     **** 		// No conversion necessary
5987:src/xeq.c     **** 		xcopy(XromStack, StackBase, sizeof(XromStack));
5988:src/xeq.c     **** 		StackBase = XromStack;
5989:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5990:src/xeq.c     **** 		if (XromFlags.copyLocals)
5991:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), previousLocals, num_locals);
5992:src/xeq.c     **** #endif
5993:src/xeq.c     **** 	}
5994:src/xeq.c     **** 	else {
5995:src/xeq.c     **** 		// Convert decimal64 to decinal128
5996:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5997:src/xeq.c     **** 		UState.mode_double = 0;		// This was the original state before xIN
5998:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
5999:src/xeq.c     **** 		if (XromFlags.copyLocals) {
6000:src/xeq.c     **** 			decimal64  *src  = &(previousLocals->s);
6001:src/xeq.c     **** 			decimal128 *dest = &(get_reg_n(LOCAL_REG_BASE)->d);
6002:src/xeq.c     **** 			while (num_locals--)
6003:src/xeq.c     **** 				packed128_from_packed(dest++, src++);
ARM GAS  /tmp/ccaPnj5t.s 			page 702


6004:src/xeq.c     **** 		}
6005:src/xeq.c     **** #else
6006:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
6007:src/xeq.c     **** #endif
6008:src/xeq.c     **** 	}
6009:src/xeq.c     **** 
6010:src/xeq.c     **** 	// Set stack size to 8 and turn on stack_lift
6011:src/xeq.c     **** 	set_lift();
6012:src/xeq.c     **** 	UState.stack_depth = 1;
6013:src/xeq.c     **** 
6014:src/xeq.c     **** 	// check for any NaNs in input
6015:src/xeq.c     **** 	for (i = 0; i < XromIn; ++i) {
6016:src/xeq.c     **** 		decNumber x;
6017:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
6018:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
6019:src/xeq.c     **** 			// domain error
6020:src/xeq.c     **** 			if (get_user_flag(NAN_FLAG)) {
6021:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
6022:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
6023:src/xeq.c     **** 				// Early exit of routine
6024:src/xeq.c     **** 				cmdxout(0, RARG_XROM_OUT);
6025:src/xeq.c     **** 			} 
6026:src/xeq.c     **** 			else
6027:src/xeq.c     **** 				report_err(ERR_DOMAIN);	// this will do all the cleanup
6028:src/xeq.c     **** 			return;
6029:src/xeq.c     **** 		}
6030:src/xeq.c     **** 	}
6031:src/xeq.c     **** }
6032:src/xeq.c     **** 
6033:src/xeq.c     **** /*
6034:src/xeq.c     ****  *  xOUT: Return from an XROM routine that has previously called xIN
6035:src/xeq.c     ****  *  Argument:
6036:src/xeq.c     ****  *     bit 0 set - do a RTN+1
6037:src/xeq.c     ****  *     bit 1 set - leave I alone even with a complex result
6038:src/xeq.c     ****  */
6039:src/xeq.c     **** void cmdxout(unsigned int arg, enum rarg op) {
 27412              		.loc 1 6039 46 is_stmt 1 view -0
 27413              		.cfi_startproc
 27414              		@ args = 0, pretend = 0, frame = 56
 27415              		@ frame_needed = 0, uses_anonymous_args = 0
6040:src/xeq.c     **** 	int i, dbl, intm;
 27416              		.loc 1 6040 2 view .LVU7185
6041:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6042:src/xeq.c     **** 	unsigned short flags = *flag_word(LOCAL_FLAG_BASE, NULL);
6043:src/xeq.c     **** 	REGISTER *locals = get_reg_n(LOCAL_REG_BASE);
6044:src/xeq.c     **** 	int num_locals = local_regs();
6045:src/xeq.c     **** #endif
6046:src/xeq.c     **** #ifndef REALBUILD
6047:src/xeq.c     **** 	// shouldn't happen in final build
6048:src/xeq.c     **** 	if (! XromFlags.xIN) {
 27417              		.loc 1 6048 2 view .LVU7186
6039:src/xeq.c     **** 	int i, dbl, intm;
 27418              		.loc 1 6039 46 is_stmt 0 view .LVU7187
 27419 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27420              		.cfi_def_cfa_offset 36
 27421              		.cfi_offset 4, -36
 27422              		.cfi_offset 5, -32
ARM GAS  /tmp/ccaPnj5t.s 			page 703


 27423              		.cfi_offset 6, -28
 27424              		.cfi_offset 7, -24
 27425              		.cfi_offset 8, -20
 27426              		.cfi_offset 9, -16
 27427              		.cfi_offset 10, -12
 27428              		.cfi_offset 11, -8
 27429              		.cfi_offset 14, -4
 27430              		.loc 1 6048 6 view .LVU7188
 27431 0004 774C     		ldr	r4, .L2008
 27432              		.loc 1 6048 5 view .LVU7189
 27433 0006 94F90130 		ldrsb	r3, [r4, #1]
 27434 000a 002B     		cmp	r3, #0
6039:src/xeq.c     **** 	int i, dbl, intm;
 27435              		.loc 1 6039 46 view .LVU7190
 27436 000c 8FB0     		sub	sp, sp, #60
 27437              		.cfi_def_cfa_offset 96
 27438              		.loc 1 6048 5 view .LVU7191
 27439 000e 07DB     		blt	.L1963
6049:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 27440              		.loc 1 6049 3 is_stmt 1 view .LVU7192
 27441              	.LVL2122:
 27442              	.LBB3601:
 27443              	.LBI3601:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27444              		.loc 1 540 5 view .LVU7193
 27445              	.LBB3602:
 541:src/xeq.c     **** 		Error = e;
 27446              		.loc 1 541 2 view .LVU7194
 541:src/xeq.c     **** 		Error = e;
 27447              		.loc 1 541 12 is_stmt 0 view .LVU7195
 27448 0010 754B     		ldr	r3, .L2008+4
 541:src/xeq.c     **** 		Error = e;
 27449              		.loc 1 541 5 view .LVU7196
 27450 0012 1A68     		ldr	r2, [r3]
 27451 0014 0AB9     		cbnz	r2, .L1962
 27452              	.LVL2123:
 27453              	.LBB3603:
 27454              	.LBI3603:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27455              		.loc 1 540 5 is_stmt 1 view .LVU7197
 27456              	.LBB3604:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 27457              		.loc 1 542 3 view .LVU7198
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 27458              		.loc 1 542 9 is_stmt 0 view .LVU7199
 27459 0016 0722     		movs	r2, #7
 27460 0018 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 27461              		.loc 1 543 3 is_stmt 1 view .LVU7200
 27462              	.LVL2124:
 27463              	.L1962:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 27464              		.loc 1 543 3 is_stmt 0 view .LVU7201
 27465              	.LBE3604:
 27466              	.LBE3603:
 27467              	.LBE3602:
 27468              	.LBE3601:
ARM GAS  /tmp/ccaPnj5t.s 			page 704


6050:src/xeq.c     **** 		return;
6051:src/xeq.c     **** 	}
6052:src/xeq.c     **** #endif
6053:src/xeq.c     **** 	// End special handling
6054:src/xeq.c     **** 	XromFlags.xIN = 0;
6055:src/xeq.c     **** 
6056:src/xeq.c     **** 	// Restore the global return stack
6057:src/xeq.c     **** 	RetStk = XromUserRetStk;
6058:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
6059:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
6060:src/xeq.c     **** 
6061:src/xeq.c     **** 	// RTN or RTN+1 depending on bit 0 of argument
6062:src/xeq.c     **** 	do_rtn(arg & 1);
6063:src/xeq.c     **** 
6064:src/xeq.c     **** 	// Switch back to user stack settings
6065:src/xeq.c     **** 	dbl = UState.mode_double = XromFlags.mode_double;
6066:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
6067:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
6068:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
6069:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
6070:src/xeq.c     **** 
6071:src/xeq.c     **** 	// Last X handling and complex flag
6072:src/xeq.c     **** 	if (XromFlags.setLastX) {
6073:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
6074:src/xeq.c     **** 			setlastXY();
6075:src/xeq.c     **** 		else
6076:src/xeq.c     **** 			setlastX();
6077:src/xeq.c     **** 	}
6078:src/xeq.c     **** 
6079:src/xeq.c     **** 	// Move the stack according to the in/out fields
6080:src/xeq.c     **** 	i = (int) XromOut - (int) XromIn;
6081:src/xeq.c     **** 	if (XromFlags.complex) {
6082:src/xeq.c     **** 		set_was_complex();
6083:src/xeq.c     **** 		while (i < 0) {
6084:src/xeq.c     **** 			// different stack handling in complex mode
6085:src/xeq.c     **** 			// more to consume then to push back
6086:src/xeq.c     **** 			lower2();
6087:src/xeq.c     **** 			i += 2;
6088:src/xeq.c     **** 		}
6089:src/xeq.c     **** 	}
6090:src/xeq.c     **** 	else {
6091:src/xeq.c     **** 		while (i < 0) {
6092:src/xeq.c     **** 			// more to consume then to push back
6093:src/xeq.c     **** 			lower();	
6094:src/xeq.c     **** 			++i;
6095:src/xeq.c     **** 		}
6096:src/xeq.c     **** 	}
6097:src/xeq.c     **** 	if (i > 0) {
6098:src/xeq.c     **** 		// more to push back then to consume
6099:src/xeq.c     **** 		if (! XromFlags.state_lift_in)
6100:src/xeq.c     **** 			--i;
6101:src/xeq.c     **** 		while (i > 0) {
6102:src/xeq.c     **** 			lift();
6103:src/xeq.c     **** 			--i;
6104:src/xeq.c     **** 		}
6105:src/xeq.c     **** 	}
6106:src/xeq.c     **** 	State2.state_lift = XromFlags.state_lift;
ARM GAS  /tmp/ccaPnj5t.s 			page 705


6107:src/xeq.c     **** 
6108:src/xeq.c     **** 	// Copy results
6109:src/xeq.c     **** 	i = XromOut;
6110:src/xeq.c     **** 	if (intm) {
6111:src/xeq.c     **** 		while (i--) {
6112:src/xeq.c     **** 			decNumber r;
6113:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
6114:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
6115:src/xeq.c     **** 		}
6116:src/xeq.c     **** 	}
6117:src/xeq.c     **** 	else if (dbl) {
6118:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
6119:src/xeq.c     **** 	}
6120:src/xeq.c     **** 	else {
6121:src/xeq.c     **** 		while (i--)
6122:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
6123:src/xeq.c     **** 	}
6124:src/xeq.c     **** 
6125:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6126:src/xeq.c     **** 	// Copy back local data
6127:src/xeq.c     **** 	if (XromFlags.copyLocals) {
6128:src/xeq.c     **** 		i = local_regs();
6129:src/xeq.c     **** 		num_locals = i < num_locals ? i : num_locals; 
6130:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = flags;
6131:src/xeq.c     **** 		if (intm) {
6132:src/xeq.c     **** 			// not used
6133:src/xeq.c     **** 		}
6134:src/xeq.c     **** 		else if (dbl) {
6135:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), locals, num_locals);
6136:src/xeq.c     **** 		}
6137:src/xeq.c     **** 		else {
6138:src/xeq.c     **** 			decimal64  *dest = &(get_reg_n(LOCAL_REG_BASE)->s);
6139:src/xeq.c     **** 			decimal128 *src  = &(locals->d);
6140:src/xeq.c     **** 			while (num_locals--)
6141:src/xeq.c     **** 				packed_from_packed128(dest++, src++);
6142:src/xeq.c     **** 		}
6143:src/xeq.c     **** 	}
6144:src/xeq.c     **** #endif
6145:src/xeq.c     **** }
 27469              		.loc 1 6145 1 view .LVU7202
 27470 001a 0FB0     		add	sp, sp, #60
 27471              		.cfi_remember_state
 27472              		.cfi_def_cfa_offset 36
 27473              		@ sp needed
 27474 001c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27475              	.LVL2125:
 27476              	.L1963:
 27477              		.cfi_restore_state
 27478              	.LBB3605:
 27479              	.LBB3606:
6058:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27480              		.loc 1 6058 2 view .LVU7203
 27481 0020 724F     		ldr	r7, .L2008+8
6059:src/xeq.c     **** 
 27482              		.loc 1 6059 12 view .LVU7204
 27483 0022 7349     		ldr	r1, .L2008+12
 27484              	.LVL2126:
ARM GAS  /tmp/ccaPnj5t.s 			page 706


6058:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27485              		.loc 1 6058 2 view .LVU7205
 27486 0024 3A68     		ldr	r2, [r7]
6054:src/xeq.c     **** 
 27487              		.loc 1 6054 16 view .LVU7206
 27488 0026 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6058:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27489              		.loc 1 6058 12 view .LVU7207
 27490 0028 A689     		ldrh	r6, [r4, #12]
 27491 002a A2F8E267 		strh	r6, [r2, #2018]	@ movhi
 27492 002e 0546     		mov	r5, r0
 27493              	.LVL2127:
6058:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27494              		.loc 1 6058 12 view .LVU7208
 27495              	.LBE3606:
 27496              	.LBI3605:
6039:src/xeq.c     **** 	int i, dbl, intm;
 27497              		.loc 1 6039 6 is_stmt 1 view .LVU7209
 27498              	.LBB3635:
6054:src/xeq.c     **** 
 27499              		.loc 1 6054 2 view .LVU7210
6059:src/xeq.c     **** 
 27500              		.loc 1 6059 12 is_stmt 0 view .LVU7211
 27501 0030 0868     		ldr	r0, [r1]
 27502              	.LVL2128:
6057:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27503              		.loc 1 6057 9 view .LVU7212
 27504 0032 7049     		ldr	r1, .L2008+16
6059:src/xeq.c     **** 
 27505              		.loc 1 6059 12 view .LVU7213
 27506 0034 A2F8DE07 		strh	r0, [r2, #2014]	@ movhi
6054:src/xeq.c     **** 
 27507              		.loc 1 6054 16 view .LVU7214
 27508 0038 6FF3C713 		bfc	r3, #7, #1
6057:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27509              		.loc 1 6057 9 view .LVU7215
 27510 003c A268     		ldr	r2, [r4, #8]
 27511 003e 0A60     		str	r2, [r1]
6062:src/xeq.c     **** 
 27512              		.loc 1 6062 2 view .LVU7216
 27513 0040 05F00100 		and	r0, r5, #1
6054:src/xeq.c     **** 
 27514              		.loc 1 6054 16 view .LVU7217
 27515 0044 6370     		strb	r3, [r4, #1]
6057:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27516              		.loc 1 6057 2 is_stmt 1 view .LVU7218
6058:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27517              		.loc 1 6058 2 view .LVU7219
6059:src/xeq.c     **** 
 27518              		.loc 1 6059 2 view .LVU7220
6062:src/xeq.c     **** 
 27519              		.loc 1 6062 2 view .LVU7221
 27520 0046 FFF7FEFF 		bl	do_rtn
 27521              	.LVL2129:
6065:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27522              		.loc 1 6065 2 view .LVU7222
6065:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
ARM GAS  /tmp/ccaPnj5t.s 			page 707


 27523              		.loc 1 6065 38 is_stmt 0 view .LVU7223
 27524 004a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6065:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27525              		.loc 1 6065 8 view .LVU7224
 27526 004c 3868     		ldr	r0, [r7]
6067:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27527              		.loc 1 6067 41 view .LVU7225
 27528 004e A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
6066:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27529              		.loc 1 6066 21 view .LVU7226
 27530 0050 D0F8E827 		ldr	r2, [r0, #2024]
6069:src/xeq.c     **** 
 27531              		.loc 1 6069 12 view .LVU7227
 27532 0054 DFF8ACA1 		ldr	r10, .L2008+32
6065:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27533              		.loc 1 6065 38 view .LVU7228
 27534 0058 C3F3C009 		ubfx	r9, r3, #3, #1
 27535              	.LVL2130:
6066:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27536              		.loc 1 6066 2 is_stmt 1 view .LVU7229
6066:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27537              		.loc 1 6066 32 is_stmt 0 view .LVU7230
 27538 005c 03F00108 		and	r8, r3, #1
 27539              	.LVL2131:
6067:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27540              		.loc 1 6067 9 is_stmt 1 view .LVU7231
6068:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 27541              		.loc 1 6068 2 view .LVU7232
6066:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27542              		.loc 1 6066 21 is_stmt 0 view .LVU7233
 27543 0060 C3F38001 		ubfx	r1, r3, #2, #1
 27544 0064 48EA8933 		orr	r3, r8, r9, lsl #14
 27545              	.LVL2132:
6066:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27546              		.loc 1 6066 21 view .LVU7234
 27547 0068 43EAC143 		orr	r3, r3, r1, lsl #19
 27548 006c 6249     		ldr	r1, .L2008+20
 27549 006e 06F00706 		and	r6, r6, #7
 27550 0072 1140     		ands	r1, r1, r2
 27551 0074 43EA0673 		orr	r3, r3, r6, lsl #28
 27552 0078 0B43     		orrs	r3, r3, r1
 27553 007a C0F8E837 		str	r3, [r0, #2024]
6069:src/xeq.c     **** 
 27554              		.loc 1 6069 2 is_stmt 1 view .LVU7235
6069:src/xeq.c     **** 
 27555              		.loc 1 6069 14 is_stmt 0 view .LVU7236
 27556 007e 6420     		movs	r0, #100
 27557 0080 FFF7FEFF 		bl	get_reg_n
 27558              	.LVL2133:
6072:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27559              		.loc 1 6072 6 view .LVU7237
 27560 0084 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6069:src/xeq.c     **** 
 27561              		.loc 1 6069 12 view .LVU7238
 27562 0086 CAF80000 		str	r0, [r10]
6072:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27563              		.loc 1 6072 2 is_stmt 1 view .LVU7239
ARM GAS  /tmp/ccaPnj5t.s 			page 708


6072:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27564              		.loc 1 6072 5 is_stmt 0 view .LVU7240
 27565 008a 9606     		lsls	r6, r2, #26
 27566 008c 09D5     		bpl	.L1966
6073:src/xeq.c     **** 			setlastXY();
 27567              		.loc 1 6073 3 is_stmt 1 view .LVU7241
6073:src/xeq.c     **** 			setlastXY();
 27568              		.loc 1 6073 6 is_stmt 0 view .LVU7242
 27569 008e D006     		lsls	r0, r2, #27
 27570 0090 02D5     		bpl	.L1967
6073:src/xeq.c     **** 			setlastXY();
 27571              		.loc 1 6073 25 view .LVU7243
 27572 0092 A907     		lsls	r1, r5, #30
 27573 0094 40F19F80 		bpl	.L2004
 27574              	.L1967:
6076:src/xeq.c     **** 	}
 27575              		.loc 1 6076 4 is_stmt 1 view .LVU7244
 27576              	.LBB3607:
 27577              	.LBI3607:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 27578              		.loc 1 786 6 view .LVU7245
 27579              	.LBB3608:
 787:src/xeq.c     **** }
 27580              		.loc 1 787 2 view .LVU7246
 27581 0098 6421     		movs	r1, #100
 27582 009a 6C20     		movs	r0, #108
 27583 009c FFF7FEFF 		bl	copyreg_n
 27584              	.LVL2134:
 27585 00a0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27586              	.L1966:
 27587              	.LBE3608:
 27588              	.LBE3607:
6080:src/xeq.c     **** 	if (XromFlags.complex) {
 27589              		.loc 1 6080 2 view .LVU7247
6080:src/xeq.c     **** 	if (XromFlags.complex) {
 27590              		.loc 1 6080 6 is_stmt 0 view .LVU7248
 27591 00a2 94F805B0 		ldrb	fp, [r4, #5]	@ zero_extendqisi2
6080:src/xeq.c     **** 	if (XromFlags.complex) {
 27592              		.loc 1 6080 22 view .LVU7249
 27593 00a6 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
6081:src/xeq.c     **** 		set_was_complex();
 27594              		.loc 1 6081 5 view .LVU7250
 27595 00a8 D206     		lsls	r2, r2, #27
6080:src/xeq.c     **** 	if (XromFlags.complex) {
 27596              		.loc 1 6080 4 view .LVU7251
 27597 00aa ABEB030B 		sub	fp, fp, r3
 27598              	.LVL2135:
6081:src/xeq.c     **** 		set_was_complex();
 27599              		.loc 1 6081 2 is_stmt 1 view .LVU7252
6081:src/xeq.c     **** 		set_was_complex();
 27600              		.loc 1 6081 5 is_stmt 0 view .LVU7253
 27601 00ae 2BD5     		bpl	.L2005
6082:src/xeq.c     **** 		while (i < 0) {
 27602              		.loc 1 6082 3 is_stmt 1 view .LVU7254
 27603              	.LBB3609:
 27604              	.LBI3609:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
ARM GAS  /tmp/ccaPnj5t.s 			page 709


 27605              		.loc 1 533 13 view .LVU7255
 27606              	.LBB3610:
 534:src/xeq.c     **** }
 27607              		.loc 1 534 2 view .LVU7256
 534:src/xeq.c     **** }
 27608              		.loc 1 534 20 is_stmt 0 view .LVU7257
 27609 00b0 524E     		ldr	r6, .L2008+24
 27610 00b2 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 27611 00b4 0121     		movs	r1, #1
 27612 00b6 61F38712 		bfi	r2, r1, #6, #2
 27613              	.LBE3610:
 27614              	.LBE3609:
6083:src/xeq.c     **** 			// different stack handling in complex mode
 27615              		.loc 1 6083 9 view .LVU7258
 27616 00ba BBF1000F 		cmp	fp, #0
 27617              	.LBB3612:
 27618              	.LBB3611:
 534:src/xeq.c     **** }
 27619              		.loc 1 534 20 view .LVU7259
 27620 00be 3275     		strb	r2, [r6, #20]
 534:src/xeq.c     **** }
 27621              		.loc 1 534 20 view .LVU7260
 27622              	.LBE3611:
 27623              	.LBE3612:
6083:src/xeq.c     **** 			// different stack handling in complex mode
 27624              		.loc 1 6083 9 is_stmt 1 view .LVU7261
 27625 00c0 13DA     		bge	.L1970
 27626 00c2 6FEA0B03 		mvn	r3, fp
 27627 00c6 23F00105 		bic	r5, r3, #1
 27628              	.LVL2136:
6083:src/xeq.c     **** 			// different stack handling in complex mode
 27629              		.loc 1 6083 9 is_stmt 0 view .LVU7262
 27630 00ca 0093     		str	r3, [sp]
 27631 00cc 0BF10203 		add	r3, fp, #2
 27632 00d0 0193     		str	r3, [sp, #4]
 27633 00d2 1D44     		add	r5, r5, r3
 27634              	.L1971:
6086:src/xeq.c     **** 			i += 2;
 27635              		.loc 1 6086 4 is_stmt 1 view .LVU7263
6087:src/xeq.c     **** 		}
 27636              		.loc 1 6087 6 is_stmt 0 view .LVU7264
 27637 00d4 0BF1020B 		add	fp, fp, #2
 27638              	.LVL2137:
6086:src/xeq.c     **** 			i += 2;
 27639              		.loc 1 6086 4 view .LVU7265
 27640 00d8 FFF7FEFF 		bl	lower2
 27641              	.LVL2138:
6087:src/xeq.c     **** 		}
 27642              		.loc 1 6087 4 is_stmt 1 view .LVU7266
6083:src/xeq.c     **** 			// different stack handling in complex mode
 27643              		.loc 1 6083 9 view .LVU7267
 27644 00dc AB45     		cmp	fp, r5
 27645 00de F9D1     		bne	.L1971
 27646 00e0 009B     		ldr	r3, [sp]
 27647 00e2 23F0010B 		bic	fp, r3, #1
 27648              	.LVL2139:
6083:src/xeq.c     **** 			// different stack handling in complex mode
ARM GAS  /tmp/ccaPnj5t.s 			page 710


 27649              		.loc 1 6083 9 is_stmt 0 view .LVU7268
 27650 00e6 019B     		ldr	r3, [sp, #4]
 27651 00e8 9B44     		add	fp, fp, r3
 27652              	.L1970:
 27653              	.LVL2140:
6097:src/xeq.c     **** 		// more to push back then to consume
 27654              		.loc 1 6097 2 is_stmt 1 view .LVU7269
6097:src/xeq.c     **** 		// more to push back then to consume
 27655              		.loc 1 6097 5 is_stmt 0 view .LVU7270
 27656 00ea BBF1000F 		cmp	fp, #0
 27657 00ee 14D0     		beq	.L1972
6099:src/xeq.c     **** 			--i;
 27658              		.loc 1 6099 3 is_stmt 1 view .LVU7271
6099:src/xeq.c     **** 			--i;
 27659              		.loc 1 6099 7 is_stmt 0 view .LVU7272
 27660 00f0 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6099:src/xeq.c     **** 			--i;
 27661              		.loc 1 6099 6 view .LVU7273
 27662 00f2 9307     		lsls	r3, r2, #30
 27663 00f4 02D4     		bmi	.L1977
6100:src/xeq.c     **** 		while (i > 0) {
 27664              		.loc 1 6100 4 is_stmt 1 view .LVU7274
 27665              	.LVL2141:
6101:src/xeq.c     **** 			lift();
 27666              		.loc 1 6101 9 view .LVU7275
 27667 00f6 BBF1010B 		subs	fp, fp, #1
 27668              	.LVL2142:
6101:src/xeq.c     **** 			lift();
 27669              		.loc 1 6101 9 is_stmt 0 view .LVU7276
 27670 00fa 0ED0     		beq	.L1972
 27671              	.L1977:
6102:src/xeq.c     **** 			--i;
 27672              		.loc 1 6102 4 is_stmt 1 view .LVU7277
 27673 00fc FFF7FEFF 		bl	lift
 27674              	.LVL2143:
6103:src/xeq.c     **** 		}
 27675              		.loc 1 6103 4 view .LVU7278
6101:src/xeq.c     **** 			lift();
 27676              		.loc 1 6101 9 view .LVU7279
 27677 0100 BBF1010B 		subs	fp, fp, #1
 27678              	.LVL2144:
6101:src/xeq.c     **** 			lift();
 27679              		.loc 1 6101 9 is_stmt 0 view .LVU7280
 27680 0104 FAD1     		bne	.L1977
 27681 0106 08E0     		b	.L1972
 27682              	.LVL2145:
 27683              	.L2005:
6091:src/xeq.c     **** 			// more to consume then to push back
 27684              		.loc 1 6091 9 is_stmt 1 view .LVU7281
 27685 0108 BBF1000F 		cmp	fp, #0
 27686 010c 67DA     		bge	.L2006
 27687              	.L1969:
6093:src/xeq.c     **** 			++i;
 27688              		.loc 1 6093 4 view .LVU7282
 27689 010e FFF7FEFF 		bl	lower
 27690              	.LVL2146:
6094:src/xeq.c     **** 		}
ARM GAS  /tmp/ccaPnj5t.s 			page 711


 27691              		.loc 1 6094 4 view .LVU7283
6091:src/xeq.c     **** 			// more to consume then to push back
 27692              		.loc 1 6091 9 view .LVU7284
 27693 0112 1BF1010B 		adds	fp, fp, #1
 27694              	.LVL2147:
6091:src/xeq.c     **** 			// more to consume then to push back
 27695              		.loc 1 6091 9 is_stmt 0 view .LVU7285
 27696 0116 FAD1     		bne	.L1969
 27697 0118 384E     		ldr	r6, .L2008+24
 27698              	.LVL2148:
 27699              	.L1972:
6106:src/xeq.c     **** 
 27700              		.loc 1 6106 2 is_stmt 1 view .LVU7286
6106:src/xeq.c     **** 
 27701              		.loc 1 6106 31 is_stmt 0 view .LVU7287
 27702 011a 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6106:src/xeq.c     **** 
 27703              		.loc 1 6106 20 view .LVU7288
 27704 011c F27D     		ldrb	r2, [r6, #23]	@ zero_extendqisi2
6109:src/xeq.c     **** 	if (intm) {
 27705              		.loc 1 6109 4 view .LVU7289
 27706 011e 6479     		ldrb	r4, [r4, #5]	@ zero_extendqisi2
6106:src/xeq.c     **** 
 27707              		.loc 1 6106 31 view .LVU7290
 27708 0120 C3F38013 		ubfx	r3, r3, #6, #1
6106:src/xeq.c     **** 
 27709              		.loc 1 6106 20 view .LVU7291
 27710 0124 63F38612 		bfi	r2, r3, #6, #1
 27711 0128 F275     		strb	r2, [r6, #23]
6109:src/xeq.c     **** 	if (intm) {
 27712              		.loc 1 6109 2 is_stmt 1 view .LVU7292
 27713              	.LVL2149:
6110:src/xeq.c     **** 		while (i--) {
 27714              		.loc 1 6110 2 view .LVU7293
6110:src/xeq.c     **** 		while (i--) {
 27715              		.loc 1 6110 5 is_stmt 0 view .LVU7294
 27716 012a B8F1000F 		cmp	r8, #0
 27717 012e 23D0     		beq	.L2007
6111:src/xeq.c     **** 			decNumber r;
 27718              		.loc 1 6111 9 is_stmt 1 view .LVU7295
6111:src/xeq.c     **** 			decNumber r;
 27719              		.loc 1 6111 11 is_stmt 0 view .LVU7296
 27720 0130 631E     		subs	r3, r4, #1
 27721              	.LVL2150:
6111:src/xeq.c     **** 			decNumber r;
 27722              		.loc 1 6111 9 view .LVU7297
 27723 0132 002C     		cmp	r4, #0
 27724 0134 3FF471AF 		beq	.L1962
 27725 0138 314D     		ldr	r5, .L2008+28
 27726 013a 6334     		adds	r4, r4, #99
 27727 013c 05EB0315 		add	r5, r5, r3, lsl #4
 27728 0140 05AE     		add	r6, sp, #20
 27729              	.LVL2151:
 27730              	.L1979:
 27731              	.LBB3613:
6112:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
 27732              		.loc 1 6112 4 is_stmt 1 view .LVU7298
ARM GAS  /tmp/ccaPnj5t.s 			page 712


6113:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
 27733              		.loc 1 6113 4 view .LVU7299
 27734 0142 3146     		mov	r1, r6
 27735 0144 2846     		mov	r0, r5
 27736 0146 FFF7FEFF 		bl	decimal128ToNumber
 27737              	.LVL2152:
6114:src/xeq.c     **** 		}
 27738              		.loc 1 6114 4 view .LVU7300
 27739 014a 3046     		mov	r0, r6
 27740 014c FFF7FEFF 		bl	intResult
 27741              	.LVL2153:
6114:src/xeq.c     **** 		}
 27742              		.loc 1 6114 4 is_stmt 0 view .LVU7301
 27743 0150 0246     		mov	r2, r0
 27744 0152 0B46     		mov	r3, r1
 27745              	.LBB3614:
 27746              	.LBB3615:
1405:src/xeq.c     **** }
 27747              		.loc 1 1405 8 view .LVU7302
 27748 0154 2046     		mov	r0, r4
 27749 0156 CDE90223 		strd	r2, [sp, #8]
 27750              	.LVL2154:
1405:src/xeq.c     **** }
 27751              		.loc 1 1405 8 view .LVU7303
 27752              	.LBE3615:
 27753              	.LBI3614:
1404:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 27754              		.loc 1 1404 6 is_stmt 1 view .LVU7304
 27755              	.LBB3616:
1405:src/xeq.c     **** }
 27756              		.loc 1 1405 2 view .LVU7305
1405:src/xeq.c     **** }
 27757              		.loc 1 1405 8 is_stmt 0 view .LVU7306
 27758 015a FFF7FEFF 		bl	get_reg_n
 27759              	.LVL2155:
1405:src/xeq.c     **** }
 27760              		.loc 1 1405 2 view .LVU7307
 27761 015e 0822     		movs	r2, #8
 27762 0160 013C     		subs	r4, r4, #1
 27763              	.LVL2156:
1405:src/xeq.c     **** }
 27764              		.loc 1 1405 2 view .LVU7308
 27765 0162 0DEB0201 		add	r1, sp, r2
 27766 0166 FFF7FEFF 		bl	xcopy
 27767              	.LVL2157:
1405:src/xeq.c     **** }
 27768              		.loc 1 1405 2 view .LVU7309
 27769              	.LBE3616:
 27770              	.LBE3614:
 27771              	.LBE3613:
6111:src/xeq.c     **** 			decNumber r;
 27772              		.loc 1 6111 9 is_stmt 1 view .LVU7310
 27773 016a 632C     		cmp	r4, #99
 27774 016c A5F11005 		sub	r5, r5, #16
 27775 0170 E7D1     		bne	.L1979
 27776              	.LBE3635:
 27777              	.LBE3605:
ARM GAS  /tmp/ccaPnj5t.s 			page 713


 27778              		.loc 1 6145 1 is_stmt 0 view .LVU7311
 27779 0172 0FB0     		add	sp, sp, #60
 27780              		.cfi_remember_state
 27781              		.cfi_def_cfa_offset 36
 27782              		@ sp needed
 27783 0174 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27784              	.LVL2158:
 27785              	.L2007:
 27786              		.cfi_restore_state
 27787              	.LBB3637:
 27788              	.LBB3636:
6117:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27789              		.loc 1 6117 7 is_stmt 1 view .LVU7312
6117:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27790              		.loc 1 6117 10 is_stmt 0 view .LVU7313
 27791 0178 B9F1000F 		cmp	r9, #0
 27792 017c 1AD1     		bne	.L1980
6121:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27793              		.loc 1 6121 9 is_stmt 1 view .LVU7314
6121:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27794              		.loc 1 6121 11 is_stmt 0 view .LVU7315
 27795 017e 631E     		subs	r3, r4, #1
 27796              	.LVL2159:
6121:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27797              		.loc 1 6121 9 view .LVU7316
 27798 0180 002C     		cmp	r4, #0
 27799 0182 3FF44AAF 		beq	.L1962
 27800 0186 1E4F     		ldr	r7, .L2008+28
 27801 0188 6334     		adds	r4, r4, #99
 27802 018a 07EB0317 		add	r7, r7, r3, lsl #4
 27803 018e 05AE     		add	r6, sp, #20
 27804              	.LVL2160:
 27805              	.L1983:
6122:src/xeq.c     **** 	}
 27806              		.loc 1 6122 4 is_stmt 1 view .LVU7317
 27807              	.LBB3617:
 27808              	.LBI3617:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27809              		.loc 1 712 11 view .LVU7318
 27810              	.LBB3618:
 713:src/xeq.c     **** }
 27811              		.loc 1 713 2 view .LVU7319
 713:src/xeq.c     **** }
 27812              		.loc 1 713 9 is_stmt 0 view .LVU7320
 27813 0190 2046     		mov	r0, r4
 27814 0192 FFF7FEFF 		bl	get_reg_n
 27815              	.LVL2161:
 27816              	.LBE3618:
 27817              	.LBE3617:
 27818              	.LBB3620:
 27819              	.LBB3621:
 644:src/xeq.c     **** }
 27820              		.loc 1 644 24 view .LVU7321
 27821 0196 3146     		mov	r1, r6
 27822              	.LBE3621:
 27823              	.LBE3620:
 27824              	.LBB3623:
ARM GAS  /tmp/ccaPnj5t.s 			page 714


 27825              	.LBB3619:
 713:src/xeq.c     **** }
 27826              		.loc 1 713 9 view .LVU7322
 27827 0198 0546     		mov	r5, r0
 27828              	.LVL2162:
 713:src/xeq.c     **** }
 27829              		.loc 1 713 9 view .LVU7323
 27830              	.LBE3619:
 27831              	.LBE3623:
 27832              	.LBB3624:
 27833              	.LBI3620:
 642:src/xeq.c     **** 	decNumber temp;
 27834              		.loc 1 642 6 is_stmt 1 view .LVU7324
 27835              	.LBB3622:
 643:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 27836              		.loc 1 643 2 view .LVU7325
 644:src/xeq.c     **** }
 27837              		.loc 1 644 2 view .LVU7326
 644:src/xeq.c     **** }
 27838              		.loc 1 644 24 is_stmt 0 view .LVU7327
 27839 019a 3846     		mov	r0, r7
 27840              	.LVL2163:
 644:src/xeq.c     **** }
 27841              		.loc 1 644 24 view .LVU7328
 27842 019c FFF7FEFF 		bl	decimal128ToNumber
 27843              	.LVL2164:
 27844 01a0 013C     		subs	r4, r4, #1
 27845              	.LVL2165:
 644:src/xeq.c     **** }
 27846              		.loc 1 644 24 view .LVU7329
 27847 01a2 0146     		mov	r1, r0
 644:src/xeq.c     **** }
 27848              		.loc 1 644 2 view .LVU7330
 27849 01a4 2846     		mov	r0, r5
 27850 01a6 FFF7FEFF 		bl	packed_from_number
 27851              	.LVL2166:
 644:src/xeq.c     **** }
 27852              		.loc 1 644 2 view .LVU7331
 27853              	.LBE3622:
 27854              	.LBE3624:
6121:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27855              		.loc 1 6121 9 is_stmt 1 view .LVU7332
6121:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27856              		.loc 1 6121 9 is_stmt 0 view .LVU7333
 27857 01aa 632C     		cmp	r4, #99
 27858 01ac A7F11007 		sub	r7, r7, #16
 27859 01b0 EED1     		bne	.L1983
 27860 01b2 32E7     		b	.L1962
 27861              	.LVL2167:
 27862              	.L1980:
6118:src/xeq.c     **** 	}
 27863              		.loc 1 6118 3 is_stmt 1 view .LVU7334
 27864              	.LBB3625:
 27865              	.LBB3626:
 27866              	.LBB3627:
 27867              	.LBB3628:
1101:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 715


 27868              		.loc 1 1101 24 is_stmt 0 view .LVU7335
 27869 01b4 3B68     		ldr	r3, [r7]
 27870              	.LBE3628:
 27871              	.LBE3627:
 27872              	.LBE3626:
 27873              	.LBE3625:
6118:src/xeq.c     **** 	}
 27874              		.loc 1 6118 3 view .LVU7336
 27875 01b6 DAF80000 		ldr	r0, [r10]
 27876              	.LVL2168:
 27877              	.LBB3634:
 27878              	.LBI3625:
1519:src/xeq.c     **** 	if (is_dblmode())
 27879              		.loc 1 1519 6 is_stmt 1 view .LVU7337
 27880              	.LBB3633:
1520:src/xeq.c     **** 		n <<= 1;
 27881              		.loc 1 1520 2 view .LVU7338
 27882              	.LBB3631:
 27883              	.LBI3627:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27884              		.loc 1 1100 5 view .LVU7339
 27885              	.LBB3629:
1101:src/xeq.c     **** }
 27886              		.loc 1 1101 2 view .LVU7340
1101:src/xeq.c     **** }
 27887              		.loc 1 1101 24 is_stmt 0 view .LVU7341
 27888 01ba B3F8E827 		ldrh	r2, [r3, #2024]
 27889              	.LBE3629:
 27890              	.LBE3631:
1522:src/xeq.c     **** }
 27891              		.loc 1 1522 2 view .LVU7342
 27892 01be 1049     		ldr	r1, .L2008+28
 27893              	.LBB3632:
 27894              	.LBB3630:
1101:src/xeq.c     **** }
 27895              		.loc 1 1101 24 view .LVU7343
 27896 01c0 44F20103 		movw	r3, #16385
 27897              	.LBE3630:
 27898              	.LBE3632:
1520:src/xeq.c     **** 		n <<= 1;
 27899              		.loc 1 1520 5 view .LVU7344
 27900 01c4 1340     		ands	r3, r3, r2
 27901 01c6 B3F5804F 		cmp	r3, #16384
1521:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 27902              		.loc 1 1521 3 is_stmt 1 view .LVU7345
1521:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 27903              		.loc 1 1521 5 is_stmt 0 view .LVU7346
 27904 01ca 08BF     		it	eq
 27905 01cc 6400     		lsleq	r4, r4, #1
 27906              	.LVL2169:
1522:src/xeq.c     **** }
 27907              		.loc 1 1522 2 is_stmt 1 view .LVU7347
 27908 01ce E200     		lsls	r2, r4, #3
 27909 01d0 FFF7FEFF 		bl	xcopy
 27910              	.LVL2170:
1523:src/xeq.c     **** 
 27911              		.loc 1 1523 1 is_stmt 0 view .LVU7348
ARM GAS  /tmp/ccaPnj5t.s 			page 716


 27912 01d4 21E7     		b	.L1962
 27913              	.LVL2171:
 27914              	.L2004:
1523:src/xeq.c     **** 
 27915              		.loc 1 1523 1 view .LVU7349
 27916              	.LBE3633:
 27917              	.LBE3634:
6074:src/xeq.c     **** 		else
 27918              		.loc 1 6074 4 is_stmt 1 view .LVU7350
 27919 01d6 FFF7FEFF 		bl	setlastXY
 27920              	.LVL2172:
 27921 01da 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27922 01dc 61E7     		b	.L1966
 27923              	.LVL2173:
 27924              	.L2006:
6074:src/xeq.c     **** 		else
 27925              		.loc 1 6074 4 is_stmt 0 view .LVU7351
 27926 01de 074E     		ldr	r6, .L2008+24
 27927 01e0 83E7     		b	.L1970
 27928              	.L2009:
 27929 01e2 00BF     		.align	2
 27930              	.L2008:
 27931 01e4 00000000 		.word	XromParams
 27932 01e8 00000000 		.word	Error
 27933 01ec 00000000 		.word	main_ram
 27934 01f0 00000000 		.word	UserLocalRegs
 27935 01f4 00000000 		.word	RetStk
 27936 01f8 FEBFF78F 		.word	-1879588866
 27937 01fc 00000000 		.word	StateWhileOn
 27938 0200 00000000 		.word	XromLocal
 27939 0204 00000000 		.word	StackBase
 27940              	.LBE3636:
 27941              	.LBE3637:
 27942              		.cfi_endproc
 27943              	.LFE265:
 27945              		.section	.text.cmdconverged,"ax",%progbits
 27946              		.align	1
 27947              		.p2align 2,,3
 27948              		.global	cmdconverged
 27949              		.syntax unified
 27950              		.thumb
 27951              		.thumb_func
 27952              		.fpu fpv4-sp-d16
 27954              	cmdconverged:
 27955              	.LVL2174:
 27956              	.LFB266:
6146:src/xeq.c     **** 
6147:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
6148:src/xeq.c     **** /*
6149:src/xeq.c     ****  *  Allow access to command argument from XROM
6150:src/xeq.c     ****  */
6151:src/xeq.c     **** void cmdxarg(unsigned int arg, enum rarg op) {
6152:src/xeq.c     **** 	set_reg_n_int_sgn(arg, XromArg, 0);
6153:src/xeq.c     **** }
6154:src/xeq.c     **** #endif
6155:src/xeq.c     **** 
6156:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 717


6157:src/xeq.c     **** /* A slightly obtuse command to check for convergence.
6158:src/xeq.c     ****  * Arguments are organised bitwise in this form:
6159:src/xeq.c     ****  *
6160:src/xeq.c     ****  *	SMMTT
6161:src/xeq.c     ****  *
6162:src/xeq.c     ****  * where:
6163:src/xeq.c     ****  *	TT is the tolerance parameter:
6164:src/xeq.c     ****  *
6165:src/xeq.c     ****  *	  	0	1e-14 tolerance
6166:src/xeq.c     ****  *	  	1	1e-24 tolerance
6167:src/xeq.c     ****  *	  	2	1e-32 tolerance
6168:src/xeq.c     ****  *	  	3	choose the best tolerance for the current modes
6169:src/xeq.c     ****  *			for user mode this means 0 for single precision and 2 for double precision
6170:src/xeq.c     ****  *
6171:src/xeq.c     ****  *	MM is the mode parameter:
6172:src/xeq.c     ****  *	  	0	compare real X & Y relatively
6173:src/xeq.c     ****  *	  	1	compare real X & Y absolutely
6174:src/xeq.c     ****  *	  	2	compare complex X/Y & Z/T for absolute difference
6175:src/xeq.c     ****  *	  	3	compare real X & Y relatively
6176:src/xeq.c     ****  *
6177:src/xeq.c     ****  *	S is the special number validation:
6178:src/xeq.c     ****  *		0	Nan & infinities are considered converged
6179:src/xeq.c     ****  *		1	NaN & infinities are not considered converged
6180:src/xeq.c     ****  *
6181:src/xeq.c     ****  * In integer mode, the arguemnt is completely ignored and an equality
6182:src/xeq.c     ****  * comparision is undertaken instead.
6183:src/xeq.c     ****  */
6184:src/xeq.c     **** static const decNumber * const convergence_tolerances[3] = {
6185:src/xeq.c     **** 	&const_1e_14, &const_1e_24, &const_1e_32
6186:src/xeq.c     **** };
6187:src/xeq.c     **** 
6188:src/xeq.c     **** void cmdconverged(unsigned int arg, enum rarg cmd) {
 27957              		.loc 1 6188 52 is_stmt 1 view -0
 27958              		.cfi_startproc
 27959              		@ args = 0, pretend = 0, frame = 216
 27960              		@ frame_needed = 0, uses_anonymous_args = 0
6189:src/xeq.c     **** 	const decNumber *tolerance;
 27961              		.loc 1 6189 2 view .LVU7353
6190:src/xeq.c     **** 	unsigned int tol = arg & 3;
 27962              		.loc 1 6190 2 view .LVU7354
6191:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
6192:src/xeq.c     **** 	const int specials = arg & 0x10;
6193:src/xeq.c     **** 	const int complex = mode == 2;
6194:src/xeq.c     **** 	const int absolute = mode == 1;
6195:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
6196:src/xeq.c     **** 	int res;
6197:src/xeq.c     **** 
6198:src/xeq.c     **** 	if (is_intmode()) {
 27963              		.loc 1 6198 6 is_stmt 0 view .LVU7355
 27964 0000 374B     		ldr	r3, .L2025
6188:src/xeq.c     **** 	const decNumber *tolerance;
 27965              		.loc 1 6188 52 view .LVU7356
 27966 0002 70B5     		push	{r4, r5, r6, lr}
 27967              		.cfi_def_cfa_offset 16
 27968              		.cfi_offset 4, -16
 27969              		.cfi_offset 5, -12
 27970              		.cfi_offset 6, -8
ARM GAS  /tmp/ccaPnj5t.s 			page 718


 27971              		.cfi_offset 14, -4
 27972              		.loc 1 6198 6 view .LVU7357
 27973 0004 1A68     		ldr	r2, [r3]
 27974 0006 92F8E817 		ldrb	r1, [r2, #2024]	@ zero_extendqisi2
 27975              	.LVL2175:
6191:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
 27976              		.loc 1 6191 2 is_stmt 1 view .LVU7358
6192:src/xeq.c     **** 	const int complex = mode == 2;
 27977              		.loc 1 6192 2 view .LVU7359
6193:src/xeq.c     **** 	const int absolute = mode == 1;
 27978              		.loc 1 6193 2 view .LVU7360
6194:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
 27979              		.loc 1 6194 2 view .LVU7361
6195:src/xeq.c     **** 	int res;
 27980              		.loc 1 6195 2 view .LVU7362
6196:src/xeq.c     **** 
 27981              		.loc 1 6196 2 view .LVU7363
 27982              		.loc 1 6198 2 view .LVU7364
 27983              		.loc 1 6198 5 is_stmt 0 view .LVU7365
 27984 000a CB07     		lsls	r3, r1, #31
6188:src/xeq.c     **** 	const decNumber *tolerance;
 27985              		.loc 1 6188 52 view .LVU7366
 27986 000c B8B0     		sub	sp, sp, #224
 27987              		.cfi_def_cfa_offset 240
 27988              		.loc 1 6198 5 view .LVU7367
 27989 000e 35D4     		bmi	.L2021
 27990 0010 00F00303 		and	r3, r0, #3
 27991              	.LVL2176:
6199:src/xeq.c     **** 		do_tst(regY_idx, TST_EQ);
6200:src/xeq.c     **** 		return;
6201:src/xeq.c     **** 	}
6202:src/xeq.c     **** 
6203:src/xeq.c     **** 	if (tol == 3) {
 27992              		.loc 1 6203 5 view .LVU7368
 27993 0014 032B     		cmp	r3, #3
 27994 0016 0446     		mov	r4, r0
 27995 0018 00F01005 		and	r5, r0, #16
 27996              	.LVL2177:
 27997              		.loc 1 6203 2 is_stmt 1 view .LVU7369
 27998              		.loc 1 6203 5 is_stmt 0 view .LVU7370
 27999 001c 24D0     		beq	.L2013
 28000 001e 314A     		ldr	r2, .L2025+4
 28001 0020 52F82360 		ldr	r6, [r2, r3, lsl #2]
 28002              	.LVL2178:
 28003              	.L2014:
6204:src/xeq.c     **** 		if (is_dblmode())
6205:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
6206:src/xeq.c     **** 		else
6207:src/xeq.c     **** 			tol = 0;
6208:src/xeq.c     **** 	}
6209:src/xeq.c     **** 	tolerance = convergence_tolerances[tol];
 28004              		.loc 1 6209 2 is_stmt 1 view .LVU7371
6210:src/xeq.c     **** 
6211:src/xeq.c     **** 	getXYZT(&x, &y, &z, &t);
 28005              		.loc 1 6211 2 view .LVU7372
 28006              	.LBB3638:
 28007              	.LBI3638:
ARM GAS  /tmp/ccaPnj5t.s 			page 719


 873:src/xeq.c     **** 	getXYZ(x, y, z);
 28008              		.loc 1 873 6 view .LVU7373
 28009              	.LBB3639:
 874:src/xeq.c     **** 	getT(t);
 28010              		.loc 1 874 2 view .LVU7374
 28011 0024 1DAA     		add	r2, sp, #116
 28012              	.LVL2179:
 874:src/xeq.c     **** 	getT(t);
 28013              		.loc 1 874 2 is_stmt 0 view .LVU7375
 28014 0026 14A9     		add	r1, sp, #80
 28015              	.LVL2180:
 874:src/xeq.c     **** 	getT(t);
 28016              		.loc 1 874 2 view .LVU7376
 28017 0028 0BA8     		add	r0, sp, #44
 28018              	.LVL2181:
 874:src/xeq.c     **** 	getT(t);
 28019              		.loc 1 874 2 view .LVU7377
 28020 002a FFF7FEFF 		bl	getXYZ
 28021              	.LVL2182:
 875:src/xeq.c     **** }
 28022              		.loc 1 875 2 is_stmt 1 view .LVU7378
 28023              	.LBB3640:
 28024              	.LBI3640:
 844:src/xeq.c     **** 	getRegister(t, regT_idx);
 28025              		.loc 1 844 13 view .LVU7379
 28026              	.LBB3641:
 845:src/xeq.c     **** }
 28027              		.loc 1 845 2 view .LVU7380
 28028 002e 02A8     		add	r0, sp, #8
 28029              	.LVL2183:
 845:src/xeq.c     **** }
 28030              		.loc 1 845 2 is_stmt 0 view .LVU7381
 28031 0030 6721     		movs	r1, #103
 28032 0032 FFF7FEFF 		bl	getRegister
 28033              	.LVL2184:
 845:src/xeq.c     **** }
 28034              		.loc 1 845 2 view .LVU7382
 28035              	.LBE3641:
 28036              	.LBE3640:
 28037              	.LBE3639:
 28038              	.LBE3638:
6212:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || decNumberIsSpecial(&y))
 28039              		.loc 1 6212 2 is_stmt 1 view .LVU7383
 28040              		.loc 1 6212 29 is_stmt 0 view .LVU7384
 28041 0036 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 28042 003a 9DF85820 		ldrb	r2, [sp, #88]	@ zero_extendqisi2
 28043 003e 1343     		orrs	r3, r3, r2
 28044 0040 13F0700F 		tst	r3, #112
 28045 0044 0BD1     		bne	.L2015
6191:src/xeq.c     **** 	const int specials = arg & 0x10;
 28046              		.loc 1 6191 21 view .LVU7385
 28047 0046 C4F38104 		ubfx	r4, r4, #2, #2
 28048              	.LVL2185:
6213:src/xeq.c     **** 		res = specials;
6214:src/xeq.c     **** 	else if (complex) {
 28049              		.loc 1 6214 7 is_stmt 1 view .LVU7386
 28050              		.loc 1 6214 10 is_stmt 0 view .LVU7387
ARM GAS  /tmp/ccaPnj5t.s 			page 720


 28051 004a 022C     		cmp	r4, #2
 28052 004c 26D0     		beq	.L2022
6215:src/xeq.c     **** 		if (decNumberIsSpecial(&z) || decNumberIsSpecial(&t))
6216:src/xeq.c     **** 			res = specials;
6217:src/xeq.c     **** 		else {
6218:src/xeq.c     **** 			cmplxSubtract(&a, &b, &x, &y, &z, &t);
6219:src/xeq.c     **** 			cmplxR(&x, &a, &b);
6220:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
6221:src/xeq.c     **** 		}
6222:src/xeq.c     **** 	} else {
6223:src/xeq.c     **** 		if (absolute)
 28053              		.loc 1 6223 3 is_stmt 1 view .LVU7388
 28054              		.loc 1 6223 6 is_stmt 0 view .LVU7389
 28055 004e 012C     		cmp	r4, #1
6224:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28056              		.loc 1 6224 10 view .LVU7390
 28057 0050 3246     		mov	r2, r6
 28058 0052 14A9     		add	r1, sp, #80
 28059 0054 0BA8     		add	r0, sp, #44
6223:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28060              		.loc 1 6223 6 view .LVU7391
 28061 0056 3ED0     		beq	.L2023
6225:src/xeq.c     **** 		else
6226:src/xeq.c     **** 			res = relative_error(&x, &y, tolerance);
 28062              		.loc 1 6226 4 is_stmt 1 view .LVU7392
 28063              		.loc 1 6226 10 is_stmt 0 view .LVU7393
 28064 0058 FFF7FEFF 		bl	relative_error
 28065              	.LVL2186:
 28066 005c 0546     		mov	r5, r0
 28067              	.LVL2187:
 28068              	.L2015:
6227:src/xeq.c     **** 	}
6228:src/xeq.c     **** 	fin_tst(res);
 28069              		.loc 1 6228 2 is_stmt 1 discriminator 1 view .LVU7394
 28070 005e 2846     		mov	r0, r5
 28071 0060 FFF7FEFF 		bl	fin_tst
 28072              	.LVL2188:
6229:src/xeq.c     **** }
 28073              		.loc 1 6229 1 is_stmt 0 discriminator 1 view .LVU7395
 28074 0064 38B0     		add	sp, sp, #224
 28075              		.cfi_remember_state
 28076              		.cfi_def_cfa_offset 16
 28077              		@ sp needed
 28078 0066 70BD     		pop	{r4, r5, r6, pc}
 28079              	.LVL2189:
 28080              	.L2013:
 28081              		.cfi_restore_state
6204:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 28082              		.loc 1 6204 3 is_stmt 1 view .LVU7396
 28083              	.LBB3642:
 28084              	.LBI3642:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28085              		.loc 1 1100 5 view .LVU7397
 28086              	.LBB3643:
1101:src/xeq.c     **** }
 28087              		.loc 1 1101 2 view .LVU7398
1101:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 721


 28088              		.loc 1 1101 24 is_stmt 0 view .LVU7399
 28089 0068 B2F8E827 		ldrh	r2, [r2, #2024]
 28090 006c 44F20103 		movw	r3, #16385
 28091              	.LVL2190:
1101:src/xeq.c     **** }
 28092              		.loc 1 1101 24 view .LVU7400
 28093              	.LBE3643:
 28094              	.LBE3642:
6204:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 28095              		.loc 1 6204 6 view .LVU7401
 28096 0070 1340     		ands	r3, r3, r2
 28097 0072 B3F5804F 		cmp	r3, #16384
 28098 0076 07D0     		beq	.L2024
 28099 0078 1B4E     		ldr	r6, .L2025+8
 28100 007a D3E7     		b	.L2014
 28101              	.LVL2191:
 28102              	.L2021:
6199:src/xeq.c     **** 		return;
 28103              		.loc 1 6199 3 is_stmt 1 view .LVU7402
 28104 007c 0021     		movs	r1, #0
 28105 007e 6520     		movs	r0, #101
 28106              	.LVL2192:
6199:src/xeq.c     **** 		return;
 28107              		.loc 1 6199 3 is_stmt 0 view .LVU7403
 28108 0080 FFF7FEFF 		bl	do_tst
 28109              	.LVL2193:
6200:src/xeq.c     **** 	}
 28110              		.loc 1 6200 3 is_stmt 1 view .LVU7404
 28111              		.loc 1 6229 1 is_stmt 0 view .LVU7405
 28112 0084 38B0     		add	sp, sp, #224
 28113              		.cfi_remember_state
 28114              		.cfi_def_cfa_offset 16
 28115              		@ sp needed
 28116 0086 70BD     		pop	{r4, r5, r6, pc}
 28117              	.LVL2194:
 28118              	.L2024:
 28119              		.cfi_restore_state
6205:src/xeq.c     **** 		else
 28120              		.loc 1 6205 4 is_stmt 1 view .LVU7406
6205:src/xeq.c     **** 		else
 28121              		.loc 1 6205 27 is_stmt 0 view .LVU7407
 28122 0088 184B     		ldr	r3, .L2025+12
6205:src/xeq.c     **** 		else
 28123              		.loc 1 6205 57 view .LVU7408
 28124 008a 194E     		ldr	r6, .L2025+16
6205:src/xeq.c     **** 		else
 28125              		.loc 1 6205 27 view .LVU7409
 28126 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
6205:src/xeq.c     **** 		else
 28127              		.loc 1 6205 57 view .LVU7410
 28128 008e 194A     		ldr	r2, .L2025+20
 28129 0090 03F08803 		and	r3, r3, #136
 28130 0094 802B     		cmp	r3, #128
 28131 0096 08BF     		it	eq
 28132 0098 1646     		moveq	r6, r2
 28133 009a C3E7     		b	.L2014
 28134              	.LVL2195:
ARM GAS  /tmp/ccaPnj5t.s 			page 722


 28135              	.L2022:
6215:src/xeq.c     **** 			res = specials;
 28136              		.loc 1 6215 3 is_stmt 1 view .LVU7411
6215:src/xeq.c     **** 			res = specials;
 28137              		.loc 1 6215 30 is_stmt 0 view .LVU7412
 28138 009c 9DF87C30 		ldrb	r3, [sp, #124]	@ zero_extendqisi2
 28139 00a0 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 28140 00a4 1343     		orrs	r3, r3, r2
 28141 00a6 13F0700F 		tst	r3, #112
 28142 00aa D8D1     		bne	.L2015
6218:src/xeq.c     **** 			cmplxR(&x, &a, &b);
 28143              		.loc 1 6218 4 is_stmt 1 view .LVU7413
 28144 00ac 02AB     		add	r3, sp, #8
 28145 00ae 0193     		str	r3, [sp, #4]
 28146 00b0 1DAB     		add	r3, sp, #116
 28147 00b2 0093     		str	r3, [sp]
 28148 00b4 2FA9     		add	r1, sp, #188
 28149 00b6 14AB     		add	r3, sp, #80
 28150 00b8 26A8     		add	r0, sp, #152
 28151 00ba 0BAA     		add	r2, sp, #44
 28152 00bc FFF7FEFF 		bl	cmplxSubtract
 28153              	.LVL2196:
6219:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
 28154              		.loc 1 6219 4 view .LVU7414
 28155 00c0 2FAA     		add	r2, sp, #188
 28156 00c2 26A9     		add	r1, sp, #152
 28157 00c4 0BA8     		add	r0, sp, #44
 28158 00c6 FFF7FEFF 		bl	cmplxR
 28159              	.LVL2197:
6220:src/xeq.c     **** 		}
 28160              		.loc 1 6220 4 view .LVU7415
6220:src/xeq.c     **** 		}
 28161              		.loc 1 6220 10 is_stmt 0 view .LVU7416
 28162 00ca 3146     		mov	r1, r6
 28163 00cc 0BA8     		add	r0, sp, #44
 28164 00ce FFF7FEFF 		bl	dn_lt
 28165              	.LVL2198:
 28166 00d2 0546     		mov	r5, r0
 28167              	.LVL2199:
6220:src/xeq.c     **** 		}
 28168              		.loc 1 6220 10 view .LVU7417
 28169 00d4 C3E7     		b	.L2015
 28170              	.LVL2200:
 28171              	.L2023:
6224:src/xeq.c     **** 		else
 28172              		.loc 1 6224 4 is_stmt 1 view .LVU7418
6224:src/xeq.c     **** 		else
 28173              		.loc 1 6224 10 is_stmt 0 view .LVU7419
 28174 00d6 FFF7FEFF 		bl	absolute_error
 28175              	.LVL2201:
 28176 00da 0546     		mov	r5, r0
 28177              	.LVL2202:
6224:src/xeq.c     **** 		else
 28178              		.loc 1 6224 10 view .LVU7420
 28179 00dc BFE7     		b	.L2015
 28180              	.L2026:
 28181 00de 00BF     		.align	2
ARM GAS  /tmp/ccaPnj5t.s 			page 723


 28182              	.L2025:
 28183 00e0 00000000 		.word	main_ram
 28184 00e4 00000000 		.word	.LANCHOR7
 28185 00e8 00000000 		.word	const_1e_14
 28186 00ec 00000000 		.word	XromParams
 28187 00f0 00000000 		.word	const_1e_32
 28188 00f4 00000000 		.word	const_1e_24
 28189              		.cfi_endproc
 28190              	.LFE266:
 28192              		.section	.text.cmdshuffle,"ax",%progbits
 28193              		.align	1
 28194              		.p2align 2,,3
 28195              		.global	cmdshuffle
 28196              		.syntax unified
 28197              		.thumb
 28198              		.thumb_func
 28199              		.fpu fpv4-sp-d16
 28201              	cmdshuffle:
 28202              	.LVL2203:
 28203              	.LFB267:
6230:src/xeq.c     **** 
6231:src/xeq.c     **** void cmdshuffle(unsigned int arg, enum rarg cmd) {
 28204              		.loc 1 6231 50 is_stmt 1 view -0
 28205              		.cfi_startproc
 28206              		@ args = 0, pretend = 0, frame = 64
 28207              		@ frame_needed = 0, uses_anonymous_args = 0
6232:src/xeq.c     **** 	REGISTER xyzt[4];
 28208              		.loc 1 6232 2 view .LVU7422
6233:src/xeq.c     **** 	int i;
 28209              		.loc 1 6233 2 view .LVU7423
6234:src/xeq.c     **** 
6235:src/xeq.c     **** 	set_lift();
 28210              		.loc 1 6235 2 view .LVU7424
 28211              	.LBB3644:
 28212              	.LBI3644:
 761:src/xeq.c     ****     State2.state_lift = 1;
 28213              		.loc 1 761 6 view .LVU7425
 28214              	.LBB3645:
 762:src/xeq.c     **** }
 28215              		.loc 1 762 5 view .LVU7426
 28216              	.LBE3645:
 28217              	.LBE3644:
6231:src/xeq.c     **** 	REGISTER xyzt[4];
 28218              		.loc 1 6231 50 is_stmt 0 view .LVU7427
 28219 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28220              		.cfi_def_cfa_offset 24
 28221              		.cfi_offset 4, -24
 28222              		.cfi_offset 5, -20
 28223              		.cfi_offset 6, -16
 28224              		.cfi_offset 7, -12
 28225              		.cfi_offset 8, -8
 28226              		.cfi_offset 14, -4
 28227              	.LBB3650:
 28228              	.LBB3646:
 762:src/xeq.c     **** }
 28229              		.loc 1 762 23 view .LVU7428
 28230 0004 1F4A     		ldr	r2, .L2037
ARM GAS  /tmp/ccaPnj5t.s 			page 724


 28231 0006 204E     		ldr	r6, .L2037+4
 28232 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 28233              	.LBE3646:
 28234              	.LBE3650:
6231:src/xeq.c     **** 	REGISTER xyzt[4];
 28235              		.loc 1 6231 50 view .LVU7429
 28236 000a 90B0     		sub	sp, sp, #64
 28237              		.cfi_def_cfa_offset 88
 28238              	.LBB3651:
 28239              	.LBB3647:
 762:src/xeq.c     **** }
 28240              		.loc 1 762 23 view .LVU7430
 28241 000c 43F04003 		orr	r3, r3, #64
 28242              	.LBE3647:
 28243              	.LBE3651:
6231:src/xeq.c     **** 	REGISTER xyzt[4];
 28244              		.loc 1 6231 50 view .LVU7431
 28245 0010 0546     		mov	r5, r0
 28246              	.LBB3652:
 28247              	.LBB3648:
 762:src/xeq.c     **** }
 28248              		.loc 1 762 23 view .LVU7432
 28249 0012 D375     		strb	r3, [r2, #23]
 28250              	.LBE3648:
 28251              	.LBE3652:
6236:src/xeq.c     **** 	for (i=0; i<4; i++)
 28252              		.loc 1 6236 2 is_stmt 1 view .LVU7433
 28253              	.LVL2204:
 28254              		.loc 1 6236 12 view .LVU7434
 28255 0014 6F46     		mov	r7, sp
 28256              	.LBB3653:
 28257              	.LBB3649:
 762:src/xeq.c     **** }
 28258              		.loc 1 762 23 is_stmt 0 view .LVU7435
 28259 0016 6424     		movs	r4, #100
 28260              	.LBE3649:
 28261              	.LBE3653:
 28262              	.LBB3654:
 28263              	.LBB3655:
 28264              	.LBB3656:
 28265              	.LBB3657:
1101:src/xeq.c     **** }
 28266              		.loc 1 1101 24 view .LVU7436
 28267 0018 44F20108 		movw	r8, #16385
 28268              	.LVL2205:
 28269              	.L2029:
1101:src/xeq.c     **** }
 28270              		.loc 1 1101 24 view .LVU7437
 28271              	.LBE3657:
 28272              	.LBE3656:
 28273              	.LBE3655:
 28274              	.LBE3654:
6237:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28275              		.loc 1 6237 3 is_stmt 1 discriminator 3 view .LVU7438
 28276              	.LBB3664:
 28277              	.LBI3664:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
ARM GAS  /tmp/ccaPnj5t.s 			page 725


 28278              		.loc 1 712 11 discriminator 3 view .LVU7439
 28279              	.LBB3665:
 713:src/xeq.c     **** }
 28280              		.loc 1 713 2 discriminator 3 view .LVU7440
 713:src/xeq.c     **** }
 28281              		.loc 1 713 9 is_stmt 0 discriminator 3 view .LVU7441
 28282 001c 2046     		mov	r0, r4
 28283 001e FFF7FEFF 		bl	get_reg_n
 28284              	.LVL2206:
 713:src/xeq.c     **** }
 28285              		.loc 1 713 9 discriminator 3 view .LVU7442
 28286              	.LBE3665:
 28287              	.LBE3664:
 28288              	.LBB3667:
 28289              	.LBB3662:
 28290              	.LBB3660:
 28291              	.LBB3658:
1101:src/xeq.c     **** }
 28292              		.loc 1 1101 24 discriminator 3 view .LVU7443
 28293 0022 3368     		ldr	r3, [r6]
 28294 0024 B3F8E837 		ldrh	r3, [r3, #2024]
 28295              	.LBE3658:
 28296              	.LBE3660:
 721:src/xeq.c     **** }
 28297              		.loc 1 721 2 discriminator 3 view .LVU7444
 28298 0028 08EA0303 		and	r3, r8, r3
 28299 002c B3F5804F 		cmp	r3, #16384
 28300              	.LBE3662:
 28301              	.LBE3667:
 28302              	.LBB3668:
 28303              	.LBB3666:
 713:src/xeq.c     **** }
 28304              		.loc 1 713 9 discriminator 3 view .LVU7445
 28305 0030 0146     		mov	r1, r0
 28306              	.LVL2207:
 713:src/xeq.c     **** }
 28307              		.loc 1 713 9 discriminator 3 view .LVU7446
 28308              	.LBE3666:
 28309              	.LBE3668:
 28310              	.LBB3669:
 28311              	.LBI3654:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 28312              		.loc 1 720 6 is_stmt 1 discriminator 3 view .LVU7447
 28313              	.LBB3663:
 721:src/xeq.c     **** }
 28314              		.loc 1 721 2 discriminator 3 view .LVU7448
 28315              	.LBB3661:
 28316              	.LBI3656:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28317              		.loc 1 1100 5 discriminator 3 view .LVU7449
 28318              	.LBB3659:
1101:src/xeq.c     **** }
 28319              		.loc 1 1101 2 discriminator 3 view .LVU7450
 28320              	.LBE3659:
 28321              	.LBE3661:
 721:src/xeq.c     **** }
 28322              		.loc 1 721 2 is_stmt 0 discriminator 3 view .LVU7451
ARM GAS  /tmp/ccaPnj5t.s 			page 726


 28323 0032 0CBF     		ite	eq
 28324 0034 1022     		moveq	r2, #16
 28325 0036 0822     		movne	r2, #8
 28326 0038 3846     		mov	r0, r7
 28327              	.LVL2208:
 721:src/xeq.c     **** }
 28328              		.loc 1 721 2 discriminator 3 view .LVU7452
 28329 003a 0134     		adds	r4, r4, #1
 28330              	.LVL2209:
 721:src/xeq.c     **** }
 28331              		.loc 1 721 2 discriminator 3 view .LVU7453
 28332 003c FFF7FEFF 		bl	xcopy
 28333              	.LVL2210:
 721:src/xeq.c     **** }
 28334              		.loc 1 721 2 discriminator 3 view .LVU7454
 28335              	.LBE3663:
 28336              	.LBE3669:
6236:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28337              		.loc 1 6236 17 is_stmt 1 discriminator 3 view .LVU7455
6236:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28338              		.loc 1 6236 12 discriminator 3 view .LVU7456
6236:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28339              		.loc 1 6236 2 is_stmt 0 discriminator 3 view .LVU7457
 28340 0040 682C     		cmp	r4, #104
 28341 0042 07F11007 		add	r7, r7, #16
 28342 0046 E9D1     		bne	.L2029
 28343 0048 6424     		movs	r4, #100
 28344              	.LBB3670:
 28345              	.LBB3671:
 28346              	.LBB3672:
 28347              	.LBB3673:
1101:src/xeq.c     **** }
 28348              		.loc 1 1101 24 view .LVU7458
 28349 004a 44F20107 		movw	r7, #16385
 28350              	.L2031:
 28351              	.LVL2211:
1101:src/xeq.c     **** }
 28352              		.loc 1 1101 24 view .LVU7459
 28353              	.LBE3673:
 28354              	.LBE3672:
 28355              	.LBE3671:
 28356              	.LBE3670:
6238:src/xeq.c     **** 
6239:src/xeq.c     **** 	for (i=0; i<4; i++) {
6240:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28357              		.loc 1 6240 3 is_stmt 1 view .LVU7460
 28358              	.LBB3680:
 28359              	.LBI3680:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28360              		.loc 1 712 11 view .LVU7461
 28361              	.LBB3681:
 713:src/xeq.c     **** }
 28362              		.loc 1 713 2 view .LVU7462
 713:src/xeq.c     **** }
 28363              		.loc 1 713 9 is_stmt 0 view .LVU7463
 28364 004e 2046     		mov	r0, r4
 28365 0050 FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/ccaPnj5t.s 			page 727


 28366              	.LVL2212:
 713:src/xeq.c     **** }
 28367              		.loc 1 713 9 view .LVU7464
 28368              	.LBE3681:
 28369              	.LBE3680:
 28370              	.LBB3682:
 28371              	.LBB3678:
 28372              	.LBB3676:
 28373              	.LBB3674:
1101:src/xeq.c     **** }
 28374              		.loc 1 1101 24 view .LVU7465
 28375 0054 3368     		ldr	r3, [r6]
 28376 0056 B3F8E837 		ldrh	r3, [r3, #2024]
 28377              	.LBE3674:
 28378              	.LBE3676:
 721:src/xeq.c     **** }
 28379              		.loc 1 721 2 view .LVU7466
 28380 005a 3B40     		ands	r3, r3, r7
 28381 005c B3F5804F 		cmp	r3, #16384
 28382              	.LBE3678:
 28383              	.LBE3682:
 28384              		.loc 1 6240 36 view .LVU7467
 28385 0060 05F00301 		and	r1, r5, #3
 28386              	.LVL2213:
 28387              	.LBB3683:
 28388              	.LBI3670:
 720:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 28389              		.loc 1 720 6 is_stmt 1 view .LVU7468
 28390              	.LBB3679:
 721:src/xeq.c     **** }
 28391              		.loc 1 721 2 view .LVU7469
 28392              	.LBB3677:
 28393              	.LBI3672:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28394              		.loc 1 1100 5 view .LVU7470
 28395              	.LBB3675:
1101:src/xeq.c     **** }
 28396              		.loc 1 1101 2 view .LVU7471
 28397              	.LBE3675:
 28398              	.LBE3677:
 721:src/xeq.c     **** }
 28399              		.loc 1 721 2 is_stmt 0 view .LVU7472
 28400 0064 0CBF     		ite	eq
 28401 0066 1022     		moveq	r2, #16
 28402 0068 0822     		movne	r2, #8
 28403 006a 0134     		adds	r4, r4, #1
 28404              	.LVL2214:
 721:src/xeq.c     **** }
 28405              		.loc 1 721 2 view .LVU7473
 28406 006c 0DEB0111 		add	r1, sp, r1, lsl #4
 28407              	.LVL2215:
 721:src/xeq.c     **** }
 28408              		.loc 1 721 2 view .LVU7474
 28409 0070 FFF7FEFF 		bl	xcopy
 28410              	.LVL2216:
 721:src/xeq.c     **** }
 28411              		.loc 1 721 2 view .LVU7475
ARM GAS  /tmp/ccaPnj5t.s 			page 728


 28412              	.LBE3679:
 28413              	.LBE3683:
6241:src/xeq.c     **** 		arg >>= 2;
 28414              		.loc 1 6241 3 is_stmt 1 view .LVU7476
6239:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28415              		.loc 1 6239 2 is_stmt 0 view .LVU7477
 28416 0074 682C     		cmp	r4, #104
 28417              		.loc 1 6241 7 view .LVU7478
 28418 0076 4FEA9505 		lsr	r5, r5, #2
 28419              	.LVL2217:
6239:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28420              		.loc 1 6239 17 is_stmt 1 view .LVU7479
6239:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28421              		.loc 1 6239 12 view .LVU7480
6239:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28422              		.loc 1 6239 2 is_stmt 0 view .LVU7481
 28423 007a E8D1     		bne	.L2031
6242:src/xeq.c     **** 	}
6243:src/xeq.c     **** }
 28424              		.loc 1 6243 1 view .LVU7482
 28425 007c 10B0     		add	sp, sp, #64
 28426              		.cfi_def_cfa_offset 24
 28427              		@ sp needed
 28428 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28429              	.LVL2218:
 28430              	.L2038:
 28431              		.loc 1 6243 1 view .LVU7483
 28432 0082 00BF     		.align	2
 28433              	.L2037:
 28434 0084 00000000 		.word	StateWhileOn
 28435 0088 00000000 		.word	main_ram
 28436              		.cfi_endproc
 28437              	.LFE267:
 28439              		.section	.text.cmdmode,"ax",%progbits
 28440              		.align	1
 28441              		.p2align 2,,3
 28442              		.global	cmdmode
 28443              		.syntax unified
 28444              		.thumb
 28445              		.thumb_func
 28446              		.fpu fpv4-sp-d16
 28448              	cmdmode:
 28449              	.LVL2219:
 28450              	.LFB268:
6244:src/xeq.c     **** 
6245:src/xeq.c     **** /*
6246:src/xeq.c     ****  *  Toggle UState mode bits from XROM
6247:src/xeq.c     ****  */
6248:src/xeq.c     **** void cmdmode(unsigned int arg, enum rarg cmd) {
 28451              		.loc 1 6248 47 is_stmt 1 view -0
 28452              		.cfi_startproc
 28453              		@ args = 0, pretend = 0, frame = 0
 28454              		@ frame_needed = 0, uses_anonymous_args = 0
 28455              		@ link register save eliminated.
6249:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28456              		.loc 1 6249 2 view .LVU7485
6248:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
ARM GAS  /tmp/ccaPnj5t.s 			page 729


 28457              		.loc 1 6248 47 is_stmt 0 view .LVU7486
 28458 0000 30B4     		push	{r4, r5}
 28459              		.cfi_def_cfa_offset 8
 28460              		.cfi_offset 4, -8
 28461              		.cfi_offset 5, -4
6250:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 28462              		.loc 1 6250 62 view .LVU7487
 28463 0002 134D     		ldr	r5, .L2044
6249:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28464              		.loc 1 6249 35 view .LVU7488
 28465 0004 0122     		movs	r2, #1
 28466 0006 A0F12003 		sub	r3, r0, #32
 28467 000a C0F12004 		rsb	r4, r0, #32
 28468 000e 02FA03F3 		lsl	r3, r2, r3
 28469 0012 22FA04F4 		lsr	r4, r2, r4
 28470 0016 8240     		lsls	r2, r2, r0
 28471              		.loc 1 6250 62 view .LVU7489
 28472 0018 2868     		ldr	r0, [r5]
 28473              	.LVL2220:
6251:src/xeq.c     **** 
6252:src/xeq.c     **** 	if (cmd == RARG_MODE_SET)
 28474              		.loc 1 6252 5 view .LVU7490
 28475 001a 8129     		cmp	r1, #129
6253:src/xeq.c     **** 		*mode |= bit;
 28476              		.loc 1 6253 9 view .LVU7491
 28477 001c D0F8E457 		ldr	r5, [r0, #2020]
6249:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 28478              		.loc 1 6249 35 view .LVU7492
 28479 0020 43EA0403 		orr	r3, r3, r4
 28480              	.LVL2221:
6250:src/xeq.c     **** 
 28481              		.loc 1 6250 2 is_stmt 1 view .LVU7493
6252:src/xeq.c     **** 		*mode |= bit;
 28482              		.loc 1 6252 2 view .LVU7494
 28483              		.loc 1 6253 9 is_stmt 0 view .LVU7495
 28484 0024 00F2E471 		addw	r1, r0, #2020
 28485              	.LVL2222:
6252:src/xeq.c     **** 		*mode |= bit;
 28486              		.loc 1 6252 5 view .LVU7496
 28487 0028 0AD0     		beq	.L2043
6254:src/xeq.c     **** 	else
6255:src/xeq.c     **** 		*mode &= ~bit;
 28488              		.loc 1 6255 3 is_stmt 1 view .LVU7497
 28489              		.loc 1 6255 9 is_stmt 0 view .LVU7498
 28490 002a D0F8E847 		ldr	r4, [r0, #2024]
 28491 002e 25EA0202 		bic	r2, r5, r2
 28492              	.LVL2223:
 28493              		.loc 1 6255 9 view .LVU7499
 28494 0032 24EA0303 		bic	r3, r4, r3
 28495              	.LVL2224:
 28496              		.loc 1 6255 9 view .LVU7500
 28497 0036 C0F8E427 		str	r2, [r0, #2020]
6256:src/xeq.c     **** }
 28498              		.loc 1 6256 1 view .LVU7501
 28499 003a 30BC     		pop	{r4, r5}
 28500              		.cfi_remember_state
 28501              		.cfi_restore 5
ARM GAS  /tmp/ccaPnj5t.s 			page 730


 28502              		.cfi_restore 4
 28503              		.cfi_def_cfa_offset 0
 28504 003c 4B60     		str	r3, [r1, #4]
 28505 003e 7047     		bx	lr
 28506              	.LVL2225:
 28507              	.L2043:
 28508              		.cfi_restore_state
6253:src/xeq.c     **** 	else
 28509              		.loc 1 6253 3 is_stmt 1 view .LVU7502
6253:src/xeq.c     **** 	else
 28510              		.loc 1 6253 9 is_stmt 0 view .LVU7503
 28511 0040 4C68     		ldr	r4, [r1, #4]
 28512 0042 2A43     		orrs	r2, r2, r5
 28513              	.LVL2226:
6253:src/xeq.c     **** 	else
 28514              		.loc 1 6253 9 view .LVU7504
 28515 0044 2343     		orrs	r3, r3, r4
 28516              	.LVL2227:
6253:src/xeq.c     **** 	else
 28517              		.loc 1 6253 9 view .LVU7505
 28518 0046 C0F8E427 		str	r2, [r0, #2020]
 28519              		.loc 1 6256 1 view .LVU7506
 28520 004a 30BC     		pop	{r4, r5}
 28521              		.cfi_restore 5
 28522              		.cfi_restore 4
 28523              		.cfi_def_cfa_offset 0
 28524 004c 4B60     		str	r3, [r1, #4]
 28525 004e 7047     		bx	lr
 28526              	.L2045:
 28527              		.align	2
 28528              	.L2044:
 28529 0050 00000000 		.word	main_ram
 28530              		.cfi_endproc
 28531              	.LFE268:
 28533              		.section	.text.cmdlpop,"ax",%progbits
 28534              		.align	1
 28535              		.p2align 2,,3
 28536              		.global	cmdlpop
 28537              		.syntax unified
 28538              		.thumb
 28539              		.thumb_func
 28540              		.fpu fpv4-sp-d16
 28542              	cmdlpop:
 28543              	.LVL2228:
 28544              	.LFB269:
6257:src/xeq.c     **** 
6258:src/xeq.c     **** /*
6259:src/xeq.c     ****  *  Undo the effect of LOCL by popping the current local frame.
6260:src/xeq.c     ****  *  Needs to be executed from the same level that has established the frame.
6261:src/xeq.c     ****  */
6262:src/xeq.c     **** void cmdlpop(enum nilop op) {
 28545              		.loc 1 6262 29 is_stmt 1 view -0
 28546              		.cfi_startproc
 28547              		@ args = 0, pretend = 0, frame = 0
 28548              		@ frame_needed = 0, uses_anonymous_args = 0
6263:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28549              		.loc 1 6263 2 view .LVU7508
ARM GAS  /tmp/ccaPnj5t.s 			page 731


6262:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28550              		.loc 1 6262 29 is_stmt 0 view .LVU7509
 28551 0000 10B5     		push	{r4, lr}
 28552              		.cfi_def_cfa_offset 8
 28553              		.cfi_offset 4, -8
 28554              		.cfi_offset 14, -4
 28555              		.loc 1 6263 6 view .LVU7510
 28556 0002 0C4C     		ldr	r4, .L2050
 28557 0004 2368     		ldr	r3, [r4]
 28558 0006 B3F9DE17 		ldrsh	r1, [r3, #2014]
 28559              		.loc 1 6263 5 view .LVU7511
 28560 000a B3F9E227 		ldrsh	r2, [r3, #2018]
 28561 000e 8A42     		cmp	r2, r1
 28562 0010 05D0     		beq	.L2047
6264:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28563              		.loc 1 6264 3 is_stmt 1 view .LVU7512
 28564              	.LVL2229:
 28565              	.LBB3688:
 28566              	.LBI3688:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28567              		.loc 1 540 5 view .LVU7513
 28568              	.LBB3689:
 541:src/xeq.c     **** 		Error = e;
 28569              		.loc 1 541 2 view .LVU7514
 541:src/xeq.c     **** 		Error = e;
 28570              		.loc 1 541 12 is_stmt 0 view .LVU7515
 28571 0012 094B     		ldr	r3, .L2050+4
 541:src/xeq.c     **** 		Error = e;
 28572              		.loc 1 541 5 view .LVU7516
 28573 0014 1A68     		ldr	r2, [r3]
 28574 0016 0AB9     		cbnz	r2, .L2046
 28575              	.LVL2230:
 28576              	.LBB3690:
 28577              	.LBI3690:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28578              		.loc 1 540 5 is_stmt 1 view .LVU7517
 28579              	.LBB3691:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 28580              		.loc 1 542 3 view .LVU7518
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 28581              		.loc 1 542 9 is_stmt 0 view .LVU7519
 28582 0018 0722     		movs	r2, #7
 28583 001a 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 28584              		.loc 1 543 3 is_stmt 1 view .LVU7520
 28585              	.LVL2231:
 28586              	.L2046:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 28587              		.loc 1 543 3 is_stmt 0 view .LVU7521
 28588              	.LBE3691:
 28589              	.LBE3690:
 28590              	.LBE3689:
 28591              	.LBE3688:
6265:src/xeq.c     **** 		return;
6266:src/xeq.c     **** 	}
6267:src/xeq.c     **** 	RetStkPtr = LocalRegs;
6268:src/xeq.c     **** 	retstk_up();
ARM GAS  /tmp/ccaPnj5t.s 			page 732


6269:src/xeq.c     **** 	--RetStkPtr;
6270:src/xeq.c     **** }
 28592              		.loc 1 6270 1 view .LVU7522
 28593 001c 10BD     		pop	{r4, pc}
 28594              	.LVL2232:
 28595              	.L2047:
6267:src/xeq.c     **** 	retstk_up();
 28596              		.loc 1 6267 2 is_stmt 1 view .LVU7523
6267:src/xeq.c     **** 	retstk_up();
 28597              		.loc 1 6267 12 is_stmt 0 view .LVU7524
 28598 001e A3F8E227 		strh	r2, [r3, #2018]	@ movhi
6268:src/xeq.c     **** 	--RetStkPtr;
 28599              		.loc 1 6268 2 is_stmt 1 view .LVU7525
 28600 0022 FFF7FEFF 		bl	retstk_up
 28601              	.LVL2233:
6269:src/xeq.c     **** }
 28602              		.loc 1 6269 2 view .LVU7526
6269:src/xeq.c     **** }
 28603              		.loc 1 6269 4 is_stmt 0 view .LVU7527
 28604 0026 2268     		ldr	r2, [r4]
6269:src/xeq.c     **** }
 28605              		.loc 1 6269 2 view .LVU7528
 28606 0028 B2F8E237 		ldrh	r3, [r2, #2018]
 28607 002c 013B     		subs	r3, r3, #1
 28608 002e A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 28609              		.loc 1 6270 1 view .LVU7529
 28610 0032 10BD     		pop	{r4, pc}
 28611              	.L2051:
 28612              		.align	2
 28613              	.L2050:
 28614 0034 00000000 		.word	main_ram
 28615 0038 00000000 		.word	Error
 28616              		.cfi_endproc
 28617              	.LFE269:
 28619              		.section	.text.cmdregs,"ax",%progbits
 28620              		.align	1
 28621              		.p2align 2,,3
 28622              		.global	cmdregs
 28623              		.syntax unified
 28624              		.thumb
 28625              		.thumb_func
 28626              		.fpu fpv4-sp-d16
 28628              	cmdregs:
 28629              	.LVL2234:
 28630              	.LFB270:
6271:src/xeq.c     **** 
6272:src/xeq.c     **** /*
6273:src/xeq.c     ****  *  Reduce the number of global registers in favour of local data on the return stack
6274:src/xeq.c     ****  */
6275:src/xeq.c     **** void cmdregs(unsigned int arg, enum rarg op) {
 28631              		.loc 1 6275 46 is_stmt 1 view -0
 28632              		.cfi_startproc
 28633              		@ args = 0, pretend = 0, frame = 0
 28634              		@ frame_needed = 0, uses_anonymous_args = 0
6276:src/xeq.c     **** 	int distance;
 28635              		.loc 1 6276 2 view .LVU7531
6277:src/xeq.c     **** 	int length;
ARM GAS  /tmp/ccaPnj5t.s 			page 733


 28636              		.loc 1 6277 2 view .LVU7532
6278:src/xeq.c     **** 
6279:src/xeq.c     **** 	if (is_dblmode()) {
 28637              		.loc 1 6279 2 view .LVU7533
 28638              	.LBB3698:
 28639              	.LBI3698:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28640              		.loc 1 1100 5 view .LVU7534
 28641              	.LBB3699:
1101:src/xeq.c     **** }
 28642              		.loc 1 1101 2 view .LVU7535
 28643              	.LBE3699:
 28644              	.LBE3698:
6275:src/xeq.c     **** 	int distance;
 28645              		.loc 1 6275 46 is_stmt 0 view .LVU7536
 28646 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28647              		.cfi_def_cfa_offset 24
 28648              		.cfi_offset 4, -24
 28649              		.cfi_offset 5, -20
 28650              		.cfi_offset 6, -16
 28651              		.cfi_offset 7, -12
 28652              		.cfi_offset 8, -8
 28653              		.cfi_offset 14, -4
 28654              	.LBB3701:
 28655              	.LBB3700:
1101:src/xeq.c     **** }
 28656              		.loc 1 1101 12 view .LVU7537
 28657 0004 294F     		ldr	r7, .L2068
 28658 0006 3A68     		ldr	r2, [r7]
1101:src/xeq.c     **** }
 28659              		.loc 1 1101 24 view .LVU7538
 28660 0008 B2F8E817 		ldrh	r1, [r2, #2024]
 28661              	.LVL2235:
1101:src/xeq.c     **** }
 28662              		.loc 1 1101 24 view .LVU7539
 28663 000c 44F20103 		movw	r3, #16385
 28664              	.LBE3700:
 28665              	.LBE3701:
 28666              		.loc 1 6279 5 view .LVU7540
 28667 0010 0B40     		ands	r3, r3, r1
 28668 0012 B3F5804F 		cmp	r3, #16384
6275:src/xeq.c     **** 	int distance;
 28669              		.loc 1 6275 46 view .LVU7541
 28670 0016 0446     		mov	r4, r0
 28671              		.loc 1 6279 5 view .LVU7542
 28672 0018 36D0     		beq	.L2064
6280:src/xeq.c     **** 		// DP register length 16 bytes
6281:src/xeq.c     **** 		length = (arg << 4); 
6282:src/xeq.c     **** 		// We need additional room for lettered registers
6283:src/xeq.c     **** 		arg = (arg << 1) + STACK_SIZE + EXTRA_REG;
6284:src/xeq.c     **** 	}
6285:src/xeq.c     **** 	else {
6286:src/xeq.c     **** 		if (UState.mode_double && arg < STACK_SIZE + EXTRA_REG) {
 28673              		.loc 1 6286 3 is_stmt 1 view .LVU7543
 28674              		.loc 1 6286 7 is_stmt 0 view .LVU7544
 28675 001a 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 28676              		.loc 1 6286 6 view .LVU7545
ARM GAS  /tmp/ccaPnj5t.s 			page 734


 28677 001e 5B06     		lsls	r3, r3, #25
 28678 0020 29D4     		bmi	.L2065
 28679              	.L2055:
6287:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
6288:src/xeq.c     **** 			// We must not release the space needed for the DP lettered registers
6289:src/xeq.c     **** 			report_err(ERR_RANGE);
6290:src/xeq.c     **** 			return;
6291:src/xeq.c     **** 		}
6292:src/xeq.c     **** 		// register length 8 bytes
6293:src/xeq.c     **** 		length = (arg << 3);
 28680              		.loc 1 6293 3 is_stmt 1 view .LVU7546
 28681              		.loc 1 6293 17 is_stmt 0 view .LVU7547
 28682 0022 4FEAC408 		lsl	r8, r4, #3
 28683              	.LVL2236:
 28684              	.L2054:
6294:src/xeq.c     **** 	}
6295:src/xeq.c     **** 	distance = NumRegs - arg;
 28685              		.loc 1 6295 2 is_stmt 1 view .LVU7548
 28686              		.loc 1 6295 13 is_stmt 0 view .LVU7549
 28687 0026 92F8CF57 		ldrb	r5, [r2, #1999]	@ zero_extendqisi2
 28688              		.loc 1 6295 21 view .LVU7550
 28689 002a 2D1B     		subs	r5, r5, r4
 28690              	.LVL2237:
6296:src/xeq.c     **** 	
6297:src/xeq.c     **** 	// Move return stack, check for room
6298:src/xeq.c     **** 	if (move_retstk(distance << 2))
 28691              		.loc 1 6298 2 is_stmt 1 view .LVU7551
 28692              		.loc 1 6298 6 is_stmt 0 view .LVU7552
 28693 002c A800     		lsls	r0, r5, #2
 28694 002e FFF7FEFF 		bl	move_retstk
 28695              	.LVL2238:
 28696              		.loc 1 6298 5 view .LVU7553
 28697 0032 0646     		mov	r6, r0
 28698 0034 08B1     		cbz	r0, .L2066
 28699              	.LVL2239:
 28700              	.L2052:
6299:src/xeq.c     **** 		return;
6300:src/xeq.c     **** 	
6301:src/xeq.c     **** 	// Move register contents, including the statistics registers
6302:src/xeq.c     **** 	xcopy((unsigned short *)(Regs + TOPREALREG - arg)     - SizeStatRegs,
6303:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
6304:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
6305:src/xeq.c     **** 
6306:src/xeq.c     **** 	// Clear the left space
6307:src/xeq.c     **** 	if (distance < 0)
6308:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
6309:src/xeq.c     **** 	NumRegs = arg;
6310:src/xeq.c     **** }
 28701              		.loc 1 6310 1 view .LVU7554
 28702 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28703              	.LVL2240:
 28704              	.L2066:
6302:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28705              		.loc 1 6302 2 is_stmt 1 view .LVU7555
6302:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28706              		.loc 1 6302 27 is_stmt 0 view .LVU7556
 28707 003a 3B68     		ldr	r3, [r7]
ARM GAS  /tmp/ccaPnj5t.s 			page 735


6302:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28708              		.loc 1 6302 56 view .LVU7557
 28709 003c 1C4A     		ldr	r2, .L2068+4
6303:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28710              		.loc 1 6303 45 view .LVU7558
 28711 003e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
6302:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28712              		.loc 1 6302 56 view .LVU7559
 28713 0042 1268     		ldr	r2, [r2]
6303:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28714              		.loc 1 6303 45 view .LVU7560
 28715 0044 C1F16401 		rsb	r1, r1, #100
6302:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28716              		.loc 1 6302 45 view .LVU7561
 28717 0048 C4F16400 		rsb	r0, r4, #100
6302:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28718              		.loc 1 6302 27 view .LVU7562
 28719 004c 03F22C43 		addw	r3, r3, #1068
6303:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28720              		.loc 1 6303 56 view .LVU7563
 28721 0050 C2EB8101 		rsb	r1, r2, r1, lsl #2
6302:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28722              		.loc 1 6302 56 view .LVU7564
 28723 0054 C2EB8000 		rsb	r0, r2, r0, lsl #2
6302:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28724              		.loc 1 6302 2 view .LVU7565
 28725 0058 03EB4101 		add	r1, r3, r1, lsl #1
 28726 005c 08EB4202 		add	r2, r8, r2, lsl #1
 28727 0060 03EB4000 		add	r0, r3, r0, lsl #1
 28728 0064 FFF7FEFF 		bl	xcopy
 28729              	.LVL2241:
6307:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28730              		.loc 1 6307 2 is_stmt 1 view .LVU7566
6307:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28731              		.loc 1 6307 5 is_stmt 0 view .LVU7567
 28732 0068 002D     		cmp	r5, #0
 28733 006a 13DB     		blt	.L2067
 28734              	.L2059:
6309:src/xeq.c     **** }
 28735              		.loc 1 6309 2 is_stmt 1 view .LVU7568
6309:src/xeq.c     **** }
 28736              		.loc 1 6309 10 is_stmt 0 view .LVU7569
 28737 006c 3B68     		ldr	r3, [r7]
 28738 006e 83F8CF47 		strb	r4, [r3, #1999]
 28739              		.loc 1 6310 1 view .LVU7570
 28740 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28741              	.LVL2242:
 28742              	.L2065:
6286:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
 28743              		.loc 1 6286 26 discriminator 1 view .LVU7571
 28744 0076 0B28     		cmp	r0, #11
 28745 0078 D3D8     		bhi	.L2055
6289:src/xeq.c     **** 			return;
 28746              		.loc 1 6289 4 is_stmt 1 view .LVU7572
 28747              	.LVL2243:
 28748              	.LBB3702:
 28749              	.LBI3702:
ARM GAS  /tmp/ccaPnj5t.s 			page 736


 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28750              		.loc 1 540 5 view .LVU7573
 28751              	.LBB3703:
 541:src/xeq.c     **** 		Error = e;
 28752              		.loc 1 541 2 view .LVU7574
 541:src/xeq.c     **** 		Error = e;
 28753              		.loc 1 541 12 is_stmt 0 view .LVU7575
 28754 007a 0E4B     		ldr	r3, .L2068+8
 541:src/xeq.c     **** 		Error = e;
 28755              		.loc 1 541 5 view .LVU7576
 28756 007c 1A68     		ldr	r2, [r3]
 28757 007e 002A     		cmp	r2, #0
 28758 0080 D9D1     		bne	.L2052
 28759              	.LVL2244:
 28760              	.LBB3704:
 28761              	.LBI3704:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28762              		.loc 1 540 5 is_stmt 1 view .LVU7577
 28763              	.LBB3705:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 28764              		.loc 1 542 3 view .LVU7578
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 28765              		.loc 1 542 9 is_stmt 0 view .LVU7579
 28766 0082 0822     		movs	r2, #8
 28767 0084 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 28768              		.loc 1 543 3 is_stmt 1 view .LVU7580
 28769 0086 D6E7     		b	.L2052
 28770              	.LVL2245:
 28771              	.L2064:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 28772              		.loc 1 543 3 is_stmt 0 view .LVU7581
 28773              	.LBE3705:
 28774              	.LBE3704:
 28775              	.LBE3703:
 28776              	.LBE3702:
6281:src/xeq.c     **** 		// We need additional room for lettered registers
 28777              		.loc 1 6281 3 is_stmt 1 view .LVU7582
6283:src/xeq.c     **** 	}
 28778              		.loc 1 6283 14 is_stmt 0 view .LVU7583
 28779 0088 4300     		lsls	r3, r0, #1
6281:src/xeq.c     **** 		// We need additional room for lettered registers
 28780              		.loc 1 6281 17 view .LVU7584
 28781 008a 4FEA0018 		lsl	r8, r0, #4
 28782              	.LVL2246:
6283:src/xeq.c     **** 	}
 28783              		.loc 1 6283 3 is_stmt 1 view .LVU7585
6283:src/xeq.c     **** 	}
 28784              		.loc 1 6283 7 is_stmt 0 view .LVU7586
 28785 008e 03F10C04 		add	r4, r3, #12
 28786              	.LVL2247:
6283:src/xeq.c     **** 	}
 28787              		.loc 1 6283 7 view .LVU7587
 28788 0092 C8E7     		b	.L2054
 28789              	.LVL2248:
 28790              	.L2067:
6308:src/xeq.c     **** 	NumRegs = arg;
ARM GAS  /tmp/ccaPnj5t.s 			page 737


 28791              		.loc 1 6308 3 is_stmt 1 view .LVU7588
6308:src/xeq.c     **** 	NumRegs = arg;
 28792              		.loc 1 6308 8 is_stmt 0 view .LVU7589
 28793 0094 3868     		ldr	r0, [r7]
6308:src/xeq.c     **** 	NumRegs = arg;
 28794              		.loc 1 6308 41 view .LVU7590
 28795 0096 6A42     		rsbs	r2, r5, #0
6308:src/xeq.c     **** 	NumRegs = arg;
 28796              		.loc 1 6308 26 view .LVU7591
 28797 0098 00EBC500 		add	r0, r0, r5, lsl #3
6308:src/xeq.c     **** 	NumRegs = arg;
 28798              		.loc 1 6308 3 view .LVU7592
 28799 009c 3146     		mov	r1, r6
 28800 009e D200     		lsls	r2, r2, #3
 28801 00a0 00F24C70 		addw	r0, r0, #1868
 28802 00a4 FFF7FEFF 		bl	xset
 28803              	.LVL2249:
 28804 00a8 E0E7     		b	.L2059
 28805              	.L2069:
 28806 00aa 00BF     		.align	2
 28807              	.L2068:
 28808 00ac 00000000 		.word	main_ram
 28809 00b0 00000000 		.word	SizeStatRegs
 28810 00b4 00000000 		.word	Error
 28811              		.cfi_endproc
 28812              	.LFE270:
 28814              		.section	.text.op_double,"ax",%progbits
 28815              		.align	1
 28816              		.p2align 2,,3
 28817              		.global	op_double
 28818              		.syntax unified
 28819              		.thumb
 28820              		.thumb_func
 28821              		.fpu fpv4-sp-d16
 28823              	op_double:
 28824              	.LVL2250:
 28825              	.LFB216:
4079:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28826              		.loc 1 4079 31 is_stmt 1 view -0
 28827              		.cfi_startproc
 28828              		@ args = 0, pretend = 0, frame = 40
 28829              		@ frame_needed = 0, uses_anonymous_args = 0
4080:src/xeq.c     **** 	const int intm = is_intmode();
 28830              		.loc 1 4080 2 view .LVU7594
4079:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28831              		.loc 1 4079 31 is_stmt 0 view .LVU7595
 28832 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28833              		.cfi_def_cfa_offset 24
 28834              		.cfi_offset 4, -24
 28835              		.cfi_offset 5, -20
 28836              		.cfi_offset 6, -16
 28837              		.cfi_offset 7, -12
 28838              		.cfi_offset 8, -8
 28839              		.cfi_offset 14, -4
4081:src/xeq.c     **** 	int i;
 28840              		.loc 1 4081 19 view .LVU7596
 28841 0004 454E     		ldr	r6, .L2098
ARM GAS  /tmp/ccaPnj5t.s 			page 738


 28842 0006 3368     		ldr	r3, [r6]
4084:src/xeq.c     **** 		// Mode switch
 28843              		.loc 1 4084 5 view .LVU7597
 28844 0008 A0F1B504 		sub	r4, r0, #181
4084:src/xeq.c     **** 		// Mode switch
 28845              		.loc 1 4084 19 view .LVU7598
 28846 000c 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4081:src/xeq.c     **** 	int i;
 28847              		.loc 1 4081 19 view .LVU7599
 28848 0010 93F8E887 		ldrb	r8, [r3, #2024]	@ zero_extendqisi2
 28849              	.LVL2251:
4081:src/xeq.c     **** 	int i;
 28850              		.loc 1 4081 2 is_stmt 1 view .LVU7600
4084:src/xeq.c     **** 		// Mode switch
 28851              		.loc 1 4084 5 is_stmt 0 view .LVU7601
 28852 0014 B4FA84F4 		clz	r4, r4
 28853 0018 C2F38011 		ubfx	r1, r2, #6, #1
 28854 001c 6409     		lsrs	r4, r4, #5
 28855 001e 8C42     		cmp	r4, r1
4079:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28856              		.loc 1 4079 31 view .LVU7602
 28857 0020 8AB0     		sub	sp, sp, #40
 28858              		.cfi_def_cfa_offset 64
4081:src/xeq.c     **** 	int i;
 28859              		.loc 1 4081 12 view .LVU7603
 28860 0022 08F00108 		and	r8, r8, #1
 28861              	.LVL2252:
4082:src/xeq.c     **** 
 28862              		.loc 1 4082 2 is_stmt 1 view .LVU7604
4084:src/xeq.c     **** 		// Mode switch
 28863              		.loc 1 4084 2 view .LVU7605
4084:src/xeq.c     **** 		// Mode switch
 28864              		.loc 1 4084 5 is_stmt 0 view .LVU7606
 28865 0026 41D0     		beq	.L2071
4086:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28866              		.loc 1 4086 3 is_stmt 1 view .LVU7607
4086:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 28867              		.loc 1 4086 6 is_stmt 0 view .LVU7608
 28868 0028 B528     		cmp	r0, #181
 28869 002a 4AD0     		beq	.L2096
4104:src/xeq.c     **** 				// Convert X to K to single precision
 28870              		.loc 1 4104 4 is_stmt 1 view .LVU7609
4104:src/xeq.c     **** 				// Convert X to K to single precision
 28871              		.loc 1 4104 7 is_stmt 0 view .LVU7610
 28872 002c B8F1000F 		cmp	r8, #0
 28873 0030 25D1     		bne	.L2079
 28874 0032 6F24     		movs	r4, #111
 28875 0034 01AF     		add	r7, sp, #4
 28876              	.LVL2253:
 28877              	.L2081:
4108:src/xeq.c     **** 			}
 28878              		.loc 1 4108 6 is_stmt 1 discriminator 3 view .LVU7611
4108:src/xeq.c     **** 			}
 28879              		.loc 1 4108 28 is_stmt 0 discriminator 3 view .LVU7612
 28880 0036 03F22C43 		addw	r3, r3, #1068
 28881              	.LBB3706:
 28882              	.LBB3707:
ARM GAS  /tmp/ccaPnj5t.s 			page 739


 713:src/xeq.c     **** }
 28883              		.loc 1 713 9 discriminator 3 view .LVU7613
 28884 003a 2046     		mov	r0, r4
 28885              	.LBE3707:
 28886              	.LBE3706:
4108:src/xeq.c     **** 			}
 28887              		.loc 1 4108 6 discriminator 3 view .LVU7614
 28888 003c 03EBC405 		add	r5, r3, r4, lsl #3
 28889              	.LVL2254:
 28890              	.LBB3709:
 28891              	.LBI3706:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28892              		.loc 1 712 11 is_stmt 1 discriminator 3 view .LVU7615
 28893              	.LBB3708:
 713:src/xeq.c     **** }
 28894              		.loc 1 713 2 discriminator 3 view .LVU7616
 713:src/xeq.c     **** }
 28895              		.loc 1 713 9 is_stmt 0 discriminator 3 view .LVU7617
 28896 0040 FFF7FEFF 		bl	get_reg_n
 28897              	.LVL2255:
 713:src/xeq.c     **** }
 28898              		.loc 1 713 9 discriminator 3 view .LVU7618
 28899              	.LBE3708:
 28900              	.LBE3709:
 28901              	.LBB3710:
 28902              	.LBI3710:
 642:src/xeq.c     **** 	decNumber temp;
 28903              		.loc 1 642 6 is_stmt 1 discriminator 3 view .LVU7619
 28904              	.LBB3711:
 643:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 28905              		.loc 1 643 2 discriminator 3 view .LVU7620
 644:src/xeq.c     **** }
 28906              		.loc 1 644 2 discriminator 3 view .LVU7621
 644:src/xeq.c     **** }
 28907              		.loc 1 644 24 is_stmt 0 discriminator 3 view .LVU7622
 28908 0044 3946     		mov	r1, r7
 28909 0046 FFF7FEFF 		bl	decimal128ToNumber
 28910              	.LVL2256:
 644:src/xeq.c     **** }
 28911              		.loc 1 644 24 discriminator 3 view .LVU7623
 28912 004a 013C     		subs	r4, r4, #1
 28913              	.LVL2257:
 644:src/xeq.c     **** }
 28914              		.loc 1 644 24 discriminator 3 view .LVU7624
 28915 004c 0146     		mov	r1, r0
 644:src/xeq.c     **** }
 28916              		.loc 1 644 2 discriminator 3 view .LVU7625
 28917 004e 2846     		mov	r0, r5
 28918 0050 FFF7FEFF 		bl	packed_from_number
 28919              	.LVL2258:
 644:src/xeq.c     **** }
 28920              		.loc 1 644 2 discriminator 3 view .LVU7626
 28921              	.LBE3711:
 28922              	.LBE3710:
4107:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28923              		.loc 1 4107 50 is_stmt 1 discriminator 3 view .LVU7627
4107:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
ARM GAS  /tmp/ccaPnj5t.s 			page 740


 28924              		.loc 1 4107 42 discriminator 3 view .LVU7628
4107:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 28925              		.loc 1 4107 5 is_stmt 0 discriminator 3 view .LVU7629
 28926 0054 632C     		cmp	r4, #99
 28927 0056 3368     		ldr	r3, [r6]
 28928 0058 EDD1     		bne	.L2081
4110:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28929              		.loc 1 4110 4 is_stmt 1 view .LVU7630
4110:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28930              		.loc 1 4110 23 is_stmt 0 view .LVU7631
 28931 005a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4111:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28932              		.loc 1 4111 7 view .LVU7632
 28933 005e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4110:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28934              		.loc 1 4110 23 view .LVU7633
 28935 0062 6FF38612 		bfc	r2, #6, #1
4111:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28936              		.loc 1 4111 7 view .LVU7634
 28937 0066 6429     		cmp	r1, #100
4110:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28938              		.loc 1 4110 23 view .LVU7635
 28939 0068 83F8E927 		strb	r2, [r3, #2025]
4111:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28940              		.loc 1 4111 4 is_stmt 1 view .LVU7636
4111:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28941              		.loc 1 4111 7 is_stmt 0 view .LVU7637
 28942 006c 1AD8     		bhi	.L2084
 28943              	.LVL2259:
 28944              	.L2093:
4115:src/xeq.c     **** 	if (intm) {
 28945              		.loc 1 4115 2 is_stmt 1 view .LVU7638
4115:src/xeq.c     **** 	if (intm) {
 28946              		.loc 1 4115 14 is_stmt 0 view .LVU7639
 28947 006e 6420     		movs	r0, #100
 28948 0070 FFF7FEFF 		bl	get_reg_n
 28949              	.LVL2260:
4115:src/xeq.c     **** 	if (intm) {
 28950              		.loc 1 4115 12 view .LVU7640
 28951 0074 2A4B     		ldr	r3, .L2098+4
 28952 0076 1860     		str	r0, [r3]
4116:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28953              		.loc 1 4116 2 is_stmt 1 view .LVU7641
 28954              	.L2070:
4120:src/xeq.c     **** 
 28955              		.loc 1 4120 1 is_stmt 0 view .LVU7642
 28956 0078 0AB0     		add	sp, sp, #40
 28957              		.cfi_remember_state
 28958              		.cfi_def_cfa_offset 24
 28959              		@ sp needed
 28960 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28961              	.LVL2261:
 28962              	.L2079:
 28963              		.cfi_restore_state
4110:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28964              		.loc 1 4110 4 is_stmt 1 view .LVU7643
4111:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
ARM GAS  /tmp/ccaPnj5t.s 			page 741


 28965              		.loc 1 4111 7 is_stmt 0 view .LVU7644
 28966 007e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4110:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28967              		.loc 1 4110 23 view .LVU7645
 28968 0082 6FF38612 		bfc	r2, #6, #1
4111:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28969              		.loc 1 4111 7 view .LVU7646
 28970 0086 6429     		cmp	r1, #100
4110:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 28971              		.loc 1 4110 23 view .LVU7647
 28972 0088 83F8E927 		strb	r2, [r3, #2025]
4111:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28973              		.loc 1 4111 4 is_stmt 1 view .LVU7648
4111:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 28974              		.loc 1 4111 7 is_stmt 0 view .LVU7649
 28975 008c 0AD8     		bhi	.L2084
 28976              	.LVL2262:
 28977              	.L2092:
4115:src/xeq.c     **** 	if (intm) {
 28978              		.loc 1 4115 2 is_stmt 1 view .LVU7650
4115:src/xeq.c     **** 	if (intm) {
 28979              		.loc 1 4115 14 is_stmt 0 view .LVU7651
 28980 008e 6420     		movs	r0, #100
 28981 0090 FFF7FEFF 		bl	get_reg_n
 28982              	.LVL2263:
4115:src/xeq.c     **** 	if (intm) {
 28983              		.loc 1 4115 12 view .LVU7652
 28984 0094 224B     		ldr	r3, .L2098+4
 28985 0096 1860     		str	r0, [r3]
4116:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 28986              		.loc 1 4116 2 is_stmt 1 view .LVU7653
 28987              	.L2083:
4118:src/xeq.c     **** 	}
 28988              		.loc 1 4118 3 view .LVU7654
 28989 0098 CE20     		movs	r0, #206
 28990 009a FFF7FEFF 		bl	op_float
 28991              	.LVL2264:
4120:src/xeq.c     **** 
 28992              		.loc 1 4120 1 is_stmt 0 view .LVU7655
 28993 009e 0AB0     		add	sp, sp, #40
 28994              		.cfi_remember_state
 28995              		.cfi_def_cfa_offset 24
 28996              		@ sp needed
 28997 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28998              	.LVL2265:
 28999              	.L2084:
 29000              		.cfi_restore_state
4112:src/xeq.c     **** 		}
 29001              		.loc 1 4112 5 is_stmt 1 view .LVU7656
 29002 00a4 7D21     		movs	r1, #125
 29003 00a6 6420     		movs	r0, #100
 29004 00a8 FFF7FEFF 		bl	cmdregs
 29005              	.LVL2266:
 29006              	.L2071:
4115:src/xeq.c     **** 	if (intm) {
 29007              		.loc 1 4115 2 view .LVU7657
4115:src/xeq.c     **** 	if (intm) {
ARM GAS  /tmp/ccaPnj5t.s 			page 742


 29008              		.loc 1 4115 14 is_stmt 0 view .LVU7658
 29009 00ac 6420     		movs	r0, #100
 29010 00ae FFF7FEFF 		bl	get_reg_n
 29011              	.LVL2267:
4115:src/xeq.c     **** 	if (intm) {
 29012              		.loc 1 4115 12 view .LVU7659
 29013 00b2 1B4B     		ldr	r3, .L2098+4
 29014 00b4 1860     		str	r0, [r3]
4116:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29015              		.loc 1 4116 2 is_stmt 1 view .LVU7660
4116:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29016              		.loc 1 4116 5 is_stmt 0 view .LVU7661
 29017 00b6 B8F1000F 		cmp	r8, #0
 29018 00ba EDD1     		bne	.L2083
4120:src/xeq.c     **** 
 29019              		.loc 1 4120 1 view .LVU7662
 29020 00bc 0AB0     		add	sp, sp, #40
 29021              		.cfi_remember_state
 29022              		.cfi_def_cfa_offset 24
 29023              		@ sp needed
 29024 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29025              	.LVL2268:
 29026              	.L2096:
 29027              		.cfi_restore_state
4087:src/xeq.c     **** 				// Need space for double precision stack
 29028              		.loc 1 4087 4 is_stmt 1 view .LVU7663
4087:src/xeq.c     **** 				// Need space for double precision stack
 29029              		.loc 1 4087 7 is_stmt 0 view .LVU7664
 29030 00c2 93F8CF27 		ldrb	r2, [r3, #1999]	@ zero_extendqisi2
 29031 00c6 0B2A     		cmp	r2, #11
 29032 00c8 1ED9     		bls	.L2097
 29033              	.LVL2269:
 29034              	.L2073:
4095:src/xeq.c     **** 			if (! intm) {
 29035              		.loc 1 4095 4 is_stmt 1 view .LVU7665
4095:src/xeq.c     **** 			if (! intm) {
 29036              		.loc 1 4095 23 is_stmt 0 view .LVU7666
 29037 00ca 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29038 00ce 42F04002 		orr	r2, r2, #64
 29039 00d2 83F8E927 		strb	r2, [r3, #2025]
4096:src/xeq.c     **** 				// Convert X to K to double precision
 29040              		.loc 1 4096 4 is_stmt 1 view .LVU7667
4096:src/xeq.c     **** 				// Convert X to K to double precision
 29041              		.loc 1 4096 7 is_stmt 0 view .LVU7668
 29042 00d6 B8F1000F 		cmp	r8, #0
 29043 00da D8D1     		bne	.L2092
 29044 00dc 6424     		movs	r4, #100
 29045 00de 01AF     		add	r7, sp, #4
 29046              	.L2077:
 29047              	.LVL2270:
4100:src/xeq.c     **** 			}
 29048              		.loc 1 4100 6 is_stmt 1 view .LVU7669
 29049              	.LBB3712:
 29050              	.LBI3712:
 712:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 29051              		.loc 1 712 11 view .LVU7670
 29052              	.LBB3713:
ARM GAS  /tmp/ccaPnj5t.s 			page 743


 713:src/xeq.c     **** }
 29053              		.loc 1 713 2 view .LVU7671
 713:src/xeq.c     **** }
 29054              		.loc 1 713 9 is_stmt 0 view .LVU7672
 29055 00e0 2046     		mov	r0, r4
 29056 00e2 FFF7FEFF 		bl	get_reg_n
 29057              	.LVL2271:
 29058              	.LBE3713:
 29059              	.LBE3712:
4100:src/xeq.c     **** 			}
 29060              		.loc 1 4100 48 view .LVU7673
 29061 00e6 3368     		ldr	r3, [r6]
 29062 00e8 03F22C43 		addw	r3, r3, #1068
 29063              	.LBB3715:
 29064              	.LBB3714:
 713:src/xeq.c     **** }
 29065              		.loc 1 713 9 view .LVU7674
 29066 00ec 0546     		mov	r5, r0
 29067              	.LVL2272:
 713:src/xeq.c     **** }
 29068              		.loc 1 713 9 view .LVU7675
 29069              	.LBE3714:
 29070              	.LBE3715:
 29071              	.LBB3716:
 29072              	.LBI3716:
 648:src/xeq.c     **** 	decNumber temp;
 29073              		.loc 1 648 6 is_stmt 1 view .LVU7676
 29074              	.LBB3717:
 649:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 29075              		.loc 1 649 2 view .LVU7677
 650:src/xeq.c     **** }
 29076              		.loc 1 650 2 view .LVU7678
 650:src/xeq.c     **** }
 29077              		.loc 1 650 27 is_stmt 0 view .LVU7679
 29078 00ee 3946     		mov	r1, r7
 29079 00f0 03EBC400 		add	r0, r3, r4, lsl #3
 29080              	.LVL2273:
 650:src/xeq.c     **** }
 29081              		.loc 1 650 27 view .LVU7680
 29082 00f4 FFF7FEFF 		bl	decimal64ToNumber
 29083              	.LVL2274:
 650:src/xeq.c     **** }
 29084              		.loc 1 650 27 view .LVU7681
 29085 00f8 0134     		adds	r4, r4, #1
 29086              	.LVL2275:
 650:src/xeq.c     **** }
 29087              		.loc 1 650 27 view .LVU7682
 29088 00fa 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 29089              		.loc 1 650 2 view .LVU7683
 29090 00fc 2846     		mov	r0, r5
 29091 00fe FFF7FEFF 		bl	packed128_from_number
 29092              	.LVL2276:
 650:src/xeq.c     **** }
 29093              		.loc 1 650 2 view .LVU7684
 29094              	.LBE3717:
 29095              	.LBE3716:
ARM GAS  /tmp/ccaPnj5t.s 			page 744


4099:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29096              		.loc 1 4099 45 is_stmt 1 view .LVU7685
4099:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29097              		.loc 1 4099 17 view .LVU7686
4099:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29098              		.loc 1 4099 5 is_stmt 0 view .LVU7687
 29099 0102 702C     		cmp	r4, #112
 29100 0104 ECD1     		bne	.L2077
 29101 0106 B2E7     		b	.L2093
 29102              	.LVL2277:
 29103              	.L2097:
4089:src/xeq.c     **** 				if (Error) {
 29104              		.loc 1 4089 5 is_stmt 1 view .LVU7688
 29105 0108 7D21     		movs	r1, #125
 29106 010a 0C20     		movs	r0, #12
 29107              	.LVL2278:
4089:src/xeq.c     **** 				if (Error) {
 29108              		.loc 1 4089 5 is_stmt 0 view .LVU7689
 29109 010c FFF7FEFF 		bl	cmdregs
 29110              	.LVL2279:
4090:src/xeq.c     **** 					return;
 29111              		.loc 1 4090 5 is_stmt 1 view .LVU7690
4090:src/xeq.c     **** 					return;
 29112              		.loc 1 4090 9 is_stmt 0 view .LVU7691
 29113 0110 044B     		ldr	r3, .L2098+8
4090:src/xeq.c     **** 					return;
 29114              		.loc 1 4090 8 view .LVU7692
 29115 0112 1B68     		ldr	r3, [r3]
 29116 0114 002B     		cmp	r3, #0
 29117 0116 AFD1     		bne	.L2070
 29118 0118 3368     		ldr	r3, [r6]
 29119 011a D6E7     		b	.L2073
 29120              	.L2099:
 29121              		.align	2
 29122              	.L2098:
 29123 011c 00000000 		.word	main_ram
 29124 0120 00000000 		.word	StackBase
 29125 0124 00000000 		.word	Error
 29126              		.cfi_endproc
 29127              	.LFE216:
 29129              		.section	.text.cmdrestm,"ax",%progbits
 29130              		.align	1
 29131              		.p2align 2,,3
 29132              		.global	cmdrestm
 29133              		.syntax unified
 29134              		.thumb
 29135              		.thumb_func
 29136              		.fpu fpv4-sp-d16
 29138              	cmdrestm:
 29139              	.LVL2280:
 29140              	.LFB211:
3763:src/xeq.c     **** 	const int dbl = is_dblmode();
 29141              		.loc 1 3763 47 is_stmt 1 view -0
 29142              		.cfi_startproc
 29143              		@ args = 0, pretend = 0, frame = 0
 29144              		@ frame_needed = 0, uses_anonymous_args = 0
3764:src/xeq.c     **** 	const int intm = is_intmode();
ARM GAS  /tmp/ccaPnj5t.s 			page 745


 29145              		.loc 1 3764 2 view .LVU7694
 29146              	.LBB3718:
 29147              	.LBI3718:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29148              		.loc 1 1100 5 view .LVU7695
 29149              	.LBB3719:
1101:src/xeq.c     **** }
 29150              		.loc 1 1101 2 view .LVU7696
 29151              	.LBE3719:
 29152              	.LBE3718:
3763:src/xeq.c     **** 	const int dbl = is_dblmode();
 29153              		.loc 1 3763 47 is_stmt 0 view .LVU7697
 29154 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 29155              		.cfi_def_cfa_offset 24
 29156              		.cfi_offset 3, -24
 29157              		.cfi_offset 4, -20
 29158              		.cfi_offset 5, -16
 29159              		.cfi_offset 6, -12
 29160              		.cfi_offset 7, -8
 29161              		.cfi_offset 14, -4
 29162              	.LBB3727:
 29163              	.LBB3720:
1101:src/xeq.c     **** }
 29164              		.loc 1 1101 12 view .LVU7698
 29165 0002 294F     		ldr	r7, .L2108
 29166 0004 3D68     		ldr	r5, [r7]
 29167              	.LBE3720:
 29168              	.LBE3727:
3765:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29169              		.loc 1 3765 19 view .LVU7699
 29170 0006 95F8E847 		ldrb	r4, [r5, #2024]	@ zero_extendqisi2
 29171              	.LBB3728:
 29172              	.LBB3721:
1101:src/xeq.c     **** }
 29173              		.loc 1 1101 24 view .LVU7700
 29174 000a B5F8E867 		ldrh	r6, [r5, #2024]
 29175              	.LVL2281:
1101:src/xeq.c     **** }
 29176              		.loc 1 1101 24 view .LVU7701
 29177              	.LBE3721:
 29178              	.LBE3728:
3765:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29179              		.loc 1 3765 2 is_stmt 1 view .LVU7702
3766:src/xeq.c     **** 
 29180              		.loc 1 3766 18 is_stmt 0 view .LVU7703
 29181 000e FFF7FEFF 		bl	get_reg_n
 29182              	.LVL2282:
3766:src/xeq.c     **** 
 29183              		.loc 1 3766 2 view .LVU7704
 29184 0012 0822     		movs	r2, #8
3766:src/xeq.c     **** 
 29185              		.loc 1 3766 18 view .LVU7705
 29186 0014 0146     		mov	r1, r0
3766:src/xeq.c     **** 
 29187              		.loc 1 3766 2 view .LVU7706
 29188 0016 05F2E470 		addw	r0, r5, #2020
 29189 001a FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/ccaPnj5t.s 			page 746


 29190              	.LVL2283:
3769:src/xeq.c     **** 		UState.contrast = 6;
 29191              		.loc 1 3769 7 view .LVU7707
 29192 001e 3B68     		ldr	r3, [r7]
3769:src/xeq.c     **** 		UState.contrast = 6;
 29193              		.loc 1 3769 23 view .LVU7708
 29194 0020 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
3769:src/xeq.c     **** 		UState.contrast = 6;
 29195              		.loc 1 3769 5 view .LVU7709
 29196 0024 1107     		lsls	r1, r2, #28
3765:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29197              		.loc 1 3765 19 view .LVU7710
 29198 0026 04F00104 		and	r4, r4, #1
 29199              	.LVL2284:
3766:src/xeq.c     **** 
 29200              		.loc 1 3766 2 is_stmt 1 view .LVU7711
3769:src/xeq.c     **** 		UState.contrast = 6;
 29201              		.loc 1 3769 2 view .LVU7712
3769:src/xeq.c     **** 		UState.contrast = 6;
 29202              		.loc 1 3769 5 is_stmt 0 view .LVU7713
 29203 002a 04D1     		bne	.L2101
3770:src/xeq.c     **** 
 29204              		.loc 1 3770 3 is_stmt 1 view .LVU7714
3770:src/xeq.c     **** 
 29205              		.loc 1 3770 19 is_stmt 0 view .LVU7715
 29206 002c 0621     		movs	r1, #6
 29207 002e 61F30302 		bfi	r2, r1, #0, #4
 29208 0032 83F8E427 		strb	r2, [r3, #2020]
 29209              	.L2101:
3772:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29210              		.loc 1 3772 2 is_stmt 1 view .LVU7716
3772:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29211              		.loc 1 3772 14 is_stmt 0 view .LVU7717
 29212 0036 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3772:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29213              		.loc 1 3772 5 view .LVU7718
 29214 003a 02F00101 		and	r1, r2, #1
 29215 003e A142     		cmp	r1, r4
 29216 0040 08D0     		beq	.L2102
3774:src/xeq.c     **** 		if (intm)
 29217              		.loc 1 3774 3 is_stmt 1 view .LVU7719
3774:src/xeq.c     **** 		if (intm)
 29218              		.loc 1 3774 15 is_stmt 0 view .LVU7720
 29219 0042 64F30002 		bfi	r2, r4, #0, #1
 29220 0046 83F8E827 		strb	r2, [r3, #2024]
3775:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 29221              		.loc 1 3775 3 is_stmt 1 view .LVU7721
3775:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 29222              		.loc 1 3775 6 is_stmt 0 view .LVU7722
 29223 004a 4CB3     		cbz	r4, .L2103
3776:src/xeq.c     **** 		else
 29224              		.loc 1 3776 4 is_stmt 1 view .LVU7723
 29225 004c CF20     		movs	r0, #207
 29226 004e FFF7FEFF 		bl	op_float
 29227              	.LVL2285:
 29228 0052 3B68     		ldr	r3, [r7]
 29229              	.L2102:
ARM GAS  /tmp/ccaPnj5t.s 			page 747


3780:src/xeq.c     **** 		// Switch back to double/single precision
 29230              		.loc 1 3780 2 view .LVU7724
3780:src/xeq.c     **** 		// Switch back to double/single precision
 29231              		.loc 1 3780 6 is_stmt 0 view .LVU7725
 29232 0054 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3780:src/xeq.c     **** 		// Switch back to double/single precision
 29233              		.loc 1 3780 5 view .LVU7726
 29234 0058 D207     		lsls	r2, r2, #31
 29235 005a 20D4     		bmi	.L2100
 29236              	.LBB3729:
 29237              	.LBB3730:
1101:src/xeq.c     **** }
 29238              		.loc 1 1101 24 view .LVU7727
 29239 005c B3F8E827 		ldrh	r2, [r3, #2024]
 29240              	.LBE3730:
 29241              	.LBE3729:
 29242              	.LBB3733:
 29243              	.LBB3722:
 29244 0060 44F20101 		movw	r1, #16385
 29245              	.LBE3722:
 29246              	.LBE3733:
 29247              	.LBB3734:
 29248              	.LBB3731:
 29249 0064 0A40     		ands	r2, r2, r1
 29250              	.LBE3731:
 29251              	.LBE3734:
 29252              	.LBB3735:
 29253              	.LBB3723:
 29254 0066 0E40     		ands	r6, r6, r1
 29255              	.LVL2286:
1101:src/xeq.c     **** }
 29256              		.loc 1 1101 24 view .LVU7728
 29257              	.LBE3723:
 29258              	.LBE3735:
3780:src/xeq.c     **** 		// Switch back to double/single precision
 29259              		.loc 1 3780 21 view .LVU7729
 29260 0068 A2F58042 		sub	r2, r2, #16384
 29261              	.LBB3736:
 29262              	.LBB3724:
1101:src/xeq.c     **** }
 29263              		.loc 1 1101 24 view .LVU7730
 29264 006c A6F58041 		sub	r1, r6, #16384
 29265              	.LBE3724:
 29266              	.LBE3736:
3780:src/xeq.c     **** 		// Switch back to double/single precision
 29267              		.loc 1 3780 21 view .LVU7731
 29268 0070 B2FA82F2 		clz	r2, r2
 29269              	.LBB3737:
 29270              	.LBB3725:
1101:src/xeq.c     **** }
 29271              		.loc 1 1101 24 view .LVU7732
 29272 0074 B1FA81F1 		clz	r1, r1
 29273              	.LBE3725:
 29274              	.LBE3737:
3780:src/xeq.c     **** 		// Switch back to double/single precision
 29275              		.loc 1 3780 21 view .LVU7733
 29276 0078 5209     		lsrs	r2, r2, #5
ARM GAS  /tmp/ccaPnj5t.s 			page 748


 29277              	.LBB3738:
 29278              	.LBB3726:
1101:src/xeq.c     **** }
 29279              		.loc 1 1101 24 view .LVU7734
 29280 007a 4909     		lsrs	r1, r1, #5
 29281              	.LBE3726:
 29282              	.LBE3738:
 29283              	.LBB3739:
 29284              	.LBI3729:
1100:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29285              		.loc 1 1100 5 is_stmt 1 view .LVU7735
 29286              	.LBB3732:
1101:src/xeq.c     **** }
 29287              		.loc 1 1101 2 view .LVU7736
 29288              	.LBE3732:
 29289              	.LBE3739:
3780:src/xeq.c     **** 		// Switch back to double/single precision
 29290              		.loc 1 3780 21 is_stmt 0 view .LVU7737
 29291 007c 8A42     		cmp	r2, r1
 29292 007e 0ED0     		beq	.L2100
3782:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29293              		.loc 1 3782 3 is_stmt 1 view .LVU7738
3782:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29294              		.loc 1 3782 22 is_stmt 0 view .LVU7739
 29295 0080 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29296 0084 61F38612 		bfi	r2, r1, #6, #1
3783:src/xeq.c     **** 	}
 29297              		.loc 1 3783 3 view .LVU7740
 29298 0088 B6F5804F 		cmp	r6, #16384
3782:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29299              		.loc 1 3782 22 view .LVU7741
 29300 008c 83F8E927 		strb	r2, [r3, #2025]
3783:src/xeq.c     **** 	}
 29301              		.loc 1 3783 3 is_stmt 1 view .LVU7742
3785:src/xeq.c     **** #endif
 29302              		.loc 1 3785 1 is_stmt 0 view .LVU7743
 29303 0090 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 29304              		.cfi_remember_state
 29305              		.cfi_restore 14
 29306              		.cfi_restore 7
 29307              		.cfi_restore 6
 29308              		.cfi_restore 5
 29309              		.cfi_restore 4
 29310              		.cfi_restore 3
 29311              		.cfi_def_cfa_offset 0
3783:src/xeq.c     **** 	}
 29312              		.loc 1 3783 3 view .LVU7744
 29313 0094 0CBF     		ite	eq
 29314 0096 B620     		moveq	r0, #182
 29315 0098 B520     		movne	r0, #181
 29316 009a FFF7FEBF 		b	op_double
 29317              	.LVL2287:
 29318              	.L2100:
 29319              		.cfi_restore_state
3785:src/xeq.c     **** #endif
 29320              		.loc 1 3785 1 view .LVU7745
 29321 009e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
ARM GAS  /tmp/ccaPnj5t.s 			page 749


 29322              	.LVL2288:
 29323              	.L2103:
3778:src/xeq.c     **** 	}
 29324              		.loc 1 3778 4 is_stmt 1 view .LVU7746
 29325 00a0 FFF7FEFF 		bl	switch_to_int
 29326              	.LVL2289:
 29327 00a4 3B68     		ldr	r3, [r7]
 29328 00a6 D5E7     		b	.L2102
 29329              	.L2109:
 29330              		.align	2
 29331              	.L2108:
 29332 00a8 00000000 		.word	main_ram
 29333              		.cfi_endproc
 29334              	.LFE211:
 29336              		.section	.text.cmdxin,"ax",%progbits
 29337              		.align	1
 29338              		.p2align 2,,3
 29339              		.global	cmdxin
 29340              		.syntax unified
 29341              		.thumb
 29342              		.thumb_func
 29343              		.fpu fpv4-sp-d16
 29345              	cmdxin:
 29346              	.LVL2290:
 29347              	.LFB264:
5895:src/xeq.c     **** 
 29348              		.loc 1 5895 45 view -0
 29349              		.cfi_startproc
 29350              		@ args = 0, pretend = 0, frame = 40
 29351              		@ frame_needed = 0, uses_anonymous_args = 0
5897:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29352              		.loc 1 5897 2 view .LVU7748
5907:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29353              		.loc 1 5907 2 view .LVU7749
5895:src/xeq.c     **** 
 29354              		.loc 1 5895 45 is_stmt 0 view .LVU7750
 29355 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 29356              		.cfi_def_cfa_offset 32
 29357              		.cfi_offset 4, -32
 29358              		.cfi_offset 5, -28
 29359              		.cfi_offset 6, -24
 29360              		.cfi_offset 7, -20
 29361              		.cfi_offset 8, -16
 29362              		.cfi_offset 9, -12
 29363              		.cfi_offset 10, -8
 29364              		.cfi_offset 14, -4
5907:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29365              		.loc 1 5907 6 view .LVU7751
 29366 0004 6A4D     		ldr	r5, .L2139
5907:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29367              		.loc 1 5907 5 view .LVU7752
 29368 0006 95F90130 		ldrsb	r3, [r5, #1]
 29369 000a 002B     		cmp	r3, #0
5895:src/xeq.c     **** 
 29370              		.loc 1 5895 45 view .LVU7753
 29371 000c 8AB0     		sub	sp, sp, #40
 29372              		.cfi_def_cfa_offset 72
ARM GAS  /tmp/ccaPnj5t.s 			page 750


5907:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29373              		.loc 1 5907 5 view .LVU7754
 29374 000e C0F2AD80 		blt	.L2136
5915:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29375              		.loc 1 5915 2 is_stmt 1 view .LVU7755
 29376 0012 684E     		ldr	r6, .L2139+4
5920:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29377              		.loc 1 5920 26 is_stmt 0 view .LVU7756
 29378 0014 684F     		ldr	r7, .L2139+8
 29379              	.LBB3755:
 29380              	.LBB3756:
 738:src/xeq.c     **** }
 29381              		.loc 1 738 15 view .LVU7757
 29382 0016 DFF8B481 		ldr	r8, .L2139+28
 29383 001a 0446     		mov	r4, r0
 29384              	.LBE3756:
 29385              	.LBE3755:
5915:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29386              		.loc 1 5915 2 view .LVU7758
 29387 001c 4FF4E872 		mov	r2, #464
 29388 0020 0021     		movs	r1, #0
 29389              	.LVL2291:
5915:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29390              		.loc 1 5915 2 view .LVU7759
 29391 0022 3046     		mov	r0, r6
 29392              	.LVL2292:
5915:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29393              		.loc 1 5915 2 view .LVU7760
 29394 0024 FFF7FEFF 		bl	xset
 29395              	.LVL2293:
5916:src/xeq.c     **** 
 29396              		.loc 1 5916 2 is_stmt 1 view .LVU7761
 29397 0028 1022     		movs	r2, #16
 29398 002a 0021     		movs	r1, #0
 29399 002c 2846     		mov	r0, r5
 29400 002e FFF7FEFF 		bl	xset
 29401              	.LVL2294:
5919:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
 29402              		.loc 1 5919 2 view .LVU7762
 29403              	.LBB3760:
 29404              	.LBI3755:
 737:src/xeq.c     **** 	return State2.state_lift;
 29405              		.loc 1 737 12 view .LVU7763
 29406              	.LBB3757:
 738:src/xeq.c     **** }
 29407              		.loc 1 738 2 view .LVU7764
 29408              	.LBE3757:
 29409              	.LBE3760:
5920:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29410              		.loc 1 5920 26 is_stmt 0 view .LVU7765
 29411 0032 3A68     		ldr	r2, [r7]
 29412              	.LBB3761:
 29413              	.LBB3758:
 738:src/xeq.c     **** }
 29414              		.loc 1 738 15 view .LVU7766
 29415 0034 98F817E0 		ldrb	lr, [r8, #23]	@ zero_extendqisi2
 29416              	.LBE3758:
ARM GAS  /tmp/ccaPnj5t.s 			page 751


 29417              	.LBE3761:
5922:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29418              		.loc 1 5922 29 view .LVU7767
 29419 0038 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
5920:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29420              		.loc 1 5920 32 view .LVU7768
 29421 003c 92F8EAC7 		ldrb	ip, [r2, #2026]	@ zero_extendqisi2
5921:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29422              		.loc 1 5921 32 view .LVU7769
 29423 0040 92F8E907 		ldrb	r0, [r2, #2025]	@ zero_extendqisi2
5923:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29424              		.loc 1 5923 41 view .LVU7770
 29425 0044 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
5938:src/xeq.c     **** 
 29426              		.loc 1 5938 20 view .LVU7771
 29427 0048 B2F8E2A7 		ldrh	r10, [r2, #2018]
 29428 004c A5F80CA0 		strh	r10, [r5, #12]	@ movhi
5922:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29429              		.loc 1 5922 29 view .LVU7772
 29430 0050 03F00103 		and	r3, r3, #1
 29431              	.LBB3762:
 29432              	.LBB3759:
 738:src/xeq.c     **** }
 29433              		.loc 1 738 15 view .LVU7773
 29434 0054 CEF3801E 		ubfx	lr, lr, #6, #1
 29435              	.LBE3759:
 29436              	.LBE3762:
5920:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29437              		.loc 1 5920 2 is_stmt 1 view .LVU7774
5922:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29438              		.loc 1 5922 21 is_stmt 0 view .LVU7775
 29439 0058 63F03F03 		orn	r3, r3, #63
 29440 005c 43EA4E03 		orr	r3, r3, lr, lsl #1
5920:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29441              		.loc 1 5920 32 view .LVU7776
 29442 0060 CCF3C00C 		ubfx	ip, ip, #3, #1
5921:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29443              		.loc 1 5921 2 is_stmt 1 view .LVU7777
5922:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29444              		.loc 1 5922 21 is_stmt 0 view .LVU7778
 29445 0064 43EA8C03 		orr	r3, r3, ip, lsl #2
5921:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29446              		.loc 1 5921 32 view .LVU7779
 29447 0068 C0F38010 		ubfx	r0, r0, #6, #1
5922:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29448              		.loc 1 5922 2 is_stmt 1 view .LVU7780
5923:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29449              		.loc 1 5923 9 view .LVU7781
5956:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29450              		.loc 1 5956 35 is_stmt 0 view .LVU7782
 29451 006c C4F3C01C 		ubfx	ip, r4, #7, #1
5923:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29452              		.loc 1 5923 33 view .LVU7783
 29453 0070 95F802E0 		ldrb	lr, [r5, #2]	@ zero_extendqisi2
5922:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29454              		.loc 1 5922 21 view .LVU7784
 29455 0074 43EAC003 		orr	r3, r3, r0, lsl #3
ARM GAS  /tmp/ccaPnj5t.s 			page 752


5955:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29456              		.loc 1 5955 36 view .LVU7785
 29457 0078 C4F38019 		ubfx	r9, r4, #6, #1
5937:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29458              		.loc 1 5937 17 view .LVU7786
 29459 007c 4F48     		ldr	r0, .L2139+12
5922:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29460              		.loc 1 5922 21 view .LVU7787
 29461 007e 43EA0C13 		orr	r3, r3, ip, lsl #4
5923:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29462              		.loc 1 5923 41 view .LVU7788
 29463 0082 C1F30211 		ubfx	r1, r1, #4, #3
5924:src/xeq.c     **** 	XromFlags.xIN = 1;
 29464              		.loc 1 5924 2 is_stmt 1 view .LVU7789
5925:src/xeq.c     **** 
 29465              		.loc 1 5925 2 view .LVU7790
5937:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29466              		.loc 1 5937 2 view .LVU7791
5922:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29467              		.loc 1 5922 21 is_stmt 0 view .LVU7792
 29468 0086 43EA4913 		orr	r3, r3, r9, lsl #5
5923:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29469              		.loc 1 5923 33 view .LVU7793
 29470 008a 61F3020E 		bfi	lr, r1, #0, #3
5945:src/xeq.c     **** #endif
 29471              		.loc 1 5945 17 view .LVU7794
 29472 008e 41F2020C 		movw	ip, #4098
5944:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29473              		.loc 1 5944 24 view .LVU7795
 29474 0092 4FF6FE71 		movw	r1, #65534
5937:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29475              		.loc 1 5937 17 view .LVU7796
 29476 0096 D0F80090 		ldr	r9, [r0]
5945:src/xeq.c     **** #endif
 29477              		.loc 1 5945 17 view .LVU7797
 29478 009a A6F8CCC1 		strh	ip, [r6, #460]	@ movhi
5922:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29479              		.loc 1 5922 21 view .LVU7798
 29480 009e 6B70     		strb	r3, [r5, #1]
5960:src/xeq.c     **** 		// Complex arguments are always in pairs
 29481              		.loc 1 5960 6 view .LVU7799
 29482 00a0 5FFA83FC 		uxtb	ip, r3
5923:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29483              		.loc 1 5923 33 view .LVU7800
 29484 00a4 85F802E0 		strb	lr, [r5, #2]
5944:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29485              		.loc 1 5944 24 view .LVU7801
 29486 00a8 A2F8E217 		strh	r1, [r2, #2018]	@ movhi
5940:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29487              		.loc 1 5940 9 view .LVU7802
 29488 00ac 06F5E87E 		add	lr, r6, #464
5944:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29489              		.loc 1 5944 12 view .LVU7803
 29490 00b0 A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
5960:src/xeq.c     **** 		// Complex arguments are always in pairs
 29491              		.loc 1 5960 5 view .LVU7804
 29492 00b4 DB06     		lsls	r3, r3, #27
ARM GAS  /tmp/ccaPnj5t.s 			page 753


5957:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29493              		.loc 1 5957 16 view .LVU7805
 29494 00b6 04F00701 		and	r1, r4, #7
5958:src/xeq.c     **** #endif
 29495              		.loc 1 5958 24 view .LVU7806
 29496 00ba C4F3C204 		ubfx	r4, r4, #3, #3
 29497              	.LVL2295:
5940:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29498              		.loc 1 5940 9 view .LVU7807
 29499 00be C0F800E0 		str	lr, [r0]
5937:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29500              		.loc 1 5937 17 view .LVU7808
 29501 00c2 C5F80890 		str	r9, [r5, #8]
5938:src/xeq.c     **** 
 29502              		.loc 1 5938 2 is_stmt 1 view .LVU7809
5940:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29503              		.loc 1 5940 2 view .LVU7810
5944:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29504              		.loc 1 5944 2 view .LVU7811
5945:src/xeq.c     **** #endif
 29505              		.loc 1 5945 2 view .LVU7812
5955:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29506              		.loc 1 5955 2 view .LVU7813
5956:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29507              		.loc 1 5956 2 view .LVU7814
5957:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29508              		.loc 1 5957 2 view .LVU7815
5957:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29509              		.loc 1 5957 9 is_stmt 0 view .LVU7816
 29510 00c6 2971     		strb	r1, [r5, #4]
5958:src/xeq.c     **** #endif
 29511              		.loc 1 5958 2 is_stmt 1 view .LVU7817
5958:src/xeq.c     **** #endif
 29512              		.loc 1 5958 10 is_stmt 0 view .LVU7818
 29513 00c8 6C71     		strb	r4, [r5, #5]
5960:src/xeq.c     **** 		// Complex arguments are always in pairs
 29514              		.loc 1 5960 2 is_stmt 1 view .LVU7819
5960:src/xeq.c     **** 		// Complex arguments are always in pairs
 29515              		.loc 1 5960 5 is_stmt 0 view .LVU7820
 29516 00ca 03D5     		bpl	.L2114
5962:src/xeq.c     **** 		XromOut <<= 1;
 29517              		.loc 1 5962 3 is_stmt 1 view .LVU7821
5962:src/xeq.c     **** 		XromOut <<= 1;
 29518              		.loc 1 5962 10 is_stmt 0 view .LVU7822
 29519 00cc 4900     		lsls	r1, r1, #1
5963:src/xeq.c     **** 	}
 29520              		.loc 1 5963 11 view .LVU7823
 29521 00ce 6400     		lsls	r4, r4, #1
5962:src/xeq.c     **** 		XromOut <<= 1;
 29522              		.loc 1 5962 10 view .LVU7824
 29523 00d0 2971     		strb	r1, [r5, #4]
5963:src/xeq.c     **** 	}
 29524              		.loc 1 5963 3 is_stmt 1 view .LVU7825
5963:src/xeq.c     **** 	}
 29525              		.loc 1 5963 11 is_stmt 0 view .LVU7826
 29526 00d2 6C71     		strb	r4, [r5, #5]
 29527              	.L2114:
ARM GAS  /tmp/ccaPnj5t.s 			page 754


5966:src/xeq.c     **** 
 29528              		.loc 1 5966 9 is_stmt 1 view .LVU7827
5966:src/xeq.c     **** 
 29529              		.loc 1 5966 30 is_stmt 0 view .LVU7828
 29530 00d4 92F8EB37 		ldrb	r3, [r2, #2027]	@ zero_extendqisi2
5977:src/xeq.c     **** 		// Convert integers to decimal128
 29531              		.loc 1 5977 5 view .LVU7829
 29532 00d8 1CF0010F 		tst	ip, #1
5966:src/xeq.c     **** 
 29533              		.loc 1 5966 30 view .LVU7830
 29534 00dc 6FF30613 		bfc	r3, #4, #3
 29535 00e0 82F8EB37 		strb	r3, [r2, #2027]
5977:src/xeq.c     **** 		// Convert integers to decimal128
 29536              		.loc 1 5977 2 is_stmt 1 view .LVU7831
5977:src/xeq.c     **** 		// Convert integers to decimal128
 29537              		.loc 1 5977 5 is_stmt 0 view .LVU7832
 29538 00e4 52D1     		bne	.L2137
5985:src/xeq.c     **** 		// No conversion necessary
 29539              		.loc 1 5985 7 is_stmt 1 view .LVU7833
5985:src/xeq.c     **** 		// No conversion necessary
 29540              		.loc 1 5985 10 is_stmt 0 view .LVU7834
 29541 00e6 1CF0080F 		tst	ip, #8
 29542 00ea 47D1     		bne	.L2138
6006:src/xeq.c     **** #endif
 29543              		.loc 1 6006 3 is_stmt 1 view .LVU7835
 29544 00ec B520     		movs	r0, #181
 29545 00ee FFF7FEFF 		bl	op_double
 29546              	.LVL2296:
 29547              	.L2116:
6011:src/xeq.c     **** 	UState.stack_depth = 1;
 29548              		.loc 1 6011 2 view .LVU7836
 29549              	.LBB3763:
 29550              	.LBI3763:
 761:src/xeq.c     ****     State2.state_lift = 1;
 29551              		.loc 1 761 6 view .LVU7837
 29552              	.LBB3764:
 762:src/xeq.c     **** }
 29553              		.loc 1 762 5 view .LVU7838
 762:src/xeq.c     **** }
 29554              		.loc 1 762 23 is_stmt 0 view .LVU7839
 29555 00f2 98F81730 		ldrb	r3, [r8, #23]	@ zero_extendqisi2
 29556              	.LBE3764:
 29557              	.LBE3763:
6012:src/xeq.c     **** 
 29558              		.loc 1 6012 21 view .LVU7840
 29559 00f6 3A68     		ldr	r2, [r7]
 29560              	.LBB3766:
 29561              	.LBB3765:
 762:src/xeq.c     **** }
 29562              		.loc 1 762 23 view .LVU7841
 29563 00f8 43F04003 		orr	r3, r3, #64
 29564 00fc 88F81730 		strb	r3, [r8, #23]
 29565              	.LBE3765:
 29566              	.LBE3766:
6012:src/xeq.c     **** 
 29567              		.loc 1 6012 2 is_stmt 1 view .LVU7842
6012:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 755


 29568              		.loc 1 6012 21 is_stmt 0 view .LVU7843
 29569 0100 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 29570 0104 43F00803 		orr	r3, r3, #8
 29571 0108 82F8EA37 		strb	r3, [r2, #2026]
6015:src/xeq.c     **** 		decNumber x;
 29572              		.loc 1 6015 2 is_stmt 1 view .LVU7844
 29573              	.LVL2297:
6015:src/xeq.c     **** 		decNumber x;
 29574              		.loc 1 6015 14 view .LVU7845
6015:src/xeq.c     **** 		decNumber x;
 29575              		.loc 1 6015 2 is_stmt 0 view .LVU7846
 29576 010c 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 29577 010e 93B3     		cbz	r3, .L2110
6015:src/xeq.c     **** 		decNumber x;
 29578              		.loc 1 6015 9 view .LVU7847
 29579 0110 0024     		movs	r4, #0
 29580 0112 02E0     		b	.L2123
 29581              	.LVL2298:
 29582              	.L2118:
6015:src/xeq.c     **** 		decNumber x;
 29583              		.loc 1 6015 18 view .LVU7848
 29584 0114 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
6015:src/xeq.c     **** 		decNumber x;
 29585              		.loc 1 6015 2 view .LVU7849
 29586 0116 A342     		cmp	r3, r4
 29587 0118 2DDD     		ble	.L2110
 29588              	.LVL2299:
 29589              	.L2123:
 29590              	.LBB3767:
6016:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
 29591              		.loc 1 6016 3 is_stmt 1 view .LVU7850
6017:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29592              		.loc 1 6017 3 view .LVU7851
6017:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29593              		.loc 1 6017 7 is_stmt 0 view .LVU7852
 29594 011a 04F16401 		add	r1, r4, #100
 29595 011e 01A8     		add	r0, sp, #4
 29596 0120 FFF7FEFF 		bl	getRegister
 29597              	.LVL2300:
 29598              	.LBE3767:
6015:src/xeq.c     **** 		decNumber x;
 29599              		.loc 1 6015 26 is_stmt 1 view .LVU7853
 29600              	.LBB3774:
6017:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29601              		.loc 1 6017 6 is_stmt 0 view .LVU7854
 29602 0124 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 29603 0126 13F0300F 		tst	r3, #48
 29604              	.LBE3774:
6015:src/xeq.c     **** 		decNumber x;
 29605              		.loc 1 6015 26 view .LVU7855
 29606 012a 04F10104 		add	r4, r4, #1
 29607              	.LVL2301:
6015:src/xeq.c     **** 		decNumber x;
 29608              		.loc 1 6015 14 is_stmt 1 view .LVU7856
 29609              	.LBB3775:
6017:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29610              		.loc 1 6017 6 is_stmt 0 view .LVU7857
ARM GAS  /tmp/ccaPnj5t.s 			page 756


 29611 012e F1D0     		beq	.L2118
6020:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29612              		.loc 1 6020 4 is_stmt 1 view .LVU7858
 29613              	.LVL2302:
 29614              	.LBB3768:
 29615              	.LBI3768:
3531:src/xeq.c     **** 	unsigned short mask;
 29616              		.loc 1 3531 5 view .LVU7859
 29617              	.LBB3769:
3532:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 29618              		.loc 1 3532 2 view .LVU7860
3533:src/xeq.c     **** 
 29619              		.loc 1 3533 2 view .LVU7861
3533:src/xeq.c     **** 
 29620              		.loc 1 3533 34 is_stmt 0 view .LVU7862
 29621 0130 0DF10201 		add	r1, sp, #2
 29622 0134 6B20     		movs	r0, #107
 29623 0136 FFF7FEFF 		bl	flag_word
 29624              	.LVL2303:
3535:src/xeq.c     **** }
 29625              		.loc 1 3535 2 is_stmt 1 view .LVU7863
3535:src/xeq.c     **** }
 29626              		.loc 1 3535 24 is_stmt 0 view .LVU7864
 29627 013a BDF80230 		ldrh	r3, [sp, #2]
 29628 013e 0288     		ldrh	r2, [r0]
 29629              	.LBE3769:
 29630              	.LBE3768:
6020:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29631              		.loc 1 6020 7 view .LVU7865
 29632 0140 1A42     		tst	r2, r3
 29633 0142 2DD0     		beq	.L2119
 29634              	.LVL2304:
6021:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29635              		.loc 1 6021 17 is_stmt 1 view .LVU7866
6021:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29636              		.loc 1 6021 5 is_stmt 0 view .LVU7867
 29637 0144 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
 29638 0146 53B1     		cbz	r3, .L2120
6022:src/xeq.c     **** 				// Early exit of routine
 29639              		.loc 1 6022 6 view .LVU7868
 29640 0148 1D4E     		ldr	r6, .L2139+16
6021:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29641              		.loc 1 6021 12 view .LVU7869
 29642 014a 0024     		movs	r4, #0
 29643              	.LVL2305:
 29644              	.L2121:
6022:src/xeq.c     **** 				// Early exit of routine
 29645              		.loc 1 6022 6 is_stmt 1 discriminator 3 view .LVU7870
 29646 014c 04F16400 		add	r0, r4, #100
 29647 0150 3146     		mov	r1, r6
 29648 0152 FFF7FEFF 		bl	setRegister
 29649              	.LVL2306:
6021:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29650              		.loc 1 6021 30 discriminator 3 view .LVU7871
6021:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29651              		.loc 1 6021 21 is_stmt 0 discriminator 3 view .LVU7872
 29652 0156 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
ARM GAS  /tmp/ccaPnj5t.s 			page 757


6021:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29653              		.loc 1 6021 30 discriminator 3 view .LVU7873
 29654 0158 0134     		adds	r4, r4, #1
 29655              	.LVL2307:
6021:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29656              		.loc 1 6021 17 is_stmt 1 discriminator 3 view .LVU7874
6021:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29657              		.loc 1 6021 5 is_stmt 0 discriminator 3 view .LVU7875
 29658 015a A342     		cmp	r3, r4
 29659 015c F6DC     		bgt	.L2121
 29660              	.LVL2308:
 29661              	.L2120:
6024:src/xeq.c     **** 			} 
 29662              		.loc 1 6024 5 is_stmt 1 view .LVU7876
 29663 015e 8421     		movs	r1, #132
 29664 0160 0020     		movs	r0, #0
 29665 0162 FFF7FEFF 		bl	cmdxout
 29666              	.LVL2309:
 29667              	.LBE3775:
6031:src/xeq.c     **** 
 29668              		.loc 1 6031 1 is_stmt 0 view .LVU7877
 29669 0166 0AB0     		add	sp, sp, #40
 29670              		.cfi_remember_state
 29671              		.cfi_def_cfa_offset 32
 29672              		@ sp needed
 29673 0168 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 29674              	.LVL2310:
 29675              	.L2136:
 29676              		.cfi_restore_state
5908:src/xeq.c     **** 		return;
 29677              		.loc 1 5908 3 is_stmt 1 view .LVU7878
 29678              	.LBB3776:
 29679              	.LBI3776:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29680              		.loc 1 540 5 view .LVU7879
 29681              	.LBB3777:
 541:src/xeq.c     **** 		Error = e;
 29682              		.loc 1 541 2 view .LVU7880
 541:src/xeq.c     **** 		Error = e;
 29683              		.loc 1 541 12 is_stmt 0 view .LVU7881
 29684 016c 154B     		ldr	r3, .L2139+20
 541:src/xeq.c     **** 		Error = e;
 29685              		.loc 1 541 5 view .LVU7882
 29686 016e 1A68     		ldr	r2, [r3]
 29687 0170 0AB9     		cbnz	r2, .L2110
 29688              	.LVL2311:
 29689              	.LBB3778:
 29690              	.LBI3778:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29691              		.loc 1 540 5 is_stmt 1 view .LVU7883
 29692              	.LBB3779:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 29693              		.loc 1 542 3 view .LVU7884
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 29694              		.loc 1 542 9 is_stmt 0 view .LVU7885
 29695 0172 0722     		movs	r2, #7
 29696 0174 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccaPnj5t.s 			page 758


 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 29697              		.loc 1 543 3 is_stmt 1 view .LVU7886
 29698              	.LVL2312:
 29699              	.L2110:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 29700              		.loc 1 543 3 is_stmt 0 view .LVU7887
 29701              	.LBE3779:
 29702              	.LBE3778:
 29703              	.LBE3777:
 29704              	.LBE3776:
6031:src/xeq.c     **** 
 29705              		.loc 1 6031 1 view .LVU7888
 29706 0176 0AB0     		add	sp, sp, #40
 29707              		.cfi_remember_state
 29708              		.cfi_def_cfa_offset 32
 29709              		@ sp needed
 29710 0178 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 29711              	.L2138:
 29712              		.cfi_restore_state
5987:src/xeq.c     **** 		StackBase = XromStack;
 29713              		.loc 1 5987 3 is_stmt 1 view .LVU7889
 29714 017c 124C     		ldr	r4, .L2139+24
 29715 017e 0D48     		ldr	r0, .L2139+4
 29716 0180 2168     		ldr	r1, [r4]
 29717 0182 C022     		movs	r2, #192
 29718 0184 FFF7FEFF 		bl	xcopy
 29719              	.LVL2313:
5988:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29720              		.loc 1 5988 3 view .LVU7890
5988:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29721              		.loc 1 5988 13 is_stmt 0 view .LVU7891
 29722 0188 2660     		str	r6, [r4]
 29723 018a B2E7     		b	.L2116
 29724              	.L2137:
5980:src/xeq.c     **** #endif
 29725              		.loc 1 5980 3 is_stmt 1 view .LVU7892
5980:src/xeq.c     **** #endif
 29726              		.loc 1 5980 22 is_stmt 0 view .LVU7893
 29727 018c 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 29728 0190 43F04003 		orr	r3, r3, #64
 29729 0194 82F8E937 		strb	r3, [r2, #2025]
5982:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
 29730              		.loc 1 5982 3 is_stmt 1 view .LVU7894
 29731 0198 CE20     		movs	r0, #206
 29732 019a FFF7FEFF 		bl	op_float
 29733              	.LVL2314:
 29734 019e A8E7     		b	.L2116
 29735              	.LVL2315:
 29736              	.L2119:
 29737              	.LBB3780:
6027:src/xeq.c     **** 			return;
 29738              		.loc 1 6027 5 view .LVU7895
 29739              	.LBB3770:
 29740              	.LBI3770:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29741              		.loc 1 540 5 view .LVU7896
 29742              	.LBB3771:
ARM GAS  /tmp/ccaPnj5t.s 			page 759


 541:src/xeq.c     **** 		Error = e;
 29743              		.loc 1 541 2 view .LVU7897
 541:src/xeq.c     **** 		Error = e;
 29744              		.loc 1 541 12 is_stmt 0 view .LVU7898
 29745 01a0 084B     		ldr	r3, .L2139+20
 541:src/xeq.c     **** 		Error = e;
 29746              		.loc 1 541 5 view .LVU7899
 29747 01a2 1A68     		ldr	r2, [r3]
 29748 01a4 002A     		cmp	r2, #0
 29749 01a6 E6D1     		bne	.L2110
 29750              	.LVL2316:
 29751              	.LBB3772:
 29752              	.LBI3772:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29753              		.loc 1 540 5 is_stmt 1 view .LVU7900
 29754              	.LBB3773:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 29755              		.loc 1 542 3 view .LVU7901
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 29756              		.loc 1 542 9 is_stmt 0 view .LVU7902
 29757 01a8 0122     		movs	r2, #1
 29758 01aa 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 29759              		.loc 1 543 3 is_stmt 1 view .LVU7903
 29760              	.LVL2317:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 29761              		.loc 1 543 3 is_stmt 0 view .LVU7904
 29762              	.LBE3773:
 29763              	.LBE3772:
 29764              	.LBE3771:
 29765              	.LBE3770:
6028:src/xeq.c     **** 		}
 29766              		.loc 1 6028 4 is_stmt 1 view .LVU7905
 29767 01ac E3E7     		b	.L2110
 29768              	.L2140:
 29769 01ae 00BF     		.align	2
 29770              	.L2139:
 29771 01b0 00000000 		.word	XromParams
 29772 01b4 00000000 		.word	XromLocal
 29773 01b8 00000000 		.word	main_ram
 29774 01bc 00000000 		.word	RetStk
 29775 01c0 00000000 		.word	const_NaN
 29776 01c4 00000000 		.word	Error
 29777 01c8 00000000 		.word	StackBase
 29778 01cc 00000000 		.word	StateWhileOn
 29779              	.LBE3780:
 29780              		.cfi_endproc
 29781              	.LFE264:
 29783              		.section	.rodata.xeq.str1.4,"aMS",%progbits,1
 29784              		.align	2
 29785              	.LC8:
 29786 0000 25303458 		.ascii	"%04X:%s\000"
 29786      3A257300 
 29787              		.section	.text.xeq,"ax",%progbits
 29788              		.align	1
 29789              		.p2align 2,,3
 29790              		.global	xeq
ARM GAS  /tmp/ccaPnj5t.s 			page 760


 29791              		.syntax unified
 29792              		.thumb
 29793              		.thumb_func
 29794              		.fpu fpv4-sp-d16
 29796              	xeq:
 29797              	.LVL2318:
 29798              	.LFB249:
5292:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29799              		.loc 1 5292 1 view -0
 29800              		.cfi_startproc
 29801              		@ args = 0, pretend = 0, frame = 416
 29802              		@ frame_needed = 0, uses_anonymous_args = 0
5293:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
 29803              		.loc 1 5293 2 view .LVU7907
5294:src/xeq.c     **** 	const struct _ustate old = UState;
 29804              		.loc 1 5294 2 view .LVU7908
5292:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29805              		.loc 1 5292 1 is_stmt 0 view .LVU7909
 29806 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 29807              		.cfi_def_cfa_offset 36
 29808              		.cfi_offset 4, -36
 29809              		.cfi_offset 5, -32
 29810              		.cfi_offset 6, -28
 29811              		.cfi_offset 7, -24
 29812              		.cfi_offset 8, -20
 29813              		.cfi_offset 9, -16
 29814              		.cfi_offset 10, -12
 29815              		.cfi_offset 11, -8
 29816              		.cfi_offset 14, -4
5294:src/xeq.c     **** 	const struct _ustate old = UState;
 29817              		.loc 1 5294 31 view .LVU7910
 29818 0004 BC4F     		ldr	r7, .L2476
 29819              	.LBB4074:
 29820              	.LBB4075:
 738:src/xeq.c     **** }
 29821              		.loc 1 738 15 view .LVU7911
 29822 0006 BD4C     		ldr	r4, .L2476+4
 29823              	.LBE4075:
 29824              	.LBE4074:
5294:src/xeq.c     **** 	const struct _ustate old = UState;
 29825              		.loc 1 5294 31 view .LVU7912
 29826 0008 3B68     		ldr	r3, [r7]
 29827              	.LBB4079:
 29828              	.LBB4076:
 738:src/xeq.c     **** }
 29829              		.loc 1 738 15 view .LVU7913
 29830 000a 94F817C0 		ldrb	ip, [r4, #23]	@ zero_extendqisi2
 29831              	.LBE4076:
 29832              	.LBE4079:
5295:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29833              		.loc 1 5295 23 view .LVU7914
 29834 000e D3F8E817 		ldr	r1, [r3, #2024]
5313:src/xeq.c     **** #if defined(CONSOLE)
 29835              		.loc 1 5313 2 view .LVU7915
 29836 0012 DFF82483 		ldr	r8, .L2476+64
5294:src/xeq.c     **** 	const struct _ustate old = UState;
 29837              		.loc 1 5294 23 view .LVU7916
ARM GAS  /tmp/ccaPnj5t.s 			page 761


 29838 0016 B3F8FC27 		ldrh	r2, [r3, #2044]
5297:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29839              		.loc 1 5297 23 view .LVU7917
 29840 001a B3F8E0B7 		ldrh	fp, [r3, #2016]
5298:src/xeq.c     **** #ifdef INFRARED
 29841              		.loc 1 5298 12 view .LVU7918
 29842 001e D4F81C90 		ldr	r9, [r4, #28]
5292:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29843              		.loc 1 5292 1 view .LVU7919
 29844 0022 EBB0     		sub	sp, sp, #428
 29845              		.cfi_def_cfa_offset 464
5292:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29846              		.loc 1 5292 1 view .LVU7920
 29847 0024 0546     		mov	r5, r0
5295:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29848              		.loc 1 5295 23 view .LVU7921
 29849 0026 D3F8E407 		ldr	r0, [r3, #2020]
 29850              	.LVL2319:
5294:src/xeq.c     **** 	const struct _ustate old = UState;
 29851              		.loc 1 5294 23 view .LVU7922
 29852 002a 0392     		str	r2, [sp, #12]
 29853              	.LVL2320:
5295:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29854              		.loc 1 5295 2 is_stmt 1 view .LVU7923
5295:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29855              		.loc 1 5295 23 is_stmt 0 view .LVU7924
 29856 002c 0AAE     		add	r6, sp, #40
 29857 002e 86E80300 		stm	r6, {r0, r1}
5296:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
 29858              		.loc 1 5296 2 is_stmt 1 view .LVU7925
 29859              	.LBB4080:
 29860              	.LBI4074:
 737:src/xeq.c     **** 	return State2.state_lift;
 29861              		.loc 1 737 12 view .LVU7926
 29862              	.LBB4077:
 738:src/xeq.c     **** }
 29863              		.loc 1 738 2 view .LVU7927
 738:src/xeq.c     **** }
 29864              		.loc 1 738 15 is_stmt 0 view .LVU7928
 29865 0032 CCF38013 		ubfx	r3, ip, #6, #1
 29866              	.LBE4077:
 29867              	.LBE4080:
5313:src/xeq.c     **** #if defined(CONSOLE)
 29868              		.loc 1 5313 2 view .LVU7929
 29869 0036 D8F80010 		ldr	r1, [r8]
 29870              	.LBB4081:
 29871              	.LBB4078:
 738:src/xeq.c     **** }
 29872              		.loc 1 738 15 view .LVU7930
 29873 003a 0493     		str	r3, [sp, #16]
 29874              	.LVL2321:
 738:src/xeq.c     **** }
 29875              		.loc 1 738 15 view .LVU7931
 29876              	.LBE4078:
 29877              	.LBE4081:
5297:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29878              		.loc 1 5297 2 is_stmt 1 view .LVU7932
ARM GAS  /tmp/ccaPnj5t.s 			page 762


5298:src/xeq.c     **** #ifdef INFRARED
 29879              		.loc 1 5298 2 view .LVU7933
5313:src/xeq.c     **** #if defined(CONSOLE)
 29880              		.loc 1 5313 2 view .LVU7934
 29881 003c A022     		movs	r2, #160
 29882 003e 42A8     		add	r0, sp, #264
 29883 0040 FFF7FEFF 		bl	xcopy
 29884              	.LVL2322:
5318:src/xeq.c     **** 		char buf[16];
 29885              		.loc 1 5318 2 view .LVU7935
5318:src/xeq.c     **** 		char buf[16];
 29886              		.loc 1 5318 5 is_stmt 0 view .LVU7936
 29887 0044 94F91730 		ldrsb	r3, [r4, #23]
 29888 0048 002B     		cmp	r3, #0
 29889 004a 1CDB     		blt	.L2445
 29890              	.L2142:
5336:src/xeq.c     **** 	State2.wascomplex = 0;
 29891              		.loc 1 5336 2 is_stmt 1 view .LVU7937
5337:src/xeq.c     **** 	if (isDBL(op))
 29892              		.loc 1 5337 20 is_stmt 0 view .LVU7938
 29893 004c 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
5336:src/xeq.c     **** 	State2.wascomplex = 0;
 29894              		.loc 1 5336 7 view .LVU7939
 29895 004e AC49     		ldr	r1, .L2476+8
 29896 0050 0023     		movs	r3, #0
5337:src/xeq.c     **** 	if (isDBL(op))
 29897              		.loc 1 5337 20 view .LVU7940
 29898 0052 63F38712 		bfi	r2, r3, #6, #2
 29899 0056 2275     		strb	r2, [r4, #20]
5338:src/xeq.c     **** 		multi(op);
 29900              		.loc 1 5338 6 view .LVU7941
 29901 0058 05F47042 		and	r2, r5, #61440
5338:src/xeq.c     **** 		multi(op);
 29902              		.loc 1 5338 5 view .LVU7942
 29903 005c B2F5704F 		cmp	r2, #61440
5336:src/xeq.c     **** 	State2.wascomplex = 0;
 29904              		.loc 1 5336 7 view .LVU7943
 29905 0060 0B60     		str	r3, [r1]
5337:src/xeq.c     **** 	if (isDBL(op))
 29906              		.loc 1 5337 2 is_stmt 1 view .LVU7944
5338:src/xeq.c     **** 		multi(op);
 29907              		.loc 1 5338 2 view .LVU7945
5338:src/xeq.c     **** 		multi(op);
 29908              		.loc 1 5338 5 is_stmt 0 view .LVU7946
 29909 0062 5FD0     		beq	.L2446
5340:src/xeq.c     **** 		rargs(op);
 29910              		.loc 1 5340 7 is_stmt 1 view .LVU7947
5340:src/xeq.c     **** 		rargs(op);
 29911              		.loc 1 5340 10 is_stmt 0 view .LVU7948
 29912 0064 32BB     		cbnz	r2, .L2447
5343:src/xeq.c     **** 		switch (opKIND(op)) {
 29913              		.loc 1 5343 3 is_stmt 1 view .LVU7949
5343:src/xeq.c     **** 		switch (opKIND(op)) {
 29914              		.loc 1 5343 13 is_stmt 0 view .LVU7950
 29915 0066 A74A     		ldr	r2, .L2476+12
 29916 0068 C5F30723 		ubfx	r3, r5, #8, #8
5343:src/xeq.c     **** 		switch (opKIND(op)) {
ARM GAS  /tmp/ccaPnj5t.s 			page 763


 29917              		.loc 1 5343 15 view .LVU7951
 29918 006c 1580     		strh	r5, [r2]	@ movhi
5344:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 29919              		.loc 1 5344 3 is_stmt 1 view .LVU7952
 29920 006e 062B     		cmp	r3, #6
 29921 0070 00F2A280 		bhi	.L2179
 29922 0074 DFE813F0 		tbh	[pc, r3, lsl #1]
 29923              	.L2181:
 29924 0078 CD01     		.2byte	(.L2187-.L2181)/2
 29925 007a 6A01     		.2byte	(.L2186-.L2181)/2
 29926 007c 9F01     		.2byte	(.L2185-.L2181)/2
 29927 007e 9400     		.2byte	(.L2184-.L2181)/2
 29928 0080 0002     		.2byte	(.L2183-.L2181)/2
 29929 0082 4002     		.2byte	(.L2182-.L2181)/2
 29930 0084 7502     		.2byte	(.L2180-.L2181)/2
 29931              		.p2align 1
 29932              	.L2445:
5318:src/xeq.c     **** 		char buf[16];
 29933              		.loc 1 5318 22 is_stmt 0 discriminator 1 view .LVU7953
 29934 0086 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
5318:src/xeq.c     **** 		char buf[16];
 29935              		.loc 1 5318 19 discriminator 1 view .LVU7954
 29936 0088 9B07     		lsls	r3, r3, #30
 29937 008a DFD4     		bmi	.L2142
 29938              	.LBB4082:
5319:src/xeq.c     **** 		if (Running)
 29939              		.loc 1 5319 3 is_stmt 1 view .LVU7955
5320:src/xeq.c     **** 			print_step(op);
 29940              		.loc 1 5320 3 view .LVU7956
5320:src/xeq.c     **** 			print_step(op);
 29941              		.loc 1 5320 7 is_stmt 0 view .LVU7957
 29942 008c DFF8ACA2 		ldr	r10, .L2476+68
5320:src/xeq.c     **** 			print_step(op);
 29943              		.loc 1 5320 6 view .LVU7958
 29944 0090 DAF80030 		ldr	r3, [r10]
 29945 0094 002B     		cmp	r3, #0
 29946 0096 7FD1     		bne	.L2448
5323:src/xeq.c     **** 		DispMsg = TraceBuffer;
 29947              		.loc 1 5323 4 is_stmt 1 view .LVU7959
 29948 0098 39A9     		add	r1, sp, #228
 29949 009a 2846     		mov	r0, r5
 29950 009c FFF7FEFF 		bl	prt
 29951              	.LVL2323:
 29952 00a0 9949     		ldr	r1, .L2476+16
 29953 00a2 0346     		mov	r3, r0
 29954 00a4 2A46     		mov	r2, r5
 29955 00a6 9948     		ldr	r0, .L2476+20
 29956 00a8 FFF7FEFF 		bl	sprintf
 29957              	.LVL2324:
 29958              	.L2144:
5324:src/xeq.c     **** 	}
 29959              		.loc 1 5324 3 view .LVU7960
5324:src/xeq.c     **** 	}
 29960              		.loc 1 5324 11 is_stmt 0 view .LVU7961
 29961 00ac 984B     		ldr	r3, .L2476+24
 29962 00ae 974A     		ldr	r2, .L2476+20
 29963 00b0 1A60     		str	r2, [r3]
ARM GAS  /tmp/ccaPnj5t.s 			page 764


 29964 00b2 CBE7     		b	.L2142
 29965              	.L2447:
5324:src/xeq.c     **** 	}
 29966              		.loc 1 5324 11 view .LVU7962
 29967              	.LBE4082:
5341:src/xeq.c     **** 	else {
 29968              		.loc 1 5341 3 is_stmt 1 view .LVU7963
 29969              	.LVL2325:
 29970              	.LBB4083:
 29971              	.LBI4083:
5160:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
 29972              		.loc 1 5160 13 view .LVU7964
 29973              	.LBB4084:
5161:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 29974              		.loc 1 5161 2 view .LVU7965
5162:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29975              		.loc 1 5162 2 view .LVU7966
5162:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29976              		.loc 1 5162 27 is_stmt 0 view .LVU7967
 29977 00b4 4FEA152A 		lsr	r10, r5, #8
5164:src/xeq.c     **** 
 29978              		.loc 1 5164 33 view .LVU7968
 29979 00b8 964B     		ldr	r3, .L2476+28
5166:src/xeq.c     **** 
 29980              		.loc 1 5166 12 view .LVU7969
 29981 00ba 9248     		ldr	r0, .L2476+12
 29982              	.LBB4085:
 29983              	.LBB4086:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 29984              		.loc 1 1211 5 view .LVU7970
 29985 00bc 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 29986              	.LBE4086:
 29987              	.LBE4085:
5162:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 29988              		.loc 1 5162 27 view .LVU7971
 29989 00be AAF1200A 		sub	r10, r10, #32
 29990 00c2 5FFA8AFA 		uxtb	r10, r10
 29991              	.LVL2326:
5163:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
 29992              		.loc 1 5163 2 is_stmt 1 view .LVU7972
5164:src/xeq.c     **** 
 29993              		.loc 1 5164 2 view .LVU7973
5164:src/xeq.c     **** 
 29994              		.loc 1 5164 33 is_stmt 0 view .LVU7974
 29995 00c6 03EB0A12 		add	r2, r3, r10, lsl #4
5166:src/xeq.c     **** 
 29996              		.loc 1 5166 14 view .LVU7975
 29997 00ca A0F800A0 		strh	r10, [r0]	@ movhi
5164:src/xeq.c     **** 
 29998              		.loc 1 5164 33 view .LVU7976
 29999 00ce 1279     		ldrb	r2, [r2, #4]	@ zero_extendqisi2
 30000 00d0 0592     		str	r2, [sp, #20]
 30001              	.LVL2327:
5166:src/xeq.c     **** 
 30002              		.loc 1 5166 2 is_stmt 1 view .LVU7977
5168:src/xeq.c     **** 
 30003              		.loc 1 5168 2 view .LVU7978
ARM GAS  /tmp/ccaPnj5t.s 			page 765


 30004              	.LBB4090:
 30005              	.LBI4085:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 30006              		.loc 1 1208 6 view .LVU7979
 30007              	.LBB4087:
1209:src/xeq.c     **** 
 30008              		.loc 1 1209 2 view .LVU7980
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30009              		.loc 1 1211 2 view .LVU7981
 30010              	.LBE4087:
 30011              	.LBE4090:
5164:src/xeq.c     **** 
 30012              		.loc 1 5164 33 is_stmt 0 view .LVU7982
 30013 00d2 4FEA0A12 		lsl	r2, r10, #4
 30014              	.LBB4091:
 30015              	.LBB4088:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30016              		.loc 1 1211 5 view .LVU7983
 30017 00d6 0029     		cmp	r1, #0
 30018 00d8 40F03281 		bne	.L2449
 30019              	.L2156:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30020              		.loc 1 1211 5 view .LVU7984
 30021              	.LBE4088:
 30022              	.LBE4091:
5170:src/xeq.c     **** 		illegal(op);
 30023              		.loc 1 5170 2 is_stmt 1 view .LVU7985
5170:src/xeq.c     **** 		illegal(op);
 30024              		.loc 1 5170 5 is_stmt 0 view .LVU7986
 30025 00dc BAF18E0F 		cmp	r10, #142
 30026 00e0 6AD8     		bhi	.L2179
5174:src/xeq.c     **** 		set_lift();
 30027              		.loc 1 5174 2 is_stmt 1 view .LVU7987
5174:src/xeq.c     **** 		set_lift();
 30028              		.loc 1 5174 6 is_stmt 0 view .LVU7988
 30029 00e2 9958     		ldr	r1, [r3, r2]
 30030 00e4 0891     		str	r1, [sp, #32]
 30031 00e6 9818     		adds	r0, r3, r2
5174:src/xeq.c     **** 		set_lift();
 30032              		.loc 1 5174 5 view .LVU7989
 30033 00e8 0029     		cmp	r1, #0
 30034 00ea 44D0     		beq	.L2421
5161:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 30035              		.loc 1 5161 15 view .LVU7990
 30036 00ec 05F07F01 		and	r1, r5, #127
5179:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30037              		.loc 1 5179 2 is_stmt 1 view .LVU7991
5179:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30038              		.loc 1 5179 5 is_stmt 0 view .LVU7992
 30039 00f0 2D06     		lsls	r5, r5, #24
 30040              	.LVL2328:
5179:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30041              		.loc 1 5179 5 view .LVU7993
 30042 00f2 40F1C882 		bpl	.L2160
5180:src/xeq.c     **** 			// Get the argument by reading a register
 30043              		.loc 1 5180 3 is_stmt 1 view .LVU7994
5180:src/xeq.c     **** 			// Get the argument by reading a register
ARM GAS  /tmp/ccaPnj5t.s 			page 766


 30044              		.loc 1 5180 19 is_stmt 0 view .LVU7995
 30045 00f6 4579     		ldrb	r5, [r0, #5]	@ zero_extendqisi2
5180:src/xeq.c     **** 			// Get the argument by reading a register
 30046              		.loc 1 5180 6 view .LVU7996
 30047 00f8 E807     		lsls	r0, r5, #31
 30048 00fa 40F13583 		bpl	.L2161
 30049              	.LBB4092:
5182:src/xeq.c     **** 			unsigned long long int regval;
 30050              		.loc 1 5182 4 is_stmt 1 view .LVU7997
5183:src/xeq.c     **** 
 30051              		.loc 1 5183 4 view .LVU7998
5185:src/xeq.c     **** 				// Invalid register specified for indirect access
 30052              		.loc 1 5185 4 view .LVU7999
5185:src/xeq.c     **** 				// Invalid register specified for indirect access
 30053              		.loc 1 5185 14 is_stmt 0 view .LVU8000
 30054 00fe 0A20     		movs	r0, #10
 30055 0100 0992     		str	r2, [sp, #36]
 30056 0102 0691     		str	r1, [sp, #24]
 30057 0104 FFF7FEFF 		bl	get_reg_limit
 30058              	.LVL2329:
5185:src/xeq.c     **** 				// Invalid register specified for indirect access
 30059              		.loc 1 5185 7 view .LVU8001
 30060 0108 0699     		ldr	r1, [sp, #24]
 30061 010a 099A     		ldr	r2, [sp, #36]
 30062 010c 8142     		cmp	r1, r0
 30063 010e 40F2A582 		bls	.L2162
5187:src/xeq.c     **** 				return;
 30064              		.loc 1 5187 5 is_stmt 1 view .LVU8002
 30065              	.LVL2330:
 30066              	.LBB4093:
 30067              	.LBI4093:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30068              		.loc 1 540 5 view .LVU8003
 30069              	.LBB4094:
 541:src/xeq.c     **** 		Error = e;
 30070              		.loc 1 541 2 view .LVU8004
 541:src/xeq.c     **** 		Error = e;
 30071              		.loc 1 541 12 is_stmt 0 view .LVU8005
 30072 0112 814B     		ldr	r3, .L2476+32
 30073 0114 1A68     		ldr	r2, [r3]
 541:src/xeq.c     **** 		Error = e;
 30074              		.loc 1 541 5 view .LVU8006
 30075 0116 0AB9     		cbnz	r2, .L2164
 30076              	.LVL2331:
 30077              	.LBB4095:
 30078              	.LBI4095:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30079              		.loc 1 540 5 is_stmt 1 view .LVU8007
 30080              	.LBB4096:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 30081              		.loc 1 542 3 view .LVU8008
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 30082              		.loc 1 542 9 is_stmt 0 view .LVU8009
 30083 0118 0822     		movs	r2, #8
 30084 011a 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 30085              		.loc 1 543 3 is_stmt 1 view .LVU8010
ARM GAS  /tmp/ccaPnj5t.s 			page 767


 30086              	.LVL2332:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 30087              		.loc 1 543 3 is_stmt 0 view .LVU8011
 30088              	.LBE4096:
 30089              	.LBE4095:
 30090              	.LBE4094:
 30091              	.LBE4093:
5188:src/xeq.c     **** 			}
 30092              		.loc 1 5188 5 is_stmt 1 view .LVU8012
5188:src/xeq.c     **** 			}
 30093              		.loc 1 5188 5 is_stmt 0 view .LVU8013
 30094              	.LBE4092:
 30095              	.LBE4084:
 30096              	.LBE4083:
5352:src/xeq.c     **** 		}
 30097              		.loc 1 5352 12 is_stmt 1 view .LVU8014
5362:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30098              		.loc 1 5362 2 view .LVU8015
 30099              	.L2164:
5362:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30100              		.loc 1 5362 2 is_stmt 0 view .LVU8016
 30101 011c DFF81CA2 		ldr	r10, .L2476+68
 30102 0120 1046     		mov	r0, r2
 30103 0122 52E0     		b	.L2283
 30104              	.LVL2333:
 30105              	.L2446:
5339:src/xeq.c     **** 	else if (isRARG(op))
 30106              		.loc 1 5339 3 is_stmt 1 view .LVU8017
 30107              	.LBB4123:
 30108              	.LBI4123:
5256:src/xeq.c     **** 	const int cmd = opDBL(op);
 30109              		.loc 1 5256 13 view .LVU8018
 30110              	.LBB4124:
5257:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 30111              		.loc 1 5257 2 view .LVU8019
5258:src/xeq.c     **** 
 30112              		.loc 1 5258 12 is_stmt 0 view .LVU8020
 30113 0124 774A     		ldr	r2, .L2476+12
 30114              	.LBB4125:
 30115              	.LBB4126:
 30116              	.LBB4127:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30117              		.loc 1 1211 5 view .LVU8021
 30118 0126 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30119              	.LBE4127:
 30120              	.LBE4126:
 30121              	.LBE4125:
5257:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 30122              		.loc 1 5257 12 view .LVU8022
 30123 0128 C5F3032A 		ubfx	r10, r5, #8, #4
 30124              	.LVL2334:
5258:src/xeq.c     **** 
 30125              		.loc 1 5258 2 is_stmt 1 view .LVU8023
5258:src/xeq.c     **** 
 30126              		.loc 1 5258 14 is_stmt 0 view .LVU8024
 30127 012c A2F800A0 		strh	r10, [r2]	@ movhi
5260:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 768


 30128              		.loc 1 5260 2 is_stmt 1 view .LVU8025
 30129              	.LBB4136:
 30130              	.LBI4125:
1314:src/xeq.c     **** 	process_cmdline();
 30131              		.loc 1 1314 6 view .LVU8026
 30132              	.LBE4136:
 30133              	.LBE4124:
 30134              	.LBE4123:
1315:src/xeq.c     **** 	set_lift();
 30135              		.loc 1 1315 2 view .LVU8027
 30136              	.LBB4160:
 30137              	.LBB4155:
 30138              	.LBB4137:
 30139              	.LBB4130:
 30140              	.LBI4126:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 30141              		.loc 1 1208 6 view .LVU8028
 30142              	.LBB4128:
1209:src/xeq.c     **** 
 30143              		.loc 1 1209 2 view .LVU8029
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30144              		.loc 1 1211 2 view .LVU8030
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30145              		.loc 1 1211 5 is_stmt 0 view .LVU8031
 30146 0130 002B     		cmp	r3, #0
 30147 0132 40F05082 		bne	.L2450
 30148              	.L2146:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30149              		.loc 1 1211 5 view .LVU8032
 30150              	.LBE4128:
 30151              	.LBE4130:
 30152              	.LBE4137:
 30153              	.LBE4155:
 30154              	.LBE4160:
1316:src/xeq.c     **** }
 30155              		.loc 1 1316 2 is_stmt 1 view .LVU8033
 30156              	.LBB4161:
 30157              	.LBB4156:
 30158              	.LBB4138:
 30159              	.LBB4131:
 30160              	.LBI4131:
 761:src/xeq.c     ****     State2.state_lift = 1;
 30161              		.loc 1 761 6 view .LVU8034
 30162              	.LBB4132:
 762:src/xeq.c     **** }
 30163              		.loc 1 762 5 view .LVU8035
 762:src/xeq.c     **** }
 30164              		.loc 1 762 23 is_stmt 0 view .LVU8036
 30165 0136 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30166              	.LBE4132:
 30167              	.LBE4131:
 30168              	.LBE4138:
5262:src/xeq.c     **** 		illegal(op);
 30169              		.loc 1 5262 5 view .LVU8037
 30170 0138 BAF10A0F 		cmp	r10, #10
 30171              	.LBB4139:
 30172              	.LBB4134:
ARM GAS  /tmp/ccaPnj5t.s 			page 769


 30173              	.LBB4133:
 762:src/xeq.c     **** }
 30174              		.loc 1 762 23 view .LVU8038
 30175 013c 43F04003 		orr	r3, r3, #64
 30176 0140 E375     		strb	r3, [r4, #23]
 30177              	.LBE4133:
 30178              	.LBE4134:
 30179              	.LBE4139:
5262:src/xeq.c     **** 		illegal(op);
 30180              		.loc 1 5262 2 is_stmt 1 view .LVU8039
5262:src/xeq.c     **** 		illegal(op);
 30181              		.loc 1 5262 5 is_stmt 0 view .LVU8040
 30182 0142 00F34082 		bgt	.L2451
5266:src/xeq.c     **** 		return;
 30183              		.loc 1 5266 2 is_stmt 1 view .LVU8041
5266:src/xeq.c     **** 		return;
 30184              		.loc 1 5266 6 is_stmt 0 view .LVU8042
 30185 0146 754A     		ldr	r2, .L2476+36
 30186 0148 4FEA0A13 		lsl	r3, r10, #4
 30187 014c D258     		ldr	r2, [r2, r3]
5266:src/xeq.c     **** 		return;
 30188              		.loc 1 5266 5 view .LVU8043
 30189 014e 002A     		cmp	r2, #0
 30190 0150 00F08182 		beq	.L2150
 30191              	.LBB4140:
5269:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 30192              		.loc 1 5269 3 is_stmt 1 view .LVU8044
 30193              	.LVL2335:
5270:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 30194              		.loc 1 5270 3 view .LVU8045
 30195              	.LBB4141:
 30196              	.LBI4141:
4474:src/xeq.c     **** {
 30197              		.loc 1 4474 24 view .LVU8046
 30198              	.LBB4142:
4476:src/xeq.c     **** 	if (xp < xrom)
 30199              		.loc 1 4476 2 view .LVU8047
4477:src/xeq.c     **** 		return NULL;
 30200              		.loc 1 4477 5 is_stmt 0 view .LVU8048
 30201 0154 724B     		ldr	r3, .L2476+40
4476:src/xeq.c     **** 	if (xp < xrom)
 30202              		.loc 1 4476 59 view .LVU8049
 30203 0156 22F00101 		bic	r1, r2, #1
 30204              	.LVL2336:
4477:src/xeq.c     **** 		return NULL;
 30205              		.loc 1 4477 2 is_stmt 1 view .LVU8050
4477:src/xeq.c     **** 		return NULL;
 30206              		.loc 1 4477 5 is_stmt 0 view .LVU8051
 30207 015a 9942     		cmp	r1, r3
 30208 015c 08D3     		bcc	.L2151
4481:src/xeq.c     **** 		return NULL;
 30209              		.loc 1 4481 2 is_stmt 1 view .LVU8052
4481:src/xeq.c     **** 		return NULL;
 30210              		.loc 1 4481 17 is_stmt 0 view .LVU8053
 30211 015e 7148     		ldr	r0, .L2476+44
 30212 0160 0088     		ldrh	r0, [r0]
 30213 0162 03EB4003 		add	r3, r3, r0, lsl #1
ARM GAS  /tmp/ccaPnj5t.s 			page 770


4481:src/xeq.c     **** 		return NULL;
 30214              		.loc 1 4481 5 view .LVU8054
 30215 0166 9942     		cmp	r1, r3
 30216 0168 02D2     		bcs	.L2151
 30217              	.LVL2337:
4481:src/xeq.c     **** 		return NULL;
 30218              		.loc 1 4481 5 view .LVU8055
 30219              	.LBE4142:
 30220              	.LBE4141:
5270:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 30221              		.loc 1 5270 6 view .LVU8056
 30222 016a 0029     		cmp	r1, #0
 30223 016c 40F05783 		bne	.L2452
 30224              	.L2151:
5280:src/xeq.c     **** 			set_lift();
 30225              		.loc 1 5280 4 is_stmt 1 view .LVU8057
 30226 0170 5146     		mov	r1, r10
 30227 0172 2846     		mov	r0, r5
 30228 0174 9047     		blx	r2
 30229              	.LVL2338:
5281:src/xeq.c     **** 		}
 30230              		.loc 1 5281 4 view .LVU8058
 30231              	.LBB4143:
 30232              	.LBI4143:
 761:src/xeq.c     ****     State2.state_lift = 1;
 30233              		.loc 1 761 6 view .LVU8059
 30234              	.LBB4144:
 762:src/xeq.c     **** }
 30235              		.loc 1 762 5 view .LVU8060
 30236              	.L2421:
 762:src/xeq.c     **** }
 30237              		.loc 1 762 5 is_stmt 0 view .LVU8061
 30238              	.LBE4144:
 30239              	.LBE4143:
 30240              	.LBE4140:
 30241              	.LBE4156:
 30242              	.LBE4161:
 30243              	.LBB4162:
 30244              	.LBB4163:
 30245              	.LBB4164:
3987:src/xeq.c     **** 		}
 30246              		.loc 1 3987 4 is_stmt 1 view .LVU8062
 30247              	.LBB4165:
 30248              	.LBI4165:
 761:src/xeq.c     ****     State2.state_lift = 1;
 30249              		.loc 1 761 6 view .LVU8063
 30250              	.LBB4166:
 762:src/xeq.c     **** }
 30251              		.loc 1 762 5 view .LVU8064
 762:src/xeq.c     **** }
 30252              		.loc 1 762 23 is_stmt 0 view .LVU8065
 30253 0176 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30254 0178 674B     		ldr	r3, .L2476+32
 30255 017a 42F04002 		orr	r2, r2, #64
 30256 017e E275     		strb	r2, [r4, #23]
 30257 0180 1A68     		ldr	r2, [r3]
 30258              	.L2153:
ARM GAS  /tmp/ccaPnj5t.s 			page 771


 30259              	.LBE4166:
 30260              	.LBE4165:
 30261              	.LBE4164:
 30262              	.LBE4163:
 30263              	.LBE4162:
5352:src/xeq.c     **** 		}
 30264              		.loc 1 5352 12 is_stmt 1 discriminator 1 view .LVU8066
5362:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30265              		.loc 1 5362 2 discriminator 1 view .LVU8067
5362:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30266              		.loc 1 5362 5 is_stmt 0 discriminator 1 view .LVU8068
 30267 0182 002A     		cmp	r2, #0
 30268 0184 CAD1     		bne	.L2164
 30269              	.LVL2339:
 30270              	.L2269:
5431:src/xeq.c     **** #ifdef INFRARED
 30271              		.loc 1 5431 2 is_stmt 1 view .LVU8069
 30272              	.LBB4231:
 30273              	.LBI4231:
4428:src/xeq.c     **** 	// extern int IntMaxWindow;
 30274              		.loc 1 4428 6 view .LVU8070
 30275              	.LBB4232:
4431:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30276              		.loc 1 4431 2 view .LVU8071
4431:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30277              		.loc 1 4431 16 is_stmt 0 view .LVU8072
 30278 0186 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4432:src/xeq.c     **** }
 30279              		.loc 1 4432 15 view .LVU8073
 30280 0188 0022     		movs	r2, #0
4431:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30281              		.loc 1 4431 16 view .LVU8074
 30282 018a 6FF3C503 		bfc	r3, #3, #3
 30283 018e 2375     		strb	r3, [r4, #20]
4432:src/xeq.c     **** }
 30284              		.loc 1 4432 2 is_stmt 1 view .LVU8075
4432:src/xeq.c     **** }
 30285              		.loc 1 4432 15 is_stmt 0 view .LVU8076
 30286 0190 6274     		strb	r2, [r4, #17]
 30287              	.LBE4232:
 30288              	.LBE4231:
5436:src/xeq.c     **** 
 30289              		.loc 1 5436 1 view .LVU8077
 30290 0192 6BB0     		add	sp, sp, #428
 30291              		.cfi_remember_state
 30292              		.cfi_def_cfa_offset 36
 30293              		@ sp needed
 30294 0194 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 30295              	.LVL2340:
 30296              	.L2448:
 30297              		.cfi_restore_state
 30298              	.LBB4233:
5321:src/xeq.c     **** 		else
 30299              		.loc 1 5321 4 is_stmt 1 view .LVU8078
 30300 0198 2846     		mov	r0, r5
 30301 019a FFF7FEFF 		bl	print_step
 30302              	.LVL2341:
ARM GAS  /tmp/ccaPnj5t.s 			page 772


 30303 019e 85E7     		b	.L2144
 30304              	.L2184:
5321:src/xeq.c     **** 		else
 30305              		.loc 1 5321 4 is_stmt 0 view .LVU8079
 30306              	.LBE4233:
5348:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
 30307              		.loc 1 5348 18 is_stmt 1 view .LVU8080
 30308              	.LVL2342:
 30309              	.LBB4234:
 30310              	.LBI4234:
4715:src/xeq.c     **** 
 30311              		.loc 1 4715 13 view .LVU8081
 30312              	.LBB4235:
4717:src/xeq.c     **** 	process_cmdline_set_lift();
 30313              		.loc 1 4717 2 view .LVU8082
4718:src/xeq.c     **** 
 30314              		.loc 1 4718 2 view .LVU8083
 30315              	.LBB4236:
 30316              	.LBI4236:
1314:src/xeq.c     **** 	process_cmdline();
 30317              		.loc 1 1314 6 view .LVU8084
 30318              	.LBE4236:
 30319              	.LBE4235:
 30320              	.LBE4234:
1315:src/xeq.c     **** 	set_lift();
 30321              		.loc 1 1315 2 view .LVU8085
 30322              	.LBB4284:
 30323              	.LBB4277:
 30324              	.LBB4245:
 30325              	.LBB4237:
 30326              	.LBI4237:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 30327              		.loc 1 1208 6 view .LVU8086
 30328              	.LBB4238:
1209:src/xeq.c     **** 
 30329              		.loc 1 1209 2 view .LVU8087
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30330              		.loc 1 1211 2 view .LVU8088
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30331              		.loc 1 1211 5 is_stmt 0 view .LVU8089
 30332 01a0 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30333 01a2 0BB1     		cbz	r3, .L2243
 30334 01a4 FFF7FEFF 		bl	process_cmdline.part.0
 30335              	.LVL2343:
 30336              	.L2243:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30337              		.loc 1 1211 5 view .LVU8090
 30338              	.LBE4238:
 30339              	.LBE4237:
 30340              	.LBE4245:
 30341              	.LBE4277:
 30342              	.LBE4284:
1316:src/xeq.c     **** }
 30343              		.loc 1 1316 2 is_stmt 1 view .LVU8091
 30344              	.LBB4285:
 30345              	.LBB4278:
 30346              	.LBB4246:
ARM GAS  /tmp/ccaPnj5t.s 			page 773


 30347              	.LBB4239:
 30348              	.LBI4239:
 761:src/xeq.c     ****     State2.state_lift = 1;
 30349              		.loc 1 761 6 view .LVU8092
 30350              	.LBB4240:
 762:src/xeq.c     **** }
 30351              		.loc 1 762 5 view .LVU8093
 762:src/xeq.c     **** }
 30352              		.loc 1 762 23 is_stmt 0 view .LVU8094
 30353 01a8 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30354              	.LBE4240:
 30355              	.LBE4239:
 30356              	.LBE4246:
4720:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30357              		.loc 1 4720 4 view .LVU8095
 30358 01aa EDB2     		uxtb	r5, r5
 30359              	.LVL2344:
 30360              	.LBB4247:
 30361              	.LBB4243:
 30362              	.LBB4241:
 762:src/xeq.c     **** }
 30363              		.loc 1 762 23 view .LVU8096
 30364 01ac 43F04003 		orr	r3, r3, #64
 30365              	.LBE4241:
 30366              	.LBE4243:
 30367              	.LBE4247:
4721:src/xeq.c     **** 		if (is_intmode()) {
 30368              		.loc 1 4721 5 view .LVU8097
 30369 01b0 342D     		cmp	r5, #52
 30370              	.LBB4248:
 30371              	.LBB4244:
 30372              	.LBB4242:
 762:src/xeq.c     **** }
 30373              		.loc 1 762 23 view .LVU8098
 30374 01b2 E375     		strb	r3, [r4, #23]
 30375              	.LBE4242:
 30376              	.LBE4244:
 30377              	.LBE4248:
4720:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30378              		.loc 1 4720 2 is_stmt 1 view .LVU8099
 30379              	.LVL2345:
4721:src/xeq.c     **** 		if (is_intmode()) {
 30380              		.loc 1 4721 2 view .LVU8100
4721:src/xeq.c     **** 		if (is_intmode()) {
 30381              		.loc 1 4721 5 is_stmt 0 view .LVU8101
 30382 01b4 40F2DB82 		bls	.L2453
 30383              	.LVL2346:
 30384              	.L2179:
4721:src/xeq.c     **** 		if (is_intmode()) {
 30385              		.loc 1 4721 5 view .LVU8102
 30386              	.LBE4278:
 30387              	.LBE4285:
5352:src/xeq.c     **** 		}
 30388              		.loc 1 5352 12 is_stmt 1 view .LVU8103
5352:src/xeq.c     **** 		}
 30389              		.loc 1 5352 12 view .LVU8104
 30390              	.LBB4286:
ARM GAS  /tmp/ccaPnj5t.s 			page 774


 30391              	.LBI4286:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30392              		.loc 1 540 5 view .LVU8105
 30393              	.LBB4287:
 541:src/xeq.c     **** 		Error = e;
 30394              		.loc 1 541 2 view .LVU8106
 541:src/xeq.c     **** 		Error = e;
 30395              		.loc 1 541 12 is_stmt 0 view .LVU8107
 30396 01b8 574B     		ldr	r3, .L2476+32
 30397 01ba 1868     		ldr	r0, [r3]
 541:src/xeq.c     **** 		Error = e;
 30398              		.loc 1 541 5 view .LVU8108
 30399 01bc 0028     		cmp	r0, #0
 30400 01be 40F03482 		bne	.L2430
 30401 01c2 DFF878A1 		ldr	r10, .L2476+68
 30402              	.LVL2347:
 30403              	.L2158:
 541:src/xeq.c     **** 		Error = e;
 30404              		.loc 1 541 5 view .LVU8109
 30405              	.LBE4287:
 30406              	.LBE4286:
 30407              	.LBB4288:
 30408              	.LBB4157:
 30409              	.LBB4147:
 30410              	.LBB4148:
 30411              	.LBB4149:
 30412              	.LBI4149:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30413              		.loc 1 540 5 is_stmt 1 view .LVU8110
 30414              	.LBB4150:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 30415              		.loc 1 542 3 view .LVU8111
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 30416              		.loc 1 542 9 is_stmt 0 view .LVU8112
 30417 01c6 0320     		movs	r0, #3
 30418 01c8 1860     		str	r0, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 30419              		.loc 1 543 3 is_stmt 1 view .LVU8113
 30420              	.LVL2348:
 30421              	.L2283:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 30422              		.loc 1 543 3 is_stmt 0 view .LVU8114
 30423              	.LBE4150:
 30424              	.LBE4149:
 30425              	.LBE4148:
 30426              	.LBE4147:
 30427              	.LBE4157:
 30428              	.LBE4288:
5364:src/xeq.c     **** 		// Repair stack and state
 30429              		.loc 1 5364 3 is_stmt 1 view .LVU8115
 30430 01ca 0593     		str	r3, [sp, #20]
 30431 01cc FFF7FEFF 		bl	error_message
 30432              	.LVL2349:
5367:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
 30433              		.loc 1 5367 3 view .LVU8116
 30434 01d0 42A9     		add	r1, sp, #264
 30435 01d2 A022     		movs	r2, #160
ARM GAS  /tmp/ccaPnj5t.s 			page 775


 30436 01d4 D8F80000 		ldr	r0, [r8]
 30437 01d8 FFF7FEFF 		bl	xcopy
 30438              	.LVL2350:
5368:src/xeq.c     **** 		UState = old;
 30439              		.loc 1 5368 3 view .LVU8117
5369:src/xeq.c     **** 		State2.state_lift = lift;
 30440              		.loc 1 5369 10 is_stmt 0 view .LVU8118
 30441 01dc 96E80300 		ldm	r6, {r0, r1}
5368:src/xeq.c     **** 		UState = old;
 30442              		.loc 1 5368 3 view .LVU8119
 30443 01e0 3A68     		ldr	r2, [r7]
5368:src/xeq.c     **** 		UState = old;
 30444              		.loc 1 5368 28 view .LVU8120
 30445 01e2 039B     		ldr	r3, [sp, #12]
 30446 01e4 A2F8FC37 		strh	r3, [r2, #2044]	@ movhi
5369:src/xeq.c     **** 		State2.state_lift = lift;
 30447              		.loc 1 5369 3 is_stmt 1 view .LVU8121
5369:src/xeq.c     **** 		State2.state_lift = lift;
 30448              		.loc 1 5369 10 is_stmt 0 view .LVU8122
 30449 01e8 02F2E475 		addw	r5, r2, #2020
 30450 01ec 85E80300 		stm	r5, {r0, r1}
5370:src/xeq.c     **** 		raw_set_pc(old_pc);
 30451              		.loc 1 5370 3 is_stmt 1 view .LVU8123
5370:src/xeq.c     **** 		raw_set_pc(old_pc);
 30452              		.loc 1 5370 21 is_stmt 0 view .LVU8124
 30453 01f0 049B     		ldr	r3, [sp, #16]
 30454 01f2 E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 30455 01f4 63F38611 		bfi	r1, r3, #6, #1
 30456 01f8 E175     		strb	r1, [r4, #23]
5371:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
 30457              		.loc 1 5371 3 is_stmt 1 view .LVU8125
 30458              	.LVL2351:
 30459              	.LBB4289:
 30460              	.LBI4289:
 282:src/xeq.c     **** 	State.pc = pc;
 30461              		.loc 1 282 13 view .LVU8126
 30462              	.LBB4290:
 283:src/xeq.c     **** 	update_program_bounds(0);
 30463              		.loc 1 283 2 view .LVU8127
 284:src/xeq.c     **** }
 30464              		.loc 1 284 2 is_stmt 0 view .LVU8128
 30465 01fa 0020     		movs	r0, #0
 283:src/xeq.c     **** 	update_program_bounds(0);
 30466              		.loc 1 283 11 view .LVU8129
 30467 01fc A2F8E0B7 		strh	fp, [r2, #2016]	@ movhi
 284:src/xeq.c     **** }
 30468              		.loc 1 284 2 is_stmt 1 view .LVU8130
 30469 0200 FFF7FEFF 		bl	update_program_bounds
 30470              	.LVL2352:
 284:src/xeq.c     **** }
 30471              		.loc 1 284 2 is_stmt 0 view .LVU8131
 30472              	.LBE4290:
 30473              	.LBE4289:
5372:src/xeq.c     **** 		process_cmdline_set_lift();
 30474              		.loc 1 5372 3 is_stmt 1 view .LVU8132
 30475              	.LBB4291:
 30476              	.LBB4292:
ARM GAS  /tmp/ccaPnj5t.s 			page 776


 30477              	.LBB4293:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30478              		.loc 1 1211 5 is_stmt 0 view .LVU8133
 30479 0204 19F0FF0F 		tst	r9, #255
 30480 0208 059B     		ldr	r3, [sp, #20]
 30481              	.LBE4293:
 30482              	.LBE4292:
 30483              	.LBE4291:
5372:src/xeq.c     **** 		process_cmdline_set_lift();
 30484              		.loc 1 5372 26 view .LVU8134
 30485 020a C4F81C90 		str	r9, [r4, #28]
5373:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
 30486              		.loc 1 5373 3 is_stmt 1 view .LVU8135
 30487              	.LBB4304:
 30488              	.LBI4291:
1314:src/xeq.c     **** 	process_cmdline();
 30489              		.loc 1 1314 6 view .LVU8136
 30490              	.LBE4304:
1315:src/xeq.c     **** 	set_lift();
 30491              		.loc 1 1315 2 view .LVU8137
 30492              	.LBB4305:
 30493              	.LBB4296:
 30494              	.LBI4292:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 30495              		.loc 1 1208 6 view .LVU8138
 30496              	.LBB4294:
1209:src/xeq.c     **** 
 30497              		.loc 1 1209 2 view .LVU8139
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30498              		.loc 1 1211 2 view .LVU8140
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30499              		.loc 1 1211 5 is_stmt 0 view .LVU8141
 30500 020e 40F05182 		bne	.L2454
 30501              	.LVL2353:
 30502              	.L2270:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30503              		.loc 1 1211 5 view .LVU8142
 30504              	.LBE4294:
 30505              	.LBE4296:
 30506              	.LBE4305:
1316:src/xeq.c     **** }
 30507              		.loc 1 1316 2 is_stmt 1 view .LVU8143
 30508              	.LBB4306:
 30509              	.LBB4297:
 30510              	.LBI4297:
 761:src/xeq.c     ****     State2.state_lift = 1;
 30511              		.loc 1 761 6 view .LVU8144
 30512              	.LBB4298:
 762:src/xeq.c     **** }
 30513              		.loc 1 762 5 view .LVU8145
 30514              	.LBE4298:
 30515              	.LBE4297:
 30516              	.LBE4306:
5377:src/xeq.c     **** #ifndef REALBUILD
 30517              		.loc 1 5377 15 is_stmt 0 view .LVU8146
 30518 0212 4549     		ldr	r1, .L2476+48
 30519              	.LBB4307:
ARM GAS  /tmp/ccaPnj5t.s 			page 777


 30520              	.LBB4301:
 30521              	.LBB4299:
 762:src/xeq.c     **** }
 30522              		.loc 1 762 23 view .LVU8147
 30523 0214 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30524              	.LBE4299:
 30525              	.LBE4301:
 30526              	.LBE4307:
5377:src/xeq.c     **** #ifndef REALBUILD
 30527              		.loc 1 5377 15 view .LVU8148
 30528 0216 0D68     		ldr	r5, [r1]
 30529 0218 DAF80010 		ldr	r1, [r10]
 30530              	.LBB4308:
 30531              	.LBB4302:
 30532              	.LBB4300:
 762:src/xeq.c     **** }
 30533              		.loc 1 762 23 view .LVU8149
 30534 021c 42F04002 		orr	r2, r2, #64
 30535 0220 E275     		strb	r2, [r4, #23]
 30536              	.LBE4300:
 30537              	.LBE4302:
 30538              	.LBE4308:
5376:src/xeq.c     **** 		if (Running || XromRunning) {
 30539              		.loc 1 5376 3 is_stmt 1 view .LVU8150
5376:src/xeq.c     **** 		if (Running || XromRunning) {
 30540              		.loc 1 5376 9 is_stmt 0 view .LVU8151
 30541 0222 0020     		movs	r0, #0
5377:src/xeq.c     **** #ifndef REALBUILD
 30542              		.loc 1 5377 15 view .LVU8152
 30543 0224 51EA0502 		orrs	r2, r1, r5
5376:src/xeq.c     **** 		if (Running || XromRunning) {
 30544              		.loc 1 5376 9 view .LVU8153
 30545 0228 1860     		str	r0, [r3]
5377:src/xeq.c     **** #ifndef REALBUILD
 30546              		.loc 1 5377 3 is_stmt 1 view .LVU8154
5377:src/xeq.c     **** #ifndef REALBUILD
 30547              		.loc 1 5377 15 is_stmt 0 view .LVU8155
 30548 022a ACD0     		beq	.L2269
5379:src/xeq.c     **** 				// Special handling for debug environment
 30549              		.loc 1 5379 4 is_stmt 1 view .LVU8156
5379:src/xeq.c     **** 				// Special handling for debug environment
 30550              		.loc 1 5379 7 is_stmt 0 view .LVU8157
 30551 022c 94F91720 		ldrsb	r2, [r4, #23]
 30552 0230 8242     		cmp	r2, r0
 30553 0232 C0F24482 		blt	.L2455
 30554              	.LBB4309:
5401:src/xeq.c     **** 				if (XromFlags.xIN) {
 30555              		.loc 1 5401 5 is_stmt 1 view .LVU8158
5402:src/xeq.c     **** 					// Restore state to before xIN
 30556              		.loc 1 5402 9 is_stmt 0 view .LVU8159
 30557 0236 3D4E     		ldr	r6, .L2476+52
5401:src/xeq.c     **** 				if (XromFlags.xIN) {
 30558              		.loc 1 5401 29 view .LVU8160
 30559 0238 3968     		ldr	r1, [r7]
5402:src/xeq.c     **** 					// Restore state to before xIN
 30560              		.loc 1 5402 8 view .LVU8161
 30561 023a 96F90120 		ldrsb	r2, [r6, #1]
ARM GAS  /tmp/ccaPnj5t.s 			page 778


5401:src/xeq.c     **** 				if (XromFlags.xIN) {
 30562              		.loc 1 5401 24 view .LVU8162
 30563 023e B1F8E037 		ldrh	r3, [r1, #2016]
 30564              	.LVL2354:
5402:src/xeq.c     **** 					// Restore state to before xIN
 30565              		.loc 1 5402 5 is_stmt 1 view .LVU8163
5402:src/xeq.c     **** 					// Restore state to before xIN
 30566              		.loc 1 5402 8 is_stmt 0 view .LVU8164
 30567 0242 002A     		cmp	r2, #0
 30568 0244 22DA     		bge	.L2278
5404:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30569              		.loc 1 5404 6 is_stmt 1 view .LVU8165
5404:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30570              		.loc 1 5404 20 is_stmt 0 view .LVU8166
 30571 0246 96F801C0 		ldrb	ip, [r6, #1]	@ zero_extendqisi2
5406:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30572              		.loc 1 5406 18 view .LVU8167
 30573 024a D1F8E857 		ldr	r5, [r1, #2024]
5409:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30574              		.loc 1 5409 13 view .LVU8168
 30575 024e D6F808E0 		ldr	lr, [r6, #8]
5404:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30576              		.loc 1 5404 20 view .LVU8169
 30577 0252 60F3C71C 		bfi	ip, r0, #7, #1
5406:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30578              		.loc 1 5406 18 view .LVU8170
 30579 0256 CCF3C000 		ubfx	r0, ip, #3, #1
 30580 025a 0CF00102 		and	r2, ip, #1
 30581 025e 42EA8032 		orr	r2, r2, r0, lsl #14
 30582 0262 CCF38000 		ubfx	r0, ip, #2, #1
 30583 0266 42EAC042 		orr	r2, r2, r0, lsl #19
 30584 026a 3148     		ldr	r0, .L2476+56
5404:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30585              		.loc 1 5404 20 view .LVU8171
 30586 026c 86F801C0 		strb	ip, [r6, #1]
5405:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
 30587              		.loc 1 5405 6 is_stmt 1 view .LVU8172
5406:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30588              		.loc 1 5406 6 view .LVU8173
5407:src/xeq.c     **** 					// Restore the global return stack
 30589              		.loc 1 5407 6 view .LVU8174
5406:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30590              		.loc 1 5406 18 is_stmt 0 view .LVU8175
 30591 0270 25F40425 		bic	r5, r5, #540672
 30592 0274 0240     		ands	r2, r2, r0
 30593 0276 25F00105 		bic	r5, r5, #1
5409:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30594              		.loc 1 5409 13 view .LVU8176
 30595 027a 2E48     		ldr	r0, .L2476+60
5410:src/xeq.c     **** 				}
 30596              		.loc 1 5410 16 view .LVU8177
 30597 027c B689     		ldrh	r6, [r6, #12]
5409:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30598              		.loc 1 5409 13 view .LVU8178
 30599 027e C0F800E0 		str	lr, [r0]
5406:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30600              		.loc 1 5406 18 view .LVU8179
ARM GAS  /tmp/ccaPnj5t.s 			page 779


 30601 0282 2A43     		orrs	r2, r2, r5
 30602 0284 C1F8E827 		str	r2, [r1, #2024]
5409:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30603              		.loc 1 5409 6 is_stmt 1 view .LVU8180
5410:src/xeq.c     **** 				}
 30604              		.loc 1 5410 6 view .LVU8181
5410:src/xeq.c     **** 				}
 30605              		.loc 1 5410 16 is_stmt 0 view .LVU8182
 30606 0288 A1F8E267 		strh	r6, [r1, #2018]	@ movhi
 30607              	.L2278:
5412:src/xeq.c     **** 					// Leave XROM
 30608              		.loc 1 5412 11 is_stmt 1 view .LVU8183
 30609 028c 9A0B     		lsrs	r2, r3, #14
 30610 028e 032A     		cmp	r2, #3
 30611 0290 1AD1     		bne	.L2279
5416:src/xeq.c     **** 					}
 30612              		.loc 1 5416 10 is_stmt 0 view .LVU8184
 30613 0292 284E     		ldr	r6, .L2476+60
5416:src/xeq.c     **** 					}
 30614              		.loc 1 5416 18 view .LVU8185
 30615 0294 6FF00045 		mvn	r5, #-2147483648
 30616 0298 04E0     		b	.L2282
 30617              	.L2280:
5419:src/xeq.c     **** 				}
 30618              		.loc 1 5419 7 is_stmt 1 view .LVU8186
 30619 029a 0133     		adds	r3, r3, #1
 30620              	.LVL2355:
5419:src/xeq.c     **** 				}
 30621              		.loc 1 5419 7 is_stmt 0 view .LVU8187
 30622 029c 9BB2     		uxth	r3, r3
 30623              	.LVL2356:
5412:src/xeq.c     **** 					// Leave XROM
 30624              		.loc 1 5412 11 is_stmt 1 view .LVU8188
 30625 029e 9A0B     		lsrs	r2, r3, #14
 30626 02a0 032A     		cmp	r2, #3
 30627 02a2 11D1     		bne	.L2279
 30628              	.L2282:
5414:src/xeq.c     **** 						retstk_up();
 30629              		.loc 1 5414 6 view .LVU8189
5414:src/xeq.c     **** 						retstk_up();
 30630              		.loc 1 5414 9 is_stmt 0 view .LVU8190
 30631 02a4 B1F9E227 		ldrsh	r2, [r1, #2018]
 30632 02a8 002A     		cmp	r2, #0
 30633 02aa F6D0     		beq	.L2280
5415:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
 30634              		.loc 1 5415 7 is_stmt 1 view .LVU8191
 30635 02ac FFF7FEFF 		bl	retstk_up
 30636              	.LVL2357:
5416:src/xeq.c     **** 					}
 30637              		.loc 1 5416 7 view .LVU8192
5416:src/xeq.c     **** 					}
 30638              		.loc 1 5416 19 is_stmt 0 view .LVU8193
 30639 02b0 3968     		ldr	r1, [r7]
5416:src/xeq.c     **** 					}
 30640              		.loc 1 5416 10 view .LVU8194
 30641 02b2 3368     		ldr	r3, [r6]
5416:src/xeq.c     **** 					}
ARM GAS  /tmp/ccaPnj5t.s 			page 780


 30642              		.loc 1 5416 19 view .LVU8195
 30643 02b4 B1F9E227 		ldrsh	r2, [r1, #2018]
5416:src/xeq.c     **** 					}
 30644              		.loc 1 5416 18 view .LVU8196
 30645 02b8 5019     		adds	r0, r2, r5
5416:src/xeq.c     **** 					}
 30646              		.loc 1 5416 10 view .LVU8197
 30647 02ba 33F81030 		ldrh	r3, [r3, r0, lsl #1]
 30648              	.LVL2358:
5418:src/xeq.c     **** 						++pc; // compensate for decpc below
 30649              		.loc 1 5418 6 is_stmt 1 view .LVU8198
5418:src/xeq.c     **** 						++pc; // compensate for decpc below
 30650              		.loc 1 5418 9 is_stmt 0 view .LVU8199
 30651 02be 002A     		cmp	r2, #0
 30652 02c0 EBD0     		beq	.L2280
5412:src/xeq.c     **** 					// Leave XROM
 30653              		.loc 1 5412 11 is_stmt 1 view .LVU8200
 30654 02c2 9A0B     		lsrs	r2, r3, #14
 30655 02c4 032A     		cmp	r2, #3
 30656 02c6 EDD0     		beq	.L2282
 30657              	.L2279:
5421:src/xeq.c     **** #ifndef REALBUILD
 30658              		.loc 1 5421 5 view .LVU8201
 30659              	.LVL2359:
 30660              	.LBB4310:
 30661              	.LBI4310:
 282:src/xeq.c     **** 	State.pc = pc;
 30662              		.loc 1 282 13 view .LVU8202
 30663              	.LBB4311:
 283:src/xeq.c     **** 	update_program_bounds(0);
 30664              		.loc 1 283 2 view .LVU8203
 283:src/xeq.c     **** 	update_program_bounds(0);
 30665              		.loc 1 283 11 is_stmt 0 view .LVU8204
 30666 02c8 A1F8E037 		strh	r3, [r1, #2016]	@ movhi
 284:src/xeq.c     **** }
 30667              		.loc 1 284 2 is_stmt 1 view .LVU8205
 30668 02cc 0020     		movs	r0, #0
 30669 02ce FFF7FEFF 		bl	update_program_bounds
 30670              	.LVL2360:
 30671              	.L2273:
 284:src/xeq.c     **** }
 30672              		.loc 1 284 2 is_stmt 0 view .LVU8206
 30673              	.LBE4311:
 30674              	.LBE4310:
 30675              	.LBE4309:
5425:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
 30676              		.loc 1 5425 4 is_stmt 1 view .LVU8207
 30677 02d2 FFF7FEFF 		bl	decpc
 30678              	.LVL2361:
5426:src/xeq.c     **** 
 30679              		.loc 1 5426 4 view .LVU8208
 30680 02d6 FFF7FEFF 		bl	xeq_init_contexts
 30681              	.LVL2362:
5428:src/xeq.c     **** 		}
 30682              		.loc 1 5428 4 view .LVU8209
 30683              	.LBB4312:
 30684              	.LBI4312:
ARM GAS  /tmp/ccaPnj5t.s 			page 781


5789:src/xeq.c     **** 	set_running_off_sst();
 30685              		.loc 1 5789 6 view .LVU8210
 30686              	.LBB4313:
5790:src/xeq.c     **** 	State.entryp = 0;
 30687              		.loc 1 5790 2 view .LVU8211
 30688              	.LBB4314:
 30689              	.LBI4314:
5781:src/xeq.c     **** 	Running = 0;
 30690              		.loc 1 5781 6 view .LVU8212
 30691              	.LBB4315:
5782:src/xeq.c     **** }
 30692              		.loc 1 5782 2 view .LVU8213
 30693              	.LBE4315:
 30694              	.LBE4314:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 30695              		.loc 1 5791 15 is_stmt 0 view .LVU8214
 30696 02da 3B68     		ldr	r3, [r7]
 30697              	.LBB4317:
 30698              	.LBB4316:
5782:src/xeq.c     **** }
 30699              		.loc 1 5782 10 view .LVU8215
 30700 02dc 0021     		movs	r1, #0
 30701 02de CAF80010 		str	r1, [r10]
 30702              	.LBE4316:
 30703              	.LBE4317:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 30704              		.loc 1 5791 2 is_stmt 1 view .LVU8216
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 30705              		.loc 1 5791 15 is_stmt 0 view .LVU8217
 30706 02e2 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 30707 02e6 61F30412 		bfi	r2, r1, #4, #1
 30708 02ea 83F8DD27 		strb	r2, [r3, #2013]
5792:src/xeq.c     **** }
 30709              		.loc 1 5792 2 is_stmt 1 view .LVU8218
 30710 02ee 8A20     		movs	r0, #138
 30711 02f0 FFF7FEFF 		bl	dot
 30712              	.LVL2363:
5793:src/xeq.c     **** 
 30713              		.loc 1 5793 1 is_stmt 0 view .LVU8219
 30714 02f4 47E7     		b	.L2269
 30715              	.L2477:
 30716 02f6 00BF     		.align	2
 30717              	.L2476:
 30718 02f8 00000000 		.word	main_ram
 30719 02fc 00000000 		.word	StateWhileOn
 30720 0300 00000000 		.word	Busy
 30721 0304 00000000 		.word	XeqOpCode
 30722 0308 00000000 		.word	.LC8
 30723 030c 00000000 		.word	TraceBuffer
 30724 0310 00000000 		.word	DispMsg
 30725 0314 00000000 		.word	argcmds
 30726 0318 00000000 		.word	Error
 30727 031c 00000000 		.word	multicmds
 30728 0320 00000000 		.word	xrom
 30729 0324 00000000 		.word	xrom_size
 30730 0328 00000000 		.word	XromRunning
 30731 032c 00000000 		.word	XromParams
ARM GAS  /tmp/ccaPnj5t.s 			page 782


 30732 0330 01400800 		.word	540673
 30733 0334 00000000 		.word	RetStk
 30734 0338 00000000 		.word	StackBase
 30735 033c 00000000 		.word	Running
 30736              	.LVL2364:
 30737              	.L2449:
5793:src/xeq.c     **** 
 30738              		.loc 1 5793 1 view .LVU8220
 30739 0340 0892     		str	r2, [sp, #32]
 30740              	.LBE4313:
 30741              	.LBE4312:
 30742              	.LBB4318:
 30743              	.LBB4119:
 30744              	.LBB4097:
 30745              	.LBB4089:
 30746 0342 FFF7FEFF 		bl	process_cmdline.part.0
 30747              	.LVL2365:
 30748 0346 089A     		ldr	r2, [sp, #32]
 30749 0348 A84B     		ldr	r3, .L2478
 30750 034a C7E6     		b	.L2156
 30751              	.LVL2366:
 30752              	.L2186:
5793:src/xeq.c     **** 
 30753              		.loc 1 5793 1 view .LVU8221
 30754              	.LBE4089:
 30755              	.LBE4097:
 30756              	.LBE4119:
 30757              	.LBE4318:
5346:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
 30758              		.loc 1 5346 18 is_stmt 1 view .LVU8222
 30759              	.LBB4319:
 30760              	.LBI4319:
4600:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
 30761              		.loc 1 4600 13 view .LVU8223
 30762              	.LBB4320:
4601:src/xeq.c     **** 
 30763              		.loc 1 4601 2 view .LVU8224
 30764              	.LBB4321:
 30765              	.LBB4322:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30766              		.loc 1 1211 5 is_stmt 0 view .LVU8225
 30767 034c 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30768              	.LBE4322:
 30769              	.LBE4321:
4601:src/xeq.c     **** 
 30770              		.loc 1 4601 21 view .LVU8226
 30771 034e EDB2     		uxtb	r5, r5
 30772              	.LVL2367:
4603:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
 30773              		.loc 1 4603 2 is_stmt 1 view .LVU8227
 30774              	.LBB4325:
 30775              	.LBI4321:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 30776              		.loc 1 1208 6 view .LVU8228
 30777              	.LBB4323:
1209:src/xeq.c     **** 
 30778              		.loc 1 1209 2 view .LVU8229
ARM GAS  /tmp/ccaPnj5t.s 			page 783


1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30779              		.loc 1 1211 2 view .LVU8230
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30780              		.loc 1 1211 5 is_stmt 0 view .LVU8231
 30781 0350 002B     		cmp	r3, #0
 30782 0352 40F08D82 		bne	.L2456
 30783              	.L2223:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30784              		.loc 1 1211 5 view .LVU8232
 30785              	.LBE4323:
 30786              	.LBE4325:
4604:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 30787              		.loc 1 4604 2 is_stmt 1 view .LVU8233
4604:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 30788              		.loc 1 4604 5 is_stmt 0 view .LVU8234
 30789 0356 CC2D     		cmp	r5, #204
 30790 0358 00F23A82 		bhi	.L2224
4605:src/xeq.c     **** 			bad_mode_error();
 30791              		.loc 1 4605 3 is_stmt 1 view .LVU8235
4605:src/xeq.c     **** 			bad_mode_error();
 30792              		.loc 1 4605 7 is_stmt 0 view .LVU8236
 30793 035c 3B68     		ldr	r3, [r7]
 30794 035e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4605:src/xeq.c     **** 			bad_mode_error();
 30795              		.loc 1 4605 6 view .LVU8237
 30796 0362 13F0010F 		tst	r3, #1
4605:src/xeq.c     **** 			bad_mode_error();
 30797              		.loc 1 4605 23 view .LVU8238
 30798 0366 A24B     		ldr	r3, .L2478+4
4605:src/xeq.c     **** 			bad_mode_error();
 30799              		.loc 1 4605 6 view .LVU8239
 30800 0368 40F04E81 		bne	.L2409
 30801 036c 2A01     		lsls	r2, r5, #4
 30802              	.L2225:
4607:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 30803              		.loc 1 4607 8 is_stmt 1 view .LVU8240
4607:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 30804              		.loc 1 4607 14 is_stmt 0 view .LVU8241
 30805 036e 53F802A0 		ldr	r10, [r3, r2]
 30806 0372 1344     		add	r3, r3, r2
 30807 0374 0593     		str	r3, [sp, #20]
4607:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 30808              		.loc 1 4607 11 view .LVU8242
 30809 0376 BAF1000F 		cmp	r10, #0
 30810 037a 14D0     		beq	.L2227
 30811              	.LBB4326:
4608:src/xeq.c     **** 			if (dispatch_xrom(fp))
 30812              		.loc 1 4608 4 is_stmt 1 view .LVU8243
 30813              	.LVL2368:
4609:src/xeq.c     **** 				return;
 30814              		.loc 1 4609 4 view .LVU8244
4609:src/xeq.c     **** 				return;
 30815              		.loc 1 4609 8 is_stmt 0 view .LVU8245
 30816 037c 5046     		mov	r0, r10
 30817 037e FFF7FEFF 		bl	dispatch_xrom
 30818              	.LVL2369:
4609:src/xeq.c     **** 				return;
ARM GAS  /tmp/ccaPnj5t.s 			page 784


 30819              		.loc 1 4609 7 view .LVU8246
 30820 0382 059B     		ldr	r3, [sp, #20]
 30821 0384 0028     		cmp	r0, #0
 30822 0386 40F06681 		bne	.L2150
4612:src/xeq.c     **** 				case 2:	lift_if_enabled();
 30823              		.loc 1 4612 5 is_stmt 1 view .LVU8247
 30824 038a 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 30825 038c 03F00303 		and	r3, r3, #3
 30826 0390 012B     		cmp	r3, #1
 30827 0392 00F01084 		beq	.L2229
 30828 0396 022B     		cmp	r3, #2
 30829 0398 03D1     		bne	.L2230
4613:src/xeq.c     **** 				case 1:	lift_if_enabled();
 30830              		.loc 1 4613 13 view .LVU8248
 30831              	.LBB4327:
 30832              	.LBI4327:
 741:src/xeq.c     **** 	if (get_lift())
 30833              		.loc 1 741 6 view .LVU8249
 30834              	.LBB4328:
 742:src/xeq.c     **** 		lift();
 30835              		.loc 1 742 2 view .LVU8250
 30836              	.LBB4329:
 30837              	.LBI4329:
 737:src/xeq.c     **** 	return State2.state_lift;
 30838              		.loc 1 737 12 view .LVU8251
 30839              	.LBB4330:
 738:src/xeq.c     **** }
 30840              		.loc 1 738 2 view .LVU8252
 738:src/xeq.c     **** }
 30841              		.loc 1 738 15 is_stmt 0 view .LVU8253
 30842 039a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30843              	.LBE4330:
 30844              	.LBE4329:
 742:src/xeq.c     **** 		lift();
 30845              		.loc 1 742 5 view .LVU8254
 30846 039c 5B06     		lsls	r3, r3, #25
 30847 039e 00F10884 		bmi	.L2457
 30848              	.L2230:
 30849              	.LBE4328:
 30850              	.LBE4327:
4616:src/xeq.c     **** 					break;
 30851              		.loc 1 4616 6 is_stmt 1 view .LVU8255
 30852 03a2 2846     		mov	r0, r5
 30853 03a4 D047     		blx	r10
 30854              	.LVL2370:
4617:src/xeq.c     **** 				}
 30855              		.loc 1 4617 6 view .LVU8256
 30856              	.L2227:
4617:src/xeq.c     **** 				}
 30857              		.loc 1 4617 6 is_stmt 0 view .LVU8257
 30858              	.LBE4326:
4622:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 30859              		.loc 1 4622 3 is_stmt 1 view .LVU8258
4627:src/xeq.c     **** #endif
 30860              		.loc 1 4627 2 view .LVU8259
4627:src/xeq.c     **** #endif
 30861              		.loc 1 4627 5 is_stmt 0 view .LVU8260
ARM GAS  /tmp/ccaPnj5t.s 			page 785


 30862 03a6 3F2D     		cmp	r5, #63
 30863 03a8 924B     		ldr	r3, .L2478+8
 30864 03aa 00F05581 		beq	.L2422
 30865              	.L2234:
4627:src/xeq.c     **** #endif
 30866              		.loc 1 4627 24 view .LVU8261
 30867 03ae 0B2D     		cmp	r5, #11
 30868 03b0 00F05281 		beq	.L2422
 30869 03b4 11E2     		b	.L2233
 30870              	.LVL2371:
 30871              	.L2185:
4627:src/xeq.c     **** #endif
 30872              		.loc 1 4627 24 view .LVU8262
 30873              	.LBE4320:
 30874              	.LBE4319:
5347:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
 30875              		.loc 1 5347 18 is_stmt 1 view .LVU8263
 30876              	.LBB4356:
 30877              	.LBI4356:
4641:src/xeq.c     **** {
 30878              		.loc 1 4641 13 view .LVU8264
 30879              	.LBB4357:
4643:src/xeq.c     **** 	process_cmdline_set_lift();
 30880              		.loc 1 4643 2 view .LVU8265
4644:src/xeq.c     **** 
 30881              		.loc 1 4644 2 view .LVU8266
 30882              	.LBB4358:
 30883              	.LBI4358:
1314:src/xeq.c     **** 	process_cmdline();
 30884              		.loc 1 1314 6 view .LVU8267
 30885              	.LBE4358:
 30886              	.LBE4357:
 30887              	.LBE4356:
1315:src/xeq.c     **** 	set_lift();
 30888              		.loc 1 1315 2 view .LVU8268
 30889              	.LBB4397:
 30890              	.LBB4392:
 30891              	.LBB4369:
 30892              	.LBB4359:
 30893              	.LBI4359:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 30894              		.loc 1 1208 6 view .LVU8269
 30895              	.LBB4360:
1209:src/xeq.c     **** 
 30896              		.loc 1 1209 2 view .LVU8270
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30897              		.loc 1 1211 2 view .LVU8271
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30898              		.loc 1 1211 5 is_stmt 0 view .LVU8272
 30899 03b6 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30900 03b8 002B     		cmp	r3, #0
 30901 03ba 40F05682 		bne	.L2458
 30902              	.L2235:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30903              		.loc 1 1211 5 view .LVU8273
 30904              	.LBE4360:
 30905              	.LBE4359:
ARM GAS  /tmp/ccaPnj5t.s 			page 786


 30906              	.LBE4369:
 30907              	.LBE4392:
 30908              	.LBE4397:
1316:src/xeq.c     **** }
 30909              		.loc 1 1316 2 is_stmt 1 view .LVU8274
 30910              	.LBB4398:
 30911              	.LBB4393:
 30912              	.LBB4370:
 30913              	.LBB4362:
 30914              	.LBI4362:
 761:src/xeq.c     ****     State2.state_lift = 1;
 30915              		.loc 1 761 6 view .LVU8275
 30916              	.LBB4363:
 762:src/xeq.c     **** }
 30917              		.loc 1 762 5 view .LVU8276
 762:src/xeq.c     **** }
 30918              		.loc 1 762 23 is_stmt 0 view .LVU8277
 30919 03be E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30920              	.LBE4363:
 30921              	.LBE4362:
 30922              	.LBE4370:
4646:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 30923              		.loc 1 4646 4 view .LVU8278
 30924 03c0 EDB2     		uxtb	r5, r5
 30925              	.LVL2372:
 30926              	.LBB4371:
 30927              	.LBB4366:
 30928              	.LBB4364:
 762:src/xeq.c     **** }
 30929              		.loc 1 762 23 view .LVU8279
 30930 03c2 43F04003 		orr	r3, r3, #64
 30931              	.LBE4364:
 30932              	.LBE4366:
 30933              	.LBE4371:
4647:src/xeq.c     **** 		if (is_intmode()) {
 30934              		.loc 1 4647 5 view .LVU8280
 30935 03c6 9B2D     		cmp	r5, #155
 30936              	.LBB4372:
 30937              	.LBB4367:
 30938              	.LBB4365:
 762:src/xeq.c     **** }
 30939              		.loc 1 762 23 view .LVU8281
 30940 03c8 E375     		strb	r3, [r4, #23]
 30941              	.LBE4365:
 30942              	.LBE4367:
 30943              	.LBE4372:
4646:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 30944              		.loc 1 4646 2 is_stmt 1 view .LVU8282
 30945              	.LVL2373:
4647:src/xeq.c     **** 		if (is_intmode()) {
 30946              		.loc 1 4647 2 view .LVU8283
4647:src/xeq.c     **** 		if (is_intmode()) {
 30947              		.loc 1 4647 5 is_stmt 0 view .LVU8284
 30948 03ca 3FF6F5AE 		bhi	.L2179
4648:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30949              		.loc 1 4648 3 is_stmt 1 view .LVU8285
4648:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
ARM GAS  /tmp/ccaPnj5t.s 			page 787


 30950              		.loc 1 4648 7 is_stmt 0 view .LVU8286
 30951 03ce 3B68     		ldr	r3, [r7]
 30952 03d0 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4648:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 30953              		.loc 1 4648 6 view .LVU8287
 30954 03d4 D907     		lsls	r1, r3, #31
 30955 03d6 40F1BB83 		bpl	.L2237
4649:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30956              		.loc 1 4649 4 is_stmt 1 view .LVU8288
4649:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30957              		.loc 1 4649 10 is_stmt 0 view .LVU8289
 30958 03da 874B     		ldr	r3, .L2478+12
 30959 03dc 05EB4505 		add	r5, r5, r5, lsl #1
 30960              	.LVL2374:
4649:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30961              		.loc 1 4649 10 view .LVU8290
 30962 03e0 03EBC505 		add	r5, r3, r5, lsl #3
 30963 03e4 AD68     		ldr	r5, [r5, #8]
4649:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 30964              		.loc 1 4649 7 view .LVU8291
 30965 03e6 002D     		cmp	r5, #0
 30966 03e8 00F04383 		beq	.L2256
 30967              	.LBB4373:
4650:src/xeq.c     **** 				if (dispatch_xrom(fp))
 30968              		.loc 1 4650 5 is_stmt 1 view .LVU8292
 30969              	.LVL2375:
4651:src/xeq.c     **** 					return;
 30970              		.loc 1 4651 5 view .LVU8293
4651:src/xeq.c     **** 					return;
 30971              		.loc 1 4651 9 is_stmt 0 view .LVU8294
 30972 03ec 2846     		mov	r0, r5
 30973 03ee FFF7FEFF 		bl	dispatch_xrom
 30974              	.LVL2376:
4651:src/xeq.c     **** 					return;
 30975              		.loc 1 4651 8 view .LVU8295
 30976 03f2 0028     		cmp	r0, #0
 30977 03f4 40F02F81 		bne	.L2150
 30978              	.LBB4374:
4654:src/xeq.c     **** 					x = fp(x);
 30979              		.loc 1 4654 6 is_stmt 1 view .LVU8296
 30980              	.LBB4375:
 30981              	.LBI4375:
1424:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 30982              		.loc 1 1424 15 view .LVU8297
 30983              	.LBB4376:
1425:src/xeq.c     **** }
 30984              		.loc 1 1425 2 view .LVU8298
1425:src/xeq.c     **** }
 30985              		.loc 1 1425 9 is_stmt 0 view .LVU8299
 30986 03f8 6420     		movs	r0, #100
 30987 03fa FFF7FEFF 		bl	get_reg_n_int
 30988              	.LVL2377:
1425:src/xeq.c     **** }
 30989              		.loc 1 1425 9 view .LVU8300
 30990              	.LBE4376:
 30991              	.LBE4375:
4655:src/xeq.c     **** 					setlastX();
ARM GAS  /tmp/ccaPnj5t.s 			page 788


 30992              		.loc 1 4655 6 is_stmt 1 view .LVU8301
4655:src/xeq.c     **** 					setlastX();
 30993              		.loc 1 4655 10 is_stmt 0 view .LVU8302
 30994 03fe A847     		blx	r5
 30995              	.LVL2378:
4655:src/xeq.c     **** 					setlastX();
 30996              		.loc 1 4655 10 view .LVU8303
 30997 0400 7C4B     		ldr	r3, .L2478+8
 30998 0402 0593     		str	r3, [sp, #20]
 30999 0404 0546     		mov	r5, r0
 31000              	.LVL2379:
4655:src/xeq.c     **** 					setlastX();
 31001              		.loc 1 4655 10 view .LVU8304
 31002 0406 8A46     		mov	r10, r1
 31003              	.LVL2380:
4656:src/xeq.c     **** 					setX_int(x);
 31004              		.loc 1 4656 6 is_stmt 1 view .LVU8305
 31005              	.LBB4377:
 31006              	.LBI4377:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31007              		.loc 1 786 6 view .LVU8306
 31008              	.LBB4378:
 787:src/xeq.c     **** }
 31009              		.loc 1 787 2 view .LVU8307
 31010 0408 6C20     		movs	r0, #108
 31011              	.LVL2381:
 787:src/xeq.c     **** }
 31012              		.loc 1 787 2 is_stmt 0 view .LVU8308
 31013 040a 6421     		movs	r1, #100
 31014              	.LVL2382:
 787:src/xeq.c     **** }
 31015              		.loc 1 787 2 view .LVU8309
 31016 040c FFF7FEFF 		bl	copyreg_n
 31017              	.LVL2383:
 31018              	.LBE4378:
 31019              	.LBE4377:
4657:src/xeq.c     **** 				}
 31020              		.loc 1 4657 6 is_stmt 1 view .LVU8310
 31021 0410 D7E1     		b	.L2426
 31022              	.LVL2384:
 31023              	.L2187:
4657:src/xeq.c     **** 				}
 31024              		.loc 1 4657 6 is_stmt 0 view .LVU8311
 31025              	.LBE4374:
 31026              	.LBE4373:
 31027              	.LBE4393:
 31028              	.LBE4398:
5345:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
 31029              		.loc 1 5345 19 is_stmt 1 view .LVU8312
 31030              	.LBB4399:
 31031              	.LBI4162:
3894:src/xeq.c     **** 	int opm = argKIND(op);
 31032              		.loc 1 3894 13 view .LVU8313
 31033              	.LBB4225:
3895:src/xeq.c     **** 
 31034              		.loc 1 3895 2 view .LVU8314
3895:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 789


 31035              		.loc 1 3895 6 is_stmt 0 view .LVU8315
 31036 0412 5FFA85FA 		uxtb	r10, r5
 31037              	.LVL2385:
3897:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31038              		.loc 1 3897 2 is_stmt 1 view .LVU8316
 31039 0416 BAF12A0F 		cmp	r10, #42
 31040 041a 3FF6CDAE 		bhi	.L2179
 31041 041e DFE81AF0 		tbh	[pc, r10, lsl #1]
 31042              	.L2190:
 31043 0422 A302     		.2byte	(.L2201-.L2190)/2
 31044 0424 1A03     		.2byte	(.L2200-.L2190)/2
 31045 0426 E202     		.2byte	(.L2199-.L2190)/2
 31046 0428 0703     		.2byte	(.L2198-.L2190)/2
 31047 042a B102     		.2byte	(.L2197-.L2190)/2
 31048 042c 1B02     		.2byte	(.L2196-.L2190)/2
 31049 042e 1B02     		.2byte	(.L2196-.L2190)/2
 31050 0430 1B02     		.2byte	(.L2196-.L2190)/2
 31051 0432 1B02     		.2byte	(.L2196-.L2190)/2
 31052 0434 1B02     		.2byte	(.L2196-.L2190)/2
 31053 0436 1B02     		.2byte	(.L2196-.L2190)/2
 31054 0438 1B02     		.2byte	(.L2196-.L2190)/2
 31055 043a 1B02     		.2byte	(.L2196-.L2190)/2
 31056 043c 1B02     		.2byte	(.L2196-.L2190)/2
 31057 043e 1B02     		.2byte	(.L2196-.L2190)/2
 31058 0440 1B02     		.2byte	(.L2196-.L2190)/2
 31059 0442 1B02     		.2byte	(.L2196-.L2190)/2
 31060 0444 1B02     		.2byte	(.L2196-.L2190)/2
 31061 0446 1B02     		.2byte	(.L2196-.L2190)/2
 31062 0448 1B02     		.2byte	(.L2196-.L2190)/2
 31063 044a 1B02     		.2byte	(.L2196-.L2190)/2
 31064 044c 8302     		.2byte	(.L2195-.L2190)/2
 31065 044e 8302     		.2byte	(.L2195-.L2190)/2
 31066 0450 3F02     		.2byte	(.L2194-.L2190)/2
 31067 0452 3F02     		.2byte	(.L2194-.L2190)/2
 31068 0454 3F02     		.2byte	(.L2194-.L2190)/2
 31069 0456 3F02     		.2byte	(.L2194-.L2190)/2
 31070 0458 3F02     		.2byte	(.L2194-.L2190)/2
 31071 045a 3F02     		.2byte	(.L2194-.L2190)/2
 31072 045c 3F02     		.2byte	(.L2194-.L2190)/2
 31073 045e 3302     		.2byte	(.L2193-.L2190)/2
 31074 0460 3302     		.2byte	(.L2193-.L2190)/2
 31075 0462 3302     		.2byte	(.L2193-.L2190)/2
 31076 0464 3302     		.2byte	(.L2193-.L2190)/2
 31077 0466 3302     		.2byte	(.L2193-.L2190)/2
 31078 0468 3302     		.2byte	(.L2193-.L2190)/2
 31079 046a 3302     		.2byte	(.L2193-.L2190)/2
 31080 046c 7702     		.2byte	(.L2192-.L2190)/2
 31081 046e 7702     		.2byte	(.L2192-.L2190)/2
 31082 0470 6B02     		.2byte	(.L2191-.L2190)/2
 31083 0472 6B02     		.2byte	(.L2191-.L2190)/2
 31084 0474 5F02     		.2byte	(.L2189-.L2190)/2
 31085 0476 5F02     		.2byte	(.L2189-.L2190)/2
 31086              	.LVL2386:
 31087              		.p2align 1
 31088              	.L2183:
3897:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31089              		.loc 1 3897 2 is_stmt 0 view .LVU8317
ARM GAS  /tmp/ccaPnj5t.s 			page 790


 31090              	.LBE4225:
 31091              	.LBE4399:
5349:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
 31092              		.loc 1 5349 18 is_stmt 1 view .LVU8318
 31093              	.LBB4400:
 31094              	.LBI4400:
4790:src/xeq.c     **** 	unsigned int f;
 31095              		.loc 1 4790 13 view .LVU8319
 31096              	.LBB4401:
4791:src/xeq.c     **** 	process_cmdline_set_lift();
 31097              		.loc 1 4791 2 view .LVU8320
4792:src/xeq.c     **** 
 31098              		.loc 1 4792 2 view .LVU8321
 31099              	.LBB4402:
 31100              	.LBI4402:
1314:src/xeq.c     **** 	process_cmdline();
 31101              		.loc 1 1314 6 view .LVU8322
 31102              	.LBE4402:
 31103              	.LBE4401:
 31104              	.LBE4400:
1315:src/xeq.c     **** 	set_lift();
 31105              		.loc 1 1315 2 view .LVU8323
 31106              	.LBB4450:
 31107              	.LBB4442:
 31108              	.LBB4413:
 31109              	.LBB4403:
 31110              	.LBI4403:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 31111              		.loc 1 1208 6 view .LVU8324
 31112              	.LBB4404:
1209:src/xeq.c     **** 
 31113              		.loc 1 1209 2 view .LVU8325
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31114              		.loc 1 1211 2 view .LVU8326
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31115              		.loc 1 1211 5 is_stmt 0 view .LVU8327
 31116 0478 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31117 047a 002B     		cmp	r3, #0
 31118 047c 40F00182 		bne	.L2459
 31119              	.L2251:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31120              		.loc 1 1211 5 view .LVU8328
 31121              	.LBE4404:
 31122              	.LBE4403:
 31123              	.LBE4413:
 31124              	.LBE4442:
 31125              	.LBE4450:
1316:src/xeq.c     **** }
 31126              		.loc 1 1316 2 is_stmt 1 view .LVU8329
 31127              	.LBB4451:
 31128              	.LBB4443:
 31129              	.LBB4414:
 31130              	.LBB4406:
 31131              	.LBI4406:
 761:src/xeq.c     ****     State2.state_lift = 1;
 31132              		.loc 1 761 6 view .LVU8330
 31133              	.LBB4407:
ARM GAS  /tmp/ccaPnj5t.s 			page 791


 762:src/xeq.c     **** }
 31134              		.loc 1 762 5 view .LVU8331
 762:src/xeq.c     **** }
 31135              		.loc 1 762 23 is_stmt 0 view .LVU8332
 31136 0480 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31137              	.LBE4407:
 31138              	.LBE4406:
 31139              	.LBE4414:
4794:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31140              		.loc 1 4794 4 view .LVU8333
 31141 0482 EDB2     		uxtb	r5, r5
 31142              	.LVL2387:
 31143              	.LBB4415:
 31144              	.LBB4410:
 31145              	.LBB4408:
 762:src/xeq.c     **** }
 31146              		.loc 1 762 23 view .LVU8334
 31147 0484 43F04003 		orr	r3, r3, #64
 31148              	.LBE4408:
 31149              	.LBE4410:
 31150              	.LBE4415:
4795:src/xeq.c     **** 		if (is_intmode()) {
 31151              		.loc 1 4795 5 view .LVU8335
 31152 0488 0B2D     		cmp	r5, #11
 31153              	.LBB4416:
 31154              	.LBB4411:
 31155              	.LBB4409:
 762:src/xeq.c     **** }
 31156              		.loc 1 762 23 view .LVU8336
 31157 048a E375     		strb	r3, [r4, #23]
 31158              	.LBE4409:
 31159              	.LBE4411:
 31160              	.LBE4416:
4794:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31161              		.loc 1 4794 2 is_stmt 1 view .LVU8337
 31162              	.LVL2388:
4795:src/xeq.c     **** 		if (is_intmode()) {
 31163              		.loc 1 4795 2 view .LVU8338
4795:src/xeq.c     **** 		if (is_intmode()) {
 31164              		.loc 1 4795 5 is_stmt 0 view .LVU8339
 31165 048c 3FF694AE 		bhi	.L2179
4796:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31166              		.loc 1 4796 3 is_stmt 1 view .LVU8340
4796:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31167              		.loc 1 4796 7 is_stmt 0 view .LVU8341
 31168 0490 3B68     		ldr	r3, [r7]
 31169 0492 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4796:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31170              		.loc 1 4796 6 view .LVU8342
 31171 0496 DB07     		lsls	r3, r3, #31
 31172 0498 40F13583 		bpl	.L2253
4797:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31173              		.loc 1 4797 4 is_stmt 1 view .LVU8343
4797:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31174              		.loc 1 4797 10 is_stmt 0 view .LVU8344
 31175 049c 574B     		ldr	r3, .L2478+16
 31176 049e 05EB8505 		add	r5, r5, r5, lsl #2
ARM GAS  /tmp/ccaPnj5t.s 			page 792


 31177              	.LVL2389:
4797:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31178              		.loc 1 4797 10 view .LVU8345
 31179 04a2 03EB8505 		add	r5, r3, r5, lsl #2
 31180 04a6 6D68     		ldr	r5, [r5, #4]
4797:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31181              		.loc 1 4797 7 view .LVU8346
 31182 04a8 002D     		cmp	r5, #0
 31183 04aa 00F0E282 		beq	.L2256
 31184              	.LBB4417:
4798:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31185              		.loc 1 4798 5 is_stmt 1 view .LVU8347
 31186              	.LVL2390:
4799:src/xeq.c     **** 					return;
 31187              		.loc 1 4799 5 view .LVU8348
4799:src/xeq.c     **** 					return;
 31188              		.loc 1 4799 9 is_stmt 0 view .LVU8349
 31189 04ae 2846     		mov	r0, r5
 31190 04b0 FFF7FEFF 		bl	dispatch_xrom
 31191              	.LVL2391:
4799:src/xeq.c     **** 					return;
 31192              		.loc 1 4799 8 view .LVU8350
 31193 04b4 0028     		cmp	r0, #0
 31194 04b6 40F0CE80 		bne	.L2150
 31195              	.LBB4418:
4802:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 31196              		.loc 1 4802 6 is_stmt 1 view .LVU8351
 31197              	.LBB4419:
 31198              	.LBI4419:
1424:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31199              		.loc 1 1424 15 view .LVU8352
 31200              	.LBB4420:
1425:src/xeq.c     **** }
 31201              		.loc 1 1425 2 view .LVU8353
1425:src/xeq.c     **** }
 31202              		.loc 1 1425 9 is_stmt 0 view .LVU8354
 31203 04ba 6420     		movs	r0, #100
 31204 04bc FFF7FEFF 		bl	get_reg_n_int
 31205              	.LVL2392:
 31206 04c0 8246     		mov	r10, r0
 31207              	.LVL2393:
1425:src/xeq.c     **** }
 31208              		.loc 1 1425 9 view .LVU8355
 31209              	.LBE4420:
 31210              	.LBE4419:
4803:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31211              		.loc 1 4803 6 is_stmt 1 view .LVU8356
4803:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31212              		.loc 1 4803 24 is_stmt 0 view .LVU8357
 31213 04c2 6520     		movs	r0, #101
 31214              	.LVL2394:
 31215              	.LBB4422:
 31216              	.LBB4421:
1425:src/xeq.c     **** }
 31217              		.loc 1 1425 9 view .LVU8358
 31218 04c4 0591     		str	r1, [sp, #20]
 31219              	.LVL2395:
ARM GAS  /tmp/ccaPnj5t.s 			page 793


1425:src/xeq.c     **** }
 31220              		.loc 1 1425 9 view .LVU8359
 31221              	.LBE4421:
 31222              	.LBE4422:
4803:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31223              		.loc 1 4803 24 view .LVU8360
 31224 04c6 FFF7FEFF 		bl	get_reg_n_int
 31225              	.LVL2396:
 31226 04ca 0690     		str	r0, [sp, #24]
4804:src/xeq.c     **** 					x = fp(z, y, x);
 31227              		.loc 1 4804 24 view .LVU8361
 31228 04cc 6620     		movs	r0, #102
4803:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31229              		.loc 1 4803 24 view .LVU8362
 31230 04ce 0891     		str	r1, [sp, #32]
 31231              	.LVL2397:
4804:src/xeq.c     **** 					x = fp(z, y, x);
 31232              		.loc 1 4804 6 is_stmt 1 view .LVU8363
4804:src/xeq.c     **** 					x = fp(z, y, x);
 31233              		.loc 1 4804 24 is_stmt 0 view .LVU8364
 31234 04d0 FFF7FEFF 		bl	get_reg_n_int
 31235              	.LVL2398:
4805:src/xeq.c     **** 					setlastX();
 31236              		.loc 1 4805 6 is_stmt 1 view .LVU8365
4805:src/xeq.c     **** 					setlastX();
 31237              		.loc 1 4805 10 is_stmt 0 view .LVU8366
 31238 04d4 059B     		ldr	r3, [sp, #20]
 31239 04d6 069A     		ldr	r2, [sp, #24]
 31240 04d8 CDF800A0 		str	r10, [sp]
 31241 04dc 0193     		str	r3, [sp, #4]
 31242 04de 089B     		ldr	r3, [sp, #32]
 31243 04e0 A847     		blx	r5
 31244              	.LVL2399:
4805:src/xeq.c     **** 					setlastX();
 31245              		.loc 1 4805 10 view .LVU8367
 31246 04e2 444B     		ldr	r3, .L2478+8
 31247 04e4 0593     		str	r3, [sp, #20]
 31248 04e6 0546     		mov	r5, r0
 31249              	.LVL2400:
4805:src/xeq.c     **** 					setlastX();
 31250              		.loc 1 4805 10 view .LVU8368
 31251 04e8 8A46     		mov	r10, r1
 31252              	.LVL2401:
4806:src/xeq.c     **** 					lower();
 31253              		.loc 1 4806 6 is_stmt 1 view .LVU8369
 31254              	.LBB4423:
 31255              	.LBI4423:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31256              		.loc 1 786 6 view .LVU8370
 31257              	.LBB4424:
 787:src/xeq.c     **** }
 31258              		.loc 1 787 2 view .LVU8371
 31259 04ea 6C20     		movs	r0, #108
 31260              	.LVL2402:
 787:src/xeq.c     **** }
 31261              		.loc 1 787 2 is_stmt 0 view .LVU8372
 31262 04ec 6421     		movs	r1, #100
ARM GAS  /tmp/ccaPnj5t.s 			page 794


 31263              	.LVL2403:
 787:src/xeq.c     **** }
 31264              		.loc 1 787 2 view .LVU8373
 31265 04ee FFF7FEFF 		bl	copyreg_n
 31266              	.LVL2404:
 31267              	.LBE4424:
 31268              	.LBE4423:
4807:src/xeq.c     **** 					lower();
 31269              		.loc 1 4807 6 is_stmt 1 view .LVU8374
 31270 04f2 FFF7FEFF 		bl	lower
 31271              	.LVL2405:
 31272 04f6 62E1     		b	.L2424
 31273              	.LVL2406:
 31274              	.L2182:
4807:src/xeq.c     **** 					lower();
 31275              		.loc 1 4807 6 is_stmt 0 view .LVU8375
 31276              	.LBE4418:
 31277              	.LBE4417:
 31278              	.LBE4443:
 31279              	.LBE4451:
5350:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
 31280              		.loc 1 5350 19 is_stmt 1 view .LVU8376
 31281              	.LBB4452:
 31282              	.LBI4452:
4681:src/xeq.c     **** 	decNumber x, y, rx, ry;
 31283              		.loc 1 4681 13 view .LVU8377
 31284              	.LBB4453:
4682:src/xeq.c     **** 	unsigned int f;
 31285              		.loc 1 4682 2 view .LVU8378
4683:src/xeq.c     **** 
 31286              		.loc 1 4683 2 view .LVU8379
4685:src/xeq.c     **** 
 31287              		.loc 1 4685 2 view .LVU8380
 31288              	.LBB4454:
 31289              	.LBI4454:
1314:src/xeq.c     **** 	process_cmdline();
 31290              		.loc 1 1314 6 view .LVU8381
 31291              	.LBE4454:
 31292              	.LBE4453:
 31293              	.LBE4452:
1315:src/xeq.c     **** 	set_lift();
 31294              		.loc 1 1315 2 view .LVU8382
 31295              	.LBB4485:
 31296              	.LBB4480:
 31297              	.LBB4465:
 31298              	.LBB4455:
 31299              	.LBI4455:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 31300              		.loc 1 1208 6 view .LVU8383
 31301              	.LBB4456:
1209:src/xeq.c     **** 
 31302              		.loc 1 1209 2 view .LVU8384
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31303              		.loc 1 1211 2 view .LVU8385
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31304              		.loc 1 1211 5 is_stmt 0 view .LVU8386
 31305 04f8 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
ARM GAS  /tmp/ccaPnj5t.s 			page 795


 31306 04fa 002B     		cmp	r3, #0
 31307 04fc 40F0BE81 		bne	.L2460
 31308              	.L2259:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31309              		.loc 1 1211 5 view .LVU8387
 31310              	.LBE4456:
 31311              	.LBE4455:
 31312              	.LBE4465:
 31313              	.LBE4480:
 31314              	.LBE4485:
1316:src/xeq.c     **** }
 31315              		.loc 1 1316 2 is_stmt 1 view .LVU8388
 31316              	.LBB4486:
 31317              	.LBB4481:
 31318              	.LBB4466:
 31319              	.LBB4458:
 31320              	.LBI4458:
 761:src/xeq.c     ****     State2.state_lift = 1;
 31321              		.loc 1 761 6 view .LVU8389
 31322              	.LBB4459:
 762:src/xeq.c     **** }
 31323              		.loc 1 762 5 view .LVU8390
 762:src/xeq.c     **** }
 31324              		.loc 1 762 23 is_stmt 0 view .LVU8391
 31325 0500 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31326              	.LBE4459:
 31327              	.LBE4458:
 31328              	.LBE4466:
4687:src/xeq.c     **** 
 31329              		.loc 1 4687 4 view .LVU8392
 31330 0502 EDB2     		uxtb	r5, r5
 31331              	.LVL2407:
 31332              	.LBB4467:
 31333              	.LBB4462:
 31334              	.LBB4460:
 762:src/xeq.c     **** }
 31335              		.loc 1 762 23 view .LVU8393
 31336 0504 43F04003 		orr	r3, r3, #64
 31337              	.LBE4460:
 31338              	.LBE4462:
 31339              	.LBE4467:
4689:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31340              		.loc 1 4689 5 view .LVU8394
 31341 0508 9B2D     		cmp	r5, #155
 31342              	.LBB4468:
 31343              	.LBB4463:
 31344              	.LBB4461:
 762:src/xeq.c     **** }
 31345              		.loc 1 762 23 view .LVU8395
 31346 050a E375     		strb	r3, [r4, #23]
 31347              	.LBE4461:
 31348              	.LBE4463:
 31349              	.LBE4468:
4687:src/xeq.c     **** 
 31350              		.loc 1 4687 2 is_stmt 1 view .LVU8396
 31351              	.LVL2408:
4689:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
ARM GAS  /tmp/ccaPnj5t.s 			page 796


 31352              		.loc 1 4689 2 view .LVU8397
4689:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31353              		.loc 1 4689 5 is_stmt 0 view .LVU8398
 31354 050c 66D8     		bhi	.L2265
4690:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31355              		.loc 1 4690 3 is_stmt 1 view .LVU8399
4690:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31356              		.loc 1 4690 9 is_stmt 0 view .LVU8400
 31357 050e 3A4B     		ldr	r3, .L2478+12
 31358 0510 05EB4505 		add	r5, r5, r5, lsl #1
 31359              	.LVL2409:
4690:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31360              		.loc 1 4690 9 view .LVU8401
 31361 0514 03EBC505 		add	r5, r3, r5, lsl #3
 31362 0518 6D68     		ldr	r5, [r5, #4]
4690:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31363              		.loc 1 4690 6 view .LVU8402
 31364 051a 002D     		cmp	r5, #0
 31365 051c 00F0B482 		beq	.L2266
 31366              	.LBB4469:
4691:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31367              		.loc 1 4691 4 is_stmt 1 view .LVU8403
 31368              	.LVL2410:
4692:src/xeq.c     **** 				return;
 31369              		.loc 1 4692 4 view .LVU8404
4692:src/xeq.c     **** 				return;
 31370              		.loc 1 4692 8 is_stmt 0 view .LVU8405
 31371 0520 2846     		mov	r0, r5
 31372 0522 FFF7FEFF 		bl	dispatch_xrom
 31373              	.LVL2411:
4692:src/xeq.c     **** 				return;
 31374              		.loc 1 4692 7 view .LVU8406
 31375 0526 0028     		cmp	r0, #0
 31376 0528 40F09580 		bne	.L2150
4695:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
 31377              		.loc 1 4695 5 is_stmt 1 view .LVU8407
 31378              	.LVL2412:
 31379              	.LBB4470:
 31380              	.LBI4470:
 848:src/xeq.c     **** 	getX(x);
 31381              		.loc 1 848 6 view .LVU8408
 31382              	.LBE4470:
 31383              	.LBE4469:
 31384              	.LBE4481:
 31385              	.LBE4486:
 849:src/xeq.c     **** 	getY(y);
 31386              		.loc 1 849 2 view .LVU8409
 31387              	.LBB4487:
 31388              	.LBB4482:
 31389              	.LBB4477:
 31390              	.LBB4475:
 31391              	.LBB4471:
 31392              	.LBI4471:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 31393              		.loc 1 818 12 view .LVU8410
 31394              	.LBB4472:
 819:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 797


 31395              		.loc 1 819 2 view .LVU8411
 819:src/xeq.c     **** }
 31396              		.loc 1 819 9 is_stmt 0 view .LVU8412
 31397 052c 6421     		movs	r1, #100
 31398 052e 1EA8     		add	r0, sp, #120
 31399              	.LVL2413:
 819:src/xeq.c     **** }
 31400              		.loc 1 819 9 view .LVU8413
 31401 0530 FFF7FEFF 		bl	getRegister
 31402              	.LVL2414:
 819:src/xeq.c     **** }
 31403              		.loc 1 819 9 view .LVU8414
 31404              	.LBE4472:
 31405              	.LBE4471:
 31406              	.LBE4475:
 31407              	.LBE4477:
 31408              	.LBE4482:
 31409              	.LBE4487:
 850:src/xeq.c     **** }
 31410              		.loc 1 850 2 is_stmt 1 view .LVU8415
 31411              	.LBB4488:
 31412              	.LBB4483:
 31413              	.LBB4478:
 31414              	.LBB4476:
 31415              	.LBB4473:
 31416              	.LBI4473:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 31417              		.loc 1 826 6 view .LVU8416
 31418              	.LBB4474:
 827:src/xeq.c     **** }
 31419              		.loc 1 827 2 view .LVU8417
 31420 0534 6521     		movs	r1, #101
 31421 0536 27A8     		add	r0, sp, #156
 31422              	.LVL2415:
 827:src/xeq.c     **** }
 31423              		.loc 1 827 2 is_stmt 0 view .LVU8418
 31424 0538 FFF7FEFF 		bl	getRegister
 31425              	.LVL2416:
 827:src/xeq.c     **** }
 31426              		.loc 1 827 2 view .LVU8419
 31427              	.LBE4474:
 31428              	.LBE4473:
 31429              	.LBE4476:
4696:src/xeq.c     **** 				setlastXY();
 31430              		.loc 1 4696 5 is_stmt 1 view .LVU8420
 31431 053c 27AB     		add	r3, sp, #156
 31432 053e 1EAA     		add	r2, sp, #120
 31433 0540 39A9     		add	r1, sp, #228
 31434 0542 30A8     		add	r0, sp, #192
 31435 0544 A847     		blx	r5
 31436              	.LVL2417:
4697:src/xeq.c     **** 				setXY(&rx, &ry);
 31437              		.loc 1 4697 5 view .LVU8421
 31438 0546 FFF7FEFF 		bl	setlastXY
 31439              	.LVL2418:
4698:src/xeq.c     **** 				set_was_complex();
 31440              		.loc 1 4698 5 view .LVU8422
ARM GAS  /tmp/ccaPnj5t.s 			page 798


 31441              	.L2423:
4698:src/xeq.c     **** 				set_was_complex();
 31442              		.loc 1 4698 5 is_stmt 0 view .LVU8423
 31443              	.LBE4478:
 31444              	.LBE4483:
 31445              	.LBE4488:
 31446              	.LBB4489:
 31447              	.LBB4490:
 31448              	.LBB4491:
4777:src/xeq.c     **** 				set_was_complex();
 31449              		.loc 1 4777 5 is_stmt 1 view .LVU8424
 31450 054a 39A9     		add	r1, sp, #228
 31451 054c 30A8     		add	r0, sp, #192
 31452 054e FFF7FEFF 		bl	setXY
 31453              	.LVL2419:
4778:src/xeq.c     **** 			}
 31454              		.loc 1 4778 5 view .LVU8425
 31455              	.LBB4492:
 31456              	.LBI4492:
 533:src/xeq.c     **** 	State2.wascomplex = 1;
 31457              		.loc 1 533 13 view .LVU8426
 31458              	.LBB4493:
 534:src/xeq.c     **** }
 31459              		.loc 1 534 2 view .LVU8427
 534:src/xeq.c     **** }
 31460              		.loc 1 534 20 is_stmt 0 view .LVU8428
 31461 0552 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
 31462 0554 274B     		ldr	r3, .L2478+8
 31463 0556 0121     		movs	r1, #1
 31464 0558 61F38712 		bfi	r2, r1, #6, #2
 31465 055c 2275     		strb	r2, [r4, #20]
 31466 055e 1A68     		ldr	r2, [r3]
 535:src/xeq.c     **** 
 31467              		.loc 1 535 1 view .LVU8429
 31468 0560 0FE6     		b	.L2153
 31469              	.LVL2420:
 31470              	.L2180:
 535:src/xeq.c     **** 
 31471              		.loc 1 535 1 view .LVU8430
 31472              	.LBE4493:
 31473              	.LBE4492:
 31474              	.LBE4491:
 31475              	.LBE4490:
 31476              	.LBE4489:
5351:src/xeq.c     **** 		default:	illegal(op);
 31477              		.loc 1 5351 19 is_stmt 1 view .LVU8431
 31478              	.LBB4532:
 31479              	.LBI4489:
4758:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
 31480              		.loc 1 4758 13 view .LVU8432
 31481              	.LBB4525:
4759:src/xeq.c     **** 	unsigned int f;
 31482              		.loc 1 4759 2 view .LVU8433
4760:src/xeq.c     **** 
 31483              		.loc 1 4760 2 view .LVU8434
4762:src/xeq.c     **** 
 31484              		.loc 1 4762 2 view .LVU8435
ARM GAS  /tmp/ccaPnj5t.s 			page 799


 31485              	.LBB4498:
 31486              	.LBI4498:
1314:src/xeq.c     **** 	process_cmdline();
 31487              		.loc 1 1314 6 view .LVU8436
 31488              	.LBE4498:
 31489              	.LBE4525:
 31490              	.LBE4532:
1315:src/xeq.c     **** 	set_lift();
 31491              		.loc 1 1315 2 view .LVU8437
 31492              	.LBB4533:
 31493              	.LBB4526:
 31494              	.LBB4509:
 31495              	.LBB4499:
 31496              	.LBI4499:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 31497              		.loc 1 1208 6 view .LVU8438
 31498              	.LBB4500:
1209:src/xeq.c     **** 
 31499              		.loc 1 1209 2 view .LVU8439
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31500              		.loc 1 1211 2 view .LVU8440
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31501              		.loc 1 1211 5 is_stmt 0 view .LVU8441
 31502 0562 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31503 0564 002B     		cmp	r3, #0
 31504 0566 40F08681 		bne	.L2461
 31505              	.L2264:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31506              		.loc 1 1211 5 view .LVU8442
 31507              	.LBE4500:
 31508              	.LBE4499:
 31509              	.LBE4509:
 31510              	.LBE4526:
 31511              	.LBE4533:
1316:src/xeq.c     **** }
 31512              		.loc 1 1316 2 is_stmt 1 view .LVU8443
 31513              	.LBB4534:
 31514              	.LBB4527:
 31515              	.LBB4510:
 31516              	.LBB4502:
 31517              	.LBI4502:
 761:src/xeq.c     ****     State2.state_lift = 1;
 31518              		.loc 1 761 6 view .LVU8444
 31519              	.LBB4503:
 762:src/xeq.c     **** }
 31520              		.loc 1 762 5 view .LVU8445
 762:src/xeq.c     **** }
 31521              		.loc 1 762 23 is_stmt 0 view .LVU8446
 31522 056a E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31523              	.LBE4503:
 31524              	.LBE4502:
 31525              	.LBE4510:
4764:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31526              		.loc 1 4764 4 view .LVU8447
 31527 056c EDB2     		uxtb	r5, r5
 31528              	.LVL2421:
 31529              	.LBB4511:
ARM GAS  /tmp/ccaPnj5t.s 			page 800


 31530              	.LBB4506:
 31531              	.LBB4504:
 762:src/xeq.c     **** }
 31532              		.loc 1 762 23 view .LVU8448
 31533 056e 43F04003 		orr	r3, r3, #64
 31534              	.LBE4504:
 31535              	.LBE4506:
 31536              	.LBE4511:
4765:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31537              		.loc 1 4765 5 view .LVU8449
 31538 0572 342D     		cmp	r5, #52
 31539              	.LBB4512:
 31540              	.LBB4507:
 31541              	.LBB4505:
 762:src/xeq.c     **** }
 31542              		.loc 1 762 23 view .LVU8450
 31543 0574 E375     		strb	r3, [r4, #23]
 31544              	.LBE4505:
 31545              	.LBE4507:
 31546              	.LBE4512:
4764:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31547              		.loc 1 4764 2 is_stmt 1 view .LVU8451
 31548              	.LVL2422:
4765:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31549              		.loc 1 4765 2 view .LVU8452
4765:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31550              		.loc 1 4765 5 is_stmt 0 view .LVU8453
 31551 0576 31D8     		bhi	.L2265
4766:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31552              		.loc 1 4766 3 is_stmt 1 view .LVU8454
4766:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31553              		.loc 1 4766 9 is_stmt 0 view .LVU8455
 31554 0578 214B     		ldr	r3, .L2478+20
 31555 057a 05EB4505 		add	r5, r5, r5, lsl #1
 31556              	.LVL2423:
4766:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31557              		.loc 1 4766 9 view .LVU8456
 31558 057e 03EBC505 		add	r5, r3, r5, lsl #3
 31559 0582 6D68     		ldr	r5, [r5, #4]
4766:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31560              		.loc 1 4766 6 view .LVU8457
 31561 0584 002D     		cmp	r5, #0
 31562 0586 00F07F82 		beq	.L2266
 31563              	.LBB4513:
4767:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31564              		.loc 1 4767 4 is_stmt 1 view .LVU8458
 31565              	.LVL2424:
4768:src/xeq.c     **** 				return;
 31566              		.loc 1 4768 4 view .LVU8459
4768:src/xeq.c     **** 				return;
 31567              		.loc 1 4768 8 is_stmt 0 view .LVU8460
 31568 058a 2846     		mov	r0, r5
 31569 058c FFF7FEFF 		bl	dispatch_xrom
 31570              	.LVL2425:
4768:src/xeq.c     **** 				return;
 31571              		.loc 1 4768 7 view .LVU8461
 31572 0590 0028     		cmp	r0, #0
ARM GAS  /tmp/ccaPnj5t.s 			page 801


 31573 0592 60D1     		bne	.L2150
4771:src/xeq.c     **** 
 31574              		.loc 1 4771 5 is_stmt 1 view .LVU8462
 31575              	.LVL2426:
 31576              	.LBB4494:
 31577              	.LBI4494:
 873:src/xeq.c     **** 	getXYZ(x, y, z);
 31578              		.loc 1 873 6 view .LVU8463
 31579              	.LBB4495:
 874:src/xeq.c     **** 	getT(t);
 31580              		.loc 1 874 2 view .LVU8464
 31581 0594 15AB     		add	r3, sp, #84
 31582              	.LVL2427:
 874:src/xeq.c     **** 	getT(t);
 31583              		.loc 1 874 2 is_stmt 0 view .LVU8465
 31584 0596 0DF1300A 		add	r10, sp, #48
 31585              	.LVL2428:
 874:src/xeq.c     **** 	getT(t);
 31586              		.loc 1 874 2 view .LVU8466
 31587 059a 1EAA     		add	r2, sp, #120
 31588              	.LVL2429:
 874:src/xeq.c     **** 	getT(t);
 31589              		.loc 1 874 2 view .LVU8467
 31590 059c 1946     		mov	r1, r3
 31591 059e 5046     		mov	r0, r10
 31592 05a0 FFF7FEFF 		bl	getXYZ
 31593              	.LVL2430:
 875:src/xeq.c     **** }
 31594              		.loc 1 875 2 is_stmt 1 view .LVU8468
 31595              	.LBB4496:
 31596              	.LBI4496:
 844:src/xeq.c     **** 	getRegister(t, regT_idx);
 31597              		.loc 1 844 13 view .LVU8469
 31598              	.LBB4497:
 845:src/xeq.c     **** }
 31599              		.loc 1 845 2 view .LVU8470
 31600 05a4 27A8     		add	r0, sp, #156
 31601              	.LVL2431:
 845:src/xeq.c     **** }
 31602              		.loc 1 845 2 is_stmt 0 view .LVU8471
 31603 05a6 6721     		movs	r1, #103
 31604 05a8 FFF7FEFF 		bl	getRegister
 31605              	.LVL2432:
 845:src/xeq.c     **** }
 31606              		.loc 1 845 2 view .LVU8472
 31607              	.LBE4497:
 31608              	.LBE4496:
 31609              	.LBE4495:
 31610              	.LBE4494:
4773:src/xeq.c     **** 
 31611              		.loc 1 4773 5 is_stmt 1 view .LVU8473
 31612 05ac 15AB     		add	r3, sp, #84
 31613 05ae 1EAA     		add	r2, sp, #120
 31614 05b0 39A9     		add	r1, sp, #228
 31615 05b2 30A8     		add	r0, sp, #192
 31616 05b4 CDE900A3 		strd	r10, r3, [sp]
 31617 05b8 27AB     		add	r3, sp, #156
ARM GAS  /tmp/ccaPnj5t.s 			page 802


 31618 05ba A847     		blx	r5
 31619              	.LVL2433:
4775:src/xeq.c     **** 				lower2();
 31620              		.loc 1 4775 5 view .LVU8474
 31621 05bc FFF7FEFF 		bl	setlastXY
 31622              	.LVL2434:
4776:src/xeq.c     **** 				setXY(&xr, &yr);
 31623              		.loc 1 4776 5 view .LVU8475
 31624 05c0 FFF7FEFF 		bl	lower2
 31625              	.LVL2435:
 31626 05c4 C1E7     		b	.L2423
 31627              	.LVL2436:
 31628              	.L2451:
4776:src/xeq.c     **** 				setXY(&xr, &yr);
 31629              		.loc 1 4776 5 is_stmt 0 view .LVU8476
 31630              	.LBE4513:
 31631              	.LBE4527:
 31632              	.LBE4534:
 31633              	.LBB4535:
 31634              	.LBB4158:
5263:src/xeq.c     **** 		return;
 31635              		.loc 1 5263 3 is_stmt 1 view .LVU8477
5263:src/xeq.c     **** 		return;
 31636              		.loc 1 5263 3 view .LVU8478
 31637              	.LBB4152:
 31638              	.LBI4147:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31639              		.loc 1 540 5 view .LVU8479
 31640              	.LBB4151:
 541:src/xeq.c     **** 		Error = e;
 31641              		.loc 1 541 2 view .LVU8480
 541:src/xeq.c     **** 		Error = e;
 31642              		.loc 1 541 12 is_stmt 0 view .LVU8481
 31643 05c6 0B4B     		ldr	r3, .L2478+8
 31644 05c8 DFF838A0 		ldr	r10, .L2478+24
 31645              	.LVL2437:
 541:src/xeq.c     **** 		Error = e;
 31646              		.loc 1 541 12 view .LVU8482
 31647 05cc 1868     		ldr	r0, [r3]
 541:src/xeq.c     **** 		Error = e;
 31648              		.loc 1 541 5 view .LVU8483
 31649 05ce 0028     		cmp	r0, #0
 31650 05d0 7FF4FBAD 		bne	.L2283
 31651 05d4 F7E5     		b	.L2158
 31652              	.LVL2438:
 31653              	.L2450:
 541:src/xeq.c     **** 		Error = e;
 31654              		.loc 1 541 5 view .LVU8484
 31655              	.LBE4151:
 31656              	.LBE4152:
 31657              	.LBB4153:
 31658              	.LBB4135:
 31659              	.LBB4129:
 31660 05d6 FFF7FEFF 		bl	process_cmdline.part.0
 31661              	.LVL2439:
 31662 05da ACE5     		b	.L2146
 31663              	.LVL2440:
ARM GAS  /tmp/ccaPnj5t.s 			page 803


 31664              	.L2265:
 541:src/xeq.c     **** 		Error = e;
 31665              		.loc 1 541 5 view .LVU8485
 31666              	.LBE4129:
 31667              	.LBE4135:
 31668              	.LBE4153:
 31669              	.LBE4158:
 31670              	.LBE4535:
 31671              	.LBB4536:
 31672              	.LBB4528:
4783:src/xeq.c     **** }
 31673              		.loc 1 4783 3 is_stmt 1 view .LVU8486
4783:src/xeq.c     **** }
 31674              		.loc 1 4783 3 view .LVU8487
 31675              	.LBB4514:
 31676              	.LBI4514:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31677              		.loc 1 540 5 view .LVU8488
 31678              	.LBB4515:
 541:src/xeq.c     **** 		Error = e;
 31679              		.loc 1 541 2 view .LVU8489
 541:src/xeq.c     **** 		Error = e;
 31680              		.loc 1 541 12 is_stmt 0 view .LVU8490
 31681 05dc 054B     		ldr	r3, .L2478+8
 31682 05de 1A68     		ldr	r2, [r3]
 541:src/xeq.c     **** 		Error = e;
 31683              		.loc 1 541 5 view .LVU8491
 31684 05e0 002A     		cmp	r2, #0
 31685 05e2 7FF49BAD 		bne	.L2164
 31686              	.LVL2441:
 31687              	.LBB4516:
 31688              	.LBI4516:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31689              		.loc 1 540 5 is_stmt 1 view .LVU8492
 31690              	.LBB4517:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 31691              		.loc 1 542 3 view .LVU8493
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 31692              		.loc 1 542 9 is_stmt 0 view .LVU8494
 31693 05e6 0322     		movs	r2, #3
 31694 05e8 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 31695              		.loc 1 543 3 is_stmt 1 view .LVU8495
 31696              	.LVL2442:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 31697              		.loc 1 543 3 is_stmt 0 view .LVU8496
 31698              	.LBE4517:
 31699              	.LBE4516:
 31700              	.LBE4515:
 31701              	.LBE4514:
4783:src/xeq.c     **** }
 31702              		.loc 1 4783 3 is_stmt 1 view .LVU8497
 31703              	.LBE4528:
 31704              	.LBE4536:
5352:src/xeq.c     **** 		}
 31705              		.loc 1 5352 12 view .LVU8498
5362:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
ARM GAS  /tmp/ccaPnj5t.s 			page 804


 31706              		.loc 1 5362 2 view .LVU8499
 31707 05ea 97E5     		b	.L2164
 31708              	.L2479:
 31709              		.align	2
 31710              	.L2478:
 31711 05ec 00000000 		.word	argcmds
 31712 05f0 00000000 		.word	niladics
 31713 05f4 00000000 		.word	Error
 31714 05f8 00000000 		.word	monfuncs
 31715 05fc 00000000 		.word	trifuncs
 31716 0600 00000000 		.word	dyfuncs
 31717 0604 00000000 		.word	Running
 31718              	.LVL2443:
 31719              	.L2409:
 31720              	.LBB4537:
 31721              	.LBB4351:
4605:src/xeq.c     **** 			bad_mode_error();
 31722              		.loc 1 4605 23 is_stmt 0 view .LVU8500
 31723 0608 03EB0511 		add	r1, r3, r5, lsl #4
 31724 060c 2A01     		lsls	r2, r5, #4
4605:src/xeq.c     **** 			bad_mode_error();
 31725              		.loc 1 4605 20 view .LVU8501
 31726 060e 91F90410 		ldrsb	r1, [r1, #4]
 31727 0612 0029     		cmp	r1, #0
 31728 0614 BFF6ABAE 		bge	.L2225
4606:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
 31729              		.loc 1 4606 4 is_stmt 1 view .LVU8502
 31730              	.LBB4337:
 31731              	.LBI4337:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 31732              		.loc 1 569 6 view .LVU8503
 31733              	.LBE4337:
 31734              	.LBE4351:
 31735              	.LBE4537:
 570:src/xeq.c     **** }
 31736              		.loc 1 570 2 view .LVU8504
 31737              	.LVL2444:
 31738              	.LBB4538:
 31739              	.LBB4352:
 31740              	.LBB4342:
 31741              	.LBB4338:
 31742              	.LBI4338:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31743              		.loc 1 540 5 view .LVU8505
 31744              	.LBB4339:
 541:src/xeq.c     **** 		Error = e;
 31745              		.loc 1 541 2 view .LVU8506
 541:src/xeq.c     **** 		Error = e;
 31746              		.loc 1 541 12 is_stmt 0 view .LVU8507
 31747 0618 A74B     		ldr	r3, .L2480
 541:src/xeq.c     **** 		Error = e;
 31748              		.loc 1 541 5 view .LVU8508
 31749 061a 1A68     		ldr	r2, [r3]
 31750 061c 0AB9     		cbnz	r2, .L2226
 31751              	.LVL2445:
 31752              	.LBB4340:
 31753              	.LBI4340:
ARM GAS  /tmp/ccaPnj5t.s 			page 805


 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31754              		.loc 1 540 5 is_stmt 1 view .LVU8509
 31755              	.LBB4341:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 31756              		.loc 1 542 3 view .LVU8510
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 31757              		.loc 1 542 9 is_stmt 0 view .LVU8511
 31758 061e 0D22     		movs	r2, #13
 31759 0620 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 31760              		.loc 1 543 3 is_stmt 1 view .LVU8512
 31761              	.LVL2446:
 31762              	.L2226:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 31763              		.loc 1 543 3 is_stmt 0 view .LVU8513
 31764              	.LBE4341:
 31765              	.LBE4340:
 31766              	.LBE4339:
 31767              	.LBE4338:
 31768              	.LBE4342:
4622:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 31769              		.loc 1 4622 3 is_stmt 1 view .LVU8514
4627:src/xeq.c     **** #endif
 31770              		.loc 1 4627 2 view .LVU8515
4627:src/xeq.c     **** #endif
 31771              		.loc 1 4627 5 is_stmt 0 view .LVU8516
 31772 0622 3F2D     		cmp	r5, #63
 31773 0624 7FF4C3AE 		bne	.L2234
 31774              	.LVL2447:
4627:src/xeq.c     **** #endif
 31775              		.loc 1 4627 5 view .LVU8517
 31776              	.LBE4352:
 31777              	.LBE4538:
5352:src/xeq.c     **** 		}
 31778              		.loc 1 5352 12 is_stmt 1 view .LVU8518
5362:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31779              		.loc 1 5362 2 view .LVU8519
 31780 0628 1868     		ldr	r0, [r3]
 31781              	.L2430:
5362:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31782              		.loc 1 5362 2 is_stmt 0 view .LVU8520
 31783 062a DFF8B0A2 		ldr	r10, .L2480+36
 31784 062e CCE5     		b	.L2283
 31785              	.LVL2448:
 31786              	.L2171:
 31787              	.LBB4539:
 31788              	.LBB4120:
5218:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31789              		.loc 1 5218 7 is_stmt 1 view .LVU8521
5218:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31790              		.loc 1 5218 23 is_stmt 0 view .LVU8522
 31791 0630 1344     		add	r3, r3, r2
 31792 0632 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
5218:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 31793              		.loc 1 5218 10 view .LVU8523
 31794 0634 DB06     		lsls	r3, r3, #27
 31795 0636 00F1E080 		bmi	.L2462
ARM GAS  /tmp/ccaPnj5t.s 			page 806


 31796              	.L2173:
 31797              	.LBB4098:
5224:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 31798              		.loc 1 5224 3 is_stmt 1 view .LVU8524
 31799              	.LVL2449:
5225:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 31800              		.loc 1 5225 3 view .LVU8525
 31801              	.LBB4099:
 31802              	.LBI4099:
4474:src/xeq.c     **** {
 31803              		.loc 1 4474 24 view .LVU8526
 31804              	.LBB4100:
4476:src/xeq.c     **** 	if (xp < xrom)
 31805              		.loc 1 4476 2 view .LVU8527
4476:src/xeq.c     **** 	if (xp < xrom)
 31806              		.loc 1 4476 59 is_stmt 0 view .LVU8528
 31807 063a 089A     		ldr	r2, [sp, #32]
4477:src/xeq.c     **** 		return NULL;
 31808              		.loc 1 4477 5 view .LVU8529
 31809 063c 9F4B     		ldr	r3, .L2480+4
4476:src/xeq.c     **** 	if (xp < xrom)
 31810              		.loc 1 4476 59 view .LVU8530
 31811 063e 22F00102 		bic	r2, r2, #1
 31812              	.LVL2450:
4477:src/xeq.c     **** 		return NULL;
 31813              		.loc 1 4477 2 is_stmt 1 view .LVU8531
4477:src/xeq.c     **** 		return NULL;
 31814              		.loc 1 4477 5 is_stmt 0 view .LVU8532
 31815 0642 9A42     		cmp	r2, r3
 31816 0644 6AD2     		bcs	.L2463
 31817              	.LVL2451:
 31818              	.L2175:
4477:src/xeq.c     **** 		return NULL;
 31819              		.loc 1 4477 5 view .LVU8533
 31820              	.LBE4100:
 31821              	.LBE4099:
5247:src/xeq.c     **** 		}
 31822              		.loc 1 5247 4 is_stmt 1 view .LVU8534
 31823 0646 0846     		mov	r0, r1
 31824 0648 089B     		ldr	r3, [sp, #32]
 31825 064a 5146     		mov	r1, r10
 31826              	.LVL2452:
5247:src/xeq.c     **** 		}
 31827              		.loc 1 5247 4 is_stmt 0 view .LVU8535
 31828 064c 9847     		blx	r3
 31829              	.LVL2453:
5249:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31830              		.loc 1 5249 3 is_stmt 1 view .LVU8536
5249:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31831              		.loc 1 5249 6 is_stmt 0 view .LVU8537
 31832 064e BAF1840F 		cmp	r10, #132
 31833 0652 7FF490AD 		bne	.L2421
 31834              	.LVL2454:
 31835              	.L2150:
5249:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31836              		.loc 1 5249 6 view .LVU8538
 31837 0656 984B     		ldr	r3, .L2480
ARM GAS  /tmp/ccaPnj5t.s 			page 807


 31838              	.L2422:
 31839 0658 1A68     		ldr	r2, [r3]
 31840 065a 92E5     		b	.L2153
 31841              	.LVL2455:
 31842              	.L2162:
5249:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 31843              		.loc 1 5249 6 view .LVU8539
 31844              	.LBE4098:
 31845              	.LBB4109:
5190:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31846              		.loc 1 5190 4 is_stmt 1 view .LVU8540
5190:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31847              		.loc 1 5190 13 is_stmt 0 view .LVU8541
 31848 065c 0846     		mov	r0, r1
 31849 065e 39A9     		add	r1, sp, #228
 31850 0660 0992     		str	r2, [sp, #36]
 31851 0662 FFF7FEFF 		bl	get_reg_n_int_sgn
 31852              	.LVL2456:
5191:src/xeq.c     **** 				goto range;
 31853              		.loc 1 5191 16 view .LVU8542
 31854 0666 0023     		movs	r3, #0
 31855 0668 0691     		str	r1, [sp, #24]
 31856 066a 0793     		str	r3, [sp, #28]
 31857              	.LVL2457:
5191:src/xeq.c     **** 				goto range;
 31858              		.loc 1 5191 4 is_stmt 1 view .LVU8543
5191:src/xeq.c     **** 				goto range;
 31859              		.loc 1 5191 7 is_stmt 0 view .LVU8544
 31860 066c DDE90623 		ldrd	r2, [sp, #24]
 31861 0670 1343     		orrs	r3, r2, r3
 31862 0672 16D1     		bne	.L2166
5193:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31863              		.loc 1 5193 4 is_stmt 1 view .LVU8545
5194:src/xeq.c     **** 				// negative arguments address local registers or flags
 31864              		.loc 1 5194 7 is_stmt 0 view .LVU8546
 31865 0674 15F0080F 		tst	r5, #8
 31866 0678 914B     		ldr	r3, .L2480+8
 31867 067a 099A     		ldr	r2, [sp, #36]
5193:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31868              		.loc 1 5193 8 view .LVU8547
 31869 067c 0146     		mov	r1, r0
 31870              	.LVL2458:
5194:src/xeq.c     **** 				// negative arguments address local registers or flags
 31871              		.loc 1 5194 4 is_stmt 1 view .LVU8548
5194:src/xeq.c     **** 				// negative arguments address local registers or flags
 31872              		.loc 1 5194 7 is_stmt 0 view .LVU8549
 31873 067e 02D0     		beq	.L2160
5194:src/xeq.c     **** 				// negative arguments address local registers or flags
 31874              		.loc 1 5194 27 view .LVU8550
 31875 0680 3998     		ldr	r0, [sp, #228]
 31876              	.LVL2459:
5194:src/xeq.c     **** 				// negative arguments address local registers or flags
 31877              		.loc 1 5194 27 view .LVU8551
 31878 0682 00B1     		cbz	r0, .L2160
5196:src/xeq.c     **** 			}
 31879              		.loc 1 5196 5 is_stmt 1 view .LVU8552
5196:src/xeq.c     **** 			}
ARM GAS  /tmp/ccaPnj5t.s 			page 808


 31880              		.loc 1 5196 9 is_stmt 0 view .LVU8553
 31881 0684 7031     		adds	r1, r1, #112
 31882              	.LVL2460:
 31883              	.L2160:
5196:src/xeq.c     **** 			}
 31884              		.loc 1 5196 9 view .LVU8554
 31885              	.LBE4109:
5204:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31886              		.loc 1 5204 2 is_stmt 1 view .LVU8555
5204:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31887              		.loc 1 5204 18 is_stmt 0 view .LVU8556
 31888 0686 9818     		adds	r0, r3, r2
 31889 0688 4079     		ldrb	r0, [r0, #5]	@ zero_extendqisi2
5204:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31890              		.loc 1 5204 5 view .LVU8557
 31891 068a 8507     		lsls	r5, r0, #30
 31892 068c 3CD5     		bpl	.L2168
5206:src/xeq.c     **** 	}
 31893              		.loc 1 5206 9 view .LVU8558
 31894 068e 5046     		mov	r0, r10
 31895 0690 CDE90512 		strd	r1, r2, [sp, #20]
 31896              	.LVL2461:
5206:src/xeq.c     **** 	}
 31897              		.loc 1 5206 9 view .LVU8559
 31898 0694 FFF7FEFF 		bl	get_reg_limit
 31899              	.LVL2462:
5206:src/xeq.c     **** 	}
 31900              		.loc 1 5206 9 view .LVU8560
 31901 0698 0599     		ldr	r1, [sp, #20]
 31902 069a 894B     		ldr	r3, .L2480+8
 31903 069c 069A     		ldr	r2, [sp, #24]
 31904              	.LVL2463:
 31905              	.L2169:
5214:src/xeq.c     **** 		// Argument is too large
 31906              		.loc 1 5214 2 is_stmt 1 view .LVU8561
5214:src/xeq.c     **** 		// Argument is too large
 31907              		.loc 1 5214 5 is_stmt 0 view .LVU8562
 31908 069e 8142     		cmp	r1, r0
 31909 06a0 C6D9     		bls	.L2171
 31910              	.LVL2464:
 31911              	.L2166:
5216:src/xeq.c     **** 	}
 31912              		.loc 1 5216 9 is_stmt 1 view .LVU8563
 31913              	.LBB4110:
 31914              	.LBI4110:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31915              		.loc 1 540 5 view .LVU8564
 31916              	.LBB4111:
 541:src/xeq.c     **** 		Error = e;
 31917              		.loc 1 541 2 view .LVU8565
 541:src/xeq.c     **** 		Error = e;
 31918              		.loc 1 541 12 is_stmt 0 view .LVU8566
 31919 06a2 854B     		ldr	r3, .L2480
 31920 06a4 1868     		ldr	r0, [r3]
 541:src/xeq.c     **** 		Error = e;
 31921              		.loc 1 541 5 view .LVU8567
 31922 06a6 0028     		cmp	r0, #0
ARM GAS  /tmp/ccaPnj5t.s 			page 809


 31923 06a8 BFD1     		bne	.L2430
 31924              	.LVL2465:
 31925              	.LBB4112:
 31926              	.LBI4112:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31927              		.loc 1 540 5 is_stmt 1 view .LVU8568
 31928              	.LBB4113:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 31929              		.loc 1 542 3 view .LVU8569
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 31930              		.loc 1 542 9 is_stmt 0 view .LVU8570
 31931 06aa 0820     		movs	r0, #8
 31932 06ac DFF82CA2 		ldr	r10, .L2480+36
 31933              	.LVL2466:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 31934              		.loc 1 542 9 view .LVU8571
 31935 06b0 1860     		str	r0, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 31936              		.loc 1 543 3 is_stmt 1 view .LVU8572
 31937 06b2 8AE5     		b	.L2283
 31938              	.LVL2467:
 31939              	.L2454:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 31940              		.loc 1 543 3 is_stmt 0 view .LVU8573
 31941 06b4 0393     		str	r3, [sp, #12]
 31942              	.LVL2468:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 31943              		.loc 1 543 3 view .LVU8574
 31944              	.LBE4113:
 31945              	.LBE4112:
 31946              	.LBE4111:
 31947              	.LBE4110:
 31948              	.LBE4120:
 31949              	.LBE4539:
 31950              	.LBB4540:
 31951              	.LBB4303:
 31952              	.LBB4295:
 31953 06b6 FFF7FEFF 		bl	process_cmdline.part.0
 31954              	.LVL2469:
 31955 06ba 039B     		ldr	r3, [sp, #12]
 31956 06bc A9E5     		b	.L2270
 31957              	.L2455:
 31958              	.LBE4295:
 31959              	.LBE4303:
 31960              	.LBE4540:
5381:src/xeq.c     **** 					// Restore the global return stack
 31961              		.loc 1 5381 5 is_stmt 1 view .LVU8575
5381:src/xeq.c     **** 					// Restore the global return stack
 31962              		.loc 1 5381 9 is_stmt 0 view .LVU8576
 31963 06be 814D     		ldr	r5, .L2480+12
5381:src/xeq.c     **** 					// Restore the global return stack
 31964              		.loc 1 5381 8 view .LVU8577
 31965 06c0 95F90110 		ldrsb	r1, [r5, #1]
5381:src/xeq.c     **** 					// Restore the global return stack
 31966              		.loc 1 5381 9 view .LVU8578
 31967 06c4 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
5381:src/xeq.c     **** 					// Restore the global return stack
ARM GAS  /tmp/ccaPnj5t.s 			page 810


 31968              		.loc 1 5381 8 view .LVU8579
 31969 06c6 8142     		cmp	r1, r0
 31970 06c8 BFF603AE 		bge	.L2273
5383:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31971              		.loc 1 5383 6 is_stmt 1 view .LVU8580
5383:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31972              		.loc 1 5383 13 is_stmt 0 view .LVU8581
 31973 06cc 7E49     		ldr	r1, .L2480+16
5384:src/xeq.c     **** 					// Restore private stack to normal stack
 31974              		.loc 1 5384 6 view .LVU8582
 31975 06ce D7F800C0 		ldr	ip, [r7]
5383:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 31976              		.loc 1 5383 13 view .LVU8583
 31977 06d2 AE68     		ldr	r6, [r5, #8]
 31978 06d4 0E60     		str	r6, [r1]
5384:src/xeq.c     **** 					// Restore private stack to normal stack
 31979              		.loc 1 5384 6 is_stmt 1 view .LVU8584
5386:src/xeq.c     **** 						// Need space for double precision stack
 31980              		.loc 1 5386 9 is_stmt 0 view .LVU8585
 31981 06d6 12F00808 		ands	r8, r2, #8
5384:src/xeq.c     **** 					// Restore private stack to normal stack
 31982              		.loc 1 5384 16 view .LVU8586
 31983 06da A989     		ldrh	r1, [r5, #12]
 31984 06dc ACF8E217 		strh	r1, [ip, #2018]	@ movhi
5386:src/xeq.c     **** 						// Need space for double precision stack
 31985              		.loc 1 5386 6 is_stmt 1 view .LVU8587
5386:src/xeq.c     **** 						// Need space for double precision stack
 31986              		.loc 1 5386 9 is_stmt 0 view .LVU8588
 31987 06e0 00F0DB81 		beq	.L2274
5390:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31988              		.loc 1 5390 6 is_stmt 1 view .LVU8589
5390:src/xeq.c     **** 					if (Error == ERR_NONE) {
 31989              		.loc 1 5390 20 is_stmt 0 view .LVU8590
 31990 06e4 60F3C712 		bfi	r2, r0, #7, #1
 31991 06e8 6A70     		strb	r2, [r5, #1]
5391:src/xeq.c     **** 						UState.mode_double = 1;
 31992              		.loc 1 5391 6 is_stmt 1 view .LVU8591
 31993              	.L2275:
5392:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 31994              		.loc 1 5392 7 view .LVU8592
5392:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 31995              		.loc 1 5392 26 is_stmt 0 view .LVU8593
 31996 06ea 3A68     		ldr	r2, [r7]
 31997 06ec 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 31998 06f0 43F04003 		orr	r3, r3, #64
 31999 06f4 82F8E937 		strb	r3, [r2, #2025]
5393:src/xeq.c     **** 					}
 32000              		.loc 1 5393 7 is_stmt 1 view .LVU8594
5393:src/xeq.c     **** 					}
 32001              		.loc 1 5393 13 is_stmt 0 view .LVU8595
 32002 06f8 6420     		movs	r0, #100
 32003 06fa FFF7FEFF 		bl	get_reg_n
 32004              	.LVL2470:
5393:src/xeq.c     **** 					}
 32005              		.loc 1 5393 7 view .LVU8596
 32006 06fe 7349     		ldr	r1, .L2480+20
 32007 0700 C022     		movs	r2, #192
ARM GAS  /tmp/ccaPnj5t.s 			page 811


 32008 0702 FFF7FEFF 		bl	xcopy
 32009              	.LVL2471:
 32010 0706 E4E5     		b	.L2273
 32011              	.LVL2472:
 32012              	.L2168:
 32013              	.LBB4541:
 32014              	.LBB4121:
5208:src/xeq.c     **** 		if (LocalRegs == 0)
 32015              		.loc 1 5208 7 is_stmt 1 view .LVU8597
5208:src/xeq.c     **** 		if (LocalRegs == 0)
 32016              		.loc 1 5208 10 is_stmt 0 view .LVU8598
 32017 0708 4006     		lsls	r0, r0, #25
 32018 070a 74D5     		bpl	.L2464
5209:src/xeq.c     **** 			lim = NUMFLG - 1;
 32019              		.loc 1 5209 3 is_stmt 1 view .LVU8599
5209:src/xeq.c     **** 			lim = NUMFLG - 1;
 32020              		.loc 1 5209 7 is_stmt 0 view .LVU8600
 32021 070c 3868     		ldr	r0, [r7]
5209:src/xeq.c     **** 			lim = NUMFLG - 1;
 32022              		.loc 1 5209 6 view .LVU8601
 32023 070e B0F9DE07 		ldrsh	r0, [r0, #2014]
5212:src/xeq.c     **** 	}
 32024              		.loc 1 5212 8 view .LVU8602
 32025 0712 0028     		cmp	r0, #0
 32026 0714 0CBF     		ite	eq
 32027 0716 6F20     		moveq	r0, #111
 32028 0718 7F20     		movne	r0, #127
 32029 071a C0E7     		b	.L2169
 32030              	.LVL2473:
 32031              	.L2463:
 32032              	.LBB4114:
 32033              	.LBB4102:
 32034              	.LBB4101:
4481:src/xeq.c     **** 		return NULL;
 32035              		.loc 1 4481 2 is_stmt 1 view .LVU8603
4481:src/xeq.c     **** 		return NULL;
 32036              		.loc 1 4481 17 is_stmt 0 view .LVU8604
 32037 071c 6C48     		ldr	r0, .L2480+24
 32038              	.LVL2474:
4481:src/xeq.c     **** 		return NULL;
 32039              		.loc 1 4481 17 view .LVU8605
 32040 071e 0088     		ldrh	r0, [r0]
 32041 0720 03EB4003 		add	r3, r3, r0, lsl #1
4481:src/xeq.c     **** 		return NULL;
 32042              		.loc 1 4481 5 view .LVU8606
 32043 0724 9A42     		cmp	r2, r3
 32044 0726 8ED2     		bcs	.L2175
 32045              	.LVL2475:
4481:src/xeq.c     **** 		return NULL;
 32046              		.loc 1 4481 5 view .LVU8607
 32047              	.LBE4101:
 32048              	.LBE4102:
5225:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 32049              		.loc 1 5225 6 view .LVU8608
 32050 0728 002A     		cmp	r2, #0
 32051 072a 8CD0     		beq	.L2175
5237:src/xeq.c     **** 			if (XromUserPc == 0)
ARM GAS  /tmp/ccaPnj5t.s 			page 812


 32052              		.loc 1 5237 4 is_stmt 1 view .LVU8609
 32053              	.LVL2476:
 32054              	.LBB4103:
 32055              	.LBI4103:
2196:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 32056              		.loc 1 2196 14 view .LVU8610
 32057              	.LBB4104:
2197:src/xeq.c     **** }
 32058              		.loc 1 2197 2 view .LVU8611
 32059              	.LBE4104:
 32060              	.LBE4103:
5237:src/xeq.c     **** 			if (XromUserPc == 0)
 32061              		.loc 1 5237 33 is_stmt 0 view .LVU8612
 32062 072c 3B68     		ldr	r3, [r7]
 32063              	.LBB4106:
 32064              	.LBB4105:
2197:src/xeq.c     **** }
 32065              		.loc 1 2197 9 view .LVU8613
 32066 072e 41F4C441 		orr	r1, r1, #25088
 32067              	.LVL2477:
2197:src/xeq.c     **** }
 32068              		.loc 1 2197 9 view .LVU8614
 32069 0732 B3F8E007 		ldrh	r0, [r3, #2016]
 32070 0736 0322     		movs	r2, #3
 32071 0738 FFF7FEFF 		bl	find_opcode_from
 32072              	.LVL2478:
2197:src/xeq.c     **** }
 32073              		.loc 1 2197 9 view .LVU8615
 32074              	.LBE4105:
 32075              	.LBE4106:
5237:src/xeq.c     **** 			if (XromUserPc == 0)
 32076              		.loc 1 5237 15 view .LVU8616
 32077 073c 654B     		ldr	r3, .L2480+28
 32078              	.LVL2479:
5237:src/xeq.c     **** 			if (XromUserPc == 0)
 32079              		.loc 1 5237 15 view .LVU8617
 32080 073e 1860     		str	r0, [r3]
5238:src/xeq.c     **** 				return;
 32081              		.loc 1 5238 4 is_stmt 1 view .LVU8618
5238:src/xeq.c     **** 				return;
 32082              		.loc 1 5238 7 is_stmt 0 view .LVU8619
 32083 0740 0028     		cmp	r0, #0
 32084 0742 88D0     		beq	.L2150
5240:src/xeq.c     **** 				clrretstk();
 32085              		.loc 1 5240 4 is_stmt 1 view .LVU8620
5240:src/xeq.c     **** 				clrretstk();
 32086              		.loc 1 5240 8 is_stmt 0 view .LVU8621
 32087 0744 DFF894A1 		ldr	r10, .L2480+36
 32088              	.LVL2480:
5240:src/xeq.c     **** 				clrretstk();
 32089              		.loc 1 5240 7 view .LVU8622
 32090 0748 DAF80030 		ldr	r3, [r10]
 32091 074c 23B9     		cbnz	r3, .L2177
5241:src/xeq.c     **** #endif
 32092              		.loc 1 5241 5 is_stmt 1 view .LVU8623
 32093              	.LBB4107:
 32094              	.LBI4107:
ARM GAS  /tmp/ccaPnj5t.s 			page 813


1588:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 32095              		.loc 1 1588 6 view .LVU8624
 32096              	.LBB4108:
1589:src/xeq.c     **** }
 32097              		.loc 1 1589 2 view .LVU8625
1589:src/xeq.c     **** }
 32098              		.loc 1 1589 14 is_stmt 0 view .LVU8626
 32099 074e 3A68     		ldr	r2, [r7]
1589:src/xeq.c     **** }
 32100              		.loc 1 1589 24 view .LVU8627
 32101 0750 A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
1589:src/xeq.c     **** }
 32102              		.loc 1 1589 12 view .LVU8628
 32103 0754 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 32104              	.L2177:
 32105              	.LBE4108:
 32106              	.LBE4107:
5243:src/xeq.c     **** 			return;
 32107              		.loc 1 5243 4 is_stmt 1 view .LVU8629
 32108 0758 574B     		ldr	r3, .L2480
 32109 075a 0898     		ldr	r0, [sp, #32]
 32110 075c 0593     		str	r3, [sp, #20]
 32111 075e FFF7FEFF 		bl	dispatch_xrom
 32112              	.LVL2481:
5244:src/xeq.c     **** 		}
 32113              		.loc 1 5244 4 view .LVU8630
 32114 0762 059B     		ldr	r3, [sp, #20]
 32115 0764 1A68     		ldr	r2, [r3]
 32116 0766 0CE5     		b	.L2153
 32117              	.LVL2482:
 32118              	.L2161:
5244:src/xeq.c     **** 		}
 32119              		.loc 1 5244 4 is_stmt 0 view .LVU8631
 32120              	.LBE4114:
5201:src/xeq.c     **** 		}
 32121              		.loc 1 5201 4 is_stmt 1 view .LVU8632
5201:src/xeq.c     **** 		}
 32122              		.loc 1 5201 8 is_stmt 0 view .LVU8633
 32123 0768 41F08001 		orr	r1, r1, #128
 32124              	.LVL2483:
5201:src/xeq.c     **** 		}
 32125              		.loc 1 5201 8 view .LVU8634
 32126 076c 8BE7     		b	.L2160
 32127              	.LVL2484:
 32128              	.L2453:
5201:src/xeq.c     **** 		}
 32129              		.loc 1 5201 8 view .LVU8635
 32130              	.LBE4121:
 32131              	.LBE4541:
 32132              	.LBB4542:
 32133              	.LBB4279:
4722:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32134              		.loc 1 4722 3 is_stmt 1 view .LVU8636
4722:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32135              		.loc 1 4722 7 is_stmt 0 view .LVU8637
 32136 076e 3B68     		ldr	r3, [r7]
 32137 0770 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
ARM GAS  /tmp/ccaPnj5t.s 			page 814


4722:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32138              		.loc 1 4722 6 view .LVU8638
 32139 0774 DA07     		lsls	r2, r3, #31
 32140 0776 40F19881 		bpl	.L2245
4723:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32141              		.loc 1 4723 4 is_stmt 1 view .LVU8639
4723:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32142              		.loc 1 4723 10 is_stmt 0 view .LVU8640
 32143 077a 574B     		ldr	r3, .L2480+32
 32144 077c 05EB4505 		add	r5, r5, r5, lsl #1
 32145              	.LVL2485:
4723:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32146              		.loc 1 4723 10 view .LVU8641
 32147 0780 03EBC505 		add	r5, r3, r5, lsl #3
 32148 0784 AD68     		ldr	r5, [r5, #8]
4723:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32149              		.loc 1 4723 7 view .LVU8642
 32150 0786 002D     		cmp	r5, #0
 32151 0788 00F07381 		beq	.L2256
 32152              	.LBB4249:
4724:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32153              		.loc 1 4724 5 is_stmt 1 view .LVU8643
 32154              	.LVL2486:
4725:src/xeq.c     **** 					return;
 32155              		.loc 1 4725 5 view .LVU8644
4725:src/xeq.c     **** 					return;
 32156              		.loc 1 4725 9 is_stmt 0 view .LVU8645
 32157 078c 2846     		mov	r0, r5
 32158 078e FFF7FEFF 		bl	dispatch_xrom
 32159              	.LVL2487:
4725:src/xeq.c     **** 					return;
 32160              		.loc 1 4725 8 view .LVU8646
 32161 0792 0028     		cmp	r0, #0
 32162 0794 7FF45FAF 		bne	.L2150
 32163              	.LBB4250:
4728:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 32164              		.loc 1 4728 6 is_stmt 1 view .LVU8647
 32165              	.LBB4251:
 32166              	.LBI4251:
1424:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32167              		.loc 1 1424 15 view .LVU8648
 32168              	.LBB4252:
1425:src/xeq.c     **** }
 32169              		.loc 1 1425 2 view .LVU8649
1425:src/xeq.c     **** }
 32170              		.loc 1 1425 9 is_stmt 0 view .LVU8650
 32171 0798 6420     		movs	r0, #100
 32172 079a FFF7FEFF 		bl	get_reg_n_int
 32173              	.LVL2488:
 32174 079e 0890     		str	r0, [sp, #32]
 32175              	.LBE4252:
 32176              	.LBE4251:
4729:src/xeq.c     **** 					x = fp(y, x);
 32177              		.loc 1 4729 24 view .LVU8651
 32178 07a0 6520     		movs	r0, #101
 32179              	.LBB4254:
 32180              	.LBB4253:
ARM GAS  /tmp/ccaPnj5t.s 			page 815


1425:src/xeq.c     **** }
 32181              		.loc 1 1425 9 view .LVU8652
 32182 07a2 0591     		str	r1, [sp, #20]
 32183              	.LVL2489:
1425:src/xeq.c     **** }
 32184              		.loc 1 1425 9 view .LVU8653
 32185              	.LBE4253:
 32186              	.LBE4254:
4729:src/xeq.c     **** 					x = fp(y, x);
 32187              		.loc 1 4729 6 is_stmt 1 view .LVU8654
4729:src/xeq.c     **** 					x = fp(y, x);
 32188              		.loc 1 4729 24 is_stmt 0 view .LVU8655
 32189 07a4 FFF7FEFF 		bl	get_reg_n_int
 32190              	.LVL2490:
4730:src/xeq.c     **** 					setlastX();
 32191              		.loc 1 4730 6 is_stmt 1 view .LVU8656
4730:src/xeq.c     **** 					setlastX();
 32192              		.loc 1 4730 10 is_stmt 0 view .LVU8657
 32193 07a8 059B     		ldr	r3, [sp, #20]
 32194 07aa 089A     		ldr	r2, [sp, #32]
 32195 07ac A847     		blx	r5
 32196              	.LVL2491:
4730:src/xeq.c     **** 					setlastX();
 32197              		.loc 1 4730 10 view .LVU8658
 32198 07ae 424B     		ldr	r3, .L2480
 32199 07b0 0593     		str	r3, [sp, #20]
 32200              	.LVL2492:
4730:src/xeq.c     **** 					setlastX();
 32201              		.loc 1 4730 10 view .LVU8659
 32202 07b2 0546     		mov	r5, r0
 32203              	.LVL2493:
4730:src/xeq.c     **** 					setlastX();
 32204              		.loc 1 4730 10 view .LVU8660
 32205 07b4 8A46     		mov	r10, r1
 32206              	.LVL2494:
4731:src/xeq.c     **** 					lower();
 32207              		.loc 1 4731 6 is_stmt 1 view .LVU8661
 32208              	.LBB4255:
 32209              	.LBI4255:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32210              		.loc 1 786 6 view .LVU8662
 32211              	.LBB4256:
 787:src/xeq.c     **** }
 32212              		.loc 1 787 2 view .LVU8663
 32213 07b6 6C20     		movs	r0, #108
 32214              	.LVL2495:
 787:src/xeq.c     **** }
 32215              		.loc 1 787 2 is_stmt 0 view .LVU8664
 32216 07b8 6421     		movs	r1, #100
 32217              	.LVL2496:
 787:src/xeq.c     **** }
 32218              		.loc 1 787 2 view .LVU8665
 32219 07ba FFF7FEFF 		bl	copyreg_n
 32220              	.LVL2497:
 32221              	.LBE4256:
 32222              	.LBE4255:
4732:src/xeq.c     **** 					setX_int(x);
ARM GAS  /tmp/ccaPnj5t.s 			page 816


 32223              		.loc 1 4732 6 is_stmt 1 view .LVU8666
 32224              	.L2424:
4732:src/xeq.c     **** 					setX_int(x);
 32225              		.loc 1 4732 6 is_stmt 0 view .LVU8667
 32226              	.LBE4250:
 32227              	.LBE4249:
 32228              	.LBE4279:
 32229              	.LBE4542:
 32230              	.LBB4543:
 32231              	.LBB4444:
 32232              	.LBB4426:
 32233              	.LBB4425:
4808:src/xeq.c     **** 					setX_int(x);
 32234              		.loc 1 4808 6 is_stmt 1 view .LVU8668
 32235 07be FFF7FEFF 		bl	lower
 32236              	.LVL2498:
 32237              	.L2426:
4809:src/xeq.c     **** 				}
 32238              		.loc 1 4809 6 view .LVU8669
 32239 07c2 2846     		mov	r0, r5
 32240 07c4 5146     		mov	r1, r10
 32241 07c6 FFF7FEFF 		bl	setX_int
 32242              	.LVL2499:
 32243 07ca 059B     		ldr	r3, [sp, #20]
 32244 07cc 1A68     		ldr	r2, [r3]
 32245              	.LBE4425:
 32246              	.LBE4426:
 32247 07ce D8E4     		b	.L2153
 32248              	.LVL2500:
 32249              	.L2224:
4809:src/xeq.c     **** 				}
 32250              		.loc 1 4809 6 is_stmt 0 view .LVU8670
 32251              	.LBE4444:
 32252              	.LBE4543:
 32253              	.LBB4544:
 32254              	.LBB4353:
4622:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32255              		.loc 1 4622 3 is_stmt 1 view .LVU8671
4622:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32256              		.loc 1 4622 3 view .LVU8672
 32257              	.LBB4343:
 32258              	.LBI4343:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32259              		.loc 1 540 5 view .LVU8673
 32260              	.LBB4344:
 541:src/xeq.c     **** 		Error = e;
 32261              		.loc 1 541 2 view .LVU8674
 541:src/xeq.c     **** 		Error = e;
 32262              		.loc 1 541 12 is_stmt 0 view .LVU8675
 32263 07d0 394B     		ldr	r3, .L2480
 541:src/xeq.c     **** 		Error = e;
 32264              		.loc 1 541 5 view .LVU8676
 32265 07d2 1A68     		ldr	r2, [r3]
 32266 07d4 0AB9     		cbnz	r2, .L2233
 32267              	.LVL2501:
 32268              	.LBB4345:
 32269              	.LBI4345:
ARM GAS  /tmp/ccaPnj5t.s 			page 817


 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32270              		.loc 1 540 5 is_stmt 1 view .LVU8677
 32271              	.LBB4346:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32272              		.loc 1 542 3 view .LVU8678
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32273              		.loc 1 542 9 is_stmt 0 view .LVU8679
 32274 07d6 0322     		movs	r2, #3
 32275 07d8 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 32276              		.loc 1 543 3 is_stmt 1 view .LVU8680
 32277              	.LVL2502:
 32278              	.L2233:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 32279              		.loc 1 543 3 is_stmt 0 view .LVU8681
 32280              	.LBE4346:
 32281              	.LBE4345:
 32282              	.LBE4344:
 32283              	.LBE4343:
4627:src/xeq.c     **** #endif
 32284              		.loc 1 4627 55 view .LVU8682
 32285 07da 3A68     		ldr	r2, [r7]
 32286 07dc 92F8AC27 		ldrb	r2, [r2, #1964]	@ zero_extendqisi2
4627:src/xeq.c     **** #endif
 32287              		.loc 1 4627 51 view .LVU8683
 32288 07e0 02F04102 		and	r2, r2, #65
 32289 07e4 412A     		cmp	r2, #65
 32290 07e6 7FF437AF 		bne	.L2422
4632:src/xeq.c     **** }
 32291              		.loc 1 4632 3 is_stmt 1 view .LVU8684
 32292              	.LBB4347:
 32293              	.LBI4347:
 761:src/xeq.c     ****     State2.state_lift = 1;
 32294              		.loc 1 761 6 view .LVU8685
 32295              	.LBB4348:
 762:src/xeq.c     **** }
 32296              		.loc 1 762 5 view .LVU8686
 762:src/xeq.c     **** }
 32297              		.loc 1 762 23 is_stmt 0 view .LVU8687
 32298 07ea E17D     		ldrb	r1, [r4, #23]	@ zero_extendqisi2
 32299 07ec 1A68     		ldr	r2, [r3]
 32300 07ee 41F04001 		orr	r1, r1, #64
 32301 07f2 E175     		strb	r1, [r4, #23]
 763:src/xeq.c     **** 
 32302              		.loc 1 763 1 view .LVU8688
 32303 07f4 C5E4     		b	.L2153
 32304              	.LVL2503:
 32305              	.L2464:
 763:src/xeq.c     **** 
 32306              		.loc 1 763 1 view .LVU8689
 32307              	.LBE4348:
 32308              	.LBE4347:
 32309              	.LBE4353:
 32310              	.LBE4544:
 32311              	.LBB4545:
 32312              	.LBB4122:
5164:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 818


 32313              		.loc 1 5164 15 view .LVU8690
 32314 07f6 0598     		ldr	r0, [sp, #20]
 32315 07f8 51E7     		b	.L2169
 32316              	.LVL2504:
 32317              	.L2462:
5218:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32318              		.loc 1 5218 30 view .LVU8691
 32319 07fa A1F16303 		sub	r3, r1, #99
 32320 07fe 0C2B     		cmp	r3, #12
 32321 0800 3FF61BAF 		bhi	.L2173
5218:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32322              		.loc 1 5218 69 view .LVU8692
 32323 0804 CD07     		lsls	r5, r1, #31
 32324 0806 7FF518AF 		bpl	.L2173
5220:src/xeq.c     **** 	}
 32325              		.loc 1 5220 3 is_stmt 1 view .LVU8693
 32326              	.LVL2505:
 32327              	.LBB4115:
 32328              	.LBI4115:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32329              		.loc 1 540 5 view .LVU8694
 32330              	.LBB4116:
 541:src/xeq.c     **** 		Error = e;
 32331              		.loc 1 541 2 view .LVU8695
 541:src/xeq.c     **** 		Error = e;
 32332              		.loc 1 541 12 is_stmt 0 view .LVU8696
 32333 080a 2B4B     		ldr	r3, .L2480
 32334 080c 1868     		ldr	r0, [r3]
 32335              	.LVL2506:
 541:src/xeq.c     **** 		Error = e;
 32336              		.loc 1 541 5 view .LVU8697
 32337 080e 0028     		cmp	r0, #0
 32338 0810 7FF40BAF 		bne	.L2430
 32339              	.LVL2507:
 32340              	.LBB4117:
 32341              	.LBI4117:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32342              		.loc 1 540 5 is_stmt 1 view .LVU8698
 32343              	.LBB4118:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32344              		.loc 1 542 3 view .LVU8699
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32345              		.loc 1 542 9 is_stmt 0 view .LVU8700
 32346 0814 0720     		movs	r0, #7
 32347 0816 DFF8C4A0 		ldr	r10, .L2480+36
 32348              	.LVL2508:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 32349              		.loc 1 542 9 view .LVU8701
 32350 081a 1860     		str	r0, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 32351              		.loc 1 543 3 is_stmt 1 view .LVU8702
 32352 081c D5E4     		b	.L2283
 32353              	.LVL2509:
 32354              	.L2452:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 32355              		.loc 1 543 3 is_stmt 0 view .LVU8703
 32356              	.LBE4118:
ARM GAS  /tmp/ccaPnj5t.s 			page 819


 32357              	.LBE4117:
 32358              	.LBE4116:
 32359              	.LBE4115:
 32360              	.LBE4122:
 32361              	.LBE4545:
 32362              	.LBB4546:
 32363              	.LBB4159:
 32364              	.LBB4154:
5271:src/xeq.c     **** 			if (XromUserPc != 0) {
 32365              		.loc 1 5271 4 is_stmt 1 view .LVU8704
5271:src/xeq.c     **** 			if (XromUserPc != 0) {
 32366              		.loc 1 5271 17 is_stmt 0 view .LVU8705
 32367 081e 2846     		mov	r0, r5
 32368 0820 0121     		movs	r1, #1
 32369 0822 0592     		str	r2, [sp, #20]
 32370 0824 FFF7FEFF 		bl	findmultilbl
 32371              	.LVL2510:
5271:src/xeq.c     **** 			if (XromUserPc != 0) {
 32372              		.loc 1 5271 15 view .LVU8706
 32373 0828 2A4B     		ldr	r3, .L2480+28
5272:src/xeq.c     **** 				if (! Running)
 32374              		.loc 1 5272 7 view .LVU8707
 32375 082a 059A     		ldr	r2, [sp, #20]
5271:src/xeq.c     **** 			if (XromUserPc != 0) {
 32376              		.loc 1 5271 15 view .LVU8708
 32377 082c 1860     		str	r0, [r3]
5272:src/xeq.c     **** 				if (! Running)
 32378              		.loc 1 5272 4 is_stmt 1 view .LVU8709
5272:src/xeq.c     **** 				if (! Running)
 32379              		.loc 1 5272 7 is_stmt 0 view .LVU8710
 32380 082e 0028     		cmp	r0, #0
 32381 0830 3FF411AF 		beq	.L2150
 32382              	.LVL2511:
5273:src/xeq.c     **** 					clrretstk();
 32383              		.loc 1 5273 5 is_stmt 1 view .LVU8711
5273:src/xeq.c     **** 					clrretstk();
 32384              		.loc 1 5273 9 is_stmt 0 view .LVU8712
 32385 0834 DFF8A4A0 		ldr	r10, .L2480+36
 32386              	.LVL2512:
5273:src/xeq.c     **** 					clrretstk();
 32387              		.loc 1 5273 8 view .LVU8713
 32388 0838 DAF80030 		ldr	r3, [r10]
 32389 083c 23B9     		cbnz	r3, .L2154
5274:src/xeq.c     **** 				dispatch_xrom(fp);
 32390              		.loc 1 5274 6 is_stmt 1 view .LVU8714
 32391              	.LBB4145:
 32392              	.LBI4145:
1588:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 32393              		.loc 1 1588 6 view .LVU8715
 32394              	.LBB4146:
1589:src/xeq.c     **** }
 32395              		.loc 1 1589 2 view .LVU8716
1589:src/xeq.c     **** }
 32396              		.loc 1 1589 14 is_stmt 0 view .LVU8717
 32397 083e 3968     		ldr	r1, [r7]
1589:src/xeq.c     **** }
 32398              		.loc 1 1589 24 view .LVU8718
ARM GAS  /tmp/ccaPnj5t.s 			page 820


 32399 0840 A1F8DE37 		strh	r3, [r1, #2014]	@ movhi
1589:src/xeq.c     **** }
 32400              		.loc 1 1589 12 view .LVU8719
 32401 0844 A1F8E237 		strh	r3, [r1, #2018]	@ movhi
 32402              	.L2154:
 32403              	.LBE4146:
 32404              	.LBE4145:
5275:src/xeq.c     **** 			}
 32405              		.loc 1 5275 5 is_stmt 1 view .LVU8720
 32406 0848 1B4B     		ldr	r3, .L2480
 32407 084a 0593     		str	r3, [sp, #20]
 32408              	.LVL2513:
5275:src/xeq.c     **** 			}
 32409              		.loc 1 5275 5 is_stmt 0 view .LVU8721
 32410 084c 1046     		mov	r0, r2
 32411 084e FFF7FEFF 		bl	dispatch_xrom
 32412              	.LVL2514:
 32413 0852 059B     		ldr	r3, [sp, #20]
 32414 0854 1A68     		ldr	r2, [r3]
 32415 0856 94E4     		b	.L2153
 32416              	.LVL2515:
 32417              	.L2196:
5275:src/xeq.c     **** 			}
 32418              		.loc 1 5275 5 view .LVU8722
 32419              	.LBE4154:
 32420              	.LBE4159:
 32421              	.LBE4546:
 32422              	.LBB4547:
 32423              	.LBB4226:
3904:src/xeq.c     **** 		break;
 32424              		.loc 1 3904 3 is_stmt 1 view .LVU8723
 32425 0858 174B     		ldr	r3, .L2480
 32426 085a 0593     		str	r3, [sp, #20]
 32427 085c AAF10500 		sub	r0, r10, #5
 32428 0860 FFF7FEFF 		bl	digit
 32429              	.LVL2516:
3905:src/xeq.c     **** 
 32430              		.loc 1 3905 3 view .LVU8724
 32431 0864 059B     		ldr	r3, [sp, #20]
 32432 0866 1A68     		ldr	r2, [r3]
 32433 0868 8BE4     		b	.L2153
 32434              	.LVL2517:
 32435              	.L2458:
3905:src/xeq.c     **** 
 32436              		.loc 1 3905 3 is_stmt 0 view .LVU8725
 32437              	.LBE4226:
 32438              	.LBE4547:
 32439              	.LBB4548:
 32440              	.LBB4394:
 32441              	.LBB4379:
 32442              	.LBB4368:
 32443              	.LBB4361:
 32444 086a FFF7FEFF 		bl	process_cmdline.part.0
 32445              	.LVL2518:
 32446 086e A6E5     		b	.L2235
 32447              	.LVL2519:
 32448              	.L2456:
ARM GAS  /tmp/ccaPnj5t.s 			page 821


3905:src/xeq.c     **** 
 32449              		.loc 1 3905 3 view .LVU8726
 32450              	.LBE4361:
 32451              	.LBE4368:
 32452              	.LBE4379:
 32453              	.LBE4394:
 32454              	.LBE4548:
 32455              	.LBB4549:
 32456              	.LBB4354:
 32457              	.LBB4349:
 32458              	.LBB4324:
 32459 0870 FFF7FEFF 		bl	process_cmdline.part.0
 32460              	.LVL2520:
 32461 0874 6FE5     		b	.L2223
 32462              	.LVL2521:
 32463              	.L2461:
3905:src/xeq.c     **** 
 32464              		.loc 1 3905 3 view .LVU8727
 32465              	.LBE4324:
 32466              	.LBE4349:
 32467              	.LBE4354:
 32468              	.LBE4549:
 32469              	.LBB4550:
 32470              	.LBB4529:
 32471              	.LBB4518:
 32472              	.LBB4508:
 32473              	.LBB4501:
 32474 0876 FFF7FEFF 		bl	process_cmdline.part.0
 32475              	.LVL2522:
 32476 087a 76E6     		b	.L2264
 32477              	.LVL2523:
 32478              	.L2460:
3905:src/xeq.c     **** 
 32479              		.loc 1 3905 3 view .LVU8728
 32480              	.LBE4501:
 32481              	.LBE4508:
 32482              	.LBE4518:
 32483              	.LBE4529:
 32484              	.LBE4550:
 32485              	.LBB4551:
 32486              	.LBB4484:
 32487              	.LBB4479:
 32488              	.LBB4464:
 32489              	.LBB4457:
 32490 087c FFF7FEFF 		bl	process_cmdline.part.0
 32491              	.LVL2524:
 32492 0880 3EE6     		b	.L2259
 32493              	.LVL2525:
 32494              	.L2459:
3905:src/xeq.c     **** 
 32495              		.loc 1 3905 3 view .LVU8729
 32496              	.LBE4457:
 32497              	.LBE4464:
 32498              	.LBE4479:
 32499              	.LBE4484:
 32500              	.LBE4551:
 32501              	.LBB4552:
ARM GAS  /tmp/ccaPnj5t.s 			page 822


 32502              	.LBB4445:
 32503              	.LBB4427:
 32504              	.LBB4412:
 32505              	.LBB4405:
 32506 0882 FFF7FEFF 		bl	process_cmdline.part.0
 32507              	.LVL2526:
 32508 0886 FBE5     		b	.L2251
 32509              	.LVL2527:
 32510              	.L2193:
3905:src/xeq.c     **** 
 32511              		.loc 1 3905 3 view .LVU8730
 32512              	.LBE4405:
 32513              	.LBE4412:
 32514              	.LBE4427:
 32515              	.LBE4445:
 32516              	.LBE4552:
 32517              	.LBB4553:
 32518              	.LBB4227:
4058:src/xeq.c     **** 		break;
 32519              		.loc 1 4058 3 is_stmt 1 view .LVU8731
4058:src/xeq.c     **** 		break;
 32520              		.loc 1 4058 53 is_stmt 0 view .LVU8732
 32521 0888 A5F11E01 		sub	r1, r5, #30
 32522 088c 0A4B     		ldr	r3, .L2480
 32523 088e 0593     		str	r3, [sp, #20]
4058:src/xeq.c     **** 		break;
 32524              		.loc 1 4058 3 view .LVU8733
 32525 0890 C9B2     		uxtb	r1, r1
 32526 0892 40F61C00 		movw	r0, #2076
 32527 0896 FFF7FEFF 		bl	do_tst
 32528              	.LVL2528:
4059:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
 32529              		.loc 1 4059 3 is_stmt 1 view .LVU8734
 32530 089a 059B     		ldr	r3, [sp, #20]
 32531 089c 1A68     		ldr	r2, [r3]
 32532 089e 70E4     		b	.L2153
 32533              	.L2194:
4049:src/xeq.c     **** 		break;
 32534              		.loc 1 4049 3 view .LVU8735
4049:src/xeq.c     **** 		break;
 32535              		.loc 1 4049 54 is_stmt 0 view .LVU8736
 32536 08a0 A5F11701 		sub	r1, r5, #23
 32537 08a4 044B     		ldr	r3, .L2480
 32538 08a6 0593     		str	r3, [sp, #20]
4049:src/xeq.c     **** 		break;
 32539              		.loc 1 4049 3 view .LVU8737
 32540 08a8 C9B2     		uxtb	r1, r1
 32541 08aa 40F61B00 		movw	r0, #2075
 32542 08ae FFF7FEFF 		bl	do_tst
 32543              	.LVL2529:
4050:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 32544              		.loc 1 4050 3 is_stmt 1 view .LVU8738
 32545 08b2 059B     		ldr	r3, [sp, #20]
 32546 08b4 1A68     		ldr	r2, [r3]
 32547 08b6 64E4     		b	.L2153
 32548              	.L2481:
 32549              		.align	2
ARM GAS  /tmp/ccaPnj5t.s 			page 823


 32550              	.L2480:
 32551 08b8 00000000 		.word	Error
 32552 08bc 00000000 		.word	xrom
 32553 08c0 00000000 		.word	argcmds
 32554 08c4 00000000 		.word	XromParams
 32555 08c8 00000000 		.word	RetStk
 32556 08cc 00000000 		.word	XromLocal
 32557 08d0 00000000 		.word	xrom_size
 32558 08d4 00000000 		.word	XromUserPc
 32559 08d8 00000000 		.word	dyfuncs
 32560 08dc 00000000 		.word	Running
 32561              	.L2189:
4064:src/xeq.c     **** 		break;
 32562              		.loc 1 4064 3 view .LVU8739
4064:src/xeq.c     **** 		break;
 32563              		.loc 1 4064 49 is_stmt 0 view .LVU8740
 32564 08e0 A5F12902 		sub	r2, r5, #41
 32565 08e4 B84B     		ldr	r3, .L2482
4064:src/xeq.c     **** 		break;
 32566              		.loc 1 4064 3 view .LVU8741
 32567 08e6 B949     		ldr	r1, .L2482+4
 32568 08e8 B948     		ldr	r0, .L2482+8
 32569 08ea 0593     		str	r3, [sp, #20]
 32570 08ec D2B2     		uxtb	r2, r2
 32571 08ee FFF7FEFF 		bl	do_ztst
 32572              	.LVL2530:
4065:src/xeq.c     **** 
 32573              		.loc 1 4065 3 is_stmt 1 view .LVU8742
 32574 08f2 059B     		ldr	r3, [sp, #20]
 32575 08f4 1A68     		ldr	r2, [r3]
 32576 08f6 44E4     		b	.L2153
 32577              	.L2191:
4061:src/xeq.c     **** 		break;
 32578              		.loc 1 4061 3 view .LVU8743
4061:src/xeq.c     **** 		break;
 32579              		.loc 1 4061 49 is_stmt 0 view .LVU8744
 32580 08f8 A5F12702 		sub	r2, r5, #39
 32581 08fc B24B     		ldr	r3, .L2482
4061:src/xeq.c     **** 		break;
 32582              		.loc 1 4061 3 view .LVU8745
 32583 08fe B449     		ldr	r1, .L2482+8
 32584 0900 B248     		ldr	r0, .L2482+4
 32585 0902 0593     		str	r3, [sp, #20]
 32586 0904 D2B2     		uxtb	r2, r2
 32587 0906 FFF7FEFF 		bl	do_ztst
 32588              	.LVL2531:
4062:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
 32589              		.loc 1 4062 3 is_stmt 1 view .LVU8746
 32590 090a 059B     		ldr	r3, [sp, #20]
 32591 090c 1A68     		ldr	r2, [r3]
 32592 090e 38E4     		b	.L2153
 32593              	.L2192:
4052:src/xeq.c     **** 		break;
 32594              		.loc 1 4052 3 view .LVU8747
 32595 0910 AF49     		ldr	r1, .L2482+8
 32596 0912 AD4B     		ldr	r3, .L2482
 32597 0914 0593     		str	r3, [sp, #20]
ARM GAS  /tmp/ccaPnj5t.s 			page 824


4052:src/xeq.c     **** 		break;
 32598              		.loc 1 4052 49 is_stmt 0 view .LVU8748
 32599 0916 A5F12502 		sub	r2, r5, #37
4052:src/xeq.c     **** 		break;
 32600              		.loc 1 4052 3 view .LVU8749
 32601 091a D2B2     		uxtb	r2, r2
 32602 091c 0846     		mov	r0, r1
 32603 091e FFF7FEFF 		bl	do_ztst
 32604              	.LVL2532:
4053:src/xeq.c     **** 
 32605              		.loc 1 4053 3 is_stmt 1 view .LVU8750
 32606 0922 059B     		ldr	r3, [sp, #20]
 32607 0924 1A68     		ldr	r2, [r3]
 32608 0926 2CE4     		b	.L2153
 32609              	.L2195:
4031:src/xeq.c     **** 			bad_mode_error();
 32610              		.loc 1 4031 3 view .LVU8751
4031:src/xeq.c     **** 			bad_mode_error();
 32611              		.loc 1 4031 7 is_stmt 0 view .LVU8752
 32612 0928 3B68     		ldr	r3, [r7]
 32613 092a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4031:src/xeq.c     **** 			bad_mode_error();
 32614              		.loc 1 4031 6 view .LVU8753
 32615 092e DA07     		lsls	r2, r3, #31
 32616 0930 00F19F80 		bmi	.L2256
4035:src/xeq.c     **** 		clr_lift();
 32617              		.loc 1 4035 3 is_stmt 1 view .LVU8754
 32618              	.LBB4171:
 32619              	.LBI4171:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 32620              		.loc 1 1208 6 view .LVU8755
 32621              	.LBB4172:
1209:src/xeq.c     **** 
 32622              		.loc 1 1209 2 view .LVU8756
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32623              		.loc 1 1211 2 view .LVU8757
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32624              		.loc 1 1211 5 is_stmt 0 view .LVU8758
 32625 0934 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32626 0936 002B     		cmp	r3, #0
 32627 0938 40F09181 		bne	.L2465
 32628              	.L2220:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32629              		.loc 1 1211 5 view .LVU8759
 32630              	.LBE4172:
 32631              	.LBE4171:
4036:src/xeq.c     **** 		setlastX();
 32632              		.loc 1 4036 3 is_stmt 1 view .LVU8760
 32633              	.LBB4174:
 32634              	.LBI4174:
 765:src/xeq.c     ****     State2.state_lift = 0;
 32635              		.loc 1 765 13 view .LVU8761
 32636              	.LBB4175:
 766:src/xeq.c     **** }
 32637              		.loc 1 766 5 view .LVU8762
 766:src/xeq.c     **** }
 32638              		.loc 1 766 23 is_stmt 0 view .LVU8763
ARM GAS  /tmp/ccaPnj5t.s 			page 825


 32639 093c E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32640              	.LBE4175:
 32641              	.LBE4174:
 32642              	.LBB4178:
 32643              	.LBB4179:
 787:src/xeq.c     **** }
 32644              		.loc 1 787 2 view .LVU8764
 32645 093e 6421     		movs	r1, #100
 32646              	.LBE4179:
 32647              	.LBE4178:
 32648              	.LBB4182:
 32649              	.LBB4176:
 766:src/xeq.c     **** }
 32650              		.loc 1 766 23 view .LVU8765
 32651 0940 6FF38613 		bfc	r3, #6, #1
 32652              	.LBE4176:
 32653              	.LBE4182:
 32654              	.LBB4183:
 32655              	.LBB4180:
 787:src/xeq.c     **** }
 32656              		.loc 1 787 2 view .LVU8766
 32657 0944 6C20     		movs	r0, #108
 32658              	.LBE4180:
 32659              	.LBE4183:
 32660              	.LBB4184:
 32661              	.LBB4177:
 766:src/xeq.c     **** }
 32662              		.loc 1 766 23 view .LVU8767
 32663 0946 E375     		strb	r3, [r4, #23]
 32664              	.LBE4177:
 32665              	.LBE4184:
4037:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
 32666              		.loc 1 4037 3 is_stmt 1 view .LVU8768
 32667              	.LBB4185:
 32668              	.LBI4178:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32669              		.loc 1 786 6 view .LVU8769
 32670              	.LBB4181:
 787:src/xeq.c     **** }
 32671              		.loc 1 787 2 view .LVU8770
 32672 0948 FFF7FEFF 		bl	copyreg_n
 32673              	.LVL2533:
 32674              	.LBE4181:
 32675              	.LBE4185:
4038:src/xeq.c     **** 			sigma_plus();
 32676              		.loc 1 4038 3 view .LVU8771
4038:src/xeq.c     **** 			sigma_plus();
 32677              		.loc 1 4038 6 is_stmt 0 view .LVU8772
 32678 094c BAF1150F 		cmp	r10, #21
 32679 0950 00F08281 		beq	.L2466
4041:src/xeq.c     **** 		sigma_val(OP_sigmaN);
 32680              		.loc 1 4041 4 is_stmt 1 view .LVU8773
 32681 0954 FFF7FEFF 		bl	sigma_minus
 32682              	.LVL2534:
 32683              	.L2222:
4042:src/xeq.c     **** 		break;
 32684              		.loc 1 4042 3 view .LVU8774
ARM GAS  /tmp/ccaPnj5t.s 			page 826


 32685 0958 9B4B     		ldr	r3, .L2482
 32686 095a 0593     		str	r3, [sp, #20]
 32687 095c 1D20     		movs	r0, #29
 32688 095e FFF7FEFF 		bl	sigma_val
 32689              	.LVL2535:
4043:src/xeq.c     **** 
 32690              		.loc 1 4043 3 view .LVU8775
 32691 0962 059B     		ldr	r3, [sp, #20]
 32692 0964 1A68     		ldr	r2, [r3]
 32693 0966 0CE4     		b	.L2153
 32694              	.L2201:
4023:src/xeq.c     **** 		lift();
 32695              		.loc 1 4023 3 view .LVU8776
 32696              	.LBB4186:
 32697              	.LBI4186:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 32698              		.loc 1 1208 6 view .LVU8777
 32699              	.LBB4187:
1209:src/xeq.c     **** 
 32700              		.loc 1 1209 2 view .LVU8778
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32701              		.loc 1 1211 2 view .LVU8779
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32702              		.loc 1 1211 5 is_stmt 0 view .LVU8780
 32703 0968 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32704 096a 002B     		cmp	r3, #0
 32705 096c 40F05681 		bne	.L2467
 32706              	.L2217:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32707              		.loc 1 1211 5 view .LVU8781
 32708              	.LBE4187:
 32709              	.LBE4186:
4024:src/xeq.c     **** 		clr_lift();
 32710              		.loc 1 4024 3 is_stmt 1 view .LVU8782
 32711 0970 FFF7FEFF 		bl	lift
 32712              	.LVL2536:
4025:src/xeq.c     **** #endif
 32713              		.loc 1 4025 3 view .LVU8783
 32714              	.LBB4189:
 32715              	.LBI4189:
 765:src/xeq.c     ****     State2.state_lift = 0;
 32716              		.loc 1 765 13 view .LVU8784
 32717              	.LBB4190:
 766:src/xeq.c     **** }
 32718              		.loc 1 766 5 view .LVU8785
 766:src/xeq.c     **** }
 32719              		.loc 1 766 23 is_stmt 0 view .LVU8786
 32720 0974 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 32721 0976 944B     		ldr	r3, .L2482
 32722 0978 6FF38612 		bfc	r2, #6, #1
 32723 097c E275     		strb	r2, [r4, #23]
 32724 097e 1A68     		ldr	r2, [r3]
 767:src/xeq.c     **** 
 32725              		.loc 1 767 1 view .LVU8787
 32726 0980 FFF7FFBB 		b	.L2153
 32727              	.L2197:
 767:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 827


 32728              		.loc 1 767 1 view .LVU8788
 32729              	.LBE4190:
 32730              	.LBE4189:
3908:src/xeq.c     **** 			break;
 32731              		.loc 1 3908 3 is_stmt 1 view .LVU8789
3908:src/xeq.c     **** 			break;
 32732              		.loc 1 3908 7 is_stmt 0 view .LVU8790
 32733 0984 3B68     		ldr	r3, [r7]
 32734 0986 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3908:src/xeq.c     **** 			break;
 32735              		.loc 1 3908 6 view .LVU8791
 32736 098a D807     		lsls	r0, r3, #31
 32737 098c 3FF563AE 		bmi	.L2150
3911:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32738              		.loc 1 3911 3 is_stmt 1 view .LVU8792
3911:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32739              		.loc 1 3911 7 is_stmt 0 view .LVU8793
 32740 0990 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
3911:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32741              		.loc 1 3911 6 view .LVU8794
 32742 0992 012B     		cmp	r3, #1
 32743 0994 3FF65FAE 		bhi	.L2150
3911:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32744              		.loc 1 3911 22 view .LVU8795
 32745 0998 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 32746 099a 002A     		cmp	r2, #0
 32747 099c 7FF45BAE 		bne	.L2150
3911:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32748              		.loc 1 3911 54 view .LVU8796
 32749 09a0 002B     		cmp	r3, #0
3911:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32750              		.loc 1 3911 40 view .LVU8797
 32751 09a2 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3911:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32752              		.loc 1 3911 54 view .LVU8798
 32753 09a4 0CBF     		ite	eq
 32754 09a6 0C22     		moveq	r2, #12
 32755 09a8 0D22     		movne	r2, #13
3911:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32756              		.loc 1 3911 37 view .LVU8799
 32757 09aa 9A42     		cmp	r2, r3
 32758 09ac FFF653AE 		blt	.L2150
3912:src/xeq.c     **** #else
 32759              		.loc 1 3912 4 is_stmt 1 view .LVU8800
3912:src/xeq.c     **** #else
 32760              		.loc 1 3912 7 is_stmt 0 view .LVU8801
 32761 09b0 002B     		cmp	r3, #0
 32762 09b2 00F0A181 		beq	.L2204
3912:src/xeq.c     **** #else
 32763              		.loc 1 3912 37 view .LVU8802
 32764 09b6 2344     		add	r3, r3, r4
3912:src/xeq.c     **** #else
 32765              		.loc 1 3912 27 view .LVU8803
 32766 09b8 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 32767 09ba 2D2B     		cmp	r3, #45
 32768 09bc 00F09C81 		beq	.L2204
 32769              	.L2205:
ARM GAS  /tmp/ccaPnj5t.s 			page 828


3923:src/xeq.c     **** 			append_cmdline('.');
 32770              		.loc 1 3923 4 is_stmt 1 view .LVU8804
 32771              	.LBB4191:
 32772              	.LBB4192:
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32773              		.loc 1 2621 10 is_stmt 0 view .LVU8805
 32774 09c0 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32775              	.LBE4192:
 32776              	.LBE4191:
3923:src/xeq.c     **** 			append_cmdline('.');
 32777              		.loc 1 3923 14 view .LVU8806
 32778 09c2 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 32779              	.LBB4196:
 32780              	.LBB4193:
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32781              		.loc 1 2621 23 view .LVU8807
 32782 09c4 5A1C     		adds	r2, r3, #1
 32783 09c6 D2B2     		uxtb	r2, r2
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32784              		.loc 1 2621 27 view .LVU8808
 32785 09c8 2344     		add	r3, r3, r4
2622:src/xeq.c     **** }
 32786              		.loc 1 2622 25 view .LVU8809
 32787 09ca A018     		adds	r0, r4, r2
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32788              		.loc 1 2621 23 view .LVU8810
 32789 09cc 2277     		strb	r2, [r4, #28]
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32790              		.loc 1 2621 27 view .LVU8811
 32791 09ce 2E22     		movs	r2, #46
 32792 09d0 83F82020 		strb	r2, [r3, #32]
 32793 09d4 7C4B     		ldr	r3, .L2482
2622:src/xeq.c     **** }
 32794              		.loc 1 2622 25 view .LVU8812
 32795 09d6 0022     		movs	r2, #0
 32796              	.LBE4193:
 32797              	.LBE4196:
3923:src/xeq.c     **** 			append_cmdline('.');
 32798              		.loc 1 3923 14 view .LVU8813
 32799 09d8 0131     		adds	r1, r1, #1
 32800              	.LBB4197:
 32801              	.LBB4194:
2622:src/xeq.c     **** }
 32802              		.loc 1 2622 25 view .LVU8814
 32803 09da 80F82020 		strb	r2, [r0, #32]
 32804              	.LBE4194:
 32805              	.LBE4197:
3923:src/xeq.c     **** 			append_cmdline('.');
 32806              		.loc 1 3923 14 view .LVU8815
 32807 09de A177     		strb	r1, [r4, #30]
3924:src/xeq.c     **** 		}
 32808              		.loc 1 3924 4 is_stmt 1 view .LVU8816
 32809              	.LVL2537:
 32810              	.LBB4198:
 32811              	.LBI4191:
2620:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32812              		.loc 1 2620 13 view .LVU8817
ARM GAS  /tmp/ccaPnj5t.s 			page 829


 32813              	.LBB4195:
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32814              		.loc 1 2621 2 view .LVU8818
2622:src/xeq.c     **** }
 32815              		.loc 1 2622 2 view .LVU8819
 32816 09e0 1A68     		ldr	r2, [r3]
2623:src/xeq.c     **** 
 32817              		.loc 1 2623 1 is_stmt 0 view .LVU8820
 32818 09e2 FFF7CEBB 		b	.L2153
 32819              	.LVL2538:
 32820              	.L2199:
2623:src/xeq.c     **** 
 32821              		.loc 1 2623 1 view .LVU8821
 32822              	.LBE4195:
 32823              	.LBE4198:
3929:src/xeq.c     **** 			break;
 32824              		.loc 1 3929 3 is_stmt 1 view .LVU8822
 32825              	.LBB4199:
3937:src/xeq.c     **** #endif
 32826              		.loc 1 3937 4 view .LVU8823
3940:src/xeq.c     **** 				if (eex_pi) {
 32827              		.loc 1 3940 4 view .LVU8824
3940:src/xeq.c     **** 				if (eex_pi) {
 32828              		.loc 1 3940 7 is_stmt 0 view .LVU8825
 32829 09e6 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 32830 09e8 022B     		cmp	r3, #2
 32831 09ea 3FF434AE 		beq	.L2150
3955:src/xeq.c     **** 				break;
 32832              		.loc 1 3955 4 is_stmt 1 view .LVU8826
 32833              	.LBE4199:
3929:src/xeq.c     **** 			break;
 32834              		.loc 1 3929 7 is_stmt 0 view .LVU8827
 32835 09ee 3B68     		ldr	r3, [r7]
 32836              	.LBB4202:
3955:src/xeq.c     **** 				break;
 32837              		.loc 1 3955 7 view .LVU8828
 32838 09f0 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 32839              	.LBE4202:
3929:src/xeq.c     **** 			break;
 32840              		.loc 1 3929 7 view .LVU8829
 32841 09f2 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 32842 09f6 03F00103 		and	r3, r3, #1
 32843              	.LBB4203:
3955:src/xeq.c     **** 				break;
 32844              		.loc 1 3955 7 view .LVU8830
 32845 09fa 1343     		orrs	r3, r3, r2
 32846 09fc 7FF42BAE 		bne	.L2150
3955:src/xeq.c     **** 				break;
 32847              		.loc 1 3955 22 view .LVU8831
 32848 0a00 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3955:src/xeq.c     **** 				break;
 32849              		.loc 1 3955 19 view .LVU8832
 32850 0a02 122B     		cmp	r3, #18
 32851 0a04 3FF627AE 		bhi	.L2150
3957:src/xeq.c     **** 				// empty command line: enter pi
 32852              		.loc 1 3957 4 is_stmt 1 view .LVU8833
3968:src/xeq.c     **** 				digit(1);
ARM GAS  /tmp/ccaPnj5t.s 			page 830


 32853              		.loc 1 3968 4 view .LVU8834
3968:src/xeq.c     **** 				digit(1);
 32854              		.loc 1 3968 7 is_stmt 0 view .LVU8835
 32855 0a08 002B     		cmp	r3, #0
 32856 0a0a 00F07181 		beq	.L2468
 32857              	.L2206:
3970:src/xeq.c     **** 			append_cmdline('E');
 32858              		.loc 1 3970 4 is_stmt 1 view .LVU8836
3970:src/xeq.c     **** 			append_cmdline('E');
 32859              		.loc 1 3970 17 is_stmt 0 view .LVU8837
 32860 0a0e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3970:src/xeq.c     **** 			append_cmdline('E');
 32861              		.loc 1 3970 15 view .LVU8838
 32862 0a10 6377     		strb	r3, [r4, #29]
3971:src/xeq.c     **** 		}
 32863              		.loc 1 3971 4 is_stmt 1 view .LVU8839
 32864              	.LVL2539:
 32865              	.LBB4200:
 32866              	.LBI4200:
2620:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 32867              		.loc 1 2620 13 view .LVU8840
 32868              	.LBB4201:
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32869              		.loc 1 2621 2 view .LVU8841
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32870              		.loc 1 2621 23 is_stmt 0 view .LVU8842
 32871 0a12 591C     		adds	r1, r3, #1
 32872 0a14 C9B2     		uxtb	r1, r1
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32873              		.loc 1 2621 27 view .LVU8843
 32874 0a16 E218     		adds	r2, r4, r3
2622:src/xeq.c     **** }
 32875              		.loc 1 2622 25 view .LVU8844
 32876 0a18 6018     		adds	r0, r4, r1
 32877 0a1a 6B4B     		ldr	r3, .L2482
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32878              		.loc 1 2621 23 view .LVU8845
 32879 0a1c 2177     		strb	r1, [r4, #28]
2621:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32880              		.loc 1 2621 27 view .LVU8846
 32881 0a1e 4521     		movs	r1, #69
 32882 0a20 82F82010 		strb	r1, [r2, #32]
2622:src/xeq.c     **** }
 32883              		.loc 1 2622 2 is_stmt 1 view .LVU8847
2622:src/xeq.c     **** }
 32884              		.loc 1 2622 25 is_stmt 0 view .LVU8848
 32885 0a24 0022     		movs	r2, #0
 32886 0a26 80F82020 		strb	r2, [r0, #32]
 32887 0a2a 1A68     		ldr	r2, [r3]
2623:src/xeq.c     **** 
 32888              		.loc 1 2623 1 view .LVU8849
 32889 0a2c FFF7A9BB 		b	.L2153
 32890              	.LVL2540:
 32891              	.L2198:
2623:src/xeq.c     **** 
 32892              		.loc 1 2623 1 view .LVU8850
 32893              	.LBE4201:
ARM GAS  /tmp/ccaPnj5t.s 			page 831


 32894              	.LBE4200:
 32895              	.LBE4203:
3976:src/xeq.c     **** 			cmdlinechs();
 32896              		.loc 1 3976 3 is_stmt 1 view .LVU8851
3976:src/xeq.c     **** 			cmdlinechs();
 32897              		.loc 1 3976 7 is_stmt 0 view .LVU8852
 32898 0a30 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3976:src/xeq.c     **** 			cmdlinechs();
 32899              		.loc 1 3976 6 view .LVU8853
 32900 0a32 002A     		cmp	r2, #0
 32901 0a34 40F00381 		bne	.L2469
3978:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32902              		.loc 1 3978 8 is_stmt 1 view .LVU8854
3978:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32903              		.loc 1 3978 12 is_stmt 0 view .LVU8855
 32904 0a38 3B68     		ldr	r3, [r7]
 32905 0a3a 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3978:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 32906              		.loc 1 3978 11 view .LVU8856
 32907 0a3e D907     		lsls	r1, r3, #31
 32908 0a40 40F1EF80 		bpl	.L2211
3979:src/xeq.c     **** 			set_lift();
 32909              		.loc 1 3979 4 is_stmt 1 view .LVU8857
 32910              	.LBB4204:
 32911              	.LBI4204:
1424:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32912              		.loc 1 1424 15 view .LVU8858
 32913              	.LBB4205:
1425:src/xeq.c     **** }
 32914              		.loc 1 1425 2 view .LVU8859
1425:src/xeq.c     **** }
 32915              		.loc 1 1425 9 is_stmt 0 view .LVU8860
 32916 0a44 6420     		movs	r0, #100
 32917 0a46 FFF7FEFF 		bl	get_reg_n_int
 32918              	.LVL2541:
 32919              	.LBE4205:
 32920              	.LBE4204:
3979:src/xeq.c     **** 			set_lift();
 32921              		.loc 1 3979 4 view .LVU8861
 32922 0a4a FFF7FEFF 		bl	intChs
 32923              	.LVL2542:
 32924 0a4e FFF7FEFF 		bl	setX_int
 32925              	.LVL2543:
3980:src/xeq.c     **** 		} else {
 32926              		.loc 1 3980 4 is_stmt 1 view .LVU8862
 32927              	.LBB4206:
 32928              	.LBI4206:
 761:src/xeq.c     ****     State2.state_lift = 1;
 32929              		.loc 1 761 6 view .LVU8863
 32930              	.LBB4207:
 762:src/xeq.c     **** }
 32931              		.loc 1 762 5 view .LVU8864
 32932 0a52 FFF790BB 		b	.L2421
 32933              	.L2200:
 32934              	.LBE4207:
 32935              	.LBE4206:
3992:src/xeq.c     **** 			illegal(op);
ARM GAS  /tmp/ccaPnj5t.s 			page 832


 32936              		.loc 1 3992 3 view .LVU8865
3992:src/xeq.c     **** 			illegal(op);
 32937              		.loc 1 3992 7 is_stmt 0 view .LVU8866
 32938 0a56 DFF888A1 		ldr	r10, .L2482+24
 32939              	.LVL2544:
3992:src/xeq.c     **** 			illegal(op);
 32940              		.loc 1 3992 6 view .LVU8867
 32941 0a5a DAF80030 		ldr	r3, [r10]
 32942 0a5e 002B     		cmp	r3, #0
 32943 0a60 00F0C080 		beq	.L2212
3993:src/xeq.c     **** 		else if (CmdLineLength) {
 32944              		.loc 1 3993 4 is_stmt 1 view .LVU8868
3993:src/xeq.c     **** 		else if (CmdLineLength) {
 32945              		.loc 1 3993 4 view .LVU8869
 32946              	.LVL2545:
 32947              	.LBB4208:
 32948              	.LBI4208:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32949              		.loc 1 540 5 view .LVU8870
 32950              	.LBB4209:
 541:src/xeq.c     **** 		Error = e;
 32951              		.loc 1 541 2 view .LVU8871
 541:src/xeq.c     **** 		Error = e;
 32952              		.loc 1 541 12 is_stmt 0 view .LVU8872
 32953 0a64 584B     		ldr	r3, .L2482
 32954 0a66 1868     		ldr	r0, [r3]
 541:src/xeq.c     **** 		Error = e;
 32955              		.loc 1 541 5 view .LVU8873
 32956 0a68 0028     		cmp	r0, #0
 32957 0a6a 3FF4ACAB 		beq	.L2158
 32958 0a6e FFF7ACBB 		b	.L2283
 32959              	.LVL2546:
 32960              	.L2256:
 541:src/xeq.c     **** 		Error = e;
 32961              		.loc 1 541 5 view .LVU8874
 32962              	.LBE4209:
 32963              	.LBE4208:
 32964              	.LBE4227:
 32965              	.LBE4553:
 32966              	.LBB4554:
 32967              	.LBB4446:
4829:src/xeq.c     **** 		}
 32968              		.loc 1 4829 5 is_stmt 1 view .LVU8875
 32969              	.LBB4428:
 32970              	.LBI4428:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 32971              		.loc 1 569 6 view .LVU8876
 32972              	.LBE4428:
 32973              	.LBE4446:
 32974              	.LBE4554:
 570:src/xeq.c     **** }
 32975              		.loc 1 570 2 view .LVU8877
 32976              	.LBB4555:
 32977              	.LBB4447:
 32978              	.LBB4431:
 32979              	.LBB4429:
 32980              	.LBI4429:
ARM GAS  /tmp/ccaPnj5t.s 			page 833


 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32981              		.loc 1 540 5 view .LVU8878
 32982              	.LBB4430:
 541:src/xeq.c     **** 		Error = e;
 32983              		.loc 1 541 2 view .LVU8879
 541:src/xeq.c     **** 		Error = e;
 32984              		.loc 1 541 12 is_stmt 0 view .LVU8880
 32985 0a72 554B     		ldr	r3, .L2482
 32986 0a74 1868     		ldr	r0, [r3]
 541:src/xeq.c     **** 		Error = e;
 32987              		.loc 1 541 5 view .LVU8881
 32988 0a76 0028     		cmp	r0, #0
 32989 0a78 7FF4D7AD 		bne	.L2430
 32990              	.LVL2547:
 541:src/xeq.c     **** 		Error = e;
 32991              		.loc 1 541 5 view .LVU8882
 32992              	.LBE4430:
 32993              	.LBE4429:
 32994              	.LBE4431:
 32995              	.LBE4447:
 32996              	.LBE4555:
 32997              	.LBB4556:
 32998              	.LBB4228:
 32999              	.LBB4210:
 33000              	.LBB4211:
 33001              	.LBB4212:
 33002              	.LBB4213:
 33003              	.LBI4213:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33004              		.loc 1 540 5 is_stmt 1 view .LVU8883
 33005              	.LBB4214:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 33006              		.loc 1 542 3 view .LVU8884
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 33007              		.loc 1 542 9 is_stmt 0 view .LVU8885
 33008 0a7c 0D20     		movs	r0, #13
 33009 0a7e DFF860A1 		ldr	r10, .L2482+24
 33010 0a82 1860     		str	r0, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 33011              		.loc 1 543 3 is_stmt 1 view .LVU8886
 33012 0a84 FFF7A1BB 		b	.L2283
 33013              	.LVL2548:
 33014              	.L2266:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 33015              		.loc 1 543 3 is_stmt 0 view .LVU8887
 33016              	.LBE4214:
 33017              	.LBE4213:
 33018              	.LBE4212:
 33019              	.LBE4211:
 33020              	.LBE4210:
 33021              	.LBE4228:
 33022              	.LBE4556:
 33023              	.LBB4557:
 33024              	.LBB4530:
4781:src/xeq.c     **** 	} else
 33025              		.loc 1 4781 4 is_stmt 1 view .LVU8888
 33026              	.LBB4519:
ARM GAS  /tmp/ccaPnj5t.s 			page 834


 33027              	.LBI4519:
 569:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33028              		.loc 1 569 6 view .LVU8889
 33029              	.LBE4519:
 33030              	.LBE4530:
 33031              	.LBE4557:
 570:src/xeq.c     **** }
 33032              		.loc 1 570 2 view .LVU8890
 33033              	.LBB4558:
 33034              	.LBB4531:
 33035              	.LBB4524:
 33036              	.LBB4520:
 33037              	.LBI4520:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33038              		.loc 1 540 5 view .LVU8891
 33039              	.LBB4521:
 541:src/xeq.c     **** 		Error = e;
 33040              		.loc 1 541 2 view .LVU8892
 541:src/xeq.c     **** 		Error = e;
 33041              		.loc 1 541 12 is_stmt 0 view .LVU8893
 33042 0a88 4F4B     		ldr	r3, .L2482
 33043 0a8a 1A68     		ldr	r2, [r3]
 541:src/xeq.c     **** 		Error = e;
 33044              		.loc 1 541 5 view .LVU8894
 33045 0a8c 002A     		cmp	r2, #0
 33046 0a8e 7FF445AB 		bne	.L2164
 33047              	.LVL2549:
 33048              	.LBB4522:
 33049              	.LBI4522:
 540:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33050              		.loc 1 540 5 is_stmt 1 view .LVU8895
 33051              	.LBB4523:
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 33052              		.loc 1 542 3 view .LVU8896
 542:src/xeq.c     **** 		if (e == ERR_NONE) {
 33053              		.loc 1 542 9 is_stmt 0 view .LVU8897
 33054 0a92 0D22     		movs	r2, #13
 33055 0a94 1A60     		str	r2, [r3]
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 33056              		.loc 1 543 3 is_stmt 1 view .LVU8898
 33057              	.LVL2550:
 543:src/xeq.c     **** 			error_message(e); // "Running Program"
 33058              		.loc 1 543 3 is_stmt 0 view .LVU8899
 33059              	.LBE4523:
 33060              	.LBE4522:
 33061              	.LBE4521:
 33062              	.LBE4520:
 33063              	.LBE4524:
4783:src/xeq.c     **** }
 33064              		.loc 1 4783 3 is_stmt 1 view .LVU8900
 33065              	.LBE4531:
 33066              	.LBE4558:
5352:src/xeq.c     **** 		}
 33067              		.loc 1 5352 12 view .LVU8901
5362:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 33068              		.loc 1 5362 2 view .LVU8902
 33069 0a96 FFF741BB 		b	.L2164
ARM GAS  /tmp/ccaPnj5t.s 			page 835


 33070              	.LVL2551:
 33071              	.L2274:
5386:src/xeq.c     **** 						// Need space for double precision stack
 33072              		.loc 1 5386 34 is_stmt 0 discriminator 1 view .LVU8903
 33073 0a9a 9CF8CF17 		ldrb	r1, [ip, #1999]	@ zero_extendqisi2
 33074 0a9e 0B29     		cmp	r1, #11
 33075 0aa0 75D9     		bls	.L2276
5390:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33076              		.loc 1 5390 6 is_stmt 1 view .LVU8904
5390:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33077              		.loc 1 5390 20 is_stmt 0 view .LVU8905
 33078 0aa2 68F3C712 		bfi	r2, r8, #7, #1
 33079 0aa6 6A70     		strb	r2, [r5, #1]
5391:src/xeq.c     **** 						UState.mode_double = 1;
 33080              		.loc 1 5391 6 is_stmt 1 view .LVU8906
 33081 0aa8 1FE6     		b	.L2275
 33082              	.LVL2552:
 33083              	.L2245:
 33084              	.LBB4559:
 33085              	.LBB4280:
4738:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33086              		.loc 1 4738 4 view .LVU8907
4738:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33087              		.loc 1 4738 10 is_stmt 0 view .LVU8908
 33088 0aaa 4A4B     		ldr	r3, .L2482+12
 33089 0aac 05EB4505 		add	r5, r5, r5, lsl #1
 33090              	.LVL2553:
4738:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33091              		.loc 1 4738 10 view .LVU8909
 33092 0ab0 53F83550 		ldr	r5, [r3, r5, lsl #3]
4738:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33093              		.loc 1 4738 7 view .LVU8910
 33094 0ab4 002D     		cmp	r5, #0
 33095 0ab6 DCD0     		beq	.L2256
 33096              	.LBB4257:
4739:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33097              		.loc 1 4739 5 is_stmt 1 view .LVU8911
 33098              	.LVL2554:
4740:src/xeq.c     **** 					return;
 33099              		.loc 1 4740 5 view .LVU8912
4740:src/xeq.c     **** 					return;
 33100              		.loc 1 4740 9 is_stmt 0 view .LVU8913
 33101 0ab8 2846     		mov	r0, r5
 33102 0aba FFF7FEFF 		bl	dispatch_xrom
 33103              	.LVL2555:
4740:src/xeq.c     **** 					return;
 33104              		.loc 1 4740 8 view .LVU8914
 33105 0abe 0028     		cmp	r0, #0
 33106 0ac0 7FF4C9AD 		bne	.L2150
 33107              	.LBB4258:
4743:src/xeq.c     **** 					getXY(&x, &y);
 33108              		.loc 1 4743 6 is_stmt 1 view .LVU8915
4744:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
 33109              		.loc 1 4744 6 view .LVU8916
 33110              	.LVL2556:
 33111              	.LBB4259:
 33112              	.LBI4259:
ARM GAS  /tmp/ccaPnj5t.s 			page 836


 848:src/xeq.c     **** 	getX(x);
 33113              		.loc 1 848 6 view .LVU8917
 33114              	.LBE4259:
 33115              	.LBE4258:
 33116              	.LBE4257:
 33117              	.LBE4280:
 33118              	.LBE4559:
 849:src/xeq.c     **** 	getY(y);
 33119              		.loc 1 849 2 view .LVU8918
 33120              	.LBB4560:
 33121              	.LBB4281:
 33122              	.LBB4274:
 33123              	.LBB4271:
 33124              	.LBB4266:
 33125              	.LBB4260:
 33126              	.LBI4260:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33127              		.loc 1 818 12 view .LVU8919
 33128              	.LBB4261:
 819:src/xeq.c     **** }
 33129              		.loc 1 819 2 view .LVU8920
 819:src/xeq.c     **** }
 33130              		.loc 1 819 9 is_stmt 0 view .LVU8921
 33131 0ac4 6421     		movs	r1, #100
 33132 0ac6 27A8     		add	r0, sp, #156
 33133              	.LVL2557:
 819:src/xeq.c     **** }
 33134              		.loc 1 819 9 view .LVU8922
 33135 0ac8 FFF7FEFF 		bl	getRegister
 33136              	.LVL2558:
 819:src/xeq.c     **** }
 33137              		.loc 1 819 9 view .LVU8923
 33138              	.LBE4261:
 33139              	.LBE4260:
 33140              	.LBE4266:
 33141              	.LBE4271:
 33142              	.LBE4274:
 33143              	.LBE4281:
 33144              	.LBE4560:
 850:src/xeq.c     **** }
 33145              		.loc 1 850 2 is_stmt 1 view .LVU8924
 33146              	.LBB4561:
 33147              	.LBB4282:
 33148              	.LBB4275:
 33149              	.LBB4272:
 33150              	.LBB4267:
 33151              	.LBB4262:
 33152              	.LBI4262:
 826:src/xeq.c     **** 	getRegister(y, regY_idx);
 33153              		.loc 1 826 6 view .LVU8925
 33154              	.LBB4263:
 827:src/xeq.c     **** }
 33155              		.loc 1 827 2 view .LVU8926
 33156              	.LBE4263:
 33157              	.LBE4262:
 33158              	.LBE4267:
4745:src/xeq.c     **** 						set_NaN(&r);
ARM GAS  /tmp/ccaPnj5t.s 			page 837


 33159              		.loc 1 4745 18 is_stmt 0 view .LVU8927
 33160 0acc 0DF1E40A 		add	r10, sp, #228
 33161              	.LBB4268:
 33162              	.LBB4265:
 33163              	.LBB4264:
 827:src/xeq.c     **** }
 33164              		.loc 1 827 2 view .LVU8928
 33165 0ad0 6521     		movs	r1, #101
 33166 0ad2 30A8     		add	r0, sp, #192
 33167              	.LVL2559:
 827:src/xeq.c     **** }
 33168              		.loc 1 827 2 view .LVU8929
 33169 0ad4 FFF7FEFF 		bl	getRegister
 33170              	.LVL2560:
 827:src/xeq.c     **** }
 33171              		.loc 1 827 2 view .LVU8930
 33172              	.LBE4264:
 33173              	.LBE4265:
 33174              	.LBE4268:
4745:src/xeq.c     **** 						set_NaN(&r);
 33175              		.loc 1 4745 6 is_stmt 1 view .LVU8931
4745:src/xeq.c     **** 						set_NaN(&r);
 33176              		.loc 1 4745 18 is_stmt 0 view .LVU8932
 33177 0ad8 27AA     		add	r2, sp, #156
 33178 0ada 30A9     		add	r1, sp, #192
 33179 0adc 5046     		mov	r0, r10
 33180 0ade A847     		blx	r5
 33181              	.LVL2561:
4745:src/xeq.c     **** 						set_NaN(&r);
 33182              		.loc 1 4745 9 view .LVU8933
 33183 0ae0 0028     		cmp	r0, #0
 33184 0ae2 00F0C380 		beq	.L2470
 33185              	.L2250:
4747:src/xeq.c     **** 					lower();
 33186              		.loc 1 4747 6 is_stmt 1 view .LVU8934
 33187              	.LBB4269:
 33188              	.LBI4269:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33189              		.loc 1 786 6 view .LVU8935
 33190              	.LBB4270:
 787:src/xeq.c     **** }
 33191              		.loc 1 787 2 view .LVU8936
 33192 0ae6 384B     		ldr	r3, .L2482
 33193 0ae8 0593     		str	r3, [sp, #20]
 33194 0aea 6421     		movs	r1, #100
 33195 0aec 6C20     		movs	r0, #108
 33196 0aee FFF7FEFF 		bl	copyreg_n
 33197              	.LVL2562:
 33198              	.LBE4270:
 33199              	.LBE4269:
4748:src/xeq.c     **** 					setX(&r);
 33200              		.loc 1 4748 6 view .LVU8937
 33201              	.L2425:
4748:src/xeq.c     **** 					setX(&r);
 33202              		.loc 1 4748 6 is_stmt 0 view .LVU8938
 33203              	.LBE4272:
 33204              	.LBE4275:
ARM GAS  /tmp/ccaPnj5t.s 			page 838


 33205              	.LBE4282:
 33206              	.LBE4561:
 33207              	.LBB4562:
 33208              	.LBB4448:
 33209              	.LBB4432:
 33210              	.LBB4433:
4825:src/xeq.c     **** 					setX(&r);
 33211              		.loc 1 4825 6 is_stmt 1 view .LVU8939
 33212 0af2 FFF7FEFF 		bl	lower
 33213              	.LVL2563:
 33214              	.L2427:
4826:src/xeq.c     **** 				}
 33215              		.loc 1 4826 6 view .LVU8940
 33216              	.LBB4434:
 33217              	.LBI4434:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 33218              		.loc 1 822 6 view .LVU8941
 33219              	.LBB4435:
 823:src/xeq.c     **** }
 33220              		.loc 1 823 2 view .LVU8942
 33221 0af6 5146     		mov	r1, r10
 33222 0af8 6420     		movs	r0, #100
 33223 0afa FFF7FEFF 		bl	setRegister
 33224              	.LVL2564:
 823:src/xeq.c     **** }
 33225              		.loc 1 823 2 is_stmt 0 view .LVU8943
 33226 0afe 059B     		ldr	r3, [sp, #20]
 33227 0b00 1A68     		ldr	r2, [r3]
 33228              	.LBE4435:
 33229              	.LBE4434:
 33230              	.LBE4433:
 33231              	.LBE4432:
 33232 0b02 FFF73EBB 		b	.L2153
 33233              	.LVL2565:
 33234              	.L2253:
4814:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33235              		.loc 1 4814 4 is_stmt 1 view .LVU8944
4814:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33236              		.loc 1 4814 10 is_stmt 0 view .LVU8945
 33237 0b06 344B     		ldr	r3, .L2482+16
 33238 0b08 05EB8505 		add	r5, r5, r5, lsl #2
 33239              	.LVL2566:
4814:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33240              		.loc 1 4814 10 view .LVU8946
 33241 0b0c 53F82550 		ldr	r5, [r3, r5, lsl #2]
4814:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33242              		.loc 1 4814 7 view .LVU8947
 33243 0b10 002D     		cmp	r5, #0
 33244 0b12 AED0     		beq	.L2256
 33245              	.LBB4440:
4815:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33246              		.loc 1 4815 5 is_stmt 1 view .LVU8948
 33247              	.LVL2567:
4816:src/xeq.c     **** 					return;
 33248              		.loc 1 4816 5 view .LVU8949
4816:src/xeq.c     **** 					return;
 33249              		.loc 1 4816 9 is_stmt 0 view .LVU8950
ARM GAS  /tmp/ccaPnj5t.s 			page 839


 33250 0b14 2846     		mov	r0, r5
 33251 0b16 FFF7FEFF 		bl	dispatch_xrom
 33252              	.LVL2568:
4816:src/xeq.c     **** 					return;
 33253              		.loc 1 4816 8 view .LVU8951
 33254 0b1a 0028     		cmp	r0, #0
 33255 0b1c 7FF49BAD 		bne	.L2150
 33256              	.LBB4438:
4819:src/xeq.c     **** 					getXYZ(&x, &y, &z);
 33257              		.loc 1 4819 6 is_stmt 1 view .LVU8952
4820:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 33258              		.loc 1 4820 6 view .LVU8953
 33259 0b20 30AA     		add	r2, sp, #192
 33260 0b22 27A9     		add	r1, sp, #156
 33261 0b24 1EA8     		add	r0, sp, #120
4821:src/xeq.c     **** 						set_NaN(&r);
 33262              		.loc 1 4821 18 is_stmt 0 view .LVU8954
 33263 0b26 0DF1E40A 		add	r10, sp, #228
4820:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 33264              		.loc 1 4820 6 view .LVU8955
 33265 0b2a FFF7FEFF 		bl	getXYZ
 33266              	.LVL2569:
4821:src/xeq.c     **** 						set_NaN(&r);
 33267              		.loc 1 4821 6 is_stmt 1 view .LVU8956
4821:src/xeq.c     **** 						set_NaN(&r);
 33268              		.loc 1 4821 18 is_stmt 0 view .LVU8957
 33269 0b2e 1EAB     		add	r3, sp, #120
 33270 0b30 27AA     		add	r2, sp, #156
 33271 0b32 30A9     		add	r1, sp, #192
 33272 0b34 5046     		mov	r0, r10
 33273 0b36 A847     		blx	r5
 33274              	.LVL2570:
4821:src/xeq.c     **** 						set_NaN(&r);
 33275              		.loc 1 4821 9 view .LVU8958
 33276 0b38 0028     		cmp	r0, #0
 33277 0b3a 00F09B80 		beq	.L2471
 33278              	.L2258:
4823:src/xeq.c     **** 					lower();
 33279              		.loc 1 4823 6 is_stmt 1 view .LVU8959
 33280              	.LBB4436:
 33281              	.LBI4436:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33282              		.loc 1 786 6 view .LVU8960
 33283              	.LBB4437:
 787:src/xeq.c     **** }
 33284              		.loc 1 787 2 view .LVU8961
 33285 0b3e 224B     		ldr	r3, .L2482
 33286 0b40 0593     		str	r3, [sp, #20]
 33287 0b42 6421     		movs	r1, #100
 33288 0b44 6C20     		movs	r0, #108
 33289 0b46 FFF7FEFF 		bl	copyreg_n
 33290              	.LVL2571:
 33291              	.LBE4437:
 33292              	.LBE4436:
4824:src/xeq.c     **** 					lower();
 33293              		.loc 1 4824 6 view .LVU8962
 33294 0b4a FFF7FEFF 		bl	lower
ARM GAS  /tmp/ccaPnj5t.s 			page 840


 33295              	.LVL2572:
 33296 0b4e D0E7     		b	.L2425
 33297              	.LVL2573:
 33298              	.L2237:
4824:src/xeq.c     **** 					lower();
 33299              		.loc 1 4824 6 is_stmt 0 view .LVU8963
 33300              	.LBE4438:
 33301              	.LBE4440:
 33302              	.LBE4448:
 33303              	.LBE4562:
 33304              	.LBB4563:
 33305              	.LBB4395:
4662:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33306              		.loc 1 4662 4 is_stmt 1 view .LVU8964
4662:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33307              		.loc 1 4662 10 is_stmt 0 view .LVU8965
 33308 0b50 224B     		ldr	r3, .L2482+20
 33309 0b52 05EB4505 		add	r5, r5, r5, lsl #1
 33310              	.LVL2574:
4662:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33311              		.loc 1 4662 10 view .LVU8966
 33312 0b56 53F83550 		ldr	r5, [r3, r5, lsl #3]
4662:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33313              		.loc 1 4662 7 view .LVU8967
 33314 0b5a 002D     		cmp	r5, #0
 33315 0b5c 89D0     		beq	.L2256
 33316              	.LBB4380:
4663:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33317              		.loc 1 4663 5 is_stmt 1 view .LVU8968
 33318              	.LVL2575:
4664:src/xeq.c     **** 					return;
 33319              		.loc 1 4664 5 view .LVU8969
4664:src/xeq.c     **** 					return;
 33320              		.loc 1 4664 9 is_stmt 0 view .LVU8970
 33321 0b5e 2846     		mov	r0, r5
 33322 0b60 FFF7FEFF 		bl	dispatch_xrom
 33323              	.LVL2576:
4664:src/xeq.c     **** 					return;
 33324              		.loc 1 4664 8 view .LVU8971
 33325 0b64 0028     		cmp	r0, #0
 33326 0b66 7FF476AD 		bne	.L2150
 33327              	.LBB4381:
4667:src/xeq.c     **** 					getX(&x);
 33328              		.loc 1 4667 6 is_stmt 1 view .LVU8972
4668:src/xeq.c     **** 					if (NULL == fp(&r, &x))
 33329              		.loc 1 4668 6 view .LVU8973
 33330              	.LVL2577:
 33331              	.LBB4382:
 33332              	.LBI4382:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33333              		.loc 1 818 12 view .LVU8974
 33334              	.LBB4383:
 819:src/xeq.c     **** }
 33335              		.loc 1 819 2 view .LVU8975
 819:src/xeq.c     **** }
 33336              		.loc 1 819 9 is_stmt 0 view .LVU8976
 33337 0b6a 6421     		movs	r1, #100
ARM GAS  /tmp/ccaPnj5t.s 			page 841


 33338 0b6c 30A8     		add	r0, sp, #192
 33339              	.LVL2578:
 819:src/xeq.c     **** }
 33340              		.loc 1 819 9 view .LVU8977
 33341              	.LBE4383:
 33342              	.LBE4382:
4669:src/xeq.c     **** 						set_NaN(&r);
 33343              		.loc 1 4669 18 view .LVU8978
 33344 0b6e 0DF1E40A 		add	r10, sp, #228
 33345              	.LBB4385:
 33346              	.LBB4384:
 819:src/xeq.c     **** }
 33347              		.loc 1 819 9 view .LVU8979
 33348 0b72 FFF7FEFF 		bl	getRegister
 33349              	.LVL2579:
 819:src/xeq.c     **** }
 33350              		.loc 1 819 9 view .LVU8980
 33351              	.LBE4384:
 33352              	.LBE4385:
4669:src/xeq.c     **** 						set_NaN(&r);
 33353              		.loc 1 4669 6 is_stmt 1 view .LVU8981
4669:src/xeq.c     **** 						set_NaN(&r);
 33354              		.loc 1 4669 18 is_stmt 0 view .LVU8982
 33355 0b76 30A9     		add	r1, sp, #192
 33356 0b78 5046     		mov	r0, r10
 33357 0b7a A847     		blx	r5
 33358              	.LVL2580:
4669:src/xeq.c     **** 						set_NaN(&r);
 33359              		.loc 1 4669 9 view .LVU8983
 33360 0b7c 0028     		cmp	r0, #0
 33361 0b7e 71D0     		beq	.L2472
 33362              	.L2242:
4671:src/xeq.c     **** 					setX(&r);
 33363              		.loc 1 4671 6 is_stmt 1 view .LVU8984
 33364              	.LBB4386:
 33365              	.LBI4386:
 786:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33366              		.loc 1 786 6 view .LVU8985
 33367              	.LBB4387:
 787:src/xeq.c     **** }
 33368              		.loc 1 787 2 view .LVU8986
 33369 0b80 114B     		ldr	r3, .L2482
 33370 0b82 0593     		str	r3, [sp, #20]
 33371 0b84 6421     		movs	r1, #100
 33372 0b86 6C20     		movs	r0, #108
 33373 0b88 FFF7FEFF 		bl	copyreg_n
 33374              	.LVL2581:
 33375              	.LBE4387:
 33376              	.LBE4386:
4672:src/xeq.c     **** 				}
 33377              		.loc 1 4672 6 view .LVU8987
 33378              	.LBB4388:
 33379              	.LBI4388:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 33380              		.loc 1 822 6 view .LVU8988
 33381              	.LBB4389:
 823:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 842


 33382              		.loc 1 823 2 view .LVU8989
 33383 0b8c B3E7     		b	.L2427
 33384              	.LVL2582:
 33385              	.L2276:
 823:src/xeq.c     **** }
 33386              		.loc 1 823 2 is_stmt 0 view .LVU8990
 33387              	.LBE4389:
 33388              	.LBE4388:
 33389              	.LBE4381:
 33390              	.LBE4380:
 33391              	.LBE4395:
 33392              	.LBE4563:
5388:src/xeq.c     **** 					}
 33393              		.loc 1 5388 7 is_stmt 1 view .LVU8991
 33394 0b8e 7D21     		movs	r1, #125
 33395 0b90 0C20     		movs	r0, #12
 33396 0b92 0393     		str	r3, [sp, #12]
 33397 0b94 FFF7FEFF 		bl	cmdregs
 33398              	.LVL2583:
 33399 0b98 039B     		ldr	r3, [sp, #12]
5390:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33400              		.loc 1 5390 20 is_stmt 0 view .LVU8992
 33401 0b9a 6A78     		ldrb	r2, [r5, #1]	@ zero_extendqisi2
 33402 0b9c 1968     		ldr	r1, [r3]
5390:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33403              		.loc 1 5390 6 is_stmt 1 view .LVU8993
5390:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33404              		.loc 1 5390 20 is_stmt 0 view .LVU8994
 33405 0b9e 68F3C712 		bfi	r2, r8, #7, #1
 33406 0ba2 6A70     		strb	r2, [r5, #1]
5391:src/xeq.c     **** 						UState.mode_double = 1;
 33407              		.loc 1 5391 6 is_stmt 1 view .LVU8995
5391:src/xeq.c     **** 						UState.mode_double = 1;
 33408              		.loc 1 5391 9 is_stmt 0 view .LVU8996
 33409 0ba4 0029     		cmp	r1, #0
 33410 0ba6 3FF4A0AD 		beq	.L2275
5396:src/xeq.c     **** 				}
 33411              		.loc 1 5396 7 is_stmt 1 view .LVU8997
5396:src/xeq.c     **** 				}
 33412              		.loc 1 5396 13 is_stmt 0 view .LVU8998
 33413 0baa C3F80080 		str	r8, [r3]
 33414 0bae FFF790BB 		b	.L2273
 33415              	.LVL2584:
 33416              	.L2457:
 33417              	.LBB4564:
 33418              	.LBB4355:
 33419              	.LBB4350:
 33420              	.LBB4332:
 33421              	.LBB4331:
 743:src/xeq.c     **** }
 33422              		.loc 1 743 3 is_stmt 1 view .LVU8999
 33423 0bb2 FFF7FEFF 		bl	lift
 33424              	.LVL2585:
 33425              	.L2229:
 33426              	.LBE4331:
 33427              	.LBE4332:
4614:src/xeq.c     **** 				default:
ARM GAS  /tmp/ccaPnj5t.s 			page 843


 33428              		.loc 1 4614 13 view .LVU9000
 33429              	.LBB4333:
 33430              	.LBI4333:
 741:src/xeq.c     **** 	if (get_lift())
 33431              		.loc 1 741 6 view .LVU9001
 33432              	.LBB4334:
 742:src/xeq.c     **** 		lift();
 33433              		.loc 1 742 2 view .LVU9002
 33434              	.LBB4335:
 33435              	.LBI4335:
 737:src/xeq.c     **** 	return State2.state_lift;
 33436              		.loc 1 737 12 view .LVU9003
 33437              	.LBB4336:
 738:src/xeq.c     **** }
 33438              		.loc 1 738 2 view .LVU9004
 738:src/xeq.c     **** }
 33439              		.loc 1 738 15 is_stmt 0 view .LVU9005
 33440 0bb6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 33441              	.LBE4336:
 33442              	.LBE4335:
 742:src/xeq.c     **** 		lift();
 33443              		.loc 1 742 5 view .LVU9006
 33444 0bb8 5806     		lsls	r0, r3, #25
 33445 0bba 7FF5F2AB 		bpl	.L2230
 743:src/xeq.c     **** }
 33446              		.loc 1 743 3 is_stmt 1 view .LVU9007
 33447 0bbe FFF7FEFF 		bl	lift
 33448              	.LVL2586:
 33449 0bc2 FFF7EEBB 		b	.L2230
 33450              	.L2483:
 33451 0bc6 00BF     		.align	2
 33452              	.L2482:
 33453 0bc8 00000000 		.word	Error
 33454 0bcc 00000000 		.word	const_1
 33455 0bd0 00000000 		.word	const_0
 33456 0bd4 00000000 		.word	dyfuncs
 33457 0bd8 00000000 		.word	trifuncs
 33458 0bdc 00000000 		.word	monfuncs
 33459 0be0 00000000 		.word	Running
 33460              	.LVL2587:
 33461              	.L2212:
 743:src/xeq.c     **** }
 33462              		.loc 1 743 3 is_stmt 0 view .LVU9008
 33463              	.LBE4334:
 33464              	.LBE4333:
 33465              	.LBE4350:
 33466              	.LBE4355:
 33467              	.LBE4564:
 33468              	.LBB4565:
 33469              	.LBB4229:
3994:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33470              		.loc 1 3994 8 is_stmt 1 view .LVU9009
3994:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33471              		.loc 1 3994 12 is_stmt 0 view .LVU9010
 33472 0be4 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3994:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33473              		.loc 1 3994 11 view .LVU9011
ARM GAS  /tmp/ccaPnj5t.s 			page 844


 33474 0be6 002B     		cmp	r3, #0
 33475 0be8 5FD0     		beq	.L2213
3996:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33476              		.loc 1 3996 4 is_stmt 1 view .LVU9012
3996:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33477              		.loc 1 3996 7 is_stmt 0 view .LVU9013
 33478 0bea 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
3996:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33479              		.loc 1 3996 48 view .LVU9014
 33480 0bec 013B     		subs	r3, r3, #1
3996:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33481              		.loc 1 3996 7 view .LVU9015
 33482 0bee 22B1     		cbz	r2, .L2214
3996:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33483              		.loc 1 3996 34 view .LVU9016
 33484 0bf0 E118     		adds	r1, r4, r3
3996:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33485              		.loc 1 3996 24 view .LVU9017
 33486 0bf2 91F82020 		ldrb	r2, [r1, #32]	@ zero_extendqisi2
 33487 0bf6 442A     		cmp	r2, #68
 33488 0bf8 66D0     		beq	.L2473
 33489              	.L2214:
4001:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33490              		.loc 1 4001 4 is_stmt 1 view .LVU9018
4001:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33491              		.loc 1 4001 17 is_stmt 0 view .LVU9019
 33492 0bfa DBB2     		uxtb	r3, r3
4002:src/xeq.c     **** 				CmdLineEex = 0;
 33493              		.loc 1 4002 15 view .LVU9020
 33494 0bfc E218     		adds	r2, r4, r3
4001:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33495              		.loc 1 4001 17 view .LVU9021
 33496 0bfe 2377     		strb	r3, [r4, #28]
4002:src/xeq.c     **** 				CmdLineEex = 0;
 33497              		.loc 1 4002 4 is_stmt 1 view .LVU9022
4002:src/xeq.c     **** 				CmdLineEex = 0;
 33498              		.loc 1 4002 15 is_stmt 0 view .LVU9023
 33499 0c00 92F82030 		ldrb	r3, [r2, #32]	@ zero_extendqisi2
4002:src/xeq.c     **** 				CmdLineEex = 0;
 33500              		.loc 1 4002 7 view .LVU9024
 33501 0c04 452B     		cmp	r3, #69
 33502 0c06 59D0     		beq	.L2474
4004:src/xeq.c     **** 				CmdLineDot--;
 33503              		.loc 1 4004 9 is_stmt 1 view .LVU9025
4004:src/xeq.c     **** 				CmdLineDot--;
 33504              		.loc 1 4004 12 is_stmt 0 view .LVU9026
 33505 0c08 2E2B     		cmp	r3, #46
 33506 0c0a 7FF424AD 		bne	.L2150
4005:src/xeq.c     **** 		} else
 33507              		.loc 1 4005 5 is_stmt 1 view .LVU9027
4005:src/xeq.c     **** 		} else
 33508              		.loc 1 4005 15 is_stmt 0 view .LVU9028
 33509 0c0e A27F     		ldrb	r2, [r4, #30]	@ zero_extendqisi2
 33510 0c10 3B4B     		ldr	r3, .L2484
 33511 0c12 013A     		subs	r2, r2, #1
 33512 0c14 A277     		strb	r2, [r4, #30]
 33513 0c16 1A68     		ldr	r2, [r3]
ARM GAS  /tmp/ccaPnj5t.s 			page 845


 33514 0c18 FFF7B3BA 		b	.L2153
 33515              	.LVL2588:
 33516              	.L2467:
 33517              	.LBB4215:
 33518              	.LBB4188:
4005:src/xeq.c     **** 		} else
 33519              		.loc 1 4005 15 view .LVU9029
 33520 0c1c FFF7FEFF 		bl	process_cmdline.part.0
 33521              	.LVL2589:
 33522 0c20 A6E6     		b	.L2217
 33523              	.L2211:
 33524              	.LBE4188:
 33525              	.LBE4215:
 33526              	.LBB4216:
3982:src/xeq.c     **** 
 33527              		.loc 1 3982 4 is_stmt 1 view .LVU9030
3984:src/xeq.c     **** 			dn_minus(&r, &x);
 33528              		.loc 1 3984 4 view .LVU9031
 33529              	.LVL2590:
 33530              	.LBB4167:
 33531              	.LBI4167:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33532              		.loc 1 818 12 view .LVU9032
 33533              	.LBB4168:
 819:src/xeq.c     **** }
 33534              		.loc 1 819 2 view .LVU9033
 819:src/xeq.c     **** }
 33535              		.loc 1 819 9 is_stmt 0 view .LVU9034
 33536 0c22 30A8     		add	r0, sp, #192
 33537              	.LVL2591:
 819:src/xeq.c     **** }
 33538              		.loc 1 819 9 view .LVU9035
 33539 0c24 6421     		movs	r1, #100
 33540 0c26 FFF7FEFF 		bl	getRegister
 33541              	.LVL2592:
 819:src/xeq.c     **** }
 33542              		.loc 1 819 9 view .LVU9036
 33543              	.LBE4168:
 33544              	.LBE4167:
3985:src/xeq.c     **** 			setX(&r);
 33545              		.loc 1 3985 4 is_stmt 1 view .LVU9037
 33546 0c2a 30A9     		add	r1, sp, #192
 33547 0c2c 39A8     		add	r0, sp, #228
 33548 0c2e FFF7FEFF 		bl	dn_minus
 33549              	.LVL2593:
3986:src/xeq.c     **** 			set_lift();
 33550              		.loc 1 3986 4 view .LVU9038
 33551              	.LBB4169:
 33552              	.LBI4169:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 33553              		.loc 1 822 6 view .LVU9039
 33554              	.LBB4170:
 823:src/xeq.c     **** }
 33555              		.loc 1 823 2 view .LVU9040
 33556 0c32 39A9     		add	r1, sp, #228
 33557              	.LVL2594:
 823:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 846


 33558              		.loc 1 823 2 is_stmt 0 view .LVU9041
 33559 0c34 6420     		movs	r0, #100
 33560 0c36 FFF7FEFF 		bl	setRegister
 33561              	.LVL2595:
 823:src/xeq.c     **** }
 33562              		.loc 1 823 2 view .LVU9042
 33563 0c3a FFF79CBA 		b	.L2421
 33564              	.LVL2596:
 33565              	.L2469:
 823:src/xeq.c     **** }
 33566              		.loc 1 823 2 view .LVU9043
 33567              	.LBE4170:
 33568              	.LBE4169:
 33569              	.LBE4216:
3977:src/xeq.c     **** 		else if (is_intmode()) {
 33570              		.loc 1 3977 4 is_stmt 1 view .LVU9044
 33571              	.LBB4217:
 33572              	.LBI4217:
3220:src/xeq.c     **** 	if (CmdLineEex) {
 33573              		.loc 1 3220 13 view .LVU9045
 33574              	.LBB4218:
3221:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33575              		.loc 1 3221 2 view .LVU9046
3221:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33576              		.loc 1 3221 6 is_stmt 0 view .LVU9047
 33577 0c3e 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3221:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33578              		.loc 1 3221 5 view .LVU9048
 33579 0c40 E3B1     		cbz	r3, .L2208
3225:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
 33580              		.loc 1 3225 3 is_stmt 1 view .LVU9049
3226:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33581              		.loc 1 3226 4 view .LVU9050
3226:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33582              		.loc 1 3226 24 is_stmt 0 view .LVU9051
 33583 0c42 E218     		adds	r2, r4, r3
 33584 0c44 2E4B     		ldr	r3, .L2484
 33585 0c46 92F82010 		ldrb	r1, [r2, #32]	@ zero_extendqisi2
 33586 0c4a 81F00101 		eor	r1, r1, #1
 33587 0c4e 82F82010 		strb	r1, [r2, #32]
 33588 0c52 1A68     		ldr	r2, [r3]
 33589 0c54 FFF795BA 		b	.L2153
 33590              	.L2466:
3226:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33591              		.loc 1 3226 24 view .LVU9052
 33592              	.LBE4218:
 33593              	.LBE4217:
4039:src/xeq.c     **** 		else
 33594              		.loc 1 4039 4 is_stmt 1 view .LVU9053
 33595 0c58 FFF7FEFF 		bl	sigma_plus
 33596              	.LVL2597:
 33597 0c5c 7CE6     		b	.L2222
 33598              	.L2465:
 33599              	.LBB4221:
 33600              	.LBB4173:
4039:src/xeq.c     **** 		else
 33601              		.loc 1 4039 4 is_stmt 0 view .LVU9054
ARM GAS  /tmp/ccaPnj5t.s 			page 847


 33602 0c5e FFF7FEFF 		bl	process_cmdline.part.0
 33603              	.LVL2598:
 33604 0c62 6BE6     		b	.L2220
 33605              	.LVL2599:
 33606              	.L2472:
4039:src/xeq.c     **** 		else
 33607              		.loc 1 4039 4 view .LVU9055
 33608              	.LBE4173:
 33609              	.LBE4221:
 33610              	.LBE4229:
 33611              	.LBE4565:
 33612              	.LBB4566:
 33613              	.LBB4396:
 33614              	.LBB4391:
 33615              	.LBB4390:
4670:src/xeq.c     **** 					setlastX();
 33616              		.loc 1 4670 7 is_stmt 1 view .LVU9056
 33617 0c64 5046     		mov	r0, r10
 33618 0c66 FFF7FEFF 		bl	set_NaN
 33619              	.LVL2600:
 33620 0c6a 89E7     		b	.L2242
 33621              	.LVL2601:
 33622              	.L2470:
4670:src/xeq.c     **** 					setlastX();
 33623              		.loc 1 4670 7 is_stmt 0 view .LVU9057
 33624              	.LBE4390:
 33625              	.LBE4391:
 33626              	.LBE4396:
 33627              	.LBE4566:
 33628              	.LBB4567:
 33629              	.LBB4283:
 33630              	.LBB4276:
 33631              	.LBB4273:
4746:src/xeq.c     **** 					setlastX();
 33632              		.loc 1 4746 7 is_stmt 1 view .LVU9058
 33633 0c6c 5046     		mov	r0, r10
 33634 0c6e FFF7FEFF 		bl	set_NaN
 33635              	.LVL2602:
 33636 0c72 38E7     		b	.L2250
 33637              	.LVL2603:
 33638              	.L2471:
4746:src/xeq.c     **** 					setlastX();
 33639              		.loc 1 4746 7 is_stmt 0 view .LVU9059
 33640              	.LBE4273:
 33641              	.LBE4276:
 33642              	.LBE4283:
 33643              	.LBE4567:
 33644              	.LBB4568:
 33645              	.LBB4449:
 33646              	.LBB4441:
 33647              	.LBB4439:
4822:src/xeq.c     **** 					setlastX();
 33648              		.loc 1 4822 7 is_stmt 1 view .LVU9060
 33649 0c74 5046     		mov	r0, r10
 33650 0c76 FFF7FEFF 		bl	set_NaN
 33651              	.LVL2604:
 33652 0c7a 60E7     		b	.L2258
ARM GAS  /tmp/ccaPnj5t.s 			page 848


 33653              	.LVL2605:
 33654              	.L2208:
4822:src/xeq.c     **** 					setlastX();
 33655              		.loc 1 4822 7 is_stmt 0 view .LVU9061
 33656              	.LBE4439:
 33657              	.LBE4441:
 33658              	.LBE4449:
 33659              	.LBE4568:
 33660              	.LBB4569:
 33661              	.LBB4230:
 33662              	.LBB4222:
 33663              	.LBB4219:
3252:src/xeq.c     **** 			if (CmdLineLength > 1)
 33664              		.loc 1 3252 3 is_stmt 1 view .LVU9062
3252:src/xeq.c     **** 			if (CmdLineLength > 1)
 33665              		.loc 1 3252 6 is_stmt 0 view .LVU9063
 33666 0c7c 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 33667 0c80 2D2B     		cmp	r3, #45
 33668 0c82 28D0     		beq	.L2475
3256:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33669              		.loc 1 3256 10 is_stmt 1 view .LVU9064
3256:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33670              		.loc 1 3256 13 is_stmt 0 view .LVU9065
 33671 0c84 122A     		cmp	r2, #18
 33672 0c86 3FF6E6AC 		bhi	.L2150
3257:src/xeq.c     **** 			Cmdline[0] = '-';
 33673              		.loc 1 3257 4 is_stmt 1 view .LVU9066
 33674 0c8a 1E49     		ldr	r1, .L2484+4
 33675 0c8c 1C4B     		ldr	r3, .L2484
 33676 0c8e 0593     		str	r3, [sp, #20]
 33677 0c90 481C     		adds	r0, r1, #1
 33678 0c92 FFF7FEFF 		bl	xcopy
 33679              	.LVL2606:
3258:src/xeq.c     **** 			CmdLineLength++;
 33680              		.loc 1 3258 4 view .LVU9067
3259:src/xeq.c     **** 		}
 33681              		.loc 1 3259 17 is_stmt 0 view .LVU9068
 33682 0c96 217F     		ldrb	r1, [r4, #28]	@ zero_extendqisi2
 33683 0c98 059B     		ldr	r3, [sp, #20]
 33684 0c9a 0131     		adds	r1, r1, #1
3258:src/xeq.c     **** 			CmdLineLength++;
 33685              		.loc 1 3258 15 view .LVU9069
 33686 0c9c 2D20     		movs	r0, #45
 33687 0c9e 1A68     		ldr	r2, [r3]
3259:src/xeq.c     **** 		}
 33688              		.loc 1 3259 17 view .LVU9070
 33689 0ca0 2177     		strb	r1, [r4, #28]
3258:src/xeq.c     **** 			CmdLineLength++;
 33690              		.loc 1 3258 15 view .LVU9071
 33691 0ca2 84F82000 		strb	r0, [r4, #32]
3259:src/xeq.c     **** 		}
 33692              		.loc 1 3259 4 is_stmt 1 view .LVU9072
 33693 0ca6 FFF76CBA 		b	.L2153
 33694              	.LVL2607:
 33695              	.L2213:
3259:src/xeq.c     **** 		}
 33696              		.loc 1 3259 4 is_stmt 0 view .LVU9073
ARM GAS  /tmp/ccaPnj5t.s 			page 849


 33697              	.LBE4219:
 33698              	.LBE4222:
4007:src/xeq.c     **** 		break;
 33699              		.loc 1 4007 4 is_stmt 1 view .LVU9074
 33700 0caa 154B     		ldr	r3, .L2484
 33701 0cac 0593     		str	r3, [sp, #20]
 33702 0cae 3F20     		movs	r0, #63
 33703 0cb0 FFF7FEFF 		bl	clrx
 33704              	.LVL2608:
 33705 0cb4 059B     		ldr	r3, [sp, #20]
 33706 0cb6 1A68     		ldr	r2, [r3]
 33707 0cb8 FFF763BA 		b	.L2153
 33708              	.L2474:
4003:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33709              		.loc 1 4003 5 view .LVU9075
 33710 0cbc 104B     		ldr	r3, .L2484
4003:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33711              		.loc 1 4003 16 is_stmt 0 view .LVU9076
 33712 0cbe 0021     		movs	r1, #0
 33713 0cc0 1A68     		ldr	r2, [r3]
 33714 0cc2 6177     		strb	r1, [r4, #29]
 33715 0cc4 FFF75DBA 		b	.L2153
 33716              	.L2473:
3997:src/xeq.c     **** 				break;
 33717              		.loc 1 3997 5 is_stmt 1 view .LVU9077
 33718 0cc8 0D4B     		ldr	r3, .L2484
3997:src/xeq.c     **** 				break;
 33719              		.loc 1 3997 30 is_stmt 0 view .LVU9078
 33720 0cca 4520     		movs	r0, #69
 33721 0ccc 1A68     		ldr	r2, [r3]
 33722 0cce 81F82000 		strb	r0, [r1, #32]
3998:src/xeq.c     **** 			}
 33723              		.loc 1 3998 5 is_stmt 1 view .LVU9079
 33724 0cd2 FFF756BA 		b	.L2153
 33725              	.LVL2609:
 33726              	.L2475:
 33727              	.LBB4223:
 33728              	.LBB4220:
3253:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33729              		.loc 1 3253 4 view .LVU9080
3253:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33730              		.loc 1 3253 7 is_stmt 0 view .LVU9081
 33731 0cd6 012A     		cmp	r2, #1
 33732 0cd8 03D9     		bls	.L2210
3254:src/xeq.c     **** 			CmdLineLength--;
 33733              		.loc 1 3254 5 is_stmt 1 view .LVU9082
 33734 0cda 0B49     		ldr	r1, .L2484+8
 33735 0cdc 481E     		subs	r0, r1, #1
 33736 0cde FFF7FEFF 		bl	xcopy
 33737              	.LVL2610:
 33738              	.L2210:
3255:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33739              		.loc 1 3255 4 view .LVU9083
3255:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33740              		.loc 1 3255 17 is_stmt 0 view .LVU9084
 33741 0ce2 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 33742 0ce4 064B     		ldr	r3, .L2484
ARM GAS  /tmp/ccaPnj5t.s 			page 850


 33743 0ce6 013A     		subs	r2, r2, #1
 33744 0ce8 2277     		strb	r2, [r4, #28]
 33745 0cea 1A68     		ldr	r2, [r3]
 33746 0cec FFF749BA 		b	.L2153
 33747              	.LVL2611:
 33748              	.L2468:
3255:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33749              		.loc 1 3255 17 view .LVU9085
 33750              	.LBE4220:
 33751              	.LBE4223:
 33752              	.LBB4224:
3969:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 33753              		.loc 1 3969 5 is_stmt 1 view .LVU9086
 33754 0cf0 0120     		movs	r0, #1
 33755 0cf2 FFF7FEFF 		bl	digit
 33756              	.LVL2612:
 33757 0cf6 8AE6     		b	.L2206
 33758              	.LVL2613:
 33759              	.L2204:
3969:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 33760              		.loc 1 3969 5 is_stmt 0 view .LVU9087
 33761              	.LBE4224:
3922:src/xeq.c     **** 			CmdLineDot++;
 33762              		.loc 1 3922 5 is_stmt 1 view .LVU9088
 33763 0cf8 0020     		movs	r0, #0
 33764 0cfa FFF7FEFF 		bl	digit
 33765              	.LVL2614:
 33766 0cfe 5FE6     		b	.L2205
 33767              	.L2485:
 33768              		.align	2
 33769              	.L2484:
 33770 0d00 00000000 		.word	Error
 33771 0d04 20000000 		.word	StateWhileOn+32
 33772 0d08 21000000 		.word	StateWhileOn+33
 33773              	.LBE4230:
 33774              	.LBE4569:
 33775              		.cfi_endproc
 33776              	.LFE249:
 33778              		.section	.text.xeq_single,"ax",%progbits
 33779              		.align	1
 33780              		.p2align 2,,3
 33781              		.syntax unified
 33782              		.thumb
 33783              		.thumb_func
 33784              		.fpu fpv4-sp-d16
 33786              	xeq_single:
 33787              	.LFB250:
5440:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 33788              		.loc 1 5440 30 view -0
 33789              		.cfi_startproc
 33790              		@ args = 0, pretend = 0, frame = 0
 33791              		@ frame_needed = 0, uses_anonymous_args = 0
5441:src/xeq.c     **** 
 33792              		.loc 1 5441 2 view .LVU9090
5441:src/xeq.c     **** 
 33793              		.loc 1 5441 28 is_stmt 0 view .LVU9091
 33794 0000 074B     		ldr	r3, .L2488
ARM GAS  /tmp/ccaPnj5t.s 			page 851


 33795 0002 1B68     		ldr	r3, [r3]
5440:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 33796              		.loc 1 5440 30 view .LVU9092
 33797 0004 10B5     		push	{r4, lr}
 33798              		.cfi_def_cfa_offset 8
 33799              		.cfi_offset 4, -8
 33800              		.cfi_offset 14, -4
5441:src/xeq.c     **** 
 33801              		.loc 1 5441 20 view .LVU9093
 33802 0006 B3F8E007 		ldrh	r0, [r3, #2016]
 33803 000a FFF7FEFF 		bl	getprog
 33804              	.LVL2615:
 33805 000e 0446     		mov	r4, r0
 33806              	.LVL2616:
5443:src/xeq.c     **** 	xeq(op);
 33807              		.loc 1 5443 2 is_stmt 1 view .LVU9094
 33808 0010 FFF7FEFF 		bl	incpc
 33809              	.LVL2617:
5444:src/xeq.c     **** }
 33810              		.loc 1 5444 2 view .LVU9095
 33811 0014 2046     		mov	r0, r4
5445:src/xeq.c     **** 
 33812              		.loc 1 5445 1 is_stmt 0 view .LVU9096
 33813 0016 BDE81040 		pop	{r4, lr}
 33814              		.cfi_restore 14
 33815              		.cfi_restore 4
 33816              		.cfi_def_cfa_offset 0
 33817              	.LVL2618:
5444:src/xeq.c     **** }
 33818              		.loc 1 5444 2 view .LVU9097
 33819 001a FFF7FEBF 		b	xeq
 33820              	.LVL2619:
 33821              	.L2489:
5444:src/xeq.c     **** }
 33822              		.loc 1 5444 2 view .LVU9098
 33823 001e 00BF     		.align	2
 33824              	.L2488:
 33825 0020 00000000 		.word	main_ram
 33826              		.cfi_endproc
 33827              	.LFE250:
 33829              		.section	.text.xeq_xrom2,"ax",%progbits
 33830              		.align	1
 33831              		.p2align 2,,3
 33832              		.syntax unified
 33833              		.thumb
 33834              		.thumb_func
 33835              		.fpu fpv4-sp-d16
 33837              	xeq_xrom2:
 33838              	.LFB251:
5452:src/xeq.c     **** #endif
 33839              		.loc 1 5452 29 is_stmt 1 view -0
 33840              		.cfi_startproc
 33841              		@ args = 0, pretend = 0, frame = 0
 33842              		@ frame_needed = 0, uses_anonymous_args = 0
5454:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
 33843              		.loc 1 5454 2 view .LVU9100
 33844              	.LVL2620:
ARM GAS  /tmp/ccaPnj5t.s 			page 852


5458:src/xeq.c     **** 		XromRunning = 1;
 33845              		.loc 1 5458 4 view .LVU9101
5458:src/xeq.c     **** 		XromRunning = 1;
 33846              		.loc 1 5458 10 view .LVU9102
5452:src/xeq.c     **** #endif
 33847              		.loc 1 5452 29 is_stmt 0 view .LVU9103
 33848 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 33849              		.cfi_def_cfa_offset 32
 33850              		.cfi_offset 4, -32
 33851              		.cfi_offset 5, -28
 33852              		.cfi_offset 6, -24
 33853              		.cfi_offset 7, -20
 33854              		.cfi_offset 8, -16
 33855              		.cfi_offset 9, -12
 33856              		.cfi_offset 10, -8
 33857              		.cfi_offset 14, -4
5458:src/xeq.c     **** 		XromRunning = 1;
 33858              		.loc 1 5458 11 view .LVU9104
 33859 0004 1A4D     		ldr	r5, .L2502
 33860 0006 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5458:src/xeq.c     **** 		XromRunning = 1;
 33861              		.loc 1 5458 10 view .LVU9105
 33862 0008 53BB     		cbnz	r3, .L2490
 33863 000a DFF87080 		ldr	r8, .L2502+12
5459:src/xeq.c     **** 		xeq_single();
 33864              		.loc 1 5459 15 view .LVU9106
 33865 000e 194F     		ldr	r7, .L2502+4
 33866              	.LBB4576:
 33867              	.LBB4577:
4454:src/xeq.c     **** 		Busy = 1;
 33868              		.loc 1 4454 6 view .LVU9107
 33869 0010 DFF86CA0 		ldr	r10, .L2502+16
4454:src/xeq.c     **** 		Busy = 1;
 33870              		.loc 1 4454 15 view .LVU9108
 33871 0014 DFF86C90 		ldr	r9, .L2502+20
 33872 0018 03F0FF04 		and	r4, r3, #255
 33873              	.LVL2621:
 33874              	.L2491:
4454:src/xeq.c     **** 		Busy = 1;
 33875              		.loc 1 4454 15 view .LVU9109
 33876              	.LBE4577:
 33877              	.LBE4576:
5459:src/xeq.c     **** 		xeq_single();
 33878              		.loc 1 5459 3 is_stmt 1 view .LVU9110
 33879              	.LBB4584:
 33880              	.LBI4584:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 33881              		.loc 1 185 5 view .LVU9111
 33882              	.LBB4585:
 186:src/xeq.c     **** }
 33883              		.loc 1 186 2 view .LVU9112
 186:src/xeq.c     **** }
 33884              		.loc 1 186 9 is_stmt 0 view .LVU9113
 33885 001c D8F80020 		ldr	r2, [r8]
 33886 0020 B2F8E037 		ldrh	r3, [r2, #2016]
 33887              	.LBE4585:
 33888              	.LBE4584:
ARM GAS  /tmp/ccaPnj5t.s 			page 853


5458:src/xeq.c     **** 		XromRunning = 1;
 33889              		.loc 1 5458 18 view .LVU9114
 33890 0024 9B0B     		lsrs	r3, r3, #14
5459:src/xeq.c     **** 		xeq_single();
 33891              		.loc 1 5459 15 view .LVU9115
 33892 0026 0126     		movs	r6, #1
5458:src/xeq.c     **** 		XromRunning = 1;
 33893              		.loc 1 5458 18 view .LVU9116
 33894 0028 032B     		cmp	r3, #3
5462:src/xeq.c     **** 			busy();
 33895              		.loc 1 5462 6 view .LVU9117
 33896 002a 3444     		add	r4, r4, r6
 33897              	.LVL2622:
5458:src/xeq.c     **** 		XromRunning = 1;
 33898              		.loc 1 5458 18 view .LVU9118
 33899 002c 18D1     		bne	.L2490
5458:src/xeq.c     **** 		XromRunning = 1;
 33900              		.loc 1 5458 31 discriminator 2 view .LVU9119
 33901 002e B2F9E237 		ldrsh	r3, [r2, #2018]
 33902 0032 ABB1     		cbz	r3, .L2490
5459:src/xeq.c     **** 		xeq_single();
 33903              		.loc 1 5459 15 view .LVU9120
 33904 0034 3E60     		str	r6, [r7]
5460:src/xeq.c     **** 		XromRunning = 0;
 33905              		.loc 1 5460 3 is_stmt 1 view .LVU9121
 33906 0036 FFF7FEFF 		bl	xeq_single
 33907              	.LVL2623:
5461:src/xeq.c     **** 		if ((++count & 31) == 0)
 33908              		.loc 1 5461 3 view .LVU9122
 33909              	.LBB4586:
 33910              	.LBB4580:
4454:src/xeq.c     **** 		Busy = 1;
 33911              		.loc 1 4454 12 is_stmt 0 view .LVU9123
 33912 003a D9F80030 		ldr	r3, [r9]
 33913 003e DAF80010 		ldr	r1, [r10]
 33914 0042 1943     		orrs	r1, r1, r3
 33915              	.LBE4580:
 33916              	.LBE4586:
5462:src/xeq.c     **** 			busy();
 33917              		.loc 1 5462 16 view .LVU9124
 33918 0044 04F01F03 		and	r3, r4, #31
5461:src/xeq.c     **** 		if ((++count & 31) == 0)
 33919              		.loc 1 5461 15 view .LVU9125
 33920 0048 0022     		movs	r2, #0
 33921              	.LBB4587:
 33922              	.LBB4581:
4454:src/xeq.c     **** 		Busy = 1;
 33923              		.loc 1 4454 12 view .LVU9126
 33924 004a 1943     		orrs	r1, r1, r3
 33925              	.LBE4581:
 33926              	.LBE4587:
5461:src/xeq.c     **** 		if ((++count & 31) == 0)
 33927              		.loc 1 5461 15 view .LVU9127
 33928 004c 3A60     		str	r2, [r7]
5462:src/xeq.c     **** 			busy();
 33929              		.loc 1 5462 3 is_stmt 1 view .LVU9128
 33930              	.LVL2624:
ARM GAS  /tmp/ccaPnj5t.s 			page 854


5463:src/xeq.c     **** 		  if (Pause)
 33931              		.loc 1 5463 4 view .LVU9129
 33932              	.LBB4588:
 33933              	.LBI4576:
4439:src/xeq.c     **** {
 33934              		.loc 1 4439 6 view .LVU9130
 33935              	.LBB4582:
4444:src/xeq.c     **** 
 33936              		.loc 1 4444 12 view .LVU9131
4449:src/xeq.c     **** 
 33937              		.loc 1 4449 17 view .LVU9132
4454:src/xeq.c     **** 		Busy = 1;
 33938              		.loc 1 4454 2 view .LVU9133
4454:src/xeq.c     **** 		Busy = 1;
 33939              		.loc 1 4454 12 is_stmt 0 view .LVU9134
 33940 004e 09D0     		beq	.L2501
 33941              	.L2492:
 33942              	.LBE4582:
 33943              	.LBE4588:
5464:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 33944              		.loc 1 5464 5 is_stmt 1 view .LVU9135
5467:src/xeq.c     **** 		
 33945              		.loc 1 5467 4 view .LVU9136
5458:src/xeq.c     **** 		XromRunning = 1;
 33946              		.loc 1 5458 10 view .LVU9137
5464:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 33947              		.loc 1 5464 9 is_stmt 0 view .LVU9138
 33948 0050 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
5458:src/xeq.c     **** 		XromRunning = 1;
 33949              		.loc 1 5458 11 view .LVU9139
 33950 0052 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5464:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 33951              		.loc 1 5464 8 view .LVU9140
 33952 0054 12B1     		cbz	r2, .L2493
5467:src/xeq.c     **** 		
 33953              		.loc 1 5467 12 view .LVU9141
 33954 0056 0122     		movs	r2, #1
 33955 0058 C9F80020 		str	r2, [r9]
 33956              	.L2493:
5458:src/xeq.c     **** 		XromRunning = 1;
 33957              		.loc 1 5458 10 view .LVU9142
 33958 005c 002B     		cmp	r3, #0
 33959 005e DDD0     		beq	.L2491
 33960              	.LVL2625:
 33961              	.L2490:
5470:src/xeq.c     **** 
 33962              		.loc 1 5470 1 view .LVU9143
 33963 0060 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 33964              	.LVL2626:
 33965              	.L2501:
 33966              	.LBB4589:
 33967              	.LBB4583:
 33968              	.LBB4578:
 33969              	.LBI4578:
4439:src/xeq.c     **** {
 33970              		.loc 1 4439 6 is_stmt 1 view .LVU9144
 33971              	.LBB4579:
ARM GAS  /tmp/ccaPnj5t.s 			page 855


4455:src/xeq.c     **** 		message("Wait...", NULL);
 33972              		.loc 1 4455 3 view .LVU9145
4456:src/xeq.c     **** 	}
 33973              		.loc 1 4456 3 is_stmt 0 view .LVU9146
 33974 0064 0448     		ldr	r0, .L2502+8
4455:src/xeq.c     **** 		message("Wait...", NULL);
 33975              		.loc 1 4455 8 view .LVU9147
 33976 0066 CAF80060 		str	r6, [r10]
4456:src/xeq.c     **** 	}
 33977              		.loc 1 4456 3 is_stmt 1 view .LVU9148
 33978 006a FFF7FEFF 		bl	message
 33979              	.LVL2627:
4458:src/xeq.c     **** 
 33980              		.loc 1 4458 1 is_stmt 0 view .LVU9149
 33981 006e EFE7     		b	.L2492
 33982              	.L2503:
 33983              		.align	2
 33984              	.L2502:
 33985 0070 00000000 		.word	Pause
 33986 0074 00000000 		.word	XromRunning
 33987 0078 00000000 		.word	.LC7
 33988 007c 00000000 		.word	main_ram
 33989 0080 00000000 		.word	Busy
 33990 0084 00000000 		.word	Running
 33991              	.LBE4579:
 33992              	.LBE4578:
 33993              	.LBE4583:
 33994              	.LBE4589:
 33995              		.cfi_endproc
 33996              	.LFE251:
 33998              		.section	.text.xeq_xrom,"ax",%progbits
 33999              		.align	1
 34000              		.p2align 2,,3
 34001              		.global	xeq_xrom
 34002              		.syntax unified
 34003              		.thumb
 34004              		.thumb_func
 34005              		.fpu fpv4-sp-d16
 34007              	xeq_xrom:
 34008              	.LFB252:
5473:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34009              		.loc 1 5473 21 is_stmt 1 view -0
 34010              		.cfi_startproc
 34011              		@ args = 0, pretend = 0, frame = 0
 34012              		@ frame_needed = 0, uses_anonymous_args = 0
 34013              		@ link register save eliminated.
5475:src/xeq.c     **** 		xeq_xrom2();
 34014              		.loc 1 5475 2 view .LVU9151
5475:src/xeq.c     **** 		xeq_xrom2();
 34015              		.loc 1 5475 6 is_stmt 0 view .LVU9152
 34016 0000 034B     		ldr	r3, .L2507
5475:src/xeq.c     **** 		xeq_xrom2();
 34017              		.loc 1 5475 5 view .LVU9153
 34018 0002 93F91730 		ldrsb	r3, [r3, #23]
 34019 0006 002B     		cmp	r3, #0
 34020 0008 00DA     		bge	.L2506
5477:src/xeq.c     **** #endif
ARM GAS  /tmp/ccaPnj5t.s 			page 856


 34021              		.loc 1 5477 1 view .LVU9154
 34022 000a 7047     		bx	lr
 34023              	.L2506:
5476:src/xeq.c     **** }
 34024              		.loc 1 5476 3 is_stmt 1 view .LVU9155
 34025 000c FFF7FEBF 		b	xeq_xrom2
 34026              	.LVL2628:
 34027              	.L2508:
 34028              		.align	2
 34029              	.L2507:
 34030 0010 00000000 		.word	StateWhileOn
 34031              		.cfi_endproc
 34032              	.LFE252:
 34034              		.section	.text.dispatch_xrom,"ax",%progbits
 34035              		.align	1
 34036              		.p2align 2,,3
 34037              		.syntax unified
 34038              		.thumb
 34039              		.thumb_func
 34040              		.fpu fpv4-sp-d16
 34042              	dispatch_xrom:
 34043              	.LVL2629:
 34044              	.LFB236:
4491:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 34045              		.loc 1 4491 1 view -0
 34046              		.cfi_startproc
 34047              		@ args = 0, pretend = 0, frame = 0
 34048              		@ frame_needed = 0, uses_anonymous_args = 0
4492:src/xeq.c     **** 	if (xp == NULL)
 34049              		.loc 1 4492 2 view .LVU9157
 34050              	.LBB4590:
 34051              	.LBI4590:
4474:src/xeq.c     **** {
 34052              		.loc 1 4474 24 view .LVU9158
 34053              	.LBB4591:
4476:src/xeq.c     **** 	if (xp < xrom)
 34054              		.loc 1 4476 2 view .LVU9159
4477:src/xeq.c     **** 		return NULL;
 34055              		.loc 1 4477 5 is_stmt 0 view .LVU9160
 34056 0000 1649     		ldr	r1, .L2520
4476:src/xeq.c     **** 	if (xp < xrom)
 34057              		.loc 1 4476 59 view .LVU9161
 34058 0002 20F00100 		bic	r0, r0, #1
 34059              	.LVL2630:
4477:src/xeq.c     **** 		return NULL;
 34060              		.loc 1 4477 2 is_stmt 1 view .LVU9162
4477:src/xeq.c     **** 		return NULL;
 34061              		.loc 1 4477 5 is_stmt 0 view .LVU9163
 34062 0006 8842     		cmp	r0, r1
 34063 0008 22D3     		bcc	.L2512
4481:src/xeq.c     **** 		return NULL;
 34064              		.loc 1 4481 2 is_stmt 1 view .LVU9164
4481:src/xeq.c     **** 		return NULL;
 34065              		.loc 1 4481 17 is_stmt 0 view .LVU9165
 34066 000a 154B     		ldr	r3, .L2520+4
 34067 000c 1B88     		ldrh	r3, [r3]
 34068 000e 01EB4303 		add	r3, r1, r3, lsl #1
ARM GAS  /tmp/ccaPnj5t.s 			page 857


4481:src/xeq.c     **** 		return NULL;
 34069              		.loc 1 4481 5 view .LVU9166
 34070 0012 9842     		cmp	r0, r3
 34071 0014 1CD2     		bcs	.L2512
 34072              	.LVL2631:
4481:src/xeq.c     **** 		return NULL;
 34073              		.loc 1 4481 5 view .LVU9167
 34074              	.LBE4591:
 34075              	.LBE4590:
4493:src/xeq.c     **** 		return 0;
 34076              		.loc 1 4493 2 is_stmt 1 view .LVU9168
4493:src/xeq.c     **** 		return 0;
 34077              		.loc 1 4493 5 is_stmt 0 view .LVU9169
 34078 0016 D0B1     		cbz	r0, .L2516
4496:src/xeq.c     **** 	XromRunning = 1;
 34079              		.loc 1 4496 2 is_stmt 1 view .LVU9170
4496:src/xeq.c     **** 	XromRunning = 1;
 34080              		.loc 1 4496 18 is_stmt 0 view .LVU9171
 34081 0018 124B     		ldr	r3, .L2520+8
 34082 001a 1B68     		ldr	r3, [r3]
4491:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 34083              		.loc 1 4491 1 view .LVU9172
 34084 001c 70B5     		push	{r4, r5, r6, lr}
 34085              		.cfi_def_cfa_offset 16
 34086              		.cfi_offset 4, -16
 34087              		.cfi_offset 5, -12
 34088              		.cfi_offset 6, -8
 34089              		.cfi_offset 14, -4
4498:src/xeq.c     **** 	xeq_xrom();
 34090              		.loc 1 4498 9 view .LVU9173
 34091 001e 401A     		subs	r0, r0, r1
 34092              	.LVL2632:
4496:src/xeq.c     **** 	XromRunning = 1;
 34093              		.loc 1 4496 16 view .LVU9174
 34094 0020 114C     		ldr	r4, .L2520+12
4496:src/xeq.c     **** 	XromRunning = 1;
 34095              		.loc 1 4496 18 view .LVU9175
 34096 0022 B3F9DE67 		ldrsh	r6, [r3, #2014]
 34097 0026 2660     		str	r6, [r4]
4497:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34098              		.loc 1 4497 2 is_stmt 1 view .LVU9176
4498:src/xeq.c     **** 	xeq_xrom();
 34099              		.loc 1 4498 9 is_stmt 0 view .LVU9177
 34100 0028 4010     		asrs	r0, r0, #1
 34101              	.LVL2633:
4497:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34102              		.loc 1 4497 14 view .LVU9178
 34103 002a 0124     		movs	r4, #1
 34104 002c 0F4D     		ldr	r5, .L2520+16
4498:src/xeq.c     **** 	xeq_xrom();
 34105              		.loc 1 4498 2 view .LVU9179
 34106 002e B3F8E027 		ldrh	r2, [r3, #2016]
4497:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34107              		.loc 1 4497 14 view .LVU9180
 34108 0032 2C60     		str	r4, [r5]
4498:src/xeq.c     **** 	xeq_xrom();
 34109              		.loc 1 4498 2 is_stmt 1 view .LVU9181
ARM GAS  /tmp/ccaPnj5t.s 			page 858


4498:src/xeq.c     **** 	xeq_xrom();
 34110              		.loc 1 4498 9 is_stmt 0 view .LVU9182
 34111 0034 0130     		adds	r0, r0, #1
4498:src/xeq.c     **** 	xeq_xrom();
 34112              		.loc 1 4498 2 view .LVU9183
 34113 0036 40F44040 		orr	r0, r0, #49152
 34114 003a 2146     		mov	r1, r4
 34115 003c FFF7FEFF 		bl	gsbgto
 34116              	.LVL2634:
4499:src/xeq.c     **** 	return 1;
 34117              		.loc 1 4499 2 is_stmt 1 view .LVU9184
 34118              	.LBB4592:
 34119              	.LBI4592:
5473:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34120              		.loc 1 5473 6 view .LVU9185
 34121              	.LBB4593:
5475:src/xeq.c     **** 		xeq_xrom2();
 34122              		.loc 1 5475 2 view .LVU9186
5475:src/xeq.c     **** 		xeq_xrom2();
 34123              		.loc 1 5475 6 is_stmt 0 view .LVU9187
 34124 0040 0B4B     		ldr	r3, .L2520+20
5475:src/xeq.c     **** 		xeq_xrom2();
 34125              		.loc 1 5475 5 view .LVU9188
 34126 0042 93F91730 		ldrsb	r3, [r3, #23]
 34127 0046 002B     		cmp	r3, #0
 34128 0048 04DA     		bge	.L2519
 34129              	.LBE4593:
 34130              	.LBE4592:
4500:src/xeq.c     **** }
 34131              		.loc 1 4500 9 view .LVU9189
 34132 004a 2046     		mov	r0, r4
 34133              	.LVL2635:
4501:src/xeq.c     **** 
 34134              		.loc 1 4501 1 view .LVU9190
 34135 004c 70BD     		pop	{r4, r5, r6, pc}
 34136              	.LVL2636:
 34137              	.L2516:
 34138              		.cfi_def_cfa_offset 0
 34139              		.cfi_restore 4
 34140              		.cfi_restore 5
 34141              		.cfi_restore 6
 34142              		.cfi_restore 14
4501:src/xeq.c     **** 
 34143              		.loc 1 4501 1 view .LVU9191
 34144 004e 7047     		bx	lr
 34145              	.LVL2637:
 34146              	.L2512:
4494:src/xeq.c     **** 	// set_lift();
 34147              		.loc 1 4494 10 view .LVU9192
 34148 0050 0020     		movs	r0, #0
 34149              	.LVL2638:
4494:src/xeq.c     **** 	// set_lift();
 34150              		.loc 1 4494 10 view .LVU9193
 34151 0052 7047     		bx	lr
 34152              	.LVL2639:
 34153              	.L2519:
 34154              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/ccaPnj5t.s 			page 859


 34155              		.cfi_offset 4, -16
 34156              		.cfi_offset 5, -12
 34157              		.cfi_offset 6, -8
 34158              		.cfi_offset 14, -4
 34159              	.LBB4595:
 34160              	.LBB4594:
5476:src/xeq.c     **** }
 34161              		.loc 1 5476 3 is_stmt 1 view .LVU9194
 34162 0054 FFF7FEFF 		bl	xeq_xrom2
 34163              	.LVL2640:
 34164              	.LBE4594:
 34165              	.LBE4595:
4500:src/xeq.c     **** }
 34166              		.loc 1 4500 9 is_stmt 0 view .LVU9195
 34167 0058 2046     		mov	r0, r4
4501:src/xeq.c     **** 
 34168              		.loc 1 4501 1 view .LVU9196
 34169 005a 70BD     		pop	{r4, r5, r6, pc}
 34170              	.L2521:
 34171              		.align	2
 34172              	.L2520:
 34173 005c 00000000 		.word	xrom
 34174 0060 00000000 		.word	xrom_size
 34175 0064 00000000 		.word	main_ram
 34176 0068 00000000 		.word	UserLocalRegs
 34177 006c 00000000 		.word	XromRunning
 34178 0070 00000000 		.word	StateWhileOn
 34179              		.cfi_endproc
 34180              	.LFE236:
 34182              		.section	.text.op_rs,"ax",%progbits
 34183              		.align	1
 34184              		.p2align 2,,3
 34185              		.global	op_rs
 34186              		.syntax unified
 34187              		.thumb
 34188              		.thumb_func
 34189              		.fpu fpv4-sp-d16
 34191              	op_rs:
 34192              	.LVL2641:
 34193              	.LFB255:
5572:src/xeq.c     **** #ifndef REALBUILD
 34194              		.loc 1 5572 27 is_stmt 1 view -0
 34195              		.cfi_startproc
 34196              		@ args = 0, pretend = 0, frame = 0
 34197              		@ frame_needed = 0, uses_anonymous_args = 0
5576:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 34198              		.loc 1 5576 2 view .LVU9198
 34199              	.LBB4596:
 34200              	.LBI4596:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 34201              		.loc 1 185 5 view .LVU9199
 34202              	.LBB4597:
 186:src/xeq.c     **** }
 34203              		.loc 1 186 2 view .LVU9200
 34204              	.LBE4597:
 34205              	.LBE4596:
5572:src/xeq.c     **** #ifndef REALBUILD
ARM GAS  /tmp/ccaPnj5t.s 			page 860


 34206              		.loc 1 5572 27 is_stmt 0 view .LVU9201
 34207 0000 10B5     		push	{r4, lr}
 34208              		.cfi_def_cfa_offset 8
 34209              		.cfi_offset 4, -8
 34210              		.cfi_offset 14, -4
 34211              	.LBB4599:
 34212              	.LBB4598:
 186:src/xeq.c     **** }
 34213              		.loc 1 186 9 view .LVU9202
 34214 0002 1D4C     		ldr	r4, .L2532
 34215 0004 2268     		ldr	r2, [r4]
 34216 0006 B2F8E037 		ldrh	r3, [r2, #2016]
 34217              	.LBE4598:
 34218              	.LBE4599:
5576:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 34219              		.loc 1 5576 5 view .LVU9203
 34220 000a 9B0B     		lsrs	r3, r3, #14
 34221 000c 032B     		cmp	r3, #3
 34222 000e 20D0     		beq	.L2531
5586:src/xeq.c     **** 		set_running_off();
 34223              		.loc 1 5586 2 is_stmt 1 view .LVU9204
5586:src/xeq.c     **** 		set_running_off();
 34224              		.loc 1 5586 6 is_stmt 0 view .LVU9205
 34225 0010 1A4B     		ldr	r3, .L2532+4
5586:src/xeq.c     **** 		set_running_off();
 34226              		.loc 1 5586 5 view .LVU9206
 34227 0012 1968     		ldr	r1, [r3]
 34228 0014 61B1     		cbz	r1, .L2526
5587:src/xeq.c     **** 	else {
 34229              		.loc 1 5587 3 is_stmt 1 view .LVU9207
 34230              	.LBB4600:
 34231              	.LBI4600:
5789:src/xeq.c     **** 	set_running_off_sst();
 34232              		.loc 1 5789 6 view .LVU9208
 34233              	.LBB4601:
5790:src/xeq.c     **** 	State.entryp = 0;
 34234              		.loc 1 5790 2 view .LVU9209
 34235              	.LBB4602:
 34236              	.LBI4602:
5781:src/xeq.c     **** 	Running = 0;
 34237              		.loc 1 5781 6 view .LVU9210
 34238              	.LBB4603:
5782:src/xeq.c     **** }
 34239              		.loc 1 5782 2 view .LVU9211
5782:src/xeq.c     **** }
 34240              		.loc 1 5782 10 is_stmt 0 view .LVU9212
 34241 0016 0021     		movs	r1, #0
 34242 0018 1960     		str	r1, [r3]
 34243              	.LBE4603:
 34244              	.LBE4602:
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 34245              		.loc 1 5791 2 is_stmt 1 view .LVU9213
5791:src/xeq.c     **** 	dot( RCL_annun, 0);
 34246              		.loc 1 5791 15 is_stmt 0 view .LVU9214
 34247 001a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 34248 001e 61F30413 		bfi	r3, r1, #4, #1
 34249 0022 82F8DD37 		strb	r3, [r2, #2013]
ARM GAS  /tmp/ccaPnj5t.s 			page 861


5792:src/xeq.c     **** }
 34250              		.loc 1 5792 2 is_stmt 1 view .LVU9215
 34251              	.LBE4601:
 34252              	.LBE4600:
5593:src/xeq.c     **** 
 34253              		.loc 1 5593 1 is_stmt 0 view .LVU9216
 34254 0026 BDE81040 		pop	{r4, lr}
 34255              		.cfi_remember_state
 34256              		.cfi_restore 14
 34257              		.cfi_restore 4
 34258              		.cfi_def_cfa_offset 0
 34259              	.LBB4605:
 34260              	.LBB4604:
5792:src/xeq.c     **** }
 34261              		.loc 1 5792 2 view .LVU9217
 34262 002a 8A20     		movs	r0, #138
 34263              	.LVL2642:
5792:src/xeq.c     **** }
 34264              		.loc 1 5792 2 view .LVU9218
 34265 002c FFF7FEBF 		b	dot
 34266              	.LVL2643:
 34267              	.L2526:
 34268              		.cfi_restore_state
5792:src/xeq.c     **** }
 34269              		.loc 1 5792 2 view .LVU9219
 34270              	.LBE4604:
 34271              	.LBE4605:
5589:src/xeq.c     **** 		if (RetStkPtr == 0)
 34272              		.loc 1 5589 3 is_stmt 1 view .LVU9220
 34273 0030 FFF7FEFF 		bl	set_running_on
 34274              	.LVL2644:
5590:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34275              		.loc 1 5590 3 view .LVU9221
5590:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34276              		.loc 1 5590 7 is_stmt 0 view .LVU9222
 34277 0034 2368     		ldr	r3, [r4]
5590:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34278              		.loc 1 5590 6 view .LVU9223
 34279 0036 B3F9E227 		ldrsh	r2, [r3, #2018]
 34280 003a 4AB9     		cbnz	r2, .L2522
5591:src/xeq.c     **** 	}
 34281              		.loc 1 5591 4 is_stmt 1 view .LVU9224
5591:src/xeq.c     **** 	}
 34282              		.loc 1 5591 10 is_stmt 0 view .LVU9225
 34283 003c 104A     		ldr	r2, .L2532+8
5591:src/xeq.c     **** 	}
 34284              		.loc 1 5591 26 view .LVU9226
 34285 003e B3F8E017 		ldrh	r1, [r3, #2016]
5591:src/xeq.c     **** 	}
 34286              		.loc 1 5591 10 view .LVU9227
 34287 0042 1268     		ldr	r2, [r2]
5591:src/xeq.c     **** 	}
 34288              		.loc 1 5591 24 view .LVU9228
 34289 0044 4FF6FF70 		movw	r0, #65535
 34290 0048 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 34291 004c 22F8021C 		strh	r1, [r2, #-2]	@ movhi
 34292              	.L2522:
ARM GAS  /tmp/ccaPnj5t.s 			page 862


5593:src/xeq.c     **** 
 34293              		.loc 1 5593 1 view .LVU9229
 34294 0050 10BD     		pop	{r4, pc}
 34295              	.LVL2645:
 34296              	.L2531:
5577:src/xeq.c     **** 			Running = XromRunning = 0;
 34297              		.loc 1 5577 3 is_stmt 1 view .LVU9230
5577:src/xeq.c     **** 			Running = XromRunning = 0;
 34298              		.loc 1 5577 7 is_stmt 0 view .LVU9231
 34299 0052 0C4B     		ldr	r3, .L2532+12
5577:src/xeq.c     **** 			Running = XromRunning = 0;
 34300              		.loc 1 5577 6 view .LVU9232
 34301 0054 93F91730 		ldrsb	r3, [r3, #23]
 34302 0058 002B     		cmp	r3, #0
 34303 005a 09DA     		bge	.L2524
5577:src/xeq.c     **** 			Running = XromRunning = 0;
 34304              		.loc 1 5577 24 discriminator 1 view .LVU9233
 34305 005c 074B     		ldr	r3, .L2532+4
5577:src/xeq.c     **** 			Running = XromRunning = 0;
 34306              		.loc 1 5577 32 discriminator 1 view .LVU9234
 34307 005e 0A4A     		ldr	r2, .L2532+16
 34308 0060 1868     		ldr	r0, [r3]
 34309              	.LVL2646:
5577:src/xeq.c     **** 			Running = XromRunning = 0;
 34310              		.loc 1 5577 32 discriminator 1 view .LVU9235
 34311 0062 1168     		ldr	r1, [r2]
 34312 0064 0143     		orrs	r1, r0, r1
 34313 0066 03D0     		beq	.L2524
5578:src/xeq.c     **** 		}
 34314              		.loc 1 5578 4 is_stmt 1 view .LVU9236
5578:src/xeq.c     **** 		}
 34315              		.loc 1 5578 26 is_stmt 0 view .LVU9237
 34316 0068 0021     		movs	r1, #0
 34317 006a 1160     		str	r1, [r2]
5578:src/xeq.c     **** 		}
 34318              		.loc 1 5578 12 view .LVU9238
 34319 006c 1960     		str	r1, [r3]
5593:src/xeq.c     **** 
 34320              		.loc 1 5593 1 view .LVU9239
 34321 006e 10BD     		pop	{r4, pc}
 34322              	.L2524:
5581:src/xeq.c     **** 		}
 34323              		.loc 1 5581 4 is_stmt 1 view .LVU9240
5593:src/xeq.c     **** 
 34324              		.loc 1 5593 1 is_stmt 0 view .LVU9241
 34325 0070 BDE81040 		pop	{r4, lr}
 34326              		.cfi_restore 14
 34327              		.cfi_restore 4
 34328              		.cfi_def_cfa_offset 0
5581:src/xeq.c     **** 		}
 34329              		.loc 1 5581 4 view .LVU9242
 34330 0074 FFF7FEBF 		b	xeq_xrom2
 34331              	.LVL2647:
 34332              	.L2533:
 34333              		.align	2
 34334              	.L2532:
 34335 0078 00000000 		.word	main_ram
ARM GAS  /tmp/ccaPnj5t.s 			page 863


 34336 007c 00000000 		.word	Running
 34337 0080 00000000 		.word	RetStk
 34338 0084 00000000 		.word	StateWhileOn
 34339 0088 00000000 		.word	XromRunning
 34340              		.cfi_endproc
 34341              	.LFE255:
 34343              		.section	.text.xeqprog,"ax",%progbits
 34344              		.align	1
 34345              		.p2align 2,,3
 34346              		.global	xeqprog
 34347              		.syntax unified
 34348              		.thumb
 34349              		.thumb_func
 34350              		.fpu fpv4-sp-d16
 34352              	xeqprog:
 34353              	.LFB253:
5489:src/xeq.c     ****    int state = 0;
 34354              		.loc 1 5489 2 is_stmt 1 view -0
 34355              		.cfi_startproc
 34356              		@ args = 0, pretend = 0, frame = 0
 34357              		@ frame_needed = 0, uses_anonymous_args = 0
5490:src/xeq.c     ****    if (Running || Pause) {
 34358              		.loc 1 5490 4 view .LVU9244
 34359              	.LVL2648:
5491:src/xeq.c     **** 
 34360              		.loc 1 5491 4 view .LVU9245
5489:src/xeq.c     ****    int state = 0;
 34361              		.loc 1 5489 2 is_stmt 0 view .LVU9246
 34362 0000 38B5     		push	{r3, r4, r5, lr}
 34363              		.cfi_def_cfa_offset 16
 34364              		.cfi_offset 3, -16
 34365              		.cfi_offset 4, -12
 34366              		.cfi_offset 5, -8
 34367              		.cfi_offset 14, -4
5491:src/xeq.c     **** 
 34368              		.loc 1 5491 8 view .LVU9247
 34369 0002 184C     		ldr	r4, .L2559
 34370 0004 184D     		ldr	r5, .L2559+4
5491:src/xeq.c     **** 
 34371              		.loc 1 5491 7 view .LVU9248
 34372 0006 2368     		ldr	r3, [r4]
 34373 0008 0BB9     		cbnz	r3, .L2535
5491:src/xeq.c     **** 
 34374              		.loc 1 5491 16 discriminator 1 view .LVU9249
 34375 000a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 34376 000c 9BB1     		cbz	r3, .L2540
 34377              	.L2535:
5497:src/xeq.c     **** #endif
 34378              		.loc 1 5497 6 is_stmt 1 view .LVU9250
 34379              	.LVL2649:
5501:src/xeq.c     ****      finish_RPN(); // RPN
 34380              		.loc 1 5501 6 view .LVU9251
 34381 000e 0121     		movs	r1, #1
 34382 0010 8A20     		movs	r0, #138
 34383 0012 FFF7FEFF 		bl	dot
 34384              	.LVL2650:
5502:src/xeq.c     **** 
ARM GAS  /tmp/ccaPnj5t.s 			page 864


 34385              		.loc 1 5502 6 view .LVU9252
 34386 0016 FFF7FEFF 		bl	finish_RPN
 34387              	.LVL2651:
5504:src/xeq.c     ****        xeq_single();
 34388              		.loc 1 5504 6 view .LVU9253
5504:src/xeq.c     ****        xeq_single();
 34389              		.loc 1 5504 12 is_stmt 0 view .LVU9254
 34390 001a 06E0     		b	.L2537
 34391              	.L2557:
5504:src/xeq.c     ****        xeq_single();
 34392              		.loc 1 5504 21 discriminator 1 view .LVU9255
 34393 001c 2368     		ldr	r3, [r4]
 34394 001e 53B1     		cbz	r3, .L2540
5505:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 34395              		.loc 1 5505 8 view .LVU9256
 34396 0020 FFF7FEFF 		bl	xeq_single
 34397              	.LVL2652:
5507:src/xeq.c     **** 	 {
 34398              		.loc 1 5507 8 is_stmt 1 view .LVU9257
5507:src/xeq.c     **** 	 {
 34399              		.loc 1 5507 12 is_stmt 0 view .LVU9258
 34400 0024 FFF7FEFF 		bl	is_key_pressed
 34401              	.LVL2653:
5507:src/xeq.c     **** 	 {
 34402              		.loc 1 5507 11 view .LVU9259
 34403 0028 10B9     		cbnz	r0, .L2538
 34404              	.L2537:
5505:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 34405              		.loc 1 5505 8 is_stmt 1 view .LVU9260
5504:src/xeq.c     ****        xeq_single();
 34406              		.loc 1 5504 12 view .LVU9261
5504:src/xeq.c     ****        xeq_single();
 34407              		.loc 1 5504 13 is_stmt 0 view .LVU9262
 34408 002a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5504:src/xeq.c     ****        xeq_single();
 34409              		.loc 1 5504 12 view .LVU9263
 34410 002c 002B     		cmp	r3, #0
 34411 002e F5D0     		beq	.L2557
 34412              	.L2538:
5516:src/xeq.c     ****      // Program has terminated
 34413              		.loc 1 5516 4 is_stmt 1 view .LVU9264
5516:src/xeq.c     ****      // Program has terminated
 34414              		.loc 1 5516 7 is_stmt 0 view .LVU9265
 34415 0030 2368     		ldr	r3, [r4]
 34416 0032 03B1     		cbz	r3, .L2540
 34417              	.LVL2654:
 34418              	.L2534:
5530:src/xeq.c     **** 
 34419              		.loc 1 5530 2 view .LVU9266
 34420 0034 38BD     		pop	{r3, r4, r5, pc}
 34421              	.L2540:
5516:src/xeq.c     ****      // Program has terminated
 34422              		.loc 1 5516 4 is_stmt 1 view .LVU9267
5516:src/xeq.c     ****      // Program has terminated
 34423              		.loc 1 5516 21 is_stmt 0 view .LVU9268
 34424 0036 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5516:src/xeq.c     ****      // Program has terminated
ARM GAS  /tmp/ccaPnj5t.s 			page 865


 34425              		.loc 1 5516 18 view .LVU9269
 34426 0038 002B     		cmp	r3, #0
 34427 003a FBD1     		bne	.L2534
5518:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
 34428              		.loc 1 5518 6 is_stmt 1 view .LVU9270
5519:src/xeq.c     ****      display();
 34429              		.loc 1 5519 14 is_stmt 0 view .LVU9271
 34430 003c 0B4C     		ldr	r4, .L2559+8
5518:src/xeq.c     ****      ShowRPN = 1;	// display() may turn it off again
 34431              		.loc 1 5518 6 view .LVU9272
 34432 003e 8A20     		movs	r0, #138
 34433 0040 FFF7FEFF 		bl	clr_dot
 34434              	.LVL2655:
5519:src/xeq.c     ****      display();
 34435              		.loc 1 5519 6 is_stmt 1 view .LVU9273
5519:src/xeq.c     ****      display();
 34436              		.loc 1 5519 14 is_stmt 0 view .LVU9274
 34437 0044 0123     		movs	r3, #1
 34438 0046 2360     		str	r3, [r4]
5520:src/xeq.c     ****      if (ShowRPN) {
 34439              		.loc 1 5520 6 is_stmt 1 view .LVU9275
 34440 0048 FFF7FEFF 		bl	display
 34441              	.LVL2656:
5521:src/xeq.c     ****        set_dot(RPN);
 34442              		.loc 1 5521 6 view .LVU9276
5521:src/xeq.c     ****        set_dot(RPN);
 34443              		.loc 1 5521 9 is_stmt 0 view .LVU9277
 34444 004c 2368     		ldr	r3, [r4]
 34445 004e 1BB9     		cbnz	r3, .L2558
 34446              	.L2542:
5527:src/xeq.c     **** #endif
 34447              		.loc 1 5527 6 is_stmt 1 view .LVU9278
5527:src/xeq.c     **** #endif
 34448              		.loc 1 5527 18 is_stmt 0 view .LVU9279
 34449 0050 074B     		ldr	r3, .L2559+12
 34450 0052 0122     		movs	r2, #1
 34451 0054 1A60     		str	r2, [r3]
5530:src/xeq.c     **** 
 34452              		.loc 1 5530 2 view .LVU9280
 34453 0056 38BD     		pop	{r3, r4, r5, pc}
 34454              	.L2558:
5522:src/xeq.c     ****        finish_RPN(); // RPN
 34455              		.loc 1 5522 8 is_stmt 1 view .LVU9281
 34456 0058 8D20     		movs	r0, #141
 34457 005a FFF7FEFF 		bl	set_dot
 34458              	.LVL2657:
5523:src/xeq.c     ****      }
 34459              		.loc 1 5523 8 view .LVU9282
 34460 005e FFF7FEFF 		bl	finish_RPN
 34461              	.LVL2658:
 34462 0062 F5E7     		b	.L2542
 34463              	.L2560:
 34464              		.align	2
 34465              	.L2559:
 34466 0064 00000000 		.word	Running
 34467 0068 00000000 		.word	Pause
 34468 006c 00000000 		.word	ShowRPN
ARM GAS  /tmp/ccaPnj5t.s 			page 866


 34469 0070 00000000 		.word	JustStopped
 34470              		.cfi_endproc
 34471              	.LFE253:
 34473              		.section	.text.xeq_sst_bst,"ax",%progbits
 34474              		.align	1
 34475              		.p2align 2,,3
 34476              		.global	xeq_sst_bst
 34477              		.syntax unified
 34478              		.thumb
 34479              		.thumb_func
 34480              		.fpu fpv4-sp-d16
 34482              	xeq_sst_bst:
 34483              	.LVL2659:
 34484              	.LFB254:
5535:src/xeq.c     **** 	opcode op;
 34485              		.loc 1 5535 1 view -0
 34486              		.cfi_startproc
 34487              		@ args = 0, pretend = 0, frame = 0
 34488              		@ frame_needed = 0, uses_anonymous_args = 0
5536:src/xeq.c     **** 
 34489              		.loc 1 5536 2 view .LVU9284
5538:src/xeq.c     **** 	if (kind == -1)
 34490              		.loc 1 5538 2 view .LVU9285
 34491              	.LBB4606:
 34492              	.LBI4606:
4428:src/xeq.c     **** 	// extern int IntMaxWindow;
 34493              		.loc 1 4428 6 view .LVU9286
 34494              	.LBB4607:
4431:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34495              		.loc 1 4431 2 view .LVU9287
 34496              	.LBE4607:
 34497              	.LBE4606:
5535:src/xeq.c     **** 	opcode op;
 34498              		.loc 1 5535 1 is_stmt 0 view .LVU9288
 34499 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 34500              		.cfi_def_cfa_offset 24
 34501              		.cfi_offset 4, -24
 34502              		.cfi_offset 5, -20
 34503              		.cfi_offset 6, -16
 34504              		.cfi_offset 7, -12
 34505              		.cfi_offset 8, -8
 34506              		.cfi_offset 14, -4
 34507              	.LBB4610:
 34508              	.LBB4608:
4431:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34509              		.loc 1 4431 16 view .LVU9289
 34510 0004 254C     		ldr	r4, .L2574
 34511 0006 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4432:src/xeq.c     **** }
 34512              		.loc 1 4432 15 view .LVU9290
 34513 0008 0026     		movs	r6, #0
4431:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34514              		.loc 1 4431 16 view .LVU9291
 34515 000a 6FF3C503 		bfc	r3, #3, #3
 34516              	.LBE4608:
 34517              	.LBE4610:
5539:src/xeq.c     **** 		decpc();
ARM GAS  /tmp/ccaPnj5t.s 			page 867


 34518              		.loc 1 5539 5 view .LVU9292
 34519 000e 411C     		adds	r1, r0, #1
 34520              	.LBB4611:
 34521              	.LBB4609:
4431:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34522              		.loc 1 4431 16 view .LVU9293
 34523 0010 2375     		strb	r3, [r4, #20]
4432:src/xeq.c     **** }
 34524              		.loc 1 4432 2 is_stmt 1 view .LVU9294
4432:src/xeq.c     **** }
 34525              		.loc 1 4432 15 is_stmt 0 view .LVU9295
 34526 0012 6674     		strb	r6, [r4, #17]
 34527              	.LBE4609:
 34528              	.LBE4611:
5539:src/xeq.c     **** 		decpc();
 34529              		.loc 1 5539 2 is_stmt 1 view .LVU9296
5539:src/xeq.c     **** 		decpc();
 34530              		.loc 1 5539 5 is_stmt 0 view .LVU9297
 34531 0014 30D0     		beq	.L2570
5542:src/xeq.c     **** 		// Display the step
 34532              		.loc 1 5542 2 is_stmt 1 view .LVU9298
5542:src/xeq.c     **** 		// Display the step
 34533              		.loc 1 5542 6 is_stmt 0 view .LVU9299
 34534 0016 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5542:src/xeq.c     **** 		// Display the step
 34535              		.loc 1 5542 5 view .LVU9300
 34536 0018 5B06     		lsls	r3, r3, #25
 34537 001a 0546     		mov	r5, r0
 34538 001c 08D4     		bmi	.L2571
5561:src/xeq.c     **** 		// Key down in program mode
 34539              		.loc 1 5561 7 is_stmt 1 view .LVU9301
5561:src/xeq.c     **** 		// Key down in program mode
 34540              		.loc 1 5561 10 is_stmt 0 view .LVU9302
 34541 001e 08B1     		cbz	r0, .L2572
 34542              	.LVL2660:
 34543              	.L2561:
5566:src/xeq.c     **** 
 34544              		.loc 1 5566 1 view .LVU9303
 34545 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34546              	.LVL2661:
 34547              	.L2572:
5563:src/xeq.c     **** 		OpCode = 0;
 34548              		.loc 1 5563 3 is_stmt 1 view .LVU9304
 34549 0024 FFF7FEFF 		bl	incpc
 34550              	.LVL2662:
5564:src/xeq.c     **** 	}
 34551              		.loc 1 5564 3 view .LVU9305
5564:src/xeq.c     **** 	}
 34552              		.loc 1 5564 10 is_stmt 0 view .LVU9306
 34553 0028 1D4B     		ldr	r3, .L2574+4
 34554 002a 1D60     		str	r5, [r3]
5566:src/xeq.c     **** 
 34555              		.loc 1 5566 1 view .LVU9307
 34556 002c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34557              	.LVL2663:
 34558              	.L2571:
5544:src/xeq.c     **** 		print_step(op);
ARM GAS  /tmp/ccaPnj5t.s 			page 868


 34559              		.loc 1 5544 3 is_stmt 1 view .LVU9308
5544:src/xeq.c     **** 		print_step(op);
 34560              		.loc 1 5544 16 is_stmt 0 view .LVU9309
 34561 0030 1C4B     		ldr	r3, .L2574+8
 34562 0032 1B68     		ldr	r3, [r3]
5544:src/xeq.c     **** 		print_step(op);
 34563              		.loc 1 5544 8 view .LVU9310
 34564 0034 B3F8E007 		ldrh	r0, [r3, #2016]
 34565              	.LVL2664:
5544:src/xeq.c     **** 		print_step(op);
 34566              		.loc 1 5544 8 view .LVU9311
 34567 0038 FFF7FEFF 		bl	getprog
 34568              	.LVL2665:
 34569 003c 0746     		mov	r7, r0
 34570              	.LVL2666:
5545:src/xeq.c     **** 		if (kind == 1) {
 34571              		.loc 1 5545 3 is_stmt 1 view .LVU9312
 34572 003e FFF7FEFF 		bl	print_step
 34573              	.LVL2667:
5546:src/xeq.c     **** 			// Execute the step on key up
 34574              		.loc 1 5546 3 view .LVU9313
5546:src/xeq.c     **** 			// Execute the step on key up
 34575              		.loc 1 5546 6 is_stmt 0 view .LVU9314
 34576 0042 012D     		cmp	r5, #1
 34577 0044 ECD1     		bne	.L2561
5549:src/xeq.c     **** #endif
 34578              		.loc 1 5549 4 is_stmt 1 view .LVU9315
5549:src/xeq.c     **** #endif
 34579              		.loc 1 5549 15 is_stmt 0 view .LVU9316
 34580 0046 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34581              	.LBB4612:
 34582              	.LBB4613:
5786:src/xeq.c     **** }
 34583              		.loc 1 5786 10 view .LVU9317
 34584 0048 DFF85C80 		ldr	r8, .L2574+12
 34585              	.LBE4613:
 34586              	.LBE4612:
5549:src/xeq.c     **** #endif
 34587              		.loc 1 5549 15 view .LVU9318
 34588 004c 43F00203 		orr	r3, r3, #2
 34589 0050 2376     		strb	r3, [r4, #24]
5551:src/xeq.c     **** 			incpc();
 34590              		.loc 1 5551 4 is_stmt 1 view .LVU9319
 34591              	.LBB4615:
 34592              	.LBI4612:
5785:src/xeq.c     **** 	Running = 1;
 34593              		.loc 1 5785 6 view .LVU9320
 34594              	.LBB4614:
5786:src/xeq.c     **** }
 34595              		.loc 1 5786 2 view .LVU9321
5786:src/xeq.c     **** }
 34596              		.loc 1 5786 10 is_stmt 0 view .LVU9322
 34597 0052 C8F80050 		str	r5, [r8]
 34598              	.LBE4614:
 34599              	.LBE4615:
5552:src/xeq.c     **** 			xeq(op);
 34600              		.loc 1 5552 4 is_stmt 1 view .LVU9323
ARM GAS  /tmp/ccaPnj5t.s 			page 869


 34601 0056 FFF7FEFF 		bl	incpc
 34602              	.LVL2668:
5553:src/xeq.c     **** #ifndef REALBUILD
 34603              		.loc 1 5553 4 view .LVU9324
 34604 005a 3846     		mov	r0, r7
 34605 005c FFF7FEFF 		bl	xeq
 34606              	.LVL2669:
5555:src/xeq.c     **** #endif
 34607              		.loc 1 5555 4 view .LVU9325
5555:src/xeq.c     **** #endif
 34608              		.loc 1 5555 15 is_stmt 0 view .LVU9326
 34609 0060 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34610              	.LBB4616:
 34611              	.LBB4617:
5475:src/xeq.c     **** 		xeq_xrom2();
 34612              		.loc 1 5475 5 view .LVU9327
 34613 0062 94F91720 		ldrsb	r2, [r4, #23]
 34614              	.LBE4617:
 34615              	.LBE4616:
5555:src/xeq.c     **** #endif
 34616              		.loc 1 5555 15 view .LVU9328
 34617 0066 66F34103 		bfi	r3, r6, #1, #1
 34618              	.LBB4621:
 34619              	.LBB4618:
5475:src/xeq.c     **** 		xeq_xrom2();
 34620              		.loc 1 5475 5 view .LVU9329
 34621 006a 002A     		cmp	r2, #0
 34622              	.LBE4618:
 34623              	.LBE4621:
5555:src/xeq.c     **** #endif
 34624              		.loc 1 5555 15 view .LVU9330
 34625 006c 2376     		strb	r3, [r4, #24]
5557:src/xeq.c     **** 			set_running_off_sst();
 34626              		.loc 1 5557 4 is_stmt 1 view .LVU9331
 34627              	.LBB4622:
 34628              	.LBI4616:
5473:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34629              		.loc 1 5473 6 view .LVU9332
 34630              	.LBB4619:
5475:src/xeq.c     **** 		xeq_xrom2();
 34631              		.loc 1 5475 2 view .LVU9333
5475:src/xeq.c     **** 		xeq_xrom2();
 34632              		.loc 1 5475 5 is_stmt 0 view .LVU9334
 34633 006e 12DA     		bge	.L2573
 34634              	.L2568:
 34635              	.LBE4619:
 34636              	.LBE4622:
5558:src/xeq.c     **** 		}
 34637              		.loc 1 5558 4 is_stmt 1 view .LVU9335
 34638              	.LBB4623:
 34639              	.LBI4623:
5781:src/xeq.c     **** 	Running = 0;
 34640              		.loc 1 5781 6 view .LVU9336
 34641              	.LBB4624:
5782:src/xeq.c     **** }
 34642              		.loc 1 5782 2 view .LVU9337
5782:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 870


 34643              		.loc 1 5782 10 is_stmt 0 view .LVU9338
 34644 0070 0023     		movs	r3, #0
 34645 0072 C8F80030 		str	r3, [r8]
5783:src/xeq.c     **** 
 34646              		.loc 1 5783 1 view .LVU9339
 34647 0076 D3E7     		b	.L2561
 34648              	.LVL2670:
 34649              	.L2570:
5783:src/xeq.c     **** 
 34650              		.loc 1 5783 1 view .LVU9340
 34651              	.LBE4624:
 34652              	.LBE4623:
5540:src/xeq.c     **** 
 34653              		.loc 1 5540 3 is_stmt 1 view .LVU9341
 34654 0078 FFF7FEFF 		bl	decpc
 34655              	.LVL2671:
5542:src/xeq.c     **** 		// Display the step
 34656              		.loc 1 5542 2 view .LVU9342
5542:src/xeq.c     **** 		// Display the step
 34657              		.loc 1 5542 6 is_stmt 0 view .LVU9343
 34658 007c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5542:src/xeq.c     **** 		// Display the step
 34659              		.loc 1 5542 5 view .LVU9344
 34660 007e 5A06     		lsls	r2, r3, #25
 34661 0080 CED5     		bpl	.L2561
5544:src/xeq.c     **** 		print_step(op);
 34662              		.loc 1 5544 3 is_stmt 1 view .LVU9345
5544:src/xeq.c     **** 		print_step(op);
 34663              		.loc 1 5544 16 is_stmt 0 view .LVU9346
 34664 0082 084B     		ldr	r3, .L2574+8
 34665 0084 1B68     		ldr	r3, [r3]
5544:src/xeq.c     **** 		print_step(op);
 34666              		.loc 1 5544 8 view .LVU9347
 34667 0086 B3F8E007 		ldrh	r0, [r3, #2016]
 34668 008a FFF7FEFF 		bl	getprog
 34669              	.LVL2672:
5545:src/xeq.c     **** 		if (kind == 1) {
 34670              		.loc 1 5545 3 is_stmt 1 view .LVU9348
5566:src/xeq.c     **** 
 34671              		.loc 1 5566 1 is_stmt 0 view .LVU9349
 34672 008e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 34673              		.cfi_remember_state
 34674              		.cfi_restore 14
 34675              		.cfi_restore 8
 34676              		.cfi_restore 7
 34677              		.cfi_restore 6
 34678              		.cfi_restore 5
 34679              		.cfi_restore 4
 34680              		.cfi_def_cfa_offset 0
5545:src/xeq.c     **** 		if (kind == 1) {
 34681              		.loc 1 5545 3 view .LVU9350
 34682 0092 FFF7FEBF 		b	print_step
 34683              	.LVL2673:
 34684              	.L2573:
 34685              		.cfi_restore_state
 34686              	.LBB4625:
 34687              	.LBB4620:
ARM GAS  /tmp/ccaPnj5t.s 			page 871


5476:src/xeq.c     **** }
 34688              		.loc 1 5476 3 is_stmt 1 view .LVU9351
 34689 0096 FFF7FEFF 		bl	xeq_xrom2
 34690              	.LVL2674:
 34691 009a E9E7     		b	.L2568
 34692              	.L2575:
 34693              		.align	2
 34694              	.L2574:
 34695 009c 00000000 		.word	StateWhileOn
 34696 00a0 00000000 		.word	OpCode
 34697 00a4 00000000 		.word	main_ram
 34698 00a8 00000000 		.word	Running
 34699              	.LBE4620:
 34700              	.LBE4625:
 34701              		.cfi_endproc
 34702              	.LFE254:
 34704              		.section	.text.init_34s,"ax",%progbits
 34705              		.align	1
 34706              		.p2align 2,,3
 34707              		.global	init_34s
 34708              		.syntax unified
 34709              		.thumb
 34710              		.thumb_func
 34711              		.fpu fpv4-sp-d16
 34713              	init_34s:
 34714              	.LFB271:
6311:src/xeq.c     **** 
6312:src/xeq.c     **** 
6313:src/xeq.c     **** /*
6314:src/xeq.c     ****  *  Debugging output for the console version
6315:src/xeq.c     ****  */
6316:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(WP34STEST)
6317:src/xeq.c     **** extern unsigned char remap_chars(unsigned char ch);
6318:src/xeq.c     **** 
6319:src/xeq.c     **** static int compare(s_opcode a1, s_opcode a2, int cata) {
6320:src/xeq.c     **** 	char b1[16], b2[16];
6321:src/xeq.c     **** 	const unsigned char *s1, *s2;
6322:src/xeq.c     **** 	int i;
6323:src/xeq.c     **** 
6324:src/xeq.c     **** 	xset(b1, 0, sizeof(b1));
6325:src/xeq.c     **** 	xset(b2, 0, sizeof(b2));
6326:src/xeq.c     **** 	s1 = (unsigned char *)catcmd(a1, b1);
6327:src/xeq.c     **** 	s2 = (unsigned char *)catcmd(a2, b2);
6328:src/xeq.c     **** 	if (*s1 == COMPLEX_PREFIX) s1++;
6329:src/xeq.c     **** 	if (*s2 == COMPLEX_PREFIX) s2++;
6330:src/xeq.c     **** 
6331:src/xeq.c     **** 	for (i=0;;i++) {
6332:src/xeq.c     **** 		unsigned char c1 = *s1++;
6333:src/xeq.c     **** 		unsigned char c2 = *s2++;
6334:src/xeq.c     **** 		c1 = remap_chars(c1);
6335:src/xeq.c     **** 		c2 = remap_chars(c2);
6336:src/xeq.c     **** 
6337:src/xeq.c     **** 		if (c1 != c2) {
6338:src/xeq.c     **** 			if (c1 > c2) {
6339:src/xeq.c     **** 				return 1;
6340:src/xeq.c     **** 			}
6341:src/xeq.c     **** 			return 0;
ARM GAS  /tmp/ccaPnj5t.s 			page 872


6342:src/xeq.c     **** 		} else if (c1 == '\0')
6343:src/xeq.c     **** 			break;
6344:src/xeq.c     **** 	}
6345:src/xeq.c     **** 	return 0;
6346:src/xeq.c     **** }
6347:src/xeq.c     **** 
6348:src/xeq.c     **** static void check_cat(const enum catalogues cata, const char *name) {
6349:src/xeq.c     **** 	int i;
6350:src/xeq.c     **** 	char b1[16], b2[16];
6351:src/xeq.c     **** 	const int oldcata = State2.catalogue;
6352:src/xeq.c     **** 	int n;
6353:src/xeq.c     **** 
6354:src/xeq.c     **** 	State2.catalogue = cata;
6355:src/xeq.c     **** 	n = current_catalogue_max();
6356:src/xeq.c     **** 	for (i=1; i<n; i++) {
6357:src/xeq.c     **** 		opcode cold = current_catalogue(i-1);
6358:src/xeq.c     **** 		opcode c = current_catalogue(i);
6359:src/xeq.c     **** 		if (compare(cold, c, cata))
6360:src/xeq.c     **** 			error("catalogue %s row %04x / %04x  %d / %d: %04o / %04o (%s / %s)", name, cold, c, i-1, i,
6361:src/xeq.c     **** 					0xff & cold, 0xff & c,
6362:src/xeq.c     **** 					catcmd(cold, b1), catcmd(c, b2));
6363:src/xeq.c     **** 	}
6364:src/xeq.c     **** 	State2.catalogue = oldcata;
6365:src/xeq.c     **** }
6366:src/xeq.c     **** 
6367:src/xeq.c     **** static void check_const_cat(void) {
6368:src/xeq.c     **** 	int i;
6369:src/xeq.c     **** 	char b1[16], b2[16];
6370:src/xeq.c     **** 	char p1[64], p2[64];
6371:src/xeq.c     **** 
6372:src/xeq.c     **** 	for (i=1; i<NUM_CONSTS_CAT; i++) {
6373:src/xeq.c     **** 		if (compare(CONST(i-1), CONST(i), 0)) {
6374:src/xeq.c     **** 			prettify(catcmd(CONST(i-1), b1), p1, 0);
6375:src/xeq.c     **** 			prettify(catcmd(CONST(i), b2), p2, 0);
6376:src/xeq.c     **** 			error("constants row %d / %d: %s / %s", i, i+1, p1, p2);
6377:src/xeq.c     **** 		}
6378:src/xeq.c     **** 	}
6379:src/xeq.c     **** }
6380:src/xeq.c     **** 
6381:src/xeq.c     **** static void bad_table(const char *t, int row, const char *n, int nlen) {
6382:src/xeq.c     **** 	char buf[64], name[20];
6383:src/xeq.c     **** 	int i;
6384:src/xeq.c     **** 
6385:src/xeq.c     **** 	for (i=0; i<nlen; i++)
6386:src/xeq.c     **** 		name[i] = n[i];
6387:src/xeq.c     **** 	name[nlen] = '\0';
6388:src/xeq.c     **** 	prettify(name, buf, 0);
6389:src/xeq.c     **** 	error("%s table row %d: %6s", t, row, buf);
6390:src/xeq.c     **** }
6391:src/xeq.c     **** 
6392:src/xeq.c     **** #endif
6393:src/xeq.c     **** 
6394:src/xeq.c     **** /* Main initialisation routine that sets things up for us.
6395:src/xeq.c     ****  * Returns a nonzero result if it has cleared ram.
6396:src/xeq.c     ****  */
6397:src/xeq.c     **** int init_34s(void)
6398:src/xeq.c     **** {
ARM GAS  /tmp/ccaPnj5t.s 			page 873


 34715              		.loc 1 6398 1 view -0
 34716              		.cfi_startproc
 34717              		@ args = 0, pretend = 0, frame = 0
 34718              		@ frame_needed = 0, uses_anonymous_args = 0
6399:src/xeq.c     **** 	const int cleared = checksum_all();
 34719              		.loc 1 6399 2 view .LVU9353
6398:src/xeq.c     **** 	const int cleared = checksum_all();
 34720              		.loc 1 6398 1 is_stmt 0 view .LVU9354
 34721 0000 10B5     		push	{r4, lr}
 34722              		.cfi_def_cfa_offset 8
 34723              		.cfi_offset 4, -8
 34724              		.cfi_offset 14, -4
 34725              		.loc 1 6399 22 view .LVU9355
 34726 0002 FFF7FEFF 		bl	checksum_ram
 34727              	.LVL2675:
6400:src/xeq.c     **** 	if (cleared) {
 34728              		.loc 1 6400 2 is_stmt 1 view .LVU9356
 34729              		.loc 1 6400 5 is_stmt 0 view .LVU9357
 34730 0006 0446     		mov	r4, r0
 34731 0008 58B9     		cbnz	r0, .L2582
 34732              	.LVL2676:
 34733              	.L2577:
6401:src/xeq.c     **** 		reset();
6402:src/xeq.c     **** 	}
6403:src/xeq.c     **** 	init_state();
 34734              		.loc 1 6403 2 is_stmt 1 view .LVU9358
 34735 000a FFF7FEFF 		bl	init_state
 34736              	.LVL2677:
6404:src/xeq.c     **** 	xeq_init_contexts();
 34737              		.loc 1 6404 2 view .LVU9359
 34738 000e FFF7FEFF 		bl	xeq_init_contexts
 34739              	.LVL2678:
6405:src/xeq.c     **** 	ShowRPN = 1;
 34740              		.loc 1 6405 2 view .LVU9360
 34741              		.loc 1 6405 10 is_stmt 0 view .LVU9361
 34742 0012 054B     		ldr	r3, .L2583
 34743 0014 0122     		movs	r2, #1
6406:src/xeq.c     **** 	set_dot(RPN);
 34744              		.loc 1 6406 2 view .LVU9362
 34745 0016 8D20     		movs	r0, #141
6405:src/xeq.c     **** 	ShowRPN = 1;
 34746              		.loc 1 6405 10 view .LVU9363
 34747 0018 1A60     		str	r2, [r3]
 34748              		.loc 1 6406 2 is_stmt 1 view .LVU9364
 34749 001a FFF7FEFF 		bl	set_dot
 34750              	.LVL2679:
6407:src/xeq.c     **** 
6408:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
6409:src/xeq.c     **** 	StopWatchRunning = 0;
6410:src/xeq.c     **** #endif
6411:src/xeq.c     **** #if defined(CONSOLE) && !defined(WP34STEST) && defined(DEBUG)
6412:src/xeq.c     **** 	{
6413:src/xeq.c     **** 		int i;
6414:src/xeq.c     **** 	/* Sanity check the function table indices.
6415:src/xeq.c     **** 	 * These indicies must correspond exactly with the enum definition.
6416:src/xeq.c     **** 	 * This code validates that this is true and prints error messages
6417:src/xeq.c     **** 	 * if it isn't.
ARM GAS  /tmp/ccaPnj5t.s 			page 874


6418:src/xeq.c     **** 	 */
6419:src/xeq.c     **** 	for (i=0; i<NUM_MONADIC; i++)
6420:src/xeq.c     **** 		if (monfuncs[i].n != i)
6421:src/xeq.c     **** 			bad_table("monadic function", i, monfuncs[i].fname, NAME_LEN);
6422:src/xeq.c     **** 	for (i=0; i<NUM_DYADIC; i++)
6423:src/xeq.c     **** 		if (dyfuncs[i].n != i)
6424:src/xeq.c     **** 			bad_table("dyadic function", i, dyfuncs[i].fname, NAME_LEN);
6425:src/xeq.c     **** 	for (i=0; i<NUM_TRIADIC; i++)
6426:src/xeq.c     **** 		if (trifuncs[i].n != i)
6427:src/xeq.c     **** 			bad_table("triadic function", i, trifuncs[i].fname, NAME_LEN);
6428:src/xeq.c     **** 	for (i=0; i<NUM_NILADIC; i++)
6429:src/xeq.c     **** 		if (niladics[i].n != i)
6430:src/xeq.c     **** 			bad_table("niladic function", i, niladics[i].nname, NAME_LEN);
6431:src/xeq.c     **** 	for (i=0; i<NUM_RARG; i++)
6432:src/xeq.c     **** 		if (argcmds[i].n != i)
6433:src/xeq.c     **** 			bad_table("argument command", i, argcmds[i].cmd, NAME_LEN);
6434:src/xeq.c     **** 	for (i=0; i<NUM_MULTI; i++)
6435:src/xeq.c     **** 		if (multicmds[i].n != i)
6436:src/xeq.c     **** 			bad_table("multi command", i, multicmds[i].cmd, NAME_LEN);
6437:src/xeq.c     **** 	check_const_cat();
6438:src/xeq.c     **** 	check_cat(CATALOGUE_COMPLEX, "complex");
6439:src/xeq.c     **** 	check_cat(CATALOGUE_STATS, "statistics");
6440:src/xeq.c     **** 	check_cat(CATALOGUE_SUMS, "summations");
6441:src/xeq.c     **** 	check_cat(CATALOGUE_PROB, "probability");
6442:src/xeq.c     **** 	check_cat(CATALOGUE_PROG, "programme");
6443:src/xeq.c     **** 	check_cat(CATALOGUE_MODE, "mode");
6444:src/xeq.c     **** 	check_cat(CATALOGUE_TEST, "tests");
6445:src/xeq.c     **** 	check_cat(CATALOGUE_INT, "int");
6446:src/xeq.c     **** 	check_cat(CATALOGUE_MATRIX, "matrix");
6447:src/xeq.c     **** 	/*
6448:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA, "alpha");
6449:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_LETTERS, "alpha special upper case letters");
6450:src/xeq.c     **** 	// check_cat(CATALOGUE_ALPHA_LETTERS_LOWER, "alpha special lower letters");
6451:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SUBSCRIPTS, "alpha subscripts");
6452:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SYMBOLS, "alpha symbols");
6453:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_COMPARES, "alpha compares");
6454:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_ARROWS, "alpha arrows");
6455:src/xeq.c     **** 	*/
6456:src/xeq.c     **** 	check_cat(CATALOGUE_CONV, "conversion");
6457:src/xeq.c     **** 	check_cat(CATALOGUE_NORMAL, "float");
6458:src/xeq.c     **** #ifdef INCLUDE_INTERNAL_CATALOGUE
6459:src/xeq.c     **** 	check_cat(CATALOGUE_INTERNAL, "internal");
6460:src/xeq.c     **** #endif
6461:src/xeq.c     ****         if (sizeof(unsigned long long int) != sizeof(UState))
6462:src/xeq.c     ****             error("sizeof register (%u) != sizeof user state (%u)\n", sizeof(unsigned long long int
6463:src/xeq.c     **** 	}
6464:src/xeq.c     **** #endif
6465:src/xeq.c     **** 	return cleared;
 34751              		.loc 1 6465 2 view .LVU9365
6466:src/xeq.c     **** }
 34752              		.loc 1 6466 1 is_stmt 0 view .LVU9366
 34753 001e 2046     		mov	r0, r4
 34754 0020 10BD     		pop	{r4, pc}
 34755              	.LVL2680:
 34756              	.L2582:
6401:src/xeq.c     **** 	}
 34757              		.loc 1 6401 3 is_stmt 1 view .LVU9367
ARM GAS  /tmp/ccaPnj5t.s 			page 875


 34758 0022 FFF7FEFF 		bl	reset
 34759              	.LVL2681:
6401:src/xeq.c     **** 	}
 34760              		.loc 1 6401 3 is_stmt 0 view .LVU9368
 34761 0026 F0E7     		b	.L2577
 34762              	.L2584:
 34763              		.align	2
 34764              	.L2583:
 34765 0028 00000000 		.word	ShowRPN
 34766              		.cfi_endproc
 34767              	.LFE271:
 34769              		.section	.rodata.paste_raw_x.str1.4,"aMS",%progbits,1
 34770              		.align	2
 34771              	.LC9:
 34772 0000 0D0A0920 		.ascii	"\015\012\011 :;\000"
 34772      3A3B00
 34773              		.section	.text.paste_raw_x,"ax",%progbits
 34774              		.align	1
 34775              		.p2align 2,,3
 34776              		.global	paste_raw_x
 34777              		.syntax unified
 34778              		.thumb
 34779              		.thumb_func
 34780              		.fpu fpv4-sp-d16
 34782              	paste_raw_x:
 34783              	.LVL2682:
 34784              	.LFB272:
6467:src/xeq.c     **** 
6468:src/xeq.c     **** #ifndef REALBUILD
6469:src/xeq.c     **** 
6470:src/xeq.c     **** #include "string.h"
6471:src/xeq.c     **** 
6472:src/xeq.c     **** void paste_raw_x(const char *in)
6473:src/xeq.c     **** {
 34785              		.loc 1 6473 1 is_stmt 1 view -0
 34786              		.cfi_startproc
 34787              		@ args = 0, pretend = 0, frame = 40
 34788              		@ frame_needed = 0, uses_anonymous_args = 0
6474:src/xeq.c     **** 	char *buffer = strdup( in );
 34789              		.loc 1 6474 2 view .LVU9370
6473:src/xeq.c     **** 	char *buffer = strdup( in );
 34790              		.loc 1 6473 1 is_stmt 0 view .LVU9371
 34791 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 34792              		.cfi_def_cfa_offset 32
 34793              		.cfi_offset 4, -32
 34794              		.cfi_offset 5, -28
 34795              		.cfi_offset 6, -24
 34796              		.cfi_offset 7, -20
 34797              		.cfi_offset 8, -16
 34798              		.cfi_offset 9, -12
 34799              		.cfi_offset 10, -8
 34800              		.cfi_offset 14, -4
 34801 0004 8AB0     		sub	sp, sp, #40
 34802              		.cfi_def_cfa_offset 72
 34803              		.loc 1 6474 17 view .LVU9372
 34804 0006 FFF7FEFF 		bl	strdup
 34805              	.LVL2683:
ARM GAS  /tmp/ccaPnj5t.s 			page 876


6475:src/xeq.c     **** 
6476:src/xeq.c     **** 	if ( buffer ) {
 34806              		.loc 1 6476 2 is_stmt 1 view .LVU9373
 34807              		.loc 1 6476 5 is_stmt 0 view .LVU9374
 34808 000a 0028     		cmp	r0, #0
 34809 000c 5CD0     		beq	.L2586
 34810              	.LBB4626:
6477:src/xeq.c     **** 		static const char *delim = "\r\n\t :;";
 34811              		.loc 1 6477 3 is_stmt 1 view .LVU9375
6478:src/xeq.c     **** 		char *p = strtok( buffer, delim );
 34812              		.loc 1 6478 3 view .LVU9376
 34813              	.LBB4627:
 34814              	.LBB4628:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34815              		.loc 1 1211 6 is_stmt 0 view .LVU9377
 34816 000e 394D     		ldr	r5, .L2621
 34817              	.LBE4628:
 34818              	.LBE4627:
 34819              		.loc 1 6478 13 view .LVU9378
 34820 0010 3949     		ldr	r1, .L2621+4
 34821 0012 8146     		mov	r9, r0
 34822 0014 FFF7FEFF 		bl	strtok
 34823              	.LVL2684:
 34824              	.LBB4632:
 34825              	.LBB4629:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34826              		.loc 1 1211 5 view .LVU9379
 34827 0018 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 34828              	.LBE4629:
 34829              	.LBE4632:
 34830              		.loc 1 6478 13 view .LVU9380
 34831 001a 0446     		mov	r4, r0
 34832              	.LVL2685:
6479:src/xeq.c     **** 		process_cmdline();
 34833              		.loc 1 6479 3 is_stmt 1 view .LVU9381
 34834              	.LBB4633:
 34835              	.LBI4627:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 34836              		.loc 1 1208 6 view .LVU9382
 34837              	.LBB4630:
1209:src/xeq.c     **** 
 34838              		.loc 1 1209 2 view .LVU9383
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34839              		.loc 1 1211 2 view .LVU9384
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34840              		.loc 1 1211 5 is_stmt 0 view .LVU9385
 34841 001c 002B     		cmp	r3, #0
 34842 001e 5ED1     		bne	.L2617
 34843              	.LVL2686:
 34844              	.L2587:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34845              		.loc 1 1211 5 view .LVU9386
 34846              	.LBE4630:
 34847              	.LBE4633:
6480:src/xeq.c     **** 		while ( p ) {
 34848              		.loc 1 6480 9 is_stmt 1 view .LVU9387
 34849 0020 002C     		cmp	r4, #0
ARM GAS  /tmp/ccaPnj5t.s 			page 877


 34850 0022 4ED0     		beq	.L2595
 34851 0024 354E     		ldr	r6, .L2621+8
 34852              	.LBB4634:
 34853              	.LBB4635:
6481:src/xeq.c     **** 			char *pp = strchr( p, ',' );
6482:src/xeq.c     **** 			if ( pp ) {
6483:src/xeq.c     **** 				*pp = '.';
6484:src/xeq.c     **** 			}
6485:src/xeq.c     **** 			if (is_intmode()) {
6486:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
6487:src/xeq.c     **** 				lift_if_enabled();
6488:src/xeq.c     **** 				set_lift();
6489:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
6490:src/xeq.c     **** 			} else {
6491:src/xeq.c     **** 				decNumber x;
6492:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 34854              		.loc 1 6492 5 is_stmt 0 view .LVU9388
 34855 0026 DFF8DC80 		ldr	r8, .L2621+16
 34856              	.LBE4635:
6493:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
6494:src/xeq.c     **** 					lift_if_enabled();
6495:src/xeq.c     **** 					set_lift();
6496:src/xeq.c     **** 					setX(&x);
6497:src/xeq.c     **** 				}
6498:src/xeq.c     **** 				else {
6499:src/xeq.c     **** 					error_message(Error);
6500:src/xeq.c     **** 					Error = 0;
6501:src/xeq.c     **** 					break;
6502:src/xeq.c     **** 				}
6503:src/xeq.c     **** 			}
6504:src/xeq.c     **** 			p = strtok( NULL, delim );
 34857              		.loc 1 6504 8 view .LVU9389
 34858 002a 334F     		ldr	r7, .L2621+4
 34859 002c 21E0     		b	.L2596
 34860              	.LVL2687:
 34861              	.L2619:
 34862              	.LBB4654:
6486:src/xeq.c     **** 				lift_if_enabled();
 34863              		.loc 1 6486 5 is_stmt 1 view .LVU9390
6486:src/xeq.c     **** 				lift_if_enabled();
 34864              		.loc 1 6486 31 is_stmt 0 view .LVU9391
 34865 002e 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 34866              	.LBB4655:
 34867              	.LBB4656:
 34868              	.LBB4657:
 34869              	.LBB4658:
 738:src/xeq.c     **** }
 34870              		.loc 1 738 15 view .LVU9392
 34871 0032 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34872              	.LBE4658:
 34873              	.LBE4657:
 34874              	.LBE4656:
 34875              	.LBE4655:
6486:src/xeq.c     **** 				lift_if_enabled();
 34876              		.loc 1 6486 31 view .LVU9393
 34877 0034 AAF12D0A 		sub	r10, r10, #45
 34878 0038 BAFA8AFA 		clz	r10, r10
ARM GAS  /tmp/ccaPnj5t.s 			page 878


 34879              	.LBB4664:
 34880              	.LBB4661:
 742:src/xeq.c     **** 		lift();
 34881              		.loc 1 742 5 view .LVU9394
 34882 003c 5A06     		lsls	r2, r3, #25
 34883              	.LBE4661:
 34884              	.LBE4664:
6486:src/xeq.c     **** 				lift_if_enabled();
 34885              		.loc 1 6486 31 view .LVU9395
 34886 003e 4FEA5A1A 		lsr	r10, r10, #5
 34887              	.LVL2688:
6487:src/xeq.c     **** 				set_lift();
 34888              		.loc 1 6487 5 is_stmt 1 view .LVU9396
 34889              	.LBB4665:
 34890              	.LBI4655:
 741:src/xeq.c     **** 	if (get_lift())
 34891              		.loc 1 741 6 view .LVU9397
 34892              	.LBB4662:
 742:src/xeq.c     **** 		lift();
 34893              		.loc 1 742 2 view .LVU9398
 34894              	.LBB4660:
 34895              	.LBI4657:
 737:src/xeq.c     **** 	return State2.state_lift;
 34896              		.loc 1 737 12 view .LVU9399
 34897              	.LBB4659:
 738:src/xeq.c     **** }
 34898              		.loc 1 738 2 view .LVU9400
 34899              	.LBE4659:
 34900              	.LBE4660:
 742:src/xeq.c     **** 		lift();
 34901              		.loc 1 742 5 is_stmt 0 view .LVU9401
 34902 0042 46D4     		bmi	.L2618
 34903              	.LVL2689:
 34904              	.L2591:
 742:src/xeq.c     **** 		lift();
 34905              		.loc 1 742 5 view .LVU9402
 34906              	.LBE4662:
 34907              	.LBE4665:
6488:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
 34908              		.loc 1 6488 5 is_stmt 1 view .LVU9403
 34909              	.LBB4666:
 34910              	.LBI4666:
 761:src/xeq.c     ****     State2.state_lift = 1;
 34911              		.loc 1 761 6 view .LVU9404
 34912              	.LBB4667:
 762:src/xeq.c     **** }
 34913              		.loc 1 762 5 view .LVU9405
 762:src/xeq.c     **** }
 34914              		.loc 1 762 23 is_stmt 0 view .LVU9406
 34915 0044 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 34916 0046 43F04003 		orr	r3, r3, #64
 34917 004a EB75     		strb	r3, [r5, #23]
 34918              	.LBE4667:
 34919              	.LBE4666:
6489:src/xeq.c     **** 			} else {
 34920              		.loc 1 6489 5 is_stmt 1 view .LVU9407
6489:src/xeq.c     **** 			} else {
ARM GAS  /tmp/ccaPnj5t.s 			page 879


 34921              		.loc 1 6489 50 is_stmt 0 view .LVU9408
 34922 004c FFF7FEFF 		bl	int_base
 34923              	.LVL2690:
6489:src/xeq.c     **** 			} else {
 34924              		.loc 1 6489 37 view .LVU9409
 34925 0050 5444     		add	r4, r4, r10
 34926              	.LVL2691:
6489:src/xeq.c     **** 			} else {
 34927              		.loc 1 6489 50 view .LVU9410
 34928 0052 0246     		mov	r2, r0
6489:src/xeq.c     **** 			} else {
 34929              		.loc 1 6489 5 view .LVU9411
 34930 0054 0021     		movs	r1, #0
 34931 0056 2046     		mov	r0, r4
 34932 0058 FFF7FEFF 		bl	strtoull
 34933              	.LVL2692:
 34934 005c 5246     		mov	r2, r10
 34935 005e FFF7FEFF 		bl	build_value
 34936              	.LVL2693:
 34937 0062 FFF7FEFF 		bl	setX_int
 34938              	.LVL2694:
 34939              	.LBE4654:
 34940              		.loc 1 6504 4 is_stmt 1 view .LVU9412
 34941              		.loc 1 6504 8 is_stmt 0 view .LVU9413
 34942 0066 3946     		mov	r1, r7
 34943 0068 0020     		movs	r0, #0
 34944 006a FFF7FEFF 		bl	strtok
 34945              	.LVL2695:
 34946              		.loc 1 6504 8 view .LVU9414
 34947              	.LBE4634:
6480:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 34948              		.loc 1 6480 9 is_stmt 1 view .LVU9415
 34949 006e 0446     		mov	r4, r0
 34950 0070 38B3     		cbz	r0, .L2595
 34951              	.LVL2696:
 34952              	.L2596:
 34953              	.LBB4673:
6481:src/xeq.c     **** 			if ( pp ) {
 34954              		.loc 1 6481 4 view .LVU9416
6481:src/xeq.c     **** 			if ( pp ) {
 34955              		.loc 1 6481 15 is_stmt 0 view .LVU9417
 34956 0072 2C21     		movs	r1, #44
 34957 0074 2046     		mov	r0, r4
 34958 0076 FFF7FEFF 		bl	strchr
 34959              	.LVL2697:
6482:src/xeq.c     **** 				*pp = '.';
 34960              		.loc 1 6482 4 is_stmt 1 view .LVU9418
6482:src/xeq.c     **** 				*pp = '.';
 34961              		.loc 1 6482 7 is_stmt 0 view .LVU9419
 34962 007a 08B1     		cbz	r0, .L2589
6483:src/xeq.c     **** 			}
 34963              		.loc 1 6483 5 is_stmt 1 view .LVU9420
6483:src/xeq.c     **** 			}
 34964              		.loc 1 6483 9 is_stmt 0 view .LVU9421
 34965 007c 2E23     		movs	r3, #46
 34966 007e 0370     		strb	r3, [r0]
 34967              	.L2589:
ARM GAS  /tmp/ccaPnj5t.s 			page 880


6485:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34968              		.loc 1 6485 4 is_stmt 1 view .LVU9422
6485:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34969              		.loc 1 6485 8 is_stmt 0 view .LVU9423
 34970 0080 3368     		ldr	r3, [r6]
 34971 0082 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
6485:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 34972              		.loc 1 6485 7 view .LVU9424
 34973 0086 13F0010A 		ands	r10, r3, #1
 34974 008a D0D1     		bne	.L2619
 34975              	.LBB4669:
6491:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 34976              		.loc 1 6491 5 is_stmt 1 view .LVU9425
6492:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 34977              		.loc 1 6492 5 view .LVU9426
 34978 008c 2146     		mov	r1, r4
 34979 008e 01A8     		add	r0, sp, #4
 34980              	.LVL2698:
6492:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 34981              		.loc 1 6492 5 is_stmt 0 view .LVU9427
 34982 0090 4246     		mov	r2, r8
 34983 0092 FFF7FEFF 		bl	decNumberFromString
 34984              	.LVL2699:
6493:src/xeq.c     **** 					lift_if_enabled();
 34985              		.loc 1 6493 5 is_stmt 1 view .LVU9428
6493:src/xeq.c     **** 					lift_if_enabled();
 34986              		.loc 1 6493 11 is_stmt 0 view .LVU9429
 34987 0096 01A8     		add	r0, sp, #4
 34988 0098 FFF7FEFF 		bl	check_special
 34989              	.LVL2700:
6493:src/xeq.c     **** 					lift_if_enabled();
 34990              		.loc 1 6493 8 view .LVU9430
 34991 009c 10BB     		cbnz	r0, .L2593
6494:src/xeq.c     **** 					set_lift();
 34992              		.loc 1 6494 6 is_stmt 1 view .LVU9431
 34993              	.LBB4636:
 34994              	.LBI4636:
 741:src/xeq.c     **** 	if (get_lift())
 34995              		.loc 1 741 6 view .LVU9432
 34996              	.LBB4637:
 742:src/xeq.c     **** 		lift();
 34997              		.loc 1 742 2 view .LVU9433
 34998              	.LBB4638:
 34999              	.LBI4638:
 737:src/xeq.c     **** 	return State2.state_lift;
 35000              		.loc 1 737 12 view .LVU9434
 35001              	.LBB4639:
 738:src/xeq.c     **** }
 35002              		.loc 1 738 2 view .LVU9435
 738:src/xeq.c     **** }
 35003              		.loc 1 738 15 is_stmt 0 view .LVU9436
 35004 009e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35005              	.LBE4639:
 35006              	.LBE4638:
 742:src/xeq.c     **** 		lift();
 35007              		.loc 1 742 5 view .LVU9437
 35008 00a0 5B06     		lsls	r3, r3, #25
ARM GAS  /tmp/ccaPnj5t.s 			page 881


 35009 00a2 19D4     		bmi	.L2620
 35010              	.L2594:
 35011              	.LBE4637:
 35012              	.LBE4636:
6495:src/xeq.c     **** 					setX(&x);
 35013              		.loc 1 6495 6 is_stmt 1 view .LVU9438
 35014              	.LBB4641:
 35015              	.LBI4641:
 761:src/xeq.c     ****     State2.state_lift = 1;
 35016              		.loc 1 761 6 view .LVU9439
 35017              	.LBB4642:
 762:src/xeq.c     **** }
 35018              		.loc 1 762 5 view .LVU9440
 762:src/xeq.c     **** }
 35019              		.loc 1 762 23 is_stmt 0 view .LVU9441
 35020 00a4 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35021              	.LBE4642:
 35022              	.LBE4641:
 35023              	.LBB4645:
 35024              	.LBB4646:
 823:src/xeq.c     **** }
 35025              		.loc 1 823 2 view .LVU9442
 35026 00a6 01A9     		add	r1, sp, #4
 35027              	.LBE4646:
 35028              	.LBE4645:
 35029              	.LBB4649:
 35030              	.LBB4643:
 762:src/xeq.c     **** }
 35031              		.loc 1 762 23 view .LVU9443
 35032 00a8 43F04003 		orr	r3, r3, #64
 35033              	.LBE4643:
 35034              	.LBE4649:
 35035              	.LBB4650:
 35036              	.LBB4647:
 823:src/xeq.c     **** }
 35037              		.loc 1 823 2 view .LVU9444
 35038 00ac 6420     		movs	r0, #100
 35039              	.LBE4647:
 35040              	.LBE4650:
 35041              	.LBB4651:
 35042              	.LBB4644:
 762:src/xeq.c     **** }
 35043              		.loc 1 762 23 view .LVU9445
 35044 00ae EB75     		strb	r3, [r5, #23]
 35045              	.LBE4644:
 35046              	.LBE4651:
6496:src/xeq.c     **** 				}
 35047              		.loc 1 6496 6 is_stmt 1 view .LVU9446
 35048              	.LVL2701:
 35049              	.LBB4652:
 35050              	.LBI4645:
 822:src/xeq.c     **** 	setRegister(regX_idx, x);
 35051              		.loc 1 822 6 view .LVU9447
 35052              	.LBB4648:
 823:src/xeq.c     **** }
 35053              		.loc 1 823 2 view .LVU9448
 35054 00b0 FFF7FEFF 		bl	setRegister
ARM GAS  /tmp/ccaPnj5t.s 			page 882


 35055              	.LVL2702:
 823:src/xeq.c     **** }
 35056              		.loc 1 823 2 is_stmt 0 view .LVU9449
 35057              	.LBE4648:
 35058              	.LBE4652:
 35059              	.LBE4669:
 35060              		.loc 1 6504 4 is_stmt 1 view .LVU9450
 35061              		.loc 1 6504 8 is_stmt 0 view .LVU9451
 35062 00b4 3946     		mov	r1, r7
 35063 00b6 0020     		movs	r0, #0
 35064 00b8 FFF7FEFF 		bl	strtok
 35065              	.LVL2703:
 35066              		.loc 1 6504 8 view .LVU9452
 35067              	.LBE4673:
6480:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 35068              		.loc 1 6480 9 is_stmt 1 view .LVU9453
 35069 00bc 0446     		mov	r4, r0
 35070 00be 0028     		cmp	r0, #0
 35071 00c0 D7D1     		bne	.L2596
 35072              	.LVL2704:
 35073              	.L2595:
6505:src/xeq.c     **** 		}
6506:src/xeq.c     **** 		free( buffer );
 35074              		.loc 1 6506 3 view .LVU9454
 35075 00c2 4846     		mov	r0, r9
 35076 00c4 FFF7FEFF 		bl	free
 35077              	.LVL2705:
 35078              	.L2586:
 35079              		.loc 1 6506 3 is_stmt 0 view .LVU9455
 35080              	.LBE4626:
6507:src/xeq.c     **** 	}
6508:src/xeq.c     **** 	display();
 35081              		.loc 1 6508 2 is_stmt 1 view .LVU9456
 35082 00c8 FFF7FEFF 		bl	display
 35083              	.LVL2706:
6509:src/xeq.c     **** }
 35084              		.loc 1 6509 1 is_stmt 0 view .LVU9457
 35085 00cc 0AB0     		add	sp, sp, #40
 35086              		.cfi_remember_state
 35087              		.cfi_def_cfa_offset 32
 35088              		@ sp needed
 35089 00ce BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 35090              	.LVL2707:
 35091              	.L2618:
 35092              		.cfi_restore_state
 35093              	.LBB4677:
 35094              	.LBB4674:
 35095              	.LBB4670:
 35096              	.LBB4668:
 35097              	.LBB4663:
 743:src/xeq.c     **** }
 35098              		.loc 1 743 3 is_stmt 1 view .LVU9458
 35099 00d2 FFF7FEFF 		bl	lift
 35100              	.LVL2708:
 743:src/xeq.c     **** }
 35101              		.loc 1 743 3 is_stmt 0 view .LVU9459
 35102 00d6 B5E7     		b	.L2591
ARM GAS  /tmp/ccaPnj5t.s 			page 883


 35103              	.LVL2709:
 35104              	.L2620:
 743:src/xeq.c     **** }
 35105              		.loc 1 743 3 view .LVU9460
 35106              	.LBE4663:
 35107              	.LBE4668:
 35108              	.LBE4670:
 35109              	.LBB4671:
 35110              	.LBB4653:
 35111              	.LBB4640:
 743:src/xeq.c     **** }
 35112              		.loc 1 743 3 is_stmt 1 view .LVU9461
 35113 00d8 FFF7FEFF 		bl	lift
 35114              	.LVL2710:
 35115 00dc E2E7     		b	.L2594
 35116              	.LVL2711:
 35117              	.L2617:
 743:src/xeq.c     **** }
 35118              		.loc 1 743 3 is_stmt 0 view .LVU9462
 35119              	.LBE4640:
 35120              	.LBE4653:
 35121              	.LBE4671:
 35122              	.LBE4674:
 35123              	.LBB4675:
 35124              	.LBB4631:
 35125 00de FFF7FEFF 		bl	process_cmdline.part.0
 35126              	.LVL2712:
 743:src/xeq.c     **** }
 35127              		.loc 1 743 3 view .LVU9463
 35128 00e2 9DE7     		b	.L2587
 35129              	.L2593:
 743:src/xeq.c     **** }
 35130              		.loc 1 743 3 view .LVU9464
 35131              	.LBE4631:
 35132              	.LBE4675:
 35133              	.LBB4676:
 35134              	.LBB4672:
6499:src/xeq.c     **** 					Error = 0;
 35135              		.loc 1 6499 6 is_stmt 1 view .LVU9465
 35136 00e4 064C     		ldr	r4, .L2621+12
 35137              	.LVL2713:
6499:src/xeq.c     **** 					Error = 0;
 35138              		.loc 1 6499 6 is_stmt 0 view .LVU9466
 35139 00e6 2068     		ldr	r0, [r4]
 35140 00e8 FFF7FEFF 		bl	error_message
 35141              	.LVL2714:
6500:src/xeq.c     **** 					break;
 35142              		.loc 1 6500 6 is_stmt 1 view .LVU9467
6500:src/xeq.c     **** 					break;
 35143              		.loc 1 6500 12 is_stmt 0 view .LVU9468
 35144 00ec C4F800A0 		str	r10, [r4]
6501:src/xeq.c     **** 				}
 35145              		.loc 1 6501 6 is_stmt 1 view .LVU9469
 35146 00f0 E7E7     		b	.L2595
 35147              	.L2622:
 35148 00f2 00BF     		.align	2
 35149              	.L2621:
ARM GAS  /tmp/ccaPnj5t.s 			page 884


 35150 00f4 00000000 		.word	StateWhileOn
 35151 00f8 00000000 		.word	.LC9
 35152 00fc 00000000 		.word	main_ram
 35153 0100 00000000 		.word	Error
 35154 0104 00000000 		.word	Ctx
 35155              	.LBE4672:
 35156              	.LBE4676:
 35157              	.LBE4677:
 35158              		.cfi_endproc
 35159              	.LFE272:
 35161              		.global	__aeabi_uldivmod
 35162              		.section	.rodata.fill_buffer_from_raw_x.str1.4,"aMS",%progbits,1
 35163              		.align	2
 35164              	.LC10:
 35165 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 35165      34353637 
 35165      38394142 
 35165      43444546 
 35165      00
 35166              		.section	.text.fill_buffer_from_raw_x,"ax",%progbits
 35167              		.align	1
 35168              		.p2align 2,,3
 35169              		.global	fill_buffer_from_raw_x
 35170              		.syntax unified
 35171              		.thumb
 35172              		.thumb_func
 35173              		.fpu fpv4-sp-d16
 35175              	fill_buffer_from_raw_x:
 35176              	.LVL2715:
 35177              	.LFB273:
6510:src/xeq.c     **** 
6511:src/xeq.c     **** char* fill_buffer_from_raw_x(char *buffer)
6512:src/xeq.c     **** {
 35178              		.loc 1 6512 1 view -0
 35179              		.cfi_startproc
 35180              		@ args = 0, pretend = 0, frame = 40
 35181              		@ frame_needed = 0, uses_anonymous_args = 0
6513:src/xeq.c     **** 	process_cmdline();
 35182              		.loc 1 6513 2 view .LVU9471
 35183              	.LBB4678:
 35184              	.LBI4678:
1208:src/xeq.c     **** 	decNumber a, b, x, t;
 35185              		.loc 1 1208 6 view .LVU9472
 35186              	.LBB4679:
1209:src/xeq.c     **** 
 35187              		.loc 1 1209 2 view .LVU9473
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35188              		.loc 1 1211 2 view .LVU9474
 35189              	.LBE4679:
 35190              	.LBE4678:
6512:src/xeq.c     **** 	process_cmdline();
 35191              		.loc 1 6512 1 is_stmt 0 view .LVU9475
 35192 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 35193              		.cfi_def_cfa_offset 36
 35194              		.cfi_offset 4, -36
 35195              		.cfi_offset 5, -32
 35196              		.cfi_offset 6, -28
ARM GAS  /tmp/ccaPnj5t.s 			page 885


 35197              		.cfi_offset 7, -24
 35198              		.cfi_offset 8, -20
 35199              		.cfi_offset 9, -16
 35200              		.cfi_offset 10, -12
 35201              		.cfi_offset 11, -8
 35202              		.cfi_offset 14, -4
 35203              	.LBB4683:
 35204              	.LBB4680:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35205              		.loc 1 1211 6 view .LVU9476
 35206 0004 2F4B     		ldr	r3, .L2647
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35207              		.loc 1 1211 5 view .LVU9477
 35208 0006 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 35209              	.LBE4680:
 35210              	.LBE4683:
6512:src/xeq.c     **** 	process_cmdline();
 35211              		.loc 1 6512 1 view .LVU9478
 35212 0008 8BB0     		sub	sp, sp, #44
 35213              		.cfi_def_cfa_offset 80
6512:src/xeq.c     **** 	process_cmdline();
 35214              		.loc 1 6512 1 view .LVU9479
 35215 000a 0446     		mov	r4, r0
 35216              	.LBB4684:
 35217              	.LBB4681:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35218              		.loc 1 1211 5 view .LVU9480
 35219 000c 002B     		cmp	r3, #0
 35220 000e 55D1     		bne	.L2644
 35221              	.LVL2716:
 35222              	.L2624:
1211:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35223              		.loc 1 1211 5 view .LVU9481
 35224              	.LBE4681:
 35225              	.LBE4684:
6514:src/xeq.c     **** 	if (is_intmode()) {
 35226              		.loc 1 6514 2 is_stmt 1 view .LVU9482
 35227              		.loc 1 6514 6 is_stmt 0 view .LVU9483
 35228 0010 2D4D     		ldr	r5, .L2647+4
 35229 0012 2B68     		ldr	r3, [r5]
 35230 0014 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 35231              		.loc 1 6514 5 view .LVU9484
 35232 0018 DA07     		lsls	r2, r3, #31
 35233 001a 2CD5     		bpl	.L2625
 35234              	.LBB4685:
6515:src/xeq.c     **** 		int sgn;
 35235              		.loc 1 6515 3 is_stmt 1 view .LVU9485
6516:src/xeq.c     **** 		unsigned long long int x = extract_value(get_reg_n_int(regX_idx), &sgn);
 35236              		.loc 1 6516 3 view .LVU9486
 35237              		.loc 1 6516 30 is_stmt 0 view .LVU9487
 35238 001c 6420     		movs	r0, #100
 35239 001e FFF7FEFF 		bl	get_reg_n_int
 35240              	.LVL2717:
 35241 0022 01AA     		add	r2, sp, #4
 35242 0024 FFF7FEFF 		bl	extract_value
 35243              	.LVL2718:
 35244 0028 0646     		mov	r6, r0
ARM GAS  /tmp/ccaPnj5t.s 			page 886


 35245 002a 0F46     		mov	r7, r1
 35246              	.LVL2719:
6517:src/xeq.c     **** 		const int base = int_base();
 35247              		.loc 1 6517 3 is_stmt 1 view .LVU9488
 35248              		.loc 1 6517 20 is_stmt 0 view .LVU9489
 35249 002c FFF7FEFF 		bl	int_base
 35250              	.LVL2720:
6518:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
6519:src/xeq.c     **** 
6520:src/xeq.c     **** 		*p-- = '\0';
 35251              		.loc 1 6520 8 view .LVU9490
 35252 0030 0023     		movs	r3, #0
 35253              	.LVL2721:
6518:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
 35254              		.loc 1 6518 3 is_stmt 1 view .LVU9491
 35255              		.loc 1 6520 3 view .LVU9492
 35256              		.loc 1 6520 8 is_stmt 0 view .LVU9493
 35257 0032 E370     		strb	r3, [r4, #3]
6521:src/xeq.c     **** 		if (x == 0)
 35258              		.loc 1 6521 3 is_stmt 1 view .LVU9494
 35259              		.loc 1 6521 6 is_stmt 0 view .LVU9495
 35260 0034 56EA0703 		orrs	r3, r6, r7
 35261 0038 35D0     		beq	.L2645
 35262 003a 244D     		ldr	r5, .L2647+8
6520:src/xeq.c     **** 		if (x == 0)
 35263              		.loc 1 6520 5 view .LVU9496
 35264 003c 0234     		adds	r4, r4, #2
 35265              	.LVL2722:
6520:src/xeq.c     **** 		if (x == 0)
 35266              		.loc 1 6520 5 view .LVU9497
 35267 003e 8046     		mov	r8, r0
 35268 0040 4FEAE079 		asr	r9, r0, #31
 35269              	.LVL2723:
 35270              	.L2628:
 35271              	.LBB4686:
6522:src/xeq.c     **** 			*p-- = '0'; 
6523:src/xeq.c     **** 		else {
6524:src/xeq.c     **** 			while (x != 0) {
6525:src/xeq.c     **** 				const int n = x % base;
 35272              		.loc 1 6525 5 is_stmt 1 view .LVU9498
 35273 0044 3046     		mov	r0, r6
 35274 0046 3946     		mov	r1, r7
 35275 0048 4246     		mov	r2, r8
 35276 004a 4B46     		mov	r3, r9
 35277 004c FFF7FEFF 		bl	__aeabi_uldivmod
 35278              	.LVL2724:
6526:src/xeq.c     **** 				x /= base;
 35279              		.loc 1 6526 5 view .LVU9499
 35280 0050 BB46     		mov	fp, r7
 35281 0052 B246     		mov	r10, r6
 35282              	.LBE4686:
6524:src/xeq.c     **** 				const int n = x % base;
 35283              		.loc 1 6524 10 is_stmt 0 view .LVU9500
 35284 0054 CB45     		cmp	fp, r9
 35285              	.LBB4687:
6527:src/xeq.c     **** 				*p-- = n["0123456789ABCDEF"];
 35286              		.loc 1 6527 10 view .LVU9501
ARM GAS  /tmp/ccaPnj5t.s 			page 887


 35287 0056 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 35288 0058 04F80139 		strb	r3, [r4], #-1
 35289              	.LVL2725:
 35290              		.loc 1 6527 10 view .LVU9502
 35291              	.LBE4687:
6524:src/xeq.c     **** 				const int n = x % base;
 35292              		.loc 1 6524 10 view .LVU9503
 35293 005c 08BF     		it	eq
 35294 005e C245     		cmpeq	r10, r8
 35295              	.LBB4688:
6526:src/xeq.c     **** 				x /= base;
 35296              		.loc 1 6526 7 view .LVU9504
 35297 0060 0646     		mov	r6, r0
 35298              	.LVL2726:
6526:src/xeq.c     **** 				x /= base;
 35299              		.loc 1 6526 7 view .LVU9505
 35300 0062 0F46     		mov	r7, r1
 35301              	.LVL2727:
 35302              		.loc 1 6527 5 is_stmt 1 view .LVU9506
 35303              		.loc 1 6527 5 is_stmt 0 view .LVU9507
 35304              	.LBE4688:
6524:src/xeq.c     **** 				const int n = x % base;
 35305              		.loc 1 6524 10 is_stmt 1 view .LVU9508
 35306 0064 EED2     		bcs	.L2628
6528:src/xeq.c     **** 			}
6529:src/xeq.c     **** 		}
6530:src/xeq.c     **** 		if (sgn)
 35307              		.loc 1 6530 3 view .LVU9509
 35308              		.loc 1 6530 6 is_stmt 0 view .LVU9510
 35309 0066 019B     		ldr	r3, [sp, #4]
 35310 0068 1BB3     		cbz	r3, .L2629
 35311              	.LVL2728:
 35312              	.L2646:
6531:src/xeq.c     **** 			*p = '-';
 35313              		.loc 1 6531 4 is_stmt 1 view .LVU9511
 35314              		.loc 1 6531 7 is_stmt 0 view .LVU9512
 35315 006a 2D23     		movs	r3, #45
 35316 006c 2370     		strb	r3, [r4]
 35317              	.LVL2729:
 35318              	.L2623:
 35319              		.loc 1 6531 7 view .LVU9513
 35320              	.LBE4685:
6532:src/xeq.c     **** 		else
6533:src/xeq.c     **** 			p++;
6534:src/xeq.c     **** 		return p;
6535:src/xeq.c     **** 	} else {
6536:src/xeq.c     **** 		decNumber x;
6537:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
6538:src/xeq.c     **** 		if (UState.fraccomma) {
6539:src/xeq.c     **** 			char *p = strchr(buffer, '.');
6540:src/xeq.c     **** 			if (p != NULL)
6541:src/xeq.c     **** 				*p = ',';
6542:src/xeq.c     **** 		}
6543:src/xeq.c     **** 
6544:src/xeq.c     **** 		return buffer;
6545:src/xeq.c     **** 	}
6546:src/xeq.c     **** }
ARM GAS  /tmp/ccaPnj5t.s 			page 888


 35321              		.loc 1 6546 1 view .LVU9514
 35322 006e 2046     		mov	r0, r4
 35323 0070 0BB0     		add	sp, sp, #44
 35324              		.cfi_remember_state
 35325              		.cfi_def_cfa_offset 36
 35326              		@ sp needed
 35327 0072 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35328              	.LVL2730:
 35329              	.L2625:
 35330              		.cfi_restore_state
 35331              	.LBB4689:
6536:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
 35332              		.loc 1 6536 3 is_stmt 1 view .LVU9515
6537:src/xeq.c     **** 		if (UState.fraccomma) {
 35333              		.loc 1 6537 3 view .LVU9516
 35334              	.LBB4690:
 35335              	.LBI4690:
 818:src/xeq.c     **** 	return getRegister(x, regX_idx);
 35336              		.loc 1 818 12 view .LVU9517
 35337              	.LBB4691:
 819:src/xeq.c     **** }
 35338              		.loc 1 819 2 view .LVU9518
 819:src/xeq.c     **** }
 35339              		.loc 1 819 9 is_stmt 0 view .LVU9519
 35340 0076 6421     		movs	r1, #100
 35341 0078 01A8     		add	r0, sp, #4
 35342              	.LVL2731:
 819:src/xeq.c     **** }
 35343              		.loc 1 819 9 view .LVU9520
 35344 007a FFF7FEFF 		bl	getRegister
 35345              	.LVL2732:
 819:src/xeq.c     **** }
 35346              		.loc 1 819 9 view .LVU9521
 35347              	.LBE4691:
 35348              	.LBE4690:
6537:src/xeq.c     **** 		if (UState.fraccomma) {
 35349              		.loc 1 6537 3 view .LVU9522
 35350 007e 2146     		mov	r1, r4
 35351 0080 FFF7FEFF 		bl	decNumberToString
 35352              	.LVL2733:
6538:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35353              		.loc 1 6538 3 is_stmt 1 view .LVU9523
6538:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35354              		.loc 1 6538 7 is_stmt 0 view .LVU9524
 35355 0084 2B68     		ldr	r3, [r5]
 35356 0086 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
6538:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35357              		.loc 1 6538 6 view .LVU9525
 35358 008a 9B06     		lsls	r3, r3, #26
 35359 008c EFD5     		bpl	.L2623
 35360              	.LBB4692:
6539:src/xeq.c     **** 			if (p != NULL)
 35361              		.loc 1 6539 4 is_stmt 1 view .LVU9526
6539:src/xeq.c     **** 			if (p != NULL)
 35362              		.loc 1 6539 14 is_stmt 0 view .LVU9527
 35363 008e 2E21     		movs	r1, #46
 35364 0090 2046     		mov	r0, r4
ARM GAS  /tmp/ccaPnj5t.s 			page 889


 35365 0092 FFF7FEFF 		bl	strchr
 35366              	.LVL2734:
6540:src/xeq.c     **** 				*p = ',';
 35367              		.loc 1 6540 4 is_stmt 1 view .LVU9528
6540:src/xeq.c     **** 				*p = ',';
 35368              		.loc 1 6540 7 is_stmt 0 view .LVU9529
 35369 0096 0028     		cmp	r0, #0
 35370 0098 E9D0     		beq	.L2623
6541:src/xeq.c     **** 		}
 35371              		.loc 1 6541 5 is_stmt 1 view .LVU9530
6541:src/xeq.c     **** 		}
 35372              		.loc 1 6541 8 is_stmt 0 view .LVU9531
 35373 009a 2C23     		movs	r3, #44
 35374 009c 0370     		strb	r3, [r0]
 35375              	.LBE4692:
6544:src/xeq.c     **** 	}
 35376              		.loc 1 6544 3 is_stmt 1 view .LVU9532
 35377              	.LBE4689:
 35378              		.loc 1 6546 1 is_stmt 0 view .LVU9533
 35379 009e 2046     		mov	r0, r4
 35380              	.LVL2735:
 35381              		.loc 1 6546 1 view .LVU9534
 35382 00a0 0BB0     		add	sp, sp, #44
 35383              		.cfi_remember_state
 35384              		.cfi_def_cfa_offset 36
 35385              		@ sp needed
 35386 00a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35387              	.LVL2736:
 35388              	.L2645:
 35389              		.cfi_restore_state
 35390              	.LBB4693:
6522:src/xeq.c     **** 		else {
 35391              		.loc 1 6522 4 is_stmt 1 view .LVU9535
6522:src/xeq.c     **** 		else {
 35392              		.loc 1 6522 9 is_stmt 0 view .LVU9536
 35393 00a6 3023     		movs	r3, #48
 35394 00a8 A370     		strb	r3, [r4, #2]
6530:src/xeq.c     **** 			*p = '-';
 35395              		.loc 1 6530 6 view .LVU9537
 35396 00aa 019B     		ldr	r3, [sp, #4]
6522:src/xeq.c     **** 		else {
 35397              		.loc 1 6522 6 view .LVU9538
 35398 00ac 0134     		adds	r4, r4, #1
 35399              	.LVL2737:
6530:src/xeq.c     **** 			*p = '-';
 35400              		.loc 1 6530 3 is_stmt 1 view .LVU9539
6530:src/xeq.c     **** 			*p = '-';
 35401              		.loc 1 6530 6 is_stmt 0 view .LVU9540
 35402 00ae 002B     		cmp	r3, #0
 35403 00b0 DBD1     		bne	.L2646
 35404              	.LVL2738:
 35405              	.L2629:
6533:src/xeq.c     **** 		return p;
 35406              		.loc 1 6533 4 is_stmt 1 view .LVU9541
6533:src/xeq.c     **** 		return p;
 35407              		.loc 1 6533 5 is_stmt 0 view .LVU9542
 35408 00b2 0134     		adds	r4, r4, #1
ARM GAS  /tmp/ccaPnj5t.s 			page 890


 35409              	.LVL2739:
6534:src/xeq.c     **** 	} else {
 35410              		.loc 1 6534 3 is_stmt 1 view .LVU9543
 35411              	.LBE4693:
 35412              		.loc 1 6546 1 is_stmt 0 view .LVU9544
 35413 00b4 2046     		mov	r0, r4
 35414 00b6 0BB0     		add	sp, sp, #44
 35415              		.cfi_remember_state
 35416              		.cfi_def_cfa_offset 36
 35417              		@ sp needed
 35418 00b8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35419              	.LVL2740:
 35420              	.L2644:
 35421              		.cfi_restore_state
 35422              	.LBB4694:
 35423              	.LBB4682:
 35424              		.loc 1 6546 1 view .LVU9545
 35425 00bc FFF7FEFF 		bl	process_cmdline.part.0
 35426              	.LVL2741:
 35427              		.loc 1 6546 1 view .LVU9546
 35428 00c0 A6E7     		b	.L2624
 35429              	.L2648:
 35430 00c2 00BF     		.align	2
 35431              	.L2647:
 35432 00c4 00000000 		.word	StateWhileOn
 35433 00c8 00000000 		.word	main_ram
 35434 00cc 00000000 		.word	.LC10
 35435              	.LBE4682:
 35436              	.LBE4694:
 35437              		.cfi_endproc
 35438              	.LFE273:
 35440              		.comm	RectPolConv,4,4
 35441              		.comm	StackBase,4,4
 35442              		.comm	RetStk,4,4
 35443              		.comm	ProgFree,4,4
 35444              		.comm	RetStkSize,4,4
 35445              		.comm	TraceBuffer,25,4
 35446              		.comm	Ctx,24,4
 35447              		.comm	UserLocalRegs,4,4
 35448              		.comm	XromUserPc,4,4
 35449              		.comm	ShowRegister,4,4
 35450              		.comm	XeqOpCode,2,2
 35451              		.comm	PcWrapped,4,4
 35452              		.comm	Error,4,4
 35453              		.comm	Busy,4,4
 35454              		.comm	Pause,1,1
 35455              		.comm	JustStopped,4,4
 35456              		.comm	XromRunning,4,4
 35457              		.comm	Running,4,4
 35458              		.global	xrom_targets
 35459              		.section	.rodata
 35460              		.align	2
 35461              		.set	.LANCHOR5,. + 0
 35462              	.LC1:
 35463 0000 0C0C0C0C 		.ascii	"\014\014\014\014\014\014\014\014\014\013\013\013\014"
 35463      0C0C0C0C 
 35463      0C0B0B0B 
ARM GAS  /tmp/ccaPnj5t.s 			page 891


 35463      0C
 35464 000d 0C0A0A0C 		.ascii	"\014\012\012\014\014\014\007\010\011\014\014\014\004"
 35464      0C0C0708 
 35464      090C0C0C 
 35464      04
 35465 001a 05060C0C 		.ascii	"\005\006\014\014\014\001\002\003\014\014\014\000\012"
 35465      0C010203 
 35465      0C0C0C00 
 35465      0A
 35466 0027 0C0C     		.ascii	"\014\014"
 35467              		.section	.bss.result.11584,"aw",%nobits
 35468              		.align	2
 35469              		.set	.LANCHOR2,. + 0
 35472              	result.11584:
 35473 0000 00000000 		.space	16
 35473      00000000 
 35473      00000000 
 35473      00000000 
 35474              		.section	.data.RegionTab,"aw"
 35475              		.align	2
 35476              		.set	.LANCHOR0,. + 0
 35479              	RegionTab:
 35480 0000 00000000 		.word	0
 35481 0004 00000000 		.word	0
 35482 0008 00000000 		.word	0
 35483 000c 00000000 		.word	xrom
 35484              		.section	.rodata.StackRegMask,"a"
 35485              		.align	2
 35486              		.set	.LANCHOR3,. + 0
 35489              	StackRegMask:
 35490 0000 0F01     		.short	271
 35491 0002 FF01     		.short	511
 35492              		.section	.rodata.convergence_tolerances,"a"
 35493              		.align	2
 35494              		.set	.LANCHOR7,. + 0
 35497              	convergence_tolerances:
 35498 0000 00000000 		.word	const_1e_14
 35499 0004 00000000 		.word	const_1e_24
 35500 0008 00000000 		.word	const_1e_32
 35501              		.section	.rodata.modes.11283,"a"
 35502              		.align	2
 35503              		.set	.LANCHOR1,. + 0
 35506              	modes.11283:
 35507 0000 03020401 		.ascii	"\003\002\004\001\005\000\006"
 35507      050006
 35508              		.section	.rodata.modes.11794,"a"
 35509              		.align	2
 35510              		.set	.LANCHOR4,. + 0
 35513              	modes.11794:
 35514 0000 02010081 		.ascii	"\002\001\000\201"
 35515              		.section	.rodata.xrom_targets,"a"
 35516              		.align	2
 35517              		.set	.LANCHOR6,. + 0
 35520              	xrom_targets:
 35521 0000 9107     		.short	1937
 35522 0002 B70B     		.short	2999
 35523 0004 4602     		.short	582
ARM GAS  /tmp/ccaPnj5t.s 			page 892


 35524 0006 4402     		.short	580
 35525 0008 420A     		.short	2626
 35526 000a 340A     		.short	2612
 35527 000c 100C     		.short	3088
 35528 000e 9C05     		.short	1436
 35529 0010 3B0A     		.short	2619
 35530 0012 5A06     		.short	1626
 35531 0014 6F06     		.short	1647
 35532 0016 6B06     		.short	1643
 35533 0018 6406     		.short	1636
 35534 001a 390A     		.short	2617
 35535 001c 7206     		.short	1650
 35536 001e 7506     		.short	1653
 35537 0020 7706     		.short	1655
 35538 0022 5D06     		.short	1629
 35539 0024 5707     		.short	1879
 35540 0026 4F08     		.short	2127
 35541 0028 EB05     		.short	1515
 35542 002a 0405     		.short	1284
 35543 002c 2907     		.short	1833
 35544 002e 8205     		.short	1410
 35545 0030 9A05     		.short	1434
 35546 0032 EC05     		.short	1516
 35547 0034 490A     		.short	2633
 35548              		.text
 35549              	.Letext0:
 35550              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 35551              		.file 3 "dmcp/dmcp.h"
 35552              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 35553              		.file 5 "/usr/include/newlib/sys/_types.h"
 35554              		.file 6 "/usr/include/newlib/sys/reent.h"
 35555              		.file 7 "/usr/include/newlib/sys/lock.h"
 35556              		.file 8 "/usr/include/newlib/stdlib.h"
 35557              		.file 9 "src/decNumber/decContext.h"
 35558              		.file 10 "src/decNumber/decNumber.h"
 35559              		.file 11 "src/decNumber/decimal64.h"
 35560              		.file 12 "src/decNumber/decimal128.h"
 35561              		.file 13 "src/xeq.h"
 35562              		.file 14 "src/data.h"
 35563              		.file 15 "src/keys.h"
 35564              		.file 16 "src/menu.h"
 35565              		.file 17 "src/storage.h"
 35566              		.file 18 "src/stats.h"
 35567              		.file 19 "src/display.h"
 35568              		.file 20 "src/consts.h"
 35569              		.file 21 "src/xrom.h"
 35570              		.file 22 "src/pretty.h"
 35571              		.file 23 "src/xrom_targets.c"
 35572              		.file 24 "src/int.h"
 35573              		.file 25 "/usr/include/newlib/string.h"
 35574              		.file 26 "src/lcd.h"
 35575              		.file 27 "src/decn.h"
 35576              		.file 28 "src/complex.h"
 35577              		.file 29 "/usr/include/newlib/stdio.h"
 35578              		.file 30 "src/alpha.h"
ARM GAS  /tmp/ccaPnj5t.s 			page 893


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xeq.c
     /tmp/ccaPnj5t.s:18     .text.find_section_bounds:0000000000000000 $t
     /tmp/ccaPnj5t.s:26     .text.find_section_bounds:0000000000000000 find_section_bounds
     /tmp/ccaPnj5t.s:164    .text.find_section_bounds:0000000000000068 $d
     /tmp/ccaPnj5t.s:172    .text.reg_address:0000000000000000 $t
     /tmp/ccaPnj5t.s:179    .text.reg_address:0000000000000000 reg_address
     /tmp/ccaPnj5t.s:293    .text.reg_address:0000000000000058 $d
     /tmp/ccaPnj5t.s:300    .text.retstk_up:0000000000000000 $t
     /tmp/ccaPnj5t.s:307    .text.retstk_up:0000000000000000 retstk_up
     /tmp/ccaPnj5t.s:440    .text.retstk_up:000000000000006c $d
                            *COM*:0000000000000004 RetStk
     /tmp/ccaPnj5t.s:447    .text.flag_word:0000000000000000 $t
     /tmp/ccaPnj5t.s:454    .text.flag_word:0000000000000000 flag_word
     /tmp/ccaPnj5t.s:574    .text.flag_word:000000000000006c $d
     /tmp/ccaPnj5t.s:581    .text.set_zero:0000000000000000 $t
     /tmp/ccaPnj5t.s:588    .text.set_zero:0000000000000000 set_zero
     /tmp/ccaPnj5t.s:627    .text.set_zero:0000000000000020 $d
     /tmp/ccaPnj5t.s:634    .text.intResult:0000000000000000 $t
     /tmp/ccaPnj5t.s:641    .text.intResult:0000000000000000 intResult
     /tmp/ccaPnj5t.s:841    .text.intResult:00000000000000a4 $d
                            *COM*:0000000000000004 Error
     /tmp/ccaPnj5t.s:847    .text.check_stack_overlap:0000000000000000 $t
     /tmp/ccaPnj5t.s:854    .text.check_stack_overlap:0000000000000000 check_stack_overlap
     /tmp/ccaPnj5t.s:1068   .text.check_stack_overlap:0000000000000068 $d
     /tmp/ccaPnj5t.s:1075   .text.is_xrom:0000000000000000 $t
     /tmp/ccaPnj5t.s:1083   .text.is_xrom:0000000000000000 is_xrom
     /tmp/ccaPnj5t.s:1104   .text.is_xrom:0000000000000018 $d
     /tmp/ccaPnj5t.s:1109   .text.move_retstk:0000000000000000 $t
     /tmp/ccaPnj5t.s:1117   .text.move_retstk:0000000000000000 move_retstk
     /tmp/ccaPnj5t.s:1300   .text.move_retstk:000000000000006c $d
                            *COM*:0000000000000004 RetStkSize
     /tmp/ccaPnj5t.s:1309   .text.local_levels:0000000000000000 $t
     /tmp/ccaPnj5t.s:1317   .text.local_levels:0000000000000000 local_levels
     /tmp/ccaPnj5t.s:1346   .text.local_levels:0000000000000020 $d
     /tmp/ccaPnj5t.s:1352   .text.local_regs_rarg:0000000000000000 $t
     /tmp/ccaPnj5t.s:1360   .text.local_regs_rarg:0000000000000000 local_regs_rarg
     /tmp/ccaPnj5t.s:1460   .text.local_regs_rarg:0000000000000058 $d
     /tmp/ccaPnj5t.s:1466   .text.get_reg_limit:0000000000000000 $t
     /tmp/ccaPnj5t.s:1473   .text.get_reg_limit:0000000000000000 get_reg_limit
     /tmp/ccaPnj5t.s:1711   .text.get_reg_limit:00000000000000b0 $d
     /tmp/ccaPnj5t.s:1720   .text.local_regs:0000000000000000 $t
     /tmp/ccaPnj5t.s:1728   .text.local_regs:0000000000000000 local_regs
     /tmp/ccaPnj5t.s:1826   .text.local_regs:0000000000000038 $d
     /tmp/ccaPnj5t.s:1836   .text.global_regs_rarg:0000000000000000 $t
     /tmp/ccaPnj5t.s:1844   .text.global_regs_rarg:0000000000000000 global_regs_rarg
     /tmp/ccaPnj5t.s:1917   .text.global_regs_rarg:000000000000003c $d
     /tmp/ccaPnj5t.s:1922   .text.global_regs:0000000000000000 $t
     /tmp/ccaPnj5t.s:1930   .text.global_regs:0000000000000000 global_regs
     /tmp/ccaPnj5t.s:1988   .text.global_regs:0000000000000020 $d
     /tmp/ccaPnj5t.s:1993   .text.version:0000000000000000 $t
     /tmp/ccaPnj5t.s:2001   .text.version:0000000000000000 version
     /tmp/ccaPnj5t.s:2032   .text.version:0000000000000018 $d
     /tmp/ccaPnj5t.s:2037   .text.cmd_off:0000000000000000 $t
     /tmp/ccaPnj5t.s:2045   .text.cmd_off:0000000000000000 cmd_off
     /tmp/ccaPnj5t.s:2061   .text.init_RegionTab:0000000000000000 $t
     /tmp/ccaPnj5t.s:2069   .text.init_RegionTab:0000000000000000 init_RegionTab
ARM GAS  /tmp/ccaPnj5t.s 			page 894


     /tmp/ccaPnj5t.s:2107   .text.init_RegionTab:000000000000001c $d
     /tmp/ccaPnj5t.s:2115   .text.sizeLIB:0000000000000000 $t
     /tmp/ccaPnj5t.s:2123   .text.sizeLIB:0000000000000000 sizeLIB
     /tmp/ccaPnj5t.s:2157   .text.sizeLIB:0000000000000018 $d
     /tmp/ccaPnj5t.s:2163   .text.getprog:0000000000000000 $t
     /tmp/ccaPnj5t.s:2171   .text.getprog:0000000000000000 getprog
     /tmp/ccaPnj5t.s:2275   .text.getprog:0000000000000048 $d
     /tmp/ccaPnj5t.s:2283   .text.get_current_prog:0000000000000000 $t
     /tmp/ccaPnj5t.s:2291   .text.get_current_prog:0000000000000000 get_current_prog
     /tmp/ccaPnj5t.s:2323   .text.get_current_prog:0000000000000020 $d
     /tmp/ccaPnj5t.s:2329   .text.do_inc:0000000000000000 $t
     /tmp/ccaPnj5t.s:2337   .text.do_inc:0000000000000000 do_inc
     /tmp/ccaPnj5t.s:2417   .text.do_inc:0000000000000044 $d
                            *COM*:0000000000000004 PcWrapped
     /tmp/ccaPnj5t.s:2422   .text.user_pc.part.0:0000000000000000 $t
     /tmp/ccaPnj5t.s:2429   .text.user_pc.part.0:0000000000000000 user_pc.part.0
     /tmp/ccaPnj5t.s:2499   .text.user_pc.part.0:0000000000000034 $d
     /tmp/ccaPnj5t.s:2504   .rodata.print_step.str1.4:0000000000000000 $d
     /tmp/ccaPnj5t.s:2508   .text.print_step:0000000000000000 $t
     /tmp/ccaPnj5t.s:2515   .text.print_step:0000000000000000 print_step
     /tmp/ccaPnj5t.s:2684   .text.print_step:0000000000000098 $d
                            *COM*:0000000000000019 TraceBuffer
     /tmp/ccaPnj5t.s:2695   .text.do_dec:0000000000000000 $t
     /tmp/ccaPnj5t.s:2703   .text.do_dec:0000000000000000 do_dec
     /tmp/ccaPnj5t.s:2785   .text.do_dec:0000000000000048 $d
     /tmp/ccaPnj5t.s:2790   .text.update_program_bounds:0000000000000000 $t
     /tmp/ccaPnj5t.s:2798   .text.update_program_bounds:0000000000000000 update_program_bounds
     /tmp/ccaPnj5t.s:2951   .text.update_program_bounds:000000000000008c $d
     /tmp/ccaPnj5t.s:2958   .text.set_pc:0000000000000000 $t
     /tmp/ccaPnj5t.s:2966   .text.set_pc:0000000000000000 set_pc
     /tmp/ccaPnj5t.s:3200   .text.set_pc:00000000000000a4 $d
     /tmp/ccaPnj5t.s:3209   .text.incpc:0000000000000000 $t
     /tmp/ccaPnj5t.s:3217   .text.incpc:0000000000000000 incpc
     /tmp/ccaPnj5t.s:3271   .text.incpc:0000000000000024 $d
     /tmp/ccaPnj5t.s:3277   .text.decpc:0000000000000000 $t
     /tmp/ccaPnj5t.s:3285   .text.decpc:0000000000000000 decpc
     /tmp/ccaPnj5t.s:3340   .text.decpc:0000000000000024 $d
     /tmp/ccaPnj5t.s:3347   .text.fin_tst.part.0:0000000000000000 $t
     /tmp/ccaPnj5t.s:3354   .text.fin_tst.part.0:0000000000000000 fin_tst.part.0
     /tmp/ccaPnj5t.s:3387   .text.do_rtn:0000000000000000 $t
     /tmp/ccaPnj5t.s:3394   .text.do_rtn:0000000000000000 do_rtn
     /tmp/ccaPnj5t.s:3572   .text.do_rtn:000000000000008c $d
                            *COM*:0000000000000004 Running
     /tmp/ccaPnj5t.s:3581   .text.user_pc:0000000000000000 $t
     /tmp/ccaPnj5t.s:3589   .text.user_pc:0000000000000000 user_pc
     /tmp/ccaPnj5t.s:3621   .text.find_user_pc:0000000000000000 $t
     /tmp/ccaPnj5t.s:3629   .text.find_user_pc:0000000000000000 find_user_pc
     /tmp/ccaPnj5t.s:3737   .text.find_user_pc:000000000000004c $d
     /tmp/ccaPnj5t.s:3743   .text.report_err:0000000000000000 $t
     /tmp/ccaPnj5t.s:3751   .text.report_err:0000000000000000 report_err
     /tmp/ccaPnj5t.s:3810   .text.report_err:000000000000001c $d
     /tmp/ccaPnj5t.s:3815   .text.report_warn:0000000000000000 $t
     /tmp/ccaPnj5t.s:3823   .text.report_warn:0000000000000000 report_warn
     /tmp/ccaPnj5t.s:3943   .text.report_warn:0000000000000048 $d
     /tmp/ccaPnj5t.s:3952   .text.bad_mode_error:0000000000000000 $t
     /tmp/ccaPnj5t.s:3960   .text.bad_mode_error:0000000000000000 bad_mode_error
     /tmp/ccaPnj5t.s:4001   .text.bad_mode_error:000000000000000c $d
ARM GAS  /tmp/ccaPnj5t.s 			page 895


     /tmp/ccaPnj5t.s:4006   .text.cmderr:0000000000000000 $t
     /tmp/ccaPnj5t.s:4014   .text.cmderr:0000000000000000 cmderr
     /tmp/ccaPnj5t.s:4071   .text.cmderr:0000000000000010 $d
     /tmp/ccaPnj5t.s:4080   .text.cmdmsg:0000000000000000 $t
     /tmp/ccaPnj5t.s:4088   .text.cmdmsg:0000000000000000 cmdmsg
     /tmp/ccaPnj5t.s:4104   .text.rarg_roundingmode:0000000000000000 $t
     /tmp/ccaPnj5t.s:4112   .text.rarg_roundingmode:0000000000000000 rarg_roundingmode
     /tmp/ccaPnj5t.s:4134   .text.rarg_roundingmode:0000000000000014 $d
     /tmp/ccaPnj5t.s:4139   .text.packed_from_number:0000000000000000 $t
     /tmp/ccaPnj5t.s:4147   .text.packed_from_number:0000000000000000 packed_from_number
     /tmp/ccaPnj5t.s:4214   .text.packed_from_number:0000000000000034 $d
     /tmp/ccaPnj5t.s:4220   .text.packed128_from_number:0000000000000000 $t
     /tmp/ccaPnj5t.s:4228   .text.packed128_from_number:0000000000000000 packed128_from_number
     /tmp/ccaPnj5t.s:4295   .text.packed128_from_number:0000000000000034 $d
     /tmp/ccaPnj5t.s:4301   .text.check_special:0000000000000000 $t
     /tmp/ccaPnj5t.s:4308   .text.check_special:0000000000000000 check_special
     /tmp/ccaPnj5t.s:4535   .text.check_special:00000000000000a0 $d
     /tmp/ccaPnj5t.s:4541   .text.packed_from_packed128:0000000000000000 $t
     /tmp/ccaPnj5t.s:4549   .text.packed_from_packed128:0000000000000000 packed_from_packed128
     /tmp/ccaPnj5t.s:4592   .text.packed128_from_packed:0000000000000000 $t
     /tmp/ccaPnj5t.s:4600   .text.packed128_from_packed:0000000000000000 packed128_from_packed
     /tmp/ccaPnj5t.s:4643   .text.stack_size:0000000000000000 $t
     /tmp/ccaPnj5t.s:4651   .text.stack_size:0000000000000000 stack_size
     /tmp/ccaPnj5t.s:4702   .text.stack_size:0000000000000030 $d
     /tmp/ccaPnj5t.s:4708   .text.copyreg:0000000000000000 $t
     /tmp/ccaPnj5t.s:4716   .text.copyreg:0000000000000000 copyreg
     /tmp/ccaPnj5t.s:4749   .text.copyreg:000000000000001c $d
     /tmp/ccaPnj5t.s:4754   .text.set_lift:0000000000000000 $t
     /tmp/ccaPnj5t.s:4762   .text.set_lift:0000000000000000 set_lift
     /tmp/ccaPnj5t.s:4780   .text.set_lift:000000000000000c $d
     /tmp/ccaPnj5t.s:4785   .text.is_dblmode:0000000000000000 $t
     /tmp/ccaPnj5t.s:4793   .text.is_dblmode:0000000000000000 is_dblmode
     /tmp/ccaPnj5t.s:4815   .text.is_dblmode:000000000000001c $d
     /tmp/ccaPnj5t.s:4820   .text.is_usrdblmode:0000000000000000 $t
     /tmp/ccaPnj5t.s:4828   .text.is_usrdblmode:0000000000000000 is_usrdblmode
     /tmp/ccaPnj5t.s:4870   .text.is_usrdblmode:000000000000002c $d
     /tmp/ccaPnj5t.s:4876   .text.s_to_i:0000000000000000 $t
     /tmp/ccaPnj5t.s:4884   .text.s_to_i:0000000000000000 s_to_i
     /tmp/ccaPnj5t.s:5032   .text.digit:0000000000000000 $t
     /tmp/ccaPnj5t.s:5039   .text.digit:0000000000000000 digit
     /tmp/ccaPnj5t.s:5584   .text.digit:0000000000000184 $d
     /tmp/ccaPnj5t.s:5591   .text.s_to_ull:0000000000000000 $t
     /tmp/ccaPnj5t.s:5599   .text.s_to_ull:0000000000000000 s_to_ull
     /tmp/ccaPnj5t.s:5693   .text.get_cmdline:0000000000000000 $t
     /tmp/ccaPnj5t.s:5701   .text.get_cmdline:0000000000000000 get_cmdline
     /tmp/ccaPnj5t.s:5729   .text.get_cmdline:0000000000000014 $d
     /tmp/ccaPnj5t.s:5734   .text.is_bad_cmdline:0000000000000000 $t
     /tmp/ccaPnj5t.s:5742   .text.is_bad_cmdline:0000000000000000 is_bad_cmdline
     /tmp/ccaPnj5t.s:5757   .text.get_flash_reg_n:0000000000000000 $t
     /tmp/ccaPnj5t.s:5765   .text.get_flash_reg_n:0000000000000000 get_flash_reg_n
     /tmp/ccaPnj5t.s:5792   .text.get_flash_reg_n:000000000000001c $d
     /tmp/ccaPnj5t.s:5797   .text.get_const:0000000000000000 $t
     /tmp/ccaPnj5t.s:5805   .text.get_const:0000000000000000 get_const
     /tmp/ccaPnj5t.s:5953   .text.get_const:0000000000000074 $d
     /tmp/ccaPnj5t.s:5961   .text.get_reg_n:0000000000000000 $t
     /tmp/ccaPnj5t.s:5969   .text.get_reg_n:0000000000000000 get_reg_n
     /tmp/ccaPnj5t.s:6189   .text.get_reg_n:00000000000000a8 $d
ARM GAS  /tmp/ccaPnj5t.s 			page 896


     /tmp/ccaPnj5t.s:6196   .text.get_stack:0000000000000000 $t
     /tmp/ccaPnj5t.s:6204   .text.get_stack:0000000000000000 get_stack
     /tmp/ccaPnj5t.s:6224   .text.lift:0000000000000000 $t
     /tmp/ccaPnj5t.s:6232   .text.lift:0000000000000000 lift
     /tmp/ccaPnj5t.s:6411   .text.lift:0000000000000064 $d
     /tmp/ccaPnj5t.s:6419   .text.lift_if_enabled:0000000000000000 $t
     /tmp/ccaPnj5t.s:6427   .text.lift_if_enabled:0000000000000000 lift_if_enabled
     /tmp/ccaPnj5t.s:6457   .text.lift_if_enabled:0000000000000010 $d
     /tmp/ccaPnj5t.s:6462   .text.lift2_if_enabled:0000000000000000 $t
     /tmp/ccaPnj5t.s:6469   .text.lift2_if_enabled:0000000000000000 lift2_if_enabled
     /tmp/ccaPnj5t.s:6580   .text.lift2_if_enabled:0000000000000040 $d
     /tmp/ccaPnj5t.s:6589   .text.lower:0000000000000000 $t
     /tmp/ccaPnj5t.s:6596   .text.lower:0000000000000000 lower
     /tmp/ccaPnj5t.s:6778   .text.lower:000000000000006c $d
     /tmp/ccaPnj5t.s:6786   .text.get_stack_top:0000000000000000 $t
     /tmp/ccaPnj5t.s:6793   .text.get_stack_top:0000000000000000 get_stack_top
     /tmp/ccaPnj5t.s:6878   .text.get_stack_top:0000000000000034 $d
     /tmp/ccaPnj5t.s:6886   .text.roll_down:0000000000000000 $t
     /tmp/ccaPnj5t.s:6894   .text.roll_down:0000000000000000 roll_down
     /tmp/ccaPnj5t.s:7012   .text.roll_down:000000000000004c $d
                            *COM*:0000000000000004 StackBase
     /tmp/ccaPnj5t.s:7018   .text.cpx_roll_down:0000000000000000 $t
     /tmp/ccaPnj5t.s:7026   .text.cpx_roll_down:0000000000000000 cpx_roll_down
     /tmp/ccaPnj5t.s:7086   .text.cpx_roll_down:000000000000002c $d
     /tmp/ccaPnj5t.s:7092   .text.roll_up:0000000000000000 $t
     /tmp/ccaPnj5t.s:7100   .text.roll_up:0000000000000000 roll_up
     /tmp/ccaPnj5t.s:7227   .text.roll_up:000000000000004c $d
     /tmp/ccaPnj5t.s:7233   .text.cpx_roll_up:0000000000000000 $t
     /tmp/ccaPnj5t.s:7241   .text.cpx_roll_up:0000000000000000 cpx_roll_up
     /tmp/ccaPnj5t.s:7301   .text.cpx_roll_up:000000000000002c $d
     /tmp/ccaPnj5t.s:7307   .text.fill:0000000000000000 $t
     /tmp/ccaPnj5t.s:7315   .text.fill:0000000000000000 fill
     /tmp/ccaPnj5t.s:7470   .text.fill:0000000000000064 $d
     /tmp/ccaPnj5t.s:7479   .text.lower2:0000000000000000 $t
     /tmp/ccaPnj5t.s:7486   .text.lower2:0000000000000000 lower2
     /tmp/ccaPnj5t.s:7668   .text.lower2:000000000000006c $d
     /tmp/ccaPnj5t.s:7676   .text.drop:0000000000000000 $t
     /tmp/ccaPnj5t.s:7684   .text.drop:0000000000000000 drop
     /tmp/ccaPnj5t.s:7727   .text.drop:000000000000001c $d
     /tmp/ccaPnj5t.s:7732   .text.copyreg_n:0000000000000000 $t
     /tmp/ccaPnj5t.s:7740   .text.copyreg_n:0000000000000000 copyreg_n
     /tmp/ccaPnj5t.s:7824   .text.copyreg_n:0000000000000038 $d
     /tmp/ccaPnj5t.s:7831   .text.setlastX:0000000000000000 $t
     /tmp/ccaPnj5t.s:7839   .text.setlastX:0000000000000000 setlastX
     /tmp/ccaPnj5t.s:7855   .text.setlastXY:0000000000000000 $t
     /tmp/ccaPnj5t.s:7862   .text.setlastXY:0000000000000000 setlastXY
     /tmp/ccaPnj5t.s:7905   .text.getRegister:0000000000000000 $t
     /tmp/ccaPnj5t.s:7913   .text.getRegister:0000000000000000 getRegister
     /tmp/ccaPnj5t.s:7975   .text.getRegister:0000000000000030 $d
     /tmp/ccaPnj5t.s:7980   .text.getX:0000000000000000 $t
     /tmp/ccaPnj5t.s:7988   .text.getX:0000000000000000 getX
     /tmp/ccaPnj5t.s:8006   .text.getY:0000000000000000 $t
     /tmp/ccaPnj5t.s:8014   .text.getY:0000000000000000 getY
     /tmp/ccaPnj5t.s:8031   .text.getXY:0000000000000000 $t
     /tmp/ccaPnj5t.s:8039   .text.getXY:0000000000000000 getXY
     /tmp/ccaPnj5t.s:8100   .text.getXYZ:0000000000000000 $t
     /tmp/ccaPnj5t.s:8108   .text.getXYZ:0000000000000000 getXYZ
ARM GAS  /tmp/ccaPnj5t.s 			page 897


     /tmp/ccaPnj5t.s:8201   .text.getYZ:0000000000000000 $t
     /tmp/ccaPnj5t.s:8209   .text.getYZ:0000000000000000 getYZ
     /tmp/ccaPnj5t.s:8270   .text.getXYZT:0000000000000000 $t
     /tmp/ccaPnj5t.s:8278   .text.getXYZT:0000000000000000 getXYZT
     /tmp/ccaPnj5t.s:8324   .text.storcl_op:0000000000000000 $t
     /tmp/ccaPnj5t.s:8331   .text.storcl_op:0000000000000000 storcl_op
     /tmp/ccaPnj5t.s:8405   .text.storcl_op:000000000000002c $d
     /tmp/ccaPnj5t.s:8412   .text.storcl_op:0000000000000032 $t
     /tmp/ccaPnj5t.s:8524   .text.storcl_cop:0000000000000000 $t
     /tmp/ccaPnj5t.s:8531   .text.storcl_cop:0000000000000000 storcl_cop
     /tmp/ccaPnj5t.s:8641   .text.storcl_cop:0000000000000040 $d
     /tmp/ccaPnj5t.s:8646   .text.storcl_cop:0000000000000044 $t
     /tmp/ccaPnj5t.s:8759   .text.cpx_enter:0000000000000000 $t
     /tmp/ccaPnj5t.s:8767   .text.cpx_enter:0000000000000000 cpx_enter
     /tmp/ccaPnj5t.s:8857   .text.cpx_enter:0000000000000048 $d
     /tmp/ccaPnj5t.s:8863   .text.cpx_fill:0000000000000000 $t
     /tmp/ccaPnj5t.s:8871   .text.cpx_fill:0000000000000000 cpx_fill
     /tmp/ccaPnj5t.s:9072   .text.cpx_fill:0000000000000084 $d
     /tmp/ccaPnj5t.s:9082   .text.setRegister:0000000000000000 $t
     /tmp/ccaPnj5t.s:9090   .text.setRegister:0000000000000000 setRegister
     /tmp/ccaPnj5t.s:9185   .text.setRegister:000000000000004c $d
                            *COM*:0000000000000018 Ctx
     /tmp/ccaPnj5t.s:9191   .text.setX:0000000000000000 $t
     /tmp/ccaPnj5t.s:9199   .text.setX:0000000000000000 setX
     /tmp/ccaPnj5t.s:9221   .text.rarg_round:0000000000000000 $t
     /tmp/ccaPnj5t.s:9229   .text.rarg_round:0000000000000000 rarg_round
     /tmp/ccaPnj5t.s:9410   .text.rarg_round:0000000000000064 $d
     /tmp/ccaPnj5t.s:9417   .text.setY:0000000000000000 $t
     /tmp/ccaPnj5t.s:9425   .text.setY:0000000000000000 setY
     /tmp/ccaPnj5t.s:9447   .text.setXY:0000000000000000 $t
     /tmp/ccaPnj5t.s:9455   .text.setXY:0000000000000000 setXY
     /tmp/ccaPnj5t.s:9517   .text.setXY:0000000000000028 $d
     /tmp/ccaPnj5t.s:9522   .text.convert_regK:0000000000000000 $t
     /tmp/ccaPnj5t.s:9530   .text.convert_regK:0000000000000000 convert_regK
     /tmp/ccaPnj5t.s:9706   .text.convert_regK:00000000000000ac $d
     /tmp/ccaPnj5t.s:9716   .text.cpx_nop:0000000000000000 $t
     /tmp/ccaPnj5t.s:9724   .text.cpx_nop:0000000000000000 cpx_nop
     /tmp/ccaPnj5t.s:9749   .text.cpx_nop:0000000000000016 $d
     /tmp/ccaPnj5t.s:9761   .text.cpx_nop:0000000000000022 $t
     /tmp/ccaPnj5t.s:10045  .text.cpx_nop:0000000000000164 $d
     /tmp/ccaPnj5t.s:10052  .text.get_reg_n_int:0000000000000000 $t
     /tmp/ccaPnj5t.s:10060  .text.get_reg_n_int:0000000000000000 get_reg_n_int
     /tmp/ccaPnj5t.s:10097  .text.storcl_intop:0000000000000000 $t
     /tmp/ccaPnj5t.s:10104  .text.storcl_intop:0000000000000000 storcl_intop
     /tmp/ccaPnj5t.s:10196  .text.storcl_intop:0000000000000038 $d
     /tmp/ccaPnj5t.s:10202  .text.storcl_intop:000000000000003e $t
     /tmp/ccaPnj5t.s:10304  .text.incdec:0000000000000000 $t
     /tmp/ccaPnj5t.s:10311  .text.incdec:0000000000000000 incdec
     /tmp/ccaPnj5t.s:10492  .text.incdec:0000000000000094 $d
     /tmp/ccaPnj5t.s:10499  .text.set_reg_n_int:0000000000000000 $t
     /tmp/ccaPnj5t.s:10507  .text.set_reg_n_int:0000000000000000 set_reg_n_int
     /tmp/ccaPnj5t.s:10540  .text.get_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccaPnj5t.s:10548  .text.get_reg_n_int_sgn:0000000000000000 get_reg_n_int_sgn
     /tmp/ccaPnj5t.s:10628  .text.get_reg_n_int_sgn:0000000000000034 $d
     /tmp/ccaPnj5t.s:10633  .text.get_keycode_from_reg:0000000000000000 $t
     /tmp/ccaPnj5t.s:10640  .text.get_keycode_from_reg:0000000000000000 get_keycode_from_reg
     /tmp/ccaPnj5t.s:10720  .text.get_keycode_from_reg:000000000000002c $d
ARM GAS  /tmp/ccaPnj5t.s 			page 898


     /tmp/ccaPnj5t.s:10725  .text.getX_int:0000000000000000 $t
     /tmp/ccaPnj5t.s:10733  .text.getX_int:0000000000000000 getX_int
     /tmp/ccaPnj5t.s:10749  .text.getX_int_sgn:0000000000000000 $t
     /tmp/ccaPnj5t.s:10757  .text.getX_int_sgn:0000000000000000 getX_int_sgn
     /tmp/ccaPnj5t.s:10779  .text.set_reg_n_int_sgn:0000000000000000 $t
     /tmp/ccaPnj5t.s:10787  .text.set_reg_n_int_sgn:0000000000000000 set_reg_n_int_sgn
     /tmp/ccaPnj5t.s:10913  .text.set_reg_n_int_sgn:0000000000000060 $d
     /tmp/ccaPnj5t.s:10919  .text.op_roundingmode:0000000000000000 $t
     /tmp/ccaPnj5t.s:10927  .text.op_roundingmode:0000000000000000 op_roundingmode
     /tmp/ccaPnj5t.s:10991  .text.op_roundingmode:0000000000000024 $d
     /tmp/ccaPnj5t.s:10996  .text.register_from_int:0000000000000000 $t
     /tmp/ccaPnj5t.s:11003  .text.register_from_int:0000000000000000 register_from_int
     /tmp/ccaPnj5t.s:11100  .text.register_from_int:000000000000005c $d
     /tmp/ccaPnj5t.s:11106  .text.int_from_register:0000000000000000 $t
     /tmp/ccaPnj5t.s:11113  .text.int_from_register:0000000000000000 int_from_register
     /tmp/ccaPnj5t.s:11184  .text.int_from_register:0000000000000044 $d
     /tmp/ccaPnj5t.s:11189  .text.switch_to_int:0000000000000000 $t
     /tmp/ccaPnj5t.s:11196  .text.switch_to_int:0000000000000000 switch_to_int
     /tmp/ccaPnj5t.s:11347  .text.switch_to_int:0000000000000078 $d
     /tmp/ccaPnj5t.s:11355  .text.process_cmdline.part.0:0000000000000000 $t
     /tmp/ccaPnj5t.s:11362  .text.process_cmdline.part.0:0000000000000000 process_cmdline.part.0
     /tmp/ccaPnj5t.s:11949  .text.process_cmdline.part.0:000000000000023c $d
                            *COM*:0000000000000004 XromRunning
     /tmp/ccaPnj5t.s:11960  .text.process_cmdline:0000000000000000 $t
     /tmp/ccaPnj5t.s:11968  .text.process_cmdline:0000000000000000 process_cmdline
     /tmp/ccaPnj5t.s:11990  .text.process_cmdline:000000000000000c $d
     /tmp/ccaPnj5t.s:11995  .text.cpx_pi:0000000000000000 $t
     /tmp/ccaPnj5t.s:12003  .text.cpx_pi:0000000000000000 cpx_pi
     /tmp/ccaPnj5t.s:12241  .text.cpx_pi:00000000000000bc $d
     /tmp/ccaPnj5t.s:12249  .text.process_cmdline_set_lift:0000000000000000 $t
     /tmp/ccaPnj5t.s:12257  .text.process_cmdline_set_lift:0000000000000000 process_cmdline_set_lift
     /tmp/ccaPnj5t.s:12323  .text.process_cmdline_set_lift:0000000000000020 $d
     /tmp/ccaPnj5t.s:12328  .text.setX_int:0000000000000000 $t
     /tmp/ccaPnj5t.s:12336  .text.setX_int:0000000000000000 setX_int
     /tmp/ccaPnj5t.s:12387  .text.do_rcl:0000000000000000 $t
     /tmp/ccaPnj5t.s:12394  .text.do_rcl:0000000000000000 do_rcl
     /tmp/ccaPnj5t.s:12732  .text.do_rcl:00000000000000cc $d
     /tmp/ccaPnj5t.s:12743  .text.setX_int_sgn:0000000000000000 $t
     /tmp/ccaPnj5t.s:12751  .text.setX_int_sgn:0000000000000000 setX_int_sgn
     /tmp/ccaPnj5t.s:12785  .text.zero_regs:0000000000000000 $t
     /tmp/ccaPnj5t.s:12793  .text.zero_regs:0000000000000000 zero_regs
     /tmp/ccaPnj5t.s:12831  .text.zero_regs:0000000000000024 $d
     /tmp/ccaPnj5t.s:12836  .text.move_regs:0000000000000000 $t
     /tmp/ccaPnj5t.s:12844  .text.move_regs:0000000000000000 move_regs
     /tmp/ccaPnj5t.s:12897  .text.move_regs:0000000000000024 $d
     /tmp/ccaPnj5t.s:12902  .text.zero_X:0000000000000000 $t
     /tmp/ccaPnj5t.s:12910  .text.zero_X:0000000000000000 zero_X
     /tmp/ccaPnj5t.s:12925  .text.zero_X:0000000000000008 $d
     /tmp/ccaPnj5t.s:12930  .text.zero_Y:0000000000000000 $t
     /tmp/ccaPnj5t.s:12938  .text.zero_Y:0000000000000000 zero_Y
     /tmp/ccaPnj5t.s:12966  .text.clrx:0000000000000000 $t
     /tmp/ccaPnj5t.s:12974  .text.clrx:0000000000000000 clrx
     /tmp/ccaPnj5t.s:13090  .text.clrx:000000000000006c $d
     /tmp/ccaPnj5t.s:13097  .text.clrstk:0000000000000000 $t
     /tmp/ccaPnj5t.s:13105  .text.clrstk:0000000000000000 clrstk
     /tmp/ccaPnj5t.s:13230  .text.clrstk:000000000000005c $d
     /tmp/ccaPnj5t.s:13240  .text.clrreg:0000000000000000 $t
ARM GAS  /tmp/ccaPnj5t.s 			page 899


     /tmp/ccaPnj5t.s:13248  .text.clrreg:0000000000000000 clrreg
     /tmp/ccaPnj5t.s:13753  .text.clrreg:000000000000011c $d
     /tmp/ccaPnj5t.s:13763  .text.clrretstk:0000000000000000 $t
     /tmp/ccaPnj5t.s:13771  .text.clrretstk:0000000000000000 clrretstk
     /tmp/ccaPnj5t.s:13792  .text.clrretstk:0000000000000010 $d
     /tmp/ccaPnj5t.s:13797  .text.clrretstk_pc:0000000000000000 $t
     /tmp/ccaPnj5t.s:13805  .text.clrretstk_pc:0000000000000000 clrretstk_pc
     /tmp/ccaPnj5t.s:13870  .text.clrretstk_pc:0000000000000020 $d
     /tmp/ccaPnj5t.s:13875  .text.cmdconst:0000000000000000 $t
     /tmp/ccaPnj5t.s:13883  .text.cmdconst:0000000000000000 cmdconst
     /tmp/ccaPnj5t.s:14178  .text.cmdconst:00000000000000c4 $d
     /tmp/ccaPnj5t.s:14188  .text.cmdsto:0000000000000000 $t
     /tmp/ccaPnj5t.s:14196  .text.cmdsto:0000000000000000 cmdsto
     /tmp/ccaPnj5t.s:14386  .text.cmdsto:0000000000000078 $d
     /tmp/ccaPnj5t.s:14392  .text.cmdrcl:0000000000000000 $t
     /tmp/ccaPnj5t.s:14400  .text.cmdrcl:0000000000000000 cmdrcl
     /tmp/ccaPnj5t.s:14416  .text.cmdcsto:0000000000000000 $t
     /tmp/ccaPnj5t.s:14424  .text.cmdcsto:0000000000000000 cmdcsto
     /tmp/ccaPnj5t.s:14701  .text.cmdcsto:00000000000000c0 $d
     /tmp/ccaPnj5t.s:14709  .text.cmdcrcl:0000000000000000 $t
     /tmp/ccaPnj5t.s:14717  .text.cmdcrcl:0000000000000000 cmdcrcl
     /tmp/ccaPnj5t.s:15089  .text.cmdcrcl:00000000000000f8 $d
     /tmp/ccaPnj5t.s:15099  .text.cmdircl:0000000000000000 $t
     /tmp/ccaPnj5t.s:15107  .text.cmdircl:0000000000000000 cmdircl
     /tmp/ccaPnj5t.s:15151  .text.cmdircl:000000000000001c $d
     /tmp/ccaPnj5t.s:15156  .text.cmdrrcl:0000000000000000 $t
     /tmp/ccaPnj5t.s:15164  .text.cmdrrcl:0000000000000000 cmdrrcl
     /tmp/ccaPnj5t.s:15322  .text.cmdrrcl:0000000000000080 $d
     /tmp/ccaPnj5t.s:15332  .text.swap_reg:0000000000000000 $t
     /tmp/ccaPnj5t.s:15340  .text.swap_reg:0000000000000000 swap_reg
     /tmp/ccaPnj5t.s:15481  .text.swap_reg:0000000000000060 $d
     /tmp/ccaPnj5t.s:15486  .text.cmdswap:0000000000000000 $t
     /tmp/ccaPnj5t.s:15494  .text.cmdswap:0000000000000000 cmdswap
     /tmp/ccaPnj5t.s:15641  .text.cmdswap:0000000000000094 $d
     /tmp/ccaPnj5t.s:15647  .text.cmdview:0000000000000000 $t
     /tmp/ccaPnj5t.s:15655  .text.cmdview:0000000000000000 cmdview
     /tmp/ccaPnj5t.s:15739  .text.cmdview:0000000000000050 $d
                            *COM*:0000000000000004 ShowRegister
     /tmp/ccaPnj5t.s:15746  .text.get_stack_size:0000000000000000 $t
     /tmp/ccaPnj5t.s:15754  .text.get_stack_size:0000000000000000 get_stack_size
     /tmp/ccaPnj5t.s:15852  .text.get_stack_size:0000000000000040 $d
     /tmp/ccaPnj5t.s:15860  .text.get_word_size:0000000000000000 $t
     /tmp/ccaPnj5t.s:15868  .text.get_word_size:0000000000000000 get_word_size
     /tmp/ccaPnj5t.s:15911  .text.get_sign_mode:0000000000000000 $t
     /tmp/ccaPnj5t.s:15919  .text.get_sign_mode:0000000000000000 get_sign_mode
     /tmp/ccaPnj5t.s:15975  .text.get_sign_mode:0000000000000024 $d
     /tmp/ccaPnj5t.s:15980  .text.get_base:0000000000000000 $t
     /tmp/ccaPnj5t.s:15988  .text.get_base:0000000000000000 get_base
     /tmp/ccaPnj5t.s:16031  .text.DM42_Ticker:0000000000000000 $t
     /tmp/ccaPnj5t.s:16039  .text.DM42_Ticker:0000000000000000 DM42_Ticker
     /tmp/ccaPnj5t.s:16069  .text.DM42_Ticker:0000000000000014 $d
     /tmp/ccaPnj5t.s:16074  .text.op_ticks:0000000000000000 $t
     /tmp/ccaPnj5t.s:16082  .text.op_ticks:0000000000000000 op_ticks
     /tmp/ccaPnj5t.s:16159  .text.op_ticks:0000000000000024 $d
     /tmp/ccaPnj5t.s:16164  .text.op_voltage:0000000000000000 $t
     /tmp/ccaPnj5t.s:16172  .text.op_voltage:0000000000000000 op_voltage
     /tmp/ccaPnj5t.s:16275  .text.op_voltage:0000000000000058 $d
ARM GAS  /tmp/ccaPnj5t.s 			page 900


     /tmp/ccaPnj5t.s:16282  .text.free_mem:0000000000000000 $t
     /tmp/ccaPnj5t.s:16290  .text.free_mem:0000000000000000 free_mem
     /tmp/ccaPnj5t.s:16314  .text.free_mem:0000000000000010 $d
     /tmp/ccaPnj5t.s:16320  .text.free_flash:0000000000000000 $t
     /tmp/ccaPnj5t.s:16328  .text.free_flash:0000000000000000 free_flash
     /tmp/ccaPnj5t.s:16347  .text.free_flash:0000000000000010 $d
     /tmp/ccaPnj5t.s:16352  .text.get_mem:0000000000000000 $t
     /tmp/ccaPnj5t.s:16360  .text.get_mem:0000000000000000 get_mem
     /tmp/ccaPnj5t.s:16611  .text.get_mem:000000000000009c $d
     /tmp/ccaPnj5t.s:16619  .text.cmdputkey:0000000000000000 $t
     /tmp/ccaPnj5t.s:16627  .text.cmdputkey:0000000000000000 cmdputkey
     /tmp/ccaPnj5t.s:16709  .text.cmdputkey:0000000000000034 $d
     /tmp/ccaPnj5t.s:16715  .text.cmdkeytype:0000000000000000 $t
     /tmp/ccaPnj5t.s:16723  .text.cmdkeytype:0000000000000000 cmdkeytype
     /tmp/ccaPnj5t.s:16857  .text.cmdkeytype:0000000000000048 $d
     /tmp/ccaPnj5t.s:16866  .rodata.op_query_xtal.str1.4:0000000000000000 $d
     /tmp/ccaPnj5t.s:16870  .text.op_query_xtal:0000000000000000 $t
     /tmp/ccaPnj5t.s:16878  .text.op_query_xtal:0000000000000000 op_query_xtal
     /tmp/ccaPnj5t.s:16916  .text.op_query_xtal:0000000000000014 $d
     /tmp/ccaPnj5t.s:16924  .rodata.op_query_print.str1.4:0000000000000000 $d
     /tmp/ccaPnj5t.s:16928  .text.op_query_print:0000000000000000 $t
     /tmp/ccaPnj5t.s:16936  .text.op_query_print:0000000000000000 op_query_print
     /tmp/ccaPnj5t.s:16981  .text.op_query_print:0000000000000018 $d
     /tmp/ccaPnj5t.s:16991  .text.cmdstostk:0000000000000000 $t
     /tmp/ccaPnj5t.s:16999  .text.cmdstostk:0000000000000000 cmdstostk
     /tmp/ccaPnj5t.s:17049  .text.cmdrclstk:0000000000000000 $t
     /tmp/ccaPnj5t.s:17057  .text.cmdrclstk:0000000000000000 cmdrclstk
     /tmp/ccaPnj5t.s:17110  .text.find_opcode_from:0000000000000000 $t
     /tmp/ccaPnj5t.s:17118  .text.find_opcode_from:0000000000000000 find_opcode_from
     /tmp/ccaPnj5t.s:17290  .text.find_opcode_from:000000000000006c $d
     /tmp/ccaPnj5t.s:17295  .text.find_label_from:0000000000000000 $t
     /tmp/ccaPnj5t.s:17303  .text.find_label_from:0000000000000000 find_label_from
     /tmp/ccaPnj5t.s:17323  .text.op_rtn:0000000000000000 $t
     /tmp/ccaPnj5t.s:17331  .text.op_rtn:0000000000000000 op_rtn
     /tmp/ccaPnj5t.s:17365  .text.op_rtn:0000000000000020 $d
     /tmp/ccaPnj5t.s:17371  .text.op_popusr:0000000000000000 $t
     /tmp/ccaPnj5t.s:17379  .text.op_popusr:0000000000000000 op_popusr
     /tmp/ccaPnj5t.s:17454  .text.op_popusr:0000000000000050 $d
                            *COM*:0000000000000004 XromUserPc
                            *COM*:0000000000000004 UserLocalRegs
     /tmp/ccaPnj5t.s:17462  .text.findmultilbl:0000000000000000 $t
     /tmp/ccaPnj5t.s:17470  .text.findmultilbl:0000000000000000 findmultilbl
     /tmp/ccaPnj5t.s:17583  .text.findmultilbl:0000000000000048 $d
     /tmp/ccaPnj5t.s:17588  .text.get_dispmode_digs:0000000000000000 $t
     /tmp/ccaPnj5t.s:17596  .text.get_dispmode_digs:0000000000000000 get_dispmode_digs
     /tmp/ccaPnj5t.s:17658  .text.get_dispmode_digs:000000000000002c $d
     /tmp/ccaPnj5t.s:17663  .text.set_dispmode_digs:0000000000000000 $t
     /tmp/ccaPnj5t.s:17671  .text.set_dispmode_digs:0000000000000000 set_dispmode_digs
     /tmp/ccaPnj5t.s:17729  .text.set_dispmode_digs:0000000000000038 $d
     /tmp/ccaPnj5t.s:17734  .text.convC2F:0000000000000000 $t
     /tmp/ccaPnj5t.s:17742  .text.convC2F:0000000000000000 convC2F
     /tmp/ccaPnj5t.s:17784  .text.convC2F:000000000000001c $d
     /tmp/ccaPnj5t.s:17790  .text.convF2C:0000000000000000 $t
     /tmp/ccaPnj5t.s:17798  .text.convF2C:0000000000000000 convF2C
     /tmp/ccaPnj5t.s:17840  .text.convF2C:000000000000001c $d
     /tmp/ccaPnj5t.s:17846  .text.convDB2AR:0000000000000000 $t
     /tmp/ccaPnj5t.s:17854  .text.convDB2AR:0000000000000000 convDB2AR
ARM GAS  /tmp/ccaPnj5t.s 			page 901


     /tmp/ccaPnj5t.s:17896  .text.convDB2AR:000000000000001c $d
     /tmp/ccaPnj5t.s:17901  .text.convAR2DB:0000000000000000 $t
     /tmp/ccaPnj5t.s:17909  .text.convAR2DB:0000000000000000 convAR2DB
     /tmp/ccaPnj5t.s:17950  .text.convAR2DB:000000000000001c $d
     /tmp/ccaPnj5t.s:17955  .text.convDB2PR:0000000000000000 $t
     /tmp/ccaPnj5t.s:17963  .text.convDB2PR:0000000000000000 convDB2PR
     /tmp/ccaPnj5t.s:18004  .text.convPR2DB:0000000000000000 $t
     /tmp/ccaPnj5t.s:18012  .text.convPR2DB:0000000000000000 convPR2DB
     /tmp/ccaPnj5t.s:18053  .text.do_conv:0000000000000000 $t
     /tmp/ccaPnj5t.s:18061  .text.do_conv:0000000000000000 do_conv
     /tmp/ccaPnj5t.s:18153  .text.do_conv:0000000000000040 $d
     /tmp/ccaPnj5t.s:18158  .text.cmdconv:0000000000000000 $t
     /tmp/ccaPnj5t.s:18166  .text.cmdconv:0000000000000000 cmdconv
     /tmp/ccaPnj5t.s:18254  .text.cmdconv:000000000000003c $d
     /tmp/ccaPnj5t.s:18259  .text.fin_tst:0000000000000000 $t
     /tmp/ccaPnj5t.s:18267  .text.fin_tst:0000000000000000 fin_tst
     /tmp/ccaPnj5t.s:18325  .text.fin_tst:000000000000002c $d
     /tmp/ccaPnj5t.s:18334  .text.check_mode:0000000000000000 $t
     /tmp/ccaPnj5t.s:18342  .text.check_mode:0000000000000000 check_mode
     /tmp/ccaPnj5t.s:18377  .text.check_mode:0000000000000024 $d
     /tmp/ccaPnj5t.s:18382  .text.check_dblmode:0000000000000000 $t
     /tmp/ccaPnj5t.s:18390  .text.check_dblmode:0000000000000000 check_dblmode
     /tmp/ccaPnj5t.s:18423  .text.check_dblmode:000000000000001c $d
     /tmp/ccaPnj5t.s:18428  .text.isTop:0000000000000000 $t
     /tmp/ccaPnj5t.s:18436  .text.isTop:0000000000000000 isTop
     /tmp/ccaPnj5t.s:18500  .text.isTop:0000000000000038 $d
     /tmp/ccaPnj5t.s:18509  .text.cmdlblp:0000000000000000 $t
     /tmp/ccaPnj5t.s:18517  .text.cmdlblp:0000000000000000 cmdlblp
     /tmp/ccaPnj5t.s:18569  .text.cmdlblp:0000000000000024 $d
     /tmp/ccaPnj5t.s:18574  .text.cmdmultilblp:0000000000000000 $t
     /tmp/ccaPnj5t.s:18582  .text.cmdmultilblp:0000000000000000 cmdmultilblp
     /tmp/ccaPnj5t.s:18617  .text.cmdkeyp:0000000000000000 $t
     /tmp/ccaPnj5t.s:18625  .text.cmdkeyp:0000000000000000 cmdkeyp
     /tmp/ccaPnj5t.s:18720  .text.cmdkeyp:0000000000000044 $d
     /tmp/ccaPnj5t.s:18725  .text.do_tst:0000000000000000 $t
     /tmp/ccaPnj5t.s:18732  .text.do_tst:0000000000000000 do_tst
     /tmp/ccaPnj5t.s:18898  .text.do_tst:0000000000000064 $d
     /tmp/ccaPnj5t.s:19186  .text.do_tst:0000000000000168 $d
     /tmp/ccaPnj5t.s:19193  .text.do_ztst:0000000000000000 $t
     /tmp/ccaPnj5t.s:19200  .text.do_ztst:0000000000000000 do_ztst
     /tmp/ccaPnj5t.s:19490  .text.do_ztst:00000000000000b4 $d
     /tmp/ccaPnj5t.s:19501  .text.check_zero:0000000000000000 $t
     /tmp/ccaPnj5t.s:19509  .text.check_zero:0000000000000000 check_zero
     /tmp/ccaPnj5t.s:19653  .text.check_zero:000000000000006c $d
     /tmp/ccaPnj5t.s:19658  .text.cmdtest:0000000000000000 $t
     /tmp/ccaPnj5t.s:19666  .text.cmdtest:0000000000000000 cmdtest
     /tmp/ccaPnj5t.s:19687  .text.cmdztest:0000000000000000 $t
     /tmp/ccaPnj5t.s:19695  .text.cmdztest:0000000000000000 cmdztest
     /tmp/ccaPnj5t.s:19748  .text.cmdlincdec:0000000000000000 $t
     /tmp/ccaPnj5t.s:19756  .text.cmdlincdec:0000000000000000 cmdlincdec
     /tmp/ccaPnj5t.s:19777  .text.cmdloopz:0000000000000000 $t
     /tmp/ccaPnj5t.s:19785  .text.cmdloopz:0000000000000000 cmdloopz
     /tmp/ccaPnj5t.s:19818  .text.cmdloop:0000000000000000 $t
     /tmp/ccaPnj5t.s:19826  .text.cmdloop:0000000000000000 cmdloop
     /tmp/ccaPnj5t.s:20315  .text.cmdloop:00000000000001f4 $d
     /tmp/ccaPnj5t.s:20321  .text.op_shift_digit:0000000000000000 $t
     /tmp/ccaPnj5t.s:20329  .text.op_shift_digit:0000000000000000 op_shift_digit
ARM GAS  /tmp/ccaPnj5t.s 			page 902


     /tmp/ccaPnj5t.s:20493  .text.op_shift_digit:0000000000000060 $d
     /tmp/ccaPnj5t.s:20499  .text.get_user_flag:0000000000000000 $t
     /tmp/ccaPnj5t.s:20507  .text.get_user_flag:0000000000000000 get_user_flag
     /tmp/ccaPnj5t.s:20545  .text.cmdflag:0000000000000000 $t
     /tmp/ccaPnj5t.s:20553  .text.cmdflag:0000000000000000 cmdflag
     /tmp/ccaPnj5t.s:20598  .text.cmdflag:0000000000000028 $d
     /tmp/ccaPnj5t.s:20755  .text.put_user_flag:0000000000000000 $t
     /tmp/ccaPnj5t.s:20763  .text.put_user_flag:0000000000000000 put_user_flag
     /tmp/ccaPnj5t.s:20792  .text.clrflags:0000000000000000 $t
     /tmp/ccaPnj5t.s:20800  .text.clrflags:0000000000000000 clrflags
     /tmp/ccaPnj5t.s:20847  .text.clrflags:000000000000002c $d
     /tmp/ccaPnj5t.s:20852  .text.intws:0000000000000000 $t
     /tmp/ccaPnj5t.s:20860  .text.intws:0000000000000000 intws
     /tmp/ccaPnj5t.s:21083  .text.intws:00000000000000e4 $d
     /tmp/ccaPnj5t.s:21092  .text.get_maxdenom:0000000000000000 $t
     /tmp/ccaPnj5t.s:21100  .text.get_maxdenom:0000000000000000 get_maxdenom
     /tmp/ccaPnj5t.s:21128  .text.get_maxdenom:000000000000001c $d
     /tmp/ccaPnj5t.s:21133  .rodata.op_2frac.str1.4:0000000000000000 $d
     /tmp/ccaPnj5t.s:21143  .text.op_2frac:0000000000000000 $t
     /tmp/ccaPnj5t.s:21151  .text.op_2frac:0000000000000000 op_2frac
     /tmp/ccaPnj5t.s:21289  .text.op_2frac:0000000000000088 $d
     /tmp/ccaPnj5t.s:21299  .text.op_fracdenom:0000000000000000 $t
     /tmp/ccaPnj5t.s:21307  .text.op_fracdenom:0000000000000000 op_fracdenom
     /tmp/ccaPnj5t.s:21462  .text.op_fracdenom:0000000000000080 $d
     /tmp/ccaPnj5t.s:21467  .text.op_float:0000000000000000 $t
     /tmp/ccaPnj5t.s:21475  .text.op_float:0000000000000000 op_float
     /tmp/ccaPnj5t.s:21670  .text.op_float:00000000000000c4 $d
     /tmp/ccaPnj5t.s:21681  .text.cmddisp:0000000000000000 $t
     /tmp/ccaPnj5t.s:21689  .text.cmddisp:0000000000000000 cmddisp
     /tmp/ccaPnj5t.s:21766  .text.cmddisp:0000000000000036 $d
     /tmp/ccaPnj5t.s:21954  .text.cmddisp:00000000000000bc $d
     /tmp/ccaPnj5t.s:21960  .text.set_int_base:0000000000000000 $t
     /tmp/ccaPnj5t.s:21968  .text.set_int_base:0000000000000000 set_int_base
     /tmp/ccaPnj5t.s:22075  .text.set_int_base:000000000000004c $d
     /tmp/ccaPnj5t.s:22082  .text.op_fract:0000000000000000 $t
     /tmp/ccaPnj5t.s:22090  .text.op_fract:0000000000000000 op_fract
     /tmp/ccaPnj5t.s:22149  .text.op_fract:0000000000000040 $d
     /tmp/ccaPnj5t.s:22154  .text.cmdsavem:0000000000000000 $t
     /tmp/ccaPnj5t.s:22162  .text.cmdsavem:0000000000000000 cmdsavem
     /tmp/ccaPnj5t.s:22196  .text.cmdsavem:0000000000000018 $d
     /tmp/ccaPnj5t.s:22201  .text.set_entry:0000000000000000 $t
     /tmp/ccaPnj5t.s:22209  .text.set_entry:0000000000000000 set_entry
     /tmp/ccaPnj5t.s:22247  .text.set_entry:0000000000000020 $d
     /tmp/ccaPnj5t.s:22254  .text.get_trig_mode:0000000000000000 $t
     /tmp/ccaPnj5t.s:22262  .text.get_trig_mode:0000000000000000 get_trig_mode
     /tmp/ccaPnj5t.s:22297  .text.get_trig_mode:0000000000000024 $d
     /tmp/ccaPnj5t.s:22304  .text.cmdpause:0000000000000000 $t
     /tmp/ccaPnj5t.s:22312  .text.cmdpause:0000000000000000 cmdpause
     /tmp/ccaPnj5t.s:22352  .text.cmdpause:000000000000001c $d
                            *COM*:0000000000000001 Pause
     /tmp/ccaPnj5t.s:22358  .text.op_setspeed:0000000000000000 $t
     /tmp/ccaPnj5t.s:22366  .text.op_setspeed:0000000000000000 op_setspeed
     /tmp/ccaPnj5t.s:22395  .text.op_setspeed:000000000000001c $d
     /tmp/ccaPnj5t.s:22400  .text.op_prompt:0000000000000000 $t
     /tmp/ccaPnj5t.s:22408  .text.op_prompt:0000000000000000 op_prompt
     /tmp/ccaPnj5t.s:22480  .text.op_prompt:0000000000000028 $d
     /tmp/ccaPnj5t.s:22486  .text.XisInt:0000000000000000 $t
ARM GAS  /tmp/ccaPnj5t.s 			page 903


     /tmp/ccaPnj5t.s:22494  .text.XisInt:0000000000000000 XisInt
     /tmp/ccaPnj5t.s:22606  .text.XisInt:000000000000005c $d
     /tmp/ccaPnj5t.s:22611  .text.XisEvenOrOdd:0000000000000000 $t
     /tmp/ccaPnj5t.s:22619  .text.XisEvenOrOdd:0000000000000000 XisEvenOrOdd
     /tmp/ccaPnj5t.s:22733  .text.XisEvenOrOdd:0000000000000060 $d
     /tmp/ccaPnj5t.s:22738  .text.XisPrime:0000000000000000 $t
     /tmp/ccaPnj5t.s:22746  .text.XisPrime:0000000000000000 XisPrime
     /tmp/ccaPnj5t.s:22906  .text.XisPrime:000000000000007c $d
     /tmp/ccaPnj5t.s:22912  .text.isInfinite:0000000000000000 $t
     /tmp/ccaPnj5t.s:22920  .text.isInfinite:0000000000000000 isInfinite
     /tmp/ccaPnj5t.s:22972  .text.isInfinite:000000000000002c $d
     /tmp/ccaPnj5t.s:22977  .text.isNan:0000000000000000 $t
     /tmp/ccaPnj5t.s:22985  .text.isNan:0000000000000000 isNan
     /tmp/ccaPnj5t.s:23052  .text.isNan:000000000000003c $d
     /tmp/ccaPnj5t.s:23057  .text.isSpecial:0000000000000000 $t
     /tmp/ccaPnj5t.s:23065  .text.isSpecial:0000000000000000 isSpecial
     /tmp/ccaPnj5t.s:23132  .text.isSpecial:000000000000003c $d
     /tmp/ccaPnj5t.s:23137  .text.op_entryp:0000000000000000 $t
     /tmp/ccaPnj5t.s:23145  .text.op_entryp:0000000000000000 op_entryp
     /tmp/ccaPnj5t.s:23166  .text.op_entryp:0000000000000010 $d
     /tmp/ccaPnj5t.s:23171  .text.reg_decode:0000000000000000 $t
     /tmp/ccaPnj5t.s:23179  .text.reg_decode:0000000000000000 reg_decode
     /tmp/ccaPnj5t.s:23983  .text.reg_decode:0000000000000218 $d
     /tmp/ccaPnj5t.s:23997  .text.op_regcopy:0000000000000000 $t
     /tmp/ccaPnj5t.s:24005  .text.op_regcopy:0000000000000000 op_regcopy
     /tmp/ccaPnj5t.s:24108  .text.op_regcopy:0000000000000048 $d
     /tmp/ccaPnj5t.s:24113  .text.op_regswap:0000000000000000 $t
     /tmp/ccaPnj5t.s:24121  .text.op_regswap:0000000000000000 op_regswap
     /tmp/ccaPnj5t.s:24255  .text.op_regswap:000000000000006c $d
     /tmp/ccaPnj5t.s:24260  .text.op_regclr:0000000000000000 $t
     /tmp/ccaPnj5t.s:24268  .text.op_regclr:0000000000000000 op_regclr
     /tmp/ccaPnj5t.s:24349  .text.op_regclr:0000000000000044 $d
     /tmp/ccaPnj5t.s:24354  .text.op_regsort:0000000000000000 $t
     /tmp/ccaPnj5t.s:24362  .text.op_regsort:0000000000000000 op_regsort
     /tmp/ccaPnj5t.s:24646  .text.reset_volatile_state:0000000000000000 $t
     /tmp/ccaPnj5t.s:24654  .text.reset_volatile_state:0000000000000000 reset_volatile_state
     /tmp/ccaPnj5t.s:24678  .text.reset_volatile_state:0000000000000010 $d
     /tmp/ccaPnj5t.s:24683  .rodata.busy.str1.4:0000000000000000 $d
     /tmp/ccaPnj5t.s:24687  .text.busy:0000000000000000 $t
     /tmp/ccaPnj5t.s:24695  .text.busy:0000000000000000 busy
     /tmp/ccaPnj5t.s:24734  .text.busy:0000000000000018 $d
                            *COM*:0000000000000004 Busy
     /tmp/ccaPnj5t.s:24743  .text.intMonadic:0000000000000000 $t
     /tmp/ccaPnj5t.s:24751  .text.intMonadic:0000000000000000 intMonadic
     /tmp/ccaPnj5t.s:24980  .text.intMonadic:0000000000000084 $d
                            *COM*:0000000000000002 XeqOpCode
     /tmp/ccaPnj5t.s:24990  .text.intDyadic:0000000000000000 $t
     /tmp/ccaPnj5t.s:24998  .text.intDyadic:0000000000000000 intDyadic
     /tmp/ccaPnj5t.s:25282  .text.intDyadic:00000000000000c0 $d
     /tmp/ccaPnj5t.s:25292  .text.xeq_init_contexts:0000000000000000 $t
     /tmp/ccaPnj5t.s:25300  .text.xeq_init_contexts:0000000000000000 xeq_init_contexts
     /tmp/ccaPnj5t.s:25419  .text.xeq_init_contexts:0000000000000078 $d
                            *COM*:0000000000000004 ProgFree
     /tmp/ccaPnj5t.s:25432  .text.not_running:0000000000000000 $t
     /tmp/ccaPnj5t.s:25440  .text.not_running:0000000000000000 not_running
     /tmp/ccaPnj5t.s:25495  .text.not_running:000000000000001c $d
     /tmp/ccaPnj5t.s:25501  .text.set_running_off_sst:0000000000000000 $t
ARM GAS  /tmp/ccaPnj5t.s 			page 904


     /tmp/ccaPnj5t.s:25509  .text.set_running_off_sst:0000000000000000 set_running_off_sst
     /tmp/ccaPnj5t.s:25526  .text.set_running_off_sst:0000000000000008 $d
     /tmp/ccaPnj5t.s:25531  .text.set_running_on_sst:0000000000000000 $t
     /tmp/ccaPnj5t.s:25539  .text.set_running_on_sst:0000000000000000 set_running_on_sst
     /tmp/ccaPnj5t.s:25556  .text.set_running_on_sst:0000000000000008 $d
     /tmp/ccaPnj5t.s:25561  .text.set_running_off:0000000000000000 $t
     /tmp/ccaPnj5t.s:25569  .text.set_running_off:0000000000000000 set_running_off
     /tmp/ccaPnj5t.s:25613  .text.set_running_off:000000000000001c $d
     /tmp/ccaPnj5t.s:25619  .text.set_running_on:0000000000000000 $t
     /tmp/ccaPnj5t.s:25627  .text.set_running_on:0000000000000000 set_running_on
     /tmp/ccaPnj5t.s:25726  .text.set_running_on:0000000000000034 $d
     /tmp/ccaPnj5t.s:25734  .text.gsbgto:0000000000000000 $t
     /tmp/ccaPnj5t.s:25741  .text.gsbgto:0000000000000000 gsbgto
     /tmp/ccaPnj5t.s:25920  .text.gsbgto:000000000000008c $d
     /tmp/ccaPnj5t.s:25931  .text.cmdgtocommon:0000000000000000 $t
     /tmp/ccaPnj5t.s:25939  .text.cmdgtocommon:0000000000000000 cmdgtocommon
     /tmp/ccaPnj5t.s:26025  .text.cmdgtocommon:000000000000002c $d
     /tmp/ccaPnj5t.s:26031  .text.cmdgto:0000000000000000 $t
     /tmp/ccaPnj5t.s:26039  .text.cmdgto:0000000000000000 cmdgto
     /tmp/ccaPnj5t.s:26120  .text.cmdgto:000000000000003c $d
     /tmp/ccaPnj5t.s:26128  .text.branchtoalpha:0000000000000000 $t
     /tmp/ccaPnj5t.s:26135  .text.branchtoalpha:0000000000000000 branchtoalpha
     /tmp/ccaPnj5t.s:26192  .text.cmdalphagto:0000000000000000 $t
     /tmp/ccaPnj5t.s:26200  .text.cmdalphagto:0000000000000000 cmdalphagto
     /tmp/ccaPnj5t.s:26252  .text.op_gtoalpha:0000000000000000 $t
     /tmp/ccaPnj5t.s:26260  .text.op_gtoalpha:0000000000000000 op_gtoalpha
     /tmp/ccaPnj5t.s:26324  .text.op_gtoalpha:0000000000000030 $d
     /tmp/ccaPnj5t.s:26329  .text.cmdskip:0000000000000000 $t
     /tmp/ccaPnj5t.s:26337  .text.cmdskip:0000000000000000 cmdskip
     /tmp/ccaPnj5t.s:26520  .text.cmdskip:0000000000000078 $d
     /tmp/ccaPnj5t.s:26528  .text.cmdback:0000000000000000 $t
     /tmp/ccaPnj5t.s:26536  .text.cmdback:0000000000000000 cmdback
     /tmp/ccaPnj5t.s:26689  .text.cmdback:0000000000000064 $d
     /tmp/ccaPnj5t.s:26697  .text.usergsb_common:0000000000000000 $t
     /tmp/ccaPnj5t.s:26704  .text.usergsb_common:0000000000000000 usergsb_common
     /tmp/ccaPnj5t.s:26815  .text.usergsb_common:0000000000000078 $d
     /tmp/ccaPnj5t.s:26824  .text.do_usergsb:0000000000000000 $t
     /tmp/ccaPnj5t.s:26832  .text.do_usergsb:0000000000000000 do_usergsb
     /tmp/ccaPnj5t.s:26865  .text.do_usergsb:0000000000000014 $d
     /tmp/ccaPnj5t.s:26870  .text.cmdmultigto:0000000000000000 $t
     /tmp/ccaPnj5t.s:26878  .text.cmdmultigto:0000000000000000 cmdmultigto
     /tmp/ccaPnj5t.s:26982  .text.cmdmultigto:000000000000004c $d
     /tmp/ccaPnj5t.s:26988  .text.store_a_to_d:0000000000000000 $t
     /tmp/ccaPnj5t.s:26996  .text.store_a_to_d:0000000000000000 store_a_to_d
     /tmp/ccaPnj5t.s:27044  .text.store_a_to_d:0000000000000020 $d
     /tmp/ccaPnj5t.s:27049  .text.cmdlocr:0000000000000000 $t
     /tmp/ccaPnj5t.s:27057  .text.cmdlocr:0000000000000000 cmdlocr
     /tmp/ccaPnj5t.s:27393  .text.cmdlocr:000000000000015c $d
     /tmp/ccaPnj5t.s:27401  .text.cmdxout:0000000000000000 $t
     /tmp/ccaPnj5t.s:27409  .text.cmdxout:0000000000000000 cmdxout
     /tmp/ccaPnj5t.s:27931  .text.cmdxout:00000000000001e4 $d
     /tmp/ccaPnj5t.s:27946  .text.cmdconverged:0000000000000000 $t
     /tmp/ccaPnj5t.s:27954  .text.cmdconverged:0000000000000000 cmdconverged
     /tmp/ccaPnj5t.s:28183  .text.cmdconverged:00000000000000e0 $d
     /tmp/ccaPnj5t.s:28193  .text.cmdshuffle:0000000000000000 $t
     /tmp/ccaPnj5t.s:28201  .text.cmdshuffle:0000000000000000 cmdshuffle
     /tmp/ccaPnj5t.s:28434  .text.cmdshuffle:0000000000000084 $d
ARM GAS  /tmp/ccaPnj5t.s 			page 905


     /tmp/ccaPnj5t.s:28440  .text.cmdmode:0000000000000000 $t
     /tmp/ccaPnj5t.s:28448  .text.cmdmode:0000000000000000 cmdmode
     /tmp/ccaPnj5t.s:28529  .text.cmdmode:0000000000000050 $d
     /tmp/ccaPnj5t.s:28534  .text.cmdlpop:0000000000000000 $t
     /tmp/ccaPnj5t.s:28542  .text.cmdlpop:0000000000000000 cmdlpop
     /tmp/ccaPnj5t.s:28614  .text.cmdlpop:0000000000000034 $d
     /tmp/ccaPnj5t.s:28620  .text.cmdregs:0000000000000000 $t
     /tmp/ccaPnj5t.s:28628  .text.cmdregs:0000000000000000 cmdregs
     /tmp/ccaPnj5t.s:28808  .text.cmdregs:00000000000000ac $d
     /tmp/ccaPnj5t.s:28815  .text.op_double:0000000000000000 $t
     /tmp/ccaPnj5t.s:28823  .text.op_double:0000000000000000 op_double
     /tmp/ccaPnj5t.s:29123  .text.op_double:000000000000011c $d
     /tmp/ccaPnj5t.s:29130  .text.cmdrestm:0000000000000000 $t
     /tmp/ccaPnj5t.s:29138  .text.cmdrestm:0000000000000000 cmdrestm
     /tmp/ccaPnj5t.s:29332  .text.cmdrestm:00000000000000a8 $d
     /tmp/ccaPnj5t.s:29337  .text.cmdxin:0000000000000000 $t
     /tmp/ccaPnj5t.s:29345  .text.cmdxin:0000000000000000 cmdxin
     /tmp/ccaPnj5t.s:29771  .text.cmdxin:00000000000001b0 $d
     /tmp/ccaPnj5t.s:29784  .rodata.xeq.str1.4:0000000000000000 $d
     /tmp/ccaPnj5t.s:29788  .text.xeq:0000000000000000 $t
     /tmp/ccaPnj5t.s:29796  .text.xeq:0000000000000000 xeq
     /tmp/ccaPnj5t.s:29924  .text.xeq:0000000000000078 $d
     /tmp/ccaPnj5t.s:29931  .text.xeq:0000000000000086 $t
     /tmp/ccaPnj5t.s:30718  .text.xeq:00000000000002f8 $d
     /tmp/ccaPnj5t.s:30739  .text.xeq:0000000000000340 $t
     /tmp/ccaPnj5t.s:34042  .text.dispatch_xrom:0000000000000000 dispatch_xrom
     /tmp/ccaPnj5t.s:31043  .text.xeq:0000000000000422 $d
     /tmp/ccaPnj5t.s:31087  .text.xeq:0000000000000478 $t
     /tmp/ccaPnj5t.s:31711  .text.xeq:00000000000005ec $d
     /tmp/ccaPnj5t.s:31723  .text.xeq:0000000000000608 $t
     /tmp/ccaPnj5t.s:32551  .text.xeq:00000000000008b8 $d
     /tmp/ccaPnj5t.s:32564  .text.xeq:00000000000008e0 $t
     /tmp/ccaPnj5t.s:33453  .text.xeq:0000000000000bc8 $d
     /tmp/ccaPnj5t.s:33472  .text.xeq:0000000000000be4 $t
     /tmp/ccaPnj5t.s:33770  .text.xeq:0000000000000d00 $d
     /tmp/ccaPnj5t.s:33779  .text.xeq_single:0000000000000000 $t
     /tmp/ccaPnj5t.s:33786  .text.xeq_single:0000000000000000 xeq_single
     /tmp/ccaPnj5t.s:33825  .text.xeq_single:0000000000000020 $d
     /tmp/ccaPnj5t.s:33830  .text.xeq_xrom2:0000000000000000 $t
     /tmp/ccaPnj5t.s:33837  .text.xeq_xrom2:0000000000000000 xeq_xrom2
     /tmp/ccaPnj5t.s:33985  .text.xeq_xrom2:0000000000000070 $d
     /tmp/ccaPnj5t.s:33999  .text.xeq_xrom:0000000000000000 $t
     /tmp/ccaPnj5t.s:34007  .text.xeq_xrom:0000000000000000 xeq_xrom
     /tmp/ccaPnj5t.s:34030  .text.xeq_xrom:0000000000000010 $d
     /tmp/ccaPnj5t.s:34035  .text.dispatch_xrom:0000000000000000 $t
     /tmp/ccaPnj5t.s:34173  .text.dispatch_xrom:000000000000005c $d
     /tmp/ccaPnj5t.s:34183  .text.op_rs:0000000000000000 $t
     /tmp/ccaPnj5t.s:34191  .text.op_rs:0000000000000000 op_rs
     /tmp/ccaPnj5t.s:34335  .text.op_rs:0000000000000078 $d
     /tmp/ccaPnj5t.s:34344  .text.xeqprog:0000000000000000 $t
     /tmp/ccaPnj5t.s:34352  .text.xeqprog:0000000000000000 xeqprog
     /tmp/ccaPnj5t.s:34466  .text.xeqprog:0000000000000064 $d
                            *COM*:0000000000000004 JustStopped
     /tmp/ccaPnj5t.s:34474  .text.xeq_sst_bst:0000000000000000 $t
     /tmp/ccaPnj5t.s:34482  .text.xeq_sst_bst:0000000000000000 xeq_sst_bst
     /tmp/ccaPnj5t.s:34695  .text.xeq_sst_bst:000000000000009c $d
     /tmp/ccaPnj5t.s:34705  .text.init_34s:0000000000000000 $t
ARM GAS  /tmp/ccaPnj5t.s 			page 906


     /tmp/ccaPnj5t.s:34713  .text.init_34s:0000000000000000 init_34s
     /tmp/ccaPnj5t.s:34765  .text.init_34s:0000000000000028 $d
     /tmp/ccaPnj5t.s:34770  .rodata.paste_raw_x.str1.4:0000000000000000 $d
     /tmp/ccaPnj5t.s:34774  .text.paste_raw_x:0000000000000000 $t
     /tmp/ccaPnj5t.s:34782  .text.paste_raw_x:0000000000000000 paste_raw_x
     /tmp/ccaPnj5t.s:35150  .text.paste_raw_x:00000000000000f4 $d
     /tmp/ccaPnj5t.s:35163  .rodata.fill_buffer_from_raw_x.str1.4:0000000000000000 $d
     /tmp/ccaPnj5t.s:35167  .text.fill_buffer_from_raw_x:0000000000000000 $t
     /tmp/ccaPnj5t.s:35175  .text.fill_buffer_from_raw_x:0000000000000000 fill_buffer_from_raw_x
     /tmp/ccaPnj5t.s:35432  .text.fill_buffer_from_raw_x:00000000000000c4 $d
                            *COM*:0000000000000004 RectPolConv
     /tmp/ccaPnj5t.s:35520  .rodata.xrom_targets:0000000000000000 xrom_targets
     /tmp/ccaPnj5t.s:35460  .rodata:0000000000000000 $d
     /tmp/ccaPnj5t.s:35468  .bss.result.11584:0000000000000000 $d
     /tmp/ccaPnj5t.s:35472  .bss.result.11584:0000000000000000 result.11584
     /tmp/ccaPnj5t.s:35475  .data.RegionTab:0000000000000000 $d
     /tmp/ccaPnj5t.s:35479  .data.RegionTab:0000000000000000 RegionTab
     /tmp/ccaPnj5t.s:35485  .rodata.StackRegMask:0000000000000000 $d
     /tmp/ccaPnj5t.s:35489  .rodata.StackRegMask:0000000000000000 StackRegMask
     /tmp/ccaPnj5t.s:35493  .rodata.convergence_tolerances:0000000000000000 $d
     /tmp/ccaPnj5t.s:35497  .rodata.convergence_tolerances:0000000000000000 convergence_tolerances
     /tmp/ccaPnj5t.s:35502  .rodata.modes.11283:0000000000000000 $d
     /tmp/ccaPnj5t.s:35506  .rodata.modes.11283:0000000000000000 modes.11283
     /tmp/ccaPnj5t.s:35509  .rodata.modes.11794:0000000000000000 $d
     /tmp/ccaPnj5t.s:35513  .rodata.modes.11794:0000000000000000 modes.11794
     /tmp/ccaPnj5t.s:35516  .rodata.xrom_targets:0000000000000000 $d
     /tmp/ccaPnj5t.s:18905  .text.do_tst:000000000000006b $d
     /tmp/ccaPnj5t.s:18905  .text.do_tst:000000000000006c $t
     /tmp/ccaPnj5t.s:20609  .text.cmdflag:0000000000000033 $d
     /tmp/ccaPnj5t.s:20609  .text.cmdflag:0000000000000034 $t
     /tmp/ccaPnj5t.s:21769  .text.cmddisp:0000000000000039 $d
     /tmp/ccaPnj5t.s:21769  .text.cmddisp:000000000000003a $t

UNDEFINED SYMBOLS
StateWhileOn
main_ram
xrom_size
XromParams
XromLocal
xset
decNumberRoundDigits
decNumberTrunc
dn_eq
set_carry
dn_to_ull
dn_abs
check_overflow
set_overflow
build_value
dn_lt
const_2pow64
xcopy
argcmds
display
shutdown
library_ram
backup_ram
ARM GAS  /tmp/ccaPnj5t.s 			page 907


scopy
num_arg_0
prt
scopy_char
DispMsg
dot
error_message
JustDisplayed
ShowRPN
decContextDefault
decimal64FromNumber
decimal128FromNumber
decimal64ToNumber
decimal128ToNumber
int_base
cnsts
cnsts_d128
cnsts_d64
dn_max
dn_add
dn_subtract
dn_multiply
dn_divide
dn_min
cmplxDivide
cmplxAdd
cmplxSubtract
cmplxMultiply
decNumberNormalize
decNumberRoundDecimals
const_360
const_2PI
const_400
reset_shift
dn_minus
set_menu
display_current_menu
finish_cpx_entry
set_default_menu
intMax
intAdd
intSubtract
intMultiply
intDivide
intMin
extract_value
dn_dec
dn_eq0
dn_inc
row_column_to_keycode
ullint_to_dn
find_char
decNumberFromString
decNumberCopy
decNumberZero
stack_begin
const_PI
ARM GAS  /tmp/ccaPnj5t.s 			page 908


word_size
int_mode
dn_mulpow10
put_key
const_9on5
const_32
decNumberPow10
const_0_05
dn_log10
const_20
cnsts_conv
keycode_to_row_column
dn_compare
decNumberRnd
dn_mul100
dn_le0
dn_lt0
dn_1
finish_display
mask_value
int_to_dn
decNumber2Fraction
GoFast
alpha_view_common
is_int
is_even
isPrime
dn_to_int
message
monfuncs
xrom
dyfuncs
SizeStatRegs
alpha_rcl_s
XromA2D
relative_error
cmplxR
absolute_error
const_1e_14
const_1e_32
const_1e_24
const_NaN
sprintf
multicmds
niladics
trifuncs
sigma_minus
sigma_val
intChs
const_1
const_0
sigma_plus
set_NaN
finish_RPN
is_key_pressed
clr_dot
set_dot
ARM GAS  /tmp/ccaPnj5t.s 			page 909


OpCode
checksum_ram
init_state
reset
strdup
strtok
strtoull
strchr
free
__aeabi_uldivmod
decNumberToString

ARM GAS  /tmp/cc7LeJ71.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"xeq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.find_section_bounds,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.arch armv7e-m
  21              		.syntax unified
  22              		.thumb
  23              		.thumb_func
  24              		.fpu fpv4-sp-d16
  26              	find_section_bounds:
  27              	.LVL0:
  28              	.LFB19:
  29              		.file 1 "src/xeq.c"
   1:src/xeq.c     **** /* This file is part of 34S.
   2:src/xeq.c     ****  * 
   3:src/xeq.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/xeq.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/xeq.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/xeq.c     ****  * (at your option) any later version.
   7:src/xeq.c     ****  * 
   8:src/xeq.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/xeq.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/xeq.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/xeq.c     ****  * GNU General Public License for more details.
  12:src/xeq.c     ****  * 
  13:src/xeq.c     ****  * You should have received a copy of the GNU General Public License
  14:src/xeq.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/xeq.c     ****  */
  16:src/xeq.c     **** 
  17:src/xeq.c     **** #ifndef REALBUILD
  18:src/xeq.c     **** 
  19:src/xeq.c     **** #if defined(WIN32) && !defined(QTGUI) && !defined(IOS) && !defined(__GNUC__) && !defined(DM42)
  20:src/xeq.c     **** 
  21:src/xeq.c     **** #include <stdlib.h>  // sleep
  22:src/xeq.c     **** #include "win32.h"
  23:src/xeq.c     **** #define sleep _sleep
  24:src/xeq.c     **** #define strtoull _strtoui64
  25:src/xeq.c     **** 
  26:src/xeq.c     **** #else
  27:src/xeq.c     **** 
  28:src/xeq.c     **** #ifdef DM42
  29:src/xeq.c     **** #include "dmcp.h"
ARM GAS  /tmp/cc7LeJ71.s 			page 2


  30:src/xeq.c     **** #else
  31:src/xeq.c     **** #include <unistd.h>
  32:src/xeq.c     **** #include <sys/time.h>
  33:src/xeq.c     **** extern unsigned long long strtoull(const char *, char **, int);
  34:src/xeq.c     **** #endif
  35:src/xeq.c     **** 
  36:src/xeq.c     **** #endif
  37:src/xeq.c     **** 
  38:src/xeq.c     **** #include <stdio.h>   // (s)printf
  39:src/xeq.c     **** #include <string.h>
  40:src/xeq.c     **** #include <stdlib.h>
  41:src/xeq.c     **** 
  42:src/xeq.c     **** #endif // not REALBUILD
  43:src/xeq.c     **** 
  44:src/xeq.c     **** #ifdef IOS
  45:src/xeq.c     **** #include <stdarg.h>
  46:src/xeq.c     **** #endif
  47:src/xeq.c     **** 
  48:src/xeq.c     **** #if __GNUC__ >= 4 && __GNUC_MINOR__ >= 6
  49:src/xeq.c     **** #define GNUC_POP_ERROR
  50:src/xeq.c     **** #pragma GCC diagnostic push
  51:src/xeq.c     **** #pragma GCC diagnostic ignored "-Warray-bounds"
  52:src/xeq.c     **** #endif
  53:src/xeq.c     **** 
  54:src/xeq.c     **** #define XEQ_INTERNAL 1
  55:src/xeq.c     **** #define DM42SAFE
  56:src/xeq.c     **** #include "xeq.h"
  57:src/xeq.c     **** #ifdef DM42
  58:src/xeq.c     **** #include "keys.h"
  59:src/xeq.c     **** #endif
  60:src/xeq.c     **** #include "storage.h"
  61:src/xeq.c     **** #include "decn.h"
  62:src/xeq.c     **** #include "complex.h"
  63:src/xeq.c     **** #include "stats.h"
  64:src/xeq.c     **** #include "display.h"
  65:src/xeq.c     **** #include "consts.h"
  66:src/xeq.c     **** #include "int.h"
  67:src/xeq.c     **** #include "date.h"
  68:src/xeq.c     **** #include "lcd.h"
  69:src/xeq.c     **** #include "xrom.h"
  70:src/xeq.c     **** #include "alpha.h"
  71:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
  72:src/xeq.c     **** #include "stopwatch.h"
  73:src/xeq.c     **** #endif
  74:src/xeq.c     **** #ifdef INFRARED
  75:src/xeq.c     **** #include "printer.h"
  76:src/xeq.c     **** #endif
  77:src/xeq.c     **** #undef DM42SAFE
  78:src/xeq.c     **** 
  79:src/xeq.c     **** #include "pretty.h"
  80:src/xeq.c     **** 
  81:src/xeq.c     **** 
  82:src/xeq.c     **** #include "xrom_targets.c"	// Generated by PP
  83:src/xeq.c     **** 
  84:src/xeq.c     **** /* Define the number of program Ticks that must elapse between flashing the
  85:src/xeq.c     ****  * RCL annunciator.
  86:src/xeq.c     ****  */
ARM GAS  /tmp/cc7LeJ71.s 			page 3


  87:src/xeq.c     **** #define TICKS_PER_FLASH	(5)
  88:src/xeq.c     **** 
  89:src/xeq.c     **** /*
  90:src/xeq.c     ****  *  A program is running
  91:src/xeq.c     ****  */
  92:src/xeq.c     **** FLAG Running;
  93:src/xeq.c     **** FLAG XromRunning;
  94:src/xeq.c     **** 
  95:src/xeq.c     **** #ifndef CONSOLE
  96:src/xeq.c     **** /*
  97:src/xeq.c     ****  *  A program has just stopped
  98:src/xeq.c     ****  */
  99:src/xeq.c     **** FLAG JustStopped;
 100:src/xeq.c     **** #endif
 101:src/xeq.c     **** 
 102:src/xeq.c     **** /*
 103:src/xeq.c     ****  *  Count down counter for a programmed pause
 104:src/xeq.c     ****  */
 105:src/xeq.c     **** volatile unsigned char Pause;
 106:src/xeq.c     **** 
 107:src/xeq.c     **** /*
 108:src/xeq.c     ****  *  Some long running function has called busy();
 109:src/xeq.c     ****  */
 110:src/xeq.c     **** FLAG Busy;
 111:src/xeq.c     **** 
 112:src/xeq.c     **** /*
 113:src/xeq.c     ****  *  Error code
 114:src/xeq.c     ****  */
 115:src/xeq.c     **** SMALL_INT Error;
 116:src/xeq.c     **** 
 117:src/xeq.c     **** /*
 118:src/xeq.c     ****  *  Indication of PC wrap around
 119:src/xeq.c     ****  */
 120:src/xeq.c     **** FLAG PcWrapped;
 121:src/xeq.c     **** 
 122:src/xeq.c     **** /*
 123:src/xeq.c     ****  *  Currently executed function
 124:src/xeq.c     ****  */
 125:src/xeq.c     **** s_opcode XeqOpCode;
 126:src/xeq.c     **** 
 127:src/xeq.c     **** /*
 128:src/xeq.c     ****  *  Temporary display (not X)
 129:src/xeq.c     ****  */
 130:src/xeq.c     **** SMALL_INT ShowRegister;
 131:src/xeq.c     **** 
 132:src/xeq.c     **** /*
 133:src/xeq.c     ****  *  User code being called from XROM
 134:src/xeq.c     ****  */
 135:src/xeq.c     **** SMALL_INT XromUserPc;
 136:src/xeq.c     **** SMALL_INT UserLocalRegs;
 137:src/xeq.c     **** 
 138:src/xeq.c     **** /* We need various different math contexts.
 139:src/xeq.c     ****  * More efficient to define these globally and reuse them as needed.
 140:src/xeq.c     ****  */
 141:src/xeq.c     **** decContext Ctx;
 142:src/xeq.c     **** 
 143:src/xeq.c     **** /*
ARM GAS  /tmp/cc7LeJ71.s 			page 4


 144:src/xeq.c     ****  * A buffer for instruction display
 145:src/xeq.c     ****  */
 146:src/xeq.c     **** char TraceBuffer[25];
 147:src/xeq.c     **** 
 148:src/xeq.c     **** /*
 149:src/xeq.c     ****  *  Total Size of the return stack
 150:src/xeq.c     ****  */
 151:src/xeq.c     **** SMALL_INT RetStkSize;
 152:src/xeq.c     **** 
 153:src/xeq.c     **** /*
 154:src/xeq.c     ****  *  Number of remaining program steps
 155:src/xeq.c     ****  */
 156:src/xeq.c     **** SMALL_INT ProgFree;
 157:src/xeq.c     **** 
 158:src/xeq.c     **** /*
 159:src/xeq.c     ****  * The actual top of the return stack
 160:src/xeq.c     ****  */
 161:src/xeq.c     **** unsigned short *RetStk;
 162:src/xeq.c     **** 
 163:src/xeq.c     **** /*
 164:src/xeq.c     ****  *  The location of the RPN stack
 165:src/xeq.c     ****  */
 166:src/xeq.c     **** REGISTER *StackBase;
 167:src/xeq.c     **** 
 168:src/xeq.c     **** #ifdef INFRARED
 169:src/xeq.c     **** /*
 170:src/xeq.c     ****  *  Is tracing active?
 171:src/xeq.c     ****  */
 172:src/xeq.c     **** FLAG Tracing;
 173:src/xeq.c     **** #endif
 174:src/xeq.c     **** 
 175:src/xeq.c     **** /*
 176:src/xeq.c     **** *	Indicates that a coordinate converstion has just happened
 177:src/xeq.c     **** */
 178:src/xeq.c     **** #ifdef RP_PREFIX
 179:src/xeq.c     **** SMALL_INT RectPolConv; // 1 - R->P just done; 2 - P->R just done
 180:src/xeq.c     **** #endif
 181:src/xeq.c     **** 
 182:src/xeq.c     **** /*
 183:src/xeq.c     ****  *  Check if the current PC is in XROM
 184:src/xeq.c     ****  */
 185:src/xeq.c     **** int is_xrom(void) {
 186:src/xeq.c     **** 	return isXROM(state_pc());
 187:src/xeq.c     **** }
 188:src/xeq.c     **** 
 189:src/xeq.c     **** /*
 190:src/xeq.c     ****  *  Shift the return stack.
 191:src/xeq.c     ****  *  The distance is in levels.
 192:src/xeq.c     ****  *  If argument is negative, return stack will shrink.
 193:src/xeq.c     ****  *  Returns 1 if unsuccessful (error is set)
 194:src/xeq.c     ****  */
 195:src/xeq.c     **** int move_retstk(int distance)
 196:src/xeq.c     **** {
 197:src/xeq.c     **** #ifndef REALBUILD
 198:src/xeq.c     **** 	// Sanity check
 199:src/xeq.c     **** 	if (XromFlags.xIN) {
 200:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
ARM GAS  /tmp/cc7LeJ71.s 			page 5


 201:src/xeq.c     **** 		return 1;
 202:src/xeq.c     **** 	}
 203:src/xeq.c     **** #endif
 204:src/xeq.c     **** 	if (RetStkSize + RetStkPtr + distance < 0) {
 205:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 206:src/xeq.c     **** 		return 1;
 207:src/xeq.c     **** 	}
 208:src/xeq.c     **** 	xcopy(RetStk + RetStkPtr + distance, RetStk + RetStkPtr, (-RetStkPtr) << 1);
 209:src/xeq.c     **** 	RetStk += distance;
 210:src/xeq.c     **** 	RetStkSize += distance;
 211:src/xeq.c     **** 	return 0;
 212:src/xeq.c     **** }
 213:src/xeq.c     **** 
 214:src/xeq.c     **** /*
 215:src/xeq.c     ****  *  How many stack levels with local data have we?
 216:src/xeq.c     ****  */
 217:src/xeq.c     **** int local_levels(void) {
 218:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 219:src/xeq.c     **** }
 220:src/xeq.c     **** 
 221:src/xeq.c     **** /*
 222:src/xeq.c     ****  *  How many local registers have we?
 223:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 224:src/xeq.c     ****  */
 225:src/xeq.c     **** int local_regs_rarg(enum rarg op) {
 226:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 227:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 228:src/xeq.c     **** }
 229:src/xeq.c     **** 
 230:src/xeq.c     **** /*
 231:src/xeq.c     ****  *  How many local registers have we?
 232:src/xeq.c     ****  */
 233:src/xeq.c     **** int local_regs(void) {
 234:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 235:src/xeq.c     **** }
 236:src/xeq.c     **** 
 237:src/xeq.c     **** /*
 238:src/xeq.c     ****  *  How many global registers have we?
 239:src/xeq.c     ****  *  The result depends on the RARG operation to allow for "alien" RCL commands
 240:src/xeq.c     ****  */
 241:src/xeq.c     **** unsigned int global_regs_rarg(enum rarg op) {
 242:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 243:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 244:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 245:src/xeq.c     **** 	}
 246:src/xeq.c     **** 	else
 247:src/xeq.c     **** 		return NumRegs;
 248:src/xeq.c     **** }
 249:src/xeq.c     **** 
 250:src/xeq.c     **** /*
 251:src/xeq.c     ****  *  How many global registers have we?
 252:src/xeq.c     ****  */
 253:src/xeq.c     **** unsigned int global_regs(void) {
 254:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 255:src/xeq.c     **** }
 256:src/xeq.c     **** 
 257:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 6


 258:src/xeq.c     **** #if defined(CONSOLE)
 259:src/xeq.c     **** // Console screen only
 260:src/xeq.c     **** unsigned int get_local_flags(void) {
 261:src/xeq.c     **** 	if (LocalRegs == 0)
 262:src/xeq.c     **** 		return 0;
 263:src/xeq.c     **** 	return RetStk[LocalRegs + 1];
 264:src/xeq.c     **** }
 265:src/xeq.c     **** #endif
 266:src/xeq.c     **** 
 267:src/xeq.c     **** void version(enum nilop op) {
 268:src/xeq.c     **** 	State2.version = 1;
 269:src/xeq.c     **** 	if (!State2.runmode)
 270:src/xeq.c     **** 		display();
 271:src/xeq.c     **** }
 272:src/xeq.c     **** 
 273:src/xeq.c     **** void cmd_off(enum nilop op) {
 274:src/xeq.c     **** 	shutdown();
 275:src/xeq.c     **** }
 276:src/xeq.c     **** 
 277:src/xeq.c     **** #ifndef state_pc
 278:src/xeq.c     **** unsigned int state_pc(void) {
 279:src/xeq.c     **** 	return State.pc;	
 280:src/xeq.c     **** }
 281:src/xeq.c     **** #endif
 282:src/xeq.c     **** static void raw_set_pc(unsigned int pc) {
 283:src/xeq.c     **** 	State.pc = pc;
 284:src/xeq.c     **** 	update_program_bounds(0);
 285:src/xeq.c     **** }
 286:src/xeq.c     **** 
 287:src/xeq.c     **** /*
 288:src/xeq.c     ****  *  Where do the program regions start?
 289:src/xeq.c     ****  */
 290:src/xeq.c     **** #ifdef DM42
 291:src/xeq.c     **** 
 292:src/xeq.c     **** #pragma GCC diagnostic push
 293:src/xeq.c     **** #pragma GCC diagnostic ignored "-Wdiscarded-qualifiers"
 294:src/xeq.c     **** static s_opcode * RegionTab[] = {
 295:src/xeq.c     **** 	NULL,
 296:src/xeq.c     **** 	NULL,
 297:src/xeq.c     **** 	NULL,
 298:src/xeq.c     **** 	xrom
 299:src/xeq.c     **** };
 300:src/xeq.c     **** #pragma GCC diagnostic pop
 301:src/xeq.c     **** 
 302:src/xeq.c     **** void init_RegionTab (void) {
 303:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 304:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 305:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 306:src/xeq.c     **** }
 307:src/xeq.c     **** 
 308:src/xeq.c     **** #else
 309:src/xeq.c     **** static const s_opcode *const RegionTab[] = {
 310:src/xeq.c     **** 	Prog,
 311:src/xeq.c     **** 	UserFlash.prog,
 312:src/xeq.c     **** 	BackupFlash._prog,
 313:src/xeq.c     **** 	xrom
 314:src/xeq.c     **** };
ARM GAS  /tmp/cc7LeJ71.s 			page 7


 315:src/xeq.c     **** #endif
 316:src/xeq.c     **** /*
 317:src/xeq.c     ****  *  Size of a program segment
 318:src/xeq.c     ****  */
 319:src/xeq.c     **** int sizeLIB(int region) {
 320:src/xeq.c     **** 	if (region == REGION_XROM)
 321:src/xeq.c     **** 		return xrom_size;
 322:src/xeq.c     **** 	else
 323:src/xeq.c     **** 		return (int)RegionTab[region][-1];
 324:src/xeq.c     **** }
 325:src/xeq.c     **** 
 326:src/xeq.c     **** 
 327:src/xeq.c     **** /*
 328:src/xeq.c     ****  *  Get an opcode, check for double length codes
 329:src/xeq.c     ****  */
 330:src/xeq.c     **** static opcode get_opcode( const s_opcode *loc )
 331:src/xeq.c     **** {
 332:src/xeq.c     **** 	opcode r = *loc;
 333:src/xeq.c     **** 	if ( isDBL(r) ) {
 334:src/xeq.c     **** 		r |= loc[1] << 16;
 335:src/xeq.c     **** 	}
 336:src/xeq.c     **** 	return r;
 337:src/xeq.c     **** }
 338:src/xeq.c     **** 
 339:src/xeq.c     **** 
 340:src/xeq.c     **** /* 
 341:src/xeq.c     ****  * Return the program memory location specified.
 342:src/xeq.c     ****  */
 343:src/xeq.c     **** opcode getprog(unsigned int pc) {
 344:src/xeq.c     **** 
 345:src/xeq.c     **** 	const int region = nLIB(pc);
 346:src/xeq.c     **** 	int offset = offsetLIB(pc);
 347:src/xeq.c     **** 
 348:src/xeq.c     **** 	if (offset < 0 || offset >= sizeLIB(region))
 349:src/xeq.c     **** 		return OP_NIL | OP_END;
 350:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 351:src/xeq.c     **** }
 352:src/xeq.c     **** 
 353:src/xeq.c     **** 
 354:src/xeq.c     **** /* 
 355:src/xeq.c     ****  * Return the physical start-address of the current program
 356:src/xeq.c     ****  */
 357:src/xeq.c     **** const s_opcode *get_current_prog(void) {
 358:src/xeq.c     **** 
 359:src/xeq.c     **** 	const int region = nLIB(ProgBegin);
 360:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 361:src/xeq.c     **** }
 362:src/xeq.c     **** 
 363:src/xeq.c     **** 
 364:src/xeq.c     **** /*
 365:src/xeq.c     ****  *  Set PC with sanity check
 366:src/xeq.c     ****  */
 367:src/xeq.c     **** void set_pc(unsigned int pc) {
 368:src/xeq.c     **** 	if (isRAM(pc)) {
 369:src/xeq.c     **** 		if (pc > ProgSize)
 370:src/xeq.c     **** 			pc = ProgSize;
 371:src/xeq.c     **** 		if (pc > 1 && isDBL(Prog_1[pc - 1]))
ARM GAS  /tmp/cc7LeJ71.s 			page 8


 372:src/xeq.c     **** 			pc--;
 373:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 374:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 375:src/xeq.c     **** 		if (pc > n - 1)
 376:src/xeq.c     **** 			pc = n - 1;
 377:src/xeq.c     **** 		if (pc > startLIB(pc) && isDBL(getprog(pc - 1)))
 378:src/xeq.c     **** 			--pc;
 379:src/xeq.c     **** 	}
 380:src/xeq.c     **** 	raw_set_pc(pc);
 381:src/xeq.c     **** }
 382:src/xeq.c     **** 
 383:src/xeq.c     **** 
 384:src/xeq.c     **** 
 385:src/xeq.c     **** /* Locate the beginning and end of a section from a PC that points anywhere within
 386:src/xeq.c     ****  */
 387:src/xeq.c     **** static unsigned short int find_section_bounds(const unsigned int pc, const int endp, unsigned short
  30              		.loc 1 387 119 view -0
  31              		.cfi_startproc
  32              		@ args = 0, pretend = 0, frame = 0
  33              		@ frame_needed = 0, uses_anonymous_args = 0
  34              		@ link register save eliminated.
 388:src/xeq.c     **** 	unsigned short int top, bottom;
  35              		.loc 1 388 2 view .LVU1
 389:src/xeq.c     **** 
 390:src/xeq.c     **** 	if (endp && State2.runmode) { 
  36              		.loc 1 390 2 view .LVU2
  37              		.loc 1 390 5 is_stmt 0 view .LVU3
  38 0000 71B1     		cbz	r1, .L2
  39              		.loc 1 390 11 discriminator 1 view .LVU4
  40 0002 194B     		ldr	r3, .L14
  41 0004 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
  42 0006 5B06     		lsls	r3, r3, #25
  43 0008 0AD5     		bpl	.L2
 391:src/xeq.c     **** 		// Use the current program as bounds
 392:src/xeq.c     **** 		top = ProgBegin;
  44              		.loc 1 392 3 is_stmt 1 view .LVU5
  45              		.loc 1 392 9 is_stmt 0 view .LVU6
  46 000a 184B     		ldr	r3, .L14+4
  47 000c 1968     		ldr	r1, [r3]
  48              	.LVL1:
 393:src/xeq.c     **** 		bottom = ProgEnd;
  49              		.loc 1 393 3 is_stmt 1 view .LVU7
  50 000e B1F8EC37 		ldrh	r3, [r1, #2028]
  51              		.loc 1 393 10 is_stmt 0 view .LVU8
  52 0012 B1F8EE07 		ldrh	r0, [r1, #2030]
  53              	.LVL2:
 394:src/xeq.c     **** 		if (top == 0)
  54              		.loc 1 394 3 is_stmt 1 view .LVU9
  55 0016 012B     		cmp	r3, #1
  56 0018 38BF     		it	cc
  57 001a 0123     		movcc	r3, #1
  58              	.LVL3:
 395:src/xeq.c     **** 			top = 1;
 396:src/xeq.c     **** 	}
 397:src/xeq.c     **** 	else if (isXROM(pc)) {
 398:src/xeq.c     **** 		top = addrXROM(1);
 399:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
ARM GAS  /tmp/cc7LeJ71.s 			page 9


 400:src/xeq.c     **** 	} 
 401:src/xeq.c     **** 	else if (isLIB(pc)) {
 402:src/xeq.c     **** 		top = startLIB(pc);
 403:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
 404:src/xeq.c     **** 	}
 405:src/xeq.c     **** 	else {
 406:src/xeq.c     **** 		top = State2.runmode;  // step 001 if not entering a program
 407:src/xeq.c     **** 		bottom = ProgSize;
 408:src/xeq.c     **** 	}
 409:src/xeq.c     **** 	*p_top = top;
  59              		.loc 1 409 2 view .LVU10
  60              		.loc 1 409 9 is_stmt 0 view .LVU11
  61 001c 1380     		strh	r3, [r2]	@ movhi
 410:src/xeq.c     **** 	return bottom;
  62              		.loc 1 410 2 is_stmt 1 view .LVU12
 411:src/xeq.c     **** }
  63              		.loc 1 411 1 is_stmt 0 view .LVU13
  64 001e 7047     		bx	lr
  65              	.LVL4:
  66              	.L2:
 397:src/xeq.c     **** 		top = addrXROM(1);
  67              		.loc 1 397 7 is_stmt 1 view .LVU14
 397:src/xeq.c     **** 		top = addrXROM(1);
  68              		.loc 1 397 11 is_stmt 0 view .LVU15
  69 0020 830B     		lsrs	r3, r0, #14
 397:src/xeq.c     **** 		top = addrXROM(1);
  70              		.loc 1 397 10 view .LVU16
  71 0022 032B     		cmp	r3, #3
  72 0024 0FD0     		beq	.L13
 401:src/xeq.c     **** 		top = startLIB(pc);
  73              		.loc 1 401 7 is_stmt 1 view .LVU17
 401:src/xeq.c     **** 		top = startLIB(pc);
  74              		.loc 1 401 10 is_stmt 0 view .LVU18
  75 0026 10F4404F 		tst	r0, #49152
  76 002a 14D0     		beq	.L5
 402:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  77              		.loc 1 402 3 is_stmt 1 view .LVU19
  78              	.LBB1319:
  79              	.LBB1320:
 323:src/xeq.c     **** }
  80              		.loc 1 323 24 is_stmt 0 view .LVU20
  81 002c 1049     		ldr	r1, .L14+8
  82              	.LVL5:
 323:src/xeq.c     **** }
  83              		.loc 1 323 32 view .LVU21
  84 002e 51F82330 		ldr	r3, [r1, r3, lsl #2]
  85              	.LBE1320:
  86              	.LBE1319:
 403:src/xeq.c     **** 	}
  87              		.loc 1 403 10 view .LVU22
  88 0032 33F8021C 		ldrh	r1, [r3, #-2]
 402:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  89              		.loc 1 402 9 view .LVU23
  90 0036 00F44043 		and	r3, r0, #49152
 403:src/xeq.c     **** 	}
  91              		.loc 1 403 10 view .LVU24
  92 003a 5818     		adds	r0, r3, r1
ARM GAS  /tmp/cc7LeJ71.s 			page 10


  93              	.LVL6:
 402:src/xeq.c     **** 		bottom = top + sizeLIB(nLIB(pc)) - 1;
  94              		.loc 1 402 7 view .LVU25
  95 003c 0133     		adds	r3, r3, #1
  96 003e 9BB2     		uxth	r3, r3
  97              	.LVL7:
 403:src/xeq.c     **** 	}
  98              		.loc 1 403 3 is_stmt 1 view .LVU26
  99              	.LBB1322:
 100              	.LBI1319:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 101              		.loc 1 319 5 view .LVU27
 102              	.LBB1321:
 320:src/xeq.c     **** 		return xrom_size;
 103              		.loc 1 320 2 view .LVU28
 323:src/xeq.c     **** }
 104              		.loc 1 323 3 view .LVU29
 323:src/xeq.c     **** }
 105              		.loc 1 323 3 is_stmt 0 view .LVU30
 106              	.LBE1321:
 107              	.LBE1322:
 403:src/xeq.c     **** 	}
 108              		.loc 1 403 10 view .LVU31
 109 0040 80B2     		uxth	r0, r0
 110              	.LVL8:
 409:src/xeq.c     **** 	return bottom;
 111              		.loc 1 409 2 is_stmt 1 view .LVU32
 409:src/xeq.c     **** 	return bottom;
 112              		.loc 1 409 9 is_stmt 0 view .LVU33
 113 0042 1380     		strh	r3, [r2]	@ movhi
 410:src/xeq.c     **** }
 114              		.loc 1 410 2 is_stmt 1 view .LVU34
 115              		.loc 1 411 1 is_stmt 0 view .LVU35
 116 0044 7047     		bx	lr
 117              	.LVL9:
 118              	.L13:
 398:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 119              		.loc 1 398 3 is_stmt 1 view .LVU36
 399:src/xeq.c     **** 	} 
 120              		.loc 1 399 3 view .LVU37
 399:src/xeq.c     **** 	} 
 121              		.loc 1 399 10 is_stmt 0 view .LVU38
 122 0046 0B4B     		ldr	r3, .L14+12
 123 0048 1888     		ldrh	r0, [r3]
 124              	.LVL10:
 398:src/xeq.c     **** 		bottom = addrXROM(xrom_size);
 125              		.loc 1 398 7 view .LVU39
 126 004a 4CF20103 		movw	r3, #49153
 399:src/xeq.c     **** 	} 
 127              		.loc 1 399 10 view .LVU40
 128 004e 40F44040 		orr	r0, r0, #49152
 129              	.LVL11:
 409:src/xeq.c     **** 	return bottom;
 130              		.loc 1 409 2 is_stmt 1 view .LVU41
 409:src/xeq.c     **** 	return bottom;
 131              		.loc 1 409 9 is_stmt 0 view .LVU42
 132 0052 1380     		strh	r3, [r2]	@ movhi
ARM GAS  /tmp/cc7LeJ71.s 			page 11


 410:src/xeq.c     **** }
 133              		.loc 1 410 2 is_stmt 1 view .LVU43
 134              		.loc 1 411 1 is_stmt 0 view .LVU44
 135 0054 7047     		bx	lr
 136              	.LVL12:
 137              	.L5:
 406:src/xeq.c     **** 		bottom = ProgSize;
 138              		.loc 1 406 3 is_stmt 1 view .LVU45
 406:src/xeq.c     **** 		bottom = ProgSize;
 139              		.loc 1 406 15 is_stmt 0 view .LVU46
 140 0056 044B     		ldr	r3, .L14
 407:src/xeq.c     **** 	}
 141              		.loc 1 407 10 view .LVU47
 142 0058 0449     		ldr	r1, .L14+4
 143              	.LVL13:
 406:src/xeq.c     **** 		bottom = ProgSize;
 144              		.loc 1 406 15 view .LVU48
 145 005a 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 407:src/xeq.c     **** 	}
 146              		.loc 1 407 10 view .LVU49
 147 005c 0968     		ldr	r1, [r1]
 406:src/xeq.c     **** 		bottom = ProgSize;
 148              		.loc 1 406 7 view .LVU50
 149 005e C3F38013 		ubfx	r3, r3, #6, #1
 150              	.LVL14:
 407:src/xeq.c     **** 	}
 151              		.loc 1 407 3 is_stmt 1 view .LVU51
 407:src/xeq.c     **** 	}
 152              		.loc 1 407 10 is_stmt 0 view .LVU52
 153 0062 4888     		ldrh	r0, [r1, #2]
 154              	.LVL15:
 409:src/xeq.c     **** 	return bottom;
 155              		.loc 1 409 2 is_stmt 1 view .LVU53
 409:src/xeq.c     **** 	return bottom;
 156              		.loc 1 409 9 is_stmt 0 view .LVU54
 157 0064 1380     		strh	r3, [r2]	@ movhi
 410:src/xeq.c     **** }
 158              		.loc 1 410 2 is_stmt 1 view .LVU55
 159              		.loc 1 411 1 is_stmt 0 view .LVU56
 160 0066 7047     		bx	lr
 161              	.L15:
 162              		.align	2
 163              	.L14:
 164 0068 00000000 		.word	StateWhileOn
 165 006c 00000000 		.word	main_ram
 166 0070 00000000 		.word	.LANCHOR0
 167 0074 00000000 		.word	xrom_size
 168              		.cfi_endproc
 169              	.LFE19:
 171              		.section	.text.reg_address,"ax",%progbits
 172              		.align	1
 173              		.p2align 2,,3
 174              		.syntax unified
 175              		.thumb
 176              		.thumb_func
 177              		.fpu fpv4-sp-d16
 179              	reg_address:
ARM GAS  /tmp/cc7LeJ71.s 			page 12


 180              	.LVL16:
 181              	.LFB90:
 412:src/xeq.c     **** 
 413:src/xeq.c     **** 
 414:src/xeq.c     **** /* Increment the passed PC.  Account for wrap around but nothing else.
 415:src/xeq.c     ****  * Return the updated PC.
 416:src/xeq.c     ****  * Set PcWrapped on wrap around
 417:src/xeq.c     ****  */
 418:src/xeq.c     **** unsigned int do_inc(const unsigned int pc, int endp) {
 419:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 420:src/xeq.c     **** 	unsigned short int top = 0;
 421:src/xeq.c     **** 	unsigned short int bottom = 0;
 422:src/xeq.c     **** 
 423:src/xeq.c     **** 	PcWrapped = 0;
 424:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 425:src/xeq.c     **** 
 426:src/xeq.c     **** 	if (npc > bottom) {
 427:src/xeq.c     **** 		PcWrapped = 1;
 428:src/xeq.c     **** 		return top;
 429:src/xeq.c     **** 	}
 430:src/xeq.c     **** 	return npc;
 431:src/xeq.c     **** }
 432:src/xeq.c     **** 
 433:src/xeq.c     **** /* Decrement the passed PC.  Account for wrap around but nothing else.
 434:src/xeq.c     ****  * Return the updated PC.
 435:src/xeq.c     ****  * Set PcWrapped on wrap around
 436:src/xeq.c     ****  */
 437:src/xeq.c     **** unsigned int do_dec(unsigned int pc, int endp) {
 438:src/xeq.c     **** 	unsigned short int top = 0;
 439:src/xeq.c     **** 	unsigned short int bottom = 0;
 440:src/xeq.c     **** 
 441:src/xeq.c     **** 	PcWrapped = 0;
 442:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 443:src/xeq.c     **** 
 444:src/xeq.c     **** 	if (pc <= top) {
 445:src/xeq.c     **** 		PcWrapped = 1;
 446:src/xeq.c     **** 		pc = bottom;
 447:src/xeq.c     **** 	}
 448:src/xeq.c     **** 	else
 449:src/xeq.c     **** 		--pc;
 450:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 451:src/xeq.c     **** 		--pc;
 452:src/xeq.c     **** 	return pc;
 453:src/xeq.c     **** }
 454:src/xeq.c     **** 
 455:src/xeq.c     **** /* Increment the PC keeping account of wrapping around and stopping
 456:src/xeq.c     ****  * programs on such.  Return non-zero if we wrapped.
 457:src/xeq.c     ****  */
 458:src/xeq.c     **** int incpc(void) {
 459:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 460:src/xeq.c     **** 	return PcWrapped;
 461:src/xeq.c     **** }
 462:src/xeq.c     **** 
 463:src/xeq.c     **** void decpc(void) {
 464:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 465:src/xeq.c     **** }
 466:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 13


 467:src/xeq.c     **** /*
 468:src/xeq.c     ****  * Update the pointers to the current program delimited by END statements
 469:src/xeq.c     ****  */
 470:src/xeq.c     **** void update_program_bounds(const int force) {
 471:src/xeq.c     **** 	unsigned int pc = state_pc();
 472:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 473:src/xeq.c     **** 		State.pc = pc = 1;
 474:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 475:src/xeq.c     **** 		return;
 476:src/xeq.c     **** 	for (PcWrapped = 0; !PcWrapped; pc = do_inc(pc, 0)) {
 477:src/xeq.c     **** 		ProgEnd = pc;
 478:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 479:src/xeq.c     **** 			break;
 480:src/xeq.c     **** 		}
 481:src/xeq.c     **** 	}
 482:src/xeq.c     **** 	for (pc = state_pc();;) {
 483:src/xeq.c     **** 		const unsigned int opc = pc;
 484:src/xeq.c     **** 		pc = do_dec(opc, 0);
 485:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 486:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 487:src/xeq.c     **** 			break;
 488:src/xeq.c     **** 		}
 489:src/xeq.c     **** 	}
 490:src/xeq.c     **** }
 491:src/xeq.c     **** 
 492:src/xeq.c     **** /* Determine where in program space the PC really is
 493:src/xeq.c     ****  */
 494:src/xeq.c     **** unsigned int user_pc(unsigned int pc) {
 495:src/xeq.c     **** 	unsigned int n = 1;
 496:src/xeq.c     **** 	unsigned int base;
 497:src/xeq.c     **** 
 498:src/xeq.c     **** #ifndef REALBUILD
 499:src/xeq.c     **** 	if (pc == 0 || isXROM(pc))
 500:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 501:src/xeq.c     **** #else
 502:src/xeq.c     **** 	if (pc == 0)
 503:src/xeq.c     **** 		return 0;
 504:src/xeq.c     **** #endif
 505:src/xeq.c     **** 	base = startLIB(pc);
 506:src/xeq.c     **** 	while (base < pc) {
 507:src/xeq.c     **** 		base = do_inc(base, 0);
 508:src/xeq.c     **** 		if (PcWrapped)
 509:src/xeq.c     **** 			return n;
 510:src/xeq.c     **** 		++n;
 511:src/xeq.c     **** 	}
 512:src/xeq.c     **** 	return n;
 513:src/xeq.c     **** }
 514:src/xeq.c     **** 
 515:src/xeq.c     **** /* Given a target user PC, figure out the real matching PC
 516:src/xeq.c     ****  */
 517:src/xeq.c     **** unsigned int find_user_pc(unsigned int target) {
 518:src/xeq.c     **** 	unsigned int upc = state_pc();
 519:src/xeq.c     **** 	const int libp = isLIB(upc);
 520:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 521:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 522:src/xeq.c     **** #ifndef REALBUILD
 523:src/xeq.c     **** 	if (isXROM(upc))
ARM GAS  /tmp/cc7LeJ71.s 			page 14


 524:src/xeq.c     **** 		return addrXROM(target);
 525:src/xeq.c     **** #endif
 526:src/xeq.c     **** 	while (n++ < target) {
 527:src/xeq.c     **** 		const unsigned int oldbase = base;
 528:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 529:src/xeq.c     **** 		if (PcWrapped)
 530:src/xeq.c     **** 			return oldbase;
 531:src/xeq.c     **** 	}
 532:src/xeq.c     **** 	return base;
 533:src/xeq.c     **** }
 534:src/xeq.c     **** 
 535:src/xeq.c     **** 
 536:src/xeq.c     **** /* Set a flag to indicate that a complex operation has taken place
 537:src/xeq.c     ****  * The flag disappears with the next command executed.
 538:src/xeq.c     ****  */
 539:src/xeq.c     **** static void set_was_complex(void) {
 540:src/xeq.c     **** 	State2.wascomplex = 1;
 541:src/xeq.c     **** }
 542:src/xeq.c     **** 
 543:src/xeq.c     **** 
 544:src/xeq.c     **** /* Produce an error and stop
 545:src/xeq.c     ****  */
 546:src/xeq.c     **** int report_err(const unsigned int e) {
 547:src/xeq.c     **** 	if (Error == ERR_NONE) {
 548:src/xeq.c     **** 		Error = e;
 549:src/xeq.c     **** 		if (e == ERR_NONE) {
 550:src/xeq.c     **** 			error_message(e); // "Running Program"
 551:src/xeq.c     **** 			return 0;
 552:src/xeq.c     **** 		}
 553:src/xeq.c     **** 	}
 554:src/xeq.c     **** 	return 1;
 555:src/xeq.c     **** }
 556:src/xeq.c     **** 
 557:src/xeq.c     **** 
 558:src/xeq.c     **** /* Display a warning
 559:src/xeq.c     ****  */
 560:src/xeq.c     **** int report_warn(const unsigned int e) {
 561:src/xeq.c     **** 	if (Running) {
 562:src/xeq.c     **** 		return report_err(e);
 563:src/xeq.c     **** 	}
 564:src/xeq.c     **** 	error_message(e);
 565:src/xeq.c     **** #ifndef CONSOLE
 566:src/xeq.c     **** 	State2.disp_freeze = 0;
 567:src/xeq.c     **** 	JustDisplayed = 1;
 568:src/xeq.c     **** 	ShowRPN = 1;
 569:src/xeq.c     **** #endif
 570:src/xeq.c     **** 	return e != ERR_NONE;
 571:src/xeq.c     **** }
 572:src/xeq.c     **** 
 573:src/xeq.c     **** 
 574:src/xeq.c     **** /* Doing something in the wrong mode */
 575:src/xeq.c     **** void bad_mode_error(void) {
 576:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 577:src/xeq.c     **** }
 578:src/xeq.c     **** 
 579:src/xeq.c     **** 
 580:src/xeq.c     **** /* User command to produce an error */
ARM GAS  /tmp/cc7LeJ71.s 			page 15


 581:src/xeq.c     **** void cmderr(unsigned int arg, enum rarg op) {
 582:src/xeq.c     **** 	report_err(arg);
 583:src/xeq.c     **** }
 584:src/xeq.c     **** 
 585:src/xeq.c     **** 
 586:src/xeq.c     **** /* User command to display a warning */
 587:src/xeq.c     **** void cmdmsg(unsigned int arg, enum rarg op) {
 588:src/xeq.c     **** 	error_message(arg);
 589:src/xeq.c     **** }
 590:src/xeq.c     **** 
 591:src/xeq.c     **** 
 592:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE)
 593:src/xeq.c     **** #include <stdlib.h>
 594:src/xeq.c     **** static void error(const char *fmt, ...) {
 595:src/xeq.c     **** 	va_list ap;
 596:src/xeq.c     **** 	va_start(ap, fmt);
 597:src/xeq.c     **** 	vprintf(fmt, ap);
 598:src/xeq.c     **** 	va_end(ap);
 599:src/xeq.c     **** 	putchar('\n');
 600:src/xeq.c     **** 	exit(1);
 601:src/xeq.c     **** }
 602:src/xeq.c     **** 
 603:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); printf("illegal opcode 0x%08x\n", op); } while (
 604:src/xeq.c     **** #else
 605:src/xeq.c     **** #define illegal(op)	do { report_err(ERR_PROG_BAD); } while (0)
 606:src/xeq.c     **** #endif
 607:src/xeq.c     **** 
 608:src/xeq.c     **** /* Real rounding mode access routine
 609:src/xeq.c     ****  */
 610:src/xeq.c     **** static enum rounding get_rounding_mode() {
 611:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 612:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 613:src/xeq.c     **** 		DEC_ROUND_UP, DEC_ROUND_DOWN,
 614:src/xeq.c     **** 		DEC_ROUND_CEILING, DEC_ROUND_FLOOR
 615:src/xeq.c     **** 	};
 616:src/xeq.c     **** 	return (enum rounding) modes[UState.rounding_mode];
 617:src/xeq.c     **** }
 618:src/xeq.c     **** 
 619:src/xeq.c     **** void op_roundingmode(enum nilop op) {
 620:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 621:src/xeq.c     **** }
 622:src/xeq.c     **** 
 623:src/xeq.c     **** void rarg_roundingmode(unsigned int arg, enum rarg op) {
 624:src/xeq.c     **** 	UState.rounding_mode = arg;
 625:src/xeq.c     **** }
 626:src/xeq.c     **** 
 627:src/xeq.c     **** 
 628:src/xeq.c     **** /* Pack a number into our DPD register format
 629:src/xeq.c     ****  */
 630:src/xeq.c     **** 
 631:src/xeq.c     **** void packed_from_number(decimal64 *r, const decNumber *x) {
 632:src/xeq.c     **** 	decContext ctx64;
 633:src/xeq.c     **** 
 634:src/xeq.c     **** 	decContextDefault(&ctx64, DEC_INIT_DECIMAL64);
 635:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 636:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 637:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 16


 638:src/xeq.c     **** 
 639:src/xeq.c     **** void packed128_from_number(decimal128 *r, const decNumber *x) {
 640:src/xeq.c     **** 	decContext ctx128;
 641:src/xeq.c     **** 
 642:src/xeq.c     **** 	decContextDefault(&ctx128, DEC_INIT_DECIMAL128);
 643:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 644:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 645:src/xeq.c     **** }
 646:src/xeq.c     **** 
 647:src/xeq.c     **** // Repack a decimal128 to decimal64
 648:src/xeq.c     **** void packed_from_packed128(decimal64 *r, const decimal128 *s) {
 649:src/xeq.c     **** 	decNumber temp;
 650:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 651:src/xeq.c     **** }
 652:src/xeq.c     **** 
 653:src/xeq.c     **** // Repack a decimal64 to decimal128
 654:src/xeq.c     **** void packed128_from_packed(decimal128 *r, const decimal64 *s) {
 655:src/xeq.c     **** 	decNumber temp;
 656:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 657:src/xeq.c     **** }
 658:src/xeq.c     **** 
 659:src/xeq.c     **** /*
 660:src/xeq.c     ****  *  User command to round to a specific number of digits
 661:src/xeq.c     ****  */
 662:src/xeq.c     **** void rarg_round(unsigned int arg, enum rarg op) {
 663:src/xeq.c     **** 	decNumber res, x;
 664:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 665:src/xeq.c     **** 
 666:src/xeq.c     **** 	if (is_intmode()) {
 667:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 668:src/xeq.c     **** 		return;
 669:src/xeq.c     **** 	}
 670:src/xeq.c     **** 
 671:src/xeq.c     **** 	setlastX();
 672:src/xeq.c     **** 	getX(&x);
 673:src/xeq.c     **** 	if (op == RARG_ROUND)
 674:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 675:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 676:src/xeq.c     **** 		decNumberRoundDecimals(&res, &x, arg, rm);
 677:src/xeq.c     **** 	setX(&res);
 678:src/xeq.c     **** }
 679:src/xeq.c     **** 
 680:src/xeq.c     **** /* Check if a value is bogus and error out if so.
 681:src/xeq.c     ****  * A value is bogus if it is infinite, NaN *and* flag D is not set.
 682:src/xeq.c     ****  * If flag D is set, these values are allowed through just fine.
 683:src/xeq.c     ****  */
 684:src/xeq.c     **** static int check_special(const decNumber *x) {
 685:src/xeq.c     **** 	decNumber y;
 686:src/xeq.c     **** 	decimal64 z;
 687:src/xeq.c     **** 	decimal128 d;
 688:src/xeq.c     **** 	if (is_dblmode()) {
 689:src/xeq.c     **** 		packed128_from_number(&d, x);
 690:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 691:src/xeq.c     **** 	}
 692:src/xeq.c     **** 	else 
 693:src/xeq.c     **** 	{
 694:src/xeq.c     **** 		packed_from_number(&z, x);
ARM GAS  /tmp/cc7LeJ71.s 			page 17


 695:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 696:src/xeq.c     **** 	}
 697:src/xeq.c     **** 	if (decNumberIsSpecial(&y)) {
 698:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 699:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 700:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 701:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 702:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 703:src/xeq.c     **** 			else
 704:src/xeq.c     **** 				report_err(ERR_INFINITY);
 705:src/xeq.c     **** 			return 1;
 706:src/xeq.c     **** 		}
 707:src/xeq.c     **** 	}
 708:src/xeq.c     **** 	return 0;
 709:src/xeq.c     **** }
 710:src/xeq.c     **** 
 711:src/xeq.c     **** 
 712:src/xeq.c     **** int stack_size(void) {
 713:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 714:src/xeq.c     **** 		return 4;
 715:src/xeq.c     **** 	return 8;
 716:src/xeq.c     **** }
 717:src/xeq.c     **** 
 718:src/xeq.c     **** REGISTER *get_stack(int pos) {
 719:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 720:src/xeq.c     **** }
 721:src/xeq.c     **** 
 722:src/xeq.c     **** static REGISTER *get_stack_top(void) {
 723:src/xeq.c     **** 	return get_stack(stack_size()-1);
 724:src/xeq.c     **** }
 725:src/xeq.c     **** 
 726:src/xeq.c     **** void copyreg(REGISTER *d, const REGISTER *s) {
 727:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 728:src/xeq.c     **** }
 729:src/xeq.c     **** 
 730:src/xeq.c     **** void copyreg_n(int d, int s) {
 731:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 732:src/xeq.c     **** }
 733:src/xeq.c     **** 
 734:src/xeq.c     **** /* Lift the stack one level.
 735:src/xeq.c     ****  */
 736:src/xeq.c     **** void lift(void) {
 737:src/xeq.c     **** 	const int n = stack_size();
 738:src/xeq.c     **** 	int i;
 739:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 740:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 741:src/xeq.c     **** }
 742:src/xeq.c     **** 
 743:src/xeq.c     **** static int get_lift(void) {
 744:src/xeq.c     **** 	return State2.state_lift;
 745:src/xeq.c     **** }
 746:src/xeq.c     **** 
 747:src/xeq.c     **** void lift_if_enabled(void) {
 748:src/xeq.c     **** 	if (get_lift())
 749:src/xeq.c     **** 		lift();
 750:src/xeq.c     **** }
 751:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 18


 752:src/xeq.c     **** static void lift2_if_enabled(void) {
 753:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 754:src/xeq.c     **** 	lift_if_enabled();
 755:src/xeq.c     **** 	if (C_LOCKED) {
 756:src/xeq.c     **** 		lift_if_enabled();
 757:src/xeq.c     **** 	}
 758:src/xeq.c     **** 	else {
 759:src/xeq.c     **** 		lift();
 760:src/xeq.c     **** 	}
 761:src/xeq.c     **** #else
 762:src/xeq.c     **** 	lift_if_enabled();
 763:src/xeq.c     **** 	lift();
 764:src/xeq.c     **** #endif
 765:src/xeq.c     **** }
 766:src/xeq.c     **** 
 767:src/xeq.c     **** void set_lift(void) {
 768:src/xeq.c     ****     State2.state_lift = 1;
 769:src/xeq.c     **** }
 770:src/xeq.c     **** 
 771:src/xeq.c     **** static void clr_lift(void) {
 772:src/xeq.c     ****     State2.state_lift = 0;
 773:src/xeq.c     **** }
 774:src/xeq.c     **** 
 775:src/xeq.c     **** static void lower(void) {
 776:src/xeq.c     **** 	const int n = stack_size();
 777:src/xeq.c     **** 	int i;
 778:src/xeq.c     **** 
 779:src/xeq.c     **** 	for (i=1; i<n; i++)
 780:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 781:src/xeq.c     **** }
 782:src/xeq.c     **** 
 783:src/xeq.c     **** static void lower2(void) {
 784:src/xeq.c     **** 	const int n = stack_size();
 785:src/xeq.c     **** 	int i;
 786:src/xeq.c     **** 
 787:src/xeq.c     **** 	for (i=2; i<n; i++)
 788:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 789:src/xeq.c     **** }
 790:src/xeq.c     **** 
 791:src/xeq.c     **** 
 792:src/xeq.c     **** void setlastX(void) {
 793:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 794:src/xeq.c     **** }
 795:src/xeq.c     **** 
 796:src/xeq.c     **** static void setlastXY(void) {
 797:src/xeq.c     **** 	setlastX();
 798:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 799:src/xeq.c     **** }
 800:src/xeq.c     **** 
 801:src/xeq.c     **** 
 802:src/xeq.c     **** decNumber *getRegister(decNumber *r, int index) {
 803:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 804:src/xeq.c     **** 	if (is_dblmode())
 805:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 806:src/xeq.c     **** 	else
 807:src/xeq.c     **** 		decimal64ToNumber(&(reg->s), r);
 808:src/xeq.c     **** 	return r;
ARM GAS  /tmp/cc7LeJ71.s 			page 19


 809:src/xeq.c     **** }
 810:src/xeq.c     **** 
 811:src/xeq.c     **** void setRegister(int index, const decNumber *x) {
 812:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 813:src/xeq.c     **** 	decNumber dn;
 814:src/xeq.c     **** 
 815:src/xeq.c     **** 	if (! check_special(x)) {	/* This correctly deals with infinities and NaN based on flag D */
 816:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 817:src/xeq.c     **** 		if (is_dblmode())
 818:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 819:src/xeq.c     **** 		else
 820:src/xeq.c     **** 			packed_from_number(&(reg->s), &dn);
 821:src/xeq.c     **** 	}
 822:src/xeq.c     **** }
 823:src/xeq.c     **** 
 824:src/xeq.c     **** decNumber *getX(decNumber *x) {
 825:src/xeq.c     **** 	return getRegister(x, regX_idx);
 826:src/xeq.c     **** }
 827:src/xeq.c     **** 
 828:src/xeq.c     **** void setX(const decNumber *x) {
 829:src/xeq.c     **** 	setRegister(regX_idx, x);
 830:src/xeq.c     **** }
 831:src/xeq.c     **** 
 832:src/xeq.c     **** void getY(decNumber *y) {
 833:src/xeq.c     **** 	getRegister(y, regY_idx);
 834:src/xeq.c     **** }
 835:src/xeq.c     **** 
 836:src/xeq.c     **** void setY(const decNumber *y) {
 837:src/xeq.c     **** 	setRegister(regY_idx, y);
 838:src/xeq.c     **** }
 839:src/xeq.c     **** 
 840:src/xeq.c     **** static void getZ(decNumber *z) {
 841:src/xeq.c     **** 	getRegister(z, regZ_idx);
 842:src/xeq.c     **** }
 843:src/xeq.c     **** 
 844:src/xeq.c     **** #if 0
 845:src/xeq.c     **** static void setZ(const decNumber *z) {
 846:src/xeq.c     **** 	setRegister(regZ_idx, z);
 847:src/xeq.c     **** }
 848:src/xeq.c     **** #endif
 849:src/xeq.c     **** 
 850:src/xeq.c     **** static void getT(decNumber *t) {
 851:src/xeq.c     **** 	getRegister(t, regT_idx);
 852:src/xeq.c     **** }
 853:src/xeq.c     **** 
 854:src/xeq.c     **** void getXY(decNumber *x, decNumber *y) {
 855:src/xeq.c     **** 	getX(x);
 856:src/xeq.c     **** 	getY(y);
 857:src/xeq.c     **** }
 858:src/xeq.c     **** 
 859:src/xeq.c     **** void setXY(const decNumber *x, const decNumber *y) {
 860:src/xeq.c     **** 	setX(x);
 861:src/xeq.c     **** 	setY(y);
 862:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 863:src/xeq.c     **** 	CLEAR_POLAR_READY;
 864:src/xeq.c     **** #endif
 865:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 20


 866:src/xeq.c     **** 
 867:src/xeq.c     **** void getXYZ(decNumber *x, decNumber *y, decNumber *z) {
 868:src/xeq.c     **** 	getXY(x, y);
 869:src/xeq.c     **** 	getZ(z);
 870:src/xeq.c     **** }
 871:src/xeq.c     **** 
 872:src/xeq.c     **** #if 0
 873:src/xeq.c     **** void setXYZ(const decNumber *x, const decNumber *y, const decNumber *z) {
 874:src/xeq.c     **** 	setXY(x, y);
 875:src/xeq.c     **** 	setZ(z);
 876:src/xeq.c     **** }
 877:src/xeq.c     **** #endif
 878:src/xeq.c     **** 
 879:src/xeq.c     **** void getXYZT(decNumber *x, decNumber *y, decNumber *z, decNumber *t) {
 880:src/xeq.c     **** 	getXYZ(x, y, z);
 881:src/xeq.c     **** 	getT(t);
 882:src/xeq.c     **** }
 883:src/xeq.c     **** 
 884:src/xeq.c     **** void getYZ(decNumber *y, decNumber *z) {
 885:src/xeq.c     **** 	getY(y);
 886:src/xeq.c     **** 	getZ(z);
 887:src/xeq.c     **** }
 888:src/xeq.c     **** 
 889:src/xeq.c     **** void roll_down(enum nilop op) {
 890:src/xeq.c     **** 	REGISTER r;
 891:src/xeq.c     **** 	copyreg(&r, StackBase);
 892:src/xeq.c     **** 	lower();
 893:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 894:src/xeq.c     **** }
 895:src/xeq.c     **** 
 896:src/xeq.c     **** void roll_up(enum nilop op) {
 897:src/xeq.c     **** 	REGISTER r;
 898:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 899:src/xeq.c     **** 	lift();
 900:src/xeq.c     **** 	copyreg(StackBase, &r);
 901:src/xeq.c     **** }
 902:src/xeq.c     **** 
 903:src/xeq.c     **** void cpx_roll_down(enum nilop op) {
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 905:src/xeq.c     **** 	roll_down(OP_RDOWN);
 906:src/xeq.c     **** 	set_was_complex();
 907:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 908:src/xeq.c     **** 	CLEAR_POLAR_READY;
 909:src/xeq.c     **** #endif
 910:src/xeq.c     **** }
 911:src/xeq.c     **** 
 912:src/xeq.c     **** void cpx_roll_up(enum nilop op) {
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 914:src/xeq.c     **** 	roll_up(OP_RUP);
 915:src/xeq.c     **** 	set_was_complex();
 916:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 917:src/xeq.c     **** 	CLEAR_POLAR_READY;
 918:src/xeq.c     **** #endif
 919:src/xeq.c     **** }
 920:src/xeq.c     **** 
 921:src/xeq.c     **** void cpx_enter(enum nilop op) {
 922:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
ARM GAS  /tmp/cc7LeJ71.s 			page 21


 923:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 924:src/xeq.c     ****     lift();
 925:src/xeq.c     ****     lift();
 926:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 927:src/xeq.c     ****     set_was_complex();
 928:src/xeq.c     ****   }
 929:src/xeq.c     ****   else {
 930:src/xeq.c     ****     lift();
 931:src/xeq.c     ****     lift();
 932:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 933:src/xeq.c     ****     set_was_complex();
 934:src/xeq.c     ****   }
 935:src/xeq.c     **** }
 936:src/xeq.c     **** 
 937:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 938:src/xeq.c     **** 
 939:src/xeq.c     **** void convert_regK ( enum trig_modes i ) { // needed to change the displayed angular part in polar m
 940:src/xeq.c     **** 	decNumber k;
 941:src/xeq.c     **** 
 942:src/xeq.c     **** 	enum trig_modes j = get_trig_mode();
 943:src/xeq.c     **** 	if (i==j) return; // no mode change
 944:src/xeq.c     **** 	getRegister(&k, regK_idx);
 945:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 946:src/xeq.c     **** 		case TRIG_DEG:
 947:src/xeq.c     **** 			dn_divide(&k, &k, &const_360);
 948:src/xeq.c     **** 			break;
 949:src/xeq.c     **** 		case TRIG_RAD:
 950:src/xeq.c     **** 			dn_divide(&k, &k, &const_2PI);
 951:src/xeq.c     **** 			break;
 952:src/xeq.c     **** 		case TRIG_GRAD:
 953:src/xeq.c     **** 			dn_divide(&k, &k, &const_400);
 954:src/xeq.c     **** 		default:;
 955:src/xeq.c     **** 	}
 956:src/xeq.c     **** 	switch (i) { // convert to new angular units
 957:src/xeq.c     **** 		case TRIG_DEG:
 958:src/xeq.c     **** 			dn_multiply(&k, &k, &const_360);
 959:src/xeq.c     **** 			break;
 960:src/xeq.c     **** 		case TRIG_RAD:
 961:src/xeq.c     **** 			dn_multiply(&k, &k, &const_2PI);
 962:src/xeq.c     **** 			break;
 963:src/xeq.c     **** 		case TRIG_GRAD:
 964:src/xeq.c     **** 			dn_multiply(&k, &k, &const_400);
 965:src/xeq.c     **** 		default:;
 966:src/xeq.c     **** 	}
 967:src/xeq.c     **** 	setRegister(regK_idx, &k);
 968:src/xeq.c     **** }
 969:src/xeq.c     **** 
 970:src/xeq.c     **** void finish_cpx_entry ( int lift );
 971:src/xeq.c     **** void stack_begin ( int zero_y ); // defined in keys.c - needed so it can be called here
 972:src/xeq.c     **** 
 973:src/xeq.c     **** void cpx_pi (enum nilop op) {
 974:src/xeq.c     **** 	switch (op) {
 975:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 976:src/xeq.c     **** 		if (!REAL_FLAG && !IMAG_FLAG) {
 977:src/xeq.c     **** 			stack_begin( 1 );
 978:src/xeq.c     **** 			SET_REAL;
 979:src/xeq.c     **** 		}
ARM GAS  /tmp/cc7LeJ71.s 			page 22


 980:src/xeq.c     **** 		copyreg(StackBase, get_const(OP_PI, is_dblmode()));
 981:src/xeq.c     **** 		break;
 982:src/xeq.c     **** 	case OP_PIB: // command line present - multiplies contents by pi
 983:src/xeq.c     **** 		State2.state_lift = 0;
 984:src/xeq.c     **** 		process_cmdline();
 985:src/xeq.c     **** 		State2.state_lift = 0;
 986:src/xeq.c     **** 		{
 987:src/xeq.c     **** 			decNumber r;
 988:src/xeq.c     **** 			getX(&r);
 989:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 990:src/xeq.c     **** 			setX(&r);
 991:src/xeq.c     **** 		}
 992:src/xeq.c     **** 	default:;
 993:src/xeq.c     **** 	}
 994:src/xeq.c     **** 	CLEAR_POLAR_READY;
 995:src/xeq.c     **** }
 996:src/xeq.c     **** 
 997:src/xeq.c     **** #ifdef ENTRY_RPN
 998:src/xeq.c     **** void entry_rpn_on_off(enum nilop op) { // turn entry_rpn on/off
 999:src/xeq.c     ****   switch (op) {
1000:src/xeq.c     ****   case OP_ENTRY_ON:
1001:src/xeq.c     ****     ENTRY_RPN_ON;
1002:src/xeq.c     ****     return;
1003:src/xeq.c     ****   case OP_ENTRY_OFF:
1004:src/xeq.c     ****     ENTRY_RPN_OFF;
1005:src/xeq.c     ****     return;
1006:src/xeq.c     ****   default:;
1007:src/xeq.c     ****   }
1008:src/xeq.c     **** }
1009:src/xeq.c     **** #endif
1010:src/xeq.c     **** 
1011:src/xeq.c     **** void cpx_nop(enum nilop op) { // miscellaneous complex operations
1012:src/xeq.c     ****   reset_shift();
1013:src/xeq.c     **** 	switch (op) {
1014:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
1015:src/xeq.c     **** 	        SET_CPX_YES;
1016:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
1017:src/xeq.c     **** 		CLEAR_IMAG;
1018:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
1019:src/xeq.c     **** 		return;
1020:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
1021:src/xeq.c     **** 		if (UState.stack_depth) { // save prior stack size 
1022:src/xeq.c     **** 			INIT_8;
1023:src/xeq.c     **** 		}
1024:src/xeq.c     **** 		else {
1025:src/xeq.c     **** 			INIT_4;
1026:src/xeq.c     **** 		}
1027:src/xeq.c     **** 		LOCK_C;
1028:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
1029:src/xeq.c     **** #ifdef DM42
1030:src/xeq.c     **** 		set_menu(M_C_Lock);
1031:src/xeq.c     **** 		display_current_menu();
1032:src/xeq.c     **** #endif
1033:src/xeq.c     **** 		break;
1034:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
1035:src/xeq.c     **** 		if (!C_LOCKED) { 
1036:src/xeq.c     **** 			SET_CPX_NO;
ARM GAS  /tmp/cc7LeJ71.s 			page 23


1037:src/xeq.c     **** 			UNLOCK_C; //just in case
1038:src/xeq.c     **** 			return;
1039:src/xeq.c     **** 		}
1040:src/xeq.c     **** 		SET_CPX_NO;
1041:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
1042:src/xeq.c     **** 		finish_cpx_entry(1);
1043:src/xeq.c     **** 		UNLOCK_C;
1044:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
1045:src/xeq.c     **** 		State2.wascomplex = 0;
1046:src/xeq.c     **** #ifdef DM42
1047:src/xeq.c     **** 		set_default_menu();
1048:src/xeq.c     **** 		display_current_menu();
1049:src/xeq.c     **** #endif
1050:src/xeq.c     **** 		return;
1051:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
1052:src/xeq.c     **** 		{
1053:src/xeq.c     **** 		decNumber y;
1054:src/xeq.c     **** 		getY(&y);
1055:src/xeq.c     **** 		dn_minus(&y, &y);
1056:src/xeq.c     **** 		setY(&y);
1057:src/xeq.c     **** 		}
1058:src/xeq.c     **** 		break;
1059:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
1060:src/xeq.c     **** 		{
1061:src/xeq.c     **** 		decNumber x;
1062:src/xeq.c     **** 		getX(&x);
1063:src/xeq.c     **** 		dn_minus(&x, &x);
1064:src/xeq.c     **** 		setX(&x);
1065:src/xeq.c     **** 		}
1066:src/xeq.c     **** 		break;
1067:src/xeq.c     **** 	case OP_C_IM: // zero real part
1068:src/xeq.c     **** 		zero_X();
1069:src/xeq.c     **** 		break;
1070:src/xeq.c     **** 	case OP_C_RE: // zero imag part
1071:src/xeq.c     **** 		zero_Y();
1072:src/xeq.c     **** 		break;
1073:src/xeq.c     **** 	case OP_CPXI: // use i to display complex numbers
1074:src/xeq.c     **** 		SET_CPX_I;
1075:src/xeq.c     **** 		break;
1076:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
1077:src/xeq.c     **** 		SET_CPX_J;
1078:src/xeq.c     **** 		break;
1079:src/xeq.c     **** 	default:;
1080:src/xeq.c     **** 	}
1081:src/xeq.c     **** 	set_was_complex();
1082:src/xeq.c     **** 	CLEAR_POLAR_READY;
1083:src/xeq.c     **** }
1084:src/xeq.c     **** #endif
1085:src/xeq.c     **** 
1086:src/xeq.c     **** void cpx_fill(enum nilop op) {
1087:src/xeq.c     **** 	const int n = stack_size();
1088:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
1089:src/xeq.c     **** 	int i;
1090:src/xeq.c     **** 
1091:src/xeq.c     **** 	for (i=2; i<n; i++)
1092:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
1093:src/xeq.c     **** 	set_was_complex();
ARM GAS  /tmp/cc7LeJ71.s 			page 24


1094:src/xeq.c     **** }
1095:src/xeq.c     **** 
1096:src/xeq.c     **** void fill(enum nilop op) {
1097:src/xeq.c     **** 	const int n = stack_size();
1098:src/xeq.c     **** 	int i;
1099:src/xeq.c     **** 
1100:src/xeq.c     **** 	for (i=1; i<n; i++)
1101:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
1102:src/xeq.c     **** }
1103:src/xeq.c     **** 
1104:src/xeq.c     **** void drop(enum nilop op) {
1105:src/xeq.c     **** 	if (op == OP_DROPXY) {
1106:src/xeq.c     **** 		lower2();
1107:src/xeq.c     **** 		set_was_complex();
1108:src/xeq.c     **** 	} else
1109:src/xeq.c     **** 		lower();
1110:src/xeq.c     **** }
1111:src/xeq.c     **** 
1112:src/xeq.c     **** #ifndef is_intmode
1113:src/xeq.c     **** int is_intmode(void) {
1114:src/xeq.c     **** 	return UState.intm;
1115:src/xeq.c     **** }
1116:src/xeq.c     **** #endif
1117:src/xeq.c     **** 
1118:src/xeq.c     **** int is_dblmode(void) {
1119:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
1120:src/xeq.c     **** }
1121:src/xeq.c     **** 
1122:src/xeq.c     **** int is_usrdblmode(void) {
1123:src/xeq.c     **** 	if (XromFlags.xIN)
1124:src/xeq.c     **** 		return XromFlags.mode_double;
1125:src/xeq.c     **** 	return is_dblmode();
1126:src/xeq.c     **** }
1127:src/xeq.c     **** 
1128:src/xeq.c     **** /* Convert a possibly signed string to an integer
1129:src/xeq.c     ****  */
1130:src/xeq.c     **** int s_to_i(const char *s) {
1131:src/xeq.c     **** 	int x = 0;
1132:src/xeq.c     **** 	int neg;
1133:src/xeq.c     **** 
1134:src/xeq.c     **** 	if (*s == '-') {
1135:src/xeq.c     **** 		s++;
1136:src/xeq.c     **** 		neg = 1;
1137:src/xeq.c     **** 	} else {
1138:src/xeq.c     **** 		if (*s == '+')
1139:src/xeq.c     **** 			s++;
1140:src/xeq.c     **** 		neg = 0;
1141:src/xeq.c     **** 	}
1142:src/xeq.c     **** 
1143:src/xeq.c     **** 	for (;;) {
1144:src/xeq.c     **** 		const char c = *s++;
1145:src/xeq.c     **** 
1146:src/xeq.c     **** 		if (c < '0' || c > '9')
1147:src/xeq.c     **** 			break;
1148:src/xeq.c     **** 		x = 10 * x + (c - '0');
1149:src/xeq.c     **** 	}
1150:src/xeq.c     **** 	if (neg)
ARM GAS  /tmp/cc7LeJ71.s 			page 25


1151:src/xeq.c     **** 		return -x;
1152:src/xeq.c     **** 	return x;
1153:src/xeq.c     **** }
1154:src/xeq.c     **** 
1155:src/xeq.c     **** /* Convert a string in the given base to an unsigned integer
1156:src/xeq.c     ****  */
1157:src/xeq.c     **** unsigned long long int s_to_ull(const char *s, unsigned int base) {
1158:src/xeq.c     **** 	unsigned long long int x = 0;
1159:src/xeq.c     **** 
1160:src/xeq.c     **** 	for (;;) {
1161:src/xeq.c     **** 		unsigned int n;
1162:src/xeq.c     **** 		const char c = *s++;
1163:src/xeq.c     **** 
1164:src/xeq.c     **** 		if (c >= '0' && c <= '9')
1165:src/xeq.c     **** 			n = c - '0';
1166:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
1167:src/xeq.c     **** 			n = c - 'A' + 10;
1168:src/xeq.c     **** 		else
1169:src/xeq.c     **** 			break;
1170:src/xeq.c     **** 		if (n >= base)
1171:src/xeq.c     **** 			break;
1172:src/xeq.c     **** 		x = x * base + n;
1173:src/xeq.c     **** 	}
1174:src/xeq.c     **** 	return x;
1175:src/xeq.c     **** }
1176:src/xeq.c     **** 
1177:src/xeq.c     **** const char *get_cmdline(void) {
1178:src/xeq.c     **** 	if (CmdLineLength) {
1179:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
1180:src/xeq.c     **** 		return Cmdline;
1181:src/xeq.c     **** 	}
1182:src/xeq.c     **** 	return NULL;
1183:src/xeq.c     **** }
1184:src/xeq.c     **** 
1185:src/xeq.c     **** #if 0
1186:src/xeq.c     **** static int fract_convert_number(decNumber *x, const char *s) {
1187:src/xeq.c     **** 	if (*s == '\0') {
1188:src/xeq.c     **** 		report_err(ERR_DOMAIN);
1189:src/xeq.c     **** 		return 1;
1190:src/xeq.c     **** 	}
1191:src/xeq.c     **** 	decNumberFromString(x, s, &Ctx);
1192:src/xeq.c     **** 	return check_special(x);
1193:src/xeq.c     **** }
1194:src/xeq.c     **** #endif
1195:src/xeq.c     **** 
1196:src/xeq.c     **** /* Return 1 if the command line contains an error and also set an appropriate
1197:src/xeq.c     ****  * error message.
1198:src/xeq.c     ****  */
1199:src/xeq.c     **** int is_bad_cmdline(void)
1200:src/xeq.c     **** {
1201:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
1202:src/xeq.c     **** 	if (CmdLineDot == 2) {
1203:src/xeq.c     **** 		char *p;
1204:src/xeq.c     **** 
1205:src/xeq.c     **** 		// Check if there's a non-zero digit after the last decimal mark
1206:src/xeq.c     **** 		p = Cmdline + CmdLineLength;
1207:src/xeq.c     **** 		for (;;) {
ARM GAS  /tmp/cc7LeJ71.s 			page 26


1208:src/xeq.c     **** 			p--;
1209:src/xeq.c     **** 			if (*p >= '1' && *p <= '9')
1210:src/xeq.c     **** 				return 0;
1211:src/xeq.c     **** 			if (*p == '.')
1212:src/xeq.c     **** 				break;
1213:src/xeq.c     **** 		}
1214:src/xeq.c     **** 
1215:src/xeq.c     **** 		reset_shift();
1216:src/xeq.c     **** 		error_message(ERR_DOMAIN);
1217:src/xeq.c     **** 		State2.invalid_disp = 1;
1218:src/xeq.c     **** 		return 1;
1219:src/xeq.c     **** 	}
1220:src/xeq.c     **** #endif
1221:src/xeq.c     **** 	return 0;
1222:src/xeq.c     **** }
1223:src/xeq.c     **** 
1224:src/xeq.c     **** /* Process the command line if any
1225:src/xeq.c     ****  */
1226:src/xeq.c     **** void process_cmdline(void) {
1227:src/xeq.c     **** 	decNumber a, b, x, t;
1228:src/xeq.c     **** 
1229:src/xeq.c     **** 	if (CmdLineLength) {
1230:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
1231:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
1232:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1233:src/xeq.c     **** 		char cmdline[CMDLINELEN + 2];
1234:src/xeq.c     **** #else
1235:src/xeq.c     **** 		char cmdline[CMDLINELEN + 1];
1236:src/xeq.c     **** #endif
1237:src/xeq.c     **** 
1238:src/xeq.c     **** 		xcopy(cmdline, Cmdline, CMDLINELEN + 1);
1239:src/xeq.c     **** 
1240:src/xeq.c     **** 		cmdline[CmdLineLength] = '\0';
1241:src/xeq.c     **** 		if (!is_intmode()) {
1242:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
1243:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E' || cmdline[CmdLineLength-1] == 'D')
1244:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1245:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
1246:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
1247:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
1248:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
1249:src/xeq.c     **** 			}
1250:src/xeq.c     **** #else
1251:src/xeq.c     **** 			if (cmdline[CmdLineLength-1] == 'E')
1252:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
1253:src/xeq.c     **** 			else if (CmdLineLength > 1 && cmdline[CmdLineLength-2] == 'E' && cmdline[CmdLineLength-1] == '-'
1254:src/xeq.c     **** 				cmdline[CmdLineLength-2] = '\0';
1255:src/xeq.c     **** #endif
1256:src/xeq.c     **** 			if (0
1257:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
1258:src/xeq.c     **** 			    || CmdLineEex
1259:src/xeq.c     **** #endif
1260:src/xeq.c     **** #if FRACTION_MODE_INPUT & 4
1261:src/xeq.c     **** 			    || cmdlinedot == 1
1262:src/xeq.c     **** #endif
1263:src/xeq.c     **** 			   )
1264:src/xeq.c     **** 				UState.fract = 0;
ARM GAS  /tmp/cc7LeJ71.s 			page 27


1265:src/xeq.c     **** 		}
1266:src/xeq.c     **** 		CmdLineLength = 0;
1267:src/xeq.c     **** 		lift_if_enabled();
1268:src/xeq.c     **** 		set_lift();
1269:src/xeq.c     **** 		CmdLineDot = 0;
1270:src/xeq.c     **** 		CmdLineEex = 0;
1271:src/xeq.c     **** 		if (is_intmode()) {
1272:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
1273:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
1274:src/xeq.c     **** 			setX_int_sgn(x, sgn);
1275:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
1276:src/xeq.c     **** 			char *d0, *d1, *d2;
1277:src/xeq.c     **** 			int neg;
1278:src/xeq.c     **** 
1279:src/xeq.c     **** 			if (bad_cmdline)
1280:src/xeq.c     **** 				return;
1281:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 8)
1282:src/xeq.c     **** 			UState.fract = 1;
1283:src/xeq.c     **** #endif
1284:src/xeq.c     **** 			if (cmdline[0] == '-') {
1285:src/xeq.c     **** 				neg = 1;
1286:src/xeq.c     **** 				d0 = cmdline+1;
1287:src/xeq.c     **** 			} else {
1288:src/xeq.c     **** 				neg = 0;
1289:src/xeq.c     **** 				d0 = cmdline;
1290:src/xeq.c     **** 			}
1291:src/xeq.c     **** 			d1 = find_char(d0, '.');
1292:src/xeq.c     **** 			*d1++ = '\0';
1293:src/xeq.c     **** 			d2 = find_char(d1, '.');
1294:src/xeq.c     **** 			*d2++ = '\0';
1295:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
1296:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
1297:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1298:src/xeq.c     **** 			if (d2 == d1+1) { // ND change starts here; if dots are adjacent...
1299:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
1300:src/xeq.c     **** 				decNumberZero(&x); // and zero x
1301:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
1302:src/xeq.c     **** 				UState.improperfrac = 1;
1303:src/xeq.c     **** #endif
1304:src/xeq.c     **** 			}
1305:src/xeq.c     **** 			else
1306:src/xeq.c     **** #endif
1307:src/xeq.c     **** 			{
1308:src/xeq.c     **** 				decNumberFromString(&a, d1, &Ctx);
1309:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
1310:src/xeq.c     **** 				UState.improperfrac = 0;
1311:src/xeq.c     **** #endif
1312:src/xeq.c     **** 			}
1313:src/xeq.c     **** 			dn_divide(&t, &a, &b);
1314:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
1315:src/xeq.c     **** 			if (!decNumberIsSpecial(&t))
1316:src/xeq.c     **** #endif
1317:src/xeq.c     **** 				dn_add(&x, &x, &t);
1318:src/xeq.c     **** 			if (neg)
1319:src/xeq.c     **** 				dn_minus(&x, &x);
1320:src/xeq.c     **** 			setX(&x);
1321:src/xeq.c     **** 		} else {
ARM GAS  /tmp/cc7LeJ71.s 			page 28


1322:src/xeq.c     **** 			decNumberFromString(&x, cmdline, &Ctx);
1323:src/xeq.c     **** 			setX(&x);
1324:src/xeq.c     **** 		}
1325:src/xeq.c     **** 		set_entry();
1326:src/xeq.c     **** #ifndef DM42
1327:src/xeq.c     **** 		print_trace( TRACE_DATA_ENTRY, 1 );
1328:src/xeq.c     **** #endif
1329:src/xeq.c     **** 	}
1330:src/xeq.c     **** }
1331:src/xeq.c     **** 
1332:src/xeq.c     **** void process_cmdline_set_lift(void) {
1333:src/xeq.c     **** 	process_cmdline();
1334:src/xeq.c     **** 	set_lift();
1335:src/xeq.c     **** }
1336:src/xeq.c     **** 
1337:src/xeq.c     **** 
1338:src/xeq.c     **** /*
1339:src/xeq.c     ****  *  Return a pointer to a numbered register.
1340:src/xeq.c     ****  *  If locals are enabled and a non existent local register
1341:src/xeq.c     ****  *  is accessed, the respective global register is returned.
1342:src/xeq.c     ****  *  Error checking must be done outside this routine.
1343:src/xeq.c     ****  *  We force the beginning of the local registers on an even stack position.
1344:src/xeq.c     ****  *  This ensures 32 bit alignment of the decima64 object.
1345:src/xeq.c     ****  */
1346:src/xeq.c     **** /*
1347:src/xeq.c     ****  *  If working in double precision, register numbers must be remapped
1348:src/xeq.c     ****  */
1349:src/xeq.c     **** static decimal64 *reg_address(int n, decimal64 *const regs, decimal64 *const named_regs) {
 182              		.loc 1 1349 90 is_stmt 1 view -0
 183              		.cfi_startproc
 184              		@ args = 0, pretend = 0, frame = 0
 185              		@ frame_needed = 0, uses_anonymous_args = 0
 186              		@ link register save eliminated.
1350:src/xeq.c     **** 	const int dbl = is_dblmode();
 187              		.loc 1 1350 2 view .LVU58
 188              	.LBB1323:
 189              	.LBI1323:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 190              		.loc 1 1118 5 view .LVU59
 191              	.LBB1324:
1119:src/xeq.c     **** }
 192              		.loc 1 1119 2 view .LVU60
1119:src/xeq.c     **** }
 193              		.loc 1 1119 24 is_stmt 0 view .LVU61
 194 0000 154B     		ldr	r3, .L25
 195 0002 1B68     		ldr	r3, [r3]
 196              	.LBE1324:
 197              	.LBE1323:
1349:src/xeq.c     **** 	const int dbl = is_dblmode();
 198              		.loc 1 1349 90 view .LVU62
 199 0004 10B4     		push	{r4}
 200              		.cfi_def_cfa_offset 4
 201              		.cfi_offset 4, -4
 202              	.LBB1327:
 203              	.LBB1325:
1119:src/xeq.c     **** }
 204              		.loc 1 1119 24 view .LVU63
ARM GAS  /tmp/cc7LeJ71.s 			page 29


 205 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 206              	.LBE1325:
 207              	.LBE1327:
1351:src/xeq.c     **** 
1352:src/xeq.c     **** 	if (n < regX_idx)
 208              		.loc 1 1352 5 view .LVU64
 209 000a 6328     		cmp	r0, #99
 210              	.LBB1328:
 211              	.LBB1326:
1119:src/xeq.c     **** }
 212              		.loc 1 1119 24 view .LVU65
 213 000c 44F20103 		movw	r3, #16385
 214 0010 03EA0403 		and	r3, r3, r4
 215              	.LVL17:
1119:src/xeq.c     **** }
 216              		.loc 1 1119 24 view .LVU66
 217              	.LBE1326:
 218              	.LBE1328:
 219              		.loc 1 1352 2 is_stmt 1 view .LVU67
 220              		.loc 1 1352 5 is_stmt 0 view .LVU68
 221 0014 10DD     		ble	.L23
1353:src/xeq.c     **** 		return regs + n + (dbl ? n : 0);
1354:src/xeq.c     **** 
1355:src/xeq.c     **** 	n -= regX_idx;
 222              		.loc 1 1355 2 is_stmt 1 view .LVU69
1356:src/xeq.c     **** 	// Lettered register
1357:src/xeq.c     **** 	if (XromFlags.xIN)
 223              		.loc 1 1357 6 is_stmt 0 view .LVU70
 224 0016 1149     		ldr	r1, .L25+4
 225              	.LVL18:
 226              		.loc 1 1357 5 view .LVU71
 227 0018 91F90140 		ldrsb	r4, [r1, #1]
 228 001c 002C     		cmp	r4, #0
1355:src/xeq.c     **** 	// Lettered register
 229              		.loc 1 1355 4 view .LVU72
 230 001e A0F16401 		sub	r1, r0, #100
 231              	.LVL19:
 232              		.loc 1 1357 2 is_stmt 1 view .LVU73
 233              		.loc 1 1357 5 is_stmt 0 view .LVU74
 234 0022 13DB     		blt	.L24
1358:src/xeq.c     **** 		return (decimal64 *) (XromStack + n);
1359:src/xeq.c     **** 	if (dbl)
 235              		.loc 1 1359 2 is_stmt 1 view .LVU75
 236              		.loc 1 1359 5 is_stmt 0 view .LVU76
 237 0024 B3F5804F 		cmp	r3, #16384
1360:src/xeq.c     **** 		n = (n << 1) - STACK_SIZE - EXTRA_REG;
 238              		.loc 1 1360 3 is_stmt 1 view .LVU77
 239              		.loc 1 1360 10 is_stmt 0 view .LVU78
 240 0028 04BF     		itt	eq
 241 002a 4900     		lsleq	r1, r1, #1
 242              	.LVL20:
 243              		.loc 1 1360 5 view .LVU79
 244 002c 0C39     		subeq	r1, r1, #12
 245              	.LVL21:
1361:src/xeq.c     **** 	return named_regs + n;
 246              		.loc 1 1361 2 is_stmt 1 view .LVU80
 247              		.loc 1 1361 20 is_stmt 0 view .LVU81
ARM GAS  /tmp/cc7LeJ71.s 			page 30


 248 002e 02EBC100 		add	r0, r2, r1, lsl #3
1362:src/xeq.c     **** }
 249              		.loc 1 1362 1 view .LVU82
 250 0032 5DF8044B 		ldr	r4, [sp], #4
 251              		.cfi_remember_state
 252              		.cfi_restore 4
 253              		.cfi_def_cfa_offset 0
 254 0036 7047     		bx	lr
 255              	.LVL22:
 256              	.L23:
 257              		.cfi_restore_state
1353:src/xeq.c     **** 
 258              		.loc 1 1353 3 is_stmt 1 view .LVU83
1353:src/xeq.c     **** 
 259              		.loc 1 1353 19 is_stmt 0 view .LVU84
 260 0038 B3F5804F 		cmp	r3, #16384
1353:src/xeq.c     **** 
 261              		.loc 1 1353 15 view .LVU85
 262 003c 4FEAC002 		lsl	r2, r0, #3
 263              	.LVL23:
1353:src/xeq.c     **** 
 264              		.loc 1 1353 15 view .LVU86
 265 0040 08BF     		it	eq
 266 0042 0201     		lsleq	r2, r0, #4
1353:src/xeq.c     **** 
 267              		.loc 1 1353 19 view .LVU87
 268 0044 8818     		adds	r0, r1, r2
 269              	.LVL24:
 270              		.loc 1 1362 1 view .LVU88
 271 0046 5DF8044B 		ldr	r4, [sp], #4
 272              		.cfi_remember_state
 273              		.cfi_restore 4
 274              		.cfi_def_cfa_offset 0
 275 004a 7047     		bx	lr
 276              	.LVL25:
 277              	.L24:
 278              		.cfi_restore_state
1358:src/xeq.c     **** 	if (dbl)
 279              		.loc 1 1358 3 is_stmt 1 view .LVU89
1358:src/xeq.c     **** 	if (dbl)
 280              		.loc 1 1358 10 is_stmt 0 view .LVU90
 281 004c 0448     		ldr	r0, .L25+8
 282              		.loc 1 1362 1 view .LVU91
 283 004e 5DF8044B 		ldr	r4, [sp], #4
 284              		.cfi_restore 4
 285              		.cfi_def_cfa_offset 0
1358:src/xeq.c     **** 	if (dbl)
 286              		.loc 1 1358 10 view .LVU92
 287 0052 00EB0110 		add	r0, r0, r1, lsl #4
 288              		.loc 1 1362 1 view .LVU93
 289 0056 7047     		bx	lr
 290              	.L26:
 291              		.align	2
 292              	.L25:
 293 0058 00000000 		.word	main_ram
 294 005c 00000000 		.word	XromParams
 295 0060 00000000 		.word	XromLocal
ARM GAS  /tmp/cc7LeJ71.s 			page 31


 296              		.cfi_endproc
 297              	.LFE90:
 299              		.section	.text.retstk_up,"ax",%progbits
 300              		.align	1
 301              		.p2align 2,,3
 302              		.syntax unified
 303              		.thumb
 304              		.thumb_func
 305              		.fpu fpv4-sp-d16
 307              	retstk_up:
 308              	.LFB150:
1363:src/xeq.c     **** 
1364:src/xeq.c     **** REGISTER *get_reg_n(int n) {
1365:src/xeq.c     **** 	const int dbl = is_dblmode();
1366:src/xeq.c     **** 
1367:src/xeq.c     **** 	if (n >= CONST_REG_BASE) {
1368:src/xeq.c     **** 		n -= CONST_REG_BASE;
1369:src/xeq.c     **** 		return get_const(n, dbl);
1370:src/xeq.c     **** 	}
1371:src/xeq.c     **** 	if (n >= FLASH_REG_BASE)
1372:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
1373:src/xeq.c     **** 
1374:src/xeq.c     **** 	if (n >= LOCAL_REG_BASE && local_regs() > 0) {
1375:src/xeq.c     **** 		// local register on the return stack
1376:src/xeq.c     **** 		n -= LOCAL_REG_BASE;
1377:src/xeq.c     **** 		if (dbl)
1378:src/xeq.c     **** 			n <<= 1;
1379:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
1380:src/xeq.c     **** 	}
1381:src/xeq.c     **** 	return (REGISTER *) reg_address(n, Regs + TOPREALREG - NumRegs, Regs + regX_idx);
1382:src/xeq.c     **** }
1383:src/xeq.c     **** 
1384:src/xeq.c     **** 
1385:src/xeq.c     **** REGISTER *get_flash_reg_n(int n) {
1386:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
1387:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
1388:src/xeq.c     **** }
1389:src/xeq.c     **** 
1390:src/xeq.c     **** 
1391:src/xeq.c     **** /*
1392:src/xeq.c     ****  *  Get a constatnt by index and mode
1393:src/xeq.c     ****  *  In case of a conversion, a private copy is returned
1394:src/xeq.c     ****  */
1395:src/xeq.c     **** REGISTER *get_const(int index, int dbl)
1396:src/xeq.c     **** {
1397:src/xeq.c     **** 	static REGISTER result;
1398:src/xeq.c     **** 	const int i = cnsts[index].index;
1399:src/xeq.c     **** 	if (dbl) {
1400:src/xeq.c     **** 		if (i <= 1 || i >= 128)
1401:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
1402:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
1403:src/xeq.c     **** 	}
1404:src/xeq.c     **** 	else {
1405:src/xeq.c     **** 		if (i < 128)
1406:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
1407:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
1408:src/xeq.c     **** 	}
ARM GAS  /tmp/cc7LeJ71.s 			page 32


1409:src/xeq.c     **** 	return &result;
1410:src/xeq.c     **** }
1411:src/xeq.c     **** 
1412:src/xeq.c     **** 
1413:src/xeq.c     **** /*  Some conversion routines to take decimals and produce integers
1414:src/xeq.c     ****  *  This is for opaque storage, no conversion takes place.
1415:src/xeq.c     ****  */
1416:src/xeq.c     **** long long int get_reg_n_int(int index) {
1417:src/xeq.c     **** 	long long int ll;
1418:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
1419:src/xeq.c     **** 	return ll;
1420:src/xeq.c     **** }
1421:src/xeq.c     **** 
1422:src/xeq.c     **** void set_reg_n_int(int index, long long int ll) {
1423:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
1424:src/xeq.c     **** }
1425:src/xeq.c     **** 
1426:src/xeq.c     **** /* Get an integer from a register
1427:src/xeq.c     ****  */
1428:src/xeq.c     **** unsigned long long int get_reg_n_int_sgn(int index, int *sgn) {
1429:src/xeq.c     **** 	if (is_intmode()) {
1430:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
1431:src/xeq.c     **** 	} else {
1432:src/xeq.c     **** 		decNumber n;
1433:src/xeq.c     **** 
1434:src/xeq.c     **** 		getRegister(&n, index);
1435:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
1436:src/xeq.c     **** 	}
1437:src/xeq.c     **** }
1438:src/xeq.c     **** 
1439:src/xeq.c     **** 
1440:src/xeq.c     **** /* Get an integer from X
1441:src/xeq.c     ****  */
1442:src/xeq.c     **** long long int getX_int(void) {
1443:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
1444:src/xeq.c     **** }
1445:src/xeq.c     **** 
1446:src/xeq.c     **** unsigned long long int getX_int_sgn(int *sgn) {
1447:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
1448:src/xeq.c     **** }
1449:src/xeq.c     **** 
1450:src/xeq.c     **** /*
1451:src/xeq.c     ****  *  Forced conversion from real to intger
1452:src/xeq.c     ****  *  Leaves integer mode active on return!
1453:src/xeq.c     ****  */
1454:src/xeq.c     **** static void int_from_register(int out, int in) {
1455:src/xeq.c     **** 	int sgn;
1456:src/xeq.c     **** 	unsigned long long int val;
1457:src/xeq.c     **** 	
1458:src/xeq.c     **** 	UState.intm = 0;	// Force real mode access
1459:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1460:src/xeq.c     **** 
1461:src/xeq.c     **** 	UState.intm = 1;	// Force integer access
1462:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1463:src/xeq.c     **** }
1464:src/xeq.c     **** 
1465:src/xeq.c     **** /* Put an integer into a register
ARM GAS  /tmp/cc7LeJ71.s 			page 33


1466:src/xeq.c     ****  */
1467:src/xeq.c     **** void set_reg_n_int_sgn(int index, unsigned long long int val, int sgn) {
1468:src/xeq.c     **** 	if (is_intmode()) {
1469:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
1470:src/xeq.c     **** 	} else {
1471:src/xeq.c     **** 		decNumber t;
1472:src/xeq.c     **** 
1473:src/xeq.c     **** 		ullint_to_dn(&t, val);
1474:src/xeq.c     **** 		if (sgn)
1475:src/xeq.c     **** 			dn_minus(&t, &t);
1476:src/xeq.c     **** 		setRegister(index, &t);
1477:src/xeq.c     **** 	}
1478:src/xeq.c     **** }
1479:src/xeq.c     **** 
1480:src/xeq.c     **** /* 
1481:src/xeq.c     ****  *  Forced conversion from integer to register format.
1482:src/xeq.c     ****  *  Leaves integer mode off after conversion.
1483:src/xeq.c     ****  *  Destination may be in XROM register space
1484:src/xeq.c     ****  */
1485:src/xeq.c     **** static void register_from_int(int out, int in, int called_from_xin) {
1486:src/xeq.c     **** 	int sgn;
1487:src/xeq.c     **** 	unsigned long long int val;
1488:src/xeq.c     **** 	const int xin = XromFlags.xIN;
1489:src/xeq.c     **** 	
1490:src/xeq.c     **** 	if (called_from_xin)
1491:src/xeq.c     **** 		XromFlags.xIN = 0;
1492:src/xeq.c     **** 	UState.intm = 1;
1493:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
1494:src/xeq.c     **** 
1495:src/xeq.c     **** 	XromFlags.xIN = xin;
1496:src/xeq.c     **** 	UState.intm = 0;
1497:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
1498:src/xeq.c     **** }
1499:src/xeq.c     **** 
1500:src/xeq.c     **** 
1501:src/xeq.c     **** /* Put an integer into X
1502:src/xeq.c     ****  * Integer registers are always single precision!
1503:src/xeq.c     ****  */
1504:src/xeq.c     **** void setX_int(long long int val) {
1505:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
1506:src/xeq.c     **** }
1507:src/xeq.c     **** 
1508:src/xeq.c     **** 
1509:src/xeq.c     **** void setX_int_sgn(unsigned long long int val, int sgn) {
1510:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
1511:src/xeq.c     **** }
1512:src/xeq.c     **** 
1513:src/xeq.c     **** 
1514:src/xeq.c     **** 
1515:src/xeq.c     **** /*
1516:src/xeq.c     ****  *  Set the register value explicitely
1517:src/xeq.c     ****  */
1518:src/xeq.c     **** void zero_regs(REGISTER *dest, int n) {
1519:src/xeq.c     **** #if 0
1520:src/xeq.c     **** 	if (is_intmode())
1521:src/xeq.c     **** 		xset(dest, 0, n << 3);
1522:src/xeq.c     **** 	else {
ARM GAS  /tmp/cc7LeJ71.s 			page 34


1523:src/xeq.c     **** 		REGISTER *const zero = get_reg_n(CONST_REG_BASE + OP_ZERO);
1524:src/xeq.c     **** 		const int reg_size = is_dblmode() ? sizeof(decimal128) : sizeof(decimal64);
1525:src/xeq.c     **** 		char *d = (char *) dest;
1526:src/xeq.c     **** 		int i;
1527:src/xeq.c     **** 		for (i = 0; i < n; ++i, d += reg_size)
1528:src/xeq.c     **** 			copyreg((REGISTER *) d, zero);
1529:src/xeq.c     **** 	}
1530:src/xeq.c     **** #else
1531:src/xeq.c     **** 	// This works for all modes
1532:src/xeq.c     **** 	// no it doesn't -- it leaves varying values of zero around
1533:src/xeq.c     **** 	xset(dest, 0, n << (3 + is_dblmode()));
1534:src/xeq.c     **** #endif
1535:src/xeq.c     **** }
1536:src/xeq.c     **** 
1537:src/xeq.c     **** void move_regs(REGISTER *dest, REGISTER *src, int n) {
1538:src/xeq.c     **** 	if (is_dblmode())
1539:src/xeq.c     **** 		n <<= 1;
1540:src/xeq.c     **** 	xcopy(dest, src, n << 3);
1541:src/xeq.c     **** }
1542:src/xeq.c     **** 
1543:src/xeq.c     **** 
1544:src/xeq.c     **** /* Zero a register
1545:src/xeq.c     ****  */
1546:src/xeq.c     **** static void set_zero(REGISTER *x) {
1547:src/xeq.c     **** 	zero_regs(x, 1);
1548:src/xeq.c     **** }
1549:src/xeq.c     **** 
1550:src/xeq.c     **** void zero_X(void) {
1551:src/xeq.c     **** 	set_zero(StackBase);
1552:src/xeq.c     **** }
1553:src/xeq.c     **** 
1554:src/xeq.c     **** void zero_Y(void) {
1555:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
1556:src/xeq.c     **** }
1557:src/xeq.c     **** 
1558:src/xeq.c     **** void clrx(enum nilop op) {
1559:src/xeq.c     **** 	zero_X();
1560:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1561:src/xeq.c     **** 	if (C_LOCKED) {
1562:src/xeq.c     **** 		zero_Y();
1563:src/xeq.c     **** 		if (POLAR_DISPLAY) {
1564:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
1565:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
1566:src/xeq.c     **** 		}
1567:src/xeq.c     **** 		CLEAR_REAL;
1568:src/xeq.c     **** 		CLEAR_IMAG;
1569:src/xeq.c     **** 	}
1570:src/xeq.c     **** #endif
1571:src/xeq.c     **** 	clr_lift();
1572:src/xeq.c     **** }
1573:src/xeq.c     **** 
1574:src/xeq.c     **** /* Zero out the stack
1575:src/xeq.c     ****  */
1576:src/xeq.c     **** void clrstk(enum nilop op) {
1577:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
1578:src/xeq.c     **** 	set_lift();
1579:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 35


1580:src/xeq.c     **** 
1581:src/xeq.c     **** 
1582:src/xeq.c     **** /* Zero out all registers excluding the stack and lastx
1583:src/xeq.c     ****  */	
1584:src/xeq.c     **** void clrreg(enum nilop op) {
1585:src/xeq.c     **** 	const int local = local_regs();
1586:src/xeq.c     **** 	process_cmdline_set_lift();
1587:src/xeq.c     **** 
1588:src/xeq.c     **** 	// erase register memory
1589:src/xeq.c     **** 	zero_regs(get_reg_n(0), global_regs());
1590:src/xeq.c     **** 
1591:src/xeq.c     **** 	// Clear A, B, C & D if they aren't part of the stack
1592:src/xeq.c     **** 	if (stack_size() != 8)
1593:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
1594:src/xeq.c     **** 
1595:src/xeq.c     **** 	// Clear J & K but not I and L since they are last X.
1596:src/xeq.c     **** 	zero_regs(get_reg_n(regJ_idx), 2);
1597:src/xeq.c     **** 
1598:src/xeq.c     **** 	// erase local registers but keep them allocated
1599:src/xeq.c     **** 	if (local)
1600:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
1601:src/xeq.c     **** }
1602:src/xeq.c     **** 
1603:src/xeq.c     **** 
1604:src/xeq.c     **** /* Clear the subroutine return stack
1605:src/xeq.c     ****  */
1606:src/xeq.c     **** void clrretstk(void) {
1607:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
1608:src/xeq.c     **** }
1609:src/xeq.c     **** 
1610:src/xeq.c     **** void clrretstk_pc(void) {
1611:src/xeq.c     **** 	clrretstk();
1612:src/xeq.c     **** 	raw_set_pc(0);
1613:src/xeq.c     **** 	update_program_bounds(1);
1614:src/xeq.c     **** }
1615:src/xeq.c     **** 
1616:src/xeq.c     **** 
1617:src/xeq.c     **** /*
1618:src/xeq.c     ****  *  Command to allow access to constants and small integers
1619:src/xeq.c     ****  */
1620:src/xeq.c     **** void cmdconst(unsigned int arg, enum rarg op) {
1621:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
1622:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX || op == RARG_IND_CONST_CMPLX) {
1623:src/xeq.c     **** #else
1624:src/xeq.c     **** 	if (op == RARG_INTNUM_CMPLX || op == RARG_CONST_CMPLX) {
1625:src/xeq.c     **** #endif
1626:src/xeq.c     **** 		lift2_if_enabled();
1627:src/xeq.c     **** 		zero_Y();
1628:src/xeq.c     **** 		set_was_complex();
1629:src/xeq.c     **** 	} else
1630:src/xeq.c     **** 		lift_if_enabled();
1631:src/xeq.c     **** 
1632:src/xeq.c     **** 	if (op == RARG_INTNUM || op == RARG_INTNUM_CMPLX)
1633:src/xeq.c     **** 		setX_int_sgn(arg, 0);
1634:src/xeq.c     **** 	else if (is_intmode())
1635:src/xeq.c     **** 		bad_mode_error();
1636:src/xeq.c     **** 	else 
ARM GAS  /tmp/cc7LeJ71.s 			page 36


1637:src/xeq.c     **** 		copyreg(StackBase, get_const(arg, is_dblmode()));
1638:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1639:src/xeq.c     **** 	CLEAR_POLAR_READY;
1640:src/xeq.c     **** #endif
1641:src/xeq.c     **** }
1642:src/xeq.c     **** 
1643:src/xeq.c     **** 
1644:src/xeq.c     **** /* Store/recall code here.
1645:src/xeq.c     ****  * These two are pretty much the same so we define some utility routines first.
1646:src/xeq.c     ****  */
1647:src/xeq.c     **** 
1648:src/xeq.c     **** /* Do a basic STO/RCL arithmetic operation.
1649:src/xeq.c     ****  */
1650:src/xeq.c     **** static int storcl_op(unsigned short opr, int index, decNumber *r, int rev) {
1651:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
1652:src/xeq.c     **** 
1653:src/xeq.c     **** 	getX(x);
1654:src/xeq.c     **** 	getRegister(y, index);
1655:src/xeq.c     **** 	if (rev) {
1656:src/xeq.c     **** 		x = y;
1657:src/xeq.c     **** 		y = &a;
1658:src/xeq.c     **** 	}
1659:src/xeq.c     **** 
1660:src/xeq.c     **** 	switch (opr) {
1661:src/xeq.c     **** 	case 1:
1662:src/xeq.c     **** 		dn_add(r, y, x);
1663:src/xeq.c     **** 		break;
1664:src/xeq.c     **** 	case 2:
1665:src/xeq.c     **** 		dn_subtract(r, y, x);
1666:src/xeq.c     **** 		break;
1667:src/xeq.c     **** 	case 3:
1668:src/xeq.c     **** 		dn_multiply(r, y, x);
1669:src/xeq.c     **** 		break;
1670:src/xeq.c     **** 	case 4:
1671:src/xeq.c     **** 		dn_divide(r, y, x);
1672:src/xeq.c     **** 		break;
1673:src/xeq.c     **** 	case 5:
1674:src/xeq.c     **** 		dn_min(r, y, x);
1675:src/xeq.c     **** 		break;
1676:src/xeq.c     **** 	case 6:
1677:src/xeq.c     **** 		dn_max(r, y, x);
1678:src/xeq.c     **** 		break;
1679:src/xeq.c     **** 	default:
1680:src/xeq.c     **** 		return 1;
1681:src/xeq.c     **** 	}
1682:src/xeq.c     **** 	return 0;
1683:src/xeq.c     **** }
1684:src/xeq.c     **** 
1685:src/xeq.c     **** static int storcl_intop(unsigned short opr, int index, long long int *r, int rev) {
1686:src/xeq.c     **** 	long long int x, y;
1687:src/xeq.c     **** 
1688:src/xeq.c     **** 	x = getX_int();
1689:src/xeq.c     **** 	y = get_reg_n_int(index);
1690:src/xeq.c     **** 
1691:src/xeq.c     **** 	if (rev) {
1692:src/xeq.c     **** 		const long long int t = x;
1693:src/xeq.c     **** 		x = y;
ARM GAS  /tmp/cc7LeJ71.s 			page 37


1694:src/xeq.c     **** 		y = t;
1695:src/xeq.c     **** 	}
1696:src/xeq.c     **** 
1697:src/xeq.c     **** 	switch (opr) {
1698:src/xeq.c     **** 	case 1:
1699:src/xeq.c     **** 		*r = intAdd(y, x);
1700:src/xeq.c     **** 		break;
1701:src/xeq.c     **** 	case 2:
1702:src/xeq.c     **** 		*r = intSubtract(y, x);
1703:src/xeq.c     **** 		break;
1704:src/xeq.c     **** 	case 3:
1705:src/xeq.c     **** 		*r = intMultiply(y, x);
1706:src/xeq.c     **** 		break;
1707:src/xeq.c     **** 	case 4:
1708:src/xeq.c     **** 		*r = intDivide(y, x);
1709:src/xeq.c     **** 		break;
1710:src/xeq.c     **** 	case 5:
1711:src/xeq.c     **** 		*r = intMin(y, x);
1712:src/xeq.c     **** 		break;
1713:src/xeq.c     **** 	case 6:
1714:src/xeq.c     **** 		*r = intMax(y, x);
1715:src/xeq.c     **** 		break;
1716:src/xeq.c     **** 	default:
1717:src/xeq.c     **** 		return 1;
1718:src/xeq.c     **** 	}
1719:src/xeq.c     **** 	return 0;
1720:src/xeq.c     **** }
1721:src/xeq.c     **** 
1722:src/xeq.c     **** /* We've got a STO operation to do.
1723:src/xeq.c     ****  */
1724:src/xeq.c     **** void cmdsto(unsigned int arg, enum rarg op) {
1725:src/xeq.c     **** 	if (op == RARG_STO) {
1726:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
1727:src/xeq.c     **** 	} else {
1728:src/xeq.c     **** 		if (is_intmode()) {
1729:src/xeq.c     **** 			long long int r;
1730:src/xeq.c     **** 
1731:src/xeq.c     **** 			if (storcl_intop(op - RARG_STO, arg, &r, 0))
1732:src/xeq.c     **** 				illegal(op);
1733:src/xeq.c     **** 			set_reg_n_int(arg, r);
1734:src/xeq.c     **** 		} else {
1735:src/xeq.c     **** 			decNumber r;
1736:src/xeq.c     **** 
1737:src/xeq.c     **** 			if (storcl_op(op - RARG_STO, arg, &r, 0))
1738:src/xeq.c     **** 				illegal(op);
1739:src/xeq.c     **** 			setRegister(arg, &r);
1740:src/xeq.c     **** 		}
1741:src/xeq.c     **** 	}
1742:src/xeq.c     **** }
1743:src/xeq.c     **** 
1744:src/xeq.c     **** /* We've got a RCL operation to do.
1745:src/xeq.c     ****  */
1746:src/xeq.c     **** static void do_rcl(int index, enum rarg op) {
1747:src/xeq.c     **** 	if (op == RARG_RCL) {
1748:src/xeq.c     **** 		REGISTER temp;
1749:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
1750:src/xeq.c     **** 		lift_if_enabled();
ARM GAS  /tmp/cc7LeJ71.s 			page 38


1751:src/xeq.c     **** 		copyreg(StackBase, &temp);
1752:src/xeq.c     **** 	} else {
1753:src/xeq.c     **** 		if (is_intmode()) {
1754:src/xeq.c     **** 			long long int r;
1755:src/xeq.c     **** 
1756:src/xeq.c     **** 			if (storcl_intop(op - RARG_RCL, index, &r, 1))
1757:src/xeq.c     **** 				illegal(op);
1758:src/xeq.c     **** 			setlastX();
1759:src/xeq.c     **** 			setX_int(r);
1760:src/xeq.c     **** 		} else {
1761:src/xeq.c     **** 			decNumber r;
1762:src/xeq.c     **** 
1763:src/xeq.c     **** 			if (storcl_op(op - RARG_RCL, index, &r, 1))
1764:src/xeq.c     **** 				illegal(op);
1765:src/xeq.c     **** 			setlastX();
1766:src/xeq.c     **** 			setX(&r);
1767:src/xeq.c     **** 		}
1768:src/xeq.c     **** 	}
1769:src/xeq.c     **** }
1770:src/xeq.c     **** 
1771:src/xeq.c     **** void cmdrcl(unsigned int arg, enum rarg op) {
1772:src/xeq.c     **** 	do_rcl(arg, op);
1773:src/xeq.c     **** }
1774:src/xeq.c     **** 
1775:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1776:src/xeq.c     **** void cmdflashrcl(unsigned int arg, enum rarg op) {
1777:src/xeq.c     **** 	do_rcl(FLASH_REG_BASE + arg, op - RARG_FLRCL + RARG_RCL);
1778:src/xeq.c     **** }
1779:src/xeq.c     **** #endif
1780:src/xeq.c     **** 
1781:src/xeq.c     **** /* And the complex equivalents for the above.
1782:src/xeq.c     ****  * We pair registers arg & arg+1 to provide a complex number
1783:src/xeq.c     ****  */
1784:src/xeq.c     **** static int storcl_cop(unsigned short opr, int index, decNumber *r1, decNumber *r2, int rev) {
1785:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
1786:src/xeq.c     **** 
1787:src/xeq.c     **** 	getXY(x + 0, x + 1);
1788:src/xeq.c     **** 	getRegister(y + 0, index);
1789:src/xeq.c     **** 	getRegister(y + 1, index + 1);
1790:src/xeq.c     **** 
1791:src/xeq.c     **** 	if (rev) {
1792:src/xeq.c     **** 		x = y;
1793:src/xeq.c     **** 		y = a;
1794:src/xeq.c     **** 	}
1795:src/xeq.c     **** 
1796:src/xeq.c     **** 	switch (opr) {
1797:src/xeq.c     **** 	case 1:
1798:src/xeq.c     **** 		cmplxAdd(r1, r2, y + 0, y + 1, x + 0, x + 1);
1799:src/xeq.c     **** 		break;
1800:src/xeq.c     **** 	case 2:
1801:src/xeq.c     **** 		cmplxSubtract(r1, r2, y + 0, y + 1, x + 0, x + 1);
1802:src/xeq.c     **** 		break;
1803:src/xeq.c     **** 	case 3:
1804:src/xeq.c     **** 		cmplxMultiply(r1, r2, y + 0, y + 1, x + 0, x + 1);
1805:src/xeq.c     **** 		break;
1806:src/xeq.c     **** 	case 4:
1807:src/xeq.c     **** 		cmplxDivide(r1, r2, y + 0, y + 1, x + 0, x + 1);
ARM GAS  /tmp/cc7LeJ71.s 			page 39


1808:src/xeq.c     **** 		break;
1809:src/xeq.c     **** 	default:
1810:src/xeq.c     **** 		return 1;
1811:src/xeq.c     **** 	}
1812:src/xeq.c     **** 	return 0;
1813:src/xeq.c     **** }
1814:src/xeq.c     **** 
1815:src/xeq.c     **** 
1816:src/xeq.c     **** void cmdcsto(unsigned int arg, enum rarg op) {
1817:src/xeq.c     **** 	decNumber r1, r2;
1818:src/xeq.c     **** 	REGISTER *t1, *t2;
1819:src/xeq.c     **** 
1820:src/xeq.c     **** 	t1 = get_reg_n(arg);
1821:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
1822:src/xeq.c     **** 
1823:src/xeq.c     **** 	if (op == RARG_CSTO) {
1824:src/xeq.c     **** 		copyreg(t1, StackBase);
1825:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
1826:src/xeq.c     **** 	} else {
1827:src/xeq.c     **** 		if (is_intmode())
1828:src/xeq.c     **** 			bad_mode_error();
1829:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
1830:src/xeq.c     **** 			illegal(op);
1831:src/xeq.c     **** 		else {
1832:src/xeq.c     **** 			setRegister(arg, &r1);
1833:src/xeq.c     **** 			setRegister(arg + 1, &r2);
1834:src/xeq.c     **** 		}
1835:src/xeq.c     **** 	}
1836:src/xeq.c     **** 	set_was_complex();
1837:src/xeq.c     **** }
1838:src/xeq.c     **** 
1839:src/xeq.c     **** static void do_crcl(int index, enum rarg op) {
1840:src/xeq.c     **** 	decNumber r1, r2;
1841:src/xeq.c     **** 
1842:src/xeq.c     **** 	if (op == RARG_CRCL) {
1843:src/xeq.c     **** 		REGISTER x, y;
1844:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
1845:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
1846:src/xeq.c     **** 		lift2_if_enabled();
1847:src/xeq.c     **** 		copyreg(StackBase, &x);
1848:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
1849:src/xeq.c     **** 	} else {
1850:src/xeq.c     **** 		if (is_intmode())
1851:src/xeq.c     **** 			bad_mode_error();
1852:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
1853:src/xeq.c     **** 			illegal(op);
1854:src/xeq.c     **** 		else {
1855:src/xeq.c     **** 			setlastXY();
1856:src/xeq.c     **** 			setXY(&r1, &r2);
1857:src/xeq.c     **** 		}
1858:src/xeq.c     **** 	}
1859:src/xeq.c     **** 	set_was_complex();
1860:src/xeq.c     **** }
1861:src/xeq.c     **** 
1862:src/xeq.c     **** void cmdcrcl(unsigned int arg, enum rarg op) {
1863:src/xeq.c     **** 	do_crcl(arg, op);
1864:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
ARM GAS  /tmp/cc7LeJ71.s 			page 40


1865:src/xeq.c     **** 	CLEAR_POLAR_READY;
1866:src/xeq.c     **** #endif
1867:src/xeq.c     **** }
1868:src/xeq.c     **** 
1869:src/xeq.c     **** #ifdef INCLUDE_FLASH_RECALL
1870:src/xeq.c     **** void cmdflashcrcl(unsigned int arg, enum rarg op) {
1871:src/xeq.c     **** 	do_crcl(FLASH_REG_BASE + arg, op - RARG_FLCRCL + RARG_CRCL);
1872:src/xeq.c     **** }
1873:src/xeq.c     **** #endif
1874:src/xeq.c     **** 
1875:src/xeq.c     **** /*
1876:src/xeq.c     ****  *  "Alien" RCL commands to convert registers originally stored in a different format
1877:src/xeq.c     ****  */
1878:src/xeq.c     **** // RCL of an integer value
1879:src/xeq.c     **** void cmdircl(unsigned int arg, enum rarg op) {
1880:src/xeq.c     **** 	if (is_intmode())
1881:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
1882:src/xeq.c     **** 	else
1883:src/xeq.c     **** 		register_from_int(regX_idx, arg, 0);
1884:src/xeq.c     **** }
1885:src/xeq.c     **** 
1886:src/xeq.c     **** // RCL of a single or double precision real value
1887:src/xeq.c     **** void cmdrrcl(unsigned int arg, enum rarg op) {
1888:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
1889:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
1890:src/xeq.c     **** 
1891:src/xeq.c     **** 	if (rcl_dbl && arg >= regX_idx && arg <= regK_idx) {
1892:src/xeq.c     **** 		// dRCL is not valid for lettered registers
1893:src/xeq.c     **** 		report_err(ERR_RANGE);
1894:src/xeq.c     **** 		return;
1895:src/xeq.c     **** 	}
1896:src/xeq.c     **** 
1897:src/xeq.c     **** 	UState.mode_double = rcl_dbl; // Force reading in requested format
1898:src/xeq.c     **** 	if (is_intmode()) {
1899:src/xeq.c     **** 		int_from_register(regX_idx, arg);
1900:src/xeq.c     **** 		UState.mode_double = was_dbl;
1901:src/xeq.c     **** 	}
1902:src/xeq.c     **** 	else {
1903:src/xeq.c     **** 		decNumber x;
1904:src/xeq.c     **** 		getRegister(&x, arg);
1905:src/xeq.c     **** 
1906:src/xeq.c     **** 		UState.mode_double = was_dbl; // Force access in original mode
1907:src/xeq.c     **** 		setX(&x);
1908:src/xeq.c     **** 	}
1909:src/xeq.c     **** }
1910:src/xeq.c     **** 
1911:src/xeq.c     **** 
1912:src/xeq.c     **** /* SWAP x with the specified register
1913:src/xeq.c     ****  */
1914:src/xeq.c     **** void swap_reg(REGISTER *a, REGISTER *b) {
1915:src/xeq.c     **** 	REGISTER t;
1916:src/xeq.c     **** 
1917:src/xeq.c     **** 	copyreg(&t, a);
1918:src/xeq.c     **** 	copyreg(a, b);
1919:src/xeq.c     **** 	copyreg(b, &t);
1920:src/xeq.c     **** }
1921:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 41


1922:src/xeq.c     **** void cmdswap(unsigned int arg, enum rarg op) {
1923:src/xeq.c     **** 	int idx;
1924:src/xeq.c     **** 
1925:src/xeq.c     **** 	if (op == RARG_CSWAPX)
1926:src/xeq.c     **** 		idx = regX_idx;
1927:src/xeq.c     **** 	else if (op == RARG_CSWAPZ)
1928:src/xeq.c     **** 		idx = regZ_idx;
1929:src/xeq.c     **** 	else
1930:src/xeq.c     **** 		idx = regX_idx + (int)(op - RARG_SWAPX);
1931:src/xeq.c     **** 
1932:src/xeq.c     **** 	swap_reg(get_reg_n(idx), get_reg_n(arg));
1933:src/xeq.c     **** 
1934:src/xeq.c     **** 	if (op >= RARG_CSWAPX) {
1935:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
1936:src/xeq.c     **** 		set_was_complex();
1937:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
1938:src/xeq.c     **** 	CLEAR_POLAR_READY;
1939:src/xeq.c     **** #endif
1940:src/xeq.c     **** 	}
1941:src/xeq.c     **** }
1942:src/xeq.c     **** 
1943:src/xeq.c     **** 
1944:src/xeq.c     **** /* View a specified register
1945:src/xeq.c     ****  */
1946:src/xeq.c     **** void cmdview(unsigned int arg, enum rarg op) {
1947:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
1948:src/xeq.c     **** 
1949:src/xeq.c     **** 	State2.wascomplex = cmplx;
1950:src/xeq.c     **** 	ShowRegister = arg;
1951:src/xeq.c     **** 	State2.disp_freeze = 0;
1952:src/xeq.c     **** 	display();
1953:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
1954:src/xeq.c     **** }
1955:src/xeq.c     **** 
1956:src/xeq.c     **** 
1957:src/xeq.c     **** /* Get the stack size */
1958:src/xeq.c     **** void get_stack_size(enum nilop op) {
1959:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
1960:src/xeq.c     **** }
1961:src/xeq.c     **** 
1962:src/xeq.c     **** void get_word_size(enum nilop op) {
1963:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
1964:src/xeq.c     **** }
1965:src/xeq.c     **** 
1966:src/xeq.c     **** void get_sign_mode(enum nilop op) {
1967:src/xeq.c     **** 	static const unsigned char modes[4] = {
1968:src/xeq.c     **** 		0x02,		// 2's complement
1969:src/xeq.c     **** 		0x01,		// 1's complement
1970:src/xeq.c     **** 		0x00,		// unsigned
1971:src/xeq.c     **** 		0x81		// sign and mantissa
1972:src/xeq.c     **** 	};
1973:src/xeq.c     **** 	const unsigned char v = modes[(int)int_mode()];
1974:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
1975:src/xeq.c     **** }
1976:src/xeq.c     **** 
1977:src/xeq.c     **** void get_base(enum nilop op) {
1978:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
ARM GAS  /tmp/cc7LeJ71.s 			page 42


1979:src/xeq.c     **** }
1980:src/xeq.c     **** 
1981:src/xeq.c     **** #ifdef DM42
1982:src/xeq.c     ****  long int DM42_Ticker () {
1983:src/xeq.c     ****     long int f, t;
1984:src/xeq.c     ****     t = get_rtc_ticks();
1985:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
1986:src/xeq.c     ****     return f;
1987:src/xeq.c     ****  }
1988:src/xeq.c     **** #endif
1989:src/xeq.c     **** /* Get the current ticker value */
1990:src/xeq.c     **** void op_ticks(enum nilop op) {
1991:src/xeq.c     **** #if !defined(CONSOLE)
1992:src/xeq.c     ****     setX_int_sgn(Ticker, 0);
1993:src/xeq.c     **** #else 
1994:src/xeq.c     ****     struct timeval tv;
1995:src/xeq.c     ****     long long int t;
1996:src/xeq.c     ****     gettimeofday(&tv, NULL);
1997:src/xeq.c     ****     t = tv.tv_sec * 10 + tv.tv_usec / 100000;
1998:src/xeq.c     ****     setX_int_sgn(t, 0);
1999:src/xeq.c     **** #endif
2000:src/xeq.c     **** }
2001:src/xeq.c     **** 
2002:src/xeq.c     **** /* Display the battery voltage */
2003:src/xeq.c     **** void op_voltage(enum nilop op) {
2004:src/xeq.c     **** 	decNumber t, u;
2005:src/xeq.c     **** #ifdef REALBUILD
2006:src/xeq.c     **** 	unsigned long long int v = 19 + Voltage;
2007:src/xeq.c     **** #elif defined(DM42)
2008:src/xeq.c     **** 	int v = get_vbat();
2009:src/xeq.c     **** 	v = v / 100;
2010:src/xeq.c     **** #else
2011:src/xeq.c     **** 	unsigned long long int v = 32;
2012:src/xeq.c     **** #endif
2013:src/xeq.c     **** 
2014:src/xeq.c     **** 	if (is_intmode()) {
2015:src/xeq.c     **** 		setX_int_sgn(v, 0);
2016:src/xeq.c     **** 	} else {
2017:src/xeq.c     **** 		ullint_to_dn(&t, v);
2018:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
2019:src/xeq.c     **** 		setX(&u);
2020:src/xeq.c     **** 	}
2021:src/xeq.c     **** }
2022:src/xeq.c     **** 
2023:src/xeq.c     **** /*
2024:src/xeq.c     ****  *  Commands to determine free memory
2025:src/xeq.c     ****  */
2026:src/xeq.c     **** int free_mem(void) {
2027:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
2028:src/xeq.c     **** }
2029:src/xeq.c     **** 
2030:src/xeq.c     **** int free_flash(void) {
2031:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
2032:src/xeq.c     **** }
2033:src/xeq.c     **** 
2034:src/xeq.c     **** void get_mem(enum nilop op) {
2035:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
ARM GAS  /tmp/cc7LeJ71.s 			page 43


2036:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
2037:src/xeq.c     **** 		 op == OP_FLASHQ ? free_flash() :
2038:src/xeq.c     **** 		 global_regs(),
2039:src/xeq.c     **** 		 0);
2040:src/xeq.c     **** }
2041:src/xeq.c     **** 
2042:src/xeq.c     **** 
2043:src/xeq.c     **** /* Check if a keystroke is pending in the buffer, if so return it to the specified
2044:src/xeq.c     ****  * register, if not skip the next step.
2045:src/xeq.c     ****  */
2046:src/xeq.c     **** void cmdkeyp(unsigned int arg, enum rarg op) {
2047:src/xeq.c     **** 	int cond = LastKey == 0;
2048:src/xeq.c     **** 	if (!cond) {
2049:src/xeq.c     **** 		int k = LastKey - 1;
2050:src/xeq.c     **** 		LastKey = 0;
2051:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
2052:src/xeq.c     **** 	}
2053:src/xeq.c     **** 	fin_tst(cond);
2054:src/xeq.c     **** }
2055:src/xeq.c     **** 
2056:src/xeq.c     **** /*
2057:src/xeq.c     ****  *  Get a key code from a register and translate it from row/colum to internal
2058:src/xeq.c     ****  *  Check for valid arguments
2059:src/xeq.c     ****  */
2060:src/xeq.c     **** static int get_keycode_from_reg(unsigned int n)
2061:src/xeq.c     **** {
2062:src/xeq.c     **** 	int sgn;
2063:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
2064:src/xeq.c     **** 	if ( c < 0 )
2065:src/xeq.c     **** 		report_err(ERR_RANGE);
2066:src/xeq.c     **** 	return c;
2067:src/xeq.c     **** }
2068:src/xeq.c     **** 
2069:src/xeq.c     **** /*
2070:src/xeq.c     ****  *  Take a row/column key code and feed it to the keyboard buffer
2071:src/xeq.c     ****  *  This stops program execution first to make sure, the key is not
2072:src/xeq.c     ****  *  read in by KEY? again.
2073:src/xeq.c     ****  */
2074:src/xeq.c     **** void cmdputkey(unsigned int arg, enum rarg op)
2075:src/xeq.c     **** {
2076:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2077:src/xeq.c     **** 
2078:src/xeq.c     **** 	if (c >= 0) {
2079:src/xeq.c     **** 		set_running_off();
2080:src/xeq.c     **** 		put_key(c);
2081:src/xeq.c     **** 	}
2082:src/xeq.c     **** }
2083:src/xeq.c     **** 
2084:src/xeq.c     **** /*
2085:src/xeq.c     ****  *  Return the type of the keycode in register n
2086:src/xeq.c     ****  *  returns 0-9 for digits, 10 for ., +/-, EEX, 11 for f,g,h, 12 for all other keys.
2087:src/xeq.c     ****  *  Invalid codes produce an error.
2088:src/xeq.c     ****  */
2089:src/xeq.c     **** void cmdkeytype(unsigned int arg, enum rarg op)
2090:src/xeq.c     **** {
2091:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
2092:src/xeq.c     **** 	if ( c >= 0 ) {
ARM GAS  /tmp/cc7LeJ71.s 			page 44


2093:src/xeq.c     **** 		const char types[] = {
2094:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
2095:src/xeq.c     **** 			12, 12, 12, 11, 11, 11,
2096:src/xeq.c     **** 			12, 12, 10, 10, 12, 12,
2097:src/xeq.c     **** 			12,  7,  8,  9, 12, 12,
2098:src/xeq.c     **** 			12,  4,  5,  6, 12, 12,
2099:src/xeq.c     **** 			12,  1,  2,  3, 12, 12,
2100:src/xeq.c     **** 			12,  0, 10, 12, 12 };
2101:src/xeq.c     **** 		lift_if_enabled();
2102:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
2103:src/xeq.c     **** 	}
2104:src/xeq.c     **** }
2105:src/xeq.c     **** 
2106:src/xeq.c     **** 
2107:src/xeq.c     **** /* Check which operating mode we're in -- integer or real -- they both
2108:src/xeq.c     ****  * vector through this routine.
2109:src/xeq.c     ****  */
2110:src/xeq.c     **** void check_mode(enum nilop op) {
2111:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
2112:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
2113:src/xeq.c     **** 
2114:src/xeq.c     **** 	fin_tst(intmode == desired);
2115:src/xeq.c     **** }
2116:src/xeq.c     **** 
2117:src/xeq.c     **** 
2118:src/xeq.c     **** /* Check if DBLON is active
2119:src/xeq.c     ****  */
2120:src/xeq.c     **** void check_dblmode(enum nilop op) {
2121:src/xeq.c     **** 	fin_tst(is_dblmode());
2122:src/xeq.c     **** }
2123:src/xeq.c     **** 
2124:src/xeq.c     **** void op_query_xtal(enum nilop op) {
2125:src/xeq.c     **** 	fin_tst(Xtal);
2126:src/xeq.c     **** }
2127:src/xeq.c     **** 
2128:src/xeq.c     **** void op_query_print(enum nilop op) {
2129:src/xeq.c     **** #ifdef INFRARED
2130:src/xeq.c     **** 	fin_tst(1);
2131:src/xeq.c     **** #else
2132:src/xeq.c     **** 	fin_tst(0);
2133:src/xeq.c     **** #endif
2134:src/xeq.c     **** }
2135:src/xeq.c     **** 
2136:src/xeq.c     **** /* Save and restore the entire stack to sequential registers */
2137:src/xeq.c     **** static int check_stack_overlap(unsigned int arg) {
2138:src/xeq.c     **** 	const int n = stack_size();
2139:src/xeq.c     **** 
2140:src/xeq.c     **** 	if (arg + n <= global_regs() || arg >= NUMREG) {
2141:src/xeq.c     **** 		return n;
2142:src/xeq.c     **** 	}
2143:src/xeq.c     **** 	report_err(ERR_STK_CLASH);
2144:src/xeq.c     **** 	return 0;
2145:src/xeq.c     **** }
2146:src/xeq.c     **** 
2147:src/xeq.c     **** void cmdstostk(unsigned int arg, enum rarg op) {
2148:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2149:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 45


2150:src/xeq.c     **** 	for (i=0; i<n; i++)
2151:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
2152:src/xeq.c     **** }
2153:src/xeq.c     **** 
2154:src/xeq.c     **** void cmdrclstk(unsigned int arg, enum rarg op) {
2155:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
2156:src/xeq.c     **** 
2157:src/xeq.c     **** 	for (i=0; i<n; i++)
2158:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
2159:src/xeq.c     **** }
2160:src/xeq.c     **** 
2161:src/xeq.c     **** 
2162:src/xeq.c     **** /*
2163:src/xeq.c     ****  *  Move up the return stack, skipping any local variables
2164:src/xeq.c     ****  */
2165:src/xeq.c     **** static void retstk_up(void)
2166:src/xeq.c     **** {
 309              		.loc 1 2166 1 is_stmt 1 view -0
 310              		.cfi_startproc
 311              		@ args = 0, pretend = 0, frame = 0
 312              		@ frame_needed = 0, uses_anonymous_args = 0
 313              		@ link register save eliminated.
2167:src/xeq.c     **** 	if (RetStkPtr < 0) {
 314              		.loc 1 2167 2 view .LVU95
 315              		.loc 1 2167 6 is_stmt 0 view .LVU96
 316 0000 1D4B     		ldr	r3, .L39
2166:src/xeq.c     **** 	if (RetStkPtr < 0) {
 317              		.loc 1 2166 1 view .LVU97
 318 0002 F0B4     		push	{r4, r5, r6, r7}
 319              		.cfi_def_cfa_offset 16
 320              		.cfi_offset 4, -16
 321              		.cfi_offset 5, -12
 322              		.cfi_offset 6, -8
 323              		.cfi_offset 7, -4
 324              		.loc 1 2167 6 view .LVU98
 325 0004 1C68     		ldr	r4, [r3]
 326 0006 B4F9E227 		ldrsh	r2, [r4, #2018]
 327              		.loc 1 2167 5 view .LVU99
 328 000a 002A     		cmp	r2, #0
 329 000c 01DB     		blt	.L37
 330              	.L27:
2168:src/xeq.c     **** 		int sp = RetStkPtr++;
2169:src/xeq.c     **** 		unsigned int s = RetStk[sp++];
2170:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
2171:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
2172:src/xeq.c     **** 			RetStkPtr = sp;
2173:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
2174:src/xeq.c     **** 			LocalRegs = 0;
2175:src/xeq.c     **** 			while (sp < 0) {
2176:src/xeq.c     **** 				s = RetStk[sp];
2177:src/xeq.c     **** 				if (isLOCAL(s)) {
2178:src/xeq.c     **** 					LocalRegs = sp;
2179:src/xeq.c     **** 					break;
2180:src/xeq.c     **** 				}
2181:src/xeq.c     **** 				++sp;
2182:src/xeq.c     **** 				if (isHIDDEN(s))
2183:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
ARM GAS  /tmp/cc7LeJ71.s 			page 46


2184:src/xeq.c     **** 			}
2185:src/xeq.c     **** 		}
2186:src/xeq.c     **** 	}
2187:src/xeq.c     **** }
 331              		.loc 1 2187 1 view .LVU100
 332 000e F0BC     		pop	{r4, r5, r6, r7}
 333              		.cfi_remember_state
 334              		.cfi_restore 7
 335              		.cfi_restore 6
 336              		.cfi_restore 5
 337              		.cfi_restore 4
 338              		.cfi_def_cfa_offset 0
 339 0010 7047     		bx	lr
 340              	.L37:
 341              		.cfi_restore_state
 342              	.LBB1329:
2168:src/xeq.c     **** 		int sp = RetStkPtr++;
 343              		.loc 1 2168 3 is_stmt 1 view .LVU101
2169:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 344              		.loc 1 2169 26 is_stmt 0 view .LVU102
 345 0012 1A4B     		ldr	r3, .L39+4
2168:src/xeq.c     **** 		int sp = RetStkPtr++;
 346              		.loc 1 2168 21 view .LVU103
 347 0014 511C     		adds	r1, r2, #1
2169:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 348              		.loc 1 2169 26 view .LVU104
 349 0016 1D68     		ldr	r5, [r3]
2168:src/xeq.c     **** 		int sp = RetStkPtr++;
 350              		.loc 1 2168 21 view .LVU105
 351 0018 A4F8E217 		strh	r1, [r4, #2018]	@ movhi
 352              	.LVL26:
2169:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 353              		.loc 1 2169 3 is_stmt 1 view .LVU106
2169:src/xeq.c     **** 		if (isLOCAL(s) || isHIDDEN(s)) {
 354              		.loc 1 2169 26 is_stmt 0 view .LVU107
 355 001c 35F81230 		ldrh	r3, [r5, r2, lsl #1]
 356              	.LVL27:
2170:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 357              		.loc 1 2170 3 is_stmt 1 view .LVU108
2170:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 358              		.loc 1 2170 7 is_stmt 0 view .LVU109
 359 0020 1A0B     		lsrs	r2, r3, #12
 360              	.LVL28:
2170:src/xeq.c     **** 			sp += LOCAL_LEVELS(s);
 361              		.loc 1 2170 6 view .LVU110
 362 0022 22F00202 		bic	r2, r2, #2
 363 0026 012A     		cmp	r2, #1
 364 0028 F1D1     		bne	.L27
2171:src/xeq.c     **** 			RetStkPtr = sp;
 365              		.loc 1 2171 4 is_stmt 1 view .LVU111
2174:src/xeq.c     **** 			while (sp < 0) {
 366              		.loc 1 2174 14 is_stmt 0 view .LVU112
 367 002a B4F8DE67 		ldrh	r6, [r4, #2014]
2171:src/xeq.c     **** 			RetStkPtr = sp;
 368              		.loc 1 2171 10 view .LVU113
 369 002e C3F30B03 		ubfx	r3, r3, #0, #12
 370              	.LVL29:
ARM GAS  /tmp/cc7LeJ71.s 			page 47


2171:src/xeq.c     **** 			RetStkPtr = sp;
 371              		.loc 1 2171 7 view .LVU114
 372 0032 0B44     		add	r3, r3, r1
 373              	.LVL30:
2172:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 374              		.loc 1 2172 4 is_stmt 1 view .LVU115
2174:src/xeq.c     **** 			while (sp < 0) {
 375              		.loc 1 2174 14 is_stmt 0 view .LVU116
 376 0034 6FF34F16 		bfc	r6, #5, #11
 377              	.LVL31:
2172:src/xeq.c     **** 			// Re-adjust the LocalRegs pointer
 378              		.loc 1 2172 14 view .LVU117
 379 0038 A4F8E237 		strh	r3, [r4, #2018]	@ movhi
 380              	.LVL32:
2174:src/xeq.c     **** 			while (sp < 0) {
 381              		.loc 1 2174 4 is_stmt 1 view .LVU118
2174:src/xeq.c     **** 			while (sp < 0) {
 382              		.loc 1 2174 14 is_stmt 0 view .LVU119
 383 003c A4F8DE67 		strh	r6, [r4, #2014]	@ movhi
2175:src/xeq.c     **** 				s = RetStk[sp];
 384              		.loc 1 2175 4 is_stmt 1 view .LVU120
 385 0040 6FF00047 		mvn	r7, #-2147483648
 386              	.L31:
2175:src/xeq.c     **** 				s = RetStk[sp];
 387              		.loc 1 2175 4 is_stmt 0 view .LVU121
 388 0044 D919     		adds	r1, r3, r7
 389 0046 05EB4101 		add	r1, r5, r1, lsl #1
 390 004a 03E0     		b	.L33
 391              	.LVL33:
 392              	.L32:
2182:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 393              		.loc 1 2182 8 view .LVU122
 394 004c 032A     		cmp	r2, #3
2181:src/xeq.c     **** 				if (isHIDDEN(s))
 395              		.loc 1 2181 5 view .LVU123
 396 004e 03F10103 		add	r3, r3, #1
 397              	.LVL34:
2182:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 398              		.loc 1 2182 5 is_stmt 1 view .LVU124
2182:src/xeq.c     **** 					sp += LOCAL_LEVELS(s);
 399              		.loc 1 2182 8 is_stmt 0 view .LVU125
 400 0052 0CD0     		beq	.L38
 401              	.LVL35:
 402              	.L33:
2176:src/xeq.c     **** 				if (isLOCAL(s)) {
 403              		.loc 1 2176 5 is_stmt 1 view .LVU126
2181:src/xeq.c     **** 				if (isHIDDEN(s))
 404              		.loc 1 2181 5 view .LVU127
2175:src/xeq.c     **** 				s = RetStk[sp];
 405              		.loc 1 2175 10 view .LVU128
 406 0054 002B     		cmp	r3, #0
 407 0056 DADA     		bge	.L27
2176:src/xeq.c     **** 				if (isLOCAL(s)) {
 408              		.loc 1 2176 15 is_stmt 0 view .LVU129
 409 0058 31F8020F 		ldrh	r0, [r1, #2]!
 410              	.LVL36:
2177:src/xeq.c     **** 					LocalRegs = sp;
ARM GAS  /tmp/cc7LeJ71.s 			page 48


 411              		.loc 1 2177 5 is_stmt 1 view .LVU130
2177:src/xeq.c     **** 					LocalRegs = sp;
 412              		.loc 1 2177 9 is_stmt 0 view .LVU131
 413 005c 020B     		lsrs	r2, r0, #12
2177:src/xeq.c     **** 					LocalRegs = sp;
 414              		.loc 1 2177 8 view .LVU132
 415 005e 012A     		cmp	r2, #1
 416 0060 F4D1     		bne	.L32
2178:src/xeq.c     **** 					break;
 417              		.loc 1 2178 6 is_stmt 1 view .LVU133
2178:src/xeq.c     **** 					break;
 418              		.loc 1 2178 16 is_stmt 0 view .LVU134
 419 0062 63F34F16 		bfi	r6, r3, #5, #11
 420              	.LVL37:
2178:src/xeq.c     **** 					break;
 421              		.loc 1 2178 16 view .LVU135
 422 0066 A4F8DE67 		strh	r6, [r4, #2014]	@ movhi
2179:src/xeq.c     **** 				}
 423              		.loc 1 2179 6 is_stmt 1 view .LVU136
 424              	.LBE1329:
 425              		.loc 1 2187 1 is_stmt 0 view .LVU137
 426 006a F0BC     		pop	{r4, r5, r6, r7}
 427              		.cfi_remember_state
 428              		.cfi_restore 7
 429              		.cfi_restore 6
 430              		.cfi_restore 5
 431              		.cfi_restore 4
 432              		.cfi_def_cfa_offset 0
 433 006c 7047     		bx	lr
 434              	.LVL38:
 435              	.L38:
 436              		.cfi_restore_state
 437              	.LBB1330:
2183:src/xeq.c     **** 			}
 438              		.loc 1 2183 6 is_stmt 1 view .LVU138
2183:src/xeq.c     **** 			}
 439              		.loc 1 2183 12 is_stmt 0 view .LVU139
 440 006e C0F30B00 		ubfx	r0, r0, #0, #12
 441              	.LVL39:
2183:src/xeq.c     **** 			}
 442              		.loc 1 2183 9 view .LVU140
 443 0072 0344     		add	r3, r3, r0
 444              	.LVL40:
2183:src/xeq.c     **** 			}
 445              		.loc 1 2183 9 view .LVU141
 446 0074 E6E7     		b	.L31
 447              	.L40:
 448 0076 00BF     		.align	2
 449              	.L39:
 450 0078 00000000 		.word	main_ram
 451 007c 00000000 		.word	RetStk
 452              	.LBE1330:
 453              		.cfi_endproc
 454              	.LFE150:
 456              		.section	.text.flag_word,"ax",%progbits
 457              		.align	1
 458              		.p2align 2,,3
ARM GAS  /tmp/cc7LeJ71.s 			page 49


 459              		.syntax unified
 460              		.thumb
 461              		.thumb_func
 462              		.fpu fpv4-sp-d16
 464              	flag_word:
 465              	.LVL41:
 466              	.LFB198:
2188:src/xeq.c     **** 
2189:src/xeq.c     **** 
2190:src/xeq.c     **** /* Search from the given position for the specified numeric label.
2191:src/xeq.c     ****  */
2192:src/xeq.c     **** unsigned int find_opcode_from(unsigned int pc, const opcode l, const int flags) {
2193:src/xeq.c     **** 	unsigned short int top;
2194:src/xeq.c     **** 	int count;
2195:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
2196:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
2197:src/xeq.c     **** 
2198:src/xeq.c     **** 	count = 1 + find_section_bounds(pc, endp, &top);
2199:src/xeq.c     **** 	count -= top;
2200:src/xeq.c     **** 	while (count--) {
2201:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
2202:src/xeq.c     **** 		// If we don't find the label, we may search a little too far if many double word
2203:src/xeq.c     **** 		// instructions are in the code, but this doesn't do any harm.
2204:src/xeq.c     **** 		if (getprog(pc) == l)
2205:src/xeq.c     **** 			return pc;
2206:src/xeq.c     **** 		pc = do_inc(pc, endp);
2207:src/xeq.c     **** 	}
2208:src/xeq.c     **** 	if (errp)
2209:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2210:src/xeq.c     **** 	return 0;
2211:src/xeq.c     **** }
2212:src/xeq.c     **** 
2213:src/xeq.c     **** 
2214:src/xeq.c     **** unsigned int find_label_from(unsigned int pc, unsigned int arg, int flags) {
2215:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
2216:src/xeq.c     **** }
2217:src/xeq.c     **** 
2218:src/xeq.c     **** 
2219:src/xeq.c     **** 
2220:src/xeq.c     **** /* Handle a GTO/GSB instruction
2221:src/xeq.c     ****  */
2222:src/xeq.c     **** static void gsbgto(unsigned int pc, int gsb, unsigned int oldpc) {
2223:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
2224:src/xeq.c     **** 	raw_set_pc(pc);
2225:src/xeq.c     **** 	if (gsb) {
2226:src/xeq.c     **** 		if (!Running && !XromRunning) {
2227:src/xeq.c     **** 			// XEQ or hot key from keyboard
2228:src/xeq.c     **** 			clrretstk();
2229:src/xeq.c     **** 			set_running_on();
2230:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
2231:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
2232:src/xeq.c     **** 				oldpc = pc;
2233:src/xeq.c     **** 		}
2234:src/xeq.c     **** 		if (-RetStkPtr >= (XromFlags.xIN ? XROM_RET_STACK_SIZE : RetStkSize)) {
2235:src/xeq.c     **** 			// Stack is full
2236:src/xeq.c     **** 			report_err(ERR_RAM_FULL);
2237:src/xeq.c     **** 			// clrretstk();
ARM GAS  /tmp/cc7LeJ71.s 			page 50


2238:src/xeq.c     **** 		}
2239:src/xeq.c     **** 		else {
2240:src/xeq.c     **** 			// Push PC on return stack
2241:src/xeq.c     **** 			RetStk[--RetStkPtr] = oldpc;
2242:src/xeq.c     **** 		}
2243:src/xeq.c     **** 	}
2244:src/xeq.c     **** }
2245:src/xeq.c     **** 
2246:src/xeq.c     **** // Handle a RTN
2247:src/xeq.c     **** static void do_rtn(int plus1) {
2248:src/xeq.c     **** 	unsigned short pc;
2249:src/xeq.c     **** 
2250:src/xeq.c     **** 	if (RetStkPtr >= 0) {
2251:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
2252:src/xeq.c     **** 		clrretstk();
2253:src/xeq.c     **** 		raw_set_pc(ProgBegin);
2254:src/xeq.c     **** 	}
2255:src/xeq.c     **** 	else {
2256:src/xeq.c     **** 		// Normal RTN within program
2257:src/xeq.c     **** 		// Pop any LOCALS off the stack, increment sp
2258:src/xeq.c     **** 		retstk_up();
2259:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
2260:src/xeq.c     **** 		raw_set_pc(pc);
2261:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
2262:src/xeq.c     **** 		if (plus1 && getprog(pc) != (OP_NIL | OP_POPUSR))
2263:src/xeq.c     **** 			if (incpc())
2264:src/xeq.c     **** 				decpc();
2265:src/xeq.c     **** 	}
2266:src/xeq.c     **** 	if (RetStkPtr == 0) {
2267:src/xeq.c     **** 		// RTN with empty stack stops
2268:src/xeq.c     **** 		set_running_off();
2269:src/xeq.c     **** 	}
2270:src/xeq.c     **** }
2271:src/xeq.c     **** 
2272:src/xeq.c     **** // RTN and RTN+1
2273:src/xeq.c     **** void op_rtn(enum nilop op) {
2274:src/xeq.c     **** 	if (! Running && ! XromRunning) {
2275:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
2276:src/xeq.c     **** 		clrretstk_pc();
2277:src/xeq.c     **** 	}
2278:src/xeq.c     **** 	else
2279:src/xeq.c     **** 		do_rtn(op == OP_RTNp1 ? 1 : 0);
2280:src/xeq.c     **** }
2281:src/xeq.c     **** 
2282:src/xeq.c     **** 
2283:src/xeq.c     **** // Called by XEQ, GTO and CAT browser
2284:src/xeq.c     **** void cmdgtocommon(int gsb, unsigned int pc) {
2285:src/xeq.c     **** 	if (pc == 0)
2286:src/xeq.c     **** 		set_running_off();
2287:src/xeq.c     **** 	else
2288:src/xeq.c     **** 		gsbgto(pc, gsb, state_pc());
2289:src/xeq.c     **** }
2290:src/xeq.c     **** 
2291:src/xeq.c     **** 
2292:src/xeq.c     **** // Common part of XEQUSR and XEQ'...' from XROM
2293:src/xeq.c     **** // Command pushes 4 values on stack, needs to be followed by POPUSR
2294:src/xeq.c     **** static void usergsb_common(unsigned short int target) {
ARM GAS  /tmp/cc7LeJ71.s 			page 51


2295:src/xeq.c     **** 	const unsigned int pc = state_pc();
2296:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
2297:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
2298:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
2299:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
2300:src/xeq.c     **** 
2301:src/xeq.c     **** 	XromUserPc = 0;			     // Hide information irrelevant to user code
2302:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
2303:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
2304:src/xeq.c     **** 	if (! Running)
2305:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
2306:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
2307:src/xeq.c     **** }
2308:src/xeq.c     **** 
2309:src/xeq.c     **** 
2310:src/xeq.c     **** // XEQUSR
2311:src/xeq.c     **** // Command fills the stack and calls the user's code.
2312:src/xeq.c     **** // Needs to be followed by POPUSR
2313:src/xeq.c     **** void do_usergsb(enum nilop op) {
2314:src/xeq.c     **** 	usergsb_common(XromUserPc);
2315:src/xeq.c     ****         fill(OP_FILL);
2316:src/xeq.c     **** }
2317:src/xeq.c     **** 
2318:src/xeq.c     **** 
2319:src/xeq.c     **** // POPUSR
2320:src/xeq.c     **** void op_popusr(enum nilop op) {
2321:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
2322:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
2323:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
2324:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
2325:src/xeq.c     **** }
2326:src/xeq.c     **** 
2327:src/xeq.c     **** /* Tests if the user program is at the top level */
2328:src/xeq.c     **** void isTop(enum nilop op) {
2329:src/xeq.c     **** 	int top = 0;
2330:src/xeq.c     **** 
2331:src/xeq.c     **** 	if (Running) {
2332:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
2333:src/xeq.c     **** 	}
2334:src/xeq.c     **** 	fin_tst(top);
2335:src/xeq.c     **** }
2336:src/xeq.c     **** 
2337:src/xeq.c     **** 
2338:src/xeq.c     **** // LBL?
2339:src/xeq.c     **** void cmdlblp(unsigned int arg, enum rarg op) {
2340:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
2341:src/xeq.c     **** }
2342:src/xeq.c     **** 
2343:src/xeq.c     **** 
2344:src/xeq.c     **** void cmdgto(unsigned int arg, enum rarg op) {
2345:src/xeq.c     **** 	unsigned int lbl;
2346:src/xeq.c     **** 	if (is_xrom())
2347:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
2348:src/xeq.c     **** 	else
2349:src/xeq.c     **** 		lbl = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
2350:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
2351:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 52


2352:src/xeq.c     **** 
2353:src/xeq.c     **** unsigned int findmultilbl(const opcode o, int flags) {
2354:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
2355:src/xeq.c     **** 	unsigned int lbl;
2356:src/xeq.c     **** 
2357:src/xeq.c     **** 	lbl = find_opcode_from(0, dest, 0);					// RAM
2358:src/xeq.c     **** 	if (lbl == 0)
2359:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
2360:src/xeq.c     **** 	if (lbl == 0)
2361:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
2362:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
2363:src/xeq.c     **** 		report_err(ERR_NO_LBL);
2364:src/xeq.c     **** 	return lbl;
2365:src/xeq.c     **** }
2366:src/xeq.c     **** 
2367:src/xeq.c     **** // LBL?'...'
2368:src/xeq.c     **** void cmdmultilblp(const opcode o, enum multiops mopr) {
2369:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
2370:src/xeq.c     **** }
2371:src/xeq.c     **** 
2372:src/xeq.c     **** void cmdmultigto(const opcode o, enum multiops mopr) {
2373:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
2374:src/xeq.c     **** 		// In XROM the command behaves differently!
2375:src/xeq.c     **** 		unsigned short int target = findmultilbl(o, 0);
2376:src/xeq.c     **** 		if (target != 0)
2377:src/xeq.c     **** 			usergsb_common(target); 
2378:src/xeq.c     **** 		else
2379:src/xeq.c     **** 			incpc();
2380:src/xeq.c     **** 	}
2381:src/xeq.c     **** 	else {
2382:src/xeq.c     **** 		cmdgtocommon(mopr != DBL_GTO, findmultilbl(o, FIND_OP_ERROR));
2383:src/xeq.c     **** 	}
2384:src/xeq.c     **** }
2385:src/xeq.c     **** 
2386:src/xeq.c     **** void multiumenu(const opcode o, enum multiops mopr) {
2387:src/xeq.c     ****   opcode op = (o & 0xFFFFF0FF) + ((DBL_LBL) << DBL_SHIFT); // change opcode to LBL
2388:src/xeq.c     ****   build_user_menu_from_program(op);
2389:src/xeq.c     ****   set_menu (M_User);
2390:src/xeq.c     ****   display_current_menu ();
2391:src/xeq.c     **** }
2392:src/xeq.c     **** 
2393:src/xeq.c     **** static void branchtoalpha(int is_gsb, char buf[]) {
2394:src/xeq.c     **** 	unsigned int op;
2395:src/xeq.c     **** 
2396:src/xeq.c     **** 	op = OP_DBL + (DBL_LBL << DBL_SHIFT);
2397:src/xeq.c     **** 	op |= buf[0] & 0xff;
2398:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
2399:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
2400:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
2401:src/xeq.c     **** }
2402:src/xeq.c     **** 
2403:src/xeq.c     **** void cmdalphagto(unsigned int arg, enum rarg op) {
2404:src/xeq.c     **** 	char buf[14];
2405:src/xeq.c     **** 
2406:src/xeq.c     **** 	xset(buf, '\0', sizeof(buf));
2407:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
2408:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 53


2409:src/xeq.c     **** 
2410:src/xeq.c     **** static void do_branchalpha(int is_gsb) {
2411:src/xeq.c     **** 	char buf[4];
2412:src/xeq.c     **** 
2413:src/xeq.c     **** 	xcopy(buf, Alpha, 3);
2414:src/xeq.c     **** 	buf[3] = '\0';
2415:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
2416:src/xeq.c     **** }
2417:src/xeq.c     **** 
2418:src/xeq.c     **** void op_gtoalpha(enum nilop op) {
2419:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
2420:src/xeq.c     **** }
2421:src/xeq.c     **** 
2422:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2423:src/xeq.c     **** int get_dispmode_digs(int *pdigs)
2424:src/xeq.c     **** {
2425:src/xeq.c     **** 	int dispmode = UState.dispmode;
2426:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
2427:src/xeq.c     **** 
2428:src/xeq.c     **** 	if (dispdigs >= 12) {
2429:src/xeq.c     **** 		dispdigs -= 12;
2430:src/xeq.c     **** 		dispmode += 4;
2431:src/xeq.c     **** 		if (dispmode >= 6) {
2432:src/xeq.c     **** 			dispmode -= 2;
2433:src/xeq.c     **** 			dispdigs += 4;
2434:src/xeq.c     **** 		}
2435:src/xeq.c     **** 	}
2436:src/xeq.c     **** 	*pdigs = dispdigs;
2437:src/xeq.c     **** 	return dispmode;
2438:src/xeq.c     **** }
2439:src/xeq.c     **** 
2440:src/xeq.c     **** void set_dispmode_digs(int dispmode, int dispdigs)
2441:src/xeq.c     **** {
2442:src/xeq.c     **** 	if (dispmode >= 4) {
2443:src/xeq.c     **** 		dispmode -= 4;
2444:src/xeq.c     **** 		dispdigs += 12;
2445:src/xeq.c     **** 		if (dispdigs >= 16) {
2446:src/xeq.c     **** 			dispdigs -= 4;
2447:src/xeq.c     **** 			dispmode += 2;
2448:src/xeq.c     **** 		}
2449:src/xeq.c     **** 	}
2450:src/xeq.c     **** 	UState.dispmode = dispmode;
2451:src/xeq.c     **** 	UState.dispdigs = dispdigs;
2452:src/xeq.c     **** }
2453:src/xeq.c     **** #endif
2454:src/xeq.c     **** 
2455:src/xeq.c     **** void cmddisp(unsigned int arg, enum rarg op) {
2456:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
2457:src/xeq.c     **** 	int dispdigs;
2458:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
2459:src/xeq.c     **** #ifdef DM42
2460:src/xeq.c     **** 	switch (op) {
2461:src/xeq.c     **** 	case RARG_STD:
2462:src/xeq.c     **** 	  dispmode = MODE_STD;
2463:src/xeq.c     **** 	  break;
2464:src/xeq.c     **** 	case RARG_FIX:
2465:src/xeq.c     **** 	  dispmode = MODE_FIX;
ARM GAS  /tmp/cc7LeJ71.s 			page 54


2466:src/xeq.c     **** 	  break;
2467:src/xeq.c     **** 	case RARG_SCI:
2468:src/xeq.c     **** 	  dispmode = MODE_SCI;
2469:src/xeq.c     **** 	  break;
2470:src/xeq.c     **** 	case RARG_ENG:
2471:src/xeq.c     **** 	  dispmode = MODE_ENG;
2472:src/xeq.c     **** 	  break;
2473:src/xeq.c     **** 	case RARG_SIG:
2474:src/xeq.c     **** 	  dispmode = MODE_SIG;
2475:src/xeq.c     **** 	  break;
2476:src/xeq.c     **** 	case RARG_SIG0:
2477:src/xeq.c     **** 	  dispmode = MODE_SIG0;
2478:src/xeq.c     **** 	  break;
2479:src/xeq.c     **** 	default:;
2480:src/xeq.c     **** 	}
2481:src/xeq.c     **** 	if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2482:src/xeq.c     **** 	  report_err(ERR_RANGE);
2483:src/xeq.c     **** 	  return;
2484:src/xeq.c     **** 	}
2485:src/xeq.c     **** #else	
2486:src/xeq.c     **** 	if (op != RARG_DISP)
2487:src/xeq.c     **** 		dispmode = (op - RARG_STD) + MODE_STD;
2488:src/xeq.c     **** 	else if ((dispmode == MODE_SIG || dispmode == MODE_SIG0) && arg >= 8) {
2489:src/xeq.c     **** 		report_err(ERR_RANGE);
2490:src/xeq.c     **** 		return;
2491:src/xeq.c     **** 	}
2492:src/xeq.c     **** #endif
2493:src/xeq.c     **** 	set_dispmode_digs(dispmode, arg);
2494:src/xeq.c     **** #else
2495:src/xeq.c     **** 	UState.dispdigs = arg;
2496:src/xeq.c     **** 	if (op != RARG_DISP)
2497:src/xeq.c     **** 		UState.dispmode = (op - RARG_STD) + MODE_STD;
2498:src/xeq.c     **** #endif
2499:src/xeq.c     **** 	op_float(OP_FLOAT);
2500:src/xeq.c     **** }
2501:src/xeq.c     **** 
2502:src/xeq.c     **** 
2503:src/xeq.c     **** /* Metric / Imperial conversion code */
2504:src/xeq.c     **** decNumber *convC2F(decNumber *r, const decNumber *x) {
2505:src/xeq.c     **** 	decNumber s;
2506:src/xeq.c     **** 
2507:src/xeq.c     **** 	dn_multiply(&s, x, &const_9on5);
2508:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
2509:src/xeq.c     **** }
2510:src/xeq.c     **** 
2511:src/xeq.c     **** decNumber *convF2C(decNumber *r, const decNumber *x) {
2512:src/xeq.c     **** 	decNumber s;
2513:src/xeq.c     **** 
2514:src/xeq.c     **** 	dn_subtract(&s, x, &const_32);
2515:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
2516:src/xeq.c     **** }
2517:src/xeq.c     **** 
2518:src/xeq.c     **** decNumber *convDB2AR(decNumber *r, const decNumber *x) {
2519:src/xeq.c     **** 	decNumber t;
2520:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
2521:src/xeq.c     **** 	return decNumberPow10(r, &t);
2522:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 55


2523:src/xeq.c     **** 
2524:src/xeq.c     **** decNumber *convAR2DB(decNumber *r, const decNumber *x) {
2525:src/xeq.c     **** 	decNumber t;
2526:src/xeq.c     **** 	dn_log10(&t, x);
2527:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
2528:src/xeq.c     **** }
2529:src/xeq.c     **** 
2530:src/xeq.c     **** decNumber *convDB2PR(decNumber *r, const decNumber *x) {
2531:src/xeq.c     **** 	decNumber t;
2532:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
2533:src/xeq.c     **** 	return decNumberPow10(r, &t);
2534:src/xeq.c     **** }
2535:src/xeq.c     **** 
2536:src/xeq.c     **** decNumber *convPR2DB(decNumber *r, const decNumber *x) {
2537:src/xeq.c     **** 	decNumber t;
2538:src/xeq.c     **** 	dn_log10(&t, x);
2539:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
2540:src/xeq.c     **** }
2541:src/xeq.c     **** 
2542:src/xeq.c     **** /* Scale conversions */
2543:src/xeq.c     **** void do_conv(decNumber *r, unsigned int arg, const decNumber *x) {
2544:src/xeq.c     **** 	decNumber m;
2545:src/xeq.c     **** 	const unsigned int conv = arg / 2;
2546:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
2547:src/xeq.c     **** 
2548:src/xeq.c     **** 	if (conv > NUM_CONSTS_CONV) {
2549:src/xeq.c     **** 		decNumberCopy(r, x);
2550:src/xeq.c     **** 		return;
2551:src/xeq.c     **** 	}
2552:src/xeq.c     **** 
2553:src/xeq.c     **** 	decimal64ToNumber(&CONSTANT_CONV(conv), &m);
2554:src/xeq.c     **** 
2555:src/xeq.c     **** 	if (dirn == 0)		// metric to imperial
2556:src/xeq.c     **** 		dn_divide(r, x, &m);
2557:src/xeq.c     **** 	else			// imperial to metric
2558:src/xeq.c     **** 		dn_multiply(r, x, &m);
2559:src/xeq.c     **** }
2560:src/xeq.c     **** 
2561:src/xeq.c     **** void cmdconv(unsigned int arg, enum rarg op) {
2562:src/xeq.c     **** 	decNumber x, r;
2563:src/xeq.c     **** 
2564:src/xeq.c     **** 	if (is_intmode())
2565:src/xeq.c     **** 		return;
2566:src/xeq.c     **** 
2567:src/xeq.c     **** 	getX(&x);
2568:src/xeq.c     **** 	do_conv(&r, arg, &x);
2569:src/xeq.c     **** 	setlastX();
2570:src/xeq.c     **** 	setX(&r);
2571:src/xeq.c     **** }
2572:src/xeq.c     **** 
2573:src/xeq.c     **** /*  Finish up a test -- if the value is non-zero, the test passes.
2574:src/xeq.c     ****  *  If it is zero, the test fails.
2575:src/xeq.c     ****  */
2576:src/xeq.c     **** void fin_tst(const int a) {
2577:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
2578:src/xeq.c     **** 	if (Running || XromRunning) {
2579:src/xeq.c     **** 		if (! a && incpc())
ARM GAS  /tmp/cc7LeJ71.s 			page 56


2580:src/xeq.c     **** 			decpc();
2581:src/xeq.c     **** 	}
2582:src/xeq.c     **** 	else
2583:src/xeq.c     **** 		DispMsg = msg;
2584:src/xeq.c     **** #ifdef INFRARED
2585:src/xeq.c     **** 	if (Tracing) {
2586:src/xeq.c     **** 		print_justified( msg );
2587:src/xeq.c     **** 		Tracing = 0;
2588:src/xeq.c     **** 	}
2589:src/xeq.c     **** #endif
2590:src/xeq.c     **** }
2591:src/xeq.c     **** 
2592:src/xeq.c     **** 
2593:src/xeq.c     **** /* Skip a number of instructions forwards */
2594:src/xeq.c     **** void cmdskip(unsigned int arg, enum rarg op) {
2595:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2596:src/xeq.c     **** 	unsigned int pc;
2597:src/xeq.c     **** 
2598:src/xeq.c     **** 	if (op == RARG_CASE) {
2599:src/xeq.c     **** 		int sgn;
2600:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
2601:src/xeq.c     **** 		if (sgn || arg >= 100) {
2602:src/xeq.c     **** 			report_err(ERR_RANGE);
2603:src/xeq.c     **** 			return;
2604:src/xeq.c     **** 		}
2605:src/xeq.c     **** 	}
2606:src/xeq.c     **** 
2607:src/xeq.c     **** 	if (isXROM(origpc))
2608:src/xeq.c     **** 		pc = origpc + arg;
2609:src/xeq.c     **** 	else {
2610:src/xeq.c     **** 		while (arg-- && !incpc());
2611:src/xeq.c     **** 		if (PcWrapped) {
2612:src/xeq.c     **** 			report_err(ERR_RANGE);
2613:src/xeq.c     **** 		}
2614:src/xeq.c     **** 		pc = state_pc();
2615:src/xeq.c     **** 	}
2616:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSF, origpc);
2617:src/xeq.c     **** }
2618:src/xeq.c     **** 
2619:src/xeq.c     **** /* Skip backwards */
2620:src/xeq.c     **** void cmdback(unsigned int arg, enum rarg op) {
2621:src/xeq.c     **** 	const unsigned int origpc = state_pc();
2622:src/xeq.c     **** 	unsigned int pc = origpc;
2623:src/xeq.c     **** 
2624:src/xeq.c     **** 	if (isXROM(origpc))
2625:src/xeq.c     **** 		pc -= arg + 1;
2626:src/xeq.c     ****         else if (arg) {
2627:src/xeq.c     **** 		if ( Running ) {
2628:src/xeq.c     **** 			// Handles the case properly that we are on last step
2629:src/xeq.c     **** 			pc = do_dec(pc, 1);
2630:src/xeq.c     **** 		}
2631:src/xeq.c     **** 		do {
2632:src/xeq.c     **** 			pc = do_dec(pc, 1);
2633:src/xeq.c     **** 		} while (--arg && !PcWrapped);
2634:src/xeq.c     **** 		if (PcWrapped) {
2635:src/xeq.c     **** 			report_err(ERR_RANGE);
2636:src/xeq.c     **** 			return;
ARM GAS  /tmp/cc7LeJ71.s 			page 57


2637:src/xeq.c     **** 		}
2638:src/xeq.c     **** 	}
2639:src/xeq.c     **** 	gsbgto(pc, op == RARG_BSB, origpc);
2640:src/xeq.c     **** }
2641:src/xeq.c     **** 
2642:src/xeq.c     **** 
2643:src/xeq.c     **** /* Append a character to the command line
2644:src/xeq.c     ****  */
2645:src/xeq.c     **** static void append_cmdline(char c) {
2646:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
2647:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
2648:src/xeq.c     **** }
2649:src/xeq.c     **** 
2650:src/xeq.c     **** /* Make sure exponent stays within allowed limits.
2651:src/xeq.c     ****  * was_digit_entered: 0: sign was changed
2652:src/xeq.c     ****  *                    1: new digit was entered
2653:src/xeq.c     ****  */
2654:src/xeq.c     **** static void exponent_adjusted(int was_digit_entered)
2655:src/xeq.c     **** {
2656:src/xeq.c     **** 	const int dbl = is_dblmode();
2657:src/xeq.c     **** 	int i;
2658:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
2659:src/xeq.c     **** 	const int neg_type_dc = get_reg_n_int_sgn(0, &i);
2660:src/xeq.c     **** #else
2661:src/xeq.c     **** 	const int neg_type_dc = SP_NEG_EXP_ENTRY_TYPE_DC;
2662:src/xeq.c     **** #endif
2663:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DC == -1
2664:src/xeq.c     **** 	const int neg_lim_dc = get_reg_n_int_sgn(1, &i);
2665:src/xeq.c     **** #else
2666:src/xeq.c     **** 	const int neg_lim_dc = SP_NEG_EXP_ENTRY_LIMIT_DC;
2667:src/xeq.c     **** #endif
2668:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DS == -1
2669:src/xeq.c     **** 	const int neg_type_ds = get_reg_n_int_sgn(2, &i);
2670:src/xeq.c     **** #else
2671:src/xeq.c     **** 	const int neg_type_ds = SP_NEG_EXP_ENTRY_TYPE_DS;
2672:src/xeq.c     **** #endif
2673:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_LIMIT_DS == -1
2674:src/xeq.c     **** 	const int neg_lim_ds = get_reg_n_int_sgn(3, &i);
2675:src/xeq.c     **** #else
2676:src/xeq.c     **** 	const int neg_lim_ds = SP_NEG_EXP_ENTRY_LIMIT_DS;
2677:src/xeq.c     **** #endif
2678:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DC == -1
2679:src/xeq.c     **** 	const int pos_type_dc = get_reg_n_int_sgn(4, &i);
2680:src/xeq.c     **** #else
2681:src/xeq.c     **** 	const int pos_type_dc = SP_POS_EXP_ENTRY_TYPE_DC;
2682:src/xeq.c     **** #endif
2683:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DC == -1
2684:src/xeq.c     **** 	const int pos_lim_dc = get_reg_n_int_sgn(5, &i);
2685:src/xeq.c     **** #else
2686:src/xeq.c     **** 	const int pos_lim_dc = SP_POS_EXP_ENTRY_LIMIT_DC;
2687:src/xeq.c     **** #endif
2688:src/xeq.c     **** #if SP_POS_EXP_ENTRY_TYPE_DS == -1
2689:src/xeq.c     **** 	const int pos_type_ds = get_reg_n_int_sgn(6, &i);
2690:src/xeq.c     **** #else
2691:src/xeq.c     **** 	const int pos_type_ds = SP_POS_EXP_ENTRY_TYPE_DS;
2692:src/xeq.c     **** #endif
2693:src/xeq.c     **** #if SP_POS_EXP_ENTRY_LIMIT_DS == -1
ARM GAS  /tmp/cc7LeJ71.s 			page 58


2694:src/xeq.c     **** 	const int pos_lim_ds = get_reg_n_int_sgn(7, &i);
2695:src/xeq.c     **** #else
2696:src/xeq.c     **** 	const int pos_lim_ds = SP_POS_EXP_ENTRY_LIMIT_DS;
2697:src/xeq.c     **** #endif
2698:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1
2699:src/xeq.c     **** 	const int exp_chs_dc = get_reg_n_int_sgn(8, &i);
2700:src/xeq.c     **** #else
2701:src/xeq.c     **** 	const int exp_chs_dc = SP_EXP_ENTRY_CHS_DC;
2702:src/xeq.c     **** #endif
2703:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DS == -1
2704:src/xeq.c     **** 	const int exp_chs_ds = get_reg_n_int_sgn(9, &i);
2705:src/xeq.c     **** #else
2706:src/xeq.c     **** 	const int exp_chs_ds = SP_EXP_ENTRY_CHS_DS;
2707:src/xeq.c     **** #endif
2708:src/xeq.c     **** 	const int dp_neg_type_dc = DP_NEG_EXP_ENTRY_TYPE_DC;
2709:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
2710:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
2711:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
2712:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
2713:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
2714:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
2715:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
2716:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
2717:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
2718:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2719:src/xeq.c     **** 	const int large_exp_entry = 1;
2720:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
2721:src/xeq.c     **** #else
2722:src/xeq.c     **** 	const int large_exp_entry = 0;
2723:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex + 1];
2724:src/xeq.c     **** #endif
2725:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1 || SP_NEG_EXP_ENTRY_TYPE_DC != SP_NEG_EXP_ENTRY_TYPE_DS \
2726:src/xeq.c     ****     || SP_NEG_EXP_ENTRY_LIMIT_DC == -1 || SP_NEG_EXP_ENTRY_LIMIT_DC != SP_NEG_EXP_ENTRY_LIMIT_DS \
2727:src/xeq.c     ****     || SP_POS_EXP_ENTRY_TYPE_DC == -1 || SP_POS_EXP_ENTRY_TYPE_DC != SP_POS_EXP_ENTRY_TYPE_DS \
2728:src/xeq.c     ****     || SP_POS_EXP_ENTRY_LIMIT_DC == -1 || SP_POS_EXP_ENTRY_LIMIT_DC != SP_POS_EXP_ENTRY_LIMIT_DS \
2729:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC != SP_EXP_ENTRY_CHS_DS \
2730:src/xeq.c     ****     || SP_EXP_ENTRY_ZERO_DC == -1 || SP_EXP_ENTRY_ZERO_DC != SP_EXP_ENTRY_ZERO_DS \
2731:src/xeq.c     ****     || ((DP_NEG_EXP_ENTRY_TYPE_DC != DP_NEG_EXP_ENTRY_TYPE_DS \
2732:src/xeq.c     ****          || DP_NEG_EXP_ENTRY_LIMIT_DC != DP_NEG_EXP_ENTRY_LIMIT_DS \
2733:src/xeq.c     ****          || DP_POS_EXP_ENTRY_TYPE_DC != DP_POS_EXP_ENTRY_TYPE_DS \
2734:src/xeq.c     ****          || DP_POS_EXP_ENTRY_LIMIT_DC != DP_POS_EXP_ENTRY_LIMIT_DS \
2735:src/xeq.c     ****          || DP_EXP_ENTRY_CHS_DC != DP_EXP_ENTRY_CHS_DS \
2736:src/xeq.c     ****          || DP_EXP_ENTRY_ZERO_DC != DP_EXP_ENTRY_ZERO_DS) && defined(LARGE_EXPONENT_ENTRY))
2737:src/xeq.c     **** 	const int flag_D = get_user_flag(NAN_FLAG);
2738:src/xeq.c     **** #else
2739:src/xeq.c     **** 	const int flag_D = 0;
2740:src/xeq.c     **** #endif
2741:src/xeq.c     **** #ifndef SHIFT_EXPONENT
2742:src/xeq.c     **** 	int negative;
2743:src/xeq.c     **** #endif
2744:src/xeq.c     **** 	int emax;
2745:src/xeq.c     **** 
2746:src/xeq.c     **** 	/* Figure out the range limit for the exponent */
2747:src/xeq.c     **** 	if (!large_exp_entry && dbl) {
2748:src/xeq.c     **** 		emax = 999;
2749:src/xeq.c     **** 	}
2750:src/xeq.c     **** 	else {
ARM GAS  /tmp/cc7LeJ71.s 			page 59


2751:src/xeq.c     **** 		int emax_plus, emax_minus;
2752:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
2753:src/xeq.c     **** 
2754:src/xeq.c     **** 		if ((neg_type_dc >= 1 && neg_type_dc <= 9)
2755:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
2756:src/xeq.c     **** 		    || (pos_type_dc >= 1 && pos_type_dc <= 3)
2757:src/xeq.c     **** 		    || (pos_type_ds >= 1 && pos_type_ds <= 3)
2758:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2759:src/xeq.c     **** 		    || (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9)
2760:src/xeq.c     **** 		    || (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9)
2761:src/xeq.c     **** 		    || (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2762:src/xeq.c     **** 		    || (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2763:src/xeq.c     **** #endif
2764:src/xeq.c     **** 		   ) {
2765:src/xeq.c     **** 			// Exponent limits have to be calculated at run-time
2766:src/xeq.c     **** 
2767:src/xeq.c     **** 			for (i = 0; i < CmdLineLength; ++i) {
2768:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
2769:src/xeq.c     **** 				if (Cmdline[i] == 'E' || Cmdline[i] == 'D')
2770:src/xeq.c     **** #else
2771:src/xeq.c     **** 				if (Cmdline[i] == 'E')
2772:src/xeq.c     **** #endif
2773:src/xeq.c     **** 					break;
2774:src/xeq.c     **** 				else if (Cmdline[i] == '.')
2775:src/xeq.c     **** 					dot = i;
2776:src/xeq.c     **** 				else if (Cmdline[i] != '0') {
2777:src/xeq.c     **** 					last_nonzero = i - (dot != 0);
2778:src/xeq.c     **** 					if (first_nonzero < 0)
2779:src/xeq.c     **** 						first_nonzero = i - (dot != 0);
2780:src/xeq.c     **** 				}
2781:src/xeq.c     **** 			}
2782:src/xeq.c     **** 			if (first_nonzero < 0) { // Mantissa is zero.
2783:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DC == -1
2784:src/xeq.c     **** 				const int zero_dc = (get_user_flag(1) << 1) | get_user_flag(0);
2785:src/xeq.c     **** #else
2786:src/xeq.c     **** 				const int zero_dc = SP_EXP_ENTRY_ZERO_DC;
2787:src/xeq.c     **** #endif
2788:src/xeq.c     **** #if SP_EXP_ENTRY_ZERO_DS == -1
2789:src/xeq.c     **** 				const int zero_ds = (get_user_flag(3) << 1) | get_user_flag(2);
2790:src/xeq.c     **** #else
2791:src/xeq.c     **** 				const int zero_ds = SP_EXP_ENTRY_ZERO_DS;
2792:src/xeq.c     **** #endif
2793:src/xeq.c     **** 				const int dp_zero_dc = DP_EXP_ENTRY_ZERO_DC;
2794:src/xeq.c     **** 				const int dp_zero_ds = DP_EXP_ENTRY_ZERO_DS;
2795:src/xeq.c     **** 
2796:src/xeq.c     **** 				if (large_exp_entry && dbl) {
2797:src/xeq.c     **** 					if ((dp_zero_dc == 1 && dp_zero_ds == 1)
2798:src/xeq.c     **** 					    || (dp_zero_dc == 1 && !flag_D)
2799:src/xeq.c     **** 					    || (dp_zero_ds == 1 && flag_D)) {
2800:src/xeq.c     **** 						// Double precision: Allow any exponent
2801:src/xeq.c     **** 						// within configured limits if any.
2802:src/xeq.c     **** 						emax_plus = emax_minus = 9999;
2803:src/xeq.c     **** 						goto check_limits;
2804:src/xeq.c     **** 					}
2805:src/xeq.c     **** 					else if ((dp_zero_dc == 2 && dp_zero_ds == 2)
2806:src/xeq.c     **** 					         || (dp_zero_dc == 2 && !flag_D)
2807:src/xeq.c     **** 					         || (dp_zero_ds == 2 && flag_D)) {
ARM GAS  /tmp/cc7LeJ71.s 			page 60


2808:src/xeq.c     **** 						// Double precision: Allow any exponent
2809:src/xeq.c     **** 						// even outside of configured limits.
2810:src/xeq.c     **** 						emax = 9999;
2811:src/xeq.c     **** 						goto do_not_check_limits;
2812:src/xeq.c     **** 					}
2813:src/xeq.c     **** 					goto zero_has_one_significant_digit;
2814:src/xeq.c     **** 				}
2815:src/xeq.c     **** 				if ((zero_dc == 1 && zero_ds == 1)
2816:src/xeq.c     **** 				    || (zero_dc == 1 && !flag_D)
2817:src/xeq.c     **** 				    || (zero_ds == 1 && flag_D)) {
2818:src/xeq.c     **** 					// Allow any exponent within configured limits if any.
2819:src/xeq.c     **** 					emax_plus = emax_minus = 999;
2820:src/xeq.c     **** 					goto check_limits;
2821:src/xeq.c     **** 				}
2822:src/xeq.c     **** 				else if ((zero_dc == 2 && zero_ds == 2)
2823:src/xeq.c     **** 				         || (zero_dc == 2 && !flag_D)
2824:src/xeq.c     **** 				         || (zero_ds == 2 && flag_D)) {
2825:src/xeq.c     **** 					// Allow any exponent even outside of configured limits.
2826:src/xeq.c     **** 					emax = 999;
2827:src/xeq.c     **** 					goto do_not_check_limits;
2828:src/xeq.c     **** 				}
2829:src/xeq.c     **** 				else {
2830:src/xeq.c     **** zero_has_one_significant_digit:
2831:src/xeq.c     **** 					// Treat zero as if it had one significant digit.
2832:src/xeq.c     **** 					first_nonzero = 0;
2833:src/xeq.c     **** 					dot = 1;
2834:src/xeq.c     **** 				}
2835:src/xeq.c     **** 			}
2836:src/xeq.c     **** 			else if (dot == 0)
2837:src/xeq.c     **** 				dot = i;
2838:src/xeq.c     **** 		}
2839:src/xeq.c     **** 
2840:src/xeq.c     **** 		if (large_exp_entry && dbl) {
2841:src/xeq.c     **** 			// Double precision mode
2842:src/xeq.c     **** 			if (flag_D && dp_neg_type_dc != dp_neg_type_ds) {
2843:src/xeq.c     **** 				if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 3) {
2844:src/xeq.c     **** 					// Don't allow denormal numbers
2845:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2846:src/xeq.c     **** 				}
2847:src/xeq.c     **** 				else if (dp_neg_type_ds >= 4 && dp_neg_type_ds <= 6) {
2848:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2849:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2850:src/xeq.c     **** 				}
2851:src/xeq.c     **** 				else if (dp_neg_type_ds >= 7 && dp_neg_type_ds <= 9) {
2852:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2853:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2854:src/xeq.c     **** 				}
2855:src/xeq.c     **** 				else {
2856:src/xeq.c     **** 					// Fixed limit
2857:src/xeq.c     **** 					emax_minus = dp_neg_lim_ds;
2858:src/xeq.c     **** 				}
2859:src/xeq.c     **** 			}
2860:src/xeq.c     **** 			else {
2861:src/xeq.c     **** 				if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 3) {
2862:src/xeq.c     **** 					// Don't allow denormal numbers
2863:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin - 1 + dot - first_nonzero;
2864:src/xeq.c     **** 				}
ARM GAS  /tmp/cc7LeJ71.s 			page 61


2865:src/xeq.c     **** 				else if (dp_neg_type_dc >= 4 && dp_neg_type_dc <= 6) {
2866:src/xeq.c     **** 					// No entered digit can be lost in denormal numbers
2867:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 - (last_nonzero - dot);
2868:src/xeq.c     **** 				}
2869:src/xeq.c     **** 				else if (dp_neg_type_dc >= 7 && dp_neg_type_dc <= 9) {
2870:src/xeq.c     **** 					// At least one digit preserved in denormal numbers
2871:src/xeq.c     **** 					emax_minus = -DECIMAL128_Emin + DECIMAL128_Pmax - 2 + dot - first_nonzero;
2872:src/xeq.c     **** 				}
2873:src/xeq.c     **** 				else {
2874:src/xeq.c     **** 					// Fixed limit
2875:src/xeq.c     **** 					emax_minus = dp_neg_lim_dc;
2876:src/xeq.c     **** 				}
2877:src/xeq.c     **** 			}
2878:src/xeq.c     **** 
2879:src/xeq.c     **** 			if (flag_D && dp_pos_type_dc != dp_pos_type_ds) {
2880:src/xeq.c     **** 				if (dp_pos_type_ds >= 1 && dp_pos_type_ds <= 3)
2881:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2882:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2883:src/xeq.c     **** 				else
2884:src/xeq.c     **** 					// Fixed limit
2885:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
2886:src/xeq.c     **** 			}
2887:src/xeq.c     **** 			else {
2888:src/xeq.c     **** 				if (dp_pos_type_dc >= 1 && dp_pos_type_dc <= 3)
2889:src/xeq.c     **** 					// Don't allow numbers that overflow to infinity
2890:src/xeq.c     **** 					emax_plus = DECIMAL128_Emax + 1 - (dot - first_nonzero);
2891:src/xeq.c     **** 				else
2892:src/xeq.c     **** 					// Fixed limit
2893:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
2894:src/xeq.c     **** 			}
2895:src/xeq.c     **** 
2896:src/xeq.c     **** 			goto check_limits;
2897:src/xeq.c     **** 		}
2898:src/xeq.c     **** 
2899:src/xeq.c     **** 		if (flag_D && neg_type_dc != neg_type_ds) {
2900:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 3) {
2901:src/xeq.c     **** 				// Don't allow denormal numbers
2902:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2903:src/xeq.c     **** 			}
2904:src/xeq.c     **** 			else if (neg_type_ds >= 4 && neg_type_ds <= 6) {
2905:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2906:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2907:src/xeq.c     **** 			}
2908:src/xeq.c     **** 			else if (neg_type_ds >= 7 && neg_type_ds <= 9) {
2909:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2910:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2911:src/xeq.c     **** 			}
2912:src/xeq.c     **** 			else {
2913:src/xeq.c     **** 				// Fixed limit
2914:src/xeq.c     **** 				emax_minus = neg_lim_ds;
2915:src/xeq.c     **** 			}
2916:src/xeq.c     **** 		}
2917:src/xeq.c     **** 		else {
2918:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 3) {
2919:src/xeq.c     **** 				// Don't allow denormal numbers
2920:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin - 1 + dot - first_nonzero;
2921:src/xeq.c     **** 			}
ARM GAS  /tmp/cc7LeJ71.s 			page 62


2922:src/xeq.c     **** 			else if (neg_type_dc >= 4 && neg_type_dc <= 6) {
2923:src/xeq.c     **** 				// No entered digit can be lost in denormal numbers
2924:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 - (last_nonzero - dot);
2925:src/xeq.c     **** 			}
2926:src/xeq.c     **** 			else if (neg_type_dc >= 7 && neg_type_dc <= 9) {
2927:src/xeq.c     **** 				// At least one digit preserved in denormal numbers
2928:src/xeq.c     **** 				emax_minus = -DECIMAL64_Emin + DECIMAL64_Pmax - 2 + dot - first_nonzero;
2929:src/xeq.c     **** 			}
2930:src/xeq.c     **** 			else {
2931:src/xeq.c     **** 				// Fixed limit
2932:src/xeq.c     **** 				emax_minus = neg_lim_dc;
2933:src/xeq.c     **** 			}
2934:src/xeq.c     **** 		}
2935:src/xeq.c     **** 
2936:src/xeq.c     **** 		if (flag_D && pos_type_dc != pos_type_ds) {
2937:src/xeq.c     **** 			if (pos_type_ds >= 1 && pos_type_ds <= 3)
2938:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2939:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2940:src/xeq.c     **** 			else
2941:src/xeq.c     **** 				// Fixed limit
2942:src/xeq.c     **** 				emax_plus = pos_lim_ds;
2943:src/xeq.c     **** 		}
2944:src/xeq.c     **** 		else {
2945:src/xeq.c     **** 			if (pos_type_dc >= 1 && pos_type_dc <= 3)
2946:src/xeq.c     **** 				// Don't allow numbers that overflow to infinity
2947:src/xeq.c     **** 				emax_plus = DECIMAL64_Emax + 1 - (dot - first_nonzero);
2948:src/xeq.c     **** 			else
2949:src/xeq.c     **** 				// Fixed limit
2950:src/xeq.c     **** 				emax_plus = pos_lim_dc;
2951:src/xeq.c     **** 		}
2952:src/xeq.c     **** 
2953:src/xeq.c     **** check_limits:
2954:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
2955:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
2956:src/xeq.c     **** 		    && (dp_neg_type_ds != neg_type_ds || dp_neg_lim_ds != neg_lim_ds)) {
2957:src/xeq.c     **** 			if (dp_neg_type_ds >= 1 && dp_neg_type_ds <= 9) {
2958:src/xeq.c     **** 				if (dp_neg_type_ds % 3 == 2) { // low limit
2959:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_ds)
2960:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2961:src/xeq.c     **** 				}
2962:src/xeq.c     **** 				else if (dp_neg_type_ds % 3 == 0) { // high limit
2963:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_ds)
2964:src/xeq.c     **** 						emax_minus = dp_neg_lim_ds;
2965:src/xeq.c     **** 				}
2966:src/xeq.c     **** 			}
2967:src/xeq.c     **** 			if (dp_neg_lim_ds < 0 && emax_minus < 0)
2968:src/xeq.c     **** 				emax_minus = 0;
2969:src/xeq.c     **** 		}
2970:src/xeq.c     **** 		else if (large_exp_entry && dbl
2971:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
2972:src/xeq.c     **** 		                         && dp_neg_lim_dc == dp_neg_lim_ds))
2973:src/xeq.c     **** 		         && (dp_neg_type_dc != neg_type_dc || dp_neg_lim_dc != neg_lim_dc)) {
2974:src/xeq.c     **** 			if (dp_neg_type_dc >= 1 && dp_neg_type_dc <= 9) {
2975:src/xeq.c     **** 				if (dp_neg_type_dc % 3 == 2) { // low limit
2976:src/xeq.c     **** 					if (emax_minus > dp_neg_lim_dc)
2977:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2978:src/xeq.c     **** 				}
ARM GAS  /tmp/cc7LeJ71.s 			page 63


2979:src/xeq.c     **** 				else if (dp_neg_type_dc % 3 == 0) { // high limit
2980:src/xeq.c     **** 					if (emax_minus < dp_neg_lim_dc)
2981:src/xeq.c     **** 						emax_minus = dp_neg_lim_dc;
2982:src/xeq.c     **** 				}
2983:src/xeq.c     **** 			}
2984:src/xeq.c     **** 			if (dp_neg_lim_dc < 0 && emax_minus < 0)
2985:src/xeq.c     **** 				emax_minus = 0;
2986:src/xeq.c     **** 		}
2987:src/xeq.c     **** 		else if (flag_D && (neg_type_dc != neg_type_ds || neg_lim_dc != neg_lim_ds)) {
2988:src/xeq.c     **** 			if (neg_type_ds >= 1 && neg_type_ds <= 9) {
2989:src/xeq.c     **** 				if (neg_type_ds % 3 == 2) { // low limit
2990:src/xeq.c     **** 					if (emax_minus > neg_lim_ds)
2991:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2992:src/xeq.c     **** 				}
2993:src/xeq.c     **** 				else if (neg_type_ds % 3 == 0) { // high limit
2994:src/xeq.c     **** 					if (emax_minus < neg_lim_ds)
2995:src/xeq.c     **** 						emax_minus = neg_lim_ds;
2996:src/xeq.c     **** 				}
2997:src/xeq.c     **** 			}
2998:src/xeq.c     **** 			if (neg_lim_ds < 0 && emax_minus < 0)
2999:src/xeq.c     **** 				emax_minus = 0;
3000:src/xeq.c     **** 		}
3001:src/xeq.c     **** 		else {
3002:src/xeq.c     **** 			if (neg_type_dc >= 1 && neg_type_dc <= 9) {
3003:src/xeq.c     **** 				if (neg_type_dc % 3 == 2) { // low limit
3004:src/xeq.c     **** 					if (emax_minus > neg_lim_dc)
3005:src/xeq.c     **** 						emax_minus = neg_lim_dc;
3006:src/xeq.c     **** 				}
3007:src/xeq.c     **** 				else if (neg_type_dc % 3 == 0) { // high limit
3008:src/xeq.c     **** 					if (emax_minus < neg_lim_dc)
3009:src/xeq.c     **** 						emax_minus = neg_lim_dc;
3010:src/xeq.c     **** 				}
3011:src/xeq.c     **** 			}
3012:src/xeq.c     **** 			if (neg_lim_dc < 0 && emax_minus < 0)
3013:src/xeq.c     **** 				emax_minus = 0;
3014:src/xeq.c     **** 		}
3015:src/xeq.c     **** 
3016:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
3017:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
3018:src/xeq.c     **** 		    && (dp_pos_type_ds != pos_type_ds || dp_pos_lim_ds != pos_lim_ds)) {
3019:src/xeq.c     **** 			if (dp_pos_type_ds == 2) { // low limit
3020:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_ds)
3021:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
3022:src/xeq.c     **** 			}
3023:src/xeq.c     **** 			else if (dp_pos_type_ds == 3) { // high limit
3024:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_ds)
3025:src/xeq.c     **** 					emax_plus = dp_pos_lim_ds;
3026:src/xeq.c     **** 			}
3027:src/xeq.c     **** 			if (dp_pos_lim_ds < 0 && emax_plus < 0)
3028:src/xeq.c     **** 				emax_plus = 0;
3029:src/xeq.c     **** 		}
3030:src/xeq.c     **** 		else if (large_exp_entry && dbl
3031:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
3032:src/xeq.c     **** 		                         && dp_pos_lim_dc == dp_pos_lim_ds))
3033:src/xeq.c     **** 		         && (dp_pos_type_dc != pos_type_dc || dp_pos_lim_dc != pos_lim_dc)) {
3034:src/xeq.c     **** 			if (dp_pos_type_dc == 2) { // low limit
3035:src/xeq.c     **** 				if (emax_plus < dp_pos_lim_dc)
ARM GAS  /tmp/cc7LeJ71.s 			page 64


3036:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3037:src/xeq.c     **** 			}
3038:src/xeq.c     **** 			else if (dp_pos_type_dc == 3) { // high limit
3039:src/xeq.c     **** 				if (emax_plus > dp_pos_lim_dc)
3040:src/xeq.c     **** 					emax_plus = dp_pos_lim_dc;
3041:src/xeq.c     **** 			}
3042:src/xeq.c     **** 			if (dp_pos_lim_dc < 0 && emax_plus < 0)
3043:src/xeq.c     **** 				emax_plus = 0;
3044:src/xeq.c     **** 		}
3045:src/xeq.c     **** 		else if (flag_D && (pos_type_dc != pos_type_ds || pos_lim_dc != pos_lim_ds)) {
3046:src/xeq.c     **** 			if (pos_type_ds == 2) { // low limit
3047:src/xeq.c     **** 				if (emax_plus < pos_lim_ds)
3048:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3049:src/xeq.c     **** 			}
3050:src/xeq.c     **** 			else if (pos_type_ds == 3) { // high limit
3051:src/xeq.c     **** 				if (emax_plus > pos_lim_ds)
3052:src/xeq.c     **** 					emax_plus = pos_lim_ds;
3053:src/xeq.c     **** 			}
3054:src/xeq.c     **** 			if (pos_lim_ds < 0 && emax_plus < 0)
3055:src/xeq.c     **** 				emax_plus = 0;
3056:src/xeq.c     **** 		}
3057:src/xeq.c     **** 		else {
3058:src/xeq.c     **** 			if (pos_type_dc == 2) { // low limit
3059:src/xeq.c     **** 				if (emax_plus < pos_lim_dc)
3060:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3061:src/xeq.c     **** 			}
3062:src/xeq.c     **** 			else if (pos_type_dc == 3) { // high limit
3063:src/xeq.c     **** 				if (emax_plus > pos_lim_dc)
3064:src/xeq.c     **** 					emax_plus = pos_lim_dc;
3065:src/xeq.c     **** 			}
3066:src/xeq.c     **** 			if (pos_lim_dc < 0 && emax_plus < 0)
3067:src/xeq.c     **** 				emax_plus = 0;
3068:src/xeq.c     **** 		}
3069:src/xeq.c     **** 
3070:src/xeq.c     **** 		if (large_exp_entry && dbl && flag_D
3071:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
3072:src/xeq.c     **** 		    && (dp_exp_chs_ds != exp_chs_ds)) {
3073:src/xeq.c     **** 			if (dp_exp_chs_ds == 0) {
3074:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3075:src/xeq.c     **** 				if (emax_minus < emax_plus)
3076:src/xeq.c     **** 					emax = emax_minus;
3077:src/xeq.c     **** 				else
3078:src/xeq.c     **** 					emax = emax_plus;
3079:src/xeq.c     **** 			}
3080:src/xeq.c     **** 			else if (dp_exp_chs_ds == 3) {
3081:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3082:src/xeq.c     **** 				if (emax_minus > emax_plus)
3083:src/xeq.c     **** 					emax = emax_minus;
3084:src/xeq.c     **** 				else
3085:src/xeq.c     **** 					emax = emax_plus;
3086:src/xeq.c     **** 			}
3087:src/xeq.c     **** 			else {
3088:src/xeq.c     **** 				if (dp_exp_chs_ds == 2 && !was_digit_entered)
3089:src/xeq.c     **** 					return;
3090:src/xeq.c     **** 				if (*p == 'D')
3091:src/xeq.c     **** 					emax = emax_minus;
3092:src/xeq.c     **** 				else
ARM GAS  /tmp/cc7LeJ71.s 			page 65


3093:src/xeq.c     **** 					emax = emax_plus;
3094:src/xeq.c     **** 			}
3095:src/xeq.c     **** 		}
3096:src/xeq.c     **** 		else if (large_exp_entry && dbl
3097:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
3098:src/xeq.c     **** 		         && (dp_exp_chs_dc != exp_chs_dc)) {
3099:src/xeq.c     **** 			if (dp_exp_chs_dc == 0) {
3100:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3101:src/xeq.c     **** 				if (emax_minus < emax_plus)
3102:src/xeq.c     **** 					emax = emax_minus;
3103:src/xeq.c     **** 				else
3104:src/xeq.c     **** 					emax = emax_plus;
3105:src/xeq.c     **** 			}
3106:src/xeq.c     **** 			else if (dp_exp_chs_dc == 3) {
3107:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3108:src/xeq.c     **** 				if (emax_minus > emax_plus)
3109:src/xeq.c     **** 					emax = emax_minus;
3110:src/xeq.c     **** 				else
3111:src/xeq.c     **** 					emax = emax_plus;
3112:src/xeq.c     **** 			}
3113:src/xeq.c     **** 			else {
3114:src/xeq.c     **** 				if (dp_exp_chs_dc == 2 && !was_digit_entered)
3115:src/xeq.c     **** 					return;
3116:src/xeq.c     **** 				if (*p == 'D')
3117:src/xeq.c     **** 					emax = emax_minus;
3118:src/xeq.c     **** 				else
3119:src/xeq.c     **** 					emax = emax_plus;
3120:src/xeq.c     **** 			}
3121:src/xeq.c     **** 		}
3122:src/xeq.c     **** 		else if (flag_D && exp_chs_dc != exp_chs_ds) {
3123:src/xeq.c     **** 			if (exp_chs_ds == 0) {
3124:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3125:src/xeq.c     **** 				if (emax_minus < emax_plus)
3126:src/xeq.c     **** 					emax = emax_minus;
3127:src/xeq.c     **** 				else
3128:src/xeq.c     **** 					emax = emax_plus;
3129:src/xeq.c     **** 			}
3130:src/xeq.c     **** 			else if (exp_chs_ds == 3) {
3131:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3132:src/xeq.c     **** 				if (emax_minus > emax_plus)
3133:src/xeq.c     **** 					emax = emax_minus;
3134:src/xeq.c     **** 				else
3135:src/xeq.c     **** 					emax = emax_plus;
3136:src/xeq.c     **** 			}
3137:src/xeq.c     **** 			else {
3138:src/xeq.c     **** 				if (exp_chs_ds == 2 && !was_digit_entered)
3139:src/xeq.c     **** 					return;
3140:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3141:src/xeq.c     **** 				if (*p == 'D')
3142:src/xeq.c     **** #else
3143:src/xeq.c     **** 				if (*p == '-')
3144:src/xeq.c     **** #endif
3145:src/xeq.c     **** 					emax = emax_minus;
3146:src/xeq.c     **** 				else
3147:src/xeq.c     **** 					emax = emax_plus;
3148:src/xeq.c     **** 			}
3149:src/xeq.c     **** 		}
ARM GAS  /tmp/cc7LeJ71.s 			page 66


3150:src/xeq.c     **** 		else {
3151:src/xeq.c     **** 			if (exp_chs_dc == 0) {
3152:src/xeq.c     **** 				// Limit exponents so sign change is always legal
3153:src/xeq.c     **** 				if (emax_minus < emax_plus)
3154:src/xeq.c     **** 					emax = emax_minus;
3155:src/xeq.c     **** 				else
3156:src/xeq.c     **** 					emax = emax_plus;
3157:src/xeq.c     **** 			}
3158:src/xeq.c     **** 			else if (exp_chs_dc == 3) {
3159:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
3160:src/xeq.c     **** 				if (emax_minus > emax_plus)
3161:src/xeq.c     **** 					emax = emax_minus;
3162:src/xeq.c     **** 				else
3163:src/xeq.c     **** 					emax = emax_plus;
3164:src/xeq.c     **** 			}
3165:src/xeq.c     **** 			else {
3166:src/xeq.c     **** 				if (exp_chs_dc == 2 && !was_digit_entered)
3167:src/xeq.c     **** 					return;
3168:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3169:src/xeq.c     **** 				if (*p == 'D')
3170:src/xeq.c     **** #else
3171:src/xeq.c     **** 				if (*p == '-')
3172:src/xeq.c     **** #endif
3173:src/xeq.c     **** 					emax = emax_minus;
3174:src/xeq.c     **** 				else
3175:src/xeq.c     **** 					emax = emax_plus;
3176:src/xeq.c     **** 			}
3177:src/xeq.c     **** 		}
3178:src/xeq.c     **** 	}
3179:src/xeq.c     **** 
3180:src/xeq.c     **** do_not_check_limits:
3181:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3182:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3183:src/xeq.c     **** 	p++;
3184:src/xeq.c     **** #  else
3185:src/xeq.c     **** 	if (*p == '-')
3186:src/xeq.c     **** 		p++;
3187:src/xeq.c     **** #  endif
3188:src/xeq.c     **** 	/* Check if the current exponent exceeds the range.
3189:src/xeq.c     **** 	 * If so, shift it back until it doesn't.
3190:src/xeq.c     **** 	 * Also remove leading zeros.
3191:src/xeq.c     **** 	 */
3192:src/xeq.c     **** 	while (s_to_i(p) > emax || *p == '0') {
3193:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
3194:src/xeq.c     **** 			p[i] = p[i + 1];
3195:src/xeq.c     **** 		CmdLineLength--;
3196:src/xeq.c     **** 	}
3197:src/xeq.c     **** #else
3198:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3199:src/xeq.c     **** 	negative = (*p == 'D');
3200:src/xeq.c     **** 	p++;
3201:src/xeq.c     **** #  else
3202:src/xeq.c     **** 	if (*p == '-') {
3203:src/xeq.c     **** 		p++;
3204:src/xeq.c     **** 		negative = 1;
3205:src/xeq.c     **** 	}
3206:src/xeq.c     **** 	else negative = 0;
ARM GAS  /tmp/cc7LeJ71.s 			page 67


3207:src/xeq.c     **** #  endif
3208:src/xeq.c     **** 	// Display a warning if the exponent is out of range.
3209:src/xeq.c     **** 	if ((i = s_to_i(p)) > emax) {
3210:src/xeq.c     **** 		if (was_digit_entered) {
3211:src/xeq.c     **** 			CmdLineLength--;
3212:src/xeq.c     **** 			if (large_exp_entry && dbl ? i > 9999 : i > 999) {
3213:src/xeq.c     **** 				report_warn(ERR_TOO_LONG);
3214:src/xeq.c     **** 				return;
3215:src/xeq.c     **** 			}
3216:src/xeq.c     **** 		}
3217:src/xeq.c     **** #  ifdef LARGE_EXPONENT_ENTRY
3218:src/xeq.c     **** 		else if (('D' | 1) == 'E')
3219:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3220:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3221:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3222:src/xeq.c     **** 		else
3223:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3224:src/xeq.c     **** #  else
3225:src/xeq.c     **** 		else if (negative) {
3226:src/xeq.c     **** 			scopy(p - 1, p);
3227:src/xeq.c     **** 			CmdLineLength--;
3228:src/xeq.c     **** 		}
3229:src/xeq.c     **** 		else {
3230:src/xeq.c     **** 			xcopy(p + 1, p, CMDLINELEN - 1 - CmdLineEex);
3231:src/xeq.c     **** 			*p = '-';
3232:src/xeq.c     **** 			CmdLineLength++;
3233:src/xeq.c     **** 		}
3234:src/xeq.c     **** #  endif
3235:src/xeq.c     **** 		if (negative)
3236:src/xeq.c     **** 			report_warn(ERR_TOO_SMALL);
3237:src/xeq.c     **** 		else
3238:src/xeq.c     **** 			report_warn(ERR_TOO_BIG);
3239:src/xeq.c     **** 	}
3240:src/xeq.c     **** #endif
3241:src/xeq.c     **** }
3242:src/xeq.c     **** 
3243:src/xeq.c     **** /* We've encountered a CHS while entering the command line.
3244:src/xeq.c     ****  */
3245:src/xeq.c     **** static void cmdlinechs(void) {
3246:src/xeq.c     **** 	if (CmdLineEex) {
3247:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3248:src/xeq.c     **** 		// 'D' instead of 'E' indicates a negative exponent.
3249:src/xeq.c     **** 		// Four-digit exponents wouldn't fit into Cmdline if we used 'E-'.
3250:src/xeq.c     **** 		if (('D' | 1) == 'E')
3251:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
3252:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
3253:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'D';
3254:src/xeq.c     **** 		else
3255:src/xeq.c     **** 			Cmdline[CmdLineEex] = 'E';
3256:src/xeq.c     **** #else
3257:src/xeq.c     **** 		const unsigned int pos = CmdLineEex + 1;
3258:src/xeq.c     **** 		if (CmdLineLength <= pos) {
3259:src/xeq.c     **** 			if (CmdLineLength < CMDLINELEN)
3260:src/xeq.c     **** 				append_cmdline('-');
3261:src/xeq.c     **** 		} else if (Cmdline[pos] == '-') {
3262:src/xeq.c     **** 			if (CmdLineLength != pos)
3263:src/xeq.c     **** 				xcopy(Cmdline + pos, Cmdline + pos + 1, CmdLineLength-pos);
ARM GAS  /tmp/cc7LeJ71.s 			page 68


3264:src/xeq.c     **** 			CmdLineLength--;
3265:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3266:src/xeq.c     **** 			xcopy(Cmdline+pos+1, Cmdline+pos, CmdLineLength-pos);
3267:src/xeq.c     **** 			Cmdline[pos] = '-';
3268:src/xeq.c     **** 			CmdLineLength++;
3269:src/xeq.c     **** 		}
3270:src/xeq.c     **** #endif
3271:src/xeq.c     **** #if SP_EXP_ENTRY_CHS_DC == -1 || SP_EXP_ENTRY_CHS_DC == 1 \
3272:src/xeq.c     ****     || SP_EXP_ENTRY_CHS_DS == -1 || SP_EXP_ENTRY_CHS_DS == 1 \
3273:src/xeq.c     ****     || ((DP_EXP_ENTRY_CHS_DC == 1 || DP_EXP_ENTRY_CHS_DS == 1) && defined(LARGE_EXPONENT_ENTRY))
3274:src/xeq.c     **** 		exponent_adjusted(0);
3275:src/xeq.c     **** #endif
3276:src/xeq.c     **** 	} else {
3277:src/xeq.c     **** 		if (Cmdline[0] == '-') {
3278:src/xeq.c     **** 			if (CmdLineLength > 1)
3279:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
3280:src/xeq.c     **** 			CmdLineLength--;
3281:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
3282:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
3283:src/xeq.c     **** 			Cmdline[0] = '-';
3284:src/xeq.c     **** 			CmdLineLength++;
3285:src/xeq.c     **** 		}
3286:src/xeq.c     **** 	}
3287:src/xeq.c     **** }
3288:src/xeq.c     **** 
3289:src/xeq.c     **** /* Execute a tests command
3290:src/xeq.c     ****  */
3291:src/xeq.c     **** static void do_tst(int cmp, const enum tst_op op) {
3292:src/xeq.c     **** 	int a = 0;
3293:src/xeq.c     **** 	int iszero, isneg;
3294:src/xeq.c     **** 
3295:src/xeq.c     **** 	process_cmdline_set_lift();
3296:src/xeq.c     **** 
3297:src/xeq.c     **** 	if (is_intmode()) {
3298:src/xeq.c     **** 		unsigned long long int xv, yv;
3299:src/xeq.c     **** 		int xs, ys;
3300:src/xeq.c     **** 
3301:src/xeq.c     **** 		xv = extract_value(getX_int(), &xs);
3302:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
3303:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
3304:src/xeq.c     **** 			ys = 0;
3305:src/xeq.c     **** 		} else
3306:src/xeq.c     **** 			yv = extract_value(get_reg_n_int(cmp), &ys);
3307:src/xeq.c     **** 
3308:src/xeq.c     **** 		if (xv == 0 && yv == 0)
3309:src/xeq.c     **** 			iszero = 1;
3310:src/xeq.c     **** 		else
3311:src/xeq.c     **** 			iszero = (xv == yv) && (xs == ys);
3312:src/xeq.c     **** 
3313:src/xeq.c     **** 		if (xs == ys) {		// same sign
3314:src/xeq.c     **** 			if (xs)		// both negative
3315:src/xeq.c     **** 				isneg = xv > yv;
3316:src/xeq.c     **** 			else		// both positive
3317:src/xeq.c     **** 				isneg = xv < yv;
3318:src/xeq.c     **** 		} else
3319:src/xeq.c     **** 			isneg = xs;	// opposite signs
3320:src/xeq.c     **** 	} else {
ARM GAS  /tmp/cc7LeJ71.s 			page 69


3321:src/xeq.c     **** 		decNumber t, x, r;
3322:src/xeq.c     **** 
3323:src/xeq.c     **** 		getX(&x);
3324:src/xeq.c     **** 		if (decNumberIsNaN(&x))
3325:src/xeq.c     **** 			goto flse;
3326:src/xeq.c     **** 
3327:src/xeq.c     **** 		getRegister(&t, cmp);
3328:src/xeq.c     **** 		if (decNumberIsNaN(&t))
3329:src/xeq.c     **** 			goto flse;
3330:src/xeq.c     **** 
3331:src/xeq.c     **** 		if (op == TST_APX) {
3332:src/xeq.c     **** 			decNumberRnd(&x, &x);
3333:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
3334:src/xeq.c     **** 				decNumberRnd(&t, &t);
3335:src/xeq.c     **** 		}
3336:src/xeq.c     **** 		dn_compare(&r, &x, &t);
3337:src/xeq.c     **** 		iszero = dn_eq0(&r);
3338:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
3339:src/xeq.c     **** 	}
3340:src/xeq.c     **** 
3341:src/xeq.c     **** 	switch (op) {
3342:src/xeq.c     **** 	case TST_APX:
3343:src/xeq.c     **** 	case TST_EQ:	a = iszero;		break;
3344:src/xeq.c     **** 	case TST_NE:	a = !iszero;		break;
3345:src/xeq.c     **** 	case TST_LT:	a = isneg && !iszero;	break;
3346:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
3347:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
3348:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
3349:src/xeq.c     **** 	default:	a = 0;			break;
3350:src/xeq.c     **** 	}
3351:src/xeq.c     **** 
3352:src/xeq.c     **** flse:	fin_tst(a);
3353:src/xeq.c     **** }
3354:src/xeq.c     **** 
3355:src/xeq.c     **** void check_zero(enum nilop op) {
3356:src/xeq.c     **** 	int neg;
3357:src/xeq.c     **** 	int zero;
3358:src/xeq.c     **** 
3359:src/xeq.c     **** 	if (is_intmode()) {
3360:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
3361:src/xeq.c     **** 		zero = (xv == 0);
3362:src/xeq.c     **** 	} else {
3363:src/xeq.c     **** 		decNumber x;
3364:src/xeq.c     **** 		getX(&x);
3365:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
3366:src/xeq.c     **** 		zero = dn_eq0(&x);
3367:src/xeq.c     **** 	}
3368:src/xeq.c     **** 	if (op == OP_Xeq_pos0)
3369:src/xeq.c     **** 		fin_tst(zero && !neg);
3370:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
3371:src/xeq.c     **** 		fin_tst(zero && neg);
3372:src/xeq.c     **** }
3373:src/xeq.c     **** 
3374:src/xeq.c     **** void cmdtest(unsigned int arg, enum rarg op) {
3375:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
3376:src/xeq.c     **** }
3377:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 70


3378:src/xeq.c     **** static void do_ztst(const decNumber *re, const decNumber *im, enum tst_op op) {
3379:src/xeq.c     **** 	decNumber x, y;
3380:src/xeq.c     **** 
3381:src/xeq.c     **** 	process_cmdline_set_lift();
3382:src/xeq.c     **** 	if (is_intmode()) {
3383:src/xeq.c     **** 		bad_mode_error();
3384:src/xeq.c     **** 		return;
3385:src/xeq.c     **** 	}
3386:src/xeq.c     **** 	getXY(&x, &y);
3387:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
3388:src/xeq.c     **** 		fin_tst(0);
3389:src/xeq.c     **** 		return;
3390:src/xeq.c     **** 	}
3391:src/xeq.c     **** 	fin_tst((op == TST_EQ) == (dn_eq(&x, re) && dn_eq(&y, im)));
3392:src/xeq.c     **** }
3393:src/xeq.c     **** 
3394:src/xeq.c     **** void cmdztest(unsigned int arg, enum rarg op) {
3395:src/xeq.c     **** 	decNumber re, im;
3396:src/xeq.c     **** 	getRegister(&re, arg);
3397:src/xeq.c     **** 	getRegister(&im, arg + 1);
3398:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
3399:src/xeq.c     **** }
3400:src/xeq.c     **** 
3401:src/xeq.c     **** static int incdec(unsigned int arg, int inc) {
3402:src/xeq.c     **** 	if (is_intmode()) {
3403:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3404:src/xeq.c     **** 		int xs;
3405:src/xeq.c     **** 		unsigned long long int xv;
3406:src/xeq.c     **** 
3407:src/xeq.c     **** 		if (inc)
3408:src/xeq.c     **** 			x = intAdd(x, 1LL);
3409:src/xeq.c     **** 		else
3410:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3411:src/xeq.c     **** 		set_reg_n_int(arg, x);
3412:src/xeq.c     **** 
3413:src/xeq.c     **** 		xv = extract_value(x, &xs);
3414:src/xeq.c     **** 		return xv != 0;
3415:src/xeq.c     **** 	} else {
3416:src/xeq.c     **** 		decNumber x, y;
3417:src/xeq.c     **** 
3418:src/xeq.c     **** 		getRegister(&x, arg);
3419:src/xeq.c     **** 		if (inc)
3420:src/xeq.c     **** 			dn_inc(&x);
3421:src/xeq.c     **** 		else
3422:src/xeq.c     **** 			dn_dec(&x);
3423:src/xeq.c     **** 		setRegister(arg, &x);
3424:src/xeq.c     **** 		decNumberTrunc(&y, &x);
3425:src/xeq.c     **** 		return ! dn_eq0(&y);
3426:src/xeq.c     **** 	}
3427:src/xeq.c     **** }
3428:src/xeq.c     **** 
3429:src/xeq.c     **** void cmdlincdec(unsigned int arg, enum rarg op) {
3430:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
3431:src/xeq.c     **** }
3432:src/xeq.c     **** 
3433:src/xeq.c     **** void cmdloopz(unsigned int arg, enum rarg op) {
3434:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
ARM GAS  /tmp/cc7LeJ71.s 			page 71


3435:src/xeq.c     **** }
3436:src/xeq.c     **** 
3437:src/xeq.c     **** void cmdloop(unsigned int arg, enum rarg op) {
3438:src/xeq.c     **** 	if (is_intmode()) {
3439:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
3440:src/xeq.c     **** 		int xs;
3441:src/xeq.c     **** 		unsigned long long int xv;
3442:src/xeq.c     **** 
3443:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE)
3444:src/xeq.c     **** 			x = intAdd(x, 1LL);
3445:src/xeq.c     **** 		else
3446:src/xeq.c     **** 			x = intSubtract(x, 1LL);
3447:src/xeq.c     **** 		set_reg_n_int(arg, x);
3448:src/xeq.c     **** 
3449:src/xeq.c     **** 		xv = extract_value(x, &xs);
3450:src/xeq.c     **** 		if (op == RARG_ISG)
3451:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
3452:src/xeq.c     **** 		else if (op == RARG_DSE)
3453:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
3454:src/xeq.c     **** 		else if (op == RARG_ISE)
3455:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
3456:src/xeq.c     **** 		else // if (op == RARG_DSL)
3457:src/xeq.c     **** 			fin_tst(! (xs != 0 && xv > 0));		// < 0
3458:src/xeq.c     **** 		return;
3459:src/xeq.c     **** 	} else {
3460:src/xeq.c     **** 		decNumber x, i, f, n, u;
3461:src/xeq.c     **** 
3462:src/xeq.c     **** 		getRegister(&x, arg);
3463:src/xeq.c     **** 
3464:src/xeq.c     **** 		// Break the number into the important bits
3465:src/xeq.c     **** 		// nnnnn.fffii
3466:src/xeq.c     **** 		dn_abs(&f, &x);
3467:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
3468:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
3469:src/xeq.c     **** 		if (decNumberIsNegative(&x))
3470:src/xeq.c     **** 			dn_minus(&n, &n);
3471:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
3472:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
3473:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
3474:src/xeq.c     **** 		dn_mul100(&x, &i);
3475:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
3476:src/xeq.c     **** 		if (dn_eq0(&i))
3477:src/xeq.c     **** 			dn_1(&i);
3478:src/xeq.c     **** 
3479:src/xeq.c     **** 		if (op == RARG_ISG || op == RARG_ISE) {
3480:src/xeq.c     **** 			dn_add(&n, &n, &i);
3481:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3482:src/xeq.c     **** 			if (op == RARG_ISE)
3483:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
3484:src/xeq.c     **** 			else
3485:src/xeq.c     **** 				fin_tst(dn_ge0(&x));
3486:src/xeq.c     **** 		} else {
3487:src/xeq.c     **** 			dn_subtract(&n, &n, &i);
3488:src/xeq.c     **** 			dn_compare(&x, &f, &n);
3489:src/xeq.c     **** 			if (op == RARG_DSL)
3490:src/xeq.c     **** 				fin_tst(dn_le0(&x));
3491:src/xeq.c     **** 			else
ARM GAS  /tmp/cc7LeJ71.s 			page 72


3492:src/xeq.c     **** 				fin_tst(dn_lt0(&x));
3493:src/xeq.c     **** 		}
3494:src/xeq.c     **** 
3495:src/xeq.c     **** 		// Finally rebuild the result
3496:src/xeq.c     **** 		if (decNumberIsNegative(&n)) {
3497:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
3498:src/xeq.c     **** 		} else
3499:src/xeq.c     **** 			dn_add(&x, &n, &u);
3500:src/xeq.c     **** 		setRegister(arg, &x);
3501:src/xeq.c     **** 	}
3502:src/xeq.c     **** }
3503:src/xeq.c     **** 
3504:src/xeq.c     **** 
3505:src/xeq.c     **** /* Shift a real number by 10 to the specified power
3506:src/xeq.c     ****  */
3507:src/xeq.c     **** void op_shift_digit(unsigned int n, enum rarg op) {
3508:src/xeq.c     **** 	decNumber x;
3509:src/xeq.c     **** 	int adjust = n;
3510:src/xeq.c     **** 
3511:src/xeq.c     **** 	if (is_intmode()) {
3512:src/xeq.c     **** 		bad_mode_error();
3513:src/xeq.c     **** 		return;
3514:src/xeq.c     **** 	}
3515:src/xeq.c     **** 	getX(&x);
3516:src/xeq.c     **** 	setlastX();
3517:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
3518:src/xeq.c     **** 		return;
3519:src/xeq.c     **** 	if (op == RARG_SRD)
3520:src/xeq.c     **** 		adjust = -adjust;
3521:src/xeq.c     **** 	x.exponent += adjust;
3522:src/xeq.c     **** 	setX(&x);
3523:src/xeq.c     **** }
3524:src/xeq.c     **** 
3525:src/xeq.c     **** 
3526:src/xeq.c     **** /* Return a pointer to the byte with the indicated flag in it.
3527:src/xeq.c     ****  * also return a byte with the relevant bit mask set up.
3528:src/xeq.c     ****  * Also, handle local flags.
3529:src/xeq.c     ****  */
3530:src/xeq.c     **** static unsigned short int *flag_word(int n, unsigned short int *mask) {
 467              		.loc 1 3530 71 is_stmt 1 view -0
 468              		.cfi_startproc
 469              		@ args = 0, pretend = 0, frame = 0
 470              		@ frame_needed = 0, uses_anonymous_args = 0
 471              		@ link register save eliminated.
3531:src/xeq.c     **** 	unsigned short int *p;
 472              		.loc 1 3531 2 view .LVU143
3532:src/xeq.c     **** 
3533:src/xeq.c     **** 	if (n >= LOCAL_FLAG_BASE) {
 473              		.loc 1 3533 2 view .LVU144
 474              		.loc 1 3533 5 is_stmt 0 view .LVU145
 475 0000 6F28     		cmp	r0, #111
3530:src/xeq.c     **** 	unsigned short int *p;
 476              		.loc 1 3530 71 view .LVU146
 477 0002 10B4     		push	{r4}
 478              		.cfi_def_cfa_offset 4
 479              		.cfi_offset 4, -4
 480              		.loc 1 3533 5 view .LVU147
ARM GAS  /tmp/cc7LeJ71.s 			page 73


 481 0004 2CDD     		ble	.L42
3534:src/xeq.c     **** 		n -= LOCAL_FLAG_BASE;
 482              		.loc 1 3534 3 is_stmt 1 view .LVU148
 483              		.loc 1 3534 5 is_stmt 0 view .LVU149
 484 0006 7038     		subs	r0, r0, #112
 485              	.LVL42:
3535:src/xeq.c     **** 		if (n > XROM_SYSTEM_FLAG_BASE && XromFlags.xIN) {
 486              		.loc 1 3535 3 is_stmt 1 view .LVU150
 487              		.loc 1 3535 6 is_stmt 0 view .LVU151
 488 0008 0828     		cmp	r0, #8
 489 000a 04DD     		ble	.L43
 490              		.loc 1 3535 33 discriminator 1 view .LVU152
 491 000c 194B     		ldr	r3, .L54
 492 000e 93F90120 		ldrsb	r2, [r3, #1]
 493 0012 002A     		cmp	r2, #0
 494 0014 18DB     		blt	.L44
 495              	.L43:
3536:src/xeq.c     **** 			// XROM special
3537:src/xeq.c     **** 			p = &XromFlagWord;
3538:src/xeq.c     **** 		}
3539:src/xeq.c     **** 		else if (LocalRegs & 1) {
 496              		.loc 1 3539 8 is_stmt 1 view .LVU153
 497              		.loc 1 3539 12 is_stmt 0 view .LVU154
 498 0016 184B     		ldr	r3, .L54+4
 499 0018 1B68     		ldr	r3, [r3]
 500 001a B3F8DE37 		ldrh	r3, [r3, #2014]
 501 001e 43F34A12 		sbfx	r2, r3, #5, #11
 502              		.loc 1 3539 11 view .LVU155
 503 0022 13F0200F 		tst	r3, #32
3540:src/xeq.c     **** 			// Odd frame: flags are at end of frame
3541:src/xeq.c     **** 			p = RetStk + LocalRegs + local_levels() - 1;
 504              		.loc 1 3541 44 view .LVU156
 505 0026 154B     		ldr	r3, .L54+8
 506 0028 1B68     		ldr	r3, [r3]
3539:src/xeq.c     **** 			// Odd frame: flags are at end of frame
 507              		.loc 1 3539 11 view .LVU157
 508 002a 1ED0     		beq	.L45
 509              		.loc 1 3541 4 is_stmt 1 view .LVU158
 510              	.LBB1331:
 511              	.LBI1331:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 512              		.loc 1 217 5 view .LVU159
 513              	.LBB1332:
 218:src/xeq.c     **** }
 514              		.loc 1 218 2 view .LVU160
 218:src/xeq.c     **** }
 515              		.loc 1 218 57 is_stmt 0 view .LVU161
 516 002c 002A     		cmp	r2, #0
 517 002e B8BF     		it	lt
 518 0030 33F81240 		ldrhlt	r4, [r3, r2, lsl #1]
 519              	.LBE1332:
 520              	.LBE1331:
 521              		.loc 1 3541 44 view .LVU162
 522 0034 02F10042 		add	r2, r2, #-2147483648
 523 0038 B4BF     		ite	lt
 524 003a C4F30B04 		ubfxlt	r4, r4, #0, #12
 525              	.LBB1334:
ARM GAS  /tmp/cc7LeJ71.s 			page 74


 526              	.LBB1333:
 527 003e 0024     		movge	r4, #0
 528              	.LBE1333:
 529              	.LBE1334:
 530 0040 013A     		subs	r2, r2, #1
 531 0042 2244     		add	r2, r2, r4
 532              		.loc 1 3541 6 view .LVU163
 533 0044 03EB4203 		add	r3, r3, r2, lsl #1
 534              	.LVL43:
 535              	.L44:
3542:src/xeq.c     **** 		}
3543:src/xeq.c     **** 		else {
3544:src/xeq.c     **** 			// Even frame: Flags are at beginning of frame
3545:src/xeq.c     **** 			p = RetStk + LocalRegs + 1;
3546:src/xeq.c     **** 		}
3547:src/xeq.c     **** 	}
3548:src/xeq.c     **** 	else
3549:src/xeq.c     **** 		p = UserFlags;
3550:src/xeq.c     **** 
3551:src/xeq.c     **** 	if (mask != NULL)
 536              		.loc 1 3551 2 is_stmt 1 view .LVU164
 537              		.loc 1 3551 5 is_stmt 0 view .LVU165
 538 0048 21B1     		cbz	r1, .L47
3552:src/xeq.c     **** 		*mask = 1 << (n & 15);
 539              		.loc 1 3552 3 is_stmt 1 view .LVU166
 540              		.loc 1 3552 19 is_stmt 0 view .LVU167
 541 004a 00F00F04 		and	r4, r0, #15
 542              		.loc 1 3552 13 view .LVU168
 543 004e 0122     		movs	r2, #1
 544 0050 A240     		lsls	r2, r2, r4
 545              		.loc 1 3552 9 view .LVU169
 546 0052 0A80     		strh	r2, [r1]	@ movhi
 547              	.L47:
3553:src/xeq.c     **** 	return p + (n >> 4);
 548              		.loc 1 3553 2 is_stmt 1 view .LVU170
 549              		.loc 1 3553 16 is_stmt 0 view .LVU171
 550 0054 0011     		asrs	r0, r0, #4
 551              	.LVL44:
3554:src/xeq.c     **** }
 552              		.loc 1 3554 1 view .LVU172
 553 0056 03EB4000 		add	r0, r3, r0, lsl #1
 554 005a 5DF8044B 		ldr	r4, [sp], #4
 555              		.cfi_remember_state
 556              		.cfi_restore 4
 557              		.cfi_def_cfa_offset 0
 558 005e 7047     		bx	lr
 559              	.LVL45:
 560              	.L42:
 561              		.cfi_restore_state
3549:src/xeq.c     **** 
 562              		.loc 1 3549 3 is_stmt 1 view .LVU173
3549:src/xeq.c     **** 
 563              		.loc 1 3549 7 is_stmt 0 view .LVU174
 564 0060 054B     		ldr	r3, .L54+4
3549:src/xeq.c     **** 
 565              		.loc 1 3549 5 view .LVU175
 566 0062 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc7LeJ71.s 			page 75


 567 0064 03F5FE63 		add	r3, r3, #2032
 568              	.LVL46:
3549:src/xeq.c     **** 
 569              		.loc 1 3549 5 view .LVU176
 570 0068 EEE7     		b	.L44
 571              	.LVL47:
 572              	.L45:
3545:src/xeq.c     **** 		}
 573              		.loc 1 3545 4 is_stmt 1 view .LVU177
3545:src/xeq.c     **** 		}
 574              		.loc 1 3545 27 is_stmt 0 view .LVU178
 575 006a 0132     		adds	r2, r2, #1
3545:src/xeq.c     **** 		}
 576              		.loc 1 3545 6 view .LVU179
 577 006c 03EB4203 		add	r3, r3, r2, lsl #1
 578              	.LVL48:
3545:src/xeq.c     **** 		}
 579              		.loc 1 3545 6 view .LVU180
 580 0070 EAE7     		b	.L44
 581              	.L55:
 582 0072 00BF     		.align	2
 583              	.L54:
 584 0074 00000000 		.word	XromParams
 585 0078 00000000 		.word	main_ram
 586 007c 00000000 		.word	RetStk
 587              		.cfi_endproc
 588              	.LFE198:
 590              		.section	.text.set_zero,"ax",%progbits
 591              		.align	1
 592              		.p2align 2,,3
 593              		.syntax unified
 594              		.thumb
 595              		.thumb_func
 596              		.fpu fpv4-sp-d16
 598              	set_zero:
 599              	.LVL49:
 600              	.LFB106:
1546:src/xeq.c     **** 	zero_regs(x, 1);
 601              		.loc 1 1546 35 is_stmt 1 view -0
 602              		.cfi_startproc
 603              		@ args = 0, pretend = 0, frame = 0
 604              		@ frame_needed = 0, uses_anonymous_args = 0
 605              		@ link register save eliminated.
1547:src/xeq.c     **** }
 606              		.loc 1 1547 2 view .LVU182
 607              	.LBB1335:
 608              	.LBI1335:
1518:src/xeq.c     **** #if 0
 609              		.loc 1 1518 6 view .LVU183
 610              	.LBB1336:
1533:src/xeq.c     **** #endif
 611              		.loc 1 1533 2 view .LVU184
 612              	.LBB1337:
 613              	.LBI1337:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 614              		.loc 1 1118 5 view .LVU185
 615              	.LBB1338:
ARM GAS  /tmp/cc7LeJ71.s 			page 76


1119:src/xeq.c     **** }
 616              		.loc 1 1119 2 view .LVU186
1119:src/xeq.c     **** }
 617              		.loc 1 1119 24 is_stmt 0 view .LVU187
 618 0000 074B     		ldr	r3, .L57
 619 0002 1B68     		ldr	r3, [r3]
 620 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 621 0008 44F20102 		movw	r2, #16385
 622 000c 1A40     		ands	r2, r2, r3
 623              	.LBE1338:
 624              	.LBE1337:
1533:src/xeq.c     **** #endif
 625              		.loc 1 1533 2 view .LVU188
 626 000e B2F5804F 		cmp	r2, #16384
 627 0012 0CBF     		ite	eq
 628 0014 1022     		moveq	r2, #16
 629 0016 0822     		movne	r2, #8
 630 0018 0021     		movs	r1, #0
 631 001a FFF7FEBF 		b	xset
 632              	.LVL50:
 633              	.L58:
1533:src/xeq.c     **** #endif
 634              		.loc 1 1533 2 view .LVU189
 635 001e 00BF     		.align	2
 636              	.L57:
 637 0020 00000000 		.word	main_ram
 638              	.LBE1336:
 639              	.LBE1335:
 640              		.cfi_endproc
 641              	.LFE106:
 643              		.section	.text.intResult,"ax",%progbits
 644              		.align	1
 645              		.p2align 2,,3
 646              		.syntax unified
 647              		.thumb
 648              		.thumb_func
 649              		.fpu fpv4-sp-d16
 651              	intResult:
 652              	.LVL51:
 653              	.LFB239:
3555:src/xeq.c     **** 
3556:src/xeq.c     **** int get_user_flag(int n) {
3557:src/xeq.c     **** 	unsigned short mask;
3558:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
3559:src/xeq.c     **** 
3560:src/xeq.c     **** 	return (*f & mask)? 1 : 0;
3561:src/xeq.c     **** }
3562:src/xeq.c     **** 
3563:src/xeq.c     **** void put_user_flag(int n, int f) {
3564:src/xeq.c     **** 	if (f)	set_user_flag(n);
3565:src/xeq.c     **** 	else	clr_user_flag(n);
3566:src/xeq.c     **** }
3567:src/xeq.c     **** 
3568:src/xeq.c     **** #ifndef set_user_flag
3569:src/xeq.c     **** void set_user_flag(int n) {
3570:src/xeq.c     **** 	unsigned short mask;
3571:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
ARM GAS  /tmp/cc7LeJ71.s 			page 77


3572:src/xeq.c     **** 
3573:src/xeq.c     **** 	*f |= mask;
3574:src/xeq.c     **** }
3575:src/xeq.c     **** 
3576:src/xeq.c     **** void clr_user_flag(int n) {
3577:src/xeq.c     **** 	unsigned short mask;
3578:src/xeq.c     **** 	unsigned short *const f = flag_word(n, &mask);
3579:src/xeq.c     **** 
3580:src/xeq.c     **** 	*f &= ~mask;
3581:src/xeq.c     **** }
3582:src/xeq.c     **** #endif
3583:src/xeq.c     **** 
3584:src/xeq.c     **** void cmdflag(unsigned int arg, enum rarg op) {
3585:src/xeq.c     **** 	unsigned short mask;
3586:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
3587:src/xeq.c     **** 	int flg = *f & mask;
3588:src/xeq.c     **** 
3589:src/xeq.c     **** 	switch (op) {
3590:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
3591:src/xeq.c     **** 	case RARG_CF:	flg = 0;			   break;
3592:src/xeq.c     **** 	case RARG_FF:	flg = flg? 0 : 1;		   break;
3593:src/xeq.c     **** 
3594:src/xeq.c     **** 	case RARG_FS:	fin_tst(flg);			   return;
3595:src/xeq.c     **** 	case RARG_FC:	fin_tst(! flg);			   return;
3596:src/xeq.c     **** 
3597:src/xeq.c     **** 	case RARG_FSC:	fin_tst(flg); flg = 0;		   break;
3598:src/xeq.c     **** 	case RARG_FSS:	fin_tst(flg); flg = 1;		   break;
3599:src/xeq.c     **** 	case RARG_FSF:	fin_tst(flg); flg = flg ? 0 : 1;   break;
3600:src/xeq.c     **** 
3601:src/xeq.c     **** 	case RARG_FCC:	fin_tst(! flg);	flg = 0;	   break;
3602:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
3603:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
3604:src/xeq.c     **** 
3605:src/xeq.c     **** 	default:
3606:src/xeq.c     **** 		return;
3607:src/xeq.c     **** 	}
3608:src/xeq.c     **** 
3609:src/xeq.c     **** 	// And write the value back
3610:src/xeq.c     **** 	if (flg)
3611:src/xeq.c     **** 		*f |= mask;
3612:src/xeq.c     **** 	else
3613:src/xeq.c     **** 		*f &= ~mask;
3614:src/xeq.c     **** 
3615:src/xeq.c     **** 	if ( arg == A_FLAG ) {
3616:src/xeq.c     **** 		dot( BIG_EQ, flg );
3617:src/xeq.c     **** 		finish_display(); // BIG_EQ
3618:src/xeq.c     **** 	}
3619:src/xeq.c     **** }
3620:src/xeq.c     **** 
3621:src/xeq.c     **** /* Reset all flags to off/false
3622:src/xeq.c     ****  */
3623:src/xeq.c     **** void clrflags(enum nilop op) {
3624:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
3625:src/xeq.c     **** 	if (LocalRegs < 0) {
3626:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
3627:src/xeq.c     **** 	}
3628:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 78


3629:src/xeq.c     **** 
3630:src/xeq.c     **** 
3631:src/xeq.c     **** /* Integer word size
3632:src/xeq.c     ****  */
3633:src/xeq.c     **** void intws(unsigned int arg, enum rarg op) {
3634:src/xeq.c     **** 	if (is_intmode()) {
3635:src/xeq.c     **** 		int i, ss = stack_size();
3636:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
3637:src/xeq.c     **** 		long long int v;
3638:src/xeq.c     **** 
3639:src/xeq.c     **** 		for (i=0; i<ss; i++) {
3640:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
3641:src/xeq.c     **** 			UState.int_len = arg;
3642:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
3643:src/xeq.c     **** 			UState.int_len = oldlen;
3644:src/xeq.c     **** 		}
3645:src/xeq.c     **** 		v = mask_value(get_reg_n_int(regL_idx));
3646:src/xeq.c     **** 		UState.int_len = arg;
3647:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
3648:src/xeq.c     **** 	} else
3649:src/xeq.c     **** 	    UState.int_len = arg;
3650:src/xeq.c     **** }
3651:src/xeq.c     **** 
3652:src/xeq.c     **** 
3653:src/xeq.c     **** /* Convert from a real to a fraction
3654:src/xeq.c     ****  */
3655:src/xeq.c     **** 
3656:src/xeq.c     **** void get_maxdenom(decNumber *d) {
3657:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
3658:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
3659:src/xeq.c     **** }
3660:src/xeq.c     **** 
3661:src/xeq.c     **** void op_2frac(enum nilop op) {
3662:src/xeq.c     **** 	decNumber z, n, d, t;
3663:src/xeq.c     **** 
3664:src/xeq.c     **** 	if (UState.intm) {
3665:src/xeq.c     **** 		setX_int(1);
3666:src/xeq.c     **** 		return;
3667:src/xeq.c     **** 	}
3668:src/xeq.c     **** 
3669:src/xeq.c     **** 	getY(&z);			// Stack has been lifted already
3670:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
3671:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
3672:src/xeq.c     **** 	if (State2.runmode) {
3673:src/xeq.c     **** 		dn_divide(&t, &n, &d);
3674:src/xeq.c     **** 		dn_compare(&n, &t, &z);
3675:src/xeq.c     **** 		if (dn_eq0(&n))
3676:src/xeq.c     **** 			DispMsg = "y/x =";
3677:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
3678:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
3679:src/xeq.c     **** 			DispMsg = "y/x \007\344<";
3680:src/xeq.c     **** 		else
3681:src/xeq.c     **** 			DispMsg = "y/x \007\344>";
3682:src/xeq.c     **** #else
3683:src/xeq.c     **** 			DispMsg = "y/x <";
3684:src/xeq.c     **** 		else
3685:src/xeq.c     **** 			DispMsg = "y/x >";
ARM GAS  /tmp/cc7LeJ71.s 			page 79


3686:src/xeq.c     **** #endif
3687:src/xeq.c     **** 	}
3688:src/xeq.c     **** }
3689:src/xeq.c     **** 
3690:src/xeq.c     **** void op_fracdenom(enum nilop op) {
3691:src/xeq.c     **** 	int s;
3692:src/xeq.c     **** 	unsigned long long int i;
3693:src/xeq.c     **** 
3694:src/xeq.c     **** 	i = getX_int_sgn(&s);
3695:src/xeq.c     **** 	if (i > 9999)
3696:src/xeq.c     **** 		UState.denom_max = 0;
3697:src/xeq.c     **** 	else if (i != 1)
3698:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
3699:src/xeq.c     **** 	else {
3700:src/xeq.c     **** 		setlastX();
3701:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
3702:src/xeq.c     **** 	}
3703:src/xeq.c     **** }
3704:src/xeq.c     **** 
3705:src/xeq.c     **** 
3706:src/xeq.c     **** /*  Switching from an integer mode to real mode
3707:src/xeq.c     ****  *  We convert the stack and LastX 
3708:src/xeq.c     ****  */
3709:src/xeq.c     **** static const unsigned short int StackRegMask[] = { 0x10f, 0x1ff };
3710:src/xeq.c     **** 
3711:src/xeq.c     **** void op_float(enum nilop op) {
3712:src/xeq.c     **** 
3713:src/xeq.c     **** 	if (is_intmode()) {
3714:src/xeq.c     **** 		int i;
3715:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
3716:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
3717:src/xeq.c     **** 			if (mask & 1) {
3718:src/xeq.c     **** 				// register belongs to stack
3719:src/xeq.c     **** 				register_from_int(i, i, op == OP_FLOAT_XIN);
3720:src/xeq.c     **** 			}
3721:src/xeq.c     **** 			else if (is_dblmode()) {
3722:src/xeq.c     **** 				// expand the other registers which have been left
3723:src/xeq.c     **** 				// in decimal64 format by the integer mode switch
3724:src/xeq.c     **** 				packed128_from_packed(&(get_reg_n(i)->d), Regs + i);
3725:src/xeq.c     **** 			}
3726:src/xeq.c     **** 		}
3727:src/xeq.c     **** 	}
3728:src/xeq.c     **** 	if (op != OP_FLOAT_XIN && op != OP_FLOAT_RCLM) {
3729:src/xeq.c     **** 		UState.fract = 0;
3730:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
3731:src/xeq.c     **** 	}
3732:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
3733:src/xeq.c     **** }
3734:src/xeq.c     **** 
3735:src/xeq.c     **** /*  Switch to integer mode.
3736:src/xeq.c     ****  *  We convert the stack and LastX
3737:src/xeq.c     ****  */
3738:src/xeq.c     **** static void switch_to_int(void) {
3739:src/xeq.c     **** 	int i;
3740:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
3741:src/xeq.c     **** 	const int dbl = is_dblmode();
3742:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 80


3743:src/xeq.c     **** 	for (i = regK_idx; i >= regX_idx; --i, mask <<= 1) {
3744:src/xeq.c     **** 		if (mask & 0x800) {
3745:src/xeq.c     **** 			// register belongs to stack
3746:src/xeq.c     **** 			int_from_register(i, i);
3747:src/xeq.c     **** 		}
3748:src/xeq.c     **** 		else if (dbl) {
3749:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
3750:src/xeq.c     **** 			packed_from_packed128(Regs + i, &(get_reg_n(i)->d));
3751:src/xeq.c     **** 		}
3752:src/xeq.c     **** 	}
3753:src/xeq.c     **** }
3754:src/xeq.c     **** 
3755:src/xeq.c     **** static void set_base(unsigned int b) {
3756:src/xeq.c     **** 	UState.int_base = b - 1;
3757:src/xeq.c     **** 	if (!is_intmode())
3758:src/xeq.c     **** 		switch_to_int();
3759:src/xeq.c     **** }
3760:src/xeq.c     **** 
3761:src/xeq.c     **** void set_int_base(unsigned int arg, enum rarg op) {
3762:src/xeq.c     **** 	if (arg < 2) {
3763:src/xeq.c     **** 		if (arg == 0)
3764:src/xeq.c     **** 			op_float(OP_FLOAT);
3765:src/xeq.c     **** 		else
3766:src/xeq.c     **** 			op_fract(OP_FRACT);
3767:src/xeq.c     **** 	} else
3768:src/xeq.c     **** 		set_base(arg);
3769:src/xeq.c     **** }
3770:src/xeq.c     **** 
3771:src/xeq.c     **** 
3772:src/xeq.c     **** void op_fract(enum nilop op) {
3773:src/xeq.c     **** 	op_float(OP_FLOAT);
3774:src/xeq.c     **** 	UState.fract = 1;
3775:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
3776:src/xeq.c     **** 		UState.improperfrac = 1;
3777:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
3778:src/xeq.c     **** 		UState.improperfrac = 0;
3779:src/xeq.c     **** }
3780:src/xeq.c     **** 
3781:src/xeq.c     **** #ifdef INCLUDE_USER_MODE
3782:src/xeq.c     **** /* Save and restore user state.
3783:src/xeq.c     ****  */
3784:src/xeq.c     **** void cmdsavem(unsigned int arg, enum rarg op) {
3785:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
3786:src/xeq.c     **** }
3787:src/xeq.c     **** 
3788:src/xeq.c     **** void cmdrestm(unsigned int arg, enum rarg op) {
3789:src/xeq.c     **** 	const int dbl = is_dblmode();
3790:src/xeq.c     **** 	const int intm = is_intmode();
3791:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
3792:src/xeq.c     **** 
3793:src/xeq.c     **** 	// Fix things
3794:src/xeq.c     **** #ifndef DM42
3795:src/xeq.c     **** 	if ( UState.contrast == 0 )
3796:src/xeq.c     **** 		UState.contrast = 6;
3797:src/xeq.c     **** #endif
3798:src/xeq.c     **** 	if (intm != is_intmode()) {
3799:src/xeq.c     **** 		// Switch back to decimal or integer mode
ARM GAS  /tmp/cc7LeJ71.s 			page 81


3800:src/xeq.c     **** 		UState.intm = intm;
3801:src/xeq.c     **** 		if (intm)
3802:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
3803:src/xeq.c     **** 		else
3804:src/xeq.c     **** 			switch_to_int();
3805:src/xeq.c     **** 	}
3806:src/xeq.c     **** 	if (! is_intmode() && dbl != is_dblmode()) {
3807:src/xeq.c     **** 		// Switch back to double/single precision
3808:src/xeq.c     **** 		UState.mode_double = dbl;
3809:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
3810:src/xeq.c     **** 	}
3811:src/xeq.c     **** }
3812:src/xeq.c     **** #endif
3813:src/xeq.c     **** 
3814:src/xeq.c     **** /* Process a single digit.
3815:src/xeq.c     ****  */
3816:src/xeq.c     **** #if 0 // unused
3817:src/xeq.c     **** static int is_digit(const char c) {
3818:src/xeq.c     **** 	if (c >= '0' && c <= '9')
3819:src/xeq.c     **** 		return 1;
3820:src/xeq.c     **** 	return 0;
3821:src/xeq.c     **** }
3822:src/xeq.c     **** 
3823:src/xeq.c     **** static int is_xdigit(const char c) {
3824:src/xeq.c     **** 	if (is_digit(c) || (c >= 'A' && c <= 'F'))
3825:src/xeq.c     **** 		return 1;
3826:src/xeq.c     **** 	return 0;
3827:src/xeq.c     **** }
3828:src/xeq.c     **** #endif
3829:src/xeq.c     **** 
3830:src/xeq.c     **** static void digit(unsigned int c) {
3831:src/xeq.c     **** 	const int intm = is_intmode();
3832:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
3833:src/xeq.c     **** 
3834:src/xeq.c     **** 	if (Cmdline[0] == '-')
3835:src/xeq.c     **** 		lim++;
3836:src/xeq.c     **** 	if (intm) {
3837:src/xeq.c     **** 		if (c >= int_base()) {
3838:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3839:src/xeq.c     **** 			return;
3840:src/xeq.c     **** 		}
3841:src/xeq.c     **** 	} else {
3842:src/xeq.c     **** 		if (c >= 10) {
3843:src/xeq.c     **** 			report_warn(ERR_DIGIT);
3844:src/xeq.c     **** 			return;
3845:src/xeq.c     **** 		}
3846:src/xeq.c     **** 
3847:src/xeq.c     **** 		if (CmdLineEex) {
3848:src/xeq.c     **** 			lim = CMDLINELEN;
3849:src/xeq.c     **** #ifdef SHIFT_EXPONENT
3850:src/xeq.c     **** 			if (CmdLineLength >= lim) {
3851:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
3852:src/xeq.c     **** 
3853:src/xeq.c     **** 				if (*p == '-')
3854:src/xeq.c     **** 					p++;
3855:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
3856:src/xeq.c     **** 					p[0] = p[1];
ARM GAS  /tmp/cc7LeJ71.s 			page 82


3857:src/xeq.c     **** 					p++;
3858:src/xeq.c     **** 				}
3859:src/xeq.c     **** 				CmdLineLength--;
3860:src/xeq.c     **** 			}
3861:src/xeq.c     **** #endif
3862:src/xeq.c     **** 		}
3863:src/xeq.c     **** 		else {
3864:src/xeq.c     **** 			lim += CmdLineDot;
3865:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
3866:src/xeq.c     **** 			if (CmdLineDot >= 2) {
3867:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
3868:src/xeq.c     **** 				// Make space for the minus sign
3869:src/xeq.c     **** 				lim = CMDLINELEN - (Cmdline[0] != '-');
3870:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3871:src/xeq.c     **** 				lim += 1 + (find_char(Cmdline, '.')[1] == '.');
3872:src/xeq.c     **** #  else
3873:src/xeq.c     **** 				lim++;
3874:src/xeq.c     **** #  endif
3875:src/xeq.c     **** 			}
3876:src/xeq.c     **** #endif
3877:src/xeq.c     **** 		}
3878:src/xeq.c     **** 	}
3879:src/xeq.c     **** 	if (CmdLineLength >= lim
3880:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
3881:src/xeq.c     **** 		report_warn(ERR_TOO_LONG);
3882:src/xeq.c     **** 		return;
3883:src/xeq.c     **** 	}
3884:src/xeq.c     **** 
3885:src/xeq.c     **** 	if (c >= 10)
3886:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
3887:src/xeq.c     **** 	else {
3888:src/xeq.c     **** 		// Leading zeros in the exponent aren't visible to the user,
3889:src/xeq.c     **** 		// and they're removed automatically if digits are shifted,
3890:src/xeq.c     **** 		// so it's more consistent if they can't be entered, either.
3891:src/xeq.c     **** 		if (c == 0 && CmdLineEex) {
3892:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
3893:src/xeq.c     **** 				return;
3894:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
3895:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'D')
3896:src/xeq.c     **** 				return;
3897:src/xeq.c     **** #else
3898:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == '-')
3899:src/xeq.c     **** 				return;
3900:src/xeq.c     **** #endif
3901:src/xeq.c     **** 		}
3902:src/xeq.c     **** 
3903:src/xeq.c     **** 		append_cmdline(c + '0');
3904:src/xeq.c     **** 
3905:src/xeq.c     **** 		if (CmdLineEex)
3906:src/xeq.c     **** 			exponent_adjusted(1);
3907:src/xeq.c     **** 	}
3908:src/xeq.c     **** }
3909:src/xeq.c     **** 
3910:src/xeq.c     **** 
3911:src/xeq.c     **** void set_entry() {
3912:src/xeq.c     **** 	if (!Running && !XromRunning)
3913:src/xeq.c     **** 		State.entryp = 1;
ARM GAS  /tmp/cc7LeJ71.s 			page 83


3914:src/xeq.c     **** }
3915:src/xeq.c     **** 
3916:src/xeq.c     **** 
3917:src/xeq.c     **** /* Decode and process the specials.  These are niladic functions and
3918:src/xeq.c     ****  * commands with non-standard stack operation.
3919:src/xeq.c     ****  */
3920:src/xeq.c     **** static void specials(const opcode op) {
3921:src/xeq.c     **** 	int opm = argKIND(op);
3922:src/xeq.c     **** 
3923:src/xeq.c     **** 	switch (opm) {
3924:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
3925:src/xeq.c     **** 	case OP_3:	case OP_4:	case OP_5:
3926:src/xeq.c     **** 	case OP_6:	case OP_7:	case OP_8:
3927:src/xeq.c     **** 	case OP_9:	case OP_A:	case OP_B:
3928:src/xeq.c     **** 	case OP_C:	case OP_D:	case OP_E:
3929:src/xeq.c     **** 	case OP_F:
3930:src/xeq.c     **** 		digit(opm - OP_0);
3931:src/xeq.c     **** 		break;
3932:src/xeq.c     **** 
3933:src/xeq.c     **** 	case OP_DOT:
3934:src/xeq.c     **** 		if (is_intmode())
3935:src/xeq.c     **** 			break;
3936:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
3937:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 13 + CmdLineDot) {
3938:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
3939:src/xeq.c     **** #else
3940:src/xeq.c     **** #  if defined(PRETTY_FRACTION_ENTRY)
3941:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + 2*CmdLineDot) {
3942:src/xeq.c     **** #  else
3943:src/xeq.c     **** 		if (CmdLineDot < 2 && !CmdLineEex && CmdLineLength < 12 + CmdLineDot) {
3944:src/xeq.c     **** #  endif
3945:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '.'
3946:src/xeq.c     ****                             || Cmdline[CmdLineLength-1] == '-')
3947:src/xeq.c     **** #endif
3948:src/xeq.c     **** 				digit(0);
3949:src/xeq.c     **** 			CmdLineDot++;
3950:src/xeq.c     **** 			append_cmdline('.');
3951:src/xeq.c     **** 		}
3952:src/xeq.c     **** 		break;
3953:src/xeq.c     **** 
3954:src/xeq.c     **** 	case OP_EEX:
3955:src/xeq.c     **** 		if (is_intmode())
3956:src/xeq.c     **** 			break;
3957:src/xeq.c     **** 		else {
3958:src/xeq.c     **** #if INCLUDE_EEX_PI == 2
3959:src/xeq.c     **** 			const int eex_pi = 1;
3960:src/xeq.c     **** #elif INCLUDE_EEX_PI == 1
3961:src/xeq.c     **** 			const int eex_pi = get_user_flag(regL_idx);
3962:src/xeq.c     **** #else
3963:src/xeq.c     **** 			const int eex_pi = 0;
3964:src/xeq.c     **** #endif
3965:src/xeq.c     **** 
3966:src/xeq.c     **** 			if (CmdLineDot == 2) {
3967:src/xeq.c     **** 				if (eex_pi) {
3968:src/xeq.c     **** 					// fraction entered (two dots); execute ENTER and enter pi
3969:src/xeq.c     **** 					if (is_bad_cmdline()) {
3970:src/xeq.c     **** 						if (Running || XromRunning)
ARM GAS  /tmp/cc7LeJ71.s 			page 84


3971:src/xeq.c     **** 							report_err(ERR_DOMAIN);
3972:src/xeq.c     **** 						break;
3973:src/xeq.c     **** 					}
3974:src/xeq.c     **** 					process_cmdline();
3975:src/xeq.c     **** 					lift();
3976:src/xeq.c     **** 					copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3977:src/xeq.c     **** 					set_lift();
3978:src/xeq.c     **** 				}
3979:src/xeq.c     **** 				break;
3980:src/xeq.c     **** 			}
3981:src/xeq.c     **** 			if (CmdLineEex || CmdLineLength >= CMDLINELEN)
3982:src/xeq.c     **** 				break;
3983:src/xeq.c     **** 			if (eex_pi && CmdLineLength == 0) {
3984:src/xeq.c     **** 				// empty command line: enter pi
3985:src/xeq.c     **** 				lift_if_enabled();
3986:src/xeq.c     **** 				copyreg(StackBase, get_const(OP_PI, is_dblmode()));
3987:src/xeq.c     **** 				set_lift();
3988:src/xeq.c     **** 				break;
3989:src/xeq.c     **** 			}
3990:src/xeq.c     **** #if !(FRACTION_MODE_INPUT & 1)
3991:src/xeq.c     **** 			if (UState.fract)
3992:src/xeq.c     **** 				break;
3993:src/xeq.c     **** #endif
3994:src/xeq.c     **** 			if (CmdLineLength == 0)
3995:src/xeq.c     **** 				digit(1);
3996:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
3997:src/xeq.c     **** 			append_cmdline('E');
3998:src/xeq.c     **** 		}
3999:src/xeq.c     **** 		break;
4000:src/xeq.c     **** 
4001:src/xeq.c     **** 	case OP_CHS:
4002:src/xeq.c     **** 		if (CmdLineLength)
4003:src/xeq.c     **** 			cmdlinechs();
4004:src/xeq.c     **** 		else if (is_intmode()) {
4005:src/xeq.c     **** 			setX_int(intChs(getX_int()));
4006:src/xeq.c     **** 			set_lift();
4007:src/xeq.c     **** 		} else {
4008:src/xeq.c     **** 			decNumber x, r;
4009:src/xeq.c     **** 
4010:src/xeq.c     **** 			getX(&x);
4011:src/xeq.c     **** 			dn_minus(&r, &x);
4012:src/xeq.c     **** 			setX(&r);
4013:src/xeq.c     **** 			set_lift();
4014:src/xeq.c     **** 		}
4015:src/xeq.c     **** 		break;
4016:src/xeq.c     **** 
4017:src/xeq.c     **** 	case OP_CLX:
4018:src/xeq.c     **** 		if (Running)
4019:src/xeq.c     **** 			illegal(op);
4020:src/xeq.c     **** 		else if (CmdLineLength) {
4021:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
4022:src/xeq.c     **** 			if (CmdLineEex != 0 && Cmdline[CmdLineLength-1] == 'D') {
4023:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
4024:src/xeq.c     **** 				break;
4025:src/xeq.c     **** 			}
4026:src/xeq.c     **** #endif
4027:src/xeq.c     **** 			CmdLineLength--;
ARM GAS  /tmp/cc7LeJ71.s 			page 85


4028:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
4029:src/xeq.c     **** 				CmdLineEex = 0;
4030:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
4031:src/xeq.c     **** 				CmdLineDot--;
4032:src/xeq.c     **** 		} else
4033:src/xeq.c     **** 			clrx(OP_rCLX);
4034:src/xeq.c     **** 		break;
4035:src/xeq.c     **** 
4036:src/xeq.c     **** 		case OP_ENTER:
4037:src/xeq.c     **** 		  if (ENTRY_RPN_ENABLED) {  
4038:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
4039:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
4040:src/xeq.c     **** 		      process_cmdline();     //JM
4041:src/xeq.c     **** 		    } else {                       //JM
4042:src/xeq.c     **** 		      process_cmdline();
4043:src/xeq.c     **** 		      lift();
4044:src/xeq.c     **** 		      if ( (XromRunning || Running) ) {//JMTEST Explicitly including standard functionality if co
4045:src/xeq.c     **** 			clr_lift();
4046:src/xeq.c     **** 		      }   
4047:src/xeq.c     **** 		    }                              //JM
4048:src/xeq.c     **** 		  }
4049:src/xeq.c     **** 		  else {
4050:src/xeq.c     **** 		    process_cmdline();
4051:src/xeq.c     **** 		    lift();
4052:src/xeq.c     **** 		    clr_lift();
4053:src/xeq.c     **** 		  }
4054:src/xeq.c     **** 		  break;
4055:src/xeq.c     **** 		  
4056:src/xeq.c     **** 	case OP_SIGMAPLUS:
4057:src/xeq.c     **** 	case OP_SIGMAMINUS:
4058:src/xeq.c     **** 		if (is_intmode()) {
4059:src/xeq.c     **** 			bad_mode_error();
4060:src/xeq.c     **** 			break;
4061:src/xeq.c     **** 		}
4062:src/xeq.c     **** 		process_cmdline();
4063:src/xeq.c     **** 		clr_lift();
4064:src/xeq.c     **** 		setlastX();
4065:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
4066:src/xeq.c     **** 			sigma_plus();
4067:src/xeq.c     **** 		else
4068:src/xeq.c     **** 			sigma_minus();
4069:src/xeq.c     **** 		sigma_val(OP_sigmaN);
4070:src/xeq.c     **** 		break;
4071:src/xeq.c     **** 
4072:src/xeq.c     **** 	// Conditional tests vs registers....
4073:src/xeq.c     **** 	case OP_Xeq0:	case OP_Xlt0:	case OP_Xgt0:
4074:src/xeq.c     **** 	case OP_Xne0:	case OP_Xle0:	case OP_Xge0:
4075:src/xeq.c     **** 	case OP_Xapx0:
4076:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ZERO, (enum tst_op)(opm - OP_Xeq0));
4077:src/xeq.c     **** 		break;
4078:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
4079:src/xeq.c     **** 		do_ztst(&const_0, &const_0, (enum tst_op)(opm - OP_Zeq0));
4080:src/xeq.c     **** 		break;
4081:src/xeq.c     **** 
4082:src/xeq.c     **** 	case OP_Xeq1:	case OP_Xlt1:	case OP_Xgt1:
4083:src/xeq.c     **** 	case OP_Xne1:	case OP_Xle1:	case OP_Xge1:
4084:src/xeq.c     **** 	case OP_Xapx1:
ARM GAS  /tmp/cc7LeJ71.s 			page 86


4085:src/xeq.c     **** 		do_tst(CONST_REG_BASE + OP_ONE, (enum tst_op)(opm - OP_Xeq1));
4086:src/xeq.c     **** 		break;
4087:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
4088:src/xeq.c     **** 		do_ztst(&const_1, &const_0, (enum tst_op)(opm - OP_Zeq1));
4089:src/xeq.c     **** 		break;
4090:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
4091:src/xeq.c     **** 		do_ztst(&const_0, &const_1, (enum tst_op)(opm - OP_Zeqi));
4092:src/xeq.c     **** 		break;
4093:src/xeq.c     **** 
4094:src/xeq.c     **** 	default:
4095:src/xeq.c     **** 		illegal(op);
4096:src/xeq.c     **** 	}
4097:src/xeq.c     **** }
4098:src/xeq.c     **** 
4099:src/xeq.c     **** enum trig_modes get_trig_mode(void) {
4100:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
4101:src/xeq.c     **** 		return TRIG_RAD;
4102:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
4103:src/xeq.c     **** 	return (enum trig_modes) UState.trigmode;
4104:src/xeq.c     **** }
4105:src/xeq.c     **** 
4106:src/xeq.c     **** void op_double(enum nilop op) {
4107:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
4108:src/xeq.c     **** 	const int intm = is_intmode();
4109:src/xeq.c     **** 	int i;
4110:src/xeq.c     **** 
4111:src/xeq.c     **** 	if (dbl != UState.mode_double) {
4112:src/xeq.c     **** 		// Mode switch
4113:src/xeq.c     **** 		if (dbl) {
4114:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
4115:src/xeq.c     **** 				// Need space for double precision stack
4116:src/xeq.c     **** 				cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
4117:src/xeq.c     **** 				if (Error) {
4118:src/xeq.c     **** 					return;
4119:src/xeq.c     **** 				}
4120:src/xeq.c     **** 			}
4121:src/xeq.c     **** 
4122:src/xeq.c     **** 			UState.mode_double = 1;
4123:src/xeq.c     **** 			if (! intm) {
4124:src/xeq.c     **** 				// Convert X to K to double precision
4125:src/xeq.c     **** 				// Avoid this in integer mode
4126:src/xeq.c     **** 				for (i = 0; i < STACK_SIZE + EXTRA_REG; ++i)
4127:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
4128:src/xeq.c     **** 			}
4129:src/xeq.c     **** 		}
4130:src/xeq.c     **** 		else {
4131:src/xeq.c     **** 			if (! intm) {
4132:src/xeq.c     **** 				// Convert X to K to single precision
4133:src/xeq.c     **** 				// Avoid this in integer mode
4134:src/xeq.c     **** 				for (i = STACK_SIZE + EXTRA_REG - 1; i >= 0; --i)
4135:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
4136:src/xeq.c     **** 			}
4137:src/xeq.c     **** 			UState.mode_double = 0;
4138:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
4139:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
4140:src/xeq.c     **** 		}
4141:src/xeq.c     **** 	}
ARM GAS  /tmp/cc7LeJ71.s 			page 87


4142:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
4143:src/xeq.c     **** 	if (intm) {
4144:src/xeq.c     **** 		// Do the necessary conversions from integer mode
4145:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
4146:src/xeq.c     **** 	}
4147:src/xeq.c     **** }
4148:src/xeq.c     **** 
4149:src/xeq.c     **** void cmdpause(unsigned int arg, enum rarg op) {
4150:src/xeq.c     **** 	display();
4151:src/xeq.c     **** #ifndef CONSOLE
4152:src/xeq.c     **** 	// decremented in the low level heartbeat
4153:src/xeq.c     **** 	Pause = arg;
4154:src/xeq.c     **** 	GoFast = (arg == 0);
4155:src/xeq.c     **** #elif 0
4156:src/xeq.c     **** 	start_pause(arg);
4157:src/xeq.c     **** #else	
4158:src/xeq.c     **** #if defined(WIN32) && !defined(__GNUC__)
4159:src/xeq.c     **** #pragma warning(disable:4996)
4160:src/xeq.c     **** 	sleep(arg/10);
4161:src/xeq.c     **** #else
4162:src/xeq.c     **** 	usleep(arg * 100000);
4163:src/xeq.c     **** #endif
4164:src/xeq.c     **** #endif
4165:src/xeq.c     **** }
4166:src/xeq.c     **** 
4167:src/xeq.c     **** 
4168:src/xeq.c     **** 
4169:src/xeq.c     **** void op_setspeed(enum nilop op) {
4170:src/xeq.c     **** #ifdef DM42
4171:src/xeq.c     **** #else
4172:src/xeq.c     ****   UState.slow_speed = (op == OP_SLOW) ? 1 : 0;
4173:src/xeq.c     ****   update_speed(1);
4174:src/xeq.c     **** #endif
4175:src/xeq.c     **** }
4176:src/xeq.c     **** 
4177:src/xeq.c     **** 
4178:src/xeq.c     **** void op_prompt(enum nilop op) {
4179:src/xeq.c     **** 	set_running_off();
4180:src/xeq.c     **** 	alpha_view_common(regX_idx);
4181:src/xeq.c     **** }
4182:src/xeq.c     **** 
4183:src/xeq.c     **** /* Test if a number is an integer or fractional */
4184:src/xeq.c     **** /* Special numbers are neither */
4185:src/xeq.c     **** void XisInt(enum nilop op) {
4186:src/xeq.c     **** 	decNumber x;
4187:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
4188:src/xeq.c     **** 	if ( is_intmode() )
4189:src/xeq.c     **** 		result = op_int;
4190:src/xeq.c     **** 	else if (decNumberIsSpecial(getX(&x)))
4191:src/xeq.c     **** 		result = 0;
4192:src/xeq.c     **** 	else
4193:src/xeq.c     **** 	        result = (is_int(&x) == op_int);
4194:src/xeq.c     **** 	fin_tst(result);
4195:src/xeq.c     **** }
4196:src/xeq.c     **** 
4197:src/xeq.c     **** /* Test if a number is an even or odd integer */
4198:src/xeq.c     **** /* fractional or special values are neither even nor odd */
ARM GAS  /tmp/cc7LeJ71.s 			page 88


4199:src/xeq.c     **** void XisEvenOrOdd(enum nilop op) {
4200:src/xeq.c     **** 	decNumber x;
4201:src/xeq.c     **** 	int odd = (op == OP_XisODD);
4202:src/xeq.c     **** 
4203:src/xeq.c     **** 	if (is_intmode()) {
4204:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
4205:src/xeq.c     **** 	} else {
4206:src/xeq.c     **** 		fin_tst(is_even(getX(&x)) == !odd);
4207:src/xeq.c     **** 	}
4208:src/xeq.c     **** }
4209:src/xeq.c     **** 
4210:src/xeq.c     **** 
4211:src/xeq.c     **** /* Test if a number is prime */
4212:src/xeq.c     **** void XisPrime(enum nilop op) {
4213:src/xeq.c     **** 	unsigned long long int i;
4214:src/xeq.c     **** 	int sgn;
4215:src/xeq.c     **** 
4216:src/xeq.c     **** 	i = getX_int_sgn(&sgn);
4217:src/xeq.c     **** 	if (!is_intmode()) {
4218:src/xeq.c     **** 		decNumber x;
4219:src/xeq.c     **** 
4220:src/xeq.c     **** 		getX(&x);
4221:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
4222:src/xeq.c     **** 			sgn = 1; // not prime
4223:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
4224:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
4225:src/xeq.c     **** 			i = 0xFFFFFFFFFFFFFFFFull;
4226:src/xeq.c     **** 	}
4227:src/xeq.c     **** 	fin_tst(sgn == 0 && isPrime(i));
4228:src/xeq.c     **** }
4229:src/xeq.c     **** 
4230:src/xeq.c     **** /* Test is a number is infinite.
4231:src/xeq.c     ****  */
4232:src/xeq.c     **** void isInfinite(enum nilop op) {
4233:src/xeq.c     **** 	decNumber x;
4234:src/xeq.c     **** 
4235:src/xeq.c     **** 	getX(&x);
4236:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
4237:src/xeq.c     **** }
4238:src/xeq.c     **** 
4239:src/xeq.c     **** /* Test for NaN.
4240:src/xeq.c     ****  * this could be done by testing x != x, but having a special command
4241:src/xeq.c     ****  * for it reads easier.
4242:src/xeq.c     ****  */
4243:src/xeq.c     **** void isNan(enum nilop op) {
4244:src/xeq.c     **** 	decNumber x;
4245:src/xeq.c     **** 
4246:src/xeq.c     **** 	getX(&x);
4247:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
4248:src/xeq.c     **** }
4249:src/xeq.c     **** 
4250:src/xeq.c     **** void isSpecial(enum nilop op) {
4251:src/xeq.c     **** 	decNumber x;
4252:src/xeq.c     **** 
4253:src/xeq.c     **** 	getX(&x);
4254:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
4255:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 89


4256:src/xeq.c     **** 
4257:src/xeq.c     **** void op_entryp(enum nilop op) {
4258:src/xeq.c     **** 	fin_tst(State.entryp);
4259:src/xeq.c     **** }
4260:src/xeq.c     **** 
4261:src/xeq.c     **** /* Bulk register operations */
4262:src/xeq.c     **** int reg_decode(int *s, int *n, int *d, int flash) {
4263:src/xeq.c     **** 	decNumber x, y;
4264:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
4265:src/xeq.c     **** 
4266:src/xeq.c     **** 	if (is_intmode()) {
4267:src/xeq.c     **** 		bad_mode_error();
4268:src/xeq.c     **** 		return 1;
4269:src/xeq.c     **** 	}
4270:src/xeq.c     **** 	getX(&x);			// sss.nnddd~
4271:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
4272:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
4273:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
4274:src/xeq.c     **** 
4275:src/xeq.c     **** 	if (rsrc < 0) {
4276:src/xeq.c     **** 		if (!flash)
4277:src/xeq.c     **** 			goto range_error;
4278:src/xeq.c     **** 		rsrc = -rsrc;
4279:src/xeq.c     **** 	}
4280:src/xeq.c     **** 	else
4281:src/xeq.c     **** 		flash = 0;
4282:src/xeq.c     **** 
4283:src/xeq.c     **** 	rdest = rsrc % 1000;		// ddd
4284:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
4285:src/xeq.c     **** 	num = rsrc % 100;		// nn
4286:src/xeq.c     **** 	rsrc /= 100;			// sss
4287:src/xeq.c     **** 
4288:src/xeq.c     **** 	mx_src = flash ? BackupFlash._numregs
4289:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
4290:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
4291:src/xeq.c     **** 	       : global_regs();
4292:src/xeq.c     **** 	if (rsrc >= mx_src)
4293:src/xeq.c     **** 		goto range_error;
4294:src/xeq.c     **** 
4295:src/xeq.c     **** 	if (d != NULL) {
4296:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
4297:src/xeq.c     **** 
4298:src/xeq.c     **** 		if (num == 0) {
4299:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
4300:src/xeq.c     **** 			if (flash || (rsrc >= LOCAL_REG_BASE) != (rdest >= LOCAL_REG_BASE))
4301:src/xeq.c     **** 				// source & destination in different memory areas
4302:src/xeq.c     **** 				num = mx_dest < mx_src ? mx_dest : mx_src;
4303:src/xeq.c     **** 			else {
4304:src/xeq.c     **** 				if (rsrc > rdest) {
4305:src/xeq.c     **** 					num = mx_src - rsrc;
4306:src/xeq.c     **** 					q = rsrc - rdest;
4307:src/xeq.c     **** 				}
4308:src/xeq.c     **** 				else {
4309:src/xeq.c     **** 					num = mx_dest - rdest;
4310:src/xeq.c     **** 					q = rdest - rsrc;
4311:src/xeq.c     **** 				}
4312:src/xeq.c     **** 				if (num > q)
ARM GAS  /tmp/cc7LeJ71.s 			page 90


4313:src/xeq.c     **** 					num = q;
4314:src/xeq.c     **** 			}
4315:src/xeq.c     **** 		}
4316:src/xeq.c     **** 		if (rdest >= LOCAL_REG_BASE)
4317:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
4318:src/xeq.c     **** 		if (rdest + num > mx_dest)
4319:src/xeq.c     **** 			goto range_error;
4320:src/xeq.c     **** 		// Set pointer
4321:src/xeq.c     **** 		*d = rdest;
4322:src/xeq.c     **** 	}
4323:src/xeq.c     **** 	else {
4324:src/xeq.c     **** 		if (num == 0) {
4325:src/xeq.c     **** 			num = mx_src - rsrc;
4326:src/xeq.c     **** 		}
4327:src/xeq.c     **** 	}
4328:src/xeq.c     **** 	if (rsrc + num > mx_src)
4329:src/xeq.c     **** 		goto range_error;
4330:src/xeq.c     **** 
4331:src/xeq.c     **** 	// Now point to the correct source register
4332:src/xeq.c     **** 	*s = flash ? FLASH_REG_BASE + rsrc : rsrc;
4333:src/xeq.c     **** 	*n = num;
4334:src/xeq.c     **** 
4335:src/xeq.c     **** 	return 0;
4336:src/xeq.c     **** 
4337:src/xeq.c     **** range_error:
4338:src/xeq.c     **** 	report_err(ERR_RANGE);
4339:src/xeq.c     **** 	return 1;
4340:src/xeq.c     **** }
4341:src/xeq.c     **** 
4342:src/xeq.c     **** void op_regcopy(enum nilop op) {
4343:src/xeq.c     **** 	int s, n, d;
4344:src/xeq.c     **** 
4345:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 1))
4346:src/xeq.c     **** 		return;
4347:src/xeq.c     **** 	move_regs(get_reg_n(d), get_reg_n(s), n);
4348:src/xeq.c     **** }
4349:src/xeq.c     **** 
4350:src/xeq.c     **** void op_regswap(enum nilop op) {
4351:src/xeq.c     **** 	int s, n, d, i;
4352:src/xeq.c     **** 
4353:src/xeq.c     **** 	if (reg_decode(&s, &n, &d, 0) || s == d)
4354:src/xeq.c     **** 		return;
4355:src/xeq.c     **** 	else {
4356:src/xeq.c     **** 		if ((s > d && d + n > s) || (d > s && s + n > d))
4357:src/xeq.c     **** 			report_err(ERR_RANGE);
4358:src/xeq.c     **** 		else {
4359:src/xeq.c     **** 			for (i = 0; i < n; i++)
4360:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
4361:src/xeq.c     **** 		}
4362:src/xeq.c     **** 	}
4363:src/xeq.c     **** }
4364:src/xeq.c     **** 
4365:src/xeq.c     **** void op_regclr(enum nilop op) {
4366:src/xeq.c     **** 	int s, n;
4367:src/xeq.c     **** 
4368:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0))
4369:src/xeq.c     **** 		return;
ARM GAS  /tmp/cc7LeJ71.s 			page 91


4370:src/xeq.c     **** 	zero_regs(get_reg_n(s), n);
4371:src/xeq.c     **** }
4372:src/xeq.c     **** 
4373:src/xeq.c     **** void op_regsort(enum nilop op) {
4374:src/xeq.c     **** 	int s, n;
4375:src/xeq.c     **** 	decNumber pivot, a;
4376:src/xeq.c     **** 	int beg[10], end[10], i;
4377:src/xeq.c     **** 
4378:src/xeq.c     **** 	if (reg_decode(&s, &n, NULL, 0) || n == 1)
4379:src/xeq.c     **** 		return;
4380:src/xeq.c     **** 
4381:src/xeq.c     **** 	/* Non-recursive quicksort */
4382:src/xeq.c     **** 	beg[0] = 0;
4383:src/xeq.c     **** 	end[0] = n;
4384:src/xeq.c     **** 	i = 0;
4385:src/xeq.c     **** 	while (i>=0) {
4386:src/xeq.c     **** 		int L = beg[i];
4387:src/xeq.c     **** 		int R = end[i] - 1;
4388:src/xeq.c     **** 		if (L<R) {
4389:src/xeq.c     **** 			const int pvt = s + L;
4390:src/xeq.c     **** 			getRegister(&pivot, pvt);
4391:src/xeq.c     **** 			while (L<R) {
4392:src/xeq.c     **** 				while (L<R) {
4393:src/xeq.c     **** 					getRegister(&a, s + R);
4394:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
4395:src/xeq.c     **** 						break;
4396:src/xeq.c     **** 					R--;
4397:src/xeq.c     **** 				}
4398:src/xeq.c     **** 				if (L<R)
4399:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
4400:src/xeq.c     **** 				while (L<R) {
4401:src/xeq.c     **** 					getRegister(&a, s + L);
4402:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
4403:src/xeq.c     **** 						break;
4404:src/xeq.c     **** 					L++;
4405:src/xeq.c     **** 				}
4406:src/xeq.c     **** 				if (L<R)
4407:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
4408:src/xeq.c     **** 			}
4409:src/xeq.c     **** 			setRegister(s + L, &pivot);
4410:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
4411:src/xeq.c     **** 				beg[i+1] = beg[i];
4412:src/xeq.c     **** 				end[i+1] = L;
4413:src/xeq.c     **** 				beg[i] = L+1;
4414:src/xeq.c     **** 			} else {
4415:src/xeq.c     **** 				beg[i+1] = L+1;
4416:src/xeq.c     **** 				end[i+1] = end[i];
4417:src/xeq.c     **** 				end[i] = L;
4418:src/xeq.c     **** 			}
4419:src/xeq.c     **** 			i++;
4420:src/xeq.c     **** 		} else
4421:src/xeq.c     **** 			i--;
4422:src/xeq.c     **** 	}
4423:src/xeq.c     **** }
4424:src/xeq.c     **** 
4425:src/xeq.c     **** 
4426:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 92


4427:src/xeq.c     **** /* Print a single program step nicely.
4428:src/xeq.c     ****  */
4429:src/xeq.c     **** static void print_step(const opcode op) {
4430:src/xeq.c     **** 	char buf[16];
4431:src/xeq.c     **** 	const unsigned int pc = state_pc();
4432:src/xeq.c     **** 	char *p = TraceBuffer;
4433:src/xeq.c     **** 
4434:src/xeq.c     **** 	if (isXROM(pc)) {
4435:src/xeq.c     **** 		*p++ = 'x';
4436:src/xeq.c     **** 	} else if (isLIB(pc)) {
4437:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
4438:src/xeq.c     **** 		*p++ = ' ';
4439:src/xeq.c     **** 	}
4440:src/xeq.c     **** 	if (pc == 0)
4441:src/xeq.c     **** 		scopy(p, "000:");
4442:src/xeq.c     **** 	else {
4443:src/xeq.c     **** 		p = num_arg_0(p, user_pc(pc), 3);
4444:src/xeq.c     **** 		*p++ = ':';
4445:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
4446:src/xeq.c     **** 		if (*p == '?')
4447:src/xeq.c     **** 			*p = '\0';
4448:src/xeq.c     **** 	}
4449:src/xeq.c     **** 	State2.disp_small = 1;
4450:src/xeq.c     **** 	DispMsg = TraceBuffer;
4451:src/xeq.c     **** }
4452:src/xeq.c     **** 
4453:src/xeq.c     **** 
4454:src/xeq.c     **** /* When stuff gets done, there are some bits of state that need
4455:src/xeq.c     ****  * to be reset -- SHOW, ->base change the display mode until something
4456:src/xeq.c     ****  * happens.  This should be called on that something.
4457:src/xeq.c     ****  */
4458:src/xeq.c     **** void reset_volatile_state(void) {
4459:src/xeq.c     **** 	// extern int IntMaxWindow;
4460:src/xeq.c     **** 	// IntMaxWindow = 0;
4461:src/xeq.c     **** 	State2.window = 0;
4462:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
4463:src/xeq.c     **** }
4464:src/xeq.c     **** 
4465:src/xeq.c     **** 
4466:src/xeq.c     **** /*
4467:src/xeq.c     ****  *  Called by any long running function
4468:src/xeq.c     ****  */
4469:src/xeq.c     **** void busy(void)
4470:src/xeq.c     **** {
4471:src/xeq.c     **** 	/*
4472:src/xeq.c     **** 	 *  Serve the hardware watch dog
4473:src/xeq.c     **** 	 */
4474:src/xeq.c     **** 	watchdog();
4475:src/xeq.c     **** 
4476:src/xeq.c     **** 	/*
4477:src/xeq.c     **** 	 *  Increase the speed
4478:src/xeq.c     **** 	 */
4479:src/xeq.c     **** 	update_speed(1);
4480:src/xeq.c     **** 
4481:src/xeq.c     **** 	/*
4482:src/xeq.c     **** 	 *  Indicate busy state to the user
4483:src/xeq.c     **** 	 */
ARM GAS  /tmp/cc7LeJ71.s 			page 93


4484:src/xeq.c     **** 	if (!Busy && !Running) {
4485:src/xeq.c     **** 		Busy = 1;
4486:src/xeq.c     **** 		message("Wait...", NULL);
4487:src/xeq.c     **** 	}
4488:src/xeq.c     **** }
4489:src/xeq.c     **** 
4490:src/xeq.c     **** /***************************************************************************
4491:src/xeq.c     ****  * Function dispatchers.
4492:src/xeq.c     ****  */
4493:src/xeq.c     **** 
4494:src/xeq.c     **** /*
4495:src/xeq.c     ****  *  Check for a call into XROM space.
4496:src/xeq.c     ****  *  Fix the pointer alignment on the go.
4497:src/xeq.c     ****  */
4498:src/xeq.c     **** #ifdef REALBUILD
4499:src/xeq.c     **** typedef unsigned long uintptr_t;
4500:src/xeq.c     **** #else
4501:src/xeq.c     **** #include <stdint.h>
4502:src/xeq.c     **** #endif
4503:src/xeq.c     **** 
4504:src/xeq.c     **** static const s_opcode *check_for_xrom_address(void *fp)
4505:src/xeq.c     **** {
4506:src/xeq.c     **** 	const s_opcode *xp = (const s_opcode *) ((uintptr_t ) fp & ~1);
4507:src/xeq.c     **** 	if (xp < xrom)
4508:src/xeq.c     **** 		return NULL;
4509:src/xeq.c     **** #ifndef REALBUILD
4510:src/xeq.c     **** 	// On the device, XROM is at the end so this is not needed
4511:src/xeq.c     **** 	if (xp >= xrom + xrom_size)
4512:src/xeq.c     **** 		return NULL;
4513:src/xeq.c     **** #endif
4514:src/xeq.c     **** 	return xp;
4515:src/xeq.c     **** }
4516:src/xeq.c     **** 
4517:src/xeq.c     **** /*
4518:src/xeq.c     ****  *  Check for a call into XROM space and dispatch it.
4519:src/xeq.c     ****  */
4520:src/xeq.c     **** static int dispatch_xrom(void *fp)
4521:src/xeq.c     **** {
4522:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
4523:src/xeq.c     **** 	if (xp == NULL)
4524:src/xeq.c     **** 		return 0;
4525:src/xeq.c     **** 	// set_lift();
4526:src/xeq.c     **** 	UserLocalRegs = LocalRegs;
4527:src/xeq.c     **** 	XromRunning = 1;
4528:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
4529:src/xeq.c     **** 	xeq_xrom();
4530:src/xeq.c     **** 	//	print_debug(999,0);
4531:src/xeq.c     **** 	return 1;
4532:src/xeq.c     **** }
4533:src/xeq.c     **** 
4534:src/xeq.c     **** /*
4535:src/xeq.c     ****  *  Return an integer result from a decimal value, setting flags properly
4536:src/xeq.c     ****  */
4537:src/xeq.c     **** static long long int intResult(decNumber *r) {
 654              		.loc 1 4537 46 is_stmt 1 view -0
 655              		.cfi_startproc
 656              		@ args = 0, pretend = 0, frame = 80
ARM GAS  /tmp/cc7LeJ71.s 			page 94


 657              		@ frame_needed = 0, uses_anonymous_args = 0
4538:src/xeq.c     **** 	unsigned long long int i;
 658              		.loc 1 4538 2 view .LVU191
4539:src/xeq.c     **** 	int s;
 659              		.loc 1 4539 2 view .LVU192
4540:src/xeq.c     **** 	decNumber ri, t;
 660              		.loc 1 4540 2 view .LVU193
4541:src/xeq.c     **** 
4542:src/xeq.c     **** 	decNumberRoundDigits(&t, r, 25, DEC_ROUND_HALF_EVEN);
 661              		.loc 1 4542 2 view .LVU194
4537:src/xeq.c     **** 	unsigned long long int i;
 662              		.loc 1 4537 46 is_stmt 0 view .LVU195
 663 0000 30B5     		push	{r4, r5, lr}
 664              		.cfi_def_cfa_offset 12
 665              		.cfi_offset 4, -12
 666              		.cfi_offset 5, -8
 667              		.cfi_offset 14, -4
 668 0002 95B0     		sub	sp, sp, #84
 669              		.cfi_def_cfa_offset 96
 670              		.loc 1 4542 2 view .LVU196
 671 0004 0323     		movs	r3, #3
 672 0006 1922     		movs	r2, #25
4537:src/xeq.c     **** 	unsigned long long int i;
 673              		.loc 1 4537 46 view .LVU197
 674 0008 0146     		mov	r1, r0
 675              		.loc 1 4542 2 view .LVU198
 676 000a 0BA8     		add	r0, sp, #44
 677              	.LVL52:
 678              		.loc 1 4542 2 view .LVU199
 679 000c FFF7FEFF 		bl	decNumberRoundDigits
 680              	.LVL53:
4543:src/xeq.c     **** 	decNumberTrunc(&ri, &t);
 681              		.loc 1 4543 2 is_stmt 1 view .LVU200
 682 0010 0BA9     		add	r1, sp, #44
 683 0012 02A8     		add	r0, sp, #8
 684 0014 FFF7FEFF 		bl	decNumberTrunc
 685              	.LVL54:
4544:src/xeq.c     **** 	set_carry(dn_eq(&ri, &t) ? 0 : 1);
 686              		.loc 1 4544 2 view .LVU201
 687              		.loc 1 4544 12 is_stmt 0 view .LVU202
 688 0018 0BA9     		add	r1, sp, #44
 689 001a 02A8     		add	r0, sp, #8
 690 001c FFF7FEFF 		bl	dn_eq
 691              	.LVL55:
 692              		.loc 1 4544 2 view .LVU203
 693 0020 B0FA80F0 		clz	r0, r0
 694 0024 4009     		lsrs	r0, r0, #5
 695 0026 FFF7FEFF 		bl	set_carry
 696              	.LVL56:
4545:src/xeq.c     **** 
4546:src/xeq.c     **** 	if (decNumberIsNaN(&t)) {
 697              		.loc 1 4546 2 is_stmt 1 view .LVU204
 698              		.loc 1 4546 6 is_stmt 0 view .LVU205
 699 002a 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 700              		.loc 1 4546 5 view .LVU206
 701 002e 13F0300F 		tst	r3, #48
 702 0032 22D1     		bne	.L67
ARM GAS  /tmp/cc7LeJ71.s 			page 95


4547:src/xeq.c     **** 		report_err(ERR_DOMAIN);
4548:src/xeq.c     **** 		return 0;
4549:src/xeq.c     **** 	}
4550:src/xeq.c     **** 	if (decNumberIsSpecial(&t)) {
 703              		.loc 1 4550 2 is_stmt 1 view .LVU207
 704              		.loc 1 4550 5 is_stmt 0 view .LVU208
 705 0034 13F0700F 		tst	r3, #112
 706 0038 18D1     		bne	.L68
4551:src/xeq.c     **** 		set_overflow(1);
4552:src/xeq.c     **** 		return 0;
4553:src/xeq.c     **** 	}
4554:src/xeq.c     **** 	i = dn_to_ull(&ri, &s);
 707              		.loc 1 4554 2 is_stmt 1 view .LVU209
 708              		.loc 1 4554 6 is_stmt 0 view .LVU210
 709 003a 02A8     		add	r0, sp, #8
 710 003c 01A9     		add	r1, sp, #4
 711 003e FFF7FEFF 		bl	dn_to_ull
 712              	.LVL57:
 713 0042 0C46     		mov	r4, r1
4555:src/xeq.c     **** 	dn_abs(&t, &t);
 714              		.loc 1 4555 2 view .LVU211
 715 0044 0BA9     		add	r1, sp, #44
4554:src/xeq.c     **** 	dn_abs(&t, &t);
 716              		.loc 1 4554 6 view .LVU212
 717 0046 0546     		mov	r5, r0
 718              	.LVL58:
 719              		.loc 1 4555 2 is_stmt 1 view .LVU213
 720 0048 0846     		mov	r0, r1
 721              	.LVL59:
 722              		.loc 1 4555 2 is_stmt 0 view .LVU214
 723 004a FFF7FEFF 		bl	dn_abs
 724              	.LVL60:
4556:src/xeq.c     **** 	set_overflow(check_overflow(i) || dn_ge(&t, &const_2pow64));
 725              		.loc 1 4556 2 is_stmt 1 view .LVU215
 726              		.loc 1 4556 15 is_stmt 0 view .LVU216
 727 004e 2846     		mov	r0, r5
 728 0050 2146     		mov	r1, r4
 729 0052 FFF7FEFF 		bl	check_overflow
 730              	.LVL61:
 731              		.loc 1 4556 2 view .LVU217
 732 0056 E8B1     		cbz	r0, .L69
 733 0058 0120     		movs	r0, #1
 734              	.L63:
 735              		.loc 1 4556 2 discriminator 6 view .LVU218
 736 005a FFF7FEFF 		bl	set_overflow
 737              	.LVL62:
4557:src/xeq.c     **** 	return build_value(i, s);
 738              		.loc 1 4557 2 is_stmt 1 discriminator 6 view .LVU219
 739              		.loc 1 4557 9 is_stmt 0 discriminator 6 view .LVU220
 740 005e 019A     		ldr	r2, [sp, #4]
 741 0060 2846     		mov	r0, r5
 742 0062 2146     		mov	r1, r4
 743 0064 FFF7FEFF 		bl	build_value
 744              	.LVL63:
4558:src/xeq.c     **** }
 745              		.loc 1 4558 1 discriminator 6 view .LVU221
 746 0068 15B0     		add	sp, sp, #84
ARM GAS  /tmp/cc7LeJ71.s 			page 96


 747              		.cfi_remember_state
 748              		.cfi_def_cfa_offset 12
 749              		@ sp needed
 750 006a 30BD     		pop	{r4, r5, pc}
 751              	.LVL64:
 752              	.L68:
 753              		.cfi_restore_state
4551:src/xeq.c     **** 		return 0;
 754              		.loc 1 4551 3 is_stmt 1 view .LVU222
 755 006c 0120     		movs	r0, #1
 756 006e FFF7FEFF 		bl	set_overflow
 757              	.LVL65:
4552:src/xeq.c     **** 	}
 758              		.loc 1 4552 3 view .LVU223
4552:src/xeq.c     **** 	}
 759              		.loc 1 4552 10 is_stmt 0 view .LVU224
 760 0072 0020     		movs	r0, #0
 761 0074 0146     		mov	r1, r0
 762              		.loc 1 4558 1 view .LVU225
 763 0076 15B0     		add	sp, sp, #84
 764              		.cfi_remember_state
 765              		.cfi_def_cfa_offset 12
 766              		@ sp needed
 767 0078 30BD     		pop	{r4, r5, pc}
 768              	.L67:
 769              		.cfi_restore_state
4547:src/xeq.c     **** 		return 0;
 770              		.loc 1 4547 3 is_stmt 1 view .LVU226
 771              	.LVL66:
 772              	.LBB1343:
 773              	.LBI1343:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 774              		.loc 1 546 5 view .LVU227
 775              	.LBB1344:
 547:src/xeq.c     **** 		Error = e;
 776              		.loc 1 547 2 view .LVU228
 547:src/xeq.c     **** 		Error = e;
 777              		.loc 1 547 12 is_stmt 0 view .LVU229
 778 007a 0A4B     		ldr	r3, .L70
 547:src/xeq.c     **** 		Error = e;
 779              		.loc 1 547 5 view .LVU230
 780 007c 1A68     		ldr	r2, [r3]
 781 007e 2AB9     		cbnz	r2, .L64
 782              	.LVL67:
 783              	.LBB1345:
 784              	.LBI1345:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 785              		.loc 1 546 5 is_stmt 1 view .LVU231
 786              	.LBB1346:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 787              		.loc 1 548 3 view .LVU232
 788              	.LBE1346:
 789              	.LBE1345:
 790              	.LBE1344:
 791              	.LBE1343:
4548:src/xeq.c     **** 	}
 792              		.loc 1 4548 10 is_stmt 0 view .LVU233
ARM GAS  /tmp/cc7LeJ71.s 			page 97


 793 0080 0020     		movs	r0, #0
 794              	.LBB1353:
 795              	.LBB1351:
 796              	.LBB1349:
 797              	.LBB1347:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 798              		.loc 1 548 9 view .LVU234
 799 0082 0122     		movs	r2, #1
 800              	.LBE1347:
 801              	.LBE1349:
 802              	.LBE1351:
 803              	.LBE1353:
4548:src/xeq.c     **** 	}
 804              		.loc 1 4548 10 view .LVU235
 805 0084 0146     		mov	r1, r0
 806              	.LBB1354:
 807              	.LBB1352:
 808              	.LBB1350:
 809              	.LBB1348:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 810              		.loc 1 548 9 view .LVU236
 811 0086 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 812              		.loc 1 549 3 is_stmt 1 view .LVU237
 813              	.LBE1348:
 814              	.LBE1350:
 815              	.LBE1352:
 816              	.LBE1354:
 817              		.loc 1 4558 1 is_stmt 0 view .LVU238
 818 0088 15B0     		add	sp, sp, #84
 819              		.cfi_remember_state
 820              		.cfi_def_cfa_offset 12
 821              		@ sp needed
 822 008a 30BD     		pop	{r4, r5, pc}
 823              	.LVL68:
 824              	.L64:
 825              		.cfi_restore_state
4548:src/xeq.c     **** 	}
 826              		.loc 1 4548 10 view .LVU239
 827 008c 0020     		movs	r0, #0
 828 008e 0146     		mov	r1, r0
 829              	.LVL69:
 830              		.loc 1 4558 1 view .LVU240
 831 0090 15B0     		add	sp, sp, #84
 832              		.cfi_remember_state
 833              		.cfi_def_cfa_offset 12
 834              		@ sp needed
 835 0092 30BD     		pop	{r4, r5, pc}
 836              	.LVL70:
 837              	.L69:
 838              		.cfi_restore_state
4556:src/xeq.c     **** 	return build_value(i, s);
 839              		.loc 1 4556 36 discriminator 2 view .LVU241
 840 0094 0449     		ldr	r1, .L70+4
 841 0096 0BA8     		add	r0, sp, #44
 842 0098 FFF7FEFF 		bl	dn_lt
 843              	.LVL71:
ARM GAS  /tmp/cc7LeJ71.s 			page 98


4556:src/xeq.c     **** 	return build_value(i, s);
 844              		.loc 1 4556 2 discriminator 2 view .LVU242
 845 009c B0FA80F0 		clz	r0, r0
 846 00a0 4009     		lsrs	r0, r0, #5
 847 00a2 DAE7     		b	.L63
 848              	.L71:
 849              		.align	2
 850              	.L70:
 851 00a4 00000000 		.word	Error
 852 00a8 00000000 		.word	const_2pow64
 853              		.cfi_endproc
 854              	.LFE239:
 856              		.section	.text.check_stack_overlap,"ax",%progbits
 857              		.align	1
 858              		.p2align 2,,3
 859              		.syntax unified
 860              		.thumb
 861              		.thumb_func
 862              		.fpu fpv4-sp-d16
 864              	check_stack_overlap:
 865              	.LVL72:
 866              	.LFB147:
2137:src/xeq.c     **** 	const int n = stack_size();
 867              		.loc 1 2137 50 is_stmt 1 view -0
 868              		.cfi_startproc
 869              		@ args = 0, pretend = 0, frame = 0
 870              		@ frame_needed = 0, uses_anonymous_args = 0
 871              		@ link register save eliminated.
2138:src/xeq.c     **** 
 872              		.loc 1 2138 2 view .LVU244
 873              	.LBB1381:
 874              	.LBI1381:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 875              		.loc 1 712 5 view .LVU245
 876              	.LBB1382:
 713:src/xeq.c     **** 		return 4;
 877              		.loc 1 713 2 view .LVU246
 713:src/xeq.c     **** 		return 4;
 878              		.loc 1 713 8 is_stmt 0 view .LVU247
 879 0000 194B     		ldr	r3, .L83
 880 0002 1A68     		ldr	r2, [r3]
 713:src/xeq.c     **** 		return 4;
 881              		.loc 1 713 6 view .LVU248
 882 0004 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 883              		.loc 1 713 5 view .LVU249
 884 0008 1B07     		lsls	r3, r3, #28
 885              	.LBE1382:
 886              	.LBE1381:
2137:src/xeq.c     **** 	const int n = stack_size();
 887              		.loc 1 2137 50 view .LVU250
 888 000a 30B4     		push	{r4, r5}
 889              		.cfi_def_cfa_offset 8
 890              		.cfi_offset 4, -8
 891              		.cfi_offset 5, -4
 892              	.LBB1387:
 893              	.LBB1385:
ARM GAS  /tmp/cc7LeJ71.s 			page 99


 713:src/xeq.c     **** 		return 4;
 894              		.loc 1 713 5 view .LVU251
 895 000c 25D5     		bpl	.L77
 896              	.LBB1383:
 897              	.LBI1383:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 898              		.loc 1 185 5 is_stmt 1 view .LVU252
 899              	.LBB1384:
 186:src/xeq.c     **** }
 900              		.loc 1 186 2 view .LVU253
 186:src/xeq.c     **** }
 901              		.loc 1 186 9 is_stmt 0 view .LVU254
 902 000e B2F8E037 		ldrh	r3, [r2, #2016]
 903              	.LBE1384:
 904              	.LBE1383:
 713:src/xeq.c     **** 		return 4;
 905              		.loc 1 713 27 view .LVU255
 906 0012 9B0B     		lsrs	r3, r3, #14
 907 0014 032B     		cmp	r3, #3
 908 0016 1BD0     		beq	.L82
 909              	.L79:
 910 0018 0823     		movs	r3, #8
 715:src/xeq.c     **** }
 911              		.loc 1 715 9 view .LVU256
 912 001a 1C46     		mov	r4, r3
 913              	.L73:
 914              	.LVL73:
 715:src/xeq.c     **** }
 915              		.loc 1 715 9 view .LVU257
 916              	.LBE1385:
 917              	.LBE1387:
2140:src/xeq.c     **** 		return n;
 918              		.loc 1 2140 2 is_stmt 1 view .LVU258
 919              	.LBB1388:
 920              	.LBB1389:
 921              	.LBB1390:
 922              	.LBB1391:
 923              	.LBB1392:
1119:src/xeq.c     **** }
 924              		.loc 1 1119 24 is_stmt 0 view .LVU259
 925 001c B2F8E857 		ldrh	r5, [r2, #2024]
 926              	.LBE1392:
 927              	.LBE1391:
 928              	.LBB1395:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 929              		.loc 1 243 24 view .LVU260
 930 0020 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 931              	.LBE1395:
 932              	.LBB1396:
 933              	.LBB1393:
1119:src/xeq.c     **** }
 934              		.loc 1 1119 24 view .LVU261
 935 0024 44F20101 		movw	r1, #16385
 936              	.LBE1393:
 937              	.LBE1396:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 938              		.loc 1 242 5 view .LVU262
ARM GAS  /tmp/cc7LeJ71.s 			page 100


 939 0028 2940     		ands	r1, r1, r5
 940 002a B1F5804F 		cmp	r1, #16384
 941              	.LBB1397:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 942              		.loc 1 243 13 view .LVU263
 943 002e 08BF     		it	eq
 944 0030 0C3A     		subeq	r2, r2, #12
 945              	.LBE1397:
 946              	.LBE1390:
 947              	.LBE1389:
 948              	.LBE1388:
2140:src/xeq.c     **** 		return n;
 949              		.loc 1 2140 10 view .LVU264
 950 0032 0344     		add	r3, r3, r0
 951              	.LBB1402:
 952              	.LBI1388:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 953              		.loc 1 253 14 is_stmt 1 view .LVU265
 954              	.LBE1402:
 254:src/xeq.c     **** }
 955              		.loc 1 254 2 view .LVU266
 956              	.LVL74:
 957              	.LBB1403:
 958              	.LBB1401:
 959              	.LBI1389:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 960              		.loc 1 241 14 view .LVU267
 961              	.LBB1400:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 962              		.loc 1 242 2 view .LVU268
 963              	.LBB1398:
 964              	.LBI1391:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 965              		.loc 1 1118 5 view .LVU269
 966              	.LBB1394:
1119:src/xeq.c     **** }
 967              		.loc 1 1119 2 view .LVU270
 968              	.LBE1394:
 969              	.LBE1398:
 970              	.LBB1399:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 971              		.loc 1 243 3 view .LVU271
 244:src/xeq.c     **** 	}
 972              		.loc 1 244 3 view .LVU272
 244:src/xeq.c     **** 	}
 973              		.loc 1 244 67 is_stmt 0 view .LVU273
 974 0034 08BF     		it	eq
 975 0036 5210     		asreq	r2, r2, #1
 976              	.LVL75:
 244:src/xeq.c     **** 	}
 977              		.loc 1 244 67 view .LVU274
 978              	.LBE1399:
 979              	.LBE1400:
 980              	.LBE1401:
 981              	.LBE1403:
2140:src/xeq.c     **** 		return n;
 982              		.loc 1 2140 5 view .LVU275
ARM GAS  /tmp/cc7LeJ71.s 			page 101


 983 0038 9342     		cmp	r3, r2
 984 003a 06D9     		bls	.L72
2140:src/xeq.c     **** 		return n;
 985              		.loc 1 2140 31 discriminator 1 view .LVU276
 986 003c 6F28     		cmp	r0, #111
 987 003e 04D8     		bhi	.L72
 988              	.LBB1404:
 989              	.LBI1404:
2137:src/xeq.c     **** 	const int n = stack_size();
 990              		.loc 1 2137 12 is_stmt 1 view .LVU277
 991              	.LVL76:
 992              	.LBB1405:
2143:src/xeq.c     **** 	return 0;
 993              		.loc 1 2143 2 view .LVU278
 994              	.LBB1406:
 995              	.LBI1406:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 996              		.loc 1 546 5 view .LVU279
 997              	.LBB1407:
 547:src/xeq.c     **** 		Error = e;
 998              		.loc 1 547 2 view .LVU280
 547:src/xeq.c     **** 		Error = e;
 999              		.loc 1 547 12 is_stmt 0 view .LVU281
 1000 0040 0A4B     		ldr	r3, .L83+4
 1001 0042 1C68     		ldr	r4, [r3]
 1002              	.LVL77:
 547:src/xeq.c     **** 		Error = e;
 1003              		.loc 1 547 5 view .LVU282
 1004 0044 64B9     		cbnz	r4, .L80
 1005              	.LVL78:
 1006              	.LBB1408:
 1007              	.LBI1408:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1008              		.loc 1 546 5 is_stmt 1 view .LVU283
 1009              	.LBB1409:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1010              		.loc 1 548 3 view .LVU284
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1011              		.loc 1 548 9 is_stmt 0 view .LVU285
 1012 0046 0C22     		movs	r2, #12
 1013 0048 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1014              		.loc 1 549 3 is_stmt 1 view .LVU286
 1015              	.LVL79:
 1016              	.L72:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1017              		.loc 1 549 3 is_stmt 0 view .LVU287
 1018              	.LBE1409:
 1019              	.LBE1408:
 1020              	.LBE1407:
 1021              	.LBE1406:
 1022              	.LBE1405:
 1023              	.LBE1404:
2145:src/xeq.c     **** 
 1024              		.loc 1 2145 1 view .LVU288
 1025 004a 2046     		mov	r0, r4
 1026              	.LVL80:
ARM GAS  /tmp/cc7LeJ71.s 			page 102


2145:src/xeq.c     **** 
 1027              		.loc 1 2145 1 view .LVU289
 1028 004c 30BC     		pop	{r4, r5}
 1029              		.cfi_remember_state
 1030              		.cfi_restore 5
 1031              		.cfi_restore 4
 1032              		.cfi_def_cfa_offset 0
 1033 004e 7047     		bx	lr
 1034              	.LVL81:
 1035              	.L82:
 1036              		.cfi_restore_state
 1037              	.LBB1413:
 1038              	.LBB1386:
 713:src/xeq.c     **** 		return 4;
 1039              		.loc 1 713 44 view .LVU290
 1040 0050 074B     		ldr	r3, .L83+8
 713:src/xeq.c     **** 		return 4;
 1041              		.loc 1 713 41 view .LVU291
 1042 0052 93F90130 		ldrsb	r3, [r3, #1]
 1043 0056 002B     		cmp	r3, #0
 1044 0058 DEDB     		blt	.L79
 1045              	.L77:
 1046 005a 0423     		movs	r3, #4
 714:src/xeq.c     **** 	return 8;
 1047              		.loc 1 714 10 view .LVU292
 1048 005c 1C46     		mov	r4, r3
 1049 005e DDE7     		b	.L73
 1050              	.LVL82:
 1051              	.L80:
 714:src/xeq.c     **** 	return 8;
 1052              		.loc 1 714 10 view .LVU293
 1053              	.LBE1386:
 1054              	.LBE1413:
 1055              	.LBB1414:
 1056              	.LBB1412:
 1057              	.LBB1411:
 1058              	.LBB1410:
 1059 0060 0024     		movs	r4, #0
 1060              	.LVL83:
 714:src/xeq.c     **** 	return 8;
 1061              		.loc 1 714 10 view .LVU294
 1062              	.LBE1410:
 1063              	.LBE1411:
 1064              	.LBE1412:
 1065              	.LBE1414:
2145:src/xeq.c     **** 
 1066              		.loc 1 2145 1 view .LVU295
 1067 0062 2046     		mov	r0, r4
 1068              	.LVL84:
2145:src/xeq.c     **** 
 1069              		.loc 1 2145 1 view .LVU296
 1070 0064 30BC     		pop	{r4, r5}
 1071              		.cfi_restore 5
 1072              		.cfi_restore 4
 1073              		.cfi_def_cfa_offset 0
 1074 0066 7047     		bx	lr
 1075              	.L84:
ARM GAS  /tmp/cc7LeJ71.s 			page 103


 1076              		.align	2
 1077              	.L83:
 1078 0068 00000000 		.word	main_ram
 1079 006c 00000000 		.word	Error
 1080 0070 00000000 		.word	XromParams
 1081              		.cfi_endproc
 1082              	.LFE147:
 1084              		.section	.text.is_xrom,"ax",%progbits
 1085              		.align	1
 1086              		.p2align 2,,3
 1087              		.global	is_xrom
 1088              		.syntax unified
 1089              		.thumb
 1090              		.thumb_func
 1091              		.fpu fpv4-sp-d16
 1093              	is_xrom:
 1094              	.LFB3:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 1095              		.loc 1 185 19 is_stmt 1 view -0
 1096              		.cfi_startproc
 1097              		@ args = 0, pretend = 0, frame = 0
 1098              		@ frame_needed = 0, uses_anonymous_args = 0
 1099              		@ link register save eliminated.
 186:src/xeq.c     **** }
 1100              		.loc 1 186 2 view .LVU298
 186:src/xeq.c     **** }
 1101              		.loc 1 186 9 is_stmt 0 view .LVU299
 1102 0000 054B     		ldr	r3, .L86
 1103 0002 1B68     		ldr	r3, [r3]
 1104 0004 B3F8E007 		ldrh	r0, [r3, #2016]
 1105 0008 800B     		lsrs	r0, r0, #14
 187:src/xeq.c     **** 
 1106              		.loc 1 187 1 view .LVU300
 1107 000a A0F10300 		sub	r0, #3
 1108 000e B0FA80F0 		clz	r0, r0
 1109 0012 4009     		lsrs	r0, r0, #5
 1110 0014 7047     		bx	lr
 1111              	.L87:
 1112 0016 00BF     		.align	2
 1113              	.L86:
 1114 0018 00000000 		.word	main_ram
 1115              		.cfi_endproc
 1116              	.LFE3:
 1118              		.section	.text.move_retstk,"ax",%progbits
 1119              		.align	1
 1120              		.p2align 2,,3
 1121              		.global	move_retstk
 1122              		.syntax unified
 1123              		.thumb
 1124              		.thumb_func
 1125              		.fpu fpv4-sp-d16
 1127              	move_retstk:
 1128              	.LVL85:
 1129              	.LFB4:
 196:src/xeq.c     **** #ifndef REALBUILD
 1130              		.loc 1 196 1 is_stmt 1 view -0
 1131              		.cfi_startproc
ARM GAS  /tmp/cc7LeJ71.s 			page 104


 1132              		@ args = 0, pretend = 0, frame = 0
 1133              		@ frame_needed = 0, uses_anonymous_args = 0
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1134              		.loc 1 199 2 view .LVU302
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1135              		.loc 1 199 6 is_stmt 0 view .LVU303
 1136 0000 1A4B     		ldr	r3, .L99
 199:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 1137              		.loc 1 199 5 view .LVU304
 1138 0002 93F90130 		ldrsb	r3, [r3, #1]
 1139 0006 002B     		cmp	r3, #0
 1140 0008 25DB     		blt	.L97
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1141              		.loc 1 204 2 is_stmt 1 view .LVU305
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1142              		.loc 1 204 19 is_stmt 0 view .LVU306
 1143 000a 194B     		ldr	r3, .L99+4
 196:src/xeq.c     **** #ifndef REALBUILD
 1144              		.loc 1 196 1 view .LVU307
 1145 000c 70B5     		push	{r4, r5, r6, lr}
 1146              		.cfi_def_cfa_offset 16
 1147              		.cfi_offset 4, -16
 1148              		.cfi_offset 5, -12
 1149              		.cfi_offset 6, -8
 1150              		.cfi_offset 14, -4
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1151              		.loc 1 204 19 view .LVU308
 1152 000e 1A68     		ldr	r2, [r3]
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1153              		.loc 1 204 17 view .LVU309
 1154 0010 184D     		ldr	r5, .L99+8
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1155              		.loc 1 204 19 view .LVU310
 1156 0012 B2F9E217 		ldrsh	r1, [r2, #2018]
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1157              		.loc 1 204 17 view .LVU311
 1158 0016 2B68     		ldr	r3, [r5]
 1159 0018 0B44     		add	r3, r3, r1
 204:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 1160              		.loc 1 204 5 view .LVU312
 1161 001a C342     		cmn	r3, r0
 1162 001c 0446     		mov	r4, r0
 1163 001e 13D4     		bmi	.L98
 208:src/xeq.c     **** 	RetStk += distance;
 1164              		.loc 1 208 2 is_stmt 1 view .LVU313
 1165 0020 154E     		ldr	r6, .L99+12
 1166 0022 3368     		ldr	r3, [r6]
 208:src/xeq.c     **** 	RetStk += distance;
 1167              		.loc 1 208 27 is_stmt 0 view .LVU314
 1168 0024 0818     		adds	r0, r1, r0
 1169              	.LVL86:
 208:src/xeq.c     **** 	RetStk += distance;
 1170              		.loc 1 208 60 view .LVU315
 1171 0026 4A42     		rsbs	r2, r1, #0
 208:src/xeq.c     **** 	RetStk += distance;
 1172              		.loc 1 208 2 view .LVU316
 1173 0028 03EB4000 		add	r0, r3, r0, lsl #1
ARM GAS  /tmp/cc7LeJ71.s 			page 105


 1174 002c 03EB4101 		add	r1, r3, r1, lsl #1
 1175 0030 5200     		lsls	r2, r2, #1
 1176 0032 FFF7FEFF 		bl	xcopy
 1177              	.LVL87:
 209:src/xeq.c     **** 	RetStkSize += distance;
 1178              		.loc 1 209 2 is_stmt 1 view .LVU317
 209:src/xeq.c     **** 	RetStkSize += distance;
 1179              		.loc 1 209 9 is_stmt 0 view .LVU318
 1180 0036 3368     		ldr	r3, [r6]
 210:src/xeq.c     **** 	return 0;
 1181              		.loc 1 210 13 view .LVU319
 1182 0038 2868     		ldr	r0, [r5]
 209:src/xeq.c     **** 	RetStkSize += distance;
 1183              		.loc 1 209 9 view .LVU320
 1184 003a 03EB4403 		add	r3, r3, r4, lsl #1
 210:src/xeq.c     **** 	return 0;
 1185              		.loc 1 210 13 view .LVU321
 1186 003e 2044     		add	r0, r0, r4
 1187 0040 2860     		str	r0, [r5]
 209:src/xeq.c     **** 	RetStkSize += distance;
 1188              		.loc 1 209 9 view .LVU322
 1189 0042 3360     		str	r3, [r6]
 210:src/xeq.c     **** 	return 0;
 1190              		.loc 1 210 2 is_stmt 1 view .LVU323
 211:src/xeq.c     **** }
 1191              		.loc 1 211 2 view .LVU324
 211:src/xeq.c     **** }
 1192              		.loc 1 211 9 is_stmt 0 view .LVU325
 1193 0044 0020     		movs	r0, #0
 212:src/xeq.c     **** 
 1194              		.loc 1 212 1 view .LVU326
 1195 0046 70BD     		pop	{r4, r5, r6, pc}
 1196              	.LVL88:
 1197              	.L98:
 205:src/xeq.c     **** 		return 1;
 1198              		.loc 1 205 3 is_stmt 1 view .LVU327
 1199              	.LBB1427:
 1200              	.LBI1427:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1201              		.loc 1 546 5 view .LVU328
 1202              	.LBB1428:
 547:src/xeq.c     **** 		Error = e;
 1203              		.loc 1 547 2 view .LVU329
 547:src/xeq.c     **** 		Error = e;
 1204              		.loc 1 547 12 is_stmt 0 view .LVU330
 1205 0048 0C4B     		ldr	r3, .L99+16
 547:src/xeq.c     **** 		Error = e;
 1206              		.loc 1 547 5 view .LVU331
 1207 004a 1A68     		ldr	r2, [r3]
 1208 004c 52B9     		cbnz	r2, .L93
 1209              	.LVL89:
 1210              	.LBB1429:
 1211              	.LBI1429:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1212              		.loc 1 546 5 is_stmt 1 view .LVU332
 1213              	.LBB1430:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/cc7LeJ71.s 			page 106


 1214              		.loc 1 548 3 view .LVU333
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1215              		.loc 1 548 9 is_stmt 0 view .LVU334
 1216 004e 0B22     		movs	r2, #11
 1217 0050 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1218              		.loc 1 549 3 is_stmt 1 view .LVU335
 1219              	.LBE1430:
 1220              	.LBE1429:
 1221              	.LBE1428:
 1222              	.LBE1427:
 206:src/xeq.c     **** 	}
 1223              		.loc 1 206 10 is_stmt 0 view .LVU336
 1224 0052 0120     		movs	r0, #1
 1225              	.LVL90:
 212:src/xeq.c     **** 
 1226              		.loc 1 212 1 view .LVU337
 1227 0054 70BD     		pop	{r4, r5, r6, pc}
 1228              	.LVL91:
 1229              	.L97:
 1230              		.cfi_def_cfa_offset 0
 1231              		.cfi_restore 4
 1232              		.cfi_restore 5
 1233              		.cfi_restore 6
 1234              		.cfi_restore 14
 1235              	.LBB1432:
 1236              	.LBI1432:
 195:src/xeq.c     **** {
 1237              		.loc 1 195 5 is_stmt 1 view .LVU338
 195:src/xeq.c     **** {
 1238              		.loc 1 195 5 is_stmt 0 view .LVU339
 1239              	.LBE1432:
 200:src/xeq.c     **** 		return 1;
 1240              		.loc 1 200 3 is_stmt 1 view .LVU340
 1241              	.LBB1439:
 1242              	.LBB1433:
 1243              	.LBI1433:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1244              		.loc 1 546 5 view .LVU341
 1245              	.LBB1434:
 547:src/xeq.c     **** 		Error = e;
 1246              		.loc 1 547 2 view .LVU342
 547:src/xeq.c     **** 		Error = e;
 1247              		.loc 1 547 12 is_stmt 0 view .LVU343
 1248 0056 094B     		ldr	r3, .L99+16
 547:src/xeq.c     **** 		Error = e;
 1249              		.loc 1 547 5 view .LVU344
 1250 0058 1A68     		ldr	r2, [r3]
 1251 005a 2AB9     		cbnz	r2, .L92
 1252              	.LVL92:
 1253              	.LBB1435:
 1254              	.LBI1435:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 1255              		.loc 1 546 5 is_stmt 1 view .LVU345
 1256              	.LBB1436:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1257              		.loc 1 548 3 view .LVU346
ARM GAS  /tmp/cc7LeJ71.s 			page 107


 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1258              		.loc 1 548 9 is_stmt 0 view .LVU347
 1259 005c 0722     		movs	r2, #7
 1260 005e 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 1261              		.loc 1 549 3 is_stmt 1 view .LVU348
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1262              		.loc 1 548 9 is_stmt 0 view .LVU349
 1263 0060 0120     		movs	r0, #1
 1264              	.LVL93:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1265              		.loc 1 548 9 view .LVU350
 1266 0062 7047     		bx	lr
 1267              	.LVL94:
 1268              	.L93:
 1269              		.cfi_def_cfa_offset 16
 1270              		.cfi_offset 4, -16
 1271              		.cfi_offset 5, -12
 1272              		.cfi_offset 6, -8
 1273              		.cfi_offset 14, -4
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1274              		.loc 1 548 9 view .LVU351
 1275              	.LBE1436:
 1276              	.LBE1435:
 1277              	.LBE1434:
 1278              	.LBE1433:
 1279              	.LBE1439:
 1280              	.LBB1440:
 1281              	.LBB1431:
 1282 0064 0120     		movs	r0, #1
 1283              	.LVL95:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 1284              		.loc 1 548 9 view .LVU352
 1285              	.LBE1431:
 1286              	.LBE1440:
 212:src/xeq.c     **** 
 1287              		.loc 1 212 1 view .LVU353
 1288 0066 70BD     		pop	{r4, r5, r6, pc}
 1289              	.LVL96:
 1290              	.L92:
 1291              		.cfi_def_cfa_offset 0
 1292              		.cfi_restore 4
 1293              		.cfi_restore 5
 1294              		.cfi_restore 6
 1295              		.cfi_restore 14
 1296              	.LBB1441:
 1297              	.LBB1438:
 1298              	.LBB1437:
 212:src/xeq.c     **** 
 1299              		.loc 1 212 1 view .LVU354
 1300 0068 0120     		movs	r0, #1
 1301              	.LVL97:
 212:src/xeq.c     **** 
 1302              		.loc 1 212 1 view .LVU355
 1303              	.LBE1437:
 1304              	.LBE1438:
 1305              	.LBE1441:
ARM GAS  /tmp/cc7LeJ71.s 			page 108


 1306 006a 7047     		bx	lr
 1307              	.L100:
 1308              		.align	2
 1309              	.L99:
 1310 006c 00000000 		.word	XromParams
 1311 0070 00000000 		.word	main_ram
 1312 0074 00000000 		.word	RetStkSize
 1313 0078 00000000 		.word	RetStk
 1314 007c 00000000 		.word	Error
 1315              		.cfi_endproc
 1316              	.LFE4:
 1318              		.section	.text.local_levels,"ax",%progbits
 1319              		.align	1
 1320              		.p2align 2,,3
 1321              		.global	local_levels
 1322              		.syntax unified
 1323              		.thumb
 1324              		.thumb_func
 1325              		.fpu fpv4-sp-d16
 1327              	local_levels:
 1328              	.LFB5:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1329              		.loc 1 217 24 is_stmt 1 view -0
 1330              		.cfi_startproc
 1331              		@ args = 0, pretend = 0, frame = 0
 1332              		@ frame_needed = 0, uses_anonymous_args = 0
 1333              		@ link register save eliminated.
 218:src/xeq.c     **** }
 1334              		.loc 1 218 2 view .LVU357
 218:src/xeq.c     **** }
 1335              		.loc 1 218 9 is_stmt 0 view .LVU358
 1336 0000 084B     		ldr	r3, .L105
 1337 0002 1B68     		ldr	r3, [r3]
 1338 0004 B3F8DE37 		ldrh	r3, [r3, #2014]
 1339 0008 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 1340              		.loc 1 218 57 view .LVU359
 1341 000c 002B     		cmp	r3, #0
 1342 000e 01DB     		blt	.L104
 1343 0010 0020     		movs	r0, #0
 219:src/xeq.c     **** 
 1344              		.loc 1 219 1 view .LVU360
 1345 0012 7047     		bx	lr
 1346              	.L104:
 218:src/xeq.c     **** }
 1347              		.loc 1 218 25 discriminator 1 view .LVU361
 1348 0014 044A     		ldr	r2, .L105+4
 1349 0016 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 1350              		.loc 1 218 57 discriminator 1 view .LVU362
 1351 0018 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 1352 001c C0F30B00 		ubfx	r0, r0, #0, #12
 1353 0020 7047     		bx	lr
 1354              	.L106:
 1355 0022 00BF     		.align	2
 1356              	.L105:
 1357 0024 00000000 		.word	main_ram
ARM GAS  /tmp/cc7LeJ71.s 			page 109


 1358 0028 00000000 		.word	RetStk
 1359              		.cfi_endproc
 1360              	.LFE5:
 1362              		.section	.text.local_regs_rarg,"ax",%progbits
 1363              		.align	1
 1364              		.p2align 2,,3
 1365              		.global	local_regs_rarg
 1366              		.syntax unified
 1367              		.thumb
 1368              		.thumb_func
 1369              		.fpu fpv4-sp-d16
 1371              	local_regs_rarg:
 1372              	.LVL98:
 1373              	.LFB6:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1374              		.loc 1 225 35 is_stmt 1 view -0
 1375              		.cfi_startproc
 1376              		@ args = 0, pretend = 0, frame = 0
 1377              		@ frame_needed = 0, uses_anonymous_args = 0
 1378              		@ link register save eliminated.
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1379              		.loc 1 226 2 view .LVU364
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1380              		.loc 1 226 53 is_stmt 0 view .LVU365
 1381 0000 A0F17E03 		sub	r3, r0, #126
 1382 0004 012B     		cmp	r3, #1
 1383 0006 164B     		ldr	r3, .L116
 1384 0008 27D9     		bls	.L113
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1385              		.loc 1 226 53 discriminator 1 view .LVU366
 1386 000a 8028     		cmp	r0, #128
 1387 000c 13D0     		beq	.L114
 1388              	.LBB1442:
 1389              	.LBI1442:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1390              		.loc 1 1118 5 is_stmt 1 view .LVU367
 1391              	.LBB1443:
1119:src/xeq.c     **** }
 1392              		.loc 1 1119 2 view .LVU368
1119:src/xeq.c     **** }
 1393              		.loc 1 1119 12 is_stmt 0 view .LVU369
 1394 000e 1B68     		ldr	r3, [r3]
1119:src/xeq.c     **** }
 1395              		.loc 1 1119 24 view .LVU370
 1396 0010 B3F8E827 		ldrh	r2, [r3, #2024]
 1397 0014 44F20100 		movw	r0, #16385
 1398              	.LVL99:
1119:src/xeq.c     **** }
 1399              		.loc 1 1119 24 view .LVU371
 1400              	.LBE1443:
 1401              	.LBE1442:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1402              		.loc 1 226 73 view .LVU372
 1403 0018 1040     		ands	r0, r0, r2
 1404 001a A0F58040 		sub	r0, r0, #16384
 1405 001e B0FA80F0 		clz	r0, r0
 1406 0022 4009     		lsrs	r0, r0, #5
ARM GAS  /tmp/cc7LeJ71.s 			page 110


 1407 0024 0230     		adds	r0, r0, #2
 1408              	.L109:
 227:src/xeq.c     **** }
 1409              		.loc 1 227 2 is_stmt 1 discriminator 8 view .LVU373
 1410              	.LBB1444:
 1411              	.LBI1444:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1412              		.loc 1 217 5 discriminator 8 view .LVU374
 1413              	.LBB1445:
 218:src/xeq.c     **** }
 1414              		.loc 1 218 2 discriminator 8 view .LVU375
 218:src/xeq.c     **** }
 1415              		.loc 1 218 9 is_stmt 0 discriminator 8 view .LVU376
 1416 0026 B3F8DE37 		ldrh	r3, [r3, #2014]
 1417 002a 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 1418              		.loc 1 218 57 discriminator 8 view .LVU377
 1419 002e 002B     		cmp	r3, #0
 1420 0030 0ADB     		blt	.L115
 1421              	.L112:
 1422 0032 0020     		movs	r0, #0
 1423              	.LBE1445:
 1424              	.LBE1444:
 228:src/xeq.c     **** 
 1425              		.loc 1 228 1 view .LVU378
 1426 0034 7047     		bx	lr
 1427              	.LVL100:
 1428              	.L114:
 228:src/xeq.c     **** 
 1429              		.loc 1 228 1 view .LVU379
 1430 0036 1B68     		ldr	r3, [r3]
 227:src/xeq.c     **** }
 1431              		.loc 1 227 2 is_stmt 1 view .LVU380
 1432              	.LBB1448:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1433              		.loc 1 217 5 view .LVU381
 1434              	.LBB1446:
 218:src/xeq.c     **** }
 1435              		.loc 1 218 2 view .LVU382
 218:src/xeq.c     **** }
 1436              		.loc 1 218 9 is_stmt 0 view .LVU383
 1437 0038 B3F8DE37 		ldrh	r3, [r3, #2014]
 1438 003c 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 1439              		.loc 1 218 57 view .LVU384
 1440 0040 002B     		cmp	r3, #0
 1441              	.LBE1446:
 1442              	.LBE1448:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1443              		.loc 1 226 53 view .LVU385
 1444 0042 4FF00300 		mov	r0, #3
 1445              	.LVL101:
 1446              	.LBB1449:
 1447              	.LBB1447:
 218:src/xeq.c     **** }
 1448              		.loc 1 218 57 view .LVU386
 1449 0046 F4DA     		bge	.L112
ARM GAS  /tmp/cc7LeJ71.s 			page 111


 1450              	.L115:
 218:src/xeq.c     **** }
 1451              		.loc 1 218 25 view .LVU387
 1452 0048 064A     		ldr	r2, .L116+4
 1453 004a 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 1454              		.loc 1 218 57 view .LVU388
 1455 004c 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 1456 0050 C3F30B03 		ubfx	r3, r3, #0, #12
 1457 0054 43FA00F0 		asr	r0, r3, r0
 1458 0058 7047     		bx	lr
 1459              	.LVL102:
 1460              	.L113:
 218:src/xeq.c     **** }
 1461              		.loc 1 218 57 view .LVU389
 1462 005a 1B68     		ldr	r3, [r3]
 1463              	.LBE1447:
 1464              	.LBE1449:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1465              		.loc 1 226 53 view .LVU390
 1466 005c 0220     		movs	r0, #2
 1467              	.LVL103:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1468              		.loc 1 226 53 view .LVU391
 1469 005e E2E7     		b	.L109
 1470              	.L117:
 1471              		.align	2
 1472              	.L116:
 1473 0060 00000000 		.word	main_ram
 1474 0064 00000000 		.word	RetStk
 1475              		.cfi_endproc
 1476              	.LFE6:
 1478              		.section	.text.get_reg_limit,"ax",%progbits
 1479              		.align	1
 1480              		.p2align 2,,3
 1481              		.syntax unified
 1482              		.thumb
 1483              		.thumb_func
 1484              		.fpu fpv4-sp-d16
 1486              	get_reg_limit:
 1487              	.LVL104:
 1488              	.LFB248:
4559:src/xeq.c     **** 
4560:src/xeq.c     **** 
4561:src/xeq.c     **** #ifndef UNIVERSAL_DISPATCH
4562:src/xeq.c     **** 
4563:src/xeq.c     **** 
4564:src/xeq.c     **** /*
4565:src/xeq.c     ****  *  Call a monadic function by reusing the decimal code for integer mode
4566:src/xeq.c     ****  */
4567:src/xeq.c     **** long long int intMonadic(long long int x) {
4568:src/xeq.c     **** 	int s;
4569:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
4570:src/xeq.c     **** 	decNumber rx, r;
4571:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4572:src/xeq.c     **** 
4573:src/xeq.c     **** 	if (isNULL(monfuncs[f].mondreal))
ARM GAS  /tmp/cc7LeJ71.s 			page 112


4574:src/xeq.c     **** 		bad_mode_error();
4575:src/xeq.c     **** 	else {
4576:src/xeq.c     **** 		FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4577:src/xeq.c     **** #ifndef REALBUILD
4578:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4579:src/xeq.c     **** 			bad_mode_error();
4580:src/xeq.c     **** 		else 
4581:src/xeq.c     **** #endif
4582:src/xeq.c     **** 		{
4583:src/xeq.c     **** 			ullint_to_dn(&rx, vx);
4584:src/xeq.c     **** 			if (s)
4585:src/xeq.c     **** 				dn_minus(&rx, &rx);
4586:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
4587:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4588:src/xeq.c     **** 			else
4589:src/xeq.c     **** 				return intResult(&r);
4590:src/xeq.c     **** 		}
4591:src/xeq.c     **** 	}
4592:src/xeq.c     **** 	return 0;
4593:src/xeq.c     **** }
4594:src/xeq.c     **** 
4595:src/xeq.c     **** /*
4596:src/xeq.c     ****  *  Call a dyadic function by reusing the decimal code for integer mode
4597:src/xeq.c     ****  */
4598:src/xeq.c     **** long long int intDyadic(long long int y, long long int x) {
4599:src/xeq.c     **** 	int sx, sy;
4600:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4601:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
4602:src/xeq.c     **** 	decNumber rx, ry, r;
4603:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4604:src/xeq.c     **** 
4605:src/xeq.c     **** 	if (isNULL(dyfuncs[f].dydreal))
4606:src/xeq.c     **** 		bad_mode_error();
4607:src/xeq.c     **** 	else {
4608:src/xeq.c     **** 		FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4609:src/xeq.c     **** 
4610:src/xeq.c     **** #ifndef REALBUILD
4611:src/xeq.c     **** 		if (check_for_xrom_address(fp) != NULL)
4612:src/xeq.c     **** 			bad_mode_error();
4613:src/xeq.c     **** 		else 
4614:src/xeq.c     **** #endif
4615:src/xeq.c     **** 		{
4616:src/xeq.c     **** 			ullint_to_dn(&rx, vx);	if (sx) dn_minus(&rx, &rx);
4617:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
4618:src/xeq.c     **** 
4619:src/xeq.c     **** 			if (NULL == fp(&r, &ry, &rx))
4620:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4621:src/xeq.c     **** 			else
4622:src/xeq.c     **** 				return intResult(&r);
4623:src/xeq.c     **** 		}
4624:src/xeq.c     **** 	}
4625:src/xeq.c     **** 	return 0;
4626:src/xeq.c     **** }
4627:src/xeq.c     **** 
4628:src/xeq.c     **** 
4629:src/xeq.c     **** /* Dispatch routine for niladic functions.
4630:src/xeq.c     ****  */
ARM GAS  /tmp/cc7LeJ71.s 			page 113


4631:src/xeq.c     **** static void niladic(const opcode op) {
4632:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
4633:src/xeq.c     **** 
4634:src/xeq.c     **** 	process_cmdline();
4635:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
4636:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
4637:src/xeq.c     **** 			bad_mode_error();
4638:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
4639:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
4640:src/xeq.c     **** 			if (dispatch_xrom(fp))
4641:src/xeq.c     **** 				return;
4642:src/xeq.c     **** 			else {
4643:src/xeq.c     **** 				switch (NILADIC_NUMRESULTS(niladics[idx])) {
4644:src/xeq.c     **** 				case 2:	lift_if_enabled();
4645:src/xeq.c     **** 				case 1:	lift_if_enabled();
4646:src/xeq.c     **** 				default:
4647:src/xeq.c     **** 					fp((enum nilop)idx);
4648:src/xeq.c     **** 					break;
4649:src/xeq.c     **** 				}
4650:src/xeq.c     **** 			}
4651:src/xeq.c     **** 		}
4652:src/xeq.c     **** 	} else
4653:src/xeq.c     **** 		illegal(op);
4654:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
4655:src/xeq.c     **** 	if (ENTRY_RPN_ENABLED && (idx != OP_rCLX)) {
4656:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
4657:src/xeq.c     **** 	}
4658:src/xeq.c     **** 	else if ( (idx != OP_rCLX) && ( ((idx != OP_CENTER) ) && (C_LOCKED) ) ) {
4659:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
4660:src/xeq.c     **** 	}
4661:src/xeq.c     **** #else
4662:src/xeq.c     **** 	if (idx != OP_rCLX) set_lift();// normally, just don't turn on lift after CLX
4663:src/xeq.c     **** #endif
4664:src/xeq.c     **** }
4665:src/xeq.c     **** 
4666:src/xeq.c     **** 
4667:src/xeq.c     **** /* Dispatch routine for monadic operations.
4668:src/xeq.c     ****  * Since these functions take an argument from the X register, save it in
4669:src/xeq.c     ****  * lastx and then replace it with their result, we can factor out the common
4670:src/xeq.c     ****  * stack manipulatin code.
4671:src/xeq.c     ****  */
4672:src/xeq.c     **** static void monadic(const opcode op)
4673:src/xeq.c     **** {
4674:src/xeq.c     **** 	unsigned int f;
4675:src/xeq.c     **** 	process_cmdline_set_lift();
4676:src/xeq.c     **** 
4677:src/xeq.c     **** 	f = argKIND(op);
4678:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4679:src/xeq.c     **** 		if (is_intmode()) {
4680:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
4681:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
4682:src/xeq.c     **** 				if (dispatch_xrom(fp))
4683:src/xeq.c     **** 					return;
4684:src/xeq.c     **** 				else {
4685:src/xeq.c     **** 					long long int x = getX_int();
4686:src/xeq.c     **** 					x = fp(x);
4687:src/xeq.c     **** 					setlastX();
ARM GAS  /tmp/cc7LeJ71.s 			page 114


4688:src/xeq.c     **** 					setX_int(x);
4689:src/xeq.c     **** 				}
4690:src/xeq.c     **** 			} else
4691:src/xeq.c     **** 				bad_mode_error();
4692:src/xeq.c     **** 		} else {
4693:src/xeq.c     **** 			if (! isNULL(monfuncs[f].mondreal)) {
4694:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
4695:src/xeq.c     **** 				if (dispatch_xrom(fp))
4696:src/xeq.c     **** 					return;
4697:src/xeq.c     **** 				else {
4698:src/xeq.c     **** 					decNumber x, r;
4699:src/xeq.c     **** 					getX(&x);
4700:src/xeq.c     **** 					if (NULL == fp(&r, &x))
4701:src/xeq.c     **** 						set_NaN(&r);
4702:src/xeq.c     **** 					setlastX();
4703:src/xeq.c     **** 					setX(&r);
4704:src/xeq.c     **** 				}
4705:src/xeq.c     **** 			} else
4706:src/xeq.c     **** 				bad_mode_error();
4707:src/xeq.c     **** 		}
4708:src/xeq.c     **** 	} else
4709:src/xeq.c     **** 		illegal(op);
4710:src/xeq.c     **** }
4711:src/xeq.c     **** 
4712:src/xeq.c     **** static void monadic_cmplex(const opcode op) {
4713:src/xeq.c     **** 	decNumber x, y, rx, ry;
4714:src/xeq.c     **** 	unsigned int f;
4715:src/xeq.c     **** 
4716:src/xeq.c     **** 	process_cmdline_set_lift();
4717:src/xeq.c     **** 
4718:src/xeq.c     **** 	f = argKIND(op);
4719:src/xeq.c     **** 
4720:src/xeq.c     **** 	if (f < NUM_MONADIC) {
4721:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
4722:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
4723:src/xeq.c     **** 			if (dispatch_xrom(fp))
4724:src/xeq.c     **** 				return;
4725:src/xeq.c     **** 			else {
4726:src/xeq.c     **** 				getXY(&x, &y);
4727:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
4728:src/xeq.c     **** 				setlastXY();
4729:src/xeq.c     **** 				setXY(&rx, &ry);
4730:src/xeq.c     **** 				set_was_complex();
4731:src/xeq.c     **** 			}
4732:src/xeq.c     **** 		} else
4733:src/xeq.c     **** 			bad_mode_error();
4734:src/xeq.c     **** 	} else
4735:src/xeq.c     **** 		illegal(op);
4736:src/xeq.c     **** }
4737:src/xeq.c     **** 
4738:src/xeq.c     **** /***************************************************************************
4739:src/xeq.c     ****  * Dyadic function handling.
4740:src/xeq.c     ****  */
4741:src/xeq.c     **** 
4742:src/xeq.c     **** /* Dispatch routine for dyadic operations.
4743:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4744:src/xeq.c     ****  * common stack manipulation.
ARM GAS  /tmp/cc7LeJ71.s 			page 115


4745:src/xeq.c     ****  */
4746:src/xeq.c     **** static void dyadic(const opcode op) {
4747:src/xeq.c     **** 
4748:src/xeq.c     **** 	unsigned int f;
4749:src/xeq.c     **** 	process_cmdline_set_lift();
4750:src/xeq.c     **** 
4751:src/xeq.c     **** 	f = argKIND(op);
4752:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4753:src/xeq.c     **** 		if (is_intmode()) {
4754:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
4755:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
4756:src/xeq.c     **** 				if (dispatch_xrom(fp))
4757:src/xeq.c     **** 					return;
4758:src/xeq.c     **** 				else {
4759:src/xeq.c     **** 					long long int x = getX_int();
4760:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4761:src/xeq.c     **** 					x = fp(y, x);
4762:src/xeq.c     **** 					setlastX();
4763:src/xeq.c     **** 					lower();
4764:src/xeq.c     **** 					setX_int(x);
4765:src/xeq.c     **** 				}
4766:src/xeq.c     **** 			} else
4767:src/xeq.c     **** 				bad_mode_error();
4768:src/xeq.c     **** 		} else {
4769:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydreal)) {
4770:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
4771:src/xeq.c     **** 				if (dispatch_xrom(fp))
4772:src/xeq.c     **** 					return;
4773:src/xeq.c     **** 				else {
4774:src/xeq.c     **** 					decNumber x, y, r;
4775:src/xeq.c     **** 					getXY(&x, &y);
4776:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
4777:src/xeq.c     **** 						set_NaN(&r);
4778:src/xeq.c     **** 					setlastX();
4779:src/xeq.c     **** 					lower();
4780:src/xeq.c     **** 					setX(&r);
4781:src/xeq.c     **** 				}
4782:src/xeq.c     **** 			} else
4783:src/xeq.c     **** 				bad_mode_error();
4784:src/xeq.c     **** 		}
4785:src/xeq.c     **** 	} else
4786:src/xeq.c     **** 		illegal(op);
4787:src/xeq.c     **** }
4788:src/xeq.c     **** 
4789:src/xeq.c     **** static void dyadic_cmplex(const opcode op) {
4790:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
4791:src/xeq.c     **** 	unsigned int f;
4792:src/xeq.c     **** 
4793:src/xeq.c     **** 	process_cmdline_set_lift();
4794:src/xeq.c     **** 
4795:src/xeq.c     **** 	f = argKIND(op);
4796:src/xeq.c     **** 	if (f < NUM_DYADIC) {
4797:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
4798:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
4799:src/xeq.c     **** 			if (dispatch_xrom(fp))
4800:src/xeq.c     **** 				return;
4801:src/xeq.c     **** 			else {
ARM GAS  /tmp/cc7LeJ71.s 			page 116


4802:src/xeq.c     **** 				getXYZT(&x1, &y1, &x2, &y2);
4803:src/xeq.c     **** 
4804:src/xeq.c     **** 				fp(&xr, &yr, &x2, &y2, &x1, &y1);
4805:src/xeq.c     **** 
4806:src/xeq.c     **** 				setlastXY();
4807:src/xeq.c     **** 				lower2();
4808:src/xeq.c     **** 				setXY(&xr, &yr);
4809:src/xeq.c     **** 				set_was_complex();
4810:src/xeq.c     **** 			}
4811:src/xeq.c     **** 		} else
4812:src/xeq.c     **** 			bad_mode_error();
4813:src/xeq.c     **** 	} else
4814:src/xeq.c     **** 		illegal(op);
4815:src/xeq.c     **** }
4816:src/xeq.c     **** 
4817:src/xeq.c     **** /* Dispatch routine for triadic operations.
4818:src/xeq.c     ****  * Again, these functions have a common argument decode and record and
4819:src/xeq.c     ****  * common stack manipulation.
4820:src/xeq.c     ****  */
4821:src/xeq.c     **** static void triadic(const opcode op) {
4822:src/xeq.c     **** 	unsigned int f;
4823:src/xeq.c     **** 	process_cmdline_set_lift();
4824:src/xeq.c     **** 
4825:src/xeq.c     **** 	f = argKIND(op);
4826:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
4827:src/xeq.c     **** 		if (is_intmode()) {
4828:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
4829:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
4830:src/xeq.c     **** 				if (dispatch_xrom(fp))
4831:src/xeq.c     **** 					return;
4832:src/xeq.c     **** 				else {
4833:src/xeq.c     **** 					long long int x = getX_int();
4834:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
4835:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
4836:src/xeq.c     **** 					x = fp(z, y, x);
4837:src/xeq.c     **** 					setlastX();
4838:src/xeq.c     **** 					lower();
4839:src/xeq.c     **** 					lower();
4840:src/xeq.c     **** 					setX_int(x);
4841:src/xeq.c     **** 				}
4842:src/xeq.c     **** 			} else
4843:src/xeq.c     **** 				bad_mode_error();
4844:src/xeq.c     **** 		} else {
4845:src/xeq.c     **** 			if (! isNULL(trifuncs[f].trireal)) {
4846:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
4847:src/xeq.c     **** 				if (dispatch_xrom(fp))
4848:src/xeq.c     **** 					return;
4849:src/xeq.c     **** 				else {
4850:src/xeq.c     **** 					decNumber x, y, z, r;
4851:src/xeq.c     **** 					getXYZ(&x, &y, &z);
4852:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
4853:src/xeq.c     **** 						set_NaN(&r);
4854:src/xeq.c     **** 					setlastX();
4855:src/xeq.c     **** 					lower();
4856:src/xeq.c     **** 					lower();
4857:src/xeq.c     **** 					setX(&r);
4858:src/xeq.c     **** 				}
ARM GAS  /tmp/cc7LeJ71.s 			page 117


4859:src/xeq.c     **** 			} else
4860:src/xeq.c     **** 				bad_mode_error();
4861:src/xeq.c     **** 		}
4862:src/xeq.c     **** 	} else
4863:src/xeq.c     **** 		illegal(op);
4864:src/xeq.c     **** }
4865:src/xeq.c     **** 
4866:src/xeq.c     **** 
4867:src/xeq.c     **** #else // UNIVERSAL_DISPATCH
4868:src/xeq.c     **** 
4869:src/xeq.c     **** 
4870:src/xeq.c     **** /*
4871:src/xeq.c     ****  *  Call functions by reusing the decimal code for integer mode
4872:src/xeq.c     ****  */
4873:src/xeq.c     **** static long long int universal_dispatch_int(long long int y, long long int x, unsigned int dyadic)
4874:src/xeq.c     **** {
4875:src/xeq.c     **** 	int sx, sy;
4876:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
4877:src/xeq.c     **** 	unsigned long long int vy;
4878:src/xeq.c     **** 	decNumber rx, ry, r;
4879:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
4880:src/xeq.c     **** 	void (*function_pointer)(void);
4881:src/xeq.c     **** 
4882:src/xeq.c     **** #ifdef SHORT_POINTERS
4883:src/xeq.c     **** 	unsigned short compact_pointer;
4884:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4885:src/xeq.c     **** #else
4886:src/xeq.c     **** 	void (*compact_pointer)(void);
4887:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4888:src/xeq.c     **** #endif
4889:src/xeq.c     **** 
4890:src/xeq.c     **** 	if (dyadic) {
4891:src/xeq.c     **** 		vy = extract_value(y, &sy);
4892:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4893:src/xeq.c     **** 	}
4894:src/xeq.c     **** 	else {
4895:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4896:src/xeq.c     **** 	}
4897:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
4898:src/xeq.c     **** 		bad_mode_error();
4899:src/xeq.c     **** 	}
4900:src/xeq.c     **** 	else {
4901:src/xeq.c     **** 		function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
4902:src/xeq.c     **** #ifndef REALBUILD
4903:src/xeq.c     **** 		if (check_for_xrom_address(function_pointer) != NULL) {
4904:src/xeq.c     **** 			bad_mode_error();
4905:src/xeq.c     **** 		}
4906:src/xeq.c     **** 		else
4907:src/xeq.c     **** #endif
4908:src/xeq.c     **** 		{
4909:src/xeq.c     **** 			void *result;
4910:src/xeq.c     **** 
4911:src/xeq.c     **** 			ullint_to_dn(&rx, vx);		if (sx) dn_minus(&rx, &rx);
4912:src/xeq.c     **** 			if (dyadic) {
4913:src/xeq.c     **** 				ullint_to_dn(&ry, vy);		if (sy) dn_minus(&ry, &ry);
4914:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r, &ry, &rx);
4915:src/xeq.c     **** 			}
ARM GAS  /tmp/cc7LeJ71.s 			page 118


4916:src/xeq.c     **** 			else {
4917:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r, &rx);
4918:src/xeq.c     **** 			}
4919:src/xeq.c     **** 			if (NULL == result) {
4920:src/xeq.c     **** 				report_err(ERR_DOMAIN);
4921:src/xeq.c     **** 			}
4922:src/xeq.c     **** 			else {
4923:src/xeq.c     **** 				return intResult(&r);
4924:src/xeq.c     **** 			}
4925:src/xeq.c     **** 		}
4926:src/xeq.c     **** 	}
4927:src/xeq.c     **** 	return 0;
4928:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
4929:src/xeq.c     **** }
4930:src/xeq.c     **** 
4931:src/xeq.c     **** 
4932:src/xeq.c     **** long long int intMonadic(long long int x)
4933:src/xeq.c     **** {
4934:src/xeq.c     **** 	return universal_dispatch_int(0, x, 0);
4935:src/xeq.c     **** }
4936:src/xeq.c     **** 
4937:src/xeq.c     **** long long int intDyadic(long long int y, long long int x)
4938:src/xeq.c     **** {
4939:src/xeq.c     **** 	return universal_dispatch_int(y, x, 1);
4940:src/xeq.c     **** }
4941:src/xeq.c     **** 
4942:src/xeq.c     **** 
4943:src/xeq.c     **** /*
4944:src/xeq.c     ****  *  Universal dispatch function for niladic, monadic, dyadic and triadic functions, both real and c
4945:src/xeq.c     ****  */
4946:src/xeq.c     **** static void universal_dispatch(const opcode op, const unsigned int operands, const unsigned int com
4947:src/xeq.c     **** {
4948:src/xeq.c     **** 	const int intmode = is_intmode();
4949:src/xeq.c     **** 	volatile long long int ix; // declared volatile to avoid bogus warning about variable possibly bei
4950:src/xeq.c     **** 	const unsigned int f = argKIND(op);
4951:src/xeq.c     **** 	void (*function_pointer)(void);
4952:src/xeq.c     **** 
4953:src/xeq.c     **** #ifdef SHORT_POINTERS
4954:src/xeq.c     **** 	unsigned short compact_pointer;
4955:src/xeq.c     **** #  define COMPACT_POINTER_TYPE unsigned short
4956:src/xeq.c     **** #else
4957:src/xeq.c     **** 	void (*compact_pointer)(void);
4958:src/xeq.c     **** #  define COMPACT_POINTER_TYPE void (*)(void)
4959:src/xeq.c     **** #endif
4960:src/xeq.c     **** 
4961:src/xeq.c     **** 	process_cmdline();
4962:src/xeq.c     **** 	if (operands != 0) {
4963:src/xeq.c     **** 		set_lift();
4964:src/xeq.c     **** 	}
4965:src/xeq.c     **** 	switch (operands) {
4966:src/xeq.c     **** 	default:
4967:src/xeq.c     **** 	case 0:
4968:src/xeq.c     **** 		if (f >= NUM_NILADIC) {
4969:src/xeq.c     **** illegal:
4970:src/xeq.c     **** 			illegal(op);
4971:src/xeq.c     **** 			goto finish_niladic;
4972:src/xeq.c     **** 		}
ARM GAS  /tmp/cc7LeJ71.s 			page 119


4973:src/xeq.c     **** 		if (intmode && NILADIC_NOTINT(niladics[f])) {
4974:src/xeq.c     **** 			goto bad_mode;
4975:src/xeq.c     **** 		}
4976:src/xeq.c     **** 		compact_pointer = (COMPACT_POINTER_TYPE)niladics[f].niladicf;
4977:src/xeq.c     **** 		break;
4978:src/xeq.c     **** 
4979:src/xeq.c     **** 	case 1:
4980:src/xeq.c     **** 		if (f >= NUM_MONADIC)
4981:src/xeq.c     **** 			goto illegal;
4982:src/xeq.c     **** 		if (intmode)
4983:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].monint;
4984:src/xeq.c     **** 		else if (complex)
4985:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondcmplx;
4986:src/xeq.c     **** 		else
4987:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)monfuncs[f].mondreal;
4988:src/xeq.c     **** 		break;
4989:src/xeq.c     **** 
4990:src/xeq.c     **** 	case 2:
4991:src/xeq.c     **** 		if (f >= NUM_DYADIC)
4992:src/xeq.c     **** 			goto illegal;
4993:src/xeq.c     **** 		if (intmode)
4994:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydint;
4995:src/xeq.c     **** 		else if (complex)
4996:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydcmplx;
4997:src/xeq.c     **** 		else
4998:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)dyfuncs[f].dydreal;
4999:src/xeq.c     **** 		break;
5000:src/xeq.c     **** 
5001:src/xeq.c     **** 	case 3:
5002:src/xeq.c     **** 		if (f >= NUM_TRIADIC)
5003:src/xeq.c     **** 			goto illegal;
5004:src/xeq.c     **** 		if (intmode)
5005:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].triint;
5006:src/xeq.c     **** 		else
5007:src/xeq.c     **** 			compact_pointer = (COMPACT_POINTER_TYPE)trifuncs[f].trireal;
5008:src/xeq.c     **** 		break;
5009:src/xeq.c     **** 	}
5010:src/xeq.c     **** 	if (isNULL(compact_pointer)) {
5011:src/xeq.c     **** 		if (operands != 0) {
5012:src/xeq.c     **** 			// The original niladic() function doesn't invoke
5013:src/xeq.c     **** 			// bad_mode_error() if the function pointer is null.
5014:src/xeq.c     **** 			// TODO:  Verify that this behavior is really needed.
5015:src/xeq.c     **** bad_mode:
5016:src/xeq.c     **** 			bad_mode_error();
5017:src/xeq.c     **** 		}
5018:src/xeq.c     **** 		goto finish_niladic;
5019:src/xeq.c     **** 	}
5020:src/xeq.c     **** 	function_pointer = (void (*)(void))EXPAND_ADDRESS(compact_pointer);
5021:src/xeq.c     **** 	if (dispatch_xrom(function_pointer)) {
5022:src/xeq.c     **** 		return;
5023:src/xeq.c     **** 	}
5024:src/xeq.c     **** 	if (operands == 0) {
5025:src/xeq.c     **** 		switch (NILADIC_NUMRESULTS(niladics[f])) {
5026:src/xeq.c     **** 		case 2:		lift_if_enabled(); // fall through
5027:src/xeq.c     **** 		case 1:		lift_if_enabled(); break;
5028:src/xeq.c     **** 		}
5029:src/xeq.c     **** 		((FP_NILADIC)function_pointer)((enum nilop)f);
ARM GAS  /tmp/cc7LeJ71.s 			page 120


5030:src/xeq.c     **** finish_niladic:
5031:src/xeq.c     **** 		// If an error occurred, we end up here even if a non-niladic function was called.
5032:src/xeq.c     **** 		// set_lift() is always called for non-niladic functions so calling it again does no harm.
5033:src/xeq.c     **** 		if (f != OP_rCLX) {
5034:src/xeq.c     **** 			set_lift();
5035:src/xeq.c     **** 		}
5036:src/xeq.c     **** 	}
5037:src/xeq.c     **** 	else if (intmode) {
5038:src/xeq.c     **** 		long long int iy;
5039:src/xeq.c     **** 		long long int iz;
5040:src/xeq.c     **** 
5041:src/xeq.c     **** 		ix = getX_int();
5042:src/xeq.c     **** 		iy = get_reg_n_int(regY_idx);
5043:src/xeq.c     **** 		switch (operands) {
5044:src/xeq.c     **** 		default:
5045:src/xeq.c     **** 		case 1:
5046:src/xeq.c     **** 			ix = ((FP_MONADIC_INT)function_pointer)(ix);
5047:src/xeq.c     **** 			break;
5048:src/xeq.c     **** 
5049:src/xeq.c     **** 		case 2:
5050:src/xeq.c     **** 			ix = ((FP_DYADIC_INT)function_pointer)(iy, ix);
5051:src/xeq.c     **** 			break;
5052:src/xeq.c     **** 
5053:src/xeq.c     **** 		case 3:
5054:src/xeq.c     **** 			iz = get_reg_n_int(regZ_idx);
5055:src/xeq.c     **** 			ix = ((FP_TRIADIC_INT)function_pointer)(iz, iy, ix);
5056:src/xeq.c     **** 			break;
5057:src/xeq.c     **** 		}
5058:src/xeq.c     **** 		goto finish_x;
5059:src/xeq.c     **** 	}
5060:src/xeq.c     **** 	else {
5061:src/xeq.c     **** 		decNumber x, y, z, t, r1;
5062:src/xeq.c     **** 
5063:src/xeq.c     **** 		if (operands + complex <= 2) {
5064:src/xeq.c     **** 			getXY(&x, &y);
5065:src/xeq.c     **** 		}
5066:src/xeq.c     **** 		else {
5067:src/xeq.c     **** 			getXYZT(&x, &y, &z, &t);
5068:src/xeq.c     **** 		}
5069:src/xeq.c     **** 
5070:src/xeq.c     **** 		if (complex) {
5071:src/xeq.c     **** 			decNumber r2;
5072:src/xeq.c     **** 
5073:src/xeq.c     **** 			if (operands == 1) {
5074:src/xeq.c     **** 				((FP_MONADIC_CMPLX)function_pointer)(&r1, &r2, &x, &y);
5075:src/xeq.c     **** 			}
5076:src/xeq.c     **** 			else {
5077:src/xeq.c     **** 				((FP_DYADIC_CMPLX)function_pointer)(&r1, &r2, &z, &t, &x, &y);
5078:src/xeq.c     **** 			}
5079:src/xeq.c     **** 			setlastXY();
5080:src/xeq.c     **** 			if (operands != 1) {
5081:src/xeq.c     **** 				lower2();
5082:src/xeq.c     **** 			}
5083:src/xeq.c     **** 			setXY(&r1, &r2);
5084:src/xeq.c     **** 			set_was_complex();
5085:src/xeq.c     **** 		}
5086:src/xeq.c     **** 		else { // real
ARM GAS  /tmp/cc7LeJ71.s 			page 121


5087:src/xeq.c     **** 			void *result;
5088:src/xeq.c     **** 
5089:src/xeq.c     **** 			switch (operands) {
5090:src/xeq.c     **** 			default:
5091:src/xeq.c     **** 			case 1:
5092:src/xeq.c     **** 				result = ((FP_MONADIC_REAL)function_pointer)(&r1, &x);
5093:src/xeq.c     **** 				break;
5094:src/xeq.c     **** 
5095:src/xeq.c     **** 			case 2:
5096:src/xeq.c     **** 				result = ((FP_DYADIC_REAL)function_pointer)(&r1, &y, &x);
5097:src/xeq.c     **** 				break;
5098:src/xeq.c     **** 
5099:src/xeq.c     **** 			case 3:
5100:src/xeq.c     **** 				result = ((FP_TRIADIC_REAL)function_pointer)(&r1, &z, &y, &x);
5101:src/xeq.c     **** 				break;
5102:src/xeq.c     **** 			}
5103:src/xeq.c     **** 			if (NULL == result) {
5104:src/xeq.c     **** 				set_NaN(&r1);
5105:src/xeq.c     **** 			}
5106:src/xeq.c     **** finish_x:
5107:src/xeq.c     **** 			setlastX();
5108:src/xeq.c     **** 			switch (operands) {
5109:src/xeq.c     **** 			case 3:		lower(); // fall through
5110:src/xeq.c     **** 			case 2:		lower(); break;
5111:src/xeq.c     **** 			}
5112:src/xeq.c     **** 			if (!intmode) {
5113:src/xeq.c     **** 				setX(&r1);
5114:src/xeq.c     **** 			}
5115:src/xeq.c     **** 			else {
5116:src/xeq.c     **** 				setX_int(ix);
5117:src/xeq.c     **** 			}
5118:src/xeq.c     **** 		}
5119:src/xeq.c     **** 	}
5120:src/xeq.c     **** #undef COMPACT_POINTER_TYPE
5121:src/xeq.c     **** }
5122:src/xeq.c     **** 
5123:src/xeq.c     **** 
5124:src/xeq.c     **** static void niladic(const opcode op)
5125:src/xeq.c     **** {
5126:src/xeq.c     **** 	universal_dispatch(op, 0, 0);
5127:src/xeq.c     **** }
5128:src/xeq.c     **** 
5129:src/xeq.c     **** static void monadic(const opcode op)
5130:src/xeq.c     **** {
5131:src/xeq.c     **** 	universal_dispatch(op, 1, 0);
5132:src/xeq.c     **** }
5133:src/xeq.c     **** 
5134:src/xeq.c     **** static void monadic_cmplex(const opcode op)
5135:src/xeq.c     **** {
5136:src/xeq.c     **** 	universal_dispatch(op, 1, 1);
5137:src/xeq.c     **** }
5138:src/xeq.c     **** 
5139:src/xeq.c     **** static void dyadic(const opcode op)
5140:src/xeq.c     **** {
5141:src/xeq.c     **** 	universal_dispatch(op, 2, 0);
5142:src/xeq.c     **** }
5143:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 122


5144:src/xeq.c     **** static void dyadic_cmplex(const opcode op)
5145:src/xeq.c     **** {
5146:src/xeq.c     **** 	universal_dispatch(op, 2, 1);
5147:src/xeq.c     **** }
5148:src/xeq.c     **** 
5149:src/xeq.c     **** static void triadic(const opcode op)
5150:src/xeq.c     **** {
5151:src/xeq.c     **** 	universal_dispatch(op, 3, 0);
5152:src/xeq.c     **** }
5153:src/xeq.c     **** 
5154:src/xeq.c     **** 
5155:src/xeq.c     **** #endif // UNIVERSAL_DISPATCH
5156:src/xeq.c     **** 
5157:src/xeq.c     **** 
5158:src/xeq.c     **** /*
5159:src/xeq.c     ****  *  Helper to check the maximum allowed register number, 
5160:src/xeq.c     ****  *  depending on command flags and current allocation.
5161:src/xeq.c     ****  *  This needs to be seperate because its called twice for indirect arguments
5162:src/xeq.c     ****  */
5163:src/xeq.c     **** static unsigned int get_reg_limit(unsigned int cmd, unsigned int arg)
5164:src/xeq.c     **** {
 1489              		.loc 1 5164 1 is_stmt 1 view -0
 1490              		.cfi_startproc
 1491              		@ args = 0, pretend = 0, frame = 0
 1492              		@ frame_needed = 0, uses_anonymous_args = 0
5165:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1493              		.loc 1 5165 2 view .LVU393
5166:src/xeq.c     **** 
5167:src/xeq.c     **** 	if (arg < TOPREALREG) {
 1494              		.loc 1 5167 2 view .LVU394
 1495              		.loc 1 5167 5 is_stmt 0 view .LVU395
 1496 0000 6329     		cmp	r1, #99
5164:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1497              		.loc 1 5164 1 view .LVU396
 1498 0002 38B5     		push	{r3, r4, r5, lr}
 1499              		.cfi_def_cfa_offset 16
 1500              		.cfi_offset 3, -16
 1501              		.cfi_offset 4, -12
 1502              		.cfi_offset 5, -8
 1503              		.cfi_offset 14, -4
5164:src/xeq.c     **** 	unsigned int lim = LOCAL_REG_BASE;
 1504              		.loc 1 5164 1 view .LVU397
 1505 0004 0446     		mov	r4, r0
 1506              		.loc 1 5167 5 view .LVU398
 1507 0006 16D8     		bhi	.L119
5168:src/xeq.c     **** 		// Range checking for registers against variable boundary
5169:src/xeq.c     **** 		lim = global_regs_rarg((enum rarg) cmd) - 1;
 1508              		.loc 1 5169 3 is_stmt 1 view .LVU399
 1509              	.LVL105:
 1510              	.LBB1450:
 1511              	.LBI1450:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1512              		.loc 1 241 14 view .LVU400
 1513              	.LBB1451:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1514              		.loc 1 242 2 view .LVU401
 1515              	.LBB1452:
ARM GAS  /tmp/cc7LeJ71.s 			page 123


 1516              	.LBI1452:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1517              		.loc 1 1118 5 view .LVU402
 1518              	.LBB1453:
1119:src/xeq.c     **** }
 1519              		.loc 1 1119 2 view .LVU403
1119:src/xeq.c     **** }
 1520              		.loc 1 1119 12 is_stmt 0 view .LVU404
 1521 0008 294B     		ldr	r3, .L139
 1522 000a 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 1523              		.loc 1 1119 24 view .LVU405
 1524 000c B2F8E817 		ldrh	r1, [r2, #2024]
 1525              	.LVL106:
1119:src/xeq.c     **** }
 1526              		.loc 1 1119 24 view .LVU406
 1527 0010 44F20103 		movw	r3, #16385
 1528              	.LBE1453:
 1529              	.LBE1452:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1530              		.loc 1 242 5 view .LVU407
 1531 0014 0B40     		ands	r3, r3, r1
 1532 0016 B3F5804F 		cmp	r3, #16384
 1533 001a 2ED0     		beq	.L120
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1534              		.loc 1 242 19 view .LVU408
 1535 001c 8028     		cmp	r0, #128
 1536 001e 39D0     		beq	.L136
 247:src/xeq.c     **** }
 1537              		.loc 1 247 3 is_stmt 1 view .LVU409
 247:src/xeq.c     **** }
 1538              		.loc 1 247 10 is_stmt 0 view .LVU410
 1539 0020 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1540              	.LVL107:
 1541              	.L124:
 247:src/xeq.c     **** }
 1542              		.loc 1 247 10 view .LVU411
 1543 0024 2349     		ldr	r1, .L139+4
 1544              	.LBE1451:
 1545              	.LBE1450:
 1546              		.loc 1 5169 7 view .LVU412
 1547 0026 0138     		subs	r0, r0, #1
 1548              	.LVL108:
 1549              		.loc 1 5169 7 view .LVU413
 1550 0028 2501     		lsls	r5, r4, #4
 1551              	.LVL109:
 1552              	.L125:
5170:src/xeq.c     **** 	}
5171:src/xeq.c     **** 	else if (argcmds[cmd].local) {
5172:src/xeq.c     **** 		// Range checking for local registers
5173:src/xeq.c     **** 		lim = NUMREG - 1 + local_regs_rarg((enum rarg) cmd);
5174:src/xeq.c     **** 	}
5175:src/xeq.c     **** 	if (argcmds[cmd].cmplx) {
 1553              		.loc 1 5175 2 is_stmt 1 view .LVU414
 1554              		.loc 1 5175 18 is_stmt 0 view .LVU415
 1555 002a 2944     		add	r1, r1, r5
 1556 002c 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
ARM GAS  /tmp/cc7LeJ71.s 			page 124


 1557              		.loc 1 5175 5 view .LVU416
 1558 002e D906     		lsls	r1, r3, #27
 1559 0030 10D5     		bpl	.L126
 1560              	.L137:
5176:src/xeq.c     **** 		// one short of the last avialable register for complex access
5177:src/xeq.c     **** 		--lim;
 1561              		.loc 1 5177 3 is_stmt 1 view .LVU417
 1562 0032 0138     		subs	r0, r0, #1
 1563              	.LVL110:
 1564              	.L118:
5178:src/xeq.c     **** 	}
5179:src/xeq.c     **** 	else if (cmd == RARG_STOSTK || cmd == RARG_RCLSTK) {
5180:src/xeq.c     **** 		// avoid stack clash error in these commands
5181:src/xeq.c     **** 		lim -= stack_size() - 1;
5182:src/xeq.c     **** 	}
5183:src/xeq.c     **** 	return lim;
5184:src/xeq.c     **** }
 1565              		.loc 1 5184 1 is_stmt 0 view .LVU418
 1566 0034 38BD     		pop	{r3, r4, r5, pc}
 1567              	.LVL111:
 1568              	.L119:
5171:src/xeq.c     **** 		// Range checking for local registers
 1569              		.loc 1 5171 7 is_stmt 1 view .LVU419
5171:src/xeq.c     **** 		// Range checking for local registers
 1570              		.loc 1 5171 23 is_stmt 0 view .LVU420
 1571 0036 1F49     		ldr	r1, .L139+4
 1572              	.LVL112:
5171:src/xeq.c     **** 		// Range checking for local registers
 1573              		.loc 1 5171 23 view .LVU421
 1574 0038 01EB0013 		add	r3, r1, r0, lsl #4
 1575 003c 0501     		lsls	r5, r0, #4
 1576 003e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
5171:src/xeq.c     **** 		// Range checking for local registers
 1577              		.loc 1 5171 10 view .LVU422
 1578 0040 1807     		lsls	r0, r3, #28
 1579              	.LVL113:
5171:src/xeq.c     **** 		// Range checking for local registers
 1580              		.loc 1 5171 10 view .LVU423
 1581 0042 18D5     		bpl	.L130
5173:src/xeq.c     **** 	}
 1582              		.loc 1 5173 3 is_stmt 1 view .LVU424
5173:src/xeq.c     **** 	}
 1583              		.loc 1 5173 22 is_stmt 0 view .LVU425
 1584 0044 E0B2     		uxtb	r0, r4
 1585 0046 FFF7FEFF 		bl	local_regs_rarg
 1586              	.LVL114:
5175:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1587              		.loc 1 5175 18 view .LVU426
 1588 004a 2944     		add	r1, r1, r5
5173:src/xeq.c     **** 	}
 1589              		.loc 1 5173 20 view .LVU427
 1590 004c 6F30     		adds	r0, r0, #111
 1591              	.LVL115:
5175:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1592              		.loc 1 5175 2 is_stmt 1 view .LVU428
5175:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1593              		.loc 1 5175 18 is_stmt 0 view .LVU429
ARM GAS  /tmp/cc7LeJ71.s 			page 125


 1594 004e 4B79     		ldrb	r3, [r1, #5]	@ zero_extendqisi2
5175:src/xeq.c     **** 		// one short of the last avialable register for complex access
 1595              		.loc 1 5175 5 view .LVU430
 1596 0050 D906     		lsls	r1, r3, #27
 1597 0052 EED4     		bmi	.L137
 1598              	.L126:
5179:src/xeq.c     **** 		// avoid stack clash error in these commands
 1599              		.loc 1 5179 7 is_stmt 1 view .LVU431
5179:src/xeq.c     **** 		// avoid stack clash error in these commands
 1600              		.loc 1 5179 30 is_stmt 0 view .LVU432
 1601 0054 223C     		subs	r4, r4, #34
 1602              	.LVL116:
5179:src/xeq.c     **** 		// avoid stack clash error in these commands
 1603              		.loc 1 5179 10 view .LVU433
 1604 0056 012C     		cmp	r4, #1
 1605 0058 ECD8     		bhi	.L118
5181:src/xeq.c     **** 	}
 1606              		.loc 1 5181 3 is_stmt 1 view .LVU434
 1607              	.LBB1458:
 1608              	.LBI1458:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 1609              		.loc 1 712 5 view .LVU435
 1610              	.LBB1459:
 713:src/xeq.c     **** 		return 4;
 1611              		.loc 1 713 2 view .LVU436
 713:src/xeq.c     **** 		return 4;
 1612              		.loc 1 713 8 is_stmt 0 view .LVU437
 1613 005a 154B     		ldr	r3, .L139
 1614 005c 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 1615              		.loc 1 713 6 view .LVU438
 1616 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 1617              		.loc 1 713 5 view .LVU439
 1618 0062 1207     		lsls	r2, r2, #28
 1619 0064 14D5     		bpl	.L131
 1620              	.LBB1460:
 1621              	.LBI1460:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 1622              		.loc 1 185 5 is_stmt 1 view .LVU440
 1623              	.LBB1461:
 186:src/xeq.c     **** }
 1624              		.loc 1 186 2 view .LVU441
 186:src/xeq.c     **** }
 1625              		.loc 1 186 9 is_stmt 0 view .LVU442
 1626 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 1627              	.LBE1461:
 1628              	.LBE1460:
 713:src/xeq.c     **** 		return 4;
 1629              		.loc 1 713 27 view .LVU443
 1630 006a 9B0B     		lsrs	r3, r3, #14
 1631 006c 032B     		cmp	r3, #3
 1632 006e 16D0     		beq	.L138
 1633 0070 0723     		movs	r3, #7
 1634              	.L128:
 1635              	.LBE1459:
 1636              	.LBE1458:
ARM GAS  /tmp/cc7LeJ71.s 			page 126


5181:src/xeq.c     **** 	}
 1637              		.loc 1 5181 7 view .LVU444
 1638 0072 C01A     		subs	r0, r0, r3
 1639              	.LVL117:
5183:src/xeq.c     **** }
 1640              		.loc 1 5183 2 is_stmt 1 view .LVU445
 1641              		.loc 1 5184 1 is_stmt 0 view .LVU446
 1642 0074 38BD     		pop	{r3, r4, r5, pc}
 1643              	.LVL118:
 1644              	.L130:
5165:src/xeq.c     **** 
 1645              		.loc 1 5165 15 view .LVU447
 1646 0076 7020     		movs	r0, #112
 1647 0078 D7E7     		b	.L125
 1648              	.LVL119:
 1649              	.L120:
 1650              	.LBB1464:
 1651              	.LBB1456:
 1652              	.LBB1454:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1653              		.loc 1 243 3 is_stmt 1 view .LVU448
 244:src/xeq.c     **** 	}
 1654              		.loc 1 244 26 is_stmt 0 view .LVU449
 1655 007a A4F17E03 		sub	r3, r4, #126
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1656              		.loc 1 243 24 view .LVU450
 1657 007e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1658              	.LVL120:
 244:src/xeq.c     **** 	}
 1659              		.loc 1 244 56 view .LVU451
 1660 0082 DBB2     		uxtb	r3, r3
 1661 0084 012B     		cmp	r3, #1
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1662              		.loc 1 243 13 view .LVU452
 1663 0086 A0F10C00 		sub	r0, r0, #12
 1664              	.LVL121:
 244:src/xeq.c     **** 	}
 1665              		.loc 1 244 3 is_stmt 1 view .LVU453
 244:src/xeq.c     **** 	}
 1666              		.loc 1 244 56 is_stmt 0 view .LVU454
 1667 008a CBD9     		bls	.L124
 244:src/xeq.c     **** 	}
 1668              		.loc 1 244 67 view .LVU455
 1669 008c 4010     		asrs	r0, r0, #1
 1670              	.LVL122:
 244:src/xeq.c     **** 	}
 1671              		.loc 1 244 67 view .LVU456
 1672 008e C9E7     		b	.L124
 1673              	.LVL123:
 1674              	.L131:
 244:src/xeq.c     **** 	}
 1675              		.loc 1 244 67 view .LVU457
 1676              	.LBE1454:
 1677              	.LBE1456:
 1678              	.LBE1464:
 1679              	.LBB1465:
 1680              	.LBB1462:
ARM GAS  /tmp/cc7LeJ71.s 			page 127


 1681 0090 0323     		movs	r3, #3
 1682 0092 EEE7     		b	.L128
 1683              	.LVL124:
 1684              	.L136:
 244:src/xeq.c     **** 	}
 1685              		.loc 1 244 67 view .LVU458
 1686              	.LBE1462:
 1687              	.LBE1465:
 1688              	.LBB1466:
 1689              	.LBB1457:
 1690              	.LBB1455:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1691              		.loc 1 243 3 is_stmt 1 view .LVU459
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1692              		.loc 1 243 24 is_stmt 0 view .LVU460
 1693 0094 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1694              	.LVL125:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1695              		.loc 1 243 13 view .LVU461
 1696 0098 0C38     		subs	r0, r0, #12
 1697              	.LVL126:
 244:src/xeq.c     **** 	}
 1698              		.loc 1 244 3 is_stmt 1 view .LVU462
 244:src/xeq.c     **** 	}
 1699              		.loc 1 244 67 is_stmt 0 view .LVU463
 1700 009a 4010     		asrs	r0, r0, #1
 1701              	.LVL127:
 244:src/xeq.c     **** 	}
 1702              		.loc 1 244 67 view .LVU464
 1703 009c C2E7     		b	.L124
 1704              	.LVL128:
 1705              	.L138:
 244:src/xeq.c     **** 	}
 1706              		.loc 1 244 67 view .LVU465
 1707              	.LBE1455:
 1708              	.LBE1457:
 1709              	.LBE1466:
 1710              	.LBB1467:
 1711              	.LBB1463:
 713:src/xeq.c     **** 		return 4;
 1712              		.loc 1 713 44 view .LVU466
 1713 009e 064B     		ldr	r3, .L139+8
 713:src/xeq.c     **** 		return 4;
 1714              		.loc 1 713 41 view .LVU467
 1715 00a0 93F90130 		ldrsb	r3, [r3, #1]
 1716 00a4 002B     		cmp	r3, #0
 1717 00a6 B4BF     		ite	lt
 1718 00a8 0723     		movlt	r3, #7
 1719 00aa 0323     		movge	r3, #3
 1720 00ac E1E7     		b	.L128
 1721              	.L140:
 1722 00ae 00BF     		.align	2
 1723              	.L139:
 1724 00b0 00000000 		.word	main_ram
 1725 00b4 00000000 		.word	argcmds
 1726 00b8 00000000 		.word	XromParams
 1727              	.LBE1463:
ARM GAS  /tmp/cc7LeJ71.s 			page 128


 1728              	.LBE1467:
 1729              		.cfi_endproc
 1730              	.LFE248:
 1732              		.section	.text.local_regs,"ax",%progbits
 1733              		.align	1
 1734              		.p2align 2,,3
 1735              		.global	local_regs
 1736              		.syntax unified
 1737              		.thumb
 1738              		.thumb_func
 1739              		.fpu fpv4-sp-d16
 1741              	local_regs:
 1742              	.LFB7:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 1743              		.loc 1 233 22 is_stmt 1 view -0
 1744              		.cfi_startproc
 1745              		@ args = 0, pretend = 0, frame = 0
 1746              		@ frame_needed = 0, uses_anonymous_args = 0
 1747              		@ link register save eliminated.
 234:src/xeq.c     **** }
 1748              		.loc 1 234 2 view .LVU469
 1749              	.LVL129:
 1750              	.LBB1468:
 1751              	.LBI1468:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 1752              		.loc 1 225 5 view .LVU470
 1753              	.LBB1469:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1754              		.loc 1 226 2 view .LVU471
 1755              	.LBB1470:
 1756              	.LBI1470:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1757              		.loc 1 1118 5 view .LVU472
 1758              	.LBB1471:
1119:src/xeq.c     **** }
 1759              		.loc 1 1119 2 view .LVU473
1119:src/xeq.c     **** }
 1760              		.loc 1 1119 12 is_stmt 0 view .LVU474
 1761 0000 0E4B     		ldr	r3, .L145
 1762 0002 1A68     		ldr	r2, [r3]
 1763              	.LVL130:
1119:src/xeq.c     **** }
 1764              		.loc 1 1119 12 view .LVU475
 1765              	.LBE1471:
 1766              	.LBE1470:
 227:src/xeq.c     **** }
 1767              		.loc 1 227 2 is_stmt 1 view .LVU476
 1768              	.LBB1474:
 1769              	.LBI1474:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 1770              		.loc 1 217 5 view .LVU477
 1771              	.LBB1475:
 218:src/xeq.c     **** }
 1772              		.loc 1 218 2 view .LVU478
 218:src/xeq.c     **** }
 1773              		.loc 1 218 9 is_stmt 0 view .LVU479
 1774 0004 B2F8DE37 		ldrh	r3, [r2, #2014]
ARM GAS  /tmp/cc7LeJ71.s 			page 129


 1775 0008 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 1776              		.loc 1 218 57 view .LVU480
 1777 000c 002B     		cmp	r3, #0
 1778 000e 01DB     		blt	.L144
 1779 0010 0020     		movs	r0, #0
 1780              	.LVL131:
 218:src/xeq.c     **** }
 1781              		.loc 1 218 57 view .LVU481
 1782              	.LBE1475:
 1783              	.LBE1474:
 1784              	.LBE1469:
 1785              	.LBE1468:
 235:src/xeq.c     **** 
 1786              		.loc 1 235 1 view .LVU482
 1787 0012 7047     		bx	lr
 1788              	.LVL132:
 1789              	.L144:
 1790              	.LBB1487:
 1791              	.LBB1486:
 1792              	.LBB1480:
 1793              	.LBB1476:
 218:src/xeq.c     **** }
 1794              		.loc 1 218 25 view .LVU483
 1795 0014 0A49     		ldr	r1, .L145+4
 1796              	.LBE1476:
 1797              	.LBE1480:
 1798              	.LBB1481:
 1799              	.LBB1472:
1119:src/xeq.c     **** }
 1800              		.loc 1 1119 24 view .LVU484
 1801 0016 B2F8E807 		ldrh	r0, [r2, #2024]
 1802              	.LBE1472:
 1803              	.LBE1481:
 1804              	.LBB1482:
 1805              	.LBB1477:
 218:src/xeq.c     **** }
 1806              		.loc 1 218 25 view .LVU485
 1807 001a 0968     		ldr	r1, [r1]
 1808              	.LBE1477:
 1809              	.LBE1482:
 1810              	.LBB1483:
 1811              	.LBB1473:
1119:src/xeq.c     **** }
 1812              		.loc 1 1119 24 view .LVU486
 1813 001c 44F20102 		movw	r2, #16385
 1814              	.LVL133:
1119:src/xeq.c     **** }
 1815              		.loc 1 1119 24 view .LVU487
 1816              	.LBE1473:
 1817              	.LBE1483:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1818              		.loc 1 226 73 view .LVU488
 1819 0020 0240     		ands	r2, r2, r0
 1820              	.LBB1484:
 1821              	.LBB1478:
 218:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 130


 1822              		.loc 1 218 57 view .LVU489
 1823 0022 31F81300 		ldrh	r0, [r1, r3, lsl #1]
 1824              	.LBE1478:
 1825              	.LBE1484:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 1826              		.loc 1 226 73 view .LVU490
 1827 0026 A2F58043 		sub	r3, r2, #16384
 1828 002a B3FA83F3 		clz	r3, r3
 1829 002e 5B09     		lsrs	r3, r3, #5
 1830 0030 0233     		adds	r3, r3, #2
 1831              	.LBB1485:
 1832              	.LBB1479:
 218:src/xeq.c     **** }
 1833              		.loc 1 218 57 view .LVU491
 1834 0032 C0F30B00 		ubfx	r0, r0, #0, #12
 1835 0036 1841     		asrs	r0, r0, r3
 1836 0038 7047     		bx	lr
 1837              	.L146:
 1838 003a 00BF     		.align	2
 1839              	.L145:
 1840 003c 00000000 		.word	main_ram
 1841 0040 00000000 		.word	RetStk
 1842              	.LBE1479:
 1843              	.LBE1485:
 1844              	.LBE1486:
 1845              	.LBE1487:
 1846              		.cfi_endproc
 1847              	.LFE7:
 1849              		.section	.text.global_regs_rarg,"ax",%progbits
 1850              		.align	1
 1851              		.p2align 2,,3
 1852              		.global	global_regs_rarg
 1853              		.syntax unified
 1854              		.thumb
 1855              		.thumb_func
 1856              		.fpu fpv4-sp-d16
 1858              	global_regs_rarg:
 1859              	.LVL134:
 1860              	.LFB8:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1861              		.loc 1 241 45 is_stmt 1 view -0
 1862              		.cfi_startproc
 1863              		@ args = 0, pretend = 0, frame = 0
 1864              		@ frame_needed = 0, uses_anonymous_args = 0
 1865              		@ link register save eliminated.
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1866              		.loc 1 242 2 view .LVU493
 1867              	.LBB1488:
 1868              	.LBI1488:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1869              		.loc 1 1118 5 view .LVU494
 1870              	.LBB1489:
1119:src/xeq.c     **** }
 1871              		.loc 1 1119 2 view .LVU495
1119:src/xeq.c     **** }
 1872              		.loc 1 1119 12 is_stmt 0 view .LVU496
 1873 0000 0E4B     		ldr	r3, .L156
ARM GAS  /tmp/cc7LeJ71.s 			page 131


 1874 0002 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 1875              		.loc 1 1119 24 view .LVU497
 1876 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1877 0008 44F20103 		movw	r3, #16385
 1878              	.LBE1489:
 1879              	.LBE1488:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1880              		.loc 1 242 5 view .LVU498
 1881 000c 0B40     		ands	r3, r3, r1
 1882 000e B3F5804F 		cmp	r3, #16384
 1883 0012 09D0     		beq	.L148
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1884              		.loc 1 242 19 discriminator 1 view .LVU499
 1885 0014 8028     		cmp	r0, #128
 1886 0016 02D0     		beq	.L155
 247:src/xeq.c     **** }
 1887              		.loc 1 247 3 is_stmt 1 view .LVU500
 247:src/xeq.c     **** }
 1888              		.loc 1 247 10 is_stmt 0 view .LVU501
 1889 0018 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1890              	.LVL135:
 247:src/xeq.c     **** }
 1891              		.loc 1 247 10 view .LVU502
 1892 001c 7047     		bx	lr
 1893              	.LVL136:
 1894              	.L155:
 1895              	.LBB1490:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1896              		.loc 1 243 3 is_stmt 1 view .LVU503
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1897              		.loc 1 243 24 is_stmt 0 view .LVU504
 1898 001e 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1899              	.LVL137:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1900              		.loc 1 243 13 view .LVU505
 1901 0022 0C38     		subs	r0, r0, #12
 1902              	.LVL138:
 244:src/xeq.c     **** 	}
 1903              		.loc 1 244 3 is_stmt 1 view .LVU506
 1904              	.L153:
 244:src/xeq.c     **** 	}
 1905              		.loc 1 244 67 is_stmt 0 discriminator 1 view .LVU507
 1906 0024 4010     		asrs	r0, r0, #1
 1907              	.LVL139:
 244:src/xeq.c     **** 	}
 1908              		.loc 1 244 67 discriminator 1 view .LVU508
 1909 0026 7047     		bx	lr
 1910              	.LVL140:
 1911              	.L148:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1912              		.loc 1 243 3 is_stmt 1 view .LVU509
 244:src/xeq.c     **** 	}
 1913              		.loc 1 244 56 is_stmt 0 view .LVU510
 1914 0028 A0F17E03 		sub	r3, r0, #126
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1915              		.loc 1 243 24 view .LVU511
ARM GAS  /tmp/cc7LeJ71.s 			page 132


 1916 002c 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 244:src/xeq.c     **** 	}
 1917              		.loc 1 244 56 view .LVU512
 1918 0030 012B     		cmp	r3, #1
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1919              		.loc 1 243 13 view .LVU513
 1920 0032 A2F10C00 		sub	r0, r2, #12
 1921              	.LVL141:
 244:src/xeq.c     **** 	}
 1922              		.loc 1 244 3 is_stmt 1 view .LVU514
 244:src/xeq.c     **** 	}
 1923              		.loc 1 244 56 is_stmt 0 view .LVU515
 1924 0036 F5D8     		bhi	.L153
 1925              	.LBE1490:
 248:src/xeq.c     **** 
 1926              		.loc 1 248 1 view .LVU516
 1927 0038 7047     		bx	lr
 1928              	.L157:
 1929 003a 00BF     		.align	2
 1930              	.L156:
 1931 003c 00000000 		.word	main_ram
 1932              		.cfi_endproc
 1933              	.LFE8:
 1935              		.section	.text.global_regs,"ax",%progbits
 1936              		.align	1
 1937              		.p2align 2,,3
 1938              		.global	global_regs
 1939              		.syntax unified
 1940              		.thumb
 1941              		.thumb_func
 1942              		.fpu fpv4-sp-d16
 1944              	global_regs:
 1945              	.LFB9:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 1946              		.loc 1 253 32 is_stmt 1 view -0
 1947              		.cfi_startproc
 1948              		@ args = 0, pretend = 0, frame = 0
 1949              		@ frame_needed = 0, uses_anonymous_args = 0
 1950              		@ link register save eliminated.
 254:src/xeq.c     **** }
 1951              		.loc 1 254 2 view .LVU518
 1952              	.LVL142:
 1953              	.LBB1491:
 1954              	.LBI1491:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 1955              		.loc 1 241 14 view .LVU519
 1956              	.LBB1492:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1957              		.loc 1 242 2 view .LVU520
 1958              	.LBB1493:
 1959              	.LBI1493:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 1960              		.loc 1 1118 5 view .LVU521
 1961              	.LBB1494:
1119:src/xeq.c     **** }
 1962              		.loc 1 1119 2 view .LVU522
1119:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 133


 1963              		.loc 1 1119 12 is_stmt 0 view .LVU523
 1964 0000 074B     		ldr	r3, .L161
 1965 0002 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 1966              		.loc 1 1119 24 view .LVU524
 1967 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 1968              	.LBE1494:
 1969              	.LBE1493:
 1970              	.LBB1496:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1971              		.loc 1 243 24 view .LVU525
 1972 0008 92F8CF07 		ldrb	r0, [r2, #1999]	@ zero_extendqisi2
 1973              	.LBE1496:
 1974              	.LBB1497:
 1975              	.LBB1495:
1119:src/xeq.c     **** }
 1976              		.loc 1 1119 24 view .LVU526
 1977 000c 44F20103 		movw	r3, #16385
 1978              	.LBE1495:
 1979              	.LBE1497:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 1980              		.loc 1 242 5 view .LVU527
 1981 0010 0B40     		ands	r3, r3, r1
 1982 0012 B3F5804F 		cmp	r3, #16384
 1983              	.LBB1498:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1984              		.loc 1 243 3 is_stmt 1 view .LVU528
 244:src/xeq.c     **** 	}
 1985              		.loc 1 244 3 view .LVU529
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 1986              		.loc 1 243 13 is_stmt 0 view .LVU530
 1987 0016 04BF     		itt	eq
 1988 0018 0C38     		subeq	r0, r0, #12
 244:src/xeq.c     **** 	}
 1989              		.loc 1 244 67 view .LVU531
 1990 001a 4010     		asreq	r0, r0, #1
 1991              	.LBE1498:
 247:src/xeq.c     **** }
 1992              		.loc 1 247 3 is_stmt 1 view .LVU532
 1993              	.LVL143:
 247:src/xeq.c     **** }
 1994              		.loc 1 247 3 is_stmt 0 view .LVU533
 1995              	.LBE1492:
 1996              	.LBE1491:
 255:src/xeq.c     **** 
 1997              		.loc 1 255 1 view .LVU534
 1998 001c 7047     		bx	lr
 1999              	.L162:
 2000 001e 00BF     		.align	2
 2001              	.L161:
 2002 0020 00000000 		.word	main_ram
 2003              		.cfi_endproc
 2004              	.LFE9:
 2006              		.section	.text.version,"ax",%progbits
 2007              		.align	1
 2008              		.p2align 2,,3
 2009              		.global	version
ARM GAS  /tmp/cc7LeJ71.s 			page 134


 2010              		.syntax unified
 2011              		.thumb
 2012              		.thumb_func
 2013              		.fpu fpv4-sp-d16
 2015              	version:
 2016              	.LVL144:
 2017              	.LFB10:
 267:src/xeq.c     **** 	State2.version = 1;
 2018              		.loc 1 267 29 is_stmt 1 view -0
 2019              		.cfi_startproc
 2020              		@ args = 0, pretend = 0, frame = 0
 2021              		@ frame_needed = 0, uses_anonymous_args = 0
 2022              		@ link register save eliminated.
 268:src/xeq.c     **** 	if (!State2.runmode)
 2023              		.loc 1 268 2 view .LVU536
 268:src/xeq.c     **** 	if (!State2.runmode)
 2024              		.loc 1 268 17 is_stmt 0 view .LVU537
 2025 0000 054B     		ldr	r3, .L166
 2026 0002 5A7D     		ldrb	r2, [r3, #21]	@ zero_extendqisi2
 269:src/xeq.c     **** 		display();
 2027              		.loc 1 269 6 view .LVU538
 2028 0004 997D     		ldrb	r1, [r3, #22]	@ zero_extendqisi2
 268:src/xeq.c     **** 	if (!State2.runmode)
 2029              		.loc 1 268 17 view .LVU539
 2030 0006 42F01002 		orr	r2, r2, #16
 2031 000a 5A75     		strb	r2, [r3, #21]
 269:src/xeq.c     **** 		display();
 2032              		.loc 1 269 2 is_stmt 1 view .LVU540
 269:src/xeq.c     **** 		display();
 2033              		.loc 1 269 5 is_stmt 0 view .LVU541
 2034 000c 4B06     		lsls	r3, r1, #25
 2035 000e 00D5     		bpl	.L165
 271:src/xeq.c     **** 
 2036              		.loc 1 271 1 view .LVU542
 2037 0010 7047     		bx	lr
 2038              	.L165:
 270:src/xeq.c     **** }
 2039              		.loc 1 270 3 is_stmt 1 view .LVU543
 2040 0012 FFF7FEBF 		b	display
 2041              	.LVL145:
 2042              	.L167:
 270:src/xeq.c     **** }
 2043              		.loc 1 270 3 is_stmt 0 view .LVU544
 2044 0016 00BF     		.align	2
 2045              	.L166:
 2046 0018 00000000 		.word	StateWhileOn
 2047              		.cfi_endproc
 2048              	.LFE10:
 2050              		.section	.text.cmd_off,"ax",%progbits
 2051              		.align	1
 2052              		.p2align 2,,3
 2053              		.global	cmd_off
 2054              		.syntax unified
 2055              		.thumb
 2056              		.thumb_func
 2057              		.fpu fpv4-sp-d16
 2059              	cmd_off:
ARM GAS  /tmp/cc7LeJ71.s 			page 135


 2060              	.LVL146:
 2061              	.LFB11:
 273:src/xeq.c     **** 	shutdown();
 2062              		.loc 1 273 29 is_stmt 1 view -0
 2063              		.cfi_startproc
 2064              		@ args = 0, pretend = 0, frame = 0
 2065              		@ frame_needed = 0, uses_anonymous_args = 0
 2066              		@ link register save eliminated.
 274:src/xeq.c     **** }
 2067              		.loc 1 274 2 view .LVU546
 2068 0000 FFF7FEBF 		b	shutdown
 2069              	.LVL147:
 274:src/xeq.c     **** }
 2070              		.loc 1 274 2 is_stmt 0 view .LVU547
 2071              		.cfi_endproc
 2072              	.LFE11:
 2074              		.section	.text.init_RegionTab,"ax",%progbits
 2075              		.align	1
 2076              		.p2align 2,,3
 2077              		.global	init_RegionTab
 2078              		.syntax unified
 2079              		.thumb
 2080              		.thumb_func
 2081              		.fpu fpv4-sp-d16
 2083              	init_RegionTab:
 2084              	.LFB13:
 302:src/xeq.c     ****   RegionTab[0] = (s_opcode*) Prog;
 2085              		.loc 1 302 28 is_stmt 1 view -0
 2086              		.cfi_startproc
 2087              		@ args = 0, pretend = 0, frame = 0
 2088              		@ frame_needed = 0, uses_anonymous_args = 0
 2089              		@ link register save eliminated.
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2090              		.loc 1 303 3 view .LVU549
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2091              		.loc 1 303 30 is_stmt 0 view .LVU550
 2092 0000 0649     		ldr	r1, .L170
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2093              		.loc 1 304 30 view .LVU551
 2094 0002 074A     		ldr	r2, .L170+4
 305:src/xeq.c     **** }
 2095              		.loc 1 305 30 view .LVU552
 2096 0004 074B     		ldr	r3, .L170+8
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2097              		.loc 1 303 30 view .LVU553
 2098 0006 0868     		ldr	r0, [r1]
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2099              		.loc 1 304 30 view .LVU554
 2100 0008 1168     		ldr	r1, [r2]
 305:src/xeq.c     **** }
 2101              		.loc 1 305 30 view .LVU555
 2102 000a 1A68     		ldr	r2, [r3]
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2103              		.loc 1 303 16 view .LVU556
 2104 000c 064B     		ldr	r3, .L170+12
 303:src/xeq.c     ****   RegionTab[1] = (s_opcode*) UserFlash.prog;
 2105              		.loc 1 303 30 view .LVU557
ARM GAS  /tmp/cc7LeJ71.s 			page 136


 2106 000e 0430     		adds	r0, r0, #4
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2107              		.loc 1 304 30 view .LVU558
 2108 0010 0431     		adds	r1, r1, #4
 305:src/xeq.c     **** }
 2109              		.loc 1 305 30 view .LVU559
 2110 0012 0432     		adds	r2, r2, #4
 304:src/xeq.c     ****   RegionTab[2] = (s_opcode*) BackupFlash._prog;
 2111              		.loc 1 304 16 view .LVU560
 2112 0014 C3E90001 		strd	r0, r1, [r3]
 305:src/xeq.c     **** }
 2113              		.loc 1 305 3 is_stmt 1 view .LVU561
 305:src/xeq.c     **** }
 2114              		.loc 1 305 16 is_stmt 0 view .LVU562
 2115 0018 9A60     		str	r2, [r3, #8]
 306:src/xeq.c     **** 
 2116              		.loc 1 306 1 view .LVU563
 2117 001a 7047     		bx	lr
 2118              	.L171:
 2119              		.align	2
 2120              	.L170:
 2121 001c 00000000 		.word	main_ram
 2122 0020 00000000 		.word	library_ram
 2123 0024 00000000 		.word	backup_ram
 2124 0028 00000000 		.word	.LANCHOR0
 2125              		.cfi_endproc
 2126              	.LFE13:
 2128              		.section	.text.sizeLIB,"ax",%progbits
 2129              		.align	1
 2130              		.p2align 2,,3
 2131              		.global	sizeLIB
 2132              		.syntax unified
 2133              		.thumb
 2134              		.thumb_func
 2135              		.fpu fpv4-sp-d16
 2137              	sizeLIB:
 2138              	.LVL148:
 2139              	.LFB14:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 2140              		.loc 1 319 25 is_stmt 1 view -0
 2141              		.cfi_startproc
 2142              		@ args = 0, pretend = 0, frame = 0
 2143              		@ frame_needed = 0, uses_anonymous_args = 0
 2144              		@ link register save eliminated.
 320:src/xeq.c     **** 		return xrom_size;
 2145              		.loc 1 320 2 view .LVU565
 320:src/xeq.c     **** 		return xrom_size;
 2146              		.loc 1 320 5 is_stmt 0 view .LVU566
 2147 0000 0328     		cmp	r0, #3
 2148 0002 05D0     		beq	.L175
 323:src/xeq.c     **** }
 2149              		.loc 1 323 3 is_stmt 1 view .LVU567
 323:src/xeq.c     **** }
 2150              		.loc 1 323 24 is_stmt 0 view .LVU568
 2151 0004 044B     		ldr	r3, .L176
 323:src/xeq.c     **** }
 2152              		.loc 1 323 32 view .LVU569
ARM GAS  /tmp/cc7LeJ71.s 			page 137


 2153 0006 53F82030 		ldr	r3, [r3, r0, lsl #2]
 323:src/xeq.c     **** }
 2154              		.loc 1 323 10 view .LVU570
 2155 000a 33F8020C 		ldrh	r0, [r3, #-2]
 2156              	.LVL149:
 324:src/xeq.c     **** 
 2157              		.loc 1 324 1 view .LVU571
 2158 000e 7047     		bx	lr
 2159              	.LVL150:
 2160              	.L175:
 321:src/xeq.c     **** 	else
 2161              		.loc 1 321 3 is_stmt 1 view .LVU572
 321:src/xeq.c     **** 	else
 2162              		.loc 1 321 10 is_stmt 0 view .LVU573
 2163 0010 024B     		ldr	r3, .L176+4
 2164 0012 1888     		ldrh	r0, [r3]
 2165              	.LVL151:
 321:src/xeq.c     **** 	else
 2166              		.loc 1 321 10 view .LVU574
 2167 0014 7047     		bx	lr
 2168              	.L177:
 2169 0016 00BF     		.align	2
 2170              	.L176:
 2171 0018 00000000 		.word	.LANCHOR0
 2172 001c 00000000 		.word	xrom_size
 2173              		.cfi_endproc
 2174              	.LFE14:
 2176              		.section	.text.getprog,"ax",%progbits
 2177              		.align	1
 2178              		.p2align 2,,3
 2179              		.global	getprog
 2180              		.syntax unified
 2181              		.thumb
 2182              		.thumb_func
 2183              		.fpu fpv4-sp-d16
 2185              	getprog:
 2186              	.LVL152:
 2187              	.LFB16:
 343:src/xeq.c     **** 
 2188              		.loc 1 343 33 is_stmt 1 view -0
 2189              		.cfi_startproc
 2190              		@ args = 0, pretend = 0, frame = 0
 2191              		@ frame_needed = 0, uses_anonymous_args = 0
 2192              		@ link register save eliminated.
 345:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2193              		.loc 1 345 2 view .LVU576
 346:src/xeq.c     **** 
 2194              		.loc 1 346 15 is_stmt 0 view .LVU577
 2195 0000 C0F30D02 		ubfx	r2, r0, #0, #14
 2196 0004 531E     		subs	r3, r2, #1
 345:src/xeq.c     **** 	int offset = offsetLIB(pc);
 2197              		.loc 1 345 21 view .LVU578
 2198 0006 800B     		lsrs	r0, r0, #14
 2199              	.LVL153:
 346:src/xeq.c     **** 
 2200              		.loc 1 346 2 is_stmt 1 view .LVU579
 348:src/xeq.c     **** 		return OP_NIL | OP_END;
ARM GAS  /tmp/cc7LeJ71.s 			page 138


 2201              		.loc 1 348 2 view .LVU580
 348:src/xeq.c     **** 		return OP_NIL | OP_END;
 2202              		.loc 1 348 5 is_stmt 0 view .LVU581
 2203 0008 BAB1     		cbz	r2, .L184
 2204              	.LVL154:
 2205              	.LBB1499:
 2206              	.LBI1499:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 2207              		.loc 1 319 5 is_stmt 1 view .LVU582
 2208              	.LBB1500:
 320:src/xeq.c     **** 		return xrom_size;
 2209              		.loc 1 320 2 view .LVU583
 320:src/xeq.c     **** 		return xrom_size;
 2210              		.loc 1 320 5 is_stmt 0 view .LVU584
 2211 000a 0328     		cmp	r0, #3
 2212 000c 18D0     		beq	.L185
 323:src/xeq.c     **** }
 2213              		.loc 1 323 3 is_stmt 1 view .LVU585
 323:src/xeq.c     **** }
 2214              		.loc 1 323 24 is_stmt 0 view .LVU586
 2215 000e 0E4A     		ldr	r2, .L187
 323:src/xeq.c     **** }
 2216              		.loc 1 323 32 view .LVU587
 2217 0010 52F82020 		ldr	r2, [r2, r0, lsl #2]
 323:src/xeq.c     **** }
 2218              		.loc 1 323 10 view .LVU588
 2219 0014 32F8022C 		ldrh	r2, [r2, #-2]
 2220              	.L181:
 2221              	.LVL155:
 323:src/xeq.c     **** }
 2222              		.loc 1 323 10 view .LVU589
 2223              	.LBE1500:
 2224              	.LBE1499:
 348:src/xeq.c     **** 		return OP_NIL | OP_END;
 2225              		.loc 1 348 17 view .LVU590
 2226 0018 9342     		cmp	r3, r2
 2227 001a 0EDA     		bge	.L184
 350:src/xeq.c     **** }
 2228              		.loc 1 350 2 is_stmt 1 view .LVU591
 350:src/xeq.c     **** }
 2229              		.loc 1 350 29 is_stmt 0 view .LVU592
 2230 001c 0A4A     		ldr	r2, .L187
 350:src/xeq.c     **** }
 2231              		.loc 1 350 38 view .LVU593
 2232 001e 52F82020 		ldr	r2, [r2, r0, lsl #2]
 2233              	.LBB1502:
 2234              	.LBB1503:
 332:src/xeq.c     **** 	if ( isDBL(r) ) {
 2235              		.loc 1 332 13 view .LVU594
 2236 0022 32F81300 		ldrh	r0, [r2, r3, lsl #1]
 2237              	.LVL156:
 333:src/xeq.c     **** 		r |= loc[1] << 16;
 2238              		.loc 1 333 5 view .LVU595
 2239 0026 00F47041 		and	r1, r0, #61440
 2240 002a B1F5704F 		cmp	r1, #61440
 2241              	.LBE1503:
 2242              	.LBE1502:
ARM GAS  /tmp/cc7LeJ71.s 			page 139


 350:src/xeq.c     **** }
 2243              		.loc 1 350 38 view .LVU596
 2244 002e 02EB4303 		add	r3, r2, r3, lsl #1
 2245              	.LVL157:
 2246              	.LBB1506:
 2247              	.LBI1502:
 330:src/xeq.c     **** {
 2248              		.loc 1 330 15 is_stmt 1 view .LVU597
 2249              	.LBB1504:
 332:src/xeq.c     **** 	if ( isDBL(r) ) {
 2250              		.loc 1 332 2 view .LVU598
 333:src/xeq.c     **** 		r |= loc[1] << 16;
 2251              		.loc 1 333 2 view .LVU599
 333:src/xeq.c     **** 		r |= loc[1] << 16;
 2252              		.loc 1 333 5 is_stmt 0 view .LVU600
 2253 0032 00D0     		beq	.L186
 2254              	.LBE1504:
 2255              	.LBE1506:
 351:src/xeq.c     **** 
 2256              		.loc 1 351 1 view .LVU601
 2257 0034 7047     		bx	lr
 2258              	.L186:
 2259              	.LBB1507:
 2260              	.LBB1505:
 334:src/xeq.c     **** 	}
 2261              		.loc 1 334 3 is_stmt 1 view .LVU602
 334:src/xeq.c     **** 	}
 2262              		.loc 1 334 5 is_stmt 0 view .LVU603
 2263 0036 1868     		ldr	r0, [r3]	@ unaligned
 2264              	.LVL158:
 334:src/xeq.c     **** 	}
 2265              		.loc 1 334 5 view .LVU604
 2266 0038 7047     		bx	lr
 2267              	.LVL159:
 2268              	.L184:
 334:src/xeq.c     **** 	}
 2269              		.loc 1 334 5 view .LVU605
 2270              	.LBE1505:
 2271              	.LBE1507:
 349:src/xeq.c     **** 	return get_opcode(RegionTab[region] + offset);
 2272              		.loc 1 349 10 view .LVU606
 2273 003a 4FF49D70 		mov	r0, #314
 2274              	.LVL160:
 351:src/xeq.c     **** 
 2275              		.loc 1 351 1 view .LVU607
 2276 003e 7047     		bx	lr
 2277              	.LVL161:
 2278              	.L185:
 2279              	.LBB1508:
 2280              	.LBB1501:
 321:src/xeq.c     **** 	else
 2281              		.loc 1 321 3 is_stmt 1 view .LVU608
 321:src/xeq.c     **** 	else
 2282              		.loc 1 321 10 is_stmt 0 view .LVU609
 2283 0040 024A     		ldr	r2, .L187+4
 2284 0042 1288     		ldrh	r2, [r2]
 2285 0044 E8E7     		b	.L181
ARM GAS  /tmp/cc7LeJ71.s 			page 140


 2286              	.L188:
 2287 0046 00BF     		.align	2
 2288              	.L187:
 2289 0048 00000000 		.word	.LANCHOR0
 2290 004c 00000000 		.word	xrom_size
 2291              	.LBE1501:
 2292              	.LBE1508:
 2293              		.cfi_endproc
 2294              	.LFE16:
 2296              		.section	.text.get_current_prog,"ax",%progbits
 2297              		.align	1
 2298              		.p2align 2,,3
 2299              		.global	get_current_prog
 2300              		.syntax unified
 2301              		.thumb
 2302              		.thumb_func
 2303              		.fpu fpv4-sp-d16
 2305              	get_current_prog:
 2306              	.LFB17:
 357:src/xeq.c     **** 
 2307              		.loc 1 357 40 is_stmt 1 view -0
 2308              		.cfi_startproc
 2309              		@ args = 0, pretend = 0, frame = 0
 2310              		@ frame_needed = 0, uses_anonymous_args = 0
 2311              		@ link register save eliminated.
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2312              		.loc 1 359 2 view .LVU611
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2313              		.loc 1 359 21 is_stmt 0 view .LVU612
 2314 0000 074B     		ldr	r3, .L190
 360:src/xeq.c     **** }
 2315              		.loc 1 360 18 view .LVU613
 2316 0002 084A     		ldr	r2, .L190+4
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2317              		.loc 1 359 21 view .LVU614
 2318 0004 1B68     		ldr	r3, [r3]
 2319 0006 B3F8EC37 		ldrh	r3, [r3, #2028]
 2320              	.LVL162:
 360:src/xeq.c     **** }
 2321              		.loc 1 360 2 is_stmt 1 view .LVU615
 359:src/xeq.c     **** 	return RegionTab[region] + offsetLIB(ProgBegin);
 2322              		.loc 1 359 12 is_stmt 0 view .LVU616
 2323 000a 990B     		lsrs	r1, r3, #14
 360:src/xeq.c     **** }
 2324              		.loc 1 360 27 view .LVU617
 2325 000c C3F30D03 		ubfx	r3, r3, #0, #14
 2326              	.LVL163:
 360:src/xeq.c     **** }
 2327              		.loc 1 360 27 view .LVU618
 2328 0010 52F82100 		ldr	r0, [r2, r1, lsl #2]
 2329 0014 03F10043 		add	r3, r3, #-2147483648
 2330 0018 013B     		subs	r3, r3, #1
 361:src/xeq.c     **** 
 2331              		.loc 1 361 1 view .LVU619
 2332 001a 00EB4300 		add	r0, r0, r3, lsl #1
 2333 001e 7047     		bx	lr
 2334              	.L191:
ARM GAS  /tmp/cc7LeJ71.s 			page 141


 2335              		.align	2
 2336              	.L190:
 2337 0020 00000000 		.word	main_ram
 2338 0024 00000000 		.word	.LANCHOR0
 2339              		.cfi_endproc
 2340              	.LFE17:
 2342              		.section	.text.do_inc,"ax",%progbits
 2343              		.align	1
 2344              		.p2align 2,,3
 2345              		.global	do_inc
 2346              		.syntax unified
 2347              		.thumb
 2348              		.thumb_func
 2349              		.fpu fpv4-sp-d16
 2351              	do_inc:
 2352              	.LVL164:
 2353              	.LFB20:
 418:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2354              		.loc 1 418 54 is_stmt 1 view -0
 2355              		.cfi_startproc
 2356              		@ args = 0, pretend = 0, frame = 16
 2357              		@ frame_needed = 0, uses_anonymous_args = 0
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2358              		.loc 1 419 2 view .LVU621
 418:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2359              		.loc 1 418 54 is_stmt 0 view .LVU622
 2360 0000 70B5     		push	{r4, r5, r6, lr}
 2361              		.cfi_def_cfa_offset 16
 2362              		.cfi_offset 4, -16
 2363              		.cfi_offset 5, -12
 2364              		.cfi_offset 6, -8
 2365              		.cfi_offset 14, -4
 2366 0002 84B0     		sub	sp, sp, #16
 2367              		.cfi_def_cfa_offset 32
 418:src/xeq.c     **** 	const unsigned short int npc = pc + 1 + isDBL(getprog(pc));
 2368              		.loc 1 418 54 view .LVU623
 2369 0004 0546     		mov	r5, r0
 2370 0006 0191     		str	r1, [sp, #4]
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2371              		.loc 1 419 42 view .LVU624
 2372 0008 FFF7FEFF 		bl	getprog
 2373              	.LVL165:
 423:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2374              		.loc 1 423 12 view .LVU625
 2375 000c 0D4E     		ldr	r6, .L196
 424:src/xeq.c     **** 
 2376              		.loc 1 424 11 view .LVU626
 2377 000e 0199     		ldr	r1, [sp, #4]
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2378              		.loc 1 419 42 view .LVU627
 2379 0010 00F47040 		and	r0, r0, #61440
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2380              		.loc 1 419 27 view .LVU628
 2381 0014 6C1C     		adds	r4, r5, #1
 420:src/xeq.c     **** 	unsigned short int bottom = 0;
 2382              		.loc 1 420 21 view .LVU629
 2383 0016 0023     		movs	r3, #0
ARM GAS  /tmp/cc7LeJ71.s 			page 142


 419:src/xeq.c     **** 	unsigned short int top = 0;
 2384              		.loc 1 419 27 view .LVU630
 2385 0018 B0F5704F 		cmp	r0, #61440
 2386 001c 08BF     		it	eq
 2387 001e 0134     		addeq	r4, r4, #1
 424:src/xeq.c     **** 
 2388              		.loc 1 424 11 view .LVU631
 2389 0020 0DF10E02 		add	r2, sp, #14
 2390 0024 2846     		mov	r0, r5
 423:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2391              		.loc 1 423 12 view .LVU632
 2392 0026 3360     		str	r3, [r6]
 420:src/xeq.c     **** 	unsigned short int bottom = 0;
 2393              		.loc 1 420 21 view .LVU633
 2394 0028 ADF80E30 		strh	r3, [sp, #14]	@ movhi
 424:src/xeq.c     **** 
 2395              		.loc 1 424 11 view .LVU634
 2396 002c FFF7FEFF 		bl	find_section_bounds
 2397              	.LVL166:
 419:src/xeq.c     **** 	unsigned short int top = 0;
 2398              		.loc 1 419 27 view .LVU635
 2399 0030 A4B2     		uxth	r4, r4
 2400              	.LVL167:
 420:src/xeq.c     **** 	unsigned short int bottom = 0;
 2401              		.loc 1 420 2 is_stmt 1 view .LVU636
 421:src/xeq.c     **** 
 2402              		.loc 1 421 2 view .LVU637
 423:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2403              		.loc 1 423 2 view .LVU638
 424:src/xeq.c     **** 
 2404              		.loc 1 424 2 view .LVU639
 426:src/xeq.c     **** 		PcWrapped = 1;
 2405              		.loc 1 426 2 view .LVU640
 426:src/xeq.c     **** 		PcWrapped = 1;
 2406              		.loc 1 426 5 is_stmt 0 view .LVU641
 2407 0032 8442     		cmp	r4, r0
 427:src/xeq.c     **** 		return top;
 2408              		.loc 1 427 3 is_stmt 1 view .LVU642
 428:src/xeq.c     **** 	}
 2409              		.loc 1 428 10 is_stmt 0 view .LVU643
 2410 0034 85BF     		ittet	hi
 2411 0036 BDF80E00 		ldrhhi	r0, [sp, #14]
 2412              	.LVL168:
 427:src/xeq.c     **** 		return top;
 2413              		.loc 1 427 13 view .LVU644
 2414 003a 0123     		movhi	r3, #1
 430:src/xeq.c     **** }
 2415              		.loc 1 430 9 view .LVU645
 2416 003c 2046     		movls	r0, r4
 427:src/xeq.c     **** 		return top;
 2417              		.loc 1 427 13 view .LVU646
 2418 003e 3360     		strhi	r3, [r6]
 428:src/xeq.c     **** 	}
 2419              		.loc 1 428 3 is_stmt 1 view .LVU647
 430:src/xeq.c     **** }
 2420              		.loc 1 430 2 view .LVU648
 431:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 143


 2421              		.loc 1 431 1 is_stmt 0 view .LVU649
 2422 0040 04B0     		add	sp, sp, #16
 2423              		.cfi_def_cfa_offset 16
 2424              		@ sp needed
 2425 0042 70BD     		pop	{r4, r5, r6, pc}
 2426              	.LVL169:
 2427              	.L197:
 431:src/xeq.c     **** 
 2428              		.loc 1 431 1 view .LVU650
 2429              		.align	2
 2430              	.L196:
 2431 0044 00000000 		.word	PcWrapped
 2432              		.cfi_endproc
 2433              	.LFE20:
 2435              		.section	.text.user_pc.part.0,"ax",%progbits
 2436              		.align	1
 2437              		.p2align 2,,3
 2438              		.syntax unified
 2439              		.thumb
 2440              		.thumb_func
 2441              		.fpu fpv4-sp-d16
 2443              	user_pc.part.0:
 2444              	.LVL170:
 2445              	.LFB276:
 494:src/xeq.c     **** 	unsigned int n = 1;
 2446              		.loc 1 494 14 is_stmt 1 view -0
 2447              		.cfi_startproc
 2448              		@ args = 0, pretend = 0, frame = 0
 2449              		@ frame_needed = 0, uses_anonymous_args = 0
 505:src/xeq.c     **** 	while (base < pc) {
 2450              		.loc 1 505 2 view .LVU652
 505:src/xeq.c     **** 	while (base < pc) {
 2451              		.loc 1 505 9 is_stmt 0 view .LVU653
 2452 0000 20F47F53 		bic	r3, r0, #16320
 2453 0004 23F03F03 		bic	r3, r3, #63
 494:src/xeq.c     **** 	unsigned int n = 1;
 2454              		.loc 1 494 14 view .LVU654
 2455 0008 70B5     		push	{r4, r5, r6, lr}
 2456              		.cfi_def_cfa_offset 16
 2457              		.cfi_offset 4, -16
 2458              		.cfi_offset 5, -12
 2459              		.cfi_offset 6, -8
 2460              		.cfi_offset 14, -4
 494:src/xeq.c     **** 	unsigned int n = 1;
 2461              		.loc 1 494 14 view .LVU655
 2462 000a 0546     		mov	r5, r0
 505:src/xeq.c     **** 	while (base < pc) {
 2463              		.loc 1 505 7 view .LVU656
 2464 000c 581C     		adds	r0, r3, #1
 2465              	.LVL171:
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2466              		.loc 1 506 2 is_stmt 1 view .LVU657
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2467              		.loc 1 506 8 view .LVU658
 2468 000e 8542     		cmp	r5, r0
 2469 0010 0ED9     		bls	.L201
 2470 0012 084E     		ldr	r6, .L205
ARM GAS  /tmp/cc7LeJ71.s 			page 144


 495:src/xeq.c     **** 	unsigned int base;
 2471              		.loc 1 495 15 is_stmt 0 view .LVU659
 2472 0014 0124     		movs	r4, #1
 2473 0016 03E0     		b	.L200
 2474              	.LVL172:
 2475              	.L204:
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2476              		.loc 1 506 8 view .LVU660
 2477 0018 8542     		cmp	r5, r0
 510:src/xeq.c     **** 	}
 2478              		.loc 1 510 3 view .LVU661
 2479 001a 04F10104 		add	r4, r4, #1
 2480              	.LVL173:
 506:src/xeq.c     **** 		base = do_inc(base, 0);
 2481              		.loc 1 506 8 is_stmt 1 view .LVU662
 2482 001e 05D9     		bls	.L198
 2483              	.LVL174:
 2484              	.L200:
 507:src/xeq.c     **** 		if (PcWrapped)
 2485              		.loc 1 507 3 view .LVU663
 507:src/xeq.c     **** 		if (PcWrapped)
 2486              		.loc 1 507 10 is_stmt 0 view .LVU664
 2487 0020 0021     		movs	r1, #0
 2488 0022 FFF7FEFF 		bl	do_inc
 2489              	.LVL175:
 510:src/xeq.c     **** 	}
 2490              		.loc 1 510 3 is_stmt 1 view .LVU665
 508:src/xeq.c     **** 			return n;
 2491              		.loc 1 508 6 is_stmt 0 view .LVU666
 2492 0026 3368     		ldr	r3, [r6]
 2493              	.LVL176:
 508:src/xeq.c     **** 			return n;
 2494              		.loc 1 508 3 is_stmt 1 view .LVU667
 508:src/xeq.c     **** 			return n;
 2495              		.loc 1 508 6 is_stmt 0 view .LVU668
 2496 0028 002B     		cmp	r3, #0
 2497 002a F5D0     		beq	.L204
 2498              	.LVL177:
 2499              	.L198:
 513:src/xeq.c     **** 
 2500              		.loc 1 513 1 view .LVU669
 2501 002c 2046     		mov	r0, r4
 2502              	.LVL178:
 513:src/xeq.c     **** 
 2503              		.loc 1 513 1 view .LVU670
 2504 002e 70BD     		pop	{r4, r5, r6, pc}
 2505              	.LVL179:
 2506              	.L201:
 495:src/xeq.c     **** 	unsigned int base;
 2507              		.loc 1 495 15 view .LVU671
 2508 0030 0124     		movs	r4, #1
 2509 0032 FBE7     		b	.L198
 2510              	.L206:
 2511              		.align	2
 2512              	.L205:
 2513 0034 00000000 		.word	PcWrapped
 2514              		.cfi_endproc
ARM GAS  /tmp/cc7LeJ71.s 			page 145


 2515              	.LFE276:
 2517              		.section	.rodata.print_step.str1.4,"aMS",%progbits,1
 2518              		.align	2
 2519              	.LC0:
 2520 0000 3030303A 		.ascii	"000:\000"
 2520      00
 2521              		.section	.text.print_step,"ax",%progbits
 2522              		.align	1
 2523              		.p2align 2,,3
 2524              		.syntax unified
 2525              		.thumb
 2526              		.thumb_func
 2527              		.fpu fpv4-sp-d16
 2529              	print_step:
 2530              	.LVL180:
 2531              	.LFB234:
4429:src/xeq.c     **** 	char buf[16];
 2532              		.loc 1 4429 41 is_stmt 1 view -0
 2533              		.cfi_startproc
 2534              		@ args = 0, pretend = 0, frame = 16
 2535              		@ frame_needed = 0, uses_anonymous_args = 0
4430:src/xeq.c     **** 	const unsigned int pc = state_pc();
 2536              		.loc 1 4430 2 view .LVU673
4431:src/xeq.c     **** 	char *p = TraceBuffer;
 2537              		.loc 1 4431 2 view .LVU674
4431:src/xeq.c     **** 	char *p = TraceBuffer;
 2538              		.loc 1 4431 26 is_stmt 0 view .LVU675
 2539 0000 254B     		ldr	r3, .L221
 2540 0002 1B68     		ldr	r3, [r3]
4429:src/xeq.c     **** 	char buf[16];
 2541              		.loc 1 4429 41 view .LVU676
 2542 0004 F0B5     		push	{r4, r5, r6, r7, lr}
 2543              		.cfi_def_cfa_offset 20
 2544              		.cfi_offset 4, -20
 2545              		.cfi_offset 5, -16
 2546              		.cfi_offset 6, -12
 2547              		.cfi_offset 7, -8
 2548              		.cfi_offset 14, -4
4431:src/xeq.c     **** 	char *p = TraceBuffer;
 2549              		.loc 1 4431 26 view .LVU677
 2550 0006 B3F8E047 		ldrh	r4, [r3, #2016]
 2551              	.LVL181:
4432:src/xeq.c     **** 
 2552              		.loc 1 4432 2 is_stmt 1 view .LVU678
4434:src/xeq.c     **** 		*p++ = 'x';
 2553              		.loc 1 4434 2 view .LVU679
4434:src/xeq.c     **** 		*p++ = 'x';
 2554              		.loc 1 4434 6 is_stmt 0 view .LVU680
 2555 000a A10B     		lsrs	r1, r4, #14
4434:src/xeq.c     **** 		*p++ = 'x';
 2556              		.loc 1 4434 5 view .LVU681
 2557 000c 0329     		cmp	r1, #3
4429:src/xeq.c     **** 	char buf[16];
 2558              		.loc 1 4429 41 view .LVU682
 2559 000e 85B0     		sub	sp, sp, #20
 2560              		.cfi_def_cfa_offset 40
4429:src/xeq.c     **** 	char buf[16];
ARM GAS  /tmp/cc7LeJ71.s 			page 146


 2561              		.loc 1 4429 41 view .LVU683
 2562 0010 0546     		mov	r5, r0
4434:src/xeq.c     **** 		*p++ = 'x';
 2563              		.loc 1 4434 5 view .LVU684
 2564 0012 39D0     		beq	.L218
4436:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2565              		.loc 1 4436 9 is_stmt 1 view .LVU685
4436:src/xeq.c     **** 		p = num_arg_0(p, nLIB(pc), 1);
 2566              		.loc 1 4436 12 is_stmt 0 view .LVU686
 2567 0014 14F4404F 		tst	r4, #49152
 2568 0018 0FD1     		bne	.L219
4432:src/xeq.c     **** 
 2569              		.loc 1 4432 8 view .LVU687
 2570 001a 204E     		ldr	r6, .L221+4
 2571 001c 3746     		mov	r7, r6
 2572              	.LVL182:
4440:src/xeq.c     **** 		scopy(p, "000:");
 2573              		.loc 1 4440 2 is_stmt 1 view .LVU688
4440:src/xeq.c     **** 		scopy(p, "000:");
 2574              		.loc 1 4440 5 is_stmt 0 view .LVU689
 2575 001e BCB9     		cbnz	r4, .L220
 2576              	.LVL183:
 2577              	.L212:
4441:src/xeq.c     **** 	else {
 2578              		.loc 1 4441 3 is_stmt 1 view .LVU690
 2579 0020 1F49     		ldr	r1, .L221+8
 2580 0022 3846     		mov	r0, r7
 2581 0024 FFF7FEFF 		bl	scopy
 2582              	.LVL184:
 2583              	.L211:
4449:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2584              		.loc 1 4449 2 view .LVU691
4449:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2585              		.loc 1 4449 20 is_stmt 0 view .LVU692
 2586 0028 1E4A     		ldr	r2, .L221+12
4450:src/xeq.c     **** }
 2587              		.loc 1 4450 10 view .LVU693
 2588 002a 1F49     		ldr	r1, .L221+16
4449:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2589              		.loc 1 4449 20 view .LVU694
 2590 002c 937D     		ldrb	r3, [r2, #22]	@ zero_extendqisi2
4450:src/xeq.c     **** }
 2591              		.loc 1 4450 10 view .LVU695
 2592 002e 0E60     		str	r6, [r1]
4449:src/xeq.c     **** 	DispMsg = TraceBuffer;
 2593              		.loc 1 4449 20 view .LVU696
 2594 0030 43F08003 		orr	r3, r3, #128
 2595 0034 9375     		strb	r3, [r2, #22]
4450:src/xeq.c     **** }
 2596              		.loc 1 4450 2 is_stmt 1 view .LVU697
4451:src/xeq.c     **** 
 2597              		.loc 1 4451 1 is_stmt 0 view .LVU698
 2598 0036 05B0     		add	sp, sp, #20
 2599              		.cfi_remember_state
 2600              		.cfi_def_cfa_offset 20
 2601              		@ sp needed
 2602 0038 F0BD     		pop	{r4, r5, r6, r7, pc}
ARM GAS  /tmp/cc7LeJ71.s 			page 147


 2603              	.LVL185:
 2604              	.L219:
 2605              		.cfi_restore_state
4437:src/xeq.c     **** 		*p++ = ' ';
 2606              		.loc 1 4437 3 is_stmt 1 view .LVU699
4437:src/xeq.c     **** 		*p++ = ' ';
 2607              		.loc 1 4437 7 is_stmt 0 view .LVU700
 2608 003a 1848     		ldr	r0, .L221+4
 2609              	.LVL186:
4437:src/xeq.c     **** 		*p++ = ' ';
 2610              		.loc 1 4437 7 view .LVU701
 2611 003c 0122     		movs	r2, #1
 2612 003e 0646     		mov	r6, r0
 2613 0040 FFF7FEFF 		bl	num_arg_0
 2614              	.LVL187:
4438:src/xeq.c     **** 	}
 2615              		.loc 1 4438 3 is_stmt 1 view .LVU702
4438:src/xeq.c     **** 	}
 2616              		.loc 1 4438 5 is_stmt 0 view .LVU703
 2617 0044 0746     		mov	r7, r0
 2618              	.LVL188:
4438:src/xeq.c     **** 	}
 2619              		.loc 1 4438 8 view .LVU704
 2620 0046 2023     		movs	r3, #32
 2621 0048 07F8013B 		strb	r3, [r7], #1
 2622              	.LVL189:
4440:src/xeq.c     **** 		scopy(p, "000:");
 2623              		.loc 1 4440 2 is_stmt 1 view .LVU705
4440:src/xeq.c     **** 		scopy(p, "000:");
 2624              		.loc 1 4440 5 is_stmt 0 view .LVU706
 2625 004c 002C     		cmp	r4, #0
 2626 004e E7D0     		beq	.L212
 2627              	.L220:
 2628              	.LVL190:
 2629              	.LBB1509:
 2630              	.LBB1510:
4440:src/xeq.c     **** 		scopy(p, "000:");
 2631              		.loc 1 4440 5 view .LVU707
 2632 0050 2046     		mov	r0, r4
 2633 0052 FFF7FEFF 		bl	user_pc.part.0
 2634              	.LVL191:
 2635 0056 0146     		mov	r1, r0
 2636              	.L209:
4440:src/xeq.c     **** 		scopy(p, "000:");
 2637              		.loc 1 4440 5 view .LVU708
 2638              	.LBE1510:
 2639              	.LBE1509:
4443:src/xeq.c     **** 		*p++ = ':';
 2640              		.loc 1 4443 7 view .LVU709
 2641 0058 0322     		movs	r2, #3
 2642 005a 3846     		mov	r0, r7
 2643 005c FFF7FEFF 		bl	num_arg_0
 2644              	.LVL192:
4444:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2645              		.loc 1 4444 8 view .LVU710
 2646 0060 0746     		mov	r7, r0
 2647 0062 3A23     		movs	r3, #58
ARM GAS  /tmp/cc7LeJ71.s 			page 148


 2648 0064 07F8013B 		strb	r3, [r7], #1
4443:src/xeq.c     **** 		*p++ = ':';
 2649              		.loc 1 4443 7 view .LVU711
 2650 0068 0446     		mov	r4, r0
 2651              	.LVL193:
4444:src/xeq.c     **** 		scopy_char(p, prt(op, buf), '\0');
 2652              		.loc 1 4444 3 is_stmt 1 view .LVU712
4445:src/xeq.c     **** 		if (*p == '?')
 2653              		.loc 1 4445 3 view .LVU713
 2654 006a 6946     		mov	r1, sp
 2655 006c 2846     		mov	r0, r5
 2656 006e FFF7FEFF 		bl	prt
 2657              	.LVL194:
 2658 0072 0022     		movs	r2, #0
 2659 0074 0146     		mov	r1, r0
 2660 0076 3846     		mov	r0, r7
 2661 0078 FFF7FEFF 		bl	scopy_char
 2662              	.LVL195:
4446:src/xeq.c     **** 			*p = '\0';
 2663              		.loc 1 4446 3 view .LVU714
4446:src/xeq.c     **** 			*p = '\0';
 2664              		.loc 1 4446 6 is_stmt 0 view .LVU715
 2665 007c 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
 2666 007e 3F2B     		cmp	r3, #63
4447:src/xeq.c     **** 	}
 2667              		.loc 1 4447 4 is_stmt 1 view .LVU716
4447:src/xeq.c     **** 	}
 2668              		.loc 1 4447 7 is_stmt 0 view .LVU717
 2669 0080 04BF     		itt	eq
 2670 0082 0023     		moveq	r3, #0
 2671 0084 6370     		strbeq	r3, [r4, #1]
 2672 0086 CFE7     		b	.L211
 2673              	.LVL196:
 2674              	.L218:
4435:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2675              		.loc 1 4435 3 is_stmt 1 view .LVU718
4435:src/xeq.c     **** 	} else if (isLIB(pc)) {
 2676              		.loc 1 4435 8 is_stmt 0 view .LVU719
 2677 0088 044E     		ldr	r6, .L221+4
 2678 008a 3746     		mov	r7, r6
 2679 008c 7823     		movs	r3, #120
 2680 008e 07F8013B 		strb	r3, [r7], #1
4440:src/xeq.c     **** 		scopy(p, "000:");
 2681              		.loc 1 4440 2 is_stmt 1 view .LVU720
4443:src/xeq.c     **** 		*p++ = ':';
 2682              		.loc 1 4443 3 view .LVU721
 2683              	.LBB1512:
 2684              	.LBI1509:
 494:src/xeq.c     **** 	unsigned int n = 1;
 2685              		.loc 1 494 14 view .LVU722
 2686              	.LBB1511:
 495:src/xeq.c     **** 	unsigned int base;
 2687              		.loc 1 495 2 view .LVU723
 2688              	.LVL197:
 496:src/xeq.c     **** 
 2689              		.loc 1 496 2 view .LVU724
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
ARM GAS  /tmp/cc7LeJ71.s 			page 149


 2690              		.loc 1 499 2 view .LVU725
 500:src/xeq.c     **** #else
 2691              		.loc 1 500 3 view .LVU726
 500:src/xeq.c     **** #else
 2692              		.loc 1 500 24 is_stmt 0 view .LVU727
 2693 0092 C4F30D01 		ubfx	r1, r4, #0, #14
 2694 0096 DFE7     		b	.L209
 2695              	.L222:
 2696              		.align	2
 2697              	.L221:
 2698 0098 00000000 		.word	main_ram
 2699 009c 00000000 		.word	TraceBuffer
 2700 00a0 00000000 		.word	.LC0
 2701 00a4 00000000 		.word	StateWhileOn
 2702 00a8 00000000 		.word	DispMsg
 2703              	.LBE1511:
 2704              	.LBE1512:
 2705              		.cfi_endproc
 2706              	.LFE234:
 2708              		.section	.text.do_dec,"ax",%progbits
 2709              		.align	1
 2710              		.p2align 2,,3
 2711              		.global	do_dec
 2712              		.syntax unified
 2713              		.thumb
 2714              		.thumb_func
 2715              		.fpu fpv4-sp-d16
 2717              	do_dec:
 2718              	.LVL198:
 2719              	.LFB21:
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2720              		.loc 1 437 48 is_stmt 1 view -0
 2721              		.cfi_startproc
 2722              		@ args = 0, pretend = 0, frame = 8
 2723              		@ frame_needed = 0, uses_anonymous_args = 0
 438:src/xeq.c     **** 	unsigned short int bottom = 0;
 2724              		.loc 1 438 2 view .LVU729
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2725              		.loc 1 437 48 is_stmt 0 view .LVU730
 2726 0000 70B5     		push	{r4, r5, r6, lr}
 2727              		.cfi_def_cfa_offset 16
 2728              		.cfi_offset 4, -16
 2729              		.cfi_offset 5, -12
 2730              		.cfi_offset 6, -8
 2731              		.cfi_offset 14, -4
 441:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2732              		.loc 1 441 12 view .LVU731
 2733 0002 114E     		ldr	r6, .L228
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2734              		.loc 1 437 48 view .LVU732
 2735 0004 82B0     		sub	sp, sp, #8
 2736              		.cfi_def_cfa_offset 24
 438:src/xeq.c     **** 	unsigned short int bottom = 0;
 2737              		.loc 1 438 21 view .LVU733
 2738 0006 0023     		movs	r3, #0
 442:src/xeq.c     **** 
 2739              		.loc 1 442 11 view .LVU734
ARM GAS  /tmp/cc7LeJ71.s 			page 150


 2740 0008 0DF10602 		add	r2, sp, #6
 437:src/xeq.c     **** 	unsigned short int top = 0;
 2741              		.loc 1 437 48 view .LVU735
 2742 000c 0546     		mov	r5, r0
 441:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2743              		.loc 1 441 12 view .LVU736
 2744 000e 3360     		str	r3, [r6]
 438:src/xeq.c     **** 	unsigned short int bottom = 0;
 2745              		.loc 1 438 21 view .LVU737
 2746 0010 ADF80630 		strh	r3, [sp, #6]	@ movhi
 439:src/xeq.c     **** 
 2747              		.loc 1 439 2 is_stmt 1 view .LVU738
 2748              	.LVL199:
 441:src/xeq.c     **** 	bottom = find_section_bounds(pc, endp, &top);
 2749              		.loc 1 441 2 view .LVU739
 442:src/xeq.c     **** 
 2750              		.loc 1 442 2 view .LVU740
 442:src/xeq.c     **** 
 2751              		.loc 1 442 11 is_stmt 0 view .LVU741
 2752 0014 FFF7FEFF 		bl	find_section_bounds
 2753              	.LVL200:
 444:src/xeq.c     **** 		PcWrapped = 1;
 2754              		.loc 1 444 9 view .LVU742
 2755 0018 BDF80630 		ldrh	r3, [sp, #6]
 2756              	.LVL201:
 444:src/xeq.c     **** 		PcWrapped = 1;
 2757              		.loc 1 444 2 is_stmt 1 view .LVU743
 444:src/xeq.c     **** 		PcWrapped = 1;
 2758              		.loc 1 444 5 is_stmt 0 view .LVU744
 2759 001c AB42     		cmp	r3, r5
 445:src/xeq.c     **** 		pc = bottom;
 2760              		.loc 1 445 13 view .LVU745
 2761 001e 25BF     		ittet	cs
 2762 0020 0122     		movcs	r2, #1
 2763 0022 0446     		movcs	r4, r0
 445:src/xeq.c     **** 		pc = bottom;
 2764              		.loc 1 445 3 is_stmt 1 view .LVU746
 449:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2765              		.loc 1 449 3 is_stmt 0 view .LVU747
 2766 0024 05F1FF34 		addcc	r4, r5, #-1
 445:src/xeq.c     **** 		pc = bottom;
 2767              		.loc 1 445 13 view .LVU748
 2768 0028 3260     		strcs	r2, [r6]
 446:src/xeq.c     **** 	}
 2769              		.loc 1 446 3 is_stmt 1 view .LVU749
 2770              	.LVL202:
 449:src/xeq.c     **** 	if (pc > top && isDBL(getprog(pc - 1)))
 2771              		.loc 1 449 3 view .LVU750
 450:src/xeq.c     **** 		--pc;
 2772              		.loc 1 450 2 view .LVU751
 450:src/xeq.c     **** 		--pc;
 2773              		.loc 1 450 5 is_stmt 0 view .LVU752
 2774 002a A342     		cmp	r3, r4
 2775 002c 09D2     		bcs	.L223
 450:src/xeq.c     **** 		--pc;
 2776              		.loc 1 450 18 discriminator 1 view .LVU753
 2777 002e 651E     		subs	r5, r4, #1
ARM GAS  /tmp/cc7LeJ71.s 			page 151


 2778 0030 2846     		mov	r0, r5
 2779              	.LVL203:
 450:src/xeq.c     **** 		--pc;
 2780              		.loc 1 450 18 discriminator 1 view .LVU754
 2781 0032 FFF7FEFF 		bl	getprog
 2782              	.LVL204:
 2783 0036 00F47040 		and	r0, r0, #61440
 451:src/xeq.c     **** 	return pc;
 2784              		.loc 1 451 3 discriminator 1 view .LVU755
 2785 003a B0F5704F 		cmp	r0, #61440
 2786 003e 08BF     		it	eq
 2787 0040 2C46     		moveq	r4, r5
 2788              	.LVL205:
 2789              	.L223:
 453:src/xeq.c     **** 
 2790              		.loc 1 453 1 view .LVU756
 2791 0042 2046     		mov	r0, r4
 2792 0044 02B0     		add	sp, sp, #8
 2793              		.cfi_def_cfa_offset 16
 2794              		@ sp needed
 2795 0046 70BD     		pop	{r4, r5, r6, pc}
 2796              	.L229:
 2797              		.align	2
 2798              	.L228:
 2799 0048 00000000 		.word	PcWrapped
 2800              		.cfi_endproc
 2801              	.LFE21:
 2803              		.section	.text.update_program_bounds,"ax",%progbits
 2804              		.align	1
 2805              		.p2align 2,,3
 2806              		.global	update_program_bounds
 2807              		.syntax unified
 2808              		.thumb
 2809              		.thumb_func
 2810              		.fpu fpv4-sp-d16
 2812              	update_program_bounds:
 2813              	.LVL206:
 2814              	.LFB24:
 470:src/xeq.c     **** 	unsigned int pc = state_pc();
 2815              		.loc 1 470 45 is_stmt 1 view -0
 2816              		.cfi_startproc
 2817              		@ args = 0, pretend = 0, frame = 0
 2818              		@ frame_needed = 0, uses_anonymous_args = 0
 471:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2819              		.loc 1 471 2 view .LVU758
 470:src/xeq.c     **** 	unsigned int pc = state_pc();
 2820              		.loc 1 470 45 is_stmt 0 view .LVU759
 2821 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 2822              		.cfi_def_cfa_offset 24
 2823              		.cfi_offset 3, -24
 2824              		.cfi_offset 4, -20
 2825              		.cfi_offset 5, -16
 2826              		.cfi_offset 6, -12
 2827              		.cfi_offset 7, -8
 2828              		.cfi_offset 14, -4
 471:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2829              		.loc 1 471 20 view .LVU760
ARM GAS  /tmp/cc7LeJ71.s 			page 152


 2830 0002 224F     		ldr	r7, .L251
 2831 0004 3D68     		ldr	r5, [r7]
 471:src/xeq.c     **** 	if (pc == 0 && State2.runmode)
 2832              		.loc 1 471 15 view .LVU761
 2833 0006 B5F8E047 		ldrh	r4, [r5, #2016]
 2834              	.LVL207:
 472:src/xeq.c     **** 		State.pc = pc = 1;
 2835              		.loc 1 472 2 is_stmt 1 view .LVU762
 472:src/xeq.c     **** 		State.pc = pc = 1;
 2836              		.loc 1 472 5 is_stmt 0 view .LVU763
 2837 000a 34B9     		cbnz	r4, .L231
 472:src/xeq.c     **** 		State.pc = pc = 1;
 2838              		.loc 1 472 14 discriminator 1 view .LVU764
 2839 000c 204B     		ldr	r3, .L251+4
 2840 000e 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
 2841 0010 5B06     		lsls	r3, r3, #25
 473:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2842              		.loc 1 473 3 is_stmt 1 discriminator 1 view .LVU765
 2843              	.LVL208:
 473:src/xeq.c     **** 	if (! force && pc >= ProgBegin && pc <= ProgEnd)
 2844              		.loc 1 473 12 is_stmt 0 discriminator 1 view .LVU766
 2845 0012 44BF     		itt	mi
 2846 0014 0124     		movmi	r4, #1
 2847 0016 A5F8E047 		strhmi	r4, [r5, #2016]	@ movhi
 2848              	.LVL209:
 2849              	.L231:
 474:src/xeq.c     **** 		return;
 2850              		.loc 1 474 2 is_stmt 1 view .LVU767
 474:src/xeq.c     **** 		return;
 2851              		.loc 1 474 5 is_stmt 0 view .LVU768
 2852 001a 18B9     		cbnz	r0, .L232
 474:src/xeq.c     **** 		return;
 2853              		.loc 1 474 23 discriminator 1 view .LVU769
 2854 001c B5F8EC37 		ldrh	r3, [r5, #2028]
 474:src/xeq.c     **** 		return;
 2855              		.loc 1 474 14 discriminator 1 view .LVU770
 2856 0020 A342     		cmp	r3, r4
 2857 0022 2DD9     		bls	.L248
 2858              	.L232:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2859              		.loc 1 476 2 is_stmt 1 view .LVU771
 476:src/xeq.c     **** 		ProgEnd = pc;
 2860              		.loc 1 476 17 is_stmt 0 view .LVU772
 2861 0024 1B4E     		ldr	r6, .L251+8
 2862 0026 0023     		movs	r3, #0
 2863 0028 3360     		str	r3, [r6]
 476:src/xeq.c     **** 		ProgEnd = pc;
 2864              		.loc 1 476 22 is_stmt 1 view .LVU773
 2865 002a 05E0     		b	.L236
 2866              	.LVL210:
 2867              	.L249:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2868              		.loc 1 476 39 is_stmt 0 discriminator 2 view .LVU774
 2869 002c FFF7FEFF 		bl	do_inc
 2870              	.LVL211:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2871              		.loc 1 476 2 discriminator 2 view .LVU775
ARM GAS  /tmp/cc7LeJ71.s 			page 153


 2872 0030 3368     		ldr	r3, [r6]
 2873 0032 3D68     		ldr	r5, [r7]
 476:src/xeq.c     **** 		ProgEnd = pc;
 2874              		.loc 1 476 39 discriminator 2 view .LVU776
 2875 0034 0446     		mov	r4, r0
 2876              	.LVL212:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2877              		.loc 1 476 22 is_stmt 1 discriminator 2 view .LVU777
 476:src/xeq.c     **** 		ProgEnd = pc;
 2878              		.loc 1 476 2 is_stmt 0 discriminator 2 view .LVU778
 2879 0036 5BB9     		cbnz	r3, .L234
 2880              	.LVL213:
 2881              	.L236:
 477:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2882              		.loc 1 477 3 is_stmt 1 view .LVU779
 477:src/xeq.c     **** 		if (getprog(pc) == (OP_NIL | OP_END)) {
 2883              		.loc 1 477 11 is_stmt 0 view .LVU780
 2884 0038 A5F8EE47 		strh	r4, [r5, #2030]	@ movhi
 478:src/xeq.c     **** 			break;
 2885              		.loc 1 478 3 is_stmt 1 view .LVU781
 478:src/xeq.c     **** 			break;
 2886              		.loc 1 478 7 is_stmt 0 view .LVU782
 2887 003c 2046     		mov	r0, r4
 2888 003e FFF7FEFF 		bl	getprog
 2889              	.LVL214:
 476:src/xeq.c     **** 		ProgEnd = pc;
 2890              		.loc 1 476 34 is_stmt 1 view .LVU783
 478:src/xeq.c     **** 			break;
 2891              		.loc 1 478 7 is_stmt 0 view .LVU784
 2892 0042 0346     		mov	r3, r0
 478:src/xeq.c     **** 			break;
 2893              		.loc 1 478 6 view .LVU785
 2894 0044 B3F59D7F 		cmp	r3, #314
 476:src/xeq.c     **** 		ProgEnd = pc;
 2895              		.loc 1 476 39 view .LVU786
 2896 0048 4FF00001 		mov	r1, #0
 2897 004c 2046     		mov	r0, r4
 478:src/xeq.c     **** 			break;
 2898              		.loc 1 478 6 view .LVU787
 2899 004e EDD1     		bne	.L249
 2900              	.LVL215:
 2901              	.L234:
 482:src/xeq.c     **** 		const unsigned int opc = pc;
 2902              		.loc 1 482 2 is_stmt 1 view .LVU788
 482:src/xeq.c     **** 		const unsigned int opc = pc;
 2903              		.loc 1 482 10 is_stmt 0 view .LVU789
 2904 0050 B5F8E047 		ldrh	r4, [r5, #2016]
 2905              	.LVL216:
 482:src/xeq.c     **** 		const unsigned int opc = pc;
 2906              		.loc 1 482 10 view .LVU790
 2907 0054 04E0     		b	.L238
 2908              	.LVL217:
 2909              	.L250:
 2910              	.LBB1513:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2911              		.loc 1 485 20 discriminator 1 view .LVU791
 2912 0056 FFF7FEFF 		bl	getprog
ARM GAS  /tmp/cc7LeJ71.s 			page 154


 2913              	.LVL218:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2914              		.loc 1 485 17 discriminator 1 view .LVU792
 2915 005a B0F59D7F 		cmp	r0, #314
 2916 005e 08D0     		beq	.L237
 2917              	.LVL219:
 2918              	.L238:
 483:src/xeq.c     **** 		pc = do_dec(opc, 0);
 2919              		.loc 1 483 3 is_stmt 1 view .LVU793
 484:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2920              		.loc 1 484 3 view .LVU794
 484:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2921              		.loc 1 484 8 is_stmt 0 view .LVU795
 2922 0060 2046     		mov	r0, r4
 2923 0062 0021     		movs	r1, #0
 2924 0064 FFF7FEFF 		bl	do_dec
 2925              	.LVL220:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2926              		.loc 1 485 6 view .LVU796
 2927 0068 3368     		ldr	r3, [r6]
 2928 006a 2546     		mov	r5, r4
 484:src/xeq.c     **** 		if (PcWrapped || getprog(pc) == (OP_NIL | OP_END)) {
 2929              		.loc 1 484 8 view .LVU797
 2930 006c 0446     		mov	r4, r0
 2931              	.LVL221:
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2932              		.loc 1 485 3 is_stmt 1 view .LVU798
 485:src/xeq.c     **** 			ProgBegin = opc == 0 ? 1 : opc;
 2933              		.loc 1 485 6 is_stmt 0 view .LVU799
 2934 006e 002B     		cmp	r3, #0
 2935 0070 F1D0     		beq	.L250
 2936              	.LVL222:
 2937              	.L237:
 486:src/xeq.c     **** 			break;
 2938              		.loc 1 486 4 is_stmt 1 view .LVU800
 486:src/xeq.c     **** 			break;
 2939              		.loc 1 486 14 is_stmt 0 view .LVU801
 2940 0072 3B68     		ldr	r3, [r7]
 2941 0074 012D     		cmp	r5, #1
 2942 0076 38BF     		it	cc
 2943 0078 0125     		movcc	r5, #1
 2944              	.LVL223:
 486:src/xeq.c     **** 			break;
 2945              		.loc 1 486 14 view .LVU802
 2946 007a A3F8EC57 		strh	r5, [r3, #2028]	@ movhi
 487:src/xeq.c     **** 		}
 2947              		.loc 1 487 4 is_stmt 1 view .LVU803
 2948              	.LBE1513:
 490:src/xeq.c     **** 
 2949              		.loc 1 490 1 is_stmt 0 view .LVU804
 2950 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2951              	.LVL224:
 2952              	.L248:
 474:src/xeq.c     **** 		return;
 2953              		.loc 1 474 42 discriminator 2 view .LVU805
 2954 0080 B5F8EE37 		ldrh	r3, [r5, #2030]
 474:src/xeq.c     **** 		return;
ARM GAS  /tmp/cc7LeJ71.s 			page 155


 2955              		.loc 1 474 33 discriminator 2 view .LVU806
 2956 0084 A342     		cmp	r3, r4
 2957 0086 CDD3     		bcc	.L232
 490:src/xeq.c     **** 
 2958              		.loc 1 490 1 view .LVU807
 2959 0088 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2960              	.LVL225:
 2961              	.L252:
 490:src/xeq.c     **** 
 2962              		.loc 1 490 1 view .LVU808
 2963 008a 00BF     		.align	2
 2964              	.L251:
 2965 008c 00000000 		.word	main_ram
 2966 0090 00000000 		.word	StateWhileOn
 2967 0094 00000000 		.word	PcWrapped
 2968              		.cfi_endproc
 2969              	.LFE24:
 2971              		.section	.text.set_pc,"ax",%progbits
 2972              		.align	1
 2973              		.p2align 2,,3
 2974              		.global	set_pc
 2975              		.syntax unified
 2976              		.thumb
 2977              		.thumb_func
 2978              		.fpu fpv4-sp-d16
 2980              	set_pc:
 2981              	.LVL226:
 2982              	.LFB18:
 367:src/xeq.c     **** 	if (isRAM(pc)) {
 2983              		.loc 1 367 30 is_stmt 1 view -0
 2984              		.cfi_startproc
 2985              		@ args = 0, pretend = 0, frame = 0
 2986              		@ frame_needed = 0, uses_anonymous_args = 0
 368:src/xeq.c     **** 		if (pc > ProgSize)
 2987              		.loc 1 368 2 view .LVU810
 368:src/xeq.c     **** 		if (pc > ProgSize)
 2988              		.loc 1 368 5 is_stmt 0 view .LVU811
 2989 0000 10F4704F 		tst	r0, #61440
 367:src/xeq.c     **** 	if (isRAM(pc)) {
 2990              		.loc 1 367 30 view .LVU812
 2991 0004 38B5     		push	{r3, r4, r5, lr}
 2992              		.cfi_def_cfa_offset 16
 2993              		.cfi_offset 3, -16
 2994              		.cfi_offset 4, -12
 2995              		.cfi_offset 5, -8
 2996              		.cfi_offset 14, -4
 367:src/xeq.c     **** 	if (isRAM(pc)) {
 2997              		.loc 1 367 30 view .LVU813
 2998 0006 0446     		mov	r4, r0
 368:src/xeq.c     **** 		if (pc > ProgSize)
 2999              		.loc 1 368 5 view .LVU814
 3000 0008 15D1     		bne	.L254
 369:src/xeq.c     **** 			pc = ProgSize;
 3001              		.loc 1 369 3 is_stmt 1 view .LVU815
 369:src/xeq.c     **** 			pc = ProgSize;
 3002              		.loc 1 369 12 is_stmt 0 view .LVU816
 3003 000a 264B     		ldr	r3, .L262
ARM GAS  /tmp/cc7LeJ71.s 			page 156


 3004 000c 1B68     		ldr	r3, [r3]
 3005 000e 5A88     		ldrh	r2, [r3, #2]
 3006 0010 9042     		cmp	r0, r2
 3007 0012 28BF     		it	cs
 3008 0014 1446     		movcs	r4, r2
 3009              	.LVL227:
 371:src/xeq.c     **** 			pc--;
 3010              		.loc 1 371 3 is_stmt 1 view .LVU817
 371:src/xeq.c     **** 			pc--;
 3011              		.loc 1 371 6 is_stmt 0 view .LVU818
 3012 0016 012C     		cmp	r4, #1
 3013 0018 06D9     		bls	.L255
 371:src/xeq.c     **** 			pc--;
 3014              		.loc 1 371 14 discriminator 1 view .LVU819
 3015 001a 33F81420 		ldrh	r2, [r3, r4, lsl #1]
 3016 001e 02F47042 		and	r2, r2, #61440
 3017 0022 B2F5704F 		cmp	r2, #61440
 3018 0026 35D0     		beq	.L261
 3019              	.L255:
 380:src/xeq.c     **** }
 3020              		.loc 1 380 2 is_stmt 1 view .LVU820
 3021              	.LVL228:
 3022              	.LBB1514:
 3023              	.LBI1514:
 282:src/xeq.c     **** 	State.pc = pc;
 3024              		.loc 1 282 13 view .LVU821
 3025              	.LBB1515:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3026              		.loc 1 283 2 view .LVU822
 283:src/xeq.c     **** 	update_program_bounds(0);
 3027              		.loc 1 283 11 is_stmt 0 view .LVU823
 3028 0028 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3029              		.loc 1 284 2 is_stmt 1 view .LVU824
 3030 002c 0020     		movs	r0, #0
 3031              	.LBE1515:
 3032              	.LBE1514:
 381:src/xeq.c     **** 
 3033              		.loc 1 381 1 is_stmt 0 view .LVU825
 3034 002e BDE83840 		pop	{r3, r4, r5, lr}
 3035              		.cfi_remember_state
 3036              		.cfi_restore 14
 3037              		.cfi_restore 5
 3038              		.cfi_restore 4
 3039              		.cfi_restore 3
 3040              		.cfi_def_cfa_offset 0
 3041              	.LVL229:
 3042              	.LBB1523:
 3043              	.LBB1516:
 284:src/xeq.c     **** }
 3044              		.loc 1 284 2 view .LVU826
 3045 0032 FFF7FEBF 		b	update_program_bounds
 3046              	.LVL230:
 3047              	.L254:
 3048              		.cfi_restore_state
 284:src/xeq.c     **** }
 3049              		.loc 1 284 2 view .LVU827
ARM GAS  /tmp/cc7LeJ71.s 			page 157


 3050              	.LBE1516:
 3051              	.LBE1523:
 373:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3052              		.loc 1 373 9 is_stmt 1 view .LVU828
 373:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3053              		.loc 1 373 14 is_stmt 0 view .LVU829
 3054 0036 820B     		lsrs	r2, r0, #14
 373:src/xeq.c     **** 		const unsigned int n = startLIB(pc) + sizeLIB(nLIB(pc));
 3055              		.loc 1 373 12 view .LVU830
 3056 0038 032A     		cmp	r2, #3
 3057 003a 22D0     		beq	.L260
 3058              	.LBB1524:
 374:src/xeq.c     **** 		if (pc > n - 1)
 3059              		.loc 1 374 3 is_stmt 1 view .LVU831
 3060              	.LVL231:
 3061              	.LBB1525:
 3062              	.LBI1525:
 319:src/xeq.c     **** 	if (region == REGION_XROM)
 3063              		.loc 1 319 5 view .LVU832
 3064              	.LBB1526:
 320:src/xeq.c     **** 		return xrom_size;
 3065              		.loc 1 320 2 view .LVU833
 323:src/xeq.c     **** }
 3066              		.loc 1 323 3 view .LVU834
 323:src/xeq.c     **** }
 3067              		.loc 1 323 24 is_stmt 0 view .LVU835
 3068 003c 1A49     		ldr	r1, .L262+4
 3069              	.LBE1526:
 3070              	.LBE1525:
 374:src/xeq.c     **** 		if (pc > n - 1)
 3071              		.loc 1 374 26 view .LVU836
 3072 003e 1B4B     		ldr	r3, .L262+8
 3073              	.LBB1528:
 3074              	.LBB1527:
 323:src/xeq.c     **** }
 3075              		.loc 1 323 32 view .LVU837
 3076 0040 51F82220 		ldr	r2, [r1, r2, lsl #2]
 3077              	.LBE1527:
 3078              	.LBE1528:
 374:src/xeq.c     **** 		if (pc > n - 1)
 3079              		.loc 1 374 39 view .LVU838
 3080 0044 32F8022C 		ldrh	r2, [r2, #-2]
 374:src/xeq.c     **** 		if (pc > n - 1)
 3081              		.loc 1 374 26 view .LVU839
 3082 0048 00EA0301 		and	r1, r0, r3
 374:src/xeq.c     **** 		if (pc > n - 1)
 3083              		.loc 1 374 39 view .LVU840
 3084 004c 0A44     		add	r2, r2, r1
 3085              	.LVL232:
 375:src/xeq.c     **** 			pc = n - 1;
 3086              		.loc 1 375 3 is_stmt 1 view .LVU841
 3087 004e 9042     		cmp	r0, r2
 3088 0050 28BF     		it	cs
 3089 0052 1446     		movcs	r4, r2
 3090              	.LVL233:
 377:src/xeq.c     **** 			--pc;
 3091              		.loc 1 377 3 view .LVU842
ARM GAS  /tmp/cc7LeJ71.s 			page 158


 377:src/xeq.c     **** 			--pc;
 3092              		.loc 1 377 12 is_stmt 0 view .LVU843
 3093 0054 2340     		ands	r3, r3, r4
 3094 0056 0133     		adds	r3, r3, #1
 377:src/xeq.c     **** 			--pc;
 3095              		.loc 1 377 6 view .LVU844
 3096 0058 A342     		cmp	r3, r4
 3097 005a 12D2     		bcs	.L260
 377:src/xeq.c     **** 			--pc;
 3098              		.loc 1 377 28 discriminator 1 view .LVU845
 3099 005c 651E     		subs	r5, r4, #1
 3100 005e 2846     		mov	r0, r5
 3101 0060 FFF7FEFF 		bl	getprog
 3102              	.LVL234:
 377:src/xeq.c     **** 			--pc;
 3103              		.loc 1 377 28 discriminator 1 view .LVU846
 3104 0064 0F4B     		ldr	r3, .L262
 3105 0066 00F47040 		and	r0, r0, #61440
 3106 006a 1B68     		ldr	r3, [r3]
 377:src/xeq.c     **** 			--pc;
 3107              		.loc 1 377 25 discriminator 1 view .LVU847
 3108 006c B0F5704F 		cmp	r0, #61440
 378:src/xeq.c     **** 	}
 3109              		.loc 1 378 4 is_stmt 1 discriminator 1 view .LVU848
 3110              	.LVL235:
 378:src/xeq.c     **** 	}
 3111              		.loc 1 378 4 is_stmt 0 discriminator 1 view .LVU849
 3112 0070 08BF     		it	eq
 3113 0072 2C46     		moveq	r4, r5
 3114              	.LVL236:
 378:src/xeq.c     **** 	}
 3115              		.loc 1 378 4 discriminator 1 view .LVU850
 3116              	.LBE1524:
 380:src/xeq.c     **** }
 3117              		.loc 1 380 2 is_stmt 1 discriminator 1 view .LVU851
 3118              	.LBB1529:
 282:src/xeq.c     **** 	State.pc = pc;
 3119              		.loc 1 282 13 discriminator 1 view .LVU852
 3120              	.LBB1517:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3121              		.loc 1 283 2 discriminator 1 view .LVU853
 283:src/xeq.c     **** 	update_program_bounds(0);
 3122              		.loc 1 283 11 is_stmt 0 discriminator 1 view .LVU854
 3123 0074 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3124              		.loc 1 284 2 is_stmt 1 discriminator 1 view .LVU855
 3125 0078 0020     		movs	r0, #0
 3126              	.LBE1517:
 3127              	.LBE1529:
 381:src/xeq.c     **** 
 3128              		.loc 1 381 1 is_stmt 0 discriminator 1 view .LVU856
 3129 007a BDE83840 		pop	{r3, r4, r5, lr}
 3130              		.cfi_remember_state
 3131              		.cfi_restore 14
 3132              		.cfi_restore 5
 3133              		.cfi_restore 4
 3134              		.cfi_restore 3
ARM GAS  /tmp/cc7LeJ71.s 			page 159


 3135              		.cfi_def_cfa_offset 0
 3136              	.LVL237:
 3137              	.LBB1530:
 3138              	.LBB1518:
 284:src/xeq.c     **** }
 3139              		.loc 1 284 2 discriminator 1 view .LVU857
 3140 007e FFF7FEBF 		b	update_program_bounds
 3141              	.LVL238:
 3142              	.L260:
 3143              		.cfi_restore_state
 284:src/xeq.c     **** }
 3144              		.loc 1 284 2 discriminator 1 view .LVU858
 3145 0082 084B     		ldr	r3, .L262
 3146 0084 1B68     		ldr	r3, [r3]
 284:src/xeq.c     **** }
 3147              		.loc 1 284 2 discriminator 1 view .LVU859
 3148              	.LBE1518:
 3149              	.LBE1530:
 380:src/xeq.c     **** }
 3150              		.loc 1 380 2 is_stmt 1 view .LVU860
 3151              	.LVL239:
 3152              	.LBB1531:
 282:src/xeq.c     **** 	State.pc = pc;
 3153              		.loc 1 282 13 view .LVU861
 3154              	.LBB1519:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3155              		.loc 1 283 2 view .LVU862
 284:src/xeq.c     **** }
 3156              		.loc 1 284 2 is_stmt 0 view .LVU863
 3157 0086 0020     		movs	r0, #0
 283:src/xeq.c     **** 	update_program_bounds(0);
 3158              		.loc 1 283 11 view .LVU864
 3159 0088 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3160              		.loc 1 284 2 is_stmt 1 view .LVU865
 3161              	.LBE1519:
 3162              	.LBE1531:
 381:src/xeq.c     **** 
 3163              		.loc 1 381 1 is_stmt 0 view .LVU866
 3164 008c BDE83840 		pop	{r3, r4, r5, lr}
 3165              		.cfi_remember_state
 3166              		.cfi_restore 14
 3167              		.cfi_restore 5
 3168              		.cfi_restore 4
 3169              		.cfi_restore 3
 3170              		.cfi_def_cfa_offset 0
 3171              	.LVL240:
 3172              	.LBB1532:
 3173              	.LBB1520:
 284:src/xeq.c     **** }
 3174              		.loc 1 284 2 view .LVU867
 3175 0090 FFF7FEBF 		b	update_program_bounds
 3176              	.LVL241:
 3177              	.L261:
 3178              		.cfi_restore_state
 284:src/xeq.c     **** }
 3179              		.loc 1 284 2 view .LVU868
ARM GAS  /tmp/cc7LeJ71.s 			page 160


 3180              	.LBE1520:
 3181              	.LBE1532:
 372:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3182              		.loc 1 372 4 is_stmt 1 view .LVU869
 372:src/xeq.c     **** 	} else if (!isXROM(pc)) {
 3183              		.loc 1 372 6 is_stmt 0 view .LVU870
 3184 0094 013C     		subs	r4, r4, #1
 3185              	.LVL242:
 380:src/xeq.c     **** }
 3186              		.loc 1 380 2 is_stmt 1 view .LVU871
 3187              	.LBB1533:
 282:src/xeq.c     **** 	State.pc = pc;
 3188              		.loc 1 282 13 view .LVU872
 3189              	.LBB1521:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3190              		.loc 1 283 2 view .LVU873
 283:src/xeq.c     **** 	update_program_bounds(0);
 3191              		.loc 1 283 11 is_stmt 0 view .LVU874
 3192 0096 A3F8E047 		strh	r4, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3193              		.loc 1 284 2 is_stmt 1 view .LVU875
 3194 009a 0020     		movs	r0, #0
 3195              	.LBE1521:
 3196              	.LBE1533:
 381:src/xeq.c     **** 
 3197              		.loc 1 381 1 is_stmt 0 view .LVU876
 3198 009c BDE83840 		pop	{r3, r4, r5, lr}
 3199              		.cfi_restore 14
 3200              		.cfi_restore 5
 3201              		.cfi_restore 4
 3202              		.cfi_restore 3
 3203              		.cfi_def_cfa_offset 0
 3204              	.LVL243:
 3205              	.LBB1534:
 3206              	.LBB1522:
 284:src/xeq.c     **** }
 3207              		.loc 1 284 2 view .LVU877
 3208 00a0 FFF7FEBF 		b	update_program_bounds
 3209              	.LVL244:
 3210              	.L263:
 284:src/xeq.c     **** }
 3211              		.loc 1 284 2 view .LVU878
 3212              		.align	2
 3213              	.L262:
 3214 00a4 00000000 		.word	main_ram
 3215 00a8 00000000 		.word	.LANCHOR0
 3216 00ac 00C0FFFF 		.word	-16384
 3217              	.LBE1522:
 3218              	.LBE1534:
 3219              		.cfi_endproc
 3220              	.LFE18:
 3222              		.section	.text.incpc,"ax",%progbits
 3223              		.align	1
 3224              		.p2align 2,,3
 3225              		.global	incpc
 3226              		.syntax unified
 3227              		.thumb
ARM GAS  /tmp/cc7LeJ71.s 			page 161


 3228              		.thumb_func
 3229              		.fpu fpv4-sp-d16
 3231              	incpc:
 3232              	.LFB22:
 458:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3233              		.loc 1 458 17 is_stmt 1 view -0
 3234              		.cfi_startproc
 3235              		@ args = 0, pretend = 0, frame = 0
 3236              		@ frame_needed = 0, uses_anonymous_args = 0
 459:src/xeq.c     **** 	return PcWrapped;
 3237              		.loc 1 459 2 view .LVU880
 458:src/xeq.c     **** 	raw_set_pc(do_inc(state_pc(), 1));
 3238              		.loc 1 458 17 is_stmt 0 view .LVU881
 3239 0000 10B5     		push	{r4, lr}
 3240              		.cfi_def_cfa_offset 8
 3241              		.cfi_offset 4, -8
 3242              		.cfi_offset 14, -4
 459:src/xeq.c     **** 	return PcWrapped;
 3243              		.loc 1 459 20 view .LVU882
 3244 0002 084C     		ldr	r4, .L266
 3245 0004 2368     		ldr	r3, [r4]
 459:src/xeq.c     **** 	return PcWrapped;
 3246              		.loc 1 459 2 view .LVU883
 3247 0006 0121     		movs	r1, #1
 3248 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3249 000c FFF7FEFF 		bl	do_inc
 3250              	.LVL245:
 3251              	.LBB1535:
 3252              	.LBB1536:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3253              		.loc 1 283 11 view .LVU884
 3254 0010 2368     		ldr	r3, [r4]
 3255              	.LBE1536:
 3256              	.LBE1535:
 459:src/xeq.c     **** 	return PcWrapped;
 3257              		.loc 1 459 2 view .LVU885
 3258 0012 0246     		mov	r2, r0
 3259              	.LVL246:
 3260              	.LBB1538:
 3261              	.LBI1535:
 282:src/xeq.c     **** 	State.pc = pc;
 3262              		.loc 1 282 13 is_stmt 1 view .LVU886
 3263              	.LBB1537:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3264              		.loc 1 283 2 view .LVU887
 283:src/xeq.c     **** 	update_program_bounds(0);
 3265              		.loc 1 283 11 is_stmt 0 view .LVU888
 3266 0014 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3267              		.loc 1 284 2 is_stmt 1 view .LVU889
 3268 0018 0020     		movs	r0, #0
 3269              	.LVL247:
 284:src/xeq.c     **** }
 3270              		.loc 1 284 2 is_stmt 0 view .LVU890
 3271 001a FFF7FEFF 		bl	update_program_bounds
 3272              	.LVL248:
 284:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 162


 3273              		.loc 1 284 2 view .LVU891
 3274              	.LBE1537:
 3275              	.LBE1538:
 460:src/xeq.c     **** }
 3276              		.loc 1 460 2 is_stmt 1 view .LVU892
 460:src/xeq.c     **** }
 3277              		.loc 1 460 9 is_stmt 0 view .LVU893
 3278 001e 024B     		ldr	r3, .L266+4
 461:src/xeq.c     **** 
 3279              		.loc 1 461 1 view .LVU894
 3280 0020 1868     		ldr	r0, [r3]
 3281 0022 10BD     		pop	{r4, pc}
 3282              	.L267:
 3283              		.align	2
 3284              	.L266:
 3285 0024 00000000 		.word	main_ram
 3286 0028 00000000 		.word	PcWrapped
 3287              		.cfi_endproc
 3288              	.LFE22:
 3290              		.section	.text.decpc,"ax",%progbits
 3291              		.align	1
 3292              		.p2align 2,,3
 3293              		.global	decpc
 3294              		.syntax unified
 3295              		.thumb
 3296              		.thumb_func
 3297              		.fpu fpv4-sp-d16
 3299              	decpc:
 3300              	.LFB23:
 463:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3301              		.loc 1 463 18 is_stmt 1 view -0
 3302              		.cfi_startproc
 3303              		@ args = 0, pretend = 0, frame = 0
 3304              		@ frame_needed = 0, uses_anonymous_args = 0
 464:src/xeq.c     **** }
 3305              		.loc 1 464 2 view .LVU896
 463:src/xeq.c     **** 	raw_set_pc(do_dec(state_pc(), 1));
 3306              		.loc 1 463 18 is_stmt 0 view .LVU897
 3307 0000 10B5     		push	{r4, lr}
 3308              		.cfi_def_cfa_offset 8
 3309              		.cfi_offset 4, -8
 3310              		.cfi_offset 14, -4
 464:src/xeq.c     **** }
 3311              		.loc 1 464 20 view .LVU898
 3312 0002 084C     		ldr	r4, .L270
 3313 0004 2368     		ldr	r3, [r4]
 464:src/xeq.c     **** }
 3314              		.loc 1 464 2 view .LVU899
 3315 0006 0121     		movs	r1, #1
 3316 0008 B3F8E007 		ldrh	r0, [r3, #2016]
 3317 000c FFF7FEFF 		bl	do_dec
 3318              	.LVL249:
 3319              	.LBB1539:
 3320              	.LBB1540:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3321              		.loc 1 283 11 view .LVU900
 3322 0010 2368     		ldr	r3, [r4]
ARM GAS  /tmp/cc7LeJ71.s 			page 163


 3323              	.LBE1540:
 3324              	.LBE1539:
 464:src/xeq.c     **** }
 3325              		.loc 1 464 2 view .LVU901
 3326 0012 0246     		mov	r2, r0
 3327              	.LVL250:
 3328              	.LBB1543:
 3329              	.LBI1539:
 282:src/xeq.c     **** 	State.pc = pc;
 3330              		.loc 1 282 13 is_stmt 1 view .LVU902
 3331              	.LBB1541:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3332              		.loc 1 283 2 view .LVU903
 3333              	.LBE1541:
 3334              	.LBE1543:
 465:src/xeq.c     **** 
 3335              		.loc 1 465 1 is_stmt 0 view .LVU904
 3336 0014 BDE81040 		pop	{r4, lr}
 3337              		.cfi_restore 14
 3338              		.cfi_restore 4
 3339              		.cfi_def_cfa_offset 0
 3340              	.LBB1544:
 3341              	.LBB1542:
 284:src/xeq.c     **** }
 3342              		.loc 1 284 2 view .LVU905
 3343 0018 0020     		movs	r0, #0
 3344              	.LVL251:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3345              		.loc 1 283 11 view .LVU906
 3346 001a A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 3347              		.loc 1 284 2 is_stmt 1 view .LVU907
 3348 001e FFF7FEBF 		b	update_program_bounds
 3349              	.LVL252:
 3350              	.L271:
 284:src/xeq.c     **** }
 3351              		.loc 1 284 2 is_stmt 0 view .LVU908
 3352 0022 00BF     		.align	2
 3353              	.L270:
 3354 0024 00000000 		.word	main_ram
 3355              	.LBE1542:
 3356              	.LBE1544:
 3357              		.cfi_endproc
 3358              	.LFE23:
 3360              		.section	.text.do_rtn,"ax",%progbits
 3361              		.align	1
 3362              		.p2align 2,,3
 3363              		.syntax unified
 3364              		.thumb
 3365              		.thumb_func
 3366              		.fpu fpv4-sp-d16
 3368              	do_rtn:
 3369              	.LVL253:
 3370              	.LFB154:
2247:src/xeq.c     **** 	unsigned short pc;
 3371              		.loc 1 2247 31 is_stmt 1 view -0
 3372              		.cfi_startproc
ARM GAS  /tmp/cc7LeJ71.s 			page 164


 3373              		@ args = 0, pretend = 0, frame = 0
 3374              		@ frame_needed = 0, uses_anonymous_args = 0
2248:src/xeq.c     **** 
 3375              		.loc 1 2248 2 view .LVU910
2250:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3376              		.loc 1 2250 2 view .LVU911
2247:src/xeq.c     **** 	unsigned short pc;
 3377              		.loc 1 2247 31 is_stmt 0 view .LVU912
 3378 0000 70B5     		push	{r4, r5, r6, lr}
 3379              		.cfi_def_cfa_offset 16
 3380              		.cfi_offset 4, -16
 3381              		.cfi_offset 5, -12
 3382              		.cfi_offset 6, -8
 3383              		.cfi_offset 14, -4
2250:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3384              		.loc 1 2250 6 view .LVU913
 3385 0002 244C     		ldr	r4, .L286
 3386 0004 2368     		ldr	r3, [r4]
2250:src/xeq.c     **** 		// stray RTN: Go to ProgBegin
 3387              		.loc 1 2250 5 view .LVU914
 3388 0006 B3F9E227 		ldrsh	r2, [r3, #2018]
 3389 000a 002A     		cmp	r2, #0
 3390 000c 13DB     		blt	.L273
2252:src/xeq.c     **** 		raw_set_pc(ProgBegin);
 3391              		.loc 1 2252 3 is_stmt 1 view .LVU915
 3392              	.LBB1545:
 3393              	.LBI1545:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 3394              		.loc 1 1606 6 view .LVU916
 3395              	.LBB1546:
1607:src/xeq.c     **** }
 3396              		.loc 1 1607 2 view .LVU917
1607:src/xeq.c     **** }
 3397              		.loc 1 1607 24 is_stmt 0 view .LVU918
 3398 000e B3F8DE27 		ldrh	r2, [r3, #2014]
 3399              	.LBE1546:
 3400              	.LBE1545:
 3401              	.LBB1548:
 3402              	.LBB1549:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3403              		.loc 1 283 11 view .LVU919
 3404 0012 B3F8EC17 		ldrh	r1, [r3, #2028]
 3405 0016 A3F8E017 		strh	r1, [r3, #2016]	@ movhi
 3406              	.LBE1549:
 3407              	.LBE1548:
 3408              	.LBB1551:
 3409              	.LBB1547:
1607:src/xeq.c     **** }
 3410              		.loc 1 1607 24 view .LVU920
 3411 001a 6FF34F12 		bfc	r2, #5, #11
1607:src/xeq.c     **** }
 3412              		.loc 1 1607 12 view .LVU921
 3413 001e 0020     		movs	r0, #0
 3414              	.LVL254:
1607:src/xeq.c     **** }
 3415              		.loc 1 1607 24 view .LVU922
 3416 0020 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
ARM GAS  /tmp/cc7LeJ71.s 			page 165


1607:src/xeq.c     **** }
 3417              		.loc 1 1607 12 view .LVU923
 3418 0024 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 3419              	.LBE1547:
 3420              	.LBE1551:
2253:src/xeq.c     **** 	}
 3421              		.loc 1 2253 3 is_stmt 1 view .LVU924
 3422              	.LVL255:
 3423              	.LBB1552:
 3424              	.LBI1548:
 282:src/xeq.c     **** 	State.pc = pc;
 3425              		.loc 1 282 13 view .LVU925
 3426              	.LBB1550:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3427              		.loc 1 283 2 view .LVU926
 284:src/xeq.c     **** }
 3428              		.loc 1 284 2 view .LVU927
 3429 0028 FFF7FEFF 		bl	update_program_bounds
 3430              	.LVL256:
 3431              	.L274:
 284:src/xeq.c     **** }
 3432              		.loc 1 284 2 is_stmt 0 view .LVU928
 3433              	.LBE1550:
 3434              	.LBE1552:
2266:src/xeq.c     **** 		// RTN with empty stack stops
 3435              		.loc 1 2266 2 is_stmt 1 view .LVU929
2266:src/xeq.c     **** 		// RTN with empty stack stops
 3436              		.loc 1 2266 6 is_stmt 0 view .LVU930
 3437 002c 2368     		ldr	r3, [r4]
2266:src/xeq.c     **** 		// RTN with empty stack stops
 3438              		.loc 1 2266 5 view .LVU931
 3439 002e B3F9E217 		ldrsh	r1, [r3, #2018]
 3440 0032 09B3     		cbz	r1, .L285
2270:src/xeq.c     **** 
 3441              		.loc 1 2270 1 view .LVU932
 3442 0034 70BD     		pop	{r4, r5, r6, pc}
 3443              	.LVL257:
 3444              	.L273:
2258:src/xeq.c     **** 		pc = RetStk[RetStkPtr - 1];
 3445              		.loc 1 2258 3 is_stmt 1 view .LVU933
 3446 0036 0546     		mov	r5, r0
 3447 0038 FFF7FEFF 		bl	retstk_up
 3448              	.LVL258:
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3449              		.loc 1 2259 3 view .LVU934
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3450              		.loc 1 2259 15 is_stmt 0 view .LVU935
 3451 003c 2268     		ldr	r2, [r4]
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3452              		.loc 1 2259 6 view .LVU936
 3453 003e 1649     		ldr	r1, .L286+4
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3454              		.loc 1 2259 14 view .LVU937
 3455 0040 B2F9E237 		ldrsh	r3, [r2, #2018]
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3456              		.loc 1 2259 6 view .LVU938
 3457 0044 0968     		ldr	r1, [r1]
ARM GAS  /tmp/cc7LeJ71.s 			page 166


2259:src/xeq.c     **** 		raw_set_pc(pc);
 3458              		.loc 1 2259 14 view .LVU939
 3459 0046 03F10043 		add	r3, r3, #-2147483648
 3460 004a 013B     		subs	r3, r3, #1
 3461              	.LBB1553:
 3462              	.LBB1554:
 284:src/xeq.c     **** }
 3463              		.loc 1 284 2 view .LVU940
 3464 004c 0020     		movs	r0, #0
 3465              	.LBE1554:
 3466              	.LBE1553:
2259:src/xeq.c     **** 		raw_set_pc(pc);
 3467              		.loc 1 2259 6 view .LVU941
 3468 004e 31F81360 		ldrh	r6, [r1, r3, lsl #1]
 3469              	.LVL259:
2260:src/xeq.c     **** 		// If RTN+1 inc PC unless a POPUSR command or the program end would be skipped
 3470              		.loc 1 2260 3 is_stmt 1 view .LVU942
 3471              	.LBB1556:
 3472              	.LBI1553:
 282:src/xeq.c     **** 	State.pc = pc;
 3473              		.loc 1 282 13 view .LVU943
 3474              	.LBB1555:
 283:src/xeq.c     **** 	update_program_bounds(0);
 3475              		.loc 1 283 2 view .LVU944
 283:src/xeq.c     **** 	update_program_bounds(0);
 3476              		.loc 1 283 11 is_stmt 0 view .LVU945
 3477 0052 A2F8E067 		strh	r6, [r2, #2016]	@ movhi
 284:src/xeq.c     **** }
 3478              		.loc 1 284 2 is_stmt 1 view .LVU946
 3479 0056 FFF7FEFF 		bl	update_program_bounds
 3480              	.LVL260:
 284:src/xeq.c     **** }
 3481              		.loc 1 284 2 is_stmt 0 view .LVU947
 3482              	.LBE1555:
 3483              	.LBE1556:
2262:src/xeq.c     **** 			if (incpc())
 3484              		.loc 1 2262 3 is_stmt 1 view .LVU948
2262:src/xeq.c     **** 			if (incpc())
 3485              		.loc 1 2262 6 is_stmt 0 view .LVU949
 3486 005a 002D     		cmp	r5, #0
 3487 005c E6D0     		beq	.L274
2262:src/xeq.c     **** 			if (incpc())
 3488              		.loc 1 2262 16 discriminator 1 view .LVU950
 3489 005e 3046     		mov	r0, r6
 3490 0060 FFF7FEFF 		bl	getprog
 3491              	.LVL261:
2262:src/xeq.c     **** 			if (incpc())
 3492              		.loc 1 2262 13 discriminator 1 view .LVU951
 3493 0064 B0F5C17F 		cmp	r0, #386
 3494 0068 E0D0     		beq	.L274
2263:src/xeq.c     **** 				decpc();
 3495              		.loc 1 2263 4 is_stmt 1 view .LVU952
2263:src/xeq.c     **** 				decpc();
 3496              		.loc 1 2263 8 is_stmt 0 view .LVU953
 3497 006a FFF7FEFF 		bl	incpc
 3498              	.LVL262:
2263:src/xeq.c     **** 				decpc();
ARM GAS  /tmp/cc7LeJ71.s 			page 167


 3499              		.loc 1 2263 7 view .LVU954
 3500 006e 0028     		cmp	r0, #0
 3501 0070 DCD0     		beq	.L274
2264:src/xeq.c     **** 	}
 3502              		.loc 1 2264 5 is_stmt 1 view .LVU955
 3503 0072 FFF7FEFF 		bl	decpc
 3504              	.LVL263:
 3505 0076 D9E7     		b	.L274
 3506              	.LVL264:
 3507              	.L285:
2268:src/xeq.c     **** 	}
 3508              		.loc 1 2268 3 view .LVU956
 3509              	.LBB1557:
 3510              	.LBI1557:
5185:src/xeq.c     **** 
5186:src/xeq.c     **** 
5187:src/xeq.c     **** /* Handle a command that takes an argument.  The argument is encoded
5188:src/xeq.c     ****  * in the low order bits of the opcode.  We also have to take
5189:src/xeq.c     ****  * account of the indirection flag and various limits.
5190:src/xeq.c     ****  */
5191:src/xeq.c     **** static void rargs(const opcode op) {
5192:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
5193:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
5194:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
5195:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
5196:src/xeq.c     **** 
5197:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5198:src/xeq.c     **** 
5199:src/xeq.c     **** 	process_cmdline();
5200:src/xeq.c     **** 
5201:src/xeq.c     **** 	if (cmd >= NUM_RARG) {
5202:src/xeq.c     **** 		illegal(op);
5203:src/xeq.c     **** 		return;
5204:src/xeq.c     **** 	}
5205:src/xeq.c     **** 	if (isNULL(argcmds[cmd].f)) {
5206:src/xeq.c     **** 		set_lift();
5207:src/xeq.c     **** 		return;
5208:src/xeq.c     **** 	}
5209:src/xeq.c     **** 
5210:src/xeq.c     **** 	if (ind) {
5211:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
5212:src/xeq.c     **** 			// Get the argument by reading a register
5213:src/xeq.c     **** 			int sgn;
5214:src/xeq.c     **** 			unsigned long long int regval;
5215:src/xeq.c     **** 
5216:src/xeq.c     **** 			if (arg > get_reg_limit(RARG_RCL, arg)) {
5217:src/xeq.c     **** 				// Invalid register specified for indirect access
5218:src/xeq.c     **** 				report_err(ERR_RANGE);
5219:src/xeq.c     **** 				return;
5220:src/xeq.c     **** 			}
5221:src/xeq.c     **** 			regval = get_reg_n_int_sgn(arg, &sgn);
5222:src/xeq.c     **** 			if ((regval >> 32) != 0)
5223:src/xeq.c     **** 				goto range;
5224:src/xeq.c     **** 			arg = (unsigned int) regval;
5225:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
5226:src/xeq.c     **** 				// negative arguments address local registers or flags
5227:src/xeq.c     **** 				arg = LOCAL_REG_BASE + arg;
ARM GAS  /tmp/cc7LeJ71.s 			page 168


5228:src/xeq.c     **** 			}
5229:src/xeq.c     **** 		} 
5230:src/xeq.c     **** 		else {
5231:src/xeq.c     **** 			// put the top bit back in
5232:src/xeq.c     **** 			arg |= RARG_IND;
5233:src/xeq.c     **** 		}
5234:src/xeq.c     **** 	}
5235:src/xeq.c     **** 	if (argcmds[cmd].reg) {
5236:src/xeq.c     **** 		// Range checking for registers against variable boundary
5237:src/xeq.c     **** 		lim = get_reg_limit(cmd, arg);
5238:src/xeq.c     **** 	}
5239:src/xeq.c     **** 	else if (argcmds[cmd].flag) {
5240:src/xeq.c     **** 		if (LocalRegs == 0)
5241:src/xeq.c     **** 			lim = NUMFLG - 1;
5242:src/xeq.c     **** 		else 
5243:src/xeq.c     **** 			lim = LOCAL_FLAG_BASE + MAX_LOCAL_DIRECT - 1;
5244:src/xeq.c     **** 	}
5245:src/xeq.c     **** 	if (arg > lim) {
5246:src/xeq.c     **** 		// Argument is too large
5247:src/xeq.c     **** range:		report_err(ERR_RANGE);
5248:src/xeq.c     **** 	}
5249:src/xeq.c     **** 	else if (argcmds[cmd].cmplx && arg >= TOPREALREG-1 && arg < NUMREG && (arg & 1)) {
5250:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
5251:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5252:src/xeq.c     **** 	}
5253:src/xeq.c     **** 	else {
5254:src/xeq.c     **** 		// Dispatch the command
5255:src/xeq.c     **** 		FP_RARG fp = (FP_RARG) EXPAND_ADDRESS(argcmds[cmd].f);
5256:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5257:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
5258:src/xeq.c     **** 			if (argcmds[cmd].label) {
5259:src/xeq.c     **** 				XromUserPc = find_label_from(state_pc(), arg, 0);
5260:src/xeq.c     **** 				if (XromUserPc == 0)
5261:src/xeq.c     **** 					return;
5262:src/xeq.c     **** 				if (! Running)
5263:src/xeq.c     **** 					clrretstk();
5264:src/xeq.c     **** 			}
5265:src/xeq.c     **** 			else
5266:src/xeq.c     **** 				XromArg = (unsigned char) arg;
5267:src/xeq.c     **** #else
5268:src/xeq.c     **** 			XromUserPc = find_label_from(state_pc(), arg, FIND_OP_ERROR | FIND_OP_ENDS);
5269:src/xeq.c     **** 			if (XromUserPc == 0)
5270:src/xeq.c     **** 				return;
5271:src/xeq.c     **** 			if (! Running)
5272:src/xeq.c     **** 				clrretstk();
5273:src/xeq.c     **** #endif
5274:src/xeq.c     **** 			dispatch_xrom(fp);
5275:src/xeq.c     **** 			return;
5276:src/xeq.c     **** 		}
5277:src/xeq.c     **** 		else {
5278:src/xeq.c     **** 			fp(arg, (enum rarg)cmd);
5279:src/xeq.c     **** 		}
5280:src/xeq.c     **** 		if (cmd != RARG_XROM_OUT) {
5281:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
5282:src/xeq.c     **** 			set_lift();
5283:src/xeq.c     **** 		}
5284:src/xeq.c     **** 	}
ARM GAS  /tmp/cc7LeJ71.s 			page 169


5285:src/xeq.c     **** }
5286:src/xeq.c     **** 
5287:src/xeq.c     **** static void multi(const opcode op) {
5288:src/xeq.c     **** 	const int cmd = opDBL(op);
5289:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
5290:src/xeq.c     **** 
5291:src/xeq.c     **** 	process_cmdline_set_lift();
5292:src/xeq.c     **** 
5293:src/xeq.c     **** 	if (cmd >= NUM_MULTI) {
5294:src/xeq.c     **** 		illegal(op);
5295:src/xeq.c     **** 		return;
5296:src/xeq.c     **** 	}
5297:src/xeq.c     **** 	if (isNULL(multicmds[cmd].f))	// LBL does nothing
5298:src/xeq.c     **** 		return;
5299:src/xeq.c     **** 	else {
5300:src/xeq.c     **** 		FP_MULTI fp = (FP_MULTI) EXPAND_ADDRESS(multicmds[cmd].f);
5301:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
5302:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
5303:src/xeq.c     **** 			if (XromUserPc != 0) {
5304:src/xeq.c     **** 				if (! Running)
5305:src/xeq.c     **** 					clrretstk();
5306:src/xeq.c     **** 				dispatch_xrom(fp);
5307:src/xeq.c     **** 			}
5308:src/xeq.c     **** 			return;
5309:src/xeq.c     **** 		}
5310:src/xeq.c     **** 		else {
5311:src/xeq.c     **** 			fp(op, (enum multiops)cmd);
5312:src/xeq.c     **** 			set_lift();
5313:src/xeq.c     **** 		}
5314:src/xeq.c     **** 	}
5315:src/xeq.c     **** }
5316:src/xeq.c     **** 
5317:src/xeq.c     **** 
5318:src/xeq.c     **** 
5319:src/xeq.c     **** /* Main dispatch routine that decodes the top level of the opcode and
5320:src/xeq.c     ****  * goes to the appropriate lower level dispatch routine.
5321:src/xeq.c     ****  */
5322:src/xeq.c     **** void xeq(opcode op) 
5323:src/xeq.c     **** {
5324:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
5325:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
5326:src/xeq.c     **** 	const struct _ustate old = UState;
5327:src/xeq.c     **** 	const unsigned char lift = get_lift();
5328:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
5329:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
5330:src/xeq.c     **** #ifdef INFRARED
5331:src/xeq.c     **** 	int tracing;
5332:src/xeq.c     **** #endif
5333:src/xeq.c     **** 
5334:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
5335:src/xeq.c     **** 	if (op == (OP_NIL | OP_rCLX) || op == (OP_NIL | OP_CLSTK)) {
5336:src/xeq.c     **** 		// Make sure that if the command line isn't empty, it contains
5337:src/xeq.c     **** 		// valid input so no error message will be generated.
5338:src/xeq.c     **** 		CmdLineDot = 0;
5339:src/xeq.c     **** 		Cmdline[0] = '0';
5340:src/xeq.c     **** 		Cmdline[1] = '\0';
5341:src/xeq.c     **** 	}
ARM GAS  /tmp/cc7LeJ71.s 			page 170


5342:src/xeq.c     **** #endif
5343:src/xeq.c     **** 
5344:src/xeq.c     **** 	xcopy(save, StackBase, sizeof(save));
5345:src/xeq.c     **** #if defined(CONSOLE)
5346:src/xeq.c     **** 	instruction_count++;
5347:src/xeq.c     **** #endif
5348:src/xeq.c     **** #ifndef REALBUILD
5349:src/xeq.c     **** 	if (State2.trace && ! State2.sst) {
5350:src/xeq.c     **** 		char buf[16];
5351:src/xeq.c     **** 		if (Running)
5352:src/xeq.c     **** 			print_step(op);
5353:src/xeq.c     **** 		else
5354:src/xeq.c     **** 			sprintf(TraceBuffer, "%04X:%s", op, prt(op, buf));
5355:src/xeq.c     **** 		DispMsg = TraceBuffer;
5356:src/xeq.c     **** 	}
5357:src/xeq.c     **** #endif
5358:src/xeq.c     **** #ifdef INFRARED
5359:src/xeq.c     **** #ifdef REALBUILD
5360:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && ! is_xrom() && State2.runmode;
5361:src/xeq.c     **** #else
5362:src/xeq.c     **** 	tracing = get_user_flag(T_FLAG) && (! is_xrom() || State2.trace) && State2.runmode;
5363:src/xeq.c     **** #endif
5364:src/xeq.c     **** 	Tracing = tracing;
5365:src/xeq.c     **** 	print_trace( op, 0 );
5366:src/xeq.c     **** #endif
5367:src/xeq.c     **** 	Busy = 0;
5368:src/xeq.c     **** 	State2.wascomplex = 0;
5369:src/xeq.c     **** 	if (isDBL(op))
5370:src/xeq.c     **** 		multi(op);
5371:src/xeq.c     **** 	else if (isRARG(op))
5372:src/xeq.c     **** 		rargs(op);
5373:src/xeq.c     **** 	else {
5374:src/xeq.c     **** 		XeqOpCode = (s_opcode) op;
5375:src/xeq.c     **** 		switch (opKIND(op)) {
5376:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
5377:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
5378:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
5379:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
5380:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
5381:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
5382:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
5383:src/xeq.c     **** 		default:	illegal(op);
5384:src/xeq.c     **** 		}
5385:src/xeq.c     **** 	}
5386:src/xeq.c     **** #if INTERRUPT_XROM_TICKS > 0
5387:src/xeq.c     **** 	if (OnKeyTicks >= INTERRUPT_XROM_TICKS) {
5388:src/xeq.c     **** 		report_err(ERR_INTERRUPTED);
5389:src/xeq.c     **** 		while (get_key() >= 0) { } // Empty keyboard buffer
5390:src/xeq.c     **** 	}
5391:src/xeq.c     **** #endif
5392:src/xeq.c     **** 
5393:src/xeq.c     **** 	if (Error != ERR_NONE) {
5394:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
5395:src/xeq.c     **** 		error_message( Error );
5396:src/xeq.c     **** 		// Repair stack and state
5397:src/xeq.c     **** 		// Clear return stack
5398:src/xeq.c     **** 		xcopy(StackBase, save, sizeof(save));
ARM GAS  /tmp/cc7LeJ71.s 			page 171


5399:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
5400:src/xeq.c     **** 		UState = old;
5401:src/xeq.c     **** 		State2.state_lift = lift;
5402:src/xeq.c     **** 		raw_set_pc(old_pc);
5403:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
5404:src/xeq.c     **** 		process_cmdline_set_lift();
5405:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
5406:src/xeq.c     **** 		// wrong with the command line, e.g. it had a partially entered fraction
5407:src/xeq.c     **** 		Error = ERR_NONE;
5408:src/xeq.c     **** 		if (Running || XromRunning) {
5409:src/xeq.c     **** #ifndef REALBUILD
5410:src/xeq.c     **** 			if (State2.trace ) {
5411:src/xeq.c     **** 				// Special handling for debug environment
5412:src/xeq.c     **** 				if (XromFlags.xIN) {
5413:src/xeq.c     **** 					// Restore the global return stack
5414:src/xeq.c     **** 					RetStk = XromUserRetStk;
5415:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5416:src/xeq.c     **** 					// Restore private stack to normal stack
5417:src/xeq.c     **** 					if (! XromFlags.mode_double && NumRegs < STACK_SIZE + EXTRA_REG) {
5418:src/xeq.c     **** 						// Need space for double precision stack
5419:src/xeq.c     **** 						cmdregs(STACK_SIZE + EXTRA_REG, RARG_REGS);
5420:src/xeq.c     **** 					}
5421:src/xeq.c     **** 					XromFlags.xIN = 0;		// Clear flag before get_reg_n!
5422:src/xeq.c     **** 					if (Error == ERR_NONE) {
5423:src/xeq.c     **** 						UState.mode_double = 1;
5424:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
5425:src/xeq.c     **** 					}
5426:src/xeq.c     **** 					else
5427:src/xeq.c     **** 						Error = ERR_NONE;	// Not enough RAM, can't restore
5428:src/xeq.c     **** 				}
5429:src/xeq.c     **** 			}
5430:src/xeq.c     **** 			else {
5431:src/xeq.c     **** #endif
5432:src/xeq.c     **** 				unsigned short int pc = state_pc();
5433:src/xeq.c     **** 				if (XromFlags.xIN) {
5434:src/xeq.c     **** 					// Restore state to before xIN
5435:src/xeq.c     **** 					XromFlags.xIN = 0;
5436:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
5437:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
5438:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
5439:src/xeq.c     **** 					// Restore the global return stack
5440:src/xeq.c     **** 					RetStk = XromUserRetStk;
5441:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
5442:src/xeq.c     **** 				}
5443:src/xeq.c     **** 				while (isXROM(pc)) {
5444:src/xeq.c     **** 					// Leave XROM
5445:src/xeq.c     **** 					if (RetStkPtr != 0) {
5446:src/xeq.c     **** 						retstk_up();
5447:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
5448:src/xeq.c     **** 					}
5449:src/xeq.c     **** 					if (RetStkPtr == 0)
5450:src/xeq.c     **** 						++pc; // compensate for decpc below
5451:src/xeq.c     **** 				}
5452:src/xeq.c     **** 				raw_set_pc(pc);
5453:src/xeq.c     **** #ifndef REALBUILD
5454:src/xeq.c     **** 			}
5455:src/xeq.c     **** #endif
ARM GAS  /tmp/cc7LeJ71.s 			page 172


5456:src/xeq.c     **** 			decpc();		// Back to error instruction
5457:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
5458:src/xeq.c     **** 
5459:src/xeq.c     **** 			set_running_off();
5460:src/xeq.c     **** 		}
5461:src/xeq.c     **** 	} 
5462:src/xeq.c     **** 	reset_volatile_state();
5463:src/xeq.c     **** #ifdef INFRARED
5464:src/xeq.c     **** 	Tracing = tracing;
5465:src/xeq.c     **** 	print_trace( op, 1 );
5466:src/xeq.c     **** #endif
5467:src/xeq.c     **** }
5468:src/xeq.c     **** 
5469:src/xeq.c     **** /* Execute a single step and return.
5470:src/xeq.c     ****  */
5471:src/xeq.c     **** static void xeq_single(void) {
5472:src/xeq.c     **** 	const opcode op = getprog(state_pc());
5473:src/xeq.c     **** 
5474:src/xeq.c     **** 	incpc();
5475:src/xeq.c     **** 	xeq(op);
5476:src/xeq.c     **** }
5477:src/xeq.c     **** 
5478:src/xeq.c     **** /* Continue execution trough xrom code
5479:src/xeq.c     ****  */
5480:src/xeq.c     **** #ifdef REALBUILD
5481:src/xeq.c     **** void xeq_xrom(void) {
5482:src/xeq.c     **** #else
5483:src/xeq.c     **** static void xeq_xrom2(void) {
5484:src/xeq.c     **** #endif
5485:src/xeq.c     **** 	int count = 0;
5486:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
5487:src/xeq.c     **** 	 * we break free.
5488:src/xeq.c     **** 	 */
5489:src/xeq.c     **** 	  while (!Pause && is_xrom() && RetStkPtr != 0) {
5490:src/xeq.c     **** 		XromRunning = 1;
5491:src/xeq.c     **** 		xeq_single();
5492:src/xeq.c     **** 		XromRunning = 0;
5493:src/xeq.c     **** 		if ((++count & 31) == 0)
5494:src/xeq.c     **** 			busy();
5495:src/xeq.c     **** 		  if (Pause)
5496:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
5497:src/xeq.c     **** 			// Switch to Running mode to force continued execution.
5498:src/xeq.c     **** 			Running = 1;
5499:src/xeq.c     **** 		
5500:src/xeq.c     **** 	}
5501:src/xeq.c     **** }
5502:src/xeq.c     **** 
5503:src/xeq.c     **** #ifndef REALBUILD
5504:src/xeq.c     **** void xeq_xrom(void) {
5505:src/xeq.c     **** 	// We split the routine in two parts for debugging only
5506:src/xeq.c     **** 	if (! State2.trace)
5507:src/xeq.c     **** 		xeq_xrom2();
5508:src/xeq.c     **** }
5509:src/xeq.c     **** #endif
5510:src/xeq.c     **** 
5511:src/xeq.c     **** /* Check to see if we're running a program and if so execute it
5512:src/xeq.c     ****  * for a while.
ARM GAS  /tmp/cc7LeJ71.s 			page 173


5513:src/xeq.c     ****  *
5514:src/xeq.c     ****  */
5515:src/xeq.c     **** 
5516:src/xeq.c     **** /*
5517:src/xeq.c     **** 'Pause' is true if Pause is non-zero, i.e., if the pause is still running.
5518:src/xeq.c     **** */
5519:src/xeq.c     ****  void xeqprog(void) 
5520:src/xeq.c     ****  {
5521:src/xeq.c     ****    int state = 0;
5522:src/xeq.c     ****    if (Running || Pause) {
5523:src/xeq.c     **** 
5524:src/xeq.c     **** #if !(defined(CONSOLE)) && !(defined(DM42))
5525:src/xeq.c     ****      long long last_ticker = Ticker;
5526:src/xeq.c     ****      state = ((int) last_ticker % (2*TICKS_PER_FLASH) < TICKS_PER_FLASH);
5527:src/xeq.c     **** #else
5528:src/xeq.c     ****      state = 1;
5529:src/xeq.c     **** #endif
5530:src/xeq.c     ****      
5531:src/xeq.c     ****      //     print_debug(100,state);
5532:src/xeq.c     ****      dot(RCL_annun, state);
5533:src/xeq.c     ****      finish_RPN(); // RPN
5534:src/xeq.c     **** 
5535:src/xeq.c     ****      while (! Pause && Running) {
5536:src/xeq.c     ****        xeq_single();
5537:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
5538:src/xeq.c     ****        if (is_key_pressed())
5539:src/xeq.c     **** 	 {
5540:src/xeq.c     **** 	 // Key press or heart beat
5541:src/xeq.c     **** 	 // Note: DM42 doesn't have real heart beat so no flash
5542:src/xeq.c     **** 	 // xeq_xrom(); // Already done by dispatch_xrom()
5543:src/xeq.c     **** 	 break;
5544:src/xeq.c     ****        }
5545:src/xeq.c     ****      }
5546:src/xeq.c     ****    }
5547:src/xeq.c     ****    if (! Running && ! Pause) {	  
5548:src/xeq.c     ****      // Program has terminated
5549:src/xeq.c     ****      clr_dot(RCL_annun);
5550:src/xeq.c     ****      ShowRPN = 1; // display() may turn it off again
5551:src/xeq.c     ****      finish_RPN(); // put here to turn off the RCL annunciator
5552:src/xeq.c     ****      //     print_debug(100, State2.disp_freeze);
5553:src/xeq.c     ****      display(); // turns off RPN if it was freeeeze and returns doing little
5554:src/xeq.c     ****      //     print_debug(101, ShowRPN*100+State2.disp_freeze);
5555:src/xeq.c     ****      if (ShowRPN) {
5556:src/xeq.c     ****        set_dot(RPN);
5557:src/xeq.c     ****        finish_RPN(); // RPN
5558:src/xeq.c     ****      }
5559:src/xeq.c     **** #ifndef CONSOLE
5560:src/xeq.c     ****      // Avoid accidental restart with R/S or APD after program ends
5561:src/xeq.c     ****      JustStopped = 1;
5562:src/xeq.c     **** #endif
5563:src/xeq.c     ****    }
5564:src/xeq.c     ****  }
5565:src/xeq.c     **** 
5566:src/xeq.c     **** /* Single step and back step routine
5567:src/xeq.c     ****  */
5568:src/xeq.c     **** void xeq_sst_bst(int kind) 
5569:src/xeq.c     **** {
ARM GAS  /tmp/cc7LeJ71.s 			page 174


5570:src/xeq.c     **** 	opcode op;
5571:src/xeq.c     **** 
5572:src/xeq.c     **** 	reset_volatile_state();
5573:src/xeq.c     **** 	if (kind == -1)
5574:src/xeq.c     **** 		decpc();
5575:src/xeq.c     **** 
5576:src/xeq.c     **** 	if (State2.runmode) {
5577:src/xeq.c     **** 		// Display the step
5578:src/xeq.c     **** 		op = getprog(state_pc());
5579:src/xeq.c     **** 		print_step(op);
5580:src/xeq.c     **** 		if (kind == 1) {
5581:src/xeq.c     **** 			// Execute the step on key up
5582:src/xeq.c     **** #ifndef REALBUILD
5583:src/xeq.c     **** 			State2.sst = 1;
5584:src/xeq.c     **** #endif
5585:src/xeq.c     **** 			set_running_on_sst();
5586:src/xeq.c     **** 			incpc();
5587:src/xeq.c     **** 			xeq(op);
5588:src/xeq.c     **** #ifndef REALBUILD
5589:src/xeq.c     **** 			State2.sst = 0;
5590:src/xeq.c     **** #endif
5591:src/xeq.c     **** 			xeq_xrom();  // necessary for code called from XROM
5592:src/xeq.c     **** 			set_running_off_sst();
5593:src/xeq.c     **** 		}
5594:src/xeq.c     **** 	}
5595:src/xeq.c     **** 	else if (kind == 0) {
5596:src/xeq.c     **** 		// Key down in program mode
5597:src/xeq.c     **** 		incpc();
5598:src/xeq.c     **** 		OpCode = 0;
5599:src/xeq.c     **** 	}
5600:src/xeq.c     **** }
5601:src/xeq.c     **** 
5602:src/xeq.c     **** 
5603:src/xeq.c     **** /*
5604:src/xeq.c     ****  *  User command to start or stop execution
5605:src/xeq.c     ****  */
5606:src/xeq.c     **** void op_rs(enum nilop op) {
5607:src/xeq.c     **** #ifndef REALBUILD
5608:src/xeq.c     **** 	// This is for debugging purposes only
5609:src/xeq.c     **** 	// STOP does not appear in XROM normally
5610:src/xeq.c     **** 	if (is_xrom()) {
5611:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
5612:src/xeq.c     **** 			Running = XromRunning = 0;
5613:src/xeq.c     **** 		}
5614:src/xeq.c     **** 		else {
5615:src/xeq.c     **** 			xeq_xrom2();
5616:src/xeq.c     **** 		}
5617:src/xeq.c     **** 		return;
5618:src/xeq.c     **** 	}
5619:src/xeq.c     **** #endif
5620:src/xeq.c     **** 	if (Running)
5621:src/xeq.c     **** 		set_running_off();
5622:src/xeq.c     **** 	else {
5623:src/xeq.c     **** 		set_running_on();
5624:src/xeq.c     **** 		if (RetStkPtr == 0)
5625:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
5626:src/xeq.c     **** 	}
ARM GAS  /tmp/cc7LeJ71.s 			page 175


5627:src/xeq.c     **** }
5628:src/xeq.c     **** 
5629:src/xeq.c     **** 
5630:src/xeq.c     **** /* 
5631:src/xeq.c     ****  *  The following needs to be done each time before any user input is processed.
5632:src/xeq.c     ****  *  On the hardware, RAM is volatile and these pointers and structures need valid values!
5633:src/xeq.c     ****  */
5634:src/xeq.c     **** void xeq_init_contexts(void) {
5635:src/xeq.c     **** 	/*
5636:src/xeq.c     **** 	 *  Compute the sizes of the various memory portions
5637:src/xeq.c     **** 	 */
5638:src/xeq.c     **** 	short int s;
5639:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
5640:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
5641:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
5642:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
5643:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
5644:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
5645:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
5646:src/xeq.c     **** 
5647:src/xeq.c     **** 	/*
5648:src/xeq.c     **** 	 *  Initialise our standard contexts.
5649:src/xeq.c     **** 	 *  We bump the digits for internal calculations.
5650:src/xeq.c     **** 	 */
5651:src/xeq.c     **** 	decContextDefault(&Ctx, DEC_INIT_BASE);
5652:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
5653:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
5654:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
5655:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
5656:src/xeq.c     **** }
5657:src/xeq.c     **** 
5658:src/xeq.c     **** 
5659:src/xeq.c     **** 
5660:src/xeq.c     **** #ifdef INCLUDE_PLOTTING
5661:src/xeq.c     **** /*
5662:src/xeq.c     ****  *  Plotting commands
5663:src/xeq.c     ****  *
5664:src/xeq.c     ****  *  The plot buffer is a range of registers that is treated as pixel data
5665:src/xeq.c     ****  *  The first byte contains the length of the buffer in columns (bytes)
5666:src/xeq.c     ****  */
5667:src/xeq.c     **** 
5668:src/xeq.c     **** /*
5669:src/xeq.c     ****  *  Check register range and return a pointer to the plot data.
5670:src/xeq.c     ****  */
5671:src/xeq.c     **** unsigned char *plot_check_range( int arg, int width, int height )
5672:src/xeq.c     **** {
5673:src/xeq.c     **** 	unsigned char *p = (unsigned char *) get_reg_n( arg );
5674:src/xeq.c     **** 	int n = is_dblmode() ? 16 : 8;
5675:src/xeq.c     **** 	int lim = arg < TOPREALREG ? global_regs() : local_regs() + LOCAL_REG_BASE;
5676:src/xeq.c     **** 	int bytes;
5677:src/xeq.c     **** 
5678:src/xeq.c     **** 	if ( width == 0 ) {
5679:src/xeq.c     **** 		width = (int) *p;
5680:src/xeq.c     **** 		height = (int) p[ 1 ];
5681:src/xeq.c     **** 	}
5682:src/xeq.c     **** 
5683:src/xeq.c     **** 	/*
ARM GAS  /tmp/cc7LeJ71.s 			page 176


5684:src/xeq.c     **** 	 *  Compute total number of bytes
5685:src/xeq.c     **** 	 */
5686:src/xeq.c     **** 	bytes = 2 + width * height;
5687:src/xeq.c     **** 
5688:src/xeq.c     **** 	/*
5689:src/xeq.c     **** 	 *  Check if we have enough room
5690:src/xeq.c     **** 	 */
5691:src/xeq.c     **** 	if ( width > PAPER_WIDTH || arg + ( bytes + n - 1 ) / n > lim ) {
5692:src/xeq.c     **** 		report_err( ERR_RANGE );
5693:src/xeq.c     **** 		return (unsigned char *) NULL;
5694:src/xeq.c     **** 	}
5695:src/xeq.c     **** 	return p;
5696:src/xeq.c     **** }
5697:src/xeq.c     **** 
5698:src/xeq.c     **** /*
5699:src/xeq.c     ****  * Set up for graphical object display.
5700:src/xeq.c     ****  */
5701:src/xeq.c     **** void cmdplotdisplay( unsigned int arg, enum rarg op )
5702:src/xeq.c     **** {
5703:src/xeq.c     **** 	if (plot_check_range(arg, 0, 0) != NULL) {
5704:src/xeq.c     **** 		DispPlot = arg + 1;
5705:src/xeq.c     **** 		frozen_display();
5706:src/xeq.c     **** 	}
5707:src/xeq.c     **** }
5708:src/xeq.c     **** 
5709:src/xeq.c     **** /*
5710:src/xeq.c     ****  *  Initialize a block of registers to act as a buffer for plotting
5711:src/xeq.c     ****  *  X contains the maximum width (<= 0 is default: 166)
5712:src/xeq.c     ****  */
5713:src/xeq.c     **** void cmdplotinit( unsigned int arg, enum rarg op )
5714:src/xeq.c     **** {
5715:src/xeq.c     **** 	int sgnx, sgny;
5716:src/xeq.c     **** 	int width = (int) getX_int_sgn( &sgnx );
5717:src/xeq.c     **** 	int height = (int) get_reg_n_int_sgn( regY_idx, &sgny ); 
5718:src/xeq.c     **** 	unsigned char *p;
5719:src/xeq.c     **** 	
5720:src/xeq.c     **** 	if ( sgnx || width == 0 ) {
5721:src/xeq.c     **** 		width = PAPER_WIDTH;
5722:src/xeq.c     **** 	}
5723:src/xeq.c     **** 	if ( sgny || height == 0 ) {
5724:src/xeq.c     **** 		height = 1;
5725:src/xeq.c     **** 	}
5726:src/xeq.c     **** 	else {
5727:src/xeq.c     **** 		/*
5728:src/xeq.c     **** 		 *  Make height count the byte rows
5729:src/xeq.c     **** 		 */
5730:src/xeq.c     **** 		height = ( height + 7 ) >> 3;
5731:src/xeq.c     **** 	}
5732:src/xeq.c     **** 
5733:src/xeq.c     **** 	p = plot_check_range( arg, width, height );
5734:src/xeq.c     **** 	if ( p != NULL ) {
5735:src/xeq.c     **** 		*p++ = (unsigned char) width;
5736:src/xeq.c     **** 		*p++ = (unsigned char) height;
5737:src/xeq.c     **** 		xset( p, 0, width * height );
5738:src/xeq.c     **** 	}
5739:src/xeq.c     **** }
5740:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 177


5741:src/xeq.c     **** /*
5742:src/xeq.c     ****  *  Return the width and height of the plotting block
5743:src/xeq.c     ****  */
5744:src/xeq.c     **** void cmdplotdim( unsigned int arg, enum rarg op )
5745:src/xeq.c     **** {
5746:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5747:src/xeq.c     **** 	if ( p != NULL ) {
5748:src/xeq.c     **** 		lift2_if_enabled();
5749:src/xeq.c     **** 		setX_int_sgn( p[ 0 ], 0 ); // width
5750:src/xeq.c     **** 		set_reg_n_int_sgn( regY_idx, p[ 1 ] << 3, 0 ); // height
5751:src/xeq.c     **** 	}
5752:src/xeq.c     **** }
5753:src/xeq.c     **** 
5754:src/xeq.c     **** /*
5755:src/xeq.c     ****  *  All pixel related commands
5756:src/xeq.c     ****  *  X is the horizontal position 0..width
5757:src/xeq.c     ****  *  Y is the vertical position 0..7
5758:src/xeq.c     ****  */
5759:src/xeq.c     **** void cmdplotpixel( unsigned int arg, enum rarg op )
5760:src/xeq.c     **** {
5761:src/xeq.c     **** 	unsigned char *p = plot_check_range( arg, 0, 0 );
5762:src/xeq.c     **** 	if ( p != NULL ) {
5763:src/xeq.c     **** 		/*
5764:src/xeq.c     **** 		 *  Get row from Y
5765:src/xeq.c     **** 		 */
5766:src/xeq.c     **** 		int sgn;
5767:src/xeq.c     **** 		unsigned int row = (unsigned int) get_reg_n_int_sgn( regY_idx, &sgn );
5768:src/xeq.c     **** 		int pix = 0;
5769:src/xeq.c     **** 		if ( sgn == 0 && ( row >> 3 ) < (unsigned int) p[ 1 ] ) {
5770:src/xeq.c     **** 			/*
5771:src/xeq.c     **** 			 *  Row is OK, get column from X
5772:src/xeq.c     **** 			 */
5773:src/xeq.c     **** 			unsigned int width = (unsigned int) *p;
5774:src/xeq.c     **** 			unsigned int column = (unsigned int) getX_int_sgn( &sgn );
5775:src/xeq.c     **** 			if ( sgn == 0 && column < width ) {
5776:src/xeq.c     **** 				/*
5777:src/xeq.c     **** 				 *  Modify the bit in the correct byte
5778:src/xeq.c     **** 				 */
5779:src/xeq.c     **** 				pix = 1 << ( row & 7 );
5780:src/xeq.c     **** 				p += 2 + width * ( row >> 3 ) + column;
5781:src/xeq.c     **** 
5782:src/xeq.c     **** 				if ( op == RARG_PLOT_SETPIX ) {
5783:src/xeq.c     **** 					*p |= pix;
5784:src/xeq.c     **** 				}
5785:src/xeq.c     **** 				else if ( op == RARG_PLOT_CLRPIX ) {
5786:src/xeq.c     **** 					*p &= ~pix;
5787:src/xeq.c     **** 				}
5788:src/xeq.c     **** 				else if ( op == RARG_PLOT_FLIPPIX ) {
5789:src/xeq.c     **** 					*p ^= pix;
5790:src/xeq.c     **** 				}
5791:src/xeq.c     **** 			}
5792:src/xeq.c     **** 		}
5793:src/xeq.c     **** 		if ( op == RARG_PLOT_ISSET ) {
5794:src/xeq.c     **** 			fin_tst( *p & pix );
5795:src/xeq.c     **** 		}
5796:src/xeq.c     **** 	}
5797:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 178


5798:src/xeq.c     **** #endif
5799:src/xeq.c     **** 
5800:src/xeq.c     **** 
5801:src/xeq.c     **** /*
5802:src/xeq.c     ****  *  We don't allow some commands from a running program
5803:src/xeq.c     ****  */
5804:src/xeq.c     **** int not_running(void) {
5805:src/xeq.c     **** 	if ( Running ) {
5806:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5807:src/xeq.c     **** 		return 0;
5808:src/xeq.c     **** 	}
5809:src/xeq.c     **** 	return 1;
5810:src/xeq.c     **** }
5811:src/xeq.c     **** 
5812:src/xeq.c     **** /*
5813:src/xeq.c     ****  *  Handle the Running Flag
5814:src/xeq.c     ****  */
5815:src/xeq.c     **** void set_running_off_sst() {
5816:src/xeq.c     **** 	Running = 0;
5817:src/xeq.c     **** }
5818:src/xeq.c     **** 
5819:src/xeq.c     **** void set_running_on_sst() {
5820:src/xeq.c     **** 	Running = 1;
5821:src/xeq.c     **** }
5822:src/xeq.c     **** 
5823:src/xeq.c     **** void set_running_off() {
 3511              		.loc 1 5823 6 view .LVU957
 3512              	.LBB1558:
5824:src/xeq.c     **** 	set_running_off_sst();
 3513              		.loc 1 5824 2 view .LVU958
 3514              	.LBB1559:
 3515              	.LBI1559:
5815:src/xeq.c     **** 	Running = 0;
 3516              		.loc 1 5815 6 view .LVU959
 3517              	.LBB1560:
5816:src/xeq.c     **** }
 3518              		.loc 1 5816 2 view .LVU960
5816:src/xeq.c     **** }
 3519              		.loc 1 5816 10 is_stmt 0 view .LVU961
 3520 0078 084A     		ldr	r2, .L286+8
 3521 007a 1160     		str	r1, [r2]
 3522              	.LBE1560:
 3523              	.LBE1559:
5825:src/xeq.c     **** 	State.entryp = 0;
 3524              		.loc 1 5825 2 is_stmt 1 view .LVU962
 3525              		.loc 1 5825 15 is_stmt 0 view .LVU963
 3526 007c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 3527 0080 61F30412 		bfi	r2, r1, #4, #1
 3528 0084 83F8DD27 		strb	r2, [r3, #2013]
5826:src/xeq.c     **** 	dot( RCL_annun, 0);
 3529              		.loc 1 5826 2 is_stmt 1 view .LVU964
 3530              	.LBE1558:
 3531              	.LBE1557:
2270:src/xeq.c     **** 
 3532              		.loc 1 2270 1 is_stmt 0 view .LVU965
 3533 0088 BDE87040 		pop	{r4, r5, r6, lr}
 3534              		.cfi_restore 14
ARM GAS  /tmp/cc7LeJ71.s 			page 179


 3535              		.cfi_restore 6
 3536              		.cfi_restore 5
 3537              		.cfi_restore 4
 3538              		.cfi_def_cfa_offset 0
 3539              	.LBB1562:
 3540              	.LBB1561:
 3541              		.loc 1 5826 2 view .LVU966
 3542 008c 8A20     		movs	r0, #138
 3543 008e FFF7FEBF 		b	dot
 3544              	.LVL265:
 3545              	.L287:
 3546 0092 00BF     		.align	2
 3547              	.L286:
 3548 0094 00000000 		.word	main_ram
 3549 0098 00000000 		.word	RetStk
 3550 009c 00000000 		.word	Running
 3551              	.LBE1561:
 3552              	.LBE1562:
 3553              		.cfi_endproc
 3554              	.LFE154:
 3556              		.section	.text.user_pc,"ax",%progbits
 3557              		.align	1
 3558              		.p2align 2,,3
 3559              		.global	user_pc
 3560              		.syntax unified
 3561              		.thumb
 3562              		.thumb_func
 3563              		.fpu fpv4-sp-d16
 3565              	user_pc:
 3566              	.LVL266:
 3567              	.LFB25:
 494:src/xeq.c     **** 	unsigned int n = 1;
 3568              		.loc 1 494 39 is_stmt 1 view -0
 3569              		.cfi_startproc
 3570              		@ args = 0, pretend = 0, frame = 0
 3571              		@ frame_needed = 0, uses_anonymous_args = 0
 3572              		@ link register save eliminated.
 495:src/xeq.c     **** 	unsigned int base;
 3573              		.loc 1 495 2 view .LVU968
 496:src/xeq.c     **** 
 3574              		.loc 1 496 2 view .LVU969
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3575              		.loc 1 499 2 view .LVU970
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3576              		.loc 1 499 5 is_stmt 0 view .LVU971
 3577 0000 0346     		mov	r3, r0
 3578 0002 20B1     		cbz	r0, .L289
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3579              		.loc 1 499 17 discriminator 1 view .LVU972
 3580 0004 820B     		lsrs	r2, r0, #14
 499:src/xeq.c     **** 		return offsetLIB(pc) + 1;
 3581              		.loc 1 499 14 discriminator 1 view .LVU973
 3582 0006 032A     		cmp	r2, #3
 3583 0008 01D0     		beq	.L289
 3584 000a FFF7FEBF 		b	user_pc.part.0
 3585              	.LVL267:
 3586              	.L289:
ARM GAS  /tmp/cc7LeJ71.s 			page 180


 500:src/xeq.c     **** #else
 3587              		.loc 1 500 3 is_stmt 1 view .LVU974
 500:src/xeq.c     **** #else
 3588              		.loc 1 500 24 is_stmt 0 view .LVU975
 3589 000e C3F30D00 		ubfx	r0, r3, #0, #14
 3590              	.LVL268:
 513:src/xeq.c     **** 
 3591              		.loc 1 513 1 view .LVU976
 3592 0012 7047     		bx	lr
 3593              		.cfi_endproc
 3594              	.LFE25:
 3596              		.section	.text.find_user_pc,"ax",%progbits
 3597              		.align	1
 3598              		.p2align 2,,3
 3599              		.global	find_user_pc
 3600              		.syntax unified
 3601              		.thumb
 3602              		.thumb_func
 3603              		.fpu fpv4-sp-d16
 3605              	find_user_pc:
 3606              	.LVL269:
 3607              	.LFB26:
 517:src/xeq.c     **** 	unsigned int upc = state_pc();
 3608              		.loc 1 517 48 is_stmt 1 view -0
 3609              		.cfi_startproc
 3610              		@ args = 0, pretend = 0, frame = 0
 3611              		@ frame_needed = 0, uses_anonymous_args = 0
 518:src/xeq.c     **** 	const int libp = isLIB(upc);
 3612              		.loc 1 518 2 view .LVU978
 517:src/xeq.c     **** 	unsigned int upc = state_pc();
 3613              		.loc 1 517 48 is_stmt 0 view .LVU979
 3614 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 3615              		.cfi_def_cfa_offset 24
 3616              		.cfi_offset 3, -24
 3617              		.cfi_offset 4, -20
 3618              		.cfi_offset 5, -16
 3619              		.cfi_offset 6, -12
 3620              		.cfi_offset 7, -8
 3621              		.cfi_offset 14, -4
 518:src/xeq.c     **** 	const int libp = isLIB(upc);
 3622              		.loc 1 518 21 view .LVU980
 3623 0002 124B     		ldr	r3, .L305
 3624 0004 1B68     		ldr	r3, [r3]
 3625 0006 B3F8E037 		ldrh	r3, [r3, #2016]
 3626              	.LVL270:
 519:src/xeq.c     **** 	unsigned int base = libp ? startLIB(upc) : 0;
 3627              		.loc 1 519 2 is_stmt 1 view .LVU981
 520:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3628              		.loc 1 520 2 view .LVU982
 520:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3629              		.loc 1 520 43 is_stmt 0 view .LVU983
 3630 000a 13F44044 		ands	r4, r3, #49152
 3631              	.LVL271:
 520:src/xeq.c     **** 	unsigned int n = libp ? 1 : 0;
 3632              		.loc 1 520 43 view .LVU984
 3633 000e 1ABF     		itte	ne
 3634 0010 03F44045 		andne	r5, r3, #49152
ARM GAS  /tmp/cc7LeJ71.s 			page 181


 3635 0014 0135     		addne	r5, r5, #1
 3636 0016 2546     		moveq	r5, r4
 3637              	.LVL272:
 521:src/xeq.c     **** #ifndef REALBUILD
 3638              		.loc 1 521 2 is_stmt 1 view .LVU985
 523:src/xeq.c     **** 		return addrXROM(target);
 3639              		.loc 1 523 6 is_stmt 0 view .LVU986
 3640 0018 9B0B     		lsrs	r3, r3, #14
 3641              	.LVL273:
 521:src/xeq.c     **** #ifndef REALBUILD
 3642              		.loc 1 521 28 view .LVU987
 3643 001a 003C     		subs	r4, r4, #0
 521:src/xeq.c     **** #ifndef REALBUILD
 3644              		.loc 1 521 28 view .LVU988
 3645 001c 18BF     		it	ne
 3646 001e 0124     		movne	r4, #1
 3647              	.LVL274:
 523:src/xeq.c     **** 		return addrXROM(target);
 3648              		.loc 1 523 2 is_stmt 1 view .LVU989
 523:src/xeq.c     **** 		return addrXROM(target);
 3649              		.loc 1 523 5 is_stmt 0 view .LVU990
 3650 0020 032B     		cmp	r3, #3
 517:src/xeq.c     **** 	unsigned int upc = state_pc();
 3651              		.loc 1 517 48 view .LVU991
 3652 0022 0646     		mov	r6, r0
 523:src/xeq.c     **** 		return addrXROM(target);
 3653              		.loc 1 523 5 view .LVU992
 3654 0024 0ED0     		beq	.L303
 3655              	.LBB1563:
 529:src/xeq.c     **** 			return oldbase;
 3656              		.loc 1 529 7 view .LVU993
 3657 0026 0A4F     		ldr	r7, .L305+4
 3658 0028 05E0     		b	.L298
 3659              	.LVL275:
 3660              	.L300:
 528:src/xeq.c     **** 		if (PcWrapped)
 3661              		.loc 1 528 10 view .LVU994
 3662 002a FFF7FEFF 		bl	do_inc
 3663              	.LVL276:
 529:src/xeq.c     **** 			return oldbase;
 3664              		.loc 1 529 6 view .LVU995
 3665 002e 3B68     		ldr	r3, [r7]
 3666              	.LVL277:
 529:src/xeq.c     **** 			return oldbase;
 3667              		.loc 1 529 3 is_stmt 1 view .LVU996
 3668 0030 0134     		adds	r4, r4, #1
 3669              	.LVL278:
 529:src/xeq.c     **** 			return oldbase;
 3670              		.loc 1 529 6 is_stmt 0 view .LVU997
 3671 0032 2BB9     		cbnz	r3, .L296
 528:src/xeq.c     **** 		if (PcWrapped)
 3672              		.loc 1 528 10 view .LVU998
 3673 0034 0546     		mov	r5, r0
 3674              	.LVL279:
 3675              	.L298:
 527:src/xeq.c     **** 		base = do_inc(oldbase, 0);
 3676              		.loc 1 527 3 is_stmt 1 view .LVU999
ARM GAS  /tmp/cc7LeJ71.s 			page 182


 528:src/xeq.c     **** 		if (PcWrapped)
 3677              		.loc 1 528 3 view .LVU1000
 528:src/xeq.c     **** 		if (PcWrapped)
 3678              		.loc 1 528 3 is_stmt 0 view .LVU1001
 3679              	.LBE1563:
 526:src/xeq.c     **** 		const unsigned int oldbase = base;
 3680              		.loc 1 526 8 is_stmt 1 view .LVU1002
 526:src/xeq.c     **** 		const unsigned int oldbase = base;
 3681              		.loc 1 526 8 is_stmt 0 view .LVU1003
 3682 0036 A642     		cmp	r6, r4
 3683              	.LBB1564:
 528:src/xeq.c     **** 		if (PcWrapped)
 3684              		.loc 1 528 10 view .LVU1004
 3685 0038 2846     		mov	r0, r5
 3686 003a 4FF00001 		mov	r1, #0
 3687              	.LBE1564:
 526:src/xeq.c     **** 		const unsigned int oldbase = base;
 3688              		.loc 1 526 8 view .LVU1005
 3689 003e F4D8     		bhi	.L300
 3690              	.LVL280:
 3691              	.L296:
 533:src/xeq.c     **** 
 3692              		.loc 1 533 1 view .LVU1006
 3693 0040 2846     		mov	r0, r5
 3694              	.LVL281:
 533:src/xeq.c     **** 
 3695              		.loc 1 533 1 view .LVU1007
 3696 0042 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3697              	.LVL282:
 3698              	.L303:
 524:src/xeq.c     **** #endif
 3699              		.loc 1 524 3 is_stmt 1 view .LVU1008
 524:src/xeq.c     **** #endif
 3700              		.loc 1 524 10 is_stmt 0 view .LVU1009
 3701 0044 40F44045 		orr	r5, r0, #49152
 3702              	.LVL283:
 533:src/xeq.c     **** 
 3703              		.loc 1 533 1 view .LVU1010
 3704 0048 2846     		mov	r0, r5
 3705              	.LVL284:
 533:src/xeq.c     **** 
 3706              		.loc 1 533 1 view .LVU1011
 3707 004a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 3708              	.LVL285:
 3709              	.L306:
 533:src/xeq.c     **** 
 3710              		.loc 1 533 1 view .LVU1012
 3711              		.align	2
 3712              	.L305:
 3713 004c 00000000 		.word	main_ram
 3714 0050 00000000 		.word	PcWrapped
 3715              		.cfi_endproc
 3716              	.LFE26:
 3718              		.section	.text.report_err,"ax",%progbits
 3719              		.align	1
 3720              		.p2align 2,,3
 3721              		.global	report_err
ARM GAS  /tmp/cc7LeJ71.s 			page 183


 3722              		.syntax unified
 3723              		.thumb
 3724              		.thumb_func
 3725              		.fpu fpv4-sp-d16
 3727              	report_err:
 3728              	.LVL286:
 3729              	.LFB28:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3730              		.loc 1 546 38 is_stmt 1 view -0
 3731              		.cfi_startproc
 3732              		@ args = 0, pretend = 0, frame = 0
 3733              		@ frame_needed = 0, uses_anonymous_args = 0
 547:src/xeq.c     **** 		Error = e;
 3734              		.loc 1 547 2 view .LVU1014
 547:src/xeq.c     **** 		Error = e;
 3735              		.loc 1 547 12 is_stmt 0 view .LVU1015
 3736 0000 064A     		ldr	r2, .L313
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3737              		.loc 1 546 38 view .LVU1016
 3738 0002 10B5     		push	{r4, lr}
 3739              		.cfi_def_cfa_offset 8
 3740              		.cfi_offset 4, -8
 3741              		.cfi_offset 14, -4
 547:src/xeq.c     **** 		Error = e;
 3742              		.loc 1 547 12 view .LVU1017
 3743 0004 1468     		ldr	r4, [r2]
 547:src/xeq.c     **** 		Error = e;
 3744              		.loc 1 547 5 view .LVU1018
 3745 0006 0CB9     		cbnz	r4, .L310
 3746              	.LVL287:
 3747              	.LBB1567:
 3748              	.LBI1567:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3749              		.loc 1 546 5 is_stmt 1 view .LVU1019
 3750              	.LBB1568:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3751              		.loc 1 548 3 view .LVU1020
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3752              		.loc 1 548 9 is_stmt 0 view .LVU1021
 3753 0008 1060     		str	r0, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3754              		.loc 1 549 3 is_stmt 1 view .LVU1022
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3755              		.loc 1 549 6 is_stmt 0 view .LVU1023
 3756 000a 10B1     		cbz	r0, .L312
 3757              	.LVL288:
 3758              	.L310:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3759              		.loc 1 549 6 view .LVU1024
 3760              	.LBE1568:
 3761              	.LBE1567:
 554:src/xeq.c     **** }
 3762              		.loc 1 554 9 view .LVU1025
 3763 000c 0124     		movs	r4, #1
 555:src/xeq.c     **** 
 3764              		.loc 1 555 1 view .LVU1026
 3765 000e 2046     		mov	r0, r4
ARM GAS  /tmp/cc7LeJ71.s 			page 184


 3766              	.LVL289:
 555:src/xeq.c     **** 
 3767              		.loc 1 555 1 view .LVU1027
 3768 0010 10BD     		pop	{r4, pc}
 3769              	.LVL290:
 3770              	.L312:
 3771              	.LBB1570:
 3772              	.LBB1569:
 550:src/xeq.c     **** 			return 0;
 3773              		.loc 1 550 4 is_stmt 1 view .LVU1028
 3774 0012 FFF7FEFF 		bl	error_message
 3775              	.LVL291:
 551:src/xeq.c     **** 		}
 3776              		.loc 1 551 4 view .LVU1029
 551:src/xeq.c     **** 		}
 3777              		.loc 1 551 4 is_stmt 0 view .LVU1030
 3778              	.LBE1569:
 3779              	.LBE1570:
 555:src/xeq.c     **** 
 3780              		.loc 1 555 1 view .LVU1031
 3781 0016 2046     		mov	r0, r4
 3782 0018 10BD     		pop	{r4, pc}
 3783              	.L314:
 3784 001a 00BF     		.align	2
 3785              	.L313:
 3786 001c 00000000 		.word	Error
 3787              		.cfi_endproc
 3788              	.LFE28:
 3790              		.section	.text.report_warn,"ax",%progbits
 3791              		.align	1
 3792              		.p2align 2,,3
 3793              		.global	report_warn
 3794              		.syntax unified
 3795              		.thumb
 3796              		.thumb_func
 3797              		.fpu fpv4-sp-d16
 3799              	report_warn:
 3800              	.LVL292:
 3801              	.LFB29:
 560:src/xeq.c     **** 	if (Running) {
 3802              		.loc 1 560 39 is_stmt 1 view -0
 3803              		.cfi_startproc
 3804              		@ args = 0, pretend = 0, frame = 0
 3805              		@ frame_needed = 0, uses_anonymous_args = 0
 561:src/xeq.c     **** 		return report_err(e);
 3806              		.loc 1 561 2 view .LVU1033
 561:src/xeq.c     **** 		return report_err(e);
 3807              		.loc 1 561 6 is_stmt 0 view .LVU1034
 3808 0000 114B     		ldr	r3, .L321
 560:src/xeq.c     **** 	if (Running) {
 3809              		.loc 1 560 39 view .LVU1035
 3810 0002 70B5     		push	{r4, r5, r6, lr}
 3811              		.cfi_def_cfa_offset 16
 3812              		.cfi_offset 4, -16
 3813              		.cfi_offset 5, -12
 3814              		.cfi_offset 6, -8
 3815              		.cfi_offset 14, -4
ARM GAS  /tmp/cc7LeJ71.s 			page 185


 561:src/xeq.c     **** 		return report_err(e);
 3816              		.loc 1 561 5 view .LVU1036
 3817 0004 1D68     		ldr	r5, [r3]
 560:src/xeq.c     **** 	if (Running) {
 3818              		.loc 1 560 39 view .LVU1037
 3819 0006 0446     		mov	r4, r0
 561:src/xeq.c     **** 		return report_err(e);
 3820              		.loc 1 561 5 view .LVU1038
 3821 0008 5DB1     		cbz	r5, .L316
 562:src/xeq.c     **** 	}
 3822              		.loc 1 562 3 is_stmt 1 view .LVU1039
 3823              	.LVL293:
 3824              	.LBB1579:
 3825              	.LBI1579:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3826              		.loc 1 546 5 view .LVU1040
 3827              	.LBB1580:
 547:src/xeq.c     **** 		Error = e;
 3828              		.loc 1 547 2 view .LVU1041
 547:src/xeq.c     **** 		Error = e;
 3829              		.loc 1 547 12 is_stmt 0 view .LVU1042
 3830 000a 104B     		ldr	r3, .L321+4
 3831 000c 1D68     		ldr	r5, [r3]
 547:src/xeq.c     **** 		Error = e;
 3832              		.loc 1 547 5 view .LVU1043
 3833 000e 15B1     		cbz	r5, .L317
 3834              	.L319:
 554:src/xeq.c     **** }
 3835              		.loc 1 554 9 view .LVU1044
 3836 0010 0125     		movs	r5, #1
 3837              	.LVL294:
 3838              	.L315:
 554:src/xeq.c     **** }
 3839              		.loc 1 554 9 view .LVU1045
 3840              	.LBE1580:
 3841              	.LBE1579:
 571:src/xeq.c     **** 
 3842              		.loc 1 571 1 view .LVU1046
 3843 0012 2846     		mov	r0, r5
 3844 0014 70BD     		pop	{r4, r5, r6, pc}
 3845              	.LVL295:
 3846              	.L317:
 3847              	.LBB1584:
 3848              	.LBB1583:
 3849              	.LBB1581:
 3850              	.LBI1581:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3851              		.loc 1 546 5 is_stmt 1 view .LVU1047
 3852              	.LBB1582:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3853              		.loc 1 548 3 view .LVU1048
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3854              		.loc 1 548 9 is_stmt 0 view .LVU1049
 3855 0016 1860     		str	r0, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3856              		.loc 1 549 3 is_stmt 1 view .LVU1050
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/cc7LeJ71.s 			page 186


 3857              		.loc 1 549 6 is_stmt 0 view .LVU1051
 3858 0018 0028     		cmp	r0, #0
 3859 001a F9D1     		bne	.L319
 550:src/xeq.c     **** 			return 0;
 3860              		.loc 1 550 4 is_stmt 1 view .LVU1052
 3861 001c FFF7FEFF 		bl	error_message
 3862              	.LVL296:
 551:src/xeq.c     **** 		}
 3863              		.loc 1 551 4 view .LVU1053
 551:src/xeq.c     **** 		}
 3864              		.loc 1 551 11 is_stmt 0 view .LVU1054
 3865 0020 F7E7     		b	.L315
 3866              	.LVL297:
 3867              	.L316:
 551:src/xeq.c     **** 		}
 3868              		.loc 1 551 11 view .LVU1055
 3869              	.LBE1582:
 3870              	.LBE1581:
 3871              	.LBE1583:
 3872              	.LBE1584:
 3873              	.LBB1585:
 3874              	.LBI1585:
 560:src/xeq.c     **** 	if (Running) {
 3875              		.loc 1 560 5 is_stmt 1 view .LVU1056
 3876              	.LBB1586:
 564:src/xeq.c     **** #ifndef CONSOLE
 3877              		.loc 1 564 2 view .LVU1057
 3878 0022 FFF7FEFF 		bl	error_message
 3879              	.LVL298:
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3880              		.loc 1 566 2 view .LVU1058
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3881              		.loc 1 566 21 is_stmt 0 view .LVU1059
 3882 0026 0A4A     		ldr	r2, .L321+8
 567:src/xeq.c     **** 	ShowRPN = 1;
 3883              		.loc 1 567 16 view .LVU1060
 3884 0028 0A4E     		ldr	r6, .L321+12
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3885              		.loc 1 566 21 view .LVU1061
 3886 002a D17D     		ldrb	r1, [r2, #23]	@ zero_extendqisi2
 568:src/xeq.c     **** #endif
 3887              		.loc 1 568 10 view .LVU1062
 3888 002c 0A48     		ldr	r0, .L321+16
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3889              		.loc 1 566 21 view .LVU1063
 3890 002e 65F30411 		bfi	r1, r5, #4, #1
 570:src/xeq.c     **** }
 3891              		.loc 1 570 11 view .LVU1064
 3892 0032 251E     		subs	r5, r4, #0
 567:src/xeq.c     **** 	ShowRPN = 1;
 3893              		.loc 1 567 16 view .LVU1065
 3894 0034 4FF00103 		mov	r3, #1
 566:src/xeq.c     **** 	JustDisplayed = 1;
 3895              		.loc 1 566 21 view .LVU1066
 3896 0038 D175     		strb	r1, [r2, #23]
 567:src/xeq.c     **** 	ShowRPN = 1;
 3897              		.loc 1 567 2 is_stmt 1 view .LVU1067
ARM GAS  /tmp/cc7LeJ71.s 			page 187


 570:src/xeq.c     **** }
 3898              		.loc 1 570 11 is_stmt 0 view .LVU1068
 3899 003a 18BF     		it	ne
 3900 003c 0125     		movne	r5, #1
 568:src/xeq.c     **** #endif
 3901              		.loc 1 568 10 view .LVU1069
 3902 003e 0360     		str	r3, [r0]
 567:src/xeq.c     **** 	ShowRPN = 1;
 3903              		.loc 1 567 16 view .LVU1070
 3904 0040 3360     		str	r3, [r6]
 568:src/xeq.c     **** #endif
 3905              		.loc 1 568 2 is_stmt 1 view .LVU1071
 570:src/xeq.c     **** }
 3906              		.loc 1 570 2 view .LVU1072
 3907              	.LVL299:
 570:src/xeq.c     **** }
 3908              		.loc 1 570 2 is_stmt 0 view .LVU1073
 3909              	.LBE1586:
 3910              	.LBE1585:
 571:src/xeq.c     **** 
 3911              		.loc 1 571 1 view .LVU1074
 3912 0042 2846     		mov	r0, r5
 3913 0044 70BD     		pop	{r4, r5, r6, pc}
 3914              	.LVL300:
 3915              	.L322:
 571:src/xeq.c     **** 
 3916              		.loc 1 571 1 view .LVU1075
 3917 0046 00BF     		.align	2
 3918              	.L321:
 3919 0048 00000000 		.word	Running
 3920 004c 00000000 		.word	Error
 3921 0050 00000000 		.word	StateWhileOn
 3922 0054 00000000 		.word	JustDisplayed
 3923 0058 00000000 		.word	ShowRPN
 3924              		.cfi_endproc
 3925              	.LFE29:
 3927              		.section	.text.bad_mode_error,"ax",%progbits
 3928              		.align	1
 3929              		.p2align 2,,3
 3930              		.global	bad_mode_error
 3931              		.syntax unified
 3932              		.thumb
 3933              		.thumb_func
 3934              		.fpu fpv4-sp-d16
 3936              	bad_mode_error:
 3937              	.LFB30:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 3938              		.loc 1 575 27 is_stmt 1 view -0
 3939              		.cfi_startproc
 3940              		@ args = 0, pretend = 0, frame = 0
 3941              		@ frame_needed = 0, uses_anonymous_args = 0
 3942              		@ link register save eliminated.
 576:src/xeq.c     **** }
 3943              		.loc 1 576 2 view .LVU1077
 3944              	.LVL301:
 3945              	.LBB1591:
 3946              	.LBI1591:
ARM GAS  /tmp/cc7LeJ71.s 			page 188


 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3947              		.loc 1 546 5 view .LVU1078
 3948              	.LBB1592:
 547:src/xeq.c     **** 		Error = e;
 3949              		.loc 1 547 2 view .LVU1079
 547:src/xeq.c     **** 		Error = e;
 3950              		.loc 1 547 12 is_stmt 0 view .LVU1080
 3951 0000 024B     		ldr	r3, .L325
 547:src/xeq.c     **** 		Error = e;
 3952              		.loc 1 547 5 view .LVU1081
 3953 0002 1A68     		ldr	r2, [r3]
 3954 0004 0AB9     		cbnz	r2, .L323
 3955              	.LVL302:
 3956              	.LBB1593:
 3957              	.LBI1593:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 3958              		.loc 1 546 5 is_stmt 1 view .LVU1082
 3959              	.LBB1594:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3960              		.loc 1 548 3 view .LVU1083
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 3961              		.loc 1 548 9 is_stmt 0 view .LVU1084
 3962 0006 0D22     		movs	r2, #13
 3963 0008 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3964              		.loc 1 549 3 is_stmt 1 view .LVU1085
 3965              	.LVL303:
 3966              	.L323:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 3967              		.loc 1 549 3 is_stmt 0 view .LVU1086
 3968              	.LBE1594:
 3969              	.LBE1593:
 3970              	.LBE1592:
 3971              	.LBE1591:
 577:src/xeq.c     **** 
 3972              		.loc 1 577 1 view .LVU1087
 3973 000a 7047     		bx	lr
 3974              	.L326:
 3975              		.align	2
 3976              	.L325:
 3977 000c 00000000 		.word	Error
 3978              		.cfi_endproc
 3979              	.LFE30:
 3981              		.section	.text.cmderr,"ax",%progbits
 3982              		.align	1
 3983              		.p2align 2,,3
 3984              		.global	cmderr
 3985              		.syntax unified
 3986              		.thumb
 3987              		.thumb_func
 3988              		.fpu fpv4-sp-d16
 3990              	cmderr:
 3991              	.LVL304:
 3992              	.LFB31:
 581:src/xeq.c     **** 	report_err(arg);
 3993              		.loc 1 581 45 is_stmt 1 view -0
 3994              		.cfi_startproc
ARM GAS  /tmp/cc7LeJ71.s 			page 189


 3995              		@ args = 0, pretend = 0, frame = 0
 3996              		@ frame_needed = 0, uses_anonymous_args = 0
 3997              		@ link register save eliminated.
 582:src/xeq.c     **** }
 3998              		.loc 1 582 2 view .LVU1089
 3999              	.LBB1599:
 4000              	.LBB1600:
 547:src/xeq.c     **** 		Error = e;
 4001              		.loc 1 547 12 is_stmt 0 view .LVU1090
 4002 0000 034A     		ldr	r2, .L332
 547:src/xeq.c     **** 		Error = e;
 4003              		.loc 1 547 5 view .LVU1091
 4004 0002 1168     		ldr	r1, [r2]
 4005              	.LVL305:
 547:src/xeq.c     **** 		Error = e;
 4006              		.loc 1 547 5 view .LVU1092
 4007              	.LBE1600:
 4008              	.LBI1599:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4009              		.loc 1 546 5 is_stmt 1 view .LVU1093
 4010              	.LBB1605:
 547:src/xeq.c     **** 		Error = e;
 4011              		.loc 1 547 2 view .LVU1094
 547:src/xeq.c     **** 		Error = e;
 4012              		.loc 1 547 5 is_stmt 0 view .LVU1095
 4013 0004 09B9     		cbnz	r1, .L327
 4014              	.LVL306:
 4015              	.LBB1601:
 4016              	.LBI1601:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4017              		.loc 1 546 5 is_stmt 1 view .LVU1096
 4018              	.LBB1602:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4019              		.loc 1 548 3 view .LVU1097
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4020              		.loc 1 548 9 is_stmt 0 view .LVU1098
 4021 0006 1060     		str	r0, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4022              		.loc 1 549 3 is_stmt 1 view .LVU1099
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4023              		.loc 1 549 6 is_stmt 0 view .LVU1100
 4024 0008 00B1     		cbz	r0, .L331
 4025              	.LVL307:
 4026              	.L327:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4027              		.loc 1 549 6 view .LVU1101
 4028              	.LBE1602:
 4029              	.LBE1601:
 4030              	.LBE1605:
 4031              	.LBE1599:
 583:src/xeq.c     **** 
 4032              		.loc 1 583 1 view .LVU1102
 4033 000a 7047     		bx	lr
 4034              	.LVL308:
 4035              	.L331:
 4036              	.LBB1607:
 4037              	.LBB1606:
ARM GAS  /tmp/cc7LeJ71.s 			page 190


 4038              	.LBB1604:
 4039              	.LBB1603:
 550:src/xeq.c     **** 			return 0;
 4040              		.loc 1 550 4 is_stmt 1 view .LVU1103
 4041 000c FFF7FEBF 		b	error_message
 4042              	.LVL309:
 4043              	.L333:
 550:src/xeq.c     **** 			return 0;
 4044              		.loc 1 550 4 is_stmt 0 view .LVU1104
 4045              		.align	2
 4046              	.L332:
 4047 0010 00000000 		.word	Error
 4048              	.LBE1603:
 4049              	.LBE1604:
 4050              	.LBE1606:
 4051              	.LBE1607:
 4052              		.cfi_endproc
 4053              	.LFE31:
 4055              		.section	.text.cmdmsg,"ax",%progbits
 4056              		.align	1
 4057              		.p2align 2,,3
 4058              		.global	cmdmsg
 4059              		.syntax unified
 4060              		.thumb
 4061              		.thumb_func
 4062              		.fpu fpv4-sp-d16
 4064              	cmdmsg:
 4065              	.LVL310:
 4066              	.LFB32:
 587:src/xeq.c     **** 	error_message(arg);
 4067              		.loc 1 587 45 is_stmt 1 view -0
 4068              		.cfi_startproc
 4069              		@ args = 0, pretend = 0, frame = 0
 4070              		@ frame_needed = 0, uses_anonymous_args = 0
 4071              		@ link register save eliminated.
 588:src/xeq.c     **** }
 4072              		.loc 1 588 2 view .LVU1106
 4073 0000 FFF7FEBF 		b	error_message
 4074              	.LVL311:
 588:src/xeq.c     **** }
 4075              		.loc 1 588 2 is_stmt 0 view .LVU1107
 4076              		.cfi_endproc
 4077              	.LFE32:
 4079              		.section	.text.rarg_roundingmode,"ax",%progbits
 4080              		.align	1
 4081              		.p2align 2,,3
 4082              		.global	rarg_roundingmode
 4083              		.syntax unified
 4084              		.thumb
 4085              		.thumb_func
 4086              		.fpu fpv4-sp-d16
 4088              	rarg_roundingmode:
 4089              	.LVL312:
 4090              	.LFB35:
 623:src/xeq.c     **** 	UState.rounding_mode = arg;
 4091              		.loc 1 623 56 is_stmt 1 view -0
 4092              		.cfi_startproc
ARM GAS  /tmp/cc7LeJ71.s 			page 191


 4093              		@ args = 0, pretend = 0, frame = 0
 4094              		@ frame_needed = 0, uses_anonymous_args = 0
 4095              		@ link register save eliminated.
 624:src/xeq.c     **** }
 4096              		.loc 1 624 2 view .LVU1109
 624:src/xeq.c     **** }
 4097              		.loc 1 624 23 is_stmt 0 view .LVU1110
 4098 0000 044B     		ldr	r3, .L336
 4099 0002 1B68     		ldr	r3, [r3]
 4100 0004 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 4101 0008 60F30612 		bfi	r2, r0, #4, #3
 4102              	.LVL313:
 624:src/xeq.c     **** }
 4103              		.loc 1 624 23 view .LVU1111
 4104 000c 83F8EB27 		strb	r2, [r3, #2027]
 625:src/xeq.c     **** 
 4105              		.loc 1 625 1 view .LVU1112
 4106 0010 7047     		bx	lr
 4107              	.L337:
 4108 0012 00BF     		.align	2
 4109              	.L336:
 4110 0014 00000000 		.word	main_ram
 4111              		.cfi_endproc
 4112              	.LFE35:
 4114              		.section	.text.packed_from_number,"ax",%progbits
 4115              		.align	1
 4116              		.p2align 2,,3
 4117              		.global	packed_from_number
 4118              		.syntax unified
 4119              		.thumb
 4120              		.thumb_func
 4121              		.fpu fpv4-sp-d16
 4123              	packed_from_number:
 4124              	.LVL314:
 4125              	.LFB36:
 631:src/xeq.c     **** 	decContext ctx64;
 4126              		.loc 1 631 59 is_stmt 1 view -0
 4127              		.cfi_startproc
 4128              		@ args = 0, pretend = 0, frame = 24
 4129              		@ frame_needed = 0, uses_anonymous_args = 0
 632:src/xeq.c     **** 
 4130              		.loc 1 632 2 view .LVU1114
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4131              		.loc 1 634 2 view .LVU1115
 631:src/xeq.c     **** 	decContext ctx64;
 4132              		.loc 1 631 59 is_stmt 0 view .LVU1116
 4133 0000 70B5     		push	{r4, r5, r6, lr}
 4134              		.cfi_def_cfa_offset 16
 4135              		.cfi_offset 4, -16
 4136              		.cfi_offset 5, -12
 4137              		.cfi_offset 6, -8
 4138              		.cfi_offset 14, -4
 4139 0002 86B0     		sub	sp, sp, #24
 4140              		.cfi_def_cfa_offset 40
 631:src/xeq.c     **** 	decContext ctx64;
 4141              		.loc 1 631 59 view .LVU1117
 4142 0004 0446     		mov	r4, r0
ARM GAS  /tmp/cc7LeJ71.s 			page 192


 4143 0006 0D46     		mov	r5, r1
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4144              		.loc 1 634 2 view .LVU1118
 4145 0008 6846     		mov	r0, sp
 4146              	.LVL315:
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4147              		.loc 1 634 2 view .LVU1119
 4148 000a 4021     		movs	r1, #64
 4149              	.LVL316:
 634:src/xeq.c     **** 	ctx64.round = get_rounding_mode();
 4150              		.loc 1 634 2 view .LVU1120
 4151 000c FFF7FEFF 		bl	decContextDefault
 4152              	.LVL317:
 635:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4153              		.loc 1 635 2 is_stmt 1 view .LVU1121
 4154              	.LBB1608:
 4155              	.LBI1608:
 610:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4156              		.loc 1 610 22 view .LVU1122
 4157              	.LBB1609:
 611:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4158              		.loc 1 611 2 view .LVU1123
 616:src/xeq.c     **** }
 4159              		.loc 1 616 2 view .LVU1124
 616:src/xeq.c     **** }
 4160              		.loc 1 616 37 is_stmt 0 view .LVU1125
 4161 0010 084B     		ldr	r3, .L340
 616:src/xeq.c     **** }
 4162              		.loc 1 616 9 view .LVU1126
 4163 0012 094E     		ldr	r6, .L340+4
 616:src/xeq.c     **** }
 4164              		.loc 1 616 37 view .LVU1127
 4165 0014 1B68     		ldr	r3, [r3]
 4166 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4167 001a C3F30213 		ubfx	r3, r3, #4, #3
 4168              	.LBE1609:
 4169              	.LBE1608:
 636:src/xeq.c     **** }
 4170              		.loc 1 636 2 view .LVU1128
 4171 001e 2946     		mov	r1, r5
 635:src/xeq.c     **** 	decimal64FromNumber(r, x, &ctx64);
 4172              		.loc 1 635 14 view .LVU1129
 4173 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4174 0022 8DF80C30 		strb	r3, [sp, #12]
 636:src/xeq.c     **** }
 4175              		.loc 1 636 2 is_stmt 1 view .LVU1130
 4176 0026 2046     		mov	r0, r4
 4177 0028 6A46     		mov	r2, sp
 4178 002a FFF7FEFF 		bl	decimal64FromNumber
 4179              	.LVL318:
 637:src/xeq.c     **** 
 4180              		.loc 1 637 1 is_stmt 0 view .LVU1131
 4181 002e 06B0     		add	sp, sp, #24
 4182              		.cfi_def_cfa_offset 16
 4183              		@ sp needed
 4184 0030 70BD     		pop	{r4, r5, r6, pc}
 4185              	.LVL319:
ARM GAS  /tmp/cc7LeJ71.s 			page 193


 4186              	.L341:
 637:src/xeq.c     **** 
 4187              		.loc 1 637 1 view .LVU1132
 4188 0032 00BF     		.align	2
 4189              	.L340:
 4190 0034 00000000 		.word	main_ram
 4191 0038 00000000 		.word	.LANCHOR1
 4192              		.cfi_endproc
 4193              	.LFE36:
 4195              		.section	.text.packed128_from_number,"ax",%progbits
 4196              		.align	1
 4197              		.p2align 2,,3
 4198              		.global	packed128_from_number
 4199              		.syntax unified
 4200              		.thumb
 4201              		.thumb_func
 4202              		.fpu fpv4-sp-d16
 4204              	packed128_from_number:
 4205              	.LVL320:
 4206              	.LFB37:
 639:src/xeq.c     **** 	decContext ctx128;
 4207              		.loc 1 639 63 is_stmt 1 view -0
 4208              		.cfi_startproc
 4209              		@ args = 0, pretend = 0, frame = 24
 4210              		@ frame_needed = 0, uses_anonymous_args = 0
 640:src/xeq.c     **** 
 4211              		.loc 1 640 2 view .LVU1134
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4212              		.loc 1 642 2 view .LVU1135
 639:src/xeq.c     **** 	decContext ctx128;
 4213              		.loc 1 639 63 is_stmt 0 view .LVU1136
 4214 0000 70B5     		push	{r4, r5, r6, lr}
 4215              		.cfi_def_cfa_offset 16
 4216              		.cfi_offset 4, -16
 4217              		.cfi_offset 5, -12
 4218              		.cfi_offset 6, -8
 4219              		.cfi_offset 14, -4
 4220 0002 86B0     		sub	sp, sp, #24
 4221              		.cfi_def_cfa_offset 40
 639:src/xeq.c     **** 	decContext ctx128;
 4222              		.loc 1 639 63 view .LVU1137
 4223 0004 0446     		mov	r4, r0
 4224 0006 0D46     		mov	r5, r1
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4225              		.loc 1 642 2 view .LVU1138
 4226 0008 6846     		mov	r0, sp
 4227              	.LVL321:
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4228              		.loc 1 642 2 view .LVU1139
 4229 000a 8021     		movs	r1, #128
 4230              	.LVL322:
 642:src/xeq.c     **** 	ctx128.round = get_rounding_mode();
 4231              		.loc 1 642 2 view .LVU1140
 4232 000c FFF7FEFF 		bl	decContextDefault
 4233              	.LVL323:
 643:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4234              		.loc 1 643 2 is_stmt 1 view .LVU1141
ARM GAS  /tmp/cc7LeJ71.s 			page 194


 4235              	.LBB1610:
 4236              	.LBI1610:
 610:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 4237              		.loc 1 610 22 view .LVU1142
 4238              	.LBB1611:
 611:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 4239              		.loc 1 611 2 view .LVU1143
 616:src/xeq.c     **** }
 4240              		.loc 1 616 2 view .LVU1144
 616:src/xeq.c     **** }
 4241              		.loc 1 616 37 is_stmt 0 view .LVU1145
 4242 0010 084B     		ldr	r3, .L344
 616:src/xeq.c     **** }
 4243              		.loc 1 616 9 view .LVU1146
 4244 0012 094E     		ldr	r6, .L344+4
 616:src/xeq.c     **** }
 4245              		.loc 1 616 37 view .LVU1147
 4246 0014 1B68     		ldr	r3, [r3]
 4247 0016 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 4248 001a C3F30213 		ubfx	r3, r3, #4, #3
 4249              	.LBE1611:
 4250              	.LBE1610:
 644:src/xeq.c     **** }
 4251              		.loc 1 644 2 view .LVU1148
 4252 001e 2946     		mov	r1, r5
 643:src/xeq.c     **** 	decimal128FromNumber(r, x, &ctx128);
 4253              		.loc 1 643 15 view .LVU1149
 4254 0020 F35C     		ldrb	r3, [r6, r3]	@ zero_extendqisi2
 4255 0022 8DF80C30 		strb	r3, [sp, #12]
 644:src/xeq.c     **** }
 4256              		.loc 1 644 2 is_stmt 1 view .LVU1150
 4257 0026 2046     		mov	r0, r4
 4258 0028 6A46     		mov	r2, sp
 4259 002a FFF7FEFF 		bl	decimal128FromNumber
 4260              	.LVL324:
 645:src/xeq.c     **** 
 4261              		.loc 1 645 1 is_stmt 0 view .LVU1151
 4262 002e 06B0     		add	sp, sp, #24
 4263              		.cfi_def_cfa_offset 16
 4264              		@ sp needed
 4265 0030 70BD     		pop	{r4, r5, r6, pc}
 4266              	.LVL325:
 4267              	.L345:
 645:src/xeq.c     **** 
 4268              		.loc 1 645 1 view .LVU1152
 4269 0032 00BF     		.align	2
 4270              	.L344:
 4271 0034 00000000 		.word	main_ram
 4272 0038 00000000 		.word	.LANCHOR1
 4273              		.cfi_endproc
 4274              	.LFE37:
 4276              		.section	.text.check_special,"ax",%progbits
 4277              		.align	1
 4278              		.p2align 2,,3
 4279              		.syntax unified
 4280              		.thumb
 4281              		.thumb_func
ARM GAS  /tmp/cc7LeJ71.s 			page 195


 4282              		.fpu fpv4-sp-d16
 4284              	check_special:
 4285              	.LVL326:
 4286              	.LFB41:
 684:src/xeq.c     **** 	decNumber y;
 4287              		.loc 1 684 46 is_stmt 1 view -0
 4288              		.cfi_startproc
 4289              		@ args = 0, pretend = 0, frame = 64
 4290              		@ frame_needed = 0, uses_anonymous_args = 0
 685:src/xeq.c     **** 	decimal64 z;
 4291              		.loc 1 685 2 view .LVU1154
 686:src/xeq.c     **** 	decimal128 d;
 4292              		.loc 1 686 2 view .LVU1155
 687:src/xeq.c     **** 	if (is_dblmode()) {
 4293              		.loc 1 687 2 view .LVU1156
 688:src/xeq.c     **** 		packed128_from_number(&d, x);
 4294              		.loc 1 688 2 view .LVU1157
 4295              	.LBB1628:
 4296              	.LBI1628:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4297              		.loc 1 1118 5 view .LVU1158
 4298              	.LBB1629:
1119:src/xeq.c     **** }
 4299              		.loc 1 1119 2 view .LVU1159
1119:src/xeq.c     **** }
 4300              		.loc 1 1119 24 is_stmt 0 view .LVU1160
 4301 0000 274B     		ldr	r3, .L360
 4302 0002 1B68     		ldr	r3, [r3]
 4303              	.LBE1629:
 4304              	.LBE1628:
 684:src/xeq.c     **** 	decNumber y;
 4305              		.loc 1 684 46 view .LVU1161
 4306 0004 00B5     		push	{lr}
 4307              		.cfi_def_cfa_offset 4
 4308              		.cfi_offset 14, -4
 4309              	.LBB1631:
 4310              	.LBB1630:
1119:src/xeq.c     **** }
 4311              		.loc 1 1119 24 view .LVU1162
 4312 0006 B3F8E827 		ldrh	r2, [r3, #2024]
 4313 000a 44F20103 		movw	r3, #16385
 4314              	.LBE1630:
 4315              	.LBE1631:
 688:src/xeq.c     **** 		packed128_from_number(&d, x);
 4316              		.loc 1 688 5 view .LVU1163
 4317 000e 1340     		ands	r3, r3, r2
 4318 0010 B3F5804F 		cmp	r3, #16384
 684:src/xeq.c     **** 	decNumber y;
 4319              		.loc 1 684 46 view .LVU1164
 4320 0014 91B0     		sub	sp, sp, #68
 4321              		.cfi_def_cfa_offset 72
 684:src/xeq.c     **** 	decNumber y;
 4322              		.loc 1 684 46 view .LVU1165
 4323 0016 0146     		mov	r1, r0
 688:src/xeq.c     **** 		packed128_from_number(&d, x);
 4324              		.loc 1 688 5 view .LVU1166
 4325 0018 0FD0     		beq	.L358
ARM GAS  /tmp/cc7LeJ71.s 			page 196


 694:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4326              		.loc 1 694 3 is_stmt 1 view .LVU1167
 4327 001a 01A8     		add	r0, sp, #4
 4328              	.LVL327:
 694:src/xeq.c     **** 		decimal64ToNumber(&z, &y);
 4329              		.loc 1 694 3 is_stmt 0 view .LVU1168
 4330 001c FFF7FEFF 		bl	packed_from_number
 4331              	.LVL328:
 695:src/xeq.c     **** 	}
 4332              		.loc 1 695 3 is_stmt 1 view .LVU1169
 4333 0020 01A8     		add	r0, sp, #4
 4334 0022 07A9     		add	r1, sp, #28
 4335 0024 FFF7FEFF 		bl	decimal64ToNumber
 4336              	.LVL329:
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4337              		.loc 1 697 2 view .LVU1170
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4338              		.loc 1 697 5 is_stmt 0 view .LVU1171
 4339 0028 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4340 002c 13F0700F 		tst	r3, #112
 4341 0030 0FD1     		bne	.L349
 4342              	.L351:
 708:src/xeq.c     **** }
 4343              		.loc 1 708 9 view .LVU1172
 4344 0032 0020     		movs	r0, #0
 4345              	.L346:
 709:src/xeq.c     **** 
 4346              		.loc 1 709 1 view .LVU1173
 4347 0034 11B0     		add	sp, sp, #68
 4348              		.cfi_remember_state
 4349              		.cfi_def_cfa_offset 4
 4350              		@ sp needed
 4351 0036 5DF804FB 		ldr	pc, [sp], #4
 4352              	.LVL330:
 4353              	.L358:
 4354              		.cfi_restore_state
 689:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4355              		.loc 1 689 3 is_stmt 1 view .LVU1174
 4356 003a 03A8     		add	r0, sp, #12
 4357              	.LVL331:
 689:src/xeq.c     **** 		decimal128ToNumber(&d, &y);
 4358              		.loc 1 689 3 is_stmt 0 view .LVU1175
 4359 003c FFF7FEFF 		bl	packed128_from_number
 4360              	.LVL332:
 690:src/xeq.c     **** 	}
 4361              		.loc 1 690 3 is_stmt 1 view .LVU1176
 4362 0040 03A8     		add	r0, sp, #12
 4363 0042 07A9     		add	r1, sp, #28
 4364 0044 FFF7FEFF 		bl	decimal128ToNumber
 4365              	.LVL333:
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4366              		.loc 1 697 2 view .LVU1177
 697:src/xeq.c     **** 		if (! get_user_flag(NAN_FLAG)) {
 4367              		.loc 1 697 5 is_stmt 0 view .LVU1178
 4368 0048 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 4369 004c 13F0700F 		tst	r3, #112
 4370 0050 EFD0     		beq	.L351
ARM GAS  /tmp/cc7LeJ71.s 			page 197


 4371              	.L349:
 698:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4372              		.loc 1 698 3 is_stmt 1 view .LVU1179
 4373              	.LVL334:
 4374              	.LBB1632:
 4375              	.LBI1632:
3556:src/xeq.c     **** 	unsigned short mask;
 4376              		.loc 1 3556 5 view .LVU1180
 4377              	.LBB1633:
3557:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 4378              		.loc 1 3557 2 view .LVU1181
3558:src/xeq.c     **** 
 4379              		.loc 1 3558 2 view .LVU1182
3558:src/xeq.c     **** 
 4380              		.loc 1 3558 34 is_stmt 0 view .LVU1183
 4381 0052 0DF10201 		add	r1, sp, #2
 4382 0056 6B20     		movs	r0, #107
 4383 0058 FFF7FEFF 		bl	flag_word
 4384              	.LVL335:
3560:src/xeq.c     **** }
 4385              		.loc 1 3560 2 is_stmt 1 view .LVU1184
3560:src/xeq.c     **** }
 4386              		.loc 1 3560 24 is_stmt 0 view .LVU1185
 4387 005c BDF80230 		ldrh	r3, [sp, #2]
 4388 0060 0288     		ldrh	r2, [r0]
 4389              	.LBE1633:
 4390              	.LBE1632:
 698:src/xeq.c     **** 			if (decNumberIsNaN(&y))
 4391              		.loc 1 698 6 view .LVU1186
 4392 0062 1A42     		tst	r2, r3
 4393 0064 E5D1     		bne	.L351
 699:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4394              		.loc 1 699 4 is_stmt 1 view .LVU1187
 699:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4395              		.loc 1 699 8 is_stmt 0 view .LVU1188
 4396 0066 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 699:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 4397              		.loc 1 699 7 view .LVU1189
 4398 006a 13F0300F 		tst	r3, #48
 4399 006e 06D0     		beq	.L352
 700:src/xeq.c     **** 			else if (decNumberIsNegative(&y))
 4400              		.loc 1 700 5 is_stmt 1 view .LVU1190
 4401              	.LVL336:
 4402              	.LBB1634:
 4403              	.LBI1634:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4404              		.loc 1 546 5 view .LVU1191
 4405              	.LBB1635:
 547:src/xeq.c     **** 		Error = e;
 4406              		.loc 1 547 2 view .LVU1192
 547:src/xeq.c     **** 		Error = e;
 4407              		.loc 1 547 12 is_stmt 0 view .LVU1193
 4408 0070 0C4B     		ldr	r3, .L360+4
 547:src/xeq.c     **** 		Error = e;
 4409              		.loc 1 547 5 view .LVU1194
 4410 0072 1A68     		ldr	r2, [r3]
 4411              	.LBB1636:
ARM GAS  /tmp/cc7LeJ71.s 			page 198


 4412              	.LBB1637:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4413              		.loc 1 548 9 view .LVU1195
 4414 0074 0120     		movs	r0, #1
 4415              	.LBE1637:
 4416              	.LBE1636:
 547:src/xeq.c     **** 		Error = e;
 4417              		.loc 1 547 5 view .LVU1196
 4418 0076 002A     		cmp	r2, #0
 4419 0078 DCD1     		bne	.L346
 4420              	.LVL337:
 4421              	.LBB1639:
 4422              	.LBI1636:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4423              		.loc 1 546 5 is_stmt 1 view .LVU1197
 4424              	.LBB1638:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4425              		.loc 1 548 3 view .LVU1198
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4426              		.loc 1 548 9 is_stmt 0 view .LVU1199
 4427 007a 1860     		str	r0, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4428              		.loc 1 549 3 is_stmt 1 view .LVU1200
 4429 007c DAE7     		b	.L346
 4430              	.LVL338:
 4431              	.L352:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4432              		.loc 1 549 3 is_stmt 0 view .LVU1201
 4433              	.LBE1638:
 4434              	.LBE1639:
 4435              	.LBE1635:
 4436              	.LBE1634:
 701:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4437              		.loc 1 701 9 is_stmt 1 view .LVU1202
 701:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4438              		.loc 1 701 12 is_stmt 0 view .LVU1203
 4439 007e 13F0800F 		tst	r3, #128
 4440              	.LBB1640:
 4441              	.LBB1641:
 547:src/xeq.c     **** 		Error = e;
 4442              		.loc 1 547 12 view .LVU1204
 4443 0082 084B     		ldr	r3, .L360+4
 547:src/xeq.c     **** 		Error = e;
 4444              		.loc 1 547 5 view .LVU1205
 4445 0084 1A68     		ldr	r2, [r3]
 4446              	.LBE1641:
 4447              	.LBE1640:
 701:src/xeq.c     **** 				report_err(ERR_MINFINITY);
 4448              		.loc 1 701 12 view .LVU1206
 4449 0086 04D1     		bne	.L359
 704:src/xeq.c     **** 			return 1;
 4450              		.loc 1 704 5 is_stmt 1 view .LVU1207
 4451              	.LVL339:
 4452              	.LBB1645:
 4453              	.LBI1645:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4454              		.loc 1 546 5 view .LVU1208
ARM GAS  /tmp/cc7LeJ71.s 			page 199


 4455              	.LBB1646:
 547:src/xeq.c     **** 		Error = e;
 4456              		.loc 1 547 2 view .LVU1209
 547:src/xeq.c     **** 		Error = e;
 4457              		.loc 1 547 5 is_stmt 0 view .LVU1210
 4458 0088 42B9     		cbnz	r2, .L356
 4459              	.LVL340:
 4460              	.LBB1647:
 4461              	.LBI1647:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4462              		.loc 1 546 5 is_stmt 1 view .LVU1211
 4463              	.LBB1648:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4464              		.loc 1 548 3 view .LVU1212
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4465              		.loc 1 548 9 is_stmt 0 view .LVU1213
 4466 008a 0422     		movs	r2, #4
 4467 008c 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4468              		.loc 1 549 3 is_stmt 1 view .LVU1214
 4469              	.LBE1648:
 4470              	.LBE1647:
 4471              	.LBE1646:
 4472              	.LBE1645:
 705:src/xeq.c     **** 		}
 4473              		.loc 1 705 11 is_stmt 0 view .LVU1215
 4474 008e 0120     		movs	r0, #1
 4475 0090 D0E7     		b	.L346
 4476              	.LVL341:
 4477              	.L359:
 702:src/xeq.c     **** 			else
 4478              		.loc 1 702 5 is_stmt 1 view .LVU1216
 4479              	.LBB1649:
 4480              	.LBI1640:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4481              		.loc 1 546 5 view .LVU1217
 4482              	.LBB1644:
 547:src/xeq.c     **** 		Error = e;
 4483              		.loc 1 547 2 view .LVU1218
 547:src/xeq.c     **** 		Error = e;
 4484              		.loc 1 547 5 is_stmt 0 view .LVU1219
 4485 0092 1AB9     		cbnz	r2, .L356
 4486              	.LVL342:
 4487              	.LBB1642:
 4488              	.LBI1642:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 4489              		.loc 1 546 5 is_stmt 1 view .LVU1220
 4490              	.LBB1643:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4491              		.loc 1 548 3 view .LVU1221
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 4492              		.loc 1 548 9 is_stmt 0 view .LVU1222
 4493 0094 0522     		movs	r2, #5
 4494 0096 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 4495              		.loc 1 549 3 is_stmt 1 view .LVU1223
 4496              	.LBE1643:
ARM GAS  /tmp/cc7LeJ71.s 			page 200


 4497              	.LBE1642:
 4498              	.LBE1644:
 4499              	.LBE1649:
 705:src/xeq.c     **** 		}
 4500              		.loc 1 705 11 is_stmt 0 view .LVU1224
 4501 0098 0120     		movs	r0, #1
 4502 009a CBE7     		b	.L346
 4503              	.LVL343:
 4504              	.L356:
 705:src/xeq.c     **** 		}
 4505              		.loc 1 705 11 view .LVU1225
 4506 009c 0120     		movs	r0, #1
 4507 009e C9E7     		b	.L346
 4508              	.L361:
 4509              		.align	2
 4510              	.L360:
 4511 00a0 00000000 		.word	main_ram
 4512 00a4 00000000 		.word	Error
 4513              		.cfi_endproc
 4514              	.LFE41:
 4516              		.section	.text.packed_from_packed128,"ax",%progbits
 4517              		.align	1
 4518              		.p2align 2,,3
 4519              		.global	packed_from_packed128
 4520              		.syntax unified
 4521              		.thumb
 4522              		.thumb_func
 4523              		.fpu fpv4-sp-d16
 4525              	packed_from_packed128:
 4526              	.LVL344:
 4527              	.LFB38:
 648:src/xeq.c     **** 	decNumber temp;
 4528              		.loc 1 648 63 is_stmt 1 view -0
 4529              		.cfi_startproc
 4530              		@ args = 0, pretend = 0, frame = 40
 4531              		@ frame_needed = 0, uses_anonymous_args = 0
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 4532              		.loc 1 649 2 view .LVU1227
 650:src/xeq.c     **** }
 4533              		.loc 1 650 2 view .LVU1228
 648:src/xeq.c     **** 	decNumber temp;
 4534              		.loc 1 648 63 is_stmt 0 view .LVU1229
 4535 0000 10B5     		push	{r4, lr}
 4536              		.cfi_def_cfa_offset 8
 4537              		.cfi_offset 4, -8
 4538              		.cfi_offset 14, -4
 4539 0002 8AB0     		sub	sp, sp, #40
 4540              		.cfi_def_cfa_offset 48
 648:src/xeq.c     **** 	decNumber temp;
 4541              		.loc 1 648 63 view .LVU1230
 4542 0004 0446     		mov	r4, r0
 650:src/xeq.c     **** }
 4543              		.loc 1 650 24 view .LVU1231
 4544 0006 0846     		mov	r0, r1
 4545              	.LVL345:
 650:src/xeq.c     **** }
 4546              		.loc 1 650 24 view .LVU1232
ARM GAS  /tmp/cc7LeJ71.s 			page 201


 4547 0008 01A9     		add	r1, sp, #4
 4548              	.LVL346:
 650:src/xeq.c     **** }
 4549              		.loc 1 650 24 view .LVU1233
 4550 000a FFF7FEFF 		bl	decimal128ToNumber
 4551              	.LVL347:
 650:src/xeq.c     **** }
 4552              		.loc 1 650 24 view .LVU1234
 4553 000e 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 4554              		.loc 1 650 2 view .LVU1235
 4555 0010 2046     		mov	r0, r4
 4556 0012 FFF7FEFF 		bl	packed_from_number
 4557              	.LVL348:
 651:src/xeq.c     **** 
 4558              		.loc 1 651 1 view .LVU1236
 4559 0016 0AB0     		add	sp, sp, #40
 4560              		.cfi_def_cfa_offset 8
 4561              		@ sp needed
 4562 0018 10BD     		pop	{r4, pc}
 651:src/xeq.c     **** 
 4563              		.loc 1 651 1 view .LVU1237
 4564              		.cfi_endproc
 4565              	.LFE38:
 4567 001a 00BF     		.section	.text.packed128_from_packed,"ax",%progbits
 4568              		.align	1
 4569              		.p2align 2,,3
 4570              		.global	packed128_from_packed
 4571              		.syntax unified
 4572              		.thumb
 4573              		.thumb_func
 4574              		.fpu fpv4-sp-d16
 4576              	packed128_from_packed:
 4577              	.LVL349:
 4578              	.LFB39:
 654:src/xeq.c     **** 	decNumber temp;
 4579              		.loc 1 654 63 is_stmt 1 view -0
 4580              		.cfi_startproc
 4581              		@ args = 0, pretend = 0, frame = 40
 4582              		@ frame_needed = 0, uses_anonymous_args = 0
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 4583              		.loc 1 655 2 view .LVU1239
 656:src/xeq.c     **** }
 4584              		.loc 1 656 2 view .LVU1240
 654:src/xeq.c     **** 	decNumber temp;
 4585              		.loc 1 654 63 is_stmt 0 view .LVU1241
 4586 0000 10B5     		push	{r4, lr}
 4587              		.cfi_def_cfa_offset 8
 4588              		.cfi_offset 4, -8
 4589              		.cfi_offset 14, -4
 4590 0002 8AB0     		sub	sp, sp, #40
 4591              		.cfi_def_cfa_offset 48
 654:src/xeq.c     **** 	decNumber temp;
 4592              		.loc 1 654 63 view .LVU1242
 4593 0004 0446     		mov	r4, r0
 656:src/xeq.c     **** }
 4594              		.loc 1 656 27 view .LVU1243
ARM GAS  /tmp/cc7LeJ71.s 			page 202


 4595 0006 0846     		mov	r0, r1
 4596              	.LVL350:
 656:src/xeq.c     **** }
 4597              		.loc 1 656 27 view .LVU1244
 4598 0008 01A9     		add	r1, sp, #4
 4599              	.LVL351:
 656:src/xeq.c     **** }
 4600              		.loc 1 656 27 view .LVU1245
 4601 000a FFF7FEFF 		bl	decimal64ToNumber
 4602              	.LVL352:
 656:src/xeq.c     **** }
 4603              		.loc 1 656 27 view .LVU1246
 4604 000e 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 4605              		.loc 1 656 2 view .LVU1247
 4606 0010 2046     		mov	r0, r4
 4607 0012 FFF7FEFF 		bl	packed128_from_number
 4608              	.LVL353:
 657:src/xeq.c     **** 
 4609              		.loc 1 657 1 view .LVU1248
 4610 0016 0AB0     		add	sp, sp, #40
 4611              		.cfi_def_cfa_offset 8
 4612              		@ sp needed
 4613 0018 10BD     		pop	{r4, pc}
 657:src/xeq.c     **** 
 4614              		.loc 1 657 1 view .LVU1249
 4615              		.cfi_endproc
 4616              	.LFE39:
 4618 001a 00BF     		.section	.text.stack_size,"ax",%progbits
 4619              		.align	1
 4620              		.p2align 2,,3
 4621              		.global	stack_size
 4622              		.syntax unified
 4623              		.thumb
 4624              		.thumb_func
 4625              		.fpu fpv4-sp-d16
 4627              	stack_size:
 4628              	.LFB42:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 4629              		.loc 1 712 22 is_stmt 1 view -0
 4630              		.cfi_startproc
 4631              		@ args = 0, pretend = 0, frame = 0
 4632              		@ frame_needed = 0, uses_anonymous_args = 0
 4633              		@ link register save eliminated.
 713:src/xeq.c     **** 		return 4;
 4634              		.loc 1 713 2 view .LVU1251
 713:src/xeq.c     **** 		return 4;
 4635              		.loc 1 713 8 is_stmt 0 view .LVU1252
 4636 0000 0B4B     		ldr	r3, .L372
 4637 0002 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 4638              		.loc 1 713 6 view .LVU1253
 4639 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 4640              		.loc 1 713 5 view .LVU1254
 4641 0008 1207     		lsls	r2, r2, #28
 4642 000a 0ED5     		bpl	.L368
ARM GAS  /tmp/cc7LeJ71.s 			page 203


 4643              	.LBB1650:
 4644              	.LBI1650:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 4645              		.loc 1 185 5 is_stmt 1 view .LVU1255
 4646              	.LBB1651:
 186:src/xeq.c     **** }
 4647              		.loc 1 186 2 view .LVU1256
 186:src/xeq.c     **** }
 4648              		.loc 1 186 9 is_stmt 0 view .LVU1257
 4649 000c B3F8E037 		ldrh	r3, [r3, #2016]
 4650              	.LBE1651:
 4651              	.LBE1650:
 713:src/xeq.c     **** 		return 4;
 4652              		.loc 1 713 27 view .LVU1258
 4653 0010 9B0B     		lsrs	r3, r3, #14
 4654 0012 032B     		cmp	r3, #3
 4655 0014 01D0     		beq	.L371
 715:src/xeq.c     **** }
 4656              		.loc 1 715 9 view .LVU1259
 4657 0016 0820     		movs	r0, #8
 716:src/xeq.c     **** 
 4658              		.loc 1 716 1 view .LVU1260
 4659 0018 7047     		bx	lr
 4660              	.L371:
 713:src/xeq.c     **** 		return 4;
 4661              		.loc 1 713 44 discriminator 2 view .LVU1261
 4662 001a 064B     		ldr	r3, .L372+4
 713:src/xeq.c     **** 		return 4;
 4663              		.loc 1 713 41 discriminator 2 view .LVU1262
 4664 001c 93F90130 		ldrsb	r3, [r3, #1]
 4665 0020 002B     		cmp	r3, #0
 714:src/xeq.c     **** 	return 8;
 4666              		.loc 1 714 10 discriminator 2 view .LVU1263
 4667 0022 B4BF     		ite	lt
 4668 0024 0820     		movlt	r0, #8
 4669 0026 0420     		movge	r0, #4
 4670 0028 7047     		bx	lr
 4671              	.L368:
 714:src/xeq.c     **** 	return 8;
 4672              		.loc 1 714 10 view .LVU1264
 4673 002a 0420     		movs	r0, #4
 4674 002c 7047     		bx	lr
 4675              	.L373:
 4676 002e 00BF     		.align	2
 4677              	.L372:
 4678 0030 00000000 		.word	main_ram
 4679 0034 00000000 		.word	XromParams
 4680              		.cfi_endproc
 4681              	.LFE42:
 4683              		.section	.text.copyreg,"ax",%progbits
 4684              		.align	1
 4685              		.p2align 2,,3
 4686              		.global	copyreg
 4687              		.syntax unified
 4688              		.thumb
 4689              		.thumb_func
 4690              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc7LeJ71.s 			page 204


 4692              	copyreg:
 4693              	.LVL354:
 4694              	.LFB45:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 4695              		.loc 1 726 46 is_stmt 1 view -0
 4696              		.cfi_startproc
 4697              		@ args = 0, pretend = 0, frame = 0
 4698              		@ frame_needed = 0, uses_anonymous_args = 0
 4699              		@ link register save eliminated.
 727:src/xeq.c     **** }
 4700              		.loc 1 727 2 view .LVU1266
 4701              	.LBB1652:
 4702              	.LBI1652:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4703              		.loc 1 1118 5 view .LVU1267
 4704              	.LBB1653:
1119:src/xeq.c     **** }
 4705              		.loc 1 1119 2 view .LVU1268
1119:src/xeq.c     **** }
 4706              		.loc 1 1119 24 is_stmt 0 view .LVU1269
 4707 0000 064B     		ldr	r3, .L377
 4708 0002 1B68     		ldr	r3, [r3]
 4709 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 4710 0008 44F20103 		movw	r3, #16385
 4711              	.LBE1653:
 4712              	.LBE1652:
 727:src/xeq.c     **** }
 4713              		.loc 1 727 2 view .LVU1270
 4714 000c 1340     		ands	r3, r3, r2
 4715 000e B3F5804F 		cmp	r3, #16384
 4716 0012 0CBF     		ite	eq
 4717 0014 1022     		moveq	r2, #16
 4718 0016 0822     		movne	r2, #8
 4719 0018 FFF7FEBF 		b	xcopy
 4720              	.LVL355:
 4721              	.L378:
 727:src/xeq.c     **** }
 4722              		.loc 1 727 2 view .LVU1271
 4723              		.align	2
 4724              	.L377:
 4725 001c 00000000 		.word	main_ram
 4726              		.cfi_endproc
 4727              	.LFE45:
 4729              		.section	.text.set_lift,"ax",%progbits
 4730              		.align	1
 4731              		.p2align 2,,3
 4732              		.global	set_lift
 4733              		.syntax unified
 4734              		.thumb
 4735              		.thumb_func
 4736              		.fpu fpv4-sp-d16
 4738              	set_lift:
 4739              	.LFB51:
 767:src/xeq.c     ****     State2.state_lift = 1;
 4740              		.loc 1 767 21 is_stmt 1 view -0
 4741              		.cfi_startproc
 4742              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc7LeJ71.s 			page 205


 4743              		@ frame_needed = 0, uses_anonymous_args = 0
 4744              		@ link register save eliminated.
 768:src/xeq.c     **** }
 4745              		.loc 1 768 5 view .LVU1273
 768:src/xeq.c     **** }
 4746              		.loc 1 768 23 is_stmt 0 view .LVU1274
 4747 0000 024A     		ldr	r2, .L380
 4748 0002 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 4749 0004 43F04003 		orr	r3, r3, #64
 4750 0008 D375     		strb	r3, [r2, #23]
 769:src/xeq.c     **** 
 4751              		.loc 1 769 1 view .LVU1275
 4752 000a 7047     		bx	lr
 4753              	.L381:
 4754              		.align	2
 4755              	.L380:
 4756 000c 00000000 		.word	StateWhileOn
 4757              		.cfi_endproc
 4758              	.LFE51:
 4760              		.section	.text.entry_rpn_on_off,"ax",%progbits
 4761              		.align	1
 4762              		.p2align 2,,3
 4763              		.global	entry_rpn_on_off
 4764              		.syntax unified
 4765              		.thumb
 4766              		.thumb_func
 4767              		.fpu fpv4-sp-d16
 4769              	entry_rpn_on_off:
 4770              	.LVL356:
 4771              	.LFB77:
 998:src/xeq.c     ****   switch (op) {
 4772              		.loc 1 998 38 is_stmt 1 view -0
 4773              		.cfi_startproc
 4774              		@ args = 0, pretend = 0, frame = 0
 4775              		@ frame_needed = 0, uses_anonymous_args = 0
 4776              		@ link register save eliminated.
 999:src/xeq.c     ****   case OP_ENTRY_ON:
 4777              		.loc 1 999 3 view .LVU1277
 4778 0000 D628     		cmp	r0, #214
 4779 0002 0BD0     		beq	.L383
 4780 0004 D728     		cmp	r0, #215
 4781 0006 08D1     		bne	.L386
1004:src/xeq.c     ****     return;
 4782              		.loc 1 1004 5 view .LVU1278
 4783 0008 094B     		ldr	r3, .L387
 4784 000a 1B68     		ldr	r3, [r3]
 4785 000c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 4786 0010 6FF3C712 		bfc	r2, #7, #1
 4787 0014 83F8DD27 		strb	r2, [r3, #2013]
1005:src/xeq.c     ****   default:;
 4788              		.loc 1 1005 5 view .LVU1279
1006:src/xeq.c     ****   }
 4789              		.loc 1 1006 11 view .LVU1280
1008:src/xeq.c     **** #endif
 4790              		.loc 1 1008 1 is_stmt 0 view .LVU1281
 4791 0018 7047     		bx	lr
 4792              	.L386:
ARM GAS  /tmp/cc7LeJ71.s 			page 206


 4793 001a 7047     		bx	lr
 4794              	.L383:
1001:src/xeq.c     ****     return;
 4795              		.loc 1 1001 5 is_stmt 1 view .LVU1282
 4796 001c 044B     		ldr	r3, .L387
 4797 001e 1A68     		ldr	r2, [r3]
 4798 0020 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 4799 0024 43F08003 		orr	r3, r3, #128
 4800 0028 82F8DD37 		strb	r3, [r2, #2013]
1002:src/xeq.c     ****   case OP_ENTRY_OFF:
 4801              		.loc 1 1002 5 view .LVU1283
 4802 002c 7047     		bx	lr
 4803              	.L388:
 4804 002e 00BF     		.align	2
 4805              	.L387:
 4806 0030 00000000 		.word	main_ram
 4807              		.cfi_endproc
 4808              	.LFE77:
 4810              		.section	.text.is_dblmode,"ax",%progbits
 4811              		.align	1
 4812              		.p2align 2,,3
 4813              		.global	is_dblmode
 4814              		.syntax unified
 4815              		.thumb
 4816              		.thumb_func
 4817              		.fpu fpv4-sp-d16
 4819              	is_dblmode:
 4820              	.LFB82:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4821              		.loc 1 1118 22 view -0
 4822              		.cfi_startproc
 4823              		@ args = 0, pretend = 0, frame = 0
 4824              		@ frame_needed = 0, uses_anonymous_args = 0
 4825              		@ link register save eliminated.
1119:src/xeq.c     **** }
 4826              		.loc 1 1119 2 view .LVU1285
1119:src/xeq.c     **** }
 4827              		.loc 1 1119 24 is_stmt 0 view .LVU1286
 4828 0000 064B     		ldr	r3, .L390
 4829 0002 1B68     		ldr	r3, [r3]
 4830 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 4831 0008 44F20100 		movw	r0, #16385
 4832 000c 1840     		ands	r0, r0, r3
1120:src/xeq.c     **** 
 4833              		.loc 1 1120 1 view .LVU1287
 4834 000e A0F58040 		sub	r0, r0, #16384
 4835 0012 B0FA80F0 		clz	r0, r0
 4836 0016 4009     		lsrs	r0, r0, #5
 4837 0018 7047     		bx	lr
 4838              	.L391:
 4839 001a 00BF     		.align	2
 4840              	.L390:
 4841 001c 00000000 		.word	main_ram
 4842              		.cfi_endproc
 4843              	.LFE82:
 4845              		.section	.text.is_usrdblmode,"ax",%progbits
 4846              		.align	1
ARM GAS  /tmp/cc7LeJ71.s 			page 207


 4847              		.p2align 2,,3
 4848              		.global	is_usrdblmode
 4849              		.syntax unified
 4850              		.thumb
 4851              		.thumb_func
 4852              		.fpu fpv4-sp-d16
 4854              	is_usrdblmode:
 4855              	.LFB83:
1122:src/xeq.c     **** 	if (XromFlags.xIN)
 4856              		.loc 1 1122 25 is_stmt 1 view -0
 4857              		.cfi_startproc
 4858              		@ args = 0, pretend = 0, frame = 0
 4859              		@ frame_needed = 0, uses_anonymous_args = 0
 4860              		@ link register save eliminated.
1123:src/xeq.c     **** 		return XromFlags.mode_double;
 4861              		.loc 1 1123 2 view .LVU1289
1123:src/xeq.c     **** 		return XromFlags.mode_double;
 4862              		.loc 1 1123 6 is_stmt 0 view .LVU1290
 4863 0000 0A4B     		ldr	r3, .L396
1123:src/xeq.c     **** 		return XromFlags.mode_double;
 4864              		.loc 1 1123 5 view .LVU1291
 4865 0002 93F90120 		ldrsb	r2, [r3, #1]
 4866 0006 002A     		cmp	r2, #0
 4867 0008 0CDB     		blt	.L395
1125:src/xeq.c     **** }
 4868              		.loc 1 1125 2 is_stmt 1 view .LVU1292
 4869              	.LBB1654:
 4870              	.LBI1654:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 4871              		.loc 1 1118 5 view .LVU1293
 4872              	.LBB1655:
1119:src/xeq.c     **** }
 4873              		.loc 1 1119 2 view .LVU1294
1119:src/xeq.c     **** }
 4874              		.loc 1 1119 24 is_stmt 0 view .LVU1295
 4875 000a 094B     		ldr	r3, .L396+4
 4876 000c 1B68     		ldr	r3, [r3]
 4877 000e B3F8E837 		ldrh	r3, [r3, #2024]
 4878 0012 44F20100 		movw	r0, #16385
 4879 0016 1840     		ands	r0, r0, r3
 4880 0018 A0F58040 		sub	r0, r0, #16384
 4881 001c B0FA80F0 		clz	r0, r0
 4882 0020 4009     		lsrs	r0, r0, #5
 4883              	.LBE1655:
 4884              	.LBE1654:
1126:src/xeq.c     **** 
 4885              		.loc 1 1126 1 view .LVU1296
 4886 0022 7047     		bx	lr
 4887              	.L395:
1124:src/xeq.c     **** 	return is_dblmode();
 4888              		.loc 1 1124 3 is_stmt 1 view .LVU1297
1124:src/xeq.c     **** 	return is_dblmode();
 4889              		.loc 1 1124 19 is_stmt 0 view .LVU1298
 4890 0024 5878     		ldrb	r0, [r3, #1]	@ zero_extendqisi2
 4891 0026 C0F3C000 		ubfx	r0, r0, #3, #1
 4892 002a 7047     		bx	lr
 4893              	.L397:
ARM GAS  /tmp/cc7LeJ71.s 			page 208


 4894              		.align	2
 4895              	.L396:
 4896 002c 00000000 		.word	XromParams
 4897 0030 00000000 		.word	main_ram
 4898              		.cfi_endproc
 4899              	.LFE83:
 4901              		.section	.text.s_to_i,"ax",%progbits
 4902              		.align	1
 4903              		.p2align 2,,3
 4904              		.global	s_to_i
 4905              		.syntax unified
 4906              		.thumb
 4907              		.thumb_func
 4908              		.fpu fpv4-sp-d16
 4910              	s_to_i:
 4911              	.LVL357:
 4912              	.LFB84:
1130:src/xeq.c     **** 	int x = 0;
 4913              		.loc 1 1130 27 is_stmt 1 view -0
 4914              		.cfi_startproc
 4915              		@ args = 0, pretend = 0, frame = 0
 4916              		@ frame_needed = 0, uses_anonymous_args = 0
 4917              		@ link register save eliminated.
1131:src/xeq.c     **** 	int neg;
 4918              		.loc 1 1131 2 view .LVU1300
1132:src/xeq.c     **** 
 4919              		.loc 1 1132 2 view .LVU1301
1134:src/xeq.c     **** 		s++;
 4920              		.loc 1 1134 2 view .LVU1302
1130:src/xeq.c     **** 	int x = 0;
 4921              		.loc 1 1130 27 is_stmt 0 view .LVU1303
 4922 0000 10B4     		push	{r4}
 4923              		.cfi_def_cfa_offset 4
 4924              		.cfi_offset 4, -4
1134:src/xeq.c     **** 		s++;
 4925              		.loc 1 1134 6 view .LVU1304
 4926 0002 0178     		ldrb	r1, [r0]	@ zero_extendqisi2
1134:src/xeq.c     **** 		s++;
 4927              		.loc 1 1134 5 view .LVU1305
 4928 0004 2D29     		cmp	r1, #45
 4929 0006 26D0     		beq	.L414
1138:src/xeq.c     **** 			s++;
 4930              		.loc 1 1138 3 is_stmt 1 view .LVU1306
1138:src/xeq.c     **** 			s++;
 4931              		.loc 1 1138 6 is_stmt 0 view .LVU1307
 4932 0008 2B29     		cmp	r1, #43
 4933 000a 18D0     		beq	.L402
 4934              	.LVL358:
1143:src/xeq.c     **** 		const char c = *s++;
 4935              		.loc 1 1143 2 is_stmt 1 view .LVU1308
 4936              	.LBB1656:
1144:src/xeq.c     **** 
 4937              		.loc 1 1144 3 view .LVU1309
1146:src/xeq.c     **** 			break;
 4938              		.loc 1 1146 15 is_stmt 0 view .LVU1310
 4939 000c A1F13003 		sub	r3, r1, #48
1146:src/xeq.c     **** 			break;
ARM GAS  /tmp/cc7LeJ71.s 			page 209


 4940              		.loc 1 1146 6 view .LVU1311
 4941 0010 D9B2     		uxtb	r1, r3
 4942 0012 0929     		cmp	r1, #9
1144:src/xeq.c     **** 
 4943              		.loc 1 1144 20 view .LVU1312
 4944 0014 00F10102 		add	r2, r0, #1
 4945              	.LVL359:
1146:src/xeq.c     **** 			break;
 4946              		.loc 1 1146 3 is_stmt 1 view .LVU1313
1146:src/xeq.c     **** 			break;
 4947              		.loc 1 1146 6 is_stmt 0 view .LVU1314
 4948 0018 19D8     		bhi	.L407
 4949              	.LVL360:
 4950              	.L413:
1146:src/xeq.c     **** 			break;
 4951              		.loc 1 1146 6 view .LVU1315
 4952              	.LBE1656:
1140:src/xeq.c     **** 	}
 4953              		.loc 1 1140 7 view .LVU1316
 4954 001a 0024     		movs	r4, #0
 4955              	.LVL361:
 4956              	.L401:
1140:src/xeq.c     **** 	}
 4957              		.loc 1 1140 7 view .LVU1317
 4958 001c 0020     		movs	r0, #0
 4959              	.LVL362:
 4960              	.L404:
 4961              	.LBB1657:
1148:src/xeq.c     **** 	}
 4962              		.loc 1 1148 3 is_stmt 1 view .LVU1318
1144:src/xeq.c     **** 
 4963              		.loc 1 1144 14 is_stmt 0 view .LVU1319
 4964 001e 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 4965              	.LVL363:
1148:src/xeq.c     **** 	}
 4966              		.loc 1 1148 10 view .LVU1320
 4967 0022 00EB8000 		add	r0, r0, r0, lsl #2
 4968              	.LVL364:
1148:src/xeq.c     **** 	}
 4969              		.loc 1 1148 5 view .LVU1321
 4970 0026 03EB4000 		add	r0, r3, r0, lsl #1
 4971              	.LVL365:
1148:src/xeq.c     **** 	}
 4972              		.loc 1 1148 5 view .LVU1322
 4973              	.LBE1657:
1143:src/xeq.c     **** 		const char c = *s++;
 4974              		.loc 1 1143 8 is_stmt 1 view .LVU1323
1143:src/xeq.c     **** 		const char c = *s++;
 4975              		.loc 1 1143 2 view .LVU1324
 4976              	.LBB1658:
1144:src/xeq.c     **** 
 4977              		.loc 1 1144 3 view .LVU1325
1146:src/xeq.c     **** 			break;
 4978              		.loc 1 1146 3 view .LVU1326
1146:src/xeq.c     **** 			break;
 4979              		.loc 1 1146 15 is_stmt 0 view .LVU1327
 4980 002a A1F13003 		sub	r3, r1, #48
ARM GAS  /tmp/cc7LeJ71.s 			page 210


1146:src/xeq.c     **** 			break;
 4981              		.loc 1 1146 6 view .LVU1328
 4982 002e D9B2     		uxtb	r1, r3
 4983 0030 0929     		cmp	r1, #9
 4984 0032 F4D9     		bls	.L404
 4985              	.LBE1658:
1150:src/xeq.c     **** 		return -x;
 4986              		.loc 1 1150 2 is_stmt 1 view .LVU1329
1150:src/xeq.c     **** 		return -x;
 4987              		.loc 1 1150 5 is_stmt 0 view .LVU1330
 4988 0034 04B1     		cbz	r4, .L398
 4989 0036 4042     		rsbs	r0, r0, #0
 4990              	.LVL366:
 4991              	.L398:
1153:src/xeq.c     **** 
 4992              		.loc 1 1153 1 view .LVU1331
 4993 0038 5DF8044B 		ldr	r4, [sp], #4
 4994              		.cfi_remember_state
 4995              		.cfi_restore 4
 4996              		.cfi_def_cfa_offset 0
 4997 003c 7047     		bx	lr
 4998              	.LVL367:
 4999              	.L402:
 5000              		.cfi_restore_state
1139:src/xeq.c     **** 		neg = 0;
 5001              		.loc 1 1139 4 is_stmt 1 view .LVU1332
1143:src/xeq.c     **** 		const char c = *s++;
 5002              		.loc 1 1143 2 view .LVU1333
 5003              	.LBB1659:
1144:src/xeq.c     **** 
 5004              		.loc 1 1144 3 view .LVU1334
1144:src/xeq.c     **** 
 5005              		.loc 1 1144 14 is_stmt 0 view .LVU1335
 5006 003e 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1146:src/xeq.c     **** 			break;
 5007              		.loc 1 1146 15 view .LVU1336
 5008 0040 A1F13003 		sub	r3, r1, #48
1146:src/xeq.c     **** 			break;
 5009              		.loc 1 1146 6 view .LVU1337
 5010 0044 D9B2     		uxtb	r1, r3
 5011 0046 0929     		cmp	r1, #9
1144:src/xeq.c     **** 
 5012              		.loc 1 1144 20 view .LVU1338
 5013 0048 00F10202 		add	r2, r0, #2
 5014              	.LVL368:
1146:src/xeq.c     **** 			break;
 5015              		.loc 1 1146 3 is_stmt 1 view .LVU1339
1146:src/xeq.c     **** 			break;
 5016              		.loc 1 1146 6 is_stmt 0 view .LVU1340
 5017 004c E5D9     		bls	.L413
 5018              	.LVL369:
 5019              	.L407:
1146:src/xeq.c     **** 			break;
 5020              		.loc 1 1146 6 view .LVU1341
 5021 004e 0020     		movs	r0, #0
 5022              	.LBE1659:
1153:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 211


 5023              		.loc 1 1153 1 view .LVU1342
 5024 0050 5DF8044B 		ldr	r4, [sp], #4
 5025              		.cfi_remember_state
 5026              		.cfi_restore 4
 5027              		.cfi_def_cfa_offset 0
 5028 0054 7047     		bx	lr
 5029              	.LVL370:
 5030              	.L414:
 5031              		.cfi_restore_state
1135:src/xeq.c     **** 		neg = 1;
 5032              		.loc 1 1135 3 is_stmt 1 view .LVU1343
1136:src/xeq.c     **** 	} else {
 5033              		.loc 1 1136 3 view .LVU1344
1143:src/xeq.c     **** 		const char c = *s++;
 5034              		.loc 1 1143 2 view .LVU1345
 5035              	.LBB1660:
1144:src/xeq.c     **** 
 5036              		.loc 1 1144 3 view .LVU1346
1144:src/xeq.c     **** 
 5037              		.loc 1 1144 14 is_stmt 0 view .LVU1347
 5038 0056 4178     		ldrb	r1, [r0, #1]	@ zero_extendqisi2
1146:src/xeq.c     **** 			break;
 5039              		.loc 1 1146 15 view .LVU1348
 5040 0058 A1F13003 		sub	r3, r1, #48
1146:src/xeq.c     **** 			break;
 5041              		.loc 1 1146 6 view .LVU1349
 5042 005c D9B2     		uxtb	r1, r3
 5043 005e 0929     		cmp	r1, #9
1144:src/xeq.c     **** 
 5044              		.loc 1 1144 20 view .LVU1350
 5045 0060 00F10202 		add	r2, r0, #2
 5046              	.LVL371:
1146:src/xeq.c     **** 			break;
 5047              		.loc 1 1146 3 is_stmt 1 view .LVU1351
1146:src/xeq.c     **** 			break;
 5048              		.loc 1 1146 6 is_stmt 0 view .LVU1352
 5049 0064 F3D8     		bhi	.L407
 5050              	.LBE1660:
1136:src/xeq.c     **** 	} else {
 5051              		.loc 1 1136 7 view .LVU1353
 5052 0066 0124     		movs	r4, #1
 5053 0068 D8E7     		b	.L401
 5054              		.cfi_endproc
 5055              	.LFE84:
 5057 006a 00BF     		.section	.text.digit,"ax",%progbits
 5058              		.align	1
 5059              		.p2align 2,,3
 5060              		.syntax unified
 5061              		.thumb
 5062              		.thumb_func
 5063              		.fpu fpv4-sp-d16
 5065              	digit:
 5066              	.LVL372:
 5067              	.LFB214:
3830:src/xeq.c     **** 	const int intm = is_intmode();
 5068              		.loc 1 3830 35 is_stmt 1 view -0
 5069              		.cfi_startproc
ARM GAS  /tmp/cc7LeJ71.s 			page 212


 5070              		@ args = 0, pretend = 0, frame = 0
 5071              		@ frame_needed = 0, uses_anonymous_args = 0
3831:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5072              		.loc 1 3831 2 view .LVU1355
3830:src/xeq.c     **** 	const int intm = is_intmode();
 5073              		.loc 1 3830 35 is_stmt 0 view .LVU1356
 5074 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 5075              		.cfi_def_cfa_offset 24
 5076              		.cfi_offset 3, -24
 5077              		.cfi_offset 4, -20
 5078              		.cfi_offset 5, -16
 5079              		.cfi_offset 6, -12
 5080              		.cfi_offset 7, -8
 5081              		.cfi_offset 14, -4
3831:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5082              		.loc 1 3831 19 view .LVU1357
 5083 0002 604E     		ldr	r6, .L461
3834:src/xeq.c     **** 		lim++;
 5084              		.loc 1 3834 13 view .LVU1358
 5085 0004 604C     		ldr	r4, .L461+4
3831:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5086              		.loc 1 3831 19 view .LVU1359
 5087 0006 3368     		ldr	r3, [r6]
3834:src/xeq.c     **** 		lim++;
 5088              		.loc 1 3834 13 view .LVU1360
 5089 0008 94F82020 		ldrb	r2, [r4, #32]	@ zero_extendqisi2
3831:src/xeq.c     **** 	int lim = DISPLAY_DIGITS;
 5090              		.loc 1 3831 19 view .LVU1361
 5091 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 5092              	.LVL373:
3832:src/xeq.c     **** 
 5093              		.loc 1 3832 2 is_stmt 1 view .LVU1362
3834:src/xeq.c     **** 		lim++;
 5094              		.loc 1 3834 2 view .LVU1363
3835:src/xeq.c     **** 	if (intm) {
 5095              		.loc 1 3835 6 is_stmt 0 view .LVU1364
 5096 0010 2D2A     		cmp	r2, #45
 5097 0012 14BF     		ite	ne
 5098 0014 0C27     		movne	r7, #12
 5099 0016 0D27     		moveq	r7, #13
 5100              	.LVL374:
3836:src/xeq.c     **** 		if (c >= int_base()) {
 5101              		.loc 1 3836 2 is_stmt 1 view .LVU1365
3836:src/xeq.c     **** 		if (c >= int_base()) {
 5102              		.loc 1 3836 5 is_stmt 0 view .LVU1366
 5103 0018 DB07     		lsls	r3, r3, #31
 5104              	.LVL375:
3830:src/xeq.c     **** 	const int intm = is_intmode();
 5105              		.loc 1 3830 35 view .LVU1367
 5106 001a 0546     		mov	r5, r0
3836:src/xeq.c     **** 		if (c >= int_base()) {
 5107              		.loc 1 3836 5 view .LVU1368
 5108 001c 79D4     		bmi	.L458
3842:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5109              		.loc 1 3842 3 is_stmt 1 view .LVU1369
3842:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5110              		.loc 1 3842 6 is_stmt 0 view .LVU1370
ARM GAS  /tmp/cc7LeJ71.s 			page 213


 5111 001e 0928     		cmp	r0, #9
 5112 0020 00F28C80 		bhi	.L419
3847:src/xeq.c     **** 			lim = CMDLINELEN;
 5113              		.loc 1 3847 3 is_stmt 1 view .LVU1371
3847:src/xeq.c     **** 			lim = CMDLINELEN;
 5114              		.loc 1 3847 7 is_stmt 0 view .LVU1372
 5115 0024 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3847:src/xeq.c     **** 			lim = CMDLINELEN;
 5116              		.loc 1 3847 6 view .LVU1373
 5117 0026 002B     		cmp	r3, #0
 5118 0028 65D0     		beq	.L420
3848:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5119              		.loc 1 3848 4 is_stmt 1 view .LVU1374
 5120              	.LVL376:
3850:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5121              		.loc 1 3850 4 view .LVU1375
3850:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5122              		.loc 1 3850 8 is_stmt 0 view .LVU1376
 5123 002a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3850:src/xeq.c     **** 				char *p = &Cmdline[CmdLineEex + 1];
 5124              		.loc 1 3850 7 view .LVU1377
 5125 002c 122A     		cmp	r2, #18
 5126 002e 40F29980 		bls	.L444
 5127              	.LBB1671:
3851:src/xeq.c     **** 
 5128              		.loc 1 3851 5 is_stmt 1 view .LVU1378
3853:src/xeq.c     **** 					p++;
 5129              		.loc 1 3853 9 is_stmt 0 view .LVU1379
 5130 0032 E118     		adds	r1, r4, r3
3851:src/xeq.c     **** 
 5131              		.loc 1 3851 11 view .LVU1380
 5132 0034 2133     		adds	r3, r3, #33
3853:src/xeq.c     **** 					p++;
 5133              		.loc 1 3853 8 view .LVU1381
 5134 0036 91F82110 		ldrb	r1, [r1, #33]	@ zero_extendqisi2
3851:src/xeq.c     **** 
 5135              		.loc 1 3851 11 view .LVU1382
 5136 003a 2344     		add	r3, r3, r4
 5137              	.LVL377:
3853:src/xeq.c     **** 					p++;
 5138              		.loc 1 3853 5 is_stmt 1 view .LVU1383
3853:src/xeq.c     **** 					p++;
 5139              		.loc 1 3853 8 is_stmt 0 view .LVU1384
 5140 003c 2D29     		cmp	r1, #45
3854:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5141              		.loc 1 3854 6 is_stmt 1 view .LVU1385
3855:src/xeq.c     **** 					p[0] = p[1];
 5142              		.loc 1 3855 11 is_stmt 0 view .LVU1386
 5143 003e 5349     		ldr	r1, .L461+8
3854:src/xeq.c     **** 				while (p < &Cmdline[CMDLINELEN]) {
 5144              		.loc 1 3854 7 view .LVU1387
 5145 0040 08BF     		it	eq
 5146 0042 0133     		addeq	r3, r3, #1
 5147              	.LVL378:
3855:src/xeq.c     **** 					p[0] = p[1];
 5148              		.loc 1 3855 11 is_stmt 1 view .LVU1388
 5149 0044 8B42     		cmp	r3, r1
ARM GAS  /tmp/cc7LeJ71.s 			page 214


 5150 0046 05D2     		bcs	.L423
 5151              	.LVL379:
 5152              	.L424:
3856:src/xeq.c     **** 					p++;
 5153              		.loc 1 3856 6 view .LVU1389
3856:src/xeq.c     **** 					p++;
 5154              		.loc 1 3856 11 is_stmt 0 view .LVU1390
 5155 0048 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5156 004a 03F8012B 		strb	r2, [r3], #1
 5157              	.LVL380:
3857:src/xeq.c     **** 				}
 5158              		.loc 1 3857 6 is_stmt 1 view .LVU1391
3855:src/xeq.c     **** 					p[0] = p[1];
 5159              		.loc 1 3855 11 view .LVU1392
 5160 004e 8B42     		cmp	r3, r1
 5161 0050 FAD1     		bne	.L424
 5162 0052 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5163              	.L423:
3859:src/xeq.c     **** 			}
 5164              		.loc 1 3859 5 view .LVU1393
3859:src/xeq.c     **** 			}
 5165              		.loc 1 3859 18 is_stmt 0 view .LVU1394
 5166 0054 013A     		subs	r2, r2, #1
 5167 0056 D2B2     		uxtb	r2, r2
 5168              	.LBE1671:
3848:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5169              		.loc 1 3848 8 view .LVU1395
 5170 0058 1323     		movs	r3, #19
 5171              	.LVL381:
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5172              		.loc 1 3879 2 is_stmt 1 view .LVU1396
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5173              		.loc 1 3879 5 is_stmt 0 view .LVU1397
 5174 005a 9342     		cmp	r3, r2
 5175              	.LBB1672:
3859:src/xeq.c     **** 			}
 5176              		.loc 1 3859 18 view .LVU1398
 5177 005c 2277     		strb	r2, [r4, #28]
 5178              	.LBE1672:
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5179              		.loc 1 3879 5 view .LVU1399
 5180 005e 53DD     		ble	.L441
 5181              	.LVL382:
 5182              	.L428:
3891:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5183              		.loc 1 3891 3 is_stmt 1 view .LVU1400
3891:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5184              		.loc 1 3891 6 is_stmt 0 view .LVU1401
 5185 0060 002D     		cmp	r5, #0
 5186 0062 70D1     		bne	.L430
3891:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5187              		.loc 1 3891 17 discriminator 1 view .LVU1402
 5188 0064 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3891:src/xeq.c     **** 			if (Cmdline[CmdLineLength-1] == 'E')
 5189              		.loc 1 3891 14 discriminator 1 view .LVU1403
 5190 0066 002B     		cmp	r3, #0
 5191 0068 00F08180 		beq	.L431
ARM GAS  /tmp/cc7LeJ71.s 			page 215


3892:src/xeq.c     **** 				return;
 5192              		.loc 1 3892 4 is_stmt 1 view .LVU1404
3895:src/xeq.c     **** 				return;
 5193              		.loc 1 3895 4 view .LVU1405
3892:src/xeq.c     **** 				return;
 5194              		.loc 1 3892 15 is_stmt 0 view .LVU1406
 5195 006c A018     		adds	r0, r4, r2
3895:src/xeq.c     **** 				return;
 5196              		.loc 1 3895 7 view .LVU1407
 5197 006e C17F     		ldrb	r1, [r0, #31]	@ zero_extendqisi2
 5198 0070 4439     		subs	r1, r1, #68
 5199 0072 0129     		cmp	r1, #1
 5200 0074 3ED9     		bls	.L415
3903:src/xeq.c     **** 
 5201              		.loc 1 3903 3 is_stmt 1 view .LVU1408
 5202              	.LVL383:
 5203              	.LBB1673:
 5204              	.LBI1673:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5205              		.loc 1 2645 13 view .LVU1409
 5206              	.LBB1674:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5207              		.loc 1 2646 2 view .LVU1410
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5208              		.loc 1 2646 23 is_stmt 0 view .LVU1411
 5209 0076 0132     		adds	r2, r2, #1
 5210 0078 D2B2     		uxtb	r2, r2
2647:src/xeq.c     **** }
 5211              		.loc 1 2647 25 view .LVU1412
 5212 007a A118     		adds	r1, r4, r2
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5213              		.loc 1 2646 27 view .LVU1413
 5214 007c 3027     		movs	r7, #48
 5215 007e 80F82070 		strb	r7, [r0, #32]
2647:src/xeq.c     **** }
 5216              		.loc 1 2647 2 is_stmt 1 view .LVU1414
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5217              		.loc 1 2646 23 is_stmt 0 view .LVU1415
 5218 0082 2277     		strb	r2, [r4, #28]
2647:src/xeq.c     **** }
 5219              		.loc 1 2647 25 view .LVU1416
 5220 0084 81F82050 		strb	r5, [r1, #32]
 5221              	.LVL384:
2647:src/xeq.c     **** }
 5222              		.loc 1 2647 25 view .LVU1417
 5223              	.LBE1674:
 5224              	.LBE1673:
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5225              		.loc 1 3905 3 is_stmt 1 view .LVU1418
 5226              	.L442:
 5227              	.L434:
 5228              	.L435:
3906:src/xeq.c     **** 	}
 5229              		.loc 1 3906 4 view .LVU1419
 5230              	.LBB1679:
 5231              	.LBI1679:
2654:src/xeq.c     **** {
ARM GAS  /tmp/cc7LeJ71.s 			page 216


 5232              		.loc 1 2654 13 view .LVU1420
 5233              	.LBB1680:
2656:src/xeq.c     **** 	int i;
 5234              		.loc 1 2656 2 view .LVU1421
 5235              	.LBB1681:
 5236              	.LBI1681:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 5237              		.loc 1 1118 5 view .LVU1422
 5238              	.LBB1682:
1119:src/xeq.c     **** }
 5239              		.loc 1 1119 2 view .LVU1423
1119:src/xeq.c     **** }
 5240              		.loc 1 1119 2 is_stmt 0 view .LVU1424
 5241              	.LBE1682:
 5242              	.LBE1681:
2657:src/xeq.c     **** #if SP_NEG_EXP_ENTRY_TYPE_DC == -1
 5243              		.loc 1 2657 2 is_stmt 1 view .LVU1425
2661:src/xeq.c     **** #endif
 5244              		.loc 1 2661 2 view .LVU1426
2666:src/xeq.c     **** #endif
 5245              		.loc 1 2666 2 view .LVU1427
2671:src/xeq.c     **** #endif
 5246              		.loc 1 2671 2 view .LVU1428
2676:src/xeq.c     **** #endif
 5247              		.loc 1 2676 2 view .LVU1429
2681:src/xeq.c     **** #endif
 5248              		.loc 1 2681 2 view .LVU1430
2686:src/xeq.c     **** #endif
 5249              		.loc 1 2686 2 view .LVU1431
2691:src/xeq.c     **** #endif
 5250              		.loc 1 2691 2 view .LVU1432
2696:src/xeq.c     **** #endif
 5251              		.loc 1 2696 2 view .LVU1433
2701:src/xeq.c     **** #endif
 5252              		.loc 1 2701 2 view .LVU1434
2706:src/xeq.c     **** #endif
 5253              		.loc 1 2706 2 view .LVU1435
2708:src/xeq.c     **** 	const int dp_neg_lim_dc = DP_NEG_EXP_ENTRY_LIMIT_DC;
 5254              		.loc 1 2708 2 view .LVU1436
2709:src/xeq.c     **** 	const int dp_neg_type_ds = DP_NEG_EXP_ENTRY_TYPE_DS;
 5255              		.loc 1 2709 2 view .LVU1437
2710:src/xeq.c     **** 	const int dp_neg_lim_ds = DP_NEG_EXP_ENTRY_LIMIT_DS;
 5256              		.loc 1 2710 2 view .LVU1438
2711:src/xeq.c     **** 	const int dp_pos_type_dc = DP_POS_EXP_ENTRY_TYPE_DC;
 5257              		.loc 1 2711 2 view .LVU1439
2712:src/xeq.c     **** 	const int dp_pos_lim_dc = DP_POS_EXP_ENTRY_LIMIT_DC;
 5258              		.loc 1 2712 2 view .LVU1440
2713:src/xeq.c     **** 	const int dp_pos_type_ds = DP_POS_EXP_ENTRY_TYPE_DS;
 5259              		.loc 1 2713 2 view .LVU1441
2714:src/xeq.c     **** 	const int dp_pos_lim_ds = DP_POS_EXP_ENTRY_LIMIT_DS;
 5260              		.loc 1 2714 2 view .LVU1442
2715:src/xeq.c     **** 	const int dp_exp_chs_dc = DP_EXP_ENTRY_CHS_DC;
 5261              		.loc 1 2715 2 view .LVU1443
2716:src/xeq.c     **** 	const int dp_exp_chs_ds = DP_EXP_ENTRY_CHS_DS;
 5262              		.loc 1 2716 2 view .LVU1444
2717:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 5263              		.loc 1 2717 2 view .LVU1445
ARM GAS  /tmp/cc7LeJ71.s 			page 217


2719:src/xeq.c     **** 	char *p = &Cmdline[CmdLineEex];
 5264              		.loc 1 2719 2 view .LVU1446
2720:src/xeq.c     **** #else
 5265              		.loc 1 2720 2 view .LVU1447
 5266              	.LBB1685:
 5267              	.LBB1683:
1119:src/xeq.c     **** }
 5268              		.loc 1 1119 24 is_stmt 0 view .LVU1448
 5269 0088 3268     		ldr	r2, [r6]
 5270 008a B2F8E807 		ldrh	r0, [r2, #2024]
 5271              	.LBE1683:
 5272              	.LBE1685:
 5273              	.LBB1686:
3169:src/xeq.c     **** #else
 5274              		.loc 1 3169 9 view .LVU1449
 5275 008e E118     		adds	r1, r4, r3
 5276              	.LBE1686:
2720:src/xeq.c     **** #else
 5277              		.loc 1 2720 8 view .LVU1450
 5278 0090 03F12005 		add	r5, r3, #32
 5279              	.LBB1687:
 5280              	.LBB1684:
1119:src/xeq.c     **** }
 5281              		.loc 1 1119 24 view .LVU1451
 5282 0094 44F20102 		movw	r2, #16385
 5283              	.LBE1684:
 5284              	.LBE1687:
 5285              	.LBB1688:
2840:src/xeq.c     **** 			// Double precision mode
 5286              		.loc 1 2840 6 view .LVU1452
 5287 0098 0240     		ands	r2, r2, r0
 5288              	.LBE1688:
2720:src/xeq.c     **** #else
 5289              		.loc 1 2720 8 view .LVU1453
 5290 009a 2544     		add	r5, r5, r4
 5291              	.LVL385:
2739:src/xeq.c     **** #endif
 5292              		.loc 1 2739 2 is_stmt 1 view .LVU1454
2744:src/xeq.c     **** 
 5293              		.loc 1 2744 2 view .LVU1455
2747:src/xeq.c     **** 		emax = 999;
 5294              		.loc 1 2747 2 view .LVU1456
 5295              	.LBB1689:
2751:src/xeq.c     **** 		int dot = 0, first_nonzero = -1, last_nonzero = 0;
 5296              		.loc 1 2751 3 view .LVU1457
2752:src/xeq.c     **** 
 5297              		.loc 1 2752 3 view .LVU1458
2754:src/xeq.c     **** 		    || (neg_type_ds >= 1 && neg_type_ds <= 9)
 5298              		.loc 1 2754 3 view .LVU1459
2840:src/xeq.c     **** 			// Double precision mode
 5299              		.loc 1 2840 3 view .LVU1460
2875:src/xeq.c     **** 				}
 5300              		.loc 1 2875 17 is_stmt 0 view .LVU1461
 5301 009c B2F5804F 		cmp	r2, #16384
3169:src/xeq.c     **** #else
 5302              		.loc 1 3169 8 view .LVU1462
 5303 00a0 91F82010 		ldrb	r1, [r1, #32]	@ zero_extendqisi2
ARM GAS  /tmp/cc7LeJ71.s 			page 218


2875:src/xeq.c     **** 				}
 5304              		.loc 1 2875 17 view .LVU1463
 5305 00a4 41F2FF72 		movw	r2, #6143
 5306              	.LBE1689:
3183:src/xeq.c     **** #  else
 5307              		.loc 1 3183 3 view .LVU1464
 5308 00a8 05F10107 		add	r7, r5, #1
 5309              	.LBB1690:
2875:src/xeq.c     **** 				}
 5310              		.loc 1 2875 17 view .LVU1465
 5311 00ac 18BF     		it	ne
 5312 00ae 4FF4C072 		movne	r2, #384
 5313 00b2 40F27F16 		movw	r6, #383
 5314              	.LVL386:
2875:src/xeq.c     **** 				}
 5315              		.loc 1 2875 17 view .LVU1466
 5316              	.LBE1690:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5317              		.loc 1 3192 9 view .LVU1467
 5318 00b6 3846     		mov	r0, r7
 5319              	.LBB1691:
2875:src/xeq.c     **** 				}
 5320              		.loc 1 2875 17 view .LVU1468
 5321 00b8 04BF     		itt	eq
 5322 00ba 1646     		moveq	r6, r2
 5323              	.LVL387:
2875:src/xeq.c     **** 				}
 5324              		.loc 1 2875 17 view .LVU1469
 5325 00bc 4FF4C052 		moveq	r2, #6144
 5326              	.LVL388:
2954:src/xeq.c     **** 		    && (dp_neg_type_dc != dp_neg_type_ds || dp_neg_lim_dc != dp_neg_lim_ds)
 5327              		.loc 1 2954 3 is_stmt 1 view .LVU1470
2970:src/xeq.c     **** 		         && (!flag_D || (dp_neg_type_dc == dp_neg_type_ds
 5328              		.loc 1 2970 8 view .LVU1471
3016:src/xeq.c     **** 		    && (dp_pos_type_dc != dp_pos_type_ds || dp_pos_lim_dc != dp_pos_lim_ds)
 5329              		.loc 1 3016 3 view .LVU1472
3030:src/xeq.c     **** 		         && (!flag_D || (dp_pos_type_dc == dp_pos_type_ds
 5330              		.loc 1 3030 8 view .LVU1473
3070:src/xeq.c     **** 		    && (dp_exp_chs_dc != dp_exp_chs_ds)
 5331              		.loc 1 3070 3 view .LVU1474
3096:src/xeq.c     **** 		         && (!flag_D || dp_exp_chs_dc == dp_exp_chs_ds)
 5332              		.loc 1 3096 8 view .LVU1475
3122:src/xeq.c     **** 			if (exp_chs_ds == 0) {
 5333              		.loc 1 3122 8 view .LVU1476
3151:src/xeq.c     **** 				// Limit exponents so sign change is always legal
 5334              		.loc 1 3151 4 view .LVU1477
3158:src/xeq.c     **** 				// Extend range of exponents so sign change is always legal
 5335              		.loc 1 3158 9 view .LVU1478
3166:src/xeq.c     **** 					return;
 5336              		.loc 1 3166 5 view .LVU1479
3169:src/xeq.c     **** #else
 5337              		.loc 1 3169 5 view .LVU1480
3175:src/xeq.c     **** 			}
 5338              		.loc 1 3175 11 is_stmt 0 view .LVU1481
 5339 00c0 4429     		cmp	r1, #68
 5340 00c2 18BF     		it	ne
 5341 00c4 1646     		movne	r6, r2
ARM GAS  /tmp/cc7LeJ71.s 			page 219


 5342              	.LVL389:
3175:src/xeq.c     **** 			}
 5343              		.loc 1 3175 11 view .LVU1482
 5344              	.LBE1691:
3183:src/xeq.c     **** #  else
 5345              		.loc 1 3183 2 is_stmt 1 view .LVU1483
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5346              		.loc 1 3192 2 view .LVU1484
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5347              		.loc 1 3192 8 view .LVU1485
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5348              		.loc 1 3192 9 is_stmt 0 view .LVU1486
 5349 00c6 FFF7FEFF 		bl	s_to_i
 5350              	.LVL390:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5351              		.loc 1 3192 8 view .LVU1487
 5352 00ca B042     		cmp	r0, r6
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5353              		.loc 1 3193 3 view .LVU1488
 5354 00cc 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5355              		.loc 1 3192 8 view .LVU1489
 5356 00ce 0FDD     		ble	.L438
 5357              	.L459:
 5358              	.LVL391:
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5359              		.loc 1 3193 15 is_stmt 1 view .LVU1490
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5360              		.loc 1 3193 3 is_stmt 0 view .LVU1491
 5361 00d0 2BB1     		cbz	r3, .L440
 5362              	.LVL392:
 5363              	.L447:
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5364              		.loc 1 3193 3 view .LVU1492
 5365 00d2 3B46     		mov	r3, r7
 5366              	.L437:
3194:src/xeq.c     **** 		CmdLineLength--;
 5367              		.loc 1 3194 4 is_stmt 1 view .LVU1493
3194:src/xeq.c     **** 		CmdLineLength--;
 5368              		.loc 1 3194 9 is_stmt 0 view .LVU1494
 5369 00d4 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 5370 00d6 1A70     		strb	r2, [r3]
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5371              		.loc 1 3193 29 is_stmt 1 view .LVU1495
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5372              		.loc 1 3193 15 view .LVU1496
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5373              		.loc 1 3193 3 is_stmt 0 view .LVU1497
 5374 00d8 0133     		adds	r3, r3, #1
 5375 00da 002A     		cmp	r2, #0
 5376 00dc FAD1     		bne	.L437
 5377              	.L440:
3195:src/xeq.c     **** 	}
 5378              		.loc 1 3195 3 is_stmt 1 view .LVU1498
3195:src/xeq.c     **** 	}
 5379              		.loc 1 3195 16 is_stmt 0 view .LVU1499
 5380 00de 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
ARM GAS  /tmp/cc7LeJ71.s 			page 220


3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5381              		.loc 1 3192 9 view .LVU1500
 5382 00e0 3846     		mov	r0, r7
3195:src/xeq.c     **** 	}
 5383              		.loc 1 3195 16 view .LVU1501
 5384 00e2 013B     		subs	r3, r3, #1
 5385 00e4 2377     		strb	r3, [r4, #28]
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5386              		.loc 1 3192 8 is_stmt 1 view .LVU1502
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5387              		.loc 1 3192 9 is_stmt 0 view .LVU1503
 5388 00e6 FFF7FEFF 		bl	s_to_i
 5389              	.LVL393:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5390              		.loc 1 3192 8 view .LVU1504
 5391 00ea B042     		cmp	r0, r6
3193:src/xeq.c     **** 			p[i] = p[i + 1];
 5392              		.loc 1 3193 3 view .LVU1505
 5393 00ec 6B78     		ldrb	r3, [r5, #1]	@ zero_extendqisi2
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5394              		.loc 1 3192 8 view .LVU1506
 5395 00ee EFDC     		bgt	.L459
 5396              	.L438:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5397              		.loc 1 3192 26 view .LVU1507
 5398 00f0 302B     		cmp	r3, #48
 5399 00f2 EED0     		beq	.L447
 5400              	.LVL394:
 5401              	.L415:
3192:src/xeq.c     **** 		for (i = 0; p[i] != '\0'; ++i)
 5402              		.loc 1 3192 26 view .LVU1508
 5403              	.LBE1680:
 5404              	.LBE1679:
3908:src/xeq.c     **** 
 5405              		.loc 1 3908 1 view .LVU1509
 5406 00f4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5407              	.LVL395:
 5408              	.L420:
3864:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5409              		.loc 1 3864 4 is_stmt 1 view .LVU1510
3864:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5410              		.loc 1 3864 11 is_stmt 0 view .LVU1511
 5411 00f6 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 5412              	.LVL396:
3866:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5413              		.loc 1 3866 4 is_stmt 1 view .LVU1512
3866:src/xeq.c     **** #  ifdef FRACTION_ENTRY_OVERFLOW_LEFT
 5414              		.loc 1 3866 7 is_stmt 0 view .LVU1513
 5415 00f8 012B     		cmp	r3, #1
 5416 00fa 35D9     		bls	.L460
3869:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5417              		.loc 1 3869 5 is_stmt 1 view .LVU1514
3869:src/xeq.c     **** #  elif defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 5418              		.loc 1 3869 22 is_stmt 0 view .LVU1515
 5419 00fc 2D2A     		cmp	r2, #45
 5420 00fe 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 5421 0100 30D0     		beq	.L444
ARM GAS  /tmp/cc7LeJ71.s 			page 221


 5422 0102 1223     		movs	r3, #18
 5423              	.LVL397:
 5424              	.L421:
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5425              		.loc 1 3879 2 is_stmt 1 view .LVU1516
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5426              		.loc 1 3879 5 is_stmt 0 view .LVU1517
 5427 0104 9342     		cmp	r3, r2
 5428 0106 ABDC     		bgt	.L428
 5429              	.LVL398:
 5430              	.L441:
3881:src/xeq.c     **** 		return;
 5431              		.loc 1 3881 3 is_stmt 1 view .LVU1518
3908:src/xeq.c     **** 
 5432              		.loc 1 3908 1 is_stmt 0 view .LVU1519
 5433 0108 BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5434              		.cfi_remember_state
 5435              		.cfi_restore 14
 5436              		.cfi_restore 7
 5437              		.cfi_restore 6
 5438              		.cfi_restore 5
 5439              		.cfi_restore 4
 5440              		.cfi_restore 3
 5441              		.cfi_def_cfa_offset 0
 5442              	.LVL399:
3881:src/xeq.c     **** 		return;
 5443              		.loc 1 3881 3 view .LVU1520
 5444 010c 0A20     		movs	r0, #10
 5445 010e FFF7FEBF 		b	report_warn
 5446              	.LVL400:
 5447              	.L458:
 5448              		.cfi_restore_state
3837:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5449              		.loc 1 3837 3 is_stmt 1 view .LVU1521
3837:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5450              		.loc 1 3837 12 is_stmt 0 view .LVU1522
 5451 0112 FFF7FEFF 		bl	int_base
 5452              	.LVL401:
3837:src/xeq.c     **** 			report_warn(ERR_DIGIT);
 5453              		.loc 1 3837 6 view .LVU1523
 5454 0116 A842     		cmp	r0, r5
 5455 0118 10D9     		bls	.L419
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5456              		.loc 1 3879 2 is_stmt 1 view .LVU1524
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5457              		.loc 1 3879 6 is_stmt 0 view .LVU1525
 5458 011a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3879:src/xeq.c     **** 	    || (DISPLAY_DIGITS + 5 > CMDLINELEN && CmdLineLength >= CMDLINELEN)) {
 5459              		.loc 1 3879 5 view .LVU1526
 5460 011c BA42     		cmp	r2, r7
 5461 011e F3DA     		bge	.L441
3885:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5462              		.loc 1 3885 2 is_stmt 1 view .LVU1527
3885:src/xeq.c     **** 		append_cmdline(c - 10 + 'A');
 5463              		.loc 1 3885 5 is_stmt 0 view .LVU1528
 5464 0120 092D     		cmp	r5, #9
 5465 0122 9DD9     		bls	.L428
ARM GAS  /tmp/cc7LeJ71.s 			page 222


3886:src/xeq.c     **** 	else {
 5466              		.loc 1 3886 3 is_stmt 1 view .LVU1529
 5467              	.LVL402:
 5468              	.LBB1692:
 5469              	.LBI1692:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5470              		.loc 1 2645 13 view .LVU1530
 5471              	.LBB1693:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5472              		.loc 1 2646 2 view .LVU1531
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5473              		.loc 1 2646 23 is_stmt 0 view .LVU1532
 5474 0124 531C     		adds	r3, r2, #1
 5475 0126 DBB2     		uxtb	r3, r3
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5476              		.loc 1 2646 27 view .LVU1533
 5477 0128 2244     		add	r2, r2, r4
2647:src/xeq.c     **** }
 5478              		.loc 1 2647 25 view .LVU1534
 5479 012a E118     		adds	r1, r4, r3
 5480              	.LBE1693:
 5481              	.LBE1692:
3886:src/xeq.c     **** 	else {
 5482              		.loc 1 3886 3 view .LVU1535
 5483 012c 3735     		adds	r5, r5, #55
 5484              	.LVL403:
 5485              	.LBB1695:
 5486              	.LBB1694:
2647:src/xeq.c     **** }
 5487              		.loc 1 2647 25 view .LVU1536
 5488 012e 0026     		movs	r6, #0
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5489              		.loc 1 2646 27 view .LVU1537
 5490 0130 82F82050 		strb	r5, [r2, #32]
2647:src/xeq.c     **** }
 5491              		.loc 1 2647 2 is_stmt 1 view .LVU1538
2647:src/xeq.c     **** }
 5492              		.loc 1 2647 25 is_stmt 0 view .LVU1539
 5493 0134 81F82060 		strb	r6, [r1, #32]
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5494              		.loc 1 2646 23 view .LVU1540
 5495 0138 2377     		strb	r3, [r4, #28]
 5496              	.LBE1694:
 5497              	.LBE1695:
3908:src/xeq.c     **** 
 5498              		.loc 1 3908 1 view .LVU1541
 5499 013a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5500              	.LVL404:
 5501              	.L419:
3838:src/xeq.c     **** 			return;
 5502              		.loc 1 3838 4 is_stmt 1 view .LVU1542
3908:src/xeq.c     **** 
 5503              		.loc 1 3908 1 is_stmt 0 view .LVU1543
 5504 013c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 5505              		.cfi_remember_state
 5506              		.cfi_restore 14
 5507              		.cfi_restore 7
ARM GAS  /tmp/cc7LeJ71.s 			page 223


 5508              		.cfi_restore 6
 5509              		.cfi_restore 5
 5510              		.cfi_restore 4
 5511              		.cfi_restore 3
 5512              		.cfi_def_cfa_offset 0
 5513              	.LVL405:
3838:src/xeq.c     **** 			return;
 5514              		.loc 1 3838 4 view .LVU1544
 5515 0140 0920     		movs	r0, #9
 5516 0142 FFF7FEBF 		b	report_warn
 5517              	.LVL406:
 5518              	.L430:
 5519              		.cfi_restore_state
3903:src/xeq.c     **** 
 5520              		.loc 1 3903 3 is_stmt 1 view .LVU1545
 5521              	.LBB1696:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5522              		.loc 1 2645 13 view .LVU1546
 5523              	.LBB1675:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5524              		.loc 1 2646 2 view .LVU1547
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5525              		.loc 1 2646 23 is_stmt 0 view .LVU1548
 5526 0146 511C     		adds	r1, r2, #1
 5527 0148 C9B2     		uxtb	r1, r1
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5528              		.loc 1 2646 27 view .LVU1549
 5529 014a 2244     		add	r2, r2, r4
2647:src/xeq.c     **** }
 5530              		.loc 1 2647 25 view .LVU1550
 5531 014c 6718     		adds	r7, r4, r1
 5532              	.LBE1675:
 5533              	.LBE1696:
3903:src/xeq.c     **** 
 5534              		.loc 1 3903 3 view .LVU1551
 5535 014e 3035     		adds	r5, r5, #48
 5536              	.LVL407:
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5537              		.loc 1 3905 7 view .LVU1552
 5538 0150 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
 5539              	.LBB1697:
 5540              	.LBB1676:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5541              		.loc 1 2646 27 view .LVU1553
 5542 0152 82F82050 		strb	r5, [r2, #32]
2647:src/xeq.c     **** }
 5543              		.loc 1 2647 2 is_stmt 1 view .LVU1554
2647:src/xeq.c     **** }
 5544              		.loc 1 2647 25 is_stmt 0 view .LVU1555
 5545 0156 0022     		movs	r2, #0
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5546              		.loc 1 2646 23 view .LVU1556
 5547 0158 2177     		strb	r1, [r4, #28]
2647:src/xeq.c     **** }
 5548              		.loc 1 2647 25 view .LVU1557
 5549 015a 87F82020 		strb	r2, [r7, #32]
2647:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 224


 5550              		.loc 1 2647 25 view .LVU1558
 5551              	.LBE1676:
 5552              	.LBE1697:
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5553              		.loc 1 3905 3 is_stmt 1 view .LVU1559
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5554              		.loc 1 3905 6 is_stmt 0 view .LVU1560
 5555 015e 002B     		cmp	r3, #0
 5556 0160 92D1     		bne	.L442
3908:src/xeq.c     **** 
 5557              		.loc 1 3908 1 view .LVU1561
 5558 0162 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5559              	.LVL408:
 5560              	.L444:
3848:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5561              		.loc 1 3848 8 view .LVU1562
 5562 0164 1323     		movs	r3, #19
 5563 0166 CDE7     		b	.L421
 5564              	.LVL409:
 5565              	.L460:
3848:src/xeq.c     **** #ifdef SHIFT_EXPONENT
 5566              		.loc 1 3848 8 view .LVU1563
 5567 0168 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
3864:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5568              		.loc 1 3864 8 view .LVU1564
 5569 016a 3B44     		add	r3, r3, r7
 5570              	.LVL410:
3864:src/xeq.c     **** #ifdef PRETTY_FRACTION_ENTRY
 5571              		.loc 1 3864 8 view .LVU1565
 5572 016c CAE7     		b	.L421
 5573              	.LVL411:
 5574              	.L431:
3903:src/xeq.c     **** 
 5575              		.loc 1 3903 3 is_stmt 1 view .LVU1566
 5576              	.LBB1698:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 5577              		.loc 1 2645 13 view .LVU1567
 5578              	.LBB1677:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5579              		.loc 1 2646 2 view .LVU1568
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5580              		.loc 1 2646 23 is_stmt 0 view .LVU1569
 5581 016e 531C     		adds	r3, r2, #1
 5582 0170 DBB2     		uxtb	r3, r3
2647:src/xeq.c     **** }
 5583              		.loc 1 2647 25 view .LVU1570
 5584 0172 E118     		adds	r1, r4, r3
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5585              		.loc 1 2646 27 view .LVU1571
 5586 0174 2244     		add	r2, r2, r4
 5587 0176 3020     		movs	r0, #48
 5588 0178 82F82000 		strb	r0, [r2, #32]
2647:src/xeq.c     **** }
 5589              		.loc 1 2647 2 is_stmt 1 view .LVU1572
2647:src/xeq.c     **** }
 5590              		.loc 1 2647 25 is_stmt 0 view .LVU1573
 5591 017c 81F82050 		strb	r5, [r1, #32]
ARM GAS  /tmp/cc7LeJ71.s 			page 225


 5592              	.LVL412:
2647:src/xeq.c     **** }
 5593              		.loc 1 2647 25 view .LVU1574
 5594              	.LBE1677:
 5595              	.LBE1698:
3905:src/xeq.c     **** 			exponent_adjusted(1);
 5596              		.loc 1 3905 3 is_stmt 1 view .LVU1575
 5597              	.LBB1699:
 5598              	.LBB1678:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 5599              		.loc 1 2646 23 is_stmt 0 view .LVU1576
 5600 0180 2377     		strb	r3, [r4, #28]
 5601              	.LBE1678:
 5602              	.LBE1699:
3908:src/xeq.c     **** 
 5603              		.loc 1 3908 1 view .LVU1577
 5604 0182 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 5605              	.LVL413:
 5606              	.L462:
3908:src/xeq.c     **** 
 5607              		.loc 1 3908 1 view .LVU1578
 5608              		.align	2
 5609              	.L461:
 5610 0184 00000000 		.word	main_ram
 5611 0188 00000000 		.word	StateWhileOn
 5612 018c 33000000 		.word	StateWhileOn+51
 5613              		.cfi_endproc
 5614              	.LFE214:
 5616              		.section	.text.s_to_ull,"ax",%progbits
 5617              		.align	1
 5618              		.p2align 2,,3
 5619              		.global	s_to_ull
 5620              		.syntax unified
 5621              		.thumb
 5622              		.thumb_func
 5623              		.fpu fpv4-sp-d16
 5625              	s_to_ull:
 5626              	.LVL414:
 5627              	.LFB85:
1157:src/xeq.c     **** 	unsigned long long int x = 0;
 5628              		.loc 1 1157 67 is_stmt 1 view -0
 5629              		.cfi_startproc
 5630              		@ args = 0, pretend = 0, frame = 0
 5631              		@ frame_needed = 0, uses_anonymous_args = 0
 5632              		@ link register save eliminated.
1158:src/xeq.c     **** 
 5633              		.loc 1 1158 2 view .LVU1580
1157:src/xeq.c     **** 	unsigned long long int x = 0;
 5634              		.loc 1 1157 67 is_stmt 0 view .LVU1581
 5635 0000 F0B4     		push	{r4, r5, r6, r7}
 5636              		.cfi_def_cfa_offset 16
 5637              		.cfi_offset 4, -16
 5638              		.cfi_offset 5, -12
 5639              		.cfi_offset 6, -8
 5640              		.cfi_offset 7, -4
1158:src/xeq.c     **** 
 5641              		.loc 1 1158 25 view .LVU1582
ARM GAS  /tmp/cc7LeJ71.s 			page 226


 5642 0002 0026     		movs	r6, #0
 5643 0004 0027     		movs	r7, #0
 5644 0006 02E0     		b	.L467
 5645              	.LVL415:
 5646              	.L469:
 5647              	.LBB1700:
1172:src/xeq.c     **** 	}
 5648              		.loc 1 1172 5 view .LVU1583
 5649 0008 E618     		adds	r6, r4, r3
 5650              	.LVL416:
1172:src/xeq.c     **** 	}
 5651              		.loc 1 1172 5 view .LVU1584
 5652 000a 45F10007 		adc	r7, r5, #0
 5653              	.LVL417:
1172:src/xeq.c     **** 	}
 5654              		.loc 1 1172 5 view .LVU1585
 5655              	.LBE1700:
1160:src/xeq.c     **** 		unsigned int n;
 5656              		.loc 1 1160 8 is_stmt 1 view .LVU1586
 5657              	.L467:
1160:src/xeq.c     **** 		unsigned int n;
 5658              		.loc 1 1160 2 view .LVU1587
 5659              	.LBB1701:
1161:src/xeq.c     **** 		const char c = *s++;
 5660              		.loc 1 1161 3 view .LVU1588
1162:src/xeq.c     **** 
 5661              		.loc 1 1162 3 view .LVU1589
1165:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 5662              		.loc 1 1165 4 view .LVU1590
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 5663              		.loc 1 1166 8 view .LVU1591
1167:src/xeq.c     **** 		else
 5664              		.loc 1 1167 4 view .LVU1592
1162:src/xeq.c     **** 
 5665              		.loc 1 1162 14 is_stmt 0 view .LVU1593
 5666 000e 10F8012B 		ldrb	r2, [r0], #1	@ zero_extendqisi2
 5667              	.LVL418:
1164:src/xeq.c     **** 			n = c - '0';
 5668              		.loc 1 1164 3 is_stmt 1 view .LVU1594
1164:src/xeq.c     **** 			n = c - '0';
 5669              		.loc 1 1164 16 is_stmt 0 view .LVU1595
 5670 0012 A2F13003 		sub	r3, r2, #48
1164:src/xeq.c     **** 			n = c - '0';
 5671              		.loc 1 1164 6 view .LVU1596
 5672 0016 DCB2     		uxtb	r4, r3
 5673 0018 092C     		cmp	r4, #9
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 5674              		.loc 1 1166 11 view .LVU1597
 5675 001a A2F14105 		sub	r5, r2, #65
1164:src/xeq.c     **** 			n = c - '0';
 5676              		.loc 1 1164 6 view .LVU1598
 5677 001e 03D9     		bls	.L465
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 5678              		.loc 1 1166 11 view .LVU1599
 5679 0020 052D     		cmp	r5, #5
 5680 0022 07D8     		bhi	.L463
1167:src/xeq.c     **** 		else
ARM GAS  /tmp/cc7LeJ71.s 			page 227


 5681              		.loc 1 1167 16 view .LVU1600
 5682 0024 A2F13703 		sub	r3, r2, #55
 5683              	.LVL419:
 5684              	.L465:
1170:src/xeq.c     **** 			break;
 5685              		.loc 1 1170 3 is_stmt 1 view .LVU1601
1172:src/xeq.c     **** 	}
 5686              		.loc 1 1172 3 view .LVU1602
1172:src/xeq.c     **** 	}
 5687              		.loc 1 1172 9 is_stmt 0 view .LVU1603
 5688 0028 A1FB0645 		umull	r4, r5, r1, r6
1170:src/xeq.c     **** 			break;
 5689              		.loc 1 1170 6 view .LVU1604
 5690 002c 8B42     		cmp	r3, r1
1172:src/xeq.c     **** 	}
 5691              		.loc 1 1172 9 view .LVU1605
 5692 002e 01FB0755 		mla	r5, r1, r7, r5
1170:src/xeq.c     **** 			break;
 5693              		.loc 1 1170 6 view .LVU1606
 5694 0032 E9D3     		bcc	.L469
 5695              	.LVL420:
 5696              	.L463:
1170:src/xeq.c     **** 			break;
 5697              		.loc 1 1170 6 view .LVU1607
 5698              	.LBE1701:
1175:src/xeq.c     **** 
 5699              		.loc 1 1175 1 view .LVU1608
 5700 0034 3046     		mov	r0, r6
 5701              	.LVL421:
1175:src/xeq.c     **** 
 5702              		.loc 1 1175 1 view .LVU1609
 5703 0036 3946     		mov	r1, r7
 5704              	.LVL422:
1175:src/xeq.c     **** 
 5705              		.loc 1 1175 1 view .LVU1610
 5706 0038 F0BC     		pop	{r4, r5, r6, r7}
 5707              		.cfi_restore 7
 5708              		.cfi_restore 6
 5709              		.cfi_restore 5
 5710              		.cfi_restore 4
 5711              		.cfi_def_cfa_offset 0
 5712              	.LVL423:
1175:src/xeq.c     **** 
 5713              		.loc 1 1175 1 view .LVU1611
 5714 003a 7047     		bx	lr
 5715              		.cfi_endproc
 5716              	.LFE85:
 5718              		.section	.text.get_cmdline,"ax",%progbits
 5719              		.align	1
 5720              		.p2align 2,,3
 5721              		.global	get_cmdline
 5722              		.syntax unified
 5723              		.thumb
 5724              		.thumb_func
 5725              		.fpu fpv4-sp-d16
 5727              	get_cmdline:
 5728              	.LFB86:
ARM GAS  /tmp/cc7LeJ71.s 			page 228


1177:src/xeq.c     **** 	if (CmdLineLength) {
 5729              		.loc 1 1177 31 is_stmt 1 view -0
 5730              		.cfi_startproc
 5731              		@ args = 0, pretend = 0, frame = 0
 5732              		@ frame_needed = 0, uses_anonymous_args = 0
 5733              		@ link register save eliminated.
1178:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5734              		.loc 1 1178 2 view .LVU1613
1178:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5735              		.loc 1 1178 6 is_stmt 0 view .LVU1614
 5736 0000 044B     		ldr	r3, .L473
 5737 0002 187F     		ldrb	r0, [r3, #28]	@ zero_extendqisi2
1178:src/xeq.c     **** 		Cmdline[CmdLineLength] = '\0';
 5738              		.loc 1 1178 5 view .LVU1615
 5739 0004 28B1     		cbz	r0, .L470
1179:src/xeq.c     **** 		return Cmdline;
 5740              		.loc 1 1179 3 is_stmt 1 view .LVU1616
1179:src/xeq.c     **** 		return Cmdline;
 5741              		.loc 1 1179 26 is_stmt 0 view .LVU1617
 5742 0006 1A18     		adds	r2, r3, r0
 5743 0008 0021     		movs	r1, #0
1180:src/xeq.c     **** 	}
 5744              		.loc 1 1180 10 view .LVU1618
 5745 000a 03F12000 		add	r0, r3, #32
1179:src/xeq.c     **** 		return Cmdline;
 5746              		.loc 1 1179 26 view .LVU1619
 5747 000e 82F82010 		strb	r1, [r2, #32]
1180:src/xeq.c     **** 	}
 5748              		.loc 1 1180 3 is_stmt 1 view .LVU1620
 5749              	.L470:
1183:src/xeq.c     **** 
 5750              		.loc 1 1183 1 is_stmt 0 view .LVU1621
 5751 0012 7047     		bx	lr
 5752              	.L474:
 5753              		.align	2
 5754              	.L473:
 5755 0014 00000000 		.word	StateWhileOn
 5756              		.cfi_endproc
 5757              	.LFE86:
 5759              		.section	.text.is_bad_cmdline,"ax",%progbits
 5760              		.align	1
 5761              		.p2align 2,,3
 5762              		.global	is_bad_cmdline
 5763              		.syntax unified
 5764              		.thumb
 5765              		.thumb_func
 5766              		.fpu fpv4-sp-d16
 5768              	is_bad_cmdline:
 5769              	.LFB87:
1200:src/xeq.c     **** #ifndef IGNORE_INVALID_FRACTIONS
 5770              		.loc 1 1200 1 is_stmt 1 view -0
 5771              		.cfi_startproc
 5772              		@ args = 0, pretend = 0, frame = 0
 5773              		@ frame_needed = 0, uses_anonymous_args = 0
 5774              		@ link register save eliminated.
1221:src/xeq.c     **** }
 5775              		.loc 1 1221 2 view .LVU1623
ARM GAS  /tmp/cc7LeJ71.s 			page 229


1222:src/xeq.c     **** 
 5776              		.loc 1 1222 1 is_stmt 0 view .LVU1624
 5777 0000 0020     		movs	r0, #0
 5778 0002 7047     		bx	lr
 5779              		.cfi_endproc
 5780              	.LFE87:
 5782              		.section	.text.get_flash_reg_n,"ax",%progbits
 5783              		.align	1
 5784              		.p2align 2,,3
 5785              		.global	get_flash_reg_n
 5786              		.syntax unified
 5787              		.thumb
 5788              		.thumb_func
 5789              		.fpu fpv4-sp-d16
 5791              	get_flash_reg_n:
 5792              	.LVL424:
 5793              	.LFB92:
1385:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 5794              		.loc 1 1385 34 is_stmt 1 view -0
 5795              		.cfi_startproc
 5796              		@ args = 0, pretend = 0, frame = 0
 5797              		@ frame_needed = 0, uses_anonymous_args = 0
 5798              		@ link register save eliminated.
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5799              		.loc 1 1386 2 view .LVU1626
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5800              		.loc 1 1386 37 is_stmt 0 view .LVU1627
 5801 0000 064B     		ldr	r3, .L477
 5802 0002 1A68     		ldr	r2, [r3]
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5803              		.loc 1 1386 68 view .LVU1628
 5804 0004 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5805              		.loc 1 1386 37 view .LVU1629
 5806 0008 02F58661 		add	r1, r2, #1072
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5807              		.loc 1 1386 68 view .LVU1630
 5808 000c C3F16403 		rsb	r3, r3, #100
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5809              		.loc 1 1386 22 view .LVU1631
 5810 0010 01EBC301 		add	r1, r1, r3, lsl #3
 5811 0014 02F5EA62 		add	r2, r2, #1872
 5812 0018 FFF7FEBF 		b	reg_address
 5813              	.LVL425:
 5814              	.L478:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 5815              		.loc 1 1386 22 view .LVU1632
 5816              		.align	2
 5817              	.L477:
 5818 001c 00000000 		.word	backup_ram
 5819              		.cfi_endproc
 5820              	.LFE92:
 5822              		.section	.text.get_const,"ax",%progbits
 5823              		.align	1
 5824              		.p2align 2,,3
 5825              		.global	get_const
 5826              		.syntax unified
ARM GAS  /tmp/cc7LeJ71.s 			page 230


 5827              		.thumb
 5828              		.thumb_func
 5829              		.fpu fpv4-sp-d16
 5831              	get_const:
 5832              	.LVL426:
 5833              	.LFB93:
1396:src/xeq.c     **** 	static REGISTER result;
 5834              		.loc 1 1396 1 is_stmt 1 view -0
 5835              		.cfi_startproc
 5836              		@ args = 0, pretend = 0, frame = 40
 5837              		@ frame_needed = 0, uses_anonymous_args = 0
1397:src/xeq.c     **** 	const int i = cnsts[index].index;
 5838              		.loc 1 1397 2 view .LVU1634
1398:src/xeq.c     **** 	if (dbl) {
 5839              		.loc 1 1398 2 view .LVU1635
1396:src/xeq.c     **** 	static REGISTER result;
 5840              		.loc 1 1396 1 is_stmt 0 view .LVU1636
 5841 0000 00B5     		push	{lr}
 5842              		.cfi_def_cfa_offset 4
 5843              		.cfi_offset 14, -4
1398:src/xeq.c     **** 	if (dbl) {
 5844              		.loc 1 1398 28 view .LVU1637
 5845 0002 1C4B     		ldr	r3, .L485
 5846 0004 00EB4000 		add	r0, r0, r0, lsl #1
 5847              	.LVL427:
1396:src/xeq.c     **** 	static REGISTER result;
 5848              		.loc 1 1396 1 view .LVU1638
 5849 0008 8BB0     		sub	sp, sp, #44
 5850              		.cfi_def_cfa_offset 48
1398:src/xeq.c     **** 	if (dbl) {
 5851              		.loc 1 1398 28 view .LVU1639
 5852 000a 13F82030 		ldrb	r3, [r3, r0, lsl #2]	@ zero_extendqisi2
 5853              	.LVL428:
1399:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5854              		.loc 1 1399 2 is_stmt 1 view .LVU1640
1399:src/xeq.c     **** 		if (i <= 1 || i >= 128)
 5855              		.loc 1 1399 5 is_stmt 0 view .LVU1641
 5856 000e 51B1     		cbz	r1, .L480
1400:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5857              		.loc 1 1400 3 is_stmt 1 view .LVU1642
1400:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5858              		.loc 1 1400 14 is_stmt 0 view .LVU1643
 5859 0010 9A1E     		subs	r2, r3, #2
1400:src/xeq.c     **** 			return (REGISTER *) (cnsts_d128 + (i & 0x7f));
 5860              		.loc 1 1400 6 view .LVU1644
 5861 0012 7D2A     		cmp	r2, #125
 5862 0014 0FD9     		bls	.L481
1401:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5863              		.loc 1 1401 4 is_stmt 1 view .LVU1645
1401:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5864              		.loc 1 1401 11 is_stmt 0 view .LVU1646
 5865 0016 184A     		ldr	r2, .L485+4
1401:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5866              		.loc 1 1401 36 view .LVU1647
 5867 0018 03F07F00 		and	r0, r3, #127
1401:src/xeq.c     **** 		packed128_from_packed(&(result.d), cnsts_d64 + i);
 5868              		.loc 1 1401 11 view .LVU1648
ARM GAS  /tmp/cc7LeJ71.s 			page 231


 5869 001c 02EB0010 		add	r0, r2, r0, lsl #4
1410:src/xeq.c     **** 
 5870              		.loc 1 1410 1 view .LVU1649
 5871 0020 0BB0     		add	sp, sp, #44
 5872              		.cfi_remember_state
 5873              		.cfi_def_cfa_offset 4
 5874              		@ sp needed
 5875 0022 5DF804FB 		ldr	pc, [sp], #4
 5876              	.L480:
 5877              		.cfi_restore_state
1405:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5878              		.loc 1 1405 3 is_stmt 1 view .LVU1650
1405:src/xeq.c     **** 			return (REGISTER *) (cnsts_d64 + i);
 5879              		.loc 1 1405 6 is_stmt 0 view .LVU1651
 5880 0026 1A06     		lsls	r2, r3, #24
 5881 0028 13D4     		bmi	.L483
1406:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5882              		.loc 1 1406 4 is_stmt 1 view .LVU1652
1406:src/xeq.c     **** 		packed_from_packed128(&(result.s), cnsts_d128 - 128 + i);
 5883              		.loc 1 1406 11 is_stmt 0 view .LVU1653
 5884 002a 1448     		ldr	r0, .L485+8
 5885 002c 00EBC300 		add	r0, r0, r3, lsl #3
1410:src/xeq.c     **** 
 5886              		.loc 1 1410 1 view .LVU1654
 5887 0030 0BB0     		add	sp, sp, #44
 5888              		.cfi_remember_state
 5889              		.cfi_def_cfa_offset 4
 5890              		@ sp needed
 5891 0032 5DF804FB 		ldr	pc, [sp], #4
 5892              	.L481:
 5893              		.cfi_restore_state
1402:src/xeq.c     **** 	}
 5894              		.loc 1 1402 3 is_stmt 1 view .LVU1655
 5895              	.LVL429:
 5896              	.LBB1702:
 5897              	.LBI1702:
 654:src/xeq.c     **** 	decNumber temp;
 5898              		.loc 1 654 6 view .LVU1656
 5899              	.LBB1703:
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 5900              		.loc 1 655 2 view .LVU1657
 656:src/xeq.c     **** }
 5901              		.loc 1 656 2 view .LVU1658
 5902              	.LBE1703:
 5903              	.LBE1702:
1402:src/xeq.c     **** 	}
 5904              		.loc 1 1402 3 is_stmt 0 view .LVU1659
 5905 0036 1148     		ldr	r0, .L485+8
 5906              	.LBB1705:
 5907              	.LBB1704:
 656:src/xeq.c     **** }
 5908              		.loc 1 656 27 view .LVU1660
 5909 0038 01A9     		add	r1, sp, #4
 5910              	.LVL430:
 656:src/xeq.c     **** }
 5911              		.loc 1 656 27 view .LVU1661
 5912 003a 00EBC300 		add	r0, r0, r3, lsl #3
ARM GAS  /tmp/cc7LeJ71.s 			page 232


 5913 003e FFF7FEFF 		bl	decimal64ToNumber
 5914              	.LVL431:
 656:src/xeq.c     **** }
 5915              		.loc 1 656 27 view .LVU1662
 5916 0042 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 5917              		.loc 1 656 2 view .LVU1663
 5918 0044 0E48     		ldr	r0, .L485+12
 5919 0046 FFF7FEFF 		bl	packed128_from_number
 5920              	.LVL432:
 5921              	.LBE1704:
 5922              	.LBE1705:
1409:src/xeq.c     **** }
 5923              		.loc 1 1409 9 view .LVU1664
 5924 004a 0D48     		ldr	r0, .L485+12
1410:src/xeq.c     **** 
 5925              		.loc 1 1410 1 view .LVU1665
 5926 004c 0BB0     		add	sp, sp, #44
 5927              		.cfi_remember_state
 5928              		.cfi_def_cfa_offset 4
 5929              		@ sp needed
 5930 004e 5DF804FB 		ldr	pc, [sp], #4
 5931              	.LVL433:
 5932              	.L483:
 5933              		.cfi_restore_state
1407:src/xeq.c     **** 	}
 5934              		.loc 1 1407 3 is_stmt 1 view .LVU1666
 5935              	.LBB1706:
 5936              	.LBI1706:
 648:src/xeq.c     **** 	decNumber temp;
 5937              		.loc 1 648 6 view .LVU1667
 5938              	.LBB1707:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 5939              		.loc 1 649 2 view .LVU1668
 650:src/xeq.c     **** }
 5940              		.loc 1 650 2 view .LVU1669
 5941              	.LBE1707:
 5942              	.LBE1706:
1407:src/xeq.c     **** 	}
 5943              		.loc 1 1407 3 is_stmt 0 view .LVU1670
 5944 0052 0948     		ldr	r0, .L485+4
1407:src/xeq.c     **** 	}
 5945              		.loc 1 1407 55 view .LVU1671
 5946 0054 03F18053 		add	r3, r3, #268435456
 5947              	.LVL434:
1407:src/xeq.c     **** 	}
 5948              		.loc 1 1407 55 view .LVU1672
 5949 0058 803B     		subs	r3, r3, #128
 5950              	.LVL435:
 5951              	.LBB1709:
 5952              	.LBB1708:
 650:src/xeq.c     **** }
 5953              		.loc 1 650 24 view .LVU1673
 5954 005a 00EB0310 		add	r0, r0, r3, lsl #4
 5955 005e 01A9     		add	r1, sp, #4
 5956              	.LVL436:
 650:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 233


 5957              		.loc 1 650 24 view .LVU1674
 5958 0060 FFF7FEFF 		bl	decimal128ToNumber
 5959              	.LVL437:
 650:src/xeq.c     **** }
 5960              		.loc 1 650 24 view .LVU1675
 5961 0064 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 5962              		.loc 1 650 2 view .LVU1676
 5963 0066 0648     		ldr	r0, .L485+12
 5964 0068 FFF7FEFF 		bl	packed_from_number
 5965              	.LVL438:
 5966              	.LBE1708:
 5967              	.LBE1709:
1409:src/xeq.c     **** }
 5968              		.loc 1 1409 9 view .LVU1677
 5969 006c 0448     		ldr	r0, .L485+12
 5970              	.LVL439:
1410:src/xeq.c     **** 
 5971              		.loc 1 1410 1 view .LVU1678
 5972 006e 0BB0     		add	sp, sp, #44
 5973              		.cfi_def_cfa_offset 4
 5974              		@ sp needed
 5975 0070 5DF804FB 		ldr	pc, [sp], #4
 5976              	.L486:
 5977              		.align	2
 5978              	.L485:
 5979 0074 00000000 		.word	cnsts
 5980 0078 00000000 		.word	cnsts_d128
 5981 007c 00000000 		.word	cnsts_d64
 5982 0080 00000000 		.word	.LANCHOR2
 5983              		.cfi_endproc
 5984              	.LFE93:
 5986              		.section	.text.get_reg_n,"ax",%progbits
 5987              		.align	1
 5988              		.p2align 2,,3
 5989              		.global	get_reg_n
 5990              		.syntax unified
 5991              		.thumb
 5992              		.thumb_func
 5993              		.fpu fpv4-sp-d16
 5995              	get_reg_n:
 5996              	.LVL440:
 5997              	.LFB91:
1364:src/xeq.c     **** 	const int dbl = is_dblmode();
 5998              		.loc 1 1364 28 is_stmt 1 view -0
 5999              		.cfi_startproc
 6000              		@ args = 0, pretend = 0, frame = 0
 6001              		@ frame_needed = 0, uses_anonymous_args = 0
 6002              		@ link register save eliminated.
1365:src/xeq.c     **** 
 6003              		.loc 1 1365 2 view .LVU1680
 6004              	.LBB1710:
 6005              	.LBI1710:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6006              		.loc 1 1118 5 view .LVU1681
 6007              	.LBB1711:
1119:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 234


 6008              		.loc 1 1119 2 view .LVU1682
1119:src/xeq.c     **** }
 6009              		.loc 1 1119 12 is_stmt 0 view .LVU1683
 6010 0000 2B4B     		ldr	r3, .L502
 6011 0002 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 6012              		.loc 1 1119 24 view .LVU1684
 6013 0004 B2F8E817 		ldrh	r1, [r2, #2024]
 6014 0008 44F20103 		movw	r3, #16385
 6015 000c 0B40     		ands	r3, r3, r1
 6016 000e A3F58041 		sub	r1, r3, #16384
 6017 0012 B1FA81F1 		clz	r1, r1
 6018              	.LBE1711:
 6019              	.LBE1710:
1367:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6020              		.loc 1 1367 5 view .LVU1685
 6021 0016 B0F5FA6F 		cmp	r0, #2000
 6022              	.LBB1713:
 6023              	.LBB1712:
1119:src/xeq.c     **** }
 6024              		.loc 1 1119 24 view .LVU1686
 6025 001a 4FEA5111 		lsr	r1, r1, #5
 6026              	.LVL441:
1119:src/xeq.c     **** }
 6027              		.loc 1 1119 24 view .LVU1687
 6028              	.LBE1712:
 6029              	.LBE1713:
1367:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6030              		.loc 1 1367 2 is_stmt 1 view .LVU1688
1367:src/xeq.c     **** 		n -= CONST_REG_BASE;
 6031              		.loc 1 1367 5 is_stmt 0 view .LVU1689
 6032 001e 29DA     		bge	.L499
1371:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6033              		.loc 1 1371 2 is_stmt 1 view .LVU1690
1371:src/xeq.c     **** 		return get_flash_reg_n(n - FLASH_REG_BASE);
 6034              		.loc 1 1371 5 is_stmt 0 view .LVU1691
 6035 0020 B0F57A7F 		cmp	r0, #1000
 6036 0024 16DA     		bge	.L500
1374:src/xeq.c     **** 		// local register on the return stack
 6037              		.loc 1 1374 2 is_stmt 1 view .LVU1692
1374:src/xeq.c     **** 		// local register on the return stack
 6038              		.loc 1 1374 5 is_stmt 0 view .LVU1693
 6039 0026 6F28     		cmp	r0, #111
1364:src/xeq.c     **** 	const int dbl = is_dblmode();
 6040              		.loc 1 1364 28 view .LVU1694
 6041 0028 70B4     		push	{r4, r5, r6}
 6042              		.cfi_def_cfa_offset 12
 6043              		.cfi_offset 4, -12
 6044              		.cfi_offset 5, -8
 6045              		.cfi_offset 6, -4
1374:src/xeq.c     **** 		// local register on the return stack
 6046              		.loc 1 1374 5 view .LVU1695
 6047 002a 06DD     		ble	.L490
 6048              	.LBB1714:
 6049              	.LBI1714:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 6050              		.loc 1 233 5 is_stmt 1 view .LVU1696
ARM GAS  /tmp/cc7LeJ71.s 			page 235


 6051              	.LBE1714:
 234:src/xeq.c     **** }
 6052              		.loc 1 234 2 view .LVU1697
 6053              	.LVL442:
 6054              	.LBB1727:
 6055              	.LBB1715:
 6056              	.LBI1715:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 6057              		.loc 1 225 5 view .LVU1698
 6058              	.LBB1716:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 6059              		.loc 1 226 2 view .LVU1699
 6060              	.LBE1716:
 6061              	.LBE1715:
 6062              	.LBE1727:
1119:src/xeq.c     **** }
 6063              		.loc 1 1119 2 view .LVU1700
 6064              	.LBB1728:
 6065              	.LBB1725:
 6066              	.LBB1723:
 227:src/xeq.c     **** }
 6067              		.loc 1 227 2 view .LVU1701
 6068              	.LBB1717:
 6069              	.LBI1717:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 6070              		.loc 1 217 5 view .LVU1702
 6071              	.LBB1718:
 218:src/xeq.c     **** }
 6072              		.loc 1 218 2 view .LVU1703
 218:src/xeq.c     **** }
 6073              		.loc 1 218 9 is_stmt 0 view .LVU1704
 6074 002c B2F8DE47 		ldrh	r4, [r2, #2014]
 6075 0030 44F34A15 		sbfx	r5, r4, #5, #11
 218:src/xeq.c     **** }
 6076              		.loc 1 218 57 view .LVU1705
 6077 0034 002D     		cmp	r5, #0
 218:src/xeq.c     **** }
 6078              		.loc 1 218 9 view .LVU1706
 6079 0036 2C46     		mov	r4, r5
 218:src/xeq.c     **** }
 6080              		.loc 1 218 57 view .LVU1707
 6081 0038 20DB     		blt	.L501
 6082              	.LVL443:
 6083              	.L490:
 218:src/xeq.c     **** }
 6084              		.loc 1 218 57 view .LVU1708
 6085              	.LBE1718:
 6086              	.LBE1717:
 6087              	.LBE1723:
 6088              	.LBE1725:
 6089              	.LBE1728:
1381:src/xeq.c     **** }
 6090              		.loc 1 1381 2 is_stmt 1 view .LVU1709
1381:src/xeq.c     **** }
 6091              		.loc 1 1381 55 is_stmt 0 view .LVU1710
 6092 003a 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
 6093              	.LVL444:
ARM GAS  /tmp/cc7LeJ71.s 			page 236


1381:src/xeq.c     **** }
 6094              		.loc 1 1381 37 view .LVU1711
 6095 003e 02F58661 		add	r1, r2, #1072
1381:src/xeq.c     **** }
 6096              		.loc 1 1381 55 view .LVU1712
 6097 0042 C3F16403 		rsb	r3, r3, #100
1382:src/xeq.c     **** 
 6098              		.loc 1 1382 1 view .LVU1713
 6099 0046 70BC     		pop	{r4, r5, r6}
 6100              		.cfi_restore 6
 6101              		.cfi_restore 5
 6102              		.cfi_restore 4
 6103              		.cfi_def_cfa_offset 0
1381:src/xeq.c     **** }
 6104              		.loc 1 1381 22 view .LVU1714
 6105 0048 01EBC301 		add	r1, r1, r3, lsl #3
 6106 004c 02F5EA62 		add	r2, r2, #1872
 6107              	.LVL445:
1381:src/xeq.c     **** }
 6108              		.loc 1 1381 22 view .LVU1715
 6109 0050 FFF7FEBF 		b	reg_address
 6110              	.LVL446:
 6111              	.L500:
1372:src/xeq.c     **** 
 6112              		.loc 1 1372 3 is_stmt 1 view .LVU1716
 6113              	.LBB1729:
 6114              	.LBI1729:
1385:src/xeq.c     **** 	return (REGISTER *) reg_address(n, BackupFlash._regs + TOPREALREG - BackupFlash._numregs,
 6115              		.loc 1 1385 11 view .LVU1717
 6116              	.LBB1730:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6117              		.loc 1 1386 2 view .LVU1718
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6118              		.loc 1 1386 37 is_stmt 0 view .LVU1719
 6119 0054 174B     		ldr	r3, .L502+4
 6120 0056 1A68     		ldr	r2, [r3]
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6121              		.loc 1 1386 68 view .LVU1720
 6122 0058 92F8CF37 		ldrb	r3, [r2, #1999]	@ zero_extendqisi2
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6123              		.loc 1 1386 37 view .LVU1721
 6124 005c 02F58661 		add	r1, r2, #1072
 6125              	.LVL447:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6126              		.loc 1 1386 68 view .LVU1722
 6127 0060 C3F16403 		rsb	r3, r3, #100
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6128              		.loc 1 1386 22 view .LVU1723
 6129 0064 A0F57A70 		sub	r0, r0, #1000
 6130              	.LVL448:
1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6131              		.loc 1 1386 22 view .LVU1724
 6132 0068 01EBC301 		add	r1, r1, r3, lsl #3
 6133 006c 02F5EA62 		add	r2, r2, #1872
 6134 0070 FFF7FEBF 		b	reg_address
 6135              	.LVL449:
 6136              	.L499:
ARM GAS  /tmp/cc7LeJ71.s 			page 237


1386:src/xeq.c     **** 					   BackupFlash._regs + regX_idx);
 6137              		.loc 1 1386 22 view .LVU1725
 6138              	.LBE1730:
 6139              	.LBE1729:
1368:src/xeq.c     **** 		return get_const(n, dbl);
 6140              		.loc 1 1368 3 is_stmt 1 view .LVU1726
1369:src/xeq.c     **** 	}
 6141              		.loc 1 1369 3 view .LVU1727
1369:src/xeq.c     **** 	}
 6142              		.loc 1 1369 10 is_stmt 0 view .LVU1728
 6143 0074 A0F5FA60 		sub	r0, r0, #2000
 6144              	.LVL450:
1369:src/xeq.c     **** 	}
 6145              		.loc 1 1369 10 view .LVU1729
 6146 0078 FFF7FEBF 		b	get_const
 6147              	.LVL451:
 6148              	.L501:
 6149              		.cfi_def_cfa_offset 12
 6150              		.cfi_offset 4, -12
 6151              		.cfi_offset 5, -8
 6152              		.cfi_offset 6, -4
 6153              	.LBB1731:
 6154              	.LBB1726:
 6155              	.LBB1724:
 6156              	.LBB1721:
 6157              	.LBB1719:
 218:src/xeq.c     **** }
 6158              		.loc 1 218 25 view .LVU1730
 6159 007c 0E4E     		ldr	r6, .L502+8
 6160 007e 3668     		ldr	r6, [r6]
 6161              	.LVL452:
 218:src/xeq.c     **** }
 6162              		.loc 1 218 57 view .LVU1731
 6163 0080 36F81550 		ldrh	r5, [r6, r5, lsl #1]
 6164              	.LBE1719:
 6165              	.LBE1721:
 227:src/xeq.c     **** }
 6166              		.loc 1 227 30 view .LVU1732
 6167 0084 0231     		adds	r1, r1, #2
 6168              	.LVL453:
 6169              	.LBB1722:
 6170              	.LBB1720:
 218:src/xeq.c     **** }
 6171              		.loc 1 218 57 view .LVU1733
 6172 0086 C5F30B05 		ubfx	r5, r5, #0, #12
 6173              	.LBE1720:
 6174              	.LBE1722:
 6175              	.LBE1724:
 6176              	.LBE1726:
 6177              	.LBE1731:
1374:src/xeq.c     **** 		// local register on the return stack
 6178              		.loc 1 1374 26 view .LVU1734
 6179 008a 55FA01F1 		asrs	r1, r5, r1
 6180              	.LVL454:
1374:src/xeq.c     **** 		// local register on the return stack
 6181              		.loc 1 1374 26 view .LVU1735
 6182 008e D4D0     		beq	.L490
ARM GAS  /tmp/cc7LeJ71.s 			page 238


1376:src/xeq.c     **** 		if (dbl)
 6183              		.loc 1 1376 3 is_stmt 1 view .LVU1736
1376:src/xeq.c     **** 		if (dbl)
 6184              		.loc 1 1376 5 is_stmt 0 view .LVU1737
 6185 0090 7038     		subs	r0, r0, #112
 6186              	.LVL455:
1377:src/xeq.c     **** 			n <<= 1;
 6187              		.loc 1 1377 3 is_stmt 1 view .LVU1738
1377:src/xeq.c     **** 			n <<= 1;
 6188              		.loc 1 1377 6 is_stmt 0 view .LVU1739
 6189 0092 B3F5804F 		cmp	r3, #16384
1378:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6190              		.loc 1 1378 4 is_stmt 1 view .LVU1740
1378:src/xeq.c     **** 		return (REGISTER *) ((decimal64 *) (RetStk + (short)((LocalRegs + 2) & 0xfffe)) + n);
 6191              		.loc 1 1378 6 is_stmt 0 view .LVU1741
 6192 0096 08BF     		it	eq
 6193 0098 4000     		lsleq	r0, r0, #1
 6194              	.LVL456:
1379:src/xeq.c     **** 	}
 6195              		.loc 1 1379 3 is_stmt 1 view .LVU1742
1379:src/xeq.c     **** 	}
 6196              		.loc 1 1379 67 is_stmt 0 view .LVU1743
 6197 009a 0234     		adds	r4, r4, #2
1379:src/xeq.c     **** 	}
 6198              		.loc 1 1379 48 view .LVU1744
 6199 009c 24F00104 		bic	r4, r4, #1
1379:src/xeq.c     **** 	}
 6200              		.loc 1 1379 83 view .LVU1745
 6201 00a0 C000     		lsls	r0, r0, #3
 6202              	.LVL457:
1379:src/xeq.c     **** 	}
 6203              		.loc 1 1379 10 view .LVU1746
 6204 00a2 0223     		movs	r3, #2
 6205              	.LVL458:
1379:src/xeq.c     **** 	}
 6206              		.loc 1 1379 10 view .LVU1747
 6207 00a4 14FB0300 		smlabb	r0, r4, r3, r0
 6208 00a8 3044     		add	r0, r0, r6
1382:src/xeq.c     **** 
 6209              		.loc 1 1382 1 view .LVU1748
 6210 00aa 70BC     		pop	{r4, r5, r6}
 6211              		.cfi_restore 6
 6212              		.cfi_restore 5
 6213              		.cfi_restore 4
 6214              		.cfi_def_cfa_offset 0
 6215 00ac 7047     		bx	lr
 6216              	.L503:
 6217 00ae 00BF     		.align	2
 6218              	.L502:
 6219 00b0 00000000 		.word	main_ram
 6220 00b4 00000000 		.word	backup_ram
 6221 00b8 00000000 		.word	RetStk
 6222              		.cfi_endproc
 6223              	.LFE91:
 6225              		.section	.text.get_stack,"ax",%progbits
 6226              		.align	1
 6227              		.p2align 2,,3
ARM GAS  /tmp/cc7LeJ71.s 			page 239


 6228              		.global	get_stack
 6229              		.syntax unified
 6230              		.thumb
 6231              		.thumb_func
 6232              		.fpu fpv4-sp-d16
 6234              	get_stack:
 6235              	.LVL459:
 6236              	.LFB43:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6237              		.loc 1 718 30 is_stmt 1 view -0
 6238              		.cfi_startproc
 6239              		@ args = 0, pretend = 0, frame = 0
 6240              		@ frame_needed = 0, uses_anonymous_args = 0
 6241              		@ link register save eliminated.
 719:src/xeq.c     **** }
 6242              		.loc 1 719 2 view .LVU1750
 719:src/xeq.c     **** }
 6243              		.loc 1 719 9 is_stmt 0 view .LVU1751
 6244 0000 6430     		adds	r0, r0, #100
 6245              	.LVL460:
 719:src/xeq.c     **** }
 6246              		.loc 1 719 9 view .LVU1752
 6247 0002 FFF7FEBF 		b	get_reg_n
 6248              	.LVL461:
 719:src/xeq.c     **** }
 6249              		.loc 1 719 9 view .LVU1753
 6250              		.cfi_endproc
 6251              	.LFE43:
 6253 0006 00BF     		.section	.text.lift,"ax",%progbits
 6254              		.align	1
 6255              		.p2align 2,,3
 6256              		.global	lift
 6257              		.syntax unified
 6258              		.thumb
 6259              		.thumb_func
 6260              		.fpu fpv4-sp-d16
 6262              	lift:
 6263              	.LFB47:
 736:src/xeq.c     **** 	const int n = stack_size();
 6264              		.loc 1 736 17 is_stmt 1 view -0
 6265              		.cfi_startproc
 6266              		@ args = 0, pretend = 0, frame = 0
 6267              		@ frame_needed = 0, uses_anonymous_args = 0
 737:src/xeq.c     **** 	int i;
 6268              		.loc 1 737 2 view .LVU1755
 6269              	.LBB1732:
 6270              	.LBI1732:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6271              		.loc 1 712 5 view .LVU1756
 6272              	.LBB1733:
 713:src/xeq.c     **** 		return 4;
 6273              		.loc 1 713 2 view .LVU1757
 6274              	.LBE1733:
 6275              	.LBE1732:
 736:src/xeq.c     **** 	const int n = stack_size();
 6276              		.loc 1 736 17 is_stmt 0 view .LVU1758
 6277 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
ARM GAS  /tmp/cc7LeJ71.s 			page 240


 6278              		.cfi_def_cfa_offset 24
 6279              		.cfi_offset 3, -24
 6280              		.cfi_offset 4, -20
 6281              		.cfi_offset 5, -16
 6282              		.cfi_offset 6, -12
 6283              		.cfi_offset 7, -8
 6284              		.cfi_offset 14, -4
 6285              	.LBB1738:
 6286              	.LBB1736:
 713:src/xeq.c     **** 		return 4;
 6287              		.loc 1 713 8 view .LVU1759
 6288 0002 184E     		ldr	r6, .L516
 6289 0004 3368     		ldr	r3, [r6]
 713:src/xeq.c     **** 		return 4;
 6290              		.loc 1 713 6 view .LVU1760
 6291 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 6292              		.loc 1 713 5 view .LVU1761
 6293 000a 1207     		lsls	r2, r2, #28
 6294 000c 28D5     		bpl	.L509
 6295              	.LBB1734:
 6296              	.LBI1734:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6297              		.loc 1 185 5 is_stmt 1 view .LVU1762
 6298              	.LBB1735:
 186:src/xeq.c     **** }
 6299              		.loc 1 186 2 view .LVU1763
 186:src/xeq.c     **** }
 6300              		.loc 1 186 9 is_stmt 0 view .LVU1764
 6301 000e B3F8E037 		ldrh	r3, [r3, #2016]
 6302              	.LBE1735:
 6303              	.LBE1734:
 713:src/xeq.c     **** 		return 4;
 6304              		.loc 1 713 27 view .LVU1765
 6305 0012 9B0B     		lsrs	r3, r3, #14
 6306 0014 032B     		cmp	r3, #3
 6307 0016 1BD0     		beq	.L515
 6308 0018 0724     		movs	r4, #7
 6309              	.L506:
 6310              	.LBE1736:
 6311              	.LBE1738:
 738:src/xeq.c     **** 	for (i=n-1; i>0; i--)
 6312              		.loc 1 738 2 is_stmt 1 view .LVU1766
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6313              		.loc 1 739 2 view .LVU1767
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6314              		.loc 1 739 14 view .LVU1768
 6315 001a 6434     		adds	r4, r4, #100
 6316              	.LBB1739:
 6317              	.LBB1740:
 6318              	.LBB1741:
 6319              	.LBB1742:
1119:src/xeq.c     **** }
 6320              		.loc 1 1119 24 is_stmt 0 view .LVU1769
 6321 001c 44F20107 		movw	r7, #16385
 6322              	.L508:
 6323              	.LVL462:
ARM GAS  /tmp/cc7LeJ71.s 			page 241


1119:src/xeq.c     **** }
 6324              		.loc 1 1119 24 view .LVU1770
 6325              	.LBE1742:
 6326              	.LBE1741:
 6327              	.LBE1740:
 6328              	.LBE1739:
 740:src/xeq.c     **** }
 6329              		.loc 1 740 3 is_stmt 1 view .LVU1771
 6330              	.LBB1749:
 6331              	.LBI1749:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6332              		.loc 1 718 11 view .LVU1772
 6333              	.LBB1750:
 719:src/xeq.c     **** }
 6334              		.loc 1 719 2 view .LVU1773
 719:src/xeq.c     **** }
 6335              		.loc 1 719 9 is_stmt 0 view .LVU1774
 6336 0020 2046     		mov	r0, r4
 6337 0022 FFF7FEFF 		bl	get_reg_n
 6338              	.LVL463:
 6339              	.LBE1750:
 6340              	.LBE1749:
 6341              	.LBB1752:
 6342              	.LBB1753:
 6343 0026 013C     		subs	r4, r4, #1
 6344              	.LVL464:
 719:src/xeq.c     **** }
 6345              		.loc 1 719 9 view .LVU1775
 6346              	.LBE1753:
 6347              	.LBE1752:
 6348              	.LBB1757:
 6349              	.LBB1751:
 6350 0028 0546     		mov	r5, r0
 6351              	.LBE1751:
 6352              	.LBE1757:
 6353              	.LBB1758:
 6354              	.LBB1754:
 6355 002a 2046     		mov	r0, r4
 6356              	.LVL465:
 719:src/xeq.c     **** }
 6357              		.loc 1 719 9 view .LVU1776
 6358              	.LBE1754:
 6359              	.LBI1752:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6360              		.loc 1 718 11 is_stmt 1 view .LVU1777
 6361              	.LBB1755:
 719:src/xeq.c     **** }
 6362              		.loc 1 719 2 view .LVU1778
 719:src/xeq.c     **** }
 6363              		.loc 1 719 9 is_stmt 0 view .LVU1779
 6364 002c FFF7FEFF 		bl	get_reg_n
 6365              	.LVL466:
 719:src/xeq.c     **** }
 6366              		.loc 1 719 9 view .LVU1780
 6367              	.LBE1755:
 6368              	.LBE1758:
 6369              	.LBB1759:
ARM GAS  /tmp/cc7LeJ71.s 			page 242


 6370              	.LBB1747:
 6371              	.LBB1745:
 6372              	.LBB1743:
1119:src/xeq.c     **** }
 6373              		.loc 1 1119 24 view .LVU1781
 6374 0030 3368     		ldr	r3, [r6]
 6375 0032 B3F8E837 		ldrh	r3, [r3, #2024]
 6376              	.LBE1743:
 6377              	.LBE1745:
 727:src/xeq.c     **** }
 6378              		.loc 1 727 2 view .LVU1782
 6379 0036 3B40     		ands	r3, r3, r7
 6380 0038 B3F5804F 		cmp	r3, #16384
 6381              	.LBE1747:
 6382              	.LBE1759:
 6383              	.LBB1760:
 6384              	.LBB1756:
 719:src/xeq.c     **** }
 6385              		.loc 1 719 9 view .LVU1783
 6386 003c 0146     		mov	r1, r0
 6387              	.LVL467:
 719:src/xeq.c     **** }
 6388              		.loc 1 719 9 view .LVU1784
 6389              	.LBE1756:
 6390              	.LBE1760:
 6391              	.LBB1761:
 6392              	.LBI1739:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6393              		.loc 1 726 6 is_stmt 1 view .LVU1785
 6394              	.LBB1748:
 727:src/xeq.c     **** }
 6395              		.loc 1 727 2 view .LVU1786
 6396              	.LBB1746:
 6397              	.LBI1741:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6398              		.loc 1 1118 5 view .LVU1787
 6399              	.LBB1744:
1119:src/xeq.c     **** }
 6400              		.loc 1 1119 2 view .LVU1788
 6401              	.LBE1744:
 6402              	.LBE1746:
 727:src/xeq.c     **** }
 6403              		.loc 1 727 2 is_stmt 0 view .LVU1789
 6404 003e 0CBF     		ite	eq
 6405 0040 1022     		moveq	r2, #16
 6406 0042 0822     		movne	r2, #8
 6407 0044 2846     		mov	r0, r5
 6408              	.LVL468:
 727:src/xeq.c     **** }
 6409              		.loc 1 727 2 view .LVU1790
 6410 0046 FFF7FEFF 		bl	xcopy
 6411              	.LVL469:
 727:src/xeq.c     **** }
 6412              		.loc 1 727 2 view .LVU1791
 6413              	.LBE1748:
 6414              	.LBE1761:
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
ARM GAS  /tmp/cc7LeJ71.s 			page 243


 6415              		.loc 1 739 19 is_stmt 1 view .LVU1792
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6416              		.loc 1 739 14 view .LVU1793
 739:src/xeq.c     **** 		copyreg(get_stack(i), get_stack(i-1));
 6417              		.loc 1 739 2 is_stmt 0 view .LVU1794
 6418 004a 642C     		cmp	r4, #100
 6419 004c E8D1     		bne	.L508
 741:src/xeq.c     **** 
 6420              		.loc 1 741 1 view .LVU1795
 6421 004e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 6422              	.LVL470:
 6423              	.L515:
 6424              	.LBB1762:
 6425              	.LBB1737:
 713:src/xeq.c     **** 		return 4;
 6426              		.loc 1 713 44 view .LVU1796
 6427 0050 054B     		ldr	r3, .L516+4
 713:src/xeq.c     **** 		return 4;
 6428              		.loc 1 713 41 view .LVU1797
 6429 0052 93F90130 		ldrsb	r3, [r3, #1]
 6430 0056 002B     		cmp	r3, #0
 6431 0058 B4BF     		ite	lt
 6432 005a 0724     		movlt	r4, #7
 6433 005c 0324     		movge	r4, #3
 6434 005e DCE7     		b	.L506
 6435              	.L509:
 6436 0060 0324     		movs	r4, #3
 6437 0062 DAE7     		b	.L506
 6438              	.L517:
 6439              		.align	2
 6440              	.L516:
 6441 0064 00000000 		.word	main_ram
 6442 0068 00000000 		.word	XromParams
 6443              	.LBE1737:
 6444              	.LBE1762:
 6445              		.cfi_endproc
 6446              	.LFE47:
 6448              		.section	.text.lift_if_enabled,"ax",%progbits
 6449              		.align	1
 6450              		.p2align 2,,3
 6451              		.global	lift_if_enabled
 6452              		.syntax unified
 6453              		.thumb
 6454              		.thumb_func
 6455              		.fpu fpv4-sp-d16
 6457              	lift_if_enabled:
 6458              	.LFB49:
 747:src/xeq.c     **** 	if (get_lift())
 6459              		.loc 1 747 28 is_stmt 1 view -0
 6460              		.cfi_startproc
 6461              		@ args = 0, pretend = 0, frame = 0
 6462              		@ frame_needed = 0, uses_anonymous_args = 0
 6463              		@ link register save eliminated.
 748:src/xeq.c     **** 		lift();
 6464              		.loc 1 748 2 view .LVU1799
 6465              	.LBB1763:
 6466              	.LBI1763:
ARM GAS  /tmp/cc7LeJ71.s 			page 244


 743:src/xeq.c     **** 	return State2.state_lift;
 6467              		.loc 1 743 12 view .LVU1800
 6468              	.LBB1764:
 744:src/xeq.c     **** }
 6469              		.loc 1 744 2 view .LVU1801
 744:src/xeq.c     **** }
 6470              		.loc 1 744 15 is_stmt 0 view .LVU1802
 6471 0000 034B     		ldr	r3, .L521
 6472 0002 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 6473              	.LBE1764:
 6474              	.LBE1763:
 748:src/xeq.c     **** 		lift();
 6475              		.loc 1 748 5 view .LVU1803
 6476 0004 5B06     		lsls	r3, r3, #25
 6477 0006 00D4     		bmi	.L520
 750:src/xeq.c     **** 
 6478              		.loc 1 750 1 view .LVU1804
 6479 0008 7047     		bx	lr
 6480              	.L520:
 749:src/xeq.c     **** }
 6481              		.loc 1 749 3 is_stmt 1 view .LVU1805
 6482 000a FFF7FEBF 		b	lift
 6483              	.LVL471:
 6484              	.L522:
 6485 000e 00BF     		.align	2
 6486              	.L521:
 6487 0010 00000000 		.word	StateWhileOn
 6488              		.cfi_endproc
 6489              	.LFE49:
 6491              		.section	.text.lift2_if_enabled,"ax",%progbits
 6492              		.align	1
 6493              		.p2align 2,,3
 6494              		.syntax unified
 6495              		.thumb
 6496              		.thumb_func
 6497              		.fpu fpv4-sp-d16
 6499              	lift2_if_enabled:
 6500              	.LFB50:
 752:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6501              		.loc 1 752 36 view -0
 6502              		.cfi_startproc
 6503              		@ args = 0, pretend = 0, frame = 0
 6504              		@ frame_needed = 0, uses_anonymous_args = 0
 754:src/xeq.c     **** 	if (C_LOCKED) {
 6505              		.loc 1 754 2 view .LVU1807
 6506              	.LBB1779:
 6507              	.LBI1779:
 747:src/xeq.c     **** 	if (get_lift())
 6508              		.loc 1 747 6 view .LVU1808
 6509              	.LBB1780:
 748:src/xeq.c     **** 		lift();
 6510              		.loc 1 748 2 view .LVU1809
 6511              	.LBB1781:
 6512              	.LBI1781:
 743:src/xeq.c     **** 	return State2.state_lift;
 6513              		.loc 1 743 12 view .LVU1810
 6514              	.LBB1782:
ARM GAS  /tmp/cc7LeJ71.s 			page 245


 744:src/xeq.c     **** }
 6515              		.loc 1 744 2 view .LVU1811
 6516              	.LBE1782:
 6517              	.LBE1781:
 6518              	.LBE1780:
 6519              	.LBE1779:
 752:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6520              		.loc 1 752 36 is_stmt 0 view .LVU1812
 6521 0000 10B5     		push	{r4, lr}
 6522              		.cfi_def_cfa_offset 8
 6523              		.cfi_offset 4, -8
 6524              		.cfi_offset 14, -4
 6525              	.LBB1787:
 6526              	.LBB1785:
 6527              	.LBB1784:
 6528              	.LBB1783:
 744:src/xeq.c     **** }
 6529              		.loc 1 744 15 view .LVU1813
 6530 0002 0C4C     		ldr	r4, .L538
 6531 0004 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6532              	.LBE1783:
 6533              	.LBE1784:
 748:src/xeq.c     **** 		lift();
 6534              		.loc 1 748 5 view .LVU1814
 6535 0006 5806     		lsls	r0, r3, #25
 6536 0008 11D4     		bmi	.L537
 6537              	.L524:
 6538              	.LBE1785:
 6539              	.LBE1787:
 755:src/xeq.c     **** 		lift_if_enabled();
 6540              		.loc 1 755 2 is_stmt 1 view .LVU1815
 755:src/xeq.c     **** 		lift_if_enabled();
 6541              		.loc 1 755 6 is_stmt 0 view .LVU1816
 6542 000a 0B4B     		ldr	r3, .L538+4
 6543 000c 1B68     		ldr	r3, [r3]
 6544 000e 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 755:src/xeq.c     **** 		lift_if_enabled();
 6545              		.loc 1 755 5 view .LVU1817
 6546 0012 5107     		lsls	r1, r2, #29
 6547 0014 07D5     		bpl	.L525
 755:src/xeq.c     **** 		lift_if_enabled();
 6548              		.loc 1 755 6 discriminator 1 view .LVU1818
 6549 0016 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 6550 001a 5A07     		lsls	r2, r3, #29
 6551 001c 03D5     		bpl	.L525
 6552              	.LBB1788:
 6553              	.LBI1788:
 752:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 6554              		.loc 1 752 13 is_stmt 1 view .LVU1819
 6555              	.LBE1788:
 756:src/xeq.c     **** 	}
 6556              		.loc 1 756 3 view .LVU1820
 6557              	.LBB1797:
 6558              	.LBB1789:
 6559              	.LBI1789:
 747:src/xeq.c     **** 	if (get_lift())
 6560              		.loc 1 747 6 view .LVU1821
ARM GAS  /tmp/cc7LeJ71.s 			page 246


 6561              	.LBB1790:
 748:src/xeq.c     **** 		lift();
 6562              		.loc 1 748 2 view .LVU1822
 6563              	.LBB1791:
 6564              	.LBI1791:
 743:src/xeq.c     **** 	return State2.state_lift;
 6565              		.loc 1 743 12 view .LVU1823
 6566              	.LBB1792:
 744:src/xeq.c     **** }
 6567              		.loc 1 744 2 view .LVU1824
 744:src/xeq.c     **** }
 6568              		.loc 1 744 15 is_stmt 0 view .LVU1825
 6569 001e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 6570              	.LBE1792:
 6571              	.LBE1791:
 748:src/xeq.c     **** 		lift();
 6572              		.loc 1 748 5 view .LVU1826
 6573 0020 5B06     		lsls	r3, r3, #25
 6574 0022 00D4     		bmi	.L525
 6575              	.LBE1790:
 6576              	.LBE1789:
 6577              	.LBE1797:
 765:src/xeq.c     **** 
 6578              		.loc 1 765 1 view .LVU1827
 6579 0024 10BD     		pop	{r4, pc}
 6580              	.L525:
 6581              	.LBB1798:
 6582              	.LBB1795:
 6583              	.LBB1793:
 749:src/xeq.c     **** }
 6584              		.loc 1 749 3 is_stmt 1 view .LVU1828
 6585              	.LBE1793:
 6586              	.LBE1795:
 6587              	.LBE1798:
 765:src/xeq.c     **** 
 6588              		.loc 1 765 1 is_stmt 0 view .LVU1829
 6589 0026 BDE81040 		pop	{r4, lr}
 6590              		.cfi_remember_state
 6591              		.cfi_restore 14
 6592              		.cfi_restore 4
 6593              		.cfi_def_cfa_offset 0
 6594              	.LBB1799:
 6595              	.LBB1796:
 6596              	.LBB1794:
 749:src/xeq.c     **** }
 6597              		.loc 1 749 3 view .LVU1830
 6598 002a FFF7FEBF 		b	lift
 6599              	.LVL472:
 6600              	.L537:
 6601              		.cfi_restore_state
 6602              	.LBE1794:
 6603              	.LBE1796:
 6604              	.LBE1799:
 6605              	.LBB1800:
 6606              	.LBB1786:
 749:src/xeq.c     **** }
 6607              		.loc 1 749 3 is_stmt 1 view .LVU1831
ARM GAS  /tmp/cc7LeJ71.s 			page 247


 6608 002e FFF7FEFF 		bl	lift
 6609              	.LVL473:
 6610 0032 EAE7     		b	.L524
 6611              	.L539:
 6612              		.align	2
 6613              	.L538:
 6614 0034 00000000 		.word	StateWhileOn
 6615 0038 00000000 		.word	main_ram
 6616              	.LBE1786:
 6617              	.LBE1800:
 6618              		.cfi_endproc
 6619              	.LFE50:
 6621              		.section	.text.lower,"ax",%progbits
 6622              		.align	1
 6623              		.p2align 2,,3
 6624              		.syntax unified
 6625              		.thumb
 6626              		.thumb_func
 6627              		.fpu fpv4-sp-d16
 6629              	lower:
 6630              	.LFB53:
 775:src/xeq.c     **** 	const int n = stack_size();
 6631              		.loc 1 775 25 view -0
 6632              		.cfi_startproc
 6633              		@ args = 0, pretend = 0, frame = 0
 6634              		@ frame_needed = 0, uses_anonymous_args = 0
 776:src/xeq.c     **** 	int i;
 6635              		.loc 1 776 2 view .LVU1833
 6636              	.LBB1801:
 6637              	.LBI1801:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6638              		.loc 1 712 5 view .LVU1834
 6639              	.LBB1802:
 713:src/xeq.c     **** 		return 4;
 6640              		.loc 1 713 2 view .LVU1835
 6641              	.LBE1802:
 6642              	.LBE1801:
 775:src/xeq.c     **** 	const int n = stack_size();
 6643              		.loc 1 775 25 is_stmt 0 view .LVU1836
 6644 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 6645              		.cfi_def_cfa_offset 24
 6646              		.cfi_offset 4, -24
 6647              		.cfi_offset 5, -20
 6648              		.cfi_offset 6, -16
 6649              		.cfi_offset 7, -12
 6650              		.cfi_offset 8, -8
 6651              		.cfi_offset 14, -4
 6652              	.LBB1808:
 6653              	.LBB1805:
 713:src/xeq.c     **** 		return 4;
 6654              		.loc 1 713 8 view .LVU1837
 6655 0004 194F     		ldr	r7, .L551
 6656 0006 3B68     		ldr	r3, [r7]
 713:src/xeq.c     **** 		return 4;
 6657              		.loc 1 713 6 view .LVU1838
 6658 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/cc7LeJ71.s 			page 248


 6659              		.loc 1 713 5 view .LVU1839
 6660 000c 1207     		lsls	r2, r2, #28
 6661 000e 2BD5     		bpl	.L544
 6662              	.LBB1803:
 6663              	.LBI1803:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6664              		.loc 1 185 5 is_stmt 1 view .LVU1840
 6665              	.LBB1804:
 186:src/xeq.c     **** }
 6666              		.loc 1 186 2 view .LVU1841
 186:src/xeq.c     **** }
 6667              		.loc 1 186 9 is_stmt 0 view .LVU1842
 6668 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 6669              	.LBE1804:
 6670              	.LBE1803:
 713:src/xeq.c     **** 		return 4;
 6671              		.loc 1 713 27 view .LVU1843
 6672 0014 9B0B     		lsrs	r3, r3, #14
 6673 0016 032B     		cmp	r3, #3
 6674 0018 1ED0     		beq	.L550
 715:src/xeq.c     **** }
 6675              		.loc 1 715 9 view .LVU1844
 6676 001a 0826     		movs	r6, #8
 6677              	.L541:
 6678              	.LVL474:
 715:src/xeq.c     **** }
 6679              		.loc 1 715 9 view .LVU1845
 6680              	.LBE1805:
 6681              	.LBE1808:
 777:src/xeq.c     **** 
 6682              		.loc 1 777 2 is_stmt 1 view .LVU1846
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6683              		.loc 1 779 2 view .LVU1847
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6684              		.loc 1 779 12 view .LVU1848
 6685 001c 6336     		adds	r6, r6, #99
 6686              	.LVL475:
 6687              	.LBB1809:
 6688              	.LBB1806:
 714:src/xeq.c     **** 	return 8;
 6689              		.loc 1 714 10 is_stmt 0 view .LVU1849
 6690 001e 6424     		movs	r4, #100
 6691              	.LBE1806:
 6692              	.LBE1809:
 6693              	.LBB1810:
 6694              	.LBB1811:
 6695              	.LBB1812:
 6696              	.LBB1813:
1119:src/xeq.c     **** }
 6697              		.loc 1 1119 24 view .LVU1850
 6698 0020 44F20108 		movw	r8, #16385
 6699              	.LVL476:
 6700              	.L543:
1119:src/xeq.c     **** }
 6701              		.loc 1 1119 24 view .LVU1851
 6702              	.LBE1813:
 6703              	.LBE1812:
ARM GAS  /tmp/cc7LeJ71.s 			page 249


 6704              	.LBE1811:
 6705              	.LBE1810:
 780:src/xeq.c     **** }
 6706              		.loc 1 780 3 is_stmt 1 discriminator 3 view .LVU1852
 6707              	.LBB1820:
 6708              	.LBI1820:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6709              		.loc 1 718 11 discriminator 3 view .LVU1853
 6710              	.LBB1821:
 719:src/xeq.c     **** }
 6711              		.loc 1 719 2 discriminator 3 view .LVU1854
 719:src/xeq.c     **** }
 6712              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU1855
 6713 0024 2046     		mov	r0, r4
 6714 0026 FFF7FEFF 		bl	get_reg_n
 6715              	.LVL477:
 6716 002a 0134     		adds	r4, r4, #1
 6717              	.LVL478:
 719:src/xeq.c     **** }
 6718              		.loc 1 719 9 discriminator 3 view .LVU1856
 6719 002c 0546     		mov	r5, r0
 6720              	.LBE1821:
 6721              	.LBE1820:
 6722              	.LBB1822:
 6723              	.LBB1823:
 6724 002e 2046     		mov	r0, r4
 6725              	.LVL479:
 719:src/xeq.c     **** }
 6726              		.loc 1 719 9 discriminator 3 view .LVU1857
 6727              	.LBE1823:
 6728              	.LBI1822:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6729              		.loc 1 718 11 is_stmt 1 discriminator 3 view .LVU1858
 6730              	.LBB1824:
 719:src/xeq.c     **** }
 6731              		.loc 1 719 2 discriminator 3 view .LVU1859
 719:src/xeq.c     **** }
 6732              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU1860
 6733 0030 FFF7FEFF 		bl	get_reg_n
 6734              	.LVL480:
 719:src/xeq.c     **** }
 6735              		.loc 1 719 9 discriminator 3 view .LVU1861
 6736              	.LBE1824:
 6737              	.LBE1822:
 6738              	.LBB1826:
 6739              	.LBB1818:
 6740              	.LBB1816:
 6741              	.LBB1814:
1119:src/xeq.c     **** }
 6742              		.loc 1 1119 24 discriminator 3 view .LVU1862
 6743 0034 3B68     		ldr	r3, [r7]
 6744 0036 B3F8E837 		ldrh	r3, [r3, #2024]
 6745              	.LBE1814:
 6746              	.LBE1816:
 727:src/xeq.c     **** }
 6747              		.loc 1 727 2 discriminator 3 view .LVU1863
 6748 003a 08EA0303 		and	r3, r8, r3
ARM GAS  /tmp/cc7LeJ71.s 			page 250


 6749 003e B3F5804F 		cmp	r3, #16384
 6750              	.LBE1818:
 6751              	.LBE1826:
 6752              	.LBB1827:
 6753              	.LBB1825:
 719:src/xeq.c     **** }
 6754              		.loc 1 719 9 discriminator 3 view .LVU1864
 6755 0042 0146     		mov	r1, r0
 6756              	.LVL481:
 719:src/xeq.c     **** }
 6757              		.loc 1 719 9 discriminator 3 view .LVU1865
 6758              	.LBE1825:
 6759              	.LBE1827:
 6760              	.LBB1828:
 6761              	.LBI1810:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6762              		.loc 1 726 6 is_stmt 1 discriminator 3 view .LVU1866
 6763              	.LBB1819:
 727:src/xeq.c     **** }
 6764              		.loc 1 727 2 discriminator 3 view .LVU1867
 6765              	.LBB1817:
 6766              	.LBI1812:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 6767              		.loc 1 1118 5 discriminator 3 view .LVU1868
 6768              	.LBB1815:
1119:src/xeq.c     **** }
 6769              		.loc 1 1119 2 discriminator 3 view .LVU1869
 6770              	.LBE1815:
 6771              	.LBE1817:
 727:src/xeq.c     **** }
 6772              		.loc 1 727 2 is_stmt 0 discriminator 3 view .LVU1870
 6773 0044 0CBF     		ite	eq
 6774 0046 1022     		moveq	r2, #16
 6775 0048 0822     		movne	r2, #8
 6776 004a 2846     		mov	r0, r5
 6777              	.LVL482:
 727:src/xeq.c     **** }
 6778              		.loc 1 727 2 discriminator 3 view .LVU1871
 6779 004c FFF7FEFF 		bl	xcopy
 6780              	.LVL483:
 727:src/xeq.c     **** }
 6781              		.loc 1 727 2 discriminator 3 view .LVU1872
 6782              	.LBE1819:
 6783              	.LBE1828:
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6784              		.loc 1 779 17 is_stmt 1 discriminator 3 view .LVU1873
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6785              		.loc 1 779 12 discriminator 3 view .LVU1874
 779:src/xeq.c     **** 		copyreg(get_stack(i-1), get_stack(i));
 6786              		.loc 1 779 2 is_stmt 0 discriminator 3 view .LVU1875
 6787 0050 B442     		cmp	r4, r6
 6788 0052 E7D1     		bne	.L543
 781:src/xeq.c     **** 
 6789              		.loc 1 781 1 view .LVU1876
 6790 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 6791              	.LVL484:
 6792              	.L550:
ARM GAS  /tmp/cc7LeJ71.s 			page 251


 6793              	.LBB1829:
 6794              	.LBB1807:
 713:src/xeq.c     **** 		return 4;
 6795              		.loc 1 713 44 view .LVU1877
 6796 0058 054B     		ldr	r3, .L551+4
 713:src/xeq.c     **** 		return 4;
 6797              		.loc 1 713 41 view .LVU1878
 6798 005a 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 6799              		.loc 1 714 10 view .LVU1879
 6800 005e 002B     		cmp	r3, #0
 6801 0060 B4BF     		ite	lt
 6802 0062 0826     		movlt	r6, #8
 6803 0064 0426     		movge	r6, #4
 6804 0066 D9E7     		b	.L541
 6805              	.L544:
 6806 0068 0426     		movs	r6, #4
 6807 006a D7E7     		b	.L541
 6808              	.L552:
 6809              		.align	2
 6810              	.L551:
 6811 006c 00000000 		.word	main_ram
 6812 0070 00000000 		.word	XromParams
 6813              	.LBE1807:
 6814              	.LBE1829:
 6815              		.cfi_endproc
 6816              	.LFE53:
 6818              		.section	.text.get_stack_top,"ax",%progbits
 6819              		.align	1
 6820              		.p2align 2,,3
 6821              		.syntax unified
 6822              		.thumb
 6823              		.thumb_func
 6824              		.fpu fpv4-sp-d16
 6826              	get_stack_top:
 6827              	.LFB44:
 722:src/xeq.c     **** 	return get_stack(stack_size()-1);
 6828              		.loc 1 722 38 is_stmt 1 view -0
 6829              		.cfi_startproc
 6830              		@ args = 0, pretend = 0, frame = 0
 6831              		@ frame_needed = 0, uses_anonymous_args = 0
 6832              		@ link register save eliminated.
 723:src/xeq.c     **** }
 6833              		.loc 1 723 2 view .LVU1881
 6834              	.LBB1830:
 6835              	.LBI1830:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 6836              		.loc 1 712 5 view .LVU1882
 6837              	.LBB1831:
 713:src/xeq.c     **** 		return 4;
 6838              		.loc 1 713 2 view .LVU1883
 713:src/xeq.c     **** 		return 4;
 6839              		.loc 1 713 8 is_stmt 0 view .LVU1884
 6840 0000 0C4B     		ldr	r3, .L559
 6841 0002 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 6842              		.loc 1 713 6 view .LVU1885
ARM GAS  /tmp/cc7LeJ71.s 			page 252


 6843 0004 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 6844              		.loc 1 713 5 view .LVU1886
 6845 0008 1207     		lsls	r2, r2, #28
 6846 000a 10D5     		bpl	.L555
 6847              	.LBB1832:
 6848              	.LBI1832:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 6849              		.loc 1 185 5 is_stmt 1 view .LVU1887
 6850              	.LBB1833:
 186:src/xeq.c     **** }
 6851              		.loc 1 186 2 view .LVU1888
 186:src/xeq.c     **** }
 6852              		.loc 1 186 9 is_stmt 0 view .LVU1889
 6853 000c B3F8E037 		ldrh	r3, [r3, #2016]
 6854              	.LBE1833:
 6855              	.LBE1832:
 713:src/xeq.c     **** 		return 4;
 6856              		.loc 1 713 27 view .LVU1890
 6857 0010 9B0B     		lsrs	r3, r3, #14
 6858 0012 032B     		cmp	r3, #3
 6859 0014 02D0     		beq	.L558
 6860 0016 6B20     		movs	r0, #107
 6861              	.LBE1831:
 6862              	.LBE1830:
 6863              	.LBB1836:
 6864              	.LBI1836:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6865              		.loc 1 718 11 is_stmt 1 view .LVU1891
 6866              	.LBB1837:
 719:src/xeq.c     **** }
 6867              		.loc 1 719 2 view .LVU1892
 719:src/xeq.c     **** }
 6868              		.loc 1 719 9 is_stmt 0 view .LVU1893
 6869 0018 FFF7FEBF 		b	get_reg_n
 6870              	.LVL485:
 6871              	.L558:
 6872              	.LBE1837:
 6873              	.LBE1836:
 6874              	.LBB1840:
 6875              	.LBB1834:
 713:src/xeq.c     **** 		return 4;
 6876              		.loc 1 713 44 view .LVU1894
 6877 001c 064B     		ldr	r3, .L559+4
 713:src/xeq.c     **** 		return 4;
 6878              		.loc 1 713 41 view .LVU1895
 6879 001e 93F90130 		ldrsb	r3, [r3, #1]
 6880 0022 002B     		cmp	r3, #0
 6881 0024 B4BF     		ite	lt
 6882 0026 6B20     		movlt	r0, #107
 6883 0028 6720     		movge	r0, #103
 6884              	.LBE1834:
 6885              	.LBE1840:
 6886              	.LBB1841:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6887              		.loc 1 718 11 is_stmt 1 view .LVU1896
 6888              	.LBB1838:
ARM GAS  /tmp/cc7LeJ71.s 			page 253


 719:src/xeq.c     **** }
 6889              		.loc 1 719 2 view .LVU1897
 719:src/xeq.c     **** }
 6890              		.loc 1 719 9 is_stmt 0 view .LVU1898
 6891 002a FFF7FEBF 		b	get_reg_n
 6892              	.LVL486:
 6893              	.L555:
 6894              	.LBE1838:
 6895              	.LBE1841:
 6896              	.LBB1842:
 6897              	.LBB1835:
 6898 002e 6720     		movs	r0, #103
 6899              	.LBE1835:
 6900              	.LBE1842:
 6901              	.LBB1843:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 6902              		.loc 1 718 11 is_stmt 1 view .LVU1899
 6903              	.LBB1839:
 719:src/xeq.c     **** }
 6904              		.loc 1 719 2 view .LVU1900
 719:src/xeq.c     **** }
 6905              		.loc 1 719 9 is_stmt 0 view .LVU1901
 6906 0030 FFF7FEBF 		b	get_reg_n
 6907              	.LVL487:
 6908              	.L560:
 6909              		.align	2
 6910              	.L559:
 6911 0034 00000000 		.word	main_ram
 6912 0038 00000000 		.word	XromParams
 6913              	.LBE1839:
 6914              	.LBE1843:
 6915              		.cfi_endproc
 6916              	.LFE44:
 6918              		.section	.text.roll_down,"ax",%progbits
 6919              		.align	1
 6920              		.p2align 2,,3
 6921              		.global	roll_down
 6922              		.syntax unified
 6923              		.thumb
 6924              		.thumb_func
 6925              		.fpu fpv4-sp-d16
 6927              	roll_down:
 6928              	.LVL488:
 6929              	.LFB70:
 889:src/xeq.c     **** 	REGISTER r;
 6930              		.loc 1 889 31 is_stmt 1 view -0
 6931              		.cfi_startproc
 6932              		@ args = 0, pretend = 0, frame = 16
 6933              		@ frame_needed = 0, uses_anonymous_args = 0
 890:src/xeq.c     **** 	copyreg(&r, StackBase);
 6934              		.loc 1 890 2 view .LVU1903
 891:src/xeq.c     **** 	lower();
 6935              		.loc 1 891 2 view .LVU1904
 889:src/xeq.c     **** 	REGISTER r;
 6936              		.loc 1 889 31 is_stmt 0 view .LVU1905
 6937 0000 30B5     		push	{r4, r5, lr}
 6938              		.cfi_def_cfa_offset 12
ARM GAS  /tmp/cc7LeJ71.s 			page 254


 6939              		.cfi_offset 4, -12
 6940              		.cfi_offset 5, -8
 6941              		.cfi_offset 14, -4
 6942              	.LBB1844:
 6943              	.LBB1845:
 6944              	.LBB1846:
 6945              	.LBB1847:
1119:src/xeq.c     **** }
 6946              		.loc 1 1119 24 view .LVU1906
 6947 0002 124D     		ldr	r5, .L567
 6948              	.LBE1847:
 6949              	.LBE1846:
 6950              	.LBE1845:
 6951              	.LBE1844:
 891:src/xeq.c     **** 	lower();
 6952              		.loc 1 891 2 view .LVU1907
 6953 0004 124A     		ldr	r2, .L567+4
 6954              	.LBB1856:
 6955              	.LBB1854:
 6956              	.LBB1851:
 6957              	.LBB1848:
1119:src/xeq.c     **** }
 6958              		.loc 1 1119 24 view .LVU1908
 6959 0006 2B68     		ldr	r3, [r5]
 6960              	.LBE1848:
 6961              	.LBE1851:
 727:src/xeq.c     **** }
 6962              		.loc 1 727 2 view .LVU1909
 6963 0008 1168     		ldr	r1, [r2]
 6964              	.LBB1852:
 6965              	.LBB1849:
1119:src/xeq.c     **** }
 6966              		.loc 1 1119 24 view .LVU1910
 6967 000a B3F8E837 		ldrh	r3, [r3, #2024]
 6968 000e 44F20104 		movw	r4, #16385
 6969              	.LBE1849:
 6970              	.LBE1852:
 727:src/xeq.c     **** }
 6971              		.loc 1 727 2 view .LVU1911
 6972 0012 2340     		ands	r3, r3, r4
 6973              	.LBE1854:
 6974              	.LBE1856:
 889:src/xeq.c     **** 	REGISTER r;
 6975              		.loc 1 889 31 view .LVU1912
 6976 0014 85B0     		sub	sp, sp, #20
 6977              		.cfi_def_cfa_offset 32
 6978              	.LVL489:
 6979              	.LBB1857:
 6980              	.LBI1844:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 6981              		.loc 1 726 6 is_stmt 1 view .LVU1913
 6982              	.LBB1855:
 727:src/xeq.c     **** }
 6983              		.loc 1 727 2 view .LVU1914
 6984              	.LBB1853:
 6985              	.LBI1846:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
ARM GAS  /tmp/cc7LeJ71.s 			page 255


 6986              		.loc 1 1118 5 view .LVU1915
 6987              	.LBB1850:
1119:src/xeq.c     **** }
 6988              		.loc 1 1119 2 view .LVU1916
 6989              	.LBE1850:
 6990              	.LBE1853:
 727:src/xeq.c     **** }
 6991              		.loc 1 727 2 is_stmt 0 view .LVU1917
 6992 0016 B3F5804F 		cmp	r3, #16384
 6993 001a 0CBF     		ite	eq
 6994 001c 1022     		moveq	r2, #16
 6995 001e 0822     		movne	r2, #8
 6996 0020 6846     		mov	r0, sp
 6997              	.LVL490:
 727:src/xeq.c     **** }
 6998              		.loc 1 727 2 view .LVU1918
 6999 0022 FFF7FEFF 		bl	xcopy
 7000              	.LVL491:
 727:src/xeq.c     **** }
 7001              		.loc 1 727 2 view .LVU1919
 7002              	.LBE1855:
 7003              	.LBE1857:
 892:src/xeq.c     **** 	copyreg(get_stack_top(), &r);
 7004              		.loc 1 892 2 is_stmt 1 view .LVU1920
 7005 0026 FFF7FEFF 		bl	lower
 7006              	.LVL492:
 893:src/xeq.c     **** }
 7007              		.loc 1 893 2 view .LVU1921
 7008 002a FFF7FEFF 		bl	get_stack_top
 7009              	.LVL493:
 7010              	.LBB1858:
 7011              	.LBI1858:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7012              		.loc 1 726 6 view .LVU1922
 7013              	.LBB1859:
 727:src/xeq.c     **** }
 7014              		.loc 1 727 2 view .LVU1923
 7015              	.LBB1860:
 7016              	.LBI1860:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7017              		.loc 1 1118 5 view .LVU1924
 7018              	.LBB1861:
1119:src/xeq.c     **** }
 7019              		.loc 1 1119 2 view .LVU1925
1119:src/xeq.c     **** }
 7020              		.loc 1 1119 24 is_stmt 0 view .LVU1926
 7021 002e 2B68     		ldr	r3, [r5]
 7022 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7023              	.LBE1861:
 7024              	.LBE1860:
 727:src/xeq.c     **** }
 7025              		.loc 1 727 2 view .LVU1927
 7026 0034 1C40     		ands	r4, r4, r3
 7027 0036 B4F5804F 		cmp	r4, #16384
 7028 003a 6946     		mov	r1, sp
 7029 003c 0CBF     		ite	eq
 7030 003e 1022     		moveq	r2, #16
ARM GAS  /tmp/cc7LeJ71.s 			page 256


 7031 0040 0822     		movne	r2, #8
 7032 0042 FFF7FEFF 		bl	xcopy
 7033              	.LVL494:
 727:src/xeq.c     **** }
 7034              		.loc 1 727 2 view .LVU1928
 7035              	.LBE1859:
 7036              	.LBE1858:
 894:src/xeq.c     **** 
 7037              		.loc 1 894 1 view .LVU1929
 7038 0046 05B0     		add	sp, sp, #20
 7039              		.cfi_def_cfa_offset 12
 7040              		@ sp needed
 7041 0048 30BD     		pop	{r4, r5, pc}
 7042              	.L568:
 7043 004a 00BF     		.align	2
 7044              	.L567:
 7045 004c 00000000 		.word	main_ram
 7046 0050 00000000 		.word	StackBase
 7047              		.cfi_endproc
 7048              	.LFE70:
 7050              		.section	.text.cpx_roll_down,"ax",%progbits
 7051              		.align	1
 7052              		.p2align 2,,3
 7053              		.global	cpx_roll_down
 7054              		.syntax unified
 7055              		.thumb
 7056              		.thumb_func
 7057              		.fpu fpv4-sp-d16
 7059              	cpx_roll_down:
 7060              	.LVL495:
 7061              	.LFB72:
 903:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7062              		.loc 1 903 35 is_stmt 1 view -0
 7063              		.cfi_startproc
 7064              		@ args = 0, pretend = 0, frame = 0
 7065              		@ frame_needed = 0, uses_anonymous_args = 0
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7066              		.loc 1 904 2 view .LVU1931
 903:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7067              		.loc 1 903 35 is_stmt 0 view .LVU1932
 7068 0000 08B5     		push	{r3, lr}
 7069              		.cfi_def_cfa_offset 8
 7070              		.cfi_offset 3, -8
 7071              		.cfi_offset 14, -4
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7072              		.loc 1 904 2 view .LVU1933
 7073 0002 0720     		movs	r0, #7
 7074              	.LVL496:
 904:src/xeq.c     **** 	roll_down(OP_RDOWN);
 7075              		.loc 1 904 2 view .LVU1934
 7076 0004 FFF7FEFF 		bl	roll_down
 7077              	.LVL497:
 905:src/xeq.c     **** 	set_was_complex();
 7078              		.loc 1 905 2 is_stmt 1 view .LVU1935
 7079 0008 0720     		movs	r0, #7
 7080 000a FFF7FEFF 		bl	roll_down
 7081              	.LVL498:
ARM GAS  /tmp/cc7LeJ71.s 			page 257


 906:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7082              		.loc 1 906 2 view .LVU1936
 7083              	.LBB1862:
 7084              	.LBI1862:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 7085              		.loc 1 539 13 view .LVU1937
 7086              	.LBB1863:
 540:src/xeq.c     **** }
 7087              		.loc 1 540 2 view .LVU1938
 540:src/xeq.c     **** }
 7088              		.loc 1 540 20 is_stmt 0 view .LVU1939
 7089 000e 074B     		ldr	r3, .L571
 7090              	.LBE1863:
 7091              	.LBE1862:
 908:src/xeq.c     **** #endif
 7092              		.loc 1 908 2 view .LVU1940
 7093 0010 074A     		ldr	r2, .L571+4
 7094              	.LBB1866:
 7095              	.LBB1864:
 540:src/xeq.c     **** }
 7096              		.loc 1 540 20 view .LVU1941
 7097 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7098              	.LBE1864:
 7099              	.LBE1866:
 908:src/xeq.c     **** #endif
 7100              		.loc 1 908 2 view .LVU1942
 7101 0014 1268     		ldr	r2, [r2]
 7102              	.LBB1867:
 7103              	.LBB1865:
 540:src/xeq.c     **** }
 7104              		.loc 1 540 20 view .LVU1943
 7105 0016 0120     		movs	r0, #1
 7106 0018 60F38711 		bfi	r1, r0, #6, #2
 7107 001c 1975     		strb	r1, [r3, #20]
 7108              	.LBE1865:
 7109              	.LBE1867:
 908:src/xeq.c     **** #endif
 7110              		.loc 1 908 2 is_stmt 1 view .LVU1944
 7111 001e 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 7112 0022 43F01003 		orr	r3, r3, #16
 7113 0026 82F8DE37 		strb	r3, [r2, #2014]
 910:src/xeq.c     **** 
 7114              		.loc 1 910 1 is_stmt 0 view .LVU1945
 7115 002a 08BD     		pop	{r3, pc}
 7116              	.L572:
 7117              		.align	2
 7118              	.L571:
 7119 002c 00000000 		.word	StateWhileOn
 7120 0030 00000000 		.word	main_ram
 7121              		.cfi_endproc
 7122              	.LFE72:
 7124              		.section	.text.roll_up,"ax",%progbits
 7125              		.align	1
 7126              		.p2align 2,,3
 7127              		.global	roll_up
 7128              		.syntax unified
 7129              		.thumb
ARM GAS  /tmp/cc7LeJ71.s 			page 258


 7130              		.thumb_func
 7131              		.fpu fpv4-sp-d16
 7133              	roll_up:
 7134              	.LVL499:
 7135              	.LFB71:
 896:src/xeq.c     **** 	REGISTER r;
 7136              		.loc 1 896 29 is_stmt 1 view -0
 7137              		.cfi_startproc
 7138              		@ args = 0, pretend = 0, frame = 16
 7139              		@ frame_needed = 0, uses_anonymous_args = 0
 897:src/xeq.c     **** 	copyreg(&r, get_stack_top());
 7140              		.loc 1 897 2 view .LVU1947
 898:src/xeq.c     **** 	lift();
 7141              		.loc 1 898 2 view .LVU1948
 896:src/xeq.c     **** 	REGISTER r;
 7142              		.loc 1 896 29 is_stmt 0 view .LVU1949
 7143 0000 30B5     		push	{r4, r5, lr}
 7144              		.cfi_def_cfa_offset 12
 7145              		.cfi_offset 4, -12
 7146              		.cfi_offset 5, -8
 7147              		.cfi_offset 14, -4
 7148              	.LBB1868:
 7149              	.LBB1869:
 7150              	.LBB1870:
 7151              	.LBB1871:
1119:src/xeq.c     **** }
 7152              		.loc 1 1119 24 view .LVU1950
 7153 0002 124D     		ldr	r5, .L579
 7154              	.LBE1871:
 7155              	.LBE1870:
 7156              	.LBE1869:
 7157              	.LBE1868:
 896:src/xeq.c     **** 	REGISTER r;
 7158              		.loc 1 896 29 view .LVU1951
 7159 0004 85B0     		sub	sp, sp, #20
 7160              		.cfi_def_cfa_offset 32
 898:src/xeq.c     **** 	lift();
 7161              		.loc 1 898 14 view .LVU1952
 7162 0006 FFF7FEFF 		bl	get_stack_top
 7163              	.LVL500:
 7164              	.LBB1878:
 7165              	.LBB1876:
 7166              	.LBB1874:
 7167              	.LBB1872:
1119:src/xeq.c     **** }
 7168              		.loc 1 1119 24 view .LVU1953
 7169 000a 2B68     		ldr	r3, [r5]
 7170 000c B3F8E837 		ldrh	r3, [r3, #2024]
 7171 0010 44F20104 		movw	r4, #16385
 7172              	.LBE1872:
 7173              	.LBE1874:
 727:src/xeq.c     **** }
 7174              		.loc 1 727 2 view .LVU1954
 7175 0014 2340     		ands	r3, r3, r4
 7176 0016 B3F5804F 		cmp	r3, #16384
 7177              	.LBE1876:
 7178              	.LBE1878:
ARM GAS  /tmp/cc7LeJ71.s 			page 259


 898:src/xeq.c     **** 	lift();
 7179              		.loc 1 898 14 view .LVU1955
 7180 001a 0146     		mov	r1, r0
 7181              	.LVL501:
 7182              	.LBB1879:
 7183              	.LBI1868:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7184              		.loc 1 726 6 is_stmt 1 view .LVU1956
 7185              	.LBB1877:
 727:src/xeq.c     **** }
 7186              		.loc 1 727 2 view .LVU1957
 7187              	.LBB1875:
 7188              	.LBI1870:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7189              		.loc 1 1118 5 view .LVU1958
 7190              	.LBB1873:
1119:src/xeq.c     **** }
 7191              		.loc 1 1119 2 view .LVU1959
 7192              	.LBE1873:
 7193              	.LBE1875:
 727:src/xeq.c     **** }
 7194              		.loc 1 727 2 is_stmt 0 view .LVU1960
 7195 001c 0CBF     		ite	eq
 7196 001e 1022     		moveq	r2, #16
 7197 0020 0822     		movne	r2, #8
 7198 0022 6846     		mov	r0, sp
 7199              	.LVL502:
 727:src/xeq.c     **** }
 7200              		.loc 1 727 2 view .LVU1961
 7201 0024 FFF7FEFF 		bl	xcopy
 7202              	.LVL503:
 727:src/xeq.c     **** }
 7203              		.loc 1 727 2 view .LVU1962
 7204              	.LBE1877:
 7205              	.LBE1879:
 899:src/xeq.c     **** 	copyreg(StackBase, &r);
 7206              		.loc 1 899 2 is_stmt 1 view .LVU1963
 7207 0028 FFF7FEFF 		bl	lift
 7208              	.LVL504:
 900:src/xeq.c     **** }
 7209              		.loc 1 900 2 view .LVU1964
 7210              	.LBB1880:
 7211              	.LBB1881:
 7212              	.LBB1882:
 7213              	.LBB1883:
1119:src/xeq.c     **** }
 7214              		.loc 1 1119 24 is_stmt 0 view .LVU1965
 7215 002c 2B68     		ldr	r3, [r5]
 7216              	.LBE1883:
 7217              	.LBE1882:
 7218              	.LBE1881:
 7219              	.LBE1880:
 900:src/xeq.c     **** }
 7220              		.loc 1 900 2 view .LVU1966
 7221 002e 084A     		ldr	r2, .L579+4
 7222              	.LVL505:
 7223              	.LBB1887:
ARM GAS  /tmp/cc7LeJ71.s 			page 260


 7224              	.LBI1880:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7225              		.loc 1 726 6 is_stmt 1 view .LVU1967
 7226              	.LBB1886:
 727:src/xeq.c     **** }
 7227              		.loc 1 727 2 view .LVU1968
 7228              	.LBB1885:
 7229              	.LBI1882:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7230              		.loc 1 1118 5 view .LVU1969
 7231              	.LBB1884:
1119:src/xeq.c     **** }
 7232              		.loc 1 1119 2 view .LVU1970
1119:src/xeq.c     **** }
 7233              		.loc 1 1119 24 is_stmt 0 view .LVU1971
 7234 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7235              	.LBE1884:
 7236              	.LBE1885:
 727:src/xeq.c     **** }
 7237              		.loc 1 727 2 view .LVU1972
 7238 0034 1068     		ldr	r0, [r2]
 7239 0036 1C40     		ands	r4, r4, r3
 7240 0038 B4F5804F 		cmp	r4, #16384
 7241 003c 6946     		mov	r1, sp
 7242 003e 0CBF     		ite	eq
 7243 0040 1022     		moveq	r2, #16
 7244              	.LVL506:
 727:src/xeq.c     **** }
 7245              		.loc 1 727 2 view .LVU1973
 7246 0042 0822     		movne	r2, #8
 7247 0044 FFF7FEFF 		bl	xcopy
 7248              	.LVL507:
 727:src/xeq.c     **** }
 7249              		.loc 1 727 2 view .LVU1974
 7250              	.LBE1886:
 7251              	.LBE1887:
 901:src/xeq.c     **** 
 7252              		.loc 1 901 1 view .LVU1975
 7253 0048 05B0     		add	sp, sp, #20
 7254              		.cfi_def_cfa_offset 12
 7255              		@ sp needed
 7256 004a 30BD     		pop	{r4, r5, pc}
 7257              	.L580:
 7258              		.align	2
 7259              	.L579:
 7260 004c 00000000 		.word	main_ram
 7261 0050 00000000 		.word	StackBase
 7262              		.cfi_endproc
 7263              	.LFE71:
 7265              		.section	.text.cpx_roll_up,"ax",%progbits
 7266              		.align	1
 7267              		.p2align 2,,3
 7268              		.global	cpx_roll_up
 7269              		.syntax unified
 7270              		.thumb
 7271              		.thumb_func
 7272              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc7LeJ71.s 			page 261


 7274              	cpx_roll_up:
 7275              	.LVL508:
 7276              	.LFB73:
 912:src/xeq.c     **** 	roll_up(OP_RUP);
 7277              		.loc 1 912 33 is_stmt 1 view -0
 7278              		.cfi_startproc
 7279              		@ args = 0, pretend = 0, frame = 0
 7280              		@ frame_needed = 0, uses_anonymous_args = 0
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 7281              		.loc 1 913 2 view .LVU1977
 912:src/xeq.c     **** 	roll_up(OP_RUP);
 7282              		.loc 1 912 33 is_stmt 0 view .LVU1978
 7283 0000 08B5     		push	{r3, lr}
 7284              		.cfi_def_cfa_offset 8
 7285              		.cfi_offset 3, -8
 7286              		.cfi_offset 14, -4
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 7287              		.loc 1 913 2 view .LVU1979
 7288 0002 0820     		movs	r0, #8
 7289              	.LVL509:
 913:src/xeq.c     **** 	roll_up(OP_RUP);
 7290              		.loc 1 913 2 view .LVU1980
 7291 0004 FFF7FEFF 		bl	roll_up
 7292              	.LVL510:
 914:src/xeq.c     **** 	set_was_complex();
 7293              		.loc 1 914 2 is_stmt 1 view .LVU1981
 7294 0008 0820     		movs	r0, #8
 7295 000a FFF7FEFF 		bl	roll_up
 7296              	.LVL511:
 915:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 7297              		.loc 1 915 2 view .LVU1982
 7298              	.LBB1888:
 7299              	.LBI1888:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 7300              		.loc 1 539 13 view .LVU1983
 7301              	.LBB1889:
 540:src/xeq.c     **** }
 7302              		.loc 1 540 2 view .LVU1984
 540:src/xeq.c     **** }
 7303              		.loc 1 540 20 is_stmt 0 view .LVU1985
 7304 000e 074B     		ldr	r3, .L583
 7305              	.LBE1889:
 7306              	.LBE1888:
 917:src/xeq.c     **** #endif
 7307              		.loc 1 917 2 view .LVU1986
 7308 0010 074A     		ldr	r2, .L583+4
 7309              	.LBB1892:
 7310              	.LBB1890:
 540:src/xeq.c     **** }
 7311              		.loc 1 540 20 view .LVU1987
 7312 0012 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 7313              	.LBE1890:
 7314              	.LBE1892:
 917:src/xeq.c     **** #endif
 7315              		.loc 1 917 2 view .LVU1988
 7316 0014 1268     		ldr	r2, [r2]
 7317              	.LBB1893:
ARM GAS  /tmp/cc7LeJ71.s 			page 262


 7318              	.LBB1891:
 540:src/xeq.c     **** }
 7319              		.loc 1 540 20 view .LVU1989
 7320 0016 0120     		movs	r0, #1
 7321 0018 60F38711 		bfi	r1, r0, #6, #2
 7322 001c 1975     		strb	r1, [r3, #20]
 7323              	.LBE1891:
 7324              	.LBE1893:
 917:src/xeq.c     **** #endif
 7325              		.loc 1 917 2 is_stmt 1 view .LVU1990
 7326 001e 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 7327 0022 43F01003 		orr	r3, r3, #16
 7328 0026 82F8DE37 		strb	r3, [r2, #2014]
 919:src/xeq.c     **** 
 7329              		.loc 1 919 1 is_stmt 0 view .LVU1991
 7330 002a 08BD     		pop	{r3, pc}
 7331              	.L584:
 7332              		.align	2
 7333              	.L583:
 7334 002c 00000000 		.word	StateWhileOn
 7335 0030 00000000 		.word	main_ram
 7336              		.cfi_endproc
 7337              	.LFE73:
 7339              		.section	.text.fill,"ax",%progbits
 7340              		.align	1
 7341              		.p2align 2,,3
 7342              		.global	fill
 7343              		.syntax unified
 7344              		.thumb
 7345              		.thumb_func
 7346              		.fpu fpv4-sp-d16
 7348              	fill:
 7349              	.LVL512:
 7350              	.LFB80:
1096:src/xeq.c     **** 	const int n = stack_size();
 7351              		.loc 1 1096 26 is_stmt 1 view -0
 7352              		.cfi_startproc
 7353              		@ args = 0, pretend = 0, frame = 0
 7354              		@ frame_needed = 0, uses_anonymous_args = 0
1097:src/xeq.c     **** 	int i;
 7355              		.loc 1 1097 2 view .LVU1993
 7356              	.LBB1894:
 7357              	.LBI1894:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7358              		.loc 1 712 5 view .LVU1994
 7359              	.LBB1895:
 713:src/xeq.c     **** 		return 4;
 7360              		.loc 1 713 2 view .LVU1995
 7361              	.LBE1895:
 7362              	.LBE1894:
1096:src/xeq.c     **** 	const int n = stack_size();
 7363              		.loc 1 1096 26 is_stmt 0 view .LVU1996
 7364 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7365              		.cfi_def_cfa_offset 24
 7366              		.cfi_offset 4, -24
 7367              		.cfi_offset 5, -20
 7368              		.cfi_offset 6, -16
ARM GAS  /tmp/cc7LeJ71.s 			page 263


 7369              		.cfi_offset 7, -12
 7370              		.cfi_offset 8, -8
 7371              		.cfi_offset 14, -4
 7372              	.LBB1901:
 7373              	.LBB1898:
 713:src/xeq.c     **** 		return 4;
 7374              		.loc 1 713 8 view .LVU1997
 7375 0004 174E     		ldr	r6, .L596
 7376 0006 3368     		ldr	r3, [r6]
 713:src/xeq.c     **** 		return 4;
 7377              		.loc 1 713 6 view .LVU1998
 7378 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 7379              		.loc 1 713 5 view .LVU1999
 7380 000c 1207     		lsls	r2, r2, #28
 7381 000e 27D5     		bpl	.L589
 7382              	.LBB1896:
 7383              	.LBI1896:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 7384              		.loc 1 185 5 is_stmt 1 view .LVU2000
 7385              	.LBB1897:
 186:src/xeq.c     **** }
 7386              		.loc 1 186 2 view .LVU2001
 186:src/xeq.c     **** }
 7387              		.loc 1 186 9 is_stmt 0 view .LVU2002
 7388 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7389              	.LBE1897:
 7390              	.LBE1896:
 713:src/xeq.c     **** 		return 4;
 7391              		.loc 1 713 27 view .LVU2003
 7392 0014 9B0B     		lsrs	r3, r3, #14
 7393 0016 032B     		cmp	r3, #3
 7394 0018 1AD0     		beq	.L595
 715:src/xeq.c     **** }
 7395              		.loc 1 715 9 view .LVU2004
 7396 001a 0825     		movs	r5, #8
 7397              	.L586:
 7398              	.LVL513:
 715:src/xeq.c     **** }
 7399              		.loc 1 715 9 view .LVU2005
 7400              	.LBE1898:
 7401              	.LBE1901:
1098:src/xeq.c     **** 
 7402              		.loc 1 1098 2 is_stmt 1 view .LVU2006
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7403              		.loc 1 1100 2 view .LVU2007
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7404              		.loc 1 1100 12 view .LVU2008
 7405 001c 124F     		ldr	r7, .L596+4
 7406 001e 6435     		adds	r5, r5, #100
 7407              	.LVL514:
 7408              	.LBB1902:
 7409              	.LBB1899:
 714:src/xeq.c     **** 	return 8;
 7410              		.loc 1 714 10 is_stmt 0 view .LVU2009
 7411 0020 6524     		movs	r4, #101
 7412              	.LBE1899:
ARM GAS  /tmp/cc7LeJ71.s 			page 264


 7413              	.LBE1902:
 7414              	.LBB1903:
 7415              	.LBB1904:
 7416              	.LBB1905:
 7417              	.LBB1906:
1119:src/xeq.c     **** }
 7418              		.loc 1 1119 24 view .LVU2010
 7419 0022 44F20108 		movw	r8, #16385
 7420              	.LVL515:
 7421              	.L588:
1119:src/xeq.c     **** }
 7422              		.loc 1 1119 24 view .LVU2011
 7423              	.LBE1906:
 7424              	.LBE1905:
 7425              	.LBE1904:
 7426              	.LBE1903:
1101:src/xeq.c     **** }
 7427              		.loc 1 1101 3 is_stmt 1 view .LVU2012
 7428              	.LBB1912:
 7429              	.LBI1912:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7430              		.loc 1 718 11 view .LVU2013
 7431              	.LBB1913:
 719:src/xeq.c     **** }
 7432              		.loc 1 719 2 view .LVU2014
 719:src/xeq.c     **** }
 7433              		.loc 1 719 9 is_stmt 0 view .LVU2015
 7434 0026 2046     		mov	r0, r4
 7435 0028 FFF7FEFF 		bl	get_reg_n
 7436              	.LVL516:
 719:src/xeq.c     **** }
 7437              		.loc 1 719 9 view .LVU2016
 7438              	.LBE1913:
 7439              	.LBE1912:
 7440              	.LBB1914:
 7441              	.LBI1903:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7442              		.loc 1 726 6 is_stmt 1 view .LVU2017
 7443              	.LBB1911:
 727:src/xeq.c     **** }
 7444              		.loc 1 727 2 view .LVU2018
 7445              	.LBB1909:
 7446              	.LBI1905:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7447              		.loc 1 1118 5 view .LVU2019
 7448              	.LBB1907:
1119:src/xeq.c     **** }
 7449              		.loc 1 1119 2 view .LVU2020
1119:src/xeq.c     **** }
 7450              		.loc 1 1119 24 is_stmt 0 view .LVU2021
 7451 002c 3368     		ldr	r3, [r6]
 7452              	.LBE1907:
 7453              	.LBE1909:
 727:src/xeq.c     **** }
 7454              		.loc 1 727 2 view .LVU2022
 7455 002e 3968     		ldr	r1, [r7]
 7456              	.LBB1910:
ARM GAS  /tmp/cc7LeJ71.s 			page 265


 7457              	.LBB1908:
1119:src/xeq.c     **** }
 7458              		.loc 1 1119 24 view .LVU2023
 7459 0030 B3F8E837 		ldrh	r3, [r3, #2024]
 7460              	.LBE1908:
 7461              	.LBE1910:
 727:src/xeq.c     **** }
 7462              		.loc 1 727 2 view .LVU2024
 7463 0034 08EA0303 		and	r3, r8, r3
 7464 0038 B3F5804F 		cmp	r3, #16384
 7465 003c 0CBF     		ite	eq
 7466 003e 1022     		moveq	r2, #16
 7467 0040 0822     		movne	r2, #8
 7468 0042 0134     		adds	r4, r4, #1
 7469              	.LVL517:
 727:src/xeq.c     **** }
 7470              		.loc 1 727 2 view .LVU2025
 7471 0044 FFF7FEFF 		bl	xcopy
 7472              	.LVL518:
 727:src/xeq.c     **** }
 7473              		.loc 1 727 2 view .LVU2026
 7474              	.LBE1911:
 7475              	.LBE1914:
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7476              		.loc 1 1100 17 is_stmt 1 view .LVU2027
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7477              		.loc 1 1100 12 view .LVU2028
1100:src/xeq.c     **** 		copyreg(get_stack(i), StackBase);
 7478              		.loc 1 1100 2 is_stmt 0 view .LVU2029
 7479 0048 AC42     		cmp	r4, r5
 7480 004a ECD1     		bne	.L588
1102:src/xeq.c     **** 
 7481              		.loc 1 1102 1 view .LVU2030
 7482 004c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7483              	.LVL519:
 7484              	.L595:
 7485              	.LBB1915:
 7486              	.LBB1900:
 713:src/xeq.c     **** 		return 4;
 7487              		.loc 1 713 44 view .LVU2031
 7488 0050 064B     		ldr	r3, .L596+8
 713:src/xeq.c     **** 		return 4;
 7489              		.loc 1 713 41 view .LVU2032
 7490 0052 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 7491              		.loc 1 714 10 view .LVU2033
 7492 0056 002B     		cmp	r3, #0
 7493 0058 B4BF     		ite	lt
 7494 005a 0825     		movlt	r5, #8
 7495 005c 0425     		movge	r5, #4
 7496 005e DDE7     		b	.L586
 7497              	.L589:
 7498 0060 0425     		movs	r5, #4
 7499 0062 DBE7     		b	.L586
 7500              	.L597:
 7501              		.align	2
 7502              	.L596:
ARM GAS  /tmp/cc7LeJ71.s 			page 266


 7503 0064 00000000 		.word	main_ram
 7504 0068 00000000 		.word	StackBase
 7505 006c 00000000 		.word	XromParams
 7506              	.LBE1900:
 7507              	.LBE1915:
 7508              		.cfi_endproc
 7509              	.LFE80:
 7511              		.section	.text.lower2,"ax",%progbits
 7512              		.align	1
 7513              		.p2align 2,,3
 7514              		.syntax unified
 7515              		.thumb
 7516              		.thumb_func
 7517              		.fpu fpv4-sp-d16
 7519              	lower2:
 7520              	.LFB54:
 783:src/xeq.c     **** 	const int n = stack_size();
 7521              		.loc 1 783 26 is_stmt 1 view -0
 7522              		.cfi_startproc
 7523              		@ args = 0, pretend = 0, frame = 0
 7524              		@ frame_needed = 0, uses_anonymous_args = 0
 784:src/xeq.c     **** 	int i;
 7525              		.loc 1 784 2 view .LVU2035
 7526              	.LBB1916:
 7527              	.LBI1916:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 7528              		.loc 1 712 5 view .LVU2036
 7529              	.LBB1917:
 713:src/xeq.c     **** 		return 4;
 7530              		.loc 1 713 2 view .LVU2037
 7531              	.LBE1917:
 7532              	.LBE1916:
 783:src/xeq.c     **** 	const int n = stack_size();
 7533              		.loc 1 783 26 is_stmt 0 view .LVU2038
 7534 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 7535              		.cfi_def_cfa_offset 24
 7536              		.cfi_offset 4, -24
 7537              		.cfi_offset 5, -20
 7538              		.cfi_offset 6, -16
 7539              		.cfi_offset 7, -12
 7540              		.cfi_offset 8, -8
 7541              		.cfi_offset 14, -4
 7542              	.LBB1923:
 7543              	.LBB1920:
 713:src/xeq.c     **** 		return 4;
 7544              		.loc 1 713 8 view .LVU2039
 7545 0004 194F     		ldr	r7, .L609
 7546 0006 3B68     		ldr	r3, [r7]
 713:src/xeq.c     **** 		return 4;
 7547              		.loc 1 713 6 view .LVU2040
 7548 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 7549              		.loc 1 713 5 view .LVU2041
 7550 000c 1207     		lsls	r2, r2, #28
 7551 000e 2BD5     		bpl	.L602
 7552              	.LBB1918:
 7553              	.LBI1918:
ARM GAS  /tmp/cc7LeJ71.s 			page 267


 185:src/xeq.c     **** 	return isXROM(state_pc());
 7554              		.loc 1 185 5 is_stmt 1 view .LVU2042
 7555              	.LBB1919:
 186:src/xeq.c     **** }
 7556              		.loc 1 186 2 view .LVU2043
 186:src/xeq.c     **** }
 7557              		.loc 1 186 9 is_stmt 0 view .LVU2044
 7558 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 7559              	.LBE1919:
 7560              	.LBE1918:
 713:src/xeq.c     **** 		return 4;
 7561              		.loc 1 713 27 view .LVU2045
 7562 0014 9B0B     		lsrs	r3, r3, #14
 7563 0016 032B     		cmp	r3, #3
 7564 0018 1ED0     		beq	.L608
 715:src/xeq.c     **** }
 7565              		.loc 1 715 9 view .LVU2046
 7566 001a 0826     		movs	r6, #8
 7567              	.L599:
 7568              	.LVL520:
 715:src/xeq.c     **** }
 7569              		.loc 1 715 9 view .LVU2047
 7570              	.LBE1920:
 7571              	.LBE1923:
 785:src/xeq.c     **** 
 7572              		.loc 1 785 2 is_stmt 1 view .LVU2048
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7573              		.loc 1 787 2 view .LVU2049
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7574              		.loc 1 787 12 view .LVU2050
 7575 001c 6236     		adds	r6, r6, #98
 7576              	.LVL521:
 7577              	.LBB1924:
 7578              	.LBB1921:
 714:src/xeq.c     **** 	return 8;
 7579              		.loc 1 714 10 is_stmt 0 view .LVU2051
 7580 001e 6424     		movs	r4, #100
 7581              	.LBE1921:
 7582              	.LBE1924:
 7583              	.LBB1925:
 7584              	.LBB1926:
 7585              	.LBB1927:
 7586              	.LBB1928:
1119:src/xeq.c     **** }
 7587              		.loc 1 1119 24 view .LVU2052
 7588 0020 44F20108 		movw	r8, #16385
 7589              	.LVL522:
 7590              	.L601:
1119:src/xeq.c     **** }
 7591              		.loc 1 1119 24 view .LVU2053
 7592              	.LBE1928:
 7593              	.LBE1927:
 7594              	.LBE1926:
 7595              	.LBE1925:
 788:src/xeq.c     **** }
 7596              		.loc 1 788 3 is_stmt 1 discriminator 3 view .LVU2054
 7597              	.LBB1935:
ARM GAS  /tmp/cc7LeJ71.s 			page 268


 7598              	.LBI1935:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7599              		.loc 1 718 11 discriminator 3 view .LVU2055
 7600              	.LBB1936:
 719:src/xeq.c     **** }
 7601              		.loc 1 719 2 discriminator 3 view .LVU2056
 719:src/xeq.c     **** }
 7602              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU2057
 7603 0024 2046     		mov	r0, r4
 7604 0026 FFF7FEFF 		bl	get_reg_n
 7605              	.LVL523:
 7606 002a 0546     		mov	r5, r0
 7607              	.LBE1936:
 7608              	.LBE1935:
 7609              	.LBB1937:
 7610              	.LBB1938:
 7611 002c A01C     		adds	r0, r4, #2
 7612              	.LVL524:
 719:src/xeq.c     **** }
 7613              		.loc 1 719 9 discriminator 3 view .LVU2058
 7614              	.LBE1938:
 7615              	.LBI1937:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 7616              		.loc 1 718 11 is_stmt 1 discriminator 3 view .LVU2059
 7617              	.LBB1939:
 719:src/xeq.c     **** }
 7618              		.loc 1 719 2 discriminator 3 view .LVU2060
 719:src/xeq.c     **** }
 7619              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU2061
 7620 002e FFF7FEFF 		bl	get_reg_n
 7621              	.LVL525:
 719:src/xeq.c     **** }
 7622              		.loc 1 719 9 discriminator 3 view .LVU2062
 7623              	.LBE1939:
 7624              	.LBE1937:
 7625              	.LBB1941:
 7626              	.LBB1933:
 7627              	.LBB1931:
 7628              	.LBB1929:
1119:src/xeq.c     **** }
 7629              		.loc 1 1119 24 discriminator 3 view .LVU2063
 7630 0032 3B68     		ldr	r3, [r7]
 7631 0034 B3F8E837 		ldrh	r3, [r3, #2024]
 7632              	.LBE1929:
 7633              	.LBE1931:
 727:src/xeq.c     **** }
 7634              		.loc 1 727 2 discriminator 3 view .LVU2064
 7635 0038 08EA0303 		and	r3, r8, r3
 7636 003c B3F5804F 		cmp	r3, #16384
 7637              	.LBE1933:
 7638              	.LBE1941:
 7639              	.LBB1942:
 7640              	.LBB1940:
 719:src/xeq.c     **** }
 7641              		.loc 1 719 9 discriminator 3 view .LVU2065
 7642 0040 0146     		mov	r1, r0
 7643              	.LVL526:
ARM GAS  /tmp/cc7LeJ71.s 			page 269


 719:src/xeq.c     **** }
 7644              		.loc 1 719 9 discriminator 3 view .LVU2066
 7645              	.LBE1940:
 7646              	.LBE1942:
 7647              	.LBB1943:
 7648              	.LBI1925:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7649              		.loc 1 726 6 is_stmt 1 discriminator 3 view .LVU2067
 7650              	.LBB1934:
 727:src/xeq.c     **** }
 7651              		.loc 1 727 2 discriminator 3 view .LVU2068
 7652              	.LBB1932:
 7653              	.LBI1927:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7654              		.loc 1 1118 5 discriminator 3 view .LVU2069
 7655              	.LBB1930:
1119:src/xeq.c     **** }
 7656              		.loc 1 1119 2 discriminator 3 view .LVU2070
 7657              	.LBE1930:
 7658              	.LBE1932:
 727:src/xeq.c     **** }
 7659              		.loc 1 727 2 is_stmt 0 discriminator 3 view .LVU2071
 7660 0042 0CBF     		ite	eq
 7661 0044 1022     		moveq	r2, #16
 7662 0046 0822     		movne	r2, #8
 7663 0048 2846     		mov	r0, r5
 7664              	.LVL527:
 727:src/xeq.c     **** }
 7665              		.loc 1 727 2 discriminator 3 view .LVU2072
 7666 004a 0134     		adds	r4, r4, #1
 7667              	.LVL528:
 727:src/xeq.c     **** }
 7668              		.loc 1 727 2 discriminator 3 view .LVU2073
 7669 004c FFF7FEFF 		bl	xcopy
 7670              	.LVL529:
 727:src/xeq.c     **** }
 7671              		.loc 1 727 2 discriminator 3 view .LVU2074
 7672              	.LBE1934:
 7673              	.LBE1943:
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7674              		.loc 1 787 17 is_stmt 1 discriminator 3 view .LVU2075
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7675              		.loc 1 787 12 discriminator 3 view .LVU2076
 787:src/xeq.c     **** 		copyreg(get_stack(i-2), get_stack(i));
 7676              		.loc 1 787 2 is_stmt 0 discriminator 3 view .LVU2077
 7677 0050 B442     		cmp	r4, r6
 7678 0052 E7D1     		bne	.L601
 789:src/xeq.c     **** 
 7679              		.loc 1 789 1 view .LVU2078
 7680 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 7681              	.LVL530:
 7682              	.L608:
 7683              	.LBB1944:
 7684              	.LBB1922:
 713:src/xeq.c     **** 		return 4;
 7685              		.loc 1 713 44 view .LVU2079
 7686 0058 054B     		ldr	r3, .L609+4
ARM GAS  /tmp/cc7LeJ71.s 			page 270


 713:src/xeq.c     **** 		return 4;
 7687              		.loc 1 713 41 view .LVU2080
 7688 005a 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 7689              		.loc 1 714 10 view .LVU2081
 7690 005e 002B     		cmp	r3, #0
 7691 0060 B4BF     		ite	lt
 7692 0062 0826     		movlt	r6, #8
 7693 0064 0426     		movge	r6, #4
 7694 0066 D9E7     		b	.L599
 7695              	.L602:
 7696 0068 0426     		movs	r6, #4
 7697 006a D7E7     		b	.L599
 7698              	.L610:
 7699              		.align	2
 7700              	.L609:
 7701 006c 00000000 		.word	main_ram
 7702 0070 00000000 		.word	XromParams
 7703              	.LBE1922:
 7704              	.LBE1944:
 7705              		.cfi_endproc
 7706              	.LFE54:
 7708              		.section	.text.drop,"ax",%progbits
 7709              		.align	1
 7710              		.p2align 2,,3
 7711              		.global	drop
 7712              		.syntax unified
 7713              		.thumb
 7714              		.thumb_func
 7715              		.fpu fpv4-sp-d16
 7717              	drop:
 7718              	.LVL531:
 7719              	.LFB81:
1104:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7720              		.loc 1 1104 26 is_stmt 1 view -0
 7721              		.cfi_startproc
 7722              		@ args = 0, pretend = 0, frame = 0
 7723              		@ frame_needed = 0, uses_anonymous_args = 0
1105:src/xeq.c     **** 		lower2();
 7724              		.loc 1 1105 2 view .LVU2083
1105:src/xeq.c     **** 		lower2();
 7725              		.loc 1 1105 5 is_stmt 0 view .LVU2084
 7726 0000 0F28     		cmp	r0, #15
 7727 0002 01D0     		beq	.L618
1109:src/xeq.c     **** }
 7728              		.loc 1 1109 3 is_stmt 1 view .LVU2085
 7729 0004 FFF7FEBF 		b	lower
 7730              	.LVL532:
 7731              	.L618:
1106:src/xeq.c     **** 		set_was_complex();
 7732              		.loc 1 1106 3 view .LVU2086
1104:src/xeq.c     **** 	if (op == OP_DROPXY) {
 7733              		.loc 1 1104 26 is_stmt 0 view .LVU2087
 7734 0008 08B5     		push	{r3, lr}
 7735              		.cfi_def_cfa_offset 8
 7736              		.cfi_offset 3, -8
 7737              		.cfi_offset 14, -4
ARM GAS  /tmp/cc7LeJ71.s 			page 271


1106:src/xeq.c     **** 		set_was_complex();
 7738              		.loc 1 1106 3 view .LVU2088
 7739 000a FFF7FEFF 		bl	lower2
 7740              	.LVL533:
1107:src/xeq.c     **** 	} else
 7741              		.loc 1 1107 3 is_stmt 1 view .LVU2089
 7742              	.LBB1945:
 7743              	.LBI1945:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 7744              		.loc 1 539 13 view .LVU2090
 7745              	.LBB1946:
 540:src/xeq.c     **** }
 7746              		.loc 1 540 2 view .LVU2091
 540:src/xeq.c     **** }
 7747              		.loc 1 540 20 is_stmt 0 view .LVU2092
 7748 000e 034B     		ldr	r3, .L619
 7749 0010 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 7750 0012 0121     		movs	r1, #1
 7751 0014 61F38712 		bfi	r2, r1, #6, #2
 7752 0018 1A75     		strb	r2, [r3, #20]
 7753              	.LBE1946:
 7754              	.LBE1945:
1110:src/xeq.c     **** 
 7755              		.loc 1 1110 1 view .LVU2093
 7756 001a 08BD     		pop	{r3, pc}
 7757              	.L620:
 7758              		.align	2
 7759              	.L619:
 7760 001c 00000000 		.word	StateWhileOn
 7761              		.cfi_endproc
 7762              	.LFE81:
 7764              		.section	.text.copyreg_n,"ax",%progbits
 7765              		.align	1
 7766              		.p2align 2,,3
 7767              		.global	copyreg_n
 7768              		.syntax unified
 7769              		.thumb
 7770              		.thumb_func
 7771              		.fpu fpv4-sp-d16
 7773              	copyreg_n:
 7774              	.LVL534:
 7775              	.LFB46:
 730:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7776              		.loc 1 730 30 is_stmt 1 view -0
 7777              		.cfi_startproc
 7778              		@ args = 0, pretend = 0, frame = 0
 7779              		@ frame_needed = 0, uses_anonymous_args = 0
 731:src/xeq.c     **** }
 7780              		.loc 1 731 2 view .LVU2095
 730:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7781              		.loc 1 730 30 is_stmt 0 view .LVU2096
 7782 0000 38B5     		push	{r3, r4, r5, lr}
 7783              		.cfi_def_cfa_offset 16
 7784              		.cfi_offset 3, -16
 7785              		.cfi_offset 4, -12
 7786              		.cfi_offset 5, -8
 7787              		.cfi_offset 14, -4
ARM GAS  /tmp/cc7LeJ71.s 			page 272


 730:src/xeq.c     **** 	copyreg(get_reg_n(d), get_reg_n(s));
 7788              		.loc 1 730 30 view .LVU2097
 7789 0002 0D46     		mov	r5, r1
 731:src/xeq.c     **** }
 7790              		.loc 1 731 2 view .LVU2098
 7791 0004 FFF7FEFF 		bl	get_reg_n
 7792              	.LVL535:
 731:src/xeq.c     **** }
 7793              		.loc 1 731 2 view .LVU2099
 7794 0008 0446     		mov	r4, r0
 731:src/xeq.c     **** }
 7795              		.loc 1 731 24 view .LVU2100
 7796 000a 2846     		mov	r0, r5
 7797 000c FFF7FEFF 		bl	get_reg_n
 7798              	.LVL536:
 7799              	.LBB1947:
 7800              	.LBB1948:
 7801              	.LBB1949:
 7802              	.LBB1950:
1119:src/xeq.c     **** }
 7803              		.loc 1 1119 24 view .LVU2101
 7804 0010 094B     		ldr	r3, .L625
 7805 0012 1B68     		ldr	r3, [r3]
 7806 0014 B3F8E827 		ldrh	r2, [r3, #2024]
 7807 0018 44F20103 		movw	r3, #16385
 7808              	.LBE1950:
 7809              	.LBE1949:
 727:src/xeq.c     **** }
 7810              		.loc 1 727 2 view .LVU2102
 7811 001c 1340     		ands	r3, r3, r2
 7812 001e B3F5804F 		cmp	r3, #16384
 7813              	.LBE1948:
 7814              	.LBE1947:
 731:src/xeq.c     **** }
 7815              		.loc 1 731 24 view .LVU2103
 7816 0022 0146     		mov	r1, r0
 7817              	.LVL537:
 7818              	.LBB1955:
 7819              	.LBI1947:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 7820              		.loc 1 726 6 is_stmt 1 view .LVU2104
 7821              	.LBB1953:
 727:src/xeq.c     **** }
 7822              		.loc 1 727 2 view .LVU2105
 7823              	.LBB1952:
 7824              	.LBI1949:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7825              		.loc 1 1118 5 view .LVU2106
 7826              	.LBB1951:
1119:src/xeq.c     **** }
 7827              		.loc 1 1119 2 view .LVU2107
 7828              	.LBE1951:
 7829              	.LBE1952:
 727:src/xeq.c     **** }
 7830              		.loc 1 727 2 is_stmt 0 view .LVU2108
 7831 0024 08BF     		it	eq
 7832 0026 1022     		moveq	r2, #16
ARM GAS  /tmp/cc7LeJ71.s 			page 273


 7833 0028 2046     		mov	r0, r4
 7834              	.LVL538:
 727:src/xeq.c     **** }
 7835              		.loc 1 727 2 view .LVU2109
 7836 002a 18BF     		it	ne
 7837 002c 0822     		movne	r2, #8
 7838              	.LBE1953:
 7839              	.LBE1955:
 732:src/xeq.c     **** 
 7840              		.loc 1 732 1 view .LVU2110
 7841 002e BDE83840 		pop	{r3, r4, r5, lr}
 7842              		.cfi_restore 14
 7843              		.cfi_restore 5
 7844              		.cfi_restore 4
 7845              		.cfi_restore 3
 7846              		.cfi_def_cfa_offset 0
 7847              	.LVL539:
 7848              	.LBB1956:
 7849              	.LBB1954:
 727:src/xeq.c     **** }
 7850              		.loc 1 727 2 view .LVU2111
 7851 0032 FFF7FEBF 		b	xcopy
 7852              	.LVL540:
 7853              	.L626:
 727:src/xeq.c     **** }
 7854              		.loc 1 727 2 view .LVU2112
 7855 0036 00BF     		.align	2
 7856              	.L625:
 7857 0038 00000000 		.word	main_ram
 7858              	.LBE1954:
 7859              	.LBE1956:
 7860              		.cfi_endproc
 7861              	.LFE46:
 7863              		.section	.text.setlastX,"ax",%progbits
 7864              		.align	1
 7865              		.p2align 2,,3
 7866              		.global	setlastX
 7867              		.syntax unified
 7868              		.thumb
 7869              		.thumb_func
 7870              		.fpu fpv4-sp-d16
 7872              	setlastX:
 7873              	.LFB55:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7874              		.loc 1 792 21 is_stmt 1 view -0
 7875              		.cfi_startproc
 7876              		@ args = 0, pretend = 0, frame = 0
 7877              		@ frame_needed = 0, uses_anonymous_args = 0
 7878              		@ link register save eliminated.
 793:src/xeq.c     **** }
 7879              		.loc 1 793 2 view .LVU2114
 7880 0000 6421     		movs	r1, #100
 7881 0002 6C20     		movs	r0, #108
 7882 0004 FFF7FEBF 		b	copyreg_n
 7883              	.LVL541:
 7884              		.cfi_endproc
 7885              	.LFE55:
ARM GAS  /tmp/cc7LeJ71.s 			page 274


 7887              		.section	.text.setlastXY,"ax",%progbits
 7888              		.align	1
 7889              		.p2align 2,,3
 7890              		.syntax unified
 7891              		.thumb
 7892              		.thumb_func
 7893              		.fpu fpv4-sp-d16
 7895              	setlastXY:
 7896              	.LFB56:
 796:src/xeq.c     **** 	setlastX();
 7897              		.loc 1 796 29 view -0
 7898              		.cfi_startproc
 7899              		@ args = 0, pretend = 0, frame = 0
 7900              		@ frame_needed = 0, uses_anonymous_args = 0
 797:src/xeq.c     **** 	copyreg_n(regI_idx, regY_idx);
 7901              		.loc 1 797 2 view .LVU2116
 7902              	.LBB1957:
 7903              	.LBI1957:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 7904              		.loc 1 792 6 view .LVU2117
 7905              	.LBB1958:
 793:src/xeq.c     **** }
 7906              		.loc 1 793 2 view .LVU2118
 7907              	.LBE1958:
 7908              	.LBE1957:
 796:src/xeq.c     **** 	setlastX();
 7909              		.loc 1 796 29 is_stmt 0 view .LVU2119
 7910 0000 08B5     		push	{r3, lr}
 7911              		.cfi_def_cfa_offset 8
 7912              		.cfi_offset 3, -8
 7913              		.cfi_offset 14, -4
 7914              	.LBB1960:
 7915              	.LBB1959:
 793:src/xeq.c     **** }
 7916              		.loc 1 793 2 view .LVU2120
 7917 0002 6421     		movs	r1, #100
 7918 0004 6C20     		movs	r0, #108
 7919 0006 FFF7FEFF 		bl	copyreg_n
 7920              	.LVL542:
 7921              	.LBE1959:
 7922              	.LBE1960:
 798:src/xeq.c     **** }
 7923              		.loc 1 798 2 is_stmt 1 view .LVU2121
 799:src/xeq.c     **** 
 7924              		.loc 1 799 1 is_stmt 0 view .LVU2122
 7925 000a BDE80840 		pop	{r3, lr}
 7926              		.cfi_restore 14
 7927              		.cfi_restore 3
 7928              		.cfi_def_cfa_offset 0
 798:src/xeq.c     **** }
 7929              		.loc 1 798 2 view .LVU2123
 7930 000e 6521     		movs	r1, #101
 7931 0010 6D20     		movs	r0, #109
 7932 0012 FFF7FEBF 		b	copyreg_n
 7933              	.LVL543:
 7934              		.cfi_endproc
 7935              	.LFE56:
ARM GAS  /tmp/cc7LeJ71.s 			page 275


 7937 0016 00BF     		.section	.text.getRegister,"ax",%progbits
 7938              		.align	1
 7939              		.p2align 2,,3
 7940              		.global	getRegister
 7941              		.syntax unified
 7942              		.thumb
 7943              		.thumb_func
 7944              		.fpu fpv4-sp-d16
 7946              	getRegister:
 7947              	.LVL544:
 7948              	.LFB57:
 802:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7949              		.loc 1 802 49 is_stmt 1 view -0
 7950              		.cfi_startproc
 7951              		@ args = 0, pretend = 0, frame = 0
 7952              		@ frame_needed = 0, uses_anonymous_args = 0
 803:src/xeq.c     **** 	if (is_dblmode())
 7953              		.loc 1 803 2 view .LVU2125
 802:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7954              		.loc 1 802 49 is_stmt 0 view .LVU2126
 7955 0000 10B5     		push	{r4, lr}
 7956              		.cfi_def_cfa_offset 8
 7957              		.cfi_offset 4, -8
 7958              		.cfi_offset 14, -4
 802:src/xeq.c     **** 	const REGISTER *const reg = get_reg_n(index);
 7959              		.loc 1 802 49 view .LVU2127
 7960 0002 0446     		mov	r4, r0
 803:src/xeq.c     **** 	if (is_dblmode())
 7961              		.loc 1 803 30 view .LVU2128
 7962 0004 0846     		mov	r0, r1
 7963              	.LVL545:
 803:src/xeq.c     **** 	if (is_dblmode())
 7964              		.loc 1 803 30 view .LVU2129
 7965 0006 FFF7FEFF 		bl	get_reg_n
 7966              	.LVL546:
 804:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7967              		.loc 1 804 2 is_stmt 1 view .LVU2130
 7968              	.LBB1961:
 7969              	.LBI1961:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 7970              		.loc 1 1118 5 view .LVU2131
 7971              	.LBB1962:
1119:src/xeq.c     **** }
 7972              		.loc 1 1119 2 view .LVU2132
1119:src/xeq.c     **** }
 7973              		.loc 1 1119 24 is_stmt 0 view .LVU2133
 7974 000a 094B     		ldr	r3, .L635
 7975 000c 1B68     		ldr	r3, [r3]
 7976 000e B3F8E827 		ldrh	r2, [r3, #2024]
 7977 0012 44F20103 		movw	r3, #16385
 7978              	.LBE1962:
 7979              	.LBE1961:
 804:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7980              		.loc 1 804 5 view .LVU2134
 7981 0016 1340     		ands	r3, r3, r2
 7982 0018 B3F5804F 		cmp	r3, #16384
 805:src/xeq.c     **** 	else
ARM GAS  /tmp/cc7LeJ71.s 			page 276


 7983              		.loc 1 805 3 view .LVU2135
 7984 001c 2146     		mov	r1, r4
 804:src/xeq.c     **** 		decimal128ToNumber(&(reg->d), r);
 7985              		.loc 1 804 5 view .LVU2136
 7986 001e 03D0     		beq	.L634
 807:src/xeq.c     **** 	return r;
 7987              		.loc 1 807 3 is_stmt 1 view .LVU2137
 7988 0020 FFF7FEFF 		bl	decimal64ToNumber
 7989              	.LVL547:
 808:src/xeq.c     **** }
 7990              		.loc 1 808 2 view .LVU2138
 809:src/xeq.c     **** 
 7991              		.loc 1 809 1 is_stmt 0 view .LVU2139
 7992 0024 2046     		mov	r0, r4
 7993 0026 10BD     		pop	{r4, pc}
 7994              	.LVL548:
 7995              	.L634:
 805:src/xeq.c     **** 	else
 7996              		.loc 1 805 3 is_stmt 1 view .LVU2140
 7997 0028 FFF7FEFF 		bl	decimal128ToNumber
 7998              	.LVL549:
 808:src/xeq.c     **** }
 7999              		.loc 1 808 2 view .LVU2141
 809:src/xeq.c     **** 
 8000              		.loc 1 809 1 is_stmt 0 view .LVU2142
 8001 002c 2046     		mov	r0, r4
 8002 002e 10BD     		pop	{r4, pc}
 8003              	.LVL550:
 8004              	.L636:
 809:src/xeq.c     **** 
 8005              		.loc 1 809 1 view .LVU2143
 8006              		.align	2
 8007              	.L635:
 8008 0030 00000000 		.word	main_ram
 8009              		.cfi_endproc
 8010              	.LFE57:
 8012              		.section	.text.getX,"ax",%progbits
 8013              		.align	1
 8014              		.p2align 2,,3
 8015              		.global	getX
 8016              		.syntax unified
 8017              		.thumb
 8018              		.thumb_func
 8019              		.fpu fpv4-sp-d16
 8021              	getX:
 8022              	.LVL551:
 8023              	.LFB59:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8024              		.loc 1 824 31 is_stmt 1 view -0
 8025              		.cfi_startproc
 8026              		@ args = 0, pretend = 0, frame = 0
 8027              		@ frame_needed = 0, uses_anonymous_args = 0
 8028              		@ link register save eliminated.
 825:src/xeq.c     **** }
 8029              		.loc 1 825 2 view .LVU2145
 825:src/xeq.c     **** }
 8030              		.loc 1 825 9 is_stmt 0 view .LVU2146
ARM GAS  /tmp/cc7LeJ71.s 			page 277


 8031 0000 6421     		movs	r1, #100
 8032 0002 FFF7FEBF 		b	getRegister
 8033              	.LVL552:
 825:src/xeq.c     **** }
 8034              		.loc 1 825 9 view .LVU2147
 8035              		.cfi_endproc
 8036              	.LFE59:
 8038 0006 00BF     		.section	.text.getY,"ax",%progbits
 8039              		.align	1
 8040              		.p2align 2,,3
 8041              		.global	getY
 8042              		.syntax unified
 8043              		.thumb
 8044              		.thumb_func
 8045              		.fpu fpv4-sp-d16
 8047              	getY:
 8048              	.LVL553:
 8049              	.LFB61:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8050              		.loc 1 832 25 is_stmt 1 view -0
 8051              		.cfi_startproc
 8052              		@ args = 0, pretend = 0, frame = 0
 8053              		@ frame_needed = 0, uses_anonymous_args = 0
 8054              		@ link register save eliminated.
 833:src/xeq.c     **** }
 8055              		.loc 1 833 2 view .LVU2149
 8056 0000 6521     		movs	r1, #101
 8057 0002 FFF7FEBF 		b	getRegister
 8058              	.LVL554:
 833:src/xeq.c     **** }
 8059              		.loc 1 833 2 is_stmt 0 view .LVU2150
 8060              		.cfi_endproc
 8061              	.LFE61:
 8063 0006 00BF     		.section	.text.getXY,"ax",%progbits
 8064              		.align	1
 8065              		.p2align 2,,3
 8066              		.global	getXY
 8067              		.syntax unified
 8068              		.thumb
 8069              		.thumb_func
 8070              		.fpu fpv4-sp-d16
 8072              	getXY:
 8073              	.LVL555:
 8074              	.LFB65:
 854:src/xeq.c     **** 	getX(x);
 8075              		.loc 1 854 40 is_stmt 1 view -0
 8076              		.cfi_startproc
 8077              		@ args = 0, pretend = 0, frame = 0
 8078              		@ frame_needed = 0, uses_anonymous_args = 0
 855:src/xeq.c     **** 	getY(y);
 8079              		.loc 1 855 2 view .LVU2152
 8080              	.LBB1963:
 8081              	.LBI1963:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8082              		.loc 1 824 12 view .LVU2153
 8083              	.LBB1964:
 825:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 278


 8084              		.loc 1 825 2 view .LVU2154
 8085              	.LBE1964:
 8086              	.LBE1963:
 854:src/xeq.c     **** 	getX(x);
 8087              		.loc 1 854 40 is_stmt 0 view .LVU2155
 8088 0000 10B5     		push	{r4, lr}
 8089              		.cfi_def_cfa_offset 8
 8090              		.cfi_offset 4, -8
 8091              		.cfi_offset 14, -4
 854:src/xeq.c     **** 	getX(x);
 8092              		.loc 1 854 40 view .LVU2156
 8093 0002 0C46     		mov	r4, r1
 8094              	.LBB1966:
 8095              	.LBB1965:
 825:src/xeq.c     **** }
 8096              		.loc 1 825 9 view .LVU2157
 8097 0004 6421     		movs	r1, #100
 8098              	.LVL556:
 825:src/xeq.c     **** }
 8099              		.loc 1 825 9 view .LVU2158
 8100 0006 FFF7FEFF 		bl	getRegister
 8101              	.LVL557:
 825:src/xeq.c     **** }
 8102              		.loc 1 825 9 view .LVU2159
 8103              	.LBE1965:
 8104              	.LBE1966:
 856:src/xeq.c     **** }
 8105              		.loc 1 856 2 is_stmt 1 view .LVU2160
 8106              	.LBB1967:
 8107              	.LBI1967:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8108              		.loc 1 832 6 view .LVU2161
 8109              	.LBB1968:
 833:src/xeq.c     **** }
 8110              		.loc 1 833 2 view .LVU2162
 8111 000a 2046     		mov	r0, r4
 8112 000c 6521     		movs	r1, #101
 8113              	.LBE1968:
 8114              	.LBE1967:
 857:src/xeq.c     **** 
 8115              		.loc 1 857 1 is_stmt 0 view .LVU2163
 8116 000e BDE81040 		pop	{r4, lr}
 8117              		.cfi_restore 14
 8118              		.cfi_restore 4
 8119              		.cfi_def_cfa_offset 0
 8120              	.LVL558:
 8121              	.LBB1970:
 8122              	.LBB1969:
 833:src/xeq.c     **** }
 8123              		.loc 1 833 2 view .LVU2164
 8124 0012 FFF7FEBF 		b	getRegister
 8125              	.LVL559:
 833:src/xeq.c     **** }
 8126              		.loc 1 833 2 view .LVU2165
 8127              	.LBE1969:
 8128              	.LBE1970:
 8129              		.cfi_endproc
ARM GAS  /tmp/cc7LeJ71.s 			page 279


 8130              	.LFE65:
 8132 0016 00BF     		.section	.text.getXYZ,"ax",%progbits
 8133              		.align	1
 8134              		.p2align 2,,3
 8135              		.global	getXYZ
 8136              		.syntax unified
 8137              		.thumb
 8138              		.thumb_func
 8139              		.fpu fpv4-sp-d16
 8141              	getXYZ:
 8142              	.LVL560:
 8143              	.LFB67:
 867:src/xeq.c     **** 	getXY(x, y);
 8144              		.loc 1 867 55 is_stmt 1 view -0
 8145              		.cfi_startproc
 8146              		@ args = 0, pretend = 0, frame = 0
 8147              		@ frame_needed = 0, uses_anonymous_args = 0
 868:src/xeq.c     **** 	getZ(z);
 8148              		.loc 1 868 2 view .LVU2167
 867:src/xeq.c     **** 	getXY(x, y);
 8149              		.loc 1 867 55 is_stmt 0 view .LVU2168
 8150 0000 38B5     		push	{r3, r4, r5, lr}
 8151              		.cfi_def_cfa_offset 16
 8152              		.cfi_offset 3, -16
 8153              		.cfi_offset 4, -12
 8154              		.cfi_offset 5, -8
 8155              		.cfi_offset 14, -4
 867:src/xeq.c     **** 	getXY(x, y);
 8156              		.loc 1 867 55 view .LVU2169
 8157 0002 0D46     		mov	r5, r1
 8158              	.LVL561:
 8159              	.LBB1971:
 8160              	.LBI1971:
 854:src/xeq.c     **** 	getX(x);
 8161              		.loc 1 854 6 is_stmt 1 view .LVU2170
 8162              	.LBE1971:
 855:src/xeq.c     **** 	getY(y);
 8163              		.loc 1 855 2 view .LVU2171
 8164              	.LBB1978:
 8165              	.LBB1972:
 8166              	.LBI1972:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8167              		.loc 1 824 12 view .LVU2172
 8168              	.LBB1973:
 825:src/xeq.c     **** }
 8169              		.loc 1 825 2 view .LVU2173
 825:src/xeq.c     **** }
 8170              		.loc 1 825 9 is_stmt 0 view .LVU2174
 8171 0004 6421     		movs	r1, #100
 8172              	.LVL562:
 825:src/xeq.c     **** }
 8173              		.loc 1 825 9 view .LVU2175
 8174              	.LBE1973:
 8175              	.LBE1972:
 8176              	.LBE1978:
 867:src/xeq.c     **** 	getXY(x, y);
 8177              		.loc 1 867 55 view .LVU2176
ARM GAS  /tmp/cc7LeJ71.s 			page 280


 8178 0006 1446     		mov	r4, r2
 8179              	.LBB1979:
 8180              	.LBB1975:
 8181              	.LBB1974:
 825:src/xeq.c     **** }
 8182              		.loc 1 825 9 view .LVU2177
 8183 0008 FFF7FEFF 		bl	getRegister
 8184              	.LVL563:
 825:src/xeq.c     **** }
 8185              		.loc 1 825 9 view .LVU2178
 8186              	.LBE1974:
 8187              	.LBE1975:
 8188              	.LBE1979:
 856:src/xeq.c     **** }
 8189              		.loc 1 856 2 is_stmt 1 view .LVU2179
 8190              	.LBB1980:
 8191              	.LBB1976:
 8192              	.LBI1976:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8193              		.loc 1 832 6 view .LVU2180
 8194              	.LBB1977:
 833:src/xeq.c     **** }
 8195              		.loc 1 833 2 view .LVU2181
 8196 000c 2846     		mov	r0, r5
 8197 000e 6521     		movs	r1, #101
 8198 0010 FFF7FEFF 		bl	getRegister
 8199              	.LVL564:
 833:src/xeq.c     **** }
 8200              		.loc 1 833 2 is_stmt 0 view .LVU2182
 8201              	.LBE1977:
 8202              	.LBE1976:
 8203              	.LBE1980:
 869:src/xeq.c     **** }
 8204              		.loc 1 869 2 is_stmt 1 view .LVU2183
 8205              	.LBB1981:
 8206              	.LBI1981:
 840:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8207              		.loc 1 840 13 view .LVU2184
 8208              	.LBB1982:
 841:src/xeq.c     **** }
 8209              		.loc 1 841 2 view .LVU2185
 8210 0014 2046     		mov	r0, r4
 8211 0016 6621     		movs	r1, #102
 8212              	.LBE1982:
 8213              	.LBE1981:
 870:src/xeq.c     **** 
 8214              		.loc 1 870 1 is_stmt 0 view .LVU2186
 8215 0018 BDE83840 		pop	{r3, r4, r5, lr}
 8216              		.cfi_restore 14
 8217              		.cfi_restore 5
 8218              		.cfi_restore 4
 8219              		.cfi_restore 3
 8220              		.cfi_def_cfa_offset 0
 8221              	.LVL565:
 8222              	.LBB1984:
 8223              	.LBB1983:
 841:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 281


 8224              		.loc 1 841 2 view .LVU2187
 8225 001c FFF7FEBF 		b	getRegister
 8226              	.LVL566:
 841:src/xeq.c     **** }
 8227              		.loc 1 841 2 view .LVU2188
 8228              	.LBE1983:
 8229              	.LBE1984:
 8230              		.cfi_endproc
 8231              	.LFE67:
 8233              		.section	.text.getYZ,"ax",%progbits
 8234              		.align	1
 8235              		.p2align 2,,3
 8236              		.global	getYZ
 8237              		.syntax unified
 8238              		.thumb
 8239              		.thumb_func
 8240              		.fpu fpv4-sp-d16
 8242              	getYZ:
 8243              	.LVL567:
 8244              	.LFB69:
 884:src/xeq.c     **** 	getY(y);
 8245              		.loc 1 884 40 is_stmt 1 view -0
 8246              		.cfi_startproc
 8247              		@ args = 0, pretend = 0, frame = 0
 8248              		@ frame_needed = 0, uses_anonymous_args = 0
 885:src/xeq.c     **** 	getZ(z);
 8249              		.loc 1 885 2 view .LVU2190
 8250              	.LBB1985:
 8251              	.LBI1985:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8252              		.loc 1 832 6 view .LVU2191
 8253              	.LBB1986:
 833:src/xeq.c     **** }
 8254              		.loc 1 833 2 view .LVU2192
 8255              	.LBE1986:
 8256              	.LBE1985:
 884:src/xeq.c     **** 	getY(y);
 8257              		.loc 1 884 40 is_stmt 0 view .LVU2193
 8258 0000 10B5     		push	{r4, lr}
 8259              		.cfi_def_cfa_offset 8
 8260              		.cfi_offset 4, -8
 8261              		.cfi_offset 14, -4
 884:src/xeq.c     **** 	getY(y);
 8262              		.loc 1 884 40 view .LVU2194
 8263 0002 0C46     		mov	r4, r1
 8264              	.LBB1988:
 8265              	.LBB1987:
 833:src/xeq.c     **** }
 8266              		.loc 1 833 2 view .LVU2195
 8267 0004 6521     		movs	r1, #101
 8268              	.LVL568:
 833:src/xeq.c     **** }
 8269              		.loc 1 833 2 view .LVU2196
 8270 0006 FFF7FEFF 		bl	getRegister
 8271              	.LVL569:
 833:src/xeq.c     **** }
 8272              		.loc 1 833 2 view .LVU2197
ARM GAS  /tmp/cc7LeJ71.s 			page 282


 8273              	.LBE1987:
 8274              	.LBE1988:
 886:src/xeq.c     **** }
 8275              		.loc 1 886 2 is_stmt 1 view .LVU2198
 8276              	.LBB1989:
 8277              	.LBI1989:
 840:src/xeq.c     **** 	getRegister(z, regZ_idx);
 8278              		.loc 1 840 13 view .LVU2199
 8279              	.LBB1990:
 841:src/xeq.c     **** }
 8280              		.loc 1 841 2 view .LVU2200
 8281 000a 2046     		mov	r0, r4
 8282 000c 6621     		movs	r1, #102
 8283              	.LBE1990:
 8284              	.LBE1989:
 887:src/xeq.c     **** 
 8285              		.loc 1 887 1 is_stmt 0 view .LVU2201
 8286 000e BDE81040 		pop	{r4, lr}
 8287              		.cfi_restore 14
 8288              		.cfi_restore 4
 8289              		.cfi_def_cfa_offset 0
 8290              	.LVL570:
 8291              	.LBB1992:
 8292              	.LBB1991:
 841:src/xeq.c     **** }
 8293              		.loc 1 841 2 view .LVU2202
 8294 0012 FFF7FEBF 		b	getRegister
 8295              	.LVL571:
 841:src/xeq.c     **** }
 8296              		.loc 1 841 2 view .LVU2203
 8297              	.LBE1991:
 8298              	.LBE1992:
 8299              		.cfi_endproc
 8300              	.LFE69:
 8302 0016 00BF     		.section	.text.getXYZT,"ax",%progbits
 8303              		.align	1
 8304              		.p2align 2,,3
 8305              		.global	getXYZT
 8306              		.syntax unified
 8307              		.thumb
 8308              		.thumb_func
 8309              		.fpu fpv4-sp-d16
 8311              	getXYZT:
 8312              	.LVL572:
 8313              	.LFB68:
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 8314              		.loc 1 879 70 is_stmt 1 view -0
 8315              		.cfi_startproc
 8316              		@ args = 0, pretend = 0, frame = 0
 8317              		@ frame_needed = 0, uses_anonymous_args = 0
 880:src/xeq.c     **** 	getT(t);
 8318              		.loc 1 880 2 view .LVU2205
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 8319              		.loc 1 879 70 is_stmt 0 view .LVU2206
 8320 0000 10B5     		push	{r4, lr}
 8321              		.cfi_def_cfa_offset 8
 8322              		.cfi_offset 4, -8
ARM GAS  /tmp/cc7LeJ71.s 			page 283


 8323              		.cfi_offset 14, -4
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 8324              		.loc 1 879 70 view .LVU2207
 8325 0002 1C46     		mov	r4, r3
 880:src/xeq.c     **** 	getT(t);
 8326              		.loc 1 880 2 view .LVU2208
 8327 0004 FFF7FEFF 		bl	getXYZ
 8328              	.LVL573:
 881:src/xeq.c     **** }
 8329              		.loc 1 881 2 is_stmt 1 view .LVU2209
 8330              	.LBB1993:
 8331              	.LBI1993:
 850:src/xeq.c     **** 	getRegister(t, regT_idx);
 8332              		.loc 1 850 13 view .LVU2210
 8333              	.LBB1994:
 851:src/xeq.c     **** }
 8334              		.loc 1 851 2 view .LVU2211
 8335 0008 2046     		mov	r0, r4
 8336 000a 6721     		movs	r1, #103
 8337              	.LBE1994:
 8338              	.LBE1993:
 882:src/xeq.c     **** 
 8339              		.loc 1 882 1 is_stmt 0 view .LVU2212
 8340 000c BDE81040 		pop	{r4, lr}
 8341              		.cfi_restore 14
 8342              		.cfi_restore 4
 8343              		.cfi_def_cfa_offset 0
 8344              	.LVL574:
 8345              	.LBB1996:
 8346              	.LBB1995:
 851:src/xeq.c     **** }
 8347              		.loc 1 851 2 view .LVU2213
 8348 0010 FFF7FEBF 		b	getRegister
 8349              	.LVL575:
 851:src/xeq.c     **** }
 8350              		.loc 1 851 2 view .LVU2214
 8351              	.LBE1995:
 8352              	.LBE1996:
 8353              		.cfi_endproc
 8354              	.LFE68:
 8356              		.section	.text.storcl_op,"ax",%progbits
 8357              		.align	1
 8358              		.p2align 2,,3
 8359              		.syntax unified
 8360              		.thumb
 8361              		.thumb_func
 8362              		.fpu fpv4-sp-d16
 8364              	storcl_op:
 8365              	.LVL576:
 8366              	.LFB115:
1650:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8367              		.loc 1 1650 76 is_stmt 1 view -0
 8368              		.cfi_startproc
 8369              		@ args = 0, pretend = 0, frame = 72
 8370              		@ frame_needed = 0, uses_anonymous_args = 0
1651:src/xeq.c     **** 
 8371              		.loc 1 1651 2 view .LVU2216
ARM GAS  /tmp/cc7LeJ71.s 			page 284


1650:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8372              		.loc 1 1650 76 is_stmt 0 view .LVU2217
 8373 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 8374              		.cfi_def_cfa_offset 20
 8375              		.cfi_offset 4, -20
 8376              		.cfi_offset 5, -16
 8377              		.cfi_offset 6, -12
 8378              		.cfi_offset 7, -8
 8379              		.cfi_offset 14, -4
 8380 0002 93B0     		sub	sp, sp, #76
 8381              		.cfi_def_cfa_offset 96
 8382              	.LVL577:
1653:src/xeq.c     **** 	getRegister(y, index);
 8383              		.loc 1 1653 2 is_stmt 1 view .LVU2218
 8384              	.LBB1997:
 8385              	.LBI1997:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8386              		.loc 1 824 12 view .LVU2219
 8387              	.LBB1998:
 825:src/xeq.c     **** }
 8388              		.loc 1 825 2 view .LVU2220
 8389              	.LBE1998:
 8390              	.LBE1997:
1650:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8391              		.loc 1 1650 76 is_stmt 0 view .LVU2221
 8392 0004 0E46     		mov	r6, r1
 8393 0006 0446     		mov	r4, r0
 8394              	.LBB2001:
 8395              	.LBB1999:
 825:src/xeq.c     **** }
 8396              		.loc 1 825 9 view .LVU2222
 8397 0008 6421     		movs	r1, #100
 8398              	.LVL578:
 825:src/xeq.c     **** }
 8399              		.loc 1 825 9 view .LVU2223
 8400 000a 6846     		mov	r0, sp
 8401              	.LVL579:
 825:src/xeq.c     **** }
 8402              		.loc 1 825 9 view .LVU2224
 8403              	.LBE1999:
 8404              	.LBE2001:
1650:src/xeq.c     **** 	decNumber a, b, *x = &a, *y = &b;
 8405              		.loc 1 1650 76 view .LVU2225
 8406 000c 1D46     		mov	r5, r3
 8407 000e 1746     		mov	r7, r2
 8408              	.LBB2002:
 8409              	.LBB2000:
 825:src/xeq.c     **** }
 8410              		.loc 1 825 9 view .LVU2226
 8411 0010 FFF7FEFF 		bl	getRegister
 8412              	.LVL580:
 825:src/xeq.c     **** }
 8413              		.loc 1 825 9 view .LVU2227
 8414              	.LBE2000:
 8415              	.LBE2002:
1654:src/xeq.c     **** 	if (rev) {
 8416              		.loc 1 1654 2 is_stmt 1 view .LVU2228
ARM GAS  /tmp/cc7LeJ71.s 			page 285


 8417 0014 3146     		mov	r1, r6
 8418 0016 09A8     		add	r0, sp, #36
 8419              	.LVL581:
1654:src/xeq.c     **** 	if (rev) {
 8420              		.loc 1 1654 2 is_stmt 0 view .LVU2229
 8421 0018 FFF7FEFF 		bl	getRegister
 8422              	.LVL582:
1655:src/xeq.c     **** 		x = y;
 8423              		.loc 1 1655 2 is_stmt 1 view .LVU2230
1655:src/xeq.c     **** 		x = y;
 8424              		.loc 1 1655 5 is_stmt 0 view .LVU2231
 8425 001c 4DB1     		cbz	r5, .L657
1657:src/xeq.c     **** 	}
 8426              		.loc 1 1657 5 view .LVU2232
 8427 001e 6946     		mov	r1, sp
1656:src/xeq.c     **** 		y = &a;
 8428              		.loc 1 1656 5 view .LVU2233
 8429 0020 09AA     		add	r2, sp, #36
 8430              	.LVL583:
 8431              	.L648:
1660:src/xeq.c     **** 	case 1:
 8432              		.loc 1 1660 2 is_stmt 1 view .LVU2234
 8433 0022 601E     		subs	r0, r4, #1
 8434 0024 0528     		cmp	r0, #5
 8435 0026 2BD8     		bhi	.L658
 8436 0028 DFE800F0 		tbb	[pc, r0]
 8437              	.L651:
 8438 002c 0C       		.byte	(.L656-.L651)/2
 8439 002d 12       		.byte	(.L655-.L651)/2
 8440 002e 18       		.byte	(.L654-.L651)/2
 8441 002f 1E       		.byte	(.L653-.L651)/2
 8442 0030 24       		.byte	(.L652-.L651)/2
 8443 0031 06       		.byte	(.L650-.L651)/2
 8444              	.LVL584:
 8445              		.p2align 1
 8446              	.L657:
1651:src/xeq.c     **** 
 8447              		.loc 1 1651 28 is_stmt 0 view .LVU2235
 8448 0032 09A9     		add	r1, sp, #36
 8449              	.LVL585:
1651:src/xeq.c     **** 
 8450              		.loc 1 1651 19 view .LVU2236
 8451 0034 6A46     		mov	r2, sp
 8452 0036 F4E7     		b	.L648
 8453              	.LVL586:
 8454              	.L650:
1677:src/xeq.c     **** 		break;
 8455              		.loc 1 1677 3 is_stmt 1 view .LVU2237
 8456 0038 3846     		mov	r0, r7
 8457 003a FFF7FEFF 		bl	dn_max
 8458              	.LVL587:
1678:src/xeq.c     **** 	default:
 8459              		.loc 1 1678 3 view .LVU2238
1682:src/xeq.c     **** }
 8460              		.loc 1 1682 9 is_stmt 0 view .LVU2239
 8461 003e 0020     		movs	r0, #0
 8462              	.L647:
ARM GAS  /tmp/cc7LeJ71.s 			page 286


1683:src/xeq.c     **** 
 8463              		.loc 1 1683 1 view .LVU2240
 8464 0040 13B0     		add	sp, sp, #76
 8465              		.cfi_remember_state
 8466              		.cfi_def_cfa_offset 20
 8467              		@ sp needed
 8468 0042 F0BD     		pop	{r4, r5, r6, r7, pc}
 8469              	.LVL588:
 8470              	.L656:
 8471              		.cfi_restore_state
1662:src/xeq.c     **** 		break;
 8472              		.loc 1 1662 3 is_stmt 1 view .LVU2241
 8473 0044 3846     		mov	r0, r7
 8474 0046 FFF7FEFF 		bl	dn_add
 8475              	.LVL589:
1663:src/xeq.c     **** 	case 2:
 8476              		.loc 1 1663 3 view .LVU2242
1682:src/xeq.c     **** }
 8477              		.loc 1 1682 9 is_stmt 0 view .LVU2243
 8478 004a 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8479              		.loc 1 1683 1 view .LVU2244
 8480 004c 13B0     		add	sp, sp, #76
 8481              		.cfi_remember_state
 8482              		.cfi_def_cfa_offset 20
 8483              		@ sp needed
 8484 004e F0BD     		pop	{r4, r5, r6, r7, pc}
 8485              	.LVL590:
 8486              	.L655:
 8487              		.cfi_restore_state
1665:src/xeq.c     **** 		break;
 8488              		.loc 1 1665 3 is_stmt 1 view .LVU2245
 8489 0050 3846     		mov	r0, r7
 8490 0052 FFF7FEFF 		bl	dn_subtract
 8491              	.LVL591:
1666:src/xeq.c     **** 	case 3:
 8492              		.loc 1 1666 3 view .LVU2246
1682:src/xeq.c     **** }
 8493              		.loc 1 1682 9 is_stmt 0 view .LVU2247
 8494 0056 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8495              		.loc 1 1683 1 view .LVU2248
 8496 0058 13B0     		add	sp, sp, #76
 8497              		.cfi_remember_state
 8498              		.cfi_def_cfa_offset 20
 8499              		@ sp needed
 8500 005a F0BD     		pop	{r4, r5, r6, r7, pc}
 8501              	.LVL592:
 8502              	.L654:
 8503              		.cfi_restore_state
1668:src/xeq.c     **** 		break;
 8504              		.loc 1 1668 3 is_stmt 1 view .LVU2249
 8505 005c 3846     		mov	r0, r7
 8506 005e FFF7FEFF 		bl	dn_multiply
 8507              	.LVL593:
1669:src/xeq.c     **** 	case 4:
 8508              		.loc 1 1669 3 view .LVU2250
ARM GAS  /tmp/cc7LeJ71.s 			page 287


1682:src/xeq.c     **** }
 8509              		.loc 1 1682 9 is_stmt 0 view .LVU2251
 8510 0062 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8511              		.loc 1 1683 1 view .LVU2252
 8512 0064 13B0     		add	sp, sp, #76
 8513              		.cfi_remember_state
 8514              		.cfi_def_cfa_offset 20
 8515              		@ sp needed
 8516 0066 F0BD     		pop	{r4, r5, r6, r7, pc}
 8517              	.LVL594:
 8518              	.L653:
 8519              		.cfi_restore_state
1671:src/xeq.c     **** 		break;
 8520              		.loc 1 1671 3 is_stmt 1 view .LVU2253
 8521 0068 3846     		mov	r0, r7
 8522 006a FFF7FEFF 		bl	dn_divide
 8523              	.LVL595:
1672:src/xeq.c     **** 	case 5:
 8524              		.loc 1 1672 3 view .LVU2254
1682:src/xeq.c     **** }
 8525              		.loc 1 1682 9 is_stmt 0 view .LVU2255
 8526 006e 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8527              		.loc 1 1683 1 view .LVU2256
 8528 0070 13B0     		add	sp, sp, #76
 8529              		.cfi_remember_state
 8530              		.cfi_def_cfa_offset 20
 8531              		@ sp needed
 8532 0072 F0BD     		pop	{r4, r5, r6, r7, pc}
 8533              	.LVL596:
 8534              	.L652:
 8535              		.cfi_restore_state
1674:src/xeq.c     **** 		break;
 8536              		.loc 1 1674 3 is_stmt 1 view .LVU2257
 8537 0074 3846     		mov	r0, r7
 8538 0076 FFF7FEFF 		bl	dn_min
 8539              	.LVL597:
1675:src/xeq.c     **** 	case 6:
 8540              		.loc 1 1675 3 view .LVU2258
1682:src/xeq.c     **** }
 8541              		.loc 1 1682 9 is_stmt 0 view .LVU2259
 8542 007a 0020     		movs	r0, #0
1683:src/xeq.c     **** 
 8543              		.loc 1 1683 1 view .LVU2260
 8544 007c 13B0     		add	sp, sp, #76
 8545              		.cfi_def_cfa_offset 20
 8546              		@ sp needed
 8547 007e F0BD     		pop	{r4, r5, r6, r7, pc}
 8548              	.LVL598:
 8549              	.L658:
1682:src/xeq.c     **** }
 8550              		.loc 1 1682 9 view .LVU2261
 8551 0080 0120     		movs	r0, #1
 8552 0082 DDE7     		b	.L647
 8553              		.cfi_endproc
 8554              	.LFE115:
ARM GAS  /tmp/cc7LeJ71.s 			page 288


 8556              		.section	.text.storcl_cop,"ax",%progbits
 8557              		.align	1
 8558              		.p2align 2,,3
 8559              		.syntax unified
 8560              		.thumb
 8561              		.thumb_func
 8562              		.fpu fpv4-sp-d16
 8564              	storcl_cop:
 8565              	.LVL599:
 8566              	.LFB120:
1784:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8567              		.loc 1 1784 93 is_stmt 1 view -0
 8568              		.cfi_startproc
 8569              		@ args = 4, pretend = 0, frame = 144
 8570              		@ frame_needed = 0, uses_anonymous_args = 0
1785:src/xeq.c     **** 
 8571              		.loc 1 1785 2 view .LVU2263
1784:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8572              		.loc 1 1784 93 is_stmt 0 view .LVU2264
 8573 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 8574              		.cfi_def_cfa_offset 24
 8575              		.cfi_offset 4, -24
 8576              		.cfi_offset 5, -20
 8577              		.cfi_offset 6, -16
 8578              		.cfi_offset 7, -12
 8579              		.cfi_offset 8, -8
 8580              		.cfi_offset 14, -4
 8581 0004 A6B0     		sub	sp, sp, #152
 8582              		.cfi_def_cfa_offset 176
 8583              	.LVL600:
1787:src/xeq.c     **** 	getRegister(y + 0, index);
 8584              		.loc 1 1787 2 is_stmt 1 view .LVU2265
 8585              	.LBB2003:
 8586              	.LBI2003:
 854:src/xeq.c     **** 	getX(x);
 8587              		.loc 1 854 6 view .LVU2266
 8588              	.LBE2003:
 855:src/xeq.c     **** 	getY(y);
 8589              		.loc 1 855 2 view .LVU2267
 8590              	.LBB2012:
 8591              	.LBB2004:
 8592              	.LBI2004:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 8593              		.loc 1 824 12 view .LVU2268
 8594              	.LBB2005:
 825:src/xeq.c     **** }
 8595              		.loc 1 825 2 view .LVU2269
 8596              	.LBE2005:
 8597              	.LBE2004:
 8598              	.LBE2012:
1784:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8599              		.loc 1 1784 93 is_stmt 0 view .LVU2270
 8600 0006 0D46     		mov	r5, r1
 8601 0008 0446     		mov	r4, r0
 8602              	.LBB2013:
 8603              	.LBB2008:
 8604              	.LBB2006:
ARM GAS  /tmp/cc7LeJ71.s 			page 289


 825:src/xeq.c     **** }
 8605              		.loc 1 825 9 view .LVU2271
 8606 000a 6421     		movs	r1, #100
 8607              	.LVL601:
 825:src/xeq.c     **** }
 8608              		.loc 1 825 9 view .LVU2272
 8609 000c 02A8     		add	r0, sp, #8
 8610              	.LVL602:
 825:src/xeq.c     **** }
 8611              		.loc 1 825 9 view .LVU2273
 8612              	.LBE2006:
 8613              	.LBE2008:
 8614              	.LBE2013:
1784:src/xeq.c     **** 	decNumber a[2], b[2], *x = a, *y = b;
 8615              		.loc 1 1784 93 view .LVU2274
 8616 000e 9046     		mov	r8, r2
 8617 0010 1E46     		mov	r6, r3
 8618 0012 2C9F     		ldr	r7, [sp, #176]
 8619              	.LBB2014:
 8620              	.LBB2009:
 8621              	.LBB2007:
 825:src/xeq.c     **** }
 8622              		.loc 1 825 9 view .LVU2275
 8623 0014 FFF7FEFF 		bl	getRegister
 8624              	.LVL603:
 825:src/xeq.c     **** }
 8625              		.loc 1 825 9 view .LVU2276
 8626              	.LBE2007:
 8627              	.LBE2009:
 8628              	.LBE2014:
 856:src/xeq.c     **** }
 8629              		.loc 1 856 2 is_stmt 1 view .LVU2277
 8630              	.LBB2015:
 8631              	.LBB2010:
 8632              	.LBI2010:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 8633              		.loc 1 832 6 view .LVU2278
 8634              	.LBB2011:
 833:src/xeq.c     **** }
 8635              		.loc 1 833 2 view .LVU2279
 8636 0018 6521     		movs	r1, #101
 8637 001a 0BA8     		add	r0, sp, #44
 8638              	.LVL604:
 833:src/xeq.c     **** }
 8639              		.loc 1 833 2 is_stmt 0 view .LVU2280
 8640 001c FFF7FEFF 		bl	getRegister
 8641              	.LVL605:
 833:src/xeq.c     **** }
 8642              		.loc 1 833 2 view .LVU2281
 8643              	.LBE2011:
 8644              	.LBE2010:
 8645              	.LBE2015:
1788:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8646              		.loc 1 1788 2 is_stmt 1 view .LVU2282
 8647 0020 2946     		mov	r1, r5
 8648 0022 14A8     		add	r0, sp, #80
 8649              	.LVL606:
ARM GAS  /tmp/cc7LeJ71.s 			page 290


1788:src/xeq.c     **** 	getRegister(y + 1, index + 1);
 8650              		.loc 1 1788 2 is_stmt 0 view .LVU2283
 8651 0024 FFF7FEFF 		bl	getRegister
 8652              	.LVL607:
1789:src/xeq.c     **** 
 8653              		.loc 1 1789 2 is_stmt 1 view .LVU2284
 8654 0028 691C     		adds	r1, r5, #1
 8655 002a 1DA8     		add	r0, sp, #116
 8656 002c FFF7FEFF 		bl	getRegister
 8657              	.LVL608:
1791:src/xeq.c     **** 		x = y;
 8658              		.loc 1 1791 2 view .LVU2285
1791:src/xeq.c     **** 		x = y;
 8659              		.loc 1 1791 5 is_stmt 0 view .LVU2286
 8660 0030 47B1     		cbz	r7, .L668
1793:src/xeq.c     **** 	}
 8661              		.loc 1 1793 5 view .LVU2287
 8662 0032 02AA     		add	r2, sp, #8
 8663              	.LVL609:
1792:src/xeq.c     **** 		y = a;
 8664              		.loc 1 1792 5 view .LVU2288
 8665 0034 14A9     		add	r1, sp, #80
 8666              	.LVL610:
 8667              	.L661:
1796:src/xeq.c     **** 	case 1:
 8668              		.loc 1 1796 2 is_stmt 1 view .LVU2289
 8669 0036 601E     		subs	r0, r4, #1
 8670 0038 0328     		cmp	r0, #3
 8671 003a 3ED8     		bhi	.L669
 8672 003c DFE800F0 		tbb	[pc, r0]
 8673              	.L664:
 8674 0040 13       		.byte	(.L667-.L664)/2
 8675 0041 21       		.byte	(.L666-.L664)/2
 8676 0042 2F       		.byte	(.L665-.L664)/2
 8677 0043 05       		.byte	(.L663-.L664)/2
 8678              	.LVL611:
 8679              		.p2align 1
 8680              	.L668:
1785:src/xeq.c     **** 
 8681              		.loc 1 1785 33 is_stmt 0 view .LVU2290
 8682 0044 14AA     		add	r2, sp, #80
 8683              	.LVL612:
1785:src/xeq.c     **** 
 8684              		.loc 1 1785 25 view .LVU2291
 8685 0046 02A9     		add	r1, sp, #8
 8686              	.LVL613:
1785:src/xeq.c     **** 
 8687              		.loc 1 1785 25 view .LVU2292
 8688 0048 F5E7     		b	.L661
 8689              	.L663:
1807:src/xeq.c     **** 		break;
 8690              		.loc 1 1807 3 is_stmt 1 view .LVU2293
1807:src/xeq.c     **** 		break;
 8691              		.loc 1 1807 46 is_stmt 0 view .LVU2294
 8692 004a 01F12403 		add	r3, r1, #36
1807:src/xeq.c     **** 		break;
 8693              		.loc 1 1807 3 view .LVU2295
ARM GAS  /tmp/cc7LeJ71.s 			page 291


 8694 004e CDE90013 		strd	r1, r3, [sp]
 8695 0052 4046     		mov	r0, r8
 8696 0054 3146     		mov	r1, r6
 8697              	.LVL614:
1807:src/xeq.c     **** 		break;
 8698              		.loc 1 1807 3 view .LVU2296
 8699 0056 02F12403 		add	r3, r2, #36
 8700 005a FFF7FEFF 		bl	cmplxDivide
 8701              	.LVL615:
1808:src/xeq.c     **** 	default:
 8702              		.loc 1 1808 3 is_stmt 1 view .LVU2297
1812:src/xeq.c     **** }
 8703              		.loc 1 1812 9 is_stmt 0 view .LVU2298
 8704 005e 0020     		movs	r0, #0
 8705              	.L660:
1813:src/xeq.c     **** 
 8706              		.loc 1 1813 1 view .LVU2299
 8707 0060 26B0     		add	sp, sp, #152
 8708              		.cfi_remember_state
 8709              		.cfi_def_cfa_offset 24
 8710              		@ sp needed
 8711 0062 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8712              	.LVL616:
 8713              	.L667:
 8714              		.cfi_restore_state
1798:src/xeq.c     **** 		break;
 8715              		.loc 1 1798 3 is_stmt 1 view .LVU2300
1798:src/xeq.c     **** 		break;
 8716              		.loc 1 1798 43 is_stmt 0 view .LVU2301
 8717 0066 01F12403 		add	r3, r1, #36
1798:src/xeq.c     **** 		break;
 8718              		.loc 1 1798 3 view .LVU2302
 8719 006a CDE90013 		strd	r1, r3, [sp]
 8720 006e 4046     		mov	r0, r8
 8721 0070 3146     		mov	r1, r6
 8722              	.LVL617:
1798:src/xeq.c     **** 		break;
 8723              		.loc 1 1798 3 view .LVU2303
 8724 0072 02F12403 		add	r3, r2, #36
 8725 0076 FFF7FEFF 		bl	cmplxAdd
 8726              	.LVL618:
1799:src/xeq.c     **** 	case 2:
 8727              		.loc 1 1799 3 is_stmt 1 view .LVU2304
1812:src/xeq.c     **** }
 8728              		.loc 1 1812 9 is_stmt 0 view .LVU2305
 8729 007a 0020     		movs	r0, #0
1813:src/xeq.c     **** 
 8730              		.loc 1 1813 1 view .LVU2306
 8731 007c 26B0     		add	sp, sp, #152
 8732              		.cfi_remember_state
 8733              		.cfi_def_cfa_offset 24
 8734              		@ sp needed
 8735 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8736              	.LVL619:
 8737              	.L666:
 8738              		.cfi_restore_state
1801:src/xeq.c     **** 		break;
ARM GAS  /tmp/cc7LeJ71.s 			page 292


 8739              		.loc 1 1801 3 is_stmt 1 view .LVU2307
1801:src/xeq.c     **** 		break;
 8740              		.loc 1 1801 48 is_stmt 0 view .LVU2308
 8741 0082 01F12403 		add	r3, r1, #36
1801:src/xeq.c     **** 		break;
 8742              		.loc 1 1801 3 view .LVU2309
 8743 0086 CDE90013 		strd	r1, r3, [sp]
 8744 008a 4046     		mov	r0, r8
 8745 008c 3146     		mov	r1, r6
 8746              	.LVL620:
1801:src/xeq.c     **** 		break;
 8747              		.loc 1 1801 3 view .LVU2310
 8748 008e 02F12403 		add	r3, r2, #36
 8749 0092 FFF7FEFF 		bl	cmplxSubtract
 8750              	.LVL621:
1802:src/xeq.c     **** 	case 3:
 8751              		.loc 1 1802 3 is_stmt 1 view .LVU2311
1812:src/xeq.c     **** }
 8752              		.loc 1 1812 9 is_stmt 0 view .LVU2312
 8753 0096 0020     		movs	r0, #0
1813:src/xeq.c     **** 
 8754              		.loc 1 1813 1 view .LVU2313
 8755 0098 26B0     		add	sp, sp, #152
 8756              		.cfi_remember_state
 8757              		.cfi_def_cfa_offset 24
 8758              		@ sp needed
 8759 009a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 8760              	.LVL622:
 8761              	.L665:
 8762              		.cfi_restore_state
1804:src/xeq.c     **** 		break;
 8763              		.loc 1 1804 3 is_stmt 1 view .LVU2314
1804:src/xeq.c     **** 		break;
 8764              		.loc 1 1804 48 is_stmt 0 view .LVU2315
 8765 009e 01F12403 		add	r3, r1, #36
1804:src/xeq.c     **** 		break;
 8766              		.loc 1 1804 3 view .LVU2316
 8767 00a2 CDE90013 		strd	r1, r3, [sp]
 8768 00a6 4046     		mov	r0, r8
 8769 00a8 3146     		mov	r1, r6
 8770              	.LVL623:
1804:src/xeq.c     **** 		break;
 8771              		.loc 1 1804 3 view .LVU2317
 8772 00aa 02F12403 		add	r3, r2, #36
 8773 00ae FFF7FEFF 		bl	cmplxMultiply
 8774              	.LVL624:
1805:src/xeq.c     **** 	case 4:
 8775              		.loc 1 1805 3 is_stmt 1 view .LVU2318
1812:src/xeq.c     **** }
 8776              		.loc 1 1812 9 is_stmt 0 view .LVU2319
 8777 00b2 0020     		movs	r0, #0
1813:src/xeq.c     **** 
 8778              		.loc 1 1813 1 view .LVU2320
 8779 00b4 26B0     		add	sp, sp, #152
 8780              		.cfi_def_cfa_offset 24
 8781              		@ sp needed
 8782 00b6 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
ARM GAS  /tmp/cc7LeJ71.s 			page 293


 8783              	.LVL625:
 8784              	.L669:
1812:src/xeq.c     **** }
 8785              		.loc 1 1812 9 view .LVU2321
 8786 00ba 0120     		movs	r0, #1
 8787 00bc D0E7     		b	.L660
 8788              		.cfi_endproc
 8789              	.LFE120:
 8791 00be 00BF     		.section	.text.cpx_enter,"ax",%progbits
 8792              		.align	1
 8793              		.p2align 2,,3
 8794              		.global	cpx_enter
 8795              		.syntax unified
 8796              		.thumb
 8797              		.thumb_func
 8798              		.fpu fpv4-sp-d16
 8800              	cpx_enter:
 8801              	.LVL626:
 8802              	.LFB74:
 921:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
 8803              		.loc 1 921 31 is_stmt 1 view -0
 8804              		.cfi_startproc
 8805              		@ args = 0, pretend = 0, frame = 0
 8806              		@ frame_needed = 0, uses_anonymous_args = 0
 922:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8807              		.loc 1 922 3 view .LVU2323
 930:src/xeq.c     ****     lift();
 8808              		.loc 1 930 5 view .LVU2324
 921:src/xeq.c     ****   if( (State2.state_lift || (XromRunning || Running)) && ENTRY_RPN_ENABLED ) { // flag is zero if e
 8809              		.loc 1 921 31 is_stmt 0 view .LVU2325
 8810 0000 70B5     		push	{r4, r5, r6, lr}
 8811              		.cfi_def_cfa_offset 16
 8812              		.cfi_offset 4, -16
 8813              		.cfi_offset 5, -12
 8814              		.cfi_offset 6, -8
 8815              		.cfi_offset 14, -4
 930:src/xeq.c     ****     lift();
 8816              		.loc 1 930 5 view .LVU2326
 8817 0002 FFF7FEFF 		bl	lift
 8818              	.LVL627:
 931:src/xeq.c     ****     copyreg(get_reg_n(regY_idx), get_reg_n(regT_idx));
 8819              		.loc 1 931 5 is_stmt 1 view .LVU2327
 8820 0006 FFF7FEFF 		bl	lift
 8821              	.LVL628:
 932:src/xeq.c     ****     set_was_complex();
 8822              		.loc 1 932 5 view .LVU2328
 8823 000a 6520     		movs	r0, #101
 8824 000c FFF7FEFF 		bl	get_reg_n
 8825              	.LVL629:
 922:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8826              		.loc 1 922 55 is_stmt 0 view .LVU2329
 8827 0010 0D4E     		ldr	r6, .L682
 922:src/xeq.c     ****     //Only duplicate if needed, otherwise ignore. CPX LOCK mode cannot run code, but the same excep
 8828              		.loc 1 922 8 view .LVU2330
 8829 0012 0E4C     		ldr	r4, .L682+4
 932:src/xeq.c     ****     set_was_complex();
 8830              		.loc 1 932 5 view .LVU2331
ARM GAS  /tmp/cc7LeJ71.s 			page 294


 8831 0014 0546     		mov	r5, r0
 932:src/xeq.c     ****     set_was_complex();
 8832              		.loc 1 932 34 view .LVU2332
 8833 0016 6720     		movs	r0, #103
 8834 0018 FFF7FEFF 		bl	get_reg_n
 8835              	.LVL630:
 8836              	.LBB2016:
 8837              	.LBB2017:
 8838              	.LBB2018:
 8839              	.LBB2019:
1119:src/xeq.c     **** }
 8840              		.loc 1 1119 24 view .LVU2333
 8841 001c 3368     		ldr	r3, [r6]
 8842 001e B3F8E827 		ldrh	r2, [r3, #2024]
 8843 0022 44F20103 		movw	r3, #16385
 8844              	.LBE2019:
 8845              	.LBE2018:
 727:src/xeq.c     **** }
 8846              		.loc 1 727 2 view .LVU2334
 8847 0026 1340     		ands	r3, r3, r2
 8848 0028 B3F5804F 		cmp	r3, #16384
 8849              	.LBE2017:
 8850              	.LBE2016:
 932:src/xeq.c     ****     set_was_complex();
 8851              		.loc 1 932 34 view .LVU2335
 8852 002c 0146     		mov	r1, r0
 8853              	.LVL631:
 8854              	.LBB2023:
 8855              	.LBI2016:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 8856              		.loc 1 726 6 is_stmt 1 view .LVU2336
 8857              	.LBB2022:
 727:src/xeq.c     **** }
 8858              		.loc 1 727 2 view .LVU2337
 8859              	.LBB2021:
 8860              	.LBI2018:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 8861              		.loc 1 1118 5 view .LVU2338
 8862              	.LBB2020:
1119:src/xeq.c     **** }
 8863              		.loc 1 1119 2 view .LVU2339
 8864              	.LBE2020:
 8865              	.LBE2021:
 727:src/xeq.c     **** }
 8866              		.loc 1 727 2 is_stmt 0 view .LVU2340
 8867 002e 0CBF     		ite	eq
 8868 0030 1022     		moveq	r2, #16
 8869 0032 0822     		movne	r2, #8
 8870 0034 2846     		mov	r0, r5
 8871              	.LVL632:
 727:src/xeq.c     **** }
 8872              		.loc 1 727 2 view .LVU2341
 8873 0036 FFF7FEFF 		bl	xcopy
 8874              	.LVL633:
 727:src/xeq.c     **** }
 8875              		.loc 1 727 2 view .LVU2342
 8876              	.LBE2022:
ARM GAS  /tmp/cc7LeJ71.s 			page 295


 8877              	.LBE2023:
 933:src/xeq.c     ****   }
 8878              		.loc 1 933 5 is_stmt 1 view .LVU2343
 8879              	.LBB2024:
 8880              	.LBI2024:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 8881              		.loc 1 539 13 view .LVU2344
 8882              	.LBB2025:
 540:src/xeq.c     **** }
 8883              		.loc 1 540 2 view .LVU2345
 540:src/xeq.c     **** }
 8884              		.loc 1 540 20 is_stmt 0 view .LVU2346
 8885 003a 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 8886 003c 0122     		movs	r2, #1
 8887 003e 62F38713 		bfi	r3, r2, #6, #2
 8888 0042 2375     		strb	r3, [r4, #20]
 8889              	.LBE2025:
 8890              	.LBE2024:
 935:src/xeq.c     **** 
 8891              		.loc 1 935 1 view .LVU2347
 8892 0044 70BD     		pop	{r4, r5, r6, pc}
 8893              	.L683:
 8894 0046 00BF     		.align	2
 8895              	.L682:
 8896 0048 00000000 		.word	main_ram
 8897 004c 00000000 		.word	StateWhileOn
 8898              		.cfi_endproc
 8899              	.LFE74:
 8901              		.section	.text.cpx_fill,"ax",%progbits
 8902              		.align	1
 8903              		.p2align 2,,3
 8904              		.global	cpx_fill
 8905              		.syntax unified
 8906              		.thumb
 8907              		.thumb_func
 8908              		.fpu fpv4-sp-d16
 8910              	cpx_fill:
 8911              	.LVL634:
 8912              	.LFB79:
1086:src/xeq.c     **** 	const int n = stack_size();
 8913              		.loc 1 1086 30 is_stmt 1 view -0
 8914              		.cfi_startproc
 8915              		@ args = 0, pretend = 0, frame = 0
 8916              		@ frame_needed = 0, uses_anonymous_args = 0
1087:src/xeq.c     **** 	const REGISTER *y = get_reg_n(regY_idx);
 8917              		.loc 1 1087 2 view .LVU2349
 8918              	.LBB2026:
 8919              	.LBI2026:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 8920              		.loc 1 712 5 view .LVU2350
 8921              	.LBB2027:
 713:src/xeq.c     **** 		return 4;
 8922              		.loc 1 713 2 view .LVU2351
 8923              	.LBE2027:
 8924              	.LBE2026:
1086:src/xeq.c     **** 	const int n = stack_size();
 8925              		.loc 1 1086 30 is_stmt 0 view .LVU2352
ARM GAS  /tmp/cc7LeJ71.s 			page 296


 8926 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 8927              		.cfi_def_cfa_offset 32
 8928              		.cfi_offset 3, -32
 8929              		.cfi_offset 4, -28
 8930              		.cfi_offset 5, -24
 8931              		.cfi_offset 6, -20
 8932              		.cfi_offset 7, -16
 8933              		.cfi_offset 8, -12
 8934              		.cfi_offset 9, -8
 8935              		.cfi_offset 14, -4
 8936              	.LBB2032:
 8937              	.LBB2030:
 713:src/xeq.c     **** 		return 4;
 8938              		.loc 1 713 8 view .LVU2353
 8939 0004 1F4D     		ldr	r5, .L697
 8940 0006 2B68     		ldr	r3, [r5]
 713:src/xeq.c     **** 		return 4;
 8941              		.loc 1 713 6 view .LVU2354
 8942 0008 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 8943              		.loc 1 713 5 view .LVU2355
 8944 000c 1207     		lsls	r2, r2, #28
 8945 000e 37D5     		bpl	.L689
 8946              	.LBB2028:
 8947              	.LBI2028:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 8948              		.loc 1 185 5 is_stmt 1 view .LVU2356
 8949              	.LBB2029:
 186:src/xeq.c     **** }
 8950              		.loc 1 186 2 view .LVU2357
 186:src/xeq.c     **** }
 8951              		.loc 1 186 9 is_stmt 0 view .LVU2358
 8952 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 8953              	.LBE2029:
 8954              	.LBE2028:
 713:src/xeq.c     **** 		return 4;
 8955              		.loc 1 713 27 view .LVU2359
 8956 0014 9B0B     		lsrs	r3, r3, #14
 8957 0016 032B     		cmp	r3, #3
 8958 0018 2AD0     		beq	.L696
 715:src/xeq.c     **** }
 8959              		.loc 1 715 9 view .LVU2360
 8960 001a 0827     		movs	r7, #8
 8961              	.L685:
 8962              	.LVL635:
 715:src/xeq.c     **** }
 8963              		.loc 1 715 9 view .LVU2361
 8964              	.LBE2030:
 8965              	.LBE2032:
1088:src/xeq.c     **** 	int i;
 8966              		.loc 1 1088 2 is_stmt 1 view .LVU2362
1088:src/xeq.c     **** 	int i;
 8967              		.loc 1 1088 22 is_stmt 0 view .LVU2363
 8968 001c 6520     		movs	r0, #101
 8969              	.LVL636:
1088:src/xeq.c     **** 	int i;
 8970              		.loc 1 1088 22 view .LVU2364
ARM GAS  /tmp/cc7LeJ71.s 			page 297


 8971 001e FFF7FEFF 		bl	get_reg_n
 8972              	.LVL637:
1092:src/xeq.c     **** 	set_was_complex();
 8973              		.loc 1 1092 3 view .LVU2365
 8974 0022 DFF86C90 		ldr	r9, .L697+12
1088:src/xeq.c     **** 	int i;
 8975              		.loc 1 1088 22 view .LVU2366
 8976 0026 8046     		mov	r8, r0
 8977              	.LVL638:
1089:src/xeq.c     **** 
 8978              		.loc 1 1089 2 is_stmt 1 view .LVU2367
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8979              		.loc 1 1091 2 view .LVU2368
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8980              		.loc 1 1091 12 view .LVU2369
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 8981              		.loc 1 1091 8 is_stmt 0 view .LVU2370
 8982 0028 0224     		movs	r4, #2
 8983              	.LBB2033:
 8984              	.LBB2034:
 8985              	.LBB2035:
 8986              	.LBB2036:
1119:src/xeq.c     **** }
 8987              		.loc 1 1119 24 view .LVU2371
 8988 002a 44F20106 		movw	r6, #16385
 8989              	.LVL639:
 8990              	.L688:
1119:src/xeq.c     **** }
 8991              		.loc 1 1119 24 view .LVU2372
 8992              	.LBE2036:
 8993              	.LBE2035:
 8994              	.LBE2034:
 8995              	.LBE2033:
1092:src/xeq.c     **** 	set_was_complex();
 8996              		.loc 1 1092 3 is_stmt 1 view .LVU2373
 8997              	.LBB2047:
 8998              	.LBI2047:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 8999              		.loc 1 718 11 view .LVU2374
 9000              	.LBB2048:
 719:src/xeq.c     **** }
 9001              		.loc 1 719 2 view .LVU2375
 719:src/xeq.c     **** }
 9002              		.loc 1 719 9 is_stmt 0 view .LVU2376
 9003 002e 04F16400 		add	r0, r4, #100
 9004 0032 FFF7FEFF 		bl	get_reg_n
 9005              	.LVL640:
 719:src/xeq.c     **** }
 9006              		.loc 1 719 9 view .LVU2377
 9007              	.LBE2048:
 9008              	.LBE2047:
1092:src/xeq.c     **** 	set_was_complex();
 9009              		.loc 1 1092 3 view .LVU2378
 9010 0036 E307     		lsls	r3, r4, #31
 9011              	.LBB2049:
 9012              	.LBB2043:
 9013              	.LBB2040:
ARM GAS  /tmp/cc7LeJ71.s 			page 298


 9014              	.LBB2037:
1119:src/xeq.c     **** }
 9015              		.loc 1 1119 24 view .LVU2379
 9016 0038 2B68     		ldr	r3, [r5]
 9017              	.LBE2037:
 9018              	.LBE2040:
 9019              	.LBE2043:
 9020              	.LBE2049:
1092:src/xeq.c     **** 	set_was_complex();
 9021              		.loc 1 1092 3 view .LVU2380
 9022 003a 58BF     		it	pl
 9023 003c D9F80010 		ldrpl	r1, [r9]
 9024              	.LBB2050:
 9025              	.LBB2044:
 9026              	.LBB2041:
 9027              	.LBB2038:
1119:src/xeq.c     **** }
 9028              		.loc 1 1119 24 view .LVU2381
 9029 0040 B3F8E837 		ldrh	r3, [r3, #2024]
 9030              	.LBE2038:
 9031              	.LBE2041:
 727:src/xeq.c     **** }
 9032              		.loc 1 727 2 view .LVU2382
 9033 0044 03EA0603 		and	r3, r3, r6
 9034              	.LBE2044:
 9035              	.LBE2050:
1092:src/xeq.c     **** 	set_was_complex();
 9036              		.loc 1 1092 3 view .LVU2383
 9037 0048 48BF     		it	mi
 9038 004a 4146     		movmi	r1, r8
 9039              	.LVL641:
 9040              	.LBB2051:
 9041              	.LBI2033:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 9042              		.loc 1 726 6 is_stmt 1 view .LVU2384
 9043              	.LBB2045:
 727:src/xeq.c     **** }
 9044              		.loc 1 727 2 view .LVU2385
 9045              	.LBB2042:
 9046              	.LBI2035:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9047              		.loc 1 1118 5 view .LVU2386
 9048              	.LBB2039:
1119:src/xeq.c     **** }
 9049              		.loc 1 1119 2 view .LVU2387
 9050              	.LBE2039:
 9051              	.LBE2042:
 727:src/xeq.c     **** }
 9052              		.loc 1 727 2 is_stmt 0 view .LVU2388
 9053 004c B3F5804F 		cmp	r3, #16384
 9054 0050 0CBF     		ite	eq
 9055 0052 1022     		moveq	r2, #16
 9056 0054 0822     		movne	r2, #8
 9057              	.LBE2045:
 9058              	.LBE2051:
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9059              		.loc 1 1091 18 view .LVU2389
ARM GAS  /tmp/cc7LeJ71.s 			page 299


 9060 0056 0134     		adds	r4, r4, #1
 9061              	.LVL642:
 9062              	.LBB2052:
 9063              	.LBB2046:
 727:src/xeq.c     **** }
 9064              		.loc 1 727 2 view .LVU2390
 9065 0058 FFF7FEFF 		bl	xcopy
 9066              	.LVL643:
 727:src/xeq.c     **** }
 9067              		.loc 1 727 2 view .LVU2391
 9068              	.LBE2046:
 9069              	.LBE2052:
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9070              		.loc 1 1091 17 is_stmt 1 view .LVU2392
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9071              		.loc 1 1091 12 view .LVU2393
1091:src/xeq.c     **** 		copyreg(get_stack(i), (i & 1) ? y : StackBase);
 9072              		.loc 1 1091 2 is_stmt 0 view .LVU2394
 9073 005c BC42     		cmp	r4, r7
 9074 005e E6D1     		bne	.L688
1093:src/xeq.c     **** }
 9075              		.loc 1 1093 2 is_stmt 1 view .LVU2395
 9076              	.LBB2053:
 9077              	.LBI2053:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 9078              		.loc 1 539 13 view .LVU2396
 9079              	.LBB2054:
 540:src/xeq.c     **** }
 9080              		.loc 1 540 2 view .LVU2397
 540:src/xeq.c     **** }
 9081              		.loc 1 540 20 is_stmt 0 view .LVU2398
 9082 0060 094B     		ldr	r3, .L697+4
 9083 0062 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 9084 0064 0121     		movs	r1, #1
 9085 0066 61F38712 		bfi	r2, r1, #6, #2
 9086 006a 1A75     		strb	r2, [r3, #20]
 9087              	.LBE2054:
 9088              	.LBE2053:
1094:src/xeq.c     **** 
 9089              		.loc 1 1094 1 view .LVU2399
 9090 006c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 9091              	.LVL644:
 9092              	.L696:
 9093              	.LBB2055:
 9094              	.LBB2031:
 713:src/xeq.c     **** 		return 4;
 9095              		.loc 1 713 44 view .LVU2400
 9096 0070 064B     		ldr	r3, .L697+8
 713:src/xeq.c     **** 		return 4;
 9097              		.loc 1 713 41 view .LVU2401
 9098 0072 93F90130 		ldrsb	r3, [r3, #1]
 714:src/xeq.c     **** 	return 8;
 9099              		.loc 1 714 10 view .LVU2402
 9100 0076 002B     		cmp	r3, #0
 9101 0078 B4BF     		ite	lt
 9102 007a 0827     		movlt	r7, #8
 9103 007c 0427     		movge	r7, #4
ARM GAS  /tmp/cc7LeJ71.s 			page 300


 9104 007e CDE7     		b	.L685
 9105              	.L689:
 9106 0080 0427     		movs	r7, #4
 9107 0082 CBE7     		b	.L685
 9108              	.L698:
 9109              		.align	2
 9110              	.L697:
 9111 0084 00000000 		.word	main_ram
 9112 0088 00000000 		.word	StateWhileOn
 9113 008c 00000000 		.word	XromParams
 9114 0090 00000000 		.word	StackBase
 9115              	.LBE2031:
 9116              	.LBE2055:
 9117              		.cfi_endproc
 9118              	.LFE79:
 9120              		.section	.text.setRegister,"ax",%progbits
 9121              		.align	1
 9122              		.p2align 2,,3
 9123              		.global	setRegister
 9124              		.syntax unified
 9125              		.thumb
 9126              		.thumb_func
 9127              		.fpu fpv4-sp-d16
 9129              	setRegister:
 9130              	.LVL645:
 9131              	.LFB58:
 811:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9132              		.loc 1 811 49 is_stmt 1 view -0
 9133              		.cfi_startproc
 9134              		@ args = 0, pretend = 0, frame = 40
 9135              		@ frame_needed = 0, uses_anonymous_args = 0
 812:src/xeq.c     **** 	decNumber dn;
 9136              		.loc 1 812 2 view .LVU2404
 811:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9137              		.loc 1 811 49 is_stmt 0 view .LVU2405
 9138 0000 30B5     		push	{r4, r5, lr}
 9139              		.cfi_def_cfa_offset 12
 9140              		.cfi_offset 4, -12
 9141              		.cfi_offset 5, -8
 9142              		.cfi_offset 14, -4
 9143 0002 8BB0     		sub	sp, sp, #44
 9144              		.cfi_def_cfa_offset 56
 811:src/xeq.c     **** 	REGISTER *const reg = get_reg_n(index);
 9145              		.loc 1 811 49 view .LVU2406
 9146 0004 0C46     		mov	r4, r1
 812:src/xeq.c     **** 	decNumber dn;
 9147              		.loc 1 812 24 view .LVU2407
 9148 0006 FFF7FEFF 		bl	get_reg_n
 9149              	.LVL646:
 812:src/xeq.c     **** 	decNumber dn;
 9150              		.loc 1 812 24 view .LVU2408
 9151 000a 0546     		mov	r5, r0
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9152              		.loc 1 815 8 view .LVU2409
 9153 000c 2046     		mov	r0, r4
 9154              	.LVL647:
 813:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 301


 9155              		.loc 1 813 2 is_stmt 1 view .LVU2410
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9156              		.loc 1 815 2 view .LVU2411
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9157              		.loc 1 815 8 is_stmt 0 view .LVU2412
 9158 000e FFF7FEFF 		bl	check_special
 9159              	.LVL648:
 815:src/xeq.c     **** 		decNumberNormalize(&dn, x, &Ctx);
 9160              		.loc 1 815 5 view .LVU2413
 9161 0012 08B1     		cbz	r0, .L703
 822:src/xeq.c     **** 
 9162              		.loc 1 822 1 view .LVU2414
 9163 0014 0BB0     		add	sp, sp, #44
 9164              		.cfi_remember_state
 9165              		.cfi_def_cfa_offset 12
 9166              		@ sp needed
 9167 0016 30BD     		pop	{r4, r5, pc}
 9168              	.LVL649:
 9169              	.L703:
 9170              		.cfi_restore_state
 816:src/xeq.c     **** 		if (is_dblmode())
 9171              		.loc 1 816 3 is_stmt 1 view .LVU2415
 9172 0018 0C4A     		ldr	r2, .L705
 9173 001a 2146     		mov	r1, r4
 9174 001c 01A8     		add	r0, sp, #4
 9175 001e FFF7FEFF 		bl	decNumberNormalize
 9176              	.LVL650:
 817:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9177              		.loc 1 817 3 view .LVU2416
 9178              	.LBB2056:
 9179              	.LBI2056:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 9180              		.loc 1 1118 5 view .LVU2417
 9181              	.LBB2057:
1119:src/xeq.c     **** }
 9182              		.loc 1 1119 2 view .LVU2418
1119:src/xeq.c     **** }
 9183              		.loc 1 1119 24 is_stmt 0 view .LVU2419
 9184 0022 0B4B     		ldr	r3, .L705+4
 9185 0024 1B68     		ldr	r3, [r3]
 9186 0026 B3F8E827 		ldrh	r2, [r3, #2024]
 9187 002a 44F20103 		movw	r3, #16385
 9188              	.LBE2057:
 9189              	.LBE2056:
 817:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9190              		.loc 1 817 6 view .LVU2420
 9191 002e 1340     		ands	r3, r3, r2
 9192 0030 B3F5804F 		cmp	r3, #16384
 818:src/xeq.c     **** 		else
 9193              		.loc 1 818 4 view .LVU2421
 9194 0034 01A9     		add	r1, sp, #4
 9195 0036 2846     		mov	r0, r5
 817:src/xeq.c     **** 			packed128_from_number(&(reg->d), &dn);
 9196              		.loc 1 817 6 view .LVU2422
 9197 0038 03D0     		beq	.L704
 9198              	.LVL651:
 820:src/xeq.c     **** 	}
ARM GAS  /tmp/cc7LeJ71.s 			page 302


 9199              		.loc 1 820 4 is_stmt 1 view .LVU2423
 9200 003a FFF7FEFF 		bl	packed_from_number
 9201              	.LVL652:
 822:src/xeq.c     **** 
 9202              		.loc 1 822 1 is_stmt 0 view .LVU2424
 9203 003e 0BB0     		add	sp, sp, #44
 9204              		.cfi_remember_state
 9205              		.cfi_def_cfa_offset 12
 9206              		@ sp needed
 9207 0040 30BD     		pop	{r4, r5, pc}
 9208              	.LVL653:
 9209              	.L704:
 9210              		.cfi_restore_state
 818:src/xeq.c     **** 		else
 9211              		.loc 1 818 4 is_stmt 1 view .LVU2425
 9212 0042 FFF7FEFF 		bl	packed128_from_number
 9213              	.LVL654:
 822:src/xeq.c     **** 
 9214              		.loc 1 822 1 is_stmt 0 view .LVU2426
 9215 0046 0BB0     		add	sp, sp, #44
 9216              		.cfi_def_cfa_offset 12
 9217              		@ sp needed
 9218 0048 30BD     		pop	{r4, r5, pc}
 9219              	.LVL655:
 9220              	.L706:
 822:src/xeq.c     **** 
 9221              		.loc 1 822 1 view .LVU2427
 9222 004a 00BF     		.align	2
 9223              	.L705:
 9224 004c 00000000 		.word	Ctx
 9225 0050 00000000 		.word	main_ram
 9226              		.cfi_endproc
 9227              	.LFE58:
 9229              		.section	.text.setX,"ax",%progbits
 9230              		.align	1
 9231              		.p2align 2,,3
 9232              		.global	setX
 9233              		.syntax unified
 9234              		.thumb
 9235              		.thumb_func
 9236              		.fpu fpv4-sp-d16
 9238              	setX:
 9239              	.LVL656:
 9240              	.LFB60:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9241              		.loc 1 828 31 is_stmt 1 view -0
 9242              		.cfi_startproc
 9243              		@ args = 0, pretend = 0, frame = 0
 9244              		@ frame_needed = 0, uses_anonymous_args = 0
 9245              		@ link register save eliminated.
 829:src/xeq.c     **** }
 9246              		.loc 1 829 2 view .LVU2429
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9247              		.loc 1 828 31 is_stmt 0 view .LVU2430
 9248 0000 0146     		mov	r1, r0
 829:src/xeq.c     **** }
 9249              		.loc 1 829 2 view .LVU2431
ARM GAS  /tmp/cc7LeJ71.s 			page 303


 9250 0002 6420     		movs	r0, #100
 9251              	.LVL657:
 829:src/xeq.c     **** }
 9252              		.loc 1 829 2 view .LVU2432
 9253 0004 FFF7FEBF 		b	setRegister
 9254              	.LVL658:
 829:src/xeq.c     **** }
 9255              		.loc 1 829 2 view .LVU2433
 9256              		.cfi_endproc
 9257              	.LFE60:
 9259              		.section	.text.rarg_round,"ax",%progbits
 9260              		.align	1
 9261              		.p2align 2,,3
 9262              		.global	rarg_round
 9263              		.syntax unified
 9264              		.thumb
 9265              		.thumb_func
 9266              		.fpu fpv4-sp-d16
 9268              	rarg_round:
 9269              	.LVL659:
 9270              	.LFB40:
 662:src/xeq.c     **** 	decNumber res, x;
 9271              		.loc 1 662 49 is_stmt 1 view -0
 9272              		.cfi_startproc
 9273              		@ args = 0, pretend = 0, frame = 80
 9274              		@ frame_needed = 0, uses_anonymous_args = 0
 663:src/xeq.c     **** 	const enum rounding rm = get_rounding_mode();
 9275              		.loc 1 663 2 view .LVU2435
 664:src/xeq.c     **** 
 9276              		.loc 1 664 2 view .LVU2436
 9277              	.LBB2070:
 9278              	.LBI2070:
 610:src/xeq.c     **** 	static const unsigned char modes[DEC_ROUND_MAX] = {
 9279              		.loc 1 610 22 view .LVU2437
 9280              	.LBB2071:
 611:src/xeq.c     **** 		DEC_ROUND_HALF_EVEN, DEC_ROUND_HALF_UP, DEC_ROUND_HALF_DOWN,
 9281              		.loc 1 611 2 view .LVU2438
 616:src/xeq.c     **** }
 9282              		.loc 1 616 2 view .LVU2439
 616:src/xeq.c     **** }
 9283              		.loc 1 616 31 is_stmt 0 view .LVU2440
 9284 0000 184B     		ldr	r3, .L716
 9285              	.LBE2071:
 9286              	.LBE2070:
 662:src/xeq.c     **** 	decNumber res, x;
 9287              		.loc 1 662 49 view .LVU2441
 9288 0002 70B5     		push	{r4, r5, r6, lr}
 9289              		.cfi_def_cfa_offset 16
 9290              		.cfi_offset 4, -16
 9291              		.cfi_offset 5, -12
 9292              		.cfi_offset 6, -8
 9293              		.cfi_offset 14, -4
 9294              	.LBB2074:
 9295              	.LBB2072:
 616:src/xeq.c     **** }
 9296              		.loc 1 616 31 view .LVU2442
 9297 0004 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc7LeJ71.s 			page 304


 9298              	.LVL660:
 616:src/xeq.c     **** }
 9299              		.loc 1 616 31 view .LVU2443
 9300              	.LBE2072:
 9301              	.LBE2074:
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9302              		.loc 1 666 2 is_stmt 1 view .LVU2444
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9303              		.loc 1 666 6 is_stmt 0 view .LVU2445
 9304 0006 93F8E857 		ldrb	r5, [r3, #2024]	@ zero_extendqisi2
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9305              		.loc 1 666 5 view .LVU2446
 9306 000a EA07     		lsls	r2, r5, #31
 662:src/xeq.c     **** 	decNumber res, x;
 9307              		.loc 1 662 49 view .LVU2447
 9308 000c 94B0     		sub	sp, sp, #80
 9309              		.cfi_def_cfa_offset 96
 666:src/xeq.c     **** 		report_err(ERR_BAD_MODE);
 9310              		.loc 1 666 5 view .LVU2448
 9311 000e 06D5     		bpl	.L709
 667:src/xeq.c     **** 		return;
 9312              		.loc 1 667 3 is_stmt 1 view .LVU2449
 9313              	.LVL661:
 9314              	.LBB2075:
 9315              	.LBI2075:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9316              		.loc 1 546 5 view .LVU2450
 9317              	.LBB2076:
 547:src/xeq.c     **** 		Error = e;
 9318              		.loc 1 547 2 view .LVU2451
 547:src/xeq.c     **** 		Error = e;
 9319              		.loc 1 547 12 is_stmt 0 view .LVU2452
 9320 0010 154B     		ldr	r3, .L716+4
 9321              	.LVL662:
 547:src/xeq.c     **** 		Error = e;
 9322              		.loc 1 547 5 view .LVU2453
 9323 0012 1A68     		ldr	r2, [r3]
 9324 0014 0AB9     		cbnz	r2, .L708
 9325              	.LVL663:
 9326              	.LBB2077:
 9327              	.LBI2077:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 9328              		.loc 1 546 5 is_stmt 1 view .LVU2454
 9329              	.LBB2078:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 9330              		.loc 1 548 3 view .LVU2455
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 9331              		.loc 1 548 9 is_stmt 0 view .LVU2456
 9332 0016 0D22     		movs	r2, #13
 9333 0018 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 9334              		.loc 1 549 3 is_stmt 1 view .LVU2457
 9335              	.LVL664:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 9336              		.loc 1 549 3 is_stmt 0 view .LVU2458
 9337              	.LBE2078:
 9338              	.LBE2077:
ARM GAS  /tmp/cc7LeJ71.s 			page 305


 9339              	.LBE2076:
 9340              	.LBE2075:
 668:src/xeq.c     **** 	}
 9341              		.loc 1 668 3 is_stmt 1 view .LVU2459
 9342              	.L708:
 678:src/xeq.c     **** 
 9343              		.loc 1 678 1 is_stmt 0 view .LVU2460
 9344 001a 14B0     		add	sp, sp, #80
 9345              		.cfi_remember_state
 9346              		.cfi_def_cfa_offset 16
 9347              		@ sp needed
 9348 001c 70BD     		pop	{r4, r5, r6, pc}
 9349              	.LVL665:
 9350              	.L709:
 9351              		.cfi_restore_state
 9352              	.LBB2079:
 9353              	.LBB2073:
 616:src/xeq.c     **** }
 9354              		.loc 1 616 37 view .LVU2461
 9355 001e 93F8EB37 		ldrb	r3, [r3, #2027]	@ zero_extendqisi2
 9356              	.LVL666:
 616:src/xeq.c     **** }
 9357              		.loc 1 616 9 view .LVU2462
 9358 0022 124A     		ldr	r2, .L716+8
 616:src/xeq.c     **** }
 9359              		.loc 1 616 37 view .LVU2463
 9360 0024 C3F30213 		ubfx	r3, r3, #4, #3
 9361 0028 0C46     		mov	r4, r1
 616:src/xeq.c     **** }
 9362              		.loc 1 616 9 view .LVU2464
 9363 002a D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 9364 002c 0193     		str	r3, [sp, #4]
 9365              	.LBE2073:
 9366              	.LBE2079:
 671:src/xeq.c     **** 	getX(&x);
 9367              		.loc 1 671 2 is_stmt 1 view .LVU2465
 9368              	.LBB2080:
 9369              	.LBI2080:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 9370              		.loc 1 792 6 view .LVU2466
 9371              	.LBB2081:
 793:src/xeq.c     **** }
 9372              		.loc 1 793 2 view .LVU2467
 9373 002e 0646     		mov	r6, r0
 9374 0030 6421     		movs	r1, #100
 9375              	.LVL667:
 793:src/xeq.c     **** }
 9376              		.loc 1 793 2 is_stmt 0 view .LVU2468
 9377 0032 6C20     		movs	r0, #108
 9378              	.LVL668:
 793:src/xeq.c     **** }
 9379              		.loc 1 793 2 view .LVU2469
 9380 0034 FFF7FEFF 		bl	copyreg_n
 9381              	.LVL669:
 793:src/xeq.c     **** }
 9382              		.loc 1 793 2 view .LVU2470
 9383              	.LBE2081:
ARM GAS  /tmp/cc7LeJ71.s 			page 306


 9384              	.LBE2080:
 672:src/xeq.c     **** 	if (op == RARG_ROUND)
 9385              		.loc 1 672 2 is_stmt 1 view .LVU2471
 9386              	.LBB2082:
 9387              	.LBI2082:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9388              		.loc 1 824 12 view .LVU2472
 9389              	.LBB2083:
 825:src/xeq.c     **** }
 9390              		.loc 1 825 2 view .LVU2473
 825:src/xeq.c     **** }
 9391              		.loc 1 825 9 is_stmt 0 view .LVU2474
 9392 0038 6421     		movs	r1, #100
 9393 003a 0BA8     		add	r0, sp, #44
 9394              	.LVL670:
 825:src/xeq.c     **** }
 9395              		.loc 1 825 9 view .LVU2475
 9396 003c FFF7FEFF 		bl	getRegister
 9397              	.LVL671:
 825:src/xeq.c     **** }
 9398              		.loc 1 825 9 view .LVU2476
 9399              	.LBE2083:
 9400              	.LBE2082:
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9401              		.loc 1 673 2 is_stmt 1 view .LVU2477
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9402              		.loc 1 673 5 is_stmt 0 view .LVU2478
 9403 0040 752C     		cmp	r4, #117
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9404              		.loc 1 674 3 view .LVU2479
 9405 0042 02AC     		add	r4, sp, #8
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9406              		.loc 1 673 5 view .LVU2480
 9407 0044 019B     		ldr	r3, [sp, #4]
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9408              		.loc 1 674 3 view .LVU2481
 9409 0046 3246     		mov	r2, r6
 9410 0048 0BA9     		add	r1, sp, #44
 9411 004a 2046     		mov	r0, r4
 673:src/xeq.c     **** 		decNumberRoundDigits(&res, &x, arg, rm);
 9412              		.loc 1 673 5 view .LVU2482
 9413 004c 07D0     		beq	.L715
 9414              	.LVL672:
 676:src/xeq.c     **** 	setX(&res);
 9415              		.loc 1 676 3 is_stmt 1 view .LVU2483
 9416 004e FFF7FEFF 		bl	decNumberRoundDecimals
 9417              	.LVL673:
 9418              	.L713:
 677:src/xeq.c     **** }
 9419              		.loc 1 677 2 view .LVU2484
 9420              	.LBB2084:
 9421              	.LBI2084:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9422              		.loc 1 828 6 view .LVU2485
 9423              	.LBB2085:
 829:src/xeq.c     **** }
 9424              		.loc 1 829 2 view .LVU2486
ARM GAS  /tmp/cc7LeJ71.s 			page 307


 9425 0052 2146     		mov	r1, r4
 9426 0054 6420     		movs	r0, #100
 9427 0056 FFF7FEFF 		bl	setRegister
 9428              	.LVL674:
 829:src/xeq.c     **** }
 9429              		.loc 1 829 2 is_stmt 0 view .LVU2487
 9430              	.LBE2085:
 9431              	.LBE2084:
 678:src/xeq.c     **** 
 9432              		.loc 1 678 1 view .LVU2488
 9433 005a 14B0     		add	sp, sp, #80
 9434              		.cfi_remember_state
 9435              		.cfi_def_cfa_offset 16
 9436              		@ sp needed
 9437 005c 70BD     		pop	{r4, r5, r6, pc}
 9438              	.LVL675:
 9439              	.L715:
 9440              		.cfi_restore_state
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9441              		.loc 1 674 3 is_stmt 1 view .LVU2489
 9442 005e FFF7FEFF 		bl	decNumberRoundDigits
 9443              	.LVL676:
 674:src/xeq.c     **** 	else /* if (op == RARG_ROUND_DEC) */
 9444              		.loc 1 674 3 is_stmt 0 view .LVU2490
 9445 0062 F6E7     		b	.L713
 9446              	.L717:
 9447              		.align	2
 9448              	.L716:
 9449 0064 00000000 		.word	main_ram
 9450 0068 00000000 		.word	Error
 9451 006c 00000000 		.word	.LANCHOR1
 9452              		.cfi_endproc
 9453              	.LFE40:
 9455              		.section	.text.setY,"ax",%progbits
 9456              		.align	1
 9457              		.p2align 2,,3
 9458              		.global	setY
 9459              		.syntax unified
 9460              		.thumb
 9461              		.thumb_func
 9462              		.fpu fpv4-sp-d16
 9464              	setY:
 9465              	.LVL677:
 9466              	.LFB62:
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9467              		.loc 1 836 31 is_stmt 1 view -0
 9468              		.cfi_startproc
 9469              		@ args = 0, pretend = 0, frame = 0
 9470              		@ frame_needed = 0, uses_anonymous_args = 0
 9471              		@ link register save eliminated.
 837:src/xeq.c     **** }
 9472              		.loc 1 837 2 view .LVU2492
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9473              		.loc 1 836 31 is_stmt 0 view .LVU2493
 9474 0000 0146     		mov	r1, r0
 837:src/xeq.c     **** }
 9475              		.loc 1 837 2 view .LVU2494
ARM GAS  /tmp/cc7LeJ71.s 			page 308


 9476 0002 6520     		movs	r0, #101
 9477              	.LVL678:
 837:src/xeq.c     **** }
 9478              		.loc 1 837 2 view .LVU2495
 9479 0004 FFF7FEBF 		b	setRegister
 9480              	.LVL679:
 837:src/xeq.c     **** }
 9481              		.loc 1 837 2 view .LVU2496
 9482              		.cfi_endproc
 9483              	.LFE62:
 9485              		.section	.text.setXY,"ax",%progbits
 9486              		.align	1
 9487              		.p2align 2,,3
 9488              		.global	setXY
 9489              		.syntax unified
 9490              		.thumb
 9491              		.thumb_func
 9492              		.fpu fpv4-sp-d16
 9494              	setXY:
 9495              	.LVL680:
 9496              	.LFB66:
 859:src/xeq.c     **** 	setX(x);
 9497              		.loc 1 859 52 is_stmt 1 view -0
 9498              		.cfi_startproc
 9499              		@ args = 0, pretend = 0, frame = 0
 9500              		@ frame_needed = 0, uses_anonymous_args = 0
 860:src/xeq.c     **** 	setY(y);
 9501              		.loc 1 860 2 view .LVU2498
 9502              	.LBB2086:
 9503              	.LBI2086:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9504              		.loc 1 828 6 view .LVU2499
 9505              	.LBB2087:
 829:src/xeq.c     **** }
 9506              		.loc 1 829 2 view .LVU2500
 9507              	.LBE2087:
 9508              	.LBE2086:
 859:src/xeq.c     **** 	setX(x);
 9509              		.loc 1 859 52 is_stmt 0 view .LVU2501
 9510 0000 10B5     		push	{r4, lr}
 9511              		.cfi_def_cfa_offset 8
 9512              		.cfi_offset 4, -8
 9513              		.cfi_offset 14, -4
 859:src/xeq.c     **** 	setX(x);
 9514              		.loc 1 859 52 view .LVU2502
 9515 0002 0C46     		mov	r4, r1
 9516              	.LBB2089:
 9517              	.LBB2088:
 829:src/xeq.c     **** }
 9518              		.loc 1 829 2 view .LVU2503
 9519 0004 0146     		mov	r1, r0
 9520              	.LVL681:
 829:src/xeq.c     **** }
 9521              		.loc 1 829 2 view .LVU2504
 9522 0006 6420     		movs	r0, #100
 9523              	.LVL682:
 829:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 309


 9524              		.loc 1 829 2 view .LVU2505
 9525 0008 FFF7FEFF 		bl	setRegister
 9526              	.LVL683:
 829:src/xeq.c     **** }
 9527              		.loc 1 829 2 view .LVU2506
 9528              	.LBE2088:
 9529              	.LBE2089:
 861:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 9530              		.loc 1 861 2 is_stmt 1 view .LVU2507
 9531              	.LBB2090:
 9532              	.LBI2090:
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9533              		.loc 1 836 6 view .LVU2508
 9534              	.LBB2091:
 837:src/xeq.c     **** }
 9535              		.loc 1 837 2 view .LVU2509
 9536 000c 2146     		mov	r1, r4
 9537 000e 6520     		movs	r0, #101
 9538 0010 FFF7FEFF 		bl	setRegister
 9539              	.LVL684:
 837:src/xeq.c     **** }
 9540              		.loc 1 837 2 is_stmt 0 view .LVU2510
 9541              	.LBE2091:
 9542              	.LBE2090:
 863:src/xeq.c     **** #endif
 9543              		.loc 1 863 2 is_stmt 1 view .LVU2511
 9544 0014 044B     		ldr	r3, .L721
 9545 0016 1A68     		ldr	r2, [r3]
 9546 0018 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 9547 001c 43F01003 		orr	r3, r3, #16
 9548 0020 82F8DE37 		strb	r3, [r2, #2014]
 865:src/xeq.c     **** 
 9549              		.loc 1 865 1 is_stmt 0 view .LVU2512
 9550 0024 10BD     		pop	{r4, pc}
 9551              	.LVL685:
 9552              	.L722:
 865:src/xeq.c     **** 
 9553              		.loc 1 865 1 view .LVU2513
 9554 0026 00BF     		.align	2
 9555              	.L721:
 9556 0028 00000000 		.word	main_ram
 9557              		.cfi_endproc
 9558              	.LFE66:
 9560              		.section	.text.convert_regK,"ax",%progbits
 9561              		.align	1
 9562              		.p2align 2,,3
 9563              		.global	convert_regK
 9564              		.syntax unified
 9565              		.thumb
 9566              		.thumb_func
 9567              		.fpu fpv4-sp-d16
 9569              	convert_regK:
 9570              	.LVL686:
 9571              	.LFB75:
 939:src/xeq.c     **** 	decNumber k;
 9572              		.loc 1 939 41 is_stmt 1 view -0
 9573              		.cfi_startproc
ARM GAS  /tmp/cc7LeJ71.s 			page 310


 9574              		@ args = 0, pretend = 0, frame = 40
 9575              		@ frame_needed = 0, uses_anonymous_args = 0
 940:src/xeq.c     **** 
 9576              		.loc 1 940 2 view .LVU2515
 942:src/xeq.c     **** 	if (i==j) return; // no mode change
 9577              		.loc 1 942 2 view .LVU2516
 9578              	.LBB2092:
 9579              	.LBI2092:
4099:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 9580              		.loc 1 4099 17 view .LVU2517
 9581              	.LBB2093:
4100:src/xeq.c     **** 		return TRIG_RAD;
 9582              		.loc 1 4100 2 view .LVU2518
 9583              	.LBE2093:
 9584              	.LBE2092:
 939:src/xeq.c     **** 	decNumber k;
 9585              		.loc 1 939 41 is_stmt 0 view .LVU2519
 9586 0000 70B5     		push	{r4, r5, r6, lr}
 9587              		.cfi_def_cfa_offset 16
 9588              		.cfi_offset 4, -16
 9589              		.cfi_offset 5, -12
 9590              		.cfi_offset 6, -8
 9591              		.cfi_offset 14, -4
 9592              	.LBB2097:
 9593              	.LBB2094:
4100:src/xeq.c     **** 		return TRIG_RAD;
 9594              		.loc 1 4100 6 view .LVU2520
 9595 0002 2A4B     		ldr	r3, .L744
 9596 0004 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4100:src/xeq.c     **** 		return TRIG_RAD;
 9597              		.loc 1 4100 5 view .LVU2521
 9598 0006 9B07     		lsls	r3, r3, #30
 9599              	.LBE2094:
 9600              	.LBE2097:
 939:src/xeq.c     **** 	decNumber k;
 9601              		.loc 1 939 41 view .LVU2522
 9602 0008 8AB0     		sub	sp, sp, #40
 9603              		.cfi_def_cfa_offset 56
 939:src/xeq.c     **** 	decNumber k;
 9604              		.loc 1 939 41 view .LVU2523
 9605 000a 0446     		mov	r4, r0
 9606              	.LBB2098:
 9607              	.LBB2095:
4100:src/xeq.c     **** 		return TRIG_RAD;
 9608              		.loc 1 4100 5 view .LVU2524
 9609 000c 27D4     		bmi	.L727
4100:src/xeq.c     **** 		return TRIG_RAD;
 9610              		.loc 1 4100 19 view .LVU2525
 9611 000e 284B     		ldr	r3, .L744+4
 9612 0010 93F90130 		ldrsb	r3, [r3, #1]
 9613 0014 002B     		cmp	r3, #0
 9614 0016 22DB     		blt	.L727
4103:src/xeq.c     **** }
 9615              		.loc 1 4103 2 is_stmt 1 view .LVU2526
4103:src/xeq.c     **** }
 9616              		.loc 1 4103 33 is_stmt 0 view .LVU2527
 9617 0018 264B     		ldr	r3, .L744+8
ARM GAS  /tmp/cc7LeJ71.s 			page 311


 9618 001a 1B68     		ldr	r3, [r3]
 9619 001c 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
 9620              	.LBE2095:
 9621              	.LBE2098:
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9622              		.loc 1 943 5 view .LVU2528
 9623 0020 B0EB931F 		cmp	r0, r3, lsr #6
 9624              	.LBB2099:
 9625              	.LBB2096:
4103:src/xeq.c     **** }
 9626              		.loc 1 4103 33 view .LVU2529
 9627 0024 4FEA9316 		lsr	r6, r3, #6
 9628              	.LVL687:
4103:src/xeq.c     **** }
 9629              		.loc 1 4103 33 view .LVU2530
 9630              	.LBE2096:
 9631              	.LBE2099:
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9632              		.loc 1 943 2 is_stmt 1 view .LVU2531
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9633              		.loc 1 943 5 is_stmt 0 view .LVU2532
 9634 0028 17D0     		beq	.L723
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9635              		.loc 1 944 2 is_stmt 1 view .LVU2533
 9636 002a 01AD     		add	r5, sp, #4
 9637 002c 2846     		mov	r0, r5
 9638              	.LVL688:
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9639              		.loc 1 944 2 is_stmt 0 view .LVU2534
 9640 002e 6F21     		movs	r1, #111
 9641 0030 FFF7FEFF 		bl	getRegister
 9642              	.LVL689:
 945:src/xeq.c     **** 		case TRIG_DEG:
 9643              		.loc 1 945 2 is_stmt 1 view .LVU2535
 9644 0034 012E     		cmp	r6, #1
 9645 0036 19D0     		beq	.L726
 9646 0038 022E     		cmp	r6, #2
 9647 003a 24D0     		beq	.L730
 9648 003c 26B9     		cbnz	r6, .L731
 947:src/xeq.c     **** 			break;
 9649              		.loc 1 947 4 view .LVU2536
 9650 003e 1E4A     		ldr	r2, .L744+12
 9651 0040 2946     		mov	r1, r5
 9652 0042 2846     		mov	r0, r5
 9653 0044 FFF7FEFF 		bl	dn_divide
 9654              	.LVL690:
 948:src/xeq.c     **** 		case TRIG_RAD:
 9655              		.loc 1 948 4 view .LVU2537
 9656              	.L731:
 954:src/xeq.c     **** 	}
 9657              		.loc 1 954 11 view .LVU2538
 956:src/xeq.c     **** 		case TRIG_DEG:
 9658              		.loc 1 956 2 view .LVU2539
 9659 0048 012C     		cmp	r4, #1
 9660 004a 16D0     		beq	.L732
 9661              	.L743:
 956:src/xeq.c     **** 		case TRIG_DEG:
ARM GAS  /tmp/cc7LeJ71.s 			page 312


 9662              		.loc 1 956 2 is_stmt 0 view .LVU2540
 9663 004c 022C     		cmp	r4, #2
 9664 004e 20D0     		beq	.L733
 9665 0050 2CB3     		cbz	r4, .L742
 9666              	.L734:
 965:src/xeq.c     **** 	}
 9667              		.loc 1 965 11 is_stmt 1 view .LVU2541
 967:src/xeq.c     **** }
 9668              		.loc 1 967 2 view .LVU2542
 9669 0052 2946     		mov	r1, r5
 9670 0054 6F20     		movs	r0, #111
 9671 0056 FFF7FEFF 		bl	setRegister
 9672              	.LVL691:
 9673              	.L723:
 968:src/xeq.c     **** 
 9674              		.loc 1 968 1 is_stmt 0 view .LVU2543
 9675 005a 0AB0     		add	sp, sp, #40
 9676              		.cfi_remember_state
 9677              		.cfi_def_cfa_offset 16
 9678              		@ sp needed
 9679 005c 70BD     		pop	{r4, r5, r6, pc}
 9680              	.LVL692:
 9681              	.L727:
 9682              		.cfi_restore_state
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9683              		.loc 1 943 2 is_stmt 1 view .LVU2544
 943:src/xeq.c     **** 	getRegister(&k, regK_idx);
 9684              		.loc 1 943 5 is_stmt 0 view .LVU2545
 9685 005e 012C     		cmp	r4, #1
 9686 0060 FBD0     		beq	.L723
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9687              		.loc 1 944 2 is_stmt 1 view .LVU2546
 9688 0062 01AD     		add	r5, sp, #4
 9689 0064 2846     		mov	r0, r5
 9690              	.LVL693:
 944:src/xeq.c     **** 	switch (j) { // convert angle to fraction of one complete turn
 9691              		.loc 1 944 2 is_stmt 0 view .LVU2547
 9692 0066 6F21     		movs	r1, #111
 9693 0068 FFF7FEFF 		bl	getRegister
 9694              	.LVL694:
 945:src/xeq.c     **** 		case TRIG_DEG:
 9695              		.loc 1 945 2 is_stmt 1 view .LVU2548
 9696              	.L726:
 950:src/xeq.c     **** 			break;
 9697              		.loc 1 950 4 view .LVU2549
 9698 006c 134A     		ldr	r2, .L744+16
 9699 006e 2946     		mov	r1, r5
 9700 0070 2846     		mov	r0, r5
 9701 0072 FFF7FEFF 		bl	dn_divide
 9702              	.LVL695:
 951:src/xeq.c     **** 		case TRIG_GRAD:
 9703              		.loc 1 951 4 view .LVU2550
 954:src/xeq.c     **** 	}
 9704              		.loc 1 954 11 view .LVU2551
 956:src/xeq.c     **** 		case TRIG_DEG:
 9705              		.loc 1 956 2 view .LVU2552
 9706 0076 012C     		cmp	r4, #1
ARM GAS  /tmp/cc7LeJ71.s 			page 313


 9707 0078 E8D1     		bne	.L743
 9708              	.L732:
 961:src/xeq.c     **** 			break;
 9709              		.loc 1 961 4 view .LVU2553
 9710 007a 104A     		ldr	r2, .L744+16
 9711 007c 2946     		mov	r1, r5
 9712 007e 2846     		mov	r0, r5
 9713 0080 FFF7FEFF 		bl	dn_multiply
 9714              	.LVL696:
 962:src/xeq.c     **** 		case TRIG_GRAD:
 9715              		.loc 1 962 4 view .LVU2554
 9716 0084 E5E7     		b	.L734
 9717              	.L730:
 953:src/xeq.c     **** 		default:;
 9718              		.loc 1 953 4 view .LVU2555
 9719 0086 0E4A     		ldr	r2, .L744+20
 9720 0088 2946     		mov	r1, r5
 9721 008a 2846     		mov	r0, r5
 9722 008c FFF7FEFF 		bl	dn_divide
 9723              	.LVL697:
 9724 0090 DAE7     		b	.L731
 9725              	.L733:
 964:src/xeq.c     **** 		default:;
 9726              		.loc 1 964 4 view .LVU2556
 9727 0092 0B4A     		ldr	r2, .L744+20
 9728 0094 2946     		mov	r1, r5
 9729 0096 2846     		mov	r0, r5
 9730 0098 FFF7FEFF 		bl	dn_multiply
 9731              	.LVL698:
 9732 009c D9E7     		b	.L734
 9733              	.L742:
 958:src/xeq.c     **** 			break;
 9734              		.loc 1 958 4 view .LVU2557
 9735 009e 064A     		ldr	r2, .L744+12
 9736 00a0 2946     		mov	r1, r5
 9737 00a2 2846     		mov	r0, r5
 9738 00a4 FFF7FEFF 		bl	dn_multiply
 9739              	.LVL699:
 959:src/xeq.c     **** 		case TRIG_RAD:
 9740              		.loc 1 959 4 view .LVU2558
 9741 00a8 D3E7     		b	.L734
 9742              	.L745:
 9743 00aa 00BF     		.align	2
 9744              	.L744:
 9745 00ac 00000000 		.word	StateWhileOn
 9746 00b0 00000000 		.word	XromParams
 9747 00b4 00000000 		.word	main_ram
 9748 00b8 00000000 		.word	const_360
 9749 00bc 00000000 		.word	const_2PI
 9750 00c0 00000000 		.word	const_400
 9751              		.cfi_endproc
 9752              	.LFE75:
 9754              		.section	.text.cpx_nop,"ax",%progbits
 9755              		.align	1
 9756              		.p2align 2,,3
 9757              		.global	cpx_nop
 9758              		.syntax unified
ARM GAS  /tmp/cc7LeJ71.s 			page 314


 9759              		.thumb
 9760              		.thumb_func
 9761              		.fpu fpv4-sp-d16
 9763              	cpx_nop:
 9764              	.LVL700:
 9765              	.LFB78:
1011:src/xeq.c     ****   reset_shift();
 9766              		.loc 1 1011 29 view -0
 9767              		.cfi_startproc
 9768              		@ args = 0, pretend = 0, frame = 40
 9769              		@ frame_needed = 0, uses_anonymous_args = 0
1012:src/xeq.c     **** 	switch (op) {
 9770              		.loc 1 1012 3 view .LVU2560
1011:src/xeq.c     ****   reset_shift();
 9771              		.loc 1 1011 29 is_stmt 0 view .LVU2561
 9772 0000 30B5     		push	{r4, r5, lr}
 9773              		.cfi_def_cfa_offset 12
 9774              		.cfi_offset 4, -12
 9775              		.cfi_offset 5, -8
 9776              		.cfi_offset 14, -4
 9777 0002 0446     		mov	r4, r0
 9778 0004 8BB0     		sub	sp, sp, #44
 9779              		.cfi_def_cfa_offset 56
1012:src/xeq.c     **** 	switch (op) {
 9780              		.loc 1 1012 3 view .LVU2562
 9781 0006 FFF7FEFF 		bl	reset_shift
 9782              	.LVL701:
1013:src/xeq.c     **** 	case OP_CYES: // set flag to allow complex mode to be entered - can be called at any time
 9783              		.loc 1 1013 2 is_stmt 1 view .LVU2563
 9784 000a A4F1CA00 		sub	r0, r4, #202
 9785 000e 0B28     		cmp	r0, #11
 9786 0010 13D8     		bhi	.L768
 9787 0012 DFE800F0 		tbb	[pc, r0]
 9788              	.L749:
 9789 0016 22       		.byte	(.L758-.L749)/2
 9790 0017 3F       		.byte	(.L764-.L749)/2
 9791 0018 06       		.byte	(.L756-.L749)/2
 9792 0019 5F       		.byte	(.L755-.L749)/2
 9793 001a 6E       		.byte	(.L754-.L749)/2
 9794 001b 76       		.byte	(.L753-.L749)/2
 9795 001c 12       		.byte	(.L768-.L749)/2
 9796 001d 12       		.byte	(.L768-.L749)/2
 9797 001e 7D       		.byte	(.L752-.L749)/2
 9798 001f 86       		.byte	(.L751-.L749)/2
 9799 0020 8F       		.byte	(.L750-.L749)/2
 9800 0021 A6       		.byte	(.L748-.L749)/2
 9801              		.p2align 1
 9802              	.L756:
 9803              	.LBB2100:
1053:src/xeq.c     **** 		getY(&y);
 9804              		.loc 1 1053 3 view .LVU2564
1054:src/xeq.c     **** 		dn_minus(&y, &y);
 9805              		.loc 1 1054 3 view .LVU2565
 9806              	.LVL702:
 9807              	.LBB2101:
 9808              	.LBI2101:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
ARM GAS  /tmp/cc7LeJ71.s 			page 315


 9809              		.loc 1 832 6 view .LVU2566
 9810              	.LBB2102:
 833:src/xeq.c     **** }
 9811              		.loc 1 833 2 view .LVU2567
 9812 0022 6521     		movs	r1, #101
 9813 0024 01A8     		add	r0, sp, #4
 9814              	.LVL703:
 833:src/xeq.c     **** }
 9815              		.loc 1 833 2 is_stmt 0 view .LVU2568
 9816 0026 FFF7FEFF 		bl	getRegister
 9817              	.LVL704:
 833:src/xeq.c     **** }
 9818              		.loc 1 833 2 view .LVU2569
 9819              	.LBE2102:
 9820              	.LBE2101:
1055:src/xeq.c     **** 		setY(&y);
 9821              		.loc 1 1055 3 is_stmt 1 view .LVU2570
 9822 002a 01A9     		add	r1, sp, #4
 9823 002c 0846     		mov	r0, r1
 9824 002e FFF7FEFF 		bl	dn_minus
 9825              	.LVL705:
1056:src/xeq.c     **** 		}
 9826              		.loc 1 1056 3 view .LVU2571
 9827              	.LBB2103:
 9828              	.LBI2103:
 836:src/xeq.c     **** 	setRegister(regY_idx, y);
 9829              		.loc 1 836 6 view .LVU2572
 9830              	.LBB2104:
 837:src/xeq.c     **** }
 9831              		.loc 1 837 2 view .LVU2573
 9832 0032 01A9     		add	r1, sp, #4
 9833              	.LVL706:
 837:src/xeq.c     **** }
 9834              		.loc 1 837 2 is_stmt 0 view .LVU2574
 9835 0034 6520     		movs	r0, #101
 9836 0036 FFF7FEFF 		bl	setRegister
 9837              	.LVL707:
 9838              	.L768:
 837:src/xeq.c     **** }
 9839              		.loc 1 837 2 view .LVU2575
 9840              	.LBE2104:
 9841              	.LBE2103:
 9842              	.LBE2100:
1058:src/xeq.c     **** 	case OP_C_MRE: // change sign of real part
 9843              		.loc 1 1058 3 is_stmt 1 view .LVU2576
 9844 003a 584B     		ldr	r3, .L769
 9845 003c 1A68     		ldr	r2, [r3]
 9846              	.L759:
1079:src/xeq.c     **** 	}
 9847              		.loc 1 1079 10 view .LVU2577
1081:src/xeq.c     **** 	CLEAR_POLAR_READY;
 9848              		.loc 1 1081 2 view .LVU2578
 9849              	.LBB2105:
 9850              	.LBI2105:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 9851              		.loc 1 539 13 view .LVU2579
 9852              	.LBB2106:
ARM GAS  /tmp/cc7LeJ71.s 			page 316


 540:src/xeq.c     **** }
 9853              		.loc 1 540 2 view .LVU2580
 540:src/xeq.c     **** }
 9854              		.loc 1 540 20 is_stmt 0 view .LVU2581
 9855 003e 584B     		ldr	r3, .L769+4
 9856 0040 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 9857 0042 0120     		movs	r0, #1
 9858 0044 60F38711 		bfi	r1, r0, #6, #2
 9859 0048 1975     		strb	r1, [r3, #20]
 9860              	.LBE2106:
 9861              	.LBE2105:
1082:src/xeq.c     **** }
 9862              		.loc 1 1082 2 is_stmt 1 view .LVU2582
 9863 004a 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 9864 004e 43F01003 		orr	r3, r3, #16
 9865 0052 82F8DE37 		strb	r3, [r2, #2014]
 9866              	.L746:
1083:src/xeq.c     **** #endif
 9867              		.loc 1 1083 1 is_stmt 0 view .LVU2583
 9868 0056 0BB0     		add	sp, sp, #44
 9869              		.cfi_remember_state
 9870              		.cfi_def_cfa_offset 12
 9871              		@ sp needed
 9872 0058 30BD     		pop	{r4, r5, pc}
 9873              	.L758:
 9874              		.cfi_restore_state
1021:src/xeq.c     **** 			INIT_8;
 9875              		.loc 1 1021 3 is_stmt 1 view .LVU2584
1021:src/xeq.c     **** 			INIT_8;
 9876              		.loc 1 1021 7 is_stmt 0 view .LVU2585
 9877 005a 504C     		ldr	r4, .L769
 9878 005c 2368     		ldr	r3, [r4]
1021:src/xeq.c     **** 			INIT_8;
 9879              		.loc 1 1021 6 view .LVU2586
 9880 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 9881 0062 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
1027:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9882              		.loc 1 1027 3 view .LVU2587
 9883 0066 93F8E417 		ldrb	r1, [r3, #2020]	@ zero_extendqisi2
1021:src/xeq.c     **** 			INIT_8;
 9884              		.loc 1 1021 6 view .LVU2588
 9885 006a C2F3C005 		ubfx	r5, r2, #3, #1
1027:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9886              		.loc 1 1027 3 view .LVU2589
 9887 006e 41F00401 		orr	r1, r1, #4
1028:src/xeq.c     **** #ifdef DM42
 9888              		.loc 1 1028 22 view .LVU2590
 9889 0072 42F00802 		orr	r2, r2, #8
 9890 0076 65F38610 		bfi	r0, r5, #6, #1
 9891 007a 83F8EA27 		strb	r2, [r3, #2026]
 9892 007e 83F8DD07 		strb	r0, [r3, #2013]
1027:src/xeq.c     **** 		UState.stack_depth = 1; // set stack size to 8
 9893              		.loc 1 1027 3 is_stmt 1 view .LVU2591
 9894 0082 83F8E417 		strb	r1, [r3, #2020]
1028:src/xeq.c     **** #ifdef DM42
 9895              		.loc 1 1028 3 view .LVU2592
1030:src/xeq.c     **** 		display_current_menu();
ARM GAS  /tmp/cc7LeJ71.s 			page 317


 9896              		.loc 1 1030 3 view .LVU2593
 9897 0086 1120     		movs	r0, #17
 9898 0088 FFF7FEFF 		bl	set_menu
 9899              	.LVL708:
1031:src/xeq.c     **** #endif
 9900              		.loc 1 1031 3 view .LVU2594
 9901 008c FFF7FEFF 		bl	display_current_menu
 9902              	.LVL709:
1033:src/xeq.c     **** 	case OP_CNO: // reset flag so that complex mode cannot be entered
 9903              		.loc 1 1033 3 view .LVU2595
 9904 0090 2268     		ldr	r2, [r4]
 9905 0092 D4E7     		b	.L759
 9906              	.L764:
 9907 0094 414C     		ldr	r4, .L769
 9908              	.L757:
1042:src/xeq.c     **** 		UNLOCK_C;
 9909              		.loc 1 1042 3 view .LVU2596
 9910 0096 0120     		movs	r0, #1
 9911 0098 FFF7FEFF 		bl	finish_cpx_entry
 9912              	.LVL710:
1043:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9913              		.loc 1 1043 3 view .LVU2597
 9914 009c 2368     		ldr	r3, [r4]
1045:src/xeq.c     **** #ifdef DM42
 9915              		.loc 1 1045 21 is_stmt 0 view .LVU2598
 9916 009e 4049     		ldr	r1, .L769+4
1044:src/xeq.c     **** 		State2.wascomplex = 0;
 9917              		.loc 1 1044 24 view .LVU2599
 9918 00a0 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
1044:src/xeq.c     **** 		State2.wascomplex = 0;
 9919              		.loc 1 1044 22 view .LVU2600
 9920 00a4 93F8EA47 		ldrb	r4, [r3, #2026]	@ zero_extendqisi2
1043:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9921              		.loc 1 1043 3 view .LVU2601
 9922 00a8 93F8E407 		ldrb	r0, [r3, #2020]	@ zero_extendqisi2
1044:src/xeq.c     **** 		State2.wascomplex = 0;
 9923              		.loc 1 1044 24 view .LVU2602
 9924 00ac C2F38012 		ubfx	r2, r2, #6, #1
1044:src/xeq.c     **** 		State2.wascomplex = 0;
 9925              		.loc 1 1044 22 view .LVU2603
 9926 00b0 62F3C304 		bfi	r4, r2, #3, #1
 9927 00b4 83F8EA47 		strb	r4, [r3, #2026]
1045:src/xeq.c     **** #ifdef DM42
 9928              		.loc 1 1045 21 view .LVU2604
 9929 00b8 0A7D     		ldrb	r2, [r1, #20]	@ zero_extendqisi2
1043:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9930              		.loc 1 1043 3 view .LVU2605
 9931 00ba 6FF38200 		bfc	r0, #2, #1
1045:src/xeq.c     **** #ifdef DM42
 9932              		.loc 1 1045 21 view .LVU2606
 9933 00be 6FF38712 		bfc	r2, #6, #2
1043:src/xeq.c     **** 		UState.stack_depth = TRUE_8; // restore prior stack size
 9934              		.loc 1 1043 3 view .LVU2607
 9935 00c2 83F8E407 		strb	r0, [r3, #2020]
1044:src/xeq.c     **** 		State2.wascomplex = 0;
 9936              		.loc 1 1044 3 is_stmt 1 view .LVU2608
1045:src/xeq.c     **** #ifdef DM42
ARM GAS  /tmp/cc7LeJ71.s 			page 318


 9937              		.loc 1 1045 3 view .LVU2609
1045:src/xeq.c     **** #ifdef DM42
 9938              		.loc 1 1045 21 is_stmt 0 view .LVU2610
 9939 00c6 0A75     		strb	r2, [r1, #20]
1047:src/xeq.c     **** 		display_current_menu();
 9940              		.loc 1 1047 3 is_stmt 1 view .LVU2611
 9941 00c8 FFF7FEFF 		bl	set_default_menu
 9942              	.LVL711:
1048:src/xeq.c     **** #endif
 9943              		.loc 1 1048 3 view .LVU2612
 9944 00cc FFF7FEFF 		bl	display_current_menu
 9945              	.LVL712:
1050:src/xeq.c     **** 	case OP_C_MIM: // change sign of imaginary part
 9946              		.loc 1 1050 3 view .LVU2613
1083:src/xeq.c     **** #endif
 9947              		.loc 1 1083 1 is_stmt 0 view .LVU2614
 9948 00d0 0BB0     		add	sp, sp, #44
 9949              		.cfi_remember_state
 9950              		.cfi_def_cfa_offset 12
 9951              		@ sp needed
 9952 00d2 30BD     		pop	{r4, r5, pc}
 9953              	.L755:
 9954              		.cfi_restore_state
 9955              	.LBB2107:
1061:src/xeq.c     **** 		getX(&x);
 9956              		.loc 1 1061 3 is_stmt 1 view .LVU2615
1062:src/xeq.c     **** 		dn_minus(&x, &x);
 9957              		.loc 1 1062 3 view .LVU2616
 9958              	.LVL713:
 9959              	.LBB2108:
 9960              	.LBI2108:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 9961              		.loc 1 824 12 view .LVU2617
 9962              	.LBB2109:
 825:src/xeq.c     **** }
 9963              		.loc 1 825 2 view .LVU2618
 825:src/xeq.c     **** }
 9964              		.loc 1 825 9 is_stmt 0 view .LVU2619
 9965 00d4 6421     		movs	r1, #100
 9966 00d6 01A8     		add	r0, sp, #4
 9967              	.LVL714:
 825:src/xeq.c     **** }
 9968              		.loc 1 825 9 view .LVU2620
 9969 00d8 FFF7FEFF 		bl	getRegister
 9970              	.LVL715:
 825:src/xeq.c     **** }
 9971              		.loc 1 825 9 view .LVU2621
 9972              	.LBE2109:
 9973              	.LBE2108:
1063:src/xeq.c     **** 		setX(&x);
 9974              		.loc 1 1063 3 is_stmt 1 view .LVU2622
 9975 00dc 01A9     		add	r1, sp, #4
 9976 00de 0846     		mov	r0, r1
 9977 00e0 FFF7FEFF 		bl	dn_minus
 9978              	.LVL716:
1064:src/xeq.c     **** 		}
 9979              		.loc 1 1064 3 view .LVU2623
ARM GAS  /tmp/cc7LeJ71.s 			page 319


 9980              	.LBB2110:
 9981              	.LBI2110:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 9982              		.loc 1 828 6 view .LVU2624
 9983              	.LBB2111:
 829:src/xeq.c     **** }
 9984              		.loc 1 829 2 view .LVU2625
 9985 00e4 01A9     		add	r1, sp, #4
 9986              	.LVL717:
 829:src/xeq.c     **** }
 9987              		.loc 1 829 2 is_stmt 0 view .LVU2626
 9988 00e6 6420     		movs	r0, #100
 9989 00e8 FFF7FEFF 		bl	setRegister
 9990              	.LVL718:
 829:src/xeq.c     **** }
 9991              		.loc 1 829 2 view .LVU2627
 9992              	.LBE2111:
 9993              	.LBE2110:
 9994              	.LBE2107:
1066:src/xeq.c     **** 	case OP_C_IM: // zero real part
 9995              		.loc 1 1066 3 is_stmt 1 view .LVU2628
 9996 00ec 2B4B     		ldr	r3, .L769
 9997 00ee 1A68     		ldr	r2, [r3]
 9998 00f0 A5E7     		b	.L759
 9999              	.L754:
1071:src/xeq.c     **** 		break;
 10000              		.loc 1 1071 3 view .LVU2629
 10001              	.LBB2112:
 10002              	.LBI2112:
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 10003              		.loc 1 1554 6 view .LVU2630
 10004              	.LBB2113:
1555:src/xeq.c     **** }
 10005              		.loc 1 1555 2 view .LVU2631
 10006 00f2 6520     		movs	r0, #101
 10007 00f4 FFF7FEFF 		bl	get_reg_n
 10008              	.LVL719:
 10009 00f8 FFF7FEFF 		bl	set_zero
 10010              	.LVL720:
 10011 00fc 274B     		ldr	r3, .L769
 10012 00fe 1A68     		ldr	r2, [r3]
1556:src/xeq.c     **** 
 10013              		.loc 1 1556 1 is_stmt 0 view .LVU2632
 10014 0100 9DE7     		b	.L759
 10015              	.L753:
 10016              	.LBE2113:
 10017              	.LBE2112:
1068:src/xeq.c     **** 		break;
 10018              		.loc 1 1068 3 is_stmt 1 view .LVU2633
 10019              	.LBB2114:
 10020              	.LBI2114:
1550:src/xeq.c     **** 	set_zero(StackBase);
 10021              		.loc 1 1550 6 view .LVU2634
 10022              	.LBB2115:
1551:src/xeq.c     **** }
 10023              		.loc 1 1551 2 view .LVU2635
 10024 0102 284B     		ldr	r3, .L769+8
ARM GAS  /tmp/cc7LeJ71.s 			page 320


 10025 0104 1868     		ldr	r0, [r3]
 10026 0106 FFF7FEFF 		bl	set_zero
 10027              	.LVL721:
 10028 010a 244B     		ldr	r3, .L769
 10029 010c 1A68     		ldr	r2, [r3]
1552:src/xeq.c     **** 
 10030              		.loc 1 1552 1 is_stmt 0 view .LVU2636
 10031 010e 96E7     		b	.L759
 10032              	.L752:
 10033              	.LBE2115:
 10034              	.LBE2114:
1074:src/xeq.c     **** 		break;
 10035              		.loc 1 1074 3 is_stmt 1 view .LVU2637
 10036 0110 224B     		ldr	r3, .L769
 10037 0112 1A68     		ldr	r2, [r3]
 10038 0114 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 10039 0118 6FF34103 		bfc	r3, #1, #1
 10040 011c 82F8DE37 		strb	r3, [r2, #2014]
1075:src/xeq.c     **** 	case OP_CPXJ: // use j to display complex numbers
 10041              		.loc 1 1075 3 view .LVU2638
 10042 0120 8DE7     		b	.L759
 10043              	.L751:
1077:src/xeq.c     **** 		break;
 10044              		.loc 1 1077 3 view .LVU2639
 10045 0122 1E4B     		ldr	r3, .L769
 10046 0124 1A68     		ldr	r2, [r3]
 10047 0126 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 10048 012a 43F00203 		orr	r3, r3, #2
 10049 012e 82F8DE37 		strb	r3, [r2, #2014]
1078:src/xeq.c     **** 	default:;
 10050              		.loc 1 1078 3 view .LVU2640
 10051 0132 84E7     		b	.L759
 10052              	.L750:
1015:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10053              		.loc 1 1015 10 view .LVU2641
 10054 0134 194B     		ldr	r3, .L769
 10055 0136 1B68     		ldr	r3, [r3]
1016:src/xeq.c     **** 		CLEAR_IMAG;
 10056              		.loc 1 1016 3 view .LVU2642
1015:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10057              		.loc 1 1015 10 is_stmt 0 view .LVU2643
 10058 0138 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
1016:src/xeq.c     **** 		CLEAR_IMAG;
 10059              		.loc 1 1016 3 view .LVU2644
 10060 013c 93F8E407 		ldrb	r0, [r3, #2020]	@ zero_extendqisi2
1017:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
 10061              		.loc 1 1017 3 view .LVU2645
 10062 0140 93F8EB17 		ldrb	r1, [r3, #2027]	@ zero_extendqisi2
1015:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10063              		.loc 1 1015 10 view .LVU2646
 10064 0144 22F00C02 		bic	r2, r2, #12
1016:src/xeq.c     **** 		CLEAR_IMAG;
 10065              		.loc 1 1016 3 view .LVU2647
 10066 0148 6FF3C300 		bfc	r0, #3, #1
1017:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
 10067              		.loc 1 1017 3 view .LVU2648
 10068 014c 6FF3C301 		bfc	r1, #3, #1
ARM GAS  /tmp/cc7LeJ71.s 			page 321


1015:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10069              		.loc 1 1015 10 view .LVU2649
 10070 0150 42F00402 		orr	r2, r2, #4
1016:src/xeq.c     **** 		CLEAR_IMAG;
 10071              		.loc 1 1016 3 view .LVU2650
 10072 0154 83F8E407 		strb	r0, [r3, #2020]
1017:src/xeq.c     **** 		SET_RECTANGULAR_DISPLAY; 
 10073              		.loc 1 1017 3 is_stmt 1 view .LVU2651
 10074 0158 83F8EB17 		strb	r1, [r3, #2027]
1018:src/xeq.c     **** 		return;
 10075              		.loc 1 1018 3 view .LVU2652
1015:src/xeq.c     **** 		CLEAR_REAL; // tidy a few flags when mode enabled
 10076              		.loc 1 1015 10 is_stmt 0 view .LVU2653
 10077 015c 83F8DE27 		strb	r2, [r3, #2014]
1019:src/xeq.c     **** 	case OP_C_ON: // start complex mode - only called if CPX_ENABLED and C_LOCK_OFF
 10078              		.loc 1 1019 3 is_stmt 1 view .LVU2654
 10079 0160 79E7     		b	.L746
 10080              	.L748:
1035:src/xeq.c     **** 			SET_CPX_NO;
 10081              		.loc 1 1035 3 view .LVU2655
1035:src/xeq.c     **** 			SET_CPX_NO;
 10082              		.loc 1 1035 8 is_stmt 0 view .LVU2656
 10083 0162 0E4C     		ldr	r4, .L769
 10084 0164 2368     		ldr	r3, [r4]
 10085 0166 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
1035:src/xeq.c     **** 			SET_CPX_NO;
 10086              		.loc 1 1035 6 view .LVU2657
 10087 016a 5007     		lsls	r0, r2, #29
 10088 016c 08D5     		bpl	.L761
1035:src/xeq.c     **** 			SET_CPX_NO;
 10089              		.loc 1 1035 8 discriminator 1 view .LVU2658
 10090 016e 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
1035:src/xeq.c     **** 			SET_CPX_NO;
 10091              		.loc 1 1035 7 discriminator 1 view .LVU2659
 10092 0172 5107     		lsls	r1, r2, #29
 10093 0174 04D5     		bpl	.L761
1040:src/xeq.c     **** 	case OP_C_OFF: // exit complex mode - only called if CPX_ENABLED and C_LOCK_ON
 10094              		.loc 1 1040 3 is_stmt 1 view .LVU2660
 10095 0176 6FF38202 		bfc	r2, #2, #1
 10096 017a 83F8DE27 		strb	r2, [r3, #2014]
 10097 017e 8AE7     		b	.L757
 10098              	.L761:
1036:src/xeq.c     **** 			UNLOCK_C; //just in case
 10099              		.loc 1 1036 4 view .LVU2661
 10100 0180 93F8DE17 		ldrb	r1, [r3, #2014]	@ zero_extendqisi2
1037:src/xeq.c     **** 			return;
 10101              		.loc 1 1037 4 is_stmt 0 view .LVU2662
 10102 0184 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
1036:src/xeq.c     **** 			UNLOCK_C; //just in case
 10103              		.loc 1 1036 4 view .LVU2663
 10104 0188 6FF38201 		bfc	r1, #2, #1
1037:src/xeq.c     **** 			return;
 10105              		.loc 1 1037 4 view .LVU2664
 10106 018c 6FF38202 		bfc	r2, #2, #1
1036:src/xeq.c     **** 			UNLOCK_C; //just in case
 10107              		.loc 1 1036 4 view .LVU2665
 10108 0190 83F8DE17 		strb	r1, [r3, #2014]
ARM GAS  /tmp/cc7LeJ71.s 			page 322


1037:src/xeq.c     **** 			return;
 10109              		.loc 1 1037 4 is_stmt 1 view .LVU2666
 10110 0194 83F8E427 		strb	r2, [r3, #2020]
1038:src/xeq.c     **** 		}
 10111              		.loc 1 1038 4 view .LVU2667
 10112 0198 5DE7     		b	.L746
 10113              	.L770:
 10114 019a 00BF     		.align	2
 10115              	.L769:
 10116 019c 00000000 		.word	main_ram
 10117 01a0 00000000 		.word	StateWhileOn
 10118 01a4 00000000 		.word	StackBase
 10119              		.cfi_endproc
 10120              	.LFE78:
 10122              		.section	.text.get_reg_n_int,"ax",%progbits
 10123              		.align	1
 10124              		.p2align 2,,3
 10125              		.global	get_reg_n_int
 10126              		.syntax unified
 10127              		.thumb
 10128              		.thumb_func
 10129              		.fpu fpv4-sp-d16
 10131              	get_reg_n_int:
 10132              	.LVL722:
 10133              	.LFB94:
1416:src/xeq.c     **** 	long long int ll;
 10134              		.loc 1 1416 40 view -0
 10135              		.cfi_startproc
 10136              		@ args = 0, pretend = 0, frame = 8
 10137              		@ frame_needed = 0, uses_anonymous_args = 0
1417:src/xeq.c     **** 	xcopy(&ll, get_reg_n(index), sizeof(ll));
 10138              		.loc 1 1417 2 view .LVU2669
1418:src/xeq.c     **** 	return ll;
 10139              		.loc 1 1418 2 view .LVU2670
1416:src/xeq.c     **** 	long long int ll;
 10140              		.loc 1 1416 40 is_stmt 0 view .LVU2671
 10141 0000 00B5     		push	{lr}
 10142              		.cfi_def_cfa_offset 4
 10143              		.cfi_offset 14, -4
 10144 0002 83B0     		sub	sp, sp, #12
 10145              		.cfi_def_cfa_offset 16
1418:src/xeq.c     **** 	return ll;
 10146              		.loc 1 1418 13 view .LVU2672
 10147 0004 FFF7FEFF 		bl	get_reg_n
 10148              	.LVL723:
1418:src/xeq.c     **** 	return ll;
 10149              		.loc 1 1418 2 view .LVU2673
 10150 0008 0822     		movs	r2, #8
1418:src/xeq.c     **** 	return ll;
 10151              		.loc 1 1418 13 view .LVU2674
 10152 000a 0146     		mov	r1, r0
1418:src/xeq.c     **** 	return ll;
 10153              		.loc 1 1418 2 view .LVU2675
 10154 000c 6846     		mov	r0, sp
 10155 000e FFF7FEFF 		bl	xcopy
 10156              	.LVL724:
1419:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 323


 10157              		.loc 1 1419 2 is_stmt 1 view .LVU2676
1420:src/xeq.c     **** 
 10158              		.loc 1 1420 1 is_stmt 0 view .LVU2677
 10159 0012 DDE90001 		ldrd	r0, [sp]
 10160 0016 03B0     		add	sp, sp, #12
 10161              		.cfi_def_cfa_offset 4
 10162              		@ sp needed
 10163 0018 5DF804FB 		ldr	pc, [sp], #4
 10164              		.cfi_endproc
 10165              	.LFE94:
 10167              		.section	.text.storcl_intop,"ax",%progbits
 10168              		.align	1
 10169              		.p2align 2,,3
 10170              		.syntax unified
 10171              		.thumb
 10172              		.thumb_func
 10173              		.fpu fpv4-sp-d16
 10175              	storcl_intop:
 10176              	.LVL725:
 10177              	.LFB116:
1685:src/xeq.c     **** 	long long int x, y;
 10178              		.loc 1 1685 83 is_stmt 1 view -0
 10179              		.cfi_startproc
 10180              		@ args = 0, pretend = 0, frame = 0
 10181              		@ frame_needed = 0, uses_anonymous_args = 0
1686:src/xeq.c     **** 
 10182              		.loc 1 1686 2 view .LVU2679
1688:src/xeq.c     **** 	y = get_reg_n_int(index);
 10183              		.loc 1 1688 2 view .LVU2680
 10184              	.LBB2116:
 10185              	.LBI2116:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10186              		.loc 1 1442 15 view .LVU2681
 10187              	.LBB2117:
1443:src/xeq.c     **** }
 10188              		.loc 1 1443 2 view .LVU2682
 10189              	.LBE2117:
 10190              	.LBE2116:
1685:src/xeq.c     **** 	long long int x, y;
 10191              		.loc 1 1685 83 is_stmt 0 view .LVU2683
 10192 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 10193              		.cfi_def_cfa_offset 32
 10194              		.cfi_offset 3, -32
 10195              		.cfi_offset 4, -28
 10196              		.cfi_offset 5, -24
 10197              		.cfi_offset 6, -20
 10198              		.cfi_offset 7, -16
 10199              		.cfi_offset 8, -12
 10200              		.cfi_offset 9, -8
 10201              		.cfi_offset 14, -4
1685:src/xeq.c     **** 	long long int x, y;
 10202              		.loc 1 1685 83 view .LVU2684
 10203 0004 0446     		mov	r4, r0
 10204              	.LBB2121:
 10205              	.LBB2118:
1443:src/xeq.c     **** }
 10206              		.loc 1 1443 9 view .LVU2685
ARM GAS  /tmp/cc7LeJ71.s 			page 324


 10207 0006 6420     		movs	r0, #100
 10208              	.LVL726:
1443:src/xeq.c     **** }
 10209              		.loc 1 1443 9 view .LVU2686
 10210              	.LBE2118:
 10211              	.LBE2121:
1685:src/xeq.c     **** 	long long int x, y;
 10212              		.loc 1 1685 83 view .LVU2687
 10213 0008 8946     		mov	r9, r1
 10214 000a 9846     		mov	r8, r3
 10215 000c 1646     		mov	r6, r2
 10216              	.LBB2122:
 10217              	.LBB2119:
1443:src/xeq.c     **** }
 10218              		.loc 1 1443 9 view .LVU2688
 10219 000e FFF7FEFF 		bl	get_reg_n_int
 10220              	.LVL727:
1443:src/xeq.c     **** }
 10221              		.loc 1 1443 9 view .LVU2689
 10222 0012 0746     		mov	r7, r0
 10223              	.LBE2119:
 10224              	.LBE2122:
1689:src/xeq.c     **** 
 10225              		.loc 1 1689 6 view .LVU2690
 10226 0014 4846     		mov	r0, r9
 10227              	.LBB2123:
 10228              	.LBB2120:
1443:src/xeq.c     **** }
 10229              		.loc 1 1443 9 view .LVU2691
 10230 0016 0D46     		mov	r5, r1
 10231              	.LVL728:
1443:src/xeq.c     **** }
 10232              		.loc 1 1443 9 view .LVU2692
 10233              	.LBE2120:
 10234              	.LBE2123:
1689:src/xeq.c     **** 
 10235              		.loc 1 1689 2 is_stmt 1 view .LVU2693
1689:src/xeq.c     **** 
 10236              		.loc 1 1689 6 is_stmt 0 view .LVU2694
 10237 0018 FFF7FEFF 		bl	get_reg_n_int
 10238              	.LVL729:
1691:src/xeq.c     **** 		const long long int t = x;
 10239              		.loc 1 1691 2 is_stmt 1 view .LVU2695
1691:src/xeq.c     **** 		const long long int t = x;
 10240              		.loc 1 1691 5 is_stmt 0 view .LVU2696
 10241 001c B8F1000F 		cmp	r8, #0
 10242 0020 05D0     		beq	.L774
 10243 0022 3A46     		mov	r2, r7
 10244 0024 2B46     		mov	r3, r5
 10245              	.LBB2124:
1693:src/xeq.c     **** 		y = t;
 10246              		.loc 1 1693 5 view .LVU2697
 10247 0026 0746     		mov	r7, r0
 10248              	.LVL730:
1693:src/xeq.c     **** 		y = t;
 10249              		.loc 1 1693 5 view .LVU2698
 10250 0028 0D46     		mov	r5, r1
ARM GAS  /tmp/cc7LeJ71.s 			page 325


 10251              	.LVL731:
1694:src/xeq.c     **** 	}
 10252              		.loc 1 1694 5 view .LVU2699
 10253 002a 1046     		mov	r0, r2
 10254              	.LVL732:
1694:src/xeq.c     **** 	}
 10255              		.loc 1 1694 5 view .LVU2700
 10256 002c 1946     		mov	r1, r3
 10257              	.LVL733:
 10258              	.L774:
1694:src/xeq.c     **** 	}
 10259              		.loc 1 1694 5 view .LVU2701
 10260              	.LBE2124:
1697:src/xeq.c     **** 	case 1:
 10261              		.loc 1 1697 2 is_stmt 1 view .LVU2702
 10262 002e 013C     		subs	r4, r4, #1
 10263 0030 052C     		cmp	r4, #5
 10264 0032 3AD8     		bhi	.L783
 10265 0034 DFE804F0 		tbb	[pc, r4]
 10266              	.L777:
 10267 0038 0C       		.byte	(.L782-.L777)/2
 10268 0039 15       		.byte	(.L781-.L777)/2
 10269 003a 1E       		.byte	(.L780-.L777)/2
 10270 003b 27       		.byte	(.L779-.L777)/2
 10271 003c 30       		.byte	(.L778-.L777)/2
 10272 003d 03       		.byte	(.L776-.L777)/2
 10273              		.p2align 1
 10274              	.L776:
1714:src/xeq.c     **** 		break;
 10275              		.loc 1 1714 3 view .LVU2703
1714:src/xeq.c     **** 		break;
 10276              		.loc 1 1714 8 is_stmt 0 view .LVU2704
 10277 003e 3A46     		mov	r2, r7
 10278 0040 2B46     		mov	r3, r5
 10279 0042 FFF7FEFF 		bl	intMax
 10280              	.LVL734:
1714:src/xeq.c     **** 		break;
 10281              		.loc 1 1714 6 view .LVU2705
 10282 0046 C6E90001 		strd	r0, [r6]
1715:src/xeq.c     **** 	default:
 10283              		.loc 1 1715 3 is_stmt 1 view .LVU2706
1719:src/xeq.c     **** }
 10284              		.loc 1 1719 9 is_stmt 0 view .LVU2707
 10285 004a 0020     		movs	r0, #0
 10286              	.L773:
1720:src/xeq.c     **** 
 10287              		.loc 1 1720 1 view .LVU2708
 10288 004c BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10289              	.LVL735:
 10290              	.L782:
1699:src/xeq.c     **** 		break;
 10291              		.loc 1 1699 3 is_stmt 1 view .LVU2709
1699:src/xeq.c     **** 		break;
 10292              		.loc 1 1699 8 is_stmt 0 view .LVU2710
 10293 0050 3A46     		mov	r2, r7
 10294 0052 2B46     		mov	r3, r5
 10295 0054 FFF7FEFF 		bl	intAdd
ARM GAS  /tmp/cc7LeJ71.s 			page 326


 10296              	.LVL736:
1699:src/xeq.c     **** 		break;
 10297              		.loc 1 1699 6 view .LVU2711
 10298 0058 C6E90001 		strd	r0, [r6]
1700:src/xeq.c     **** 	case 2:
 10299              		.loc 1 1700 3 is_stmt 1 view .LVU2712
1719:src/xeq.c     **** }
 10300              		.loc 1 1719 9 is_stmt 0 view .LVU2713
 10301 005c 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10302              		.loc 1 1720 1 view .LVU2714
 10303 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10304              	.LVL737:
 10305              	.L781:
1702:src/xeq.c     **** 		break;
 10306              		.loc 1 1702 3 is_stmt 1 view .LVU2715
1702:src/xeq.c     **** 		break;
 10307              		.loc 1 1702 8 is_stmt 0 view .LVU2716
 10308 0062 3A46     		mov	r2, r7
 10309 0064 2B46     		mov	r3, r5
 10310 0066 FFF7FEFF 		bl	intSubtract
 10311              	.LVL738:
1702:src/xeq.c     **** 		break;
 10312              		.loc 1 1702 6 view .LVU2717
 10313 006a C6E90001 		strd	r0, [r6]
1703:src/xeq.c     **** 	case 3:
 10314              		.loc 1 1703 3 is_stmt 1 view .LVU2718
1719:src/xeq.c     **** }
 10315              		.loc 1 1719 9 is_stmt 0 view .LVU2719
 10316 006e 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10317              		.loc 1 1720 1 view .LVU2720
 10318 0070 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10319              	.LVL739:
 10320              	.L780:
1705:src/xeq.c     **** 		break;
 10321              		.loc 1 1705 3 is_stmt 1 view .LVU2721
1705:src/xeq.c     **** 		break;
 10322              		.loc 1 1705 8 is_stmt 0 view .LVU2722
 10323 0074 3A46     		mov	r2, r7
 10324 0076 2B46     		mov	r3, r5
 10325 0078 FFF7FEFF 		bl	intMultiply
 10326              	.LVL740:
1705:src/xeq.c     **** 		break;
 10327              		.loc 1 1705 6 view .LVU2723
 10328 007c C6E90001 		strd	r0, [r6]
1706:src/xeq.c     **** 	case 4:
 10329              		.loc 1 1706 3 is_stmt 1 view .LVU2724
1719:src/xeq.c     **** }
 10330              		.loc 1 1719 9 is_stmt 0 view .LVU2725
 10331 0080 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10332              		.loc 1 1720 1 view .LVU2726
 10333 0082 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10334              	.LVL741:
 10335              	.L779:
1708:src/xeq.c     **** 		break;
ARM GAS  /tmp/cc7LeJ71.s 			page 327


 10336              		.loc 1 1708 3 is_stmt 1 view .LVU2727
1708:src/xeq.c     **** 		break;
 10337              		.loc 1 1708 8 is_stmt 0 view .LVU2728
 10338 0086 3A46     		mov	r2, r7
 10339 0088 2B46     		mov	r3, r5
 10340 008a FFF7FEFF 		bl	intDivide
 10341              	.LVL742:
1708:src/xeq.c     **** 		break;
 10342              		.loc 1 1708 6 view .LVU2729
 10343 008e C6E90001 		strd	r0, [r6]
1709:src/xeq.c     **** 	case 5:
 10344              		.loc 1 1709 3 is_stmt 1 view .LVU2730
1719:src/xeq.c     **** }
 10345              		.loc 1 1719 9 is_stmt 0 view .LVU2731
 10346 0092 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10347              		.loc 1 1720 1 view .LVU2732
 10348 0094 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10349              	.LVL743:
 10350              	.L778:
1711:src/xeq.c     **** 		break;
 10351              		.loc 1 1711 3 is_stmt 1 view .LVU2733
1711:src/xeq.c     **** 		break;
 10352              		.loc 1 1711 8 is_stmt 0 view .LVU2734
 10353 0098 3A46     		mov	r2, r7
 10354 009a 2B46     		mov	r3, r5
 10355 009c FFF7FEFF 		bl	intMin
 10356              	.LVL744:
1711:src/xeq.c     **** 		break;
 10357              		.loc 1 1711 6 view .LVU2735
 10358 00a0 C6E90001 		strd	r0, [r6]
1712:src/xeq.c     **** 	case 6:
 10359              		.loc 1 1712 3 is_stmt 1 view .LVU2736
1719:src/xeq.c     **** }
 10360              		.loc 1 1719 9 is_stmt 0 view .LVU2737
 10361 00a4 0020     		movs	r0, #0
1720:src/xeq.c     **** 
 10362              		.loc 1 1720 1 view .LVU2738
 10363 00a6 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 10364              	.LVL745:
 10365              	.L783:
1719:src/xeq.c     **** }
 10366              		.loc 1 1719 9 view .LVU2739
 10367 00aa 0120     		movs	r0, #1
 10368              	.LVL746:
1719:src/xeq.c     **** }
 10369              		.loc 1 1719 9 view .LVU2740
 10370 00ac CEE7     		b	.L773
 10371              		.cfi_endproc
 10372              	.LFE116:
 10374 00ae 00BF     		.section	.text.incdec,"ax",%progbits
 10375              		.align	1
 10376              		.p2align 2,,3
 10377              		.syntax unified
 10378              		.thumb
 10379              		.thumb_func
 10380              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc7LeJ71.s 			page 328


 10382              	incdec:
 10383              	.LVL747:
 10384              	.LFB193:
3401:src/xeq.c     **** 	if (is_intmode()) {
 10385              		.loc 1 3401 46 is_stmt 1 view -0
 10386              		.cfi_startproc
 10387              		@ args = 0, pretend = 0, frame = 80
 10388              		@ frame_needed = 0, uses_anonymous_args = 0
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10389              		.loc 1 3402 2 view .LVU2742
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10390              		.loc 1 3402 6 is_stmt 0 view .LVU2743
 10391 0000 244B     		ldr	r3, .L798
3401:src/xeq.c     **** 	if (is_intmode()) {
 10392              		.loc 1 3401 46 view .LVU2744
 10393 0002 70B5     		push	{r4, r5, r6, lr}
 10394              		.cfi_def_cfa_offset 16
 10395              		.cfi_offset 4, -16
 10396              		.cfi_offset 5, -12
 10397              		.cfi_offset 6, -8
 10398              		.cfi_offset 14, -4
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10399              		.loc 1 3402 6 view .LVU2745
 10400 0004 1B68     		ldr	r3, [r3]
 10401 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10402              		.loc 1 3402 5 view .LVU2746
 10403 000a DB07     		lsls	r3, r3, #31
3401:src/xeq.c     **** 	if (is_intmode()) {
 10404              		.loc 1 3401 46 view .LVU2747
 10405 000c 94B0     		sub	sp, sp, #80
 10406              		.cfi_def_cfa_offset 96
3401:src/xeq.c     **** 	if (is_intmode()) {
 10407              		.loc 1 3401 46 view .LVU2748
 10408 000e 0D46     		mov	r5, r1
 10409 0010 0446     		mov	r4, r0
3402:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 10410              		.loc 1 3402 5 view .LVU2749
 10411 0012 1ED5     		bpl	.L789
 10412              	.LVL748:
 10413              	.LBB2132:
 10414              	.LBI2132:
3401:src/xeq.c     **** 	if (is_intmode()) {
 10415              		.loc 1 3401 12 is_stmt 1 view .LVU2750
 10416              	.LBB2133:
3403:src/xeq.c     **** 		int xs;
 10417              		.loc 1 3403 3 view .LVU2751
3403:src/xeq.c     **** 		int xs;
 10418              		.loc 1 3403 21 is_stmt 0 view .LVU2752
 10419 0014 FFF7FEFF 		bl	get_reg_n_int
 10420              	.LVL749:
3404:src/xeq.c     **** 		unsigned long long int xv;
 10421              		.loc 1 3404 3 is_stmt 1 view .LVU2753
3405:src/xeq.c     **** 
 10422              		.loc 1 3405 3 view .LVU2754
3407:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10423              		.loc 1 3407 3 view .LVU2755
ARM GAS  /tmp/cc7LeJ71.s 			page 329


3408:src/xeq.c     **** 		else
 10424              		.loc 1 3408 8 is_stmt 0 view .LVU2756
 10425 0018 0122     		movs	r2, #1
 10426 001a 0023     		movs	r3, #0
3407:src/xeq.c     **** 			x = intAdd(x, 1LL);
 10427              		.loc 1 3407 6 view .LVU2757
 10428 001c 002D     		cmp	r5, #0
 10429 001e 33D1     		bne	.L796
3410:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10430              		.loc 1 3410 4 is_stmt 1 view .LVU2758
3410:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10431              		.loc 1 3410 8 is_stmt 0 view .LVU2759
 10432 0020 FFF7FEFF 		bl	intSubtract
 10433              	.LVL750:
3410:src/xeq.c     **** 		set_reg_n_int(arg, x);
 10434              		.loc 1 3410 8 view .LVU2760
 10435 0024 0646     		mov	r6, r0
 10436 0026 0D46     		mov	r5, r1
 10437              	.LVL751:
 10438              	.L791:
3411:src/xeq.c     **** 
 10439              		.loc 1 3411 3 is_stmt 1 view .LVU2761
 10440              	.LBB2134:
 10441              	.LBB2135:
1423:src/xeq.c     **** }
 10442              		.loc 1 1423 8 is_stmt 0 view .LVU2762
 10443 0028 2046     		mov	r0, r4
 10444 002a CDE90A65 		strd	r6, r5, [sp, #40]
 10445              	.LVL752:
1423:src/xeq.c     **** }
 10446              		.loc 1 1423 8 view .LVU2763
 10447              	.LBE2135:
 10448              	.LBI2134:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10449              		.loc 1 1422 6 is_stmt 1 view .LVU2764
 10450              	.LBB2136:
1423:src/xeq.c     **** }
 10451              		.loc 1 1423 2 view .LVU2765
1423:src/xeq.c     **** }
 10452              		.loc 1 1423 8 is_stmt 0 view .LVU2766
 10453 002e FFF7FEFF 		bl	get_reg_n
 10454              	.LVL753:
1423:src/xeq.c     **** }
 10455              		.loc 1 1423 2 view .LVU2767
 10456 0032 0AA9     		add	r1, sp, #40
 10457 0034 0822     		movs	r2, #8
 10458 0036 FFF7FEFF 		bl	xcopy
 10459              	.LVL754:
1423:src/xeq.c     **** }
 10460              		.loc 1 1423 2 view .LVU2768
 10461              	.LBE2136:
 10462              	.LBE2134:
3413:src/xeq.c     **** 		return xv != 0;
 10463              		.loc 1 3413 3 is_stmt 1 view .LVU2769
3413:src/xeq.c     **** 		return xv != 0;
 10464              		.loc 1 3413 8 is_stmt 0 view .LVU2770
 10465 003a 0AAA     		add	r2, sp, #40
ARM GAS  /tmp/cc7LeJ71.s 			page 330


 10466 003c 3046     		mov	r0, r6
 10467 003e 2946     		mov	r1, r5
 10468 0040 FFF7FEFF 		bl	extract_value
 10469              	.LVL755:
3414:src/xeq.c     **** 	} else {
 10470              		.loc 1 3414 3 is_stmt 1 view .LVU2771
3414:src/xeq.c     **** 	} else {
 10471              		.loc 1 3414 13 is_stmt 0 view .LVU2772
 10472 0044 50EA0103 		orrs	r3, r0, r1
 10473 0048 14BF     		ite	ne
 10474 004a 0120     		movne	r0, #1
 10475              	.LVL756:
3414:src/xeq.c     **** 	} else {
 10476              		.loc 1 3414 13 view .LVU2773
 10477 004c 0020     		moveq	r0, #0
 10478              	.LVL757:
3414:src/xeq.c     **** 	} else {
 10479              		.loc 1 3414 13 view .LVU2774
 10480              	.LBE2133:
 10481              	.LBE2132:
3427:src/xeq.c     **** 
 10482              		.loc 1 3427 1 view .LVU2775
 10483 004e 14B0     		add	sp, sp, #80
 10484              		.cfi_remember_state
 10485              		.cfi_def_cfa_offset 16
 10486              		@ sp needed
 10487 0050 70BD     		pop	{r4, r5, r6, pc}
 10488              	.LVL758:
 10489              	.L789:
 10490              		.cfi_restore_state
 10491              	.LBB2138:
3416:src/xeq.c     **** 
 10492              		.loc 1 3416 3 is_stmt 1 view .LVU2776
3418:src/xeq.c     **** 		if (inc)
 10493              		.loc 1 3418 3 view .LVU2777
 10494 0052 01A8     		add	r0, sp, #4
 10495              	.LVL759:
3418:src/xeq.c     **** 		if (inc)
 10496              		.loc 1 3418 3 is_stmt 0 view .LVU2778
 10497 0054 2146     		mov	r1, r4
 10498              	.LVL760:
3418:src/xeq.c     **** 		if (inc)
 10499              		.loc 1 3418 3 view .LVU2779
 10500 0056 FFF7FEFF 		bl	getRegister
 10501              	.LVL761:
3419:src/xeq.c     **** 			dn_inc(&x);
 10502              		.loc 1 3419 3 is_stmt 1 view .LVU2780
3420:src/xeq.c     **** 		else
 10503              		.loc 1 3420 4 is_stmt 0 view .LVU2781
 10504 005a 01A8     		add	r0, sp, #4
3419:src/xeq.c     **** 			dn_inc(&x);
 10505              		.loc 1 3419 6 view .LVU2782
 10506 005c 8DB9     		cbnz	r5, .L797
3422:src/xeq.c     **** 		setRegister(arg, &x);
 10507              		.loc 1 3422 4 is_stmt 1 view .LVU2783
 10508 005e FFF7FEFF 		bl	dn_dec
 10509              	.LVL762:
ARM GAS  /tmp/cc7LeJ71.s 			page 331


 10510              	.L794:
3423:src/xeq.c     **** 		decNumberTrunc(&y, &x);
 10511              		.loc 1 3423 3 view .LVU2784
 10512 0062 2046     		mov	r0, r4
 10513 0064 01A9     		add	r1, sp, #4
 10514 0066 FFF7FEFF 		bl	setRegister
 10515              	.LVL763:
3424:src/xeq.c     **** 		return ! dn_eq0(&y);
 10516              		.loc 1 3424 3 view .LVU2785
 10517 006a 01A9     		add	r1, sp, #4
 10518 006c 0AA8     		add	r0, sp, #40
 10519 006e FFF7FEFF 		bl	decNumberTrunc
 10520              	.LVL764:
3425:src/xeq.c     **** 	}
 10521              		.loc 1 3425 3 view .LVU2786
3425:src/xeq.c     **** 	}
 10522              		.loc 1 3425 12 is_stmt 0 view .LVU2787
 10523 0072 0AA8     		add	r0, sp, #40
 10524 0074 FFF7FEFF 		bl	dn_eq0
 10525              	.LVL765:
3425:src/xeq.c     **** 	}
 10526              		.loc 1 3425 10 view .LVU2788
 10527 0078 B0FA80F0 		clz	r0, r0
 10528 007c 4009     		lsrs	r0, r0, #5
 10529              	.LBE2138:
3427:src/xeq.c     **** 
 10530              		.loc 1 3427 1 view .LVU2789
 10531 007e 14B0     		add	sp, sp, #80
 10532              		.cfi_remember_state
 10533              		.cfi_def_cfa_offset 16
 10534              		@ sp needed
 10535 0080 70BD     		pop	{r4, r5, r6, pc}
 10536              	.LVL766:
 10537              	.L797:
 10538              		.cfi_restore_state
 10539              	.LBB2139:
3420:src/xeq.c     **** 		else
 10540              		.loc 1 3420 4 is_stmt 1 view .LVU2790
 10541 0082 FFF7FEFF 		bl	dn_inc
 10542              	.LVL767:
 10543 0086 ECE7     		b	.L794
 10544              	.LVL768:
 10545              	.L796:
3420:src/xeq.c     **** 		else
 10546              		.loc 1 3420 4 is_stmt 0 view .LVU2791
 10547              	.LBE2139:
 10548              	.LBB2140:
 10549              	.LBB2137:
3408:src/xeq.c     **** 		else
 10550              		.loc 1 3408 4 is_stmt 1 view .LVU2792
3408:src/xeq.c     **** 		else
 10551              		.loc 1 3408 8 is_stmt 0 view .LVU2793
 10552 0088 FFF7FEFF 		bl	intAdd
 10553              	.LVL769:
3408:src/xeq.c     **** 		else
 10554              		.loc 1 3408 8 view .LVU2794
 10555 008c 0646     		mov	r6, r0
ARM GAS  /tmp/cc7LeJ71.s 			page 332


 10556 008e 0D46     		mov	r5, r1
 10557              	.LVL770:
3408:src/xeq.c     **** 		else
 10558              		.loc 1 3408 8 view .LVU2795
 10559 0090 CAE7     		b	.L791
 10560              	.L799:
 10561 0092 00BF     		.align	2
 10562              	.L798:
 10563 0094 00000000 		.word	main_ram
 10564              	.LBE2137:
 10565              	.LBE2140:
 10566              		.cfi_endproc
 10567              	.LFE193:
 10569              		.section	.text.set_reg_n_int,"ax",%progbits
 10570              		.align	1
 10571              		.p2align 2,,3
 10572              		.global	set_reg_n_int
 10573              		.syntax unified
 10574              		.thumb
 10575              		.thumb_func
 10576              		.fpu fpv4-sp-d16
 10578              	set_reg_n_int:
 10579              	.LVL771:
 10580              	.LFB95:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10581              		.loc 1 1422 49 is_stmt 1 view -0
 10582              		.cfi_startproc
 10583              		@ args = 0, pretend = 0, frame = 8
 10584              		@ frame_needed = 0, uses_anonymous_args = 0
1423:src/xeq.c     **** }
 10585              		.loc 1 1423 2 view .LVU2797
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10586              		.loc 1 1422 49 is_stmt 0 view .LVU2798
 10587 0000 00B5     		push	{lr}
 10588              		.cfi_def_cfa_offset 4
 10589              		.cfi_offset 14, -4
 10590 0002 83B0     		sub	sp, sp, #12
 10591              		.cfi_def_cfa_offset 16
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10592              		.loc 1 1422 49 view .LVU2799
 10593 0004 CDE90023 		strd	r2, [sp]
1423:src/xeq.c     **** }
 10594              		.loc 1 1423 8 view .LVU2800
 10595 0008 FFF7FEFF 		bl	get_reg_n
 10596              	.LVL772:
1423:src/xeq.c     **** }
 10597              		.loc 1 1423 2 view .LVU2801
 10598 000c 0822     		movs	r2, #8
 10599 000e 6946     		mov	r1, sp
 10600 0010 FFF7FEFF 		bl	xcopy
 10601              	.LVL773:
1424:src/xeq.c     **** 
 10602              		.loc 1 1424 1 view .LVU2802
 10603 0014 03B0     		add	sp, sp, #12
 10604              		.cfi_def_cfa_offset 4
 10605              		@ sp needed
 10606 0016 5DF804FB 		ldr	pc, [sp], #4
ARM GAS  /tmp/cc7LeJ71.s 			page 333


 10607              		.cfi_endproc
 10608              	.LFE95:
 10610 001a 00BF     		.section	.text.get_reg_n_int_sgn,"ax",%progbits
 10611              		.align	1
 10612              		.p2align 2,,3
 10613              		.global	get_reg_n_int_sgn
 10614              		.syntax unified
 10615              		.thumb
 10616              		.thumb_func
 10617              		.fpu fpv4-sp-d16
 10619              	get_reg_n_int_sgn:
 10620              	.LVL774:
 10621              	.LFB96:
1428:src/xeq.c     **** 	if (is_intmode()) {
 10622              		.loc 1 1428 63 is_stmt 1 view -0
 10623              		.cfi_startproc
 10624              		@ args = 0, pretend = 0, frame = 40
 10625              		@ frame_needed = 0, uses_anonymous_args = 0
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10626              		.loc 1 1429 2 view .LVU2804
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10627              		.loc 1 1429 6 is_stmt 0 view .LVU2805
 10628 0000 0C4B     		ldr	r3, .L806
1428:src/xeq.c     **** 	if (is_intmode()) {
 10629              		.loc 1 1428 63 view .LVU2806
 10630 0002 10B5     		push	{r4, lr}
 10631              		.cfi_def_cfa_offset 8
 10632              		.cfi_offset 4, -8
 10633              		.cfi_offset 14, -4
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10634              		.loc 1 1429 6 view .LVU2807
 10635 0004 1B68     		ldr	r3, [r3]
 10636 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10637              		.loc 1 1429 5 view .LVU2808
 10638 000a DB07     		lsls	r3, r3, #31
1428:src/xeq.c     **** 	if (is_intmode()) {
 10639              		.loc 1 1428 63 view .LVU2809
 10640 000c 8AB0     		sub	sp, sp, #40
 10641              		.cfi_def_cfa_offset 48
1428:src/xeq.c     **** 	if (is_intmode()) {
 10642              		.loc 1 1428 63 view .LVU2810
 10643 000e 0C46     		mov	r4, r1
1429:src/xeq.c     **** 		return extract_value(get_reg_n_int(index), sgn);
 10644              		.loc 1 1429 5 view .LVU2811
 10645 0010 06D5     		bpl	.L803
 10646              	.LVL775:
 10647              	.LBB2145:
 10648              	.LBI2145:
1428:src/xeq.c     **** 	if (is_intmode()) {
 10649              		.loc 1 1428 24 is_stmt 1 view .LVU2812
 10650              	.LBB2146:
1430:src/xeq.c     **** 	} else {
 10651              		.loc 1 1430 3 view .LVU2813
1430:src/xeq.c     **** 	} else {
 10652              		.loc 1 1430 10 is_stmt 0 view .LVU2814
 10653 0012 FFF7FEFF 		bl	get_reg_n_int
ARM GAS  /tmp/cc7LeJ71.s 			page 334


 10654              	.LVL776:
1430:src/xeq.c     **** 	} else {
 10655              		.loc 1 1430 10 view .LVU2815
 10656 0016 2246     		mov	r2, r4
 10657 0018 FFF7FEFF 		bl	extract_value
 10658              	.LVL777:
1430:src/xeq.c     **** 	} else {
 10659              		.loc 1 1430 10 view .LVU2816
 10660              	.LBE2146:
 10661              	.LBE2145:
1437:src/xeq.c     **** 
 10662              		.loc 1 1437 1 view .LVU2817
 10663 001c 0AB0     		add	sp, sp, #40
 10664              		.cfi_remember_state
 10665              		.cfi_def_cfa_offset 8
 10666              		@ sp needed
 10667 001e 10BD     		pop	{r4, pc}
 10668              	.LVL778:
 10669              	.L803:
 10670              		.cfi_restore_state
1437:src/xeq.c     **** 
 10671              		.loc 1 1437 1 view .LVU2818
 10672 0020 0146     		mov	r1, r0
 10673              	.LVL779:
 10674              	.LBB2147:
1432:src/xeq.c     **** 
 10675              		.loc 1 1432 3 is_stmt 1 view .LVU2819
1434:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10676              		.loc 1 1434 3 view .LVU2820
 10677 0022 01A8     		add	r0, sp, #4
 10678              	.LVL780:
1434:src/xeq.c     **** 		return dn_to_ull(&n, sgn);
 10679              		.loc 1 1434 3 is_stmt 0 view .LVU2821
 10680 0024 FFF7FEFF 		bl	getRegister
 10681              	.LVL781:
1435:src/xeq.c     **** 	}
 10682              		.loc 1 1435 3 is_stmt 1 view .LVU2822
1435:src/xeq.c     **** 	}
 10683              		.loc 1 1435 10 is_stmt 0 view .LVU2823
 10684 0028 2146     		mov	r1, r4
 10685 002a 01A8     		add	r0, sp, #4
 10686 002c FFF7FEFF 		bl	dn_to_ull
 10687              	.LVL782:
 10688              	.LBE2147:
1437:src/xeq.c     **** 
 10689              		.loc 1 1437 1 view .LVU2824
 10690 0030 0AB0     		add	sp, sp, #40
 10691              		.cfi_def_cfa_offset 8
 10692              		@ sp needed
 10693 0032 10BD     		pop	{r4, pc}
 10694              	.LVL783:
 10695              	.L807:
1437:src/xeq.c     **** 
 10696              		.loc 1 1437 1 view .LVU2825
 10697              		.align	2
 10698              	.L806:
 10699 0034 00000000 		.word	main_ram
ARM GAS  /tmp/cc7LeJ71.s 			page 335


 10700              		.cfi_endproc
 10701              	.LFE96:
 10703              		.section	.text.get_keycode_from_reg,"ax",%progbits
 10704              		.align	1
 10705              		.p2align 2,,3
 10706              		.syntax unified
 10707              		.thumb
 10708              		.thumb_func
 10709              		.fpu fpv4-sp-d16
 10711              	get_keycode_from_reg:
 10712              	.LVL784:
 10713              	.LFB140:
2061:src/xeq.c     **** 	int sgn;
 10714              		.loc 1 2061 1 is_stmt 1 view -0
 10715              		.cfi_startproc
 10716              		@ args = 0, pretend = 0, frame = 8
 10717              		@ frame_needed = 0, uses_anonymous_args = 0
2062:src/xeq.c     **** 	const int c = row_column_to_keycode((int) get_reg_n_int_sgn((int) n, &sgn));
 10718              		.loc 1 2062 2 view .LVU2827
2063:src/xeq.c     **** 	if ( c < 0 )
 10719              		.loc 1 2063 2 view .LVU2828
2061:src/xeq.c     **** 	int sgn;
 10720              		.loc 1 2061 1 is_stmt 0 view .LVU2829
 10721 0000 00B5     		push	{lr}
 10722              		.cfi_def_cfa_offset 4
 10723              		.cfi_offset 14, -4
 10724 0002 83B0     		sub	sp, sp, #12
 10725              		.cfi_def_cfa_offset 16
2063:src/xeq.c     **** 	if ( c < 0 )
 10726              		.loc 1 2063 44 view .LVU2830
 10727 0004 01A9     		add	r1, sp, #4
 10728 0006 FFF7FEFF 		bl	get_reg_n_int_sgn
 10729              	.LVL785:
2063:src/xeq.c     **** 	if ( c < 0 )
 10730              		.loc 1 2063 16 view .LVU2831
 10731 000a FFF7FEFF 		bl	row_column_to_keycode
 10732              	.LVL786:
2064:src/xeq.c     **** 		report_err(ERR_RANGE);
 10733              		.loc 1 2064 2 is_stmt 1 view .LVU2832
2064:src/xeq.c     **** 		report_err(ERR_RANGE);
 10734              		.loc 1 2064 5 is_stmt 0 view .LVU2833
 10735 000e 0028     		cmp	r0, #0
2064:src/xeq.c     **** 		report_err(ERR_RANGE);
 10736              		.loc 1 2064 5 view .LVU2834
 10737 0010 02DB     		blt	.L811
 10738              	.L808:
2067:src/xeq.c     **** 
 10739              		.loc 1 2067 1 view .LVU2835
 10740 0012 03B0     		add	sp, sp, #12
 10741              		.cfi_remember_state
 10742              		.cfi_def_cfa_offset 4
 10743              		@ sp needed
 10744 0014 5DF804FB 		ldr	pc, [sp], #4
 10745              	.L811:
 10746              		.cfi_restore_state
 10747              	.LBB2154:
 10748              	.LBI2154:
ARM GAS  /tmp/cc7LeJ71.s 			page 336


2060:src/xeq.c     **** {
 10749              		.loc 1 2060 12 is_stmt 1 view .LVU2836
 10750              	.LVL787:
 10751              	.LBB2155:
2065:src/xeq.c     **** 	return c;
 10752              		.loc 1 2065 3 view .LVU2837
 10753              	.LBB2156:
 10754              	.LBI2156:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10755              		.loc 1 546 5 view .LVU2838
 10756              	.LBB2157:
 547:src/xeq.c     **** 		Error = e;
 10757              		.loc 1 547 2 view .LVU2839
 547:src/xeq.c     **** 		Error = e;
 10758              		.loc 1 547 12 is_stmt 0 view .LVU2840
 10759 0018 044B     		ldr	r3, .L812
 547:src/xeq.c     **** 		Error = e;
 10760              		.loc 1 547 5 view .LVU2841
 10761 001a 1A68     		ldr	r2, [r3]
 10762 001c 002A     		cmp	r2, #0
 10763 001e F8D1     		bne	.L808
 10764              	.LVL788:
 10765              	.LBB2158:
 10766              	.LBI2158:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 10767              		.loc 1 546 5 is_stmt 1 view .LVU2842
 10768              	.LBB2159:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 10769              		.loc 1 548 3 view .LVU2843
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 10770              		.loc 1 548 9 is_stmt 0 view .LVU2844
 10771 0020 0822     		movs	r2, #8
 10772 0022 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 10773              		.loc 1 549 3 is_stmt 1 view .LVU2845
 10774              	.LVL789:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 10775              		.loc 1 549 3 is_stmt 0 view .LVU2846
 10776              	.LBE2159:
 10777              	.LBE2158:
 10778              	.LBE2157:
 10779              	.LBE2156:
 10780              	.LBE2155:
 10781              	.LBE2154:
2066:src/xeq.c     **** }
 10782              		.loc 1 2066 2 is_stmt 1 view .LVU2847
2067:src/xeq.c     **** 
 10783              		.loc 1 2067 1 is_stmt 0 view .LVU2848
 10784 0024 03B0     		add	sp, sp, #12
 10785              		.cfi_def_cfa_offset 4
 10786              		@ sp needed
 10787 0026 5DF804FB 		ldr	pc, [sp], #4
 10788              	.L813:
 10789 002a 00BF     		.align	2
 10790              	.L812:
 10791 002c 00000000 		.word	Error
 10792              		.cfi_endproc
ARM GAS  /tmp/cc7LeJ71.s 			page 337


 10793              	.LFE140:
 10795              		.section	.text.getX_int,"ax",%progbits
 10796              		.align	1
 10797              		.p2align 2,,3
 10798              		.global	getX_int
 10799              		.syntax unified
 10800              		.thumb
 10801              		.thumb_func
 10802              		.fpu fpv4-sp-d16
 10804              	getX_int:
 10805              	.LFB97:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 10806              		.loc 1 1442 30 is_stmt 1 view -0
 10807              		.cfi_startproc
 10808              		@ args = 0, pretend = 0, frame = 0
 10809              		@ frame_needed = 0, uses_anonymous_args = 0
 10810              		@ link register save eliminated.
1443:src/xeq.c     **** }
 10811              		.loc 1 1443 2 view .LVU2850
1443:src/xeq.c     **** }
 10812              		.loc 1 1443 9 is_stmt 0 view .LVU2851
 10813 0000 6420     		movs	r0, #100
 10814 0002 FFF7FEBF 		b	get_reg_n_int
 10815              	.LVL790:
 10816              		.cfi_endproc
 10817              	.LFE97:
 10819 0006 00BF     		.section	.text.getX_int_sgn,"ax",%progbits
 10820              		.align	1
 10821              		.p2align 2,,3
 10822              		.global	getX_int_sgn
 10823              		.syntax unified
 10824              		.thumb
 10825              		.thumb_func
 10826              		.fpu fpv4-sp-d16
 10828              	getX_int_sgn:
 10829              	.LVL791:
 10830              	.LFB98:
1446:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10831              		.loc 1 1446 47 is_stmt 1 view -0
 10832              		.cfi_startproc
 10833              		@ args = 0, pretend = 0, frame = 0
 10834              		@ frame_needed = 0, uses_anonymous_args = 0
 10835              		@ link register save eliminated.
1447:src/xeq.c     **** }
 10836              		.loc 1 1447 2 view .LVU2853
1446:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 10837              		.loc 1 1446 47 is_stmt 0 view .LVU2854
 10838 0000 0146     		mov	r1, r0
1447:src/xeq.c     **** }
 10839              		.loc 1 1447 9 view .LVU2855
 10840 0002 6420     		movs	r0, #100
 10841              	.LVL792:
1447:src/xeq.c     **** }
 10842              		.loc 1 1447 9 view .LVU2856
 10843 0004 FFF7FEBF 		b	get_reg_n_int_sgn
 10844              	.LVL793:
1447:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 338


 10845              		.loc 1 1447 9 view .LVU2857
 10846              		.cfi_endproc
 10847              	.LFE98:
 10849              		.section	.text.set_reg_n_int_sgn,"ax",%progbits
 10850              		.align	1
 10851              		.p2align 2,,3
 10852              		.global	set_reg_n_int_sgn
 10853              		.syntax unified
 10854              		.thumb
 10855              		.thumb_func
 10856              		.fpu fpv4-sp-d16
 10858              	set_reg_n_int_sgn:
 10859              	.LVL794:
 10860              	.LFB100:
1467:src/xeq.c     **** 	if (is_intmode()) {
 10861              		.loc 1 1467 72 is_stmt 1 view -0
 10862              		.cfi_startproc
 10863              		@ args = 4, pretend = 0, frame = 40
 10864              		@ frame_needed = 0, uses_anonymous_args = 0
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10865              		.loc 1 1468 2 view .LVU2859
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10866              		.loc 1 1468 6 is_stmt 0 view .LVU2860
 10867 0000 1749     		ldr	r1, .L826
1467:src/xeq.c     **** 	if (is_intmode()) {
 10868              		.loc 1 1467 72 view .LVU2861
 10869 0002 30B5     		push	{r4, r5, lr}
 10870              		.cfi_def_cfa_offset 12
 10871              		.cfi_offset 4, -12
 10872              		.cfi_offset 5, -8
 10873              		.cfi_offset 14, -4
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10874              		.loc 1 1468 6 view .LVU2862
 10875 0004 0968     		ldr	r1, [r1]
 10876 0006 91F8E857 		ldrb	r5, [r1, #2024]	@ zero_extendqisi2
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10877              		.loc 1 1468 5 view .LVU2863
 10878 000a E907     		lsls	r1, r5, #31
1467:src/xeq.c     **** 	if (is_intmode()) {
 10879              		.loc 1 1467 72 view .LVU2864
 10880 000c 8BB0     		sub	sp, sp, #44
 10881              		.cfi_def_cfa_offset 56
1467:src/xeq.c     **** 	if (is_intmode()) {
 10882              		.loc 1 1467 72 view .LVU2865
 10883 000e 0446     		mov	r4, r0
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10884              		.loc 1 1468 5 view .LVU2866
 10885 0010 11D5     		bpl	.L817
 10886              	.LVL795:
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10887              		.loc 1 1468 5 view .LVU2867
 10888 0012 1046     		mov	r0, r2
 10889              	.LVL796:
1468:src/xeq.c     **** 		set_reg_n_int(index, build_value(val, sgn));
 10890              		.loc 1 1468 5 view .LVU2868
 10891 0014 1946     		mov	r1, r3
 10892              	.LVL797:
ARM GAS  /tmp/cc7LeJ71.s 			page 339


 10893              	.LBB2166:
 10894              	.LBI2166:
1467:src/xeq.c     **** 	if (is_intmode()) {
 10895              		.loc 1 1467 6 is_stmt 1 view .LVU2869
 10896              	.LBB2167:
1469:src/xeq.c     **** 	} else {
 10897              		.loc 1 1469 3 view .LVU2870
 10898 0016 0E9A     		ldr	r2, [sp, #56]
 10899              	.LVL798:
1469:src/xeq.c     **** 	} else {
 10900              		.loc 1 1469 3 is_stmt 0 view .LVU2871
 10901 0018 FFF7FEFF 		bl	build_value
 10902              	.LVL799:
1469:src/xeq.c     **** 	} else {
 10903              		.loc 1 1469 3 view .LVU2872
 10904 001c 0B46     		mov	r3, r1
 10905 001e 0246     		mov	r2, r0
 10906              	.LBB2168:
 10907              	.LBB2169:
1423:src/xeq.c     **** }
 10908              		.loc 1 1423 8 view .LVU2873
 10909 0020 2046     		mov	r0, r4
 10910 0022 CDE90023 		strd	r2, [sp]
 10911              	.LVL800:
1423:src/xeq.c     **** }
 10912              		.loc 1 1423 8 view .LVU2874
 10913              	.LBE2169:
 10914              	.LBI2168:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 10915              		.loc 1 1422 6 is_stmt 1 view .LVU2875
 10916              	.LBB2170:
1423:src/xeq.c     **** }
 10917              		.loc 1 1423 2 view .LVU2876
1423:src/xeq.c     **** }
 10918              		.loc 1 1423 8 is_stmt 0 view .LVU2877
 10919 0026 FFF7FEFF 		bl	get_reg_n
 10920              	.LVL801:
1423:src/xeq.c     **** }
 10921              		.loc 1 1423 2 view .LVU2878
 10922 002a 0822     		movs	r2, #8
 10923 002c 6946     		mov	r1, sp
 10924 002e FFF7FEFF 		bl	xcopy
 10925              	.LVL802:
1423:src/xeq.c     **** }
 10926              		.loc 1 1423 2 view .LVU2879
 10927              	.LBE2170:
 10928              	.LBE2168:
 10929              	.LBE2167:
 10930              	.LBE2166:
1478:src/xeq.c     **** 
 10931              		.loc 1 1478 1 view .LVU2880
 10932 0032 0BB0     		add	sp, sp, #44
 10933              		.cfi_remember_state
 10934              		.cfi_def_cfa_offset 12
 10935              		@ sp needed
 10936 0034 30BD     		pop	{r4, r5, pc}
 10937              	.LVL803:
ARM GAS  /tmp/cc7LeJ71.s 			page 340


 10938              	.L817:
 10939              		.cfi_restore_state
 10940              	.LBB2171:
1471:src/xeq.c     **** 
 10941              		.loc 1 1471 3 is_stmt 1 view .LVU2881
1473:src/xeq.c     **** 		if (sgn)
 10942              		.loc 1 1473 3 view .LVU2882
 10943 0036 6846     		mov	r0, sp
 10944              	.LVL804:
1473:src/xeq.c     **** 		if (sgn)
 10945              		.loc 1 1473 3 is_stmt 0 view .LVU2883
 10946 0038 FFF7FEFF 		bl	ullint_to_dn
 10947              	.LVL805:
1474:src/xeq.c     **** 			dn_minus(&t, &t);
 10948              		.loc 1 1474 3 is_stmt 1 view .LVU2884
1474:src/xeq.c     **** 			dn_minus(&t, &t);
 10949              		.loc 1 1474 6 is_stmt 0 view .LVU2885
 10950 003c 0E9B     		ldr	r3, [sp, #56]
 10951 003e 2BB9     		cbnz	r3, .L824
1476:src/xeq.c     **** 	}
 10952              		.loc 1 1476 3 is_stmt 1 view .LVU2886
 10953 0040 6946     		mov	r1, sp
 10954 0042 2046     		mov	r0, r4
 10955 0044 FFF7FEFF 		bl	setRegister
 10956              	.LVL806:
 10957              	.L825:
1476:src/xeq.c     **** 	}
 10958              		.loc 1 1476 3 is_stmt 0 view .LVU2887
 10959              	.LBE2171:
1478:src/xeq.c     **** 
 10960              		.loc 1 1478 1 view .LVU2888
 10961 0048 0BB0     		add	sp, sp, #44
 10962              		.cfi_remember_state
 10963              		.cfi_def_cfa_offset 12
 10964              		@ sp needed
 10965 004a 30BD     		pop	{r4, r5, pc}
 10966              	.LVL807:
 10967              	.L824:
 10968              		.cfi_restore_state
 10969              	.LBB2172:
1475:src/xeq.c     **** 		setRegister(index, &t);
 10970              		.loc 1 1475 4 is_stmt 1 view .LVU2889
 10971 004c 6946     		mov	r1, sp
 10972 004e 6846     		mov	r0, sp
 10973 0050 FFF7FEFF 		bl	dn_minus
 10974              	.LVL808:
1476:src/xeq.c     **** 	}
 10975              		.loc 1 1476 3 view .LVU2890
 10976 0054 6946     		mov	r1, sp
 10977 0056 2046     		mov	r0, r4
 10978 0058 FFF7FEFF 		bl	setRegister
 10979              	.LVL809:
 10980 005c F4E7     		b	.L825
 10981              	.L827:
 10982 005e 00BF     		.align	2
 10983              	.L826:
 10984 0060 00000000 		.word	main_ram
ARM GAS  /tmp/cc7LeJ71.s 			page 341


 10985              	.LBE2172:
 10986              		.cfi_endproc
 10987              	.LFE100:
 10989              		.section	.text.op_roundingmode,"ax",%progbits
 10990              		.align	1
 10991              		.p2align 2,,3
 10992              		.global	op_roundingmode
 10993              		.syntax unified
 10994              		.thumb
 10995              		.thumb_func
 10996              		.fpu fpv4-sp-d16
 10998              	op_roundingmode:
 10999              	.LVL810:
 11000              	.LFB34:
 619:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 11001              		.loc 1 619 37 view -0
 11002              		.cfi_startproc
 11003              		@ args = 0, pretend = 0, frame = 0
 11004              		@ frame_needed = 0, uses_anonymous_args = 0
 620:src/xeq.c     **** }
 11005              		.loc 1 620 2 view .LVU2892
 11006              	.LBB2173:
 11007              	.LBI2173:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11008              		.loc 1 1509 6 view .LVU2893
 11009              	.LBB2174:
1510:src/xeq.c     **** }
 11010              		.loc 1 1510 2 view .LVU2894
 11011              	.LBE2174:
 11012              	.LBE2173:
 619:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 11013              		.loc 1 619 37 is_stmt 0 view .LVU2895
 11014 0000 00B5     		push	{lr}
 11015              		.cfi_def_cfa_offset 4
 11016              		.cfi_offset 14, -4
 620:src/xeq.c     **** }
 11017              		.loc 1 620 21 view .LVU2896
 11018 0002 084B     		ldr	r3, .L830
 11019              	.LVL811:
 620:src/xeq.c     **** }
 11020              		.loc 1 620 21 view .LVU2897
 11021 0004 1B68     		ldr	r3, [r3]
 11022              	.LVL812:
 620:src/xeq.c     **** }
 11023              		.loc 1 620 21 view .LVU2898
 11024 0006 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 619:src/xeq.c     **** 	setX_int_sgn(UState.rounding_mode, 0);
 11025              		.loc 1 619 37 view .LVU2899
 11026 000a 83B0     		sub	sp, sp, #12
 11027              		.cfi_def_cfa_offset 16
 11028              	.LBB2177:
 11029              	.LBB2175:
1510:src/xeq.c     **** }
 11030              		.loc 1 1510 2 view .LVU2900
 11031 000c 0021     		movs	r1, #0
 11032              	.LBE2175:
 11033              	.LBE2177:
ARM GAS  /tmp/cc7LeJ71.s 			page 342


 620:src/xeq.c     **** }
 11034              		.loc 1 620 21 view .LVU2901
 11035 000e C2F30212 		ubfx	r2, r2, #4, #3
 11036              	.LBB2178:
 11037              	.LBB2176:
1510:src/xeq.c     **** }
 11038              		.loc 1 1510 2 view .LVU2902
 11039 0012 D2B2     		uxtb	r2, r2
 11040 0014 0023     		movs	r3, #0
 11041              	.LVL813:
1510:src/xeq.c     **** }
 11042              		.loc 1 1510 2 view .LVU2903
 11043 0016 0091     		str	r1, [sp]
 11044              	.LVL814:
1510:src/xeq.c     **** }
 11045              		.loc 1 1510 2 view .LVU2904
 11046 0018 6420     		movs	r0, #100
 11047              	.LVL815:
1510:src/xeq.c     **** }
 11048              		.loc 1 1510 2 view .LVU2905
 11049 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 11050              	.LVL816:
1510:src/xeq.c     **** }
 11051              		.loc 1 1510 2 view .LVU2906
 11052              	.LBE2176:
 11053              	.LBE2178:
 621:src/xeq.c     **** 
 11054              		.loc 1 621 1 view .LVU2907
 11055 001e 03B0     		add	sp, sp, #12
 11056              		.cfi_def_cfa_offset 4
 11057              		@ sp needed
 11058 0020 5DF804FB 		ldr	pc, [sp], #4
 11059              	.L831:
 11060              		.align	2
 11061              	.L830:
 11062 0024 00000000 		.word	main_ram
 11063              		.cfi_endproc
 11064              	.LFE34:
 11066              		.section	.text.register_from_int,"ax",%progbits
 11067              		.align	1
 11068              		.p2align 2,,3
 11069              		.syntax unified
 11070              		.thumb
 11071              		.thumb_func
 11072              		.fpu fpv4-sp-d16
 11074              	register_from_int:
 11075              	.LVL817:
 11076              	.LFB101:
1485:src/xeq.c     **** 	int sgn;
 11077              		.loc 1 1485 69 is_stmt 1 view -0
 11078              		.cfi_startproc
 11079              		@ args = 0, pretend = 0, frame = 8
 11080              		@ frame_needed = 0, uses_anonymous_args = 0
1486:src/xeq.c     **** 	unsigned long long int val;
 11081              		.loc 1 1486 2 view .LVU2909
1487:src/xeq.c     **** 	const int xin = XromFlags.xIN;
 11082              		.loc 1 1487 2 view .LVU2910
ARM GAS  /tmp/cc7LeJ71.s 			page 343


1488:src/xeq.c     **** 	
 11083              		.loc 1 1488 2 view .LVU2911
1485:src/xeq.c     **** 	int sgn;
 11084              		.loc 1 1485 69 is_stmt 0 view .LVU2912
 11085 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 11086              		.cfi_def_cfa_offset 28
 11087              		.cfi_offset 4, -28
 11088              		.cfi_offset 5, -24
 11089              		.cfi_offset 6, -20
 11090              		.cfi_offset 7, -16
 11091              		.cfi_offset 8, -12
 11092              		.cfi_offset 9, -8
 11093              		.cfi_offset 14, -4
1488:src/xeq.c     **** 	
 11094              		.loc 1 1488 27 view .LVU2913
 11095 0004 154C     		ldr	r4, .L838
 11096 0006 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
1485:src/xeq.c     **** 	int sgn;
 11097              		.loc 1 1485 69 view .LVU2914
 11098 0008 0546     		mov	r5, r0
 11099 000a 85B0     		sub	sp, sp, #20
 11100              		.cfi_def_cfa_offset 48
1485:src/xeq.c     **** 	int sgn;
 11101              		.loc 1 1485 69 view .LVU2915
 11102 000c 0846     		mov	r0, r1
 11103              	.LVL818:
1488:src/xeq.c     **** 	
 11104              		.loc 1 1488 27 view .LVU2916
 11105 000e DE09     		lsrs	r6, r3, #7
 11106              	.LVL819:
1490:src/xeq.c     **** 		XromFlags.xIN = 0;
 11107              		.loc 1 1490 2 is_stmt 1 view .LVU2917
1490:src/xeq.c     **** 		XromFlags.xIN = 0;
 11108              		.loc 1 1490 5 is_stmt 0 view .LVU2918
 11109 0010 12B1     		cbz	r2, .L833
1491:src/xeq.c     **** 	UState.intm = 1;
 11110              		.loc 1 1491 3 is_stmt 1 view .LVU2919
1491:src/xeq.c     **** 	UState.intm = 1;
 11111              		.loc 1 1491 17 is_stmt 0 view .LVU2920
 11112 0012 6FF3C713 		bfc	r3, #7, #1
 11113              	.LVL820:
1491:src/xeq.c     **** 	UState.intm = 1;
 11114              		.loc 1 1491 17 view .LVU2921
 11115 0016 6370     		strb	r3, [r4, #1]
 11116              	.LVL821:
 11117              	.L833:
1492:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11118              		.loc 1 1492 2 is_stmt 1 view .LVU2922
1492:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11119              		.loc 1 1492 14 is_stmt 0 view .LVU2923
 11120 0018 114F     		ldr	r7, .L838+4
 11121 001a 3A68     		ldr	r2, [r7]
 11122              	.LVL822:
1492:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11123              		.loc 1 1492 14 view .LVU2924
 11124 001c 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
 11125 0020 43F00103 		orr	r3, r3, #1
ARM GAS  /tmp/cc7LeJ71.s 			page 344


 11126 0024 82F8E837 		strb	r3, [r2, #2024]
1493:src/xeq.c     **** 
 11127              		.loc 1 1493 2 is_stmt 1 view .LVU2925
1493:src/xeq.c     **** 
 11128              		.loc 1 1493 8 is_stmt 0 view .LVU2926
 11129 0028 03A9     		add	r1, sp, #12
 11130              	.LVL823:
1493:src/xeq.c     **** 
 11131              		.loc 1 1493 8 view .LVU2927
 11132 002a FFF7FEFF 		bl	get_reg_n_int_sgn
 11133              	.LVL824:
1495:src/xeq.c     **** 	UState.intm = 0;
 11134              		.loc 1 1495 16 view .LVU2928
 11135 002e 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
1496:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11136              		.loc 1 1496 14 view .LVU2929
 11137 0030 3B68     		ldr	r3, [r7]
1495:src/xeq.c     **** 	UState.intm = 0;
 11138              		.loc 1 1495 16 view .LVU2930
 11139 0032 66F3C712 		bfi	r2, r6, #7, #1
 11140 0036 6270     		strb	r2, [r4, #1]
1493:src/xeq.c     **** 
 11141              		.loc 1 1493 8 view .LVU2931
 11142 0038 8946     		mov	r9, r1
1496:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11143              		.loc 1 1496 14 view .LVU2932
 11144 003a 93F8E817 		ldrb	r1, [r3, #2024]	@ zero_extendqisi2
 11145 003e 6FF30001 		bfc	r1, #0, #1
 11146 0042 83F8E817 		strb	r1, [r3, #2024]
1497:src/xeq.c     **** }
 11147              		.loc 1 1497 2 view .LVU2933
 11148 0046 039B     		ldr	r3, [sp, #12]
 11149 0048 0093     		str	r3, [sp]
1493:src/xeq.c     **** 
 11150              		.loc 1 1493 8 view .LVU2934
 11151 004a 8046     		mov	r8, r0
 11152              	.LVL825:
1495:src/xeq.c     **** 	UState.intm = 0;
 11153              		.loc 1 1495 2 is_stmt 1 view .LVU2935
1496:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11154              		.loc 1 1496 2 view .LVU2936
1497:src/xeq.c     **** }
 11155              		.loc 1 1497 2 view .LVU2937
 11156 004c 4246     		mov	r2, r8
 11157 004e 4B46     		mov	r3, r9
 11158 0050 2846     		mov	r0, r5
 11159 0052 FFF7FEFF 		bl	set_reg_n_int_sgn
 11160              	.LVL826:
1498:src/xeq.c     **** 
 11161              		.loc 1 1498 1 is_stmt 0 view .LVU2938
 11162 0056 05B0     		add	sp, sp, #20
 11163              		.cfi_def_cfa_offset 28
 11164              		@ sp needed
 11165 0058 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 11166              	.LVL827:
 11167              	.L839:
1498:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 345


 11168              		.loc 1 1498 1 view .LVU2939
 11169              		.align	2
 11170              	.L838:
 11171 005c 00000000 		.word	XromParams
 11172 0060 00000000 		.word	main_ram
 11173              		.cfi_endproc
 11174              	.LFE101:
 11176              		.section	.text.int_from_register,"ax",%progbits
 11177              		.align	1
 11178              		.p2align 2,,3
 11179              		.syntax unified
 11180              		.thumb
 11181              		.thumb_func
 11182              		.fpu fpv4-sp-d16
 11184              	int_from_register:
 11185              	.LVL828:
 11186              	.LFB99:
1454:src/xeq.c     **** 	int sgn;
 11187              		.loc 1 1454 48 is_stmt 1 view -0
 11188              		.cfi_startproc
 11189              		@ args = 0, pretend = 0, frame = 8
 11190              		@ frame_needed = 0, uses_anonymous_args = 0
1455:src/xeq.c     **** 	unsigned long long int val;
 11191              		.loc 1 1455 2 view .LVU2941
1456:src/xeq.c     **** 	
 11192              		.loc 1 1456 2 view .LVU2942
1458:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11193              		.loc 1 1458 2 view .LVU2943
1454:src/xeq.c     **** 	int sgn;
 11194              		.loc 1 1454 48 is_stmt 0 view .LVU2944
 11195 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 11196              		.cfi_def_cfa_offset 20
 11197              		.cfi_offset 4, -20
 11198              		.cfi_offset 5, -16
 11199              		.cfi_offset 6, -12
 11200              		.cfi_offset 7, -8
 11201              		.cfi_offset 14, -4
1458:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11202              		.loc 1 1458 14 view .LVU2945
 11203 0002 104D     		ldr	r5, .L842
 11204 0004 2B68     		ldr	r3, [r5]
 11205 0006 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1454:src/xeq.c     **** 	int sgn;
 11206              		.loc 1 1454 48 view .LVU2946
 11207 000a 85B0     		sub	sp, sp, #20
 11208              		.cfi_def_cfa_offset 40
1458:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11209              		.loc 1 1458 14 view .LVU2947
 11210 000c 6FF30002 		bfc	r2, #0, #1
1454:src/xeq.c     **** 	int sgn;
 11211              		.loc 1 1454 48 view .LVU2948
 11212 0010 0446     		mov	r4, r0
1458:src/xeq.c     **** 	val = get_reg_n_int_sgn(in, &sgn);
 11213              		.loc 1 1458 14 view .LVU2949
 11214 0012 83F8E827 		strb	r2, [r3, #2024]
1459:src/xeq.c     **** 
 11215              		.loc 1 1459 2 is_stmt 1 view .LVU2950
ARM GAS  /tmp/cc7LeJ71.s 			page 346


1459:src/xeq.c     **** 
 11216              		.loc 1 1459 8 is_stmt 0 view .LVU2951
 11217 0016 0846     		mov	r0, r1
 11218              	.LVL829:
1459:src/xeq.c     **** 
 11219              		.loc 1 1459 8 view .LVU2952
 11220 0018 03A9     		add	r1, sp, #12
 11221              	.LVL830:
1459:src/xeq.c     **** 
 11222              		.loc 1 1459 8 view .LVU2953
 11223 001a FFF7FEFF 		bl	get_reg_n_int_sgn
 11224              	.LVL831:
1459:src/xeq.c     **** 
 11225              		.loc 1 1459 8 view .LVU2954
 11226 001e 0F46     		mov	r7, r1
1461:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11227              		.loc 1 1461 14 view .LVU2955
 11228 0020 2968     		ldr	r1, [r5]
 11229 0022 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
 11230 0026 43F00103 		orr	r3, r3, #1
 11231 002a 81F8E837 		strb	r3, [r1, #2024]
1462:src/xeq.c     **** }
 11232              		.loc 1 1462 2 view .LVU2956
 11233 002e 039B     		ldr	r3, [sp, #12]
 11234 0030 0093     		str	r3, [sp]
1459:src/xeq.c     **** 
 11235              		.loc 1 1459 8 view .LVU2957
 11236 0032 0646     		mov	r6, r0
 11237              	.LVL832:
1461:src/xeq.c     **** 	set_reg_n_int_sgn(out, val, sgn);
 11238              		.loc 1 1461 2 is_stmt 1 view .LVU2958
1462:src/xeq.c     **** }
 11239              		.loc 1 1462 2 view .LVU2959
 11240 0034 3246     		mov	r2, r6
 11241 0036 2046     		mov	r0, r4
 11242 0038 3B46     		mov	r3, r7
 11243 003a FFF7FEFF 		bl	set_reg_n_int_sgn
 11244              	.LVL833:
1463:src/xeq.c     **** 
 11245              		.loc 1 1463 1 is_stmt 0 view .LVU2960
 11246 003e 05B0     		add	sp, sp, #20
 11247              		.cfi_def_cfa_offset 20
 11248              		@ sp needed
 11249 0040 F0BD     		pop	{r4, r5, r6, r7, pc}
 11250              	.LVL834:
 11251              	.L843:
1463:src/xeq.c     **** 
 11252              		.loc 1 1463 1 view .LVU2961
 11253 0042 00BF     		.align	2
 11254              	.L842:
 11255 0044 00000000 		.word	main_ram
 11256              		.cfi_endproc
 11257              	.LFE99:
 11259              		.section	.text.switch_to_int,"ax",%progbits
 11260              		.align	1
 11261              		.p2align 2,,3
 11262              		.syntax unified
ARM GAS  /tmp/cc7LeJ71.s 			page 347


 11263              		.thumb
 11264              		.thumb_func
 11265              		.fpu fpv4-sp-d16
 11267              	switch_to_int:
 11268              	.LFB208:
3738:src/xeq.c     **** 	int i;
 11269              		.loc 1 3738 33 is_stmt 1 view -0
 11270              		.cfi_startproc
 11271              		@ args = 0, pretend = 0, frame = 40
 11272              		@ frame_needed = 0, uses_anonymous_args = 0
3739:src/xeq.c     **** 	int mask = StackRegMask[UState.stack_depth];
 11273              		.loc 1 3739 2 view .LVU2963
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11274              		.loc 1 3740 2 view .LVU2964
3738:src/xeq.c     **** 	int i;
 11275              		.loc 1 3738 33 is_stmt 0 view .LVU2965
 11276 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 11277              		.cfi_def_cfa_offset 24
 11278              		.cfi_offset 4, -24
 11279              		.cfi_offset 5, -20
 11280              		.cfi_offset 6, -16
 11281              		.cfi_offset 7, -12
 11282              		.cfi_offset 8, -8
 11283              		.cfi_offset 14, -4
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11284              		.loc 1 3740 26 view .LVU2966
 11285 0004 DFF87480 		ldr	r8, .L852+4
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11286              		.loc 1 3740 25 view .LVU2967
 11287 0008 1B49     		ldr	r1, .L852
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11288              		.loc 1 3740 26 view .LVU2968
 11289 000a D8F80020 		ldr	r2, [r8]
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11290              		.loc 1 3740 32 view .LVU2969
 11291 000e 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 11292              	.LBB2179:
 11293              	.LBB2180:
1119:src/xeq.c     **** }
 11294              		.loc 1 1119 24 view .LVU2970
 11295 0012 B2F8E827 		ldrh	r2, [r2, #2024]
 11296              	.LBE2180:
 11297              	.LBE2179:
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11298              		.loc 1 3740 32 view .LVU2971
 11299 0016 C3F3C003 		ubfx	r3, r3, #3, #1
 11300              	.LBB2184:
 11301              	.LBB2181:
1119:src/xeq.c     **** }
 11302              		.loc 1 1119 24 view .LVU2972
 11303 001a 44F20106 		movw	r6, #16385
 11304              	.LBE2181:
 11305              	.LBE2184:
3740:src/xeq.c     **** 	const int dbl = is_dblmode();
 11306              		.loc 1 3740 6 view .LVU2973
 11307 001e 31F81350 		ldrh	r5, [r1, r3, lsl #1]
 11308              	.LVL835:
ARM GAS  /tmp/cc7LeJ71.s 			page 348


3741:src/xeq.c     **** 
 11309              		.loc 1 3741 2 is_stmt 1 view .LVU2974
 11310              	.LBB2185:
 11311              	.LBI2179:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 11312              		.loc 1 1118 5 view .LVU2975
 11313              	.LBB2182:
1119:src/xeq.c     **** }
 11314              		.loc 1 1119 2 view .LVU2976
 11315              	.LBE2182:
 11316              	.LBE2185:
3738:src/xeq.c     **** 	int i;
 11317              		.loc 1 3738 33 is_stmt 0 view .LVU2977
 11318 0022 8AB0     		sub	sp, sp, #40
 11319              		.cfi_def_cfa_offset 64
 11320              	.LBB2186:
 11321              	.LBB2183:
1119:src/xeq.c     **** }
 11322              		.loc 1 1119 24 view .LVU2978
 11323 0024 1640     		ands	r6, r6, r2
 11324              	.LVL836:
1119:src/xeq.c     **** }
 11325              		.loc 1 1119 24 view .LVU2979
 11326              	.LBE2183:
 11327              	.LBE2186:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11328              		.loc 1 3743 2 is_stmt 1 view .LVU2980
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11329              		.loc 1 3743 21 view .LVU2981
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11330              		.loc 1 3743 9 is_stmt 0 view .LVU2982
 11331 0026 6F24     		movs	r4, #111
 11332 0028 07E0     		b	.L847
 11333              	.LVL837:
 11334              	.L845:
3748:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11335              		.loc 1 3748 11 view .LVU2983
 11336 002a B6F5804F 		cmp	r6, #16384
 11337 002e 12D0     		beq	.L850
 11338              	.L846:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11339              		.loc 1 3743 36 is_stmt 1 discriminator 2 view .LVU2984
 11340 0030 013C     		subs	r4, r4, #1
 11341              	.LVL838:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11342              		.loc 1 3743 2 is_stmt 0 discriminator 2 view .LVU2985
 11343 0032 632C     		cmp	r4, #99
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11344              		.loc 1 3743 46 discriminator 2 view .LVU2986
 11345 0034 4FEA4505 		lsl	r5, r5, #1
 11346              	.LVL839:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11347              		.loc 1 3743 21 is_stmt 1 discriminator 2 view .LVU2987
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11348              		.loc 1 3743 2 is_stmt 0 discriminator 2 view .LVU2988
 11349 0038 0AD0     		beq	.L851
 11350              	.LVL840:
ARM GAS  /tmp/cc7LeJ71.s 			page 349


 11351              	.L847:
3744:src/xeq.c     **** 			// register belongs to stack
 11352              		.loc 1 3744 3 is_stmt 1 view .LVU2989
3748:src/xeq.c     **** 			// compress the other registers to save them while integer mode is active
 11353              		.loc 1 3748 8 view .LVU2990
3744:src/xeq.c     **** 			// register belongs to stack
 11354              		.loc 1 3744 6 is_stmt 0 view .LVU2991
 11355 003a 2B05     		lsls	r3, r5, #20
 11356 003c F5D5     		bpl	.L845
3746:src/xeq.c     **** 		}
 11357              		.loc 1 3746 4 is_stmt 1 view .LVU2992
 11358 003e 2146     		mov	r1, r4
 11359 0040 2046     		mov	r0, r4
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11360              		.loc 1 3743 36 is_stmt 0 view .LVU2993
 11361 0042 013C     		subs	r4, r4, #1
 11362              	.LVL841:
3746:src/xeq.c     **** 		}
 11363              		.loc 1 3746 4 view .LVU2994
 11364 0044 FFF7FEFF 		bl	int_from_register
 11365              	.LVL842:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11366              		.loc 1 3743 36 is_stmt 1 view .LVU2995
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11367              		.loc 1 3743 2 is_stmt 0 view .LVU2996
 11368 0048 632C     		cmp	r4, #99
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11369              		.loc 1 3743 46 view .LVU2997
 11370 004a 4FEA4505 		lsl	r5, r5, #1
 11371              	.LVL843:
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11372              		.loc 1 3743 21 is_stmt 1 view .LVU2998
3743:src/xeq.c     **** 		if (mask & 0x800) {
 11373              		.loc 1 3743 2 is_stmt 0 view .LVU2999
 11374 004e F4D1     		bne	.L847
 11375              	.L851:
3753:src/xeq.c     **** 
 11376              		.loc 1 3753 1 view .LVU3000
 11377 0050 0AB0     		add	sp, sp, #40
 11378              		.cfi_remember_state
 11379              		.cfi_def_cfa_offset 24
 11380              		@ sp needed
 11381 0052 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 11382              	.LVL844:
 11383              	.L850:
 11384              		.cfi_restore_state
3750:src/xeq.c     **** 		}
 11385              		.loc 1 3750 4 is_stmt 1 view .LVU3001
3750:src/xeq.c     **** 		}
 11386              		.loc 1 3750 26 is_stmt 0 view .LVU3002
 11387 0056 D8F80030 		ldr	r3, [r8]
3750:src/xeq.c     **** 		}
 11388              		.loc 1 3750 38 view .LVU3003
 11389 005a 2046     		mov	r0, r4
3750:src/xeq.c     **** 		}
 11390              		.loc 1 3750 26 view .LVU3004
 11391 005c 03F58663 		add	r3, r3, #1072
ARM GAS  /tmp/cc7LeJ71.s 			page 350


3750:src/xeq.c     **** 		}
 11392              		.loc 1 3750 4 view .LVU3005
 11393 0060 03EBC407 		add	r7, r3, r4, lsl #3
3750:src/xeq.c     **** 		}
 11394              		.loc 1 3750 38 view .LVU3006
 11395 0064 FFF7FEFF 		bl	get_reg_n
 11396              	.LVL845:
 11397              	.LBB2187:
 11398              	.LBI2187:
 648:src/xeq.c     **** 	decNumber temp;
 11399              		.loc 1 648 6 is_stmt 1 view .LVU3007
 11400              	.LBB2188:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 11401              		.loc 1 649 2 view .LVU3008
 650:src/xeq.c     **** }
 11402              		.loc 1 650 2 view .LVU3009
 650:src/xeq.c     **** }
 11403              		.loc 1 650 24 is_stmt 0 view .LVU3010
 11404 0068 01A9     		add	r1, sp, #4
 11405 006a FFF7FEFF 		bl	decimal128ToNumber
 11406              	.LVL846:
 650:src/xeq.c     **** }
 11407              		.loc 1 650 24 view .LVU3011
 11408 006e 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 11409              		.loc 1 650 2 view .LVU3012
 11410 0070 3846     		mov	r0, r7
 11411 0072 FFF7FEFF 		bl	packed_from_number
 11412              	.LVL847:
 651:src/xeq.c     **** 
 11413              		.loc 1 651 1 view .LVU3013
 11414 0076 DBE7     		b	.L846
 11415              	.L853:
 11416              		.align	2
 11417              	.L852:
 11418 0078 00000000 		.word	.LANCHOR3
 11419 007c 00000000 		.word	main_ram
 11420              	.LBE2188:
 11421              	.LBE2187:
 11422              		.cfi_endproc
 11423              	.LFE208:
 11425              		.section	.text.process_cmdline.part.0,"ax",%progbits
 11426              		.align	1
 11427              		.p2align 2,,3
 11428              		.syntax unified
 11429              		.thumb
 11430              		.thumb_func
 11431              		.fpu fpv4-sp-d16
 11433              	process_cmdline.part.0:
 11434              	.LFB289:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 11435              		.loc 1 1226 6 is_stmt 1 view -0
 11436              		.cfi_startproc
 11437              		@ args = 0, pretend = 0, frame = 168
 11438              		@ frame_needed = 0, uses_anonymous_args = 0
 11439              	.LBB2211:
1230:src/xeq.c     **** 		const unsigned int cmdlinedot = CmdLineDot;
ARM GAS  /tmp/cc7LeJ71.s 			page 351


 11440              		.loc 1 1230 3 view .LVU3015
 11441              	.LBE2211:
1221:src/xeq.c     **** }
 11442              		.loc 1 1221 2 view .LVU3016
 11443              	.LVL848:
 11444              	.LBB2255:
1231:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11445              		.loc 1 1231 3 view .LVU3017
 11446              	.LBE2255:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 11447              		.loc 1 1226 6 is_stmt 0 view .LVU3018
 11448 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 11449              		.cfi_def_cfa_offset 32
 11450              		.cfi_offset 4, -32
 11451              		.cfi_offset 5, -28
 11452              		.cfi_offset 6, -24
 11453              		.cfi_offset 7, -20
 11454              		.cfi_offset 8, -16
 11455              		.cfi_offset 9, -12
 11456              		.cfi_offset 10, -8
 11457              		.cfi_offset 14, -4
 11458              	.LBB2256:
1231:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11459              		.loc 1 1231 35 view .LVU3019
 11460 0004 8D4C     		ldr	r4, .L893
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11461              		.loc 1 1241 7 view .LVU3020
 11462 0006 DFF84482 		ldr	r8, .L893+16
1231:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11463              		.loc 1 1231 22 view .LVU3021
 11464 000a A57F     		ldrb	r5, [r4, #30]	@ zero_extendqisi2
 11465              	.LVL849:
1233:src/xeq.c     **** #else
 11466              		.loc 1 1233 3 is_stmt 1 view .LVU3022
1238:src/xeq.c     **** 
 11467              		.loc 1 1238 3 view .LVU3023
 11468              	.LBE2256:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 11469              		.loc 1 1226 6 is_stmt 0 view .LVU3024
 11470 000c ACB0     		sub	sp, sp, #176
 11471              		.cfi_def_cfa_offset 208
 11472              	.LBB2257:
1238:src/xeq.c     **** 
 11473              		.loc 1 1238 3 view .LVU3025
 11474 000e 04F12001 		add	r1, r4, #32
 11475 0012 1422     		movs	r2, #20
 11476 0014 02A8     		add	r0, sp, #8
 11477 0016 FFF7FEFF 		bl	xcopy
 11478              	.LVL850:
1240:src/xeq.c     **** 		if (!is_intmode()) {
 11479              		.loc 1 1240 3 is_stmt 1 view .LVU3026
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11480              		.loc 1 1241 7 is_stmt 0 view .LVU3027
 11481 001a D8F80020 		ldr	r2, [r8]
1240:src/xeq.c     **** 		if (!is_intmode()) {
 11482              		.loc 1 1240 11 view .LVU3028
 11483 001e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
ARM GAS  /tmp/cc7LeJ71.s 			page 352


1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11484              		.loc 1 1241 7 view .LVU3029
 11485 0020 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1240:src/xeq.c     **** 		if (!is_intmode()) {
 11486              		.loc 1 1240 26 view .LVU3030
 11487 0024 2CA9     		add	r1, sp, #176
 11488 0026 1944     		add	r1, r1, r3
 11489 0028 0020     		movs	r0, #0
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11490              		.loc 1 1241 6 view .LVU3031
 11491 002a 12F00102 		ands	r2, r2, #1
1240:src/xeq.c     **** 		if (!is_intmode()) {
 11492              		.loc 1 1240 26 view .LVU3032
 11493 002e 01F8A80C 		strb	r0, [r1, #-168]
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11494              		.loc 1 1241 3 is_stmt 1 view .LVU3033
1241:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 11495              		.loc 1 1241 6 is_stmt 0 view .LVU3034
 11496 0032 16D1     		bne	.L856
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11497              		.loc 1 1243 4 is_stmt 1 view .LVU3035
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11498              		.loc 1 1243 15 is_stmt 0 view .LVU3036
 11499 0034 2CA9     		add	r1, sp, #176
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11500              		.loc 1 1243 29 view .LVU3037
 11501 0036 013B     		subs	r3, r3, #1
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11502              		.loc 1 1243 15 view .LVU3038
 11503 0038 0B44     		add	r3, r3, r1
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11504              		.loc 1 1243 40 view .LVU3039
 11505 003a 13F8A81C 		ldrb	r1, [r3, #-168]	@ zero_extendqisi2
1243:src/xeq.c     **** 				cmdline[CmdLineLength-1] = '\0';
 11506              		.loc 1 1243 7 view .LVU3040
 11507 003e 4439     		subs	r1, r1, #68
 11508 0040 0129     		cmp	r1, #1
 11509 0042 40F28B80 		bls	.L884
1245:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11510              		.loc 1 1245 9 is_stmt 1 view .LVU3041
1245:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11511              		.loc 1 1245 21 is_stmt 0 view .LVU3042
 11512 0046 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1245:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11513              		.loc 1 1245 20 view .LVU3043
 11514 0048 2CAB     		add	r3, sp, #176
 11515 004a 1344     		add	r3, r3, r2
1245:src/xeq.c     **** 				xcopy(cmdline + CmdLineEex + 2, cmdline + CmdLineEex + 1, CMDLINELEN - 1 - CmdLineEex);
 11516              		.loc 1 1245 12 view .LVU3044
 11517 004c 13F8A83C 		ldrb	r3, [r3, #-168]	@ zero_extendqisi2
 11518 0050 442B     		cmp	r3, #68
 11519 0052 00F0D080 		beq	.L885
 11520              	.L858:
1256:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11521              		.loc 1 1256 4 is_stmt 1 view .LVU3045
1256:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11522              		.loc 1 1256 7 is_stmt 0 view .LVU3046
ARM GAS  /tmp/cc7LeJ71.s 			page 353


 11523 0056 002A     		cmp	r2, #0
 11524 0058 40F08680 		bne	.L859
 11525              	.L890:
1261:src/xeq.c     **** #endif
 11526              		.loc 1 1261 8 view .LVU3047
 11527 005c 012D     		cmp	r5, #1
 11528 005e 00F08380 		beq	.L859
 11529              	.L856:
1266:src/xeq.c     **** 		lift_if_enabled();
 11530              		.loc 1 1266 3 is_stmt 1 view .LVU3048
 11531              	.LBB2212:
 11532              	.LBB2213:
 11533              	.LBB2214:
 11534              	.LBB2215:
 744:src/xeq.c     **** }
 11535              		.loc 1 744 15 is_stmt 0 view .LVU3049
 11536 0062 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11537              	.LBE2215:
 11538              	.LBE2214:
 11539              	.LBE2213:
 11540              	.LBE2212:
1266:src/xeq.c     **** 		lift_if_enabled();
 11541              		.loc 1 1266 17 view .LVU3050
 11542 0064 0022     		movs	r2, #0
 11543              	.LBB2227:
 11544              	.LBB2222:
 748:src/xeq.c     **** 		lift();
 11545              		.loc 1 748 5 view .LVU3051
 11546 0066 5B06     		lsls	r3, r3, #25
 11547              	.LBE2222:
 11548              	.LBE2227:
1266:src/xeq.c     **** 		lift_if_enabled();
 11549              		.loc 1 1266 17 view .LVU3052
 11550 0068 2277     		strb	r2, [r4, #28]
1267:src/xeq.c     **** 		set_lift();
 11551              		.loc 1 1267 3 is_stmt 1 view .LVU3053
 11552              	.LBB2228:
 11553              	.LBI2212:
 747:src/xeq.c     **** 	if (get_lift())
 11554              		.loc 1 747 6 view .LVU3054
 11555              	.LBB2223:
 748:src/xeq.c     **** 		lift();
 11556              		.loc 1 748 2 view .LVU3055
 11557              	.LBB2219:
 11558              	.LBI2214:
 743:src/xeq.c     **** 	return State2.state_lift;
 11559              		.loc 1 743 12 view .LVU3056
 11560              	.LBB2216:
 744:src/xeq.c     **** }
 11561              		.loc 1 744 2 view .LVU3057
 11562              	.LBE2216:
 11563              	.LBE2219:
 748:src/xeq.c     **** 		lift();
 11564              		.loc 1 748 5 is_stmt 0 view .LVU3058
 11565 006a 00F18B80 		bmi	.L886
 11566              	.L861:
 11567              	.LBE2223:
ARM GAS  /tmp/cc7LeJ71.s 			page 354


 11568              	.LBE2228:
1268:src/xeq.c     **** 		CmdLineDot = 0;
 11569              		.loc 1 1268 3 is_stmt 1 view .LVU3059
 11570              	.LBB2229:
 11571              	.LBI2229:
 767:src/xeq.c     ****     State2.state_lift = 1;
 11572              		.loc 1 767 6 view .LVU3060
 11573              	.LBB2230:
 768:src/xeq.c     **** }
 11574              		.loc 1 768 5 view .LVU3061
 768:src/xeq.c     **** }
 11575              		.loc 1 768 23 is_stmt 0 view .LVU3062
 11576 006e E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11577              	.LBE2230:
 11578              	.LBE2229:
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11579              		.loc 1 1271 7 view .LVU3063
 11580 0070 D8F80010 		ldr	r1, [r8]
 11581              	.LBB2232:
 11582              	.LBB2231:
 768:src/xeq.c     **** }
 11583              		.loc 1 768 23 view .LVU3064
 11584 0074 43F04003 		orr	r3, r3, #64
 11585 0078 E375     		strb	r3, [r4, #23]
 11586              	.LBE2231:
 11587              	.LBE2232:
1269:src/xeq.c     **** 		CmdLineEex = 0;
 11588              		.loc 1 1269 3 is_stmt 1 view .LVU3065
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11589              		.loc 1 1271 7 is_stmt 0 view .LVU3066
 11590 007a 91F8E837 		ldrb	r3, [r1, #2024]	@ zero_extendqisi2
1269:src/xeq.c     **** 		CmdLineEex = 0;
 11591              		.loc 1 1269 14 view .LVU3067
 11592 007e 0022     		movs	r2, #0
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11593              		.loc 1 1271 6 view .LVU3068
 11594 0080 13F00103 		ands	r3, r3, #1
1269:src/xeq.c     **** 		CmdLineEex = 0;
 11595              		.loc 1 1269 14 view .LVU3069
 11596 0084 A277     		strb	r2, [r4, #30]
1270:src/xeq.c     **** 		if (is_intmode()) {
 11597              		.loc 1 1270 3 is_stmt 1 view .LVU3070
1270:src/xeq.c     **** 		if (is_intmode()) {
 11598              		.loc 1 1270 14 is_stmt 0 view .LVU3071
 11599 0086 6277     		strb	r2, [r4, #29]
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11600              		.loc 1 1271 3 is_stmt 1 view .LVU3072
1271:src/xeq.c     **** 			const int sgn = (cmdline[0] == '-')?1:0;
 11601              		.loc 1 1271 6 is_stmt 0 view .LVU3073
 11602 0088 7FD1     		bne	.L887
1275:src/xeq.c     **** 			char *d0, *d1, *d2;
 11603              		.loc 1 1275 10 is_stmt 1 view .LVU3074
1275:src/xeq.c     **** 			char *d0, *d1, *d2;
 11604              		.loc 1 1275 13 is_stmt 0 view .LVU3075
 11605 008a 022D     		cmp	r5, #2
 11606 008c 4CD1     		bne	.L868
 11607              	.LBB2233:
ARM GAS  /tmp/cc7LeJ71.s 			page 355


1276:src/xeq.c     **** 			int neg;
 11608              		.loc 1 1276 4 is_stmt 1 view .LVU3076
1277:src/xeq.c     **** 
 11609              		.loc 1 1277 4 view .LVU3077
1279:src/xeq.c     **** 				return;
 11610              		.loc 1 1279 4 view .LVU3078
1282:src/xeq.c     **** #endif
 11611              		.loc 1 1282 4 view .LVU3079
1282:src/xeq.c     **** #endif
 11612              		.loc 1 1282 17 is_stmt 0 view .LVU3080
 11613 008e 91F8E627 		ldrb	r2, [r1, #2022]	@ zero_extendqisi2
 11614 0092 42F02002 		orr	r2, r2, #32
 11615 0096 81F8E627 		strb	r2, [r1, #2022]
1284:src/xeq.c     **** 				neg = 1;
 11616              		.loc 1 1284 4 is_stmt 1 view .LVU3081
1284:src/xeq.c     **** 				neg = 1;
 11617              		.loc 1 1284 7 is_stmt 0 view .LVU3082
 11618 009a 9DF80820 		ldrb	r2, [sp, #8]	@ zero_extendqisi2
 11619 009e 2D2A     		cmp	r2, #45
1289:src/xeq.c     **** 			}
 11620              		.loc 1 1289 8 view .LVU3083
 11621 00a0 14BF     		ite	ne
 11622 00a2 02AD     		addne	r5, sp, #8
 11623              	.LVL851:
1286:src/xeq.c     **** 			} else {
 11624              		.loc 1 1286 8 view .LVU3084
 11625 00a4 0DF10905 		addeq	r5, sp, #9
1291:src/xeq.c     **** 			*d1++ = '\0';
 11626              		.loc 1 1291 9 view .LVU3085
 11627 00a8 4FF02E01 		mov	r1, #46
 11628 00ac 2846     		mov	r0, r5
1288:src/xeq.c     **** 				d0 = cmdline;
 11629              		.loc 1 1288 9 view .LVU3086
 11630 00ae 14BF     		ite	ne
 11631 00b0 1C46     		movne	r4, r3
1285:src/xeq.c     **** 				d0 = cmdline+1;
 11632              		.loc 1 1285 9 view .LVU3087
 11633 00b2 0124     		moveq	r4, #1
 11634              	.LVL852:
1291:src/xeq.c     **** 			*d1++ = '\0';
 11635              		.loc 1 1291 4 is_stmt 1 view .LVU3088
1291:src/xeq.c     **** 			*d1++ = '\0';
 11636              		.loc 1 1291 9 is_stmt 0 view .LVU3089
 11637 00b4 FFF7FEFF 		bl	find_char
 11638              	.LVL853:
1292:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11639              		.loc 1 1292 4 is_stmt 1 view .LVU3090
1292:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11640              		.loc 1 1292 10 is_stmt 0 view .LVU3091
 11641 00b8 8146     		mov	r9, r0
 11642 00ba 4FF0000A 		mov	r10, #0
1292:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11643              		.loc 1 1292 7 view .LVU3092
 11644 00be 461C     		adds	r6, r0, #1
 11645              	.LVL854:
1292:src/xeq.c     **** 			d2 = find_char(d1, '.');
 11646              		.loc 1 1292 10 view .LVU3093
ARM GAS  /tmp/cc7LeJ71.s 			page 356


 11647 00c0 09F802AB 		strb	r10, [r9], #2
1293:src/xeq.c     **** 			*d2++ = '\0';
 11648              		.loc 1 1293 4 is_stmt 1 view .LVU3094
1293:src/xeq.c     **** 			*d2++ = '\0';
 11649              		.loc 1 1293 9 is_stmt 0 view .LVU3095
 11650 00c4 2E21     		movs	r1, #46
 11651 00c6 3046     		mov	r0, r6
 11652 00c8 FFF7FEFF 		bl	find_char
 11653              	.LVL855:
1294:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11654              		.loc 1 1294 4 is_stmt 1 view .LVU3096
1294:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11655              		.loc 1 1294 7 is_stmt 0 view .LVU3097
 11656 00cc 0746     		mov	r7, r0
 11657              	.LVL856:
1295:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11658              		.loc 1 1295 4 view .LVU3098
 11659 00ce 5C4A     		ldr	r2, .L893+4
1294:src/xeq.c     **** 			decNumberFromString(&b, d2, &Ctx);
 11660              		.loc 1 1294 10 view .LVU3099
 11661 00d0 07F801AB 		strb	r10, [r7], #1
 11662              	.LVL857:
1295:src/xeq.c     **** 			decNumberFromString(&x, d0, &Ctx);
 11663              		.loc 1 1295 4 is_stmt 1 view .LVU3100
 11664 00d4 11A8     		add	r0, sp, #68
 11665 00d6 3946     		mov	r1, r7
 11666 00d8 FFF7FEFF 		bl	decNumberFromString
 11667              	.LVL858:
1296:src/xeq.c     **** #if defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11668              		.loc 1 1296 4 view .LVU3101
 11669 00dc 2946     		mov	r1, r5
 11670 00de 584A     		ldr	r2, .L893+4
 11671 00e0 1AA8     		add	r0, sp, #104
 11672 00e2 FFF7FEFF 		bl	decNumberFromString
 11673              	.LVL859:
1298:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11674              		.loc 1 1298 4 view .LVU3102
1298:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11675              		.loc 1 1298 7 is_stmt 0 view .LVU3103
 11676 00e6 4F45     		cmp	r7, r9
1299:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 11677              		.loc 1 1299 5 view .LVU3104
 11678 00e8 08AD     		add	r5, sp, #32
 11679              	.LVL860:
1298:src/xeq.c     **** 				decNumberCopy(&a, &x); // put x (integer part) into a (numerator) ...
 11680              		.loc 1 1298 7 view .LVU3105
 11681 00ea 00F09780 		beq	.L888
1308:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 16) && defined(INCLUDE_DOUBLEDOT_FRACTIONS)
 11682              		.loc 1 1308 5 is_stmt 1 view .LVU3106
 11683 00ee 544A     		ldr	r2, .L893+4
 11684 00f0 3146     		mov	r1, r6
 11685 00f2 2846     		mov	r0, r5
 11686 00f4 FFF7FEFF 		bl	decNumberFromString
 11687              	.LVL861:
1310:src/xeq.c     **** #endif
 11688              		.loc 1 1310 5 view .LVU3107
1310:src/xeq.c     **** #endif
ARM GAS  /tmp/cc7LeJ71.s 			page 357


 11689              		.loc 1 1310 25 is_stmt 0 view .LVU3108
 11690 00f8 D8F80030 		ldr	r3, [r8]
 11691 00fc 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11692 0100 6AF30412 		bfi	r2, r10, #4, #1
 11693 0104 83F8E627 		strb	r2, [r3, #2022]
 11694              	.L871:
1313:src/xeq.c     **** #ifdef IGNORE_INVALID_FRACTIONS
 11695              		.loc 1 1313 4 is_stmt 1 view .LVU3109
 11696 0108 11AA     		add	r2, sp, #68
 11697 010a 2946     		mov	r1, r5
 11698 010c 23A8     		add	r0, sp, #140
 11699 010e FFF7FEFF 		bl	dn_divide
 11700              	.LVL862:
1315:src/xeq.c     **** #endif
 11701              		.loc 1 1315 4 view .LVU3110
1315:src/xeq.c     **** #endif
 11702              		.loc 1 1315 7 is_stmt 0 view .LVU3111
 11703 0112 9DF89430 		ldrb	r3, [sp, #148]	@ zero_extendqisi2
 11704 0116 13F0700F 		tst	r3, #112
 11705 011a 64D0     		beq	.L889
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11706              		.loc 1 1318 4 is_stmt 1 view .LVU3112
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11707              		.loc 1 1318 7 is_stmt 0 view .LVU3113
 11708 011c 4CB1     		cbz	r4, .L883
 11709              	.L892:
1319:src/xeq.c     **** 			setX(&x);
 11710              		.loc 1 1319 5 is_stmt 1 view .LVU3114
 11711 011e 1AA9     		add	r1, sp, #104
 11712 0120 0846     		mov	r0, r1
 11713 0122 FFF7FEFF 		bl	dn_minus
 11714              	.LVL863:
1320:src/xeq.c     **** 		} else {
 11715              		.loc 1 1320 4 view .LVU3115
 11716              	.LBB2234:
 11717              	.LBI2234:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 11718              		.loc 1 828 6 view .LVU3116
 11719              	.LBB2235:
 829:src/xeq.c     **** }
 11720              		.loc 1 829 2 view .LVU3117
 11721 0126 04E0     		b	.L883
 11722              	.LVL864:
 11723              	.L868:
 829:src/xeq.c     **** }
 11724              		.loc 1 829 2 is_stmt 0 view .LVU3118
 11725              	.LBE2235:
 11726              	.LBE2234:
 11727              	.LBE2233:
1322:src/xeq.c     **** 			setX(&x);
 11728              		.loc 1 1322 4 is_stmt 1 view .LVU3119
 11729 0128 454A     		ldr	r2, .L893+4
 11730 012a 02A9     		add	r1, sp, #8
 11731 012c 1AA8     		add	r0, sp, #104
 11732 012e FFF7FEFF 		bl	decNumberFromString
 11733              	.LVL865:
 11734              	.L883:
ARM GAS  /tmp/cc7LeJ71.s 			page 358


1323:src/xeq.c     **** 		}
 11735              		.loc 1 1323 4 view .LVU3120
 11736              	.LBB2236:
 11737              	.LBI2236:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 11738              		.loc 1 828 6 view .LVU3121
 11739              	.LBB2237:
 829:src/xeq.c     **** }
 11740              		.loc 1 829 2 view .LVU3122
 11741 0132 1AA9     		add	r1, sp, #104
 11742              	.LVL866:
 829:src/xeq.c     **** }
 11743              		.loc 1 829 2 is_stmt 0 view .LVU3123
 11744 0134 6420     		movs	r0, #100
 11745 0136 FFF7FEFF 		bl	setRegister
 11746              	.LVL867:
 11747              	.L867:
 829:src/xeq.c     **** }
 11748              		.loc 1 829 2 view .LVU3124
 11749              	.LBE2237:
 11750              	.LBE2236:
1325:src/xeq.c     **** #ifndef DM42
 11751              		.loc 1 1325 3 is_stmt 1 view .LVU3125
 11752              	.LBB2238:
 11753              	.LBI2238:
3911:src/xeq.c     **** 	if (!Running && !XromRunning)
 11754              		.loc 1 3911 6 view .LVU3126
 11755              	.LBB2239:
3912:src/xeq.c     **** 		State.entryp = 1;
 11756              		.loc 1 3912 2 view .LVU3127
 11757              	.LBB2240:
 11758              	.LBI2240:
3911:src/xeq.c     **** 	if (!Running && !XromRunning)
 11759              		.loc 1 3911 6 view .LVU3128
 11760              	.LBE2240:
3912:src/xeq.c     **** 		State.entryp = 1;
 11761              		.loc 1 3912 6 is_stmt 0 view .LVU3129
 11762 013a 424A     		ldr	r2, .L893+8
 11763              	.LBB2242:
 11764              	.LBB2241:
3912:src/xeq.c     **** 		State.entryp = 1;
 11765              		.loc 1 3912 18 view .LVU3130
 11766 013c 424B     		ldr	r3, .L893+12
3912:src/xeq.c     **** 		State.entryp = 1;
 11767              		.loc 1 3912 15 view .LVU3131
 11768 013e 1268     		ldr	r2, [r2]
 11769 0140 1B68     		ldr	r3, [r3]
 11770 0142 1343     		orrs	r3, r2, r3
 11771 0144 07D1     		bne	.L854
3913:src/xeq.c     **** }
 11772              		.loc 1 3913 3 is_stmt 1 view .LVU3132
3913:src/xeq.c     **** }
 11773              		.loc 1 3913 16 is_stmt 0 view .LVU3133
 11774 0146 D8F80020 		ldr	r2, [r8]
 11775 014a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 11776 014e 43F01003 		orr	r3, r3, #16
 11777 0152 82F8DD37 		strb	r3, [r2, #2013]
ARM GAS  /tmp/cc7LeJ71.s 			page 359


 11778              	.L854:
 11779              	.LBE2241:
 11780              	.LBE2242:
 11781              	.LBE2239:
 11782              	.LBE2238:
 11783              	.LBE2257:
1330:src/xeq.c     **** 
 11784              		.loc 1 1330 1 view .LVU3134
 11785 0156 2CB0     		add	sp, sp, #176
 11786              		.cfi_remember_state
 11787              		.cfi_def_cfa_offset 32
 11788              		@ sp needed
 11789 0158 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 11790              	.LVL868:
 11791              	.L884:
 11792              		.cfi_restore_state
 11793              	.LBB2258:
1244:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11794              		.loc 1 1244 5 is_stmt 1 view .LVU3135
1244:src/xeq.c     **** 			else if (cmdline[CmdLineEex] == 'D') {
 11795              		.loc 1 1244 30 is_stmt 0 view .LVU3136
 11796 015c 03F8A82C 		strb	r2, [r3, #-168]
 11797 0160 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1256:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11798              		.loc 1 1256 4 is_stmt 1 view .LVU3137
1256:src/xeq.c     **** #if (FRACTION_MODE_INPUT & 3) == 3
 11799              		.loc 1 1256 7 is_stmt 0 view .LVU3138
 11800 0162 002A     		cmp	r2, #0
 11801 0164 3FF47AAF 		beq	.L890
 11802              	.L859:
1264:src/xeq.c     **** 		}
 11803              		.loc 1 1264 5 is_stmt 1 view .LVU3139
1264:src/xeq.c     **** 		}
 11804              		.loc 1 1264 18 is_stmt 0 view .LVU3140
 11805 0168 D8F80030 		ldr	r3, [r8]
 11806 016c 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 11807 0170 6FF34512 		bfc	r2, #5, #1
 11808 0174 83F8E627 		strb	r2, [r3, #2022]
1266:src/xeq.c     **** 		lift_if_enabled();
 11809              		.loc 1 1266 3 is_stmt 1 view .LVU3141
 11810              	.LBB2243:
 11811              	.LBB2224:
 11812              	.LBB2220:
 11813              	.LBB2217:
 744:src/xeq.c     **** }
 11814              		.loc 1 744 15 is_stmt 0 view .LVU3142
 11815 0178 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 11816              	.LBE2217:
 11817              	.LBE2220:
 11818              	.LBE2224:
 11819              	.LBE2243:
1266:src/xeq.c     **** 		lift_if_enabled();
 11820              		.loc 1 1266 17 view .LVU3143
 11821 017a 0022     		movs	r2, #0
 11822              	.LBB2244:
 11823              	.LBB2225:
 748:src/xeq.c     **** 		lift();
ARM GAS  /tmp/cc7LeJ71.s 			page 360


 11824              		.loc 1 748 5 view .LVU3144
 11825 017c 5B06     		lsls	r3, r3, #25
 11826              	.LBE2225:
 11827              	.LBE2244:
1266:src/xeq.c     **** 		lift_if_enabled();
 11828              		.loc 1 1266 17 view .LVU3145
 11829 017e 2277     		strb	r2, [r4, #28]
1267:src/xeq.c     **** 		set_lift();
 11830              		.loc 1 1267 3 is_stmt 1 view .LVU3146
 11831              	.LBB2245:
 747:src/xeq.c     **** 	if (get_lift())
 11832              		.loc 1 747 6 view .LVU3147
 11833              	.LBB2226:
 748:src/xeq.c     **** 		lift();
 11834              		.loc 1 748 2 view .LVU3148
 11835              	.LBB2221:
 743:src/xeq.c     **** 	return State2.state_lift;
 11836              		.loc 1 743 12 view .LVU3149
 11837              	.LBB2218:
 744:src/xeq.c     **** }
 11838              		.loc 1 744 2 view .LVU3150
 11839              	.LBE2218:
 11840              	.LBE2221:
 748:src/xeq.c     **** 		lift();
 11841              		.loc 1 748 5 is_stmt 0 view .LVU3151
 11842 0180 7FF575AF 		bpl	.L861
 11843              	.L886:
 749:src/xeq.c     **** }
 11844              		.loc 1 749 3 is_stmt 1 view .LVU3152
 11845 0184 FFF7FEFF 		bl	lift
 11846              	.LVL869:
 11847 0188 71E7     		b	.L861
 11848              	.L887:
 11849              	.LBE2226:
 11850              	.LBE2245:
 11851              	.LBB2246:
1272:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11852              		.loc 1 1272 4 view .LVU3153
1272:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11853              		.loc 1 1272 41 is_stmt 0 view .LVU3154
 11854 018a 9DF80890 		ldrb	r9, [sp, #8]	@ zero_extendqisi2
 11855 018e A9F12D09 		sub	r9, r9, #45
 11856 0192 B9FA89F9 		clz	r9, r9
1273:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11857              		.loc 1 1273 31 view .LVU3155
 11858 0196 FFF7FEFF 		bl	int_base
 11859              	.LVL870:
1272:src/xeq.c     **** 			unsigned long long int x = s_to_ull(cmdline+sgn, int_base());
 11860              		.loc 1 1272 41 view .LVU3156
 11861 019a 4FEA5919 		lsr	r9, r9, #5
 11862              	.LVL871:
1273:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11863              		.loc 1 1273 4 is_stmt 1 view .LVU3157
1273:src/xeq.c     **** 			setX_int_sgn(x, sgn);
 11864              		.loc 1 1273 31 is_stmt 0 view .LVU3158
 11865 019e 02AB     		add	r3, sp, #8
 11866 01a0 03EB0902 		add	r2, r3, r9
ARM GAS  /tmp/cc7LeJ71.s 			page 361


 11867              	.LVL872:
 11868              	.LBB2247:
 11869              	.LBI2247:
1157:src/xeq.c     **** 	unsigned long long int x = 0;
 11870              		.loc 1 1157 24 is_stmt 1 view .LVU3159
 11871              	.LBB2248:
1158:src/xeq.c     **** 
 11872              		.loc 1 1158 2 view .LVU3160
1158:src/xeq.c     **** 
 11873              		.loc 1 1158 25 is_stmt 0 view .LVU3161
 11874 01a4 0026     		movs	r6, #0
 11875 01a6 0027     		movs	r7, #0
 11876 01a8 02E0     		b	.L866
 11877              	.LVL873:
 11878              	.L891:
 11879              	.LBB2249:
1172:src/xeq.c     **** 	}
 11880              		.loc 1 1172 5 view .LVU3162
 11881 01aa E618     		adds	r6, r4, r3
 11882              	.LVL874:
1172:src/xeq.c     **** 	}
 11883              		.loc 1 1172 5 view .LVU3163
 11884 01ac 45F10007 		adc	r7, r5, #0
 11885              	.LVL875:
1172:src/xeq.c     **** 	}
 11886              		.loc 1 1172 5 view .LVU3164
 11887              	.LBE2249:
1160:src/xeq.c     **** 		unsigned int n;
 11888              		.loc 1 1160 8 is_stmt 1 view .LVU3165
 11889              	.L866:
1160:src/xeq.c     **** 		unsigned int n;
 11890              		.loc 1 1160 2 view .LVU3166
 11891              	.LBB2250:
1161:src/xeq.c     **** 		const char c = *s++;
 11892              		.loc 1 1161 3 view .LVU3167
1162:src/xeq.c     **** 
 11893              		.loc 1 1162 3 view .LVU3168
1165:src/xeq.c     **** 		else if (c >= 'A' && c <= 'F')
 11894              		.loc 1 1165 4 view .LVU3169
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 11895              		.loc 1 1166 8 view .LVU3170
1167:src/xeq.c     **** 		else
 11896              		.loc 1 1167 4 view .LVU3171
1162:src/xeq.c     **** 
 11897              		.loc 1 1162 14 is_stmt 0 view .LVU3172
 11898 01b0 12F8011B 		ldrb	r1, [r2], #1	@ zero_extendqisi2
 11899              	.LVL876:
1164:src/xeq.c     **** 			n = c - '0';
 11900              		.loc 1 1164 3 is_stmt 1 view .LVU3173
1164:src/xeq.c     **** 			n = c - '0';
 11901              		.loc 1 1164 16 is_stmt 0 view .LVU3174
 11902 01b4 A1F13003 		sub	r3, r1, #48
1164:src/xeq.c     **** 			n = c - '0';
 11903              		.loc 1 1164 6 view .LVU3175
 11904 01b8 DCB2     		uxtb	r4, r3
 11905 01ba 092C     		cmp	r4, #9
1166:src/xeq.c     **** 			n = c - 'A' + 10;
ARM GAS  /tmp/cc7LeJ71.s 			page 362


 11906              		.loc 1 1166 11 view .LVU3176
 11907 01bc A1F14105 		sub	r5, r1, #65
1164:src/xeq.c     **** 			n = c - '0';
 11908              		.loc 1 1164 6 view .LVU3177
 11909 01c0 03D9     		bls	.L864
1166:src/xeq.c     **** 			n = c - 'A' + 10;
 11910              		.loc 1 1166 11 view .LVU3178
 11911 01c2 052D     		cmp	r5, #5
 11912 01c4 07D8     		bhi	.L865
1167:src/xeq.c     **** 		else
 11913              		.loc 1 1167 16 view .LVU3179
 11914 01c6 A1F13703 		sub	r3, r1, #55
 11915              	.LVL877:
 11916              	.L864:
1170:src/xeq.c     **** 			break;
 11917              		.loc 1 1170 3 is_stmt 1 view .LVU3180
1172:src/xeq.c     **** 	}
 11918              		.loc 1 1172 3 view .LVU3181
1172:src/xeq.c     **** 	}
 11919              		.loc 1 1172 9 is_stmt 0 view .LVU3182
 11920 01ca A0FB0645 		umull	r4, r5, r0, r6
1170:src/xeq.c     **** 			break;
 11921              		.loc 1 1170 6 view .LVU3183
 11922 01ce 9842     		cmp	r0, r3
1172:src/xeq.c     **** 	}
 11923              		.loc 1 1172 9 view .LVU3184
 11924 01d0 00FB0755 		mla	r5, r0, r7, r5
1170:src/xeq.c     **** 			break;
 11925              		.loc 1 1170 6 view .LVU3185
 11926 01d4 E9D8     		bhi	.L891
 11927              	.LVL878:
 11928              	.L865:
1170:src/xeq.c     **** 			break;
 11929              		.loc 1 1170 6 view .LVU3186
 11930              	.LBE2250:
1174:src/xeq.c     **** }
 11931              		.loc 1 1174 2 is_stmt 1 view .LVU3187
1174:src/xeq.c     **** }
 11932              		.loc 1 1174 2 is_stmt 0 view .LVU3188
 11933              	.LBE2248:
 11934              	.LBE2247:
1274:src/xeq.c     **** 		} else if (cmdlinedot == 2) {
 11935              		.loc 1 1274 4 is_stmt 1 view .LVU3189
 11936              	.LBB2251:
 11937              	.LBI2251:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 11938              		.loc 1 1509 6 view .LVU3190
 11939              	.LBB2252:
1510:src/xeq.c     **** }
 11940              		.loc 1 1510 2 view .LVU3191
 11941 01d6 CDF80090 		str	r9, [sp]
 11942 01da 3246     		mov	r2, r6
 11943 01dc 3B46     		mov	r3, r7
 11944 01de 6420     		movs	r0, #100
 11945 01e0 FFF7FEFF 		bl	set_reg_n_int_sgn
 11946              	.LVL879:
1511:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 363


 11947              		.loc 1 1511 1 is_stmt 0 view .LVU3192
 11948 01e4 A9E7     		b	.L867
 11949              	.LVL880:
 11950              	.L889:
1511:src/xeq.c     **** 
 11951              		.loc 1 1511 1 view .LVU3193
 11952              	.LBE2252:
 11953              	.LBE2251:
 11954              	.LBE2246:
 11955              	.LBB2253:
1317:src/xeq.c     **** 			if (neg)
 11956              		.loc 1 1317 5 is_stmt 1 view .LVU3194
 11957 01e6 1AA9     		add	r1, sp, #104
 11958 01e8 23AA     		add	r2, sp, #140
 11959 01ea 0846     		mov	r0, r1
 11960 01ec FFF7FEFF 		bl	dn_add
 11961              	.LVL881:
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11962              		.loc 1 1318 4 view .LVU3195
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11963              		.loc 1 1318 7 is_stmt 0 view .LVU3196
 11964 01f0 002C     		cmp	r4, #0
 11965 01f2 9ED0     		beq	.L883
 11966 01f4 93E7     		b	.L892
 11967              	.LVL882:
 11968              	.L885:
1318:src/xeq.c     **** 				dn_minus(&x, &x);
 11969              		.loc 1 1318 7 view .LVU3197
 11970              	.LBE2253:
1246:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11971              		.loc 1 1246 5 is_stmt 1 view .LVU3198
 11972 01f6 02AB     		add	r3, sp, #8
1246:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11973              		.loc 1 1246 58 is_stmt 0 view .LVU3199
 11974 01f8 511C     		adds	r1, r2, #1
1246:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11975              		.loc 1 1246 32 view .LVU3200
 11976 01fa 901C     		adds	r0, r2, #2
1246:src/xeq.c     **** 				cmdline[CmdLineEex] = 'E';
 11977              		.loc 1 1246 5 view .LVU3201
 11978 01fc 1944     		add	r1, r1, r3
 11979 01fe 1844     		add	r0, r0, r3
 11980 0200 C2F11202 		rsb	r2, r2, #18
 11981 0204 FFF7FEFF 		bl	xcopy
 11982              	.LVL883:
1247:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11983              		.loc 1 1247 5 is_stmt 1 view .LVU3202
1247:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11984              		.loc 1 1247 13 is_stmt 0 view .LVU3203
 11985 0208 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
1247:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11986              		.loc 1 1247 25 view .LVU3204
 11987 020a 2CAB     		add	r3, sp, #176
 11988 020c 1344     		add	r3, r3, r2
 11989 020e 4520     		movs	r0, #69
1248:src/xeq.c     **** 			}
 11990              		.loc 1 1248 29 view .LVU3205
ARM GAS  /tmp/cc7LeJ71.s 			page 364


 11991 0210 2D21     		movs	r1, #45
1247:src/xeq.c     **** 				cmdline[CmdLineEex + 1] = '-';
 11992              		.loc 1 1247 25 view .LVU3206
 11993 0212 03F8A80C 		strb	r0, [r3, #-168]
1248:src/xeq.c     **** 			}
 11994              		.loc 1 1248 5 is_stmt 1 view .LVU3207
1248:src/xeq.c     **** 			}
 11995              		.loc 1 1248 29 is_stmt 0 view .LVU3208
 11996 0216 03F8A71C 		strb	r1, [r3, #-167]
 11997 021a 1CE7     		b	.L858
 11998              	.LVL884:
 11999              	.L888:
 12000              	.LBB2254:
1299:src/xeq.c     **** 				decNumberZero(&x); // and zero x
 12001              		.loc 1 1299 5 is_stmt 1 view .LVU3209
 12002 021c 1AA9     		add	r1, sp, #104
 12003 021e 2846     		mov	r0, r5
 12004 0220 FFF7FEFF 		bl	decNumberCopy
 12005              	.LVL885:
1300:src/xeq.c     **** #if FRACTION_MODE_INPUT & 32
 12006              		.loc 1 1300 5 view .LVU3210
 12007 0224 1AA8     		add	r0, sp, #104
 12008 0226 FFF7FEFF 		bl	decNumberZero
 12009              	.LVL886:
1302:src/xeq.c     **** #endif
 12010              		.loc 1 1302 5 view .LVU3211
1302:src/xeq.c     **** #endif
 12011              		.loc 1 1302 25 is_stmt 0 view .LVU3212
 12012 022a D8F80020 		ldr	r2, [r8]
 12013 022e 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 12014 0232 43F01003 		orr	r3, r3, #16
 12015 0236 82F8E637 		strb	r3, [r2, #2022]
 12016 023a 65E7     		b	.L871
 12017              	.L894:
 12018              		.align	2
 12019              	.L893:
 12020 023c 00000000 		.word	StateWhileOn
 12021 0240 00000000 		.word	Ctx
 12022 0244 00000000 		.word	Running
 12023 0248 00000000 		.word	XromRunning
 12024 024c 00000000 		.word	main_ram
 12025              	.LBE2254:
 12026              	.LBE2258:
 12027              		.cfi_endproc
 12028              	.LFE289:
 12030              		.section	.text.process_cmdline,"ax",%progbits
 12031              		.align	1
 12032              		.p2align 2,,3
 12033              		.global	process_cmdline
 12034              		.syntax unified
 12035              		.thumb
 12036              		.thumb_func
 12037              		.fpu fpv4-sp-d16
 12039              	process_cmdline:
 12040              	.LFB88:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 12041              		.loc 1 1226 28 is_stmt 1 view -0
ARM GAS  /tmp/cc7LeJ71.s 			page 365


 12042              		.cfi_startproc
 12043              		@ args = 0, pretend = 0, frame = 0
 12044              		@ frame_needed = 0, uses_anonymous_args = 0
 12045              		@ link register save eliminated.
1227:src/xeq.c     **** 
 12046              		.loc 1 1227 2 view .LVU3214
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12047              		.loc 1 1229 2 view .LVU3215
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12048              		.loc 1 1229 6 is_stmt 0 view .LVU3216
 12049 0000 024B     		ldr	r3, .L898
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12050              		.loc 1 1229 5 view .LVU3217
 12051 0002 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 12052 0004 03B9     		cbnz	r3, .L897
1330:src/xeq.c     **** 
 12053              		.loc 1 1330 1 view .LVU3218
 12054 0006 7047     		bx	lr
 12055              	.L897:
 12056 0008 FFF7FEBF 		b	process_cmdline.part.0
 12057              	.LVL887:
 12058              	.L899:
 12059              		.align	2
 12060              	.L898:
 12061 000c 00000000 		.word	StateWhileOn
 12062              		.cfi_endproc
 12063              	.LFE88:
 12065              		.section	.text.cpx_pi,"ax",%progbits
 12066              		.align	1
 12067              		.p2align 2,,3
 12068              		.global	cpx_pi
 12069              		.syntax unified
 12070              		.thumb
 12071              		.thumb_func
 12072              		.fpu fpv4-sp-d16
 12074              	cpx_pi:
 12075              	.LVL888:
 12076              	.LFB76:
 973:src/xeq.c     **** 	switch (op) {
 12077              		.loc 1 973 29 is_stmt 1 view -0
 12078              		.cfi_startproc
 12079              		@ args = 0, pretend = 0, frame = 40
 12080              		@ frame_needed = 0, uses_anonymous_args = 0
 974:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12081              		.loc 1 974 2 view .LVU3220
 973:src/xeq.c     **** 	switch (op) {
 12082              		.loc 1 973 29 is_stmt 0 view .LVU3221
 12083 0000 70B5     		push	{r4, r5, r6, lr}
 12084              		.cfi_def_cfa_offset 16
 12085              		.cfi_offset 4, -16
 12086              		.cfi_offset 5, -12
 12087              		.cfi_offset 6, -8
 12088              		.cfi_offset 14, -4
 974:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12089              		.loc 1 974 2 view .LVU3222
 12090 0002 D028     		cmp	r0, #208
 973:src/xeq.c     **** 	switch (op) {
ARM GAS  /tmp/cc7LeJ71.s 			page 366


 12091              		.loc 1 973 29 view .LVU3223
 12092 0004 8AB0     		sub	sp, sp, #40
 12093              		.cfi_def_cfa_offset 56
 974:src/xeq.c     **** 	case OP_PIA: // no command line present - puts pi into x-register
 12094              		.loc 1 974 2 view .LVU3224
 12095 0006 26D0     		beq	.L901
 12096 0008 D128     		cmp	r0, #209
 12097 000a 1AD1     		bne	.L912
 983:src/xeq.c     **** 		process_cmdline();
 12098              		.loc 1 983 3 is_stmt 1 view .LVU3225
 983:src/xeq.c     **** 		process_cmdline();
 12099              		.loc 1 983 21 is_stmt 0 view .LVU3226
 12100 000c 2C4D     		ldr	r5, .L914
 12101 000e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12102              	.LBB2259:
 12103              	.LBB2260:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12104              		.loc 1 1229 5 view .LVU3227
 12105 0010 2A7F     		ldrb	r2, [r5, #28]	@ zero_extendqisi2
 12106              	.LBE2260:
 12107              	.LBE2259:
 983:src/xeq.c     **** 		process_cmdline();
 12108              		.loc 1 983 21 view .LVU3228
 12109 0012 6FF38613 		bfc	r3, #6, #1
 12110 0016 EB75     		strb	r3, [r5, #23]
 984:src/xeq.c     **** 		State2.state_lift = 0;
 12111              		.loc 1 984 3 is_stmt 1 view .LVU3229
 12112              	.LBB2263:
 12113              	.LBI2259:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 12114              		.loc 1 1226 6 view .LVU3230
 12115              	.LBB2261:
1227:src/xeq.c     **** 
 12116              		.loc 1 1227 2 view .LVU3231
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12117              		.loc 1 1229 2 view .LVU3232
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12118              		.loc 1 1229 5 is_stmt 0 view .LVU3233
 12119 0018 002A     		cmp	r2, #0
 12120 001a 4ED1     		bne	.L913
 12121              	.LVL889:
 12122              	.L906:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12123              		.loc 1 1229 5 view .LVU3234
 12124              	.LBE2261:
 12125              	.LBE2263:
 985:src/xeq.c     **** 		{
 12126              		.loc 1 985 3 is_stmt 1 view .LVU3235
 985:src/xeq.c     **** 		{
 12127              		.loc 1 985 21 is_stmt 0 view .LVU3236
 12128 001c EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 12129 001e 294C     		ldr	r4, .L914+4
 12130 0020 6FF38613 		bfc	r3, #6, #1
 12131 0024 EB75     		strb	r3, [r5, #23]
 12132              	.LBB2264:
 987:src/xeq.c     **** 			getX(&r);
 12133              		.loc 1 987 4 is_stmt 1 view .LVU3237
ARM GAS  /tmp/cc7LeJ71.s 			page 367


 988:src/xeq.c     **** 			dn_multiply (&r, &const_PI, &r);
 12134              		.loc 1 988 4 view .LVU3238
 12135              	.LVL890:
 12136              	.LBB2265:
 12137              	.LBI2265:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 12138              		.loc 1 824 12 view .LVU3239
 12139              	.LBB2266:
 825:src/xeq.c     **** }
 12140              		.loc 1 825 2 view .LVU3240
 825:src/xeq.c     **** }
 12141              		.loc 1 825 9 is_stmt 0 view .LVU3241
 12142 0026 01A8     		add	r0, sp, #4
 12143              	.LVL891:
 825:src/xeq.c     **** }
 12144              		.loc 1 825 9 view .LVU3242
 12145 0028 6421     		movs	r1, #100
 12146 002a FFF7FEFF 		bl	getRegister
 12147              	.LVL892:
 825:src/xeq.c     **** }
 12148              		.loc 1 825 9 view .LVU3243
 12149              	.LBE2266:
 12150              	.LBE2265:
 989:src/xeq.c     **** 			setX(&r);
 12151              		.loc 1 989 4 is_stmt 1 view .LVU3244
 12152 002e 01AA     		add	r2, sp, #4
 12153 0030 2549     		ldr	r1, .L914+8
 12154 0032 1046     		mov	r0, r2
 12155 0034 FFF7FEFF 		bl	dn_multiply
 12156              	.LVL893:
 990:src/xeq.c     **** 		}
 12157              		.loc 1 990 4 view .LVU3245
 12158              	.LBB2267:
 12159              	.LBI2267:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 12160              		.loc 1 828 6 view .LVU3246
 12161              	.LBB2268:
 829:src/xeq.c     **** }
 12162              		.loc 1 829 2 view .LVU3247
 12163 0038 01A9     		add	r1, sp, #4
 12164              	.LVL894:
 829:src/xeq.c     **** }
 12165              		.loc 1 829 2 is_stmt 0 view .LVU3248
 12166 003a 6420     		movs	r0, #100
 12167 003c FFF7FEFF 		bl	setRegister
 12168              	.LVL895:
 829:src/xeq.c     **** }
 12169              		.loc 1 829 2 view .LVU3249
 12170 0040 00E0     		b	.L903
 12171              	.LVL896:
 12172              	.L912:
 829:src/xeq.c     **** }
 12173              		.loc 1 829 2 view .LVU3250
 12174 0042 204C     		ldr	r4, .L914+4
 12175              	.LVL897:
 12176              	.L903:
 829:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 368


 12177              		.loc 1 829 2 view .LVU3251
 12178              	.LBE2268:
 12179              	.LBE2267:
 12180              	.LBE2264:
 992:src/xeq.c     **** 	}
 12181              		.loc 1 992 10 is_stmt 1 view .LVU3252
 994:src/xeq.c     **** }
 12182              		.loc 1 994 2 view .LVU3253
 12183 0044 2268     		ldr	r2, [r4]
 12184 0046 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 12185 004a 43F01003 		orr	r3, r3, #16
 12186 004e 82F8DE37 		strb	r3, [r2, #2014]
 995:src/xeq.c     **** 
 12187              		.loc 1 995 1 is_stmt 0 view .LVU3254
 12188 0052 0AB0     		add	sp, sp, #40
 12189              		.cfi_remember_state
 12190              		.cfi_def_cfa_offset 16
 12191              		@ sp needed
 12192 0054 70BD     		pop	{r4, r5, r6, pc}
 12193              	.LVL898:
 12194              	.L901:
 12195              		.cfi_restore_state
 976:src/xeq.c     **** 			stack_begin( 1 );
 12196              		.loc 1 976 3 is_stmt 1 view .LVU3255
 976:src/xeq.c     **** 			stack_begin( 1 );
 12197              		.loc 1 976 8 is_stmt 0 view .LVU3256
 12198 0056 1B4C     		ldr	r4, .L914+4
 12199 0058 2368     		ldr	r3, [r4]
 976:src/xeq.c     **** 			stack_begin( 1 );
 12200              		.loc 1 976 7 view .LVU3257
 12201 005a 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 976:src/xeq.c     **** 			stack_begin( 1 );
 12202              		.loc 1 976 6 view .LVU3258
 12203 005e 1107     		lsls	r1, r2, #28
 12204 0060 0DD4     		bmi	.L904
 976:src/xeq.c     **** 			stack_begin( 1 );
 12205              		.loc 1 976 21 discriminator 1 view .LVU3259
 12206 0062 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
 976:src/xeq.c     **** 			stack_begin( 1 );
 12207              		.loc 1 976 18 discriminator 1 view .LVU3260
 12208 0066 1207     		lsls	r2, r2, #28
 12209 0068 09D4     		bmi	.L904
 977:src/xeq.c     **** 			SET_REAL;
 12210              		.loc 1 977 4 is_stmt 1 view .LVU3261
 12211 006a 0120     		movs	r0, #1
 12212              	.LVL899:
 977:src/xeq.c     **** 			SET_REAL;
 12213              		.loc 1 977 4 is_stmt 0 view .LVU3262
 12214 006c FFF7FEFF 		bl	stack_begin
 12215              	.LVL900:
 978:src/xeq.c     **** 		}
 12216              		.loc 1 978 4 is_stmt 1 view .LVU3263
 12217 0070 2368     		ldr	r3, [r4]
 12218 0072 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
 12219 0076 42F00802 		orr	r2, r2, #8
 12220 007a 83F8E427 		strb	r2, [r3, #2020]
 12221              	.L904:
ARM GAS  /tmp/cc7LeJ71.s 			page 369


 980:src/xeq.c     **** 		break;
 12222              		.loc 1 980 3 view .LVU3264
 12223              	.LBB2269:
 12224              	.LBB2270:
1119:src/xeq.c     **** }
 12225              		.loc 1 1119 24 is_stmt 0 view .LVU3265
 12226 007e B3F8E817 		ldrh	r1, [r3, #2024]
 12227              	.LBE2270:
 12228              	.LBE2269:
 980:src/xeq.c     **** 		break;
 12229              		.loc 1 980 3 view .LVU3266
 12230 0082 124B     		ldr	r3, .L914+12
 12231              	.LBB2273:
 12232              	.LBB2271:
1119:src/xeq.c     **** }
 12233              		.loc 1 1119 24 view .LVU3267
 12234 0084 44F20105 		movw	r5, #16385
 12235 0088 2940     		ands	r1, r1, r5
 12236              	.LBE2271:
 12237              	.LBE2273:
 980:src/xeq.c     **** 		break;
 12238              		.loc 1 980 22 view .LVU3268
 12239 008a A1F58041 		sub	r1, r1, #16384
 12240 008e B1FA81F1 		clz	r1, r1
 12241 0092 4909     		lsrs	r1, r1, #5
 12242 0094 6620     		movs	r0, #102
 980:src/xeq.c     **** 		break;
 12243              		.loc 1 980 3 view .LVU3269
 12244 0096 1E68     		ldr	r6, [r3]
 12245              	.LBB2274:
 12246              	.LBI2269:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12247              		.loc 1 1118 5 is_stmt 1 view .LVU3270
 12248              	.LBB2272:
1119:src/xeq.c     **** }
 12249              		.loc 1 1119 2 view .LVU3271
 12250              	.LBE2272:
 12251              	.LBE2274:
 980:src/xeq.c     **** 		break;
 12252              		.loc 1 980 22 is_stmt 0 view .LVU3272
 12253 0098 FFF7FEFF 		bl	get_const
 12254              	.LVL901:
 12255              	.LBB2275:
 12256              	.LBB2276:
 12257              	.LBB2277:
 12258              	.LBB2278:
1119:src/xeq.c     **** }
 12259              		.loc 1 1119 24 view .LVU3273
 12260 009c 2368     		ldr	r3, [r4]
 12261 009e B3F8E837 		ldrh	r3, [r3, #2024]
 12262              	.LBE2278:
 12263              	.LBE2277:
 727:src/xeq.c     **** }
 12264              		.loc 1 727 2 view .LVU3274
 12265 00a2 1D40     		ands	r5, r5, r3
 12266 00a4 B5F5804F 		cmp	r5, #16384
 12267              	.LBE2276:
ARM GAS  /tmp/cc7LeJ71.s 			page 370


 12268              	.LBE2275:
 980:src/xeq.c     **** 		break;
 12269              		.loc 1 980 22 view .LVU3275
 12270 00a8 0146     		mov	r1, r0
 12271              	.LVL902:
 12272              	.LBB2282:
 12273              	.LBI2275:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12274              		.loc 1 726 6 is_stmt 1 view .LVU3276
 12275              	.LBB2281:
 727:src/xeq.c     **** }
 12276              		.loc 1 727 2 view .LVU3277
 12277              	.LBB2280:
 12278              	.LBI2277:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12279              		.loc 1 1118 5 view .LVU3278
 12280              	.LBB2279:
1119:src/xeq.c     **** }
 12281              		.loc 1 1119 2 view .LVU3279
 12282              	.LBE2279:
 12283              	.LBE2280:
 727:src/xeq.c     **** }
 12284              		.loc 1 727 2 is_stmt 0 view .LVU3280
 12285 00aa 08BF     		it	eq
 12286 00ac 1022     		moveq	r2, #16
 12287 00ae 3046     		mov	r0, r6
 12288              	.LVL903:
 727:src/xeq.c     **** }
 12289              		.loc 1 727 2 view .LVU3281
 12290 00b0 18BF     		it	ne
 12291 00b2 0822     		movne	r2, #8
 12292 00b4 FFF7FEFF 		bl	xcopy
 12293              	.LVL904:
 728:src/xeq.c     **** 
 12294              		.loc 1 728 1 view .LVU3282
 12295 00b8 C4E7     		b	.L903
 12296              	.LVL905:
 12297              	.L913:
 728:src/xeq.c     **** 
 12298              		.loc 1 728 1 view .LVU3283
 12299              	.LBE2281:
 12300              	.LBE2282:
 12301              	.LBB2283:
 12302              	.LBB2262:
 12303 00ba FFF7FEFF 		bl	process_cmdline.part.0
 12304              	.LVL906:
 728:src/xeq.c     **** 
 12305              		.loc 1 728 1 view .LVU3284
 12306 00be ADE7     		b	.L906
 12307              	.L915:
 12308              		.align	2
 12309              	.L914:
 12310 00c0 00000000 		.word	StateWhileOn
 12311 00c4 00000000 		.word	main_ram
 12312 00c8 00000000 		.word	const_PI
 12313 00cc 00000000 		.word	StackBase
 12314              	.LBE2262:
ARM GAS  /tmp/cc7LeJ71.s 			page 371


 12315              	.LBE2283:
 12316              		.cfi_endproc
 12317              	.LFE76:
 12319              		.section	.text.process_cmdline_set_lift,"ax",%progbits
 12320              		.align	1
 12321              		.p2align 2,,3
 12322              		.global	process_cmdline_set_lift
 12323              		.syntax unified
 12324              		.thumb
 12325              		.thumb_func
 12326              		.fpu fpv4-sp-d16
 12328              	process_cmdline_set_lift:
 12329              	.LFB89:
1332:src/xeq.c     **** 	process_cmdline();
 12330              		.loc 1 1332 37 is_stmt 1 view -0
 12331              		.cfi_startproc
 12332              		@ args = 0, pretend = 0, frame = 0
 12333              		@ frame_needed = 0, uses_anonymous_args = 0
1333:src/xeq.c     **** 	set_lift();
 12334              		.loc 1 1333 2 view .LVU3286
 12335              	.LBB2284:
 12336              	.LBI2284:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 12337              		.loc 1 1226 6 view .LVU3287
 12338              	.LBB2285:
1227:src/xeq.c     **** 
 12339              		.loc 1 1227 2 view .LVU3288
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12340              		.loc 1 1229 2 view .LVU3289
 12341              	.LBE2285:
 12342              	.LBE2284:
1332:src/xeq.c     **** 	process_cmdline();
 12343              		.loc 1 1332 37 is_stmt 0 view .LVU3290
 12344 0000 10B5     		push	{r4, lr}
 12345              		.cfi_def_cfa_offset 8
 12346              		.cfi_offset 4, -8
 12347              		.cfi_offset 14, -4
 12348              	.LBB2288:
 12349              	.LBB2286:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12350              		.loc 1 1229 6 view .LVU3291
 12351 0002 074C     		ldr	r4, .L923
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 12352              		.loc 1 1229 5 view .LVU3292
 12353 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 12354 0006 23B9     		cbnz	r3, .L922
 12355              	.LBE2286:
 12356              	.LBE2288:
1334:src/xeq.c     **** }
 12357              		.loc 1 1334 2 is_stmt 1 view .LVU3293
 12358              	.LBB2289:
 12359              	.LBI2289:
 767:src/xeq.c     ****     State2.state_lift = 1;
 12360              		.loc 1 767 6 view .LVU3294
 12361              	.LBB2290:
 768:src/xeq.c     **** }
 12362              		.loc 1 768 5 view .LVU3295
ARM GAS  /tmp/cc7LeJ71.s 			page 372


 768:src/xeq.c     **** }
 12363              		.loc 1 768 23 is_stmt 0 view .LVU3296
 12364 0008 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12365 000a 43F04003 		orr	r3, r3, #64
 12366 000e E375     		strb	r3, [r4, #23]
 12367              	.LBE2290:
 12368              	.LBE2289:
1335:src/xeq.c     **** 
 12369              		.loc 1 1335 1 view .LVU3297
 12370 0010 10BD     		pop	{r4, pc}
 12371              	.L922:
 12372              	.LBB2292:
 12373              	.LBB2287:
 12374 0012 FFF7FEFF 		bl	process_cmdline.part.0
 12375              	.LVL907:
 12376              	.LBE2287:
 12377              	.LBE2292:
1334:src/xeq.c     **** }
 12378              		.loc 1 1334 2 is_stmt 1 view .LVU3298
 12379              	.LBB2293:
 767:src/xeq.c     ****     State2.state_lift = 1;
 12380              		.loc 1 767 6 view .LVU3299
 12381              	.LBB2291:
 768:src/xeq.c     **** }
 12382              		.loc 1 768 5 view .LVU3300
 768:src/xeq.c     **** }
 12383              		.loc 1 768 23 is_stmt 0 view .LVU3301
 12384 0016 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 12385 0018 43F04003 		orr	r3, r3, #64
 12386 001c E375     		strb	r3, [r4, #23]
 12387              	.LBE2291:
 12388              	.LBE2293:
1335:src/xeq.c     **** 
 12389              		.loc 1 1335 1 view .LVU3302
 12390 001e 10BD     		pop	{r4, pc}
 12391              	.L924:
 12392              		.align	2
 12393              	.L923:
 12394 0020 00000000 		.word	StateWhileOn
 12395              		.cfi_endproc
 12396              	.LFE89:
 12398              		.section	.text.setX_int,"ax",%progbits
 12399              		.align	1
 12400              		.p2align 2,,3
 12401              		.global	setX_int
 12402              		.syntax unified
 12403              		.thumb
 12404              		.thumb_func
 12405              		.fpu fpv4-sp-d16
 12407              	setX_int:
 12408              	.LVL908:
 12409              	.LFB102:
1504:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12410              		.loc 1 1504 34 is_stmt 1 view -0
 12411              		.cfi_startproc
 12412              		@ args = 0, pretend = 0, frame = 8
 12413              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc7LeJ71.s 			page 373


1505:src/xeq.c     **** }
 12414              		.loc 1 1505 2 view .LVU3304
1504:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12415              		.loc 1 1504 34 is_stmt 0 view .LVU3305
 12416 0000 00B5     		push	{lr}
 12417              		.cfi_def_cfa_offset 4
 12418              		.cfi_offset 14, -4
 12419 0002 0B46     		mov	r3, r1
 12420 0004 83B0     		sub	sp, sp, #12
 12421              		.cfi_def_cfa_offset 16
1504:src/xeq.c     **** 	set_reg_n_int(regX_idx, val);
 12422              		.loc 1 1504 34 view .LVU3306
 12423 0006 0246     		mov	r2, r0
 12424              	.LBB2294:
 12425              	.LBB2295:
1423:src/xeq.c     **** }
 12426              		.loc 1 1423 8 view .LVU3307
 12427 0008 6420     		movs	r0, #100
 12428              	.LVL909:
1423:src/xeq.c     **** }
 12429              		.loc 1 1423 8 view .LVU3308
 12430 000a CDE90023 		strd	r2, [sp]
 12431              	.LVL910:
1423:src/xeq.c     **** }
 12432              		.loc 1 1423 8 view .LVU3309
 12433              	.LBE2295:
 12434              	.LBI2294:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 12435              		.loc 1 1422 6 is_stmt 1 view .LVU3310
 12436              	.LBB2296:
1423:src/xeq.c     **** }
 12437              		.loc 1 1423 2 view .LVU3311
1423:src/xeq.c     **** }
 12438              		.loc 1 1423 8 is_stmt 0 view .LVU3312
 12439 000e FFF7FEFF 		bl	get_reg_n
 12440              	.LVL911:
1423:src/xeq.c     **** }
 12441              		.loc 1 1423 2 view .LVU3313
 12442 0012 0822     		movs	r2, #8
 12443 0014 6946     		mov	r1, sp
 12444 0016 FFF7FEFF 		bl	xcopy
 12445              	.LVL912:
1423:src/xeq.c     **** }
 12446              		.loc 1 1423 2 view .LVU3314
 12447              	.LBE2296:
 12448              	.LBE2294:
1506:src/xeq.c     **** 
 12449              		.loc 1 1506 1 view .LVU3315
 12450 001a 03B0     		add	sp, sp, #12
 12451              		.cfi_def_cfa_offset 4
 12452              		@ sp needed
 12453 001c 5DF804FB 		ldr	pc, [sp], #4
 12454              		.cfi_endproc
 12455              	.LFE102:
 12457              		.section	.text.do_rcl,"ax",%progbits
 12458              		.align	1
 12459              		.p2align 2,,3
ARM GAS  /tmp/cc7LeJ71.s 			page 374


 12460              		.syntax unified
 12461              		.thumb
 12462              		.thumb_func
 12463              		.fpu fpv4-sp-d16
 12465              	do_rcl:
 12466              	.LVL913:
 12467              	.LFB118:
1746:src/xeq.c     **** 	if (op == RARG_RCL) {
 12468              		.loc 1 1746 45 is_stmt 1 view -0
 12469              		.cfi_startproc
 12470              		@ args = 0, pretend = 0, frame = 40
 12471              		@ frame_needed = 0, uses_anonymous_args = 0
1747:src/xeq.c     **** 		REGISTER temp;
 12472              		.loc 1 1747 2 view .LVU3317
1746:src/xeq.c     **** 	if (op == RARG_RCL) {
 12473              		.loc 1 1746 45 is_stmt 0 view .LVU3318
 12474 0000 30B5     		push	{r4, r5, lr}
 12475              		.cfi_def_cfa_offset 12
 12476              		.cfi_offset 4, -12
 12477              		.cfi_offset 5, -8
 12478              		.cfi_offset 14, -4
1747:src/xeq.c     **** 		REGISTER temp;
 12479              		.loc 1 1747 5 view .LVU3319
 12480 0002 0A29     		cmp	r1, #10
1746:src/xeq.c     **** 	if (op == RARG_RCL) {
 12481              		.loc 1 1746 45 view .LVU3320
 12482 0004 8BB0     		sub	sp, sp, #44
 12483              		.cfi_def_cfa_offset 56
1746:src/xeq.c     **** 	if (op == RARG_RCL) {
 12484              		.loc 1 1746 45 view .LVU3321
 12485 0006 0B46     		mov	r3, r1
1747:src/xeq.c     **** 		REGISTER temp;
 12486              		.loc 1 1747 5 view .LVU3322
 12487 0008 33D0     		beq	.L948
1753:src/xeq.c     **** 			long long int r;
 12488              		.loc 1 1753 3 is_stmt 1 view .LVU3323
1753:src/xeq.c     **** 			long long int r;
 12489              		.loc 1 1753 7 is_stmt 0 view .LVU3324
 12490 000a 304A     		ldr	r2, .L950
 12491 000c 1268     		ldr	r2, [r2]
 12492 000e 92F8E827 		ldrb	r2, [r2, #2024]	@ zero_extendqisi2
1753:src/xeq.c     **** 			long long int r;
 12493              		.loc 1 1753 6 view .LVU3325
 12494 0012 D207     		lsls	r2, r2, #31
 12495 0014 0146     		mov	r1, r0
 12496              	.LVL914:
 12497              	.LBB2326:
1756:src/xeq.c     **** 				illegal(op);
 12498              		.loc 1 1756 8 view .LVU3326
 12499 0016 A3F10A03 		sub	r3, r3, #10
 12500              	.LBE2326:
1753:src/xeq.c     **** 			long long int r;
 12501              		.loc 1 1753 6 view .LVU3327
 12502 001a 14D5     		bpl	.L933
 12503              	.LBB2333:
1754:src/xeq.c     **** 
 12504              		.loc 1 1754 4 is_stmt 1 view .LVU3328
ARM GAS  /tmp/cc7LeJ71.s 			page 375


1756:src/xeq.c     **** 				illegal(op);
 12505              		.loc 1 1756 4 view .LVU3329
1756:src/xeq.c     **** 				illegal(op);
 12506              		.loc 1 1756 8 is_stmt 0 view .LVU3330
 12507 001c 98B2     		uxth	r0, r3
 12508              	.LVL915:
1756:src/xeq.c     **** 				illegal(op);
 12509              		.loc 1 1756 8 view .LVU3331
 12510 001e 6A46     		mov	r2, sp
 12511 0020 0123     		movs	r3, #1
 12512 0022 FFF7FEFF 		bl	storcl_intop
 12513              	.LVL916:
1756:src/xeq.c     **** 				illegal(op);
 12514              		.loc 1 1756 7 view .LVU3332
 12515 0026 20B1     		cbz	r0, .L934
1757:src/xeq.c     **** 			setlastX();
 12516              		.loc 1 1757 5 is_stmt 1 view .LVU3333
1757:src/xeq.c     **** 			setlastX();
 12517              		.loc 1 1757 5 view .LVU3334
 12518              	.LVL917:
 12519              	.LBB2327:
 12520              	.LBI2327:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12521              		.loc 1 546 5 view .LVU3335
 12522              	.LBB2328:
 547:src/xeq.c     **** 		Error = e;
 12523              		.loc 1 547 2 view .LVU3336
 547:src/xeq.c     **** 		Error = e;
 12524              		.loc 1 547 12 is_stmt 0 view .LVU3337
 12525 0028 294B     		ldr	r3, .L950+4
 547:src/xeq.c     **** 		Error = e;
 12526              		.loc 1 547 5 view .LVU3338
 12527 002a 1A68     		ldr	r2, [r3]
 12528 002c 0AB9     		cbnz	r2, .L934
 12529              	.LVL918:
 12530              	.LBB2329:
 12531              	.LBI2329:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12532              		.loc 1 546 5 is_stmt 1 view .LVU3339
 12533              	.LBB2330:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12534              		.loc 1 548 3 view .LVU3340
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12535              		.loc 1 548 9 is_stmt 0 view .LVU3341
 12536 002e 0322     		movs	r2, #3
 12537 0030 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12538              		.loc 1 549 3 is_stmt 1 view .LVU3342
 12539              	.LVL919:
 12540              	.L934:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12541              		.loc 1 549 3 is_stmt 0 view .LVU3343
 12542              	.LBE2330:
 12543              	.LBE2329:
 12544              	.LBE2328:
 12545              	.LBE2327:
1757:src/xeq.c     **** 			setlastX();
ARM GAS  /tmp/cc7LeJ71.s 			page 376


 12546              		.loc 1 1757 5 is_stmt 1 discriminator 1 view .LVU3344
1758:src/xeq.c     **** 			setX_int(r);
 12547              		.loc 1 1758 4 discriminator 1 view .LVU3345
 12548              	.LBB2331:
 12549              	.LBI2331:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12550              		.loc 1 792 6 discriminator 1 view .LVU3346
 12551              	.LBB2332:
 793:src/xeq.c     **** }
 12552              		.loc 1 793 2 discriminator 1 view .LVU3347
 12553 0032 6421     		movs	r1, #100
 12554 0034 6C20     		movs	r0, #108
 12555 0036 FFF7FEFF 		bl	copyreg_n
 12556              	.LVL920:
 12557              	.LBE2332:
 12558              	.LBE2331:
1759:src/xeq.c     **** 		} else {
 12559              		.loc 1 1759 4 discriminator 1 view .LVU3348
 12560 003a DDE90001 		ldrd	r0, [sp]
 12561 003e FFF7FEFF 		bl	setX_int
 12562              	.LVL921:
 12563              	.LBE2333:
1769:src/xeq.c     **** 
 12564              		.loc 1 1769 1 is_stmt 0 discriminator 1 view .LVU3349
 12565 0042 0BB0     		add	sp, sp, #44
 12566              		.cfi_remember_state
 12567              		.cfi_def_cfa_offset 12
 12568              		@ sp needed
 12569 0044 30BD     		pop	{r4, r5, pc}
 12570              	.LVL922:
 12571              	.L933:
 12572              		.cfi_restore_state
 12573              	.LBB2334:
1761:src/xeq.c     **** 
 12574              		.loc 1 1761 4 is_stmt 1 view .LVU3350
1763:src/xeq.c     **** 				illegal(op);
 12575              		.loc 1 1763 4 view .LVU3351
1763:src/xeq.c     **** 				illegal(op);
 12576              		.loc 1 1763 8 is_stmt 0 view .LVU3352
 12577 0046 6C46     		mov	r4, sp
 12578 0048 98B2     		uxth	r0, r3
 12579              	.LVL923:
1763:src/xeq.c     **** 				illegal(op);
 12580              		.loc 1 1763 8 view .LVU3353
 12581 004a 2246     		mov	r2, r4
 12582 004c 0123     		movs	r3, #1
 12583 004e FFF7FEFF 		bl	storcl_op
 12584              	.LVL924:
1763:src/xeq.c     **** 				illegal(op);
 12585              		.loc 1 1763 7 view .LVU3354
 12586 0052 20B1     		cbz	r0, .L935
1764:src/xeq.c     **** 			setlastX();
 12587              		.loc 1 1764 5 is_stmt 1 view .LVU3355
1764:src/xeq.c     **** 			setlastX();
 12588              		.loc 1 1764 5 view .LVU3356
 12589              	.LVL925:
 12590              	.LBB2335:
ARM GAS  /tmp/cc7LeJ71.s 			page 377


 12591              	.LBI2335:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12592              		.loc 1 546 5 view .LVU3357
 12593              	.LBB2336:
 547:src/xeq.c     **** 		Error = e;
 12594              		.loc 1 547 2 view .LVU3358
 547:src/xeq.c     **** 		Error = e;
 12595              		.loc 1 547 12 is_stmt 0 view .LVU3359
 12596 0054 1E4B     		ldr	r3, .L950+4
 547:src/xeq.c     **** 		Error = e;
 12597              		.loc 1 547 5 view .LVU3360
 12598 0056 1A68     		ldr	r2, [r3]
 12599 0058 0AB9     		cbnz	r2, .L935
 12600              	.LVL926:
 12601              	.LBB2337:
 12602              	.LBI2337:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 12603              		.loc 1 546 5 is_stmt 1 view .LVU3361
 12604              	.LBB2338:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12605              		.loc 1 548 3 view .LVU3362
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 12606              		.loc 1 548 9 is_stmt 0 view .LVU3363
 12607 005a 0322     		movs	r2, #3
 12608 005c 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12609              		.loc 1 549 3 is_stmt 1 view .LVU3364
 12610              	.LVL927:
 12611              	.L935:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 12612              		.loc 1 549 3 is_stmt 0 view .LVU3365
 12613              	.LBE2338:
 12614              	.LBE2337:
 12615              	.LBE2336:
 12616              	.LBE2335:
1764:src/xeq.c     **** 			setlastX();
 12617              		.loc 1 1764 5 is_stmt 1 discriminator 1 view .LVU3366
1765:src/xeq.c     **** 			setX(&r);
 12618              		.loc 1 1765 4 discriminator 1 view .LVU3367
 12619              	.LBB2339:
 12620              	.LBI2339:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 12621              		.loc 1 792 6 discriminator 1 view .LVU3368
 12622              	.LBB2340:
 793:src/xeq.c     **** }
 12623              		.loc 1 793 2 discriminator 1 view .LVU3369
 12624 005e 6421     		movs	r1, #100
 12625 0060 6C20     		movs	r0, #108
 12626 0062 FFF7FEFF 		bl	copyreg_n
 12627              	.LVL928:
 12628              	.LBE2340:
 12629              	.LBE2339:
1766:src/xeq.c     **** 		}
 12630              		.loc 1 1766 4 discriminator 1 view .LVU3370
 12631              	.LBB2341:
 12632              	.LBI2341:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
ARM GAS  /tmp/cc7LeJ71.s 			page 378


 12633              		.loc 1 828 6 discriminator 1 view .LVU3371
 12634              	.LBB2342:
 829:src/xeq.c     **** }
 12635              		.loc 1 829 2 discriminator 1 view .LVU3372
 12636 0066 2146     		mov	r1, r4
 12637 0068 6420     		movs	r0, #100
 12638 006a FFF7FEFF 		bl	setRegister
 12639              	.LVL929:
 829:src/xeq.c     **** }
 12640              		.loc 1 829 2 is_stmt 0 discriminator 1 view .LVU3373
 12641              	.LBE2342:
 12642              	.LBE2341:
 12643              	.LBE2334:
1769:src/xeq.c     **** 
 12644              		.loc 1 1769 1 discriminator 1 view .LVU3374
 12645 006e 0BB0     		add	sp, sp, #44
 12646              		.cfi_remember_state
 12647              		.cfi_def_cfa_offset 12
 12648              		@ sp needed
 12649 0070 30BD     		pop	{r4, r5, pc}
 12650              	.LVL930:
 12651              	.L948:
 12652              		.cfi_restore_state
 12653              	.LBB2343:
1748:src/xeq.c     **** 		copyreg(&temp, get_reg_n(index));
 12654              		.loc 1 1748 3 is_stmt 1 view .LVU3375
1749:src/xeq.c     **** 		lift_if_enabled();
 12655              		.loc 1 1749 3 view .LVU3376
 12656              	.LBB2344:
 12657              	.LBB2345:
 12658              	.LBB2346:
 12659              	.LBB2347:
1119:src/xeq.c     **** }
 12660              		.loc 1 1119 24 is_stmt 0 view .LVU3377
 12661 0072 164D     		ldr	r5, .L950
 12662              	.LBE2347:
 12663              	.LBE2346:
 12664              	.LBE2345:
 12665              	.LBE2344:
1749:src/xeq.c     **** 		lift_if_enabled();
 12666              		.loc 1 1749 18 view .LVU3378
 12667 0074 FFF7FEFF 		bl	get_reg_n
 12668              	.LVL931:
 12669              	.LBB2354:
 12670              	.LBB2352:
 12671              	.LBB2350:
 12672              	.LBB2348:
1119:src/xeq.c     **** }
 12673              		.loc 1 1119 24 view .LVU3379
 12674 0078 2B68     		ldr	r3, [r5]
 12675 007a B3F8E827 		ldrh	r2, [r3, #2024]
 12676 007e 44F20103 		movw	r3, #16385
 12677              	.LBE2348:
 12678              	.LBE2350:
 727:src/xeq.c     **** }
 12679              		.loc 1 727 2 view .LVU3380
 12680 0082 1340     		ands	r3, r3, r2
ARM GAS  /tmp/cc7LeJ71.s 			page 379


 12681 0084 B3F5804F 		cmp	r3, #16384
 12682 0088 6C46     		mov	r4, sp
 12683              	.LBE2352:
 12684              	.LBE2354:
1749:src/xeq.c     **** 		lift_if_enabled();
 12685              		.loc 1 1749 18 view .LVU3381
 12686 008a 0146     		mov	r1, r0
 12687              	.LVL932:
 12688              	.LBB2355:
 12689              	.LBI2344:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12690              		.loc 1 726 6 is_stmt 1 view .LVU3382
 12691              	.LBB2353:
 727:src/xeq.c     **** }
 12692              		.loc 1 727 2 view .LVU3383
 12693              	.LBB2351:
 12694              	.LBI2346:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12695              		.loc 1 1118 5 view .LVU3384
 12696              	.LBB2349:
1119:src/xeq.c     **** }
 12697              		.loc 1 1119 2 view .LVU3385
 12698              	.LBE2349:
 12699              	.LBE2351:
 727:src/xeq.c     **** }
 12700              		.loc 1 727 2 is_stmt 0 view .LVU3386
 12701 008c 0CBF     		ite	eq
 12702 008e 1022     		moveq	r2, #16
 12703 0090 0822     		movne	r2, #8
 12704 0092 2046     		mov	r0, r4
 12705              	.LVL933:
 727:src/xeq.c     **** }
 12706              		.loc 1 727 2 view .LVU3387
 12707 0094 FFF7FEFF 		bl	xcopy
 12708              	.LVL934:
 727:src/xeq.c     **** }
 12709              		.loc 1 727 2 view .LVU3388
 12710              	.LBE2353:
 12711              	.LBE2355:
1750:src/xeq.c     **** 		copyreg(StackBase, &temp);
 12712              		.loc 1 1750 3 is_stmt 1 view .LVU3389
 12713              	.LBB2356:
 12714              	.LBI2356:
 747:src/xeq.c     **** 	if (get_lift())
 12715              		.loc 1 747 6 view .LVU3390
 12716              	.LBB2357:
 748:src/xeq.c     **** 		lift();
 12717              		.loc 1 748 2 view .LVU3391
 12718              	.LBB2358:
 12719              	.LBI2358:
 743:src/xeq.c     **** 	return State2.state_lift;
 12720              		.loc 1 743 12 view .LVU3392
 12721              	.LBB2359:
 744:src/xeq.c     **** }
 12722              		.loc 1 744 2 view .LVU3393
 744:src/xeq.c     **** }
 12723              		.loc 1 744 15 is_stmt 0 view .LVU3394
ARM GAS  /tmp/cc7LeJ71.s 			page 380


 12724 0098 0E4B     		ldr	r3, .L950+8
 12725 009a DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 12726              	.LBE2359:
 12727              	.LBE2358:
 748:src/xeq.c     **** 		lift();
 12728              		.loc 1 748 5 view .LVU3395
 12729 009c 5906     		lsls	r1, r3, #25
 12730 009e 11D4     		bmi	.L949
 12731              	.L930:
 12732              	.LBE2357:
 12733              	.LBE2356:
1751:src/xeq.c     **** 	} else {
 12734              		.loc 1 1751 3 is_stmt 1 view .LVU3396
 12735              	.LBB2361:
 12736              	.LBB2362:
 12737              	.LBB2363:
 12738              	.LBB2364:
1119:src/xeq.c     **** }
 12739              		.loc 1 1119 24 is_stmt 0 view .LVU3397
 12740 00a0 2A68     		ldr	r2, [r5]
 12741              	.LBE2364:
 12742              	.LBE2363:
 12743              	.LBE2362:
 12744              	.LBE2361:
1751:src/xeq.c     **** 	} else {
 12745              		.loc 1 1751 3 view .LVU3398
 12746 00a2 0D4B     		ldr	r3, .L950+12
 12747              	.LVL935:
 12748              	.LBB2370:
 12749              	.LBI2361:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 12750              		.loc 1 726 6 is_stmt 1 view .LVU3399
 12751              	.LBB2369:
 727:src/xeq.c     **** }
 12752              		.loc 1 727 2 view .LVU3400
 12753              	.LBB2367:
 12754              	.LBI2363:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12755              		.loc 1 1118 5 view .LVU3401
 12756              	.LBB2365:
1119:src/xeq.c     **** }
 12757              		.loc 1 1119 2 view .LVU3402
1119:src/xeq.c     **** }
 12758              		.loc 1 1119 24 is_stmt 0 view .LVU3403
 12759 00a4 B2F8E827 		ldrh	r2, [r2, #2024]
 12760              	.LBE2365:
 12761              	.LBE2367:
 727:src/xeq.c     **** }
 12762              		.loc 1 727 2 view .LVU3404
 12763 00a8 1868     		ldr	r0, [r3]
 12764              	.LBB2368:
 12765              	.LBB2366:
1119:src/xeq.c     **** }
 12766              		.loc 1 1119 24 view .LVU3405
 12767 00aa 44F20103 		movw	r3, #16385
 12768              	.LVL936:
1119:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 381


 12769              		.loc 1 1119 24 view .LVU3406
 12770              	.LBE2366:
 12771              	.LBE2368:
 727:src/xeq.c     **** }
 12772              		.loc 1 727 2 view .LVU3407
 12773 00ae 1340     		ands	r3, r3, r2
 12774 00b0 B3F5804F 		cmp	r3, #16384
 12775 00b4 2146     		mov	r1, r4
 12776 00b6 0CBF     		ite	eq
 12777 00b8 1022     		moveq	r2, #16
 12778 00ba 0822     		movne	r2, #8
 12779 00bc FFF7FEFF 		bl	xcopy
 12780              	.LVL937:
 727:src/xeq.c     **** }
 12781              		.loc 1 727 2 view .LVU3408
 12782              	.LBE2369:
 12783              	.LBE2370:
 12784              	.LBE2343:
1769:src/xeq.c     **** 
 12785              		.loc 1 1769 1 view .LVU3409
 12786 00c0 0BB0     		add	sp, sp, #44
 12787              		.cfi_remember_state
 12788              		.cfi_def_cfa_offset 12
 12789              		@ sp needed
 12790 00c2 30BD     		pop	{r4, r5, pc}
 12791              	.L949:
 12792              		.cfi_restore_state
 12793              	.LBB2372:
 12794              	.LBB2371:
 12795              	.LBB2360:
 749:src/xeq.c     **** }
 12796              		.loc 1 749 3 is_stmt 1 view .LVU3410
 12797 00c4 FFF7FEFF 		bl	lift
 12798              	.LVL938:
 12799 00c8 EAE7     		b	.L930
 12800              	.L951:
 12801 00ca 00BF     		.align	2
 12802              	.L950:
 12803 00cc 00000000 		.word	main_ram
 12804 00d0 00000000 		.word	Error
 12805 00d4 00000000 		.word	StateWhileOn
 12806 00d8 00000000 		.word	StackBase
 12807              	.LBE2360:
 12808              	.LBE2371:
 12809              	.LBE2372:
 12810              		.cfi_endproc
 12811              	.LFE118:
 12813              		.section	.text.setX_int_sgn,"ax",%progbits
 12814              		.align	1
 12815              		.p2align 2,,3
 12816              		.global	setX_int_sgn
 12817              		.syntax unified
 12818              		.thumb
 12819              		.thumb_func
 12820              		.fpu fpv4-sp-d16
 12822              	setX_int_sgn:
 12823              	.LVL939:
ARM GAS  /tmp/cc7LeJ71.s 			page 382


 12824              	.LFB103:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12825              		.loc 1 1509 56 view -0
 12826              		.cfi_startproc
 12827              		@ args = 0, pretend = 0, frame = 0
 12828              		@ frame_needed = 0, uses_anonymous_args = 0
1510:src/xeq.c     **** }
 12829              		.loc 1 1510 2 view .LVU3412
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 12830              		.loc 1 1509 56 is_stmt 0 view .LVU3413
 12831 0000 00B5     		push	{lr}
 12832              		.cfi_def_cfa_offset 4
 12833              		.cfi_offset 14, -4
 12834 0002 83B0     		sub	sp, sp, #12
 12835              		.cfi_def_cfa_offset 16
1510:src/xeq.c     **** }
 12836              		.loc 1 1510 2 view .LVU3414
 12837 0004 0B46     		mov	r3, r1
 12838 0006 0092     		str	r2, [sp]
 12839 0008 0246     		mov	r2, r0
 12840              	.LVL940:
1510:src/xeq.c     **** }
 12841              		.loc 1 1510 2 view .LVU3415
 12842 000a 6420     		movs	r0, #100
 12843              	.LVL941:
1510:src/xeq.c     **** }
 12844              		.loc 1 1510 2 view .LVU3416
 12845 000c FFF7FEFF 		bl	set_reg_n_int_sgn
 12846              	.LVL942:
1511:src/xeq.c     **** 
 12847              		.loc 1 1511 1 view .LVU3417
 12848 0010 03B0     		add	sp, sp, #12
 12849              		.cfi_def_cfa_offset 4
 12850              		@ sp needed
 12851 0012 5DF804FB 		ldr	pc, [sp], #4
 12852              		.cfi_endproc
 12853              	.LFE103:
 12855 0016 00BF     		.section	.text.zero_regs,"ax",%progbits
 12856              		.align	1
 12857              		.p2align 2,,3
 12858              		.global	zero_regs
 12859              		.syntax unified
 12860              		.thumb
 12861              		.thumb_func
 12862              		.fpu fpv4-sp-d16
 12864              	zero_regs:
 12865              	.LVL943:
 12866              	.LFB104:
1518:src/xeq.c     **** #if 0
 12867              		.loc 1 1518 39 is_stmt 1 view -0
 12868              		.cfi_startproc
 12869              		@ args = 0, pretend = 0, frame = 0
 12870              		@ frame_needed = 0, uses_anonymous_args = 0
 12871              		@ link register save eliminated.
1533:src/xeq.c     **** #endif
 12872              		.loc 1 1533 2 view .LVU3419
 12873              	.LBB2373:
ARM GAS  /tmp/cc7LeJ71.s 			page 383


 12874              	.LBI2373:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12875              		.loc 1 1118 5 view .LVU3420
 12876              	.LBB2374:
1119:src/xeq.c     **** }
 12877              		.loc 1 1119 2 view .LVU3421
1119:src/xeq.c     **** }
 12878              		.loc 1 1119 24 is_stmt 0 view .LVU3422
 12879 0000 084B     		ldr	r3, .L955
 12880 0002 1B68     		ldr	r3, [r3]
 12881 0004 B3F8E827 		ldrh	r2, [r3, #2024]
 12882 0008 44F20103 		movw	r3, #16385
 12883 000c 1340     		ands	r3, r3, r2
 12884 000e A3F58043 		sub	r3, r3, #16384
 12885 0012 B3FA83F3 		clz	r3, r3
 12886 0016 5B09     		lsrs	r3, r3, #5
 12887              	.LBE2374:
 12888              	.LBE2373:
1533:src/xeq.c     **** #endif
 12889              		.loc 1 1533 24 view .LVU3423
 12890 0018 0333     		adds	r3, r3, #3
1533:src/xeq.c     **** #endif
 12891              		.loc 1 1533 2 view .LVU3424
 12892 001a 01FA03F2 		lsl	r2, r1, r3
 12893 001e 0021     		movs	r1, #0
 12894              	.LVL944:
1533:src/xeq.c     **** #endif
 12895              		.loc 1 1533 2 view .LVU3425
 12896 0020 FFF7FEBF 		b	xset
 12897              	.LVL945:
 12898              	.L956:
1533:src/xeq.c     **** #endif
 12899              		.loc 1 1533 2 view .LVU3426
 12900              		.align	2
 12901              	.L955:
 12902 0024 00000000 		.word	main_ram
 12903              		.cfi_endproc
 12904              	.LFE104:
 12906              		.section	.text.move_regs,"ax",%progbits
 12907              		.align	1
 12908              		.p2align 2,,3
 12909              		.global	move_regs
 12910              		.syntax unified
 12911              		.thumb
 12912              		.thumb_func
 12913              		.fpu fpv4-sp-d16
 12915              	move_regs:
 12916              	.LVL946:
 12917              	.LFB105:
1537:src/xeq.c     **** 	if (is_dblmode())
 12918              		.loc 1 1537 54 is_stmt 1 view -0
 12919              		.cfi_startproc
 12920              		@ args = 0, pretend = 0, frame = 0
 12921              		@ frame_needed = 0, uses_anonymous_args = 0
 12922              		@ link register save eliminated.
1538:src/xeq.c     **** 		n <<= 1;
 12923              		.loc 1 1538 2 view .LVU3428
ARM GAS  /tmp/cc7LeJ71.s 			page 384


 12924              	.LBB2375:
 12925              	.LBI2375:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 12926              		.loc 1 1118 5 view .LVU3429
 12927              	.LBB2376:
1119:src/xeq.c     **** }
 12928              		.loc 1 1119 2 view .LVU3430
1119:src/xeq.c     **** }
 12929              		.loc 1 1119 24 is_stmt 0 view .LVU3431
 12930 0000 084B     		ldr	r3, .L960
 12931 0002 1B68     		ldr	r3, [r3]
 12932              	.LBE2376:
 12933              	.LBE2375:
1537:src/xeq.c     **** 	if (is_dblmode())
 12934              		.loc 1 1537 54 view .LVU3432
 12935 0004 10B4     		push	{r4}
 12936              		.cfi_def_cfa_offset 4
 12937              		.cfi_offset 4, -4
 12938              	.LBB2378:
 12939              	.LBB2377:
1119:src/xeq.c     **** }
 12940              		.loc 1 1119 24 view .LVU3433
 12941 0006 B3F8E847 		ldrh	r4, [r3, #2024]
 12942 000a 44F20103 		movw	r3, #16385
 12943              	.LBE2377:
 12944              	.LBE2378:
1538:src/xeq.c     **** 		n <<= 1;
 12945              		.loc 1 1538 5 view .LVU3434
 12946 000e 2340     		ands	r3, r3, r4
 12947 0010 B3F5804F 		cmp	r3, #16384
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12948              		.loc 1 1539 3 is_stmt 1 view .LVU3435
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 12949              		.loc 1 1539 5 is_stmt 0 view .LVU3436
 12950 0014 08BF     		it	eq
 12951 0016 5200     		lsleq	r2, r2, #1
 12952              	.LVL947:
1540:src/xeq.c     **** }
 12953              		.loc 1 1540 2 is_stmt 1 view .LVU3437
1541:src/xeq.c     **** 
 12954              		.loc 1 1541 1 is_stmt 0 view .LVU3438
 12955 0018 5DF8044B 		ldr	r4, [sp], #4
 12956              		.cfi_restore 4
 12957              		.cfi_def_cfa_offset 0
1540:src/xeq.c     **** }
 12958              		.loc 1 1540 2 view .LVU3439
 12959 001c D200     		lsls	r2, r2, #3
 12960              	.LVL948:
1540:src/xeq.c     **** }
 12961              		.loc 1 1540 2 view .LVU3440
 12962 001e FFF7FEBF 		b	xcopy
 12963              	.LVL949:
 12964              	.L961:
1540:src/xeq.c     **** }
 12965              		.loc 1 1540 2 view .LVU3441
 12966 0022 00BF     		.align	2
 12967              	.L960:
ARM GAS  /tmp/cc7LeJ71.s 			page 385


 12968 0024 00000000 		.word	main_ram
 12969              		.cfi_endproc
 12970              	.LFE105:
 12972              		.section	.text.zero_X,"ax",%progbits
 12973              		.align	1
 12974              		.p2align 2,,3
 12975              		.global	zero_X
 12976              		.syntax unified
 12977              		.thumb
 12978              		.thumb_func
 12979              		.fpu fpv4-sp-d16
 12981              	zero_X:
 12982              	.LFB107:
1550:src/xeq.c     **** 	set_zero(StackBase);
 12983              		.loc 1 1550 19 is_stmt 1 view -0
 12984              		.cfi_startproc
 12985              		@ args = 0, pretend = 0, frame = 0
 12986              		@ frame_needed = 0, uses_anonymous_args = 0
 12987              		@ link register save eliminated.
1551:src/xeq.c     **** }
 12988              		.loc 1 1551 2 view .LVU3443
 12989 0000 014B     		ldr	r3, .L963
 12990 0002 1868     		ldr	r0, [r3]
 12991 0004 FFF7FEBF 		b	set_zero
 12992              	.LVL950:
 12993              	.L964:
 12994              		.align	2
 12995              	.L963:
 12996 0008 00000000 		.word	StackBase
 12997              		.cfi_endproc
 12998              	.LFE107:
 13000              		.section	.text.zero_Y,"ax",%progbits
 13001              		.align	1
 13002              		.p2align 2,,3
 13003              		.global	zero_Y
 13004              		.syntax unified
 13005              		.thumb
 13006              		.thumb_func
 13007              		.fpu fpv4-sp-d16
 13009              	zero_Y:
 13010              	.LFB108:
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 13011              		.loc 1 1554 19 view -0
 13012              		.cfi_startproc
 13013              		@ args = 0, pretend = 0, frame = 0
 13014              		@ frame_needed = 0, uses_anonymous_args = 0
1555:src/xeq.c     **** }
 13015              		.loc 1 1555 2 view .LVU3445
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 13016              		.loc 1 1554 19 is_stmt 0 view .LVU3446
 13017 0000 08B5     		push	{r3, lr}
 13018              		.cfi_def_cfa_offset 8
 13019              		.cfi_offset 3, -8
 13020              		.cfi_offset 14, -4
1555:src/xeq.c     **** }
 13021              		.loc 1 1555 2 view .LVU3447
 13022 0002 6520     		movs	r0, #101
ARM GAS  /tmp/cc7LeJ71.s 			page 386


 13023 0004 FFF7FEFF 		bl	get_reg_n
 13024              	.LVL951:
1556:src/xeq.c     **** 
 13025              		.loc 1 1556 1 view .LVU3448
 13026 0008 BDE80840 		pop	{r3, lr}
 13027              		.cfi_restore 14
 13028              		.cfi_restore 3
 13029              		.cfi_def_cfa_offset 0
1555:src/xeq.c     **** }
 13030              		.loc 1 1555 2 view .LVU3449
 13031 000c FFF7FEBF 		b	set_zero
 13032              	.LVL952:
 13033              		.cfi_endproc
 13034              	.LFE108:
 13036              		.section	.text.clrx,"ax",%progbits
 13037              		.align	1
 13038              		.p2align 2,,3
 13039              		.global	clrx
 13040              		.syntax unified
 13041              		.thumb
 13042              		.thumb_func
 13043              		.fpu fpv4-sp-d16
 13045              	clrx:
 13046              	.LVL953:
 13047              	.LFB109:
1558:src/xeq.c     **** 	zero_X();
 13048              		.loc 1 1558 26 is_stmt 1 view -0
 13049              		.cfi_startproc
 13050              		@ args = 0, pretend = 0, frame = 0
 13051              		@ frame_needed = 0, uses_anonymous_args = 0
1559:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 13052              		.loc 1 1559 2 view .LVU3451
 13053              	.LBB2379:
 13054              	.LBI2379:
1550:src/xeq.c     **** 	set_zero(StackBase);
 13055              		.loc 1 1550 6 view .LVU3452
 13056              	.LBB2380:
1551:src/xeq.c     **** }
 13057              		.loc 1 1551 2 view .LVU3453
 13058 0000 1E4B     		ldr	r3, .L982
 13059              	.LBE2380:
 13060              	.LBE2379:
1558:src/xeq.c     **** 	zero_X();
 13061              		.loc 1 1558 26 is_stmt 0 view .LVU3454
 13062 0002 10B5     		push	{r4, lr}
 13063              		.cfi_def_cfa_offset 8
 13064              		.cfi_offset 4, -8
 13065              		.cfi_offset 14, -4
1561:src/xeq.c     **** 		zero_Y();
 13066              		.loc 1 1561 6 view .LVU3455
 13067 0004 1E4C     		ldr	r4, .L982+4
 13068              	.LBB2382:
 13069              	.LBB2381:
1551:src/xeq.c     **** }
 13070              		.loc 1 1551 2 view .LVU3456
 13071 0006 1868     		ldr	r0, [r3]
 13072              	.LVL954:
ARM GAS  /tmp/cc7LeJ71.s 			page 387


1551:src/xeq.c     **** }
 13073              		.loc 1 1551 2 view .LVU3457
 13074 0008 FFF7FEFF 		bl	set_zero
 13075              	.LVL955:
 13076              	.LBE2381:
 13077              	.LBE2382:
1561:src/xeq.c     **** 		zero_Y();
 13078              		.loc 1 1561 2 is_stmt 1 view .LVU3458
1561:src/xeq.c     **** 		zero_Y();
 13079              		.loc 1 1561 6 is_stmt 0 view .LVU3459
 13080 000c 2368     		ldr	r3, [r4]
 13081 000e 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
1561:src/xeq.c     **** 		zero_Y();
 13082              		.loc 1 1561 5 view .LVU3460
 13083 0012 5007     		lsls	r0, r2, #29
 13084 0014 03D5     		bpl	.L968
1561:src/xeq.c     **** 		zero_Y();
 13085              		.loc 1 1561 6 discriminator 1 view .LVU3461
 13086 0016 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 13087 001a 5907     		lsls	r1, r3, #29
 13088 001c 05D4     		bmi	.L980
 13089              	.L968:
1571:src/xeq.c     **** }
 13090              		.loc 1 1571 2 is_stmt 1 view .LVU3462
 13091              	.LBB2383:
 13092              	.LBI2383:
 771:src/xeq.c     ****     State2.state_lift = 0;
 13093              		.loc 1 771 13 view .LVU3463
 13094              	.LBB2384:
 772:src/xeq.c     **** }
 13095              		.loc 1 772 5 view .LVU3464
 772:src/xeq.c     **** }
 13096              		.loc 1 772 23 is_stmt 0 view .LVU3465
 13097 001e 194B     		ldr	r3, .L982+8
 13098 0020 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13099 0022 6FF38612 		bfc	r2, #6, #1
 13100 0026 DA75     		strb	r2, [r3, #23]
 13101              	.LBE2384:
 13102              	.LBE2383:
1572:src/xeq.c     **** 
 13103              		.loc 1 1572 1 view .LVU3466
 13104 0028 10BD     		pop	{r4, pc}
 13105              	.L980:
1562:src/xeq.c     **** 		if (POLAR_DISPLAY) {
 13106              		.loc 1 1562 3 is_stmt 1 view .LVU3467
 13107              	.LBB2386:
 13108              	.LBI2386:
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 13109              		.loc 1 1554 6 view .LVU3468
 13110              	.LBB2387:
1555:src/xeq.c     **** }
 13111              		.loc 1 1555 2 view .LVU3469
 13112 002a 6520     		movs	r0, #101
 13113 002c FFF7FEFF 		bl	get_reg_n
 13114              	.LVL956:
 13115 0030 FFF7FEFF 		bl	set_zero
 13116              	.LVL957:
ARM GAS  /tmp/cc7LeJ71.s 			page 388


 13117              	.LBE2387:
 13118              	.LBE2386:
1563:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13119              		.loc 1 1563 3 view .LVU3470
1563:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13120              		.loc 1 1563 7 is_stmt 0 view .LVU3471
 13121 0034 2368     		ldr	r3, [r4]
 13122 0036 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
1563:src/xeq.c     **** 			set_zero(get_reg_n(regJ_idx));
 13123              		.loc 1 1563 6 view .LVU3472
 13124 003a 1207     		lsls	r2, r2, #28
 13125 003c 11D4     		bmi	.L981
 13126              	.L969:
1567:src/xeq.c     **** 		CLEAR_IMAG;
 13127              		.loc 1 1567 3 is_stmt 1 view .LVU3473
 13128 003e 93F8E417 		ldrb	r1, [r3, #2020]	@ zero_extendqisi2
1568:src/xeq.c     **** 	}
 13129              		.loc 1 1568 3 is_stmt 0 view .LVU3474
 13130 0042 93F8EB27 		ldrb	r2, [r3, #2027]	@ zero_extendqisi2
1567:src/xeq.c     **** 		CLEAR_IMAG;
 13131              		.loc 1 1567 3 view .LVU3475
 13132 0046 6FF3C301 		bfc	r1, #3, #1
1568:src/xeq.c     **** 	}
 13133              		.loc 1 1568 3 view .LVU3476
 13134 004a 6FF3C302 		bfc	r2, #3, #1
 13135 004e 83F8EB27 		strb	r2, [r3, #2027]
1567:src/xeq.c     **** 		CLEAR_IMAG;
 13136              		.loc 1 1567 3 view .LVU3477
 13137 0052 83F8E417 		strb	r1, [r3, #2020]
1568:src/xeq.c     **** 	}
 13138              		.loc 1 1568 3 is_stmt 1 view .LVU3478
1571:src/xeq.c     **** }
 13139              		.loc 1 1571 2 view .LVU3479
 13140              	.LBB2388:
 771:src/xeq.c     ****     State2.state_lift = 0;
 13141              		.loc 1 771 13 view .LVU3480
 13142              	.LBB2385:
 772:src/xeq.c     **** }
 13143              		.loc 1 772 5 view .LVU3481
 772:src/xeq.c     **** }
 13144              		.loc 1 772 23 is_stmt 0 view .LVU3482
 13145 0056 0B4B     		ldr	r3, .L982+8
 13146 0058 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
 13147 005a 6FF38612 		bfc	r2, #6, #1
 13148 005e DA75     		strb	r2, [r3, #23]
 13149              	.LBE2385:
 13150              	.LBE2388:
1572:src/xeq.c     **** 
 13151              		.loc 1 1572 1 view .LVU3483
 13152 0060 10BD     		pop	{r4, pc}
 13153              	.L981:
1564:src/xeq.c     **** 			set_zero(get_reg_n(regK_idx));
 13154              		.loc 1 1564 4 is_stmt 1 view .LVU3484
 13155 0062 6E20     		movs	r0, #110
 13156 0064 FFF7FEFF 		bl	get_reg_n
 13157              	.LVL958:
 13158 0068 FFF7FEFF 		bl	set_zero
ARM GAS  /tmp/cc7LeJ71.s 			page 389


 13159              	.LVL959:
1565:src/xeq.c     **** 		}
 13160              		.loc 1 1565 4 view .LVU3485
 13161 006c 6F20     		movs	r0, #111
 13162 006e FFF7FEFF 		bl	get_reg_n
 13163              	.LVL960:
 13164 0072 FFF7FEFF 		bl	set_zero
 13165              	.LVL961:
 13166 0076 2368     		ldr	r3, [r4]
 13167 0078 E1E7     		b	.L969
 13168              	.L983:
 13169 007a 00BF     		.align	2
 13170              	.L982:
 13171 007c 00000000 		.word	StackBase
 13172 0080 00000000 		.word	main_ram
 13173 0084 00000000 		.word	StateWhileOn
 13174              		.cfi_endproc
 13175              	.LFE109:
 13177              		.section	.text.clrstk,"ax",%progbits
 13178              		.align	1
 13179              		.p2align 2,,3
 13180              		.global	clrstk
 13181              		.syntax unified
 13182              		.thumb
 13183              		.thumb_func
 13184              		.fpu fpv4-sp-d16
 13186              	clrstk:
 13187              	.LVL962:
 13188              	.LFB110:
1576:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13189              		.loc 1 1576 28 view -0
 13190              		.cfi_startproc
 13191              		@ args = 0, pretend = 0, frame = 0
 13192              		@ frame_needed = 0, uses_anonymous_args = 0
1577:src/xeq.c     **** 	set_lift();
 13193              		.loc 1 1577 2 view .LVU3487
1576:src/xeq.c     **** 	zero_regs(StackBase, stack_size());
 13194              		.loc 1 1576 28 is_stmt 0 view .LVU3488
 13195 0000 08B5     		push	{r3, lr}
 13196              		.cfi_def_cfa_offset 8
 13197              		.cfi_offset 3, -8
 13198              		.cfi_offset 14, -4
 13199              	.LBB2389:
 13200              	.LBB2390:
 713:src/xeq.c     **** 		return 4;
 13201              		.loc 1 713 8 view .LVU3489
 13202 0002 164B     		ldr	r3, .L991
 13203              	.LBE2390:
 13204              	.LBE2389:
1577:src/xeq.c     **** 	set_lift();
 13205              		.loc 1 1577 2 view .LVU3490
 13206 0004 164A     		ldr	r2, .L991+4
 13207              	.LBB2396:
 13208              	.LBB2393:
 713:src/xeq.c     **** 		return 4;
 13209              		.loc 1 713 8 view .LVU3491
 13210 0006 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc7LeJ71.s 			page 390


 13211              	.LBE2393:
 13212              	.LBE2396:
1577:src/xeq.c     **** 	set_lift();
 13213              		.loc 1 1577 2 view .LVU3492
 13214 0008 1068     		ldr	r0, [r2]
 13215              	.LVL963:
 13216              	.LBB2397:
 13217              	.LBI2389:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13218              		.loc 1 712 5 is_stmt 1 view .LVU3493
 13219              	.LBB2394:
 713:src/xeq.c     **** 		return 4;
 13220              		.loc 1 713 2 view .LVU3494
 713:src/xeq.c     **** 		return 4;
 13221              		.loc 1 713 6 is_stmt 0 view .LVU3495
 13222 000a 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 13223              		.loc 1 713 5 view .LVU3496
 13224 000e 1207     		lsls	r2, r2, #28
 13225 0010 22D5     		bpl	.L986
 13226              	.LBB2391:
 13227              	.LBI2391:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 13228              		.loc 1 185 5 is_stmt 1 view .LVU3497
 13229              	.LBB2392:
 186:src/xeq.c     **** }
 13230              		.loc 1 186 2 view .LVU3498
 186:src/xeq.c     **** }
 13231              		.loc 1 186 9 is_stmt 0 view .LVU3499
 13232 0012 B3F8E027 		ldrh	r2, [r3, #2016]
 13233              	.LBE2392:
 13234              	.LBE2391:
 713:src/xeq.c     **** 		return 4;
 13235              		.loc 1 713 27 view .LVU3500
 13236 0016 920B     		lsrs	r2, r2, #14
 13237 0018 032A     		cmp	r2, #3
 13238 001a 15D0     		beq	.L990
 715:src/xeq.c     **** }
 13239              		.loc 1 715 9 view .LVU3501
 13240 001c 0822     		movs	r2, #8
 13241              	.L985:
 13242              	.LVL964:
 715:src/xeq.c     **** }
 13243              		.loc 1 715 9 view .LVU3502
 13244              	.LBE2394:
 13245              	.LBE2397:
 13246              	.LBB2398:
 13247              	.LBI2398:
1518:src/xeq.c     **** #if 0
 13248              		.loc 1 1518 6 is_stmt 1 view .LVU3503
 13249              	.LBB2399:
1533:src/xeq.c     **** #endif
 13250              		.loc 1 1533 2 view .LVU3504
 13251              	.LBB2400:
 13252              	.LBI2400:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13253              		.loc 1 1118 5 view .LVU3505
ARM GAS  /tmp/cc7LeJ71.s 			page 391


 13254              	.LBB2401:
1119:src/xeq.c     **** }
 13255              		.loc 1 1119 2 view .LVU3506
1119:src/xeq.c     **** }
 13256              		.loc 1 1119 24 is_stmt 0 view .LVU3507
 13257 001e B3F8E817 		ldrh	r1, [r3, #2024]
 13258 0022 44F20103 		movw	r3, #16385
 13259 0026 0B40     		ands	r3, r3, r1
 13260 0028 A3F58043 		sub	r3, r3, #16384
 13261 002c B3FA83F3 		clz	r3, r3
 13262 0030 5B09     		lsrs	r3, r3, #5
 13263              	.LBE2401:
 13264              	.LBE2400:
1533:src/xeq.c     **** #endif
 13265              		.loc 1 1533 24 view .LVU3508
 13266 0032 0333     		adds	r3, r3, #3
1533:src/xeq.c     **** #endif
 13267              		.loc 1 1533 2 view .LVU3509
 13268 0034 9A40     		lsls	r2, r2, r3
 13269              	.LVL965:
1533:src/xeq.c     **** #endif
 13270              		.loc 1 1533 2 view .LVU3510
 13271 0036 0021     		movs	r1, #0
 13272 0038 FFF7FEFF 		bl	xset
 13273              	.LVL966:
1533:src/xeq.c     **** #endif
 13274              		.loc 1 1533 2 view .LVU3511
 13275              	.LBE2399:
 13276              	.LBE2398:
1578:src/xeq.c     **** }
 13277              		.loc 1 1578 2 is_stmt 1 view .LVU3512
 13278              	.LBB2402:
 13279              	.LBI2402:
 767:src/xeq.c     ****     State2.state_lift = 1;
 13280              		.loc 1 767 6 view .LVU3513
 13281              	.LBB2403:
 768:src/xeq.c     **** }
 13282              		.loc 1 768 5 view .LVU3514
 768:src/xeq.c     **** }
 13283              		.loc 1 768 23 is_stmt 0 view .LVU3515
 13284 003c 094A     		ldr	r2, .L991+8
 13285 003e D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 13286 0040 43F04003 		orr	r3, r3, #64
 13287 0044 D375     		strb	r3, [r2, #23]
 13288              	.LBE2403:
 13289              	.LBE2402:
1579:src/xeq.c     **** 
 13290              		.loc 1 1579 1 view .LVU3516
 13291 0046 08BD     		pop	{r3, pc}
 13292              	.L990:
 13293              	.LBB2404:
 13294              	.LBB2395:
 713:src/xeq.c     **** 		return 4;
 13295              		.loc 1 713 44 view .LVU3517
 13296 0048 074A     		ldr	r2, .L991+12
 713:src/xeq.c     **** 		return 4;
 13297              		.loc 1 713 41 view .LVU3518
ARM GAS  /tmp/cc7LeJ71.s 			page 392


 13298 004a 92F90120 		ldrsb	r2, [r2, #1]
 13299 004e 002A     		cmp	r2, #0
 714:src/xeq.c     **** 	return 8;
 13300              		.loc 1 714 10 view .LVU3519
 13301 0050 B4BF     		ite	lt
 13302 0052 0822     		movlt	r2, #8
 13303 0054 0422     		movge	r2, #4
 13304 0056 E2E7     		b	.L985
 13305              	.L986:
 13306 0058 0422     		movs	r2, #4
 13307 005a E0E7     		b	.L985
 13308              	.L992:
 13309              		.align	2
 13310              	.L991:
 13311 005c 00000000 		.word	main_ram
 13312 0060 00000000 		.word	StackBase
 13313 0064 00000000 		.word	StateWhileOn
 13314 0068 00000000 		.word	XromParams
 13315              	.LBE2395:
 13316              	.LBE2404:
 13317              		.cfi_endproc
 13318              	.LFE110:
 13320              		.section	.text.clrreg,"ax",%progbits
 13321              		.align	1
 13322              		.p2align 2,,3
 13323              		.global	clrreg
 13324              		.syntax unified
 13325              		.thumb
 13326              		.thumb_func
 13327              		.fpu fpv4-sp-d16
 13329              	clrreg:
 13330              	.LVL967:
 13331              	.LFB111:
1584:src/xeq.c     **** 	const int local = local_regs();
 13332              		.loc 1 1584 28 is_stmt 1 view -0
 13333              		.cfi_startproc
 13334              		@ args = 0, pretend = 0, frame = 0
 13335              		@ frame_needed = 0, uses_anonymous_args = 0
1585:src/xeq.c     **** 	process_cmdline_set_lift();
 13336              		.loc 1 1585 2 view .LVU3521
 13337              	.LBB2405:
 13338              	.LBI2405:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 13339              		.loc 1 233 5 view .LVU3522
 13340              	.LBE2405:
 234:src/xeq.c     **** }
 13341              		.loc 1 234 2 view .LVU3523
 13342              	.LBB2436:
 13343              	.LBB2406:
 13344              	.LBI2406:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 13345              		.loc 1 225 5 view .LVU3524
 13346              	.LBB2407:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13347              		.loc 1 226 2 view .LVU3525
 13348              	.LBB2408:
 13349              	.LBI2408:
ARM GAS  /tmp/cc7LeJ71.s 			page 393


1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13350              		.loc 1 1118 5 view .LVU3526
 13351              	.LBB2409:
1119:src/xeq.c     **** }
 13352              		.loc 1 1119 2 view .LVU3527
 13353              	.LBE2409:
 13354              	.LBE2408:
 13355              	.LBE2407:
 13356              	.LBE2406:
 13357              	.LBE2436:
1584:src/xeq.c     **** 	const int local = local_regs();
 13358              		.loc 1 1584 28 is_stmt 0 view .LVU3528
 13359 0000 70B5     		push	{r4, r5, r6, lr}
 13360              		.cfi_def_cfa_offset 16
 13361              		.cfi_offset 4, -16
 13362              		.cfi_offset 5, -12
 13363              		.cfi_offset 6, -8
 13364              		.cfi_offset 14, -4
 13365              	.LBB2437:
 13366              	.LBB2432:
 13367              	.LBB2428:
 13368              	.LBB2413:
 13369              	.LBB2410:
1119:src/xeq.c     **** }
 13370              		.loc 1 1119 12 view .LVU3529
 13371 0002 474C     		ldr	r4, .L1013
 13372 0004 2268     		ldr	r2, [r4]
 13373              	.LVL968:
1119:src/xeq.c     **** }
 13374              		.loc 1 1119 12 view .LVU3530
 13375              	.LBE2410:
 13376              	.LBE2413:
 227:src/xeq.c     **** }
 13377              		.loc 1 227 2 is_stmt 1 view .LVU3531
 13378              	.LBB2414:
 13379              	.LBI2414:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 13380              		.loc 1 217 5 view .LVU3532
 13381              	.LBB2415:
 218:src/xeq.c     **** }
 13382              		.loc 1 218 2 view .LVU3533
 218:src/xeq.c     **** }
 13383              		.loc 1 218 9 is_stmt 0 view .LVU3534
 13384 0006 B2F8DE37 		ldrh	r3, [r2, #2014]
 13385 000a 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 13386              		.loc 1 218 57 view .LVU3535
 13387 000e 002B     		cmp	r3, #0
 13388 0010 58DB     		blt	.L1009
 13389              	.LVL969:
 218:src/xeq.c     **** }
 13390              		.loc 1 218 57 view .LVU3536
 13391              	.LBE2415:
 13392              	.LBE2414:
 13393              	.LBE2428:
 13394              	.LBE2432:
 13395              	.LBE2437:
ARM GAS  /tmp/cc7LeJ71.s 			page 394


1586:src/xeq.c     **** 
 13396              		.loc 1 1586 2 is_stmt 1 view .LVU3537
 13397              	.LBB2438:
 13398              	.LBI2438:
1332:src/xeq.c     **** 	process_cmdline();
 13399              		.loc 1 1332 6 view .LVU3538
 13400              	.LBE2438:
1333:src/xeq.c     **** 	set_lift();
 13401              		.loc 1 1333 2 view .LVU3539
 13402              	.LBB2449:
 13403              	.LBB2439:
 13404              	.LBI2439:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 13405              		.loc 1 1226 6 view .LVU3540
 13406              	.LBB2440:
1227:src/xeq.c     **** 
 13407              		.loc 1 1227 2 view .LVU3541
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13408              		.loc 1 1229 2 view .LVU3542
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13409              		.loc 1 1229 6 is_stmt 0 view .LVU3543
 13410 0012 444D     		ldr	r5, .L1013+4
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13411              		.loc 1 1229 5 view .LVU3544
 13412 0014 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13413              	.LBE2440:
 13414              	.LBE2439:
 13415              	.LBE2449:
 13416              	.LBB2450:
 13417              	.LBB2433:
 13418              	.LBB2429:
 13419              	.LBB2421:
 13420              	.LBB2416:
 13421 0016 0026     		movs	r6, #0
 13422              	.LBE2416:
 13423              	.LBE2421:
 13424              	.LBE2429:
 13425              	.LBE2433:
 13426              	.LBE2450:
 13427              	.LBB2451:
 13428              	.LBB2444:
 13429              	.LBB2441:
 13430 0018 002B     		cmp	r3, #0
 13431 001a 69D1     		bne	.L1010
 13432              	.LVL970:
 13433              	.L995:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13434              		.loc 1 1229 5 view .LVU3545
 13435              	.LBE2441:
 13436              	.LBE2444:
 13437              	.LBE2451:
1334:src/xeq.c     **** }
 13438              		.loc 1 1334 2 is_stmt 1 view .LVU3546
 13439              	.LBB2452:
 13440              	.LBB2445:
 13441              	.LBI2445:
 767:src/xeq.c     ****     State2.state_lift = 1;
ARM GAS  /tmp/cc7LeJ71.s 			page 395


 13442              		.loc 1 767 6 view .LVU3547
 13443              	.LBB2446:
 768:src/xeq.c     **** }
 13444              		.loc 1 768 5 view .LVU3548
 768:src/xeq.c     **** }
 13445              		.loc 1 768 23 is_stmt 0 view .LVU3549
 13446 001c EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 13447 001e 43F04003 		orr	r3, r3, #64
 13448 0022 EB75     		strb	r3, [r5, #23]
 13449              	.LBE2446:
 13450              	.LBE2445:
 13451              	.LBE2452:
1589:src/xeq.c     **** 
 13452              		.loc 1 1589 2 is_stmt 1 view .LVU3550
 13453 0024 0020     		movs	r0, #0
 13454 0026 FFF7FEFF 		bl	get_reg_n
 13455              	.LVL971:
 13456              	.LBB2453:
 13457              	.LBB2454:
 13458              	.LBB2455:
 13459              	.LBB2456:
 13460              	.LBB2457:
1119:src/xeq.c     **** }
 13461              		.loc 1 1119 12 is_stmt 0 view .LVU3551
 13462 002a 2168     		ldr	r1, [r4]
1119:src/xeq.c     **** }
 13463              		.loc 1 1119 24 view .LVU3552
 13464 002c B1F8E827 		ldrh	r2, [r1, #2024]
 13465 0030 44F20103 		movw	r3, #16385
 13466 0034 1340     		ands	r3, r3, r2
 13467              	.LBE2457:
 13468              	.LBE2456:
 13469              	.LBE2455:
 13470              	.LBE2454:
 13471              	.LBI2453:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 13472              		.loc 1 253 14 is_stmt 1 view .LVU3553
 13473              	.LBE2453:
 254:src/xeq.c     **** }
 13474              		.loc 1 254 2 view .LVU3554
 13475              	.LVL972:
 13476              	.LBB2472:
 13477              	.LBB2468:
 13478              	.LBI2454:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 13479              		.loc 1 241 14 view .LVU3555
 13480              	.LBB2464:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13481              		.loc 1 242 2 view .LVU3556
 13482              	.LBB2459:
 13483              	.LBI2456:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13484              		.loc 1 1118 5 view .LVU3557
 13485              	.LBB2458:
1119:src/xeq.c     **** }
 13486              		.loc 1 1119 2 view .LVU3558
 13487              	.LBE2458:
ARM GAS  /tmp/cc7LeJ71.s 			page 396


 13488              	.LBE2459:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 13489              		.loc 1 242 5 is_stmt 0 view .LVU3559
 13490 0036 B3F5804F 		cmp	r3, #16384
 13491              	.LBB2460:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13492              		.loc 1 243 3 is_stmt 1 view .LVU3560
 244:src/xeq.c     **** 	}
 13493              		.loc 1 244 3 view .LVU3561
 13494              	.LVL973:
 244:src/xeq.c     **** 	}
 13495              		.loc 1 244 3 is_stmt 0 view .LVU3562
 13496              	.LBE2460:
 13497              	.LBE2464:
 13498              	.LBE2468:
 13499              	.LBE2472:
 13500              	.LBB2473:
 13501              	.LBI2473:
1518:src/xeq.c     **** #if 0
 13502              		.loc 1 1518 6 is_stmt 1 view .LVU3563
 13503              	.LBB2474:
1533:src/xeq.c     **** #endif
 13504              		.loc 1 1533 2 view .LVU3564
 13505              	.LBB2475:
 13506              	.LBI2475:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13507              		.loc 1 1118 5 view .LVU3565
 13508              	.LBB2476:
1119:src/xeq.c     **** }
 13509              		.loc 1 1119 2 view .LVU3566
 13510              	.LBE2476:
 13511              	.LBE2475:
 13512              	.LBE2474:
 13513              	.LBE2473:
 13514              	.LBB2484:
 13515              	.LBB2469:
 13516              	.LBB2465:
 13517              	.LBB2461:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13518              		.loc 1 243 24 is_stmt 0 view .LVU3567
 13519 003a 91F8CF27 		ldrb	r2, [r1, #1999]	@ zero_extendqisi2
 13520              	.LBE2461:
 13521              	.LBE2465:
 13522              	.LBE2469:
 13523              	.LBE2484:
 13524              	.LBB2485:
 13525              	.LBB2481:
 13526              	.LBB2479:
 13527              	.LBB2477:
1119:src/xeq.c     **** }
 13528              		.loc 1 1119 24 view .LVU3568
 13529 003e A3F58043 		sub	r3, r3, #16384
 13530 0042 B3FA83F3 		clz	r3, r3
 13531              	.LBE2477:
 13532              	.LBE2479:
 13533              	.LBE2481:
 13534              	.LBE2485:
ARM GAS  /tmp/cc7LeJ71.s 			page 397


 13535              	.LBB2486:
 13536              	.LBB2470:
 13537              	.LBB2466:
 13538              	.LBB2462:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 13539              		.loc 1 243 13 view .LVU3569
 13540 0046 08BF     		it	eq
 13541 0048 0C3A     		subeq	r2, r2, #12
 13542              	.LBE2462:
 13543              	.LBE2466:
 13544              	.LBE2470:
 13545              	.LBE2486:
 13546              	.LBB2487:
 13547              	.LBB2482:
 13548              	.LBB2480:
 13549              	.LBB2478:
1119:src/xeq.c     **** }
 13550              		.loc 1 1119 24 view .LVU3570
 13551 004a 4FEA5313 		lsr	r3, r3, #5
 13552              	.LBE2478:
 13553              	.LBE2480:
 13554              	.LBE2482:
 13555              	.LBE2487:
 13556              	.LBB2488:
 13557              	.LBB2471:
 13558              	.LBB2467:
 13559              	.LBB2463:
 244:src/xeq.c     **** 	}
 13560              		.loc 1 244 67 view .LVU3571
 13561 004e 08BF     		it	eq
 13562 0050 5210     		asreq	r2, r2, #1
 13563              	.LBE2463:
 13564              	.LBE2467:
 13565              	.LBE2471:
 13566              	.LBE2488:
 13567              	.LBB2489:
 13568              	.LBB2483:
1533:src/xeq.c     **** #endif
 13569              		.loc 1 1533 24 view .LVU3572
 13570 0052 0333     		adds	r3, r3, #3
1533:src/xeq.c     **** #endif
 13571              		.loc 1 1533 2 view .LVU3573
 13572 0054 9A40     		lsls	r2, r2, r3
 13573 0056 0021     		movs	r1, #0
 13574 0058 FFF7FEFF 		bl	xset
 13575              	.LVL974:
1533:src/xeq.c     **** #endif
 13576              		.loc 1 1533 2 view .LVU3574
 13577              	.LBE2483:
 13578              	.LBE2489:
1592:src/xeq.c     **** 		zero_regs(get_reg_n(regA_idx), 4);
 13579              		.loc 1 1592 2 is_stmt 1 view .LVU3575
 13580              	.LBB2490:
 13581              	.LBI2490:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 13582              		.loc 1 712 5 view .LVU3576
 13583              	.LBB2491:
ARM GAS  /tmp/cc7LeJ71.s 			page 398


 713:src/xeq.c     **** 		return 4;
 13584              		.loc 1 713 2 view .LVU3577
 713:src/xeq.c     **** 		return 4;
 13585              		.loc 1 713 8 is_stmt 0 view .LVU3578
 13586 005c 2368     		ldr	r3, [r4]
 713:src/xeq.c     **** 		return 4;
 13587              		.loc 1 713 6 view .LVU3579
 13588 005e 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 13589              		.loc 1 713 5 view .LVU3580
 13590 0062 1207     		lsls	r2, r2, #28
 13591 0064 1CD5     		bpl	.L998
 13592              	.LBB2492:
 13593              	.LBI2492:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 13594              		.loc 1 185 5 is_stmt 1 view .LVU3581
 13595              	.LBB2493:
 186:src/xeq.c     **** }
 13596              		.loc 1 186 2 view .LVU3582
 186:src/xeq.c     **** }
 13597              		.loc 1 186 9 is_stmt 0 view .LVU3583
 13598 0066 B3F8E037 		ldrh	r3, [r3, #2016]
 13599              	.LBE2493:
 13600              	.LBE2492:
 713:src/xeq.c     **** 		return 4;
 13601              		.loc 1 713 27 view .LVU3584
 13602 006a 9B0B     		lsrs	r3, r3, #14
 13603 006c 032B     		cmp	r3, #3
 13604 006e 12D0     		beq	.L1011
 13605              	.L999:
 13606              	.LBE2491:
 13607              	.LBE2490:
1596:src/xeq.c     **** 
 13608              		.loc 1 1596 2 is_stmt 1 view .LVU3585
 13609 0070 6E20     		movs	r0, #110
 13610 0072 FFF7FEFF 		bl	get_reg_n
 13611              	.LVL975:
 13612              	.LBB2495:
 13613              	.LBI2495:
1518:src/xeq.c     **** #if 0
 13614              		.loc 1 1518 6 view .LVU3586
 13615              	.LBB2496:
1533:src/xeq.c     **** #endif
 13616              		.loc 1 1533 2 view .LVU3587
 13617              	.LBB2497:
 13618              	.LBI2497:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13619              		.loc 1 1118 5 view .LVU3588
 13620              	.LBB2498:
1119:src/xeq.c     **** }
 13621              		.loc 1 1119 2 view .LVU3589
1119:src/xeq.c     **** }
 13622              		.loc 1 1119 24 is_stmt 0 view .LVU3590
 13623 0076 2368     		ldr	r3, [r4]
 13624 0078 B3F8E827 		ldrh	r2, [r3, #2024]
 13625 007c 44F20105 		movw	r5, #16385
 13626 0080 2A40     		ands	r2, r2, r5
ARM GAS  /tmp/cc7LeJ71.s 			page 399


 13627              	.LBE2498:
 13628              	.LBE2497:
1533:src/xeq.c     **** #endif
 13629              		.loc 1 1533 2 view .LVU3591
 13630 0082 B2F5804F 		cmp	r2, #16384
 13631 0086 0CBF     		ite	eq
 13632 0088 2022     		moveq	r2, #32
 13633 008a 1022     		movne	r2, #16
 13634 008c 0021     		movs	r1, #0
 13635 008e FFF7FEFF 		bl	xset
 13636              	.LVL976:
1533:src/xeq.c     **** #endif
 13637              		.loc 1 1533 2 view .LVU3592
 13638              	.LBE2496:
 13639              	.LBE2495:
1599:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13640              		.loc 1 1599 2 is_stmt 1 view .LVU3593
1599:src/xeq.c     **** 		zero_regs(get_reg_n(LOCAL_REG_BASE), local);
 13641              		.loc 1 1599 5 is_stmt 0 view .LVU3594
 13642 0092 86BB     		cbnz	r6, .L1012
1601:src/xeq.c     **** 
 13643              		.loc 1 1601 1 view .LVU3595
 13644 0094 70BD     		pop	{r4, r5, r6, pc}
 13645              	.L1011:
 13646              	.LBB2499:
 13647              	.LBB2494:
 713:src/xeq.c     **** 		return 4;
 13648              		.loc 1 713 44 view .LVU3596
 13649 0096 244B     		ldr	r3, .L1013+8
 713:src/xeq.c     **** 		return 4;
 13650              		.loc 1 713 41 view .LVU3597
 13651 0098 93F90130 		ldrsb	r3, [r3, #1]
 13652 009c 002B     		cmp	r3, #0
 13653 009e E7DB     		blt	.L999
 13654              	.L998:
 714:src/xeq.c     **** 	return 8;
 13655              		.loc 1 714 3 is_stmt 1 view .LVU3598
 13656              	.LBE2494:
 13657              	.LBE2499:
1593:src/xeq.c     **** 
 13658              		.loc 1 1593 3 view .LVU3599
 13659 00a0 6820     		movs	r0, #104
 13660 00a2 FFF7FEFF 		bl	get_reg_n
 13661              	.LVL977:
 13662              	.LBB2500:
 13663              	.LBI2500:
1518:src/xeq.c     **** #if 0
 13664              		.loc 1 1518 6 view .LVU3600
 13665              	.LBB2501:
1533:src/xeq.c     **** #endif
 13666              		.loc 1 1533 2 view .LVU3601
 13667              	.LBB2502:
 13668              	.LBI2502:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13669              		.loc 1 1118 5 view .LVU3602
 13670              	.LBB2503:
1119:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 400


 13671              		.loc 1 1119 2 view .LVU3603
1119:src/xeq.c     **** }
 13672              		.loc 1 1119 24 is_stmt 0 view .LVU3604
 13673 00a6 2368     		ldr	r3, [r4]
 13674 00a8 B3F8E837 		ldrh	r3, [r3, #2024]
 13675 00ac 44F20102 		movw	r2, #16385
 13676 00b0 1A40     		ands	r2, r2, r3
 13677              	.LBE2503:
 13678              	.LBE2502:
1533:src/xeq.c     **** #endif
 13679              		.loc 1 1533 2 view .LVU3605
 13680 00b2 B2F5804F 		cmp	r2, #16384
 13681 00b6 0CBF     		ite	eq
 13682 00b8 4022     		moveq	r2, #64
 13683 00ba 2022     		movne	r2, #32
 13684 00bc 0021     		movs	r1, #0
 13685 00be FFF7FEFF 		bl	xset
 13686              	.LVL978:
1535:src/xeq.c     **** 
 13687              		.loc 1 1535 1 view .LVU3606
 13688 00c2 D5E7     		b	.L999
 13689              	.LVL979:
 13690              	.L1009:
1535:src/xeq.c     **** 
 13691              		.loc 1 1535 1 view .LVU3607
 13692              	.LBE2501:
 13693              	.LBE2500:
 13694              	.LBB2504:
 13695              	.LBB2434:
 13696              	.LBB2430:
 13697              	.LBB2422:
 13698              	.LBB2417:
 218:src/xeq.c     **** }
 13699              		.loc 1 218 25 view .LVU3608
 13700 00c4 1948     		ldr	r0, .L1013+12
 13701              	.LVL980:
 218:src/xeq.c     **** }
 13702              		.loc 1 218 25 view .LVU3609
 13703              	.LBE2417:
 13704              	.LBE2422:
 13705              	.LBB2423:
 13706              	.LBB2411:
1119:src/xeq.c     **** }
 13707              		.loc 1 1119 24 view .LVU3610
 13708 00c6 B2F8E817 		ldrh	r1, [r2, #2024]
 13709              	.LBE2411:
 13710              	.LBE2423:
 13711              	.LBB2424:
 13712              	.LBB2418:
 218:src/xeq.c     **** }
 13713              		.loc 1 218 25 view .LVU3611
 13714 00ca 0268     		ldr	r2, [r0]
 13715              	.LVL981:
 218:src/xeq.c     **** }
 13716              		.loc 1 218 25 view .LVU3612
 13717              	.LBE2418:
 13718              	.LBE2424:
ARM GAS  /tmp/cc7LeJ71.s 			page 401


 13719              	.LBE2430:
 13720              	.LBE2434:
 13721              	.LBE2504:
 13722              	.LBB2505:
 13723              	.LBB2447:
 13724              	.LBB2442:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13725              		.loc 1 1229 6 view .LVU3613
 13726 00cc 154D     		ldr	r5, .L1013+4
 13727              	.LBE2442:
 13728              	.LBE2447:
 13729              	.LBE2505:
 13730              	.LBB2506:
 13731              	.LBB2435:
 13732              	.LBB2431:
 13733              	.LBB2425:
 13734              	.LBB2419:
 218:src/xeq.c     **** }
 13735              		.loc 1 218 57 view .LVU3614
 13736 00ce 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 13737              	.LBE2419:
 13738              	.LBE2425:
 13739              	.LBB2426:
 13740              	.LBB2412:
1119:src/xeq.c     **** }
 13741              		.loc 1 1119 24 view .LVU3615
 13742 00d2 44F20106 		movw	r6, #16385
 13743              	.LBE2412:
 13744              	.LBE2426:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 13745              		.loc 1 226 73 view .LVU3616
 13746 00d6 0E40     		ands	r6, r6, r1
 13747 00d8 A6F58043 		sub	r3, r6, #16384
 13748 00dc B3FA83F3 		clz	r3, r3
 13749 00e0 5B09     		lsrs	r3, r3, #5
 13750 00e2 0233     		adds	r3, r3, #2
 13751              	.LBB2427:
 13752              	.LBB2420:
 218:src/xeq.c     **** }
 13753              		.loc 1 218 57 view .LVU3617
 13754 00e4 C2F30B06 		ubfx	r6, r2, #0, #12
 13755 00e8 1E41     		asrs	r6, r6, r3
 13756              	.LVL982:
 218:src/xeq.c     **** }
 13757              		.loc 1 218 57 view .LVU3618
 13758              	.LBE2420:
 13759              	.LBE2427:
 13760              	.LBE2431:
 13761              	.LBE2435:
 13762              	.LBE2506:
1586:src/xeq.c     **** 
 13763              		.loc 1 1586 2 is_stmt 1 view .LVU3619
 13764              	.LBB2507:
1332:src/xeq.c     **** 	process_cmdline();
 13765              		.loc 1 1332 6 view .LVU3620
 13766              	.LBE2507:
1333:src/xeq.c     **** 	set_lift();
ARM GAS  /tmp/cc7LeJ71.s 			page 402


 13767              		.loc 1 1333 2 view .LVU3621
 13768              	.LBB2508:
 13769              	.LBB2448:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 13770              		.loc 1 1226 6 view .LVU3622
 13771              	.LBB2443:
1227:src/xeq.c     **** 
 13772              		.loc 1 1227 2 view .LVU3623
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13773              		.loc 1 1229 2 view .LVU3624
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13774              		.loc 1 1229 5 is_stmt 0 view .LVU3625
 13775 00ea 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 13776 00ec 002B     		cmp	r3, #0
 13777 00ee 95D0     		beq	.L995
 13778              	.L1010:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13779              		.loc 1 1229 5 view .LVU3626
 13780 00f0 FFF7FEFF 		bl	process_cmdline.part.0
 13781              	.LVL983:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 13782              		.loc 1 1229 5 view .LVU3627
 13783 00f4 92E7     		b	.L995
 13784              	.L1012:
 13785              	.LBE2443:
 13786              	.LBE2448:
 13787              	.LBE2508:
1600:src/xeq.c     **** }
 13788              		.loc 1 1600 3 is_stmt 1 view .LVU3628
 13789 00f6 7020     		movs	r0, #112
 13790 00f8 FFF7FEFF 		bl	get_reg_n
 13791              	.LVL984:
 13792              	.LBB2509:
 13793              	.LBI2509:
1518:src/xeq.c     **** #if 0
 13794              		.loc 1 1518 6 view .LVU3629
 13795              	.LBB2510:
1533:src/xeq.c     **** #endif
 13796              		.loc 1 1533 2 view .LVU3630
 13797              	.LBB2511:
 13798              	.LBI2511:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 13799              		.loc 1 1118 5 view .LVU3631
 13800              	.LBB2512:
1119:src/xeq.c     **** }
 13801              		.loc 1 1119 2 view .LVU3632
1119:src/xeq.c     **** }
 13802              		.loc 1 1119 24 is_stmt 0 view .LVU3633
 13803 00fc 2368     		ldr	r3, [r4]
 13804 00fe B3F8E827 		ldrh	r2, [r3, #2024]
 13805 0102 2A40     		ands	r2, r2, r5
 13806 0104 A2F58042 		sub	r2, r2, #16384
 13807 0108 B2FA82F2 		clz	r2, r2
 13808 010c 5209     		lsrs	r2, r2, #5
 13809              	.LBE2512:
 13810              	.LBE2511:
1533:src/xeq.c     **** #endif
ARM GAS  /tmp/cc7LeJ71.s 			page 403


 13811              		.loc 1 1533 24 view .LVU3634
 13812 010e 0332     		adds	r2, r2, #3
1533:src/xeq.c     **** #endif
 13813              		.loc 1 1533 2 view .LVU3635
 13814 0110 06FA02F2 		lsl	r2, r6, r2
 13815 0114 0021     		movs	r1, #0
 13816              	.LBE2510:
 13817              	.LBE2509:
1601:src/xeq.c     **** 
 13818              		.loc 1 1601 1 view .LVU3636
 13819 0116 BDE87040 		pop	{r4, r5, r6, lr}
 13820              		.cfi_restore 14
 13821              		.cfi_restore 6
 13822              		.cfi_restore 5
 13823              		.cfi_restore 4
 13824              		.cfi_def_cfa_offset 0
 13825              	.LBB2514:
 13826              	.LBB2513:
1533:src/xeq.c     **** #endif
 13827              		.loc 1 1533 2 view .LVU3637
 13828 011a FFF7FEBF 		b	xset
 13829              	.LVL985:
 13830              	.L1014:
1533:src/xeq.c     **** #endif
 13831              		.loc 1 1533 2 view .LVU3638
 13832 011e 00BF     		.align	2
 13833              	.L1013:
 13834 0120 00000000 		.word	main_ram
 13835 0124 00000000 		.word	StateWhileOn
 13836 0128 00000000 		.word	XromParams
 13837 012c 00000000 		.word	RetStk
 13838              	.LBE2513:
 13839              	.LBE2514:
 13840              		.cfi_endproc
 13841              	.LFE111:
 13843              		.section	.text.clrretstk,"ax",%progbits
 13844              		.align	1
 13845              		.p2align 2,,3
 13846              		.global	clrretstk
 13847              		.syntax unified
 13848              		.thumb
 13849              		.thumb_func
 13850              		.fpu fpv4-sp-d16
 13852              	clrretstk:
 13853              	.LFB112:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13854              		.loc 1 1606 22 is_stmt 1 view -0
 13855              		.cfi_startproc
 13856              		@ args = 0, pretend = 0, frame = 0
 13857              		@ frame_needed = 0, uses_anonymous_args = 0
 13858              		@ link register save eliminated.
1607:src/xeq.c     **** }
 13859              		.loc 1 1607 2 view .LVU3640
1607:src/xeq.c     **** }
 13860              		.loc 1 1607 14 is_stmt 0 view .LVU3641
 13861 0000 054B     		ldr	r3, .L1016
 13862 0002 1B68     		ldr	r3, [r3]
ARM GAS  /tmp/cc7LeJ71.s 			page 404


1607:src/xeq.c     **** }
 13863              		.loc 1 1607 24 view .LVU3642
 13864 0004 B3F8DE27 		ldrh	r2, [r3, #2014]
1607:src/xeq.c     **** }
 13865              		.loc 1 1607 12 view .LVU3643
 13866 0008 0021     		movs	r1, #0
1607:src/xeq.c     **** }
 13867              		.loc 1 1607 24 view .LVU3644
 13868 000a 6FF34F12 		bfc	r2, #5, #11
 13869 000e A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
1607:src/xeq.c     **** }
 13870              		.loc 1 1607 12 view .LVU3645
 13871 0012 A3F8E217 		strh	r1, [r3, #2018]	@ movhi
1608:src/xeq.c     **** 
 13872              		.loc 1 1608 1 view .LVU3646
 13873 0016 7047     		bx	lr
 13874              	.L1017:
 13875              		.align	2
 13876              	.L1016:
 13877 0018 00000000 		.word	main_ram
 13878              		.cfi_endproc
 13879              	.LFE112:
 13881              		.section	.text.clrretstk_pc,"ax",%progbits
 13882              		.align	1
 13883              		.p2align 2,,3
 13884              		.global	clrretstk_pc
 13885              		.syntax unified
 13886              		.thumb
 13887              		.thumb_func
 13888              		.fpu fpv4-sp-d16
 13890              	clrretstk_pc:
 13891              	.LFB113:
1610:src/xeq.c     **** 	clrretstk();
 13892              		.loc 1 1610 25 is_stmt 1 view -0
 13893              		.cfi_startproc
 13894              		@ args = 0, pretend = 0, frame = 0
 13895              		@ frame_needed = 0, uses_anonymous_args = 0
1611:src/xeq.c     **** 	raw_set_pc(0);
 13896              		.loc 1 1611 2 view .LVU3648
 13897              	.LBB2515:
 13898              	.LBI2515:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 13899              		.loc 1 1606 6 view .LVU3649
 13900              	.LBB2516:
1607:src/xeq.c     **** }
 13901              		.loc 1 1607 2 view .LVU3650
 13902              	.LBE2516:
 13903              	.LBE2515:
1610:src/xeq.c     **** 	clrretstk();
 13904              		.loc 1 1610 25 is_stmt 0 view .LVU3651
 13905 0000 08B5     		push	{r3, lr}
 13906              		.cfi_def_cfa_offset 8
 13907              		.cfi_offset 3, -8
 13908              		.cfi_offset 14, -4
 13909              	.LBB2521:
 13910              	.LBB2517:
1607:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 405


 13911              		.loc 1 1607 14 view .LVU3652
 13912 0002 094B     		ldr	r3, .L1020
 13913 0004 1B68     		ldr	r3, [r3]
 13914              	.LBE2517:
 13915              	.LBE2521:
1612:src/xeq.c     **** 	update_program_bounds(1);
 13916              		.loc 1 1612 2 is_stmt 1 view .LVU3653
 13917              	.LVL986:
 13918              	.LBB2522:
 13919              	.LBI2522:
 282:src/xeq.c     **** 	State.pc = pc;
 13920              		.loc 1 282 13 view .LVU3654
 13921              	.LBB2523:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13922              		.loc 1 283 2 view .LVU3655
 13923              	.LBE2523:
 13924              	.LBE2522:
 13925              	.LBB2527:
 13926              	.LBB2518:
1607:src/xeq.c     **** }
 13927              		.loc 1 1607 24 is_stmt 0 view .LVU3656
 13928 0006 B3F8DE27 		ldrh	r2, [r3, #2014]
 13929              	.LBE2518:
 13930              	.LBE2527:
 13931              	.LBB2528:
 13932              	.LBB2524:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13933              		.loc 1 283 11 view .LVU3657
 13934 000a 0020     		movs	r0, #0
 13935              	.LBE2524:
 13936              	.LBE2528:
 13937              	.LBB2529:
 13938              	.LBB2519:
1607:src/xeq.c     **** }
 13939              		.loc 1 1607 24 view .LVU3658
 13940 000c 6FF34F12 		bfc	r2, #5, #11
 13941              	.LBE2519:
 13942              	.LBE2529:
 13943              	.LBB2530:
 13944              	.LBB2525:
 283:src/xeq.c     **** 	update_program_bounds(0);
 13945              		.loc 1 283 11 view .LVU3659
 13946 0010 C3F8E007 		str	r0, [r3, #2016]
 284:src/xeq.c     **** }
 13947              		.loc 1 284 2 is_stmt 1 view .LVU3660
 13948              	.LBE2525:
 13949              	.LBE2530:
 13950              	.LBB2531:
 13951              	.LBB2520:
1607:src/xeq.c     **** }
 13952              		.loc 1 1607 24 is_stmt 0 view .LVU3661
 13953 0014 A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
 13954              	.LBE2520:
 13955              	.LBE2531:
 13956              	.LBB2532:
 13957              	.LBB2526:
 284:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 406


 13958              		.loc 1 284 2 view .LVU3662
 13959 0018 FFF7FEFF 		bl	update_program_bounds
 13960              	.LVL987:
 284:src/xeq.c     **** }
 13961              		.loc 1 284 2 view .LVU3663
 13962              	.LBE2526:
 13963              	.LBE2532:
1613:src/xeq.c     **** }
 13964              		.loc 1 1613 2 is_stmt 1 view .LVU3664
1614:src/xeq.c     **** 
 13965              		.loc 1 1614 1 is_stmt 0 view .LVU3665
 13966 001c BDE80840 		pop	{r3, lr}
 13967              		.cfi_restore 14
 13968              		.cfi_restore 3
 13969              		.cfi_def_cfa_offset 0
1613:src/xeq.c     **** }
 13970              		.loc 1 1613 2 view .LVU3666
 13971 0020 0120     		movs	r0, #1
 13972 0022 FFF7FEBF 		b	update_program_bounds
 13973              	.LVL988:
 13974              	.L1021:
 13975 0026 00BF     		.align	2
 13976              	.L1020:
 13977 0028 00000000 		.word	main_ram
 13978              		.cfi_endproc
 13979              	.LFE113:
 13981              		.section	.text.cmdconst,"ax",%progbits
 13982              		.align	1
 13983              		.p2align 2,,3
 13984              		.global	cmdconst
 13985              		.syntax unified
 13986              		.thumb
 13987              		.thumb_func
 13988              		.fpu fpv4-sp-d16
 13990              	cmdconst:
 13991              	.LVL989:
 13992              	.LFB114:
1620:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13993              		.loc 1 1620 47 is_stmt 1 view -0
 13994              		.cfi_startproc
 13995              		@ args = 0, pretend = 0, frame = 0
 13996              		@ frame_needed = 0, uses_anonymous_args = 0
1622:src/xeq.c     **** #else
 13997              		.loc 1 1622 2 view .LVU3668
1620:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 13998              		.loc 1 1620 47 is_stmt 0 view .LVU3669
 13999 0000 70B5     		push	{r4, r5, r6, lr}
 14000              		.cfi_def_cfa_offset 16
 14001              		.cfi_offset 4, -16
 14002              		.cfi_offset 5, -12
 14003              		.cfi_offset 6, -8
 14004              		.cfi_offset 14, -4
1622:src/xeq.c     **** #else
 14005              		.loc 1 1622 5 view .LVU3670
 14006 0002 01F0FD03 		and	r3, r1, #253
 14007 0006 882B     		cmp	r3, #136
1620:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
ARM GAS  /tmp/cc7LeJ71.s 			page 407


 14008              		.loc 1 1620 47 view .LVU3671
 14009 0008 82B0     		sub	sp, sp, #8
 14010              		.cfi_def_cfa_offset 24
1620:src/xeq.c     **** #ifdef INCLUDE_INDIRECT_CONSTS
 14011              		.loc 1 1620 47 view .LVU3672
 14012 000a 0C46     		mov	r4, r1
 14013 000c 0546     		mov	r5, r0
1622:src/xeq.c     **** #else
 14014              		.loc 1 1622 5 view .LVU3673
 14015 000e 1CD0     		beq	.L1023
1622:src/xeq.c     **** #else
 14016              		.loc 1 1622 30 discriminator 1 view .LVU3674
 14017 0010 0129     		cmp	r1, #1
 14018 0012 1AD0     		beq	.L1023
1630:src/xeq.c     **** 
 14019              		.loc 1 1630 3 is_stmt 1 view .LVU3675
 14020              	.LBB2554:
 14021              	.LBI2554:
 747:src/xeq.c     **** 	if (get_lift())
 14022              		.loc 1 747 6 view .LVU3676
 14023              	.LBB2555:
 748:src/xeq.c     **** 		lift();
 14024              		.loc 1 748 2 view .LVU3677
 14025              	.LBB2556:
 14026              	.LBI2556:
 743:src/xeq.c     **** 	return State2.state_lift;
 14027              		.loc 1 743 12 view .LVU3678
 14028              	.LBB2557:
 744:src/xeq.c     **** }
 14029              		.loc 1 744 2 view .LVU3679
 744:src/xeq.c     **** }
 14030              		.loc 1 744 15 is_stmt 0 view .LVU3680
 14031 0014 2B4B     		ldr	r3, .L1040
 14032 0016 DB7D     		ldrb	r3, [r3, #23]	@ zero_extendqisi2
 14033              	.LBE2557:
 14034              	.LBE2556:
 748:src/xeq.c     **** 		lift();
 14035              		.loc 1 748 5 view .LVU3681
 14036 0018 5906     		lsls	r1, r3, #25
 14037              	.LVL990:
 748:src/xeq.c     **** 		lift();
 14038              		.loc 1 748 5 view .LVU3682
 14039 001a 4FD4     		bmi	.L1038
 14040              	.LVL991:
 14041              	.L1025:
 748:src/xeq.c     **** 		lift();
 14042              		.loc 1 748 5 view .LVU3683
 14043              	.LBE2555:
 14044              	.LBE2554:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14045              		.loc 1 1632 2 is_stmt 1 view .LVU3684
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14046              		.loc 1 1632 24 is_stmt 0 view .LVU3685
 14047 001c 7934     		adds	r4, r4, #121
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14048              		.loc 1 1632 5 view .LVU3686
 14049 001e E4B2     		uxtb	r4, r4
ARM GAS  /tmp/cc7LeJ71.s 			page 408


 14050 0020 012C     		cmp	r4, #1
 14051 0022 23D9     		bls	.L1039
 14052              	.L1026:
1634:src/xeq.c     **** 		bad_mode_error();
 14053              		.loc 1 1634 7 is_stmt 1 view .LVU3687
1634:src/xeq.c     **** 		bad_mode_error();
 14054              		.loc 1 1634 11 is_stmt 0 view .LVU3688
 14055 0024 284C     		ldr	r4, .L1040+4
 14056 0026 2368     		ldr	r3, [r4]
 14057 0028 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1634:src/xeq.c     **** 		bad_mode_error();
 14058              		.loc 1 1634 10 view .LVU3689
 14059 002c D207     		lsls	r2, r2, #31
 14060 002e 26D5     		bpl	.L1028
1635:src/xeq.c     **** 	else 
 14061              		.loc 1 1635 3 is_stmt 1 view .LVU3690
 14062              	.LBB2559:
 14063              	.LBI2559:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14064              		.loc 1 575 6 view .LVU3691
 14065              	.LBE2559:
 576:src/xeq.c     **** }
 14066              		.loc 1 576 2 view .LVU3692
 14067              	.LVL992:
 14068              	.LBB2564:
 14069              	.LBB2560:
 14070              	.LBI2560:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14071              		.loc 1 546 5 view .LVU3693
 14072              	.LBB2561:
 547:src/xeq.c     **** 		Error = e;
 14073              		.loc 1 547 2 view .LVU3694
 547:src/xeq.c     **** 		Error = e;
 14074              		.loc 1 547 12 is_stmt 0 view .LVU3695
 14075 0030 264A     		ldr	r2, .L1040+8
 547:src/xeq.c     **** 		Error = e;
 14076              		.loc 1 547 5 view .LVU3696
 14077 0032 1168     		ldr	r1, [r2]
 14078 0034 09B9     		cbnz	r1, .L1027
 14079              	.LVL993:
 14080              	.LBB2562:
 14081              	.LBI2562:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14082              		.loc 1 546 5 is_stmt 1 view .LVU3697
 14083              	.LBB2563:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14084              		.loc 1 548 3 view .LVU3698
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14085              		.loc 1 548 9 is_stmt 0 view .LVU3699
 14086 0036 0D21     		movs	r1, #13
 14087 0038 1160     		str	r1, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14088              		.loc 1 549 3 is_stmt 1 view .LVU3700
 14089              	.LVL994:
 14090              	.L1027:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14091              		.loc 1 549 3 is_stmt 0 view .LVU3701
ARM GAS  /tmp/cc7LeJ71.s 			page 409


 14092              	.LBE2563:
 14093              	.LBE2562:
 14094              	.LBE2561:
 14095              	.LBE2560:
 14096              	.LBE2564:
1639:src/xeq.c     **** #endif
 14097              		.loc 1 1639 2 is_stmt 1 view .LVU3702
 14098 003a 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 14099 003e 42F01002 		orr	r2, r2, #16
 14100 0042 83F8DE27 		strb	r2, [r3, #2014]
1641:src/xeq.c     **** 
 14101              		.loc 1 1641 1 is_stmt 0 view .LVU3703
 14102 0046 02B0     		add	sp, sp, #8
 14103              		.cfi_remember_state
 14104              		.cfi_def_cfa_offset 16
 14105              		@ sp needed
 14106 0048 70BD     		pop	{r4, r5, r6, pc}
 14107              	.LVL995:
 14108              	.L1023:
 14109              		.cfi_restore_state
1626:src/xeq.c     **** 		zero_Y();
 14110              		.loc 1 1626 3 is_stmt 1 view .LVU3704
 14111 004a FFF7FEFF 		bl	lift2_if_enabled
 14112              	.LVL996:
1627:src/xeq.c     **** 		set_was_complex();
 14113              		.loc 1 1627 3 view .LVU3705
 14114              	.LBB2565:
 14115              	.LBI2565:
1554:src/xeq.c     **** 	set_zero(get_reg_n(regY_idx));
 14116              		.loc 1 1554 6 view .LVU3706
 14117              	.LBB2566:
1555:src/xeq.c     **** }
 14118              		.loc 1 1555 2 view .LVU3707
 14119 004e 6520     		movs	r0, #101
 14120 0050 FFF7FEFF 		bl	get_reg_n
 14121              	.LVL997:
 14122 0054 FFF7FEFF 		bl	set_zero
 14123              	.LVL998:
 14124              	.LBE2566:
 14125              	.LBE2565:
1628:src/xeq.c     **** 	} else
 14126              		.loc 1 1628 3 view .LVU3708
 14127              	.LBB2567:
 14128              	.LBI2567:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 14129              		.loc 1 539 13 view .LVU3709
 14130              	.LBB2568:
 540:src/xeq.c     **** }
 14131              		.loc 1 540 2 view .LVU3710
 540:src/xeq.c     **** }
 14132              		.loc 1 540 20 is_stmt 0 view .LVU3711
 14133 0058 1A4B     		ldr	r3, .L1040
 14134              	.LBE2568:
 14135              	.LBE2567:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14136              		.loc 1 1632 24 view .LVU3712
 14137 005a 7934     		adds	r4, r4, #121
ARM GAS  /tmp/cc7LeJ71.s 			page 410


 14138              	.LBB2572:
 14139              	.LBB2569:
 540:src/xeq.c     **** }
 14140              		.loc 1 540 20 view .LVU3713
 14141 005c 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14142 005e 0121     		movs	r1, #1
 14143              	.LBE2569:
 14144              	.LBE2572:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14145              		.loc 1 1632 5 view .LVU3714
 14146 0060 E4B2     		uxtb	r4, r4
 14147              	.LBB2573:
 14148              	.LBB2570:
 540:src/xeq.c     **** }
 14149              		.loc 1 540 20 view .LVU3715
 14150 0062 61F38712 		bfi	r2, r1, #6, #2
 14151              	.LBE2570:
 14152              	.LBE2573:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14153              		.loc 1 1632 5 view .LVU3716
 14154 0066 012C     		cmp	r4, #1
 14155              	.LBB2574:
 14156              	.LBB2571:
 540:src/xeq.c     **** }
 14157              		.loc 1 540 20 view .LVU3717
 14158 0068 1A75     		strb	r2, [r3, #20]
 14159              	.LBE2571:
 14160              	.LBE2574:
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14161              		.loc 1 1632 2 is_stmt 1 view .LVU3718
1632:src/xeq.c     **** 		setX_int_sgn(arg, 0);
 14162              		.loc 1 1632 5 is_stmt 0 view .LVU3719
 14163 006a DBD8     		bhi	.L1026
 14164              	.L1039:
1633:src/xeq.c     **** 	else if (is_intmode())
 14165              		.loc 1 1633 3 is_stmt 1 view .LVU3720
 14166              	.LVL999:
 14167              	.LBB2575:
 14168              	.LBI2575:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 14169              		.loc 1 1509 6 view .LVU3721
 14170              	.LBB2576:
1510:src/xeq.c     **** }
 14171              		.loc 1 1510 2 view .LVU3722
 14172              	.LBE2576:
 14173              	.LBE2575:
1633:src/xeq.c     **** 	else if (is_intmode())
 14174              		.loc 1 1633 3 is_stmt 0 view .LVU3723
 14175 006c 0023     		movs	r3, #0
 14176              	.LBB2578:
 14177              	.LBB2577:
1510:src/xeq.c     **** }
 14178              		.loc 1 1510 2 view .LVU3724
 14179 006e 0093     		str	r3, [sp]
 14180 0070 2A46     		mov	r2, r5
 14181 0072 6420     		movs	r0, #100
 14182 0074 FFF7FEFF 		bl	set_reg_n_int_sgn
ARM GAS  /tmp/cc7LeJ71.s 			page 411


 14183              	.LVL1000:
 14184 0078 134B     		ldr	r3, .L1040+4
 14185 007a 1B68     		ldr	r3, [r3]
1511:src/xeq.c     **** 
 14186              		.loc 1 1511 1 view .LVU3725
 14187 007c DDE7     		b	.L1027
 14188              	.LVL1001:
 14189              	.L1028:
1511:src/xeq.c     **** 
 14190              		.loc 1 1511 1 view .LVU3726
 14191              	.LBE2577:
 14192              	.LBE2578:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14193              		.loc 1 1637 3 is_stmt 1 view .LVU3727
 14194              	.LBB2579:
 14195              	.LBB2580:
1119:src/xeq.c     **** }
 14196              		.loc 1 1119 24 is_stmt 0 view .LVU3728
 14197 007e B3F8E817 		ldrh	r1, [r3, #2024]
 14198              	.LBE2580:
 14199              	.LBE2579:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14200              		.loc 1 1637 3 view .LVU3729
 14201 0082 134B     		ldr	r3, .L1040+12
 14202              	.LBB2583:
 14203              	.LBB2581:
1119:src/xeq.c     **** }
 14204              		.loc 1 1119 24 view .LVU3730
 14205 0084 44F20106 		movw	r6, #16385
 14206 0088 3140     		ands	r1, r1, r6
 14207              	.LBE2581:
 14208              	.LBE2583:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14209              		.loc 1 1637 22 view .LVU3731
 14210 008a A1F58041 		sub	r1, r1, #16384
 14211 008e B1FA81F1 		clz	r1, r1
 14212 0092 2846     		mov	r0, r5
 14213 0094 4909     		lsrs	r1, r1, #5
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14214              		.loc 1 1637 3 view .LVU3732
 14215 0096 1D68     		ldr	r5, [r3]
 14216              	.LVL1002:
 14217              	.LBB2584:
 14218              	.LBI2579:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14219              		.loc 1 1118 5 is_stmt 1 view .LVU3733
 14220              	.LBB2582:
1119:src/xeq.c     **** }
 14221              		.loc 1 1119 2 view .LVU3734
 14222              	.LBE2582:
 14223              	.LBE2584:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14224              		.loc 1 1637 22 is_stmt 0 view .LVU3735
 14225 0098 FFF7FEFF 		bl	get_const
 14226              	.LVL1003:
 14227              	.LBB2585:
 14228              	.LBB2586:
ARM GAS  /tmp/cc7LeJ71.s 			page 412


 14229              	.LBB2587:
 14230              	.LBB2588:
1119:src/xeq.c     **** }
 14231              		.loc 1 1119 24 view .LVU3736
 14232 009c 2368     		ldr	r3, [r4]
 14233 009e B3F8E837 		ldrh	r3, [r3, #2024]
 14234              	.LBE2588:
 14235              	.LBE2587:
 727:src/xeq.c     **** }
 14236              		.loc 1 727 2 view .LVU3737
 14237 00a2 1E40     		ands	r6, r6, r3
 14238 00a4 B6F5804F 		cmp	r6, #16384
 14239              	.LBE2586:
 14240              	.LBE2585:
1637:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14241              		.loc 1 1637 22 view .LVU3738
 14242 00a8 0146     		mov	r1, r0
 14243              	.LVL1004:
 14244              	.LBB2592:
 14245              	.LBI2585:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14246              		.loc 1 726 6 is_stmt 1 view .LVU3739
 14247              	.LBB2591:
 727:src/xeq.c     **** }
 14248              		.loc 1 727 2 view .LVU3740
 14249              	.LBB2590:
 14250              	.LBI2587:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14251              		.loc 1 1118 5 view .LVU3741
 14252              	.LBB2589:
1119:src/xeq.c     **** }
 14253              		.loc 1 1119 2 view .LVU3742
 14254              	.LBE2589:
 14255              	.LBE2590:
 727:src/xeq.c     **** }
 14256              		.loc 1 727 2 is_stmt 0 view .LVU3743
 14257 00aa 08BF     		it	eq
 14258 00ac 1022     		moveq	r2, #16
 14259 00ae 2846     		mov	r0, r5
 14260              	.LVL1005:
 727:src/xeq.c     **** }
 14261              		.loc 1 727 2 view .LVU3744
 14262 00b0 18BF     		it	ne
 14263 00b2 0822     		movne	r2, #8
 14264 00b4 FFF7FEFF 		bl	xcopy
 14265              	.LVL1006:
 727:src/xeq.c     **** }
 14266              		.loc 1 727 2 view .LVU3745
 14267 00b8 2368     		ldr	r3, [r4]
 728:src/xeq.c     **** 
 14268              		.loc 1 728 1 view .LVU3746
 14269 00ba BEE7     		b	.L1027
 14270              	.LVL1007:
 14271              	.L1038:
 728:src/xeq.c     **** 
 14272              		.loc 1 728 1 view .LVU3747
 14273              	.LBE2591:
ARM GAS  /tmp/cc7LeJ71.s 			page 413


 14274              	.LBE2592:
 14275              	.LBB2593:
 14276              	.LBB2558:
 749:src/xeq.c     **** }
 14277              		.loc 1 749 3 is_stmt 1 view .LVU3748
 14278 00bc FFF7FEFF 		bl	lift
 14279              	.LVL1008:
 749:src/xeq.c     **** }
 14280              		.loc 1 749 3 is_stmt 0 view .LVU3749
 14281 00c0 ACE7     		b	.L1025
 14282              	.L1041:
 14283 00c2 00BF     		.align	2
 14284              	.L1040:
 14285 00c4 00000000 		.word	StateWhileOn
 14286 00c8 00000000 		.word	main_ram
 14287 00cc 00000000 		.word	Error
 14288 00d0 00000000 		.word	StackBase
 14289              	.LBE2558:
 14290              	.LBE2593:
 14291              		.cfi_endproc
 14292              	.LFE114:
 14294              		.section	.text.cmdsto,"ax",%progbits
 14295              		.align	1
 14296              		.p2align 2,,3
 14297              		.global	cmdsto
 14298              		.syntax unified
 14299              		.thumb
 14300              		.thumb_func
 14301              		.fpu fpv4-sp-d16
 14303              	cmdsto:
 14304              	.LVL1009:
 14305              	.LFB117:
1724:src/xeq.c     **** 	if (op == RARG_STO) {
 14306              		.loc 1 1724 45 is_stmt 1 view -0
 14307              		.cfi_startproc
 14308              		@ args = 0, pretend = 0, frame = 48
 14309              		@ frame_needed = 0, uses_anonymous_args = 0
1725:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14310              		.loc 1 1725 2 view .LVU3751
1724:src/xeq.c     **** 	if (op == RARG_STO) {
 14311              		.loc 1 1724 45 is_stmt 0 view .LVU3752
 14312 0000 10B5     		push	{r4, lr}
 14313              		.cfi_def_cfa_offset 8
 14314              		.cfi_offset 4, -8
 14315              		.cfi_offset 14, -4
1725:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14316              		.loc 1 1725 5 view .LVU3753
 14317 0002 0329     		cmp	r1, #3
1724:src/xeq.c     **** 	if (op == RARG_STO) {
 14318              		.loc 1 1724 45 view .LVU3754
 14319 0004 8CB0     		sub	sp, sp, #48
 14320              		.cfi_def_cfa_offset 56
1725:src/xeq.c     **** 		copyreg_n(arg, regX_idx);
 14321              		.loc 1 1725 5 view .LVU3755
 14322 0006 32D0     		beq	.L1055
1728:src/xeq.c     **** 			long long int r;
 14323              		.loc 1 1728 3 is_stmt 1 view .LVU3756
ARM GAS  /tmp/cc7LeJ71.s 			page 414


1728:src/xeq.c     **** 			long long int r;
 14324              		.loc 1 1728 7 is_stmt 0 view .LVU3757
 14325 0008 1B4B     		ldr	r3, .L1056
 14326 000a 1B68     		ldr	r3, [r3]
 14327 000c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 14328              	.LBB2606:
1731:src/xeq.c     **** 				illegal(op);
 14329              		.loc 1 1731 8 view .LVU3758
 14330 0010 0339     		subs	r1, r1, #3
 14331              	.LVL1010:
1731:src/xeq.c     **** 				illegal(op);
 14332              		.loc 1 1731 8 view .LVU3759
 14333              	.LBE2606:
1728:src/xeq.c     **** 			long long int r;
 14334              		.loc 1 1728 6 view .LVU3760
 14335 0012 13F00103 		ands	r3, r3, #1
 14336 0016 0446     		mov	r4, r0
 14337              	.LBB2614:
1731:src/xeq.c     **** 				illegal(op);
 14338              		.loc 1 1731 8 view .LVU3761
 14339 0018 88B2     		uxth	r0, r1
 14340              	.LVL1011:
1731:src/xeq.c     **** 				illegal(op);
 14341              		.loc 1 1731 8 view .LVU3762
 14342              	.LBE2614:
1728:src/xeq.c     **** 			long long int r;
 14343              		.loc 1 1728 6 view .LVU3763
 14344 001a 18D0     		beq	.L1045
 14345              	.LBB2615:
1729:src/xeq.c     **** 
 14346              		.loc 1 1729 4 is_stmt 1 view .LVU3764
1731:src/xeq.c     **** 				illegal(op);
 14347              		.loc 1 1731 4 view .LVU3765
1731:src/xeq.c     **** 				illegal(op);
 14348              		.loc 1 1731 8 is_stmt 0 view .LVU3766
 14349 001c 0023     		movs	r3, #0
 14350 001e 6A46     		mov	r2, sp
 14351 0020 2146     		mov	r1, r4
 14352 0022 FFF7FEFF 		bl	storcl_intop
 14353              	.LVL1012:
1731:src/xeq.c     **** 				illegal(op);
 14354              		.loc 1 1731 7 view .LVU3767
 14355 0026 20B1     		cbz	r0, .L1046
1732:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14356              		.loc 1 1732 5 is_stmt 1 view .LVU3768
1732:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14357              		.loc 1 1732 5 view .LVU3769
 14358              	.LVL1013:
 14359              	.LBB2607:
 14360              	.LBI2607:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14361              		.loc 1 546 5 view .LVU3770
 14362              	.LBB2608:
 547:src/xeq.c     **** 		Error = e;
 14363              		.loc 1 547 2 view .LVU3771
 547:src/xeq.c     **** 		Error = e;
 14364              		.loc 1 547 12 is_stmt 0 view .LVU3772
ARM GAS  /tmp/cc7LeJ71.s 			page 415


 14365 0028 144B     		ldr	r3, .L1056+4
 547:src/xeq.c     **** 		Error = e;
 14366              		.loc 1 547 5 view .LVU3773
 14367 002a 1A68     		ldr	r2, [r3]
 14368 002c 0AB9     		cbnz	r2, .L1046
 14369              	.LVL1014:
 14370              	.LBB2609:
 14371              	.LBI2609:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14372              		.loc 1 546 5 is_stmt 1 view .LVU3774
 14373              	.LBB2610:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14374              		.loc 1 548 3 view .LVU3775
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14375              		.loc 1 548 9 is_stmt 0 view .LVU3776
 14376 002e 0322     		movs	r2, #3
 14377 0030 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14378              		.loc 1 549 3 is_stmt 1 view .LVU3777
 14379              	.LVL1015:
 14380              	.L1046:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14381              		.loc 1 549 3 is_stmt 0 view .LVU3778
 14382              	.LBE2610:
 14383              	.LBE2609:
 14384              	.LBE2608:
 14385              	.LBE2607:
1732:src/xeq.c     **** 			set_reg_n_int(arg, r);
 14386              		.loc 1 1732 5 is_stmt 1 discriminator 1 view .LVU3779
1733:src/xeq.c     **** 		} else {
 14387              		.loc 1 1733 4 discriminator 1 view .LVU3780
1733:src/xeq.c     **** 		} else {
 14388              		.loc 1 1733 4 is_stmt 0 discriminator 1 view .LVU3781
 14389 0032 DDE90023 		ldrd	r2, [sp]
 14390              	.LBB2611:
 14391              	.LBB2612:
1423:src/xeq.c     **** }
 14392              		.loc 1 1423 8 discriminator 1 view .LVU3782
 14393 0036 2046     		mov	r0, r4
 14394 0038 CDE90223 		strd	r2, [sp, #8]
 14395              	.LVL1016:
1423:src/xeq.c     **** }
 14396              		.loc 1 1423 8 discriminator 1 view .LVU3783
 14397              	.LBE2612:
 14398              	.LBI2611:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 14399              		.loc 1 1422 6 is_stmt 1 discriminator 1 view .LVU3784
 14400              	.LBB2613:
1423:src/xeq.c     **** }
 14401              		.loc 1 1423 2 discriminator 1 view .LVU3785
1423:src/xeq.c     **** }
 14402              		.loc 1 1423 8 is_stmt 0 discriminator 1 view .LVU3786
 14403 003c FFF7FEFF 		bl	get_reg_n
 14404              	.LVL1017:
1423:src/xeq.c     **** }
 14405              		.loc 1 1423 2 discriminator 1 view .LVU3787
 14406 0040 0822     		movs	r2, #8
ARM GAS  /tmp/cc7LeJ71.s 			page 416


 14407 0042 0DEB0201 		add	r1, sp, r2
 14408 0046 FFF7FEFF 		bl	xcopy
 14409              	.LVL1018:
1423:src/xeq.c     **** }
 14410              		.loc 1 1423 2 discriminator 1 view .LVU3788
 14411              	.LBE2613:
 14412              	.LBE2611:
 14413              	.LBE2615:
1742:src/xeq.c     **** 
 14414              		.loc 1 1742 1 discriminator 1 view .LVU3789
 14415 004a 0CB0     		add	sp, sp, #48
 14416              		.cfi_remember_state
 14417              		.cfi_def_cfa_offset 8
 14418              		@ sp needed
 14419 004c 10BD     		pop	{r4, pc}
 14420              	.LVL1019:
 14421              	.L1045:
 14422              		.cfi_restore_state
 14423              	.LBB2616:
1735:src/xeq.c     **** 
 14424              		.loc 1 1735 4 is_stmt 1 view .LVU3790
1737:src/xeq.c     **** 				illegal(op);
 14425              		.loc 1 1737 4 view .LVU3791
1737:src/xeq.c     **** 				illegal(op);
 14426              		.loc 1 1737 8 is_stmt 0 view .LVU3792
 14427 004e 02AA     		add	r2, sp, #8
 14428 0050 2146     		mov	r1, r4
 14429 0052 FFF7FEFF 		bl	storcl_op
 14430              	.LVL1020:
1737:src/xeq.c     **** 				illegal(op);
 14431              		.loc 1 1737 7 view .LVU3793
 14432 0056 20B1     		cbz	r0, .L1047
1738:src/xeq.c     **** 			setRegister(arg, &r);
 14433              		.loc 1 1738 5 is_stmt 1 view .LVU3794
1738:src/xeq.c     **** 			setRegister(arg, &r);
 14434              		.loc 1 1738 5 view .LVU3795
 14435              	.LVL1021:
 14436              	.LBB2617:
 14437              	.LBI2617:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14438              		.loc 1 546 5 view .LVU3796
 14439              	.LBB2618:
 547:src/xeq.c     **** 		Error = e;
 14440              		.loc 1 547 2 view .LVU3797
 547:src/xeq.c     **** 		Error = e;
 14441              		.loc 1 547 12 is_stmt 0 view .LVU3798
 14442 0058 084B     		ldr	r3, .L1056+4
 547:src/xeq.c     **** 		Error = e;
 14443              		.loc 1 547 5 view .LVU3799
 14444 005a 1A68     		ldr	r2, [r3]
 14445 005c 0AB9     		cbnz	r2, .L1047
 14446              	.LVL1022:
 14447              	.LBB2619:
 14448              	.LBI2619:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14449              		.loc 1 546 5 is_stmt 1 view .LVU3800
 14450              	.LBB2620:
ARM GAS  /tmp/cc7LeJ71.s 			page 417


 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14451              		.loc 1 548 3 view .LVU3801
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14452              		.loc 1 548 9 is_stmt 0 view .LVU3802
 14453 005e 0322     		movs	r2, #3
 14454 0060 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14455              		.loc 1 549 3 is_stmt 1 view .LVU3803
 14456              	.LVL1023:
 14457              	.L1047:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14458              		.loc 1 549 3 is_stmt 0 view .LVU3804
 14459              	.LBE2620:
 14460              	.LBE2619:
 14461              	.LBE2618:
 14462              	.LBE2617:
1738:src/xeq.c     **** 			setRegister(arg, &r);
 14463              		.loc 1 1738 5 is_stmt 1 discriminator 1 view .LVU3805
1739:src/xeq.c     **** 		}
 14464              		.loc 1 1739 4 discriminator 1 view .LVU3806
 14465 0062 02A9     		add	r1, sp, #8
 14466 0064 2046     		mov	r0, r4
 14467 0066 FFF7FEFF 		bl	setRegister
 14468              	.LVL1024:
 14469              	.LBE2616:
1742:src/xeq.c     **** 
 14470              		.loc 1 1742 1 is_stmt 0 discriminator 1 view .LVU3807
 14471 006a 0CB0     		add	sp, sp, #48
 14472              		.cfi_remember_state
 14473              		.cfi_def_cfa_offset 8
 14474              		@ sp needed
 14475 006c 10BD     		pop	{r4, pc}
 14476              	.LVL1025:
 14477              	.L1055:
 14478              		.cfi_restore_state
1726:src/xeq.c     **** 	} else {
 14479              		.loc 1 1726 3 is_stmt 1 view .LVU3808
 14480 006e 6421     		movs	r1, #100
 14481              	.LVL1026:
1726:src/xeq.c     **** 	} else {
 14482              		.loc 1 1726 3 is_stmt 0 view .LVU3809
 14483 0070 FFF7FEFF 		bl	copyreg_n
 14484              	.LVL1027:
1742:src/xeq.c     **** 
 14485              		.loc 1 1742 1 view .LVU3810
 14486 0074 0CB0     		add	sp, sp, #48
 14487              		.cfi_def_cfa_offset 8
 14488              		@ sp needed
 14489 0076 10BD     		pop	{r4, pc}
 14490              	.L1057:
 14491              		.align	2
 14492              	.L1056:
 14493 0078 00000000 		.word	main_ram
 14494 007c 00000000 		.word	Error
 14495              		.cfi_endproc
 14496              	.LFE117:
 14498              		.section	.text.cmdrcl,"ax",%progbits
ARM GAS  /tmp/cc7LeJ71.s 			page 418


 14499              		.align	1
 14500              		.p2align 2,,3
 14501              		.global	cmdrcl
 14502              		.syntax unified
 14503              		.thumb
 14504              		.thumb_func
 14505              		.fpu fpv4-sp-d16
 14507              	cmdrcl:
 14508              	.LVL1028:
 14509              	.LFB119:
1771:src/xeq.c     **** 	do_rcl(arg, op);
 14510              		.loc 1 1771 45 is_stmt 1 view -0
 14511              		.cfi_startproc
 14512              		@ args = 0, pretend = 0, frame = 0
 14513              		@ frame_needed = 0, uses_anonymous_args = 0
 14514              		@ link register save eliminated.
1772:src/xeq.c     **** }
 14515              		.loc 1 1772 2 view .LVU3812
 14516 0000 FFF7FEBF 		b	do_rcl
 14517              	.LVL1029:
1772:src/xeq.c     **** }
 14518              		.loc 1 1772 2 is_stmt 0 view .LVU3813
 14519              		.cfi_endproc
 14520              	.LFE119:
 14522              		.section	.text.cmdcsto,"ax",%progbits
 14523              		.align	1
 14524              		.p2align 2,,3
 14525              		.global	cmdcsto
 14526              		.syntax unified
 14527              		.thumb
 14528              		.thumb_func
 14529              		.fpu fpv4-sp-d16
 14531              	cmdcsto:
 14532              	.LVL1030:
 14533              	.LFB121:
1816:src/xeq.c     **** 	decNumber r1, r2;
 14534              		.loc 1 1816 46 is_stmt 1 view -0
 14535              		.cfi_startproc
 14536              		@ args = 0, pretend = 0, frame = 72
 14537              		@ frame_needed = 0, uses_anonymous_args = 0
1817:src/xeq.c     **** 	REGISTER *t1, *t2;
 14538              		.loc 1 1817 2 view .LVU3815
1818:src/xeq.c     **** 
 14539              		.loc 1 1818 2 view .LVU3816
1820:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14540              		.loc 1 1820 2 view .LVU3817
1816:src/xeq.c     **** 	decNumber r1, r2;
 14541              		.loc 1 1816 46 is_stmt 0 view .LVU3818
 14542 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 14543              		.cfi_def_cfa_offset 24
 14544              		.cfi_offset 4, -24
 14545              		.cfi_offset 5, -20
 14546              		.cfi_offset 6, -16
 14547              		.cfi_offset 7, -12
 14548              		.cfi_offset 8, -8
 14549              		.cfi_offset 14, -4
 14550 0004 94B0     		sub	sp, sp, #80
ARM GAS  /tmp/cc7LeJ71.s 			page 419


 14551              		.cfi_def_cfa_offset 104
1816:src/xeq.c     **** 	decNumber r1, r2;
 14552              		.loc 1 1816 46 view .LVU3819
 14553 0006 0C46     		mov	r4, r1
1821:src/xeq.c     **** 
 14554              		.loc 1 1821 21 view .LVU3820
 14555 0008 461C     		adds	r6, r0, #1
1816:src/xeq.c     **** 	decNumber r1, r2;
 14556              		.loc 1 1816 46 view .LVU3821
 14557 000a 0546     		mov	r5, r0
1820:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14558              		.loc 1 1820 7 view .LVU3822
 14559 000c FFF7FEFF 		bl	get_reg_n
 14560              	.LVL1031:
1820:src/xeq.c     **** 	t2 = get_reg_n(arg + 1);
 14561              		.loc 1 1820 7 view .LVU3823
 14562 0010 8046     		mov	r8, r0
1821:src/xeq.c     **** 
 14563              		.loc 1 1821 7 view .LVU3824
 14564 0012 3046     		mov	r0, r6
 14565              	.LVL1032:
1821:src/xeq.c     **** 
 14566              		.loc 1 1821 2 is_stmt 1 view .LVU3825
1821:src/xeq.c     **** 
 14567              		.loc 1 1821 7 is_stmt 0 view .LVU3826
 14568 0014 FFF7FEFF 		bl	get_reg_n
 14569              	.LVL1033:
1823:src/xeq.c     **** 		copyreg(t1, StackBase);
 14570              		.loc 1 1823 2 is_stmt 1 view .LVU3827
1823:src/xeq.c     **** 		copyreg(t1, StackBase);
 14571              		.loc 1 1823 5 is_stmt 0 view .LVU3828
 14572 0018 152C     		cmp	r4, #21
 14573 001a 24D0     		beq	.L1071
1827:src/xeq.c     **** 			bad_mode_error();
 14574              		.loc 1 1827 3 is_stmt 1 view .LVU3829
1827:src/xeq.c     **** 			bad_mode_error();
 14575              		.loc 1 1827 7 is_stmt 0 view .LVU3830
 14576 001c 284B     		ldr	r3, .L1072
 14577 001e 1B68     		ldr	r3, [r3]
 14578 0020 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
1827:src/xeq.c     **** 			bad_mode_error();
 14579              		.loc 1 1827 6 view .LVU3831
 14580 0024 13F00103 		ands	r3, r3, #1
 14581 0028 0DD0     		beq	.L1064
1828:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CSTO, arg, &r1, &r2, 0))
 14582              		.loc 1 1828 4 is_stmt 1 view .LVU3832
 14583              	.LBB2640:
 14584              	.LBI2640:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14585              		.loc 1 575 6 view .LVU3833
 14586              	.LBE2640:
 576:src/xeq.c     **** }
 14587              		.loc 1 576 2 view .LVU3834
 14588              	.LVL1034:
 14589              	.LBB2645:
 14590              	.LBB2641:
 14591              	.LBI2641:
ARM GAS  /tmp/cc7LeJ71.s 			page 420


 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14592              		.loc 1 546 5 view .LVU3835
 14593              	.LBB2642:
 547:src/xeq.c     **** 		Error = e;
 14594              		.loc 1 547 2 view .LVU3836
 547:src/xeq.c     **** 		Error = e;
 14595              		.loc 1 547 12 is_stmt 0 view .LVU3837
 14596 002a 264B     		ldr	r3, .L1072+4
 547:src/xeq.c     **** 		Error = e;
 14597              		.loc 1 547 5 view .LVU3838
 14598 002c 1A68     		ldr	r2, [r3]
 14599 002e 0AB9     		cbnz	r2, .L1063
 14600              	.LVL1035:
 14601              	.LBB2643:
 14602              	.LBI2643:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14603              		.loc 1 546 5 is_stmt 1 view .LVU3839
 14604              	.LBB2644:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14605              		.loc 1 548 3 view .LVU3840
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14606              		.loc 1 548 9 is_stmt 0 view .LVU3841
 14607 0030 0D22     		movs	r2, #13
 14608 0032 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14609              		.loc 1 549 3 is_stmt 1 view .LVU3842
 14610              	.LVL1036:
 14611              	.L1063:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14612              		.loc 1 549 3 is_stmt 0 view .LVU3843
 14613              	.LBE2644:
 14614              	.LBE2643:
 14615              	.LBE2642:
 14616              	.LBE2641:
 14617              	.LBE2645:
1836:src/xeq.c     **** }
 14618              		.loc 1 1836 2 is_stmt 1 view .LVU3844
 14619              	.LBB2646:
 14620              	.LBI2646:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 14621              		.loc 1 539 13 view .LVU3845
 14622              	.LBB2647:
 540:src/xeq.c     **** }
 14623              		.loc 1 540 2 view .LVU3846
 540:src/xeq.c     **** }
 14624              		.loc 1 540 20 is_stmt 0 view .LVU3847
 14625 0034 244B     		ldr	r3, .L1072+8
 14626 0036 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
 14627 0038 0121     		movs	r1, #1
 14628 003a 61F38712 		bfi	r2, r1, #6, #2
 14629 003e 1A75     		strb	r2, [r3, #20]
 14630              	.LBE2647:
 14631              	.LBE2646:
1837:src/xeq.c     **** 
 14632              		.loc 1 1837 1 view .LVU3848
 14633 0040 14B0     		add	sp, sp, #80
 14634              		.cfi_remember_state
ARM GAS  /tmp/cc7LeJ71.s 			page 421


 14635              		.cfi_def_cfa_offset 24
 14636              		@ sp needed
 14637 0042 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 14638              	.LVL1037:
 14639              	.L1064:
 14640              		.cfi_restore_state
1829:src/xeq.c     **** 			illegal(op);
 14641              		.loc 1 1829 8 is_stmt 1 view .LVU3849
1829:src/xeq.c     **** 			illegal(op);
 14642              		.loc 1 1829 12 is_stmt 0 view .LVU3850
 14643 0046 153C     		subs	r4, r4, #21
 14644 0048 0093     		str	r3, [sp]
 14645 004a A0B2     		uxth	r0, r4
 14646              	.LVL1038:
1829:src/xeq.c     **** 			illegal(op);
 14647              		.loc 1 1829 12 view .LVU3851
 14648 004c 0BAB     		add	r3, sp, #44
 14649 004e 02AA     		add	r2, sp, #8
 14650 0050 2946     		mov	r1, r5
 14651 0052 FFF7FEFF 		bl	storcl_cop
 14652              	.LVL1039:
1829:src/xeq.c     **** 			illegal(op);
 14653              		.loc 1 1829 11 view .LVU3852
 14654 0056 50B3     		cbz	r0, .L1066
1830:src/xeq.c     **** 		else {
 14655              		.loc 1 1830 4 is_stmt 1 view .LVU3853
1830:src/xeq.c     **** 		else {
 14656              		.loc 1 1830 4 view .LVU3854
 14657              	.LVL1040:
 14658              	.LBB2648:
 14659              	.LBI2648:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14660              		.loc 1 546 5 view .LVU3855
 14661              	.LBB2649:
 547:src/xeq.c     **** 		Error = e;
 14662              		.loc 1 547 2 view .LVU3856
 547:src/xeq.c     **** 		Error = e;
 14663              		.loc 1 547 12 is_stmt 0 view .LVU3857
 14664 0058 1A4B     		ldr	r3, .L1072+4
 547:src/xeq.c     **** 		Error = e;
 14665              		.loc 1 547 5 view .LVU3858
 14666 005a 1A68     		ldr	r2, [r3]
 14667 005c 002A     		cmp	r2, #0
 14668 005e E9D1     		bne	.L1063
 14669              	.LVL1041:
 14670              	.LBB2650:
 14671              	.LBI2650:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14672              		.loc 1 546 5 is_stmt 1 view .LVU3859
 14673              	.LBB2651:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14674              		.loc 1 548 3 view .LVU3860
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14675              		.loc 1 548 9 is_stmt 0 view .LVU3861
 14676 0060 0322     		movs	r2, #3
 14677 0062 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
ARM GAS  /tmp/cc7LeJ71.s 			page 422


 14678              		.loc 1 549 3 is_stmt 1 view .LVU3862
 14679 0064 E6E7     		b	.L1063
 14680              	.LVL1042:
 14681              	.L1071:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14682              		.loc 1 549 3 is_stmt 0 view .LVU3863
 14683              	.LBE2651:
 14684              	.LBE2650:
 14685              	.LBE2649:
 14686              	.LBE2648:
1824:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14687              		.loc 1 1824 3 is_stmt 1 view .LVU3864
 14688              	.LBB2652:
 14689              	.LBB2653:
 14690              	.LBB2654:
 14691              	.LBB2655:
1119:src/xeq.c     **** }
 14692              		.loc 1 1119 24 is_stmt 0 view .LVU3865
 14693 0066 164D     		ldr	r5, .L1072
 14694              	.LVL1043:
1119:src/xeq.c     **** }
 14695              		.loc 1 1119 24 view .LVU3866
 14696              	.LBE2655:
 14697              	.LBE2654:
 14698              	.LBE2653:
 14699              	.LBE2652:
1824:src/xeq.c     **** 		copyreg(t2, get_reg_n(regY_idx));
 14700              		.loc 1 1824 3 view .LVU3867
 14701 0068 184A     		ldr	r2, .L1072+12
 14702              	.LVL1044:
 14703              	.LBB2661:
 14704              	.LBI2652:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14705              		.loc 1 726 6 is_stmt 1 view .LVU3868
 14706              	.LBB2660:
 727:src/xeq.c     **** }
 14707              		.loc 1 727 2 view .LVU3869
 14708              	.LBB2658:
 14709              	.LBI2654:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14710              		.loc 1 1118 5 view .LVU3870
 14711              	.LBB2656:
1119:src/xeq.c     **** }
 14712              		.loc 1 1119 2 view .LVU3871
1119:src/xeq.c     **** }
 14713              		.loc 1 1119 24 is_stmt 0 view .LVU3872
 14714 006a 2B68     		ldr	r3, [r5]
 14715              	.LBE2656:
 14716              	.LBE2658:
 727:src/xeq.c     **** }
 14717              		.loc 1 727 2 view .LVU3873
 14718 006c 1168     		ldr	r1, [r2]
 14719              	.LBB2659:
 14720              	.LBB2657:
1119:src/xeq.c     **** }
 14721              		.loc 1 1119 24 view .LVU3874
 14722 006e B3F8E837 		ldrh	r3, [r3, #2024]
ARM GAS  /tmp/cc7LeJ71.s 			page 423


 14723 0072 44F20104 		movw	r4, #16385
 14724              	.LBE2657:
 14725              	.LBE2659:
 727:src/xeq.c     **** }
 14726              		.loc 1 727 2 view .LVU3875
 14727 0076 2340     		ands	r3, r3, r4
 14728 0078 B3F5804F 		cmp	r3, #16384
 14729 007c 0CBF     		ite	eq
 14730 007e 1022     		moveq	r2, #16
 14731              	.LVL1045:
 727:src/xeq.c     **** }
 14732              		.loc 1 727 2 view .LVU3876
 14733 0080 0822     		movne	r2, #8
 14734 0082 0746     		mov	r7, r0
 14735 0084 4046     		mov	r0, r8
 14736              	.LVL1046:
 727:src/xeq.c     **** }
 14737              		.loc 1 727 2 view .LVU3877
 14738 0086 FFF7FEFF 		bl	xcopy
 14739              	.LVL1047:
 727:src/xeq.c     **** }
 14740              		.loc 1 727 2 view .LVU3878
 14741              	.LBE2660:
 14742              	.LBE2661:
1825:src/xeq.c     **** 	} else {
 14743              		.loc 1 1825 3 is_stmt 1 view .LVU3879
1825:src/xeq.c     **** 	} else {
 14744              		.loc 1 1825 15 is_stmt 0 view .LVU3880
 14745 008a 6520     		movs	r0, #101
 14746 008c FFF7FEFF 		bl	get_reg_n
 14747              	.LVL1048:
 14748              	.LBB2662:
 14749              	.LBB2663:
 14750              	.LBB2664:
 14751              	.LBB2665:
1119:src/xeq.c     **** }
 14752              		.loc 1 1119 24 view .LVU3881
 14753 0090 2B68     		ldr	r3, [r5]
 14754 0092 B3F8E837 		ldrh	r3, [r3, #2024]
 14755              	.LBE2665:
 14756              	.LBE2664:
 727:src/xeq.c     **** }
 14757              		.loc 1 727 2 view .LVU3882
 14758 0096 1C40     		ands	r4, r4, r3
 14759 0098 B4F5804F 		cmp	r4, #16384
 14760              	.LBE2663:
 14761              	.LBE2662:
1825:src/xeq.c     **** 	} else {
 14762              		.loc 1 1825 15 view .LVU3883
 14763 009c 0146     		mov	r1, r0
 14764              	.LVL1049:
 14765              	.LBB2669:
 14766              	.LBI2662:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 14767              		.loc 1 726 6 is_stmt 1 view .LVU3884
 14768              	.LBB2668:
 727:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 424


 14769              		.loc 1 727 2 view .LVU3885
 14770              	.LBB2667:
 14771              	.LBI2664:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 14772              		.loc 1 1118 5 view .LVU3886
 14773              	.LBB2666:
1119:src/xeq.c     **** }
 14774              		.loc 1 1119 2 view .LVU3887
 14775              	.LBE2666:
 14776              	.LBE2667:
 727:src/xeq.c     **** }
 14777              		.loc 1 727 2 is_stmt 0 view .LVU3888
 14778 009e 08BF     		it	eq
 14779 00a0 1022     		moveq	r2, #16
 14780 00a2 3846     		mov	r0, r7
 14781              	.LVL1050:
 727:src/xeq.c     **** }
 14782              		.loc 1 727 2 view .LVU3889
 14783 00a4 18BF     		it	ne
 14784 00a6 0822     		movne	r2, #8
 14785 00a8 FFF7FEFF 		bl	xcopy
 14786              	.LVL1051:
 728:src/xeq.c     **** 
 14787              		.loc 1 728 1 view .LVU3890
 14788 00ac C2E7     		b	.L1063
 14789              	.LVL1052:
 14790              	.L1066:
 728:src/xeq.c     **** 
 14791              		.loc 1 728 1 view .LVU3891
 14792              	.LBE2668:
 14793              	.LBE2669:
1832:src/xeq.c     **** 			setRegister(arg + 1, &r2);
 14794              		.loc 1 1832 4 is_stmt 1 view .LVU3892
 14795 00ae 02A9     		add	r1, sp, #8
 14796 00b0 2846     		mov	r0, r5
 14797 00b2 FFF7FEFF 		bl	setRegister
 14798              	.LVL1053:
1833:src/xeq.c     **** 		}
 14799              		.loc 1 1833 4 view .LVU3893
 14800 00b6 0BA9     		add	r1, sp, #44
 14801 00b8 3046     		mov	r0, r6
 14802 00ba FFF7FEFF 		bl	setRegister
 14803              	.LVL1054:
 14804 00be B9E7     		b	.L1063
 14805              	.L1073:
 14806              		.align	2
 14807              	.L1072:
 14808 00c0 00000000 		.word	main_ram
 14809 00c4 00000000 		.word	Error
 14810 00c8 00000000 		.word	StateWhileOn
 14811 00cc 00000000 		.word	StackBase
 14812              		.cfi_endproc
 14813              	.LFE121:
 14815              		.section	.text.cmdcrcl,"ax",%progbits
 14816              		.align	1
 14817              		.p2align 2,,3
 14818              		.global	cmdcrcl
ARM GAS  /tmp/cc7LeJ71.s 			page 425


 14819              		.syntax unified
 14820              		.thumb
 14821              		.thumb_func
 14822              		.fpu fpv4-sp-d16
 14824              	cmdcrcl:
 14825              	.LVL1055:
 14826              	.LFB123:
1862:src/xeq.c     **** 	do_crcl(arg, op);
 14827              		.loc 1 1862 46 view -0
 14828              		.cfi_startproc
 14829              		@ args = 0, pretend = 0, frame = 72
 14830              		@ frame_needed = 0, uses_anonymous_args = 0
1863:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 14831              		.loc 1 1863 2 view .LVU3895
1862:src/xeq.c     **** 	do_crcl(arg, op);
 14832              		.loc 1 1862 46 is_stmt 0 view .LVU3896
 14833 0000 70B5     		push	{r4, r5, r6, lr}
 14834              		.cfi_def_cfa_offset 16
 14835              		.cfi_offset 4, -16
 14836              		.cfi_offset 5, -12
 14837              		.cfi_offset 6, -8
 14838              		.cfi_offset 14, -4
 14839              	.LBB2700:
 14840              	.LBB2701:
1842:src/xeq.c     **** 		REGISTER x, y;
 14841              		.loc 1 1842 5 view .LVU3897
 14842 0002 1A29     		cmp	r1, #26
 14843              	.LBE2701:
 14844              	.LBE2700:
1862:src/xeq.c     **** 	do_crcl(arg, op);
 14845              		.loc 1 1862 46 view .LVU3898
 14846 0004 94B0     		sub	sp, sp, #80
 14847              		.cfi_def_cfa_offset 96
1862:src/xeq.c     **** 	do_crcl(arg, op);
 14848              		.loc 1 1862 46 view .LVU3899
 14849 0006 0446     		mov	r4, r0
 14850              	.LVL1056:
 14851              	.LBB2750:
 14852              	.LBI2700:
1839:src/xeq.c     **** 	decNumber r1, r2;
 14853              		.loc 1 1839 13 is_stmt 1 view .LVU3900
 14854              	.LBB2747:
1840:src/xeq.c     **** 
 14855              		.loc 1 1840 2 view .LVU3901
1842:src/xeq.c     **** 		REGISTER x, y;
 14856              		.loc 1 1842 2 view .LVU3902
1842:src/xeq.c     **** 		REGISTER x, y;
 14857              		.loc 1 1842 5 is_stmt 0 view .LVU3903
 14858 0008 2BD0     		beq	.L1090
1850:src/xeq.c     **** 			bad_mode_error();
 14859              		.loc 1 1850 3 is_stmt 1 view .LVU3904
1850:src/xeq.c     **** 			bad_mode_error();
 14860              		.loc 1 1850 7 is_stmt 0 view .LVU3905
 14861 000a 3B4D     		ldr	r5, .L1091
 14862 000c 2B68     		ldr	r3, [r5]
 14863 000e 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1850:src/xeq.c     **** 			bad_mode_error();
ARM GAS  /tmp/cc7LeJ71.s 			page 426


 14864              		.loc 1 1850 6 view .LVU3906
 14865 0012 D207     		lsls	r2, r2, #31
 14866 0014 12D5     		bpl	.L1081
1851:src/xeq.c     **** 		else if (storcl_cop(op - RARG_CRCL, index, &r1, &r2, 1))
 14867              		.loc 1 1851 4 is_stmt 1 view .LVU3907
 14868              	.LBB2702:
 14869              	.LBI2702:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 14870              		.loc 1 575 6 view .LVU3908
 14871              	.LBE2702:
 14872              	.LBE2747:
 14873              	.LBE2750:
 576:src/xeq.c     **** }
 14874              		.loc 1 576 2 view .LVU3909
 14875              	.LVL1057:
 14876              	.LBB2751:
 14877              	.LBB2748:
 14878              	.LBB2707:
 14879              	.LBB2703:
 14880              	.LBI2703:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14881              		.loc 1 546 5 view .LVU3910
 14882              	.LBB2704:
 547:src/xeq.c     **** 		Error = e;
 14883              		.loc 1 547 2 view .LVU3911
 547:src/xeq.c     **** 		Error = e;
 14884              		.loc 1 547 12 is_stmt 0 view .LVU3912
 14885 0016 394A     		ldr	r2, .L1091+4
 547:src/xeq.c     **** 		Error = e;
 14886              		.loc 1 547 5 view .LVU3913
 14887 0018 1168     		ldr	r1, [r2]
 14888              	.LVL1058:
 547:src/xeq.c     **** 		Error = e;
 14889              		.loc 1 547 5 view .LVU3914
 14890 001a 09B9     		cbnz	r1, .L1080
 14891              	.LVL1059:
 14892              	.LBB2705:
 14893              	.LBI2705:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14894              		.loc 1 546 5 is_stmt 1 view .LVU3915
 14895              	.LBB2706:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14896              		.loc 1 548 3 view .LVU3916
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14897              		.loc 1 548 9 is_stmt 0 view .LVU3917
 14898 001c 0D21     		movs	r1, #13
 14899 001e 1160     		str	r1, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14900              		.loc 1 549 3 is_stmt 1 view .LVU3918
 14901              	.LVL1060:
 14902              	.L1080:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14903              		.loc 1 549 3 is_stmt 0 view .LVU3919
 14904              	.LBE2706:
 14905              	.LBE2705:
 14906              	.LBE2704:
 14907              	.LBE2703:
ARM GAS  /tmp/cc7LeJ71.s 			page 427


 14908              	.LBE2707:
1859:src/xeq.c     **** }
 14909              		.loc 1 1859 2 is_stmt 1 view .LVU3920
 14910              	.LBB2708:
 14911              	.LBI2708:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 14912              		.loc 1 539 13 view .LVU3921
 14913              	.LBB2709:
 540:src/xeq.c     **** }
 14914              		.loc 1 540 2 view .LVU3922
 540:src/xeq.c     **** }
 14915              		.loc 1 540 20 is_stmt 0 view .LVU3923
 14916 0020 374A     		ldr	r2, .L1091+8
 14917 0022 117D     		ldrb	r1, [r2, #20]	@ zero_extendqisi2
 14918 0024 0120     		movs	r0, #1
 14919 0026 60F38711 		bfi	r1, r0, #6, #2
 14920 002a 1175     		strb	r1, [r2, #20]
 14921              	.LVL1061:
 540:src/xeq.c     **** }
 14922              		.loc 1 540 20 view .LVU3924
 14923              	.LBE2709:
 14924              	.LBE2708:
 14925              	.LBE2748:
 14926              	.LBE2751:
1865:src/xeq.c     **** #endif
 14927              		.loc 1 1865 2 is_stmt 1 view .LVU3925
 14928 002c 93F8DE27 		ldrb	r2, [r3, #2014]	@ zero_extendqisi2
 14929 0030 42F01002 		orr	r2, r2, #16
 14930 0034 83F8DE27 		strb	r2, [r3, #2014]
1867:src/xeq.c     **** 
 14931              		.loc 1 1867 1 is_stmt 0 view .LVU3926
 14932 0038 14B0     		add	sp, sp, #80
 14933              		.cfi_remember_state
 14934              		.cfi_def_cfa_offset 16
 14935              		@ sp needed
 14936 003a 70BD     		pop	{r4, r5, r6, pc}
 14937              	.LVL1062:
 14938              	.L1081:
 14939              		.cfi_restore_state
 14940              	.LBB2752:
 14941              	.LBB2749:
1852:src/xeq.c     **** 			illegal(op);
 14942              		.loc 1 1852 8 is_stmt 1 view .LVU3927
1852:src/xeq.c     **** 			illegal(op);
 14943              		.loc 1 1852 12 is_stmt 0 view .LVU3928
 14944 003c 1A39     		subs	r1, r1, #26
 14945              	.LVL1063:
1852:src/xeq.c     **** 			illegal(op);
 14946              		.loc 1 1852 12 view .LVU3929
 14947 003e 0126     		movs	r6, #1
 14948 0040 88B2     		uxth	r0, r1
 14949              	.LVL1064:
1852:src/xeq.c     **** 			illegal(op);
 14950              		.loc 1 1852 12 view .LVU3930
 14951 0042 0BAB     		add	r3, sp, #44
 14952 0044 2146     		mov	r1, r4
 14953 0046 02AA     		add	r2, sp, #8
ARM GAS  /tmp/cc7LeJ71.s 			page 428


 14954 0048 0096     		str	r6, [sp]
 14955 004a FFF7FEFF 		bl	storcl_cop
 14956              	.LVL1065:
1852:src/xeq.c     **** 			illegal(op);
 14957              		.loc 1 1852 11 view .LVU3931
 14958 004e 0028     		cmp	r0, #0
 14959 0050 4AD0     		beq	.L1082
1853:src/xeq.c     **** 		else {
 14960              		.loc 1 1853 4 is_stmt 1 view .LVU3932
1853:src/xeq.c     **** 		else {
 14961              		.loc 1 1853 4 view .LVU3933
 14962              	.LVL1066:
 14963              	.LBB2710:
 14964              	.LBI2710:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14965              		.loc 1 546 5 view .LVU3934
 14966              	.LBB2711:
 547:src/xeq.c     **** 		Error = e;
 14967              		.loc 1 547 2 view .LVU3935
 547:src/xeq.c     **** 		Error = e;
 14968              		.loc 1 547 12 is_stmt 0 view .LVU3936
 14969 0052 2A4A     		ldr	r2, .L1091+4
 547:src/xeq.c     **** 		Error = e;
 14970              		.loc 1 547 5 view .LVU3937
 14971 0054 1368     		ldr	r3, [r2]
 14972 0056 002B     		cmp	r3, #0
 14973 0058 4CD1     		bne	.L1089
 14974              	.LVL1067:
 14975              	.LBB2712:
 14976              	.LBI2712:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 14977              		.loc 1 546 5 is_stmt 1 view .LVU3938
 14978              	.LBB2713:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14979              		.loc 1 548 3 view .LVU3939
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 14980              		.loc 1 548 9 is_stmt 0 view .LVU3940
 14981 005a 0321     		movs	r1, #3
 14982 005c 2B68     		ldr	r3, [r5]
 14983 005e 1160     		str	r1, [r2]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14984              		.loc 1 549 3 is_stmt 1 view .LVU3941
 14985 0060 DEE7     		b	.L1080
 14986              	.LVL1068:
 14987              	.L1090:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 14988              		.loc 1 549 3 is_stmt 0 view .LVU3942
 14989              	.LBE2713:
 14990              	.LBE2712:
 14991              	.LBE2711:
 14992              	.LBE2710:
 14993              	.LBB2714:
1843:src/xeq.c     **** 		copyreg(&x, get_reg_n(index));
 14994              		.loc 1 1843 3 is_stmt 1 view .LVU3943
1844:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 14995              		.loc 1 1844 3 view .LVU3944
 14996              	.LBB2715:
ARM GAS  /tmp/cc7LeJ71.s 			page 429


 14997              	.LBB2716:
 14998              	.LBB2717:
 14999              	.LBB2718:
1119:src/xeq.c     **** }
 15000              		.loc 1 1119 24 is_stmt 0 view .LVU3945
 15001 0062 254E     		ldr	r6, .L1091
 15002              	.LBE2718:
 15003              	.LBE2717:
 15004              	.LBE2716:
 15005              	.LBE2715:
1844:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 15006              		.loc 1 1844 15 view .LVU3946
 15007 0064 FFF7FEFF 		bl	get_reg_n
 15008              	.LVL1069:
 15009              	.LBB2725:
 15010              	.LBB2723:
 15011              	.LBB2721:
 15012              	.LBB2719:
1119:src/xeq.c     **** }
 15013              		.loc 1 1119 24 view .LVU3947
 15014 0068 3368     		ldr	r3, [r6]
 15015 006a B3F8E837 		ldrh	r3, [r3, #2024]
 15016 006e 44F20105 		movw	r5, #16385
 15017              	.LBE2719:
 15018              	.LBE2721:
 727:src/xeq.c     **** }
 15019              		.loc 1 727 2 view .LVU3948
 15020 0072 2B40     		ands	r3, r3, r5
 15021 0074 B3F5804F 		cmp	r3, #16384
 15022 0078 0CBF     		ite	eq
 15023 007a 1022     		moveq	r2, #16
 15024 007c 0822     		movne	r2, #8
 15025              	.LBE2723:
 15026              	.LBE2725:
1844:src/xeq.c     **** 		copyreg(&y, get_reg_n(index + 1));
 15027              		.loc 1 1844 15 view .LVU3949
 15028 007e 0146     		mov	r1, r0
 15029              	.LVL1070:
 15030              	.LBB2726:
 15031              	.LBI2715:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15032              		.loc 1 726 6 is_stmt 1 view .LVU3950
 15033              	.LBB2724:
 727:src/xeq.c     **** }
 15034              		.loc 1 727 2 view .LVU3951
 15035              	.LBB2722:
 15036              	.LBI2717:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15037              		.loc 1 1118 5 view .LVU3952
 15038              	.LBB2720:
1119:src/xeq.c     **** }
 15039              		.loc 1 1119 2 view .LVU3953
 15040              	.LBE2720:
 15041              	.LBE2722:
 727:src/xeq.c     **** }
 15042              		.loc 1 727 2 is_stmt 0 view .LVU3954
 15043 0080 02A8     		add	r0, sp, #8
ARM GAS  /tmp/cc7LeJ71.s 			page 430


 15044              	.LVL1071:
 727:src/xeq.c     **** }
 15045              		.loc 1 727 2 view .LVU3955
 15046 0082 FFF7FEFF 		bl	xcopy
 15047              	.LVL1072:
 727:src/xeq.c     **** }
 15048              		.loc 1 727 2 view .LVU3956
 15049              	.LBE2724:
 15050              	.LBE2726:
1845:src/xeq.c     **** 		lift2_if_enabled();
 15051              		.loc 1 1845 3 is_stmt 1 view .LVU3957
1845:src/xeq.c     **** 		lift2_if_enabled();
 15052              		.loc 1 1845 15 is_stmt 0 view .LVU3958
 15053 0086 601C     		adds	r0, r4, #1
 15054 0088 FFF7FEFF 		bl	get_reg_n
 15055              	.LVL1073:
 15056              	.LBB2727:
 15057              	.LBB2728:
 15058              	.LBB2729:
 15059              	.LBB2730:
1119:src/xeq.c     **** }
 15060              		.loc 1 1119 24 view .LVU3959
 15061 008c 3368     		ldr	r3, [r6]
 15062 008e B3F8E837 		ldrh	r3, [r3, #2024]
 15063              	.LBE2730:
 15064              	.LBE2729:
 727:src/xeq.c     **** }
 15065              		.loc 1 727 2 view .LVU3960
 15066 0092 2B40     		ands	r3, r3, r5
 15067 0094 B3F5804F 		cmp	r3, #16384
 15068              	.LBE2728:
 15069              	.LBE2727:
1845:src/xeq.c     **** 		lift2_if_enabled();
 15070              		.loc 1 1845 15 view .LVU3961
 15071 0098 0146     		mov	r1, r0
 15072              	.LVL1074:
 15073              	.LBB2734:
 15074              	.LBI2727:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15075              		.loc 1 726 6 is_stmt 1 view .LVU3962
 15076              	.LBB2733:
 727:src/xeq.c     **** }
 15077              		.loc 1 727 2 view .LVU3963
 15078              	.LBB2732:
 15079              	.LBI2729:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15080              		.loc 1 1118 5 view .LVU3964
 15081              	.LBB2731:
1119:src/xeq.c     **** }
 15082              		.loc 1 1119 2 view .LVU3965
 15083              	.LBE2731:
 15084              	.LBE2732:
 727:src/xeq.c     **** }
 15085              		.loc 1 727 2 is_stmt 0 view .LVU3966
 15086 009a 0CBF     		ite	eq
 15087 009c 1022     		moveq	r2, #16
 15088 009e 0822     		movne	r2, #8
ARM GAS  /tmp/cc7LeJ71.s 			page 431


 15089 00a0 0BA8     		add	r0, sp, #44
 15090              	.LVL1075:
 727:src/xeq.c     **** }
 15091              		.loc 1 727 2 view .LVU3967
 15092 00a2 FFF7FEFF 		bl	xcopy
 15093              	.LVL1076:
 727:src/xeq.c     **** }
 15094              		.loc 1 727 2 view .LVU3968
 15095              	.LBE2733:
 15096              	.LBE2734:
1846:src/xeq.c     **** 		copyreg(StackBase, &x);
 15097              		.loc 1 1846 3 is_stmt 1 view .LVU3969
 15098 00a6 FFF7FEFF 		bl	lift2_if_enabled
 15099              	.LVL1077:
1847:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 15100              		.loc 1 1847 3 view .LVU3970
 15101              	.LBB2735:
 15102              	.LBB2736:
 15103              	.LBB2737:
 15104              	.LBB2738:
1119:src/xeq.c     **** }
 15105              		.loc 1 1119 24 is_stmt 0 view .LVU3971
 15106 00aa 3368     		ldr	r3, [r6]
 15107              	.LBE2738:
 15108              	.LBE2737:
 15109              	.LBE2736:
 15110              	.LBE2735:
1847:src/xeq.c     **** 		copyreg(get_reg_n(regY_idx), &y);
 15111              		.loc 1 1847 3 view .LVU3972
 15112 00ac 154A     		ldr	r2, .L1091+12
 15113              	.LVL1078:
 15114              	.LBB2742:
 15115              	.LBI2735:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15116              		.loc 1 726 6 is_stmt 1 view .LVU3973
 15117              	.LBB2741:
 727:src/xeq.c     **** }
 15118              		.loc 1 727 2 view .LVU3974
 15119              	.LBB2740:
 15120              	.LBI2737:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15121              		.loc 1 1118 5 view .LVU3975
 15122              	.LBB2739:
1119:src/xeq.c     **** }
 15123              		.loc 1 1119 2 view .LVU3976
1119:src/xeq.c     **** }
 15124              		.loc 1 1119 24 is_stmt 0 view .LVU3977
 15125 00ae B3F8E837 		ldrh	r3, [r3, #2024]
 15126              	.LBE2739:
 15127              	.LBE2740:
 727:src/xeq.c     **** }
 15128              		.loc 1 727 2 view .LVU3978
 15129 00b2 1068     		ldr	r0, [r2]
 15130 00b4 2B40     		ands	r3, r3, r5
 15131 00b6 B3F5804F 		cmp	r3, #16384
 15132 00ba 0CBF     		ite	eq
 15133 00bc 1022     		moveq	r2, #16
ARM GAS  /tmp/cc7LeJ71.s 			page 432


 15134              	.LVL1079:
 727:src/xeq.c     **** }
 15135              		.loc 1 727 2 view .LVU3979
 15136 00be 0822     		movne	r2, #8
 15137 00c0 02A9     		add	r1, sp, #8
 15138              	.LVL1080:
 727:src/xeq.c     **** }
 15139              		.loc 1 727 2 view .LVU3980
 15140 00c2 FFF7FEFF 		bl	xcopy
 15141              	.LVL1081:
 727:src/xeq.c     **** }
 15142              		.loc 1 727 2 view .LVU3981
 15143              	.LBE2741:
 15144              	.LBE2742:
1848:src/xeq.c     **** 	} else {
 15145              		.loc 1 1848 3 is_stmt 1 view .LVU3982
 15146 00c6 6520     		movs	r0, #101
 15147 00c8 FFF7FEFF 		bl	get_reg_n
 15148              	.LVL1082:
 15149              	.LBB2743:
 15150              	.LBI2743:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15151              		.loc 1 726 6 view .LVU3983
 15152              	.LBB2744:
 727:src/xeq.c     **** }
 15153              		.loc 1 727 2 view .LVU3984
 15154              	.LBB2745:
 15155              	.LBI2745:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15156              		.loc 1 1118 5 view .LVU3985
 15157              	.LBB2746:
1119:src/xeq.c     **** }
 15158              		.loc 1 1119 2 view .LVU3986
1119:src/xeq.c     **** }
 15159              		.loc 1 1119 24 is_stmt 0 view .LVU3987
 15160 00cc 3368     		ldr	r3, [r6]
 15161 00ce B3F8E837 		ldrh	r3, [r3, #2024]
 15162              	.LBE2746:
 15163              	.LBE2745:
 727:src/xeq.c     **** }
 15164              		.loc 1 727 2 view .LVU3988
 15165 00d2 1D40     		ands	r5, r5, r3
 15166 00d4 B5F5804F 		cmp	r5, #16384
 15167 00d8 0BA9     		add	r1, sp, #44
 15168              	.LVL1083:
 727:src/xeq.c     **** }
 15169              		.loc 1 727 2 view .LVU3989
 15170 00da 0CBF     		ite	eq
 15171 00dc 1022     		moveq	r2, #16
 15172 00de 0822     		movne	r2, #8
 15173 00e0 FFF7FEFF 		bl	xcopy
 15174              	.LVL1084:
 727:src/xeq.c     **** }
 15175              		.loc 1 727 2 view .LVU3990
 15176 00e4 3368     		ldr	r3, [r6]
 15177              	.LBE2744:
 15178              	.LBE2743:
ARM GAS  /tmp/cc7LeJ71.s 			page 433


 15179              	.LBE2714:
 15180 00e6 9BE7     		b	.L1080
 15181              	.L1082:
1855:src/xeq.c     **** 			setXY(&r1, &r2);
 15182              		.loc 1 1855 4 is_stmt 1 view .LVU3991
 15183 00e8 FFF7FEFF 		bl	setlastXY
 15184              	.LVL1085:
1856:src/xeq.c     **** 		}
 15185              		.loc 1 1856 4 view .LVU3992
 15186 00ec 0BA9     		add	r1, sp, #44
 15187 00ee 02A8     		add	r0, sp, #8
 15188 00f0 FFF7FEFF 		bl	setXY
 15189              	.LVL1086:
 15190              	.L1089:
 15191 00f4 2B68     		ldr	r3, [r5]
 15192 00f6 93E7     		b	.L1080
 15193              	.L1092:
 15194              		.align	2
 15195              	.L1091:
 15196 00f8 00000000 		.word	main_ram
 15197 00fc 00000000 		.word	Error
 15198 0100 00000000 		.word	StateWhileOn
 15199 0104 00000000 		.word	StackBase
 15200              	.LBE2749:
 15201              	.LBE2752:
 15202              		.cfi_endproc
 15203              	.LFE123:
 15205              		.section	.text.cmdircl,"ax",%progbits
 15206              		.align	1
 15207              		.p2align 2,,3
 15208              		.global	cmdircl
 15209              		.syntax unified
 15210              		.thumb
 15211              		.thumb_func
 15212              		.fpu fpv4-sp-d16
 15214              	cmdircl:
 15215              	.LVL1087:
 15216              	.LFB124:
1879:src/xeq.c     **** 	if (is_intmode())
 15217              		.loc 1 1879 46 view -0
 15218              		.cfi_startproc
 15219              		@ args = 0, pretend = 0, frame = 0
 15220              		@ frame_needed = 0, uses_anonymous_args = 0
 15221              		@ link register save eliminated.
1880:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15222              		.loc 1 1880 2 view .LVU3994
1880:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15223              		.loc 1 1880 6 is_stmt 0 view .LVU3995
 15224 0000 064B     		ldr	r3, .L1095
 15225 0002 1B68     		ldr	r3, [r3]
 15226 0004 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
1880:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15227              		.loc 1 1880 5 view .LVU3996
 15228 0008 12F00102 		ands	r2, r2, #1
1879:src/xeq.c     **** 	if (is_intmode())
 15229              		.loc 1 1879 46 view .LVU3997
 15230 000c 0146     		mov	r1, r0
ARM GAS  /tmp/cc7LeJ71.s 			page 434


 15231              	.LVL1088:
1880:src/xeq.c     **** 		cmdrcl(arg, RARG_RCL);
 15232              		.loc 1 1880 5 view .LVU3998
 15233 000e 02D0     		beq	.L1094
1881:src/xeq.c     **** 	else
 15234              		.loc 1 1881 3 is_stmt 1 view .LVU3999
 15235              	.LVL1089:
 15236              	.LBB2753:
 15237              	.LBI2753:
1771:src/xeq.c     **** 	do_rcl(arg, op);
 15238              		.loc 1 1771 6 view .LVU4000
 15239              	.LBB2754:
1772:src/xeq.c     **** }
 15240              		.loc 1 1772 2 view .LVU4001
 15241 0010 0A21     		movs	r1, #10
 15242 0012 FFF7FEBF 		b	do_rcl
 15243              	.LVL1090:
 15244              	.L1094:
1772:src/xeq.c     **** }
 15245              		.loc 1 1772 2 is_stmt 0 view .LVU4002
 15246              	.LBE2754:
 15247              	.LBE2753:
1883:src/xeq.c     **** }
 15248              		.loc 1 1883 3 is_stmt 1 view .LVU4003
 15249 0016 6420     		movs	r0, #100
 15250              	.LVL1091:
1883:src/xeq.c     **** }
 15251              		.loc 1 1883 3 is_stmt 0 view .LVU4004
 15252 0018 FFF7FEBF 		b	register_from_int
 15253              	.LVL1092:
 15254              	.L1096:
1883:src/xeq.c     **** }
 15255              		.loc 1 1883 3 view .LVU4005
 15256              		.align	2
 15257              	.L1095:
 15258 001c 00000000 		.word	main_ram
 15259              		.cfi_endproc
 15260              	.LFE124:
 15262              		.section	.text.cmdrrcl,"ax",%progbits
 15263              		.align	1
 15264              		.p2align 2,,3
 15265              		.global	cmdrrcl
 15266              		.syntax unified
 15267              		.thumb
 15268              		.thumb_func
 15269              		.fpu fpv4-sp-d16
 15271              	cmdrrcl:
 15272              	.LVL1093:
 15273              	.LFB125:
1887:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15274              		.loc 1 1887 46 is_stmt 1 view -0
 15275              		.cfi_startproc
 15276              		@ args = 0, pretend = 0, frame = 40
 15277              		@ frame_needed = 0, uses_anonymous_args = 0
1888:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15278              		.loc 1 1888 2 view .LVU4007
1887:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
ARM GAS  /tmp/cc7LeJ71.s 			page 435


 15279              		.loc 1 1887 46 is_stmt 0 view .LVU4008
 15280 0000 70B5     		push	{r4, r5, r6, lr}
 15281              		.cfi_def_cfa_offset 16
 15282              		.cfi_offset 4, -16
 15283              		.cfi_offset 5, -12
 15284              		.cfi_offset 6, -8
 15285              		.cfi_offset 14, -4
1888:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15286              		.loc 1 1888 22 view .LVU4009
 15287 0002 1F4C     		ldr	r4, .L1104
 15288 0004 2368     		ldr	r3, [r4]
1888:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15289              		.loc 1 1888 28 view .LVU4010
 15290 0006 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1889:src/xeq.c     **** 
 15291              		.loc 1 1889 26 view .LVU4011
 15292 000a 8029     		cmp	r1, #128
1887:src/xeq.c     **** 	const int was_dbl = UState.mode_double;
 15293              		.loc 1 1887 46 view .LVU4012
 15294 000c 8AB0     		sub	sp, sp, #40
 15295              		.cfi_def_cfa_offset 56
1888:src/xeq.c     **** 	const int rcl_dbl = (op == RARG_dRCL);
 15296              		.loc 1 1888 28 view .LVU4013
 15297 000e C2F38015 		ubfx	r5, r2, #6, #1
 15298              	.LVL1094:
1889:src/xeq.c     **** 
 15299              		.loc 1 1889 2 is_stmt 1 view .LVU4014
1889:src/xeq.c     **** 
 15300              		.loc 1 1889 26 is_stmt 0 view .LVU4015
 15301 0012 0CBF     		ite	eq
 15302 0014 0121     		moveq	r1, #1
 15303              	.LVL1095:
1889:src/xeq.c     **** 
 15304              		.loc 1 1889 26 view .LVU4016
 15305 0016 0021     		movne	r1, #0
 15306              	.LVL1096:
1891:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15307              		.loc 1 1891 2 is_stmt 1 view .LVU4017
1891:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15308              		.loc 1 1891 5 is_stmt 0 view .LVU4018
 15309 0018 26D0     		beq	.L1102
 15310              	.LVL1097:
 15311              	.L1098:
1897:src/xeq.c     **** 	if (is_intmode()) {
 15312              		.loc 1 1897 2 is_stmt 1 view .LVU4019
1897:src/xeq.c     **** 	if (is_intmode()) {
 15313              		.loc 1 1897 21 is_stmt 0 view .LVU4020
 15314 001a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
1898:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15315              		.loc 1 1898 6 view .LVU4021
 15316 001e 93F8E867 		ldrb	r6, [r3, #2024]	@ zero_extendqisi2
1897:src/xeq.c     **** 	if (is_intmode()) {
 15317              		.loc 1 1897 21 view .LVU4022
 15318 0022 61F38612 		bfi	r2, r1, #6, #1
 15319 0026 83F8E927 		strb	r2, [r3, #2025]
 15320              	.LVL1098:
1898:src/xeq.c     **** 		int_from_register(regX_idx, arg);
ARM GAS  /tmp/cc7LeJ71.s 			page 436


 15321              		.loc 1 1898 2 is_stmt 1 view .LVU4023
1898:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15322              		.loc 1 1898 5 is_stmt 0 view .LVU4024
 15323 002a F307     		lsls	r3, r6, #31
1899:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15324              		.loc 1 1899 3 view .LVU4025
 15325 002c 0146     		mov	r1, r0
 15326              	.LVL1099:
1898:src/xeq.c     **** 		int_from_register(regX_idx, arg);
 15327              		.loc 1 1898 5 view .LVU4026
 15328 002e 0FD4     		bmi	.L1103
 15329              	.LBB2762:
1903:src/xeq.c     **** 		getRegister(&x, arg);
 15330              		.loc 1 1903 3 is_stmt 1 view .LVU4027
1904:src/xeq.c     **** 
 15331              		.loc 1 1904 3 view .LVU4028
 15332 0030 01A8     		add	r0, sp, #4
 15333              	.LVL1100:
1904:src/xeq.c     **** 
 15334              		.loc 1 1904 3 is_stmt 0 view .LVU4029
 15335 0032 FFF7FEFF 		bl	getRegister
 15336              	.LVL1101:
1906:src/xeq.c     **** 		setX(&x);
 15337              		.loc 1 1906 3 is_stmt 1 view .LVU4030
1906:src/xeq.c     **** 		setX(&x);
 15338              		.loc 1 1906 22 is_stmt 0 view .LVU4031
 15339 0036 2368     		ldr	r3, [r4]
 15340 0038 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15341 003c 65F38612 		bfi	r2, r5, #6, #1
 15342              	.LBB2763:
 15343              	.LBB2764:
 829:src/xeq.c     **** }
 15344              		.loc 1 829 2 view .LVU4032
 15345 0040 01A9     		add	r1, sp, #4
 15346              	.LBE2764:
 15347              	.LBE2763:
1906:src/xeq.c     **** 		setX(&x);
 15348              		.loc 1 1906 22 view .LVU4033
 15349 0042 83F8E927 		strb	r2, [r3, #2025]
1907:src/xeq.c     **** 	}
 15350              		.loc 1 1907 3 is_stmt 1 view .LVU4034
 15351              	.LVL1102:
 15352              	.LBB2766:
 15353              	.LBI2763:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 15354              		.loc 1 828 6 view .LVU4035
 15355              	.LBB2765:
 829:src/xeq.c     **** }
 15356              		.loc 1 829 2 view .LVU4036
 15357 0046 6420     		movs	r0, #100
 15358 0048 FFF7FEFF 		bl	setRegister
 15359              	.LVL1103:
 15360              	.L1097:
 829:src/xeq.c     **** }
 15361              		.loc 1 829 2 is_stmt 0 view .LVU4037
 15362              	.LBE2765:
 15363              	.LBE2766:
ARM GAS  /tmp/cc7LeJ71.s 			page 437


 15364              	.LBE2762:
1909:src/xeq.c     **** 
 15365              		.loc 1 1909 1 view .LVU4038
 15366 004c 0AB0     		add	sp, sp, #40
 15367              		.cfi_remember_state
 15368              		.cfi_def_cfa_offset 16
 15369              		@ sp needed
 15370 004e 70BD     		pop	{r4, r5, r6, pc}
 15371              	.LVL1104:
 15372              	.L1103:
 15373              		.cfi_restore_state
1899:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15374              		.loc 1 1899 3 is_stmt 1 view .LVU4039
 15375 0050 6420     		movs	r0, #100
 15376              	.LVL1105:
1899:src/xeq.c     **** 		UState.mode_double = was_dbl;
 15377              		.loc 1 1899 3 is_stmt 0 view .LVU4040
 15378 0052 FFF7FEFF 		bl	int_from_register
 15379              	.LVL1106:
1900:src/xeq.c     **** 	}
 15380              		.loc 1 1900 3 is_stmt 1 view .LVU4041
1900:src/xeq.c     **** 	}
 15381              		.loc 1 1900 22 is_stmt 0 view .LVU4042
 15382 0056 2368     		ldr	r3, [r4]
 15383 0058 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 15384 005c 65F38612 		bfi	r2, r5, #6, #1
 15385 0060 83F8E927 		strb	r2, [r3, #2025]
1909:src/xeq.c     **** 
 15386              		.loc 1 1909 1 view .LVU4043
 15387 0064 0AB0     		add	sp, sp, #40
 15388              		.cfi_remember_state
 15389              		.cfi_def_cfa_offset 16
 15390              		@ sp needed
 15391 0066 70BD     		pop	{r4, r5, r6, pc}
 15392              	.LVL1107:
 15393              	.L1102:
 15394              		.cfi_restore_state
1891:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15395              		.loc 1 1891 14 discriminator 1 view .LVU4044
 15396 0068 A0F16402 		sub	r2, r0, #100
 15397              	.LVL1108:
1891:src/xeq.c     **** 		// dRCL is not valid for lettered registers
 15398              		.loc 1 1891 14 discriminator 1 view .LVU4045
 15399 006c 0B2A     		cmp	r2, #11
 15400 006e D4D8     		bhi	.L1098
1893:src/xeq.c     **** 		return;
 15401              		.loc 1 1893 3 is_stmt 1 view .LVU4046
 15402              	.LVL1109:
 15403              	.LBB2767:
 15404              	.LBI2767:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15405              		.loc 1 546 5 view .LVU4047
 15406              	.LBB2768:
 547:src/xeq.c     **** 		Error = e;
 15407              		.loc 1 547 2 view .LVU4048
 547:src/xeq.c     **** 		Error = e;
 15408              		.loc 1 547 12 is_stmt 0 view .LVU4049
ARM GAS  /tmp/cc7LeJ71.s 			page 438


 15409 0070 044B     		ldr	r3, .L1104+4
 15410              	.LVL1110:
 547:src/xeq.c     **** 		Error = e;
 15411              		.loc 1 547 5 view .LVU4050
 15412 0072 1A68     		ldr	r2, [r3]
 15413 0074 002A     		cmp	r2, #0
 15414 0076 E9D1     		bne	.L1097
 15415              	.LVL1111:
 15416              	.LBB2769:
 15417              	.LBI2769:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 15418              		.loc 1 546 5 is_stmt 1 view .LVU4051
 15419              	.LBB2770:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 15420              		.loc 1 548 3 view .LVU4052
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 15421              		.loc 1 548 9 is_stmt 0 view .LVU4053
 15422 0078 0822     		movs	r2, #8
 15423 007a 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 15424              		.loc 1 549 3 is_stmt 1 view .LVU4054
 15425 007c E6E7     		b	.L1097
 15426              	.L1105:
 15427 007e 00BF     		.align	2
 15428              	.L1104:
 15429 0080 00000000 		.word	main_ram
 15430 0084 00000000 		.word	Error
 15431              	.LBE2770:
 15432              	.LBE2769:
 15433              	.LBE2768:
 15434              	.LBE2767:
 15435              		.cfi_endproc
 15436              	.LFE125:
 15438              		.section	.text.swap_reg,"ax",%progbits
 15439              		.align	1
 15440              		.p2align 2,,3
 15441              		.global	swap_reg
 15442              		.syntax unified
 15443              		.thumb
 15444              		.thumb_func
 15445              		.fpu fpv4-sp-d16
 15447              	swap_reg:
 15448              	.LVL1112:
 15449              	.LFB126:
1914:src/xeq.c     **** 	REGISTER t;
 15450              		.loc 1 1914 41 view -0
 15451              		.cfi_startproc
 15452              		@ args = 0, pretend = 0, frame = 16
 15453              		@ frame_needed = 0, uses_anonymous_args = 0
1915:src/xeq.c     **** 
 15454              		.loc 1 1915 2 view .LVU4056
1917:src/xeq.c     **** 	copyreg(a, b);
 15455              		.loc 1 1917 2 view .LVU4057
1914:src/xeq.c     **** 	REGISTER t;
 15456              		.loc 1 1914 41 is_stmt 0 view .LVU4058
 15457 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 15458              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/cc7LeJ71.s 			page 439


 15459              		.cfi_offset 4, -20
 15460              		.cfi_offset 5, -16
 15461              		.cfi_offset 6, -12
 15462              		.cfi_offset 7, -8
 15463              		.cfi_offset 14, -4
 15464              	.LBB2771:
 15465              	.LBB2772:
 15466              	.LBB2773:
 15467              	.LBB2774:
1119:src/xeq.c     **** }
 15468              		.loc 1 1119 24 view .LVU4059
 15469 0002 174F     		ldr	r7, .L1114
 15470 0004 3B68     		ldr	r3, [r7]
 15471 0006 B3F8E837 		ldrh	r3, [r3, #2024]
 15472 000a 44F20104 		movw	r4, #16385
 15473              	.LBE2774:
 15474              	.LBE2773:
 727:src/xeq.c     **** }
 15475              		.loc 1 727 2 view .LVU4060
 15476 000e 2340     		ands	r3, r3, r4
 15477              	.LBE2772:
 15478              	.LBE2771:
1914:src/xeq.c     **** 	REGISTER t;
 15479              		.loc 1 1914 41 view .LVU4061
 15480 0010 85B0     		sub	sp, sp, #20
 15481              		.cfi_def_cfa_offset 40
 15482              	.LVL1113:
 15483              	.LBB2779:
 15484              	.LBB2777:
 727:src/xeq.c     **** }
 15485              		.loc 1 727 2 view .LVU4062
 15486 0012 B3F5804F 		cmp	r3, #16384
 15487 0016 0CBF     		ite	eq
 15488 0018 1022     		moveq	r2, #16
 15489 001a 0822     		movne	r2, #8
 15490              	.LBE2777:
 15491              	.LBE2779:
1914:src/xeq.c     **** 	REGISTER t;
 15492              		.loc 1 1914 41 view .LVU4063
 15493 001c 0D46     		mov	r5, r1
 15494 001e 0646     		mov	r6, r0
 15495              	.LVL1114:
 15496              	.LBB2780:
 15497              	.LBI2771:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15498              		.loc 1 726 6 is_stmt 1 view .LVU4064
 15499              	.LBB2778:
 727:src/xeq.c     **** }
 15500              		.loc 1 727 2 view .LVU4065
 15501              	.LBB2776:
 15502              	.LBI2773:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15503              		.loc 1 1118 5 view .LVU4066
 15504              	.LBB2775:
1119:src/xeq.c     **** }
 15505              		.loc 1 1119 2 view .LVU4067
 15506              	.LBE2775:
ARM GAS  /tmp/cc7LeJ71.s 			page 440


 15507              	.LBE2776:
 727:src/xeq.c     **** }
 15508              		.loc 1 727 2 is_stmt 0 view .LVU4068
 15509 0020 0146     		mov	r1, r0
 15510              	.LVL1115:
 727:src/xeq.c     **** }
 15511              		.loc 1 727 2 view .LVU4069
 15512 0022 6846     		mov	r0, sp
 15513              	.LVL1116:
 727:src/xeq.c     **** }
 15514              		.loc 1 727 2 view .LVU4070
 15515 0024 FFF7FEFF 		bl	xcopy
 15516              	.LVL1117:
 727:src/xeq.c     **** }
 15517              		.loc 1 727 2 view .LVU4071
 15518              	.LBE2778:
 15519              	.LBE2780:
1918:src/xeq.c     **** 	copyreg(b, &t);
 15520              		.loc 1 1918 2 is_stmt 1 view .LVU4072
 15521              	.LBB2781:
 15522              	.LBI2781:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15523              		.loc 1 726 6 view .LVU4073
 15524              	.LBB2782:
 727:src/xeq.c     **** }
 15525              		.loc 1 727 2 view .LVU4074
 15526              	.LBB2783:
 15527              	.LBI2783:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15528              		.loc 1 1118 5 view .LVU4075
 15529              	.LBB2784:
1119:src/xeq.c     **** }
 15530              		.loc 1 1119 2 view .LVU4076
1119:src/xeq.c     **** }
 15531              		.loc 1 1119 24 is_stmt 0 view .LVU4077
 15532 0028 3B68     		ldr	r3, [r7]
 15533 002a B3F8E837 		ldrh	r3, [r3, #2024]
 15534              	.LBE2784:
 15535              	.LBE2783:
 727:src/xeq.c     **** }
 15536              		.loc 1 727 2 view .LVU4078
 15537 002e 2340     		ands	r3, r3, r4
 15538 0030 B3F5804F 		cmp	r3, #16384
 15539 0034 0CBF     		ite	eq
 15540 0036 1022     		moveq	r2, #16
 15541 0038 0822     		movne	r2, #8
 15542 003a 2946     		mov	r1, r5
 15543 003c 3046     		mov	r0, r6
 15544 003e FFF7FEFF 		bl	xcopy
 15545              	.LVL1118:
 727:src/xeq.c     **** }
 15546              		.loc 1 727 2 view .LVU4079
 15547              	.LBE2782:
 15548              	.LBE2781:
1919:src/xeq.c     **** }
 15549              		.loc 1 1919 2 is_stmt 1 view .LVU4080
 15550              	.LBB2785:
ARM GAS  /tmp/cc7LeJ71.s 			page 441


 15551              	.LBI2785:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 15552              		.loc 1 726 6 view .LVU4081
 15553              	.LBB2786:
 727:src/xeq.c     **** }
 15554              		.loc 1 727 2 view .LVU4082
 15555              	.LBB2787:
 15556              	.LBI2787:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 15557              		.loc 1 1118 5 view .LVU4083
 15558              	.LBB2788:
1119:src/xeq.c     **** }
 15559              		.loc 1 1119 2 view .LVU4084
1119:src/xeq.c     **** }
 15560              		.loc 1 1119 24 is_stmt 0 view .LVU4085
 15561 0042 3B68     		ldr	r3, [r7]
 15562 0044 B3F8E837 		ldrh	r3, [r3, #2024]
 15563              	.LBE2788:
 15564              	.LBE2787:
 727:src/xeq.c     **** }
 15565              		.loc 1 727 2 view .LVU4086
 15566 0048 1C40     		ands	r4, r4, r3
 15567 004a B4F5804F 		cmp	r4, #16384
 15568 004e 2846     		mov	r0, r5
 15569 0050 6946     		mov	r1, sp
 15570 0052 0CBF     		ite	eq
 15571 0054 1022     		moveq	r2, #16
 15572 0056 0822     		movne	r2, #8
 15573 0058 FFF7FEFF 		bl	xcopy
 15574              	.LVL1119:
 727:src/xeq.c     **** }
 15575              		.loc 1 727 2 view .LVU4087
 15576              	.LBE2786:
 15577              	.LBE2785:
1920:src/xeq.c     **** 
 15578              		.loc 1 1920 1 view .LVU4088
 15579 005c 05B0     		add	sp, sp, #20
 15580              		.cfi_def_cfa_offset 20
 15581              		@ sp needed
 15582 005e F0BD     		pop	{r4, r5, r6, r7, pc}
 15583              	.LVL1120:
 15584              	.L1115:
1920:src/xeq.c     **** 
 15585              		.loc 1 1920 1 view .LVU4089
 15586              		.align	2
 15587              	.L1114:
 15588 0060 00000000 		.word	main_ram
 15589              		.cfi_endproc
 15590              	.LFE126:
 15592              		.section	.text.cmdswap,"ax",%progbits
 15593              		.align	1
 15594              		.p2align 2,,3
 15595              		.global	cmdswap
 15596              		.syntax unified
 15597              		.thumb
 15598              		.thumb_func
 15599              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc7LeJ71.s 			page 442


 15601              	cmdswap:
 15602              	.LVL1121:
 15603              	.LFB127:
1922:src/xeq.c     **** 	int idx;
 15604              		.loc 1 1922 46 is_stmt 1 view -0
 15605              		.cfi_startproc
 15606              		@ args = 0, pretend = 0, frame = 0
 15607              		@ frame_needed = 0, uses_anonymous_args = 0
1923:src/xeq.c     **** 
 15608              		.loc 1 1923 2 view .LVU4091
1925:src/xeq.c     **** 		idx = regX_idx;
 15609              		.loc 1 1925 2 view .LVU4092
1925:src/xeq.c     **** 		idx = regX_idx;
 15610              		.loc 1 1925 5 is_stmt 0 view .LVU4093
 15611 0000 1F29     		cmp	r1, #31
1922:src/xeq.c     **** 	int idx;
 15612              		.loc 1 1922 46 view .LVU4094
 15613 0002 70B5     		push	{r4, r5, r6, lr}
 15614              		.cfi_def_cfa_offset 16
 15615              		.cfi_offset 4, -16
 15616              		.cfi_offset 5, -12
 15617              		.cfi_offset 6, -8
 15618              		.cfi_offset 14, -4
1922:src/xeq.c     **** 	int idx;
 15619              		.loc 1 1922 46 view .LVU4095
 15620 0004 0546     		mov	r5, r0
1925:src/xeq.c     **** 		idx = regX_idx;
 15621              		.loc 1 1925 5 view .LVU4096
 15622 0006 11D0     		beq	.L1117
1927:src/xeq.c     **** 		idx = regZ_idx;
 15623              		.loc 1 1927 10 view .LVU4097
 15624 0008 2029     		cmp	r1, #32
 15625 000a 0C46     		mov	r4, r1
1927:src/xeq.c     **** 		idx = regZ_idx;
 15626              		.loc 1 1927 7 is_stmt 1 view .LVU4098
1927:src/xeq.c     **** 		idx = regZ_idx;
 15627              		.loc 1 1927 10 is_stmt 0 view .LVU4099
 15628 000c 33D0     		beq	.L1118
1930:src/xeq.c     **** 
 15629              		.loc 1 1930 3 is_stmt 1 view .LVU4100
 15630              	.LVL1122:
1932:src/xeq.c     **** 
 15631              		.loc 1 1932 2 view .LVU4101
 15632 000e 01F15300 		add	r0, r1, #83
 15633              	.LVL1123:
1932:src/xeq.c     **** 
 15634              		.loc 1 1932 2 is_stmt 0 view .LVU4102
 15635 0012 FFF7FEFF 		bl	get_reg_n
 15636              	.LVL1124:
1932:src/xeq.c     **** 
 15637              		.loc 1 1932 2 view .LVU4103
 15638 0016 0646     		mov	r6, r0
 15639 0018 2846     		mov	r0, r5
 15640 001a FFF7FEFF 		bl	get_reg_n
 15641              	.LVL1125:
 15642 001e 0146     		mov	r1, r0
 15643 0020 3046     		mov	r0, r6
ARM GAS  /tmp/cc7LeJ71.s 			page 443


 15644 0022 FFF7FEFF 		bl	swap_reg
 15645              	.LVL1126:
1934:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15646              		.loc 1 1934 2 is_stmt 1 view .LVU4104
1934:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15647              		.loc 1 1934 5 is_stmt 0 view .LVU4105
 15648 0026 1E2C     		cmp	r4, #30
 15649 0028 32D8     		bhi	.L1122
1941:src/xeq.c     **** 
 15650              		.loc 1 1941 1 view .LVU4106
 15651 002a 70BD     		pop	{r4, r5, r6, pc}
 15652              	.LVL1127:
 15653              	.L1117:
1932:src/xeq.c     **** 
 15654              		.loc 1 1932 2 is_stmt 1 view .LVU4107
 15655 002c 6420     		movs	r0, #100
 15656              	.LVL1128:
1932:src/xeq.c     **** 
 15657              		.loc 1 1932 2 is_stmt 0 view .LVU4108
 15658 002e FFF7FEFF 		bl	get_reg_n
 15659              	.LVL1129:
1932:src/xeq.c     **** 
 15660              		.loc 1 1932 2 view .LVU4109
 15661 0032 0446     		mov	r4, r0
 15662 0034 2846     		mov	r0, r5
 15663 0036 FFF7FEFF 		bl	get_reg_n
 15664              	.LVL1130:
 15665 003a 0146     		mov	r1, r0
 15666 003c 2046     		mov	r0, r4
 15667 003e FFF7FEFF 		bl	swap_reg
 15668              	.LVL1131:
1934:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15669              		.loc 1 1934 2 is_stmt 1 view .LVU4110
1932:src/xeq.c     **** 
 15670              		.loc 1 1932 2 is_stmt 0 view .LVU4111
 15671 0042 6520     		movs	r0, #101
 15672              	.LVL1132:
 15673              	.L1120:
1935:src/xeq.c     **** 		set_was_complex();
 15674              		.loc 1 1935 3 is_stmt 1 view .LVU4112
 15675 0044 FFF7FEFF 		bl	get_reg_n
 15676              	.LVL1133:
 15677 0048 0446     		mov	r4, r0
 15678 004a 681C     		adds	r0, r5, #1
 15679 004c FFF7FEFF 		bl	get_reg_n
 15680              	.LVL1134:
 15681 0050 0146     		mov	r1, r0
 15682 0052 2046     		mov	r0, r4
 15683 0054 FFF7FEFF 		bl	swap_reg
 15684              	.LVL1135:
1936:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 15685              		.loc 1 1936 3 view .LVU4113
 15686              	.LBB2789:
 15687              	.LBI2789:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 15688              		.loc 1 539 13 view .LVU4114
 15689              	.LBB2790:
ARM GAS  /tmp/cc7LeJ71.s 			page 444


 540:src/xeq.c     **** }
 15690              		.loc 1 540 2 view .LVU4115
 540:src/xeq.c     **** }
 15691              		.loc 1 540 20 is_stmt 0 view .LVU4116
 15692 0058 0F4B     		ldr	r3, .L1123
 15693              	.LBE2790:
 15694              	.LBE2789:
1938:src/xeq.c     **** #endif
 15695              		.loc 1 1938 2 view .LVU4117
 15696 005a 104A     		ldr	r2, .L1123+4
 15697              	.LBB2793:
 15698              	.LBB2791:
 540:src/xeq.c     **** }
 15699              		.loc 1 540 20 view .LVU4118
 15700 005c 197D     		ldrb	r1, [r3, #20]	@ zero_extendqisi2
 15701              	.LBE2791:
 15702              	.LBE2793:
1938:src/xeq.c     **** #endif
 15703              		.loc 1 1938 2 view .LVU4119
 15704 005e 1268     		ldr	r2, [r2]
 15705              	.LBB2794:
 15706              	.LBB2792:
 540:src/xeq.c     **** }
 15707              		.loc 1 540 20 view .LVU4120
 15708 0060 0120     		movs	r0, #1
 15709 0062 60F38711 		bfi	r1, r0, #6, #2
 15710 0066 1975     		strb	r1, [r3, #20]
 15711              	.LBE2792:
 15712              	.LBE2794:
1938:src/xeq.c     **** #endif
 15713              		.loc 1 1938 2 is_stmt 1 view .LVU4121
 15714 0068 92F8DE37 		ldrb	r3, [r2, #2014]	@ zero_extendqisi2
 15715 006c 43F01003 		orr	r3, r3, #16
 15716 0070 82F8DE37 		strb	r3, [r2, #2014]
1941:src/xeq.c     **** 
 15717              		.loc 1 1941 1 is_stmt 0 view .LVU4122
 15718 0074 70BD     		pop	{r4, r5, r6, pc}
 15719              	.LVL1136:
 15720              	.L1118:
1932:src/xeq.c     **** 
 15721              		.loc 1 1932 2 is_stmt 1 view .LVU4123
 15722 0076 6620     		movs	r0, #102
 15723              	.LVL1137:
1932:src/xeq.c     **** 
 15724              		.loc 1 1932 2 is_stmt 0 view .LVU4124
 15725 0078 FFF7FEFF 		bl	get_reg_n
 15726              	.LVL1138:
1932:src/xeq.c     **** 
 15727              		.loc 1 1932 2 view .LVU4125
 15728 007c 0446     		mov	r4, r0
 15729 007e 2846     		mov	r0, r5
 15730 0080 FFF7FEFF 		bl	get_reg_n
 15731              	.LVL1139:
 15732 0084 0146     		mov	r1, r0
 15733 0086 2046     		mov	r0, r4
 15734 0088 FFF7FEFF 		bl	swap_reg
 15735              	.LVL1140:
ARM GAS  /tmp/cc7LeJ71.s 			page 445


1934:src/xeq.c     **** 		swap_reg(get_reg_n(idx + 1), get_reg_n(arg + 1));
 15736              		.loc 1 1934 2 is_stmt 1 view .LVU4126
1932:src/xeq.c     **** 
 15737              		.loc 1 1932 2 is_stmt 0 view .LVU4127
 15738 008c 6720     		movs	r0, #103
 15739 008e D9E7     		b	.L1120
 15740              	.LVL1141:
 15741              	.L1122:
1932:src/xeq.c     **** 
 15742              		.loc 1 1932 2 view .LVU4128
 15743 0090 04F15400 		add	r0, r4, #84
 15744 0094 D6E7     		b	.L1120
 15745              	.L1124:
 15746 0096 00BF     		.align	2
 15747              	.L1123:
 15748 0098 00000000 		.word	StateWhileOn
 15749 009c 00000000 		.word	main_ram
 15750              		.cfi_endproc
 15751              	.LFE127:
 15753              		.section	.text.cmdview,"ax",%progbits
 15754              		.align	1
 15755              		.p2align 2,,3
 15756              		.global	cmdview
 15757              		.syntax unified
 15758              		.thumb
 15759              		.thumb_func
 15760              		.fpu fpv4-sp-d16
 15762              	cmdview:
 15763              	.LVL1142:
 15764              	.LFB128:
1946:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15765              		.loc 1 1946 46 is_stmt 1 view -0
 15766              		.cfi_startproc
 15767              		@ args = 0, pretend = 0, frame = 0
 15768              		@ frame_needed = 0, uses_anonymous_args = 0
1947:src/xeq.c     **** 
 15769              		.loc 1 1947 2 view .LVU4130
1946:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15770              		.loc 1 1946 46 is_stmt 0 view .LVU4131
 15771 0000 70B5     		push	{r4, r5, r6, lr}
 15772              		.cfi_def_cfa_offset 16
 15773              		.cfi_offset 4, -16
 15774              		.cfi_offset 5, -12
 15775              		.cfi_offset 6, -8
 15776              		.cfi_offset 14, -4
1949:src/xeq.c     **** 	ShowRegister = arg;
 15777              		.loc 1 1949 20 view .LVU4132
 15778 0002 134D     		ldr	r5, .L1131
1950:src/xeq.c     **** 	State2.disp_freeze = 0;
 15779              		.loc 1 1950 15 view .LVU4133
 15780 0004 134A     		ldr	r2, .L1131+4
1949:src/xeq.c     **** 	ShowRegister = arg;
 15781              		.loc 1 1949 20 view .LVU4134
 15782 0006 6B69     		ldr	r3, [r5, #20]
1950:src/xeq.c     **** 	State2.disp_freeze = 0;
 15783              		.loc 1 1950 15 view .LVU4135
 15784 0008 1060     		str	r0, [r2]
ARM GAS  /tmp/cc7LeJ71.s 			page 446


1946:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15785              		.loc 1 1946 46 view .LVU4136
 15786 000a 0E46     		mov	r6, r1
 15787              	.LVL1143:
1949:src/xeq.c     **** 	ShowRegister = arg;
 15788              		.loc 1 1949 2 is_stmt 1 view .LVU4137
1950:src/xeq.c     **** 	State2.disp_freeze = 0;
 15789              		.loc 1 1950 2 view .LVU4138
1951:src/xeq.c     **** 	display();
 15790              		.loc 1 1951 2 view .LVU4139
1947:src/xeq.c     **** 
 15791              		.loc 1 1947 41 is_stmt 0 view .LVU4140
 15792 000c A1F19301 		sub	r1, #147
 15793              	.LVL1144:
1949:src/xeq.c     **** 	ShowRegister = arg;
 15794              		.loc 1 1949 20 view .LVU4141
 15795 0010 23F08053 		bic	r3, r3, #268435456
1947:src/xeq.c     **** 
 15796              		.loc 1 1947 41 view .LVU4142
 15797 0014 B1FA81F1 		clz	r1, r1
 15798 0018 4909     		lsrs	r1, r1, #5
1949:src/xeq.c     **** 	ShowRegister = arg;
 15799              		.loc 1 1949 20 view .LVU4143
 15800 001a 23F0C003 		bic	r3, r3, #192
 15801 001e 43EA8113 		orr	r3, r3, r1, lsl #6
1946:src/xeq.c     **** 	const int cmplx = op == RARG_CVIEW ? 1 : 0;
 15802              		.loc 1 1946 46 view .LVU4144
 15803 0022 0446     		mov	r4, r0
1949:src/xeq.c     **** 	ShowRegister = arg;
 15804              		.loc 1 1949 20 view .LVU4145
 15805 0024 6B61     		str	r3, [r5, #20]
1952:src/xeq.c     **** 	State2.disp_freeze = cmplx || Running || arg != regX_idx;
 15806              		.loc 1 1952 2 is_stmt 1 view .LVU4146
 15807 0026 FFF7FEFF 		bl	display
 15808              	.LVL1145:
1953:src/xeq.c     **** }
 15809              		.loc 1 1953 2 view .LVU4147
1953:src/xeq.c     **** }
 15810              		.loc 1 1953 40 is_stmt 0 view .LVU4148
 15811 002a 932E     		cmp	r6, #147
 15812 002c 02D0     		beq	.L1128
1953:src/xeq.c     **** }
 15813              		.loc 1 1953 29 discriminator 2 view .LVU4149
 15814 002e 0A4B     		ldr	r3, .L1131+8
 15815 0030 1B68     		ldr	r3, [r3]
 15816 0032 2BB1     		cbz	r3, .L1130
 15817              	.L1128:
1953:src/xeq.c     **** }
 15818              		.loc 1 1953 21 view .LVU4150
 15819 0034 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 15820 0036 0124     		movs	r4, #1
 15821              	.LVL1146:
1953:src/xeq.c     **** }
 15822              		.loc 1 1953 21 view .LVU4151
 15823 0038 64F30413 		bfi	r3, r4, #4, #1
 15824 003c EB75     		strb	r3, [r5, #23]
1954:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 447


 15825              		.loc 1 1954 1 view .LVU4152
 15826 003e 70BD     		pop	{r4, r5, r6, pc}
 15827              	.LVL1147:
 15828              	.L1130:
1953:src/xeq.c     **** }
 15829              		.loc 1 1953 21 discriminator 4 view .LVU4153
 15830 0040 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
1953:src/xeq.c     **** }
 15831              		.loc 1 1953 40 discriminator 4 view .LVU4154
 15832 0042 643C     		subs	r4, r4, #100
 15833              	.LVL1148:
1953:src/xeq.c     **** }
 15834              		.loc 1 1953 40 discriminator 4 view .LVU4155
 15835 0044 18BF     		it	ne
 15836 0046 0124     		movne	r4, #1
 15837              	.LVL1149:
1953:src/xeq.c     **** }
 15838              		.loc 1 1953 21 discriminator 4 view .LVU4156
 15839 0048 64F30413 		bfi	r3, r4, #4, #1
 15840 004c EB75     		strb	r3, [r5, #23]
1954:src/xeq.c     **** 
 15841              		.loc 1 1954 1 discriminator 4 view .LVU4157
 15842 004e 70BD     		pop	{r4, r5, r6, pc}
 15843              	.L1132:
 15844              		.align	2
 15845              	.L1131:
 15846 0050 00000000 		.word	StateWhileOn
 15847 0054 00000000 		.word	ShowRegister
 15848 0058 00000000 		.word	Running
 15849              		.cfi_endproc
 15850              	.LFE128:
 15852              		.section	.text.get_stack_size,"ax",%progbits
 15853              		.align	1
 15854              		.p2align 2,,3
 15855              		.global	get_stack_size
 15856              		.syntax unified
 15857              		.thumb
 15858              		.thumb_func
 15859              		.fpu fpv4-sp-d16
 15861              	get_stack_size:
 15862              	.LVL1150:
 15863              	.LFB129:
1958:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15864              		.loc 1 1958 36 is_stmt 1 view -0
 15865              		.cfi_startproc
 15866              		@ args = 0, pretend = 0, frame = 0
 15867              		@ frame_needed = 0, uses_anonymous_args = 0
1959:src/xeq.c     **** }
 15868              		.loc 1 1959 2 view .LVU4159
 15869              	.LBB2795:
 15870              	.LBI2795:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 15871              		.loc 1 712 5 view .LVU4160
 15872              	.LBB2796:
 713:src/xeq.c     **** 		return 4;
 15873              		.loc 1 713 2 view .LVU4161
 713:src/xeq.c     **** 		return 4;
ARM GAS  /tmp/cc7LeJ71.s 			page 448


 15874              		.loc 1 713 8 is_stmt 0 view .LVU4162
 15875 0000 0F4B     		ldr	r3, .L1140
 15876              	.LBE2796:
 15877              	.LBE2795:
1958:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15878              		.loc 1 1958 36 view .LVU4163
 15879 0002 00B5     		push	{lr}
 15880              		.cfi_def_cfa_offset 4
 15881              		.cfi_offset 14, -4
 15882              	.LBB2802:
 15883              	.LBB2799:
 713:src/xeq.c     **** 		return 4;
 15884              		.loc 1 713 8 view .LVU4164
 15885 0004 1B68     		ldr	r3, [r3]
 713:src/xeq.c     **** 		return 4;
 15886              		.loc 1 713 6 view .LVU4165
 15887 0006 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 15888              		.loc 1 713 5 view .LVU4166
 15889 000a 1207     		lsls	r2, r2, #28
 15890              	.LBE2799:
 15891              	.LBE2802:
1958:src/xeq.c     **** 	setX_int_sgn(stack_size(), 0);
 15892              		.loc 1 1958 36 view .LVU4167
 15893 000c 83B0     		sub	sp, sp, #12
 15894              		.cfi_def_cfa_offset 16
 15895              	.LBB2803:
 15896              	.LBB2800:
 713:src/xeq.c     **** 		return 4;
 15897              		.loc 1 713 5 view .LVU4168
 15898 000e 13D5     		bpl	.L1135
 15899              	.LBB2797:
 15900              	.LBI2797:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 15901              		.loc 1 185 5 is_stmt 1 view .LVU4169
 15902              	.LBB2798:
 186:src/xeq.c     **** }
 15903              		.loc 1 186 2 view .LVU4170
 186:src/xeq.c     **** }
 15904              		.loc 1 186 9 is_stmt 0 view .LVU4171
 15905 0010 B3F8E037 		ldrh	r3, [r3, #2016]
 15906              	.LBE2798:
 15907              	.LBE2797:
 713:src/xeq.c     **** 		return 4;
 15908              		.loc 1 713 27 view .LVU4172
 15909 0014 9B0B     		lsrs	r3, r3, #14
 15910 0016 032B     		cmp	r3, #3
 15911 0018 09D0     		beq	.L1139
 15912              	.L1137:
 15913 001a 0822     		movs	r2, #8
 15914 001c 0023     		movs	r3, #0
 15915              	.L1134:
 15916              	.LVL1151:
 713:src/xeq.c     **** 		return 4;
 15917              		.loc 1 713 27 view .LVU4173
 15918              	.LBE2800:
 15919              	.LBE2803:
ARM GAS  /tmp/cc7LeJ71.s 			page 449


 15920              	.LBB2804:
 15921              	.LBI2804:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15922              		.loc 1 1509 6 is_stmt 1 view .LVU4174
 15923              	.LBB2805:
1510:src/xeq.c     **** }
 15924              		.loc 1 1510 2 view .LVU4175
 15925 001e 0021     		movs	r1, #0
 15926 0020 0091     		str	r1, [sp]
 15927 0022 6420     		movs	r0, #100
 15928              	.LVL1152:
1510:src/xeq.c     **** }
 15929              		.loc 1 1510 2 is_stmt 0 view .LVU4176
 15930 0024 FFF7FEFF 		bl	set_reg_n_int_sgn
 15931              	.LVL1153:
1510:src/xeq.c     **** }
 15932              		.loc 1 1510 2 view .LVU4177
 15933              	.LBE2805:
 15934              	.LBE2804:
1960:src/xeq.c     **** 
 15935              		.loc 1 1960 1 view .LVU4178
 15936 0028 03B0     		add	sp, sp, #12
 15937              		.cfi_remember_state
 15938              		.cfi_def_cfa_offset 4
 15939              		@ sp needed
 15940 002a 5DF804FB 		ldr	pc, [sp], #4
 15941              	.LVL1154:
 15942              	.L1139:
 15943              		.cfi_restore_state
 15944              	.LBB2806:
 15945              	.LBB2801:
 713:src/xeq.c     **** 		return 4;
 15946              		.loc 1 713 44 view .LVU4179
 15947 002e 054B     		ldr	r3, .L1140+4
 713:src/xeq.c     **** 		return 4;
 15948              		.loc 1 713 41 view .LVU4180
 15949 0030 93F90130 		ldrsb	r3, [r3, #1]
 15950 0034 002B     		cmp	r3, #0
 15951 0036 F0DB     		blt	.L1137
 15952              	.L1135:
 15953 0038 0422     		movs	r2, #4
 15954 003a 0023     		movs	r3, #0
 15955 003c EFE7     		b	.L1134
 15956              	.L1141:
 15957 003e 00BF     		.align	2
 15958              	.L1140:
 15959 0040 00000000 		.word	main_ram
 15960 0044 00000000 		.word	XromParams
 15961              	.LBE2801:
 15962              	.LBE2806:
 15963              		.cfi_endproc
 15964              	.LFE129:
 15966              		.section	.text.get_word_size,"ax",%progbits
 15967              		.align	1
 15968              		.p2align 2,,3
 15969              		.global	get_word_size
 15970              		.syntax unified
ARM GAS  /tmp/cc7LeJ71.s 			page 450


 15971              		.thumb
 15972              		.thumb_func
 15973              		.fpu fpv4-sp-d16
 15975              	get_word_size:
 15976              	.LVL1155:
 15977              	.LFB130:
1962:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15978              		.loc 1 1962 35 is_stmt 1 view -0
 15979              		.cfi_startproc
 15980              		@ args = 0, pretend = 0, frame = 0
 15981              		@ frame_needed = 0, uses_anonymous_args = 0
1963:src/xeq.c     **** }
 15982              		.loc 1 1963 2 view .LVU4182
1962:src/xeq.c     **** 	setX_int_sgn((int)word_size(), 0);
 15983              		.loc 1 1962 35 is_stmt 0 view .LVU4183
 15984 0000 00B5     		push	{lr}
 15985              		.cfi_def_cfa_offset 4
 15986              		.cfi_offset 14, -4
 15987 0002 83B0     		sub	sp, sp, #12
 15988              		.cfi_def_cfa_offset 16
1963:src/xeq.c     **** }
 15989              		.loc 1 1963 20 view .LVU4184
 15990 0004 FFF7FEFF 		bl	word_size
 15991              	.LVL1156:
 15992              	.LBB2807:
 15993              	.LBI2807:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 15994              		.loc 1 1509 6 is_stmt 1 view .LVU4185
 15995              	.LBB2808:
1510:src/xeq.c     **** }
 15996              		.loc 1 1510 2 view .LVU4186
 15997 0008 0021     		movs	r1, #0
 15998 000a 0246     		mov	r2, r0
 15999 000c C317     		asrs	r3, r0, #31
 16000 000e 0091     		str	r1, [sp]
 16001 0010 6420     		movs	r0, #100
 16002              	.LVL1157:
1510:src/xeq.c     **** }
 16003              		.loc 1 1510 2 is_stmt 0 view .LVU4187
 16004 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 16005              	.LVL1158:
1510:src/xeq.c     **** }
 16006              		.loc 1 1510 2 view .LVU4188
 16007              	.LBE2808:
 16008              	.LBE2807:
1964:src/xeq.c     **** 
 16009              		.loc 1 1964 1 view .LVU4189
 16010 0016 03B0     		add	sp, sp, #12
 16011              		.cfi_def_cfa_offset 4
 16012              		@ sp needed
 16013 0018 5DF804FB 		ldr	pc, [sp], #4
 16014              		.cfi_endproc
 16015              	.LFE130:
 16017              		.section	.text.get_sign_mode,"ax",%progbits
 16018              		.align	1
 16019              		.p2align 2,,3
 16020              		.global	get_sign_mode
ARM GAS  /tmp/cc7LeJ71.s 			page 451


 16021              		.syntax unified
 16022              		.thumb
 16023              		.thumb_func
 16024              		.fpu fpv4-sp-d16
 16026              	get_sign_mode:
 16027              	.LVL1159:
 16028              	.LFB131:
1966:src/xeq.c     **** 	static const unsigned char modes[4] = {
 16029              		.loc 1 1966 35 is_stmt 1 view -0
 16030              		.cfi_startproc
 16031              		@ args = 0, pretend = 0, frame = 0
 16032              		@ frame_needed = 0, uses_anonymous_args = 0
1967:src/xeq.c     **** 		0x02,		// 2's complement
 16033              		.loc 1 1967 2 view .LVU4191
1973:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 16034              		.loc 1 1973 2 view .LVU4192
1966:src/xeq.c     **** 	static const unsigned char modes[4] = {
 16035              		.loc 1 1966 35 is_stmt 0 view .LVU4193
 16036 0000 00B5     		push	{lr}
 16037              		.cfi_def_cfa_offset 4
 16038              		.cfi_offset 14, -4
 16039 0002 83B0     		sub	sp, sp, #12
 16040              		.cfi_def_cfa_offset 16
1973:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 16041              		.loc 1 1973 37 view .LVU4194
 16042 0004 FFF7FEFF 		bl	int_mode
 16043              	.LVL1160:
1973:src/xeq.c     **** 	setX_int_sgn(v & 3, v & 0x80);
 16044              		.loc 1 1973 22 view .LVU4195
 16045 0008 064B     		ldr	r3, .L1146
 16046 000a 1B5C     		ldrb	r3, [r3, r0]	@ zero_extendqisi2
 16047              	.LVL1161:
1974:src/xeq.c     **** }
 16048              		.loc 1 1974 2 is_stmt 1 view .LVU4196
 16049              	.LBB2809:
 16050              	.LBI2809:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16051              		.loc 1 1509 6 view .LVU4197
 16052              	.LBB2810:
1510:src/xeq.c     **** }
 16053              		.loc 1 1510 2 view .LVU4198
 16054              	.LBE2810:
 16055              	.LBE2809:
1974:src/xeq.c     **** }
 16056              		.loc 1 1974 2 is_stmt 0 view .LVU4199
 16057 000c 03F00302 		and	r2, r3, #3
 16058 0010 03F08003 		and	r3, r3, #128
 16059              	.LVL1162:
1974:src/xeq.c     **** }
 16060              		.loc 1 1974 2 view .LVU4200
 16061 0014 0093     		str	r3, [sp]
 16062              	.LBB2812:
 16063              	.LBB2811:
1510:src/xeq.c     **** }
 16064              		.loc 1 1510 2 view .LVU4201
 16065 0016 6420     		movs	r0, #100
 16066              	.LVL1163:
ARM GAS  /tmp/cc7LeJ71.s 			page 452


1510:src/xeq.c     **** }
 16067              		.loc 1 1510 2 view .LVU4202
 16068 0018 0023     		movs	r3, #0
 16069 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 16070              	.LVL1164:
1510:src/xeq.c     **** }
 16071              		.loc 1 1510 2 view .LVU4203
 16072              	.LBE2811:
 16073              	.LBE2812:
1975:src/xeq.c     **** 
 16074              		.loc 1 1975 1 view .LVU4204
 16075 001e 03B0     		add	sp, sp, #12
 16076              		.cfi_def_cfa_offset 4
 16077              		@ sp needed
 16078 0020 5DF804FB 		ldr	pc, [sp], #4
 16079              	.L1147:
 16080              		.align	2
 16081              	.L1146:
 16082 0024 00000000 		.word	.LANCHOR4
 16083              		.cfi_endproc
 16084              	.LFE131:
 16086              		.section	.text.get_base,"ax",%progbits
 16087              		.align	1
 16088              		.p2align 2,,3
 16089              		.global	get_base
 16090              		.syntax unified
 16091              		.thumb
 16092              		.thumb_func
 16093              		.fpu fpv4-sp-d16
 16095              	get_base:
 16096              	.LVL1165:
 16097              	.LFB132:
1977:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 16098              		.loc 1 1977 30 is_stmt 1 view -0
 16099              		.cfi_startproc
 16100              		@ args = 0, pretend = 0, frame = 0
 16101              		@ frame_needed = 0, uses_anonymous_args = 0
1978:src/xeq.c     **** }
 16102              		.loc 1 1978 2 view .LVU4206
1977:src/xeq.c     **** 	setX_int_sgn((int)int_base(), 0);
 16103              		.loc 1 1977 30 is_stmt 0 view .LVU4207
 16104 0000 00B5     		push	{lr}
 16105              		.cfi_def_cfa_offset 4
 16106              		.cfi_offset 14, -4
 16107 0002 83B0     		sub	sp, sp, #12
 16108              		.cfi_def_cfa_offset 16
1978:src/xeq.c     **** }
 16109              		.loc 1 1978 20 view .LVU4208
 16110 0004 FFF7FEFF 		bl	int_base
 16111              	.LVL1166:
 16112              	.LBB2813:
 16113              	.LBI2813:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16114              		.loc 1 1509 6 is_stmt 1 view .LVU4209
 16115              	.LBB2814:
1510:src/xeq.c     **** }
 16116              		.loc 1 1510 2 view .LVU4210
ARM GAS  /tmp/cc7LeJ71.s 			page 453


 16117 0008 0021     		movs	r1, #0
 16118 000a 0246     		mov	r2, r0
 16119 000c C317     		asrs	r3, r0, #31
 16120 000e 0091     		str	r1, [sp]
 16121 0010 6420     		movs	r0, #100
 16122              	.LVL1167:
1510:src/xeq.c     **** }
 16123              		.loc 1 1510 2 is_stmt 0 view .LVU4211
 16124 0012 FFF7FEFF 		bl	set_reg_n_int_sgn
 16125              	.LVL1168:
1510:src/xeq.c     **** }
 16126              		.loc 1 1510 2 view .LVU4212
 16127              	.LBE2814:
 16128              	.LBE2813:
1979:src/xeq.c     **** 
 16129              		.loc 1 1979 1 view .LVU4213
 16130 0016 03B0     		add	sp, sp, #12
 16131              		.cfi_def_cfa_offset 4
 16132              		@ sp needed
 16133 0018 5DF804FB 		ldr	pc, [sp], #4
 16134              		.cfi_endproc
 16135              	.LFE132:
 16137              		.section	.text.DM42_Ticker,"ax",%progbits
 16138              		.align	1
 16139              		.p2align 2,,3
 16140              		.global	DM42_Ticker
 16141              		.syntax unified
 16142              		.thumb
 16143              		.thumb_func
 16144              		.fpu fpv4-sp-d16
 16146              	DM42_Ticker:
 16147              	.LFB133:
1982:src/xeq.c     ****     long int f, t;
 16148              		.loc 1 1982 26 is_stmt 1 view -0
 16149              		.cfi_startproc
 16150              		@ args = 0, pretend = 0, frame = 0
 16151              		@ frame_needed = 0, uses_anonymous_args = 0
1983:src/xeq.c     ****     t = get_rtc_ticks();
 16152              		.loc 1 1983 5 view .LVU4215
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16153              		.loc 1 1984 5 view .LVU4216
1982:src/xeq.c     ****     long int f, t;
 16154              		.loc 1 1982 26 is_stmt 0 view .LVU4217
 16155 0000 08B5     		push	{r3, lr}
 16156              		.cfi_def_cfa_offset 8
 16157              		.cfi_offset 3, -8
 16158              		.cfi_offset 14, -4
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16159              		.loc 1 1984 9 view .LVU4218
 16160 0002 044B     		ldr	r3, .L1152
 16161 0004 9847     		blx	r3
 16162              	.LVL1169:
1985:src/xeq.c     ****     return f;
 16163              		.loc 1 1985 5 is_stmt 1 view .LVU4219
1986:src/xeq.c     ****  }
 16164              		.loc 1 1986 5 view .LVU4220
1985:src/xeq.c     ****     return f;
ARM GAS  /tmp/cc7LeJ71.s 			page 454


 16165              		.loc 1 1985 13 is_stmt 0 view .LVU4221
 16166 0006 C0F31300 		ubfx	r0, r0, #0, #20
 16167              	.LVL1170:
1985:src/xeq.c     ****     return f;
 16168              		.loc 1 1985 23 view .LVU4222
 16169 000a 00EB8000 		add	r0, r0, r0, lsl #2
1987:src/xeq.c     **** #endif
 16170              		.loc 1 1987 2 view .LVU4223
 16171 000e C009     		lsrs	r0, r0, #7
 16172 0010 08BD     		pop	{r3, pc}
 16173              	.L1153:
 16174 0012 00BF     		.align	2
 16175              	.L1152:
 16176 0014 B9040008 		.word	134218937
 16177              		.cfi_endproc
 16178              	.LFE133:
 16180              		.section	.text.op_ticks,"ax",%progbits
 16181              		.align	1
 16182              		.p2align 2,,3
 16183              		.global	op_ticks
 16184              		.syntax unified
 16185              		.thumb
 16186              		.thumb_func
 16187              		.fpu fpv4-sp-d16
 16189              	op_ticks:
 16190              	.LVL1171:
 16191              	.LFB134:
1990:src/xeq.c     **** #if !defined(CONSOLE)
 16192              		.loc 1 1990 30 is_stmt 1 view -0
 16193              		.cfi_startproc
 16194              		@ args = 0, pretend = 0, frame = 0
 16195              		@ frame_needed = 0, uses_anonymous_args = 0
1992:src/xeq.c     **** #else 
 16196              		.loc 1 1992 5 view .LVU4225
 16197              	.LBB2815:
 16198              	.LBI2815:
1982:src/xeq.c     ****     long int f, t;
 16199              		.loc 1 1982 11 view .LVU4226
 16200              	.LBB2816:
1983:src/xeq.c     ****     t = get_rtc_ticks();
 16201              		.loc 1 1983 5 view .LVU4227
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16202              		.loc 1 1984 5 view .LVU4228
 16203              	.LBE2816:
 16204              	.LBE2815:
1990:src/xeq.c     **** #if !defined(CONSOLE)
 16205              		.loc 1 1990 30 is_stmt 0 view .LVU4229
 16206 0000 00B5     		push	{lr}
 16207              		.cfi_def_cfa_offset 4
 16208              		.cfi_offset 14, -4
 16209              	.LBB2820:
 16210              	.LBB2817:
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16211              		.loc 1 1984 9 view .LVU4230
 16212 0002 084B     		ldr	r3, .L1156
 16213              	.LBE2817:
 16214              	.LBE2820:
ARM GAS  /tmp/cc7LeJ71.s 			page 455


1990:src/xeq.c     **** #if !defined(CONSOLE)
 16215              		.loc 1 1990 30 view .LVU4231
 16216 0004 83B0     		sub	sp, sp, #12
 16217              		.cfi_def_cfa_offset 16
 16218              	.LBB2821:
 16219              	.LBB2818:
1984:src/xeq.c     ****     f = ((t & 0xfffff)*10)>>8; // tenths of a second, with lots of whole seconds before it;
 16220              		.loc 1 1984 9 view .LVU4232
 16221 0006 9847     		blx	r3
 16222              	.LVL1172:
1985:src/xeq.c     ****     return f;
 16223              		.loc 1 1985 5 is_stmt 1 view .LVU4233
1986:src/xeq.c     ****  }
 16224              		.loc 1 1986 5 view .LVU4234
1986:src/xeq.c     ****  }
 16225              		.loc 1 1986 5 is_stmt 0 view .LVU4235
 16226              	.LBE2818:
 16227              	.LBE2821:
 16228              	.LBB2822:
 16229              	.LBI2822:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16230              		.loc 1 1509 6 is_stmt 1 view .LVU4236
 16231              	.LBB2823:
1510:src/xeq.c     **** }
 16232              		.loc 1 1510 2 view .LVU4237
 16233              	.LBE2823:
 16234              	.LBE2822:
 16235              	.LBB2825:
 16236              	.LBB2819:
1985:src/xeq.c     ****     return f;
 16237              		.loc 1 1985 13 is_stmt 0 view .LVU4238
 16238 0008 C0F31300 		ubfx	r0, r0, #0, #20
 16239              	.LVL1173:
1985:src/xeq.c     ****     return f;
 16240              		.loc 1 1985 23 view .LVU4239
 16241 000c 00EB8000 		add	r0, r0, r0, lsl #2
1985:src/xeq.c     ****     return f;
 16242              		.loc 1 1985 7 view .LVU4240
 16243 0010 C209     		lsrs	r2, r0, #7
 16244              	.LBE2819:
 16245              	.LBE2825:
 16246              	.LBB2826:
 16247              	.LBB2824:
1510:src/xeq.c     **** }
 16248              		.loc 1 1510 2 view .LVU4241
 16249 0012 0021     		movs	r1, #0
 16250 0014 D317     		asrs	r3, r2, #31
 16251 0016 0091     		str	r1, [sp]
 16252 0018 6420     		movs	r0, #100
 16253 001a FFF7FEFF 		bl	set_reg_n_int_sgn
 16254              	.LVL1174:
1510:src/xeq.c     **** }
 16255              		.loc 1 1510 2 view .LVU4242
 16256              	.LBE2824:
 16257              	.LBE2826:
2000:src/xeq.c     **** 
 16258              		.loc 1 2000 1 view .LVU4243
ARM GAS  /tmp/cc7LeJ71.s 			page 456


 16259 001e 03B0     		add	sp, sp, #12
 16260              		.cfi_def_cfa_offset 4
 16261              		@ sp needed
 16262 0020 5DF804FB 		ldr	pc, [sp], #4
 16263              	.L1157:
 16264              		.align	2
 16265              	.L1156:
 16266 0024 B9040008 		.word	134218937
 16267              		.cfi_endproc
 16268              	.LFE134:
 16270              		.section	.text.op_voltage,"ax",%progbits
 16271              		.align	1
 16272              		.p2align 2,,3
 16273              		.global	op_voltage
 16274              		.syntax unified
 16275              		.thumb
 16276              		.thumb_func
 16277              		.fpu fpv4-sp-d16
 16279              	op_voltage:
 16280              	.LVL1175:
 16281              	.LFB135:
2003:src/xeq.c     **** 	decNumber t, u;
 16282              		.loc 1 2003 32 is_stmt 1 view -0
 16283              		.cfi_startproc
 16284              		@ args = 0, pretend = 0, frame = 72
 16285              		@ frame_needed = 0, uses_anonymous_args = 0
2004:src/xeq.c     **** #ifdef REALBUILD
 16286              		.loc 1 2004 2 view .LVU4245
2008:src/xeq.c     **** 	v = v / 100;
 16287              		.loc 1 2008 2 view .LVU4246
2003:src/xeq.c     **** 	decNumber t, u;
 16288              		.loc 1 2003 32 is_stmt 0 view .LVU4247
 16289 0000 00B5     		push	{lr}
 16290              		.cfi_def_cfa_offset 4
 16291              		.cfi_offset 14, -4
2008:src/xeq.c     **** 	v = v / 100;
 16292              		.loc 1 2008 10 view .LVU4248
 16293 0002 154B     		ldr	r3, .L1162
2003:src/xeq.c     **** 	decNumber t, u;
 16294              		.loc 1 2003 32 view .LVU4249
 16295 0004 95B0     		sub	sp, sp, #84
 16296              		.cfi_def_cfa_offset 88
2008:src/xeq.c     **** 	v = v / 100;
 16297              		.loc 1 2008 10 view .LVU4250
 16298 0006 9847     		blx	r3
 16299              	.LVL1176:
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16300              		.loc 1 2014 6 view .LVU4251
 16301 0008 144B     		ldr	r3, .L1162+4
2009:src/xeq.c     **** #else
 16302              		.loc 1 2009 4 view .LVU4252
 16303 000a 154A     		ldr	r2, .L1162+8
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16304              		.loc 1 2014 6 view .LVU4253
 16305 000c 1B68     		ldr	r3, [r3]
 16306              	.LVL1177:
2009:src/xeq.c     **** #else
ARM GAS  /tmp/cc7LeJ71.s 			page 457


 16307              		.loc 1 2009 2 is_stmt 1 view .LVU4254
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16308              		.loc 1 2014 6 is_stmt 0 view .LVU4255
 16309 000e 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2009:src/xeq.c     **** #else
 16310              		.loc 1 2009 4 view .LVU4256
 16311 0012 82FB0012 		smull	r1, r2, r2, r0
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16312              		.loc 1 2014 5 view .LVU4257
 16313 0016 DB07     		lsls	r3, r3, #31
2009:src/xeq.c     **** #else
 16314              		.loc 1 2009 4 view .LVU4258
 16315 0018 4FEAE070 		asr	r0, r0, #31
 16316              	.LVL1178:
2009:src/xeq.c     **** #else
 16317              		.loc 1 2009 4 view .LVU4259
 16318 001c C0EB6212 		rsb	r2, r0, r2, asr #5
 16319              	.LVL1179:
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16320              		.loc 1 2014 2 is_stmt 1 view .LVU4260
2014:src/xeq.c     **** 		setX_int_sgn(v, 0);
 16321              		.loc 1 2014 5 is_stmt 0 view .LVU4261
 16322 0020 08D5     		bpl	.L1159
2015:src/xeq.c     **** 	} else {
 16323              		.loc 1 2015 3 is_stmt 1 view .LVU4262
 16324              	.LVL1180:
 16325              	.LBB2827:
 16326              	.LBI2827:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16327              		.loc 1 1509 6 view .LVU4263
 16328              	.LBB2828:
1510:src/xeq.c     **** }
 16329              		.loc 1 1510 2 view .LVU4264
 16330 0022 0023     		movs	r3, #0
 16331 0024 0093     		str	r3, [sp]
 16332 0026 6420     		movs	r0, #100
 16333 0028 D317     		asrs	r3, r2, #31
 16334 002a FFF7FEFF 		bl	set_reg_n_int_sgn
 16335              	.LVL1181:
1510:src/xeq.c     **** }
 16336              		.loc 1 1510 2 is_stmt 0 view .LVU4265
 16337              	.LBE2828:
 16338              	.LBE2827:
2021:src/xeq.c     **** 
 16339              		.loc 1 2021 1 view .LVU4266
 16340 002e 15B0     		add	sp, sp, #84
 16341              		.cfi_remember_state
 16342              		.cfi_def_cfa_offset 4
 16343              		@ sp needed
 16344 0030 5DF804FB 		ldr	pc, [sp], #4
 16345              	.LVL1182:
 16346              	.L1159:
 16347              		.cfi_restore_state
2017:src/xeq.c     **** 		dn_mulpow10(&u, &t, -1);
 16348              		.loc 1 2017 3 is_stmt 1 view .LVU4267
 16349 0034 D317     		asrs	r3, r2, #31
 16350 0036 02A8     		add	r0, sp, #8
ARM GAS  /tmp/cc7LeJ71.s 			page 458


 16351 0038 FFF7FEFF 		bl	ullint_to_dn
 16352              	.LVL1183:
2018:src/xeq.c     **** 		setX(&u);
 16353              		.loc 1 2018 3 view .LVU4268
 16354 003c 02A9     		add	r1, sp, #8
 16355 003e 4FF0FF32 		mov	r2, #-1
 16356 0042 0BA8     		add	r0, sp, #44
 16357 0044 FFF7FEFF 		bl	dn_mulpow10
 16358              	.LVL1184:
2019:src/xeq.c     **** 	}
 16359              		.loc 1 2019 3 view .LVU4269
 16360              	.LBB2829:
 16361              	.LBI2829:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 16362              		.loc 1 828 6 view .LVU4270
 16363              	.LBB2830:
 829:src/xeq.c     **** }
 16364              		.loc 1 829 2 view .LVU4271
 16365 0048 0BA9     		add	r1, sp, #44
 16366              	.LVL1185:
 829:src/xeq.c     **** }
 16367              		.loc 1 829 2 is_stmt 0 view .LVU4272
 16368 004a 6420     		movs	r0, #100
 16369 004c FFF7FEFF 		bl	setRegister
 16370              	.LVL1186:
 829:src/xeq.c     **** }
 16371              		.loc 1 829 2 view .LVU4273
 16372              	.LBE2830:
 16373              	.LBE2829:
2021:src/xeq.c     **** 
 16374              		.loc 1 2021 1 view .LVU4274
 16375 0050 15B0     		add	sp, sp, #84
 16376              		.cfi_def_cfa_offset 4
 16377              		@ sp needed
 16378 0052 5DF804FB 		ldr	pc, [sp], #4
 16379              	.L1163:
 16380 0056 00BF     		.align	2
 16381              	.L1162:
 16382 0058 F1020008 		.word	134218481
 16383 005c 00000000 		.word	main_ram
 16384 0060 1F85EB51 		.word	1374389535
 16385              		.cfi_endproc
 16386              	.LFE135:
 16388              		.section	.text.free_mem,"ax",%progbits
 16389              		.align	1
 16390              		.p2align 2,,3
 16391              		.global	free_mem
 16392              		.syntax unified
 16393              		.thumb
 16394              		.thumb_func
 16395              		.fpu fpv4-sp-d16
 16397              	free_mem:
 16398              	.LFB136:
2026:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16399              		.loc 1 2026 20 is_stmt 1 view -0
 16400              		.cfi_startproc
 16401              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/cc7LeJ71.s 			page 459


 16402              		@ frame_needed = 0, uses_anonymous_args = 0
 16403              		@ link register save eliminated.
2027:src/xeq.c     **** }
 16404              		.loc 1 2027 2 view .LVU4276
2027:src/xeq.c     **** }
 16405              		.loc 1 2027 22 is_stmt 0 view .LVU4277
 16406 0000 034A     		ldr	r2, .L1165
2027:src/xeq.c     **** }
 16407              		.loc 1 2027 20 view .LVU4278
 16408 0002 044B     		ldr	r3, .L1165+4
2027:src/xeq.c     **** }
 16409              		.loc 1 2027 22 view .LVU4279
 16410 0004 1268     		ldr	r2, [r2]
2027:src/xeq.c     **** }
 16411              		.loc 1 2027 20 view .LVU4280
 16412 0006 1B68     		ldr	r3, [r3]
2027:src/xeq.c     **** }
 16413              		.loc 1 2027 22 view .LVU4281
 16414 0008 B2F9E207 		ldrsh	r0, [r2, #2018]
2028:src/xeq.c     **** 
 16415              		.loc 1 2028 1 view .LVU4282
 16416 000c 1844     		add	r0, r0, r3
 16417 000e 7047     		bx	lr
 16418              	.L1166:
 16419              		.align	2
 16420              	.L1165:
 16421 0010 00000000 		.word	main_ram
 16422 0014 00000000 		.word	RetStkSize
 16423              		.cfi_endproc
 16424              	.LFE136:
 16426              		.section	.text.free_flash,"ax",%progbits
 16427              		.align	1
 16428              		.p2align 2,,3
 16429              		.global	free_flash
 16430              		.syntax unified
 16431              		.thumb
 16432              		.thumb_func
 16433              		.fpu fpv4-sp-d16
 16435              	free_flash:
 16436              	.LFB137:
2030:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16437              		.loc 1 2030 22 is_stmt 1 view -0
 16438              		.cfi_startproc
 16439              		@ args = 0, pretend = 0, frame = 0
 16440              		@ frame_needed = 0, uses_anonymous_args = 0
 16441              		@ link register save eliminated.
2031:src/xeq.c     **** }
 16442              		.loc 1 2031 2 view .LVU4284
2031:src/xeq.c     **** }
 16443              		.loc 1 2031 38 is_stmt 0 view .LVU4285
 16444 0000 034B     		ldr	r3, .L1168
 16445 0002 1B68     		ldr	r3, [r3]
 16446 0004 5888     		ldrh	r0, [r3, #2]
2032:src/xeq.c     **** 
 16447              		.loc 1 2032 1 view .LVU4286
 16448 0006 C0F5FF50 		rsb	r0, r0, #8160
 16449 000a 1E30     		adds	r0, r0, #30
ARM GAS  /tmp/cc7LeJ71.s 			page 460


 16450 000c 7047     		bx	lr
 16451              	.L1169:
 16452 000e 00BF     		.align	2
 16453              	.L1168:
 16454 0010 00000000 		.word	library_ram
 16455              		.cfi_endproc
 16456              	.LFE137:
 16458              		.section	.text.get_mem,"ax",%progbits
 16459              		.align	1
 16460              		.p2align 2,,3
 16461              		.global	get_mem
 16462              		.syntax unified
 16463              		.thumb
 16464              		.thumb_func
 16465              		.fpu fpv4-sp-d16
 16467              	get_mem:
 16468              	.LVL1187:
 16469              	.LFB138:
2034:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16470              		.loc 1 2034 29 is_stmt 1 view -0
 16471              		.cfi_startproc
 16472              		@ args = 0, pretend = 0, frame = 0
 16473              		@ frame_needed = 0, uses_anonymous_args = 0
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16474              		.loc 1 2035 2 view .LVU4288
2034:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16475              		.loc 1 2034 29 is_stmt 0 view .LVU4289
 16476 0000 00B5     		push	{lr}
 16477              		.cfi_def_cfa_offset 4
 16478              		.cfi_offset 14, -4
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16479              		.loc 1 2035 2 view .LVU4290
 16480 0002 A928     		cmp	r0, #169
2034:src/xeq.c     **** 	setX_int_sgn( op == OP_MEMQ ? free_mem() :
 16481              		.loc 1 2034 29 view .LVU4291
 16482 0004 83B0     		sub	sp, sp, #12
 16483              		.cfi_def_cfa_offset 16
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16484              		.loc 1 2035 2 view .LVU4292
 16485 0006 25D0     		beq	.L1179
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16486              		.loc 1 2035 2 discriminator 2 view .LVU4293
 16487 0008 AA28     		cmp	r0, #170
 16488 000a 18D0     		beq	.L1180
2035:src/xeq.c     **** 		 op == OP_LOCRQ ? local_regs() :
 16489              		.loc 1 2035 2 discriminator 5 view .LVU4294
 16490 000c AC28     		cmp	r0, #172
 16491 000e 3ED0     		beq	.L1181
 16492              	.LBB2831:
 16493              	.LBI2831:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 16494              		.loc 1 253 14 is_stmt 1 view .LVU4295
 16495              	.LBE2831:
 254:src/xeq.c     **** }
 16496              		.loc 1 254 2 view .LVU4296
 16497              	.LVL1188:
 16498              	.LBB2840:
ARM GAS  /tmp/cc7LeJ71.s 			page 461


 16499              	.LBB2832:
 16500              	.LBI2832:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 16501              		.loc 1 241 14 view .LVU4297
 16502              	.LBB2833:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16503              		.loc 1 242 2 view .LVU4298
 16504              	.LBB2834:
 16505              	.LBI2834:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16506              		.loc 1 1118 5 view .LVU4299
 16507              	.LBB2835:
1119:src/xeq.c     **** }
 16508              		.loc 1 1119 2 view .LVU4300
1119:src/xeq.c     **** }
 16509              		.loc 1 1119 12 is_stmt 0 view .LVU4301
 16510 0010 234B     		ldr	r3, .L1183
 16511 0012 1A68     		ldr	r2, [r3]
1119:src/xeq.c     **** }
 16512              		.loc 1 1119 24 view .LVU4302
 16513 0014 B2F8E817 		ldrh	r1, [r2, #2024]
 16514              	.LBE2835:
 16515              	.LBE2834:
 16516              	.LBB2837:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16517              		.loc 1 243 24 view .LVU4303
 16518 0018 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 16519              	.LBE2837:
 16520              	.LBB2838:
 16521              	.LBB2836:
1119:src/xeq.c     **** }
 16522              		.loc 1 1119 24 view .LVU4304
 16523 001c 44F20103 		movw	r3, #16385
 16524              	.LBE2836:
 16525              	.LBE2838:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 16526              		.loc 1 242 5 view .LVU4305
 16527 0020 0B40     		ands	r3, r3, r1
 16528 0022 B3F5804F 		cmp	r3, #16384
 16529              	.LBB2839:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16530              		.loc 1 243 3 is_stmt 1 view .LVU4306
 16531              	.LVL1189:
 244:src/xeq.c     **** 	}
 16532              		.loc 1 244 3 view .LVU4307
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 16533              		.loc 1 243 13 is_stmt 0 view .LVU4308
 16534 0026 04BF     		itt	eq
 16535 0028 0C3A     		subeq	r2, r2, #12
 16536              	.LVL1190:
 244:src/xeq.c     **** 	}
 16537              		.loc 1 244 67 view .LVU4309
 16538 002a 5210     		asreq	r2, r2, #1
 16539              	.LBE2839:
 247:src/xeq.c     **** }
 16540              		.loc 1 247 3 is_stmt 1 view .LVU4310
 16541 002c 0023     		movs	r3, #0
ARM GAS  /tmp/cc7LeJ71.s 			page 462


 16542              	.LVL1191:
 16543              	.L1172:
 247:src/xeq.c     **** }
 16544              		.loc 1 247 3 is_stmt 0 view .LVU4311
 16545              	.LBE2833:
 16546              	.LBE2832:
 16547              	.LBE2840:
 16548              	.LBB2841:
 16549              	.LBI2841:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16550              		.loc 1 1509 6 is_stmt 1 discriminator 10 view .LVU4312
 16551              	.LBB2842:
1510:src/xeq.c     **** }
 16552              		.loc 1 1510 2 discriminator 10 view .LVU4313
 16553 002e 0021     		movs	r1, #0
 16554 0030 0091     		str	r1, [sp]
 16555 0032 6420     		movs	r0, #100
 16556 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 16557              	.LVL1192:
1510:src/xeq.c     **** }
 16558              		.loc 1 1510 2 is_stmt 0 discriminator 10 view .LVU4314
 16559              	.LBE2842:
 16560              	.LBE2841:
2040:src/xeq.c     **** 
 16561              		.loc 1 2040 1 discriminator 10 view .LVU4315
 16562 0038 03B0     		add	sp, sp, #12
 16563              		.cfi_remember_state
 16564              		.cfi_def_cfa_offset 4
 16565              		@ sp needed
 16566 003a 5DF804FB 		ldr	pc, [sp], #4
 16567              	.LVL1193:
 16568              	.L1180:
 16569              		.cfi_restore_state
 16570              	.LBB2843:
 16571              	.LBI2843:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 16572              		.loc 1 233 5 is_stmt 1 view .LVU4316
 16573              	.LBE2843:
 234:src/xeq.c     **** }
 16574              		.loc 1 234 2 view .LVU4317
 16575              	.LBB2864:
 16576              	.LBB2844:
 16577              	.LBI2844:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 16578              		.loc 1 225 5 view .LVU4318
 16579              	.LBB2845:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16580              		.loc 1 226 2 view .LVU4319
 16581              	.LBB2846:
 16582              	.LBI2846:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 16583              		.loc 1 1118 5 view .LVU4320
 16584              	.LBB2847:
1119:src/xeq.c     **** }
 16585              		.loc 1 1119 2 view .LVU4321
1119:src/xeq.c     **** }
 16586              		.loc 1 1119 12 is_stmt 0 view .LVU4322
ARM GAS  /tmp/cc7LeJ71.s 			page 463


 16587 003e 184B     		ldr	r3, .L1183
 16588 0040 1A68     		ldr	r2, [r3]
 16589              	.LVL1194:
1119:src/xeq.c     **** }
 16590              		.loc 1 1119 12 view .LVU4323
 16591              	.LBE2847:
 16592              	.LBE2846:
 227:src/xeq.c     **** }
 16593              		.loc 1 227 2 is_stmt 1 view .LVU4324
 16594              	.LBB2850:
 16595              	.LBI2850:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 16596              		.loc 1 217 5 view .LVU4325
 16597              	.LBB2851:
 218:src/xeq.c     **** }
 16598              		.loc 1 218 2 view .LVU4326
 218:src/xeq.c     **** }
 16599              		.loc 1 218 9 is_stmt 0 view .LVU4327
 16600 0042 B2F8DE37 		ldrh	r3, [r2, #2014]
 16601 0046 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 16602              		.loc 1 218 57 view .LVU4328
 16603 004a 002B     		cmp	r3, #0
 16604 004c 0BDB     		blt	.L1182
 16605 004e 0022     		movs	r2, #0
 16606              	.LVL1195:
 218:src/xeq.c     **** }
 16607              		.loc 1 218 57 view .LVU4329
 16608 0050 0023     		movs	r3, #0
 16609              	.LVL1196:
 218:src/xeq.c     **** }
 16610              		.loc 1 218 57 view .LVU4330
 16611 0052 ECE7     		b	.L1172
 16612              	.LVL1197:
 16613              	.L1179:
 218:src/xeq.c     **** }
 16614              		.loc 1 218 57 view .LVU4331
 16615              	.LBE2851:
 16616              	.LBE2850:
 16617              	.LBE2845:
 16618              	.LBE2844:
 16619              	.LBE2864:
 16620              	.LBB2865:
 16621              	.LBI2865:
2026:src/xeq.c     **** 	return RetStkSize + RetStkPtr;
 16622              		.loc 1 2026 5 is_stmt 1 view .LVU4332
 16623              	.LBB2866:
2027:src/xeq.c     **** }
 16624              		.loc 1 2027 2 view .LVU4333
2027:src/xeq.c     **** }
 16625              		.loc 1 2027 22 is_stmt 0 view .LVU4334
 16626 0054 124A     		ldr	r2, .L1183
2027:src/xeq.c     **** }
 16627              		.loc 1 2027 20 view .LVU4335
 16628 0056 134B     		ldr	r3, .L1183+4
2027:src/xeq.c     **** }
 16629              		.loc 1 2027 22 view .LVU4336
ARM GAS  /tmp/cc7LeJ71.s 			page 464


 16630 0058 1268     		ldr	r2, [r2]
2027:src/xeq.c     **** }
 16631              		.loc 1 2027 20 view .LVU4337
 16632 005a 1B68     		ldr	r3, [r3]
2027:src/xeq.c     **** }
 16633              		.loc 1 2027 22 view .LVU4338
 16634 005c B2F9E227 		ldrsh	r2, [r2, #2018]
2027:src/xeq.c     **** }
 16635              		.loc 1 2027 20 view .LVU4339
 16636 0060 1A44     		add	r2, r2, r3
 16637 0062 0023     		movs	r3, #0
 16638              	.LBE2866:
 16639              	.LBE2865:
 16640 0064 E3E7     		b	.L1172
 16641              	.LVL1198:
 16642              	.L1182:
 16643              	.LBB2867:
 16644              	.LBB2863:
 16645              	.LBB2862:
 16646              	.LBB2856:
 16647              	.LBB2852:
 218:src/xeq.c     **** }
 16648              		.loc 1 218 25 view .LVU4340
 16649 0066 1049     		ldr	r1, .L1183+8
 16650              	.LBE2852:
 16651              	.LBE2856:
 16652              	.LBB2857:
 16653              	.LBB2848:
1119:src/xeq.c     **** }
 16654              		.loc 1 1119 24 view .LVU4341
 16655 0068 B2F8E807 		ldrh	r0, [r2, #2024]
 16656              	.LVL1199:
1119:src/xeq.c     **** }
 16657              		.loc 1 1119 24 view .LVU4342
 16658              	.LBE2848:
 16659              	.LBE2857:
 16660              	.LBB2858:
 16661              	.LBB2853:
 218:src/xeq.c     **** }
 16662              		.loc 1 218 25 view .LVU4343
 16663 006c 0A68     		ldr	r2, [r1]
 16664              	.LVL1200:
 218:src/xeq.c     **** }
 16665              		.loc 1 218 25 view .LVU4344
 16666              	.LBE2853:
 16667              	.LBE2858:
 16668              	.LBB2859:
 16669              	.LBB2849:
1119:src/xeq.c     **** }
 16670              		.loc 1 1119 24 view .LVU4345
 16671 006e 44F20101 		movw	r1, #16385
 16672              	.LBE2849:
 16673              	.LBE2859:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16674              		.loc 1 226 73 view .LVU4346
 16675 0072 0140     		ands	r1, r1, r0
 16676              	.LBB2860:
ARM GAS  /tmp/cc7LeJ71.s 			page 465


 16677              	.LBB2854:
 218:src/xeq.c     **** }
 16678              		.loc 1 218 57 view .LVU4347
 16679 0074 32F81320 		ldrh	r2, [r2, r3, lsl #1]
 16680              	.LBE2854:
 16681              	.LBE2860:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 16682              		.loc 1 226 73 view .LVU4348
 16683 0078 A1F58043 		sub	r3, r1, #16384
 16684 007c B3FA83F3 		clz	r3, r3
 16685 0080 5B09     		lsrs	r3, r3, #5
 16686 0082 0233     		adds	r3, r3, #2
 16687              	.LBB2861:
 16688              	.LBB2855:
 218:src/xeq.c     **** }
 16689              		.loc 1 218 57 view .LVU4349
 16690 0084 C2F30B02 		ubfx	r2, r2, #0, #12
 16691 0088 1A41     		asrs	r2, r2, r3
 16692 008a D317     		asrs	r3, r2, #31
 16693 008c CFE7     		b	.L1172
 16694              	.LVL1201:
 16695              	.L1181:
 218:src/xeq.c     **** }
 16696              		.loc 1 218 57 view .LVU4350
 16697              	.LBE2855:
 16698              	.LBE2861:
 16699              	.LBE2862:
 16700              	.LBE2863:
 16701              	.LBE2867:
 16702              	.LBB2868:
 16703              	.LBI2868:
2030:src/xeq.c     **** 	return NUMPROG_FLASH_MAX - UserFlash.size;
 16704              		.loc 1 2030 5 is_stmt 1 view .LVU4351
 16705              	.LBB2869:
2031:src/xeq.c     **** }
 16706              		.loc 1 2031 2 view .LVU4352
2031:src/xeq.c     **** }
 16707              		.loc 1 2031 38 is_stmt 0 view .LVU4353
 16708 008e 074B     		ldr	r3, .L1183+12
 16709 0090 1B68     		ldr	r3, [r3]
 16710 0092 5A88     		ldrh	r2, [r3, #2]
2031:src/xeq.c     **** }
 16711              		.loc 1 2031 27 view .LVU4354
 16712 0094 C2F5FF52 		rsb	r2, r2, #8160
 16713 0098 1E32     		adds	r2, r2, #30
 16714 009a 0023     		movs	r3, #0
 16715              	.LBE2869:
 16716              	.LBE2868:
 16717 009c C7E7     		b	.L1172
 16718              	.L1184:
 16719 009e 00BF     		.align	2
 16720              	.L1183:
 16721 00a0 00000000 		.word	main_ram
 16722 00a4 00000000 		.word	RetStkSize
 16723 00a8 00000000 		.word	RetStk
 16724 00ac 00000000 		.word	library_ram
 16725              		.cfi_endproc
ARM GAS  /tmp/cc7LeJ71.s 			page 466


 16726              	.LFE138:
 16728              		.section	.text.cmdputkey,"ax",%progbits
 16729              		.align	1
 16730              		.p2align 2,,3
 16731              		.global	cmdputkey
 16732              		.syntax unified
 16733              		.thumb
 16734              		.thumb_func
 16735              		.fpu fpv4-sp-d16
 16737              	cmdputkey:
 16738              	.LVL1202:
 16739              	.LFB141:
2075:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16740              		.loc 1 2075 1 is_stmt 1 view -0
 16741              		.cfi_startproc
 16742              		@ args = 0, pretend = 0, frame = 0
 16743              		@ frame_needed = 0, uses_anonymous_args = 0
2076:src/xeq.c     **** 
 16744              		.loc 1 2076 2 view .LVU4356
2075:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16745              		.loc 1 2075 1 is_stmt 0 view .LVU4357
 16746 0000 10B5     		push	{r4, lr}
 16747              		.cfi_def_cfa_offset 8
 16748              		.cfi_offset 4, -8
 16749              		.cfi_offset 14, -4
2076:src/xeq.c     **** 
 16750              		.loc 1 2076 16 view .LVU4358
 16751 0002 FFF7FEFF 		bl	get_keycode_from_reg
 16752              	.LVL1203:
2078:src/xeq.c     **** 		set_running_off();
 16753              		.loc 1 2078 2 is_stmt 1 view .LVU4359
2078:src/xeq.c     **** 		set_running_off();
 16754              		.loc 1 2078 5 is_stmt 0 view .LVU4360
 16755 0006 041E     		subs	r4, r0, #0
 16756 0008 00DA     		bge	.L1188
2082:src/xeq.c     **** 
 16757              		.loc 1 2082 1 view .LVU4361
 16758 000a 10BD     		pop	{r4, pc}
 16759              	.L1188:
2079:src/xeq.c     **** 		put_key(c);
 16760              		.loc 1 2079 3 is_stmt 1 view .LVU4362
 16761              	.LBB2870:
 16762              	.LBI2870:
5823:src/xeq.c     **** 	set_running_off_sst();
 16763              		.loc 1 5823 6 view .LVU4363
 16764              	.LBB2871:
5824:src/xeq.c     **** 	State.entryp = 0;
 16765              		.loc 1 5824 2 view .LVU4364
 16766              	.LBB2872:
 16767              	.LBI2872:
5815:src/xeq.c     **** 	Running = 0;
 16768              		.loc 1 5815 6 view .LVU4365
 16769              	.LBB2873:
5816:src/xeq.c     **** }
 16770              		.loc 1 5816 2 view .LVU4366
 16771              	.LBE2873:
 16772              	.LBE2872:
ARM GAS  /tmp/cc7LeJ71.s 			page 467


5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 16773              		.loc 1 5825 15 is_stmt 0 view .LVU4367
 16774 000c 094B     		ldr	r3, .L1189
 16775              	.LBB2876:
 16776              	.LBB2874:
5816:src/xeq.c     **** }
 16777              		.loc 1 5816 10 view .LVU4368
 16778 000e 0A4A     		ldr	r2, .L1189+4
 16779              	.LBE2874:
 16780              	.LBE2876:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 16781              		.loc 1 5825 15 view .LVU4369
 16782 0010 1B68     		ldr	r3, [r3]
 16783              	.LBB2877:
 16784              	.LBB2875:
5816:src/xeq.c     **** }
 16785              		.loc 1 5816 10 view .LVU4370
 16786 0012 0021     		movs	r1, #0
 16787 0014 1160     		str	r1, [r2]
 16788              	.LBE2875:
 16789              	.LBE2877:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 16790              		.loc 1 5825 2 is_stmt 1 view .LVU4371
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 16791              		.loc 1 5825 15 is_stmt 0 view .LVU4372
 16792 0016 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 16793 001a 61F30412 		bfi	r2, r1, #4, #1
 16794              		.loc 1 5826 2 view .LVU4373
 16795 001e 8A20     		movs	r0, #138
 16796              	.LVL1204:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 16797              		.loc 1 5825 15 view .LVU4374
 16798 0020 83F8DD27 		strb	r2, [r3, #2013]
 16799              		.loc 1 5826 2 is_stmt 1 view .LVU4375
 16800 0024 FFF7FEFF 		bl	dot
 16801              	.LVL1205:
 16802              	.LBE2871:
 16803              	.LBE2870:
2080:src/xeq.c     **** 	}
 16804              		.loc 1 2080 3 view .LVU4376
 16805 0028 2046     		mov	r0, r4
2082:src/xeq.c     **** 
 16806              		.loc 1 2082 1 is_stmt 0 view .LVU4377
 16807 002a BDE81040 		pop	{r4, lr}
 16808              		.cfi_restore 14
 16809              		.cfi_restore 4
 16810              		.cfi_def_cfa_offset 0
 16811              	.LVL1206:
2080:src/xeq.c     **** 	}
 16812              		.loc 1 2080 3 view .LVU4378
 16813 002e FFF7FEBF 		b	put_key
 16814              	.LVL1207:
 16815              	.L1190:
2080:src/xeq.c     **** 	}
 16816              		.loc 1 2080 3 view .LVU4379
 16817 0032 00BF     		.align	2
 16818              	.L1189:
ARM GAS  /tmp/cc7LeJ71.s 			page 468


 16819 0034 00000000 		.word	main_ram
 16820 0038 00000000 		.word	Running
 16821              		.cfi_endproc
 16822              	.LFE141:
 16824              		.section	.text.cmdkeytype,"ax",%progbits
 16825              		.align	1
 16826              		.p2align 2,,3
 16827              		.global	cmdkeytype
 16828              		.syntax unified
 16829              		.thumb
 16830              		.thumb_func
 16831              		.fpu fpv4-sp-d16
 16833              	cmdkeytype:
 16834              	.LVL1208:
 16835              	.LFB142:
2090:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16836              		.loc 1 2090 1 is_stmt 1 view -0
 16837              		.cfi_startproc
 16838              		@ args = 0, pretend = 0, frame = 48
 16839              		@ frame_needed = 0, uses_anonymous_args = 0
2091:src/xeq.c     **** 	if ( c >= 0 ) {
 16840              		.loc 1 2091 2 view .LVU4381
2090:src/xeq.c     **** 	const int c = get_keycode_from_reg(arg);
 16841              		.loc 1 2090 1 is_stmt 0 view .LVU4382
 16842 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 16843              		.cfi_def_cfa_offset 20
 16844              		.cfi_offset 4, -20
 16845              		.cfi_offset 5, -16
 16846              		.cfi_offset 6, -12
 16847              		.cfi_offset 7, -8
 16848              		.cfi_offset 14, -4
 16849 0002 8FB0     		sub	sp, sp, #60
 16850              		.cfi_def_cfa_offset 80
2091:src/xeq.c     **** 	if ( c >= 0 ) {
 16851              		.loc 1 2091 16 view .LVU4383
 16852 0004 FFF7FEFF 		bl	get_keycode_from_reg
 16853              	.LVL1209:
2092:src/xeq.c     **** 		const char types[] = {
 16854              		.loc 1 2092 2 is_stmt 1 view .LVU4384
2092:src/xeq.c     **** 		const char types[] = {
 16855              		.loc 1 2092 5 is_stmt 0 view .LVU4385
 16856 0008 061E     		subs	r6, r0, #0
 16857 000a 17DB     		blt	.L1191
 16858              	.LBB2878:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16859              		.loc 1 2093 3 is_stmt 1 view .LVU4386
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16860              		.loc 1 2093 14 is_stmt 0 view .LVU4387
 16861 000c 0E4D     		ldr	r5, .L1199
 16862              	.LBB2879:
 16863              	.LBB2880:
 16864              	.LBB2881:
 16865              	.LBB2882:
 744:src/xeq.c     **** }
 16866              		.loc 1 744 15 view .LVU4388
 16867 000e 0F4F     		ldr	r7, .L1199+4
 16868              	.LBE2882:
ARM GAS  /tmp/cc7LeJ71.s 			page 469


 16869              	.LBE2881:
 16870              	.LBE2880:
 16871              	.LBE2879:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16872              		.loc 1 2093 14 view .LVU4389
 16873 0010 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16874              	.LVL1210:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16875              		.loc 1 2093 14 view .LVU4390
 16876 0012 03AC     		add	r4, sp, #12
 16877 0014 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16878 0016 0FCD     		ldmia	r5!, {r0, r1, r2, r3}
 16879 0018 0FC4     		stmia	r4!, {r0, r1, r2, r3}
 16880 001a 95E80700 		ldm	r5, {r0, r1, r2}
 16881              	.LBB2891:
 16882              	.LBB2887:
 16883              	.LBB2885:
 16884              	.LBB2883:
 744:src/xeq.c     **** }
 16885              		.loc 1 744 15 view .LVU4391
 16886 001e FB7D     		ldrb	r3, [r7, #23]	@ zero_extendqisi2
 16887              	.LBE2883:
 16888              	.LBE2885:
 16889              	.LBE2887:
 16890              	.LBE2891:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16891              		.loc 1 2093 14 view .LVU4392
 16892 0020 03C4     		stmia	r4!, {r0, r1}
 16893              	.LBB2892:
 16894              	.LBB2888:
 748:src/xeq.c     **** 		lift();
 16895              		.loc 1 748 5 view .LVU4393
 16896 0022 5B06     		lsls	r3, r3, #25
 16897              	.LBE2888:
 16898              	.LBE2892:
2093:src/xeq.c     **** 			12, 12, 12, 12, 12, 12,
 16899              		.loc 1 2093 14 view .LVU4394
 16900 0024 2270     		strb	r2, [r4]
2101:src/xeq.c     **** 		setX_int_sgn(types[c], 0);
 16901              		.loc 1 2101 3 is_stmt 1 view .LVU4395
 16902              	.LBB2893:
 16903              	.LBI2879:
 747:src/xeq.c     **** 	if (get_lift())
 16904              		.loc 1 747 6 view .LVU4396
 16905              	.LBB2889:
 748:src/xeq.c     **** 		lift();
 16906              		.loc 1 748 2 view .LVU4397
 16907              	.LBB2886:
 16908              	.LBI2881:
 743:src/xeq.c     **** 	return State2.state_lift;
 16909              		.loc 1 743 12 view .LVU4398
 16910              	.LBB2884:
 744:src/xeq.c     **** }
 16911              		.loc 1 744 2 view .LVU4399
 16912              	.LBE2884:
 16913              	.LBE2886:
 748:src/xeq.c     **** 		lift();
ARM GAS  /tmp/cc7LeJ71.s 			page 470


 16914              		.loc 1 748 5 is_stmt 0 view .LVU4400
 16915 0026 0BD4     		bmi	.L1198
 16916              	.L1193:
 16917              	.LBE2889:
 16918              	.LBE2893:
2102:src/xeq.c     **** 	}
 16919              		.loc 1 2102 3 is_stmt 1 view .LVU4401
 16920              	.LVL1211:
 16921              	.LBB2894:
 16922              	.LBI2894:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 16923              		.loc 1 1509 6 view .LVU4402
 16924              	.LBB2895:
1510:src/xeq.c     **** }
 16925              		.loc 1 1510 2 view .LVU4403
 16926              	.LBE2895:
 16927              	.LBE2894:
2102:src/xeq.c     **** 	}
 16928              		.loc 1 2102 21 is_stmt 0 view .LVU4404
 16929 0028 0EAB     		add	r3, sp, #56
 16930 002a 9819     		adds	r0, r3, r6
 16931              	.LBB2897:
 16932              	.LBB2896:
1510:src/xeq.c     **** }
 16933              		.loc 1 1510 2 view .LVU4405
 16934 002c 0021     		movs	r1, #0
 16935 002e 10F82C2C 		ldrb	r2, [r0, #-44]	@ zero_extendqisi2
 16936 0032 0091     		str	r1, [sp]
 16937              	.LVL1212:
1510:src/xeq.c     **** }
 16938              		.loc 1 1510 2 view .LVU4406
 16939 0034 0023     		movs	r3, #0
 16940 0036 6420     		movs	r0, #100
 16941 0038 FFF7FEFF 		bl	set_reg_n_int_sgn
 16942              	.LVL1213:
 16943              	.L1191:
1510:src/xeq.c     **** }
 16944              		.loc 1 1510 2 view .LVU4407
 16945              	.LBE2896:
 16946              	.LBE2897:
 16947              	.LBE2878:
2104:src/xeq.c     **** 
 16948              		.loc 1 2104 1 view .LVU4408
 16949 003c 0FB0     		add	sp, sp, #60
 16950              		.cfi_remember_state
 16951              		.cfi_def_cfa_offset 20
 16952              		@ sp needed
 16953 003e F0BD     		pop	{r4, r5, r6, r7, pc}
 16954              	.LVL1214:
 16955              	.L1198:
 16956              		.cfi_restore_state
 16957              	.LBB2899:
 16958              	.LBB2898:
 16959              	.LBB2890:
 749:src/xeq.c     **** }
 16960              		.loc 1 749 3 is_stmt 1 view .LVU4409
 16961 0040 FFF7FEFF 		bl	lift
ARM GAS  /tmp/cc7LeJ71.s 			page 471


 16962              	.LVL1215:
 16963 0044 F0E7     		b	.L1193
 16964              	.L1200:
 16965 0046 00BF     		.align	2
 16966              	.L1199:
 16967 0048 00000000 		.word	.LANCHOR5
 16968 004c 00000000 		.word	StateWhileOn
 16969              	.LBE2890:
 16970              	.LBE2898:
 16971              	.LBE2899:
 16972              		.cfi_endproc
 16973              	.LFE142:
 16975              		.section	.text.cmdstostk,"ax",%progbits
 16976              		.align	1
 16977              		.p2align 2,,3
 16978              		.global	cmdstostk
 16979              		.syntax unified
 16980              		.thumb
 16981              		.thumb_func
 16982              		.fpu fpv4-sp-d16
 16984              	cmdstostk:
 16985              	.LVL1216:
 16986              	.LFB148:
2147:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16987              		.loc 1 2147 48 view -0
 16988              		.cfi_startproc
 16989              		@ args = 0, pretend = 0, frame = 0
 16990              		@ frame_needed = 0, uses_anonymous_args = 0
2148:src/xeq.c     **** 
 16991              		.loc 1 2148 2 view .LVU4411
2147:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16992              		.loc 1 2147 48 is_stmt 0 view .LVU4412
 16993 0000 70B5     		push	{r4, r5, r6, lr}
 16994              		.cfi_def_cfa_offset 16
 16995              		.cfi_offset 4, -16
 16996              		.cfi_offset 5, -12
 16997              		.cfi_offset 6, -8
 16998              		.cfi_offset 14, -4
2147:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 16999              		.loc 1 2147 48 view .LVU4413
 17000 0002 0546     		mov	r5, r0
2148:src/xeq.c     **** 
 17001              		.loc 1 2148 13 view .LVU4414
 17002 0004 FFF7FEFF 		bl	check_stack_overlap
 17003              	.LVL1217:
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17004              		.loc 1 2150 2 is_stmt 1 view .LVU4415
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17005              		.loc 1 2150 12 view .LVU4416
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17006              		.loc 1 2150 2 is_stmt 0 view .LVU4417
 17007 0008 031E     		subs	r3, r0, #0
 17008 000a 0ADD     		ble	.L1201
 17009 000c 2C46     		mov	r4, r5
 17010 000e C4F16406 		rsb	r6, r4, #100
 17011 0012 1D44     		add	r5, r5, r3
 17012              	.LVL1218:
ARM GAS  /tmp/cc7LeJ71.s 			page 472


 17013              	.L1203:
2151:src/xeq.c     **** }
 17014              		.loc 1 2151 3 is_stmt 1 discriminator 3 view .LVU4418
 17015 0014 3119     		adds	r1, r6, r4
 17016 0016 2046     		mov	r0, r4
 17017 0018 0134     		adds	r4, r4, #1
 17018              	.LVL1219:
2151:src/xeq.c     **** }
 17019              		.loc 1 2151 3 is_stmt 0 discriminator 3 view .LVU4419
 17020 001a FFF7FEFF 		bl	copyreg_n
 17021              	.LVL1220:
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17022              		.loc 1 2150 17 is_stmt 1 discriminator 3 view .LVU4420
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17023              		.loc 1 2150 12 discriminator 3 view .LVU4421
2150:src/xeq.c     **** 		copyreg_n(arg + i, regX_idx + i);
 17024              		.loc 1 2150 2 is_stmt 0 discriminator 3 view .LVU4422
 17025 001e AC42     		cmp	r4, r5
 17026 0020 F8D1     		bne	.L1203
 17027              	.L1201:
2152:src/xeq.c     **** 
 17028              		.loc 1 2152 1 view .LVU4423
 17029 0022 70BD     		pop	{r4, r5, r6, pc}
 17030              		.cfi_endproc
 17031              	.LFE148:
 17033              		.section	.text.cmdrclstk,"ax",%progbits
 17034              		.align	1
 17035              		.p2align 2,,3
 17036              		.global	cmdrclstk
 17037              		.syntax unified
 17038              		.thumb
 17039              		.thumb_func
 17040              		.fpu fpv4-sp-d16
 17042              	cmdrclstk:
 17043              	.LVL1221:
 17044              	.LFB149:
2154:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17045              		.loc 1 2154 48 is_stmt 1 view -0
 17046              		.cfi_startproc
 17047              		@ args = 0, pretend = 0, frame = 0
 17048              		@ frame_needed = 0, uses_anonymous_args = 0
2155:src/xeq.c     **** 
 17049              		.loc 1 2155 2 view .LVU4425
2154:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17050              		.loc 1 2154 48 is_stmt 0 view .LVU4426
 17051 0000 70B5     		push	{r4, r5, r6, lr}
 17052              		.cfi_def_cfa_offset 16
 17053              		.cfi_offset 4, -16
 17054              		.cfi_offset 5, -12
 17055              		.cfi_offset 6, -8
 17056              		.cfi_offset 14, -4
2154:src/xeq.c     **** 	int i, n = check_stack_overlap(arg);
 17057              		.loc 1 2154 48 view .LVU4427
 17058 0002 0646     		mov	r6, r0
2155:src/xeq.c     **** 
 17059              		.loc 1 2155 13 view .LVU4428
 17060 0004 FFF7FEFF 		bl	check_stack_overlap
ARM GAS  /tmp/cc7LeJ71.s 			page 473


 17061              	.LVL1222:
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17062              		.loc 1 2157 2 is_stmt 1 view .LVU4429
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17063              		.loc 1 2157 12 view .LVU4430
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17064              		.loc 1 2157 2 is_stmt 0 view .LVU4431
 17065 0008 051E     		subs	r5, r0, #0
 17066 000a 09DD     		ble	.L1206
 17067 000c 6435     		adds	r5, r5, #100
 17068 000e 643E     		subs	r6, r6, #100
 17069              	.LVL1223:
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17070              		.loc 1 2157 2 view .LVU4432
 17071 0010 6424     		movs	r4, #100
 17072              	.LVL1224:
 17073              	.L1208:
2158:src/xeq.c     **** }
 17074              		.loc 1 2158 3 is_stmt 1 discriminator 3 view .LVU4433
 17075 0012 3119     		adds	r1, r6, r4
 17076 0014 2046     		mov	r0, r4
 17077 0016 0134     		adds	r4, r4, #1
 17078              	.LVL1225:
2158:src/xeq.c     **** }
 17079              		.loc 1 2158 3 is_stmt 0 discriminator 3 view .LVU4434
 17080 0018 FFF7FEFF 		bl	copyreg_n
 17081              	.LVL1226:
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17082              		.loc 1 2157 17 is_stmt 1 discriminator 3 view .LVU4435
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17083              		.loc 1 2157 12 discriminator 3 view .LVU4436
2157:src/xeq.c     **** 		copyreg_n(regX_idx + i, arg + i);
 17084              		.loc 1 2157 2 is_stmt 0 discriminator 3 view .LVU4437
 17085 001c AC42     		cmp	r4, r5
 17086 001e F8D1     		bne	.L1208
 17087              	.LVL1227:
 17088              	.L1206:
2159:src/xeq.c     **** 
 17089              		.loc 1 2159 1 view .LVU4438
 17090 0020 70BD     		pop	{r4, r5, r6, pc}
 17091              		.cfi_endproc
 17092              	.LFE149:
 17094 0022 00BF     		.section	.text.find_opcode_from,"ax",%progbits
 17095              		.align	1
 17096              		.p2align 2,,3
 17097              		.global	find_opcode_from
 17098              		.syntax unified
 17099              		.thumb
 17100              		.thumb_func
 17101              		.fpu fpv4-sp-d16
 17103              	find_opcode_from:
 17104              	.LVL1228:
 17105              	.LFB151:
2192:src/xeq.c     **** 	unsigned short int top;
 17106              		.loc 1 2192 81 is_stmt 1 view -0
 17107              		.cfi_startproc
 17108              		@ args = 0, pretend = 0, frame = 8
ARM GAS  /tmp/cc7LeJ71.s 			page 474


 17109              		@ frame_needed = 0, uses_anonymous_args = 0
2192:src/xeq.c     **** 	unsigned short int top;
 17110              		.loc 1 2192 81 is_stmt 0 view .LVU4440
 17111 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 17112              		.cfi_def_cfa_offset 24
 17113              		.cfi_offset 4, -24
 17114              		.cfi_offset 5, -20
 17115              		.cfi_offset 6, -16
 17116              		.cfi_offset 7, -12
 17117              		.cfi_offset 8, -8
 17118              		.cfi_offset 14, -4
2195:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17119              		.loc 1 2195 12 view .LVU4441
 17120 0004 02F00207 		and	r7, r2, #2
2192:src/xeq.c     **** 	unsigned short int top;
 17121              		.loc 1 2192 81 view .LVU4442
 17122 0008 82B0     		sub	sp, sp, #8
 17123              		.cfi_def_cfa_offset 32
2192:src/xeq.c     **** 	unsigned short int top;
 17124              		.loc 1 2192 81 view .LVU4443
 17125 000a 9046     		mov	r8, r2
 17126 000c 0E46     		mov	r6, r1
2198:src/xeq.c     **** 	count -= top;
 17127              		.loc 1 2198 14 view .LVU4444
 17128 000e 0DF10602 		add	r2, sp, #6
 17129              	.LVL1229:
2198:src/xeq.c     **** 	count -= top;
 17130              		.loc 1 2198 14 view .LVU4445
 17131 0012 3946     		mov	r1, r7
 17132              	.LVL1230:
2192:src/xeq.c     **** 	unsigned short int top;
 17133              		.loc 1 2192 81 view .LVU4446
 17134 0014 0446     		mov	r4, r0
2193:src/xeq.c     **** 	int count;
 17135              		.loc 1 2193 2 is_stmt 1 view .LVU4447
2194:src/xeq.c     **** 	const int endp = flags & FIND_OP_ENDS;
 17136              		.loc 1 2194 2 view .LVU4448
2195:src/xeq.c     **** 	const int errp = flags & FIND_OP_ERROR;
 17137              		.loc 1 2195 2 view .LVU4449
 17138              	.LVL1231:
2196:src/xeq.c     **** 
 17139              		.loc 1 2196 2 view .LVU4450
2198:src/xeq.c     **** 	count -= top;
 17140              		.loc 1 2198 2 view .LVU4451
2198:src/xeq.c     **** 	count -= top;
 17141              		.loc 1 2198 14 is_stmt 0 view .LVU4452
 17142 0016 FFF7FEFF 		bl	find_section_bounds
 17143              	.LVL1232:
2199:src/xeq.c     **** 	while (count--) {
 17144              		.loc 1 2199 8 view .LVU4453
 17145 001a BDF80650 		ldrh	r5, [sp, #6]
2198:src/xeq.c     **** 	count -= top;
 17146              		.loc 1 2198 8 view .LVU4454
 17147 001e 0130     		adds	r0, r0, #1
 17148              	.LVL1233:
2199:src/xeq.c     **** 	while (count--) {
 17149              		.loc 1 2199 2 is_stmt 1 view .LVU4455
ARM GAS  /tmp/cc7LeJ71.s 			page 475


2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17150              		.loc 1 2200 2 view .LVU4456
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17151              		.loc 1 2200 8 view .LVU4457
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17152              		.loc 1 2200 8 is_stmt 0 view .LVU4458
 17153 0020 451B     		subs	r5, r0, r5
 17154              	.LVL1234:
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17155              		.loc 1 2200 8 view .LVU4459
 17156 0022 05D1     		bne	.L1214
 17157 0024 10E0     		b	.L1212
 17158              	.LVL1235:
 17159              	.L1222:
2206:src/xeq.c     **** 	}
 17160              		.loc 1 2206 8 view .LVU4460
 17161 0026 FFF7FEFF 		bl	do_inc
 17162              	.LVL1236:
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17163              		.loc 1 2200 8 view .LVU4461
 17164 002a 013D     		subs	r5, r5, #1
 17165              	.LVL1237:
2206:src/xeq.c     **** 	}
 17166              		.loc 1 2206 8 view .LVU4462
 17167 002c 0446     		mov	r4, r0
 17168              	.LVL1238:
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17169              		.loc 1 2200 8 is_stmt 1 view .LVU4463
2200:src/xeq.c     **** 		// Wrap around doesn't hurt, we just limit the search to the number of possible steps
 17170              		.loc 1 2200 8 is_stmt 0 view .LVU4464
 17171 002e 0BD0     		beq	.L1212
 17172              	.LVL1239:
 17173              	.L1214:
2204:src/xeq.c     **** 			return pc;
 17174              		.loc 1 2204 3 is_stmt 1 view .LVU4465
2204:src/xeq.c     **** 			return pc;
 17175              		.loc 1 2204 7 is_stmt 0 view .LVU4466
 17176 0030 2046     		mov	r0, r4
 17177 0032 FFF7FEFF 		bl	getprog
 17178              	.LVL1240:
2206:src/xeq.c     **** 	}
 17179              		.loc 1 2206 3 is_stmt 1 view .LVU4467
2204:src/xeq.c     **** 			return pc;
 17180              		.loc 1 2204 7 is_stmt 0 view .LVU4468
 17181 0036 0346     		mov	r3, r0
2204:src/xeq.c     **** 			return pc;
 17182              		.loc 1 2204 6 view .LVU4469
 17183 0038 B342     		cmp	r3, r6
2206:src/xeq.c     **** 	}
 17184              		.loc 1 2206 8 view .LVU4470
 17185 003a 3946     		mov	r1, r7
 17186 003c 2046     		mov	r0, r4
2204:src/xeq.c     **** 			return pc;
 17187              		.loc 1 2204 6 view .LVU4471
 17188 003e F2D1     		bne	.L1222
 17189              	.LVL1241:
 17190              	.L1211:
ARM GAS  /tmp/cc7LeJ71.s 			page 476


2211:src/xeq.c     **** 
 17191              		.loc 1 2211 1 view .LVU4472
 17192 0040 2046     		mov	r0, r4
 17193 0042 02B0     		add	sp, sp, #8
 17194              		.cfi_remember_state
 17195              		.cfi_def_cfa_offset 24
 17196              		@ sp needed
 17197 0044 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17198              	.LVL1242:
 17199              	.L1212:
 17200              		.cfi_restore_state
2208:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17201              		.loc 1 2208 2 is_stmt 1 view .LVU4473
2208:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17202              		.loc 1 2208 5 is_stmt 0 view .LVU4474
 17203 0048 18F00104 		ands	r4, r8, #1
 17204 004c F8D0     		beq	.L1211
 17205              	.LBB2906:
 17206              	.LBI2906:
2192:src/xeq.c     **** 	unsigned short int top;
 17207              		.loc 1 2192 14 is_stmt 1 view .LVU4475
 17208              	.LVL1243:
 17209              	.LBB2907:
2209:src/xeq.c     **** 	return 0;
 17210              		.loc 1 2209 3 view .LVU4476
 17211              	.LBB2908:
 17212              	.LBI2908:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17213              		.loc 1 546 5 view .LVU4477
 17214              	.LBB2909:
 547:src/xeq.c     **** 		Error = e;
 17215              		.loc 1 547 2 view .LVU4478
 547:src/xeq.c     **** 		Error = e;
 17216              		.loc 1 547 12 is_stmt 0 view .LVU4479
 17217 004e 074B     		ldr	r3, .L1223
 547:src/xeq.c     **** 		Error = e;
 17218              		.loc 1 547 5 view .LVU4480
 17219 0050 1C68     		ldr	r4, [r3]
 17220 0052 2CB9     		cbnz	r4, .L1216
 17221              	.LVL1244:
 17222              	.LBB2910:
 17223              	.LBI2910:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17224              		.loc 1 546 5 is_stmt 1 view .LVU4481
 17225              	.LBB2911:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17226              		.loc 1 548 3 view .LVU4482
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17227              		.loc 1 548 9 is_stmt 0 view .LVU4483
 17228 0054 0622     		movs	r2, #6
 17229              	.LBE2911:
 17230              	.LBE2910:
 17231              	.LBE2909:
 17232              	.LBE2908:
 17233              	.LBE2907:
 17234              	.LBE2906:
2211:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 477


 17235              		.loc 1 2211 1 view .LVU4484
 17236 0056 2046     		mov	r0, r4
 17237              	.LBB2917:
 17238              	.LBB2916:
 17239              	.LBB2915:
 17240              	.LBB2914:
 17241              	.LBB2913:
 17242              	.LBB2912:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17243              		.loc 1 548 9 view .LVU4485
 17244 0058 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 17245              		.loc 1 549 3 is_stmt 1 view .LVU4486
 17246              	.LBE2912:
 17247              	.LBE2913:
 17248              	.LBE2914:
 17249              	.LBE2915:
 17250              	.LBE2916:
 17251              	.LBE2917:
2211:src/xeq.c     **** 
 17252              		.loc 1 2211 1 is_stmt 0 view .LVU4487
 17253 005a 02B0     		add	sp, sp, #8
 17254              		.cfi_remember_state
 17255              		.cfi_def_cfa_offset 24
 17256              		@ sp needed
 17257 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17258              	.LVL1245:
 17259              	.L1216:
 17260              		.cfi_restore_state
2210:src/xeq.c     **** }
 17261              		.loc 1 2210 9 view .LVU4488
 17262 0060 0024     		movs	r4, #0
 17263              	.LVL1246:
2211:src/xeq.c     **** 
 17264              		.loc 1 2211 1 view .LVU4489
 17265 0062 2046     		mov	r0, r4
 17266 0064 02B0     		add	sp, sp, #8
 17267              		.cfi_def_cfa_offset 24
 17268              		@ sp needed
 17269 0066 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 17270              	.LVL1247:
 17271              	.L1224:
2211:src/xeq.c     **** 
 17272              		.loc 1 2211 1 view .LVU4490
 17273 006a 00BF     		.align	2
 17274              	.L1223:
 17275 006c 00000000 		.word	Error
 17276              		.cfi_endproc
 17277              	.LFE151:
 17279              		.section	.text.find_label_from,"ax",%progbits
 17280              		.align	1
 17281              		.p2align 2,,3
 17282              		.global	find_label_from
 17283              		.syntax unified
 17284              		.thumb
 17285              		.thumb_func
 17286              		.fpu fpv4-sp-d16
ARM GAS  /tmp/cc7LeJ71.s 			page 478


 17288              	find_label_from:
 17289              	.LVL1248:
 17290              	.LFB152:
2214:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 17291              		.loc 1 2214 76 is_stmt 1 view -0
 17292              		.cfi_startproc
 17293              		@ args = 0, pretend = 0, frame = 0
 17294              		@ frame_needed = 0, uses_anonymous_args = 0
 17295              		@ link register save eliminated.
2215:src/xeq.c     **** }
 17296              		.loc 1 2215 2 view .LVU4492
2215:src/xeq.c     **** }
 17297              		.loc 1 2215 9 is_stmt 0 view .LVU4493
 17298 0000 41F4C441 		orr	r1, r1, #25088
 17299              	.LVL1249:
2215:src/xeq.c     **** }
 17300              		.loc 1 2215 9 view .LVU4494
 17301 0004 FFF7FEBF 		b	find_opcode_from
 17302              	.LVL1250:
2215:src/xeq.c     **** }
 17303              		.loc 1 2215 9 view .LVU4495
 17304              		.cfi_endproc
 17305              	.LFE152:
 17307              		.section	.text.op_rtn,"ax",%progbits
 17308              		.align	1
 17309              		.p2align 2,,3
 17310              		.global	op_rtn
 17311              		.syntax unified
 17312              		.thumb
 17313              		.thumb_func
 17314              		.fpu fpv4-sp-d16
 17316              	op_rtn:
 17317              	.LVL1251:
 17318              	.LFB155:
2273:src/xeq.c     **** 	if (! Running && ! XromRunning) {
 17319              		.loc 1 2273 28 is_stmt 1 view -0
 17320              		.cfi_startproc
 17321              		@ args = 0, pretend = 0, frame = 0
 17322              		@ frame_needed = 0, uses_anonymous_args = 0
 17323              		@ link register save eliminated.
2274:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17324              		.loc 1 2274 2 view .LVU4497
2274:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17325              		.loc 1 2274 6 is_stmt 0 view .LVU4498
 17326 0000 074A     		ldr	r2, .L1229
2274:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17327              		.loc 1 2274 19 view .LVU4499
 17328 0002 084B     		ldr	r3, .L1229+4
2274:src/xeq.c     **** 		// Manual return goes to step 0 and clears the return stack
 17329              		.loc 1 2274 16 view .LVU4500
 17330 0004 1268     		ldr	r2, [r2]
 17331 0006 1B68     		ldr	r3, [r3]
 17332 0008 1343     		orrs	r3, r2, r3
 17333 000a 06D0     		beq	.L1228
2279:src/xeq.c     **** }
 17334              		.loc 1 2279 3 is_stmt 1 view .LVU4501
 17335 000c A0F13900 		sub	r0, #57
ARM GAS  /tmp/cc7LeJ71.s 			page 479


 17336              	.LVL1252:
2279:src/xeq.c     **** }
 17337              		.loc 1 2279 3 is_stmt 0 view .LVU4502
 17338 0010 B0FA80F0 		clz	r0, r0
 17339 0014 4009     		lsrs	r0, r0, #5
 17340 0016 FFF7FEBF 		b	do_rtn
 17341              	.LVL1253:
 17342              	.L1228:
2276:src/xeq.c     **** 	}
 17343              		.loc 1 2276 3 is_stmt 1 view .LVU4503
 17344 001a FFF7FEBF 		b	clrretstk_pc
 17345              	.LVL1254:
 17346              	.L1230:
2276:src/xeq.c     **** 	}
 17347              		.loc 1 2276 3 is_stmt 0 view .LVU4504
 17348 001e 00BF     		.align	2
 17349              	.L1229:
 17350 0020 00000000 		.word	Running
 17351 0024 00000000 		.word	XromRunning
 17352              		.cfi_endproc
 17353              	.LFE155:
 17355              		.section	.text.op_popusr,"ax",%progbits
 17356              		.align	1
 17357              		.p2align 2,,3
 17358              		.global	op_popusr
 17359              		.syntax unified
 17360              		.thumb
 17361              		.thumb_func
 17362              		.fpu fpv4-sp-d16
 17364              	op_popusr:
 17365              	.LVL1255:
 17366              	.LFB159:
2320:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17367              		.loc 1 2320 31 is_stmt 1 view -0
 17368              		.cfi_startproc
 17369              		@ args = 0, pretend = 0, frame = 0
 17370              		@ frame_needed = 0, uses_anonymous_args = 0
 17371              		@ link register save eliminated.
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17372              		.loc 1 2321 2 view .LVU4506
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17373              		.loc 1 2321 25 is_stmt 0 view .LVU4507
 17374 0000 164B     		ldr	r3, .L1233
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17375              		.loc 1 2321 24 view .LVU4508
 17376 0002 174A     		ldr	r2, .L1233+4
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17377              		.loc 1 2321 25 view .LVU4509
 17378 0004 1B68     		ldr	r3, [r3]
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17379              		.loc 1 2321 24 view .LVU4510
 17380 0006 1268     		ldr	r2, [r2]
2320:src/xeq.c     **** 	UserLocalRegs = RetStk[RetStkPtr++]; // Previous local registers
 17381              		.loc 1 2320 31 view .LVU4511
 17382 0008 F0B4     		push	{r4, r5, r6, r7}
 17383              		.cfi_def_cfa_offset 16
 17384              		.cfi_offset 4, -16
ARM GAS  /tmp/cc7LeJ71.s 			page 480


 17385              		.cfi_offset 5, -12
 17386              		.cfi_offset 6, -8
 17387              		.cfi_offset 7, -4
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17388              		.loc 1 2321 25 view .LVU4512
 17389 000a B3F9E257 		ldrsh	r5, [r3, #2018]
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17390              		.loc 1 2321 16 view .LVU4513
 17391 000e 154F     		ldr	r7, .L1233+8
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17392              		.loc 1 2323 13 view .LVU4514
 17393 0010 154E     		ldr	r6, .L1233+12
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17394              		.loc 1 2321 34 view .LVU4515
 17395 0012 A8B2     		uxth	r0, r5
 17396              	.LVL1256:
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17397              		.loc 1 2321 34 view .LVU4516
 17398 0014 411C     		adds	r1, r0, #1
 17399 0016 09B2     		sxth	r1, r1
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17400              		.loc 1 2322 34 view .LVU4517
 17401 0018 841C     		adds	r4, r0, #2
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17402              		.loc 1 2321 34 view .LVU4518
 17403 001a A3F8E217 		strh	r1, [r3, #2018]	@ movhi
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17404              		.loc 1 2322 34 view .LVU4519
 17405 001e 24B2     		sxth	r4, r4
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17406              		.loc 1 2321 24 view .LVU4520
 17407 0020 32F81550 		ldrh	r5, [r2, r5, lsl #1]
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17408              		.loc 1 2322 34 view .LVU4521
 17409 0024 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17410              		.loc 1 2322 24 view .LVU4522
 17411 0028 32F81110 		ldrh	r1, [r2, r1, lsl #1]
2321:src/xeq.c     **** 	LocalRegs =     RetStk[RetStkPtr++]; // My local registers
 17412              		.loc 1 2321 24 view .LVU4523
 17413 002c 3D60     		str	r5, [r7]
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17414              		.loc 1 2322 2 is_stmt 1 view .LVU4524
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17415              		.loc 1 2322 12 is_stmt 0 view .LVU4525
 17416 002e B3F8DE57 		ldrh	r5, [r3, #2014]
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17417              		.loc 1 2322 24 view .LVU4526
 17418 0032 41F30A01 		sbfx	r1, r1, #0, #11
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17419              		.loc 1 2322 12 view .LVU4527
 17420 0036 61F34F15 		bfi	r5, r1, #5, #11
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17421              		.loc 1 2323 34 view .LVU4528
 17422 003a 0330     		adds	r0, r0, #3
2322:src/xeq.c     **** 	XromUserPc =    RetStk[RetStkPtr++]; // Adress of callee
 17423              		.loc 1 2322 12 view .LVU4529
ARM GAS  /tmp/cc7LeJ71.s 			page 481


 17424 003c A3F8DE57 		strh	r5, [r3, #2014]	@ movhi
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17425              		.loc 1 2323 2 is_stmt 1 view .LVU4530
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17426              		.loc 1 2323 34 is_stmt 0 view .LVU4531
 17427 0040 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
2324:src/xeq.c     **** }
 17428              		.loc 1 2324 20 view .LVU4532
 17429 0044 32F81130 		ldrh	r3, [r2, r1, lsl #1]
2323:src/xeq.c     **** 	RetStk[LocalRegs] &= ~LOCAL_HIDDEN;   // Repair the local frame
 17430              		.loc 1 2323 24 view .LVU4533
 17431 0048 32F81400 		ldrh	r0, [r2, r4, lsl #1]
 17432 004c 3060     		str	r0, [r6]
2324:src/xeq.c     **** }
 17433              		.loc 1 2324 2 is_stmt 1 view .LVU4534
2324:src/xeq.c     **** }
 17434              		.loc 1 2324 20 is_stmt 0 view .LVU4535
 17435 004e 23F40053 		bic	r3, r3, #8192
2325:src/xeq.c     **** 
 17436              		.loc 1 2325 1 view .LVU4536
 17437 0052 F0BC     		pop	{r4, r5, r6, r7}
 17438              		.cfi_restore 7
 17439              		.cfi_restore 6
 17440              		.cfi_restore 5
 17441              		.cfi_restore 4
 17442              		.cfi_def_cfa_offset 0
2324:src/xeq.c     **** }
 17443              		.loc 1 2324 20 view .LVU4537
 17444 0054 22F81130 		strh	r3, [r2, r1, lsl #1]	@ movhi
2325:src/xeq.c     **** 
 17445              		.loc 1 2325 1 view .LVU4538
 17446 0058 7047     		bx	lr
 17447              	.L1234:
 17448 005a 00BF     		.align	2
 17449              	.L1233:
 17450 005c 00000000 		.word	main_ram
 17451 0060 00000000 		.word	RetStk
 17452 0064 00000000 		.word	UserLocalRegs
 17453 0068 00000000 		.word	XromUserPc
 17454              		.cfi_endproc
 17455              	.LFE159:
 17457              		.section	.text.findmultilbl,"ax",%progbits
 17458              		.align	1
 17459              		.p2align 2,,3
 17460              		.global	findmultilbl
 17461              		.syntax unified
 17462              		.thumb
 17463              		.thumb_func
 17464              		.fpu fpv4-sp-d16
 17466              	findmultilbl:
 17467              	.LVL1257:
 17468              	.LFB163:
2353:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17469              		.loc 1 2353 54 is_stmt 1 view -0
 17470              		.cfi_startproc
 17471              		@ args = 0, pretend = 0, frame = 0
 17472              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc7LeJ71.s 			page 482


2354:src/xeq.c     **** 	unsigned int lbl;
 17473              		.loc 1 2354 2 view .LVU4540
2353:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17474              		.loc 1 2353 54 is_stmt 0 view .LVU4541
 17475 0000 38B5     		push	{r3, r4, r5, lr}
 17476              		.cfi_def_cfa_offset 16
 17477              		.cfi_offset 3, -16
 17478              		.cfi_offset 4, -12
 17479              		.cfi_offset 5, -8
 17480              		.cfi_offset 14, -4
2357:src/xeq.c     **** 	if (lbl == 0)
 17481              		.loc 1 2357 8 view .LVU4542
 17482 0002 0022     		movs	r2, #0
2354:src/xeq.c     **** 	unsigned int lbl;
 17483              		.loc 1 2354 15 view .LVU4543
 17484 0004 20F47064 		bic	r4, r0, #3840
 17485              	.LVL1258:
2355:src/xeq.c     **** 
 17486              		.loc 1 2355 2 is_stmt 1 view .LVU4544
2357:src/xeq.c     **** 	if (lbl == 0)
 17487              		.loc 1 2357 2 view .LVU4545
2353:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17488              		.loc 1 2353 54 is_stmt 0 view .LVU4546
 17489 0008 0D46     		mov	r5, r1
2357:src/xeq.c     **** 	if (lbl == 0)
 17490              		.loc 1 2357 8 view .LVU4547
 17491 000a 1046     		mov	r0, r2
 17492              	.LVL1259:
2357:src/xeq.c     **** 	if (lbl == 0)
 17493              		.loc 1 2357 8 view .LVU4548
 17494 000c 2146     		mov	r1, r4
 17495              	.LVL1260:
2357:src/xeq.c     **** 	if (lbl == 0)
 17496              		.loc 1 2357 8 view .LVU4549
 17497 000e FFF7FEFF 		bl	find_opcode_from
 17498              	.LVL1261:
2358:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17499              		.loc 1 2358 2 is_stmt 1 view .LVU4550
2358:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_LIBRARY), dest, 0);	// Library
 17500              		.loc 1 2358 5 is_stmt 0 view .LVU4551
 17501 0012 00B1     		cbz	r0, .L1241
 17502              	.L1235:
2365:src/xeq.c     **** 
 17503              		.loc 1 2365 1 view .LVU4552
 17504 0014 38BD     		pop	{r3, r4, r5, pc}
 17505              	.LVL1262:
 17506              	.L1241:
2359:src/xeq.c     **** 	if (lbl == 0)
 17507              		.loc 1 2359 3 is_stmt 1 view .LVU4553
2359:src/xeq.c     **** 	if (lbl == 0)
 17508              		.loc 1 2359 9 is_stmt 0 view .LVU4554
 17509 0016 0246     		mov	r2, r0
 17510 0018 2146     		mov	r1, r4
 17511 001a 4FF48040 		mov	r0, #16384
 17512              	.LVL1263:
2359:src/xeq.c     **** 	if (lbl == 0)
 17513              		.loc 1 2359 9 view .LVU4555
ARM GAS  /tmp/cc7LeJ71.s 			page 483


 17514 001e FFF7FEFF 		bl	find_opcode_from
 17515              	.LVL1264:
2360:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17516              		.loc 1 2360 2 is_stmt 1 view .LVU4556
2360:src/xeq.c     **** 		lbl = find_opcode_from(addrLIB(0, REGION_BACKUP), dest, 0);	// Backup
 17517              		.loc 1 2360 5 is_stmt 0 view .LVU4557
 17518 0022 0028     		cmp	r0, #0
 17519 0024 F6D1     		bne	.L1235
2361:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17520              		.loc 1 2361 3 is_stmt 1 view .LVU4558
2361:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17521              		.loc 1 2361 9 is_stmt 0 view .LVU4559
 17522 0026 0246     		mov	r2, r0
 17523 0028 2146     		mov	r1, r4
 17524 002a 4FF40040 		mov	r0, #32768
 17525              	.LVL1265:
2361:src/xeq.c     **** 	if (lbl == 0 && (flags & FIND_OP_ERROR) != 0)
 17526              		.loc 1 2361 9 view .LVU4560
 17527 002e FFF7FEFF 		bl	find_opcode_from
 17528              	.LVL1266:
2362:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17529              		.loc 1 2362 2 is_stmt 1 view .LVU4561
2362:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17530              		.loc 1 2362 5 is_stmt 0 view .LVU4562
 17531 0032 0028     		cmp	r0, #0
 17532 0034 EED1     		bne	.L1235
2362:src/xeq.c     **** 		report_err(ERR_NO_LBL);
 17533              		.loc 1 2362 15 discriminator 1 view .LVU4563
 17534 0036 EB07     		lsls	r3, r5, #31
 17535 0038 ECD5     		bpl	.L1235
 17536              	.LBB2924:
 17537              	.LBI2924:
2353:src/xeq.c     **** 	const opcode dest = (o & 0xfffff0ff) + (DBL_LBL << DBL_SHIFT);
 17538              		.loc 1 2353 14 is_stmt 1 view .LVU4564
 17539              	.LVL1267:
 17540              	.LBB2925:
2363:src/xeq.c     **** 	return lbl;
 17541              		.loc 1 2363 3 view .LVU4565
 17542              	.LBB2926:
 17543              	.LBI2926:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 17544              		.loc 1 546 5 view .LVU4566
 17545              	.LBB2927:
 547:src/xeq.c     **** 		Error = e;
 17546              		.loc 1 547 2 view .LVU4567
 547:src/xeq.c     **** 		Error = e;
 17547              		.loc 1 547 12 is_stmt 0 view .LVU4568
 17548 003a 034B     		ldr	r3, .L1242
 547:src/xeq.c     **** 		Error = e;
 17549              		.loc 1 547 5 view .LVU4569
 17550 003c 1A68     		ldr	r2, [r3]
 17551 003e 002A     		cmp	r2, #0
 17552 0040 E8D1     		bne	.L1235
 17553              	.LVL1268:
 17554              	.LBB2928:
 17555              	.LBI2928:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/cc7LeJ71.s 			page 484


 17556              		.loc 1 546 5 is_stmt 1 view .LVU4570
 17557              	.LBB2929:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17558              		.loc 1 548 3 view .LVU4571
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 17559              		.loc 1 548 9 is_stmt 0 view .LVU4572
 17560 0042 0622     		movs	r2, #6
 17561 0044 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 17562              		.loc 1 549 3 is_stmt 1 view .LVU4573
 17563              	.LVL1269:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 17564              		.loc 1 549 3 is_stmt 0 view .LVU4574
 17565              	.LBE2929:
 17566              	.LBE2928:
 17567              	.LBE2927:
 17568              	.LBE2926:
 17569              	.LBE2925:
 17570              	.LBE2924:
2364:src/xeq.c     **** }
 17571              		.loc 1 2364 2 is_stmt 1 view .LVU4575
2365:src/xeq.c     **** 
 17572              		.loc 1 2365 1 is_stmt 0 view .LVU4576
 17573 0046 38BD     		pop	{r3, r4, r5, pc}
 17574              	.LVL1270:
 17575              	.L1243:
2365:src/xeq.c     **** 
 17576              		.loc 1 2365 1 view .LVU4577
 17577              		.align	2
 17578              	.L1242:
 17579 0048 00000000 		.word	Error
 17580              		.cfi_endproc
 17581              	.LFE163:
 17583              		.section	.text.multiumenu,"ax",%progbits
 17584              		.align	1
 17585              		.p2align 2,,3
 17586              		.global	multiumenu
 17587              		.syntax unified
 17588              		.thumb
 17589              		.thumb_func
 17590              		.fpu fpv4-sp-d16
 17592              	multiumenu:
 17593              	.LVL1271:
 17594              	.LFB166:
2386:src/xeq.c     ****   opcode op = (o & 0xFFFFF0FF) + ((DBL_LBL) << DBL_SHIFT); // change opcode to LBL
 17595              		.loc 1 2386 53 is_stmt 1 view -0
 17596              		.cfi_startproc
 17597              		@ args = 0, pretend = 0, frame = 0
 17598              		@ frame_needed = 0, uses_anonymous_args = 0
2387:src/xeq.c     ****   build_user_menu_from_program(op);
 17599              		.loc 1 2387 3 view .LVU4579
2388:src/xeq.c     ****   set_menu (M_User);
 17600              		.loc 1 2388 3 view .LVU4580
2386:src/xeq.c     ****   opcode op = (o & 0xFFFFF0FF) + ((DBL_LBL) << DBL_SHIFT); // change opcode to LBL
 17601              		.loc 1 2386 53 is_stmt 0 view .LVU4581
 17602 0000 08B5     		push	{r3, lr}
 17603              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/cc7LeJ71.s 			page 485


 17604              		.cfi_offset 3, -8
 17605              		.cfi_offset 14, -4
2388:src/xeq.c     ****   set_menu (M_User);
 17606              		.loc 1 2388 3 view .LVU4582
 17607 0002 20F47060 		bic	r0, r0, #3840
 17608              	.LVL1272:
2388:src/xeq.c     ****   set_menu (M_User);
 17609              		.loc 1 2388 3 view .LVU4583
 17610 0006 FFF7FEFF 		bl	build_user_menu_from_program
 17611              	.LVL1273:
2389:src/xeq.c     ****   display_current_menu ();
 17612              		.loc 1 2389 3 is_stmt 1 view .LVU4584
 17613 000a 6320     		movs	r0, #99
 17614 000c FFF7FEFF 		bl	set_menu
 17615              	.LVL1274:
2390:src/xeq.c     **** }
 17616              		.loc 1 2390 3 view .LVU4585
2391:src/xeq.c     **** 
 17617              		.loc 1 2391 1 is_stmt 0 view .LVU4586
 17618 0010 BDE80840 		pop	{r3, lr}
 17619              		.cfi_restore 14
 17620              		.cfi_restore 3
 17621              		.cfi_def_cfa_offset 0
2390:src/xeq.c     **** }
 17622              		.loc 1 2390 3 view .LVU4587
 17623 0014 FFF7FEBF 		b	display_current_menu
 17624              	.LVL1275:
 17625              		.cfi_endproc
 17626              	.LFE166:
 17628              		.section	.text.get_dispmode_digs,"ax",%progbits
 17629              		.align	1
 17630              		.p2align 2,,3
 17631              		.global	get_dispmode_digs
 17632              		.syntax unified
 17633              		.thumb
 17634              		.thumb_func
 17635              		.fpu fpv4-sp-d16
 17637              	get_dispmode_digs:
 17638              	.LVL1276:
 17639              	.LFB171:
2424:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17640              		.loc 1 2424 1 is_stmt 1 view -0
 17641              		.cfi_startproc
 17642              		@ args = 0, pretend = 0, frame = 0
 17643              		@ frame_needed = 0, uses_anonymous_args = 0
 17644              		@ link register save eliminated.
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17645              		.loc 1 2425 2 view .LVU4589
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17646              		.loc 1 2425 17 is_stmt 0 view .LVU4590
 17647 0000 0A4B     		ldr	r3, .L1249
 17648 0002 1A68     		ldr	r2, [r3]
2426:src/xeq.c     **** 
 17649              		.loc 1 2426 23 view .LVU4591
 17650 0004 92F8E737 		ldrb	r3, [r2, #2023]	@ zero_extendqisi2
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17651              		.loc 1 2425 23 view .LVU4592
ARM GAS  /tmp/cc7LeJ71.s 			page 486


 17652 0008 92F8E627 		ldrb	r2, [r2, #2022]	@ zero_extendqisi2
2426:src/xeq.c     **** 
 17653              		.loc 1 2426 6 view .LVU4593
 17654 000c 03F00F03 		and	r3, r3, #15
2428:src/xeq.c     **** 		dispdigs -= 12;
 17655              		.loc 1 2428 5 view .LVU4594
 17656 0010 0B2B     		cmp	r3, #11
2424:src/xeq.c     **** 	int dispmode = UState.dispmode;
 17657              		.loc 1 2424 1 view .LVU4595
 17658 0012 0146     		mov	r1, r0
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 17659              		.loc 1 2425 6 view .LVU4596
 17660 0014 4FEA9210 		lsr	r0, r2, #6
 17661              	.LVL1277:
2426:src/xeq.c     **** 
 17662              		.loc 1 2426 2 is_stmt 1 view .LVU4597
2428:src/xeq.c     **** 		dispdigs -= 12;
 17663              		.loc 1 2428 2 view .LVU4598
2428:src/xeq.c     **** 		dispdigs -= 12;
 17664              		.loc 1 2428 5 is_stmt 0 view .LVU4599
 17665 0018 06DD     		ble	.L1247
2429:src/xeq.c     **** 		dispmode += 4;
 17666              		.loc 1 2429 3 is_stmt 1 view .LVU4600
 17667              	.LVL1278:
2430:src/xeq.c     **** 		if (dispmode >= 6) {
 17668              		.loc 1 2430 3 view .LVU4601
2430:src/xeq.c     **** 		if (dispmode >= 6) {
 17669              		.loc 1 2430 12 is_stmt 0 view .LVU4602
 17670 001a 021D     		adds	r2, r0, #4
 17671              	.LVL1279:
2431:src/xeq.c     **** 			dispmode -= 2;
 17672              		.loc 1 2431 3 is_stmt 1 view .LVU4603
2431:src/xeq.c     **** 			dispmode -= 2;
 17673              		.loc 1 2431 6 is_stmt 0 view .LVU4604
 17674 001c 052A     		cmp	r2, #5
2429:src/xeq.c     **** 		dispmode += 4;
 17675              		.loc 1 2429 12 view .LVU4605
 17676 001e D9BF     		ittee	le
 17677 0020 0C3B     		suble	r3, r3, #12
 17678              	.LVL1280:
2429:src/xeq.c     **** 		dispmode += 4;
 17679              		.loc 1 2429 12 view .LVU4606
 17680 0022 1046     		movle	r0, r2
2432:src/xeq.c     **** 			dispdigs += 4;
 17681              		.loc 1 2432 4 is_stmt 1 view .LVU4607
2432:src/xeq.c     **** 			dispdigs += 4;
 17682              		.loc 1 2432 13 is_stmt 0 view .LVU4608
 17683 0024 0230     		addgt	r0, r0, #2
 17684              	.LVL1281:
2433:src/xeq.c     **** 		}
 17685              		.loc 1 2433 4 is_stmt 1 view .LVU4609
2433:src/xeq.c     **** 		}
 17686              		.loc 1 2433 13 is_stmt 0 view .LVU4610
 17687 0026 083B     		subgt	r3, r3, #8
 17688              	.LVL1282:
 17689              	.L1247:
2436:src/xeq.c     **** 	return dispmode;
ARM GAS  /tmp/cc7LeJ71.s 			page 487


 17690              		.loc 1 2436 2 is_stmt 1 view .LVU4611
2436:src/xeq.c     **** 	return dispmode;
 17691              		.loc 1 2436 9 is_stmt 0 view .LVU4612
 17692 0028 0B60     		str	r3, [r1]
2437:src/xeq.c     **** }
 17693              		.loc 1 2437 2 is_stmt 1 view .LVU4613
2438:src/xeq.c     **** 
 17694              		.loc 1 2438 1 is_stmt 0 view .LVU4614
 17695 002a 7047     		bx	lr
 17696              	.L1250:
 17697              		.align	2
 17698              	.L1249:
 17699 002c 00000000 		.word	main_ram
 17700              		.cfi_endproc
 17701              	.LFE171:
 17703              		.section	.text.set_dispmode_digs,"ax",%progbits
 17704              		.align	1
 17705              		.p2align 2,,3
 17706              		.global	set_dispmode_digs
 17707              		.syntax unified
 17708              		.thumb
 17709              		.thumb_func
 17710              		.fpu fpv4-sp-d16
 17712              	set_dispmode_digs:
 17713              	.LVL1283:
 17714              	.LFB172:
2441:src/xeq.c     **** 	if (dispmode >= 4) {
 17715              		.loc 1 2441 1 is_stmt 1 view -0
 17716              		.cfi_startproc
 17717              		@ args = 0, pretend = 0, frame = 0
 17718              		@ frame_needed = 0, uses_anonymous_args = 0
 17719              		@ link register save eliminated.
2442:src/xeq.c     **** 		dispmode -= 4;
 17720              		.loc 1 2442 2 view .LVU4616
2442:src/xeq.c     **** 		dispmode -= 4;
 17721              		.loc 1 2442 5 is_stmt 0 view .LVU4617
 17722 0000 0328     		cmp	r0, #3
 17723 0002 07DD     		ble	.L1252
2443:src/xeq.c     **** 		dispdigs += 12;
 17724              		.loc 1 2443 3 is_stmt 1 view .LVU4618
 17725              	.LVL1284:
2444:src/xeq.c     **** 		if (dispdigs >= 16) {
 17726              		.loc 1 2444 3 view .LVU4619
2444:src/xeq.c     **** 		if (dispdigs >= 16) {
 17727              		.loc 1 2444 12 is_stmt 0 view .LVU4620
 17728 0004 01F10C03 		add	r3, r1, #12
 17729              	.LVL1285:
2445:src/xeq.c     **** 			dispdigs -= 4;
 17730              		.loc 1 2445 3 is_stmt 1 view .LVU4621
2445:src/xeq.c     **** 			dispdigs -= 4;
 17731              		.loc 1 2445 6 is_stmt 0 view .LVU4622
 17732 0008 0F2B     		cmp	r3, #15
2443:src/xeq.c     **** 		dispdigs += 12;
 17733              		.loc 1 2443 12 view .LVU4623
 17734 000a D9BF     		ittee	le
 17735 000c 0438     		suble	r0, r0, #4
 17736              	.LVL1286:
ARM GAS  /tmp/cc7LeJ71.s 			page 488


2443:src/xeq.c     **** 		dispdigs += 12;
 17737              		.loc 1 2443 12 view .LVU4624
 17738 000e 1946     		movle	r1, r3
2446:src/xeq.c     **** 			dispmode += 2;
 17739              		.loc 1 2446 4 is_stmt 1 view .LVU4625
2446:src/xeq.c     **** 			dispmode += 2;
 17740              		.loc 1 2446 13 is_stmt 0 view .LVU4626
 17741 0010 0831     		addgt	r1, r1, #8
 17742              	.LVL1287:
2447:src/xeq.c     **** 		}
 17743              		.loc 1 2447 4 is_stmt 1 view .LVU4627
2447:src/xeq.c     **** 		}
 17744              		.loc 1 2447 13 is_stmt 0 view .LVU4628
 17745 0012 0238     		subgt	r0, r0, #2
 17746              	.LVL1288:
 17747              	.L1252:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17748              		.loc 1 2450 2 is_stmt 1 view .LVU4629
 17749 0014 084B     		ldr	r3, .L1254
 17750 0016 1A68     		ldr	r2, [r3]
2451:src/xeq.c     **** }
 17751              		.loc 1 2451 2 view .LVU4630
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17752              		.loc 1 2450 18 is_stmt 0 view .LVU4631
 17753 0018 00F00300 		and	r0, r0, #3
 17754              	.LVL1289:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17755              		.loc 1 2450 18 view .LVU4632
 17756 001c B2F8E637 		ldrh	r3, [r2, #2022]
 17757 0020 8001     		lsls	r0, r0, #6
 17758 0022 01F00F01 		and	r1, r1, #15
 17759              	.LVL1290:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 17760              		.loc 1 2450 18 view .LVU4633
 17761 0026 40EA0120 		orr	r0, r0, r1, lsl #8
 17762 002a 23F47C63 		bic	r3, r3, #4032
 17763 002e 1843     		orrs	r0, r0, r3
 17764 0030 A2F8E607 		strh	r0, [r2, #2022]	@ movhi
2452:src/xeq.c     **** #endif
 17765              		.loc 1 2452 1 view .LVU4634
 17766 0034 7047     		bx	lr
 17767              	.L1255:
 17768 0036 00BF     		.align	2
 17769              	.L1254:
 17770 0038 00000000 		.word	main_ram
 17771              		.cfi_endproc
 17772              	.LFE172:
 17774              		.section	.text.convC2F,"ax",%progbits
 17775              		.align	1
 17776              		.p2align 2,,3
 17777              		.global	convC2F
 17778              		.syntax unified
 17779              		.thumb
 17780              		.thumb_func
 17781              		.fpu fpv4-sp-d16
 17783              	convC2F:
 17784              	.LVL1291:
ARM GAS  /tmp/cc7LeJ71.s 			page 489


 17785              	.LFB174:
2504:src/xeq.c     **** 	decNumber s;
 17786              		.loc 1 2504 54 is_stmt 1 view -0
 17787              		.cfi_startproc
 17788              		@ args = 0, pretend = 0, frame = 40
 17789              		@ frame_needed = 0, uses_anonymous_args = 0
2505:src/xeq.c     **** 
 17790              		.loc 1 2505 2 view .LVU4636
2507:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17791              		.loc 1 2507 2 view .LVU4637
2504:src/xeq.c     **** 	decNumber s;
 17792              		.loc 1 2504 54 is_stmt 0 view .LVU4638
 17793 0000 10B5     		push	{r4, lr}
 17794              		.cfi_def_cfa_offset 8
 17795              		.cfi_offset 4, -8
 17796              		.cfi_offset 14, -4
 17797 0002 8AB0     		sub	sp, sp, #40
 17798              		.cfi_def_cfa_offset 48
2504:src/xeq.c     **** 	decNumber s;
 17799              		.loc 1 2504 54 view .LVU4639
 17800 0004 0446     		mov	r4, r0
2507:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17801              		.loc 1 2507 2 view .LVU4640
 17802 0006 054A     		ldr	r2, .L1258
 17803 0008 01A8     		add	r0, sp, #4
 17804              	.LVL1292:
2507:src/xeq.c     **** 	return dn_add(r, &s, &const_32);
 17805              		.loc 1 2507 2 view .LVU4641
 17806 000a FFF7FEFF 		bl	dn_multiply
 17807              	.LVL1293:
2508:src/xeq.c     **** }
 17808              		.loc 1 2508 2 is_stmt 1 view .LVU4642
2508:src/xeq.c     **** }
 17809              		.loc 1 2508 9 is_stmt 0 view .LVU4643
 17810 000e 044A     		ldr	r2, .L1258+4
 17811 0010 2046     		mov	r0, r4
 17812 0012 01A9     		add	r1, sp, #4
 17813 0014 FFF7FEFF 		bl	dn_add
 17814              	.LVL1294:
2509:src/xeq.c     **** 
 17815              		.loc 1 2509 1 view .LVU4644
 17816 0018 0AB0     		add	sp, sp, #40
 17817              		.cfi_def_cfa_offset 8
 17818              		@ sp needed
 17819 001a 10BD     		pop	{r4, pc}
 17820              	.LVL1295:
 17821              	.L1259:
2509:src/xeq.c     **** 
 17822              		.loc 1 2509 1 view .LVU4645
 17823              		.align	2
 17824              	.L1258:
 17825 001c 00000000 		.word	const_9on5
 17826 0020 00000000 		.word	const_32
 17827              		.cfi_endproc
 17828              	.LFE174:
 17830              		.section	.text.convF2C,"ax",%progbits
 17831              		.align	1
ARM GAS  /tmp/cc7LeJ71.s 			page 490


 17832              		.p2align 2,,3
 17833              		.global	convF2C
 17834              		.syntax unified
 17835              		.thumb
 17836              		.thumb_func
 17837              		.fpu fpv4-sp-d16
 17839              	convF2C:
 17840              	.LVL1296:
 17841              	.LFB175:
2511:src/xeq.c     **** 	decNumber s;
 17842              		.loc 1 2511 54 is_stmt 1 view -0
 17843              		.cfi_startproc
 17844              		@ args = 0, pretend = 0, frame = 40
 17845              		@ frame_needed = 0, uses_anonymous_args = 0
2512:src/xeq.c     **** 
 17846              		.loc 1 2512 2 view .LVU4647
2514:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17847              		.loc 1 2514 2 view .LVU4648
2511:src/xeq.c     **** 	decNumber s;
 17848              		.loc 1 2511 54 is_stmt 0 view .LVU4649
 17849 0000 10B5     		push	{r4, lr}
 17850              		.cfi_def_cfa_offset 8
 17851              		.cfi_offset 4, -8
 17852              		.cfi_offset 14, -4
 17853 0002 8AB0     		sub	sp, sp, #40
 17854              		.cfi_def_cfa_offset 48
2511:src/xeq.c     **** 	decNumber s;
 17855              		.loc 1 2511 54 view .LVU4650
 17856 0004 0446     		mov	r4, r0
2514:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17857              		.loc 1 2514 2 view .LVU4651
 17858 0006 054A     		ldr	r2, .L1262
 17859 0008 01A8     		add	r0, sp, #4
 17860              	.LVL1297:
2514:src/xeq.c     **** 	return dn_divide(r, &s, &const_9on5);
 17861              		.loc 1 2514 2 view .LVU4652
 17862 000a FFF7FEFF 		bl	dn_subtract
 17863              	.LVL1298:
2515:src/xeq.c     **** }
 17864              		.loc 1 2515 2 is_stmt 1 view .LVU4653
2515:src/xeq.c     **** }
 17865              		.loc 1 2515 9 is_stmt 0 view .LVU4654
 17866 000e 044A     		ldr	r2, .L1262+4
 17867 0010 2046     		mov	r0, r4
 17868 0012 01A9     		add	r1, sp, #4
 17869 0014 FFF7FEFF 		bl	dn_divide
 17870              	.LVL1299:
2516:src/xeq.c     **** 
 17871              		.loc 1 2516 1 view .LVU4655
 17872 0018 0AB0     		add	sp, sp, #40
 17873              		.cfi_def_cfa_offset 8
 17874              		@ sp needed
 17875 001a 10BD     		pop	{r4, pc}
 17876              	.LVL1300:
 17877              	.L1263:
2516:src/xeq.c     **** 
 17878              		.loc 1 2516 1 view .LVU4656
ARM GAS  /tmp/cc7LeJ71.s 			page 491


 17879              		.align	2
 17880              	.L1262:
 17881 001c 00000000 		.word	const_32
 17882 0020 00000000 		.word	const_9on5
 17883              		.cfi_endproc
 17884              	.LFE175:
 17886              		.section	.text.convDB2AR,"ax",%progbits
 17887              		.align	1
 17888              		.p2align 2,,3
 17889              		.global	convDB2AR
 17890              		.syntax unified
 17891              		.thumb
 17892              		.thumb_func
 17893              		.fpu fpv4-sp-d16
 17895              	convDB2AR:
 17896              	.LVL1301:
 17897              	.LFB176:
2518:src/xeq.c     **** 	decNumber t;
 17898              		.loc 1 2518 56 is_stmt 1 view -0
 17899              		.cfi_startproc
 17900              		@ args = 0, pretend = 0, frame = 40
 17901              		@ frame_needed = 0, uses_anonymous_args = 0
2519:src/xeq.c     **** 	dn_multiply(&t, x, &const_0_05);
 17902              		.loc 1 2519 2 view .LVU4658
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17903              		.loc 1 2520 2 view .LVU4659
2518:src/xeq.c     **** 	decNumber t;
 17904              		.loc 1 2518 56 is_stmt 0 view .LVU4660
 17905 0000 10B5     		push	{r4, lr}
 17906              		.cfi_def_cfa_offset 8
 17907              		.cfi_offset 4, -8
 17908              		.cfi_offset 14, -4
 17909 0002 8AB0     		sub	sp, sp, #40
 17910              		.cfi_def_cfa_offset 48
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17911              		.loc 1 2520 2 view .LVU4661
 17912 0004 054A     		ldr	r2, .L1266
2518:src/xeq.c     **** 	decNumber t;
 17913              		.loc 1 2518 56 view .LVU4662
 17914 0006 0446     		mov	r4, r0
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17915              		.loc 1 2520 2 view .LVU4663
 17916 0008 01A8     		add	r0, sp, #4
 17917              	.LVL1302:
2520:src/xeq.c     **** 	return decNumberPow10(r, &t);
 17918              		.loc 1 2520 2 view .LVU4664
 17919 000a FFF7FEFF 		bl	dn_multiply
 17920              	.LVL1303:
2521:src/xeq.c     **** }
 17921              		.loc 1 2521 2 is_stmt 1 view .LVU4665
2521:src/xeq.c     **** }
 17922              		.loc 1 2521 9 is_stmt 0 view .LVU4666
 17923 000e 01A9     		add	r1, sp, #4
 17924 0010 2046     		mov	r0, r4
 17925 0012 FFF7FEFF 		bl	decNumberPow10
 17926              	.LVL1304:
2522:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 492


 17927              		.loc 1 2522 1 view .LVU4667
 17928 0016 0AB0     		add	sp, sp, #40
 17929              		.cfi_def_cfa_offset 8
 17930              		@ sp needed
 17931 0018 10BD     		pop	{r4, pc}
 17932              	.LVL1305:
 17933              	.L1267:
2522:src/xeq.c     **** 
 17934              		.loc 1 2522 1 view .LVU4668
 17935 001a 00BF     		.align	2
 17936              	.L1266:
 17937 001c 00000000 		.word	const_0_05
 17938              		.cfi_endproc
 17939              	.LFE176:
 17941              		.section	.text.convAR2DB,"ax",%progbits
 17942              		.align	1
 17943              		.p2align 2,,3
 17944              		.global	convAR2DB
 17945              		.syntax unified
 17946              		.thumb
 17947              		.thumb_func
 17948              		.fpu fpv4-sp-d16
 17950              	convAR2DB:
 17951              	.LVL1306:
 17952              	.LFB177:
2524:src/xeq.c     **** 	decNumber t;
 17953              		.loc 1 2524 56 is_stmt 1 view -0
 17954              		.cfi_startproc
 17955              		@ args = 0, pretend = 0, frame = 40
 17956              		@ frame_needed = 0, uses_anonymous_args = 0
2525:src/xeq.c     **** 	dn_log10(&t, x);
 17957              		.loc 1 2525 2 view .LVU4670
2526:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17958              		.loc 1 2526 2 view .LVU4671
2524:src/xeq.c     **** 	decNumber t;
 17959              		.loc 1 2524 56 is_stmt 0 view .LVU4672
 17960 0000 10B5     		push	{r4, lr}
 17961              		.cfi_def_cfa_offset 8
 17962              		.cfi_offset 4, -8
 17963              		.cfi_offset 14, -4
 17964 0002 8AB0     		sub	sp, sp, #40
 17965              		.cfi_def_cfa_offset 48
2524:src/xeq.c     **** 	decNumber t;
 17966              		.loc 1 2524 56 view .LVU4673
 17967 0004 0446     		mov	r4, r0
2526:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17968              		.loc 1 2526 2 view .LVU4674
 17969 0006 01A8     		add	r0, sp, #4
 17970              	.LVL1307:
2526:src/xeq.c     **** 	return dn_multiply(r, &t, &const_20);
 17971              		.loc 1 2526 2 view .LVU4675
 17972 0008 FFF7FEFF 		bl	dn_log10
 17973              	.LVL1308:
2527:src/xeq.c     **** }
 17974              		.loc 1 2527 2 is_stmt 1 view .LVU4676
2527:src/xeq.c     **** }
 17975              		.loc 1 2527 9 is_stmt 0 view .LVU4677
ARM GAS  /tmp/cc7LeJ71.s 			page 493


 17976 000c 034A     		ldr	r2, .L1270
 17977 000e 2046     		mov	r0, r4
 17978 0010 01A9     		add	r1, sp, #4
 17979 0012 FFF7FEFF 		bl	dn_multiply
 17980              	.LVL1309:
2528:src/xeq.c     **** 
 17981              		.loc 1 2528 1 view .LVU4678
 17982 0016 0AB0     		add	sp, sp, #40
 17983              		.cfi_def_cfa_offset 8
 17984              		@ sp needed
 17985 0018 10BD     		pop	{r4, pc}
 17986              	.LVL1310:
 17987              	.L1271:
2528:src/xeq.c     **** 
 17988              		.loc 1 2528 1 view .LVU4679
 17989 001a 00BF     		.align	2
 17990              	.L1270:
 17991 001c 00000000 		.word	const_20
 17992              		.cfi_endproc
 17993              	.LFE177:
 17995              		.section	.text.convDB2PR,"ax",%progbits
 17996              		.align	1
 17997              		.p2align 2,,3
 17998              		.global	convDB2PR
 17999              		.syntax unified
 18000              		.thumb
 18001              		.thumb_func
 18002              		.fpu fpv4-sp-d16
 18004              	convDB2PR:
 18005              	.LVL1311:
 18006              	.LFB178:
2530:src/xeq.c     **** 	decNumber t;
 18007              		.loc 1 2530 56 is_stmt 1 view -0
 18008              		.cfi_startproc
 18009              		@ args = 0, pretend = 0, frame = 40
 18010              		@ frame_needed = 0, uses_anonymous_args = 0
2531:src/xeq.c     **** 	dn_mulpow10(&t, x, -1);
 18011              		.loc 1 2531 2 view .LVU4681
2532:src/xeq.c     **** 	return decNumberPow10(r, &t);
 18012              		.loc 1 2532 2 view .LVU4682
2530:src/xeq.c     **** 	decNumber t;
 18013              		.loc 1 2530 56 is_stmt 0 view .LVU4683
 18014 0000 10B5     		push	{r4, lr}
 18015              		.cfi_def_cfa_offset 8
 18016              		.cfi_offset 4, -8
 18017              		.cfi_offset 14, -4
 18018 0002 8AB0     		sub	sp, sp, #40
 18019              		.cfi_def_cfa_offset 48
2530:src/xeq.c     **** 	decNumber t;
 18020              		.loc 1 2530 56 view .LVU4684
 18021 0004 0446     		mov	r4, r0
2532:src/xeq.c     **** 	return decNumberPow10(r, &t);
 18022              		.loc 1 2532 2 view .LVU4685
 18023 0006 4FF0FF32 		mov	r2, #-1
 18024 000a 01A8     		add	r0, sp, #4
 18025              	.LVL1312:
2532:src/xeq.c     **** 	return decNumberPow10(r, &t);
ARM GAS  /tmp/cc7LeJ71.s 			page 494


 18026              		.loc 1 2532 2 view .LVU4686
 18027 000c FFF7FEFF 		bl	dn_mulpow10
 18028              	.LVL1313:
2533:src/xeq.c     **** }
 18029              		.loc 1 2533 2 is_stmt 1 view .LVU4687
2533:src/xeq.c     **** }
 18030              		.loc 1 2533 9 is_stmt 0 view .LVU4688
 18031 0010 01A9     		add	r1, sp, #4
 18032 0012 2046     		mov	r0, r4
 18033 0014 FFF7FEFF 		bl	decNumberPow10
 18034              	.LVL1314:
2534:src/xeq.c     **** 
 18035              		.loc 1 2534 1 view .LVU4689
 18036 0018 0AB0     		add	sp, sp, #40
 18037              		.cfi_def_cfa_offset 8
 18038              		@ sp needed
 18039 001a 10BD     		pop	{r4, pc}
2534:src/xeq.c     **** 
 18040              		.loc 1 2534 1 view .LVU4690
 18041              		.cfi_endproc
 18042              	.LFE178:
 18044              		.section	.text.convPR2DB,"ax",%progbits
 18045              		.align	1
 18046              		.p2align 2,,3
 18047              		.global	convPR2DB
 18048              		.syntax unified
 18049              		.thumb
 18050              		.thumb_func
 18051              		.fpu fpv4-sp-d16
 18053              	convPR2DB:
 18054              	.LVL1315:
 18055              	.LFB179:
2536:src/xeq.c     **** 	decNumber t;
 18056              		.loc 1 2536 56 is_stmt 1 view -0
 18057              		.cfi_startproc
 18058              		@ args = 0, pretend = 0, frame = 40
 18059              		@ frame_needed = 0, uses_anonymous_args = 0
2537:src/xeq.c     **** 	dn_log10(&t, x);
 18060              		.loc 1 2537 2 view .LVU4692
2538:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18061              		.loc 1 2538 2 view .LVU4693
2536:src/xeq.c     **** 	decNumber t;
 18062              		.loc 1 2536 56 is_stmt 0 view .LVU4694
 18063 0000 10B5     		push	{r4, lr}
 18064              		.cfi_def_cfa_offset 8
 18065              		.cfi_offset 4, -8
 18066              		.cfi_offset 14, -4
 18067 0002 8AB0     		sub	sp, sp, #40
 18068              		.cfi_def_cfa_offset 48
2536:src/xeq.c     **** 	decNumber t;
 18069              		.loc 1 2536 56 view .LVU4695
 18070 0004 0446     		mov	r4, r0
2538:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
 18071              		.loc 1 2538 2 view .LVU4696
 18072 0006 01A8     		add	r0, sp, #4
 18073              	.LVL1316:
2538:src/xeq.c     **** 	return dn_mulpow10(r, &t, 1);
ARM GAS  /tmp/cc7LeJ71.s 			page 495


 18074              		.loc 1 2538 2 view .LVU4697
 18075 0008 FFF7FEFF 		bl	dn_log10
 18076              	.LVL1317:
2539:src/xeq.c     **** }
 18077              		.loc 1 2539 2 is_stmt 1 view .LVU4698
2539:src/xeq.c     **** }
 18078              		.loc 1 2539 9 is_stmt 0 view .LVU4699
 18079 000c 2046     		mov	r0, r4
 18080 000e 01A9     		add	r1, sp, #4
 18081 0010 0122     		movs	r2, #1
 18082 0012 FFF7FEFF 		bl	dn_mulpow10
 18083              	.LVL1318:
2540:src/xeq.c     **** 
 18084              		.loc 1 2540 1 view .LVU4700
 18085 0016 0AB0     		add	sp, sp, #40
 18086              		.cfi_def_cfa_offset 8
 18087              		@ sp needed
 18088 0018 10BD     		pop	{r4, pc}
2540:src/xeq.c     **** 
 18089              		.loc 1 2540 1 view .LVU4701
 18090              		.cfi_endproc
 18091              	.LFE179:
 18093 001a 00BF     		.section	.text.do_conv,"ax",%progbits
 18094              		.align	1
 18095              		.p2align 2,,3
 18096              		.global	do_conv
 18097              		.syntax unified
 18098              		.thumb
 18099              		.thumb_func
 18100              		.fpu fpv4-sp-d16
 18102              	do_conv:
 18103              	.LVL1319:
 18104              	.LFB180:
2543:src/xeq.c     **** 	decNumber m;
 18105              		.loc 1 2543 66 is_stmt 1 view -0
 18106              		.cfi_startproc
 18107              		@ args = 0, pretend = 0, frame = 40
 18108              		@ frame_needed = 0, uses_anonymous_args = 0
2544:src/xeq.c     **** 	const unsigned int conv = arg / 2;
 18109              		.loc 1 2544 2 view .LVU4703
2545:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18110              		.loc 1 2545 2 view .LVU4704
2546:src/xeq.c     **** 
 18111              		.loc 1 2546 2 view .LVU4705
2548:src/xeq.c     **** 		decNumberCopy(r, x);
 18112              		.loc 1 2548 2 view .LVU4706
2543:src/xeq.c     **** 	decNumber m;
 18113              		.loc 1 2543 66 is_stmt 0 view .LVU4707
 18114 0000 70B5     		push	{r4, r5, r6, lr}
 18115              		.cfi_def_cfa_offset 16
 18116              		.cfi_offset 4, -16
 18117              		.cfi_offset 5, -12
 18118              		.cfi_offset 6, -8
 18119              		.cfi_offset 14, -4
2548:src/xeq.c     **** 		decNumberCopy(r, x);
 18120              		.loc 1 2548 5 view .LVU4708
 18121 0002 4D29     		cmp	r1, #77
ARM GAS  /tmp/cc7LeJ71.s 			page 496


2543:src/xeq.c     **** 	decNumber m;
 18122              		.loc 1 2543 66 view .LVU4709
 18123 0004 8AB0     		sub	sp, sp, #40
 18124              		.cfi_def_cfa_offset 56
2543:src/xeq.c     **** 	decNumber m;
 18125              		.loc 1 2543 66 view .LVU4710
 18126 0006 1546     		mov	r5, r2
2548:src/xeq.c     **** 		decNumberCopy(r, x);
 18127              		.loc 1 2548 5 view .LVU4711
 18128 0008 15D8     		bhi	.L1282
2553:src/xeq.c     **** 
 18129              		.loc 1 2553 2 is_stmt 1 view .LVU4712
 18130 000a 0D4B     		ldr	r3, .L1284
 18131 000c 0646     		mov	r6, r0
2545:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18132              		.loc 1 2545 21 is_stmt 0 view .LVU4713
 18133 000e 4808     		lsrs	r0, r1, #1
 18134              	.LVL1320:
2545:src/xeq.c     **** 	const unsigned int dirn = arg & 1;
 18135              		.loc 1 2545 21 view .LVU4714
 18136 0010 0C46     		mov	r4, r1
2553:src/xeq.c     **** 
 18137              		.loc 1 2553 2 view .LVU4715
 18138 0012 03EB0010 		add	r0, r3, r0, lsl #4
 18139 0016 01A9     		add	r1, sp, #4
 18140              	.LVL1321:
2553:src/xeq.c     **** 
 18141              		.loc 1 2553 2 view .LVU4716
 18142 0018 FFF7FEFF 		bl	decimal64ToNumber
 18143              	.LVL1322:
2555:src/xeq.c     **** 		dn_divide(r, x, &m);
 18144              		.loc 1 2555 2 is_stmt 1 view .LVU4717
2555:src/xeq.c     **** 		dn_divide(r, x, &m);
 18145              		.loc 1 2555 5 is_stmt 0 view .LVU4718
 18146 001c E307     		lsls	r3, r4, #31
2556:src/xeq.c     **** 	else			// imperial to metric
 18147              		.loc 1 2556 3 view .LVU4719
 18148 001e 01AA     		add	r2, sp, #4
 18149 0020 2946     		mov	r1, r5
 18150 0022 3046     		mov	r0, r6
2555:src/xeq.c     **** 		dn_divide(r, x, &m);
 18151              		.loc 1 2555 5 view .LVU4720
 18152 0024 03D5     		bpl	.L1283
2558:src/xeq.c     **** }
 18153              		.loc 1 2558 3 is_stmt 1 view .LVU4721
 18154 0026 FFF7FEFF 		bl	dn_multiply
 18155              	.LVL1323:
2559:src/xeq.c     **** 
 18156              		.loc 1 2559 1 is_stmt 0 view .LVU4722
 18157 002a 0AB0     		add	sp, sp, #40
 18158              		.cfi_remember_state
 18159              		.cfi_def_cfa_offset 16
 18160              		@ sp needed
 18161 002c 70BD     		pop	{r4, r5, r6, pc}
 18162              	.LVL1324:
 18163              	.L1283:
 18164              		.cfi_restore_state
ARM GAS  /tmp/cc7LeJ71.s 			page 497


2556:src/xeq.c     **** 	else			// imperial to metric
 18165              		.loc 1 2556 3 is_stmt 1 view .LVU4723
 18166 002e FFF7FEFF 		bl	dn_divide
 18167              	.LVL1325:
2559:src/xeq.c     **** 
 18168              		.loc 1 2559 1 is_stmt 0 view .LVU4724
 18169 0032 0AB0     		add	sp, sp, #40
 18170              		.cfi_remember_state
 18171              		.cfi_def_cfa_offset 16
 18172              		@ sp needed
 18173 0034 70BD     		pop	{r4, r5, r6, pc}
 18174              	.LVL1326:
 18175              	.L1282:
 18176              		.cfi_restore_state
2549:src/xeq.c     **** 		return;
 18177              		.loc 1 2549 3 is_stmt 1 view .LVU4725
 18178 0036 1146     		mov	r1, r2
 18179              	.LVL1327:
2549:src/xeq.c     **** 		return;
 18180              		.loc 1 2549 3 is_stmt 0 view .LVU4726
 18181 0038 FFF7FEFF 		bl	decNumberCopy
 18182              	.LVL1328:
2550:src/xeq.c     **** 	}
 18183              		.loc 1 2550 3 is_stmt 1 view .LVU4727
2559:src/xeq.c     **** 
 18184              		.loc 1 2559 1 is_stmt 0 view .LVU4728
 18185 003c 0AB0     		add	sp, sp, #40
 18186              		.cfi_def_cfa_offset 16
 18187              		@ sp needed
 18188 003e 70BD     		pop	{r4, r5, r6, pc}
 18189              	.LVL1329:
 18190              	.L1285:
2559:src/xeq.c     **** 
 18191              		.loc 1 2559 1 view .LVU4729
 18192              		.align	2
 18193              	.L1284:
 18194 0040 00000000 		.word	cnsts_conv
 18195              		.cfi_endproc
 18196              	.LFE180:
 18198              		.section	.text.cmdconv,"ax",%progbits
 18199              		.align	1
 18200              		.p2align 2,,3
 18201              		.global	cmdconv
 18202              		.syntax unified
 18203              		.thumb
 18204              		.thumb_func
 18205              		.fpu fpv4-sp-d16
 18207              	cmdconv:
 18208              	.LVL1330:
 18209              	.LFB181:
2561:src/xeq.c     **** 	decNumber x, r;
 18210              		.loc 1 2561 46 is_stmt 1 view -0
 18211              		.cfi_startproc
 18212              		@ args = 0, pretend = 0, frame = 72
 18213              		@ frame_needed = 0, uses_anonymous_args = 0
2562:src/xeq.c     **** 
 18214              		.loc 1 2562 2 view .LVU4731
ARM GAS  /tmp/cc7LeJ71.s 			page 498


2564:src/xeq.c     **** 		return;
 18215              		.loc 1 2564 2 view .LVU4732
2564:src/xeq.c     **** 		return;
 18216              		.loc 1 2564 6 is_stmt 0 view .LVU4733
 18217 0000 0E4B     		ldr	r3, .L1294
 18218 0002 1B68     		ldr	r3, [r3]
 18219 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
2564:src/xeq.c     **** 		return;
 18220              		.loc 1 2564 5 view .LVU4734
 18221 0008 DB07     		lsls	r3, r3, #31
 18222 000a 00D5     		bpl	.L1293
 18223 000c 7047     		bx	lr
 18224              	.L1293:
2561:src/xeq.c     **** 	decNumber x, r;
 18225              		.loc 1 2561 46 view .LVU4735
 18226 000e 10B5     		push	{r4, lr}
 18227              		.cfi_def_cfa_offset 8
 18228              		.cfi_offset 4, -8
 18229              		.cfi_offset 14, -4
 18230 0010 92B0     		sub	sp, sp, #72
 18231              		.cfi_def_cfa_offset 80
 18232 0012 0446     		mov	r4, r0
2567:src/xeq.c     **** 	do_conv(&r, arg, &x);
 18233              		.loc 1 2567 2 is_stmt 1 view .LVU4736
 18234              	.LVL1331:
 18235              	.LBB2930:
 18236              	.LBI2930:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 18237              		.loc 1 824 12 view .LVU4737
 18238              	.LBB2931:
 825:src/xeq.c     **** }
 18239              		.loc 1 825 2 view .LVU4738
 825:src/xeq.c     **** }
 18240              		.loc 1 825 9 is_stmt 0 view .LVU4739
 18241 0014 6421     		movs	r1, #100
 18242              	.LVL1332:
 825:src/xeq.c     **** }
 18243              		.loc 1 825 9 view .LVU4740
 18244 0016 6846     		mov	r0, sp
 18245              	.LVL1333:
 825:src/xeq.c     **** }
 18246              		.loc 1 825 9 view .LVU4741
 18247 0018 FFF7FEFF 		bl	getRegister
 18248              	.LVL1334:
 825:src/xeq.c     **** }
 18249              		.loc 1 825 9 view .LVU4742
 18250              	.LBE2931:
 18251              	.LBE2930:
2568:src/xeq.c     **** 	setlastX();
 18252              		.loc 1 2568 2 is_stmt 1 view .LVU4743
 18253 001c 6A46     		mov	r2, sp
 18254 001e 2146     		mov	r1, r4
 18255 0020 09A8     		add	r0, sp, #36
 18256 0022 FFF7FEFF 		bl	do_conv
 18257              	.LVL1335:
2569:src/xeq.c     **** 	setX(&r);
 18258              		.loc 1 2569 2 view .LVU4744
ARM GAS  /tmp/cc7LeJ71.s 			page 499


 18259              	.LBB2932:
 18260              	.LBI2932:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 18261              		.loc 1 792 6 view .LVU4745
 18262              	.LBB2933:
 793:src/xeq.c     **** }
 18263              		.loc 1 793 2 view .LVU4746
 18264 0026 6421     		movs	r1, #100
 18265 0028 6C20     		movs	r0, #108
 18266 002a FFF7FEFF 		bl	copyreg_n
 18267              	.LVL1336:
 18268              	.LBE2933:
 18269              	.LBE2932:
2570:src/xeq.c     **** }
 18270              		.loc 1 2570 2 view .LVU4747
 18271              	.LBB2934:
 18272              	.LBI2934:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 18273              		.loc 1 828 6 view .LVU4748
 18274              	.LBB2935:
 829:src/xeq.c     **** }
 18275              		.loc 1 829 2 view .LVU4749
 18276 002e 09A9     		add	r1, sp, #36
 18277              	.LVL1337:
 829:src/xeq.c     **** }
 18278              		.loc 1 829 2 is_stmt 0 view .LVU4750
 18279 0030 6420     		movs	r0, #100
 18280 0032 FFF7FEFF 		bl	setRegister
 18281              	.LVL1338:
 829:src/xeq.c     **** }
 18282              		.loc 1 829 2 view .LVU4751
 18283              	.LBE2935:
 18284              	.LBE2934:
2571:src/xeq.c     **** 
 18285              		.loc 1 2571 1 view .LVU4752
 18286 0036 12B0     		add	sp, sp, #72
 18287              		.cfi_def_cfa_offset 8
 18288              		@ sp needed
 18289 0038 10BD     		pop	{r4, pc}
 18290              	.LVL1339:
 18291              	.L1295:
2571:src/xeq.c     **** 
 18292              		.loc 1 2571 1 view .LVU4753
 18293 003a 00BF     		.align	2
 18294              	.L1294:
 18295 003c 00000000 		.word	main_ram
 18296              		.cfi_endproc
 18297              	.LFE181:
 18299              		.section	.rodata.fin_tst.str1.4,"aMS",%progbits,1
 18300              		.align	2
 18301              	.LC2:
 18302 0000 66616C73 		.ascii	"false\000"
 18302      6500
 18303 0006 0000     		.align	2
 18304              	.LC3:
 18305 0008 74727565 		.ascii	"true\000"
 18305      00
ARM GAS  /tmp/cc7LeJ71.s 			page 500


 18306              		.section	.text.fin_tst,"ax",%progbits
 18307              		.align	1
 18308              		.p2align 2,,3
 18309              		.global	fin_tst
 18310              		.syntax unified
 18311              		.thumb
 18312              		.thumb_func
 18313              		.fpu fpv4-sp-d16
 18315              	fin_tst:
 18316              	.LVL1340:
 18317              	.LFB182:
2576:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18318              		.loc 1 2576 27 is_stmt 1 view -0
 18319              		.cfi_startproc
 18320              		@ args = 0, pretend = 0, frame = 0
 18321              		@ frame_needed = 0, uses_anonymous_args = 0
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 18322              		.loc 1 2577 2 view .LVU4755
2576:src/xeq.c     **** 	const char *msg = a ? "true" : "false";
 18323              		.loc 1 2576 27 is_stmt 0 view .LVU4756
 18324 0000 10B5     		push	{r4, lr}
 18325              		.cfi_def_cfa_offset 8
 18326              		.cfi_offset 4, -8
 18327              		.cfi_offset 14, -4
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 18328              		.loc 1 2577 31 view .LVU4757
 18329 0002 50B1     		cbz	r0, .L1310
 18330              	.LVL1341:
2578:src/xeq.c     **** 		if (! a && incpc())
 18331              		.loc 1 2578 2 is_stmt 1 view .LVU4758
2578:src/xeq.c     **** 		if (! a && incpc())
 18332              		.loc 1 2578 14 is_stmt 0 view .LVU4759
 18333 0004 124A     		ldr	r2, .L1313
2578:src/xeq.c     **** 		if (! a && incpc())
 18334              		.loc 1 2578 6 view .LVU4760
 18335 0006 134B     		ldr	r3, .L1313+4
2578:src/xeq.c     **** 		if (! a && incpc())
 18336              		.loc 1 2578 14 view .LVU4761
 18337 0008 1268     		ldr	r2, [r2]
 18338 000a 1B68     		ldr	r3, [r3]
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 18339              		.loc 1 2577 31 view .LVU4762
 18340 000c 1248     		ldr	r0, .L1313+8
 18341              	.LVL1342:
2578:src/xeq.c     **** 		if (! a && incpc())
 18342              		.loc 1 2578 14 view .LVU4763
 18343 000e 1343     		orrs	r3, r2, r3
 18344 0010 0AD0     		beq	.L1302
 18345              	.LVL1343:
 18346              	.L1299:
2585:src/xeq.c     **** 		print_justified( msg );
 18347              		.loc 1 2585 2 is_stmt 1 view .LVU4764
2585:src/xeq.c     **** 		print_justified( msg );
 18348              		.loc 1 2585 6 is_stmt 0 view .LVU4765
 18349 0012 124C     		ldr	r4, .L1313+12
2585:src/xeq.c     **** 		print_justified( msg );
 18350              		.loc 1 2585 5 view .LVU4766
ARM GAS  /tmp/cc7LeJ71.s 			page 501


 18351 0014 2368     		ldr	r3, [r4]
 18352 0016 6BB9     		cbnz	r3, .L1311
 18353              	.L1296:
2590:src/xeq.c     **** 
 18354              		.loc 1 2590 1 view .LVU4767
 18355 0018 10BD     		pop	{r4, pc}
 18356              	.LVL1344:
 18357              	.L1310:
2578:src/xeq.c     **** 		if (! a && incpc())
 18358              		.loc 1 2578 2 is_stmt 1 view .LVU4768
2578:src/xeq.c     **** 		if (! a && incpc())
 18359              		.loc 1 2578 14 is_stmt 0 view .LVU4769
 18360 001a 0D4A     		ldr	r2, .L1313
2578:src/xeq.c     **** 		if (! a && incpc())
 18361              		.loc 1 2578 6 view .LVU4770
 18362 001c 0D4B     		ldr	r3, .L1313+4
2578:src/xeq.c     **** 		if (! a && incpc())
 18363              		.loc 1 2578 14 view .LVU4771
 18364 001e 1268     		ldr	r2, [r2]
 18365 0020 1B68     		ldr	r3, [r3]
 18366 0022 1343     		orrs	r3, r2, r3
 18367 0024 0BD1     		bne	.L1301
2577:src/xeq.c     **** 	if (Running || XromRunning) {
 18368              		.loc 1 2577 31 view .LVU4772
 18369 0026 0E48     		ldr	r0, .L1313+16
 18370              	.LVL1345:
 18371              	.L1302:
2583:src/xeq.c     **** #ifdef INFRARED
 18372              		.loc 1 2583 3 is_stmt 1 view .LVU4773
2583:src/xeq.c     **** #ifdef INFRARED
 18373              		.loc 1 2583 11 is_stmt 0 view .LVU4774
 18374 0028 0E4B     		ldr	r3, .L1313+20
2585:src/xeq.c     **** 		print_justified( msg );
 18375              		.loc 1 2585 6 view .LVU4775
 18376 002a 0C4C     		ldr	r4, .L1313+12
2583:src/xeq.c     **** #ifdef INFRARED
 18377              		.loc 1 2583 11 view .LVU4776
 18378 002c 1860     		str	r0, [r3]
2585:src/xeq.c     **** 		print_justified( msg );
 18379              		.loc 1 2585 2 is_stmt 1 view .LVU4777
2585:src/xeq.c     **** 		print_justified( msg );
 18380              		.loc 1 2585 5 is_stmt 0 view .LVU4778
 18381 002e 2368     		ldr	r3, [r4]
 18382 0030 002B     		cmp	r3, #0
 18383 0032 F1D0     		beq	.L1296
 18384              	.L1311:
2586:src/xeq.c     **** 		Tracing = 0;
 18385              		.loc 1 2586 3 is_stmt 1 view .LVU4779
 18386 0034 FFF7FEFF 		bl	print_justified
 18387              	.LVL1346:
2587:src/xeq.c     **** 	}
 18388              		.loc 1 2587 3 view .LVU4780
2587:src/xeq.c     **** 	}
 18389              		.loc 1 2587 11 is_stmt 0 view .LVU4781
 18390 0038 0023     		movs	r3, #0
 18391 003a 2360     		str	r3, [r4]
2590:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 502


 18392              		.loc 1 2590 1 view .LVU4782
 18393 003c 10BD     		pop	{r4, pc}
 18394              	.LVL1347:
 18395              	.L1301:
2579:src/xeq.c     **** 			decpc();
 18396              		.loc 1 2579 14 discriminator 1 view .LVU4783
 18397 003e FFF7FEFF 		bl	incpc
 18398              	.LVL1348:
2579:src/xeq.c     **** 			decpc();
 18399              		.loc 1 2579 11 discriminator 1 view .LVU4784
 18400 0042 08B9     		cbnz	r0, .L1312
 18401 0044 0648     		ldr	r0, .L1313+16
 18402 0046 E4E7     		b	.L1299
 18403              	.L1312:
2580:src/xeq.c     **** 	}
 18404              		.loc 1 2580 4 is_stmt 1 view .LVU4785
 18405 0048 FFF7FEFF 		bl	decpc
 18406              	.LVL1349:
 18407 004c 0448     		ldr	r0, .L1313+16
 18408 004e E0E7     		b	.L1299
 18409              	.L1314:
 18410              		.align	2
 18411              	.L1313:
 18412 0050 00000000 		.word	XromRunning
 18413 0054 00000000 		.word	Running
 18414 0058 08000000 		.word	.LC3
 18415 005c 00000000 		.word	Tracing
 18416 0060 00000000 		.word	.LC2
 18417 0064 00000000 		.word	DispMsg
 18418              		.cfi_endproc
 18419              	.LFE182:
 18421              		.section	.text.check_mode,"ax",%progbits
 18422              		.align	1
 18423              		.p2align 2,,3
 18424              		.global	check_mode
 18425              		.syntax unified
 18426              		.thumb
 18427              		.thumb_func
 18428              		.fpu fpv4-sp-d16
 18430              	check_mode:
 18431              	.LVL1350:
 18432              	.LFB143:
2110:src/xeq.c     **** 	const int intmode = is_intmode() ? 1 : 0;
 18433              		.loc 1 2110 32 view -0
 18434              		.cfi_startproc
 18435              		@ args = 0, pretend = 0, frame = 0
 18436              		@ frame_needed = 0, uses_anonymous_args = 0
 18437              		@ link register save eliminated.
2111:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18438              		.loc 1 2111 2 view .LVU4787
2112:src/xeq.c     **** 
 18439              		.loc 1 2112 2 view .LVU4788
2111:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
 18440              		.loc 1 2111 35 is_stmt 0 view .LVU4789
 18441 0000 084B     		ldr	r3, .L1316
 18442              	.LVL1351:
2111:src/xeq.c     **** 	const int desired = (op == OP_ISINT) ? 1 : 0;
ARM GAS  /tmp/cc7LeJ71.s 			page 503


 18443              		.loc 1 2111 35 view .LVU4790
 18444 0002 1B68     		ldr	r3, [r3]
 18445              	.LVL1352:
2114:src/xeq.c     **** }
 18446              		.loc 1 2114 2 view .LVU4791
 18447 0004 A0F19F00 		sub	r0, #159
 18448              	.LVL1353:
2114:src/xeq.c     **** }
 18449              		.loc 1 2114 2 view .LVU4792
 18450 0008 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 18451              	.LVL1354:
2114:src/xeq.c     **** }
 18452              		.loc 1 2114 2 is_stmt 1 view .LVU4793
 18453 000c B0FA80F0 		clz	r0, r0
 18454 0010 4009     		lsrs	r0, r0, #5
 18455 0012 03F00103 		and	r3, r3, #1
 18456 0016 C01A     		subs	r0, r0, r3
 18457 0018 B0FA80F0 		clz	r0, r0
 18458 001c 4009     		lsrs	r0, r0, #5
 18459 001e FFF7FEBF 		b	fin_tst
 18460              	.LVL1355:
 18461              	.L1317:
2114:src/xeq.c     **** }
 18462              		.loc 1 2114 2 is_stmt 0 view .LVU4794
 18463 0022 00BF     		.align	2
 18464              	.L1316:
 18465 0024 00000000 		.word	main_ram
 18466              		.cfi_endproc
 18467              	.LFE143:
 18469              		.section	.text.check_dblmode,"ax",%progbits
 18470              		.align	1
 18471              		.p2align 2,,3
 18472              		.global	check_dblmode
 18473              		.syntax unified
 18474              		.thumb
 18475              		.thumb_func
 18476              		.fpu fpv4-sp-d16
 18478              	check_dblmode:
 18479              	.LVL1356:
 18480              	.LFB144:
2120:src/xeq.c     **** 	fin_tst(is_dblmode());
 18481              		.loc 1 2120 35 is_stmt 1 view -0
 18482              		.cfi_startproc
 18483              		@ args = 0, pretend = 0, frame = 0
 18484              		@ frame_needed = 0, uses_anonymous_args = 0
 18485              		@ link register save eliminated.
2121:src/xeq.c     **** }
 18486              		.loc 1 2121 2 view .LVU4796
 18487              	.LBB2936:
 18488              	.LBI2936:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 18489              		.loc 1 1118 5 view .LVU4797
 18490              	.LBB2937:
1119:src/xeq.c     **** }
 18491              		.loc 1 1119 2 view .LVU4798
1119:src/xeq.c     **** }
 18492              		.loc 1 1119 24 is_stmt 0 view .LVU4799
ARM GAS  /tmp/cc7LeJ71.s 			page 504


 18493 0000 064B     		ldr	r3, .L1319
 18494 0002 1B68     		ldr	r3, [r3]
 18495 0004 B3F8E837 		ldrh	r3, [r3, #2024]
 18496 0008 44F20100 		movw	r0, #16385
 18497              	.LVL1357:
1119:src/xeq.c     **** }
 18498              		.loc 1 1119 24 view .LVU4800
 18499 000c 1840     		ands	r0, r0, r3
 18500              	.LBE2937:
 18501              	.LBE2936:
2121:src/xeq.c     **** }
 18502              		.loc 1 2121 2 view .LVU4801
 18503 000e A0F58040 		sub	r0, r0, #16384
 18504 0012 B0FA80F0 		clz	r0, r0
 18505 0016 4009     		lsrs	r0, r0, #5
 18506 0018 FFF7FEBF 		b	fin_tst
 18507              	.LVL1358:
 18508              	.L1320:
 18509              		.align	2
 18510              	.L1319:
 18511 001c 00000000 		.word	main_ram
 18512              		.cfi_endproc
 18513              	.LFE144:
 18515              		.section	.text.op_query_xtal,"ax",%progbits
 18516              		.align	1
 18517              		.p2align 2,,3
 18518              		.global	op_query_xtal
 18519              		.syntax unified
 18520              		.thumb
 18521              		.thumb_func
 18522              		.fpu fpv4-sp-d16
 18524              	op_query_xtal:
 18525              	.LVL1359:
 18526              	.LFB145:
2124:src/xeq.c     **** 	fin_tst(Xtal);
 18527              		.loc 1 2124 35 is_stmt 1 view -0
 18528              		.cfi_startproc
 18529              		@ args = 0, pretend = 0, frame = 0
 18530              		@ frame_needed = 0, uses_anonymous_args = 0
 18531              		@ link register save eliminated.
2125:src/xeq.c     **** }
 18532              		.loc 1 2125 2 view .LVU4803
 18533 0000 0120     		movs	r0, #1
 18534              	.LVL1360:
2125:src/xeq.c     **** }
 18535              		.loc 1 2125 2 is_stmt 0 view .LVU4804
 18536 0002 FFF7FEBF 		b	fin_tst
 18537              	.LVL1361:
 18538              		.cfi_endproc
 18539              	.LFE145:
 18541 0006 00BF     		.section	.text.isTop,"ax",%progbits
 18542              		.align	1
 18543              		.p2align 2,,3
 18544              		.global	isTop
 18545              		.syntax unified
 18546              		.thumb
 18547              		.thumb_func
ARM GAS  /tmp/cc7LeJ71.s 			page 505


 18548              		.fpu fpv4-sp-d16
 18550              	isTop:
 18551              	.LVL1362:
 18552              	.LFB160:
2328:src/xeq.c     **** 	int top = 0;
 18553              		.loc 1 2328 27 is_stmt 1 view -0
 18554              		.cfi_startproc
 18555              		@ args = 0, pretend = 0, frame = 0
 18556              		@ frame_needed = 0, uses_anonymous_args = 0
 18557              		@ link register save eliminated.
2329:src/xeq.c     **** 
 18558              		.loc 1 2329 2 view .LVU4806
2331:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18559              		.loc 1 2331 2 view .LVU4807
2331:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18560              		.loc 1 2331 6 is_stmt 0 view .LVU4808
 18561 0000 0E4B     		ldr	r3, .L1330
 18562 0002 1868     		ldr	r0, [r3]
 18563              	.LVL1363:
2331:src/xeq.c     **** 		top = RetStkPtr >= -1 - local_levels();
 18564              		.loc 1 2331 5 view .LVU4809
 18565 0004 78B1     		cbz	r0, .L1323
2332:src/xeq.c     **** 	}
 18566              		.loc 1 2332 3 is_stmt 1 view .LVU4810
2332:src/xeq.c     **** 	}
 18567              		.loc 1 2332 9 is_stmt 0 view .LVU4811
 18568 0006 0E4B     		ldr	r3, .L1330+4
 18569 0008 1A68     		ldr	r2, [r3]
 18570              	.LBB2938:
 18571              	.LBB2939:
 218:src/xeq.c     **** }
 18572              		.loc 1 218 9 view .LVU4812
 18573 000a B2F8DE37 		ldrh	r3, [r2, #2014]
 18574              	.LBE2939:
 18575              	.LBE2938:
2332:src/xeq.c     **** 	}
 18576              		.loc 1 2332 9 view .LVU4813
 18577 000e B2F9E207 		ldrsh	r0, [r2, #2018]
 18578              	.LBB2942:
 18579              	.LBI2938:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 18580              		.loc 1 217 5 is_stmt 1 view .LVU4814
 18581              	.LBB2940:
 218:src/xeq.c     **** }
 18582              		.loc 1 218 2 view .LVU4815
 218:src/xeq.c     **** }
 18583              		.loc 1 218 9 is_stmt 0 view .LVU4816
 18584 0012 43F34A13 		sbfx	r3, r3, #5, #11
 218:src/xeq.c     **** }
 18585              		.loc 1 218 57 view .LVU4817
 18586 0016 002B     		cmp	r3, #0
 18587 0018 07DB     		blt	.L1329
 18588 001a 4FF0FF33 		mov	r3, #-1
 18589              	.L1324:
 18590              	.LBE2940:
 18591              	.LBE2942:
2332:src/xeq.c     **** 	}
ARM GAS  /tmp/cc7LeJ71.s 			page 506


 18592              		.loc 1 2332 19 view .LVU4818
 18593 001e 9842     		cmp	r0, r3
 18594 0020 B4BF     		ite	lt
 18595 0022 0020     		movlt	r0, #0
 18596 0024 0120     		movge	r0, #1
 18597              	.LVL1364:
 18598              	.L1323:
2334:src/xeq.c     **** }
 18599              		.loc 1 2334 2 is_stmt 1 view .LVU4819
 18600 0026 FFF7FEBF 		b	fin_tst
 18601              	.LVL1365:
 18602              	.L1329:
 18603              	.LBB2943:
 18604              	.LBB2941:
 218:src/xeq.c     **** }
 18605              		.loc 1 218 25 is_stmt 0 view .LVU4820
 18606 002a 064A     		ldr	r2, .L1330+8
 18607 002c 1268     		ldr	r2, [r2]
 218:src/xeq.c     **** }
 18608              		.loc 1 218 57 view .LVU4821
 18609 002e 32F81330 		ldrh	r3, [r2, r3, lsl #1]
 18610 0032 C3F30B03 		ubfx	r3, r3, #0, #12
 18611 0036 DB43     		mvns	r3, r3
 18612 0038 F1E7     		b	.L1324
 18613              	.L1331:
 18614 003a 00BF     		.align	2
 18615              	.L1330:
 18616 003c 00000000 		.word	Running
 18617 0040 00000000 		.word	main_ram
 18618 0044 00000000 		.word	RetStk
 18619              	.LBE2941:
 18620              	.LBE2943:
 18621              		.cfi_endproc
 18622              	.LFE160:
 18624              		.section	.text.cmdlblp,"ax",%progbits
 18625              		.align	1
 18626              		.p2align 2,,3
 18627              		.global	cmdlblp
 18628              		.syntax unified
 18629              		.thumb
 18630              		.thumb_func
 18631              		.fpu fpv4-sp-d16
 18633              	cmdlblp:
 18634              	.LVL1366:
 18635              	.LFB161:
2339:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18636              		.loc 1 2339 46 is_stmt 1 view -0
 18637              		.cfi_startproc
 18638              		@ args = 0, pretend = 0, frame = 0
 18639              		@ frame_needed = 0, uses_anonymous_args = 0
2340:src/xeq.c     **** }
 18640              		.loc 1 2340 2 view .LVU4823
2339:src/xeq.c     **** 	fin_tst(find_label_from(state_pc(), arg, FIND_OP_ENDS) != 0);
 18641              		.loc 1 2339 46 is_stmt 0 view .LVU4824
 18642 0000 08B5     		push	{r3, lr}
 18643              		.cfi_def_cfa_offset 8
 18644              		.cfi_offset 3, -8
ARM GAS  /tmp/cc7LeJ71.s 			page 507


 18645              		.cfi_offset 14, -4
2340:src/xeq.c     **** }
 18646              		.loc 1 2340 26 view .LVU4825
 18647 0002 084B     		ldr	r3, .L1334
 18648              	.LVL1367:
2340:src/xeq.c     **** }
 18649              		.loc 1 2340 26 view .LVU4826
 18650 0004 1B68     		ldr	r3, [r3]
 18651              	.LVL1368:
 18652              	.LBB2944:
 18653              	.LBI2944:
2214:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 18654              		.loc 1 2214 14 is_stmt 1 view .LVU4827
 18655              	.LBB2945:
2215:src/xeq.c     **** }
 18656              		.loc 1 2215 2 view .LVU4828
2215:src/xeq.c     **** }
 18657              		.loc 1 2215 9 is_stmt 0 view .LVU4829
 18658 0006 40F4C441 		orr	r1, r0, #25088
 18659              	.LVL1369:
2215:src/xeq.c     **** }
 18660              		.loc 1 2215 9 view .LVU4830
 18661 000a 0222     		movs	r2, #2
 18662 000c B3F8E007 		ldrh	r0, [r3, #2016]
 18663              	.LVL1370:
2215:src/xeq.c     **** }
 18664              		.loc 1 2215 9 view .LVU4831
 18665 0010 FFF7FEFF 		bl	find_opcode_from
 18666              	.LVL1371:
2215:src/xeq.c     **** }
 18667              		.loc 1 2215 9 view .LVU4832
 18668              	.LBE2945:
 18669              	.LBE2944:
2340:src/xeq.c     **** }
 18670              		.loc 1 2340 2 view .LVU4833
 18671 0014 0038     		subs	r0, r0, #0
2341:src/xeq.c     **** 
 18672              		.loc 1 2341 1 view .LVU4834
 18673 0016 BDE80840 		pop	{r3, lr}
 18674              		.cfi_restore 14
 18675              		.cfi_restore 3
 18676              		.cfi_def_cfa_offset 0
2340:src/xeq.c     **** }
 18677              		.loc 1 2340 2 view .LVU4835
 18678 001a 18BF     		it	ne
 18679 001c 0120     		movne	r0, #1
 18680 001e FFF7FEBF 		b	fin_tst
 18681              	.LVL1372:
 18682              	.L1335:
 18683 0022 00BF     		.align	2
 18684              	.L1334:
 18685 0024 00000000 		.word	main_ram
 18686              		.cfi_endproc
 18687              	.LFE161:
 18689              		.section	.text.cmdmultilblp,"ax",%progbits
 18690              		.align	1
 18691              		.p2align 2,,3
ARM GAS  /tmp/cc7LeJ71.s 			page 508


 18692              		.global	cmdmultilblp
 18693              		.syntax unified
 18694              		.thumb
 18695              		.thumb_func
 18696              		.fpu fpv4-sp-d16
 18698              	cmdmultilblp:
 18699              	.LVL1373:
 18700              	.LFB164:
2368:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18701              		.loc 1 2368 55 is_stmt 1 view -0
 18702              		.cfi_startproc
 18703              		@ args = 0, pretend = 0, frame = 0
 18704              		@ frame_needed = 0, uses_anonymous_args = 0
2369:src/xeq.c     **** }
 18705              		.loc 1 2369 2 view .LVU4837
2368:src/xeq.c     **** 	fin_tst(findmultilbl(o, 0) != 0);
 18706              		.loc 1 2368 55 is_stmt 0 view .LVU4838
 18707 0000 08B5     		push	{r3, lr}
 18708              		.cfi_def_cfa_offset 8
 18709              		.cfi_offset 3, -8
 18710              		.cfi_offset 14, -4
2369:src/xeq.c     **** }
 18711              		.loc 1 2369 10 view .LVU4839
 18712 0002 0021     		movs	r1, #0
 18713              	.LVL1374:
2369:src/xeq.c     **** }
 18714              		.loc 1 2369 10 view .LVU4840
 18715 0004 FFF7FEFF 		bl	findmultilbl
 18716              	.LVL1375:
2369:src/xeq.c     **** }
 18717              		.loc 1 2369 2 view .LVU4841
 18718 0008 0038     		subs	r0, r0, #0
2370:src/xeq.c     **** 
 18719              		.loc 1 2370 1 view .LVU4842
 18720 000a BDE80840 		pop	{r3, lr}
 18721              		.cfi_restore 14
 18722              		.cfi_restore 3
 18723              		.cfi_def_cfa_offset 0
2369:src/xeq.c     **** }
 18724              		.loc 1 2369 2 view .LVU4843
 18725 000e 18BF     		it	ne
 18726 0010 0120     		movne	r0, #1
 18727 0012 FFF7FEBF 		b	fin_tst
 18728              	.LVL1376:
 18729              		.cfi_endproc
 18730              	.LFE164:
 18732 0016 00BF     		.section	.text.cmdkeyp,"ax",%progbits
 18733              		.align	1
 18734              		.p2align 2,,3
 18735              		.global	cmdkeyp
 18736              		.syntax unified
 18737              		.thumb
 18738              		.thumb_func
 18739              		.fpu fpv4-sp-d16
 18741              	cmdkeyp:
 18742              	.LVL1377:
 18743              	.LFB139:
ARM GAS  /tmp/cc7LeJ71.s 			page 509


2046:src/xeq.c     **** 	int cond = LastKey == 0;
 18744              		.loc 1 2046 46 is_stmt 1 view -0
 18745              		.cfi_startproc
 18746              		@ args = 0, pretend = 0, frame = 0
 18747              		@ frame_needed = 0, uses_anonymous_args = 0
2047:src/xeq.c     **** 	if (!cond) {
 18748              		.loc 1 2047 2 view .LVU4845
2046:src/xeq.c     **** 	int cond = LastKey == 0;
 18749              		.loc 1 2046 46 is_stmt 0 view .LVU4846
 18750 0000 70B5     		push	{r4, r5, r6, lr}
 18751              		.cfi_def_cfa_offset 16
 18752              		.cfi_offset 4, -16
 18753              		.cfi_offset 5, -12
 18754              		.cfi_offset 6, -8
 18755              		.cfi_offset 14, -4
2047:src/xeq.c     **** 	if (!cond) {
 18756              		.loc 1 2047 13 view .LVU4847
 18757 0002 104B     		ldr	r3, .L1345
 18758 0004 93F91320 		ldrsb	r2, [r3, #19]
2047:src/xeq.c     **** 	if (!cond) {
 18759              		.loc 1 2047 21 view .LVU4848
 18760 0008 002A     		cmp	r2, #0
2046:src/xeq.c     **** 	int cond = LastKey == 0;
 18761              		.loc 1 2046 46 view .LVU4849
 18762 000a 82B0     		sub	sp, sp, #8
 18763              		.cfi_def_cfa_offset 24
2047:src/xeq.c     **** 	if (!cond) {
 18764              		.loc 1 2047 21 view .LVU4850
 18765 000c 0CBF     		ite	eq
 18766 000e 0125     		moveq	r5, #1
 18767 0010 0025     		movne	r5, #0
 18768              	.LVL1378:
2048:src/xeq.c     **** 		int k = LastKey - 1;
 18769              		.loc 1 2048 2 is_stmt 1 view .LVU4851
2048:src/xeq.c     **** 		int k = LastKey - 1;
 18770              		.loc 1 2048 5 is_stmt 0 view .LVU4852
 18771 0012 05D1     		bne	.L1344
2053:src/xeq.c     **** }
 18772              		.loc 1 2053 2 is_stmt 1 view .LVU4853
 18773 0014 2846     		mov	r0, r5
 18774              	.LVL1379:
2054:src/xeq.c     **** 
 18775              		.loc 1 2054 1 is_stmt 0 view .LVU4854
 18776 0016 02B0     		add	sp, sp, #8
 18777              		.cfi_remember_state
 18778              		.cfi_def_cfa_offset 16
 18779              		@ sp needed
 18780 0018 BDE87040 		pop	{r4, r5, r6, lr}
 18781              		.cfi_restore 14
 18782              		.cfi_restore 6
 18783              		.cfi_restore 5
 18784              		.cfi_restore 4
 18785              		.cfi_def_cfa_offset 0
 18786              	.LVL1380:
2053:src/xeq.c     **** }
 18787              		.loc 1 2053 2 view .LVU4855
 18788 001c FFF7FEBF 		b	fin_tst
ARM GAS  /tmp/cc7LeJ71.s 			page 510


 18789              	.LVL1381:
 18790              	.L1344:
 18791              		.cfi_restore_state
 18792              	.LBB2946:
2049:src/xeq.c     **** 		LastKey = 0;
 18793              		.loc 1 2049 3 is_stmt 1 view .LVU4856
2050:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18794              		.loc 1 2050 3 view .LVU4857
 18795 0020 0446     		mov	r4, r0
2050:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18796              		.loc 1 2050 11 is_stmt 0 view .LVU4858
 18797 0022 0026     		movs	r6, #0
2051:src/xeq.c     **** 	}
 18798              		.loc 1 2051 26 view .LVU4859
 18799 0024 501E     		subs	r0, r2, #1
 18800              	.LVL1382:
2050:src/xeq.c     **** 		set_reg_n_int_sgn(arg, keycode_to_row_column(k), 0);
 18801              		.loc 1 2050 11 view .LVU4860
 18802 0026 DE74     		strb	r6, [r3, #19]
2051:src/xeq.c     **** 	}
 18803              		.loc 1 2051 3 is_stmt 1 view .LVU4861
2051:src/xeq.c     **** 	}
 18804              		.loc 1 2051 26 is_stmt 0 view .LVU4862
 18805 0028 FFF7FEFF 		bl	keycode_to_row_column
 18806              	.LVL1383:
2051:src/xeq.c     **** 	}
 18807              		.loc 1 2051 26 view .LVU4863
 18808 002c 0246     		mov	r2, r0
2051:src/xeq.c     **** 	}
 18809              		.loc 1 2051 3 view .LVU4864
 18810 002e 0096     		str	r6, [sp]
 18811 0030 2046     		mov	r0, r4
 18812 0032 D317     		asrs	r3, r2, #31
 18813 0034 FFF7FEFF 		bl	set_reg_n_int_sgn
 18814              	.LVL1384:
 18815              	.LBE2946:
2053:src/xeq.c     **** }
 18816              		.loc 1 2053 2 is_stmt 1 view .LVU4865
 18817 0038 2846     		mov	r0, r5
2054:src/xeq.c     **** 
 18818              		.loc 1 2054 1 is_stmt 0 view .LVU4866
 18819 003a 02B0     		add	sp, sp, #8
 18820              		.cfi_def_cfa_offset 16
 18821              		@ sp needed
 18822 003c BDE87040 		pop	{r4, r5, r6, lr}
 18823              		.cfi_restore 14
 18824              		.cfi_restore 6
 18825              		.cfi_restore 5
 18826              		.cfi_restore 4
 18827              		.cfi_def_cfa_offset 0
 18828              	.LVL1385:
2053:src/xeq.c     **** }
 18829              		.loc 1 2053 2 view .LVU4867
 18830 0040 FFF7FEBF 		b	fin_tst
 18831              	.LVL1386:
 18832              	.L1346:
2053:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 511


 18833              		.loc 1 2053 2 view .LVU4868
 18834              		.align	2
 18835              	.L1345:
 18836 0044 00000000 		.word	StateWhileOn
 18837              		.cfi_endproc
 18838              	.LFE139:
 18840              		.section	.text.do_tst,"ax",%progbits
 18841              		.align	1
 18842              		.p2align 2,,3
 18843              		.syntax unified
 18844              		.thumb
 18845              		.thumb_func
 18846              		.fpu fpv4-sp-d16
 18848              	do_tst:
 18849              	.LVL1387:
 18850              	.LFB188:
3291:src/xeq.c     **** 	int a = 0;
 18851              		.loc 1 3291 51 is_stmt 1 view -0
 18852              		.cfi_startproc
 18853              		@ args = 0, pretend = 0, frame = 112
 18854              		@ frame_needed = 0, uses_anonymous_args = 0
3292:src/xeq.c     **** 	int iszero, isneg;
 18855              		.loc 1 3292 2 view .LVU4870
3293:src/xeq.c     **** 
 18856              		.loc 1 3293 2 view .LVU4871
3295:src/xeq.c     **** 
 18857              		.loc 1 3295 2 view .LVU4872
 18858              	.LBB2947:
 18859              	.LBI2947:
1332:src/xeq.c     **** 	process_cmdline();
 18860              		.loc 1 1332 6 view .LVU4873
 18861              	.LBE2947:
1333:src/xeq.c     **** 	set_lift();
 18862              		.loc 1 1333 2 view .LVU4874
 18863              	.LBB2962:
 18864              	.LBB2948:
 18865              	.LBI2948:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 18866              		.loc 1 1226 6 view .LVU4875
 18867              	.LBB2949:
1227:src/xeq.c     **** 
 18868              		.loc 1 1227 2 view .LVU4876
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18869              		.loc 1 1229 2 view .LVU4877
 18870              	.LBE2949:
 18871              	.LBE2948:
 18872              	.LBE2962:
3291:src/xeq.c     **** 	int a = 0;
 18873              		.loc 1 3291 51 is_stmt 0 view .LVU4878
 18874 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 18875              		.cfi_def_cfa_offset 28
 18876              		.cfi_offset 4, -28
 18877              		.cfi_offset 5, -24
 18878              		.cfi_offset 6, -20
 18879              		.cfi_offset 7, -16
 18880              		.cfi_offset 8, -12
 18881              		.cfi_offset 9, -8
ARM GAS  /tmp/cc7LeJ71.s 			page 512


 18882              		.cfi_offset 14, -4
 18883              	.LBB2963:
 18884              	.LBB2953:
 18885              	.LBB2950:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18886              		.loc 1 1229 6 view .LVU4879
 18887 0004 584D     		ldr	r5, .L1382
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18888              		.loc 1 1229 5 view .LVU4880
 18889 0006 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 18890              	.LBE2950:
 18891              	.LBE2953:
 18892              	.LBE2963:
3291:src/xeq.c     **** 	int a = 0;
 18893              		.loc 1 3291 51 view .LVU4881
 18894 0008 9DB0     		sub	sp, sp, #116
 18895              		.cfi_def_cfa_offset 144
3291:src/xeq.c     **** 	int a = 0;
 18896              		.loc 1 3291 51 view .LVU4882
 18897 000a 8046     		mov	r8, r0
 18898 000c 0C46     		mov	r4, r1
 18899              	.LBB2964:
 18900              	.LBB2954:
 18901              	.LBB2951:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18902              		.loc 1 1229 5 view .LVU4883
 18903 000e 002B     		cmp	r3, #0
 18904 0010 5DD1     		bne	.L1380
 18905              	.LVL1388:
 18906              	.L1348:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 18907              		.loc 1 1229 5 view .LVU4884
 18908              	.LBE2951:
 18909              	.LBE2954:
 18910              	.LBE2964:
1334:src/xeq.c     **** }
 18911              		.loc 1 1334 2 is_stmt 1 view .LVU4885
 18912              	.LBB2965:
 18913              	.LBB2955:
 18914              	.LBI2955:
 767:src/xeq.c     ****     State2.state_lift = 1;
 18915              		.loc 1 767 6 view .LVU4886
 18916              	.LBB2956:
 768:src/xeq.c     **** }
 18917              		.loc 1 768 5 view .LVU4887
 768:src/xeq.c     **** }
 18918              		.loc 1 768 23 is_stmt 0 view .LVU4888
 18919 0012 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 18920              	.LBE2956:
 18921              	.LBE2955:
 18922              	.LBE2965:
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18923              		.loc 1 3297 6 view .LVU4889
 18924 0014 554A     		ldr	r2, .L1382+4
 18925              	.LBB2966:
 18926              	.LBB2959:
 18927              	.LBB2957:
ARM GAS  /tmp/cc7LeJ71.s 			page 513


 768:src/xeq.c     **** }
 18928              		.loc 1 768 23 view .LVU4890
 18929 0016 43F04003 		orr	r3, r3, #64
 18930              	.LBE2957:
 18931              	.LBE2959:
 18932              	.LBE2966:
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18933              		.loc 1 3297 6 view .LVU4891
 18934 001a 1268     		ldr	r2, [r2]
 18935              	.LBB2967:
 18936              	.LBB2960:
 18937              	.LBB2958:
 768:src/xeq.c     **** }
 18938              		.loc 1 768 23 view .LVU4892
 18939 001c EB75     		strb	r3, [r5, #23]
 18940              	.LBE2958:
 18941              	.LBE2960:
 18942              	.LBE2967:
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18943              		.loc 1 3297 2 is_stmt 1 view .LVU4893
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18944              		.loc 1 3297 6 is_stmt 0 view .LVU4894
 18945 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3297:src/xeq.c     **** 		unsigned long long int xv, yv;
 18946              		.loc 1 3297 5 view .LVU4895
 18947 0022 DB07     		lsls	r3, r3, #31
 18948 0024 2CD5     		bpl	.L1349
 18949              	.LBB2968:
3298:src/xeq.c     **** 		int xs, ys;
 18950              		.loc 1 3298 3 is_stmt 1 view .LVU4896
3299:src/xeq.c     **** 
 18951              		.loc 1 3299 3 view .LVU4897
3301:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18952              		.loc 1 3301 3 view .LVU4898
 18953              	.LBB2969:
 18954              	.LBI2969:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 18955              		.loc 1 1442 15 view .LVU4899
 18956              	.LBB2970:
1443:src/xeq.c     **** }
 18957              		.loc 1 1443 2 view .LVU4900
1443:src/xeq.c     **** }
 18958              		.loc 1 1443 9 is_stmt 0 view .LVU4901
 18959 0026 6420     		movs	r0, #100
 18960 0028 FFF7FEFF 		bl	get_reg_n_int
 18961              	.LVL1389:
 18962              	.LBE2970:
 18963              	.LBE2969:
3301:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
 18964              		.loc 1 3301 8 view .LVU4902
 18965 002c 0AAA     		add	r2, sp, #40
 18966 002e FFF7FEFF 		bl	extract_value
 18967              	.LVL1390:
3302:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18968              		.loc 1 3302 6 view .LVU4903
 18969 0032 B8F5FA6F 		cmp	r8, #2000
3301:src/xeq.c     **** 		if (cmp >= CONST_REG_BASE) {
ARM GAS  /tmp/cc7LeJ71.s 			page 514


 18970              		.loc 1 3301 8 view .LVU4904
 18971 0036 0646     		mov	r6, r0
 18972 0038 0F46     		mov	r7, r1
 18973              	.LVL1391:
3302:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18974              		.loc 1 3302 3 is_stmt 1 view .LVU4905
3302:src/xeq.c     **** 			yv = cmp - CONST_REG_BASE - OP_ZERO;
 18975              		.loc 1 3302 6 is_stmt 0 view .LVU4906
 18976 003a 54DB     		blt	.L1350
3303:src/xeq.c     **** 			ys = 0;
 18977              		.loc 1 3303 4 is_stmt 1 view .LVU4907
3303:src/xeq.c     **** 			ys = 0;
 18978              		.loc 1 3303 30 is_stmt 0 view .LVU4908
 18979 003c A8F61B08 		subw	r8, r8, #2075
 18980              	.LVL1392:
3303:src/xeq.c     **** 			ys = 0;
 18981              		.loc 1 3303 7 view .LVU4909
 18982 0040 4FEAE879 		asr	r9, r8, #31
 18983              	.LVL1393:
3304:src/xeq.c     **** 		} else
 18984              		.loc 1 3304 4 is_stmt 1 view .LVU4910
 18985 0044 0022     		movs	r2, #0
 18986              	.LVL1394:
 18987              	.L1351:
3308:src/xeq.c     **** 			iszero = 1;
 18988              		.loc 1 3308 3 view .LVU4911
3308:src/xeq.c     **** 			iszero = 1;
 18989              		.loc 1 3308 6 is_stmt 0 view .LVU4912
 18990 0046 56EA0703 		orrs	r3, r6, r7
 18991 004a 43D1     		bne	.L1352
3308:src/xeq.c     **** 			iszero = 1;
 18992              		.loc 1 3308 15 discriminator 1 view .LVU4913
 18993 004c 58EA0903 		orrs	r3, r8, r9
 18994 0050 53D0     		beq	.L1353
 18995              	.L1355:
 18996 0052 0A9B     		ldr	r3, [sp, #40]
3313:src/xeq.c     **** 			if (xs)		// both negative
 18997              		.loc 1 3313 6 view .LVU4914
 18998 0054 9A42     		cmp	r2, r3
3311:src/xeq.c     **** 
 18999              		.loc 1 3311 24 view .LVU4915
 19000 0056 4FF00000 		mov	r0, #0
 19001              	.LVL1395:
3313:src/xeq.c     **** 			if (xs)		// both negative
 19002              		.loc 1 3313 3 is_stmt 1 view .LVU4916
3313:src/xeq.c     **** 			if (xs)		// both negative
 19003              		.loc 1 3313 6 is_stmt 0 view .LVU4917
 19004 005a 53D0     		beq	.L1356
 19005              	.LVL1396:
 19006              	.L1359:
3313:src/xeq.c     **** 			if (xs)		// both negative
 19007              		.loc 1 3313 6 view .LVU4918
 19008              	.LBE2968:
3341:src/xeq.c     **** 	case TST_APX:
 19009              		.loc 1 3341 2 is_stmt 1 view .LVU4919
 19010 005c 062C     		cmp	r4, #6
 19011 005e 30D8     		bhi	.L1365
ARM GAS  /tmp/cc7LeJ71.s 			page 515


 19012 0060 DFE804F0 		tbb	[pc, r4]
 19013              	.L1367:
 19014 0064 09       		.byte	(.L1364-.L1367)/2
 19015 0065 58       		.byte	(.L1379-.L1367)/2
 19016 0066 09       		.byte	(.L1364-.L1367)/2
 19017 0067 2E       		.byte	(.L1370-.L1367)/2
 19018 0068 67       		.byte	(.L1369-.L1367)/2
 19019 0069 6C       		.byte	(.L1368-.L1367)/2
 19020 006a 04       		.byte	(.L1366-.L1367)/2
 19021 006b 00       		.p2align 1
 19022              	.L1366:
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19023              		.loc 1 3348 15 view .LVU4920
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19024              		.loc 1 3348 26 is_stmt 0 view .LVU4921
 19025 006c 002B     		cmp	r3, #0
 19026 006e 6AD0     		beq	.L1374
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19027              		.loc 1 3348 26 discriminator 2 view .LVU4922
 19028 0070 0038     		subs	r0, r0, #0
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19029              		.loc 1 3348 26 discriminator 2 view .LVU4923
 19030 0072 18BF     		it	ne
 19031 0074 0120     		movne	r0, #1
 19032              	.LVL1397:
 19033              	.L1364:
3352:src/xeq.c     **** }
 19034              		.loc 1 3352 7 is_stmt 1 view .LVU4924
 19035 0076 FFF7FEFF 		bl	fin_tst
 19036              	.LVL1398:
3353:src/xeq.c     **** 
 19037              		.loc 1 3353 1 is_stmt 0 view .LVU4925
 19038 007a 1DB0     		add	sp, sp, #116
 19039              		.cfi_remember_state
 19040              		.cfi_def_cfa_offset 28
 19041              		@ sp needed
 19042 007c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19043              	.LVL1399:
 19044              	.L1349:
 19045              		.cfi_restore_state
 19046              	.LBB2971:
3321:src/xeq.c     **** 
 19047              		.loc 1 3321 3 is_stmt 1 view .LVU4926
3323:src/xeq.c     **** 		if (decNumberIsNaN(&x))
 19048              		.loc 1 3323 3 view .LVU4927
 19049              	.LBB2972:
 19050              	.LBI2972:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19051              		.loc 1 824 12 view .LVU4928
 19052              	.LBB2973:
 825:src/xeq.c     **** }
 19053              		.loc 1 825 2 view .LVU4929
 825:src/xeq.c     **** }
 19054              		.loc 1 825 9 is_stmt 0 view .LVU4930
 19055 0080 0AA8     		add	r0, sp, #40
 19056              	.LVL1400:
 825:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 516


 19057              		.loc 1 825 9 view .LVU4931
 19058 0082 6421     		movs	r1, #100
 19059 0084 FFF7FEFF 		bl	getRegister
 19060              	.LVL1401:
 825:src/xeq.c     **** }
 19061              		.loc 1 825 9 view .LVU4932
 19062              	.LBE2973:
 19063              	.LBE2972:
3324:src/xeq.c     **** 			goto flse;
 19064              		.loc 1 3324 3 is_stmt 1 view .LVU4933
3324:src/xeq.c     **** 			goto flse;
 19065              		.loc 1 3324 6 is_stmt 0 view .LVU4934
 19066 0088 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 19067 008c 13F0300F 		tst	r3, #48
 19068 0090 17D1     		bne	.L1365
3327:src/xeq.c     **** 		if (decNumberIsNaN(&t))
 19069              		.loc 1 3327 3 is_stmt 1 view .LVU4935
 19070 0092 01A8     		add	r0, sp, #4
 19071 0094 4146     		mov	r1, r8
 19072 0096 FFF7FEFF 		bl	getRegister
 19073              	.LVL1402:
3328:src/xeq.c     **** 			goto flse;
 19074              		.loc 1 3328 3 view .LVU4936
3328:src/xeq.c     **** 			goto flse;
 19075              		.loc 1 3328 6 is_stmt 0 view .LVU4937
 19076 009a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 19077 009e 13F0300F 		tst	r3, #48
 19078 00a2 0ED1     		bne	.L1365
3331:src/xeq.c     **** 			decNumberRnd(&x, &x);
 19079              		.loc 1 3331 3 is_stmt 1 view .LVU4938
3331:src/xeq.c     **** 			decNumberRnd(&x, &x);
 19080              		.loc 1 3331 6 is_stmt 0 view .LVU4939
 19081 00a4 022C     		cmp	r4, #2
 19082 00a6 53D0     		beq	.L1381
 19083              	.L1362:
3336:src/xeq.c     **** 		iszero = dn_eq0(&r);
 19084              		.loc 1 3336 3 is_stmt 1 view .LVU4940
 19085 00a8 01AA     		add	r2, sp, #4
 19086 00aa 0AA9     		add	r1, sp, #40
 19087 00ac 13A8     		add	r0, sp, #76
 19088 00ae FFF7FEFF 		bl	dn_compare
 19089              	.LVL1403:
3337:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 19090              		.loc 1 3337 3 view .LVU4941
3337:src/xeq.c     **** 		isneg = decNumberIsNegative(&r);
 19091              		.loc 1 3337 12 is_stmt 0 view .LVU4942
 19092 00b2 13A8     		add	r0, sp, #76
 19093 00b4 FFF7FEFF 		bl	dn_eq0
 19094              	.LVL1404:
3338:src/xeq.c     **** 	}
 19095              		.loc 1 3338 11 view .LVU4943
 19096 00b8 9DF95430 		ldrsb	r3, [sp, #84]
 19097              	.LVL1405:
3338:src/xeq.c     **** 	}
 19098              		.loc 1 3338 3 is_stmt 1 view .LVU4944
3338:src/xeq.c     **** 	}
 19099              		.loc 1 3338 11 is_stmt 0 view .LVU4945
ARM GAS  /tmp/cc7LeJ71.s 			page 517


 19100 00bc DB0F     		lsrs	r3, r3, #31
 19101              	.LVL1406:
3338:src/xeq.c     **** 	}
 19102              		.loc 1 3338 11 view .LVU4946
 19103 00be CDE7     		b	.L1359
 19104              	.LVL1407:
 19105              	.L1370:
3338:src/xeq.c     **** 	}
 19106              		.loc 1 3338 11 view .LVU4947
 19107              	.LBE2971:
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19108              		.loc 1 3345 15 is_stmt 1 view .LVU4948
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19109              		.loc 1 3345 25 is_stmt 0 view .LVU4949
 19110 00c0 43BB     		cbnz	r3, .L1379
 19111              	.LVL1408:
 19112              	.L1365:
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19113              		.loc 1 3345 25 view .LVU4950
 19114 00c2 0020     		movs	r0, #0
 19115              	.LVL1409:
3352:src/xeq.c     **** }
 19116              		.loc 1 3352 7 is_stmt 1 view .LVU4951
 19117 00c4 FFF7FEFF 		bl	fin_tst
 19118              	.LVL1410:
3353:src/xeq.c     **** 
 19119              		.loc 1 3353 1 is_stmt 0 view .LVU4952
 19120 00c8 1DB0     		add	sp, sp, #116
 19121              		.cfi_remember_state
 19122              		.cfi_def_cfa_offset 28
 19123              		@ sp needed
 19124 00ca BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19125              	.LVL1411:
 19126              	.L1380:
 19127              		.cfi_restore_state
 19128              	.LBB2974:
 19129              	.LBB2961:
 19130              	.LBB2952:
3353:src/xeq.c     **** 
 19131              		.loc 1 3353 1 view .LVU4953
 19132 00ce FFF7FEFF 		bl	process_cmdline.part.0
 19133              	.LVL1412:
3353:src/xeq.c     **** 
 19134              		.loc 1 3353 1 view .LVU4954
 19135 00d2 9EE7     		b	.L1348
 19136              	.LVL1413:
 19137              	.L1352:
3353:src/xeq.c     **** 
 19138              		.loc 1 3353 1 view .LVU4955
 19139              	.LBE2952:
 19140              	.LBE2961:
 19141              	.LBE2974:
 19142              	.LBB2975:
3311:src/xeq.c     **** 
 19143              		.loc 1 3311 4 is_stmt 1 view .LVU4956
3311:src/xeq.c     **** 
 19144              		.loc 1 3311 24 is_stmt 0 view .LVU4957
ARM GAS  /tmp/cc7LeJ71.s 			page 518


 19145 00d4 B945     		cmp	r9, r7
 19146 00d6 08BF     		it	eq
 19147 00d8 B045     		cmpeq	r8, r6
 19148 00da BAD1     		bne	.L1355
3311:src/xeq.c     **** 
 19149              		.loc 1 3311 31 discriminator 1 view .LVU4958
 19150 00dc 0A9B     		ldr	r3, [sp, #40]
3311:src/xeq.c     **** 
 19151              		.loc 1 3311 24 discriminator 1 view .LVU4959
 19152 00de 9342     		cmp	r3, r2
 19153 00e0 33D0     		beq	.L1372
3311:src/xeq.c     **** 
 19154              		.loc 1 3311 24 view .LVU4960
 19155 00e2 0020     		movs	r0, #0
 19156 00e4 BAE7     		b	.L1359
 19157              	.LVL1414:
 19158              	.L1350:
3306:src/xeq.c     **** 
 19159              		.loc 1 3306 4 is_stmt 1 view .LVU4961
3306:src/xeq.c     **** 
 19160              		.loc 1 3306 9 is_stmt 0 view .LVU4962
 19161 00e6 4046     		mov	r0, r8
 19162 00e8 FFF7FEFF 		bl	get_reg_n_int
 19163              	.LVL1415:
 19164 00ec 13AA     		add	r2, sp, #76
 19165 00ee FFF7FEFF 		bl	extract_value
 19166              	.LVL1416:
 19167 00f2 139A     		ldr	r2, [sp, #76]
 19168 00f4 8046     		mov	r8, r0
 19169              	.LVL1417:
3306:src/xeq.c     **** 
 19170              		.loc 1 3306 9 view .LVU4963
 19171 00f6 8946     		mov	r9, r1
 19172              	.LVL1418:
3306:src/xeq.c     **** 
 19173              		.loc 1 3306 9 view .LVU4964
 19174 00f8 A5E7     		b	.L1351
 19175              	.L1353:
3306:src/xeq.c     **** 
 19176              		.loc 1 3306 9 view .LVU4965
 19177 00fa 0A9B     		ldr	r3, [sp, #40]
3313:src/xeq.c     **** 			if (xs)		// both negative
 19178              		.loc 1 3313 6 view .LVU4966
 19179 00fc 9A42     		cmp	r2, r3
3309:src/xeq.c     **** 		else
 19180              		.loc 1 3309 11 view .LVU4967
 19181 00fe 4FF00100 		mov	r0, #1
 19182              	.LVL1419:
3313:src/xeq.c     **** 			if (xs)		// both negative
 19183              		.loc 1 3313 3 is_stmt 1 view .LVU4968
3313:src/xeq.c     **** 			if (xs)		// both negative
 19184              		.loc 1 3313 6 is_stmt 0 view .LVU4969
 19185 0102 ABD1     		bne	.L1359
 19186              	.LVL1420:
 19187              	.L1356:
3314:src/xeq.c     **** 				isneg = xv > yv;
 19188              		.loc 1 3314 4 is_stmt 1 view .LVU4970
ARM GAS  /tmp/cc7LeJ71.s 			page 519


3314:src/xeq.c     **** 				isneg = xv > yv;
 19189              		.loc 1 3314 7 is_stmt 0 view .LVU4971
 19190 0104 73B1     		cbz	r3, .L1358
3315:src/xeq.c     **** 			else		// both positive
 19191              		.loc 1 3315 5 is_stmt 1 view .LVU4972
3315:src/xeq.c     **** 			else		// both positive
 19192              		.loc 1 3315 16 is_stmt 0 view .LVU4973
 19193 0106 B945     		cmp	r9, r7
 19194 0108 08BF     		it	eq
 19195 010a B045     		cmpeq	r8, r6
 19196 010c 34BF     		ite	cc
 19197 010e 0123     		movcc	r3, #1
 19198 0110 0023     		movcs	r3, #0
 19199              	.LVL1421:
3315:src/xeq.c     **** 			else		// both positive
 19200              		.loc 1 3315 16 view .LVU4974
 19201 0112 A3E7     		b	.L1359
 19202              	.LVL1422:
 19203              	.L1379:
3315:src/xeq.c     **** 			else		// both positive
 19204              		.loc 1 3315 16 view .LVU4975
 19205              	.LBE2975:
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19206              		.loc 1 3345 25 discriminator 1 view .LVU4976
 19207 0114 B0FA80F0 		clz	r0, r0
 19208              	.LVL1423:
3345:src/xeq.c     **** 	case TST_LE:	a = isneg || iszero;	break;
 19209              		.loc 1 3345 25 discriminator 1 view .LVU4977
 19210 0118 4009     		lsrs	r0, r0, #5
 19211              	.LVL1424:
3352:src/xeq.c     **** }
 19212              		.loc 1 3352 7 is_stmt 1 discriminator 1 view .LVU4978
 19213 011a FFF7FEFF 		bl	fin_tst
 19214              	.LVL1425:
3353:src/xeq.c     **** 
 19215              		.loc 1 3353 1 is_stmt 0 discriminator 1 view .LVU4979
 19216 011e 1DB0     		add	sp, sp, #116
 19217              		.cfi_remember_state
 19218              		.cfi_def_cfa_offset 28
 19219              		@ sp needed
 19220 0120 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 19221              	.LVL1426:
 19222              	.L1358:
 19223              		.cfi_restore_state
 19224              	.LBB2976:
3317:src/xeq.c     **** 		} else
 19225              		.loc 1 3317 5 is_stmt 1 view .LVU4980
3317:src/xeq.c     **** 		} else
 19226              		.loc 1 3317 16 is_stmt 0 view .LVU4981
 19227 0124 4F45     		cmp	r7, r9
 19228 0126 08BF     		it	eq
 19229 0128 4645     		cmpeq	r6, r8
 19230 012a 34BF     		ite	cc
 19231 012c 0123     		movcc	r3, #1
 19232 012e 0023     		movcs	r3, #0
 19233              	.LVL1427:
3317:src/xeq.c     **** 		} else
ARM GAS  /tmp/cc7LeJ71.s 			page 520


 19234              		.loc 1 3317 16 view .LVU4982
 19235 0130 94E7     		b	.L1359
 19236              	.LVL1428:
 19237              	.L1369:
3317:src/xeq.c     **** 		} else
 19238              		.loc 1 3317 16 view .LVU4983
 19239              	.LBE2976:
3346:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19240              		.loc 1 3346 15 is_stmt 1 discriminator 2 view .LVU4984
3346:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19241              		.loc 1 3346 25 is_stmt 0 discriminator 2 view .LVU4985
 19242 0132 0343     		orrs	r3, r0, r3
 19243              	.LVL1429:
3346:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19244              		.loc 1 3346 25 discriminator 2 view .LVU4986
 19245 0134 14BF     		ite	ne
 19246 0136 0120     		movne	r0, #1
 19247              	.LVL1430:
3346:src/xeq.c     **** 	case TST_GT:	a = !isneg && !iszero;	break;
 19248              		.loc 1 3346 25 discriminator 2 view .LVU4987
 19249 0138 0020     		moveq	r0, #0
 19250 013a 9CE7     		b	.L1364
 19251              	.LVL1431:
 19252              	.L1368:
3347:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19253              		.loc 1 3347 15 is_stmt 1 discriminator 1 view .LVU4988
3347:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19254              		.loc 1 3347 26 is_stmt 0 discriminator 1 view .LVU4989
 19255 013c 0343     		orrs	r3, r0, r3
 19256              	.LVL1432:
3347:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19257              		.loc 1 3347 26 discriminator 1 view .LVU4990
 19258 013e 0CBF     		ite	eq
 19259 0140 0120     		moveq	r0, #1
 19260              	.LVL1433:
3347:src/xeq.c     **** 	case TST_GE:	a = !isneg || iszero;	break;
 19261              		.loc 1 3347 26 discriminator 1 view .LVU4991
 19262 0142 0020     		movne	r0, #0
 19263 0144 97E7     		b	.L1364
 19264              	.LVL1434:
 19265              	.L1374:
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19266              		.loc 1 3348 26 view .LVU4992
 19267 0146 0120     		movs	r0, #1
 19268              	.LVL1435:
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19269              		.loc 1 3348 26 view .LVU4993
 19270 0148 95E7     		b	.L1364
 19271              	.LVL1436:
 19272              	.L1372:
 19273              	.LBB2977:
3348:src/xeq.c     **** 	default:	a = 0;			break;
 19274              		.loc 1 3348 26 view .LVU4994
 19275 014a 1346     		mov	r3, r2
3311:src/xeq.c     **** 
 19276              		.loc 1 3311 24 view .LVU4995
 19277 014c 0120     		movs	r0, #1
ARM GAS  /tmp/cc7LeJ71.s 			page 521


 19278 014e D9E7     		b	.L1356
 19279              	.LVL1437:
 19280              	.L1381:
3311:src/xeq.c     **** 
 19281              		.loc 1 3311 24 view .LVU4996
 19282              	.LBE2977:
 19283              	.LBB2978:
3332:src/xeq.c     **** 			if (cmp < CONST_REG_BASE)
 19284              		.loc 1 3332 4 is_stmt 1 view .LVU4997
 19285 0150 0AA9     		add	r1, sp, #40
 19286 0152 0846     		mov	r0, r1
 19287 0154 FFF7FEFF 		bl	decNumberRnd
 19288              	.LVL1438:
3333:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19289              		.loc 1 3333 4 view .LVU4998
3333:src/xeq.c     **** 				decNumberRnd(&t, &t);
 19290              		.loc 1 3333 7 is_stmt 0 view .LVU4999
 19291 0158 B8F5FA6F 		cmp	r8, #2000
 19292 015c A4DA     		bge	.L1362
3334:src/xeq.c     **** 		}
 19293              		.loc 1 3334 5 is_stmt 1 view .LVU5000
 19294 015e 01A9     		add	r1, sp, #4
 19295 0160 0846     		mov	r0, r1
 19296 0162 FFF7FEFF 		bl	decNumberRnd
 19297              	.LVL1439:
 19298 0166 9FE7     		b	.L1362
 19299              	.L1383:
 19300              		.align	2
 19301              	.L1382:
 19302 0168 00000000 		.word	StateWhileOn
 19303 016c 00000000 		.word	main_ram
 19304              	.LBE2978:
 19305              		.cfi_endproc
 19306              	.LFE188:
 19308              		.section	.text.do_ztst,"ax",%progbits
 19309              		.align	1
 19310              		.p2align 2,,3
 19311              		.syntax unified
 19312              		.thumb
 19313              		.thumb_func
 19314              		.fpu fpv4-sp-d16
 19316              	do_ztst:
 19317              	.LVL1440:
 19318              	.LFB191:
3378:src/xeq.c     **** 	decNumber x, y;
 19319              		.loc 1 3378 79 view -0
 19320              		.cfi_startproc
 19321              		@ args = 0, pretend = 0, frame = 72
 19322              		@ frame_needed = 0, uses_anonymous_args = 0
3379:src/xeq.c     **** 
 19323              		.loc 1 3379 2 view .LVU5002
3381:src/xeq.c     **** 	if (is_intmode()) {
 19324              		.loc 1 3381 2 view .LVU5003
 19325              	.LBB2994:
 19326              	.LBI2994:
1332:src/xeq.c     **** 	process_cmdline();
 19327              		.loc 1 1332 6 view .LVU5004
ARM GAS  /tmp/cc7LeJ71.s 			page 522


 19328              	.LBE2994:
1333:src/xeq.c     **** 	set_lift();
 19329              		.loc 1 1333 2 view .LVU5005
 19330              	.LBB3009:
 19331              	.LBB2995:
 19332              	.LBI2995:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 19333              		.loc 1 1226 6 view .LVU5006
 19334              	.LBB2996:
1227:src/xeq.c     **** 
 19335              		.loc 1 1227 2 view .LVU5007
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19336              		.loc 1 1229 2 view .LVU5008
 19337              	.LBE2996:
 19338              	.LBE2995:
 19339              	.LBE3009:
3378:src/xeq.c     **** 	decNumber x, y;
 19340              		.loc 1 3378 79 is_stmt 0 view .LVU5009
 19341 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 19342              		.cfi_def_cfa_offset 20
 19343              		.cfi_offset 4, -20
 19344              		.cfi_offset 5, -16
 19345              		.cfi_offset 6, -12
 19346              		.cfi_offset 7, -8
 19347              		.cfi_offset 14, -4
 19348              	.LBB3010:
 19349              	.LBB3000:
 19350              	.LBB2997:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19351              		.loc 1 1229 6 view .LVU5010
 19352 0002 274C     		ldr	r4, .L1401
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19353              		.loc 1 1229 5 view .LVU5011
 19354 0004 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 19355              	.LBE2997:
 19356              	.LBE3000:
 19357              	.LBE3010:
3378:src/xeq.c     **** 	decNumber x, y;
 19358              		.loc 1 3378 79 view .LVU5012
 19359 0006 93B0     		sub	sp, sp, #76
 19360              		.cfi_def_cfa_offset 96
3378:src/xeq.c     **** 	decNumber x, y;
 19361              		.loc 1 3378 79 view .LVU5013
 19362 0008 0546     		mov	r5, r0
 19363 000a 0F46     		mov	r7, r1
 19364 000c 1646     		mov	r6, r2
 19365              	.LBB3011:
 19366              	.LBB3001:
 19367              	.LBB2998:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19368              		.loc 1 1229 5 view .LVU5014
 19369 000e 002B     		cmp	r3, #0
 19370 0010 39D1     		bne	.L1399
 19371              	.LVL1441:
 19372              	.L1385:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 19373              		.loc 1 1229 5 view .LVU5015
ARM GAS  /tmp/cc7LeJ71.s 			page 523


 19374              	.LBE2998:
 19375              	.LBE3001:
 19376              	.LBE3011:
1334:src/xeq.c     **** }
 19377              		.loc 1 1334 2 is_stmt 1 view .LVU5016
 19378              	.LBB3012:
 19379              	.LBB3002:
 19380              	.LBI3002:
 767:src/xeq.c     ****     State2.state_lift = 1;
 19381              		.loc 1 767 6 view .LVU5017
 19382              	.LBB3003:
 768:src/xeq.c     **** }
 19383              		.loc 1 768 5 view .LVU5018
 768:src/xeq.c     **** }
 19384              		.loc 1 768 23 is_stmt 0 view .LVU5019
 19385 0012 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 19386              	.LBE3003:
 19387              	.LBE3002:
 19388              	.LBE3012:
3382:src/xeq.c     **** 		bad_mode_error();
 19389              		.loc 1 3382 6 view .LVU5020
 19390 0014 234A     		ldr	r2, .L1401+4
 19391              	.LBB3013:
 19392              	.LBB3006:
 19393              	.LBB3004:
 768:src/xeq.c     **** }
 19394              		.loc 1 768 23 view .LVU5021
 19395 0016 43F04003 		orr	r3, r3, #64
 19396              	.LBE3004:
 19397              	.LBE3006:
 19398              	.LBE3013:
3382:src/xeq.c     **** 		bad_mode_error();
 19399              		.loc 1 3382 6 view .LVU5022
 19400 001a 1268     		ldr	r2, [r2]
 19401              	.LBB3014:
 19402              	.LBB3007:
 19403              	.LBB3005:
 768:src/xeq.c     **** }
 19404              		.loc 1 768 23 view .LVU5023
 19405 001c E375     		strb	r3, [r4, #23]
 19406              	.LBE3005:
 19407              	.LBE3007:
 19408              	.LBE3014:
3382:src/xeq.c     **** 		bad_mode_error();
 19409              		.loc 1 3382 2 is_stmt 1 view .LVU5024
3382:src/xeq.c     **** 		bad_mode_error();
 19410              		.loc 1 3382 6 is_stmt 0 view .LVU5025
 19411 001e 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3382:src/xeq.c     **** 		bad_mode_error();
 19412              		.loc 1 3382 5 view .LVU5026
 19413 0022 DB07     		lsls	r3, r3, #31
 19414 0024 06D5     		bpl	.L1386
3383:src/xeq.c     **** 		return;
 19415              		.loc 1 3383 3 is_stmt 1 view .LVU5027
 19416              	.LBB3015:
 19417              	.LBI3015:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
ARM GAS  /tmp/cc7LeJ71.s 			page 524


 19418              		.loc 1 575 6 view .LVU5028
 19419              	.LBE3015:
 576:src/xeq.c     **** }
 19420              		.loc 1 576 2 view .LVU5029
 19421              	.LVL1442:
 19422              	.LBB3020:
 19423              	.LBB3016:
 19424              	.LBI3016:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19425              		.loc 1 546 5 view .LVU5030
 19426              	.LBB3017:
 547:src/xeq.c     **** 		Error = e;
 19427              		.loc 1 547 2 view .LVU5031
 547:src/xeq.c     **** 		Error = e;
 19428              		.loc 1 547 12 is_stmt 0 view .LVU5032
 19429 0026 204B     		ldr	r3, .L1401+8
 547:src/xeq.c     **** 		Error = e;
 19430              		.loc 1 547 5 view .LVU5033
 19431 0028 1A68     		ldr	r2, [r3]
 19432 002a 0AB9     		cbnz	r2, .L1384
 19433              	.LVL1443:
 19434              	.LBB3018:
 19435              	.LBI3018:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 19436              		.loc 1 546 5 is_stmt 1 view .LVU5034
 19437              	.LBB3019:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 19438              		.loc 1 548 3 view .LVU5035
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 19439              		.loc 1 548 9 is_stmt 0 view .LVU5036
 19440 002c 0D22     		movs	r2, #13
 19441 002e 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 19442              		.loc 1 549 3 is_stmt 1 view .LVU5037
 19443              	.LVL1444:
 19444              	.L1384:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 19445              		.loc 1 549 3 is_stmt 0 view .LVU5038
 19446              	.LBE3019:
 19447              	.LBE3018:
 19448              	.LBE3017:
 19449              	.LBE3016:
 19450              	.LBE3020:
3392:src/xeq.c     **** 
 19451              		.loc 1 3392 1 view .LVU5039
 19452 0030 13B0     		add	sp, sp, #76
 19453              		.cfi_remember_state
 19454              		.cfi_def_cfa_offset 20
 19455              		@ sp needed
 19456 0032 F0BD     		pop	{r4, r5, r6, r7, pc}
 19457              	.LVL1445:
 19458              	.L1386:
 19459              		.cfi_restore_state
3386:src/xeq.c     **** 	if (decNumberIsNaN(&x) || decNumberIsNaN(&y) || decNumberIsNaN(re) || decNumberIsNaN(im)) {
 19460              		.loc 1 3386 2 is_stmt 1 view .LVU5040
 19461              	.LBB3021:
 19462              	.LBI3021:
ARM GAS  /tmp/cc7LeJ71.s 			page 525


 854:src/xeq.c     **** 	getX(x);
 19463              		.loc 1 854 6 view .LVU5041
 19464              	.LBE3021:
 855:src/xeq.c     **** 	getY(y);
 19465              		.loc 1 855 2 view .LVU5042
 19466              	.LBB3026:
 19467              	.LBB3022:
 19468              	.LBI3022:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19469              		.loc 1 824 12 view .LVU5043
 19470              	.LBB3023:
 825:src/xeq.c     **** }
 19471              		.loc 1 825 2 view .LVU5044
 825:src/xeq.c     **** }
 19472              		.loc 1 825 9 is_stmt 0 view .LVU5045
 19473 0034 6421     		movs	r1, #100
 19474 0036 6846     		mov	r0, sp
 19475 0038 FFF7FEFF 		bl	getRegister
 19476              	.LVL1446:
 825:src/xeq.c     **** }
 19477              		.loc 1 825 9 view .LVU5046
 19478              	.LBE3023:
 19479              	.LBE3022:
 19480              	.LBE3026:
 856:src/xeq.c     **** }
 19481              		.loc 1 856 2 is_stmt 1 view .LVU5047
 19482              	.LBB3027:
 19483              	.LBB3024:
 19484              	.LBI3024:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 19485              		.loc 1 832 6 view .LVU5048
 19486              	.LBB3025:
 833:src/xeq.c     **** }
 19487              		.loc 1 833 2 view .LVU5049
 19488 003c 09A8     		add	r0, sp, #36
 19489              	.LVL1447:
 833:src/xeq.c     **** }
 19490              		.loc 1 833 2 is_stmt 0 view .LVU5050
 19491 003e 6521     		movs	r1, #101
 19492 0040 FFF7FEFF 		bl	getRegister
 19493              	.LVL1448:
 833:src/xeq.c     **** }
 19494              		.loc 1 833 2 view .LVU5051
 19495              	.LBE3025:
 19496              	.LBE3024:
 19497              	.LBE3027:
3387:src/xeq.c     **** 		fin_tst(0);
 19498              		.loc 1 3387 2 is_stmt 1 view .LVU5052
3387:src/xeq.c     **** 		fin_tst(0);
 19499              		.loc 1 3387 25 is_stmt 0 view .LVU5053
 19500 0044 9DF80830 		ldrb	r3, [sp, #8]	@ zero_extendqisi2
 19501 0048 9DF82C20 		ldrb	r2, [sp, #44]	@ zero_extendqisi2
 19502 004c 1343     		orrs	r3, r3, r2
 19503 004e 13F0300F 		tst	r3, #48
 19504 0052 13D1     		bne	.L1388
3387:src/xeq.c     **** 		fin_tst(0);
 19505              		.loc 1 3387 47 discriminator 2 view .LVU5054
ARM GAS  /tmp/cc7LeJ71.s 			page 526


 19506 0054 2B7A     		ldrb	r3, [r5, #8]	@ zero_extendqisi2
 19507 0056 13F0300F 		tst	r3, #48
 19508 005a 0FD1     		bne	.L1388
3387:src/xeq.c     **** 		fin_tst(0);
 19509              		.loc 1 3387 69 discriminator 3 view .LVU5055
 19510 005c 3B7A     		ldrb	r3, [r7, #8]	@ zero_extendqisi2
 19511 005e 13F0300F 		tst	r3, #48
 19512 0062 0BD1     		bne	.L1388
3391:src/xeq.c     **** }
 19513              		.loc 1 3391 2 is_stmt 1 view .LVU5056
3391:src/xeq.c     **** }
 19514              		.loc 1 3391 29 is_stmt 0 view .LVU5057
 19515 0064 2946     		mov	r1, r5
 19516 0066 6846     		mov	r0, sp
 19517 0068 FFF7FEFF 		bl	dn_eq
 19518              	.LVL1449:
3391:src/xeq.c     **** }
 19519              		.loc 1 3391 25 view .LVU5058
 19520 006c 003E     		subs	r6, r6, #0
 19521 006e 18BF     		it	ne
 19522 0070 0126     		movne	r6, #1
3391:src/xeq.c     **** }
 19523              		.loc 1 3391 43 view .LVU5059
 19524 0072 58B9     		cbnz	r0, .L1400
 19525              	.L1390:
3391:src/xeq.c     **** }
 19526              		.loc 1 3391 2 discriminator 6 view .LVU5060
 19527 0074 3046     		mov	r0, r6
 19528 0076 FFF7FEFF 		bl	fin_tst
 19529              	.LVL1450:
 19530 007a D9E7     		b	.L1384
 19531              	.L1388:
3388:src/xeq.c     **** 		return;
 19532              		.loc 1 3388 3 is_stmt 1 view .LVU5061
 19533 007c 0020     		movs	r0, #0
 19534 007e FFF7FEFF 		bl	fin_tst
 19535              	.LVL1451:
3389:src/xeq.c     **** 	}
 19536              		.loc 1 3389 3 view .LVU5062
3392:src/xeq.c     **** 
 19537              		.loc 1 3392 1 is_stmt 0 view .LVU5063
 19538 0082 13B0     		add	sp, sp, #76
 19539              		.cfi_remember_state
 19540              		.cfi_def_cfa_offset 20
 19541              		@ sp needed
 19542 0084 F0BD     		pop	{r4, r5, r6, r7, pc}
 19543              	.LVL1452:
 19544              	.L1399:
 19545              		.cfi_restore_state
 19546              	.LBB3028:
 19547              	.LBB3008:
 19548              	.LBB2999:
3392:src/xeq.c     **** 
 19549              		.loc 1 3392 1 view .LVU5064
 19550 0086 FFF7FEFF 		bl	process_cmdline.part.0
 19551              	.LVL1453:
3392:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 527


 19552              		.loc 1 3392 1 view .LVU5065
 19553 008a C2E7     		b	.L1385
 19554              	.L1400:
3392:src/xeq.c     **** 
 19555              		.loc 1 3392 1 view .LVU5066
 19556              	.LBE2999:
 19557              	.LBE3008:
 19558              	.LBE3028:
3391:src/xeq.c     **** }
 19559              		.loc 1 3391 46 discriminator 1 view .LVU5067
 19560 008c 3946     		mov	r1, r7
 19561 008e 09A8     		add	r0, sp, #36
 19562 0090 FFF7FEFF 		bl	dn_eq
 19563              	.LVL1454:
 19564 0094 0028     		cmp	r0, #0
 19565 0096 18BF     		it	ne
 19566 0098 86F00106 		eorne	r6, r6, #1
 19567 009c EAE7     		b	.L1390
 19568              	.L1402:
 19569 009e 00BF     		.align	2
 19570              	.L1401:
 19571 00a0 00000000 		.word	StateWhileOn
 19572 00a4 00000000 		.word	main_ram
 19573 00a8 00000000 		.word	Error
 19574              		.cfi_endproc
 19575              	.LFE191:
 19577              		.section	.text.op_query_print,"ax",%progbits
 19578              		.align	1
 19579              		.p2align 2,,3
 19580              		.global	op_query_print
 19581              		.syntax unified
 19582              		.thumb
 19583              		.thumb_func
 19584              		.fpu fpv4-sp-d16
 19586              	op_query_print:
 19587              	.LFB295:
 19588              		.cfi_startproc
 19589              		@ args = 0, pretend = 0, frame = 0
 19590              		@ frame_needed = 0, uses_anonymous_args = 0
 19591              		@ link register save eliminated.
 19592 0000 0120     		movs	r0, #1
 19593 0002 FFF7FEBF 		b	fin_tst
 19594              		.cfi_endproc
 19595              	.LFE295:
 19597 0006 00BF     		.section	.text.check_zero,"ax",%progbits
 19598              		.align	1
 19599              		.p2align 2,,3
 19600              		.global	check_zero
 19601              		.syntax unified
 19602              		.thumb
 19603              		.thumb_func
 19604              		.fpu fpv4-sp-d16
 19606              	check_zero:
 19607              	.LVL1455:
 19608              	.LFB189:
3355:src/xeq.c     **** 	int neg;
 19609              		.loc 1 3355 32 is_stmt 1 view -0
ARM GAS  /tmp/cc7LeJ71.s 			page 528


 19610              		.cfi_startproc
 19611              		@ args = 0, pretend = 0, frame = 40
 19612              		@ frame_needed = 0, uses_anonymous_args = 0
3356:src/xeq.c     **** 	int zero;
 19613              		.loc 1 3356 2 view .LVU5069
3357:src/xeq.c     **** 
 19614              		.loc 1 3357 2 view .LVU5070
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19615              		.loc 1 3359 2 view .LVU5071
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19616              		.loc 1 3359 6 is_stmt 0 view .LVU5072
 19617 0000 1A4B     		ldr	r3, .L1419
3355:src/xeq.c     **** 	int neg;
 19618              		.loc 1 3355 32 view .LVU5073
 19619 0002 10B5     		push	{r4, lr}
 19620              		.cfi_def_cfa_offset 8
 19621              		.cfi_offset 4, -8
 19622              		.cfi_offset 14, -4
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19623              		.loc 1 3359 6 view .LVU5074
 19624 0004 1B68     		ldr	r3, [r3]
 19625 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19626              		.loc 1 3359 5 view .LVU5075
 19627 000a DB07     		lsls	r3, r3, #31
3355:src/xeq.c     **** 	int neg;
 19628              		.loc 1 3355 32 view .LVU5076
 19629 000c 8AB0     		sub	sp, sp, #40
 19630              		.cfi_def_cfa_offset 48
3355:src/xeq.c     **** 	int neg;
 19631              		.loc 1 3355 32 view .LVU5077
 19632 000e 0446     		mov	r4, r0
3359:src/xeq.c     **** 		const unsigned long long int xv = extract_value(getX_int(), &neg);
 19633              		.loc 1 3359 5 view .LVU5078
 19634 0010 15D5     		bpl	.L1405
 19635              	.LBB3029:
3360:src/xeq.c     **** 		zero = (xv == 0);
 19636              		.loc 1 3360 3 is_stmt 1 view .LVU5079
 19637              	.LBB3030:
 19638              	.LBI3030:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 19639              		.loc 1 1442 15 view .LVU5080
 19640              	.LBB3031:
1443:src/xeq.c     **** }
 19641              		.loc 1 1443 2 view .LVU5081
1443:src/xeq.c     **** }
 19642              		.loc 1 1443 9 is_stmt 0 view .LVU5082
 19643 0012 6420     		movs	r0, #100
 19644              	.LVL1456:
1443:src/xeq.c     **** }
 19645              		.loc 1 1443 9 view .LVU5083
 19646 0014 FFF7FEFF 		bl	get_reg_n_int
 19647              	.LVL1457:
 19648              	.LBE3031:
 19649              	.LBE3030:
3360:src/xeq.c     **** 		zero = (xv == 0);
 19650              		.loc 1 3360 37 view .LVU5084
ARM GAS  /tmp/cc7LeJ71.s 			page 529


 19651 0018 6A46     		mov	r2, sp
 19652 001a FFF7FEFF 		bl	extract_value
 19653              	.LVL1458:
3361:src/xeq.c     **** 	} else {
 19654              		.loc 1 3361 3 is_stmt 1 view .LVU5085
3361:src/xeq.c     **** 	} else {
 19655              		.loc 1 3361 14 is_stmt 0 view .LVU5086
 19656 001e 50EA0103 		orrs	r3, r0, r1
 19657 0022 0CBF     		ite	eq
 19658 0024 0120     		moveq	r0, #1
 19659              	.LVL1459:
3361:src/xeq.c     **** 	} else {
 19660              		.loc 1 3361 14 view .LVU5087
 19661 0026 0020     		movne	r0, #0
 19662              	.LVL1460:
3361:src/xeq.c     **** 	} else {
 19663              		.loc 1 3361 14 view .LVU5088
 19664              	.LBE3029:
3368:src/xeq.c     **** 		fin_tst(zero && !neg);
 19665              		.loc 1 3368 2 is_stmt 1 view .LVU5089
3368:src/xeq.c     **** 		fin_tst(zero && !neg);
 19666              		.loc 1 3368 5 is_stmt 0 view .LVU5090
 19667 0028 A12C     		cmp	r4, #161
 19668 002a 15D0     		beq	.L1418
 19669              	.L1407:
3371:src/xeq.c     **** }
 19670              		.loc 1 3371 3 is_stmt 1 view .LVU5091
 19671 002c 18B1     		cbz	r0, .L1410
3371:src/xeq.c     **** }
 19672              		.loc 1 3371 3 is_stmt 0 discriminator 1 view .LVU5092
 19673 002e 0098     		ldr	r0, [sp]
 19674              	.LVL1461:
3371:src/xeq.c     **** }
 19675              		.loc 1 3371 3 discriminator 1 view .LVU5093
 19676 0030 0038     		subs	r0, r0, #0
 19677 0032 18BF     		it	ne
 19678 0034 0120     		movne	r0, #1
 19679              	.L1410:
3371:src/xeq.c     **** }
 19680              		.loc 1 3371 3 discriminator 6 view .LVU5094
 19681 0036 FFF7FEFF 		bl	fin_tst
 19682              	.LVL1462:
3372:src/xeq.c     **** 
 19683              		.loc 1 3372 1 discriminator 6 view .LVU5095
 19684 003a 0AB0     		add	sp, sp, #40
 19685              		.cfi_remember_state
 19686              		.cfi_def_cfa_offset 8
 19687              		@ sp needed
 19688 003c 10BD     		pop	{r4, pc}
 19689              	.LVL1463:
 19690              	.L1405:
 19691              		.cfi_restore_state
 19692              	.LBB3032:
3363:src/xeq.c     **** 		getX(&x);
 19693              		.loc 1 3363 3 is_stmt 1 view .LVU5096
3364:src/xeq.c     **** 		neg = decNumberIsNegative(&x);
 19694              		.loc 1 3364 3 view .LVU5097
ARM GAS  /tmp/cc7LeJ71.s 			page 530


 19695              	.LBB3033:
 19696              	.LBI3033:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 19697              		.loc 1 824 12 view .LVU5098
 19698              	.LBB3034:
 825:src/xeq.c     **** }
 19699              		.loc 1 825 2 view .LVU5099
 825:src/xeq.c     **** }
 19700              		.loc 1 825 9 is_stmt 0 view .LVU5100
 19701 003e 6421     		movs	r1, #100
 19702 0040 01A8     		add	r0, sp, #4
 19703              	.LVL1464:
 825:src/xeq.c     **** }
 19704              		.loc 1 825 9 view .LVU5101
 19705 0042 FFF7FEFF 		bl	getRegister
 19706              	.LVL1465:
 825:src/xeq.c     **** }
 19707              		.loc 1 825 9 view .LVU5102
 19708              	.LBE3034:
 19709              	.LBE3033:
3365:src/xeq.c     **** 		zero = dn_eq0(&x);
 19710              		.loc 1 3365 3 is_stmt 1 view .LVU5103
3365:src/xeq.c     **** 		zero = dn_eq0(&x);
 19711              		.loc 1 3365 9 is_stmt 0 view .LVU5104
 19712 0046 9DF90C30 		ldrsb	r3, [sp, #12]
3366:src/xeq.c     **** 	}
 19713              		.loc 1 3366 10 view .LVU5105
 19714 004a 01A8     		add	r0, sp, #4
3365:src/xeq.c     **** 		zero = dn_eq0(&x);
 19715              		.loc 1 3365 9 view .LVU5106
 19716 004c DB0F     		lsrs	r3, r3, #31
3365:src/xeq.c     **** 		zero = dn_eq0(&x);
 19717              		.loc 1 3365 7 view .LVU5107
 19718 004e 0093     		str	r3, [sp]
3366:src/xeq.c     **** 	}
 19719              		.loc 1 3366 3 is_stmt 1 view .LVU5108
3366:src/xeq.c     **** 	}
 19720              		.loc 1 3366 10 is_stmt 0 view .LVU5109
 19721 0050 FFF7FEFF 		bl	dn_eq0
 19722              	.LVL1466:
3366:src/xeq.c     **** 	}
 19723              		.loc 1 3366 10 view .LVU5110
 19724              	.LBE3032:
3368:src/xeq.c     **** 		fin_tst(zero && !neg);
 19725              		.loc 1 3368 2 is_stmt 1 view .LVU5111
3368:src/xeq.c     **** 		fin_tst(zero && !neg);
 19726              		.loc 1 3368 5 is_stmt 0 view .LVU5112
 19727 0054 A12C     		cmp	r4, #161
 19728 0056 E9D1     		bne	.L1407
 19729              	.L1418:
3369:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19730              		.loc 1 3369 3 is_stmt 1 view .LVU5113
 19731 0058 0028     		cmp	r0, #0
 19732 005a ECD0     		beq	.L1410
3369:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19733              		.loc 1 3369 3 is_stmt 0 discriminator 1 view .LVU5114
 19734 005c 0098     		ldr	r0, [sp]
ARM GAS  /tmp/cc7LeJ71.s 			page 531


 19735              	.LVL1467:
3369:src/xeq.c     **** 	else /* if (op == OP_Xeq_neg0) */
 19736              		.loc 1 3369 3 discriminator 1 view .LVU5115
 19737 005e B0FA80F0 		clz	r0, r0
 19738 0062 4009     		lsrs	r0, r0, #5
3371:src/xeq.c     **** }
 19739              		.loc 1 3371 3 discriminator 1 view .LVU5116
 19740 0064 FFF7FEFF 		bl	fin_tst
 19741              	.LVL1468:
3372:src/xeq.c     **** 
 19742              		.loc 1 3372 1 discriminator 1 view .LVU5117
 19743 0068 0AB0     		add	sp, sp, #40
 19744              		.cfi_def_cfa_offset 8
 19745              		@ sp needed
 19746 006a 10BD     		pop	{r4, pc}
 19747              	.L1420:
 19748              		.align	2
 19749              	.L1419:
 19750 006c 00000000 		.word	main_ram
 19751              		.cfi_endproc
 19752              	.LFE189:
 19754              		.section	.text.cmdtest,"ax",%progbits
 19755              		.align	1
 19756              		.p2align 2,,3
 19757              		.global	cmdtest
 19758              		.syntax unified
 19759              		.thumb
 19760              		.thumb_func
 19761              		.fpu fpv4-sp-d16
 19763              	cmdtest:
 19764              	.LVL1469:
 19765              	.LFB190:
3374:src/xeq.c     **** 	do_tst(arg, (enum tst_op)(op - RARG_TEST_EQ));
 19766              		.loc 1 3374 46 is_stmt 1 view -0
 19767              		.cfi_startproc
 19768              		@ args = 0, pretend = 0, frame = 0
 19769              		@ frame_needed = 0, uses_anonymous_args = 0
 19770              		@ link register save eliminated.
3375:src/xeq.c     **** }
 19771              		.loc 1 3375 2 view .LVU5119
3375:src/xeq.c     **** }
 19772              		.loc 1 3375 31 is_stmt 0 view .LVU5120
 19773 0000 2D39     		subs	r1, r1, #45
 19774              	.LVL1470:
3375:src/xeq.c     **** }
 19775              		.loc 1 3375 2 view .LVU5121
 19776 0002 C9B2     		uxtb	r1, r1
 19777 0004 FFF7FEBF 		b	do_tst
 19778              	.LVL1471:
3375:src/xeq.c     **** }
 19779              		.loc 1 3375 2 view .LVU5122
 19780              		.cfi_endproc
 19781              	.LFE190:
 19783              		.section	.text.cmdztest,"ax",%progbits
 19784              		.align	1
 19785              		.p2align 2,,3
 19786              		.global	cmdztest
ARM GAS  /tmp/cc7LeJ71.s 			page 532


 19787              		.syntax unified
 19788              		.thumb
 19789              		.thumb_func
 19790              		.fpu fpv4-sp-d16
 19792              	cmdztest:
 19793              	.LVL1472:
 19794              	.LFB192:
3394:src/xeq.c     **** 	decNumber re, im;
 19795              		.loc 1 3394 47 is_stmt 1 view -0
 19796              		.cfi_startproc
 19797              		@ args = 0, pretend = 0, frame = 72
 19798              		@ frame_needed = 0, uses_anonymous_args = 0
3395:src/xeq.c     **** 	getRegister(&re, arg);
 19799              		.loc 1 3395 2 view .LVU5124
3396:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19800              		.loc 1 3396 2 view .LVU5125
3394:src/xeq.c     **** 	decNumber re, im;
 19801              		.loc 1 3394 47 is_stmt 0 view .LVU5126
 19802 0000 30B5     		push	{r4, r5, lr}
 19803              		.cfi_def_cfa_offset 12
 19804              		.cfi_offset 4, -12
 19805              		.cfi_offset 5, -8
 19806              		.cfi_offset 14, -4
 19807 0002 0546     		mov	r5, r0
 19808 0004 93B0     		sub	sp, sp, #76
 19809              		.cfi_def_cfa_offset 88
3394:src/xeq.c     **** 	decNumber re, im;
 19810              		.loc 1 3394 47 view .LVU5127
 19811 0006 0C46     		mov	r4, r1
3396:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19812              		.loc 1 3396 2 view .LVU5128
 19813 0008 6846     		mov	r0, sp
 19814              	.LVL1473:
3396:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19815              		.loc 1 3396 2 view .LVU5129
 19816 000a 2946     		mov	r1, r5
 19817              	.LVL1474:
3396:src/xeq.c     **** 	getRegister(&im, arg + 1);
 19818              		.loc 1 3396 2 view .LVU5130
 19819 000c FFF7FEFF 		bl	getRegister
 19820              	.LVL1475:
3397:src/xeq.c     **** 	do_ztst(&re, &im, (enum tst_op)(op - RARG_TEST_ZEQ));
 19821              		.loc 1 3397 2 is_stmt 1 view .LVU5131
 19822 0010 691C     		adds	r1, r5, #1
 19823 0012 09A8     		add	r0, sp, #36
 19824 0014 FFF7FEFF 		bl	getRegister
 19825              	.LVL1476:
3398:src/xeq.c     **** }
 19826              		.loc 1 3398 2 view .LVU5132
3398:src/xeq.c     **** }
 19827              		.loc 1 3398 37 is_stmt 0 view .LVU5133
 19828 0018 A4F13402 		sub	r2, r4, #52
3398:src/xeq.c     **** }
 19829              		.loc 1 3398 2 view .LVU5134
 19830 001c D2B2     		uxtb	r2, r2
 19831 001e 09A9     		add	r1, sp, #36
 19832 0020 6846     		mov	r0, sp
ARM GAS  /tmp/cc7LeJ71.s 			page 533


 19833 0022 FFF7FEFF 		bl	do_ztst
 19834              	.LVL1477:
3399:src/xeq.c     **** 
 19835              		.loc 1 3399 1 view .LVU5135
 19836 0026 13B0     		add	sp, sp, #76
 19837              		.cfi_def_cfa_offset 12
 19838              		@ sp needed
 19839 0028 30BD     		pop	{r4, r5, pc}
3399:src/xeq.c     **** 
 19840              		.loc 1 3399 1 view .LVU5136
 19841              		.cfi_endproc
 19842              	.LFE192:
 19844 002a 00BF     		.section	.text.cmdlincdec,"ax",%progbits
 19845              		.align	1
 19846              		.p2align 2,,3
 19847              		.global	cmdlincdec
 19848              		.syntax unified
 19849              		.thumb
 19850              		.thumb_func
 19851              		.fpu fpv4-sp-d16
 19853              	cmdlincdec:
 19854              	.LVL1478:
 19855              	.LFB194:
3429:src/xeq.c     **** 	incdec(arg, op == RARG_INC);
 19856              		.loc 1 3429 49 is_stmt 1 view -0
 19857              		.cfi_startproc
 19858              		@ args = 0, pretend = 0, frame = 0
 19859              		@ frame_needed = 0, uses_anonymous_args = 0
 19860              		@ link register save eliminated.
3430:src/xeq.c     **** }
 19861              		.loc 1 3430 2 view .LVU5138
 19862 0000 A1F14101 		sub	r1, #65
 19863              	.LVL1479:
3430:src/xeq.c     **** }
 19864              		.loc 1 3430 2 is_stmt 0 view .LVU5139
 19865 0004 B1FA81F1 		clz	r1, r1
 19866 0008 4909     		lsrs	r1, r1, #5
 19867 000a FFF7FEBF 		b	incdec
 19868              	.LVL1480:
3430:src/xeq.c     **** }
 19869              		.loc 1 3430 2 view .LVU5140
 19870              		.cfi_endproc
 19871              	.LFE194:
 19873 000e 00BF     		.section	.text.cmdloopz,"ax",%progbits
 19874              		.align	1
 19875              		.p2align 2,,3
 19876              		.global	cmdloopz
 19877              		.syntax unified
 19878              		.thumb
 19879              		.thumb_func
 19880              		.fpu fpv4-sp-d16
 19882              	cmdloopz:
 19883              	.LVL1481:
 19884              	.LFB195:
3433:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19885              		.loc 1 3433 47 is_stmt 1 view -0
 19886              		.cfi_startproc
ARM GAS  /tmp/cc7LeJ71.s 			page 534


 19887              		@ args = 0, pretend = 0, frame = 0
 19888              		@ frame_needed = 0, uses_anonymous_args = 0
3434:src/xeq.c     **** }
 19889              		.loc 1 3434 2 view .LVU5142
3433:src/xeq.c     **** 	fin_tst(incdec(arg, op == RARG_ISZ));
 19890              		.loc 1 3433 47 is_stmt 0 view .LVU5143
 19891 0000 08B5     		push	{r3, lr}
 19892              		.cfi_def_cfa_offset 8
 19893              		.cfi_offset 3, -8
 19894              		.cfi_offset 14, -4
3434:src/xeq.c     **** }
 19895              		.loc 1 3434 2 view .LVU5144
 19896 0002 A1F13F01 		sub	r1, #63
 19897              	.LVL1482:
3434:src/xeq.c     **** }
 19898              		.loc 1 3434 2 view .LVU5145
 19899 0006 B1FA81F1 		clz	r1, r1
 19900 000a 4909     		lsrs	r1, r1, #5
 19901 000c FFF7FEFF 		bl	incdec
 19902              	.LVL1483:
3435:src/xeq.c     **** 
 19903              		.loc 1 3435 1 view .LVU5146
 19904 0010 BDE80840 		pop	{r3, lr}
 19905              		.cfi_restore 14
 19906              		.cfi_restore 3
 19907              		.cfi_def_cfa_offset 0
3434:src/xeq.c     **** }
 19908              		.loc 1 3434 2 view .LVU5147
 19909 0014 FFF7FEBF 		b	fin_tst
 19910              	.LVL1484:
 19911              		.cfi_endproc
 19912              	.LFE195:
 19914              		.section	.text.cmdloop,"ax",%progbits
 19915              		.align	1
 19916              		.p2align 2,,3
 19917              		.global	cmdloop
 19918              		.syntax unified
 19919              		.thumb
 19920              		.thumb_func
 19921              		.fpu fpv4-sp-d16
 19923              	cmdloop:
 19924              	.LVL1485:
 19925              	.LFB196:
3437:src/xeq.c     **** 	if (is_intmode()) {
 19926              		.loc 1 3437 46 is_stmt 1 view -0
 19927              		.cfi_startproc
 19928              		@ args = 0, pretend = 0, frame = 184
 19929              		@ frame_needed = 0, uses_anonymous_args = 0
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19930              		.loc 1 3438 2 view .LVU5149
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19931              		.loc 1 3438 6 is_stmt 0 view .LVU5150
 19932 0000 7C4B     		ldr	r3, .L1467
3437:src/xeq.c     **** 	if (is_intmode()) {
 19933              		.loc 1 3437 46 view .LVU5151
 19934 0002 F0B5     		push	{r4, r5, r6, r7, lr}
 19935              		.cfi_def_cfa_offset 20
ARM GAS  /tmp/cc7LeJ71.s 			page 535


 19936              		.cfi_offset 4, -20
 19937              		.cfi_offset 5, -16
 19938              		.cfi_offset 6, -12
 19939              		.cfi_offset 7, -8
 19940              		.cfi_offset 14, -4
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19941              		.loc 1 3438 6 view .LVU5152
 19942 0004 1B68     		ldr	r3, [r3]
 19943 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19944              		.loc 1 3438 5 view .LVU5153
 19945 000a DB07     		lsls	r3, r3, #31
3437:src/xeq.c     **** 	if (is_intmode()) {
 19946              		.loc 1 3437 46 view .LVU5154
 19947 000c AFB0     		sub	sp, sp, #188
 19948              		.cfi_def_cfa_offset 208
3437:src/xeq.c     **** 	if (is_intmode()) {
 19949              		.loc 1 3437 46 view .LVU5155
 19950 000e 0C46     		mov	r4, r1
 19951 0010 0546     		mov	r5, r0
3438:src/xeq.c     **** 		long long int x = get_reg_n_int(arg);
 19952              		.loc 1 3438 5 view .LVU5156
 19953 0012 7BD4     		bmi	.L1459
 19954              	.LBB3035:
3460:src/xeq.c     **** 
 19955              		.loc 1 3460 3 is_stmt 1 view .LVU5157
3462:src/xeq.c     **** 
 19956              		.loc 1 3462 3 view .LVU5158
 19957 0014 2946     		mov	r1, r5
 19958              	.LVL1486:
3462:src/xeq.c     **** 
 19959              		.loc 1 3462 3 is_stmt 0 view .LVU5159
 19960 0016 6846     		mov	r0, sp
 19961              	.LVL1487:
3462:src/xeq.c     **** 
 19962              		.loc 1 3462 3 view .LVU5160
 19963 0018 FFF7FEFF 		bl	getRegister
 19964              	.LVL1488:
3466:src/xeq.c     **** 		decNumberTrunc(&n, &f);			// n = nnnnn
 19965              		.loc 1 3466 3 is_stmt 1 view .LVU5161
 19966 001c 6946     		mov	r1, sp
 19967 001e 12A8     		add	r0, sp, #72
 19968 0020 FFF7FEFF 		bl	dn_abs
 19969              	.LVL1489:
3467:src/xeq.c     **** 		dn_subtract(&u, &f, &n);		// u = .fffii
 19970              		.loc 1 3467 3 view .LVU5162
 19971 0024 12A9     		add	r1, sp, #72
 19972 0026 1BA8     		add	r0, sp, #108
 19973 0028 FFF7FEFF 		bl	decNumberTrunc
 19974              	.LVL1490:
3468:src/xeq.c     **** 		if (decNumberIsNegative(&x))
 19975              		.loc 1 3468 3 view .LVU5163
 19976 002c 1BAA     		add	r2, sp, #108
 19977 002e 12A9     		add	r1, sp, #72
 19978 0030 24A8     		add	r0, sp, #144
 19979 0032 FFF7FEFF 		bl	dn_subtract
 19980              	.LVL1491:
ARM GAS  /tmp/cc7LeJ71.s 			page 536


3469:src/xeq.c     **** 			dn_minus(&n, &n);
 19981              		.loc 1 3469 3 view .LVU5164
3469:src/xeq.c     **** 			dn_minus(&n, &n);
 19982              		.loc 1 3469 6 is_stmt 0 view .LVU5165
 19983 0036 9DF90830 		ldrsb	r3, [sp, #8]
 19984 003a 002B     		cmp	r3, #0
 19985 003c C0F29080 		blt	.L1460
 19986              	.L1437:
3471:src/xeq.c     **** 		decNumberTrunc(&f, &i);			// f = fff
 19987              		.loc 1 3471 3 is_stmt 1 view .LVU5166
 19988 0040 0322     		movs	r2, #3
 19989 0042 24A9     		add	r1, sp, #144
 19990 0044 09A8     		add	r0, sp, #36
 19991 0046 FFF7FEFF 		bl	dn_mulpow10
 19992              	.LVL1492:
3472:src/xeq.c     **** 		dn_subtract(&i, &i, &f);		// i = .ii
 19993              		.loc 1 3472 3 view .LVU5167
 19994 004a 09A9     		add	r1, sp, #36
 19995 004c 12A8     		add	r0, sp, #72
 19996 004e FFF7FEFF 		bl	decNumberTrunc
 19997              	.LVL1493:
3473:src/xeq.c     **** 		dn_mul100(&x, &i);
 19998              		.loc 1 3473 3 view .LVU5168
 19999 0052 09A9     		add	r1, sp, #36
 20000 0054 12AA     		add	r2, sp, #72
 20001 0056 0846     		mov	r0, r1
 20002 0058 FFF7FEFF 		bl	dn_subtract
 20003              	.LVL1494:
3474:src/xeq.c     **** 		decNumberTrunc(&i, &x);			// i = ii
 20004              		.loc 1 3474 3 view .LVU5169
 20005 005c 09A9     		add	r1, sp, #36
 20006 005e 6846     		mov	r0, sp
 20007 0060 FFF7FEFF 		bl	dn_mul100
 20008              	.LVL1495:
3475:src/xeq.c     **** 		if (dn_eq0(&i))
 20009              		.loc 1 3475 3 view .LVU5170
 20010 0064 6946     		mov	r1, sp
 20011 0066 09A8     		add	r0, sp, #36
 20012 0068 FFF7FEFF 		bl	decNumberTrunc
 20013              	.LVL1496:
3476:src/xeq.c     **** 			dn_1(&i);
 20014              		.loc 1 3476 3 view .LVU5171
3476:src/xeq.c     **** 			dn_1(&i);
 20015              		.loc 1 3476 7 is_stmt 0 view .LVU5172
 20016 006c 09A8     		add	r0, sp, #36
 20017 006e FFF7FEFF 		bl	dn_eq0
 20018              	.LVL1497:
3476:src/xeq.c     **** 			dn_1(&i);
 20019              		.loc 1 3476 6 view .LVU5173
 20020 0072 98BB     		cbnz	r0, .L1461
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20021              		.loc 1 3479 3 is_stmt 1 view .LVU5174
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20022              		.loc 1 3480 4 is_stmt 0 view .LVU5175
 20023 0074 1BA9     		add	r1, sp, #108
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20024              		.loc 1 3479 6 view .LVU5176
ARM GAS  /tmp/cc7LeJ71.s 			page 537


 20025 0076 3B2C     		cmp	r4, #59
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20026              		.loc 1 3480 4 view .LVU5177
 20027 0078 09AA     		add	r2, sp, #36
 20028 007a 0846     		mov	r0, r1
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20029              		.loc 1 3479 6 view .LVU5178
 20030 007c 36D0     		beq	.L1439
 20031              	.L1464:
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20032              		.loc 1 3479 22 discriminator 1 view .LVU5179
 20033 007e 3D2C     		cmp	r4, #61
 20034 0080 1DD1     		bne	.L1440
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20035              		.loc 1 3480 4 is_stmt 1 view .LVU5180
 20036 0082 FFF7FEFF 		bl	dn_add
 20037              	.LVL1498:
3481:src/xeq.c     **** 			if (op == RARG_ISE)
 20038              		.loc 1 3481 4 view .LVU5181
 20039 0086 1BAA     		add	r2, sp, #108
 20040 0088 12A9     		add	r1, sp, #72
 20041 008a 6846     		mov	r0, sp
 20042 008c FFF7FEFF 		bl	dn_compare
 20043              	.LVL1499:
3482:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 20044              		.loc 1 3482 4 view .LVU5182
3483:src/xeq.c     **** 			else
 20045              		.loc 1 3483 5 view .LVU5183
3483:src/xeq.c     **** 			else
 20046              		.loc 1 3483 13 is_stmt 0 view .LVU5184
 20047 0090 6846     		mov	r0, sp
 20048 0092 FFF7FEFF 		bl	dn_le0
 20049              	.LVL1500:
3483:src/xeq.c     **** 			else
 20050              		.loc 1 3483 5 view .LVU5185
 20051 0096 B0FA80F0 		clz	r0, r0
 20052 009a 4009     		lsrs	r0, r0, #5
 20053 009c FFF7FEFF 		bl	fin_tst
 20054              	.LVL1501:
 20055              	.L1441:
3496:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20056              		.loc 1 3496 3 is_stmt 1 view .LVU5186
3496:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20057              		.loc 1 3496 6 is_stmt 0 view .LVU5187
 20058 00a0 9DF97430 		ldrsb	r3, [sp, #116]
 20059 00a4 002B     		cmp	r3, #0
3497:src/xeq.c     **** 		} else
 20060              		.loc 1 3497 4 view .LVU5188
 20061 00a6 24AA     		add	r2, sp, #144
 20062 00a8 1BA9     		add	r1, sp, #108
 20063 00aa 6846     		mov	r0, sp
3496:src/xeq.c     **** 			dn_subtract(&x, &n, &u);
 20064              		.loc 1 3496 6 view .LVU5189
 20065 00ac 55DB     		blt	.L1462
3499:src/xeq.c     **** 		setRegister(arg, &x);
 20066              		.loc 1 3499 4 is_stmt 1 view .LVU5190
 20067 00ae FFF7FEFF 		bl	dn_add
ARM GAS  /tmp/cc7LeJ71.s 			page 538


 20068              	.LVL1502:
 20069              	.L1444:
3500:src/xeq.c     **** 	}
 20070              		.loc 1 3500 3 discriminator 2 view .LVU5191
 20071 00b2 6946     		mov	r1, sp
 20072 00b4 2846     		mov	r0, r5
 20073 00b6 FFF7FEFF 		bl	setRegister
 20074              	.LVL1503:
 20075              	.L1427:
3500:src/xeq.c     **** 	}
 20076              		.loc 1 3500 3 is_stmt 0 discriminator 2 view .LVU5192
 20077              	.LBE3035:
3502:src/xeq.c     **** 
 20078              		.loc 1 3502 1 view .LVU5193
 20079 00ba 2FB0     		add	sp, sp, #188
 20080              		.cfi_remember_state
 20081              		.cfi_def_cfa_offset 20
 20082              		@ sp needed
 20083 00bc F0BD     		pop	{r4, r5, r6, r7, pc}
 20084              	.LVL1504:
 20085              	.L1440:
 20086              		.cfi_restore_state
 20087              	.LBB3036:
3487:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20088              		.loc 1 3487 4 is_stmt 1 view .LVU5194
 20089 00be FFF7FEFF 		bl	dn_subtract
 20090              	.LVL1505:
3488:src/xeq.c     **** 			if (op == RARG_DSL)
 20091              		.loc 1 3488 4 view .LVU5195
 20092 00c2 1BAA     		add	r2, sp, #108
 20093 00c4 12A9     		add	r1, sp, #72
 20094 00c6 6846     		mov	r0, sp
 20095 00c8 FFF7FEFF 		bl	dn_compare
 20096              	.LVL1506:
3489:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20097              		.loc 1 3489 4 view .LVU5196
3489:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20098              		.loc 1 3489 7 is_stmt 0 view .LVU5197
 20099 00cc 3C2C     		cmp	r4, #60
3490:src/xeq.c     **** 			else
 20100              		.loc 1 3490 5 view .LVU5198
 20101 00ce 6846     		mov	r0, sp
3489:src/xeq.c     **** 				fin_tst(dn_le0(&x));
 20102              		.loc 1 3489 7 view .LVU5199
 20103 00d0 6AD0     		beq	.L1463
3492:src/xeq.c     **** 		}
 20104              		.loc 1 3492 5 is_stmt 1 view .LVU5200
 20105 00d2 FFF7FEFF 		bl	dn_lt0
 20106              	.LVL1507:
 20107 00d6 FFF7FEFF 		bl	fin_tst
 20108              	.LVL1508:
 20109 00da E1E7     		b	.L1441
 20110              	.L1461:
3477:src/xeq.c     **** 
 20111              		.loc 1 3477 4 view .LVU5201
 20112 00dc 09A8     		add	r0, sp, #36
 20113 00de FFF7FEFF 		bl	dn_1
ARM GAS  /tmp/cc7LeJ71.s 			page 539


 20114              	.LVL1509:
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20115              		.loc 1 3479 3 view .LVU5202
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20116              		.loc 1 3480 4 is_stmt 0 view .LVU5203
 20117 00e2 1BA9     		add	r1, sp, #108
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20118              		.loc 1 3479 6 view .LVU5204
 20119 00e4 3B2C     		cmp	r4, #59
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20120              		.loc 1 3480 4 view .LVU5205
 20121 00e6 09AA     		add	r2, sp, #36
 20122 00e8 0846     		mov	r0, r1
3479:src/xeq.c     **** 			dn_add(&n, &n, &i);
 20123              		.loc 1 3479 6 view .LVU5206
 20124 00ea C8D1     		bne	.L1464
 20125              	.L1439:
3480:src/xeq.c     **** 			dn_compare(&x, &f, &n);
 20126              		.loc 1 3480 4 is_stmt 1 view .LVU5207
 20127 00ec FFF7FEFF 		bl	dn_add
 20128              	.LVL1510:
3481:src/xeq.c     **** 			if (op == RARG_ISE)
 20129              		.loc 1 3481 4 view .LVU5208
 20130 00f0 1BAA     		add	r2, sp, #108
 20131 00f2 12A9     		add	r1, sp, #72
 20132 00f4 6846     		mov	r0, sp
 20133 00f6 FFF7FEFF 		bl	dn_compare
 20134              	.LVL1511:
3482:src/xeq.c     **** 				fin_tst(dn_gt0(&x));
 20135              		.loc 1 3482 4 view .LVU5209
3485:src/xeq.c     **** 		} else {
 20136              		.loc 1 3485 5 view .LVU5210
3485:src/xeq.c     **** 		} else {
 20137              		.loc 1 3485 13 is_stmt 0 view .LVU5211
 20138 00fa 6846     		mov	r0, sp
 20139 00fc FFF7FEFF 		bl	dn_lt0
 20140              	.LVL1512:
3485:src/xeq.c     **** 		} else {
 20141              		.loc 1 3485 5 view .LVU5212
 20142 0100 B0FA80F0 		clz	r0, r0
 20143 0104 4009     		lsrs	r0, r0, #5
 20144 0106 FFF7FEFF 		bl	fin_tst
 20145              	.LVL1513:
 20146 010a C9E7     		b	.L1441
 20147              	.LVL1514:
 20148              	.L1459:
3485:src/xeq.c     **** 		} else {
 20149              		.loc 1 3485 5 view .LVU5213
 20150              	.LBE3036:
 20151              	.LBB3037:
3439:src/xeq.c     **** 		int xs;
 20152              		.loc 1 3439 3 is_stmt 1 view .LVU5214
3439:src/xeq.c     **** 		int xs;
 20153              		.loc 1 3439 21 is_stmt 0 view .LVU5215
 20154 010c FFF7FEFF 		bl	get_reg_n_int
 20155              	.LVL1515:
3440:src/xeq.c     **** 		unsigned long long int xv;
ARM GAS  /tmp/cc7LeJ71.s 			page 540


 20156              		.loc 1 3440 3 is_stmt 1 view .LVU5216
3441:src/xeq.c     **** 
 20157              		.loc 1 3441 3 view .LVU5217
3443:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20158              		.loc 1 3443 3 view .LVU5218
3443:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20159              		.loc 1 3443 6 is_stmt 0 view .LVU5219
 20160 0110 3B2C     		cmp	r4, #59
3444:src/xeq.c     **** 		else
 20161              		.loc 1 3444 8 view .LVU5220
 20162 0112 4FF00102 		mov	r2, #1
 20163 0116 4FF00003 		mov	r3, #0
3443:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20164              		.loc 1 3443 6 view .LVU5221
 20165 011a 4AD0     		beq	.L1429
3443:src/xeq.c     **** 			x = intAdd(x, 1LL);
 20166              		.loc 1 3443 22 discriminator 1 view .LVU5222
 20167 011c 3D2C     		cmp	r4, #61
 20168 011e 24D1     		bne	.L1465
3444:src/xeq.c     **** 		else
 20169              		.loc 1 3444 4 is_stmt 1 view .LVU5223
3444:src/xeq.c     **** 		else
 20170              		.loc 1 3444 8 is_stmt 0 view .LVU5224
 20171 0120 FFF7FEFF 		bl	intAdd
 20172              	.LVL1516:
3444:src/xeq.c     **** 		else
 20173              		.loc 1 3444 8 view .LVU5225
 20174 0124 0646     		mov	r6, r0
 20175              	.LBB3038:
 20176              	.LBB3039:
1423:src/xeq.c     **** }
 20177              		.loc 1 1423 8 view .LVU5226
 20178 0126 2846     		mov	r0, r5
 20179              	.LBE3039:
 20180              	.LBE3038:
3444:src/xeq.c     **** 		else
 20181              		.loc 1 3444 8 view .LVU5227
 20182 0128 0C46     		mov	r4, r1
 20183              	.LVL1517:
3447:src/xeq.c     **** 
 20184              		.loc 1 3447 3 is_stmt 1 view .LVU5228
3447:src/xeq.c     **** 
 20185              		.loc 1 3447 3 is_stmt 0 view .LVU5229
 20186 012a CDE92461 		strd	r6, r1, [sp, #144]
 20187              	.LVL1518:
 20188              	.LBB3045:
 20189              	.LBI3038:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20190              		.loc 1 1422 6 is_stmt 1 view .LVU5230
 20191              	.LBB3040:
1423:src/xeq.c     **** }
 20192              		.loc 1 1423 2 view .LVU5231
1423:src/xeq.c     **** }
 20193              		.loc 1 1423 8 is_stmt 0 view .LVU5232
 20194 012e FFF7FEFF 		bl	get_reg_n
 20195              	.LVL1519:
1423:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 541


 20196              		.loc 1 1423 2 view .LVU5233
 20197 0132 24A9     		add	r1, sp, #144
 20198 0134 0822     		movs	r2, #8
 20199 0136 FFF7FEFF 		bl	xcopy
 20200              	.LVL1520:
1423:src/xeq.c     **** }
 20201              		.loc 1 1423 2 view .LVU5234
 20202              	.LBE3040:
 20203              	.LBE3045:
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20204              		.loc 1 3449 3 is_stmt 1 view .LVU5235
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20205              		.loc 1 3449 8 is_stmt 0 view .LVU5236
 20206 013a 24AA     		add	r2, sp, #144
 20207 013c 3046     		mov	r0, r6
 20208 013e 2146     		mov	r1, r4
 20209 0140 FFF7FEFF 		bl	extract_value
 20210              	.LVL1521:
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20211              		.loc 1 3455 18 view .LVU5237
 20212 0144 249B     		ldr	r3, [sp, #144]
 20213              	.LVL1522:
3450:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20214              		.loc 1 3450 3 is_stmt 1 view .LVU5238
3452:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20215              		.loc 1 3452 8 view .LVU5239
3454:src/xeq.c     **** 			fin_tst(! (xs == 0 || xv == 0));	// >= 0
 20216              		.loc 1 3454 8 view .LVU5240
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20217              		.loc 1 3455 4 view .LVU5241
 20218 0146 23B1     		cbz	r3, .L1448
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20219              		.loc 1 3455 4 is_stmt 0 discriminator 1 view .LVU5242
 20220 0148 50EA0103 		orrs	r3, r0, r1
 20221 014c 14BF     		ite	ne
 20222 014e 0123     		movne	r3, #1
 20223 0150 0023     		moveq	r3, #0
 20224              	.L1448:
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20225              		.loc 1 3455 4 discriminator 6 view .LVU5243
 20226 0152 1846     		mov	r0, r3
 20227              	.LVL1523:
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20228              		.loc 1 3455 4 discriminator 6 view .LVU5244
 20229 0154 FFF7FEFF 		bl	fin_tst
 20230              	.LVL1524:
 20231 0158 AFE7     		b	.L1427
 20232              	.L1462:
3455:src/xeq.c     **** 		else // if (op == RARG_DSL)
 20233              		.loc 1 3455 4 discriminator 6 view .LVU5245
 20234              	.LBE3037:
 20235              	.LBB3050:
3497:src/xeq.c     **** 		} else
 20236              		.loc 1 3497 4 is_stmt 1 view .LVU5246
 20237 015a FFF7FEFF 		bl	dn_subtract
 20238              	.LVL1525:
 20239 015e A8E7     		b	.L1444
ARM GAS  /tmp/cc7LeJ71.s 			page 542


 20240              	.L1460:
3470:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20241              		.loc 1 3470 4 view .LVU5247
 20242 0160 1BA9     		add	r1, sp, #108
 20243 0162 0846     		mov	r0, r1
 20244 0164 FFF7FEFF 		bl	dn_minus
 20245              	.LVL1526:
 20246 0168 6AE7     		b	.L1437
 20247              	.LVL1527:
 20248              	.L1465:
3470:src/xeq.c     **** 		dn_mulpow10(&i, &u, 3);			// i = fff.ii
 20249              		.loc 1 3470 4 is_stmt 0 view .LVU5248
 20250              	.LBE3050:
 20251              	.LBB3051:
3446:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20252              		.loc 1 3446 4 is_stmt 1 view .LVU5249
3446:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20253              		.loc 1 3446 8 is_stmt 0 view .LVU5250
 20254 016a FFF7FEFF 		bl	intSubtract
 20255              	.LVL1528:
3446:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20256              		.loc 1 3446 8 view .LVU5251
 20257 016e 0746     		mov	r7, r0
 20258              	.LBB3046:
 20259              	.LBB3041:
1423:src/xeq.c     **** }
 20260              		.loc 1 1423 8 view .LVU5252
 20261 0170 2846     		mov	r0, r5
 20262              	.LBE3041:
 20263              	.LBE3046:
3446:src/xeq.c     **** 		set_reg_n_int(arg, x);
 20264              		.loc 1 3446 8 view .LVU5253
 20265 0172 0E46     		mov	r6, r1
 20266              	.LVL1529:
3447:src/xeq.c     **** 
 20267              		.loc 1 3447 3 is_stmt 1 view .LVU5254
3447:src/xeq.c     **** 
 20268              		.loc 1 3447 3 is_stmt 0 view .LVU5255
 20269 0174 CDE92471 		strd	r7, r1, [sp, #144]
 20270              	.LVL1530:
 20271              	.LBB3047:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20272              		.loc 1 1422 6 is_stmt 1 view .LVU5256
 20273              	.LBB3042:
1423:src/xeq.c     **** }
 20274              		.loc 1 1423 2 view .LVU5257
1423:src/xeq.c     **** }
 20275              		.loc 1 1423 8 is_stmt 0 view .LVU5258
 20276 0178 FFF7FEFF 		bl	get_reg_n
 20277              	.LVL1531:
1423:src/xeq.c     **** }
 20278              		.loc 1 1423 2 view .LVU5259
 20279 017c 24A9     		add	r1, sp, #144
 20280 017e 0822     		movs	r2, #8
 20281 0180 FFF7FEFF 		bl	xcopy
 20282              	.LVL1532:
1423:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 543


 20283              		.loc 1 1423 2 view .LVU5260
 20284              	.LBE3042:
 20285              	.LBE3047:
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20286              		.loc 1 3449 3 is_stmt 1 view .LVU5261
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20287              		.loc 1 3449 8 is_stmt 0 view .LVU5262
 20288 0184 24AA     		add	r2, sp, #144
 20289 0186 3846     		mov	r0, r7
 20290 0188 3146     		mov	r1, r6
 20291 018a FFF7FEFF 		bl	extract_value
 20292              	.LVL1533:
3450:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20293              		.loc 1 3450 3 is_stmt 1 view .LVU5263
3452:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20294              		.loc 1 3452 8 view .LVU5264
3452:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20295              		.loc 1 3452 11 is_stmt 0 view .LVU5265
 20296 018e 3A2C     		cmp	r4, #58
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20297              		.loc 1 3453 4 view .LVU5266
 20298 0190 249B     		ldr	r3, [sp, #144]
3452:src/xeq.c     **** 			fin_tst(! (xs != 0 || xv == 0));	// <= 0
 20299              		.loc 1 3452 11 view .LVU5267
 20300 0192 25D0     		beq	.L1466
3457:src/xeq.c     **** 		return;
 20301              		.loc 1 3457 4 is_stmt 1 view .LVU5268
 20302 0194 13B3     		cbz	r3, .L1450
 20303              	.LVL1534:
 20304              	.L1458:
3457:src/xeq.c     **** 		return;
 20305              		.loc 1 3457 4 is_stmt 0 discriminator 2 view .LVU5269
 20306 0196 50EA0103 		orrs	r3, r0, r1
 20307 019a 0CBF     		ite	eq
 20308 019c 0120     		moveq	r0, #1
 20309 019e 0020     		movne	r0, #0
 20310              	.L1435:
3457:src/xeq.c     **** 		return;
 20311              		.loc 1 3457 4 discriminator 6 view .LVU5270
 20312 01a0 FFF7FEFF 		bl	fin_tst
 20313              	.LVL1535:
3458:src/xeq.c     **** 	} else {
 20314              		.loc 1 3458 3 is_stmt 1 discriminator 6 view .LVU5271
 20315              	.LBE3051:
3502:src/xeq.c     **** 
 20316              		.loc 1 3502 1 is_stmt 0 discriminator 6 view .LVU5272
 20317 01a4 2FB0     		add	sp, sp, #188
 20318              		.cfi_remember_state
 20319              		.cfi_def_cfa_offset 20
 20320              		@ sp needed
 20321 01a6 F0BD     		pop	{r4, r5, r6, r7, pc}
 20322              	.LVL1536:
 20323              	.L1463:
 20324              		.cfi_restore_state
 20325              	.LBB3052:
3490:src/xeq.c     **** 			else
 20326              		.loc 1 3490 5 is_stmt 1 view .LVU5273
ARM GAS  /tmp/cc7LeJ71.s 			page 544


 20327 01a8 FFF7FEFF 		bl	dn_le0
 20328              	.LVL1537:
 20329 01ac FFF7FEFF 		bl	fin_tst
 20330              	.LVL1538:
 20331 01b0 76E7     		b	.L1441
 20332              	.LVL1539:
 20333              	.L1429:
3490:src/xeq.c     **** 			else
 20334              		.loc 1 3490 5 is_stmt 0 view .LVU5274
 20335              	.LBE3052:
 20336              	.LBB3053:
3444:src/xeq.c     **** 		else
 20337              		.loc 1 3444 4 is_stmt 1 view .LVU5275
3444:src/xeq.c     **** 		else
 20338              		.loc 1 3444 8 is_stmt 0 view .LVU5276
 20339 01b2 FFF7FEFF 		bl	intAdd
 20340              	.LVL1540:
3444:src/xeq.c     **** 		else
 20341              		.loc 1 3444 8 view .LVU5277
 20342 01b6 0646     		mov	r6, r0
 20343              	.LBB3048:
 20344              	.LBB3043:
1423:src/xeq.c     **** }
 20345              		.loc 1 1423 8 view .LVU5278
 20346 01b8 2846     		mov	r0, r5
 20347              	.LBE3043:
 20348              	.LBE3048:
3444:src/xeq.c     **** 		else
 20349              		.loc 1 3444 8 view .LVU5279
 20350 01ba 0C46     		mov	r4, r1
 20351              	.LVL1541:
3447:src/xeq.c     **** 
 20352              		.loc 1 3447 3 is_stmt 1 view .LVU5280
3447:src/xeq.c     **** 
 20353              		.loc 1 3447 3 is_stmt 0 view .LVU5281
 20354 01bc CDE92461 		strd	r6, r1, [sp, #144]
 20355              	.LVL1542:
 20356              	.LBB3049:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 20357              		.loc 1 1422 6 is_stmt 1 view .LVU5282
 20358              	.LBB3044:
1423:src/xeq.c     **** }
 20359              		.loc 1 1423 2 view .LVU5283
1423:src/xeq.c     **** }
 20360              		.loc 1 1423 8 is_stmt 0 view .LVU5284
 20361 01c0 FFF7FEFF 		bl	get_reg_n
 20362              	.LVL1543:
1423:src/xeq.c     **** }
 20363              		.loc 1 1423 2 view .LVU5285
 20364 01c4 24A9     		add	r1, sp, #144
 20365 01c6 0822     		movs	r2, #8
 20366 01c8 FFF7FEFF 		bl	xcopy
 20367              	.LVL1544:
1423:src/xeq.c     **** }
 20368              		.loc 1 1423 2 view .LVU5286
 20369              	.LBE3044:
 20370              	.LBE3049:
ARM GAS  /tmp/cc7LeJ71.s 			page 545


3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20371              		.loc 1 3449 3 is_stmt 1 view .LVU5287
3449:src/xeq.c     **** 		if (op == RARG_ISG)
 20372              		.loc 1 3449 8 is_stmt 0 view .LVU5288
 20373 01cc 24AA     		add	r2, sp, #144
 20374 01ce 3046     		mov	r0, r6
 20375 01d0 2146     		mov	r1, r4
 20376 01d2 FFF7FEFF 		bl	extract_value
 20377              	.LVL1545:
3451:src/xeq.c     **** 		else if (op == RARG_DSE)
 20378              		.loc 1 3451 4 view .LVU5289
 20379 01d6 249B     		ldr	r3, [sp, #144]
 20380              	.LVL1546:
3450:src/xeq.c     **** 			fin_tst(! (xs == 0 && xv > 0));		// > 0
 20381              		.loc 1 3450 3 is_stmt 1 view .LVU5290
3451:src/xeq.c     **** 		else if (op == RARG_DSE)
 20382              		.loc 1 3451 4 view .LVU5291
 20383 01d8 002B     		cmp	r3, #0
 20384 01da DCD0     		beq	.L1458
 20385              	.LVL1547:
 20386              	.L1450:
3457:src/xeq.c     **** 		return;
 20387              		.loc 1 3457 4 is_stmt 0 view .LVU5292
 20388 01dc 0120     		movs	r0, #1
 20389 01de DFE7     		b	.L1435
 20390              	.LVL1548:
 20391              	.L1466:
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20392              		.loc 1 3453 4 is_stmt 1 view .LVU5293
 20393 01e0 2BB9     		cbnz	r3, .L1449
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20394              		.loc 1 3453 4 is_stmt 0 discriminator 1 view .LVU5294
 20395 01e2 50EA0103 		orrs	r3, r0, r1
 20396 01e6 14BF     		ite	ne
 20397 01e8 0120     		movne	r0, #1
 20398              	.LVL1549:
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20399              		.loc 1 3453 4 discriminator 1 view .LVU5295
 20400 01ea 0020     		moveq	r0, #0
 20401 01ec D8E7     		b	.L1435
 20402              	.LVL1550:
 20403              	.L1449:
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20404              		.loc 1 3453 4 view .LVU5296
 20405 01ee 0020     		movs	r0, #0
 20406              	.LVL1551:
3453:src/xeq.c     **** 		else if (op == RARG_ISE)
 20407              		.loc 1 3453 4 view .LVU5297
 20408 01f0 D6E7     		b	.L1435
 20409              	.L1468:
 20410 01f2 00BF     		.align	2
 20411              	.L1467:
 20412 01f4 00000000 		.word	main_ram
 20413              	.LBE3053:
 20414              		.cfi_endproc
 20415              	.LFE196:
 20417              		.section	.text.op_shift_digit,"ax",%progbits
ARM GAS  /tmp/cc7LeJ71.s 			page 546


 20418              		.align	1
 20419              		.p2align 2,,3
 20420              		.global	op_shift_digit
 20421              		.syntax unified
 20422              		.thumb
 20423              		.thumb_func
 20424              		.fpu fpv4-sp-d16
 20426              	op_shift_digit:
 20427              	.LVL1552:
 20428              	.LFB197:
3507:src/xeq.c     **** 	decNumber x;
 20429              		.loc 1 3507 51 is_stmt 1 view -0
 20430              		.cfi_startproc
 20431              		@ args = 0, pretend = 0, frame = 40
 20432              		@ frame_needed = 0, uses_anonymous_args = 0
3508:src/xeq.c     **** 	int adjust = n;
 20433              		.loc 1 3508 2 view .LVU5299
3509:src/xeq.c     **** 
 20434              		.loc 1 3509 2 view .LVU5300
3511:src/xeq.c     **** 		bad_mode_error();
 20435              		.loc 1 3511 6 is_stmt 0 view .LVU5301
 20436 0000 174B     		ldr	r3, .L1478
 20437 0002 1B68     		ldr	r3, [r3]
 20438 0004 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 20439              	.LVL1553:
3511:src/xeq.c     **** 		bad_mode_error();
 20440              		.loc 1 3511 2 is_stmt 1 view .LVU5302
3511:src/xeq.c     **** 		bad_mode_error();
 20441              		.loc 1 3511 5 is_stmt 0 view .LVU5303
 20442 0008 DB07     		lsls	r3, r3, #31
 20443 000a 06D5     		bpl	.L1470
3512:src/xeq.c     **** 		return;
 20444              		.loc 1 3512 3 is_stmt 1 view .LVU5304
 20445              	.LBB3065:
 20446              	.LBI3065:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 20447              		.loc 1 575 6 view .LVU5305
 20448              	.LBE3065:
 576:src/xeq.c     **** }
 20449              		.loc 1 576 2 view .LVU5306
 20450              	.LVL1554:
 20451              	.LBB3070:
 20452              	.LBB3066:
 20453              	.LBI3066:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20454              		.loc 1 546 5 view .LVU5307
 20455              	.LBB3067:
 547:src/xeq.c     **** 		Error = e;
 20456              		.loc 1 547 2 view .LVU5308
 547:src/xeq.c     **** 		Error = e;
 20457              		.loc 1 547 12 is_stmt 0 view .LVU5309
 20458 000c 154B     		ldr	r3, .L1478+4
 547:src/xeq.c     **** 		Error = e;
 20459              		.loc 1 547 5 view .LVU5310
 20460 000e 1A68     		ldr	r2, [r3]
 20461 0010 12B9     		cbnz	r2, .L1476
 20462              	.LVL1555:
ARM GAS  /tmp/cc7LeJ71.s 			page 547


 20463              	.LBB3068:
 20464              	.LBI3068:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 20465              		.loc 1 546 5 is_stmt 1 view .LVU5311
 20466              	.LBB3069:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 20467              		.loc 1 548 3 view .LVU5312
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 20468              		.loc 1 548 9 is_stmt 0 view .LVU5313
 20469 0012 0D22     		movs	r2, #13
 20470 0014 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 20471              		.loc 1 549 3 is_stmt 1 view .LVU5314
 20472 0016 7047     		bx	lr
 20473              	.LVL1556:
 20474              	.L1476:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 20475              		.loc 1 549 3 is_stmt 0 view .LVU5315
 20476 0018 7047     		bx	lr
 20477              	.LVL1557:
 20478              	.L1470:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 20479              		.loc 1 549 3 view .LVU5316
 20480              	.LBE3069:
 20481              	.LBE3068:
 20482              	.LBE3067:
 20483              	.LBE3066:
 20484              	.LBE3070:
3515:src/xeq.c     **** 	setlastX();
 20485              		.loc 1 3515 2 is_stmt 1 view .LVU5317
3507:src/xeq.c     **** 	decNumber x;
 20486              		.loc 1 3507 51 is_stmt 0 view .LVU5318
 20487 001a 30B5     		push	{r4, r5, lr}
 20488              		.cfi_def_cfa_offset 12
 20489              		.cfi_offset 4, -12
 20490              		.cfi_offset 5, -8
 20491              		.cfi_offset 14, -4
 20492 001c 8BB0     		sub	sp, sp, #44
 20493              		.cfi_def_cfa_offset 56
 20494              	.LVL1558:
 20495              	.LBB3071:
 20496              	.LBI3071:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 20497              		.loc 1 824 12 is_stmt 1 view .LVU5319
 20498              	.LBB3072:
 825:src/xeq.c     **** }
 20499              		.loc 1 825 2 view .LVU5320
 20500 001e 0446     		mov	r4, r0
 20501 0020 0D46     		mov	r5, r1
 825:src/xeq.c     **** }
 20502              		.loc 1 825 9 is_stmt 0 view .LVU5321
 20503 0022 01A8     		add	r0, sp, #4
 20504              	.LVL1559:
 825:src/xeq.c     **** }
 20505              		.loc 1 825 9 view .LVU5322
 20506 0024 6421     		movs	r1, #100
 20507              	.LVL1560:
ARM GAS  /tmp/cc7LeJ71.s 			page 548


 825:src/xeq.c     **** }
 20508              		.loc 1 825 9 view .LVU5323
 20509 0026 FFF7FEFF 		bl	getRegister
 20510              	.LVL1561:
 825:src/xeq.c     **** }
 20511              		.loc 1 825 9 view .LVU5324
 20512              	.LBE3072:
 20513              	.LBE3071:
3516:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || dn_eq0(&x))
 20514              		.loc 1 3516 2 is_stmt 1 view .LVU5325
 20515              	.LBB3073:
 20516              	.LBI3073:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 20517              		.loc 1 792 6 view .LVU5326
 20518              	.LBB3074:
 793:src/xeq.c     **** }
 20519              		.loc 1 793 2 view .LVU5327
 20520 002a 6421     		movs	r1, #100
 20521 002c 6C20     		movs	r0, #108
 20522 002e FFF7FEFF 		bl	copyreg_n
 20523              	.LVL1562:
 20524              	.LBE3074:
 20525              	.LBE3073:
3517:src/xeq.c     **** 		return;
 20526              		.loc 1 3517 2 view .LVU5328
3517:src/xeq.c     **** 		return;
 20527              		.loc 1 3517 5 is_stmt 0 view .LVU5329
 20528 0032 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 20529 0036 13F0700F 		tst	r3, #112
 20530 003a 0ED1     		bne	.L1469
3517:src/xeq.c     **** 		return;
 20531              		.loc 1 3517 32 discriminator 1 view .LVU5330
 20532 003c 01A8     		add	r0, sp, #4
 20533 003e FFF7FEFF 		bl	dn_eq0
 20534              	.LVL1563:
3517:src/xeq.c     **** 		return;
 20535              		.loc 1 3517 29 discriminator 1 view .LVU5331
 20536 0042 50B9     		cbnz	r0, .L1469
3519:src/xeq.c     **** 		adjust = -adjust;
 20537              		.loc 1 3519 5 view .LVU5332
 20538 0044 722D     		cmp	r5, #114
3509:src/xeq.c     **** 
 20539              		.loc 1 3509 6 view .LVU5333
 20540 0046 2046     		mov	r0, r4
3519:src/xeq.c     **** 		adjust = -adjust;
 20541              		.loc 1 3519 2 is_stmt 1 view .LVU5334
3520:src/xeq.c     **** 	x.exponent += adjust;
 20542              		.loc 1 3520 3 view .LVU5335
3520:src/xeq.c     **** 	x.exponent += adjust;
 20543              		.loc 1 3520 10 is_stmt 0 view .LVU5336
 20544 0048 08BF     		it	eq
 20545 004a 6042     		rsbeq	r0, r4, #0
 20546              	.LVL1564:
3521:src/xeq.c     **** 	setX(&x);
 20547              		.loc 1 3521 2 is_stmt 1 view .LVU5337
3521:src/xeq.c     **** 	setX(&x);
 20548              		.loc 1 3521 13 is_stmt 0 view .LVU5338
ARM GAS  /tmp/cc7LeJ71.s 			page 549


 20549 004c 029C     		ldr	r4, [sp, #8]
 20550              	.LVL1565:
 20551              	.LBB3075:
 20552              	.LBB3076:
 829:src/xeq.c     **** }
 20553              		.loc 1 829 2 view .LVU5339
 20554 004e 01A9     		add	r1, sp, #4
 20555              	.LBE3076:
 20556              	.LBE3075:
3521:src/xeq.c     **** 	setX(&x);
 20557              		.loc 1 3521 13 view .LVU5340
 20558 0050 0444     		add	r4, r4, r0
 20559              	.LBB3079:
 20560              	.LBB3077:
 829:src/xeq.c     **** }
 20561              		.loc 1 829 2 view .LVU5341
 20562 0052 6420     		movs	r0, #100
 20563              	.LVL1566:
 829:src/xeq.c     **** }
 20564              		.loc 1 829 2 view .LVU5342
 20565              	.LBE3077:
 20566              	.LBE3079:
3521:src/xeq.c     **** 	setX(&x);
 20567              		.loc 1 3521 13 view .LVU5343
 20568 0054 0294     		str	r4, [sp, #8]
3522:src/xeq.c     **** }
 20569              		.loc 1 3522 2 is_stmt 1 view .LVU5344
 20570              	.LVL1567:
 20571              	.LBB3080:
 20572              	.LBI3075:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 20573              		.loc 1 828 6 view .LVU5345
 20574              	.LBB3078:
 829:src/xeq.c     **** }
 20575              		.loc 1 829 2 view .LVU5346
 20576 0056 FFF7FEFF 		bl	setRegister
 20577              	.LVL1568:
 20578              	.L1469:
 829:src/xeq.c     **** }
 20579              		.loc 1 829 2 is_stmt 0 view .LVU5347
 20580              	.LBE3078:
 20581              	.LBE3080:
3523:src/xeq.c     **** 
 20582              		.loc 1 3523 1 view .LVU5348
 20583 005a 0BB0     		add	sp, sp, #44
 20584              		.cfi_def_cfa_offset 12
 20585              		@ sp needed
 20586 005c 30BD     		pop	{r4, r5, pc}
 20587              	.L1479:
 20588 005e 00BF     		.align	2
 20589              	.L1478:
 20590 0060 00000000 		.word	main_ram
 20591 0064 00000000 		.word	Error
 20592              		.cfi_endproc
 20593              	.LFE197:
 20595              		.section	.text.get_user_flag,"ax",%progbits
 20596              		.align	1
ARM GAS  /tmp/cc7LeJ71.s 			page 550


 20597              		.p2align 2,,3
 20598              		.global	get_user_flag
 20599              		.syntax unified
 20600              		.thumb
 20601              		.thumb_func
 20602              		.fpu fpv4-sp-d16
 20604              	get_user_flag:
 20605              	.LVL1569:
 20606              	.LFB199:
3556:src/xeq.c     **** 	unsigned short mask;
 20607              		.loc 1 3556 26 is_stmt 1 view -0
 20608              		.cfi_startproc
 20609              		@ args = 0, pretend = 0, frame = 8
 20610              		@ frame_needed = 0, uses_anonymous_args = 0
3557:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 20611              		.loc 1 3557 2 view .LVU5350
3558:src/xeq.c     **** 
 20612              		.loc 1 3558 2 view .LVU5351
3556:src/xeq.c     **** 	unsigned short mask;
 20613              		.loc 1 3556 26 is_stmt 0 view .LVU5352
 20614 0000 00B5     		push	{lr}
 20615              		.cfi_def_cfa_offset 4
 20616              		.cfi_offset 14, -4
 20617 0002 83B0     		sub	sp, sp, #12
 20618              		.cfi_def_cfa_offset 16
3558:src/xeq.c     **** 
 20619              		.loc 1 3558 34 view .LVU5353
 20620 0004 0DF10601 		add	r1, sp, #6
 20621 0008 FFF7FEFF 		bl	flag_word
 20622              	.LVL1570:
3560:src/xeq.c     **** }
 20623              		.loc 1 3560 2 is_stmt 1 view .LVU5354
3560:src/xeq.c     **** }
 20624              		.loc 1 3560 24 is_stmt 0 view .LVU5355
 20625 000c BDF80630 		ldrh	r3, [sp, #6]
 20626 0010 0288     		ldrh	r2, [r0]
 20627 0012 1A42     		tst	r2, r3
3561:src/xeq.c     **** 
 20628              		.loc 1 3561 1 view .LVU5356
 20629 0014 14BF     		ite	ne
 20630 0016 0120     		movne	r0, #1
 20631              	.LVL1571:
3561:src/xeq.c     **** 
 20632              		.loc 1 3561 1 view .LVU5357
 20633 0018 0020     		moveq	r0, #0
 20634 001a 03B0     		add	sp, sp, #12
 20635              		.cfi_def_cfa_offset 4
 20636              		@ sp needed
 20637 001c 5DF804FB 		ldr	pc, [sp], #4
 20638              		.cfi_endproc
 20639              	.LFE199:
 20641              		.section	.text.cmdflag,"ax",%progbits
 20642              		.align	1
 20643              		.p2align 2,,3
 20644              		.global	cmdflag
 20645              		.syntax unified
 20646              		.thumb
ARM GAS  /tmp/cc7LeJ71.s 			page 551


 20647              		.thumb_func
 20648              		.fpu fpv4-sp-d16
 20650              	cmdflag:
 20651              	.LVL1572:
 20652              	.LFB201:
3584:src/xeq.c     **** 	unsigned short mask;
 20653              		.loc 1 3584 46 is_stmt 1 view -0
 20654              		.cfi_startproc
 20655              		@ args = 0, pretend = 0, frame = 8
 20656              		@ frame_needed = 0, uses_anonymous_args = 0
3585:src/xeq.c     **** 	unsigned short *const f = flag_word(arg, &mask);
 20657              		.loc 1 3585 2 view .LVU5359
3586:src/xeq.c     **** 	int flg = *f & mask;
 20658              		.loc 1 3586 2 view .LVU5360
3584:src/xeq.c     **** 	unsigned short mask;
 20659              		.loc 1 3584 46 is_stmt 0 view .LVU5361
 20660 0000 70B5     		push	{r4, r5, r6, lr}
 20661              		.cfi_def_cfa_offset 16
 20662              		.cfi_offset 4, -16
 20663              		.cfi_offset 5, -12
 20664              		.cfi_offset 6, -8
 20665              		.cfi_offset 14, -4
 20666 0002 82B0     		sub	sp, sp, #8
 20667              		.cfi_def_cfa_offset 24
3584:src/xeq.c     **** 	unsigned short mask;
 20668              		.loc 1 3584 46 view .LVU5362
 20669 0004 0C46     		mov	r4, r1
3586:src/xeq.c     **** 	int flg = *f & mask;
 20670              		.loc 1 3586 28 view .LVU5363
 20671 0006 0DF10601 		add	r1, sp, #6
 20672              	.LVL1573:
3584:src/xeq.c     **** 	unsigned short mask;
 20673              		.loc 1 3584 46 view .LVU5364
 20674 000a 0646     		mov	r6, r0
3586:src/xeq.c     **** 	int flg = *f & mask;
 20675              		.loc 1 3586 28 view .LVU5365
 20676 000c FFF7FEFF 		bl	flag_word
 20677              	.LVL1574:
3587:src/xeq.c     **** 
 20678              		.loc 1 3587 15 view .LVU5366
 20679 0010 BDF80620 		ldrh	r2, [sp, #6]
3587:src/xeq.c     **** 
 20680              		.loc 1 3587 12 view .LVU5367
 20681 0014 0388     		ldrh	r3, [r0]
 20682 0016 A4F15101 		sub	r1, r4, #81
3586:src/xeq.c     **** 	int flg = *f & mask;
 20683              		.loc 1 3586 28 view .LVU5368
 20684 001a 0546     		mov	r5, r0
 20685              	.LVL1575:
3587:src/xeq.c     **** 
 20686              		.loc 1 3587 2 is_stmt 1 view .LVU5369
3587:src/xeq.c     **** 
 20687              		.loc 1 3587 6 is_stmt 0 view .LVU5370
 20688 001c 03EA0200 		and	r0, r3, r2
 20689              	.LVL1576:
3589:src/xeq.c     **** 	case RARG_SF:	flg = 1;			   break;
 20690              		.loc 1 3589 2 is_stmt 1 view .LVU5371
ARM GAS  /tmp/cc7LeJ71.s 			page 552


 20691 0020 0A29     		cmp	r1, #10
 20692 0022 1AD8     		bhi	.L1482
 20693 0024 DFE801F0 		tbb	[pc, r1]
 20694              	.L1485:
 20695 0028 23       		.byte	(.L1495-.L1485)/2
 20696 0029 0E       		.byte	(.L1494-.L1485)/2
 20697 002a 46       		.byte	(.L1493-.L1485)/2
 20698 002b 29       		.byte	(.L1506-.L1485)/2
 20699 002c 26       		.byte	(.L1491-.L1485)/2
 20700 002d 09       		.byte	(.L1505-.L1485)/2
 20701 002e 1E       		.byte	(.L1504-.L1485)/2
 20702 002f 2D       		.byte	(.L1488-.L1485)/2
 20703 0030 06       		.byte	(.L1487-.L1485)/2
 20704 0031 1B       		.byte	(.L1486-.L1485)/2
 20705 0032 3A       		.byte	(.L1484-.L1485)/2
 20706 0033 00       		.p2align 1
 20707              	.L1487:
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20708              		.loc 1 3601 17 view .LVU5372
 20709 0034 B0FA80F0 		clz	r0, r0
 20710              	.LVL1577:
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20711              		.loc 1 3601 17 is_stmt 0 view .LVU5373
 20712 0038 4009     		lsrs	r0, r0, #5
 20713              	.L1505:
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20714              		.loc 1 3601 17 view .LVU5374
 20715 003a FFF7FEFF 		bl	fin_tst
 20716              	.LVL1578:
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20717              		.loc 1 3601 33 is_stmt 1 view .LVU5375
3601:src/xeq.c     **** 	case RARG_FCS:	fin_tst(! flg);	flg = 1;	   break;
 20718              		.loc 1 3601 45 view .LVU5376
3610:src/xeq.c     **** 		*f |= mask;
 20719              		.loc 1 3610 2 view .LVU5377
 20720 003e 2B88     		ldrh	r3, [r5]
 20721 0040 BDF80620 		ldrh	r2, [sp, #6]
 20722              	.LVL1579:
 20723              	.L1494:
3613:src/xeq.c     **** 
 20724              		.loc 1 3613 3 view .LVU5378
3613:src/xeq.c     **** 
 20725              		.loc 1 3613 6 is_stmt 0 view .LVU5379
 20726 0044 23EA0203 		bic	r3, r3, r2
 20727 0048 0021     		movs	r1, #0
 20728              	.L1497:
3615:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20729              		.loc 1 3615 5 view .LVU5380
 20730 004a 682E     		cmp	r6, #104
 20731 004c 2B80     		strh	r3, [r5]	@ movhi
3615:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20732              		.loc 1 3615 2 is_stmt 1 view .LVU5381
3615:src/xeq.c     **** 		dot( BIG_EQ, flg );
 20733              		.loc 1 3615 5 is_stmt 0 view .LVU5382
 20734 004e 04D1     		bne	.L1482
3616:src/xeq.c     **** 		finish_display(); // BIG_EQ
 20735              		.loc 1 3616 3 is_stmt 1 view .LVU5383
ARM GAS  /tmp/cc7LeJ71.s 			page 553


 20736 0050 8320     		movs	r0, #131
 20737 0052 FFF7FEFF 		bl	dot
 20738              	.LVL1580:
3617:src/xeq.c     **** 	}
 20739              		.loc 1 3617 3 view .LVU5384
 20740 0056 FFF7FEFF 		bl	finish_display
 20741              	.LVL1581:
 20742              	.L1482:
3619:src/xeq.c     **** 
 20743              		.loc 1 3619 1 is_stmt 0 view .LVU5385
 20744 005a 02B0     		add	sp, sp, #8
 20745              		.cfi_remember_state
 20746              		.cfi_def_cfa_offset 16
 20747              		@ sp needed
 20748 005c 70BD     		pop	{r4, r5, r6, pc}
 20749              	.LVL1582:
 20750              	.L1486:
 20751              		.cfi_restore_state
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20752              		.loc 1 3602 17 is_stmt 1 view .LVU5386
 20753 005e B0FA80F0 		clz	r0, r0
 20754              	.LVL1583:
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20755              		.loc 1 3602 17 is_stmt 0 view .LVU5387
 20756 0062 4009     		lsrs	r0, r0, #5
 20757              	.L1504:
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20758              		.loc 1 3602 17 view .LVU5388
 20759 0064 FFF7FEFF 		bl	fin_tst
 20760              	.LVL1584:
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20761              		.loc 1 3602 33 is_stmt 1 view .LVU5389
3602:src/xeq.c     **** 	case RARG_FCF:	fin_tst(! flg);	flg = flg ? 0 : 1; break;
 20762              		.loc 1 3602 45 view .LVU5390
3610:src/xeq.c     **** 		*f |= mask;
 20763              		.loc 1 3610 2 view .LVU5391
 20764 0068 2B88     		ldrh	r3, [r5]
 20765 006a BDF80620 		ldrh	r2, [sp, #6]
 20766              	.LVL1585:
 20767              	.L1495:
3611:src/xeq.c     **** 	else
 20768              		.loc 1 3611 3 view .LVU5392
3611:src/xeq.c     **** 	else
 20769              		.loc 1 3611 6 is_stmt 0 view .LVU5393
 20770 006e 1343     		orrs	r3, r3, r2
 20771 0070 0121     		movs	r1, #1
 20772 0072 EAE7     		b	.L1497
 20773              	.LVL1586:
 20774              	.L1491:
3595:src/xeq.c     **** 
 20775              		.loc 1 3595 16 is_stmt 1 view .LVU5394
 20776 0074 B0FA80F0 		clz	r0, r0
 20777              	.LVL1587:
3595:src/xeq.c     **** 
 20778              		.loc 1 3595 16 is_stmt 0 view .LVU5395
 20779 0078 4009     		lsrs	r0, r0, #5
 20780              	.L1506:
ARM GAS  /tmp/cc7LeJ71.s 			page 554


3595:src/xeq.c     **** 
 20781              		.loc 1 3595 16 view .LVU5396
 20782 007a FFF7FEFF 		bl	fin_tst
 20783              	.LVL1588:
3595:src/xeq.c     **** 
 20784              		.loc 1 3595 37 is_stmt 1 view .LVU5397
3619:src/xeq.c     **** 
 20785              		.loc 1 3619 1 is_stmt 0 view .LVU5398
 20786 007e 02B0     		add	sp, sp, #8
 20787              		.cfi_remember_state
 20788              		.cfi_def_cfa_offset 16
 20789              		@ sp needed
 20790 0080 70BD     		pop	{r4, r5, r6, pc}
 20791              	.LVL1589:
 20792              	.L1488:
 20793              		.cfi_restore_state
3599:src/xeq.c     **** 
 20794              		.loc 1 3599 17 is_stmt 1 view .LVU5399
3599:src/xeq.c     **** 
 20795              		.loc 1 3599 45 is_stmt 0 view .LVU5400
 20796 0082 B0FA80F4 		clz	r4, r0
 20797 0086 6409     		lsrs	r4, r4, #5
3599:src/xeq.c     **** 
 20798              		.loc 1 3599 17 view .LVU5401
 20799 0088 FFF7FEFF 		bl	fin_tst
 20800              	.LVL1590:
3599:src/xeq.c     **** 
 20801              		.loc 1 3599 31 is_stmt 1 view .LVU5402
3599:src/xeq.c     **** 
 20802              		.loc 1 3599 52 view .LVU5403
3610:src/xeq.c     **** 		*f |= mask;
 20803              		.loc 1 3610 2 view .LVU5404
 20804 008c 2B88     		ldrh	r3, [r5]
 20805 008e BDF80620 		ldrh	r2, [sp, #6]
3610:src/xeq.c     **** 		*f |= mask;
 20806              		.loc 1 3610 5 is_stmt 0 view .LVU5405
 20807 0092 002C     		cmp	r4, #0
 20808 0094 D6D0     		beq	.L1494
 20809              	.L1507:
 20810              	.LVL1591:
3611:src/xeq.c     **** 	else
 20811              		.loc 1 3611 3 is_stmt 1 view .LVU5406
3611:src/xeq.c     **** 	else
 20812              		.loc 1 3611 6 is_stmt 0 view .LVU5407
 20813 0096 1343     		orrs	r3, r3, r2
 20814 0098 0121     		movs	r1, #1
 20815 009a D6E7     		b	.L1497
 20816              	.LVL1592:
 20817              	.L1484:
3603:src/xeq.c     **** 
 20818              		.loc 1 3603 17 is_stmt 1 view .LVU5408
 20819 009c B0FA80F4 		clz	r4, r0
 20820 00a0 6409     		lsrs	r4, r4, #5
 20821 00a2 2046     		mov	r0, r4
 20822              	.LVL1593:
3603:src/xeq.c     **** 
 20823              		.loc 1 3603 17 is_stmt 0 view .LVU5409
ARM GAS  /tmp/cc7LeJ71.s 			page 555


 20824 00a4 FFF7FEFF 		bl	fin_tst
 20825              	.LVL1594:
3603:src/xeq.c     **** 
 20826              		.loc 1 3603 33 is_stmt 1 view .LVU5410
3603:src/xeq.c     **** 
 20827              		.loc 1 3603 52 view .LVU5411
 20828 00a8 2B88     		ldrh	r3, [r5]
 20829 00aa BDF80620 		ldrh	r2, [sp, #6]
3610:src/xeq.c     **** 		*f |= mask;
 20830              		.loc 1 3610 2 view .LVU5412
3610:src/xeq.c     **** 		*f |= mask;
 20831              		.loc 1 3610 5 is_stmt 0 view .LVU5413
 20832 00ae 002C     		cmp	r4, #0
 20833 00b0 C8D0     		beq	.L1494
 20834 00b2 F0E7     		b	.L1507
 20835              	.LVL1595:
 20836              	.L1493:
3592:src/xeq.c     **** 
 20837              		.loc 1 3592 16 is_stmt 1 view .LVU5414
3592:src/xeq.c     **** 
 20838              		.loc 1 3592 29 is_stmt 0 view .LVU5415
 20839 00b4 B0FA80F4 		clz	r4, r0
 20840 00b8 6409     		lsrs	r4, r4, #5
 20841              	.LVL1596:
3592:src/xeq.c     **** 
 20842              		.loc 1 3592 38 is_stmt 1 view .LVU5416
3610:src/xeq.c     **** 		*f |= mask;
 20843              		.loc 1 3610 2 view .LVU5417
3610:src/xeq.c     **** 		*f |= mask;
 20844              		.loc 1 3610 5 is_stmt 0 view .LVU5418
 20845 00ba 002C     		cmp	r4, #0
 20846 00bc C2D0     		beq	.L1494
 20847 00be EAE7     		b	.L1507
 20848              		.cfi_endproc
 20849              	.LFE201:
 20851              		.section	.text.put_user_flag,"ax",%progbits
 20852              		.align	1
 20853              		.p2align 2,,3
 20854              		.global	put_user_flag
 20855              		.syntax unified
 20856              		.thumb
 20857              		.thumb_func
 20858              		.fpu fpv4-sp-d16
 20860              	put_user_flag:
 20861              	.LVL1597:
 20862              	.LFB200:
3563:src/xeq.c     **** 	if (f)	set_user_flag(n);
 20863              		.loc 1 3563 34 is_stmt 1 view -0
 20864              		.cfi_startproc
 20865              		@ args = 0, pretend = 0, frame = 0
 20866              		@ frame_needed = 0, uses_anonymous_args = 0
 20867              		@ link register save eliminated.
3564:src/xeq.c     **** 	else	clr_user_flag(n);
 20868              		.loc 1 3564 2 view .LVU5420
3564:src/xeq.c     **** 	else	clr_user_flag(n);
 20869              		.loc 1 3564 5 is_stmt 0 view .LVU5421
 20870 0000 11B1     		cbz	r1, .L1509
ARM GAS  /tmp/cc7LeJ71.s 			page 556


3564:src/xeq.c     **** 	else	clr_user_flag(n);
 20871              		.loc 1 3564 9 is_stmt 1 discriminator 1 view .LVU5422
 20872 0002 5121     		movs	r1, #81
 20873              	.LVL1598:
3564:src/xeq.c     **** 	else	clr_user_flag(n);
 20874              		.loc 1 3564 9 is_stmt 0 discriminator 1 view .LVU5423
 20875 0004 FFF7FEBF 		b	cmdflag
 20876              	.LVL1599:
 20877              	.L1509:
3565:src/xeq.c     **** }
 20878              		.loc 1 3565 7 is_stmt 1 view .LVU5424
 20879 0008 5221     		movs	r1, #82
 20880              	.LVL1600:
3565:src/xeq.c     **** }
 20881              		.loc 1 3565 7 is_stmt 0 view .LVU5425
 20882 000a FFF7FEBF 		b	cmdflag
 20883              	.LVL1601:
3565:src/xeq.c     **** }
 20884              		.loc 1 3565 7 view .LVU5426
 20885              		.cfi_endproc
 20886              	.LFE200:
 20888 000e 00BF     		.section	.text.clrflags,"ax",%progbits
 20889              		.align	1
 20890              		.p2align 2,,3
 20891              		.global	clrflags
 20892              		.syntax unified
 20893              		.thumb
 20894              		.thumb_func
 20895              		.fpu fpv4-sp-d16
 20897              	clrflags:
 20898              	.LVL1602:
 20899              	.LFB202:
3623:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20900              		.loc 1 3623 30 is_stmt 1 view -0
 20901              		.cfi_startproc
 20902              		@ args = 0, pretend = 0, frame = 0
 20903              		@ frame_needed = 0, uses_anonymous_args = 0
3624:src/xeq.c     **** 	if (LocalRegs < 0) {
 20904              		.loc 1 3624 2 view .LVU5428
3623:src/xeq.c     **** 	xset(UserFlags, 0, sizeof(UserFlags));
 20905              		.loc 1 3623 30 is_stmt 0 view .LVU5429
 20906 0000 10B5     		push	{r4, lr}
 20907              		.cfi_def_cfa_offset 8
 20908              		.cfi_offset 4, -8
 20909              		.cfi_offset 14, -4
3624:src/xeq.c     **** 	if (LocalRegs < 0) {
 20910              		.loc 1 3624 7 view .LVU5430
 20911 0002 0A4C     		ldr	r4, .L1514
 20912 0004 2068     		ldr	r0, [r4]
 20913              	.LVL1603:
3624:src/xeq.c     **** 	if (LocalRegs < 0) {
 20914              		.loc 1 3624 2 view .LVU5431
 20915 0006 0E22     		movs	r2, #14
 20916 0008 00F5FE60 		add	r0, r0, #2032
 20917 000c 0021     		movs	r1, #0
 20918 000e FFF7FEFF 		bl	xset
 20919              	.LVL1604:
ARM GAS  /tmp/cc7LeJ71.s 			page 557


3625:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20920              		.loc 1 3625 2 is_stmt 1 view .LVU5432
3625:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20921              		.loc 1 3625 6 is_stmt 0 view .LVU5433
 20922 0012 2368     		ldr	r3, [r4]
 20923 0014 B3F8DE37 		ldrh	r3, [r3, #2014]
3625:src/xeq.c     **** 		* flag_word(LOCAL_REG_BASE, NULL) = 0;
 20924              		.loc 1 3625 5 view .LVU5434
 20925 0018 1B04     		lsls	r3, r3, #16
 20926 001a 00D4     		bmi	.L1513
3628:src/xeq.c     **** 
 20927              		.loc 1 3628 1 view .LVU5435
 20928 001c 10BD     		pop	{r4, pc}
 20929              	.L1513:
3626:src/xeq.c     **** 	}
 20930              		.loc 1 3626 3 is_stmt 1 view .LVU5436
3626:src/xeq.c     **** 	}
 20931              		.loc 1 3626 5 is_stmt 0 view .LVU5437
 20932 001e 0021     		movs	r1, #0
 20933 0020 7020     		movs	r0, #112
 20934 0022 FFF7FEFF 		bl	flag_word
 20935              	.LVL1605:
3626:src/xeq.c     **** 	}
 20936              		.loc 1 3626 37 view .LVU5438
 20937 0026 0023     		movs	r3, #0
 20938 0028 0380     		strh	r3, [r0]	@ movhi
3628:src/xeq.c     **** 
 20939              		.loc 1 3628 1 view .LVU5439
 20940 002a 10BD     		pop	{r4, pc}
 20941              	.L1515:
 20942              		.align	2
 20943              	.L1514:
 20944 002c 00000000 		.word	main_ram
 20945              		.cfi_endproc
 20946              	.LFE202:
 20948              		.section	.text.intws,"ax",%progbits
 20949              		.align	1
 20950              		.p2align 2,,3
 20951              		.global	intws
 20952              		.syntax unified
 20953              		.thumb
 20954              		.thumb_func
 20955              		.fpu fpv4-sp-d16
 20957              	intws:
 20958              	.LVL1606:
 20959              	.LFB203:
3633:src/xeq.c     **** 	if (is_intmode()) {
 20960              		.loc 1 3633 44 is_stmt 1 view -0
 20961              		.cfi_startproc
 20962              		@ args = 0, pretend = 0, frame = 8
 20963              		@ frame_needed = 0, uses_anonymous_args = 0
3634:src/xeq.c     **** 		int i, ss = stack_size();
 20964              		.loc 1 3634 2 view .LVU5441
3633:src/xeq.c     **** 	if (is_intmode()) {
 20965              		.loc 1 3633 44 is_stmt 0 view .LVU5442
 20966 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 20967              		.cfi_def_cfa_offset 24
ARM GAS  /tmp/cc7LeJ71.s 			page 558


 20968              		.cfi_offset 4, -24
 20969              		.cfi_offset 5, -20
 20970              		.cfi_offset 6, -16
 20971              		.cfi_offset 7, -12
 20972              		.cfi_offset 8, -8
 20973              		.cfi_offset 14, -4
3634:src/xeq.c     **** 		int i, ss = stack_size();
 20974              		.loc 1 3634 6 view .LVU5443
 20975 0004 DFF8E080 		ldr	r8, .L1527+4
 20976 0008 D8F80030 		ldr	r3, [r8]
 20977 000c 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3634:src/xeq.c     **** 		int i, ss = stack_size();
 20978              		.loc 1 3634 5 view .LVU5444
 20979 0010 D107     		lsls	r1, r2, #31
 20980              	.LVL1607:
3633:src/xeq.c     **** 	if (is_intmode()) {
 20981              		.loc 1 3633 44 view .LVU5445
 20982 0012 82B0     		sub	sp, sp, #8
 20983              		.cfi_def_cfa_offset 32
3634:src/xeq.c     **** 		int i, ss = stack_size();
 20984              		.loc 1 3634 5 view .LVU5446
 20985 0014 53D5     		bpl	.L1517
 20986              	.LBB3081:
3635:src/xeq.c     **** 		unsigned int oldlen = UState.int_len;
 20987              		.loc 1 3635 3 is_stmt 1 view .LVU5447
 20988              	.LBB3082:
 20989              	.LBI3082:
 712:src/xeq.c     **** 	if (! UState.stack_depth || (is_xrom() && ! XromFlags.xIN))
 20990              		.loc 1 712 5 view .LVU5448
 20991              	.LBB3083:
 713:src/xeq.c     **** 		return 4;
 20992              		.loc 1 713 2 view .LVU5449
 713:src/xeq.c     **** 		return 4;
 20993              		.loc 1 713 6 is_stmt 0 view .LVU5450
 20994 0016 93F8EA27 		ldrb	r2, [r3, #2026]	@ zero_extendqisi2
 713:src/xeq.c     **** 		return 4;
 20995              		.loc 1 713 5 view .LVU5451
 20996 001a 1207     		lsls	r2, r2, #28
 20997 001c 58D5     		bpl	.L1521
 20998              	.LBB3084:
 20999              	.LBI3084:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 21000              		.loc 1 185 5 is_stmt 1 view .LVU5452
 21001              	.LBB3085:
 186:src/xeq.c     **** }
 21002              		.loc 1 186 2 view .LVU5453
 186:src/xeq.c     **** }
 21003              		.loc 1 186 9 is_stmt 0 view .LVU5454
 21004 001e B3F8E027 		ldrh	r2, [r3, #2016]
 21005              	.LBE3085:
 21006              	.LBE3084:
 713:src/xeq.c     **** 		return 4;
 21007              		.loc 1 713 27 view .LVU5455
 21008 0022 920B     		lsrs	r2, r2, #14
 21009 0024 032A     		cmp	r2, #3
 21010 0026 55D0     		beq	.L1526
 715:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 559


 21011              		.loc 1 715 9 view .LVU5456
 21012 0028 0827     		movs	r7, #8
 21013              	.L1518:
 21014              	.LVL1608:
 715:src/xeq.c     **** }
 21015              		.loc 1 715 9 view .LVU5457
 21016              	.LBE3083:
 21017              	.LBE3082:
3636:src/xeq.c     **** 		long long int v;
 21018              		.loc 1 3636 3 is_stmt 1 view .LVU5458
3636:src/xeq.c     **** 		long long int v;
 21019              		.loc 1 3636 31 is_stmt 0 view .LVU5459
 21020 002a 93F8E967 		ldrb	r6, [r3, #2025]	@ zero_extendqisi2
 21021 002e 00F03F05 		and	r5, r0, #63
 21022 0032 06F03F06 		and	r6, r6, #63
 21023              	.LVL1609:
3637:src/xeq.c     **** 
 21024              		.loc 1 3637 3 is_stmt 1 view .LVU5460
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21025              		.loc 1 3639 3 view .LVU5461
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21026              		.loc 1 3639 13 view .LVU5462
 21027 0036 6437     		adds	r7, r7, #100
 21028              	.LVL1610:
3636:src/xeq.c     **** 		long long int v;
 21029              		.loc 1 3636 31 is_stmt 0 view .LVU5463
 21030 0038 6424     		movs	r4, #100
 21031              	.LVL1611:
 21032              	.L1519:
3640:src/xeq.c     **** 			UState.int_len = arg;
 21033              		.loc 1 3640 4 is_stmt 1 discriminator 3 view .LVU5464
3640:src/xeq.c     **** 			UState.int_len = arg;
 21034              		.loc 1 3640 8 is_stmt 0 discriminator 3 view .LVU5465
 21035 003a 2046     		mov	r0, r4
 21036 003c FFF7FEFF 		bl	get_reg_n_int
 21037              	.LVL1612:
 21038 0040 FFF7FEFF 		bl	mask_value
 21039              	.LVL1613:
3641:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 21040              		.loc 1 3641 4 is_stmt 1 discriminator 3 view .LVU5466
3641:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, mask_value(v));
 21041              		.loc 1 3641 19 is_stmt 0 discriminator 3 view .LVU5467
 21042 0044 D8F80030 		ldr	r3, [r8]
 21043 0048 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21044 004c 65F30502 		bfi	r2, r5, #0, #6
 21045 0050 83F8E927 		strb	r2, [r3, #2025]
3642:src/xeq.c     **** 			UState.int_len = oldlen;
 21046              		.loc 1 3642 4 is_stmt 1 discriminator 3 view .LVU5468
 21047 0054 FFF7FEFF 		bl	mask_value
 21048              	.LVL1614:
3642:src/xeq.c     **** 			UState.int_len = oldlen;
 21049              		.loc 1 3642 4 is_stmt 0 discriminator 3 view .LVU5469
 21050 0058 0B46     		mov	r3, r1
 21051 005a 0246     		mov	r2, r0
 21052              	.LBB3087:
 21053              	.LBB3088:
1423:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 560


 21054              		.loc 1 1423 8 discriminator 3 view .LVU5470
 21055 005c 2046     		mov	r0, r4
 21056 005e CDE90023 		strd	r2, [sp]
 21057              	.LVL1615:
1423:src/xeq.c     **** }
 21058              		.loc 1 1423 8 discriminator 3 view .LVU5471
 21059              	.LBE3088:
 21060              	.LBI3087:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 21061              		.loc 1 1422 6 is_stmt 1 discriminator 3 view .LVU5472
 21062              	.LBB3089:
1423:src/xeq.c     **** }
 21063              		.loc 1 1423 2 discriminator 3 view .LVU5473
1423:src/xeq.c     **** }
 21064              		.loc 1 1423 8 is_stmt 0 discriminator 3 view .LVU5474
 21065 0062 FFF7FEFF 		bl	get_reg_n
 21066              	.LVL1616:
1423:src/xeq.c     **** }
 21067              		.loc 1 1423 2 discriminator 3 view .LVU5475
 21068 0066 0822     		movs	r2, #8
 21069 0068 6946     		mov	r1, sp
 21070 006a FFF7FEFF 		bl	xcopy
 21071              	.LVL1617:
1423:src/xeq.c     **** }
 21072              		.loc 1 1423 2 discriminator 3 view .LVU5476
 21073              	.LBE3089:
 21074              	.LBE3087:
3643:src/xeq.c     **** 		}
 21075              		.loc 1 3643 4 is_stmt 1 discriminator 3 view .LVU5477
3643:src/xeq.c     **** 		}
 21076              		.loc 1 3643 19 is_stmt 0 discriminator 3 view .LVU5478
 21077 006e D8F80030 		ldr	r3, [r8]
 21078 0072 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21079 0076 0134     		adds	r4, r4, #1
 21080              	.LVL1618:
3643:src/xeq.c     **** 		}
 21081              		.loc 1 3643 19 discriminator 3 view .LVU5479
 21082 0078 66F30502 		bfi	r2, r6, #0, #6
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21083              		.loc 1 3639 3 discriminator 3 view .LVU5480
 21084 007c BC42     		cmp	r4, r7
3643:src/xeq.c     **** 		}
 21085              		.loc 1 3643 19 discriminator 3 view .LVU5481
 21086 007e 83F8E927 		strb	r2, [r3, #2025]
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21087              		.loc 1 3639 19 is_stmt 1 discriminator 3 view .LVU5482
 21088              	.LVL1619:
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21089              		.loc 1 3639 13 discriminator 3 view .LVU5483
3639:src/xeq.c     **** 			v = mask_value(get_reg_n_int(regX_idx + i));
 21090              		.loc 1 3639 3 is_stmt 0 discriminator 3 view .LVU5484
 21091 0082 DAD1     		bne	.L1519
3645:src/xeq.c     **** 		UState.int_len = arg;
 21092              		.loc 1 3645 3 is_stmt 1 view .LVU5485
3645:src/xeq.c     **** 		UState.int_len = arg;
 21093              		.loc 1 3645 7 is_stmt 0 view .LVU5486
 21094 0084 6C20     		movs	r0, #108
ARM GAS  /tmp/cc7LeJ71.s 			page 561


 21095 0086 FFF7FEFF 		bl	get_reg_n_int
 21096              	.LVL1620:
 21097 008a FFF7FEFF 		bl	mask_value
 21098              	.LVL1621:
3646:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 21099              		.loc 1 3646 3 is_stmt 1 view .LVU5487
3646:src/xeq.c     **** 		set_reg_n_int(regL_idx, mask_value(v));
 21100              		.loc 1 3646 18 is_stmt 0 view .LVU5488
 21101 008e D8F80030 		ldr	r3, [r8]
 21102 0092 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21103 0096 65F30502 		bfi	r2, r5, #0, #6
 21104 009a 83F8E927 		strb	r2, [r3, #2025]
3647:src/xeq.c     **** 	} else
 21105              		.loc 1 3647 3 is_stmt 1 view .LVU5489
 21106 009e FFF7FEFF 		bl	mask_value
 21107              	.LVL1622:
3647:src/xeq.c     **** 	} else
 21108              		.loc 1 3647 3 is_stmt 0 view .LVU5490
 21109 00a2 0B46     		mov	r3, r1
 21110 00a4 0246     		mov	r2, r0
 21111              	.LBB3090:
 21112              	.LBB3091:
1423:src/xeq.c     **** }
 21113              		.loc 1 1423 8 view .LVU5491
 21114 00a6 6C20     		movs	r0, #108
 21115 00a8 CDE90023 		strd	r2, [sp]
 21116              	.LVL1623:
1423:src/xeq.c     **** }
 21117              		.loc 1 1423 8 view .LVU5492
 21118              	.LBE3091:
 21119              	.LBI3090:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 21120              		.loc 1 1422 6 is_stmt 1 view .LVU5493
 21121              	.LBB3092:
1423:src/xeq.c     **** }
 21122              		.loc 1 1423 2 view .LVU5494
1423:src/xeq.c     **** }
 21123              		.loc 1 1423 8 is_stmt 0 view .LVU5495
 21124 00ac FFF7FEFF 		bl	get_reg_n
 21125              	.LVL1624:
1423:src/xeq.c     **** }
 21126              		.loc 1 1423 2 view .LVU5496
 21127 00b0 6946     		mov	r1, sp
 21128 00b2 0822     		movs	r2, #8
 21129 00b4 FFF7FEFF 		bl	xcopy
 21130              	.LVL1625:
1423:src/xeq.c     **** }
 21131              		.loc 1 1423 2 view .LVU5497
 21132              	.LBE3092:
 21133              	.LBE3090:
 21134              	.LBE3081:
3650:src/xeq.c     **** 
 21135              		.loc 1 3650 1 view .LVU5498
 21136 00b8 02B0     		add	sp, sp, #8
 21137              		.cfi_remember_state
 21138              		.cfi_def_cfa_offset 24
 21139              		@ sp needed
ARM GAS  /tmp/cc7LeJ71.s 			page 562


 21140 00ba BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21141              	.LVL1626:
 21142              	.L1517:
 21143              		.cfi_restore_state
3649:src/xeq.c     **** }
 21144              		.loc 1 3649 6 is_stmt 1 view .LVU5499
3649:src/xeq.c     **** }
 21145              		.loc 1 3649 21 is_stmt 0 view .LVU5500
 21146 00be 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 21147 00c2 60F30502 		bfi	r2, r0, #0, #6
 21148              	.LVL1627:
3649:src/xeq.c     **** }
 21149              		.loc 1 3649 21 view .LVU5501
 21150 00c6 83F8E927 		strb	r2, [r3, #2025]
3650:src/xeq.c     **** 
 21151              		.loc 1 3650 1 view .LVU5502
 21152 00ca 02B0     		add	sp, sp, #8
 21153              		.cfi_remember_state
 21154              		.cfi_def_cfa_offset 24
 21155              		@ sp needed
 21156 00cc BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 21157              	.LVL1628:
 21158              	.L1521:
 21159              		.cfi_restore_state
 21160              	.LBB3094:
 21161              	.LBB3093:
 21162              	.LBB3086:
 714:src/xeq.c     **** 	return 8;
 21163              		.loc 1 714 10 view .LVU5503
 21164 00d0 0427     		movs	r7, #4
 21165 00d2 AAE7     		b	.L1518
 21166              	.L1526:
 713:src/xeq.c     **** 		return 4;
 21167              		.loc 1 713 44 view .LVU5504
 21168 00d4 034A     		ldr	r2, .L1527
 713:src/xeq.c     **** 		return 4;
 21169              		.loc 1 713 41 view .LVU5505
 21170 00d6 92F90120 		ldrsb	r2, [r2, #1]
 714:src/xeq.c     **** 	return 8;
 21171              		.loc 1 714 10 view .LVU5506
 21172 00da 002A     		cmp	r2, #0
 21173 00dc B4BF     		ite	lt
 21174 00de 0827     		movlt	r7, #8
 21175 00e0 0427     		movge	r7, #4
 21176 00e2 A2E7     		b	.L1518
 21177              	.L1528:
 21178              		.align	2
 21179              	.L1527:
 21180 00e4 00000000 		.word	XromParams
 21181 00e8 00000000 		.word	main_ram
 21182              	.LBE3086:
 21183              	.LBE3093:
 21184              	.LBE3094:
 21185              		.cfi_endproc
 21186              	.LFE203:
 21188              		.section	.text.get_maxdenom,"ax",%progbits
 21189              		.align	1
ARM GAS  /tmp/cc7LeJ71.s 			page 563


 21190              		.p2align 2,,3
 21191              		.global	get_maxdenom
 21192              		.syntax unified
 21193              		.thumb
 21194              		.thumb_func
 21195              		.fpu fpv4-sp-d16
 21197              	get_maxdenom:
 21198              	.LVL1629:
 21199              	.LFB204:
3656:src/xeq.c     **** 	const unsigned int dm = UState.denom_max;
 21200              		.loc 1 3656 33 is_stmt 1 view -0
 21201              		.cfi_startproc
 21202              		@ args = 0, pretend = 0, frame = 0
 21203              		@ frame_needed = 0, uses_anonymous_args = 0
 21204              		@ link register save eliminated.
3657:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21205              		.loc 1 3657 2 view .LVU5508
3657:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21206              		.loc 1 3657 32 is_stmt 0 view .LVU5509
 21207 0000 064B     		ldr	r3, .L1531
 21208 0002 1B68     		ldr	r3, [r3]
 21209 0004 D3F8E417 		ldr	r1, [r3, #2020]
3658:src/xeq.c     **** }
 21210              		.loc 1 3658 2 view .LVU5510
 21211 0008 42F20F73 		movw	r3, #9999
3657:src/xeq.c     **** 	int_to_dn(d, dm==0?9999:dm);
 21212              		.loc 1 3657 32 view .LVU5511
 21213 000c C1F38D11 		ubfx	r1, r1, #6, #14
 21214              	.LVL1630:
3658:src/xeq.c     **** }
 21215              		.loc 1 3658 2 is_stmt 1 view .LVU5512
 21216 0010 0029     		cmp	r1, #0
 21217 0012 08BF     		it	eq
 21218 0014 1946     		moveq	r1, r3
 21219 0016 FFF7FEBF 		b	int_to_dn
 21220              	.LVL1631:
 21221              	.L1532:
3658:src/xeq.c     **** }
 21222              		.loc 1 3658 2 is_stmt 0 view .LVU5513
 21223 001a 00BF     		.align	2
 21224              	.L1531:
 21225 001c 00000000 		.word	main_ram
 21226              		.cfi_endproc
 21227              	.LFE204:
 21229              		.section	.rodata.op_2frac.str1.4,"aMS",%progbits,1
 21230              		.align	2
 21231              	.LC4:
 21232 0000 792F7820 		.ascii	"y/x =\000"
 21232      3D00
 21233 0006 0000     		.align	2
 21234              	.LC5:
 21235 0008 792F7820 		.ascii	"y/x \007\344<\000"
 21235      07E43C00 
 21236              		.align	2
 21237              	.LC6:
 21238 0010 792F7820 		.ascii	"y/x \007\344>\000"
 21238      07E43E00 
ARM GAS  /tmp/cc7LeJ71.s 			page 564


 21239              		.section	.text.op_2frac,"ax",%progbits
 21240              		.align	1
 21241              		.p2align 2,,3
 21242              		.global	op_2frac
 21243              		.syntax unified
 21244              		.thumb
 21245              		.thumb_func
 21246              		.fpu fpv4-sp-d16
 21248              	op_2frac:
 21249              	.LVL1632:
 21250              	.LFB205:
3661:src/xeq.c     **** 	decNumber z, n, d, t;
 21251              		.loc 1 3661 30 is_stmt 1 view -0
 21252              		.cfi_startproc
 21253              		@ args = 0, pretend = 0, frame = 144
 21254              		@ frame_needed = 0, uses_anonymous_args = 0
3662:src/xeq.c     **** 
 21255              		.loc 1 3662 2 view .LVU5515
3664:src/xeq.c     **** 		setX_int(1);
 21256              		.loc 1 3664 2 view .LVU5516
3664:src/xeq.c     **** 		setX_int(1);
 21257              		.loc 1 3664 6 is_stmt 0 view .LVU5517
 21258 0000 214B     		ldr	r3, .L1545
3661:src/xeq.c     **** 	decNumber z, n, d, t;
 21259              		.loc 1 3661 30 view .LVU5518
 21260 0002 00B5     		push	{lr}
 21261              		.cfi_def_cfa_offset 4
 21262              		.cfi_offset 14, -4
3664:src/xeq.c     **** 		setX_int(1);
 21263              		.loc 1 3664 6 view .LVU5519
 21264 0004 1B68     		ldr	r3, [r3]
 21265 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3664:src/xeq.c     **** 		setX_int(1);
 21266              		.loc 1 3664 5 view .LVU5520
 21267 000a DA07     		lsls	r2, r3, #31
3661:src/xeq.c     **** 	decNumber z, n, d, t;
 21268              		.loc 1 3661 30 view .LVU5521
 21269 000c A5B0     		sub	sp, sp, #148
 21270              		.cfi_def_cfa_offset 152
3664:src/xeq.c     **** 		setX_int(1);
 21271              		.loc 1 3664 5 view .LVU5522
 21272 000e 27D4     		bmi	.L1543
3669:src/xeq.c     **** 	decNumber2Fraction(&n, &d, &z);
 21273              		.loc 1 3669 2 is_stmt 1 view .LVU5523
 21274              	.LVL1633:
 21275              	.LBB3095:
 21276              	.LBI3095:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 21277              		.loc 1 832 6 view .LVU5524
 21278              	.LBB3096:
 833:src/xeq.c     **** }
 21279              		.loc 1 833 2 view .LVU5525
 21280 0010 6521     		movs	r1, #101
 21281 0012 6846     		mov	r0, sp
 21282              	.LVL1634:
 833:src/xeq.c     **** }
 21283              		.loc 1 833 2 is_stmt 0 view .LVU5526
ARM GAS  /tmp/cc7LeJ71.s 			page 565


 21284 0014 FFF7FEFF 		bl	getRegister
 21285              	.LVL1635:
 833:src/xeq.c     **** }
 21286              		.loc 1 833 2 view .LVU5527
 21287              	.LBE3096:
 21288              	.LBE3095:
3670:src/xeq.c     **** 	setXY(&d, &n);			// Set numerator and denominator
 21289              		.loc 1 3670 2 is_stmt 1 view .LVU5528
 21290 0018 6A46     		mov	r2, sp
 21291 001a 12A9     		add	r1, sp, #72
 21292 001c 09A8     		add	r0, sp, #36
 21293 001e FFF7FEFF 		bl	decNumber2Fraction
 21294              	.LVL1636:
3671:src/xeq.c     **** 	if (State2.runmode) {
 21295              		.loc 1 3671 2 view .LVU5529
 21296 0022 09A9     		add	r1, sp, #36
 21297 0024 12A8     		add	r0, sp, #72
 21298 0026 FFF7FEFF 		bl	setXY
 21299              	.LVL1637:
3672:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21300              		.loc 1 3672 2 view .LVU5530
3672:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21301              		.loc 1 3672 6 is_stmt 0 view .LVU5531
 21302 002a 184B     		ldr	r3, .L1545+4
 21303 002c 9B7D     		ldrb	r3, [r3, #22]	@ zero_extendqisi2
3672:src/xeq.c     **** 		dn_divide(&t, &n, &d);
 21304              		.loc 1 3672 5 view .LVU5532
 21305 002e 5B06     		lsls	r3, r3, #25
 21306 0030 02D4     		bmi	.L1544
3688:src/xeq.c     **** 
 21307              		.loc 1 3688 1 view .LVU5533
 21308 0032 25B0     		add	sp, sp, #148
 21309              		.cfi_remember_state
 21310              		.cfi_def_cfa_offset 4
 21311              		@ sp needed
 21312 0034 5DF804FB 		ldr	pc, [sp], #4
 21313              	.L1544:
 21314              		.cfi_restore_state
3673:src/xeq.c     **** 		dn_compare(&n, &t, &z);
 21315              		.loc 1 3673 3 is_stmt 1 view .LVU5534
 21316 0038 12AA     		add	r2, sp, #72
 21317 003a 09A9     		add	r1, sp, #36
 21318 003c 1BA8     		add	r0, sp, #108
 21319 003e FFF7FEFF 		bl	dn_divide
 21320              	.LVL1638:
3674:src/xeq.c     **** 		if (dn_eq0(&n))
 21321              		.loc 1 3674 3 view .LVU5535
 21322 0042 6A46     		mov	r2, sp
 21323 0044 1BA9     		add	r1, sp, #108
 21324 0046 09A8     		add	r0, sp, #36
 21325 0048 FFF7FEFF 		bl	dn_compare
 21326              	.LVL1639:
3675:src/xeq.c     **** 			DispMsg = "y/x =";
 21327              		.loc 1 3675 3 view .LVU5536
3675:src/xeq.c     **** 			DispMsg = "y/x =";
 21328              		.loc 1 3675 7 is_stmt 0 view .LVU5537
 21329 004c 09A8     		add	r0, sp, #36
ARM GAS  /tmp/cc7LeJ71.s 			page 566


 21330 004e FFF7FEFF 		bl	dn_eq0
 21331              	.LVL1640:
3675:src/xeq.c     **** 			DispMsg = "y/x =";
 21332              		.loc 1 3675 6 view .LVU5538
 21333 0052 60B1     		cbz	r0, .L1537
3676:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21334              		.loc 1 3676 4 is_stmt 1 view .LVU5539
3676:src/xeq.c     **** 		else if (decNumberIsNegative(&n))
 21335              		.loc 1 3676 12 is_stmt 0 view .LVU5540
 21336 0054 0E4B     		ldr	r3, .L1545+8
 21337 0056 0F4A     		ldr	r2, .L1545+12
 21338 0058 1A60     		str	r2, [r3]
3688:src/xeq.c     **** 
 21339              		.loc 1 3688 1 view .LVU5541
 21340 005a 25B0     		add	sp, sp, #148
 21341              		.cfi_remember_state
 21342              		.cfi_def_cfa_offset 4
 21343              		@ sp needed
 21344 005c 5DF804FB 		ldr	pc, [sp], #4
 21345              	.LVL1641:
 21346              	.L1543:
 21347              		.cfi_restore_state
3665:src/xeq.c     **** 		return;
 21348              		.loc 1 3665 3 is_stmt 1 view .LVU5542
 21349 0060 0120     		movs	r0, #1
 21350              	.LVL1642:
3665:src/xeq.c     **** 		return;
 21351              		.loc 1 3665 3 is_stmt 0 view .LVU5543
 21352 0062 0021     		movs	r1, #0
 21353 0064 FFF7FEFF 		bl	setX_int
 21354              	.LVL1643:
3666:src/xeq.c     **** 	}
 21355              		.loc 1 3666 3 is_stmt 1 view .LVU5544
3688:src/xeq.c     **** 
 21356              		.loc 1 3688 1 is_stmt 0 view .LVU5545
 21357 0068 25B0     		add	sp, sp, #148
 21358              		.cfi_remember_state
 21359              		.cfi_def_cfa_offset 4
 21360              		@ sp needed
 21361 006a 5DF804FB 		ldr	pc, [sp], #4
 21362              	.L1537:
 21363              		.cfi_restore_state
3677:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21364              		.loc 1 3677 8 is_stmt 1 view .LVU5546
3677:src/xeq.c     **** #ifdef INCLUDE_FONT_ESCAPE
 21365              		.loc 1 3677 11 is_stmt 0 view .LVU5547
 21366 006e 9DF92C30 		ldrsb	r3, [sp, #44]
 21367 0072 002B     		cmp	r3, #0
3679:src/xeq.c     **** 		else
 21368              		.loc 1 3679 12 view .LVU5548
 21369 0074 B8BF     		it	lt
 21370 0076 084A     		ldrlt	r2, .L1545+16
 21371 0078 054B     		ldr	r3, .L1545+8
3679:src/xeq.c     **** 		else
 21372              		.loc 1 3679 4 is_stmt 1 view .LVU5549
3681:src/xeq.c     **** #else
 21373              		.loc 1 3681 4 view .LVU5550
ARM GAS  /tmp/cc7LeJ71.s 			page 567


3681:src/xeq.c     **** #else
 21374              		.loc 1 3681 12 is_stmt 0 view .LVU5551
 21375 007a A8BF     		it	ge
 21376 007c 074A     		ldrge	r2, .L1545+20
 21377 007e 1A60     		str	r2, [r3]
3688:src/xeq.c     **** 
 21378              		.loc 1 3688 1 view .LVU5552
 21379 0080 25B0     		add	sp, sp, #148
 21380              		.cfi_def_cfa_offset 4
 21381              		@ sp needed
 21382 0082 5DF804FB 		ldr	pc, [sp], #4
 21383              	.L1546:
 21384 0086 00BF     		.align	2
 21385              	.L1545:
 21386 0088 00000000 		.word	main_ram
 21387 008c 00000000 		.word	StateWhileOn
 21388 0090 00000000 		.word	DispMsg
 21389 0094 00000000 		.word	.LC4
 21390 0098 08000000 		.word	.LC5
 21391 009c 10000000 		.word	.LC6
 21392              		.cfi_endproc
 21393              	.LFE205:
 21395              		.section	.text.op_fracdenom,"ax",%progbits
 21396              		.align	1
 21397              		.p2align 2,,3
 21398              		.global	op_fracdenom
 21399              		.syntax unified
 21400              		.thumb
 21401              		.thumb_func
 21402              		.fpu fpv4-sp-d16
 21404              	op_fracdenom:
 21405              	.LVL1644:
 21406              	.LFB206:
3690:src/xeq.c     **** 	int s;
 21407              		.loc 1 3690 34 is_stmt 1 view -0
 21408              		.cfi_startproc
 21409              		@ args = 0, pretend = 0, frame = 8
 21410              		@ frame_needed = 0, uses_anonymous_args = 0
3691:src/xeq.c     **** 	unsigned long long int i;
 21411              		.loc 1 3691 2 view .LVU5554
3692:src/xeq.c     **** 
 21412              		.loc 1 3692 2 view .LVU5555
3694:src/xeq.c     **** 	if (i > 9999)
 21413              		.loc 1 3694 2 view .LVU5556
3690:src/xeq.c     **** 	int s;
 21414              		.loc 1 3690 34 is_stmt 0 view .LVU5557
 21415 0000 2DE90048 		push	{fp, lr}
 21416              		.cfi_def_cfa_offset 8
 21417              		.cfi_offset 11, -8
 21418              		.cfi_offset 14, -4
 21419 0004 84B0     		sub	sp, sp, #16
 21420              		.cfi_def_cfa_offset 24
 21421              	.LVL1645:
 21422              	.LBB3097:
 21423              	.LBI3097:
1446:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 21424              		.loc 1 1446 24 is_stmt 1 view .LVU5558
ARM GAS  /tmp/cc7LeJ71.s 			page 568


 21425              	.LBB3098:
1447:src/xeq.c     **** }
 21426              		.loc 1 1447 2 view .LVU5559
1447:src/xeq.c     **** }
 21427              		.loc 1 1447 9 is_stmt 0 view .LVU5560
 21428 0006 03A9     		add	r1, sp, #12
 21429              	.LVL1646:
1447:src/xeq.c     **** }
 21430              		.loc 1 1447 9 view .LVU5561
 21431 0008 6420     		movs	r0, #100
 21432              	.LVL1647:
1447:src/xeq.c     **** }
 21433              		.loc 1 1447 9 view .LVU5562
 21434 000a FFF7FEFF 		bl	get_reg_n_int_sgn
 21435              	.LVL1648:
1447:src/xeq.c     **** }
 21436              		.loc 1 1447 9 view .LVU5563
 21437 000e 8C46     		mov	ip, r1
 21438              	.LVL1649:
1447:src/xeq.c     **** }
 21439              		.loc 1 1447 9 view .LVU5564
 21440              	.LBE3098:
 21441              	.LBE3097:
3695:src/xeq.c     **** 		UState.denom_max = 0;
 21442              		.loc 1 3695 5 view .LVU5565
 21443 0010 0021     		movs	r1, #0
 21444              	.LBB3100:
 21445              	.LBB3099:
1447:src/xeq.c     **** }
 21446              		.loc 1 1447 9 view .LVU5566
 21447 0012 8346     		mov	fp, r0
 21448              	.LVL1650:
1447:src/xeq.c     **** }
 21449              		.loc 1 1447 9 view .LVU5567
 21450              	.LBE3099:
 21451              	.LBE3100:
3695:src/xeq.c     **** 		UState.denom_max = 0;
 21452              		.loc 1 3695 2 is_stmt 1 view .LVU5568
3695:src/xeq.c     **** 		UState.denom_max = 0;
 21453              		.loc 1 3695 5 is_stmt 0 view .LVU5569
 21454 0014 6145     		cmp	r1, ip
 21455 0016 42F20F70 		movw	r0, #9999
 21456 001a 08BF     		it	eq
 21457 001c 5845     		cmpeq	r0, fp
 21458 001e 0AD2     		bcs	.L1548
3696:src/xeq.c     **** 	else if (i != 1)
 21459              		.loc 1 3696 3 is_stmt 1 view .LVU5570
3696:src/xeq.c     **** 	else if (i != 1)
 21460              		.loc 1 3696 20 is_stmt 0 view .LVU5571
 21461 0020 174B     		ldr	r3, .L1552
 21462 0022 1B68     		ldr	r3, [r3]
 21463 0024 D3F8E427 		ldr	r2, [r3, #2020]
 21464 0028 6FF39312 		bfc	r2, #6, #14
 21465 002c C3F8E427 		str	r2, [r3, #2020]
3703:src/xeq.c     **** 
 21466              		.loc 1 3703 1 view .LVU5572
 21467 0030 04B0     		add	sp, sp, #16
ARM GAS  /tmp/cc7LeJ71.s 			page 569


 21468              		.cfi_remember_state
 21469              		.cfi_def_cfa_offset 8
 21470              		@ sp needed
 21471 0032 BDE80088 		pop	{fp, pc}
 21472              	.LVL1651:
 21473              	.L1548:
 21474              		.cfi_restore_state
3697:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21475              		.loc 1 3697 7 is_stmt 1 view .LVU5573
3697:src/xeq.c     **** 		UState.denom_max = (unsigned int) i;
 21476              		.loc 1 3697 10 is_stmt 0 view .LVU5574
 21477 0036 BCF1000F 		cmp	ip, #0
 21478 003a 08BF     		it	eq
 21479 003c BBF1010F 		cmpeq	fp, #1
 21480 0040 0AD0     		beq	.L1550
3698:src/xeq.c     **** 	else {
 21481              		.loc 1 3698 3 is_stmt 1 view .LVU5575
3698:src/xeq.c     **** 	else {
 21482              		.loc 1 3698 20 is_stmt 0 view .LVU5576
 21483 0042 0F4B     		ldr	r3, .L1552
 21484 0044 1B68     		ldr	r3, [r3]
 21485 0046 D3F8E417 		ldr	r1, [r3, #2020]
 21486 004a 6BF39311 		bfi	r1, fp, #6, #14
 21487 004e C3F8E417 		str	r1, [r3, #2020]
3703:src/xeq.c     **** 
 21488              		.loc 1 3703 1 view .LVU5577
 21489 0052 04B0     		add	sp, sp, #16
 21490              		.cfi_remember_state
 21491              		.cfi_def_cfa_offset 8
 21492              		@ sp needed
 21493 0054 BDE80088 		pop	{fp, pc}
 21494              	.LVL1652:
 21495              	.L1550:
 21496              		.cfi_restore_state
3700:src/xeq.c     **** 		setX_int_sgn(UState.denom_max, 0);
 21497              		.loc 1 3700 3 is_stmt 1 view .LVU5578
 21498              	.LBB3101:
 21499              	.LBI3101:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 21500              		.loc 1 792 6 view .LVU5579
 21501              	.LBB3102:
 793:src/xeq.c     **** }
 21502              		.loc 1 793 2 view .LVU5580
 21503 0058 6421     		movs	r1, #100
 21504 005a 6C20     		movs	r0, #108
 21505 005c FFF7FEFF 		bl	copyreg_n
 21506              	.LVL1653:
 21507              	.LBE3102:
 21508              	.LBE3101:
3701:src/xeq.c     **** 	}
 21509              		.loc 1 3701 3 view .LVU5581
 21510              	.LBB3103:
 21511              	.LBI3103:
1509:src/xeq.c     **** 	set_reg_n_int_sgn(regX_idx, val, sgn);
 21512              		.loc 1 1509 6 view .LVU5582
 21513              	.LBB3104:
1510:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 570


 21514              		.loc 1 1510 2 view .LVU5583
 21515              	.LBE3104:
 21516              	.LBE3103:
3701:src/xeq.c     **** 	}
 21517              		.loc 1 3701 22 is_stmt 0 view .LVU5584
 21518 0060 074B     		ldr	r3, .L1552
 21519              	.LVL1654:
3701:src/xeq.c     **** 	}
 21520              		.loc 1 3701 22 view .LVU5585
 21521 0062 1B68     		ldr	r3, [r3]
 21522              	.LVL1655:
3701:src/xeq.c     **** 	}
 21523              		.loc 1 3701 22 view .LVU5586
 21524 0064 D3F8E427 		ldr	r2, [r3, #2020]
 21525              	.LBB3107:
 21526              	.LBB3105:
1510:src/xeq.c     **** }
 21527              		.loc 1 1510 2 view .LVU5587
 21528 0068 0021     		movs	r1, #0
 21529              	.LBE3105:
 21530              	.LBE3107:
3701:src/xeq.c     **** 	}
 21531              		.loc 1 3701 22 view .LVU5588
 21532 006a C2F38D12 		ubfx	r2, r2, #6, #14
 21533              	.LBB3108:
 21534              	.LBB3106:
1510:src/xeq.c     **** }
 21535              		.loc 1 1510 2 view .LVU5589
 21536 006e 92B2     		uxth	r2, r2
 21537 0070 0023     		movs	r3, #0
 21538              	.LVL1656:
1510:src/xeq.c     **** }
 21539              		.loc 1 1510 2 view .LVU5590
 21540 0072 0091     		str	r1, [sp]
 21541              	.LVL1657:
1510:src/xeq.c     **** }
 21542              		.loc 1 1510 2 view .LVU5591
 21543 0074 6420     		movs	r0, #100
 21544 0076 FFF7FEFF 		bl	set_reg_n_int_sgn
 21545              	.LVL1658:
1510:src/xeq.c     **** }
 21546              		.loc 1 1510 2 view .LVU5592
 21547              	.LBE3106:
 21548              	.LBE3108:
3703:src/xeq.c     **** 
 21549              		.loc 1 3703 1 view .LVU5593
 21550 007a 04B0     		add	sp, sp, #16
 21551              		.cfi_def_cfa_offset 8
 21552              		@ sp needed
 21553 007c BDE80088 		pop	{fp, pc}
 21554              	.LVL1659:
 21555              	.L1553:
3703:src/xeq.c     **** 
 21556              		.loc 1 3703 1 view .LVU5594
 21557              		.align	2
 21558              	.L1552:
 21559 0080 00000000 		.word	main_ram
ARM GAS  /tmp/cc7LeJ71.s 			page 571


 21560              		.cfi_endproc
 21561              	.LFE206:
 21563              		.section	.text.op_float,"ax",%progbits
 21564              		.align	1
 21565              		.p2align 2,,3
 21566              		.global	op_float
 21567              		.syntax unified
 21568              		.thumb
 21569              		.thumb_func
 21570              		.fpu fpv4-sp-d16
 21572              	op_float:
 21573              	.LVL1660:
 21574              	.LFB207:
3711:src/xeq.c     **** 
 21575              		.loc 1 3711 30 is_stmt 1 view -0
 21576              		.cfi_startproc
 21577              		@ args = 0, pretend = 0, frame = 40
 21578              		@ frame_needed = 0, uses_anonymous_args = 0
3713:src/xeq.c     **** 		int i;
 21579              		.loc 1 3713 2 view .LVU5596
3711:src/xeq.c     **** 
 21580              		.loc 1 3711 30 is_stmt 0 view .LVU5597
 21581 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 21582              		.cfi_def_cfa_offset 28
 21583              		.cfi_offset 4, -28
 21584              		.cfi_offset 5, -24
 21585              		.cfi_offset 6, -20
 21586              		.cfi_offset 7, -16
 21587              		.cfi_offset 8, -12
 21588              		.cfi_offset 9, -8
 21589              		.cfi_offset 14, -4
3713:src/xeq.c     **** 		int i;
 21590              		.loc 1 3713 6 view .LVU5598
 21591 0004 2F4F     		ldr	r7, .L1566
 21592 0006 3B68     		ldr	r3, [r7]
 21593 0008 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3713:src/xeq.c     **** 		int i;
 21594              		.loc 1 3713 5 view .LVU5599
 21595 000c D207     		lsls	r2, r2, #31
3711:src/xeq.c     **** 
 21596              		.loc 1 3711 30 view .LVU5600
 21597 000e 8BB0     		sub	sp, sp, #44
 21598              		.cfi_def_cfa_offset 72
3711:src/xeq.c     **** 
 21599              		.loc 1 3711 30 view .LVU5601
 21600 0010 0646     		mov	r6, r0
3713:src/xeq.c     **** 		int i;
 21601              		.loc 1 3713 5 view .LVU5602
 21602 0012 27D5     		bpl	.L1555
 21603              	.LBB3109:
3714:src/xeq.c     **** 		int mask = StackRegMask[UState.stack_depth];
 21604              		.loc 1 3714 3 is_stmt 1 view .LVU5603
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21605              		.loc 1 3715 3 view .LVU5604
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21606              		.loc 1 3715 33 is_stmt 0 view .LVU5605
 21607 0014 93F8EA37 		ldrb	r3, [r3, #2026]	@ zero_extendqisi2
ARM GAS  /tmp/cc7LeJ71.s 			page 572


3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21608              		.loc 1 3715 26 view .LVU5606
 21609 0018 2B4A     		ldr	r2, .L1566+4
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21610              		.loc 1 3715 33 view .LVU5607
 21611 001a C3F3C003 		ubfx	r3, r3, #3, #1
3716:src/xeq.c     **** 			if (mask & 1) {
 21612              		.loc 1 3716 10 view .LVU5608
 21613 001e 6424     		movs	r4, #100
3715:src/xeq.c     **** 		for (i = regX_idx; i <= regK_idx; ++i, mask >>= 1) {
 21614              		.loc 1 3715 7 view .LVU5609
 21615 0020 32F81350 		ldrh	r5, [r2, r3, lsl #1]
 21616              	.LVL1661:
3716:src/xeq.c     **** 			if (mask & 1) {
 21617              		.loc 1 3716 3 is_stmt 1 view .LVU5610
3716:src/xeq.c     **** 			if (mask & 1) {
 21618              		.loc 1 3716 22 view .LVU5611
 21619              	.LBB3110:
 21620              	.LBB3111:
1119:src/xeq.c     **** }
 21621              		.loc 1 1119 24 is_stmt 0 view .LVU5612
 21622 0024 44F20108 		movw	r8, #16385
 21623 0028 0CE0     		b	.L1558
 21624              	.LVL1662:
 21625              	.L1556:
1119:src/xeq.c     **** }
 21626              		.loc 1 1119 24 view .LVU5613
 21627 002a 3B68     		ldr	r3, [r7]
 21628 002c B3F8E837 		ldrh	r3, [r3, #2024]
 21629              	.LBE3111:
 21630              	.LBE3110:
3721:src/xeq.c     **** 				// expand the other registers which have been left
 21631              		.loc 1 3721 12 view .LVU5614
 21632 0030 08EA0303 		and	r3, r8, r3
 21633 0034 B3F5804F 		cmp	r3, #16384
 21634 0038 32D0     		beq	.L1565
 21635              	.L1557:
3716:src/xeq.c     **** 			if (mask & 1) {
 21636              		.loc 1 3716 37 is_stmt 1 discriminator 2 view .LVU5615
 21637 003a 0134     		adds	r4, r4, #1
 21638              	.LVL1663:
3716:src/xeq.c     **** 			if (mask & 1) {
 21639              		.loc 1 3716 3 is_stmt 0 discriminator 2 view .LVU5616
 21640 003c 702C     		cmp	r4, #112
3716:src/xeq.c     **** 			if (mask & 1) {
 21641              		.loc 1 3716 47 discriminator 2 view .LVU5617
 21642 003e 4FEA6505 		asr	r5, r5, #1
 21643              	.LVL1664:
3716:src/xeq.c     **** 			if (mask & 1) {
 21644              		.loc 1 3716 22 is_stmt 1 discriminator 2 view .LVU5618
3716:src/xeq.c     **** 			if (mask & 1) {
 21645              		.loc 1 3716 3 is_stmt 0 discriminator 2 view .LVU5619
 21646 0042 0FD0     		beq	.L1555
 21647              	.LVL1665:
 21648              	.L1558:
3717:src/xeq.c     **** 				// register belongs to stack
 21649              		.loc 1 3717 4 is_stmt 1 view .LVU5620
ARM GAS  /tmp/cc7LeJ71.s 			page 573


3721:src/xeq.c     **** 				// expand the other registers which have been left
 21650              		.loc 1 3721 9 view .LVU5621
 21651              	.LBB3113:
 21652              	.LBI3110:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 21653              		.loc 1 1118 5 view .LVU5622
 21654              	.LBB3112:
1119:src/xeq.c     **** }
 21655              		.loc 1 1119 2 view .LVU5623
 21656              	.LBE3112:
 21657              	.LBE3113:
3717:src/xeq.c     **** 				// register belongs to stack
 21658              		.loc 1 3717 7 is_stmt 0 view .LVU5624
 21659 0044 EB07     		lsls	r3, r5, #31
 21660 0046 F0D5     		bpl	.L1556
3719:src/xeq.c     **** 			}
 21661              		.loc 1 3719 5 is_stmt 1 view .LVU5625
 21662 0048 A6F1DC02 		sub	r2, r6, #220
 21663 004c B2FA82F2 		clz	r2, r2
 21664 0050 2146     		mov	r1, r4
 21665 0052 2046     		mov	r0, r4
 21666 0054 5209     		lsrs	r2, r2, #5
3716:src/xeq.c     **** 			if (mask & 1) {
 21667              		.loc 1 3716 37 is_stmt 0 view .LVU5626
 21668 0056 0134     		adds	r4, r4, #1
 21669              	.LVL1666:
3719:src/xeq.c     **** 			}
 21670              		.loc 1 3719 5 view .LVU5627
 21671 0058 FFF7FEFF 		bl	register_from_int
 21672              	.LVL1667:
3716:src/xeq.c     **** 			if (mask & 1) {
 21673              		.loc 1 3716 37 is_stmt 1 view .LVU5628
3716:src/xeq.c     **** 			if (mask & 1) {
 21674              		.loc 1 3716 3 is_stmt 0 view .LVU5629
 21675 005c 702C     		cmp	r4, #112
3716:src/xeq.c     **** 			if (mask & 1) {
 21676              		.loc 1 3716 47 view .LVU5630
 21677 005e 4FEA6505 		asr	r5, r5, #1
 21678              	.LVL1668:
3716:src/xeq.c     **** 			if (mask & 1) {
 21679              		.loc 1 3716 22 is_stmt 1 view .LVU5631
3716:src/xeq.c     **** 			if (mask & 1) {
 21680              		.loc 1 3716 3 is_stmt 0 view .LVU5632
 21681 0062 EFD1     		bne	.L1558
 21682              	.LVL1669:
 21683              	.L1555:
3716:src/xeq.c     **** 			if (mask & 1) {
 21684              		.loc 1 3716 3 view .LVU5633
 21685              	.LBE3109:
3728:src/xeq.c     **** 		UState.fract = 0;
 21686              		.loc 1 3728 2 is_stmt 1 view .LVU5634
3728:src/xeq.c     **** 		UState.fract = 0;
 21687              		.loc 1 3728 25 is_stmt 0 view .LVU5635
 21688 0064 06F12403 		add	r3, r6, #36
3728:src/xeq.c     **** 		UState.fract = 0;
 21689              		.loc 1 3728 5 view .LVU5636
 21690 0068 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cc7LeJ71.s 			page 574


 21691 006a 012B     		cmp	r3, #1
 21692 006c 10D9     		bls	.L1559
3729:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21693              		.loc 1 3729 3 is_stmt 1 view .LVU5637
3729:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21694              		.loc 1 3729 16 is_stmt 0 view .LVU5638
 21695 006e 3A68     		ldr	r2, [r7]
3730:src/xeq.c     **** 	}
 21696              		.loc 1 3730 14 view .LVU5639
 21697 0070 164B     		ldr	r3, .L1566+8
3729:src/xeq.c     **** 		State2.hms = (op == OP_HMS) ? 1 : 0;
 21698              		.loc 1 3729 16 view .LVU5640
 21699 0072 92F8E617 		ldrb	r1, [r2, #2022]	@ zero_extendqisi2
 21700 0076 6FF34511 		bfc	r1, #5, #1
 21701 007a 82F8E617 		strb	r1, [r2, #2022]
3730:src/xeq.c     **** 	}
 21702              		.loc 1 3730 3 is_stmt 1 view .LVU5641
3730:src/xeq.c     **** 	}
 21703              		.loc 1 3730 35 is_stmt 0 view .LVU5642
 21704 007e A6F15C06 		sub	r6, #92
3730:src/xeq.c     **** 	}
 21705              		.loc 1 3730 14 view .LVU5643
 21706 0082 DA7D     		ldrb	r2, [r3, #23]	@ zero_extendqisi2
3730:src/xeq.c     **** 	}
 21707              		.loc 1 3730 35 view .LVU5644
 21708 0084 B6FA86F6 		clz	r6, r6
 21709 0088 7609     		lsrs	r6, r6, #5
3730:src/xeq.c     **** 	}
 21710              		.loc 1 3730 14 view .LVU5645
 21711 008a 66F30002 		bfi	r2, r6, #0, #1
 21712 008e DA75     		strb	r2, [r3, #23]
 21713              	.L1559:
3732:src/xeq.c     **** }
 21714              		.loc 1 3732 2 is_stmt 1 view .LVU5646
3732:src/xeq.c     **** }
 21715              		.loc 1 3732 14 is_stmt 0 view .LVU5647
 21716 0090 6420     		movs	r0, #100
 21717 0092 FFF7FEFF 		bl	get_reg_n
 21718              	.LVL1670:
3732:src/xeq.c     **** }
 21719              		.loc 1 3732 12 view .LVU5648
 21720 0096 0E4B     		ldr	r3, .L1566+12
 21721 0098 1860     		str	r0, [r3]
3733:src/xeq.c     **** 
 21722              		.loc 1 3733 1 view .LVU5649
 21723 009a 0BB0     		add	sp, sp, #44
 21724              		.cfi_remember_state
 21725              		.cfi_def_cfa_offset 28
 21726              		@ sp needed
 21727 009c BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 21728              	.LVL1671:
 21729              	.L1565:
 21730              		.cfi_restore_state
 21731              	.LBB3116:
3724:src/xeq.c     **** 			}
 21732              		.loc 1 3724 5 is_stmt 1 view .LVU5650
3724:src/xeq.c     **** 			}
ARM GAS  /tmp/cc7LeJ71.s 			page 575


 21733              		.loc 1 3724 29 is_stmt 0 view .LVU5651
 21734 00a0 2046     		mov	r0, r4
 21735 00a2 FFF7FEFF 		bl	get_reg_n
 21736              	.LVL1672:
3724:src/xeq.c     **** 			}
 21737              		.loc 1 3724 47 view .LVU5652
 21738 00a6 3B68     		ldr	r3, [r7]
 21739 00a8 03F58663 		add	r3, r3, #1072
3724:src/xeq.c     **** 			}
 21740              		.loc 1 3724 29 view .LVU5653
 21741 00ac 8146     		mov	r9, r0
 21742              	.LVL1673:
 21743              	.LBB3114:
 21744              	.LBI3114:
 654:src/xeq.c     **** 	decNumber temp;
 21745              		.loc 1 654 6 is_stmt 1 view .LVU5654
 21746              	.LBB3115:
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 21747              		.loc 1 655 2 view .LVU5655
 656:src/xeq.c     **** }
 21748              		.loc 1 656 2 view .LVU5656
 656:src/xeq.c     **** }
 21749              		.loc 1 656 27 is_stmt 0 view .LVU5657
 21750 00ae 01A9     		add	r1, sp, #4
 21751 00b0 03EBC400 		add	r0, r3, r4, lsl #3
 21752              	.LVL1674:
 656:src/xeq.c     **** }
 21753              		.loc 1 656 27 view .LVU5658
 21754 00b4 FFF7FEFF 		bl	decimal64ToNumber
 21755              	.LVL1675:
 656:src/xeq.c     **** }
 21756              		.loc 1 656 27 view .LVU5659
 21757 00b8 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 21758              		.loc 1 656 2 view .LVU5660
 21759 00ba 4846     		mov	r0, r9
 21760 00bc FFF7FEFF 		bl	packed128_from_number
 21761              	.LVL1676:
 657:src/xeq.c     **** 
 21762              		.loc 1 657 1 view .LVU5661
 21763 00c0 BBE7     		b	.L1557
 21764              	.L1567:
 21765 00c2 00BF     		.align	2
 21766              	.L1566:
 21767 00c4 00000000 		.word	main_ram
 21768 00c8 00000000 		.word	.LANCHOR3
 21769 00cc 00000000 		.word	StateWhileOn
 21770 00d0 00000000 		.word	StackBase
 21771              	.LBE3115:
 21772              	.LBE3114:
 21773              	.LBE3116:
 21774              		.cfi_endproc
 21775              	.LFE207:
 21777              		.section	.text.cmddisp,"ax",%progbits
 21778              		.align	1
 21779              		.p2align 2,,3
 21780              		.global	cmddisp
ARM GAS  /tmp/cc7LeJ71.s 			page 576


 21781              		.syntax unified
 21782              		.thumb
 21783              		.thumb_func
 21784              		.fpu fpv4-sp-d16
 21786              	cmddisp:
 21787              	.LVL1677:
 21788              	.LFB173:
2455:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21789              		.loc 1 2455 46 is_stmt 1 view -0
 21790              		.cfi_startproc
 21791              		@ args = 0, pretend = 0, frame = 0
 21792              		@ frame_needed = 0, uses_anonymous_args = 0
 21793              		@ link register save eliminated.
2457:src/xeq.c     **** 	int dispmode = get_dispmode_digs(&dispdigs);
 21794              		.loc 1 2457 2 view .LVU5663
2458:src/xeq.c     **** #ifdef DM42
 21795              		.loc 1 2458 2 view .LVU5664
 21796              	.LBB3125:
 21797              	.LBI3125:
2423:src/xeq.c     **** {
 21798              		.loc 1 2423 5 view .LVU5665
 21799              	.LBB3126:
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21800              		.loc 1 2425 2 view .LVU5666
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21801              		.loc 1 2425 17 is_stmt 0 view .LVU5667
 21802 0000 2E4B     		ldr	r3, .L1588
 21803 0002 1A68     		ldr	r2, [r3]
 21804              	.LBE3126:
 21805              	.LBE3125:
2455:src/xeq.c     **** #ifdef INCLUDE_SIGFIG_MODE
 21806              		.loc 1 2455 46 view .LVU5668
 21807 0004 10B4     		push	{r4}
 21808              		.cfi_def_cfa_offset 4
 21809              		.cfi_offset 4, -4
 21810              	.LBB3128:
 21811              	.LBB3127:
2426:src/xeq.c     **** 
 21812              		.loc 1 2426 23 view .LVU5669
 21813 0006 92F8E747 		ldrb	r4, [r2, #2023]	@ zero_extendqisi2
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21814              		.loc 1 2425 23 view .LVU5670
 21815 000a 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
2428:src/xeq.c     **** 		dispdigs -= 12;
 21816              		.loc 1 2428 5 view .LVU5671
 21817 000e 04F00F04 		and	r4, r4, #15
 21818 0012 0B2C     		cmp	r4, #11
2425:src/xeq.c     **** 	int dispdigs = UState.dispdigs;
 21819              		.loc 1 2425 6 view .LVU5672
 21820 0014 4FEA9313 		lsr	r3, r3, #6
 21821              	.LVL1678:
2426:src/xeq.c     **** 
 21822              		.loc 1 2426 2 is_stmt 1 view .LVU5673
2428:src/xeq.c     **** 		dispdigs -= 12;
 21823              		.loc 1 2428 2 view .LVU5674
2428:src/xeq.c     **** 		dispdigs -= 12;
 21824              		.loc 1 2428 5 is_stmt 0 view .LVU5675
ARM GAS  /tmp/cc7LeJ71.s 			page 577


 21825 0018 04D9     		bls	.L1569
2429:src/xeq.c     **** 		dispmode += 4;
 21826              		.loc 1 2429 3 is_stmt 1 view .LVU5676
 21827              	.LVL1679:
2430:src/xeq.c     **** 		if (dispmode >= 6) {
 21828              		.loc 1 2430 3 view .LVU5677
2430:src/xeq.c     **** 		if (dispmode >= 6) {
 21829              		.loc 1 2430 12 is_stmt 0 view .LVU5678
 21830 001a 1C1D     		adds	r4, r3, #4
 21831              	.LVL1680:
2431:src/xeq.c     **** 			dispmode -= 2;
 21832              		.loc 1 2431 3 is_stmt 1 view .LVU5679
2431:src/xeq.c     **** 			dispmode -= 2;
 21833              		.loc 1 2431 6 is_stmt 0 view .LVU5680
 21834 001c 052C     		cmp	r4, #5
2432:src/xeq.c     **** 			dispdigs += 4;
 21835              		.loc 1 2432 4 is_stmt 1 view .LVU5681
2432:src/xeq.c     **** 			dispdigs += 4;
 21836              		.loc 1 2432 13 is_stmt 0 view .LVU5682
 21837 001e CCBF     		ite	gt
 21838 0020 0233     		addgt	r3, r3, #2
 21839              	.LVL1681:
2433:src/xeq.c     **** 		}
 21840              		.loc 1 2433 4 is_stmt 1 view .LVU5683
2433:src/xeq.c     **** 		}
 21841              		.loc 1 2433 4 is_stmt 0 view .LVU5684
 21842 0022 2346     		movle	r3, r4
 21843              	.LVL1682:
 21844              	.L1569:
2436:src/xeq.c     **** 	return dispmode;
 21845              		.loc 1 2436 2 is_stmt 1 view .LVU5685
2437:src/xeq.c     **** }
 21846              		.loc 1 2437 2 view .LVU5686
2437:src/xeq.c     **** }
 21847              		.loc 1 2437 2 is_stmt 0 view .LVU5687
 21848              	.LBE3127:
 21849              	.LBE3128:
2460:src/xeq.c     **** 	case RARG_STD:
 21850              		.loc 1 2460 2 is_stmt 1 view .LVU5688
 21851 0024 4F29     		cmp	r1, #79
 21852 0026 1DD8     		bhi	.L1570
 21853 0028 4B29     		cmp	r1, #75
 21854 002a 3ED9     		bls	.L1571
 21855 002c 4D39     		subs	r1, r1, #77
 21856              	.LVL1683:
2460:src/xeq.c     **** 	case RARG_STD:
 21857              		.loc 1 2460 2 is_stmt 0 view .LVU5689
 21858 002e 0229     		cmp	r1, #2
 21859 0030 41D8     		bhi	.L1572
 21860 0032 DFE801F0 		tbb	[pc, r1]
 21861              	.LVL1684:
 21862              	.L1574:
 21863 0036 15       		.byte	(.L1576-.L1574)/2
 21864 0037 02       		.byte	(.L1583-.L1574)/2
 21865 0038 38       		.byte	(.L1573-.L1574)/2
 21866 0039 00       		.p2align 1
 21867              	.L1583:
ARM GAS  /tmp/cc7LeJ71.s 			page 578


2460:src/xeq.c     **** 	case RARG_STD:
 21868              		.loc 1 2460 2 view .LVU5690
 21869 003a 0223     		movs	r3, #2
 21870              	.L1575:
2493:src/xeq.c     **** #else
 21871              		.loc 1 2493 2 is_stmt 1 view .LVU5691
 21872 003c 0146     		mov	r1, r0
 21873              	.LVL1685:
 21874              	.LBB3129:
 21875              	.LBI3129:
2440:src/xeq.c     **** {
 21876              		.loc 1 2440 6 view .LVU5692
 21877              	.LBB3130:
2442:src/xeq.c     **** 		dispmode -= 4;
 21878              		.loc 1 2442 2 view .LVU5693
 21879              	.L1580:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21880              		.loc 1 2450 2 view .LVU5694
2451:src/xeq.c     **** }
 21881              		.loc 1 2451 2 view .LVU5695
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21882              		.loc 1 2450 18 is_stmt 0 view .LVU5696
 21883 003e B2F8E607 		ldrh	r0, [r2, #2022]
 21884              	.LVL1686:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21885              		.loc 1 2450 18 view .LVU5697
 21886              	.LBE3130:
 21887              	.LBE3129:
2500:src/xeq.c     **** 
 21888              		.loc 1 2500 1 view .LVU5698
 21889 0042 5DF8044B 		ldr	r4, [sp], #4
 21890              		.cfi_remember_state
 21891              		.cfi_restore 4
 21892              		.cfi_def_cfa_offset 0
 21893              	.LBB3134:
 21894              	.LBB3131:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21895              		.loc 1 2450 18 view .LVU5699
 21896 0046 01F00F01 		and	r1, r1, #15
 21897              	.LVL1687:
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21898              		.loc 1 2450 18 view .LVU5700
 21899 004a 9B01     		lsls	r3, r3, #6
 21900 004c 43EA0123 		orr	r3, r3, r1, lsl #8
 21901 0050 20F47C61 		bic	r1, r0, #4032
 21902 0054 0B43     		orrs	r3, r3, r1
 21903 0056 A2F8E637 		strh	r3, [r2, #2022]	@ movhi
2450:src/xeq.c     **** 	UState.dispdigs = dispdigs;
 21904              		.loc 1 2450 18 view .LVU5701
 21905              	.LBE3131:
 21906              	.LBE3134:
2499:src/xeq.c     **** }
 21907              		.loc 1 2499 2 is_stmt 1 view .LVU5702
 21908 005a 5B20     		movs	r0, #91
 21909 005c FFF7FEBF 		b	op_float
 21910              	.LVL1688:
 21911              	.L1576:
ARM GAS  /tmp/cc7LeJ71.s 			page 579


 21912              		.cfi_restore_state
2460:src/xeq.c     **** 	case RARG_STD:
 21913              		.loc 1 2460 2 is_stmt 0 view .LVU5703
 21914 0060 0123     		movs	r3, #1
 21915 0062 EBE7     		b	.L1575
 21916              	.LVL1689:
 21917              	.L1570:
2460:src/xeq.c     **** 	case RARG_STD:
 21918              		.loc 1 2460 2 view .LVU5704
 21919 0064 9429     		cmp	r1, #148
 21920 0066 0CD0     		beq	.L1584
 21921 0068 9529     		cmp	r1, #149
 21922 006a 08BF     		it	eq
 21923 006c 0523     		moveq	r3, #5
 21924              	.LVL1690:
2460:src/xeq.c     **** 	case RARG_STD:
 21925              		.loc 1 2460 2 view .LVU5705
 21926 006e 1CD1     		bne	.L1571
 21927              	.LVL1691:
 21928              	.L1577:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21929              		.loc 1 2481 54 discriminator 1 view .LVU5706
 21930 0070 0728     		cmp	r0, #7
 21931 0072 0AD8     		bhi	.L1587
 21932              	.L1578:
2493:src/xeq.c     **** #else
 21933              		.loc 1 2493 2 is_stmt 1 view .LVU5707
 21934              	.LVL1692:
 21935              	.LBB3135:
2440:src/xeq.c     **** {
 21936              		.loc 1 2440 6 view .LVU5708
 21937              	.LBB3132:
2442:src/xeq.c     **** 		dispmode -= 4;
 21938              		.loc 1 2442 2 view .LVU5709
2443:src/xeq.c     **** 		dispdigs += 12;
 21939              		.loc 1 2443 3 view .LVU5710
2444:src/xeq.c     **** 		if (dispdigs >= 16) {
 21940              		.loc 1 2444 3 view .LVU5711
2444:src/xeq.c     **** 		if (dispdigs >= 16) {
 21941              		.loc 1 2444 12 is_stmt 0 view .LVU5712
 21942 0074 00F10C01 		add	r1, r0, #12
 21943              	.LVL1693:
2445:src/xeq.c     **** 			dispdigs -= 4;
 21944              		.loc 1 2445 3 is_stmt 1 view .LVU5713
2445:src/xeq.c     **** 			dispdigs -= 4;
 21945              		.loc 1 2445 6 is_stmt 0 view .LVU5714
 21946 0078 0F29     		cmp	r1, #15
 21947 007a 0EDC     		bgt	.L1581
2445:src/xeq.c     **** 			dispdigs -= 4;
 21948              		.loc 1 2445 6 view .LVU5715
 21949 007c 03F00303 		and	r3, r3, #3
 21950              	.LVL1694:
2445:src/xeq.c     **** 			dispdigs -= 4;
 21951              		.loc 1 2445 6 view .LVU5716
 21952 0080 DDE7     		b	.L1580
 21953              	.LVL1695:
 21954              	.L1584:
ARM GAS  /tmp/cc7LeJ71.s 			page 580


2445:src/xeq.c     **** 			dispdigs -= 4;
 21955              		.loc 1 2445 6 view .LVU5717
 21956              	.LBE3132:
 21957              	.LBE3135:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21958              		.loc 1 2481 54 view .LVU5718
 21959 0082 0728     		cmp	r0, #7
2474:src/xeq.c     **** 	  break;
 21960              		.loc 1 2474 13 view .LVU5719
 21961 0084 4FF00403 		mov	r3, #4
 21962              	.LVL1696:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 21963              		.loc 1 2481 54 view .LVU5720
 21964 0088 F4D9     		bls	.L1578
 21965              	.LVL1697:
 21966              	.L1587:
2482:src/xeq.c     **** 	  return;
 21967              		.loc 1 2482 4 is_stmt 1 view .LVU5721
 21968              	.LBB3136:
 21969              	.LBI3136:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21970              		.loc 1 546 5 view .LVU5722
 21971              	.LBB3137:
 547:src/xeq.c     **** 		Error = e;
 21972              		.loc 1 547 2 view .LVU5723
 547:src/xeq.c     **** 		Error = e;
 21973              		.loc 1 547 12 is_stmt 0 view .LVU5724
 21974 008a 0D4B     		ldr	r3, .L1588+4
 21975              	.LVL1698:
 547:src/xeq.c     **** 		Error = e;
 21976              		.loc 1 547 5 view .LVU5725
 21977 008c 1A68     		ldr	r2, [r3]
 21978 008e 0AB9     		cbnz	r2, .L1568
 21979              	.LVL1699:
 21980              	.LBB3138:
 21981              	.LBI3138:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 21982              		.loc 1 546 5 is_stmt 1 view .LVU5726
 21983              	.LBB3139:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 21984              		.loc 1 548 3 view .LVU5727
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 21985              		.loc 1 548 9 is_stmt 0 view .LVU5728
 21986 0090 0822     		movs	r2, #8
 21987 0092 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 21988              		.loc 1 549 3 is_stmt 1 view .LVU5729
 21989              	.LVL1700:
 21990              	.L1568:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 21991              		.loc 1 549 3 is_stmt 0 view .LVU5730
 21992              	.LBE3139:
 21993              	.LBE3138:
 21994              	.LBE3137:
 21995              	.LBE3136:
2500:src/xeq.c     **** 
 21996              		.loc 1 2500 1 view .LVU5731
ARM GAS  /tmp/cc7LeJ71.s 			page 581


 21997 0094 5DF8044B 		ldr	r4, [sp], #4
 21998              		.cfi_remember_state
 21999              		.cfi_restore 4
 22000              		.cfi_def_cfa_offset 0
 22001 0098 7047     		bx	lr
 22002              	.LVL1701:
 22003              	.L1581:
 22004              		.cfi_restore_state
 22005              	.LBB3140:
 22006              	.LBB3133:
2446:src/xeq.c     **** 			dispmode += 2;
 22007              		.loc 1 2446 4 is_stmt 1 view .LVU5732
2447:src/xeq.c     **** 		}
 22008              		.loc 1 2447 13 is_stmt 0 view .LVU5733
 22009 009a 023B     		subs	r3, r3, #2
 22010              	.LVL1702:
2447:src/xeq.c     **** 		}
 22011              		.loc 1 2447 13 view .LVU5734
 22012 009c 03F00303 		and	r3, r3, #3
 22013              	.LVL1703:
2446:src/xeq.c     **** 			dispmode += 2;
 22014              		.loc 1 2446 13 view .LVU5735
 22015 00a0 00F10801 		add	r1, r0, #8
 22016              	.LVL1704:
2447:src/xeq.c     **** 		}
 22017              		.loc 1 2447 4 is_stmt 1 view .LVU5736
2447:src/xeq.c     **** 		}
 22018              		.loc 1 2447 4 is_stmt 0 view .LVU5737
 22019 00a4 CBE7     		b	.L1580
 22020              	.LVL1705:
 22021              	.L1573:
2447:src/xeq.c     **** 		}
 22022              		.loc 1 2447 4 view .LVU5738
 22023              	.LBE3133:
 22024              	.LBE3140:
2471:src/xeq.c     **** 	  break;
 22025              		.loc 1 2471 4 is_stmt 1 view .LVU5739
2472:src/xeq.c     **** 	case RARG_SIG:
 22026              		.loc 1 2472 4 view .LVU5740
 22027 00a6 0323     		movs	r3, #3
 22028 00a8 C8E7     		b	.L1575
 22029              	.LVL1706:
 22030              	.L1571:
2479:src/xeq.c     **** 	}
 22031              		.loc 1 2479 10 view .LVU5741
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22032              		.loc 1 2481 2 view .LVU5742
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22033              		.loc 1 2481 28 is_stmt 0 view .LVU5743
 22034 00aa 191F     		subs	r1, r3, #4
 22035              	.LVL1707:
2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22036              		.loc 1 2481 5 view .LVU5744
 22037 00ac 0129     		cmp	r1, #1
 22038 00ae DFD9     		bls	.L1577
 22039 00b0 03F00303 		and	r3, r3, #3
 22040              	.LVL1708:
ARM GAS  /tmp/cc7LeJ71.s 			page 582


2481:src/xeq.c     **** 	  report_err(ERR_RANGE);
 22041              		.loc 1 2481 5 view .LVU5745
 22042 00b4 C2E7     		b	.L1575
 22043              	.LVL1709:
 22044              	.L1572:
2460:src/xeq.c     **** 	case RARG_STD:
 22045              		.loc 1 2460 2 view .LVU5746
 22046 00b6 0023     		movs	r3, #0
 22047 00b8 C0E7     		b	.L1575
 22048              	.L1589:
 22049 00ba 00BF     		.align	2
 22050              	.L1588:
 22051 00bc 00000000 		.word	main_ram
 22052 00c0 00000000 		.word	Error
 22053              		.cfi_endproc
 22054              	.LFE173:
 22056              		.section	.text.set_int_base,"ax",%progbits
 22057              		.align	1
 22058              		.p2align 2,,3
 22059              		.global	set_int_base
 22060              		.syntax unified
 22061              		.thumb
 22062              		.thumb_func
 22063              		.fpu fpv4-sp-d16
 22065              	set_int_base:
 22066              	.LVL1710:
 22067              	.LFB210:
3761:src/xeq.c     **** 	if (arg < 2) {
 22068              		.loc 1 3761 51 is_stmt 1 view -0
 22069              		.cfi_startproc
 22070              		@ args = 0, pretend = 0, frame = 0
 22071              		@ frame_needed = 0, uses_anonymous_args = 0
3762:src/xeq.c     **** 		if (arg == 0)
 22072              		.loc 1 3762 2 view .LVU5748
3762:src/xeq.c     **** 		if (arg == 0)
 22073              		.loc 1 3762 5 is_stmt 0 view .LVU5749
 22074 0000 0128     		cmp	r0, #1
3761:src/xeq.c     **** 	if (arg < 2) {
 22075              		.loc 1 3761 51 view .LVU5750
 22076 0002 08B5     		push	{r3, lr}
 22077              		.cfi_def_cfa_offset 8
 22078              		.cfi_offset 3, -8
 22079              		.cfi_offset 14, -4
3762:src/xeq.c     **** 		if (arg == 0)
 22080              		.loc 1 3762 5 view .LVU5751
 22081 0004 0BD9     		bls	.L1595
3768:src/xeq.c     **** }
 22082              		.loc 1 3768 3 is_stmt 1 view .LVU5752
 22083              	.LVL1711:
 22084              	.LBB3141:
 22085              	.LBI3141:
3755:src/xeq.c     **** 	UState.int_base = b - 1;
 22086              		.loc 1 3755 13 view .LVU5753
 22087              	.LBB3142:
3756:src/xeq.c     **** 	if (!is_intmode())
 22088              		.loc 1 3756 2 view .LVU5754
 22089 0006 114B     		ldr	r3, .L1597
ARM GAS  /tmp/cc7LeJ71.s 			page 583


 22090 0008 1A68     		ldr	r2, [r3]
3756:src/xeq.c     **** 	if (!is_intmode())
 22091              		.loc 1 3756 18 is_stmt 0 view .LVU5755
 22092 000a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
3756:src/xeq.c     **** 	if (!is_intmode())
 22093              		.loc 1 3756 22 view .LVU5756
 22094 000e 0138     		subs	r0, r0, #1
 22095              	.LVL1712:
3756:src/xeq.c     **** 	if (!is_intmode())
 22096              		.loc 1 3756 18 view .LVU5757
 22097 0010 60F30713 		bfi	r3, r0, #4, #4
 22098 0014 82F8E837 		strb	r3, [r2, #2024]
3757:src/xeq.c     **** 		switch_to_int();
 22099              		.loc 1 3757 2 is_stmt 1 view .LVU5758
3757:src/xeq.c     **** 		switch_to_int();
 22100              		.loc 1 3757 5 is_stmt 0 view .LVU5759
 22101 0018 DB07     		lsls	r3, r3, #31
 22102 001a 12D5     		bpl	.L1596
 22103              	.LBE3142:
 22104              	.LBE3141:
3769:src/xeq.c     **** 
 22105              		.loc 1 3769 1 view .LVU5760
 22106 001c 08BD     		pop	{r3, pc}
 22107              	.LVL1713:
 22108              	.L1595:
3763:src/xeq.c     **** 			op_float(OP_FLOAT);
 22109              		.loc 1 3763 3 is_stmt 1 view .LVU5761
3763:src/xeq.c     **** 			op_float(OP_FLOAT);
 22110              		.loc 1 3763 6 is_stmt 0 view .LVU5762
 22111 001e 20B9     		cbnz	r0, .L1592
3764:src/xeq.c     **** 		else
 22112              		.loc 1 3764 4 is_stmt 1 view .LVU5763
3769:src/xeq.c     **** 
 22113              		.loc 1 3769 1 is_stmt 0 view .LVU5764
 22114 0020 BDE80840 		pop	{r3, lr}
 22115              		.cfi_remember_state
 22116              		.cfi_restore 14
 22117              		.cfi_restore 3
 22118              		.cfi_def_cfa_offset 0
3764:src/xeq.c     **** 		else
 22119              		.loc 1 3764 4 view .LVU5765
 22120 0024 5B20     		movs	r0, #91
 22121              	.LVL1714:
3764:src/xeq.c     **** 		else
 22122              		.loc 1 3764 4 view .LVU5766
 22123 0026 FFF7FEBF 		b	op_float
 22124              	.LVL1715:
 22125              	.L1592:
 22126              		.cfi_restore_state
3766:src/xeq.c     **** 	} else
 22127              		.loc 1 3766 4 is_stmt 1 view .LVU5767
 22128              	.LBB3145:
 22129              	.LBI3145:
3772:src/xeq.c     **** 	op_float(OP_FLOAT);
 22130              		.loc 1 3772 6 view .LVU5768
 22131              	.LBB3146:
3773:src/xeq.c     **** 	UState.fract = 1;
ARM GAS  /tmp/cc7LeJ71.s 			page 584


 22132              		.loc 1 3773 2 view .LVU5769
 22133 002a 5B20     		movs	r0, #91
 22134              	.LVL1716:
3773:src/xeq.c     **** 	UState.fract = 1;
 22135              		.loc 1 3773 2 is_stmt 0 view .LVU5770
 22136 002c FFF7FEFF 		bl	op_float
 22137              	.LVL1717:
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22138              		.loc 1 3774 2 is_stmt 1 view .LVU5771
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22139              		.loc 1 3774 15 is_stmt 0 view .LVU5772
 22140 0030 064B     		ldr	r3, .L1597
 22141 0032 1A68     		ldr	r2, [r3]
 22142 0034 92F8E637 		ldrb	r3, [r2, #2022]	@ zero_extendqisi2
 22143 0038 43F02003 		orr	r3, r3, #32
 22144 003c 82F8E637 		strb	r3, [r2, #2022]
3775:src/xeq.c     **** 		UState.improperfrac = 1;
 22145              		.loc 1 3775 2 is_stmt 1 view .LVU5773
3777:src/xeq.c     **** 		UState.improperfrac = 0;
 22146              		.loc 1 3777 7 view .LVU5774
 22147              	.LBE3146:
 22148              	.LBE3145:
3769:src/xeq.c     **** 
 22149              		.loc 1 3769 1 is_stmt 0 view .LVU5775
 22150 0040 08BD     		pop	{r3, pc}
 22151              	.LVL1718:
 22152              	.L1596:
 22153              	.LBB3147:
 22154              	.LBB3143:
3758:src/xeq.c     **** }
 22155              		.loc 1 3758 3 is_stmt 1 view .LVU5776
 22156              	.LBE3143:
 22157              	.LBE3147:
3769:src/xeq.c     **** 
 22158              		.loc 1 3769 1 is_stmt 0 view .LVU5777
 22159 0042 BDE80840 		pop	{r3, lr}
 22160              		.cfi_restore 14
 22161              		.cfi_restore 3
 22162              		.cfi_def_cfa_offset 0
 22163              	.LBB3148:
 22164              	.LBB3144:
3758:src/xeq.c     **** }
 22165              		.loc 1 3758 3 view .LVU5778
 22166 0046 FFF7FEBF 		b	switch_to_int
 22167              	.LVL1719:
 22168              	.L1598:
3758:src/xeq.c     **** }
 22169              		.loc 1 3758 3 view .LVU5779
 22170 004a 00BF     		.align	2
 22171              	.L1597:
 22172 004c 00000000 		.word	main_ram
 22173              	.LBE3144:
 22174              	.LBE3148:
 22175              		.cfi_endproc
 22176              	.LFE210:
 22178              		.section	.text.op_fract,"ax",%progbits
 22179              		.align	1
ARM GAS  /tmp/cc7LeJ71.s 			page 585


 22180              		.p2align 2,,3
 22181              		.global	op_fract
 22182              		.syntax unified
 22183              		.thumb
 22184              		.thumb_func
 22185              		.fpu fpv4-sp-d16
 22187              	op_fract:
 22188              	.LVL1720:
 22189              	.LFB211:
3772:src/xeq.c     **** 	op_float(OP_FLOAT);
 22190              		.loc 1 3772 30 is_stmt 1 view -0
 22191              		.cfi_startproc
 22192              		@ args = 0, pretend = 0, frame = 0
 22193              		@ frame_needed = 0, uses_anonymous_args = 0
3773:src/xeq.c     **** 	UState.fract = 1;
 22194              		.loc 1 3773 2 view .LVU5781
3772:src/xeq.c     **** 	op_float(OP_FLOAT);
 22195              		.loc 1 3772 30 is_stmt 0 view .LVU5782
 22196 0000 10B5     		push	{r4, lr}
 22197              		.cfi_def_cfa_offset 8
 22198              		.cfi_offset 4, -8
 22199              		.cfi_offset 14, -4
3772:src/xeq.c     **** 	op_float(OP_FLOAT);
 22200              		.loc 1 3772 30 view .LVU5783
 22201 0002 0446     		mov	r4, r0
3773:src/xeq.c     **** 	UState.fract = 1;
 22202              		.loc 1 3773 2 view .LVU5784
 22203 0004 5B20     		movs	r0, #91
 22204              	.LVL1721:
3773:src/xeq.c     **** 	UState.fract = 1;
 22205              		.loc 1 3773 2 view .LVU5785
 22206 0006 FFF7FEFF 		bl	op_float
 22207              	.LVL1722:
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22208              		.loc 1 3774 2 is_stmt 1 view .LVU5786
 22209 000a 0D4B     		ldr	r3, .L1605
 22210 000c 1B68     		ldr	r3, [r3]
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22211              		.loc 1 3774 15 is_stmt 0 view .LVU5787
 22212 000e 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
3775:src/xeq.c     **** 		UState.improperfrac = 1;
 22213              		.loc 1 3775 5 view .LVU5788
 22214 0012 4D2C     		cmp	r4, #77
3774:src/xeq.c     **** 	if (op == OP_FRACIMPROPER)
 22215              		.loc 1 3774 15 view .LVU5789
 22216 0014 42F02002 		orr	r2, r2, #32
 22217 0018 83F8E627 		strb	r2, [r3, #2022]
3775:src/xeq.c     **** 		UState.improperfrac = 1;
 22218              		.loc 1 3775 2 is_stmt 1 view .LVU5790
3775:src/xeq.c     **** 		UState.improperfrac = 1;
 22219              		.loc 1 3775 5 is_stmt 0 view .LVU5791
 22220 001c 09D0     		beq	.L1603
3777:src/xeq.c     **** 		UState.improperfrac = 0;
 22221              		.loc 1 3777 7 is_stmt 1 view .LVU5792
3777:src/xeq.c     **** 		UState.improperfrac = 0;
 22222              		.loc 1 3777 10 is_stmt 0 view .LVU5793
 22223 001e 4E2C     		cmp	r4, #78
ARM GAS  /tmp/cc7LeJ71.s 			page 586


 22224 0020 00D0     		beq	.L1604
3779:src/xeq.c     **** 
 22225              		.loc 1 3779 1 view .LVU5794
 22226 0022 10BD     		pop	{r4, pc}
 22227              	.L1604:
3778:src/xeq.c     **** }
 22228              		.loc 1 3778 3 is_stmt 1 view .LVU5795
3778:src/xeq.c     **** }
 22229              		.loc 1 3778 23 is_stmt 0 view .LVU5796
 22230 0024 93F8E627 		ldrb	r2, [r3, #2022]	@ zero_extendqisi2
 22231 0028 6FF30412 		bfc	r2, #4, #1
 22232 002c 83F8E627 		strb	r2, [r3, #2022]
3779:src/xeq.c     **** 
 22233              		.loc 1 3779 1 view .LVU5797
 22234 0030 10BD     		pop	{r4, pc}
 22235              	.L1603:
3776:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22236              		.loc 1 3776 3 is_stmt 1 view .LVU5798
3776:src/xeq.c     **** 	else if (op == OP_FRACPROPER)
 22237              		.loc 1 3776 23 is_stmt 0 view .LVU5799
 22238 0032 D2B2     		uxtb	r2, r2
 22239 0034 42F01002 		orr	r2, r2, #16
 22240 0038 83F8E627 		strb	r2, [r3, #2022]
3779:src/xeq.c     **** 
 22241              		.loc 1 3779 1 view .LVU5800
 22242 003c 10BD     		pop	{r4, pc}
 22243              	.L1606:
 22244 003e 00BF     		.align	2
 22245              	.L1605:
 22246 0040 00000000 		.word	main_ram
 22247              		.cfi_endproc
 22248              	.LFE211:
 22250              		.section	.text.cmdsavem,"ax",%progbits
 22251              		.align	1
 22252              		.p2align 2,,3
 22253              		.global	cmdsavem
 22254              		.syntax unified
 22255              		.thumb
 22256              		.thumb_func
 22257              		.fpu fpv4-sp-d16
 22259              	cmdsavem:
 22260              	.LVL1723:
 22261              	.LFB212:
3784:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22262              		.loc 1 3784 47 is_stmt 1 view -0
 22263              		.cfi_startproc
 22264              		@ args = 0, pretend = 0, frame = 0
 22265              		@ frame_needed = 0, uses_anonymous_args = 0
3785:src/xeq.c     **** }
 22266              		.loc 1 3785 2 view .LVU5802
3784:src/xeq.c     **** 	xcopy( get_reg_n(arg), &UState, sizeof(unsigned long long int) );
 22267              		.loc 1 3784 47 is_stmt 0 view .LVU5803
 22268 0000 08B5     		push	{r3, lr}
 22269              		.cfi_def_cfa_offset 8
 22270              		.cfi_offset 3, -8
 22271              		.cfi_offset 14, -4
3785:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 587


 22272              		.loc 1 3785 9 view .LVU5804
 22273 0002 FFF7FEFF 		bl	get_reg_n
 22274              	.LVL1724:
3785:src/xeq.c     **** }
 22275              		.loc 1 3785 26 view .LVU5805
 22276 0006 044B     		ldr	r3, .L1609
3785:src/xeq.c     **** }
 22277              		.loc 1 3785 25 view .LVU5806
 22278 0008 1968     		ldr	r1, [r3]
3785:src/xeq.c     **** }
 22279              		.loc 1 3785 2 view .LVU5807
 22280 000a 0822     		movs	r2, #8
3786:src/xeq.c     **** 
 22281              		.loc 1 3786 1 view .LVU5808
 22282 000c BDE80840 		pop	{r3, lr}
 22283              		.cfi_restore 14
 22284              		.cfi_restore 3
 22285              		.cfi_def_cfa_offset 0
3785:src/xeq.c     **** }
 22286              		.loc 1 3785 2 view .LVU5809
 22287 0010 01F2E471 		addw	r1, r1, #2020
 22288 0014 FFF7FEBF 		b	xcopy
 22289              	.LVL1725:
 22290              	.L1610:
 22291              		.align	2
 22292              	.L1609:
 22293 0018 00000000 		.word	main_ram
 22294              		.cfi_endproc
 22295              	.LFE212:
 22297              		.section	.text.set_entry,"ax",%progbits
 22298              		.align	1
 22299              		.p2align 2,,3
 22300              		.global	set_entry
 22301              		.syntax unified
 22302              		.thumb
 22303              		.thumb_func
 22304              		.fpu fpv4-sp-d16
 22306              	set_entry:
 22307              	.LFB215:
3911:src/xeq.c     **** 	if (!Running && !XromRunning)
 22308              		.loc 1 3911 18 is_stmt 1 view -0
 22309              		.cfi_startproc
 22310              		@ args = 0, pretend = 0, frame = 0
 22311              		@ frame_needed = 0, uses_anonymous_args = 0
 22312              		@ link register save eliminated.
3912:src/xeq.c     **** 		State.entryp = 1;
 22313              		.loc 1 3912 2 view .LVU5811
 22314              	.LBB3151:
 22315              	.LBI3151:
3911:src/xeq.c     **** 	if (!Running && !XromRunning)
 22316              		.loc 1 3911 6 view .LVU5812
 22317              	.LBE3151:
3912:src/xeq.c     **** 		State.entryp = 1;
 22318              		.loc 1 3912 6 is_stmt 0 view .LVU5813
 22319 0000 074A     		ldr	r2, .L1613
 22320              	.LBB3153:
 22321              	.LBB3152:
ARM GAS  /tmp/cc7LeJ71.s 			page 588


3912:src/xeq.c     **** 		State.entryp = 1;
 22322              		.loc 1 3912 18 view .LVU5814
 22323 0002 084B     		ldr	r3, .L1613+4
3912:src/xeq.c     **** 		State.entryp = 1;
 22324              		.loc 1 3912 15 view .LVU5815
 22325 0004 1268     		ldr	r2, [r2]
 22326 0006 1B68     		ldr	r3, [r3]
 22327 0008 1343     		orrs	r3, r2, r3
 22328 000a 07D1     		bne	.L1611
3913:src/xeq.c     **** }
 22329              		.loc 1 3913 3 is_stmt 1 view .LVU5816
3913:src/xeq.c     **** }
 22330              		.loc 1 3913 16 is_stmt 0 view .LVU5817
 22331 000c 064B     		ldr	r3, .L1613+8
 22332 000e 1A68     		ldr	r2, [r3]
 22333 0010 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 22334 0014 43F01003 		orr	r3, r3, #16
 22335 0018 82F8DD37 		strb	r3, [r2, #2013]
 22336              	.L1611:
 22337              	.LBE3152:
 22338              	.LBE3153:
3914:src/xeq.c     **** 
 22339              		.loc 1 3914 1 view .LVU5818
 22340 001c 7047     		bx	lr
 22341              	.L1614:
 22342 001e 00BF     		.align	2
 22343              	.L1613:
 22344 0020 00000000 		.word	Running
 22345 0024 00000000 		.word	XromRunning
 22346 0028 00000000 		.word	main_ram
 22347              		.cfi_endproc
 22348              	.LFE215:
 22350              		.section	.text.get_trig_mode,"ax",%progbits
 22351              		.align	1
 22352              		.p2align 2,,3
 22353              		.global	get_trig_mode
 22354              		.syntax unified
 22355              		.thumb
 22356              		.thumb_func
 22357              		.fpu fpv4-sp-d16
 22359              	get_trig_mode:
 22360              	.LFB217:
4099:src/xeq.c     **** 	if (State2.cmplx || XromFlags.xIN)
 22361              		.loc 1 4099 37 is_stmt 1 view -0
 22362              		.cfi_startproc
 22363              		@ args = 0, pretend = 0, frame = 0
 22364              		@ frame_needed = 0, uses_anonymous_args = 0
 22365              		@ link register save eliminated.
4100:src/xeq.c     **** 		return TRIG_RAD;
 22366              		.loc 1 4100 2 view .LVU5820
4100:src/xeq.c     **** 		return TRIG_RAD;
 22367              		.loc 1 4100 6 is_stmt 0 view .LVU5821
 22368 0000 084B     		ldr	r3, .L1619
 22369 0002 5B7D     		ldrb	r3, [r3, #21]	@ zero_extendqisi2
4100:src/xeq.c     **** 		return TRIG_RAD;
 22370              		.loc 1 4100 5 view .LVU5822
 22371 0004 9B07     		lsls	r3, r3, #30
ARM GAS  /tmp/cc7LeJ71.s 			page 589


 22372 0006 0AD4     		bmi	.L1618
4100:src/xeq.c     **** 		return TRIG_RAD;
 22373              		.loc 1 4100 19 discriminator 1 view .LVU5823
 22374 0008 074B     		ldr	r3, .L1619+4
 22375 000a 93F90130 		ldrsb	r3, [r3, #1]
 22376 000e 002B     		cmp	r3, #0
 22377 0010 05DB     		blt	.L1618
4103:src/xeq.c     **** }
 22378              		.loc 1 4103 2 is_stmt 1 view .LVU5824
4103:src/xeq.c     **** }
 22379              		.loc 1 4103 33 is_stmt 0 view .LVU5825
 22380 0012 064B     		ldr	r3, .L1619+8
 22381 0014 1B68     		ldr	r3, [r3]
 22382 0016 93F8EA07 		ldrb	r0, [r3, #2026]	@ zero_extendqisi2
4103:src/xeq.c     **** }
 22383              		.loc 1 4103 9 view .LVU5826
 22384 001a 8009     		lsrs	r0, r0, #6
 22385 001c 7047     		bx	lr
 22386              	.L1618:
4101:src/xeq.c     **** 	//if (State2.hyp)	return TRIG_RAD;
 22387              		.loc 1 4101 10 view .LVU5827
 22388 001e 0120     		movs	r0, #1
4104:src/xeq.c     **** 
 22389              		.loc 1 4104 1 view .LVU5828
 22390 0020 7047     		bx	lr
 22391              	.L1620:
 22392 0022 00BF     		.align	2
 22393              	.L1619:
 22394 0024 00000000 		.word	StateWhileOn
 22395 0028 00000000 		.word	XromParams
 22396 002c 00000000 		.word	main_ram
 22397              		.cfi_endproc
 22398              	.LFE217:
 22400              		.section	.text.cmdpause,"ax",%progbits
 22401              		.align	1
 22402              		.p2align 2,,3
 22403              		.global	cmdpause
 22404              		.syntax unified
 22405              		.thumb
 22406              		.thumb_func
 22407              		.fpu fpv4-sp-d16
 22409              	cmdpause:
 22410              	.LVL1726:
 22411              	.LFB219:
4149:src/xeq.c     **** 	display();
 22412              		.loc 1 4149 47 is_stmt 1 view -0
 22413              		.cfi_startproc
 22414              		@ args = 0, pretend = 0, frame = 0
 22415              		@ frame_needed = 0, uses_anonymous_args = 0
4150:src/xeq.c     **** #ifndef CONSOLE
 22416              		.loc 1 4150 2 view .LVU5830
4149:src/xeq.c     **** 	display();
 22417              		.loc 1 4149 47 is_stmt 0 view .LVU5831
 22418 0000 10B5     		push	{r4, lr}
 22419              		.cfi_def_cfa_offset 8
 22420              		.cfi_offset 4, -8
 22421              		.cfi_offset 14, -4
ARM GAS  /tmp/cc7LeJ71.s 			page 590


4149:src/xeq.c     **** 	display();
 22422              		.loc 1 4149 47 view .LVU5832
 22423 0002 0446     		mov	r4, r0
4150:src/xeq.c     **** #ifndef CONSOLE
 22424              		.loc 1 4150 2 view .LVU5833
 22425 0004 FFF7FEFF 		bl	display
 22426              	.LVL1727:
4153:src/xeq.c     **** 	GoFast = (arg == 0);
 22427              		.loc 1 4153 2 is_stmt 1 view .LVU5834
4153:src/xeq.c     **** 	GoFast = (arg == 0);
 22428              		.loc 1 4153 8 is_stmt 0 view .LVU5835
 22429 0008 044A     		ldr	r2, .L1623
4154:src/xeq.c     **** #elif 0
 22430              		.loc 1 4154 9 view .LVU5836
 22431 000a 0549     		ldr	r1, .L1623+4
4154:src/xeq.c     **** #elif 0
 22432              		.loc 1 4154 16 view .LVU5837
 22433 000c B4FA84F3 		clz	r3, r4
4153:src/xeq.c     **** 	GoFast = (arg == 0);
 22434              		.loc 1 4153 8 view .LVU5838
 22435 0010 E4B2     		uxtb	r4, r4
 22436              	.LVL1728:
4154:src/xeq.c     **** #elif 0
 22437              		.loc 1 4154 16 view .LVU5839
 22438 0012 5B09     		lsrs	r3, r3, #5
4153:src/xeq.c     **** 	GoFast = (arg == 0);
 22439              		.loc 1 4153 8 view .LVU5840
 22440 0014 1470     		strb	r4, [r2]
4154:src/xeq.c     **** #elif 0
 22441              		.loc 1 4154 2 is_stmt 1 view .LVU5841
4154:src/xeq.c     **** #elif 0
 22442              		.loc 1 4154 9 is_stmt 0 view .LVU5842
 22443 0016 0B60     		str	r3, [r1]
4165:src/xeq.c     **** 
 22444              		.loc 1 4165 1 view .LVU5843
 22445 0018 10BD     		pop	{r4, pc}
 22446              	.L1624:
 22447 001a 00BF     		.align	2
 22448              	.L1623:
 22449 001c 00000000 		.word	Pause
 22450 0020 00000000 		.word	GoFast
 22451              		.cfi_endproc
 22452              	.LFE219:
 22454              		.section	.text.op_setspeed,"ax",%progbits
 22455              		.align	1
 22456              		.p2align 2,,3
 22457              		.global	op_setspeed
 22458              		.syntax unified
 22459              		.thumb
 22460              		.thumb_func
 22461              		.fpu fpv4-sp-d16
 22463              	op_setspeed:
 22464              	.LVL1729:
 22465              	.LFB220:
4169:src/xeq.c     **** #ifdef DM42
 22466              		.loc 1 4169 33 is_stmt 1 view -0
 22467              		.cfi_startproc
ARM GAS  /tmp/cc7LeJ71.s 			page 591


 22468              		@ args = 0, pretend = 0, frame = 0
 22469              		@ frame_needed = 0, uses_anonymous_args = 0
 22470              		@ link register save eliminated.
4175:src/xeq.c     **** 
 22471              		.loc 1 4175 1 view .LVU5845
 22472 0000 7047     		bx	lr
 22473              		.cfi_endproc
 22474              	.LFE220:
 22476 0002 00BF     		.section	.text.op_prompt,"ax",%progbits
 22477              		.align	1
 22478              		.p2align 2,,3
 22479              		.global	op_prompt
 22480              		.syntax unified
 22481              		.thumb
 22482              		.thumb_func
 22483              		.fpu fpv4-sp-d16
 22485              	op_prompt:
 22486              	.LVL1730:
 22487              	.LFB221:
4178:src/xeq.c     **** 	set_running_off();
 22488              		.loc 1 4178 31 view -0
 22489              		.cfi_startproc
 22490              		@ args = 0, pretend = 0, frame = 0
 22491              		@ frame_needed = 0, uses_anonymous_args = 0
4179:src/xeq.c     **** 	alpha_view_common(regX_idx);
 22492              		.loc 1 4179 2 view .LVU5847
 22493              	.LBB3154:
 22494              	.LBI3154:
5823:src/xeq.c     **** 	set_running_off_sst();
 22495              		.loc 1 5823 6 view .LVU5848
 22496              	.LBB3155:
5824:src/xeq.c     **** 	State.entryp = 0;
 22497              		.loc 1 5824 2 view .LVU5849
 22498              	.LBB3156:
 22499              	.LBI3156:
5815:src/xeq.c     **** 	Running = 0;
 22500              		.loc 1 5815 6 view .LVU5850
 22501              	.LBB3157:
5816:src/xeq.c     **** }
 22502              		.loc 1 5816 2 view .LVU5851
 22503              	.LBE3157:
 22504              	.LBE3156:
 22505              	.LBE3155:
 22506              	.LBE3154:
4178:src/xeq.c     **** 	set_running_off();
 22507              		.loc 1 4178 31 is_stmt 0 view .LVU5852
 22508 0000 08B5     		push	{r3, lr}
 22509              		.cfi_def_cfa_offset 8
 22510              		.cfi_offset 3, -8
 22511              		.cfi_offset 14, -4
 22512              	.LBB3163:
 22513              	.LBB3162:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 22514              		.loc 1 5825 15 view .LVU5853
 22515 0002 094B     		ldr	r3, .L1628
 22516              	.LBB3160:
 22517              	.LBB3158:
ARM GAS  /tmp/cc7LeJ71.s 			page 592


5816:src/xeq.c     **** }
 22518              		.loc 1 5816 10 view .LVU5854
 22519 0004 094A     		ldr	r2, .L1628+4
 22520              	.LBE3158:
 22521              	.LBE3160:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 22522              		.loc 1 5825 15 view .LVU5855
 22523 0006 1B68     		ldr	r3, [r3]
 22524              	.LBB3161:
 22525              	.LBB3159:
5816:src/xeq.c     **** }
 22526              		.loc 1 5816 10 view .LVU5856
 22527 0008 0021     		movs	r1, #0
 22528 000a 1160     		str	r1, [r2]
 22529              	.LBE3159:
 22530              	.LBE3161:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 22531              		.loc 1 5825 2 is_stmt 1 view .LVU5857
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 22532              		.loc 1 5825 15 is_stmt 0 view .LVU5858
 22533 000c 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 22534 0010 61F30412 		bfi	r2, r1, #4, #1
 22535 0014 83F8DD27 		strb	r2, [r3, #2013]
 22536              		.loc 1 5826 2 is_stmt 1 view .LVU5859
 22537 0018 8A20     		movs	r0, #138
 22538              	.LVL1731:
 22539              		.loc 1 5826 2 is_stmt 0 view .LVU5860
 22540 001a FFF7FEFF 		bl	dot
 22541              	.LVL1732:
 22542              	.LBE3162:
 22543              	.LBE3163:
4180:src/xeq.c     **** }
 22544              		.loc 1 4180 2 is_stmt 1 view .LVU5861
4181:src/xeq.c     **** 
 22545              		.loc 1 4181 1 is_stmt 0 view .LVU5862
 22546 001e BDE80840 		pop	{r3, lr}
 22547              		.cfi_restore 14
 22548              		.cfi_restore 3
 22549              		.cfi_def_cfa_offset 0
4180:src/xeq.c     **** }
 22550              		.loc 1 4180 2 view .LVU5863
 22551 0022 6420     		movs	r0, #100
 22552 0024 FFF7FEBF 		b	alpha_view_common
 22553              	.LVL1733:
 22554              	.L1629:
 22555              		.align	2
 22556              	.L1628:
 22557 0028 00000000 		.word	main_ram
 22558 002c 00000000 		.word	Running
 22559              		.cfi_endproc
 22560              	.LFE221:
 22562              		.section	.text.XisInt,"ax",%progbits
 22563              		.align	1
 22564              		.p2align 2,,3
 22565              		.global	XisInt
 22566              		.syntax unified
 22567              		.thumb
ARM GAS  /tmp/cc7LeJ71.s 			page 593


 22568              		.thumb_func
 22569              		.fpu fpv4-sp-d16
 22571              	XisInt:
 22572              	.LVL1734:
 22573              	.LFB222:
4185:src/xeq.c     **** 	decNumber x;
 22574              		.loc 1 4185 28 is_stmt 1 view -0
 22575              		.cfi_startproc
 22576              		@ args = 0, pretend = 0, frame = 40
 22577              		@ frame_needed = 0, uses_anonymous_args = 0
4186:src/xeq.c     **** 	int result, op_int = (op == OP_XisINT);
 22578              		.loc 1 4186 2 view .LVU5865
4187:src/xeq.c     **** 	if ( is_intmode() )
 22579              		.loc 1 4187 2 view .LVU5866
4188:src/xeq.c     **** 		result = op_int;
 22580              		.loc 1 4188 7 is_stmt 0 view .LVU5867
 22581 0000 164B     		ldr	r3, .L1636
4185:src/xeq.c     **** 	decNumber x;
 22582              		.loc 1 4185 28 view .LVU5868
 22583 0002 30B5     		push	{r4, r5, lr}
 22584              		.cfi_def_cfa_offset 12
 22585              		.cfi_offset 4, -12
 22586              		.cfi_offset 5, -8
 22587              		.cfi_offset 14, -4
4188:src/xeq.c     **** 		result = op_int;
 22588              		.loc 1 4188 7 view .LVU5869
 22589 0004 1B68     		ldr	r3, [r3]
 22590 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4187:src/xeq.c     **** 	if ( is_intmode() )
 22591              		.loc 1 4187 27 view .LVU5870
 22592 000a A0F18704 		sub	r4, r0, #135
 22593 000e B4FA84F4 		clz	r4, r4
4188:src/xeq.c     **** 		result = op_int;
 22594              		.loc 1 4188 5 view .LVU5871
 22595 0012 13F00105 		ands	r5, r3, #1
4185:src/xeq.c     **** 	decNumber x;
 22596              		.loc 1 4185 28 view .LVU5872
 22597 0016 8BB0     		sub	sp, sp, #44
 22598              		.cfi_def_cfa_offset 56
4187:src/xeq.c     **** 	if ( is_intmode() )
 22599              		.loc 1 4187 27 view .LVU5873
 22600 0018 4FEA5414 		lsr	r4, r4, #5
 22601              	.LVL1735:
4188:src/xeq.c     **** 		result = op_int;
 22602              		.loc 1 4188 2 is_stmt 1 view .LVU5874
4188:src/xeq.c     **** 		result = op_int;
 22603              		.loc 1 4188 5 is_stmt 0 view .LVU5875
 22604 001c 04D0     		beq	.L1634
 22605              	.LVL1736:
4194:src/xeq.c     **** }
 22606              		.loc 1 4194 2 is_stmt 1 view .LVU5876
 22607 001e 2046     		mov	r0, r4
 22608              	.LVL1737:
4194:src/xeq.c     **** }
 22609              		.loc 1 4194 2 is_stmt 0 view .LVU5877
 22610 0020 FFF7FEFF 		bl	fin_tst
 22611              	.LVL1738:
ARM GAS  /tmp/cc7LeJ71.s 			page 594


4195:src/xeq.c     **** 
 22612              		.loc 1 4195 1 view .LVU5878
 22613 0024 0BB0     		add	sp, sp, #44
 22614              		.cfi_remember_state
 22615              		.cfi_def_cfa_offset 12
 22616              		@ sp needed
 22617 0026 30BD     		pop	{r4, r5, pc}
 22618              	.LVL1739:
 22619              	.L1634:
 22620              		.cfi_restore_state
4190:src/xeq.c     **** 		result = 0;
 22621              		.loc 1 4190 7 is_stmt 1 view .LVU5879
 22622              	.LBB3164:
 22623              	.LBI3164:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22624              		.loc 1 824 12 view .LVU5880
 22625              	.LBB3165:
 825:src/xeq.c     **** }
 22626              		.loc 1 825 2 view .LVU5881
 825:src/xeq.c     **** }
 22627              		.loc 1 825 9 is_stmt 0 view .LVU5882
 22628 0028 01A8     		add	r0, sp, #4
 22629              	.LVL1740:
 825:src/xeq.c     **** }
 22630              		.loc 1 825 9 view .LVU5883
 22631 002a 6421     		movs	r1, #100
 22632 002c FFF7FEFF 		bl	getRegister
 22633              	.LVL1741:
 825:src/xeq.c     **** }
 22634              		.loc 1 825 9 view .LVU5884
 22635              	.LBE3165:
 22636              	.LBE3164:
4190:src/xeq.c     **** 		result = 0;
 22637              		.loc 1 4190 10 view .LVU5885
 22638 0030 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 22639 0032 13F0700F 		tst	r3, #112
 22640 0036 05D0     		beq	.L1635
4191:src/xeq.c     **** 	else
 22641              		.loc 1 4191 10 view .LVU5886
 22642 0038 2C46     		mov	r4, r5
 22643              	.LVL1742:
4194:src/xeq.c     **** }
 22644              		.loc 1 4194 2 is_stmt 1 view .LVU5887
 22645 003a 2046     		mov	r0, r4
 22646 003c FFF7FEFF 		bl	fin_tst
 22647              	.LVL1743:
4195:src/xeq.c     **** 
 22648              		.loc 1 4195 1 is_stmt 0 view .LVU5888
 22649 0040 0BB0     		add	sp, sp, #44
 22650              		.cfi_remember_state
 22651              		.cfi_def_cfa_offset 12
 22652              		@ sp needed
 22653 0042 30BD     		pop	{r4, r5, pc}
 22654              	.LVL1744:
 22655              	.L1635:
 22656              		.cfi_restore_state
4193:src/xeq.c     **** 	fin_tst(result);
ARM GAS  /tmp/cc7LeJ71.s 			page 595


 22657              		.loc 1 4193 10 is_stmt 1 view .LVU5889
4193:src/xeq.c     **** 	fin_tst(result);
 22658              		.loc 1 4193 20 is_stmt 0 view .LVU5890
 22659 0044 01A8     		add	r0, sp, #4
 22660 0046 FFF7FEFF 		bl	is_int
 22661              	.LVL1745:
4193:src/xeq.c     **** 	fin_tst(result);
 22662              		.loc 1 4193 31 view .LVU5891
 22663 004a 041B     		subs	r4, r0, r4
 22664              	.LVL1746:
4193:src/xeq.c     **** 	fin_tst(result);
 22665              		.loc 1 4193 31 view .LVU5892
 22666 004c B4FA84F4 		clz	r4, r4
 22667 0050 6409     		lsrs	r4, r4, #5
 22668              	.LVL1747:
4194:src/xeq.c     **** }
 22669              		.loc 1 4194 2 is_stmt 1 view .LVU5893
 22670 0052 2046     		mov	r0, r4
 22671 0054 FFF7FEFF 		bl	fin_tst
 22672              	.LVL1748:
4195:src/xeq.c     **** 
 22673              		.loc 1 4195 1 is_stmt 0 view .LVU5894
 22674 0058 0BB0     		add	sp, sp, #44
 22675              		.cfi_def_cfa_offset 12
 22676              		@ sp needed
 22677 005a 30BD     		pop	{r4, r5, pc}
 22678              	.LVL1749:
 22679              	.L1637:
4195:src/xeq.c     **** 
 22680              		.loc 1 4195 1 view .LVU5895
 22681              		.align	2
 22682              	.L1636:
 22683 005c 00000000 		.word	main_ram
 22684              		.cfi_endproc
 22685              	.LFE222:
 22687              		.section	.text.XisEvenOrOdd,"ax",%progbits
 22688              		.align	1
 22689              		.p2align 2,,3
 22690              		.global	XisEvenOrOdd
 22691              		.syntax unified
 22692              		.thumb
 22693              		.thumb_func
 22694              		.fpu fpv4-sp-d16
 22696              	XisEvenOrOdd:
 22697              	.LVL1750:
 22698              	.LFB223:
4199:src/xeq.c     **** 	decNumber x;
 22699              		.loc 1 4199 34 is_stmt 1 view -0
 22700              		.cfi_startproc
 22701              		@ args = 0, pretend = 0, frame = 40
 22702              		@ frame_needed = 0, uses_anonymous_args = 0
4200:src/xeq.c     **** 	int odd = (op == OP_XisODD);
 22703              		.loc 1 4200 2 view .LVU5897
4201:src/xeq.c     **** 
 22704              		.loc 1 4201 2 view .LVU5898
4203:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22705              		.loc 1 4203 6 is_stmt 0 view .LVU5899
ARM GAS  /tmp/cc7LeJ71.s 			page 596


 22706 0000 174B     		ldr	r3, .L1642
4199:src/xeq.c     **** 	decNumber x;
 22707              		.loc 1 4199 34 view .LVU5900
 22708 0002 30B5     		push	{r4, r5, lr}
 22709              		.cfi_def_cfa_offset 12
 22710              		.cfi_offset 4, -12
 22711              		.cfi_offset 5, -8
 22712              		.cfi_offset 14, -4
4203:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22713              		.loc 1 4203 6 view .LVU5901
 22714 0004 1B68     		ldr	r3, [r3]
 22715 0006 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4203:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22716              		.loc 1 4203 5 view .LVU5902
 22717 000a DB07     		lsls	r3, r3, #31
4199:src/xeq.c     **** 	decNumber x;
 22718              		.loc 1 4199 34 view .LVU5903
 22719 000c 8BB0     		sub	sp, sp, #44
 22720              		.cfi_def_cfa_offset 56
4199:src/xeq.c     **** 	decNumber x;
 22721              		.loc 1 4199 34 view .LVU5904
 22722 000e 0446     		mov	r4, r0
 22723              	.LVL1751:
4203:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22724              		.loc 1 4203 2 is_stmt 1 view .LVU5905
4203:src/xeq.c     **** 		fin_tst((getX_int() & 1) == odd);
 22725              		.loc 1 4203 5 is_stmt 0 view .LVU5906
 22726 0010 15D5     		bpl	.L1639
4204:src/xeq.c     **** 	} else {
 22727              		.loc 1 4204 3 is_stmt 1 view .LVU5907
 22728              	.LBB3166:
 22729              	.LBI3166:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 22730              		.loc 1 1442 15 view .LVU5908
 22731              	.LBB3167:
1443:src/xeq.c     **** }
 22732              		.loc 1 1443 2 view .LVU5909
1443:src/xeq.c     **** }
 22733              		.loc 1 1443 9 is_stmt 0 view .LVU5910
 22734 0012 6420     		movs	r0, #100
 22735              	.LVL1752:
1443:src/xeq.c     **** }
 22736              		.loc 1 1443 9 view .LVU5911
 22737 0014 FFF7FEFF 		bl	get_reg_n_int
 22738              	.LVL1753:
 22739              	.LBE3167:
 22740              	.LBE3166:
4201:src/xeq.c     **** 
 22741              		.loc 1 4201 16 view .LVU5912
 22742 0018 A4F18A04 		sub	r4, #138
 22743              	.LVL1754:
4204:src/xeq.c     **** 	} else {
 22744              		.loc 1 4204 23 view .LVU5913
 22745 001c 0023     		movs	r3, #0
4201:src/xeq.c     **** 
 22746              		.loc 1 4201 16 view .LVU5914
 22747 001e 0025     		movs	r5, #0
ARM GAS  /tmp/cc7LeJ71.s 			page 597


 22748 0020 B4FA84F4 		clz	r4, r4
4204:src/xeq.c     **** 	} else {
 22749              		.loc 1 4204 23 view .LVU5915
 22750 0024 00F00102 		and	r2, r0, #1
4204:src/xeq.c     **** 	} else {
 22751              		.loc 1 4204 3 view .LVU5916
 22752 0028 AB42     		cmp	r3, r5
4201:src/xeq.c     **** 
 22753              		.loc 1 4201 16 view .LVU5917
 22754 002a 4FEA5414 		lsr	r4, r4, #5
4204:src/xeq.c     **** 	} else {
 22755              		.loc 1 4204 3 view .LVU5918
 22756 002e 06BF     		itte	eq
 22757 0030 A242     		cmpeq	r2, r4
 22758 0032 0120     		moveq	r0, #1
 22759 0034 1846     		movne	r0, r3
 22760 0036 FFF7FEFF 		bl	fin_tst
 22761              	.LVL1755:
4208:src/xeq.c     **** 
 22762              		.loc 1 4208 1 view .LVU5919
 22763 003a 0BB0     		add	sp, sp, #44
 22764              		.cfi_remember_state
 22765              		.cfi_def_cfa_offset 12
 22766              		@ sp needed
 22767 003c 30BD     		pop	{r4, r5, pc}
 22768              	.LVL1756:
 22769              	.L1639:
 22770              		.cfi_restore_state
4206:src/xeq.c     **** 	}
 22771              		.loc 1 4206 3 is_stmt 1 view .LVU5920
 22772              	.LBB3168:
 22773              	.LBI3168:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22774              		.loc 1 824 12 view .LVU5921
 22775              	.LBB3169:
 825:src/xeq.c     **** }
 22776              		.loc 1 825 2 view .LVU5922
 825:src/xeq.c     **** }
 22777              		.loc 1 825 9 is_stmt 0 view .LVU5923
 22778 003e 6421     		movs	r1, #100
 22779 0040 01A8     		add	r0, sp, #4
 22780              	.LVL1757:
 825:src/xeq.c     **** }
 22781              		.loc 1 825 9 view .LVU5924
 22782 0042 FFF7FEFF 		bl	getRegister
 22783              	.LVL1758:
 825:src/xeq.c     **** }
 22784              		.loc 1 825 9 view .LVU5925
 22785              	.LBE3169:
 22786              	.LBE3168:
4206:src/xeq.c     **** 	}
 22787              		.loc 1 4206 11 view .LVU5926
 22788 0046 FFF7FEFF 		bl	is_even
 22789              	.LVL1759:
4206:src/xeq.c     **** 	}
 22790              		.loc 1 4206 32 view .LVU5927
 22791 004a 8A3C     		subs	r4, r4, #138
ARM GAS  /tmp/cc7LeJ71.s 			page 598


 22792              	.LVL1760:
4206:src/xeq.c     **** 	}
 22793              		.loc 1 4206 32 view .LVU5928
 22794 004c 18BF     		it	ne
 22795 004e 0124     		movne	r4, #1
4206:src/xeq.c     **** 	}
 22796              		.loc 1 4206 3 view .LVU5929
 22797 0050 201A     		subs	r0, r4, r0
 22798 0052 B0FA80F0 		clz	r0, r0
 22799 0056 4009     		lsrs	r0, r0, #5
 22800 0058 FFF7FEFF 		bl	fin_tst
 22801              	.LVL1761:
4208:src/xeq.c     **** 
 22802              		.loc 1 4208 1 view .LVU5930
 22803 005c 0BB0     		add	sp, sp, #44
 22804              		.cfi_def_cfa_offset 12
 22805              		@ sp needed
 22806 005e 30BD     		pop	{r4, r5, pc}
 22807              	.L1643:
 22808              		.align	2
 22809              	.L1642:
 22810 0060 00000000 		.word	main_ram
 22811              		.cfi_endproc
 22812              	.LFE223:
 22814              		.section	.text.XisPrime,"ax",%progbits
 22815              		.align	1
 22816              		.p2align 2,,3
 22817              		.global	XisPrime
 22818              		.syntax unified
 22819              		.thumb
 22820              		.thumb_func
 22821              		.fpu fpv4-sp-d16
 22823              	XisPrime:
 22824              	.LVL1762:
 22825              	.LFB224:
4212:src/xeq.c     **** 	unsigned long long int i;
 22826              		.loc 1 4212 30 is_stmt 1 view -0
 22827              		.cfi_startproc
 22828              		@ args = 0, pretend = 0, frame = 40
 22829              		@ frame_needed = 0, uses_anonymous_args = 0
4213:src/xeq.c     **** 	int sgn;
 22830              		.loc 1 4213 2 view .LVU5932
4214:src/xeq.c     **** 
 22831              		.loc 1 4214 2 view .LVU5933
4216:src/xeq.c     **** 	if (!is_intmode()) {
 22832              		.loc 1 4216 2 view .LVU5934
4212:src/xeq.c     **** 	unsigned long long int i;
 22833              		.loc 1 4212 30 is_stmt 0 view .LVU5935
 22834 0000 70B5     		push	{r4, r5, r6, lr}
 22835              		.cfi_def_cfa_offset 16
 22836              		.cfi_offset 4, -16
 22837              		.cfi_offset 5, -12
 22838              		.cfi_offset 6, -8
 22839              		.cfi_offset 14, -4
 22840 0002 8AB0     		sub	sp, sp, #40
 22841              		.cfi_def_cfa_offset 56
 22842              	.LVL1763:
ARM GAS  /tmp/cc7LeJ71.s 			page 599


 22843              	.LBB3170:
 22844              	.LBI3170:
1446:src/xeq.c     **** 	return get_reg_n_int_sgn(regX_idx, sgn);
 22845              		.loc 1 1446 24 is_stmt 1 view .LVU5936
 22846              	.LBB3171:
1447:src/xeq.c     **** }
 22847              		.loc 1 1447 2 view .LVU5937
1447:src/xeq.c     **** }
 22848              		.loc 1 1447 9 is_stmt 0 view .LVU5938
 22849 0004 6946     		mov	r1, sp
 22850 0006 6420     		movs	r0, #100
 22851              	.LVL1764:
1447:src/xeq.c     **** }
 22852              		.loc 1 1447 9 view .LVU5939
 22853 0008 FFF7FEFF 		bl	get_reg_n_int_sgn
 22854              	.LVL1765:
 22855              	.LBE3171:
 22856              	.LBE3170:
4217:src/xeq.c     **** 		decNumber x;
 22857              		.loc 1 4217 6 view .LVU5940
 22858 000c 1B4B     		ldr	r3, .L1654
 22859 000e 1B68     		ldr	r3, [r3]
 22860 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4217:src/xeq.c     **** 		decNumber x;
 22861              		.loc 1 4217 5 view .LVU5941
 22862 0014 13F00104 		ands	r4, r3, #1
 22863              	.LBB3173:
 22864              	.LBB3172:
1447:src/xeq.c     **** }
 22865              		.loc 1 1447 9 view .LVU5942
 22866 0018 0646     		mov	r6, r0
 22867 001a 0D46     		mov	r5, r1
 22868              	.LVL1766:
1447:src/xeq.c     **** }
 22869              		.loc 1 1447 9 view .LVU5943
 22870              	.LBE3172:
 22871              	.LBE3173:
4217:src/xeq.c     **** 		decNumber x;
 22872              		.loc 1 4217 2 is_stmt 1 view .LVU5944
4217:src/xeq.c     **** 		decNumber x;
 22873              		.loc 1 4217 5 is_stmt 0 view .LVU5945
 22874 001c 11D0     		beq	.L1645
 22875 001e 009B     		ldr	r3, [sp]
 22876              	.LVL1767:
 22877              	.L1646:
4227:src/xeq.c     **** }
 22878              		.loc 1 4227 2 is_stmt 1 view .LVU5946
 22879 0020 23B1     		cbz	r3, .L1653
 22880              	.L1651:
4227:src/xeq.c     **** }
 22881              		.loc 1 4227 2 is_stmt 0 view .LVU5947
 22882 0022 0020     		movs	r0, #0
 22883 0024 FFF7FEFF 		bl	fin_tst
 22884              	.LVL1768:
4228:src/xeq.c     **** 
 22885              		.loc 1 4228 1 view .LVU5948
 22886 0028 0AB0     		add	sp, sp, #40
ARM GAS  /tmp/cc7LeJ71.s 			page 600


 22887              		.cfi_remember_state
 22888              		.cfi_def_cfa_offset 16
 22889              		@ sp needed
 22890 002a 70BD     		pop	{r4, r5, r6, pc}
 22891              	.L1653:
 22892              		.cfi_restore_state
4227:src/xeq.c     **** }
 22893              		.loc 1 4227 22 discriminator 1 view .LVU5949
 22894 002c 2946     		mov	r1, r5
 22895 002e 3046     		mov	r0, r6
 22896 0030 FFF7FEFF 		bl	isPrime
 22897              	.LVL1769:
4227:src/xeq.c     **** }
 22898              		.loc 1 4227 2 discriminator 1 view .LVU5950
 22899 0034 0038     		subs	r0, r0, #0
 22900 0036 18BF     		it	ne
 22901 0038 0120     		movne	r0, #1
 22902 003a FFF7FEFF 		bl	fin_tst
 22903              	.LVL1770:
4228:src/xeq.c     **** 
 22904              		.loc 1 4228 1 discriminator 1 view .LVU5951
 22905 003e 0AB0     		add	sp, sp, #40
 22906              		.cfi_remember_state
 22907              		.cfi_def_cfa_offset 16
 22908              		@ sp needed
 22909 0040 70BD     		pop	{r4, r5, r6, pc}
 22910              	.LVL1771:
 22911              	.L1645:
 22912              		.cfi_restore_state
 22913              	.LBB3174:
4218:src/xeq.c     **** 
 22914              		.loc 1 4218 3 is_stmt 1 view .LVU5952
4220:src/xeq.c     **** 		if (decNumberIsSpecial(&x))
 22915              		.loc 1 4220 3 view .LVU5953
 22916              	.LBB3175:
 22917              	.LBI3175:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 22918              		.loc 1 824 12 view .LVU5954
 22919              	.LBB3176:
 825:src/xeq.c     **** }
 22920              		.loc 1 825 2 view .LVU5955
 825:src/xeq.c     **** }
 22921              		.loc 1 825 9 is_stmt 0 view .LVU5956
 22922 0042 01A8     		add	r0, sp, #4
 22923              	.LVL1772:
 825:src/xeq.c     **** }
 22924              		.loc 1 825 9 view .LVU5957
 22925 0044 6421     		movs	r1, #100
 22926 0046 FFF7FEFF 		bl	getRegister
 22927              	.LVL1773:
 825:src/xeq.c     **** }
 22928              		.loc 1 825 9 view .LVU5958
 22929              	.LBE3176:
 22930              	.LBE3175:
4221:src/xeq.c     **** 			sgn = 1; // not prime
 22931              		.loc 1 4221 3 is_stmt 1 view .LVU5959
4221:src/xeq.c     **** 			sgn = 1; // not prime
ARM GAS  /tmp/cc7LeJ71.s 			page 601


 22932              		.loc 1 4221 6 is_stmt 0 view .LVU5960
 22933 004a 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 22934 004e 13F0700F 		tst	r3, #112
 22935 0052 06D0     		beq	.L1647
4222:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22936              		.loc 1 4222 4 is_stmt 1 view .LVU5961
4222:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22937              		.loc 1 4222 8 is_stmt 0 view .LVU5962
 22938 0054 0123     		movs	r3, #1
 22939              	.LBE3174:
4227:src/xeq.c     **** }
 22940              		.loc 1 4227 2 view .LVU5963
 22941 0056 2046     		mov	r0, r4
 22942              	.LBB3177:
4222:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22943              		.loc 1 4222 8 view .LVU5964
 22944 0058 0093     		str	r3, [sp]
4222:src/xeq.c     **** 		else if (dn_ge(&x, &const_2pow64))
 22945              		.loc 1 4222 8 view .LVU5965
 22946              	.LBE3177:
4227:src/xeq.c     **** }
 22947              		.loc 1 4227 2 is_stmt 1 view .LVU5966
 22948 005a FFF7FEFF 		bl	fin_tst
 22949              	.LVL1774:
4228:src/xeq.c     **** 
 22950              		.loc 1 4228 1 is_stmt 0 view .LVU5967
 22951 005e 0AB0     		add	sp, sp, #40
 22952              		.cfi_remember_state
 22953              		.cfi_def_cfa_offset 16
 22954              		@ sp needed
 22955 0060 70BD     		pop	{r4, r5, r6, pc}
 22956              	.L1647:
 22957              		.cfi_restore_state
 22958              	.LBB3178:
4223:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22959              		.loc 1 4223 8 is_stmt 1 view .LVU5968
4223:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22960              		.loc 1 4223 12 is_stmt 0 view .LVU5969
 22961 0062 0749     		ldr	r1, .L1654+4
 22962 0064 01A8     		add	r0, sp, #4
 22963 0066 FFF7FEFF 		bl	dn_lt
 22964              	.LVL1775:
 22965 006a 009B     		ldr	r3, [sp]
4223:src/xeq.c     **** 			// isPrime() reports domain error for numbers with bit 63 set
 22966              		.loc 1 4223 11 view .LVU5970
 22967 006c 0028     		cmp	r0, #0
 22968 006e D7D1     		bne	.L1646
4225:src/xeq.c     **** 	}
 22969              		.loc 1 4225 4 is_stmt 1 view .LVU5971
 22970              	.LVL1776:
4225:src/xeq.c     **** 	}
 22971              		.loc 1 4225 6 is_stmt 0 view .LVU5972
 22972 0070 4FF0FF36 		mov	r6, #-1
 22973 0074 3546     		mov	r5, r6
4225:src/xeq.c     **** 	}
 22974              		.loc 1 4225 6 view .LVU5973
 22975              	.LBE3178:
ARM GAS  /tmp/cc7LeJ71.s 			page 602


4227:src/xeq.c     **** }
 22976              		.loc 1 4227 2 is_stmt 1 view .LVU5974
 22977 0076 002B     		cmp	r3, #0
 22978 0078 D3D1     		bne	.L1651
 22979 007a D7E7     		b	.L1653
 22980              	.L1655:
 22981              		.align	2
 22982              	.L1654:
 22983 007c 00000000 		.word	main_ram
 22984 0080 00000000 		.word	const_2pow64
 22985              		.cfi_endproc
 22986              	.LFE224:
 22988              		.section	.text.isInfinite,"ax",%progbits
 22989              		.align	1
 22990              		.p2align 2,,3
 22991              		.global	isInfinite
 22992              		.syntax unified
 22993              		.thumb
 22994              		.thumb_func
 22995              		.fpu fpv4-sp-d16
 22997              	isInfinite:
 22998              	.LVL1777:
 22999              	.LFB225:
4232:src/xeq.c     **** 	decNumber x;
 23000              		.loc 1 4232 32 view -0
 23001              		.cfi_startproc
 23002              		@ args = 0, pretend = 0, frame = 40
 23003              		@ frame_needed = 0, uses_anonymous_args = 0
4233:src/xeq.c     **** 
 23004              		.loc 1 4233 2 view .LVU5976
4235:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsInfinite(&x));
 23005              		.loc 1 4235 2 view .LVU5977
4232:src/xeq.c     **** 	decNumber x;
 23006              		.loc 1 4232 32 is_stmt 0 view .LVU5978
 23007 0000 00B5     		push	{lr}
 23008              		.cfi_def_cfa_offset 4
 23009              		.cfi_offset 14, -4
 23010 0002 8BB0     		sub	sp, sp, #44
 23011              		.cfi_def_cfa_offset 48
 23012              	.LVL1778:
 23013              	.LBB3179:
 23014              	.LBI3179:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23015              		.loc 1 824 12 is_stmt 1 view .LVU5979
 23016              	.LBB3180:
 825:src/xeq.c     **** }
 23017              		.loc 1 825 2 view .LVU5980
 825:src/xeq.c     **** }
 23018              		.loc 1 825 9 is_stmt 0 view .LVU5981
 23019 0004 6421     		movs	r1, #100
 23020 0006 01A8     		add	r0, sp, #4
 23021              	.LVL1779:
 825:src/xeq.c     **** }
 23022              		.loc 1 825 9 view .LVU5982
 23023 0008 FFF7FEFF 		bl	getRegister
 23024              	.LVL1780:
 825:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 603


 23025              		.loc 1 825 9 view .LVU5983
 23026              	.LBE3180:
 23027              	.LBE3179:
4236:src/xeq.c     **** }
 23028              		.loc 1 4236 2 is_stmt 1 view .LVU5984
4236:src/xeq.c     **** }
 23029              		.loc 1 4236 10 is_stmt 0 view .LVU5985
 23030 000c 074B     		ldr	r3, .L1660
 23031 000e 1B68     		ldr	r3, [r3]
 23032 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4236:src/xeq.c     **** }
 23033              		.loc 1 4236 2 view .LVU5986
 23034 0014 DB07     		lsls	r3, r3, #31
 23035 0016 56BF     		itet	pl
 23036 0018 9DF80C00 		ldrbpl	r0, [sp, #12]	@ zero_extendqisi2
 23037 001c 0020     		movmi	r0, #0
 23038 001e C0F38010 		ubfxpl	r0, r0, #6, #1
 23039 0022 FFF7FEFF 		bl	fin_tst
 23040              	.LVL1781:
4237:src/xeq.c     **** 
 23041              		.loc 1 4237 1 view .LVU5987
 23042 0026 0BB0     		add	sp, sp, #44
 23043              		.cfi_def_cfa_offset 4
 23044              		@ sp needed
 23045 0028 5DF804FB 		ldr	pc, [sp], #4
 23046              	.L1661:
 23047              		.align	2
 23048              	.L1660:
 23049 002c 00000000 		.word	main_ram
 23050              		.cfi_endproc
 23051              	.LFE225:
 23053              		.section	.text.isNan,"ax",%progbits
 23054              		.align	1
 23055              		.p2align 2,,3
 23056              		.global	isNan
 23057              		.syntax unified
 23058              		.thumb
 23059              		.thumb_func
 23060              		.fpu fpv4-sp-d16
 23062              	isNan:
 23063              	.LVL1782:
 23064              	.LFB226:
4243:src/xeq.c     **** 	decNumber x;
 23065              		.loc 1 4243 27 is_stmt 1 view -0
 23066              		.cfi_startproc
 23067              		@ args = 0, pretend = 0, frame = 40
 23068              		@ frame_needed = 0, uses_anonymous_args = 0
4244:src/xeq.c     **** 
 23069              		.loc 1 4244 2 view .LVU5989
4246:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsNaN(&x));
 23070              		.loc 1 4246 2 view .LVU5990
4243:src/xeq.c     **** 	decNumber x;
 23071              		.loc 1 4243 27 is_stmt 0 view .LVU5991
 23072 0000 00B5     		push	{lr}
 23073              		.cfi_def_cfa_offset 4
 23074              		.cfi_offset 14, -4
 23075 0002 8BB0     		sub	sp, sp, #44
ARM GAS  /tmp/cc7LeJ71.s 			page 604


 23076              		.cfi_def_cfa_offset 48
 23077              	.LVL1783:
 23078              	.LBB3181:
 23079              	.LBI3181:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23080              		.loc 1 824 12 is_stmt 1 view .LVU5992
 23081              	.LBB3182:
 825:src/xeq.c     **** }
 23082              		.loc 1 825 2 view .LVU5993
 825:src/xeq.c     **** }
 23083              		.loc 1 825 9 is_stmt 0 view .LVU5994
 23084 0004 6421     		movs	r1, #100
 23085 0006 01A8     		add	r0, sp, #4
 23086              	.LVL1784:
 825:src/xeq.c     **** }
 23087              		.loc 1 825 9 view .LVU5995
 23088 0008 FFF7FEFF 		bl	getRegister
 23089              	.LVL1785:
 825:src/xeq.c     **** }
 23090              		.loc 1 825 9 view .LVU5996
 23091              	.LBE3182:
 23092              	.LBE3181:
4247:src/xeq.c     **** }
 23093              		.loc 1 4247 2 is_stmt 1 view .LVU5997
4247:src/xeq.c     **** }
 23094              		.loc 1 4247 10 is_stmt 0 view .LVU5998
 23095 000c 0B4B     		ldr	r3, .L1666
 23096 000e 1B68     		ldr	r3, [r3]
 23097 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4247:src/xeq.c     **** }
 23098              		.loc 1 4247 2 view .LVU5999
 23099 0014 DB07     		lsls	r3, r3, #31
 23100 0016 0BD4     		bmi	.L1664
4247:src/xeq.c     **** }
 23101              		.loc 1 4247 2 discriminator 1 view .LVU6000
 23102 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23103 001c 13F0300F 		tst	r3, #48
 23104 0020 14BF     		ite	ne
 23105 0022 0120     		movne	r0, #1
 23106 0024 0020     		moveq	r0, #0
 23107 0026 FFF7FEFF 		bl	fin_tst
 23108              	.LVL1786:
4248:src/xeq.c     **** 
 23109              		.loc 1 4248 1 discriminator 1 view .LVU6001
 23110 002a 0BB0     		add	sp, sp, #44
 23111              		.cfi_remember_state
 23112              		.cfi_def_cfa_offset 4
 23113              		@ sp needed
 23114 002c 5DF804FB 		ldr	pc, [sp], #4
 23115              	.L1664:
 23116              		.cfi_restore_state
4247:src/xeq.c     **** }
 23117              		.loc 1 4247 2 view .LVU6002
 23118 0030 0020     		movs	r0, #0
 23119 0032 FFF7FEFF 		bl	fin_tst
 23120              	.LVL1787:
4248:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 605


 23121              		.loc 1 4248 1 view .LVU6003
 23122 0036 0BB0     		add	sp, sp, #44
 23123              		.cfi_def_cfa_offset 4
 23124              		@ sp needed
 23125 0038 5DF804FB 		ldr	pc, [sp], #4
 23126              	.L1667:
 23127              		.align	2
 23128              	.L1666:
 23129 003c 00000000 		.word	main_ram
 23130              		.cfi_endproc
 23131              	.LFE226:
 23133              		.section	.text.isSpecial,"ax",%progbits
 23134              		.align	1
 23135              		.p2align 2,,3
 23136              		.global	isSpecial
 23137              		.syntax unified
 23138              		.thumb
 23139              		.thumb_func
 23140              		.fpu fpv4-sp-d16
 23142              	isSpecial:
 23143              	.LVL1788:
 23144              	.LFB227:
4250:src/xeq.c     **** 	decNumber x;
 23145              		.loc 1 4250 31 is_stmt 1 view -0
 23146              		.cfi_startproc
 23147              		@ args = 0, pretend = 0, frame = 40
 23148              		@ frame_needed = 0, uses_anonymous_args = 0
4251:src/xeq.c     **** 
 23149              		.loc 1 4251 2 view .LVU6005
4253:src/xeq.c     **** 	fin_tst(!is_intmode() && decNumberIsSpecial(&x));
 23150              		.loc 1 4253 2 view .LVU6006
4250:src/xeq.c     **** 	decNumber x;
 23151              		.loc 1 4250 31 is_stmt 0 view .LVU6007
 23152 0000 00B5     		push	{lr}
 23153              		.cfi_def_cfa_offset 4
 23154              		.cfi_offset 14, -4
 23155 0002 8BB0     		sub	sp, sp, #44
 23156              		.cfi_def_cfa_offset 48
 23157              	.LVL1789:
 23158              	.LBB3183:
 23159              	.LBI3183:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23160              		.loc 1 824 12 is_stmt 1 view .LVU6008
 23161              	.LBB3184:
 825:src/xeq.c     **** }
 23162              		.loc 1 825 2 view .LVU6009
 825:src/xeq.c     **** }
 23163              		.loc 1 825 9 is_stmt 0 view .LVU6010
 23164 0004 6421     		movs	r1, #100
 23165 0006 01A8     		add	r0, sp, #4
 23166              	.LVL1790:
 825:src/xeq.c     **** }
 23167              		.loc 1 825 9 view .LVU6011
 23168 0008 FFF7FEFF 		bl	getRegister
 23169              	.LVL1791:
 825:src/xeq.c     **** }
 23170              		.loc 1 825 9 view .LVU6012
ARM GAS  /tmp/cc7LeJ71.s 			page 606


 23171              	.LBE3184:
 23172              	.LBE3183:
4254:src/xeq.c     **** }
 23173              		.loc 1 4254 2 is_stmt 1 view .LVU6013
4254:src/xeq.c     **** }
 23174              		.loc 1 4254 10 is_stmt 0 view .LVU6014
 23175 000c 0B4B     		ldr	r3, .L1672
 23176 000e 1B68     		ldr	r3, [r3]
 23177 0010 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4254:src/xeq.c     **** }
 23178              		.loc 1 4254 2 view .LVU6015
 23179 0014 DB07     		lsls	r3, r3, #31
 23180 0016 0BD4     		bmi	.L1670
4254:src/xeq.c     **** }
 23181              		.loc 1 4254 2 discriminator 1 view .LVU6016
 23182 0018 9DF80C30 		ldrb	r3, [sp, #12]	@ zero_extendqisi2
 23183 001c 13F0700F 		tst	r3, #112
 23184 0020 14BF     		ite	ne
 23185 0022 0120     		movne	r0, #1
 23186 0024 0020     		moveq	r0, #0
 23187 0026 FFF7FEFF 		bl	fin_tst
 23188              	.LVL1792:
4255:src/xeq.c     **** 
 23189              		.loc 1 4255 1 discriminator 1 view .LVU6017
 23190 002a 0BB0     		add	sp, sp, #44
 23191              		.cfi_remember_state
 23192              		.cfi_def_cfa_offset 4
 23193              		@ sp needed
 23194 002c 5DF804FB 		ldr	pc, [sp], #4
 23195              	.L1670:
 23196              		.cfi_restore_state
4254:src/xeq.c     **** }
 23197              		.loc 1 4254 2 view .LVU6018
 23198 0030 0020     		movs	r0, #0
 23199 0032 FFF7FEFF 		bl	fin_tst
 23200              	.LVL1793:
4255:src/xeq.c     **** 
 23201              		.loc 1 4255 1 view .LVU6019
 23202 0036 0BB0     		add	sp, sp, #44
 23203              		.cfi_def_cfa_offset 4
 23204              		@ sp needed
 23205 0038 5DF804FB 		ldr	pc, [sp], #4
 23206              	.L1673:
 23207              		.align	2
 23208              	.L1672:
 23209 003c 00000000 		.word	main_ram
 23210              		.cfi_endproc
 23211              	.LFE227:
 23213              		.section	.text.op_entryp,"ax",%progbits
 23214              		.align	1
 23215              		.p2align 2,,3
 23216              		.global	op_entryp
 23217              		.syntax unified
 23218              		.thumb
 23219              		.thumb_func
 23220              		.fpu fpv4-sp-d16
 23222              	op_entryp:
ARM GAS  /tmp/cc7LeJ71.s 			page 607


 23223              	.LVL1794:
 23224              	.LFB228:
4257:src/xeq.c     **** 	fin_tst(State.entryp);
 23225              		.loc 1 4257 31 is_stmt 1 view -0
 23226              		.cfi_startproc
 23227              		@ args = 0, pretend = 0, frame = 0
 23228              		@ frame_needed = 0, uses_anonymous_args = 0
 23229              		@ link register save eliminated.
4258:src/xeq.c     **** }
 23230              		.loc 1 4258 2 view .LVU6021
4258:src/xeq.c     **** }
 23231              		.loc 1 4258 15 is_stmt 0 view .LVU6022
 23232 0000 034B     		ldr	r3, .L1675
 23233 0002 1B68     		ldr	r3, [r3]
 23234 0004 93F8DD07 		ldrb	r0, [r3, #2013]	@ zero_extendqisi2
 23235              	.LVL1795:
4258:src/xeq.c     **** }
 23236              		.loc 1 4258 2 view .LVU6023
 23237 0008 C0F30010 		ubfx	r0, r0, #4, #1
 23238 000c FFF7FEBF 		b	fin_tst
 23239              	.LVL1796:
 23240              	.L1676:
 23241              		.align	2
 23242              	.L1675:
 23243 0010 00000000 		.word	main_ram
 23244              		.cfi_endproc
 23245              	.LFE228:
 23247              		.section	.text.reg_decode,"ax",%progbits
 23248              		.align	1
 23249              		.p2align 2,,3
 23250              		.global	reg_decode
 23251              		.syntax unified
 23252              		.thumb
 23253              		.thumb_func
 23254              		.fpu fpv4-sp-d16
 23256              	reg_decode:
 23257              	.LVL1797:
 23258              	.LFB229:
4262:src/xeq.c     **** 	decNumber x, y;
 23259              		.loc 1 4262 51 is_stmt 1 view -0
 23260              		.cfi_startproc
 23261              		@ args = 0, pretend = 0, frame = 80
 23262              		@ frame_needed = 0, uses_anonymous_args = 0
4263:src/xeq.c     **** 	int rsrc, num, rdest, q, mx_src, mx_dest;
 23263              		.loc 1 4263 2 view .LVU6025
4264:src/xeq.c     **** 
 23264              		.loc 1 4264 2 view .LVU6026
4266:src/xeq.c     **** 		bad_mode_error();
 23265              		.loc 1 4266 2 view .LVU6027
4262:src/xeq.c     **** 	decNumber x, y;
 23266              		.loc 1 4262 51 is_stmt 0 view .LVU6028
 23267 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 23268              		.cfi_def_cfa_offset 36
 23269              		.cfi_offset 4, -36
 23270              		.cfi_offset 5, -32
 23271              		.cfi_offset 6, -28
 23272              		.cfi_offset 7, -24
ARM GAS  /tmp/cc7LeJ71.s 			page 608


 23273              		.cfi_offset 8, -20
 23274              		.cfi_offset 9, -16
 23275              		.cfi_offset 10, -12
 23276              		.cfi_offset 11, -8
 23277              		.cfi_offset 14, -4
4266:src/xeq.c     **** 		bad_mode_error();
 23278              		.loc 1 4266 6 view .LVU6029
 23279 0004 DFF834A2 		ldr	r10, .L1729+28
 23280 0008 DAF80040 		ldr	r4, [r10]
 23281 000c 94F8E847 		ldrb	r4, [r4, #2024]	@ zero_extendqisi2
4262:src/xeq.c     **** 	decNumber x, y;
 23282              		.loc 1 4262 51 view .LVU6030
 23283 0010 1F46     		mov	r7, r3
4266:src/xeq.c     **** 		bad_mode_error();
 23284              		.loc 1 4266 5 view .LVU6031
 23285 0012 14F00103 		ands	r3, r4, #1
 23286              	.LVL1798:
4262:src/xeq.c     **** 	decNumber x, y;
 23287              		.loc 1 4262 51 view .LVU6032
 23288 0016 95B0     		sub	sp, sp, #84
 23289              		.cfi_def_cfa_offset 120
4266:src/xeq.c     **** 		bad_mode_error();
 23290              		.loc 1 4266 5 view .LVU6033
 23291 0018 0CD0     		beq	.L1678
4267:src/xeq.c     **** 		return 1;
 23292              		.loc 1 4267 3 is_stmt 1 view .LVU6034
 23293              	.LBB3227:
 23294              	.LBI3227:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 23295              		.loc 1 575 6 view .LVU6035
 23296              	.LBE3227:
 576:src/xeq.c     **** }
 23297              		.loc 1 576 2 view .LVU6036
 23298              	.LVL1799:
 23299              	.LBB3238:
 23300              	.LBB3228:
 23301              	.LBI3228:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23302              		.loc 1 546 5 view .LVU6037
 23303              	.LBB3229:
 547:src/xeq.c     **** 		Error = e;
 23304              		.loc 1 547 2 view .LVU6038
 547:src/xeq.c     **** 		Error = e;
 23305              		.loc 1 547 12 is_stmt 0 view .LVU6039
 23306 001a 814B     		ldr	r3, .L1729
 547:src/xeq.c     **** 		Error = e;
 23307              		.loc 1 547 5 view .LVU6040
 23308 001c 1A68     		ldr	r2, [r3]
 23309              	.LVL1800:
 547:src/xeq.c     **** 		Error = e;
 23310              		.loc 1 547 5 view .LVU6041
 23311 001e 1AB1     		cbz	r2, .L1723
 23312              	.LVL1801:
 23313              	.L1706:
 547:src/xeq.c     **** 		Error = e;
 23314              		.loc 1 547 5 view .LVU6042
 23315              	.LBE3229:
ARM GAS  /tmp/cc7LeJ71.s 			page 609


 23316              	.LBE3228:
 23317              	.LBE3238:
4268:src/xeq.c     **** 	}
 23318              		.loc 1 4268 10 view .LVU6043
 23319 0020 0120     		movs	r0, #1
4340:src/xeq.c     **** 
 23320              		.loc 1 4340 1 view .LVU6044
 23321 0022 15B0     		add	sp, sp, #84
 23322              		.cfi_remember_state
 23323              		.cfi_def_cfa_offset 36
 23324              		@ sp needed
 23325 0024 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23326              	.LVL1802:
 23327              	.L1723:
 23328              		.cfi_restore_state
 23329              	.LBB3239:
 23330              	.LBB3236:
 23331              	.LBB3234:
 23332              	.LBB3230:
 23333              	.LBI3230:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23334              		.loc 1 546 5 is_stmt 1 view .LVU6045
 23335              	.LBB3231:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23336              		.loc 1 548 3 view .LVU6046
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23337              		.loc 1 548 9 is_stmt 0 view .LVU6047
 23338 0028 0D22     		movs	r2, #13
 23339              	.LBE3231:
 23340              	.LBE3230:
 23341              	.LBE3234:
 23342              	.LBE3236:
 23343              	.LBE3239:
4268:src/xeq.c     **** 	}
 23344              		.loc 1 4268 10 view .LVU6048
 23345 002a 0120     		movs	r0, #1
 23346              	.LVL1803:
 23347              	.LBB3240:
 23348              	.LBB3237:
 23349              	.LBB3235:
 23350              	.LBB3233:
 23351              	.LBB3232:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23352              		.loc 1 548 9 view .LVU6049
 23353 002c 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 23354              		.loc 1 549 3 is_stmt 1 view .LVU6050
 23355              	.LBE3232:
 23356              	.LBE3233:
 23357              	.LBE3235:
 23358              	.LBE3237:
 23359              	.LBE3240:
4340:src/xeq.c     **** 
 23360              		.loc 1 4340 1 is_stmt 0 view .LVU6051
 23361 002e 15B0     		add	sp, sp, #84
 23362              		.cfi_remember_state
 23363              		.cfi_def_cfa_offset 36
ARM GAS  /tmp/cc7LeJ71.s 			page 610


 23364              		@ sp needed
 23365 0030 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23366              	.LVL1804:
 23367              	.L1678:
 23368              		.cfi_restore_state
4340:src/xeq.c     **** 
 23369              		.loc 1 4340 1 view .LVU6052
 23370 0034 8346     		mov	fp, r0
 23371              	.LVL1805:
4340:src/xeq.c     **** 
 23372              		.loc 1 4340 1 view .LVU6053
 23373 0036 8946     		mov	r9, r1
 23374              	.LVL1806:
 23375              	.LBB3241:
 23376              	.LBB3242:
 23377              	.LBB3243:
 23378              	.LBB3244:
 825:src/xeq.c     **** }
 23379              		.loc 1 825 9 view .LVU6054
 23380 0038 02A8     		add	r0, sp, #8
 23381              	.LVL1807:
 825:src/xeq.c     **** }
 23382              		.loc 1 825 9 view .LVU6055
 23383 003a 6421     		movs	r1, #100
 23384              	.LVL1808:
 825:src/xeq.c     **** }
 23385              		.loc 1 825 9 view .LVU6056
 23386 003c 0193     		str	r3, [sp, #4]
 23387 003e 9046     		mov	r8, r2
 23388              	.LVL1809:
 825:src/xeq.c     **** }
 23389              		.loc 1 825 9 view .LVU6057
 23390              	.LBE3244:
 23391              	.LBE3243:
 23392              	.LBE3242:
 23393              	.LBI3241:
4262:src/xeq.c     **** 	decNumber x, y;
 23394              		.loc 1 4262 5 is_stmt 1 view .LVU6058
 23395              	.LBB3324:
4270:src/xeq.c     **** 	dn_mulpow10(&y, &x, 2 + 3);	// sssnnddd.~
 23396              		.loc 1 4270 2 view .LVU6059
 23397              	.LBB3246:
 23398              	.LBI3243:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 23399              		.loc 1 824 12 view .LVU6060
 23400              	.LBB3245:
 825:src/xeq.c     **** }
 23401              		.loc 1 825 2 view .LVU6061
 825:src/xeq.c     **** }
 23402              		.loc 1 825 9 is_stmt 0 view .LVU6062
 23403 0040 FFF7FEFF 		bl	getRegister
 23404              	.LVL1810:
 825:src/xeq.c     **** }
 23405              		.loc 1 825 9 view .LVU6063
 23406              	.LBE3245:
 23407              	.LBE3246:
4271:src/xeq.c     **** 	decNumberTrunc(&x, &y);		// sssnnddd.0
ARM GAS  /tmp/cc7LeJ71.s 			page 611


 23408              		.loc 1 4271 2 is_stmt 1 view .LVU6064
 23409 0044 0522     		movs	r2, #5
 23410 0046 02A9     		add	r1, sp, #8
 23411 0048 0BA8     		add	r0, sp, #44
 23412 004a FFF7FEFF 		bl	dn_mulpow10
 23413              	.LVL1811:
4272:src/xeq.c     **** 	rsrc = dn_to_int(&x);		// sssnnddd
 23414              		.loc 1 4272 2 view .LVU6065
 23415 004e 0BA9     		add	r1, sp, #44
 23416 0050 02A8     		add	r0, sp, #8
 23417 0052 FFF7FEFF 		bl	decNumberTrunc
 23418              	.LVL1812:
4273:src/xeq.c     **** 
 23419              		.loc 1 4273 2 view .LVU6066
4273:src/xeq.c     **** 
 23420              		.loc 1 4273 9 is_stmt 0 view .LVU6067
 23421 0056 02A8     		add	r0, sp, #8
 23422 0058 FFF7FEFF 		bl	dn_to_int
 23423              	.LVL1813:
4275:src/xeq.c     **** 		if (!flash)
 23424              		.loc 1 4275 2 is_stmt 1 view .LVU6068
4275:src/xeq.c     **** 		if (!flash)
 23425              		.loc 1 4275 5 is_stmt 0 view .LVU6069
 23426 005c 041E     		subs	r4, r0, #0
 23427 005e 35DB     		blt	.L1680
 23428              	.LVL1814:
4283:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23429              		.loc 1 4283 2 is_stmt 1 view .LVU6070
4283:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23430              		.loc 1 4283 8 is_stmt 0 view .LVU6071
 23431 0060 704A     		ldr	r2, .L1729+4
4285:src/xeq.c     **** 	rsrc /= 100;			// sss
 23432              		.loc 1 4285 6 view .LVU6072
 23433 0062 714E     		ldr	r6, .L1729+8
4289:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23434              		.loc 1 4289 9 view .LVU6073
 23435 0064 7148     		ldr	r0, .L1729+12
 23436              	.LVL1815:
4283:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23437              		.loc 1 4283 8 view .LVU6074
 23438 0066 82FB0432 		smull	r3, r2, r2, r4
 23439 006a E517     		asrs	r5, r4, #31
4284:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23440              		.loc 1 4284 7 view .LVU6075
 23441 006c C5EBA211 		rsb	r1, r5, r2, asr #6
4285:src/xeq.c     **** 	rsrc /= 100;			// sss
 23442              		.loc 1 4285 6 view .LVU6076
 23443 0070 A6FB0136 		umull	r3, r6, r6, r1
4283:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23444              		.loc 1 4283 8 view .LVU6077
 23445 0074 4FF47A77 		mov	r7, #1000
 23446              	.LVL1816:
4285:src/xeq.c     **** 	rsrc /= 100;			// sss
 23447              		.loc 1 4285 6 view .LVU6078
 23448 0078 7209     		lsrs	r2, r6, #5
4283:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23449              		.loc 1 4283 8 view .LVU6079
ARM GAS  /tmp/cc7LeJ71.s 			page 612


 23450 007a 07FB1145 		mls	r5, r7, r1, r4
 23451              	.LVL1817:
4284:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23452              		.loc 1 4284 2 is_stmt 1 view .LVU6080
4285:src/xeq.c     **** 	rsrc /= 100;			// sss
 23453              		.loc 1 4285 2 view .LVU6081
4289:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23454              		.loc 1 4289 9 is_stmt 0 view .LVU6082
 23455 007e 8442     		cmp	r4, r0
4285:src/xeq.c     **** 	rsrc /= 100;			// sss
 23456              		.loc 1 4285 6 view .LVU6083
 23457 0080 4FF06407 		mov	r7, #100
4286:src/xeq.c     **** 
 23458              		.loc 1 4286 7 view .LVU6084
 23459 0084 1646     		mov	r6, r2
4285:src/xeq.c     **** 	rsrc /= 100;			// sss
 23460              		.loc 1 4285 6 view .LVU6085
 23461 0086 07FB1212 		mls	r2, r7, r2, r1
 23462              	.LVL1818:
4286:src/xeq.c     **** 
 23463              		.loc 1 4286 2 is_stmt 1 view .LVU6086
4288:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23464              		.loc 1 4288 2 view .LVU6087
4289:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23465              		.loc 1 4289 9 is_stmt 0 view .LVU6088
 23466 008a 5BDA     		bge	.L1681
 23467 008c 6849     		ldr	r1, .L1729+16
 23468 008e 019B     		ldr	r3, [sp, #4]
 23469 0090 8C42     		cmp	r4, r1
 23470 0092 7EDA     		bge	.L1708
 23471              	.LBB3247:
 23472              	.LBI3247:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23473              		.loc 1 253 14 is_stmt 1 view .LVU6089
 23474              	.LBE3247:
 23475              	.LBE3324:
 23476              	.LBE3241:
 254:src/xeq.c     **** }
 23477              		.loc 1 254 2 view .LVU6090
 23478              	.LVL1819:
 23479              	.LBB3331:
 23480              	.LBB3325:
 23481              	.LBB3253:
 23482              	.LBB3248:
 23483              	.LBI3248:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23484              		.loc 1 241 14 view .LVU6091
 23485              	.LBB3249:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23486              		.loc 1 242 2 view .LVU6092
 23487              	.LBB3250:
 23488              	.LBI3250:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23489              		.loc 1 1118 5 view .LVU6093
 23490              	.LBB3251:
1119:src/xeq.c     **** }
 23491              		.loc 1 1119 2 view .LVU6094
ARM GAS  /tmp/cc7LeJ71.s 			page 613


1119:src/xeq.c     **** }
 23492              		.loc 1 1119 12 is_stmt 0 view .LVU6095
 23493 0094 DAF80010 		ldr	r1, [r10]
1119:src/xeq.c     **** }
 23494              		.loc 1 1119 24 view .LVU6096
 23495 0098 B1F8E807 		ldrh	r0, [r1, #2024]
 23496 009c 44F20103 		movw	r3, #16385
 23497              	.LBE3251:
 23498              	.LBE3250:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23499              		.loc 1 242 5 view .LVU6097
 23500 00a0 0340     		ands	r3, r3, r0
 23501 00a2 B3F5804F 		cmp	r3, #16384
 23502              	.LBB3252:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23503              		.loc 1 243 24 view .LVU6098
 23504 00a6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23505              		.loc 1 243 3 is_stmt 1 view .LVU6099
 244:src/xeq.c     **** 	}
 23506              		.loc 1 244 3 view .LVU6100
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23507              		.loc 1 243 13 is_stmt 0 view .LVU6101
 23508 00aa 04BF     		itt	eq
 23509 00ac 0C3B     		subeq	r3, r3, #12
 244:src/xeq.c     **** 	}
 23510              		.loc 1 244 67 view .LVU6102
 23511 00ae 5B10     		asreq	r3, r3, #1
 23512              	.LVL1820:
 23513              	.L1687:
 244:src/xeq.c     **** 	}
 23514              		.loc 1 244 67 view .LVU6103
 23515              	.LBE3252:
 23516              	.LBE3249:
 23517              	.LBE3248:
 23518              	.LBE3253:
4292:src/xeq.c     **** 		goto range_error;
 23519              		.loc 1 4292 5 view .LVU6104
 23520 00b0 B342     		cmp	r3, r6
 23521 00b2 4FF00007 		mov	r7, #0
 23522              	.LVL1821:
4292:src/xeq.c     **** 		goto range_error;
 23523              		.loc 1 4292 2 is_stmt 1 view .LVU6105
4292:src/xeq.c     **** 		goto range_error;
 23524              		.loc 1 4292 5 is_stmt 0 view .LVU6106
 23525 00b6 22DC     		bgt	.L1724
 23526              	.LVL1822:
 23527              	.L1683:
 23528              	.LDL1:
4338:src/xeq.c     **** 	return 1;
 23529              		.loc 1 4338 2 is_stmt 1 view .LVU6107
 23530              	.LBB3254:
 23531              	.LBI3254:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23532              		.loc 1 546 5 view .LVU6108
 23533              	.LBB3255:
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/cc7LeJ71.s 			page 614


 23534              		.loc 1 547 2 view .LVU6109
 547:src/xeq.c     **** 		Error = e;
 23535              		.loc 1 547 12 is_stmt 0 view .LVU6110
 23536 00b8 594B     		ldr	r3, .L1729
 547:src/xeq.c     **** 		Error = e;
 23537              		.loc 1 547 5 view .LVU6111
 23538 00ba 1A68     		ldr	r2, [r3]
 23539 00bc 002A     		cmp	r2, #0
 23540 00be AFD1     		bne	.L1706
 23541              	.LVL1823:
 23542              	.LBB3256:
 23543              	.LBI3256:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 23544              		.loc 1 546 5 is_stmt 1 view .LVU6112
 23545              	.LBB3257:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23546              		.loc 1 548 3 view .LVU6113
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23547              		.loc 1 548 9 is_stmt 0 view .LVU6114
 23548 00c0 0822     		movs	r2, #8
 23549              	.LBE3257:
 23550              	.LBE3256:
 23551              	.LBE3255:
 23552              	.LBE3254:
4339:src/xeq.c     **** }
 23553              		.loc 1 4339 9 view .LVU6115
 23554 00c2 0120     		movs	r0, #1
 23555              	.LBB3261:
 23556              	.LBB3260:
 23557              	.LBB3259:
 23558              	.LBB3258:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 23559              		.loc 1 548 9 view .LVU6116
 23560 00c4 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 23561              		.loc 1 549 3 is_stmt 1 view .LVU6117
 23562              	.LBE3258:
 23563              	.LBE3259:
 23564              	.LBE3260:
 23565              	.LBE3261:
 23566              	.LBE3325:
 23567              	.LBE3331:
4340:src/xeq.c     **** 
 23568              		.loc 1 4340 1 is_stmt 0 view .LVU6118
 23569 00c6 15B0     		add	sp, sp, #84
 23570              		.cfi_remember_state
 23571              		.cfi_def_cfa_offset 36
 23572              		@ sp needed
 23573 00c8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23574              	.LVL1824:
 23575              	.L1680:
 23576              		.cfi_restore_state
 23577              	.LBB3332:
 23578              	.LBB3326:
4276:src/xeq.c     **** 			goto range_error;
 23579              		.loc 1 4276 3 is_stmt 1 view .LVU6119
4276:src/xeq.c     **** 			goto range_error;
ARM GAS  /tmp/cc7LeJ71.s 			page 615


 23580              		.loc 1 4276 6 is_stmt 0 view .LVU6120
 23581 00cc 002F     		cmp	r7, #0
 23582 00ce F3D0     		beq	.L1683
4278:src/xeq.c     **** 	}
 23583              		.loc 1 4278 3 is_stmt 1 view .LVU6121
4283:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23584              		.loc 1 4283 8 is_stmt 0 view .LVU6122
 23585 00d0 544D     		ldr	r5, .L1729+4
4288:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23586              		.loc 1 4288 30 view .LVU6123
 23587 00d2 584A     		ldr	r2, .L1729+20
4285:src/xeq.c     **** 	rsrc /= 100;			// sss
 23588              		.loc 1 4285 6 view .LVU6124
 23589 00d4 544E     		ldr	r6, .L1729+8
4278:src/xeq.c     **** 	}
 23590              		.loc 1 4278 8 view .LVU6125
 23591 00d6 6442     		rsbs	r4, r4, #0
 23592              	.LVL1825:
4283:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23593              		.loc 1 4283 2 is_stmt 1 view .LVU6126
4283:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23594              		.loc 1 4283 8 is_stmt 0 view .LVU6127
 23595 00d8 A5FB0435 		umull	r3, r5, r5, r4
4284:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23596              		.loc 1 4284 7 view .LVU6128
 23597 00dc AB09     		lsrs	r3, r5, #6
4285:src/xeq.c     **** 	rsrc /= 100;			// sss
 23598              		.loc 1 4285 6 view .LVU6129
 23599 00de A6FB0316 		umull	r1, r6, r6, r3
4283:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23600              		.loc 1 4283 8 view .LVU6130
 23601 00e2 4FF47A70 		mov	r0, #1000
4288:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
 23602              		.loc 1 4288 30 view .LVU6131
 23603 00e6 1168     		ldr	r1, [r2]
4283:src/xeq.c     **** 	rsrc /= 1000;			// sssnn
 23604              		.loc 1 4283 8 view .LVU6132
 23605 00e8 00FB1345 		mls	r5, r0, r3, r4
 23606              	.LVL1826:
4284:src/xeq.c     **** 	num = rsrc % 100;		// nn
 23607              		.loc 1 4284 2 is_stmt 1 view .LVU6133
4285:src/xeq.c     **** 	rsrc /= 100;			// sss
 23608              		.loc 1 4285 2 view .LVU6134
4285:src/xeq.c     **** 	rsrc /= 100;			// sss
 23609              		.loc 1 4285 6 is_stmt 0 view .LVU6135
 23610 00ec 7209     		lsrs	r2, r6, #5
 23611 00ee 6420     		movs	r0, #100
4286:src/xeq.c     **** 
 23612              		.loc 1 4286 7 view .LVU6136
 23613 00f0 1646     		mov	r6, r2
4285:src/xeq.c     **** 	rsrc /= 100;			// sss
 23614              		.loc 1 4285 6 view .LVU6137
 23615 00f2 00FB1232 		mls	r2, r0, r2, r3
 23616              	.LVL1827:
4286:src/xeq.c     **** 
 23617              		.loc 1 4286 2 is_stmt 1 view .LVU6138
4288:src/xeq.c     **** 	       : rsrc >= LOCAL_REG_BASE ? local_regs() + LOCAL_REG_BASE
ARM GAS  /tmp/cc7LeJ71.s 			page 616


 23618              		.loc 1 4288 2 view .LVU6139
4289:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23619              		.loc 1 4289 9 is_stmt 0 view .LVU6140
 23620 00f6 91F8CF37 		ldrb	r3, [r1, #1999]	@ zero_extendqisi2
 23621              	.LVL1828:
 23622              	.L1684:
4292:src/xeq.c     **** 		goto range_error;
 23623              		.loc 1 4292 2 is_stmt 1 view .LVU6141
4292:src/xeq.c     **** 		goto range_error;
 23624              		.loc 1 4292 5 is_stmt 0 view .LVU6142
 23625 00fa B342     		cmp	r3, r6
 23626 00fc DCDD     		ble	.L1683
 23627              	.L1724:
4295:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23628              		.loc 1 4295 2 is_stmt 1 view .LVU6143
4295:src/xeq.c     **** 		mx_dest = rdest >= LOCAL_REG_BASE ? local_regs() : global_regs();
 23629              		.loc 1 4295 5 is_stmt 0 view .LVU6144
 23630 00fe B8F1000F 		cmp	r8, #0
 23631 0102 29D0     		beq	.L1688
4296:src/xeq.c     **** 
 23632              		.loc 1 4296 3 is_stmt 1 view .LVU6145
4296:src/xeq.c     **** 
 23633              		.loc 1 4296 52 is_stmt 0 view .LVU6146
 23634 0104 6F2D     		cmp	r5, #111
 23635 0106 2BDD     		ble	.L1689
 23636              	.LBB3262:
 23637              	.LBI3262:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23638              		.loc 1 233 5 is_stmt 1 view .LVU6147
 23639              	.LBE3262:
 23640              	.LBE3326:
 23641              	.LBE3332:
 234:src/xeq.c     **** }
 23642              		.loc 1 234 2 view .LVU6148
 23643              	.LVL1829:
 23644              	.LBB3333:
 23645              	.LBB3327:
 23646              	.LBB3287:
 23647              	.LBB3263:
 23648              	.LBI3263:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23649              		.loc 1 225 5 view .LVU6149
 23650              	.LBB3264:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23651              		.loc 1 226 2 view .LVU6150
 23652              	.LBB3265:
 23653              	.LBI3265:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23654              		.loc 1 1118 5 view .LVU6151
 23655              	.LBB3266:
1119:src/xeq.c     **** }
 23656              		.loc 1 1119 2 view .LVU6152
1119:src/xeq.c     **** }
 23657              		.loc 1 1119 12 is_stmt 0 view .LVU6153
 23658 0108 DAF80010 		ldr	r1, [r10]
 23659              	.LVL1830:
1119:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 617


 23660              		.loc 1 1119 12 view .LVU6154
 23661              	.LBE3266:
 23662              	.LBE3265:
 227:src/xeq.c     **** }
 23663              		.loc 1 227 2 is_stmt 1 view .LVU6155
 23664              	.LBB3269:
 23665              	.LBI3269:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23666              		.loc 1 217 5 view .LVU6156
 23667              	.LBB3270:
 218:src/xeq.c     **** }
 23668              		.loc 1 218 2 view .LVU6157
 218:src/xeq.c     **** }
 23669              		.loc 1 218 9 is_stmt 0 view .LVU6158
 23670 010c B1F8DE07 		ldrh	r0, [r1, #2014]
 23671 0110 40F34A10 		sbfx	r0, r0, #5, #11
 218:src/xeq.c     **** }
 23672              		.loc 1 218 57 view .LVU6159
 23673 0114 0028     		cmp	r0, #0
 23674 0116 6BDB     		blt	.L1725
 23675              	.LVL1831:
 218:src/xeq.c     **** }
 23676              		.loc 1 218 57 view .LVU6160
 23677              	.LBE3270:
 23678              	.LBE3269:
 23679              	.LBE3264:
 23680              	.LBE3263:
 23681              	.LBE3287:
4298:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23682              		.loc 1 4298 3 is_stmt 1 view .LVU6161
 23683              	.LBB3288:
 23684              	.LBB3285:
 23685              	.LBB3283:
 23686              	.LBB3276:
 23687              	.LBB3271:
 23688 0118 0021     		movs	r1, #0
 23689              	.LVL1832:
4298:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23690              		.loc 1 4298 3 is_stmt 0 view .LVU6162
 23691              	.LBE3271:
 23692              	.LBE3276:
 23693              	.LBE3283:
 23694              	.LBE3285:
 23695              	.LBE3288:
4298:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23696              		.loc 1 4298 6 view .LVU6163
 23697 011a 92B3     		cbz	r2, .L1691
 23698              	.LVL1833:
 23699              	.L1692:
4317:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23700              		.loc 1 4317 4 is_stmt 1 view .LVU6164
4317:src/xeq.c     **** 		if (rdest + num > mx_dest)
 23701              		.loc 1 4317 12 is_stmt 0 view .LVU6165
 23702 011c 7031     		adds	r1, r1, #112
 23703              	.LVL1834:
 23704              	.L1695:
4318:src/xeq.c     **** 			goto range_error;
ARM GAS  /tmp/cc7LeJ71.s 			page 618


 23705              		.loc 1 4318 3 is_stmt 1 view .LVU6166
4318:src/xeq.c     **** 			goto range_error;
 23706              		.loc 1 4318 13 is_stmt 0 view .LVU6167
 23707 011e A818     		adds	r0, r5, r2
4318:src/xeq.c     **** 			goto range_error;
 23708              		.loc 1 4318 6 view .LVU6168
 23709 0120 8842     		cmp	r0, r1
 23710 0122 C9DC     		bgt	.L1683
4321:src/xeq.c     **** 	}
 23711              		.loc 1 4321 3 is_stmt 1 view .LVU6169
4321:src/xeq.c     **** 	}
 23712              		.loc 1 4321 6 is_stmt 0 view .LVU6170
 23713 0124 C8F80050 		str	r5, [r8]
 23714 0128 B118     		adds	r1, r6, r2
 23715              	.LVL1835:
 23716              	.L1701:
4328:src/xeq.c     **** 		goto range_error;
 23717              		.loc 1 4328 2 is_stmt 1 view .LVU6171
4328:src/xeq.c     **** 		goto range_error;
 23718              		.loc 1 4328 5 is_stmt 0 view .LVU6172
 23719 012a 8B42     		cmp	r3, r1
 23720 012c C4DB     		blt	.L1683
 23721              	.L1703:
4332:src/xeq.c     **** 	*n = num;
 23722              		.loc 1 4332 2 is_stmt 1 view .LVU6173
4332:src/xeq.c     **** 	*n = num;
 23723              		.loc 1 4332 37 is_stmt 0 view .LVU6174
 23724 012e 0FB1     		cbz	r7, .L1704
4332:src/xeq.c     **** 	*n = num;
 23725              		.loc 1 4332 37 view .LVU6175
 23726 0130 06F57A76 		add	r6, r6, #1000
 23727              	.LVL1836:
 23728              	.L1704:
4335:src/xeq.c     **** 
 23729              		.loc 1 4335 9 view .LVU6176
 23730 0134 0020     		movs	r0, #0
4332:src/xeq.c     **** 	*n = num;
 23731              		.loc 1 4332 5 view .LVU6177
 23732 0136 CBF80060 		str	r6, [fp]
4333:src/xeq.c     **** 
 23733              		.loc 1 4333 2 is_stmt 1 view .LVU6178
4333:src/xeq.c     **** 
 23734              		.loc 1 4333 5 is_stmt 0 view .LVU6179
 23735 013a C9F80020 		str	r2, [r9]
4335:src/xeq.c     **** 
 23736              		.loc 1 4335 2 is_stmt 1 view .LVU6180
 23737              	.LBE3327:
 23738              	.LBE3333:
4340:src/xeq.c     **** 
 23739              		.loc 1 4340 1 is_stmt 0 view .LVU6181
 23740 013e 15B0     		add	sp, sp, #84
 23741              		.cfi_remember_state
 23742              		.cfi_def_cfa_offset 36
 23743              		@ sp needed
 23744 0140 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 23745              	.LVL1837:
 23746              	.L1681:
ARM GAS  /tmp/cc7LeJ71.s 			page 619


 23747              		.cfi_restore_state
 23748              	.LBB3334:
 23749              	.LBB3328:
 23750              	.LBB3289:
 23751              	.LBI3289:
 233:src/xeq.c     **** 	return local_regs_rarg(RARG_RCL);
 23752              		.loc 1 233 5 is_stmt 1 view .LVU6182
 23753              	.LBE3289:
 23754              	.LBE3328:
 23755              	.LBE3334:
 234:src/xeq.c     **** }
 23756              		.loc 1 234 2 view .LVU6183
 23757              	.LBB3335:
 23758              	.LBB3329:
 23759              	.LBB3310:
 23760              	.LBB3290:
 23761              	.LBI3290:
 225:src/xeq.c     **** 	const int dbl = op != RARG_sRCL && op != RARG_iRCL && (op == RARG_dRCL || is_dblmode()); 
 23762              		.loc 1 225 5 view .LVU6184
 23763              	.LBB3291:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23764              		.loc 1 226 2 view .LVU6185
 23765              	.LBB3292:
 23766              	.LBI3292:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23767              		.loc 1 1118 5 view .LVU6186
 23768              	.LBB3293:
1119:src/xeq.c     **** }
 23769              		.loc 1 1119 2 view .LVU6187
1119:src/xeq.c     **** }
 23770              		.loc 1 1119 12 is_stmt 0 view .LVU6188
 23771 0144 DAF80030 		ldr	r3, [r10]
 23772              	.LVL1838:
1119:src/xeq.c     **** }
 23773              		.loc 1 1119 12 view .LVU6189
 23774              	.LBE3293:
 23775              	.LBE3292:
 227:src/xeq.c     **** }
 23776              		.loc 1 227 2 is_stmt 1 view .LVU6190
 23777              	.LBB3296:
 23778              	.LBI3296:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 23779              		.loc 1 217 5 view .LVU6191
 23780              	.LBB3297:
 218:src/xeq.c     **** }
 23781              		.loc 1 218 2 view .LVU6192
 218:src/xeq.c     **** }
 23782              		.loc 1 218 9 is_stmt 0 view .LVU6193
 23783 0148 B3F8DE17 		ldrh	r1, [r3, #2014]
 23784 014c 41F34A11 		sbfx	r1, r1, #5, #11
 218:src/xeq.c     **** }
 23785              		.loc 1 218 57 view .LVU6194
 23786 0150 0029     		cmp	r1, #0
 23787 0152 38DB     		blt	.L1726
 23788 0154 7023     		movs	r3, #112
 23789              	.LVL1839:
 218:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 620


 23790              		.loc 1 218 57 view .LVU6195
 23791 0156 ABE7     		b	.L1687
 23792              	.LVL1840:
 23793              	.L1688:
 218:src/xeq.c     **** }
 23794              		.loc 1 218 57 view .LVU6196
 23795              	.LBE3297:
 23796              	.LBE3296:
 23797              	.LBE3291:
 23798              	.LBE3290:
 23799              	.LBE3310:
4324:src/xeq.c     **** 			num = mx_src - rsrc;
 23800              		.loc 1 4324 3 is_stmt 1 view .LVU6197
4324:src/xeq.c     **** 			num = mx_src - rsrc;
 23801              		.loc 1 4324 6 is_stmt 0 view .LVU6198
 23802 0158 002A     		cmp	r2, #0
 23803 015a 32D1     		bne	.L1727
4325:src/xeq.c     **** 		}
 23804              		.loc 1 4325 4 is_stmt 1 view .LVU6199
4325:src/xeq.c     **** 		}
 23805              		.loc 1 4325 8 is_stmt 0 view .LVU6200
 23806 015c 9A1B     		subs	r2, r3, r6
 23807              	.LVL1841:
4328:src/xeq.c     **** 		goto range_error;
 23808              		.loc 1 4328 2 is_stmt 1 view .LVU6201
 23809 015e E6E7     		b	.L1703
 23810              	.L1689:
 23811              	.LBB3311:
 23812              	.LBI3311:
 253:src/xeq.c     **** 	return global_regs_rarg(RARG_RCL);
 23813              		.loc 1 253 14 view .LVU6202
 23814              	.LBE3311:
 23815              	.LBE3329:
 23816              	.LBE3335:
 254:src/xeq.c     **** }
 23817              		.loc 1 254 2 view .LVU6203
 23818              	.LVL1842:
 23819              	.LBB3336:
 23820              	.LBB3330:
 23821              	.LBB3320:
 23822              	.LBB3312:
 23823              	.LBI3312:
 241:src/xeq.c     **** 	if (is_dblmode() || op == RARG_dRCL) {
 23824              		.loc 1 241 14 view .LVU6204
 23825              	.LBB3313:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23826              		.loc 1 242 2 view .LVU6205
 23827              	.LBB3314:
 23828              	.LBI3314:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 23829              		.loc 1 1118 5 view .LVU6206
 23830              	.LBB3315:
1119:src/xeq.c     **** }
 23831              		.loc 1 1119 2 view .LVU6207
1119:src/xeq.c     **** }
 23832              		.loc 1 1119 12 is_stmt 0 view .LVU6208
 23833 0160 DAF80000 		ldr	r0, [r10]
ARM GAS  /tmp/cc7LeJ71.s 			page 621


1119:src/xeq.c     **** }
 23834              		.loc 1 1119 24 view .LVU6209
 23835 0164 B0F8E8C7 		ldrh	ip, [r0, #2024]
 23836 0168 44F20101 		movw	r1, #16385
 23837              	.LBE3315:
 23838              	.LBE3314:
 242:src/xeq.c     **** 		const int num_regs = NumRegs - STACK_SIZE - EXTRA_REG;
 23839              		.loc 1 242 5 view .LVU6210
 23840 016c 01EA0C01 		and	r1, r1, ip
 23841 0170 B1F5804F 		cmp	r1, #16384
 23842              	.LBB3316:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23843              		.loc 1 243 24 view .LVU6211
 23844 0174 90F8CF17 		ldrb	r1, [r0, #1999]	@ zero_extendqisi2
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23845              		.loc 1 243 3 is_stmt 1 view .LVU6212
 244:src/xeq.c     **** 	}
 23846              		.loc 1 244 3 view .LVU6213
 23847              	.LVL1843:
 244:src/xeq.c     **** 	}
 23848              		.loc 1 244 3 is_stmt 0 view .LVU6214
 23849              	.LBE3316:
 23850              	.LBE3313:
 23851              	.LBE3312:
 23852              	.LBE3320:
4298:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23853              		.loc 1 4298 3 is_stmt 1 view .LVU6215
 23854              	.LBB3321:
 23855              	.LBB3319:
 23856              	.LBB3318:
 23857              	.LBB3317:
 243:src/xeq.c     **** 		return op == RARG_sRCL || op == RARG_iRCL ? num_regs : num_regs >> 1; 
 23858              		.loc 1 243 13 is_stmt 0 view .LVU6216
 23859 0178 04BF     		itt	eq
 23860 017a 0C39     		subeq	r1, r1, #12
 244:src/xeq.c     **** 	}
 23861              		.loc 1 244 67 view .LVU6217
 23862 017c 4910     		asreq	r1, r1, #1
 23863              	.LBE3317:
 23864              	.LBE3318:
 23865              	.LBE3319:
 23866              	.LBE3321:
4298:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 23867              		.loc 1 4298 6 view .LVU6218
 23868 017e 002A     		cmp	r2, #0
 23869 0180 CDD1     		bne	.L1695
 23870              	.L1691:
4300:src/xeq.c     **** 				// source & destination in different memory areas
 23871              		.loc 1 4300 4 is_stmt 1 view .LVU6219
4300:src/xeq.c     **** 				// source & destination in different memory areas
 23872              		.loc 1 4300 7 is_stmt 0 view .LVU6220
 23873 0182 4FB1     		cbz	r7, .L1728
 23874              	.LVL1844:
 23875              	.L1696:
4302:src/xeq.c     **** 			else {
 23876              		.loc 1 4302 5 is_stmt 1 view .LVU6221
4302:src/xeq.c     **** 			else {
ARM GAS  /tmp/cc7LeJ71.s 			page 622


 23877              		.loc 1 4302 9 is_stmt 0 view .LVU6222
 23878 0184 8B42     		cmp	r3, r1
 23879 0186 1A46     		mov	r2, r3
 23880 0188 A8BF     		it	ge
 23881 018a 0A46     		movge	r2, r1
 23882              	.LVL1845:
 23883              	.L1698:
4316:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23884              		.loc 1 4316 3 is_stmt 1 view .LVU6223
4316:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23885              		.loc 1 4316 6 is_stmt 0 view .LVU6224
 23886 018c 6F2D     		cmp	r5, #111
 23887 018e C6DD     		ble	.L1695
 23888 0190 C4E7     		b	.L1692
 23889              	.LVL1846:
 23890              	.L1708:
4316:src/xeq.c     **** 			mx_dest += LOCAL_REG_BASE;
 23891              		.loc 1 4316 6 view .LVU6225
 23892 0192 1F46     		mov	r7, r3
4289:src/xeq.c     **** 	       : rsrc >= regX_idx ? LOCAL_REG_BASE
 23893              		.loc 1 4289 9 view .LVU6226
 23894 0194 7023     		movs	r3, #112
 23895 0196 B0E7     		b	.L1684
 23896              	.LVL1847:
 23897              	.L1728:
4300:src/xeq.c     **** 				// source & destination in different memory areas
 23898              		.loc 1 4300 42 view .LVU6227
 23899 0198 244A     		ldr	r2, .L1729+12
 23900              	.LVL1848:
4300:src/xeq.c     **** 				// source & destination in different memory areas
 23901              		.loc 1 4300 14 view .LVU6228
 23902 019a 9442     		cmp	r4, r2
 23903 019c B4BF     		ite	lt
 23904 019e 0024     		movlt	r4, #0
 23905 01a0 0124     		movge	r4, #1
 23906 01a2 6F2D     		cmp	r5, #111
 23907 01a4 D4BF     		ite	le
 23908 01a6 0022     		movle	r2, #0
 23909 01a8 0122     		movgt	r2, #1
 23910 01aa 9442     		cmp	r4, r2
 23911 01ac EAD1     		bne	.L1696
4304:src/xeq.c     **** 					num = mx_src - rsrc;
 23912              		.loc 1 4304 5 is_stmt 1 view .LVU6229
4304:src/xeq.c     **** 					num = mx_src - rsrc;
 23913              		.loc 1 4304 8 is_stmt 0 view .LVU6230
 23914 01ae B542     		cmp	r5, r6
4305:src/xeq.c     **** 					q = rsrc - rdest;
 23915              		.loc 1 4305 6 is_stmt 1 view .LVU6231
4309:src/xeq.c     **** 					q = rdest - rsrc;
 23916              		.loc 1 4309 10 is_stmt 0 view .LVU6232
 23917 01b0 A7BF     		ittee	ge
 23918 01b2 4A1B     		subge	r2, r1, r5
4310:src/xeq.c     **** 				}
 23919              		.loc 1 4310 8 view .LVU6233
 23920 01b4 A81B     		subge	r0, r5, r6
4305:src/xeq.c     **** 					q = rsrc - rdest;
 23921              		.loc 1 4305 10 view .LVU6234
ARM GAS  /tmp/cc7LeJ71.s 			page 623


 23922 01b6 9A1B     		sublt	r2, r3, r6
4306:src/xeq.c     **** 				}
 23923              		.loc 1 4306 6 is_stmt 1 view .LVU6235
4306:src/xeq.c     **** 				}
 23924              		.loc 1 4306 8 is_stmt 0 view .LVU6236
 23925 01b8 701B     		sublt	r0, r6, r5
4309:src/xeq.c     **** 					q = rdest - rsrc;
 23926              		.loc 1 4309 6 is_stmt 1 view .LVU6237
 23927              	.LVL1849:
4310:src/xeq.c     **** 				}
 23928              		.loc 1 4310 6 view .LVU6238
4312:src/xeq.c     **** 					num = q;
 23929              		.loc 1 4312 5 view .LVU6239
 23930 01ba 8242     		cmp	r2, r0
 23931 01bc A8BF     		it	ge
 23932 01be 0246     		movge	r2, r0
 23933              	.LVL1850:
4312:src/xeq.c     **** 					num = q;
 23934              		.loc 1 4312 5 is_stmt 0 view .LVU6240
 23935 01c0 E4E7     		b	.L1698
 23936              	.LVL1851:
 23937              	.L1727:
4312:src/xeq.c     **** 					num = q;
 23938              		.loc 1 4312 5 view .LVU6241
 23939 01c2 9119     		adds	r1, r2, r6
 23940 01c4 B1E7     		b	.L1701
 23941              	.LVL1852:
 23942              	.L1726:
 23943              	.LBB3322:
 23944              	.LBB3309:
 23945              	.LBB3308:
 23946              	.LBB3302:
 23947              	.LBB3294:
1119:src/xeq.c     **** }
 23948              		.loc 1 1119 24 view .LVU6242
 23949 01c6 B3F8E877 		ldrh	r7, [r3, #2024]
 23950              	.LBE3294:
 23951              	.LBE3302:
 23952              	.LBB3303:
 23953              	.LBB3298:
 218:src/xeq.c     **** }
 23954              		.loc 1 218 25 view .LVU6243
 23955 01ca 1B48     		ldr	r0, .L1729+24
 23956              	.LBE3298:
 23957              	.LBE3303:
 23958              	.LBB3304:
 23959              	.LBB3295:
1119:src/xeq.c     **** }
 23960              		.loc 1 1119 24 view .LVU6244
 23961 01cc 44F20103 		movw	r3, #16385
 23962              	.LVL1853:
1119:src/xeq.c     **** }
 23963              		.loc 1 1119 24 view .LVU6245
 23964              	.LBE3295:
 23965              	.LBE3304:
 23966              	.LBB3305:
 23967              	.LBB3299:
ARM GAS  /tmp/cc7LeJ71.s 			page 624


 218:src/xeq.c     **** }
 23968              		.loc 1 218 25 view .LVU6246
 23969 01d0 0068     		ldr	r0, [r0]
 23970              	.LBE3299:
 23971              	.LBE3305:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23972              		.loc 1 226 73 view .LVU6247
 23973 01d2 3B40     		ands	r3, r3, r7
 23974 01d4 A3F58043 		sub	r3, r3, #16384
 23975              	.LBB3306:
 23976              	.LBB3300:
 218:src/xeq.c     **** }
 23977              		.loc 1 218 57 view .LVU6248
 23978 01d8 30F81110 		ldrh	r1, [r0, r1, lsl #1]
 23979              	.LBE3300:
 23980              	.LBE3306:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 23981              		.loc 1 226 73 view .LVU6249
 23982 01dc B3FA83F3 		clz	r3, r3
 23983 01e0 5B09     		lsrs	r3, r3, #5
 23984 01e2 0233     		adds	r3, r3, #2
 23985              	.LBB3307:
 23986              	.LBB3301:
 218:src/xeq.c     **** }
 23987              		.loc 1 218 57 view .LVU6250
 23988 01e4 C1F30B01 		ubfx	r1, r1, #0, #12
 23989 01e8 41FA03F3 		asr	r3, r1, r3
 23990 01ec 7033     		adds	r3, r3, #112
 23991 01ee 5FE7     		b	.L1687
 23992              	.LVL1854:
 23993              	.L1725:
 218:src/xeq.c     **** }
 23994              		.loc 1 218 57 view .LVU6251
 23995              	.LBE3301:
 23996              	.LBE3307:
 23997              	.LBE3308:
 23998              	.LBE3309:
 23999              	.LBE3322:
 24000              	.LBB3323:
 24001              	.LBB3286:
 24002              	.LBB3284:
 24003              	.LBB3277:
 24004              	.LBB3267:
1119:src/xeq.c     **** }
 24005              		.loc 1 1119 24 view .LVU6252
 24006 01f0 B1F8E8E7 		ldrh	lr, [r1, #2024]
 24007              	.LBE3267:
 24008              	.LBE3277:
 24009              	.LBB3278:
 24010              	.LBB3272:
 218:src/xeq.c     **** }
 24011              		.loc 1 218 25 view .LVU6253
 24012 01f4 DFF840C0 		ldr	ip, .L1729+24
 24013              	.LBE3272:
 24014              	.LBE3278:
 24015              	.LBB3279:
 24016              	.LBB3268:
ARM GAS  /tmp/cc7LeJ71.s 			page 625


1119:src/xeq.c     **** }
 24017              		.loc 1 1119 24 view .LVU6254
 24018 01f8 44F20101 		movw	r1, #16385
 24019              	.LVL1855:
1119:src/xeq.c     **** }
 24020              		.loc 1 1119 24 view .LVU6255
 24021              	.LBE3268:
 24022              	.LBE3279:
 24023              	.LBB3280:
 24024              	.LBB3273:
 218:src/xeq.c     **** }
 24025              		.loc 1 218 25 view .LVU6256
 24026 01fc DCF800C0 		ldr	ip, [ip]
 24027              	.LBE3273:
 24028              	.LBE3280:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 24029              		.loc 1 226 73 view .LVU6257
 24030 0200 01EA0E01 		and	r1, r1, lr
 24031 0204 A1F58041 		sub	r1, r1, #16384
 24032              	.LBB3281:
 24033              	.LBB3274:
 218:src/xeq.c     **** }
 24034              		.loc 1 218 57 view .LVU6258
 24035 0208 3CF810C0 		ldrh	ip, [ip, r0, lsl #1]
 24036              	.LBE3274:
 24037              	.LBE3281:
 226:src/xeq.c     **** 	return local_levels() >> (2 + dbl);
 24038              		.loc 1 226 73 view .LVU6259
 24039 020c B1FA81F1 		clz	r1, r1
 24040 0210 4909     		lsrs	r1, r1, #5
 24041 0212 881C     		adds	r0, r1, #2
 24042              	.LBB3282:
 24043              	.LBB3275:
 218:src/xeq.c     **** }
 24044              		.loc 1 218 57 view .LVU6260
 24045 0214 CCF30B01 		ubfx	r1, ip, #0, #12
 24046 0218 0141     		asrs	r1, r1, r0
 24047              	.LVL1856:
 218:src/xeq.c     **** }
 24048              		.loc 1 218 57 view .LVU6261
 24049              	.LBE3275:
 24050              	.LBE3282:
 24051              	.LBE3284:
 24052              	.LBE3286:
 24053              	.LBE3323:
4298:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 24054              		.loc 1 4298 3 is_stmt 1 view .LVU6262
4298:src/xeq.c     **** 			/* Calculate the maximum non-overlapping size */
 24055              		.loc 1 4298 6 is_stmt 0 view .LVU6263
 24056 021a 002A     		cmp	r2, #0
 24057 021c B1D0     		beq	.L1691
 24058 021e 7DE7     		b	.L1692
 24059              	.L1730:
 24060              		.align	2
 24061              	.L1729:
 24062 0220 00000000 		.word	Error
 24063 0224 D34D6210 		.word	274877907
ARM GAS  /tmp/cc7LeJ71.s 			page 626


 24064 0228 1F85EB51 		.word	1374389535
 24065 022c 00E6AA00 		.word	11200000
 24066 0230 80969800 		.word	10000000
 24067 0234 00000000 		.word	backup_ram
 24068 0238 00000000 		.word	RetStk
 24069 023c 00000000 		.word	main_ram
 24070              	.LBE3330:
 24071              	.LBE3336:
 24072              		.cfi_endproc
 24073              	.LFE229:
 24075              		.section	.text.op_regcopy,"ax",%progbits
 24076              		.align	1
 24077              		.p2align 2,,3
 24078              		.global	op_regcopy
 24079              		.syntax unified
 24080              		.thumb
 24081              		.thumb_func
 24082              		.fpu fpv4-sp-d16
 24084              	op_regcopy:
 24085              	.LVL1857:
 24086              	.LFB230:
4342:src/xeq.c     **** 	int s, n, d;
 24087              		.loc 1 4342 32 is_stmt 1 view -0
 24088              		.cfi_startproc
 24089              		@ args = 0, pretend = 0, frame = 16
 24090              		@ frame_needed = 0, uses_anonymous_args = 0
4343:src/xeq.c     **** 
 24091              		.loc 1 4343 2 view .LVU6265
4345:src/xeq.c     **** 		return;
 24092              		.loc 1 4345 2 view .LVU6266
4342:src/xeq.c     **** 	int s, n, d;
 24093              		.loc 1 4342 32 is_stmt 0 view .LVU6267
 24094 0000 10B5     		push	{r4, lr}
 24095              		.cfi_def_cfa_offset 8
 24096              		.cfi_offset 4, -8
 24097              		.cfi_offset 14, -4
 24098 0002 84B0     		sub	sp, sp, #16
 24099              		.cfi_def_cfa_offset 24
4345:src/xeq.c     **** 		return;
 24100              		.loc 1 4345 6 view .LVU6268
 24101 0004 0123     		movs	r3, #1
 24102 0006 03AA     		add	r2, sp, #12
 24103 0008 02A9     		add	r1, sp, #8
 24104 000a 01A8     		add	r0, sp, #4
 24105              	.LVL1858:
4345:src/xeq.c     **** 		return;
 24106              		.loc 1 4345 6 view .LVU6269
 24107 000c FFF7FEFF 		bl	reg_decode
 24108              	.LVL1859:
4345:src/xeq.c     **** 		return;
 24109              		.loc 1 4345 5 view .LVU6270
 24110 0010 B8B9     		cbnz	r0, .L1731
4347:src/xeq.c     **** }
 24111              		.loc 1 4347 2 is_stmt 1 view .LVU6271
 24112 0012 0398     		ldr	r0, [sp, #12]
 24113 0014 FFF7FEFF 		bl	get_reg_n
 24114              	.LVL1860:
ARM GAS  /tmp/cc7LeJ71.s 			page 627


 24115 0018 0446     		mov	r4, r0
 24116 001a 0198     		ldr	r0, [sp, #4]
 24117 001c FFF7FEFF 		bl	get_reg_n
 24118              	.LVL1861:
 24119              	.LBB3337:
 24120              	.LBB3338:
 24121              	.LBB3339:
 24122              	.LBB3340:
1119:src/xeq.c     **** }
 24123              		.loc 1 1119 24 is_stmt 0 view .LVU6272
 24124 0020 094B     		ldr	r3, .L1736
 24125              	.LBE3340:
 24126              	.LBE3339:
 24127              	.LBE3338:
 24128              	.LBE3337:
4347:src/xeq.c     **** }
 24129              		.loc 1 4347 2 view .LVU6273
 24130 0022 029A     		ldr	r2, [sp, #8]
 24131              	.LVL1862:
 24132              	.LBB3347:
 24133              	.LBB3345:
 24134              	.LBB3343:
 24135              	.LBB3341:
1119:src/xeq.c     **** }
 24136              		.loc 1 1119 24 view .LVU6274
 24137 0024 1B68     		ldr	r3, [r3]
 24138 0026 B3F8E817 		ldrh	r1, [r3, #2024]
 24139 002a 44F20103 		movw	r3, #16385
 24140              	.LBE3341:
 24141              	.LBE3343:
1538:src/xeq.c     **** 		n <<= 1;
 24142              		.loc 1 1538 5 view .LVU6275
 24143 002e 0B40     		ands	r3, r3, r1
 24144 0030 B3F5804F 		cmp	r3, #16384
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24145              		.loc 1 1539 5 view .LVU6276
 24146 0034 08BF     		it	eq
 24147 0036 5200     		lsleq	r2, r2, #1
 24148              	.LBE3345:
 24149              	.LBE3347:
4347:src/xeq.c     **** }
 24150              		.loc 1 4347 2 view .LVU6277
 24151 0038 0146     		mov	r1, r0
 24152              	.LVL1863:
 24153              	.LBB3348:
 24154              	.LBI3337:
1537:src/xeq.c     **** 	if (is_dblmode())
 24155              		.loc 1 1537 6 is_stmt 1 view .LVU6278
 24156              	.LBB3346:
1538:src/xeq.c     **** 		n <<= 1;
 24157              		.loc 1 1538 2 view .LVU6279
 24158              	.LBB3344:
 24159              	.LBI3339:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24160              		.loc 1 1118 5 view .LVU6280
 24161              	.LBB3342:
1119:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 628


 24162              		.loc 1 1119 2 view .LVU6281
 24163              	.LBE3342:
 24164              	.LBE3344:
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 24165              		.loc 1 1539 3 view .LVU6282
1540:src/xeq.c     **** }
 24166              		.loc 1 1540 2 view .LVU6283
 24167 003a D200     		lsls	r2, r2, #3
 24168              	.LVL1864:
1540:src/xeq.c     **** }
 24169              		.loc 1 1540 2 is_stmt 0 view .LVU6284
 24170 003c 2046     		mov	r0, r4
 24171              	.LVL1865:
1540:src/xeq.c     **** }
 24172              		.loc 1 1540 2 view .LVU6285
 24173 003e FFF7FEFF 		bl	xcopy
 24174              	.LVL1866:
 24175              	.L1731:
1540:src/xeq.c     **** }
 24176              		.loc 1 1540 2 view .LVU6286
 24177              	.LBE3346:
 24178              	.LBE3348:
4348:src/xeq.c     **** 
 24179              		.loc 1 4348 1 view .LVU6287
 24180 0042 04B0     		add	sp, sp, #16
 24181              		.cfi_def_cfa_offset 8
 24182              		@ sp needed
 24183 0044 10BD     		pop	{r4, pc}
 24184              	.L1737:
 24185 0046 00BF     		.align	2
 24186              	.L1736:
 24187 0048 00000000 		.word	main_ram
 24188              		.cfi_endproc
 24189              	.LFE230:
 24191              		.section	.text.op_regswap,"ax",%progbits
 24192              		.align	1
 24193              		.p2align 2,,3
 24194              		.global	op_regswap
 24195              		.syntax unified
 24196              		.thumb
 24197              		.thumb_func
 24198              		.fpu fpv4-sp-d16
 24200              	op_regswap:
 24201              	.LVL1867:
 24202              	.LFB231:
4350:src/xeq.c     **** 	int s, n, d, i;
 24203              		.loc 1 4350 32 is_stmt 1 view -0
 24204              		.cfi_startproc
 24205              		@ args = 0, pretend = 0, frame = 16
 24206              		@ frame_needed = 0, uses_anonymous_args = 0
4351:src/xeq.c     **** 
 24207              		.loc 1 4351 2 view .LVU6289
4353:src/xeq.c     **** 		return;
 24208              		.loc 1 4353 2 view .LVU6290
4350:src/xeq.c     **** 	int s, n, d, i;
 24209              		.loc 1 4350 32 is_stmt 0 view .LVU6291
 24210 0000 30B5     		push	{r4, r5, lr}
ARM GAS  /tmp/cc7LeJ71.s 			page 629


 24211              		.cfi_def_cfa_offset 12
 24212              		.cfi_offset 4, -12
 24213              		.cfi_offset 5, -8
 24214              		.cfi_offset 14, -4
 24215 0002 85B0     		sub	sp, sp, #20
 24216              		.cfi_def_cfa_offset 32
4353:src/xeq.c     **** 		return;
 24217              		.loc 1 4353 6 view .LVU6292
 24218 0004 0023     		movs	r3, #0
 24219 0006 03AA     		add	r2, sp, #12
 24220 0008 02A9     		add	r1, sp, #8
 24221 000a 01A8     		add	r0, sp, #4
 24222              	.LVL1868:
4353:src/xeq.c     **** 		return;
 24223              		.loc 1 4353 6 view .LVU6293
 24224 000c FFF7FEFF 		bl	reg_decode
 24225              	.LVL1869:
4353:src/xeq.c     **** 		return;
 24226              		.loc 1 4353 5 view .LVU6294
 24227 0010 E8B9     		cbnz	r0, .L1738
4353:src/xeq.c     **** 		return;
 24228              		.loc 1 4353 37 discriminator 1 view .LVU6295
 24229 0012 039B     		ldr	r3, [sp, #12]
 24230 0014 0446     		mov	r4, r0
 24231 0016 0198     		ldr	r0, [sp, #4]
4353:src/xeq.c     **** 		return;
 24232              		.loc 1 4353 32 discriminator 1 view .LVU6296
 24233 0018 9842     		cmp	r0, r3
 24234 001a 18D0     		beq	.L1738
4356:src/xeq.c     **** 			report_err(ERR_RANGE);
 24235              		.loc 1 4356 3 is_stmt 1 view .LVU6297
4356:src/xeq.c     **** 			report_err(ERR_RANGE);
 24236              		.loc 1 4356 19 is_stmt 0 view .LVU6298
 24237 001c 029A     		ldr	r2, [sp, #8]
4356:src/xeq.c     **** 			report_err(ERR_RANGE);
 24238              		.loc 1 4356 6 view .LVU6299
 24239 001e 18DD     		ble	.L1743
4356:src/xeq.c     **** 			report_err(ERR_RANGE);
 24240              		.loc 1 4356 19 discriminator 1 view .LVU6300
 24241 0020 1344     		add	r3, r3, r2
4356:src/xeq.c     **** 			report_err(ERR_RANGE);
 24242              		.loc 1 4356 14 discriminator 1 view .LVU6301
 24243 0022 9842     		cmp	r0, r3
 24244 0024 19DB     		blt	.L1744
 24245              	.L1745:
 24246              	.LVL1870:
4359:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24247              		.loc 1 4359 16 is_stmt 1 discriminator 1 view .LVU6302
4359:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24248              		.loc 1 4359 4 is_stmt 0 discriminator 1 view .LVU6303
 24249 0026 002A     		cmp	r2, #0
 24250 0028 01DC     		bgt	.L1747
 24251 002a 10E0     		b	.L1738
 24252              	.LVL1871:
 24253              	.L1750:
4359:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24254              		.loc 1 4359 4 discriminator 1 view .LVU6304
ARM GAS  /tmp/cc7LeJ71.s 			page 630


 24255 002c 0198     		ldr	r0, [sp, #4]
 24256              	.LVL1872:
 24257              	.L1747:
4360:src/xeq.c     **** 		}
 24258              		.loc 1 4360 5 is_stmt 1 discriminator 3 view .LVU6305
 24259 002e 2044     		add	r0, r0, r4
 24260 0030 FFF7FEFF 		bl	get_reg_n
 24261              	.LVL1873:
 24262 0034 039B     		ldr	r3, [sp, #12]
 24263 0036 0546     		mov	r5, r0
 24264 0038 E018     		adds	r0, r4, r3
 24265 003a FFF7FEFF 		bl	get_reg_n
 24266              	.LVL1874:
 24267 003e 0146     		mov	r1, r0
 24268 0040 2846     		mov	r0, r5
 24269 0042 FFF7FEFF 		bl	swap_reg
 24270              	.LVL1875:
4359:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24271              		.loc 1 4359 23 discriminator 3 view .LVU6306
4359:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24272              		.loc 1 4359 4 is_stmt 0 discriminator 3 view .LVU6307
 24273 0046 029B     		ldr	r3, [sp, #8]
4359:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24274              		.loc 1 4359 24 discriminator 3 view .LVU6308
 24275 0048 0134     		adds	r4, r4, #1
 24276              	.LVL1876:
4359:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24277              		.loc 1 4359 16 is_stmt 1 discriminator 3 view .LVU6309
4359:src/xeq.c     **** 				swap_reg(get_reg_n(s + i), get_reg_n(d + i));
 24278              		.loc 1 4359 4 is_stmt 0 discriminator 3 view .LVU6310
 24279 004a A342     		cmp	r3, r4
 24280 004c EEDC     		bgt	.L1750
 24281              	.LVL1877:
 24282              	.L1738:
4363:src/xeq.c     **** 
 24283              		.loc 1 4363 1 view .LVU6311
 24284 004e 05B0     		add	sp, sp, #20
 24285              		.cfi_remember_state
 24286              		.cfi_def_cfa_offset 12
 24287              		@ sp needed
 24288 0050 30BD     		pop	{r4, r5, pc}
 24289              	.L1743:
 24290              		.cfi_restore_state
4356:src/xeq.c     **** 			report_err(ERR_RANGE);
 24291              		.loc 1 4356 28 discriminator 3 view .LVU6312
 24292 0052 E8DA     		bge	.L1745
4356:src/xeq.c     **** 			report_err(ERR_RANGE);
 24293              		.loc 1 4356 43 discriminator 4 view .LVU6313
 24294 0054 8118     		adds	r1, r0, r2
4356:src/xeq.c     **** 			report_err(ERR_RANGE);
 24295              		.loc 1 4356 38 discriminator 4 view .LVU6314
 24296 0056 8B42     		cmp	r3, r1
 24297 0058 E5DA     		bge	.L1745
 24298              	.L1744:
4357:src/xeq.c     **** 		else {
 24299              		.loc 1 4357 4 is_stmt 1 view .LVU6315
 24300              	.LVL1878:
ARM GAS  /tmp/cc7LeJ71.s 			page 631


 24301              	.LBB3353:
 24302              	.LBI3353:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24303              		.loc 1 546 5 view .LVU6316
 24304              	.LBB3354:
 547:src/xeq.c     **** 		Error = e;
 24305              		.loc 1 547 2 view .LVU6317
 547:src/xeq.c     **** 		Error = e;
 24306              		.loc 1 547 12 is_stmt 0 view .LVU6318
 24307 005a 044B     		ldr	r3, .L1751
 547:src/xeq.c     **** 		Error = e;
 24308              		.loc 1 547 5 view .LVU6319
 24309 005c 1A68     		ldr	r2, [r3]
 24310 005e 002A     		cmp	r2, #0
 24311 0060 F5D1     		bne	.L1738
 24312              	.LVL1879:
 24313              	.LBB3355:
 24314              	.LBI3355:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24315              		.loc 1 546 5 is_stmt 1 view .LVU6320
 24316              	.LBB3356:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24317              		.loc 1 548 3 view .LVU6321
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24318              		.loc 1 548 9 is_stmt 0 view .LVU6322
 24319 0062 0822     		movs	r2, #8
 24320 0064 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 24321              		.loc 1 549 3 is_stmt 1 view .LVU6323
 24322              	.LBE3356:
 24323              	.LBE3355:
 24324              	.LBE3354:
 24325              	.LBE3353:
4363:src/xeq.c     **** 
 24326              		.loc 1 4363 1 is_stmt 0 view .LVU6324
 24327 0066 05B0     		add	sp, sp, #20
 24328              		.cfi_def_cfa_offset 12
 24329              		@ sp needed
 24330 0068 30BD     		pop	{r4, r5, pc}
 24331              	.L1752:
 24332 006a 00BF     		.align	2
 24333              	.L1751:
 24334 006c 00000000 		.word	Error
 24335              		.cfi_endproc
 24336              	.LFE231:
 24338              		.section	.text.op_regclr,"ax",%progbits
 24339              		.align	1
 24340              		.p2align 2,,3
 24341              		.global	op_regclr
 24342              		.syntax unified
 24343              		.thumb
 24344              		.thumb_func
 24345              		.fpu fpv4-sp-d16
 24347              	op_regclr:
 24348              	.LVL1880:
 24349              	.LFB232:
4365:src/xeq.c     **** 	int s, n;
ARM GAS  /tmp/cc7LeJ71.s 			page 632


 24350              		.loc 1 4365 31 is_stmt 1 view -0
 24351              		.cfi_startproc
 24352              		@ args = 0, pretend = 0, frame = 8
 24353              		@ frame_needed = 0, uses_anonymous_args = 0
4366:src/xeq.c     **** 
 24354              		.loc 1 4366 2 view .LVU6326
4368:src/xeq.c     **** 		return;
 24355              		.loc 1 4368 2 view .LVU6327
4365:src/xeq.c     **** 	int s, n;
 24356              		.loc 1 4365 31 is_stmt 0 view .LVU6328
 24357 0000 10B5     		push	{r4, lr}
 24358              		.cfi_def_cfa_offset 8
 24359              		.cfi_offset 4, -8
 24360              		.cfi_offset 14, -4
4368:src/xeq.c     **** 		return;
 24361              		.loc 1 4368 6 view .LVU6329
 24362 0002 0023     		movs	r3, #0
4365:src/xeq.c     **** 	int s, n;
 24363              		.loc 1 4365 31 view .LVU6330
 24364 0004 82B0     		sub	sp, sp, #8
 24365              		.cfi_def_cfa_offset 16
4368:src/xeq.c     **** 		return;
 24366              		.loc 1 4368 6 view .LVU6331
 24367 0006 1A46     		mov	r2, r3
 24368 0008 01A9     		add	r1, sp, #4
 24369 000a 6846     		mov	r0, sp
 24370              	.LVL1881:
4368:src/xeq.c     **** 		return;
 24371              		.loc 1 4368 6 view .LVU6332
 24372 000c FFF7FEFF 		bl	reg_decode
 24373              	.LVL1882:
4368:src/xeq.c     **** 		return;
 24374              		.loc 1 4368 5 view .LVU6333
 24375 0010 A8B9     		cbnz	r0, .L1753
4370:src/xeq.c     **** }
 24376              		.loc 1 4370 2 is_stmt 1 view .LVU6334
 24377 0012 0446     		mov	r4, r0
 24378 0014 0098     		ldr	r0, [sp]
 24379 0016 FFF7FEFF 		bl	get_reg_n
 24380              	.LVL1883:
 24381              	.LBB3357:
 24382              	.LBI3357:
1518:src/xeq.c     **** #if 0
 24383              		.loc 1 1518 6 view .LVU6335
 24384              	.LBB3358:
1533:src/xeq.c     **** #endif
 24385              		.loc 1 1533 2 view .LVU6336
 24386              	.LBB3359:
 24387              	.LBI3359:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 24388              		.loc 1 1118 5 view .LVU6337
 24389              	.LBB3360:
1119:src/xeq.c     **** }
 24390              		.loc 1 1119 2 view .LVU6338
1119:src/xeq.c     **** }
 24391              		.loc 1 1119 24 is_stmt 0 view .LVU6339
 24392 001a 0A4B     		ldr	r3, .L1757
ARM GAS  /tmp/cc7LeJ71.s 			page 633


 24393              	.LBE3360:
 24394              	.LBE3359:
1533:src/xeq.c     **** #endif
 24395              		.loc 1 1533 2 view .LVU6340
 24396 001c 019A     		ldr	r2, [sp, #4]
 24397              	.LBB3362:
 24398              	.LBB3361:
1119:src/xeq.c     **** }
 24399              		.loc 1 1119 24 view .LVU6341
 24400 001e 1B68     		ldr	r3, [r3]
 24401 0020 B3F8E817 		ldrh	r1, [r3, #2024]
 24402 0024 44F20103 		movw	r3, #16385
 24403 0028 0B40     		ands	r3, r3, r1
 24404 002a A3F58043 		sub	r3, r3, #16384
 24405 002e B3FA83F3 		clz	r3, r3
 24406 0032 5B09     		lsrs	r3, r3, #5
 24407              	.LBE3361:
 24408              	.LBE3362:
1533:src/xeq.c     **** #endif
 24409              		.loc 1 1533 24 view .LVU6342
 24410 0034 0333     		adds	r3, r3, #3
1533:src/xeq.c     **** #endif
 24411              		.loc 1 1533 2 view .LVU6343
 24412 0036 2146     		mov	r1, r4
 24413 0038 9A40     		lsls	r2, r2, r3
 24414 003a FFF7FEFF 		bl	xset
 24415              	.LVL1884:
 24416              	.L1753:
1533:src/xeq.c     **** #endif
 24417              		.loc 1 1533 2 view .LVU6344
 24418              	.LBE3358:
 24419              	.LBE3357:
4371:src/xeq.c     **** 
 24420              		.loc 1 4371 1 view .LVU6345
 24421 003e 02B0     		add	sp, sp, #8
 24422              		.cfi_def_cfa_offset 8
 24423              		@ sp needed
 24424 0040 10BD     		pop	{r4, pc}
 24425              	.L1758:
 24426 0042 00BF     		.align	2
 24427              	.L1757:
 24428 0044 00000000 		.word	main_ram
 24429              		.cfi_endproc
 24430              	.LFE232:
 24432              		.section	.text.op_regsort,"ax",%progbits
 24433              		.align	1
 24434              		.p2align 2,,3
 24435              		.global	op_regsort
 24436              		.syntax unified
 24437              		.thumb
 24438              		.thumb_func
 24439              		.fpu fpv4-sp-d16
 24441              	op_regsort:
 24442              	.LVL1885:
 24443              	.LFB233:
4373:src/xeq.c     **** 	int s, n;
 24444              		.loc 1 4373 32 is_stmt 1 view -0
ARM GAS  /tmp/cc7LeJ71.s 			page 634


 24445              		.cfi_startproc
 24446              		@ args = 0, pretend = 0, frame = 160
 24447              		@ frame_needed = 0, uses_anonymous_args = 0
4374:src/xeq.c     **** 	decNumber pivot, a;
 24448              		.loc 1 4374 2 view .LVU6347
4375:src/xeq.c     **** 	int beg[10], end[10], i;
 24449              		.loc 1 4375 2 view .LVU6348
4376:src/xeq.c     **** 
 24450              		.loc 1 4376 2 view .LVU6349
4378:src/xeq.c     **** 		return;
 24451              		.loc 1 4378 2 view .LVU6350
4373:src/xeq.c     **** 	int s, n;
 24452              		.loc 1 4373 32 is_stmt 0 view .LVU6351
 24453 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 24454              		.cfi_def_cfa_offset 28
 24455              		.cfi_offset 4, -28
 24456              		.cfi_offset 5, -24
 24457              		.cfi_offset 6, -20
 24458              		.cfi_offset 7, -16
 24459              		.cfi_offset 8, -12
 24460              		.cfi_offset 9, -8
 24461              		.cfi_offset 14, -4
4378:src/xeq.c     **** 		return;
 24462              		.loc 1 4378 6 view .LVU6352
 24463 0004 0023     		movs	r3, #0
4373:src/xeq.c     **** 	int s, n;
 24464              		.loc 1 4373 32 view .LVU6353
 24465 0006 A9B0     		sub	sp, sp, #164
 24466              		.cfi_def_cfa_offset 192
4378:src/xeq.c     **** 		return;
 24467              		.loc 1 4378 6 view .LVU6354
 24468 0008 1A46     		mov	r2, r3
 24469 000a 01A9     		add	r1, sp, #4
 24470 000c 6846     		mov	r0, sp
 24471              	.LVL1886:
4378:src/xeq.c     **** 		return;
 24472              		.loc 1 4378 6 view .LVU6355
 24473 000e FFF7FEFF 		bl	reg_decode
 24474              	.LVL1887:
4378:src/xeq.c     **** 		return;
 24475              		.loc 1 4378 5 view .LVU6356
 24476 0012 20B9     		cbnz	r0, .L1759
4378:src/xeq.c     **** 		return;
 24477              		.loc 1 4378 39 discriminator 1 view .LVU6357
 24478 0014 DDF80480 		ldr	r8, [sp, #4]
4378:src/xeq.c     **** 		return;
 24479              		.loc 1 4378 34 discriminator 1 view .LVU6358
 24480 0018 B8F1010F 		cmp	r8, #1
 24481 001c 02D1     		bne	.L1783
 24482              	.L1759:
4423:src/xeq.c     **** 
 24483              		.loc 1 4423 1 view .LVU6359
 24484 001e 29B0     		add	sp, sp, #164
 24485              		.cfi_remember_state
 24486              		.cfi_def_cfa_offset 28
 24487              		@ sp needed
 24488 0020 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
ARM GAS  /tmp/cc7LeJ71.s 			page 635


 24489              	.L1783:
 24490              		.cfi_restore_state
 24491 0024 0646     		mov	r6, r0
4382:src/xeq.c     **** 	end[0] = n;
 24492              		.loc 1 4382 2 is_stmt 1 view .LVU6360
4382:src/xeq.c     **** 	end[0] = n;
 24493              		.loc 1 4382 9 is_stmt 0 view .LVU6361
 24494 0026 1490     		str	r0, [sp, #80]
4383:src/xeq.c     **** 	i = 0;
 24495              		.loc 1 4383 2 is_stmt 1 view .LVU6362
4383:src/xeq.c     **** 	i = 0;
 24496              		.loc 1 4383 9 is_stmt 0 view .LVU6363
 24497 0028 CDF87880 		str	r8, [sp, #120]
4384:src/xeq.c     **** 	while (i>=0) {
 24498              		.loc 1 4384 2 is_stmt 1 view .LVU6364
 24499              	.LVL1888:
4385:src/xeq.c     **** 		int L = beg[i];
 24500              		.loc 1 4385 2 view .LVU6365
4385:src/xeq.c     **** 		int L = beg[i];
 24501              		.loc 1 4385 8 view .LVU6366
4384:src/xeq.c     **** 	while (i>=0) {
 24502              		.loc 1 4384 4 is_stmt 0 view .LVU6367
 24503 002c 0746     		mov	r7, r0
 24504              	.LVL1889:
 24505              	.L1773:
 24506              	.LBB3363:
4386:src/xeq.c     **** 		int R = end[i] - 1;
 24507              		.loc 1 4386 3 is_stmt 1 view .LVU6368
4387:src/xeq.c     **** 		if (L<R) {
 24508              		.loc 1 4387 3 view .LVU6369
4387:src/xeq.c     **** 		if (L<R) {
 24509              		.loc 1 4387 7 is_stmt 0 view .LVU6370
 24510 002e 08F1FF34 		add	r4, r8, #-1
 24511              	.LVL1890:
4388:src/xeq.c     **** 			const int pvt = s + L;
 24512              		.loc 1 4388 3 is_stmt 1 view .LVU6371
4388:src/xeq.c     **** 			const int pvt = s + L;
 24513              		.loc 1 4388 6 is_stmt 0 view .LVU6372
 24514 0032 B442     		cmp	r4, r6
 24515 0034 0CDC     		bgt	.L1784
 24516              	.LVL1891:
 24517              	.L1762:
4421:src/xeq.c     **** 	}
 24518              		.loc 1 4421 4 is_stmt 1 view .LVU6373
 24519              	.LBE3363:
4385:src/xeq.c     **** 		int L = beg[i];
 24520              		.loc 1 4385 8 is_stmt 0 view .LVU6374
 24521 0036 013F     		subs	r7, r7, #1
 24522              	.LVL1892:
4385:src/xeq.c     **** 		int L = beg[i];
 24523              		.loc 1 4385 8 view .LVU6375
 24524 0038 F1D3     		bcc	.L1759
 24525 003a 28AB     		add	r3, sp, #160
 24526 003c 03EB8703 		add	r3, r3, r7, lsl #2
 24527 0040 53F8288C 		ldr	r8, [r3, #-40]
 24528 0044 53F8506C 		ldr	r6, [r3, #-80]
 24529              	.LVL1893:
ARM GAS  /tmp/cc7LeJ71.s 			page 636


 24530              	.LBB3366:
4386:src/xeq.c     **** 		int R = end[i] - 1;
 24531              		.loc 1 4386 3 is_stmt 1 view .LVU6376
4387:src/xeq.c     **** 		if (L<R) {
 24532              		.loc 1 4387 3 view .LVU6377
4387:src/xeq.c     **** 		if (L<R) {
 24533              		.loc 1 4387 7 is_stmt 0 view .LVU6378
 24534 0048 08F1FF34 		add	r4, r8, #-1
 24535              	.LVL1894:
4388:src/xeq.c     **** 			const int pvt = s + L;
 24536              		.loc 1 4388 3 is_stmt 1 view .LVU6379
4388:src/xeq.c     **** 			const int pvt = s + L;
 24537              		.loc 1 4388 6 is_stmt 0 view .LVU6380
 24538 004c B442     		cmp	r4, r6
 24539 004e F2DD     		ble	.L1762
 24540              	.LVL1895:
 24541              	.L1784:
 24542              	.LBB3364:
4389:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24543              		.loc 1 4389 4 is_stmt 1 view .LVU6381
4390:src/xeq.c     **** 			while (L<R) {
 24544              		.loc 1 4390 4 view .LVU6382
4389:src/xeq.c     **** 			getRegister(&pivot, pvt);
 24545              		.loc 1 4389 14 is_stmt 0 view .LVU6383
 24546 0050 0099     		ldr	r1, [sp]
4390:src/xeq.c     **** 			while (L<R) {
 24547              		.loc 1 4390 4 view .LVU6384
 24548 0052 02A8     		add	r0, sp, #8
 24549 0054 3144     		add	r1, r1, r6
 24550              	.LVL1896:
4390:src/xeq.c     **** 			while (L<R) {
 24551              		.loc 1 4390 4 view .LVU6385
 24552 0056 FFF7FEFF 		bl	getRegister
 24553              	.LVL1897:
4391:src/xeq.c     **** 				while (L<R) {
 24554              		.loc 1 4391 4 is_stmt 1 view .LVU6386
4391:src/xeq.c     **** 				while (L<R) {
 24555              		.loc 1 4391 10 view .LVU6387
4390:src/xeq.c     **** 			while (L<R) {
 24556              		.loc 1 4390 4 is_stmt 0 view .LVU6388
 24557 005a B146     		mov	r9, r6
 24558              	.L1765:
4393:src/xeq.c     **** 					if (dn_lt(&a, &pivot))
 24559              		.loc 1 4393 6 is_stmt 1 view .LVU6389
 24560 005c 0099     		ldr	r1, [sp]
 24561 005e 0BA8     		add	r0, sp, #44
 24562 0060 2144     		add	r1, r1, r4
 24563 0062 FFF7FEFF 		bl	getRegister
 24564              	.LVL1898:
4394:src/xeq.c     **** 						break;
 24565              		.loc 1 4394 6 view .LVU6390
4394:src/xeq.c     **** 						break;
 24566              		.loc 1 4394 10 is_stmt 0 view .LVU6391
 24567 0066 02A9     		add	r1, sp, #8
 24568 0068 0BA8     		add	r0, sp, #44
 24569 006a FFF7FEFF 		bl	dn_lt
 24570              	.LVL1899:
ARM GAS  /tmp/cc7LeJ71.s 			page 637


4396:src/xeq.c     **** 				}
 24571              		.loc 1 4396 6 is_stmt 1 view .LVU6392
4394:src/xeq.c     **** 						break;
 24572              		.loc 1 4394 9 is_stmt 0 view .LVU6393
 24573 006e 00BB     		cbnz	r0, .L1764
4396:src/xeq.c     **** 				}
 24574              		.loc 1 4396 7 view .LVU6394
 24575 0070 013C     		subs	r4, r4, #1
 24576              	.LVL1900:
4392:src/xeq.c     **** 					getRegister(&a, s + R);
 24577              		.loc 1 4392 11 is_stmt 1 view .LVU6395
 24578 0072 4C45     		cmp	r4, r9
 24579 0074 F2DC     		bgt	.L1765
 24580              	.L1766:
 24581              	.LVL1901:
4400:src/xeq.c     **** 					getRegister(&a, s + L);
 24582              		.loc 1 4400 11 is_stmt 0 view .LVU6396
 24583 0076 4D46     		mov	r5, r9
 24584              	.LVL1902:
4391:src/xeq.c     **** 				while (L<R) {
 24585              		.loc 1 4391 10 is_stmt 1 view .LVU6397
 24586              	.L1774:
4409:src/xeq.c     **** 			if (L - beg[i] < end[i] - (L+1)) {
 24587              		.loc 1 4409 4 view .LVU6398
 24588 0078 0098     		ldr	r0, [sp]
 24589 007a 02A9     		add	r1, sp, #8
 24590 007c 2844     		add	r0, r0, r5
 24591 007e FFF7FEFF 		bl	setRegister
 24592              	.LVL1903:
4410:src/xeq.c     **** 				beg[i+1] = beg[i];
 24593              		.loc 1 4410 4 view .LVU6399
4410:src/xeq.c     **** 				beg[i+1] = beg[i];
 24594              		.loc 1 4410 32 is_stmt 0 view .LVU6400
 24595 0082 6B1C     		adds	r3, r5, #1
4410:src/xeq.c     **** 				beg[i+1] = beg[i];
 24596              		.loc 1 4410 28 view .LVU6401
 24597 0084 A8EB0302 		sub	r2, r8, r3
4410:src/xeq.c     **** 				beg[i+1] = beg[i];
 24598              		.loc 1 4410 10 view .LVU6402
 24599 0088 A91B     		subs	r1, r5, r6
4410:src/xeq.c     **** 				beg[i+1] = beg[i];
 24600              		.loc 1 4410 7 view .LVU6403
 24601 008a 9142     		cmp	r1, r2
4411:src/xeq.c     **** 				end[i+1] = L;
 24602              		.loc 1 4411 10 view .LVU6404
 24603 008c 07F10101 		add	r1, r7, #1
4413:src/xeq.c     **** 			} else {
 24604              		.loc 1 4413 12 view .LVU6405
 24605 0090 28AA     		add	r2, sp, #160
 24606 0092 02EB8700 		add	r0, r2, r7, lsl #2
4411:src/xeq.c     **** 				end[i+1] = L;
 24607              		.loc 1 4411 14 view .LVU6406
 24608 0096 02EB8102 		add	r2, r2, r1, lsl #2
 24609 009a 0F46     		mov	r7, r1
 24610              	.LVL1904:
4410:src/xeq.c     **** 				beg[i+1] = beg[i];
 24611              		.loc 1 4410 7 view .LVU6407
ARM GAS  /tmp/cc7LeJ71.s 			page 638


 24612 009c 2DDA     		bge	.L1770
4411:src/xeq.c     **** 				end[i+1] = L;
 24613              		.loc 1 4411 5 is_stmt 1 view .LVU6408
4411:src/xeq.c     **** 				end[i+1] = L;
 24614              		.loc 1 4411 14 is_stmt 0 view .LVU6409
 24615 009e 42F8506C 		str	r6, [r2, #-80]
4412:src/xeq.c     **** 				beg[i] = L+1;
 24616              		.loc 1 4412 5 is_stmt 1 view .LVU6410
4413:src/xeq.c     **** 			} else {
 24617              		.loc 1 4413 12 is_stmt 0 view .LVU6411
 24618 00a2 40F8503C 		str	r3, [r0, #-80]
 24619 00a6 52F8506C 		ldr	r6, [r2, #-80]
4412:src/xeq.c     **** 				beg[i] = L+1;
 24620              		.loc 1 4412 14 view .LVU6412
 24621 00aa 42F8285C 		str	r5, [r2, #-40]
4413:src/xeq.c     **** 			} else {
 24622              		.loc 1 4413 5 is_stmt 1 view .LVU6413
 24623 00ae A846     		mov	r8, r5
 24624 00b0 BDE7     		b	.L1773
 24625              	.LVL1905:
 24626              	.L1764:
4398:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24627              		.loc 1 4398 5 view .LVU6414
4398:src/xeq.c     **** 					copyreg_n(s + L++, s + R);
 24628              		.loc 1 4398 8 is_stmt 0 view .LVU6415
 24629 00b2 A145     		cmp	r9, r4
 24630 00b4 DFDA     		bge	.L1766
4399:src/xeq.c     **** 				while (L<R) {
 24631              		.loc 1 4399 6 is_stmt 1 view .LVU6416
 24632 00b6 0098     		ldr	r0, [sp]
4399:src/xeq.c     **** 				while (L<R) {
 24633              		.loc 1 4399 21 is_stmt 0 view .LVU6417
 24634 00b8 09F10105 		add	r5, r9, #1
 24635              	.LVL1906:
4399:src/xeq.c     **** 				while (L<R) {
 24636              		.loc 1 4399 6 view .LVU6418
 24637 00bc 0119     		adds	r1, r0, r4
 24638 00be 4844     		add	r0, r0, r9
 24639 00c0 FFF7FEFF 		bl	copyreg_n
 24640              	.LVL1907:
4400:src/xeq.c     **** 					getRegister(&a, s + L);
 24641              		.loc 1 4400 11 is_stmt 1 view .LVU6419
 24642 00c4 A542     		cmp	r5, r4
 24643 00c6 03DB     		blt	.L1768
 24644 00c8 21E0     		b	.L1775
 24645              	.L1785:
4404:src/xeq.c     **** 				}
 24646              		.loc 1 4404 7 is_stmt 0 view .LVU6420
 24647 00ca 0135     		adds	r5, r5, #1
 24648              	.LVL1908:
4400:src/xeq.c     **** 					getRegister(&a, s + L);
 24649              		.loc 1 4400 11 is_stmt 1 view .LVU6421
 24650 00cc A542     		cmp	r5, r4
 24651 00ce D3D0     		beq	.L1774
 24652              	.L1768:
4401:src/xeq.c     **** 					if (dn_gt(&a, &pivot))
 24653              		.loc 1 4401 6 view .LVU6422
ARM GAS  /tmp/cc7LeJ71.s 			page 639


 24654 00d0 0099     		ldr	r1, [sp]
 24655 00d2 0BA8     		add	r0, sp, #44
 24656 00d4 2944     		add	r1, r1, r5
 24657 00d6 FFF7FEFF 		bl	getRegister
 24658              	.LVL1909:
4402:src/xeq.c     **** 						break;
 24659              		.loc 1 4402 6 view .LVU6423
4402:src/xeq.c     **** 						break;
 24660              		.loc 1 4402 10 is_stmt 0 view .LVU6424
 24661 00da 0BA9     		add	r1, sp, #44
 24662 00dc 02A8     		add	r0, sp, #8
 24663 00de FFF7FEFF 		bl	dn_lt
 24664              	.LVL1910:
4404:src/xeq.c     **** 				}
 24665              		.loc 1 4404 6 is_stmt 1 view .LVU6425
4402:src/xeq.c     **** 						break;
 24666              		.loc 1 4402 9 is_stmt 0 view .LVU6426
 24667 00e2 0028     		cmp	r0, #0
 24668 00e4 F1D0     		beq	.L1785
4406:src/xeq.c     **** 					copyreg_n(s + R--, s + L);
 24669              		.loc 1 4406 5 is_stmt 1 view .LVU6427
4407:src/xeq.c     **** 			}
 24670              		.loc 1 4407 6 view .LVU6428
 24671 00e6 0098     		ldr	r0, [sp]
 24672 00e8 4119     		adds	r1, r0, r5
 24673 00ea 2044     		add	r0, r0, r4
4407:src/xeq.c     **** 			}
 24674              		.loc 1 4407 21 is_stmt 0 view .LVU6429
 24675 00ec 013C     		subs	r4, r4, #1
 24676              	.LVL1911:
4407:src/xeq.c     **** 			}
 24677              		.loc 1 4407 6 view .LVU6430
 24678 00ee FFF7FEFF 		bl	copyreg_n
 24679              	.LVL1912:
4391:src/xeq.c     **** 				while (L<R) {
 24680              		.loc 1 4391 10 is_stmt 1 view .LVU6431
 24681 00f2 A542     		cmp	r5, r4
 24682 00f4 C0DA     		bge	.L1774
 24683 00f6 A946     		mov	r9, r5
4392:src/xeq.c     **** 					getRegister(&a, s + R);
 24684              		.loc 1 4392 11 view .LVU6432
 24685 00f8 B0E7     		b	.L1765
 24686              	.LVL1913:
 24687              	.L1770:
4415:src/xeq.c     **** 				end[i+1] = end[i];
 24688              		.loc 1 4415 5 view .LVU6433
4416:src/xeq.c     **** 				end[i] = L;
 24689              		.loc 1 4416 14 is_stmt 0 view .LVU6434
 24690 00fa 42F8288C 		str	r8, [r2, #-40]
4417:src/xeq.c     **** 			}
 24691              		.loc 1 4417 12 view .LVU6435
 24692 00fe 40F8285C 		str	r5, [r0, #-40]
 24693 0102 52F8288C 		ldr	r8, [r2, #-40]
4415:src/xeq.c     **** 				end[i+1] = end[i];
 24694              		.loc 1 4415 14 view .LVU6436
 24695 0106 42F8503C 		str	r3, [r2, #-80]
4416:src/xeq.c     **** 				end[i] = L;
ARM GAS  /tmp/cc7LeJ71.s 			page 640


 24696              		.loc 1 4416 5 is_stmt 1 view .LVU6437
4417:src/xeq.c     **** 			}
 24697              		.loc 1 4417 5 view .LVU6438
4419:src/xeq.c     **** 		} else
 24698              		.loc 1 4419 4 view .LVU6439
 24699              	.LVL1914:
4419:src/xeq.c     **** 		} else
 24700              		.loc 1 4419 4 is_stmt 0 view .LVU6440
 24701              	.LBE3364:
 24702              	.LBE3366:
4385:src/xeq.c     **** 		int L = beg[i];
 24703              		.loc 1 4385 8 is_stmt 1 view .LVU6441
 24704              	.LBB3367:
 24705              	.LBB3365:
4417:src/xeq.c     **** 			}
 24706              		.loc 1 4417 12 is_stmt 0 view .LVU6442
 24707 010a 1E46     		mov	r6, r3
 24708 010c 8FE7     		b	.L1773
 24709              	.LVL1915:
 24710              	.L1775:
4400:src/xeq.c     **** 					getRegister(&a, s + L);
 24711              		.loc 1 4400 11 view .LVU6443
 24712 010e A946     		mov	r9, r5
 24713              	.LVL1916:
4400:src/xeq.c     **** 					getRegister(&a, s + L);
 24714              		.loc 1 4400 11 view .LVU6444
 24715 0110 4D46     		mov	r5, r9
 24716              	.LVL1917:
4391:src/xeq.c     **** 				while (L<R) {
 24717              		.loc 1 4391 10 is_stmt 1 view .LVU6445
 24718 0112 B1E7     		b	.L1774
 24719              	.LBE3365:
 24720              	.LBE3367:
 24721              		.cfi_endproc
 24722              	.LFE233:
 24724              		.section	.text.reset_volatile_state,"ax",%progbits
 24725              		.align	1
 24726              		.p2align 2,,3
 24727              		.global	reset_volatile_state
 24728              		.syntax unified
 24729              		.thumb
 24730              		.thumb_func
 24731              		.fpu fpv4-sp-d16
 24733              	reset_volatile_state:
 24734              	.LFB235:
4458:src/xeq.c     **** 	// extern int IntMaxWindow;
 24735              		.loc 1 4458 33 view -0
 24736              		.cfi_startproc
 24737              		@ args = 0, pretend = 0, frame = 0
 24738              		@ frame_needed = 0, uses_anonymous_args = 0
 24739              		@ link register save eliminated.
4461:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24740              		.loc 1 4461 2 view .LVU6447
4461:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24741              		.loc 1 4461 16 is_stmt 0 view .LVU6448
 24742 0000 034B     		ldr	r3, .L1787
 24743 0002 1A7D     		ldrb	r2, [r3, #20]	@ zero_extendqisi2
ARM GAS  /tmp/cc7LeJ71.s 			page 641


4462:src/xeq.c     **** }
 24744              		.loc 1 4462 15 view .LVU6449
 24745 0004 0021     		movs	r1, #0
4461:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 24746              		.loc 1 4461 16 view .LVU6450
 24747 0006 6FF3C502 		bfc	r2, #3, #3
 24748 000a 1A75     		strb	r2, [r3, #20]
4462:src/xeq.c     **** }
 24749              		.loc 1 4462 2 is_stmt 1 view .LVU6451
4462:src/xeq.c     **** }
 24750              		.loc 1 4462 15 is_stmt 0 view .LVU6452
 24751 000c 5974     		strb	r1, [r3, #17]
4463:src/xeq.c     **** 
 24752              		.loc 1 4463 1 view .LVU6453
 24753 000e 7047     		bx	lr
 24754              	.L1788:
 24755              		.align	2
 24756              	.L1787:
 24757 0010 00000000 		.word	StateWhileOn
 24758              		.cfi_endproc
 24759              	.LFE235:
 24761              		.section	.rodata.busy.str1.4,"aMS",%progbits,1
 24762              		.align	2
 24763              	.LC7:
 24764 0000 57616974 		.ascii	"Wait...\000"
 24764      2E2E2E00 
 24765              		.section	.text.busy,"ax",%progbits
 24766              		.align	1
 24767              		.p2align 2,,3
 24768              		.global	busy
 24769              		.syntax unified
 24770              		.thumb
 24771              		.thumb_func
 24772              		.fpu fpv4-sp-d16
 24774              	busy:
 24775              	.LFB236:
4470:src/xeq.c     **** 	/*
 24776              		.loc 1 4470 1 is_stmt 1 view -0
 24777              		.cfi_startproc
 24778              		@ args = 0, pretend = 0, frame = 0
 24779              		@ frame_needed = 0, uses_anonymous_args = 0
 24780              		@ link register save eliminated.
4474:src/xeq.c     **** 
 24781              		.loc 1 4474 12 view .LVU6455
4479:src/xeq.c     **** 
 24782              		.loc 1 4479 17 view .LVU6456
4484:src/xeq.c     **** 		Busy = 1;
 24783              		.loc 1 4484 2 view .LVU6457
4484:src/xeq.c     **** 		Busy = 1;
 24784              		.loc 1 4484 6 is_stmt 0 view .LVU6458
 24785 0000 054A     		ldr	r2, .L1792
4484:src/xeq.c     **** 		Busy = 1;
 24786              		.loc 1 4484 15 view .LVU6459
 24787 0002 064B     		ldr	r3, .L1792+4
4484:src/xeq.c     **** 		Busy = 1;
 24788              		.loc 1 4484 12 view .LVU6460
 24789 0004 1168     		ldr	r1, [r2]
ARM GAS  /tmp/cc7LeJ71.s 			page 642


 24790 0006 1B68     		ldr	r3, [r3]
 24791 0008 1943     		orrs	r1, r1, r3
 24792 000a 00D0     		beq	.L1791
4488:src/xeq.c     **** 
 24793              		.loc 1 4488 1 view .LVU6461
 24794 000c 7047     		bx	lr
 24795              	.L1791:
 24796              	.LBB3370:
 24797              	.LBI3370:
4469:src/xeq.c     **** {
 24798              		.loc 1 4469 6 is_stmt 1 view .LVU6462
 24799              	.LBB3371:
4485:src/xeq.c     **** 		message("Wait...", NULL);
 24800              		.loc 1 4485 3 view .LVU6463
4485:src/xeq.c     **** 		message("Wait...", NULL);
 24801              		.loc 1 4485 8 is_stmt 0 view .LVU6464
 24802 000e 0123     		movs	r3, #1
4486:src/xeq.c     **** 	}
 24803              		.loc 1 4486 3 view .LVU6465
 24804 0010 0348     		ldr	r0, .L1792+8
4485:src/xeq.c     **** 		message("Wait...", NULL);
 24805              		.loc 1 4485 8 view .LVU6466
 24806 0012 1360     		str	r3, [r2]
4486:src/xeq.c     **** 	}
 24807              		.loc 1 4486 3 is_stmt 1 view .LVU6467
 24808 0014 FFF7FEBF 		b	message
 24809              	.LVL1918:
 24810              	.L1793:
 24811              		.align	2
 24812              	.L1792:
 24813 0018 00000000 		.word	Busy
 24814 001c 00000000 		.word	Running
 24815 0020 00000000 		.word	.LC7
 24816              	.LBE3371:
 24817              	.LBE3370:
 24818              		.cfi_endproc
 24819              	.LFE236:
 24821              		.section	.text.intMonadic,"ax",%progbits
 24822              		.align	1
 24823              		.p2align 2,,3
 24824              		.global	intMonadic
 24825              		.syntax unified
 24826              		.thumb
 24827              		.thumb_func
 24828              		.fpu fpv4-sp-d16
 24830              	intMonadic:
 24831              	.LVL1919:
 24832              	.LFB240:
4567:src/xeq.c     **** 	int s;
 24833              		.loc 1 4567 43 view -0
 24834              		.cfi_startproc
 24835              		@ args = 0, pretend = 0, frame = 80
 24836              		@ frame_needed = 0, uses_anonymous_args = 0
4568:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &s);
 24837              		.loc 1 4568 2 view .LVU6469
4569:src/xeq.c     **** 	decNumber rx, r;
 24838              		.loc 1 4569 2 view .LVU6470
ARM GAS  /tmp/cc7LeJ71.s 			page 643


4567:src/xeq.c     **** 	int s;
 24839              		.loc 1 4567 43 is_stmt 0 view .LVU6471
 24840 0000 30B5     		push	{r4, r5, lr}
 24841              		.cfi_def_cfa_offset 12
 24842              		.cfi_offset 4, -12
 24843              		.cfi_offset 5, -8
 24844              		.cfi_offset 14, -4
 24845 0002 95B0     		sub	sp, sp, #84
 24846              		.cfi_def_cfa_offset 96
4569:src/xeq.c     **** 	decNumber rx, r;
 24847              		.loc 1 4569 30 view .LVU6472
 24848 0004 01AA     		add	r2, sp, #4
 24849 0006 FFF7FEFF 		bl	extract_value
 24850              	.LVL1920:
4571:src/xeq.c     **** 
 24851              		.loc 1 4571 19 view .LVU6473
 24852 000a 1E4A     		ldr	r2, .L1809
4573:src/xeq.c     **** 		bad_mode_error();
 24853              		.loc 1 4573 6 view .LVU6474
 24854 000c 1E4B     		ldr	r3, .L1809+4
4571:src/xeq.c     **** 
 24855              		.loc 1 4571 15 view .LVU6475
 24856 000e 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4573:src/xeq.c     **** 		bad_mode_error();
 24857              		.loc 1 4573 6 view .LVU6476
 24858 0010 04EB4404 		add	r4, r4, r4, lsl #1
 24859 0014 53F83440 		ldr	r4, [r3, r4, lsl #3]
 24860              	.LVL1921:
4570:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 24861              		.loc 1 4570 2 is_stmt 1 view .LVU6477
4571:src/xeq.c     **** 
 24862              		.loc 1 4571 2 view .LVU6478
4573:src/xeq.c     **** 		bad_mode_error();
 24863              		.loc 1 4573 2 view .LVU6479
4573:src/xeq.c     **** 		bad_mode_error();
 24864              		.loc 1 4573 5 is_stmt 0 view .LVU6480
 24865 0018 5CB1     		cbz	r4, .L1799
 24866              	.LBB3389:
4576:src/xeq.c     **** #ifndef REALBUILD
 24867              		.loc 1 4576 3 is_stmt 1 view .LVU6481
 24868              	.LVL1922:
4578:src/xeq.c     **** 			bad_mode_error();
 24869              		.loc 1 4578 3 view .LVU6482
 24870              	.LBB3390:
 24871              	.LBI3390:
4504:src/xeq.c     **** {
 24872              		.loc 1 4504 24 view .LVU6483
 24873              	.LBB3391:
4506:src/xeq.c     **** 	if (xp < xrom)
 24874              		.loc 1 4506 2 view .LVU6484
4507:src/xeq.c     **** 		return NULL;
 24875              		.loc 1 4507 5 is_stmt 0 view .LVU6485
 24876 001a 1C4B     		ldr	r3, .L1809+8
4506:src/xeq.c     **** 	if (xp < xrom)
 24877              		.loc 1 4506 59 view .LVU6486
 24878 001c 24F00102 		bic	r2, r4, #1
 24879              	.LVL1923:
ARM GAS  /tmp/cc7LeJ71.s 			page 644


4507:src/xeq.c     **** 		return NULL;
 24880              		.loc 1 4507 2 is_stmt 1 view .LVU6487
4507:src/xeq.c     **** 		return NULL;
 24881              		.loc 1 4507 5 is_stmt 0 view .LVU6488
 24882 0020 9A42     		cmp	r2, r3
 24883 0022 10D3     		bcc	.L1798
4511:src/xeq.c     **** 		return NULL;
 24884              		.loc 1 4511 2 is_stmt 1 view .LVU6489
4511:src/xeq.c     **** 		return NULL;
 24885              		.loc 1 4511 17 is_stmt 0 view .LVU6490
 24886 0024 1A4D     		ldr	r5, .L1809+12
 24887 0026 2D88     		ldrh	r5, [r5]
 24888 0028 03EB4503 		add	r3, r3, r5, lsl #1
4511:src/xeq.c     **** 		return NULL;
 24889              		.loc 1 4511 5 view .LVU6491
 24890 002c 9A42     		cmp	r2, r3
 24891 002e 0AD2     		bcs	.L1798
 24892              	.LVL1924:
4511:src/xeq.c     **** 		return NULL;
 24893              		.loc 1 4511 5 view .LVU6492
 24894              	.LBE3391:
 24895              	.LBE3390:
4578:src/xeq.c     **** 			bad_mode_error();
 24896              		.loc 1 4578 6 view .LVU6493
 24897 0030 4AB1     		cbz	r2, .L1798
 24898              	.LVL1925:
 24899              	.L1799:
4578:src/xeq.c     **** 			bad_mode_error();
 24900              		.loc 1 4578 6 view .LVU6494
 24901              	.LBE3389:
4574:src/xeq.c     **** 	else {
 24902              		.loc 1 4574 3 is_stmt 1 view .LVU6495
 24903              	.LBB3400:
 24904              	.LBI3400:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 24905              		.loc 1 575 6 view .LVU6496
 24906              	.LBE3400:
 576:src/xeq.c     **** }
 24907              		.loc 1 576 2 view .LVU6497
 24908              	.LBB3409:
 24909              	.LBB3401:
 24910              	.LBI3401:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24911              		.loc 1 546 5 view .LVU6498
 24912              	.LBB3402:
 547:src/xeq.c     **** 		Error = e;
 24913              		.loc 1 547 2 view .LVU6499
 547:src/xeq.c     **** 		Error = e;
 24914              		.loc 1 547 12 is_stmt 0 view .LVU6500
 24915 0032 184B     		ldr	r3, .L1809+16
 547:src/xeq.c     **** 		Error = e;
 24916              		.loc 1 547 5 view .LVU6501
 24917 0034 1A68     		ldr	r2, [r3]
 24918 0036 1AB1     		cbz	r2, .L1796
 24919              	.LVL1926:
 24920              	.L1807:
 24921              	.LBB3403:
ARM GAS  /tmp/cc7LeJ71.s 			page 645


 24922              	.LBB3404:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 24923              		.loc 1 549 3 is_stmt 1 view .LVU6502
 24924              	.LBE3404:
 24925              	.LBE3403:
 24926              	.LBE3402:
 24927              	.LBE3401:
 24928              	.LBE3409:
4592:src/xeq.c     **** }
 24929              		.loc 1 4592 9 is_stmt 0 view .LVU6503
 24930 0038 0020     		movs	r0, #0
 24931 003a 0146     		mov	r1, r0
4593:src/xeq.c     **** 
 24932              		.loc 1 4593 1 view .LVU6504
 24933 003c 15B0     		add	sp, sp, #84
 24934              		.cfi_remember_state
 24935              		.cfi_def_cfa_offset 12
 24936              		@ sp needed
 24937 003e 30BD     		pop	{r4, r5, pc}
 24938              	.LVL1927:
 24939              	.L1796:
 24940              		.cfi_restore_state
 24941              	.LBB3410:
 24942              	.LBB3408:
 24943              	.LBB3407:
 24944              	.LBB3406:
 24945              	.LBI3403:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24946              		.loc 1 546 5 is_stmt 1 view .LVU6505
 24947              	.LBB3405:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24948              		.loc 1 548 3 view .LVU6506
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24949              		.loc 1 548 9 is_stmt 0 view .LVU6507
 24950 0040 0D22     		movs	r2, #13
 24951 0042 1A60     		str	r2, [r3]
 24952 0044 F8E7     		b	.L1807
 24953              	.LVL1928:
 24954              	.L1798:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 24955              		.loc 1 548 9 view .LVU6508
 24956              	.LBE3405:
 24957              	.LBE3406:
 24958              	.LBE3407:
 24959              	.LBE3408:
 24960              	.LBE3410:
 24961              	.LBB3411:
4583:src/xeq.c     **** 			if (s)
 24962              		.loc 1 4583 4 is_stmt 1 view .LVU6509
 24963 0046 0246     		mov	r2, r0
 24964 0048 0B46     		mov	r3, r1
 24965 004a 02A8     		add	r0, sp, #8
 24966              	.LVL1929:
4583:src/xeq.c     **** 			if (s)
 24967              		.loc 1 4583 4 is_stmt 0 view .LVU6510
 24968 004c FFF7FEFF 		bl	ullint_to_dn
 24969              	.LVL1930:
ARM GAS  /tmp/cc7LeJ71.s 			page 646


4584:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24970              		.loc 1 4584 4 is_stmt 1 view .LVU6511
4584:src/xeq.c     **** 				dn_minus(&rx, &rx);
 24971              		.loc 1 4584 7 is_stmt 0 view .LVU6512
 24972 0050 019B     		ldr	r3, [sp, #4]
 24973 0052 8BB9     		cbnz	r3, .L1808
 24974              	.L1800:
4586:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24975              		.loc 1 4586 4 is_stmt 1 view .LVU6513
4586:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24976              		.loc 1 4586 16 is_stmt 0 view .LVU6514
 24977 0054 02A9     		add	r1, sp, #8
 24978 0056 0BA8     		add	r0, sp, #44
 24979 0058 A047     		blx	r4
 24980              	.LVL1931:
4586:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 24981              		.loc 1 4586 7 view .LVU6515
 24982 005a 40B9     		cbnz	r0, .L1801
4587:src/xeq.c     **** 			else
 24983              		.loc 1 4587 5 is_stmt 1 view .LVU6516
 24984              	.LVL1932:
 24985              	.LBB3392:
 24986              	.LBI3392:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24987              		.loc 1 546 5 view .LVU6517
 24988              	.LBB3393:
 547:src/xeq.c     **** 		Error = e;
 24989              		.loc 1 547 2 view .LVU6518
 547:src/xeq.c     **** 		Error = e;
 24990              		.loc 1 547 12 is_stmt 0 view .LVU6519
 24991 005c 0D4B     		ldr	r3, .L1809+16
 547:src/xeq.c     **** 		Error = e;
 24992              		.loc 1 547 5 view .LVU6520
 24993 005e 1A68     		ldr	r2, [r3]
 24994 0060 002A     		cmp	r2, #0
 24995 0062 E9D1     		bne	.L1807
 24996              	.LVL1933:
 24997              	.LBB3394:
 24998              	.LBI3394:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 24999              		.loc 1 546 5 is_stmt 1 view .LVU6521
 25000              	.LBB3395:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25001              		.loc 1 548 3 view .LVU6522
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25002              		.loc 1 548 9 is_stmt 0 view .LVU6523
 25003 0064 0122     		movs	r2, #1
 25004              	.LBE3395:
 25005              	.LBE3394:
 25006              	.LBE3393:
 25007              	.LBE3392:
 25008              	.LBE3411:
4592:src/xeq.c     **** }
 25009              		.loc 1 4592 9 view .LVU6524
 25010 0066 0146     		mov	r1, r0
 25011              	.LBB3412:
 25012              	.LBB3399:
ARM GAS  /tmp/cc7LeJ71.s 			page 647


 25013              	.LBB3398:
 25014              	.LBB3397:
 25015              	.LBB3396:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25016              		.loc 1 548 9 view .LVU6525
 25017 0068 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25018              		.loc 1 549 3 is_stmt 1 view .LVU6526
 25019              	.LBE3396:
 25020              	.LBE3397:
 25021              	.LBE3398:
 25022              	.LBE3399:
 25023              	.LBE3412:
4593:src/xeq.c     **** 
 25024              		.loc 1 4593 1 is_stmt 0 view .LVU6527
 25025 006a 15B0     		add	sp, sp, #84
 25026              		.cfi_remember_state
 25027              		.cfi_def_cfa_offset 12
 25028              		@ sp needed
 25029 006c 30BD     		pop	{r4, r5, pc}
 25030              	.LVL1934:
 25031              	.L1801:
 25032              		.cfi_restore_state
 25033              	.LBB3413:
4589:src/xeq.c     **** 		}
 25034              		.loc 1 4589 5 is_stmt 1 view .LVU6528
4589:src/xeq.c     **** 		}
 25035              		.loc 1 4589 12 is_stmt 0 view .LVU6529
 25036 006e 0BA8     		add	r0, sp, #44
 25037 0070 FFF7FEFF 		bl	intResult
 25038              	.LVL1935:
 25039              	.LBE3413:
4593:src/xeq.c     **** 
 25040              		.loc 1 4593 1 view .LVU6530
 25041 0074 15B0     		add	sp, sp, #84
 25042              		.cfi_remember_state
 25043              		.cfi_def_cfa_offset 12
 25044              		@ sp needed
 25045 0076 30BD     		pop	{r4, r5, pc}
 25046              	.LVL1936:
 25047              	.L1808:
 25048              		.cfi_restore_state
 25049              	.LBB3414:
4585:src/xeq.c     **** 			if (NULL == fp(&r, &rx))
 25050              		.loc 1 4585 5 is_stmt 1 view .LVU6531
 25051 0078 02A9     		add	r1, sp, #8
 25052 007a 0846     		mov	r0, r1
 25053 007c FFF7FEFF 		bl	dn_minus
 25054              	.LVL1937:
 25055 0080 E8E7     		b	.L1800
 25056              	.L1810:
 25057 0082 00BF     		.align	2
 25058              	.L1809:
 25059 0084 00000000 		.word	XeqOpCode
 25060 0088 00000000 		.word	monfuncs
 25061 008c 00000000 		.word	xrom
 25062 0090 00000000 		.word	xrom_size
ARM GAS  /tmp/cc7LeJ71.s 			page 648


 25063 0094 00000000 		.word	Error
 25064              	.LBE3414:
 25065              		.cfi_endproc
 25066              	.LFE240:
 25068              		.section	.text.intDyadic,"ax",%progbits
 25069              		.align	1
 25070              		.p2align 2,,3
 25071              		.global	intDyadic
 25072              		.syntax unified
 25073              		.thumb
 25074              		.thumb_func
 25075              		.fpu fpv4-sp-d16
 25077              	intDyadic:
 25078              	.LVL1938:
 25079              	.LFB241:
4598:src/xeq.c     **** 	int sx, sy;
 25080              		.loc 1 4598 59 view -0
 25081              		.cfi_startproc
 25082              		@ args = 0, pretend = 0, frame = 120
 25083              		@ frame_needed = 0, uses_anonymous_args = 0
4599:src/xeq.c     **** 	unsigned long long int vx = extract_value(x, &sx);
 25084              		.loc 1 4599 2 view .LVU6533
4600:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25085              		.loc 1 4600 2 view .LVU6534
4598:src/xeq.c     **** 	int sx, sy;
 25086              		.loc 1 4598 59 is_stmt 0 view .LVU6535
 25087 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25088              		.cfi_def_cfa_offset 24
 25089              		.cfi_offset 4, -24
 25090              		.cfi_offset 5, -20
 25091              		.cfi_offset 6, -16
 25092              		.cfi_offset 7, -12
 25093              		.cfi_offset 8, -8
 25094              		.cfi_offset 14, -4
 25095 0004 9EB0     		sub	sp, sp, #120
 25096              		.cfi_def_cfa_offset 144
4598:src/xeq.c     **** 	int sx, sy;
 25097              		.loc 1 4598 59 view .LVU6536
 25098 0006 0546     		mov	r5, r0
 25099 0008 0C46     		mov	r4, r1
4600:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25100              		.loc 1 4600 30 view .LVU6537
 25101 000a 1046     		mov	r0, r2
 25102              	.LVL1939:
4600:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25103              		.loc 1 4600 30 view .LVU6538
 25104 000c 1946     		mov	r1, r3
 25105 000e 01AA     		add	r2, sp, #4
 25106              	.LVL1940:
4600:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25107              		.loc 1 4600 30 view .LVU6539
 25108 0010 FFF7FEFF 		bl	extract_value
 25109              	.LVL1941:
4601:src/xeq.c     **** 	decNumber rx, ry, r;
 25110              		.loc 1 4601 30 view .LVU6540
 25111 0014 02AA     		add	r2, sp, #8
4600:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
ARM GAS  /tmp/cc7LeJ71.s 			page 649


 25112              		.loc 1 4600 30 view .LVU6541
 25113 0016 0B46     		mov	r3, r1
 25114 0018 0646     		mov	r6, r0
4601:src/xeq.c     **** 	decNumber rx, ry, r;
 25115              		.loc 1 4601 30 view .LVU6542
 25116 001a 2146     		mov	r1, r4
 25117 001c 2846     		mov	r0, r5
4600:src/xeq.c     **** 	unsigned long long int vy = extract_value(y, &sy);
 25118              		.loc 1 4600 30 view .LVU6543
 25119 001e 1D46     		mov	r5, r3
 25120              	.LVL1942:
4601:src/xeq.c     **** 	decNumber rx, ry, r;
 25121              		.loc 1 4601 2 is_stmt 1 view .LVU6544
4601:src/xeq.c     **** 	decNumber rx, ry, r;
 25122              		.loc 1 4601 30 is_stmt 0 view .LVU6545
 25123 0020 FFF7FEFF 		bl	extract_value
 25124              	.LVL1943:
4603:src/xeq.c     **** 
 25125              		.loc 1 4603 19 view .LVU6546
 25126 0024 264A     		ldr	r2, .L1831
4605:src/xeq.c     **** 		bad_mode_error();
 25127              		.loc 1 4605 6 view .LVU6547
 25128 0026 274B     		ldr	r3, .L1831+4
4603:src/xeq.c     **** 
 25129              		.loc 1 4603 15 view .LVU6548
 25130 0028 1478     		ldrb	r4, [r2]	@ zero_extendqisi2
4605:src/xeq.c     **** 		bad_mode_error();
 25131              		.loc 1 4605 6 view .LVU6549
 25132 002a 04EB4404 		add	r4, r4, r4, lsl #1
 25133 002e 53F83440 		ldr	r4, [r3, r4, lsl #3]
 25134              	.LVL1944:
4602:src/xeq.c     **** 	unsigned int f = argKIND(XeqOpCode);
 25135              		.loc 1 4602 2 is_stmt 1 view .LVU6550
4603:src/xeq.c     **** 
 25136              		.loc 1 4603 2 view .LVU6551
4605:src/xeq.c     **** 		bad_mode_error();
 25137              		.loc 1 4605 2 view .LVU6552
4605:src/xeq.c     **** 		bad_mode_error();
 25138              		.loc 1 4605 5 is_stmt 0 view .LVU6553
 25139 0032 6CB1     		cbz	r4, .L1816
 25140              	.LBB3432:
 25141              	.LBB3433:
 25142              	.LBB3434:
4507:src/xeq.c     **** 		return NULL;
 25143              		.loc 1 4507 5 view .LVU6554
 25144 0034 244B     		ldr	r3, .L1831+8
4506:src/xeq.c     **** 	if (xp < xrom)
 25145              		.loc 1 4506 59 view .LVU6555
 25146 0036 24F00102 		bic	r2, r4, #1
 25147              	.LVL1945:
4507:src/xeq.c     **** 		return NULL;
 25148              		.loc 1 4507 5 view .LVU6556
 25149 003a 9A42     		cmp	r2, r3
 25150 003c 0746     		mov	r7, r0
 25151 003e 8846     		mov	r8, r1
 25152              	.LBE3434:
 25153              	.LBE3433:
ARM GAS  /tmp/cc7LeJ71.s 			page 650


4608:src/xeq.c     **** 
 25154              		.loc 1 4608 3 is_stmt 1 view .LVU6557
 25155              	.LVL1946:
4611:src/xeq.c     **** 			bad_mode_error();
 25156              		.loc 1 4611 3 view .LVU6558
 25157              	.LBB3436:
 25158              	.LBI3433:
4504:src/xeq.c     **** {
 25159              		.loc 1 4504 24 view .LVU6559
 25160              	.LBB3435:
4506:src/xeq.c     **** 	if (xp < xrom)
 25161              		.loc 1 4506 2 view .LVU6560
4507:src/xeq.c     **** 		return NULL;
 25162              		.loc 1 4507 2 view .LVU6561
4507:src/xeq.c     **** 		return NULL;
 25163              		.loc 1 4507 5 is_stmt 0 view .LVU6562
 25164 0040 11D3     		bcc	.L1815
4511:src/xeq.c     **** 		return NULL;
 25165              		.loc 1 4511 2 is_stmt 1 view .LVU6563
4511:src/xeq.c     **** 		return NULL;
 25166              		.loc 1 4511 17 is_stmt 0 view .LVU6564
 25167 0042 2249     		ldr	r1, .L1831+12
 25168              	.LVL1947:
4511:src/xeq.c     **** 		return NULL;
 25169              		.loc 1 4511 17 view .LVU6565
 25170 0044 0988     		ldrh	r1, [r1]
 25171 0046 03EB4103 		add	r3, r3, r1, lsl #1
4511:src/xeq.c     **** 		return NULL;
 25172              		.loc 1 4511 5 view .LVU6566
 25173 004a 9A42     		cmp	r2, r3
 25174 004c 0BD2     		bcs	.L1815
 25175              	.LVL1948:
4511:src/xeq.c     **** 		return NULL;
 25176              		.loc 1 4511 5 view .LVU6567
 25177              	.LBE3435:
 25178              	.LBE3436:
4611:src/xeq.c     **** 			bad_mode_error();
 25179              		.loc 1 4611 6 view .LVU6568
 25180 004e 52B1     		cbz	r2, .L1815
 25181              	.LVL1949:
 25182              	.L1816:
4611:src/xeq.c     **** 			bad_mode_error();
 25183              		.loc 1 4611 6 view .LVU6569
 25184              	.LBE3432:
4606:src/xeq.c     **** 	else {
 25185              		.loc 1 4606 3 is_stmt 1 view .LVU6570
 25186              	.LBB3445:
 25187              	.LBI3445:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 25188              		.loc 1 575 6 view .LVU6571
 25189              	.LBE3445:
 576:src/xeq.c     **** }
 25190              		.loc 1 576 2 view .LVU6572
 25191              	.LBB3454:
 25192              	.LBB3446:
 25193              	.LBI3446:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/cc7LeJ71.s 			page 651


 25194              		.loc 1 546 5 view .LVU6573
 25195              	.LBB3447:
 547:src/xeq.c     **** 		Error = e;
 25196              		.loc 1 547 2 view .LVU6574
 547:src/xeq.c     **** 		Error = e;
 25197              		.loc 1 547 12 is_stmt 0 view .LVU6575
 25198 0050 1F4B     		ldr	r3, .L1831+16
 547:src/xeq.c     **** 		Error = e;
 25199              		.loc 1 547 5 view .LVU6576
 25200 0052 1A68     		ldr	r2, [r3]
 25201 0054 22B1     		cbz	r2, .L1813
 25202              	.LVL1950:
 25203              	.L1828:
 25204              	.LBB3448:
 25205              	.LBB3449:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25206              		.loc 1 549 3 is_stmt 1 view .LVU6577
 25207              	.LBE3449:
 25208              	.LBE3448:
 25209              	.LBE3447:
 25210              	.LBE3446:
 25211              	.LBE3454:
4625:src/xeq.c     **** }
 25212              		.loc 1 4625 9 is_stmt 0 view .LVU6578
 25213 0056 0020     		movs	r0, #0
 25214 0058 0146     		mov	r1, r0
4626:src/xeq.c     **** 
 25215              		.loc 1 4626 1 view .LVU6579
 25216 005a 1EB0     		add	sp, sp, #120
 25217              		.cfi_remember_state
 25218              		.cfi_def_cfa_offset 24
 25219              		@ sp needed
 25220 005c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25221              	.LVL1951:
 25222              	.L1813:
 25223              		.cfi_restore_state
 25224              	.LBB3455:
 25225              	.LBB3453:
 25226              	.LBB3452:
 25227              	.LBB3451:
 25228              	.LBI3448:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25229              		.loc 1 546 5 is_stmt 1 view .LVU6580
 25230              	.LBB3450:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25231              		.loc 1 548 3 view .LVU6581
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25232              		.loc 1 548 9 is_stmt 0 view .LVU6582
 25233 0060 0D22     		movs	r2, #13
 25234 0062 1A60     		str	r2, [r3]
 25235 0064 F7E7     		b	.L1828
 25236              	.LVL1952:
 25237              	.L1815:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25238              		.loc 1 548 9 view .LVU6583
 25239              	.LBE3450:
 25240              	.LBE3451:
ARM GAS  /tmp/cc7LeJ71.s 			page 652


 25241              	.LBE3452:
 25242              	.LBE3453:
 25243              	.LBE3455:
 25244              	.LBB3456:
4616:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25245              		.loc 1 4616 4 is_stmt 1 view .LVU6584
 25246 0066 2B46     		mov	r3, r5
 25247 0068 3246     		mov	r2, r6
 25248 006a 03A8     		add	r0, sp, #12
 25249              	.LVL1953:
4616:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25250              		.loc 1 4616 4 is_stmt 0 view .LVU6585
 25251 006c FFF7FEFF 		bl	ullint_to_dn
 25252              	.LVL1954:
4616:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25253              		.loc 1 4616 27 is_stmt 1 view .LVU6586
4616:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25254              		.loc 1 4616 30 is_stmt 0 view .LVU6587
 25255 0070 019B     		ldr	r3, [sp, #4]
 25256 0072 03BB     		cbnz	r3, .L1829
 25257              	.L1817:
4617:src/xeq.c     **** 
 25258              		.loc 1 4617 4 is_stmt 1 view .LVU6588
 25259 0074 4346     		mov	r3, r8
 25260 0076 3A46     		mov	r2, r7
 25261 0078 0CA8     		add	r0, sp, #48
 25262 007a FFF7FEFF 		bl	ullint_to_dn
 25263              	.LVL1955:
4617:src/xeq.c     **** 
 25264              		.loc 1 4617 27 view .LVU6589
4617:src/xeq.c     **** 
 25265              		.loc 1 4617 30 is_stmt 0 view .LVU6590
 25266 007e 029B     		ldr	r3, [sp, #8]
 25267 0080 A3B9     		cbnz	r3, .L1830
 25268              	.L1818:
4619:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25269              		.loc 1 4619 4 is_stmt 1 view .LVU6591
4619:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25270              		.loc 1 4619 16 is_stmt 0 view .LVU6592
 25271 0082 03AA     		add	r2, sp, #12
 25272 0084 0CA9     		add	r1, sp, #48
 25273 0086 15A8     		add	r0, sp, #84
 25274 0088 A047     		blx	r4
 25275              	.LVL1956:
4619:src/xeq.c     **** 				report_err(ERR_DOMAIN);
 25276              		.loc 1 4619 7 view .LVU6593
 25277 008a 48B9     		cbnz	r0, .L1819
4620:src/xeq.c     **** 			else
 25278              		.loc 1 4620 5 is_stmt 1 view .LVU6594
 25279              	.LVL1957:
 25280              	.LBB3437:
 25281              	.LBI3437:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25282              		.loc 1 546 5 view .LVU6595
 25283              	.LBB3438:
 547:src/xeq.c     **** 		Error = e;
 25284              		.loc 1 547 2 view .LVU6596
ARM GAS  /tmp/cc7LeJ71.s 			page 653


 547:src/xeq.c     **** 		Error = e;
 25285              		.loc 1 547 12 is_stmt 0 view .LVU6597
 25286 008c 104B     		ldr	r3, .L1831+16
 547:src/xeq.c     **** 		Error = e;
 25287              		.loc 1 547 5 view .LVU6598
 25288 008e 1A68     		ldr	r2, [r3]
 25289 0090 002A     		cmp	r2, #0
 25290 0092 E0D1     		bne	.L1828
 25291              	.LVL1958:
 25292              	.LBB3439:
 25293              	.LBI3439:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25294              		.loc 1 546 5 is_stmt 1 view .LVU6599
 25295              	.LBB3440:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25296              		.loc 1 548 3 view .LVU6600
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25297              		.loc 1 548 9 is_stmt 0 view .LVU6601
 25298 0094 0122     		movs	r2, #1
 25299              	.LBE3440:
 25300              	.LBE3439:
 25301              	.LBE3438:
 25302              	.LBE3437:
 25303              	.LBE3456:
4625:src/xeq.c     **** }
 25304              		.loc 1 4625 9 view .LVU6602
 25305 0096 0146     		mov	r1, r0
 25306              	.LBB3457:
 25307              	.LBB3444:
 25308              	.LBB3443:
 25309              	.LBB3442:
 25310              	.LBB3441:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25311              		.loc 1 548 9 view .LVU6603
 25312 0098 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25313              		.loc 1 549 3 is_stmt 1 view .LVU6604
 25314              	.LBE3441:
 25315              	.LBE3442:
 25316              	.LBE3443:
 25317              	.LBE3444:
 25318              	.LBE3457:
4626:src/xeq.c     **** 
 25319              		.loc 1 4626 1 is_stmt 0 view .LVU6605
 25320 009a 1EB0     		add	sp, sp, #120
 25321              		.cfi_remember_state
 25322              		.cfi_def_cfa_offset 24
 25323              		@ sp needed
 25324 009c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25325              	.LVL1959:
 25326              	.L1819:
 25327              		.cfi_restore_state
 25328              	.LBB3458:
4622:src/xeq.c     **** 		}
 25329              		.loc 1 4622 5 is_stmt 1 view .LVU6606
4622:src/xeq.c     **** 		}
 25330              		.loc 1 4622 12 is_stmt 0 view .LVU6607
ARM GAS  /tmp/cc7LeJ71.s 			page 654


 25331 00a0 15A8     		add	r0, sp, #84
 25332 00a2 FFF7FEFF 		bl	intResult
 25333              	.LVL1960:
 25334              	.LBE3458:
4626:src/xeq.c     **** 
 25335              		.loc 1 4626 1 view .LVU6608
 25336 00a6 1EB0     		add	sp, sp, #120
 25337              		.cfi_remember_state
 25338              		.cfi_def_cfa_offset 24
 25339              		@ sp needed
 25340 00a8 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25341              	.LVL1961:
 25342              	.L1830:
 25343              		.cfi_restore_state
 25344              	.LBB3459:
4617:src/xeq.c     **** 
 25345              		.loc 1 4617 35 is_stmt 1 discriminator 1 view .LVU6609
 25346 00ac 0CA9     		add	r1, sp, #48
 25347 00ae 0846     		mov	r0, r1
 25348 00b0 FFF7FEFF 		bl	dn_minus
 25349              	.LVL1962:
 25350 00b4 E5E7     		b	.L1818
 25351              	.L1829:
4616:src/xeq.c     **** 			ullint_to_dn(&ry, vy);	if (sy)	dn_minus(&ry, &ry);
 25352              		.loc 1 4616 35 discriminator 1 view .LVU6610
 25353 00b6 03A9     		add	r1, sp, #12
 25354 00b8 0846     		mov	r0, r1
 25355 00ba FFF7FEFF 		bl	dn_minus
 25356              	.LVL1963:
 25357 00be D9E7     		b	.L1817
 25358              	.L1832:
 25359              		.align	2
 25360              	.L1831:
 25361 00c0 00000000 		.word	XeqOpCode
 25362 00c4 00000000 		.word	dyfuncs
 25363 00c8 00000000 		.word	xrom
 25364 00cc 00000000 		.word	xrom_size
 25365 00d0 00000000 		.word	Error
 25366              	.LBE3459:
 25367              		.cfi_endproc
 25368              	.LFE241:
 25370              		.section	.text.xeq_init_contexts,"ax",%progbits
 25371              		.align	1
 25372              		.p2align 2,,3
 25373              		.global	xeq_init_contexts
 25374              		.syntax unified
 25375              		.thumb
 25376              		.thumb_func
 25377              		.fpu fpv4-sp-d16
 25379              	xeq_init_contexts:
 25380              	.LFB258:
5634:src/xeq.c     **** 	/*
 25381              		.loc 1 5634 30 view -0
 25382              		.cfi_startproc
 25383              		@ args = 0, pretend = 0, frame = 0
 25384              		@ frame_needed = 0, uses_anonymous_args = 0
5638:src/xeq.c     **** 	SizeStatRegs = State.have_stats ? sizeof(STAT_DATA) >> 1 : 0;	// in 16 bit words!
ARM GAS  /tmp/cc7LeJ71.s 			page 655


 25385              		.loc 1 5638 2 view .LVU6612
5639:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25386              		.loc 1 5639 2 view .LVU6613
5634:src/xeq.c     **** 	/*
 25387              		.loc 1 5634 30 is_stmt 0 view .LVU6614
 25388 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 25389              		.cfi_def_cfa_offset 24
 25390              		.cfi_offset 3, -24
 25391              		.cfi_offset 4, -20
 25392              		.cfi_offset 5, -16
 25393              		.cfi_offset 6, -12
 25394              		.cfi_offset 7, -8
 25395              		.cfi_offset 14, -4
5639:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25396              		.loc 1 5639 17 view .LVU6615
 25397 0002 1D4B     		ldr	r3, .L1838
5642:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25398              		.loc 1 5642 13 view .LVU6616
 25399 0004 1D4F     		ldr	r7, .L1838+4
5639:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25400              		.loc 1 5639 17 view .LVU6617
 25401 0006 1A68     		ldr	r2, [r3]
5639:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25402              		.loc 1 5639 34 view .LVU6618
 25403 0008 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
5640:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25404              		.loc 1 5640 21 view .LVU6619
 25405 000c 92F8CF17 		ldrb	r1, [r2, #1999]	@ zero_extendqisi2
5642:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25406              		.loc 1 5642 36 view .LVU6620
 25407 0010 5088     		ldrh	r0, [r2, #2]
5644:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25408              		.loc 1 5644 34 view .LVU6621
 25409 0012 B2F9E247 		ldrsh	r4, [r2, #2018]
5639:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25410              		.loc 1 5639 59 view .LVU6622
 25411 0016 13F02003 		ands	r3, r3, #32
 25412 001a 18BF     		it	ne
 25413 001c 4623     		movne	r3, #70
5640:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25414              		.loc 1 5640 19 view .LVU6623
 25415 001e C1F16401 		rsb	r1, r1, #100
5639:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25416              		.loc 1 5639 59 view .LVU6624
 25417 0022 1E46     		mov	r6, r3
5640:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25418              		.loc 1 5640 36 view .LVU6625
 25419 0024 C3EB8103 		rsb	r3, r3, r1, lsl #2
5643:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25420              		.loc 1 5643 31 view .LVU6626
 25421 0028 03F50471 		add	r1, r3, #528
 25422 002c 89B2     		uxth	r1, r1
5644:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25423              		.loc 1 5644 21 view .LVU6627
 25424 002e 0D1A     		subs	r5, r1, r0
5641:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25425              		.loc 1 5641 22 view .LVU6628
ARM GAS  /tmp/cc7LeJ71.s 			page 656


 25426 0030 03F21623 		addw	r3, r3, #534
5642:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25427              		.loc 1 5642 34 view .LVU6629
 25428 0034 181A     		subs	r0, r3, r0
5644:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25429              		.loc 1 5644 32 view .LVU6630
 25430 0036 2544     		add	r5, r5, r4
5641:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25431              		.loc 1 5641 11 view .LVU6631
 25432 0038 141D     		adds	r4, r2, #4
5642:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25433              		.loc 1 5642 13 view .LVU6632
 25434 003a 3860     		str	r0, [r7]
5641:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25435              		.loc 1 5641 22 view .LVU6633
 25436 003c 04EB4303 		add	r3, r4, r3, lsl #1
5639:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25437              		.loc 1 5639 15 view .LVU6634
 25438 0040 0F48     		ldr	r0, .L1838+8
5641:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25439              		.loc 1 5641 9 view .LVU6635
 25440 0042 104C     		ldr	r4, .L1838+12
5644:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25441              		.loc 1 5644 11 view .LVU6636
 25442 0044 104F     		ldr	r7, .L1838+16
5641:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25443              		.loc 1 5641 9 view .LVU6637
 25444 0046 2360     		str	r3, [r4]
5639:src/xeq.c     **** 	s = ((TOPREALREG - NumRegs) << 2) - SizeStatRegs;		// additional register space
 25445              		.loc 1 5639 15 view .LVU6638
 25446 0048 0660     		str	r6, [r0]
5640:src/xeq.c     **** 	RetStk = RetStkBase + s;					// Move RetStk up or down
 25447              		.loc 1 5640 2 is_stmt 1 view .LVU6639
 25448              	.LVL1964:
5641:src/xeq.c     **** 	RetStkSize = s + RET_STACK_SIZE - ProgSize;
 25449              		.loc 1 5641 2 view .LVU6640
5642:src/xeq.c     **** 	ProgMax = s + RET_STACK_SIZE - MINIMUM_RET_STACK_SIZE;
 25450              		.loc 1 5642 2 view .LVU6641
5643:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25451              		.loc 1 5643 2 view .LVU6642
5643:src/xeq.c     **** 	ProgFree = ProgMax - ProgSize + RetStkPtr;
 25452              		.loc 1 5643 10 is_stmt 0 view .LVU6643
 25453 004a 1180     		strh	r1, [r2]	@ movhi
5644:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25454              		.loc 1 5644 2 is_stmt 1 view .LVU6644
5645:src/xeq.c     **** 
 25455              		.loc 1 5645 14 is_stmt 0 view .LVU6645
 25456 004c 6420     		movs	r0, #100
5644:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 25457              		.loc 1 5644 11 view .LVU6646
 25458 004e 3D60     		str	r5, [r7]
5645:src/xeq.c     **** 
 25459              		.loc 1 5645 2 is_stmt 1 view .LVU6647
5645:src/xeq.c     **** 
 25460              		.loc 1 5645 14 is_stmt 0 view .LVU6648
 25461 0050 FFF7FEFF 		bl	get_reg_n
 25462              	.LVL1965:
ARM GAS  /tmp/cc7LeJ71.s 			page 657


5651:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25463              		.loc 1 5651 2 view .LVU6649
 25464 0054 0D4C     		ldr	r4, .L1838+20
5645:src/xeq.c     **** 
 25465              		.loc 1 5645 12 view .LVU6650
 25466 0056 0E4B     		ldr	r3, .L1838+24
5645:src/xeq.c     **** 
 25467              		.loc 1 5645 14 view .LVU6651
 25468 0058 0246     		mov	r2, r0
5651:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25469              		.loc 1 5651 2 view .LVU6652
 25470 005a 0021     		movs	r1, #0
 25471 005c 2046     		mov	r0, r4
5645:src/xeq.c     **** 
 25472              		.loc 1 5645 12 view .LVU6653
 25473 005e 1A60     		str	r2, [r3]
5651:src/xeq.c     **** 	Ctx.digits = DECNUMDIGITS;
 25474              		.loc 1 5651 2 is_stmt 1 view .LVU6654
 25475 0060 FFF7FEFF 		bl	decContextDefault
 25476              	.LVL1966:
5652:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25477              		.loc 1 5652 2 view .LVU6655
5652:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25478              		.loc 1 5652 13 is_stmt 0 view .LVU6656
 25479 0064 2723     		movs	r3, #39
5653:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25480              		.loc 1 5653 10 view .LVU6657
 25481 0066 0B49     		ldr	r1, .L1838+28
5654:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25482              		.loc 1 5654 10 view .LVU6658
 25483 0068 0B4A     		ldr	r2, .L1838+32
5652:src/xeq.c     **** 	Ctx.emax=DEC_MAX_MATH;
 25484              		.loc 1 5652 13 view .LVU6659
 25485 006a 2360     		str	r3, [r4]
5653:src/xeq.c     **** 	Ctx.emin=-DEC_MAX_MATH;
 25486              		.loc 1 5653 2 is_stmt 1 view .LVU6660
5655:src/xeq.c     **** }
 25487              		.loc 1 5655 12 is_stmt 0 view .LVU6661
 25488 006c 0323     		movs	r3, #3
 25489 006e 2373     		strb	r3, [r4, #12]
5654:src/xeq.c     **** 	Ctx.round = DEC_ROUND_HALF_EVEN;
 25490              		.loc 1 5654 10 view .LVU6662
 25491 0070 C4E90112 		strd	r1, r2, [r4, #4]
5655:src/xeq.c     **** }
 25492              		.loc 1 5655 2 is_stmt 1 view .LVU6663
5656:src/xeq.c     **** 
 25493              		.loc 1 5656 1 is_stmt 0 view .LVU6664
 25494 0074 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 25495              	.L1839:
 25496 0076 00BF     		.align	2
 25497              	.L1838:
 25498 0078 00000000 		.word	main_ram
 25499 007c 00000000 		.word	RetStkSize
 25500 0080 00000000 		.word	SizeStatRegs
 25501 0084 00000000 		.word	RetStk
 25502 0088 00000000 		.word	ProgFree
 25503 008c 00000000 		.word	Ctx
ARM GAS  /tmp/cc7LeJ71.s 			page 658


 25504 0090 00000000 		.word	StackBase
 25505 0094 3F420F00 		.word	999999
 25506 0098 C1BDF0FF 		.word	-999999
 25507              		.cfi_endproc
 25508              	.LFE258:
 25510              		.section	.text.not_running,"ax",%progbits
 25511              		.align	1
 25512              		.p2align 2,,3
 25513              		.global	not_running
 25514              		.syntax unified
 25515              		.thumb
 25516              		.thumb_func
 25517              		.fpu fpv4-sp-d16
 25519              	not_running:
 25520              	.LFB259:
5804:src/xeq.c     **** 	if ( Running ) {
 25521              		.loc 1 5804 23 is_stmt 1 view -0
 25522              		.cfi_startproc
 25523              		@ args = 0, pretend = 0, frame = 0
 25524              		@ frame_needed = 0, uses_anonymous_args = 0
 25525              		@ link register save eliminated.
5805:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25526              		.loc 1 5805 2 view .LVU6666
5805:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25527              		.loc 1 5805 7 is_stmt 0 view .LVU6667
 25528 0000 064B     		ldr	r3, .L1845
5805:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 25529              		.loc 1 5805 5 view .LVU6668
 25530 0002 1B68     		ldr	r3, [r3]
 25531 0004 0BB9     		cbnz	r3, .L1844
5809:src/xeq.c     **** }
 25532              		.loc 1 5809 9 view .LVU6669
 25533 0006 0120     		movs	r0, #1
 25534 0008 7047     		bx	lr
 25535              	.L1844:
5806:src/xeq.c     **** 		return 0;
 25536              		.loc 1 5806 3 is_stmt 1 view .LVU6670
 25537              	.LVL1967:
 25538              	.LBB3464:
 25539              	.LBI3464:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25540              		.loc 1 546 5 view .LVU6671
 25541              	.LBB3465:
 547:src/xeq.c     **** 		Error = e;
 25542              		.loc 1 547 2 view .LVU6672
 547:src/xeq.c     **** 		Error = e;
 25543              		.loc 1 547 12 is_stmt 0 view .LVU6673
 25544 000a 054B     		ldr	r3, .L1845+4
 25545 000c 1868     		ldr	r0, [r3]
 547:src/xeq.c     **** 		Error = e;
 25546              		.loc 1 547 5 view .LVU6674
 25547 000e 10B9     		cbnz	r0, .L1843
 25548              	.LVL1968:
 25549              	.LBB3466:
 25550              	.LBI3466:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25551              		.loc 1 546 5 is_stmt 1 view .LVU6675
ARM GAS  /tmp/cc7LeJ71.s 			page 659


 25552              	.LBB3467:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25553              		.loc 1 548 3 view .LVU6676
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25554              		.loc 1 548 9 is_stmt 0 view .LVU6677
 25555 0010 0722     		movs	r2, #7
 25556 0012 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25557              		.loc 1 549 3 is_stmt 1 view .LVU6678
 25558 0014 7047     		bx	lr
 25559              	.LVL1969:
 25560              	.L1843:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25561              		.loc 1 549 3 is_stmt 0 view .LVU6679
 25562              	.LBE3467:
 25563              	.LBE3466:
 25564              	.LBE3465:
 25565              	.LBE3464:
5807:src/xeq.c     **** 	}
 25566              		.loc 1 5807 10 view .LVU6680
 25567 0016 0020     		movs	r0, #0
 25568              	.LVL1970:
5810:src/xeq.c     **** 
 25569              		.loc 1 5810 1 view .LVU6681
 25570 0018 7047     		bx	lr
 25571              	.L1846:
 25572 001a 00BF     		.align	2
 25573              	.L1845:
 25574 001c 00000000 		.word	Running
 25575 0020 00000000 		.word	Error
 25576              		.cfi_endproc
 25577              	.LFE259:
 25579              		.section	.text.set_running_off_sst,"ax",%progbits
 25580              		.align	1
 25581              		.p2align 2,,3
 25582              		.global	set_running_off_sst
 25583              		.syntax unified
 25584              		.thumb
 25585              		.thumb_func
 25586              		.fpu fpv4-sp-d16
 25588              	set_running_off_sst:
 25589              	.LFB260:
5815:src/xeq.c     **** 	Running = 0;
 25590              		.loc 1 5815 28 is_stmt 1 view -0
 25591              		.cfi_startproc
 25592              		@ args = 0, pretend = 0, frame = 0
 25593              		@ frame_needed = 0, uses_anonymous_args = 0
 25594              		@ link register save eliminated.
5816:src/xeq.c     **** }
 25595              		.loc 1 5816 2 view .LVU6683
5816:src/xeq.c     **** }
 25596              		.loc 1 5816 10 is_stmt 0 view .LVU6684
 25597 0000 014B     		ldr	r3, .L1848
 25598 0002 0022     		movs	r2, #0
 25599 0004 1A60     		str	r2, [r3]
5817:src/xeq.c     **** 
 25600              		.loc 1 5817 1 view .LVU6685
ARM GAS  /tmp/cc7LeJ71.s 			page 660


 25601 0006 7047     		bx	lr
 25602              	.L1849:
 25603              		.align	2
 25604              	.L1848:
 25605 0008 00000000 		.word	Running
 25606              		.cfi_endproc
 25607              	.LFE260:
 25609              		.section	.text.set_running_on_sst,"ax",%progbits
 25610              		.align	1
 25611              		.p2align 2,,3
 25612              		.global	set_running_on_sst
 25613              		.syntax unified
 25614              		.thumb
 25615              		.thumb_func
 25616              		.fpu fpv4-sp-d16
 25618              	set_running_on_sst:
 25619              	.LFB261:
5819:src/xeq.c     **** 	Running = 1;
 25620              		.loc 1 5819 27 is_stmt 1 view -0
 25621              		.cfi_startproc
 25622              		@ args = 0, pretend = 0, frame = 0
 25623              		@ frame_needed = 0, uses_anonymous_args = 0
 25624              		@ link register save eliminated.
5820:src/xeq.c     **** }
 25625              		.loc 1 5820 2 view .LVU6687
5820:src/xeq.c     **** }
 25626              		.loc 1 5820 10 is_stmt 0 view .LVU6688
 25627 0000 014B     		ldr	r3, .L1851
 25628 0002 0122     		movs	r2, #1
 25629 0004 1A60     		str	r2, [r3]
5821:src/xeq.c     **** 
 25630              		.loc 1 5821 1 view .LVU6689
 25631 0006 7047     		bx	lr
 25632              	.L1852:
 25633              		.align	2
 25634              	.L1851:
 25635 0008 00000000 		.word	Running
 25636              		.cfi_endproc
 25637              	.LFE261:
 25639              		.section	.text.set_running_off,"ax",%progbits
 25640              		.align	1
 25641              		.p2align 2,,3
 25642              		.global	set_running_off
 25643              		.syntax unified
 25644              		.thumb
 25645              		.thumb_func
 25646              		.fpu fpv4-sp-d16
 25648              	set_running_off:
 25649              	.LFB262:
5823:src/xeq.c     **** 	set_running_off_sst();
 25650              		.loc 1 5823 24 is_stmt 1 view -0
 25651              		.cfi_startproc
 25652              		@ args = 0, pretend = 0, frame = 0
 25653              		@ frame_needed = 0, uses_anonymous_args = 0
 25654              		@ link register save eliminated.
5824:src/xeq.c     **** 	State.entryp = 0;
 25655              		.loc 1 5824 2 view .LVU6691
ARM GAS  /tmp/cc7LeJ71.s 			page 661


 25656              	.LBB3468:
 25657              	.LBI3468:
5815:src/xeq.c     **** 	Running = 0;
 25658              		.loc 1 5815 6 view .LVU6692
 25659              	.LBB3469:
5816:src/xeq.c     **** }
 25660              		.loc 1 5816 2 view .LVU6693
 25661              	.LBE3469:
 25662              	.LBE3468:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 25663              		.loc 1 5825 15 is_stmt 0 view .LVU6694
 25664 0000 064B     		ldr	r3, .L1854
 25665              	.LBB3472:
 25666              	.LBB3470:
5816:src/xeq.c     **** }
 25667              		.loc 1 5816 10 view .LVU6695
 25668 0002 074A     		ldr	r2, .L1854+4
 25669              	.LBE3470:
 25670              	.LBE3472:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 25671              		.loc 1 5825 15 view .LVU6696
 25672 0004 1B68     		ldr	r3, [r3]
 25673              	.LBB3473:
 25674              	.LBB3471:
5816:src/xeq.c     **** }
 25675              		.loc 1 5816 10 view .LVU6697
 25676 0006 0021     		movs	r1, #0
 25677 0008 1160     		str	r1, [r2]
 25678              	.LBE3471:
 25679              	.LBE3473:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 25680              		.loc 1 5825 2 is_stmt 1 view .LVU6698
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 25681              		.loc 1 5825 15 is_stmt 0 view .LVU6699
 25682 000a 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 25683 000e 61F30412 		bfi	r2, r1, #4, #1
 25684 0012 83F8DD27 		strb	r2, [r3, #2013]
 25685              		.loc 1 5826 2 is_stmt 1 view .LVU6700
 25686 0016 8A20     		movs	r0, #138
 25687 0018 FFF7FEBF 		b	dot
 25688              	.LVL1971:
 25689              	.L1855:
 25690              		.align	2
 25691              	.L1854:
 25692 001c 00000000 		.word	main_ram
 25693 0020 00000000 		.word	Running
 25694              		.cfi_endproc
 25695              	.LFE262:
 25697              		.section	.text.set_running_on,"ax",%progbits
 25698              		.align	1
 25699              		.p2align 2,,3
 25700              		.global	set_running_on
 25701              		.syntax unified
 25702              		.thumb
 25703              		.thumb_func
 25704              		.fpu fpv4-sp-d16
 25706              	set_running_on:
ARM GAS  /tmp/cc7LeJ71.s 			page 662


 25707              	.LFB263:
5827:src/xeq.c     **** }
5828:src/xeq.c     **** 
5829:src/xeq.c     **** void set_running_on() {
 25708              		.loc 1 5829 23 view -0
 25709              		.cfi_startproc
 25710              		@ args = 0, pretend = 0, frame = 0
 25711              		@ frame_needed = 0, uses_anonymous_args = 0
5830:src/xeq.c     **** 	update_speed(0);
 25712              		.loc 1 5830 17 view .LVU6702
5831:src/xeq.c     **** 	GoFast = 1;
 25713              		.loc 1 5831 2 view .LVU6703
5829:src/xeq.c     **** 	update_speed(0);
 25714              		.loc 1 5829 23 is_stmt 0 view .LVU6704
 25715 0000 38B5     		push	{r3, r4, r5, lr}
 25716              		.cfi_def_cfa_offset 16
 25717              		.cfi_offset 3, -16
 25718              		.cfi_offset 4, -12
 25719              		.cfi_offset 5, -8
 25720              		.cfi_offset 14, -4
 25721              	.LBB3474:
 25722              	.LBB3475:
 186:src/xeq.c     **** }
 25723              		.loc 1 186 9 view .LVU6705
 25724 0002 0C4B     		ldr	r3, .L1862
 25725              	.LBE3475:
 25726              	.LBE3474:
 25727              		.loc 1 5831 9 view .LVU6706
 25728 0004 0C4D     		ldr	r5, .L1862+4
 25729              	.LBB3479:
 25730              	.LBB3476:
 186:src/xeq.c     **** }
 25731              		.loc 1 186 9 view .LVU6707
 25732 0006 1B68     		ldr	r3, [r3]
 25733              	.LBE3476:
 25734              	.LBE3479:
 25735              	.LBB3480:
 25736              	.LBB3481:
5820:src/xeq.c     **** }
 25737              		.loc 1 5820 10 view .LVU6708
 25738 0008 0C4C     		ldr	r4, .L1862+8
 25739              	.LBE3481:
 25740              	.LBE3480:
 25741              	.LBB3483:
 25742              	.LBB3477:
 186:src/xeq.c     **** }
 25743              		.loc 1 186 9 view .LVU6709
 25744 000a B3F8E037 		ldrh	r3, [r3, #2016]
 25745              	.LBE3477:
 25746              	.LBE3483:
5832:src/xeq.c     **** 	set_running_on_sst();
5833:src/xeq.c     **** 	LastKey = 0;
 25747              		.loc 1 5833 10 view .LVU6710
 25748 000e 0C49     		ldr	r1, .L1862+12
5834:src/xeq.c     **** 	if (!is_xrom())
 25749              		.loc 1 5834 5 view .LVU6711
 25750 0010 9B0B     		lsrs	r3, r3, #14
ARM GAS  /tmp/cc7LeJ71.s 			page 663


5831:src/xeq.c     **** 	set_running_on_sst();
 25751              		.loc 1 5831 9 view .LVU6712
 25752 0012 0122     		movs	r2, #1
5833:src/xeq.c     **** 	if (!is_xrom())
 25753              		.loc 1 5833 10 view .LVU6713
 25754 0014 0020     		movs	r0, #0
 25755              		.loc 1 5834 5 view .LVU6714
 25756 0016 032B     		cmp	r3, #3
5831:src/xeq.c     **** 	set_running_on_sst();
 25757              		.loc 1 5831 9 view .LVU6715
 25758 0018 2A60     		str	r2, [r5]
5832:src/xeq.c     **** 	LastKey = 0;
 25759              		.loc 1 5832 2 is_stmt 1 view .LVU6716
 25760              	.LBB3484:
 25761              	.LBI3480:
5819:src/xeq.c     **** 	Running = 1;
 25762              		.loc 1 5819 6 view .LVU6717
 25763              	.LBB3482:
5820:src/xeq.c     **** }
 25764              		.loc 1 5820 2 view .LVU6718
5820:src/xeq.c     **** }
 25765              		.loc 1 5820 10 is_stmt 0 view .LVU6719
 25766 001a 2260     		str	r2, [r4]
 25767              	.LBE3482:
 25768              	.LBE3484:
5833:src/xeq.c     **** 	if (!is_xrom())
 25769              		.loc 1 5833 2 is_stmt 1 view .LVU6720
5833:src/xeq.c     **** 	if (!is_xrom())
 25770              		.loc 1 5833 10 is_stmt 0 view .LVU6721
 25771 001c C874     		strb	r0, [r1, #19]
 25772              		.loc 1 5834 2 is_stmt 1 view .LVU6722
 25773              	.LBB3485:
 25774              	.LBI3474:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 25775              		.loc 1 185 5 view .LVU6723
 25776              	.LBB3478:
 186:src/xeq.c     **** }
 25777              		.loc 1 186 2 view .LVU6724
 25778              	.LBE3478:
 25779              	.LBE3485:
 25780              		.loc 1 5834 5 is_stmt 0 view .LVU6725
 25781 001e 01D0     		beq	.L1857
5835:src/xeq.c     **** 		error_message(ERR_NONE);
 25782              		.loc 1 5835 3 is_stmt 1 view .LVU6726
 25783 0020 FFF7FEFF 		bl	error_message
 25784              	.LVL1972:
 25785              	.L1857:
5836:src/xeq.c     **** 	dot(BEG, 0);
 25786              		.loc 1 5836 2 view .LVU6727
 25787 0024 0021     		movs	r1, #0
 25788 0026 8820     		movs	r0, #136
 25789 0028 FFF7FEFF 		bl	dot
 25790              	.LVL1973:
5837:src/xeq.c     **** 	finish_display(); // BEG
 25791              		.loc 1 5837 2 view .LVU6728
5838:src/xeq.c     **** }
 25792              		.loc 1 5838 1 is_stmt 0 view .LVU6729
ARM GAS  /tmp/cc7LeJ71.s 			page 664


 25793 002c BDE83840 		pop	{r3, r4, r5, lr}
 25794              		.cfi_restore 14
 25795              		.cfi_restore 5
 25796              		.cfi_restore 4
 25797              		.cfi_restore 3
 25798              		.cfi_def_cfa_offset 0
5837:src/xeq.c     **** 	finish_display(); // BEG
 25799              		.loc 1 5837 2 view .LVU6730
 25800 0030 FFF7FEBF 		b	finish_display
 25801              	.LVL1974:
 25802              	.L1863:
 25803              		.align	2
 25804              	.L1862:
 25805 0034 00000000 		.word	main_ram
 25806 0038 00000000 		.word	GoFast
 25807 003c 00000000 		.word	Running
 25808 0040 00000000 		.word	StateWhileOn
 25809              		.cfi_endproc
 25810              	.LFE263:
 25812              		.section	.text.gsbgto,"ax",%progbits
 25813              		.align	1
 25814              		.p2align 2,,3
 25815              		.syntax unified
 25816              		.thumb
 25817              		.thumb_func
 25818              		.fpu fpv4-sp-d16
 25820              	gsbgto:
 25821              	.LVL1975:
 25822              	.LFB153:
2222:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25823              		.loc 1 2222 66 is_stmt 1 view -0
 25824              		.cfi_startproc
 25825              		@ args = 0, pretend = 0, frame = 0
 25826              		@ frame_needed = 0, uses_anonymous_args = 0
2223:src/xeq.c     **** 	raw_set_pc(pc);
 25827              		.loc 1 2223 2 view .LVU6732
2222:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25828              		.loc 1 2222 66 is_stmt 0 view .LVU6733
 25829 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 25830              		.cfi_def_cfa_offset 24
 25831              		.cfi_offset 4, -24
 25832              		.cfi_offset 5, -20
 25833              		.cfi_offset 6, -16
 25834              		.cfi_offset 7, -12
 25835              		.cfi_offset 8, -8
 25836              		.cfi_offset 14, -4
2223:src/xeq.c     **** 	raw_set_pc(pc);
 25837              		.loc 1 2223 39 view .LVU6734
 25838 0004 234F     		ldr	r7, .L1875
 25839 0006 3B68     		ldr	r3, [r7]
2222:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25840              		.loc 1 2222 66 view .LVU6735
 25841 0008 0446     		mov	r4, r0
 25842 000a 0D46     		mov	r5, r1
 25843              	.LBB3494:
 25844              	.LBB3495:
 283:src/xeq.c     **** 	update_program_bounds(0);
ARM GAS  /tmp/cc7LeJ71.s 			page 665


 25845              		.loc 1 283 11 view .LVU6736
 25846 000c A3F8E007 		strh	r0, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 25847              		.loc 1 284 2 view .LVU6737
 25848 0010 0020     		movs	r0, #0
 25849              	.LVL1976:
 284:src/xeq.c     **** }
 25850              		.loc 1 284 2 view .LVU6738
 25851              	.LBE3495:
 25852              	.LBE3494:
2223:src/xeq.c     **** 	raw_set_pc(pc);
 25853              		.loc 1 2223 27 view .LVU6739
 25854 0012 B3F8EC87 		ldrh	r8, [r3, #2028]
 25855              	.LVL1977:
2224:src/xeq.c     **** 	if (gsb) {
 25856              		.loc 1 2224 2 is_stmt 1 view .LVU6740
 25857              	.LBB3498:
 25858              	.LBI3494:
 282:src/xeq.c     **** 	State.pc = pc;
 25859              		.loc 1 282 13 view .LVU6741
 25860              	.LBB3496:
 283:src/xeq.c     **** 	update_program_bounds(0);
 25861              		.loc 1 283 2 view .LVU6742
 284:src/xeq.c     **** }
 25862              		.loc 1 284 2 view .LVU6743
 25863              	.LBE3496:
 25864              	.LBE3498:
2222:src/xeq.c     **** 	const unsigned short int old_begin = ProgBegin;
 25865              		.loc 1 2222 66 is_stmt 0 view .LVU6744
 25866 0016 1646     		mov	r6, r2
 25867              	.LBB3499:
 25868              	.LBB3497:
 284:src/xeq.c     **** }
 25869              		.loc 1 284 2 view .LVU6745
 25870 0018 FFF7FEFF 		bl	update_program_bounds
 25871              	.LVL1978:
 284:src/xeq.c     **** }
 25872              		.loc 1 284 2 view .LVU6746
 25873              	.LBE3497:
 25874              	.LBE3499:
2225:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25875              		.loc 1 2225 2 is_stmt 1 view .LVU6747
2225:src/xeq.c     **** 		if (!Running && !XromRunning) {
 25876              		.loc 1 2225 5 is_stmt 0 view .LVU6748
 25877 001c D5B1     		cbz	r5, .L1864
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25878              		.loc 1 2226 3 is_stmt 1 view .LVU6749
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25879              		.loc 1 2226 7 is_stmt 0 view .LVU6750
 25880 001e 1E4B     		ldr	r3, .L1875+4
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25881              		.loc 1 2226 19 view .LVU6751
 25882 0020 1E4A     		ldr	r2, .L1875+8
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25883              		.loc 1 2226 16 view .LVU6752
 25884 0022 1B68     		ldr	r3, [r3]
 25885 0024 1268     		ldr	r2, [r2]
ARM GAS  /tmp/cc7LeJ71.s 			page 666


 25886 0026 1343     		orrs	r3, r3, r2
 25887              	.LBB3500:
 25888              	.LBB3501:
1607:src/xeq.c     **** }
 25889              		.loc 1 1607 14 view .LVU6753
 25890 0028 3A68     		ldr	r2, [r7]
 25891              	.LBE3501:
 25892              	.LBE3500:
2226:src/xeq.c     **** 			// XEQ or hot key from keyboard
 25893              		.loc 1 2226 16 view .LVU6754
 25894 002a 1FD0     		beq	.L1867
 25895              	.LVL1979:
 25896              	.L1868:
2234:src/xeq.c     **** 			// Stack is full
 25897              		.loc 1 2234 3 is_stmt 1 view .LVU6755
2234:src/xeq.c     **** 			// Stack is full
 25898              		.loc 1 2234 36 is_stmt 0 view .LVU6756
 25899 002c 1C49     		ldr	r1, .L1875+12
2234:src/xeq.c     **** 			// Stack is full
 25900              		.loc 1 2234 8 view .LVU6757
 25901 002e B2F9E237 		ldrsh	r3, [r2, #2018]
2234:src/xeq.c     **** 			// Stack is full
 25902              		.loc 1 2234 58 view .LVU6758
 25903 0032 91F90110 		ldrsb	r1, [r1, #1]
 25904 0036 0029     		cmp	r1, #0
 25905 0038 A4BF     		itt	ge
 25906 003a 1A49     		ldrge	r1, .L1875+16
 25907 003c 0968     		ldrge	r1, [r1]
2234:src/xeq.c     **** 			// Stack is full
 25908              		.loc 1 2234 7 view .LVU6759
 25909 003e C3F10000 		rsb	r0, r3, #0
2234:src/xeq.c     **** 			// Stack is full
 25910              		.loc 1 2234 58 view .LVU6760
 25911 0042 B8BF     		it	lt
 25912 0044 8821     		movlt	r1, #136
2234:src/xeq.c     **** 			// Stack is full
 25913              		.loc 1 2234 6 view .LVU6761
 25914 0046 8842     		cmp	r0, r1
 25915 0048 06DB     		blt	.L1871
2236:src/xeq.c     **** 			// clrretstk();
 25916              		.loc 1 2236 4 is_stmt 1 view .LVU6762
 25917              	.LVL1980:
 25918              	.LBB3504:
 25919              	.LBI3504:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25920              		.loc 1 546 5 view .LVU6763
 25921              	.LBB3505:
 547:src/xeq.c     **** 		Error = e;
 25922              		.loc 1 547 2 view .LVU6764
 547:src/xeq.c     **** 		Error = e;
 25923              		.loc 1 547 12 is_stmt 0 view .LVU6765
 25924 004a 174B     		ldr	r3, .L1875+20
 547:src/xeq.c     **** 		Error = e;
 25925              		.loc 1 547 5 view .LVU6766
 25926 004c 1A68     		ldr	r2, [r3]
 25927 004e 0AB9     		cbnz	r2, .L1864
 25928              	.LVL1981:
ARM GAS  /tmp/cc7LeJ71.s 			page 667


 25929              	.LBB3506:
 25930              	.LBI3506:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 25931              		.loc 1 546 5 is_stmt 1 view .LVU6767
 25932              	.LBB3507:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25933              		.loc 1 548 3 view .LVU6768
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 25934              		.loc 1 548 9 is_stmt 0 view .LVU6769
 25935 0050 0B22     		movs	r2, #11
 25936 0052 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25937              		.loc 1 549 3 is_stmt 1 view .LVU6770
 25938              	.LVL1982:
 25939              	.L1864:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 25940              		.loc 1 549 3 is_stmt 0 view .LVU6771
 25941              	.LBE3507:
 25942              	.LBE3506:
 25943              	.LBE3505:
 25944              	.LBE3504:
2244:src/xeq.c     **** 
 25945              		.loc 1 2244 1 view .LVU6772
 25946 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25947              	.LVL1983:
 25948              	.L1871:
2241:src/xeq.c     **** 		}
 25949              		.loc 1 2241 4 is_stmt 1 view .LVU6773
2241:src/xeq.c     **** 		}
 25950              		.loc 1 2241 10 is_stmt 0 view .LVU6774
 25951 0058 1449     		ldr	r1, .L1875+24
2241:src/xeq.c     **** 		}
 25952              		.loc 1 2241 11 view .LVU6775
 25953 005a 013B     		subs	r3, r3, #1
 25954 005c 1BB2     		sxth	r3, r3
2241:src/xeq.c     **** 		}
 25955              		.loc 1 2241 10 view .LVU6776
 25956 005e 0968     		ldr	r1, [r1]
2241:src/xeq.c     **** 		}
 25957              		.loc 1 2241 24 view .LVU6777
 25958 0060 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25959 0064 21F81360 		strh	r6, [r1, r3, lsl #1]	@ movhi
2244:src/xeq.c     **** 
 25960              		.loc 1 2244 1 view .LVU6778
 25961 0068 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 25962              	.LVL1984:
 25963              	.L1867:
2228:src/xeq.c     **** 			set_running_on();
 25964              		.loc 1 2228 4 is_stmt 1 view .LVU6779
 25965              	.LBB3508:
 25966              	.LBI3500:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 25967              		.loc 1 1606 6 view .LVU6780
 25968              	.LBB3502:
1607:src/xeq.c     **** }
 25969              		.loc 1 1607 2 view .LVU6781
1607:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 668


 25970              		.loc 1 1607 24 is_stmt 0 view .LVU6782
 25971 006c B2F8DE17 		ldrh	r1, [r2, #2014]
1607:src/xeq.c     **** }
 25972              		.loc 1 1607 12 view .LVU6783
 25973 0070 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 25974              	.LBE3502:
 25975              	.LBE3508:
2229:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 25976              		.loc 1 2229 4 is_stmt 1 view .LVU6784
 25977              	.LBB3509:
 25978              	.LBB3503:
1607:src/xeq.c     **** }
 25979              		.loc 1 1607 24 is_stmt 0 view .LVU6785
 25980 0074 63F34F11 		bfi	r1, r3, #5, #11
 25981 0078 A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
 25982              	.LBE3503:
 25983              	.LBE3509:
2229:src/xeq.c     **** 			if (! isXROM(pc) && ProgBegin != old_begin)
 25984              		.loc 1 2229 4 view .LVU6786
 25985 007c FFF7FEFF 		bl	set_running_on
 25986              	.LVL1985:
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25987              		.loc 1 2230 4 is_stmt 1 view .LVU6787
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25988              		.loc 1 2230 10 is_stmt 0 view .LVU6788
 25989 0080 A30B     		lsrs	r3, r4, #14
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25990              		.loc 1 2230 7 view .LVU6789
 25991 0082 032B     		cmp	r3, #3
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25992              		.loc 1 2230 24 view .LVU6790
 25993 0084 3A68     		ldr	r2, [r7]
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25994              		.loc 1 2230 7 view .LVU6791
 25995 0086 D1D0     		beq	.L1868
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 25996              		.loc 1 2230 21 discriminator 1 view .LVU6792
 25997 0088 B2F8EC37 		ldrh	r3, [r2, #2028]
 25998 008c 4345     		cmp	r3, r8
 25999 008e 18BF     		it	ne
 26000 0090 2646     		movne	r6, r4
 26001              	.LVL1986:
2230:src/xeq.c     **** 				// RTN will bring us to the label if a different program is selected
 26002              		.loc 1 2230 21 discriminator 1 view .LVU6793
 26003 0092 CBE7     		b	.L1868
 26004              	.L1876:
 26005              		.align	2
 26006              	.L1875:
 26007 0094 00000000 		.word	main_ram
 26008 0098 00000000 		.word	Running
 26009 009c 00000000 		.word	XromRunning
 26010 00a0 00000000 		.word	XromParams
 26011 00a4 00000000 		.word	RetStkSize
 26012 00a8 00000000 		.word	Error
 26013 00ac 00000000 		.word	RetStk
 26014              		.cfi_endproc
 26015              	.LFE153:
ARM GAS  /tmp/cc7LeJ71.s 			page 669


 26017              		.section	.text.cmdgtocommon,"ax",%progbits
 26018              		.align	1
 26019              		.p2align 2,,3
 26020              		.global	cmdgtocommon
 26021              		.syntax unified
 26022              		.thumb
 26023              		.thumb_func
 26024              		.fpu fpv4-sp-d16
 26026              	cmdgtocommon:
 26027              	.LVL1987:
 26028              	.LFB156:
2284:src/xeq.c     **** 	if (pc == 0)
 26029              		.loc 1 2284 45 is_stmt 1 view -0
 26030              		.cfi_startproc
 26031              		@ args = 0, pretend = 0, frame = 0
 26032              		@ frame_needed = 0, uses_anonymous_args = 0
 26033              		@ link register save eliminated.
2285:src/xeq.c     **** 		set_running_off();
 26034              		.loc 1 2285 2 view .LVU6795
 26035              	.LBB3516:
 26036              	.LBB3517:
 26037              	.LBB3518:
 26038              	.LBB3519:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 26039              		.loc 1 5825 15 is_stmt 0 view .LVU6796
 26040 0000 0A4A     		ldr	r2, .L1879
 26041              	.LBE3519:
 26042              	.LBE3518:
 26043              	.LBE3517:
 26044              	.LBE3516:
2285:src/xeq.c     **** 		set_running_off();
 26045              		.loc 1 2285 5 view .LVU6797
 26046 0002 0B46     		mov	r3, r1
 26047 0004 59B9     		cbnz	r1, .L1878
 26048              	.LBB3527:
 26049              	.LBI3516:
2284:src/xeq.c     **** 	if (pc == 0)
 26050              		.loc 1 2284 6 is_stmt 1 view .LVU6798
 26051              	.LVL1988:
 26052              	.LBB3526:
2286:src/xeq.c     **** 	else
 26053              		.loc 1 2286 3 view .LVU6799
 26054              	.LBB3525:
 26055              	.LBI3518:
5823:src/xeq.c     **** 	set_running_off_sst();
 26056              		.loc 1 5823 6 view .LVU6800
 26057              	.LBB3524:
5824:src/xeq.c     **** 	State.entryp = 0;
 26058              		.loc 1 5824 2 view .LVU6801
 26059              	.LBB3520:
 26060              	.LBI3520:
5815:src/xeq.c     **** 	Running = 0;
 26061              		.loc 1 5815 6 view .LVU6802
 26062              	.LBB3521:
5816:src/xeq.c     **** }
 26063              		.loc 1 5816 2 view .LVU6803
5816:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 670


 26064              		.loc 1 5816 10 is_stmt 0 view .LVU6804
 26065 0006 0A48     		ldr	r0, .L1879+4
 26066              	.LVL1989:
5816:src/xeq.c     **** }
 26067              		.loc 1 5816 10 view .LVU6805
 26068              	.LBE3521:
 26069              	.LBE3520:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 26070              		.loc 1 5825 15 view .LVU6806
 26071 0008 1268     		ldr	r2, [r2]
 26072              	.LBB3523:
 26073              	.LBB3522:
5816:src/xeq.c     **** }
 26074              		.loc 1 5816 10 view .LVU6807
 26075 000a 0160     		str	r1, [r0]
 26076              	.LBE3522:
 26077              	.LBE3523:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 26078              		.loc 1 5825 2 is_stmt 1 view .LVU6808
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 26079              		.loc 1 5825 15 is_stmt 0 view .LVU6809
 26080 000c 92F8DD07 		ldrb	r0, [r2, #2013]	@ zero_extendqisi2
 26081 0010 61F30410 		bfi	r0, r1, #4, #1
 26082              	.LVL1990:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 26083              		.loc 1 5825 15 view .LVU6810
 26084 0014 82F8DD07 		strb	r0, [r2, #2013]
5826:src/xeq.c     **** }
 26085              		.loc 1 5826 2 is_stmt 1 view .LVU6811
 26086 0018 8A20     		movs	r0, #138
 26087 001a FFF7FEBF 		b	dot
 26088              	.LVL1991:
 26089              	.L1878:
5826:src/xeq.c     **** }
 26090              		.loc 1 5826 2 is_stmt 0 view .LVU6812
 26091              	.LBE3524:
 26092              	.LBE3525:
 26093              	.LBE3526:
 26094              	.LBE3527:
2288:src/xeq.c     **** }
 26095              		.loc 1 2288 3 is_stmt 1 view .LVU6813
2288:src/xeq.c     **** }
 26096              		.loc 1 2288 19 is_stmt 0 view .LVU6814
 26097 001e 1268     		ldr	r2, [r2]
2288:src/xeq.c     **** }
 26098              		.loc 1 2288 3 view .LVU6815
 26099 0020 0146     		mov	r1, r0
 26100              	.LVL1992:
2288:src/xeq.c     **** }
 26101              		.loc 1 2288 3 view .LVU6816
 26102 0022 B2F8E027 		ldrh	r2, [r2, #2016]
 26103 0026 1846     		mov	r0, r3
 26104              	.LVL1993:
2288:src/xeq.c     **** }
 26105              		.loc 1 2288 3 view .LVU6817
 26106 0028 FFF7FEBF 		b	gsbgto
 26107              	.LVL1994:
ARM GAS  /tmp/cc7LeJ71.s 			page 671


 26108              	.L1880:
2288:src/xeq.c     **** }
 26109              		.loc 1 2288 3 view .LVU6818
 26110              		.align	2
 26111              	.L1879:
 26112 002c 00000000 		.word	main_ram
 26113 0030 00000000 		.word	Running
 26114              		.cfi_endproc
 26115              	.LFE156:
 26117              		.section	.text.cmdgto,"ax",%progbits
 26118              		.align	1
 26119              		.p2align 2,,3
 26120              		.global	cmdgto
 26121              		.syntax unified
 26122              		.thumb
 26123              		.thumb_func
 26124              		.fpu fpv4-sp-d16
 26126              	cmdgto:
 26127              	.LVL1995:
 26128              	.LFB162:
2344:src/xeq.c     **** 	unsigned int lbl;
 26129              		.loc 1 2344 45 is_stmt 1 view -0
 26130              		.cfi_startproc
 26131              		@ args = 0, pretend = 0, frame = 0
 26132              		@ frame_needed = 0, uses_anonymous_args = 0
2345:src/xeq.c     **** 	if (is_xrom())
 26133              		.loc 1 2345 2 view .LVU6820
2346:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26134              		.loc 1 2346 2 view .LVU6821
 26135              	.LBB3528:
 26136              	.LBI3528:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 26137              		.loc 1 185 5 view .LVU6822
 26138              	.LBB3529:
 186:src/xeq.c     **** }
 26139              		.loc 1 186 2 view .LVU6823
 186:src/xeq.c     **** }
 26140              		.loc 1 186 9 is_stmt 0 view .LVU6824
 26141 0000 0E4B     		ldr	r3, .L1885
 26142 0002 1B68     		ldr	r3, [r3]
 26143 0004 B3F8E037 		ldrh	r3, [r3, #2016]
 26144              	.LBE3529:
 26145              	.LBE3528:
2346:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
 26146              		.loc 1 2346 5 view .LVU6825
 26147 0008 9A0B     		lsrs	r2, r3, #14
 26148 000a 032A     		cmp	r2, #3
2344:src/xeq.c     **** 	unsigned int lbl;
 26149              		.loc 1 2344 45 view .LVU6826
 26150 000c 10B5     		push	{r4, lr}
 26151              		.cfi_def_cfa_offset 8
 26152              		.cfi_offset 4, -8
 26153              		.cfi_offset 14, -4
2344:src/xeq.c     **** 	unsigned int lbl;
 26154              		.loc 1 2344 45 view .LVU6827
 26155 000e 0C46     		mov	r4, r1
2346:src/xeq.c     **** 		lbl = addrXROM(xrom_targets[arg]) + (1 - XROM_START);
ARM GAS  /tmp/cc7LeJ71.s 			page 672


 26156              		.loc 1 2346 5 view .LVU6828
 26157 0010 0CD1     		bne	.L1882
2347:src/xeq.c     **** 	else
 26158              		.loc 1 2347 3 is_stmt 1 view .LVU6829
2347:src/xeq.c     **** 	else
 26159              		.loc 1 2347 9 is_stmt 0 view .LVU6830
 26160 0012 0B4B     		ldr	r3, .L1885+4
2347:src/xeq.c     **** 	else
 26161              		.loc 1 2347 37 view .LVU6831
 26162 0014 33F81010 		ldrh	r1, [r3, r0, lsl #1]
 26163              	.LVL1996:
2347:src/xeq.c     **** 	else
 26164              		.loc 1 2347 7 view .LVU6832
 26165 0018 41F44041 		orr	r1, r1, #49152
 26166              	.LVL1997:
 26167              	.L1883:
2350:src/xeq.c     **** }
 26168              		.loc 1 2350 2 is_stmt 1 view .LVU6833
 26169 001c B4F14500 		subs	r0, r4, #69
 26170 0020 18BF     		it	ne
 26171 0022 0120     		movne	r0, #1
2351:src/xeq.c     **** 
 26172              		.loc 1 2351 1 is_stmt 0 view .LVU6834
 26173 0024 BDE81040 		pop	{r4, lr}
 26174              		.cfi_remember_state
 26175              		.cfi_restore 14
 26176              		.cfi_restore 4
 26177              		.cfi_def_cfa_offset 0
2350:src/xeq.c     **** }
 26178              		.loc 1 2350 2 view .LVU6835
 26179 0028 FFF7FEBF 		b	cmdgtocommon
 26180              	.LVL1998:
 26181              	.L1882:
 26182              		.cfi_restore_state
2349:src/xeq.c     **** 	cmdgtocommon(op != RARG_GTO, lbl);
 26183              		.loc 1 2349 3 is_stmt 1 view .LVU6836
 26184              	.LBB3530:
 26185              	.LBI3530:
2214:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 26186              		.loc 1 2214 14 view .LVU6837
 26187              	.LBB3531:
2215:src/xeq.c     **** }
 26188              		.loc 1 2215 2 view .LVU6838
2215:src/xeq.c     **** }
 26189              		.loc 1 2215 9 is_stmt 0 view .LVU6839
 26190 002c 40F4C441 		orr	r1, r0, #25088
 26191              	.LVL1999:
2215:src/xeq.c     **** }
 26192              		.loc 1 2215 9 view .LVU6840
 26193 0030 0322     		movs	r2, #3
 26194 0032 1846     		mov	r0, r3
 26195              	.LVL2000:
2215:src/xeq.c     **** }
 26196              		.loc 1 2215 9 view .LVU6841
 26197 0034 FFF7FEFF 		bl	find_opcode_from
 26198              	.LVL2001:
2215:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 673


 26199              		.loc 1 2215 9 view .LVU6842
 26200 0038 0146     		mov	r1, r0
 26201              	.LVL2002:
2215:src/xeq.c     **** }
 26202              		.loc 1 2215 9 view .LVU6843
 26203 003a EFE7     		b	.L1883
 26204              	.L1886:
 26205              		.align	2
 26206              	.L1885:
 26207 003c 00000000 		.word	main_ram
 26208 0040 00000000 		.word	.LANCHOR6
 26209              	.LBE3531:
 26210              	.LBE3530:
 26211              		.cfi_endproc
 26212              	.LFE162:
 26214              		.section	.text.branchtoalpha,"ax",%progbits
 26215              		.align	1
 26216              		.p2align 2,,3
 26217              		.syntax unified
 26218              		.thumb
 26219              		.thumb_func
 26220              		.fpu fpv4-sp-d16
 26222              	branchtoalpha:
 26223              	.LVL2003:
 26224              	.LFB167:
2393:src/xeq.c     **** 	unsigned int op;
 26225              		.loc 1 2393 51 is_stmt 1 view -0
 26226              		.cfi_startproc
 26227              		@ args = 0, pretend = 0, frame = 0
 26228              		@ frame_needed = 0, uses_anonymous_args = 0
2394:src/xeq.c     **** 
 26229              		.loc 1 2394 2 view .LVU6845
2396:src/xeq.c     **** 	op |= buf[0] & 0xff;
 26230              		.loc 1 2396 2 view .LVU6846
2397:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 26231              		.loc 1 2397 2 view .LVU6847
2398:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 26232              		.loc 1 2398 2 view .LVU6848
2399:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26233              		.loc 1 2399 2 view .LVU6849
2400:src/xeq.c     **** }
 26234              		.loc 1 2400 2 view .LVU6850
2393:src/xeq.c     **** 	unsigned int op;
 26235              		.loc 1 2393 51 is_stmt 0 view .LVU6851
 26236 0000 10B5     		push	{r4, lr}
 26237              		.cfi_def_cfa_offset 8
 26238              		.cfi_offset 4, -8
 26239              		.cfi_offset 14, -4
2399:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26240              		.loc 1 2399 16 view .LVU6852
 26241 0002 8B78     		ldrb	r3, [r1, #2]	@ zero_extendqisi2
2398:src/xeq.c     **** 	op |= (buf[2] & 0xff) << 24;
 26242              		.loc 1 2398 16 view .LVU6853
 26243 0004 4C78     		ldrb	r4, [r1, #1]	@ zero_extendqisi2
2397:src/xeq.c     **** 	op |= (buf[1] & 0xff) << 16;
 26244              		.loc 1 2397 15 view .LVU6854
 26245 0006 0A78     		ldrb	r2, [r1]	@ zero_extendqisi2
ARM GAS  /tmp/cc7LeJ71.s 			page 674


2399:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26246              		.loc 1 2399 24 view .LVU6855
 26247 0008 1B06     		lsls	r3, r3, #24
2399:src/xeq.c     **** 	cmdgtocommon(is_gsb, findmultilbl(op, FIND_OP_ERROR));
 26248              		.loc 1 2399 5 view .LVU6856
 26249 000a 43EA0443 		orr	r3, r3, r4, lsl #16
 26250 000e 1343     		orrs	r3, r3, r2
2393:src/xeq.c     **** 	unsigned int op;
 26251              		.loc 1 2393 51 view .LVU6857
 26252 0010 0446     		mov	r4, r0
2400:src/xeq.c     **** }
 26253              		.loc 1 2400 2 view .LVU6858
 26254 0012 0121     		movs	r1, #1
 26255              	.LVL2004:
2400:src/xeq.c     **** }
 26256              		.loc 1 2400 2 view .LVU6859
 26257 0014 43F47040 		orr	r0, r3, #61440
 26258              	.LVL2005:
2400:src/xeq.c     **** }
 26259              		.loc 1 2400 2 view .LVU6860
 26260 0018 FFF7FEFF 		bl	findmultilbl
 26261              	.LVL2006:
2400:src/xeq.c     **** }
 26262              		.loc 1 2400 2 view .LVU6861
 26263 001c 0146     		mov	r1, r0
 26264 001e 2046     		mov	r0, r4
2401:src/xeq.c     **** 
 26265              		.loc 1 2401 1 view .LVU6862
 26266 0020 BDE81040 		pop	{r4, lr}
 26267              		.cfi_restore 14
 26268              		.cfi_restore 4
 26269              		.cfi_def_cfa_offset 0
 26270              	.LVL2007:
2400:src/xeq.c     **** }
 26271              		.loc 1 2400 2 view .LVU6863
 26272 0024 FFF7FEBF 		b	cmdgtocommon
 26273              	.LVL2008:
2400:src/xeq.c     **** }
 26274              		.loc 1 2400 2 view .LVU6864
 26275              		.cfi_endproc
 26276              	.LFE167:
 26278              		.section	.text.cmdalphagto,"ax",%progbits
 26279              		.align	1
 26280              		.p2align 2,,3
 26281              		.global	cmdalphagto
 26282              		.syntax unified
 26283              		.thumb
 26284              		.thumb_func
 26285              		.fpu fpv4-sp-d16
 26287              	cmdalphagto:
 26288              	.LVL2009:
 26289              	.LFB168:
2403:src/xeq.c     **** 	char buf[14];
 26290              		.loc 1 2403 50 is_stmt 1 view -0
 26291              		.cfi_startproc
 26292              		@ args = 0, pretend = 0, frame = 16
 26293              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/cc7LeJ71.s 			page 675


2404:src/xeq.c     **** 
 26294              		.loc 1 2404 2 view .LVU6866
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26295              		.loc 1 2406 2 view .LVU6867
2403:src/xeq.c     **** 	char buf[14];
 26296              		.loc 1 2403 50 is_stmt 0 view .LVU6868
 26297 0000 30B5     		push	{r4, r5, lr}
 26298              		.cfi_def_cfa_offset 12
 26299              		.cfi_offset 4, -12
 26300              		.cfi_offset 5, -8
 26301              		.cfi_offset 14, -4
 26302 0002 85B0     		sub	sp, sp, #20
 26303              		.cfi_def_cfa_offset 32
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26304              		.loc 1 2406 2 view .LVU6869
 26305 0004 0E22     		movs	r2, #14
2403:src/xeq.c     **** 	char buf[14];
 26306              		.loc 1 2403 50 view .LVU6870
 26307 0006 0546     		mov	r5, r0
 26308 0008 0C46     		mov	r4, r1
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26309              		.loc 1 2406 2 view .LVU6871
 26310 000a 6846     		mov	r0, sp
 26311              	.LVL2010:
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26312              		.loc 1 2406 2 view .LVU6872
 26313 000c 0021     		movs	r1, #0
 26314              	.LVL2011:
2406:src/xeq.c     **** 	branchtoalpha(op != RARG_ALPHAGTO, alpha_rcl_s(arg, buf));
 26315              		.loc 1 2406 2 view .LVU6873
 26316 000e FFF7FEFF 		bl	xset
 26317              	.LVL2012:
2407:src/xeq.c     **** }
 26318              		.loc 1 2407 2 is_stmt 1 view .LVU6874
 26319 0012 6946     		mov	r1, sp
 26320 0014 2846     		mov	r0, r5
 26321 0016 FFF7FEFF 		bl	alpha_rcl_s
 26322              	.LVL2013:
 26323 001a 0146     		mov	r1, r0
 26324 001c B4F17000 		subs	r0, r4, #112
 26325 0020 18BF     		it	ne
 26326 0022 0120     		movne	r0, #1
 26327 0024 FFF7FEFF 		bl	branchtoalpha
 26328              	.LVL2014:
2408:src/xeq.c     **** 
 26329              		.loc 1 2408 1 is_stmt 0 view .LVU6875
 26330 0028 05B0     		add	sp, sp, #20
 26331              		.cfi_def_cfa_offset 12
 26332              		@ sp needed
 26333 002a 30BD     		pop	{r4, r5, pc}
2408:src/xeq.c     **** 
 26334              		.loc 1 2408 1 view .LVU6876
 26335              		.cfi_endproc
 26336              	.LFE168:
 26338              		.section	.text.op_gtoalpha,"ax",%progbits
 26339              		.align	1
 26340              		.p2align 2,,3
ARM GAS  /tmp/cc7LeJ71.s 			page 676


 26341              		.global	op_gtoalpha
 26342              		.syntax unified
 26343              		.thumb
 26344              		.thumb_func
 26345              		.fpu fpv4-sp-d16
 26347              	op_gtoalpha:
 26348              	.LVL2015:
 26349              	.LFB170:
2418:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26350              		.loc 1 2418 33 is_stmt 1 view -0
 26351              		.cfi_startproc
 26352              		@ args = 0, pretend = 0, frame = 8
 26353              		@ frame_needed = 0, uses_anonymous_args = 0
2419:src/xeq.c     **** }
 26354              		.loc 1 2419 2 view .LVU6878
2418:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26355              		.loc 1 2418 33 is_stmt 0 view .LVU6879
 26356 0000 10B5     		push	{r4, lr}
 26357              		.cfi_def_cfa_offset 8
 26358              		.cfi_offset 4, -8
 26359              		.cfi_offset 14, -4
 26360              	.LBB3534:
 26361              	.LBB3535:
2413:src/xeq.c     **** 	buf[3] = '\0';
 26362              		.loc 1 2413 13 view .LVU6880
 26363 0002 0B4B     		ldr	r3, .L1893
 26364 0004 1968     		ldr	r1, [r3]
 26365              	.LBE3535:
 26366              	.LBE3534:
2418:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26367              		.loc 1 2418 33 view .LVU6881
 26368 0006 82B0     		sub	sp, sp, #8
 26369              		.cfi_def_cfa_offset 16
2418:src/xeq.c     **** 	do_branchalpha((op == OP_GTOALPHA) ? 0 : 1);
 26370              		.loc 1 2418 33 view .LVU6882
 26371 0008 0446     		mov	r4, r0
 26372              	.LVL2016:
 26373              	.LBB3537:
 26374              	.LBI3534:
2410:src/xeq.c     **** 	char buf[4];
 26375              		.loc 1 2410 13 is_stmt 1 view .LVU6883
 26376              	.LBB3536:
2411:src/xeq.c     **** 
 26377              		.loc 1 2411 2 view .LVU6884
2413:src/xeq.c     **** 	buf[3] = '\0';
 26378              		.loc 1 2413 2 view .LVU6885
 26379 000a 0322     		movs	r2, #3
 26380 000c 01F5F661 		add	r1, r1, #1968
 26381 0010 01A8     		add	r0, sp, #4
 26382              	.LVL2017:
2413:src/xeq.c     **** 	buf[3] = '\0';
 26383              		.loc 1 2413 2 is_stmt 0 view .LVU6886
 26384 0012 FFF7FEFF 		bl	xcopy
 26385              	.LVL2018:
2414:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26386              		.loc 1 2414 2 is_stmt 1 view .LVU6887
2415:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 677


 26387              		.loc 1 2415 2 is_stmt 0 view .LVU6888
 26388 0016 B4F19800 		subs	r0, r4, #152
2414:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26389              		.loc 1 2414 9 view .LVU6889
 26390 001a 4FF00003 		mov	r3, #0
2415:src/xeq.c     **** }
 26391              		.loc 1 2415 2 view .LVU6890
 26392 001e 18BF     		it	ne
 26393 0020 0120     		movne	r0, #1
 26394 0022 01A9     		add	r1, sp, #4
2414:src/xeq.c     **** 	branchtoalpha(is_gsb, buf);
 26395              		.loc 1 2414 9 view .LVU6891
 26396 0024 8DF80730 		strb	r3, [sp, #7]
2415:src/xeq.c     **** }
 26397              		.loc 1 2415 2 is_stmt 1 view .LVU6892
 26398 0028 FFF7FEFF 		bl	branchtoalpha
 26399              	.LVL2019:
2415:src/xeq.c     **** }
 26400              		.loc 1 2415 2 is_stmt 0 view .LVU6893
 26401              	.LBE3536:
 26402              	.LBE3537:
2420:src/xeq.c     **** 
 26403              		.loc 1 2420 1 view .LVU6894
 26404 002c 02B0     		add	sp, sp, #8
 26405              		.cfi_def_cfa_offset 8
 26406              		@ sp needed
 26407 002e 10BD     		pop	{r4, pc}
 26408              	.L1894:
 26409              		.align	2
 26410              	.L1893:
 26411 0030 00000000 		.word	main_ram
 26412              		.cfi_endproc
 26413              	.LFE170:
 26415              		.section	.text.cmdskip,"ax",%progbits
 26416              		.align	1
 26417              		.p2align 2,,3
 26418              		.global	cmdskip
 26419              		.syntax unified
 26420              		.thumb
 26421              		.thumb_func
 26422              		.fpu fpv4-sp-d16
 26424              	cmdskip:
 26425              	.LVL2020:
 26426              	.LFB183:
2594:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26427              		.loc 1 2594 46 is_stmt 1 view -0
 26428              		.cfi_startproc
 26429              		@ args = 0, pretend = 0, frame = 8
 26430              		@ frame_needed = 0, uses_anonymous_args = 0
2595:src/xeq.c     **** 	unsigned int pc;
 26431              		.loc 1 2595 2 view .LVU6896
2594:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26432              		.loc 1 2594 46 is_stmt 0 view .LVU6897
 26433 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 26434              		.cfi_def_cfa_offset 20
 26435              		.cfi_offset 4, -20
 26436              		.cfi_offset 5, -16
ARM GAS  /tmp/cc7LeJ71.s 			page 678


 26437              		.cfi_offset 6, -12
 26438              		.cfi_offset 7, -8
 26439              		.cfi_offset 14, -4
2595:src/xeq.c     **** 	unsigned int pc;
 26440              		.loc 1 2595 30 view .LVU6898
 26441 0002 1D4F     		ldr	r7, .L1919
 26442 0004 3B68     		ldr	r3, [r7]
2598:src/xeq.c     **** 		int sgn;
 26443              		.loc 1 2598 5 view .LVU6899
 26444 0006 9229     		cmp	r1, #146
2595:src/xeq.c     **** 	unsigned int pc;
 26445              		.loc 1 2595 21 view .LVU6900
 26446 0008 B3F8E067 		ldrh	r6, [r3, #2016]
 26447              	.LVL2021:
2596:src/xeq.c     **** 
 26448              		.loc 1 2596 2 is_stmt 1 view .LVU6901
2598:src/xeq.c     **** 		int sgn;
 26449              		.loc 1 2598 2 view .LVU6902
2594:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26450              		.loc 1 2594 46 is_stmt 0 view .LVU6903
 26451 000c 83B0     		sub	sp, sp, #12
 26452              		.cfi_def_cfa_offset 32
2594:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26453              		.loc 1 2594 46 view .LVU6904
 26454 000e 0D46     		mov	r5, r1
2598:src/xeq.c     **** 		int sgn;
 26455              		.loc 1 2598 5 view .LVU6905
 26456 0010 22D0     		beq	.L1916
 26457 0012 0446     		mov	r4, r0
 26458              	.LVL2022:
 26459              	.L1896:
2607:src/xeq.c     **** 		pc = origpc + arg;
 26460              		.loc 1 2607 2 is_stmt 1 view .LVU6906
2607:src/xeq.c     **** 		pc = origpc + arg;
 26461              		.loc 1 2607 6 is_stmt 0 view .LVU6907
 26462 0014 B30B     		lsrs	r3, r6, #14
2607:src/xeq.c     **** 		pc = origpc + arg;
 26463              		.loc 1 2607 5 view .LVU6908
 26464 0016 032B     		cmp	r3, #3
 26465 0018 15D0     		beq	.L1917
 26466              	.LVL2023:
 26467              	.L1901:
2610:src/xeq.c     **** 		if (PcWrapped) {
 26468              		.loc 1 2610 28 is_stmt 1 discriminator 2 view .LVU6909
2610:src/xeq.c     **** 		if (PcWrapped) {
 26469              		.loc 1 2610 9 discriminator 2 view .LVU6910
2610:src/xeq.c     **** 		if (PcWrapped) {
 26470              		.loc 1 2610 9 is_stmt 0 discriminator 2 view .LVU6911
 26471 001a 24B1     		cbz	r4, .L1903
2610:src/xeq.c     **** 		if (PcWrapped) {
 26472              		.loc 1 2610 20 discriminator 1 view .LVU6912
 26473 001c FFF7FEFF 		bl	incpc
 26474              	.LVL2024:
 26475 0020 013C     		subs	r4, r4, #1
 26476              	.LVL2025:
2610:src/xeq.c     **** 		if (PcWrapped) {
 26477              		.loc 1 2610 16 discriminator 1 view .LVU6913
ARM GAS  /tmp/cc7LeJ71.s 			page 679


 26478 0022 0028     		cmp	r0, #0
 26479 0024 F9D0     		beq	.L1901
 26480              	.LVL2026:
 26481              	.L1903:
2611:src/xeq.c     **** 			report_err(ERR_RANGE);
 26482              		.loc 1 2611 3 is_stmt 1 view .LVU6914
2611:src/xeq.c     **** 			report_err(ERR_RANGE);
 26483              		.loc 1 2611 7 is_stmt 0 view .LVU6915
 26484 0026 154B     		ldr	r3, .L1919+4
2611:src/xeq.c     **** 			report_err(ERR_RANGE);
 26485              		.loc 1 2611 6 view .LVU6916
 26486 0028 1B68     		ldr	r3, [r3]
 26487 002a 73B9     		cbnz	r3, .L1918
 26488              	.L1904:
2614:src/xeq.c     **** 	}
 26489              		.loc 1 2614 3 is_stmt 1 view .LVU6917
2614:src/xeq.c     **** 	}
 26490              		.loc 1 2614 8 is_stmt 0 view .LVU6918
 26491 002c 3B68     		ldr	r3, [r7]
2614:src/xeq.c     **** 	}
 26492              		.loc 1 2614 6 view .LVU6919
 26493 002e B3F8E007 		ldrh	r0, [r3, #2016]
 26494              	.LVL2027:
 26495              	.L1902:
2616:src/xeq.c     **** }
 26496              		.loc 1 2616 2 is_stmt 1 view .LVU6920
 26497 0032 A5F13801 		sub	r1, r5, #56
 26498 0036 B1FA81F1 		clz	r1, r1
 26499 003a 3246     		mov	r2, r6
 26500 003c 4909     		lsrs	r1, r1, #5
 26501 003e FFF7FEFF 		bl	gsbgto
 26502              	.LVL2028:
 26503              	.L1895:
2617:src/xeq.c     **** 
 26504              		.loc 1 2617 1 is_stmt 0 view .LVU6921
 26505 0042 03B0     		add	sp, sp, #12
 26506              		.cfi_remember_state
 26507              		.cfi_def_cfa_offset 20
 26508              		@ sp needed
 26509 0044 F0BD     		pop	{r4, r5, r6, r7, pc}
 26510              	.LVL2029:
 26511              	.L1917:
 26512              		.cfi_restore_state
2608:src/xeq.c     **** 	else {
 26513              		.loc 1 2608 3 is_stmt 1 view .LVU6922
2608:src/xeq.c     **** 	else {
 26514              		.loc 1 2608 6 is_stmt 0 view .LVU6923
 26515 0046 A019     		adds	r0, r4, r6
 26516              	.LVL2030:
2608:src/xeq.c     **** 	else {
 26517              		.loc 1 2608 6 view .LVU6924
 26518 0048 F3E7     		b	.L1902
 26519              	.LVL2031:
 26520              	.L1918:
2612:src/xeq.c     **** 		}
 26521              		.loc 1 2612 4 is_stmt 1 view .LVU6925
 26522              	.LBB3547:
ARM GAS  /tmp/cc7LeJ71.s 			page 680


 26523              	.LBI3547:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26524              		.loc 1 546 5 view .LVU6926
 26525              	.LBB3548:
 547:src/xeq.c     **** 		Error = e;
 26526              		.loc 1 547 2 view .LVU6927
 547:src/xeq.c     **** 		Error = e;
 26527              		.loc 1 547 12 is_stmt 0 view .LVU6928
 26528 004a 0D4B     		ldr	r3, .L1919+8
 547:src/xeq.c     **** 		Error = e;
 26529              		.loc 1 547 5 view .LVU6929
 26530 004c 1A68     		ldr	r2, [r3]
 26531 004e 002A     		cmp	r2, #0
 26532 0050 ECD1     		bne	.L1904
 26533              	.LVL2032:
 26534              	.LBB3549:
 26535              	.LBI3549:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26536              		.loc 1 546 5 is_stmt 1 view .LVU6930
 26537              	.LBB3550:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26538              		.loc 1 548 3 view .LVU6931
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26539              		.loc 1 548 9 is_stmt 0 view .LVU6932
 26540 0052 0822     		movs	r2, #8
 26541 0054 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26542              		.loc 1 549 3 is_stmt 1 view .LVU6933
 26543 0056 E9E7     		b	.L1904
 26544              	.LVL2033:
 26545              	.L1916:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26546              		.loc 1 549 3 is_stmt 0 view .LVU6934
 26547              	.LBE3550:
 26548              	.LBE3549:
 26549              	.LBE3548:
 26550              	.LBE3547:
 26551              	.LBB3551:
2599:src/xeq.c     **** 		arg = (int) get_reg_n_int_sgn((int) arg, &sgn);
 26552              		.loc 1 2599 3 is_stmt 1 view .LVU6935
2600:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26553              		.loc 1 2600 3 view .LVU6936
2600:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26554              		.loc 1 2600 15 is_stmt 0 view .LVU6937
 26555 0058 01A9     		add	r1, sp, #4
 26556              	.LVL2034:
2600:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26557              		.loc 1 2600 15 view .LVU6938
 26558 005a FFF7FEFF 		bl	get_reg_n_int_sgn
 26559              	.LVL2035:
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26560              		.loc 1 2601 6 view .LVU6939
 26561 005e 019B     		ldr	r3, [sp, #4]
 26562              	.LVL2036:
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26563              		.loc 1 2601 3 is_stmt 1 view .LVU6940
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
ARM GAS  /tmp/cc7LeJ71.s 			page 681


 26564              		.loc 1 2601 6 is_stmt 0 view .LVU6941
 26565 0060 13B9     		cbnz	r3, .L1897
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26566              		.loc 1 2601 11 discriminator 1 view .LVU6942
 26567 0062 6328     		cmp	r0, #99
2600:src/xeq.c     **** 		if (sgn || arg >= 100) {
 26568              		.loc 1 2600 7 discriminator 1 view .LVU6943
 26569 0064 0446     		mov	r4, r0
2601:src/xeq.c     **** 			report_err(ERR_RANGE);
 26570              		.loc 1 2601 11 discriminator 1 view .LVU6944
 26571 0066 D5D9     		bls	.L1896
 26572              	.L1897:
2602:src/xeq.c     **** 			return;
 26573              		.loc 1 2602 4 is_stmt 1 view .LVU6945
 26574              	.LVL2037:
 26575              	.LBB3552:
 26576              	.LBI3552:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26577              		.loc 1 546 5 view .LVU6946
 26578              	.LBB3553:
 547:src/xeq.c     **** 		Error = e;
 26579              		.loc 1 547 2 view .LVU6947
 547:src/xeq.c     **** 		Error = e;
 26580              		.loc 1 547 12 is_stmt 0 view .LVU6948
 26581 0068 054B     		ldr	r3, .L1919+8
 547:src/xeq.c     **** 		Error = e;
 26582              		.loc 1 547 5 view .LVU6949
 26583 006a 1A68     		ldr	r2, [r3]
 26584 006c 002A     		cmp	r2, #0
 26585 006e E8D1     		bne	.L1895
 26586              	.LVL2038:
 26587              	.LBB3554:
 26588              	.LBI3554:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26589              		.loc 1 546 5 is_stmt 1 view .LVU6950
 26590              	.LBB3555:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26591              		.loc 1 548 3 view .LVU6951
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26592              		.loc 1 548 9 is_stmt 0 view .LVU6952
 26593 0070 0822     		movs	r2, #8
 26594 0072 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26595              		.loc 1 549 3 is_stmt 1 view .LVU6953
 26596              	.LVL2039:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26597              		.loc 1 549 3 is_stmt 0 view .LVU6954
 26598              	.LBE3555:
 26599              	.LBE3554:
 26600              	.LBE3553:
 26601              	.LBE3552:
2603:src/xeq.c     **** 		}
 26602              		.loc 1 2603 4 is_stmt 1 view .LVU6955
 26603 0074 E5E7     		b	.L1895
 26604              	.L1920:
 26605 0076 00BF     		.align	2
 26606              	.L1919:
ARM GAS  /tmp/cc7LeJ71.s 			page 682


 26607 0078 00000000 		.word	main_ram
 26608 007c 00000000 		.word	PcWrapped
 26609 0080 00000000 		.word	Error
 26610              	.LBE3551:
 26611              		.cfi_endproc
 26612              	.LFE183:
 26614              		.section	.text.cmdback,"ax",%progbits
 26615              		.align	1
 26616              		.p2align 2,,3
 26617              		.global	cmdback
 26618              		.syntax unified
 26619              		.thumb
 26620              		.thumb_func
 26621              		.fpu fpv4-sp-d16
 26623              	cmdback:
 26624              	.LVL2040:
 26625              	.LFB184:
2620:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26626              		.loc 1 2620 46 view -0
 26627              		.cfi_startproc
 26628              		@ args = 0, pretend = 0, frame = 0
 26629              		@ frame_needed = 0, uses_anonymous_args = 0
2621:src/xeq.c     **** 	unsigned int pc = origpc;
 26630              		.loc 1 2621 2 view .LVU6957
2620:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26631              		.loc 1 2620 46 is_stmt 0 view .LVU6958
 26632 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 26633              		.cfi_def_cfa_offset 24
 26634              		.cfi_offset 3, -24
 26635              		.cfi_offset 4, -20
 26636              		.cfi_offset 5, -16
 26637              		.cfi_offset 6, -12
 26638              		.cfi_offset 7, -8
 26639              		.cfi_offset 14, -4
2621:src/xeq.c     **** 	unsigned int pc = origpc;
 26640              		.loc 1 2621 30 view .LVU6959
 26641 0002 184B     		ldr	r3, .L1940
 26642 0004 1B68     		ldr	r3, [r3]
2621:src/xeq.c     **** 	unsigned int pc = origpc;
 26643              		.loc 1 2621 21 view .LVU6960
 26644 0006 B3F8E067 		ldrh	r6, [r3, #2016]
 26645              	.LVL2041:
2622:src/xeq.c     **** 
 26646              		.loc 1 2622 2 is_stmt 1 view .LVU6961
2624:src/xeq.c     **** 		pc -= arg + 1;
 26647              		.loc 1 2624 2 view .LVU6962
2624:src/xeq.c     **** 		pc -= arg + 1;
 26648              		.loc 1 2624 6 is_stmt 0 view .LVU6963
 26649 000a B30B     		lsrs	r3, r6, #14
2624:src/xeq.c     **** 		pc -= arg + 1;
 26650              		.loc 1 2624 5 view .LVU6964
 26651 000c 032B     		cmp	r3, #3
2620:src/xeq.c     **** 	const unsigned int origpc = state_pc();
 26652              		.loc 1 2620 46 view .LVU6965
 26653 000e 0446     		mov	r4, r0
 26654 0010 0D46     		mov	r5, r1
2624:src/xeq.c     **** 		pc -= arg + 1;
ARM GAS  /tmp/cc7LeJ71.s 			page 683


 26655              		.loc 1 2624 5 view .LVU6966
 26656 0012 1FD0     		beq	.L1937
2626:src/xeq.c     **** 		if ( Running ) {
 26657              		.loc 1 2626 14 is_stmt 1 view .LVU6967
2626:src/xeq.c     **** 		if ( Running ) {
 26658              		.loc 1 2626 17 is_stmt 0 view .LVU6968
 26659 0014 98B1     		cbz	r0, .L1929
2627:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26660              		.loc 1 2627 3 is_stmt 1 view .LVU6969
2627:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26661              		.loc 1 2627 8 is_stmt 0 view .LVU6970
 26662 0016 144B     		ldr	r3, .L1940+4
2627:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26663              		.loc 1 2627 6 view .LVU6971
 26664 0018 1B68     		ldr	r3, [r3]
 26665 001a F3B9     		cbnz	r3, .L1938
 26666 001c 3046     		mov	r0, r6
 26667              	.LVL2042:
 26668              	.L1924:
2627:src/xeq.c     **** 			// Handles the case properly that we are on last step
 26669              		.loc 1 2627 6 view .LVU6972
 26670 001e 134F     		ldr	r7, .L1940+8
 26671 0020 00E0     		b	.L1926
 26672              	.L1939:
2633:src/xeq.c     **** 		if (PcWrapped) {
 26673              		.loc 1 2633 18 discriminator 1 view .LVU6973
 26674 0022 33B9     		cbnz	r3, .L1927
 26675              	.L1926:
2631:src/xeq.c     **** 			pc = do_dec(pc, 1);
 26676              		.loc 1 2631 3 is_stmt 1 discriminator 2 view .LVU6974
2632:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26677              		.loc 1 2632 4 discriminator 2 view .LVU6975
2632:src/xeq.c     **** 		} while (--arg && !PcWrapped);
 26678              		.loc 1 2632 9 is_stmt 0 discriminator 2 view .LVU6976
 26679 0024 0121     		movs	r1, #1
 26680 0026 FFF7FEFF 		bl	do_dec
 26681              	.LVL2043:
2633:src/xeq.c     **** 		if (PcWrapped) {
 26682              		.loc 1 2633 11 is_stmt 1 discriminator 2 view .LVU6977
2633:src/xeq.c     **** 		if (PcWrapped) {
 26683              		.loc 1 2633 3 is_stmt 0 discriminator 2 view .LVU6978
 26684 002a 013C     		subs	r4, r4, #1
 26685              	.LVL2044:
2633:src/xeq.c     **** 		if (PcWrapped) {
 26686              		.loc 1 2633 18 discriminator 2 view .LVU6979
 26687 002c 3B68     		ldr	r3, [r7]
2633:src/xeq.c     **** 		if (PcWrapped) {
 26688              		.loc 1 2633 3 discriminator 2 view .LVU6980
 26689 002e F8D1     		bne	.L1939
2634:src/xeq.c     **** 			report_err(ERR_RANGE);
 26690              		.loc 1 2634 3 is_stmt 1 view .LVU6981
2634:src/xeq.c     **** 			report_err(ERR_RANGE);
 26691              		.loc 1 2634 6 is_stmt 0 view .LVU6982
 26692 0030 33B1     		cbz	r3, .L1923
 26693              	.L1927:
2635:src/xeq.c     **** 			return;
 26694              		.loc 1 2635 4 is_stmt 1 view .LVU6983
ARM GAS  /tmp/cc7LeJ71.s 			page 684


 26695              	.LVL2045:
 26696              	.LBB3560:
 26697              	.LBI3560:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26698              		.loc 1 546 5 view .LVU6984
 26699              	.LBB3561:
 547:src/xeq.c     **** 		Error = e;
 26700              		.loc 1 547 2 view .LVU6985
 547:src/xeq.c     **** 		Error = e;
 26701              		.loc 1 547 12 is_stmt 0 view .LVU6986
 26702 0032 0F4B     		ldr	r3, .L1940+12
 547:src/xeq.c     **** 		Error = e;
 26703              		.loc 1 547 5 view .LVU6987
 26704 0034 1A68     		ldr	r2, [r3]
 26705 0036 0AB9     		cbnz	r2, .L1921
 26706              	.LVL2046:
 26707              	.LBB3562:
 26708              	.LBI3562:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 26709              		.loc 1 546 5 is_stmt 1 view .LVU6988
 26710              	.LBB3563:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26711              		.loc 1 548 3 view .LVU6989
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 26712              		.loc 1 548 9 is_stmt 0 view .LVU6990
 26713 0038 0822     		movs	r2, #8
 26714 003a 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26715              		.loc 1 549 3 is_stmt 1 view .LVU6991
 26716              	.LVL2047:
 26717              	.L1921:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 26718              		.loc 1 549 3 is_stmt 0 view .LVU6992
 26719              	.LBE3563:
 26720              	.LBE3562:
 26721              	.LBE3561:
 26722              	.LBE3560:
2640:src/xeq.c     **** 
 26723              		.loc 1 2640 1 view .LVU6993
 26724 003c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 26725              	.LVL2048:
 26726              	.L1929:
2640:src/xeq.c     **** 
 26727              		.loc 1 2640 1 view .LVU6994
 26728 003e 3046     		mov	r0, r6
 26729              	.LVL2049:
 26730              	.L1923:
2639:src/xeq.c     **** }
 26731              		.loc 1 2639 2 is_stmt 1 view .LVU6995
 26732 0040 A5F13901 		sub	r1, r5, #57
 26733 0044 B1FA81F1 		clz	r1, r1
 26734 0048 3246     		mov	r2, r6
 26735 004a 4909     		lsrs	r1, r1, #5
2640:src/xeq.c     **** 
 26736              		.loc 1 2640 1 is_stmt 0 view .LVU6996
 26737 004c BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 26738              		.cfi_remember_state
ARM GAS  /tmp/cc7LeJ71.s 			page 685


 26739              		.cfi_restore 14
 26740              		.cfi_restore 7
 26741              		.cfi_restore 6
 26742              		.cfi_restore 5
 26743              		.cfi_restore 4
 26744              		.cfi_restore 3
 26745              		.cfi_def_cfa_offset 0
 26746              	.LVL2050:
2639:src/xeq.c     **** }
 26747              		.loc 1 2639 2 view .LVU6997
 26748 0050 FFF7FEBF 		b	gsbgto
 26749              	.LVL2051:
 26750              	.L1937:
 26751              		.cfi_restore_state
2625:src/xeq.c     ****         else if (arg) {
 26752              		.loc 1 2625 3 is_stmt 1 view .LVU6998
2625:src/xeq.c     ****         else if (arg) {
 26753              		.loc 1 2625 6 is_stmt 0 view .LVU6999
 26754 0054 731E     		subs	r3, r6, #1
 26755 0056 181A     		subs	r0, r3, r0
 26756              	.LVL2052:
2625:src/xeq.c     ****         else if (arg) {
 26757              		.loc 1 2625 6 view .LVU7000
 26758 0058 F2E7     		b	.L1923
 26759              	.LVL2053:
 26760              	.L1938:
2629:src/xeq.c     **** 		}
 26761              		.loc 1 2629 4 is_stmt 1 view .LVU7001
2629:src/xeq.c     **** 		}
 26762              		.loc 1 2629 9 is_stmt 0 view .LVU7002
 26763 005a 0121     		movs	r1, #1
 26764              	.LVL2054:
2629:src/xeq.c     **** 		}
 26765              		.loc 1 2629 9 view .LVU7003
 26766 005c 3046     		mov	r0, r6
 26767              	.LVL2055:
2629:src/xeq.c     **** 		}
 26768              		.loc 1 2629 9 view .LVU7004
 26769 005e FFF7FEFF 		bl	do_dec
 26770              	.LVL2056:
2629:src/xeq.c     **** 		}
 26771              		.loc 1 2629 9 view .LVU7005
 26772 0062 DCE7     		b	.L1924
 26773              	.L1941:
 26774              		.align	2
 26775              	.L1940:
 26776 0064 00000000 		.word	main_ram
 26777 0068 00000000 		.word	Running
 26778 006c 00000000 		.word	PcWrapped
 26779 0070 00000000 		.word	Error
 26780              		.cfi_endproc
 26781              	.LFE184:
 26783              		.section	.text.usergsb_common,"ax",%progbits
 26784              		.align	1
 26785              		.p2align 2,,3
 26786              		.syntax unified
 26787              		.thumb
ARM GAS  /tmp/cc7LeJ71.s 			page 686


 26788              		.thumb_func
 26789              		.fpu fpv4-sp-d16
 26791              	usergsb_common:
 26792              	.LVL2057:
 26793              	.LFB157:
2294:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26794              		.loc 1 2294 55 is_stmt 1 view -0
 26795              		.cfi_startproc
 26796              		@ args = 0, pretend = 0, frame = 0
 26797              		@ frame_needed = 0, uses_anonymous_args = 0
2295:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26798              		.loc 1 2295 2 view .LVU7007
2294:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26799              		.loc 1 2294 55 is_stmt 0 view .LVU7008
 26800 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 26801              		.cfi_def_cfa_offset 24
 26802              		.cfi_offset 4, -24
 26803              		.cfi_offset 5, -20
 26804              		.cfi_offset 6, -16
 26805              		.cfi_offset 7, -12
 26806              		.cfi_offset 8, -8
 26807              		.cfi_offset 14, -4
2295:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26808              		.loc 1 2295 26 view .LVU7009
 26809 0004 204D     		ldr	r5, .L1946
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26810              		.loc 1 2296 2 view .LVU7010
 26811 0006 214F     		ldr	r7, .L1946+4
2295:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26812              		.loc 1 2295 26 view .LVU7011
 26813 0008 2B68     		ldr	r3, [r5]
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26814              		.loc 1 2296 2 view .LVU7012
 26815 000a 3A68     		ldr	r2, [r7]
2295:src/xeq.c     **** 	gsbgto(pc, 1, XromUserPc);	     // Push address of callee
 26816              		.loc 1 2295 21 view .LVU7013
 26817 000c B3F8E047 		ldrh	r4, [r3, #2016]
 26818              	.LVL2058:
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26819              		.loc 1 2296 2 is_stmt 1 view .LVU7014
2298:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26820              		.loc 1 2298 2 is_stmt 0 view .LVU7015
 26821 0010 DFF88480 		ldr	r8, .L1946+16
2294:src/xeq.c     **** 	const unsigned int pc = state_pc();
 26822              		.loc 1 2294 55 view .LVU7016
 26823 0014 0646     		mov	r6, r0
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26824              		.loc 1 2296 2 view .LVU7017
 26825 0016 0121     		movs	r1, #1
 26826 0018 2046     		mov	r0, r4
 26827              	.LVL2059:
2296:src/xeq.c     **** 	gsbgto(pc, 1, LocalRegs);	     // Push my local registers
 26828              		.loc 1 2296 2 view .LVU7018
 26829 001a FFF7FEFF 		bl	gsbgto
 26830              	.LVL2060:
2297:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26831              		.loc 1 2297 2 is_stmt 1 view .LVU7019
ARM GAS  /tmp/cc7LeJ71.s 			page 687


2297:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26832              		.loc 1 2297 16 is_stmt 0 view .LVU7020
 26833 001e 2B68     		ldr	r3, [r5]
 26834 0020 B3F8DE27 		ldrh	r2, [r3, #2014]
2297:src/xeq.c     **** 	gsbgto(pc, 1, UserLocalRegs);	     // Push former local registers
 26835              		.loc 1 2297 2 view .LVU7021
 26836 0024 2046     		mov	r0, r4
 26837 0026 42F34A12 		sbfx	r2, r2, #5, #11
 26838 002a 0121     		movs	r1, #1
 26839 002c FFF7FEFF 		bl	gsbgto
 26840              	.LVL2061:
2298:src/xeq.c     **** 	gsbgto(target, 1, pc);		     // Push return address, transfer control
 26841              		.loc 1 2298 2 is_stmt 1 view .LVU7022
 26842 0030 2046     		mov	r0, r4
 26843 0032 D8F80020 		ldr	r2, [r8]
 26844 0036 0121     		movs	r1, #1
 26845 0038 FFF7FEFF 		bl	gsbgto
 26846              	.LVL2062:
2299:src/xeq.c     **** 
 26847              		.loc 1 2299 2 view .LVU7023
 26848 003c 2246     		mov	r2, r4
 26849 003e 3046     		mov	r0, r6
 26850 0040 0121     		movs	r1, #1
 26851 0042 FFF7FEFF 		bl	gsbgto
 26852              	.LVL2063:
2301:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26853              		.loc 1 2301 2 view .LVU7024
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26854              		.loc 1 2302 9 is_stmt 0 view .LVU7025
 26855 0046 2A68     		ldr	r2, [r5]
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26856              		.loc 1 2302 20 view .LVU7026
 26857 0048 1149     		ldr	r1, .L1946+8
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26858              		.loc 1 2302 9 view .LVU7027
 26859 004a B2F8DE37 		ldrh	r3, [r2, #2014]
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26860              		.loc 1 2302 20 view .LVU7028
 26861 004e 0868     		ldr	r0, [r1]
2303:src/xeq.c     **** 	if (! Running)
 26862              		.loc 1 2303 12 view .LVU7029
 26863 0050 D8F80050 		ldr	r5, [r8]
2304:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26864              		.loc 1 2304 6 view .LVU7030
 26865 0054 0F4C     		ldr	r4, .L1946+12
 26866              	.LVL2064:
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26867              		.loc 1 2302 20 view .LVU7031
 26868 0056 43F34A13 		sbfx	r3, r3, #5, #11
2301:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26869              		.loc 1 2301 13 view .LVU7032
 26870 005a 0026     		movs	r6, #0
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26871              		.loc 1 2302 20 view .LVU7033
 26872 005c 30F81310 		ldrh	r1, [r0, r3, lsl #1]
2301:src/xeq.c     **** 	RetStk[LocalRegs] |= LOCAL_HIDDEN;   // Hide the local frame
 26873              		.loc 1 2301 13 view .LVU7034
ARM GAS  /tmp/cc7LeJ71.s 			page 688


 26874 0060 3E60     		str	r6, [r7]
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26875              		.loc 1 2302 2 is_stmt 1 view .LVU7035
2302:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	     // Reestablish user environment
 26876              		.loc 1 2302 20 is_stmt 0 view .LVU7036
 26877 0062 41F40051 		orr	r1, r1, #8192
 26878 0066 20F81310 		strh	r1, [r0, r3, lsl #1]	@ movhi
2303:src/xeq.c     **** 	if (! Running)
 26879              		.loc 1 2303 2 is_stmt 1 view .LVU7037
2303:src/xeq.c     **** 	if (! Running)
 26880              		.loc 1 2303 12 is_stmt 0 view .LVU7038
 26881 006a B2F8DE37 		ldrh	r3, [r2, #2014]
 26882 006e 65F34F13 		bfi	r3, r5, #5, #11
 26883 0072 A2F8DE37 		strh	r3, [r2, #2014]	@ movhi
2304:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26884              		.loc 1 2304 2 is_stmt 1 view .LVU7039
2304:src/xeq.c     **** 		set_running_on();	     // We are running outside XROM now!
 26885              		.loc 1 2304 5 is_stmt 0 view .LVU7040
 26886 0076 2368     		ldr	r3, [r4]
 26887 0078 0BB1     		cbz	r3, .L1945
2307:src/xeq.c     **** 
 26888              		.loc 1 2307 1 view .LVU7041
 26889 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 26890              	.L1945:
2305:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26891              		.loc 1 2305 3 is_stmt 1 view .LVU7042
2307:src/xeq.c     **** 
 26892              		.loc 1 2307 1 is_stmt 0 view .LVU7043
 26893 007e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 26894              		.cfi_restore 14
 26895              		.cfi_restore 8
 26896              		.cfi_restore 7
 26897              		.cfi_restore 6
 26898              		.cfi_restore 5
 26899              		.cfi_restore 4
 26900              		.cfi_def_cfa_offset 0
2305:src/xeq.c     **** 	watchdog();			     // Just for safety. Shouldn't be needed.
 26901              		.loc 1 2305 3 view .LVU7044
 26902 0082 FFF7FEBF 		b	set_running_on
 26903              	.LVL2065:
 26904              	.L1947:
 26905 0086 00BF     		.align	2
 26906              	.L1946:
 26907 0088 00000000 		.word	main_ram
 26908 008c 00000000 		.word	XromUserPc
 26909 0090 00000000 		.word	RetStk
 26910 0094 00000000 		.word	Running
 26911 0098 00000000 		.word	UserLocalRegs
 26912              		.cfi_endproc
 26913              	.LFE157:
 26915              		.section	.text.do_usergsb,"ax",%progbits
 26916              		.align	1
 26917              		.p2align 2,,3
 26918              		.global	do_usergsb
 26919              		.syntax unified
 26920              		.thumb
 26921              		.thumb_func
ARM GAS  /tmp/cc7LeJ71.s 			page 689


 26922              		.fpu fpv4-sp-d16
 26924              	do_usergsb:
 26925              	.LVL2066:
 26926              	.LFB158:
2313:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26927              		.loc 1 2313 32 is_stmt 1 view -0
 26928              		.cfi_startproc
 26929              		@ args = 0, pretend = 0, frame = 0
 26930              		@ frame_needed = 0, uses_anonymous_args = 0
2314:src/xeq.c     ****         fill(OP_FILL);
 26931              		.loc 1 2314 2 view .LVU7046
2313:src/xeq.c     **** 	usergsb_common(XromUserPc);
 26932              		.loc 1 2313 32 is_stmt 0 view .LVU7047
 26933 0000 08B5     		push	{r3, lr}
 26934              		.cfi_def_cfa_offset 8
 26935              		.cfi_offset 3, -8
 26936              		.cfi_offset 14, -4
2314:src/xeq.c     ****         fill(OP_FILL);
 26937              		.loc 1 2314 2 view .LVU7048
 26938 0002 044B     		ldr	r3, .L1950
 26939 0004 1888     		ldrh	r0, [r3]
 26940              	.LVL2067:
2314:src/xeq.c     ****         fill(OP_FILL);
 26941              		.loc 1 2314 2 view .LVU7049
 26942 0006 FFF7FEFF 		bl	usergsb_common
 26943              	.LVL2068:
2315:src/xeq.c     **** }
 26944              		.loc 1 2315 9 is_stmt 1 view .LVU7050
2316:src/xeq.c     **** 
 26945              		.loc 1 2316 1 is_stmt 0 view .LVU7051
 26946 000a BDE80840 		pop	{r3, lr}
 26947              		.cfi_restore 14
 26948              		.cfi_restore 3
 26949              		.cfi_def_cfa_offset 0
2315:src/xeq.c     **** }
 26950              		.loc 1 2315 9 view .LVU7052
 26951 000e 0C20     		movs	r0, #12
 26952 0010 FFF7FEBF 		b	fill
 26953              	.LVL2069:
 26954              	.L1951:
 26955              		.align	2
 26956              	.L1950:
 26957 0014 00000000 		.word	XromUserPc
 26958              		.cfi_endproc
 26959              	.LFE158:
 26961              		.section	.text.cmdmultigto,"ax",%progbits
 26962              		.align	1
 26963              		.p2align 2,,3
 26964              		.global	cmdmultigto
 26965              		.syntax unified
 26966              		.thumb
 26967              		.thumb_func
 26968              		.fpu fpv4-sp-d16
 26970              	cmdmultigto:
 26971              	.LVL2070:
 26972              	.LFB165:
2372:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
ARM GAS  /tmp/cc7LeJ71.s 			page 690


 26973              		.loc 1 2372 54 is_stmt 1 view -0
 26974              		.cfi_startproc
 26975              		@ args = 0, pretend = 0, frame = 0
 26976              		@ frame_needed = 0, uses_anonymous_args = 0
2373:src/xeq.c     **** 		// In XROM the command behaves differently!
 26977              		.loc 1 2373 2 view .LVU7054
2373:src/xeq.c     **** 		// In XROM the command behaves differently!
 26978              		.loc 1 2373 5 is_stmt 0 view .LVU7055
 26979 0000 0229     		cmp	r1, #2
2372:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26980              		.loc 1 2372 54 view .LVU7056
 26981 0002 10B5     		push	{r4, lr}
 26982              		.cfi_def_cfa_offset 8
 26983              		.cfi_offset 4, -8
 26984              		.cfi_offset 14, -4
2372:src/xeq.c     **** 	if (mopr == DBL_XEQ && is_xrom()) {
 26985              		.loc 1 2372 54 view .LVU7057
 26986 0004 0346     		mov	r3, r0
 26987 0006 0C46     		mov	r4, r1
2373:src/xeq.c     **** 		// In XROM the command behaves differently!
 26988              		.loc 1 2373 5 view .LVU7058
 26989 0008 06D1     		bne	.L1953
 26990              	.LBB3564:
 26991              	.LBI3564:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 26992              		.loc 1 185 5 is_stmt 1 view .LVU7059
 26993              	.LBB3565:
 186:src/xeq.c     **** }
 26994              		.loc 1 186 2 view .LVU7060
 186:src/xeq.c     **** }
 26995              		.loc 1 186 9 is_stmt 0 view .LVU7061
 26996 000a 104A     		ldr	r2, .L1957
 26997 000c 1268     		ldr	r2, [r2]
 26998 000e B2F8E027 		ldrh	r2, [r2, #2016]
 26999              	.LBE3565:
 27000              	.LBE3564:
2373:src/xeq.c     **** 		// In XROM the command behaves differently!
 27001              		.loc 1 2373 22 view .LVU7062
 27002 0012 920B     		lsrs	r2, r2, #14
 27003 0014 032A     		cmp	r2, #3
 27004 0016 0BD0     		beq	.L1956
 27005              	.L1953:
2382:src/xeq.c     **** 	}
 27006              		.loc 1 2382 3 is_stmt 1 view .LVU7063
 27007 0018 0121     		movs	r1, #1
 27008              	.LVL2071:
2382:src/xeq.c     **** 	}
 27009              		.loc 1 2382 3 is_stmt 0 view .LVU7064
 27010 001a 1846     		mov	r0, r3
 27011              	.LVL2072:
2382:src/xeq.c     **** 	}
 27012              		.loc 1 2382 3 view .LVU7065
 27013 001c FFF7FEFF 		bl	findmultilbl
 27014              	.LVL2073:
2382:src/xeq.c     **** 	}
 27015              		.loc 1 2382 3 view .LVU7066
 27016 0020 0146     		mov	r1, r0
ARM GAS  /tmp/cc7LeJ71.s 			page 691


 27017 0022 E01E     		subs	r0, r4, #3
 27018 0024 18BF     		it	ne
 27019 0026 0120     		movne	r0, #1
2384:src/xeq.c     **** 
 27020              		.loc 1 2384 1 view .LVU7067
 27021 0028 BDE81040 		pop	{r4, lr}
 27022              		.cfi_remember_state
 27023              		.cfi_restore 14
 27024              		.cfi_restore 4
 27025              		.cfi_def_cfa_offset 0
2382:src/xeq.c     **** 	}
 27026              		.loc 1 2382 3 view .LVU7068
 27027 002c FFF7FEBF 		b	cmdgtocommon
 27028              	.LVL2074:
 27029              	.L1956:
 27030              		.cfi_restore_state
 27031              	.LBB3566:
2375:src/xeq.c     **** 		if (target != 0)
 27032              		.loc 1 2375 3 is_stmt 1 view .LVU7069
2375:src/xeq.c     **** 		if (target != 0)
 27033              		.loc 1 2375 31 is_stmt 0 view .LVU7070
 27034 0030 0021     		movs	r1, #0
 27035              	.LVL2075:
2375:src/xeq.c     **** 		if (target != 0)
 27036              		.loc 1 2375 31 view .LVU7071
 27037 0032 FFF7FEFF 		bl	findmultilbl
 27038              	.LVL2076:
2375:src/xeq.c     **** 		if (target != 0)
 27039              		.loc 1 2375 22 view .LVU7072
 27040 0036 80B2     		uxth	r0, r0
 27041              	.LVL2077:
2376:src/xeq.c     **** 			usergsb_common(target); 
 27042              		.loc 1 2376 3 is_stmt 1 view .LVU7073
2376:src/xeq.c     **** 			usergsb_common(target); 
 27043              		.loc 1 2376 6 is_stmt 0 view .LVU7074
 27044 0038 18B1     		cbz	r0, .L1954
2377:src/xeq.c     **** 		else
 27045              		.loc 1 2377 4 is_stmt 1 view .LVU7075
 27046              	.LBE3566:
2384:src/xeq.c     **** 
 27047              		.loc 1 2384 1 is_stmt 0 view .LVU7076
 27048 003a BDE81040 		pop	{r4, lr}
 27049              		.cfi_remember_state
 27050              		.cfi_restore 14
 27051              		.cfi_restore 4
 27052              		.cfi_def_cfa_offset 0
 27053              	.LBB3567:
2377:src/xeq.c     **** 		else
 27054              		.loc 1 2377 4 view .LVU7077
 27055 003e FFF7FEBF 		b	usergsb_common
 27056              	.LVL2078:
 27057              	.L1954:
 27058              		.cfi_restore_state
2379:src/xeq.c     **** 	}
 27059              		.loc 1 2379 4 is_stmt 1 view .LVU7078
 27060              	.LBE3567:
2384:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 692


 27061              		.loc 1 2384 1 is_stmt 0 view .LVU7079
 27062 0042 BDE81040 		pop	{r4, lr}
 27063              		.cfi_restore 14
 27064              		.cfi_restore 4
 27065              		.cfi_def_cfa_offset 0
 27066              	.LBB3568:
2379:src/xeq.c     **** 	}
 27067              		.loc 1 2379 4 view .LVU7080
 27068 0046 FFF7FEBF 		b	incpc
 27069              	.LVL2079:
 27070              	.L1958:
2379:src/xeq.c     **** 	}
 27071              		.loc 1 2379 4 view .LVU7081
 27072 004a 00BF     		.align	2
 27073              	.L1957:
 27074 004c 00000000 		.word	main_ram
 27075              	.LBE3568:
 27076              		.cfi_endproc
 27077              	.LFE165:
 27079              		.section	.text.store_a_to_d,"ax",%progbits
 27080              		.align	1
 27081              		.p2align 2,,3
 27082              		.global	store_a_to_d
 27083              		.syntax unified
 27084              		.thumb
 27085              		.thumb_func
 27086              		.fpu fpv4-sp-d16
 27088              	store_a_to_d:
 27089              	.LVL2080:
 27090              	.LFB264:
5839:src/xeq.c     **** 
5840:src/xeq.c     **** /* Command to stash registers A through D into volatile RAM and to restore them
5841:src/xeq.c     ****  * again.
5842:src/xeq.c     ****  */
5843:src/xeq.c     **** void store_a_to_d(enum nilop op) {
 27091              		.loc 1 5843 34 is_stmt 1 view -0
 27092              		.cfi_startproc
 27093              		@ args = 0, pretend = 0, frame = 0
 27094              		@ frame_needed = 0, uses_anonymous_args = 0
5844:src/xeq.c     **** 	const void *src = XromA2D;
 27095              		.loc 1 5844 2 view .LVU7083
5845:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27096              		.loc 1 5845 2 view .LVU7084
5843:src/xeq.c     **** 	const void *src = XromA2D;
 27097              		.loc 1 5843 34 is_stmt 0 view .LVU7085
 27098 0000 10B5     		push	{r4, lr}
 27099              		.cfi_def_cfa_offset 8
 27100              		.cfi_offset 4, -8
 27101              		.cfi_offset 14, -4
5843:src/xeq.c     **** 	const void *src = XromA2D;
 27102              		.loc 1 5843 34 view .LVU7086
 27103 0002 0446     		mov	r4, r0
 27104              		.loc 1 5845 15 view .LVU7087
 27105 0004 6820     		movs	r0, #104
 27106              	.LVL2081:
 27107              		.loc 1 5845 15 view .LVU7088
 27108 0006 FFF7FEFF 		bl	get_reg_n
ARM GAS  /tmp/cc7LeJ71.s 			page 693


 27109              	.LVL2082:
5846:src/xeq.c     **** 
5847:src/xeq.c     **** 	if (op == OP_SAVEA2D) {
 27110              		.loc 1 5847 2 is_stmt 1 view .LVU7089
 27111              		.loc 1 5847 5 is_stmt 0 view .LVU7090
 27112 000a 802C     		cmp	r4, #128
5848:src/xeq.c     **** 		src = dest;
 27113              		.loc 1 5848 7 view .LVU7091
 27114 000c 08BF     		it	eq
 27115 000e 0146     		moveq	r1, r0
5849:src/xeq.c     **** 		dest = XromA2D;
5850:src/xeq.c     **** 	}
5851:src/xeq.c     **** 	xcopy(dest, src, sizeof(REGISTER) * 4);
5852:src/xeq.c     **** }
 27116              		.loc 1 5852 1 view .LVU7092
 27117 0010 BDE81040 		pop	{r4, lr}
 27118              		.cfi_restore 14
 27119              		.cfi_restore 4
 27120              		.cfi_def_cfa_offset 0
5849:src/xeq.c     **** 		dest = XromA2D;
 27121              		.loc 1 5849 8 view .LVU7093
 27122 0014 0CBF     		ite	eq
 27123 0016 0248     		ldreq	r0, .L1963
 27124              	.LVL2083:
5844:src/xeq.c     **** 	void *dest = get_reg_n(regA_idx);
 27125              		.loc 1 5844 14 view .LVU7094
 27126 0018 0149     		ldrne	r1, .L1963
 27127              	.LVL2084:
5851:src/xeq.c     **** }
 27128              		.loc 1 5851 2 is_stmt 1 view .LVU7095
 27129 001a 4022     		movs	r2, #64
 27130 001c FFF7FEBF 		b	xcopy
 27131              	.LVL2085:
 27132              	.L1964:
5851:src/xeq.c     **** }
 27133              		.loc 1 5851 2 is_stmt 0 view .LVU7096
 27134              		.align	2
 27135              	.L1963:
 27136 0020 00000000 		.word	XromA2D
 27137              		.cfi_endproc
 27138              	.LFE264:
 27140              		.section	.text.cmdlocr,"ax",%progbits
 27141              		.align	1
 27142              		.p2align 2,,3
 27143              		.global	cmdlocr
 27144              		.syntax unified
 27145              		.thumb
 27146              		.thumb_func
 27147              		.fpu fpv4-sp-d16
 27149              	cmdlocr:
 27150              	.LVL2086:
 27151              	.LFB265:
5853:src/xeq.c     **** 
5854:src/xeq.c     **** /*
5855:src/xeq.c     ****  *  Command to support local variables.
5856:src/xeq.c     ****  *  A stack frame is constructed:
5857:src/xeq.c     ****  *	marker including size of frame,
ARM GAS  /tmp/cc7LeJ71.s 			page 694


5858:src/xeq.c     ****  *	register + flag area.
5859:src/xeq.c     ****  *  Registers must reside on even stack positions
5860:src/xeq.c     ****  *  so the flag word is either at the top or at the bottom of the frame.
5861:src/xeq.c     ****  */
5862:src/xeq.c     **** void cmdlocr(unsigned int arg, enum rarg op) {
 27152              		.loc 1 5862 46 is_stmt 1 view -0
 27153              		.cfi_startproc
 27154              		@ args = 0, pretend = 0, frame = 8
 27155              		@ frame_needed = 0, uses_anonymous_args = 0
5863:src/xeq.c     **** 	short int sp = RetStkPtr;
 27156              		.loc 1 5863 2 view .LVU7098
5862:src/xeq.c     **** 	short int sp = RetStkPtr;
 27157              		.loc 1 5862 46 is_stmt 0 view .LVU7099
 27158 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27159              		.cfi_def_cfa_offset 36
 27160              		.cfi_offset 4, -36
 27161              		.cfi_offset 5, -32
 27162              		.cfi_offset 6, -28
 27163              		.cfi_offset 7, -24
 27164              		.cfi_offset 8, -20
 27165              		.cfi_offset 9, -16
 27166              		.cfi_offset 10, -12
 27167              		.cfi_offset 11, -8
 27168              		.cfi_offset 14, -4
 27169              		.loc 1 5863 17 view .LVU7100
 27170 0004 DFF88081 		ldr	r8, .L1985+8
 27171 0008 D8F80010 		ldr	r1, [r8]
 27172              	.LVL2087:
 27173              	.LBB3578:
 27174              	.LBB3579:
1119:src/xeq.c     **** }
 27175              		.loc 1 1119 24 view .LVU7101
 27176 000c B1F8E847 		ldrh	r4, [r1, #2024]
 27177              	.LBE3579:
 27178              	.LBE3578:
 27179              		.loc 1 5863 12 view .LVU7102
 27180 0010 B1F9E277 		ldrsh	r7, [r1, #2018]
 27181              	.LVL2088:
5864:src/xeq.c     **** 	int size = (arg << (is_dblmode() ? 3 : 2)) + 2;
 27182              		.loc 1 5864 2 is_stmt 1 view .LVU7103
 27183              	.LBB3581:
 27184              	.LBI3578:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 27185              		.loc 1 1118 5 view .LVU7104
 27186              	.LBB3580:
1119:src/xeq.c     **** }
 27187              		.loc 1 1119 2 view .LVU7105
1119:src/xeq.c     **** }
 27188              		.loc 1 1119 24 is_stmt 0 view .LVU7106
 27189 0014 44F20102 		movw	r2, #16385
 27190              	.LBE3580:
 27191              	.LBE3581:
 27192              		.loc 1 5864 39 view .LVU7107
 27193 0018 2240     		ands	r2, r2, r4
 27194 001a B2F5804F 		cmp	r2, #16384
 27195 001e 0CBF     		ite	eq
 27196 0020 0325     		moveq	r5, #3
ARM GAS  /tmp/cc7LeJ71.s 			page 695


 27197 0022 0225     		movne	r5, #2
 27198              		.loc 1 5864 18 view .LVU7108
 27199 0024 A840     		lsls	r0, r0, r5
 27200              	.LVL2089:
 27201              		.loc 1 5864 45 view .LVU7109
 27202 0026 851C     		adds	r5, r0, #2
 27203              	.LVL2090:
5865:src/xeq.c     **** 	const unsigned short marker = LOCAL_MARKER | size;
 27204              		.loc 1 5865 2 is_stmt 1 view .LVU7110
5862:src/xeq.c     **** 	short int sp = RetStkPtr;
 27205              		.loc 1 5862 46 is_stmt 0 view .LVU7111
 27206 0028 83B0     		sub	sp, sp, #12
 27207              		.cfi_def_cfa_offset 48
 27208              		.loc 1 5865 45 view .LVU7112
 27209 002a 1FFA85F9 		uxth	r9, r5
 27210              	.LVL2091:
5866:src/xeq.c     **** 	int old_size = 0;
 27211              		.loc 1 5866 2 is_stmt 1 view .LVU7113
5867:src/xeq.c     **** 	short unsigned int old_flags = 0;
 27212              		.loc 1 5867 2 view .LVU7114
5868:src/xeq.c     **** 
5869:src/xeq.c     **** 	if (sp != 0 && sp == LocalRegs) {
 27213              		.loc 1 5869 2 view .LVU7115
 27214              		.loc 1 5869 5 is_stmt 0 view .LVU7116
 27215 002e 7FB9     		cbnz	r7, .L1967
 27216              	.LVL2092:
5870:src/xeq.c     **** 		// resize required
5871:src/xeq.c     **** 		old_size = local_levels();
5872:src/xeq.c     **** 		sp += old_size;
5873:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
5874:src/xeq.c     **** 	}
5875:src/xeq.c     **** 	// compute space needed
5876:src/xeq.c     **** 	sp -= size;
 27217              		.loc 1 5876 2 is_stmt 1 view .LVU7117
5877:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27218              		.loc 1 5877 10 is_stmt 0 view .LVU7118
 27219 0030 534A     		ldr	r2, .L1985
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27220              		.loc 1 5876 5 view .LVU7119
 27221 0032 C9F10004 		rsb	r4, r9, #0
 27222 0036 26B2     		sxth	r6, r4
 27223              	.LVL2093:
 27224              		.loc 1 5877 2 is_stmt 1 view .LVU7120
 27225              		.loc 1 5877 5 is_stmt 0 view .LVU7121
 27226 0038 1268     		ldr	r2, [r2]
 27227              		.loc 1 5877 6 view .LVU7122
 27228 003a 7142     		rsbs	r1, r6, #0
 27229              		.loc 1 5877 5 view .LVU7123
 27230 003c 9142     		cmp	r1, r2
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27231              		.loc 1 5876 5 view .LVU7124
 27232 003e A4B2     		uxth	r4, r4
 27233              		.loc 1 5877 5 view .LVU7125
 27234 0040 4CDC     		bgt	.L1973
 27235 0042 7600     		lsls	r6, r6, #1
 27236              	.LVL2094:
 27237              		.loc 1 5877 5 view .LVU7126
ARM GAS  /tmp/cc7LeJ71.s 			page 696


 27238 0044 DFF844B1 		ldr	fp, .L1985+12
 27239 0048 4FEA450A 		lsl	r10, r5, #1
 27240 004c 3346     		mov	r3, r6
 27241 004e 15E0     		b	.L1971
 27242              	.LVL2095:
 27243              	.L1967:
5869:src/xeq.c     **** 		// resize required
 27244              		.loc 1 5869 23 discriminator 1 view .LVU7127
 27245 0050 B1F8DE47 		ldrh	r4, [r1, #2014]
 27246 0054 44F34A14 		sbfx	r4, r4, #5, #11
5869:src/xeq.c     **** 		// resize required
 27247              		.loc 1 5869 14 discriminator 1 view .LVU7128
 27248 0058 BC42     		cmp	r4, r7
 27249 005a 30D0     		beq	.L1972
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27250              		.loc 1 5876 2 is_stmt 1 view .LVU7129
 27251              		.loc 1 5877 10 is_stmt 0 view .LVU7130
 27252 005c 484A     		ldr	r2, .L1985
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27253              		.loc 1 5876 5 view .LVU7131
 27254 005e A7EB0904 		sub	r4, r7, r9
 27255              		.loc 1 5877 5 view .LVU7132
 27256 0062 1368     		ldr	r3, [r2]
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27257              		.loc 1 5876 5 view .LVU7133
 27258 0064 26B2     		sxth	r6, r4
 27259              	.LVL2096:
 27260              		.loc 1 5877 2 is_stmt 1 view .LVU7134
 27261              		.loc 1 5877 6 is_stmt 0 view .LVU7135
 27262 0066 7242     		rsbs	r2, r6, #0
 27263              		.loc 1 5877 5 view .LVU7136
 27264 0068 9A42     		cmp	r2, r3
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27265              		.loc 1 5876 5 view .LVU7137
 27266 006a A4B2     		uxth	r4, r4
 27267              		.loc 1 5877 5 view .LVU7138
 27268 006c 36DC     		bgt	.L1973
 27269 006e 7600     		lsls	r6, r6, #1
 27270              	.LVL2097:
 27271              		.loc 1 5877 5 view .LVU7139
 27272 0070 DFF818B1 		ldr	fp, .L1985+12
 27273 0074 4FEA450A 		lsl	r10, r5, #1
 27274 0078 3346     		mov	r3, r6
5867:src/xeq.c     **** 
 27275              		.loc 1 5867 21 view .LVU7140
 27276 007a 0027     		movs	r7, #0
 27277              	.LVL2098:
 27278              	.L1971:
5878:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
5879:src/xeq.c     **** 		return;
5880:src/xeq.c     **** 	}
5881:src/xeq.c     **** 	if ( old_size > 0 ) {
5882:src/xeq.c     **** 		// move previous contents to new destination
5883:src/xeq.c     **** 		int n;
5884:src/xeq.c     **** 		if (size > old_size) {
5885:src/xeq.c     **** 			n = old_size;
5886:src/xeq.c     **** 			size -= old_size;
ARM GAS  /tmp/cc7LeJ71.s 			page 697


5887:src/xeq.c     **** 		}
5888:src/xeq.c     **** 		else {
5889:src/xeq.c     **** 			n = size;
5890:src/xeq.c     **** 			size = 0;
5891:src/xeq.c     **** 		}
5892:src/xeq.c     **** 		xcopy(RetStk + sp, RetStk + LocalRegs, n + n);
5893:src/xeq.c     **** 	}
5894:src/xeq.c     **** 	// fill the rest with 0
5895:src/xeq.c     **** 	xset(RetStk + sp + old_size, 0, size + size);
 27279              		.loc 1 5895 2 is_stmt 1 view .LVU7141
 27280              		.loc 1 5895 19 is_stmt 0 view .LVU7142
 27281 007c DBF80000 		ldr	r0, [fp]
 27282              		.loc 1 5895 2 view .LVU7143
 27283 0080 5246     		mov	r2, r10
 27284 0082 1844     		add	r0, r0, r3
 27285 0084 0021     		movs	r1, #0
 27286 0086 FFF7FEFF 		bl	xset
 27287              	.LVL2099:
5896:src/xeq.c     **** 
5897:src/xeq.c     **** 	// set marker, pointers and flags
5898:src/xeq.c     **** 	RetStk[sp] = marker;
 27288              		.loc 1 5898 2 is_stmt 1 view .LVU7144
 27289              		.loc 1 5898 13 is_stmt 0 view .LVU7145
 27290 008a DBF80020 		ldr	r2, [fp]
5899:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27291              		.loc 1 5899 14 view .LVU7146
 27292 008e D8F80030 		ldr	r3, [r8]
5865:src/xeq.c     **** 	int old_size = 0;
 27293              		.loc 1 5865 23 view .LVU7147
 27294 0092 49F48059 		orr	r9, r9, #4096
 27295              	.LVL2100:
5898:src/xeq.c     **** 	RetStkPtr = LocalRegs = sp;
 27296              		.loc 1 5898 13 view .LVU7148
 27297 0096 22F80690 		strh	r9, [r2, r6]	@ movhi
 27298              		.loc 1 5899 2 is_stmt 1 view .LVU7149
 27299              		.loc 1 5899 24 is_stmt 0 view .LVU7150
 27300 009a B3F8DE27 		ldrh	r2, [r3, #2014]
 27301 009e 44F30A04 		sbfx	r4, r4, #0, #11
 27302 00a2 64F34F12 		bfi	r2, r4, #5, #11
 27303              		.loc 1 5899 12 view .LVU7151
 27304 00a6 A3F8E247 		strh	r4, [r3, #2018]	@ movhi
5900:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27305              		.loc 1 5900 2 is_stmt 1 view .LVU7152
5899:src/xeq.c     **** 	*flag_word(LOCAL_FLAG_BASE, NULL) = old_flags;
 27306              		.loc 1 5899 24 is_stmt 0 view .LVU7153
 27307 00aa A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
 27308              		.loc 1 5900 3 view .LVU7154
 27309 00ae 0021     		movs	r1, #0
 27310 00b0 7020     		movs	r0, #112
 27311 00b2 FFF7FEFF 		bl	flag_word
 27312              	.LVL2101:
 27313              		.loc 1 5900 36 view .LVU7155
 27314 00b6 0780     		strh	r7, [r0]	@ movhi
 27315              	.L1965:
5901:src/xeq.c     **** }
 27316              		.loc 1 5901 1 view .LVU7156
 27317 00b8 03B0     		add	sp, sp, #12
ARM GAS  /tmp/cc7LeJ71.s 			page 698


 27318              		.cfi_remember_state
 27319              		.cfi_def_cfa_offset 36
 27320              		@ sp needed
 27321 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27322              	.LVL2102:
 27323              	.L1972:
 27324              		.cfi_restore_state
5871:src/xeq.c     **** 		sp += old_size;
 27325              		.loc 1 5871 3 is_stmt 1 view .LVU7157
 27326              	.LBB3582:
 27327              	.LBI3582:
 217:src/xeq.c     **** 	return LocalRegs < 0 ? LOCAL_LEVELS(RetStk[LocalRegs]) : 0;
 27328              		.loc 1 217 5 view .LVU7158
 27329              	.LBB3583:
 218:src/xeq.c     **** }
 27330              		.loc 1 218 2 view .LVU7159
 218:src/xeq.c     **** }
 27331              		.loc 1 218 57 is_stmt 0 view .LVU7160
 27332 00be 002C     		cmp	r4, #0
 27333 00c0 15DB     		blt	.L1982
 218:src/xeq.c     **** }
 27334              		.loc 1 218 57 view .LVU7161
 27335              	.LBE3583:
 27336              	.LBE3582:
5872:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27337              		.loc 1 5872 3 is_stmt 1 view .LVU7162
 27338              	.LVL2103:
5873:src/xeq.c     **** 	}
 27339              		.loc 1 5873 3 view .LVU7163
5873:src/xeq.c     **** 	}
 27340              		.loc 1 5873 16 is_stmt 0 view .LVU7164
 27341 00c2 0021     		movs	r1, #0
 27342 00c4 7020     		movs	r0, #112
 27343 00c6 FFF7FEFF 		bl	flag_word
 27344              	.LVL2104:
5877:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27345              		.loc 1 5877 10 view .LVU7165
 27346 00ca 2D4B     		ldr	r3, .L1985
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27347              		.loc 1 5876 5 view .LVU7166
 27348 00cc A4EB0904 		sub	r4, r4, r9
 27349              	.LVL2105:
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27350              		.loc 1 5876 5 view .LVU7167
 27351 00d0 26B2     		sxth	r6, r4
5877:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27352              		.loc 1 5877 5 view .LVU7168
 27353 00d2 1B68     		ldr	r3, [r3]
5877:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27354              		.loc 1 5877 6 view .LVU7169
 27355 00d4 7242     		rsbs	r2, r6, #0
 27356              	.LVL2106:
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27357              		.loc 1 5876 2 is_stmt 1 view .LVU7170
5877:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27358              		.loc 1 5877 2 view .LVU7171
5877:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
ARM GAS  /tmp/cc7LeJ71.s 			page 699


 27359              		.loc 1 5877 5 is_stmt 0 view .LVU7172
 27360 00d6 9A42     		cmp	r2, r3
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27361              		.loc 1 5876 5 view .LVU7173
 27362 00d8 A4B2     		uxth	r4, r4
5877:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27363              		.loc 1 5877 5 view .LVU7174
 27364 00da 43DD     		ble	.L1983
 27365              	.LVL2107:
 27366              	.L1973:
5878:src/xeq.c     **** 		return;
 27367              		.loc 1 5878 3 is_stmt 1 view .LVU7175
 27368              	.LBB3585:
 27369              	.LBI3585:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27370              		.loc 1 546 5 view .LVU7176
 27371              	.LBB3586:
 547:src/xeq.c     **** 		Error = e;
 27372              		.loc 1 547 2 view .LVU7177
 547:src/xeq.c     **** 		Error = e;
 27373              		.loc 1 547 12 is_stmt 0 view .LVU7178
 27374 00dc 294B     		ldr	r3, .L1985+4
 547:src/xeq.c     **** 		Error = e;
 27375              		.loc 1 547 5 view .LVU7179
 27376 00de 1A68     		ldr	r2, [r3]
 27377 00e0 002A     		cmp	r2, #0
 27378 00e2 E9D1     		bne	.L1965
 27379              	.LVL2108:
 27380              	.LBB3587:
 27381              	.LBI3587:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27382              		.loc 1 546 5 is_stmt 1 view .LVU7180
 27383              	.LBB3588:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27384              		.loc 1 548 3 view .LVU7181
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27385              		.loc 1 548 9 is_stmt 0 view .LVU7182
 27386 00e4 0B22     		movs	r2, #11
 27387 00e6 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27388              		.loc 1 549 3 is_stmt 1 view .LVU7183
 27389              	.LBE3588:
 27390              	.LBE3587:
 27391              	.LBE3586:
 27392              	.LBE3585:
 27393              		.loc 1 5901 1 is_stmt 0 view .LVU7184
 27394 00e8 03B0     		add	sp, sp, #12
 27395              		.cfi_remember_state
 27396              		.cfi_def_cfa_offset 36
 27397              		@ sp needed
 27398 00ea BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27399              	.LVL2109:
 27400              	.L1982:
 27401              		.cfi_restore_state
 27402              	.LBB3589:
 27403              	.LBB3584:
 218:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 700


 27404              		.loc 1 218 25 view .LVU7185
 27405 00ee DFF89CB0 		ldr	fp, .L1985+12
 27406 00f2 DBF80030 		ldr	r3, [fp]
 27407 00f6 33F81430 		ldrh	r3, [r3, r4, lsl #1]
 27408 00fa C3F30B03 		ubfx	r3, r3, #0, #12
 27409              	.LVL2110:
 218:src/xeq.c     **** }
 27410              		.loc 1 218 25 view .LVU7186
 27411              	.LBE3584:
 27412              	.LBE3589:
5872:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27413              		.loc 1 5872 3 is_stmt 1 view .LVU7187
5872:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27414              		.loc 1 5872 6 is_stmt 0 view .LVU7188
 27415 00fe 1C44     		add	r4, r4, r3
5873:src/xeq.c     **** 	}
 27416              		.loc 1 5873 16 view .LVU7189
 27417 0100 0021     		movs	r1, #0
 27418 0102 7020     		movs	r0, #112
5872:src/xeq.c     **** 		old_flags = *flag_word(LOCAL_FLAG_BASE, NULL);
 27419              		.loc 1 5872 6 view .LVU7190
 27420 0104 0193     		str	r3, [sp, #4]
 27421 0106 A4B2     		uxth	r4, r4
 27422              	.LVL2111:
5873:src/xeq.c     **** 	}
 27423              		.loc 1 5873 3 is_stmt 1 view .LVU7191
5873:src/xeq.c     **** 	}
 27424              		.loc 1 5873 16 is_stmt 0 view .LVU7192
 27425 0108 FFF7FEFF 		bl	flag_word
 27426              	.LVL2112:
5877:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27427              		.loc 1 5877 10 view .LVU7193
 27428 010c 1C4A     		ldr	r2, .L1985
5873:src/xeq.c     **** 	}
 27429              		.loc 1 5873 13 view .LVU7194
 27430 010e 0788     		ldrh	r7, [r0]
 27431              	.LVL2113:
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27432              		.loc 1 5876 2 is_stmt 1 view .LVU7195
5877:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27433              		.loc 1 5877 5 is_stmt 0 view .LVU7196
 27434 0110 1268     		ldr	r2, [r2]
 27435 0112 019B     		ldr	r3, [sp, #4]
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27436              		.loc 1 5876 5 view .LVU7197
 27437 0114 A4EB0904 		sub	r4, r4, r9
 27438              	.LVL2114:
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27439              		.loc 1 5876 5 view .LVU7198
 27440 0118 26B2     		sxth	r6, r4
 27441              	.LVL2115:
5877:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27442              		.loc 1 5877 2 is_stmt 1 view .LVU7199
5877:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27443              		.loc 1 5877 6 is_stmt 0 view .LVU7200
 27444 011a 7142     		rsbs	r1, r6, #0
5877:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
ARM GAS  /tmp/cc7LeJ71.s 			page 701


 27445              		.loc 1 5877 5 view .LVU7201
 27446 011c 9142     		cmp	r1, r2
5876:src/xeq.c     **** 	if (-sp > RetStkSize) {
 27447              		.loc 1 5876 5 view .LVU7202
 27448 011e A4B2     		uxth	r4, r4
5877:src/xeq.c     **** 		report_err(ERR_RAM_FULL);
 27449              		.loc 1 5877 5 view .LVU7203
 27450 0120 DCDC     		bgt	.L1973
5881:src/xeq.c     **** 		// move previous contents to new destination
 27451              		.loc 1 5881 2 is_stmt 1 view .LVU7204
5881:src/xeq.c     **** 		// move previous contents to new destination
 27452              		.loc 1 5881 5 is_stmt 0 view .LVU7205
 27453 0122 3BB3     		cbz	r3, .L1984
 27454              	.LBB3590:
5883:src/xeq.c     **** 		if (size > old_size) {
 27455              		.loc 1 5883 3 is_stmt 1 view .LVU7206
5884:src/xeq.c     **** 			n = old_size;
 27456              		.loc 1 5884 3 view .LVU7207
5892:src/xeq.c     **** 	}
 27457              		.loc 1 5892 31 is_stmt 0 view .LVU7208
 27458 0124 D8F80020 		ldr	r2, [r8]
5892:src/xeq.c     **** 	}
 27459              		.loc 1 5892 3 view .LVU7209
 27460 0128 DBF80000 		ldr	r0, [fp]
5892:src/xeq.c     **** 	}
 27461              		.loc 1 5892 31 view .LVU7210
 27462 012c B2F8DE17 		ldrh	r1, [r2, #2014]
 27463 0130 0193     		str	r3, [sp, #4]
 27464              	.LVL2116:
5884:src/xeq.c     **** 			n = old_size;
 27465              		.loc 1 5884 6 view .LVU7211
 27466 0132 9D42     		cmp	r5, r3
5885:src/xeq.c     **** 			size -= old_size;
 27467              		.loc 1 5885 4 is_stmt 1 view .LVU7212
 27468              	.LVL2117:
5886:src/xeq.c     **** 		}
 27469              		.loc 1 5886 4 view .LVU7213
5886:src/xeq.c     **** 		}
 27470              		.loc 1 5886 9 is_stmt 0 view .LVU7214
 27471 0134 C4BF     		itt	gt
 27472 0136 ED1A     		subgt	r5, r5, r3
 27473              	.LVL2118:
5886:src/xeq.c     **** 		}
 27474              		.loc 1 5886 9 view .LVU7215
 27475 0138 4FEA450A 		lslgt	r10, r5, #1
5892:src/xeq.c     **** 	}
 27476              		.loc 1 5892 29 view .LVU7216
 27477 013c 41F34A11 		sbfx	r1, r1, #5, #11
 27478 0140 C8BF     		it	gt
 27479 0142 1D46     		movgt	r5, r3
 27480              	.LVL2119:
5892:src/xeq.c     **** 	}
 27481              		.loc 1 5892 3 is_stmt 1 view .LVU7217
 27482 0144 00EB4101 		add	r1, r0, r1, lsl #1
 27483 0148 4FEA4502 		lsl	r2, r5, #1
 27484 014c 00EB4600 		add	r0, r0, r6, lsl #1
 27485 0150 D8BF     		it	le
ARM GAS  /tmp/cc7LeJ71.s 			page 702


 27486 0152 4FF0000A 		movle	r10, #0
 27487 0156 FFF7FEFF 		bl	xcopy
 27488              	.LVL2120:
5892:src/xeq.c     **** 	}
 27489              		.loc 1 5892 3 is_stmt 0 view .LVU7218
 27490 015a 019B     		ldr	r3, [sp, #4]
 27491 015c 3344     		add	r3, r3, r6
 27492 015e 5B00     		lsls	r3, r3, #1
5892:src/xeq.c     **** 	}
 27493              		.loc 1 5892 16 view .LVU7219
 27494 0160 7600     		lsls	r6, r6, #1
 27495              	.LVL2121:
5892:src/xeq.c     **** 	}
 27496              		.loc 1 5892 16 view .LVU7220
 27497 0162 8BE7     		b	.L1971
 27498              	.LVL2122:
 27499              	.L1983:
5892:src/xeq.c     **** 	}
 27500              		.loc 1 5892 16 view .LVU7221
 27501 0164 7600     		lsls	r6, r6, #1
 27502              	.LVL2123:
5892:src/xeq.c     **** 	}
 27503              		.loc 1 5892 16 view .LVU7222
 27504              	.LBE3590:
5873:src/xeq.c     **** 	}
 27505              		.loc 1 5873 13 view .LVU7223
 27506 0166 0788     		ldrh	r7, [r0]
 27507 0168 DFF820B0 		ldr	fp, .L1985+12
 27508 016c 4FEA450A 		lsl	r10, r5, #1
 27509 0170 3346     		mov	r3, r6
 27510 0172 83E7     		b	.L1971
 27511              	.LVL2124:
 27512              	.L1984:
5873:src/xeq.c     **** 	}
 27513              		.loc 1 5873 13 view .LVU7224
 27514 0174 7600     		lsls	r6, r6, #1
 27515              	.LVL2125:
5873:src/xeq.c     **** 	}
 27516              		.loc 1 5873 13 view .LVU7225
 27517 0176 4FEA450A 		lsl	r10, r5, #1
5881:src/xeq.c     **** 		// move previous contents to new destination
 27518              		.loc 1 5881 5 view .LVU7226
 27519 017a 3346     		mov	r3, r6
 27520              	.LVL2126:
5881:src/xeq.c     **** 		// move previous contents to new destination
 27521              		.loc 1 5881 5 view .LVU7227
 27522 017c 7EE7     		b	.L1971
 27523              	.L1986:
 27524 017e 00BF     		.align	2
 27525              	.L1985:
 27526 0180 00000000 		.word	RetStkSize
 27527 0184 00000000 		.word	Error
 27528 0188 00000000 		.word	main_ram
 27529 018c 00000000 		.word	RetStk
 27530              		.cfi_endproc
 27531              	.LFE265:
 27533              		.section	.text.cmdxout,"ax",%progbits
ARM GAS  /tmp/cc7LeJ71.s 			page 703


 27534              		.align	1
 27535              		.p2align 2,,3
 27536              		.global	cmdxout
 27537              		.syntax unified
 27538              		.thumb
 27539              		.thumb_func
 27540              		.fpu fpv4-sp-d16
 27542              	cmdxout:
 27543              	.LVL2127:
 27544              	.LFB267:
5902:src/xeq.c     **** 
5903:src/xeq.c     **** 
5904:src/xeq.c     **** /*
5905:src/xeq.c     ****  *  xIN: Setup an environment for XROM based math routines:
5906:src/xeq.c     ****  *
5907:src/xeq.c     ****  *  - 12 Private double precision stack & special registers X to K
5908:src/xeq.c     ****  *  - private return stack for local flags & registers
5909:src/xeq.c     ****  *  - 6 system flags
5910:src/xeq.c     ****  *
5911:src/xeq.c     ****  *  Argument:
5912:src/xeq.c     ****  *      noLocals - bit 7
5913:src/xeq.c     ****  *      out      - bits 4..5
5914:src/xeq.c     ****  *      in       - bits 2..4		
5915:src/xeq.c     ****  *      setLastX - bit 1
5916:src/xeq.c     ****  *      complex  - bit 0
5917:src/xeq.c     ****  *
5918:src/xeq.c     ****  *  Local flags:
5919:src/xeq.c     ****  *      .00 to .09 are free for general use.
5920:src/xeq.c     ****  *	.10 - stack_depth as previously set by user, don't touch it!
5921:src/xeq.c     ****  *	.11 - mode_double as previously set by user, don't touch it!
5922:src/xeq.c     ****  *      .12 - complex, from argument, can be modified.
5923:src/xeq.c     ****  *	.13 - setLastX, from argumment, can be modified.
5924:src/xeq.c     ****  *	.14 - state_lift as desired on exit, set to 1 by default, can be modified.
5925:src/xeq.c     ****  *      .15 - reserved, indicates that xIN is active, set to 1, don't touch it!
5926:src/xeq.c     ****  *
5927:src/xeq.c     ****  *  If the call is repeated only the argument values are reevaluated.
5928:src/xeq.c     ****  */
5929:src/xeq.c     **** void cmdxin(unsigned int arg, enum rarg op) {
5930:src/xeq.c     **** 
5931:src/xeq.c     **** 	int i;
5932:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5933:src/xeq.c     **** 	REGISTER *previousLocals = NULL;
5934:src/xeq.c     **** 	unsigned short previousFlags = 0;
5935:src/xeq.c     **** 	int num_locals = 0;
5936:src/xeq.c     **** #endif
5937:src/xeq.c     **** #ifndef REALBUILD
5938:src/xeq.c     **** 	/* This should never happen in a real build but it causes havoc writing
5939:src/xeq.c     **** 	 * xrom code, so trap it here.
5940:src/xeq.c     **** 	 */
5941:src/xeq.c     **** 	if (XromFlags.xIN) {
5942:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
5943:src/xeq.c     **** 		return;
5944:src/xeq.c     **** 	}
5945:src/xeq.c     **** #endif
5946:src/xeq.c     **** 
5947:src/xeq.c     **** 	// Setup the XromLocal and XromParams structures in volatile RAM
5948:src/xeq.c     **** 	// fill with 0
ARM GAS  /tmp/cc7LeJ71.s 			page 704


5949:src/xeq.c     **** 	xset(&XromLocal, 0, sizeof(XromLocal));
5950:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
5951:src/xeq.c     **** 
5952:src/xeq.c     **** 	// Flags
5953:src/xeq.c     **** 	XromFlags.state_lift_in = get_lift();
5954:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
5955:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
5956:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
5957:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
5958:src/xeq.c     **** 	XromFlags.state_lift = 1;
5959:src/xeq.c     **** 	XromFlags.xIN = 1;
5960:src/xeq.c     **** 
5961:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5962:src/xeq.c     **** 	// Save pointers to original local data
5963:src/xeq.c     **** 	if ((arg & 0x80) != 0 && LocalRegs < 0) {
5964:src/xeq.c     **** 		XromFlags.copyLocals = 1;
5965:src/xeq.c     **** 		previousFlags = *flag_word(LOCAL_FLAG_BASE, NULL);
5966:src/xeq.c     **** 		previousLocals = get_reg_n(LOCAL_REG_BASE);
5967:src/xeq.c     **** 		num_locals = local_regs();
5968:src/xeq.c     **** 	}
5969:src/xeq.c     **** #endif
5970:src/xeq.c     **** 	// Establish local return stack
5971:src/xeq.c     **** 	XromUserRetStk = RetStk;
5972:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
5973:src/xeq.c     **** 
5974:src/xeq.c     **** 	RetStk = XromRetStk;
5975:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5976:src/xeq.c     **** 	RetStkPtr = 0;			// Locals will be allocated later
5977:src/xeq.c     **** #else
5978:src/xeq.c     **** 	LocalRegs = RetStkPtr = -2;	// Allocate just the local flags
5979:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
5980:src/xeq.c     **** #endif
5981:src/xeq.c     **** 
5982:src/xeq.c     **** 	// Parse the argument into fields
5983:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
5984:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x20) != 0;
5985:src/xeq.c     **** 	XromFlags.complex = (arg & 0x40) != 0;
5986:src/xeq.c     **** 	XromIn = (arg & 0x1f) % 5;
5987:src/xeq.c     **** 	XromOut = (arg & 0x1f) / 5;
5988:src/xeq.c     **** #else
5989:src/xeq.c     **** 	XromFlags.setLastX = (arg & 0x40) != 0;
5990:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
5991:src/xeq.c     **** 	XromIn = (arg & 0x7);
5992:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
5993:src/xeq.c     **** #endif
5994:src/xeq.c     **** 	if (XromFlags.complex) {
5995:src/xeq.c     **** 		// Complex arguments are always in pairs
5996:src/xeq.c     **** 		XromIn <<= 1;
5997:src/xeq.c     **** 		XromOut <<= 1;
5998:src/xeq.c     **** 	}
5999:src/xeq.c     **** 
6000:src/xeq.c     ****         UState.rounding_mode = 0;
6001:src/xeq.c     **** 
6002:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6003:src/xeq.c     **** 	// Allocate the local frame
6004:src/xeq.c     **** 	LocalRegs = 0;
6005:src/xeq.c     **** 	UState.mode_double = 1;		// Needed to allocate enough registers
ARM GAS  /tmp/cc7LeJ71.s 			page 705


6006:src/xeq.c     **** 	cmdlocr(num_locals, RARG_LOCR);
6007:src/xeq.c     **** 	if (XromFlags.copyLocals)
6008:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = previousFlags;
6009:src/xeq.c     **** #endif
6010:src/xeq.c     **** 	// Switch to double precision mode
6011:src/xeq.c     **** 	if (XromFlags.mode_int) {
6012:src/xeq.c     **** 		// Convert integers to decimal128
6013:src/xeq.c     **** #ifndef ENABLE_COPYLOCALS
6014:src/xeq.c     **** 		UState.mode_double = 1;
6015:src/xeq.c     **** #endif
6016:src/xeq.c     **** 		op_float(OP_FLOAT_XIN);
6017:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
6018:src/xeq.c     **** 	}
6019:src/xeq.c     **** 	else if (XromFlags.mode_double) {
6020:src/xeq.c     **** 		// No conversion necessary
6021:src/xeq.c     **** 		xcopy(XromStack, StackBase, sizeof(XromStack));
6022:src/xeq.c     **** 		StackBase = XromStack;
6023:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6024:src/xeq.c     **** 		if (XromFlags.copyLocals)
6025:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), previousLocals, num_locals);
6026:src/xeq.c     **** #endif
6027:src/xeq.c     **** 	}
6028:src/xeq.c     **** 	else {
6029:src/xeq.c     **** 		// Convert decimal64 to decinal128
6030:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6031:src/xeq.c     **** 		UState.mode_double = 0;		// This was the original state before xIN
6032:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
6033:src/xeq.c     **** 		if (XromFlags.copyLocals) {
6034:src/xeq.c     **** 			decimal64  *src  = &(previousLocals->s);
6035:src/xeq.c     **** 			decimal128 *dest = &(get_reg_n(LOCAL_REG_BASE)->d);
6036:src/xeq.c     **** 			while (num_locals--)
6037:src/xeq.c     **** 				packed128_from_packed(dest++, src++);
6038:src/xeq.c     **** 		}
6039:src/xeq.c     **** #else
6040:src/xeq.c     **** 		op_double(OP_DBLON);		// Now mode_double should be set again
6041:src/xeq.c     **** #endif
6042:src/xeq.c     **** 	}
6043:src/xeq.c     **** 
6044:src/xeq.c     **** 	// Set stack size to 8 and turn on stack_lift
6045:src/xeq.c     **** 	set_lift();
6046:src/xeq.c     **** 	UState.stack_depth = 1;
6047:src/xeq.c     **** 
6048:src/xeq.c     **** 	// check for any NaNs in input
6049:src/xeq.c     **** 	for (i = 0; i < XromIn; ++i) {
6050:src/xeq.c     **** 		decNumber x;
6051:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
6052:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
6053:src/xeq.c     **** 			// domain error
6054:src/xeq.c     **** 			if (get_user_flag(NAN_FLAG)) {
6055:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
6056:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
6057:src/xeq.c     **** 				// Early exit of routine
6058:src/xeq.c     **** 				cmdxout(0, RARG_XROM_OUT);
6059:src/xeq.c     **** 			} 
6060:src/xeq.c     **** 			else
6061:src/xeq.c     **** 				report_err(ERR_DOMAIN);	// this will do all the cleanup
6062:src/xeq.c     **** 			return;
ARM GAS  /tmp/cc7LeJ71.s 			page 706


6063:src/xeq.c     **** 		}
6064:src/xeq.c     **** 	}
6065:src/xeq.c     **** }
6066:src/xeq.c     **** 
6067:src/xeq.c     **** /*
6068:src/xeq.c     ****  *  xOUT: Return from an XROM routine that has previously called xIN
6069:src/xeq.c     ****  *  Argument:
6070:src/xeq.c     ****  *     bit 0 set - do a RTN+1
6071:src/xeq.c     ****  *     bit 1 set - leave I alone even with a complex result
6072:src/xeq.c     ****  */
6073:src/xeq.c     **** void cmdxout(unsigned int arg, enum rarg op) {
 27545              		.loc 1 6073 46 is_stmt 1 view -0
 27546              		.cfi_startproc
 27547              		@ args = 0, pretend = 0, frame = 56
 27548              		@ frame_needed = 0, uses_anonymous_args = 0
6074:src/xeq.c     **** 	int i, dbl, intm;
 27549              		.loc 1 6074 2 view .LVU7229
6075:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6076:src/xeq.c     **** 	unsigned short flags = *flag_word(LOCAL_FLAG_BASE, NULL);
6077:src/xeq.c     **** 	REGISTER *locals = get_reg_n(LOCAL_REG_BASE);
6078:src/xeq.c     **** 	int num_locals = local_regs();
6079:src/xeq.c     **** #endif
6080:src/xeq.c     **** #ifndef REALBUILD
6081:src/xeq.c     **** 	// shouldn't happen in final build
6082:src/xeq.c     **** 	if (! XromFlags.xIN) {
 27550              		.loc 1 6082 2 view .LVU7230
6073:src/xeq.c     **** 	int i, dbl, intm;
 27551              		.loc 1 6073 46 is_stmt 0 view .LVU7231
 27552 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 27553              		.cfi_def_cfa_offset 36
 27554              		.cfi_offset 4, -36
 27555              		.cfi_offset 5, -32
 27556              		.cfi_offset 6, -28
 27557              		.cfi_offset 7, -24
 27558              		.cfi_offset 8, -20
 27559              		.cfi_offset 9, -16
 27560              		.cfi_offset 10, -12
 27561              		.cfi_offset 11, -8
 27562              		.cfi_offset 14, -4
 27563              		.loc 1 6082 6 view .LVU7232
 27564 0004 794C     		ldr	r4, .L2033
 27565              		.loc 1 6082 5 view .LVU7233
 27566 0006 94F90130 		ldrsb	r3, [r4, #1]
 27567 000a 002B     		cmp	r3, #0
6073:src/xeq.c     **** 	int i, dbl, intm;
 27568              		.loc 1 6073 46 view .LVU7234
 27569 000c 8FB0     		sub	sp, sp, #60
 27570              		.cfi_def_cfa_offset 96
 27571              		.loc 1 6082 5 view .LVU7235
 27572 000e 07DB     		blt	.L1988
6083:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 27573              		.loc 1 6083 3 is_stmt 1 view .LVU7236
 27574              	.LVL2128:
 27575              	.LBB3614:
 27576              	.LBI3614:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27577              		.loc 1 546 5 view .LVU7237
ARM GAS  /tmp/cc7LeJ71.s 			page 707


 27578              	.LBB3615:
 547:src/xeq.c     **** 		Error = e;
 27579              		.loc 1 547 2 view .LVU7238
 547:src/xeq.c     **** 		Error = e;
 27580              		.loc 1 547 12 is_stmt 0 view .LVU7239
 27581 0010 774B     		ldr	r3, .L2033+4
 547:src/xeq.c     **** 		Error = e;
 27582              		.loc 1 547 5 view .LVU7240
 27583 0012 1A68     		ldr	r2, [r3]
 27584 0014 0AB9     		cbnz	r2, .L1987
 27585              	.LVL2129:
 27586              	.LBB3616:
 27587              	.LBI3616:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 27588              		.loc 1 546 5 is_stmt 1 view .LVU7241
 27589              	.LBB3617:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27590              		.loc 1 548 3 view .LVU7242
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 27591              		.loc 1 548 9 is_stmt 0 view .LVU7243
 27592 0016 0722     		movs	r2, #7
 27593 0018 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27594              		.loc 1 549 3 is_stmt 1 view .LVU7244
 27595              	.LVL2130:
 27596              	.L1987:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 27597              		.loc 1 549 3 is_stmt 0 view .LVU7245
 27598              	.LBE3617:
 27599              	.LBE3616:
 27600              	.LBE3615:
 27601              	.LBE3614:
6084:src/xeq.c     **** 		return;
6085:src/xeq.c     **** 	}
6086:src/xeq.c     **** #endif
6087:src/xeq.c     **** 	// End special handling
6088:src/xeq.c     **** 	XromFlags.xIN = 0;
6089:src/xeq.c     **** 
6090:src/xeq.c     **** 	// Restore the global return stack
6091:src/xeq.c     **** 	RetStk = XromUserRetStk;
6092:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
6093:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
6094:src/xeq.c     **** 
6095:src/xeq.c     **** 	// RTN or RTN+1 depending on bit 0 of argument
6096:src/xeq.c     **** 	do_rtn(arg & 1);
6097:src/xeq.c     **** 
6098:src/xeq.c     **** 	// Switch back to user stack settings
6099:src/xeq.c     **** 	dbl = UState.mode_double = XromFlags.mode_double;
6100:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
6101:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
6102:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
6103:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
6104:src/xeq.c     **** 
6105:src/xeq.c     **** 	// Last X handling and complex flag
6106:src/xeq.c     **** 	if (XromFlags.setLastX) {
6107:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
6108:src/xeq.c     **** 			setlastXY();
ARM GAS  /tmp/cc7LeJ71.s 			page 708


6109:src/xeq.c     **** 		else
6110:src/xeq.c     **** 			setlastX();
6111:src/xeq.c     **** 	}
6112:src/xeq.c     **** 
6113:src/xeq.c     **** 	// Move the stack according to the in/out fields
6114:src/xeq.c     **** 	i = (int) XromOut - (int) XromIn;
6115:src/xeq.c     **** 	if (XromFlags.complex) {
6116:src/xeq.c     **** 		set_was_complex();
6117:src/xeq.c     **** 		while (i < 0) {
6118:src/xeq.c     **** 			// different stack handling in complex mode
6119:src/xeq.c     **** 			// more to consume then to push back
6120:src/xeq.c     **** 			lower2();
6121:src/xeq.c     **** 			i += 2;
6122:src/xeq.c     **** 		}
6123:src/xeq.c     **** 	}
6124:src/xeq.c     **** 	else {
6125:src/xeq.c     **** 		while (i < 0) {
6126:src/xeq.c     **** 			// more to consume then to push back
6127:src/xeq.c     **** 			lower();	
6128:src/xeq.c     **** 			++i;
6129:src/xeq.c     **** 		}
6130:src/xeq.c     **** 	}
6131:src/xeq.c     **** 	if (i > 0) {
6132:src/xeq.c     **** 		// more to push back then to consume
6133:src/xeq.c     **** 		if (! XromFlags.state_lift_in)
6134:src/xeq.c     **** 			--i;
6135:src/xeq.c     **** 		while (i > 0) {
6136:src/xeq.c     **** 			lift();
6137:src/xeq.c     **** 			--i;
6138:src/xeq.c     **** 		}
6139:src/xeq.c     **** 	}
6140:src/xeq.c     **** 	State2.state_lift = XromFlags.state_lift;
6141:src/xeq.c     **** 
6142:src/xeq.c     **** 	// Copy results
6143:src/xeq.c     **** 	i = XromOut;
6144:src/xeq.c     **** 	if (intm) {
6145:src/xeq.c     **** 		while (i--) {
6146:src/xeq.c     **** 			decNumber r;
6147:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
6148:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
6149:src/xeq.c     **** 		}
6150:src/xeq.c     **** 	}
6151:src/xeq.c     **** 	else if (dbl) {
6152:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
6153:src/xeq.c     **** 	}
6154:src/xeq.c     **** 	else {
6155:src/xeq.c     **** 		while (i--)
6156:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
6157:src/xeq.c     **** 	}
6158:src/xeq.c     **** 
6159:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
6160:src/xeq.c     **** 	// Copy back local data
6161:src/xeq.c     **** 	if (XromFlags.copyLocals) {
6162:src/xeq.c     **** 		i = local_regs();
6163:src/xeq.c     **** 		num_locals = i < num_locals ? i : num_locals; 
6164:src/xeq.c     **** 		*flag_word(LOCAL_FLAG_BASE, NULL) = flags;
6165:src/xeq.c     **** 		if (intm) {
ARM GAS  /tmp/cc7LeJ71.s 			page 709


6166:src/xeq.c     **** 			// not used
6167:src/xeq.c     **** 		}
6168:src/xeq.c     **** 		else if (dbl) {
6169:src/xeq.c     **** 			move_regs(get_reg_n(LOCAL_REG_BASE), locals, num_locals);
6170:src/xeq.c     **** 		}
6171:src/xeq.c     **** 		else {
6172:src/xeq.c     **** 			decimal64  *dest = &(get_reg_n(LOCAL_REG_BASE)->s);
6173:src/xeq.c     **** 			decimal128 *src  = &(locals->d);
6174:src/xeq.c     **** 			while (num_locals--)
6175:src/xeq.c     **** 				packed_from_packed128(dest++, src++);
6176:src/xeq.c     **** 		}
6177:src/xeq.c     **** 	}
6178:src/xeq.c     **** #endif
6179:src/xeq.c     **** }
 27602              		.loc 1 6179 1 view .LVU7246
 27603 001a 0FB0     		add	sp, sp, #60
 27604              		.cfi_remember_state
 27605              		.cfi_def_cfa_offset 36
 27606              		@ sp needed
 27607 001c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27608              	.LVL2131:
 27609              	.L1988:
 27610              		.cfi_restore_state
 27611              	.LBB3618:
 27612              	.LBB3619:
6088:src/xeq.c     **** 
 27613              		.loc 1 6088 16 view .LVU7247
 27614 0020 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6092:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27615              		.loc 1 6092 2 view .LVU7248
 27616 0022 744F     		ldr	r7, .L2033+8
6091:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27617              		.loc 1 6091 9 view .LVU7249
 27618 0024 A668     		ldr	r6, [r4, #8]
6092:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27619              		.loc 1 6092 2 view .LVU7250
 27620 0026 3B68     		ldr	r3, [r7]
6093:src/xeq.c     **** 
 27621              		.loc 1 6093 12 view .LVU7251
 27622 0028 7349     		ldr	r1, .L2033+12
 27623              	.LVL2132:
6103:src/xeq.c     **** 
 27624              		.loc 1 6103 12 view .LVU7252
 27625 002a DFF8E0A1 		ldr	r10, .L2033+32
6093:src/xeq.c     **** 
 27626              		.loc 1 6093 12 view .LVU7253
 27627 002e 0968     		ldr	r1, [r1]
 27628 0030 0546     		mov	r5, r0
 27629              	.LVL2133:
6093:src/xeq.c     **** 
 27630              		.loc 1 6093 12 view .LVU7254
 27631              	.LBE3619:
 27632              	.LBI3618:
6073:src/xeq.c     **** 	int i, dbl, intm;
 27633              		.loc 1 6073 6 is_stmt 1 view .LVU7255
 27634              	.LBB3648:
6088:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 710


 27635              		.loc 1 6088 2 view .LVU7256
6091:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27636              		.loc 1 6091 9 is_stmt 0 view .LVU7257
 27637 0032 7248     		ldr	r0, .L2033+16
 27638              	.LVL2134:
6088:src/xeq.c     **** 
 27639              		.loc 1 6088 16 view .LVU7258
 27640 0034 6FF3C712 		bfc	r2, #7, #1
6091:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27641              		.loc 1 6091 9 view .LVU7259
 27642 0038 0660     		str	r6, [r0]
6088:src/xeq.c     **** 
 27643              		.loc 1 6088 16 view .LVU7260
 27644 003a 6270     		strb	r2, [r4, #1]
6091:src/xeq.c     **** 	RetStkPtr = XromUserRetStkPtr;
 27645              		.loc 1 6091 2 is_stmt 1 view .LVU7261
6092:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27646              		.loc 1 6092 2 view .LVU7262
6093:src/xeq.c     **** 
 27647              		.loc 1 6093 12 is_stmt 0 view .LVU7263
 27648 003c B3F8DE27 		ldrh	r2, [r3, #2014]
6092:src/xeq.c     **** 	LocalRegs = UserLocalRegs;	// set by dispatch_xrom()
 27649              		.loc 1 6092 12 view .LVU7264
 27650 0040 A089     		ldrh	r0, [r4, #12]
 27651 0042 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
6093:src/xeq.c     **** 
 27652              		.loc 1 6093 2 is_stmt 1 view .LVU7265
6093:src/xeq.c     **** 
 27653              		.loc 1 6093 12 is_stmt 0 view .LVU7266
 27654 0046 61F34F12 		bfi	r2, r1, #5, #11
 27655 004a A3F8DE27 		strh	r2, [r3, #2014]	@ movhi
6096:src/xeq.c     **** 
 27656              		.loc 1 6096 2 is_stmt 1 view .LVU7267
 27657 004e 05F00100 		and	r0, r5, #1
 27658 0052 FFF7FEFF 		bl	do_rtn
 27659              	.LVL2135:
6099:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27660              		.loc 1 6099 2 view .LVU7268
6099:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27661              		.loc 1 6099 38 is_stmt 0 view .LVU7269
 27662 0056 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6099:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27663              		.loc 1 6099 8 view .LVU7270
 27664 0058 3868     		ldr	r0, [r7]
6101:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27665              		.loc 1 6101 41 view .LVU7271
 27666 005a A678     		ldrb	r6, [r4, #2]	@ zero_extendqisi2
6100:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27667              		.loc 1 6100 21 view .LVU7272
 27668 005c D0F8E827 		ldr	r2, [r0, #2024]
6099:src/xeq.c     **** 	intm = UState.intm = XromFlags.mode_int;
 27669              		.loc 1 6099 38 view .LVU7273
 27670 0060 C3F3C009 		ubfx	r9, r3, #3, #1
 27671              	.LVL2136:
6100:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27672              		.loc 1 6100 2 is_stmt 1 view .LVU7274
6100:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
ARM GAS  /tmp/cc7LeJ71.s 			page 711


 27673              		.loc 1 6100 32 is_stmt 0 view .LVU7275
 27674 0064 03F00108 		and	r8, r3, #1
 27675              	.LVL2137:
6101:src/xeq.c     **** 	UState.stack_depth = XromFlags.stack_depth;
 27676              		.loc 1 6101 9 is_stmt 1 view .LVU7276
6102:src/xeq.c     **** 	StackBase = get_reg_n(regX_idx);
 27677              		.loc 1 6102 2 view .LVU7277
6100:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27678              		.loc 1 6100 21 is_stmt 0 view .LVU7278
 27679 0068 C3F38001 		ubfx	r1, r3, #2, #1
 27680 006c 48EA8933 		orr	r3, r8, r9, lsl #14
 27681              	.LVL2138:
6100:src/xeq.c     ****         UState.rounding_mode = XromFlags.rounding_mode;
 27682              		.loc 1 6100 21 view .LVU7279
 27683 0070 43EAC143 		orr	r3, r3, r1, lsl #19
 27684 0074 6249     		ldr	r1, .L2033+20
 27685 0076 06F00706 		and	r6, r6, #7
 27686 007a 1140     		ands	r1, r1, r2
 27687 007c 43EA0673 		orr	r3, r3, r6, lsl #28
 27688 0080 0B43     		orrs	r3, r3, r1
 27689 0082 C0F8E837 		str	r3, [r0, #2024]
6103:src/xeq.c     **** 
 27690              		.loc 1 6103 2 is_stmt 1 view .LVU7280
6103:src/xeq.c     **** 
 27691              		.loc 1 6103 14 is_stmt 0 view .LVU7281
 27692 0086 6420     		movs	r0, #100
 27693 0088 FFF7FEFF 		bl	get_reg_n
 27694              	.LVL2139:
6106:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27695              		.loc 1 6106 6 view .LVU7282
 27696 008c 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6103:src/xeq.c     **** 
 27697              		.loc 1 6103 12 view .LVU7283
 27698 008e CAF80000 		str	r0, [r10]
6106:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27699              		.loc 1 6106 2 is_stmt 1 view .LVU7284
6106:src/xeq.c     **** 		if (XromFlags.complex && ! (arg & 2))
 27700              		.loc 1 6106 5 is_stmt 0 view .LVU7285
 27701 0092 9606     		lsls	r6, r2, #26
 27702 0094 09D5     		bpl	.L1991
6107:src/xeq.c     **** 			setlastXY();
 27703              		.loc 1 6107 3 is_stmt 1 view .LVU7286
6107:src/xeq.c     **** 			setlastXY();
 27704              		.loc 1 6107 6 is_stmt 0 view .LVU7287
 27705 0096 D006     		lsls	r0, r2, #27
 27706 0098 02D5     		bpl	.L1992
6107:src/xeq.c     **** 			setlastXY();
 27707              		.loc 1 6107 25 view .LVU7288
 27708 009a A907     		lsls	r1, r5, #30
 27709 009c 40F19F80 		bpl	.L2029
 27710              	.L1992:
6110:src/xeq.c     **** 	}
 27711              		.loc 1 6110 4 is_stmt 1 view .LVU7289
 27712              	.LBB3620:
 27713              	.LBI3620:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 27714              		.loc 1 792 6 view .LVU7290
ARM GAS  /tmp/cc7LeJ71.s 			page 712


 27715              	.LBB3621:
 793:src/xeq.c     **** }
 27716              		.loc 1 793 2 view .LVU7291
 27717 00a0 6421     		movs	r1, #100
 27718 00a2 6C20     		movs	r0, #108
 27719 00a4 FFF7FEFF 		bl	copyreg_n
 27720              	.LVL2140:
 27721 00a8 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 27722              	.L1991:
 27723              	.LBE3621:
 27724              	.LBE3620:
6114:src/xeq.c     **** 	if (XromFlags.complex) {
 27725              		.loc 1 6114 2 view .LVU7292
6114:src/xeq.c     **** 	if (XromFlags.complex) {
 27726              		.loc 1 6114 6 is_stmt 0 view .LVU7293
 27727 00aa 94F805B0 		ldrb	fp, [r4, #5]	@ zero_extendqisi2
6114:src/xeq.c     **** 	if (XromFlags.complex) {
 27728              		.loc 1 6114 22 view .LVU7294
 27729 00ae 2379     		ldrb	r3, [r4, #4]	@ zero_extendqisi2
6115:src/xeq.c     **** 		set_was_complex();
 27730              		.loc 1 6115 5 view .LVU7295
 27731 00b0 D206     		lsls	r2, r2, #27
6114:src/xeq.c     **** 	if (XromFlags.complex) {
 27732              		.loc 1 6114 4 view .LVU7296
 27733 00b2 ABEB030B 		sub	fp, fp, r3
 27734              	.LVL2141:
6115:src/xeq.c     **** 		set_was_complex();
 27735              		.loc 1 6115 2 is_stmt 1 view .LVU7297
6115:src/xeq.c     **** 		set_was_complex();
 27736              		.loc 1 6115 5 is_stmt 0 view .LVU7298
 27737 00b6 2BD5     		bpl	.L2030
6116:src/xeq.c     **** 		while (i < 0) {
 27738              		.loc 1 6116 3 is_stmt 1 view .LVU7299
 27739              	.LBB3622:
 27740              	.LBI3622:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 27741              		.loc 1 539 13 view .LVU7300
 27742              	.LBB3623:
 540:src/xeq.c     **** }
 27743              		.loc 1 540 2 view .LVU7301
 540:src/xeq.c     **** }
 27744              		.loc 1 540 20 is_stmt 0 view .LVU7302
 27745 00b8 524E     		ldr	r6, .L2033+24
 27746 00ba 327D     		ldrb	r2, [r6, #20]	@ zero_extendqisi2
 27747 00bc 0121     		movs	r1, #1
 27748 00be 61F38712 		bfi	r2, r1, #6, #2
 27749              	.LBE3623:
 27750              	.LBE3622:
6117:src/xeq.c     **** 			// different stack handling in complex mode
 27751              		.loc 1 6117 9 view .LVU7303
 27752 00c2 BBF1000F 		cmp	fp, #0
 27753              	.LBB3625:
 27754              	.LBB3624:
 540:src/xeq.c     **** }
 27755              		.loc 1 540 20 view .LVU7304
 27756 00c6 3275     		strb	r2, [r6, #20]
 540:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 713


 27757              		.loc 1 540 20 view .LVU7305
 27758              	.LBE3624:
 27759              	.LBE3625:
6117:src/xeq.c     **** 			// different stack handling in complex mode
 27760              		.loc 1 6117 9 is_stmt 1 view .LVU7306
 27761 00c8 13DA     		bge	.L1995
 27762 00ca 6FEA0B03 		mvn	r3, fp
 27763 00ce 23F00105 		bic	r5, r3, #1
 27764              	.LVL2142:
6117:src/xeq.c     **** 			// different stack handling in complex mode
 27765              		.loc 1 6117 9 is_stmt 0 view .LVU7307
 27766 00d2 0093     		str	r3, [sp]
 27767 00d4 0BF10203 		add	r3, fp, #2
 27768 00d8 0193     		str	r3, [sp, #4]
 27769 00da 1D44     		add	r5, r5, r3
 27770              	.L1996:
6120:src/xeq.c     **** 			i += 2;
 27771              		.loc 1 6120 4 is_stmt 1 view .LVU7308
6121:src/xeq.c     **** 		}
 27772              		.loc 1 6121 6 is_stmt 0 view .LVU7309
 27773 00dc 0BF1020B 		add	fp, fp, #2
 27774              	.LVL2143:
6120:src/xeq.c     **** 			i += 2;
 27775              		.loc 1 6120 4 view .LVU7310
 27776 00e0 FFF7FEFF 		bl	lower2
 27777              	.LVL2144:
6121:src/xeq.c     **** 		}
 27778              		.loc 1 6121 4 is_stmt 1 view .LVU7311
6117:src/xeq.c     **** 			// different stack handling in complex mode
 27779              		.loc 1 6117 9 view .LVU7312
 27780 00e4 AB45     		cmp	fp, r5
 27781 00e6 F9D1     		bne	.L1996
 27782 00e8 009B     		ldr	r3, [sp]
 27783 00ea 23F0010B 		bic	fp, r3, #1
 27784              	.LVL2145:
6117:src/xeq.c     **** 			// different stack handling in complex mode
 27785              		.loc 1 6117 9 is_stmt 0 view .LVU7313
 27786 00ee 019B     		ldr	r3, [sp, #4]
 27787 00f0 9B44     		add	fp, fp, r3
 27788              	.L1995:
 27789              	.LVL2146:
6131:src/xeq.c     **** 		// more to push back then to consume
 27790              		.loc 1 6131 2 is_stmt 1 view .LVU7314
6131:src/xeq.c     **** 		// more to push back then to consume
 27791              		.loc 1 6131 5 is_stmt 0 view .LVU7315
 27792 00f2 BBF1000F 		cmp	fp, #0
 27793 00f6 14D0     		beq	.L1997
6133:src/xeq.c     **** 			--i;
 27794              		.loc 1 6133 3 is_stmt 1 view .LVU7316
6133:src/xeq.c     **** 			--i;
 27795              		.loc 1 6133 7 is_stmt 0 view .LVU7317
 27796 00f8 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
6133:src/xeq.c     **** 			--i;
 27797              		.loc 1 6133 6 view .LVU7318
 27798 00fa 9307     		lsls	r3, r2, #30
 27799 00fc 02D4     		bmi	.L2002
6134:src/xeq.c     **** 		while (i > 0) {
ARM GAS  /tmp/cc7LeJ71.s 			page 714


 27800              		.loc 1 6134 4 is_stmt 1 view .LVU7319
 27801              	.LVL2147:
6135:src/xeq.c     **** 			lift();
 27802              		.loc 1 6135 9 view .LVU7320
 27803 00fe BBF1010B 		subs	fp, fp, #1
 27804              	.LVL2148:
6135:src/xeq.c     **** 			lift();
 27805              		.loc 1 6135 9 is_stmt 0 view .LVU7321
 27806 0102 0ED0     		beq	.L1997
 27807              	.L2002:
6136:src/xeq.c     **** 			--i;
 27808              		.loc 1 6136 4 is_stmt 1 view .LVU7322
 27809 0104 FFF7FEFF 		bl	lift
 27810              	.LVL2149:
6137:src/xeq.c     **** 		}
 27811              		.loc 1 6137 4 view .LVU7323
6135:src/xeq.c     **** 			lift();
 27812              		.loc 1 6135 9 view .LVU7324
 27813 0108 BBF1010B 		subs	fp, fp, #1
 27814              	.LVL2150:
6135:src/xeq.c     **** 			lift();
 27815              		.loc 1 6135 9 is_stmt 0 view .LVU7325
 27816 010c FAD1     		bne	.L2002
 27817 010e 08E0     		b	.L1997
 27818              	.LVL2151:
 27819              	.L2030:
6125:src/xeq.c     **** 			// more to consume then to push back
 27820              		.loc 1 6125 9 is_stmt 1 view .LVU7326
 27821 0110 BBF1000F 		cmp	fp, #0
 27822 0114 67DA     		bge	.L2031
 27823              	.L1994:
6127:src/xeq.c     **** 			++i;
 27824              		.loc 1 6127 4 view .LVU7327
 27825 0116 FFF7FEFF 		bl	lower
 27826              	.LVL2152:
6128:src/xeq.c     **** 		}
 27827              		.loc 1 6128 4 view .LVU7328
6125:src/xeq.c     **** 			// more to consume then to push back
 27828              		.loc 1 6125 9 view .LVU7329
 27829 011a 1BF1010B 		adds	fp, fp, #1
 27830              	.LVL2153:
6125:src/xeq.c     **** 			// more to consume then to push back
 27831              		.loc 1 6125 9 is_stmt 0 view .LVU7330
 27832 011e FAD1     		bne	.L1994
 27833 0120 384E     		ldr	r6, .L2033+24
 27834              	.LVL2154:
 27835              	.L1997:
6140:src/xeq.c     **** 
 27836              		.loc 1 6140 2 is_stmt 1 view .LVU7331
6140:src/xeq.c     **** 
 27837              		.loc 1 6140 31 is_stmt 0 view .LVU7332
 27838 0122 6378     		ldrb	r3, [r4, #1]	@ zero_extendqisi2
6140:src/xeq.c     **** 
 27839              		.loc 1 6140 20 view .LVU7333
 27840 0124 F27D     		ldrb	r2, [r6, #23]	@ zero_extendqisi2
6143:src/xeq.c     **** 	if (intm) {
 27841              		.loc 1 6143 4 view .LVU7334
ARM GAS  /tmp/cc7LeJ71.s 			page 715


 27842 0126 6479     		ldrb	r4, [r4, #5]	@ zero_extendqisi2
6140:src/xeq.c     **** 
 27843              		.loc 1 6140 31 view .LVU7335
 27844 0128 C3F38013 		ubfx	r3, r3, #6, #1
6140:src/xeq.c     **** 
 27845              		.loc 1 6140 20 view .LVU7336
 27846 012c 63F38612 		bfi	r2, r3, #6, #1
 27847 0130 F275     		strb	r2, [r6, #23]
6143:src/xeq.c     **** 	if (intm) {
 27848              		.loc 1 6143 2 is_stmt 1 view .LVU7337
 27849              	.LVL2155:
6144:src/xeq.c     **** 		while (i--) {
 27850              		.loc 1 6144 2 view .LVU7338
6144:src/xeq.c     **** 		while (i--) {
 27851              		.loc 1 6144 5 is_stmt 0 view .LVU7339
 27852 0132 B8F1000F 		cmp	r8, #0
 27853 0136 23D0     		beq	.L2032
6145:src/xeq.c     **** 			decNumber r;
 27854              		.loc 1 6145 9 is_stmt 1 view .LVU7340
6145:src/xeq.c     **** 			decNumber r;
 27855              		.loc 1 6145 11 is_stmt 0 view .LVU7341
 27856 0138 631E     		subs	r3, r4, #1
 27857              	.LVL2156:
6145:src/xeq.c     **** 			decNumber r;
 27858              		.loc 1 6145 9 view .LVU7342
 27859 013a 002C     		cmp	r4, #0
 27860 013c 3FF46DAF 		beq	.L1987
 27861 0140 314D     		ldr	r5, .L2033+28
 27862 0142 6334     		adds	r4, r4, #99
 27863 0144 05EB0315 		add	r5, r5, r3, lsl #4
 27864 0148 05AE     		add	r6, sp, #20
 27865              	.LVL2157:
 27866              	.L2004:
 27867              	.LBB3626:
6146:src/xeq.c     **** 			decimal128ToNumber(&(XromStack[i].d), &r);
 27868              		.loc 1 6146 4 is_stmt 1 view .LVU7343
6147:src/xeq.c     **** 			set_reg_n_int(regX_idx + i, intResult(&r));
 27869              		.loc 1 6147 4 view .LVU7344
 27870 014a 3146     		mov	r1, r6
 27871 014c 2846     		mov	r0, r5
 27872 014e FFF7FEFF 		bl	decimal128ToNumber
 27873              	.LVL2158:
6148:src/xeq.c     **** 		}
 27874              		.loc 1 6148 4 view .LVU7345
 27875 0152 3046     		mov	r0, r6
 27876 0154 FFF7FEFF 		bl	intResult
 27877              	.LVL2159:
6148:src/xeq.c     **** 		}
 27878              		.loc 1 6148 4 is_stmt 0 view .LVU7346
 27879 0158 0246     		mov	r2, r0
 27880 015a 0B46     		mov	r3, r1
 27881              	.LBB3627:
 27882              	.LBB3628:
1423:src/xeq.c     **** }
 27883              		.loc 1 1423 8 view .LVU7347
 27884 015c 2046     		mov	r0, r4
 27885 015e CDE90223 		strd	r2, [sp, #8]
ARM GAS  /tmp/cc7LeJ71.s 			page 716


 27886              	.LVL2160:
1423:src/xeq.c     **** }
 27887              		.loc 1 1423 8 view .LVU7348
 27888              	.LBE3628:
 27889              	.LBI3627:
1422:src/xeq.c     **** 	xcopy(get_reg_n(index), &ll, sizeof(ll));
 27890              		.loc 1 1422 6 is_stmt 1 view .LVU7349
 27891              	.LBB3629:
1423:src/xeq.c     **** }
 27892              		.loc 1 1423 2 view .LVU7350
1423:src/xeq.c     **** }
 27893              		.loc 1 1423 8 is_stmt 0 view .LVU7351
 27894 0162 FFF7FEFF 		bl	get_reg_n
 27895              	.LVL2161:
1423:src/xeq.c     **** }
 27896              		.loc 1 1423 2 view .LVU7352
 27897 0166 0822     		movs	r2, #8
 27898 0168 013C     		subs	r4, r4, #1
 27899              	.LVL2162:
1423:src/xeq.c     **** }
 27900              		.loc 1 1423 2 view .LVU7353
 27901 016a 0DEB0201 		add	r1, sp, r2
 27902 016e FFF7FEFF 		bl	xcopy
 27903              	.LVL2163:
1423:src/xeq.c     **** }
 27904              		.loc 1 1423 2 view .LVU7354
 27905              	.LBE3629:
 27906              	.LBE3627:
 27907              	.LBE3626:
6145:src/xeq.c     **** 			decNumber r;
 27908              		.loc 1 6145 9 is_stmt 1 view .LVU7355
 27909 0172 632C     		cmp	r4, #99
 27910 0174 A5F11005 		sub	r5, r5, #16
 27911 0178 E7D1     		bne	.L2004
 27912              	.LBE3648:
 27913              	.LBE3618:
 27914              		.loc 1 6179 1 is_stmt 0 view .LVU7356
 27915 017a 0FB0     		add	sp, sp, #60
 27916              		.cfi_remember_state
 27917              		.cfi_def_cfa_offset 36
 27918              		@ sp needed
 27919 017c BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 27920              	.LVL2164:
 27921              	.L2032:
 27922              		.cfi_restore_state
 27923              	.LBB3650:
 27924              	.LBB3649:
6151:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27925              		.loc 1 6151 7 is_stmt 1 view .LVU7357
6151:src/xeq.c     **** 		move_regs(StackBase, XromStack, i);
 27926              		.loc 1 6151 10 is_stmt 0 view .LVU7358
 27927 0180 B9F1000F 		cmp	r9, #0
 27928 0184 1AD1     		bne	.L2005
6155:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27929              		.loc 1 6155 9 is_stmt 1 view .LVU7359
6155:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27930              		.loc 1 6155 11 is_stmt 0 view .LVU7360
ARM GAS  /tmp/cc7LeJ71.s 			page 717


 27931 0186 631E     		subs	r3, r4, #1
 27932              	.LVL2165:
6155:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27933              		.loc 1 6155 9 view .LVU7361
 27934 0188 002C     		cmp	r4, #0
 27935 018a 3FF446AF 		beq	.L1987
 27936 018e 1E4F     		ldr	r7, .L2033+28
 27937 0190 6334     		adds	r4, r4, #99
 27938 0192 07EB0317 		add	r7, r7, r3, lsl #4
 27939 0196 05AE     		add	r6, sp, #20
 27940              	.LVL2166:
 27941              	.L2008:
6156:src/xeq.c     **** 	}
 27942              		.loc 1 6156 4 is_stmt 1 view .LVU7362
 27943              	.LBB3630:
 27944              	.LBI3630:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 27945              		.loc 1 718 11 view .LVU7363
 27946              	.LBB3631:
 719:src/xeq.c     **** }
 27947              		.loc 1 719 2 view .LVU7364
 719:src/xeq.c     **** }
 27948              		.loc 1 719 9 is_stmt 0 view .LVU7365
 27949 0198 2046     		mov	r0, r4
 27950 019a FFF7FEFF 		bl	get_reg_n
 27951              	.LVL2167:
 27952              	.LBE3631:
 27953              	.LBE3630:
 27954              	.LBB3633:
 27955              	.LBB3634:
 650:src/xeq.c     **** }
 27956              		.loc 1 650 24 view .LVU7366
 27957 019e 3146     		mov	r1, r6
 27958              	.LBE3634:
 27959              	.LBE3633:
 27960              	.LBB3636:
 27961              	.LBB3632:
 719:src/xeq.c     **** }
 27962              		.loc 1 719 9 view .LVU7367
 27963 01a0 0546     		mov	r5, r0
 27964              	.LVL2168:
 719:src/xeq.c     **** }
 27965              		.loc 1 719 9 view .LVU7368
 27966              	.LBE3632:
 27967              	.LBE3636:
 27968              	.LBB3637:
 27969              	.LBI3633:
 648:src/xeq.c     **** 	decNumber temp;
 27970              		.loc 1 648 6 is_stmt 1 view .LVU7369
 27971              	.LBB3635:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 27972              		.loc 1 649 2 view .LVU7370
 650:src/xeq.c     **** }
 27973              		.loc 1 650 2 view .LVU7371
 650:src/xeq.c     **** }
 27974              		.loc 1 650 24 is_stmt 0 view .LVU7372
 27975 01a2 3846     		mov	r0, r7
ARM GAS  /tmp/cc7LeJ71.s 			page 718


 27976              	.LVL2169:
 650:src/xeq.c     **** }
 27977              		.loc 1 650 24 view .LVU7373
 27978 01a4 FFF7FEFF 		bl	decimal128ToNumber
 27979              	.LVL2170:
 27980 01a8 013C     		subs	r4, r4, #1
 27981              	.LVL2171:
 650:src/xeq.c     **** }
 27982              		.loc 1 650 24 view .LVU7374
 27983 01aa 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 27984              		.loc 1 650 2 view .LVU7375
 27985 01ac 2846     		mov	r0, r5
 27986 01ae FFF7FEFF 		bl	packed_from_number
 27987              	.LVL2172:
 650:src/xeq.c     **** }
 27988              		.loc 1 650 2 view .LVU7376
 27989              	.LBE3635:
 27990              	.LBE3637:
6155:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27991              		.loc 1 6155 9 is_stmt 1 view .LVU7377
6155:src/xeq.c     **** 			packed_from_packed128(&(get_stack(i)->s), &(XromStack[i].d));
 27992              		.loc 1 6155 9 is_stmt 0 view .LVU7378
 27993 01b2 632C     		cmp	r4, #99
 27994 01b4 A7F11007 		sub	r7, r7, #16
 27995 01b8 EED1     		bne	.L2008
 27996 01ba 2EE7     		b	.L1987
 27997              	.LVL2173:
 27998              	.L2005:
6152:src/xeq.c     **** 	}
 27999              		.loc 1 6152 3 is_stmt 1 view .LVU7379
 28000              	.LBB3638:
 28001              	.LBB3639:
 28002              	.LBB3640:
 28003              	.LBB3641:
1119:src/xeq.c     **** }
 28004              		.loc 1 1119 24 is_stmt 0 view .LVU7380
 28005 01bc 3B68     		ldr	r3, [r7]
 28006              	.LBE3641:
 28007              	.LBE3640:
 28008              	.LBE3639:
 28009              	.LBE3638:
6152:src/xeq.c     **** 	}
 28010              		.loc 1 6152 3 view .LVU7381
 28011 01be DAF80000 		ldr	r0, [r10]
 28012              	.LVL2174:
 28013              	.LBB3647:
 28014              	.LBI3638:
1537:src/xeq.c     **** 	if (is_dblmode())
 28015              		.loc 1 1537 6 is_stmt 1 view .LVU7382
 28016              	.LBB3646:
1538:src/xeq.c     **** 		n <<= 1;
 28017              		.loc 1 1538 2 view .LVU7383
 28018              	.LBB3644:
 28019              	.LBI3640:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28020              		.loc 1 1118 5 view .LVU7384
ARM GAS  /tmp/cc7LeJ71.s 			page 719


 28021              	.LBB3642:
1119:src/xeq.c     **** }
 28022              		.loc 1 1119 2 view .LVU7385
1119:src/xeq.c     **** }
 28023              		.loc 1 1119 24 is_stmt 0 view .LVU7386
 28024 01c2 B3F8E827 		ldrh	r2, [r3, #2024]
 28025              	.LBE3642:
 28026              	.LBE3644:
1540:src/xeq.c     **** }
 28027              		.loc 1 1540 2 view .LVU7387
 28028 01c6 1049     		ldr	r1, .L2033+28
 28029              	.LBB3645:
 28030              	.LBB3643:
1119:src/xeq.c     **** }
 28031              		.loc 1 1119 24 view .LVU7388
 28032 01c8 44F20103 		movw	r3, #16385
 28033              	.LBE3643:
 28034              	.LBE3645:
1538:src/xeq.c     **** 		n <<= 1;
 28035              		.loc 1 1538 5 view .LVU7389
 28036 01cc 1340     		ands	r3, r3, r2
 28037 01ce B3F5804F 		cmp	r3, #16384
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 28038              		.loc 1 1539 3 is_stmt 1 view .LVU7390
1539:src/xeq.c     **** 	xcopy(dest, src, n << 3);
 28039              		.loc 1 1539 5 is_stmt 0 view .LVU7391
 28040 01d2 08BF     		it	eq
 28041 01d4 6400     		lsleq	r4, r4, #1
 28042              	.LVL2175:
1540:src/xeq.c     **** }
 28043              		.loc 1 1540 2 is_stmt 1 view .LVU7392
 28044 01d6 E200     		lsls	r2, r4, #3
 28045 01d8 FFF7FEFF 		bl	xcopy
 28046              	.LVL2176:
1541:src/xeq.c     **** 
 28047              		.loc 1 1541 1 is_stmt 0 view .LVU7393
 28048 01dc 1DE7     		b	.L1987
 28049              	.LVL2177:
 28050              	.L2029:
1541:src/xeq.c     **** 
 28051              		.loc 1 1541 1 view .LVU7394
 28052              	.LBE3646:
 28053              	.LBE3647:
6108:src/xeq.c     **** 		else
 28054              		.loc 1 6108 4 is_stmt 1 view .LVU7395
 28055 01de FFF7FEFF 		bl	setlastXY
 28056              	.LVL2178:
 28057 01e2 6278     		ldrb	r2, [r4, #1]	@ zero_extendqisi2
 28058 01e4 61E7     		b	.L1991
 28059              	.LVL2179:
 28060              	.L2031:
6108:src/xeq.c     **** 		else
 28061              		.loc 1 6108 4 is_stmt 0 view .LVU7396
 28062 01e6 074E     		ldr	r6, .L2033+24
 28063 01e8 83E7     		b	.L1995
 28064              	.L2034:
 28065 01ea 00BF     		.align	2
ARM GAS  /tmp/cc7LeJ71.s 			page 720


 28066              	.L2033:
 28067 01ec 00000000 		.word	XromParams
 28068 01f0 00000000 		.word	Error
 28069 01f4 00000000 		.word	main_ram
 28070 01f8 00000000 		.word	UserLocalRegs
 28071 01fc 00000000 		.word	RetStk
 28072 0200 FEBFF78F 		.word	-1879588866
 28073 0204 00000000 		.word	StateWhileOn
 28074 0208 00000000 		.word	XromLocal
 28075 020c 00000000 		.word	StackBase
 28076              	.LBE3649:
 28077              	.LBE3650:
 28078              		.cfi_endproc
 28079              	.LFE267:
 28081              		.section	.text.cmdconverged,"ax",%progbits
 28082              		.align	1
 28083              		.p2align 2,,3
 28084              		.global	cmdconverged
 28085              		.syntax unified
 28086              		.thumb
 28087              		.thumb_func
 28088              		.fpu fpv4-sp-d16
 28090              	cmdconverged:
 28091              	.LVL2180:
 28092              	.LFB268:
6180:src/xeq.c     **** 
6181:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
6182:src/xeq.c     **** /*
6183:src/xeq.c     ****  *  Allow access to command argument from XROM
6184:src/xeq.c     ****  */
6185:src/xeq.c     **** void cmdxarg(unsigned int arg, enum rarg op) {
6186:src/xeq.c     **** 	set_reg_n_int_sgn(arg, XromArg, 0);
6187:src/xeq.c     **** }
6188:src/xeq.c     **** #endif
6189:src/xeq.c     **** 
6190:src/xeq.c     **** 
6191:src/xeq.c     **** /* A slightly obtuse command to check for convergence.
6192:src/xeq.c     ****  * Arguments are organised bitwise in this form:
6193:src/xeq.c     ****  *
6194:src/xeq.c     ****  *	SMMTT
6195:src/xeq.c     ****  *
6196:src/xeq.c     ****  * where:
6197:src/xeq.c     ****  *	TT is the tolerance parameter:
6198:src/xeq.c     ****  *
6199:src/xeq.c     ****  *	  	0	1e-14 tolerance
6200:src/xeq.c     ****  *	  	1	1e-24 tolerance
6201:src/xeq.c     ****  *	  	2	1e-32 tolerance
6202:src/xeq.c     ****  *	  	3	choose the best tolerance for the current modes
6203:src/xeq.c     ****  *			for user mode this means 0 for single precision and 2 for double precision
6204:src/xeq.c     ****  *
6205:src/xeq.c     ****  *	MM is the mode parameter:
6206:src/xeq.c     ****  *	  	0	compare real X & Y relatively
6207:src/xeq.c     ****  *	  	1	compare real X & Y absolutely
6208:src/xeq.c     ****  *	  	2	compare complex X/Y & Z/T for absolute difference
6209:src/xeq.c     ****  *	  	3	compare real X & Y relatively
6210:src/xeq.c     ****  *
6211:src/xeq.c     ****  *	S is the special number validation:
ARM GAS  /tmp/cc7LeJ71.s 			page 721


6212:src/xeq.c     ****  *		0	Nan & infinities are considered converged
6213:src/xeq.c     ****  *		1	NaN & infinities are not considered converged
6214:src/xeq.c     ****  *
6215:src/xeq.c     ****  * In integer mode, the arguemnt is completely ignored and an equality
6216:src/xeq.c     ****  * comparision is undertaken instead.
6217:src/xeq.c     ****  */
6218:src/xeq.c     **** static const decNumber * const convergence_tolerances[3] = {
6219:src/xeq.c     **** 	&const_1e_14, &const_1e_24, &const_1e_32
6220:src/xeq.c     **** };
6221:src/xeq.c     **** 
6222:src/xeq.c     **** void cmdconverged(unsigned int arg, enum rarg cmd) {
 28093              		.loc 1 6222 52 is_stmt 1 view -0
 28094              		.cfi_startproc
 28095              		@ args = 0, pretend = 0, frame = 216
 28096              		@ frame_needed = 0, uses_anonymous_args = 0
6223:src/xeq.c     **** 	const decNumber *tolerance;
 28097              		.loc 1 6223 2 view .LVU7398
6224:src/xeq.c     **** 	unsigned int tol = arg & 3;
 28098              		.loc 1 6224 2 view .LVU7399
6225:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
6226:src/xeq.c     **** 	const int specials = arg & 0x10;
6227:src/xeq.c     **** 	const int complex = mode == 2;
6228:src/xeq.c     **** 	const int absolute = mode == 1;
6229:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
6230:src/xeq.c     **** 	int res;
6231:src/xeq.c     **** 
6232:src/xeq.c     **** 	if (is_intmode()) {
 28099              		.loc 1 6232 6 is_stmt 0 view .LVU7400
 28100 0000 374B     		ldr	r3, .L2050
6222:src/xeq.c     **** 	const decNumber *tolerance;
 28101              		.loc 1 6222 52 view .LVU7401
 28102 0002 70B5     		push	{r4, r5, r6, lr}
 28103              		.cfi_def_cfa_offset 16
 28104              		.cfi_offset 4, -16
 28105              		.cfi_offset 5, -12
 28106              		.cfi_offset 6, -8
 28107              		.cfi_offset 14, -4
 28108              		.loc 1 6232 6 view .LVU7402
 28109 0004 1A68     		ldr	r2, [r3]
 28110 0006 92F8E817 		ldrb	r1, [r2, #2024]	@ zero_extendqisi2
 28111              	.LVL2181:
6225:src/xeq.c     **** 	const unsigned int mode = (arg >> 2) & 3;
 28112              		.loc 1 6225 2 is_stmt 1 view .LVU7403
6226:src/xeq.c     **** 	const int complex = mode == 2;
 28113              		.loc 1 6226 2 view .LVU7404
6227:src/xeq.c     **** 	const int absolute = mode == 1;
 28114              		.loc 1 6227 2 view .LVU7405
6228:src/xeq.c     **** 	decNumber t, x, y, z, a, b;
 28115              		.loc 1 6228 2 view .LVU7406
6229:src/xeq.c     **** 	int res;
 28116              		.loc 1 6229 2 view .LVU7407
6230:src/xeq.c     **** 
 28117              		.loc 1 6230 2 view .LVU7408
 28118              		.loc 1 6232 2 view .LVU7409
 28119              		.loc 1 6232 5 is_stmt 0 view .LVU7410
 28120 000a CB07     		lsls	r3, r1, #31
6222:src/xeq.c     **** 	const decNumber *tolerance;
ARM GAS  /tmp/cc7LeJ71.s 			page 722


 28121              		.loc 1 6222 52 view .LVU7411
 28122 000c B8B0     		sub	sp, sp, #224
 28123              		.cfi_def_cfa_offset 240
 28124              		.loc 1 6232 5 view .LVU7412
 28125 000e 35D4     		bmi	.L2046
 28126 0010 00F00303 		and	r3, r0, #3
 28127              	.LVL2182:
6233:src/xeq.c     **** 		do_tst(regY_idx, TST_EQ);
6234:src/xeq.c     **** 		return;
6235:src/xeq.c     **** 	}
6236:src/xeq.c     **** 
6237:src/xeq.c     **** 	if (tol == 3) {
 28128              		.loc 1 6237 5 view .LVU7413
 28129 0014 032B     		cmp	r3, #3
 28130 0016 0446     		mov	r4, r0
 28131 0018 00F01005 		and	r5, r0, #16
 28132              	.LVL2183:
 28133              		.loc 1 6237 2 is_stmt 1 view .LVU7414
 28134              		.loc 1 6237 5 is_stmt 0 view .LVU7415
 28135 001c 24D0     		beq	.L2038
 28136 001e 314A     		ldr	r2, .L2050+4
 28137 0020 52F82360 		ldr	r6, [r2, r3, lsl #2]
 28138              	.LVL2184:
 28139              	.L2039:
6238:src/xeq.c     **** 		if (is_dblmode())
6239:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
6240:src/xeq.c     **** 		else
6241:src/xeq.c     **** 			tol = 0;
6242:src/xeq.c     **** 	}
6243:src/xeq.c     **** 	tolerance = convergence_tolerances[tol];
 28140              		.loc 1 6243 2 is_stmt 1 view .LVU7416
6244:src/xeq.c     **** 
6245:src/xeq.c     **** 	getXYZT(&x, &y, &z, &t);
 28141              		.loc 1 6245 2 view .LVU7417
 28142              	.LBB3651:
 28143              	.LBI3651:
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 28144              		.loc 1 879 6 view .LVU7418
 28145              	.LBB3652:
 880:src/xeq.c     **** 	getT(t);
 28146              		.loc 1 880 2 view .LVU7419
 28147 0024 1DAA     		add	r2, sp, #116
 28148              	.LVL2185:
 880:src/xeq.c     **** 	getT(t);
 28149              		.loc 1 880 2 is_stmt 0 view .LVU7420
 28150 0026 14A9     		add	r1, sp, #80
 28151              	.LVL2186:
 880:src/xeq.c     **** 	getT(t);
 28152              		.loc 1 880 2 view .LVU7421
 28153 0028 0BA8     		add	r0, sp, #44
 28154              	.LVL2187:
 880:src/xeq.c     **** 	getT(t);
 28155              		.loc 1 880 2 view .LVU7422
 28156 002a FFF7FEFF 		bl	getXYZ
 28157              	.LVL2188:
 881:src/xeq.c     **** }
 28158              		.loc 1 881 2 is_stmt 1 view .LVU7423
ARM GAS  /tmp/cc7LeJ71.s 			page 723


 28159              	.LBB3653:
 28160              	.LBI3653:
 850:src/xeq.c     **** 	getRegister(t, regT_idx);
 28161              		.loc 1 850 13 view .LVU7424
 28162              	.LBB3654:
 851:src/xeq.c     **** }
 28163              		.loc 1 851 2 view .LVU7425
 28164 002e 02A8     		add	r0, sp, #8
 28165              	.LVL2189:
 851:src/xeq.c     **** }
 28166              		.loc 1 851 2 is_stmt 0 view .LVU7426
 28167 0030 6721     		movs	r1, #103
 28168 0032 FFF7FEFF 		bl	getRegister
 28169              	.LVL2190:
 851:src/xeq.c     **** }
 28170              		.loc 1 851 2 view .LVU7427
 28171              	.LBE3654:
 28172              	.LBE3653:
 28173              	.LBE3652:
 28174              	.LBE3651:
6246:src/xeq.c     **** 	if (decNumberIsSpecial(&x) || decNumberIsSpecial(&y))
 28175              		.loc 1 6246 2 is_stmt 1 view .LVU7428
 28176              		.loc 1 6246 29 is_stmt 0 view .LVU7429
 28177 0036 9DF83430 		ldrb	r3, [sp, #52]	@ zero_extendqisi2
 28178 003a 9DF85820 		ldrb	r2, [sp, #88]	@ zero_extendqisi2
 28179 003e 1343     		orrs	r3, r3, r2
 28180 0040 13F0700F 		tst	r3, #112
 28181 0044 0BD1     		bne	.L2040
6225:src/xeq.c     **** 	const int specials = arg & 0x10;
 28182              		.loc 1 6225 21 view .LVU7430
 28183 0046 C4F38104 		ubfx	r4, r4, #2, #2
 28184              	.LVL2191:
6247:src/xeq.c     **** 		res = specials;
6248:src/xeq.c     **** 	else if (complex) {
 28185              		.loc 1 6248 7 is_stmt 1 view .LVU7431
 28186              		.loc 1 6248 10 is_stmt 0 view .LVU7432
 28187 004a 022C     		cmp	r4, #2
 28188 004c 26D0     		beq	.L2047
6249:src/xeq.c     **** 		if (decNumberIsSpecial(&z) || decNumberIsSpecial(&t))
6250:src/xeq.c     **** 			res = specials;
6251:src/xeq.c     **** 		else {
6252:src/xeq.c     **** 			cmplxSubtract(&a, &b, &x, &y, &z, &t);
6253:src/xeq.c     **** 			cmplxR(&x, &a, &b);
6254:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
6255:src/xeq.c     **** 		}
6256:src/xeq.c     **** 	} else {
6257:src/xeq.c     **** 		if (absolute)
 28189              		.loc 1 6257 3 is_stmt 1 view .LVU7433
 28190              		.loc 1 6257 6 is_stmt 0 view .LVU7434
 28191 004e 012C     		cmp	r4, #1
6258:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28192              		.loc 1 6258 10 view .LVU7435
 28193 0050 3246     		mov	r2, r6
 28194 0052 14A9     		add	r1, sp, #80
 28195 0054 0BA8     		add	r0, sp, #44
6257:src/xeq.c     **** 			res = absolute_error(&x, &y, tolerance);
 28196              		.loc 1 6257 6 view .LVU7436
ARM GAS  /tmp/cc7LeJ71.s 			page 724


 28197 0056 3ED0     		beq	.L2048
6259:src/xeq.c     **** 		else
6260:src/xeq.c     **** 			res = relative_error(&x, &y, tolerance);
 28198              		.loc 1 6260 4 is_stmt 1 view .LVU7437
 28199              		.loc 1 6260 10 is_stmt 0 view .LVU7438
 28200 0058 FFF7FEFF 		bl	relative_error
 28201              	.LVL2192:
 28202 005c 0546     		mov	r5, r0
 28203              	.LVL2193:
 28204              	.L2040:
6261:src/xeq.c     **** 	}
6262:src/xeq.c     **** 	fin_tst(res);
 28205              		.loc 1 6262 2 is_stmt 1 discriminator 1 view .LVU7439
 28206 005e 2846     		mov	r0, r5
 28207 0060 FFF7FEFF 		bl	fin_tst
 28208              	.LVL2194:
6263:src/xeq.c     **** }
 28209              		.loc 1 6263 1 is_stmt 0 discriminator 1 view .LVU7440
 28210 0064 38B0     		add	sp, sp, #224
 28211              		.cfi_remember_state
 28212              		.cfi_def_cfa_offset 16
 28213              		@ sp needed
 28214 0066 70BD     		pop	{r4, r5, r6, pc}
 28215              	.LVL2195:
 28216              	.L2038:
 28217              		.cfi_restore_state
6238:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 28218              		.loc 1 6238 3 is_stmt 1 view .LVU7441
 28219              	.LBB3655:
 28220              	.LBI3655:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28221              		.loc 1 1118 5 view .LVU7442
 28222              	.LBB3656:
1119:src/xeq.c     **** }
 28223              		.loc 1 1119 2 view .LVU7443
1119:src/xeq.c     **** }
 28224              		.loc 1 1119 24 is_stmt 0 view .LVU7444
 28225 0068 B2F8E827 		ldrh	r2, [r2, #2024]
 28226 006c 44F20103 		movw	r3, #16385
 28227              	.LVL2196:
1119:src/xeq.c     **** }
 28228              		.loc 1 1119 24 view .LVU7445
 28229              	.LBE3656:
 28230              	.LBE3655:
6238:src/xeq.c     **** 			tol = (! XromFlags.xIN || XromFlags.mode_double) ? 2 : 1;
 28231              		.loc 1 6238 6 view .LVU7446
 28232 0070 1340     		ands	r3, r3, r2
 28233 0072 B3F5804F 		cmp	r3, #16384
 28234 0076 07D0     		beq	.L2049
 28235 0078 1B4E     		ldr	r6, .L2050+8
 28236 007a D3E7     		b	.L2039
 28237              	.LVL2197:
 28238              	.L2046:
6233:src/xeq.c     **** 		return;
 28239              		.loc 1 6233 3 is_stmt 1 view .LVU7447
 28240 007c 0021     		movs	r1, #0
 28241 007e 6520     		movs	r0, #101
ARM GAS  /tmp/cc7LeJ71.s 			page 725


 28242              	.LVL2198:
6233:src/xeq.c     **** 		return;
 28243              		.loc 1 6233 3 is_stmt 0 view .LVU7448
 28244 0080 FFF7FEFF 		bl	do_tst
 28245              	.LVL2199:
6234:src/xeq.c     **** 	}
 28246              		.loc 1 6234 3 is_stmt 1 view .LVU7449
 28247              		.loc 1 6263 1 is_stmt 0 view .LVU7450
 28248 0084 38B0     		add	sp, sp, #224
 28249              		.cfi_remember_state
 28250              		.cfi_def_cfa_offset 16
 28251              		@ sp needed
 28252 0086 70BD     		pop	{r4, r5, r6, pc}
 28253              	.LVL2200:
 28254              	.L2049:
 28255              		.cfi_restore_state
6239:src/xeq.c     **** 		else
 28256              		.loc 1 6239 4 is_stmt 1 view .LVU7451
6239:src/xeq.c     **** 		else
 28257              		.loc 1 6239 27 is_stmt 0 view .LVU7452
 28258 0088 184B     		ldr	r3, .L2050+12
6239:src/xeq.c     **** 		else
 28259              		.loc 1 6239 57 view .LVU7453
 28260 008a 194E     		ldr	r6, .L2050+16
6239:src/xeq.c     **** 		else
 28261              		.loc 1 6239 27 view .LVU7454
 28262 008c 5B78     		ldrb	r3, [r3, #1]	@ zero_extendqisi2
6239:src/xeq.c     **** 		else
 28263              		.loc 1 6239 57 view .LVU7455
 28264 008e 194A     		ldr	r2, .L2050+20
 28265 0090 03F08803 		and	r3, r3, #136
 28266 0094 802B     		cmp	r3, #128
 28267 0096 08BF     		it	eq
 28268 0098 1646     		moveq	r6, r2
 28269 009a C3E7     		b	.L2039
 28270              	.LVL2201:
 28271              	.L2047:
6249:src/xeq.c     **** 			res = specials;
 28272              		.loc 1 6249 3 is_stmt 1 view .LVU7456
6249:src/xeq.c     **** 			res = specials;
 28273              		.loc 1 6249 30 is_stmt 0 view .LVU7457
 28274 009c 9DF87C30 		ldrb	r3, [sp, #124]	@ zero_extendqisi2
 28275 00a0 9DF81020 		ldrb	r2, [sp, #16]	@ zero_extendqisi2
 28276 00a4 1343     		orrs	r3, r3, r2
 28277 00a6 13F0700F 		tst	r3, #112
 28278 00aa D8D1     		bne	.L2040
6252:src/xeq.c     **** 			cmplxR(&x, &a, &b);
 28279              		.loc 1 6252 4 is_stmt 1 view .LVU7458
 28280 00ac 02AB     		add	r3, sp, #8
 28281 00ae 0193     		str	r3, [sp, #4]
 28282 00b0 1DAB     		add	r3, sp, #116
 28283 00b2 0093     		str	r3, [sp]
 28284 00b4 2FA9     		add	r1, sp, #188
 28285 00b6 14AB     		add	r3, sp, #80
 28286 00b8 26A8     		add	r0, sp, #152
 28287 00ba 0BAA     		add	r2, sp, #44
 28288 00bc FFF7FEFF 		bl	cmplxSubtract
ARM GAS  /tmp/cc7LeJ71.s 			page 726


 28289              	.LVL2202:
6253:src/xeq.c     **** 			res = dn_lt(&x, tolerance);
 28290              		.loc 1 6253 4 view .LVU7459
 28291 00c0 2FAA     		add	r2, sp, #188
 28292 00c2 26A9     		add	r1, sp, #152
 28293 00c4 0BA8     		add	r0, sp, #44
 28294 00c6 FFF7FEFF 		bl	cmplxR
 28295              	.LVL2203:
6254:src/xeq.c     **** 		}
 28296              		.loc 1 6254 4 view .LVU7460
6254:src/xeq.c     **** 		}
 28297              		.loc 1 6254 10 is_stmt 0 view .LVU7461
 28298 00ca 3146     		mov	r1, r6
 28299 00cc 0BA8     		add	r0, sp, #44
 28300 00ce FFF7FEFF 		bl	dn_lt
 28301              	.LVL2204:
 28302 00d2 0546     		mov	r5, r0
 28303              	.LVL2205:
6254:src/xeq.c     **** 		}
 28304              		.loc 1 6254 10 view .LVU7462
 28305 00d4 C3E7     		b	.L2040
 28306              	.LVL2206:
 28307              	.L2048:
6258:src/xeq.c     **** 		else
 28308              		.loc 1 6258 4 is_stmt 1 view .LVU7463
6258:src/xeq.c     **** 		else
 28309              		.loc 1 6258 10 is_stmt 0 view .LVU7464
 28310 00d6 FFF7FEFF 		bl	absolute_error
 28311              	.LVL2207:
 28312 00da 0546     		mov	r5, r0
 28313              	.LVL2208:
6258:src/xeq.c     **** 		else
 28314              		.loc 1 6258 10 view .LVU7465
 28315 00dc BFE7     		b	.L2040
 28316              	.L2051:
 28317 00de 00BF     		.align	2
 28318              	.L2050:
 28319 00e0 00000000 		.word	main_ram
 28320 00e4 00000000 		.word	.LANCHOR7
 28321 00e8 00000000 		.word	const_1e_14
 28322 00ec 00000000 		.word	XromParams
 28323 00f0 00000000 		.word	const_1e_32
 28324 00f4 00000000 		.word	const_1e_24
 28325              		.cfi_endproc
 28326              	.LFE268:
 28328              		.section	.text.cmdshuffle,"ax",%progbits
 28329              		.align	1
 28330              		.p2align 2,,3
 28331              		.global	cmdshuffle
 28332              		.syntax unified
 28333              		.thumb
 28334              		.thumb_func
 28335              		.fpu fpv4-sp-d16
 28337              	cmdshuffle:
 28338              	.LVL2209:
 28339              	.LFB269:
6264:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 727


6265:src/xeq.c     **** void cmdshuffle(unsigned int arg, enum rarg cmd) {
 28340              		.loc 1 6265 50 is_stmt 1 view -0
 28341              		.cfi_startproc
 28342              		@ args = 0, pretend = 0, frame = 64
 28343              		@ frame_needed = 0, uses_anonymous_args = 0
6266:src/xeq.c     **** 	REGISTER xyzt[4];
 28344              		.loc 1 6266 2 view .LVU7467
6267:src/xeq.c     **** 	int i;
 28345              		.loc 1 6267 2 view .LVU7468
6268:src/xeq.c     **** 
6269:src/xeq.c     **** 	set_lift();
 28346              		.loc 1 6269 2 view .LVU7469
 28347              	.LBB3657:
 28348              	.LBI3657:
 767:src/xeq.c     ****     State2.state_lift = 1;
 28349              		.loc 1 767 6 view .LVU7470
 28350              	.LBB3658:
 768:src/xeq.c     **** }
 28351              		.loc 1 768 5 view .LVU7471
 28352              	.LBE3658:
 28353              	.LBE3657:
6265:src/xeq.c     **** 	REGISTER xyzt[4];
 28354              		.loc 1 6265 50 is_stmt 0 view .LVU7472
 28355 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28356              		.cfi_def_cfa_offset 24
 28357              		.cfi_offset 4, -24
 28358              		.cfi_offset 5, -20
 28359              		.cfi_offset 6, -16
 28360              		.cfi_offset 7, -12
 28361              		.cfi_offset 8, -8
 28362              		.cfi_offset 14, -4
 28363              	.LBB3663:
 28364              	.LBB3659:
 768:src/xeq.c     **** }
 28365              		.loc 1 768 23 view .LVU7473
 28366 0004 1F4A     		ldr	r2, .L2062
 28367 0006 204E     		ldr	r6, .L2062+4
 28368 0008 D37D     		ldrb	r3, [r2, #23]	@ zero_extendqisi2
 28369              	.LBE3659:
 28370              	.LBE3663:
6265:src/xeq.c     **** 	REGISTER xyzt[4];
 28371              		.loc 1 6265 50 view .LVU7474
 28372 000a 90B0     		sub	sp, sp, #64
 28373              		.cfi_def_cfa_offset 88
 28374              	.LBB3664:
 28375              	.LBB3660:
 768:src/xeq.c     **** }
 28376              		.loc 1 768 23 view .LVU7475
 28377 000c 43F04003 		orr	r3, r3, #64
 28378              	.LBE3660:
 28379              	.LBE3664:
6265:src/xeq.c     **** 	REGISTER xyzt[4];
 28380              		.loc 1 6265 50 view .LVU7476
 28381 0010 0546     		mov	r5, r0
 28382              	.LBB3665:
 28383              	.LBB3661:
 768:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 728


 28384              		.loc 1 768 23 view .LVU7477
 28385 0012 D375     		strb	r3, [r2, #23]
 28386              	.LBE3661:
 28387              	.LBE3665:
6270:src/xeq.c     **** 	for (i=0; i<4; i++)
 28388              		.loc 1 6270 2 is_stmt 1 view .LVU7478
 28389              	.LVL2210:
 28390              		.loc 1 6270 12 view .LVU7479
 28391 0014 6F46     		mov	r7, sp
 28392              	.LBB3666:
 28393              	.LBB3662:
 768:src/xeq.c     **** }
 28394              		.loc 1 768 23 is_stmt 0 view .LVU7480
 28395 0016 6424     		movs	r4, #100
 28396              	.LBE3662:
 28397              	.LBE3666:
 28398              	.LBB3667:
 28399              	.LBB3668:
 28400              	.LBB3669:
 28401              	.LBB3670:
1119:src/xeq.c     **** }
 28402              		.loc 1 1119 24 view .LVU7481
 28403 0018 44F20108 		movw	r8, #16385
 28404              	.LVL2211:
 28405              	.L2054:
1119:src/xeq.c     **** }
 28406              		.loc 1 1119 24 view .LVU7482
 28407              	.LBE3670:
 28408              	.LBE3669:
 28409              	.LBE3668:
 28410              	.LBE3667:
6271:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28411              		.loc 1 6271 3 is_stmt 1 discriminator 3 view .LVU7483
 28412              	.LBB3677:
 28413              	.LBI3677:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28414              		.loc 1 718 11 discriminator 3 view .LVU7484
 28415              	.LBB3678:
 719:src/xeq.c     **** }
 28416              		.loc 1 719 2 discriminator 3 view .LVU7485
 719:src/xeq.c     **** }
 28417              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU7486
 28418 001c 2046     		mov	r0, r4
 28419 001e FFF7FEFF 		bl	get_reg_n
 28420              	.LVL2212:
 719:src/xeq.c     **** }
 28421              		.loc 1 719 9 discriminator 3 view .LVU7487
 28422              	.LBE3678:
 28423              	.LBE3677:
 28424              	.LBB3680:
 28425              	.LBB3675:
 28426              	.LBB3673:
 28427              	.LBB3671:
1119:src/xeq.c     **** }
 28428              		.loc 1 1119 24 discriminator 3 view .LVU7488
 28429 0022 3368     		ldr	r3, [r6]
 28430 0024 B3F8E837 		ldrh	r3, [r3, #2024]
ARM GAS  /tmp/cc7LeJ71.s 			page 729


 28431              	.LBE3671:
 28432              	.LBE3673:
 727:src/xeq.c     **** }
 28433              		.loc 1 727 2 discriminator 3 view .LVU7489
 28434 0028 08EA0303 		and	r3, r8, r3
 28435 002c B3F5804F 		cmp	r3, #16384
 28436              	.LBE3675:
 28437              	.LBE3680:
 28438              	.LBB3681:
 28439              	.LBB3679:
 719:src/xeq.c     **** }
 28440              		.loc 1 719 9 discriminator 3 view .LVU7490
 28441 0030 0146     		mov	r1, r0
 28442              	.LVL2213:
 719:src/xeq.c     **** }
 28443              		.loc 1 719 9 discriminator 3 view .LVU7491
 28444              	.LBE3679:
 28445              	.LBE3681:
 28446              	.LBB3682:
 28447              	.LBI3667:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 28448              		.loc 1 726 6 is_stmt 1 discriminator 3 view .LVU7492
 28449              	.LBB3676:
 727:src/xeq.c     **** }
 28450              		.loc 1 727 2 discriminator 3 view .LVU7493
 28451              	.LBB3674:
 28452              	.LBI3669:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28453              		.loc 1 1118 5 discriminator 3 view .LVU7494
 28454              	.LBB3672:
1119:src/xeq.c     **** }
 28455              		.loc 1 1119 2 discriminator 3 view .LVU7495
 28456              	.LBE3672:
 28457              	.LBE3674:
 727:src/xeq.c     **** }
 28458              		.loc 1 727 2 is_stmt 0 discriminator 3 view .LVU7496
 28459 0032 0CBF     		ite	eq
 28460 0034 1022     		moveq	r2, #16
 28461 0036 0822     		movne	r2, #8
 28462 0038 3846     		mov	r0, r7
 28463              	.LVL2214:
 727:src/xeq.c     **** }
 28464              		.loc 1 727 2 discriminator 3 view .LVU7497
 28465 003a 0134     		adds	r4, r4, #1
 28466              	.LVL2215:
 727:src/xeq.c     **** }
 28467              		.loc 1 727 2 discriminator 3 view .LVU7498
 28468 003c FFF7FEFF 		bl	xcopy
 28469              	.LVL2216:
 727:src/xeq.c     **** }
 28470              		.loc 1 727 2 discriminator 3 view .LVU7499
 28471              	.LBE3676:
 28472              	.LBE3682:
6270:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28473              		.loc 1 6270 17 is_stmt 1 discriminator 3 view .LVU7500
6270:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28474              		.loc 1 6270 12 discriminator 3 view .LVU7501
ARM GAS  /tmp/cc7LeJ71.s 			page 730


6270:src/xeq.c     **** 		copyreg(xyzt + i, get_stack(i));
 28475              		.loc 1 6270 2 is_stmt 0 discriminator 3 view .LVU7502
 28476 0040 682C     		cmp	r4, #104
 28477 0042 07F11007 		add	r7, r7, #16
 28478 0046 E9D1     		bne	.L2054
 28479 0048 6424     		movs	r4, #100
 28480              	.LBB3683:
 28481              	.LBB3684:
 28482              	.LBB3685:
 28483              	.LBB3686:
1119:src/xeq.c     **** }
 28484              		.loc 1 1119 24 view .LVU7503
 28485 004a 44F20107 		movw	r7, #16385
 28486              	.L2056:
 28487              	.LVL2217:
1119:src/xeq.c     **** }
 28488              		.loc 1 1119 24 view .LVU7504
 28489              	.LBE3686:
 28490              	.LBE3685:
 28491              	.LBE3684:
 28492              	.LBE3683:
6272:src/xeq.c     **** 
6273:src/xeq.c     **** 	for (i=0; i<4; i++) {
6274:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28493              		.loc 1 6274 3 is_stmt 1 view .LVU7505
 28494              	.LBB3693:
 28495              	.LBI3693:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 28496              		.loc 1 718 11 view .LVU7506
 28497              	.LBB3694:
 719:src/xeq.c     **** }
 28498              		.loc 1 719 2 view .LVU7507
 719:src/xeq.c     **** }
 28499              		.loc 1 719 9 is_stmt 0 view .LVU7508
 28500 004e 2046     		mov	r0, r4
 28501 0050 FFF7FEFF 		bl	get_reg_n
 28502              	.LVL2218:
 719:src/xeq.c     **** }
 28503              		.loc 1 719 9 view .LVU7509
 28504              	.LBE3694:
 28505              	.LBE3693:
 28506              	.LBB3695:
 28507              	.LBB3691:
 28508              	.LBB3689:
 28509              	.LBB3687:
1119:src/xeq.c     **** }
 28510              		.loc 1 1119 24 view .LVU7510
 28511 0054 3368     		ldr	r3, [r6]
 28512 0056 B3F8E837 		ldrh	r3, [r3, #2024]
 28513              	.LBE3687:
 28514              	.LBE3689:
 727:src/xeq.c     **** }
 28515              		.loc 1 727 2 view .LVU7511
 28516 005a 3B40     		ands	r3, r3, r7
 28517 005c B3F5804F 		cmp	r3, #16384
 28518              	.LBE3691:
 28519              	.LBE3695:
ARM GAS  /tmp/cc7LeJ71.s 			page 731


 28520              		.loc 1 6274 36 view .LVU7512
 28521 0060 05F00301 		and	r1, r5, #3
 28522              	.LVL2219:
 28523              	.LBB3696:
 28524              	.LBI3683:
 726:src/xeq.c     **** 	xcopy(d, s, is_dblmode() ? sizeof(decimal128) : sizeof(decimal64));
 28525              		.loc 1 726 6 is_stmt 1 view .LVU7513
 28526              	.LBB3692:
 727:src/xeq.c     **** }
 28527              		.loc 1 727 2 view .LVU7514
 28528              	.LBB3690:
 28529              	.LBI3685:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28530              		.loc 1 1118 5 view .LVU7515
 28531              	.LBB3688:
1119:src/xeq.c     **** }
 28532              		.loc 1 1119 2 view .LVU7516
 28533              	.LBE3688:
 28534              	.LBE3690:
 727:src/xeq.c     **** }
 28535              		.loc 1 727 2 is_stmt 0 view .LVU7517
 28536 0064 0CBF     		ite	eq
 28537 0066 1022     		moveq	r2, #16
 28538 0068 0822     		movne	r2, #8
 28539 006a 0134     		adds	r4, r4, #1
 28540              	.LVL2220:
 727:src/xeq.c     **** }
 28541              		.loc 1 727 2 view .LVU7518
 28542 006c 0DEB0111 		add	r1, sp, r1, lsl #4
 28543              	.LVL2221:
 727:src/xeq.c     **** }
 28544              		.loc 1 727 2 view .LVU7519
 28545 0070 FFF7FEFF 		bl	xcopy
 28546              	.LVL2222:
 727:src/xeq.c     **** }
 28547              		.loc 1 727 2 view .LVU7520
 28548              	.LBE3692:
 28549              	.LBE3696:
6275:src/xeq.c     **** 		arg >>= 2;
 28550              		.loc 1 6275 3 is_stmt 1 view .LVU7521
6273:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28551              		.loc 1 6273 2 is_stmt 0 view .LVU7522
 28552 0074 682C     		cmp	r4, #104
 28553              		.loc 1 6275 7 view .LVU7523
 28554 0076 4FEA9505 		lsr	r5, r5, #2
 28555              	.LVL2223:
6273:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28556              		.loc 1 6273 17 is_stmt 1 view .LVU7524
6273:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28557              		.loc 1 6273 12 view .LVU7525
6273:src/xeq.c     **** 		copyreg(get_stack(i), & xyzt[arg & 3]);
 28558              		.loc 1 6273 2 is_stmt 0 view .LVU7526
 28559 007a E8D1     		bne	.L2056
6276:src/xeq.c     **** 	}
6277:src/xeq.c     **** }
 28560              		.loc 1 6277 1 view .LVU7527
 28561 007c 10B0     		add	sp, sp, #64
ARM GAS  /tmp/cc7LeJ71.s 			page 732


 28562              		.cfi_def_cfa_offset 24
 28563              		@ sp needed
 28564 007e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28565              	.LVL2224:
 28566              	.L2063:
 28567              		.loc 1 6277 1 view .LVU7528
 28568 0082 00BF     		.align	2
 28569              	.L2062:
 28570 0084 00000000 		.word	StateWhileOn
 28571 0088 00000000 		.word	main_ram
 28572              		.cfi_endproc
 28573              	.LFE269:
 28575              		.section	.text.cmdmode,"ax",%progbits
 28576              		.align	1
 28577              		.p2align 2,,3
 28578              		.global	cmdmode
 28579              		.syntax unified
 28580              		.thumb
 28581              		.thumb_func
 28582              		.fpu fpv4-sp-d16
 28584              	cmdmode:
 28585              	.LVL2225:
 28586              	.LFB270:
6278:src/xeq.c     **** 
6279:src/xeq.c     **** /*
6280:src/xeq.c     ****  *  Toggle UState mode bits from XROM
6281:src/xeq.c     ****  */
6282:src/xeq.c     **** void cmdmode(unsigned int arg, enum rarg cmd) {
 28587              		.loc 1 6282 47 is_stmt 1 view -0
 28588              		.cfi_startproc
 28589              		@ args = 0, pretend = 0, frame = 0
 28590              		@ frame_needed = 0, uses_anonymous_args = 0
 28591              		@ link register save eliminated.
6283:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28592              		.loc 1 6283 2 view .LVU7530
6282:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28593              		.loc 1 6282 47 is_stmt 0 view .LVU7531
 28594 0000 30B4     		push	{r4, r5}
 28595              		.cfi_def_cfa_offset 8
 28596              		.cfi_offset 4, -8
 28597              		.cfi_offset 5, -4
6284:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 28598              		.loc 1 6284 62 view .LVU7532
 28599 0002 134D     		ldr	r5, .L2069
6283:src/xeq.c     **** 	unsigned long long int bit = 1ll << arg;
 28600              		.loc 1 6283 35 view .LVU7533
 28601 0004 0122     		movs	r2, #1
 28602 0006 A0F12003 		sub	r3, r0, #32
 28603 000a C0F12004 		rsb	r4, r0, #32
 28604 000e 02FA03F3 		lsl	r3, r2, r3
 28605 0012 22FA04F4 		lsr	r4, r2, r4
 28606 0016 8240     		lsls	r2, r2, r0
 28607              		.loc 1 6284 62 view .LVU7534
 28608 0018 2868     		ldr	r0, [r5]
 28609              	.LVL2226:
6285:src/xeq.c     **** 
6286:src/xeq.c     **** 	if (cmd == RARG_MODE_SET)
ARM GAS  /tmp/cc7LeJ71.s 			page 733


 28610              		.loc 1 6286 5 view .LVU7535
 28611 001a 8129     		cmp	r1, #129
6287:src/xeq.c     **** 		*mode |= bit;
 28612              		.loc 1 6287 9 view .LVU7536
 28613 001c D0F8E457 		ldr	r5, [r0, #2020]
6283:src/xeq.c     **** 	unsigned long long int *mode = (unsigned long long int *) & UState;
 28614              		.loc 1 6283 35 view .LVU7537
 28615 0020 43EA0403 		orr	r3, r3, r4
 28616              	.LVL2227:
6284:src/xeq.c     **** 
 28617              		.loc 1 6284 2 is_stmt 1 view .LVU7538
6286:src/xeq.c     **** 		*mode |= bit;
 28618              		.loc 1 6286 2 view .LVU7539
 28619              		.loc 1 6287 9 is_stmt 0 view .LVU7540
 28620 0024 00F2E471 		addw	r1, r0, #2020
 28621              	.LVL2228:
6286:src/xeq.c     **** 		*mode |= bit;
 28622              		.loc 1 6286 5 view .LVU7541
 28623 0028 0AD0     		beq	.L2068
6288:src/xeq.c     **** 	else
6289:src/xeq.c     **** 		*mode &= ~bit;
 28624              		.loc 1 6289 3 is_stmt 1 view .LVU7542
 28625              		.loc 1 6289 9 is_stmt 0 view .LVU7543
 28626 002a D0F8E847 		ldr	r4, [r0, #2024]
 28627 002e 25EA0202 		bic	r2, r5, r2
 28628              	.LVL2229:
 28629              		.loc 1 6289 9 view .LVU7544
 28630 0032 24EA0303 		bic	r3, r4, r3
 28631              	.LVL2230:
 28632              		.loc 1 6289 9 view .LVU7545
 28633 0036 C0F8E427 		str	r2, [r0, #2020]
6290:src/xeq.c     **** }
 28634              		.loc 1 6290 1 view .LVU7546
 28635 003a 30BC     		pop	{r4, r5}
 28636              		.cfi_remember_state
 28637              		.cfi_restore 5
 28638              		.cfi_restore 4
 28639              		.cfi_def_cfa_offset 0
 28640 003c 4B60     		str	r3, [r1, #4]
 28641 003e 7047     		bx	lr
 28642              	.LVL2231:
 28643              	.L2068:
 28644              		.cfi_restore_state
6287:src/xeq.c     **** 	else
 28645              		.loc 1 6287 3 is_stmt 1 view .LVU7547
6287:src/xeq.c     **** 	else
 28646              		.loc 1 6287 9 is_stmt 0 view .LVU7548
 28647 0040 4C68     		ldr	r4, [r1, #4]
 28648 0042 2A43     		orrs	r2, r2, r5
 28649              	.LVL2232:
6287:src/xeq.c     **** 	else
 28650              		.loc 1 6287 9 view .LVU7549
 28651 0044 2343     		orrs	r3, r3, r4
 28652              	.LVL2233:
6287:src/xeq.c     **** 	else
 28653              		.loc 1 6287 9 view .LVU7550
 28654 0046 C0F8E427 		str	r2, [r0, #2020]
ARM GAS  /tmp/cc7LeJ71.s 			page 734


 28655              		.loc 1 6290 1 view .LVU7551
 28656 004a 30BC     		pop	{r4, r5}
 28657              		.cfi_restore 5
 28658              		.cfi_restore 4
 28659              		.cfi_def_cfa_offset 0
 28660 004c 4B60     		str	r3, [r1, #4]
 28661 004e 7047     		bx	lr
 28662              	.L2070:
 28663              		.align	2
 28664              	.L2069:
 28665 0050 00000000 		.word	main_ram
 28666              		.cfi_endproc
 28667              	.LFE270:
 28669              		.section	.text.cmdlpop,"ax",%progbits
 28670              		.align	1
 28671              		.p2align 2,,3
 28672              		.global	cmdlpop
 28673              		.syntax unified
 28674              		.thumb
 28675              		.thumb_func
 28676              		.fpu fpv4-sp-d16
 28678              	cmdlpop:
 28679              	.LVL2234:
 28680              	.LFB271:
6291:src/xeq.c     **** 
6292:src/xeq.c     **** /*
6293:src/xeq.c     ****  *  Undo the effect of LOCL by popping the current local frame.
6294:src/xeq.c     ****  *  Needs to be executed from the same level that has established the frame.
6295:src/xeq.c     ****  */
6296:src/xeq.c     **** void cmdlpop(enum nilop op) {
 28681              		.loc 1 6296 29 is_stmt 1 view -0
 28682              		.cfi_startproc
 28683              		@ args = 0, pretend = 0, frame = 0
 28684              		@ frame_needed = 0, uses_anonymous_args = 0
6297:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28685              		.loc 1 6297 2 view .LVU7553
6296:src/xeq.c     **** 	if (LocalRegs != RetStkPtr) {
 28686              		.loc 1 6296 29 is_stmt 0 view .LVU7554
 28687 0000 10B5     		push	{r4, lr}
 28688              		.cfi_def_cfa_offset 8
 28689              		.cfi_offset 4, -8
 28690              		.cfi_offset 14, -4
 28691              		.loc 1 6297 6 view .LVU7555
 28692 0002 0C4C     		ldr	r4, .L2075
 28693 0004 2268     		ldr	r2, [r4]
 28694 0006 B2F8DE37 		ldrh	r3, [r2, #2014]
 28695              		.loc 1 6297 5 view .LVU7556
 28696 000a B2F9E227 		ldrsh	r2, [r2, #2018]
 28697 000e 43F34A13 		sbfx	r3, r3, #5, #11
 28698 0012 9342     		cmp	r3, r2
 28699 0014 05D0     		beq	.L2072
6298:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 28700              		.loc 1 6298 3 is_stmt 1 view .LVU7557
 28701              	.LVL2235:
 28702              	.LBB3701:
 28703              	.LBI3701:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/cc7LeJ71.s 			page 735


 28704              		.loc 1 546 5 view .LVU7558
 28705              	.LBB3702:
 547:src/xeq.c     **** 		Error = e;
 28706              		.loc 1 547 2 view .LVU7559
 547:src/xeq.c     **** 		Error = e;
 28707              		.loc 1 547 12 is_stmt 0 view .LVU7560
 28708 0016 084B     		ldr	r3, .L2075+4
 547:src/xeq.c     **** 		Error = e;
 28709              		.loc 1 547 5 view .LVU7561
 28710 0018 1A68     		ldr	r2, [r3]
 28711 001a 0AB9     		cbnz	r2, .L2071
 28712              	.LVL2236:
 28713              	.LBB3703:
 28714              	.LBI3703:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28715              		.loc 1 546 5 is_stmt 1 view .LVU7562
 28716              	.LBB3704:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28717              		.loc 1 548 3 view .LVU7563
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28718              		.loc 1 548 9 is_stmt 0 view .LVU7564
 28719 001c 0722     		movs	r2, #7
 28720 001e 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28721              		.loc 1 549 3 is_stmt 1 view .LVU7565
 28722              	.LVL2237:
 28723              	.L2071:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28724              		.loc 1 549 3 is_stmt 0 view .LVU7566
 28725              	.LBE3704:
 28726              	.LBE3703:
 28727              	.LBE3702:
 28728              	.LBE3701:
6299:src/xeq.c     **** 		return;
6300:src/xeq.c     **** 	}
6301:src/xeq.c     **** 	RetStkPtr = LocalRegs;
6302:src/xeq.c     **** 	retstk_up();
6303:src/xeq.c     **** 	--RetStkPtr;
6304:src/xeq.c     **** }
 28729              		.loc 1 6304 1 view .LVU7567
 28730 0020 10BD     		pop	{r4, pc}
 28731              	.LVL2238:
 28732              	.L2072:
6301:src/xeq.c     **** 	retstk_up();
 28733              		.loc 1 6301 2 is_stmt 1 view .LVU7568
6302:src/xeq.c     **** 	--RetStkPtr;
 28734              		.loc 1 6302 2 view .LVU7569
 28735 0022 FFF7FEFF 		bl	retstk_up
 28736              	.LVL2239:
6303:src/xeq.c     **** }
 28737              		.loc 1 6303 2 view .LVU7570
6303:src/xeq.c     **** }
 28738              		.loc 1 6303 4 is_stmt 0 view .LVU7571
 28739 0026 2268     		ldr	r2, [r4]
6303:src/xeq.c     **** }
 28740              		.loc 1 6303 2 view .LVU7572
 28741 0028 B2F8E237 		ldrh	r3, [r2, #2018]
ARM GAS  /tmp/cc7LeJ71.s 			page 736


 28742 002c 013B     		subs	r3, r3, #1
 28743 002e A2F8E237 		strh	r3, [r2, #2018]	@ movhi
 28744              		.loc 1 6304 1 view .LVU7573
 28745 0032 10BD     		pop	{r4, pc}
 28746              	.L2076:
 28747              		.align	2
 28748              	.L2075:
 28749 0034 00000000 		.word	main_ram
 28750 0038 00000000 		.word	Error
 28751              		.cfi_endproc
 28752              	.LFE271:
 28754              		.section	.text.cmdregs,"ax",%progbits
 28755              		.align	1
 28756              		.p2align 2,,3
 28757              		.global	cmdregs
 28758              		.syntax unified
 28759              		.thumb
 28760              		.thumb_func
 28761              		.fpu fpv4-sp-d16
 28763              	cmdregs:
 28764              	.LVL2240:
 28765              	.LFB272:
6305:src/xeq.c     **** 
6306:src/xeq.c     **** /*
6307:src/xeq.c     ****  *  Reduce the number of global registers in favour of local data on the return stack
6308:src/xeq.c     ****  */
6309:src/xeq.c     **** void cmdregs(unsigned int arg, enum rarg op) {
 28766              		.loc 1 6309 46 is_stmt 1 view -0
 28767              		.cfi_startproc
 28768              		@ args = 0, pretend = 0, frame = 0
 28769              		@ frame_needed = 0, uses_anonymous_args = 0
6310:src/xeq.c     **** 	int distance;
 28770              		.loc 1 6310 2 view .LVU7575
6311:src/xeq.c     **** 	int length;
 28771              		.loc 1 6311 2 view .LVU7576
6312:src/xeq.c     **** 
6313:src/xeq.c     **** 	if (is_dblmode()) {
 28772              		.loc 1 6313 2 view .LVU7577
 28773              	.LBB3711:
 28774              	.LBI3711:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 28775              		.loc 1 1118 5 view .LVU7578
 28776              	.LBB3712:
1119:src/xeq.c     **** }
 28777              		.loc 1 1119 2 view .LVU7579
 28778              	.LBE3712:
 28779              	.LBE3711:
6309:src/xeq.c     **** 	int distance;
 28780              		.loc 1 6309 46 is_stmt 0 view .LVU7580
 28781 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28782              		.cfi_def_cfa_offset 24
 28783              		.cfi_offset 4, -24
 28784              		.cfi_offset 5, -20
 28785              		.cfi_offset 6, -16
 28786              		.cfi_offset 7, -12
 28787              		.cfi_offset 8, -8
 28788              		.cfi_offset 14, -4
ARM GAS  /tmp/cc7LeJ71.s 			page 737


 28789              	.LBB3714:
 28790              	.LBB3713:
1119:src/xeq.c     **** }
 28791              		.loc 1 1119 12 view .LVU7581
 28792 0004 294F     		ldr	r7, .L2093
 28793 0006 3A68     		ldr	r2, [r7]
1119:src/xeq.c     **** }
 28794              		.loc 1 1119 24 view .LVU7582
 28795 0008 B2F8E817 		ldrh	r1, [r2, #2024]
 28796              	.LVL2241:
1119:src/xeq.c     **** }
 28797              		.loc 1 1119 24 view .LVU7583
 28798 000c 44F20103 		movw	r3, #16385
 28799              	.LBE3713:
 28800              	.LBE3714:
 28801              		.loc 1 6313 5 view .LVU7584
 28802 0010 0B40     		ands	r3, r3, r1
 28803 0012 B3F5804F 		cmp	r3, #16384
6309:src/xeq.c     **** 	int distance;
 28804              		.loc 1 6309 46 view .LVU7585
 28805 0016 0446     		mov	r4, r0
 28806              		.loc 1 6313 5 view .LVU7586
 28807 0018 36D0     		beq	.L2089
6314:src/xeq.c     **** 		// DP register length 16 bytes
6315:src/xeq.c     **** 		length = (arg << 4); 
6316:src/xeq.c     **** 		// We need additional room for lettered registers
6317:src/xeq.c     **** 		arg = (arg << 1) + STACK_SIZE + EXTRA_REG;
6318:src/xeq.c     **** 	}
6319:src/xeq.c     **** 	else {
6320:src/xeq.c     **** 		if (UState.mode_double && arg < STACK_SIZE + EXTRA_REG) {
 28808              		.loc 1 6320 3 is_stmt 1 view .LVU7587
 28809              		.loc 1 6320 7 is_stmt 0 view .LVU7588
 28810 001a 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 28811              		.loc 1 6320 6 view .LVU7589
 28812 001e 5B06     		lsls	r3, r3, #25
 28813 0020 29D4     		bmi	.L2090
 28814              	.L2080:
6321:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
6322:src/xeq.c     **** 			// We must not release the space needed for the DP lettered registers
6323:src/xeq.c     **** 			report_err(ERR_RANGE);
6324:src/xeq.c     **** 			return;
6325:src/xeq.c     **** 		}
6326:src/xeq.c     **** 		// register length 8 bytes
6327:src/xeq.c     **** 		length = (arg << 3);
 28815              		.loc 1 6327 3 is_stmt 1 view .LVU7590
 28816              		.loc 1 6327 17 is_stmt 0 view .LVU7591
 28817 0022 4FEAC408 		lsl	r8, r4, #3
 28818              	.LVL2242:
 28819              	.L2079:
6328:src/xeq.c     **** 	}
6329:src/xeq.c     **** 	distance = NumRegs - arg;
 28820              		.loc 1 6329 2 is_stmt 1 view .LVU7592
 28821              		.loc 1 6329 13 is_stmt 0 view .LVU7593
 28822 0026 92F8CF57 		ldrb	r5, [r2, #1999]	@ zero_extendqisi2
 28823              		.loc 1 6329 21 view .LVU7594
 28824 002a 2D1B     		subs	r5, r5, r4
 28825              	.LVL2243:
ARM GAS  /tmp/cc7LeJ71.s 			page 738


6330:src/xeq.c     **** 	
6331:src/xeq.c     **** 	// Move return stack, check for room
6332:src/xeq.c     **** 	if (move_retstk(distance << 2))
 28826              		.loc 1 6332 2 is_stmt 1 view .LVU7595
 28827              		.loc 1 6332 6 is_stmt 0 view .LVU7596
 28828 002c A800     		lsls	r0, r5, #2
 28829 002e FFF7FEFF 		bl	move_retstk
 28830              	.LVL2244:
 28831              		.loc 1 6332 5 view .LVU7597
 28832 0032 0646     		mov	r6, r0
 28833 0034 08B1     		cbz	r0, .L2091
 28834              	.LVL2245:
 28835              	.L2077:
6333:src/xeq.c     **** 		return;
6334:src/xeq.c     **** 	
6335:src/xeq.c     **** 	// Move register contents, including the statistics registers
6336:src/xeq.c     **** 	xcopy((unsigned short *)(Regs + TOPREALREG - arg)     - SizeStatRegs,
6337:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
6338:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
6339:src/xeq.c     **** 
6340:src/xeq.c     **** 	// Clear the left space
6341:src/xeq.c     **** 	if (distance < 0)
6342:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
6343:src/xeq.c     **** 	NumRegs = arg;
6344:src/xeq.c     **** }
 28836              		.loc 1 6344 1 view .LVU7598
 28837 0036 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28838              	.LVL2246:
 28839              	.L2091:
6336:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28840              		.loc 1 6336 2 is_stmt 1 view .LVU7599
6336:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28841              		.loc 1 6336 27 is_stmt 0 view .LVU7600
 28842 003a 3B68     		ldr	r3, [r7]
6336:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28843              		.loc 1 6336 56 view .LVU7601
 28844 003c 1C4A     		ldr	r2, .L2093+4
6337:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28845              		.loc 1 6337 45 view .LVU7602
 28846 003e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
6336:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28847              		.loc 1 6336 56 view .LVU7603
 28848 0042 1268     		ldr	r2, [r2]
6337:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28849              		.loc 1 6337 45 view .LVU7604
 28850 0044 C1F16401 		rsb	r1, r1, #100
6336:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28851              		.loc 1 6336 45 view .LVU7605
 28852 0048 C4F16400 		rsb	r0, r4, #100
6336:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28853              		.loc 1 6336 27 view .LVU7606
 28854 004c 03F58663 		add	r3, r3, #1072
6337:src/xeq.c     **** 	      length + (SizeStatRegs << 1));
 28855              		.loc 1 6337 56 view .LVU7607
 28856 0050 C2EB8101 		rsb	r1, r2, r1, lsl #2
6336:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28857              		.loc 1 6336 56 view .LVU7608
ARM GAS  /tmp/cc7LeJ71.s 			page 739


 28858 0054 C2EB8000 		rsb	r0, r2, r0, lsl #2
6336:src/xeq.c     **** 	      (unsigned short *)(Regs + TOPREALREG - NumRegs) - SizeStatRegs,
 28859              		.loc 1 6336 2 view .LVU7609
 28860 0058 03EB4101 		add	r1, r3, r1, lsl #1
 28861 005c 08EB4202 		add	r2, r8, r2, lsl #1
 28862 0060 03EB4000 		add	r0, r3, r0, lsl #1
 28863 0064 FFF7FEFF 		bl	xcopy
 28864              	.LVL2247:
6341:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28865              		.loc 1 6341 2 is_stmt 1 view .LVU7610
6341:src/xeq.c     **** 		xset(Regs + TOPREALREG + distance, 0, -distance << 3);
 28866              		.loc 1 6341 5 is_stmt 0 view .LVU7611
 28867 0068 002D     		cmp	r5, #0
 28868 006a 13DB     		blt	.L2092
 28869              	.L2084:
6343:src/xeq.c     **** }
 28870              		.loc 1 6343 2 is_stmt 1 view .LVU7612
6343:src/xeq.c     **** }
 28871              		.loc 1 6343 10 is_stmt 0 view .LVU7613
 28872 006c 3B68     		ldr	r3, [r7]
 28873 006e 83F8CF47 		strb	r4, [r3, #1999]
 28874              		.loc 1 6344 1 view .LVU7614
 28875 0072 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 28876              	.LVL2248:
 28877              	.L2090:
6320:src/xeq.c     **** 			// Special case: we're in int mode but came from DP
 28878              		.loc 1 6320 26 discriminator 1 view .LVU7615
 28879 0076 0B28     		cmp	r0, #11
 28880 0078 D3D8     		bhi	.L2080
6323:src/xeq.c     **** 			return;
 28881              		.loc 1 6323 4 is_stmt 1 view .LVU7616
 28882              	.LVL2249:
 28883              	.LBB3715:
 28884              	.LBI3715:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28885              		.loc 1 546 5 view .LVU7617
 28886              	.LBB3716:
 547:src/xeq.c     **** 		Error = e;
 28887              		.loc 1 547 2 view .LVU7618
 547:src/xeq.c     **** 		Error = e;
 28888              		.loc 1 547 12 is_stmt 0 view .LVU7619
 28889 007a 0E4B     		ldr	r3, .L2093+8
 547:src/xeq.c     **** 		Error = e;
 28890              		.loc 1 547 5 view .LVU7620
 28891 007c 1A68     		ldr	r2, [r3]
 28892 007e 002A     		cmp	r2, #0
 28893 0080 D9D1     		bne	.L2077
 28894              	.LVL2250:
 28895              	.LBB3717:
 28896              	.LBI3717:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 28897              		.loc 1 546 5 is_stmt 1 view .LVU7621
 28898              	.LBB3718:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28899              		.loc 1 548 3 view .LVU7622
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 28900              		.loc 1 548 9 is_stmt 0 view .LVU7623
ARM GAS  /tmp/cc7LeJ71.s 			page 740


 28901 0082 0822     		movs	r2, #8
 28902 0084 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28903              		.loc 1 549 3 is_stmt 1 view .LVU7624
 28904 0086 D6E7     		b	.L2077
 28905              	.LVL2251:
 28906              	.L2089:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 28907              		.loc 1 549 3 is_stmt 0 view .LVU7625
 28908              	.LBE3718:
 28909              	.LBE3717:
 28910              	.LBE3716:
 28911              	.LBE3715:
6315:src/xeq.c     **** 		// We need additional room for lettered registers
 28912              		.loc 1 6315 3 is_stmt 1 view .LVU7626
6317:src/xeq.c     **** 	}
 28913              		.loc 1 6317 14 is_stmt 0 view .LVU7627
 28914 0088 4300     		lsls	r3, r0, #1
6315:src/xeq.c     **** 		// We need additional room for lettered registers
 28915              		.loc 1 6315 17 view .LVU7628
 28916 008a 4FEA0018 		lsl	r8, r0, #4
 28917              	.LVL2252:
6317:src/xeq.c     **** 	}
 28918              		.loc 1 6317 3 is_stmt 1 view .LVU7629
6317:src/xeq.c     **** 	}
 28919              		.loc 1 6317 7 is_stmt 0 view .LVU7630
 28920 008e 03F10C04 		add	r4, r3, #12
 28921              	.LVL2253:
6317:src/xeq.c     **** 	}
 28922              		.loc 1 6317 7 view .LVU7631
 28923 0092 C8E7     		b	.L2079
 28924              	.LVL2254:
 28925              	.L2092:
6342:src/xeq.c     **** 	NumRegs = arg;
 28926              		.loc 1 6342 3 is_stmt 1 view .LVU7632
6342:src/xeq.c     **** 	NumRegs = arg;
 28927              		.loc 1 6342 8 is_stmt 0 view .LVU7633
 28928 0094 3868     		ldr	r0, [r7]
6342:src/xeq.c     **** 	NumRegs = arg;
 28929              		.loc 1 6342 41 view .LVU7634
 28930 0096 6A42     		rsbs	r2, r5, #0
6342:src/xeq.c     **** 	NumRegs = arg;
 28931              		.loc 1 6342 26 view .LVU7635
 28932 0098 00EBC500 		add	r0, r0, r5, lsl #3
6342:src/xeq.c     **** 	NumRegs = arg;
 28933              		.loc 1 6342 3 view .LVU7636
 28934 009c 3146     		mov	r1, r6
 28935 009e D200     		lsls	r2, r2, #3
 28936 00a0 00F5EA60 		add	r0, r0, #1872
 28937 00a4 FFF7FEFF 		bl	xset
 28938              	.LVL2255:
 28939 00a8 E0E7     		b	.L2084
 28940              	.L2094:
 28941 00aa 00BF     		.align	2
 28942              	.L2093:
 28943 00ac 00000000 		.word	main_ram
 28944 00b0 00000000 		.word	SizeStatRegs
ARM GAS  /tmp/cc7LeJ71.s 			page 741


 28945 00b4 00000000 		.word	Error
 28946              		.cfi_endproc
 28947              	.LFE272:
 28949              		.section	.text.op_double,"ax",%progbits
 28950              		.align	1
 28951              		.p2align 2,,3
 28952              		.global	op_double
 28953              		.syntax unified
 28954              		.thumb
 28955              		.thumb_func
 28956              		.fpu fpv4-sp-d16
 28958              	op_double:
 28959              	.LVL2256:
 28960              	.LFB218:
4106:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28961              		.loc 1 4106 31 is_stmt 1 view -0
 28962              		.cfi_startproc
 28963              		@ args = 0, pretend = 0, frame = 40
 28964              		@ frame_needed = 0, uses_anonymous_args = 0
4107:src/xeq.c     **** 	const int intm = is_intmode();
 28965              		.loc 1 4107 2 view .LVU7638
4106:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28966              		.loc 1 4106 31 is_stmt 0 view .LVU7639
 28967 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 28968              		.cfi_def_cfa_offset 24
 28969              		.cfi_offset 4, -24
 28970              		.cfi_offset 5, -20
 28971              		.cfi_offset 6, -16
 28972              		.cfi_offset 7, -12
 28973              		.cfi_offset 8, -8
 28974              		.cfi_offset 14, -4
4108:src/xeq.c     **** 	int i;
 28975              		.loc 1 4108 19 view .LVU7640
 28976 0004 454E     		ldr	r6, .L2123
 28977 0006 3368     		ldr	r3, [r6]
4111:src/xeq.c     **** 		// Mode switch
 28978              		.loc 1 4111 5 view .LVU7641
 28979 0008 A0F1B504 		sub	r4, r0, #181
4111:src/xeq.c     **** 		// Mode switch
 28980              		.loc 1 4111 19 view .LVU7642
 28981 000c 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4108:src/xeq.c     **** 	int i;
 28982              		.loc 1 4108 19 view .LVU7643
 28983 0010 93F8E887 		ldrb	r8, [r3, #2024]	@ zero_extendqisi2
 28984              	.LVL2257:
4108:src/xeq.c     **** 	int i;
 28985              		.loc 1 4108 2 is_stmt 1 view .LVU7644
4111:src/xeq.c     **** 		// Mode switch
 28986              		.loc 1 4111 5 is_stmt 0 view .LVU7645
 28987 0014 B4FA84F4 		clz	r4, r4
 28988 0018 C2F38011 		ubfx	r1, r2, #6, #1
 28989 001c 6409     		lsrs	r4, r4, #5
 28990 001e 8C42     		cmp	r4, r1
4106:src/xeq.c     **** 	const int dbl = (op == OP_DBLON);
 28991              		.loc 1 4106 31 view .LVU7646
 28992 0020 8AB0     		sub	sp, sp, #40
 28993              		.cfi_def_cfa_offset 64
ARM GAS  /tmp/cc7LeJ71.s 			page 742


4108:src/xeq.c     **** 	int i;
 28994              		.loc 1 4108 12 view .LVU7647
 28995 0022 08F00108 		and	r8, r8, #1
 28996              	.LVL2258:
4109:src/xeq.c     **** 
 28997              		.loc 1 4109 2 is_stmt 1 view .LVU7648
4111:src/xeq.c     **** 		// Mode switch
 28998              		.loc 1 4111 2 view .LVU7649
4111:src/xeq.c     **** 		// Mode switch
 28999              		.loc 1 4111 5 is_stmt 0 view .LVU7650
 29000 0026 41D0     		beq	.L2096
4113:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 29001              		.loc 1 4113 3 is_stmt 1 view .LVU7651
4113:src/xeq.c     **** 			if (NumRegs < STACK_SIZE + EXTRA_REG) {
 29002              		.loc 1 4113 6 is_stmt 0 view .LVU7652
 29003 0028 B528     		cmp	r0, #181
 29004 002a 4AD0     		beq	.L2121
4131:src/xeq.c     **** 				// Convert X to K to single precision
 29005              		.loc 1 4131 4 is_stmt 1 view .LVU7653
4131:src/xeq.c     **** 				// Convert X to K to single precision
 29006              		.loc 1 4131 7 is_stmt 0 view .LVU7654
 29007 002c B8F1000F 		cmp	r8, #0
 29008 0030 25D1     		bne	.L2104
 29009 0032 6F24     		movs	r4, #111
 29010 0034 01AF     		add	r7, sp, #4
 29011              	.LVL2259:
 29012              	.L2106:
4135:src/xeq.c     **** 			}
 29013              		.loc 1 4135 6 is_stmt 1 discriminator 3 view .LVU7655
4135:src/xeq.c     **** 			}
 29014              		.loc 1 4135 28 is_stmt 0 discriminator 3 view .LVU7656
 29015 0036 03F58663 		add	r3, r3, #1072
 29016              	.LBB3719:
 29017              	.LBB3720:
 719:src/xeq.c     **** }
 29018              		.loc 1 719 9 discriminator 3 view .LVU7657
 29019 003a 2046     		mov	r0, r4
 29020              	.LBE3720:
 29021              	.LBE3719:
4135:src/xeq.c     **** 			}
 29022              		.loc 1 4135 6 discriminator 3 view .LVU7658
 29023 003c 03EBC405 		add	r5, r3, r4, lsl #3
 29024              	.LVL2260:
 29025              	.LBB3722:
 29026              	.LBI3719:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 29027              		.loc 1 718 11 is_stmt 1 discriminator 3 view .LVU7659
 29028              	.LBB3721:
 719:src/xeq.c     **** }
 29029              		.loc 1 719 2 discriminator 3 view .LVU7660
 719:src/xeq.c     **** }
 29030              		.loc 1 719 9 is_stmt 0 discriminator 3 view .LVU7661
 29031 0040 FFF7FEFF 		bl	get_reg_n
 29032              	.LVL2261:
 719:src/xeq.c     **** }
 29033              		.loc 1 719 9 discriminator 3 view .LVU7662
 29034              	.LBE3721:
ARM GAS  /tmp/cc7LeJ71.s 			page 743


 29035              	.LBE3722:
 29036              	.LBB3723:
 29037              	.LBI3723:
 648:src/xeq.c     **** 	decNumber temp;
 29038              		.loc 1 648 6 is_stmt 1 discriminator 3 view .LVU7663
 29039              	.LBB3724:
 649:src/xeq.c     **** 	packed_from_number(r, decimal128ToNumber(s, &temp));
 29040              		.loc 1 649 2 discriminator 3 view .LVU7664
 650:src/xeq.c     **** }
 29041              		.loc 1 650 2 discriminator 3 view .LVU7665
 650:src/xeq.c     **** }
 29042              		.loc 1 650 24 is_stmt 0 discriminator 3 view .LVU7666
 29043 0044 3946     		mov	r1, r7
 29044 0046 FFF7FEFF 		bl	decimal128ToNumber
 29045              	.LVL2262:
 650:src/xeq.c     **** }
 29046              		.loc 1 650 24 discriminator 3 view .LVU7667
 29047 004a 013C     		subs	r4, r4, #1
 29048              	.LVL2263:
 650:src/xeq.c     **** }
 29049              		.loc 1 650 24 discriminator 3 view .LVU7668
 29050 004c 0146     		mov	r1, r0
 650:src/xeq.c     **** }
 29051              		.loc 1 650 2 discriminator 3 view .LVU7669
 29052 004e 2846     		mov	r0, r5
 29053 0050 FFF7FEFF 		bl	packed_from_number
 29054              	.LVL2264:
 650:src/xeq.c     **** }
 29055              		.loc 1 650 2 discriminator 3 view .LVU7670
 29056              	.LBE3724:
 29057              	.LBE3723:
4134:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 29058              		.loc 1 4134 50 is_stmt 1 discriminator 3 view .LVU7671
4134:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 29059              		.loc 1 4134 42 discriminator 3 view .LVU7672
4134:src/xeq.c     **** 					packed_from_packed128(Regs + regX_idx + i, &(get_stack(i)->d));
 29060              		.loc 1 4134 5 is_stmt 0 discriminator 3 view .LVU7673
 29061 0054 632C     		cmp	r4, #99
 29062 0056 3368     		ldr	r3, [r6]
 29063 0058 EDD1     		bne	.L2106
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29064              		.loc 1 4137 4 is_stmt 1 view .LVU7674
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29065              		.loc 1 4137 23 is_stmt 0 view .LVU7675
 29066 005a 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29067              		.loc 1 4138 7 view .LVU7676
 29068 005e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29069              		.loc 1 4137 23 view .LVU7677
 29070 0062 6FF38612 		bfc	r2, #6, #1
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29071              		.loc 1 4138 7 view .LVU7678
 29072 0066 6429     		cmp	r1, #100
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29073              		.loc 1 4137 23 view .LVU7679
 29074 0068 83F8E927 		strb	r2, [r3, #2025]
ARM GAS  /tmp/cc7LeJ71.s 			page 744


4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29075              		.loc 1 4138 4 is_stmt 1 view .LVU7680
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29076              		.loc 1 4138 7 is_stmt 0 view .LVU7681
 29077 006c 1AD8     		bhi	.L2109
 29078              	.LVL2265:
 29079              	.L2118:
4142:src/xeq.c     **** 	if (intm) {
 29080              		.loc 1 4142 2 is_stmt 1 view .LVU7682
4142:src/xeq.c     **** 	if (intm) {
 29081              		.loc 1 4142 14 is_stmt 0 view .LVU7683
 29082 006e 6420     		movs	r0, #100
 29083 0070 FFF7FEFF 		bl	get_reg_n
 29084              	.LVL2266:
4142:src/xeq.c     **** 	if (intm) {
 29085              		.loc 1 4142 12 view .LVU7684
 29086 0074 2A4B     		ldr	r3, .L2123+4
 29087 0076 1860     		str	r0, [r3]
4143:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29088              		.loc 1 4143 2 is_stmt 1 view .LVU7685
 29089              	.L2095:
4147:src/xeq.c     **** 
 29090              		.loc 1 4147 1 is_stmt 0 view .LVU7686
 29091 0078 0AB0     		add	sp, sp, #40
 29092              		.cfi_remember_state
 29093              		.cfi_def_cfa_offset 24
 29094              		@ sp needed
 29095 007a BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29096              	.LVL2267:
 29097              	.L2104:
 29098              		.cfi_restore_state
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29099              		.loc 1 4137 4 is_stmt 1 view .LVU7687
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29100              		.loc 1 4138 7 is_stmt 0 view .LVU7688
 29101 007e 93F8CF17 		ldrb	r1, [r3, #1999]	@ zero_extendqisi2
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29102              		.loc 1 4137 23 view .LVU7689
 29103 0082 6FF38612 		bfc	r2, #6, #1
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29104              		.loc 1 4138 7 view .LVU7690
 29105 0086 6429     		cmp	r1, #100
4137:src/xeq.c     **** 			if (NumRegs > TOPREALREG)
 29106              		.loc 1 4137 23 view .LVU7691
 29107 0088 83F8E927 		strb	r2, [r3, #2025]
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29108              		.loc 1 4138 4 is_stmt 1 view .LVU7692
4138:src/xeq.c     **** 				cmdregs(TOPREALREG, RARG_REGS);
 29109              		.loc 1 4138 7 is_stmt 0 view .LVU7693
 29110 008c 0AD8     		bhi	.L2109
 29111              	.LVL2268:
 29112              	.L2117:
4142:src/xeq.c     **** 	if (intm) {
 29113              		.loc 1 4142 2 is_stmt 1 view .LVU7694
4142:src/xeq.c     **** 	if (intm) {
 29114              		.loc 1 4142 14 is_stmt 0 view .LVU7695
 29115 008e 6420     		movs	r0, #100
ARM GAS  /tmp/cc7LeJ71.s 			page 745


 29116 0090 FFF7FEFF 		bl	get_reg_n
 29117              	.LVL2269:
4142:src/xeq.c     **** 	if (intm) {
 29118              		.loc 1 4142 12 view .LVU7696
 29119 0094 224B     		ldr	r3, .L2123+4
 29120 0096 1860     		str	r0, [r3]
4143:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29121              		.loc 1 4143 2 is_stmt 1 view .LVU7697
 29122              	.L2108:
4145:src/xeq.c     **** 	}
 29123              		.loc 1 4145 3 view .LVU7698
 29124 0098 DC20     		movs	r0, #220
 29125 009a FFF7FEFF 		bl	op_float
 29126              	.LVL2270:
4147:src/xeq.c     **** 
 29127              		.loc 1 4147 1 is_stmt 0 view .LVU7699
 29128 009e 0AB0     		add	sp, sp, #40
 29129              		.cfi_remember_state
 29130              		.cfi_def_cfa_offset 24
 29131              		@ sp needed
 29132 00a0 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29133              	.LVL2271:
 29134              	.L2109:
 29135              		.cfi_restore_state
4139:src/xeq.c     **** 		}
 29136              		.loc 1 4139 5 is_stmt 1 view .LVU7700
 29137 00a4 7D21     		movs	r1, #125
 29138 00a6 6420     		movs	r0, #100
 29139 00a8 FFF7FEFF 		bl	cmdregs
 29140              	.LVL2272:
 29141              	.L2096:
4142:src/xeq.c     **** 	if (intm) {
 29142              		.loc 1 4142 2 view .LVU7701
4142:src/xeq.c     **** 	if (intm) {
 29143              		.loc 1 4142 14 is_stmt 0 view .LVU7702
 29144 00ac 6420     		movs	r0, #100
 29145 00ae FFF7FEFF 		bl	get_reg_n
 29146              	.LVL2273:
4142:src/xeq.c     **** 	if (intm) {
 29147              		.loc 1 4142 12 view .LVU7703
 29148 00b2 1B4B     		ldr	r3, .L2123+4
 29149 00b4 1860     		str	r0, [r3]
4143:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29150              		.loc 1 4143 2 is_stmt 1 view .LVU7704
4143:src/xeq.c     **** 		// Do the necessary conversions from integer mode
 29151              		.loc 1 4143 5 is_stmt 0 view .LVU7705
 29152 00b6 B8F1000F 		cmp	r8, #0
 29153 00ba EDD1     		bne	.L2108
4147:src/xeq.c     **** 
 29154              		.loc 1 4147 1 view .LVU7706
 29155 00bc 0AB0     		add	sp, sp, #40
 29156              		.cfi_remember_state
 29157              		.cfi_def_cfa_offset 24
 29158              		@ sp needed
 29159 00be BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29160              	.LVL2274:
 29161              	.L2121:
ARM GAS  /tmp/cc7LeJ71.s 			page 746


 29162              		.cfi_restore_state
4114:src/xeq.c     **** 				// Need space for double precision stack
 29163              		.loc 1 4114 4 is_stmt 1 view .LVU7707
4114:src/xeq.c     **** 				// Need space for double precision stack
 29164              		.loc 1 4114 7 is_stmt 0 view .LVU7708
 29165 00c2 93F8CF27 		ldrb	r2, [r3, #1999]	@ zero_extendqisi2
 29166 00c6 0B2A     		cmp	r2, #11
 29167 00c8 1ED9     		bls	.L2122
 29168              	.LVL2275:
 29169              	.L2098:
4122:src/xeq.c     **** 			if (! intm) {
 29170              		.loc 1 4122 4 is_stmt 1 view .LVU7709
4122:src/xeq.c     **** 			if (! intm) {
 29171              		.loc 1 4122 23 is_stmt 0 view .LVU7710
 29172 00ca 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29173 00ce 42F04002 		orr	r2, r2, #64
 29174 00d2 83F8E927 		strb	r2, [r3, #2025]
4123:src/xeq.c     **** 				// Convert X to K to double precision
 29175              		.loc 1 4123 4 is_stmt 1 view .LVU7711
4123:src/xeq.c     **** 				// Convert X to K to double precision
 29176              		.loc 1 4123 7 is_stmt 0 view .LVU7712
 29177 00d6 B8F1000F 		cmp	r8, #0
 29178 00da D8D1     		bne	.L2117
 29179 00dc 6424     		movs	r4, #100
 29180 00de 01AF     		add	r7, sp, #4
 29181              	.L2102:
 29182              	.LVL2276:
4127:src/xeq.c     **** 			}
 29183              		.loc 1 4127 6 is_stmt 1 view .LVU7713
 29184              	.LBB3725:
 29185              	.LBI3725:
 718:src/xeq.c     **** 	return get_reg_n(regX_idx + pos);
 29186              		.loc 1 718 11 view .LVU7714
 29187              	.LBB3726:
 719:src/xeq.c     **** }
 29188              		.loc 1 719 2 view .LVU7715
 719:src/xeq.c     **** }
 29189              		.loc 1 719 9 is_stmt 0 view .LVU7716
 29190 00e0 2046     		mov	r0, r4
 29191 00e2 FFF7FEFF 		bl	get_reg_n
 29192              	.LVL2277:
 29193              	.LBE3726:
 29194              	.LBE3725:
4127:src/xeq.c     **** 			}
 29195              		.loc 1 4127 48 view .LVU7717
 29196 00e6 3368     		ldr	r3, [r6]
 29197 00e8 03F58663 		add	r3, r3, #1072
 29198              	.LBB3728:
 29199              	.LBB3727:
 719:src/xeq.c     **** }
 29200              		.loc 1 719 9 view .LVU7718
 29201 00ec 0546     		mov	r5, r0
 29202              	.LVL2278:
 719:src/xeq.c     **** }
 29203              		.loc 1 719 9 view .LVU7719
 29204              	.LBE3727:
 29205              	.LBE3728:
ARM GAS  /tmp/cc7LeJ71.s 			page 747


 29206              	.LBB3729:
 29207              	.LBI3729:
 654:src/xeq.c     **** 	decNumber temp;
 29208              		.loc 1 654 6 is_stmt 1 view .LVU7720
 29209              	.LBB3730:
 655:src/xeq.c     **** 	packed128_from_number(r, decimal64ToNumber(s, &temp));
 29210              		.loc 1 655 2 view .LVU7721
 656:src/xeq.c     **** }
 29211              		.loc 1 656 2 view .LVU7722
 656:src/xeq.c     **** }
 29212              		.loc 1 656 27 is_stmt 0 view .LVU7723
 29213 00ee 3946     		mov	r1, r7
 29214 00f0 03EBC400 		add	r0, r3, r4, lsl #3
 29215              	.LVL2279:
 656:src/xeq.c     **** }
 29216              		.loc 1 656 27 view .LVU7724
 29217 00f4 FFF7FEFF 		bl	decimal64ToNumber
 29218              	.LVL2280:
 656:src/xeq.c     **** }
 29219              		.loc 1 656 27 view .LVU7725
 29220 00f8 0134     		adds	r4, r4, #1
 29221              	.LVL2281:
 656:src/xeq.c     **** }
 29222              		.loc 1 656 27 view .LVU7726
 29223 00fa 0146     		mov	r1, r0
 656:src/xeq.c     **** }
 29224              		.loc 1 656 2 view .LVU7727
 29225 00fc 2846     		mov	r0, r5
 29226 00fe FFF7FEFF 		bl	packed128_from_number
 29227              	.LVL2282:
 656:src/xeq.c     **** }
 29228              		.loc 1 656 2 view .LVU7728
 29229              	.LBE3730:
 29230              	.LBE3729:
4126:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29231              		.loc 1 4126 45 is_stmt 1 view .LVU7729
4126:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29232              		.loc 1 4126 17 view .LVU7730
4126:src/xeq.c     **** 					packed128_from_packed(&(get_stack(i)->d), Regs + regX_idx + i);
 29233              		.loc 1 4126 5 is_stmt 0 view .LVU7731
 29234 0102 702C     		cmp	r4, #112
 29235 0104 ECD1     		bne	.L2102
 29236 0106 B2E7     		b	.L2118
 29237              	.LVL2283:
 29238              	.L2122:
4116:src/xeq.c     **** 				if (Error) {
 29239              		.loc 1 4116 5 is_stmt 1 view .LVU7732
 29240 0108 7D21     		movs	r1, #125
 29241 010a 0C20     		movs	r0, #12
 29242              	.LVL2284:
4116:src/xeq.c     **** 				if (Error) {
 29243              		.loc 1 4116 5 is_stmt 0 view .LVU7733
 29244 010c FFF7FEFF 		bl	cmdregs
 29245              	.LVL2285:
4117:src/xeq.c     **** 					return;
 29246              		.loc 1 4117 5 is_stmt 1 view .LVU7734
4117:src/xeq.c     **** 					return;
ARM GAS  /tmp/cc7LeJ71.s 			page 748


 29247              		.loc 1 4117 9 is_stmt 0 view .LVU7735
 29248 0110 044B     		ldr	r3, .L2123+8
4117:src/xeq.c     **** 					return;
 29249              		.loc 1 4117 8 view .LVU7736
 29250 0112 1B68     		ldr	r3, [r3]
 29251 0114 002B     		cmp	r3, #0
 29252 0116 AFD1     		bne	.L2095
 29253 0118 3368     		ldr	r3, [r6]
 29254 011a D6E7     		b	.L2098
 29255              	.L2124:
 29256              		.align	2
 29257              	.L2123:
 29258 011c 00000000 		.word	main_ram
 29259 0120 00000000 		.word	StackBase
 29260 0124 00000000 		.word	Error
 29261              		.cfi_endproc
 29262              	.LFE218:
 29264              		.section	.text.cmdrestm,"ax",%progbits
 29265              		.align	1
 29266              		.p2align 2,,3
 29267              		.global	cmdrestm
 29268              		.syntax unified
 29269              		.thumb
 29270              		.thumb_func
 29271              		.fpu fpv4-sp-d16
 29273              	cmdrestm:
 29274              	.LVL2286:
 29275              	.LFB213:
3788:src/xeq.c     **** 	const int dbl = is_dblmode();
 29276              		.loc 1 3788 47 is_stmt 1 view -0
 29277              		.cfi_startproc
 29278              		@ args = 0, pretend = 0, frame = 0
 29279              		@ frame_needed = 0, uses_anonymous_args = 0
3789:src/xeq.c     **** 	const int intm = is_intmode();
 29280              		.loc 1 3789 2 view .LVU7738
 29281              	.LBB3731:
 29282              	.LBI3731:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29283              		.loc 1 1118 5 view .LVU7739
 29284              	.LBB3732:
1119:src/xeq.c     **** }
 29285              		.loc 1 1119 2 view .LVU7740
 29286              	.LBE3732:
 29287              	.LBE3731:
3788:src/xeq.c     **** 	const int dbl = is_dblmode();
 29288              		.loc 1 3788 47 is_stmt 0 view .LVU7741
 29289 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 29290              		.cfi_def_cfa_offset 24
 29291              		.cfi_offset 3, -24
 29292              		.cfi_offset 4, -20
 29293              		.cfi_offset 5, -16
 29294              		.cfi_offset 6, -12
 29295              		.cfi_offset 7, -8
 29296              		.cfi_offset 14, -4
 29297              	.LBB3740:
 29298              	.LBB3733:
1119:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 749


 29299              		.loc 1 1119 12 view .LVU7742
 29300 0002 254E     		ldr	r6, .L2132
 29301 0004 3568     		ldr	r5, [r6]
 29302              	.LBE3733:
 29303              	.LBE3740:
3790:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29304              		.loc 1 3790 19 view .LVU7743
 29305 0006 95F8E847 		ldrb	r4, [r5, #2024]	@ zero_extendqisi2
 29306              	.LBB3741:
 29307              	.LBB3734:
1119:src/xeq.c     **** }
 29308              		.loc 1 1119 24 view .LVU7744
 29309 000a B5F8E877 		ldrh	r7, [r5, #2024]
 29310              	.LVL2287:
1119:src/xeq.c     **** }
 29311              		.loc 1 1119 24 view .LVU7745
 29312              	.LBE3734:
 29313              	.LBE3741:
3790:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29314              		.loc 1 3790 2 is_stmt 1 view .LVU7746
3791:src/xeq.c     **** 
 29315              		.loc 1 3791 18 is_stmt 0 view .LVU7747
 29316 000e FFF7FEFF 		bl	get_reg_n
 29317              	.LVL2288:
3791:src/xeq.c     **** 
 29318              		.loc 1 3791 2 view .LVU7748
 29319 0012 0822     		movs	r2, #8
3791:src/xeq.c     **** 
 29320              		.loc 1 3791 18 view .LVU7749
 29321 0014 0146     		mov	r1, r0
3791:src/xeq.c     **** 
 29322              		.loc 1 3791 2 view .LVU7750
 29323 0016 05F2E470 		addw	r0, r5, #2020
 29324 001a FFF7FEFF 		bl	xcopy
 29325              	.LVL2289:
3798:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29326              		.loc 1 3798 14 view .LVU7751
 29327 001e 3368     		ldr	r3, [r6]
 29328 0020 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3790:src/xeq.c     **** 	xcopy( &UState, get_reg_n(arg), sizeof(unsigned long long int) );
 29329              		.loc 1 3790 19 view .LVU7752
 29330 0024 04F00104 		and	r4, r4, #1
 29331              	.LVL2290:
3791:src/xeq.c     **** 
 29332              		.loc 1 3791 2 is_stmt 1 view .LVU7753
3798:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29333              		.loc 1 3798 2 view .LVU7754
3798:src/xeq.c     **** 		// Switch back to decimal or integer mode
 29334              		.loc 1 3798 5 is_stmt 0 view .LVU7755
 29335 0028 02F00101 		and	r1, r2, #1
 29336 002c A142     		cmp	r1, r4
 29337 002e 08D0     		beq	.L2126
3800:src/xeq.c     **** 		if (intm)
 29338              		.loc 1 3800 3 is_stmt 1 view .LVU7756
3800:src/xeq.c     **** 		if (intm)
 29339              		.loc 1 3800 15 is_stmt 0 view .LVU7757
 29340 0030 64F30002 		bfi	r2, r4, #0, #1
ARM GAS  /tmp/cc7LeJ71.s 			page 750


 29341 0034 83F8E827 		strb	r2, [r3, #2024]
3801:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 29342              		.loc 1 3801 3 is_stmt 1 view .LVU7758
3801:src/xeq.c     **** 			op_float(OP_FLOAT_RCLM);
 29343              		.loc 1 3801 6 is_stmt 0 view .LVU7759
 29344 0038 4CB3     		cbz	r4, .L2127
3802:src/xeq.c     **** 		else
 29345              		.loc 1 3802 4 is_stmt 1 view .LVU7760
 29346 003a DD20     		movs	r0, #221
 29347 003c FFF7FEFF 		bl	op_float
 29348              	.LVL2291:
 29349 0040 3368     		ldr	r3, [r6]
 29350              	.L2126:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29351              		.loc 1 3806 2 view .LVU7761
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29352              		.loc 1 3806 6 is_stmt 0 view .LVU7762
 29353 0042 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29354              		.loc 1 3806 5 view .LVU7763
 29355 0046 D207     		lsls	r2, r2, #31
 29356 0048 20D4     		bmi	.L2125
 29357              	.LBB3742:
 29358              	.LBB3743:
1119:src/xeq.c     **** }
 29359              		.loc 1 1119 24 view .LVU7764
 29360 004a B3F8E827 		ldrh	r2, [r3, #2024]
 29361              	.LBE3743:
 29362              	.LBE3742:
 29363              	.LBB3746:
 29364              	.LBB3735:
 29365 004e 44F20101 		movw	r1, #16385
 29366              	.LBE3735:
 29367              	.LBE3746:
 29368              	.LBB3747:
 29369              	.LBB3744:
 29370 0052 0A40     		ands	r2, r2, r1
 29371              	.LBE3744:
 29372              	.LBE3747:
 29373              	.LBB3748:
 29374              	.LBB3736:
 29375 0054 0F40     		ands	r7, r7, r1
 29376              	.LVL2292:
1119:src/xeq.c     **** }
 29377              		.loc 1 1119 24 view .LVU7765
 29378              	.LBE3736:
 29379              	.LBE3748:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29380              		.loc 1 3806 21 view .LVU7766
 29381 0056 A2F58042 		sub	r2, r2, #16384
 29382              	.LBB3749:
 29383              	.LBB3737:
1119:src/xeq.c     **** }
 29384              		.loc 1 1119 24 view .LVU7767
 29385 005a A7F58041 		sub	r1, r7, #16384
 29386              	.LBE3737:
 29387              	.LBE3749:
ARM GAS  /tmp/cc7LeJ71.s 			page 751


3806:src/xeq.c     **** 		// Switch back to double/single precision
 29388              		.loc 1 3806 21 view .LVU7768
 29389 005e B2FA82F2 		clz	r2, r2
 29390              	.LBB3750:
 29391              	.LBB3738:
1119:src/xeq.c     **** }
 29392              		.loc 1 1119 24 view .LVU7769
 29393 0062 B1FA81F1 		clz	r1, r1
 29394              	.LBE3738:
 29395              	.LBE3750:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29396              		.loc 1 3806 21 view .LVU7770
 29397 0066 5209     		lsrs	r2, r2, #5
 29398              	.LBB3751:
 29399              	.LBB3739:
1119:src/xeq.c     **** }
 29400              		.loc 1 1119 24 view .LVU7771
 29401 0068 4909     		lsrs	r1, r1, #5
 29402              	.LBE3739:
 29403              	.LBE3751:
 29404              	.LBB3752:
 29405              	.LBI3742:
1118:src/xeq.c     **** 	return (! UState.intm && UState.mode_double);
 29406              		.loc 1 1118 5 is_stmt 1 view .LVU7772
 29407              	.LBB3745:
1119:src/xeq.c     **** }
 29408              		.loc 1 1119 2 view .LVU7773
 29409              	.LBE3745:
 29410              	.LBE3752:
3806:src/xeq.c     **** 		// Switch back to double/single precision
 29411              		.loc 1 3806 21 is_stmt 0 view .LVU7774
 29412 006a 8A42     		cmp	r2, r1
 29413 006c 0ED0     		beq	.L2125
3808:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29414              		.loc 1 3808 3 is_stmt 1 view .LVU7775
3808:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29415              		.loc 1 3808 22 is_stmt 0 view .LVU7776
 29416 006e 93F8E927 		ldrb	r2, [r3, #2025]	@ zero_extendqisi2
 29417 0072 61F38612 		bfi	r2, r1, #6, #1
3809:src/xeq.c     **** 	}
 29418              		.loc 1 3809 3 view .LVU7777
 29419 0076 B7F5804F 		cmp	r7, #16384
3808:src/xeq.c     **** 		op_double(dbl ? OP_DBLOFF : OP_DBLON);
 29420              		.loc 1 3808 22 view .LVU7778
 29421 007a 83F8E927 		strb	r2, [r3, #2025]
3809:src/xeq.c     **** 	}
 29422              		.loc 1 3809 3 is_stmt 1 view .LVU7779
3811:src/xeq.c     **** #endif
 29423              		.loc 1 3811 1 is_stmt 0 view .LVU7780
 29424 007e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 29425              		.cfi_remember_state
 29426              		.cfi_restore 14
 29427              		.cfi_restore 7
 29428              		.cfi_restore 6
 29429              		.cfi_restore 5
 29430              		.cfi_restore 4
 29431              		.cfi_restore 3
ARM GAS  /tmp/cc7LeJ71.s 			page 752


 29432              		.cfi_def_cfa_offset 0
3809:src/xeq.c     **** 	}
 29433              		.loc 1 3809 3 view .LVU7781
 29434 0082 0CBF     		ite	eq
 29435 0084 B620     		moveq	r0, #182
 29436 0086 B520     		movne	r0, #181
 29437 0088 FFF7FEBF 		b	op_double
 29438              	.LVL2293:
 29439              	.L2125:
 29440              		.cfi_restore_state
3811:src/xeq.c     **** #endif
 29441              		.loc 1 3811 1 view .LVU7782
 29442 008c F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 29443              	.LVL2294:
 29444              	.L2127:
3804:src/xeq.c     **** 	}
 29445              		.loc 1 3804 4 is_stmt 1 view .LVU7783
 29446 008e FFF7FEFF 		bl	switch_to_int
 29447              	.LVL2295:
 29448 0092 3368     		ldr	r3, [r6]
 29449 0094 D5E7     		b	.L2126
 29450              	.L2133:
 29451 0096 00BF     		.align	2
 29452              	.L2132:
 29453 0098 00000000 		.word	main_ram
 29454              		.cfi_endproc
 29455              	.LFE213:
 29457              		.section	.text.cmdxin,"ax",%progbits
 29458              		.align	1
 29459              		.p2align 2,,3
 29460              		.global	cmdxin
 29461              		.syntax unified
 29462              		.thumb
 29463              		.thumb_func
 29464              		.fpu fpv4-sp-d16
 29466              	cmdxin:
 29467              	.LVL2296:
 29468              	.LFB266:
5929:src/xeq.c     **** 
 29469              		.loc 1 5929 45 view -0
 29470              		.cfi_startproc
 29471              		@ args = 0, pretend = 0, frame = 40
 29472              		@ frame_needed = 0, uses_anonymous_args = 0
5931:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29473              		.loc 1 5931 2 view .LVU7785
5941:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29474              		.loc 1 5941 2 view .LVU7786
5929:src/xeq.c     **** 
 29475              		.loc 1 5929 45 is_stmt 0 view .LVU7787
 29476 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 29477              		.cfi_def_cfa_offset 24
 29478              		.cfi_offset 4, -24
 29479              		.cfi_offset 5, -20
 29480              		.cfi_offset 6, -16
 29481              		.cfi_offset 7, -12
 29482              		.cfi_offset 8, -8
 29483              		.cfi_offset 14, -4
ARM GAS  /tmp/cc7LeJ71.s 			page 753


5941:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29484              		.loc 1 5941 6 view .LVU7788
 29485 0004 6B4D     		ldr	r5, .L2163
5941:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29486              		.loc 1 5941 5 view .LVU7789
 29487 0006 95F90130 		ldrsb	r3, [r5, #1]
 29488 000a 002B     		cmp	r3, #0
5929:src/xeq.c     **** 
 29489              		.loc 1 5929 45 view .LVU7790
 29490 000c 8AB0     		sub	sp, sp, #40
 29491              		.cfi_def_cfa_offset 64
5941:src/xeq.c     **** 		report_err(ERR_ILLEGAL);
 29492              		.loc 1 5941 5 view .LVU7791
 29493 000e C0F2AF80 		blt	.L2160
5949:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29494              		.loc 1 5949 2 is_stmt 1 view .LVU7792
 29495 0012 694E     		ldr	r6, .L2163+4
5954:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29496              		.loc 1 5954 26 is_stmt 0 view .LVU7793
 29497 0014 694F     		ldr	r7, .L2163+8
 29498              	.LBB3768:
 29499              	.LBB3769:
 744:src/xeq.c     **** }
 29500              		.loc 1 744 15 view .LVU7794
 29501 0016 DFF8B881 		ldr	r8, .L2163+28
 29502 001a 0446     		mov	r4, r0
 29503              	.LBE3769:
 29504              	.LBE3768:
5949:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29505              		.loc 1 5949 2 view .LVU7795
 29506 001c 4FF4E872 		mov	r2, #464
 29507 0020 0021     		movs	r1, #0
 29508              	.LVL2297:
5949:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29509              		.loc 1 5949 2 view .LVU7796
 29510 0022 3046     		mov	r0, r6
 29511              	.LVL2298:
5949:src/xeq.c     **** 	xset(&XromParams, 0, sizeof(XromParams));
 29512              		.loc 1 5949 2 view .LVU7797
 29513 0024 FFF7FEFF 		bl	xset
 29514              	.LVL2299:
5950:src/xeq.c     **** 
 29515              		.loc 1 5950 2 is_stmt 1 view .LVU7798
 29516 0028 1022     		movs	r2, #16
 29517 002a 0021     		movs	r1, #0
 29518 002c 2846     		mov	r0, r5
 29519 002e FFF7FEFF 		bl	xset
 29520              	.LVL2300:
5953:src/xeq.c     **** 	XromFlags.stack_depth = UState.stack_depth;
 29521              		.loc 1 5953 2 view .LVU7799
 29522              	.LBB3773:
 29523              	.LBI3768:
 743:src/xeq.c     **** 	return State2.state_lift;
 29524              		.loc 1 743 12 view .LVU7800
 29525              	.LBB3770:
 744:src/xeq.c     **** }
 29526              		.loc 1 744 2 view .LVU7801
ARM GAS  /tmp/cc7LeJ71.s 			page 754


 29527              	.LBE3770:
 29528              	.LBE3773:
5954:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29529              		.loc 1 5954 26 is_stmt 0 view .LVU7802
 29530 0032 3A68     		ldr	r2, [r7]
5971:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29531              		.loc 1 5971 17 view .LVU7803
 29532 0034 6249     		ldr	r1, .L2163+12
5972:src/xeq.c     **** 
 29533              		.loc 1 5972 20 view .LVU7804
 29534 0036 B2F8E2C7 		ldrh	ip, [r2, #2018]
5971:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29535              		.loc 1 5971 17 view .LVU7805
 29536 003a 0868     		ldr	r0, [r1]
5972:src/xeq.c     **** 
 29537              		.loc 1 5972 20 view .LVU7806
 29538 003c A5F80CC0 		strh	ip, [r5, #12]	@ movhi
5974:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29539              		.loc 1 5974 9 view .LVU7807
 29540 0040 06F5E87C 		add	ip, r6, #464
 29541 0044 C1F800C0 		str	ip, [r1]
5971:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29542              		.loc 1 5971 17 view .LVU7808
 29543 0048 A860     		str	r0, [r5, #8]
5956:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29544              		.loc 1 5956 29 view .LVU7809
 29545 004a 92F8E837 		ldrb	r3, [r2, #2024]	@ zero_extendqisi2
5978:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29546              		.loc 1 5978 12 view .LVU7810
 29547 004e B2F8DEE7 		ldrh	lr, [r2, #2014]
 29548              	.LBB3774:
 29549              	.LBB3771:
 744:src/xeq.c     **** }
 29550              		.loc 1 744 15 view .LVU7811
 29551 0052 98F81700 		ldrb	r0, [r8, #23]	@ zero_extendqisi2
 29552              	.LBE3771:
 29553              	.LBE3774:
5954:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29554              		.loc 1 5954 32 view .LVU7812
 29555 0056 92F8EA17 		ldrb	r1, [r2, #2026]	@ zero_extendqisi2
5978:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29556              		.loc 1 5978 12 view .LVU7813
 29557 005a 6FF0010C 		mvn	ip, #1
5956:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29558              		.loc 1 5956 29 view .LVU7814
 29559 005e 03F00103 		and	r3, r3, #1
5978:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29560              		.loc 1 5978 12 view .LVU7815
 29561 0062 6CF34F1E 		bfi	lr, ip, #5, #11
 29562              	.LBB3775:
 29563              	.LBB3772:
 744:src/xeq.c     **** }
 29564              		.loc 1 744 15 view .LVU7816
 29565 0066 C0F38010 		ubfx	r0, r0, #6, #1
 29566              	.LBE3772:
 29567              	.LBE3775:
5954:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
ARM GAS  /tmp/cc7LeJ71.s 			page 755


 29568              		.loc 1 5954 2 is_stmt 1 view .LVU7817
5955:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29569              		.loc 1 5955 32 is_stmt 0 view .LVU7818
 29570 006a 92F8E9C7 		ldrb	ip, [r2, #2025]	@ zero_extendqisi2
5978:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29571              		.loc 1 5978 12 view .LVU7819
 29572 006e A2F8DEE7 		strh	lr, [r2, #2014]	@ movhi
5956:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29573              		.loc 1 5956 21 view .LVU7820
 29574 0072 63F03F03 		orn	r3, r3, #63
 29575 0076 43EA4003 		orr	r3, r3, r0, lsl #1
5954:src/xeq.c     **** 	XromFlags.mode_double = UState.mode_double;
 29576              		.loc 1 5954 32 view .LVU7821
 29577 007a C1F3C001 		ubfx	r1, r1, #3, #1
5955:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29578              		.loc 1 5955 2 is_stmt 1 view .LVU7822
5956:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29579              		.loc 1 5956 21 is_stmt 0 view .LVU7823
 29580 007e 43EA8103 		orr	r3, r3, r1, lsl #2
5955:src/xeq.c     **** 	XromFlags.mode_int = UState.intm;
 29581              		.loc 1 5955 32 view .LVU7824
 29582 0082 CCF3801C 		ubfx	ip, ip, #6, #1
5956:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29583              		.loc 1 5956 2 is_stmt 1 view .LVU7825
5957:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29584              		.loc 1 5957 9 view .LVU7826
5956:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29585              		.loc 1 5956 21 is_stmt 0 view .LVU7827
 29586 0086 43EACC03 		orr	r3, r3, ip, lsl #3
5957:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29587              		.loc 1 5957 41 view .LVU7828
 29588 008a 92F8EB17 		ldrb	r1, [r2, #2027]	@ zero_extendqisi2
5957:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29589              		.loc 1 5957 33 view .LVU7829
 29590 008e A878     		ldrb	r0, [r5, #2]	@ zero_extendqisi2
5990:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29591              		.loc 1 5990 35 view .LVU7830
 29592 0090 C4F3C01C 		ubfx	ip, r4, #7, #1
5956:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29593              		.loc 1 5956 21 view .LVU7831
 29594 0094 43EA0C13 		orr	r3, r3, ip, lsl #4
5989:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29595              		.loc 1 5989 36 view .LVU7832
 29596 0098 C4F3801C 		ubfx	ip, r4, #6, #1
5956:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29597              		.loc 1 5956 21 view .LVU7833
 29598 009c 43EA4C13 		orr	r3, r3, ip, lsl #5
5957:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29599              		.loc 1 5957 41 view .LVU7834
 29600 00a0 C1F30211 		ubfx	r1, r1, #4, #3
5958:src/xeq.c     **** 	XromFlags.xIN = 1;
 29601              		.loc 1 5958 2 is_stmt 1 view .LVU7835
5959:src/xeq.c     **** 
 29602              		.loc 1 5959 2 view .LVU7836
5971:src/xeq.c     **** 	XromUserRetStkPtr = RetStkPtr;
 29603              		.loc 1 5971 2 view .LVU7837
5972:src/xeq.c     **** 
ARM GAS  /tmp/cc7LeJ71.s 			page 756


 29604              		.loc 1 5972 2 view .LVU7838
5974:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29605              		.loc 1 5974 2 view .LVU7839
5978:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29606              		.loc 1 5978 2 view .LVU7840
5979:src/xeq.c     **** #endif
 29607              		.loc 1 5979 2 view .LVU7841
5978:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29608              		.loc 1 5978 24 is_stmt 0 view .LVU7842
 29609 00a4 4FF6FE7C 		movw	ip, #65534
5957:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29610              		.loc 1 5957 33 view .LVU7843
 29611 00a8 61F30200 		bfi	r0, r1, #0, #3
5979:src/xeq.c     **** #endif
 29612              		.loc 1 5979 17 view .LVU7844
 29613 00ac 41F2020E 		movw	lr, #4098
5991:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29614              		.loc 1 5991 16 view .LVU7845
 29615 00b0 04F00701 		and	r1, r4, #7
5956:src/xeq.c     ****         XromFlags.rounding_mode = UState.rounding_mode;
 29616              		.loc 1 5956 21 view .LVU7846
 29617 00b4 6B70     		strb	r3, [r5, #1]
5992:src/xeq.c     **** #endif
 29618              		.loc 1 5992 24 view .LVU7847
 29619 00b6 C4F3C204 		ubfx	r4, r4, #3, #3
 29620              	.LVL2301:
5978:src/xeq.c     **** 	XromRetStk[-2] = 2 | LOCAL_MARKER;
 29621              		.loc 1 5978 24 view .LVU7848
 29622 00ba A2F8E2C7 		strh	ip, [r2, #2018]	@ movhi
5994:src/xeq.c     **** 		// Complex arguments are always in pairs
 29623              		.loc 1 5994 6 view .LVU7849
 29624 00be 5FFA83FC 		uxtb	ip, r3
5994:src/xeq.c     **** 		// Complex arguments are always in pairs
 29625              		.loc 1 5994 5 view .LVU7850
 29626 00c2 DB06     		lsls	r3, r3, #27
5979:src/xeq.c     **** #endif
 29627              		.loc 1 5979 17 view .LVU7851
 29628 00c4 A6F8CCE1 		strh	lr, [r6, #460]	@ movhi
5989:src/xeq.c     **** 	XromFlags.complex = (arg & 0x80) != 0;
 29629              		.loc 1 5989 2 is_stmt 1 view .LVU7852
5990:src/xeq.c     **** 	XromIn = (arg & 0x7);
 29630              		.loc 1 5990 2 view .LVU7853
5957:src/xeq.c     **** 	XromFlags.state_lift = 1;
 29631              		.loc 1 5957 33 is_stmt 0 view .LVU7854
 29632 00c8 A870     		strb	r0, [r5, #2]
5991:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29633              		.loc 1 5991 2 is_stmt 1 view .LVU7855
5991:src/xeq.c     **** 	XromOut = ((arg >> 3) & 0x7);
 29634              		.loc 1 5991 9 is_stmt 0 view .LVU7856
 29635 00ca 2971     		strb	r1, [r5, #4]
5992:src/xeq.c     **** #endif
 29636              		.loc 1 5992 2 is_stmt 1 view .LVU7857
5992:src/xeq.c     **** #endif
 29637              		.loc 1 5992 10 is_stmt 0 view .LVU7858
 29638 00cc 6C71     		strb	r4, [r5, #5]
5994:src/xeq.c     **** 		// Complex arguments are always in pairs
 29639              		.loc 1 5994 2 is_stmt 1 view .LVU7859
ARM GAS  /tmp/cc7LeJ71.s 			page 757


5994:src/xeq.c     **** 		// Complex arguments are always in pairs
 29640              		.loc 1 5994 5 is_stmt 0 view .LVU7860
 29641 00ce 03D5     		bpl	.L2138
5996:src/xeq.c     **** 		XromOut <<= 1;
 29642              		.loc 1 5996 3 is_stmt 1 view .LVU7861
5996:src/xeq.c     **** 		XromOut <<= 1;
 29643              		.loc 1 5996 10 is_stmt 0 view .LVU7862
 29644 00d0 4900     		lsls	r1, r1, #1
5997:src/xeq.c     **** 	}
 29645              		.loc 1 5997 11 view .LVU7863
 29646 00d2 6400     		lsls	r4, r4, #1
5996:src/xeq.c     **** 		XromOut <<= 1;
 29647              		.loc 1 5996 10 view .LVU7864
 29648 00d4 2971     		strb	r1, [r5, #4]
5997:src/xeq.c     **** 	}
 29649              		.loc 1 5997 3 is_stmt 1 view .LVU7865
5997:src/xeq.c     **** 	}
 29650              		.loc 1 5997 11 is_stmt 0 view .LVU7866
 29651 00d6 6C71     		strb	r4, [r5, #5]
 29652              	.L2138:
6000:src/xeq.c     **** 
 29653              		.loc 1 6000 9 is_stmt 1 view .LVU7867
6000:src/xeq.c     **** 
 29654              		.loc 1 6000 30 is_stmt 0 view .LVU7868
 29655 00d8 92F8EB37 		ldrb	r3, [r2, #2027]	@ zero_extendqisi2
6011:src/xeq.c     **** 		// Convert integers to decimal128
 29656              		.loc 1 6011 5 view .LVU7869
 29657 00dc 1CF0010F 		tst	ip, #1
6000:src/xeq.c     **** 
 29658              		.loc 1 6000 30 view .LVU7870
 29659 00e0 6FF30613 		bfc	r3, #4, #3
 29660 00e4 82F8EB37 		strb	r3, [r2, #2027]
6011:src/xeq.c     **** 		// Convert integers to decimal128
 29661              		.loc 1 6011 2 is_stmt 1 view .LVU7871
6011:src/xeq.c     **** 		// Convert integers to decimal128
 29662              		.loc 1 6011 5 is_stmt 0 view .LVU7872
 29663 00e8 52D1     		bne	.L2161
6019:src/xeq.c     **** 		// No conversion necessary
 29664              		.loc 1 6019 7 is_stmt 1 view .LVU7873
6019:src/xeq.c     **** 		// No conversion necessary
 29665              		.loc 1 6019 10 is_stmt 0 view .LVU7874
 29666 00ea 1CF0080F 		tst	ip, #8
 29667 00ee 47D1     		bne	.L2162
6040:src/xeq.c     **** #endif
 29668              		.loc 1 6040 3 is_stmt 1 view .LVU7875
 29669 00f0 B520     		movs	r0, #181
 29670 00f2 FFF7FEFF 		bl	op_double
 29671              	.LVL2302:
 29672              	.L2140:
6045:src/xeq.c     **** 	UState.stack_depth = 1;
 29673              		.loc 1 6045 2 view .LVU7876
 29674              	.LBB3776:
 29675              	.LBI3776:
 767:src/xeq.c     ****     State2.state_lift = 1;
 29676              		.loc 1 767 6 view .LVU7877
 29677              	.LBB3777:
 768:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 758


 29678              		.loc 1 768 5 view .LVU7878
 768:src/xeq.c     **** }
 29679              		.loc 1 768 23 is_stmt 0 view .LVU7879
 29680 00f6 98F81730 		ldrb	r3, [r8, #23]	@ zero_extendqisi2
 29681              	.LBE3777:
 29682              	.LBE3776:
6046:src/xeq.c     **** 
 29683              		.loc 1 6046 21 view .LVU7880
 29684 00fa 3A68     		ldr	r2, [r7]
 29685              	.LBB3779:
 29686              	.LBB3778:
 768:src/xeq.c     **** }
 29687              		.loc 1 768 23 view .LVU7881
 29688 00fc 43F04003 		orr	r3, r3, #64
 29689 0100 88F81730 		strb	r3, [r8, #23]
 29690              	.LBE3778:
 29691              	.LBE3779:
6046:src/xeq.c     **** 
 29692              		.loc 1 6046 2 is_stmt 1 view .LVU7882
6046:src/xeq.c     **** 
 29693              		.loc 1 6046 21 is_stmt 0 view .LVU7883
 29694 0104 92F8EA37 		ldrb	r3, [r2, #2026]	@ zero_extendqisi2
 29695 0108 43F00803 		orr	r3, r3, #8
 29696 010c 82F8EA37 		strb	r3, [r2, #2026]
6049:src/xeq.c     **** 		decNumber x;
 29697              		.loc 1 6049 2 is_stmt 1 view .LVU7884
 29698              	.LVL2303:
6049:src/xeq.c     **** 		decNumber x;
 29699              		.loc 1 6049 14 view .LVU7885
6049:src/xeq.c     **** 		decNumber x;
 29700              		.loc 1 6049 2 is_stmt 0 view .LVU7886
 29701 0110 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
 29702 0112 93B3     		cbz	r3, .L2134
6049:src/xeq.c     **** 		decNumber x;
 29703              		.loc 1 6049 9 view .LVU7887
 29704 0114 0024     		movs	r4, #0
 29705 0116 02E0     		b	.L2147
 29706              	.LVL2304:
 29707              	.L2142:
6049:src/xeq.c     **** 		decNumber x;
 29708              		.loc 1 6049 18 view .LVU7888
 29709 0118 2B79     		ldrb	r3, [r5, #4]	@ zero_extendqisi2
6049:src/xeq.c     **** 		decNumber x;
 29710              		.loc 1 6049 2 view .LVU7889
 29711 011a A342     		cmp	r3, r4
 29712 011c 2DDD     		ble	.L2134
 29713              	.LVL2305:
 29714              	.L2147:
 29715              	.LBB3780:
6050:src/xeq.c     **** 		if (decNumberIsNaN(getRegister(&x, regX_idx + i))) {
 29716              		.loc 1 6050 3 is_stmt 1 view .LVU7890
6051:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29717              		.loc 1 6051 3 view .LVU7891
6051:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29718              		.loc 1 6051 7 is_stmt 0 view .LVU7892
 29719 011e 04F16401 		add	r1, r4, #100
 29720 0122 01A8     		add	r0, sp, #4
ARM GAS  /tmp/cc7LeJ71.s 			page 759


 29721 0124 FFF7FEFF 		bl	getRegister
 29722              	.LVL2306:
 29723              	.LBE3780:
6049:src/xeq.c     **** 		decNumber x;
 29724              		.loc 1 6049 26 is_stmt 1 view .LVU7893
 29725              	.LBB3787:
6051:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29726              		.loc 1 6051 6 is_stmt 0 view .LVU7894
 29727 0128 037A     		ldrb	r3, [r0, #8]	@ zero_extendqisi2
 29728 012a 13F0300F 		tst	r3, #48
 29729              	.LBE3787:
6049:src/xeq.c     **** 		decNumber x;
 29730              		.loc 1 6049 26 view .LVU7895
 29731 012e 04F10104 		add	r4, r4, #1
 29732              	.LVL2307:
6049:src/xeq.c     **** 		decNumber x;
 29733              		.loc 1 6049 14 is_stmt 1 view .LVU7896
 29734              	.LBB3788:
6051:src/xeq.c     **** 			// Got a NaN as input, now either NaN the outputs or raise a
 29735              		.loc 1 6051 6 is_stmt 0 view .LVU7897
 29736 0132 F1D0     		beq	.L2142
6054:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29737              		.loc 1 6054 4 is_stmt 1 view .LVU7898
 29738              	.LVL2308:
 29739              	.LBB3781:
 29740              	.LBI3781:
3556:src/xeq.c     **** 	unsigned short mask;
 29741              		.loc 1 3556 5 view .LVU7899
 29742              	.LBB3782:
3557:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 29743              		.loc 1 3557 2 view .LVU7900
3558:src/xeq.c     **** 
 29744              		.loc 1 3558 2 view .LVU7901
3558:src/xeq.c     **** 
 29745              		.loc 1 3558 34 is_stmt 0 view .LVU7902
 29746 0134 0DF10201 		add	r1, sp, #2
 29747 0138 6B20     		movs	r0, #107
 29748 013a FFF7FEFF 		bl	flag_word
 29749              	.LVL2309:
3560:src/xeq.c     **** }
 29750              		.loc 1 3560 2 is_stmt 1 view .LVU7903
3560:src/xeq.c     **** }
 29751              		.loc 1 3560 24 is_stmt 0 view .LVU7904
 29752 013e BDF80230 		ldrh	r3, [sp, #2]
 29753 0142 0288     		ldrh	r2, [r0]
 29754              	.LBE3782:
 29755              	.LBE3781:
6054:src/xeq.c     **** 				for (i = 0; i < XromOut; ++i)
 29756              		.loc 1 6054 7 view .LVU7905
 29757 0144 1A42     		tst	r2, r3
 29758 0146 2DD0     		beq	.L2143
 29759              	.LVL2310:
6055:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29760              		.loc 1 6055 17 is_stmt 1 view .LVU7906
6055:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29761              		.loc 1 6055 5 is_stmt 0 view .LVU7907
 29762 0148 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
ARM GAS  /tmp/cc7LeJ71.s 			page 760


 29763 014a 53B1     		cbz	r3, .L2144
6056:src/xeq.c     **** 				// Early exit of routine
 29764              		.loc 1 6056 6 view .LVU7908
 29765 014c 1D4E     		ldr	r6, .L2163+16
6055:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29766              		.loc 1 6055 12 view .LVU7909
 29767 014e 0024     		movs	r4, #0
 29768              	.LVL2311:
 29769              	.L2145:
6056:src/xeq.c     **** 				// Early exit of routine
 29770              		.loc 1 6056 6 is_stmt 1 discriminator 3 view .LVU7910
 29771 0150 04F16400 		add	r0, r4, #100
 29772 0154 3146     		mov	r1, r6
 29773 0156 FFF7FEFF 		bl	setRegister
 29774              	.LVL2312:
6055:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29775              		.loc 1 6055 30 discriminator 3 view .LVU7911
6055:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29776              		.loc 1 6055 21 is_stmt 0 discriminator 3 view .LVU7912
 29777 015a 6B79     		ldrb	r3, [r5, #5]	@ zero_extendqisi2
6055:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29778              		.loc 1 6055 30 discriminator 3 view .LVU7913
 29779 015c 0134     		adds	r4, r4, #1
 29780              	.LVL2313:
6055:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29781              		.loc 1 6055 17 is_stmt 1 discriminator 3 view .LVU7914
6055:src/xeq.c     **** 					setRegister(regX_idx + i, &const_NaN);
 29782              		.loc 1 6055 5 is_stmt 0 discriminator 3 view .LVU7915
 29783 015e A342     		cmp	r3, r4
 29784 0160 F6DC     		bgt	.L2145
 29785              	.LVL2314:
 29786              	.L2144:
6058:src/xeq.c     **** 			} 
 29787              		.loc 1 6058 5 is_stmt 1 view .LVU7916
 29788 0162 8421     		movs	r1, #132
 29789 0164 0020     		movs	r0, #0
 29790 0166 FFF7FEFF 		bl	cmdxout
 29791              	.LVL2315:
 29792              	.LBE3788:
6065:src/xeq.c     **** 
 29793              		.loc 1 6065 1 is_stmt 0 view .LVU7917
 29794 016a 0AB0     		add	sp, sp, #40
 29795              		.cfi_remember_state
 29796              		.cfi_def_cfa_offset 24
 29797              		@ sp needed
 29798 016c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29799              	.LVL2316:
 29800              	.L2160:
 29801              		.cfi_restore_state
5942:src/xeq.c     **** 		return;
 29802              		.loc 1 5942 3 is_stmt 1 view .LVU7918
 29803              	.LBB3789:
 29804              	.LBI3789:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29805              		.loc 1 546 5 view .LVU7919
 29806              	.LBB3790:
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/cc7LeJ71.s 			page 761


 29807              		.loc 1 547 2 view .LVU7920
 547:src/xeq.c     **** 		Error = e;
 29808              		.loc 1 547 12 is_stmt 0 view .LVU7921
 29809 0170 154B     		ldr	r3, .L2163+20
 547:src/xeq.c     **** 		Error = e;
 29810              		.loc 1 547 5 view .LVU7922
 29811 0172 1A68     		ldr	r2, [r3]
 29812 0174 0AB9     		cbnz	r2, .L2134
 29813              	.LVL2317:
 29814              	.LBB3791:
 29815              	.LBI3791:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29816              		.loc 1 546 5 is_stmt 1 view .LVU7923
 29817              	.LBB3792:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29818              		.loc 1 548 3 view .LVU7924
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29819              		.loc 1 548 9 is_stmt 0 view .LVU7925
 29820 0176 0722     		movs	r2, #7
 29821 0178 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29822              		.loc 1 549 3 is_stmt 1 view .LVU7926
 29823              	.LVL2318:
 29824              	.L2134:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29825              		.loc 1 549 3 is_stmt 0 view .LVU7927
 29826              	.LBE3792:
 29827              	.LBE3791:
 29828              	.LBE3790:
 29829              	.LBE3789:
6065:src/xeq.c     **** 
 29830              		.loc 1 6065 1 view .LVU7928
 29831 017a 0AB0     		add	sp, sp, #40
 29832              		.cfi_remember_state
 29833              		.cfi_def_cfa_offset 24
 29834              		@ sp needed
 29835 017c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 29836              	.L2162:
 29837              		.cfi_restore_state
6021:src/xeq.c     **** 		StackBase = XromStack;
 29838              		.loc 1 6021 3 is_stmt 1 view .LVU7929
 29839 0180 124C     		ldr	r4, .L2163+24
 29840 0182 0D48     		ldr	r0, .L2163+4
 29841 0184 2168     		ldr	r1, [r4]
 29842 0186 C022     		movs	r2, #192
 29843 0188 FFF7FEFF 		bl	xcopy
 29844              	.LVL2319:
6022:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29845              		.loc 1 6022 3 view .LVU7930
6022:src/xeq.c     **** #ifdef ENABLE_COPYLOCALS
 29846              		.loc 1 6022 13 is_stmt 0 view .LVU7931
 29847 018c 2660     		str	r6, [r4]
 29848 018e B2E7     		b	.L2140
 29849              	.L2161:
6014:src/xeq.c     **** #endif
 29850              		.loc 1 6014 3 is_stmt 1 view .LVU7932
6014:src/xeq.c     **** #endif
ARM GAS  /tmp/cc7LeJ71.s 			page 762


 29851              		.loc 1 6014 22 is_stmt 0 view .LVU7933
 29852 0190 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 29853 0194 43F04003 		orr	r3, r3, #64
 29854 0198 82F8E937 		strb	r3, [r2, #2025]
6016:src/xeq.c     **** 		// Do not copy the local registers because we don't use this case anyway
 29855              		.loc 1 6016 3 is_stmt 1 view .LVU7934
 29856 019c DC20     		movs	r0, #220
 29857 019e FFF7FEFF 		bl	op_float
 29858              	.LVL2320:
 29859 01a2 A8E7     		b	.L2140
 29860              	.LVL2321:
 29861              	.L2143:
 29862              	.LBB3793:
6061:src/xeq.c     **** 			return;
 29863              		.loc 1 6061 5 view .LVU7935
 29864              	.LBB3783:
 29865              	.LBI3783:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29866              		.loc 1 546 5 view .LVU7936
 29867              	.LBB3784:
 547:src/xeq.c     **** 		Error = e;
 29868              		.loc 1 547 2 view .LVU7937
 547:src/xeq.c     **** 		Error = e;
 29869              		.loc 1 547 12 is_stmt 0 view .LVU7938
 29870 01a4 084B     		ldr	r3, .L2163+20
 547:src/xeq.c     **** 		Error = e;
 29871              		.loc 1 547 5 view .LVU7939
 29872 01a6 1A68     		ldr	r2, [r3]
 29873 01a8 002A     		cmp	r2, #0
 29874 01aa E6D1     		bne	.L2134
 29875              	.LVL2322:
 29876              	.LBB3785:
 29877              	.LBI3785:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 29878              		.loc 1 546 5 is_stmt 1 view .LVU7940
 29879              	.LBB3786:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29880              		.loc 1 548 3 view .LVU7941
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 29881              		.loc 1 548 9 is_stmt 0 view .LVU7942
 29882 01ac 0122     		movs	r2, #1
 29883 01ae 1A60     		str	r2, [r3]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29884              		.loc 1 549 3 is_stmt 1 view .LVU7943
 29885              	.LVL2323:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 29886              		.loc 1 549 3 is_stmt 0 view .LVU7944
 29887              	.LBE3786:
 29888              	.LBE3785:
 29889              	.LBE3784:
 29890              	.LBE3783:
6062:src/xeq.c     **** 		}
 29891              		.loc 1 6062 4 is_stmt 1 view .LVU7945
 29892 01b0 E3E7     		b	.L2134
 29893              	.L2164:
 29894 01b2 00BF     		.align	2
 29895              	.L2163:
ARM GAS  /tmp/cc7LeJ71.s 			page 763


 29896 01b4 00000000 		.word	XromParams
 29897 01b8 00000000 		.word	XromLocal
 29898 01bc 00000000 		.word	main_ram
 29899 01c0 00000000 		.word	RetStk
 29900 01c4 00000000 		.word	const_NaN
 29901 01c8 00000000 		.word	Error
 29902 01cc 00000000 		.word	StackBase
 29903 01d0 00000000 		.word	StateWhileOn
 29904              	.LBE3793:
 29905              		.cfi_endproc
 29906              	.LFE266:
 29908              		.section	.rodata.xeq.str1.4,"aMS",%progbits,1
 29909              		.align	2
 29910              	.LC8:
 29911 0000 25303458 		.ascii	"%04X:%s\000"
 29911      3A257300 
 29912              		.section	.text.xeq,"ax",%progbits
 29913              		.align	1
 29914              		.p2align 2,,3
 29915              		.global	xeq
 29916              		.syntax unified
 29917              		.thumb
 29918              		.thumb_func
 29919              		.fpu fpv4-sp-d16
 29921              	xeq:
 29922              	.LVL2324:
 29923              	.LFB251:
5323:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29924              		.loc 1 5323 1 view -0
 29925              		.cfi_startproc
 29926              		@ args = 0, pretend = 0, frame = 424
 29927              		@ frame_needed = 0, uses_anonymous_args = 0
5324:src/xeq.c     **** 	const unsigned short flags = UserFlags[regA_idx >> 4];
 29928              		.loc 1 5324 2 view .LVU7947
5325:src/xeq.c     **** 	const struct _ustate old = UState;
 29929              		.loc 1 5325 2 view .LVU7948
5323:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29930              		.loc 1 5323 1 is_stmt 0 view .LVU7949
 29931 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 29932              		.cfi_def_cfa_offset 36
 29933              		.cfi_offset 4, -36
 29934              		.cfi_offset 5, -32
 29935              		.cfi_offset 6, -28
 29936              		.cfi_offset 7, -24
 29937              		.cfi_offset 8, -20
 29938              		.cfi_offset 9, -16
 29939              		.cfi_offset 10, -12
 29940              		.cfi_offset 11, -8
 29941              		.cfi_offset 14, -4
5325:src/xeq.c     **** 	const struct _ustate old = UState;
 29942              		.loc 1 5325 31 view .LVU7950
 29943 0004 834F     		ldr	r7, .L2523
 29944              	.LBB4099:
 29945              	.LBB4100:
 744:src/xeq.c     **** }
 29946              		.loc 1 744 15 view .LVU7951
 29947 0006 844C     		ldr	r4, .L2523+4
ARM GAS  /tmp/cc7LeJ71.s 			page 764


 29948              	.LBE4100:
 29949              	.LBE4099:
5325:src/xeq.c     **** 	const struct _ustate old = UState;
 29950              		.loc 1 5325 31 view .LVU7952
 29951 0008 3B68     		ldr	r3, [r7]
 29952              	.LBB4105:
 29953              	.LBB4101:
 744:src/xeq.c     **** }
 29954              		.loc 1 744 15 view .LVU7953
 29955 000a E67D     		ldrb	r6, [r4, #23]	@ zero_extendqisi2
 29956              	.LBE4101:
 29957              	.LBE4105:
5326:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29958              		.loc 1 5326 23 view .LVU7954
 29959 000c D3F8E817 		ldr	r1, [r3, #2024]
5325:src/xeq.c     **** 	const struct _ustate old = UState;
 29960              		.loc 1 5325 23 view .LVU7955
 29961 0010 B3F8FC27 		ldrh	r2, [r3, #2044]
5323:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29962              		.loc 1 5323 1 view .LVU7956
 29963 0014 EDB0     		sub	sp, sp, #436
 29964              		.cfi_def_cfa_offset 472
5323:src/xeq.c     **** 	REGISTER save[STACK_SIZE+2];
 29965              		.loc 1 5323 1 view .LVU7957
 29966 0016 0546     		mov	r5, r0
5326:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29967              		.loc 1 5326 23 view .LVU7958
 29968 0018 D3F8E407 		ldr	r0, [r3, #2020]
 29969              	.LVL2325:
5325:src/xeq.c     **** 	const struct _ustate old = UState;
 29970              		.loc 1 5325 23 view .LVU7959
 29971 001c 0292     		str	r2, [sp, #8]
 29972              	.LVL2326:
5326:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29973              		.loc 1 5326 2 is_stmt 1 view .LVU7960
5328:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 29974              		.loc 1 5328 23 is_stmt 0 view .LVU7961
 29975 001e B3F8E027 		ldrh	r2, [r3, #2016]
 29976 0022 0392     		str	r2, [sp, #12]
5326:src/xeq.c     **** 	const unsigned char lift = get_lift();
 29977              		.loc 1 5326 23 view .LVU7962
 29978 0024 0CAB     		add	r3, sp, #48
 29979 0026 83E80300 		stm	r3, {r0, r1}
5327:src/xeq.c     **** 	const unsigned short old_pc = state_pc();
 29980              		.loc 1 5327 2 is_stmt 1 view .LVU7963
 29981              	.LBB4106:
 29982              	.LBI4099:
 743:src/xeq.c     **** 	return State2.state_lift;
 29983              		.loc 1 743 12 view .LVU7964
 29984              	.LBB4102:
 744:src/xeq.c     **** }
 29985              		.loc 1 744 2 view .LVU7965
 29986              	.LBE4102:
 29987              	.LBE4106:
5344:src/xeq.c     **** #if defined(CONSOLE)
 29988              		.loc 1 5344 2 is_stmt 0 view .LVU7966
 29989 002a 7C4B     		ldr	r3, .L2523+8
ARM GAS  /tmp/cc7LeJ71.s 			page 765


5329:src/xeq.c     **** #ifdef INFRARED
 29990              		.loc 1 5329 12 view .LVU7967
 29991 002c E269     		ldr	r2, [r4, #28]
5344:src/xeq.c     **** #if defined(CONSOLE)
 29992              		.loc 1 5344 2 view .LVU7968
 29993 002e 1968     		ldr	r1, [r3]
5329:src/xeq.c     **** #ifdef INFRARED
 29994              		.loc 1 5329 12 view .LVU7969
 29995 0030 0492     		str	r2, [sp, #16]
 29996              	.LBB4107:
 29997              	.LBB4103:
 744:src/xeq.c     **** }
 29998              		.loc 1 744 15 view .LVU7970
 29999 0032 C6F38013 		ubfx	r3, r6, #6, #1
 30000              	.LBE4103:
 30001              	.LBE4107:
5344:src/xeq.c     **** #if defined(CONSOLE)
 30002              		.loc 1 5344 2 view .LVU7971
 30003 0036 A022     		movs	r2, #160
 30004 0038 44A8     		add	r0, sp, #272
 30005              	.LBB4108:
 30006              	.LBB4104:
 744:src/xeq.c     **** }
 30007              		.loc 1 744 15 view .LVU7972
 30008 003a 0593     		str	r3, [sp, #20]
 30009              	.LVL2327:
 744:src/xeq.c     **** }
 30010              		.loc 1 744 15 view .LVU7973
 30011              	.LBE4104:
 30012              	.LBE4108:
5328:src/xeq.c     **** 	const int old_cl = *((int *)&CommandLine);
 30013              		.loc 1 5328 2 is_stmt 1 view .LVU7974
5329:src/xeq.c     **** #ifdef INFRARED
 30014              		.loc 1 5329 2 view .LVU7975
5331:src/xeq.c     **** #endif
 30015              		.loc 1 5331 2 view .LVU7976
5344:src/xeq.c     **** #if defined(CONSOLE)
 30016              		.loc 1 5344 2 view .LVU7977
 30017 003c FFF7FEFF 		bl	xcopy
 30018              	.LVL2328:
5349:src/xeq.c     **** 		char buf[16];
 30019              		.loc 1 5349 2 view .LVU7978
5349:src/xeq.c     **** 		char buf[16];
 30020              		.loc 1 5349 5 is_stmt 0 view .LVU7979
 30021 0040 94F91730 		ldrsb	r3, [r4, #23]
 30022 0044 002B     		cmp	r3, #0
 30023 0046 39DB     		blt	.L2450
 30024              	.L2464:
 30025 0048 0DF1EC0A 		add	r10, sp, #236
 30026              	.L2166:
5362:src/xeq.c     **** #endif
 30027              		.loc 1 5362 2 is_stmt 1 view .LVU7980
 30028              	.LVL2329:
 30029              	.LBB4109:
 30030              	.LBI4109:
3556:src/xeq.c     **** 	unsigned short mask;
 30031              		.loc 1 3556 5 view .LVU7981
ARM GAS  /tmp/cc7LeJ71.s 			page 766


 30032              	.LBB4110:
3557:src/xeq.c     **** 	const unsigned short *const f = flag_word(n, &mask);
 30033              		.loc 1 3557 2 view .LVU7982
3558:src/xeq.c     **** 
 30034              		.loc 1 3558 2 view .LVU7983
3558:src/xeq.c     **** 
 30035              		.loc 1 3558 34 is_stmt 0 view .LVU7984
 30036 004c 5146     		mov	r1, r10
 30037 004e 6720     		movs	r0, #103
 30038 0050 FFF7FEFF 		bl	flag_word
 30039              	.LVL2330:
3560:src/xeq.c     **** }
 30040              		.loc 1 3560 2 is_stmt 1 view .LVU7985
3560:src/xeq.c     **** }
 30041              		.loc 1 3560 24 is_stmt 0 view .LVU7986
 30042 0054 BDF8EC30 		ldrh	r3, [sp, #236]
 30043 0058 0688     		ldrh	r6, [r0]
 30044              	.LVL2331:
3560:src/xeq.c     **** }
 30045              		.loc 1 3560 24 view .LVU7987
 30046              	.LBE4110:
 30047              	.LBE4109:
5362:src/xeq.c     **** #endif
 30048              		.loc 1 5362 67 view .LVU7988
 30049 005a 1E40     		ands	r6, r6, r3
 30050 005c 09D0     		beq	.L2169
 30051              	.LBB4111:
 30052              	.LBI4111:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 30053              		.loc 1 185 5 is_stmt 1 view .LVU7989
 30054              	.LBB4112:
 186:src/xeq.c     **** }
 30055              		.loc 1 186 2 view .LVU7990
 186:src/xeq.c     **** }
 30056              		.loc 1 186 9 is_stmt 0 view .LVU7991
 30057 005e 3B68     		ldr	r3, [r7]
 30058 0060 B3F8E037 		ldrh	r3, [r3, #2016]
 30059              	.LBE4112:
 30060              	.LBE4111:
5362:src/xeq.c     **** #endif
 30061              		.loc 1 5362 34 view .LVU7992
 30062 0064 9B0B     		lsrs	r3, r3, #14
 30063 0066 032B     		cmp	r3, #3
 30064 0068 00F0C680 		beq	.L2490
 30065              	.L2170:
5362:src/xeq.c     **** #endif
 30066              		.loc 1 5362 67 discriminator 5 view .LVU7993
 30067 006c A67D     		ldrb	r6, [r4, #22]	@ zero_extendqisi2
 30068 006e C6F38016 		ubfx	r6, r6, #6, #1
 30069              	.L2169:
 30070              	.LVL2332:
5364:src/xeq.c     **** 	print_trace( op, 0 );
 30071              		.loc 1 5364 2 is_stmt 1 discriminator 10 view .LVU7994
5364:src/xeq.c     **** 	print_trace( op, 0 );
 30072              		.loc 1 5364 10 is_stmt 0 discriminator 10 view .LVU7995
 30073 0072 DFF8CC81 		ldr	r8, .L2523+44
5365:src/xeq.c     **** #endif
ARM GAS  /tmp/cc7LeJ71.s 			page 767


 30074              		.loc 1 5365 2 discriminator 10 view .LVU7996
 30075 0076 0021     		movs	r1, #0
 30076 0078 2846     		mov	r0, r5
5364:src/xeq.c     **** 	print_trace( op, 0 );
 30077              		.loc 1 5364 10 discriminator 10 view .LVU7997
 30078 007a C8F80060 		str	r6, [r8]
5365:src/xeq.c     **** #endif
 30079              		.loc 1 5365 2 is_stmt 1 discriminator 10 view .LVU7998
 30080 007e FFF7FEFF 		bl	print_trace
 30081              	.LVL2333:
5367:src/xeq.c     **** 	State2.wascomplex = 0;
 30082              		.loc 1 5367 2 discriminator 10 view .LVU7999
5368:src/xeq.c     **** 	if (isDBL(op))
 30083              		.loc 1 5368 20 is_stmt 0 discriminator 10 view .LVU8000
 30084 0082 227D     		ldrb	r2, [r4, #20]	@ zero_extendqisi2
5367:src/xeq.c     **** 	State2.wascomplex = 0;
 30085              		.loc 1 5367 7 discriminator 10 view .LVU8001
 30086 0084 6649     		ldr	r1, .L2523+12
 30087 0086 0023     		movs	r3, #0
5368:src/xeq.c     **** 	if (isDBL(op))
 30088              		.loc 1 5368 20 discriminator 10 view .LVU8002
 30089 0088 63F38712 		bfi	r2, r3, #6, #2
 30090 008c 2275     		strb	r2, [r4, #20]
5369:src/xeq.c     **** 		multi(op);
 30091              		.loc 1 5369 6 discriminator 10 view .LVU8003
 30092 008e 05F47042 		and	r2, r5, #61440
5369:src/xeq.c     **** 		multi(op);
 30093              		.loc 1 5369 5 discriminator 10 view .LVU8004
 30094 0092 B2F5704F 		cmp	r2, #61440
5367:src/xeq.c     **** 	State2.wascomplex = 0;
 30095              		.loc 1 5367 7 discriminator 10 view .LVU8005
 30096 0096 0B60     		str	r3, [r1]
5368:src/xeq.c     **** 	if (isDBL(op))
 30097              		.loc 1 5368 2 is_stmt 1 discriminator 10 view .LVU8006
5369:src/xeq.c     **** 		multi(op);
 30098              		.loc 1 5369 2 discriminator 10 view .LVU8007
5369:src/xeq.c     **** 		multi(op);
 30099              		.loc 1 5369 5 is_stmt 0 discriminator 10 view .LVU8008
 30100 0098 6CD0     		beq	.L2491
5371:src/xeq.c     **** 		rargs(op);
 30101              		.loc 1 5371 7 is_stmt 1 view .LVU8009
5371:src/xeq.c     **** 		rargs(op);
 30102              		.loc 1 5371 10 is_stmt 0 view .LVU8010
 30103 009a 4ABB     		cbnz	r2, .L2492
5374:src/xeq.c     **** 		switch (opKIND(op)) {
 30104              		.loc 1 5374 3 is_stmt 1 view .LVU8011
5374:src/xeq.c     **** 		switch (opKIND(op)) {
 30105              		.loc 1 5374 13 is_stmt 0 view .LVU8012
 30106 009c 614A     		ldr	r2, .L2523+16
 30107 009e C5F30723 		ubfx	r3, r5, #8, #8
5374:src/xeq.c     **** 		switch (opKIND(op)) {
 30108              		.loc 1 5374 15 view .LVU8013
 30109 00a2 1580     		strh	r5, [r2]	@ movhi
5375:src/xeq.c     **** 		case KIND_SPEC:	specials(op);	break;
 30110              		.loc 1 5375 3 is_stmt 1 view .LVU8014
 30111 00a4 062B     		cmp	r3, #6
 30112 00a6 00F2DF80 		bhi	.L2205
ARM GAS  /tmp/cc7LeJ71.s 			page 768


 30113 00aa DFE813F0 		tbh	[pc, r3, lsl #1]
 30114              	.L2207:
 30115 00ae C401     		.2byte	(.L2213-.L2207)/2
 30116 00b0 C102     		.2byte	(.L2212-.L2207)/2
 30117 00b2 8B02     		.2byte	(.L2211-.L2207)/2
 30118 00b4 D100     		.2byte	(.L2210-.L2207)/2
 30119 00b6 F701     		.2byte	(.L2209-.L2207)/2
 30120 00b8 5102     		.2byte	(.L2208-.L2207)/2
 30121 00ba 8E01     		.2byte	(.L2206-.L2207)/2
 30122              	.LVL2334:
 30123              		.p2align 1
 30124              	.L2450:
5349:src/xeq.c     **** 		char buf[16];
 30125              		.loc 1 5349 22 is_stmt 0 discriminator 1 view .LVU8015
 30126 00bc 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
5349:src/xeq.c     **** 		char buf[16];
 30127              		.loc 1 5349 19 discriminator 1 view .LVU8016
 30128 00be 9B07     		lsls	r3, r3, #30
 30129 00c0 C2D4     		bmi	.L2464
 30130              	.LBB4113:
5350:src/xeq.c     **** 		if (Running)
 30131              		.loc 1 5350 3 is_stmt 1 view .LVU8017
5351:src/xeq.c     **** 			print_step(op);
 30132              		.loc 1 5351 3 view .LVU8018
5351:src/xeq.c     **** 			print_step(op);
 30133              		.loc 1 5351 7 is_stmt 0 view .LVU8019
 30134 00c2 DFF88091 		ldr	r9, .L2523+48
5351:src/xeq.c     **** 			print_step(op);
 30135              		.loc 1 5351 6 view .LVU8020
 30136 00c6 D9F80030 		ldr	r3, [r9]
 30137 00ca 002B     		cmp	r3, #0
 30138 00cc 40F09B80 		bne	.L2493
5354:src/xeq.c     **** 		DispMsg = TraceBuffer;
 30139              		.loc 1 5354 4 is_stmt 1 view .LVU8021
 30140 00d0 0DF1EC0A 		add	r10, sp, #236
 30141 00d4 5146     		mov	r1, r10
 30142 00d6 2846     		mov	r0, r5
 30143 00d8 FFF7FEFF 		bl	prt
 30144              	.LVL2335:
 30145 00dc 5249     		ldr	r1, .L2523+20
 30146 00de 0346     		mov	r3, r0
 30147 00e0 2A46     		mov	r2, r5
 30148 00e2 5248     		ldr	r0, .L2523+24
 30149 00e4 FFF7FEFF 		bl	sprintf
 30150              	.LVL2336:
 30151              	.L2168:
5355:src/xeq.c     **** 	}
 30152              		.loc 1 5355 3 view .LVU8022
5355:src/xeq.c     **** 	}
 30153              		.loc 1 5355 11 is_stmt 0 view .LVU8023
 30154 00e8 514B     		ldr	r3, .L2523+28
 30155 00ea 504A     		ldr	r2, .L2523+24
 30156 00ec 1A60     		str	r2, [r3]
 30157 00ee ADE7     		b	.L2166
 30158              	.LVL2337:
 30159              	.L2492:
5355:src/xeq.c     **** 	}
ARM GAS  /tmp/cc7LeJ71.s 			page 769


 30160              		.loc 1 5355 11 view .LVU8024
 30161              	.LBE4113:
5372:src/xeq.c     **** 	else {
 30162              		.loc 1 5372 3 is_stmt 1 view .LVU8025
 30163              	.LBB4114:
 30164              	.LBI4114:
5191:src/xeq.c     **** 	unsigned int arg = op & RARG_MASK;
 30165              		.loc 1 5191 13 view .LVU8026
 30166              	.LBB4115:
5192:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 30167              		.loc 1 5192 2 view .LVU8027
5193:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30168              		.loc 1 5193 2 view .LVU8028
5193:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30169              		.loc 1 5193 27 is_stmt 0 view .LVU8029
 30170 00f0 4FEA1529 		lsr	r9, r5, #8
5195:src/xeq.c     **** 
 30171              		.loc 1 5195 33 view .LVU8030
 30172 00f4 DFF850B1 		ldr	fp, .L2523+52
5197:src/xeq.c     **** 
 30173              		.loc 1 5197 12 view .LVU8031
 30174 00f8 4A49     		ldr	r1, .L2523+16
 30175              	.LBB4116:
 30176              	.LBB4117:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30177              		.loc 1 1229 5 view .LVU8032
 30178 00fa 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 30179              	.LBE4117:
 30180              	.LBE4116:
5193:src/xeq.c     **** 	FLAG ind = op & RARG_IND;
 30181              		.loc 1 5193 27 view .LVU8033
 30182 00fc A9F12009 		sub	r9, r9, #32
 30183 0100 5FFA89F9 		uxtb	r9, r9
 30184              	.LVL2338:
5194:src/xeq.c     **** 	unsigned int lim = argcmds[cmd].lim;
 30185              		.loc 1 5194 2 is_stmt 1 view .LVU8034
5195:src/xeq.c     **** 
 30186              		.loc 1 5195 2 view .LVU8035
5195:src/xeq.c     **** 
 30187              		.loc 1 5195 33 is_stmt 0 view .LVU8036
 30188 0104 0BEB0913 		add	r3, fp, r9, lsl #4
5197:src/xeq.c     **** 
 30189              		.loc 1 5197 14 view .LVU8037
 30190 0108 A1F80090 		strh	r9, [r1]	@ movhi
5195:src/xeq.c     **** 
 30191              		.loc 1 5195 33 view .LVU8038
 30192 010c 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 30193 010e 0693     		str	r3, [sp, #24]
 30194              	.LVL2339:
5197:src/xeq.c     **** 
 30195              		.loc 1 5197 2 is_stmt 1 view .LVU8039
5199:src/xeq.c     **** 
 30196              		.loc 1 5199 2 view .LVU8040
 30197              	.LBB4121:
 30198              	.LBI4116:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30199              		.loc 1 1226 6 view .LVU8041
ARM GAS  /tmp/cc7LeJ71.s 			page 770


 30200              	.LBB4118:
1227:src/xeq.c     **** 
 30201              		.loc 1 1227 2 view .LVU8042
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30202              		.loc 1 1229 2 view .LVU8043
 30203              	.LBE4118:
 30204              	.LBE4121:
5195:src/xeq.c     **** 
 30205              		.loc 1 5195 33 is_stmt 0 view .LVU8044
 30206 0110 4FEA0913 		lsl	r3, r9, #4
 30207              	.LBB4122:
 30208              	.LBB4119:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30209              		.loc 1 1229 5 view .LVU8045
 30210 0114 002A     		cmp	r2, #0
 30211 0116 40F05381 		bne	.L2494
 30212              	.L2182:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30213              		.loc 1 1229 5 view .LVU8046
 30214              	.LBE4119:
 30215              	.LBE4122:
5201:src/xeq.c     **** 		illegal(op);
 30216              		.loc 1 5201 2 is_stmt 1 view .LVU8047
5201:src/xeq.c     **** 		illegal(op);
 30217              		.loc 1 5201 5 is_stmt 0 view .LVU8048
 30218 011a B9F1960F 		cmp	r9, #150
 30219 011e 00F2A380 		bhi	.L2205
5205:src/xeq.c     **** 		set_lift();
 30220              		.loc 1 5205 2 is_stmt 1 view .LVU8049
5205:src/xeq.c     **** 		set_lift();
 30221              		.loc 1 5205 6 is_stmt 0 view .LVU8050
 30222 0122 5BF80320 		ldr	r2, [fp, r3]
 30223 0126 0792     		str	r2, [sp, #28]
 30224 0128 0BEB0301 		add	r1, fp, r3
5205:src/xeq.c     **** 		set_lift();
 30225              		.loc 1 5205 5 view .LVU8051
 30226 012c 002A     		cmp	r2, #0
 30227 012e 4AD0     		beq	.L2467
5210:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30228              		.loc 1 5210 5 view .LVU8052
 30229 0130 15F0800F 		tst	r5, #128
5192:src/xeq.c     **** 	const unsigned int cmd = RARG_CMD(op);
 30230              		.loc 1 5192 15 view .LVU8053
 30231 0134 05F07F02 		and	r2, r5, #127
5210:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30232              		.loc 1 5210 2 is_stmt 1 view .LVU8054
5210:src/xeq.c     **** 		if (argcmds[cmd].indirectokay) {
 30233              		.loc 1 5210 5 is_stmt 0 view .LVU8055
 30234 0138 00F0E582 		beq	.L2186
5211:src/xeq.c     **** 			// Get the argument by reading a register
 30235              		.loc 1 5211 3 is_stmt 1 view .LVU8056
5211:src/xeq.c     **** 			// Get the argument by reading a register
 30236              		.loc 1 5211 19 is_stmt 0 view .LVU8057
 30237 013c 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
 30238 013e 0A91     		str	r1, [sp, #40]
5211:src/xeq.c     **** 			// Get the argument by reading a register
 30239              		.loc 1 5211 6 view .LVU8058
ARM GAS  /tmp/cc7LeJ71.s 			page 771


 30240 0140 C907     		lsls	r1, r1, #31
 30241 0142 40F19383 		bpl	.L2187
 30242              	.LBB4123:
5213:src/xeq.c     **** 			unsigned long long int regval;
 30243              		.loc 1 5213 4 is_stmt 1 view .LVU8059
5214:src/xeq.c     **** 
 30244              		.loc 1 5214 4 view .LVU8060
5216:src/xeq.c     **** 				// Invalid register specified for indirect access
 30245              		.loc 1 5216 4 view .LVU8061
5216:src/xeq.c     **** 				// Invalid register specified for indirect access
 30246              		.loc 1 5216 14 is_stmt 0 view .LVU8062
 30247 0146 1146     		mov	r1, r2
 30248 0148 0A20     		movs	r0, #10
 30249 014a 0B93     		str	r3, [sp, #44]
 30250 014c 0892     		str	r2, [sp, #32]
 30251 014e FFF7FEFF 		bl	get_reg_limit
 30252              	.LVL2340:
5216:src/xeq.c     **** 				// Invalid register specified for indirect access
 30253              		.loc 1 5216 7 view .LVU8063
 30254 0152 089A     		ldr	r2, [sp, #32]
 30255 0154 0B9B     		ldr	r3, [sp, #44]
 30256 0156 8242     		cmp	r2, r0
 30257 0158 40F2C082 		bls	.L2188
5218:src/xeq.c     **** 				return;
 30258              		.loc 1 5218 5 is_stmt 1 view .LVU8064
 30259              	.LVL2341:
 30260              	.LBB4124:
 30261              	.LBI4124:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30262              		.loc 1 546 5 view .LVU8065
 30263              	.LBB4125:
 547:src/xeq.c     **** 		Error = e;
 30264              		.loc 1 547 2 view .LVU8066
 547:src/xeq.c     **** 		Error = e;
 30265              		.loc 1 547 12 is_stmt 0 view .LVU8067
 30266 015c DFF8ECB0 		ldr	fp, .L2523+56
 30267 0160 DBF80030 		ldr	r3, [fp]
 547:src/xeq.c     **** 		Error = e;
 30268              		.loc 1 547 5 view .LVU8068
 30269 0164 13B9     		cbnz	r3, .L2190
 30270              	.LVL2342:
 30271              	.LBB4126:
 30272              	.LBI4126:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30273              		.loc 1 546 5 is_stmt 1 view .LVU8069
 30274              	.LBB4127:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30275              		.loc 1 548 3 view .LVU8070
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30276              		.loc 1 548 9 is_stmt 0 view .LVU8071
 30277 0166 0823     		movs	r3, #8
 30278 0168 CBF80030 		str	r3, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30279              		.loc 1 549 3 is_stmt 1 view .LVU8072
 30280              	.LVL2343:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30281              		.loc 1 549 3 is_stmt 0 view .LVU8073
ARM GAS  /tmp/cc7LeJ71.s 			page 772


 30282              	.LBE4127:
 30283              	.LBE4126:
 30284              	.LBE4125:
 30285              	.LBE4124:
5219:src/xeq.c     **** 			}
 30286              		.loc 1 5219 5 is_stmt 1 view .LVU8074
5219:src/xeq.c     **** 			}
 30287              		.loc 1 5219 5 is_stmt 0 view .LVU8075
 30288              	.LBE4123:
 30289              	.LBE4115:
 30290              	.LBE4114:
5383:src/xeq.c     **** 		}
 30291              		.loc 1 5383 12 is_stmt 1 view .LVU8076
5393:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30292              		.loc 1 5393 2 view .LVU8077
 30293              	.L2190:
5393:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30294              		.loc 1 5393 2 is_stmt 0 view .LVU8078
 30295 016c DFF8D490 		ldr	r9, .L2523+48
 30296 0170 1846     		mov	r0, r3
 30297 0172 85E0     		b	.L2315
 30298              	.LVL2344:
 30299              	.L2491:
5370:src/xeq.c     **** 	else if (isRARG(op))
 30300              		.loc 1 5370 3 is_stmt 1 view .LVU8079
 30301              	.LBB4155:
 30302              	.LBI4155:
5287:src/xeq.c     **** 	const int cmd = opDBL(op);
 30303              		.loc 1 5287 13 view .LVU8080
 30304              	.LBB4156:
5288:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 30305              		.loc 1 5288 2 view .LVU8081
5289:src/xeq.c     **** 
 30306              		.loc 1 5289 12 is_stmt 0 view .LVU8082
 30307 0174 2B4A     		ldr	r2, .L2523+16
 30308              	.LBB4157:
 30309              	.LBB4158:
 30310              	.LBB4159:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30311              		.loc 1 1229 5 view .LVU8083
 30312 0176 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30313              	.LBE4159:
 30314              	.LBE4158:
 30315              	.LBE4157:
5288:src/xeq.c     **** 	XeqOpCode = (s_opcode) cmd;
 30316              		.loc 1 5288 12 view .LVU8084
 30317 0178 C5F30329 		ubfx	r9, r5, #8, #4
 30318              	.LVL2345:
5289:src/xeq.c     **** 
 30319              		.loc 1 5289 2 is_stmt 1 view .LVU8085
5289:src/xeq.c     **** 
 30320              		.loc 1 5289 14 is_stmt 0 view .LVU8086
 30321 017c A2F80090 		strh	r9, [r2]	@ movhi
5291:src/xeq.c     **** 
 30322              		.loc 1 5291 2 is_stmt 1 view .LVU8087
 30323              	.LBB4168:
 30324              	.LBI4157:
ARM GAS  /tmp/cc7LeJ71.s 			page 773


1332:src/xeq.c     **** 	process_cmdline();
 30325              		.loc 1 1332 6 view .LVU8088
 30326              	.LBE4168:
 30327              	.LBE4156:
 30328              	.LBE4155:
1333:src/xeq.c     **** 	set_lift();
 30329              		.loc 1 1333 2 view .LVU8089
 30330              	.LBB4192:
 30331              	.LBB4187:
 30332              	.LBB4169:
 30333              	.LBB4162:
 30334              	.LBI4158:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30335              		.loc 1 1226 6 view .LVU8090
 30336              	.LBB4160:
1227:src/xeq.c     **** 
 30337              		.loc 1 1227 2 view .LVU8091
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30338              		.loc 1 1229 2 view .LVU8092
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30339              		.loc 1 1229 5 is_stmt 0 view .LVU8093
 30340 0180 002B     		cmp	r3, #0
 30341 0182 40F09D82 		bne	.L2495
 30342              	.L2172:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30343              		.loc 1 1229 5 view .LVU8094
 30344              	.LBE4160:
 30345              	.LBE4162:
 30346              	.LBE4169:
 30347              	.LBE4187:
 30348              	.LBE4192:
1334:src/xeq.c     **** }
 30349              		.loc 1 1334 2 is_stmt 1 view .LVU8095
 30350              	.LBB4193:
 30351              	.LBB4188:
 30352              	.LBB4170:
 30353              	.LBB4163:
 30354              	.LBI4163:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30355              		.loc 1 767 6 view .LVU8096
 30356              	.LBB4164:
 768:src/xeq.c     **** }
 30357              		.loc 1 768 5 view .LVU8097
 768:src/xeq.c     **** }
 30358              		.loc 1 768 23 is_stmt 0 view .LVU8098
 30359 0186 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30360              	.LBE4164:
 30361              	.LBE4163:
 30362              	.LBE4170:
5293:src/xeq.c     **** 		illegal(op);
 30363              		.loc 1 5293 5 view .LVU8099
 30364 0188 B9F10B0F 		cmp	r9, #11
 30365              	.LBB4171:
 30366              	.LBB4166:
 30367              	.LBB4165:
 768:src/xeq.c     **** }
 30368              		.loc 1 768 23 view .LVU8100
ARM GAS  /tmp/cc7LeJ71.s 			page 774


 30369 018c 43F04003 		orr	r3, r3, #64
 30370 0190 E375     		strb	r3, [r4, #23]
 30371              	.LBE4165:
 30372              	.LBE4166:
 30373              	.LBE4171:
5293:src/xeq.c     **** 		illegal(op);
 30374              		.loc 1 5293 2 is_stmt 1 view .LVU8101
5293:src/xeq.c     **** 		illegal(op);
 30375              		.loc 1 5293 5 is_stmt 0 view .LVU8102
 30376 0192 00F38B82 		bgt	.L2496
5297:src/xeq.c     **** 		return;
 30377              		.loc 1 5297 2 is_stmt 1 view .LVU8103
5297:src/xeq.c     **** 		return;
 30378              		.loc 1 5297 6 is_stmt 0 view .LVU8104
 30379 0196 274A     		ldr	r2, .L2523+32
 30380 0198 4FEA0913 		lsl	r3, r9, #4
 30381 019c D358     		ldr	r3, [r2, r3]
5297:src/xeq.c     **** 		return;
 30382              		.loc 1 5297 5 view .LVU8105
 30383 019e 002B     		cmp	r3, #0
 30384 01a0 00F0DC82 		beq	.L2176
 30385              	.LBB4172:
5300:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 30386              		.loc 1 5300 3 is_stmt 1 view .LVU8106
 30387              	.LVL2346:
5301:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 30388              		.loc 1 5301 3 view .LVU8107
 30389              	.LBB4173:
 30390              	.LBI4173:
4504:src/xeq.c     **** {
 30391              		.loc 1 4504 24 view .LVU8108
 30392              	.LBB4174:
4506:src/xeq.c     **** 	if (xp < xrom)
 30393              		.loc 1 4506 2 view .LVU8109
4507:src/xeq.c     **** 		return NULL;
 30394              		.loc 1 4507 5 is_stmt 0 view .LVU8110
 30395 01a4 244A     		ldr	r2, .L2523+36
4506:src/xeq.c     **** 	if (xp < xrom)
 30396              		.loc 1 4506 59 view .LVU8111
 30397 01a6 23F00101 		bic	r1, r3, #1
 30398              	.LVL2347:
4507:src/xeq.c     **** 		return NULL;
 30399              		.loc 1 4507 2 is_stmt 1 view .LVU8112
4507:src/xeq.c     **** 		return NULL;
 30400              		.loc 1 4507 5 is_stmt 0 view .LVU8113
 30401 01aa 9142     		cmp	r1, r2
 30402 01ac 08D3     		bcc	.L2177
4511:src/xeq.c     **** 		return NULL;
 30403              		.loc 1 4511 2 is_stmt 1 view .LVU8114
4511:src/xeq.c     **** 		return NULL;
 30404              		.loc 1 4511 17 is_stmt 0 view .LVU8115
 30405 01ae 2348     		ldr	r0, .L2523+40
 30406 01b0 0088     		ldrh	r0, [r0]
 30407 01b2 02EB4002 		add	r2, r2, r0, lsl #1
4511:src/xeq.c     **** 		return NULL;
 30408              		.loc 1 4511 5 view .LVU8116
 30409 01b6 9142     		cmp	r1, r2
ARM GAS  /tmp/cc7LeJ71.s 			page 775


 30410 01b8 02D2     		bcs	.L2177
 30411              	.LVL2348:
4511:src/xeq.c     **** 		return NULL;
 30412              		.loc 1 4511 5 view .LVU8117
 30413              	.LBE4174:
 30414              	.LBE4173:
5301:src/xeq.c     **** 			XromUserPc = findmultilbl(op, FIND_OP_ERROR);
 30415              		.loc 1 5301 6 view .LVU8118
 30416 01ba 0029     		cmp	r1, #0
 30417 01bc 40F0C183 		bne	.L2497
 30418              	.L2177:
5311:src/xeq.c     **** 			set_lift();
 30419              		.loc 1 5311 4 is_stmt 1 view .LVU8119
 30420 01c0 4946     		mov	r1, r9
 30421 01c2 2846     		mov	r0, r5
 30422 01c4 9847     		blx	r3
 30423              	.LVL2349:
5312:src/xeq.c     **** 		}
 30424              		.loc 1 5312 4 view .LVU8120
 30425              	.LBB4175:
 30426              	.LBI4175:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30427              		.loc 1 767 6 view .LVU8121
 30428              	.LBB4176:
 768:src/xeq.c     **** }
 30429              		.loc 1 768 5 view .LVU8122
 30430              	.L2467:
 768:src/xeq.c     **** }
 30431              		.loc 1 768 5 is_stmt 0 view .LVU8123
 30432              	.LBE4176:
 30433              	.LBE4175:
 30434              	.LBE4172:
 30435              	.LBE4188:
 30436              	.LBE4193:
 30437              	.LBB4194:
 30438              	.LBB4195:
4006:src/xeq.c     **** 		} else {
 30439              		.loc 1 4006 4 is_stmt 1 view .LVU8124
 30440              	.LBB4196:
 30441              	.LBI4196:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30442              		.loc 1 767 6 view .LVU8125
 30443              	.LBB4197:
 768:src/xeq.c     **** }
 30444              		.loc 1 768 5 view .LVU8126
 768:src/xeq.c     **** }
 30445              		.loc 1 768 23 is_stmt 0 view .LVU8127
 30446 01c6 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30447 01c8 DFF880B0 		ldr	fp, .L2523+56
 30448 01cc 43F04003 		orr	r3, r3, #64
 30449 01d0 E375     		strb	r3, [r4, #23]
 30450 01d2 DBF80030 		ldr	r3, [fp]
 30451              	.LVL2350:
 30452              	.L2179:
 768:src/xeq.c     **** }
 30453              		.loc 1 768 23 view .LVU8128
 30454              	.LBE4197:
ARM GAS  /tmp/cc7LeJ71.s 			page 776


 30455              	.LBE4196:
 30456              	.LBE4195:
 30457              	.LBE4194:
5383:src/xeq.c     **** 		}
 30458              		.loc 1 5383 12 is_stmt 1 discriminator 1 view .LVU8129
5393:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30459              		.loc 1 5393 2 discriminator 1 view .LVU8130
5393:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 30460              		.loc 1 5393 5 is_stmt 0 discriminator 1 view .LVU8131
 30461 01d6 002B     		cmp	r3, #0
 30462 01d8 C8D1     		bne	.L2190
 30463              	.L2301:
5462:src/xeq.c     **** #ifdef INFRARED
 30464              		.loc 1 5462 2 is_stmt 1 view .LVU8132
 30465              	.LBB4269:
 30466              	.LBI4269:
4458:src/xeq.c     **** 	// extern int IntMaxWindow;
 30467              		.loc 1 4458 6 view .LVU8133
 30468              	.LBB4270:
4461:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30469              		.loc 1 4461 2 view .LVU8134
4461:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30470              		.loc 1 4461 16 is_stmt 0 view .LVU8135
 30471 01da 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 30472              	.LBE4270:
 30473              	.LBE4269:
5464:src/xeq.c     **** 	print_trace( op, 1 );
 30474              		.loc 1 5464 10 view .LVU8136
 30475 01dc C8F80060 		str	r6, [r8]
 30476              	.LBB4273:
 30477              	.LBB4271:
4461:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30478              		.loc 1 4461 16 view .LVU8137
 30479 01e0 6FF3C503 		bfc	r3, #3, #3
4462:src/xeq.c     **** }
 30480              		.loc 1 4462 15 view .LVU8138
 30481 01e4 0022     		movs	r2, #0
 30482              	.LBE4271:
 30483              	.LBE4273:
5465:src/xeq.c     **** #endif
 30484              		.loc 1 5465 2 view .LVU8139
 30485 01e6 2846     		mov	r0, r5
 30486 01e8 0121     		movs	r1, #1
 30487              	.LBB4274:
 30488              	.LBB4272:
4461:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 30489              		.loc 1 4461 16 view .LVU8140
 30490 01ea 2375     		strb	r3, [r4, #20]
4462:src/xeq.c     **** }
 30491              		.loc 1 4462 2 is_stmt 1 view .LVU8141
4462:src/xeq.c     **** }
 30492              		.loc 1 4462 15 is_stmt 0 view .LVU8142
 30493 01ec 6274     		strb	r2, [r4, #17]
 30494              	.LBE4272:
 30495              	.LBE4274:
5464:src/xeq.c     **** 	print_trace( op, 1 );
 30496              		.loc 1 5464 2 is_stmt 1 view .LVU8143
ARM GAS  /tmp/cc7LeJ71.s 			page 777


5465:src/xeq.c     **** #endif
 30497              		.loc 1 5465 2 view .LVU8144
 30498 01ee FFF7FEFF 		bl	print_trace
 30499              	.LVL2351:
5467:src/xeq.c     **** 
 30500              		.loc 1 5467 1 is_stmt 0 view .LVU8145
 30501 01f2 6DB0     		add	sp, sp, #436
 30502              		.cfi_remember_state
 30503              		.cfi_def_cfa_offset 36
 30504              		@ sp needed
 30505 01f4 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 30506              	.LVL2352:
 30507              	.L2490:
 30508              		.cfi_restore_state
5362:src/xeq.c     **** #endif
 30509              		.loc 1 5362 50 discriminator 4 view .LVU8146
 30510 01f8 94F91730 		ldrsb	r3, [r4, #23]
 30511 01fc 002B     		cmp	r3, #0
 30512 01fe FFF635AF 		blt	.L2170
5362:src/xeq.c     **** #endif
 30513              		.loc 1 5362 67 view .LVU8147
 30514 0202 0026     		movs	r6, #0
 30515 0204 35E7     		b	.L2169
 30516              	.LVL2353:
 30517              	.L2493:
 30518              	.LBB4275:
5352:src/xeq.c     **** 		else
 30519              		.loc 1 5352 4 is_stmt 1 view .LVU8148
 30520 0206 2846     		mov	r0, r5
 30521 0208 FFF7FEFF 		bl	print_step
 30522              	.LVL2354:
 30523 020c 0DF1EC0A 		add	r10, sp, #236
 30524 0210 6AE7     		b	.L2168
 30525              	.L2524:
 30526 0212 00BF     		.align	2
 30527              	.L2523:
 30528 0214 00000000 		.word	main_ram
 30529 0218 00000000 		.word	StateWhileOn
 30530 021c 00000000 		.word	StackBase
 30531 0220 00000000 		.word	Busy
 30532 0224 00000000 		.word	XeqOpCode
 30533 0228 00000000 		.word	.LC8
 30534 022c 00000000 		.word	TraceBuffer
 30535 0230 00000000 		.word	DispMsg
 30536 0234 00000000 		.word	multicmds
 30537 0238 00000000 		.word	xrom
 30538 023c 00000000 		.word	xrom_size
 30539 0240 00000000 		.word	Tracing
 30540 0244 00000000 		.word	Running
 30541 0248 00000000 		.word	argcmds
 30542 024c 00000000 		.word	Error
 30543              	.LVL2355:
 30544              	.L2210:
5352:src/xeq.c     **** 		else
 30545              		.loc 1 5352 4 is_stmt 0 view .LVU8149
 30546              	.LBE4275:
5379:src/xeq.c     **** 		case KIND_TRI:	triadic(op);	break;
ARM GAS  /tmp/cc7LeJ71.s 			page 778


 30547              		.loc 1 5379 18 is_stmt 1 view .LVU8150
 30548              	.LBB4276:
 30549              	.LBI4276:
4746:src/xeq.c     **** 
 30550              		.loc 1 4746 13 view .LVU8151
 30551              	.LBB4277:
4748:src/xeq.c     **** 	process_cmdline_set_lift();
 30552              		.loc 1 4748 2 view .LVU8152
4749:src/xeq.c     **** 
 30553              		.loc 1 4749 2 view .LVU8153
 30554              	.LBB4278:
 30555              	.LBI4278:
1332:src/xeq.c     **** 	process_cmdline();
 30556              		.loc 1 1332 6 view .LVU8154
 30557              	.LBE4278:
 30558              	.LBE4277:
 30559              	.LBE4276:
1333:src/xeq.c     **** 	set_lift();
 30560              		.loc 1 1333 2 view .LVU8155
 30561              	.LBB4323:
 30562              	.LBB4316:
 30563              	.LBB4287:
 30564              	.LBB4279:
 30565              	.LBI4279:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30566              		.loc 1 1226 6 view .LVU8156
 30567              	.LBB4280:
1227:src/xeq.c     **** 
 30568              		.loc 1 1227 2 view .LVU8157
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30569              		.loc 1 1229 2 view .LVU8158
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30570              		.loc 1 1229 5 is_stmt 0 view .LVU8159
 30571 0250 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30572 0252 0BB1     		cbz	r3, .L2275
 30573 0254 FFF7FEFF 		bl	process_cmdline.part.0
 30574              	.LVL2356:
 30575              	.L2275:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30576              		.loc 1 1229 5 view .LVU8160
 30577              	.LBE4280:
 30578              	.LBE4279:
 30579              	.LBE4287:
 30580              	.LBE4316:
 30581              	.LBE4323:
1334:src/xeq.c     **** }
 30582              		.loc 1 1334 2 is_stmt 1 view .LVU8161
 30583              	.LBB4324:
 30584              	.LBB4317:
 30585              	.LBB4288:
 30586              	.LBB4281:
 30587              	.LBI4281:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30588              		.loc 1 767 6 view .LVU8162
 30589              	.LBB4282:
 768:src/xeq.c     **** }
 30590              		.loc 1 768 5 view .LVU8163
ARM GAS  /tmp/cc7LeJ71.s 			page 779


 768:src/xeq.c     **** }
 30591              		.loc 1 768 23 is_stmt 0 view .LVU8164
 30592 0258 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30593              	.LBE4282:
 30594              	.LBE4281:
 30595              	.LBE4288:
4751:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30596              		.loc 1 4751 4 view .LVU8165
 30597 025a EAB2     		uxtb	r2, r5
 30598              	.LBB4289:
 30599              	.LBB4285:
 30600              	.LBB4283:
 768:src/xeq.c     **** }
 30601              		.loc 1 768 23 view .LVU8166
 30602 025c 43F04003 		orr	r3, r3, #64
 30603              	.LBE4283:
 30604              	.LBE4285:
 30605              	.LBE4289:
4752:src/xeq.c     **** 		if (is_intmode()) {
 30606              		.loc 1 4752 5 view .LVU8167
 30607 0260 302A     		cmp	r2, #48
 30608              	.LBB4290:
 30609              	.LBB4286:
 30610              	.LBB4284:
 768:src/xeq.c     **** }
 30611              		.loc 1 768 23 view .LVU8168
 30612 0262 E375     		strb	r3, [r4, #23]
 30613              	.LBE4284:
 30614              	.LBE4286:
 30615              	.LBE4290:
4751:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 30616              		.loc 1 4751 2 is_stmt 1 view .LVU8169
 30617              	.LVL2357:
4752:src/xeq.c     **** 		if (is_intmode()) {
 30618              		.loc 1 4752 2 view .LVU8170
4752:src/xeq.c     **** 		if (is_intmode()) {
 30619              		.loc 1 4752 5 is_stmt 0 view .LVU8171
 30620 0264 40F23A83 		bls	.L2498
 30621              	.LVL2358:
 30622              	.L2205:
4752:src/xeq.c     **** 		if (is_intmode()) {
 30623              		.loc 1 4752 5 view .LVU8172
 30624              	.LBE4317:
 30625              	.LBE4324:
5383:src/xeq.c     **** 		}
 30626              		.loc 1 5383 12 is_stmt 1 view .LVU8173
5383:src/xeq.c     **** 		}
 30627              		.loc 1 5383 12 view .LVU8174
 30628              	.LBB4325:
 30629              	.LBI4325:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30630              		.loc 1 546 5 view .LVU8175
 30631              	.LBB4326:
 547:src/xeq.c     **** 		Error = e;
 30632              		.loc 1 547 2 view .LVU8176
 547:src/xeq.c     **** 		Error = e;
 30633              		.loc 1 547 12 is_stmt 0 view .LVU8177
ARM GAS  /tmp/cc7LeJ71.s 			page 780


 30634 0268 DFF8D0B2 		ldr	fp, .L2525+16
 30635 026c DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 30636              		.loc 1 547 5 view .LVU8178
 30637 0270 0028     		cmp	r0, #0
 30638 0272 40F06082 		bne	.L2461
 30639 0276 DFF8C892 		ldr	r9, .L2525+20
 30640              	.LVL2359:
 30641              	.L2184:
 547:src/xeq.c     **** 		Error = e;
 30642              		.loc 1 547 5 view .LVU8179
 30643              	.LBE4326:
 30644              	.LBE4325:
 30645              	.LBB4327:
 30646              	.LBB4189:
 30647              	.LBB4179:
 30648              	.LBB4180:
 30649              	.LBB4181:
 30650              	.LBI4181:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 30651              		.loc 1 546 5 is_stmt 1 view .LVU8180
 30652              	.LBB4182:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30653              		.loc 1 548 3 view .LVU8181
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 30654              		.loc 1 548 9 is_stmt 0 view .LVU8182
 30655 027a 0320     		movs	r0, #3
 30656 027c CBF80000 		str	r0, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30657              		.loc 1 549 3 is_stmt 1 view .LVU8183
 30658              	.LVL2360:
 30659              	.L2315:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 30660              		.loc 1 549 3 is_stmt 0 view .LVU8184
 30661              	.LBE4182:
 30662              	.LBE4181:
 30663              	.LBE4180:
 30664              	.LBE4179:
 30665              	.LBE4189:
 30666              	.LBE4327:
5395:src/xeq.c     **** 		// Repair stack and state
 30667              		.loc 1 5395 3 is_stmt 1 view .LVU8185
 30668 0280 FFF7FEFF 		bl	error_message
 30669              	.LVL2361:
5398:src/xeq.c     **** 		UserFlags[regA_idx >> 4] = flags;
 30670              		.loc 1 5398 3 view .LVU8186
 30671 0284 A94B     		ldr	r3, .L2525
 30672 0286 44A9     		add	r1, sp, #272
 30673 0288 1868     		ldr	r0, [r3]
 30674 028a A022     		movs	r2, #160
 30675 028c FFF7FEFF 		bl	xcopy
 30676              	.LVL2362:
5399:src/xeq.c     **** 		UState = old;
 30677              		.loc 1 5399 3 view .LVU8187
5400:src/xeq.c     **** 		State2.state_lift = lift;
 30678              		.loc 1 5400 10 is_stmt 0 view .LVU8188
 30679 0290 0CAA     		add	r2, sp, #48
ARM GAS  /tmp/cc7LeJ71.s 			page 781


 30680 0292 92E80300 		ldm	r2, {r0, r1}
5399:src/xeq.c     **** 		UState = old;
 30681              		.loc 1 5399 3 view .LVU8189
 30682 0296 3B68     		ldr	r3, [r7]
5399:src/xeq.c     **** 		UState = old;
 30683              		.loc 1 5399 28 view .LVU8190
 30684 0298 029A     		ldr	r2, [sp, #8]
 30685 029a A3F8FC27 		strh	r2, [r3, #2044]	@ movhi
5400:src/xeq.c     **** 		State2.state_lift = lift;
 30686              		.loc 1 5400 3 is_stmt 1 view .LVU8191
5400:src/xeq.c     **** 		State2.state_lift = lift;
 30687              		.loc 1 5400 10 is_stmt 0 view .LVU8192
 30688 029e 03F2E47C 		addw	ip, r3, #2020
 30689 02a2 8CE80300 		stm	ip, {r0, r1}
5401:src/xeq.c     **** 		raw_set_pc(old_pc);
 30690              		.loc 1 5401 3 is_stmt 1 view .LVU8193
5401:src/xeq.c     **** 		raw_set_pc(old_pc);
 30691              		.loc 1 5401 21 is_stmt 0 view .LVU8194
 30692 02a6 0599     		ldr	r1, [sp, #20]
 30693 02a8 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 30694 02aa 61F38612 		bfi	r2, r1, #6, #1
 30695 02ae E275     		strb	r2, [r4, #23]
5402:src/xeq.c     **** 		*((int *)&CommandLine) = old_cl;
 30696              		.loc 1 5402 3 is_stmt 1 view .LVU8195
 30697              	.LVL2363:
 30698              	.LBB4328:
 30699              	.LBI4328:
 282:src/xeq.c     **** 	State.pc = pc;
 30700              		.loc 1 282 13 view .LVU8196
 30701              	.LBB4329:
 283:src/xeq.c     **** 	update_program_bounds(0);
 30702              		.loc 1 283 2 view .LVU8197
 283:src/xeq.c     **** 	update_program_bounds(0);
 30703              		.loc 1 283 11 is_stmt 0 view .LVU8198
 30704 02b0 039A     		ldr	r2, [sp, #12]
 30705 02b2 A3F8E027 		strh	r2, [r3, #2016]	@ movhi
 284:src/xeq.c     **** }
 30706              		.loc 1 284 2 is_stmt 1 view .LVU8199
 30707 02b6 0020     		movs	r0, #0
 30708 02b8 FFF7FEFF 		bl	update_program_bounds
 30709              	.LVL2364:
 284:src/xeq.c     **** }
 30710              		.loc 1 284 2 is_stmt 0 view .LVU8200
 30711              	.LBE4329:
 30712              	.LBE4328:
5403:src/xeq.c     **** 		process_cmdline_set_lift();
 30713              		.loc 1 5403 3 is_stmt 1 view .LVU8201
5403:src/xeq.c     **** 		process_cmdline_set_lift();
 30714              		.loc 1 5403 26 is_stmt 0 view .LVU8202
 30715 02bc 049B     		ldr	r3, [sp, #16]
 30716 02be E361     		str	r3, [r4, #28]
5404:src/xeq.c     **** 		// process_cmdline_set_lift() may set an error code if there was something
 30717              		.loc 1 5404 3 is_stmt 1 view .LVU8203
 30718              	.LBB4330:
 30719              	.LBI4330:
1332:src/xeq.c     **** 	process_cmdline();
 30720              		.loc 1 1332 6 view .LVU8204
ARM GAS  /tmp/cc7LeJ71.s 			page 782


 30721              	.LBE4330:
1333:src/xeq.c     **** 	set_lift();
 30722              		.loc 1 1333 2 view .LVU8205
 30723              	.LBB4341:
 30724              	.LBB4331:
 30725              	.LBI4331:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30726              		.loc 1 1226 6 view .LVU8206
 30727              	.LBB4332:
1227:src/xeq.c     **** 
 30728              		.loc 1 1227 2 view .LVU8207
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30729              		.loc 1 1229 2 view .LVU8208
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30730              		.loc 1 1229 5 is_stmt 0 view .LVU8209
 30731 02c0 13F0FF0F 		tst	r3, #255
 30732 02c4 40F04F82 		bne	.L2499
 30733              	.L2302:
 30734              	.LBE4332:
 30735              	.LBE4331:
 30736              	.LBE4341:
1334:src/xeq.c     **** }
 30737              		.loc 1 1334 2 is_stmt 1 view .LVU8210
 30738              	.LBB4342:
 30739              	.LBB4334:
 30740              	.LBI4334:
 767:src/xeq.c     ****     State2.state_lift = 1;
 30741              		.loc 1 767 6 view .LVU8211
 30742              	.LBB4335:
 768:src/xeq.c     **** }
 30743              		.loc 1 768 5 view .LVU8212
 30744              	.LBE4335:
 30745              	.LBE4334:
 30746              	.LBE4342:
5408:src/xeq.c     **** #ifndef REALBUILD
 30747              		.loc 1 5408 15 is_stmt 0 view .LVU8213
 30748 02c8 994A     		ldr	r2, .L2525+4
 30749              	.LBB4343:
 30750              	.LBB4338:
 30751              	.LBB4336:
 768:src/xeq.c     **** }
 30752              		.loc 1 768 23 view .LVU8214
 30753 02ca E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 30754              	.LBE4336:
 30755              	.LBE4338:
 30756              	.LBE4343:
5408:src/xeq.c     **** #ifndef REALBUILD
 30757              		.loc 1 5408 15 view .LVU8215
 30758 02cc 1168     		ldr	r1, [r2]
 30759 02ce D9F80020 		ldr	r2, [r9]
 30760              	.LBB4344:
 30761              	.LBB4339:
 30762              	.LBB4337:
 768:src/xeq.c     **** }
 30763              		.loc 1 768 23 view .LVU8216
 30764 02d2 43F04003 		orr	r3, r3, #64
 30765 02d6 E375     		strb	r3, [r4, #23]
ARM GAS  /tmp/cc7LeJ71.s 			page 783


 30766              	.LBE4337:
 30767              	.LBE4339:
 30768              	.LBE4344:
5407:src/xeq.c     **** 		if (Running || XromRunning) {
 30769              		.loc 1 5407 3 is_stmt 1 view .LVU8217
5407:src/xeq.c     **** 		if (Running || XromRunning) {
 30770              		.loc 1 5407 9 is_stmt 0 view .LVU8218
 30771 02d8 0020     		movs	r0, #0
5408:src/xeq.c     **** #ifndef REALBUILD
 30772              		.loc 1 5408 15 view .LVU8219
 30773 02da 52EA0103 		orrs	r3, r2, r1
5407:src/xeq.c     **** 		if (Running || XromRunning) {
 30774              		.loc 1 5407 9 view .LVU8220
 30775 02de CBF80000 		str	r0, [fp]
5408:src/xeq.c     **** #ifndef REALBUILD
 30776              		.loc 1 5408 3 is_stmt 1 view .LVU8221
5408:src/xeq.c     **** #ifndef REALBUILD
 30777              		.loc 1 5408 15 is_stmt 0 view .LVU8222
 30778 02e2 3FF47AAF 		beq	.L2301
5410:src/xeq.c     **** 				// Special handling for debug environment
 30779              		.loc 1 5410 4 is_stmt 1 view .LVU8223
5410:src/xeq.c     **** 				// Special handling for debug environment
 30780              		.loc 1 5410 7 is_stmt 0 view .LVU8224
 30781 02e6 94F91730 		ldrsb	r3, [r4, #23]
 30782 02ea 8342     		cmp	r3, r0
 30783 02ec C0F23E82 		blt	.L2500
 30784              	.LBB4345:
5432:src/xeq.c     **** 				if (XromFlags.xIN) {
 30785              		.loc 1 5432 5 is_stmt 1 view .LVU8225
5433:src/xeq.c     **** 					// Restore state to before xIN
 30786              		.loc 1 5433 9 is_stmt 0 view .LVU8226
 30787 02f0 DFF850C2 		ldr	ip, .L2525+24
5432:src/xeq.c     **** 				if (XromFlags.xIN) {
 30788              		.loc 1 5432 29 view .LVU8227
 30789 02f4 3968     		ldr	r1, [r7]
5433:src/xeq.c     **** 					// Restore state to before xIN
 30790              		.loc 1 5433 8 view .LVU8228
 30791 02f6 9CF90120 		ldrsb	r2, [ip, #1]
5432:src/xeq.c     **** 				if (XromFlags.xIN) {
 30792              		.loc 1 5432 24 view .LVU8229
 30793 02fa B1F8E037 		ldrh	r3, [r1, #2016]
 30794              	.LVL2365:
5433:src/xeq.c     **** 					// Restore state to before xIN
 30795              		.loc 1 5433 5 is_stmt 1 view .LVU8230
5433:src/xeq.c     **** 					// Restore state to before xIN
 30796              		.loc 1 5433 8 is_stmt 0 view .LVU8231
 30797 02fe 002A     		cmp	r2, #0
 30798 0300 26DA     		bge	.L2310
5435:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30799              		.loc 1 5435 6 is_stmt 1 view .LVU8232
5435:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30800              		.loc 1 5435 20 is_stmt 0 view .LVU8233
 30801 0302 9CF801E0 		ldrb	lr, [ip, #1]	@ zero_extendqisi2
5437:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30802              		.loc 1 5437 18 view .LVU8234
 30803 0306 DFF840A2 		ldr	r10, .L2525+28
5435:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
ARM GAS  /tmp/cc7LeJ71.s 			page 784


 30804              		.loc 1 5435 20 view .LVU8235
 30805 030a 60F3C71E 		bfi	lr, r0, #7, #1
5437:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30806              		.loc 1 5437 18 view .LVU8236
 30807 030e CEF3C000 		ubfx	r0, lr, #3, #1
 30808 0312 0EF00102 		and	r2, lr, #1
 30809 0316 42EA8032 		orr	r2, r2, r0, lsl #14
 30810 031a CEF38000 		ubfx	r0, lr, #2, #1
 30811 031e 42EAC042 		orr	r2, r2, r0, lsl #19
 30812 0322 D1F8E807 		ldr	r0, [r1, #2024]
5435:src/xeq.c     **** 					UState.mode_double = XromFlags.mode_double;
 30813              		.loc 1 5435 20 view .LVU8237
 30814 0326 8CF801E0 		strb	lr, [ip, #1]
5436:src/xeq.c     **** 					UState.intm = XromFlags.mode_int;
 30815              		.loc 1 5436 6 is_stmt 1 view .LVU8238
5437:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30816              		.loc 1 5437 6 view .LVU8239
5438:src/xeq.c     **** 					// Restore the global return stack
 30817              		.loc 1 5438 6 view .LVU8240
5437:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30818              		.loc 1 5437 18 is_stmt 0 view .LVU8241
 30819 032a 20F40420 		bic	r0, r0, #540672
 30820 032e 02EA0A02 		and	r2, r2, r10
5440:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30821              		.loc 1 5440 13 view .LVU8242
 30822 0332 DFF818E2 		ldr	lr, .L2525+32
 30823 0336 DCF808A0 		ldr	r10, [ip, #8]
5441:src/xeq.c     **** 				}
 30824              		.loc 1 5441 16 view .LVU8243
 30825 033a BCF80CC0 		ldrh	ip, [ip, #12]
5440:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30826              		.loc 1 5440 13 view .LVU8244
 30827 033e CEF800A0 		str	r10, [lr]
5437:src/xeq.c     **** 					UState.stack_depth = XromFlags.stack_depth;
 30828              		.loc 1 5437 18 view .LVU8245
 30829 0342 20F00100 		bic	r0, r0, #1
 30830 0346 0243     		orrs	r2, r2, r0
 30831 0348 C1F8E827 		str	r2, [r1, #2024]
5440:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 30832              		.loc 1 5440 6 is_stmt 1 view .LVU8246
5441:src/xeq.c     **** 				}
 30833              		.loc 1 5441 6 view .LVU8247
5441:src/xeq.c     **** 				}
 30834              		.loc 1 5441 16 is_stmt 0 view .LVU8248
 30835 034c A1F8E2C7 		strh	ip, [r1, #2018]	@ movhi
 30836              	.L2310:
5443:src/xeq.c     **** 					// Leave XROM
 30837              		.loc 1 5443 11 is_stmt 1 view .LVU8249
 30838 0350 9A0B     		lsrs	r2, r3, #14
 30839 0352 032A     		cmp	r2, #3
 30840 0354 1DD1     		bne	.L2314
5447:src/xeq.c     **** 					}
 30841              		.loc 1 5447 10 is_stmt 0 view .LVU8250
 30842 0356 DFF8F4B1 		ldr	fp, .L2525+32
5447:src/xeq.c     **** 					}
 30843              		.loc 1 5447 18 view .LVU8251
 30844 035a 6FF0004A 		mvn	r10, #-2147483648
ARM GAS  /tmp/cc7LeJ71.s 			page 785


 30845 035e 04E0     		b	.L2313
 30846              	.L2311:
5450:src/xeq.c     **** 				}
 30847              		.loc 1 5450 7 is_stmt 1 view .LVU8252
 30848 0360 0133     		adds	r3, r3, #1
 30849              	.LVL2366:
5450:src/xeq.c     **** 				}
 30850              		.loc 1 5450 7 is_stmt 0 view .LVU8253
 30851 0362 9BB2     		uxth	r3, r3
 30852              	.LVL2367:
5443:src/xeq.c     **** 					// Leave XROM
 30853              		.loc 1 5443 11 is_stmt 1 view .LVU8254
 30854 0364 9A0B     		lsrs	r2, r3, #14
 30855 0366 032A     		cmp	r2, #3
 30856 0368 13D1     		bne	.L2314
 30857              	.L2313:
5445:src/xeq.c     **** 						retstk_up();
 30858              		.loc 1 5445 6 view .LVU8255
5445:src/xeq.c     **** 						retstk_up();
 30859              		.loc 1 5445 9 is_stmt 0 view .LVU8256
 30860 036a B1F9E227 		ldrsh	r2, [r1, #2018]
 30861 036e 002A     		cmp	r2, #0
 30862 0370 F6D0     		beq	.L2311
5446:src/xeq.c     **** 						pc = RetStk[RetStkPtr - 1];
 30863              		.loc 1 5446 7 is_stmt 1 view .LVU8257
 30864 0372 FFF7FEFF 		bl	retstk_up
 30865              	.LVL2368:
5447:src/xeq.c     **** 					}
 30866              		.loc 1 5447 7 view .LVU8258
5447:src/xeq.c     **** 					}
 30867              		.loc 1 5447 19 is_stmt 0 view .LVU8259
 30868 0376 3968     		ldr	r1, [r7]
5447:src/xeq.c     **** 					}
 30869              		.loc 1 5447 10 view .LVU8260
 30870 0378 DBF80030 		ldr	r3, [fp]
5447:src/xeq.c     **** 					}
 30871              		.loc 1 5447 19 view .LVU8261
 30872 037c B1F9E227 		ldrsh	r2, [r1, #2018]
5447:src/xeq.c     **** 					}
 30873              		.loc 1 5447 18 view .LVU8262
 30874 0380 02EB0A00 		add	r0, r2, r10
5447:src/xeq.c     **** 					}
 30875              		.loc 1 5447 10 view .LVU8263
 30876 0384 33F81030 		ldrh	r3, [r3, r0, lsl #1]
 30877              	.LVL2369:
5449:src/xeq.c     **** 						++pc; // compensate for decpc below
 30878              		.loc 1 5449 6 is_stmt 1 view .LVU8264
5449:src/xeq.c     **** 						++pc; // compensate for decpc below
 30879              		.loc 1 5449 9 is_stmt 0 view .LVU8265
 30880 0388 002A     		cmp	r2, #0
 30881 038a E9D0     		beq	.L2311
5443:src/xeq.c     **** 					// Leave XROM
 30882              		.loc 1 5443 11 is_stmt 1 view .LVU8266
 30883 038c 9A0B     		lsrs	r2, r3, #14
 30884 038e 032A     		cmp	r2, #3
 30885 0390 EBD0     		beq	.L2313
 30886              	.L2314:
ARM GAS  /tmp/cc7LeJ71.s 			page 786


5452:src/xeq.c     **** #ifndef REALBUILD
 30887              		.loc 1 5452 5 view .LVU8267
 30888              	.LVL2370:
 30889              	.LBB4346:
 30890              	.LBI4346:
 282:src/xeq.c     **** 	State.pc = pc;
 30891              		.loc 1 282 13 view .LVU8268
 30892              	.LBB4347:
 283:src/xeq.c     **** 	update_program_bounds(0);
 30893              		.loc 1 283 2 view .LVU8269
 283:src/xeq.c     **** 	update_program_bounds(0);
 30894              		.loc 1 283 11 is_stmt 0 view .LVU8270
 30895 0392 A1F8E037 		strh	r3, [r1, #2016]	@ movhi
 284:src/xeq.c     **** }
 30896              		.loc 1 284 2 is_stmt 1 view .LVU8271
 30897 0396 0020     		movs	r0, #0
 30898 0398 FFF7FEFF 		bl	update_program_bounds
 30899              	.LVL2371:
 30900              	.L2305:
 284:src/xeq.c     **** }
 30901              		.loc 1 284 2 is_stmt 0 view .LVU8272
 30902              	.LBE4347:
 30903              	.LBE4346:
 30904              	.LBE4345:
5456:src/xeq.c     **** 			xeq_init_contexts();	// Repair any pointers clobberd by xIN
 30905              		.loc 1 5456 4 is_stmt 1 view .LVU8273
 30906 039c FFF7FEFF 		bl	decpc
 30907              	.LVL2372:
5457:src/xeq.c     **** 
 30908              		.loc 1 5457 4 view .LVU8274
 30909 03a0 FFF7FEFF 		bl	xeq_init_contexts
 30910              	.LVL2373:
5459:src/xeq.c     **** 		}
 30911              		.loc 1 5459 4 view .LVU8275
 30912              	.LBB4348:
 30913              	.LBI4348:
5823:src/xeq.c     **** 	set_running_off_sst();
 30914              		.loc 1 5823 6 view .LVU8276
 30915              	.LBB4349:
5824:src/xeq.c     **** 	State.entryp = 0;
 30916              		.loc 1 5824 2 view .LVU8277
 30917              	.LBB4350:
 30918              	.LBI4350:
5815:src/xeq.c     **** 	Running = 0;
 30919              		.loc 1 5815 6 view .LVU8278
 30920              	.LBB4351:
5816:src/xeq.c     **** }
 30921              		.loc 1 5816 2 view .LVU8279
 30922              	.LBE4351:
 30923              	.LBE4350:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 30924              		.loc 1 5825 15 is_stmt 0 view .LVU8280
 30925 03a4 3B68     		ldr	r3, [r7]
 30926              	.LBB4353:
 30927              	.LBB4352:
5816:src/xeq.c     **** }
 30928              		.loc 1 5816 10 view .LVU8281
ARM GAS  /tmp/cc7LeJ71.s 			page 787


 30929 03a6 0021     		movs	r1, #0
 30930 03a8 C9F80010 		str	r1, [r9]
 30931              	.LBE4352:
 30932              	.LBE4353:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 30933              		.loc 1 5825 2 is_stmt 1 view .LVU8282
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 30934              		.loc 1 5825 15 is_stmt 0 view .LVU8283
 30935 03ac 93F8DD27 		ldrb	r2, [r3, #2013]	@ zero_extendqisi2
 30936 03b0 61F30412 		bfi	r2, r1, #4, #1
 30937 03b4 83F8DD27 		strb	r2, [r3, #2013]
5826:src/xeq.c     **** }
 30938              		.loc 1 5826 2 is_stmt 1 view .LVU8284
 30939 03b8 8A20     		movs	r0, #138
 30940 03ba FFF7FEFF 		bl	dot
 30941              	.LVL2374:
5827:src/xeq.c     **** 
 30942              		.loc 1 5827 1 is_stmt 0 view .LVU8285
 30943 03be 0CE7     		b	.L2301
 30944              	.LVL2375:
 30945              	.L2494:
5827:src/xeq.c     **** 
 30946              		.loc 1 5827 1 view .LVU8286
 30947 03c0 0793     		str	r3, [sp, #28]
 30948              	.LBE4349:
 30949              	.LBE4348:
 30950              	.LBB4354:
 30951              	.LBB4150:
 30952              	.LBB4128:
 30953              	.LBB4120:
 30954 03c2 FFF7FEFF 		bl	process_cmdline.part.0
 30955              	.LVL2376:
 30956 03c6 079B     		ldr	r3, [sp, #28]
 30957 03c8 A7E6     		b	.L2182
 30958              	.LVL2377:
 30959              	.L2206:
5827:src/xeq.c     **** 
 30960              		.loc 1 5827 1 view .LVU8287
 30961              	.LBE4120:
 30962              	.LBE4128:
 30963              	.LBE4150:
 30964              	.LBE4354:
5382:src/xeq.c     **** 		default:	illegal(op);
 30965              		.loc 1 5382 19 is_stmt 1 view .LVU8288
 30966              	.LBB4355:
 30967              	.LBI4355:
4789:src/xeq.c     **** 	decNumber x1, y1, x2, y2, xr, yr;
 30968              		.loc 1 4789 13 view .LVU8289
 30969              	.LBB4356:
4790:src/xeq.c     **** 	unsigned int f;
 30970              		.loc 1 4790 2 view .LVU8290
4791:src/xeq.c     **** 
 30971              		.loc 1 4791 2 view .LVU8291
4793:src/xeq.c     **** 
 30972              		.loc 1 4793 2 view .LVU8292
 30973              	.LBB4357:
 30974              	.LBI4357:
ARM GAS  /tmp/cc7LeJ71.s 			page 788


1332:src/xeq.c     **** 	process_cmdline();
 30975              		.loc 1 1332 6 view .LVU8293
 30976              	.LBE4357:
 30977              	.LBE4356:
 30978              	.LBE4355:
1333:src/xeq.c     **** 	set_lift();
 30979              		.loc 1 1333 2 view .LVU8294
 30980              	.LBB4398:
 30981              	.LBB4391:
 30982              	.LBB4368:
 30983              	.LBB4358:
 30984              	.LBI4358:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 30985              		.loc 1 1226 6 view .LVU8295
 30986              	.LBB4359:
1227:src/xeq.c     **** 
 30987              		.loc 1 1227 2 view .LVU8296
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30988              		.loc 1 1229 2 view .LVU8297
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30989              		.loc 1 1229 5 is_stmt 0 view .LVU8298
 30990 03ca 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 30991 03cc 002B     		cmp	r3, #0
 30992 03ce 40F0E282 		bne	.L2501
 30993              	.L2296:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 30994              		.loc 1 1229 5 view .LVU8299
 30995              	.LBE4359:
 30996              	.LBE4358:
 30997              	.LBE4368:
 30998              	.LBE4391:
 30999              	.LBE4398:
1334:src/xeq.c     **** }
 31000              		.loc 1 1334 2 is_stmt 1 view .LVU8300
 31001              	.LBB4399:
 31002              	.LBB4392:
 31003              	.LBB4369:
 31004              	.LBB4361:
 31005              	.LBI4361:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31006              		.loc 1 767 6 view .LVU8301
 31007              	.LBB4362:
 768:src/xeq.c     **** }
 31008              		.loc 1 768 5 view .LVU8302
 768:src/xeq.c     **** }
 31009              		.loc 1 768 23 is_stmt 0 view .LVU8303
 31010 03d2 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 31011              	.LBE4362:
 31012              	.LBE4361:
 31013              	.LBE4369:
4795:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31014              		.loc 1 4795 4 view .LVU8304
 31015 03d4 EBB2     		uxtb	r3, r5
 31016              	.LBB4370:
 31017              	.LBB4365:
 31018              	.LBB4363:
 768:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 789


 31019              		.loc 1 768 23 view .LVU8305
 31020 03d6 42F04002 		orr	r2, r2, #64
 31021              	.LBE4363:
 31022              	.LBE4365:
 31023              	.LBE4370:
4796:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31024              		.loc 1 4796 5 view .LVU8306
 31025 03da 302B     		cmp	r3, #48
 31026              	.LBB4371:
 31027              	.LBB4366:
 31028              	.LBB4364:
 768:src/xeq.c     **** }
 31029              		.loc 1 768 23 view .LVU8307
 31030 03dc E275     		strb	r2, [r4, #23]
 31031              	.LBE4364:
 31032              	.LBE4366:
 31033              	.LBE4371:
4795:src/xeq.c     **** 	if (f < NUM_DYADIC) {
 31034              		.loc 1 4795 2 is_stmt 1 view .LVU8308
 31035              	.LVL2378:
4796:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31036              		.loc 1 4796 2 view .LVU8309
4796:src/xeq.c     **** 		if (! isNULL(dyfuncs[f].dydcmplx)) {
 31037              		.loc 1 4796 5 is_stmt 0 view .LVU8310
 31038 03de 00F27281 		bhi	.L2297
4797:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31039              		.loc 1 4797 3 is_stmt 1 view .LVU8311
4797:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31040              		.loc 1 4797 9 is_stmt 0 view .LVU8312
 31041 03e2 544A     		ldr	r2, .L2525+8
 31042 03e4 03EB4303 		add	r3, r3, r3, lsl #1
 31043              	.LVL2379:
4797:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31044              		.loc 1 4797 9 view .LVU8313
 31045 03e8 02EBC303 		add	r3, r2, r3, lsl #3
 31046 03ec D3F80490 		ldr	r9, [r3, #4]
4797:src/xeq.c     **** 			FP_DYADIC_CMPLX fp = (FP_DYADIC_CMPLX) EXPAND_ADDRESS(dyfuncs[f].dydcmplx);
 31047              		.loc 1 4797 6 view .LVU8314
 31048 03f0 B9F1000F 		cmp	r9, #0
 31049 03f4 00F0E983 		beq	.L2298
 31050              	.LBB4372:
4798:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31051              		.loc 1 4798 4 is_stmt 1 view .LVU8315
 31052              	.LVL2380:
4799:src/xeq.c     **** 				return;
 31053              		.loc 1 4799 4 view .LVU8316
4799:src/xeq.c     **** 				return;
 31054              		.loc 1 4799 8 is_stmt 0 view .LVU8317
 31055 03f8 4846     		mov	r0, r9
 31056 03fa FFF7FEFF 		bl	dispatch_xrom
 31057              	.LVL2381:
4799:src/xeq.c     **** 				return;
 31058              		.loc 1 4799 7 view .LVU8318
 31059 03fe 0028     		cmp	r0, #0
 31060 0400 40F0AC81 		bne	.L2176
4802:src/xeq.c     **** 
 31061              		.loc 1 4802 5 is_stmt 1 view .LVU8319
ARM GAS  /tmp/cc7LeJ71.s 			page 790


 31062              	.LVL2382:
 31063              	.LBB4373:
 31064              	.LBI4373:
 879:src/xeq.c     **** 	getXYZ(x, y, z);
 31065              		.loc 1 879 6 view .LVU8320
 31066              	.LBB4374:
 880:src/xeq.c     **** 	getT(t);
 31067              		.loc 1 880 2 view .LVU8321
 31068 0404 17AB     		add	r3, sp, #92
 31069              	.LVL2383:
 880:src/xeq.c     **** 	getT(t);
 31070              		.loc 1 880 2 is_stmt 0 view .LVU8322
 31071 0406 0DF1380B 		add	fp, sp, #56
 31072              	.LVL2384:
 880:src/xeq.c     **** 	getT(t);
 31073              		.loc 1 880 2 view .LVU8323
 31074 040a 20AA     		add	r2, sp, #128
 31075              	.LVL2385:
 880:src/xeq.c     **** 	getT(t);
 31076              		.loc 1 880 2 view .LVU8324
 31077 040c 1946     		mov	r1, r3
 31078 040e 5846     		mov	r0, fp
 31079 0410 FFF7FEFF 		bl	getXYZ
 31080              	.LVL2386:
 881:src/xeq.c     **** }
 31081              		.loc 1 881 2 is_stmt 1 view .LVU8325
 31082              	.LBB4375:
 31083              	.LBI4375:
 850:src/xeq.c     **** 	getRegister(t, regT_idx);
 31084              		.loc 1 850 13 view .LVU8326
 31085              	.LBB4376:
 851:src/xeq.c     **** }
 31086              		.loc 1 851 2 view .LVU8327
 31087 0414 29A8     		add	r0, sp, #164
 31088              	.LVL2387:
 851:src/xeq.c     **** }
 31089              		.loc 1 851 2 is_stmt 0 view .LVU8328
 31090 0416 6721     		movs	r1, #103
 31091 0418 FFF7FEFF 		bl	getRegister
 31092              	.LVL2388:
 851:src/xeq.c     **** }
 31093              		.loc 1 851 2 view .LVU8329
 31094              	.LBE4376:
 31095              	.LBE4375:
 31096              	.LBE4374:
 31097              	.LBE4373:
4804:src/xeq.c     **** 
 31098              		.loc 1 4804 5 is_stmt 1 view .LVU8330
 31099 041c 17AB     		add	r3, sp, #92
 31100 041e 20AA     		add	r2, sp, #128
 31101 0420 32A8     		add	r0, sp, #200
 31102 0422 5146     		mov	r1, r10
 31103 0424 CDE900B3 		strd	fp, r3, [sp]
 31104 0428 29AB     		add	r3, sp, #164
 31105 042a C847     		blx	r9
 31106              	.LVL2389:
4806:src/xeq.c     **** 				lower2();
ARM GAS  /tmp/cc7LeJ71.s 			page 791


 31107              		.loc 1 4806 5 view .LVU8331
 31108 042c FFF7FEFF 		bl	setlastXY
 31109              	.LVL2390:
4807:src/xeq.c     **** 				setXY(&xr, &yr);
 31110              		.loc 1 4807 5 view .LVU8332
 31111 0430 FFF7FEFF 		bl	lower2
 31112              	.LVL2391:
 31113 0434 B8E0     		b	.L2469
 31114              	.LVL2392:
 31115              	.L2213:
4807:src/xeq.c     **** 				setXY(&xr, &yr);
 31116              		.loc 1 4807 5 is_stmt 0 view .LVU8333
 31117              	.LBE4372:
 31118              	.LBE4392:
 31119              	.LBE4399:
5376:src/xeq.c     **** 		case KIND_NIL:	niladic(op);	break;
 31120              		.loc 1 5376 19 is_stmt 1 view .LVU8334
 31121              	.LBB4400:
 31122              	.LBI4194:
3920:src/xeq.c     **** 	int opm = argKIND(op);
 31123              		.loc 1 3920 13 view .LVU8335
 31124              	.LBB4260:
3921:src/xeq.c     **** 
 31125              		.loc 1 3921 2 view .LVU8336
3921:src/xeq.c     **** 
 31126              		.loc 1 3921 6 is_stmt 0 view .LVU8337
 31127 0436 5FFA85F9 		uxtb	r9, r5
 31128              	.LVL2393:
3923:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31129              		.loc 1 3923 2 is_stmt 1 view .LVU8338
 31130 043a B9F12A0F 		cmp	r9, #42
 31131 043e 3FF613AF 		bhi	.L2205
 31132 0442 DFE819F0 		tbh	[pc, r9, lsl #1]
 31133              	.L2216:
 31134 0446 3103     		.2byte	(.L2227-.L2216)/2
 31135 0448 2103     		.2byte	(.L2226-.L2216)/2
 31136 044a 8D03     		.2byte	(.L2225-.L2216)/2
 31137 044c 7A03     		.2byte	(.L2224-.L2216)/2
 31138 044e 4703     		.2byte	(.L2223-.L2216)/2
 31139 0450 9F02     		.2byte	(.L2222-.L2216)/2
 31140 0452 9F02     		.2byte	(.L2222-.L2216)/2
 31141 0454 9F02     		.2byte	(.L2222-.L2216)/2
 31142 0456 9F02     		.2byte	(.L2222-.L2216)/2
 31143 0458 9F02     		.2byte	(.L2222-.L2216)/2
 31144 045a 9F02     		.2byte	(.L2222-.L2216)/2
 31145 045c 9F02     		.2byte	(.L2222-.L2216)/2
 31146 045e 9F02     		.2byte	(.L2222-.L2216)/2
 31147 0460 9F02     		.2byte	(.L2222-.L2216)/2
 31148 0462 9F02     		.2byte	(.L2222-.L2216)/2
 31149 0464 9F02     		.2byte	(.L2222-.L2216)/2
 31150 0466 9F02     		.2byte	(.L2222-.L2216)/2
 31151 0468 9F02     		.2byte	(.L2222-.L2216)/2
 31152 046a 9F02     		.2byte	(.L2222-.L2216)/2
 31153 046c 9F02     		.2byte	(.L2222-.L2216)/2
 31154 046e 9F02     		.2byte	(.L2222-.L2216)/2
 31155 0470 E602     		.2byte	(.L2221-.L2216)/2
 31156 0472 E602     		.2byte	(.L2221-.L2216)/2
ARM GAS  /tmp/cc7LeJ71.s 			page 792


 31157 0474 C302     		.2byte	(.L2220-.L2216)/2
 31158 0476 C302     		.2byte	(.L2220-.L2216)/2
 31159 0478 C302     		.2byte	(.L2220-.L2216)/2
 31160 047a C302     		.2byte	(.L2220-.L2216)/2
 31161 047c C302     		.2byte	(.L2220-.L2216)/2
 31162 047e C302     		.2byte	(.L2220-.L2216)/2
 31163 0480 C302     		.2byte	(.L2220-.L2216)/2
 31164 0482 B702     		.2byte	(.L2219-.L2216)/2
 31165 0484 B702     		.2byte	(.L2219-.L2216)/2
 31166 0486 B702     		.2byte	(.L2219-.L2216)/2
 31167 0488 B702     		.2byte	(.L2219-.L2216)/2
 31168 048a B702     		.2byte	(.L2219-.L2216)/2
 31169 048c B702     		.2byte	(.L2219-.L2216)/2
 31170 048e B702     		.2byte	(.L2219-.L2216)/2
 31171 0490 D902     		.2byte	(.L2218-.L2216)/2
 31172 0492 D902     		.2byte	(.L2218-.L2216)/2
 31173 0494 1403     		.2byte	(.L2217-.L2216)/2
 31174 0496 1403     		.2byte	(.L2217-.L2216)/2
 31175 0498 0703     		.2byte	(.L2215-.L2216)/2
 31176 049a 0703     		.2byte	(.L2215-.L2216)/2
 31177              	.LVL2394:
 31178              		.p2align 1
 31179              	.L2209:
3923:src/xeq.c     **** 	case OP_0:	case OP_1:	case OP_2:
 31180              		.loc 1 3923 2 is_stmt 0 view .LVU8339
 31181              	.LBE4260:
 31182              	.LBE4400:
5380:src/xeq.c     **** 		case KIND_CMON:	monadic_cmplex(op);	break;
 31183              		.loc 1 5380 18 is_stmt 1 view .LVU8340
 31184              	.LBB4401:
 31185              	.LBI4401:
4821:src/xeq.c     **** 	unsigned int f;
 31186              		.loc 1 4821 13 view .LVU8341
 31187              	.LBB4402:
4822:src/xeq.c     **** 	process_cmdline_set_lift();
 31188              		.loc 1 4822 2 view .LVU8342
4823:src/xeq.c     **** 
 31189              		.loc 1 4823 2 view .LVU8343
 31190              	.LBB4403:
 31191              	.LBI4403:
1332:src/xeq.c     **** 	process_cmdline();
 31192              		.loc 1 1332 6 view .LVU8344
 31193              	.LBE4403:
 31194              	.LBE4402:
 31195              	.LBE4401:
1333:src/xeq.c     **** 	set_lift();
 31196              		.loc 1 1333 2 view .LVU8345
 31197              	.LBB4448:
 31198              	.LBB4441:
 31199              	.LBB4414:
 31200              	.LBB4404:
 31201              	.LBI4404:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 31202              		.loc 1 1226 6 view .LVU8346
 31203              	.LBB4405:
1227:src/xeq.c     **** 
 31204              		.loc 1 1227 2 view .LVU8347
ARM GAS  /tmp/cc7LeJ71.s 			page 793


1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31205              		.loc 1 1229 2 view .LVU8348
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31206              		.loc 1 1229 5 is_stmt 0 view .LVU8349
 31207 049c 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31208 049e 002B     		cmp	r3, #0
 31209 04a0 40F08582 		bne	.L2502
 31210              	.L2283:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31211              		.loc 1 1229 5 view .LVU8350
 31212              	.LBE4405:
 31213              	.LBE4404:
 31214              	.LBE4414:
 31215              	.LBE4441:
 31216              	.LBE4448:
1334:src/xeq.c     **** }
 31217              		.loc 1 1334 2 is_stmt 1 view .LVU8351
 31218              	.LBB4449:
 31219              	.LBB4442:
 31220              	.LBB4415:
 31221              	.LBB4407:
 31222              	.LBI4407:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31223              		.loc 1 767 6 view .LVU8352
 31224              	.LBB4408:
 768:src/xeq.c     **** }
 31225              		.loc 1 768 5 view .LVU8353
 768:src/xeq.c     **** }
 31226              		.loc 1 768 23 is_stmt 0 view .LVU8354
 31227 04a4 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31228              	.LBE4408:
 31229              	.LBE4407:
 31230              	.LBE4415:
4825:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31231              		.loc 1 4825 4 view .LVU8355
 31232 04a6 EAB2     		uxtb	r2, r5
 31233              	.LBB4416:
 31234              	.LBB4411:
 31235              	.LBB4409:
 768:src/xeq.c     **** }
 31236              		.loc 1 768 23 view .LVU8356
 31237 04a8 43F04003 		orr	r3, r3, #64
 31238              	.LBE4409:
 31239              	.LBE4411:
 31240              	.LBE4416:
4826:src/xeq.c     **** 		if (is_intmode()) {
 31241              		.loc 1 4826 5 view .LVU8357
 31242 04ac 0B2A     		cmp	r2, #11
 31243              	.LBB4417:
 31244              	.LBB4412:
 31245              	.LBB4410:
 768:src/xeq.c     **** }
 31246              		.loc 1 768 23 view .LVU8358
 31247 04ae E375     		strb	r3, [r4, #23]
 31248              	.LBE4410:
 31249              	.LBE4412:
 31250              	.LBE4417:
ARM GAS  /tmp/cc7LeJ71.s 			page 794


4825:src/xeq.c     **** 	if (f < NUM_TRIADIC) {
 31251              		.loc 1 4825 2 is_stmt 1 view .LVU8359
 31252              	.LVL2395:
4826:src/xeq.c     **** 		if (is_intmode()) {
 31253              		.loc 1 4826 2 view .LVU8360
4826:src/xeq.c     **** 		if (is_intmode()) {
 31254              		.loc 1 4826 5 is_stmt 0 view .LVU8361
 31255 04b0 3FF6DAAE 		bhi	.L2205
4827:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31256              		.loc 1 4827 3 is_stmt 1 view .LVU8362
4827:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31257              		.loc 1 4827 7 is_stmt 0 view .LVU8363
 31258 04b4 3B68     		ldr	r3, [r7]
 31259 04b6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4827:src/xeq.c     **** 			if (! isNULL(trifuncs[f].triint)) {
 31260              		.loc 1 4827 6 view .LVU8364
 31261 04ba DB07     		lsls	r3, r3, #31
 31262 04bc 40F1D583 		bpl	.L2285
4828:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31263              		.loc 1 4828 4 is_stmt 1 view .LVU8365
4828:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31264              		.loc 1 4828 10 is_stmt 0 view .LVU8366
 31265 04c0 1D4B     		ldr	r3, .L2525+12
 31266 04c2 02EB8202 		add	r2, r2, r2, lsl #2
 31267              	.LVL2396:
4828:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31268              		.loc 1 4828 10 view .LVU8367
 31269 04c6 03EB8202 		add	r2, r3, r2, lsl #2
 31270 04ca D2F80490 		ldr	r9, [r2, #4]
4828:src/xeq.c     **** 				FP_TRIADIC_INT fp = (FP_TRIADIC_INT) EXPAND_ADDRESS(trifuncs[f].triint);
 31271              		.loc 1 4828 7 view .LVU8368
 31272 04ce B9F1000F 		cmp	r9, #0
 31273 04d2 00F06C83 		beq	.L2288
 31274              	.LBB4418:
4829:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31275              		.loc 1 4829 5 is_stmt 1 view .LVU8369
 31276              	.LVL2397:
4830:src/xeq.c     **** 					return;
 31277              		.loc 1 4830 5 view .LVU8370
4830:src/xeq.c     **** 					return;
 31278              		.loc 1 4830 9 is_stmt 0 view .LVU8371
 31279 04d6 4846     		mov	r0, r9
 31280 04d8 FFF7FEFF 		bl	dispatch_xrom
 31281              	.LVL2398:
4830:src/xeq.c     **** 					return;
 31282              		.loc 1 4830 8 view .LVU8372
 31283 04dc 0028     		cmp	r0, #0
 31284 04de 40F03D81 		bne	.L2176
 31285              	.LBB4419:
4833:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 31286              		.loc 1 4833 6 is_stmt 1 view .LVU8373
 31287              	.LBB4420:
 31288              	.LBI4420:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31289              		.loc 1 1442 15 view .LVU8374
 31290              	.LBB4421:
1443:src/xeq.c     **** }
ARM GAS  /tmp/cc7LeJ71.s 			page 795


 31291              		.loc 1 1443 2 view .LVU8375
1443:src/xeq.c     **** }
 31292              		.loc 1 1443 9 is_stmt 0 view .LVU8376
 31293 04e2 6420     		movs	r0, #100
 31294 04e4 FFF7FEFF 		bl	get_reg_n_int
 31295              	.LVL2399:
 31296 04e8 8246     		mov	r10, r0
 31297              	.LBE4421:
 31298              	.LBE4420:
4834:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31299              		.loc 1 4834 24 view .LVU8377
 31300 04ea 6520     		movs	r0, #101
 31301              	.LBB4423:
 31302              	.LBB4422:
1443:src/xeq.c     **** }
 31303              		.loc 1 1443 9 view .LVU8378
 31304 04ec 8B46     		mov	fp, r1
 31305              	.LVL2400:
1443:src/xeq.c     **** }
 31306              		.loc 1 1443 9 view .LVU8379
 31307              	.LBE4422:
 31308              	.LBE4423:
4834:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31309              		.loc 1 4834 6 is_stmt 1 view .LVU8380
4834:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31310              		.loc 1 4834 24 is_stmt 0 view .LVU8381
 31311 04ee FFF7FEFF 		bl	get_reg_n_int
 31312              	.LVL2401:
4834:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31313              		.loc 1 4834 24 view .LVU8382
 31314 04f2 0790     		str	r0, [sp, #28]
4835:src/xeq.c     **** 					x = fp(z, y, x);
 31315              		.loc 1 4835 24 view .LVU8383
 31316 04f4 6620     		movs	r0, #102
4834:src/xeq.c     **** 					long long int z = get_reg_n_int(regZ_idx);
 31317              		.loc 1 4834 24 view .LVU8384
 31318 04f6 0691     		str	r1, [sp, #24]
 31319              	.LVL2402:
4835:src/xeq.c     **** 					x = fp(z, y, x);
 31320              		.loc 1 4835 6 is_stmt 1 view .LVU8385
4835:src/xeq.c     **** 					x = fp(z, y, x);
 31321              		.loc 1 4835 24 is_stmt 0 view .LVU8386
 31322 04f8 FFF7FEFF 		bl	get_reg_n_int
 31323              	.LVL2403:
4836:src/xeq.c     **** 					setlastX();
 31324              		.loc 1 4836 6 is_stmt 1 view .LVU8387
4836:src/xeq.c     **** 					setlastX();
 31325              		.loc 1 4836 10 is_stmt 0 view .LVU8388
 31326 04fc CDE900AB 		strd	r10, fp, [sp]
 31327 0500 DDE90632 		ldrd	r3, r2, [sp, #24]
 31328 0504 C847     		blx	r9
 31329              	.LVL2404:
4836:src/xeq.c     **** 					setlastX();
 31330              		.loc 1 4836 10 view .LVU8389
 31331 0506 8146     		mov	r9, r0
 31332              	.LVL2405:
4836:src/xeq.c     **** 					setlastX();
ARM GAS  /tmp/cc7LeJ71.s 			page 796


 31333              		.loc 1 4836 10 view .LVU8390
 31334 0508 8A46     		mov	r10, r1
 31335              	.LVL2406:
4837:src/xeq.c     **** 					lower();
 31336              		.loc 1 4837 6 is_stmt 1 view .LVU8391
 31337              	.LBB4424:
 31338              	.LBI4424:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31339              		.loc 1 792 6 view .LVU8392
 31340              	.LBB4425:
 793:src/xeq.c     **** }
 31341              		.loc 1 793 2 view .LVU8393
 31342 050a 6C20     		movs	r0, #108
 31343              	.LVL2407:
 793:src/xeq.c     **** }
 31344              		.loc 1 793 2 is_stmt 0 view .LVU8394
 31345 050c 6421     		movs	r1, #100
 31346              	.LVL2408:
 793:src/xeq.c     **** }
 31347              		.loc 1 793 2 view .LVU8395
 31348 050e DFF82CB0 		ldr	fp, .L2525+16
 31349 0512 FFF7FEFF 		bl	copyreg_n
 31350              	.LVL2409:
 31351              	.LBE4425:
 31352              	.LBE4424:
4838:src/xeq.c     **** 					lower();
 31353              		.loc 1 4838 6 is_stmt 1 view .LVU8396
 31354 0516 FFF7FEFF 		bl	lower
 31355              	.LVL2410:
 31356              	.L2471:
4839:src/xeq.c     **** 					setX_int(x);
 31357              		.loc 1 4839 6 view .LVU8397
 31358 051a FFF7FEFF 		bl	lower
 31359              	.LVL2411:
4840:src/xeq.c     **** 				}
 31360              		.loc 1 4840 6 view .LVU8398
 31361 051e 4846     		mov	r0, r9
 31362 0520 5146     		mov	r1, r10
 31363 0522 FFF7FEFF 		bl	setX_int
 31364              	.LVL2412:
 31365 0526 DBF80030 		ldr	r3, [fp]
 31366              	.LBE4419:
 31367              	.LBE4418:
 31368 052a 54E6     		b	.L2179
 31369              	.L2526:
 31370              		.align	2
 31371              	.L2525:
 31372 052c 00000000 		.word	StackBase
 31373 0530 00000000 		.word	XromRunning
 31374 0534 00000000 		.word	dyfuncs
 31375 0538 00000000 		.word	trifuncs
 31376 053c 00000000 		.word	Error
 31377 0540 00000000 		.word	Running
 31378 0544 00000000 		.word	XromParams
 31379 0548 01400800 		.word	540673
 31380 054c 00000000 		.word	RetStk
 31381              	.L2208:
ARM GAS  /tmp/cc7LeJ71.s 			page 797


 31382              	.LBE4442:
 31383              	.LBE4449:
5381:src/xeq.c     **** 		case KIND_CDYA:	dyadic_cmplex(op);	break;
 31384              		.loc 1 5381 19 view .LVU8399
 31385              	.LVL2413:
 31386              	.LBB4450:
 31387              	.LBI4450:
4712:src/xeq.c     **** 	decNumber x, y, rx, ry;
 31388              		.loc 1 4712 13 view .LVU8400
 31389              	.LBB4451:
4713:src/xeq.c     **** 	unsigned int f;
 31390              		.loc 1 4713 2 view .LVU8401
4714:src/xeq.c     **** 
 31391              		.loc 1 4714 2 view .LVU8402
4716:src/xeq.c     **** 
 31392              		.loc 1 4716 2 view .LVU8403
 31393              	.LBB4452:
 31394              	.LBI4452:
1332:src/xeq.c     **** 	process_cmdline();
 31395              		.loc 1 1332 6 view .LVU8404
 31396              	.LBE4452:
 31397              	.LBE4451:
 31398              	.LBE4450:
1333:src/xeq.c     **** 	set_lift();
 31399              		.loc 1 1333 2 view .LVU8405
 31400              	.LBB4483:
 31401              	.LBB4478:
 31402              	.LBB4463:
 31403              	.LBB4453:
 31404              	.LBI4453:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 31405              		.loc 1 1226 6 view .LVU8406
 31406              	.LBB4454:
1227:src/xeq.c     **** 
 31407              		.loc 1 1227 2 view .LVU8407
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31408              		.loc 1 1229 2 view .LVU8408
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31409              		.loc 1 1229 5 is_stmt 0 view .LVU8409
 31410 0550 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31411 0552 002B     		cmp	r3, #0
 31412 0554 40F02882 		bne	.L2503
 31413              	.L2291:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31414              		.loc 1 1229 5 view .LVU8410
 31415              	.LBE4454:
 31416              	.LBE4453:
 31417              	.LBE4463:
 31418              	.LBE4478:
 31419              	.LBE4483:
1334:src/xeq.c     **** }
 31420              		.loc 1 1334 2 is_stmt 1 view .LVU8411
 31421              	.LBB4484:
 31422              	.LBB4479:
 31423              	.LBB4464:
 31424              	.LBB4456:
 31425              	.LBI4456:
ARM GAS  /tmp/cc7LeJ71.s 			page 798


 767:src/xeq.c     ****     State2.state_lift = 1;
 31426              		.loc 1 767 6 view .LVU8412
 31427              	.LBB4457:
 768:src/xeq.c     **** }
 31428              		.loc 1 768 5 view .LVU8413
 768:src/xeq.c     **** }
 31429              		.loc 1 768 23 is_stmt 0 view .LVU8414
 31430 0558 E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 31431              	.LBE4457:
 31432              	.LBE4456:
 31433              	.LBE4464:
4718:src/xeq.c     **** 
 31434              		.loc 1 4718 4 view .LVU8415
 31435 055a EBB2     		uxtb	r3, r5
 31436              	.LBB4465:
 31437              	.LBB4460:
 31438              	.LBB4458:
 768:src/xeq.c     **** }
 31439              		.loc 1 768 23 view .LVU8416
 31440 055c 42F04002 		orr	r2, r2, #64
 31441              	.LBE4458:
 31442              	.LBE4460:
 31443              	.LBE4465:
4720:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31444              		.loc 1 4720 5 view .LVU8417
 31445 0560 9B2B     		cmp	r3, #155
 31446              	.LBB4466:
 31447              	.LBB4461:
 31448              	.LBB4459:
 768:src/xeq.c     **** }
 31449              		.loc 1 768 23 view .LVU8418
 31450 0562 E275     		strb	r2, [r4, #23]
 31451              	.LBE4459:
 31452              	.LBE4461:
 31453              	.LBE4466:
4718:src/xeq.c     **** 
 31454              		.loc 1 4718 2 is_stmt 1 view .LVU8419
 31455              	.LVL2414:
4720:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31456              		.loc 1 4720 2 view .LVU8420
4720:src/xeq.c     **** 		if (! isNULL(monfuncs[f].mondcmplx)) {
 31457              		.loc 1 4720 5 is_stmt 0 view .LVU8421
 31458 0564 00F2AF80 		bhi	.L2297
4721:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31459              		.loc 1 4721 3 is_stmt 1 view .LVU8422
4721:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31460              		.loc 1 4721 9 is_stmt 0 view .LVU8423
 31461 0568 C24A     		ldr	r2, .L2527
 31462 056a 03EB4303 		add	r3, r3, r3, lsl #1
 31463              	.LVL2415:
4721:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31464              		.loc 1 4721 9 view .LVU8424
 31465 056e 02EBC303 		add	r3, r2, r3, lsl #3
 31466 0572 D3F80490 		ldr	r9, [r3, #4]
4721:src/xeq.c     **** 			FP_MONADIC_CMPLX fp = (FP_MONADIC_CMPLX) EXPAND_ADDRESS(monfuncs[f].mondcmplx);
 31467              		.loc 1 4721 6 view .LVU8425
 31468 0576 B9F1000F 		cmp	r9, #0
ARM GAS  /tmp/cc7LeJ71.s 			page 799


 31469 057a 00F02683 		beq	.L2298
 31470              	.LBB4467:
4722:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31471              		.loc 1 4722 4 is_stmt 1 view .LVU8426
 31472              	.LVL2416:
4723:src/xeq.c     **** 				return;
 31473              		.loc 1 4723 4 view .LVU8427
4723:src/xeq.c     **** 				return;
 31474              		.loc 1 4723 8 is_stmt 0 view .LVU8428
 31475 057e 4846     		mov	r0, r9
 31476 0580 FFF7FEFF 		bl	dispatch_xrom
 31477              	.LVL2417:
4723:src/xeq.c     **** 				return;
 31478              		.loc 1 4723 7 view .LVU8429
 31479 0584 0028     		cmp	r0, #0
 31480 0586 40F0E980 		bne	.L2176
4726:src/xeq.c     **** 				fp(&rx, &ry, &x, &y);
 31481              		.loc 1 4726 5 is_stmt 1 view .LVU8430
 31482              	.LVL2418:
 31483              	.LBB4468:
 31484              	.LBI4468:
 854:src/xeq.c     **** 	getX(x);
 31485              		.loc 1 854 6 view .LVU8431
 31486              	.LBE4468:
 31487              	.LBE4467:
 31488              	.LBE4479:
 31489              	.LBE4484:
 855:src/xeq.c     **** 	getY(y);
 31490              		.loc 1 855 2 view .LVU8432
 31491              	.LBB4485:
 31492              	.LBB4480:
 31493              	.LBB4475:
 31494              	.LBB4473:
 31495              	.LBB4469:
 31496              	.LBI4469:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 31497              		.loc 1 824 12 view .LVU8433
 31498              	.LBB4470:
 825:src/xeq.c     **** }
 31499              		.loc 1 825 2 view .LVU8434
 825:src/xeq.c     **** }
 31500              		.loc 1 825 9 is_stmt 0 view .LVU8435
 31501 058a 6421     		movs	r1, #100
 31502 058c 20A8     		add	r0, sp, #128
 31503              	.LVL2419:
 825:src/xeq.c     **** }
 31504              		.loc 1 825 9 view .LVU8436
 31505 058e FFF7FEFF 		bl	getRegister
 31506              	.LVL2420:
 825:src/xeq.c     **** }
 31507              		.loc 1 825 9 view .LVU8437
 31508              	.LBE4470:
 31509              	.LBE4469:
 31510              	.LBE4473:
 31511              	.LBE4475:
 31512              	.LBE4480:
 31513              	.LBE4485:
ARM GAS  /tmp/cc7LeJ71.s 			page 800


 856:src/xeq.c     **** }
 31514              		.loc 1 856 2 is_stmt 1 view .LVU8438
 31515              	.LBB4486:
 31516              	.LBB4481:
 31517              	.LBB4476:
 31518              	.LBB4474:
 31519              	.LBB4471:
 31520              	.LBI4471:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 31521              		.loc 1 832 6 view .LVU8439
 31522              	.LBB4472:
 833:src/xeq.c     **** }
 31523              		.loc 1 833 2 view .LVU8440
 31524 0592 6521     		movs	r1, #101
 31525 0594 29A8     		add	r0, sp, #164
 31526              	.LVL2421:
 833:src/xeq.c     **** }
 31527              		.loc 1 833 2 is_stmt 0 view .LVU8441
 31528 0596 FFF7FEFF 		bl	getRegister
 31529              	.LVL2422:
 833:src/xeq.c     **** }
 31530              		.loc 1 833 2 view .LVU8442
 31531              	.LBE4472:
 31532              	.LBE4471:
 31533              	.LBE4474:
4727:src/xeq.c     **** 				setlastXY();
 31534              		.loc 1 4727 5 is_stmt 1 view .LVU8443
 31535 059a 29AB     		add	r3, sp, #164
 31536 059c 20AA     		add	r2, sp, #128
 31537 059e 32A8     		add	r0, sp, #200
 31538 05a0 5146     		mov	r1, r10
 31539 05a2 C847     		blx	r9
 31540              	.LVL2423:
4728:src/xeq.c     **** 				setXY(&rx, &ry);
 31541              		.loc 1 4728 5 view .LVU8444
 31542 05a4 FFF7FEFF 		bl	setlastXY
 31543              	.LVL2424:
4729:src/xeq.c     **** 				set_was_complex();
 31544              		.loc 1 4729 5 view .LVU8445
 31545              	.L2469:
4729:src/xeq.c     **** 				set_was_complex();
 31546              		.loc 1 4729 5 is_stmt 0 view .LVU8446
 31547              	.LBE4476:
 31548              	.LBE4481:
 31549              	.LBE4486:
 31550              	.LBB4487:
 31551              	.LBB4393:
 31552              	.LBB4379:
4808:src/xeq.c     **** 				set_was_complex();
 31553              		.loc 1 4808 5 is_stmt 1 view .LVU8447
 31554 05a8 5146     		mov	r1, r10
 31555 05aa 32A8     		add	r0, sp, #200
 31556 05ac FFF7FEFF 		bl	setXY
 31557              	.LVL2425:
4809:src/xeq.c     **** 			}
 31558              		.loc 1 4809 5 view .LVU8448
 31559              	.LBB4377:
ARM GAS  /tmp/cc7LeJ71.s 			page 801


 31560              	.LBI4377:
 539:src/xeq.c     **** 	State2.wascomplex = 1;
 31561              		.loc 1 539 13 view .LVU8449
 31562              	.LBB4378:
 540:src/xeq.c     **** }
 31563              		.loc 1 540 2 view .LVU8450
 540:src/xeq.c     **** }
 31564              		.loc 1 540 20 is_stmt 0 view .LVU8451
 31565 05b0 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
 31566 05b2 DFF8DCB2 		ldr	fp, .L2527+28
 31567 05b6 0122     		movs	r2, #1
 31568 05b8 62F38713 		bfi	r3, r2, #6, #2
 31569 05bc 2375     		strb	r3, [r4, #20]
 31570 05be DBF80030 		ldr	r3, [fp]
 541:src/xeq.c     **** 
 31571              		.loc 1 541 1 view .LVU8452
 31572 05c2 08E6     		b	.L2179
 31573              	.L2211:
 31574              	.LBE4378:
 31575              	.LBE4377:
 31576              	.LBE4379:
 31577              	.LBE4393:
 31578              	.LBE4487:
5378:src/xeq.c     **** 		case KIND_DYA:	dyadic(op);	break;
 31579              		.loc 1 5378 18 is_stmt 1 view .LVU8453
 31580              	.LVL2426:
 31581              	.LBB4488:
 31582              	.LBI4488:
4672:src/xeq.c     **** {
 31583              		.loc 1 4672 13 view .LVU8454
 31584              	.LBB4489:
4674:src/xeq.c     **** 	process_cmdline_set_lift();
 31585              		.loc 1 4674 2 view .LVU8455
4675:src/xeq.c     **** 
 31586              		.loc 1 4675 2 view .LVU8456
 31587              	.LBB4490:
 31588              	.LBI4490:
1332:src/xeq.c     **** 	process_cmdline();
 31589              		.loc 1 1332 6 view .LVU8457
 31590              	.LBE4490:
 31591              	.LBE4489:
 31592              	.LBE4488:
1333:src/xeq.c     **** 	set_lift();
 31593              		.loc 1 1333 2 view .LVU8458
 31594              	.LBB4527:
 31595              	.LBB4522:
 31596              	.LBB4501:
 31597              	.LBB4491:
 31598              	.LBI4491:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 31599              		.loc 1 1226 6 view .LVU8459
 31600              	.LBB4492:
1227:src/xeq.c     **** 
 31601              		.loc 1 1227 2 view .LVU8460
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31602              		.loc 1 1229 2 view .LVU8461
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
ARM GAS  /tmp/cc7LeJ71.s 			page 802


 31603              		.loc 1 1229 5 is_stmt 0 view .LVU8462
 31604 05c4 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31605 05c6 002B     		cmp	r3, #0
 31606 05c8 40F0EB81 		bne	.L2504
 31607              	.L2267:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31608              		.loc 1 1229 5 view .LVU8463
 31609              	.LBE4492:
 31610              	.LBE4491:
 31611              	.LBE4501:
 31612              	.LBE4522:
 31613              	.LBE4527:
1334:src/xeq.c     **** }
 31614              		.loc 1 1334 2 is_stmt 1 view .LVU8464
 31615              	.LBB4528:
 31616              	.LBB4523:
 31617              	.LBB4502:
 31618              	.LBB4494:
 31619              	.LBI4494:
 767:src/xeq.c     ****     State2.state_lift = 1;
 31620              		.loc 1 767 6 view .LVU8465
 31621              	.LBB4495:
 768:src/xeq.c     **** }
 31622              		.loc 1 768 5 view .LVU8466
 768:src/xeq.c     **** }
 31623              		.loc 1 768 23 is_stmt 0 view .LVU8467
 31624 05cc E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 31625              	.LBE4495:
 31626              	.LBE4494:
 31627              	.LBE4502:
4677:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 31628              		.loc 1 4677 4 view .LVU8468
 31629 05ce EAB2     		uxtb	r2, r5
 31630              	.LBB4503:
 31631              	.LBB4498:
 31632              	.LBB4496:
 768:src/xeq.c     **** }
 31633              		.loc 1 768 23 view .LVU8469
 31634 05d0 43F04003 		orr	r3, r3, #64
 31635              	.LBE4496:
 31636              	.LBE4498:
 31637              	.LBE4503:
4678:src/xeq.c     **** 		if (is_intmode()) {
 31638              		.loc 1 4678 5 view .LVU8470
 31639 05d4 9B2A     		cmp	r2, #155
 31640              	.LBB4504:
 31641              	.LBB4499:
 31642              	.LBB4497:
 768:src/xeq.c     **** }
 31643              		.loc 1 768 23 view .LVU8471
 31644 05d6 E375     		strb	r3, [r4, #23]
 31645              	.LBE4497:
 31646              	.LBE4499:
 31647              	.LBE4504:
4677:src/xeq.c     **** 	if (f < NUM_MONADIC) {
 31648              		.loc 1 4677 2 is_stmt 1 view .LVU8472
 31649              	.LVL2427:
ARM GAS  /tmp/cc7LeJ71.s 			page 803


4678:src/xeq.c     **** 		if (is_intmode()) {
 31650              		.loc 1 4678 2 view .LVU8473
4678:src/xeq.c     **** 		if (is_intmode()) {
 31651              		.loc 1 4678 5 is_stmt 0 view .LVU8474
 31652 05d8 3FF646AE 		bhi	.L2205
4679:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 31653              		.loc 1 4679 3 is_stmt 1 view .LVU8475
4679:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 31654              		.loc 1 4679 7 is_stmt 0 view .LVU8476
 31655 05dc 3B68     		ldr	r3, [r7]
 31656 05de 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4679:src/xeq.c     **** 			if (! isNULL(monfuncs[f].monint)) {
 31657              		.loc 1 4679 6 view .LVU8477
 31658 05e2 D807     		lsls	r0, r3, #31
 31659 05e4 40F17983 		bpl	.L2269
4680:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31660              		.loc 1 4680 4 is_stmt 1 view .LVU8478
4680:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31661              		.loc 1 4680 10 is_stmt 0 view .LVU8479
 31662 05e8 A24B     		ldr	r3, .L2527
 31663 05ea 02EB4202 		add	r2, r2, r2, lsl #1
 31664              	.LVL2428:
4680:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31665              		.loc 1 4680 10 view .LVU8480
 31666 05ee 03EBC202 		add	r2, r3, r2, lsl #3
 31667 05f2 D2F80890 		ldr	r9, [r2, #8]
4680:src/xeq.c     **** 				FP_MONADIC_INT fp = (FP_MONADIC_INT) EXPAND_ADDRESS(monfuncs[f].monint);
 31668              		.loc 1 4680 7 view .LVU8481
 31669 05f6 B9F1000F 		cmp	r9, #0
 31670 05fa 00F0D882 		beq	.L2288
 31671              	.LBB4505:
4681:src/xeq.c     **** 				if (dispatch_xrom(fp))
 31672              		.loc 1 4681 5 is_stmt 1 view .LVU8482
 31673              	.LVL2429:
4682:src/xeq.c     **** 					return;
 31674              		.loc 1 4682 5 view .LVU8483
4682:src/xeq.c     **** 					return;
 31675              		.loc 1 4682 9 is_stmt 0 view .LVU8484
 31676 05fe 4846     		mov	r0, r9
 31677 0600 FFF7FEFF 		bl	dispatch_xrom
 31678              	.LVL2430:
4682:src/xeq.c     **** 					return;
 31679              		.loc 1 4682 8 view .LVU8485
 31680 0604 0028     		cmp	r0, #0
 31681 0606 40F0A980 		bne	.L2176
 31682              	.LBB4506:
4685:src/xeq.c     **** 					x = fp(x);
 31683              		.loc 1 4685 6 is_stmt 1 view .LVU8486
 31684              	.LBB4507:
 31685              	.LBI4507:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 31686              		.loc 1 1442 15 view .LVU8487
 31687              	.LBB4508:
1443:src/xeq.c     **** }
 31688              		.loc 1 1443 2 view .LVU8488
1443:src/xeq.c     **** }
 31689              		.loc 1 1443 9 is_stmt 0 view .LVU8489
ARM GAS  /tmp/cc7LeJ71.s 			page 804


 31690 060a 6420     		movs	r0, #100
 31691 060c FFF7FEFF 		bl	get_reg_n_int
 31692              	.LVL2431:
1443:src/xeq.c     **** }
 31693              		.loc 1 1443 9 view .LVU8490
 31694              	.LBE4508:
 31695              	.LBE4507:
4686:src/xeq.c     **** 					setlastX();
 31696              		.loc 1 4686 6 is_stmt 1 view .LVU8491
4686:src/xeq.c     **** 					setlastX();
 31697              		.loc 1 4686 10 is_stmt 0 view .LVU8492
 31698 0610 C847     		blx	r9
 31699              	.LVL2432:
4686:src/xeq.c     **** 					setlastX();
 31700              		.loc 1 4686 10 view .LVU8493
 31701 0612 DFF87CB2 		ldr	fp, .L2527+28
 31702 0616 8246     		mov	r10, r0
 31703 0618 8946     		mov	r9, r1
 31704              	.LVL2433:
4687:src/xeq.c     **** 					setX_int(x);
 31705              		.loc 1 4687 6 is_stmt 1 view .LVU8494
 31706              	.LBB4509:
 31707              	.LBI4509:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 31708              		.loc 1 792 6 view .LVU8495
 31709              	.LBB4510:
 793:src/xeq.c     **** }
 31710              		.loc 1 793 2 view .LVU8496
 31711 061a 6C20     		movs	r0, #108
 31712              	.LVL2434:
 793:src/xeq.c     **** }
 31713              		.loc 1 793 2 is_stmt 0 view .LVU8497
 31714 061c 6421     		movs	r1, #100
 31715              	.LVL2435:
 793:src/xeq.c     **** }
 31716              		.loc 1 793 2 view .LVU8498
 31717 061e FFF7FEFF 		bl	copyreg_n
 31718              	.LVL2436:
 31719              	.LBE4510:
 31720              	.LBE4509:
4688:src/xeq.c     **** 				}
 31721              		.loc 1 4688 6 is_stmt 1 view .LVU8499
 31722 0622 5046     		mov	r0, r10
 31723 0624 4946     		mov	r1, r9
 31724 0626 FFF7FEFF 		bl	setX_int
 31725              	.LVL2437:
 31726 062a DBF80030 		ldr	r3, [fp]
 31727              	.LBE4506:
 31728              	.LBE4505:
 31729 062e D2E5     		b	.L2179
 31730              	.LVL2438:
 31731              	.L2212:
4688:src/xeq.c     **** 				}
 31732              		.loc 1 4688 6 is_stmt 0 view .LVU8500
 31733              	.LBE4523:
 31734              	.LBE4528:
5377:src/xeq.c     **** 		case KIND_MON:	monadic(op);	break;
ARM GAS  /tmp/cc7LeJ71.s 			page 805


 31735              		.loc 1 5377 18 is_stmt 1 view .LVU8501
 31736              	.LBB4529:
 31737              	.LBI4529:
4631:src/xeq.c     **** 	const unsigned int idx = argKIND(op);
 31738              		.loc 1 4631 13 view .LVU8502
 31739              	.LBB4530:
4632:src/xeq.c     **** 
 31740              		.loc 1 4632 2 view .LVU8503
 31741              	.LBB4531:
 31742              	.LBB4532:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31743              		.loc 1 1229 5 is_stmt 0 view .LVU8504
 31744 0630 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 31745              	.LBE4532:
 31746              	.LBE4531:
4632:src/xeq.c     **** 
 31747              		.loc 1 4632 21 view .LVU8505
 31748 0632 5FFA85F9 		uxtb	r9, r5
 31749              	.LVL2439:
4634:src/xeq.c     **** 	if (idx < NUM_NILADIC) {
 31750              		.loc 1 4634 2 is_stmt 1 view .LVU8506
 31751              	.LBB4535:
 31752              	.LBI4531:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 31753              		.loc 1 1226 6 view .LVU8507
 31754              	.LBB4533:
1227:src/xeq.c     **** 
 31755              		.loc 1 1227 2 view .LVU8508
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31756              		.loc 1 1229 2 view .LVU8509
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31757              		.loc 1 1229 5 is_stmt 0 view .LVU8510
 31758 0636 002B     		cmp	r3, #0
 31759 0638 40F0B081 		bne	.L2505
 31760              	.L2253:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 31761              		.loc 1 1229 5 view .LVU8511
 31762              	.LBE4533:
 31763              	.LBE4535:
4635:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 31764              		.loc 1 4635 2 is_stmt 1 view .LVU8512
4635:src/xeq.c     **** 		if (is_intmode() && NILADIC_NOTINT(niladics[idx]))
 31765              		.loc 1 4635 5 is_stmt 0 view .LVU8513
 31766 063c B9F1DA0F 		cmp	r9, #218
 31767 0640 00F22E81 		bhi	.L2254
4636:src/xeq.c     **** 			bad_mode_error();
 31768              		.loc 1 4636 3 is_stmt 1 view .LVU8514
4636:src/xeq.c     **** 			bad_mode_error();
 31769              		.loc 1 4636 7 is_stmt 0 view .LVU8515
 31770 0644 3B68     		ldr	r3, [r7]
 31771 0646 93F8E827 		ldrb	r2, [r3, #2024]	@ zero_extendqisi2
4636:src/xeq.c     **** 			bad_mode_error();
 31772              		.loc 1 4636 6 view .LVU8516
 31773 064a 12F0010F 		tst	r2, #1
4636:src/xeq.c     **** 			bad_mode_error();
 31774              		.loc 1 4636 23 view .LVU8517
 31775 064e 8A4A     		ldr	r2, .L2527+4
ARM GAS  /tmp/cc7LeJ71.s 			page 806


4636:src/xeq.c     **** 			bad_mode_error();
 31776              		.loc 1 4636 6 view .LVU8518
 31777 0650 40F02F83 		bne	.L2456
 31778 0654 4FEA091A 		lsl	r10, r9, #4
 31779              	.L2255:
4638:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 31780              		.loc 1 4638 8 is_stmt 1 view .LVU8519
4638:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 31781              		.loc 1 4638 14 is_stmt 0 view .LVU8520
 31782 0658 52F80AB0 		ldr	fp, [r2, r10]
 31783 065c 9244     		add	r10, r10, r2
4638:src/xeq.c     **** 			FP_NILADIC fp = (FP_NILADIC) EXPAND_ADDRESS(niladics[idx].niladicf);
 31784              		.loc 1 4638 11 view .LVU8521
 31785 065e BBF1000F 		cmp	fp, #0
 31786 0662 00F06183 		beq	.L2506
 31787              	.LBB4536:
4639:src/xeq.c     **** 			if (dispatch_xrom(fp))
 31788              		.loc 1 4639 4 is_stmt 1 view .LVU8522
 31789              	.LVL2440:
4640:src/xeq.c     **** 				return;
 31790              		.loc 1 4640 4 view .LVU8523
4640:src/xeq.c     **** 				return;
 31791              		.loc 1 4640 8 is_stmt 0 view .LVU8524
 31792 0666 5846     		mov	r0, fp
 31793 0668 FFF7FEFF 		bl	dispatch_xrom
 31794              	.LVL2441:
4640:src/xeq.c     **** 				return;
 31795              		.loc 1 4640 7 view .LVU8525
 31796 066c 0028     		cmp	r0, #0
 31797 066e 75D1     		bne	.L2176
4643:src/xeq.c     **** 				case 2:	lift_if_enabled();
 31798              		.loc 1 4643 5 is_stmt 1 view .LVU8526
 31799 0670 9AF80430 		ldrb	r3, [r10, #4]	@ zero_extendqisi2
 31800 0674 03F00303 		and	r3, r3, #3
 31801 0678 012B     		cmp	r3, #1
 31802 067a 00F07183 		beq	.L2258
 31803 067e 022B     		cmp	r3, #2
 31804 0680 03D1     		bne	.L2259
4644:src/xeq.c     **** 				case 1:	lift_if_enabled();
 31805              		.loc 1 4644 13 view .LVU8527
 31806              	.LBB4537:
 31807              	.LBI4537:
 747:src/xeq.c     **** 	if (get_lift())
 31808              		.loc 1 747 6 view .LVU8528
 31809              	.LBB4538:
 748:src/xeq.c     **** 		lift();
 31810              		.loc 1 748 2 view .LVU8529
 31811              	.LBB4539:
 31812              	.LBI4539:
 743:src/xeq.c     **** 	return State2.state_lift;
 31813              		.loc 1 743 12 view .LVU8530
 31814              	.LBB4540:
 744:src/xeq.c     **** }
 31815              		.loc 1 744 2 view .LVU8531
 744:src/xeq.c     **** }
 31816              		.loc 1 744 15 is_stmt 0 view .LVU8532
 31817 0682 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
ARM GAS  /tmp/cc7LeJ71.s 			page 807


 31818              	.LBE4540:
 31819              	.LBE4539:
 748:src/xeq.c     **** 		lift();
 31820              		.loc 1 748 5 view .LVU8533
 31821 0684 5806     		lsls	r0, r3, #25
 31822 0686 00F16983 		bmi	.L2507
 31823              	.L2259:
 31824              	.LBE4538:
 31825              	.LBE4537:
4647:src/xeq.c     **** 					break;
 31826              		.loc 1 4647 6 is_stmt 1 view .LVU8534
 31827 068a 4846     		mov	r0, r9
 31828 068c D847     		blx	fp
 31829              	.LVL2442:
4648:src/xeq.c     **** 				}
 31830              		.loc 1 4648 6 view .LVU8535
 31831 068e DFF800B2 		ldr	fp, .L2527+28
 31832              	.LVL2443:
4648:src/xeq.c     **** 				}
 31833              		.loc 1 4648 6 is_stmt 0 view .LVU8536
 31834 0692 3B68     		ldr	r3, [r7]
 31835              	.LVL2444:
 31836              	.L2256:
4648:src/xeq.c     **** 				}
 31837              		.loc 1 4648 6 view .LVU8537
 31838              	.LBE4536:
4653:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 31839              		.loc 1 4653 3 is_stmt 1 view .LVU8538
4655:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 31840              		.loc 1 4655 2 view .LVU8539
4655:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 31841              		.loc 1 4655 5 is_stmt 0 view .LVU8540
 31842 0694 93F9DD27 		ldrsb	r2, [r3, #2013]
 31843 0698 002A     		cmp	r2, #0
 31844 069a C0F24883 		blt	.L2508
4658:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 31845              		.loc 1 4658 7 is_stmt 1 view .LVU8541
4658:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 31846              		.loc 1 4658 10 is_stmt 0 view .LVU8542
 31847 069e B9F13F0F 		cmp	r9, #63
 31848 06a2 5DD0     		beq	.L2468
4658:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 31849              		.loc 1 4658 29 view .LVU8543
 31850 06a4 B9F10B0F 		cmp	r9, #11
 31851 06a8 5AD0     		beq	.L2468
 31852 06aa 06E1     		b	.L2316
 31853              	.LVL2445:
 31854              	.L2496:
4658:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 31855              		.loc 1 4658 29 view .LVU8544
 31856              	.LBE4530:
 31857              	.LBE4529:
 31858              	.LBB4567:
 31859              	.LBB4190:
5294:src/xeq.c     **** 		return;
 31860              		.loc 1 5294 3 is_stmt 1 view .LVU8545
5294:src/xeq.c     **** 		return;
ARM GAS  /tmp/cc7LeJ71.s 			page 808


 31861              		.loc 1 5294 3 view .LVU8546
 31862              	.LBB4184:
 31863              	.LBI4179:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31864              		.loc 1 546 5 view .LVU8547
 31865              	.LBB4183:
 547:src/xeq.c     **** 		Error = e;
 31866              		.loc 1 547 2 view .LVU8548
 547:src/xeq.c     **** 		Error = e;
 31867              		.loc 1 547 12 is_stmt 0 view .LVU8549
 31868 06ac DFF8E0B1 		ldr	fp, .L2527+28
 31869 06b0 DFF8E091 		ldr	r9, .L2527+32
 31870              	.LVL2446:
 547:src/xeq.c     **** 		Error = e;
 31871              		.loc 1 547 12 view .LVU8550
 31872 06b4 DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 31873              		.loc 1 547 5 view .LVU8551
 31874 06b8 0028     		cmp	r0, #0
 31875 06ba 7FF4E1AD 		bne	.L2315
 31876 06be DCE5     		b	.L2184
 31877              	.LVL2447:
 31878              	.L2495:
 547:src/xeq.c     **** 		Error = e;
 31879              		.loc 1 547 5 view .LVU8552
 31880              	.LBE4183:
 31881              	.LBE4184:
 31882              	.LBB4185:
 31883              	.LBB4167:
 31884              	.LBB4161:
 31885 06c0 FFF7FEFF 		bl	process_cmdline.part.0
 31886              	.LVL2448:
 31887 06c4 5FE5     		b	.L2172
 31888              	.LVL2449:
 31889              	.L2297:
 547:src/xeq.c     **** 		Error = e;
 31890              		.loc 1 547 5 view .LVU8553
 31891              	.LBE4161:
 31892              	.LBE4167:
 31893              	.LBE4185:
 31894              	.LBE4190:
 31895              	.LBE4567:
 31896              	.LBB4568:
 31897              	.LBB4394:
4814:src/xeq.c     **** }
 31898              		.loc 1 4814 3 is_stmt 1 view .LVU8554
4814:src/xeq.c     **** }
 31899              		.loc 1 4814 3 view .LVU8555
 31900              	.LBB4380:
 31901              	.LBI4380:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31902              		.loc 1 546 5 view .LVU8556
 31903              	.LBB4381:
 547:src/xeq.c     **** 		Error = e;
 31904              		.loc 1 547 2 view .LVU8557
 547:src/xeq.c     **** 		Error = e;
 31905              		.loc 1 547 12 is_stmt 0 view .LVU8558
ARM GAS  /tmp/cc7LeJ71.s 			page 809


 31906 06c6 DFF8C8B1 		ldr	fp, .L2527+28
 31907 06ca DBF80030 		ldr	r3, [fp]
 547:src/xeq.c     **** 		Error = e;
 31908              		.loc 1 547 5 view .LVU8559
 31909 06ce 002B     		cmp	r3, #0
 31910 06d0 7FF44CAD 		bne	.L2190
 31911              	.LVL2450:
 31912              	.LBB4382:
 31913              	.LBI4382:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 31914              		.loc 1 546 5 is_stmt 1 view .LVU8560
 31915              	.LBB4383:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 31916              		.loc 1 548 3 view .LVU8561
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 31917              		.loc 1 548 9 is_stmt 0 view .LVU8562
 31918 06d4 0323     		movs	r3, #3
 31919 06d6 CBF80030 		str	r3, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 31920              		.loc 1 549 3 is_stmt 1 view .LVU8563
 31921              	.LVL2451:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 31922              		.loc 1 549 3 is_stmt 0 view .LVU8564
 31923              	.LBE4383:
 31924              	.LBE4382:
 31925              	.LBE4381:
 31926              	.LBE4380:
4814:src/xeq.c     **** }
 31927              		.loc 1 4814 3 is_stmt 1 view .LVU8565
 31928              	.LBE4394:
 31929              	.LBE4568:
5383:src/xeq.c     **** 		}
 31930              		.loc 1 5383 12 view .LVU8566
5393:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 31931              		.loc 1 5393 2 view .LVU8567
 31932 06da 47E5     		b	.L2190
 31933              	.LVL2452:
 31934              	.L2188:
 31935              	.LBB4569:
 31936              	.LBB4151:
 31937              	.LBB4129:
5221:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31938              		.loc 1 5221 4 view .LVU8568
5221:src/xeq.c     **** 			if ((regval >> 32) != 0)
 31939              		.loc 1 5221 13 is_stmt 0 view .LVU8569
 31940 06dc 1046     		mov	r0, r2
 31941 06de 5146     		mov	r1, r10
 31942 06e0 0B93     		str	r3, [sp, #44]
 31943 06e2 FFF7FEFF 		bl	get_reg_n_int_sgn
 31944              	.LVL2453:
5222:src/xeq.c     **** 				goto range;
 31945              		.loc 1 5222 16 view .LVU8570
 31946 06e6 0023     		movs	r3, #0
 31947 06e8 0891     		str	r1, [sp, #32]
 31948 06ea 0993     		str	r3, [sp, #36]
 31949              	.LVL2454:
5222:src/xeq.c     **** 				goto range;
ARM GAS  /tmp/cc7LeJ71.s 			page 810


 31950              		.loc 1 5222 4 is_stmt 1 view .LVU8571
5222:src/xeq.c     **** 				goto range;
 31951              		.loc 1 5222 7 is_stmt 0 view .LVU8572
 31952 06ec DDE90823 		ldrd	r2, [sp, #32]
 31953 06f0 1343     		orrs	r3, r2, r3
 31954 06f2 19D1     		bne	.L2192
5224:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31955              		.loc 1 5224 4 is_stmt 1 view .LVU8573
5225:src/xeq.c     **** 				// negative arguments address local registers or flags
 31956              		.loc 1 5225 7 is_stmt 0 view .LVU8574
 31957 06f4 0A9B     		ldr	r3, [sp, #40]
 31958 06f6 13F0080F 		tst	r3, #8
5224:src/xeq.c     **** 			if (argcmds[cmd].local && sgn) {
 31959              		.loc 1 5224 8 view .LVU8575
 31960 06fa 0246     		mov	r2, r0
 31961              	.LVL2455:
5225:src/xeq.c     **** 				// negative arguments address local registers or flags
 31962              		.loc 1 5225 4 is_stmt 1 view .LVU8576
5225:src/xeq.c     **** 				// negative arguments address local registers or flags
 31963              		.loc 1 5225 7 is_stmt 0 view .LVU8577
 31964 06fc 0B9B     		ldr	r3, [sp, #44]
 31965 06fe 02D0     		beq	.L2186
5225:src/xeq.c     **** 				// negative arguments address local registers or flags
 31966              		.loc 1 5225 27 view .LVU8578
 31967 0700 3B99     		ldr	r1, [sp, #236]
 31968              	.LVL2456:
5225:src/xeq.c     **** 				// negative arguments address local registers or flags
 31969              		.loc 1 5225 27 view .LVU8579
 31970 0702 01B1     		cbz	r1, .L2186
5227:src/xeq.c     **** 			}
 31971              		.loc 1 5227 5 is_stmt 1 view .LVU8580
5227:src/xeq.c     **** 			}
 31972              		.loc 1 5227 9 is_stmt 0 view .LVU8581
 31973 0704 7032     		adds	r2, r2, #112
 31974              	.LVL2457:
 31975              	.L2186:
5227:src/xeq.c     **** 			}
 31976              		.loc 1 5227 9 view .LVU8582
 31977              	.LBE4129:
5235:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31978              		.loc 1 5235 2 is_stmt 1 view .LVU8583
5235:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31979              		.loc 1 5235 18 is_stmt 0 view .LVU8584
 31980 0706 0BEB0301 		add	r1, fp, r3
 31981 070a 4979     		ldrb	r1, [r1, #5]	@ zero_extendqisi2
5235:src/xeq.c     **** 		// Range checking for registers against variable boundary
 31982              		.loc 1 5235 5 view .LVU8585
 31983 070c 11F0020F 		tst	r1, #2
 31984 0710 00F09F80 		beq	.L2194
5237:src/xeq.c     **** 	}
 31985              		.loc 1 5237 9 view .LVU8586
 31986 0714 1146     		mov	r1, r2
 31987 0716 4846     		mov	r0, r9
 31988 0718 0A93     		str	r3, [sp, #40]
5237:src/xeq.c     **** 	}
 31989              		.loc 1 5237 3 is_stmt 1 view .LVU8587
5237:src/xeq.c     **** 	}
ARM GAS  /tmp/cc7LeJ71.s 			page 811


 31990              		.loc 1 5237 9 is_stmt 0 view .LVU8588
 31991 071a 0692     		str	r2, [sp, #24]
 31992              	.LVL2458:
5237:src/xeq.c     **** 	}
 31993              		.loc 1 5237 9 view .LVU8589
 31994 071c FFF7FEFF 		bl	get_reg_limit
 31995              	.LVL2459:
5237:src/xeq.c     **** 	}
 31996              		.loc 1 5237 9 view .LVU8590
 31997 0720 069A     		ldr	r2, [sp, #24]
 31998 0722 0A9B     		ldr	r3, [sp, #40]
 31999              	.LVL2460:
 32000              	.L2195:
5245:src/xeq.c     **** 		// Argument is too large
 32001              		.loc 1 5245 2 is_stmt 1 view .LVU8591
5245:src/xeq.c     **** 		// Argument is too large
 32002              		.loc 1 5245 5 is_stmt 0 view .LVU8592
 32003 0724 8242     		cmp	r2, r0
 32004 0726 4AD9     		bls	.L2197
 32005              	.LVL2461:
 32006              	.L2192:
5247:src/xeq.c     **** 	}
 32007              		.loc 1 5247 9 is_stmt 1 view .LVU8593
 32008              	.LBB4130:
 32009              	.LBI4130:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32010              		.loc 1 546 5 view .LVU8594
 32011              	.LBB4131:
 547:src/xeq.c     **** 		Error = e;
 32012              		.loc 1 547 2 view .LVU8595
 547:src/xeq.c     **** 		Error = e;
 32013              		.loc 1 547 12 is_stmt 0 view .LVU8596
 32014 0728 DFF864B1 		ldr	fp, .L2527+28
 32015 072c DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 32016              		.loc 1 547 5 view .LVU8597
 32017 0730 0028     		cmp	r0, #0
 32018 0732 00F0FE80 		beq	.L2198
 32019              	.LVL2462:
 32020              	.L2461:
 547:src/xeq.c     **** 		Error = e;
 32021              		.loc 1 547 5 view .LVU8598
 32022 0736 DFF85C91 		ldr	r9, .L2527+32
 32023 073a A1E5     		b	.L2315
 32024              	.LVL2463:
 32025              	.L2512:
 547:src/xeq.c     **** 		Error = e;
 32026              		.loc 1 547 5 view .LVU8599
 32027              	.LBE4131:
 32028              	.LBE4130:
 32029              	.LBE4151:
 32030              	.LBE4569:
 32031              	.LBB4570:
 32032              	.LBB4261:
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32033              		.loc 1 4038 7 is_stmt 1 view .LVU8600
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
ARM GAS  /tmp/cc7LeJ71.s 			page 812


 32034              		.loc 1 4038 10 is_stmt 0 view .LVU8601
 32035 073c 002B     		cmp	r3, #0
 32036 073e 40F05183 		bne	.L2454
 32037 0742 DFF85091 		ldr	r9, .L2527+32
 32038              	.LVL2464:
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32039              		.loc 1 4038 10 view .LVU8602
 32040 0746 DFF850A1 		ldr	r10, .L2527+36
 32041              	.L2244:
4043:src/xeq.c     **** 		      if ( (XromRunning || Running) ) {//JMTEST Explicitly including standard functionality if co
 32042              		.loc 1 4043 9 is_stmt 1 view .LVU8603
 32043 074a FFF7FEFF 		bl	lift
 32044              	.LVL2465:
4044:src/xeq.c     **** 			clr_lift();
 32045              		.loc 1 4044 9 view .LVU8604
4044:src/xeq.c     **** 			clr_lift();
 32046              		.loc 1 4044 27 is_stmt 0 view .LVU8605
 32047 074e DAF80020 		ldr	r2, [r10]
 32048 0752 D9F80030 		ldr	r3, [r9]
 32049 0756 1343     		orrs	r3, r2, r3
 32050 0758 40F0B281 		bne	.L2470
 32051              	.LVL2466:
 32052              	.L2176:
4044:src/xeq.c     **** 			clr_lift();
 32053              		.loc 1 4044 27 view .LVU8606
 32054 075c DFF830B1 		ldr	fp, .L2527+28
 32055              	.L2468:
 32056 0760 DBF80030 		ldr	r3, [fp]
 32057 0764 37E5     		b	.L2179
 32058              	.LVL2467:
 32059              	.L2499:
4044:src/xeq.c     **** 			clr_lift();
 32060              		.loc 1 4044 27 view .LVU8607
 32061              	.LBE4261:
 32062              	.LBE4570:
 32063              	.LBB4571:
 32064              	.LBB4340:
 32065              	.LBB4333:
 32066 0766 FFF7FEFF 		bl	process_cmdline.part.0
 32067              	.LVL2468:
 32068 076a ADE5     		b	.L2302
 32069              	.L2500:
 32070              	.LBE4333:
 32071              	.LBE4340:
 32072              	.LBE4571:
5412:src/xeq.c     **** 					// Restore the global return stack
 32073              		.loc 1 5412 5 is_stmt 1 view .LVU8608
5412:src/xeq.c     **** 					// Restore the global return stack
 32074              		.loc 1 5412 9 is_stmt 0 view .LVU8609
 32075 076c 434B     		ldr	r3, .L2527+8
5412:src/xeq.c     **** 					// Restore the global return stack
 32076              		.loc 1 5412 8 view .LVU8610
 32077 076e 93F90120 		ldrsb	r2, [r3, #1]
5412:src/xeq.c     **** 					// Restore the global return stack
 32078              		.loc 1 5412 9 view .LVU8611
 32079 0772 5978     		ldrb	r1, [r3, #1]	@ zero_extendqisi2
5412:src/xeq.c     **** 					// Restore the global return stack
ARM GAS  /tmp/cc7LeJ71.s 			page 813


 32080              		.loc 1 5412 8 view .LVU8612
 32081 0774 8242     		cmp	r2, r0
 32082 0776 BFF611AE 		bge	.L2305
5414:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 32083              		.loc 1 5414 6 is_stmt 1 view .LVU8613
5415:src/xeq.c     **** 					// Restore private stack to normal stack
 32084              		.loc 1 5415 6 is_stmt 0 view .LVU8614
 32085 077a 3A68     		ldr	r2, [r7]
5414:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 32086              		.loc 1 5414 13 view .LVU8615
 32087 077c DFF81CE1 		ldr	lr, .L2527+40
5415:src/xeq.c     **** 					// Restore private stack to normal stack
 32088              		.loc 1 5415 6 view .LVU8616
 32089 0780 0292     		str	r2, [sp, #8]
5414:src/xeq.c     **** 					RetStkPtr = XromUserRetStkPtr;
 32090              		.loc 1 5414 13 view .LVU8617
 32091 0782 9A68     		ldr	r2, [r3, #8]
 32092 0784 CEF80020 		str	r2, [lr]
5415:src/xeq.c     **** 					// Restore private stack to normal stack
 32093              		.loc 1 5415 6 is_stmt 1 view .LVU8618
5415:src/xeq.c     **** 					// Restore private stack to normal stack
 32094              		.loc 1 5415 16 is_stmt 0 view .LVU8619
 32095 0788 029A     		ldr	r2, [sp, #8]
 32096 078a B3F80CC0 		ldrh	ip, [r3, #12]
 32097 078e A2F8E2C7 		strh	ip, [r2, #2018]	@ movhi
5417:src/xeq.c     **** 						// Need space for double precision stack
 32098              		.loc 1 5417 6 is_stmt 1 view .LVU8620
5417:src/xeq.c     **** 						// Need space for double precision stack
 32099              		.loc 1 5417 9 is_stmt 0 view .LVU8621
 32100 0792 11F0080A 		ands	r10, r1, #8
 32101 0796 00F02482 		beq	.L2306
5421:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32102              		.loc 1 5421 6 is_stmt 1 view .LVU8622
5421:src/xeq.c     **** 					if (Error == ERR_NONE) {
 32103              		.loc 1 5421 20 is_stmt 0 view .LVU8623
 32104 079a 60F3C711 		bfi	r1, r0, #7, #1
 32105 079e 5970     		strb	r1, [r3, #1]
5422:src/xeq.c     **** 						UState.mode_double = 1;
 32106              		.loc 1 5422 6 is_stmt 1 view .LVU8624
 32107              	.L2307:
5423:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 32108              		.loc 1 5423 7 view .LVU8625
5423:src/xeq.c     **** 						xcopy(get_reg_n(regX_idx), XromStack, sizeof(XromStack));
 32109              		.loc 1 5423 26 is_stmt 0 view .LVU8626
 32110 07a0 3A68     		ldr	r2, [r7]
 32111 07a2 92F8E937 		ldrb	r3, [r2, #2025]	@ zero_extendqisi2
 32112 07a6 43F04003 		orr	r3, r3, #64
 32113 07aa 82F8E937 		strb	r3, [r2, #2025]
5424:src/xeq.c     **** 					}
 32114              		.loc 1 5424 7 is_stmt 1 view .LVU8627
5424:src/xeq.c     **** 					}
 32115              		.loc 1 5424 13 is_stmt 0 view .LVU8628
 32116 07ae 6420     		movs	r0, #100
 32117 07b0 FFF7FEFF 		bl	get_reg_n
 32118              	.LVL2469:
5424:src/xeq.c     **** 					}
 32119              		.loc 1 5424 7 view .LVU8629
ARM GAS  /tmp/cc7LeJ71.s 			page 814


 32120 07b4 3249     		ldr	r1, .L2527+12
 32121 07b6 C022     		movs	r2, #192
 32122 07b8 FFF7FEFF 		bl	xcopy
 32123              	.LVL2470:
 32124 07bc EEE5     		b	.L2305
 32125              	.LVL2471:
 32126              	.L2197:
 32127              	.LBB4572:
 32128              	.LBB4152:
5249:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32129              		.loc 1 5249 7 is_stmt 1 view .LVU8630
5249:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32130              		.loc 1 5249 23 is_stmt 0 view .LVU8631
 32131 07be 9B44     		add	fp, fp, r3
 32132 07c0 9BF80530 		ldrb	r3, [fp, #5]	@ zero_extendqisi2
5249:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32133              		.loc 1 5249 10 view .LVU8632
 32134 07c4 DB06     		lsls	r3, r3, #27
 32135 07c6 11D5     		bpl	.L2199
5249:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32136              		.loc 1 5249 30 view .LVU8633
 32137 07c8 A2F16303 		sub	r3, r2, #99
 32138 07cc 0C2B     		cmp	r3, #12
 32139 07ce 0DD8     		bhi	.L2199
5249:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32140              		.loc 1 5249 69 view .LVU8634
 32141 07d0 D007     		lsls	r0, r2, #31
 32142              	.LVL2472:
5249:src/xeq.c     **** 		// Complex commands on special registers only allowed for X, Z, A, C, L & J
 32143              		.loc 1 5249 69 view .LVU8635
 32144 07d2 0BD5     		bpl	.L2199
5251:src/xeq.c     **** 	}
 32145              		.loc 1 5251 3 is_stmt 1 view .LVU8636
 32146              	.LVL2473:
 32147              	.LBB4135:
 32148              	.LBI4135:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32149              		.loc 1 546 5 view .LVU8637
 32150              	.LBB4136:
 547:src/xeq.c     **** 		Error = e;
 32151              		.loc 1 547 2 view .LVU8638
 547:src/xeq.c     **** 		Error = e;
 32152              		.loc 1 547 12 is_stmt 0 view .LVU8639
 32153 07d4 DFF8B8B0 		ldr	fp, .L2527+28
 32154 07d8 DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 32155              		.loc 1 547 5 view .LVU8640
 32156 07dc 0028     		cmp	r0, #0
 32157 07de AAD1     		bne	.L2461
 32158              	.LVL2474:
 32159              	.LBB4137:
 32160              	.LBI4137:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32161              		.loc 1 546 5 is_stmt 1 view .LVU8641
 32162              	.LBB4138:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32163              		.loc 1 548 3 view .LVU8642
ARM GAS  /tmp/cc7LeJ71.s 			page 815


 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32164              		.loc 1 548 9 is_stmt 0 view .LVU8643
 32165 07e0 0720     		movs	r0, #7
 32166 07e2 DFF8B090 		ldr	r9, .L2527+32
 32167              	.LVL2475:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32168              		.loc 1 548 9 view .LVU8644
 32169 07e6 CBF80000 		str	r0, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32170              		.loc 1 549 3 is_stmt 1 view .LVU8645
 32171 07ea 49E5     		b	.L2315
 32172              	.LVL2476:
 32173              	.L2199:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32174              		.loc 1 549 3 is_stmt 0 view .LVU8646
 32175              	.LBE4138:
 32176              	.LBE4137:
 32177              	.LBE4136:
 32178              	.LBE4135:
 32179              	.LBB4139:
5255:src/xeq.c     **** 		if (NULL != check_for_xrom_address(fp)) {
 32180              		.loc 1 5255 3 is_stmt 1 view .LVU8647
5256:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 32181              		.loc 1 5256 3 view .LVU8648
 32182              	.LBB4140:
 32183              	.LBI4140:
4504:src/xeq.c     **** {
 32184              		.loc 1 4504 24 view .LVU8649
 32185              	.LBB4141:
4506:src/xeq.c     **** 	if (xp < xrom)
 32186              		.loc 1 4506 2 view .LVU8650
4506:src/xeq.c     **** 	if (xp < xrom)
 32187              		.loc 1 4506 59 is_stmt 0 view .LVU8651
 32188 07ec 0799     		ldr	r1, [sp, #28]
4507:src/xeq.c     **** 		return NULL;
 32189              		.loc 1 4507 5 view .LVU8652
 32190 07ee 254B     		ldr	r3, .L2527+16
4506:src/xeq.c     **** 	if (xp < xrom)
 32191              		.loc 1 4506 59 view .LVU8653
 32192 07f0 21F00101 		bic	r1, r1, #1
 32193              	.LVL2477:
4507:src/xeq.c     **** 		return NULL;
 32194              		.loc 1 4507 2 is_stmt 1 view .LVU8654
4507:src/xeq.c     **** 		return NULL;
 32195              		.loc 1 4507 5 is_stmt 0 view .LVU8655
 32196 07f4 9942     		cmp	r1, r3
 32197 07f6 C0F0F680 		bcc	.L2201
4511:src/xeq.c     **** 		return NULL;
 32198              		.loc 1 4511 2 is_stmt 1 view .LVU8656
4511:src/xeq.c     **** 		return NULL;
 32199              		.loc 1 4511 17 is_stmt 0 view .LVU8657
 32200 07fa 2348     		ldr	r0, .L2527+20
 32201 07fc 0088     		ldrh	r0, [r0]
 32202 07fe 03EB4003 		add	r3, r3, r0, lsl #1
4511:src/xeq.c     **** 		return NULL;
 32203              		.loc 1 4511 5 view .LVU8658
 32204 0802 9942     		cmp	r1, r3
ARM GAS  /tmp/cc7LeJ71.s 			page 816


 32205 0804 80F0EF80 		bcs	.L2201
 32206              	.LVL2478:
4511:src/xeq.c     **** 		return NULL;
 32207              		.loc 1 4511 5 view .LVU8659
 32208              	.LBE4141:
 32209              	.LBE4140:
5256:src/xeq.c     **** #ifdef XROM_RARG_COMMANDS
 32210              		.loc 1 5256 6 view .LVU8660
 32211 0808 0029     		cmp	r1, #0
 32212 080a 00F0EC80 		beq	.L2201
5268:src/xeq.c     **** 			if (XromUserPc == 0)
 32213              		.loc 1 5268 4 is_stmt 1 view .LVU8661
 32214              	.LVL2479:
 32215              	.LBB4142:
 32216              	.LBI4142:
2214:src/xeq.c     **** 	return find_opcode_from(pc, RARG(RARG_LBL, arg), flags);
 32217              		.loc 1 2214 14 view .LVU8662
 32218              	.LBB4143:
2215:src/xeq.c     **** }
 32219              		.loc 1 2215 2 view .LVU8663
 32220              	.LBE4143:
 32221              	.LBE4142:
5268:src/xeq.c     **** 			if (XromUserPc == 0)
 32222              		.loc 1 5268 33 is_stmt 0 view .LVU8664
 32223 080e 3B68     		ldr	r3, [r7]
 32224              	.LBB4145:
 32225              	.LBB4144:
2215:src/xeq.c     **** }
 32226              		.loc 1 2215 9 view .LVU8665
 32227 0810 42F4C441 		orr	r1, r2, #25088
 32228 0814 B3F8E007 		ldrh	r0, [r3, #2016]
 32229 0818 0322     		movs	r2, #3
 32230              	.LVL2480:
2215:src/xeq.c     **** }
 32231              		.loc 1 2215 9 view .LVU8666
 32232 081a FFF7FEFF 		bl	find_opcode_from
 32233              	.LVL2481:
2215:src/xeq.c     **** }
 32234              		.loc 1 2215 9 view .LVU8667
 32235              	.LBE4144:
 32236              	.LBE4145:
5268:src/xeq.c     **** 			if (XromUserPc == 0)
 32237              		.loc 1 5268 15 view .LVU8668
 32238 081e 1B4B     		ldr	r3, .L2527+24
 32239              	.LVL2482:
5268:src/xeq.c     **** 			if (XromUserPc == 0)
 32240              		.loc 1 5268 15 view .LVU8669
 32241 0820 1860     		str	r0, [r3]
5269:src/xeq.c     **** 				return;
 32242              		.loc 1 5269 4 is_stmt 1 view .LVU8670
5269:src/xeq.c     **** 				return;
 32243              		.loc 1 5269 7 is_stmt 0 view .LVU8671
 32244 0822 0028     		cmp	r0, #0
 32245 0824 9AD0     		beq	.L2176
5271:src/xeq.c     **** 				clrretstk();
 32246              		.loc 1 5271 4 is_stmt 1 view .LVU8672
5271:src/xeq.c     **** 				clrretstk();
ARM GAS  /tmp/cc7LeJ71.s 			page 817


 32247              		.loc 1 5271 8 is_stmt 0 view .LVU8673
 32248 0826 DFF86C90 		ldr	r9, .L2527+32
 32249              	.LVL2483:
5271:src/xeq.c     **** 				clrretstk();
 32250              		.loc 1 5271 7 view .LVU8674
 32251 082a D9F80030 		ldr	r3, [r9]
 32252 082e 43B9     		cbnz	r3, .L2203
5272:src/xeq.c     **** #endif
 32253              		.loc 1 5272 5 is_stmt 1 view .LVU8675
 32254              	.LBB4146:
 32255              	.LBI4146:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 32256              		.loc 1 1606 6 view .LVU8676
 32257              	.LBB4147:
1607:src/xeq.c     **** }
 32258              		.loc 1 1607 2 view .LVU8677
1607:src/xeq.c     **** }
 32259              		.loc 1 1607 14 is_stmt 0 view .LVU8678
 32260 0830 3A68     		ldr	r2, [r7]
1607:src/xeq.c     **** }
 32261              		.loc 1 1607 24 view .LVU8679
 32262 0832 B2F8DE17 		ldrh	r1, [r2, #2014]
1607:src/xeq.c     **** }
 32263              		.loc 1 1607 12 view .LVU8680
 32264 0836 A2F8E237 		strh	r3, [r2, #2018]	@ movhi
1607:src/xeq.c     **** }
 32265              		.loc 1 1607 24 view .LVU8681
 32266 083a 63F34F11 		bfi	r1, r3, #5, #11
 32267 083e A2F8DE17 		strh	r1, [r2, #2014]	@ movhi
 32268              	.LVL2484:
 32269              	.L2203:
1607:src/xeq.c     **** }
 32270              		.loc 1 1607 24 view .LVU8682
 32271              	.LBE4147:
 32272              	.LBE4146:
5274:src/xeq.c     **** 			return;
 32273              		.loc 1 5274 4 is_stmt 1 view .LVU8683
 32274 0842 DFF84CB0 		ldr	fp, .L2527+28
 32275 0846 0798     		ldr	r0, [sp, #28]
 32276 0848 FFF7FEFF 		bl	dispatch_xrom
 32277              	.LVL2485:
5275:src/xeq.c     **** 		}
 32278              		.loc 1 5275 4 view .LVU8684
 32279 084c DBF80030 		ldr	r3, [fp]
 32280 0850 C1E4     		b	.L2179
 32281              	.LVL2486:
 32282              	.L2194:
5275:src/xeq.c     **** 		}
 32283              		.loc 1 5275 4 is_stmt 0 view .LVU8685
 32284              	.LBE4139:
5239:src/xeq.c     **** 		if (LocalRegs == 0)
 32285              		.loc 1 5239 7 is_stmt 1 view .LVU8686
5239:src/xeq.c     **** 		if (LocalRegs == 0)
 32286              		.loc 1 5239 10 is_stmt 0 view .LVU8687
 32287 0852 4906     		lsls	r1, r1, #25
 32288 0854 73D5     		bpl	.L2509
5240:src/xeq.c     **** 			lim = NUMFLG - 1;
ARM GAS  /tmp/cc7LeJ71.s 			page 818


 32289              		.loc 1 5240 3 is_stmt 1 view .LVU8688
5240:src/xeq.c     **** 			lim = NUMFLG - 1;
 32290              		.loc 1 5240 17 is_stmt 0 view .LVU8689
 32291 0856 3968     		ldr	r1, [r7]
 32292 0858 B1F8DE17 		ldrh	r1, [r1, #2014]
 32293 085c 21F01F01 		bic	r1, r1, #31
5240:src/xeq.c     **** 			lim = NUMFLG - 1;
 32294              		.loc 1 5240 6 view .LVU8690
 32295 0860 89B2     		uxth	r1, r1
5243:src/xeq.c     **** 	}
 32296              		.loc 1 5243 8 view .LVU8691
 32297 0862 0029     		cmp	r1, #0
 32298 0864 0CBF     		ite	eq
 32299 0866 6F20     		moveq	r0, #111
 32300 0868 7F20     		movne	r0, #127
 32301 086a 5BE7     		b	.L2195
 32302              	.LVL2487:
 32303              	.L2187:
5232:src/xeq.c     **** 		}
 32304              		.loc 1 5232 4 is_stmt 1 view .LVU8692
5232:src/xeq.c     **** 		}
 32305              		.loc 1 5232 8 is_stmt 0 view .LVU8693
 32306 086c 42F08002 		orr	r2, r2, #128
 32307              	.LVL2488:
5232:src/xeq.c     **** 		}
 32308              		.loc 1 5232 8 view .LVU8694
 32309 0870 49E7     		b	.L2186
 32310              	.L2528:
 32311 0872 00BF     		.align	2
 32312              	.L2527:
 32313 0874 00000000 		.word	monfuncs
 32314 0878 00000000 		.word	niladics
 32315 087c 00000000 		.word	XromParams
 32316 0880 00000000 		.word	XromLocal
 32317 0884 00000000 		.word	xrom
 32318 0888 00000000 		.word	xrom_size
 32319 088c 00000000 		.word	XromUserPc
 32320 0890 00000000 		.word	Error
 32321 0894 00000000 		.word	Running
 32322 0898 00000000 		.word	XromRunning
 32323 089c 00000000 		.word	RetStk
 32324              	.LVL2489:
 32325              	.L2254:
5232:src/xeq.c     **** 		}
 32326              		.loc 1 5232 8 view .LVU8695
 32327              	.LBE4152:
 32328              	.LBE4572:
 32329              	.LBB4573:
 32330              	.LBB4561:
4653:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32331              		.loc 1 4653 3 is_stmt 1 view .LVU8696
4653:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32332              		.loc 1 4653 3 view .LVU8697
 32333              	.LBB4547:
 32334              	.LBI4547:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32335              		.loc 1 546 5 view .LVU8698
ARM GAS  /tmp/cc7LeJ71.s 			page 819


 32336              	.LBB4548:
 547:src/xeq.c     **** 		Error = e;
 32337              		.loc 1 547 2 view .LVU8699
 547:src/xeq.c     **** 		Error = e;
 32338              		.loc 1 547 12 is_stmt 0 view .LVU8700
 32339 08a0 DFF864B3 		ldr	fp, .L2529+16
 547:src/xeq.c     **** 		Error = e;
 32340              		.loc 1 547 5 view .LVU8701
 32341 08a4 DBF80030 		ldr	r3, [fp]
 32342 08a8 13B9     		cbnz	r3, .L2262
 32343              	.LVL2490:
 32344              	.LBB4549:
 32345              	.LBI4549:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32346              		.loc 1 546 5 is_stmt 1 view .LVU8702
 32347              	.LBB4550:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32348              		.loc 1 548 3 view .LVU8703
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32349              		.loc 1 548 9 is_stmt 0 view .LVU8704
 32350 08aa 0323     		movs	r3, #3
 32351 08ac CBF80030 		str	r3, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32352              		.loc 1 549 3 is_stmt 1 view .LVU8705
 32353              	.LVL2491:
 32354              	.L2262:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32355              		.loc 1 549 3 is_stmt 0 view .LVU8706
 32356              	.LBE4550:
 32357              	.LBE4549:
 32358              	.LBE4548:
 32359              	.LBE4547:
4653:src/xeq.c     **** #ifdef INCLUDE_C_LOCK
 32360              		.loc 1 4653 3 is_stmt 1 view .LVU8707
4655:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32361              		.loc 1 4655 2 view .LVU8708
4655:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32362              		.loc 1 4655 6 is_stmt 0 view .LVU8709
 32363 08b0 3B68     		ldr	r3, [r7]
4655:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 32364              		.loc 1 4655 5 view .LVU8710
 32365 08b2 93F9DD27 		ldrsb	r2, [r3, #2013]
 32366 08b6 002A     		cmp	r2, #0
 32367 08b8 09DB     		blt	.L2472
 32368              	.L2316:
4658:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32369              		.loc 1 4658 60 view .LVU8711
 32370 08ba 93F8E427 		ldrb	r2, [r3, #2020]	@ zero_extendqisi2
4658:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32371              		.loc 1 4658 56 view .LVU8712
 32372 08be 5207     		lsls	r2, r2, #29
 32373 08c0 7FF54EAF 		bpl	.L2468
4658:src/xeq.c     **** 	  set_lift(); // don't turn on lift after CENTER (complex enter) in C_LOCK mode
 32374              		.loc 1 4658 60 view .LVU8713
 32375 08c4 93F8DE37 		ldrb	r3, [r3, #2014]	@ zero_extendqisi2
 32376 08c8 5B07     		lsls	r3, r3, #29
 32377 08ca 7FF549AF 		bpl	.L2468
ARM GAS  /tmp/cc7LeJ71.s 			page 820


 32378              	.L2472:
4659:src/xeq.c     **** 	}
 32379              		.loc 1 4659 4 is_stmt 1 view .LVU8714
 32380              	.LBB4551:
 32381              	.LBI4551:
 767:src/xeq.c     ****     State2.state_lift = 1;
 32382              		.loc 1 767 6 view .LVU8715
 32383              	.LBB4552:
 768:src/xeq.c     **** }
 32384              		.loc 1 768 5 view .LVU8716
 768:src/xeq.c     **** }
 32385              		.loc 1 768 23 is_stmt 0 view .LVU8717
 32386 08ce E27D     		ldrb	r2, [r4, #23]	@ zero_extendqisi2
 32387 08d0 DBF80030 		ldr	r3, [fp]
 32388 08d4 42F04002 		orr	r2, r2, #64
 32389 08d8 E275     		strb	r2, [r4, #23]
 769:src/xeq.c     **** 
 32390              		.loc 1 769 1 view .LVU8718
 32391 08da 7CE4     		b	.L2179
 32392              	.LVL2492:
 32393              	.L2498:
 769:src/xeq.c     **** 
 32394              		.loc 1 769 1 view .LVU8719
 32395              	.LBE4552:
 32396              	.LBE4551:
 32397              	.LBE4561:
 32398              	.LBE4573:
 32399              	.LBB4574:
 32400              	.LBB4318:
4753:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32401              		.loc 1 4753 3 is_stmt 1 view .LVU8720
4753:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32402              		.loc 1 4753 7 is_stmt 0 view .LVU8721
 32403 08dc 3B68     		ldr	r3, [r7]
 32404 08de 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4753:src/xeq.c     **** 			if (! isNULL(dyfuncs[f].dydint)) {
 32405              		.loc 1 4753 6 view .LVU8722
 32406 08e2 D907     		lsls	r1, r3, #31
 32407 08e4 40F19481 		bpl	.L2277
4754:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32408              		.loc 1 4754 4 is_stmt 1 view .LVU8723
4754:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32409              		.loc 1 4754 10 is_stmt 0 view .LVU8724
 32410 08e8 C34B     		ldr	r3, .L2529
 32411 08ea 02EB4202 		add	r2, r2, r2, lsl #1
 32412              	.LVL2493:
4754:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32413              		.loc 1 4754 10 view .LVU8725
 32414 08ee 03EBC202 		add	r2, r3, r2, lsl #3
 32415 08f2 D2F80890 		ldr	r9, [r2, #8]
4754:src/xeq.c     **** 				FP_DYADIC_INT fp = (FP_DYADIC_INT) EXPAND_ADDRESS(dyfuncs[f].dydint);
 32416              		.loc 1 4754 7 view .LVU8726
 32417 08f6 B9F1000F 		cmp	r9, #0
 32418 08fa 00F05881 		beq	.L2288
 32419              	.LBB4291:
4755:src/xeq.c     **** 				if (dispatch_xrom(fp))
 32420              		.loc 1 4755 5 is_stmt 1 view .LVU8727
ARM GAS  /tmp/cc7LeJ71.s 			page 821


 32421              	.LVL2494:
4756:src/xeq.c     **** 					return;
 32422              		.loc 1 4756 5 view .LVU8728
4756:src/xeq.c     **** 					return;
 32423              		.loc 1 4756 9 is_stmt 0 view .LVU8729
 32424 08fe 4846     		mov	r0, r9
 32425 0900 FFF7FEFF 		bl	dispatch_xrom
 32426              	.LVL2495:
4756:src/xeq.c     **** 					return;
 32427              		.loc 1 4756 8 view .LVU8730
 32428 0904 0028     		cmp	r0, #0
 32429 0906 7FF429AF 		bne	.L2176
 32430              	.LBB4292:
4759:src/xeq.c     **** 					long long int y = get_reg_n_int(regY_idx);
 32431              		.loc 1 4759 6 is_stmt 1 view .LVU8731
 32432              	.LBB4293:
 32433              	.LBI4293:
1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 32434              		.loc 1 1442 15 view .LVU8732
 32435              	.LBB4294:
1443:src/xeq.c     **** }
 32436              		.loc 1 1443 2 view .LVU8733
1443:src/xeq.c     **** }
 32437              		.loc 1 1443 9 is_stmt 0 view .LVU8734
 32438 090a 6420     		movs	r0, #100
 32439 090c FFF7FEFF 		bl	get_reg_n_int
 32440              	.LVL2496:
 32441 0910 0790     		str	r0, [sp, #28]
 32442              	.LBE4294:
 32443              	.LBE4293:
4760:src/xeq.c     **** 					x = fp(y, x);
 32444              		.loc 1 4760 24 view .LVU8735
 32445 0912 6520     		movs	r0, #101
 32446              	.LBB4296:
 32447              	.LBB4295:
1443:src/xeq.c     **** }
 32448              		.loc 1 1443 9 view .LVU8736
 32449 0914 0691     		str	r1, [sp, #24]
 32450              	.LVL2497:
1443:src/xeq.c     **** }
 32451              		.loc 1 1443 9 view .LVU8737
 32452              	.LBE4295:
 32453              	.LBE4296:
4760:src/xeq.c     **** 					x = fp(y, x);
 32454              		.loc 1 4760 6 is_stmt 1 view .LVU8738
4760:src/xeq.c     **** 					x = fp(y, x);
 32455              		.loc 1 4760 24 is_stmt 0 view .LVU8739
 32456 0916 FFF7FEFF 		bl	get_reg_n_int
 32457              	.LVL2498:
4761:src/xeq.c     **** 					setlastX();
 32458              		.loc 1 4761 6 is_stmt 1 view .LVU8740
4761:src/xeq.c     **** 					setlastX();
 32459              		.loc 1 4761 10 is_stmt 0 view .LVU8741
 32460 091a DDE90632 		ldrd	r3, r2, [sp, #24]
 32461 091e C847     		blx	r9
 32462              	.LVL2499:
4761:src/xeq.c     **** 					setlastX();
ARM GAS  /tmp/cc7LeJ71.s 			page 822


 32463              		.loc 1 4761 10 view .LVU8742
 32464 0920 8146     		mov	r9, r0
 32465              	.LVL2500:
4761:src/xeq.c     **** 					setlastX();
 32466              		.loc 1 4761 10 view .LVU8743
 32467 0922 8A46     		mov	r10, r1
 32468              	.LVL2501:
4762:src/xeq.c     **** 					lower();
 32469              		.loc 1 4762 6 is_stmt 1 view .LVU8744
 32470              	.LBB4297:
 32471              	.LBI4297:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32472              		.loc 1 792 6 view .LVU8745
 32473              	.LBB4298:
 793:src/xeq.c     **** }
 32474              		.loc 1 793 2 view .LVU8746
 32475 0924 6C20     		movs	r0, #108
 32476              	.LVL2502:
 793:src/xeq.c     **** }
 32477              		.loc 1 793 2 is_stmt 0 view .LVU8747
 32478 0926 6421     		movs	r1, #100
 32479              	.LVL2503:
 793:src/xeq.c     **** }
 32480              		.loc 1 793 2 view .LVU8748
 32481 0928 DFF8DCB2 		ldr	fp, .L2529+16
 32482 092c FFF7FEFF 		bl	copyreg_n
 32483              	.LVL2504:
 32484              	.LBE4298:
 32485              	.LBE4297:
4763:src/xeq.c     **** 					setX_int(x);
 32486              		.loc 1 4763 6 is_stmt 1 view .LVU8749
 32487 0930 F3E5     		b	.L2471
 32488              	.LVL2505:
 32489              	.L2198:
4763:src/xeq.c     **** 					setX_int(x);
 32490              		.loc 1 4763 6 is_stmt 0 view .LVU8750
 32491              	.LBE4292:
 32492              	.LBE4291:
 32493              	.LBE4318:
 32494              	.LBE4574:
 32495              	.LBB4575:
 32496              	.LBB4153:
 32497              	.LBB4148:
 32498              	.LBB4134:
 32499              	.LBB4132:
 32500              	.LBI4132:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32501              		.loc 1 546 5 is_stmt 1 view .LVU8751
 32502              	.LBB4133:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32503              		.loc 1 548 3 view .LVU8752
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 32504              		.loc 1 548 9 is_stmt 0 view .LVU8753
 32505 0932 0820     		movs	r0, #8
 32506 0934 DFF8D492 		ldr	r9, .L2529+20
 32507              	.LVL2506:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
ARM GAS  /tmp/cc7LeJ71.s 			page 823


 32508              		.loc 1 548 9 view .LVU8754
 32509 0938 CBF80000 		str	r0, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32510              		.loc 1 549 3 is_stmt 1 view .LVU8755
 32511 093c A0E4     		b	.L2315
 32512              	.LVL2507:
 32513              	.L2509:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 32514              		.loc 1 549 3 is_stmt 0 view .LVU8756
 32515              	.LBE4133:
 32516              	.LBE4132:
 32517              	.LBE4134:
 32518              	.LBE4148:
5195:src/xeq.c     **** 
 32519              		.loc 1 5195 15 view .LVU8757
 32520 093e 0698     		ldr	r0, [sp, #24]
 32521 0940 F0E6     		b	.L2195
 32522              	.LVL2508:
 32523              	.L2497:
5195:src/xeq.c     **** 
 32524              		.loc 1 5195 15 view .LVU8758
 32525              	.LBE4153:
 32526              	.LBE4575:
 32527              	.LBB4576:
 32528              	.LBB4191:
 32529              	.LBB4186:
5302:src/xeq.c     **** 			if (XromUserPc != 0) {
 32530              		.loc 1 5302 4 is_stmt 1 view .LVU8759
5302:src/xeq.c     **** 			if (XromUserPc != 0) {
 32531              		.loc 1 5302 17 is_stmt 0 view .LVU8760
 32532 0942 0121     		movs	r1, #1
 32533 0944 2846     		mov	r0, r5
 32534 0946 0693     		str	r3, [sp, #24]
 32535 0948 FFF7FEFF 		bl	findmultilbl
 32536              	.LVL2509:
5302:src/xeq.c     **** 			if (XromUserPc != 0) {
 32537              		.loc 1 5302 15 view .LVU8761
 32538 094c AB4A     		ldr	r2, .L2529+4
5303:src/xeq.c     **** 				if (! Running)
 32539              		.loc 1 5303 7 view .LVU8762
 32540 094e 069B     		ldr	r3, [sp, #24]
5302:src/xeq.c     **** 			if (XromUserPc != 0) {
 32541              		.loc 1 5302 15 view .LVU8763
 32542 0950 1060     		str	r0, [r2]
5303:src/xeq.c     **** 				if (! Running)
 32543              		.loc 1 5303 4 is_stmt 1 view .LVU8764
5303:src/xeq.c     **** 				if (! Running)
 32544              		.loc 1 5303 7 is_stmt 0 view .LVU8765
 32545 0952 0028     		cmp	r0, #0
 32546 0954 3FF402AF 		beq	.L2176
 32547              	.LVL2510:
5304:src/xeq.c     **** 					clrretstk();
 32548              		.loc 1 5304 5 is_stmt 1 view .LVU8766
5304:src/xeq.c     **** 					clrretstk();
 32549              		.loc 1 5304 9 is_stmt 0 view .LVU8767
 32550 0958 DFF8B092 		ldr	r9, .L2529+20
 32551              	.LVL2511:
ARM GAS  /tmp/cc7LeJ71.s 			page 824


5304:src/xeq.c     **** 					clrretstk();
 32552              		.loc 1 5304 8 view .LVU8768
 32553 095c D9F80020 		ldr	r2, [r9]
 32554 0960 42B9     		cbnz	r2, .L2180
5305:src/xeq.c     **** 				dispatch_xrom(fp);
 32555              		.loc 1 5305 6 is_stmt 1 view .LVU8769
 32556              	.LBB4177:
 32557              	.LBI4177:
1606:src/xeq.c     **** 	RetStkPtr = LocalRegs = 0;
 32558              		.loc 1 1606 6 view .LVU8770
 32559              	.LBB4178:
1607:src/xeq.c     **** }
 32560              		.loc 1 1607 2 view .LVU8771
1607:src/xeq.c     **** }
 32561              		.loc 1 1607 14 is_stmt 0 view .LVU8772
 32562 0962 3968     		ldr	r1, [r7]
1607:src/xeq.c     **** }
 32563              		.loc 1 1607 24 view .LVU8773
 32564 0964 B1F8DE07 		ldrh	r0, [r1, #2014]
1607:src/xeq.c     **** }
 32565              		.loc 1 1607 12 view .LVU8774
 32566 0968 A1F8E227 		strh	r2, [r1, #2018]	@ movhi
1607:src/xeq.c     **** }
 32567              		.loc 1 1607 24 view .LVU8775
 32568 096c 62F34F10 		bfi	r0, r2, #5, #11
 32569 0970 A1F8DE07 		strh	r0, [r1, #2014]	@ movhi
 32570              	.LVL2512:
 32571              	.L2180:
1607:src/xeq.c     **** }
 32572              		.loc 1 1607 24 view .LVU8776
 32573              	.LBE4178:
 32574              	.LBE4177:
5306:src/xeq.c     **** 			}
 32575              		.loc 1 5306 5 is_stmt 1 view .LVU8777
 32576 0974 DFF890B2 		ldr	fp, .L2529+16
 32577 0978 1846     		mov	r0, r3
 32578 097a FFF7FEFF 		bl	dispatch_xrom
 32579              	.LVL2513:
 32580 097e DBF80030 		ldr	r3, [fp]
 32581 0982 28E4     		b	.L2179
 32582              	.LVL2514:
 32583              	.L2222:
5306:src/xeq.c     **** 			}
 32584              		.loc 1 5306 5 is_stmt 0 view .LVU8778
 32585              	.LBE4186:
 32586              	.LBE4191:
 32587              	.LBE4576:
 32588              	.LBB4577:
 32589              	.LBB4262:
3930:src/xeq.c     **** 		break;
 32590              		.loc 1 3930 3 is_stmt 1 view .LVU8779
 32591 0984 DFF880B2 		ldr	fp, .L2529+16
 32592 0988 A9F10500 		sub	r0, r9, #5
 32593 098c FFF7FEFF 		bl	digit
 32594              	.LVL2515:
3931:src/xeq.c     **** 
 32595              		.loc 1 3931 3 view .LVU8780
ARM GAS  /tmp/cc7LeJ71.s 			page 825


 32596 0990 DBF80030 		ldr	r3, [fp]
 32597 0994 1FE4     		b	.L2179
 32598              	.LVL2516:
 32599              	.L2501:
3931:src/xeq.c     **** 
 32600              		.loc 1 3931 3 is_stmt 0 view .LVU8781
 32601              	.LBE4262:
 32602              	.LBE4577:
 32603              	.LBB4578:
 32604              	.LBB4395:
 32605              	.LBB4384:
 32606              	.LBB4367:
 32607              	.LBB4360:
 32608 0996 FFF7FEFF 		bl	process_cmdline.part.0
 32609              	.LVL2517:
 32610 099a 1AE5     		b	.L2296
 32611              	.LVL2518:
 32612              	.L2505:
3931:src/xeq.c     **** 
 32613              		.loc 1 3931 3 view .LVU8782
 32614              	.LBE4360:
 32615              	.LBE4367:
 32616              	.LBE4384:
 32617              	.LBE4395:
 32618              	.LBE4578:
 32619              	.LBB4579:
 32620              	.LBB4562:
 32621              	.LBB4553:
 32622              	.LBB4534:
 32623 099c FFF7FEFF 		bl	process_cmdline.part.0
 32624              	.LVL2519:
 32625 09a0 4CE6     		b	.L2253
 32626              	.LVL2520:
 32627              	.L2504:
3931:src/xeq.c     **** 
 32628              		.loc 1 3931 3 view .LVU8783
 32629              	.LBE4534:
 32630              	.LBE4553:
 32631              	.LBE4562:
 32632              	.LBE4579:
 32633              	.LBB4580:
 32634              	.LBB4524:
 32635              	.LBB4511:
 32636              	.LBB4500:
 32637              	.LBB4493:
 32638 09a2 FFF7FEFF 		bl	process_cmdline.part.0
 32639              	.LVL2521:
 32640 09a6 11E6     		b	.L2267
 32641              	.LVL2522:
 32642              	.L2503:
3931:src/xeq.c     **** 
 32643              		.loc 1 3931 3 view .LVU8784
 32644              	.LBE4493:
 32645              	.LBE4500:
 32646              	.LBE4511:
 32647              	.LBE4524:
 32648              	.LBE4580:
ARM GAS  /tmp/cc7LeJ71.s 			page 826


 32649              	.LBB4581:
 32650              	.LBB4482:
 32651              	.LBB4477:
 32652              	.LBB4462:
 32653              	.LBB4455:
 32654 09a8 FFF7FEFF 		bl	process_cmdline.part.0
 32655              	.LVL2523:
 32656 09ac D4E5     		b	.L2291
 32657              	.LVL2524:
 32658              	.L2502:
3931:src/xeq.c     **** 
 32659              		.loc 1 3931 3 view .LVU8785
 32660              	.LBE4455:
 32661              	.LBE4462:
 32662              	.LBE4477:
 32663              	.LBE4482:
 32664              	.LBE4581:
 32665              	.LBB4582:
 32666              	.LBB4443:
 32667              	.LBB4426:
 32668              	.LBB4413:
 32669              	.LBB4406:
 32670 09ae FFF7FEFF 		bl	process_cmdline.part.0
 32671              	.LVL2525:
 32672 09b2 77E5     		b	.L2283
 32673              	.LVL2526:
 32674              	.L2219:
3931:src/xeq.c     **** 
 32675              		.loc 1 3931 3 view .LVU8786
 32676              	.LBE4406:
 32677              	.LBE4413:
 32678              	.LBE4426:
 32679              	.LBE4443:
 32680              	.LBE4582:
 32681              	.LBB4583:
 32682              	.LBB4263:
4085:src/xeq.c     **** 		break;
 32683              		.loc 1 4085 3 is_stmt 1 view .LVU8787
 32684 09b4 DFF850B2 		ldr	fp, .L2529+16
4085:src/xeq.c     **** 		break;
 32685              		.loc 1 4085 53 is_stmt 0 view .LVU8788
 32686 09b8 A5F11E01 		sub	r1, r5, #30
4085:src/xeq.c     **** 		break;
 32687              		.loc 1 4085 3 view .LVU8789
 32688 09bc C9B2     		uxtb	r1, r1
 32689 09be 40F61C00 		movw	r0, #2076
 32690 09c2 FFF7FEFF 		bl	do_tst
 32691              	.LVL2527:
4086:src/xeq.c     **** 	case OP_Zeq1:	case OP_Zne1:
 32692              		.loc 1 4086 3 is_stmt 1 view .LVU8790
 32693 09c6 DBF80030 		ldr	r3, [fp]
 32694 09ca 04E4     		b	.L2179
 32695              	.L2220:
4076:src/xeq.c     **** 		break;
 32696              		.loc 1 4076 3 view .LVU8791
 32697 09cc DFF838B2 		ldr	fp, .L2529+16
4076:src/xeq.c     **** 		break;
ARM GAS  /tmp/cc7LeJ71.s 			page 827


 32698              		.loc 1 4076 54 is_stmt 0 view .LVU8792
 32699 09d0 A5F11701 		sub	r1, r5, #23
4076:src/xeq.c     **** 		break;
 32700              		.loc 1 4076 3 view .LVU8793
 32701 09d4 C9B2     		uxtb	r1, r1
 32702 09d6 40F61B00 		movw	r0, #2075
 32703 09da FFF7FEFF 		bl	do_tst
 32704              	.LVL2528:
4077:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 32705              		.loc 1 4077 3 is_stmt 1 view .LVU8794
 32706 09de DBF80030 		ldr	r3, [fp]
 32707 09e2 FFF7F8BB 		b	.L2179
 32708              	.LVL2529:
 32709              	.L2201:
4077:src/xeq.c     **** 	case OP_Zeq0: case OP_Zne0:
 32710              		.loc 1 4077 3 is_stmt 0 view .LVU8795
 32711              	.LBE4263:
 32712              	.LBE4583:
 32713              	.LBB4584:
 32714              	.LBB4154:
 32715              	.LBB4149:
5278:src/xeq.c     **** 		}
 32716              		.loc 1 5278 4 is_stmt 1 view .LVU8796
 32717 09e6 079B     		ldr	r3, [sp, #28]
 32718 09e8 1046     		mov	r0, r2
 32719 09ea 4946     		mov	r1, r9
 32720 09ec 9847     		blx	r3
 32721              	.LVL2530:
5280:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 32722              		.loc 1 5280 3 view .LVU8797
5280:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 32723              		.loc 1 5280 6 is_stmt 0 view .LVU8798
 32724 09ee B9F1840F 		cmp	r9, #132
 32725 09f2 7FF4E8AB 		bne	.L2467
 32726 09f6 B1E6     		b	.L2176
 32727              	.LVL2531:
 32728              	.L2218:
5280:src/xeq.c     **** 			// xOUT controls stack lift itself, set it for all other commands
 32729              		.loc 1 5280 6 view .LVU8799
 32730              	.LBE4149:
 32731              	.LBE4154:
 32732              	.LBE4584:
 32733              	.LBB4585:
 32734              	.LBB4264:
4079:src/xeq.c     **** 		break;
 32735              		.loc 1 4079 3 is_stmt 1 view .LVU8800
 32736 09f8 8149     		ldr	r1, .L2529+8
 32737 09fa DFF80CB2 		ldr	fp, .L2529+16
4079:src/xeq.c     **** 		break;
 32738              		.loc 1 4079 49 is_stmt 0 view .LVU8801
 32739 09fe A5F12502 		sub	r2, r5, #37
4079:src/xeq.c     **** 		break;
 32740              		.loc 1 4079 3 view .LVU8802
 32741 0a02 0846     		mov	r0, r1
 32742 0a04 D2B2     		uxtb	r2, r2
 32743 0a06 FFF7FEFF 		bl	do_ztst
 32744              	.LVL2532:
ARM GAS  /tmp/cc7LeJ71.s 			page 828


4080:src/xeq.c     **** 
 32745              		.loc 1 4080 3 is_stmt 1 view .LVU8803
 32746 0a0a DBF80030 		ldr	r3, [fp]
 32747 0a0e FFF7E2BB 		b	.L2179
 32748              	.L2221:
4058:src/xeq.c     **** 			bad_mode_error();
 32749              		.loc 1 4058 3 view .LVU8804
4058:src/xeq.c     **** 			bad_mode_error();
 32750              		.loc 1 4058 7 is_stmt 0 view .LVU8805
 32751 0a12 3B68     		ldr	r3, [r7]
 32752 0a14 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4058:src/xeq.c     **** 			bad_mode_error();
 32753              		.loc 1 4058 6 view .LVU8806
 32754 0a18 DB07     		lsls	r3, r3, #31
 32755 0a1a 00F1C880 		bmi	.L2288
4062:src/xeq.c     **** 		clr_lift();
 32756              		.loc 1 4062 3 is_stmt 1 view .LVU8807
 32757              	.LBB4198:
 32758              	.LBI4198:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 32759              		.loc 1 1226 6 view .LVU8808
 32760              	.LBB4199:
1227:src/xeq.c     **** 
 32761              		.loc 1 1227 2 view .LVU8809
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32762              		.loc 1 1229 2 view .LVU8810
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32763              		.loc 1 1229 5 is_stmt 0 view .LVU8811
 32764 0a1e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32765 0a20 002B     		cmp	r3, #0
 32766 0a22 40F0F281 		bne	.L2510
 32767              	.L2250:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32768              		.loc 1 1229 5 view .LVU8812
 32769              	.LBE4199:
 32770              	.LBE4198:
4063:src/xeq.c     **** 		setlastX();
 32771              		.loc 1 4063 3 is_stmt 1 view .LVU8813
 32772              	.LBB4201:
 32773              	.LBI4201:
 771:src/xeq.c     ****     State2.state_lift = 0;
 32774              		.loc 1 771 13 view .LVU8814
 32775              	.LBB4202:
 772:src/xeq.c     **** }
 32776              		.loc 1 772 5 view .LVU8815
 772:src/xeq.c     **** }
 32777              		.loc 1 772 23 is_stmt 0 view .LVU8816
 32778 0a26 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32779              	.LBE4202:
 32780              	.LBE4201:
 32781              	.LBB4205:
 32782              	.LBB4206:
 793:src/xeq.c     **** }
 32783              		.loc 1 793 2 view .LVU8817
 32784 0a28 6421     		movs	r1, #100
 32785              	.LBE4206:
 32786              	.LBE4205:
ARM GAS  /tmp/cc7LeJ71.s 			page 829


 32787              	.LBB4209:
 32788              	.LBB4203:
 772:src/xeq.c     **** }
 32789              		.loc 1 772 23 view .LVU8818
 32790 0a2a 6FF38613 		bfc	r3, #6, #1
 32791              	.LBE4203:
 32792              	.LBE4209:
 32793              	.LBB4210:
 32794              	.LBB4207:
 793:src/xeq.c     **** }
 32795              		.loc 1 793 2 view .LVU8819
 32796 0a2e 6C20     		movs	r0, #108
 32797              	.LBE4207:
 32798              	.LBE4210:
 32799              	.LBB4211:
 32800              	.LBB4204:
 772:src/xeq.c     **** }
 32801              		.loc 1 772 23 view .LVU8820
 32802 0a30 E375     		strb	r3, [r4, #23]
 32803              	.LBE4204:
 32804              	.LBE4211:
4064:src/xeq.c     **** 		if (opm == OP_SIGMAPLUS)
 32805              		.loc 1 4064 3 is_stmt 1 view .LVU8821
 32806              	.LBB4212:
 32807              	.LBI4205:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 32808              		.loc 1 792 6 view .LVU8822
 32809              	.LBB4208:
 793:src/xeq.c     **** }
 32810              		.loc 1 793 2 view .LVU8823
 32811 0a32 FFF7FEFF 		bl	copyreg_n
 32812              	.LVL2533:
 32813              	.LBE4208:
 32814              	.LBE4212:
4065:src/xeq.c     **** 			sigma_plus();
 32815              		.loc 1 4065 3 view .LVU8824
4065:src/xeq.c     **** 			sigma_plus();
 32816              		.loc 1 4065 6 is_stmt 0 view .LVU8825
 32817 0a36 B9F1150F 		cmp	r9, #21
 32818 0a3a 00F0E381 		beq	.L2511
4068:src/xeq.c     **** 		sigma_val(OP_sigmaN);
 32819              		.loc 1 4068 4 is_stmt 1 view .LVU8826
 32820 0a3e FFF7FEFF 		bl	sigma_minus
 32821              	.LVL2534:
 32822              	.L2252:
4069:src/xeq.c     **** 		break;
 32823              		.loc 1 4069 3 view .LVU8827
 32824 0a42 DFF8C4B1 		ldr	fp, .L2529+16
 32825 0a46 1D20     		movs	r0, #29
 32826 0a48 FFF7FEFF 		bl	sigma_val
 32827              	.LVL2535:
4070:src/xeq.c     **** 
 32828              		.loc 1 4070 3 view .LVU8828
 32829 0a4c DBF80030 		ldr	r3, [fp]
 32830 0a50 FFF7C1BB 		b	.L2179
 32831              	.L2215:
4091:src/xeq.c     **** 		break;
ARM GAS  /tmp/cc7LeJ71.s 			page 830


 32832              		.loc 1 4091 3 view .LVU8829
 32833 0a54 DFF8B0B1 		ldr	fp, .L2529+16
 32834 0a58 6A49     		ldr	r1, .L2529+12
 32835 0a5a 6948     		ldr	r0, .L2529+8
4091:src/xeq.c     **** 		break;
 32836              		.loc 1 4091 49 is_stmt 0 view .LVU8830
 32837 0a5c A5F12902 		sub	r2, r5, #41
4091:src/xeq.c     **** 		break;
 32838              		.loc 1 4091 3 view .LVU8831
 32839 0a60 D2B2     		uxtb	r2, r2
 32840 0a62 FFF7FEFF 		bl	do_ztst
 32841              	.LVL2536:
4092:src/xeq.c     **** 
 32842              		.loc 1 4092 3 is_stmt 1 view .LVU8832
 32843 0a66 DBF80030 		ldr	r3, [fp]
 32844 0a6a FFF7B4BB 		b	.L2179
 32845              	.L2217:
4088:src/xeq.c     **** 		break;
 32846              		.loc 1 4088 3 view .LVU8833
 32847 0a6e DFF898B1 		ldr	fp, .L2529+16
 32848 0a72 6349     		ldr	r1, .L2529+8
 32849 0a74 6348     		ldr	r0, .L2529+12
4088:src/xeq.c     **** 		break;
 32850              		.loc 1 4088 49 is_stmt 0 view .LVU8834
 32851 0a76 A5F12702 		sub	r2, r5, #39
4088:src/xeq.c     **** 		break;
 32852              		.loc 1 4088 3 view .LVU8835
 32853 0a7a D2B2     		uxtb	r2, r2
 32854 0a7c FFF7FEFF 		bl	do_ztst
 32855              	.LVL2537:
4089:src/xeq.c     **** 	case OP_Zeqi:	case OP_Znei:
 32856              		.loc 1 4089 3 is_stmt 1 view .LVU8836
 32857 0a80 DBF80030 		ldr	r3, [fp]
 32858 0a84 FFF7A7BB 		b	.L2179
 32859              	.L2226:
4018:src/xeq.c     **** 			illegal(op);
 32860              		.loc 1 4018 3 view .LVU8837
4018:src/xeq.c     **** 			illegal(op);
 32861              		.loc 1 4018 7 is_stmt 0 view .LVU8838
 32862 0a88 DFF88091 		ldr	r9, .L2529+20
 32863              	.LVL2538:
4018:src/xeq.c     **** 			illegal(op);
 32864              		.loc 1 4018 6 view .LVU8839
 32865 0a8c D9F80030 		ldr	r3, [r9]
 32866 0a90 002B     		cmp	r3, #0
 32867 0a92 00F06C81 		beq	.L2238
4019:src/xeq.c     **** 		else if (CmdLineLength) {
 32868              		.loc 1 4019 4 is_stmt 1 view .LVU8840
4019:src/xeq.c     **** 		else if (CmdLineLength) {
 32869              		.loc 1 4019 4 view .LVU8841
 32870              	.LVL2539:
 32871              	.LBB4213:
 32872              	.LBI4213:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 32873              		.loc 1 546 5 view .LVU8842
 32874              	.LBB4214:
 547:src/xeq.c     **** 		Error = e;
ARM GAS  /tmp/cc7LeJ71.s 			page 831


 32875              		.loc 1 547 2 view .LVU8843
 547:src/xeq.c     **** 		Error = e;
 32876              		.loc 1 547 12 is_stmt 0 view .LVU8844
 32877 0a96 DFF870B1 		ldr	fp, .L2529+16
 32878 0a9a DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 32879              		.loc 1 547 5 view .LVU8845
 32880 0a9e 0028     		cmp	r0, #0
 32881 0aa0 3FF4EBAB 		beq	.L2184
 32882 0aa4 FFF7ECBB 		b	.L2315
 32883              	.LVL2540:
 32884              	.L2227:
 547:src/xeq.c     **** 		Error = e;
 32885              		.loc 1 547 5 view .LVU8846
 32886              	.LBE4214:
 32887              	.LBE4213:
4037:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32888              		.loc 1 4037 5 is_stmt 1 view .LVU8847
4037:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32889              		.loc 1 4037 9 is_stmt 0 view .LVU8848
 32890 0aa8 3B68     		ldr	r3, [r7]
4037:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32891              		.loc 1 4037 8 view .LVU8849
 32892 0aaa 93F9DD37 		ldrsb	r3, [r3, #2013]
 32893 0aae 002B     		cmp	r3, #0
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 32894              		.loc 1 4038 10 view .LVU8850
 32895 0ab0 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
4037:src/xeq.c     **** 		    if ( CmdLineLength && !(XromRunning || Running) ) { 
 32896              		.loc 1 4037 8 view .LVU8851
 32897 0ab2 FFF643AE 		blt	.L2512
4050:src/xeq.c     **** 		    lift();
 32898              		.loc 1 4050 7 is_stmt 1 view .LVU8852
 32899              	.LBB4215:
 32900              	.LBI4215:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 32901              		.loc 1 1226 6 view .LVU8853
 32902              	.LBB4216:
1227:src/xeq.c     **** 
 32903              		.loc 1 1227 2 view .LVU8854
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32904              		.loc 1 1229 2 view .LVU8855
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32905              		.loc 1 1229 5 is_stmt 0 view .LVU8856
 32906 0ab6 002B     		cmp	r3, #0
 32907 0ab8 40F0A181 		bne	.L2513
 32908              	.L2247:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 32909              		.loc 1 1229 5 view .LVU8857
 32910              	.LBE4216:
 32911              	.LBE4215:
4051:src/xeq.c     **** 		    clr_lift();
 32912              		.loc 1 4051 7 is_stmt 1 view .LVU8858
 32913 0abc FFF7FEFF 		bl	lift
 32914              	.LVL2541:
 32915              	.L2470:
4052:src/xeq.c     **** 		  }
ARM GAS  /tmp/cc7LeJ71.s 			page 832


 32916              		.loc 1 4052 7 view .LVU8859
 32917              	.LBB4218:
 32918              	.LBI4218:
 771:src/xeq.c     ****     State2.state_lift = 0;
 32919              		.loc 1 771 13 view .LVU8860
 32920              	.LBB4219:
 772:src/xeq.c     **** }
 32921              		.loc 1 772 5 view .LVU8861
 772:src/xeq.c     **** }
 32922              		.loc 1 772 23 is_stmt 0 view .LVU8862
 32923 0ac0 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 32924 0ac2 DFF844B1 		ldr	fp, .L2529+16
 32925 0ac6 6FF38613 		bfc	r3, #6, #1
 32926 0aca E375     		strb	r3, [r4, #23]
 32927 0acc DBF80030 		ldr	r3, [fp]
 773:src/xeq.c     **** 
 32928              		.loc 1 773 1 view .LVU8863
 32929 0ad0 FFF781BB 		b	.L2179
 32930              	.LVL2542:
 32931              	.L2223:
 773:src/xeq.c     **** 
 32932              		.loc 1 773 1 view .LVU8864
 32933              	.LBE4219:
 32934              	.LBE4218:
3934:src/xeq.c     **** 			break;
 32935              		.loc 1 3934 3 is_stmt 1 view .LVU8865
3934:src/xeq.c     **** 			break;
 32936              		.loc 1 3934 7 is_stmt 0 view .LVU8866
 32937 0ad4 3B68     		ldr	r3, [r7]
 32938 0ad6 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
3934:src/xeq.c     **** 			break;
 32939              		.loc 1 3934 6 view .LVU8867
 32940 0ada D907     		lsls	r1, r3, #31
 32941 0adc 3FF53EAE 		bmi	.L2176
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32942              		.loc 1 3937 3 is_stmt 1 view .LVU8868
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32943              		.loc 1 3937 7 is_stmt 0 view .LVU8869
 32944 0ae0 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32945              		.loc 1 3937 6 view .LVU8870
 32946 0ae2 012B     		cmp	r3, #1
 32947 0ae4 3FF63AAE 		bhi	.L2176
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32948              		.loc 1 3937 22 view .LVU8871
 32949 0ae8 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 32950 0aea 002A     		cmp	r2, #0
 32951 0aec 7FF436AE 		bne	.L2176
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32952              		.loc 1 3937 54 view .LVU8872
 32953 0af0 002B     		cmp	r3, #0
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32954              		.loc 1 3937 40 view .LVU8873
 32955 0af2 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32956              		.loc 1 3937 54 view .LVU8874
 32957 0af4 0CBF     		ite	eq
ARM GAS  /tmp/cc7LeJ71.s 			page 833


 32958 0af6 0C22     		moveq	r2, #12
 32959 0af8 0D22     		movne	r2, #13
3937:src/xeq.c     **** 			if (CmdLineLength == 0 || Cmdline[CmdLineLength-1] == '-') // ND change: stop a zero being enter
 32960              		.loc 1 3937 37 view .LVU8875
 32961 0afa 9A42     		cmp	r2, r3
 32962 0afc FFF62EAE 		blt	.L2176
3938:src/xeq.c     **** #else
 32963              		.loc 1 3938 4 is_stmt 1 view .LVU8876
3938:src/xeq.c     **** #else
 32964              		.loc 1 3938 7 is_stmt 0 view .LVU8877
 32965 0b00 002B     		cmp	r3, #0
 32966 0b02 00F0D181 		beq	.L2230
3938:src/xeq.c     **** #else
 32967              		.loc 1 3938 37 view .LVU8878
 32968 0b06 2344     		add	r3, r3, r4
3938:src/xeq.c     **** #else
 32969              		.loc 1 3938 27 view .LVU8879
 32970 0b08 DB7F     		ldrb	r3, [r3, #31]	@ zero_extendqisi2
 32971 0b0a 2D2B     		cmp	r3, #45
 32972 0b0c 00F0CC81 		beq	.L2230
 32973              	.L2231:
3949:src/xeq.c     **** 			append_cmdline('.');
 32974              		.loc 1 3949 4 is_stmt 1 view .LVU8880
 32975              	.LBB4220:
 32976              	.LBB4221:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32977              		.loc 1 2646 10 is_stmt 0 view .LVU8881
 32978 0b10 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 32979              	.LBE4221:
 32980              	.LBE4220:
3949:src/xeq.c     **** 			append_cmdline('.');
 32981              		.loc 1 3949 14 view .LVU8882
 32982 0b12 A17F     		ldrb	r1, [r4, #30]	@ zero_extendqisi2
 32983 0b14 DFF8F0B0 		ldr	fp, .L2529+16
 32984              	.LBB4225:
 32985              	.LBB4222:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32986              		.loc 1 2646 23 view .LVU8883
 32987 0b18 5A1C     		adds	r2, r3, #1
 32988 0b1a D2B2     		uxtb	r2, r2
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32989              		.loc 1 2646 27 view .LVU8884
 32990 0b1c 2344     		add	r3, r3, r4
2647:src/xeq.c     **** }
 32991              		.loc 1 2647 25 view .LVU8885
 32992 0b1e A018     		adds	r0, r4, r2
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32993              		.loc 1 2646 23 view .LVU8886
 32994 0b20 2277     		strb	r2, [r4, #28]
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 32995              		.loc 1 2646 27 view .LVU8887
 32996 0b22 2E22     		movs	r2, #46
 32997 0b24 83F82020 		strb	r2, [r3, #32]
 32998              	.LBE4222:
 32999              	.LBE4225:
3949:src/xeq.c     **** 			append_cmdline('.');
 33000              		.loc 1 3949 14 view .LVU8888
ARM GAS  /tmp/cc7LeJ71.s 			page 834


 33001 0b28 0131     		adds	r1, r1, #1
 33002              	.LBB4226:
 33003              	.LBB4223:
2647:src/xeq.c     **** }
 33004              		.loc 1 2647 25 view .LVU8889
 33005 0b2a 0023     		movs	r3, #0
 33006 0b2c 80F82030 		strb	r3, [r0, #32]
 33007              	.LBE4223:
 33008              	.LBE4226:
3949:src/xeq.c     **** 			append_cmdline('.');
 33009              		.loc 1 3949 14 view .LVU8890
 33010 0b30 A177     		strb	r1, [r4, #30]
3950:src/xeq.c     **** 		}
 33011              		.loc 1 3950 4 is_stmt 1 view .LVU8891
 33012              	.LVL2543:
 33013              	.LBB4227:
 33014              	.LBI4220:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 33015              		.loc 1 2645 13 view .LVU8892
 33016              	.LBB4224:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33017              		.loc 1 2646 2 view .LVU8893
2647:src/xeq.c     **** }
 33018              		.loc 1 2647 2 view .LVU8894
 33019 0b32 DBF80030 		ldr	r3, [fp]
2648:src/xeq.c     **** 
 33020              		.loc 1 2648 1 is_stmt 0 view .LVU8895
 33021 0b36 FFF74EBB 		b	.L2179
 33022              	.LVL2544:
 33023              	.L2224:
2648:src/xeq.c     **** 
 33024              		.loc 1 2648 1 view .LVU8896
 33025              	.LBE4224:
 33026              	.LBE4227:
4002:src/xeq.c     **** 			cmdlinechs();
 33027              		.loc 1 4002 3 is_stmt 1 view .LVU8897
4002:src/xeq.c     **** 			cmdlinechs();
 33028              		.loc 1 4002 7 is_stmt 0 view .LVU8898
 33029 0b3a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
4002:src/xeq.c     **** 			cmdlinechs();
 33030              		.loc 1 4002 6 view .LVU8899
 33031 0b3c 002A     		cmp	r2, #0
 33032 0b3e 40F04281 		bne	.L2514
4004:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 33033              		.loc 1 4004 8 is_stmt 1 view .LVU8900
4004:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 33034              		.loc 1 4004 12 is_stmt 0 view .LVU8901
 33035 0b42 3B68     		ldr	r3, [r7]
 33036 0b44 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
4004:src/xeq.c     **** 			setX_int(intChs(getX_int()));
 33037              		.loc 1 4004 11 view .LVU8902
 33038 0b48 DA07     		lsls	r2, r3, #31
 33039 0b4a 40F12E81 		bpl	.L2237
4005:src/xeq.c     **** 			set_lift();
 33040              		.loc 1 4005 4 is_stmt 1 view .LVU8903
 33041              	.LBB4228:
 33042              	.LBI4228:
ARM GAS  /tmp/cc7LeJ71.s 			page 835


1442:src/xeq.c     **** 	return get_reg_n_int(regX_idx);
 33043              		.loc 1 1442 15 view .LVU8904
 33044              	.LBB4229:
1443:src/xeq.c     **** }
 33045              		.loc 1 1443 2 view .LVU8905
1443:src/xeq.c     **** }
 33046              		.loc 1 1443 9 is_stmt 0 view .LVU8906
 33047 0b4e 6420     		movs	r0, #100
 33048 0b50 FFF7FEFF 		bl	get_reg_n_int
 33049              	.LVL2545:
 33050              	.LBE4229:
 33051              	.LBE4228:
4005:src/xeq.c     **** 			set_lift();
 33052              		.loc 1 4005 4 view .LVU8907
 33053 0b54 FFF7FEFF 		bl	intChs
 33054              	.LVL2546:
 33055 0b58 FFF7FEFF 		bl	setX_int
 33056              	.LVL2547:
 33057 0b5c FFF733BB 		b	.L2467
 33058              	.L2225:
3955:src/xeq.c     **** 			break;
 33059              		.loc 1 3955 3 is_stmt 1 view .LVU8908
 33060              	.LBB4230:
3963:src/xeq.c     **** #endif
 33061              		.loc 1 3963 4 view .LVU8909
 33062              	.LVL2548:
3966:src/xeq.c     **** 				if (eex_pi) {
 33063              		.loc 1 3966 4 view .LVU8910
3966:src/xeq.c     **** 				if (eex_pi) {
 33064              		.loc 1 3966 7 is_stmt 0 view .LVU8911
 33065 0b60 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 33066 0b62 022B     		cmp	r3, #2
 33067 0b64 3FF4FAAD 		beq	.L2176
3981:src/xeq.c     **** 				break;
 33068              		.loc 1 3981 4 is_stmt 1 view .LVU8912
 33069              	.LBE4230:
3955:src/xeq.c     **** 			break;
 33070              		.loc 1 3955 7 is_stmt 0 view .LVU8913
 33071 0b68 3B68     		ldr	r3, [r7]
 33072              	.LBB4233:
3981:src/xeq.c     **** 				break;
 33073              		.loc 1 3981 7 view .LVU8914
 33074 0b6a 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
 33075              	.LBE4233:
3955:src/xeq.c     **** 			break;
 33076              		.loc 1 3955 7 view .LVU8915
 33077 0b6c 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 33078 0b70 03F00103 		and	r3, r3, #1
 33079              	.LBB4234:
3981:src/xeq.c     **** 				break;
 33080              		.loc 1 3981 7 view .LVU8916
 33081 0b74 1343     		orrs	r3, r3, r2
 33082 0b76 7FF4F1AD 		bne	.L2176
3981:src/xeq.c     **** 				break;
 33083              		.loc 1 3981 22 view .LVU8917
 33084 0b7a 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3981:src/xeq.c     **** 				break;
ARM GAS  /tmp/cc7LeJ71.s 			page 836


 33085              		.loc 1 3981 19 view .LVU8918
 33086 0b7c 122B     		cmp	r3, #18
 33087 0b7e 3FF6EDAD 		bhi	.L2176
3983:src/xeq.c     **** 				// empty command line: enter pi
 33088              		.loc 1 3983 4 is_stmt 1 view .LVU8919
3994:src/xeq.c     **** 				digit(1);
 33089              		.loc 1 3994 4 view .LVU8920
3994:src/xeq.c     **** 				digit(1);
 33090              		.loc 1 3994 7 is_stmt 0 view .LVU8921
 33091 0b82 002B     		cmp	r3, #0
 33092 0b84 00F09C81 		beq	.L2515
 33093              	.L2232:
3996:src/xeq.c     **** 			append_cmdline('E');
 33094              		.loc 1 3996 4 is_stmt 1 view .LVU8922
3996:src/xeq.c     **** 			append_cmdline('E');
 33095              		.loc 1 3996 17 is_stmt 0 view .LVU8923
 33096 0b88 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
3996:src/xeq.c     **** 			append_cmdline('E');
 33097              		.loc 1 3996 15 view .LVU8924
 33098 0b8a 6377     		strb	r3, [r4, #29]
3997:src/xeq.c     **** 		}
 33099              		.loc 1 3997 4 is_stmt 1 view .LVU8925
 33100              	.LVL2549:
 33101              	.LBB4231:
 33102              	.LBI4231:
2645:src/xeq.c     **** 	Cmdline[CmdLineLength++] = c;
 33103              		.loc 1 2645 13 view .LVU8926
 33104              	.LBB4232:
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33105              		.loc 1 2646 2 view .LVU8927
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33106              		.loc 1 2646 23 is_stmt 0 view .LVU8928
 33107 0b8c 5A1C     		adds	r2, r3, #1
 33108 0b8e D2B2     		uxtb	r2, r2
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33109              		.loc 1 2646 27 view .LVU8929
 33110 0b90 2344     		add	r3, r3, r4
2647:src/xeq.c     **** }
 33111              		.loc 1 2647 25 view .LVU8930
 33112 0b92 A118     		adds	r1, r4, r2
 33113 0b94 DFF870B0 		ldr	fp, .L2529+16
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33114              		.loc 1 2646 23 view .LVU8931
 33115 0b98 2277     		strb	r2, [r4, #28]
2646:src/xeq.c     **** 	Cmdline[CmdLineLength] = '\0';
 33116              		.loc 1 2646 27 view .LVU8932
 33117 0b9a 4522     		movs	r2, #69
 33118 0b9c 83F82020 		strb	r2, [r3, #32]
2647:src/xeq.c     **** }
 33119              		.loc 1 2647 2 is_stmt 1 view .LVU8933
2647:src/xeq.c     **** }
 33120              		.loc 1 2647 25 is_stmt 0 view .LVU8934
 33121 0ba0 0023     		movs	r3, #0
 33122 0ba2 81F82030 		strb	r3, [r1, #32]
 33123 0ba6 DBF80030 		ldr	r3, [fp]
2648:src/xeq.c     **** 
 33124              		.loc 1 2648 1 view .LVU8935
ARM GAS  /tmp/cc7LeJ71.s 			page 837


 33125 0baa FFF714BB 		b	.L2179
 33126              	.LVL2550:
 33127              	.L2288:
2648:src/xeq.c     **** 
 33128              		.loc 1 2648 1 view .LVU8936
 33129              	.LBE4232:
 33130              	.LBE4231:
 33131              	.LBE4234:
 33132              	.LBE4264:
 33133              	.LBE4585:
 33134              	.LBB4586:
 33135              	.LBB4444:
4860:src/xeq.c     **** 		}
 33136              		.loc 1 4860 5 is_stmt 1 view .LVU8937
 33137              	.LBB4427:
 33138              	.LBI4427:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33139              		.loc 1 575 6 view .LVU8938
 33140              	.LBE4427:
 33141              	.LBE4444:
 33142              	.LBE4586:
 576:src/xeq.c     **** }
 33143              		.loc 1 576 2 view .LVU8939
 33144              	.LBB4587:
 33145              	.LBB4445:
 33146              	.LBB4430:
 33147              	.LBB4428:
 33148              	.LBI4428:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33149              		.loc 1 546 5 view .LVU8940
 33150              	.LBB4429:
 547:src/xeq.c     **** 		Error = e;
 33151              		.loc 1 547 2 view .LVU8941
 547:src/xeq.c     **** 		Error = e;
 33152              		.loc 1 547 12 is_stmt 0 view .LVU8942
 33153 0bae DFF858B0 		ldr	fp, .L2529+16
 33154 0bb2 DBF80000 		ldr	r0, [fp]
 547:src/xeq.c     **** 		Error = e;
 33155              		.loc 1 547 5 view .LVU8943
 33156 0bb6 0028     		cmp	r0, #0
 33157 0bb8 7FF4BDAD 		bne	.L2461
 33158              	.LVL2551:
 547:src/xeq.c     **** 		Error = e;
 33159              		.loc 1 547 5 view .LVU8944
 33160              	.LBE4429:
 33161              	.LBE4428:
 33162              	.LBE4430:
 33163              	.LBE4445:
 33164              	.LBE4587:
 33165              	.LBB4588:
 33166              	.LBB4265:
 33167              	.LBB4235:
 33168              	.LBB4236:
 33169              	.LBB4237:
 33170              	.LBB4238:
 33171              	.LBI4238:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/cc7LeJ71.s 			page 838


 33172              		.loc 1 546 5 is_stmt 1 view .LVU8945
 33173              	.LBB4239:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33174              		.loc 1 548 3 view .LVU8946
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33175              		.loc 1 548 9 is_stmt 0 view .LVU8947
 33176 0bbc 0D20     		movs	r0, #13
 33177 0bbe DFF84C90 		ldr	r9, .L2529+20
 33178 0bc2 CBF80000 		str	r0, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33179              		.loc 1 549 3 is_stmt 1 view .LVU8948
 33180 0bc6 FFF75BBB 		b	.L2315
 33181              	.LVL2552:
 33182              	.L2298:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33183              		.loc 1 549 3 is_stmt 0 view .LVU8949
 33184              	.LBE4239:
 33185              	.LBE4238:
 33186              	.LBE4237:
 33187              	.LBE4236:
 33188              	.LBE4235:
 33189              	.LBE4265:
 33190              	.LBE4588:
 33191              	.LBB4589:
 33192              	.LBB4396:
4812:src/xeq.c     **** 	} else
 33193              		.loc 1 4812 4 is_stmt 1 view .LVU8950
 33194              	.LBB4385:
 33195              	.LBI4385:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33196              		.loc 1 575 6 view .LVU8951
 33197              	.LBE4385:
 33198              	.LBE4396:
 33199              	.LBE4589:
 576:src/xeq.c     **** }
 33200              		.loc 1 576 2 view .LVU8952
 33201              	.LBB4590:
 33202              	.LBB4397:
 33203              	.LBB4390:
 33204              	.LBB4386:
 33205              	.LBI4386:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33206              		.loc 1 546 5 view .LVU8953
 33207              	.LBB4387:
 547:src/xeq.c     **** 		Error = e;
 33208              		.loc 1 547 2 view .LVU8954
 547:src/xeq.c     **** 		Error = e;
 33209              		.loc 1 547 12 is_stmt 0 view .LVU8955
 33210 0bca DFF83CB0 		ldr	fp, .L2529+16
 33211 0bce DBF80030 		ldr	r3, [fp]
 547:src/xeq.c     **** 		Error = e;
 33212              		.loc 1 547 5 view .LVU8956
 33213 0bd2 002B     		cmp	r3, #0
 33214 0bd4 7FF4CAAA 		bne	.L2190
 33215              	.LVL2553:
 33216              	.LBB4388:
 33217              	.LBI4388:
ARM GAS  /tmp/cc7LeJ71.s 			page 839


 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33218              		.loc 1 546 5 is_stmt 1 view .LVU8957
 33219              	.LBB4389:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33220              		.loc 1 548 3 view .LVU8958
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33221              		.loc 1 548 9 is_stmt 0 view .LVU8959
 33222 0bd8 0D23     		movs	r3, #13
 33223 0bda CBF80030 		str	r3, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33224              		.loc 1 549 3 is_stmt 1 view .LVU8960
 33225              	.LVL2554:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33226              		.loc 1 549 3 is_stmt 0 view .LVU8961
 33227              	.LBE4389:
 33228              	.LBE4388:
 33229              	.LBE4387:
 33230              	.LBE4386:
 33231              	.LBE4390:
4814:src/xeq.c     **** }
 33232              		.loc 1 4814 3 is_stmt 1 view .LVU8962
 33233              	.LBE4397:
 33234              	.LBE4590:
5383:src/xeq.c     **** 		}
 33235              		.loc 1 5383 12 view .LVU8963
5393:src/xeq.c     **** 		// deferred message (matrix code needs too much stack!)
 33236              		.loc 1 5393 2 view .LVU8964
 33237 0bde FFF7C5BA 		b	.L2190
 33238              	.LVL2555:
 33239              	.L2306:
5417:src/xeq.c     **** 						// Need space for double precision stack
 33240              		.loc 1 5417 34 is_stmt 0 discriminator 1 view .LVU8965
 33241 0be2 029A     		ldr	r2, [sp, #8]
 33242 0be4 92F8CF27 		ldrb	r2, [r2, #1999]	@ zero_extendqisi2
 33243 0be8 0B2A     		cmp	r2, #11
 33244 0bea 40F2A580 		bls	.L2308
5421:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33245              		.loc 1 5421 6 is_stmt 1 view .LVU8966
5421:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33246              		.loc 1 5421 20 is_stmt 0 view .LVU8967
 33247 0bee 6AF3C711 		bfi	r1, r10, #7, #1
 33248 0bf2 5970     		strb	r1, [r3, #1]
5422:src/xeq.c     **** 						UState.mode_double = 1;
 33249              		.loc 1 5422 6 is_stmt 1 view .LVU8968
 33250 0bf4 D4E5     		b	.L2307
 33251              	.L2530:
 33252 0bf6 00BF     		.align	2
 33253              	.L2529:
 33254 0bf8 00000000 		.word	dyfuncs
 33255 0bfc 00000000 		.word	XromUserPc
 33256 0c00 00000000 		.word	const_0
 33257 0c04 00000000 		.word	const_1
 33258 0c08 00000000 		.word	Error
 33259 0c0c 00000000 		.word	Running
 33260              	.LVL2556:
 33261              	.L2277:
 33262              	.LBB4591:
ARM GAS  /tmp/cc7LeJ71.s 			page 840


 33263              	.LBB4319:
4769:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33264              		.loc 1 4769 4 view .LVU8969
4769:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33265              		.loc 1 4769 10 is_stmt 0 view .LVU8970
 33266 0c10 AD4B     		ldr	r3, .L2531
 33267 0c12 02EB4202 		add	r2, r2, r2, lsl #1
 33268              	.LVL2557:
4769:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33269              		.loc 1 4769 10 view .LVU8971
 33270 0c16 53F83290 		ldr	r9, [r3, r2, lsl #3]
4769:src/xeq.c     **** 				FP_DYADIC_REAL fp = (FP_DYADIC_REAL) EXPAND_ADDRESS(dyfuncs[f].dydreal);
 33271              		.loc 1 4769 7 view .LVU8972
 33272 0c1a B9F1000F 		cmp	r9, #0
 33273 0c1e C6D0     		beq	.L2288
 33274              	.LBB4299:
4770:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33275              		.loc 1 4770 5 is_stmt 1 view .LVU8973
 33276              	.LVL2558:
4771:src/xeq.c     **** 					return;
 33277              		.loc 1 4771 5 view .LVU8974
4771:src/xeq.c     **** 					return;
 33278              		.loc 1 4771 9 is_stmt 0 view .LVU8975
 33279 0c20 4846     		mov	r0, r9
 33280 0c22 FFF7FEFF 		bl	dispatch_xrom
 33281              	.LVL2559:
4771:src/xeq.c     **** 					return;
 33282              		.loc 1 4771 8 view .LVU8976
 33283 0c26 0028     		cmp	r0, #0
 33284 0c28 7FF498AD 		bne	.L2176
 33285              	.LBB4300:
4774:src/xeq.c     **** 					getXY(&x, &y);
 33286              		.loc 1 4774 6 is_stmt 1 view .LVU8977
4775:src/xeq.c     **** 					if (NULL == fp(&r, &y, &x))
 33287              		.loc 1 4775 6 view .LVU8978
 33288              	.LVL2560:
 33289              	.LBB4301:
 33290              	.LBI4301:
 854:src/xeq.c     **** 	getX(x);
 33291              		.loc 1 854 6 view .LVU8979
 33292              	.LBE4301:
 33293              	.LBE4300:
 33294              	.LBE4299:
 33295              	.LBE4319:
 33296              	.LBE4591:
 855:src/xeq.c     **** 	getY(y);
 33297              		.loc 1 855 2 view .LVU8980
 33298              	.LBB4592:
 33299              	.LBB4320:
 33300              	.LBB4313:
 33301              	.LBB4310:
 33302              	.LBB4306:
 33303              	.LBB4302:
 33304              	.LBI4302:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33305              		.loc 1 824 12 view .LVU8981
 33306              	.LBB4303:
ARM GAS  /tmp/cc7LeJ71.s 			page 841


 825:src/xeq.c     **** }
 33307              		.loc 1 825 2 view .LVU8982
 825:src/xeq.c     **** }
 33308              		.loc 1 825 9 is_stmt 0 view .LVU8983
 33309 0c2c 6421     		movs	r1, #100
 33310 0c2e 29A8     		add	r0, sp, #164
 33311              	.LVL2561:
 825:src/xeq.c     **** }
 33312              		.loc 1 825 9 view .LVU8984
 33313 0c30 FFF7FEFF 		bl	getRegister
 33314              	.LVL2562:
 825:src/xeq.c     **** }
 33315              		.loc 1 825 9 view .LVU8985
 33316              	.LBE4303:
 33317              	.LBE4302:
 33318              	.LBE4306:
 33319              	.LBE4310:
 33320              	.LBE4313:
 33321              	.LBE4320:
 33322              	.LBE4592:
 856:src/xeq.c     **** }
 33323              		.loc 1 856 2 is_stmt 1 view .LVU8986
 33324              	.LBB4593:
 33325              	.LBB4321:
 33326              	.LBB4314:
 33327              	.LBB4311:
 33328              	.LBB4307:
 33329              	.LBB4304:
 33330              	.LBI4304:
 832:src/xeq.c     **** 	getRegister(y, regY_idx);
 33331              		.loc 1 832 6 view .LVU8987
 33332              	.LBB4305:
 833:src/xeq.c     **** }
 33333              		.loc 1 833 2 view .LVU8988
 33334 0c34 6521     		movs	r1, #101
 33335 0c36 32A8     		add	r0, sp, #200
 33336              	.LVL2563:
 833:src/xeq.c     **** }
 33337              		.loc 1 833 2 is_stmt 0 view .LVU8989
 33338 0c38 FFF7FEFF 		bl	getRegister
 33339              	.LVL2564:
 833:src/xeq.c     **** }
 33340              		.loc 1 833 2 view .LVU8990
 33341              	.LBE4305:
 33342              	.LBE4304:
 33343              	.LBE4307:
4776:src/xeq.c     **** 						set_NaN(&r);
 33344              		.loc 1 4776 6 is_stmt 1 view .LVU8991
4776:src/xeq.c     **** 						set_NaN(&r);
 33345              		.loc 1 4776 18 is_stmt 0 view .LVU8992
 33346 0c3c 29AA     		add	r2, sp, #164
 33347 0c3e 32A9     		add	r1, sp, #200
 33348 0c40 5046     		mov	r0, r10
 33349 0c42 C847     		blx	r9
 33350              	.LVL2565:
4776:src/xeq.c     **** 						set_NaN(&r);
 33351              		.loc 1 4776 9 view .LVU8993
ARM GAS  /tmp/cc7LeJ71.s 			page 842


 33352 0c44 0028     		cmp	r0, #0
 33353 0c46 00F0FA80 		beq	.L2516
 33354              	.L2282:
4778:src/xeq.c     **** 					lower();
 33355              		.loc 1 4778 6 is_stmt 1 view .LVU8994
 33356              	.LBB4308:
 33357              	.LBI4308:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33358              		.loc 1 792 6 view .LVU8995
 33359              	.LBB4309:
 793:src/xeq.c     **** }
 33360              		.loc 1 793 2 view .LVU8996
 33361 0c4a 6421     		movs	r1, #100
 33362 0c4c 6C20     		movs	r0, #108
 33363 0c4e DFF890B2 		ldr	fp, .L2531+24
 33364 0c52 FFF7FEFF 		bl	copyreg_n
 33365              	.LVL2566:
 33366              	.LBE4309:
 33367              	.LBE4308:
4779:src/xeq.c     **** 					setX(&r);
 33368              		.loc 1 4779 6 view .LVU8997
 33369              	.L2473:
4779:src/xeq.c     **** 					setX(&r);
 33370              		.loc 1 4779 6 is_stmt 0 view .LVU8998
 33371              	.LBE4311:
 33372              	.LBE4314:
 33373              	.LBE4321:
 33374              	.LBE4593:
 33375              	.LBB4594:
 33376              	.LBB4446:
 33377              	.LBB4431:
 33378              	.LBB4432:
4856:src/xeq.c     **** 					setX(&r);
 33379              		.loc 1 4856 6 is_stmt 1 view .LVU8999
 33380 0c56 FFF7FEFF 		bl	lower
 33381              	.LVL2567:
4857:src/xeq.c     **** 				}
 33382              		.loc 1 4857 6 view .LVU9000
 33383              	.LBB4433:
 33384              	.LBI4433:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 33385              		.loc 1 828 6 view .LVU9001
 33386              	.LBB4434:
 829:src/xeq.c     **** }
 33387              		.loc 1 829 2 view .LVU9002
 33388 0c5a 5146     		mov	r1, r10
 33389 0c5c 6420     		movs	r0, #100
 33390 0c5e FFF7FEFF 		bl	setRegister
 33391              	.LVL2568:
 829:src/xeq.c     **** }
 33392              		.loc 1 829 2 is_stmt 0 view .LVU9003
 33393 0c62 DBF80030 		ldr	r3, [fp]
 33394              	.LBE4434:
 33395              	.LBE4433:
 33396              	.LBE4432:
 33397              	.LBE4431:
 33398 0c66 FFF7B6BA 		b	.L2179
ARM GAS  /tmp/cc7LeJ71.s 			page 843


 33399              	.LVL2569:
 33400              	.L2285:
4845:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33401              		.loc 1 4845 4 is_stmt 1 view .LVU9004
4845:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33402              		.loc 1 4845 10 is_stmt 0 view .LVU9005
 33403 0c6a 984B     		ldr	r3, .L2531+4
 33404 0c6c 02EB8202 		add	r2, r2, r2, lsl #2
 33405              	.LVL2570:
4845:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33406              		.loc 1 4845 10 view .LVU9006
 33407 0c70 53F82290 		ldr	r9, [r3, r2, lsl #2]
4845:src/xeq.c     **** 				FP_TRIADIC_REAL fp = (FP_TRIADIC_REAL) EXPAND_ADDRESS(trifuncs[f].trireal);
 33408              		.loc 1 4845 7 view .LVU9007
 33409 0c74 B9F1000F 		cmp	r9, #0
 33410 0c78 99D0     		beq	.L2288
 33411              	.LBB4439:
4846:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33412              		.loc 1 4846 5 is_stmt 1 view .LVU9008
 33413              	.LVL2571:
4847:src/xeq.c     **** 					return;
 33414              		.loc 1 4847 5 view .LVU9009
4847:src/xeq.c     **** 					return;
 33415              		.loc 1 4847 9 is_stmt 0 view .LVU9010
 33416 0c7a 4846     		mov	r0, r9
 33417 0c7c FFF7FEFF 		bl	dispatch_xrom
 33418              	.LVL2572:
4847:src/xeq.c     **** 					return;
 33419              		.loc 1 4847 8 view .LVU9011
 33420 0c80 0028     		cmp	r0, #0
 33421 0c82 7FF46BAD 		bne	.L2176
 33422              	.LBB4437:
4850:src/xeq.c     **** 					getXYZ(&x, &y, &z);
 33423              		.loc 1 4850 6 is_stmt 1 view .LVU9012
4851:src/xeq.c     **** 					if (NULL == fp(&r, &z, &y, &x))
 33424              		.loc 1 4851 6 view .LVU9013
 33425 0c86 32AA     		add	r2, sp, #200
 33426 0c88 29A9     		add	r1, sp, #164
 33427 0c8a 20A8     		add	r0, sp, #128
 33428 0c8c FFF7FEFF 		bl	getXYZ
 33429              	.LVL2573:
4852:src/xeq.c     **** 						set_NaN(&r);
 33430              		.loc 1 4852 6 view .LVU9014
4852:src/xeq.c     **** 						set_NaN(&r);
 33431              		.loc 1 4852 18 is_stmt 0 view .LVU9015
 33432 0c90 20AB     		add	r3, sp, #128
 33433 0c92 29AA     		add	r2, sp, #164
 33434 0c94 32A9     		add	r1, sp, #200
 33435 0c96 5046     		mov	r0, r10
 33436 0c98 C847     		blx	r9
 33437              	.LVL2574:
4852:src/xeq.c     **** 						set_NaN(&r);
 33438              		.loc 1 4852 9 view .LVU9016
 33439 0c9a 0028     		cmp	r0, #0
 33440 0c9c 00F0DC80 		beq	.L2517
 33441              	.L2290:
4854:src/xeq.c     **** 					lower();
ARM GAS  /tmp/cc7LeJ71.s 			page 844


 33442              		.loc 1 4854 6 is_stmt 1 view .LVU9017
 33443              	.LBB4435:
 33444              	.LBI4435:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33445              		.loc 1 792 6 view .LVU9018
 33446              	.LBB4436:
 793:src/xeq.c     **** }
 33447              		.loc 1 793 2 view .LVU9019
 33448 0ca0 6421     		movs	r1, #100
 33449 0ca2 6C20     		movs	r0, #108
 33450 0ca4 DFF838B2 		ldr	fp, .L2531+24
 33451 0ca8 FFF7FEFF 		bl	copyreg_n
 33452              	.LVL2575:
 33453              	.LBE4436:
 33454              	.LBE4435:
4855:src/xeq.c     **** 					lower();
 33455              		.loc 1 4855 6 view .LVU9020
 33456 0cac FFF7FEFF 		bl	lower
 33457              	.LVL2576:
 33458 0cb0 D1E7     		b	.L2473
 33459              	.LVL2577:
 33460              	.L2456:
4855:src/xeq.c     **** 					lower();
 33461              		.loc 1 4855 6 is_stmt 0 view .LVU9021
 33462              	.LBE4437:
 33463              	.LBE4439:
 33464              	.LBE4446:
 33465              	.LBE4594:
 33466              	.LBB4595:
 33467              	.LBB4563:
4636:src/xeq.c     **** 			bad_mode_error();
 33468              		.loc 1 4636 23 view .LVU9022
 33469 0cb2 02EB0911 		add	r1, r2, r9, lsl #4
 33470 0cb6 4FEA091A 		lsl	r10, r9, #4
4636:src/xeq.c     **** 			bad_mode_error();
 33471              		.loc 1 4636 20 view .LVU9023
 33472 0cba 91F90410 		ldrsb	r1, [r1, #4]
 33473 0cbe 0029     		cmp	r1, #0
 33474 0cc0 BFF6CAAC 		bge	.L2255
4637:src/xeq.c     **** 		else if (! isNULL(niladics[idx].niladicf)) {
 33475              		.loc 1 4637 4 is_stmt 1 view .LVU9024
 33476              	.LBB4554:
 33477              	.LBI4554:
 575:src/xeq.c     **** 	report_err(ERR_BAD_MODE);
 33478              		.loc 1 575 6 view .LVU9025
 33479              	.LBE4554:
 33480              	.LBE4563:
 33481              	.LBE4595:
 576:src/xeq.c     **** }
 33482              		.loc 1 576 2 view .LVU9026
 33483              	.LVL2578:
 33484              	.LBB4596:
 33485              	.LBB4564:
 33486              	.LBB4559:
 33487              	.LBB4555:
 33488              	.LBI4555:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
ARM GAS  /tmp/cc7LeJ71.s 			page 845


 33489              		.loc 1 546 5 view .LVU9027
 33490              	.LBB4556:
 547:src/xeq.c     **** 		Error = e;
 33491              		.loc 1 547 2 view .LVU9028
 547:src/xeq.c     **** 		Error = e;
 33492              		.loc 1 547 12 is_stmt 0 view .LVU9029
 33493 0cc4 DFF818B2 		ldr	fp, .L2531+24
 547:src/xeq.c     **** 		Error = e;
 33494              		.loc 1 547 5 view .LVU9030
 33495 0cc8 DBF80020 		ldr	r2, [fp]
 33496 0ccc 002A     		cmp	r2, #0
 33497 0cce 7FF4E1AC 		bne	.L2256
 33498              	.LVL2579:
 33499              	.LBB4557:
 33500              	.LBI4557:
 546:src/xeq.c     **** 	if (Error == ERR_NONE) {
 33501              		.loc 1 546 5 is_stmt 1 view .LVU9031
 33502              	.LBB4558:
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33503              		.loc 1 548 3 view .LVU9032
 548:src/xeq.c     **** 		if (e == ERR_NONE) {
 33504              		.loc 1 548 9 is_stmt 0 view .LVU9033
 33505 0cd2 0D22     		movs	r2, #13
 33506 0cd4 CBF80020 		str	r2, [fp]
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33507              		.loc 1 549 3 is_stmt 1 view .LVU9034
 33508 0cd8 DCE4     		b	.L2256
 33509              	.LVL2580:
 33510              	.L2269:
 549:src/xeq.c     **** 			error_message(e); // "Running Program"
 33511              		.loc 1 549 3 is_stmt 0 view .LVU9035
 33512              	.LBE4558:
 33513              	.LBE4557:
 33514              	.LBE4556:
 33515              	.LBE4555:
 33516              	.LBE4559:
 33517              	.LBE4564:
 33518              	.LBE4596:
 33519              	.LBB4597:
 33520              	.LBB4525:
4693:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33521              		.loc 1 4693 4 is_stmt 1 view .LVU9036
4693:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33522              		.loc 1 4693 10 is_stmt 0 view .LVU9037
 33523 0cda 7D4B     		ldr	r3, .L2531+8
 33524 0cdc 02EB4202 		add	r2, r2, r2, lsl #1
 33525              	.LVL2581:
4693:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33526              		.loc 1 4693 10 view .LVU9038
 33527 0ce0 53F83290 		ldr	r9, [r3, r2, lsl #3]
4693:src/xeq.c     **** 				FP_MONADIC_REAL fp = (FP_MONADIC_REAL) EXPAND_ADDRESS(monfuncs[f].mondreal);
 33528              		.loc 1 4693 7 view .LVU9039
 33529 0ce4 B9F1000F 		cmp	r9, #0
 33530 0ce8 3FF461AF 		beq	.L2288
 33531              	.LBB4512:
4694:src/xeq.c     **** 				if (dispatch_xrom(fp))
 33532              		.loc 1 4694 5 is_stmt 1 view .LVU9040
ARM GAS  /tmp/cc7LeJ71.s 			page 846


 33533              	.LVL2582:
4695:src/xeq.c     **** 					return;
 33534              		.loc 1 4695 5 view .LVU9041
4695:src/xeq.c     **** 					return;
 33535              		.loc 1 4695 9 is_stmt 0 view .LVU9042
 33536 0cec 4846     		mov	r0, r9
 33537 0cee FFF7FEFF 		bl	dispatch_xrom
 33538              	.LVL2583:
4695:src/xeq.c     **** 					return;
 33539              		.loc 1 4695 8 view .LVU9043
 33540 0cf2 0028     		cmp	r0, #0
 33541 0cf4 7FF432AD 		bne	.L2176
 33542              	.LBB4513:
4698:src/xeq.c     **** 					getX(&x);
 33543              		.loc 1 4698 6 is_stmt 1 view .LVU9044
4699:src/xeq.c     **** 					if (NULL == fp(&r, &x))
 33544              		.loc 1 4699 6 view .LVU9045
 33545              	.LVL2584:
 33546              	.LBB4514:
 33547              	.LBI4514:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33548              		.loc 1 824 12 view .LVU9046
 33549              	.LBB4515:
 825:src/xeq.c     **** }
 33550              		.loc 1 825 2 view .LVU9047
 825:src/xeq.c     **** }
 33551              		.loc 1 825 9 is_stmt 0 view .LVU9048
 33552 0cf8 6421     		movs	r1, #100
 33553 0cfa 32A8     		add	r0, sp, #200
 33554              	.LVL2585:
 825:src/xeq.c     **** }
 33555              		.loc 1 825 9 view .LVU9049
 33556 0cfc FFF7FEFF 		bl	getRegister
 33557              	.LVL2586:
 825:src/xeq.c     **** }
 33558              		.loc 1 825 9 view .LVU9050
 33559              	.LBE4515:
 33560              	.LBE4514:
4700:src/xeq.c     **** 						set_NaN(&r);
 33561              		.loc 1 4700 6 is_stmt 1 view .LVU9051
4700:src/xeq.c     **** 						set_NaN(&r);
 33562              		.loc 1 4700 18 is_stmt 0 view .LVU9052
 33563 0d00 32A9     		add	r1, sp, #200
 33564 0d02 5046     		mov	r0, r10
 33565 0d04 C847     		blx	r9
 33566              	.LVL2587:
4700:src/xeq.c     **** 						set_NaN(&r);
 33567              		.loc 1 4700 9 view .LVU9053
 33568 0d06 0028     		cmp	r0, #0
 33569 0d08 00F0AA80 		beq	.L2518
 33570              	.L2274:
4702:src/xeq.c     **** 					setX(&r);
 33571              		.loc 1 4702 6 is_stmt 1 view .LVU9054
 33572              	.LBB4516:
 33573              	.LBI4516:
 792:src/xeq.c     **** 	copyreg_n(regL_idx, regX_idx);
 33574              		.loc 1 792 6 view .LVU9055
ARM GAS  /tmp/cc7LeJ71.s 			page 847


 33575              	.LBB4517:
 793:src/xeq.c     **** }
 33576              		.loc 1 793 2 view .LVU9056
 33577 0d0c 6421     		movs	r1, #100
 33578 0d0e 6C20     		movs	r0, #108
 33579 0d10 DFF8CCB1 		ldr	fp, .L2531+24
 33580 0d14 FFF7FEFF 		bl	copyreg_n
 33581              	.LVL2588:
 33582              	.LBE4517:
 33583              	.LBE4516:
4703:src/xeq.c     **** 				}
 33584              		.loc 1 4703 6 view .LVU9057
 33585              	.LBB4518:
 33586              	.LBI4518:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 33587              		.loc 1 828 6 view .LVU9058
 33588              	.LBB4519:
 829:src/xeq.c     **** }
 33589              		.loc 1 829 2 view .LVU9059
 33590 0d18 5146     		mov	r1, r10
 33591 0d1a 6420     		movs	r0, #100
 33592 0d1c FFF7FEFF 		bl	setRegister
 33593              	.LVL2589:
 829:src/xeq.c     **** }
 33594              		.loc 1 829 2 is_stmt 0 view .LVU9060
 33595 0d20 DBF80030 		ldr	r3, [fp]
 33596              	.LBE4519:
 33597              	.LBE4518:
 33598              	.LBE4513:
 33599              	.LBE4512:
 33600 0d24 FFF757BA 		b	.L2179
 33601              	.LVL2590:
 33602              	.L2506:
 829:src/xeq.c     **** }
 33603              		.loc 1 829 2 view .LVU9061
 33604 0d28 DFF8B4B1 		ldr	fp, .L2531+24
 33605 0d2c B2E4     		b	.L2256
 33606              	.L2508:
 33607              	.LBE4525:
 33608              	.LBE4597:
 33609              	.LBB4598:
 33610              	.LBB4565:
4655:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 33611              		.loc 1 4655 24 view .LVU9062
 33612 0d2e B9F13F0F 		cmp	r9, #63
 33613 0d32 3FF415AD 		beq	.L2468
 33614 0d36 CAE5     		b	.L2472
 33615              	.LVL2591:
 33616              	.L2308:
4655:src/xeq.c     **** 	  set_lift(); // in entry_rpn mode, lift must be on after enter so the second part below isn't wan
 33617              		.loc 1 4655 24 view .LVU9063
 33618              	.LBE4565:
 33619              	.LBE4598:
5419:src/xeq.c     **** 					}
 33620              		.loc 1 5419 7 is_stmt 1 view .LVU9064
 33621 0d38 7D21     		movs	r1, #125
 33622 0d3a 0C20     		movs	r0, #12
ARM GAS  /tmp/cc7LeJ71.s 			page 848


 33623 0d3c FFF7FEFF 		bl	cmdregs
 33624              	.LVL2592:
5421:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33625              		.loc 1 5421 20 is_stmt 0 view .LVU9065
 33626 0d40 644B     		ldr	r3, .L2531+12
 33627 0d42 DBF80010 		ldr	r1, [fp]
5421:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33628              		.loc 1 5421 6 is_stmt 1 view .LVU9066
5421:src/xeq.c     **** 					if (Error == ERR_NONE) {
 33629              		.loc 1 5421 20 is_stmt 0 view .LVU9067
 33630 0d46 5A78     		ldrb	r2, [r3, #1]	@ zero_extendqisi2
 33631 0d48 6AF3C712 		bfi	r2, r10, #7, #1
 33632 0d4c 5A70     		strb	r2, [r3, #1]
5422:src/xeq.c     **** 						UState.mode_double = 1;
 33633              		.loc 1 5422 6 is_stmt 1 view .LVU9068
5422:src/xeq.c     **** 						UState.mode_double = 1;
 33634              		.loc 1 5422 9 is_stmt 0 view .LVU9069
 33635 0d4e 0029     		cmp	r1, #0
 33636 0d50 3FF426AD 		beq	.L2307
5427:src/xeq.c     **** 				}
 33637              		.loc 1 5427 7 is_stmt 1 view .LVU9070
5427:src/xeq.c     **** 				}
 33638              		.loc 1 5427 13 is_stmt 0 view .LVU9071
 33639 0d54 CBF800A0 		str	r10, [fp]
 33640 0d58 FFF720BB 		b	.L2305
 33641              	.LVL2593:
 33642              	.L2507:
 33643              	.LBB4599:
 33644              	.LBB4566:
 33645              	.LBB4560:
 33646              	.LBB4542:
 33647              	.LBB4541:
 749:src/xeq.c     **** }
 33648              		.loc 1 749 3 is_stmt 1 view .LVU9072
 33649 0d5c FFF7FEFF 		bl	lift
 33650              	.LVL2594:
 33651              	.L2258:
 33652              	.LBE4541:
 33653              	.LBE4542:
4645:src/xeq.c     **** 				default:
 33654              		.loc 1 4645 13 view .LVU9073
 33655              	.LBB4543:
 33656              	.LBI4543:
 747:src/xeq.c     **** 	if (get_lift())
 33657              		.loc 1 747 6 view .LVU9074
 33658              	.LBB4544:
 748:src/xeq.c     **** 		lift();
 33659              		.loc 1 748 2 view .LVU9075
 33660              	.LBB4545:
 33661              	.LBI4545:
 743:src/xeq.c     **** 	return State2.state_lift;
 33662              		.loc 1 743 12 view .LVU9076
 33663              	.LBB4546:
 744:src/xeq.c     **** }
 33664              		.loc 1 744 2 view .LVU9077
 744:src/xeq.c     **** }
 33665              		.loc 1 744 15 is_stmt 0 view .LVU9078
ARM GAS  /tmp/cc7LeJ71.s 			page 849


 33666 0d60 E37D     		ldrb	r3, [r4, #23]	@ zero_extendqisi2
 33667              	.LBE4546:
 33668              	.LBE4545:
 748:src/xeq.c     **** 		lift();
 33669              		.loc 1 748 5 view .LVU9079
 33670 0d62 5906     		lsls	r1, r3, #25
 33671 0d64 7FF591AC 		bpl	.L2259
 749:src/xeq.c     **** }
 33672              		.loc 1 749 3 is_stmt 1 view .LVU9080
 33673 0d68 FFF7FEFF 		bl	lift
 33674              	.LVL2595:
 33675 0d6c 8DE4     		b	.L2259
 33676              	.LVL2596:
 33677              	.L2238:
 749:src/xeq.c     **** }
 33678              		.loc 1 749 3 is_stmt 0 view .LVU9081
 33679              	.LBE4544:
 33680              	.LBE4543:
 33681              	.LBE4560:
 33682              	.LBE4566:
 33683              	.LBE4599:
 33684              	.LBB4600:
 33685              	.LBB4266:
4020:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33686              		.loc 1 4020 8 is_stmt 1 view .LVU9082
4020:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33687              		.loc 1 4020 12 is_stmt 0 view .LVU9083
 33688 0d6e 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
4020:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33689              		.loc 1 4020 11 view .LVU9084
 33690 0d70 002B     		cmp	r3, #0
 33691 0d72 68D0     		beq	.L2239
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33692              		.loc 1 4022 4 is_stmt 1 view .LVU9085
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33693              		.loc 1 4022 7 is_stmt 0 view .LVU9086
 33694 0d74 627F     		ldrb	r2, [r4, #29]	@ zero_extendqisi2
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33695              		.loc 1 4022 48 view .LVU9087
 33696 0d76 013B     		subs	r3, r3, #1
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33697              		.loc 1 4022 7 view .LVU9088
 33698 0d78 22B1     		cbz	r2, .L2240
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33699              		.loc 1 4022 34 view .LVU9089
 33700 0d7a E218     		adds	r2, r4, r3
4022:src/xeq.c     **** 				Cmdline[CmdLineLength-1] = 'E';
 33701              		.loc 1 4022 24 view .LVU9090
 33702 0d7c 92F82010 		ldrb	r1, [r2, #32]	@ zero_extendqisi2
 33703 0d80 4429     		cmp	r1, #68
 33704 0d82 79D0     		beq	.L2519
 33705              	.L2240:
4027:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33706              		.loc 1 4027 4 is_stmt 1 view .LVU9091
4027:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33707              		.loc 1 4027 17 is_stmt 0 view .LVU9092
 33708 0d84 DBB2     		uxtb	r3, r3
ARM GAS  /tmp/cc7LeJ71.s 			page 850


4028:src/xeq.c     **** 				CmdLineEex = 0;
 33709              		.loc 1 4028 15 view .LVU9093
 33710 0d86 E218     		adds	r2, r4, r3
4027:src/xeq.c     **** 			if (Cmdline[CmdLineLength] == 'E')
 33711              		.loc 1 4027 17 view .LVU9094
 33712 0d88 2377     		strb	r3, [r4, #28]
4028:src/xeq.c     **** 				CmdLineEex = 0;
 33713              		.loc 1 4028 4 is_stmt 1 view .LVU9095
4028:src/xeq.c     **** 				CmdLineEex = 0;
 33714              		.loc 1 4028 15 is_stmt 0 view .LVU9096
 33715 0d8a 92F82030 		ldrb	r3, [r2, #32]	@ zero_extendqisi2
4028:src/xeq.c     **** 				CmdLineEex = 0;
 33716              		.loc 1 4028 7 view .LVU9097
 33717 0d8e 452B     		cmp	r3, #69
 33718 0d90 6AD0     		beq	.L2520
4030:src/xeq.c     **** 				CmdLineDot--;
 33719              		.loc 1 4030 9 is_stmt 1 view .LVU9098
4030:src/xeq.c     **** 				CmdLineDot--;
 33720              		.loc 1 4030 12 is_stmt 0 view .LVU9099
 33721 0d92 2E2B     		cmp	r3, #46
 33722 0d94 7FF4E2AC 		bne	.L2176
4031:src/xeq.c     **** 		} else
 33723              		.loc 1 4031 5 is_stmt 1 view .LVU9100
4031:src/xeq.c     **** 		} else
 33724              		.loc 1 4031 15 is_stmt 0 view .LVU9101
 33725 0d98 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 33726 0d9a DFF844B1 		ldr	fp, .L2531+24
 33727 0d9e 013B     		subs	r3, r3, #1
 33728 0da0 A377     		strb	r3, [r4, #30]
 33729 0da2 DBF80030 		ldr	r3, [fp]
 33730 0da6 FFF716BA 		b	.L2179
 33731              	.LVL2597:
 33732              	.L2237:
 33733              	.LBB4240:
4008:src/xeq.c     **** 
 33734              		.loc 1 4008 4 is_stmt 1 view .LVU9102
4010:src/xeq.c     **** 			dn_minus(&r, &x);
 33735              		.loc 1 4010 4 view .LVU9103
 33736              	.LBB4241:
 33737              	.LBI4241:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 33738              		.loc 1 824 12 view .LVU9104
 33739              	.LBB4242:
 825:src/xeq.c     **** }
 33740              		.loc 1 825 2 view .LVU9105
 825:src/xeq.c     **** }
 33741              		.loc 1 825 9 is_stmt 0 view .LVU9106
 33742 0daa 32A8     		add	r0, sp, #200
 33743              	.LVL2598:
 825:src/xeq.c     **** }
 33744              		.loc 1 825 9 view .LVU9107
 33745 0dac 6421     		movs	r1, #100
 33746 0dae FFF7FEFF 		bl	getRegister
 33747              	.LVL2599:
 825:src/xeq.c     **** }
 33748              		.loc 1 825 9 view .LVU9108
 33749              	.LBE4242:
ARM GAS  /tmp/cc7LeJ71.s 			page 851


 33750              	.LBE4241:
4011:src/xeq.c     **** 			setX(&r);
 33751              		.loc 1 4011 4 is_stmt 1 view .LVU9109
 33752 0db2 32A9     		add	r1, sp, #200
 33753 0db4 5046     		mov	r0, r10
 33754 0db6 FFF7FEFF 		bl	dn_minus
 33755              	.LVL2600:
4012:src/xeq.c     **** 			set_lift();
 33756              		.loc 1 4012 4 view .LVU9110
 33757              	.LBB4243:
 33758              	.LBI4243:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 33759              		.loc 1 828 6 view .LVU9111
 33760              	.LBB4244:
 829:src/xeq.c     **** }
 33761              		.loc 1 829 2 view .LVU9112
 33762 0dba 5146     		mov	r1, r10
 33763 0dbc 6420     		movs	r0, #100
 33764 0dbe FFF7FEFF 		bl	setRegister
 33765              	.LVL2601:
 829:src/xeq.c     **** }
 33766              		.loc 1 829 2 is_stmt 0 view .LVU9113
 33767              	.LBE4244:
 33768              	.LBE4243:
4013:src/xeq.c     **** 		}
 33769              		.loc 1 4013 4 is_stmt 1 view .LVU9114
 33770              	.LBB4245:
 33771              	.LBI4245:
 767:src/xeq.c     ****     State2.state_lift = 1;
 33772              		.loc 1 767 6 view .LVU9115
 33773              	.LBB4246:
 768:src/xeq.c     **** }
 33774              		.loc 1 768 5 view .LVU9116
 33775 0dc2 FFF700BA 		b	.L2467
 33776              	.L2514:
 33777              	.LBE4246:
 33778              	.LBE4245:
 33779              	.LBE4240:
4003:src/xeq.c     **** 		else if (is_intmode()) {
 33780              		.loc 1 4003 4 view .LVU9117
 33781              	.LBB4247:
 33782              	.LBI4247:
3245:src/xeq.c     **** 	if (CmdLineEex) {
 33783              		.loc 1 3245 13 view .LVU9118
 33784              	.LBB4248:
3246:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33785              		.loc 1 3246 2 view .LVU9119
3246:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33786              		.loc 1 3246 6 is_stmt 0 view .LVU9120
 33787 0dc6 637F     		ldrb	r3, [r4, #29]	@ zero_extendqisi2
3246:src/xeq.c     **** #ifdef LARGE_EXPONENT_ENTRY
 33788              		.loc 1 3246 5 view .LVU9121
 33789 0dc8 13B3     		cbz	r3, .L2234
3250:src/xeq.c     **** 			Cmdline[CmdLineEex] ^= 1;
 33790              		.loc 1 3250 3 is_stmt 1 view .LVU9122
3251:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33791              		.loc 1 3251 4 view .LVU9123
ARM GAS  /tmp/cc7LeJ71.s 			page 852


3251:src/xeq.c     **** 		else if (Cmdline[CmdLineEex] == 'E')
 33792              		.loc 1 3251 24 is_stmt 0 view .LVU9124
 33793 0dca 2344     		add	r3, r3, r4
 33794 0dcc DFF810B1 		ldr	fp, .L2531+24
 33795 0dd0 93F82020 		ldrb	r2, [r3, #32]	@ zero_extendqisi2
 33796 0dd4 82F00102 		eor	r2, r2, #1
 33797 0dd8 83F82020 		strb	r2, [r3, #32]
 33798 0ddc DBF80030 		ldr	r3, [fp]
 33799 0de0 FFF7F9B9 		b	.L2179
 33800              	.L2454:
 33801              	.LBE4248:
 33802              	.LBE4247:
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33803              		.loc 1 4038 31 view .LVU9125
 33804 0de4 DFF8FCA0 		ldr	r10, .L2531+28
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33805              		.loc 1 4038 43 view .LVU9126
 33806 0de8 DFF8FC90 		ldr	r9, .L2531+32
 33807              	.LVL2602:
4038:src/xeq.c     **** 		      //exclude stack lift if there is something in the input line AND if NOT running code i.e. X
 33808              		.loc 1 4038 29 view .LVU9127
 33809 0dec DAF80020 		ldr	r2, [r10]
 33810 0df0 D9F80030 		ldr	r3, [r9]
 33811 0df4 1343     		orrs	r3, r2, r3
 33812 0df6 5BD0     		beq	.L2521
4042:src/xeq.c     **** 		      lift();
 33813              		.loc 1 4042 9 is_stmt 1 view .LVU9128
 33814              	.LBB4251:
 33815              	.LBI4251:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 33816              		.loc 1 1226 6 view .LVU9129
 33817              	.LBB4252:
1227:src/xeq.c     **** 
 33818              		.loc 1 1227 2 view .LVU9130
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33819              		.loc 1 1229 2 view .LVU9131
 33820 0df8 FFF7FEFF 		bl	process_cmdline.part.0
 33821              	.LVL2603:
 33822 0dfc A5E4     		b	.L2244
 33823              	.LVL2604:
 33824              	.L2513:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33825              		.loc 1 1229 2 is_stmt 0 view .LVU9132
 33826              	.LBE4252:
 33827              	.LBE4251:
 33828              	.LBB4253:
 33829              	.LBB4217:
 33830 0dfe FFF7FEFF 		bl	process_cmdline.part.0
 33831              	.LVL2605:
 33832 0e02 5BE6     		b	.L2247
 33833              	.L2511:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 33834              		.loc 1 1229 2 view .LVU9133
 33835              	.LBE4217:
 33836              	.LBE4253:
4066:src/xeq.c     **** 		else
 33837              		.loc 1 4066 4 is_stmt 1 view .LVU9134
ARM GAS  /tmp/cc7LeJ71.s 			page 853


 33838 0e04 FFF7FEFF 		bl	sigma_plus
 33839              	.LVL2606:
 33840 0e08 1BE6     		b	.L2252
 33841              	.L2510:
 33842              	.LBB4254:
 33843              	.LBB4200:
4066:src/xeq.c     **** 		else
 33844              		.loc 1 4066 4 is_stmt 0 view .LVU9135
 33845 0e0a FFF7FEFF 		bl	process_cmdline.part.0
 33846              	.LVL2607:
 33847 0e0e 0AE6     		b	.L2250
 33848              	.L2234:
 33849              	.LBE4200:
 33850              	.LBE4254:
 33851              	.LBB4255:
 33852              	.LBB4249:
3277:src/xeq.c     **** 			if (CmdLineLength > 1)
 33853              		.loc 1 3277 3 is_stmt 1 view .LVU9136
3277:src/xeq.c     **** 			if (CmdLineLength > 1)
 33854              		.loc 1 3277 6 is_stmt 0 view .LVU9137
 33855 0e10 94F82030 		ldrb	r3, [r4, #32]	@ zero_extendqisi2
 33856 0e14 2D2B     		cmp	r3, #45
 33857 0e16 38D0     		beq	.L2522
3281:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33858              		.loc 1 3281 10 is_stmt 1 view .LVU9138
3281:src/xeq.c     **** 			xcopy(Cmdline+1, Cmdline, CmdLineLength);
 33859              		.loc 1 3281 13 is_stmt 0 view .LVU9139
 33860 0e18 122A     		cmp	r2, #18
 33861 0e1a 3FF69FAC 		bhi	.L2176
3282:src/xeq.c     **** 			Cmdline[0] = '-';
 33862              		.loc 1 3282 4 is_stmt 1 view .LVU9140
 33863 0e1e 2E49     		ldr	r1, .L2531+16
 33864 0e20 DFF8BCB0 		ldr	fp, .L2531+24
 33865 0e24 481C     		adds	r0, r1, #1
 33866 0e26 FFF7FEFF 		bl	xcopy
 33867              	.LVL2608:
3283:src/xeq.c     **** 			CmdLineLength++;
 33868              		.loc 1 3283 4 view .LVU9141
3284:src/xeq.c     **** 		}
 33869              		.loc 1 3284 17 is_stmt 0 view .LVU9142
 33870 0e2a 227F     		ldrb	r2, [r4, #28]	@ zero_extendqisi2
 33871 0e2c DBF80030 		ldr	r3, [fp]
 33872 0e30 0132     		adds	r2, r2, #1
3283:src/xeq.c     **** 			CmdLineLength++;
 33873              		.loc 1 3283 15 view .LVU9143
 33874 0e32 2D21     		movs	r1, #45
3284:src/xeq.c     **** 		}
 33875              		.loc 1 3284 17 view .LVU9144
 33876 0e34 2277     		strb	r2, [r4, #28]
3283:src/xeq.c     **** 			CmdLineLength++;
 33877              		.loc 1 3283 15 view .LVU9145
 33878 0e36 84F82010 		strb	r1, [r4, #32]
3284:src/xeq.c     **** 		}
 33879              		.loc 1 3284 4 is_stmt 1 view .LVU9146
 33880 0e3a FFF7CCB9 		b	.L2179
 33881              	.LVL2609:
 33882              	.L2516:
ARM GAS  /tmp/cc7LeJ71.s 			page 854


3284:src/xeq.c     **** 		}
 33883              		.loc 1 3284 4 is_stmt 0 view .LVU9147
 33884              	.LBE4249:
 33885              	.LBE4255:
 33886              	.LBE4266:
 33887              	.LBE4600:
 33888              	.LBB4601:
 33889              	.LBB4322:
 33890              	.LBB4315:
 33891              	.LBB4312:
4777:src/xeq.c     **** 					setlastX();
 33892              		.loc 1 4777 7 is_stmt 1 view .LVU9148
 33893 0e3e 5046     		mov	r0, r10
 33894 0e40 FFF7FEFF 		bl	set_NaN
 33895              	.LVL2610:
 33896 0e44 01E7     		b	.L2282
 33897              	.LVL2611:
 33898              	.L2239:
4777:src/xeq.c     **** 					setlastX();
 33899              		.loc 1 4777 7 is_stmt 0 view .LVU9149
 33900              	.LBE4312:
 33901              	.LBE4315:
 33902              	.LBE4322:
 33903              	.LBE4601:
 33904              	.LBB4602:
 33905              	.LBB4267:
4033:src/xeq.c     **** 		break;
 33906              		.loc 1 4033 4 is_stmt 1 view .LVU9150
 33907 0e46 DFF898B0 		ldr	fp, .L2531+24
 33908 0e4a 3F20     		movs	r0, #63
 33909 0e4c FFF7FEFF 		bl	clrx
 33910              	.LVL2612:
 33911 0e50 DBF80030 		ldr	r3, [fp]
 33912 0e54 FFF7BFB9 		b	.L2179
 33913              	.LVL2613:
 33914              	.L2517:
4033:src/xeq.c     **** 		break;
 33915              		.loc 1 4033 4 is_stmt 0 view .LVU9151
 33916              	.LBE4267:
 33917              	.LBE4602:
 33918              	.LBB4603:
 33919              	.LBB4447:
 33920              	.LBB4440:
 33921              	.LBB4438:
4853:src/xeq.c     **** 					setlastX();
 33922              		.loc 1 4853 7 is_stmt 1 view .LVU9152
 33923 0e58 5046     		mov	r0, r10
 33924 0e5a FFF7FEFF 		bl	set_NaN
 33925              	.LVL2614:
 33926 0e5e 1FE7     		b	.L2290
 33927              	.LVL2615:
 33928              	.L2518:
4853:src/xeq.c     **** 					setlastX();
 33929              		.loc 1 4853 7 is_stmt 0 view .LVU9153
 33930              	.LBE4438:
 33931              	.LBE4440:
 33932              	.LBE4447:
ARM GAS  /tmp/cc7LeJ71.s 			page 855


 33933              	.LBE4603:
 33934              	.LBB4604:
 33935              	.LBB4526:
 33936              	.LBB4521:
 33937              	.LBB4520:
4701:src/xeq.c     **** 					setlastX();
 33938              		.loc 1 4701 7 is_stmt 1 view .LVU9154
 33939 0e60 5046     		mov	r0, r10
 33940 0e62 FFF7FEFF 		bl	set_NaN
 33941              	.LVL2616:
 33942 0e66 51E7     		b	.L2274
 33943              	.LVL2617:
 33944              	.L2520:
4701:src/xeq.c     **** 					setlastX();
 33945              		.loc 1 4701 7 is_stmt 0 view .LVU9155
 33946              	.LBE4520:
 33947              	.LBE4521:
 33948              	.LBE4526:
 33949              	.LBE4604:
 33950              	.LBB4605:
 33951              	.LBB4268:
4029:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33952              		.loc 1 4029 5 is_stmt 1 view .LVU9156
 33953 0e68 DFF874B0 		ldr	fp, .L2531+24
4029:src/xeq.c     **** 			else if (Cmdline[CmdLineLength] == '.')
 33954              		.loc 1 4029 16 is_stmt 0 view .LVU9157
 33955 0e6c 0022     		movs	r2, #0
 33956 0e6e DBF80030 		ldr	r3, [fp]
 33957 0e72 6277     		strb	r2, [r4, #29]
 33958 0e74 FFF7AFB9 		b	.L2179
 33959              	.L2519:
4023:src/xeq.c     **** 				break;
 33960              		.loc 1 4023 5 is_stmt 1 view .LVU9158
 33961 0e78 DFF864B0 		ldr	fp, .L2531+24
4023:src/xeq.c     **** 				break;
 33962              		.loc 1 4023 30 is_stmt 0 view .LVU9159
 33963 0e7c 4521     		movs	r1, #69
 33964 0e7e DBF80030 		ldr	r3, [fp]
 33965 0e82 82F82010 		strb	r1, [r2, #32]
4024:src/xeq.c     **** 			}
 33966              		.loc 1 4024 5 is_stmt 1 view .LVU9160
 33967 0e86 FFF7A6B9 		b	.L2179
 33968              	.LVL2618:
 33969              	.L2522:
 33970              	.LBB4256:
 33971              	.LBB4250:
3278:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33972              		.loc 1 3278 4 view .LVU9161
3278:src/xeq.c     **** 				xcopy(Cmdline, Cmdline+1, CmdLineLength);
 33973              		.loc 1 3278 7 is_stmt 0 view .LVU9162
 33974 0e8a 012A     		cmp	r2, #1
 33975 0e8c 03D9     		bls	.L2236
3279:src/xeq.c     **** 			CmdLineLength--;
 33976              		.loc 1 3279 5 is_stmt 1 view .LVU9163
 33977 0e8e 1349     		ldr	r1, .L2531+20
 33978 0e90 481E     		subs	r0, r1, #1
 33979 0e92 FFF7FEFF 		bl	xcopy
ARM GAS  /tmp/cc7LeJ71.s 			page 856


 33980              	.LVL2619:
 33981              	.L2236:
3280:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33982              		.loc 1 3280 4 view .LVU9164
3280:src/xeq.c     **** 		} else if (CmdLineLength < CMDLINELEN) {
 33983              		.loc 1 3280 17 is_stmt 0 view .LVU9165
 33984 0e96 237F     		ldrb	r3, [r4, #28]	@ zero_extendqisi2
 33985 0e98 DFF844B0 		ldr	fp, .L2531+24
 33986 0e9c 013B     		subs	r3, r3, #1
 33987 0e9e 2377     		strb	r3, [r4, #28]
 33988 0ea0 DBF80030 		ldr	r3, [fp]
 33989 0ea4 FFF797B9 		b	.L2179
 33990              	.L2230:
 33991              	.LBE4250:
 33992              	.LBE4256:
3948:src/xeq.c     **** 			CmdLineDot++;
 33993              		.loc 1 3948 5 is_stmt 1 view .LVU9166
 33994 0ea8 0020     		movs	r0, #0
 33995 0eaa FFF7FEFF 		bl	digit
 33996              	.LVL2620:
 33997 0eae 2FE6     		b	.L2231
 33998              	.LVL2621:
 33999              	.L2521:
4040:src/xeq.c     **** 		    } else {                       //JM
 34000              		.loc 1 4040 9 view .LVU9167
 34001              	.LBB4257:
 34002              	.LBI4257:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 34003              		.loc 1 1226 6 view .LVU9168
 34004              	.LBB4258:
1227:src/xeq.c     **** 
 34005              		.loc 1 1227 2 view .LVU9169
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34006              		.loc 1 1229 2 view .LVU9170
 34007 0eb0 DFF82CB0 		ldr	fp, .L2531+24
 34008 0eb4 FFF7FEFF 		bl	process_cmdline.part.0
 34009              	.LVL2622:
 34010 0eb8 DBF80030 		ldr	r3, [fp]
 34011 0ebc FFF78BB9 		b	.L2179
 34012              	.LVL2623:
 34013              	.L2515:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 34014              		.loc 1 1229 2 is_stmt 0 view .LVU9171
 34015              	.LBE4258:
 34016              	.LBE4257:
 34017              	.LBB4259:
3995:src/xeq.c     **** 			CmdLineEex = CmdLineLength;
 34018              		.loc 1 3995 5 is_stmt 1 view .LVU9172
 34019 0ec0 0120     		movs	r0, #1
 34020 0ec2 FFF7FEFF 		bl	digit
 34021              	.LVL2624:
 34022 0ec6 5FE6     		b	.L2232
 34023              	.L2532:
 34024              		.align	2
 34025              	.L2531:
 34026 0ec8 00000000 		.word	dyfuncs
 34027 0ecc 00000000 		.word	trifuncs
ARM GAS  /tmp/cc7LeJ71.s 			page 857


 34028 0ed0 00000000 		.word	monfuncs
 34029 0ed4 00000000 		.word	XromParams
 34030 0ed8 20000000 		.word	StateWhileOn+32
 34031 0edc 21000000 		.word	StateWhileOn+33
 34032 0ee0 00000000 		.word	Error
 34033 0ee4 00000000 		.word	XromRunning
 34034 0ee8 00000000 		.word	Running
 34035              	.LBE4259:
 34036              	.LBE4268:
 34037              	.LBE4605:
 34038              		.cfi_endproc
 34039              	.LFE251:
 34041              		.section	.text.xeq_single,"ax",%progbits
 34042              		.align	1
 34043              		.p2align 2,,3
 34044              		.syntax unified
 34045              		.thumb
 34046              		.thumb_func
 34047              		.fpu fpv4-sp-d16
 34049              	xeq_single:
 34050              	.LFB252:
5471:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 34051              		.loc 1 5471 30 view -0
 34052              		.cfi_startproc
 34053              		@ args = 0, pretend = 0, frame = 0
 34054              		@ frame_needed = 0, uses_anonymous_args = 0
5472:src/xeq.c     **** 
 34055              		.loc 1 5472 2 view .LVU9174
5472:src/xeq.c     **** 
 34056              		.loc 1 5472 28 is_stmt 0 view .LVU9175
 34057 0000 074B     		ldr	r3, .L2535
 34058 0002 1B68     		ldr	r3, [r3]
5471:src/xeq.c     **** 	const opcode op = getprog(state_pc());
 34059              		.loc 1 5471 30 view .LVU9176
 34060 0004 10B5     		push	{r4, lr}
 34061              		.cfi_def_cfa_offset 8
 34062              		.cfi_offset 4, -8
 34063              		.cfi_offset 14, -4
5472:src/xeq.c     **** 
 34064              		.loc 1 5472 20 view .LVU9177
 34065 0006 B3F8E007 		ldrh	r0, [r3, #2016]
 34066 000a FFF7FEFF 		bl	getprog
 34067              	.LVL2625:
 34068 000e 0446     		mov	r4, r0
 34069              	.LVL2626:
5474:src/xeq.c     **** 	xeq(op);
 34070              		.loc 1 5474 2 is_stmt 1 view .LVU9178
 34071 0010 FFF7FEFF 		bl	incpc
 34072              	.LVL2627:
5475:src/xeq.c     **** }
 34073              		.loc 1 5475 2 view .LVU9179
 34074 0014 2046     		mov	r0, r4
5476:src/xeq.c     **** 
 34075              		.loc 1 5476 1 is_stmt 0 view .LVU9180
 34076 0016 BDE81040 		pop	{r4, lr}
 34077              		.cfi_restore 14
 34078              		.cfi_restore 4
ARM GAS  /tmp/cc7LeJ71.s 			page 858


 34079              		.cfi_def_cfa_offset 0
 34080              	.LVL2628:
5475:src/xeq.c     **** }
 34081              		.loc 1 5475 2 view .LVU9181
 34082 001a FFF7FEBF 		b	xeq
 34083              	.LVL2629:
 34084              	.L2536:
5475:src/xeq.c     **** }
 34085              		.loc 1 5475 2 view .LVU9182
 34086 001e 00BF     		.align	2
 34087              	.L2535:
 34088 0020 00000000 		.word	main_ram
 34089              		.cfi_endproc
 34090              	.LFE252:
 34092              		.section	.text.xeq_xrom2,"ax",%progbits
 34093              		.align	1
 34094              		.p2align 2,,3
 34095              		.syntax unified
 34096              		.thumb
 34097              		.thumb_func
 34098              		.fpu fpv4-sp-d16
 34100              	xeq_xrom2:
 34101              	.LFB253:
5483:src/xeq.c     **** #endif
 34102              		.loc 1 5483 29 is_stmt 1 view -0
 34103              		.cfi_startproc
 34104              		@ args = 0, pretend = 0, frame = 0
 34105              		@ frame_needed = 0, uses_anonymous_args = 0
5485:src/xeq.c     **** 	/* Now if we've stepped into the XROM area, keep going until
 34106              		.loc 1 5485 2 view .LVU9184
 34107              	.LVL2630:
5489:src/xeq.c     **** 		XromRunning = 1;
 34108              		.loc 1 5489 4 view .LVU9185
5489:src/xeq.c     **** 		XromRunning = 1;
 34109              		.loc 1 5489 10 view .LVU9186
5483:src/xeq.c     **** #endif
 34110              		.loc 1 5483 29 is_stmt 0 view .LVU9187
 34111 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 34112              		.cfi_def_cfa_offset 32
 34113              		.cfi_offset 4, -32
 34114              		.cfi_offset 5, -28
 34115              		.cfi_offset 6, -24
 34116              		.cfi_offset 7, -20
 34117              		.cfi_offset 8, -16
 34118              		.cfi_offset 9, -12
 34119              		.cfi_offset 10, -8
 34120              		.cfi_offset 14, -4
5489:src/xeq.c     **** 		XromRunning = 1;
 34121              		.loc 1 5489 11 view .LVU9188
 34122 0004 1A4D     		ldr	r5, .L2549
 34123 0006 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5489:src/xeq.c     **** 		XromRunning = 1;
 34124              		.loc 1 5489 10 view .LVU9189
 34125 0008 53BB     		cbnz	r3, .L2537
 34126 000a DFF87080 		ldr	r8, .L2549+12
5490:src/xeq.c     **** 		xeq_single();
 34127              		.loc 1 5490 15 view .LVU9190
ARM GAS  /tmp/cc7LeJ71.s 			page 859


 34128 000e 194F     		ldr	r7, .L2549+4
 34129              	.LBB4612:
 34130              	.LBB4613:
4484:src/xeq.c     **** 		Busy = 1;
 34131              		.loc 1 4484 6 view .LVU9191
 34132 0010 DFF86CA0 		ldr	r10, .L2549+16
4484:src/xeq.c     **** 		Busy = 1;
 34133              		.loc 1 4484 15 view .LVU9192
 34134 0014 DFF86C90 		ldr	r9, .L2549+20
 34135 0018 03F0FF04 		and	r4, r3, #255
 34136              	.LVL2631:
 34137              	.L2538:
4484:src/xeq.c     **** 		Busy = 1;
 34138              		.loc 1 4484 15 view .LVU9193
 34139              	.LBE4613:
 34140              	.LBE4612:
5490:src/xeq.c     **** 		xeq_single();
 34141              		.loc 1 5490 3 is_stmt 1 view .LVU9194
 34142              	.LBB4620:
 34143              	.LBI4620:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 34144              		.loc 1 185 5 view .LVU9195
 34145              	.LBB4621:
 186:src/xeq.c     **** }
 34146              		.loc 1 186 2 view .LVU9196
 186:src/xeq.c     **** }
 34147              		.loc 1 186 9 is_stmt 0 view .LVU9197
 34148 001c D8F80020 		ldr	r2, [r8]
 34149 0020 B2F8E037 		ldrh	r3, [r2, #2016]
 34150              	.LBE4621:
 34151              	.LBE4620:
5489:src/xeq.c     **** 		XromRunning = 1;
 34152              		.loc 1 5489 18 view .LVU9198
 34153 0024 9B0B     		lsrs	r3, r3, #14
5490:src/xeq.c     **** 		xeq_single();
 34154              		.loc 1 5490 15 view .LVU9199
 34155 0026 0126     		movs	r6, #1
5489:src/xeq.c     **** 		XromRunning = 1;
 34156              		.loc 1 5489 18 view .LVU9200
 34157 0028 032B     		cmp	r3, #3
5493:src/xeq.c     **** 			busy();
 34158              		.loc 1 5493 6 view .LVU9201
 34159 002a 3444     		add	r4, r4, r6
 34160              	.LVL2632:
5489:src/xeq.c     **** 		XromRunning = 1;
 34161              		.loc 1 5489 18 view .LVU9202
 34162 002c 18D1     		bne	.L2537
5489:src/xeq.c     **** 		XromRunning = 1;
 34163              		.loc 1 5489 31 discriminator 2 view .LVU9203
 34164 002e B2F9E237 		ldrsh	r3, [r2, #2018]
 34165 0032 ABB1     		cbz	r3, .L2537
5490:src/xeq.c     **** 		xeq_single();
 34166              		.loc 1 5490 15 view .LVU9204
 34167 0034 3E60     		str	r6, [r7]
5491:src/xeq.c     **** 		XromRunning = 0;
 34168              		.loc 1 5491 3 is_stmt 1 view .LVU9205
 34169 0036 FFF7FEFF 		bl	xeq_single
ARM GAS  /tmp/cc7LeJ71.s 			page 860


 34170              	.LVL2633:
5492:src/xeq.c     **** 		if ((++count & 31) == 0)
 34171              		.loc 1 5492 3 view .LVU9206
 34172              	.LBB4622:
 34173              	.LBB4616:
4484:src/xeq.c     **** 		Busy = 1;
 34174              		.loc 1 4484 12 is_stmt 0 view .LVU9207
 34175 003a D9F80030 		ldr	r3, [r9]
 34176 003e DAF80010 		ldr	r1, [r10]
 34177 0042 1943     		orrs	r1, r1, r3
 34178              	.LBE4616:
 34179              	.LBE4622:
5493:src/xeq.c     **** 			busy();
 34180              		.loc 1 5493 16 view .LVU9208
 34181 0044 04F01F03 		and	r3, r4, #31
5492:src/xeq.c     **** 		if ((++count & 31) == 0)
 34182              		.loc 1 5492 15 view .LVU9209
 34183 0048 0022     		movs	r2, #0
 34184              	.LBB4623:
 34185              	.LBB4617:
4484:src/xeq.c     **** 		Busy = 1;
 34186              		.loc 1 4484 12 view .LVU9210
 34187 004a 1943     		orrs	r1, r1, r3
 34188              	.LBE4617:
 34189              	.LBE4623:
5492:src/xeq.c     **** 		if ((++count & 31) == 0)
 34190              		.loc 1 5492 15 view .LVU9211
 34191 004c 3A60     		str	r2, [r7]
5493:src/xeq.c     **** 			busy();
 34192              		.loc 1 5493 3 is_stmt 1 view .LVU9212
 34193              	.LVL2634:
5494:src/xeq.c     **** 		  if (Pause)
 34194              		.loc 1 5494 4 view .LVU9213
 34195              	.LBB4624:
 34196              	.LBI4612:
4469:src/xeq.c     **** {
 34197              		.loc 1 4469 6 view .LVU9214
 34198              	.LBB4618:
4474:src/xeq.c     **** 
 34199              		.loc 1 4474 12 view .LVU9215
4479:src/xeq.c     **** 
 34200              		.loc 1 4479 17 view .LVU9216
4484:src/xeq.c     **** 		Busy = 1;
 34201              		.loc 1 4484 2 view .LVU9217
4484:src/xeq.c     **** 		Busy = 1;
 34202              		.loc 1 4484 12 is_stmt 0 view .LVU9218
 34203 004e 09D0     		beq	.L2548
 34204              	.L2539:
 34205              	.LBE4618:
 34206              	.LBE4624:
5495:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 34207              		.loc 1 5495 5 is_stmt 1 view .LVU9219
5498:src/xeq.c     **** 		
 34208              		.loc 1 5498 4 view .LVU9220
5489:src/xeq.c     **** 		XromRunning = 1;
 34209              		.loc 1 5489 10 view .LVU9221
5495:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
ARM GAS  /tmp/cc7LeJ71.s 			page 861


 34210              		.loc 1 5495 9 is_stmt 0 view .LVU9222
 34211 0050 2A78     		ldrb	r2, [r5]	@ zero_extendqisi2
5489:src/xeq.c     **** 		XromRunning = 1;
 34212              		.loc 1 5489 11 view .LVU9223
 34213 0052 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5495:src/xeq.c     **** 			// Special case: WHO has a PSE built in.
 34214              		.loc 1 5495 8 view .LVU9224
 34215 0054 12B1     		cbz	r2, .L2540
5498:src/xeq.c     **** 		
 34216              		.loc 1 5498 12 view .LVU9225
 34217 0056 0122     		movs	r2, #1
 34218 0058 C9F80020 		str	r2, [r9]
 34219              	.L2540:
5489:src/xeq.c     **** 		XromRunning = 1;
 34220              		.loc 1 5489 10 view .LVU9226
 34221 005c 002B     		cmp	r3, #0
 34222 005e DDD0     		beq	.L2538
 34223              	.LVL2635:
 34224              	.L2537:
5501:src/xeq.c     **** 
 34225              		.loc 1 5501 1 view .LVU9227
 34226 0060 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 34227              	.LVL2636:
 34228              	.L2548:
 34229              	.LBB4625:
 34230              	.LBB4619:
 34231              	.LBB4614:
 34232              	.LBI4614:
4469:src/xeq.c     **** {
 34233              		.loc 1 4469 6 is_stmt 1 view .LVU9228
 34234              	.LBB4615:
4485:src/xeq.c     **** 		message("Wait...", NULL);
 34235              		.loc 1 4485 3 view .LVU9229
4486:src/xeq.c     **** 	}
 34236              		.loc 1 4486 3 is_stmt 0 view .LVU9230
 34237 0064 0448     		ldr	r0, .L2549+8
4485:src/xeq.c     **** 		message("Wait...", NULL);
 34238              		.loc 1 4485 8 view .LVU9231
 34239 0066 CAF80060 		str	r6, [r10]
4486:src/xeq.c     **** 	}
 34240              		.loc 1 4486 3 is_stmt 1 view .LVU9232
 34241 006a FFF7FEFF 		bl	message
 34242              	.LVL2637:
4488:src/xeq.c     **** 
 34243              		.loc 1 4488 1 is_stmt 0 view .LVU9233
 34244 006e EFE7     		b	.L2539
 34245              	.L2550:
 34246              		.align	2
 34247              	.L2549:
 34248 0070 00000000 		.word	Pause
 34249 0074 00000000 		.word	XromRunning
 34250 0078 00000000 		.word	.LC7
 34251 007c 00000000 		.word	main_ram
 34252 0080 00000000 		.word	Busy
 34253 0084 00000000 		.word	Running
 34254              	.LBE4615:
 34255              	.LBE4614:
ARM GAS  /tmp/cc7LeJ71.s 			page 862


 34256              	.LBE4619:
 34257              	.LBE4625:
 34258              		.cfi_endproc
 34259              	.LFE253:
 34261              		.section	.text.xeq_xrom,"ax",%progbits
 34262              		.align	1
 34263              		.p2align 2,,3
 34264              		.global	xeq_xrom
 34265              		.syntax unified
 34266              		.thumb
 34267              		.thumb_func
 34268              		.fpu fpv4-sp-d16
 34270              	xeq_xrom:
 34271              	.LFB254:
5504:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34272              		.loc 1 5504 21 is_stmt 1 view -0
 34273              		.cfi_startproc
 34274              		@ args = 0, pretend = 0, frame = 0
 34275              		@ frame_needed = 0, uses_anonymous_args = 0
 34276              		@ link register save eliminated.
5506:src/xeq.c     **** 		xeq_xrom2();
 34277              		.loc 1 5506 2 view .LVU9235
5506:src/xeq.c     **** 		xeq_xrom2();
 34278              		.loc 1 5506 6 is_stmt 0 view .LVU9236
 34279 0000 034B     		ldr	r3, .L2554
5506:src/xeq.c     **** 		xeq_xrom2();
 34280              		.loc 1 5506 5 view .LVU9237
 34281 0002 93F91730 		ldrsb	r3, [r3, #23]
 34282 0006 002B     		cmp	r3, #0
 34283 0008 00DA     		bge	.L2553
5508:src/xeq.c     **** #endif
 34284              		.loc 1 5508 1 view .LVU9238
 34285 000a 7047     		bx	lr
 34286              	.L2553:
5507:src/xeq.c     **** }
 34287              		.loc 1 5507 3 is_stmt 1 view .LVU9239
 34288 000c FFF7FEBF 		b	xeq_xrom2
 34289              	.LVL2638:
 34290              	.L2555:
 34291              		.align	2
 34292              	.L2554:
 34293 0010 00000000 		.word	StateWhileOn
 34294              		.cfi_endproc
 34295              	.LFE254:
 34297              		.section	.text.dispatch_xrom,"ax",%progbits
 34298              		.align	1
 34299              		.p2align 2,,3
 34300              		.syntax unified
 34301              		.thumb
 34302              		.thumb_func
 34303              		.fpu fpv4-sp-d16
 34305              	dispatch_xrom:
 34306              	.LVL2639:
 34307              	.LFB238:
4521:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 34308              		.loc 1 4521 1 view -0
 34309              		.cfi_startproc
ARM GAS  /tmp/cc7LeJ71.s 			page 863


 34310              		@ args = 0, pretend = 0, frame = 0
 34311              		@ frame_needed = 0, uses_anonymous_args = 0
4522:src/xeq.c     **** 	if (xp == NULL)
 34312              		.loc 1 4522 2 view .LVU9241
 34313              	.LBB4626:
 34314              	.LBI4626:
4504:src/xeq.c     **** {
 34315              		.loc 1 4504 24 view .LVU9242
 34316              	.LBB4627:
4506:src/xeq.c     **** 	if (xp < xrom)
 34317              		.loc 1 4506 2 view .LVU9243
4507:src/xeq.c     **** 		return NULL;
 34318              		.loc 1 4507 5 is_stmt 0 view .LVU9244
 34319 0000 1749     		ldr	r1, .L2567
4506:src/xeq.c     **** 	if (xp < xrom)
 34320              		.loc 1 4506 59 view .LVU9245
 34321 0002 20F00100 		bic	r0, r0, #1
 34322              	.LVL2640:
4507:src/xeq.c     **** 		return NULL;
 34323              		.loc 1 4507 2 is_stmt 1 view .LVU9246
4507:src/xeq.c     **** 		return NULL;
 34324              		.loc 1 4507 5 is_stmt 0 view .LVU9247
 34325 0006 8842     		cmp	r0, r1
 34326 0008 24D3     		bcc	.L2559
4511:src/xeq.c     **** 		return NULL;
 34327              		.loc 1 4511 2 is_stmt 1 view .LVU9248
4511:src/xeq.c     **** 		return NULL;
 34328              		.loc 1 4511 17 is_stmt 0 view .LVU9249
 34329 000a 164B     		ldr	r3, .L2567+4
 34330 000c 1B88     		ldrh	r3, [r3]
 34331 000e 01EB4303 		add	r3, r1, r3, lsl #1
4511:src/xeq.c     **** 		return NULL;
 34332              		.loc 1 4511 5 view .LVU9250
 34333 0012 9842     		cmp	r0, r3
 34334 0014 1ED2     		bcs	.L2559
 34335              	.LVL2641:
4511:src/xeq.c     **** 		return NULL;
 34336              		.loc 1 4511 5 view .LVU9251
 34337              	.LBE4627:
 34338              	.LBE4626:
4523:src/xeq.c     **** 		return 0;
 34339              		.loc 1 4523 2 is_stmt 1 view .LVU9252
4523:src/xeq.c     **** 		return 0;
 34340              		.loc 1 4523 5 is_stmt 0 view .LVU9253
 34341 0016 E0B1     		cbz	r0, .L2563
4526:src/xeq.c     **** 	XromRunning = 1;
 34342              		.loc 1 4526 2 is_stmt 1 view .LVU9254
4526:src/xeq.c     **** 	XromRunning = 1;
 34343              		.loc 1 4526 18 is_stmt 0 view .LVU9255
 34344 0018 134B     		ldr	r3, .L2567+8
 34345 001a 1A68     		ldr	r2, [r3]
4528:src/xeq.c     **** 	xeq_xrom();
 34346              		.loc 1 4528 9 view .LVU9256
 34347 001c 401A     		subs	r0, r0, r1
 34348              	.LVL2642:
4526:src/xeq.c     **** 	XromRunning = 1;
 34349              		.loc 1 4526 18 view .LVU9257
ARM GAS  /tmp/cc7LeJ71.s 			page 864


 34350 001e B2F8DE37 		ldrh	r3, [r2, #2014]
4528:src/xeq.c     **** 	xeq_xrom();
 34351              		.loc 1 4528 2 view .LVU9258
 34352 0022 B2F8E027 		ldrh	r2, [r2, #2016]
4528:src/xeq.c     **** 	xeq_xrom();
 34353              		.loc 1 4528 9 view .LVU9259
 34354 0026 4010     		asrs	r0, r0, #1
 34355              	.LVL2643:
4521:src/xeq.c     **** 	const s_opcode *xp = check_for_xrom_address(fp);
 34356              		.loc 1 4521 1 view .LVU9260
 34357 0028 70B5     		push	{r4, r5, r6, lr}
 34358              		.cfi_def_cfa_offset 16
 34359              		.cfi_offset 4, -16
 34360              		.cfi_offset 5, -12
 34361              		.cfi_offset 6, -8
 34362              		.cfi_offset 14, -4
4528:src/xeq.c     **** 	xeq_xrom();
 34363              		.loc 1 4528 9 view .LVU9261
 34364 002a 0130     		adds	r0, r0, #1
4527:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34365              		.loc 1 4527 14 view .LVU9262
 34366 002c 0124     		movs	r4, #1
4526:src/xeq.c     **** 	XromRunning = 1;
 34367              		.loc 1 4526 16 view .LVU9263
 34368 002e 0F4E     		ldr	r6, .L2567+12
4527:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34369              		.loc 1 4527 14 view .LVU9264
 34370 0030 0F4D     		ldr	r5, .L2567+16
4526:src/xeq.c     **** 	XromRunning = 1;
 34371              		.loc 1 4526 18 view .LVU9265
 34372 0032 43F34A13 		sbfx	r3, r3, #5, #11
4528:src/xeq.c     **** 	xeq_xrom();
 34373              		.loc 1 4528 2 view .LVU9266
 34374 0036 40F44040 		orr	r0, r0, #49152
 34375 003a 2146     		mov	r1, r4
4526:src/xeq.c     **** 	XromRunning = 1;
 34376              		.loc 1 4526 18 view .LVU9267
 34377 003c 3360     		str	r3, [r6]
4527:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34378              		.loc 1 4527 2 is_stmt 1 view .LVU9268
4527:src/xeq.c     **** 	gsbgto(addrXROM((xp - xrom) + 1), 1, state_pc());
 34379              		.loc 1 4527 14 is_stmt 0 view .LVU9269
 34380 003e 2C60     		str	r4, [r5]
4528:src/xeq.c     **** 	xeq_xrom();
 34381              		.loc 1 4528 2 is_stmt 1 view .LVU9270
 34382 0040 FFF7FEFF 		bl	gsbgto
 34383              	.LVL2644:
4529:src/xeq.c     **** 	//	print_debug(999,0);
 34384              		.loc 1 4529 2 view .LVU9271
 34385              	.LBB4628:
 34386              	.LBI4628:
5504:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34387              		.loc 1 5504 6 view .LVU9272
 34388              	.LBB4629:
5506:src/xeq.c     **** 		xeq_xrom2();
 34389              		.loc 1 5506 2 view .LVU9273
5506:src/xeq.c     **** 		xeq_xrom2();
ARM GAS  /tmp/cc7LeJ71.s 			page 865


 34390              		.loc 1 5506 6 is_stmt 0 view .LVU9274
 34391 0044 0B4B     		ldr	r3, .L2567+20
5506:src/xeq.c     **** 		xeq_xrom2();
 34392              		.loc 1 5506 5 view .LVU9275
 34393 0046 93F91730 		ldrsb	r3, [r3, #23]
 34394 004a 002B     		cmp	r3, #0
 34395 004c 04DA     		bge	.L2566
 34396              	.LBE4629:
 34397              	.LBE4628:
4531:src/xeq.c     **** }
 34398              		.loc 1 4531 9 view .LVU9276
 34399 004e 2046     		mov	r0, r4
 34400              	.LVL2645:
4532:src/xeq.c     **** 
 34401              		.loc 1 4532 1 view .LVU9277
 34402 0050 70BD     		pop	{r4, r5, r6, pc}
 34403              	.LVL2646:
 34404              	.L2563:
 34405              		.cfi_def_cfa_offset 0
 34406              		.cfi_restore 4
 34407              		.cfi_restore 5
 34408              		.cfi_restore 6
 34409              		.cfi_restore 14
4532:src/xeq.c     **** 
 34410              		.loc 1 4532 1 view .LVU9278
 34411 0052 7047     		bx	lr
 34412              	.LVL2647:
 34413              	.L2559:
4524:src/xeq.c     **** 	// set_lift();
 34414              		.loc 1 4524 10 view .LVU9279
 34415 0054 0020     		movs	r0, #0
 34416              	.LVL2648:
4524:src/xeq.c     **** 	// set_lift();
 34417              		.loc 1 4524 10 view .LVU9280
 34418 0056 7047     		bx	lr
 34419              	.LVL2649:
 34420              	.L2566:
 34421              		.cfi_def_cfa_offset 16
 34422              		.cfi_offset 4, -16
 34423              		.cfi_offset 5, -12
 34424              		.cfi_offset 6, -8
 34425              		.cfi_offset 14, -4
 34426              	.LBB4631:
 34427              	.LBB4630:
5507:src/xeq.c     **** }
 34428              		.loc 1 5507 3 is_stmt 1 view .LVU9281
 34429 0058 FFF7FEFF 		bl	xeq_xrom2
 34430              	.LVL2650:
 34431              	.LBE4630:
 34432              	.LBE4631:
4531:src/xeq.c     **** }
 34433              		.loc 1 4531 9 is_stmt 0 view .LVU9282
 34434 005c 2046     		mov	r0, r4
4532:src/xeq.c     **** 
 34435              		.loc 1 4532 1 view .LVU9283
 34436 005e 70BD     		pop	{r4, r5, r6, pc}
 34437              	.L2568:
ARM GAS  /tmp/cc7LeJ71.s 			page 866


 34438              		.align	2
 34439              	.L2567:
 34440 0060 00000000 		.word	xrom
 34441 0064 00000000 		.word	xrom_size
 34442 0068 00000000 		.word	main_ram
 34443 006c 00000000 		.word	UserLocalRegs
 34444 0070 00000000 		.word	XromRunning
 34445 0074 00000000 		.word	StateWhileOn
 34446              		.cfi_endproc
 34447              	.LFE238:
 34449              		.section	.text.op_rs,"ax",%progbits
 34450              		.align	1
 34451              		.p2align 2,,3
 34452              		.global	op_rs
 34453              		.syntax unified
 34454              		.thumb
 34455              		.thumb_func
 34456              		.fpu fpv4-sp-d16
 34458              	op_rs:
 34459              	.LVL2651:
 34460              	.LFB257:
5606:src/xeq.c     **** #ifndef REALBUILD
 34461              		.loc 1 5606 27 is_stmt 1 view -0
 34462              		.cfi_startproc
 34463              		@ args = 0, pretend = 0, frame = 0
 34464              		@ frame_needed = 0, uses_anonymous_args = 0
5610:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 34465              		.loc 1 5610 2 view .LVU9285
 34466              	.LBB4632:
 34467              	.LBI4632:
 185:src/xeq.c     **** 	return isXROM(state_pc());
 34468              		.loc 1 185 5 view .LVU9286
 34469              	.LBB4633:
 186:src/xeq.c     **** }
 34470              		.loc 1 186 2 view .LVU9287
 34471              	.LBE4633:
 34472              	.LBE4632:
5606:src/xeq.c     **** #ifndef REALBUILD
 34473              		.loc 1 5606 27 is_stmt 0 view .LVU9288
 34474 0000 10B5     		push	{r4, lr}
 34475              		.cfi_def_cfa_offset 8
 34476              		.cfi_offset 4, -8
 34477              		.cfi_offset 14, -4
 34478              	.LBB4635:
 34479              	.LBB4634:
 186:src/xeq.c     **** }
 34480              		.loc 1 186 9 view .LVU9289
 34481 0002 1D4C     		ldr	r4, .L2579
 34482 0004 2268     		ldr	r2, [r4]
 34483 0006 B2F8E037 		ldrh	r3, [r2, #2016]
 34484              	.LBE4634:
 34485              	.LBE4635:
5610:src/xeq.c     **** 		if (State2.trace && (Running || XromRunning)) {
 34486              		.loc 1 5610 5 view .LVU9290
 34487 000a 9B0B     		lsrs	r3, r3, #14
 34488 000c 032B     		cmp	r3, #3
 34489 000e 20D0     		beq	.L2578
ARM GAS  /tmp/cc7LeJ71.s 			page 867


5620:src/xeq.c     **** 		set_running_off();
 34490              		.loc 1 5620 2 is_stmt 1 view .LVU9291
5620:src/xeq.c     **** 		set_running_off();
 34491              		.loc 1 5620 6 is_stmt 0 view .LVU9292
 34492 0010 1A4B     		ldr	r3, .L2579+4
5620:src/xeq.c     **** 		set_running_off();
 34493              		.loc 1 5620 5 view .LVU9293
 34494 0012 1968     		ldr	r1, [r3]
 34495 0014 61B1     		cbz	r1, .L2573
5621:src/xeq.c     **** 	else {
 34496              		.loc 1 5621 3 is_stmt 1 view .LVU9294
 34497              	.LBB4636:
 34498              	.LBI4636:
5823:src/xeq.c     **** 	set_running_off_sst();
 34499              		.loc 1 5823 6 view .LVU9295
 34500              	.LBB4637:
5824:src/xeq.c     **** 	State.entryp = 0;
 34501              		.loc 1 5824 2 view .LVU9296
 34502              	.LBB4638:
 34503              	.LBI4638:
5815:src/xeq.c     **** 	Running = 0;
 34504              		.loc 1 5815 6 view .LVU9297
 34505              	.LBB4639:
5816:src/xeq.c     **** }
 34506              		.loc 1 5816 2 view .LVU9298
5816:src/xeq.c     **** }
 34507              		.loc 1 5816 10 is_stmt 0 view .LVU9299
 34508 0016 0021     		movs	r1, #0
 34509 0018 1960     		str	r1, [r3]
 34510              	.LBE4639:
 34511              	.LBE4638:
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 34512              		.loc 1 5825 2 is_stmt 1 view .LVU9300
5825:src/xeq.c     **** 	dot( RCL_annun, 0);
 34513              		.loc 1 5825 15 is_stmt 0 view .LVU9301
 34514 001a 92F8DD37 		ldrb	r3, [r2, #2013]	@ zero_extendqisi2
 34515 001e 61F30413 		bfi	r3, r1, #4, #1
 34516 0022 82F8DD37 		strb	r3, [r2, #2013]
5826:src/xeq.c     **** }
 34517              		.loc 1 5826 2 is_stmt 1 view .LVU9302
 34518              	.LBE4637:
 34519              	.LBE4636:
5627:src/xeq.c     **** 
 34520              		.loc 1 5627 1 is_stmt 0 view .LVU9303
 34521 0026 BDE81040 		pop	{r4, lr}
 34522              		.cfi_remember_state
 34523              		.cfi_restore 14
 34524              		.cfi_restore 4
 34525              		.cfi_def_cfa_offset 0
 34526              	.LBB4641:
 34527              	.LBB4640:
5826:src/xeq.c     **** }
 34528              		.loc 1 5826 2 view .LVU9304
 34529 002a 8A20     		movs	r0, #138
 34530              	.LVL2652:
5826:src/xeq.c     **** }
 34531              		.loc 1 5826 2 view .LVU9305
ARM GAS  /tmp/cc7LeJ71.s 			page 868


 34532 002c FFF7FEBF 		b	dot
 34533              	.LVL2653:
 34534              	.L2573:
 34535              		.cfi_restore_state
5826:src/xeq.c     **** }
 34536              		.loc 1 5826 2 view .LVU9306
 34537              	.LBE4640:
 34538              	.LBE4641:
5623:src/xeq.c     **** 		if (RetStkPtr == 0)
 34539              		.loc 1 5623 3 is_stmt 1 view .LVU9307
 34540 0030 FFF7FEFF 		bl	set_running_on
 34541              	.LVL2654:
5624:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34542              		.loc 1 5624 3 view .LVU9308
5624:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34543              		.loc 1 5624 7 is_stmt 0 view .LVU9309
 34544 0034 2368     		ldr	r3, [r4]
5624:src/xeq.c     **** 			RetStk[--RetStkPtr] = state_pc();
 34545              		.loc 1 5624 6 view .LVU9310
 34546 0036 B3F9E227 		ldrsh	r2, [r3, #2018]
 34547 003a 4AB9     		cbnz	r2, .L2569
5625:src/xeq.c     **** 	}
 34548              		.loc 1 5625 4 is_stmt 1 view .LVU9311
5625:src/xeq.c     **** 	}
 34549              		.loc 1 5625 10 is_stmt 0 view .LVU9312
 34550 003c 104A     		ldr	r2, .L2579+8
5625:src/xeq.c     **** 	}
 34551              		.loc 1 5625 26 view .LVU9313
 34552 003e B3F8E017 		ldrh	r1, [r3, #2016]
5625:src/xeq.c     **** 	}
 34553              		.loc 1 5625 10 view .LVU9314
 34554 0042 1268     		ldr	r2, [r2]
5625:src/xeq.c     **** 	}
 34555              		.loc 1 5625 24 view .LVU9315
 34556 0044 4FF6FF70 		movw	r0, #65535
 34557 0048 A3F8E207 		strh	r0, [r3, #2018]	@ movhi
 34558 004c 22F8021C 		strh	r1, [r2, #-2]	@ movhi
 34559              	.L2569:
5627:src/xeq.c     **** 
 34560              		.loc 1 5627 1 view .LVU9316
 34561 0050 10BD     		pop	{r4, pc}
 34562              	.LVL2655:
 34563              	.L2578:
5611:src/xeq.c     **** 			Running = XromRunning = 0;
 34564              		.loc 1 5611 3 is_stmt 1 view .LVU9317
5611:src/xeq.c     **** 			Running = XromRunning = 0;
 34565              		.loc 1 5611 7 is_stmt 0 view .LVU9318
 34566 0052 0C4B     		ldr	r3, .L2579+12
5611:src/xeq.c     **** 			Running = XromRunning = 0;
 34567              		.loc 1 5611 6 view .LVU9319
 34568 0054 93F91730 		ldrsb	r3, [r3, #23]
 34569 0058 002B     		cmp	r3, #0
 34570 005a 09DA     		bge	.L2571
5611:src/xeq.c     **** 			Running = XromRunning = 0;
 34571              		.loc 1 5611 24 discriminator 1 view .LVU9320
 34572 005c 074B     		ldr	r3, .L2579+4
5611:src/xeq.c     **** 			Running = XromRunning = 0;
ARM GAS  /tmp/cc7LeJ71.s 			page 869


 34573              		.loc 1 5611 32 discriminator 1 view .LVU9321
 34574 005e 0A4A     		ldr	r2, .L2579+16
 34575 0060 1868     		ldr	r0, [r3]
 34576              	.LVL2656:
5611:src/xeq.c     **** 			Running = XromRunning = 0;
 34577              		.loc 1 5611 32 discriminator 1 view .LVU9322
 34578 0062 1168     		ldr	r1, [r2]
 34579 0064 0143     		orrs	r1, r0, r1
 34580 0066 03D0     		beq	.L2571
5612:src/xeq.c     **** 		}
 34581              		.loc 1 5612 4 is_stmt 1 view .LVU9323
5612:src/xeq.c     **** 		}
 34582              		.loc 1 5612 26 is_stmt 0 view .LVU9324
 34583 0068 0021     		movs	r1, #0
 34584 006a 1160     		str	r1, [r2]
5612:src/xeq.c     **** 		}
 34585              		.loc 1 5612 12 view .LVU9325
 34586 006c 1960     		str	r1, [r3]
5627:src/xeq.c     **** 
 34587              		.loc 1 5627 1 view .LVU9326
 34588 006e 10BD     		pop	{r4, pc}
 34589              	.L2571:
5615:src/xeq.c     **** 		}
 34590              		.loc 1 5615 4 is_stmt 1 view .LVU9327
5627:src/xeq.c     **** 
 34591              		.loc 1 5627 1 is_stmt 0 view .LVU9328
 34592 0070 BDE81040 		pop	{r4, lr}
 34593              		.cfi_restore 14
 34594              		.cfi_restore 4
 34595              		.cfi_def_cfa_offset 0
5615:src/xeq.c     **** 		}
 34596              		.loc 1 5615 4 view .LVU9329
 34597 0074 FFF7FEBF 		b	xeq_xrom2
 34598              	.LVL2657:
 34599              	.L2580:
 34600              		.align	2
 34601              	.L2579:
 34602 0078 00000000 		.word	main_ram
 34603 007c 00000000 		.word	Running
 34604 0080 00000000 		.word	RetStk
 34605 0084 00000000 		.word	StateWhileOn
 34606 0088 00000000 		.word	XromRunning
 34607              		.cfi_endproc
 34608              	.LFE257:
 34610              		.section	.text.xeqprog,"ax",%progbits
 34611              		.align	1
 34612              		.p2align 2,,3
 34613              		.global	xeqprog
 34614              		.syntax unified
 34615              		.thumb
 34616              		.thumb_func
 34617              		.fpu fpv4-sp-d16
 34619              	xeqprog:
 34620              	.LFB255:
5520:src/xeq.c     ****    int state = 0;
 34621              		.loc 1 5520 2 is_stmt 1 view -0
 34622              		.cfi_startproc
ARM GAS  /tmp/cc7LeJ71.s 			page 870


 34623              		@ args = 0, pretend = 0, frame = 0
 34624              		@ frame_needed = 0, uses_anonymous_args = 0
5521:src/xeq.c     ****    if (Running || Pause) {
 34625              		.loc 1 5521 4 view .LVU9331
 34626              	.LVL2658:
5522:src/xeq.c     **** 
 34627              		.loc 1 5522 4 view .LVU9332
5520:src/xeq.c     ****    int state = 0;
 34628              		.loc 1 5520 2 is_stmt 0 view .LVU9333
 34629 0000 38B5     		push	{r3, r4, r5, lr}
 34630              		.cfi_def_cfa_offset 16
 34631              		.cfi_offset 3, -16
 34632              		.cfi_offset 4, -12
 34633              		.cfi_offset 5, -8
 34634              		.cfi_offset 14, -4
5522:src/xeq.c     **** 
 34635              		.loc 1 5522 8 view .LVU9334
 34636 0002 194C     		ldr	r4, .L2606
 34637 0004 194D     		ldr	r5, .L2606+4
5522:src/xeq.c     **** 
 34638              		.loc 1 5522 7 view .LVU9335
 34639 0006 2368     		ldr	r3, [r4]
 34640 0008 0BB9     		cbnz	r3, .L2582
5522:src/xeq.c     **** 
 34641              		.loc 1 5522 16 discriminator 1 view .LVU9336
 34642 000a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
 34643 000c 9BB1     		cbz	r3, .L2587
 34644              	.L2582:
5528:src/xeq.c     **** #endif
 34645              		.loc 1 5528 6 is_stmt 1 view .LVU9337
 34646              	.LVL2659:
5532:src/xeq.c     ****      finish_RPN(); // RPN
 34647              		.loc 1 5532 6 view .LVU9338
 34648 000e 0121     		movs	r1, #1
 34649 0010 8A20     		movs	r0, #138
 34650 0012 FFF7FEFF 		bl	dot
 34651              	.LVL2660:
5533:src/xeq.c     **** 
 34652              		.loc 1 5533 6 view .LVU9339
 34653 0016 FFF7FEFF 		bl	finish_RPN
 34654              	.LVL2661:
5535:src/xeq.c     ****        xeq_single();
 34655              		.loc 1 5535 6 view .LVU9340
5535:src/xeq.c     ****        xeq_single();
 34656              		.loc 1 5535 12 is_stmt 0 view .LVU9341
 34657 001a 06E0     		b	.L2584
 34658              	.L2604:
5535:src/xeq.c     ****        xeq_single();
 34659              		.loc 1 5535 21 discriminator 1 view .LVU9342
 34660 001c 2368     		ldr	r3, [r4]
 34661 001e 53B1     		cbz	r3, .L2587
5536:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 34662              		.loc 1 5536 8 view .LVU9343
 34663 0020 FFF7FEFF 		bl	xeq_single
 34664              	.LVL2662:
5538:src/xeq.c     **** 	 {
 34665              		.loc 1 5538 8 is_stmt 1 view .LVU9344
ARM GAS  /tmp/cc7LeJ71.s 			page 871


5538:src/xeq.c     **** 	 {
 34666              		.loc 1 5538 12 is_stmt 0 view .LVU9345
 34667 0024 FFF7FEFF 		bl	is_key_pressed
 34668              	.LVL2663:
5538:src/xeq.c     **** 	 {
 34669              		.loc 1 5538 11 view .LVU9346
 34670 0028 10B9     		cbnz	r0, .L2585
 34671              	.L2584:
5536:src/xeq.c     ****        //       if (is_key_pressed() || (Ticker != last_ticker)) // flashes but empty loop 1/3 the 
 34672              		.loc 1 5536 8 is_stmt 1 view .LVU9347
5535:src/xeq.c     ****        xeq_single();
 34673              		.loc 1 5535 12 view .LVU9348
5535:src/xeq.c     ****        xeq_single();
 34674              		.loc 1 5535 13 is_stmt 0 view .LVU9349
 34675 002a 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5535:src/xeq.c     ****        xeq_single();
 34676              		.loc 1 5535 12 view .LVU9350
 34677 002c 002B     		cmp	r3, #0
 34678 002e F5D0     		beq	.L2604
 34679              	.L2585:
5547:src/xeq.c     ****      // Program has terminated
 34680              		.loc 1 5547 4 is_stmt 1 view .LVU9351
5547:src/xeq.c     ****      // Program has terminated
 34681              		.loc 1 5547 7 is_stmt 0 view .LVU9352
 34682 0030 2368     		ldr	r3, [r4]
 34683 0032 03B1     		cbz	r3, .L2587
 34684              	.LVL2664:
 34685              	.L2581:
5564:src/xeq.c     **** 
 34686              		.loc 1 5564 2 view .LVU9353
 34687 0034 38BD     		pop	{r3, r4, r5, pc}
 34688              	.L2587:
5547:src/xeq.c     ****      // Program has terminated
 34689              		.loc 1 5547 4 is_stmt 1 view .LVU9354
5547:src/xeq.c     ****      // Program has terminated
 34690              		.loc 1 5547 21 is_stmt 0 view .LVU9355
 34691 0036 2B78     		ldrb	r3, [r5]	@ zero_extendqisi2
5547:src/xeq.c     ****      // Program has terminated
 34692              		.loc 1 5547 18 view .LVU9356
 34693 0038 002B     		cmp	r3, #0
 34694 003a FBD1     		bne	.L2581
5549:src/xeq.c     ****      ShowRPN = 1; // display() may turn it off again
 34695              		.loc 1 5549 6 is_stmt 1 view .LVU9357
 34696 003c 8A20     		movs	r0, #138
5550:src/xeq.c     ****      finish_RPN(); // put here to turn off the RCL annunciator
 34697              		.loc 1 5550 14 is_stmt 0 view .LVU9358
 34698 003e 0C4C     		ldr	r4, .L2606+8
5549:src/xeq.c     ****      ShowRPN = 1; // display() may turn it off again
 34699              		.loc 1 5549 6 view .LVU9359
 34700 0040 FFF7FEFF 		bl	clr_dot
 34701              	.LVL2665:
5550:src/xeq.c     ****      finish_RPN(); // put here to turn off the RCL annunciator
 34702              		.loc 1 5550 6 is_stmt 1 view .LVU9360
5550:src/xeq.c     ****      finish_RPN(); // put here to turn off the RCL annunciator
 34703              		.loc 1 5550 14 is_stmt 0 view .LVU9361
 34704 0044 0123     		movs	r3, #1
 34705 0046 2360     		str	r3, [r4]
ARM GAS  /tmp/cc7LeJ71.s 			page 872


5551:src/xeq.c     ****      //     print_debug(100, State2.disp_freeze);
 34706              		.loc 1 5551 6 is_stmt 1 view .LVU9362
 34707 0048 FFF7FEFF 		bl	finish_RPN
 34708              	.LVL2666:
5553:src/xeq.c     ****      //     print_debug(101, ShowRPN*100+State2.disp_freeze);
 34709              		.loc 1 5553 6 view .LVU9363
 34710 004c FFF7FEFF 		bl	display
 34711              	.LVL2667:
5555:src/xeq.c     ****        set_dot(RPN);
 34712              		.loc 1 5555 6 view .LVU9364
5555:src/xeq.c     ****        set_dot(RPN);
 34713              		.loc 1 5555 9 is_stmt 0 view .LVU9365
 34714 0050 2368     		ldr	r3, [r4]
 34715 0052 1BB9     		cbnz	r3, .L2605
 34716              	.L2589:
5561:src/xeq.c     **** #endif
 34717              		.loc 1 5561 6 is_stmt 1 view .LVU9366
5561:src/xeq.c     **** #endif
 34718              		.loc 1 5561 18 is_stmt 0 view .LVU9367
 34719 0054 074B     		ldr	r3, .L2606+12
 34720 0056 0122     		movs	r2, #1
 34721 0058 1A60     		str	r2, [r3]
5564:src/xeq.c     **** 
 34722              		.loc 1 5564 2 view .LVU9368
 34723 005a 38BD     		pop	{r3, r4, r5, pc}
 34724              	.L2605:
5556:src/xeq.c     ****        finish_RPN(); // RPN
 34725              		.loc 1 5556 8 is_stmt 1 view .LVU9369
 34726 005c 8D20     		movs	r0, #141
 34727 005e FFF7FEFF 		bl	set_dot
 34728              	.LVL2668:
5557:src/xeq.c     ****      }
 34729              		.loc 1 5557 8 view .LVU9370
 34730 0062 FFF7FEFF 		bl	finish_RPN
 34731              	.LVL2669:
 34732 0066 F5E7     		b	.L2589
 34733              	.L2607:
 34734              		.align	2
 34735              	.L2606:
 34736 0068 00000000 		.word	Running
 34737 006c 00000000 		.word	Pause
 34738 0070 00000000 		.word	ShowRPN
 34739 0074 00000000 		.word	JustStopped
 34740              		.cfi_endproc
 34741              	.LFE255:
 34743              		.section	.text.xeq_sst_bst,"ax",%progbits
 34744              		.align	1
 34745              		.p2align 2,,3
 34746              		.global	xeq_sst_bst
 34747              		.syntax unified
 34748              		.thumb
 34749              		.thumb_func
 34750              		.fpu fpv4-sp-d16
 34752              	xeq_sst_bst:
 34753              	.LVL2670:
 34754              	.LFB256:
5569:src/xeq.c     **** 	opcode op;
ARM GAS  /tmp/cc7LeJ71.s 			page 873


 34755              		.loc 1 5569 1 view -0
 34756              		.cfi_startproc
 34757              		@ args = 0, pretend = 0, frame = 0
 34758              		@ frame_needed = 0, uses_anonymous_args = 0
5570:src/xeq.c     **** 
 34759              		.loc 1 5570 2 view .LVU9372
5572:src/xeq.c     **** 	if (kind == -1)
 34760              		.loc 1 5572 2 view .LVU9373
 34761              	.LBB4642:
 34762              	.LBI4642:
4458:src/xeq.c     **** 	// extern int IntMaxWindow;
 34763              		.loc 1 4458 6 view .LVU9374
 34764              	.LBB4643:
4461:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34765              		.loc 1 4461 2 view .LVU9375
 34766              	.LBE4643:
 34767              	.LBE4642:
5569:src/xeq.c     **** 	opcode op;
 34768              		.loc 1 5569 1 is_stmt 0 view .LVU9376
 34769 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 34770              		.cfi_def_cfa_offset 24
 34771              		.cfi_offset 4, -24
 34772              		.cfi_offset 5, -20
 34773              		.cfi_offset 6, -16
 34774              		.cfi_offset 7, -12
 34775              		.cfi_offset 8, -8
 34776              		.cfi_offset 14, -4
 34777              	.LBB4646:
 34778              	.LBB4644:
4461:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34779              		.loc 1 4461 16 view .LVU9377
 34780 0004 254C     		ldr	r4, .L2621
 34781 0006 237D     		ldrb	r3, [r4, #20]	@ zero_extendqisi2
4462:src/xeq.c     **** }
 34782              		.loc 1 4462 15 view .LVU9378
 34783 0008 0026     		movs	r6, #0
4461:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34784              		.loc 1 4461 16 view .LVU9379
 34785 000a 6FF3C503 		bfc	r3, #3, #3
 34786              	.LBE4644:
 34787              	.LBE4646:
5573:src/xeq.c     **** 		decpc();
 34788              		.loc 1 5573 5 view .LVU9380
 34789 000e 411C     		adds	r1, r0, #1
 34790              	.LBB4647:
 34791              	.LBB4645:
4461:src/xeq.c     **** 	State2.smode = SDISP_NORMAL;
 34792              		.loc 1 4461 16 view .LVU9381
 34793 0010 2375     		strb	r3, [r4, #20]
4462:src/xeq.c     **** }
 34794              		.loc 1 4462 2 is_stmt 1 view .LVU9382
4462:src/xeq.c     **** }
 34795              		.loc 1 4462 15 is_stmt 0 view .LVU9383
 34796 0012 6674     		strb	r6, [r4, #17]
 34797              	.LBE4645:
 34798              	.LBE4647:
5573:src/xeq.c     **** 		decpc();
ARM GAS  /tmp/cc7LeJ71.s 			page 874


 34799              		.loc 1 5573 2 is_stmt 1 view .LVU9384
5573:src/xeq.c     **** 		decpc();
 34800              		.loc 1 5573 5 is_stmt 0 view .LVU9385
 34801 0014 30D0     		beq	.L2617
5576:src/xeq.c     **** 		// Display the step
 34802              		.loc 1 5576 2 is_stmt 1 view .LVU9386
5576:src/xeq.c     **** 		// Display the step
 34803              		.loc 1 5576 6 is_stmt 0 view .LVU9387
 34804 0016 A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5576:src/xeq.c     **** 		// Display the step
 34805              		.loc 1 5576 5 view .LVU9388
 34806 0018 5B06     		lsls	r3, r3, #25
 34807 001a 0546     		mov	r5, r0
 34808 001c 08D4     		bmi	.L2618
5595:src/xeq.c     **** 		// Key down in program mode
 34809              		.loc 1 5595 7 is_stmt 1 view .LVU9389
5595:src/xeq.c     **** 		// Key down in program mode
 34810              		.loc 1 5595 10 is_stmt 0 view .LVU9390
 34811 001e 08B1     		cbz	r0, .L2619
 34812              	.LVL2671:
 34813              	.L2608:
5600:src/xeq.c     **** 
 34814              		.loc 1 5600 1 view .LVU9391
 34815 0020 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34816              	.LVL2672:
 34817              	.L2619:
5597:src/xeq.c     **** 		OpCode = 0;
 34818              		.loc 1 5597 3 is_stmt 1 view .LVU9392
 34819 0024 FFF7FEFF 		bl	incpc
 34820              	.LVL2673:
5598:src/xeq.c     **** 	}
 34821              		.loc 1 5598 3 view .LVU9393
5598:src/xeq.c     **** 	}
 34822              		.loc 1 5598 10 is_stmt 0 view .LVU9394
 34823 0028 1D4B     		ldr	r3, .L2621+4
 34824 002a 1D60     		str	r5, [r3]
5600:src/xeq.c     **** 
 34825              		.loc 1 5600 1 view .LVU9395
 34826 002c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 34827              	.LVL2674:
 34828              	.L2618:
5578:src/xeq.c     **** 		print_step(op);
 34829              		.loc 1 5578 3 is_stmt 1 view .LVU9396
5578:src/xeq.c     **** 		print_step(op);
 34830              		.loc 1 5578 16 is_stmt 0 view .LVU9397
 34831 0030 1C4B     		ldr	r3, .L2621+8
 34832 0032 1B68     		ldr	r3, [r3]
5578:src/xeq.c     **** 		print_step(op);
 34833              		.loc 1 5578 8 view .LVU9398
 34834 0034 B3F8E007 		ldrh	r0, [r3, #2016]
 34835              	.LVL2675:
5578:src/xeq.c     **** 		print_step(op);
 34836              		.loc 1 5578 8 view .LVU9399
 34837 0038 FFF7FEFF 		bl	getprog
 34838              	.LVL2676:
 34839 003c 0746     		mov	r7, r0
 34840              	.LVL2677:
ARM GAS  /tmp/cc7LeJ71.s 			page 875


5579:src/xeq.c     **** 		if (kind == 1) {
 34841              		.loc 1 5579 3 is_stmt 1 view .LVU9400
 34842 003e FFF7FEFF 		bl	print_step
 34843              	.LVL2678:
5580:src/xeq.c     **** 			// Execute the step on key up
 34844              		.loc 1 5580 3 view .LVU9401
5580:src/xeq.c     **** 			// Execute the step on key up
 34845              		.loc 1 5580 6 is_stmt 0 view .LVU9402
 34846 0042 012D     		cmp	r5, #1
 34847 0044 ECD1     		bne	.L2608
5583:src/xeq.c     **** #endif
 34848              		.loc 1 5583 4 is_stmt 1 view .LVU9403
5583:src/xeq.c     **** #endif
 34849              		.loc 1 5583 15 is_stmt 0 view .LVU9404
 34850 0046 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34851              	.LBB4648:
 34852              	.LBB4649:
5820:src/xeq.c     **** }
 34853              		.loc 1 5820 10 view .LVU9405
 34854 0048 DFF85C80 		ldr	r8, .L2621+12
 34855              	.LBE4649:
 34856              	.LBE4648:
5583:src/xeq.c     **** #endif
 34857              		.loc 1 5583 15 view .LVU9406
 34858 004c 43F00203 		orr	r3, r3, #2
 34859 0050 2376     		strb	r3, [r4, #24]
5585:src/xeq.c     **** 			incpc();
 34860              		.loc 1 5585 4 is_stmt 1 view .LVU9407
 34861              	.LBB4651:
 34862              	.LBI4648:
5819:src/xeq.c     **** 	Running = 1;
 34863              		.loc 1 5819 6 view .LVU9408
 34864              	.LBB4650:
5820:src/xeq.c     **** }
 34865              		.loc 1 5820 2 view .LVU9409
5820:src/xeq.c     **** }
 34866              		.loc 1 5820 10 is_stmt 0 view .LVU9410
 34867 0052 C8F80050 		str	r5, [r8]
 34868              	.LBE4650:
 34869              	.LBE4651:
5586:src/xeq.c     **** 			xeq(op);
 34870              		.loc 1 5586 4 is_stmt 1 view .LVU9411
 34871 0056 FFF7FEFF 		bl	incpc
 34872              	.LVL2679:
5587:src/xeq.c     **** #ifndef REALBUILD
 34873              		.loc 1 5587 4 view .LVU9412
 34874 005a 3846     		mov	r0, r7
 34875 005c FFF7FEFF 		bl	xeq
 34876              	.LVL2680:
5589:src/xeq.c     **** #endif
 34877              		.loc 1 5589 4 view .LVU9413
5589:src/xeq.c     **** #endif
 34878              		.loc 1 5589 15 is_stmt 0 view .LVU9414
 34879 0060 237E     		ldrb	r3, [r4, #24]	@ zero_extendqisi2
 34880              	.LBB4652:
 34881              	.LBB4653:
5506:src/xeq.c     **** 		xeq_xrom2();
ARM GAS  /tmp/cc7LeJ71.s 			page 876


 34882              		.loc 1 5506 5 view .LVU9415
 34883 0062 94F91720 		ldrsb	r2, [r4, #23]
 34884              	.LBE4653:
 34885              	.LBE4652:
5589:src/xeq.c     **** #endif
 34886              		.loc 1 5589 15 view .LVU9416
 34887 0066 66F34103 		bfi	r3, r6, #1, #1
 34888              	.LBB4657:
 34889              	.LBB4654:
5506:src/xeq.c     **** 		xeq_xrom2();
 34890              		.loc 1 5506 5 view .LVU9417
 34891 006a 002A     		cmp	r2, #0
 34892              	.LBE4654:
 34893              	.LBE4657:
5589:src/xeq.c     **** #endif
 34894              		.loc 1 5589 15 view .LVU9418
 34895 006c 2376     		strb	r3, [r4, #24]
5591:src/xeq.c     **** 			set_running_off_sst();
 34896              		.loc 1 5591 4 is_stmt 1 view .LVU9419
 34897              	.LBB4658:
 34898              	.LBI4652:
5504:src/xeq.c     **** 	// We split the routine in two parts for debugging only
 34899              		.loc 1 5504 6 view .LVU9420
 34900              	.LBB4655:
5506:src/xeq.c     **** 		xeq_xrom2();
 34901              		.loc 1 5506 2 view .LVU9421
5506:src/xeq.c     **** 		xeq_xrom2();
 34902              		.loc 1 5506 5 is_stmt 0 view .LVU9422
 34903 006e 12DA     		bge	.L2620
 34904              	.L2615:
 34905              	.LBE4655:
 34906              	.LBE4658:
5592:src/xeq.c     **** 		}
 34907              		.loc 1 5592 4 is_stmt 1 view .LVU9423
 34908              	.LBB4659:
 34909              	.LBI4659:
5815:src/xeq.c     **** 	Running = 0;
 34910              		.loc 1 5815 6 view .LVU9424
 34911              	.LBB4660:
5816:src/xeq.c     **** }
 34912              		.loc 1 5816 2 view .LVU9425
5816:src/xeq.c     **** }
 34913              		.loc 1 5816 10 is_stmt 0 view .LVU9426
 34914 0070 0023     		movs	r3, #0
 34915 0072 C8F80030 		str	r3, [r8]
5817:src/xeq.c     **** 
 34916              		.loc 1 5817 1 view .LVU9427
 34917 0076 D3E7     		b	.L2608
 34918              	.LVL2681:
 34919              	.L2617:
5817:src/xeq.c     **** 
 34920              		.loc 1 5817 1 view .LVU9428
 34921              	.LBE4660:
 34922              	.LBE4659:
5574:src/xeq.c     **** 
 34923              		.loc 1 5574 3 is_stmt 1 view .LVU9429
 34924 0078 FFF7FEFF 		bl	decpc
ARM GAS  /tmp/cc7LeJ71.s 			page 877


 34925              	.LVL2682:
5576:src/xeq.c     **** 		// Display the step
 34926              		.loc 1 5576 2 view .LVU9430
5576:src/xeq.c     **** 		// Display the step
 34927              		.loc 1 5576 6 is_stmt 0 view .LVU9431
 34928 007c A37D     		ldrb	r3, [r4, #22]	@ zero_extendqisi2
5576:src/xeq.c     **** 		// Display the step
 34929              		.loc 1 5576 5 view .LVU9432
 34930 007e 5A06     		lsls	r2, r3, #25
 34931 0080 CED5     		bpl	.L2608
5578:src/xeq.c     **** 		print_step(op);
 34932              		.loc 1 5578 3 is_stmt 1 view .LVU9433
5578:src/xeq.c     **** 		print_step(op);
 34933              		.loc 1 5578 16 is_stmt 0 view .LVU9434
 34934 0082 084B     		ldr	r3, .L2621+8
 34935 0084 1B68     		ldr	r3, [r3]
5578:src/xeq.c     **** 		print_step(op);
 34936              		.loc 1 5578 8 view .LVU9435
 34937 0086 B3F8E007 		ldrh	r0, [r3, #2016]
 34938 008a FFF7FEFF 		bl	getprog
 34939              	.LVL2683:
5579:src/xeq.c     **** 		if (kind == 1) {
 34940              		.loc 1 5579 3 is_stmt 1 view .LVU9436
5600:src/xeq.c     **** 
 34941              		.loc 1 5600 1 is_stmt 0 view .LVU9437
 34942 008e BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 34943              		.cfi_remember_state
 34944              		.cfi_restore 14
 34945              		.cfi_restore 8
 34946              		.cfi_restore 7
 34947              		.cfi_restore 6
 34948              		.cfi_restore 5
 34949              		.cfi_restore 4
 34950              		.cfi_def_cfa_offset 0
5579:src/xeq.c     **** 		if (kind == 1) {
 34951              		.loc 1 5579 3 view .LVU9438
 34952 0092 FFF7FEBF 		b	print_step
 34953              	.LVL2684:
 34954              	.L2620:
 34955              		.cfi_restore_state
 34956              	.LBB4661:
 34957              	.LBB4656:
5507:src/xeq.c     **** }
 34958              		.loc 1 5507 3 is_stmt 1 view .LVU9439
 34959 0096 FFF7FEFF 		bl	xeq_xrom2
 34960              	.LVL2685:
 34961 009a E9E7     		b	.L2615
 34962              	.L2622:
 34963              		.align	2
 34964              	.L2621:
 34965 009c 00000000 		.word	StateWhileOn
 34966 00a0 00000000 		.word	OpCode
 34967 00a4 00000000 		.word	main_ram
 34968 00a8 00000000 		.word	Running
 34969              	.LBE4656:
 34970              	.LBE4661:
 34971              		.cfi_endproc
ARM GAS  /tmp/cc7LeJ71.s 			page 878


 34972              	.LFE256:
 34974              		.section	.text.init_34s,"ax",%progbits
 34975              		.align	1
 34976              		.p2align 2,,3
 34977              		.global	init_34s
 34978              		.syntax unified
 34979              		.thumb
 34980              		.thumb_func
 34981              		.fpu fpv4-sp-d16
 34983              	init_34s:
 34984              	.LFB273:
6345:src/xeq.c     **** 
6346:src/xeq.c     **** 
6347:src/xeq.c     **** /*
6348:src/xeq.c     ****  *  Debugging output for the console version
6349:src/xeq.c     ****  */
6350:src/xeq.c     **** #if defined(DEBUG) && defined(CONSOLE) && !defined(WP34STEST)
6351:src/xeq.c     **** extern unsigned char remap_chars(unsigned char ch);
6352:src/xeq.c     **** 
6353:src/xeq.c     **** static int compare(s_opcode a1, s_opcode a2, int cata) {
6354:src/xeq.c     **** 	char b1[16], b2[16];
6355:src/xeq.c     **** 	const unsigned char *s1, *s2;
6356:src/xeq.c     **** 	int i;
6357:src/xeq.c     **** 
6358:src/xeq.c     **** 	xset(b1, 0, sizeof(b1));
6359:src/xeq.c     **** 	xset(b2, 0, sizeof(b2));
6360:src/xeq.c     **** 	s1 = (unsigned char *)catcmd(a1, b1);
6361:src/xeq.c     **** 	s2 = (unsigned char *)catcmd(a2, b2);
6362:src/xeq.c     **** 	if (*s1 == COMPLEX_PREFIX) s1++;
6363:src/xeq.c     **** 	if (*s2 == COMPLEX_PREFIX) s2++;
6364:src/xeq.c     **** 
6365:src/xeq.c     **** 	for (i=0;;i++) {
6366:src/xeq.c     **** 		unsigned char c1 = *s1++;
6367:src/xeq.c     **** 		unsigned char c2 = *s2++;
6368:src/xeq.c     **** 		c1 = remap_chars(c1);
6369:src/xeq.c     **** 		c2 = remap_chars(c2);
6370:src/xeq.c     **** 
6371:src/xeq.c     **** 		if (c1 != c2) {
6372:src/xeq.c     **** 			if (c1 > c2) {
6373:src/xeq.c     **** 				return 1;
6374:src/xeq.c     **** 			}
6375:src/xeq.c     **** 			return 0;
6376:src/xeq.c     **** 		} else if (c1 == '\0')
6377:src/xeq.c     **** 			break;
6378:src/xeq.c     **** 	}
6379:src/xeq.c     **** 	return 0;
6380:src/xeq.c     **** }
6381:src/xeq.c     **** 
6382:src/xeq.c     **** static void check_cat(const enum catalogues cata, const char *name) {
6383:src/xeq.c     **** 	int i;
6384:src/xeq.c     **** 	char b1[16], b2[16];
6385:src/xeq.c     **** 	const int oldcata = State2.catalogue;
6386:src/xeq.c     **** 	int n;
6387:src/xeq.c     **** 
6388:src/xeq.c     **** 	State2.catalogue = cata;
6389:src/xeq.c     **** 	n = current_catalogue_max();
6390:src/xeq.c     **** 	for (i=1; i<n; i++) {
ARM GAS  /tmp/cc7LeJ71.s 			page 879


6391:src/xeq.c     **** 		opcode cold = current_catalogue(i-1);
6392:src/xeq.c     **** 		opcode c = current_catalogue(i);
6393:src/xeq.c     **** 		if (compare(cold, c, cata))
6394:src/xeq.c     **** 			error("catalogue %s row %04x / %04x  %d / %d: %04o / %04o (%s / %s)", name, cold, c, i-1, i,
6395:src/xeq.c     **** 					0xff & cold, 0xff & c,
6396:src/xeq.c     **** 					catcmd(cold, b1), catcmd(c, b2));
6397:src/xeq.c     **** 	}
6398:src/xeq.c     **** 	State2.catalogue = oldcata;
6399:src/xeq.c     **** }
6400:src/xeq.c     **** 
6401:src/xeq.c     **** static void check_const_cat(void) {
6402:src/xeq.c     **** 	int i;
6403:src/xeq.c     **** 	char b1[16], b2[16];
6404:src/xeq.c     **** 	char p1[64], p2[64];
6405:src/xeq.c     **** 
6406:src/xeq.c     **** 	for (i=1; i<NUM_CONSTS_CAT; i++) {
6407:src/xeq.c     **** 		if (compare(CONST(i-1), CONST(i), 0)) {
6408:src/xeq.c     **** 			prettify(catcmd(CONST(i-1), b1), p1, 0);
6409:src/xeq.c     **** 			prettify(catcmd(CONST(i), b2), p2, 0);
6410:src/xeq.c     **** 			error("constants row %d / %d: %s / %s", i, i+1, p1, p2);
6411:src/xeq.c     **** 		}
6412:src/xeq.c     **** 	}
6413:src/xeq.c     **** }
6414:src/xeq.c     **** 
6415:src/xeq.c     **** static void bad_table(const char *t, int row, const char *n, int nlen) {
6416:src/xeq.c     **** 	char buf[64], name[20];
6417:src/xeq.c     **** 	int i;
6418:src/xeq.c     **** 
6419:src/xeq.c     **** 	for (i=0; i<nlen; i++)
6420:src/xeq.c     **** 		name[i] = n[i];
6421:src/xeq.c     **** 	name[nlen] = '\0';
6422:src/xeq.c     **** 	prettify(name, buf, 0);
6423:src/xeq.c     **** 	error("%s table row %d: %6s", t, row, buf);
6424:src/xeq.c     **** }
6425:src/xeq.c     **** 
6426:src/xeq.c     **** #endif
6427:src/xeq.c     **** 
6428:src/xeq.c     **** /* Main initialisation routine that sets things up for us.
6429:src/xeq.c     ****  * Returns a nonzero result if it has cleared ram.
6430:src/xeq.c     ****  */
6431:src/xeq.c     **** int init_34s(void)
6432:src/xeq.c     **** {
 34985              		.loc 1 6432 1 view -0
 34986              		.cfi_startproc
 34987              		@ args = 0, pretend = 0, frame = 0
 34988              		@ frame_needed = 0, uses_anonymous_args = 0
6433:src/xeq.c     **** 	const int cleared = checksum_all();
 34989              		.loc 1 6433 2 view .LVU9441
6432:src/xeq.c     **** 	const int cleared = checksum_all();
 34990              		.loc 1 6432 1 is_stmt 0 view .LVU9442
 34991 0000 10B5     		push	{r4, lr}
 34992              		.cfi_def_cfa_offset 8
 34993              		.cfi_offset 4, -8
 34994              		.cfi_offset 14, -4
 34995              		.loc 1 6433 22 view .LVU9443
 34996 0002 FFF7FEFF 		bl	checksum_ram
 34997              	.LVL2686:
ARM GAS  /tmp/cc7LeJ71.s 			page 880


6434:src/xeq.c     **** 	if (cleared) {
 34998              		.loc 1 6434 2 is_stmt 1 view .LVU9444
 34999              		.loc 1 6434 5 is_stmt 0 view .LVU9445
 35000 0006 0446     		mov	r4, r0
 35001 0008 80B9     		cbnz	r0, .L2629
 35002              	.LVL2687:
 35003              	.L2624:
6435:src/xeq.c     **** 		reset();
6436:src/xeq.c     **** 	}
6437:src/xeq.c     **** 	init_state();
 35004              		.loc 1 6437 2 is_stmt 1 view .LVU9446
 35005 000a FFF7FEFF 		bl	init_state
 35006              	.LVL2688:
6438:src/xeq.c     **** 	xeq_init_contexts();
 35007              		.loc 1 6438 2 view .LVU9447
 35008 000e FFF7FEFF 		bl	xeq_init_contexts
 35009              	.LVL2689:
6439:src/xeq.c     **** 	ShowRPN = 1;
 35010              		.loc 1 6439 2 view .LVU9448
 35011              		.loc 1 6439 10 is_stmt 0 view .LVU9449
 35012 0012 084B     		ldr	r3, .L2630
 35013 0014 0122     		movs	r2, #1
6440:src/xeq.c     **** 	set_dot(RPN);
 35014              		.loc 1 6440 2 view .LVU9450
 35015 0016 8D20     		movs	r0, #141
6439:src/xeq.c     **** 	ShowRPN = 1;
 35016              		.loc 1 6439 10 view .LVU9451
 35017 0018 1A60     		str	r2, [r3]
 35018              		.loc 1 6440 2 is_stmt 1 view .LVU9452
 35019 001a FFF7FEFF 		bl	set_dot
 35020              	.LVL2690:
6441:src/xeq.c     **** 
6442:src/xeq.c     **** #ifdef INCLUDE_STOPWATCH
6443:src/xeq.c     **** 	StopWatchRunning = 0;
 35021              		.loc 1 6443 2 view .LVU9453
 35022              		.loc 1 6443 19 is_stmt 0 view .LVU9454
 35023 001e 064B     		ldr	r3, .L2630+4
 35024 0020 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 35025 0022 6FF30002 		bfc	r2, #0, #1
6444:src/xeq.c     **** #endif
6445:src/xeq.c     **** #if defined(CONSOLE) && !defined(WP34STEST) && defined(DEBUG)
6446:src/xeq.c     **** 	{
6447:src/xeq.c     **** 		int i;
6448:src/xeq.c     **** 	/* Sanity check the function table indices.
6449:src/xeq.c     **** 	 * These indicies must correspond exactly with the enum definition.
6450:src/xeq.c     **** 	 * This code validates that this is true and prints error messages
6451:src/xeq.c     **** 	 * if it isn't.
6452:src/xeq.c     **** 	 */
6453:src/xeq.c     **** 	for (i=0; i<NUM_MONADIC; i++)
6454:src/xeq.c     **** 		if (monfuncs[i].n != i)
6455:src/xeq.c     **** 			bad_table("monadic function", i, monfuncs[i].fname, NAME_LEN);
6456:src/xeq.c     **** 	for (i=0; i<NUM_DYADIC; i++)
6457:src/xeq.c     **** 		if (dyfuncs[i].n != i)
6458:src/xeq.c     **** 			bad_table("dyadic function", i, dyfuncs[i].fname, NAME_LEN);
6459:src/xeq.c     **** 	for (i=0; i<NUM_TRIADIC; i++)
6460:src/xeq.c     **** 		if (trifuncs[i].n != i)
6461:src/xeq.c     **** 			bad_table("triadic function", i, trifuncs[i].fname, NAME_LEN);
ARM GAS  /tmp/cc7LeJ71.s 			page 881


6462:src/xeq.c     **** 	for (i=0; i<NUM_NILADIC; i++)
6463:src/xeq.c     **** 		if (niladics[i].n != i)
6464:src/xeq.c     **** 			bad_table("niladic function", i, niladics[i].nname, NAME_LEN);
6465:src/xeq.c     **** 	for (i=0; i<NUM_RARG; i++)
6466:src/xeq.c     **** 		if (argcmds[i].n != i)
6467:src/xeq.c     **** 			bad_table("argument command", i, argcmds[i].cmd, NAME_LEN);
6468:src/xeq.c     **** 	for (i=0; i<NUM_MULTI; i++)
6469:src/xeq.c     **** 		if (multicmds[i].n != i)
6470:src/xeq.c     **** 			bad_table("multi command", i, multicmds[i].cmd, NAME_LEN);
6471:src/xeq.c     **** 	check_const_cat();
6472:src/xeq.c     **** 	check_cat(CATALOGUE_COMPLEX, "complex");
6473:src/xeq.c     **** 	check_cat(CATALOGUE_STATS, "statistics");
6474:src/xeq.c     **** 	check_cat(CATALOGUE_SUMS, "summations");
6475:src/xeq.c     **** 	check_cat(CATALOGUE_PROB, "probability");
6476:src/xeq.c     **** 	check_cat(CATALOGUE_PROG, "programme");
6477:src/xeq.c     **** 	check_cat(CATALOGUE_MODE, "mode");
6478:src/xeq.c     **** 	check_cat(CATALOGUE_TEST, "tests");
6479:src/xeq.c     **** 	check_cat(CATALOGUE_INT, "int");
6480:src/xeq.c     **** 	check_cat(CATALOGUE_MATRIX, "matrix");
6481:src/xeq.c     **** 	/*
6482:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA, "alpha");
6483:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_LETTERS, "alpha special upper case letters");
6484:src/xeq.c     **** 	// check_cat(CATALOGUE_ALPHA_LETTERS_LOWER, "alpha special lower letters");
6485:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SUBSCRIPTS, "alpha subscripts");
6486:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_SYMBOLS, "alpha symbols");
6487:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_COMPARES, "alpha compares");
6488:src/xeq.c     **** 	check_cat(CATALOGUE_ALPHA_ARROWS, "alpha arrows");
6489:src/xeq.c     **** 	*/
6490:src/xeq.c     **** 	check_cat(CATALOGUE_CONV, "conversion");
6491:src/xeq.c     **** 	check_cat(CATALOGUE_NORMAL, "float");
6492:src/xeq.c     **** #ifdef INCLUDE_INTERNAL_CATALOGUE
6493:src/xeq.c     **** 	check_cat(CATALOGUE_INTERNAL, "internal");
6494:src/xeq.c     **** #endif
6495:src/xeq.c     ****         if (sizeof(unsigned long long int) != sizeof(UState))
6496:src/xeq.c     ****             error("sizeof register (%u) != sizeof user state (%u)\n", sizeof(unsigned long long int
6497:src/xeq.c     **** 	}
6498:src/xeq.c     **** #endif
6499:src/xeq.c     **** 	return cleared;
6500:src/xeq.c     **** }
 35026              		.loc 1 6500 1 view .LVU9455
 35027 0026 2046     		mov	r0, r4
6443:src/xeq.c     **** #endif
 35028              		.loc 1 6443 19 view .LVU9456
 35029 0028 1A70     		strb	r2, [r3]
6499:src/xeq.c     **** }
 35030              		.loc 1 6499 2 is_stmt 1 view .LVU9457
 35031              		.loc 1 6500 1 is_stmt 0 view .LVU9458
 35032 002a 10BD     		pop	{r4, pc}
 35033              	.LVL2691:
 35034              	.L2629:
6435:src/xeq.c     **** 	}
 35035              		.loc 1 6435 3 is_stmt 1 view .LVU9459
 35036 002c FFF7FEFF 		bl	reset
 35037              	.LVL2692:
6435:src/xeq.c     **** 	}
 35038              		.loc 1 6435 3 is_stmt 0 view .LVU9460
 35039 0030 EBE7     		b	.L2624
ARM GAS  /tmp/cc7LeJ71.s 			page 882


 35040              	.L2631:
 35041 0032 00BF     		.align	2
 35042              	.L2630:
 35043 0034 00000000 		.word	ShowRPN
 35044 0038 00000000 		.word	StopWatchStatus
 35045              		.cfi_endproc
 35046              	.LFE273:
 35048              		.section	.rodata.paste_raw_x.str1.4,"aMS",%progbits,1
 35049              		.align	2
 35050              	.LC9:
 35051 0000 0D0A0920 		.ascii	"\015\012\011 :;\000"
 35051      3A3B00
 35052              		.section	.text.paste_raw_x,"ax",%progbits
 35053              		.align	1
 35054              		.p2align 2,,3
 35055              		.global	paste_raw_x
 35056              		.syntax unified
 35057              		.thumb
 35058              		.thumb_func
 35059              		.fpu fpv4-sp-d16
 35061              	paste_raw_x:
 35062              	.LVL2693:
 35063              	.LFB274:
6501:src/xeq.c     **** 
6502:src/xeq.c     **** #ifndef REALBUILD
6503:src/xeq.c     **** 
6504:src/xeq.c     **** #include "string.h"
6505:src/xeq.c     **** 
6506:src/xeq.c     **** void paste_raw_x(const char *in)
6507:src/xeq.c     **** {
 35064              		.loc 1 6507 1 is_stmt 1 view -0
 35065              		.cfi_startproc
 35066              		@ args = 0, pretend = 0, frame = 40
 35067              		@ frame_needed = 0, uses_anonymous_args = 0
6508:src/xeq.c     **** 	char *buffer = strdup( in );
 35068              		.loc 1 6508 2 view .LVU9462
6507:src/xeq.c     **** 	char *buffer = strdup( in );
 35069              		.loc 1 6507 1 is_stmt 0 view .LVU9463
 35070 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 35071              		.cfi_def_cfa_offset 32
 35072              		.cfi_offset 4, -32
 35073              		.cfi_offset 5, -28
 35074              		.cfi_offset 6, -24
 35075              		.cfi_offset 7, -20
 35076              		.cfi_offset 8, -16
 35077              		.cfi_offset 9, -12
 35078              		.cfi_offset 10, -8
 35079              		.cfi_offset 14, -4
 35080 0004 8AB0     		sub	sp, sp, #40
 35081              		.cfi_def_cfa_offset 72
 35082              		.loc 1 6508 17 view .LVU9464
 35083 0006 FFF7FEFF 		bl	strdup
 35084              	.LVL2694:
6509:src/xeq.c     **** 
6510:src/xeq.c     **** 	if ( buffer ) {
 35085              		.loc 1 6510 2 is_stmt 1 view .LVU9465
 35086              		.loc 1 6510 5 is_stmt 0 view .LVU9466
ARM GAS  /tmp/cc7LeJ71.s 			page 883


 35087 000a 0028     		cmp	r0, #0
 35088 000c 5CD0     		beq	.L2633
 35089              	.LBB4662:
6511:src/xeq.c     **** 		static const char *delim = "\r\n\t :;";
 35090              		.loc 1 6511 3 is_stmt 1 view .LVU9467
6512:src/xeq.c     **** 		char *p = strtok( buffer, delim );
 35091              		.loc 1 6512 3 view .LVU9468
 35092              	.LBB4663:
 35093              	.LBB4664:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35094              		.loc 1 1229 6 is_stmt 0 view .LVU9469
 35095 000e 394D     		ldr	r5, .L2668
 35096              	.LBE4664:
 35097              	.LBE4663:
 35098              		.loc 1 6512 13 view .LVU9470
 35099 0010 3949     		ldr	r1, .L2668+4
 35100 0012 8146     		mov	r9, r0
 35101 0014 FFF7FEFF 		bl	strtok
 35102              	.LVL2695:
 35103              	.LBB4668:
 35104              	.LBB4665:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35105              		.loc 1 1229 5 view .LVU9471
 35106 0018 2B7F     		ldrb	r3, [r5, #28]	@ zero_extendqisi2
 35107              	.LBE4665:
 35108              	.LBE4668:
 35109              		.loc 1 6512 13 view .LVU9472
 35110 001a 0446     		mov	r4, r0
 35111              	.LVL2696:
6513:src/xeq.c     **** 		process_cmdline();
 35112              		.loc 1 6513 3 is_stmt 1 view .LVU9473
 35113              	.LBB4669:
 35114              	.LBI4663:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 35115              		.loc 1 1226 6 view .LVU9474
 35116              	.LBB4666:
1227:src/xeq.c     **** 
 35117              		.loc 1 1227 2 view .LVU9475
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35118              		.loc 1 1229 2 view .LVU9476
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35119              		.loc 1 1229 5 is_stmt 0 view .LVU9477
 35120 001c 002B     		cmp	r3, #0
 35121 001e 5ED1     		bne	.L2664
 35122              	.LVL2697:
 35123              	.L2634:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35124              		.loc 1 1229 5 view .LVU9478
 35125              	.LBE4666:
 35126              	.LBE4669:
6514:src/xeq.c     **** 		while ( p ) {
 35127              		.loc 1 6514 9 is_stmt 1 view .LVU9479
 35128 0020 002C     		cmp	r4, #0
 35129 0022 4ED0     		beq	.L2642
 35130 0024 354E     		ldr	r6, .L2668+8
 35131              	.LBB4670:
 35132              	.LBB4671:
ARM GAS  /tmp/cc7LeJ71.s 			page 884


6515:src/xeq.c     **** 			char *pp = strchr( p, ',' );
6516:src/xeq.c     **** 			if ( pp ) {
6517:src/xeq.c     **** 				*pp = '.';
6518:src/xeq.c     **** 			}
6519:src/xeq.c     **** 			if (is_intmode()) {
6520:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
6521:src/xeq.c     **** 				lift_if_enabled();
6522:src/xeq.c     **** 				set_lift();
6523:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
6524:src/xeq.c     **** 			} else {
6525:src/xeq.c     **** 				decNumber x;
6526:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 35133              		.loc 1 6526 5 is_stmt 0 view .LVU9480
 35134 0026 DFF8DC80 		ldr	r8, .L2668+16
 35135              	.LBE4671:
6527:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
6528:src/xeq.c     **** 					lift_if_enabled();
6529:src/xeq.c     **** 					set_lift();
6530:src/xeq.c     **** 					setX(&x);
6531:src/xeq.c     **** 				}
6532:src/xeq.c     **** 				else {
6533:src/xeq.c     **** 					error_message(Error);
6534:src/xeq.c     **** 					Error = 0;
6535:src/xeq.c     **** 					break;
6536:src/xeq.c     **** 				}
6537:src/xeq.c     **** 			}
6538:src/xeq.c     **** 			p = strtok( NULL, delim );
 35136              		.loc 1 6538 8 view .LVU9481
 35137 002a 334F     		ldr	r7, .L2668+4
 35138 002c 21E0     		b	.L2643
 35139              	.LVL2698:
 35140              	.L2666:
 35141              	.LBB4690:
6520:src/xeq.c     **** 				lift_if_enabled();
 35142              		.loc 1 6520 5 is_stmt 1 view .LVU9482
6520:src/xeq.c     **** 				lift_if_enabled();
 35143              		.loc 1 6520 31 is_stmt 0 view .LVU9483
 35144 002e 94F800A0 		ldrb	r10, [r4]	@ zero_extendqisi2
 35145              	.LBB4691:
 35146              	.LBB4692:
 35147              	.LBB4693:
 35148              	.LBB4694:
 744:src/xeq.c     **** }
 35149              		.loc 1 744 15 view .LVU9484
 35150 0032 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35151              	.LBE4694:
 35152              	.LBE4693:
 35153              	.LBE4692:
 35154              	.LBE4691:
6520:src/xeq.c     **** 				lift_if_enabled();
 35155              		.loc 1 6520 31 view .LVU9485
 35156 0034 AAF12D0A 		sub	r10, r10, #45
 35157 0038 BAFA8AFA 		clz	r10, r10
 35158              	.LBB4700:
 35159              	.LBB4697:
 748:src/xeq.c     **** 		lift();
 35160              		.loc 1 748 5 view .LVU9486
ARM GAS  /tmp/cc7LeJ71.s 			page 885


 35161 003c 5A06     		lsls	r2, r3, #25
 35162              	.LBE4697:
 35163              	.LBE4700:
6520:src/xeq.c     **** 				lift_if_enabled();
 35164              		.loc 1 6520 31 view .LVU9487
 35165 003e 4FEA5A1A 		lsr	r10, r10, #5
 35166              	.LVL2699:
6521:src/xeq.c     **** 				set_lift();
 35167              		.loc 1 6521 5 is_stmt 1 view .LVU9488
 35168              	.LBB4701:
 35169              	.LBI4691:
 747:src/xeq.c     **** 	if (get_lift())
 35170              		.loc 1 747 6 view .LVU9489
 35171              	.LBB4698:
 748:src/xeq.c     **** 		lift();
 35172              		.loc 1 748 2 view .LVU9490
 35173              	.LBB4696:
 35174              	.LBI4693:
 743:src/xeq.c     **** 	return State2.state_lift;
 35175              		.loc 1 743 12 view .LVU9491
 35176              	.LBB4695:
 744:src/xeq.c     **** }
 35177              		.loc 1 744 2 view .LVU9492
 35178              	.LBE4695:
 35179              	.LBE4696:
 748:src/xeq.c     **** 		lift();
 35180              		.loc 1 748 5 is_stmt 0 view .LVU9493
 35181 0042 46D4     		bmi	.L2665
 35182              	.LVL2700:
 35183              	.L2638:
 748:src/xeq.c     **** 		lift();
 35184              		.loc 1 748 5 view .LVU9494
 35185              	.LBE4698:
 35186              	.LBE4701:
6522:src/xeq.c     **** 				setX_int(build_value(strtoull(p + sgn, NULL, int_base()), sgn));
 35187              		.loc 1 6522 5 is_stmt 1 view .LVU9495
 35188              	.LBB4702:
 35189              	.LBI4702:
 767:src/xeq.c     ****     State2.state_lift = 1;
 35190              		.loc 1 767 6 view .LVU9496
 35191              	.LBB4703:
 768:src/xeq.c     **** }
 35192              		.loc 1 768 5 view .LVU9497
 768:src/xeq.c     **** }
 35193              		.loc 1 768 23 is_stmt 0 view .LVU9498
 35194 0044 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35195 0046 43F04003 		orr	r3, r3, #64
 35196 004a EB75     		strb	r3, [r5, #23]
 35197              	.LBE4703:
 35198              	.LBE4702:
6523:src/xeq.c     **** 			} else {
 35199              		.loc 1 6523 5 is_stmt 1 view .LVU9499
6523:src/xeq.c     **** 			} else {
 35200              		.loc 1 6523 50 is_stmt 0 view .LVU9500
 35201 004c FFF7FEFF 		bl	int_base
 35202              	.LVL2701:
6523:src/xeq.c     **** 			} else {
ARM GAS  /tmp/cc7LeJ71.s 			page 886


 35203              		.loc 1 6523 37 view .LVU9501
 35204 0050 5444     		add	r4, r4, r10
 35205              	.LVL2702:
6523:src/xeq.c     **** 			} else {
 35206              		.loc 1 6523 50 view .LVU9502
 35207 0052 0246     		mov	r2, r0
6523:src/xeq.c     **** 			} else {
 35208              		.loc 1 6523 5 view .LVU9503
 35209 0054 0021     		movs	r1, #0
 35210 0056 2046     		mov	r0, r4
 35211 0058 FFF7FEFF 		bl	strtoull
 35212              	.LVL2703:
 35213 005c 5246     		mov	r2, r10
 35214 005e FFF7FEFF 		bl	build_value
 35215              	.LVL2704:
 35216 0062 FFF7FEFF 		bl	setX_int
 35217              	.LVL2705:
 35218              	.LBE4690:
 35219              		.loc 1 6538 4 is_stmt 1 view .LVU9504
 35220              		.loc 1 6538 8 is_stmt 0 view .LVU9505
 35221 0066 3946     		mov	r1, r7
 35222 0068 0020     		movs	r0, #0
 35223 006a FFF7FEFF 		bl	strtok
 35224              	.LVL2706:
 35225              		.loc 1 6538 8 view .LVU9506
 35226              	.LBE4670:
6514:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 35227              		.loc 1 6514 9 is_stmt 1 view .LVU9507
 35228 006e 0446     		mov	r4, r0
 35229 0070 38B3     		cbz	r0, .L2642
 35230              	.LVL2707:
 35231              	.L2643:
 35232              	.LBB4709:
6515:src/xeq.c     **** 			if ( pp ) {
 35233              		.loc 1 6515 4 view .LVU9508
6515:src/xeq.c     **** 			if ( pp ) {
 35234              		.loc 1 6515 15 is_stmt 0 view .LVU9509
 35235 0072 2C21     		movs	r1, #44
 35236 0074 2046     		mov	r0, r4
 35237 0076 FFF7FEFF 		bl	strchr
 35238              	.LVL2708:
6516:src/xeq.c     **** 				*pp = '.';
 35239              		.loc 1 6516 4 is_stmt 1 view .LVU9510
6516:src/xeq.c     **** 				*pp = '.';
 35240              		.loc 1 6516 7 is_stmt 0 view .LVU9511
 35241 007a 08B1     		cbz	r0, .L2636
6517:src/xeq.c     **** 			}
 35242              		.loc 1 6517 5 is_stmt 1 view .LVU9512
6517:src/xeq.c     **** 			}
 35243              		.loc 1 6517 9 is_stmt 0 view .LVU9513
 35244 007c 2E23     		movs	r3, #46
 35245 007e 0370     		strb	r3, [r0]
 35246              	.L2636:
6519:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 35247              		.loc 1 6519 4 is_stmt 1 view .LVU9514
6519:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 35248              		.loc 1 6519 8 is_stmt 0 view .LVU9515
ARM GAS  /tmp/cc7LeJ71.s 			page 887


 35249 0080 3368     		ldr	r3, [r6]
 35250 0082 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
6519:src/xeq.c     **** 				int sgn = p[0] == '-' ? 1 : 0;
 35251              		.loc 1 6519 7 view .LVU9516
 35252 0086 13F0010A 		ands	r10, r3, #1
 35253 008a D0D1     		bne	.L2666
 35254              	.LBB4705:
6525:src/xeq.c     **** 				decNumberFromString(&x, p, &Ctx);
 35255              		.loc 1 6525 5 is_stmt 1 view .LVU9517
6526:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 35256              		.loc 1 6526 5 view .LVU9518
 35257 008c 2146     		mov	r1, r4
 35258 008e 01A8     		add	r0, sp, #4
 35259              	.LVL2709:
6526:src/xeq.c     **** 				if (! check_special(&x)) {	/* This correctly deals with infinities and NaN based on flag D */
 35260              		.loc 1 6526 5 is_stmt 0 view .LVU9519
 35261 0090 4246     		mov	r2, r8
 35262 0092 FFF7FEFF 		bl	decNumberFromString
 35263              	.LVL2710:
6527:src/xeq.c     **** 					lift_if_enabled();
 35264              		.loc 1 6527 5 is_stmt 1 view .LVU9520
6527:src/xeq.c     **** 					lift_if_enabled();
 35265              		.loc 1 6527 11 is_stmt 0 view .LVU9521
 35266 0096 01A8     		add	r0, sp, #4
 35267 0098 FFF7FEFF 		bl	check_special
 35268              	.LVL2711:
6527:src/xeq.c     **** 					lift_if_enabled();
 35269              		.loc 1 6527 8 view .LVU9522
 35270 009c 10BB     		cbnz	r0, .L2640
6528:src/xeq.c     **** 					set_lift();
 35271              		.loc 1 6528 6 is_stmt 1 view .LVU9523
 35272              	.LBB4672:
 35273              	.LBI4672:
 747:src/xeq.c     **** 	if (get_lift())
 35274              		.loc 1 747 6 view .LVU9524
 35275              	.LBB4673:
 748:src/xeq.c     **** 		lift();
 35276              		.loc 1 748 2 view .LVU9525
 35277              	.LBB4674:
 35278              	.LBI4674:
 743:src/xeq.c     **** 	return State2.state_lift;
 35279              		.loc 1 743 12 view .LVU9526
 35280              	.LBB4675:
 744:src/xeq.c     **** }
 35281              		.loc 1 744 2 view .LVU9527
 744:src/xeq.c     **** }
 35282              		.loc 1 744 15 is_stmt 0 view .LVU9528
 35283 009e EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35284              	.LBE4675:
 35285              	.LBE4674:
 748:src/xeq.c     **** 		lift();
 35286              		.loc 1 748 5 view .LVU9529
 35287 00a0 5B06     		lsls	r3, r3, #25
 35288 00a2 19D4     		bmi	.L2667
 35289              	.L2641:
 35290              	.LBE4673:
 35291              	.LBE4672:
ARM GAS  /tmp/cc7LeJ71.s 			page 888


6529:src/xeq.c     **** 					setX(&x);
 35292              		.loc 1 6529 6 is_stmt 1 view .LVU9530
 35293              	.LBB4677:
 35294              	.LBI4677:
 767:src/xeq.c     ****     State2.state_lift = 1;
 35295              		.loc 1 767 6 view .LVU9531
 35296              	.LBB4678:
 768:src/xeq.c     **** }
 35297              		.loc 1 768 5 view .LVU9532
 768:src/xeq.c     **** }
 35298              		.loc 1 768 23 is_stmt 0 view .LVU9533
 35299 00a4 EB7D     		ldrb	r3, [r5, #23]	@ zero_extendqisi2
 35300              	.LBE4678:
 35301              	.LBE4677:
 35302              	.LBB4681:
 35303              	.LBB4682:
 829:src/xeq.c     **** }
 35304              		.loc 1 829 2 view .LVU9534
 35305 00a6 01A9     		add	r1, sp, #4
 35306              	.LBE4682:
 35307              	.LBE4681:
 35308              	.LBB4685:
 35309              	.LBB4679:
 768:src/xeq.c     **** }
 35310              		.loc 1 768 23 view .LVU9535
 35311 00a8 43F04003 		orr	r3, r3, #64
 35312              	.LBE4679:
 35313              	.LBE4685:
 35314              	.LBB4686:
 35315              	.LBB4683:
 829:src/xeq.c     **** }
 35316              		.loc 1 829 2 view .LVU9536
 35317 00ac 6420     		movs	r0, #100
 35318              	.LBE4683:
 35319              	.LBE4686:
 35320              	.LBB4687:
 35321              	.LBB4680:
 768:src/xeq.c     **** }
 35322              		.loc 1 768 23 view .LVU9537
 35323 00ae EB75     		strb	r3, [r5, #23]
 35324              	.LBE4680:
 35325              	.LBE4687:
6530:src/xeq.c     **** 				}
 35326              		.loc 1 6530 6 is_stmt 1 view .LVU9538
 35327              	.LVL2712:
 35328              	.LBB4688:
 35329              	.LBI4681:
 828:src/xeq.c     **** 	setRegister(regX_idx, x);
 35330              		.loc 1 828 6 view .LVU9539
 35331              	.LBB4684:
 829:src/xeq.c     **** }
 35332              		.loc 1 829 2 view .LVU9540
 35333 00b0 FFF7FEFF 		bl	setRegister
 35334              	.LVL2713:
 829:src/xeq.c     **** }
 35335              		.loc 1 829 2 is_stmt 0 view .LVU9541
 35336              	.LBE4684:
ARM GAS  /tmp/cc7LeJ71.s 			page 889


 35337              	.LBE4688:
 35338              	.LBE4705:
 35339              		.loc 1 6538 4 is_stmt 1 view .LVU9542
 35340              		.loc 1 6538 8 is_stmt 0 view .LVU9543
 35341 00b4 3946     		mov	r1, r7
 35342 00b6 0020     		movs	r0, #0
 35343 00b8 FFF7FEFF 		bl	strtok
 35344              	.LVL2714:
 35345              		.loc 1 6538 8 view .LVU9544
 35346              	.LBE4709:
6514:src/xeq.c     **** 			char *pp = strchr( p, ',' );
 35347              		.loc 1 6514 9 is_stmt 1 view .LVU9545
 35348 00bc 0446     		mov	r4, r0
 35349 00be 0028     		cmp	r0, #0
 35350 00c0 D7D1     		bne	.L2643
 35351              	.LVL2715:
 35352              	.L2642:
6539:src/xeq.c     **** 		}
6540:src/xeq.c     **** 		free( buffer );
 35353              		.loc 1 6540 3 view .LVU9546
 35354 00c2 4846     		mov	r0, r9
 35355 00c4 FFF7FEFF 		bl	free
 35356              	.LVL2716:
 35357              	.L2633:
 35358              		.loc 1 6540 3 is_stmt 0 view .LVU9547
 35359              	.LBE4662:
6541:src/xeq.c     **** 	}
6542:src/xeq.c     **** 	display();
 35360              		.loc 1 6542 2 is_stmt 1 view .LVU9548
 35361 00c8 FFF7FEFF 		bl	display
 35362              	.LVL2717:
6543:src/xeq.c     **** }
 35363              		.loc 1 6543 1 is_stmt 0 view .LVU9549
 35364 00cc 0AB0     		add	sp, sp, #40
 35365              		.cfi_remember_state
 35366              		.cfi_def_cfa_offset 32
 35367              		@ sp needed
 35368 00ce BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 35369              	.LVL2718:
 35370              	.L2665:
 35371              		.cfi_restore_state
 35372              	.LBB4713:
 35373              	.LBB4710:
 35374              	.LBB4706:
 35375              	.LBB4704:
 35376              	.LBB4699:
 749:src/xeq.c     **** }
 35377              		.loc 1 749 3 is_stmt 1 view .LVU9550
 35378 00d2 FFF7FEFF 		bl	lift
 35379              	.LVL2719:
 749:src/xeq.c     **** }
 35380              		.loc 1 749 3 is_stmt 0 view .LVU9551
 35381 00d6 B5E7     		b	.L2638
 35382              	.LVL2720:
 35383              	.L2667:
 749:src/xeq.c     **** }
 35384              		.loc 1 749 3 view .LVU9552
ARM GAS  /tmp/cc7LeJ71.s 			page 890


 35385              	.LBE4699:
 35386              	.LBE4704:
 35387              	.LBE4706:
 35388              	.LBB4707:
 35389              	.LBB4689:
 35390              	.LBB4676:
 749:src/xeq.c     **** }
 35391              		.loc 1 749 3 is_stmt 1 view .LVU9553
 35392 00d8 FFF7FEFF 		bl	lift
 35393              	.LVL2721:
 35394 00dc E2E7     		b	.L2641
 35395              	.LVL2722:
 35396              	.L2664:
 749:src/xeq.c     **** }
 35397              		.loc 1 749 3 is_stmt 0 view .LVU9554
 35398              	.LBE4676:
 35399              	.LBE4689:
 35400              	.LBE4707:
 35401              	.LBE4710:
 35402              	.LBB4711:
 35403              	.LBB4667:
 35404 00de FFF7FEFF 		bl	process_cmdline.part.0
 35405              	.LVL2723:
 749:src/xeq.c     **** }
 35406              		.loc 1 749 3 view .LVU9555
 35407 00e2 9DE7     		b	.L2634
 35408              	.L2640:
 749:src/xeq.c     **** }
 35409              		.loc 1 749 3 view .LVU9556
 35410              	.LBE4667:
 35411              	.LBE4711:
 35412              	.LBB4712:
 35413              	.LBB4708:
6533:src/xeq.c     **** 					Error = 0;
 35414              		.loc 1 6533 6 is_stmt 1 view .LVU9557
 35415 00e4 064C     		ldr	r4, .L2668+12
 35416              	.LVL2724:
6533:src/xeq.c     **** 					Error = 0;
 35417              		.loc 1 6533 6 is_stmt 0 view .LVU9558
 35418 00e6 2068     		ldr	r0, [r4]
 35419 00e8 FFF7FEFF 		bl	error_message
 35420              	.LVL2725:
6534:src/xeq.c     **** 					break;
 35421              		.loc 1 6534 6 is_stmt 1 view .LVU9559
6534:src/xeq.c     **** 					break;
 35422              		.loc 1 6534 12 is_stmt 0 view .LVU9560
 35423 00ec C4F800A0 		str	r10, [r4]
6535:src/xeq.c     **** 				}
 35424              		.loc 1 6535 6 is_stmt 1 view .LVU9561
 35425 00f0 E7E7     		b	.L2642
 35426              	.L2669:
 35427 00f2 00BF     		.align	2
 35428              	.L2668:
 35429 00f4 00000000 		.word	StateWhileOn
 35430 00f8 00000000 		.word	.LC9
 35431 00fc 00000000 		.word	main_ram
 35432 0100 00000000 		.word	Error
ARM GAS  /tmp/cc7LeJ71.s 			page 891


 35433 0104 00000000 		.word	Ctx
 35434              	.LBE4708:
 35435              	.LBE4712:
 35436              	.LBE4713:
 35437              		.cfi_endproc
 35438              	.LFE274:
 35440              		.global	__aeabi_uldivmod
 35441              		.section	.rodata.fill_buffer_from_raw_x.str1.4,"aMS",%progbits,1
 35442              		.align	2
 35443              	.LC10:
 35444 0000 30313233 		.ascii	"0123456789ABCDEF\000"
 35444      34353637 
 35444      38394142 
 35444      43444546 
 35444      00
 35445              		.section	.text.fill_buffer_from_raw_x,"ax",%progbits
 35446              		.align	1
 35447              		.p2align 2,,3
 35448              		.global	fill_buffer_from_raw_x
 35449              		.syntax unified
 35450              		.thumb
 35451              		.thumb_func
 35452              		.fpu fpv4-sp-d16
 35454              	fill_buffer_from_raw_x:
 35455              	.LVL2726:
 35456              	.LFB275:
6544:src/xeq.c     **** 
6545:src/xeq.c     **** char* fill_buffer_from_raw_x(char *buffer)
6546:src/xeq.c     **** {
 35457              		.loc 1 6546 1 view -0
 35458              		.cfi_startproc
 35459              		@ args = 0, pretend = 0, frame = 40
 35460              		@ frame_needed = 0, uses_anonymous_args = 0
6547:src/xeq.c     **** 	process_cmdline();
 35461              		.loc 1 6547 2 view .LVU9563
 35462              	.LBB4714:
 35463              	.LBI4714:
1226:src/xeq.c     **** 	decNumber a, b, x, t;
 35464              		.loc 1 1226 6 view .LVU9564
 35465              	.LBB4715:
1227:src/xeq.c     **** 
 35466              		.loc 1 1227 2 view .LVU9565
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35467              		.loc 1 1229 2 view .LVU9566
 35468              	.LBE4715:
 35469              	.LBE4714:
6546:src/xeq.c     **** 	process_cmdline();
 35470              		.loc 1 6546 1 is_stmt 0 view .LVU9567
 35471 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 35472              		.cfi_def_cfa_offset 36
 35473              		.cfi_offset 4, -36
 35474              		.cfi_offset 5, -32
 35475              		.cfi_offset 6, -28
 35476              		.cfi_offset 7, -24
 35477              		.cfi_offset 8, -20
 35478              		.cfi_offset 9, -16
 35479              		.cfi_offset 10, -12
ARM GAS  /tmp/cc7LeJ71.s 			page 892


 35480              		.cfi_offset 11, -8
 35481              		.cfi_offset 14, -4
 35482              	.LBB4719:
 35483              	.LBB4716:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35484              		.loc 1 1229 6 view .LVU9568
 35485 0004 2F4B     		ldr	r3, .L2694
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35486              		.loc 1 1229 5 view .LVU9569
 35487 0006 1B7F     		ldrb	r3, [r3, #28]	@ zero_extendqisi2
 35488              	.LBE4716:
 35489              	.LBE4719:
6546:src/xeq.c     **** 	process_cmdline();
 35490              		.loc 1 6546 1 view .LVU9570
 35491 0008 8BB0     		sub	sp, sp, #44
 35492              		.cfi_def_cfa_offset 80
6546:src/xeq.c     **** 	process_cmdline();
 35493              		.loc 1 6546 1 view .LVU9571
 35494 000a 0446     		mov	r4, r0
 35495              	.LBB4720:
 35496              	.LBB4717:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35497              		.loc 1 1229 5 view .LVU9572
 35498 000c 002B     		cmp	r3, #0
 35499 000e 55D1     		bne	.L2691
 35500              	.LVL2727:
 35501              	.L2671:
1229:src/xeq.c     **** 		const int bad_cmdline = is_bad_cmdline();
 35502              		.loc 1 1229 5 view .LVU9573
 35503              	.LBE4717:
 35504              	.LBE4720:
6548:src/xeq.c     **** 	if (is_intmode()) {
 35505              		.loc 1 6548 2 is_stmt 1 view .LVU9574
 35506              		.loc 1 6548 6 is_stmt 0 view .LVU9575
 35507 0010 2D4D     		ldr	r5, .L2694+4
 35508 0012 2B68     		ldr	r3, [r5]
 35509 0014 93F8E837 		ldrb	r3, [r3, #2024]	@ zero_extendqisi2
 35510              		.loc 1 6548 5 view .LVU9576
 35511 0018 DA07     		lsls	r2, r3, #31
 35512 001a 2CD5     		bpl	.L2672
 35513              	.LBB4721:
6549:src/xeq.c     **** 		int sgn;
 35514              		.loc 1 6549 3 is_stmt 1 view .LVU9577
6550:src/xeq.c     **** 		unsigned long long int x = extract_value(get_reg_n_int(regX_idx), &sgn);
 35515              		.loc 1 6550 3 view .LVU9578
 35516              		.loc 1 6550 30 is_stmt 0 view .LVU9579
 35517 001c 6420     		movs	r0, #100
 35518 001e FFF7FEFF 		bl	get_reg_n_int
 35519              	.LVL2728:
 35520 0022 01AA     		add	r2, sp, #4
 35521 0024 FFF7FEFF 		bl	extract_value
 35522              	.LVL2729:
 35523 0028 0646     		mov	r6, r0
 35524 002a 0F46     		mov	r7, r1
 35525              	.LVL2730:
6551:src/xeq.c     **** 		const int base = int_base();
 35526              		.loc 1 6551 3 is_stmt 1 view .LVU9580
ARM GAS  /tmp/cc7LeJ71.s 			page 893


 35527              		.loc 1 6551 20 is_stmt 0 view .LVU9581
 35528 002c FFF7FEFF 		bl	int_base
 35529              	.LVL2731:
6552:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
6553:src/xeq.c     **** 
6554:src/xeq.c     **** 		*p-- = '\0';
 35530              		.loc 1 6554 8 view .LVU9582
 35531 0030 0023     		movs	r3, #0
 35532              	.LVL2732:
6552:src/xeq.c     **** 		char *p = buffer + (sizeof(buffer)-1);
 35533              		.loc 1 6552 3 is_stmt 1 view .LVU9583
 35534              		.loc 1 6554 3 view .LVU9584
 35535              		.loc 1 6554 8 is_stmt 0 view .LVU9585
 35536 0032 E370     		strb	r3, [r4, #3]
6555:src/xeq.c     **** 		if (x == 0)
 35537              		.loc 1 6555 3 is_stmt 1 view .LVU9586
 35538              		.loc 1 6555 6 is_stmt 0 view .LVU9587
 35539 0034 56EA0703 		orrs	r3, r6, r7
 35540 0038 35D0     		beq	.L2692
 35541 003a 244D     		ldr	r5, .L2694+8
6554:src/xeq.c     **** 		if (x == 0)
 35542              		.loc 1 6554 5 view .LVU9588
 35543 003c 0234     		adds	r4, r4, #2
 35544              	.LVL2733:
6554:src/xeq.c     **** 		if (x == 0)
 35545              		.loc 1 6554 5 view .LVU9589
 35546 003e 8046     		mov	r8, r0
 35547 0040 4FEAE079 		asr	r9, r0, #31
 35548              	.LVL2734:
 35549              	.L2675:
 35550              	.LBB4722:
6556:src/xeq.c     **** 			*p-- = '0'; 
6557:src/xeq.c     **** 		else {
6558:src/xeq.c     **** 			while (x != 0) {
6559:src/xeq.c     **** 				const int n = x % base;
 35551              		.loc 1 6559 5 is_stmt 1 view .LVU9590
 35552 0044 3046     		mov	r0, r6
 35553 0046 3946     		mov	r1, r7
 35554 0048 4246     		mov	r2, r8
 35555 004a 4B46     		mov	r3, r9
 35556 004c FFF7FEFF 		bl	__aeabi_uldivmod
 35557              	.LVL2735:
6560:src/xeq.c     **** 				x /= base;
 35558              		.loc 1 6560 5 view .LVU9591
 35559 0050 BB46     		mov	fp, r7
 35560 0052 B246     		mov	r10, r6
 35561              	.LBE4722:
6558:src/xeq.c     **** 				const int n = x % base;
 35562              		.loc 1 6558 10 is_stmt 0 view .LVU9592
 35563 0054 CB45     		cmp	fp, r9
 35564              	.LBB4723:
6561:src/xeq.c     **** 				*p-- = n["0123456789ABCDEF"];
 35565              		.loc 1 6561 10 view .LVU9593
 35566 0056 AB5C     		ldrb	r3, [r5, r2]	@ zero_extendqisi2
 35567 0058 04F80139 		strb	r3, [r4], #-1
 35568              	.LVL2736:
 35569              		.loc 1 6561 10 view .LVU9594
ARM GAS  /tmp/cc7LeJ71.s 			page 894


 35570              	.LBE4723:
6558:src/xeq.c     **** 				const int n = x % base;
 35571              		.loc 1 6558 10 view .LVU9595
 35572 005c 08BF     		it	eq
 35573 005e C245     		cmpeq	r10, r8
 35574              	.LBB4724:
6560:src/xeq.c     **** 				x /= base;
 35575              		.loc 1 6560 7 view .LVU9596
 35576 0060 0646     		mov	r6, r0
 35577              	.LVL2737:
6560:src/xeq.c     **** 				x /= base;
 35578              		.loc 1 6560 7 view .LVU9597
 35579 0062 0F46     		mov	r7, r1
 35580              	.LVL2738:
 35581              		.loc 1 6561 5 is_stmt 1 view .LVU9598
 35582              		.loc 1 6561 5 is_stmt 0 view .LVU9599
 35583              	.LBE4724:
6558:src/xeq.c     **** 				const int n = x % base;
 35584              		.loc 1 6558 10 is_stmt 1 view .LVU9600
 35585 0064 EED2     		bcs	.L2675
6562:src/xeq.c     **** 			}
6563:src/xeq.c     **** 		}
6564:src/xeq.c     **** 		if (sgn)
 35586              		.loc 1 6564 3 view .LVU9601
 35587              		.loc 1 6564 6 is_stmt 0 view .LVU9602
 35588 0066 019B     		ldr	r3, [sp, #4]
 35589 0068 1BB3     		cbz	r3, .L2676
 35590              	.LVL2739:
 35591              	.L2693:
6565:src/xeq.c     **** 			*p = '-';
 35592              		.loc 1 6565 4 is_stmt 1 view .LVU9603
 35593              		.loc 1 6565 7 is_stmt 0 view .LVU9604
 35594 006a 2D23     		movs	r3, #45
 35595 006c 2370     		strb	r3, [r4]
 35596              	.LVL2740:
 35597              	.L2670:
 35598              		.loc 1 6565 7 view .LVU9605
 35599              	.LBE4721:
6566:src/xeq.c     **** 		else
6567:src/xeq.c     **** 			p++;
6568:src/xeq.c     **** 		return p;
6569:src/xeq.c     **** 	} else {
6570:src/xeq.c     **** 		decNumber x;
6571:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
6572:src/xeq.c     **** 		if (UState.fraccomma) {
6573:src/xeq.c     **** 			char *p = strchr(buffer, '.');
6574:src/xeq.c     **** 			if (p != NULL)
6575:src/xeq.c     **** 				*p = ',';
6576:src/xeq.c     **** 		}
6577:src/xeq.c     **** 
6578:src/xeq.c     **** 		return buffer;
6579:src/xeq.c     **** 	}
6580:src/xeq.c     **** }
 35600              		.loc 1 6580 1 view .LVU9606
 35601 006e 2046     		mov	r0, r4
 35602 0070 0BB0     		add	sp, sp, #44
 35603              		.cfi_remember_state
ARM GAS  /tmp/cc7LeJ71.s 			page 895


 35604              		.cfi_def_cfa_offset 36
 35605              		@ sp needed
 35606 0072 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35607              	.LVL2741:
 35608              	.L2672:
 35609              		.cfi_restore_state
 35610              	.LBB4725:
6570:src/xeq.c     **** 		decNumberToString(getX(&x), buffer);
 35611              		.loc 1 6570 3 is_stmt 1 view .LVU9607
6571:src/xeq.c     **** 		if (UState.fraccomma) {
 35612              		.loc 1 6571 3 view .LVU9608
 35613              	.LBB4726:
 35614              	.LBI4726:
 824:src/xeq.c     **** 	return getRegister(x, regX_idx);
 35615              		.loc 1 824 12 view .LVU9609
 35616              	.LBB4727:
 825:src/xeq.c     **** }
 35617              		.loc 1 825 2 view .LVU9610
 825:src/xeq.c     **** }
 35618              		.loc 1 825 9 is_stmt 0 view .LVU9611
 35619 0076 6421     		movs	r1, #100
 35620 0078 01A8     		add	r0, sp, #4
 35621              	.LVL2742:
 825:src/xeq.c     **** }
 35622              		.loc 1 825 9 view .LVU9612
 35623 007a FFF7FEFF 		bl	getRegister
 35624              	.LVL2743:
 825:src/xeq.c     **** }
 35625              		.loc 1 825 9 view .LVU9613
 35626              	.LBE4727:
 35627              	.LBE4726:
6571:src/xeq.c     **** 		if (UState.fraccomma) {
 35628              		.loc 1 6571 3 view .LVU9614
 35629 007e 2146     		mov	r1, r4
 35630 0080 FFF7FEFF 		bl	decNumberToString
 35631              	.LVL2744:
6572:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35632              		.loc 1 6572 3 is_stmt 1 view .LVU9615
6572:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35633              		.loc 1 6572 7 is_stmt 0 view .LVU9616
 35634 0084 2B68     		ldr	r3, [r5]
 35635 0086 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
6572:src/xeq.c     **** 			char *p = strchr(buffer, '.');
 35636              		.loc 1 6572 6 view .LVU9617
 35637 008a 9B06     		lsls	r3, r3, #26
 35638 008c EFD5     		bpl	.L2670
 35639              	.LBB4728:
6573:src/xeq.c     **** 			if (p != NULL)
 35640              		.loc 1 6573 4 is_stmt 1 view .LVU9618
6573:src/xeq.c     **** 			if (p != NULL)
 35641              		.loc 1 6573 14 is_stmt 0 view .LVU9619
 35642 008e 2E21     		movs	r1, #46
 35643 0090 2046     		mov	r0, r4
 35644 0092 FFF7FEFF 		bl	strchr
 35645              	.LVL2745:
6574:src/xeq.c     **** 				*p = ',';
 35646              		.loc 1 6574 4 is_stmt 1 view .LVU9620
ARM GAS  /tmp/cc7LeJ71.s 			page 896


6574:src/xeq.c     **** 				*p = ',';
 35647              		.loc 1 6574 7 is_stmt 0 view .LVU9621
 35648 0096 0028     		cmp	r0, #0
 35649 0098 E9D0     		beq	.L2670
6575:src/xeq.c     **** 		}
 35650              		.loc 1 6575 5 is_stmt 1 view .LVU9622
6575:src/xeq.c     **** 		}
 35651              		.loc 1 6575 8 is_stmt 0 view .LVU9623
 35652 009a 2C23     		movs	r3, #44
 35653 009c 0370     		strb	r3, [r0]
 35654              	.LBE4728:
6578:src/xeq.c     **** 	}
 35655              		.loc 1 6578 3 is_stmt 1 view .LVU9624
 35656              	.LBE4725:
 35657              		.loc 1 6580 1 is_stmt 0 view .LVU9625
 35658 009e 2046     		mov	r0, r4
 35659              	.LVL2746:
 35660              		.loc 1 6580 1 view .LVU9626
 35661 00a0 0BB0     		add	sp, sp, #44
 35662              		.cfi_remember_state
 35663              		.cfi_def_cfa_offset 36
 35664              		@ sp needed
 35665 00a2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35666              	.LVL2747:
 35667              	.L2692:
 35668              		.cfi_restore_state
 35669              	.LBB4729:
6556:src/xeq.c     **** 		else {
 35670              		.loc 1 6556 4 is_stmt 1 view .LVU9627
6556:src/xeq.c     **** 		else {
 35671              		.loc 1 6556 9 is_stmt 0 view .LVU9628
 35672 00a6 3023     		movs	r3, #48
 35673 00a8 A370     		strb	r3, [r4, #2]
6564:src/xeq.c     **** 			*p = '-';
 35674              		.loc 1 6564 6 view .LVU9629
 35675 00aa 019B     		ldr	r3, [sp, #4]
6556:src/xeq.c     **** 		else {
 35676              		.loc 1 6556 6 view .LVU9630
 35677 00ac 0134     		adds	r4, r4, #1
 35678              	.LVL2748:
6564:src/xeq.c     **** 			*p = '-';
 35679              		.loc 1 6564 3 is_stmt 1 view .LVU9631
6564:src/xeq.c     **** 			*p = '-';
 35680              		.loc 1 6564 6 is_stmt 0 view .LVU9632
 35681 00ae 002B     		cmp	r3, #0
 35682 00b0 DBD1     		bne	.L2693
 35683              	.LVL2749:
 35684              	.L2676:
6567:src/xeq.c     **** 		return p;
 35685              		.loc 1 6567 4 is_stmt 1 view .LVU9633
6567:src/xeq.c     **** 		return p;
 35686              		.loc 1 6567 5 is_stmt 0 view .LVU9634
 35687 00b2 0134     		adds	r4, r4, #1
 35688              	.LVL2750:
6568:src/xeq.c     **** 	} else {
 35689              		.loc 1 6568 3 is_stmt 1 view .LVU9635
 35690              	.LBE4729:
ARM GAS  /tmp/cc7LeJ71.s 			page 897


 35691              		.loc 1 6580 1 is_stmt 0 view .LVU9636
 35692 00b4 2046     		mov	r0, r4
 35693 00b6 0BB0     		add	sp, sp, #44
 35694              		.cfi_remember_state
 35695              		.cfi_def_cfa_offset 36
 35696              		@ sp needed
 35697 00b8 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 35698              	.LVL2751:
 35699              	.L2691:
 35700              		.cfi_restore_state
 35701              	.LBB4730:
 35702              	.LBB4718:
 35703              		.loc 1 6580 1 view .LVU9637
 35704 00bc FFF7FEFF 		bl	process_cmdline.part.0
 35705              	.LVL2752:
 35706              		.loc 1 6580 1 view .LVU9638
 35707 00c0 A6E7     		b	.L2671
 35708              	.L2695:
 35709 00c2 00BF     		.align	2
 35710              	.L2694:
 35711 00c4 00000000 		.word	StateWhileOn
 35712 00c8 00000000 		.word	main_ram
 35713 00cc 00000000 		.word	.LC10
 35714              	.LBE4718:
 35715              	.LBE4730:
 35716              		.cfi_endproc
 35717              	.LFE275:
 35719              		.comm	RectPolConv,4,4
 35720              		.comm	Tracing,4,4
 35721              		.comm	StackBase,4,4
 35722              		.comm	RetStk,4,4
 35723              		.comm	ProgFree,4,4
 35724              		.comm	RetStkSize,4,4
 35725              		.comm	TraceBuffer,25,4
 35726              		.comm	Ctx,24,4
 35727              		.comm	UserLocalRegs,4,4
 35728              		.comm	XromUserPc,4,4
 35729              		.comm	ShowRegister,4,4
 35730              		.comm	XeqOpCode,2,2
 35731              		.comm	PcWrapped,4,4
 35732              		.comm	Error,4,4
 35733              		.comm	Busy,4,4
 35734              		.comm	Pause,1,1
 35735              		.comm	JustStopped,4,4
 35736              		.comm	XromRunning,4,4
 35737              		.comm	Running,4,4
 35738              		.global	xrom_targets
 35739              		.section	.rodata
 35740              		.align	2
 35741              		.set	.LANCHOR5,. + 0
 35742              	.LC1:
 35743 0000 0C0C0C0C 		.ascii	"\014\014\014\014\014\014\014\014\014\013\013\013\014"
 35743      0C0C0C0C 
 35743      0C0B0B0B 
 35743      0C
 35744 000d 0C0A0A0C 		.ascii	"\014\012\012\014\014\014\007\010\011\014\014\014\004"
 35744      0C0C0708 
ARM GAS  /tmp/cc7LeJ71.s 			page 898


 35744      090C0C0C 
 35744      04
 35745 001a 05060C0C 		.ascii	"\005\006\014\014\014\001\002\003\014\014\014\000\012"
 35745      0C010203 
 35745      0C0C0C00 
 35745      0A
 35746 0027 0C0C     		.ascii	"\014\014"
 35747              		.section	.bss.result.11709,"aw",%nobits
 35748              		.align	2
 35749              		.set	.LANCHOR2,. + 0
 35752              	result.11709:
 35753 0000 00000000 		.space	16
 35753      00000000 
 35753      00000000 
 35753      00000000 
 35754              		.section	.data.RegionTab,"aw"
 35755              		.align	2
 35756              		.set	.LANCHOR0,. + 0
 35759              	RegionTab:
 35760 0000 00000000 		.word	0
 35761 0004 00000000 		.word	0
 35762 0008 00000000 		.word	0
 35763 000c 00000000 		.word	xrom
 35764              		.section	.rodata.StackRegMask,"a"
 35765              		.align	2
 35766              		.set	.LANCHOR3,. + 0
 35769              	StackRegMask:
 35770 0000 0F01     		.short	271
 35771 0002 FF01     		.short	511
 35772              		.section	.rodata.convergence_tolerances,"a"
 35773              		.align	2
 35774              		.set	.LANCHOR7,. + 0
 35777              	convergence_tolerances:
 35778 0000 00000000 		.word	const_1e_14
 35779 0004 00000000 		.word	const_1e_24
 35780 0008 00000000 		.word	const_1e_32
 35781              		.section	.rodata.modes.11402,"a"
 35782              		.align	2
 35783              		.set	.LANCHOR1,. + 0
 35786              	modes.11402:
 35787 0000 03020401 		.ascii	"\003\002\004\001\005\000\006"
 35787      050006
 35788              		.section	.rodata.modes.11919,"a"
 35789              		.align	2
 35790              		.set	.LANCHOR4,. + 0
 35793              	modes.11919:
 35794 0000 02010081 		.ascii	"\002\001\000\201"
 35795              		.section	.rodata.xrom_targets,"a"
 35796              		.align	2
 35797              		.set	.LANCHOR6,. + 0
 35800              	xrom_targets:
 35801 0000 9107     		.short	1937
 35802 0002 B70B     		.short	2999
 35803 0004 4602     		.short	582
 35804 0006 4402     		.short	580
 35805 0008 420A     		.short	2626
 35806 000a 340A     		.short	2612
ARM GAS  /tmp/cc7LeJ71.s 			page 899


 35807 000c 100C     		.short	3088
 35808 000e 9C05     		.short	1436
 35809 0010 3B0A     		.short	2619
 35810 0012 5A06     		.short	1626
 35811 0014 6F06     		.short	1647
 35812 0016 6B06     		.short	1643
 35813 0018 6406     		.short	1636
 35814 001a 390A     		.short	2617
 35815 001c 7206     		.short	1650
 35816 001e 7506     		.short	1653
 35817 0020 7706     		.short	1655
 35818 0022 5D06     		.short	1629
 35819 0024 5707     		.short	1879
 35820 0026 4F08     		.short	2127
 35821 0028 EB05     		.short	1515
 35822 002a 0405     		.short	1284
 35823 002c 2907     		.short	1833
 35824 002e 8205     		.short	1410
 35825 0030 9A05     		.short	1434
 35826 0032 EC05     		.short	1516
 35827              		.text
 35828              	.Letext0:
 35829              		.file 2 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stdint.h"
 35830              		.file 3 "dmcp/dmcp.h"
 35831              		.file 4 "/usr/lib/gcc/arm-none-eabi/9.2.1/include/stddef.h"
 35832              		.file 5 "/usr/include/newlib/sys/_types.h"
 35833              		.file 6 "/usr/include/newlib/sys/reent.h"
 35834              		.file 7 "/usr/include/newlib/sys/lock.h"
 35835              		.file 8 "/usr/include/newlib/stdlib.h"
 35836              		.file 9 "src/decNumber/decContext.h"
 35837              		.file 10 "src/decNumber/decNumber.h"
 35838              		.file 11 "src/decNumber/decimal64.h"
 35839              		.file 12 "src/decNumber/decimal128.h"
 35840              		.file 13 "src/xeq.h"
 35841              		.file 14 "src/data.h"
 35842              		.file 15 "src/keys.h"
 35843              		.file 16 "src/menu.h"
 35844              		.file 17 "src/storage.h"
 35845              		.file 18 "src/stats.h"
 35846              		.file 19 "src/display.h"
 35847              		.file 20 "src/consts.h"
 35848              		.file 21 "src/xrom.h"
 35849              		.file 22 "src/stopwatch.h"
 35850              		.file 23 "src/printer.h"
 35851              		.file 24 "src/pretty.h"
 35852              		.file 25 "src/xrom_targets.c"
 35853              		.file 26 "src/int.h"
 35854              		.file 27 "/usr/include/newlib/string.h"
 35855              		.file 28 "src/lcd.h"
 35856              		.file 29 "src/decn.h"
 35857              		.file 30 "src/complex.h"
 35858              		.file 31 "/usr/include/newlib/stdio.h"
 35859              		.file 32 "src/alpha.h"
ARM GAS  /tmp/cc7LeJ71.s 			page 900


DEFINED SYMBOLS
                            *ABS*:0000000000000000 xeq.c
     /tmp/cc7LeJ71.s:18     .text.find_section_bounds:0000000000000000 $t
     /tmp/cc7LeJ71.s:26     .text.find_section_bounds:0000000000000000 find_section_bounds
     /tmp/cc7LeJ71.s:164    .text.find_section_bounds:0000000000000068 $d
     /tmp/cc7LeJ71.s:172    .text.reg_address:0000000000000000 $t
     /tmp/cc7LeJ71.s:179    .text.reg_address:0000000000000000 reg_address
     /tmp/cc7LeJ71.s:293    .text.reg_address:0000000000000058 $d
     /tmp/cc7LeJ71.s:300    .text.retstk_up:0000000000000000 $t
     /tmp/cc7LeJ71.s:307    .text.retstk_up:0000000000000000 retstk_up
     /tmp/cc7LeJ71.s:450    .text.retstk_up:0000000000000078 $d
                            *COM*:0000000000000004 RetStk
     /tmp/cc7LeJ71.s:457    .text.flag_word:0000000000000000 $t
     /tmp/cc7LeJ71.s:464    .text.flag_word:0000000000000000 flag_word
     /tmp/cc7LeJ71.s:584    .text.flag_word:0000000000000074 $d
     /tmp/cc7LeJ71.s:591    .text.set_zero:0000000000000000 $t
     /tmp/cc7LeJ71.s:598    .text.set_zero:0000000000000000 set_zero
     /tmp/cc7LeJ71.s:637    .text.set_zero:0000000000000020 $d
     /tmp/cc7LeJ71.s:644    .text.intResult:0000000000000000 $t
     /tmp/cc7LeJ71.s:651    .text.intResult:0000000000000000 intResult
     /tmp/cc7LeJ71.s:851    .text.intResult:00000000000000a4 $d
                            *COM*:0000000000000004 Error
     /tmp/cc7LeJ71.s:857    .text.check_stack_overlap:0000000000000000 $t
     /tmp/cc7LeJ71.s:864    .text.check_stack_overlap:0000000000000000 check_stack_overlap
     /tmp/cc7LeJ71.s:1078   .text.check_stack_overlap:0000000000000068 $d
     /tmp/cc7LeJ71.s:1085   .text.is_xrom:0000000000000000 $t
     /tmp/cc7LeJ71.s:1093   .text.is_xrom:0000000000000000 is_xrom
     /tmp/cc7LeJ71.s:1114   .text.is_xrom:0000000000000018 $d
     /tmp/cc7LeJ71.s:1119   .text.move_retstk:0000000000000000 $t
     /tmp/cc7LeJ71.s:1127   .text.move_retstk:0000000000000000 move_retstk
     /tmp/cc7LeJ71.s:1310   .text.move_retstk:000000000000006c $d
                            *COM*:0000000000000004 RetStkSize
     /tmp/cc7LeJ71.s:1319   .text.local_levels:0000000000000000 $t
     /tmp/cc7LeJ71.s:1327   .text.local_levels:0000000000000000 local_levels
     /tmp/cc7LeJ71.s:1357   .text.local_levels:0000000000000024 $d
     /tmp/cc7LeJ71.s:1363   .text.local_regs_rarg:0000000000000000 $t
     /tmp/cc7LeJ71.s:1371   .text.local_regs_rarg:0000000000000000 local_regs_rarg
     /tmp/cc7LeJ71.s:1473   .text.local_regs_rarg:0000000000000060 $d
     /tmp/cc7LeJ71.s:1479   .text.get_reg_limit:0000000000000000 $t
     /tmp/cc7LeJ71.s:1486   .text.get_reg_limit:0000000000000000 get_reg_limit
     /tmp/cc7LeJ71.s:1724   .text.get_reg_limit:00000000000000b0 $d
     /tmp/cc7LeJ71.s:1733   .text.local_regs:0000000000000000 $t
     /tmp/cc7LeJ71.s:1741   .text.local_regs:0000000000000000 local_regs
     /tmp/cc7LeJ71.s:1840   .text.local_regs:000000000000003c $d
     /tmp/cc7LeJ71.s:1850   .text.global_regs_rarg:0000000000000000 $t
     /tmp/cc7LeJ71.s:1858   .text.global_regs_rarg:0000000000000000 global_regs_rarg
     /tmp/cc7LeJ71.s:1931   .text.global_regs_rarg:000000000000003c $d
     /tmp/cc7LeJ71.s:1936   .text.global_regs:0000000000000000 $t
     /tmp/cc7LeJ71.s:1944   .text.global_regs:0000000000000000 global_regs
     /tmp/cc7LeJ71.s:2002   .text.global_regs:0000000000000020 $d
     /tmp/cc7LeJ71.s:2007   .text.version:0000000000000000 $t
     /tmp/cc7LeJ71.s:2015   .text.version:0000000000000000 version
     /tmp/cc7LeJ71.s:2046   .text.version:0000000000000018 $d
     /tmp/cc7LeJ71.s:2051   .text.cmd_off:0000000000000000 $t
     /tmp/cc7LeJ71.s:2059   .text.cmd_off:0000000000000000 cmd_off
     /tmp/cc7LeJ71.s:2075   .text.init_RegionTab:0000000000000000 $t
     /tmp/cc7LeJ71.s:2083   .text.init_RegionTab:0000000000000000 init_RegionTab
ARM GAS  /tmp/cc7LeJ71.s 			page 901


     /tmp/cc7LeJ71.s:2121   .text.init_RegionTab:000000000000001c $d
     /tmp/cc7LeJ71.s:2129   .text.sizeLIB:0000000000000000 $t
     /tmp/cc7LeJ71.s:2137   .text.sizeLIB:0000000000000000 sizeLIB
     /tmp/cc7LeJ71.s:2171   .text.sizeLIB:0000000000000018 $d
     /tmp/cc7LeJ71.s:2177   .text.getprog:0000000000000000 $t
     /tmp/cc7LeJ71.s:2185   .text.getprog:0000000000000000 getprog
     /tmp/cc7LeJ71.s:2289   .text.getprog:0000000000000048 $d
     /tmp/cc7LeJ71.s:2297   .text.get_current_prog:0000000000000000 $t
     /tmp/cc7LeJ71.s:2305   .text.get_current_prog:0000000000000000 get_current_prog
     /tmp/cc7LeJ71.s:2337   .text.get_current_prog:0000000000000020 $d
     /tmp/cc7LeJ71.s:2343   .text.do_inc:0000000000000000 $t
     /tmp/cc7LeJ71.s:2351   .text.do_inc:0000000000000000 do_inc
     /tmp/cc7LeJ71.s:2431   .text.do_inc:0000000000000044 $d
                            *COM*:0000000000000004 PcWrapped
     /tmp/cc7LeJ71.s:2436   .text.user_pc.part.0:0000000000000000 $t
     /tmp/cc7LeJ71.s:2443   .text.user_pc.part.0:0000000000000000 user_pc.part.0
     /tmp/cc7LeJ71.s:2513   .text.user_pc.part.0:0000000000000034 $d
     /tmp/cc7LeJ71.s:2518   .rodata.print_step.str1.4:0000000000000000 $d
     /tmp/cc7LeJ71.s:2522   .text.print_step:0000000000000000 $t
     /tmp/cc7LeJ71.s:2529   .text.print_step:0000000000000000 print_step
     /tmp/cc7LeJ71.s:2698   .text.print_step:0000000000000098 $d
                            *COM*:0000000000000019 TraceBuffer
     /tmp/cc7LeJ71.s:2709   .text.do_dec:0000000000000000 $t
     /tmp/cc7LeJ71.s:2717   .text.do_dec:0000000000000000 do_dec
     /tmp/cc7LeJ71.s:2799   .text.do_dec:0000000000000048 $d
     /tmp/cc7LeJ71.s:2804   .text.update_program_bounds:0000000000000000 $t
     /tmp/cc7LeJ71.s:2812   .text.update_program_bounds:0000000000000000 update_program_bounds
     /tmp/cc7LeJ71.s:2965   .text.update_program_bounds:000000000000008c $d
     /tmp/cc7LeJ71.s:2972   .text.set_pc:0000000000000000 $t
     /tmp/cc7LeJ71.s:2980   .text.set_pc:0000000000000000 set_pc
     /tmp/cc7LeJ71.s:3214   .text.set_pc:00000000000000a4 $d
     /tmp/cc7LeJ71.s:3223   .text.incpc:0000000000000000 $t
     /tmp/cc7LeJ71.s:3231   .text.incpc:0000000000000000 incpc
     /tmp/cc7LeJ71.s:3285   .text.incpc:0000000000000024 $d
     /tmp/cc7LeJ71.s:3291   .text.decpc:0000000000000000 $t
     /tmp/cc7LeJ71.s:3299   .text.decpc:0000000000000000 decpc
     /tmp/cc7LeJ71.s:3354   .text.decpc:0000000000000024 $d
     /tmp/cc7LeJ71.s:3361   .text.do_rtn:0000000000000000 $t
     /tmp/cc7LeJ71.s:3368   .text.do_rtn:0000000000000000 do_rtn
     /tmp/cc7LeJ71.s:3548   .text.do_rtn:0000000000000094 $d
                            *COM*:0000000000000004 Running
     /tmp/cc7LeJ71.s:3557   .text.user_pc:0000000000000000 $t
     /tmp/cc7LeJ71.s:3565   .text.user_pc:0000000000000000 user_pc
     /tmp/cc7LeJ71.s:3597   .text.find_user_pc:0000000000000000 $t
     /tmp/cc7LeJ71.s:3605   .text.find_user_pc:0000000000000000 find_user_pc
     /tmp/cc7LeJ71.s:3713   .text.find_user_pc:000000000000004c $d
     /tmp/cc7LeJ71.s:3719   .text.report_err:0000000000000000 $t
     /tmp/cc7LeJ71.s:3727   .text.report_err:0000000000000000 report_err
     /tmp/cc7LeJ71.s:3786   .text.report_err:000000000000001c $d
     /tmp/cc7LeJ71.s:3791   .text.report_warn:0000000000000000 $t
     /tmp/cc7LeJ71.s:3799   .text.report_warn:0000000000000000 report_warn
     /tmp/cc7LeJ71.s:3919   .text.report_warn:0000000000000048 $d
     /tmp/cc7LeJ71.s:3928   .text.bad_mode_error:0000000000000000 $t
     /tmp/cc7LeJ71.s:3936   .text.bad_mode_error:0000000000000000 bad_mode_error
     /tmp/cc7LeJ71.s:3977   .text.bad_mode_error:000000000000000c $d
     /tmp/cc7LeJ71.s:3982   .text.cmderr:0000000000000000 $t
     /tmp/cc7LeJ71.s:3990   .text.cmderr:0000000000000000 cmderr
ARM GAS  /tmp/cc7LeJ71.s 			page 902


     /tmp/cc7LeJ71.s:4047   .text.cmderr:0000000000000010 $d
     /tmp/cc7LeJ71.s:4056   .text.cmdmsg:0000000000000000 $t
     /tmp/cc7LeJ71.s:4064   .text.cmdmsg:0000000000000000 cmdmsg
     /tmp/cc7LeJ71.s:4080   .text.rarg_roundingmode:0000000000000000 $t
     /tmp/cc7LeJ71.s:4088   .text.rarg_roundingmode:0000000000000000 rarg_roundingmode
     /tmp/cc7LeJ71.s:4110   .text.rarg_roundingmode:0000000000000014 $d
     /tmp/cc7LeJ71.s:4115   .text.packed_from_number:0000000000000000 $t
     /tmp/cc7LeJ71.s:4123   .text.packed_from_number:0000000000000000 packed_from_number
     /tmp/cc7LeJ71.s:4190   .text.packed_from_number:0000000000000034 $d
     /tmp/cc7LeJ71.s:4196   .text.packed128_from_number:0000000000000000 $t
     /tmp/cc7LeJ71.s:4204   .text.packed128_from_number:0000000000000000 packed128_from_number
     /tmp/cc7LeJ71.s:4271   .text.packed128_from_number:0000000000000034 $d
     /tmp/cc7LeJ71.s:4277   .text.check_special:0000000000000000 $t
     /tmp/cc7LeJ71.s:4284   .text.check_special:0000000000000000 check_special
     /tmp/cc7LeJ71.s:4511   .text.check_special:00000000000000a0 $d
     /tmp/cc7LeJ71.s:4517   .text.packed_from_packed128:0000000000000000 $t
     /tmp/cc7LeJ71.s:4525   .text.packed_from_packed128:0000000000000000 packed_from_packed128
     /tmp/cc7LeJ71.s:4568   .text.packed128_from_packed:0000000000000000 $t
     /tmp/cc7LeJ71.s:4576   .text.packed128_from_packed:0000000000000000 packed128_from_packed
     /tmp/cc7LeJ71.s:4619   .text.stack_size:0000000000000000 $t
     /tmp/cc7LeJ71.s:4627   .text.stack_size:0000000000000000 stack_size
     /tmp/cc7LeJ71.s:4678   .text.stack_size:0000000000000030 $d
     /tmp/cc7LeJ71.s:4684   .text.copyreg:0000000000000000 $t
     /tmp/cc7LeJ71.s:4692   .text.copyreg:0000000000000000 copyreg
     /tmp/cc7LeJ71.s:4725   .text.copyreg:000000000000001c $d
     /tmp/cc7LeJ71.s:4730   .text.set_lift:0000000000000000 $t
     /tmp/cc7LeJ71.s:4738   .text.set_lift:0000000000000000 set_lift
     /tmp/cc7LeJ71.s:4756   .text.set_lift:000000000000000c $d
     /tmp/cc7LeJ71.s:4761   .text.entry_rpn_on_off:0000000000000000 $t
     /tmp/cc7LeJ71.s:4769   .text.entry_rpn_on_off:0000000000000000 entry_rpn_on_off
     /tmp/cc7LeJ71.s:4806   .text.entry_rpn_on_off:0000000000000030 $d
     /tmp/cc7LeJ71.s:4811   .text.is_dblmode:0000000000000000 $t
     /tmp/cc7LeJ71.s:4819   .text.is_dblmode:0000000000000000 is_dblmode
     /tmp/cc7LeJ71.s:4841   .text.is_dblmode:000000000000001c $d
     /tmp/cc7LeJ71.s:4846   .text.is_usrdblmode:0000000000000000 $t
     /tmp/cc7LeJ71.s:4854   .text.is_usrdblmode:0000000000000000 is_usrdblmode
     /tmp/cc7LeJ71.s:4896   .text.is_usrdblmode:000000000000002c $d
     /tmp/cc7LeJ71.s:4902   .text.s_to_i:0000000000000000 $t
     /tmp/cc7LeJ71.s:4910   .text.s_to_i:0000000000000000 s_to_i
     /tmp/cc7LeJ71.s:5058   .text.digit:0000000000000000 $t
     /tmp/cc7LeJ71.s:5065   .text.digit:0000000000000000 digit
     /tmp/cc7LeJ71.s:5610   .text.digit:0000000000000184 $d
     /tmp/cc7LeJ71.s:5617   .text.s_to_ull:0000000000000000 $t
     /tmp/cc7LeJ71.s:5625   .text.s_to_ull:0000000000000000 s_to_ull
     /tmp/cc7LeJ71.s:5719   .text.get_cmdline:0000000000000000 $t
     /tmp/cc7LeJ71.s:5727   .text.get_cmdline:0000000000000000 get_cmdline
     /tmp/cc7LeJ71.s:5755   .text.get_cmdline:0000000000000014 $d
     /tmp/cc7LeJ71.s:5760   .text.is_bad_cmdline:0000000000000000 $t
     /tmp/cc7LeJ71.s:5768   .text.is_bad_cmdline:0000000000000000 is_bad_cmdline
     /tmp/cc7LeJ71.s:5783   .text.get_flash_reg_n:0000000000000000 $t
     /tmp/cc7LeJ71.s:5791   .text.get_flash_reg_n:0000000000000000 get_flash_reg_n
     /tmp/cc7LeJ71.s:5818   .text.get_flash_reg_n:000000000000001c $d
     /tmp/cc7LeJ71.s:5823   .text.get_const:0000000000000000 $t
     /tmp/cc7LeJ71.s:5831   .text.get_const:0000000000000000 get_const
     /tmp/cc7LeJ71.s:5979   .text.get_const:0000000000000074 $d
     /tmp/cc7LeJ71.s:5987   .text.get_reg_n:0000000000000000 $t
     /tmp/cc7LeJ71.s:5995   .text.get_reg_n:0000000000000000 get_reg_n
ARM GAS  /tmp/cc7LeJ71.s 			page 903


     /tmp/cc7LeJ71.s:6219   .text.get_reg_n:00000000000000b0 $d
     /tmp/cc7LeJ71.s:6226   .text.get_stack:0000000000000000 $t
     /tmp/cc7LeJ71.s:6234   .text.get_stack:0000000000000000 get_stack
     /tmp/cc7LeJ71.s:6254   .text.lift:0000000000000000 $t
     /tmp/cc7LeJ71.s:6262   .text.lift:0000000000000000 lift
     /tmp/cc7LeJ71.s:6441   .text.lift:0000000000000064 $d
     /tmp/cc7LeJ71.s:6449   .text.lift_if_enabled:0000000000000000 $t
     /tmp/cc7LeJ71.s:6457   .text.lift_if_enabled:0000000000000000 lift_if_enabled
     /tmp/cc7LeJ71.s:6487   .text.lift_if_enabled:0000000000000010 $d
     /tmp/cc7LeJ71.s:6492   .text.lift2_if_enabled:0000000000000000 $t
     /tmp/cc7LeJ71.s:6499   .text.lift2_if_enabled:0000000000000000 lift2_if_enabled
     /tmp/cc7LeJ71.s:6614   .text.lift2_if_enabled:0000000000000034 $d
     /tmp/cc7LeJ71.s:6622   .text.lower:0000000000000000 $t
     /tmp/cc7LeJ71.s:6629   .text.lower:0000000000000000 lower
     /tmp/cc7LeJ71.s:6811   .text.lower:000000000000006c $d
     /tmp/cc7LeJ71.s:6819   .text.get_stack_top:0000000000000000 $t
     /tmp/cc7LeJ71.s:6826   .text.get_stack_top:0000000000000000 get_stack_top
     /tmp/cc7LeJ71.s:6911   .text.get_stack_top:0000000000000034 $d
     /tmp/cc7LeJ71.s:6919   .text.roll_down:0000000000000000 $t
     /tmp/cc7LeJ71.s:6927   .text.roll_down:0000000000000000 roll_down
     /tmp/cc7LeJ71.s:7045   .text.roll_down:000000000000004c $d
                            *COM*:0000000000000004 StackBase
     /tmp/cc7LeJ71.s:7051   .text.cpx_roll_down:0000000000000000 $t
     /tmp/cc7LeJ71.s:7059   .text.cpx_roll_down:0000000000000000 cpx_roll_down
     /tmp/cc7LeJ71.s:7119   .text.cpx_roll_down:000000000000002c $d
     /tmp/cc7LeJ71.s:7125   .text.roll_up:0000000000000000 $t
     /tmp/cc7LeJ71.s:7133   .text.roll_up:0000000000000000 roll_up
     /tmp/cc7LeJ71.s:7260   .text.roll_up:000000000000004c $d
     /tmp/cc7LeJ71.s:7266   .text.cpx_roll_up:0000000000000000 $t
     /tmp/cc7LeJ71.s:7274   .text.cpx_roll_up:0000000000000000 cpx_roll_up
     /tmp/cc7LeJ71.s:7334   .text.cpx_roll_up:000000000000002c $d
     /tmp/cc7LeJ71.s:7340   .text.fill:0000000000000000 $t
     /tmp/cc7LeJ71.s:7348   .text.fill:0000000000000000 fill
     /tmp/cc7LeJ71.s:7503   .text.fill:0000000000000064 $d
     /tmp/cc7LeJ71.s:7512   .text.lower2:0000000000000000 $t
     /tmp/cc7LeJ71.s:7519   .text.lower2:0000000000000000 lower2
     /tmp/cc7LeJ71.s:7701   .text.lower2:000000000000006c $d
     /tmp/cc7LeJ71.s:7709   .text.drop:0000000000000000 $t
     /tmp/cc7LeJ71.s:7717   .text.drop:0000000000000000 drop
     /tmp/cc7LeJ71.s:7760   .text.drop:000000000000001c $d
     /tmp/cc7LeJ71.s:7765   .text.copyreg_n:0000000000000000 $t
     /tmp/cc7LeJ71.s:7773   .text.copyreg_n:0000000000000000 copyreg_n
     /tmp/cc7LeJ71.s:7857   .text.copyreg_n:0000000000000038 $d
     /tmp/cc7LeJ71.s:7864   .text.setlastX:0000000000000000 $t
     /tmp/cc7LeJ71.s:7872   .text.setlastX:0000000000000000 setlastX
     /tmp/cc7LeJ71.s:7888   .text.setlastXY:0000000000000000 $t
     /tmp/cc7LeJ71.s:7895   .text.setlastXY:0000000000000000 setlastXY
     /tmp/cc7LeJ71.s:7938   .text.getRegister:0000000000000000 $t
     /tmp/cc7LeJ71.s:7946   .text.getRegister:0000000000000000 getRegister
     /tmp/cc7LeJ71.s:8008   .text.getRegister:0000000000000030 $d
     /tmp/cc7LeJ71.s:8013   .text.getX:0000000000000000 $t
     /tmp/cc7LeJ71.s:8021   .text.getX:0000000000000000 getX
     /tmp/cc7LeJ71.s:8039   .text.getY:0000000000000000 $t
     /tmp/cc7LeJ71.s:8047   .text.getY:0000000000000000 getY
     /tmp/cc7LeJ71.s:8064   .text.getXY:0000000000000000 $t
     /tmp/cc7LeJ71.s:8072   .text.getXY:0000000000000000 getXY
     /tmp/cc7LeJ71.s:8133   .text.getXYZ:0000000000000000 $t
ARM GAS  /tmp/cc7LeJ71.s 			page 904


     /tmp/cc7LeJ71.s:8141   .text.getXYZ:0000000000000000 getXYZ
     /tmp/cc7LeJ71.s:8234   .text.getYZ:0000000000000000 $t
     /tmp/cc7LeJ71.s:8242   .text.getYZ:0000000000000000 getYZ
     /tmp/cc7LeJ71.s:8303   .text.getXYZT:0000000000000000 $t
     /tmp/cc7LeJ71.s:8311   .text.getXYZT:0000000000000000 getXYZT
     /tmp/cc7LeJ71.s:8357   .text.storcl_op:0000000000000000 $t
     /tmp/cc7LeJ71.s:8364   .text.storcl_op:0000000000000000 storcl_op
     /tmp/cc7LeJ71.s:8438   .text.storcl_op:000000000000002c $d
     /tmp/cc7LeJ71.s:8445   .text.storcl_op:0000000000000032 $t
     /tmp/cc7LeJ71.s:8557   .text.storcl_cop:0000000000000000 $t
     /tmp/cc7LeJ71.s:8564   .text.storcl_cop:0000000000000000 storcl_cop
     /tmp/cc7LeJ71.s:8674   .text.storcl_cop:0000000000000040 $d
     /tmp/cc7LeJ71.s:8679   .text.storcl_cop:0000000000000044 $t
     /tmp/cc7LeJ71.s:8792   .text.cpx_enter:0000000000000000 $t
     /tmp/cc7LeJ71.s:8800   .text.cpx_enter:0000000000000000 cpx_enter
     /tmp/cc7LeJ71.s:8896   .text.cpx_enter:0000000000000048 $d
     /tmp/cc7LeJ71.s:8902   .text.cpx_fill:0000000000000000 $t
     /tmp/cc7LeJ71.s:8910   .text.cpx_fill:0000000000000000 cpx_fill
     /tmp/cc7LeJ71.s:9111   .text.cpx_fill:0000000000000084 $d
     /tmp/cc7LeJ71.s:9121   .text.setRegister:0000000000000000 $t
     /tmp/cc7LeJ71.s:9129   .text.setRegister:0000000000000000 setRegister
     /tmp/cc7LeJ71.s:9224   .text.setRegister:000000000000004c $d
                            *COM*:0000000000000018 Ctx
     /tmp/cc7LeJ71.s:9230   .text.setX:0000000000000000 $t
     /tmp/cc7LeJ71.s:9238   .text.setX:0000000000000000 setX
     /tmp/cc7LeJ71.s:9260   .text.rarg_round:0000000000000000 $t
     /tmp/cc7LeJ71.s:9268   .text.rarg_round:0000000000000000 rarg_round
     /tmp/cc7LeJ71.s:9449   .text.rarg_round:0000000000000064 $d
     /tmp/cc7LeJ71.s:9456   .text.setY:0000000000000000 $t
     /tmp/cc7LeJ71.s:9464   .text.setY:0000000000000000 setY
     /tmp/cc7LeJ71.s:9486   .text.setXY:0000000000000000 $t
     /tmp/cc7LeJ71.s:9494   .text.setXY:0000000000000000 setXY
     /tmp/cc7LeJ71.s:9556   .text.setXY:0000000000000028 $d
     /tmp/cc7LeJ71.s:9561   .text.convert_regK:0000000000000000 $t
     /tmp/cc7LeJ71.s:9569   .text.convert_regK:0000000000000000 convert_regK
     /tmp/cc7LeJ71.s:9745   .text.convert_regK:00000000000000ac $d
     /tmp/cc7LeJ71.s:9755   .text.cpx_nop:0000000000000000 $t
     /tmp/cc7LeJ71.s:9763   .text.cpx_nop:0000000000000000 cpx_nop
     /tmp/cc7LeJ71.s:9789   .text.cpx_nop:0000000000000016 $d
     /tmp/cc7LeJ71.s:9801   .text.cpx_nop:0000000000000022 $t
     /tmp/cc7LeJ71.s:10116  .text.cpx_nop:000000000000019c $d
     /tmp/cc7LeJ71.s:10123  .text.get_reg_n_int:0000000000000000 $t
     /tmp/cc7LeJ71.s:10131  .text.get_reg_n_int:0000000000000000 get_reg_n_int
     /tmp/cc7LeJ71.s:10168  .text.storcl_intop:0000000000000000 $t
     /tmp/cc7LeJ71.s:10175  .text.storcl_intop:0000000000000000 storcl_intop
     /tmp/cc7LeJ71.s:10267  .text.storcl_intop:0000000000000038 $d
     /tmp/cc7LeJ71.s:10273  .text.storcl_intop:000000000000003e $t
     /tmp/cc7LeJ71.s:10375  .text.incdec:0000000000000000 $t
     /tmp/cc7LeJ71.s:10382  .text.incdec:0000000000000000 incdec
     /tmp/cc7LeJ71.s:10563  .text.incdec:0000000000000094 $d
     /tmp/cc7LeJ71.s:10570  .text.set_reg_n_int:0000000000000000 $t
     /tmp/cc7LeJ71.s:10578  .text.set_reg_n_int:0000000000000000 set_reg_n_int
     /tmp/cc7LeJ71.s:10611  .text.get_reg_n_int_sgn:0000000000000000 $t
     /tmp/cc7LeJ71.s:10619  .text.get_reg_n_int_sgn:0000000000000000 get_reg_n_int_sgn
     /tmp/cc7LeJ71.s:10699  .text.get_reg_n_int_sgn:0000000000000034 $d
     /tmp/cc7LeJ71.s:10704  .text.get_keycode_from_reg:0000000000000000 $t
     /tmp/cc7LeJ71.s:10711  .text.get_keycode_from_reg:0000000000000000 get_keycode_from_reg
ARM GAS  /tmp/cc7LeJ71.s 			page 905


     /tmp/cc7LeJ71.s:10791  .text.get_keycode_from_reg:000000000000002c $d
     /tmp/cc7LeJ71.s:10796  .text.getX_int:0000000000000000 $t
     /tmp/cc7LeJ71.s:10804  .text.getX_int:0000000000000000 getX_int
     /tmp/cc7LeJ71.s:10820  .text.getX_int_sgn:0000000000000000 $t
     /tmp/cc7LeJ71.s:10828  .text.getX_int_sgn:0000000000000000 getX_int_sgn
     /tmp/cc7LeJ71.s:10850  .text.set_reg_n_int_sgn:0000000000000000 $t
     /tmp/cc7LeJ71.s:10858  .text.set_reg_n_int_sgn:0000000000000000 set_reg_n_int_sgn
     /tmp/cc7LeJ71.s:10984  .text.set_reg_n_int_sgn:0000000000000060 $d
     /tmp/cc7LeJ71.s:10990  .text.op_roundingmode:0000000000000000 $t
     /tmp/cc7LeJ71.s:10998  .text.op_roundingmode:0000000000000000 op_roundingmode
     /tmp/cc7LeJ71.s:11062  .text.op_roundingmode:0000000000000024 $d
     /tmp/cc7LeJ71.s:11067  .text.register_from_int:0000000000000000 $t
     /tmp/cc7LeJ71.s:11074  .text.register_from_int:0000000000000000 register_from_int
     /tmp/cc7LeJ71.s:11171  .text.register_from_int:000000000000005c $d
     /tmp/cc7LeJ71.s:11177  .text.int_from_register:0000000000000000 $t
     /tmp/cc7LeJ71.s:11184  .text.int_from_register:0000000000000000 int_from_register
     /tmp/cc7LeJ71.s:11255  .text.int_from_register:0000000000000044 $d
     /tmp/cc7LeJ71.s:11260  .text.switch_to_int:0000000000000000 $t
     /tmp/cc7LeJ71.s:11267  .text.switch_to_int:0000000000000000 switch_to_int
     /tmp/cc7LeJ71.s:11418  .text.switch_to_int:0000000000000078 $d
     /tmp/cc7LeJ71.s:11426  .text.process_cmdline.part.0:0000000000000000 $t
     /tmp/cc7LeJ71.s:11433  .text.process_cmdline.part.0:0000000000000000 process_cmdline.part.0
     /tmp/cc7LeJ71.s:12020  .text.process_cmdline.part.0:000000000000023c $d
                            *COM*:0000000000000004 XromRunning
     /tmp/cc7LeJ71.s:12031  .text.process_cmdline:0000000000000000 $t
     /tmp/cc7LeJ71.s:12039  .text.process_cmdline:0000000000000000 process_cmdline
     /tmp/cc7LeJ71.s:12061  .text.process_cmdline:000000000000000c $d
     /tmp/cc7LeJ71.s:12066  .text.cpx_pi:0000000000000000 $t
     /tmp/cc7LeJ71.s:12074  .text.cpx_pi:0000000000000000 cpx_pi
     /tmp/cc7LeJ71.s:12310  .text.cpx_pi:00000000000000c0 $d
     /tmp/cc7LeJ71.s:12320  .text.process_cmdline_set_lift:0000000000000000 $t
     /tmp/cc7LeJ71.s:12328  .text.process_cmdline_set_lift:0000000000000000 process_cmdline_set_lift
     /tmp/cc7LeJ71.s:12394  .text.process_cmdline_set_lift:0000000000000020 $d
     /tmp/cc7LeJ71.s:12399  .text.setX_int:0000000000000000 $t
     /tmp/cc7LeJ71.s:12407  .text.setX_int:0000000000000000 setX_int
     /tmp/cc7LeJ71.s:12458  .text.do_rcl:0000000000000000 $t
     /tmp/cc7LeJ71.s:12465  .text.do_rcl:0000000000000000 do_rcl
     /tmp/cc7LeJ71.s:12803  .text.do_rcl:00000000000000cc $d
     /tmp/cc7LeJ71.s:12814  .text.setX_int_sgn:0000000000000000 $t
     /tmp/cc7LeJ71.s:12822  .text.setX_int_sgn:0000000000000000 setX_int_sgn
     /tmp/cc7LeJ71.s:12856  .text.zero_regs:0000000000000000 $t
     /tmp/cc7LeJ71.s:12864  .text.zero_regs:0000000000000000 zero_regs
     /tmp/cc7LeJ71.s:12902  .text.zero_regs:0000000000000024 $d
     /tmp/cc7LeJ71.s:12907  .text.move_regs:0000000000000000 $t
     /tmp/cc7LeJ71.s:12915  .text.move_regs:0000000000000000 move_regs
     /tmp/cc7LeJ71.s:12968  .text.move_regs:0000000000000024 $d
     /tmp/cc7LeJ71.s:12973  .text.zero_X:0000000000000000 $t
     /tmp/cc7LeJ71.s:12981  .text.zero_X:0000000000000000 zero_X
     /tmp/cc7LeJ71.s:12996  .text.zero_X:0000000000000008 $d
     /tmp/cc7LeJ71.s:13001  .text.zero_Y:0000000000000000 $t
     /tmp/cc7LeJ71.s:13009  .text.zero_Y:0000000000000000 zero_Y
     /tmp/cc7LeJ71.s:13037  .text.clrx:0000000000000000 $t
     /tmp/cc7LeJ71.s:13045  .text.clrx:0000000000000000 clrx
     /tmp/cc7LeJ71.s:13171  .text.clrx:000000000000007c $d
     /tmp/cc7LeJ71.s:13178  .text.clrstk:0000000000000000 $t
     /tmp/cc7LeJ71.s:13186  .text.clrstk:0000000000000000 clrstk
     /tmp/cc7LeJ71.s:13311  .text.clrstk:000000000000005c $d
ARM GAS  /tmp/cc7LeJ71.s 			page 906


     /tmp/cc7LeJ71.s:13321  .text.clrreg:0000000000000000 $t
     /tmp/cc7LeJ71.s:13329  .text.clrreg:0000000000000000 clrreg
     /tmp/cc7LeJ71.s:13834  .text.clrreg:0000000000000120 $d
     /tmp/cc7LeJ71.s:13844  .text.clrretstk:0000000000000000 $t
     /tmp/cc7LeJ71.s:13852  .text.clrretstk:0000000000000000 clrretstk
     /tmp/cc7LeJ71.s:13877  .text.clrretstk:0000000000000018 $d
     /tmp/cc7LeJ71.s:13882  .text.clrretstk_pc:0000000000000000 $t
     /tmp/cc7LeJ71.s:13890  .text.clrretstk_pc:0000000000000000 clrretstk_pc
     /tmp/cc7LeJ71.s:13977  .text.clrretstk_pc:0000000000000028 $d
     /tmp/cc7LeJ71.s:13982  .text.cmdconst:0000000000000000 $t
     /tmp/cc7LeJ71.s:13990  .text.cmdconst:0000000000000000 cmdconst
     /tmp/cc7LeJ71.s:14285  .text.cmdconst:00000000000000c4 $d
     /tmp/cc7LeJ71.s:14295  .text.cmdsto:0000000000000000 $t
     /tmp/cc7LeJ71.s:14303  .text.cmdsto:0000000000000000 cmdsto
     /tmp/cc7LeJ71.s:14493  .text.cmdsto:0000000000000078 $d
     /tmp/cc7LeJ71.s:14499  .text.cmdrcl:0000000000000000 $t
     /tmp/cc7LeJ71.s:14507  .text.cmdrcl:0000000000000000 cmdrcl
     /tmp/cc7LeJ71.s:14523  .text.cmdcsto:0000000000000000 $t
     /tmp/cc7LeJ71.s:14531  .text.cmdcsto:0000000000000000 cmdcsto
     /tmp/cc7LeJ71.s:14808  .text.cmdcsto:00000000000000c0 $d
     /tmp/cc7LeJ71.s:14816  .text.cmdcrcl:0000000000000000 $t
     /tmp/cc7LeJ71.s:14824  .text.cmdcrcl:0000000000000000 cmdcrcl
     /tmp/cc7LeJ71.s:15196  .text.cmdcrcl:00000000000000f8 $d
     /tmp/cc7LeJ71.s:15206  .text.cmdircl:0000000000000000 $t
     /tmp/cc7LeJ71.s:15214  .text.cmdircl:0000000000000000 cmdircl
     /tmp/cc7LeJ71.s:15258  .text.cmdircl:000000000000001c $d
     /tmp/cc7LeJ71.s:15263  .text.cmdrrcl:0000000000000000 $t
     /tmp/cc7LeJ71.s:15271  .text.cmdrrcl:0000000000000000 cmdrrcl
     /tmp/cc7LeJ71.s:15429  .text.cmdrrcl:0000000000000080 $d
     /tmp/cc7LeJ71.s:15439  .text.swap_reg:0000000000000000 $t
     /tmp/cc7LeJ71.s:15447  .text.swap_reg:0000000000000000 swap_reg
     /tmp/cc7LeJ71.s:15588  .text.swap_reg:0000000000000060 $d
     /tmp/cc7LeJ71.s:15593  .text.cmdswap:0000000000000000 $t
     /tmp/cc7LeJ71.s:15601  .text.cmdswap:0000000000000000 cmdswap
     /tmp/cc7LeJ71.s:15748  .text.cmdswap:0000000000000098 $d
     /tmp/cc7LeJ71.s:15754  .text.cmdview:0000000000000000 $t
     /tmp/cc7LeJ71.s:15762  .text.cmdview:0000000000000000 cmdview
     /tmp/cc7LeJ71.s:15846  .text.cmdview:0000000000000050 $d
                            *COM*:0000000000000004 ShowRegister
     /tmp/cc7LeJ71.s:15853  .text.get_stack_size:0000000000000000 $t
     /tmp/cc7LeJ71.s:15861  .text.get_stack_size:0000000000000000 get_stack_size
     /tmp/cc7LeJ71.s:15959  .text.get_stack_size:0000000000000040 $d
     /tmp/cc7LeJ71.s:15967  .text.get_word_size:0000000000000000 $t
     /tmp/cc7LeJ71.s:15975  .text.get_word_size:0000000000000000 get_word_size
     /tmp/cc7LeJ71.s:16018  .text.get_sign_mode:0000000000000000 $t
     /tmp/cc7LeJ71.s:16026  .text.get_sign_mode:0000000000000000 get_sign_mode
     /tmp/cc7LeJ71.s:16082  .text.get_sign_mode:0000000000000024 $d
     /tmp/cc7LeJ71.s:16087  .text.get_base:0000000000000000 $t
     /tmp/cc7LeJ71.s:16095  .text.get_base:0000000000000000 get_base
     /tmp/cc7LeJ71.s:16138  .text.DM42_Ticker:0000000000000000 $t
     /tmp/cc7LeJ71.s:16146  .text.DM42_Ticker:0000000000000000 DM42_Ticker
     /tmp/cc7LeJ71.s:16176  .text.DM42_Ticker:0000000000000014 $d
     /tmp/cc7LeJ71.s:16181  .text.op_ticks:0000000000000000 $t
     /tmp/cc7LeJ71.s:16189  .text.op_ticks:0000000000000000 op_ticks
     /tmp/cc7LeJ71.s:16266  .text.op_ticks:0000000000000024 $d
     /tmp/cc7LeJ71.s:16271  .text.op_voltage:0000000000000000 $t
     /tmp/cc7LeJ71.s:16279  .text.op_voltage:0000000000000000 op_voltage
ARM GAS  /tmp/cc7LeJ71.s 			page 907


     /tmp/cc7LeJ71.s:16382  .text.op_voltage:0000000000000058 $d
     /tmp/cc7LeJ71.s:16389  .text.free_mem:0000000000000000 $t
     /tmp/cc7LeJ71.s:16397  .text.free_mem:0000000000000000 free_mem
     /tmp/cc7LeJ71.s:16421  .text.free_mem:0000000000000010 $d
     /tmp/cc7LeJ71.s:16427  .text.free_flash:0000000000000000 $t
     /tmp/cc7LeJ71.s:16435  .text.free_flash:0000000000000000 free_flash
     /tmp/cc7LeJ71.s:16454  .text.free_flash:0000000000000010 $d
     /tmp/cc7LeJ71.s:16459  .text.get_mem:0000000000000000 $t
     /tmp/cc7LeJ71.s:16467  .text.get_mem:0000000000000000 get_mem
     /tmp/cc7LeJ71.s:16721  .text.get_mem:00000000000000a0 $d
     /tmp/cc7LeJ71.s:16729  .text.cmdputkey:0000000000000000 $t
     /tmp/cc7LeJ71.s:16737  .text.cmdputkey:0000000000000000 cmdputkey
     /tmp/cc7LeJ71.s:16819  .text.cmdputkey:0000000000000034 $d
     /tmp/cc7LeJ71.s:16825  .text.cmdkeytype:0000000000000000 $t
     /tmp/cc7LeJ71.s:16833  .text.cmdkeytype:0000000000000000 cmdkeytype
     /tmp/cc7LeJ71.s:16967  .text.cmdkeytype:0000000000000048 $d
     /tmp/cc7LeJ71.s:16976  .text.cmdstostk:0000000000000000 $t
     /tmp/cc7LeJ71.s:16984  .text.cmdstostk:0000000000000000 cmdstostk
     /tmp/cc7LeJ71.s:17034  .text.cmdrclstk:0000000000000000 $t
     /tmp/cc7LeJ71.s:17042  .text.cmdrclstk:0000000000000000 cmdrclstk
     /tmp/cc7LeJ71.s:17095  .text.find_opcode_from:0000000000000000 $t
     /tmp/cc7LeJ71.s:17103  .text.find_opcode_from:0000000000000000 find_opcode_from
     /tmp/cc7LeJ71.s:17275  .text.find_opcode_from:000000000000006c $d
     /tmp/cc7LeJ71.s:17280  .text.find_label_from:0000000000000000 $t
     /tmp/cc7LeJ71.s:17288  .text.find_label_from:0000000000000000 find_label_from
     /tmp/cc7LeJ71.s:17308  .text.op_rtn:0000000000000000 $t
     /tmp/cc7LeJ71.s:17316  .text.op_rtn:0000000000000000 op_rtn
     /tmp/cc7LeJ71.s:17350  .text.op_rtn:0000000000000020 $d
     /tmp/cc7LeJ71.s:17356  .text.op_popusr:0000000000000000 $t
     /tmp/cc7LeJ71.s:17364  .text.op_popusr:0000000000000000 op_popusr
     /tmp/cc7LeJ71.s:17450  .text.op_popusr:000000000000005c $d
                            *COM*:0000000000000004 UserLocalRegs
                            *COM*:0000000000000004 XromUserPc
     /tmp/cc7LeJ71.s:17458  .text.findmultilbl:0000000000000000 $t
     /tmp/cc7LeJ71.s:17466  .text.findmultilbl:0000000000000000 findmultilbl
     /tmp/cc7LeJ71.s:17579  .text.findmultilbl:0000000000000048 $d
     /tmp/cc7LeJ71.s:17584  .text.multiumenu:0000000000000000 $t
     /tmp/cc7LeJ71.s:17592  .text.multiumenu:0000000000000000 multiumenu
     /tmp/cc7LeJ71.s:17629  .text.get_dispmode_digs:0000000000000000 $t
     /tmp/cc7LeJ71.s:17637  .text.get_dispmode_digs:0000000000000000 get_dispmode_digs
     /tmp/cc7LeJ71.s:17699  .text.get_dispmode_digs:000000000000002c $d
     /tmp/cc7LeJ71.s:17704  .text.set_dispmode_digs:0000000000000000 $t
     /tmp/cc7LeJ71.s:17712  .text.set_dispmode_digs:0000000000000000 set_dispmode_digs
     /tmp/cc7LeJ71.s:17770  .text.set_dispmode_digs:0000000000000038 $d
     /tmp/cc7LeJ71.s:17775  .text.convC2F:0000000000000000 $t
     /tmp/cc7LeJ71.s:17783  .text.convC2F:0000000000000000 convC2F
     /tmp/cc7LeJ71.s:17825  .text.convC2F:000000000000001c $d
     /tmp/cc7LeJ71.s:17831  .text.convF2C:0000000000000000 $t
     /tmp/cc7LeJ71.s:17839  .text.convF2C:0000000000000000 convF2C
     /tmp/cc7LeJ71.s:17881  .text.convF2C:000000000000001c $d
     /tmp/cc7LeJ71.s:17887  .text.convDB2AR:0000000000000000 $t
     /tmp/cc7LeJ71.s:17895  .text.convDB2AR:0000000000000000 convDB2AR
     /tmp/cc7LeJ71.s:17937  .text.convDB2AR:000000000000001c $d
     /tmp/cc7LeJ71.s:17942  .text.convAR2DB:0000000000000000 $t
     /tmp/cc7LeJ71.s:17950  .text.convAR2DB:0000000000000000 convAR2DB
     /tmp/cc7LeJ71.s:17991  .text.convAR2DB:000000000000001c $d
     /tmp/cc7LeJ71.s:17996  .text.convDB2PR:0000000000000000 $t
ARM GAS  /tmp/cc7LeJ71.s 			page 908


     /tmp/cc7LeJ71.s:18004  .text.convDB2PR:0000000000000000 convDB2PR
     /tmp/cc7LeJ71.s:18045  .text.convPR2DB:0000000000000000 $t
     /tmp/cc7LeJ71.s:18053  .text.convPR2DB:0000000000000000 convPR2DB
     /tmp/cc7LeJ71.s:18094  .text.do_conv:0000000000000000 $t
     /tmp/cc7LeJ71.s:18102  .text.do_conv:0000000000000000 do_conv
     /tmp/cc7LeJ71.s:18194  .text.do_conv:0000000000000040 $d
     /tmp/cc7LeJ71.s:18199  .text.cmdconv:0000000000000000 $t
     /tmp/cc7LeJ71.s:18207  .text.cmdconv:0000000000000000 cmdconv
     /tmp/cc7LeJ71.s:18295  .text.cmdconv:000000000000003c $d
     /tmp/cc7LeJ71.s:18300  .rodata.fin_tst.str1.4:0000000000000000 $d
     /tmp/cc7LeJ71.s:18307  .text.fin_tst:0000000000000000 $t
     /tmp/cc7LeJ71.s:18315  .text.fin_tst:0000000000000000 fin_tst
     /tmp/cc7LeJ71.s:18412  .text.fin_tst:0000000000000050 $d
                            *COM*:0000000000000004 Tracing
     /tmp/cc7LeJ71.s:18422  .text.check_mode:0000000000000000 $t
     /tmp/cc7LeJ71.s:18430  .text.check_mode:0000000000000000 check_mode
     /tmp/cc7LeJ71.s:18465  .text.check_mode:0000000000000024 $d
     /tmp/cc7LeJ71.s:18470  .text.check_dblmode:0000000000000000 $t
     /tmp/cc7LeJ71.s:18478  .text.check_dblmode:0000000000000000 check_dblmode
     /tmp/cc7LeJ71.s:18511  .text.check_dblmode:000000000000001c $d
     /tmp/cc7LeJ71.s:18516  .text.op_query_xtal:0000000000000000 $t
     /tmp/cc7LeJ71.s:18524  .text.op_query_xtal:0000000000000000 op_query_xtal
     /tmp/cc7LeJ71.s:18542  .text.isTop:0000000000000000 $t
     /tmp/cc7LeJ71.s:18550  .text.isTop:0000000000000000 isTop
     /tmp/cc7LeJ71.s:18616  .text.isTop:000000000000003c $d
     /tmp/cc7LeJ71.s:18625  .text.cmdlblp:0000000000000000 $t
     /tmp/cc7LeJ71.s:18633  .text.cmdlblp:0000000000000000 cmdlblp
     /tmp/cc7LeJ71.s:18685  .text.cmdlblp:0000000000000024 $d
     /tmp/cc7LeJ71.s:18690  .text.cmdmultilblp:0000000000000000 $t
     /tmp/cc7LeJ71.s:18698  .text.cmdmultilblp:0000000000000000 cmdmultilblp
     /tmp/cc7LeJ71.s:18733  .text.cmdkeyp:0000000000000000 $t
     /tmp/cc7LeJ71.s:18741  .text.cmdkeyp:0000000000000000 cmdkeyp
     /tmp/cc7LeJ71.s:18836  .text.cmdkeyp:0000000000000044 $d
     /tmp/cc7LeJ71.s:18841  .text.do_tst:0000000000000000 $t
     /tmp/cc7LeJ71.s:18848  .text.do_tst:0000000000000000 do_tst
     /tmp/cc7LeJ71.s:19014  .text.do_tst:0000000000000064 $d
     /tmp/cc7LeJ71.s:19302  .text.do_tst:0000000000000168 $d
     /tmp/cc7LeJ71.s:19309  .text.do_ztst:0000000000000000 $t
     /tmp/cc7LeJ71.s:19316  .text.do_ztst:0000000000000000 do_ztst
     /tmp/cc7LeJ71.s:19571  .text.do_ztst:00000000000000a0 $d
     /tmp/cc7LeJ71.s:19578  .text.op_query_print:0000000000000000 $t
     /tmp/cc7LeJ71.s:19586  .text.op_query_print:0000000000000000 op_query_print
     /tmp/cc7LeJ71.s:19598  .text.check_zero:0000000000000000 $t
     /tmp/cc7LeJ71.s:19606  .text.check_zero:0000000000000000 check_zero
     /tmp/cc7LeJ71.s:19750  .text.check_zero:000000000000006c $d
     /tmp/cc7LeJ71.s:19755  .text.cmdtest:0000000000000000 $t
     /tmp/cc7LeJ71.s:19763  .text.cmdtest:0000000000000000 cmdtest
     /tmp/cc7LeJ71.s:19784  .text.cmdztest:0000000000000000 $t
     /tmp/cc7LeJ71.s:19792  .text.cmdztest:0000000000000000 cmdztest
     /tmp/cc7LeJ71.s:19845  .text.cmdlincdec:0000000000000000 $t
     /tmp/cc7LeJ71.s:19853  .text.cmdlincdec:0000000000000000 cmdlincdec
     /tmp/cc7LeJ71.s:19874  .text.cmdloopz:0000000000000000 $t
     /tmp/cc7LeJ71.s:19882  .text.cmdloopz:0000000000000000 cmdloopz
     /tmp/cc7LeJ71.s:19915  .text.cmdloop:0000000000000000 $t
     /tmp/cc7LeJ71.s:19923  .text.cmdloop:0000000000000000 cmdloop
     /tmp/cc7LeJ71.s:20412  .text.cmdloop:00000000000001f4 $d
     /tmp/cc7LeJ71.s:20418  .text.op_shift_digit:0000000000000000 $t
ARM GAS  /tmp/cc7LeJ71.s 			page 909


     /tmp/cc7LeJ71.s:20426  .text.op_shift_digit:0000000000000000 op_shift_digit
     /tmp/cc7LeJ71.s:20590  .text.op_shift_digit:0000000000000060 $d
     /tmp/cc7LeJ71.s:20596  .text.get_user_flag:0000000000000000 $t
     /tmp/cc7LeJ71.s:20604  .text.get_user_flag:0000000000000000 get_user_flag
     /tmp/cc7LeJ71.s:20642  .text.cmdflag:0000000000000000 $t
     /tmp/cc7LeJ71.s:20650  .text.cmdflag:0000000000000000 cmdflag
     /tmp/cc7LeJ71.s:20695  .text.cmdflag:0000000000000028 $d
     /tmp/cc7LeJ71.s:20852  .text.put_user_flag:0000000000000000 $t
     /tmp/cc7LeJ71.s:20860  .text.put_user_flag:0000000000000000 put_user_flag
     /tmp/cc7LeJ71.s:20889  .text.clrflags:0000000000000000 $t
     /tmp/cc7LeJ71.s:20897  .text.clrflags:0000000000000000 clrflags
     /tmp/cc7LeJ71.s:20944  .text.clrflags:000000000000002c $d
     /tmp/cc7LeJ71.s:20949  .text.intws:0000000000000000 $t
     /tmp/cc7LeJ71.s:20957  .text.intws:0000000000000000 intws
     /tmp/cc7LeJ71.s:21180  .text.intws:00000000000000e4 $d
     /tmp/cc7LeJ71.s:21189  .text.get_maxdenom:0000000000000000 $t
     /tmp/cc7LeJ71.s:21197  .text.get_maxdenom:0000000000000000 get_maxdenom
     /tmp/cc7LeJ71.s:21225  .text.get_maxdenom:000000000000001c $d
     /tmp/cc7LeJ71.s:21230  .rodata.op_2frac.str1.4:0000000000000000 $d
     /tmp/cc7LeJ71.s:21240  .text.op_2frac:0000000000000000 $t
     /tmp/cc7LeJ71.s:21248  .text.op_2frac:0000000000000000 op_2frac
     /tmp/cc7LeJ71.s:21386  .text.op_2frac:0000000000000088 $d
     /tmp/cc7LeJ71.s:21396  .text.op_fracdenom:0000000000000000 $t
     /tmp/cc7LeJ71.s:21404  .text.op_fracdenom:0000000000000000 op_fracdenom
     /tmp/cc7LeJ71.s:21559  .text.op_fracdenom:0000000000000080 $d
     /tmp/cc7LeJ71.s:21564  .text.op_float:0000000000000000 $t
     /tmp/cc7LeJ71.s:21572  .text.op_float:0000000000000000 op_float
     /tmp/cc7LeJ71.s:21767  .text.op_float:00000000000000c4 $d
     /tmp/cc7LeJ71.s:21778  .text.cmddisp:0000000000000000 $t
     /tmp/cc7LeJ71.s:21786  .text.cmddisp:0000000000000000 cmddisp
     /tmp/cc7LeJ71.s:21863  .text.cmddisp:0000000000000036 $d
     /tmp/cc7LeJ71.s:22051  .text.cmddisp:00000000000000bc $d
     /tmp/cc7LeJ71.s:22057  .text.set_int_base:0000000000000000 $t
     /tmp/cc7LeJ71.s:22065  .text.set_int_base:0000000000000000 set_int_base
     /tmp/cc7LeJ71.s:22172  .text.set_int_base:000000000000004c $d
     /tmp/cc7LeJ71.s:22179  .text.op_fract:0000000000000000 $t
     /tmp/cc7LeJ71.s:22187  .text.op_fract:0000000000000000 op_fract
     /tmp/cc7LeJ71.s:22246  .text.op_fract:0000000000000040 $d
     /tmp/cc7LeJ71.s:22251  .text.cmdsavem:0000000000000000 $t
     /tmp/cc7LeJ71.s:22259  .text.cmdsavem:0000000000000000 cmdsavem
     /tmp/cc7LeJ71.s:22293  .text.cmdsavem:0000000000000018 $d
     /tmp/cc7LeJ71.s:22298  .text.set_entry:0000000000000000 $t
     /tmp/cc7LeJ71.s:22306  .text.set_entry:0000000000000000 set_entry
     /tmp/cc7LeJ71.s:22344  .text.set_entry:0000000000000020 $d
     /tmp/cc7LeJ71.s:22351  .text.get_trig_mode:0000000000000000 $t
     /tmp/cc7LeJ71.s:22359  .text.get_trig_mode:0000000000000000 get_trig_mode
     /tmp/cc7LeJ71.s:22394  .text.get_trig_mode:0000000000000024 $d
     /tmp/cc7LeJ71.s:22401  .text.cmdpause:0000000000000000 $t
     /tmp/cc7LeJ71.s:22409  .text.cmdpause:0000000000000000 cmdpause
     /tmp/cc7LeJ71.s:22449  .text.cmdpause:000000000000001c $d
                            *COM*:0000000000000001 Pause
     /tmp/cc7LeJ71.s:22455  .text.op_setspeed:0000000000000000 $t
     /tmp/cc7LeJ71.s:22463  .text.op_setspeed:0000000000000000 op_setspeed
     /tmp/cc7LeJ71.s:22477  .text.op_prompt:0000000000000000 $t
     /tmp/cc7LeJ71.s:22485  .text.op_prompt:0000000000000000 op_prompt
     /tmp/cc7LeJ71.s:22557  .text.op_prompt:0000000000000028 $d
     /tmp/cc7LeJ71.s:22563  .text.XisInt:0000000000000000 $t
ARM GAS  /tmp/cc7LeJ71.s 			page 910


     /tmp/cc7LeJ71.s:22571  .text.XisInt:0000000000000000 XisInt
     /tmp/cc7LeJ71.s:22683  .text.XisInt:000000000000005c $d
     /tmp/cc7LeJ71.s:22688  .text.XisEvenOrOdd:0000000000000000 $t
     /tmp/cc7LeJ71.s:22696  .text.XisEvenOrOdd:0000000000000000 XisEvenOrOdd
     /tmp/cc7LeJ71.s:22810  .text.XisEvenOrOdd:0000000000000060 $d
     /tmp/cc7LeJ71.s:22815  .text.XisPrime:0000000000000000 $t
     /tmp/cc7LeJ71.s:22823  .text.XisPrime:0000000000000000 XisPrime
     /tmp/cc7LeJ71.s:22983  .text.XisPrime:000000000000007c $d
     /tmp/cc7LeJ71.s:22989  .text.isInfinite:0000000000000000 $t
     /tmp/cc7LeJ71.s:22997  .text.isInfinite:0000000000000000 isInfinite
     /tmp/cc7LeJ71.s:23049  .text.isInfinite:000000000000002c $d
     /tmp/cc7LeJ71.s:23054  .text.isNan:0000000000000000 $t
     /tmp/cc7LeJ71.s:23062  .text.isNan:0000000000000000 isNan
     /tmp/cc7LeJ71.s:23129  .text.isNan:000000000000003c $d
     /tmp/cc7LeJ71.s:23134  .text.isSpecial:0000000000000000 $t
     /tmp/cc7LeJ71.s:23142  .text.isSpecial:0000000000000000 isSpecial
     /tmp/cc7LeJ71.s:23209  .text.isSpecial:000000000000003c $d
     /tmp/cc7LeJ71.s:23214  .text.op_entryp:0000000000000000 $t
     /tmp/cc7LeJ71.s:23222  .text.op_entryp:0000000000000000 op_entryp
     /tmp/cc7LeJ71.s:23243  .text.op_entryp:0000000000000010 $d
     /tmp/cc7LeJ71.s:23248  .text.reg_decode:0000000000000000 $t
     /tmp/cc7LeJ71.s:23256  .text.reg_decode:0000000000000000 reg_decode
     /tmp/cc7LeJ71.s:24062  .text.reg_decode:0000000000000220 $d
     /tmp/cc7LeJ71.s:24076  .text.op_regcopy:0000000000000000 $t
     /tmp/cc7LeJ71.s:24084  .text.op_regcopy:0000000000000000 op_regcopy
     /tmp/cc7LeJ71.s:24187  .text.op_regcopy:0000000000000048 $d
     /tmp/cc7LeJ71.s:24192  .text.op_regswap:0000000000000000 $t
     /tmp/cc7LeJ71.s:24200  .text.op_regswap:0000000000000000 op_regswap
     /tmp/cc7LeJ71.s:24334  .text.op_regswap:000000000000006c $d
     /tmp/cc7LeJ71.s:24339  .text.op_regclr:0000000000000000 $t
     /tmp/cc7LeJ71.s:24347  .text.op_regclr:0000000000000000 op_regclr
     /tmp/cc7LeJ71.s:24428  .text.op_regclr:0000000000000044 $d
     /tmp/cc7LeJ71.s:24433  .text.op_regsort:0000000000000000 $t
     /tmp/cc7LeJ71.s:24441  .text.op_regsort:0000000000000000 op_regsort
     /tmp/cc7LeJ71.s:24725  .text.reset_volatile_state:0000000000000000 $t
     /tmp/cc7LeJ71.s:24733  .text.reset_volatile_state:0000000000000000 reset_volatile_state
     /tmp/cc7LeJ71.s:24757  .text.reset_volatile_state:0000000000000010 $d
     /tmp/cc7LeJ71.s:24762  .rodata.busy.str1.4:0000000000000000 $d
     /tmp/cc7LeJ71.s:24766  .text.busy:0000000000000000 $t
     /tmp/cc7LeJ71.s:24774  .text.busy:0000000000000000 busy
     /tmp/cc7LeJ71.s:24813  .text.busy:0000000000000018 $d
                            *COM*:0000000000000004 Busy
     /tmp/cc7LeJ71.s:24822  .text.intMonadic:0000000000000000 $t
     /tmp/cc7LeJ71.s:24830  .text.intMonadic:0000000000000000 intMonadic
     /tmp/cc7LeJ71.s:25059  .text.intMonadic:0000000000000084 $d
                            *COM*:0000000000000002 XeqOpCode
     /tmp/cc7LeJ71.s:25069  .text.intDyadic:0000000000000000 $t
     /tmp/cc7LeJ71.s:25077  .text.intDyadic:0000000000000000 intDyadic
     /tmp/cc7LeJ71.s:25361  .text.intDyadic:00000000000000c0 $d
     /tmp/cc7LeJ71.s:25371  .text.xeq_init_contexts:0000000000000000 $t
     /tmp/cc7LeJ71.s:25379  .text.xeq_init_contexts:0000000000000000 xeq_init_contexts
     /tmp/cc7LeJ71.s:25498  .text.xeq_init_contexts:0000000000000078 $d
                            *COM*:0000000000000004 ProgFree
     /tmp/cc7LeJ71.s:25511  .text.not_running:0000000000000000 $t
     /tmp/cc7LeJ71.s:25519  .text.not_running:0000000000000000 not_running
     /tmp/cc7LeJ71.s:25574  .text.not_running:000000000000001c $d
     /tmp/cc7LeJ71.s:25580  .text.set_running_off_sst:0000000000000000 $t
ARM GAS  /tmp/cc7LeJ71.s 			page 911


     /tmp/cc7LeJ71.s:25588  .text.set_running_off_sst:0000000000000000 set_running_off_sst
     /tmp/cc7LeJ71.s:25605  .text.set_running_off_sst:0000000000000008 $d
     /tmp/cc7LeJ71.s:25610  .text.set_running_on_sst:0000000000000000 $t
     /tmp/cc7LeJ71.s:25618  .text.set_running_on_sst:0000000000000000 set_running_on_sst
     /tmp/cc7LeJ71.s:25635  .text.set_running_on_sst:0000000000000008 $d
     /tmp/cc7LeJ71.s:25640  .text.set_running_off:0000000000000000 $t
     /tmp/cc7LeJ71.s:25648  .text.set_running_off:0000000000000000 set_running_off
     /tmp/cc7LeJ71.s:25692  .text.set_running_off:000000000000001c $d
     /tmp/cc7LeJ71.s:25698  .text.set_running_on:0000000000000000 $t
     /tmp/cc7LeJ71.s:25706  .text.set_running_on:0000000000000000 set_running_on
     /tmp/cc7LeJ71.s:25805  .text.set_running_on:0000000000000034 $d
     /tmp/cc7LeJ71.s:25813  .text.gsbgto:0000000000000000 $t
     /tmp/cc7LeJ71.s:25820  .text.gsbgto:0000000000000000 gsbgto
     /tmp/cc7LeJ71.s:26007  .text.gsbgto:0000000000000094 $d
     /tmp/cc7LeJ71.s:26018  .text.cmdgtocommon:0000000000000000 $t
     /tmp/cc7LeJ71.s:26026  .text.cmdgtocommon:0000000000000000 cmdgtocommon
     /tmp/cc7LeJ71.s:26112  .text.cmdgtocommon:000000000000002c $d
     /tmp/cc7LeJ71.s:26118  .text.cmdgto:0000000000000000 $t
     /tmp/cc7LeJ71.s:26126  .text.cmdgto:0000000000000000 cmdgto
     /tmp/cc7LeJ71.s:26207  .text.cmdgto:000000000000003c $d
     /tmp/cc7LeJ71.s:26215  .text.branchtoalpha:0000000000000000 $t
     /tmp/cc7LeJ71.s:26222  .text.branchtoalpha:0000000000000000 branchtoalpha
     /tmp/cc7LeJ71.s:26279  .text.cmdalphagto:0000000000000000 $t
     /tmp/cc7LeJ71.s:26287  .text.cmdalphagto:0000000000000000 cmdalphagto
     /tmp/cc7LeJ71.s:26339  .text.op_gtoalpha:0000000000000000 $t
     /tmp/cc7LeJ71.s:26347  .text.op_gtoalpha:0000000000000000 op_gtoalpha
     /tmp/cc7LeJ71.s:26411  .text.op_gtoalpha:0000000000000030 $d
     /tmp/cc7LeJ71.s:26416  .text.cmdskip:0000000000000000 $t
     /tmp/cc7LeJ71.s:26424  .text.cmdskip:0000000000000000 cmdskip
     /tmp/cc7LeJ71.s:26607  .text.cmdskip:0000000000000078 $d
     /tmp/cc7LeJ71.s:26615  .text.cmdback:0000000000000000 $t
     /tmp/cc7LeJ71.s:26623  .text.cmdback:0000000000000000 cmdback
     /tmp/cc7LeJ71.s:26776  .text.cmdback:0000000000000064 $d
     /tmp/cc7LeJ71.s:26784  .text.usergsb_common:0000000000000000 $t
     /tmp/cc7LeJ71.s:26791  .text.usergsb_common:0000000000000000 usergsb_common
     /tmp/cc7LeJ71.s:26907  .text.usergsb_common:0000000000000088 $d
     /tmp/cc7LeJ71.s:26916  .text.do_usergsb:0000000000000000 $t
     /tmp/cc7LeJ71.s:26924  .text.do_usergsb:0000000000000000 do_usergsb
     /tmp/cc7LeJ71.s:26957  .text.do_usergsb:0000000000000014 $d
     /tmp/cc7LeJ71.s:26962  .text.cmdmultigto:0000000000000000 $t
     /tmp/cc7LeJ71.s:26970  .text.cmdmultigto:0000000000000000 cmdmultigto
     /tmp/cc7LeJ71.s:27074  .text.cmdmultigto:000000000000004c $d
     /tmp/cc7LeJ71.s:27080  .text.store_a_to_d:0000000000000000 $t
     /tmp/cc7LeJ71.s:27088  .text.store_a_to_d:0000000000000000 store_a_to_d
     /tmp/cc7LeJ71.s:27136  .text.store_a_to_d:0000000000000020 $d
     /tmp/cc7LeJ71.s:27141  .text.cmdlocr:0000000000000000 $t
     /tmp/cc7LeJ71.s:27149  .text.cmdlocr:0000000000000000 cmdlocr
     /tmp/cc7LeJ71.s:27526  .text.cmdlocr:0000000000000180 $d
     /tmp/cc7LeJ71.s:27534  .text.cmdxout:0000000000000000 $t
     /tmp/cc7LeJ71.s:27542  .text.cmdxout:0000000000000000 cmdxout
     /tmp/cc7LeJ71.s:28067  .text.cmdxout:00000000000001ec $d
     /tmp/cc7LeJ71.s:28082  .text.cmdconverged:0000000000000000 $t
     /tmp/cc7LeJ71.s:28090  .text.cmdconverged:0000000000000000 cmdconverged
     /tmp/cc7LeJ71.s:28319  .text.cmdconverged:00000000000000e0 $d
     /tmp/cc7LeJ71.s:28329  .text.cmdshuffle:0000000000000000 $t
     /tmp/cc7LeJ71.s:28337  .text.cmdshuffle:0000000000000000 cmdshuffle
     /tmp/cc7LeJ71.s:28570  .text.cmdshuffle:0000000000000084 $d
ARM GAS  /tmp/cc7LeJ71.s 			page 912


     /tmp/cc7LeJ71.s:28576  .text.cmdmode:0000000000000000 $t
     /tmp/cc7LeJ71.s:28584  .text.cmdmode:0000000000000000 cmdmode
     /tmp/cc7LeJ71.s:28665  .text.cmdmode:0000000000000050 $d
     /tmp/cc7LeJ71.s:28670  .text.cmdlpop:0000000000000000 $t
     /tmp/cc7LeJ71.s:28678  .text.cmdlpop:0000000000000000 cmdlpop
     /tmp/cc7LeJ71.s:28749  .text.cmdlpop:0000000000000034 $d
     /tmp/cc7LeJ71.s:28755  .text.cmdregs:0000000000000000 $t
     /tmp/cc7LeJ71.s:28763  .text.cmdregs:0000000000000000 cmdregs
     /tmp/cc7LeJ71.s:28943  .text.cmdregs:00000000000000ac $d
     /tmp/cc7LeJ71.s:28950  .text.op_double:0000000000000000 $t
     /tmp/cc7LeJ71.s:28958  .text.op_double:0000000000000000 op_double
     /tmp/cc7LeJ71.s:29258  .text.op_double:000000000000011c $d
     /tmp/cc7LeJ71.s:29265  .text.cmdrestm:0000000000000000 $t
     /tmp/cc7LeJ71.s:29273  .text.cmdrestm:0000000000000000 cmdrestm
     /tmp/cc7LeJ71.s:29453  .text.cmdrestm:0000000000000098 $d
     /tmp/cc7LeJ71.s:29458  .text.cmdxin:0000000000000000 $t
     /tmp/cc7LeJ71.s:29466  .text.cmdxin:0000000000000000 cmdxin
     /tmp/cc7LeJ71.s:29896  .text.cmdxin:00000000000001b4 $d
     /tmp/cc7LeJ71.s:29909  .rodata.xeq.str1.4:0000000000000000 $d
     /tmp/cc7LeJ71.s:29913  .text.xeq:0000000000000000 $t
     /tmp/cc7LeJ71.s:29921  .text.xeq:0000000000000000 xeq
     /tmp/cc7LeJ71.s:30115  .text.xeq:00000000000000ae $d
     /tmp/cc7LeJ71.s:30123  .text.xeq:00000000000000bc $t
     /tmp/cc7LeJ71.s:30528  .text.xeq:0000000000000214 $d
     /tmp/cc7LeJ71.s:30571  .text.xeq:0000000000000250 $t
     /tmp/cc7LeJ71.s:34305  .text.dispatch_xrom:0000000000000000 dispatch_xrom
     /tmp/cc7LeJ71.s:31134  .text.xeq:0000000000000446 $d
     /tmp/cc7LeJ71.s:31178  .text.xeq:000000000000049c $t
     /tmp/cc7LeJ71.s:31372  .text.xeq:000000000000052c $d
     /tmp/cc7LeJ71.s:31410  .text.xeq:0000000000000550 $t
     /tmp/cc7LeJ71.s:32313  .text.xeq:0000000000000874 $d
     /tmp/cc7LeJ71.s:32339  .text.xeq:00000000000008a0 $t
     /tmp/cc7LeJ71.s:33254  .text.xeq:0000000000000bf8 $d
     /tmp/cc7LeJ71.s:33266  .text.xeq:0000000000000c10 $t
     /tmp/cc7LeJ71.s:34026  .text.xeq:0000000000000ec8 $d
     /tmp/cc7LeJ71.s:34042  .text.xeq_single:0000000000000000 $t
     /tmp/cc7LeJ71.s:34049  .text.xeq_single:0000000000000000 xeq_single
     /tmp/cc7LeJ71.s:34088  .text.xeq_single:0000000000000020 $d
     /tmp/cc7LeJ71.s:34093  .text.xeq_xrom2:0000000000000000 $t
     /tmp/cc7LeJ71.s:34100  .text.xeq_xrom2:0000000000000000 xeq_xrom2
     /tmp/cc7LeJ71.s:34248  .text.xeq_xrom2:0000000000000070 $d
     /tmp/cc7LeJ71.s:34262  .text.xeq_xrom:0000000000000000 $t
     /tmp/cc7LeJ71.s:34270  .text.xeq_xrom:0000000000000000 xeq_xrom
     /tmp/cc7LeJ71.s:34293  .text.xeq_xrom:0000000000000010 $d
     /tmp/cc7LeJ71.s:34298  .text.dispatch_xrom:0000000000000000 $t
     /tmp/cc7LeJ71.s:34440  .text.dispatch_xrom:0000000000000060 $d
     /tmp/cc7LeJ71.s:34450  .text.op_rs:0000000000000000 $t
     /tmp/cc7LeJ71.s:34458  .text.op_rs:0000000000000000 op_rs
     /tmp/cc7LeJ71.s:34602  .text.op_rs:0000000000000078 $d
     /tmp/cc7LeJ71.s:34611  .text.xeqprog:0000000000000000 $t
     /tmp/cc7LeJ71.s:34619  .text.xeqprog:0000000000000000 xeqprog
     /tmp/cc7LeJ71.s:34736  .text.xeqprog:0000000000000068 $d
                            *COM*:0000000000000004 JustStopped
     /tmp/cc7LeJ71.s:34744  .text.xeq_sst_bst:0000000000000000 $t
     /tmp/cc7LeJ71.s:34752  .text.xeq_sst_bst:0000000000000000 xeq_sst_bst
     /tmp/cc7LeJ71.s:34965  .text.xeq_sst_bst:000000000000009c $d
     /tmp/cc7LeJ71.s:34975  .text.init_34s:0000000000000000 $t
ARM GAS  /tmp/cc7LeJ71.s 			page 913


     /tmp/cc7LeJ71.s:34983  .text.init_34s:0000000000000000 init_34s
     /tmp/cc7LeJ71.s:35043  .text.init_34s:0000000000000034 $d
     /tmp/cc7LeJ71.s:35049  .rodata.paste_raw_x.str1.4:0000000000000000 $d
     /tmp/cc7LeJ71.s:35053  .text.paste_raw_x:0000000000000000 $t
     /tmp/cc7LeJ71.s:35061  .text.paste_raw_x:0000000000000000 paste_raw_x
     /tmp/cc7LeJ71.s:35429  .text.paste_raw_x:00000000000000f4 $d
     /tmp/cc7LeJ71.s:35442  .rodata.fill_buffer_from_raw_x.str1.4:0000000000000000 $d
     /tmp/cc7LeJ71.s:35446  .text.fill_buffer_from_raw_x:0000000000000000 $t
     /tmp/cc7LeJ71.s:35454  .text.fill_buffer_from_raw_x:0000000000000000 fill_buffer_from_raw_x
     /tmp/cc7LeJ71.s:35711  .text.fill_buffer_from_raw_x:00000000000000c4 $d
                            *COM*:0000000000000004 RectPolConv
     /tmp/cc7LeJ71.s:35800  .rodata.xrom_targets:0000000000000000 xrom_targets
     /tmp/cc7LeJ71.s:35740  .rodata:0000000000000000 $d
     /tmp/cc7LeJ71.s:35748  .bss.result.11709:0000000000000000 $d
     /tmp/cc7LeJ71.s:35752  .bss.result.11709:0000000000000000 result.11709
     /tmp/cc7LeJ71.s:35755  .data.RegionTab:0000000000000000 $d
     /tmp/cc7LeJ71.s:35759  .data.RegionTab:0000000000000000 RegionTab
     /tmp/cc7LeJ71.s:35765  .rodata.StackRegMask:0000000000000000 $d
     /tmp/cc7LeJ71.s:35769  .rodata.StackRegMask:0000000000000000 StackRegMask
     /tmp/cc7LeJ71.s:35773  .rodata.convergence_tolerances:0000000000000000 $d
     /tmp/cc7LeJ71.s:35777  .rodata.convergence_tolerances:0000000000000000 convergence_tolerances
     /tmp/cc7LeJ71.s:35782  .rodata.modes.11402:0000000000000000 $d
     /tmp/cc7LeJ71.s:35786  .rodata.modes.11402:0000000000000000 modes.11402
     /tmp/cc7LeJ71.s:35789  .rodata.modes.11919:0000000000000000 $d
     /tmp/cc7LeJ71.s:35793  .rodata.modes.11919:0000000000000000 modes.11919
     /tmp/cc7LeJ71.s:35796  .rodata.xrom_targets:0000000000000000 $d
     /tmp/cc7LeJ71.s:19021  .text.do_tst:000000000000006b $d
     /tmp/cc7LeJ71.s:19021  .text.do_tst:000000000000006c $t
     /tmp/cc7LeJ71.s:20706  .text.cmdflag:0000000000000033 $d
     /tmp/cc7LeJ71.s:20706  .text.cmdflag:0000000000000034 $t
     /tmp/cc7LeJ71.s:21866  .text.cmddisp:0000000000000039 $d
     /tmp/cc7LeJ71.s:21866  .text.cmddisp:000000000000003a $t

UNDEFINED SYMBOLS
StateWhileOn
main_ram
xrom_size
XromParams
XromLocal
xset
decNumberRoundDigits
decNumberTrunc
dn_eq
set_carry
dn_to_ull
dn_abs
check_overflow
set_overflow
build_value
dn_lt
const_2pow64
xcopy
argcmds
display
shutdown
library_ram
backup_ram
ARM GAS  /tmp/cc7LeJ71.s 			page 914


scopy
num_arg_0
prt
scopy_char
DispMsg
dot
error_message
JustDisplayed
ShowRPN
decContextDefault
decimal64FromNumber
decimal128FromNumber
decimal64ToNumber
decimal128ToNumber
int_base
cnsts
cnsts_d128
cnsts_d64
dn_max
dn_add
dn_subtract
dn_multiply
dn_divide
dn_min
cmplxDivide
cmplxAdd
cmplxSubtract
cmplxMultiply
decNumberNormalize
decNumberRoundDecimals
const_360
const_2PI
const_400
reset_shift
dn_minus
set_menu
display_current_menu
finish_cpx_entry
set_default_menu
intMax
intAdd
intSubtract
intMultiply
intDivide
intMin
extract_value
dn_dec
dn_eq0
dn_inc
row_column_to_keycode
ullint_to_dn
find_char
decNumberFromString
decNumberCopy
decNumberZero
stack_begin
const_PI
ARM GAS  /tmp/cc7LeJ71.s 			page 915


word_size
int_mode
dn_mulpow10
put_key
build_user_menu_from_program
const_9on5
const_32
decNumberPow10
const_0_05
dn_log10
const_20
cnsts_conv
print_justified
keycode_to_row_column
dn_compare
decNumberRnd
dn_mul100
dn_le0
dn_lt0
dn_1
finish_display
mask_value
int_to_dn
decNumber2Fraction
GoFast
alpha_view_common
is_int
is_even
isPrime
dn_to_int
message
monfuncs
xrom
dyfuncs
SizeStatRegs
alpha_rcl_s
XromA2D
relative_error
cmplxR
absolute_error
const_1e_14
const_1e_32
const_1e_24
const_NaN
print_trace
sprintf
multicmds
trifuncs
niladics
sigma_minus
sigma_val
intChs
const_0
const_1
sigma_plus
set_NaN
finish_RPN
ARM GAS  /tmp/cc7LeJ71.s 			page 916


is_key_pressed
clr_dot
set_dot
OpCode
checksum_ram
init_state
reset
StopWatchStatus
strdup
strtok
strtoull
strchr
free
__aeabi_uldivmod
decNumberToString

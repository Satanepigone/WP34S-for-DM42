ARM GAS  /tmp/ccgbU3q8.s 			page 1


   1              		.arch armv7e-m
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"prt.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.rodata.prt_multi.str1.4,"aMS",%progbits,1
  18              		.align	2
  19              	.LC0:
  20 0000 3F3F3F00 		.ascii	"???\000"
  21              		.section	.text.prt_multi,"ax",%progbits
  22              		.align	1
  23              		.p2align 2,,3
  24              		.arch armv7e-m
  25              		.syntax unified
  26              		.thumb
  27              		.thumb_func
  28              		.fpu fpv4-sp-d16
  30              	prt_multi:
  31              	.LVL0:
  32              	.LFB12:
  33              		.file 1 "src/prt.c"
   1:src/prt.c     **** /* This file is part of 34S.
   2:src/prt.c     ****  * 
   3:src/prt.c     ****  * 34S is free software: you can redistribute it and/or modify
   4:src/prt.c     ****  * it under the terms of the GNU General Public License as published by
   5:src/prt.c     ****  * the Free Software Foundation, either version 3 of the License, or
   6:src/prt.c     ****  * (at your option) any later version.
   7:src/prt.c     ****  * 
   8:src/prt.c     ****  * 34S is distributed in the hope that it will be useful,
   9:src/prt.c     ****  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  10:src/prt.c     ****  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  11:src/prt.c     ****  * GNU General Public License for more details.
  12:src/prt.c     ****  * 
  13:src/prt.c     ****  * You should have received a copy of the GNU General Public License
  14:src/prt.c     ****  * along with 34S.  If not, see <http://www.gnu.org/licenses/>.
  15:src/prt.c     ****  */
  16:src/prt.c     **** 
  17:src/prt.c     **** #include "xeq.h"
  18:src/prt.c     **** #include "storage.h"
  19:src/prt.c     **** #include "display.h"
  20:src/prt.c     **** #include "consts.h"
  21:src/prt.c     **** 
  22:src/prt.c     **** 
  23:src/prt.c     **** static const char *prt_monadic(const unsigned int f, char *instr) {
  24:src/prt.c     **** 	if (f < NUM_MONADIC && (! isNULL(monfuncs[f].mondreal) || ! isNULL(monfuncs[f].monint)))
  25:src/prt.c     **** 		return sncopy(instr, monfuncs[f].fname, NAME_LEN);
ARM GAS  /tmp/ccgbU3q8.s 			page 2


  26:src/prt.c     **** 	return "???";
  27:src/prt.c     **** }
  28:src/prt.c     **** 
  29:src/prt.c     **** static const char *prt_dyadic(const unsigned int f, char *instr) {
  30:src/prt.c     **** 	if (f < NUM_DYADIC && (! isNULL(dyfuncs[f].dydreal) || ! isNULL(dyfuncs[f].dydint)))
  31:src/prt.c     **** 		return sncopy(instr, dyfuncs[f].fname, NAME_LEN);
  32:src/prt.c     **** 	return "???";
  33:src/prt.c     **** }
  34:src/prt.c     **** 
  35:src/prt.c     **** static const char *prt_triadic(const unsigned int f, char *instr) {
  36:src/prt.c     **** 	if (f < NUM_TRIADIC && (! isNULL(trifuncs[f].trireal) || ! isNULL(trifuncs[f].triint)))
  37:src/prt.c     **** 		return sncopy(instr, trifuncs[f].fname, NAME_LEN);
  38:src/prt.c     **** 	return "???";
  39:src/prt.c     **** }
  40:src/prt.c     **** 
  41:src/prt.c     **** static const char *prt_cmplx(int add_prefix, const char *name, char *instr) {
  42:src/prt.c     **** 	char *p = instr;
  43:src/prt.c     **** 	if (add_prefix)
  44:src/prt.c     **** 		*p++ = COMPLEX_PREFIX;
  45:src/prt.c     **** 	sncopy(p, name, NAME_LEN);
  46:src/prt.c     **** 	return instr;
  47:src/prt.c     **** }
  48:src/prt.c     **** 
  49:src/prt.c     **** static const char *prt_monadic_cmplx(const unsigned int f, char *instr) {
  50:src/prt.c     **** 	if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondcmplx))
  51:src/prt.c     **** 		return prt_cmplx(! isNULL(monfuncs[f].mondreal), monfuncs[f].fname, instr);
  52:src/prt.c     **** 	return "???";
  53:src/prt.c     **** }
  54:src/prt.c     **** 
  55:src/prt.c     **** static const char *prt_dyadic_cmplx(const unsigned int f, char *instr) {
  56:src/prt.c     **** 	if (f < NUM_DYADIC && ! isNULL(dyfuncs[f].dydcmplx))
  57:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
  58:src/prt.c     **** 	return "???";
  59:src/prt.c     **** }
  60:src/prt.c     **** 
  61:src/prt.c     **** static const char *prt_niladic(const unsigned int idx, char *instr) {
  62:src/prt.c     **** 	if (idx < NUM_NILADIC) {
  63:src/prt.c     **** 		const char *p = niladics[idx].nname;
  64:src/prt.c     **** 		return sncopy(instr, p, NAME_LEN);
  65:src/prt.c     **** 	}
  66:src/prt.c     **** 	return "???";
  67:src/prt.c     **** }
  68:src/prt.c     **** 
  69:src/prt.c     **** static const char *prt_tst(const char r, const enum tst_op op, char *instr, int cmplx) {
  70:src/prt.c     **** 	char *p = instr;
  71:src/prt.c     **** 	if (cmplx)
  72:src/prt.c     **** 		*p++ = COMPLEX_PREFIX;
  73:src/prt.c     **** 	*p++ = 'x';
  74:src/prt.c     **** 	*p++ = "=\013\035<\011>\012"[op];
  75:src/prt.c     **** 	*p++ = r;
  76:src/prt.c     **** 	*p++ = '?';
  77:src/prt.c     **** 	return instr;
  78:src/prt.c     **** }
  79:src/prt.c     **** 
  80:src/prt.c     **** static const char *prt_specials(unsigned int opm, char *instr) {
  81:src/prt.c     **** 	static const char digits[16] = "0123456789ABCDEF";
  82:src/prt.c     **** 	char cmp = '0';
ARM GAS  /tmp/ccgbU3q8.s 			page 3


  83:src/prt.c     **** 
  84:src/prt.c     **** 	if (opm >= OP_0 && opm <= OP_F) {
  85:src/prt.c     **** 		*instr = digits[opm - OP_0];
  86:src/prt.c     **** 		return instr;
  87:src/prt.c     **** 	}
  88:src/prt.c     **** 	if (opm >= OP_Xeq1 && opm <= OP_Xge1) {
  89:src/prt.c     **** 		opm += OP_Xeq0 - OP_Xeq1;
  90:src/prt.c     **** 		cmp = '1';
  91:src/prt.c     **** 	}
  92:src/prt.c     **** 	if (opm >= OP_Xeq0 && opm <= OP_Xge0)
  93:src/prt.c     **** 		return prt_tst(cmp, (enum tst_op)(opm - OP_Xeq0), instr, 0);
  94:src/prt.c     **** 
  95:src/prt.c     **** 	switch (opm) {
  96:src/prt.c     **** #ifdef COMPILE_CATALOGUES
  97:src/prt.c     **** 	case OP_DOT:	return ".";
  98:src/prt.c     **** #else
  99:src/prt.c     **** 	case OP_DOT:	return UState.fraccomma ? "," : ".";
 100:src/prt.c     **** #endif
 101:src/prt.c     **** 	case OP_CHS:	return "+/-";
 102:src/prt.c     **** 	//case OP_CLX:	return "CLx";
 103:src/prt.c     **** 	case OP_ENTER:	return "ENTER\020";
 104:src/prt.c     **** 	case OP_EEX:	return "EEX";
 105:src/prt.c     **** 	case OP_SIGMAPLUS:	return "\221+";
 106:src/prt.c     **** 	case OP_SIGMAMINUS:	return "\221-";
 107:src/prt.c     **** 
 108:src/prt.c     **** 	case OP_Zeq0:	case OP_Zne0:	//case OP_Zapx0:
 109:src/prt.c     **** 		return prt_tst('0', (enum tst_op)(opm - OP_Zeq0), instr, 1);
 110:src/prt.c     **** 
 111:src/prt.c     **** 	case OP_Zeq1:	case OP_Zne1:	//case OP_Zapx1:
 112:src/prt.c     **** 		return prt_tst('1', (enum tst_op)(opm - OP_Zeq1), instr, 1);
 113:src/prt.c     **** 
 114:src/prt.c     **** 	case OP_Zeqi:	case OP_Znei:
 115:src/prt.c     **** 		return prt_tst('i', (enum tst_op)(opm - OP_Zeqi), instr, 1);
 116:src/prt.c     **** 	}
 117:src/prt.c     **** 	return "???";
 118:src/prt.c     **** }
 119:src/prt.c     **** 
 120:src/prt.c     **** 
 121:src/prt.c     **** /* Metric <-> imperial conversions */
 122:src/prt.c     **** static const char *prt_conv(unsigned int arg, char *instr) {
 123:src/prt.c     **** 	const unsigned int conv = arg / 2;
 124:src/prt.c     **** 	const unsigned int dirn = arg & 1;
 125:src/prt.c     **** 
 126:src/prt.c     **** 	if (conv >= NUM_CONSTS_CONV)
 127:src/prt.c     **** 		return "???";
 128:src/prt.c     **** 	if (dirn == 0) {		// metric to imperial
 129:src/prt.c     **** 		sncopy(sncopy_char(instr, cnsts_conv[conv].metric, METRIC_NAMELEN, '\015'),
 130:src/prt.c     **** 				cnsts_conv[conv].imperial, IMPERIAL_NAMELEN);
 131:src/prt.c     **** 	} else {			// imperial to metric
 132:src/prt.c     **** 		sncopy(sncopy_char(instr, cnsts_conv[conv].imperial, IMPERIAL_NAMELEN, '\015'),
 133:src/prt.c     **** 				cnsts_conv[conv].metric, METRIC_NAMELEN);
 134:src/prt.c     **** 	}
 135:src/prt.c     **** 	return instr;
 136:src/prt.c     **** }
 137:src/prt.c     **** 
 138:src/prt.c     **** 
 139:src/prt.c     **** /* The number of argument digits needed for a command */
ARM GAS  /tmp/ccgbU3q8.s 			page 4


 140:src/prt.c     **** int num_arg_digits(int cmd) {
 141:src/prt.c     **** 	int lim = argcmds[cmd].lim;
 142:src/prt.c     **** 	if (lim < 10)
 143:src/prt.c     **** 		return 1;
 144:src/prt.c     **** 	if (lim < 100)
 145:src/prt.c     **** 		return 2;
 146:src/prt.c     **** #ifdef COMPILE_CATALOGUES
 147:src/prt.c     **** 	if (argcmds[cmd].reg || argcmds[cmd].flag || argcmds[cmd].label)
 148:src/prt.c     **** #else
 149:src/prt.c     **** 	if (State2.ind || argcmds[cmd].reg || argcmds[cmd].flag || argcmds[cmd].label)
 150:src/prt.c     **** #endif
 151:src/prt.c     **** 		return 2;
 152:src/prt.c     **** 	return 3;
 153:src/prt.c     **** }
 154:src/prt.c     **** 
 155:src/prt.c     **** #ifdef COMPILE_CATALOGUES
 156:src/prt.c     **** #define SPACE_AFTER_CMD " "
 157:src/prt.c     **** #else
 158:src/prt.c     **** #define SPACE_AFTER_CMD "\006\006"
 159:src/prt.c     **** #endif
 160:src/prt.c     **** /* Commands that take an argument */
 161:src/prt.c     **** static const char *prt_rargs(const opcode op, char *instr) {
 162:src/prt.c     **** 	unsigned int arg = op & RARG_MASK;
 163:src/prt.c     **** 	int ind = op & RARG_IND;
 164:src/prt.c     **** 	const unsigned int cmd = RARG_CMD(op);
 165:src/prt.c     **** 	char *p;
 166:src/prt.c     **** 	int n = 2;
 167:src/prt.c     **** 
 168:src/prt.c     **** 	if (! argcmds[cmd].indirectokay) {
 169:src/prt.c     **** 		if (ind) arg += RARG_IND;
 170:src/prt.c     **** 		ind = 0;
 171:src/prt.c     **** 	}
 172:src/prt.c     **** 
 173:src/prt.c     **** 	if (cmd == RARG_ALPHA) {
 174:src/prt.c     **** 		*scopy(instr, "\240" SPACE_AFTER_CMD) = arg;
 175:src/prt.c     **** 	} 
 176:src/prt.c     **** 	else if (cmd >= NUM_RARG)
 177:src/prt.c     **** 		return "???";
 178:src/prt.c     **** 
 179:src/prt.c     **** 	else if (!ind) {
 180:src/prt.c     **** 		if (arg > argcmds[cmd].lim)
 181:src/prt.c     **** 			return "???";
 182:src/prt.c     **** 
 183:src/prt.c     **** 		p = instr;
 184:src/prt.c     **** 		switch(cmd) {
 185:src/prt.c     **** 
 186:src/prt.c     **** 		case RARG_CONST_CMPLX:
 187:src/prt.c     **** 			*p++ = COMPLEX_PREFIX;
 188:src/prt.c     **** 		case RARG_CONST:
 189:src/prt.c     **** 			sncopy(scopy(p, "#" SPACE_AFTER_CMD), cnsts[arg].cname, CONST_NAMELEN);
 190:src/prt.c     **** 			return instr;
 191:src/prt.c     **** 
 192:src/prt.c     **** 		case RARG_CONV:
 193:src/prt.c     **** 			return prt_conv(arg, instr);
 194:src/prt.c     **** 
 195:src/prt.c     **** 		case RARG_SHUFFLE:
 196:src/prt.c     **** 			p = scopy(instr, "\027" SPACE_AFTER_CMD);
ARM GAS  /tmp/ccgbU3q8.s 			page 5


 197:src/prt.c     **** 			for (n = 0; n < 4; n++) {
 198:src/prt.c     **** 				*p++ = REGNAMES[arg & 3];
 199:src/prt.c     **** 				arg >>= 2;
 200:src/prt.c     **** 			}
 201:src/prt.c     **** 			return instr;
 202:src/prt.c     **** 
 203:src/prt.c     **** 		default:
 204:src/prt.c     **** #ifdef COMPILE_CATALOGUES
 205:src/prt.c     **** 			p = sncopy_spc(instr, argcmds[cmd].cmd, NAME_LEN);
 206:src/prt.c     **** #else
 207:src/prt.c     **** 			p = sncopy_char(instr, argcmds[cmd].cmd, NAME_LEN, '\006');
 208:src/prt.c     **** 			*p++ = '\006';
 209:src/prt.c     **** #endif
 210:src/prt.c     **** 			if (argcmds[cmd].label && arg >= 100) {
 211:src/prt.c     **** 				*p = arg - 100 + 'A';
 212:src/prt.c     **** 			}
 213:src/prt.c     **** 			else {
 214:src/prt.c     **** 				n = num_arg_digits(cmd);
 215:src/prt.c     **** 				goto print_reg;
 216:src/prt.c     **** 			}
 217:src/prt.c     **** 		}
 218:src/prt.c     **** 	} 
 219:src/prt.c     **** 	else {
 220:src/prt.c     **** 		if (!argcmds[cmd].indirectokay)
 221:src/prt.c     **** 			return "???";
 222:src/prt.c     **** 
 223:src/prt.c     **** 		p = sncopy_char(instr, argcmds[cmd].cmd, NAME_LEN, '\015');	// ->
 224:src/prt.c     **** 
 225:src/prt.c     **** 	print_reg:
 226:src/prt.c     **** 		if (arg >= regX_idx && arg <= regK_idx && (ind || argcmds[cmd].stckreg))
 227:src/prt.c     **** #ifdef SHOW_COMPLEX_REGS
 228:src/prt.c     **** 			if (*instr == COMPLEX_PREFIX) {
 229:src/prt.c     **** 				*p++ = COMPLEX_PREFIX;
 230:src/prt.c     **** 				*p = COMPLEX_REGNAMES[arg - regX_idx];
 231:src/prt.c     **** 			}
 232:src/prt.c     **** 			else {
 233:src/prt.c     **** 				*p = REGNAMES[arg - regX_idx];
 234:src/prt.c     **** 			}
 235:src/prt.c     **** #else
 236:src/prt.c     **** 			*p = REGNAMES[arg - regX_idx];
 237:src/prt.c     **** #endif
 238:src/prt.c     **** 		else {
 239:src/prt.c     **** 			if (arg >= LOCAL_REG_BASE && (ind || argcmds[cmd].local)) {
 240:src/prt.c     **** 				arg -= LOCAL_REG_BASE;
 241:src/prt.c     **** 				*p++ = '.';
 242:src/prt.c     **** 			}
 243:src/prt.c     **** 			num_arg_0(p, arg, n );
 244:src/prt.c     **** 		}
 245:src/prt.c     **** 	}
 246:src/prt.c     **** 	return instr;
 247:src/prt.c     **** }
 248:src/prt.c     **** 
 249:src/prt.c     **** static const char *prt_multi(const opcode op, char *instr) {
  34              		.loc 1 249 60 view -0
  35              		.cfi_startproc
  36              		@ args = 0, pretend = 0, frame = 0
  37              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccgbU3q8.s 			page 6


 250:src/prt.c     **** 	char *p, c;
  38              		.loc 1 250 2 view .LVU1
 251:src/prt.c     **** 	int cmd = opDBL(op);
  39              		.loc 1 251 2 view .LVU2
  40              		.loc 1 251 6 is_stmt 0 view .LVU3
  41 0000 C0F30322 		ubfx	r2, r0, #8, #4
  42              	.LVL1:
 252:src/prt.c     **** 
 253:src/prt.c     **** 	if (cmd >= NUM_MULTI)
  43              		.loc 1 253 2 is_stmt 1 view .LVU4
  44              		.loc 1 253 5 is_stmt 0 view .LVU5
  45 0004 0B2A     		cmp	r2, #11
  46 0006 01DD     		ble	.L12
 254:src/prt.c     **** 		return "???";
  47              		.loc 1 254 10 view .LVU6
  48 0008 1148     		ldr	r0, .L13
  49              	.LVL2:
 255:src/prt.c     **** 	p = sncopy_char(instr, multicmds[cmd].cmd, NAME_LEN, '\'');
 256:src/prt.c     **** 	*p++ = op & 0xff;
 257:src/prt.c     **** 	c = (op >> 16) & 0xff;
 258:src/prt.c     **** 	if (c != '\0') {
 259:src/prt.c     **** 		*p++ = c;
 260:src/prt.c     **** 		c = op>>24;
 261:src/prt.c     **** 		if (c != '\0')
 262:src/prt.c     **** 			*p++ = c;
 263:src/prt.c     **** 	}
 264:src/prt.c     **** 	*p = '\'';
 265:src/prt.c     **** 	return instr;
 266:src/prt.c     **** }
  50              		.loc 1 266 1 view .LVU7
  51 000a 7047     		bx	lr
  52              	.LVL3:
  53              	.L12:
 255:src/prt.c     **** 	p = sncopy_char(instr, multicmds[cmd].cmd, NAME_LEN, '\'');
  54              		.loc 1 255 2 is_stmt 1 view .LVU8
 249:src/prt.c     **** 	char *p, c;
  55              		.loc 1 249 60 is_stmt 0 view .LVU9
  56 000c 38B5     		push	{r3, r4, r5, lr}
  57              		.cfi_def_cfa_offset 16
  58              		.cfi_offset 3, -16
  59              		.cfi_offset 4, -12
  60              		.cfi_offset 5, -8
  61              		.cfi_offset 14, -4
  62 000e 0D46     		mov	r5, r1
 255:src/prt.c     **** 	p = sncopy_char(instr, multicmds[cmd].cmd, NAME_LEN, '\'');
  63              		.loc 1 255 39 view .LVU10
  64 0010 1049     		ldr	r1, .L13+4
  65              	.LVL4:
 255:src/prt.c     **** 	p = sncopy_char(instr, multicmds[cmd].cmd, NAME_LEN, '\'');
  66              		.loc 1 255 39 view .LVU11
  67 0012 0446     		mov	r4, r0
 255:src/prt.c     **** 	p = sncopy_char(instr, multicmds[cmd].cmd, NAME_LEN, '\'');
  68              		.loc 1 255 6 view .LVU12
  69 0014 2723     		movs	r3, #39
  70 0016 01EB0211 		add	r1, r1, r2, lsl #4
  71 001a 2846     		mov	r0, r5
  72              	.LVL5:
ARM GAS  /tmp/ccgbU3q8.s 			page 7


 255:src/prt.c     **** 	p = sncopy_char(instr, multicmds[cmd].cmd, NAME_LEN, '\'');
  73              		.loc 1 255 6 view .LVU13
  74 001c 0622     		movs	r2, #6
  75              	.LVL6:
 255:src/prt.c     **** 	p = sncopy_char(instr, multicmds[cmd].cmd, NAME_LEN, '\'');
  76              		.loc 1 255 6 view .LVU14
  77 001e FFF7FEFF 		bl	sncopy_char
  78              	.LVL7:
 256:src/prt.c     **** 	c = (op >> 16) & 0xff;
  79              		.loc 1 256 2 is_stmt 1 view .LVU15
 258:src/prt.c     **** 		*p++ = c;
  80              		.loc 1 258 5 is_stmt 0 view .LVU16
  81 0022 14F47F0F 		tst	r4, #16711680
 257:src/prt.c     **** 	if (c != '\0') {
  82              		.loc 1 257 4 view .LVU17
  83 0026 C4F30743 		ubfx	r3, r4, #16, #8
 256:src/prt.c     **** 	c = (op >> 16) & 0xff;
  84              		.loc 1 256 7 view .LVU18
  85 002a 0470     		strb	r4, [r0]
 257:src/prt.c     **** 	if (c != '\0') {
  86              		.loc 1 257 2 is_stmt 1 view .LVU19
  87              	.LVL8:
 258:src/prt.c     **** 		*p++ = c;
  88              		.loc 1 258 2 view .LVU20
 258:src/prt.c     **** 		*p++ = c;
  89              		.loc 1 258 5 is_stmt 0 view .LVU21
  90 002c 04D1     		bne	.L3
 256:src/prt.c     **** 	c = (op >> 16) & 0xff;
  91              		.loc 1 256 4 view .LVU22
  92 002e 431C     		adds	r3, r0, #1
  93              	.LVL9:
 264:src/prt.c     **** 	return instr;
  94              		.loc 1 264 2 is_stmt 1 view .LVU23
 264:src/prt.c     **** 	return instr;
  95              		.loc 1 264 5 is_stmt 0 view .LVU24
  96 0030 2722     		movs	r2, #39
  97 0032 1A70     		strb	r2, [r3]
 265:src/prt.c     **** }
  98              		.loc 1 265 2 is_stmt 1 view .LVU25
 265:src/prt.c     **** }
  99              		.loc 1 265 9 is_stmt 0 view .LVU26
 100 0034 2846     		mov	r0, r5
 101              		.loc 1 266 1 view .LVU27
 102 0036 38BD     		pop	{r3, r4, r5, pc}
 103              	.LVL10:
 104              	.L3:
 259:src/prt.c     **** 		c = op>>24;
 105              		.loc 1 259 3 is_stmt 1 view .LVU28
 261:src/prt.c     **** 			*p++ = c;
 106              		.loc 1 261 6 is_stmt 0 view .LVU29
 107 0038 240E     		lsrs	r4, r4, #24
 108              	.LVL11:
 259:src/prt.c     **** 		c = op>>24;
 109              		.loc 1 259 8 view .LVU30
 110 003a 4370     		strb	r3, [r0, #1]
 260:src/prt.c     **** 		if (c != '\0')
 111              		.loc 1 260 3 is_stmt 1 view .LVU31
ARM GAS  /tmp/ccgbU3q8.s 			page 8


 112              	.LVL12:
 261:src/prt.c     **** 			*p++ = c;
 113              		.loc 1 261 3 view .LVU32
 259:src/prt.c     **** 		c = op>>24;
 114              		.loc 1 259 5 is_stmt 0 view .LVU33
 115 003c 0CBF     		ite	eq
 116 003e 831C     		addeq	r3, r0, #2
 262:src/prt.c     **** 	}
 117              		.loc 1 262 4 is_stmt 1 view .LVU34
 262:src/prt.c     **** 	}
 118              		.loc 1 262 6 is_stmt 0 view .LVU35
 119 0040 C31C     		addne	r3, r0, #3
 120              	.LVL13:
 264:src/prt.c     **** 	return instr;
 121              		.loc 1 264 2 is_stmt 1 view .LVU36
 264:src/prt.c     **** 	return instr;
 122              		.loc 1 264 5 is_stmt 0 view .LVU37
 123 0042 4FF02702 		mov	r2, #39
 260:src/prt.c     **** 		if (c != '\0')
 124              		.loc 1 260 5 view .LVU38
 125 0046 18BF     		it	ne
 126 0048 8470     		strbne	r4, [r0, #2]
 264:src/prt.c     **** 	return instr;
 127              		.loc 1 264 5 view .LVU39
 128 004a 1A70     		strb	r2, [r3]
 265:src/prt.c     **** }
 129              		.loc 1 265 2 is_stmt 1 view .LVU40
 265:src/prt.c     **** }
 130              		.loc 1 265 9 is_stmt 0 view .LVU41
 131 004c 2846     		mov	r0, r5
 132              		.loc 1 266 1 view .LVU42
 133 004e 38BD     		pop	{r3, r4, r5, pc}
 134              	.LVL14:
 135              	.L14:
 136              		.loc 1 266 1 view .LVU43
 137              		.align	2
 138              	.L13:
 139 0050 00000000 		.word	.LC0
 140 0054 04000000 		.word	multicmds+4
 141              		.cfi_endproc
 142              	.LFE12:
 144              		.section	.text.prt_conv,"ax",%progbits
 145              		.align	1
 146              		.p2align 2,,3
 147              		.syntax unified
 148              		.thumb
 149              		.thumb_func
 150              		.fpu fpv4-sp-d16
 152              	prt_conv:
 153              	.LVL15:
 154              	.LFB9:
 122:src/prt.c     **** 	const unsigned int conv = arg / 2;
 155              		.loc 1 122 60 is_stmt 1 view -0
 156              		.cfi_startproc
 157              		@ args = 0, pretend = 0, frame = 0
 158              		@ frame_needed = 0, uses_anonymous_args = 0
 123:src/prt.c     **** 	const unsigned int dirn = arg & 1;
ARM GAS  /tmp/ccgbU3q8.s 			page 9


 159              		.loc 1 123 2 view .LVU45
 124:src/prt.c     **** 
 160              		.loc 1 124 2 view .LVU46
 126:src/prt.c     **** 		return "???";
 161              		.loc 1 126 2 view .LVU47
 126:src/prt.c     **** 		return "???";
 162              		.loc 1 126 5 is_stmt 0 view .LVU48
 163 0000 4B28     		cmp	r0, #75
 164 0002 29D8     		bhi	.L18
 165 0004 0346     		mov	r3, r0
 122:src/prt.c     **** 	const unsigned int conv = arg / 2;
 166              		.loc 1 122 60 view .LVU49
 167 0006 70B5     		push	{r4, r5, r6, lr}
 168              		.cfi_def_cfa_offset 16
 169              		.cfi_offset 4, -16
 170              		.cfi_offset 5, -12
 171              		.cfi_offset 6, -8
 172              		.cfi_offset 14, -4
 128:src/prt.c     **** 		sncopy(sncopy_char(instr, cnsts_conv[conv].metric, METRIC_NAMELEN, '\015'),
 173              		.loc 1 128 5 view .LVU50
 174 0008 DB07     		lsls	r3, r3, #31
 175 000a 0C46     		mov	r4, r1
 123:src/prt.c     **** 	const unsigned int dirn = arg & 1;
 176              		.loc 1 123 21 view .LVU51
 177 000c 4FEA5001 		lsr	r1, r0, #1
 178              	.LVL16:
 128:src/prt.c     **** 		sncopy(sncopy_char(instr, cnsts_conv[conv].metric, METRIC_NAMELEN, '\015'),
 179              		.loc 1 128 2 is_stmt 1 view .LVU52
 129:src/prt.c     **** 				cnsts_conv[conv].imperial, IMPERIAL_NAMELEN);
 180              		.loc 1 129 45 is_stmt 0 view .LVU53
 181 0010 124E     		ldr	r6, .L23
 182 0012 4FEA0115 		lsl	r5, r1, #4
 128:src/prt.c     **** 		sncopy(sncopy_char(instr, cnsts_conv[conv].metric, METRIC_NAMELEN, '\015'),
 183              		.loc 1 128 5 view .LVU54
 184 0016 0FD4     		bmi	.L17
 129:src/prt.c     **** 				cnsts_conv[conv].imperial, IMPERIAL_NAMELEN);
 185              		.loc 1 129 3 is_stmt 1 view .LVU55
 129:src/prt.c     **** 				cnsts_conv[conv].imperial, IMPERIAL_NAMELEN);
 186              		.loc 1 129 45 is_stmt 0 view .LVU56
 187 0018 05F10801 		add	r1, r5, #8
 129:src/prt.c     **** 				cnsts_conv[conv].imperial, IMPERIAL_NAMELEN);
 188              		.loc 1 129 3 view .LVU57
 189 001c 3144     		add	r1, r1, r6
 190 001e 0D23     		movs	r3, #13
 191 0020 0222     		movs	r2, #2
 192 0022 2046     		mov	r0, r4
 193              	.LVL17:
 129:src/prt.c     **** 				cnsts_conv[conv].imperial, IMPERIAL_NAMELEN);
 194              		.loc 1 129 3 view .LVU58
 195 0024 FFF7FEFF 		bl	sncopy_char
 196              	.LVL18:
 130:src/prt.c     **** 	} else {			// imperial to metric
 197              		.loc 1 130 21 view .LVU59
 198 0028 05F10A01 		add	r1, r5, #10
 129:src/prt.c     **** 				cnsts_conv[conv].imperial, IMPERIAL_NAMELEN);
 199              		.loc 1 129 3 view .LVU60
 200 002c 3144     		add	r1, r1, r6
ARM GAS  /tmp/ccgbU3q8.s 			page 10


 201 002e 0622     		movs	r2, #6
 202 0030 FFF7FEFF 		bl	sncopy
 203              	.LVL19:
 135:src/prt.c     **** }
 204              		.loc 1 135 9 view .LVU61
 205 0034 2046     		mov	r0, r4
 136:src/prt.c     **** 
 206              		.loc 1 136 1 view .LVU62
 207 0036 70BD     		pop	{r4, r5, r6, pc}
 208              	.LVL20:
 209              	.L17:
 132:src/prt.c     **** 				cnsts_conv[conv].metric, METRIC_NAMELEN);
 210              		.loc 1 132 3 is_stmt 1 view .LVU63
 132:src/prt.c     **** 				cnsts_conv[conv].metric, METRIC_NAMELEN);
 211              		.loc 1 132 45 is_stmt 0 view .LVU64
 212 0038 05F10A01 		add	r1, r5, #10
 132:src/prt.c     **** 				cnsts_conv[conv].metric, METRIC_NAMELEN);
 213              		.loc 1 132 3 view .LVU65
 214 003c 3144     		add	r1, r1, r6
 215 003e 0D23     		movs	r3, #13
 216 0040 0622     		movs	r2, #6
 217 0042 2046     		mov	r0, r4
 218              	.LVL21:
 132:src/prt.c     **** 				cnsts_conv[conv].metric, METRIC_NAMELEN);
 219              		.loc 1 132 3 view .LVU66
 220 0044 FFF7FEFF 		bl	sncopy_char
 221              	.LVL22:
 133:src/prt.c     **** 	}
 222              		.loc 1 133 21 view .LVU67
 223 0048 05F10801 		add	r1, r5, #8
 132:src/prt.c     **** 				cnsts_conv[conv].metric, METRIC_NAMELEN);
 224              		.loc 1 132 3 view .LVU68
 225 004c 3144     		add	r1, r1, r6
 226 004e 0222     		movs	r2, #2
 227 0050 FFF7FEFF 		bl	sncopy
 228              	.LVL23:
 135:src/prt.c     **** }
 229              		.loc 1 135 9 view .LVU69
 230 0054 2046     		mov	r0, r4
 136:src/prt.c     **** 
 231              		.loc 1 136 1 view .LVU70
 232 0056 70BD     		pop	{r4, r5, r6, pc}
 233              	.LVL24:
 234              	.L18:
 235              		.cfi_def_cfa_offset 0
 236              		.cfi_restore 4
 237              		.cfi_restore 5
 238              		.cfi_restore 6
 239              		.cfi_restore 14
 127:src/prt.c     **** 	if (dirn == 0) {		// metric to imperial
 240              		.loc 1 127 10 view .LVU71
 241 0058 0148     		ldr	r0, .L23+4
 242              	.LVL25:
 136:src/prt.c     **** 
 243              		.loc 1 136 1 view .LVU72
 244 005a 7047     		bx	lr
 245              	.L24:
ARM GAS  /tmp/ccgbU3q8.s 			page 11


 246              		.align	2
 247              	.L23:
 248 005c 00000000 		.word	cnsts_conv
 249 0060 00000000 		.word	.LC0
 250              		.cfi_endproc
 251              	.LFE9:
 253              		.section	.rodata.prt_specials.part.0.str1.4,"aMS",%progbits,1
 254              		.align	2
 255              	.LC1:
 256 0000 2B2F2D00 		.ascii	"+/-\000"
 257              		.align	2
 258              	.LC2:
 259 0004 454E5445 		.ascii	"ENTER\020\000"
 259      521000
 260 000b 00       		.align	2
 261              	.LC3:
 262 000c 2C00     		.ascii	",\000"
 263 000e 0000     		.align	2
 264              	.LC4:
 265 0010 45455800 		.ascii	"EEX\000"
 266              		.align	2
 267              	.LC5:
 268 0014 912B00   		.ascii	"\221+\000"
 269 0017 00       		.align	2
 270              	.LC6:
 271 0018 912D00   		.ascii	"\221-\000"
 272 001b 00       		.align	2
 273              	.LC7:
 274 001c 2E00     		.ascii	".\000"
 275 001e 0000     		.align	2
 276              	.LC8:
 277 0020 3D0B1D3C 		.ascii	"=\013\035<\011>\012\000"
 277      093E0A00 
 278              		.section	.text.prt_specials.part.0,"ax",%progbits
 279              		.align	1
 280              		.p2align 2,,3
 281              		.syntax unified
 282              		.thumb
 283              		.thumb_func
 284              		.fpu fpv4-sp-d16
 286              	prt_specials.part.0:
 287              	.LVL26:
 288              	.LFB17:
  80:src/prt.c     **** 	static const char digits[16] = "0123456789ABCDEF";
 289              		.loc 1 80 20 is_stmt 1 view -0
 290              		.cfi_startproc
 291              		@ args = 0, pretend = 0, frame = 0
 292              		@ frame_needed = 0, uses_anonymous_args = 0
 293              		@ link register save eliminated.
  88:src/prt.c     **** 		opm += OP_Xeq0 - OP_Xeq1;
 294              		.loc 1 88 2 view .LVU74
  88:src/prt.c     **** 		opm += OP_Xeq0 - OP_Xeq1;
 295              		.loc 1 88 21 is_stmt 0 view .LVU75
 296 0000 A0F11E02 		sub	r2, r0, #30
  88:src/prt.c     **** 		opm += OP_Xeq0 - OP_Xeq1;
 297              		.loc 1 88 5 view .LVU76
 298 0004 062A     		cmp	r2, #6
ARM GAS  /tmp/ccgbU3q8.s 			page 12


 299 0006 0BD8     		bhi	.L26
  89:src/prt.c     **** 		cmp = '1';
 300              		.loc 1 89 3 is_stmt 1 view .LVU77
 301              	.LVL27:
  90:src/prt.c     **** 	}
 302              		.loc 1 90 3 view .LVU78
  92:src/prt.c     **** 		return prt_tst(cmp, (enum tst_op)(opm - OP_Xeq0), instr, 0);
 303              		.loc 1 92 2 view .LVU79
  90:src/prt.c     **** 	}
 304              		.loc 1 90 7 is_stmt 0 view .LVU80
 305 0008 3123     		movs	r3, #49
 306              	.LVL28:
 307              	.L27:
  93:src/prt.c     **** 
 308              		.loc 1 93 3 is_stmt 1 view .LVU81
 309              	.LBB48:
 310              	.LBI48:
  69:src/prt.c     **** 	char *p = instr;
 311              		.loc 1 69 20 view .LVU82
 312              	.LBB49:
  70:src/prt.c     **** 	if (cmplx)
 313              		.loc 1 70 2 view .LVU83
  71:src/prt.c     **** 		*p++ = COMPLEX_PREFIX;
 314              		.loc 1 71 2 view .LVU84
  73:src/prt.c     **** 	*p++ = "=\013\035<\011>\012"[op];
 315              		.loc 1 73 2 view .LVU85
  74:src/prt.c     **** 	*p++ = r;
 316              		.loc 1 74 30 is_stmt 0 view .LVU86
 317 000a 3648     		ldr	r0, .L47
  75:src/prt.c     **** 	*p++ = '?';
 318              		.loc 1 75 7 view .LVU87
 319 000c 8B70     		strb	r3, [r1, #2]
  74:src/prt.c     **** 	*p++ = r;
 320              		.loc 1 74 30 view .LVU88
 321 000e D2B2     		uxtb	r2, r2
  74:src/prt.c     **** 	*p++ = r;
 322              		.loc 1 74 7 view .LVU89
 323 0010 835C     		ldrb	r3, [r0, r2]	@ zero_extendqisi2
 324              	.LVL29:
  74:src/prt.c     **** 	*p++ = r;
 325              		.loc 1 74 7 view .LVU90
 326 0012 4B70     		strb	r3, [r1, #1]
  73:src/prt.c     **** 	*p++ = "=\013\035<\011>\012"[op];
 327              		.loc 1 73 7 view .LVU91
 328 0014 7822     		movs	r2, #120
  76:src/prt.c     **** 	return instr;
 329              		.loc 1 76 7 view .LVU92
 330 0016 3F23     		movs	r3, #63
  73:src/prt.c     **** 	*p++ = "=\013\035<\011>\012"[op];
 331              		.loc 1 73 7 view .LVU93
 332 0018 0A70     		strb	r2, [r1]
  74:src/prt.c     **** 	*p++ = r;
 333              		.loc 1 74 2 is_stmt 1 view .LVU94
 334              	.LVL30:
  75:src/prt.c     **** 	*p++ = '?';
 335              		.loc 1 75 2 view .LVU95
  76:src/prt.c     **** 	return instr;
ARM GAS  /tmp/ccgbU3q8.s 			page 13


 336              		.loc 1 76 2 view .LVU96
  76:src/prt.c     **** 	return instr;
 337              		.loc 1 76 7 is_stmt 0 view .LVU97
 338 001a CB70     		strb	r3, [r1, #3]
  77:src/prt.c     **** }
 339              		.loc 1 77 2 is_stmt 1 view .LVU98
 340              	.LVL31:
  77:src/prt.c     **** }
 341              		.loc 1 77 2 is_stmt 0 view .LVU99
 342              	.LBE49:
 343              	.LBE48:
  93:src/prt.c     **** 
 344              		.loc 1 93 10 view .LVU100
 345 001c 0846     		mov	r0, r1
 118:src/prt.c     **** 
 346              		.loc 1 118 1 view .LVU101
 347 001e 7047     		bx	lr
 348              	.LVL32:
 349              	.L26:
  92:src/prt.c     **** 		return prt_tst(cmp, (enum tst_op)(opm - OP_Xeq0), instr, 0);
 350              		.loc 1 92 2 is_stmt 1 view .LVU102
  92:src/prt.c     **** 		return prt_tst(cmp, (enum tst_op)(opm - OP_Xeq0), instr, 0);
 351              		.loc 1 92 21 is_stmt 0 view .LVU103
 352 0020 A0F11702 		sub	r2, r0, #23
  92:src/prt.c     **** 		return prt_tst(cmp, (enum tst_op)(opm - OP_Xeq0), instr, 0);
 353              		.loc 1 92 5 view .LVU104
 354 0024 062A     		cmp	r2, #6
 355 0026 5BD9     		bls	.L46
  95:src/prt.c     **** #ifdef COMPILE_CATALOGUES
 356              		.loc 1 95 2 is_stmt 1 view .LVU105
  80:src/prt.c     **** 	static const char digits[16] = "0123456789ABCDEF";
 357              		.loc 1 80 20 is_stmt 0 view .LVU106
 358 0028 10B4     		push	{r4}
 359              		.cfi_def_cfa_offset 4
 360              		.cfi_offset 4, -4
 361 002a 2A28     		cmp	r0, #42
 362 002c 56D8     		bhi	.L30
 363 002e DFE800F0 		tbb	[pc, r0]
 364              	.L32:
 365 0032 1A       		.byte	(.L39-.L32)/2
 366 0033 55       		.byte	(.L30-.L32)/2
 367 0034 53       		.byte	(.L38-.L32)/2
 368 0035 16       		.byte	(.L40-.L32)/2
 369 0036 48       		.byte	(.L37-.L32)/2
 370 0037 55       		.byte	(.L30-.L32)/2
 371 0038 55       		.byte	(.L30-.L32)/2
 372 0039 55       		.byte	(.L30-.L32)/2
 373 003a 55       		.byte	(.L30-.L32)/2
 374 003b 55       		.byte	(.L30-.L32)/2
 375 003c 55       		.byte	(.L30-.L32)/2
 376 003d 55       		.byte	(.L30-.L32)/2
 377 003e 55       		.byte	(.L30-.L32)/2
 378 003f 55       		.byte	(.L30-.L32)/2
 379 0040 55       		.byte	(.L30-.L32)/2
 380 0041 55       		.byte	(.L30-.L32)/2
 381 0042 55       		.byte	(.L30-.L32)/2
 382 0043 55       		.byte	(.L30-.L32)/2
ARM GAS  /tmp/ccgbU3q8.s 			page 14


 383 0044 55       		.byte	(.L30-.L32)/2
 384 0045 55       		.byte	(.L30-.L32)/2
 385 0046 55       		.byte	(.L30-.L32)/2
 386 0047 46       		.byte	(.L36-.L32)/2
 387 0048 44       		.byte	(.L35-.L32)/2
 388 0049 55       		.byte	(.L30-.L32)/2
 389 004a 55       		.byte	(.L30-.L32)/2
 390 004b 55       		.byte	(.L30-.L32)/2
 391 004c 55       		.byte	(.L30-.L32)/2
 392 004d 55       		.byte	(.L30-.L32)/2
 393 004e 55       		.byte	(.L30-.L32)/2
 394 004f 55       		.byte	(.L30-.L32)/2
 395 0050 55       		.byte	(.L30-.L32)/2
 396 0051 55       		.byte	(.L30-.L32)/2
 397 0052 55       		.byte	(.L30-.L32)/2
 398 0053 55       		.byte	(.L30-.L32)/2
 399 0054 55       		.byte	(.L30-.L32)/2
 400 0055 55       		.byte	(.L30-.L32)/2
 401 0056 55       		.byte	(.L30-.L32)/2
 402 0057 3A       		.byte	(.L34-.L32)/2
 403 0058 3A       		.byte	(.L34-.L32)/2
 404 0059 30       		.byte	(.L33-.L32)/2
 405 005a 30       		.byte	(.L33-.L32)/2
 406 005b 1E       		.byte	(.L31-.L32)/2
 407 005c 1E       		.byte	(.L31-.L32)/2
 408 005d 00       		.p2align 1
 409              	.L40:
 101:src/prt.c     **** 	//case OP_CLX:	return "CLx";
 410              		.loc 1 101 22 view .LVU107
 411 005e 2248     		ldr	r0, .L47+4
 412              	.LVL33:
 413              	.L25:
 118:src/prt.c     **** 
 414              		.loc 1 118 1 view .LVU108
 415 0060 5DF8044B 		ldr	r4, [sp], #4
 416              		.cfi_remember_state
 417              		.cfi_restore 4
 418              		.cfi_def_cfa_offset 0
 419 0064 7047     		bx	lr
 420              	.LVL34:
 421              	.L39:
 422              		.cfi_restore_state
  92:src/prt.c     **** 		return prt_tst(cmp, (enum tst_op)(opm - OP_Xeq0), instr, 0);
 423              		.loc 1 92 5 view .LVU109
 424 0066 2148     		ldr	r0, .L47+8
 425              	.LVL35:
 118:src/prt.c     **** 
 426              		.loc 1 118 1 view .LVU110
 427 0068 5DF8044B 		ldr	r4, [sp], #4
 428              		.cfi_remember_state
 429              		.cfi_restore 4
 430              		.cfi_def_cfa_offset 0
 431 006c 7047     		bx	lr
 432              	.LVL36:
 433              	.L31:
 434              		.cfi_restore_state
 115:src/prt.c     **** 	}
ARM GAS  /tmp/ccgbU3q8.s 			page 15


 435              		.loc 1 115 3 is_stmt 1 view .LVU111
 436              	.LBB50:
 437              	.LBI50:
  69:src/prt.c     **** 	char *p = instr;
 438              		.loc 1 69 20 view .LVU112
 439              	.LBB51:
  70:src/prt.c     **** 	if (cmplx)
 440              		.loc 1 70 2 view .LVU113
  71:src/prt.c     **** 		*p++ = COMPLEX_PREFIX;
 441              		.loc 1 71 2 view .LVU114
  72:src/prt.c     **** 	*p++ = 'x';
 442              		.loc 1 72 3 view .LVU115
  72:src/prt.c     **** 	*p++ = 'x';
 443              		.loc 1 72 3 is_stmt 0 view .LVU116
 444              	.LBE51:
 445              	.LBE50:
 115:src/prt.c     **** 	}
 446              		.loc 1 115 41 view .LVU117
 447 006e A0F12903 		sub	r3, r0, #41
 448              	.LBB53:
 449              	.LBB52:
  74:src/prt.c     **** 	*p++ = r;
 450              		.loc 1 74 30 view .LVU118
 451 0072 1C4A     		ldr	r2, .L47
 452 0074 DBB2     		uxtb	r3, r3
  72:src/prt.c     **** 	*p++ = 'x';
 453              		.loc 1 72 8 view .LVU119
 454 0076 1424     		movs	r4, #20
  74:src/prt.c     **** 	*p++ = r;
 455              		.loc 1 74 7 view .LVU120
 456 0078 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 457 007a 8B70     		strb	r3, [r1, #2]
  73:src/prt.c     **** 	*p++ = "=\013\035<\011>\012"[op];
 458              		.loc 1 73 7 view .LVU121
 459 007c 7820     		movs	r0, #120
 460              	.LVL37:
  75:src/prt.c     **** 	*p++ = '?';
 461              		.loc 1 75 7 view .LVU122
 462 007e 6922     		movs	r2, #105
 463              	.LVL38:
 464              	.L45:
  76:src/prt.c     **** 	return instr;
 465              		.loc 1 76 7 view .LVU123
 466 0080 3F23     		movs	r3, #63
  73:src/prt.c     **** 	*p++ = "=\013\035<\011>\012"[op];
 467              		.loc 1 73 7 view .LVU124
 468 0082 4870     		strb	r0, [r1, #1]
  72:src/prt.c     **** 	*p++ = 'x';
 469              		.loc 1 72 8 view .LVU125
 470 0084 0C70     		strb	r4, [r1]
  73:src/prt.c     **** 	*p++ = "=\013\035<\011>\012"[op];
 471              		.loc 1 73 2 is_stmt 1 view .LVU126
  74:src/prt.c     **** 	*p++ = r;
 472              		.loc 1 74 2 view .LVU127
  75:src/prt.c     **** 	*p++ = '?';
 473              		.loc 1 75 2 view .LVU128
  75:src/prt.c     **** 	*p++ = '?';
ARM GAS  /tmp/ccgbU3q8.s 			page 16


 474              		.loc 1 75 7 is_stmt 0 view .LVU129
 475 0086 CA70     		strb	r2, [r1, #3]
  76:src/prt.c     **** 	return instr;
 476              		.loc 1 76 2 is_stmt 1 view .LVU130
  76:src/prt.c     **** 	return instr;
 477              		.loc 1 76 7 is_stmt 0 view .LVU131
 478 0088 0B71     		strb	r3, [r1, #4]
  77:src/prt.c     **** }
 479              		.loc 1 77 2 is_stmt 1 view .LVU132
  77:src/prt.c     **** }
 480              		.loc 1 77 2 is_stmt 0 view .LVU133
 481              	.LBE52:
 482              	.LBE53:
 115:src/prt.c     **** 	}
 483              		.loc 1 115 10 view .LVU134
 484 008a 0846     		mov	r0, r1
 118:src/prt.c     **** 
 485              		.loc 1 118 1 view .LVU135
 486 008c 5DF8044B 		ldr	r4, [sp], #4
 487              		.cfi_remember_state
 488              		.cfi_restore 4
 489              		.cfi_def_cfa_offset 0
 490 0090 7047     		bx	lr
 491              	.LVL39:
 492              	.L33:
 493              		.cfi_restore_state
 112:src/prt.c     **** 
 494              		.loc 1 112 3 is_stmt 1 view .LVU136
 495              	.LBB54:
 496              	.LBI54:
  69:src/prt.c     **** 	char *p = instr;
 497              		.loc 1 69 20 view .LVU137
 498              	.LBB55:
  70:src/prt.c     **** 	if (cmplx)
 499              		.loc 1 70 2 view .LVU138
  71:src/prt.c     **** 		*p++ = COMPLEX_PREFIX;
 500              		.loc 1 71 2 view .LVU139
  72:src/prt.c     **** 	*p++ = 'x';
 501              		.loc 1 72 3 view .LVU140
  72:src/prt.c     **** 	*p++ = 'x';
 502              		.loc 1 72 3 is_stmt 0 view .LVU141
 503              	.LBE55:
 504              	.LBE54:
 112:src/prt.c     **** 
 505              		.loc 1 112 41 view .LVU142
 506 0092 A0F12703 		sub	r3, r0, #39
 507              	.LBB57:
 508              	.LBB56:
  74:src/prt.c     **** 	*p++ = r;
 509              		.loc 1 74 30 view .LVU143
 510 0096 134A     		ldr	r2, .L47
 511 0098 DBB2     		uxtb	r3, r3
  72:src/prt.c     **** 	*p++ = 'x';
 512              		.loc 1 72 8 view .LVU144
 513 009a 1424     		movs	r4, #20
  74:src/prt.c     **** 	*p++ = r;
 514              		.loc 1 74 7 view .LVU145
ARM GAS  /tmp/ccgbU3q8.s 			page 17


 515 009c D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 516 009e 8B70     		strb	r3, [r1, #2]
  73:src/prt.c     **** 	*p++ = "=\013\035<\011>\012"[op];
 517              		.loc 1 73 7 view .LVU146
 518 00a0 7820     		movs	r0, #120
 519              	.LVL40:
  75:src/prt.c     **** 	*p++ = '?';
 520              		.loc 1 75 7 view .LVU147
 521 00a2 3122     		movs	r2, #49
 522 00a4 ECE7     		b	.L45
 523              	.LVL41:
 524              	.L34:
  75:src/prt.c     **** 	*p++ = '?';
 525              		.loc 1 75 7 view .LVU148
 526              	.LBE56:
 527              	.LBE57:
 109:src/prt.c     **** 
 528              		.loc 1 109 3 is_stmt 1 view .LVU149
 529              	.LBB58:
 530              	.LBI58:
  69:src/prt.c     **** 	char *p = instr;
 531              		.loc 1 69 20 view .LVU150
 532              	.LBB59:
  70:src/prt.c     **** 	if (cmplx)
 533              		.loc 1 70 2 view .LVU151
  71:src/prt.c     **** 		*p++ = COMPLEX_PREFIX;
 534              		.loc 1 71 2 view .LVU152
  72:src/prt.c     **** 	*p++ = 'x';
 535              		.loc 1 72 3 view .LVU153
  72:src/prt.c     **** 	*p++ = 'x';
 536              		.loc 1 72 3 is_stmt 0 view .LVU154
 537              	.LBE59:
 538              	.LBE58:
 109:src/prt.c     **** 
 539              		.loc 1 109 41 view .LVU155
 540 00a6 A0F12503 		sub	r3, r0, #37
 541              	.LBB61:
 542              	.LBB60:
  74:src/prt.c     **** 	*p++ = r;
 543              		.loc 1 74 30 view .LVU156
 544 00aa 0E4A     		ldr	r2, .L47
 545 00ac DBB2     		uxtb	r3, r3
  72:src/prt.c     **** 	*p++ = 'x';
 546              		.loc 1 72 8 view .LVU157
 547 00ae 1424     		movs	r4, #20
  74:src/prt.c     **** 	*p++ = r;
 548              		.loc 1 74 7 view .LVU158
 549 00b0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 550 00b2 8B70     		strb	r3, [r1, #2]
  73:src/prt.c     **** 	*p++ = "=\013\035<\011>\012"[op];
 551              		.loc 1 73 7 view .LVU159
 552 00b4 7820     		movs	r0, #120
 553              	.LVL42:
  75:src/prt.c     **** 	*p++ = '?';
 554              		.loc 1 75 7 view .LVU160
 555 00b6 3022     		movs	r2, #48
 556 00b8 E2E7     		b	.L45
ARM GAS  /tmp/ccgbU3q8.s 			page 18


 557              	.LVL43:
 558              	.L35:
  75:src/prt.c     **** 	*p++ = '?';
 559              		.loc 1 75 7 view .LVU161
 560              	.LBE60:
 561              	.LBE61:
 106:src/prt.c     **** 
 562              		.loc 1 106 22 is_stmt 1 view .LVU162
 106:src/prt.c     **** 
 563              		.loc 1 106 29 is_stmt 0 view .LVU163
 564 00ba 0D48     		ldr	r0, .L47+12
 565              	.LVL44:
 106:src/prt.c     **** 
 566              		.loc 1 106 29 view .LVU164
 567 00bc D0E7     		b	.L25
 568              	.LVL45:
 569              	.L36:
 105:src/prt.c     **** 	case OP_SIGMAMINUS:	return "\221-";
 570              		.loc 1 105 21 is_stmt 1 view .LVU165
 105:src/prt.c     **** 	case OP_SIGMAMINUS:	return "\221-";
 571              		.loc 1 105 28 is_stmt 0 view .LVU166
 572 00be 0D48     		ldr	r0, .L47+16
 573              	.LVL46:
 105:src/prt.c     **** 	case OP_SIGMAMINUS:	return "\221-";
 574              		.loc 1 105 28 view .LVU167
 575 00c0 CEE7     		b	.L25
 576              	.LVL47:
 577              	.L37:
  99:src/prt.c     **** #endif
 578              		.loc 1 99 15 is_stmt 1 view .LVU168
  99:src/prt.c     **** #endif
 579              		.loc 1 99 39 is_stmt 0 view .LVU169
 580 00c2 0D4B     		ldr	r3, .L47+20
  99:src/prt.c     **** #endif
 581              		.loc 1 99 45 view .LVU170
 582 00c4 0D49     		ldr	r1, .L47+24
 583              	.LVL48:
  99:src/prt.c     **** #endif
 584              		.loc 1 99 39 view .LVU171
 585 00c6 1B68     		ldr	r3, [r3]
  99:src/prt.c     **** #endif
 586              		.loc 1 99 45 view .LVU172
 587 00c8 0D48     		ldr	r0, .L47+28
 588              	.LVL49:
  99:src/prt.c     **** #endif
 589              		.loc 1 99 39 view .LVU173
 590 00ca 93F8E737 		ldrb	r3, [r3, #2023]	@ zero_extendqisi2
  99:src/prt.c     **** #endif
 591              		.loc 1 99 45 view .LVU174
 592 00ce 13F0200F 		tst	r3, #32
 593 00d2 18BF     		it	ne
 594 00d4 0846     		movne	r0, r1
 595 00d6 C3E7     		b	.L25
 596              	.LVL50:
 597              	.L38:
 104:src/prt.c     **** 	case OP_SIGMAPLUS:	return "\221+";
 598              		.loc 1 104 15 is_stmt 1 view .LVU175
ARM GAS  /tmp/ccgbU3q8.s 			page 19


 104:src/prt.c     **** 	case OP_SIGMAPLUS:	return "\221+";
 599              		.loc 1 104 22 is_stmt 0 view .LVU176
 600 00d8 0A48     		ldr	r0, .L47+32
 601              	.LVL51:
 104:src/prt.c     **** 	case OP_SIGMAPLUS:	return "\221+";
 602              		.loc 1 104 22 view .LVU177
 603 00da C1E7     		b	.L25
 604              	.LVL52:
 605              	.L30:
 117:src/prt.c     **** }
 606              		.loc 1 117 2 is_stmt 1 view .LVU178
 117:src/prt.c     **** }
 607              		.loc 1 117 9 is_stmt 0 view .LVU179
 608 00dc 0A48     		ldr	r0, .L47+36
 609              	.LVL53:
 117:src/prt.c     **** }
 610              		.loc 1 117 9 view .LVU180
 611 00de BFE7     		b	.L25
 612              	.LVL54:
 613              	.L46:
 614              		.cfi_def_cfa_offset 0
 615              		.cfi_restore 4
  82:src/prt.c     **** 
 616              		.loc 1 82 7 view .LVU181
 617 00e0 3023     		movs	r3, #48
 618 00e2 92E7     		b	.L27
 619              	.L48:
 620              		.align	2
 621              	.L47:
 622 00e4 20000000 		.word	.LC8
 623 00e8 00000000 		.word	.LC1
 624 00ec 04000000 		.word	.LC2
 625 00f0 18000000 		.word	.LC6
 626 00f4 14000000 		.word	.LC5
 627 00f8 00000000 		.word	main_ram
 628 00fc 0C000000 		.word	.LC3
 629 0100 1C000000 		.word	.LC7
 630 0104 10000000 		.word	.LC4
 631 0108 00000000 		.word	.LC0
 632              		.cfi_endproc
 633              	.LFE17:
 635              		.section	.text.prt_monadic,"ax",%progbits
 636              		.align	1
 637              		.p2align 2,,3
 638              		.syntax unified
 639              		.thumb
 640              		.thumb_func
 641              		.fpu fpv4-sp-d16
 643              	prt_monadic:
 644              	.LVL55:
 645              	.LFB0:
  23:src/prt.c     **** 	if (f < NUM_MONADIC && (! isNULL(monfuncs[f].mondreal) || ! isNULL(monfuncs[f].monint)))
 646              		.loc 1 23 67 is_stmt 1 view -0
 647              		.cfi_startproc
 648              		@ args = 0, pretend = 0, frame = 0
 649              		@ frame_needed = 0, uses_anonymous_args = 0
 650              		@ link register save eliminated.
ARM GAS  /tmp/ccgbU3q8.s 			page 20


  24:src/prt.c     **** 		return sncopy(instr, monfuncs[f].fname, NAME_LEN);
 651              		.loc 1 24 2 view .LVU183
  24:src/prt.c     **** 		return sncopy(instr, monfuncs[f].fname, NAME_LEN);
 652              		.loc 1 24 5 is_stmt 0 view .LVU184
 653 0000 9B28     		cmp	r0, #155
 654 0002 15D8     		bhi	.L52
  24:src/prt.c     **** 		return sncopy(instr, monfuncs[f].fname, NAME_LEN);
 655              		.loc 1 24 28 discriminator 1 view .LVU185
 656 0004 00EB4002 		add	r2, r0, r0, lsl #1
 657 0008 0B46     		mov	r3, r1
 658 000a 0C49     		ldr	r1, .L58
 659              	.LVL56:
  23:src/prt.c     **** 	if (f < NUM_MONADIC && (! isNULL(monfuncs[f].mondreal) || ! isNULL(monfuncs[f].monint)))
 660              		.loc 1 23 67 discriminator 1 view .LVU186
 661 000c 30B4     		push	{r4, r5}
 662              		.cfi_def_cfa_offset 8
 663              		.cfi_offset 4, -8
 664              		.cfi_offset 5, -4
  24:src/prt.c     **** 		return sncopy(instr, monfuncs[f].fname, NAME_LEN);
 665              		.loc 1 24 22 discriminator 1 view .LVU187
 666 000e 51F83240 		ldr	r4, [r1, r2, lsl #3]
  24:src/prt.c     **** 		return sncopy(instr, monfuncs[f].fname, NAME_LEN);
 667              		.loc 1 24 28 discriminator 1 view .LVU188
 668 0012 01EBC205 		add	r5, r1, r2, lsl #3
 669 0016 4200     		lsls	r2, r0, #1
  24:src/prt.c     **** 		return sncopy(instr, monfuncs[f].fname, NAME_LEN);
 670              		.loc 1 24 22 discriminator 1 view .LVU189
 671 0018 0CB9     		cbnz	r4, .L51
  24:src/prt.c     **** 		return sncopy(instr, monfuncs[f].fname, NAME_LEN);
 672              		.loc 1 24 57 discriminator 2 view .LVU190
 673 001a AC68     		ldr	r4, [r5, #8]
 674 001c 54B1     		cbz	r4, .L53
 675              	.L51:
 676              	.LVL57:
 677              	.LBB64:
 678              	.LBI64:
  23:src/prt.c     **** 	if (f < NUM_MONADIC && (! isNULL(monfuncs[f].mondreal) || ! isNULL(monfuncs[f].monint)))
 679              		.loc 1 23 20 is_stmt 1 view .LVU191
 680              	.LBB65:
  25:src/prt.c     **** 	return "???";
 681              		.loc 1 25 3 view .LVU192
  25:src/prt.c     **** 	return "???";
 682              		.loc 1 25 35 is_stmt 0 view .LVU193
 683 001e 1044     		add	r0, r0, r2
 684              	.LVL58:
  25:src/prt.c     **** 	return "???";
 685              		.loc 1 25 35 view .LVU194
 686 0020 01EBC001 		add	r1, r1, r0, lsl #3
 687              	.LBE65:
 688              	.LBE64:
  27:src/prt.c     **** 
 689              		.loc 1 27 1 view .LVU195
 690 0024 30BC     		pop	{r4, r5}
 691              		.cfi_restore 5
 692              		.cfi_restore 4
 693              		.cfi_def_cfa_offset 0
 694              	.LBB67:
ARM GAS  /tmp/ccgbU3q8.s 			page 21


 695              	.LBB66:
  25:src/prt.c     **** 	return "???";
 696              		.loc 1 25 10 view .LVU196
 697 0026 0C31     		adds	r1, r1, #12
 698 0028 1846     		mov	r0, r3
 699 002a 0622     		movs	r2, #6
 700 002c FFF7FEBF 		b	sncopy
 701              	.LVL59:
 702              	.L52:
  25:src/prt.c     **** 	return "???";
 703              		.loc 1 25 10 view .LVU197
 704              	.LBE66:
 705              	.LBE67:
  26:src/prt.c     **** }
 706              		.loc 1 26 9 view .LVU198
 707 0030 0348     		ldr	r0, .L58+4
 708              	.LVL60:
  27:src/prt.c     **** 
 709              		.loc 1 27 1 view .LVU199
 710 0032 7047     		bx	lr
 711              	.LVL61:
 712              	.L53:
 713              		.cfi_def_cfa_offset 8
 714              		.cfi_offset 4, -8
 715              		.cfi_offset 5, -4
  26:src/prt.c     **** }
 716              		.loc 1 26 9 view .LVU200
 717 0034 0248     		ldr	r0, .L58+4
 718              	.LVL62:
  27:src/prt.c     **** 
 719              		.loc 1 27 1 view .LVU201
 720 0036 30BC     		pop	{r4, r5}
 721              		.cfi_restore 5
 722              		.cfi_restore 4
 723              		.cfi_def_cfa_offset 0
 724 0038 7047     		bx	lr
 725              	.L59:
 726 003a 00BF     		.align	2
 727              	.L58:
 728 003c 00000000 		.word	monfuncs
 729 0040 00000000 		.word	.LC0
 730              		.cfi_endproc
 731              	.LFE0:
 733              		.section	.text.prt_dyadic,"ax",%progbits
 734              		.align	1
 735              		.p2align 2,,3
 736              		.syntax unified
 737              		.thumb
 738              		.thumb_func
 739              		.fpu fpv4-sp-d16
 741              	prt_dyadic:
 742              	.LVL63:
 743              	.LFB1:
  29:src/prt.c     **** 	if (f < NUM_DYADIC && (! isNULL(dyfuncs[f].dydreal) || ! isNULL(dyfuncs[f].dydint)))
 744              		.loc 1 29 66 is_stmt 1 view -0
 745              		.cfi_startproc
 746              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccgbU3q8.s 			page 22


 747              		@ frame_needed = 0, uses_anonymous_args = 0
 748              		@ link register save eliminated.
  30:src/prt.c     **** 		return sncopy(instr, dyfuncs[f].fname, NAME_LEN);
 749              		.loc 1 30 2 view .LVU203
  30:src/prt.c     **** 		return sncopy(instr, dyfuncs[f].fname, NAME_LEN);
 750              		.loc 1 30 5 is_stmt 0 view .LVU204
 751 0000 3428     		cmp	r0, #52
 752 0002 15D8     		bhi	.L63
  30:src/prt.c     **** 		return sncopy(instr, dyfuncs[f].fname, NAME_LEN);
 753              		.loc 1 30 27 discriminator 1 view .LVU205
 754 0004 00EB4002 		add	r2, r0, r0, lsl #1
 755 0008 0B46     		mov	r3, r1
 756 000a 0C49     		ldr	r1, .L69
 757              	.LVL64:
  29:src/prt.c     **** 	if (f < NUM_DYADIC && (! isNULL(dyfuncs[f].dydreal) || ! isNULL(dyfuncs[f].dydint)))
 758              		.loc 1 29 66 discriminator 1 view .LVU206
 759 000c 30B4     		push	{r4, r5}
 760              		.cfi_def_cfa_offset 8
 761              		.cfi_offset 4, -8
 762              		.cfi_offset 5, -4
  30:src/prt.c     **** 		return sncopy(instr, dyfuncs[f].fname, NAME_LEN);
 763              		.loc 1 30 21 discriminator 1 view .LVU207
 764 000e 51F83240 		ldr	r4, [r1, r2, lsl #3]
  30:src/prt.c     **** 		return sncopy(instr, dyfuncs[f].fname, NAME_LEN);
 765              		.loc 1 30 27 discriminator 1 view .LVU208
 766 0012 01EBC205 		add	r5, r1, r2, lsl #3
 767 0016 4200     		lsls	r2, r0, #1
  30:src/prt.c     **** 		return sncopy(instr, dyfuncs[f].fname, NAME_LEN);
 768              		.loc 1 30 21 discriminator 1 view .LVU209
 769 0018 0CB9     		cbnz	r4, .L62
  30:src/prt.c     **** 		return sncopy(instr, dyfuncs[f].fname, NAME_LEN);
 770              		.loc 1 30 54 discriminator 2 view .LVU210
 771 001a AC68     		ldr	r4, [r5, #8]
 772 001c 54B1     		cbz	r4, .L64
 773              	.L62:
 774              	.LVL65:
 775              	.LBB70:
 776              	.LBI70:
  29:src/prt.c     **** 	if (f < NUM_DYADIC && (! isNULL(dyfuncs[f].dydreal) || ! isNULL(dyfuncs[f].dydint)))
 777              		.loc 1 29 20 is_stmt 1 view .LVU211
 778              	.LBB71:
  31:src/prt.c     **** 	return "???";
 779              		.loc 1 31 3 view .LVU212
  31:src/prt.c     **** 	return "???";
 780              		.loc 1 31 34 is_stmt 0 view .LVU213
 781 001e 1044     		add	r0, r0, r2
 782              	.LVL66:
  31:src/prt.c     **** 	return "???";
 783              		.loc 1 31 34 view .LVU214
 784 0020 01EBC001 		add	r1, r1, r0, lsl #3
 785              	.LBE71:
 786              	.LBE70:
  33:src/prt.c     **** 
 787              		.loc 1 33 1 view .LVU215
 788 0024 30BC     		pop	{r4, r5}
 789              		.cfi_restore 5
 790              		.cfi_restore 4
ARM GAS  /tmp/ccgbU3q8.s 			page 23


 791              		.cfi_def_cfa_offset 0
 792              	.LBB73:
 793              	.LBB72:
  31:src/prt.c     **** 	return "???";
 794              		.loc 1 31 10 view .LVU216
 795 0026 0C31     		adds	r1, r1, #12
 796 0028 1846     		mov	r0, r3
 797 002a 0622     		movs	r2, #6
 798 002c FFF7FEBF 		b	sncopy
 799              	.LVL67:
 800              	.L63:
  31:src/prt.c     **** 	return "???";
 801              		.loc 1 31 10 view .LVU217
 802              	.LBE72:
 803              	.LBE73:
  32:src/prt.c     **** }
 804              		.loc 1 32 9 view .LVU218
 805 0030 0348     		ldr	r0, .L69+4
 806              	.LVL68:
  33:src/prt.c     **** 
 807              		.loc 1 33 1 view .LVU219
 808 0032 7047     		bx	lr
 809              	.LVL69:
 810              	.L64:
 811              		.cfi_def_cfa_offset 8
 812              		.cfi_offset 4, -8
 813              		.cfi_offset 5, -4
  32:src/prt.c     **** }
 814              		.loc 1 32 9 view .LVU220
 815 0034 0248     		ldr	r0, .L69+4
 816              	.LVL70:
  33:src/prt.c     **** 
 817              		.loc 1 33 1 view .LVU221
 818 0036 30BC     		pop	{r4, r5}
 819              		.cfi_restore 5
 820              		.cfi_restore 4
 821              		.cfi_def_cfa_offset 0
 822 0038 7047     		bx	lr
 823              	.L70:
 824 003a 00BF     		.align	2
 825              	.L69:
 826 003c 00000000 		.word	dyfuncs
 827 0040 00000000 		.word	.LC0
 828              		.cfi_endproc
 829              	.LFE1:
 831              		.section	.text.prt_triadic,"ax",%progbits
 832              		.align	1
 833              		.p2align 2,,3
 834              		.syntax unified
 835              		.thumb
 836              		.thumb_func
 837              		.fpu fpv4-sp-d16
 839              	prt_triadic:
 840              	.LVL71:
 841              	.LFB2:
  35:src/prt.c     **** 	if (f < NUM_TRIADIC && (! isNULL(trifuncs[f].trireal) || ! isNULL(trifuncs[f].triint)))
 842              		.loc 1 35 67 is_stmt 1 view -0
ARM GAS  /tmp/ccgbU3q8.s 			page 24


 843              		.cfi_startproc
 844              		@ args = 0, pretend = 0, frame = 0
 845              		@ frame_needed = 0, uses_anonymous_args = 0
 846              		@ link register save eliminated.
  36:src/prt.c     **** 		return sncopy(instr, trifuncs[f].fname, NAME_LEN);
 847              		.loc 1 36 2 view .LVU223
  36:src/prt.c     **** 		return sncopy(instr, trifuncs[f].fname, NAME_LEN);
 848              		.loc 1 36 5 is_stmt 0 view .LVU224
 849 0000 0B28     		cmp	r0, #11
 850 0002 15D8     		bhi	.L74
  36:src/prt.c     **** 		return sncopy(instr, trifuncs[f].fname, NAME_LEN);
 851              		.loc 1 36 28 discriminator 1 view .LVU225
 852 0004 00EB8002 		add	r2, r0, r0, lsl #2
 853 0008 0B46     		mov	r3, r1
 854 000a 0C49     		ldr	r1, .L80
 855              	.LVL72:
  35:src/prt.c     **** 	if (f < NUM_TRIADIC && (! isNULL(trifuncs[f].trireal) || ! isNULL(trifuncs[f].triint)))
 856              		.loc 1 35 67 discriminator 1 view .LVU226
 857 000c 30B4     		push	{r4, r5}
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 4, -8
 860              		.cfi_offset 5, -4
  36:src/prt.c     **** 		return sncopy(instr, trifuncs[f].fname, NAME_LEN);
 861              		.loc 1 36 22 discriminator 1 view .LVU227
 862 000e 51F82240 		ldr	r4, [r1, r2, lsl #2]
  36:src/prt.c     **** 		return sncopy(instr, trifuncs[f].fname, NAME_LEN);
 863              		.loc 1 36 28 discriminator 1 view .LVU228
 864 0012 01EB8205 		add	r5, r1, r2, lsl #2
 865 0016 8200     		lsls	r2, r0, #2
  36:src/prt.c     **** 		return sncopy(instr, trifuncs[f].fname, NAME_LEN);
 866              		.loc 1 36 22 discriminator 1 view .LVU229
 867 0018 0CB9     		cbnz	r4, .L73
  36:src/prt.c     **** 		return sncopy(instr, trifuncs[f].fname, NAME_LEN);
 868              		.loc 1 36 56 discriminator 2 view .LVU230
 869 001a 6C68     		ldr	r4, [r5, #4]
 870 001c 54B1     		cbz	r4, .L75
 871              	.L73:
 872              	.LVL73:
 873              	.LBB76:
 874              	.LBI76:
  35:src/prt.c     **** 	if (f < NUM_TRIADIC && (! isNULL(trifuncs[f].trireal) || ! isNULL(trifuncs[f].triint)))
 875              		.loc 1 35 20 is_stmt 1 view .LVU231
 876              	.LBB77:
  37:src/prt.c     **** 	return "???";
 877              		.loc 1 37 3 view .LVU232
  37:src/prt.c     **** 	return "???";
 878              		.loc 1 37 35 is_stmt 0 view .LVU233
 879 001e 1044     		add	r0, r0, r2
 880              	.LVL74:
  37:src/prt.c     **** 	return "???";
 881              		.loc 1 37 35 view .LVU234
 882 0020 01EB8001 		add	r1, r1, r0, lsl #2
 883              	.LBE77:
 884              	.LBE76:
  39:src/prt.c     **** 
 885              		.loc 1 39 1 view .LVU235
 886 0024 30BC     		pop	{r4, r5}
ARM GAS  /tmp/ccgbU3q8.s 			page 25


 887              		.cfi_restore 5
 888              		.cfi_restore 4
 889              		.cfi_def_cfa_offset 0
 890              	.LBB79:
 891              	.LBB78:
  37:src/prt.c     **** 	return "???";
 892              		.loc 1 37 10 view .LVU236
 893 0026 0831     		adds	r1, r1, #8
 894 0028 1846     		mov	r0, r3
 895 002a 0622     		movs	r2, #6
 896 002c FFF7FEBF 		b	sncopy
 897              	.LVL75:
 898              	.L74:
  37:src/prt.c     **** 	return "???";
 899              		.loc 1 37 10 view .LVU237
 900              	.LBE78:
 901              	.LBE79:
  38:src/prt.c     **** }
 902              		.loc 1 38 9 view .LVU238
 903 0030 0348     		ldr	r0, .L80+4
 904              	.LVL76:
  39:src/prt.c     **** 
 905              		.loc 1 39 1 view .LVU239
 906 0032 7047     		bx	lr
 907              	.LVL77:
 908              	.L75:
 909              		.cfi_def_cfa_offset 8
 910              		.cfi_offset 4, -8
 911              		.cfi_offset 5, -4
  38:src/prt.c     **** }
 912              		.loc 1 38 9 view .LVU240
 913 0034 0248     		ldr	r0, .L80+4
 914              	.LVL78:
  39:src/prt.c     **** 
 915              		.loc 1 39 1 view .LVU241
 916 0036 30BC     		pop	{r4, r5}
 917              		.cfi_restore 5
 918              		.cfi_restore 4
 919              		.cfi_def_cfa_offset 0
 920 0038 7047     		bx	lr
 921              	.L81:
 922 003a 00BF     		.align	2
 923              	.L80:
 924 003c 00000000 		.word	trifuncs
 925 0040 00000000 		.word	.LC0
 926              		.cfi_endproc
 927              	.LFE2:
 929              		.section	.text.num_arg_digits.part.0,"ax",%progbits
 930              		.align	1
 931              		.p2align 2,,3
 932              		.syntax unified
 933              		.thumb
 934              		.thumb_func
 935              		.fpu fpv4-sp-d16
 937              	num_arg_digits.part.0:
 938              	.LVL79:
 939              	.LFB24:
ARM GAS  /tmp/ccgbU3q8.s 			page 26


 140:src/prt.c     **** 	int lim = argcmds[cmd].lim;
 940              		.loc 1 140 5 is_stmt 1 view -0
 941              		.cfi_startproc
 942              		@ args = 0, pretend = 0, frame = 0
 943              		@ frame_needed = 0, uses_anonymous_args = 0
 944              		@ link register save eliminated.
 149:src/prt.c     **** #endif
 945              		.loc 1 149 2 view .LVU243
 149:src/prt.c     **** #endif
 946              		.loc 1 149 6 is_stmt 0 view .LVU244
 947 0000 0A4B     		ldr	r3, .L88
 149:src/prt.c     **** #endif
 948              		.loc 1 149 5 view .LVU245
 949 0002 93F91530 		ldrsb	r3, [r3, #21]
 950 0006 002B     		cmp	r3, #0
 951 0008 0DDB     		blt	.L86
 149:src/prt.c     **** #endif
 952              		.loc 1 149 32 view .LVU246
 953 000a 094B     		ldr	r3, .L88+4
 954 000c 03EB0010 		add	r0, r3, r0, lsl #4
 955              	.LVL80:
 149:src/prt.c     **** #endif
 956              		.loc 1 149 32 view .LVU247
 957 0010 4379     		ldrb	r3, [r0, #5]	@ zero_extendqisi2
 149:src/prt.c     **** #endif
 958              		.loc 1 149 17 view .LVU248
 959 0012 9907     		lsls	r1, r3, #30
 960 0014 07D4     		bmi	.L86
 149:src/prt.c     **** #endif
 961              		.loc 1 149 37 view .LVU249
 962 0016 5A06     		lsls	r2, r3, #25
 963 0018 05D4     		bmi	.L86
 149:src/prt.c     **** #endif
 964              		.loc 1 149 58 view .LVU250
 965 001a 13F0200F 		tst	r3, #32
 152:src/prt.c     **** }
 966              		.loc 1 152 9 view .LVU251
 967 001e 14BF     		ite	ne
 968 0020 0220     		movne	r0, #2
 969 0022 0320     		moveq	r0, #3
 970 0024 7047     		bx	lr
 971              	.L86:
 151:src/prt.c     **** 	return 3;
 972              		.loc 1 151 10 view .LVU252
 973 0026 0220     		movs	r0, #2
 153:src/prt.c     **** 
 974              		.loc 1 153 1 view .LVU253
 975 0028 7047     		bx	lr
 976              	.L89:
 977 002a 00BF     		.align	2
 978              	.L88:
 979 002c 00000000 		.word	StateWhileOn
 980 0030 00000000 		.word	argcmds
 981              		.cfi_endproc
 982              	.LFE24:
 984              		.section	.rodata.prt_rargs.str1.4,"aMS",%progbits,1
 985              		.align	2
ARM GAS  /tmp/ccgbU3q8.s 			page 27


 986              	.LC9:
 987 0000 A0060600 		.ascii	"\240\006\006\000"
 988              		.align	2
 989              	.LC10:
 990 0004 23060600 		.ascii	"#\006\006\000"
 991              		.align	2
 992              	.LC11:
 993 0008 17060600 		.ascii	"\027\006\006\000"
 994              		.align	2
 995              	.LC12:
 996 000c 58595A54 		.ascii	"XYZTABCDLIJK\000"
 996      41424344 
 996      4C494A4B 
 996      00
 997              		.section	.text.prt_rargs,"ax",%progbits
 998              		.align	1
 999              		.p2align 2,,3
 1000              		.syntax unified
 1001              		.thumb
 1002              		.thumb_func
 1003              		.fpu fpv4-sp-d16
 1005              	prt_rargs:
 1006              	.LVL81:
 1007              	.LFB11:
 161:src/prt.c     **** 	unsigned int arg = op & RARG_MASK;
 1008              		.loc 1 161 60 is_stmt 1 view -0
 1009              		.cfi_startproc
 1010              		@ args = 0, pretend = 0, frame = 0
 1011              		@ frame_needed = 0, uses_anonymous_args = 0
 162:src/prt.c     **** 	int ind = op & RARG_IND;
 1012              		.loc 1 162 2 view .LVU255
 161:src/prt.c     **** 	unsigned int arg = op & RARG_MASK;
 1013              		.loc 1 161 60 is_stmt 0 view .LVU256
 1014 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 1015              		.cfi_def_cfa_offset 32
 1016              		.cfi_offset 4, -32
 1017              		.cfi_offset 5, -28
 1018              		.cfi_offset 6, -24
 1019              		.cfi_offset 7, -20
 1020              		.cfi_offset 8, -16
 1021              		.cfi_offset 9, -12
 1022              		.cfi_offset 10, -8
 1023              		.cfi_offset 14, -4
 164:src/prt.c     **** 	char *p;
 1024              		.loc 1 164 27 view .LVU257
 1025 0004 040A     		lsrs	r4, r0, #8
 168:src/prt.c     **** 		if (ind) arg += RARG_IND;
 1026              		.loc 1 168 20 view .LVU258
 1027 0006 5C4F     		ldr	r7, .L145
 164:src/prt.c     **** 	char *p;
 1028              		.loc 1 164 27 view .LVU259
 1029 0008 203C     		subs	r4, r4, #32
 1030 000a E4B2     		uxtb	r4, r4
 168:src/prt.c     **** 		if (ind) arg += RARG_IND;
 1031              		.loc 1 168 20 view .LVU260
 1032 000c 07EB0413 		add	r3, r7, r4, lsl #4
 162:src/prt.c     **** 	int ind = op & RARG_IND;
ARM GAS  /tmp/ccgbU3q8.s 			page 28


 1033              		.loc 1 162 15 view .LVU261
 1034 0010 00F07F06 		and	r6, r0, #127
 1035              	.LVL82:
 163:src/prt.c     **** 	const unsigned int cmd = RARG_CMD(op);
 1036              		.loc 1 163 2 is_stmt 1 view .LVU262
 168:src/prt.c     **** 		if (ind) arg += RARG_IND;
 1037              		.loc 1 168 20 is_stmt 0 view .LVU263
 1038 0014 5A79     		ldrb	r2, [r3, #5]	@ zero_extendqisi2
 168:src/prt.c     **** 		if (ind) arg += RARG_IND;
 1039              		.loc 1 168 5 view .LVU264
 1040 0016 D307     		lsls	r3, r2, #31
 161:src/prt.c     **** 	unsigned int arg = op & RARG_MASK;
 1041              		.loc 1 161 60 view .LVU265
 1042 0018 0D46     		mov	r5, r1
 168:src/prt.c     **** 		if (ind) arg += RARG_IND;
 1043              		.loc 1 168 20 view .LVU266
 1044 001a 4FEA0418 		lsl	r8, r4, #4
 163:src/prt.c     **** 	const unsigned int cmd = RARG_CMD(op);
 1045              		.loc 1 163 6 view .LVU267
 1046 001e 00F08000 		and	r0, r0, #128
 1047              	.LVL83:
 164:src/prt.c     **** 	char *p;
 1048              		.loc 1 164 2 is_stmt 1 view .LVU268
 165:src/prt.c     **** 	int n = 2;
 1049              		.loc 1 165 2 view .LVU269
 166:src/prt.c     **** 
 1050              		.loc 1 166 2 view .LVU270
 168:src/prt.c     **** 		if (ind) arg += RARG_IND;
 1051              		.loc 1 168 2 view .LVU271
 168:src/prt.c     **** 		if (ind) arg += RARG_IND;
 1052              		.loc 1 168 5 is_stmt 0 view .LVU272
 1053 0022 32D4     		bmi	.L91
 169:src/prt.c     **** 		ind = 0;
 1054              		.loc 1 169 3 is_stmt 1 view .LVU273
 169:src/prt.c     **** 		ind = 0;
 1055              		.loc 1 169 6 is_stmt 0 view .LVU274
 1056 0024 18B3     		cbz	r0, .L92
 169:src/prt.c     **** 		ind = 0;
 1057              		.loc 1 169 12 is_stmt 1 discriminator 1 view .LVU275
 173:src/prt.c     **** 		*scopy(instr, "\240" SPACE_AFTER_CMD) = arg;
 1058              		.loc 1 173 5 is_stmt 0 discriminator 1 view .LVU276
 1059 0026 242C     		cmp	r4, #36
 169:src/prt.c     **** 		ind = 0;
 1060              		.loc 1 169 16 discriminator 1 view .LVU277
 1061 0028 06F18006 		add	r6, r6, #128
 1062              	.LVL84:
 173:src/prt.c     **** 		*scopy(instr, "\240" SPACE_AFTER_CMD) = arg;
 1063              		.loc 1 173 2 is_stmt 1 discriminator 1 view .LVU278
 173:src/prt.c     **** 		*scopy(instr, "\240" SPACE_AFTER_CMD) = arg;
 1064              		.loc 1 173 5 is_stmt 0 discriminator 1 view .LVU279
 1065 002c 21D0     		beq	.L93
 1066              	.L143:
 176:src/prt.c     **** 		return "???";
 1067              		.loc 1 176 7 is_stmt 1 view .LVU280
 176:src/prt.c     **** 		return "???";
 1068              		.loc 1 176 10 is_stmt 0 view .LVU281
 1069 002e 962C     		cmp	r4, #150
ARM GAS  /tmp/ccgbU3q8.s 			page 29


 1070 0030 28D8     		bhi	.L117
 1071              	.LVL85:
 1072              	.L95:
 180:src/prt.c     **** 			return "???";
 1073              		.loc 1 180 3 is_stmt 1 view .LVU282
 180:src/prt.c     **** 			return "???";
 1074              		.loc 1 180 25 is_stmt 0 view .LVU283
 1075 0032 07EB0803 		add	r3, r7, r8
 1076 0036 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 180:src/prt.c     **** 			return "???";
 1077              		.loc 1 180 6 view .LVU284
 1078 0038 B342     		cmp	r3, r6
 1079 003a 23D3     		bcc	.L117
 183:src/prt.c     **** 		switch(cmd) {
 1080              		.loc 1 183 3 is_stmt 1 view .LVU285
 1081              	.LVL86:
 184:src/prt.c     **** 
 1082              		.loc 1 184 3 view .LVU286
 1083 003c 6C2C     		cmp	r4, #108
 1084 003e 00F08A80 		beq	.L98
 1085 0042 5CD8     		bhi	.L99
 1086 0044 002C     		cmp	r4, #0
 1087 0046 6BD0     		beq	.L118
 1088 0048 012C     		cmp	r4, #1
 1089 004a 6BD1     		bne	.L102
 187:src/prt.c     **** 		case RARG_CONST:
 1090              		.loc 1 187 4 view .LVU287
 187:src/prt.c     **** 		case RARG_CONST:
 1091              		.loc 1 187 6 is_stmt 0 view .LVU288
 1092 004c 2846     		mov	r0, r5
 1093              	.LVL87:
 187:src/prt.c     **** 		case RARG_CONST:
 1094              		.loc 1 187 9 view .LVU289
 1095 004e 1423     		movs	r3, #20
 1096 0050 00F8013B 		strb	r3, [r0], #1
 1097              	.LVL88:
 1098              	.L100:
 189:src/prt.c     **** 			return instr;
 1099              		.loc 1 189 4 is_stmt 1 view .LVU290
 1100 0054 4949     		ldr	r1, .L145+4
 1101              	.LVL89:
 189:src/prt.c     **** 			return instr;
 1102              		.loc 1 189 4 is_stmt 0 view .LVU291
 1103 0056 FFF7FEFF 		bl	scopy
 1104              	.LVL90:
 189:src/prt.c     **** 			return instr;
 1105              		.loc 1 189 52 view .LVU292
 1106 005a 4949     		ldr	r1, .L145+8
 1107 005c 06EB4606 		add	r6, r6, r6, lsl #1
 1108              	.LVL91:
 189:src/prt.c     **** 			return instr;
 1109              		.loc 1 189 4 view .LVU293
 1110 0060 01EB8601 		add	r1, r1, r6, lsl #2
 1111 0064 0422     		movs	r2, #4
 1112 0066 FFF7FEFF 		bl	sncopy
 1113              	.LVL92:
 190:src/prt.c     **** 
ARM GAS  /tmp/ccgbU3q8.s 			page 30


 1114              		.loc 1 190 4 is_stmt 1 view .LVU294
 190:src/prt.c     **** 
 1115              		.loc 1 190 11 is_stmt 0 view .LVU295
 1116 006a 2846     		mov	r0, r5
 1117 006c 0BE0     		b	.L90
 1118              	.LVL93:
 1119              	.L92:
 173:src/prt.c     **** 		*scopy(instr, "\240" SPACE_AFTER_CMD) = arg;
 1120              		.loc 1 173 2 is_stmt 1 view .LVU296
 173:src/prt.c     **** 		*scopy(instr, "\240" SPACE_AFTER_CMD) = arg;
 1121              		.loc 1 173 5 is_stmt 0 view .LVU297
 1122 006e 242C     		cmp	r4, #36
 1123 0070 DDD1     		bne	.L143
 1124              	.LVL94:
 1125              	.L93:
 174:src/prt.c     **** 	} 
 1126              		.loc 1 174 3 is_stmt 1 view .LVU298
 174:src/prt.c     **** 	} 
 1127              		.loc 1 174 4 is_stmt 0 view .LVU299
 1128 0072 4449     		ldr	r1, .L145+12
 1129              	.LVL95:
 174:src/prt.c     **** 	} 
 1130              		.loc 1 174 4 view .LVU300
 1131 0074 2846     		mov	r0, r5
 1132 0076 FFF7FEFF 		bl	scopy
 1133              	.LVL96:
 1134 007a 0346     		mov	r3, r0
 1135 007c 2846     		mov	r0, r5
 174:src/prt.c     **** 	} 
 1136              		.loc 1 174 41 view .LVU301
 1137 007e 1E70     		strb	r6, [r3]
 247:src/prt.c     **** 
 1138              		.loc 1 247 1 view .LVU302
 1139 0080 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1140              	.LVL97:
 1141              	.L117:
 177:src/prt.c     **** 
 1142              		.loc 1 177 10 view .LVU303
 1143 0084 4048     		ldr	r0, .L145+16
 1144              	.LVL98:
 1145              	.L90:
 247:src/prt.c     **** 
 1146              		.loc 1 247 1 view .LVU304
 1147 0086 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1148              	.LVL99:
 1149              	.L91:
 173:src/prt.c     **** 		*scopy(instr, "\240" SPACE_AFTER_CMD) = arg;
 1150              		.loc 1 173 2 is_stmt 1 view .LVU305
 173:src/prt.c     **** 		*scopy(instr, "\240" SPACE_AFTER_CMD) = arg;
 1151              		.loc 1 173 5 is_stmt 0 view .LVU306
 1152 008a 242C     		cmp	r4, #36
 1153 008c F1D0     		beq	.L93
 176:src/prt.c     **** 		return "???";
 1154              		.loc 1 176 7 is_stmt 1 view .LVU307
 176:src/prt.c     **** 		return "???";
 1155              		.loc 1 176 10 is_stmt 0 view .LVU308
 1156 008e 962C     		cmp	r4, #150
ARM GAS  /tmp/ccgbU3q8.s 			page 31


 1157 0090 F8D8     		bhi	.L117
 179:src/prt.c     **** 		if (arg > argcmds[cmd].lim)
 1158              		.loc 1 179 7 is_stmt 1 view .LVU309
 179:src/prt.c     **** 		if (arg > argcmds[cmd].lim)
 1159              		.loc 1 179 10 is_stmt 0 view .LVU310
 1160 0092 0028     		cmp	r0, #0
 1161 0094 CDD0     		beq	.L95
 220:src/prt.c     **** 			return "???";
 1162              		.loc 1 220 3 is_stmt 1 view .LVU311
 223:src/prt.c     **** 
 1163              		.loc 1 223 3 view .LVU312
 223:src/prt.c     **** 
 1164              		.loc 1 223 38 is_stmt 0 view .LVU313
 1165 0096 0622     		movs	r2, #6
 1166 0098 02EB0414 		add	r4, r2, r4, lsl #4
 1167              	.LVL100:
 223:src/prt.c     **** 
 1168              		.loc 1 223 7 view .LVU314
 1169 009c 0D23     		movs	r3, #13
 1170 009e 3919     		adds	r1, r7, r4
 1171              	.LVL101:
 223:src/prt.c     **** 
 1172              		.loc 1 223 7 view .LVU315
 1173 00a0 2846     		mov	r0, r5
 1174              	.LVL102:
 223:src/prt.c     **** 
 1175              		.loc 1 223 7 view .LVU316
 1176 00a2 FFF7FEFF 		bl	sncopy_char
 1177              	.LVL103:
 226:src/prt.c     **** #ifdef SHOW_COMPLEX_REGS
 1178              		.loc 1 226 23 view .LVU317
 1179 00a6 A6F16403 		sub	r3, r6, #100
 1180              	.LVL104:
 226:src/prt.c     **** #ifdef SHOW_COMPLEX_REGS
 1181              		.loc 1 226 3 is_stmt 1 view .LVU318
 226:src/prt.c     **** #ifdef SHOW_COMPLEX_REGS
 1182              		.loc 1 226 6 is_stmt 0 view .LVU319
 1183 00aa 0B2B     		cmp	r3, #11
 1184 00ac 22D9     		bls	.L107
 239:src/prt.c     **** 				arg -= LOCAL_REG_BASE;
 1185              		.loc 1 239 4 is_stmt 1 view .LVU320
 239:src/prt.c     **** 				arg -= LOCAL_REG_BASE;
 1186              		.loc 1 239 7 is_stmt 0 view .LVU321
 1187 00ae 6F2E     		cmp	r6, #111
 166:src/prt.c     **** 
 1188              		.loc 1 166 6 view .LVU322
 1189 00b0 4FF00202 		mov	r2, #2
 239:src/prt.c     **** 				arg -= LOCAL_REG_BASE;
 1190              		.loc 1 239 7 view .LVU323
 1191 00b4 03D9     		bls	.L109
 1192              	.LVL105:
 1193              	.L111:
 240:src/prt.c     **** 				*p++ = '.';
 1194              		.loc 1 240 5 is_stmt 1 view .LVU324
 241:src/prt.c     **** 			}
 1195              		.loc 1 241 10 is_stmt 0 view .LVU325
 1196 00b6 2E23     		movs	r3, #46
ARM GAS  /tmp/ccgbU3q8.s 			page 32


 1197 00b8 00F8013B 		strb	r3, [r0], #1
 240:src/prt.c     **** 				*p++ = '.';
 1198              		.loc 1 240 9 view .LVU326
 1199 00bc 703E     		subs	r6, r6, #112
 1200              	.LVL106:
 241:src/prt.c     **** 			}
 1201              		.loc 1 241 5 is_stmt 1 view .LVU327
 1202              	.L109:
 243:src/prt.c     **** 		}
 1203              		.loc 1 243 4 view .LVU328
 1204 00be 3146     		mov	r1, r6
 1205 00c0 FFF7FEFF 		bl	num_arg_0
 1206              	.LVL107:
 1207              	.L141:
 243:src/prt.c     **** 		}
 1208              		.loc 1 243 4 is_stmt 0 view .LVU329
 1209 00c4 2846     		mov	r0, r5
 247:src/prt.c     **** 
 1210              		.loc 1 247 1 view .LVU330
 1211 00c6 BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 1212              	.LVL108:
 1213              	.L105:
 214:src/prt.c     **** 				goto print_reg;
 1214              		.loc 1 214 5 is_stmt 1 view .LVU331
 1215              	.LBB80:
 1216              	.LBI80:
 140:src/prt.c     **** 	int lim = argcmds[cmd].lim;
 1217              		.loc 1 140 5 view .LVU332
 1218              	.LBB81:
 141:src/prt.c     **** 	if (lim < 10)
 1219              		.loc 1 141 2 view .LVU333
 141:src/prt.c     **** 	if (lim < 10)
 1220              		.loc 1 141 24 is_stmt 0 view .LVU334
 1221 00ca 07EB0803 		add	r3, r7, r8
 141:src/prt.c     **** 	if (lim < 10)
 1222              		.loc 1 141 6 view .LVU335
 1223 00ce 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1224              	.LVL109:
 142:src/prt.c     **** 		return 1;
 1225              		.loc 1 142 2 is_stmt 1 view .LVU336
 142:src/prt.c     **** 		return 1;
 1226              		.loc 1 142 5 is_stmt 0 view .LVU337
 1227 00d0 092B     		cmp	r3, #9
 1228 00d2 46DD     		ble	.L119
 144:src/prt.c     **** 		return 2;
 1229              		.loc 1 144 2 is_stmt 1 view .LVU338
 144:src/prt.c     **** 		return 2;
 1230              		.loc 1 144 5 is_stmt 0 view .LVU339
 1231 00d4 632B     		cmp	r3, #99
 1232 00d6 46DD     		ble	.L120
 1233 00d8 2046     		mov	r0, r4
 1234 00da FFF7FEFF 		bl	num_arg_digits.part.0
 1235              	.LVL110:
 144:src/prt.c     **** 		return 2;
 1236              		.loc 1 144 5 view .LVU340
 1237 00de 0246     		mov	r2, r0
 1238              	.L106:
ARM GAS  /tmp/ccgbU3q8.s 			page 33


 144:src/prt.c     **** 		return 2;
 1239              		.loc 1 144 5 view .LVU341
 1240              	.LBE81:
 1241              	.LBE80:
 226:src/prt.c     **** #ifdef SHOW_COMPLEX_REGS
 1242              		.loc 1 226 23 view .LVU342
 1243 00e0 A6F16403 		sub	r3, r6, #100
 226:src/prt.c     **** #ifdef SHOW_COMPLEX_REGS
 1244              		.loc 1 226 6 view .LVU343
 1245 00e4 0B2B     		cmp	r3, #11
 208:src/prt.c     **** #endif
 1246              		.loc 1 208 6 view .LVU344
 1247 00e6 09F10100 		add	r0, r9, #1
 1248              	.LVL111:
 226:src/prt.c     **** #ifdef SHOW_COMPLEX_REGS
 1249              		.loc 1 226 3 is_stmt 1 view .LVU345
 226:src/prt.c     **** #ifdef SHOW_COMPLEX_REGS
 1250              		.loc 1 226 6 is_stmt 0 view .LVU346
 1251 00ea 3ED8     		bhi	.L144
 226:src/prt.c     **** #ifdef SHOW_COMPLEX_REGS
 1252              		.loc 1 226 65 discriminator 2 view .LVU347
 1253 00ec 4744     		add	r7, r7, r8
 1254 00ee 7979     		ldrb	r1, [r7, #5]	@ zero_extendqisi2
 226:src/prt.c     **** #ifdef SHOW_COMPLEX_REGS
 1255              		.loc 1 226 50 discriminator 2 view .LVU348
 1256 00f0 4907     		lsls	r1, r1, #29
 1257 00f2 E4D5     		bpl	.L109
 1258              	.LVL112:
 1259              	.L107:
 236:src/prt.c     **** #endif
 1260              		.loc 1 236 4 is_stmt 1 view .LVU349
 236:src/prt.c     **** #endif
 1261              		.loc 1 236 17 is_stmt 0 view .LVU350
 1262 00f4 254A     		ldr	r2, .L145+20
 236:src/prt.c     **** #endif
 1263              		.loc 1 236 7 view .LVU351
 1264 00f6 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1265 00f8 0370     		strb	r3, [r0]
 1266 00fa 2846     		mov	r0, r5
 1267 00fc C3E7     		b	.L90
 1268              	.LVL113:
 1269              	.L99:
 184:src/prt.c     **** 
 1270              		.loc 1 184 3 view .LVU352
 1271 00fe 862C     		cmp	r4, #134
 1272 0100 10D1     		bne	.L102
 196:src/prt.c     **** 			for (n = 0; n < 4; n++) {
 1273              		.loc 1 196 4 is_stmt 1 view .LVU353
 196:src/prt.c     **** 			for (n = 0; n < 4; n++) {
 1274              		.loc 1 196 8 is_stmt 0 view .LVU354
 1275 0102 2349     		ldr	r1, .L145+24
 1276              	.LVL114:
 196:src/prt.c     **** 			for (n = 0; n < 4; n++) {
 1277              		.loc 1 196 8 view .LVU355
 1278 0104 2846     		mov	r0, r5
 1279 0106 FFF7FEFF 		bl	scopy
 1280              	.LVL115:
ARM GAS  /tmp/ccgbU3q8.s 			page 34


 197:src/prt.c     **** 				*p++ = REGNAMES[arg & 3];
 1281              		.loc 1 197 4 is_stmt 1 view .LVU356
 197:src/prt.c     **** 				*p++ = REGNAMES[arg & 3];
 1282              		.loc 1 197 16 view .LVU357
 1283 010a 2049     		ldr	r1, .L145+20
 1284 010c 021D     		adds	r2, r0, #4
 1285              	.L104:
 198:src/prt.c     **** 				arg >>= 2;
 1286              		.loc 1 198 5 discriminator 3 view .LVU358
 1287              	.LVL116:
 198:src/prt.c     **** 				arg >>= 2;
 1288              		.loc 1 198 25 is_stmt 0 discriminator 3 view .LVU359
 1289 010e 06F00303 		and	r3, r6, #3
 199:src/prt.c     **** 			}
 1290              		.loc 1 199 9 discriminator 3 view .LVU360
 1291 0112 B608     		lsrs	r6, r6, #2
 1292              	.LVL117:
 198:src/prt.c     **** 				arg >>= 2;
 1293              		.loc 1 198 10 discriminator 3 view .LVU361
 1294 0114 CB5C     		ldrb	r3, [r1, r3]	@ zero_extendqisi2
 1295 0116 00F8013B 		strb	r3, [r0], #1
 1296              	.LVL118:
 199:src/prt.c     **** 			}
 1297              		.loc 1 199 5 is_stmt 1 discriminator 3 view .LVU362
 197:src/prt.c     **** 				*p++ = REGNAMES[arg & 3];
 1298              		.loc 1 197 23 discriminator 3 view .LVU363
 197:src/prt.c     **** 				*p++ = REGNAMES[arg & 3];
 1299              		.loc 1 197 16 discriminator 3 view .LVU364
 197:src/prt.c     **** 				*p++ = REGNAMES[arg & 3];
 1300              		.loc 1 197 4 is_stmt 0 discriminator 3 view .LVU365
 1301 011a 8242     		cmp	r2, r0
 1302 011c F7D1     		bne	.L104
 1303 011e D1E7     		b	.L141
 1304              	.LVL119:
 1305              	.L118:
 184:src/prt.c     **** 
 1306              		.loc 1 184 3 view .LVU366
 1307 0120 2846     		mov	r0, r5
 1308 0122 97E7     		b	.L100
 1309              	.L102:
 207:src/prt.c     **** 			*p++ = '\006';
 1310              		.loc 1 207 4 is_stmt 1 view .LVU367
 207:src/prt.c     **** 			*p++ = '\006';
 1311              		.loc 1 207 39 is_stmt 0 view .LVU368
 1312 0124 4FF0060A 		mov	r10, #6
 1313 0128 0AEB0411 		add	r1, r10, r4, lsl #4
 1314              	.LVL120:
 207:src/prt.c     **** 			*p++ = '\006';
 1315              		.loc 1 207 8 view .LVU369
 1316 012c 5346     		mov	r3, r10
 1317 012e 3944     		add	r1, r1, r7
 1318 0130 5246     		mov	r2, r10
 1319 0132 2846     		mov	r0, r5
 1320 0134 FFF7FEFF 		bl	sncopy_char
 1321              	.LVL121:
 210:src/prt.c     **** 				*p = arg - 100 + 'A';
 1322              		.loc 1 210 20 view .LVU370
ARM GAS  /tmp/ccgbU3q8.s 			page 35


 1323 0138 07EB0803 		add	r3, r7, r8
 207:src/prt.c     **** 			*p++ = '\006';
 1324              		.loc 1 207 8 view .LVU371
 1325 013c 8146     		mov	r9, r0
 1326              	.LVL122:
 208:src/prt.c     **** #endif
 1327              		.loc 1 208 4 is_stmt 1 view .LVU372
 210:src/prt.c     **** 				*p = arg - 100 + 'A';
 1328              		.loc 1 210 20 is_stmt 0 view .LVU373
 1329 013e 5B79     		ldrb	r3, [r3, #5]	@ zero_extendqisi2
 208:src/prt.c     **** #endif
 1330              		.loc 1 208 9 view .LVU374
 1331 0140 80F800A0 		strb	r10, [r0]
 210:src/prt.c     **** 				*p = arg - 100 + 'A';
 1332              		.loc 1 210 4 is_stmt 1 view .LVU375
 210:src/prt.c     **** 				*p = arg - 100 + 'A';
 1333              		.loc 1 210 7 is_stmt 0 view .LVU376
 1334 0144 9806     		lsls	r0, r3, #26
 1335              	.LVL123:
 210:src/prt.c     **** 				*p = arg - 100 + 'A';
 1336              		.loc 1 210 7 view .LVU377
 1337 0146 C0D5     		bpl	.L105
 210:src/prt.c     **** 				*p = arg - 100 + 'A';
 1338              		.loc 1 210 27 discriminator 1 view .LVU378
 1339 0148 632E     		cmp	r6, #99
 1340 014a BED9     		bls	.L105
 211:src/prt.c     **** 			}
 1341              		.loc 1 211 5 is_stmt 1 view .LVU379
 211:src/prt.c     **** 			}
 1342              		.loc 1 211 20 is_stmt 0 view .LVU380
 1343 014c 233E     		subs	r6, r6, #35
 1344              	.LVL124:
 211:src/prt.c     **** 			}
 1345              		.loc 1 211 8 view .LVU381
 1346 014e 89F80160 		strb	r6, [r9, #1]
 1347 0152 2846     		mov	r0, r5
 1348 0154 97E7     		b	.L90
 1349              	.LVL125:
 1350              	.L98:
 193:src/prt.c     **** 
 1351              		.loc 1 193 4 is_stmt 1 view .LVU382
 193:src/prt.c     **** 
 1352              		.loc 1 193 11 is_stmt 0 view .LVU383
 1353 0156 2946     		mov	r1, r5
 1354              	.LVL126:
 193:src/prt.c     **** 
 1355              		.loc 1 193 11 view .LVU384
 1356 0158 3046     		mov	r0, r6
 247:src/prt.c     **** 
 1357              		.loc 1 247 1 view .LVU385
 1358 015a BDE8F047 		pop	{r4, r5, r6, r7, r8, r9, r10, lr}
 1359              		.cfi_remember_state
 1360              		.cfi_restore 14
 1361              		.cfi_restore 10
 1362              		.cfi_restore 9
 1363              		.cfi_restore 8
 1364              		.cfi_restore 7
ARM GAS  /tmp/ccgbU3q8.s 			page 36


 1365              		.cfi_restore 6
 1366              		.cfi_restore 5
 1367              		.cfi_restore 4
 1368              		.cfi_def_cfa_offset 0
 1369              	.LVL127:
 193:src/prt.c     **** 
 1370              		.loc 1 193 11 view .LVU386
 1371 015e FFF7FEBF 		b	prt_conv
 1372              	.LVL128:
 1373              	.L119:
 1374              		.cfi_restore_state
 1375              	.LBB83:
 1376              	.LBB82:
 143:src/prt.c     **** 	if (lim < 100)
 1377              		.loc 1 143 10 view .LVU387
 1378 0162 0122     		movs	r2, #1
 1379 0164 BCE7     		b	.L106
 1380              	.L120:
 145:src/prt.c     **** #ifdef COMPILE_CATALOGUES
 1381              		.loc 1 145 10 view .LVU388
 1382 0166 0222     		movs	r2, #2
 1383 0168 BAE7     		b	.L106
 1384              	.LVL129:
 1385              	.L144:
 145:src/prt.c     **** #ifdef COMPILE_CATALOGUES
 1386              		.loc 1 145 10 view .LVU389
 1387              	.LBE82:
 1388              	.LBE83:
 239:src/prt.c     **** 				arg -= LOCAL_REG_BASE;
 1389              		.loc 1 239 4 is_stmt 1 view .LVU390
 239:src/prt.c     **** 				arg -= LOCAL_REG_BASE;
 1390              		.loc 1 239 7 is_stmt 0 view .LVU391
 1391 016a 6F2E     		cmp	r6, #111
 1392 016c A7D9     		bls	.L109
 239:src/prt.c     **** 				arg -= LOCAL_REG_BASE;
 1393              		.loc 1 239 53 discriminator 2 view .LVU392
 1394 016e 4744     		add	r7, r7, r8
 1395 0170 7B79     		ldrb	r3, [r7, #5]	@ zero_extendqisi2
 239:src/prt.c     **** 				arg -= LOCAL_REG_BASE;
 1396              		.loc 1 239 38 discriminator 2 view .LVU393
 1397 0172 1B07     		lsls	r3, r3, #28
 1398 0174 A3D5     		bpl	.L109
 1399 0176 9EE7     		b	.L111
 1400              	.L146:
 1401              		.align	2
 1402              	.L145:
 1403 0178 00000000 		.word	argcmds
 1404 017c 04000000 		.word	.LC10
 1405 0180 01000000 		.word	cnsts+1
 1406 0184 00000000 		.word	.LC9
 1407 0188 00000000 		.word	.LC0
 1408 018c 0C000000 		.word	.LC12
 1409 0190 08000000 		.word	.LC11
 1410              		.cfi_endproc
 1411              	.LFE11:
 1413              		.section	.text.num_arg_digits,"ax",%progbits
 1414              		.align	1
ARM GAS  /tmp/ccgbU3q8.s 			page 37


 1415              		.p2align 2,,3
 1416              		.global	num_arg_digits
 1417              		.syntax unified
 1418              		.thumb
 1419              		.thumb_func
 1420              		.fpu fpv4-sp-d16
 1422              	num_arg_digits:
 1423              	.LVL130:
 1424              	.LFB10:
 140:src/prt.c     **** 	int lim = argcmds[cmd].lim;
 1425              		.loc 1 140 29 is_stmt 1 view -0
 1426              		.cfi_startproc
 1427              		@ args = 0, pretend = 0, frame = 0
 1428              		@ frame_needed = 0, uses_anonymous_args = 0
 1429              		@ link register save eliminated.
 141:src/prt.c     **** 	if (lim < 10)
 1430              		.loc 1 141 2 view .LVU395
 141:src/prt.c     **** 	if (lim < 10)
 1431              		.loc 1 141 24 is_stmt 0 view .LVU396
 1432 0000 064B     		ldr	r3, .L151
 1433 0002 03EB0013 		add	r3, r3, r0, lsl #4
 141:src/prt.c     **** 	if (lim < 10)
 1434              		.loc 1 141 6 view .LVU397
 1435 0006 1B79     		ldrb	r3, [r3, #4]	@ zero_extendqisi2
 1436              	.LVL131:
 142:src/prt.c     **** 		return 1;
 1437              		.loc 1 142 2 is_stmt 1 view .LVU398
 142:src/prt.c     **** 		return 1;
 1438              		.loc 1 142 5 is_stmt 0 view .LVU399
 1439 0008 092B     		cmp	r3, #9
 1440 000a 03DD     		ble	.L149
 144:src/prt.c     **** 		return 2;
 1441              		.loc 1 144 2 is_stmt 1 view .LVU400
 144:src/prt.c     **** 		return 2;
 1442              		.loc 1 144 5 is_stmt 0 view .LVU401
 1443 000c 632B     		cmp	r3, #99
 1444 000e 03DD     		ble	.L150
 1445 0010 FFF7FEBF 		b	num_arg_digits.part.0
 1446              	.LVL132:
 1447              	.L149:
 143:src/prt.c     **** 	if (lim < 100)
 1448              		.loc 1 143 10 view .LVU402
 1449 0014 0120     		movs	r0, #1
 1450              	.LVL133:
 143:src/prt.c     **** 	if (lim < 100)
 1451              		.loc 1 143 10 view .LVU403
 1452 0016 7047     		bx	lr
 1453              	.LVL134:
 1454              	.L150:
 145:src/prt.c     **** #ifdef COMPILE_CATALOGUES
 1455              		.loc 1 145 10 view .LVU404
 1456 0018 0220     		movs	r0, #2
 1457              	.LVL135:
 153:src/prt.c     **** 
 1458              		.loc 1 153 1 view .LVU405
 1459 001a 7047     		bx	lr
 1460              	.L152:
ARM GAS  /tmp/ccgbU3q8.s 			page 38


 1461              		.align	2
 1462              	.L151:
 1463 001c 00000000 		.word	argcmds
 1464              		.cfi_endproc
 1465              	.LFE10:
 1467              		.section	.text.prt,"ax",%progbits
 1468              		.align	1
 1469              		.p2align 2,,3
 1470              		.global	prt
 1471              		.syntax unified
 1472              		.thumb
 1473              		.thumb_func
 1474              		.fpu fpv4-sp-d16
 1476              	prt:
 1477              	.LVL136:
 1478              	.LFB14:
 267:src/prt.c     **** 
 268:src/prt.c     **** static const char *prt_multi_umen(const opcode op, char *instr) {
 269:src/prt.c     **** 	char *p, c;
 270:src/prt.c     **** 	int cmd = opDBL(op);
 271:src/prt.c     **** 
 272:src/prt.c     **** 	if (cmd >= NUM_MULTI)
 273:src/prt.c     **** 		return "???";
 274:src/prt.c     **** 	switch (cmd) {
 275:src/prt.c     **** 	case DBL_XEQ:
 276:src/prt.c     **** 	  p = sncopy_char(instr, "XQ", NAME_LEN, '\'');
 277:src/prt.c     **** 	  break;
 278:src/prt.c     **** 	case DBL_GTO:
 279:src/prt.c     **** 	  p = sncopy_char(instr, "GT", NAME_LEN, '\'');
 280:src/prt.c     **** 	  break;
 281:src/prt.c     **** 	case DBL_SOLVE:
 282:src/prt.c     **** 	  p = sncopy_char(instr, "SL", NAME_LEN, '\'');
 283:src/prt.c     **** 	  break;
 284:src/prt.c     **** 	default:
 285:src/prt.c     **** 	  p = sncopy_char(instr, multicmds[cmd].cmd, NAME_LEN, '\'');
 286:src/prt.c     **** 	}
 287:src/prt.c     **** 	  *p++ = op & 0xff;
 288:src/prt.c     **** 	c = (op >> 16) & 0xff;
 289:src/prt.c     **** 	if (c != '\0') {
 290:src/prt.c     **** 		*p++ = c;
 291:src/prt.c     **** 		c = op>>24;
 292:src/prt.c     **** 		if (c != '\0')
 293:src/prt.c     **** 			*p++ = c;
 294:src/prt.c     **** 	}
 295:src/prt.c     **** 	return instr;
 296:src/prt.c     **** }
 297:src/prt.c     **** 
 298:src/prt.c     **** const char *prt(opcode op, char *instr) {
 1479              		.loc 1 298 41 is_stmt 1 view -0
 1480              		.cfi_startproc
 1481              		@ args = 0, pretend = 0, frame = 0
 1482              		@ frame_needed = 0, uses_anonymous_args = 0
 299:src/prt.c     **** 	unsigned int arg;
 1483              		.loc 1 299 2 view .LVU407
 300:src/prt.c     **** 	xset(instr, '\0', 16);
 1484              		.loc 1 300 2 view .LVU408
 298:src/prt.c     **** 	unsigned int arg;
ARM GAS  /tmp/ccgbU3q8.s 			page 39


 1485              		.loc 1 298 41 is_stmt 0 view .LVU409
 1486 0000 38B5     		push	{r3, r4, r5, lr}
 1487              		.cfi_def_cfa_offset 16
 1488              		.cfi_offset 3, -16
 1489              		.cfi_offset 4, -12
 1490              		.cfi_offset 5, -8
 1491              		.cfi_offset 14, -4
 1492              		.loc 1 300 2 view .LVU410
 1493 0002 1022     		movs	r2, #16
 298:src/prt.c     **** 	unsigned int arg;
 1494              		.loc 1 298 41 view .LVU411
 1495 0004 0446     		mov	r4, r0
 1496 0006 0D46     		mov	r5, r1
 1497              		.loc 1 300 2 view .LVU412
 1498 0008 0846     		mov	r0, r1
 1499              	.LVL137:
 1500              		.loc 1 300 2 view .LVU413
 1501 000a 0021     		movs	r1, #0
 1502              	.LVL138:
 1503              		.loc 1 300 2 view .LVU414
 1504 000c FFF7FEFF 		bl	xset
 1505              	.LVL139:
 301:src/prt.c     **** 	if (isDBL(op))
 1506              		.loc 1 301 2 is_stmt 1 view .LVU415
 1507              		.loc 1 301 6 is_stmt 0 view .LVU416
 1508 0010 04F47043 		and	r3, r4, #61440
 1509              		.loc 1 301 5 view .LVU417
 1510 0014 B3F5704F 		cmp	r3, #61440
 1511 0018 4DD0     		beq	.L182
 302:src/prt.c     **** 		return prt_multi(op, instr);
 303:src/prt.c     **** 	if (isRARG(op))
 1512              		.loc 1 303 2 is_stmt 1 view .LVU418
 1513              		.loc 1 303 5 is_stmt 0 view .LVU419
 1514 001a 002B     		cmp	r3, #0
 1515 001c 45D1     		bne	.L183
 304:src/prt.c     **** 		return prt_rargs(op, instr);
 305:src/prt.c     **** 	arg = argKIND(op);
 1516              		.loc 1 305 2 is_stmt 1 view .LVU420
 1517 001e C4F30723 		ubfx	r3, r4, #8, #8
 1518              		.loc 1 305 6 is_stmt 0 view .LVU421
 1519 0022 E4B2     		uxtb	r4, r4
 1520              	.LVL140:
 306:src/prt.c     **** 	switch (opKIND(op)) {
 1521              		.loc 1 306 2 is_stmt 1 view .LVU422
 1522 0024 062B     		cmp	r3, #6
 1523 0026 14D8     		bhi	.L174
 1524 0028 DFE803F0 		tbb	[pc, r3]
 1525              	.L158:
 1526 002c 08       		.byte	(.L164-.L158)/2
 1527 002d 11       		.byte	(.L163-.L158)/2
 1528 002e 15       		.byte	(.L162-.L158)/2
 1529 002f 1B       		.byte	(.L161-.L158)/2
 1530 0030 21       		.byte	(.L160-.L158)/2
 1531 0031 27       		.byte	(.L159-.L158)/2
 1532 0032 04       		.byte	(.L157-.L158)/2
 1533 0033 00       		.p2align 1
 1534              	.L157:
ARM GAS  /tmp/ccgbU3q8.s 			page 40


 307:src/prt.c     **** 	case KIND_SPEC:	return prt_specials(arg, instr);
 308:src/prt.c     **** 	case KIND_NIL:	return prt_niladic(arg, instr);
 309:src/prt.c     **** 	case KIND_MON:	return prt_monadic(arg, instr);
 310:src/prt.c     **** 	case KIND_DYA:	return prt_dyadic(arg, instr);
 311:src/prt.c     **** 	case KIND_TRI:	return prt_triadic(arg, instr);
 312:src/prt.c     **** 	case KIND_CMON:	return prt_monadic_cmplx(arg, instr);
 313:src/prt.c     **** 	case KIND_CDYA:	return prt_dyadic_cmplx(arg, instr);
 1535              		.loc 1 313 18 view .LVU423
 1536              	.LVL141:
 1537              	.LBB103:
 1538              	.LBI103:
  55:src/prt.c     **** 	if (f < NUM_DYADIC && ! isNULL(dyfuncs[f].dydcmplx))
 1539              		.loc 1 55 20 view .LVU424
 1540              	.LBB104:
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 1541              		.loc 1 56 2 view .LVU425
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 1542              		.loc 1 56 5 is_stmt 0 view .LVU426
 1543 0034 342C     		cmp	r4, #52
 1544 0036 0CD8     		bhi	.L174
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 1545              		.loc 1 56 26 view .LVU427
 1546 0038 2949     		ldr	r1, .L186
 1547 003a 21E0     		b	.L181
 1548              	.LVL142:
 1549              	.L164:
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 1550              		.loc 1 56 26 view .LVU428
 1551              	.LBE104:
 1552              	.LBE103:
 307:src/prt.c     **** 	case KIND_SPEC:	return prt_specials(arg, instr);
 1553              		.loc 1 307 18 is_stmt 1 view .LVU429
 1554              	.LBB112:
 1555              	.LBI112:
  80:src/prt.c     **** 	static const char digits[16] = "0123456789ABCDEF";
 1556              		.loc 1 80 20 view .LVU430
 1557              	.LBB113:
  81:src/prt.c     **** 	char cmp = '0';
 1558              		.loc 1 81 2 view .LVU431
  82:src/prt.c     **** 
 1559              		.loc 1 82 2 view .LVU432
  84:src/prt.c     **** 		*instr = digits[opm - OP_0];
 1560              		.loc 1 84 2 view .LVU433
  84:src/prt.c     **** 		*instr = digits[opm - OP_0];
 1561              		.loc 1 84 18 is_stmt 0 view .LVU434
 1562 003c 631F     		subs	r3, r4, #5
  84:src/prt.c     **** 		*instr = digits[opm - OP_0];
 1563              		.loc 1 84 5 view .LVU435
 1564 003e 0F2B     		cmp	r3, #15
 1565 0040 3FD9     		bls	.L184
 1566 0042 2946     		mov	r1, r5
 1567 0044 2046     		mov	r0, r4
 1568              	.LBE113:
 1569              	.LBE112:
 314:src/prt.c     **** 	}
 315:src/prt.c     **** 	return "???";
 316:src/prt.c     **** }
ARM GAS  /tmp/ccgbU3q8.s 			page 41


 1570              		.loc 1 316 1 view .LVU436
 1571 0046 BDE83840 		pop	{r3, r4, r5, lr}
 1572              		.cfi_remember_state
 1573              		.cfi_restore 14
 1574              		.cfi_restore 5
 1575              		.cfi_restore 4
 1576              		.cfi_restore 3
 1577              		.cfi_def_cfa_offset 0
 1578              	.LVL143:
 1579              	.LBB116:
 1580              	.LBB114:
 1581              		.loc 1 316 1 view .LVU437
 1582 004a FFF7FEBF 		b	prt_specials.part.0
 1583              	.LVL144:
 1584              	.L163:
 1585              		.cfi_restore_state
 1586              		.loc 1 316 1 view .LVU438
 1587              	.LBE114:
 1588              	.LBE116:
 308:src/prt.c     **** 	case KIND_MON:	return prt_monadic(arg, instr);
 1589              		.loc 1 308 17 is_stmt 1 view .LVU439
 1590              	.LBB117:
 1591              	.LBI117:
  61:src/prt.c     **** 	if (idx < NUM_NILADIC) {
 1592              		.loc 1 61 20 view .LVU440
 1593              	.LBB118:
  62:src/prt.c     **** 		const char *p = niladics[idx].nname;
 1594              		.loc 1 62 2 view .LVU441
  62:src/prt.c     **** 		const char *p = niladics[idx].nname;
 1595              		.loc 1 62 5 is_stmt 0 view .LVU442
 1596 004e DA2C     		cmp	r4, #218
 1597 0050 3CD9     		bls	.L185
 1598              	.LVL145:
 1599              	.L174:
  66:src/prt.c     **** }
 1600              		.loc 1 66 9 view .LVU443
 1601 0052 2448     		ldr	r0, .L186+4
 1602              	.LBE118:
 1603              	.LBE117:
 1604              		.loc 1 316 1 view .LVU444
 1605 0054 38BD     		pop	{r3, r4, r5, pc}
 1606              	.LVL146:
 1607              	.L162:
 309:src/prt.c     **** 	case KIND_DYA:	return prt_dyadic(arg, instr);
 1608              		.loc 1 309 17 is_stmt 1 view .LVU445
 309:src/prt.c     **** 	case KIND_DYA:	return prt_dyadic(arg, instr);
 1609              		.loc 1 309 24 is_stmt 0 view .LVU446
 1610 0056 2946     		mov	r1, r5
 1611 0058 2046     		mov	r0, r4
 1612              		.loc 1 316 1 view .LVU447
 1613 005a BDE83840 		pop	{r3, r4, r5, lr}
 1614              		.cfi_remember_state
 1615              		.cfi_restore 14
 1616              		.cfi_restore 5
 1617              		.cfi_restore 4
 1618              		.cfi_restore 3
 1619              		.cfi_def_cfa_offset 0
ARM GAS  /tmp/ccgbU3q8.s 			page 42


 1620              	.LVL147:
 309:src/prt.c     **** 	case KIND_DYA:	return prt_dyadic(arg, instr);
 1621              		.loc 1 309 24 view .LVU448
 1622 005e FFF7FEBF 		b	prt_monadic
 1623              	.LVL148:
 1624              	.L161:
 1625              		.cfi_restore_state
 310:src/prt.c     **** 	case KIND_TRI:	return prt_triadic(arg, instr);
 1626              		.loc 1 310 17 is_stmt 1 view .LVU449
 310:src/prt.c     **** 	case KIND_TRI:	return prt_triadic(arg, instr);
 1627              		.loc 1 310 24 is_stmt 0 view .LVU450
 1628 0062 2946     		mov	r1, r5
 1629 0064 2046     		mov	r0, r4
 1630              		.loc 1 316 1 view .LVU451
 1631 0066 BDE83840 		pop	{r3, r4, r5, lr}
 1632              		.cfi_remember_state
 1633              		.cfi_restore 14
 1634              		.cfi_restore 5
 1635              		.cfi_restore 4
 1636              		.cfi_restore 3
 1637              		.cfi_def_cfa_offset 0
 1638              	.LVL149:
 310:src/prt.c     **** 	case KIND_TRI:	return prt_triadic(arg, instr);
 1639              		.loc 1 310 24 view .LVU452
 1640 006a FFF7FEBF 		b	prt_dyadic
 1641              	.LVL150:
 1642              	.L160:
 1643              		.cfi_restore_state
 311:src/prt.c     **** 	case KIND_CMON:	return prt_monadic_cmplx(arg, instr);
 1644              		.loc 1 311 17 is_stmt 1 view .LVU453
 311:src/prt.c     **** 	case KIND_CMON:	return prt_monadic_cmplx(arg, instr);
 1645              		.loc 1 311 24 is_stmt 0 view .LVU454
 1646 006e 2946     		mov	r1, r5
 1647 0070 2046     		mov	r0, r4
 1648              		.loc 1 316 1 view .LVU455
 1649 0072 BDE83840 		pop	{r3, r4, r5, lr}
 1650              		.cfi_remember_state
 1651              		.cfi_restore 14
 1652              		.cfi_restore 5
 1653              		.cfi_restore 4
 1654              		.cfi_restore 3
 1655              		.cfi_def_cfa_offset 0
 1656              	.LVL151:
 311:src/prt.c     **** 	case KIND_CMON:	return prt_monadic_cmplx(arg, instr);
 1657              		.loc 1 311 24 view .LVU456
 1658 0076 FFF7FEBF 		b	prt_triadic
 1659              	.LVL152:
 1660              	.L159:
 1661              		.cfi_restore_state
 312:src/prt.c     **** 	case KIND_CDYA:	return prt_dyadic_cmplx(arg, instr);
 1662              		.loc 1 312 18 is_stmt 1 view .LVU457
 1663              	.LBB125:
 1664              	.LBI125:
  49:src/prt.c     **** 	if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondcmplx))
 1665              		.loc 1 49 20 view .LVU458
 1666              	.LBB126:
  50:src/prt.c     **** 		return prt_cmplx(! isNULL(monfuncs[f].mondreal), monfuncs[f].fname, instr);
ARM GAS  /tmp/ccgbU3q8.s 			page 43


 1667              		.loc 1 50 2 view .LVU459
  50:src/prt.c     **** 		return prt_cmplx(! isNULL(monfuncs[f].mondreal), monfuncs[f].fname, instr);
 1668              		.loc 1 50 5 is_stmt 0 view .LVU460
 1669 007a 9B2C     		cmp	r4, #155
 1670 007c E9D8     		bhi	.L174
  50:src/prt.c     **** 		return prt_cmplx(! isNULL(monfuncs[f].mondreal), monfuncs[f].fname, instr);
 1671              		.loc 1 50 27 view .LVU461
 1672 007e 1A49     		ldr	r1, .L186+8
 1673              	.LVL153:
 1674              	.L181:
  50:src/prt.c     **** 		return prt_cmplx(! isNULL(monfuncs[f].mondreal), monfuncs[f].fname, instr);
 1675              		.loc 1 50 27 view .LVU462
 1676              	.LBE126:
 1677              	.LBE125:
 1678              	.LBB127:
 1679              	.LBB111:
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 1680              		.loc 1 56 26 view .LVU463
 1681 0080 04EB4404 		add	r4, r4, r4, lsl #1
 1682              	.LVL154:
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 1683              		.loc 1 56 26 view .LVU464
 1684 0084 01EBC403 		add	r3, r1, r4, lsl #3
 1685 0088 E400     		lsls	r4, r4, #3
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 1686              		.loc 1 56 21 view .LVU465
 1687 008a 5B68     		ldr	r3, [r3, #4]
 1688 008c 002B     		cmp	r3, #0
 1689 008e E0D0     		beq	.L174
 1690              	.LVL155:
 1691              	.LBB105:
 1692              	.LBI105:
  55:src/prt.c     **** 	if (f < NUM_DYADIC && ! isNULL(dyfuncs[f].dydcmplx))
 1693              		.loc 1 55 20 is_stmt 1 view .LVU466
 1694              	.LBB106:
  57:src/prt.c     **** 	return "???";
 1695              		.loc 1 57 3 view .LVU467
 1696              	.LBB107:
 1697              	.LBB108:
  43:src/prt.c     **** 		*p++ = COMPLEX_PREFIX;
 1698              		.loc 1 43 5 is_stmt 0 view .LVU468
 1699 0090 0B59     		ldr	r3, [r1, r4]
 1700              	.LBE108:
 1701              	.LBE107:
  57:src/prt.c     **** 	return "???";
 1702              		.loc 1 57 60 view .LVU469
 1703 0092 0C34     		adds	r4, r4, #12
 1704 0094 2144     		add	r1, r1, r4
 1705              	.LVL156:
 1706              	.LBB110:
 1707              	.LBI107:
  41:src/prt.c     **** 	char *p = instr;
 1708              		.loc 1 41 20 is_stmt 1 view .LVU470
 1709              	.LBB109:
  42:src/prt.c     **** 	if (add_prefix)
 1710              		.loc 1 42 2 view .LVU471
  43:src/prt.c     **** 		*p++ = COMPLEX_PREFIX;
ARM GAS  /tmp/ccgbU3q8.s 			page 44


 1711              		.loc 1 43 2 view .LVU472
  44:src/prt.c     **** 	sncopy(p, name, NAME_LEN);
 1712              		.loc 1 44 5 is_stmt 0 view .LVU473
 1713 0096 2846     		mov	r0, r5
  43:src/prt.c     **** 		*p++ = COMPLEX_PREFIX;
 1714              		.loc 1 43 5 view .LVU474
 1715 0098 13B1     		cbz	r3, .L167
 1716              	.LVL157:
  44:src/prt.c     **** 	sncopy(p, name, NAME_LEN);
 1717              		.loc 1 44 3 is_stmt 1 view .LVU475
  44:src/prt.c     **** 	sncopy(p, name, NAME_LEN);
 1718              		.loc 1 44 8 is_stmt 0 view .LVU476
 1719 009a 1423     		movs	r3, #20
 1720 009c 00F8013B 		strb	r3, [r0], #1
 1721              	.LVL158:
 1722              	.L167:
  45:src/prt.c     **** 	return instr;
 1723              		.loc 1 45 2 is_stmt 1 view .LVU477
 1724 00a0 0622     		movs	r2, #6
 1725 00a2 FFF7FEFF 		bl	sncopy
 1726              	.LVL159:
  46:src/prt.c     **** }
 1727              		.loc 1 46 2 view .LVU478
  45:src/prt.c     **** 	return instr;
 1728              		.loc 1 45 2 is_stmt 0 view .LVU479
 1729 00a6 2846     		mov	r0, r5
 1730              	.LBE109:
 1731              	.LBE110:
 1732              	.LBE106:
 1733              	.LBE105:
 1734              	.LBE111:
 1735              	.LBE127:
 1736              		.loc 1 316 1 view .LVU480
 1737 00a8 38BD     		pop	{r3, r4, r5, pc}
 1738              	.LVL160:
 1739              	.L183:
 304:src/prt.c     **** 	arg = argKIND(op);
 1740              		.loc 1 304 3 is_stmt 1 view .LVU481
 304:src/prt.c     **** 	arg = argKIND(op);
 1741              		.loc 1 304 10 is_stmt 0 view .LVU482
 1742 00aa 2946     		mov	r1, r5
 1743 00ac 2046     		mov	r0, r4
 1744              		.loc 1 316 1 view .LVU483
 1745 00ae BDE83840 		pop	{r3, r4, r5, lr}
 1746              		.cfi_remember_state
 1747              		.cfi_restore 14
 1748              		.cfi_restore 5
 1749              		.cfi_restore 4
 1750              		.cfi_restore 3
 1751              		.cfi_def_cfa_offset 0
 1752              	.LVL161:
 304:src/prt.c     **** 	arg = argKIND(op);
 1753              		.loc 1 304 10 view .LVU484
 1754 00b2 FFF7FEBF 		b	prt_rargs
 1755              	.LVL162:
 1756              	.L182:
 1757              		.cfi_restore_state
ARM GAS  /tmp/ccgbU3q8.s 			page 45


 302:src/prt.c     **** 	if (isRARG(op))
 1758              		.loc 1 302 3 is_stmt 1 view .LVU485
 302:src/prt.c     **** 	if (isRARG(op))
 1759              		.loc 1 302 10 is_stmt 0 view .LVU486
 1760 00b6 2946     		mov	r1, r5
 1761 00b8 2046     		mov	r0, r4
 1762              		.loc 1 316 1 view .LVU487
 1763 00ba BDE83840 		pop	{r3, r4, r5, lr}
 1764              		.cfi_remember_state
 1765              		.cfi_restore 14
 1766              		.cfi_restore 5
 1767              		.cfi_restore 4
 1768              		.cfi_restore 3
 1769              		.cfi_def_cfa_offset 0
 1770              	.LVL163:
 302:src/prt.c     **** 	if (isRARG(op))
 1771              		.loc 1 302 10 view .LVU488
 1772 00be FFF7FEBF 		b	prt_multi
 1773              	.LVL164:
 1774              	.L184:
 1775              		.cfi_restore_state
 1776              	.LBB128:
 1777              	.LBB115:
  85:src/prt.c     **** 		return instr;
 1778              		.loc 1 85 3 is_stmt 1 view .LVU489
  85:src/prt.c     **** 		return instr;
 1779              		.loc 1 85 18 is_stmt 0 view .LVU490
 1780 00c2 0A4A     		ldr	r2, .L186+12
  85:src/prt.c     **** 		return instr;
 1781              		.loc 1 85 10 view .LVU491
 1782 00c4 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 1783 00c6 2B70     		strb	r3, [r5]
  86:src/prt.c     **** 	}
 1784              		.loc 1 86 3 is_stmt 1 view .LVU492
  86:src/prt.c     **** 	}
 1785              		.loc 1 86 10 is_stmt 0 view .LVU493
 1786 00c8 2846     		mov	r0, r5
 1787              	.LBE115:
 1788              	.LBE128:
 1789              		.loc 1 316 1 view .LVU494
 1790 00ca 38BD     		pop	{r3, r4, r5, pc}
 1791              	.LVL165:
 1792              	.L185:
 1793              	.LBB129:
 1794              	.LBB123:
 1795              	.LBB119:
 1796              	.LBI119:
  61:src/prt.c     **** 	if (idx < NUM_NILADIC) {
 1797              		.loc 1 61 20 is_stmt 1 view .LVU495
 1798              	.LBB120:
  63:src/prt.c     **** 		return sncopy(instr, p, NAME_LEN);
 1799              		.loc 1 63 3 view .LVU496
  64:src/prt.c     **** 	}
 1800              		.loc 1 64 3 view .LVU497
  63:src/prt.c     **** 		return sncopy(instr, p, NAME_LEN);
 1801              		.loc 1 63 15 is_stmt 0 view .LVU498
 1802 00cc 0849     		ldr	r1, .L186+16
ARM GAS  /tmp/ccgbU3q8.s 			page 46


  64:src/prt.c     **** 	}
 1803              		.loc 1 64 10 view .LVU499
 1804 00ce 2846     		mov	r0, r5
 1805 00d0 01EB0411 		add	r1, r1, r4, lsl #4
 1806 00d4 0622     		movs	r2, #6
 1807              	.LBE120:
 1808              	.LBE119:
 1809              	.LBE123:
 1810              	.LBE129:
 1811              		.loc 1 316 1 view .LVU500
 1812 00d6 BDE83840 		pop	{r3, r4, r5, lr}
 1813              		.cfi_restore 14
 1814              		.cfi_restore 5
 1815              		.cfi_restore 4
 1816              		.cfi_restore 3
 1817              		.cfi_def_cfa_offset 0
 1818              	.LVL166:
 1819              	.LBB130:
 1820              	.LBB124:
 1821              	.LBB122:
 1822              	.LBB121:
  64:src/prt.c     **** 	}
 1823              		.loc 1 64 10 view .LVU501
 1824 00da FFF7FEBF 		b	sncopy
 1825              	.LVL167:
 1826              	.L187:
  64:src/prt.c     **** 	}
 1827              		.loc 1 64 10 view .LVU502
 1828 00de 00BF     		.align	2
 1829              	.L186:
 1830 00e0 00000000 		.word	dyfuncs
 1831 00e4 00000000 		.word	.LC0
 1832 00e8 00000000 		.word	monfuncs
 1833 00ec 00000000 		.word	.LANCHOR0
 1834 00f0 05000000 		.word	niladics+5
 1835              	.LBE121:
 1836              	.LBE122:
 1837              	.LBE124:
 1838              	.LBE130:
 1839              		.cfi_endproc
 1840              	.LFE14:
 1842              		.section	.rodata.prt_umen.str1.4,"aMS",%progbits,1
 1843              		.align	2
 1844              	.LC13:
 1845 0000 585100   		.ascii	"XQ\000"
 1846 0003 00       		.align	2
 1847              	.LC14:
 1848 0004 475400   		.ascii	"GT\000"
 1849 0007 00       		.align	2
 1850              	.LC15:
 1851 0008 534C00   		.ascii	"SL\000"
 1852              		.section	.text.prt_umen,"ax",%progbits
 1853              		.align	1
 1854              		.p2align 2,,3
 1855              		.global	prt_umen
 1856              		.syntax unified
 1857              		.thumb
ARM GAS  /tmp/ccgbU3q8.s 			page 47


 1858              		.thumb_func
 1859              		.fpu fpv4-sp-d16
 1861              	prt_umen:
 1862              	.LVL168:
 1863              	.LFB15:
 317:src/prt.c     **** const char *prt_umen(opcode op, char *instr) {
 1864              		.loc 1 317 46 is_stmt 1 view -0
 1865              		.cfi_startproc
 1866              		@ args = 0, pretend = 0, frame = 0
 1867              		@ frame_needed = 0, uses_anonymous_args = 0
 318:src/prt.c     **** 	unsigned int arg;
 1868              		.loc 1 318 2 view .LVU504
 319:src/prt.c     **** 	xset(instr, '\0', 16);
 1869              		.loc 1 319 2 view .LVU505
 317:src/prt.c     **** const char *prt_umen(opcode op, char *instr) {
 1870              		.loc 1 317 46 is_stmt 0 view .LVU506
 1871 0000 38B5     		push	{r3, r4, r5, lr}
 1872              		.cfi_def_cfa_offset 16
 1873              		.cfi_offset 3, -16
 1874              		.cfi_offset 4, -12
 1875              		.cfi_offset 5, -8
 1876              		.cfi_offset 14, -4
 1877              		.loc 1 319 2 view .LVU507
 1878 0002 1022     		movs	r2, #16
 317:src/prt.c     **** const char *prt_umen(opcode op, char *instr) {
 1879              		.loc 1 317 46 view .LVU508
 1880 0004 0446     		mov	r4, r0
 1881 0006 0D46     		mov	r5, r1
 1882              		.loc 1 319 2 view .LVU509
 1883 0008 0846     		mov	r0, r1
 1884              	.LVL169:
 1885              		.loc 1 319 2 view .LVU510
 1886 000a 0021     		movs	r1, #0
 1887              	.LVL170:
 1888              		.loc 1 319 2 view .LVU511
 1889 000c FFF7FEFF 		bl	xset
 1890              	.LVL171:
 320:src/prt.c     **** 	if (isDBL(op))
 1891              		.loc 1 320 2 is_stmt 1 view .LVU512
 1892              		.loc 1 320 6 is_stmt 0 view .LVU513
 1893 0010 04F47043 		and	r3, r4, #61440
 1894              		.loc 1 320 5 view .LVU514
 1895 0014 B3F5704F 		cmp	r3, #61440
 1896 0018 4DD0     		beq	.L228
 321:src/prt.c     **** 	  return prt_multi_umen(op, instr);
 322:src/prt.c     **** 	if (isRARG(op))
 1897              		.loc 1 322 2 is_stmt 1 view .LVU515
 1898              		.loc 1 322 5 is_stmt 0 view .LVU516
 1899 001a 002B     		cmp	r3, #0
 1900 001c 45D1     		bne	.L229
 323:src/prt.c     **** 		return prt_rargs(op, instr);
 324:src/prt.c     **** 	arg = argKIND(op);
 1901              		.loc 1 324 2 is_stmt 1 view .LVU517
 1902 001e C4F30723 		ubfx	r3, r4, #8, #8
 1903              		.loc 1 324 6 is_stmt 0 view .LVU518
 1904 0022 E4B2     		uxtb	r4, r4
 1905              	.LVL172:
ARM GAS  /tmp/ccgbU3q8.s 			page 48


 325:src/prt.c     **** 	switch (opKIND(op)) {
 1906              		.loc 1 325 2 is_stmt 1 view .LVU519
 1907 0024 062B     		cmp	r3, #6
 1908 0026 07D8     		bhi	.L216
 1909 0028 DFE803F0 		tbb	[pc, r3]
 1910              	.L199:
 1911 002c 0C       		.byte	(.L205-.L199)/2
 1912 002d 04       		.byte	(.L204-.L199)/2
 1913 002e 15       		.byte	(.L203-.L199)/2
 1914 002f 1B       		.byte	(.L202-.L199)/2
 1915 0030 21       		.byte	(.L201-.L199)/2
 1916 0031 27       		.byte	(.L200-.L199)/2
 1917 0032 08       		.byte	(.L198-.L199)/2
 1918 0033 00       		.p2align 1
 1919              	.L204:
 326:src/prt.c     **** 	case KIND_SPEC:	return prt_specials(arg, instr);
 327:src/prt.c     **** 	case KIND_NIL:	return prt_niladic(arg, instr);
 1920              		.loc 1 327 17 view .LVU520
 1921              	.LVL173:
 1922              	.LBB152:
 1923              	.LBI152:
  61:src/prt.c     **** 	if (idx < NUM_NILADIC) {
 1924              		.loc 1 61 20 view .LVU521
 1925              	.LBB153:
  62:src/prt.c     **** 		const char *p = niladics[idx].nname;
 1926              		.loc 1 62 2 view .LVU522
  62:src/prt.c     **** 		const char *p = niladics[idx].nname;
 1927              		.loc 1 62 5 is_stmt 0 view .LVU523
 1928 0034 DA2C     		cmp	r4, #218
 1929 0036 5CD9     		bls	.L230
 1930              	.LVL174:
 1931              	.L216:
  62:src/prt.c     **** 		const char *p = niladics[idx].nname;
 1932              		.loc 1 62 5 view .LVU524
 1933              	.LBE153:
 1934              	.LBE152:
 1935              	.LBB160:
 1936              	.LBB161:
 273:src/prt.c     **** 	switch (cmd) {
 1937              		.loc 1 273 10 view .LVU525
 1938 0038 3F48     		ldr	r0, .L233
 1939              	.LBE161:
 1940              	.LBE160:
 328:src/prt.c     **** 	case KIND_MON:	return prt_monadic(arg, instr);
 329:src/prt.c     **** 	case KIND_DYA:	return prt_dyadic(arg, instr);
 330:src/prt.c     **** 	case KIND_TRI:	return prt_triadic(arg, instr);
 331:src/prt.c     **** 	case KIND_CMON:	return prt_monadic_cmplx(arg, instr);
 332:src/prt.c     **** 	case KIND_CDYA:	return prt_dyadic_cmplx(arg, instr);
 333:src/prt.c     **** 	}
 334:src/prt.c     **** 	return "???";
 335:src/prt.c     **** }
 1941              		.loc 1 335 1 view .LVU526
 1942 003a 38BD     		pop	{r3, r4, r5, pc}
 1943              	.LVL175:
 1944              	.L198:
 332:src/prt.c     **** 	}
 1945              		.loc 1 332 18 is_stmt 1 view .LVU527
ARM GAS  /tmp/ccgbU3q8.s 			page 49


 1946              	.LBB164:
 1947              	.LBI164:
  55:src/prt.c     **** 	if (f < NUM_DYADIC && ! isNULL(dyfuncs[f].dydcmplx))
 1948              		.loc 1 55 20 view .LVU528
 1949              	.LBB165:
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 1950              		.loc 1 56 2 view .LVU529
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 1951              		.loc 1 56 5 is_stmt 0 view .LVU530
 1952 003c 342C     		cmp	r4, #52
 1953 003e FBD8     		bhi	.L216
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 1954              		.loc 1 56 26 view .LVU531
 1955 0040 3E49     		ldr	r1, .L233+4
 1956 0042 1DE0     		b	.L227
 1957              	.LVL176:
 1958              	.L205:
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 1959              		.loc 1 56 26 view .LVU532
 1960              	.LBE165:
 1961              	.LBE164:
 326:src/prt.c     **** 	case KIND_NIL:	return prt_niladic(arg, instr);
 1962              		.loc 1 326 18 is_stmt 1 view .LVU533
 1963              	.LBB173:
 1964              	.LBI173:
  80:src/prt.c     **** 	static const char digits[16] = "0123456789ABCDEF";
 1965              		.loc 1 80 20 view .LVU534
 1966              	.LBB174:
  81:src/prt.c     **** 	char cmp = '0';
 1967              		.loc 1 81 2 view .LVU535
  82:src/prt.c     **** 
 1968              		.loc 1 82 2 view .LVU536
  84:src/prt.c     **** 		*instr = digits[opm - OP_0];
 1969              		.loc 1 84 2 view .LVU537
  84:src/prt.c     **** 		*instr = digits[opm - OP_0];
 1970              		.loc 1 84 18 is_stmt 0 view .LVU538
 1971 0044 631F     		subs	r3, r4, #5
  84:src/prt.c     **** 		*instr = digits[opm - OP_0];
 1972              		.loc 1 84 5 view .LVU539
 1973 0046 0F2B     		cmp	r3, #15
 1974 0048 5CD9     		bls	.L231
 1975 004a 2946     		mov	r1, r5
 1976 004c 2046     		mov	r0, r4
 1977              	.LBE174:
 1978              	.LBE173:
 1979              		.loc 1 335 1 view .LVU540
 1980 004e BDE83840 		pop	{r3, r4, r5, lr}
 1981              		.cfi_remember_state
 1982              		.cfi_restore 14
 1983              		.cfi_restore 5
 1984              		.cfi_restore 4
 1985              		.cfi_restore 3
 1986              		.cfi_def_cfa_offset 0
 1987              	.LVL177:
 1988              	.LBB177:
 1989              	.LBB175:
 1990              		.loc 1 335 1 view .LVU541
ARM GAS  /tmp/ccgbU3q8.s 			page 50


 1991 0052 FFF7FEBF 		b	prt_specials.part.0
 1992              	.LVL178:
 1993              	.L203:
 1994              		.cfi_restore_state
 1995              		.loc 1 335 1 view .LVU542
 1996              	.LBE175:
 1997              	.LBE177:
 328:src/prt.c     **** 	case KIND_DYA:	return prt_dyadic(arg, instr);
 1998              		.loc 1 328 17 is_stmt 1 view .LVU543
 328:src/prt.c     **** 	case KIND_DYA:	return prt_dyadic(arg, instr);
 1999              		.loc 1 328 24 is_stmt 0 view .LVU544
 2000 0056 2946     		mov	r1, r5
 2001 0058 2046     		mov	r0, r4
 2002              		.loc 1 335 1 view .LVU545
 2003 005a BDE83840 		pop	{r3, r4, r5, lr}
 2004              		.cfi_remember_state
 2005              		.cfi_restore 14
 2006              		.cfi_restore 5
 2007              		.cfi_restore 4
 2008              		.cfi_restore 3
 2009              		.cfi_def_cfa_offset 0
 2010              	.LVL179:
 328:src/prt.c     **** 	case KIND_DYA:	return prt_dyadic(arg, instr);
 2011              		.loc 1 328 24 view .LVU546
 2012 005e FFF7FEBF 		b	prt_monadic
 2013              	.LVL180:
 2014              	.L202:
 2015              		.cfi_restore_state
 329:src/prt.c     **** 	case KIND_TRI:	return prt_triadic(arg, instr);
 2016              		.loc 1 329 17 is_stmt 1 view .LVU547
 329:src/prt.c     **** 	case KIND_TRI:	return prt_triadic(arg, instr);
 2017              		.loc 1 329 24 is_stmt 0 view .LVU548
 2018 0062 2946     		mov	r1, r5
 2019 0064 2046     		mov	r0, r4
 2020              		.loc 1 335 1 view .LVU549
 2021 0066 BDE83840 		pop	{r3, r4, r5, lr}
 2022              		.cfi_remember_state
 2023              		.cfi_restore 14
 2024              		.cfi_restore 5
 2025              		.cfi_restore 4
 2026              		.cfi_restore 3
 2027              		.cfi_def_cfa_offset 0
 2028              	.LVL181:
 329:src/prt.c     **** 	case KIND_TRI:	return prt_triadic(arg, instr);
 2029              		.loc 1 329 24 view .LVU550
 2030 006a FFF7FEBF 		b	prt_dyadic
 2031              	.LVL182:
 2032              	.L201:
 2033              		.cfi_restore_state
 330:src/prt.c     **** 	case KIND_CMON:	return prt_monadic_cmplx(arg, instr);
 2034              		.loc 1 330 17 is_stmt 1 view .LVU551
 330:src/prt.c     **** 	case KIND_CMON:	return prt_monadic_cmplx(arg, instr);
 2035              		.loc 1 330 24 is_stmt 0 view .LVU552
 2036 006e 2946     		mov	r1, r5
 2037 0070 2046     		mov	r0, r4
 2038              		.loc 1 335 1 view .LVU553
 2039 0072 BDE83840 		pop	{r3, r4, r5, lr}
ARM GAS  /tmp/ccgbU3q8.s 			page 51


 2040              		.cfi_remember_state
 2041              		.cfi_restore 14
 2042              		.cfi_restore 5
 2043              		.cfi_restore 4
 2044              		.cfi_restore 3
 2045              		.cfi_def_cfa_offset 0
 2046              	.LVL183:
 330:src/prt.c     **** 	case KIND_CMON:	return prt_monadic_cmplx(arg, instr);
 2047              		.loc 1 330 24 view .LVU554
 2048 0076 FFF7FEBF 		b	prt_triadic
 2049              	.LVL184:
 2050              	.L200:
 2051              		.cfi_restore_state
 331:src/prt.c     **** 	case KIND_CDYA:	return prt_dyadic_cmplx(arg, instr);
 2052              		.loc 1 331 18 is_stmt 1 view .LVU555
 2053              	.LBB178:
 2054              	.LBI178:
  49:src/prt.c     **** 	if (f < NUM_MONADIC && ! isNULL(monfuncs[f].mondcmplx))
 2055              		.loc 1 49 20 view .LVU556
 2056              	.LBB179:
  50:src/prt.c     **** 		return prt_cmplx(! isNULL(monfuncs[f].mondreal), monfuncs[f].fname, instr);
 2057              		.loc 1 50 2 view .LVU557
  50:src/prt.c     **** 		return prt_cmplx(! isNULL(monfuncs[f].mondreal), monfuncs[f].fname, instr);
 2058              		.loc 1 50 5 is_stmt 0 view .LVU558
 2059 007a 9B2C     		cmp	r4, #155
 2060 007c DCD8     		bhi	.L216
  50:src/prt.c     **** 		return prt_cmplx(! isNULL(monfuncs[f].mondreal), monfuncs[f].fname, instr);
 2061              		.loc 1 50 27 view .LVU559
 2062 007e 3049     		ldr	r1, .L233+8
 2063              	.LVL185:
 2064              	.L227:
  50:src/prt.c     **** 		return prt_cmplx(! isNULL(monfuncs[f].mondreal), monfuncs[f].fname, instr);
 2065              		.loc 1 50 27 view .LVU560
 2066              	.LBE179:
 2067              	.LBE178:
 2068              	.LBB180:
 2069              	.LBB172:
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 2070              		.loc 1 56 26 view .LVU561
 2071 0080 04EB4404 		add	r4, r4, r4, lsl #1
 2072              	.LVL186:
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 2073              		.loc 1 56 26 view .LVU562
 2074 0084 01EBC403 		add	r3, r1, r4, lsl #3
 2075 0088 E400     		lsls	r4, r4, #3
  56:src/prt.c     **** 		return prt_cmplx(! isNULL(dyfuncs[f].dydreal), dyfuncs[f].fname, instr);
 2076              		.loc 1 56 21 view .LVU563
 2077 008a 5B68     		ldr	r3, [r3, #4]
 2078 008c 002B     		cmp	r3, #0
 2079 008e D3D0     		beq	.L216
 2080              	.LVL187:
 2081              	.LBB166:
 2082              	.LBI166:
  55:src/prt.c     **** 	if (f < NUM_DYADIC && ! isNULL(dyfuncs[f].dydcmplx))
 2083              		.loc 1 55 20 is_stmt 1 view .LVU564
 2084              	.LBB167:
  57:src/prt.c     **** 	return "???";
ARM GAS  /tmp/ccgbU3q8.s 			page 52


 2085              		.loc 1 57 3 view .LVU565
 2086              	.LBB168:
 2087              	.LBB169:
  43:src/prt.c     **** 		*p++ = COMPLEX_PREFIX;
 2088              		.loc 1 43 5 is_stmt 0 view .LVU566
 2089 0090 0B59     		ldr	r3, [r1, r4]
 2090              	.LBE169:
 2091              	.LBE168:
  57:src/prt.c     **** 	return "???";
 2092              		.loc 1 57 60 view .LVU567
 2093 0092 0C34     		adds	r4, r4, #12
 2094 0094 2144     		add	r1, r1, r4
 2095              	.LVL188:
 2096              	.LBB171:
 2097              	.LBI168:
  41:src/prt.c     **** 	char *p = instr;
 2098              		.loc 1 41 20 is_stmt 1 view .LVU568
 2099              	.LBB170:
  42:src/prt.c     **** 	if (add_prefix)
 2100              		.loc 1 42 2 view .LVU569
  43:src/prt.c     **** 		*p++ = COMPLEX_PREFIX;
 2101              		.loc 1 43 2 view .LVU570
  44:src/prt.c     **** 	sncopy(p, name, NAME_LEN);
 2102              		.loc 1 44 5 is_stmt 0 view .LVU571
 2103 0096 2846     		mov	r0, r5
  43:src/prt.c     **** 		*p++ = COMPLEX_PREFIX;
 2104              		.loc 1 43 5 view .LVU572
 2105 0098 13B1     		cbz	r3, .L208
 2106              	.LVL189:
  44:src/prt.c     **** 	sncopy(p, name, NAME_LEN);
 2107              		.loc 1 44 3 is_stmt 1 view .LVU573
  44:src/prt.c     **** 	sncopy(p, name, NAME_LEN);
 2108              		.loc 1 44 8 is_stmt 0 view .LVU574
 2109 009a 1423     		movs	r3, #20
 2110 009c 00F8013B 		strb	r3, [r0], #1
 2111              	.LVL190:
 2112              	.L208:
  45:src/prt.c     **** 	return instr;
 2113              		.loc 1 45 2 is_stmt 1 view .LVU575
 2114 00a0 0622     		movs	r2, #6
 2115 00a2 FFF7FEFF 		bl	sncopy
 2116              	.LVL191:
 2117              	.L222:
  46:src/prt.c     **** }
 2118              		.loc 1 46 2 view .LVU576
  45:src/prt.c     **** 	return instr;
 2119              		.loc 1 45 2 is_stmt 0 view .LVU577
 2120 00a6 2846     		mov	r0, r5
 2121              	.LBE170:
 2122              	.LBE171:
 2123              	.LBE167:
 2124              	.LBE166:
 2125              	.LBE172:
 2126              	.LBE180:
 2127              		.loc 1 335 1 view .LVU578
 2128 00a8 38BD     		pop	{r3, r4, r5, pc}
 2129              	.LVL192:
ARM GAS  /tmp/ccgbU3q8.s 			page 53


 2130              	.L229:
 323:src/prt.c     **** 	arg = argKIND(op);
 2131              		.loc 1 323 3 is_stmt 1 view .LVU579
 323:src/prt.c     **** 	arg = argKIND(op);
 2132              		.loc 1 323 10 is_stmt 0 view .LVU580
 2133 00aa 2946     		mov	r1, r5
 2134 00ac 2046     		mov	r0, r4
 2135              		.loc 1 335 1 view .LVU581
 2136 00ae BDE83840 		pop	{r3, r4, r5, lr}
 2137              		.cfi_remember_state
 2138              		.cfi_restore 14
 2139              		.cfi_restore 5
 2140              		.cfi_restore 4
 2141              		.cfi_restore 3
 2142              		.cfi_def_cfa_offset 0
 2143              	.LVL193:
 323:src/prt.c     **** 	arg = argKIND(op);
 2144              		.loc 1 323 10 view .LVU582
 2145 00b2 FFF7FEBF 		b	prt_rargs
 2146              	.LVL194:
 2147              	.L228:
 2148              		.cfi_restore_state
 321:src/prt.c     **** 	if (isRARG(op))
 2149              		.loc 1 321 4 is_stmt 1 view .LVU583
 2150              	.LBB181:
 2151              	.LBI160:
 268:src/prt.c     **** 	char *p, c;
 2152              		.loc 1 268 20 view .LVU584
 2153              	.LBB162:
 269:src/prt.c     **** 	int cmd = opDBL(op);
 2154              		.loc 1 269 2 view .LVU585
 270:src/prt.c     **** 
 2155              		.loc 1 270 2 view .LVU586
 270:src/prt.c     **** 
 2156              		.loc 1 270 6 is_stmt 0 view .LVU587
 2157 00b6 C4F30322 		ubfx	r2, r4, #8, #4
 2158              	.LVL195:
 272:src/prt.c     **** 		return "???";
 2159              		.loc 1 272 2 is_stmt 1 view .LVU588
 272:src/prt.c     **** 		return "???";
 2160              		.loc 1 272 5 is_stmt 0 view .LVU589
 2161 00ba 0B2A     		cmp	r2, #11
 2162 00bc BCDC     		bgt	.L216
 274:src/prt.c     **** 	case DBL_XEQ:
 2163              		.loc 1 274 2 is_stmt 1 view .LVU590
 2164 00be 032A     		cmp	r2, #3
 2165 00c0 32D0     		beq	.L191
 2166 00c2 062A     		cmp	r2, #6
 2167 00c4 2AD0     		beq	.L192
 2168 00c6 022A     		cmp	r2, #2
 2169 00c8 21D0     		beq	.L232
 285:src/prt.c     **** 	}
 2170              		.loc 1 285 4 view .LVU591
 285:src/prt.c     **** 	}
 2171              		.loc 1 285 41 is_stmt 0 view .LVU592
 2172 00ca 1E49     		ldr	r1, .L233+12
 285:src/prt.c     **** 	}
ARM GAS  /tmp/ccgbU3q8.s 			page 54


 2173              		.loc 1 285 8 view .LVU593
 2174 00cc 2723     		movs	r3, #39
 2175 00ce 01EB0211 		add	r1, r1, r2, lsl #4
 2176 00d2 2846     		mov	r0, r5
 2177 00d4 0622     		movs	r2, #6
 2178              	.LVL196:
 285:src/prt.c     **** 	}
 2179              		.loc 1 285 8 view .LVU594
 2180 00d6 FFF7FEFF 		bl	sncopy_char
 2181              	.LVL197:
 2182              	.L194:
 287:src/prt.c     **** 	c = (op >> 16) & 0xff;
 2183              		.loc 1 287 4 is_stmt 1 view .LVU595
 289:src/prt.c     **** 		*p++ = c;
 2184              		.loc 1 289 5 is_stmt 0 view .LVU596
 2185 00da 14F47F0F 		tst	r4, #16711680
 287:src/prt.c     **** 	c = (op >> 16) & 0xff;
 2186              		.loc 1 287 9 view .LVU597
 2187 00de 0470     		strb	r4, [r0]
 288:src/prt.c     **** 	if (c != '\0') {
 2188              		.loc 1 288 2 is_stmt 1 view .LVU598
 288:src/prt.c     **** 	if (c != '\0') {
 2189              		.loc 1 288 4 is_stmt 0 view .LVU599
 2190 00e0 C4F30743 		ubfx	r3, r4, #16, #8
 2191              	.LVL198:
 289:src/prt.c     **** 		*p++ = c;
 2192              		.loc 1 289 2 is_stmt 1 view .LVU600
 289:src/prt.c     **** 		*p++ = c;
 2193              		.loc 1 289 5 is_stmt 0 view .LVU601
 2194 00e4 DFD0     		beq	.L222
 290:src/prt.c     **** 		c = op>>24;
 2195              		.loc 1 290 3 is_stmt 1 view .LVU602
 2196              	.LVL199:
 292:src/prt.c     **** 			*p++ = c;
 2197              		.loc 1 292 6 is_stmt 0 view .LVU603
 2198 00e6 240E     		lsrs	r4, r4, #24
 2199              	.LVL200:
 290:src/prt.c     **** 		c = op>>24;
 2200              		.loc 1 290 8 view .LVU604
 2201 00e8 4370     		strb	r3, [r0, #1]
 291:src/prt.c     **** 		if (c != '\0')
 2202              		.loc 1 291 3 is_stmt 1 view .LVU605
 2203              	.LVL201:
 292:src/prt.c     **** 			*p++ = c;
 2204              		.loc 1 292 3 view .LVU606
 292:src/prt.c     **** 			*p++ = c;
 2205              		.loc 1 292 6 is_stmt 0 view .LVU607
 2206 00ea DCD0     		beq	.L222
 293:src/prt.c     **** 	}
 2207              		.loc 1 293 4 is_stmt 1 view .LVU608
 2208              	.LVL202:
 291:src/prt.c     **** 		if (c != '\0')
 2209              		.loc 1 291 5 is_stmt 0 view .LVU609
 2210 00ec 8470     		strb	r4, [r0, #2]
 293:src/prt.c     **** 	}
 2211              		.loc 1 293 9 view .LVU610
 2212 00ee 2846     		mov	r0, r5
ARM GAS  /tmp/ccgbU3q8.s 			page 55


 2213              	.LVL203:
 293:src/prt.c     **** 	}
 2214              		.loc 1 293 9 view .LVU611
 2215              	.LBE162:
 2216              	.LBE181:
 2217              		.loc 1 335 1 view .LVU612
 2218 00f0 38BD     		pop	{r3, r4, r5, pc}
 2219              	.LVL204:
 2220              	.L230:
 2221              	.LBB182:
 2222              	.LBB158:
 2223              	.LBB154:
 2224              	.LBI154:
  61:src/prt.c     **** 	if (idx < NUM_NILADIC) {
 2225              		.loc 1 61 20 is_stmt 1 view .LVU613
 2226              	.LBB155:
  63:src/prt.c     **** 		return sncopy(instr, p, NAME_LEN);
 2227              		.loc 1 63 3 view .LVU614
  64:src/prt.c     **** 	}
 2228              		.loc 1 64 3 view .LVU615
  63:src/prt.c     **** 		return sncopy(instr, p, NAME_LEN);
 2229              		.loc 1 63 15 is_stmt 0 view .LVU616
 2230 00f2 1549     		ldr	r1, .L233+16
  64:src/prt.c     **** 	}
 2231              		.loc 1 64 10 view .LVU617
 2232 00f4 2846     		mov	r0, r5
 2233 00f6 01EB0411 		add	r1, r1, r4, lsl #4
 2234 00fa 0622     		movs	r2, #6
 2235              	.LBE155:
 2236              	.LBE154:
 2237              	.LBE158:
 2238              	.LBE182:
 2239              		.loc 1 335 1 view .LVU618
 2240 00fc BDE83840 		pop	{r3, r4, r5, lr}
 2241              		.cfi_remember_state
 2242              		.cfi_restore 14
 2243              		.cfi_restore 5
 2244              		.cfi_restore 4
 2245              		.cfi_restore 3
 2246              		.cfi_def_cfa_offset 0
 2247              	.LVL205:
 2248              	.LBB183:
 2249              	.LBB159:
 2250              	.LBB157:
 2251              	.LBB156:
  64:src/prt.c     **** 	}
 2252              		.loc 1 64 10 view .LVU619
 2253 0100 FFF7FEBF 		b	sncopy
 2254              	.LVL206:
 2255              	.L231:
 2256              		.cfi_restore_state
  64:src/prt.c     **** 	}
 2257              		.loc 1 64 10 view .LVU620
 2258              	.LBE156:
 2259              	.LBE157:
 2260              	.LBE159:
 2261              	.LBE183:
ARM GAS  /tmp/ccgbU3q8.s 			page 56


 2262              	.LBB184:
 2263              	.LBB176:
  85:src/prt.c     **** 		return instr;
 2264              		.loc 1 85 3 is_stmt 1 view .LVU621
  85:src/prt.c     **** 		return instr;
 2265              		.loc 1 85 18 is_stmt 0 view .LVU622
 2266 0104 114A     		ldr	r2, .L233+20
  85:src/prt.c     **** 		return instr;
 2267              		.loc 1 85 10 view .LVU623
 2268 0106 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2269 0108 2B70     		strb	r3, [r5]
  86:src/prt.c     **** 	}
 2270              		.loc 1 86 3 is_stmt 1 view .LVU624
  86:src/prt.c     **** 	}
 2271              		.loc 1 86 10 is_stmt 0 view .LVU625
 2272 010a 2846     		mov	r0, r5
 2273              	.LBE176:
 2274              	.LBE184:
 2275              		.loc 1 335 1 view .LVU626
 2276 010c 38BD     		pop	{r3, r4, r5, pc}
 2277              	.LVL207:
 2278              	.L232:
 2279              	.LBB185:
 2280              	.LBB163:
 276:src/prt.c     **** 	  break;
 2281              		.loc 1 276 4 is_stmt 1 view .LVU627
 276:src/prt.c     **** 	  break;
 2282              		.loc 1 276 8 is_stmt 0 view .LVU628
 2283 010e 1049     		ldr	r1, .L233+24
 2284 0110 2723     		movs	r3, #39
 2285 0112 0622     		movs	r2, #6
 2286              	.LVL208:
 276:src/prt.c     **** 	  break;
 2287              		.loc 1 276 8 view .LVU629
 2288 0114 2846     		mov	r0, r5
 2289 0116 FFF7FEFF 		bl	sncopy_char
 2290              	.LVL209:
 277:src/prt.c     **** 	case DBL_GTO:
 2291              		.loc 1 277 4 is_stmt 1 view .LVU630
 2292 011a DEE7     		b	.L194
 2293              	.LVL210:
 2294              	.L192:
 282:src/prt.c     **** 	  break;
 2295              		.loc 1 282 4 view .LVU631
 282:src/prt.c     **** 	  break;
 2296              		.loc 1 282 8 is_stmt 0 view .LVU632
 2297 011c 0D49     		ldr	r1, .L233+28
 2298 011e 2723     		movs	r3, #39
 2299 0120 2846     		mov	r0, r5
 2300 0122 FFF7FEFF 		bl	sncopy_char
 2301              	.LVL211:
 283:src/prt.c     **** 	default:
 2302              		.loc 1 283 4 is_stmt 1 view .LVU633
 2303 0126 D8E7     		b	.L194
 2304              	.LVL212:
 2305              	.L191:
 279:src/prt.c     **** 	  break;
ARM GAS  /tmp/ccgbU3q8.s 			page 57


 2306              		.loc 1 279 4 view .LVU634
 279:src/prt.c     **** 	  break;
 2307              		.loc 1 279 8 is_stmt 0 view .LVU635
 2308 0128 0B49     		ldr	r1, .L233+32
 2309 012a 2723     		movs	r3, #39
 2310 012c 0622     		movs	r2, #6
 2311              	.LVL213:
 279:src/prt.c     **** 	  break;
 2312              		.loc 1 279 8 view .LVU636
 2313 012e 2846     		mov	r0, r5
 2314 0130 FFF7FEFF 		bl	sncopy_char
 2315              	.LVL214:
 280:src/prt.c     **** 	case DBL_SOLVE:
 2316              		.loc 1 280 4 is_stmt 1 view .LVU637
 2317 0134 D1E7     		b	.L194
 2318              	.L234:
 2319 0136 00BF     		.align	2
 2320              	.L233:
 2321 0138 00000000 		.word	.LC0
 2322 013c 00000000 		.word	dyfuncs
 2323 0140 00000000 		.word	monfuncs
 2324 0144 04000000 		.word	multicmds+4
 2325 0148 05000000 		.word	niladics+5
 2326 014c 00000000 		.word	.LANCHOR0
 2327 0150 00000000 		.word	.LC13
 2328 0154 08000000 		.word	.LC15
 2329 0158 04000000 		.word	.LC14
 2330              	.LBE163:
 2331              	.LBE185:
 2332              		.cfi_endproc
 2333              	.LFE15:
 2335              		.section	.text.catcmd,"ax",%progbits
 2336              		.align	1
 2337              		.p2align 2,,3
 2338              		.global	catcmd
 2339              		.syntax unified
 2340              		.thumb
 2341              		.thumb_func
 2342              		.fpu fpv4-sp-d16
 2344              	catcmd:
 2345              	.LVL215:
 2346              	.LFB16:
 336:src/prt.c     **** 
 337:src/prt.c     **** const char *catcmd(opcode op, char instr[16]) {
 2347              		.loc 1 337 47 view -0
 2348              		.cfi_startproc
 2349              		@ args = 0, pretend = 0, frame = 0
 2350              		@ frame_needed = 0, uses_anonymous_args = 0
 338:src/prt.c     ****   unsigned int f;
 2351              		.loc 1 338 3 view .LVU639
 339:src/prt.c     ****   const char *name;
 2352              		.loc 1 339 3 view .LVU640
 340:src/prt.c     **** 
 341:src/prt.c     ****   xset(instr, '\0', 16);
 2353              		.loc 1 341 3 view .LVU641
 337:src/prt.c     ****   unsigned int f;
 2354              		.loc 1 337 47 is_stmt 0 view .LVU642
ARM GAS  /tmp/ccgbU3q8.s 			page 58


 2355 0000 38B5     		push	{r3, r4, r5, lr}
 2356              		.cfi_def_cfa_offset 16
 2357              		.cfi_offset 3, -16
 2358              		.cfi_offset 4, -12
 2359              		.cfi_offset 5, -8
 2360              		.cfi_offset 14, -4
 2361              		.loc 1 341 3 view .LVU643
 2362 0002 1022     		movs	r2, #16
 337:src/prt.c     ****   unsigned int f;
 2363              		.loc 1 337 47 view .LVU644
 2364 0004 0446     		mov	r4, r0
 2365 0006 0D46     		mov	r5, r1
 2366              		.loc 1 341 3 view .LVU645
 2367 0008 0846     		mov	r0, r1
 2368              	.LVL216:
 2369              		.loc 1 341 3 view .LVU646
 2370 000a 0021     		movs	r1, #0
 2371              	.LVL217:
 2372              		.loc 1 341 3 view .LVU647
 2373 000c FFF7FEFF 		bl	xset
 2374              	.LVL218:
 342:src/prt.c     ****   if (isDBL(op)) {
 2375              		.loc 1 342 3 is_stmt 1 view .LVU648
 2376              		.loc 1 342 7 is_stmt 0 view .LVU649
 2377 0010 04F47043 		and	r3, r4, #61440
 2378              		.loc 1 342 6 view .LVU650
 2379 0014 B3F5704F 		cmp	r3, #61440
 2380 0018 4AD0     		beq	.L258
 343:src/prt.c     ****     return prt_multi(op, instr);
 344:src/prt.c     ****   } else if (isRARG(op)) {
 2381              		.loc 1 344 10 is_stmt 1 view .LVU651
 2382              		.loc 1 344 13 is_stmt 0 view .LVU652
 2383 001a 6BB1     		cbz	r3, .L237
 345:src/prt.c     ****     f = RARG_CMD(op);
 2384              		.loc 1 345 5 is_stmt 1 view .LVU653
 2385              		.loc 1 345 9 is_stmt 0 view .LVU654
 2386 001c 230A     		lsrs	r3, r4, #8
 2387 001e 203B     		subs	r3, r3, #32
 2388 0020 DBB2     		uxtb	r3, r3
 2389              	.LVL219:
 346:src/prt.c     ****     if (f < NUM_RARG) {
 2390              		.loc 1 346 5 is_stmt 1 view .LVU655
 2391              		.loc 1 346 8 is_stmt 0 view .LVU656
 2392 0022 962B     		cmp	r3, #150
 2393 0024 17D8     		bhi	.L256
 347:src/prt.c     ****       if (f == RARG_CONV) {
 2394              		.loc 1 347 7 is_stmt 1 view .LVU657
 2395              		.loc 1 347 10 is_stmt 0 view .LVU658
 2396 0026 6C2B     		cmp	r3, #108
 2397 0028 52D0     		beq	.L259
 348:src/prt.c     **** 	return prt_conv(op & RARG_MASK, instr);
 349:src/prt.c     ****       }
 350:src/prt.c     **** #if defined(INCLUDE_USER_CATALOGUE) && !defined(COMPILE_CATALOGUES)
 351:src/prt.c     ****       else if (f == RARG_CONST || f == RARG_CONST_CMPLX || f == RARG_ALPHA) {
 352:src/prt.c     **** 	return prt(op, instr);
 353:src/prt.c     ****       }
 354:src/prt.c     **** #else
ARM GAS  /tmp/ccgbU3q8.s 			page 59


 355:src/prt.c     ****       else if (f == RARG_CONST || f == RARG_CONST_CMPLX) {
 2398              		.loc 1 355 12 is_stmt 1 view .LVU659
 2399              		.loc 1 355 15 is_stmt 0 view .LVU660
 2400 002a 012B     		cmp	r3, #1
 2401 002c 0FD9     		bls	.L260
 356:src/prt.c     **** 	const unsigned int arg = op & RARG_MASK;
 357:src/prt.c     **** 	if (arg < NUM_CONSTS)
 358:src/prt.c     **** 	  return sncopy(instr, cnsts[arg].cname, CONST_NAMELEN);
 359:src/prt.c     ****       }
 360:src/prt.c     ****       else if (f == RARG_ALPHA) {
 2402              		.loc 1 360 12 is_stmt 1 view .LVU661
 2403              		.loc 1 360 15 is_stmt 0 view .LVU662
 2404 002e 242B     		cmp	r3, #36
 2405 0030 44D1     		bne	.L241
 361:src/prt.c     **** 	*instr = op & 0xff;
 2406              		.loc 1 361 2 is_stmt 1 view .LVU663
 2407              		.loc 1 361 9 is_stmt 0 view .LVU664
 2408 0032 2C70     		strb	r4, [r5]
 362:src/prt.c     **** 	return instr;
 2409              		.loc 1 362 2 is_stmt 1 view .LVU665
 2410              		.loc 1 362 9 is_stmt 0 view .LVU666
 2411 0034 2846     		mov	r0, r5
 363:src/prt.c     ****       }
 364:src/prt.c     **** #endif
 365:src/prt.c     ****       else {
 366:src/prt.c     **** 	return sncopy(instr, argcmds[f].cmd, NAME_LEN);
 367:src/prt.c     ****       }
 368:src/prt.c     ****     }
 369:src/prt.c     ****   } else {
 370:src/prt.c     ****     f = argKIND(op);
 371:src/prt.c     ****     switch (opKIND(op)) {
 372:src/prt.c     ****     default:
 373:src/prt.c     ****       break;
 374:src/prt.c     ****     case KIND_SPEC:
 375:src/prt.c     ****       //    return prt_specials(f, instr);
 376:src/prt.c     ****       name = prt_specials(f, instr); 
 377:src/prt.c     ****       goto copy;
 378:src/prt.c     ****       // ND change - without this, it returns the string but doesn't copy it to instr.
 379:src/prt.c     ****     case KIND_NIL:
 380:src/prt.c     ****       if (f >= NUM_NILADIC) break;
 381:src/prt.c     ****       name = niladics[f].nname;
 382:src/prt.c     ****       goto copy;
 383:src/prt.c     **** 
 384:src/prt.c     ****     case KIND_MON:
 385:src/prt.c     ****     case KIND_CMON:
 386:src/prt.c     ****       if (f >= NUM_MONADIC) break;
 387:src/prt.c     ****       name = monfuncs[f].fname;
 388:src/prt.c     ****       goto copy;
 389:src/prt.c     **** 
 390:src/prt.c     ****     case KIND_DYA:
 391:src/prt.c     ****     case KIND_CDYA:
 392:src/prt.c     ****       if (f >= NUM_DYADIC) break;
 393:src/prt.c     ****       name = dyfuncs[f].fname;
 394:src/prt.c     ****       goto copy;
 395:src/prt.c     **** 
 396:src/prt.c     ****     case KIND_TRI:
 397:src/prt.c     ****       if (f >= NUM_TRIADIC) break;
ARM GAS  /tmp/ccgbU3q8.s 			page 60


 398:src/prt.c     ****       name = trifuncs[f].fname;
 399:src/prt.c     ****     copy:
 400:src/prt.c     ****       return sncopy(instr, name, NAME_LEN);
 401:src/prt.c     ****     }
 402:src/prt.c     ****   }
 403:src/prt.c     ****   return "???";
 404:src/prt.c     **** }
 2412              		.loc 1 404 1 view .LVU667
 2413 0036 38BD     		pop	{r3, r4, r5, pc}
 2414              	.LVL220:
 2415              	.L237:
 370:src/prt.c     ****     switch (opKIND(op)) {
 2416              		.loc 1 370 5 is_stmt 1 view .LVU668
 2417 0038 C4F30723 		ubfx	r3, r4, #8, #8
 370:src/prt.c     ****     switch (opKIND(op)) {
 2418              		.loc 1 370 7 is_stmt 0 view .LVU669
 2419 003c E0B2     		uxtb	r0, r4
 2420              	.LVL221:
 371:src/prt.c     ****     default:
 2421              		.loc 1 371 5 is_stmt 1 view .LVU670
 2422 003e 062B     		cmp	r3, #6
 2423 0040 09D8     		bhi	.L256
 2424 0042 DFE803F0 		tbb	[pc, r3]
 2425              	.L243:
 2426 0046 20       		.byte	(.L247-.L243)/2
 2427 0047 1A       		.byte	(.L246-.L243)/2
 2428 0048 12       		.byte	(.L244-.L243)/2
 2429 0049 0A       		.byte	(.L242-.L243)/2
 2430 004a 2D       		.byte	(.L245-.L243)/2
 2431 004b 12       		.byte	(.L244-.L243)/2
 2432 004c 0A       		.byte	(.L242-.L243)/2
 2433              	.LVL222:
 2434 004d 00       		.p2align 1
 2435              	.L260:
 2436              	.LBB186:
 356:src/prt.c     **** 	if (arg < NUM_CONSTS)
 2437              		.loc 1 356 2 view .LVU671
 356:src/prt.c     **** 	if (arg < NUM_CONSTS)
 2438              		.loc 1 356 21 is_stmt 0 view .LVU672
 2439 004e 04F07F04 		and	r4, r4, #127
 2440              	.LVL223:
 357:src/prt.c     **** 	  return sncopy(instr, cnsts[arg].cname, CONST_NAMELEN);
 2441              		.loc 1 357 2 is_stmt 1 view .LVU673
 357:src/prt.c     **** 	  return sncopy(instr, cnsts[arg].cname, CONST_NAMELEN);
 2442              		.loc 1 357 5 is_stmt 0 view .LVU674
 2443 0052 692C     		cmp	r4, #105
 2444 0054 48D9     		bls	.L261
 2445              	.LVL224:
 2446              	.L256:
 357:src/prt.c     **** 	  return sncopy(instr, cnsts[arg].cname, CONST_NAMELEN);
 2447              		.loc 1 357 5 view .LVU675
 2448              	.LBE186:
 403:src/prt.c     **** }
 2449              		.loc 1 403 10 view .LVU676
 2450 0056 2A48     		ldr	r0, .L263
 2451              		.loc 1 404 1 view .LVU677
 2452 0058 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccgbU3q8.s 			page 61


 2453              	.LVL225:
 2454              	.L242:
 392:src/prt.c     ****       name = dyfuncs[f].fname;
 2455              		.loc 1 392 7 is_stmt 1 view .LVU678
 392:src/prt.c     ****       name = dyfuncs[f].fname;
 2456              		.loc 1 392 10 is_stmt 0 view .LVU679
 2457 005a 3428     		cmp	r0, #52
 2458 005c FBD8     		bhi	.L256
 393:src/prt.c     ****       goto copy;
 2459              		.loc 1 393 7 is_stmt 1 view .LVU680
 393:src/prt.c     ****       goto copy;
 2460              		.loc 1 393 12 is_stmt 0 view .LVU681
 2461 005e 2949     		ldr	r1, .L263+4
 2462 0060 00EB4004 		add	r4, r0, r0, lsl #1
 2463              	.LVL226:
 393:src/prt.c     ****       goto copy;
 2464              		.loc 1 393 12 view .LVU682
 2465 0064 01EBC401 		add	r1, r1, r4, lsl #3
 2466              	.LVL227:
 394:src/prt.c     **** 
 2467              		.loc 1 394 7 is_stmt 1 view .LVU683
 2468 0068 14E0     		b	.L249
 2469              	.LVL228:
 2470              	.L244:
 386:src/prt.c     ****       name = monfuncs[f].fname;
 2471              		.loc 1 386 7 view .LVU684
 386:src/prt.c     ****       name = monfuncs[f].fname;
 2472              		.loc 1 386 10 is_stmt 0 view .LVU685
 2473 006a 9B28     		cmp	r0, #155
 2474 006c F3D8     		bhi	.L256
 387:src/prt.c     ****       goto copy;
 2475              		.loc 1 387 7 is_stmt 1 view .LVU686
 387:src/prt.c     ****       goto copy;
 2476              		.loc 1 387 12 is_stmt 0 view .LVU687
 2477 006e 2649     		ldr	r1, .L263+8
 2478 0070 00EB4004 		add	r4, r0, r0, lsl #1
 2479              	.LVL229:
 387:src/prt.c     ****       goto copy;
 2480              		.loc 1 387 12 view .LVU688
 2481 0074 01EBC401 		add	r1, r1, r4, lsl #3
 2482              	.LVL230:
 388:src/prt.c     **** 
 2483              		.loc 1 388 7 is_stmt 1 view .LVU689
 2484 0078 0CE0     		b	.L249
 2485              	.LVL231:
 2486              	.L246:
 380:src/prt.c     ****       name = niladics[f].nname;
 2487              		.loc 1 380 7 view .LVU690
 380:src/prt.c     ****       name = niladics[f].nname;
 2488              		.loc 1 380 10 is_stmt 0 view .LVU691
 2489 007a DA28     		cmp	r0, #218
 2490 007c EBD8     		bhi	.L256
 381:src/prt.c     ****       goto copy;
 2491              		.loc 1 381 7 is_stmt 1 view .LVU692
 381:src/prt.c     ****       goto copy;
 2492              		.loc 1 381 12 is_stmt 0 view .LVU693
 2493 007e 2349     		ldr	r1, .L263+12
ARM GAS  /tmp/ccgbU3q8.s 			page 62


 2494 0080 01EB0011 		add	r1, r1, r0, lsl #4
 2495              	.LVL232:
 382:src/prt.c     **** 
 2496              		.loc 1 382 7 is_stmt 1 view .LVU694
 2497 0084 06E0     		b	.L249
 2498              	.LVL233:
 2499              	.L247:
 376:src/prt.c     ****       goto copy;
 2500              		.loc 1 376 7 view .LVU695
 2501              	.LBB187:
 2502              	.LBI187:
  80:src/prt.c     **** 	static const char digits[16] = "0123456789ABCDEF";
 2503              		.loc 1 80 20 view .LVU696
 2504              	.LBB188:
  81:src/prt.c     **** 	char cmp = '0';
 2505              		.loc 1 81 2 view .LVU697
  82:src/prt.c     **** 
 2506              		.loc 1 82 2 view .LVU698
  84:src/prt.c     **** 		*instr = digits[opm - OP_0];
 2507              		.loc 1 84 2 view .LVU699
  84:src/prt.c     **** 		*instr = digits[opm - OP_0];
 2508              		.loc 1 84 18 is_stmt 0 view .LVU700
 2509 0086 431F     		subs	r3, r0, #5
  84:src/prt.c     **** 		*instr = digits[opm - OP_0];
 2510              		.loc 1 84 5 view .LVU701
 2511 0088 0F2B     		cmp	r3, #15
 2512 008a 28D9     		bls	.L262
 2513 008c 2946     		mov	r1, r5
 2514 008e FFF7FEFF 		bl	prt_specials.part.0
 2515              	.LVL234:
  84:src/prt.c     **** 		*instr = digits[opm - OP_0];
 2516              		.loc 1 84 5 view .LVU702
 2517 0092 0146     		mov	r1, r0
 2518              	.LVL235:
 2519              	.L249:
  84:src/prt.c     **** 		*instr = digits[opm - OP_0];
 2520              		.loc 1 84 5 view .LVU703
 2521              	.LBE188:
 2522              	.LBE187:
 400:src/prt.c     ****     }
 2523              		.loc 1 400 7 is_stmt 1 view .LVU704
 400:src/prt.c     ****     }
 2524              		.loc 1 400 14 is_stmt 0 view .LVU705
 2525 0094 2846     		mov	r0, r5
 2526 0096 0622     		movs	r2, #6
 2527              		.loc 1 404 1 view .LVU706
 2528 0098 BDE83840 		pop	{r3, r4, r5, lr}
 2529              		.cfi_remember_state
 2530              		.cfi_restore 14
 2531              		.cfi_restore 5
 2532              		.cfi_restore 4
 2533              		.cfi_restore 3
 2534              		.cfi_def_cfa_offset 0
 2535              	.LVL236:
 400:src/prt.c     ****     }
 2536              		.loc 1 400 14 view .LVU707
 2537 009c FFF7FEBF 		b	sncopy
ARM GAS  /tmp/ccgbU3q8.s 			page 63


 2538              	.LVL237:
 2539              	.L245:
 2540              		.cfi_restore_state
 397:src/prt.c     ****       name = trifuncs[f].fname;
 2541              		.loc 1 397 7 is_stmt 1 view .LVU708
 397:src/prt.c     ****       name = trifuncs[f].fname;
 2542              		.loc 1 397 10 is_stmt 0 view .LVU709
 2543 00a0 0B28     		cmp	r0, #11
 2544 00a2 D8D8     		bhi	.L256
 398:src/prt.c     ****     copy:
 2545              		.loc 1 398 7 is_stmt 1 view .LVU710
 398:src/prt.c     ****     copy:
 2546              		.loc 1 398 12 is_stmt 0 view .LVU711
 2547 00a4 1A49     		ldr	r1, .L263+16
 2548 00a6 00EB8004 		add	r4, r0, r0, lsl #2
 2549              	.LVL238:
 398:src/prt.c     ****     copy:
 2550              		.loc 1 398 12 view .LVU712
 2551 00aa 01EB8401 		add	r1, r1, r4, lsl #2
 2552              	.LVL239:
 398:src/prt.c     ****     copy:
 2553              		.loc 1 398 12 view .LVU713
 2554 00ae F1E7     		b	.L249
 2555              	.LVL240:
 2556              	.L258:
 343:src/prt.c     ****   } else if (isRARG(op)) {
 2557              		.loc 1 343 5 is_stmt 1 view .LVU714
 343:src/prt.c     ****   } else if (isRARG(op)) {
 2558              		.loc 1 343 12 is_stmt 0 view .LVU715
 2559 00b0 2946     		mov	r1, r5
 2560 00b2 2046     		mov	r0, r4
 2561              		.loc 1 404 1 view .LVU716
 2562 00b4 BDE83840 		pop	{r3, r4, r5, lr}
 2563              		.cfi_remember_state
 2564              		.cfi_restore 14
 2565              		.cfi_restore 5
 2566              		.cfi_restore 4
 2567              		.cfi_restore 3
 2568              		.cfi_def_cfa_offset 0
 2569              	.LVL241:
 343:src/prt.c     ****   } else if (isRARG(op)) {
 2570              		.loc 1 343 12 view .LVU717
 2571 00b8 FFF7FEBF 		b	prt_multi
 2572              	.LVL242:
 2573              	.L241:
 2574              		.cfi_restore_state
 366:src/prt.c     ****       }
 2575              		.loc 1 366 2 is_stmt 1 view .LVU718
 366:src/prt.c     ****       }
 2576              		.loc 1 366 33 is_stmt 0 view .LVU719
 2577 00bc 1549     		ldr	r1, .L263+20
 2578 00be 0622     		movs	r2, #6
 2579 00c0 02EB0313 		add	r3, r2, r3, lsl #4
 2580              	.LVL243:
 366:src/prt.c     ****       }
 2581              		.loc 1 366 9 view .LVU720
 2582 00c4 2846     		mov	r0, r5
ARM GAS  /tmp/ccgbU3q8.s 			page 64


 2583 00c6 1944     		add	r1, r1, r3
 2584              		.loc 1 404 1 view .LVU721
 2585 00c8 BDE83840 		pop	{r3, r4, r5, lr}
 2586              		.cfi_remember_state
 2587              		.cfi_restore 14
 2588              		.cfi_restore 5
 2589              		.cfi_restore 4
 2590              		.cfi_restore 3
 2591              		.cfi_def_cfa_offset 0
 2592              	.LVL244:
 366:src/prt.c     ****       }
 2593              		.loc 1 366 9 view .LVU722
 2594 00cc FFF7FEBF 		b	sncopy
 2595              	.LVL245:
 2596              	.L259:
 2597              		.cfi_restore_state
 348:src/prt.c     ****       }
 2598              		.loc 1 348 2 is_stmt 1 view .LVU723
 348:src/prt.c     ****       }
 2599              		.loc 1 348 9 is_stmt 0 view .LVU724
 2600 00d0 2946     		mov	r1, r5
 2601 00d2 04F07F00 		and	r0, r4, #127
 2602              		.loc 1 404 1 view .LVU725
 2603 00d6 BDE83840 		pop	{r3, r4, r5, lr}
 2604              		.cfi_remember_state
 2605              		.cfi_restore 14
 2606              		.cfi_restore 5
 2607              		.cfi_restore 4
 2608              		.cfi_restore 3
 2609              		.cfi_def_cfa_offset 0
 2610              	.LVL246:
 348:src/prt.c     ****       }
 2611              		.loc 1 348 9 view .LVU726
 2612 00da FFF7FEBF 		b	prt_conv
 2613              	.LVL247:
 2614              	.L262:
 2615              		.cfi_restore_state
 2616              	.LBB190:
 2617              	.LBB189:
  85:src/prt.c     **** 		return instr;
 2618              		.loc 1 85 3 is_stmt 1 view .LVU727
  85:src/prt.c     **** 		return instr;
 2619              		.loc 1 85 18 is_stmt 0 view .LVU728
 2620 00de 0E4A     		ldr	r2, .L263+24
  85:src/prt.c     **** 		return instr;
 2621              		.loc 1 85 10 view .LVU729
 2622 00e0 D35C     		ldrb	r3, [r2, r3]	@ zero_extendqisi2
 2623 00e2 2B70     		strb	r3, [r5]
  86:src/prt.c     **** 	}
 2624              		.loc 1 86 3 is_stmt 1 view .LVU730
  86:src/prt.c     **** 	}
 2625              		.loc 1 86 10 is_stmt 0 view .LVU731
 2626 00e4 2946     		mov	r1, r5
 2627 00e6 D5E7     		b	.L249
 2628              	.LVL248:
 2629              	.L261:
  86:src/prt.c     **** 	}
ARM GAS  /tmp/ccgbU3q8.s 			page 65


 2630              		.loc 1 86 10 view .LVU732
 2631              	.LBE189:
 2632              	.LBE190:
 2633              	.LBB191:
 358:src/prt.c     ****       }
 2634              		.loc 1 358 4 is_stmt 1 view .LVU733
 358:src/prt.c     ****       }
 2635              		.loc 1 358 35 is_stmt 0 view .LVU734
 2636 00e8 0C49     		ldr	r1, .L263+28
 2637 00ea 04EB4404 		add	r4, r4, r4, lsl #1
 2638              	.LVL249:
 358:src/prt.c     ****       }
 2639              		.loc 1 358 11 view .LVU735
 2640 00ee 2846     		mov	r0, r5
 2641 00f0 01EB8401 		add	r1, r1, r4, lsl #2
 2642 00f4 0422     		movs	r2, #4
 2643              	.LBE191:
 2644              		.loc 1 404 1 view .LVU736
 2645 00f6 BDE83840 		pop	{r3, r4, r5, lr}
 2646              		.cfi_restore 14
 2647              		.cfi_restore 5
 2648              		.cfi_restore 4
 2649              		.cfi_restore 3
 2650              		.cfi_def_cfa_offset 0
 2651              	.LVL250:
 2652              	.LBB192:
 358:src/prt.c     ****       }
 2653              		.loc 1 358 11 view .LVU737
 2654 00fa FFF7FEBF 		b	sncopy
 2655              	.LVL251:
 2656              	.L264:
 358:src/prt.c     ****       }
 2657              		.loc 1 358 11 view .LVU738
 2658 00fe 00BF     		.align	2
 2659              	.L263:
 2660 0100 00000000 		.word	.LC0
 2661 0104 0C000000 		.word	dyfuncs+12
 2662 0108 0C000000 		.word	monfuncs+12
 2663 010c 05000000 		.word	niladics+5
 2664 0110 08000000 		.word	trifuncs+8
 2665 0114 00000000 		.word	argcmds
 2666 0118 00000000 		.word	.LANCHOR0
 2667 011c 01000000 		.word	cnsts+1
 2668              	.LBE192:
 2669              		.cfi_endproc
 2670              	.LFE16:
 2672              		.section	.rodata.digits.8307,"a"
 2673              		.align	2
 2674              		.set	.LANCHOR0,. + 0
 2677              	digits.8307:
 2678 0000 30313233 		.ascii	"0123456789ABCDEF"
 2678      34353637 
 2678      38394142 
 2678      43444546 
 2679              		.text
 2680              	.Letext0:
 2681              		.file 2 "src/decNumber/decContext.h"
ARM GAS  /tmp/ccgbU3q8.s 			page 66


 2682              		.file 3 "src/decNumber/decNumber.h"
 2683              		.file 4 "src/decNumber/decimal64.h"
 2684              		.file 5 "src/decNumber/decimal128.h"
 2685              		.file 6 "src/xeq.h"
 2686              		.file 7 "src/data.h"
 2687              		.file 8 "src/storage.h"
 2688              		.file 9 "src/display.h"
 2689              		.file 10 "src/consts.h"
ARM GAS  /tmp/ccgbU3q8.s 			page 67


DEFINED SYMBOLS
                            *ABS*:0000000000000000 prt.c
     /tmp/ccgbU3q8.s:18     .rodata.prt_multi.str1.4:0000000000000000 $d
     /tmp/ccgbU3q8.s:22     .text.prt_multi:0000000000000000 $t
     /tmp/ccgbU3q8.s:30     .text.prt_multi:0000000000000000 prt_multi
     /tmp/ccgbU3q8.s:139    .text.prt_multi:0000000000000050 $d
     /tmp/ccgbU3q8.s:145    .text.prt_conv:0000000000000000 $t
     /tmp/ccgbU3q8.s:152    .text.prt_conv:0000000000000000 prt_conv
     /tmp/ccgbU3q8.s:248    .text.prt_conv:000000000000005c $d
     /tmp/ccgbU3q8.s:254    .rodata.prt_specials.part.0.str1.4:0000000000000000 $d
     /tmp/ccgbU3q8.s:279    .text.prt_specials.part.0:0000000000000000 $t
     /tmp/ccgbU3q8.s:286    .text.prt_specials.part.0:0000000000000000 prt_specials.part.0
     /tmp/ccgbU3q8.s:365    .text.prt_specials.part.0:0000000000000032 $d
     /tmp/ccgbU3q8.s:622    .text.prt_specials.part.0:00000000000000e4 $d
     /tmp/ccgbU3q8.s:636    .text.prt_monadic:0000000000000000 $t
     /tmp/ccgbU3q8.s:643    .text.prt_monadic:0000000000000000 prt_monadic
     /tmp/ccgbU3q8.s:728    .text.prt_monadic:000000000000003c $d
     /tmp/ccgbU3q8.s:734    .text.prt_dyadic:0000000000000000 $t
     /tmp/ccgbU3q8.s:741    .text.prt_dyadic:0000000000000000 prt_dyadic
     /tmp/ccgbU3q8.s:826    .text.prt_dyadic:000000000000003c $d
     /tmp/ccgbU3q8.s:832    .text.prt_triadic:0000000000000000 $t
     /tmp/ccgbU3q8.s:839    .text.prt_triadic:0000000000000000 prt_triadic
     /tmp/ccgbU3q8.s:924    .text.prt_triadic:000000000000003c $d
     /tmp/ccgbU3q8.s:930    .text.num_arg_digits.part.0:0000000000000000 $t
     /tmp/ccgbU3q8.s:937    .text.num_arg_digits.part.0:0000000000000000 num_arg_digits.part.0
     /tmp/ccgbU3q8.s:979    .text.num_arg_digits.part.0:000000000000002c $d
     /tmp/ccgbU3q8.s:985    .rodata.prt_rargs.str1.4:0000000000000000 $d
     /tmp/ccgbU3q8.s:998    .text.prt_rargs:0000000000000000 $t
     /tmp/ccgbU3q8.s:1005   .text.prt_rargs:0000000000000000 prt_rargs
     /tmp/ccgbU3q8.s:1403   .text.prt_rargs:0000000000000178 $d
     /tmp/ccgbU3q8.s:1414   .text.num_arg_digits:0000000000000000 $t
     /tmp/ccgbU3q8.s:1422   .text.num_arg_digits:0000000000000000 num_arg_digits
     /tmp/ccgbU3q8.s:1463   .text.num_arg_digits:000000000000001c $d
     /tmp/ccgbU3q8.s:1468   .text.prt:0000000000000000 $t
     /tmp/ccgbU3q8.s:1476   .text.prt:0000000000000000 prt
     /tmp/ccgbU3q8.s:1526   .text.prt:000000000000002c $d
     /tmp/ccgbU3q8.s:1830   .text.prt:00000000000000e0 $d
     /tmp/ccgbU3q8.s:1843   .rodata.prt_umen.str1.4:0000000000000000 $d
     /tmp/ccgbU3q8.s:1853   .text.prt_umen:0000000000000000 $t
     /tmp/ccgbU3q8.s:1861   .text.prt_umen:0000000000000000 prt_umen
     /tmp/ccgbU3q8.s:1911   .text.prt_umen:000000000000002c $d
     /tmp/ccgbU3q8.s:2321   .text.prt_umen:0000000000000138 $d
     /tmp/ccgbU3q8.s:2336   .text.catcmd:0000000000000000 $t
     /tmp/ccgbU3q8.s:2344   .text.catcmd:0000000000000000 catcmd
     /tmp/ccgbU3q8.s:2426   .text.catcmd:0000000000000046 $d
     /tmp/ccgbU3q8.s:2660   .text.catcmd:0000000000000100 $d
     /tmp/ccgbU3q8.s:2673   .rodata.digits.8307:0000000000000000 $d
     /tmp/ccgbU3q8.s:2677   .rodata.digits.8307:0000000000000000 digits.8307
     /tmp/ccgbU3q8.s:408    .text.prt_specials.part.0:000000000000005d $d
     /tmp/ccgbU3q8.s:408    .text.prt_specials.part.0:000000000000005e $t
     /tmp/ccgbU3q8.s:1533   .text.prt:0000000000000033 $d
     /tmp/ccgbU3q8.s:1533   .text.prt:0000000000000034 $t
     /tmp/ccgbU3q8.s:1918   .text.prt_umen:0000000000000033 $d
     /tmp/ccgbU3q8.s:1918   .text.prt_umen:0000000000000034 $t
     /tmp/ccgbU3q8.s:2434   .text.catcmd:000000000000004d $d
     /tmp/ccgbU3q8.s:2434   .text.catcmd:000000000000004e $t

ARM GAS  /tmp/ccgbU3q8.s 			page 68


UNDEFINED SYMBOLS
sncopy_char
multicmds
sncopy
cnsts_conv
main_ram
monfuncs
dyfuncs
trifuncs
StateWhileOn
argcmds
scopy
num_arg_0
cnsts
xset
niladics
